{
    "fix": "https://github.com/OpenSC/OpenSC/commit/456ac566938a1da774db06126a2fa6c0cba514b3",
    "verify": "0",
    "localId": 35766,
    "project": "opensc",
    "fuzzer": "afl",
    "sanitizer": "asan",
    "crash_type": "Stack-buffer-overflow READ 1",
    "severity": "Medium",
    "report": {
        "comments": [
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "commenter": {
                    "userId": "382749006",
                    "displayName": "ClusterFuzz-External"
                },
                "timestamp": 1625260924,
                "content": "Detailed Report: https://oss-fuzz.com/testcase?key=4722545294180352\n\nProject: opensc\nFuzzing Engine: afl\nFuzz Target: fuzz_pkcs15_reader\nJob Type: afl_asan_opensc\nPlatform Id: linux\n\nCrash Type: Stack-buffer-overflow READ 1\nCrash Address: 0x7ffe588dc643\nCrash State:\n  sc_asn1_read_tag\n  sc_asn1_find_tag\n  piv_compute_signature\n  \nSanitizer: address (ASAN)\n\nRecommended Security Severity: Medium\n\nRegressed: https://oss-fuzz.com/revisions?job=afl_asan_opensc&range=202103160603:202103170622\n\nReproducer Testcase: https://oss-fuzz.com/download?testcase_id=4722545294180352\n\nIssue filed automatically.\n\nSee https://google.github.io/oss-fuzz/advanced-topics/reproducing for instructions to reproduce this bug locally.\nWhen you fix this bug, please\n  * mention the fix revision(s).\n  * state whether the bug was a short-lived regression or an old bug in any stable releases.\n  * add any other useful information.\nThis information can help downstream consumers.\n\nIf you need to contact the OSS-Fuzz team with a question, concern, or any other feedback, please file an issue at https://github.com/google/oss-fuzz/issues. Comments on individual Monorail issues are not monitored.\n\nThis bug is subject to a 90 day disclosure deadline. If 90 days elapse\nwithout an upstream patch, then the bug report will automatically\nbecome visible to the public.",
                "descriptionNum": 1
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 1,
                "commenter": {
                    "userId": "3040719996",
                    "displayName": "deeng...@gmail.com"
                },
                "timestamp": 1625314093,
                "content": "looks like https://github.com/OpenSC/OpenSC/blob/aa6574b60ec03e79973520bc2d363e45932313ac/src/libopensc/asn1.c#L76-L77 can set `*tag_out = SC_ASN1_TAG_EOC` i.e. 0 and return SC_SUCCESS. But when called by  `sc_asn1_find_tag` at https://github.com/OpenSC/OpenSC/blob/aa6574b60ec03e79973520bc2d363e45932313ac/src/libopensc/asn1.c#L493-L494 it does not test if for tag == 0\n\nSuggest that adding a line between L493-L494 of `|| tag ==  SC_ASN1_TAG_EOC || taglen == 0` would catch the end and fix  this problem.  \n\n\n"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 2,
                "commenter": {
                    "userId": "1950284618",
                    "displayName": "sheriffbot"
                },
                "timestamp": 1625339219,
                "amendments": [
                    {
                        "fieldName": "Labels",
                        "newOrDeltaValue": "Disclosure-2021-09-30"
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 3,
                "commenter": {
                    "userId": "1917823890",
                    "displayName": "jak...@gmail.com"
                },
                "timestamp": 1625559754,
                "content": "Verified locally that the following patch solves the issue:\n```\ndiff --git a/src/libopensc/asn1.c b/src/libopensc/asn1.c\nindex 0ceeedf2..7ee3735f 100644\n--- a/src/libopensc/asn1.c\n+++ b/src/libopensc/asn1.c\n@@ -491,7 +491,7 @@ const u8 *sc_asn1_find_tag(sc_context_t *ctx, const u8 * buf,\n \t\tbuf = p;\n \t\t/* read a tag */\n \t\tif (sc_asn1_read_tag(&p, left, &cla, &tag, &taglen) != SC_SUCCESS\n-\t\t\t\t|| p == NULL)\n+\t\t\t\t|| p == NULL || tag ==  SC_ASN1_TAG_EOC || taglen == 0)\n \t\t\treturn NULL;\n \n \t\tleft -= (p - buf);\n```"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 4,
                "commenter": {
                    "userId": "3040719996",
                    "displayName": "deeng...@gmail.com"
                },
                "timestamp": 1625600667,
                "content": "The problem may not be in  ac_asn1_read_tag, but in piv_compute_signature If the fuzzing is really being introduced in piv_validate_general_authentication,\n then calling `body = sc_asn1_find_tag(card->ctx, rbuf, r, 0x30, &bodylen);` with a bad size could be the problem. \nBut note  \"r\" is int, but should be size_t.  and the data should fit in rbuf that is size 128  (twice as big enough for a ECDSA 384 signature that is 64 bytes.)\n\n\"[32, 160) 'rbuf' (line 2396) <== Memory access at offset 163 overflows this variable\" which may be the real problem.\n\nThis attached patch tries to fix this, by using a size_t  buflen and also checking that the data will fit in 128 bytes. \n\nComments?\n\n\n\n\n",
                "attachments": [
                    {
                        "attachmentId": "509693",
                        "filename": "fuzz.piv-card.diff.txt",
                        "size": "986",
                        "contentType": "text/plain",
                        "viewUrl": "/p/oss-fuzz/issues/attachmentText?aid=509693",
                        "downloadUrl": "attachment?aid=509693&signed_aid=MZFocYtKModxbCl4uAOh4g=="
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 5,
                "commenter": {
                    "userId": "3040719996",
                    "displayName": "deeng...@gmail.com"
                },
                "timestamp": 1625660912,
                "content": "Jakub, can you add the attached patch to any fuzz update for this issue?\n\nThe problem in card-piv.c is not that r is int, but that if card returns a bigger then expected response to a crypto operation, there is a chance there will be a buffer overflow. The change to piv_validate_general_authentication was not testing if the response was bigger then then the expected result. It the case of this fuzz test, it was testing for an ECDSA response of  DER SEQUENCE{INTEGER, INTEGER}\n\nIn addition the piv_compute_signature for ECDSA was not checking  that each integer must be <= nLen (with possible leading zero byte so integer is positive).\n\n For example with a 256 curve the response should look like:\n7309 Incoming APDU (77 bytes):\n7310 7C 49 82 47 30 45 02 21 00 E9 B9 2D C9 11 0A 69 |I.G0E.!...-...i\n7311 18 34 05 7B D5 3D 9D B1 29 44 50 5C 04 01 B7 91 .4.{.=..)DP\\....\n7312 16 65 03 A0 A4 7D CF 93 B6 02 20 79 AD BA C6 0C .e...}.... y....\n7313 32 8D FD 6D 6C E1 9C 59 40 FB 81 C7 92 77 15 12 2..ml..Y@....w..\n7314 EF 2A 9C A2 8F B3 DE 52 5C E8 F7 90 00     \n\nThe 7C and 82 tags are parsed in piv_validate_general_authentication and the ECDSA sequence starting with 30  is parsed in  piv_compute_signature\n\nThe fuzz-card-piv-v2.txt replaces the fuzz.card-piv.diff.txt",
                "attachments": [
                    {
                        "attachmentId": "509770",
                        "filename": "fuzz-card-piv-v2.diff",
                        "size": "1625",
                        "contentType": "text/plain",
                        "viewUrl": "/p/oss-fuzz/issues/attachmentText?aid=509770",
                        "downloadUrl": "attachment?aid=509770&signed_aid=gNtmVgmjz-1diTLhbbsKDQ=="
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 6,
                "commenter": {
                    "userId": "3040719996",
                    "displayName": "deeng...@gmail.com"
                },
                "timestamp": 1625671139,
                "content": "And looking at all (34) calls to  sc_asn1_read_tag  there are 7 that look questionable. \n\n./pkcs15init/pkcs15-sc-hsm.c has two in a row and does not check anything\n\n./libopensc/asn1.c should also clear the *cla_out when it  is going to return  SC_ASN1_TAG_EOC\n\nThere are 9 that do not test for p==0 many of these do test for tag|cla == a specifc value, but if *cla _out is not cleared above,  it could  get a false positive result. \n\nSee attached pdf of a spreadsheet for details.\n\n\n\n",
                "attachments": [
                    {
                        "attachmentId": "509789",
                        "filename": "sc_asn1_read_tag.pdf",
                        "size": "36900",
                        "contentType": "application/pdf",
                        "downloadUrl": "attachment?aid=509789&signed_aid=z5Wg5ppv3h6pHTLOqouDUQ=="
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 7,
                "commenter": {
                    "userId": "1917823890",
                    "displayName": "jak...@gmail.com"
                },
                "timestamp": 1625675858,
                "content": "I just tried the `fuzz-card-piv-v2.diff` and the issue is still there. Here is a debug log from the last part:\n```\nP:8; T:0x140099375101888 15:40:18.218 [fuzz] card-piv.c:2402:piv_compute_signature: called\nP:8; T:0x140099375101888 15:40:18.218 [fuzz] card-piv.c:2324:piv_validate_general_authentication: called\nP:8; T:0x140099375101888 15:40:18.218 [fuzz] card-piv.c:502:piv_general_io: called\nP:8; T:0x140099375101888 15:40:18.218 [fuzz] card.c:473:sc_lock: called\nP:8; T:0x140099375101888 15:40:18.218 [fuzz] card.c:513:sc_lock: returning with: 0 (Success)\nP:8; T:0x140099375101888 15:40:18.218 [fuzz] apdu.c:548:sc_transmit_apdu: called\nP:8; T:0x140099375101888 15:40:18.219 [fuzz] card.c:473:sc_lock: called\nP:8; T:0x140099375101888 15:40:18.219 [fuzz] card.c:513:sc_lock: returning with: 0 (Success)\nP:8; T:0x140099375101888 15:40:18.219 [fuzz] apdu.c:515:sc_transmit: called\nP:8; T:0x140099375101888 15:40:18.219 [fuzz] apdu.c:363:sc_single_transmit: called\nP:8; T:0x140099375101888 15:40:18.219 [fuzz] apdu.c:370:sc_single_transmit: CLA:0, INS:87, P1:11, P2:9C, data(8) 0x7f6b6d781880\nP:8; T:0x140099375101888 15:40:18.219 [fuzz] fuzz_pkcs15_reader.c:83:fuzz_get_chunk: \nReturning fuzzing chunk (283 bytes):\n02 00 90 02 02 00 37 02 02 00 90 02 02 00 90 02 ......7.........\n02 00 90 02 02 00 90 02 02 00 90 02 02 00 90 02 ................\n00 90 02 02 02 00 90 02 05 05 05 05 05 05 05 05 ................\n05 05 05 05 05 05 05 05 7C 61 02 00 90 02 02 00 ........|a......\n90 02 02 00 90 02 ED 4C 82 50 30 37 30 33 30 39 .......L.P070309\n34 37 36 34 00 00 00 00 00 00 00 90 02 02 00 90 4764............\n02 02 00 90 02 02 00 90 02 02 00 90 02 02 00 90 ................\n02 02 00 90 02 02 00 90 02 02 00 90 02 02 00 90 ................\n02 02 00 90 02 02 00 90 02 02 00 90 40 02 00 90 ............@...\n02 02 00 90 02 00 90 02 02 02 00 90 02 05 05 05 ................\n05 05 05 05 05 05 05 05 05 05 05 05 05 7C 61 02 .............|a.\n00 90 02 02 00 90 02 02 00 90 02 ED 4C 82 02 02 ............L...\n00 90 02 02 00 05 05 7C 61 02 00 90 02 02 00 90 .......|a.......\n02 02 00 90 02 ED 4C 82 02 02 00 90 02 02 00 90 ......L.........\n02 02 00 90 02 02 00 90 EF B7 90 33 5A 17 0D 32 ...........3Z..2\n32 5A 30 33 31 0F 30 0D 06 03 55 04 0B 0C 02 6A 2Z031.0...U....j\n6A 65 B2 B2 AA B2 B2 B2 00 0F 20 54 65 73 61 6D je........ Tesam\n70 DA 02 00 90 2F 04 00 88 90 01                p..../.....\nP:8; T:0x140099375101888 15:40:18.219 [fuzz] apdu.c:382:sc_single_transmit: returning with: 0 (Success)\nP:8; T:0x140099375101888 15:40:18.219 [fuzz] apdu.c:537:sc_transmit: returning with: 0 (Success)\nP:8; T:0x140099375101888 15:40:18.219 [fuzz] card.c:523:sc_unlock: called\nP:8; T:0x140099375101888 15:40:18.219 [fuzz] card.c:523:sc_unlock: called\nP:8; T:0x140099375101888 15:40:18.219 [fuzz] card-piv.c:544:piv_general_io: returning with: 281\nP:8; T:0x140099375101888 15:40:18.219 [fuzz] card-piv.c:2384:piv_validate_general_authentication: returning with: 80\n```\nI tried to get some more debug outputs and indeed the body pointer gets messed up with the second call to `sc_asn1_find_tag()`:\n```\nbuflen = 80\n0: body_len = 55\n0: body offset = 2\n(call to sc_asn1_find_tag)\n0: taglen = 0\n0: tag offset = 55\n1: body_len = 110 <= what?\n1: body offset = 57\n```\nThis means the sc_asn1_find_tag() returns non-NULL pointer to the end of the input buffer and taglen=0 and piv application interprets it as it found the tag, moves pointer behind the end of the buffer and continues with second cycle. I think the check should be there also for 0 length tags (this solves the issue) or we should have some change in the find_tag to return some errors in these cases.\n\nInterestingly enough, when I rewrite the following condition, it looks like working for me so I think we can blame also some weird arithmetic?\n```\n-                                       bodylen -= taglen - (tag - body);\n+                                       bodylen = bodylen - taglen - (tag - body);\n```\nvery weird ..."
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 8,
                "commenter": {
                    "userId": "3040719996",
                    "displayName": "deeng...@gmail.com"
                },
                "timestamp": 1625680279,
                "content": "OK thanks.  The expected input should look like: \n7C Len  {82 Len  {30 Len {02 len {data} 02  Len {data}}}}}\n\nIt looks like the first call to  sc_asn1_find_tag  parses the input till it finds a 7C. Manually parsing the input looks like this: \n\n02 00\n90 02  02 00 \n37 02  02 00 \n90 02  02 00\n90 02  02 00 \n90 02  02 00 \n90 02  02 00 \n90 02  02 00\n90 02  00 90\n02 02  02 00\n90 02  05 05\n05 05  05 05 05 05 05 \n05 05  05 05 05 05 05 \n\n7C 61  02 00 90 02 02 00 90 02 02 00 90 02 ED 4C 82 50 \n            30 37 30 33 30 39 34 37  36 34 00 00 00 00 00 00 \n            00 90 02 02 00 90 02 02  00 90 02 02 00 90 02 02 \n            00 90 02 02 00 90 02 02  00 90 02 02 00 90 02 02 \n            00 90 02 02 00 90 02 02  00 90 02 02 00 90 02 02\n            00 90 40 02 00 90 02 02  00 90 02 00 90 02 02 02 \n            00 \n\nThen the second sc_asn1_find_tag parsed  the above till it found the 82\n\n02 00\n90 02  02 00\n90 02  02 00 \n90 02  ED 4C\n82 50   30 37 30 33 30 39 34 37  36 34 00 00 00 00 00 00 \n             00 90 02 02 00 90 02 02  00 90 02 02 00 90 02 02 \n             00 90 02 02 00 90 02 02  00 90 02 02 00 90 02 02 \n             00 90 02 02 00 90 02 02  00 90 02 02 00 90 02 02\n             00 90 40 02 00 90 02 02  00 90 02 00 90 02 02 02 \n 00 \n\nAnd sc_asn1_find_tag fond the 7C, then the second  sc_asn1_find_tag found a 82\nSo piv_validate_general_authentication returned the 0x50 = 80 length\n\nand  piv_compute_signature  body = sc_asn1_find_tag(card->ctx, rbuf, r, 0x30, &bodylen);\nfound a 0x30 sequence but its not valid \n\nSo the use of  sc_asn1_find_tag is wrong function to call to only accept a tag  of 0x7C. at this point.\n\nIt works when the data is as expected, but keep searching skipping over tags\n\nA grep of OpenSC shows 137 calls to sc_asn1_find_tag. Other drivers may have the same problem.\nAs it works when the data is valid, but not if there is other unexpected data.\n\nLet me think about this.\n\n\n\n\n\n\n\n"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 9,
                "commenter": {
                    "userId": "1917823890",
                    "displayName": "jak...@gmail.com"
                },
                "timestamp": 1625823061,
                "content": "I think you misunderstood my last comment. I do not think the issue is in the sc_asn1_find_tag(). It does everything correctly based on the argument it gets from the PIV driver. But the problem is the arithmetic in the piv driver [1]\n\n    bodylen -= taglen - (tag - body);\n\nAfter the first call to the sc_asn1_find_tag(), we are getting taglen=0 and body pointer moved 55 bytes, which is fine. But the line above should calculate new remaining length of the body buffer, but instead it doubles it. When I put there actual values, it looks like this:\n\n    bodylen(55) -= taglen(0) - (tag - body)(55);\n\nnote, that the precedence of -= is lower than - (obviously) so the calculation goes probably this way:\n\n    bodylen(55) -= taglen(0) - (tag - body)(55)\n    bodylen(55) -= -55 (unsigned overflow wraps around to actual value of 18446744073709551561U)\n    bodylen = bodylen(55) - (-55) (the actual calculation is 55 - 18446744073709551561 mod SIZE_T_MAX)\n    bodylen = 110\n\nThis does not happen when we start from the bodylen because it is guaranteed to be larger than all the other arguments:\n\n    bodylen = bodylen(55) - taglen(0) - (tag - body)(55)\n    bodylen = 55 - 55\n    bodylen = 0\n\nThis can be demonstrated with the following minimal reproducer:\n```\n$ cat test.c \n#include <stddef.h>\n#include <stdio.h>\n\nint main() {\n\tsize_t bodylen = 55;\n\tsize_t taglen = 0;\n\tsize_t tag_offset = 55;\n\tbodylen -= taglen - tag_offset;\n\tprintf(\"(taglen - tag_offset) = %zu\\n\", taglen - tag_offset);\n\tprintf(\"bodylen = %zu\\n\", bodylen);\n\n\tbodylen = 55;\n\tbodylen = bodylen - taglen - tag_offset;\n\tprintf(\"bodylen = %zu\\n\", bodylen);\n}\n$ gcc test.c -o test\n$ ./test\n(taglen - tag_offset) = 18446744073709551561\nbodylen = 110\nbodylen = 0\n```\nThis is an issue, and I think the change proposed in the previous comment should solve it. But we might have similar issues in dozen of places and they would be very complicate to identify and hunt down ...\n\n[1] https://github.com/OpenSC/OpenSC/blob/master/src/libopensc/card-piv.c#L2433"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 10,
                "commenter": {
                    "userId": "3040719996",
                    "displayName": "deeng...@gmail.com"
                },
                "timestamp": 1625840303,
                "content": "The issue is the code was expecting sc_asn1_find_tag  to find only the valid tag (as defined in the standards) AS THE FIRST TAG.  The fuzz input introduced  extra TLV data that sc_asn1_find_tag was skipping over, as it looked to find the tag requested. The calculations were based on finding the correct tag in the beginning of the data.\n\nSo  sc_asn1_find_tag  is the wrong function to use to do this because it will skip all other tags until it finds the requested one. It also skips tag 0x00 and 0xFF, which appear to be BER only, and not allowed in DER.  The PIV standards do not allow for these other tags, or BER encoding in the responses. \n\nPIV used the the Get Data (0xCB) and expects response to be encoded with tag 0x53,  GENERAL AUTHENTICATE (0x87) and response encoded with tag 0x7C,  GENERATE ASYMMETRIC KEY PAIR (0x47) with response encoded with tag 0x7F49.  \n\nThe proposal you are making allows for these extra tags to be skipped, which were in the fuzz input. \nI am looking to reject these extra tags which are not returned by any known PIV device as they are not defined in the PIV standards.  \n\nAs you point out the calculations need to be fixed too. \n\n\n"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 11,
                "commenter": {
                    "userId": "3040719996",
                    "displayName": "deeng...@gmail.com"
                },
                "timestamp": 1625851781,
                "content": "\n\"After the first call to the sc_asn1_find_tag(), we are getting taglen=0 and body pointer moved 55 bytes, which is fine\". \nNot really fine, as the data should have the first part of the ECDSA signature i.e. an integer of size nLen or nLen+1. \nThe 02 00 is an integer of size 0. \nThen there should the second part of the ECDSA signature of size nLen nLen+1 but it is not in the sequence 30 37.\n\n30 37 \n       30 33 30 39 34 37 36 34 00 00  00 00 00 00 00 90 02 02\n                  00 90 02 02 00 90 02 02  00 90 02 02 00 90 02 02\n\t          00 90 02 02 00 90 02 02  00 90 02 02 00 90 02 02\n\t          00 90 02 \n       02 00\nThe rest is not really parsed: \n 90 02 02 00\n90 02 02 00 \n90 40 02 00 90 02 02  00 90 02 00 90 02 02 02\n \n\nAnd if extra data was found to be after  the ECDSA signature, that should also be a error.\n\nP.S. How did the fuzzer come up with some  test data that just happens have the 7C, 82, 30 and 02 tags? \n\nThe attached fuzz-card-piv-v3.diff attempts to cache problems of extra tags by checking for the tag before calling\nsc_asn1_find_tag, so it will always find it as the first tag. Not the best solution. \nIt also tests for the taglen == 0 or missing second integer in the loop. \n\nIf you want to test the loop part only, remove the changes for tests of the 7C, 82 and 30 tags. \n\nAn other  possible solutions is to have a sc_asn1_find_tag_ext with an extra flag(s) to only check first tag, and don't accept 00 or ff flags. \n sc_asn1_find_tag would then call sc_asn1_find_tag_ext with  flags=0.\nThis would make it easier to fix other calls to  sc_asn1_find_tag  that may have the same problem.\n\nWhatever solution we come up with also needs to be added in other places in card-piv.c  the  fuzz-card-piv-v3.diff only addresses this fuzz issue. \n\n\n\n\n\n",
                "attachments": [
                    {
                        "attachmentId": "510154",
                        "filename": "fuzz-card-piv-v3.diff",
                        "size": "2113",
                        "contentType": "text/plain",
                        "viewUrl": "/p/oss-fuzz/issues/attachmentText?aid=510154",
                        "downloadUrl": "attachment?aid=510154&signed_aid=4F9N0t38CTQSL8_sz-YizQ=="
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 12,
                "commenter": {
                    "userId": "3040719996",
                    "displayName": "deeng...@gmail.com"
                },
                "timestamp": 1626118218,
                "content": "Here is a better patch that addresses a number of places where sc_asn1_find_tag would accept tags not allowed in the NIST standard. Some of these have been replaced by sc_asn1_read_tag. Others still use sc_asn1_find_tag but also check the expected tag is in the first byte of the buffer.\n\n",
                "attachments": [
                    {
                        "attachmentId": "510439",
                        "filename": "fuzz-card-piv-v4.diff",
                        "size": "6740",
                        "contentType": "text/plain",
                        "viewUrl": "/p/oss-fuzz/issues/attachmentText?aid=510439",
                        "downloadUrl": "attachment?aid=510439&signed_aid=XcVkPp1M3cYf1xOMVuY5HQ=="
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 13,
                "commenter": {
                    "userId": "1917823890",
                    "displayName": "jak...@gmail.com"
                },
                "timestamp": 1626251730,
                "content": "> P.S. How did the fuzzer come up with some  test data that just happens have the 7C, 82, 30 and 02 tags? \n\nProbably years of feeding quite random data into our fuzzer drivers :) It has some cleverness, but I never looked too much into details. I think it is able to detect if some extension or modification of input can let the code progress to new code paths or not.\n\nThank you. Manually verified the last patch solves the reported issue.\n\n> +\t\tif (cp == NULL || in_len == 0 || cla_out != 0x60 || tag_out != 0x1f49) {\n\nThis should say 0x7f49 to match the specs and comment above.\n\n> +\t\tLOG_TEST_GOTO_ERR(card->ctx, SC_ERROR_INVALID_DATA, \"data read longer then buffer\");\n\ns/then/than/\n\n> +\tconst unsigned char *p0, *p1, *p2, *pe;\n\nI would suggest to use some more self-explaining names. It is already hard to read what is going on there and such variables do not help much.\n\n\nWith these changes, I am wondering if the find_tag api is not really broken. We ask it to find a tag and then we need to check two variables if it really found it. Not sure how much it would take to change it.\n\nReviewed the patch and generally looks good (aside the above mentioned comments). Did you test the changes against some cards?\n\nWe should probably move the discussion to github and if it will be fine, release."
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 14,
                "commenter": {
                    "userId": "382749006",
                    "displayName": "ClusterFuzz-External"
                },
                "timestamp": 1628175956,
                "content": "ClusterFuzz testcase 4722545294180352 is verified as fixed in https://oss-fuzz.com/revisions?job=afl_asan_opensc&range=202108040600:202108050611\n\nIf this is incorrect, please file a bug on https://github.com/google/oss-fuzz/issues/new",
                "amendments": [
                    {
                        "fieldName": "Status",
                        "newOrDeltaValue": "Verified",
                        "oldValue": "New"
                    },
                    {
                        "fieldName": "Labels",
                        "newOrDeltaValue": "ClusterFuzz-Verified"
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 35766,
                "sequenceNum": 15,
                "commenter": {
                    "userId": "1950284618",
                    "displayName": "sheriffbot"
                },
                "timestamp": 1628361668,
                "content": "This bug has been fixed. It has been opened to the public.\n\n- Your friendly Sheriffbot",
                "amendments": [
                    {
                        "fieldName": "Labels",
                        "newOrDeltaValue": "-restrict-view-commit"
                    }
                ]
            }
        ]
    },
    "fix_commit": "456ac566938a1da774db06126a2fa6c0cba514b3",
    "repo_addr": "https://github.com/OpenSC/OpenSC"
}