{
    "fix": "https://skia.googlesource.com/skia.git/+/4470ba1491e555c4bb9d6695eb444b6a1b3a0c6b%5E%21/",
    "verify": "0",
    "localId": 24430,
    "project": "skia",
    "fuzzer": "libfuzzer",
    "sanitizer": "msan",
    "crash_type": "Use-of-uninitialized-value",
    "severity": "Medium",
    "report": {
        "comments": [
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "commenter": {
                    "userId": "382749006",
                    "displayName": "ClusterFuzz-External"
                },
                "timestamp": 1595875396,
                "content": "Detailed Report: https://oss-fuzz.com/testcase?key=5136172884688896\n\nProject: skia\nFuzzing Engine: libFuzzer\nFuzz Target: image_decode\nJob Type: libfuzzer_msan_skia\nPlatform Id: linux\n\nCrash Type: Use-of-uninitialized-value\nCrash Address: \nCrash State:\n  sse2::blit_row_s32a_opaque\n  Sprite_D32_S32::blitRect\n  blitrect\n  \nSanitizer: memory (MSAN)\n\nRecommended Security Severity: Medium\n\nRegressed: https://oss-fuzz.com/revisions?job=libfuzzer_msan_skia&range=201910160400:201910170409\n\nReproducer Testcase: https://oss-fuzz.com/download?testcase_id=5136172884688896\n\nIssue filed automatically.\n\nSee https://skia.org/dev/testing/fuzz for instructions to reproduce this bug locally.\nWhen you fix this bug, please\n  * mention the fix revision(s).\n  * state whether the bug was a short-lived regression or an old bug in any stable releases.\n  * add any other useful information.\nThis information can help downstream consumers.\n\nIf you need to contact the OSS-Fuzz team with a question, concern, or any other feedback, please file an issue at https://github.com/google/oss-fuzz/issues. Comments on individual Monorail issues are not monitored.\n\nThis bug is subject to a 90 day disclosure deadline. If 90 days elapse\nwithout an upstream patch, then the bug report will automatically\nbecome visible to the public.",
                "descriptionNum": 1
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 1,
                "commenter": {
                    "userId": "2195585128",
                    "displayName": "kjlubick@chromium.org"
                },
                "timestamp": 1595875893,
                "content": "To Leon for first look, although this might be a blitter issue.\n\nOf note, oss-fuzz seems to think the regression happened last October.",
                "amendments": [
                    {
                        "fieldName": "Owner",
                        "newOrDeltaValue": "scro...@google.com"
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 2,
                "commenter": {
                    "userId": "2356669508",
                    "displayName": "mtkl...@google.com"
                },
                "timestamp": 1595875990,
                "content": "(this is an sk_msan_assert_initialized() assert we added in the blitters to make it explicit that the issue is _not_ the blitter, rather its input)"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 3,
                "commenter": {
                    "userId": "1950284618",
                    "displayName": "sheriffbot"
                },
                "timestamp": 1595881116,
                "amendments": [
                    {
                        "fieldName": "Labels",
                        "newOrDeltaValue": "Disclosure-2020-10-26"
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 4,
                "commenter": {
                    "userId": "1869659596",
                    "displayName": "scro...@google.com"
                },
                "timestamp": 1595884739,
                "content": "Running with asserts shows the problem. In SkCodec, we've asserted that skcms_Transform returned true, but this image has a profile for which it fails.\n\nIn prep_for_destination, skcms_TransferFunction_invert(&profile->trc[0].parametric, invR) returns false. Should we be accounting for skcms_Transform to return false? (I notice blink::PNGImageDecoder also DCHECKs the result.) Or should we have rejected this profile sooner?\n\nIf the regression happened in October, then this would affect Android R.",
                "attachments": [
                    {
                        "attachmentId": "458503",
                        "filename": "ossfuzz24430.png",
                        "size": "359",
                        "contentType": "image/png",
                        "thumbnailUrl": "attachment?aid=458503&signed_aid=w4TUCVdepw9QPkn8pUfCuA==&inline=1&thumb=1",
                        "viewUrl": "attachment?aid=458503&signed_aid=w4TUCVdepw9QPkn8pUfCuA==&inline=1",
                        "downloadUrl": "attachment?aid=458503&signed_aid=w4TUCVdepw9QPkn8pUfCuA=="
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 5,
                "commenter": {
                    "userId": "2356669508",
                    "displayName": "mtkl...@google.com"
                },
                "timestamp": 1595885371,
                "content": "Yeah, it's definitely sensible for skcms_TransferFunction_invert() and prep_for_destination() and skcms_Transform() to fail.  I think that's the first time we'd notice a parametric transfer function cannot be inverted.\n\nOut of curiosity, can you grab the g,a,b,c,d,e,f of the transfer function?\n\nIf it's from that regression range, it's probably related to the HDR transfer function support we added then, e.g \"Starting to hack up HDR transfer function support\".\n\nMight be that it made sense to contextually assert that the transform would always work before these new forms were added, but no matter why, yeah, better to convert that assert to a runtime failure.\n\nCan someone with permission please CC Brian Osman?"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 6,
                "commenter": {
                    "userId": "876586108",
                    "displayName": "hcm@google.com"
                },
                "timestamp": 1595907423,
                "amendments": [
                    {
                        "fieldName": "Cc",
                        "newOrDeltaValue": "brianosman@google.com"
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 7,
                "commenter": {
                    "userId": "1869659596",
                    "displayName": "scro...@google.com"
                },
                "timestamp": 1595942803,
                "content": "{g = 0, a = 1, b = 0, c = 0, d = 0, e = 0, f = 0}"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 8,
                "commenter": {
                    "userId": "13190462",
                    "displayName": "brianosman@google.com"
                },
                "timestamp": 1595946457,
                "content": "Oof. Yeah, that TF technically gets past our classify logic to be considered \"sRGBish\", but it's not invertible (f(x) = 1)."
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 9,
                "commenter": {
                    "userId": "1869659596",
                    "displayName": "scro...@google.com"
                },
                "timestamp": 1595951872,
                "content": "If we call skcms_Transform with the same parameters (except for src and dst pixel pointers), can we expect it to succeed if the first call succeeded?",
                "amendments": [
                    {
                        "fieldName": "Status",
                        "newOrDeltaValue": "Accepted",
                        "oldValue": "New"
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 10,
                "commenter": {
                    "userId": "2356669508",
                    "displayName": "mtkl...@google.com"
                },
                "timestamp": 1595952040,
                "content": "Pretty much yes.  There's a little bit of aliasing rejection if you pass dst==src with different sized dst/src pixel formats, but other than that, it's all down to format/alpha/profile choices.  If dst != src, I think it's just \"yes\"."
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 11,
                "commenter": {
                    "userId": "1869659596",
                    "displayName": "scro...@google.com"
                },
                "timestamp": 1595955755,
                "content": "Great, thanks!\n\nCan this profile be transformed to something else? (I tried telling SkCodec to use the SkColorSpace based on the profile, and it still fails in skcms_Transform.) If so, then I think the decoder should fail trying to transform to an unsupported color space. If it cannot, then should we treat the image as one we cannot decode, or simply pretend it didn't have a profile?"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 12,
                "commenter": {
                    "userId": "13190462",
                    "displayName": "brianosman@google.com"
                },
                "timestamp": 1595956155,
                "content": "Actually, I'm confused - why are we trying to use the image's colorspace as a destination? Is that because we're invoking skcms just to do pixel format transformation, so we're passing the image's colorspace as both src and dst? (But two copies, so we miss the src == dst pointer compare)?"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 13,
                "commenter": {
                    "userId": "2356669508",
                    "displayName": "mtkl...@google.com"
                },
                "timestamp": 1595956659,
                "content": "Yeah, we only do pointer checks to bypass that\n\n...\n    if (dstProfile != srcProfile) {\n\n        if (!prep_for_destination(dstProfile,\n                                  &from_xyz,\n                                  &dst_curves[0].parametric,\n                                  &dst_curves[1].parametric,\n                                  &dst_curves[2].parametric)) {\n            return false;\n        }\n...\n\nIf we're really just doing a format conversion, it's probably best to pass nullptr for both profile arguments.  That'll guarantee we skip the expensive profile transform steps, and there won't be any issues around inversion."
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 14,
                "commenter": {
                    "userId": "1869659596",
                    "displayName": "scro...@google.com"
                },
                "timestamp": 1596033594,
                "content": "> Actually, I'm confused - why are we trying to use the image's colorspace as a destination?\n\nSorry this wasn't clear - the existing test is trying to convert to SRGB. I was just trying to answer the question \"is this ever a profile that we can use?\" Or should we just treat it as a bad profile? (And if we do treat it as a bad profile, we still have two options: ignore it, which maybe we would've done before introducing HDR transfer function support? or reject the image entirely and say it's broken.) So I locally modified the test to pass the original color space to the codec.\n\n> If we're really just doing a format conversion, it's probably best to pass nullptr for both profile arguments.\n\nThat makes sense. Currently, if SkPngCodec decides it doesn't need to do color correction it doesn't use skcms to do any conversion (https://bugs.chromium.org/p/skia/issues/detail?id=8473 tracks switching over), except when converting to F16. (Currently, if the client requests F16 and no color correction, we set the dst to match the src; I'll switch that over to using null for both. But that's not what's happening here, where I'm decoding to 8888.)\n\nWith my locally modified version of the test, SkCodec calls skcms_ApproximatelyEqualProfiles to decide whether to skip color conversion. In this case, the SkColorSpaces are equal - the transfer functions and matrices are the same:\n\nfTransferFn = {g = 0, a = 1, b = 0, c = 0, d = 0, e = 0, f = 0}\nfToXYZD50 = {vals = {{0.964202881, 0, 0}, \n                                      {0, 1, 0}, \n                                      {0, 0, 0.824905396}}\n\nBut skcms_ApproximatelyEqualProfiles returns false because data_color_space doesn't match. The destination is skcms_Signature_RGB, while the source is skcms_Signature_Gray. Not sure how that happened - the source was converted to an SkColorSpace using SkColorSpace::Make(const skcms_ICCProfile&), and then the dest is created from that object via SkColorSpace::toProfile."
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 15,
                "commenter": {
                    "userId": "13190462",
                    "displayName": "brianosman@google.com"
                },
                "timestamp": 1596033962,
                "content": "On the last point, the profile -> SkColorSpace -> profile round-trip is definitely lossy. data_color_space won't be preserved (SkColorSpace has no concept of anything but RGB), and there are probably other things that can be lost along the way, too."
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 16,
                "commenter": {
                    "userId": "2356669508",
                    "displayName": "mtkl...@google.com"
                },
                "timestamp": 1596034321,
                "content": "I believe both skcms and Skia will treat this profile as an acceptable source profile, but it can't be inverted, so it can't be used as a destination.  I don't believe any of that changed when adding HDR curves.\n\nIf you're converting to sRGB, the issue of inverting the destination profile should not be coming up.  sRGB is definitely good both as a source and destination.\n\nI think we must be confused, and I'd suggest we restart diagnosing this issue from scratch.  Can you post up the call stack and arguments to the skcms call that we're asserting should work?"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 17,
                "commenter": {
                    "userId": "1869659596",
                    "displayName": "scro...@google.com"
                },
                "timestamp": 1596138015,
                "content": "I was mistaken - the destination is *not* SRGB - the test calls SkSurface::MakeRasterN32Premul(128, 128), which uses a null color space, but even if I change that to use SRGB, the generator still decodes to the SkColorSpace returned by getInfo().\n\nDue to the lossiness in that round-trip conversion, when the client attempts to use the recommended SkColorSpace, SkCodec thinks it needs to convert to the slightly different skcms_ICCProfile, which is not a valid destination. Proposed fix is in https://skia-review.googlesource.com/c/skia/+/306937.\n\nI don't know whether blink::ImageDecoder is vulnerable to something similar. The image created by the fuzzer doesn't trigger the bug, because blink::PNGImageDecoder ignores the color profile of gray images[1]:\n\n  if (!(color_type & PNG_COLOR_MASK_COLOR))\n    return;\n  // We only support color profiles for color PALETTE and RGB[A] PNG.\n  // TODO(msarett): Add GRAY profile support, block CYMK?\n  if (auto profile = ReadColorProfile(png, info)) {\n    SetEmbeddedColorProfile(std::move(profile));\n  }\n\nIf I remove the return for gray images, it does trigger the bug (when using ColorBehavior::Tag()). I could imagine that there might be a profile which would behave similarly, but I don't know how that would be constructed. (If I insert the iCCP chunk from this image unchanged into an RGBA PNG, libpng does not consider it valid when calling png_get_iCCP. If I change its data_color_space to RGB so that libpng will allow it, the conversion back to an skcms_ICCProfile matches the original, so again this is not a problem.)\n\n[1] https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/platform/image-decoders/png/png_image_decoder.cc;l=227?originalUrl=https:%2F%2Fcs.chromium.org%2F",
                "amendments": [
                    {
                        "fieldName": "Status",
                        "newOrDeltaValue": "Started",
                        "oldValue": "Accepted"
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 18,
                "commenter": {
                    "userId": "3779532838",
                    "displayName": "bugdroid"
                },
                "timestamp": 1596202016,
                "content": "The following revision refers to this bug:\n  https://skia.googlesource.com/skcms/+/b1f9041ffe31d604fe15883415a32daed476316c\n\ncommit b1f9041ffe31d604fe15883415a32daed476316c\nAuthor: Mike Klein <mtklein@google.com>\nDate: Fri Jul 31 13:23:27 2020\n\nallow Gray and RGB profiles to be equal\n\nWe really just need to distinguish Gray/RGB from CMYK.\n\nBug: oss-fuzz:24430\nChange-Id: I8d4c55eea9734bba53c3d238d32cc6e60f551704\nReviewed-on: https://skia-review.googlesource.com/c/skcms/+/306979\nReviewed-by: Leon Scroggins <scroggo@google.com>\nReviewed-by: Brian Osman <brianosman@google.com>\nCommit-Queue: Mike Klein <mtklein@google.com>\n\n[modify] https://crrev.com/b1f9041ffe31d604fe15883415a32daed476316c/skcms.cc\n[modify] https://crrev.com/b1f9041ffe31d604fe15883415a32daed476316c/tests.c\n"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 19,
                "commenter": {
                    "userId": "1869659596",
                    "displayName": "scro...@google.com"
                },
                "timestamp": 1596229178,
                "content": "This is fixed with Mike's CL (in comment#18), which landed into Skia with https://skia-review.googlesource.com/c/skia/+/307166",
                "amendments": [
                    {
                        "fieldName": "Status",
                        "newOrDeltaValue": "Fixed",
                        "oldValue": "Started"
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 20,
                "commenter": {
                    "userId": "382749006",
                    "displayName": "ClusterFuzz-External"
                },
                "timestamp": 1596294421,
                "content": "ClusterFuzz testcase 5136172884688896 is verified as fixed in https://oss-fuzz.com/revisions?job=libfuzzer_msan_skia&range=202007310626:202008010614\n\nIf this is incorrect, please file a bug on https://github.com/google/oss-fuzz/issues/new",
                "amendments": [
                    {
                        "fieldName": "Status",
                        "newOrDeltaValue": "Verified",
                        "oldValue": "Fixed"
                    },
                    {
                        "fieldName": "Labels",
                        "newOrDeltaValue": "ClusterFuzz-Verified"
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 24430,
                "sequenceNum": 21,
                "commenter": {
                    "userId": "1950284618",
                    "displayName": "sheriffbot"
                },
                "timestamp": 1598990812,
                "content": "This bug has been fixed for 30 days. It has been opened to the public.\n\n- Your friendly Sheriffbot",
                "amendments": [
                    {
                        "fieldName": "Labels",
                        "newOrDeltaValue": "-restrict-view-commit"
                    }
                ]
            }
        ]
    },
    "fix_commit": "4470ba1491e555c4bb9d6695eb444b6a1b3a0c6b",
    "repo_addr": "https://skia.googlesource.com/skia.git"
}