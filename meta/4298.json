{
    "fix": "https://github.com/aawc/unrar/commit/6c573e7f33380e60b583294e9ec5d68ae351c3cf",
    "verify": "0",
    "localId": 4298,
    "project": "unrar",
    "fuzzer": "libfuzzer",
    "sanitizer": "msan",
    "crash_type": "Use-of-uninitialized-value",
    "severity": "Medium",
    "report": {
        "comments": [
            {
                "projectName": "oss-fuzz",
                "localId": 4298,
                "commenter": {
                    "userId": "382749006",
                    "displayName": "ClusterFuzz-External"
                },
                "timestamp": 1510925482,
                "content": "Detailed report: https://oss-fuzz.com/testcase?key=6378114364997632\n\nProject: unrar\nFuzzer: libFuzzer_unrar_fuzzer\nFuzz target binary: unrar_fuzzer\nJob Type: libfuzzer_msan_unrar\nPlatform Id: linux\n\nCrash Type: Use-of-uninitialized-value\nCrash Address: \nCrash State:\n  Unpack::MakeDecodeTables\n  Unpack::ReadTables20\n  Unpack::Unpack20\n  \nSanitizer: memory (MSAN)\n\nRecommended Security Severity: Medium\n\nRegressed: https://oss-fuzz.com/revisions?job=libfuzzer_msan_unrar&range=201711160559:201711170607\n\nReproducer Testcase: https://oss-fuzz.com/download?testcase_id=6378114364997632\n\nIssue filed automatically.\n\nSee https://github.com/google/oss-fuzz/blob/master/docs/reproducing.md for more information.\n\nThis bug is subject to a 90 day disclosure deadline. If 90 days elapse\nwithout an upstream patch, then the bug report will automatically\nbecome visible to the public.\n\nWhen you fix this bug, please\n  * mention the fix revision(s).\n  * state whether the bug was a short-lived regression or an old bug in any stable releases.\n  * add any other useful information.\nThis information can help downstream consumers.\n\nIf you have questions for the OSS-Fuzz team, please file an issue at https://github.com/google/oss-fuzz/issues.",
                "descriptionNum": 1
            },
            {
                "projectName": "oss-fuzz",
                "localId": 4298,
                "sequenceNum": 1,
                "commenter": {
                    "userId": "382749006",
                    "displayName": "ClusterFuzz-External"
                },
                "timestamp": 1510925801,
                "amendments": [
                    {
                        "fieldName": "Labels",
                        "newOrDeltaValue": "OS-Linux"
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 4298,
                "sequenceNum": 2,
                "commenter": {
                    "userId": "2512173341",
                    "displayName": "ros...@rarlab.com"
                },
                "timestamp": 1510946325,
                "content": "For now I cannot reproduce this one in Visual Studio. When I reach:\r\n\r\n  if (UnpAudioBlock)\r\n    for (uint I=0;I<UnpChannels;I++)\r\n      MakeDecodeTables(&Table[I*MC20],&MD[I],MC20);\r\n\r\nin Unpack::ReadTables20, first 257*2 bytes of Table for 2 channels or 257*3 bytes for 3 channels are initialized. MC20 is equal ot 257 here. Thus:\r\n\r\n  for (size_t I=0;I<Size;I++)\r\n    LengthCount[LengthTable[I] & 0xf]++;\r\n\r\nin Unpack::MakeDecodeTables accesses only initalized data. I tried both Minimized and Unminimized Testcase. Probably I am not vigilant enough and missing something here, so I plan to return to this case after some rest."
            },
            {
                "projectName": "oss-fuzz",
                "localId": 4298,
                "sequenceNum": 3,
                "commenter": {
                    "userId": "2512173341",
                    "displayName": "ros...@rarlab.com"
                },
                "timestamp": 1511121814,
                "content": "Finally I managed to find a reason of this issue. It was rather complicated, because memory sanitizer in your fuzzer also as valgrind both pointed to LengthCount[LengthTable[I] & 0xf]++; in Unpack::MakeDecodeTables(). But the first access to uninitalized data actually was made earlier in memcpy(UnpOldTable20,Table,TableSize); in Unpack::ReadTables20(). Then that UnpOldTable20 was used to build the table passed to Unpack::MakeDecodeTables(). So it is a kind of delayed detection. I did not check disassembly, maybe it is related by compiler optimization. Though, I think it was the same with disabled optimization too.\r\n\r\nI'll fix this one. As far as I can see, it is not associated with security risk, but it makes garbage data extracted from corrupt RAR2 archives non-stable."
            },
            {
                "projectName": "oss-fuzz",
                "localId": 4298,
                "sequenceNum": 4,
                "commenter": {
                    "userId": "382749006",
                    "displayName": "ClusterFuzz-External"
                },
                "timestamp": 1511340131,
                "content": "ClusterFuzz has detected this issue as fixed in range 201711210604:201711220606.\n\nDetailed report: https://oss-fuzz.com/testcase?key=6378114364997632\n\nProject: unrar\nFuzzer: libFuzzer_unrar_fuzzer\nFuzz target binary: unrar_fuzzer\nJob Type: libfuzzer_msan_unrar\nPlatform Id: linux\n\nCrash Type: Use-of-uninitialized-value\nCrash Address: \nCrash State:\n  Unpack::MakeDecodeTables\n  Unpack::ReadTables20\n  Unpack::Unpack20\n  \nSanitizer: memory (MSAN)\n\nRecommended Security Severity: Medium\n\nRegressed: https://oss-fuzz.com/revisions?job=libfuzzer_msan_unrar&range=201711160559:201711170607\nFixed: https://oss-fuzz.com/revisions?job=libfuzzer_msan_unrar&range=201711210604:201711220606\n\nReproducer Testcase: https://oss-fuzz.com/download?testcase_id=6378114364997632\n\nSee https://github.com/google/oss-fuzz/blob/master/docs/reproducing.md for more information.\n\nIf you suspect that the result above is incorrect, try re-doing that job on the test case report page."
            },
            {
                "projectName": "oss-fuzz",
                "localId": 4298,
                "sequenceNum": 5,
                "commenter": {
                    "userId": "382749006",
                    "displayName": "ClusterFuzz-External"
                },
                "timestamp": 1511340570,
                "content": "ClusterFuzz testcase 6378114364997632 is verified as fixed, so closing issue as verified.\n\nIf this is incorrect, please file a bug on https://github.com/google/oss-fuzz/issues/new",
                "amendments": [
                    {
                        "fieldName": "Status",
                        "newOrDeltaValue": "Verified",
                        "oldValue": "New"
                    },
                    {
                        "fieldName": "Labels",
                        "newOrDeltaValue": "ClusterFuzz-Verified"
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 4298,
                "sequenceNum": 6,
                "commenter": {
                    "userId": "4164592774",
                    "displayName": "sheriffbot@chromium.org"
                },
                "timestamp": 1513951552,
                "content": "This bug has been fixed for 30 days. It has been opened to the public.\n\n- Your friendly Sheriffbot",
                "amendments": [
                    {
                        "fieldName": "Labels",
                        "newOrDeltaValue": "-restrict-view-commit"
                    }
                ]
            }
        ]
    },
    "fix_commit": "6c573e7f33380e60b583294e9ec5d68ae351c3cf",
    "repo_addr": "https://github.com/aawc/unrar.git"
}