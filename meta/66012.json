{
    "fix": "https://github.com/curl/curl/commit/c2d973627bab12abc5486a3f37ce40ed16da0641",
    "verify": "0",
    "localId": 66012,
    "project": "curl",
    "fuzzer": "afl",
    "sanitizer": "asan",
    "crash_type": "Heap-use-after-free READ 1",
    "severity": "High",
    "report": {
        "comments": [
            {
                "projectName": "oss-fuzz",
                "localId": 66012,
                "commenter": {
                    "userId": "382749006",
                    "displayName": "ClusterFuzz-External"
                },
                "timestamp": 1705786002,
                "content": "Detailed Report: https://oss-fuzz.com/testcase?key=6007217014767616\n\nProject: curl\nFuzzing Engine: afl\nFuzz Target: curl_fuzzer\nJob Type: afl_asan_curl\nPlatform Id: linux\n\nCrash Type: Heap-use-after-free READ 1\nCrash Address: 0x629000000208\nCrash State:\n  ftp_endofresp\n  Curl_pp_readresp\n  Curl_GetFTPResponse\n  \nSanitizer: address (ASAN)\n\nRecommended Security Severity: High\n\nRegressed: https://oss-fuzz.com/revisions?job=afl_asan_curl&range=202401150610:202401160622\n\nReproducer Testcase: https://oss-fuzz.com/download?testcase_id=6007217014767616\n\nIssue filed automatically.\n\nSee https://google.github.io/oss-fuzz/advanced-topics/reproducing for instructions to reproduce this bug locally.\nWhen you fix this bug, please\n  * mention the fix revision(s).\n  * state whether the bug was a short-lived regression or an old bug in any stable releases.\n  * add any other useful information.\nThis information can help downstream consumers.\n\nIf you need to contact the OSS-Fuzz team with a question, concern, or any other feedback, please file an issue at https://github.com/google/oss-fuzz/issues. Comments on individual Monorail issues are not monitored.\n\nThis bug is subject to a 90 day disclosure deadline. If 90 days elapse\nwithout an upstream patch, then the bug report will automatically\nbecome visible to the public.",
                "descriptionNum": 1
            },
            {
                "projectName": "oss-fuzz",
                "localId": 66012,
                "sequenceNum": 1,
                "commenter": {
                    "userId": "1725520100",
                    "displayName": "danie...@gmail.com"
                },
                "timestamp": 1705787943,
                "content": "Puzzling. The regression ranges look like they don't introduced anything that makes this happen.\n\nBy just reading the code I have not figured out how this can happen. I try to run the reproducer soon to see what I can learn if I can reproduce."
            },
            {
                "projectName": "oss-fuzz",
                "localId": 66012,
                "sequenceNum": 2,
                "commenter": {
                    "userId": "4019430773",
                    "displayName": "cmeis...@gmail.com"
                },
                "timestamp": 1705790727,
                "content": "I don't see anything obvious. With FUZZ_VERBOSE=yes it's a little bit interesting:\n\n<==\nFUZZ[0]: Sending next response: 7\n< 450\n* Curl_pp_readresp_ 21 bytes of trailing server response left\n* FTP 0x61a0000003e0 (line 2562) state change from LIST to STOP\n* STATE: DOING_MORE => DID handle 0x622000000108; line 2366\n* STATE: DID => DONE handle 0x622000000108; line 2398\n* multi_done[DONE]: status: 0 prem: 0 done: 0\n* Remembering we are in dir \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd/\"\n> ABOR\n* Connection #0 to host 127.0.1.127 left intact\n* STATE: INIT => CONNECT handle 0x622000000108; line 1982\n* Connecting to hostname: 127.0.1.127\n* Found bundle for host: 0x606000000ec8 [serially]\n* Re-using existing connection with host \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n* STATE: CONNECT => CONNECTING handle 0x622000000108; line 2036\n* STATE: CONNECTING => PROTOCONNECT handle 0x622000000108; line 2144\n* STATE: PROTOCONNECT => DO handle 0x622000000108; line 2163\n* multi_done[DO]: status: 78 prem: 0 done: 0\n* Remembering we are in dir \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd/\ufffd\ufffd\"\n< 450\n,112,130,216,4 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\n\nInterestingly with FUZZ_VERBOSE turned on (which enables debug logging) we actually terminate sooner, in Curl_debug < Curl_pp_readresp (pingpong.c:357). But yes, very reproducible."
            },
            {
                "projectName": "oss-fuzz",
                "localId": 66012,
                "sequenceNum": 3,
                "commenter": {
                    "userId": "1725520100",
                    "displayName": "danie...@gmail.com"
                },
                "timestamp": 1705837250,
                "content": "I can't even build the fuzzer right now: https://github.com/curl/curl-fuzzer/issues/102"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 66012,
                "sequenceNum": 4,
                "commenter": {
                    "userId": "1725520100",
                    "displayName": "danie...@gmail.com"
                },
                "timestamp": 1705837506,
                "content": "The stack trace shows that the FTP code accesses the data->state.buffer after it has been freed. The bad access is here:\n\n #0 0x5e0dde in ftp_endofresp curl/lib/ftp.c:537:19\n\n... but the buffer is freed in multi_done (multi.c:787), *after* ftp_done has been called so I still don't see how this code executes *after* the freeing of that buffer. "
            },
            {
                "projectName": "oss-fuzz",
                "localId": 66012,
                "sequenceNum": 5,
                "commenter": {
                    "userId": "4019430773",
                    "displayName": "cmeis...@gmail.com"
                },
                "timestamp": 1705839265,
                "content": "My repro method copied here for reference:\n\nThe method I use (and that I should really document in the REPRODUCING guide) is:\n\n- Use ossfuzz\n- `python3 infra/helper.py build_image curl`\n- `python3 infra/helper.py build_fuzzers curl`\n- Copy the clusterfuzz test case into the ossfuzz `build/out` directory\n- `python3 infra/helper.py shell` which drops you into a Docker container\n- `export GDBMODE=1`\n- Run `compile`, which will compile the fuzzers for you and also compile a version of GDB that will work\n- Run `gdb /out/<thefuzzeryouwanttorun>`\n- In gdb, `break __asan::ReportGenericError`\n- then, run `run /out/clusterfuzz-<name of test case>`\n"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 66012,
                "sequenceNum": 6,
                "commenter": {
                    "userId": "4019430773",
                    "displayName": "cmeis...@gmail.com"
                },
                "timestamp": 1705857268,
                "content": "If it helps I've attached a gdb output of hitting this while running an \"auto-next\" script.",
                "attachments": [
                    {
                        "attachmentId": "626690",
                        "filename": "gdbrunverbose1.txt",
                        "size": "14632",
                        "contentType": "text/plain",
                        "viewUrl": "/p/oss-fuzz/issues/attachmentText?aid=626690",
                        "downloadUrl": "attachment?aid=626690&signed_aid=EqDznzNqVn7NK8J4fNFMIA=="
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 66012,
                "sequenceNum": 7,
                "commenter": {
                    "userId": "4019430773",
                    "displayName": "cmeis...@gmail.com"
                },
                "timestamp": 1705857576,
                "content": "Coming at this from an unknowledgeable viewpoint, it seems weird that the entire connection gets restarted because the wildcard match isn't marked as \"done\"\n\n2622\t      if(data->state.wildcardmatch) {\n2623\t        if(data->wildcard->state != CURLWC_DONE) {\n2626\t          multistate(data, MSTATE_INIT);\n2627\t          break;\n"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 66012,
                "sequenceNum": 8,
                "commenter": {
                    "userId": "1950284618",
                    "displayName": "sheriffbot"
                },
                "timestamp": 1705867417,
                "amendments": [
                    {
                        "fieldName": "Labels",
                        "newOrDeltaValue": "Disclosure-2024-04-19"
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 66012,
                "sequenceNum": 9,
                "commenter": {
                    "userId": "1725520100",
                    "displayName": "danie...@gmail.com"
                },
                "timestamp": 1705877881,
                "content": "Since the connection is still there and alive, it actually will just start over the statemachine (with a new filename) and reuse the existing connection. It's not that bad.\n\nBut it triggers this problem and I think I know why:\n\n- when the connection is setup, Curl_pp_init() is called and that stores a pointer to data->state.buffer in a ping pong struct\n- then the transfer is done using that buffer\n- when multi_done is called, the buffer is freed\n- the wildcard logic makes the state machine start over at INIT\n- when it reaches the CONNECT state it allocates a new state.buffer\n\nAnd here is the issue: when it reuses the FTP connection for this, it does *not* call Curl_pp_init() again. The poingping struct remains having a pointer to the *previous* buffer which is now freed...\n\nI'll write up a PR for this.\n\nI'll also double-check if the same issue might exist for the other ping-pong protocols."
            },
            {
                "projectName": "oss-fuzz",
                "localId": 66012,
                "sequenceNum": 10,
                "commenter": {
                    "userId": "1725520100",
                    "displayName": "danie...@gmail.com"
                },
                "timestamp": 1705879394,
                "content": "https://github.com/curl/curl/pull/12752"
            },
            {
                "projectName": "oss-fuzz",
                "localId": 66012,
                "sequenceNum": 11,
                "commenter": {
                    "userId": "1725520100",
                    "displayName": "danie...@gmail.com"
                },
                "timestamp": 1706168288,
                "content": "This is a bigger take that should fix it, differently: https://github.com/curl/curl/pull/12757. Merging now."
            },
            {
                "projectName": "oss-fuzz",
                "localId": 66012,
                "sequenceNum": 12,
                "commenter": {
                    "userId": "382749006",
                    "displayName": "ClusterFuzz-External"
                },
                "timestamp": 1706344533,
                "content": "ClusterFuzz testcase 6007217014767616 is verified as fixed in https://oss-fuzz.com/revisions?job=afl_asan_curl&range=202401250617:202401260624\n\nIf this is incorrect, please file a bug on https://github.com/google/oss-fuzz/issues/new",
                "amendments": [
                    {
                        "fieldName": "Status",
                        "newOrDeltaValue": "Verified",
                        "oldValue": "New"
                    },
                    {
                        "fieldName": "Labels",
                        "newOrDeltaValue": "ClusterFuzz-Verified"
                    }
                ]
            },
            {
                "projectName": "oss-fuzz",
                "localId": 66012,
                "sequenceNum": 13,
                "commenter": {
                    "userId": "1950284618",
                    "displayName": "sheriffbot"
                },
                "timestamp": 1706385541,
                "content": "This bug has been fixed. It has been opened to the public.\n\n- Your friendly Sheriffbot",
                "amendments": [
                    {
                        "fieldName": "Labels",
                        "newOrDeltaValue": "-restrict-view-commit"
                    }
                ]
            }
        ]
    },
    "fix_commit": "c2d973627bab12abc5486a3f37ce40ed16da0641",
    "repo_addr": "https://github.com/curl/curl.git"
}