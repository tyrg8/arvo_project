commit 617f3ae6f95cd448de7b34caef00ff51de4cf57f
Author: Marti Maria <marti.maria@littlecms.com>
Date:   Sat Aug 27 11:49:44 2022 +0200

    Fix a double free in case of error
    
    cmsReadTag already tracks its pointers so no need to free it
    Also fixed a cosmetic warning (no functionality changes)

diff --git a/src/cmsio0.c b/src/cmsio0.c
index 821b869..222f7c7 100644
--- a/src/cmsio0.c
+++ b/src/cmsio0.c
@@ -742,22 +742,23 @@ cmsUInt32Number _validatedVersion(cmsUInt32Number DWord)
 static 
 cmsBool validDeviceClass(cmsProfileClassSignature cl)
 {
+    if ((int)cl == 0) return TRUE; // We allow zero because older lcms versions defaulted to that.
+
     switch (cl)
-    {
-    case 0: // We allow zero because older lcms versions defaulted to that.
+    {    
     case cmsSigInputClass:
     case cmsSigDisplayClass:
     case cmsSigOutputClass:
     case cmsSigLinkClass:
     case cmsSigAbstractClass:
     case cmsSigColorSpaceClass:
     case cmsSigNamedColorClass:
         return TRUE;
 
     default:
         return FALSE;
     }
 
 }
 
 // Read profile header and validate it
diff --git a/src/cmsio1.c b/src/cmsio1.c
index 4ef8671..2d7deee 100644
--- a/src/cmsio1.c
+++ b/src/cmsio1.c
@@ -703,95 +703,94 @@ Error:
 // This one includes abstract profiles as well. Matrix-shaper cannot be obtained on that device class. The
 // tag name here may default to AToB0
 cmsPipeline* CMSEXPORT _cmsReadDevicelinkLUT(cmsHPROFILE hProfile, cmsUInt32Number Intent)
 {
     cmsPipeline* Lut;
     cmsTagTypeSignature OriginalType;
     cmsTagSignature tag16;
     cmsTagSignature tagFloat;
     cmsContext ContextID = cmsGetProfileContextID(hProfile);
 
 
     if (Intent > INTENT_ABSOLUTE_COLORIMETRIC)
         return NULL;
 
     tag16 = Device2PCS16[Intent];
     tagFloat = Device2PCSFloat[Intent];
 
     // On named color, take the appropriate tag
     if (cmsGetDeviceClass(hProfile) == cmsSigNamedColorClass) {
 
         cmsNAMEDCOLORLIST* nc = (cmsNAMEDCOLORLIST*)cmsReadTag(hProfile, cmsSigNamedColor2Tag);
 
         if (nc == NULL) return NULL;
 
         Lut = cmsPipelineAlloc(ContextID, 0, 0);
         if (Lut == NULL)
             goto Error;
 
         if (!cmsPipelineInsertStage(Lut, cmsAT_BEGIN, _cmsStageAllocNamedColor(nc, FALSE)))
             goto Error;
 
         if (cmsGetColorSpace(hProfile) == cmsSigLabData)
             if (!cmsPipelineInsertStage(Lut, cmsAT_END, _cmsStageAllocLabV2ToV4(ContextID)))
                 goto Error;
 
         return Lut;
     Error:
-        cmsPipelineFree(Lut);
-        cmsFreeNamedColorList(nc);
+        cmsPipelineFree(Lut);        
         return NULL;
     }
 
 
     if (cmsIsTag(hProfile, tagFloat)) {  // Float tag takes precedence
 
         // Floating point LUT are always V
         return _cmsReadFloatDevicelinkTag(hProfile, tagFloat);
     }
 
     tagFloat = Device2PCSFloat[0];
     if (cmsIsTag(hProfile, tagFloat)) {
 
         return cmsPipelineDup((cmsPipeline*)cmsReadTag(hProfile, tagFloat));
     }
 
     if (!cmsIsTag(hProfile, tag16)) {  // Is there any LUT-Based table?
 
         tag16 = Device2PCS16[0];
         if (!cmsIsTag(hProfile, tag16)) return NULL;
     }
 
     // Check profile version and LUT type. Do the necessary adjustments if needed
 
     // Read the tag
     Lut = (cmsPipeline*)cmsReadTag(hProfile, tag16);
     if (Lut == NULL) return NULL;
 
     // The profile owns the Lut, so we need to copy it
     Lut = cmsPipelineDup(Lut);
     if (Lut == NULL) return NULL;
 
     // Now it is time for a controversial stuff. I found that for 3D LUTS using
     // Lab used as indexer space,  trilinear interpolation should be used
     if (cmsGetPCS(hProfile) == cmsSigLabData)
         ChangeInterpolationToTrilinear(Lut);
 
     // After reading it, we have info about the original type
     OriginalType = _cmsGetTagTrueType(hProfile, tag16);
 
     // We need to adjust data for Lab16 on output
     if (OriginalType != cmsSigLut16Type) return Lut;
 
     // Here it is possible to get Lab on both sides
 
     if (cmsGetColorSpace(hProfile) == cmsSigLabData) {
         if (!cmsPipelineInsertStage(Lut, cmsAT_BEGIN, _cmsStageAllocLabV4ToV2(ContextID)))
             goto Error2;
     }
 
     if (cmsGetPCS(hProfile) == cmsSigLabData) {
         if (!cmsPipelineInsertStage(Lut, cmsAT_END, _cmsStageAllocLabV2ToV4(ContextID)))
             goto Error2;
     }
 
     return Lut;
