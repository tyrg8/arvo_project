commit 7d97c226c72fd794295f311e101b3cdf67942092
Author: Philip.Hazel <Philip.Hazel@gmail.com>
Date:   Sun Jul 22 15:19:43 2018 +0000

    Fix oversight in recent OP_COMMIT_ARG update.

diff --git a/src/pcre2_auto_possess.c b/src/pcre2_auto_possess.c
index 23275a2..51bd689 100644
--- a/src/pcre2_auto_possess.c
+++ b/src/pcre2_auto_possess.c
@@ -5,9 +5,9 @@
 /* PCRE is a library of functions to support regular expressions whose syntax
 and semantics are as close as possible to those of the Perl 5 language.
 
                        Written by Philip Hazel
      Original API code Copyright (c) 1997-2012 University of Cambridge
-          New API code Copyright (c) 2016-2017 University of Cambridge
+          New API code Copyright (c) 2016-2018 University of Cambridge
 
 -----------------------------------------------------------------------------
 Redistribution and use in source and binary forms, with or without
@@ -1104,218 +1104,219 @@ int rec_limit = 1000;  /* Was 10,000 but clang+ASAN uses a lot of stack. */
 for (;;)
   {
   c = *code;
 
   if (c >= OP_TABLE_LENGTH) return -1;   /* Something gone wrong */
 
   if (c >= OP_STAR && c <= OP_TYPEPOSUPTO)
     {
     c -= get_repeat_base(c) - OP_STAR;
     end = (c <= OP_MINUPTO) ?
       get_chr_property_list(code, utf, cb->fcc, list) : NULL;
     list[1] = c == OP_STAR || c == OP_PLUS || c == OP_QUERY || c == OP_UPTO;
 
     if (end != NULL && compare_opcodes(end, utf, cb, list, end, &rec_limit))
       {
       switch(c)
         {
         case OP_STAR:
         *code += OP_POSSTAR - OP_STAR;
         break;
 
         case OP_MINSTAR:
         *code += OP_POSSTAR - OP_MINSTAR;
         break;
 
         case OP_PLUS:
         *code += OP_POSPLUS - OP_PLUS;
         break;
 
         case OP_MINPLUS:
         *code += OP_POSPLUS - OP_MINPLUS;
         break;
 
         case OP_QUERY:
         *code += OP_POSQUERY - OP_QUERY;
         break;
 
         case OP_MINQUERY:
         *code += OP_POSQUERY - OP_MINQUERY;
         break;
 
         case OP_UPTO:
         *code += OP_POSUPTO - OP_UPTO;
         break;
 
         case OP_MINUPTO:
         *code += OP_POSUPTO - OP_MINUPTO;
         break;
         }
       }
     c = *code;
     }
   else if (c == OP_CLASS || c == OP_NCLASS || c == OP_XCLASS)
     {
 #ifdef SUPPORT_WIDE_CHARS
     if (c == OP_XCLASS)
       repeat_opcode = code + GET(code, 1);
     else
 #endif
       repeat_opcode = code + 1 + (32 / sizeof(PCRE2_UCHAR));
 
     c = *repeat_opcode;
     if (c >= OP_CRSTAR && c <= OP_CRMINRANGE)
       {
       /* end must not be NULL. */
       end = get_chr_property_list(code, utf, cb->fcc, list);
 
       list[1] = (c & 1) == 0;
 
       if (compare_opcodes(end, utf, cb, list, end, &rec_limit))
         {
         switch (c)
           {
           case OP_CRSTAR:
           case OP_CRMINSTAR:
           *repeat_opcode = OP_CRPOSSTAR;
           break;
 
           case OP_CRPLUS:
           case OP_CRMINPLUS:
           *repeat_opcode = OP_CRPOSPLUS;
           break;
 
           case OP_CRQUERY:
           case OP_CRMINQUERY:
           *repeat_opcode = OP_CRPOSQUERY;
           break;
 
           case OP_CRRANGE:
           case OP_CRMINRANGE:
           *repeat_opcode = OP_CRPOSRANGE;
           break;
           }
         }
       }
     c = *code;
     }
 
   switch(c)
     {
     case OP_END:
     return 0;
 
     case OP_TYPESTAR:
     case OP_TYPEMINSTAR:
     case OP_TYPEPLUS:
     case OP_TYPEMINPLUS:
     case OP_TYPEQUERY:
     case OP_TYPEMINQUERY:
     case OP_TYPEPOSSTAR:
     case OP_TYPEPOSPLUS:
     case OP_TYPEPOSQUERY:
     if (code[1] == OP_PROP || code[1] == OP_NOTPROP) code += 2;
     break;
 
     case OP_TYPEUPTO:
     case OP_TYPEMINUPTO:
     case OP_TYPEEXACT:
     case OP_TYPEPOSUPTO:
     if (code[1 + IMM2_SIZE] == OP_PROP || code[1 + IMM2_SIZE] == OP_NOTPROP)
       code += 2;
     break;
 
     case OP_CALLOUT_STR:
     code += GET(code, 1 + 2*LINK_SIZE);
     break;
 
 #ifdef SUPPORT_WIDE_CHARS
     case OP_XCLASS:
     code += GET(code, 1);
     break;
 #endif
 
     case OP_MARK:
+    case OP_COMMIT_ARG: 
     case OP_PRUNE_ARG:
     case OP_SKIP_ARG:
     case OP_THEN_ARG:
     code += code[1];
     break;
     }
 
   /* Add in the fixed length from the table */
 
   code += PRIV(OP_lengths)[c];
 
   /* In UTF-8 and UTF-16 modes, opcodes that are followed by a character may be
   followed by a multi-byte character. The length in the table is a minimum, so
   we have to arrange to skip the extra code units. */
 
 #ifdef MAYBE_UTF_MULTI
   if (utf) switch(c)
     {
     case OP_CHAR:
     case OP_CHARI:
     case OP_NOT:
     case OP_NOTI:
     case OP_STAR:
     case OP_MINSTAR:
     case OP_PLUS:
     case OP_MINPLUS:
     case OP_QUERY:
     case OP_MINQUERY:
     case OP_UPTO:
     case OP_MINUPTO:
     case OP_EXACT:
     case OP_POSSTAR:
     case OP_POSPLUS:
     case OP_POSQUERY:
     case OP_POSUPTO:
     case OP_STARI:
     case OP_MINSTARI:
     case OP_PLUSI:
     case OP_MINPLUSI:
     case OP_QUERYI:
     case OP_MINQUERYI:
     case OP_UPTOI:
     case OP_MINUPTOI:
     case OP_EXACTI:
     case OP_POSSTARI:
     case OP_POSPLUSI:
     case OP_POSQUERYI:
     case OP_POSUPTOI:
     case OP_NOTSTAR:
     case OP_NOTMINSTAR:
     case OP_NOTPLUS:
     case OP_NOTMINPLUS:
     case OP_NOTQUERY:
     case OP_NOTMINQUERY:
     case OP_NOTUPTO:
     case OP_NOTMINUPTO:
     case OP_NOTEXACT:
     case OP_NOTPOSSTAR:
     case OP_NOTPOSPLUS:
     case OP_NOTPOSQUERY:
     case OP_NOTPOSUPTO:
     case OP_NOTSTARI:
     case OP_NOTMINSTARI:
     case OP_NOTPLUSI:
     case OP_NOTMINPLUSI:
     case OP_NOTQUERYI:
     case OP_NOTMINQUERYI:
     case OP_NOTUPTOI:
     case OP_NOTMINUPTOI:
     case OP_NOTEXACTI:
     case OP_NOTPOSSTARI:
     case OP_NOTPOSPLUSI:
     case OP_NOTPOSQUERYI:
     case OP_NOTPOSUPTOI:
     if (HAS_EXTRALEN(code[-1])) code += GET_EXTRALEN(code[-1]);
     break;
     }
 #else
   (void)(utf);  /* Keep compiler happy by referencing function argument */
 #endif  /* SUPPORT_WIDE_CHARS */
   }
 }
 
 /* End of pcre2_auto_possess.c */
diff --git a/testdata/testinput1 b/testdata/testinput1
index 5b01e99..552735b 100644
--- a/testdata/testinput1
+++ b/testdata/testinput1
@@ -5766,484 +5766,486 @@ name)/mark
 /x (*MARK:ab cd # comment
 ef) x/x,mark
     axxz
 
 /(?<=a(B){0}c)X/
     acX
 
 /(?<DEFINE>b)(?(DEFINE)(a+))(?&DEFINE)/          
     bbbb 
 \= Expect no match     
     baaab
 
 /(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[,;:])(?=.{8,16})(?!.*[\s])/
     \   Fred:099
 
 /(?=.*X)X$/ 
     \  X
 
 /(?s)(?=.*?)b/
     aabc
 
 /(Z)(a)\2{1,2}?(?-i)\1X/i
     ZaAAZX
 
 /(?'c')XX(?'YYYYYYYYYYYYYYYYYYYYYYYCl')/
 
 /[s[:digit:]\E-H]+/
     s09-H
 
 /[s[:digit:]\Q\E-H]+/
     s09-H
 
 /a+(?:|b)a/
     aaaa
 
 /X?(R||){3335}/
 
 /(?1)(A(*COMMIT)|B)D/
     ABD
     XABD
     BAD
     ABXABD  
 \= Expect no match 
     ABX 
 
 /(?(DEFINE)(?<m> 1? (?=(?<cond>2)?) 1 2 (?('cond')|3)))
     \A
     ()
     (?&m)
     \Z/x
     123
 
 /^(?: 
 (?: A| (1? (?=(?<cond>2)?) (1) 2 (?('cond')|3)) )
 (Z)
 )+$/x
     AZ123Z
 \= Expect no match     
     AZ12Z 
     
 /^ (?(DEFINE) ( (?!(a)\2b)..) )   ()(?1)  /x
     acb
 \= Expect no match     
     aab
     
 '(?>ab|abab){1,5}?M'
     abababababababababababM
 
 '(?>ab|abab){2}?M'
     abababM
 
 '((?(?=(a))a)+k)'
     bbak
 
 '((?(?=(a))a|)+k)'
     bbak
 
 '(?(?!(b))a|b)+k'
     ababbalbbadabak
 
 /(?!(b))c|b/
     Ab
     Ac 
 
 /(?=(b))b|c/
     Ab
     Ac 
 
 /^(.|(.)(?1)\2)$/
     a
     aba
     abcba
     ababa
     abcdcba
 
 /^((.)(?1)\2|.?)$/
     a
     aba
     abba
     abcba
     ababa
     abccba
     abcdcba
     abcddcba
 
 /^(.)(\1|a(?2))/
     bab
 
 /^(.|(.)(?1)?\2)$/
     abcba
     
 /^(?(?=(a))abc|def)/
     abc
 
 /^(?(?!(a))def|abc)/
     abc
 
 /^(?(?=(a)(*ACCEPT))abc|def)/
     abc
 
 /^(?(?!(a)(*ACCEPT))def|abc)/
     abc
 
 /^(?1)\d{3}(a)/
     a123a
 
 # This pattern uses a lot of named subpatterns in order to match email
 # addresses in various formats. It's a heavy test for named subpatterns. In the
 # <atext> group, slash is coded as \x{2f} so that this pattern can also be
 # processed by perltest.sh, which does not cater for an escaped delimiter
 # within the pattern. $ within the pattern must also be escaped. All $ and @
 # characters in subject strings are escaped so that Perl doesn't interpret them
 # as variable insertions and " characters must also be escaped for Perl.
 
 # This set of subpatterns is more or less a direct transliteration of the BNF
 # definitions in RFC2822, without any of the obsolete features. The addition of
 # a possessive + to the definition of <phrase> reduced the match limit in PCRE2
 # from over 5 million to just under 400, and eliminated a very noticeable delay
 # when this file was passed to perltest.sh.
 
 /(?ix)(?(DEFINE)
 (?<addr_spec>       (?&local_part) \@ (?&domain) )
 (?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
 (?<atext>           [a-z\d!#\$%&'*+-\x{2f}=?^_`{|}~] )
 (?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
 (?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
 (?<ctext>           [^\x{9}\x{10}\x{13}\x{7f}-\x{ff}\ ()\\] )
 (?<comment>         \( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \) )
 (?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                     (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
 (?<dcontent>        (?&dtext) | (?&quoted_pair) )
 (?<display_name>    (?&phrase) )
 (?<domain>          (?&dot_atom) | (?&domain_literal) )
 (?<domain_literal>  (?&CFWS)?+ \[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \]
                     (?&CFWS)?+ )
 (?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
 (?<dot_atom_text>   (?&atext)++ (?: \. (?&atext)++)*+ )
 (?<dtext>           [^\x{9}\x{10}\x{13}\x{7f}-\x{ff}\ \[\]\\] )
 (?<FWS>             (?: [\t\ ]*+ \n)?+ [\t\ ]++ )
 (?<local_part>      (?&dot_atom) | (?&quoted_string)  )
 (?<mailbox>         (?&name_addr) | (?&addr_spec) )
 (?<name_addr>       (?&display_name)? (?&angle_addr) )
 (?<phrase>          (?&word)++ )
 (?<qcontent>        (?&qtext) | (?&quoted_pair) )
 (?<quoted_pair>     " (?&text) )
 (?<quoted_string>   (?&CFWS)?+ " (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ "
                     (?&CFWS)?+ )
 (?<qtext>           [^\x{9}\x{10}\x{13}\x{7f}-\x{ff}\ "\\] )
 (?<text>            [^\r\n] )
 (?<word>            (?&atom) | (?&quoted_string) )
 ) # End DEFINE
 ^(?&mailbox)$/
     Alan Other <user\@dom.ain>
     <user\@dom.ain>
     user\@dom.ain
     user\@[] 
     user\@[domain literal] 
     user\@[domain literal with \"[square brackets\"] inside] 
     \"A. Other\" <user.1234\@dom.ain> (a comment)
     A. Other <user.1234\@dom.ain> (a comment)
     \"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"\@x400-re.lay
 \= Expect no match
     A missing angle <user\@some.where
     The quick brown fox
     
 # -------------------------------------------------------------------------- 
 
 # This pattern uses named groups to match default PCRE2 patterns. It's another
 # heavy test for named subpatterns. Once again, code slash as \x{2f} and escape 
 # $ even in classes so that this works with pcre2test.
 
 /(?sx)(?(DEFINE)
 
 (?<assertion>         (?&simple_assertion) | (?&lookaround) )
 
 (?<atomic_group>      \( \? > (?&regex) \) )
 
 (?<back_reference>    \\ \d+ |
                       \\g (?: [+-]?\d+ | \{ (?: [+-]?\d+ | (?&groupname) ) \} ) |
                       \\k <(?&groupname)> |
                       \\k '(?&groupname)' |
                       \\k \{ (?&groupname) \} |
                       \( \? P= (?&groupname) \) )
 
 (?<branch>            (?:(?&assertion) |
                          (?&callout) |
                          (?&comment) |
                          (?&option_setting) |
                          (?&qualified_item) |
                          (?&quoted_string) |
                          (?&quoted_string_empty) | 
                          (?&special_escape) |
                          (?&verb)
                       )* )
 
 (?<callout>           \(\?C (?: \d+ | 
                       (?: (?<D>["'`^%\#\$]) 
                         (?: \k'D'\k'D' | (?!\k'D') . )* \k'D' |
                       \{ (?: \}\} | [^}]*+ )* \} ) 
                       )? \) )
 
 (?<capturing_group>   \( (?: \? P? < (?&groupname) > | \? ' (?&groupname) ' )?
                       (?&regex) \) )
 
 (?<character_class>   \[ \^?+ (?: \] (?&class_item)* | (?&class_item)+ ) \] )
 
 (?<character_type>    (?! \\N\{\w+\} ) \\ [dDsSwWhHvVRN] )
 
 (?<class_item>        (?: \[ : (?:
                       alnum|alpha|ascii|blank|cntrl|digit|graph|lower|print|
                       punct|space|upper|word|xdigit
                       ) : \] |
                       (?&quoted_string) |  
                       (?&quoted_string_empty) | 
                       (?&escaped_character) | 
                       (?&character_type) | 
                       [^]] ) )
 
 (?<comment>           \(\?\# [^)]* \) | (?&quoted_string_empty) | \\E )
 
 (?<condition>         (?: \( [+-]? \d+ \) |
                           \( < (?&groupname) > \) |
                           \( ' (?&groupname) ' \) |
                           \( R \d* \) |
                           \( R & (?&groupname) \) |
                           \( (?&groupname) \) | 
                           \( DEFINE \) |
                           \( VERSION >?=\d+(?:\.\d\d?)? \) |
                           (?&callout)?+ (?&comment)* (?&lookaround) ) )
 
 (?<conditional_group> \(\? (?&condition) (?&branch) (?: \| (?&branch) )? \) )
 
 (?<delimited_regex>   (?<delimiter> [-\x{2f}!"'`=_:;,%&@~]) (?&regex) 
                       \k'delimiter' .* )
 
 (?<escaped_character> \\ (?: 0[0-7]{1,2} | [0-7]{1,3} | o\{ [0-7]+ \} |
                       x \{ (*COMMIT) [[:xdigit:]]* \} | x [[:xdigit:]]{0,2} | 
                       [aefnrt] | c[[:print:]] |
                       [^[:alnum:]] ) )
 
 (?<group>             (?&capturing_group) | (?&non_capturing_group) |
                       (?&resetting_group) | (?&atomic_group) |
                       (?&conditional_group) )
 
 (?<groupname>         [a-zA-Z_]\w* )
 
 (?<literal_character> (?! (?&range_qualifier) ) [^[()|*+?.\$\\] )
 
 (?<lookaround>        \(\? (?: = | ! | <= | <! ) (?&regex) \) )
 
 (?<non_capturing_group> \(\? [iJmnsUx-]* : (?&regex) \) )
 
 (?<option_setting>    \(\? [iJmnsUx-]* \) )
 
 (?<qualified_item>    (?:\. |
                          (?&lookaround) |
                          (?&back_reference) |
                          (?&character_class) |
                          (?&character_type) |
                          (?&escaped_character) |
                          (?&group) |
                          (?&subroutine_call) |
                          (?&literal_character) |
                          (?&quoted_string) 
                       ) (?&comment)? (?&qualifier)? )
 
 (?<qualifier>         (?: [?*+] | (?&range_qualifier) ) [+?]? )
 
 (?<quoted_string>     (?: \\Q (?: (?!\\E | \k'delimiter') . )++ (?: \\E | ) ) ) 
                       
 (?<quoted_string_empty>  \\Q\\E ) 
 
 (?<range_qualifier>   \{ (?: \d+ (?: , \d* )? | , \d+ ) \} )
 
 (?<regex>             (?&start_item)* (?&branch) (?: \| (?&branch) )* )
 
 (?<resetting_group>   \( \? \| (?&regex) \) )
 
 (?<simple_assertion>  \^ | \$ | \\A | \\b | \\B | \\G | \\z | \\Z )
 
 (?<special_escape>    \\K )
 
 (?<start_item>        \( \* (?:
                       ANY |
                       ANYCRLF |
                       BSR_ANYCRLF |
                       BSR_UNICODE |
                       CR |
                       CRLF |
                       LF |
                       LIMIT_MATCH=\d+ |
                       LIMIT_DEPTH=\d+ |
                       LIMIT_HEAP=\d+ | 
                       NOTEMPTY |
                       NOTEMPTY_ATSTART |
                       NO_AUTO_POSSESS |
                       NO_DOTSTAR_ANCHOR |
                       NO_JIT |
                       NO_START_OPT |
                       NUL |
                       UTF |
                       UCP ) \) )
 
 (?<subroutine_call>   (?: \(\?R\) | \(\?[+-]?\d+\) |
                       \(\? (?: & | P> ) (?&groupname) \) |
                       \\g < (?&groupname) > |
                       \\g ' (?&groupname) ' |
                       \\g < [+-]? \d+ > |
                       \\g ' [+-]? \d+ ) )
 
 (?<verb>              \(\* (?: ACCEPT | FAIL | F | COMMIT |
                       (?:MARK)?:(?&verbname) |
                       (?:PRUNE|SKIP|THEN) (?: : (?&verbname)? )? ) \) )
 
 (?<verbname>          [^)]+ )
 
 ) # End DEFINE
 # Kick it all off...
 ^(?&delimited_regex)$/subject_literal,jitstack=256
     /^(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\11*(\3\4)\1(?#)2$/
     /(cat(a(ract|tonic)|erpillar)) \1()2(3)/
     /^From +([^ ]+) +[a-zA-Z][a-zA-Z][a-zA-Z] +[a-zA-Z][a-zA-Z][a-zA-Z] +[0-9]?[0-9] +[0-9][0-9]:[0-9][0-9]/
     /^From\s+\S+\s+([a-zA-Z]{3}\s+){2}\d{1,2}\s+\d\d:\d\d/
     /<tr([\w\W\s\d][^<>]{0,})><TD([\w\W\s\d][^<>]{0,})>([\d]{0,}\.)(.*)((<BR>([\w\W\s\d][^<>]{0,})|[\s]{0,}))<\/a><\/TD><TD([\w\W\s\d][^<>]{0,})>([\w\W\s\d][^<>]{0,})<\/TD><TD([\w\W\s\d][^<>]{0,})>([\w\W\s\d][^<>]{0,})<\/TD><\/TR>/is
     /^(?(DEFINE) (?<A> a) (?<B> b) )  (?&A) (?&B) /
     /(?(DEFINE)(?<byte>2[0-4]\d|25[0-5]|1\d\d|[1-9]?\d))\b(?&byte)(\.(?&byte)){3}/
     /\b(?&byte)(\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\d|25[0-5]|1\d\d|[1-9]?\d))/
     /^(\w++|\s++)*$/
     /a+b?(*THEN)c+(*FAIL)/
     /(A (A|B(*ACCEPT)|C) D)(E)/x
     /^\W*+(?:((.)\W*+(?1)\W*+\2|)|((.)\W*+(?3)\W*+\4|\W*+.\W*+))\W*+$/i
     /A(*PRUNE)B(*SKIP)C(*THEN)D(*COMMIT)E(*F)F(*FAIL)G(?!)H(*ACCEPT)I/B
     /(?C`a``b`)(?C'a''b')(?C"a""b")(?C^a^^b^)(?C%a%%b%)(?C#a##b#)(?C$a$$b$)(?C{a}}b})/B,callout_info
     /(?sx)(?(DEFINE)(?<assertion> (?&simple_assertion) | (?&lookaround) )(?<atomic_group> \( \? > (?&regex) \) )(?<back_reference> \\ \d+ | \\g (?: [+-]?\d+ | \{ (?: [+-]?\d+ | (?&groupname) ) \} ) | \\k <(?&groupname)> | \\k '(?&groupname)' | \\k \{ (?&groupname) \} | \( \? P= (?&groupname) \) )(?<branch> (?:(?&assertion) | (?&callout) | (?&comment) | (?&option_setting) | (?&qualified_item) | (?&quoted_string) | (?&quoted_string_empty) | (?&special_escape) | (?&verb) )* )(?<callout> \(\?C (?: \d+ | (?: (?<D>["'`^%\#\$]) (?: \k'D'\k'D' | (?!\k'D') . )* \k'D' | \{ (?: \}\} | [^}]*+ )* \} ) )? \) )(?<capturing_group> \( (?: \? P? < (?&groupname) > | \? ' (?&groupname) ' )? (?&regex) \) )(?<character_class> \[ \^?+ (?: \] (?&class_item)* | (?&class_item)+ ) \] )(?<character_type> (?! \\N\{\w+\} ) \\ [dDsSwWhHvVRN] )(?<class_item> (?: \[ : (?: alnum|alpha|ascii|blank|cntrl|digit|graph|lower|print| punct|space|upper|word|xdigit ) : \] | (?&quoted_string) | (?&quoted_string_empty) | (?&escaped_character) | (?&character_type) | [^]] ) )(?<comment> \(\?\# [^)]* \) | (?&quoted_string_empty) | \\E )(?<condition> (?: \( [+-]? \d+ \) | \( < (?&groupname) > \) | \( ' (?&groupname) ' \) | \( R \d* \) | \( R & (?&groupname) \) | \( (?&groupname) \) | \( DEFINE \) | \( VERSION >?=\d+(?:\.\d\d?)? \) | (?&callout)?+ (?&comment)* (?&lookaround) ) )(?<conditional_group> \(\? (?&condition) (?&branch) (?: \| (?&branch) )? \) )(?<delimited_regex> (?<delimiter> [-\x{2f}!"'`=_:;,%&@~]) (?&regex) \k'delimiter' .* )(?<escaped_character> \\ (?: 0[0-7]{1,2} | [0-7]{1,3} | o\{ [0-7]+ \} | x \{ (*COMMIT) [[:xdigit:]]* \} | x [[:xdigit:]]{0,2} | [aefnrt] | c[[:print:]] | [^[:alnum:]] ) )(?<group> (?&capturing_group) | (?&non_capturing_group) | (?&resetting_group) | (?&atomic_group) | (?&conditional_group) )(?<groupname> [a-zA-Z_]\w* )(?<literal_character> (?! (?&range_qualifier) ) [^[()|*+?.\$\\] )(?<lookaround> \(\? (?: = | ! | <= | <! ) (?&regex) \) )(?<non_capturing_group> \(\? [iJmnsUx-]* : (?&regex) \) )(?<option_setting> \(\? [iJmnsUx-]* \) )(?<qualified_item> (?:\. | (?&lookaround) | (?&back_reference) | (?&character_class) | (?&character_type) | (?&escaped_character) | (?&group) | (?&subroutine_call) | (?&literal_character) | (?&quoted_string) ) (?&comment)? (?&qualifier)? )(?<qualifier> (?: [?*+] | (?&range_qualifier) ) [+?]? )(?<quoted_string> (?: \\Q (?: (?!\\E | \k'delimiter') . )++ (?: \\E | ) ) ) (?<quoted_string_empty> \\Q\\E ) (?<range_qualifier> \{ (?: \d+ (?: , \d* )? | , \d+ ) \} )(?<regex> (?&start_item)* (?&branch) (?: \| (?&branch) )* )(?<resetting_group> \( \? \| (?&regex) \) )(?<simple_assertion> \^ | \$ | \\A | \\b | \\B | \\G | \\z | \\Z )(?<special_escape> \\K )(?<start_item> \( \* (?: ANY | ANYCRLF | BSR_ANYCRLF | BSR_UNICODE | CR | CRLF | LF | LIMIT_MATCH=\d+ | LIMIT_DEPTH=\d+ | LIMIT_HEAP=\d+ | NOTEMPTY | NOTEMPTY_ATSTART | NO_AUTO_POSSESS | NO_DOTSTAR_ANCHOR | NO_JIT | NO_START_OPT | NUL | UTF | UCP ) \) )(?<subroutine_call> (?: \(\?R\) | \(\?[+-]?\d+\) | \(\? (?: & | P> ) (?&groupname) \) | \\g < (?&groupname) > | \\g ' (?&groupname) ' | \\g < [+-]? \d+ > | \\g ' [+-]? \d+ ) )(?<verb> \(\* (?: ACCEPT | FAIL | F | COMMIT | (?:MARK)?:(?&verbname) | (?:PRUNE|SKIP|THEN) (?: : (?&verbname)? )? ) \) )(?<verbname> [^)]+ ))^(?&delimited_regex)$/
 \= Expect no match
     /((?(?C'')\QX\E(?!((?(?C'')(?!X=X));=)r*X=X));=)/
     /(?:(?(2y)a|b)(X))+/
     /a(*MARK)b/
     /a(*CR)b/
     /(?P<abn>(?P=abn)(?<badstufxxx)/
 
 # -------------------------------------------------------------------------- 
 
 /<(?x:[a b])>/xx
     < >
 
 /<(?:[a b])>/xx
     < >
 
 /<(?xxx:[a b])>/
     < >
     
 /<(?-x:[a b])>/xx
     < >
 
 /[[:digit:]-]+/
     12-24
 
 /((?<=((*ACCEPT)) )\1?\b) /
 \= Expect no match     
     ((?<=((*ACCEPT)) )\\1?\\b)\x20
 
 /((?<=((*ACCEPT))X)\1?Y)\1/
     XYYZ
 
 /((?<=((*ACCEPT))X)\1?Y(*ACCEPT))\1/
     XYYZ
 
 /(?(DEFINE)(?<optional_a>a?)X)^(?&optional_a)a$/
     aa
     a
 
 /^(a?)b(?1)a/
     abaa
     aba 
     baa
     ba  
 
 /^(a?)+b(?1)a/
     abaa
     aba 
     baa
     ba  
 
 /^(a?)++b(?1)a/
     abaa
     aba 
     baa
     ba  
 
 /^(a?)+b/
     b
     ab
     aaab 
 
 /(?=a+)a(a+)++b/
     aab
 
 /(?<=\G.)/g,aftertext
     abc
 
 /(?<=(?=.)?)/
 
 /(?<=(?=.)?+)/
 
 /(?<=(?=.)*)/
 
 /(?<=(?=.){4,5})/
 
 /(?<=(?=.){4,5}x)/
 
 /a(?=.(*:X))(*SKIP:X)(*F)|(.)/
     abc
 
 /a(?>(*:X))(*SKIP:X)(*F)|(.)/
     abc
 
 /a(?:(*:X))(*SKIP:X)(*F)|(.)/
     abc
 
 #pattern no_start_optimize
 
 /(?>a(*:1))(?>b(*:1))(*SKIP:1)x|.*/
     abc
 
 /(?>a(*:1))(?>b)(*SKIP:1)x|.*/
     abc
 
 #subject mark
 
 /a(*ACCEPT:X)b/
     abc
     
 /(?=a(*ACCEPT:QQ)bc)axyz/
     axyz
 
 /(?(DEFINE)(a(*ACCEPT:X)))(?1)b/
     abc
     
 /a(*F:X)b/
     abc
     
 /(?(DEFINE)(a(*F:X)))(?1)b/
     abc
 
 /a(*COMMIT:X)b/
     abc
     
 /(?(DEFINE)(a(*COMMIT:X)))(?1)b/
     abc
     
 /a+(*:Z)b(*COMMIT:X)(*SKIP:Z)c|.*/
     aaaabd
 
 /a+(*:Z)b(*COMMIT:X)(*SKIP:X)c|.*/
     aaaabd
 
 /a(*COMMIT:X)b/
     axabc
 
 #pattern -no_start_optimize
 #subject -mark 
 
+/(.COMMIT)(*COMMIT::::::::::interal error:::)/
+
 # End of testinput1 
diff --git a/testdata/testoutput1 b/testdata/testoutput1
index eaea8e8..597261d 100644
--- a/testdata/testoutput1
+++ b/testdata/testoutput1
@@ -9902,8 +9902,10 @@ No match, mark = X
 /a(*COMMIT:X)b/
     axabc
 No match, mark = X
 
 #pattern -no_start_optimize
 #subject -mark 
 
+/(.COMMIT)(*COMMIT::::::::::interal error:::)/
+
 # End of testinput1 
