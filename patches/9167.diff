commit 0aa4e76b8e2ad1f2f40ece6a4552c85837a2a281
Author: Catena cyber <35799796+catenacyber@users.noreply.github.com>
Date:   Fri Jun 29 10:59:30 2018 +0200

    Initializes to 0 X86 immediateOffset (#1192)

diff --git a/arch/X86/X86DisassemblerDecoder.h b/arch/X86/X86DisassemblerDecoder.h
index 8b3e5ba6..90997117 100644
--- a/arch/X86/X86DisassemblerDecoder.h
+++ b/arch/X86/X86DisassemblerDecoder.h
@@ -555,177 +555,177 @@ struct InstructionSpecifier {
 /*
  * The x86 internal instruction, which is produced by the decoder.
  */
 typedef struct InternalInstruction {
   // from here, all members must be initialized to ZERO to work properly
   uint8_t operandSize;
   uint8_t prefix0, prefix1, prefix2, prefix3;
   /* true if the prefix byte corresponding to the entry is present; false if not */
   bool isPrefix26;
   bool isPrefix2e;
   bool isPrefix36;
   bool isPrefix3e;
   bool isPrefix64;
   bool isPrefix65;
   bool isPrefix66;
   bool isPrefix67;
   bool isPrefixf0;
   bool isPrefixf2;
   bool isPrefixf3;
   /* contains the location (for use with the reader) of the prefix byte */
   uint64_t prefix26;
   uint64_t prefix2e;
   uint64_t prefix36;
   uint64_t prefix3e;
   uint64_t prefix64;
   uint64_t prefix65;
   uint64_t prefix66;
   uint64_t prefix67;
   uint64_t prefixf0;
   uint64_t prefixf2;
   uint64_t prefixf3;
   /* The value of the REX prefix, if present */
   uint8_t rexPrefix;
   /* The segment override type */
   SegmentOverride segmentOverride;
   bool                          consumedModRM;
   uint8_t                       orgModRM;  // save original modRM because we will modify modRM
   /* The SIB byte, used for more complex 32- or 64-bit memory operands */
   bool                          consumedSIB;
   uint8_t                       sib;
   /* The displacement, used for memory operands */
   bool                          consumedDisplacement;
   int32_t                       displacement;
   /* The value of the two-byte escape prefix (usually 0x0f) */
   uint8_t twoByteEscape;
   /* The value of the three-byte escape prefix (usually 0x38 or 0x3a) */
   uint8_t threeByteEscape;
   /* SIB state */
   SIBIndex                      sibIndex;
   uint8_t                       sibScale;
   SIBBase                       sibBase;
   uint8_t                       numImmediatesConsumed;
   /* true if the prefix byte, 0xf2 or 0xf3 is xacquire or xrelease */
   bool xAcquireRelease;
 
   /* The value of the vector extension prefix(EVEX/VEX/XOP), if present */
   uint8_t vectorExtensionPrefix[4];
 
+  /* Offsets from the start of the instruction to the pieces of data, which is
+     needed to find relocation entries for adding symbolic operands */
+  uint8_t displacementOffset;
+  uint8_t immediateOffset;
+
   // end-of-zero-members
 
   /* Reader interface (C) */
   byteReader_t reader;
 
   /* Opaque value passed to the reader */
   const void* readerArg;
   /* The address of the next byte to read via the reader */
   uint64_t readerCursor;
 
   /* Logger interface (C) */
   dlog_t dlog;
   /* Opaque value passed to the logger */
   void* dlogArg;
 
   /* General instruction information */
 
   /* The mode to disassemble for (64-bit, protected, real) */
   DisassemblerMode mode;
   /* The start of the instruction, usable with the reader */
   uint64_t startLocation;
   /* The length of the instruction, in bytes */
   size_t length;
 
   /* Prefix state */
 
   /* The type of the vector extension prefix */
   VectorExtensionType vectorExtensionType;
 
   /* The location where a mandatory prefix would have to be (i.e., right before
 	 the opcode, or right before the REX prefix if one is present) */
   uint64_t necessaryPrefixLocation;
 
   /* Sizes of various critical pieces of data, in bytes */
   uint8_t registerSize;
   uint8_t addressSize;
   uint8_t displacementSize;
   uint8_t immediateSize;
 
   uint8_t immSize;	// immediate size for X86_OP_IMM operand
 
-  /* Offsets from the start of the instruction to the pieces of data, which is
-     needed to find relocation entries for adding symbolic operands */
-  uint8_t displacementOffset;
-  uint8_t immediateOffset;
-
   /* opcode state */
 
   /* The last byte of the opcode, not counting any ModR/M extension */
   uint8_t opcode;
 
   /* decode state */
 
   /* The type of opcode, used for indexing into the array of decode tables */
   OpcodeType opcodeType;
   /* The instruction ID, extracted from the decode table */
   uint16_t instructionID;
   /* The specifier for the instruction, from the instruction info table */
   const struct InstructionSpecifier *spec;
 
   /* state for additional bytes, consumed during operand decode.  Pattern:
      consumed___ indicates that the byte was already consumed and does not
      need to be consumed again */
 
   /* The VEX.vvvv field, which contains a third register operand for some AVX
      instructions */
   Reg                           vvvv;
 
   /* The writemask for AVX-512 instructions which is contained in EVEX.aaa */
   Reg                           writemask;
 
   /* The ModR/M byte, which contains most register operands and some portion of
      all memory operands */
   uint8_t                       modRM;
 
   // special data to handle MOVcr, MOVdr, MOVrc, MOVrd
   uint8_t                       firstByte;     // save the first byte in stream
 
   /* Immediates.  There can be two in some cases */
   uint8_t                       numImmediatesTranslated;
   uint64_t                      immediates[2];
 
   /* A register or immediate operand encoded into the opcode */
   Reg                           opcodeRegister;
 
   /* Portions of the ModR/M byte */
 
   /* These fields determine the allowable values for the ModR/M fields, which
      depend on operand and address widths */
   EABase                        eaBaseBase;
   EABase                        eaRegBase;
   Reg                           regBase;
 
   /* The Mod and R/M fields can encode a base for an effective address, or a
      register.  These are separated into two fields here */
   EABase                        eaBase;
   EADisplacement                eaDisplacement;
   /* The reg field always encodes a register */
   Reg                           reg;
 
   const struct OperandSpecifier *operands;
 } InternalInstruction;
 
 /* decodeInstruction - Decode one instruction and store the decoding results in
  *   a buffer provided by the consumer.
  * @param insn      - The buffer to store the instruction in.  Allocated by the
  *                    consumer.
  * @param reader    - The byteReader_t for the bytes to be read.
  * @param readerArg - An argument to pass to the reader for storing context
  *                    specific to the consumer.  May be NULL.
  * @param logger    - The dlog_t to be used in printing status messages from the
  *                    disassembler.  May be NULL.
  * @param loggerArg - An argument to pass to the logger for storing context
  *                    specific to the logger.  May be NULL.
  * @param startLoc  - The address (in the reader's address space) of the first
  *                    byte in the instruction.
  * @param mode      - The mode (16-bit, 32-bit, 64-bit) to decode in.
  * @return          - Nonzero if there was an error during decode, 0 otherwise.
  */
