commit 4f4a37ee1825d8e723364af6ec84c109594cd29c
Merge: d1d3541070 fc00933891
Author: Bart Van Assche <bvanassche@users.noreply.github.com>
Date:   Thu Oct 21 19:04:37 2021 -0700

    Merge pull request #359 from DavidKorczynski/crfix-11
    
    libnsmp: Fix off-by-one read

diff --git a/snmplib/read_config.c b/snmplib/read_config.c
index 95aae30489..89987fd205 100644
--- a/snmplib/read_config.c
+++ b/snmplib/read_config.c
@@ -742,238 +742,238 @@ int
 read_config(const char *filename,
             struct config_line *line_handler, int when)
 {
     static int      depth = 0;
     static int      files = 0;
 
     const char * const prev_filename = curfilename;
     const unsigned int prev_linecount = linecount;
 
     FILE           *ifile;
     char           *line = NULL;  /* current line buffer */
     size_t          linesize = 0; /* allocated size of line */
 
     netsnmp_assert(line_handler);
     netsnmp_assert(line_handler->config_token);
 
     /* reset file counter when recursion depth is 0 */
     if (depth == 0)
         files = 0;
 
     if ((ifile = fopen(filename, "r")) == NULL) {
 #ifdef ENOENT
         if (errno == ENOENT) {
             DEBUGMSGTL(("read_config", "%s: %s\n", filename,
                         strerror(errno)));
         } else
 #endif                          /* ENOENT */
 #ifdef EACCES
         if (errno == EACCES) {
             DEBUGMSGTL(("read_config", "%s: %s\n", filename,
                         strerror(errno)));
         } else
 #endif                          /* EACCES */
         {
             snmp_log_perror(filename);
         }
         return SNMPERR_GENERR;
     }
 
 #define CONFIG_MAX_FILES 4096
     if (files > CONFIG_MAX_FILES) {
         netsnmp_config_error("maximum conf file count (%d) exceeded\n",
                              CONFIG_MAX_FILES);
 	fclose(ifile);
         return SNMPERR_GENERR;
     }
 #define CONFIG_MAX_RECURSE_DEPTH 16
     if (depth > CONFIG_MAX_RECURSE_DEPTH) {
         netsnmp_config_error("nested include depth > %d\n",
                              CONFIG_MAX_RECURSE_DEPTH);
 	fclose(ifile);
         return SNMPERR_GENERR;
     }
 
     linecount = 0;
     curfilename = filename;
 
     ++files;
     ++depth;
 
     DEBUGMSGTL(("read_config:file", "Reading configuration %s (%d)\n",
                 filename, when));
 
     while (ifile) {
         size_t              linelen = 0; /* strlen of the current line */
         char               *cptr;
         struct config_line *lptr = line_handler;
 
         for (;;) {
             if (linesize <= linelen + 1) {
                 char *tmp = realloc(line, linesize + 256);
                 if (tmp) {
                     line = tmp;
                     linesize += 256;
                 } else {
                     netsnmp_config_error("Failed to allocate memory\n");
                     free(line);
                     fclose(ifile);
                     return SNMPERR_GENERR;
                 }
             }
             if (fgets(line + linelen, linesize - linelen, ifile) == NULL) {
                 line[linelen] = '\0';
                 fclose (ifile);
                 ifile = NULL;
                 break;
             }
 
             linelen += strlen(line + linelen);
 
-            if (line[linelen - 1] == '\n') {
+            if (linelen > 0 && line[linelen - 1] == '\n') {
               line[linelen - 1] = '\0';
               break;
             }
         }
 
         ++linecount;
         DEBUGMSGTL(("9:read_config:line", "%s:%d examining: %s\n",
                     filename, linecount, line));
         /*
          * check blank line or # comment 
          */
         if ((cptr = skip_white(line))) {
             char token[STRINGMAX];
 
             cptr = copy_nword(cptr, token, sizeof(token));
             if (token[0] == '[') {
                 if (token[strlen(token) - 1] != ']') {
 		    netsnmp_config_error("no matching ']' for type %s.",
 					 &token[1]);
                     continue;
                 }
                 token[strlen(token) - 1] = '\0';
                 lptr = read_config_get_handlers(&token[1]);
                 if (lptr == NULL) {
 		    netsnmp_config_error("No handlers regestered for type %s.",
 					 &token[1]);
                     continue;
                 }
                 DEBUGMSGTL(("read_config:context",
                             "Switching to new context: %s%s\n",
                             ((cptr) ? "(this line only) " : ""),
                             &token[1]));
                 if (cptr == NULL) {
                     /*
                      * change context permanently 
                      */
                     line_handler = lptr;
                     continue;
                 } else {
                     /*
                      * the rest of this line only applies. 
                      */
                     cptr = copy_nword(cptr, token, sizeof(token));
                 }
             } else if ((token[0] == 'i') && (strncasecmp(token,"include", 7 )==0)) {
                 if ( strcasecmp( token, "include" )==0) {
                     if (when != PREMIB_CONFIG && 
 	                !netsnmp_ds_get_boolean(NETSNMP_DS_LIBRARY_ID, 
 				                NETSNMP_DS_LIB_NO_TOKEN_WARNINGS)) {
 	                netsnmp_config_warn("Ambiguous token '%s' - use 'includeSearch' (or 'includeFile') instead.", token);
                     }
                     continue;
                 } else if ( strcasecmp( token, "includedir" )==0) {
                     DIR *d;
                     struct dirent *entry;
                     char  fname[SNMP_MAXPATH];
                     int   len;
 
                     if (cptr == NULL) {
                         if (when != PREMIB_CONFIG)
 		            netsnmp_config_error("Blank line following %s token.", token);
                         continue;
                     }
                     if ((d=opendir(cptr)) == NULL ) {
                         if (when != PREMIB_CONFIG)
                             netsnmp_config_error("Can't open include dir '%s'.", cptr);
                         continue;
                     }
                     while ((entry = readdir( d )) != NULL ) {
                         if ( entry->d_name[0] != '.') {
                             len = strlen(entry->d_name);
                             if ((len > 5) && (strcmp(&(entry->d_name[len-5]),".conf") == 0)) {
                                 snprintf(fname, SNMP_MAXPATH, "%s/%s",
                                          cptr, entry->d_name);
                                 (void)read_config(fname, line_handler, when);
                             }
                         }
                     }
                     closedir(d);
                     continue;
                 } else if ( strcasecmp( token, "includefile" )==0) {
                     char  fname[SNMP_MAXPATH], *cp;
 
                     if (cptr == NULL) {
                         if (when != PREMIB_CONFIG)
 		            netsnmp_config_error("Blank line following %s token.", token);
                         continue;
                     }
                     if ( cptr[0] == '/' ) {
                         strlcpy(fname, cptr, SNMP_MAXPATH);
                     } else {
                         strlcpy(fname, filename, SNMP_MAXPATH);
                         cp = strrchr(fname, '/');
                         if (!cp)
                             fname[0] = '\0';
                         else
                             *(++cp) = '\0';
                         strlcat(fname, cptr, SNMP_MAXPATH);
                     }
                     if (read_config(fname, line_handler, when) !=
                         SNMPERR_SUCCESS && when != PREMIB_CONFIG)
                         netsnmp_config_error("Included file '%s' not found.",
                                              fname);
                     continue;
                 } else if ( strcasecmp( token, "includesearch" )==0) {
                     struct config_files ctmp;
                     int len, ret;
 
                     if (cptr == NULL) {
                         if (when != PREMIB_CONFIG)
 		            netsnmp_config_error("Blank line following %s token.", token);
                         continue;
                     }
                     len = strlen(cptr);
                     ctmp.fileHeader = cptr;
                     ctmp.start = line_handler;
                     ctmp.next = NULL;
                     if ((len > 5) && (strcmp(&cptr[len-5],".conf") == 0))
                        cptr[len-5] = 0; /* chop off .conf */
                     ret = read_config_files_of_type(when,&ctmp);
                     if ((len > 5) && (cptr[len-5] == 0))
                        cptr[len-5] = '.'; /* restore .conf */
                     if (( ret != SNMPERR_SUCCESS ) && (when != PREMIB_CONFIG))
 		        netsnmp_config_error("Included config '%s' not found.", cptr);
                     continue;
                 } else {
                     lptr = line_handler;
                 }
             } else {
                 lptr = line_handler;
             }
             if (cptr == NULL) {
 		netsnmp_config_error("Blank line following %s token.", token);
             } else {
                 DEBUGMSGTL(("read_config:line", "%s:%d examining: %s\n",
                             filename, linecount, line));
                 run_config_handler(lptr, token, cptr, when);
             }
         }
     }
     free(line);
     linecount = prev_linecount;
     curfilename = prev_filename;
     --depth;
     return SNMPERR_SUCCESS;
 
 }                               /* end read_config() */
