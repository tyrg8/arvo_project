commit 7416faceeb7a875ba7316cee124edee2d59ea8d0
Author: Qunxin Liu <qxliu@google.com>
Date:   Wed Jul 7 11:27:49 2021 -0700

    [subset] fuzzer fix: https://oss-fuzz.com/testcase-detail/5715464591376384

diff --git a/src/hb-ot-color-cpal-table.hh b/src/hb-ot-color-cpal-table.hh
index a59b46bef..9ee4bafb2 100644
--- a/src/hb-ot-color-cpal-table.hh
+++ b/src/hb-ot-color-cpal-table.hh
@@ -45,111 +45,92 @@ namespace OT {
 struct CPALV1Tail
 {
   friend struct CPAL;
 
   private:
   hb_ot_color_palette_flags_t get_palette_flags (const void *base,
 						 unsigned int palette_index,
 						 unsigned int palette_count) const
   {
     if (!paletteFlagsZ) return HB_OT_COLOR_PALETTE_FLAG_DEFAULT;
     return (hb_ot_color_palette_flags_t) (uint32_t)
 	   (base+paletteFlagsZ).as_array (palette_count)[palette_index];
   }
 
   hb_ot_name_id_t get_palette_name_id (const void *base,
 				       unsigned int palette_index,
 				       unsigned int palette_count) const
   {
     if (!paletteLabelsZ) return HB_OT_NAME_ID_INVALID;
     return (base+paletteLabelsZ).as_array (palette_count)[palette_index];
   }
 
   hb_ot_name_id_t get_color_name_id (const void *base,
 				     unsigned int color_index,
 				     unsigned int color_count) const
   {
     if (!colorLabelsZ) return HB_OT_NAME_ID_INVALID;
     return (base+colorLabelsZ).as_array (color_count)[color_index];
   }
 
   public:
   bool serialize (hb_serialize_context_t *c,
                   unsigned palette_count,
                   unsigned color_count,
                   const void *base,
                   const hb_map_t *color_index_map) const
   {
     TRACE_SERIALIZE (this);
     auto *out = c->allocate_size<CPALV1Tail> (static_size);
     if (unlikely (!out)) return_trace (false);
 
-    const hb_array_t<const HBUINT32> paletteFlags = (base+paletteFlagsZ).as_array (palette_count);
-    const hb_array_t<const NameID> paletteLabels = (base+paletteLabelsZ).as_array (palette_count);
-    const hb_array_t<const NameID> colorLabels = (base+colorLabelsZ).as_array (color_count);
+    out->paletteFlagsZ.serialize_copy (c, paletteFlagsZ, base, 0, hb_serialize_context_t::Head, palette_count);
+    out->paletteLabelsZ.serialize_copy (c, paletteLabelsZ, base, 0, hb_serialize_context_t::Head, palette_count);
 
-    c->push ();
-    for (const auto _ : paletteFlags)
-    {
-      if (!c->copy<HBUINT32> (_))
-      {
-        c->pop_discard ();
-        return_trace (false);
-      }
-    }
-    c->add_link (out->paletteFlagsZ, c->pop_pack ());
-
-    c->push ();
-    for (const auto _ : paletteLabels)
-    {
-      if (!c->copy<NameID> (_))
-      {
-        c->pop_discard ();
-        return_trace (false);
-      }
-    }
-    c->add_link (out->paletteLabelsZ, c->pop_pack ());
-
-    c->push ();
-    for (const auto _ : colorLabels)
+    const hb_array_t<const NameID> colorLabels = (base+colorLabelsZ).as_array (color_count);
+    if (colorLabelsZ)
     {
-      if (!color_index_map->has (_)) continue;
-      NameID new_color_idx;
-      new_color_idx = color_index_map->get (_);
-      if (!c->copy<NameID> (new_color_idx))
+      c->push ();
+      for (const auto _ : colorLabels)
       {
-        c->pop_discard ();
-        return_trace (false);
+        if (!color_index_map->has (_)) continue;
+        NameID new_color_idx;
+        new_color_idx = color_index_map->get (_);
+        if (!c->copy<NameID> (new_color_idx))
+        {
+          c->pop_discard ();
+          return_trace (false);
+        }
       }
+      c->add_link (out->colorLabelsZ, c->pop_pack ());
     }
-    c->add_link (out->colorLabelsZ, c->pop_pack ());
     return_trace (true);
   }
 
   bool sanitize (hb_sanitize_context_t *c,
 		 const void *base,
 		 unsigned int palette_count,
 		 unsigned int color_count) const
   {
     TRACE_SANITIZE (this);
     return_trace (c->check_struct (this) &&
 		  (!paletteFlagsZ  || (base+paletteFlagsZ).sanitize (c, palette_count)) &&
 		  (!paletteLabelsZ || (base+paletteLabelsZ).sanitize (c, palette_count)) &&
 		  (!colorLabelsZ   || (base+colorLabelsZ).sanitize (c, color_count)));
   }
 
   protected:
   NNOffset32To<UnsizedArrayOf<HBUINT32>>
 		paletteFlagsZ;		/* Offset from the beginning of CPAL table to
 					 * the Palette Type Array. Set to 0 if no array
 					 * is provided. */
   NNOffset32To<UnsizedArrayOf<NameID>>
 		paletteLabelsZ;		/* Offset from the beginning of CPAL table to
 					 * the palette labels array. Set to 0 if no
 					 * array is provided. */
   NNOffset32To<UnsizedArrayOf<NameID>>
 		colorLabelsZ;		/* Offset from the beginning of CPAL table to
 					 * the color labels array. Set to 0
 					 * if no array is provided. */
   public:
   DEFINE_SIZE_STATIC (12);
 };
diff --git a/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5715464591376384 b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5715464591376384
new file mode 100644
index 000000000..63faabe41
Binary files /dev/null and b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5715464591376384 differ
