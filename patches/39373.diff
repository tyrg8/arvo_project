commit 11ffeffadd980f9f96019fe180fc1e81827e3790
Author: Dirk Farin <dirk.farin@gmail.com>
Date:   Mon Apr 4 20:43:45 2022 +0200

    fix wrong memcpy size

diff --git a/libheif/heif_colorconversion.cc b/libheif/heif_colorconversion.cc
index 2b05068..5a07ebb 100644
--- a/libheif/heif_colorconversion.cc
+++ b/libheif/heif_colorconversion.cc
@@ -370,165 +370,166 @@ std::shared_ptr<HeifPixelImage>
 Op_YCbCr_to_RGB<Pixel>::convert_colorspace(const std::shared_ptr<const HeifPixelImage>& input,
                                            const ColorState& target_state,
                                            const ColorConversionOptions& options)
 {
   bool hdr = !std::is_same<Pixel, uint8_t>::value;
 
   heif_chroma chroma = input->get_chroma_format();
 
   int bpp_y = input->get_bits_per_pixel(heif_channel_Y);
   int bpp_cb = input->get_bits_per_pixel(heif_channel_Cb);
   int bpp_cr = input->get_bits_per_pixel(heif_channel_Cr);
   int bpp_a = 0;
 
   bool has_alpha = input->has_channel(heif_channel_Alpha);
 
   if (has_alpha) {
     bpp_a = input->get_bits_per_pixel(heif_channel_Alpha);
   }
 
   if (!hdr) {
     if (bpp_y != 8 ||
         bpp_cb != 8 ||
         bpp_cr != 8) {
       return nullptr;
     }
   }
   else {
     if (bpp_y == 8 ||
         bpp_cb == 8 ||
         bpp_cr == 8) {
       return nullptr;
     }
   }
 
 
   if (bpp_y != bpp_cb ||
       bpp_y != bpp_cr) {
     // TODO: test with varying bit depths when we have a test image
     return nullptr;
   }
 
 
   auto colorProfile = input->get_color_profile_nclx();
 
   int width = input->get_width();
   int height = input->get_height();
 
   auto outimg = std::make_shared<HeifPixelImage>();
 
   outimg->create(width, height, heif_colorspace_RGB, heif_chroma_444);
 
   outimg->add_plane(heif_channel_R, width, height, bpp_y);
   outimg->add_plane(heif_channel_G, width, height, bpp_y);
   outimg->add_plane(heif_channel_B, width, height, bpp_y);
 
   if (has_alpha) {
     outimg->add_plane(heif_channel_Alpha, width, height, bpp_a);
   }
 
   const Pixel* in_y, * in_cb, * in_cr, * in_a;
   int in_y_stride = 0, in_cb_stride = 0, in_cr_stride = 0, in_a_stride = 0;
 
   Pixel* out_r, * out_g, * out_b, * out_a;
   int out_r_stride = 0, out_g_stride = 0, out_b_stride = 0, out_a_stride = 0;
 
   in_y = (const Pixel*) input->get_plane(heif_channel_Y, &in_y_stride);
   in_cb = (const Pixel*) input->get_plane(heif_channel_Cb, &in_cb_stride);
   in_cr = (const Pixel*) input->get_plane(heif_channel_Cr, &in_cr_stride);
   out_r = (Pixel*) outimg->get_plane(heif_channel_R, &out_r_stride);
   out_g = (Pixel*) outimg->get_plane(heif_channel_G, &out_g_stride);
   out_b = (Pixel*) outimg->get_plane(heif_channel_B, &out_b_stride);
 
   if (has_alpha) {
     in_a = (const Pixel*) input->get_plane(heif_channel_Alpha, &in_a_stride);
     out_a = (Pixel*) outimg->get_plane(heif_channel_Alpha, &out_a_stride);
   }
   else {
     in_a = nullptr;
     out_a = nullptr;
   }
 
 
   uint16_t halfRange = (uint16_t) (1 << (bpp_y - 1));
   int32_t fullRange = (1 << bpp_y) - 1;
 
   int shiftH = chroma_h_subsampling(chroma) - 1;
   int shiftV = chroma_v_subsampling(chroma) - 1;
 
   if (hdr) {
     in_y_stride /= 2;
     in_cb_stride /= 2;
     in_cr_stride /= 2;
     in_a_stride /= 2;
     out_r_stride /= 2;
     out_g_stride /= 2;
     out_b_stride /= 2;
     out_a_stride /= 2;
   }
 
   int matrix_coeffs = 2;
   bool full_range_flag = true;
   YCbCr_to_RGB_coefficients coeffs = YCbCr_to_RGB_coefficients::defaults();
   if (colorProfile) {
     matrix_coeffs = colorProfile->get_matrix_coefficients();
     full_range_flag = colorProfile->get_full_range_flag();
     coeffs = heif::get_YCbCr_to_RGB_coefficients(colorProfile->get_matrix_coefficients(),
                                                  colorProfile->get_colour_primaries());
   }
 
 
   int x, y;
   for (y = 0; y < height; y++) {
     for (x = 0; x < width; x++) {
       int cx = (x >> shiftH);
       int cy = (y >> shiftV);
 
       if (matrix_coeffs == 0) {
         if (full_range_flag) {
           out_r[y * out_r_stride + x] = in_cr[cy * in_cr_stride + cx];
           out_g[y * out_g_stride + x] = in_y[y * in_y_stride + x];
           out_b[y * out_b_stride + x] = in_cb[cy * in_cb_stride + cx];
         }
         else {
           out_r[y * out_r_stride + x] = Pixel(((in_cr[cy * in_cr_stride + cx] * 219 + 128) >> 8) + 16);
           out_g[y * out_g_stride + x] = Pixel(((in_y[y * in_y_stride + x] * 219 + 128) >> 8) + 16);
           out_b[y * out_b_stride + x] = Pixel(((in_cb[cy * in_cb_stride + cx] * 219 + 128) >> 8) + 16);
         }
       }
       else if (matrix_coeffs == 8) {
         // TODO: check this. I have no input image yet which is known to be correct.
         // TODO: is there a coeff=8 with full_range=false ?
 
         int yv = in_y[y * in_y_stride + x];
         int cb = in_cb[cy * in_cb_stride + cx] - halfRange;
         int cr = in_cr[cy * in_cr_stride + cx] - halfRange;
 
         out_r[y * out_r_stride + x] = (Pixel) (clip_int_u8(yv - cb + cr));
         out_g[y * out_g_stride + x] = (Pixel) (clip_int_u8(yv + cb));
         out_b[y * out_b_stride + x] = (Pixel) (clip_int_u8(yv - cb - cr));
       }
       else { // TODO: matrix_coefficients = 10,11,13,14
         float yv, cb, cr;
         yv = static_cast<float>(in_y[y * in_y_stride + x] );
         cb = static_cast<float>(in_cb[cy * in_cb_stride + cx] - halfRange);
         cr = static_cast<float>(in_cr[cy * in_cr_stride + cx] - halfRange);
 
         if (!full_range_flag) {
           yv = (yv - 16) * 1.1689f;
           cb = cb * 1.1429f;
           cr = cr * 1.1429f;
         }
 
         out_r[y * out_r_stride + x] = (Pixel) (clip_f_u16(yv + coeffs.r_cr * cr, fullRange));
         out_g[y * out_g_stride + x] = (Pixel) (clip_f_u16(yv + coeffs.g_cb * cb + coeffs.g_cr * cr, fullRange));
         out_b[y * out_b_stride + x] = (Pixel) (clip_f_u16(yv + coeffs.b_cb * cb, fullRange));
       }
     }
 
     if (has_alpha) {
-      memcpy(&out_a[y * out_a_stride], &in_a[y * in_a_stride], width * 2);
+      int copyWidth = (hdr ? width * 2 : width);
+      memcpy(&out_a[y * out_a_stride], &in_a[y * in_a_stride], copyWidth);
     }
   }
 
   return outimg;
 }
