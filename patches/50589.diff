commit db72c6ee38e5a87f4aaf255197eb49da2b1fa651
Author: Matthias MÃ¶ller <m_moeller@live.de>
Date:   Sat Feb 4 15:16:22 2023 +0100

    When "getNextBlock" was called after "getNextLine", the pointer could still on the newline.
    
    The pointer to a newline could not advance enough, when the line ended with \r\n. The resulting buffer was correct, as the buffer range went from <start> until \r, but that the pointer increased by just 1 could lead to the problem that the next pointer points at \n, which is still part of the newline and therefore, "getNextBlock" got 1 byte too much.
    
    Refs Issue #4871

diff --git a/code/AssetLib/Ply/PlyParser.cpp b/code/AssetLib/Ply/PlyParser.cpp
index a7cf92606..6edba71fc 100644
--- a/code/AssetLib/Ply/PlyParser.cpp
+++ b/code/AssetLib/Ply/PlyParser.cpp
@@ -410,30 +410,30 @@ bool PLY::DOM::SkipComments(std::vector<char> buffer) {
 // ------------------------------------------------------------------------------------------------
 bool PLY::DOM::ParseHeader(IOStreamBuffer<char> &streamBuffer, std::vector<char> &buffer, bool isBinary) {
     ASSIMP_LOG_VERBOSE_DEBUG("PLY::DOM::ParseHeader() begin");
 
     // parse all elements
     while (!buffer.empty()) {
         // skip all comments
         PLY::DOM::SkipComments(buffer);
 
         PLY::Element out;
         if (PLY::Element::ParseElement(streamBuffer, buffer, &out)) {
             // add the element to the list of elements
             alElements.push_back(out);
-        } else if (TokenMatch(buffer, "end_header", 10)) { //checks for /n ending, if it doesn't end with /r/n
+        } else if (TokenMatch(buffer, "end_header", 10)) {
             // we have reached the end of the header
             break;
         } else {
             // ignore unknown header elements
             streamBuffer.getNextLine(buffer);
         }
     }
 
     if (!isBinary) // it would occur an error, if binary data start with values as space or line end.
         SkipSpacesAndLineEnd(buffer);
 
     ASSIMP_LOG_VERBOSE_DEBUG("PLY::DOM::ParseHeader() succeeded");
     return true;
 }
 
 // ------------------------------------------------------------------------------------------------
diff --git a/include/assimp/IOStreamBuffer.h b/include/assimp/IOStreamBuffer.h
index b34fc9ee1..abae1572c 100644
--- a/include/assimp/IOStreamBuffer.h
+++ b/include/assimp/IOStreamBuffer.h
@@ -288,42 +288,44 @@ template <class T>
 AI_FORCE_INLINE bool IOStreamBuffer<T>::getNextLine(std::vector<T> &buffer) {
     buffer.resize(m_cacheSize);
     if (isEndOfCache(m_cachePos, m_cacheSize) || 0 == m_filePos) {
         if (!readNextBlock()) {
             return false;
         }
     }
 
     if (IsLineEnd(m_cache[m_cachePos])) {
         // skip line end
         while (m_cache[m_cachePos] != '\n') {
             ++m_cachePos;
         }
         ++m_cachePos;
         if (isEndOfCache(m_cachePos, m_cacheSize)) {
             if (!readNextBlock()) {
                 return false;
             }
         }
     }
 
     size_t i(0);
     while (!IsLineEnd(m_cache[m_cachePos])) {
         buffer[i] = m_cache[m_cachePos];
         ++m_cachePos;
         ++i;
 
         if(i == buffer.size()) {
             buffer.resize(buffer.size() * 2);
         }
 
         if (m_cachePos >= m_cacheSize) {
             if (!readNextBlock()) {
                 return false;
             }
         }
     }
     buffer[i] = '\n';
+    while (m_cachePos < m_cacheSize && (m_cache[m_cachePos] == '\r' || m_cache[m_cachePos] == '\n')) {
     ++m_cachePos;
+    }
 
     return true;
 }
diff --git a/test/models/PLY/cube_binary_header_with_RN_newline.ply b/test/models/PLY/cube_binary_header_with_RN_newline.ply
new file mode 100644
index 000000000..bff347860
Binary files /dev/null and b/test/models/PLY/cube_binary_header_with_RN_newline.ply differ
diff --git a/test/unit/utPLYImportExport.cpp b/test/unit/utPLYImportExport.cpp
index 2edbdd71f..1f733c0e7 100644
--- a/test/unit/utPLYImportExport.cpp
+++ b/test/unit/utPLYImportExport.cpp
@@ -125,6 +125,22 @@ TEST_F(utPLYImportExport, importBinaryPLY) {
     EXPECT_EQ(12u, scene->mMeshes[0]->mNumFaces);
 }
 
+// Tests of a PLY file gets read with \r\n as newlines instead of just \n (i.e. solidwork exported ply files)
+TEST_F(utPLYImportExport, importBinaryPLYWithRNNewline) {
+    Assimp::Importer importer;
+    const aiScene *scene = importer.ReadFile(ASSIMP_TEST_MODELS_DIR "/PLY/cube_binary_header_with_RN_newline.ply", aiProcess_ValidateDataStructure);
+
+    ASSERT_NE(nullptr, scene);
+    ASSERT_NE(nullptr, scene->mMeshes[0]);
+    // This test model is double sided, so 12 faces instead of 6
+    ASSERT_EQ(12u, scene->mMeshes[0]->mNumFaces);
+    // Also check if the indices were parsed correctly
+    ASSERT_EQ(3u, scene->mMeshes[0]->mFaces[0].mNumIndices);
+    EXPECT_EQ(0u, scene->mMeshes[0]->mFaces[0].mIndices[0]);
+    EXPECT_EQ(1u, scene->mMeshes[0]->mFaces[0].mIndices[1]);
+    EXPECT_EQ(2u, scene->mMeshes[0]->mFaces[0].mIndices[2]);
+}
+
 TEST_F(utPLYImportExport, vertexColorTest) {
     Assimp::Importer importer;
     const aiScene *scene = importer.ReadFile(ASSIMP_TEST_MODELS_DIR "/PLY/float-color.ply", aiProcess_ValidateDataStructure);
