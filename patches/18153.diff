commit a1b82509e40fcb5c4065a8fe1bf8b078e8a8373f
Author: Raúl Marín Rodríguez <rmrodriguez@carto.com>
Date:   Thu Oct 10 10:10:37 2019 +0000

    Fix leak in lwcurvepoly_from_wkb_state
    
    Closes #4534
    Closes https://github.com/postgis/postgis/pull/492
    
    
    
    git-svn-id: http://svn.osgeo.org/postgis/trunk@17892 b70326c6-7e19-0410-871a-916f4a2858ee

diff --git a/NEWS b/NEWS
index 795218f8a..35345487b 100644
--- a/NEWS
+++ b/NEWS
@@ -1,3 +1,14 @@
+PostGIS 3.0.0rc2
+2019/10/XX
+
+For full changes and enhancements, refer to PostGIS 3.0.0.
+This version requires PostgreSQL 9.5+-12 and GEOS >= 3.6+
+Additional features enabled if you are running Proj6+ and PostgreSQL 12
+Additional performance enhancements if running GEOS 3.8+
+
+* Major highlights *
+  - #4534, Fix leak in lwcurvepoly_from_wkb_state (Raúl Marín)
+
 PostGIS 3.0.0rc1
 2019/10/08
 
@@ -7,9 +18,9 @@ Additional features enabled if you are running Proj6+ and PostgreSQL 12
 Additional performance enhancements if running GEOS 3.8+
 
 * Major highlights *
   - #4519, Fix getSRIDbySRS crash (Raúl Marín)
   - #4520, Use a clean environment when detecting C++ libraries (Raúl Marín)
-  - Restore ST_Union() aggregate signature so drop agg not required and re-work 
+  - Restore ST_Union() aggregate signature so drop agg not required and re-work
     performance/size enhancement to continue to avoid
     using Array type during ST_Union(), hopefully
     avoiding Array size limitations. (Paul Ramsey)
diff --git a/liblwgeom/cunit/cu_in_wkb.c b/liblwgeom/cunit/cu_in_wkb.c
index bcd5e2891..ff4fb61c0 100644
--- a/liblwgeom/cunit/cu_in_wkb.c
+++ b/liblwgeom/cunit/cu_in_wkb.c
@@ -214,20 +214,29 @@ static void test_wkb_in_multisurface(void) {}
 static void test_wkb_in_malformed(void)
 {
 
 	/* OSSFUXX */
 	cu_wkb_malformed_in("0000000008200000002020202020202020");
 
 	/* See http://trac.osgeo.org/postgis/ticket/1445 */
 	cu_wkb_malformed_in("01060000400200000001040000400100000001010000400000000000000000000000000000000000000000000000000101000040000000000000F03F000000000000F03F000000000000F03F");
 	cu_wkb_malformed_in("01050000400200000001040000400100000001010000400000000000000000000000000000000000000000000000000101000040000000000000F03F000000000000F03F000000000000F03F");
 	cu_wkb_malformed_in("01040000400200000001040000400100000001010000400000000000000000000000000000000000000000000000000101000040000000000000F03F000000000000F03F000000000000F03F");
 	cu_wkb_malformed_in("01030000400200000001040000400100000001010000400000000000000000000000000000000000000000000000000101000040000000000000F03F000000000000F03F000000000000F03F");
 
 	/* See http://trac.osgeo.org/postgis/ticket/168 */
 	cu_wkb_malformed_in("01060000C00100000001030000C00100000003000000E3D9107E234F5041A3DB66BC97A30F4122ACEF440DAF9440FFFFFFFFFFFFEFFFE3D9107E234F5041A3DB66BC97A30F4122ACEF440DAF9440FFFFFFFFFFFFEFFFE3D9107E234F5041A3DB66BC97A30F4122ACEF440DAF9440FFFFFFFFFFFFEFFF");
 }
 
+static void
+test_wkb_leak(void)
+{
+	/* OSS-FUZZ https://trac.osgeo.org/postgis/ticket/4534 */
+	uint8_t wkb[36] = {000, 000, 000, 000, 015, 000, 000, 000, 003, 000, 200, 000, 000, 010, 000, 000, 000, 000,
+			   000, 000, 000, 000, 010, 000, 000, 000, 000, 000, 000, 000, 000, 010, 000, 000, 000, 000};
+	LWGEOM *g = lwgeom_from_wkb(wkb, 36, LW_PARSER_CHECK_NONE);
+	lwgeom_free(g);
+}
 
 /*
 ** Used by test harness to register the tests in this file.
 */
@@ -235,17 +244,18 @@ void wkb_in_suite_setup(void);
 void wkb_in_suite_setup(void)
 {
 	CU_pSuite suite = CU_add_suite("wkb_input", init_wkb_in_suite, clean_wkb_in_suite);
 	PG_ADD_TEST(suite, test_wkb_in_point);
 	PG_ADD_TEST(suite, test_wkb_in_linestring);
 	PG_ADD_TEST(suite, test_wkb_in_polygon);
 	PG_ADD_TEST(suite, test_wkb_in_multipoint);
 	PG_ADD_TEST(suite, test_wkb_in_multilinestring);
 	PG_ADD_TEST(suite, test_wkb_in_multipolygon);
 	PG_ADD_TEST(suite, test_wkb_in_collection);
 	PG_ADD_TEST(suite, test_wkb_in_circularstring);
 	PG_ADD_TEST(suite, test_wkb_in_compoundcurve);
 	PG_ADD_TEST(suite, test_wkb_in_curvpolygon);
 	PG_ADD_TEST(suite, test_wkb_in_multicurve);
 	PG_ADD_TEST(suite, test_wkb_in_multisurface);
 	PG_ADD_TEST(suite, test_wkb_in_malformed);
+	PG_ADD_TEST(suite, test_wkb_leak);
 }
diff --git a/liblwgeom/lwcurvepoly.c b/liblwgeom/lwcurvepoly.c
index bdabdb461..e8317e60c 100644
--- a/liblwgeom/lwcurvepoly.c
+++ b/liblwgeom/lwcurvepoly.c
@@ -71,60 +71,61 @@ lwcurvepoly_construct_from_lwpoly(LWPOLY *lwpoly)
 int lwcurvepoly_add_ring(LWCURVEPOLY *poly, LWGEOM *ring)
 {
 	uint32_t i;
 
 	/* Can't do anything with NULLs */
 	if( ! poly || ! ring )
 	{
 		LWDEBUG(4,"NULL inputs!!! quitting");
 		return LW_FAILURE;
 	}
 
 	/* Check that we're not working with garbage */
 	if ( poly->rings == NULL && (poly->nrings || poly->maxrings) )
 	{
 		LWDEBUG(4,"mismatched nrings/maxrings");
 		lwerror("Curvepolygon is in inconsistent state. Null memory but non-zero collection counts.");
+		return LW_FAILURE;
 	}
 
 	/* Check that we're adding an allowed ring type */
 	if ( ! ( ring->type == LINETYPE || ring->type == CIRCSTRINGTYPE || ring->type == COMPOUNDTYPE ) )
 	{
 		LWDEBUGF(4,"got incorrect ring type: %s",lwtype_name(ring->type));
 		return LW_FAILURE;
 	}
 
 
 	/* In case this is a truly empty, make some initial space  */
 	if ( poly->rings == NULL )
 	{
 		poly->maxrings = 2;
 		poly->nrings = 0;
 		poly->rings = lwalloc(poly->maxrings * sizeof(LWGEOM*));
 	}
 
 	/* Allocate more space if we need it */
 	if ( poly->nrings == poly->maxrings )
 	{
 		poly->maxrings *= 2;
 		poly->rings = lwrealloc(poly->rings, sizeof(LWGEOM*) * poly->maxrings);
 	}
 
 	/* Make sure we don't already have a reference to this geom */
 	for ( i = 0; i < poly->nrings; i++ )
 	{
 		if ( poly->rings[i] == ring )
 		{
 			LWDEBUGF(4, "Found duplicate geometry in collection %p == %p", poly->rings[i], ring);
 			return LW_SUCCESS;
 		}
 	}
 
 	/* Add the ring and increment the ring count */
 	poly->rings[poly->nrings] = (LWGEOM*)ring;
 	poly->nrings++;
 	return LW_SUCCESS;
 }
 
 /**
  * This should be rewritten to make use of the curve itself.
  */
diff --git a/liblwgeom/lwin_wkb.c b/liblwgeom/lwin_wkb.c
index 46850ba39..051d82405 100644
--- a/liblwgeom/lwin_wkb.c
+++ b/liblwgeom/lwin_wkb.c
@@ -603,33 +603,38 @@ static LWTRIANGLE* lwtriangle_from_wkb_state(wkb_parse_state *s)
 /**
 * CURVEPOLYTYPE
 */
 static LWCURVEPOLY* lwcurvepoly_from_wkb_state(wkb_parse_state *s)
 {
 	uint32_t ngeoms = integer_from_wkb_state(s);
 	LWCURVEPOLY *cp = lwcurvepoly_construct_empty(s->srid, s->has_z, s->has_m);
 	LWGEOM *geom = NULL;
 	uint32_t i;
 
 	/* Empty collection? */
 	if ( ngeoms == 0 )
 		return cp;
 
 	for ( i = 0; i < ngeoms; i++ )
 	{
 		geom = lwgeom_from_wkb_state(s);
 		if ( lwcurvepoly_add_ring(cp, geom) == LW_FAILURE )
+		{
+			lwgeom_free(geom);
+			lwgeom_free((LWGEOM *)cp);
 			lwerror("Unable to add geometry (%p) to curvepoly (%p)", geom, cp);
+			return NULL;
+		}
 	}
 
 	return cp;
 }
 
 /**
 * POLYHEDRALSURFACETYPE
 */
 
 /**
 * COLLECTION, MULTIPOINTTYPE, MULTILINETYPE, MULTIPOLYGONTYPE, COMPOUNDTYPE,
 * MULTICURVETYPE, MULTISURFACETYPE,
 * TINTYPE
 */
