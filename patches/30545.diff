commit 27a395d9643a8d38eb9642170ed3d7877a351029
Author: Tom <tomut@yahoo.com>
Date:   Sun Feb 7 14:55:56 2021 -0700

    Kernel: Fix KResultOr copy-move from itself case
    
    If move-assigning from itself we shouldn't do anything.

diff --git a/Kernel/KResult.h b/Kernel/KResult.h
index 8c7da0e079..b6988f1364 100644
--- a/Kernel/KResult.h
+++ b/Kernel/KResult.h
@@ -66,105 +66,107 @@ class alignas(T) [[nodiscard]] KResultOr {
 public:
     KResultOr(KResult error)
         : m_error(error)
         , m_is_error(true)
     {
     }
 
     KResultOr(ErrnoCode error)
         : m_error(error)
         , m_is_error(true)
     {
     }
 
     ALWAYS_INLINE KResultOr(T&& value)
     {
         new (&m_storage) T(move(value));
         m_have_storage = true;
     }
 
     template<typename U>
     ALWAYS_INLINE KResultOr(U&& value)
     {
         new (&m_storage) T(move(value));
         m_have_storage = true;
     }
 
     // FIXME: clang-format gets confused about KResultOr. Why?
     // clang-format off
     KResultOr(KResultOr&& other)
     // clang-format on
     {
         m_is_error = other.m_is_error;
         if (m_is_error)
             m_error = other.m_error;
         else {
             if (other.m_have_storage) {
                 new (&m_storage) T(move(other.value()));
                 m_have_storage = true;
                 other.value().~T();
                 other.m_have_storage = false;
             }
         }
         other.m_is_error = true;
         other.m_error = KSuccess;
     }
 
     KResultOr& operator=(KResultOr&& other)
     {
+        if (&other == this)
+            return *this;
         if (!m_is_error && m_have_storage) {
             value().~T();
             m_have_storage = false;
         }
         m_is_error = other.m_is_error;
         if (m_is_error)
             m_error = other.m_error;
         else {
             if (other.m_have_storage) {
                 new (&m_storage) T(move(other.value()));
                 m_have_storage = true;
                 other.value().~T();
                 other.m_have_storage = false;
             }
         }
         other.m_is_error = true;
         other.m_error = KSuccess;
         return *this;
     }
 
     ~KResultOr()
     {
         if (!m_is_error && m_have_storage)
             value().~T();
     }
 
     [[nodiscard]] bool is_error() const { return m_is_error; }
 
     ALWAYS_INLINE KResult error() const
     {
         ASSERT(m_is_error);
         return m_error;
     }
 
     KResult result() const { return m_is_error ? m_error : KSuccess; }
 
     ALWAYS_INLINE T& value()
     {
         ASSERT(!m_is_error);
         return *reinterpret_cast<T*>(&m_storage);
     }
 
     ALWAYS_INLINE const T& value() const
     {
         ASSERT(!m_is_error);
         return *reinterpret_cast<T*>(&m_storage);
     }
 
     ALWAYS_INLINE T release_value()
     {
         ASSERT(!m_is_error);
         ASSERT(m_have_storage);
         T released_value(move(*reinterpret_cast<T*>(&m_storage)));
         value().~T();
         m_have_storage = false;
         return released_value;
     }
