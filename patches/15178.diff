commit 3a48c915ea98a60fbac94522202279f56c740487
Author: Philippe Antoine <contact@catenacyber.fr>
Date:   Sat Jun 15 15:54:03 2019 +0200

    Fixes bould free in opt_cleanup

diff --git a/optimize.c b/optimize.c
index 4afd063f..931655cd 100644
--- a/optimize.c
+++ b/optimize.c
@@ -2051,14 +2051,20 @@ intern_blocks(opt_state_t *opt_state, struct icode *ic)
 static void
 opt_cleanup(opt_state_t *opt_state)
 {
-	free((void *)opt_state->vnode_base);
-	free((void *)opt_state->vmap);
-	free((void *)opt_state->edges);
-	free((void *)opt_state->space);
-	free((void *)opt_state->levels);
-	free((void *)opt_state->blocks);
+	if (opt_state->vnode_base)
+		free((void *)opt_state->vnode_base);
+	if (opt_state->vmap)
+		free((void *)opt_state->vmap);
+	if (opt_state->edges)
+		free((void *)opt_state->edges);
+	if (opt_state->space)
+		free((void *)opt_state->space);
+	if (opt_state->levels)
+		free((void *)opt_state->levels);
+	if (opt_state->blocks)
+		free((void *)opt_state->blocks);
 }
 
 /*
  * For optimizer errors.
  */
@@ -2164,107 +2170,122 @@ static void
 opt_init(opt_state_t *opt_state, struct icode *ic)
 {
 	bpf_u_int32 *p;
 	int i, n, max_stmts;
 
 	/*
 	 * First, count the blocks, so we can malloc an array to map
 	 * block number to block.  Then, put the blocks into the array.
 	 */
 	unMarkAll(ic);
 	n = count_blocks(ic, ic->root);
 	opt_state->blocks = (struct block **)calloc(n, sizeof(*opt_state->blocks));
 	if (opt_state->blocks == NULL)
 		opt_error(opt_state, "malloc");
 	unMarkAll(ic);
 	opt_state->n_blocks = 0;
 	number_blks_r(opt_state, ic, ic->root);
 
 	opt_state->n_edges = 2 * opt_state->n_blocks;
 	opt_state->edges = (struct edge **)calloc(opt_state->n_edges, sizeof(*opt_state->edges));
 	if (opt_state->edges == NULL) {
 		free(opt_state->blocks);
+		opt_state->blocks = NULL;
 		opt_error(opt_state, "malloc");
 	}
 
 	/*
 	 * The number of levels is bounded by the number of nodes.
 	 */
 	opt_state->levels = (struct block **)calloc(opt_state->n_blocks, sizeof(*opt_state->levels));
 	if (opt_state->levels == NULL) {
 		free(opt_state->edges);
 		free(opt_state->blocks);
+		opt_state->edges = NULL;
+		opt_state->blocks = NULL;
 		opt_error(opt_state, "malloc");
 	}
 
 	opt_state->edgewords = opt_state->n_edges / (8 * sizeof(bpf_u_int32)) + 1;
 	opt_state->nodewords = opt_state->n_blocks / (8 * sizeof(bpf_u_int32)) + 1;
 
 	/* XXX */
 	opt_state->space = (bpf_u_int32 *)malloc(2 * opt_state->n_blocks * opt_state->nodewords * sizeof(*opt_state->space)
 				 + opt_state->n_edges * opt_state->edgewords * sizeof(*opt_state->space));
 	if (opt_state->space == NULL) {
 		free(opt_state->levels);
 		free(opt_state->edges);
 		free(opt_state->blocks);
+		opt_state->levels = NULL;
+		opt_state->edges = NULL;
+		opt_state->blocks = NULL;
 		opt_error(opt_state, "malloc");
 	}
 	p = opt_state->space;
 	opt_state->all_dom_sets = p;
 	for (i = 0; i < n; ++i) {
 		opt_state->blocks[i]->dom = p;
 		p += opt_state->nodewords;
 	}
 	opt_state->all_closure_sets = p;
 	for (i = 0; i < n; ++i) {
 		opt_state->blocks[i]->closure = p;
 		p += opt_state->nodewords;
 	}
 	opt_state->all_edge_sets = p;
 	for (i = 0; i < n; ++i) {
 		register struct block *b = opt_state->blocks[i];
 
 		b->et.edom = p;
 		p += opt_state->edgewords;
 		b->ef.edom = p;
 		p += opt_state->edgewords;
 		b->et.id = i;
 		opt_state->edges[i] = &b->et;
 		b->ef.id = opt_state->n_blocks + i;
 		opt_state->edges[opt_state->n_blocks + i] = &b->ef;
 		b->et.pred = b;
 		b->ef.pred = b;
 	}
 	max_stmts = 0;
 	for (i = 0; i < n; ++i)
 		max_stmts += slength(opt_state->blocks[i]->stmts) + 1;
 	/*
 	 * We allocate at most 3 value numbers per statement,
 	 * so this is an upper bound on the number of valnodes
 	 * we'll need.
 	 */
 	opt_state->maxval = 3 * max_stmts;
 	opt_state->vmap = (struct vmapinfo *)calloc(opt_state->maxval, sizeof(*opt_state->vmap));
 	if (opt_state->vmap == NULL) {
 		free(opt_state->space);
 		free(opt_state->levels);
 		free(opt_state->edges);
 		free(opt_state->blocks);
+		opt_state->space = NULL;
+		opt_state->levels = NULL;
+		opt_state->edges = NULL;
+		opt_state->blocks = NULL;
 		opt_error(opt_state, "malloc");
 	}
 	opt_state->vnode_base = (struct valnode *)calloc(opt_state->maxval, sizeof(*opt_state->vnode_base));
 	if (opt_state->vnode_base == NULL) {
 		free(opt_state->vmap);
 		free(opt_state->space);
 		free(opt_state->levels);
 		free(opt_state->edges);
 		free(opt_state->blocks);
+		opt_state->vmap = NULL;
+		opt_state->space = NULL;
+		opt_state->levels = NULL;
+		opt_state->edges = NULL;
+		opt_state->blocks = NULL;
 		opt_error(opt_state, "malloc");
 	}
 }
 
 /*
  * This is only used when supporting optimizer debugging.  It is
  * global state, so do *not* do more than one compile in parallel
  * and expect it to provide meaningful information.
  */
 #ifdef BDEBUG
