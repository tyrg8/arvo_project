commit d3e09bf4654fe5478b6dbf2b26ebab6271317d81
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Tue Aug 24 10:31:49 2021 -0600

    [set] Make all operators null-safe again
    
    Changed my mind.
    
    Also for hb_map_clear().
    
    Part of https://github.com/harfbuzz/harfbuzz/pull/3162

diff --git a/src/hb-bit-set-invertible.hh b/src/hb-bit-set-invertible.hh
index ab48239bb..f48b72fe6 100644
--- a/src/hb-bit-set-invertible.hh
+++ b/src/hb-bit-set-invertible.hh
@@ -35,298 +35,320 @@
 struct hb_bit_set_invertible_t
 {
   hb_bit_set_t s;
   bool inverted;
 
   hb_bit_set_invertible_t () { init (); }
   ~hb_bit_set_invertible_t () { fini (); }
 
   void init () { s.init (); inverted = false; }
   void fini () { s.fini (); }
   void err () { s.err (); }
   bool in_error () const { return s.in_error (); }
   explicit operator bool () const { return !is_empty (); }
 
-  void reset () { s.reset (); inverted = false; }
-  void clear () { s.clear (); inverted = false; }
-  void invert () { inverted = !inverted; }
+  void reset ()
+  {
+    s.reset ();
+    inverted = false;
+  }
+  void clear ()
+  {
+    s.clear ();
+    if (likely (s.successful))
+      inverted = false;
+  }
+  void invert ()
+  {
+    if (likely (s.successful))
+      inverted = !inverted;
+  }
 
   bool is_empty () const
   {
     hb_codepoint_t v = INVALID;
     next (&v);
     return v == INVALID;
   }
   hb_codepoint_t get_min () const
   {
     hb_codepoint_t v = INVALID;
     next (&v);
     return v;
   }
   hb_codepoint_t get_max () const
   {
     hb_codepoint_t v = INVALID;
     previous (&v);
     return v;
   }
   unsigned int get_population () const
   { return inverted ? INVALID - s.get_population () : s.get_population (); }
 
 
   void add (hb_codepoint_t g) { unlikely (inverted) ? s.del (g) : s.add (g); }
   bool add_range (hb_codepoint_t a, hb_codepoint_t b)
   { return unlikely (inverted) ? (s.del_range (a, b), true) : s.add_range (a, b); }
 
   template <typename T>
   void add_array (const T *array, unsigned int count, unsigned int stride=sizeof(T))
   { inverted ? s.del_array (array, count, stride) : s.add_array (array, count, stride); }
   template <typename T>
   void add_array (const hb_array_t<const T>& arr) { add_array (&arr, arr.len ()); }
 
   /* Might return false if array looks unsorted.
    * Used for faster rejection of corrupt data. */
   template <typename T>
   bool add_sorted_array (const T *array, unsigned int count, unsigned int stride=sizeof(T))
   { return inverted ? s.del_sorted_array (array, count, stride) : s.add_sorted_array (array, count, stride); }
   template <typename T>
   bool add_sorted_array (const hb_sorted_array_t<const T>& arr) { return add_sorted_array (&arr, arr.len ()); }
 
   void del (hb_codepoint_t g) { unlikely (inverted) ? s.add (g) : s.del (g); }
   void del_range (hb_codepoint_t a, hb_codepoint_t b)
   { unlikely (inverted) ? (void) s.add_range (a, b) : s.del_range (a, b); }
 
   bool get (hb_codepoint_t g) const { return s.get (g) ^ inverted; }
 
   /* Has interface. */
   static constexpr bool SENTINEL = false;
   typedef bool value_t;
   value_t operator [] (hb_codepoint_t k) const { return get (k); }
   bool has (hb_codepoint_t k) const { return (*this)[k] != SENTINEL; }
   /* Predicate. */
   bool operator () (hb_codepoint_t k) const { return has (k); }
 
   /* Sink interface. */
   hb_bit_set_invertible_t& operator << (hb_codepoint_t v)
   { add (v); return *this; }
   hb_bit_set_invertible_t& operator << (const hb_pair_t<hb_codepoint_t, hb_codepoint_t>& range)
   { add_range (range.first, range.second); return *this; }
 
   bool intersects (hb_codepoint_t first, hb_codepoint_t last) const
   {
     hb_codepoint_t c = first - 1;
     return next (&c) && c <= last;
   }
 
-  void set (const hb_bit_set_invertible_t &other) { s.set (other.s); inverted = other.inverted; }
+  void set (const hb_bit_set_invertible_t &other)
+  {
+    s.set (other.s);
+    if (likely (s.successful))
+      inverted = other.inverted;
+  }
 
   bool is_equal (const hb_bit_set_invertible_t &other) const
   {
     if (likely (inverted == other.inverted))
       return s.is_equal (other.s);
     else
     {
       /* TODO Add iter_ranges() and use here. */
       auto it1 = iter ();
       auto it2 = other.iter ();
       return hb_all (+ hb_zip (it1, it2)
 		     | hb_map ([](hb_pair_t<hb_codepoint_t, hb_codepoint_t> _) { return _.first == _.second; }));
     }
   }
 
   bool is_subset (const hb_bit_set_invertible_t &larger_set) const
   {
     if (unlikely (inverted != larger_set.inverted))
       return hb_all (hb_iter (s) | hb_map (larger_set.s));
     else
       return unlikely (inverted) ? larger_set.s.is_subset (s) : s.is_subset (larger_set.s);
   }
 
   protected:
   template <typename Op>
   void process (const Op& op, const hb_bit_set_invertible_t &other)
   { s.process (op, other.s); }
   public:
   void union_ (const hb_bit_set_invertible_t &other)
   {
     if (likely (inverted == other.inverted))
     {
       if (unlikely (inverted))
 	process (hb_bitwise_and, other);
       else
 	process (hb_bitwise_or, other); /* Main branch. */
     }
     else
     {
       if (unlikely (inverted))
 	process (hb_bitwise_gt, other);
       else
 	process (hb_bitwise_lt, other);
     }
-    inverted = inverted || other.inverted;
+    if (likely (s.successful))
+      inverted = inverted || other.inverted;
   }
   void intersect (const hb_bit_set_invertible_t &other)
   {
     if (likely (inverted == other.inverted))
     {
       if (unlikely (inverted))
 	process (hb_bitwise_or, other);
       else
 	process (hb_bitwise_and, other); /* Main branch. */
     }
     else
     {
       if (unlikely (inverted))
 	process (hb_bitwise_lt, other);
       else
 	process (hb_bitwise_gt, other);
     }
-    inverted = inverted && other.inverted;
+    if (likely (s.successful))
+      inverted = inverted && other.inverted;
   }
   void subtract (const hb_bit_set_invertible_t &other)
   {
     if (likely (inverted == other.inverted))
     {
       if (unlikely (inverted))
 	process (hb_bitwise_lt, other);
       else
 	process (hb_bitwise_gt, other); /* Main branch. */
     }
     else
     {
       if (unlikely (inverted))
 	process (hb_bitwise_or, other);
       else
 	process (hb_bitwise_and, other);
     }
-    inverted = inverted && !other.inverted;
+    if (likely (s.successful))
+      inverted = inverted && !other.inverted;
   }
   void symmetric_difference (const hb_bit_set_invertible_t &other)
   {
     process (hb_bitwise_xor, other);
-    inverted = inverted ^ other.inverted;
+    if (likely (s.successful))
+      inverted = inverted ^ other.inverted;
   }
 
   bool next (hb_codepoint_t *codepoint) const
   {
     if (likely (!inverted))
       return s.next (codepoint);
 
     auto old = *codepoint;
     if (unlikely (old + 1 == INVALID))
     {
       *codepoint = INVALID;
       return false;
     }
 
     auto v = old;
     s.next (&v);
     if (old + 1 < v)
     {
       *codepoint = old + 1;
       return true;
     }
 
     v = old;
     s.next_range (&old, &v);
 
     *codepoint = v + 1;
     return *codepoint != INVALID;
   }
   bool previous (hb_codepoint_t *codepoint) const
   {
     if (likely (!inverted))
       return s.previous (codepoint);
 
     auto old = *codepoint;
     if (unlikely (old - 1 == INVALID))
     {
       *codepoint = INVALID;
       return false;
     }
 
     auto v = old;
     s.previous (&v);
 
     if (old - 1 > v || v == INVALID)
     {
       *codepoint = old - 1;
       return true;
     }
 
     v = old;
     s.previous_range (&v, &old);
 
     *codepoint = v - 1;
     return *codepoint != INVALID;
   }
   bool next_range (hb_codepoint_t *first, hb_codepoint_t *last) const
   {
     if (likely (!inverted))
       return s.next_range (first, last);
 
     if (!next (last))
     {
       *last = *first = INVALID;
       return false;
     }
 
     *first = *last;
     s.next (last);
     --*last;
     return true;
   }
   bool previous_range (hb_codepoint_t *first, hb_codepoint_t *last) const
   {
     if (likely (!inverted))
       return s.previous_range (first, last);
 
     if (!previous (first))
     {
       *last = *first = INVALID;
       return false;
     }
 
     *last = *first;
     s.previous (first);
     ++*first;
     return true;
   }
 
   static constexpr hb_codepoint_t INVALID = hb_bit_set_t::INVALID;
 
   /*
    * Iterator implementation.
    */
   struct iter_t : hb_iter_with_fallback_t<iter_t, hb_codepoint_t>
   {
     static constexpr bool is_sorted_iterator = true;
     iter_t (const hb_bit_set_invertible_t &s_ = Null (hb_bit_set_invertible_t),
 	    bool init = true) : s (&s_), v (INVALID), l(0)
     {
       if (init)
       {
 	l = s->get_population () + 1;
 	__next__ ();
       }
     }
 
     typedef hb_codepoint_t __item_t__;
     hb_codepoint_t __item__ () const { return v; }
     bool __more__ () const { return v != INVALID; }
     void __next__ () { s->next (&v); if (l) l--; }
     void __prev__ () { s->previous (&v); }
     unsigned __len__ () const { return l; }
     iter_t end () const { return iter_t (*s, false); }
     bool operator != (const iter_t& o) const
     { return s != o.s || v != o.v; }
 
     protected:
     const hb_bit_set_invertible_t *s;
     hb_codepoint_t v;
     unsigned l;
   };
   iter_t iter () const { return iter_t (*this); }
   operator iter_t () const { return iter (); }
 };
 
 
 #endif /* HB_BIT_SET_INVERTIBLE_HH */
diff --git a/src/hb-map.cc b/src/hb-map.cc
index 388e67886..9f1ac4284 100644
--- a/src/hb-map.cc
+++ b/src/hb-map.cc
@@ -255,19 +255,16 @@ hb_map_has (const hb_map_t *map,
 void
 hb_map_clear (hb_map_t *map)
 {
-  if (unlikely (hb_object_is_immutable (map)))
-    return;
-
   return map->clear ();
 }
 
 /**
  * hb_map_is_empty:
  * @map: A map
  *
  * Tests whether @map is empty (contains no elements).
  *
  * Return value: %true if @map is empty
  *
  * Since: 1.7.7
  **/
diff --git a/src/hb-map.hh b/src/hb-map.hh
index 751cab684..dcd5267d7 100644
--- a/src/hb-map.hh
+++ b/src/hb-map.hh
@@ -38,280 +38,282 @@ template <typename K, typename V,
 	  K kINVALID = hb_is_pointer (K) ? 0 : hb_is_signed (K) ? hb_int_min (K) : (K) -1,
 	  V vINVALID = hb_is_pointer (V) ? 0 : hb_is_signed (V) ? hb_int_min (V) : (V) -1>
 struct hb_hashmap_t
 {
   HB_DELETE_COPY_ASSIGN (hb_hashmap_t);
   hb_hashmap_t ()  { init (); }
   ~hb_hashmap_t () { fini (); }
 
   static_assert (hb_is_integral (K) || hb_is_pointer (K), "");
   static_assert (hb_is_integral (V) || hb_is_pointer (V), "");
 
   struct item_t
   {
     K key;
     V value;
     uint32_t hash;
 
     void clear () { key = kINVALID; value = vINVALID; hash = 0; }
 
     bool operator == (const K &o) { return hb_deref (key) == hb_deref (o); }
     bool operator == (const item_t &o) { return *this == o.key; }
     bool is_unused () const    { return key == kINVALID; }
     bool is_tombstone () const { return key != kINVALID && value == vINVALID; }
     bool is_real () const { return key != kINVALID && value != vINVALID; }
     hb_pair_t<K, V> get_pair() const { return hb_pair_t<K, V> (key, value); }
   };
 
   hb_object_header_t header;
   bool successful; /* Allocations successful */
   unsigned int population; /* Not including tombstones. */
   unsigned int occupancy; /* Including tombstones. */
   unsigned int mask;
   unsigned int prime;
   item_t *items;
 
   void init_shallow ()
   {
     successful = true;
     population = occupancy = 0;
     mask = 0;
     prime = 0;
     items = nullptr;
   }
   void init ()
   {
     hb_object_init (this);
     init_shallow ();
   }
   void fini_shallow ()
   {
     hb_free (items);
     items = nullptr;
     population = occupancy = 0;
   }
   void fini ()
   {
     hb_object_fini (this);
     fini_shallow ();
   }
 
   void reset ()
   {
     successful = true;
     clear ();
   }
 
   bool in_error () const { return !successful; }
 
   bool resize ()
   {
     if (unlikely (!successful)) return false;
 
     unsigned int power = hb_bit_storage (population * 2 + 8);
     unsigned int new_size = 1u << power;
     item_t *new_items = (item_t *) hb_malloc ((size_t) new_size * sizeof (item_t));
     if (unlikely (!new_items))
     {
       successful = false;
       return false;
     }
     for (auto &_ : hb_iter (new_items, new_size))
       _.clear ();
 
     unsigned int old_size = mask + 1;
     item_t *old_items = items;
 
     /* Switch to new, empty, array. */
     population = occupancy = 0;
     mask = new_size - 1;
     prime = prime_for (power);
     items = new_items;
 
     /* Insert back old items. */
     if (old_items)
       for (unsigned int i = 0; i < old_size; i++)
 	if (old_items[i].is_real ())
 	  set_with_hash (old_items[i].key,
 			 old_items[i].hash,
 			 old_items[i].value);
 
     hb_free (old_items);
 
     return true;
   }
 
   bool set (K key, V value)
   {
     return set_with_hash (key, hb_hash (key), value);
   }
 
   V get (K key) const
   {
     if (unlikely (!items)) return vINVALID;
     unsigned int i = bucket_for (key);
     return items[i].is_real () && items[i] == key ? items[i].value : vINVALID;
   }
 
   void del (K key) { set (key, vINVALID); }
 
   /* Has interface. */
   static constexpr V SENTINEL = vINVALID;
   typedef V value_t;
   value_t operator [] (K k) const { return get (k); }
   bool has (K k, V *vp = nullptr) const
   {
     V v = (*this)[k];
     if (vp) *vp = v;
     return v != SENTINEL;
   }
   /* Projection. */
   V operator () (K k) const { return get (k); }
 
   void clear ()
   {
+    if (unlikely (!successful)) return;
+
     if (items)
       for (auto &_ : hb_iter (items, mask + 1))
 	_.clear ();
 
     population = occupancy = 0;
   }
 
   bool is_empty () const { return population == 0; }
   explicit operator bool () const { return !is_empty (); }
 
   unsigned int get_population () const { return population; }
 
   /*
    * Iterator
    */
   auto iter () const HB_AUTO_RETURN
   (
     + hb_array (items, mask ? mask + 1 : 0)
     | hb_filter (&item_t::is_real)
     | hb_map (&item_t::get_pair)
   )
   auto keys () const HB_AUTO_RETURN
   (
     + hb_array (items, mask ? mask + 1 : 0)
     | hb_filter (&item_t::is_real)
     | hb_map (&item_t::key)
     | hb_map (hb_ridentity)
   )
   auto values () const HB_AUTO_RETURN
   (
     + hb_array (items, mask ? mask + 1 : 0)
     | hb_filter (&item_t::is_real)
     | hb_map (&item_t::value)
     | hb_map (hb_ridentity)
   )
 
   /* Sink interface. */
   hb_hashmap_t& operator << (const hb_pair_t<K, V>& v)
   { set (v.first, v.second); return *this; }
 
   protected:
 
   bool set_with_hash (K key, uint32_t hash, V value)
   {
     if (unlikely (!successful)) return false;
     if (unlikely (key == kINVALID)) return true;
     if (unlikely ((occupancy + occupancy / 2) >= mask && !resize ())) return false;
     unsigned int i = bucket_for_hash (key, hash);
 
     if (value == vINVALID && items[i].key != key)
       return true; /* Trying to delete non-existent key. */
 
     if (!items[i].is_unused ())
     {
       occupancy--;
       if (!items[i].is_tombstone ())
 	population--;
     }
 
     items[i].key = key;
     items[i].value = value;
     items[i].hash = hash;
 
     occupancy++;
     if (!items[i].is_tombstone ())
       population++;
 
     return true;
   }
 
   unsigned int bucket_for (K key) const
   {
     return bucket_for_hash (key, hb_hash (key));
   }
 
   unsigned int bucket_for_hash (K key, uint32_t hash) const
   {
     unsigned int i = hash % prime;
     unsigned int step = 0;
     unsigned int tombstone = (unsigned) -1;
     while (!items[i].is_unused ())
     {
       if (items[i].hash == hash && items[i] == key)
 	return i;
       if (tombstone == (unsigned) -1 && items[i].is_tombstone ())
 	tombstone = i;
       i = (i + ++step) & mask;
     }
     return tombstone == (unsigned) -1 ? i : tombstone;
   }
 
   static unsigned int prime_for (unsigned int shift)
   {
     /* Following comment and table copied from glib. */
     /* Each table size has an associated prime modulo (the first prime
      * lower than the table size) used to find the initial bucket. Probing
      * then works modulo 2^n. The prime modulo is necessary to get a
      * good distribution with poor hash functions.
      */
     /* Not declaring static to make all kinds of compilers happy... */
     /*static*/ const unsigned int prime_mod [32] =
     {
       1,          /* For 1 << 0 */
       2,
       3,
       7,
       13,
       31,
       61,
       127,
       251,
       509,
       1021,
       2039,
       4093,
       8191,
       16381,
       32749,
       65521,      /* For 1 << 16 */
       131071,
       262139,
       524287,
       1048573,
       2097143,
       4194301,
       8388593,
       16777213,
       33554393,
       67108859,
       134217689,
       268435399,
       536870909,
       1073741789,
       2147483647  /* For 1 << 31 */
     };
 
     if (unlikely (shift >= ARRAY_LENGTH (prime_mod)))
       return prime_mod[ARRAY_LENGTH (prime_mod) - 1];
 
     return prime_mod[shift];
   }
 };
 
 /*
  * hb_map_t
  */
diff --git a/src/hb-set.cc b/src/hb-set.cc
index f9bc85869..204dbb564 100644
--- a/src/hb-set.cc
+++ b/src/hb-set.cc
@@ -201,19 +201,17 @@ hb_set_copy (const hb_set_t *set)
 void
 hb_set_clear (hb_set_t *set)
 {
-  if (unlikely (hb_object_is_immutable (set)))
-    return;
-
+  /* Immutible-safe. */
   set->clear ();
 }
 
 /**
  * hb_set_is_empty:
  * @set: a set.
  *
  * Tests whether a set is empty (contains no elements).
  *
  * Return value: %true if @set is empty
  *
  * Since: 0.9.7
  **/
@@ -368,18 +366,16 @@ void
 hb_set_set (hb_set_t       *set,
 	    const hb_set_t *other)
 {
-  if (unlikely (hb_object_is_immutable (set)))
-    return;
-
+  /* Immutible-safe. */
   set->set (*other);
 }
 
 /**
  * hb_set_union:
  * @set: A set
  * @other: Another set
  *
  * Makes @set the union of @set and @other.
  *
  * Since: 0.9.2
  **/
@@ -387,18 +383,16 @@ void
 hb_set_union (hb_set_t       *set,
 	      const hb_set_t *other)
 {
-  if (unlikely (hb_object_is_immutable (set)))
-    return;
-
+  /* Immutible-safe. */
   set->union_ (*other);
 }
 
 /**
  * hb_set_intersect:
  * @set: A set
  * @other: Another set
  *
  * Makes @set the intersection of @set and @other.
  *
  * Since: 0.9.2
  **/
@@ -406,18 +400,16 @@ void
 hb_set_intersect (hb_set_t       *set,
 		  const hb_set_t *other)
 {
-  if (unlikely (hb_object_is_immutable (set)))
-    return;
-
+  /* Immutible-safe. */
   set->intersect (*other);
 }
 
 /**
  * hb_set_subtract:
  * @set: A set
  * @other: Another set
  *
  * Subtracts the contents of @other from @set.
  *
  * Since: 0.9.2
  **/
@@ -425,19 +417,17 @@ void
 hb_set_subtract (hb_set_t       *set,
 		 const hb_set_t *other)
 {
-  if (unlikely (hb_object_is_immutable (set)))
-    return;
-
+  /* Immutible-safe. */
   set->subtract (*other);
 }
 
 /**
  * hb_set_symmetric_difference:
  * @set: A set
  * @other: Another set
  *
  * Makes @set the symmetric difference of @set
  * and @other.
  *
  * Since: 0.9.2
  **/
@@ -445,36 +435,32 @@ void
 hb_set_symmetric_difference (hb_set_t       *set,
 			     const hb_set_t *other)
 {
-  if (unlikely (hb_object_is_immutable (set)))
-    return;
-
+  /* Immutible-safe. */
   set->symmetric_difference (*other);
 }
 
 /**
  * hb_set_invert:
  * @set: A set
  *
  * Inverts the contents of @set.
  *
  * Since: 3.0.0
  **/
 void
 hb_set_invert (hb_set_t *set)
 {
-  if (unlikely (hb_object_is_immutable (set)))
-    return;
-
+  /* Immutible-safe. */
   set->invert ();
 }
 
 /**
  * hb_set_get_population:
  * @set: A set
  *
  * Returns the number of elements in the set.
  *
  * Return value: The population of @set
  *
  * Since: 0.9.7
  **/
