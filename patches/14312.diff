commit 6fea48c4eea0b8061a4ca5c3051073fc7dc644c7
Author: Albert Astals Cid <aacid@kde.org>
Date:   Wed Apr 17 20:09:17 2019 +0200

    xcf: Fix uninitialized memory use on broken documents
    
    oss-fuzz #14312

diff --git a/src/imageformats/xcf.cpp b/src/imageformats/xcf.cpp
index d727867..d84ec48 100644
--- a/src/imageformats/xcf.cpp
+++ b/src/imageformats/xcf.cpp
@@ -1059,72 +1059,75 @@ bool XCFImageFormat::loadHierarchy(QDataStream &xcf_io, Layer &layer)
 /*!
  * Load one level of the image hierarchy (but only the top level is ever used).
  * \param xcf_io the data stream connected to the XCF image.
  * \param layer the layer to collect the image.
  * \param bpp the number of bytes in a pixel.
  * \return true if there were no I/O errors.
  * \sa loadTileRLE().
  */
 bool XCFImageFormat::loadLevel(QDataStream &xcf_io, Layer &layer, qint32 bpp)
 {
     qint32 width;
     qint32 height;
     quint32 offset;
 
     xcf_io >> width >> height >> offset;
 
     if (offset == 0) {
         // offset 0 with rowsxcols != 0 is probably an error since it means we have tiles
         // without data but just clear the bits for now instead of returning false
         for (uint j = 0; j < layer.nrows; j++) {
             for (uint i = 0; i < layer.ncols; i++) {
                 layer.image_tiles[j][i].fill(Qt::transparent);
+                if (layer.type == GRAYA_GIMAGE || layer.type == INDEXEDA_GIMAGE) {
+                    layer.alpha_tiles[j][i].fill(Qt::transparent);
+                }
             }
         }
         return true;
     }
 
     for (uint j = 0; j < layer.nrows; j++) {
         for (uint i = 0; i < layer.ncols; i++) {
 
             if (offset == 0) {
 //              qDebug() << "XCF: incorrect number of tiles in layer " << layer.name;
                 return false;
             }
 
             qint64 saved_pos = xcf_io.device()->pos();
             quint32 offset2;
             xcf_io >> offset2;
 
             // Evidently, RLE can occasionally expand a tile instead of compressing it!
 
             if (offset2 == 0) {
                 offset2 = offset + (uint)(TILE_WIDTH * TILE_HEIGHT * 4 * 1.5);
             }
 
             xcf_io.device()->seek(offset);
             int size = layer.image_tiles[j][i].width() * layer.image_tiles[j][i].height();
 
             if (!loadTileRLE(xcf_io, layer.tile, size, offset2 - offset, bpp)) {
                 return false;
             }
 
             // The bytes in the layer tile are juggled differently depending on
             // the target QImage. The caller has set layer.assignBytes to the
             // appropriate routine.
 
             layer.assignBytes(layer, i, j);
 
             xcf_io.device()->seek(saved_pos);
             xcf_io >> offset;
         }
     }
 
     return true;
 }
 
 /*!
  * A layer can have a one channel image which is used as a mask.
  * \param xcf_io the data stream connected to the XCF image.
  * \param layer the layer to collect the mask image.
  * \return true if there were no I/O errors.
  */
