commit 4470ea897eda9272e9b5dd3edb00c2855b0b88e7
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Fri Mar 15 11:33:06 2019 +0100

    VRT: fix error introduced in recent 977f2da59e46852f49534361860bb92f9c6ad1fd. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=13734. Credit to OSS Fuzz

diff --git a/autotest/gcore/vrt_read.py b/autotest/gcore/vrt_read.py
index d8ca1b63be..67f6361bf4 100755
--- a/autotest/gcore/vrt_read.py
+++ b/autotest/gcore/vrt_read.py
@@ -1287,3 +1287,24 @@ def test_vrt_shared_no_proxy_pool():
 
     after = gdaltest.get_opened_files()
     assert len(before) == len(after)
+
+
+def test_vrt_shared_no_proxy_pool_error():
+
+    vrt_text = """<VRTDataset rasterXSize="50" rasterYSize="50">
+  <VRTRasterBand dataType="Byte" band="1">
+    <SimpleSource>
+      <SourceFilename>data/byte.tif</SourceFilename>
+      <SourceBand>10</SourceBand>
+    </SimpleSource>
+  </VRTRasterBand>
+  <VRTRasterBand dataType="Byte" band="2">
+    <SimpleSource>
+      <SourceFilename>data/byte.tif</SourceFilename>
+      <SourceBand>11</SourceBand>
+    </SimpleSource>
+  </VRTRasterBand>
+</VRTDataset>"""
+    with gdaltest.error_handler():
+        ds = gdal.Open(vrt_text)
+    assert not ds
diff --git a/gdal/frmts/vrt/vrtsources.cpp b/gdal/frmts/vrt/vrtsources.cpp
index 313aed885d..7f03f51370 100644
--- a/gdal/frmts/vrt/vrtsources.cpp
+++ b/gdal/frmts/vrt/vrtsources.cpp
@@ -481,354 +481,360 @@ CPLXMLNode *VRTSimpleSource::SerializeToXML( const char *pszVRTPath )
 CPLErr VRTSimpleSource::XMLInit( CPLXMLNode *psSrc, const char *pszVRTPath,
                                  void* pUniqueHandle,
                                  std::map<CPLString, GDALDataset*>& oMapSharedSources )
 
 {
     m_osResampling = CPLGetXMLValue( psSrc, "resampling", "");
 
 /* -------------------------------------------------------------------- */
 /*      Prepare filename.                                               */
 /* -------------------------------------------------------------------- */
     CPLXMLNode* psSourceFileNameNode = CPLGetXMLNode(psSrc,"SourceFilename");
     const char *pszFilename =
         psSourceFileNameNode ?
         CPLGetXMLValue(psSourceFileNameNode, nullptr, nullptr) : nullptr;
 
     if( pszFilename == nullptr )
     {
         CPLError( CE_Warning, CPLE_AppDefined,
                   "Missing <SourceFilename> element in VRTRasterBand." );
         return CE_Failure;
     }
 
     // Backup original filename and relativeToVRT so as to be able to
     // serialize them identically again (#5985)
     m_osSourceFileNameOri = pszFilename;
     m_bRelativeToVRTOri =
         atoi( CPLGetXMLValue( psSourceFileNameNode, "relativetoVRT", "0") );
     const char* pszShared = CPLGetXMLValue( psSourceFileNameNode,
                                             "shared", nullptr );
     if( pszShared == nullptr )
     {
         pszShared = CPLGetConfigOption("VRT_SHARED_SOURCE", nullptr );
     }
     bool bShared = false;
     if( pszShared != nullptr )
     {
         bShared = CPLTestBool(pszShared);
         m_nExplicitSharedStatus = bShared;
     }
     else
     {
         bShared = true;
     }
 
     char *pszSrcDSName = nullptr;
     if( pszVRTPath != nullptr && m_bRelativeToVRTOri )
     {
         bool bDone = false;
         for( size_t i = 0;
              i < sizeof(apszSpecialSyntax) / sizeof(apszSpecialSyntax[0]);
              ++i )
         {
             const char* pszSyntax = apszSpecialSyntax[i];
             CPLString osPrefix(pszSyntax);
             osPrefix.resize(strchr(pszSyntax, ':') - pszSyntax + 1);
             if( pszSyntax[osPrefix.size()] == '"' )
                 osPrefix += '"';
             if( EQUALN(pszFilename, osPrefix, osPrefix.size()) )
             {
                 if( STARTS_WITH_CI(pszSyntax + osPrefix.size(), "{ANY}") )
                 {
                     const char * pszLastPart = strrchr(pszFilename, ':') + 1;
                     // CSV:z:/foo.xyz
                     if( ( pszLastPart[0] == '/' ||
                           pszLastPart[0] == '\\') &&
                         pszLastPart - pszFilename >= 3 &&
                         pszLastPart[-3] == ':' )
                     {
                         pszLastPart -= 2;
                     }
                     CPLString osPrefixFilename = pszFilename;
                     osPrefixFilename.resize(pszLastPart - pszFilename);
                     pszSrcDSName = CPLStrdup( (osPrefixFilename +
                         CPLProjectRelativeFilename( pszVRTPath, pszLastPart )).c_str() );
                     bDone = true;
                 }
                 else if( STARTS_WITH_CI(pszSyntax + osPrefix.size(), "{FILENAME}") )
                 {
                     CPLString osFilename(pszFilename + osPrefix.size());
                     size_t nPos = 0;
                     if( osFilename.size() >= 3 && osFilename[1] == ':' &&
                         (osFilename[2] == '\\' || osFilename[2] == '/') )
                         nPos = 2;
                     nPos = osFilename.find(
                         pszSyntax[osPrefix.size() + strlen("{FILENAME}")],
                         nPos);
                     if( nPos != std::string::npos )
                     {
                         const CPLString osSuffix = osFilename.substr(nPos);
                         osFilename.resize(nPos);
                         pszSrcDSName = CPLStrdup(
                             (osPrefix + CPLProjectRelativeFilename(
                                 pszVRTPath, osFilename ) + osSuffix).c_str() );
                         bDone = true;
                     }
                 }
                 break;
             }
         }
         if( !bDone )
         {
             pszSrcDSName = CPLStrdup(
                 CPLProjectRelativeFilename( pszVRTPath, pszFilename ) );
         }
     }
     else
     {
         pszSrcDSName = CPLStrdup( pszFilename );
     }
 
     const char* pszSourceBand = CPLGetXMLValue(psSrc,"SourceBand","1");
     int nSrcBand = 0;
     bool bGetMaskBand = false;
     if( STARTS_WITH_CI(pszSourceBand, "mask") )
     {
         bGetMaskBand = true;
         if( pszSourceBand[4] == ',' )
             nSrcBand = atoi(pszSourceBand + 5);
         else
             nSrcBand = 1;
     }
     else
     {
         nSrcBand = atoi(pszSourceBand);
     }
     if( !GDALCheckBandCount(nSrcBand, 0) )
     {
         CPLError( CE_Warning, CPLE_AppDefined,
                   "Invalid <SourceBand> element in VRTRasterBand." );
         CPLFree( pszSrcDSName );
         return CE_Failure;
     }
 
     // Newly generated VRT will have RasterXSize, RasterYSize, DataType,
     // BlockXSize, BlockYSize tags, so that we don't have actually to
     // open the real dataset immediately, but we can use a proxy dataset
     // instead. This is particularly useful when dealing with huge VRT
     // For example, a VRT with the world coverage of DTED0 (25594 files).
     CPLXMLNode* psSrcProperties = CPLGetXMLNode(psSrc,"SourceProperties");
     int nRasterXSize = 0;
     int nRasterYSize = 0;
     // TODO(schwehr): What is the difference between 0 (GDT_Unknown) and -1?
     // Does there need to be a GDT_Uninitialized?
     GDALDataType eDataType = static_cast<GDALDataType>(-1);
     int nBlockXSize = 0;
     int nBlockYSize = 0;
     if( psSrcProperties )
     {
         nRasterXSize =
             atoi(CPLGetXMLValue(psSrcProperties, "RasterXSize", "0"));
         nRasterYSize =
             atoi(CPLGetXMLValue(psSrcProperties, "RasterYSize", "0"));
         const char *pszDataType =
             CPLGetXMLValue(psSrcProperties, "DataType", nullptr);
         if( pszDataType != nullptr )
         {
             for( int iType = 0; iType < GDT_TypeCount; iType++ )
             {
                 const char *pszThisName =
                     GDALGetDataTypeName(static_cast<GDALDataType>(iType));
 
                 if( pszThisName != nullptr && EQUAL(pszDataType, pszThisName) )
                 {
                     eDataType = static_cast<GDALDataType>(iType);
                     break;
                 }
             }
         }
         nBlockXSize = atoi(CPLGetXMLValue(psSrcProperties, "BlockXSize", "0"));
         nBlockYSize = atoi(CPLGetXMLValue(psSrcProperties, "BlockYSize", "0"));
         if( nRasterXSize < 0 || nRasterYSize < 0 ||
             nBlockXSize < 0 || nBlockYSize < 0 )
         {
             CPLError( CE_Warning, CPLE_AppDefined,
                       "Invalid <SourceProperties> element in VRTRasterBand." );
             CPLFree( pszSrcDSName );
             return CE_Failure;
         }
     }
 
     char** papszOpenOptions = GDALDeserializeOpenOptionsFromXML(psSrc);
     if( strstr(pszSrcDSName,"<VRTDataset") != nullptr )
         papszOpenOptions =
             CSLSetNameValue(papszOpenOptions, "ROOT_PATH", pszVRTPath);
 
+    bool bAddToMapIfOk = false;
     GDALDataset *poSrcDS = nullptr;
     if( nRasterXSize == 0 || nRasterYSize == 0 ||
         eDataType == static_cast<GDALDataType>(-1) ||
         nBlockXSize == 0 || nBlockYSize == 0 )
     {
         /* ----------------------------------------------------------------- */
         /*      Open the file (shared).                                      */
         /* ----------------------------------------------------------------- */
         const int nOpenFlags = GDAL_OF_RASTER | GDAL_OF_VERBOSE_ERROR;
         if( bShared )
         {
             // We no longer use GDAL_OF_SHARED as this can cause quite
             // annoying reference cycles in situations like you have
             // foo.tif and foo.tif.ovr, the later being actually a VRT file
             // that points to foo.tif
             auto oIter = oMapSharedSources.find(pszSrcDSName);
             if( oIter != oMapSharedSources.end() )
             {
                 poSrcDS = oIter->second;
                 poSrcDS->Reference();
             }
             else
             {
                 poSrcDS = static_cast<GDALDataset *>( GDALOpenEx(
                         pszSrcDSName, nOpenFlags, nullptr,
                         (const char* const* )papszOpenOptions, nullptr ) );
                 if( poSrcDS )
                 {
-                    oMapSharedSources[pszSrcDSName] = poSrcDS;
+                    bAddToMapIfOk = true;
                 }
             }
         }
         else
         {
             poSrcDS = static_cast<GDALDataset *>( GDALOpenEx(
                         pszSrcDSName, nOpenFlags, nullptr,
                         (const char* const* )papszOpenOptions, nullptr ) );
         }
     }
     else
     {
         /* ----------------------------------------------------------------- */
         /*      Create a proxy dataset                                       */
         /* ----------------------------------------------------------------- */
         CPLString osUniqueHandle( CPLSPrintf("%p", pUniqueHandle) );
         GDALProxyPoolDataset * const proxyDS =
             new GDALProxyPoolDataset( pszSrcDSName, nRasterXSize, nRasterYSize,
                                       GA_ReadOnly, bShared, nullptr, nullptr,
                                       osUniqueHandle.c_str() );
         proxyDS->SetOpenOptions(papszOpenOptions);
         poSrcDS = proxyDS;
 
         // Only the information of rasterBand nSrcBand will be accurate
         // but that's OK since we only use that band afterwards.
         //
         // Previously this added a src band for every band <= nSrcBand, but this becomes
         // prohibitely expensive for files with a large number of bands. This optimization
         // only adds the desired band and the rest of the bands will simply be initialized with a nullptr.
         // This assumes no other code here accesses any of the lower bands in the GDALProxyPoolDataset.
         // It has been suggested that in addition, we should to try share GDALProxyPoolDataset between multiple
         // Simple Sources, which would save on memory for papoBands. For now, that's not implemented.
         proxyDS->AddSrcBand(nSrcBand, eDataType, nBlockXSize, nBlockYSize);
 
         if( bGetMaskBand )
         {
           GDALProxyPoolRasterBand *poMaskBand =
               dynamic_cast<GDALProxyPoolRasterBand *>(
               proxyDS->GetRasterBand(nSrcBand) );
           if( poMaskBand == nullptr )
           {
               CPLError(
                   CE_Fatal, CPLE_AssertionFailed, "dynamic_cast failed." );
           }
           else
           {
               poMaskBand->AddSrcMaskBandDescription(
                   eDataType, nBlockXSize, nBlockYSize );
           }
         }
     }
 
     CSLDestroy(papszOpenOptions);
 
     CPLFree( pszSrcDSName );
 
     if( poSrcDS == nullptr )
         return CE_Failure;
 
 /* -------------------------------------------------------------------- */
 /*      Get the raster band.                                            */
 /* -------------------------------------------------------------------- */
 
     m_poRasterBand = poSrcDS->GetRasterBand(nSrcBand);
     if( m_poRasterBand == nullptr )
     {
         poSrcDS->ReleaseRef();
         return CE_Failure;
     }
+    else if( bAddToMapIfOk )
+    {
+        oMapSharedSources[pszSrcDSName] = poSrcDS;
+    }
+
     if( bGetMaskBand )
     {
         m_poMaskBandMainBand = m_poRasterBand;
         m_poRasterBand = m_poRasterBand->GetMaskBand();
         if( m_poRasterBand == nullptr )
             return CE_Failure;
     }
 
 /* -------------------------------------------------------------------- */
 /*      Set characteristics.                                            */
 /* -------------------------------------------------------------------- */
     CPLXMLNode * const psSrcRect = CPLGetXMLNode(psSrc,"SrcRect");
     if( psSrcRect )
     {
         double xOff = CPLAtof(CPLGetXMLValue(psSrcRect,"xOff","-1"));
         double yOff = CPLAtof(CPLGetXMLValue(psSrcRect,"yOff","-1"));
         double xSize = CPLAtof(CPLGetXMLValue(psSrcRect,"xSize","-1"));
         double ySize = CPLAtof(CPLGetXMLValue(psSrcRect,"ySize","-1"));
         if( !CPLIsFinite(xOff) || !CPLIsFinite(yOff) ||
             !CPLIsFinite(xSize) || !CPLIsFinite(ySize) ||
             xOff < INT_MIN || xOff > INT_MAX ||
             yOff < INT_MIN || yOff > INT_MAX ||
             !(xSize > 0 || xSize == -1) || xSize > INT_MAX ||
             !(ySize > 0 || ySize == -1) || ySize > INT_MAX )
         {
             CPLError(CE_Failure, CPLE_AppDefined, "Wrong values in SrcRect");
             return CE_Failure;
         }
         SetSrcWindow( xOff, yOff, xSize, ySize );
     }
     else
     {
         m_dfSrcXOff = -1;
         m_dfSrcYOff = -1;
         m_dfSrcXSize = -1;
         m_dfSrcYSize = -1;
     }
 
     CPLXMLNode * const psDstRect = CPLGetXMLNode(psSrc,"DstRect");
     if( psDstRect )
     {
         double xOff = CPLAtof(CPLGetXMLValue(psDstRect,"xOff","-1"));
         double yOff = CPLAtof(CPLGetXMLValue(psDstRect,"yOff","-1"));
         double xSize = CPLAtof(CPLGetXMLValue(psDstRect,"xSize","-1"));
         double ySize = CPLAtof(CPLGetXMLValue(psDstRect,"ySize","-1"));
         if( !CPLIsFinite(xOff) || !CPLIsFinite(yOff) ||
             !CPLIsFinite(xSize) || !CPLIsFinite(ySize) ||
             xOff < INT_MIN || xOff > INT_MAX ||
             yOff < INT_MIN || yOff > INT_MAX ||
             !(xSize > 0 || xSize == -1) || xSize > INT_MAX ||
             !(ySize > 0 || ySize == -1) || ySize > INT_MAX )
         {
             CPLError(CE_Failure, CPLE_AppDefined, "Wrong values in DstRect");
             return CE_Failure;
         }
         SetDstWindow( xOff, yOff, xSize, ySize );
     }
     else
     {
       m_dfDstXOff = -1;
       m_dfDstYOff = -1;
       m_dfDstXSize = -1;
       m_dfDstYSize = -1;
     }
 
     return CE_None;
 }
 
 /************************************************************************/
 /*                             GetFileList()                            */
 /************************************************************************/
