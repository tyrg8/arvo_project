commit 263ca69da80eab0a2b8e3308a562675a8c643988
Author: Philip Withnall <pwithnall@endlessos.org>
Date:   Fri Mar 18 15:49:33 2022 +0000

    gthreadedresolver: Check header length when parsing response
    
    Otherwise we could read off the end of an invalid response.
    
    oss-fuzz#42538
    Signed-off-by: Philip Withnall <pwithnall@endlessos.org>

diff --git a/gio/gthreadedresolver.c b/gio/gthreadedresolver.c
index 48545d6ad..3caa9f36e 100644
--- a/gio/gthreadedresolver.c
+++ b/gio/gthreadedresolver.c
@@ -656,108 +656,121 @@ GList *
 g_resolver_records_from_res_query (const gchar      *rrname,
                                    gint              rrtype,
                                    const guint8     *answer,
                                    gssize            len,
                                    gint              herr,
                                    GError          **error)
 {
   gint count;
   gchar namebuf[1024];
   const guint8 *end, *p;
   guint16 type, qclass, rdlength;
   const HEADER *header;
   GList *records;
   GVariant *record;
+  gsize len_unsigned;
 
   if (len <= 0)
     {
       if (len == 0 || herr == HOST_NOT_FOUND || herr == NO_DATA)
         {
           g_set_error (error, G_RESOLVER_ERROR, G_RESOLVER_ERROR_NOT_FOUND,
                        _("No DNS record of the requested type for “%s”"), rrname);
         }
       else if (herr == TRY_AGAIN)
         {
           g_set_error (error, G_RESOLVER_ERROR, G_RESOLVER_ERROR_TEMPORARY_FAILURE,
                        _("Temporarily unable to resolve “%s”"), rrname);
         }
       else
         {
           g_set_error (error, G_RESOLVER_ERROR, G_RESOLVER_ERROR_INTERNAL,
                        _("Error resolving “%s”"), rrname);
         }
 
       return NULL;
     }
 
+  /* We know len ≥ 0 now. */
+  len_unsigned = (gsize) len;
+
+  if (len_unsigned < sizeof (HEADER))
+    {
+      g_set_error (error, G_RESOLVER_ERROR, G_RESOLVER_ERROR_INTERNAL,
+                   /* Translators: the first placeholder is a domain name, the
+                    * second is an error message */
+                   _("Error resolving “%s”: %s"), rrname, _("Malformed DNS packet"));
+      return NULL;
+    }
+
   records = NULL;
 
   header = (HEADER *)answer;
   p = answer + sizeof (HEADER);
-  end = answer + len;
+  end = answer + len_unsigned;
 
   /* Skip query */
   count = ntohs (header->qdcount);
   while (count-- && p < end)
     {
       p += dn_expand (answer, end, p, namebuf, sizeof (namebuf));
       p += 4;
 
       /* To silence gcc warnings */
       namebuf[0] = namebuf[1];
     }
 
   /* Read answers */
   count = ntohs (header->ancount);
   while (count-- && p < end)
     {
       p += dn_expand (answer, end, p, namebuf, sizeof (namebuf));
       GETSHORT (type, p);
       GETSHORT (qclass, p);
       p += 4; /* ignore the ttl (type=long) value */
       GETSHORT (rdlength, p);
 
       if (type != rrtype || qclass != C_IN)
         {
           p += rdlength;
           continue;
         }
 
       switch (rrtype)
         {
         case T_SRV:
           record = parse_res_srv (answer, end, &p);
           break;
         case T_MX:
           record = parse_res_mx (answer, end, &p);
           break;
         case T_SOA:
           record = parse_res_soa (answer, end, &p);
           break;
         case T_NS:
           record = parse_res_ns (answer, end, &p);
           break;
         case T_TXT:
           record = parse_res_txt (answer, p + rdlength, &p);
           break;
         default:
           g_warn_if_reached ();
           record = NULL;
           break;
         }
 
       if (record != NULL)
         records = g_list_prepend (records, record);
     }
 
   if (records == NULL)
     {
       g_set_error (error, G_RESOLVER_ERROR, G_RESOLVER_ERROR_NOT_FOUND,
                    _("No DNS record of the requested type for “%s”"), rrname);
 
       return NULL;
     }
   else
     return records;
 }
 
 #elif defined(G_OS_WIN32)
