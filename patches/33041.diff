commit 54a5b5943b49060d4ca7b345bc80f9b0cb2cdc94
Author: Alex Rebert <alexandre.rebert@gmail.com>
Date:   Mon Jan 3 22:04:12 2022 -0500

    ucl_inherit_handler: fix format string for non-null-terminated strings
    
    I believe this was the intent of the original format string, but two
    characters got swapped. See printf docs at
    https://www.gnu.org/software/libc/manual/html_node/Output-Conversion-Syntax.html#Output-Conversion-Syntax.
    
    Fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=25626
    Fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=33041

diff --git a/src/ucl_util.c b/src/ucl_util.c
index b00a347..17cd5e4 100644
--- a/src/ucl_util.c
+++ b/src/ucl_util.c
@@ -1909,48 +1909,48 @@ bool
 ucl_inherit_handler (const unsigned char *data, size_t len,
 		const ucl_object_t *args, const ucl_object_t *ctx, void* ud)
 {
 	const ucl_object_t *parent, *cur;
 	ucl_object_t *target, *copy;
 	ucl_object_iter_t it = NULL;
 	bool replace = false;
 	struct ucl_parser *parser = ud;
 
 	parent = ucl_object_lookup_len (ctx, data, len);
 
 	/* Some sanity checks */
 	if (parent == NULL || ucl_object_type (parent) != UCL_OBJECT) {
-		ucl_create_err (&parser->err, "Unable to find inherited object %*.s",
+		ucl_create_err (&parser->err, "Unable to find inherited object %.*s",
 				(int)len, data);
 		return false;
 	}
 
 	if (parser->stack == NULL || parser->stack->obj == NULL ||
 			ucl_object_type (parser->stack->obj) != UCL_OBJECT) {
 		ucl_create_err (&parser->err, "Invalid inherit context");
 		return false;
 	}
 
 	target = parser->stack->obj;
 
 	if (args && (cur = ucl_object_lookup (args, "replace")) != NULL) {
 		replace = ucl_object_toboolean (cur);
 	}
 
 	while ((cur = ucl_object_iterate (parent, &it, true))) {
 		/* We do not replace existing keys */
 		if (!replace && ucl_object_lookup_len (target, cur->key, cur->keylen)) {
 			continue;
 		}
 
 		copy = ucl_object_copy (cur);
 
 		if (!replace) {
 			copy->flags |= UCL_OBJECT_INHERITED;
 		}
 
 		ucl_object_insert_key (target, copy, copy->key,
 				copy->keylen, false);
 	}
 
 	return true;
 }
