commit c7cd63be10c23c712921d9ad7359ddbe5d282e44
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Wed Dec 29 19:47:13 2021 +0000

    OSS-fuzz #42957 - do not rely on stack reference
    
    When creating a stream object to return, the code was using the
    dictionary from the stack and relying on the reference held by the stack
    to ensure that the dictionary didn't disappear.
    
    But if the repair code is called it can clear the stack.
    
    So instead keep the stream object counted up until we are done with it.

diff --git a/pdf/pdf_deref.c b/pdf/pdf_deref.c
index 46977a90c..aa979fb61 100644
--- a/pdf/pdf_deref.c
+++ b/pdf/pdf_deref.c
@@ -195,203 +195,216 @@ int is_compressed_object(pdf_context *ctx, uint32_t obj, uint32_t gen)
 /* We should never read a 'stream' keyword from a compressed object stream
  * so this case should never end up here.
  */
 static int pdfi_read_stream_object(pdf_context *ctx, pdf_c_stream *s, gs_offset_t stream_offset,
                                    uint32_t objnum, uint32_t gen)
 {
     int code = 0;
     int64_t i;
     pdf_keyword *keyword = NULL;
     pdf_dict *dict = NULL;
     gs_offset_t offset;
     pdf_stream *stream_obj = NULL;
 
     /* Strange code time....
      * If we are using a stream which is *not* the PDF uncompressed main file stream
      * then doing stell on it will only tell us how many bytes have been read from
      * that stream, it won't tell us the underlying file position. So we add on the
      * 'unread' bytes, *and* we add on the position of the start of the stream in
      * the actual main file. This is all done so that we can check the /Length
      * of the object. Note that this will *only* work for regular objects it can
      * not be used for compressed object streams, but those don't need checking anyway
      * they have a different mechanism altogether and should never get here.
      */
     offset = stell(s->s) - s->unread_size + stream_offset;
     code = pdfi_seek(ctx, ctx->main_stream, offset, SEEK_SET);
 
     if (pdfi_count_stack(ctx) < 1)
         return_error(gs_error_stackunderflow);
 
     dict = (pdf_dict *)ctx->stack_top[-1];
     dict->indirect_num = dict->object_num = objnum;
     dict->indirect_gen = dict->generation_num = gen;
 
     if (dict->type != PDF_DICT) {
         pdfi_pop(ctx, 1);
         return_error(gs_error_syntaxerror);
     }
 
     /* Convert the dict into a stream */
     code = pdfi_obj_dict_to_stream(ctx, dict, &stream_obj, true);
     if (code < 0) {
         pdfi_pop(ctx, 1);
         return code;
     }
     /* Pop off the dict and push the stream */
     pdfi_pop(ctx, 1);
     dict = NULL;
     pdfi_push(ctx, (pdf_obj *)stream_obj);
-    pdfi_countdown(stream_obj); /* get rid of extra ref */
 
     stream_obj->stream_dict->indirect_num = stream_obj->stream_dict->object_num = objnum;
     stream_obj->stream_dict->indirect_gen = stream_obj->stream_dict->generation_num = gen;
     stream_obj->stream_offset = offset;
 
     /* This code may be a performance overhead, it simply skips over the stream contents
      * and checks that the stream ends with a 'endstream endobj' pair. We could add a
      * 'go faster' flag for users who are certain their PDF files are well-formed. This
      * could also allow us to skip all kinds of other checking.....
      */
 
     code = pdfi_dict_get_int(ctx, (pdf_dict *)stream_obj->stream_dict, "Length", &i);
     if (code < 0) {
         char extra_info[gp_file_name_sizeof];
 
         gs_sprintf(extra_info, "Stream object %u missing mandatory keyword /Length, unable to verify the stream length.\n", objnum);
         pdfi_set_error(ctx, 0, NULL, E_PDF_BADSTREAM, "pdfi_read_stream_object", extra_info);
+        pdfi_countdown(stream_obj); /* get rid of extra ref */
         return 0;
     }
 
     if (i < 0 || (i + offset)> ctx->main_stream_length) {
         char extra_info[gp_file_name_sizeof];
 
         gs_sprintf(extra_info, "Stream object %u has /Length which, when added to offset of object, exceeds file size.\n", objnum);
         pdfi_set_error(ctx, 0, NULL, E_PDF_BADSTREAM, "pdfi_read_stream_object", extra_info);
     } else {
         code = pdfi_seek(ctx, ctx->main_stream, i, SEEK_CUR);
         if (code < 0) {
             pdfi_pop(ctx, 1);
+            pdfi_countdown(stream_obj); /* get rid of extra ref */
             return code;
         }
 
         stream_obj->Length = 0;
         stream_obj->length_valid = false;
 
         code = pdfi_read_token(ctx, ctx->main_stream, objnum, gen);
         if (code < 0 || pdfi_count_stack(ctx) < 2) {
             char extra_info[gp_file_name_sizeof];
 
             gs_sprintf(extra_info, "Failed to find a valid object at end of stream object %u.\n", objnum);
             pdfi_log_info(ctx, "pdfi_read_stream_object", extra_info);
             /* It is possible for pdfi_read_token to clear the stack, losing the stream object. If that
              * happens give up.
              */
-            if (pdfi_count_stack(ctx) == 0)
+            if (pdfi_count_stack(ctx) == 0) {
+                pdfi_countdown(stream_obj); /* get rid of extra ref */
                 return code;
+            }
         }
         else {
             if (((pdf_obj *)ctx->stack_top[-1])->type != PDF_KEYWORD) {
                 char extra_info[gp_file_name_sizeof];
 
                 gs_sprintf(extra_info, "Failed to find 'endstream' keyword at end of stream object %u.\n", objnum);
                 pdfi_set_error(ctx, 0, NULL, E_PDF_MISSINGENDOBJ, "pdfi_read_stream_object", extra_info);
             } else {
                 keyword = ((pdf_keyword *)ctx->stack_top[-1]);
                 if (keyword->key != TOKEN_ENDSTREAM) {
                     char extra_info[gp_file_name_sizeof];
 
                     gs_sprintf(extra_info, "Stream object %u has an incorrect /Length of %"PRIu64"\n", objnum, i);
                     pdfi_log_info(ctx, "pdfi_read_stream_object", extra_info);
                 } else {
                     /* Cache the Length in the stream object and mark it valid */
                     stream_obj->Length = i;
                     stream_obj->length_valid = true;
                 }
             }
             pdfi_pop(ctx, 1);
         }
     }
 
     /* If we failed to find a valid object, or the object wasn't a keyword, or the
      * keywrod wasn't 'endstream' then the Length is wrong. We need to have the correct
      * Length for streams if we have encrypted files, because we must install a
      * SubFileDecode filter iwth a Length (EODString is incompatible with AES encryption)
      * Rather than mess about checking for encryption, we'll choose to just correctly
      * calculate the Length of all streams. Although this takes time, it will only
      * happen for files which are invalid.
      */
     if (stream_obj->length_valid != true) {
         char Buffer[10];
         unsigned int loop, bytes, total = 0;
 
         code = pdfi_seek(ctx, ctx->main_stream, stream_obj->stream_offset, SEEK_SET);
         if (code < 0) {
+            pdfi_countdown(stream_obj); /* get rid of extra ref */
             pdfi_pop(ctx, 1);
             return code;
         }
         memset(Buffer, 0x00, 10);
         bytes = pdfi_read_bytes(ctx, (byte *)Buffer, 1, 9, ctx->main_stream);
-        if (bytes < 9)
+        if (bytes < 9) {
+            pdfi_countdown(stream_obj); /* get rid of extra ref */
             return_error(gs_error_ioerror);
+        }
 
         total = bytes;
         do {
             if (memcmp(Buffer, "endstream", 9) == 0) {
                 stream_obj->Length = total - 9;
                 stream_obj->length_valid = true;
                 break;
             }
             if (memcmp(Buffer, "endobj", 6) == 0) {
                 stream_obj->Length = total - 6;
                 stream_obj->length_valid = true;
                 break;
             }
             for (loop = 0;loop < 9;loop++){
                 Buffer[loop] = Buffer[loop + 1];
             }
             bytes = pdfi_read_bytes(ctx, (byte *)&Buffer[9], 1, 1, ctx->main_stream);
             total += bytes;
         } while(bytes);
+        pdfi_countdown(stream_obj); /* get rid of extra ref */
         if (bytes <= 0)
             return_error(gs_error_ioerror);
         return 0;
     }
 
     code = pdfi_read_token(ctx, ctx->main_stream, objnum, gen);
     if (code < 0) {
+        pdfi_countdown(stream_obj); /* get rid of extra ref */
         if (ctx->args.pdfstoponerror)
             return code;
         else
             /* Something went wrong looking for endobj, but we found endstream, so assume
              * for now that will suffice.
              */
             pdfi_set_error(ctx, 0, NULL, E_PDF_MISSINGENDOBJ, "pdfi_read_stream_object", NULL);
         return 0;
     }
 
-    if (pdfi_count_stack(ctx) < 2)
+    if (pdfi_count_stack(ctx) < 2) {
+        pdfi_countdown(stream_obj); /* get rid of extra ref */
         return_error(gs_error_stackunderflow);
+    }
 
     if (((pdf_obj *)ctx->stack_top[-1])->type != PDF_KEYWORD) {
+        pdfi_countdown(stream_obj); /* get rid of extra ref */
         pdfi_pop(ctx, 1);
         if (ctx->args.pdfstoponerror)
             return_error(gs_error_typecheck);
         pdfi_set_error(ctx, 0, NULL, E_PDF_MISSINGENDOBJ, "pdfi_read_stream_object", NULL);
         /* Didn't find an endobj, but we have an endstream, so assume
          * for now that will suffice
          */
         return 0;
     }
+    pdfi_countdown(stream_obj); /* get rid of extra ref */
+
     keyword = ((pdf_keyword *)ctx->stack_top[-1]);
     if (keyword->key != TOKEN_ENDOBJ) {
         pdfi_pop(ctx, 2);
         return_error(gs_error_typecheck);
     }
     pdfi_pop(ctx, 1);
     return 0;
 }
 
 /* This reads an object *after* the x y obj keyword has been found. Its broken out
  * separately for the benefit of the repair code when reading the dictionary following
  * the 'trailer' keyword, which does not have a 'obj' keyword. Note that it also does
  * not have an 'endobj', we rely on the error handling to take care of that for us.
  */
