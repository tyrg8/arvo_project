commit 46ce48b6a5bf13f95318d579e2af4fde189d049a
Author: Thomas Weißschuh <thomas@t-8ch.de>
Date:   Wed Jan 25 05:47:16 2023 +0000

    libblkid: bcachefs: avoid overflow in address comparisions
    
    Adding the offset to the address may overflow and break the comparision,
    use substraction instead.
    
    Addresses: #2030
    Signed-off-by: Thomas Weißschuh <thomas@t-8ch.de>

diff --git a/libblkid/src/superblocks/bcache.c b/libblkid/src/superblocks/bcache.c
index 02fc6e3d2..1d6ee9519 100644
--- a/libblkid/src/superblocks/bcache.c
+++ b/libblkid/src/superblocks/bcache.c
@@ -168,34 +168,45 @@ static void probe_bcachefs_sb_members(blkid_probe pr,
 	blkid_probe_set_fssize(pr, sectors * BCACHEFS_SECTOR_SIZE);
 }
 
+static int is_within_range(void *start, uint64_t size, void *end)
+{
+	ptrdiff_t diff;
+
+	if (start >= end)
+		return 0; // should not happen
+
+	diff = (unsigned char *) end - (unsigned char *) start;
+	return size <= (uint64_t) diff;
+}
+
 static void probe_bcachefs_sb_fields(blkid_probe pr, const struct bcachefs_super_block *bcs,
 				     unsigned char *sb_start, unsigned char *sb_end)
 {
 	unsigned char *field_addr = sb_start + BCACHEFS_SB_FIELDS_OFF;
 
 	while (1) {
 		struct bcachefs_sb_field *field = (struct bcachefs_sb_field *) field_addr;
 		uint64_t field_size;
 		uint32_t type;
 
-		if ((unsigned char *) field + sizeof(*field) > sb_end)
+		if (!is_within_range(field, sizeof(*field), sb_end))
 			break;
 
 		field_size = BYTES(field);
 
 		if (field_size < sizeof(*field))
 			break;
 
-		if ((unsigned char *) field + field_size > sb_end)
+		if (!is_within_range(field, field_size, sb_end))
 			break;
 
 		type = le32_to_cpu(field->type);
 		if (!type)
 			break;
 
 		if (type == BCACHEFS_SB_FIELD_TYPE_MEMBERS)
 			probe_bcachefs_sb_members(pr, bcs, field, bcs->dev_idx);
 
 		field_addr += BYTES(field);
 	}
 }
