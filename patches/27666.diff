commit 22ce25afbacfb60d426ac849fb365621967df0f6
Merge: 382deb1f8 1e49bc2e8
Author: David Garske <david@wolfssl.com>
Date:   Wed Jan 13 14:00:20 2021 -0800

    Merge pull request #3648 from douzzer/disable-ecc-enable-dsa
    
    --disable-ecc --enable-dsa

diff --git a/wolfcrypt/src/asn.c b/wolfcrypt/src/asn.c
index 12ada17af..3515b3cd0 100644
--- a/wolfcrypt/src/asn.c
+++ b/wolfcrypt/src/asn.c
@@ -2906,255 +2906,256 @@ int wc_CreatePKCS8Key(byte* out, word32* outSz, byte* key, word32 keySz,
 #if defined(HAVE_PKCS12) || !defined(NO_CHECK_PRIVATE_KEY)
 /* check that the private key is a pair for the public key
  * return 1 (true) on match
  * return 0 or negative value on failure/error
  *
  * privKey   : buffer holding DER format private key
  * privKeySz : size of private key buffer
  * pubKey    : buffer holding DER format public key
  * pubKeySz  : size of public key buffer
  * ks        : type of key */
 int wc_CheckPrivateKey(const byte* privKey, word32 privKeySz,
                        const byte* pubKey, word32 pubKeySz, enum Key_Sum ks)
 {
     int ret;
     (void)privKeySz;
     (void)pubKeySz;
+    (void)ks;
 
     if (privKey == NULL || pubKey == NULL) {
         return BAD_FUNC_ARG;
     }
 
     #if !defined(NO_RSA) && !defined(NO_ASN_CRYPT)
     /* test if RSA key */
     if (ks == RSAk) {
     #ifdef WOLFSSL_SMALL_STACK
         RsaKey* a;
         RsaKey* b = NULL;
     #else
         RsaKey a[1], b[1];
     #endif
         word32 keyIdx = 0;
 
     #ifdef WOLFSSL_SMALL_STACK
         a = (RsaKey*)XMALLOC(sizeof(RsaKey), NULL, DYNAMIC_TYPE_RSA);
         if (a == NULL)
             return MEMORY_E;
         b = (RsaKey*)XMALLOC(sizeof(RsaKey), NULL, DYNAMIC_TYPE_RSA);
         if (b == NULL) {
             XFREE(a, NULL, DYNAMIC_TYPE_RSA);
             return MEMORY_E;
         }
     #endif
 
         if ((ret = wc_InitRsaKey(a, NULL)) < 0) {
     #ifdef WOLFSSL_SMALL_STACK
             XFREE(b, NULL, DYNAMIC_TYPE_RSA);
             XFREE(a, NULL, DYNAMIC_TYPE_RSA);
     #endif
             return ret;
         }
         if ((ret = wc_InitRsaKey(b, NULL)) < 0) {
             wc_FreeRsaKey(a);
     #ifdef WOLFSSL_SMALL_STACK
             XFREE(b, NULL, DYNAMIC_TYPE_RSA);
             XFREE(a, NULL, DYNAMIC_TYPE_RSA);
     #endif
             return ret;
         }
         if ((ret = wc_RsaPrivateKeyDecode(privKey, &keyIdx, a, privKeySz)) == 0) {
             WOLFSSL_MSG("Checking RSA key pair");
             keyIdx = 0; /* reset to 0 for parsing public key */
 
             if ((ret = wc_RsaPublicKeyDecode(pubKey, &keyIdx, b,
                     pubKeySz)) == 0) {
                 /* limit for user RSA crypto because of RsaKey
                  * dereference. */
             #if defined(HAVE_USER_RSA)
                 WOLFSSL_MSG("Cannot verify RSA pair with user RSA");
                 ret = 1; /* return first RSA cert as match */
             #else
                 /* both keys extracted successfully now check n and e
                  * values are the same. This is dereferencing RsaKey */
                 if (mp_cmp(&(a->n), &(b->n)) != MP_EQ ||
                     mp_cmp(&(a->e), &(b->e)) != MP_EQ) {
                     ret = MP_CMP_E;
                 }
                 else
                     ret = 1;
             #endif
             }
         }
         wc_FreeRsaKey(b);
         wc_FreeRsaKey(a);
     #ifdef WOLFSSL_SMALL_STACK
         XFREE(b, NULL, DYNAMIC_TYPE_RSA);
         XFREE(a, NULL, DYNAMIC_TYPE_RSA);
     #endif
     }
     else
     #endif /* !NO_RSA && !NO_ASN_CRYPT */
 
     #if defined(HAVE_ECC) && defined(HAVE_ECC_KEY_EXPORT) && !defined(NO_ASN_CRYPT)
     if (ks == ECDSAk) {
     #ifdef WOLFSSL_SMALL_STACK
         ecc_key* key_pair;
         byte*    privDer;
     #else
         ecc_key  key_pair[1];
         byte     privDer[MAX_ECC_BYTES];
     #endif
         word32   privSz = MAX_ECC_BYTES;
         word32   keyIdx = 0;
 
     #ifdef WOLFSSL_SMALL_STACK
         key_pair = (ecc_key*)XMALLOC(sizeof(ecc_key), NULL, DYNAMIC_TYPE_ECC);
         if (key_pair == NULL)
             return MEMORY_E;
         privDer = (byte*)XMALLOC(MAX_ECC_BYTES, NULL, DYNAMIC_TYPE_TMP_BUFFER);
         if (privDer == NULL) {
             XFREE(key_pair, NULL, DYNAMIC_TYPE_ECC);
             return MEMORY_E;
         }
     #endif
 
         if ((ret = wc_ecc_init(key_pair)) < 0) {
     #ifdef WOLFSSL_SMALL_STACK
             XFREE(privDer, NULL, DYNAMIC_TYPE_TMP_BUFFER);
             XFREE(key_pair, NULL, DYNAMIC_TYPE_ECC);
     #endif
             return ret;
         }
 
         if ((ret = wc_EccPrivateKeyDecode(privKey, &keyIdx, key_pair,
                 privKeySz)) == 0) {
             WOLFSSL_MSG("Checking ECC key pair");
 
             if ((ret = wc_ecc_export_private_only(key_pair, privDer, &privSz))
                                                                          == 0) {
                 wc_ecc_free(key_pair);
                 ret = wc_ecc_init(key_pair);
                 if (ret == 0) {
                     ret = wc_ecc_import_private_key(privDer,
                                             privSz, pubKey,
                                             pubKeySz, key_pair);
                 }
 
                 /* public and private extracted successfully now check if is
                  * a pair and also do sanity checks on key. wc_ecc_check_key
                  * checks that private * base generator equals pubkey */
                 if (ret == 0) {
                     if ((ret = wc_ecc_check_key(key_pair)) == 0) {
                         ret = 1;
                     }
                 }
                 ForceZero(privDer, privSz);
             }
         }
         wc_ecc_free(key_pair);
     #ifdef WOLFSSL_SMALL_STACK
         XFREE(privDer, NULL, DYNAMIC_TYPE_TMP_BUFFER);
         XFREE(key_pair, NULL, DYNAMIC_TYPE_ECC);
     #endif
     }
     else
     #endif /* HAVE_ECC && HAVE_ECC_KEY_EXPORT && !NO_ASN_CRYPT */
 
     #if defined(HAVE_ED25519) && !defined(NO_ASN_CRYPT)
     if (ks == ED25519k) {
     #ifdef WOLFSSL_SMALL_STACK
         ed25519_key* key_pair;
     #else
         ed25519_key  key_pair[1];
     #endif
         word32       keyIdx = 0;
 
     #ifdef WOLFSSL_SMALL_STACK
         key_pair = (ed25519_key*)XMALLOC(sizeof(ed25519_key), NULL,
                                                           DYNAMIC_TYPE_ED25519);
         if (key_pair == NULL)
             return MEMORY_E;
     #endif
 
         if ((ret = wc_ed25519_init(key_pair)) < 0) {
     #ifdef WOLFSSL_SMALL_STACK
             XFREE(key_pair, NULL, DYNAMIC_TYPE_ED25519);
     #endif
             return ret;
         }
         if ((ret = wc_Ed25519PrivateKeyDecode(privKey, &keyIdx, key_pair,
                 privKeySz)) == 0) {
             WOLFSSL_MSG("Checking ED25519 key pair");
             keyIdx = 0;
             if ((ret = wc_ed25519_import_public(pubKey, pubKeySz,
                     key_pair)) == 0) {
                 /* public and private extracted successfully no check if is
                  * a pair and also do sanity checks on key. wc_ecc_check_key
                  * checks that private * base generator equals pubkey */
                 if ((ret = wc_ed25519_check_key(key_pair)) == 0)
                     ret = 1;
             }
         }
         wc_ed25519_free(key_pair);
     #ifdef WOLFSSL_SMALL_STACK
         XFREE(key_pair, NULL, DYNAMIC_TYPE_ED25519);
     #endif
     }
     else
     #endif /* HAVE_ED25519 && !NO_ASN_CRYPT */
 
     #if defined(HAVE_ED448) && !defined(NO_ASN_CRYPT)
     if (ks == ED448k) {
     #ifdef WOLFSSL_SMALL_STACK
         ed448_key* key_pair = NULL;
     #else
         ed448_key  key_pair[1];
     #endif
         word32     keyIdx = 0;
 
     #ifdef WOLFSSL_SMALL_STACK
         key_pair = (ed448_key*)XMALLOC(sizeof(ed448_key), NULL,
                                                             DYNAMIC_TYPE_ED448);
         if (key_pair == NULL)
             return MEMORY_E;
     #endif
 
         if ((ret = wc_ed448_init(key_pair)) < 0) {
     #ifdef WOLFSSL_SMALL_STACK
             XFREE(key_pair, NULL, DYNAMIC_TYPE_ED448);
     #endif
             return ret;
         }
         if ((ret = wc_Ed448PrivateKeyDecode(privKey, &keyIdx, key_pair,
                 privKeySz)) == 0) {
             WOLFSSL_MSG("Checking ED448 key pair");
             keyIdx = 0;
             if ((ret = wc_ed448_import_public(pubKey, pubKeySz,
                     key_pair)) == 0) {
                 /* public and private extracted successfully no check if is
                  * a pair and also do sanity checks on key. wc_ecc_check_key
                  * checks that private * base generator equals pubkey */
                 if ((ret = wc_ed448_check_key(key_pair)) == 0)
                     ret = 1;
             }
         }
         wc_ed448_free(key_pair);
     #ifdef WOLFSSL_SMALL_STACK
         XFREE(key_pair, NULL, DYNAMIC_TYPE_ED448);
     #endif
     }
     else
     #endif /* HAVE_ED448 && !NO_ASN_CRYPT */
     {
         ret = 0;
     }
 
     return ret;
 }
 
 /* check that the private key is a pair for the public key in certificate
  * return 1 (true) on match
  * return 0 or negative value on failure/error
  *
  * key   : buffer holding DER format key
  * keySz : size of key buffer
  * der   : a initialized and parsed DecodedCert holding a certificate */
@@ -7205,445 +7206,451 @@ static int HashForSignature(const byte* buf, word32 bufSz, word32 sigOID,
 /* Return codes: 0=Success, Negative (see error-crypt.h), ASN_SIG_CONFIRM_E */
 static int ConfirmSignature(SignatureCtx* sigCtx,
     const byte* buf, word32 bufSz,
     const byte* key, word32 keySz, word32 keyOID,
     const byte* sig, word32 sigSz, word32 sigOID, byte* rsaKeyIdx)
 {
     int ret = 0;
 #ifndef WOLFSSL_RENESAS_TSIP_TLS
     (void)rsaKeyIdx;
 #endif
     if (sigCtx == NULL || buf == NULL || bufSz == 0 || key == NULL ||
         keySz == 0 || sig == NULL || sigSz == 0) {
         return BAD_FUNC_ARG;
     }
 
     (void)key;
     (void)keySz;
     (void)sig;
     (void)sigSz;
 
     WOLFSSL_ENTER("ConfirmSignature");
 
 #ifndef NO_ASN_CRYPT
     switch (sigCtx->state) {
         case SIG_STATE_BEGIN:
         {
             sigCtx->keyOID = keyOID; /* must set early for cleanup */
 
             sigCtx->digest = (byte*)XMALLOC(WC_MAX_DIGEST_SIZE, sigCtx->heap,
                                                     DYNAMIC_TYPE_DIGEST);
             if (sigCtx->digest == NULL) {
                 ERROR_OUT(MEMORY_E, exit_cs);
             }
 
             sigCtx->state = SIG_STATE_HASH;
         } /* SIG_STATE_BEGIN */
         FALL_THROUGH;
 
         case SIG_STATE_HASH:
         {
             ret = HashForSignature(buf, bufSz, sigOID, sigCtx->digest,
                                    &sigCtx->typeH, &sigCtx->digestSz, 1);
             if (ret != 0) {
                 goto exit_cs;
             }
 
             sigCtx->state = SIG_STATE_KEY;
         } /* SIG_STATE_HASH */
         FALL_THROUGH;
 
         case SIG_STATE_KEY:
         {
             switch (keyOID) {
             #ifndef NO_RSA
                 case RSAk:
                 {
                     word32 idx = 0;
 
                     sigCtx->key.rsa = (RsaKey*)XMALLOC(sizeof(RsaKey),
                                                 sigCtx->heap, DYNAMIC_TYPE_RSA);
                     sigCtx->sigCpy = (byte*)XMALLOC(MAX_ENCODED_SIG_SZ,
                                          sigCtx->heap, DYNAMIC_TYPE_SIGNATURE);
                     if (sigCtx->key.rsa == NULL || sigCtx->sigCpy == NULL) {
                         ERROR_OUT(MEMORY_E, exit_cs);
                     }
                     if ((ret = wc_InitRsaKey_ex(sigCtx->key.rsa, sigCtx->heap,
                                                         sigCtx->devId)) != 0) {
                         goto exit_cs;
                     }
                     if (sigSz > MAX_ENCODED_SIG_SZ) {
                         WOLFSSL_MSG("Verify Signature is too big");
                         ERROR_OUT(BUFFER_E, exit_cs);
                     }
                     if ((ret = wc_RsaPublicKeyDecode(key, &idx, sigCtx->key.rsa,
                                                                  keySz)) != 0) {
                         WOLFSSL_MSG("ASN Key decode error RSA");
                         goto exit_cs;
                     }
                     XMEMCPY(sigCtx->sigCpy, sig, sigSz);
                     sigCtx->out = NULL;
 
                 #ifdef WOLFSSL_ASYNC_CRYPT
                     sigCtx->asyncDev = &sigCtx->key.rsa->asyncDev;
                 #endif
                     break;
                 }
             #endif /* !NO_RSA */
             #if !defined(NO_DSA) && !defined(HAVE_SELFTEST)
                 case DSAk:
                 {
                     word32 idx = 0;
-                    mp_int r, s;
 
                     if (sigSz < DSA_SIG_SIZE) {
                         WOLFSSL_MSG("Verify Signature is too small");
                         ERROR_OUT(BUFFER_E, exit_cs);
                     }
                     sigCtx->key.dsa = (DsaKey*)XMALLOC(sizeof(DsaKey),
                                                 sigCtx->heap, DYNAMIC_TYPE_DSA);
                     sigCtx->sigCpy = (byte*)XMALLOC(sigSz,
                                          sigCtx->heap, DYNAMIC_TYPE_SIGNATURE);
                     if (sigCtx->key.dsa == NULL || sigCtx->sigCpy == NULL) {
                         ERROR_OUT(MEMORY_E, exit_cs);
                     }
                     if ((ret = wc_InitDsaKey_h(sigCtx->key.dsa, sigCtx->heap)) != 0) {
                         WOLFSSL_MSG("wc_InitDsaKey_h error");
                         goto exit_cs;
                     }
                     if ((ret = wc_DsaPublicKeyDecode(key, &idx, sigCtx->key.dsa,
                                                                  keySz)) != 0) {
                         WOLFSSL_MSG("ASN Key decode error RSA");
                         goto exit_cs;
                     }
                     if (sigSz != DSA_SIG_SIZE) {
+                #ifdef HAVE_ECC
                         /* Try to parse it as the contents of a bitstring */
+                        mp_int r, s;
                         idx = 0;
                         if (DecodeECC_DSA_Sig(sig + idx, sigSz - idx,
                                               &r, &s) != 0) {
                             WOLFSSL_MSG("DSA Sig is in unrecognized or "
                                         "incorrect format");
                             ERROR_OUT(ASN_SIG_CONFIRM_E, exit_cs);
                         }
                         if (mp_to_unsigned_bin_len(&r, sigCtx->sigCpy,
                                 DSA_HALF_SIZE) != MP_OKAY ||
                             mp_to_unsigned_bin_len(&s,
                                     sigCtx->sigCpy + DSA_HALF_SIZE,
                                     DSA_HALF_SIZE) != MP_OKAY) {
                             WOLFSSL_MSG("DSA Sig is in unrecognized or "
                                         "incorrect format");
                             ERROR_OUT(ASN_SIG_CONFIRM_E, exit_cs);
                         }
                         mp_free(&r);
                         mp_free(&s);
+                #else
+                        WOLFSSL_MSG("DSA Sig is in unrecognized or "
+                                    "incorrect format");
+                        ERROR_OUT(ASN_SIG_CONFIRM_E, exit_cs);
+                #endif
                     }
                     else {
                         XMEMCPY(sigCtx->sigCpy, sig, DSA_SIG_SIZE);
                     }
                     break;
                 }
             #endif /* !NO_DSA && !HAVE_SELFTEST */
             #ifdef HAVE_ECC
                 case ECDSAk:
                 {
                     word32 idx = 0;
 
                     sigCtx->verify = 0;
                     sigCtx->key.ecc = (ecc_key*)XMALLOC(sizeof(ecc_key),
                                                 sigCtx->heap, DYNAMIC_TYPE_ECC);
                     if (sigCtx->key.ecc == NULL) {
                         ERROR_OUT(MEMORY_E, exit_cs);
                     }
                     if ((ret = wc_ecc_init_ex(sigCtx->key.ecc, sigCtx->heap,
                                                           sigCtx->devId)) < 0) {
                         goto exit_cs;
                     }
                     ret = wc_EccPublicKeyDecode(key, &idx, sigCtx->key.ecc,
                                                                          keySz);
                     if (ret < 0) {
                         WOLFSSL_MSG("ASN Key import error ECC");
                         goto exit_cs;
                     }
                 #ifdef WOLFSSL_ASYNC_CRYPT
                     sigCtx->asyncDev = &sigCtx->key.ecc->asyncDev;
                 #endif
                     break;
                 }
             #endif /* HAVE_ECC */
             #ifdef HAVE_ED25519
                 case ED25519k:
                 {
                     sigCtx->verify = 0;
                     sigCtx->key.ed25519 = (ed25519_key*)XMALLOC(
                                               sizeof(ed25519_key), sigCtx->heap,
                                               DYNAMIC_TYPE_ED25519);
                     if (sigCtx->key.ed25519 == NULL) {
                         ERROR_OUT(MEMORY_E, exit_cs);
                     }
                     if ((ret = wc_ed25519_init(sigCtx->key.ed25519)) < 0) {
                         goto exit_cs;
                     }
                     if ((ret = wc_ed25519_import_public(key, keySz,
                                                     sigCtx->key.ed25519)) < 0) {
                         WOLFSSL_MSG("ASN Key import error ED25519");
                         goto exit_cs;
                     }
                 #ifdef WOLFSSL_ASYNC_CRYPT
                     sigCtx->asyncDev = &sigCtx->key.ed25519->asyncDev;
                 #endif
                     break;
                 }
             #endif
             #ifdef HAVE_ED448
                 case ED448k:
                 {
                     sigCtx->verify = 0;
                     sigCtx->key.ed448 = (ed448_key*)XMALLOC(
                                                 sizeof(ed448_key), sigCtx->heap,
                                                 DYNAMIC_TYPE_ED448);
                     if (sigCtx->key.ed448 == NULL) {
                         ERROR_OUT(MEMORY_E, exit_cs);
                     }
                     if ((ret = wc_ed448_init(sigCtx->key.ed448)) < 0) {
                         goto exit_cs;
                     }
                     if ((ret = wc_ed448_import_public(key, keySz,
                                                       sigCtx->key.ed448)) < 0) {
                         WOLFSSL_MSG("ASN Key import error ED448");
                         goto exit_cs;
                     }
                 #ifdef WOLFSSL_ASYNC_CRYPT
                     sigCtx->asyncDev = &sigCtx->key.ed448->asyncDev;
                 #endif
                     break;
                 }
             #endif
                 default:
                     WOLFSSL_MSG("Verify Key type unknown");
                     ret = ASN_UNKNOWN_OID_E;
                     break;
             } /* switch (keyOID) */
 
             if (ret != 0) {
                 goto exit_cs;
             }
 
             sigCtx->state = SIG_STATE_DO;
 
         #ifdef WOLFSSL_ASYNC_CRYPT
             if (sigCtx->devId != INVALID_DEVID && sigCtx->asyncDev && sigCtx->asyncCtx) {
                 /* make sure event is initialized */
                 WOLF_EVENT* event = &sigCtx->asyncDev->event;
                 ret = wolfAsync_EventInit(event, WOLF_EVENT_TYPE_ASYNC_WOLFSSL,
                     sigCtx->asyncCtx, WC_ASYNC_FLAG_CALL_AGAIN);
             }
         #endif
         } /* SIG_STATE_KEY */
         FALL_THROUGH;
 
         case SIG_STATE_DO:
         {
             switch (keyOID) {
             #ifndef NO_RSA
                 case RSAk:
                 {
                 #ifdef HAVE_PK_CALLBACKS
                     if (sigCtx->pkCbRsa) {
                         ret = sigCtx->pkCbRsa(
                                 sigCtx->sigCpy, sigSz, &sigCtx->out,
                                 key, keySz,
                                 sigCtx->pkCtxRsa);
                     }
                     else
                 #endif /* HAVE_PK_CALLBACKS */
                     {
                      #ifdef WOLFSSL_RENESAS_TSIP_TLS
                         if (rsaKeyIdx != NULL)
                         {
                             ret = tsip_tls_CertVerify(buf, bufSz, sigCtx->sigCpy,
                                 sigSz,
                                 sigCtx->pubkey_n_start - sigCtx->certBegin,
                                 sigCtx->pubkey_n_len - 1,
                                 sigCtx->pubkey_e_start - sigCtx->certBegin,
                                 sigCtx->pubkey_e_len - 1,
                                 rsaKeyIdx);
 
                             if (ret == 0){
                                 sigCtx->verifyByTSIP = 1;
                                 ret = 0;
                             } else {
                                 WOLFSSL_MSG("RSA Verify by tsip didn't match");
                                 ret = ASN_SIG_CONFIRM_E;
                             }
                         } else
                     #endif
                         ret = wc_RsaSSL_VerifyInline(sigCtx->sigCpy, sigSz,
                                                  &sigCtx->out, sigCtx->key.rsa);
                     }
                     break;
                 }
             #endif /* !NO_RSA */
             #if !defined(NO_DSA) && !defined(HAVE_SELFTEST)
                 case DSAk:
                 {
                     ret = wc_DsaVerify(sigCtx->digest, sigCtx->sigCpy,
                             sigCtx->key.dsa, &sigCtx->verify);
                     break;
                 }
             #endif /* !NO_DSA && !HAVE_SELFTEST */
             #if defined(HAVE_ECC)
                 case ECDSAk:
                 {
                 #ifdef HAVE_PK_CALLBACKS
                     if (sigCtx->pkCbEcc) {
                         ret = sigCtx->pkCbEcc(
                                 sig, sigSz,
                                 sigCtx->digest, sigCtx->digestSz,
                                 key, keySz, &sigCtx->verify,
                                 sigCtx->pkCtxEcc);
                     }
                     else
                 #endif /* HAVE_PK_CALLBACKS */
                     {
                         ret = wc_ecc_verify_hash(sig, sigSz, sigCtx->digest,
                                             sigCtx->digestSz, &sigCtx->verify,
                                             sigCtx->key.ecc);
                     }
                     break;
                 }
             #endif /* HAVE_ECC */
             #ifdef HAVE_ED25519
                 case ED25519k:
                 {
                     ret = wc_ed25519_verify_msg(sig, sigSz, buf, bufSz,
                                           &sigCtx->verify, sigCtx->key.ed25519);
                     break;
                 }
             #endif
             #ifdef HAVE_ED448
                 case ED448k:
                 {
                     ret = wc_ed448_verify_msg(sig, sigSz, buf, bufSz,
                                              &sigCtx->verify, sigCtx->key.ed448,
                                              NULL, 0);
                     break;
                 }
             #endif
                 default:
                     break;
             }  /* switch (keyOID) */
 
         #ifdef WOLFSSL_ASYNC_CRYPT
             if (ret == WC_PENDING_E) {
                 goto exit_cs;
             }
         #endif
 
             if (ret < 0) {
                 /* treat all RSA errors as ASN_SIG_CONFIRM_E */
                 ret = ASN_SIG_CONFIRM_E;
                 goto exit_cs;
             }
 
             sigCtx->state = SIG_STATE_CHECK;
         } /* SIG_STATE_DO */
         FALL_THROUGH;
 
         case SIG_STATE_CHECK:
         {
             switch (keyOID) {
             #ifndef NO_RSA
                 case RSAk:
                 {
                     int encodedSigSz, verifySz;
                 #ifdef WOLFSSL_RENESAS_TSIP
                     if (sigCtx->verifyByTSIP == 1) break;
                 #endif
                 #ifdef WOLFSSL_SMALL_STACK
                     byte* encodedSig = (byte*)XMALLOC(MAX_ENCODED_SIG_SZ,
                                         sigCtx->heap, DYNAMIC_TYPE_TMP_BUFFER);
                     if (encodedSig == NULL) {
                         ERROR_OUT(MEMORY_E, exit_cs);
                     }
                 #else
                     byte encodedSig[MAX_ENCODED_SIG_SZ];
                 #endif
 
                     verifySz = ret;
 
                     /* make sure we're right justified */
                     encodedSigSz = wc_EncodeSignature(encodedSig,
                             sigCtx->digest, sigCtx->digestSz, sigCtx->typeH);
                     if (encodedSigSz == verifySz && sigCtx->out != NULL &&
                         XMEMCMP(sigCtx->out, encodedSig, encodedSigSz) == 0) {
                         ret = 0;
                     }
                     else {
                         WOLFSSL_MSG("RSA SSL verify match encode error");
                         ret = ASN_SIG_CONFIRM_E;
                     }
 
                 #ifdef WOLFSSL_SMALL_STACK
                     XFREE(encodedSig, sigCtx->heap, DYNAMIC_TYPE_TMP_BUFFER);
                 #endif
                     break;
                 }
             #endif /* NO_RSA */
             #if !defined(NO_DSA) && !defined(HAVE_SELFTEST)
                 case DSAk:
                 {
                     if (sigCtx->verify == 1) {
                         ret = 0;
                     }
                     else {
                         WOLFSSL_MSG("DSA Verify didn't match");
                         ret = ASN_SIG_CONFIRM_E;
                     }
                     break;
                 }
             #endif /* !NO_DSA && !HAVE_SELFTEST */
             #ifdef HAVE_ECC
                 case ECDSAk:
                 {
                     if (sigCtx->verify == 1) {
                         ret = 0;
                     }
                     else {
                         WOLFSSL_MSG("ECC Verify didn't match");
                         ret = ASN_SIG_CONFIRM_E;
                     }
                     break;
                 }
             #endif /* HAVE_ECC */
             #ifdef HAVE_ED25519
                 case ED25519k:
                 {
                     if (sigCtx->verify == 1) {
                         ret = 0;
                     }
                     else {
                         WOLFSSL_MSG("ED25519 Verify didn't match");
                         ret = ASN_SIG_CONFIRM_E;
                     }
                     break;
                 }
             #endif /* HAVE_ED25519 */
             #ifdef HAVE_ED448
                 case ED448k:
                 {
                     if (sigCtx->verify == 1) {
                         ret = 0;
                     }
                     else {
                         WOLFSSL_MSG("ED448 Verify didn't match");
                         ret = ASN_SIG_CONFIRM_E;
                     }
                     break;
                 }
             #endif /* HAVE_ED448 */
                 default:
                     break;
             }  /* switch (keyOID) */
 
             break;
         } /* SIG_STATE_CHECK */
     } /* switch (sigCtx->state) */
diff --git a/wolfssl/wolfcrypt/asn.h b/wolfssl/wolfcrypt/asn.h
index 1537ccc7e..90350ea0e 100644
--- a/wolfssl/wolfcrypt/asn.h
+++ b/wolfssl/wolfcrypt/asn.h
@@ -676,61 +676,61 @@ enum SignatureState {
 struct SignatureCtx {
     void* heap;
     byte* digest;
 #ifndef NO_RSA
     byte* out;
 #endif
 #if !(defined(NO_RSA) && defined(NO_DSA))
     byte* sigCpy;
 #endif
-#if defined(HAVE_ECC) || defined(HAVE_ED25519) || defined(HAVE_ED448)
+#if defined(HAVE_ECC) || defined(HAVE_ED25519) || defined(HAVE_ED448) || !defined(NO_DSA)
     int verify;
 #endif
     union {
     #ifndef NO_RSA
         struct RsaKey*      rsa;
     #endif
     #ifndef NO_DSA
         struct DsaKey*      dsa;
     #endif
     #ifdef HAVE_ECC
         struct ecc_key*     ecc;
     #endif
     #ifdef HAVE_ED25519
         struct ed25519_key* ed25519;
     #endif
     #ifdef HAVE_ED448
         struct ed448_key* ed448;
     #endif
         void* ptr;
     } key;
     int devId;
     int state;
     int typeH;
     int digestSz;
     word32 keyOID;
 #ifdef WOLFSSL_ASYNC_CRYPT
     WC_ASYNC_DEV* asyncDev;
     void* asyncCtx;
 #endif
 
 #ifdef HAVE_PK_CALLBACKS
 #ifdef HAVE_ECC
     wc_CallbackEccVerify pkCbEcc;
     void* pkCtxEcc;
 #endif
 #ifndef NO_RSA
     wc_CallbackRsaVerify pkCbRsa;
     void* pkCtxRsa;
 #endif
 #endif /* HAVE_PK_CALLBACKS */
 #ifndef NO_RSA
 #ifdef WOLFSSL_RENESAS_TSIP_TLS
     byte verifyByTSIP;
     word32 certBegin;
     word32 pubkey_n_start;
     word32 pubkey_n_len;
     word32 pubkey_e_start;
     word32 pubkey_e_len;
 #endif
 #endif
 };
