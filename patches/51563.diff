commit 716417e0fd7d87db6e26cf67119a50e293d5ce87
Author: Arjun <36335769+0x34d@users.noreply.github.com>
Date:   Sun Oct 9 06:29:08 2022 +0530

    Fix : Issue 51563 in oss-fuzz (#1010)
    
    ```
    ==6418==WARNING: MemorySanitizer: use-of-uninitialized-value
        #0 0x4e7530 in bcmp /src/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:906:10
        #1 0x55463d in stun_check_message_integrity_by_key_str coturn/src/client/ns_turn_msg.c:1989:5
        #2 0x554acc in stun_check_message_integrity_str coturn/src/client/ns_turn_msg.c:2008:9
        #3 0x5358c0 in LLVMFuzzerTestOneInput coturn/fuzz/FuzzStun.c:37:5
        #4 0x43ede3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15
        #5 0x42a542 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6
        #6 0x42fdec in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9
        #7 0x459322 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
        #8 0x7f4cb21790b2 in __libc_start_main /build/glibc-eX1tMB/glibc-2.31/csu/libc-start.c:308:16
        #9 0x42070d in _start
      Uninitialized value was created by an allocation of 'new_hmac' in the stack frame of function 'stun_check_message_integrity_by_key_str'
        #0 0x5538c0 in stun_check_message_integrity_by_key_str coturn/src/client/ns_turn_msg.c:1927
    ```

diff --git a/src/client/ns_turn_msg.c b/src/client/ns_turn_msg.c
index 821f21a..2d425e9 100644
--- a/src/client/ns_turn_msg.c
+++ b/src/client/ns_turn_msg.c
@@ -1923,75 +1923,75 @@ void print_hmac(const char *name, const void *s, size_t len)
 /*
  * Return -1 if failure, 0 if the integrity is not correct, 1 if OK
  */
 int stun_check_message_integrity_by_key_str(turn_credential_type ct, uint8_t *buf, size_t len, hmackey_t key, password_t pwd, SHATYPE shatype)
 {
 	int res = 0;
-	uint8_t new_hmac[MAXSHASIZE];
+	uint8_t new_hmac[MAXSHASIZE] = {0};
 	unsigned int shasize;
 	const uint8_t *old_hmac = NULL;
 
 	stun_attr_ref sar = stun_attr_get_first_by_type_str(buf, len, STUN_ATTRIBUTE_MESSAGE_INTEGRITY);
 	if (!sar)
 		return -1;
 
 	int sarlen = stun_attr_get_len(sar);
 
 	switch(sarlen) {
 	case SHA256SIZEBYTES:
 		shasize = SHA256SIZEBYTES;
 		if(shatype != SHATYPE_SHA256)
 			return -1;
 		break;
 	case SHA384SIZEBYTES:
 		shasize = SHA384SIZEBYTES;
 		if(shatype != SHATYPE_SHA384)
 			return -1;
 		break;
 	case SHA512SIZEBYTES:
 		shasize = SHA512SIZEBYTES;
 		if(shatype != SHATYPE_SHA512)
 			return -1;
 		break;
 	case SHA1SIZEBYTES:
 		shasize = SHA1SIZEBYTES;
 		if(shatype != SHATYPE_SHA1)
 			return -1;
 		break;
 	default:
 		return -1;
 	};
 
 	int orig_len = stun_get_command_message_len_str(buf, len);
 	if (orig_len < 0)
 		return -1;
 
 	int new_len = (int)((const uint8_t*) sar - buf) + 4 + shasize;
 	if (new_len > orig_len)
 		return -1;
 
 	if (stun_set_command_message_len_str(buf, new_len) < 0)
 		return -1;
 
 	if(ct == TURN_CREDENTIALS_SHORT_TERM) {
 		res = stun_calculate_hmac(buf, (size_t) new_len - 4 - shasize, pwd, strlen((char*)pwd), new_hmac, &shasize, shatype);
 	} else {
 		res = stun_calculate_hmac(buf, (size_t) new_len - 4 - shasize, key, get_hmackey_size(shatype), new_hmac, &shasize, shatype);
 	}
 
 	stun_set_command_message_len_str(buf, orig_len);
 	if(res<0)
 		return -1;
 
 	old_hmac = stun_attr_get_value(sar);
 	if(!old_hmac)
 		return -1;
 
 	if(bcmp(old_hmac,new_hmac,shasize))
 		return 0;
 
 	return +1;
 }
 
 /*
  * Return -1 if failure, 0 if the integrity is not correct, 1 if OK
  */
