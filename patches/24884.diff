commit 570184b9b1aac88ea0f82a13655babe3c730c8f6
Author: Antoine Pitrou <antoine@python.org>
Date:   Fri Aug 14 06:42:05 2020 +0900

    ARROW-9727: [C++] Fix crashes on invalid IPC input (OSS-Fuzz)
    
    Should fix the following issues:
    - https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=24855
    - https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=24866
    
    Closes #7956 from pitrou/ARROW-9727-ipc-oss-fuzz
    
    Authored-by: Antoine Pitrou <antoine@python.org>
    Signed-off-by: Sutou Kouhei <kou@clear-code.com>

diff --git a/cpp/src/arrow/ipc/metadata_internal.cc b/cpp/src/arrow/ipc/metadata_internal.cc
index b24200493..f47a6a3dd 100644
--- a/cpp/src/arrow/ipc/metadata_internal.cc
+++ b/cpp/src/arrow/ipc/metadata_internal.cc
@@ -256,147 +256,146 @@ constexpr int32_t kDecimalBitWidth = 128;
 Status ConcreteTypeFromFlatbuffer(flatbuf::Type type, const void* type_data,
                                   const std::vector<std::shared_ptr<Field>>& children,
                                   std::shared_ptr<DataType>* out) {
   switch (type) {
     case flatbuf::Type::NONE:
       return Status::Invalid("Type metadata cannot be none");
     case flatbuf::Type::Null:
       *out = null();
       return Status::OK();
     case flatbuf::Type::Int:
       return IntFromFlatbuffer(static_cast<const flatbuf::Int*>(type_data), out);
     case flatbuf::Type::FloatingPoint:
       return FloatFromFlatbuffer(static_cast<const flatbuf::FloatingPoint*>(type_data),
                                  out);
     case flatbuf::Type::Binary:
       *out = binary();
       return Status::OK();
     case flatbuf::Type::LargeBinary:
       *out = large_binary();
       return Status::OK();
     case flatbuf::Type::FixedSizeBinary: {
       auto fw_binary = static_cast<const flatbuf::FixedSizeBinary*>(type_data);
-      *out = fixed_size_binary(fw_binary->byteWidth());
-      return Status::OK();
+      return FixedSizeBinaryType::Make(fw_binary->byteWidth()).Value(out);
     }
     case flatbuf::Type::Utf8:
       *out = utf8();
       return Status::OK();
     case flatbuf::Type::LargeUtf8:
       *out = large_utf8();
       return Status::OK();
     case flatbuf::Type::Bool:
       *out = boolean();
       return Status::OK();
     case flatbuf::Type::Decimal: {
       auto dec_type = static_cast<const flatbuf::Decimal*>(type_data);
       if (dec_type->bitWidth() != kDecimalBitWidth) {
         return Status::Invalid("Library only supports 128-bit decimal values");
       }
       return Decimal128Type::Make(dec_type->precision(), dec_type->scale()).Value(out);
     }
     case flatbuf::Type::Date: {
       auto date_type = static_cast<const flatbuf::Date*>(type_data);
       if (date_type->unit() == flatbuf::DateUnit::DAY) {
         *out = date32();
       } else {
         *out = date64();
       }
       return Status::OK();
     }
     case flatbuf::Type::Time: {
       auto time_type = static_cast<const flatbuf::Time*>(type_data);
       TimeUnit::type unit = FromFlatbufferUnit(time_type->unit());
       int32_t bit_width = time_type->bitWidth();
       switch (unit) {
         case TimeUnit::SECOND:
         case TimeUnit::MILLI:
           if (bit_width != 32) {
             return Status::Invalid("Time is 32 bits for second/milli unit");
           }
           *out = time32(unit);
           break;
         default:
           if (bit_width != 64) {
             return Status::Invalid("Time is 64 bits for micro/nano unit");
           }
           *out = time64(unit);
           break;
       }
       return Status::OK();
     }
     case flatbuf::Type::Timestamp: {
       auto ts_type = static_cast<const flatbuf::Timestamp*>(type_data);
       TimeUnit::type unit = FromFlatbufferUnit(ts_type->unit());
       *out = timestamp(unit, StringFromFlatbuffers(ts_type->timezone()));
       return Status::OK();
     }
     case flatbuf::Type::Duration: {
       auto duration = static_cast<const flatbuf::Duration*>(type_data);
       TimeUnit::type unit = FromFlatbufferUnit(duration->unit());
       *out = arrow::duration(unit);
       return Status::OK();
     }
 
     case flatbuf::Type::Interval: {
       auto i_type = static_cast<const flatbuf::Interval*>(type_data);
       switch (i_type->unit()) {
         case flatbuf::IntervalUnit::YEAR_MONTH: {
           *out = month_interval();
           return Status::OK();
         }
         case flatbuf::IntervalUnit::DAY_TIME: {
           *out = day_time_interval();
           return Status::OK();
         }
       }
       return Status::NotImplemented("Unrecognized interval type.");
     }
 
     case flatbuf::Type::List:
       if (children.size() != 1) {
         return Status::Invalid("List must have exactly 1 child field");
       }
       *out = std::make_shared<ListType>(children[0]);
       return Status::OK();
     case flatbuf::Type::LargeList:
       if (children.size() != 1) {
         return Status::Invalid("LargeList must have exactly 1 child field");
       }
       *out = std::make_shared<LargeListType>(children[0]);
       return Status::OK();
     case flatbuf::Type::Map:
       if (children.size() != 1) {
         return Status::Invalid("Map must have exactly 1 child field");
       }
       if (children[0]->nullable() || children[0]->type()->id() != Type::STRUCT ||
           children[0]->type()->num_fields() != 2) {
         return Status::Invalid("Map's key-item pairs must be non-nullable structs");
       }
       if (children[0]->type()->field(0)->nullable()) {
         return Status::Invalid("Map's keys must be non-nullable");
       } else {
         auto map = static_cast<const flatbuf::Map*>(type_data);
         *out = std::make_shared<MapType>(children[0]->type()->field(0)->type(),
                                          children[0]->type()->field(1)->type(),
                                          map->keysSorted());
       }
       return Status::OK();
     case flatbuf::Type::FixedSizeList:
       if (children.size() != 1) {
         return Status::Invalid("FixedSizeList must have exactly 1 child field");
       } else {
         auto fs_list = static_cast<const flatbuf::FixedSizeList*>(type_data);
         *out = std::make_shared<FixedSizeListType>(children[0], fs_list->listSize());
       }
       return Status::OK();
     case flatbuf::Type::Struct_:
       *out = std::make_shared<StructType>(children);
       return Status::OK();
     case flatbuf::Type::Union:
       return UnionFromFlatbuffer(static_cast<const flatbuf::Union*>(type_data), children,
                                  out);
     default:
       return Status::Invalid("Unrecognized type:" +
                              std::to_string(static_cast<int>(type)));
   }
 }
diff --git a/cpp/src/arrow/type.cc b/cpp/src/arrow/type.cc
index 186daace5..5482deacc 100644
--- a/cpp/src/arrow/type.cc
+++ b/cpp/src/arrow/type.cc
@@ -1,46 +1,47 @@
 // Licensed to the Apache Software Foundation (ASF) under one
 // or more contributor license agreements.  See the NOTICE file
 // distributed with this work for additional information
 // regarding copyright ownership.  The ASF licenses this file
 // to you under the Apache License, Version 2.0 (the
 // "License"); you may not use this file except in compliance
 // with the License.  You may obtain a copy of the License at
 //
 //   http://www.apache.org/licenses/LICENSE-2.0
 //
 // Unless required by applicable law or agreed to in writing,
 // software distributed under the License is distributed on an
 // "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 // KIND, either express or implied.  See the License for the
 // specific language governing permissions and limitations
 // under the License.
 
 #include "arrow/type.h"
 
 #include <algorithm>
 #include <climits>
 #include <cstddef>
+#include <limits>
 #include <ostream>
 #include <sstream>  // IWYU pragma: keep
 #include <string>
 #include <unordered_map>
 #include <unordered_set>
 #include <utility>
 #include <vector>
 
 #include "arrow/array.h"
 #include "arrow/chunked_array.h"
 #include "arrow/compare.h"
 #include "arrow/record_batch.h"
 #include "arrow/result.h"
 #include "arrow/status.h"
 #include "arrow/table.h"
 #include "arrow/util/checked_cast.h"
 #include "arrow/util/hash_util.h"
 #include "arrow/util/hashing.h"
 #include "arrow/util/key_value_metadata.h"
 #include "arrow/util/logging.h"
 #include "arrow/util/make_unique.h"
 #include "arrow/util/range.h"
 #include "arrow/util/vector.h"
 #include "arrow/visitor_inline.h"
@@ -465,6 +466,17 @@ std::string LargeStringType::ToString() const { return "large_string"; }
 
 int FixedSizeBinaryType::bit_width() const { return CHAR_BIT * byte_width(); }
 
+Result<std::shared_ptr<DataType>> FixedSizeBinaryType::Make(int32_t byte_width) {
+  if (byte_width < 0) {
+    return Status::Invalid("Negative FixedSizeBinaryType byte width");
+  }
+  if (byte_width > std::numeric_limits<int>::max() / CHAR_BIT) {
+    // bit_width() would overflow
+    return Status::Invalid("byte width of FixedSizeBinaryType too large");
+  }
+  return std::make_shared<FixedSizeBinaryType>(byte_width);
+}
+
 std::string FixedSizeBinaryType::ToString() const {
   std::stringstream ss;
   ss << "fixed_size_binary[" << byte_width_ << "]";
diff --git a/cpp/src/arrow/type.h b/cpp/src/arrow/type.h
index e2532d248..e67cf2847 100644
--- a/cpp/src/arrow/type.h
+++ b/cpp/src/arrow/type.h
@@ -790,31 +790,34 @@ class ARROW_EXPORT LargeStringType : public LargeBinaryType {
 /// \brief Concrete type class for fixed-size binary data
 class ARROW_EXPORT FixedSizeBinaryType : public FixedWidthType, public ParametricType {
  public:
   static constexpr Type::type type_id = Type::FIXED_SIZE_BINARY;
   static constexpr bool is_utf8 = false;
 
   static constexpr const char* type_name() { return "fixed_size_binary"; }
 
   explicit FixedSizeBinaryType(int32_t byte_width)
       : FixedWidthType(Type::FIXED_SIZE_BINARY), byte_width_(byte_width) {}
   explicit FixedSizeBinaryType(int32_t byte_width, Type::type override_type_id)
       : FixedWidthType(override_type_id), byte_width_(byte_width) {}
 
   std::string ToString() const override;
   std::string name() const override { return "fixed_size_binary"; }
 
   DataTypeLayout layout() const override {
     return DataTypeLayout(
         {DataTypeLayout::Bitmap(), DataTypeLayout::FixedWidth(byte_width())});
   }
 
   int32_t byte_width() const { return byte_width_; }
   int bit_width() const override;
 
+  // Validating constructor
+  static Result<std::shared_ptr<DataType>> Make(int32_t byte_width);
+
  protected:
   std::string ComputeFingerprint() const override;
 
   int32_t byte_width_;
 };
 
 /// \brief Concrete type class for struct data
diff --git a/testing b/testing
index f552c4dcd..ef4ece6f1 160000
--- a/testing
+++ b/testing
@@ -1 +1 @@
-Subproject commit f552c4dcd2ae3d14048abd20919748cce5276ade
+Subproject commit ef4ece6f1dddf6abb71ed429724adde330a4b78f
