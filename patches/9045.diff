commit 7f5252fc1806867fbedee461551c9521b5078c24
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Sat Jun 23 13:25:29 2018 +0200

    RMF: fix nullpointer dereference on corrupted JPEG stream. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=9045. Credit to OSS Fuzz

diff --git a/gdal/frmts/rmf/rmfjpeg.cpp b/gdal/frmts/rmf/rmfjpeg.cpp
index 07d0172cbb..68f05728e9 100644
--- a/gdal/frmts/rmf/rmfjpeg.cpp
+++ b/gdal/frmts/rmf/rmfjpeg.cpp
@@ -77,17 +77,27 @@ static void RMFJPEGNoop(j_decompress_ptr)
 /**
 *\brief: This function is supposed to do refilling of the input buffer,
 * but as we provided everything at the beginning, if it is called, then
 * we have an error.
 */
 static boolean RMFJPEG_fill_input_buffer_dec(j_decompress_ptr cinfo)
 {
     CPLError(CE_Failure, CPLE_AppDefined, "Invalid JPEG stream");
     cinfo->err->msg_code = JERR_INPUT_EMPTY;
     cinfo->err->error_exit((j_common_ptr)(cinfo));
     return FALSE;
 }
 
+// Might be called if there is a marker in the codestream
+static void RMFJPEG_skip_input_data_dec(j_decompress_ptr cinfo, long l) {
+    struct jpeg_source_mgr *src = cinfo->src;
+    if (l > 0) {
+        if (static_cast<size_t>(l) > src->bytes_in_buffer)
+            l = static_cast<long>(src->bytes_in_buffer);
+        src->bytes_in_buffer -= l;
+        src->next_input_byte += l;
+    }
+}
 
 /************************************************************************/
 /*                          JPEGDecompress()                            */
 /************************************************************************/
@@ -95,124 +105,125 @@ static boolean RMFJPEG_fill_input_buffer_dec(j_decompress_ptr cinfo)
 int RMFDataset::JPEGDecompress(const GByte* pabyIn, GUInt32 nSizeIn,
                                GByte* pabyOut, GUInt32 nSizeOut,
                                GUInt32 nRawXSize, GUInt32 nRawYSize)
 {
     if(pabyIn == nullptr ||
        pabyOut == nullptr ||
        nSizeOut < nSizeIn ||
        nSizeIn < 2)
        return 0;
 
     jpeg_decompress_struct  oJpegInfo;
     jpeg_source_mgr         oSrc;
     jpeg_error_mgr          oJpegErr;
     jmp_buf                 oJmpBuf;
 
     oJpegInfo.err = jpeg_std_error(&oJpegErr);
     oJpegErr.error_exit = RMFJPEGError;
     oJpegErr.emit_message = RMFJPEGMessage;
     oJpegInfo.client_data = reinterpret_cast<void*>(&oJmpBuf);
 
     memset(&oSrc, 0, sizeof(jpeg_source_mgr));
 
     oSrc.next_input_byte = (JOCTET *)pabyIn;
     oSrc.bytes_in_buffer = (size_t)nSizeIn;
     oSrc.term_source = RMFJPEGNoop;
     oSrc.init_source = RMFJPEGNoop;
     oSrc.fill_input_buffer = RMFJPEG_fill_input_buffer_dec;
+    oSrc.skip_input_data = RMFJPEG_skip_input_data_dec;
 
     jpeg_create_decompress(&oJpegInfo);
 
     memset(&oJmpBuf, 0, sizeof(jmp_buf));
 
     if(setjmp(oJmpBuf))
     {
         CPLError(CE_Failure, CPLE_AppDefined,
                  "RMF JPEG: Error decompress JPEG tile");
         jpeg_destroy_decompress(&oJpegInfo);
         return 0;
     }
 
     oJpegInfo.src = &oSrc;
     jpeg_read_header(&oJpegInfo, TRUE);
 
     if(oJpegInfo.num_components != RMF_JPEG_BAND_COUNT)
     {
         CPLError(CE_Failure, CPLE_AppDefined,
                  "RMF JPEG: Invalid num_components %d in tile, must be %d",
                  (int)oJpegInfo.num_components, (int)RMF_JPEG_BAND_COUNT);
         jpeg_destroy_decompress(&oJpegInfo);
         return 0;
     }
 
     oJpegInfo.dct_method = JDCT_FLOAT;
     oJpegInfo.out_color_space = JCS_RGB;
 
     jpeg_start_decompress(&oJpegInfo);
 
     JDIMENSION  nImageHeight = std::min(oJpegInfo.image_height,
                                         (JDIMENSION)nRawYSize);
     int         nRawScanLineSize = nRawXSize *
                                    oJpegInfo.num_components;
     GByte*      pabyScanline = nullptr;
 
     if((JDIMENSION)nRawXSize < oJpegInfo.image_width)
     {
         pabyScanline = reinterpret_cast<GByte *>(
                 VSIMalloc(oJpegInfo.num_components*
                           oJpegInfo.image_width));
         if(!pabyScanline)
         {
             CPLError( CE_Failure, CPLE_OutOfMemory,
                       "Can't allocate scanline buffer %d.",
                       (int)oJpegInfo.num_components*
                       oJpegInfo.image_width);
             jpeg_destroy_decompress(&oJpegInfo);
             return 0;
         }
     }
 
     if(setjmp(oJmpBuf))
     {
         CPLError(CE_Failure, CPLE_AppDefined,
                  "RMF JPEG: Error decompress JPEG tile");
         jpeg_destroy_decompress(&oJpegInfo);
         VSIFree(pabyScanline);
         return 0;
     }
 
     while(oJpegInfo.output_scanline < nImageHeight)
     {
         JSAMPROW    pabyBuffer[1];
 
         if(pabyScanline)
         {
             pabyBuffer[0] = (JSAMPROW)pabyScanline;
         }
         else
         {
             pabyBuffer[0] = (JSAMPROW)pabyOut +
                             nRawScanLineSize*oJpegInfo.output_scanline;
         }
 
         if(jpeg_read_scanlines(&oJpegInfo, pabyBuffer, 1) == 0)
         {
             jpeg_destroy_decompress(&oJpegInfo);
             VSIFree(pabyScanline);
             return 0;
         }
 
         if(pabyScanline)
         {
             memcpy(pabyOut + nRawScanLineSize*(oJpegInfo.output_scanline - 1),
                    pabyScanline, nRawScanLineSize);
         }
     }
     jpeg_finish_decompress(&oJpegInfo);
     jpeg_destroy_decompress(&oJpegInfo);
 
     VSIFree(pabyScanline);
 
     return oJpegInfo.output_scanline*nRawScanLineSize;
 }
 
 #endif //HAVE_LIBJPEG
