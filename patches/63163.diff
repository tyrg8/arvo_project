commit 83b9129bd3cfc6ac57d5554e015c3df85f5076dc
Author: Jakub Jelen <jjelen@redhat.com>
Date:   Wed Oct 11 08:57:45 2023 +0200

    iassecc: Verify buffer lengths before use
    
    Thanks oss-fuzz
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=63163

diff --git a/src/libopensc/iasecc-sdo.c b/src/libopensc/iasecc-sdo.c
index 3eeb03b9..a6e6c267 100644
--- a/src/libopensc/iasecc-sdo.c
+++ b/src/libopensc/iasecc-sdo.c
@@ -36,7 +36,7 @@
 #include "iasecc.h"
 #include "iasecc-sdo.h"
 
-static int iasecc_parse_size(unsigned char *data, size_t *out);
+static int iasecc_parse_size(unsigned char *data, size_t data_len, size_t *out);
 
 
 static int
@@ -324,118 +324,125 @@ int
 iasecc_se_parse(struct sc_card *card, unsigned char *data, size_t data_len, struct iasecc_se_info *se)
 {
 	struct sc_context *ctx = card->ctx;
 	size_t size, offs, size_size;
 	int rv;
 
 	LOG_FUNC_CALLED(ctx);
 
 	if (*data == IASECC_SDO_TEMPLATE_TAG)   {
-		size_size = iasecc_parse_size(data + 1, &size);
+		size_size = iasecc_parse_size(data + 1, data_len - 1, &size);
 		LOG_TEST_RET(ctx, size_size, "parse error: invalid size data of IASECC_SDO_TEMPLATE");
 
 		data += size_size + 1;
 		data_len = size;
 		sc_log(ctx,
 		       "IASECC_SDO_TEMPLATE: size %"SC_FORMAT_LEN_SIZE_T"u, size_size %"SC_FORMAT_LEN_SIZE_T"u",
 		       size, size_size);
 
 		if (*data != IASECC_SDO_TAG_HEADER)
 			LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
 
 		if ((*(data + 1) & 0x7F) != IASECC_SDO_CLASS_SE)
 			 LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
 
-		size_size = iasecc_parse_size(data + 3, &size);
+		size_size = iasecc_parse_size(data + 3, data_len - 3, &size);
 		LOG_TEST_RET(ctx, size_size, "parse error: invalid SDO SE data size");
 
 		if (data_len != size + size_size + 3)
 			LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "parse error: invalid SDO SE data size");
 
 		data += 3 + size_size;
 		data_len = size;
 		sc_log(ctx,
 		       "IASECC_SDO_TEMPLATE SE: size %"SC_FORMAT_LEN_SIZE_T"u, size_size %"SC_FORMAT_LEN_SIZE_T"u",
 		       size, size_size);
 	}
 
 	if (*data != IASECC_SDO_CLASS_SE)   {
 		sc_log(ctx,
 		       "Invalid SE tag 0x%X; data length %"SC_FORMAT_LEN_SIZE_T"u",
 		       *data, data_len);
 		LOG_FUNC_RETURN(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED);
 	}
 
-	size_size = iasecc_parse_size(data + 1, &size);
+	size_size = iasecc_parse_size(data + 1, data_len - 1, &size);
 	LOG_TEST_RET(ctx, size_size, "parse error: invalid size data");
 
 	if (data_len != size + size_size + 1)
 		LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "parse error: invalid SE data size");
 
 	offs = 1 + size_size;
 	for (; offs < data_len;)   {
 		rv = iasecc_crt_parse(card, data + offs, data_len - offs, se);
 		LOG_TEST_RET(ctx, rv, "parse error: invalid SE data");
 
 		offs += rv;
 	}
 
 	if (offs != data_len)
 		LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "parse error: not totally parsed");
 
 	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
 }
 
 
 static int
-iasecc_parse_size(unsigned char *data, size_t *out)
+iasecc_parse_size(unsigned char *data, size_t data_len, size_t *out)
 {
-	if (*data < 0x80)   {
+	if (*data < 0x80 && data_len > 0) {
 		*out = *data;
 		return 1;
 	}
-	else if (*data == 0x81)   {
+	else if (*data == 0x81 && data_len > 1) {
 		*out = *(data + 1);
 		return 2;
 	}
-	else if (*data == 0x82)   {
+	else if (*data == 0x82 && data_len > 2) {
 		*out = *(data + 1) * 0x100 + *(data + 2);
 		return 3;
 	}
 
 	return SC_ERROR_INVALID_DATA;
 }
 
 
 static int
-iasecc_parse_get_tlv(struct sc_card *card, unsigned char *data, struct iasecc_extended_tlv *tlv)
+iasecc_parse_get_tlv(struct sc_card *card, unsigned char *data, size_t data_len, struct iasecc_extended_tlv *tlv)
 {
 	struct sc_context *ctx = card->ctx;
 	size_t size_len, tag_len;
 
 	memset(tlv, 0, sizeof(*tlv));
 	sc_log(ctx, "iasecc_parse_get_tlv() called for tag 0x%X", *data);
+	if (data_len < 1)
+		LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
 	if ((*data == 0x7F) || (*data == 0x5F))   {
+		if (data_len < 2)
+			LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
 		tlv->tag = *data * 0x100 + *(data + 1);
 		tag_len = 2;
 	}
 	else   {
 		tlv->tag = *data;
 		tag_len = 1;
 	}
 
 	sc_log(ctx, "iasecc_parse_get_tlv() tlv->tag 0x%X", tlv->tag);
-	size_len = iasecc_parse_size(data + tag_len, &tlv->size);
+	size_len = iasecc_parse_size(data + tag_len, data_len - tag_len, &tlv->size);
 	LOG_TEST_RET(ctx, size_len, "parse error: invalid size data");
+	if (tag_len + size_len + tlv->size > data_len) {
+		LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
+	}
 
 	tlv->value = calloc(1, tlv->size);
 	if (!tlv->value)
 		LOG_FUNC_RETURN(ctx, SC_ERROR_OUT_OF_MEMORY);
 	memcpy(tlv->value, data + size_len + tag_len, tlv->size);
 
 	tlv->on_card = 1;
 
 	sc_log(ctx,
 	       "iasecc_parse_get_tlv() parsed %"SC_FORMAT_LEN_SIZE_T"u bytes",
 	       tag_len + size_len + tlv->size);
 	return tag_len + size_len + tlv->size;
 }
@@ -445,31 +452,31 @@ static int
 iasecc_parse_chv(struct sc_card *card, unsigned char *data, size_t data_len, struct iasecc_sdo_chv *chv)
 {
 	struct sc_context *ctx = card->ctx;
 	size_t offs = 0;
 	int rv;
 
 	LOG_FUNC_CALLED(ctx);
 	while(offs < data_len)   {
 		struct iasecc_extended_tlv tlv;
 
-		rv = iasecc_parse_get_tlv(card, data + offs, &tlv);
+		rv = iasecc_parse_get_tlv(card, data + offs, data_len - offs, &tlv);
 		LOG_TEST_RET(ctx, rv, "iasecc_parse_chv() get and parse TLV error");
 
 		sc_log(ctx,
 		       "iasecc_parse_chv() get and parse TLV returned %i; tag %X; size %"SC_FORMAT_LEN_SIZE_T"u",
 		       rv, tlv.tag, tlv.size);
 
 		if (tlv.tag == IASECC_SDO_CHV_TAG_SIZE_MAX)
 			chv->size_max = tlv;
 		else if (tlv.tag == IASECC_SDO_CHV_TAG_SIZE_MIN)
 			chv->size_min = tlv;
 		else if (tlv.tag == IASECC_SDO_CHV_TAG_VALUE)
 			chv->value = tlv;
 		else
 			LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "parse error: non CHV SDO tag");
 
 		offs += rv;
 	}
 
 	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
 }
@@ -479,27 +486,27 @@ static int
 iasecc_parse_prvkey(struct sc_card *card, unsigned char *data, size_t data_len, struct iasecc_sdo_prvkey *prvkey)
 {
 	struct sc_context *ctx = card->ctx;
 	size_t offs = 0;
 	int rv;
 
 	LOG_FUNC_CALLED(ctx);
 	while(offs < data_len)   {
 		struct iasecc_extended_tlv tlv;
 
-		rv = iasecc_parse_get_tlv(card, data + offs, &tlv);
+		rv = iasecc_parse_get_tlv(card, data + offs, data_len - offs, &tlv);
 		LOG_TEST_RET(ctx, rv, "iasecc_parse_prvkey() get and parse TLV error");
 
 		sc_log(ctx,
 		       "iasecc_parse_prvkey() get and parse TLV returned %i; tag %X; size %"SC_FORMAT_LEN_SIZE_T"u",
 		       rv, tlv.tag, tlv.size);
 
 		if (tlv.tag == IASECC_SDO_PRVKEY_TAG_COMPULSORY)
 			prvkey->compulsory = tlv;
 		else
 			LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "parse error: non PrvKey SDO tag");
 
 		offs += rv;
 	}
 
 	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
 }
@@ -509,35 +516,35 @@ static int
 iasecc_parse_pubkey(struct sc_card *card, unsigned char *data, size_t data_len, struct iasecc_sdo_pubkey *pubkey)
 {
 	struct sc_context *ctx = card->ctx;
 	size_t offs = 0;
 	int rv;
 
 	LOG_FUNC_CALLED(ctx);
 	while(offs < data_len)   {
 		struct iasecc_extended_tlv tlv;
 
-		rv = iasecc_parse_get_tlv(card, data + offs, &tlv);
+		rv = iasecc_parse_get_tlv(card, data + offs, data_len - offs, &tlv);
 		LOG_TEST_RET(ctx, rv, "iasecc_parse_pubkey() get and parse TLV error");
 
 		sc_log(ctx,
 		       "iasecc_parse_pubkey() get and parse TLV returned %i; tag %X; size %"SC_FORMAT_LEN_SIZE_T"u",
 		       rv, tlv.tag, tlv.size);
 
 		if (tlv.tag == IASECC_SDO_PUBKEY_TAG_N)
 			pubkey->n = tlv;
 		else if (tlv.tag == IASECC_SDO_PUBKEY_TAG_E)
 			pubkey->e = tlv;
 		else if (tlv.tag == IASECC_SDO_PUBKEY_TAG_CHR)
 			pubkey->chr = tlv;
 		else if (tlv.tag == IASECC_SDO_PUBKEY_TAG_CHA)
 			pubkey->cha = tlv;
 		else if (tlv.tag == IASECC_SDO_PUBKEY_TAG_COMPULSORY)
 			pubkey->compulsory = tlv;
 		else
 			LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "parse error: non PubKey SDO tag");
 
 		offs += rv;
 	}
 
 	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
 }
@@ -547,29 +554,29 @@ static int
 iasecc_parse_keyset(struct sc_card *card, unsigned char *data, size_t data_len, struct iasecc_sdo_keyset *keyset)
 {
 	struct sc_context *ctx = card->ctx;
 	size_t offs = 0;
 	int rv;
 
 	LOG_FUNC_CALLED(ctx);
 	while(offs < data_len)   {
 		struct iasecc_extended_tlv tlv;
 
-		rv = iasecc_parse_get_tlv(card, data + offs, &tlv);
+		rv = iasecc_parse_get_tlv(card, data + offs, data_len - offs, &tlv);
 		LOG_TEST_RET(ctx, rv, "iasecc_parse_keyset() get and parse TLV error");
 
 		sc_log(ctx,
 		       "iasecc_parse_prvkey() get and parse TLV returned %i; tag %X; size %"SC_FORMAT_LEN_SIZE_T"u",
 		       rv, tlv.tag, tlv.size);
 
 		if (tlv.tag == IASECC_SDO_KEYSET_TAG_COMPULSORY)
 			keyset->compulsory = tlv;
 		else {
 			free(tlv.value);
 			LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "parse error: non KeySet SDO tag");
 		}
 
 		offs += rv;
 	}
 
 	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
 }
@@ -579,147 +586,147 @@ static int
 iasecc_parse_docp(struct sc_card *card, unsigned char *data, size_t data_len, struct iasecc_sdo *sdo)
 {
 	struct sc_context *ctx = card->ctx;
 	size_t offs = 0;
 	int rv;
 
 	LOG_FUNC_CALLED(ctx);
 	while(offs < data_len)   {
 		struct iasecc_extended_tlv tlv;
 
-		rv = iasecc_parse_get_tlv(card, data + offs, &tlv);
+		rv = iasecc_parse_get_tlv(card, data + offs, data_len - offs, &tlv);
 		LOG_TEST_RET(ctx, rv, "iasecc_parse_get_tlv() get and parse TLV error");
 
 		sc_log(ctx,
 		       "iasecc_parse_docp() parse_get_tlv returned %i; tag %X; size %"SC_FORMAT_LEN_SIZE_T"u",
 		       rv, tlv.tag, tlv.size);
 
 		if (tlv.tag == IASECC_DOCP_TAG_ACLS)   {
 			int _rv = iasecc_parse_docp(card, tlv.value, tlv.size, sdo);
 			free(tlv.value);
 			LOG_TEST_RET(ctx, _rv, "parse error: cannot parse DOCP");
 		}
 		else if (tlv.tag == IASECC_DOCP_TAG_ACLS_CONTACT)   {
 			sdo->docp.acls_contact = tlv;
 		}
 		else if (tlv.tag == IASECC_DOCP_TAG_ACLS_CONTACTLESS)   {
 			sdo->docp.acls_contactless = tlv;
 		}
 		else if (tlv.tag == IASECC_DOCP_TAG_SIZE)   {
 			sdo->docp.size = tlv;
 		}
 		else if (tlv.tag == IASECC_DOCP_TAG_NAME)   {
 			sdo->docp.name = tlv;
 		}
 		else if (tlv.tag == IASECC_DOCP_TAG_ISSUER_DATA)   {
 			sdo->docp.issuer_data = tlv;
 		}
 		else if (tlv.tag == IASECC_DOCP_TAG_NON_REPUDIATION)   {
 			sdo->docp.non_repudiation = tlv;
 		}
 		else if (tlv.tag == IASECC_DOCP_TAG_USAGE_REMAINING)   {
 			sdo->docp.usage_remaining = tlv;
 		}
 		else if (tlv.tag == IASECC_DOCP_TAG_TRIES_MAXIMUM)   {
 			sdo->docp.tries_maximum = tlv;
 		}
 		else if (tlv.tag == IASECC_DOCP_TAG_TRIES_REMAINING)   {
 			sdo->docp.tries_remaining = tlv;
 		}
 		else   {
 			free(tlv.value);
 			LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "iasecc_parse_get_tlv() parse error: non DOCP tag");
 		}
 
 		offs += rv;
 	}
 
 	rv = iasecc_parse_acls(card, &sdo->docp, 0);
 	LOG_TEST_RET(ctx, rv, "Cannot parse ACLs in DOCP");
 
 	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
 }
 
 
 static int
-iasecc_sdo_parse_data(struct sc_card *card, unsigned char *data, struct iasecc_sdo *sdo)
+iasecc_sdo_parse_data(struct sc_card *card, unsigned char *data, size_t data_len, struct iasecc_sdo *sdo)
 {
 	struct sc_context *ctx = card->ctx;
 	struct iasecc_extended_tlv tlv;
 	int tlv_size, rv;
 
 	LOG_FUNC_CALLED(ctx);
 	sc_log(ctx, "iasecc_sdo_parse_data() class %X; ref %X", sdo->sdo_class, sdo->sdo_ref);
 
-	tlv_size = iasecc_parse_get_tlv(card, data, &tlv);
+	tlv_size = iasecc_parse_get_tlv(card, data, data_len, &tlv);
 	LOG_TEST_RET(ctx, tlv_size, "parse error: get TLV");
 
 	sc_log(ctx, "iasecc_sdo_parse_data() tlv.tag 0x%X", tlv.tag);
 	if (tlv.tag == IASECC_DOCP_TAG)   {
 		sc_log(ctx,
 		       "iasecc_sdo_parse_data() parse IASECC_DOCP_TAG: 0x%X; size %"SC_FORMAT_LEN_SIZE_T"u",
 		       tlv.tag, tlv.size);
 		rv = iasecc_parse_docp(card, tlv.value, tlv.size, sdo);
 		sc_log(ctx, "iasecc_sdo_parse_data() parsed IASECC_DOCP_TAG rv %i", rv);
 		free(tlv.value);
 		LOG_TEST_RET(ctx, rv, "parse error: cannot parse DOCP");
 	}
 	else if (tlv.tag == IASECC_DOCP_TAG_NON_REPUDIATION)   {
 		sdo->docp.non_repudiation = tlv;
 	}
 	else if (tlv.tag == IASECC_DOCP_TAG_USAGE_REMAINING)   {
 		sdo->docp.usage_remaining = tlv;
 	}
 	else if (tlv.tag == IASECC_DOCP_TAG_TRIES_MAXIMUM)   {
 		sdo->docp.tries_maximum = tlv;
 	}
 	else if (tlv.tag == IASECC_DOCP_TAG_TRIES_REMAINING)   {
 		sdo->docp.tries_remaining = tlv;
 	}
 	else if (tlv.tag == IASECC_SDO_CHV_TAG)   {
 		if (sdo->sdo_class != IASECC_SDO_CLASS_CHV) {
 			free(tlv.value);
 			LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "parse error: IASECC_SDO_CHV_TAG tag in non User CHV SDO");
 		}
 
 		rv = iasecc_parse_chv(card, tlv.value, tlv.size, &sdo->data.chv);
 		free(tlv.value);
 		LOG_TEST_RET(ctx, rv, "parse error: cannot parse SDO CHV data");
 	}
 	else if (tlv.tag == IASECC_SDO_PUBKEY_TAG)   {
 		if (sdo->sdo_class != IASECC_SDO_CLASS_RSA_PUBLIC) {
 			free(tlv.value);
 			LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "parse error: SDO_PUBLIC_KEY tag in non PUBLIC_KEY SDO");
 		}
 
 		rv = iasecc_parse_pubkey(card, tlv.value, tlv.size, &sdo->data.pub_key);
 		free(tlv.value);
 		LOG_TEST_RET(ctx, rv, "parse error: cannot parse SDO PUBLIC KEY data");
 	}
 	else if (tlv.tag == IASECC_SDO_PRVKEY_TAG)   {
 		if (sdo->sdo_class != IASECC_SDO_CLASS_RSA_PRIVATE) {
 			free(tlv.value);
 			LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "parse error: SDO_PRIVATE_KEY tag in non PRIVATE_KEY SDO");
 		}
 
 		rv = iasecc_parse_prvkey(card, tlv.value, tlv.size, &sdo->data.prv_key);
 		free(tlv.value);
 		LOG_TEST_RET(ctx, rv, "parse error: cannot parse SDO PRIVATE KEY data");
 	}
 	else if (tlv.tag == IASECC_SDO_KEYSET_TAG)   {
 		if (sdo->sdo_class != IASECC_SDO_CLASS_KEYSET) {
 			free(tlv.value);
 			LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "parse error: SDO_KEYSET tag in non KEYSET SDO");
 		}
 
 		rv = iasecc_parse_keyset(card, tlv.value, tlv.size, &sdo->data.keyset);
 		free(tlv.value);
 		LOG_TEST_RET(ctx, rv, "parse error: cannot parse SDO KEYSET data");
 	}
 	else   {
 		sc_log(ctx, "iasecc_sdo_parse_data() non supported tag 0x%X", tlv.tag);
 		free(tlv.value);
 		LOG_FUNC_RETURN(ctx, SC_ERROR_NOT_SUPPORTED);
 	}
 
 	return tlv_size;
 }
@@ -729,55 +736,55 @@ int
 iasecc_sdo_parse(struct sc_card *card, unsigned char *data, size_t data_len, struct iasecc_sdo *sdo)
 {
 	struct sc_context *ctx = card->ctx;
 	size_t size, offs, size_size;
 	int rv;
 
 	LOG_FUNC_CALLED(ctx);
 
 	if (*data == IASECC_SDO_TEMPLATE_TAG)   {
-		size_size = iasecc_parse_size(data + 1, &size);
+		size_size = iasecc_parse_size(data + 1, data_len - 1, &size);
 		LOG_TEST_RET(ctx, size_size, "parse error: invalid size data of IASECC_SDO_TEMPLATE");
 
 		data += size_size + 1;
 		data_len = size;
 		sc_log(ctx,
 		       "IASECC_SDO_TEMPLATE: size %"SC_FORMAT_LEN_SIZE_T"u, size_size %"SC_FORMAT_LEN_SIZE_T"u",
 		       size, size_size);
 	}
 
 	if (*data != IASECC_SDO_TAG_HEADER)
 		LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
 
 	if (sdo->sdo_class != (*(data + 1) & 0x7F))
 		LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
 
 	if (sdo->sdo_ref != (*(data + 2) & 0x3F))
 		LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
 
-	size_size = iasecc_parse_size(data + 3, &size);
+	size_size = iasecc_parse_size(data + 3, data_len - 3, &size);
 	LOG_TEST_RET(ctx, size_size, "parse error: invalid size data");
 
 	if (data_len != size + size_size + 3)
 		LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "parse error: invalid SDO data size");
 
 	sc_log(ctx,
 	       "sz %"SC_FORMAT_LEN_SIZE_T"u, sz_size %"SC_FORMAT_LEN_SIZE_T"u",
 	       size, size_size);
 
 	offs = 3 + size_size;
 	for (; offs < data_len;)   {
-		rv = iasecc_sdo_parse_data(card, data + offs, sdo);
+		rv = iasecc_sdo_parse_data(card, data + offs, data_len - offs, sdo);
 		LOG_TEST_RET(ctx, rv, "parse error: invalid SDO data");
 
 		offs += rv;
 	}
 
 	if (offs != data_len)
 		LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "parse error: not totally parsed");
 
 	sc_log(ctx,
 	       "docp.acls_contact.size %"SC_FORMAT_LEN_SIZE_T"u, docp.size.size %"SC_FORMAT_LEN_SIZE_T"u",
 	       sdo->docp.acls_contact.size, sdo->docp.size.size);
 
 	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
 }
@@ -787,55 +794,55 @@ int
 iasecc_sdo_allocate_and_parse(struct sc_card *card, unsigned char *data, size_t data_len,
 		struct iasecc_sdo **out)
 {
 	struct sc_context *ctx = card->ctx;
 	struct iasecc_sdo *sdo = NULL;
 	size_t size, offs, size_size;
 	int rv;
 
 	LOG_FUNC_CALLED(ctx);
 
 	if (*data != IASECC_SDO_TAG_HEADER)
 		LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
 
 	if (data_len < 3)
 		LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
 
 	sdo = calloc(1, sizeof(struct iasecc_sdo));
 	if (!sdo)
 		return SC_ERROR_OUT_OF_MEMORY;
 	*out = sdo;
 
 	sdo->sdo_class = *(data + 1) & 0x7F;
 	sdo->sdo_ref = *(data + 2) & 0x3F;
 
 	sc_log(ctx, "sdo_class 0x%X, sdo_ref 0x%X", sdo->sdo_class, sdo->sdo_ref);
 	if (data_len == 3)
 		LOG_FUNC_RETURN(ctx, SC_SUCCESS);
 
-	size_size = iasecc_parse_size(data + 3, &size);
+	size_size = iasecc_parse_size(data + 3, data_len - 3, &size);
 	LOG_TEST_RET(ctx, size_size, "parse error: invalid size data");
 
 	if (data_len != size + size_size + 3)
 		LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "parse error: invalid SDO data size");
 
 	sc_log(ctx,
 	       "sz %"SC_FORMAT_LEN_SIZE_T"u, sz_size %"SC_FORMAT_LEN_SIZE_T"u",
 	       size, size_size);
 
 	offs = 3 + size_size;
 	for (; offs < data_len;)   {
-		rv = iasecc_sdo_parse_data(card, data + offs, sdo);
+		rv = iasecc_sdo_parse_data(card, data + offs, data_len - offs, sdo);
 		LOG_TEST_RET(ctx, rv, "parse error: invalid SDO data");
 
 		offs += rv;
 	}
 
 	if (offs != data_len)
 		LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "parse error: not totally parsed");
 
 	sc_log(ctx,
 	       "docp.acls_contact.size %"SC_FORMAT_LEN_SIZE_T"u; docp.size.size %"SC_FORMAT_LEN_SIZE_T"u",
 	       sdo->docp.acls_contact.size, sdo->docp.size.size);
 
 	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
 }
@@ -1213,52 +1220,52 @@ int
 iasecc_sdo_parse_card_answer(struct sc_context *ctx, unsigned char *data, size_t data_len,
 	struct iasecc_sm_card_answer *out)
 {
 	int have_mac = 0, have_status = 0;
 	size_t size = 0, size_size, offs;
 
 	LOG_FUNC_CALLED(ctx);
 	if (!data || !data_len || !out)
 		LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_ARGUMENTS);
 
 	memset(out, 0, sizeof(*out));
 	for (offs=0; offs<data_len; )   {
-		size_size = iasecc_parse_size(data + 1, &size);
+		size_size = iasecc_parse_size(data + 1, data_len - 1, &size);
 
 		if (*(data + offs) == IASECC_CARD_ANSWER_TAG_DATA )   {
 			if (size > sizeof(out->data))
 				LOG_TEST_RET(ctx, SC_ERROR_BUFFER_TOO_SMALL, "iasecc_sm_decode_answer() unbelievable !!!");
 
 			memcpy(out->data, data + offs + size_size + 1, size);
 			out->data_len = size;
 			offs += 1 + size_size + size;
 		}
 		else if (*(data + offs) == IASECC_CARD_ANSWER_TAG_SW )   {
 			if (*(data + offs + 1) != 2)
 				LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "iasecc_sm_decode_answer() SW length not 2");
 			out->sw = *(data + offs + 2) * 0x100 + *(data + offs + 3);
 
 			memcpy(out->ticket, data + offs, 4);
 
 			offs += 4;
 			have_status = 1;
 		}
 		else if (*(data + offs) == IASECC_CARD_ANSWER_TAG_MAC )   {
 			if (*(data + offs + 1) != 8)
 				LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "iasecc_sm_decode_answer() MAC length not 8");
 			memcpy(out->mac, data + offs + 2, 8);
 
 			memcpy(out->ticket + 4, data + offs, 10);
 
 			offs += 10;
 			have_mac = 1;
 		}
 		else   {
 			LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "iasecc_sm_decode_answer() invalid card answer tag");
 		}
 	}
 
 	if (!have_mac || !have_status)
 		LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "iasecc_sm_decode_answer() absent MAC or SW ");
 
 	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
 }
@@ -1291,47 +1298,47 @@ int
 iasecc_docp_copy(struct sc_context *ctx, struct iasecc_sdo_docp *in, struct iasecc_sdo_docp *out)
 {
 	int rv;
 
 	LOG_FUNC_CALLED(ctx);
-	if (!in || !out) 
+	if (!in || !out)
 		LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_ARGUMENTS);
 
 	memset(out, 0, sizeof(struct iasecc_sdo_docp));
 
 	rv = iasecc_tlv_copy(ctx, &in->name, &out->name);
 	LOG_TEST_RET(ctx, rv, "TLV copy error");
 
 	rv = iasecc_tlv_copy(ctx, &in->tries_maximum, &out->tries_maximum);
 	LOG_TEST_RET(ctx, rv, "TLV copy error");
 
 	rv = iasecc_tlv_copy(ctx, &in->tries_remaining, &out->tries_remaining);
 	LOG_TEST_RET(ctx, rv, "TLV copy error");
 
 	rv = iasecc_tlv_copy(ctx, &in->usage_maximum, &out->usage_maximum);
 	LOG_TEST_RET(ctx, rv, "TLV copy error");
 
 	rv = iasecc_tlv_copy(ctx, &in->usage_remaining, &out->usage_remaining);
 	LOG_TEST_RET(ctx, rv, "TLV copy error");
 
 	rv = iasecc_tlv_copy(ctx, &in->non_repudiation, &out->non_repudiation);
 	LOG_TEST_RET(ctx, rv, "TLV copy error");
 
 	rv = iasecc_tlv_copy(ctx, &in->size, &out->size);
 	LOG_TEST_RET(ctx, rv, "TLV copy error");
 
 	rv = iasecc_tlv_copy(ctx, &in->acls_contact, &out->acls_contact);
 	LOG_TEST_RET(ctx, rv, "TLV copy error");
 
 	rv = iasecc_tlv_copy(ctx, &in->acls_contactless, &out->acls_contactless);
 	LOG_TEST_RET(ctx, rv, "TLV copy error");
 
 	out->amb = in->amb;
 	memcpy(out->scbs, in->scbs, sizeof(out->scbs));
 
 	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
 }
 
 #else
 
 /* we need to define the functions below to export them */
 #include "errors.h"
