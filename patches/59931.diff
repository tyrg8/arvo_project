commit 5cb0c7463b8b7d6e2712c9038966aa1a26064e15
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Tue Jun 20 07:03:29 2023 +0900

    array.c (mrb_ary_to_s): add recursive check to Array#inspect

diff --git a/mrblib/array.rb b/mrblib/array.rb
index af3c17cb6..6c2b6cfee 100644
--- a/mrblib/array.rb
+++ b/mrblib/array.rb
@@ -1,318 +1,297 @@
 ##
 # Array
 #
 # ISO 15.2.12
 class Array
   ##
   # call-seq:
   #   array.each {|element| ... } -> self
   #   array.each -> Enumerator
   #
   # Calls the given block for each element of +self+
   # and pass the respective element.
   #
   # ISO 15.2.12.5.10
   def each(&block)
     return to_enum :each unless block
 
     idx = 0
     while idx < length
       block.call(self[idx])
       idx += 1
     end
     self
   end
 
   ##
   # call-seq:
   #   array.each_index {|index| ... } -> self
   #   array.each_index -> Enumerator
   #
   # Calls the given block for each element of +self+
   # and pass the index of the respective element.
   #
   # ISO 15.2.12.5.11
   def each_index(&block)
     return to_enum :each_index unless block
 
     idx = 0
     while idx < length
       block.call(idx)
       idx += 1
     end
     self
   end
 
   ##
   # call-seq:
   #   array.collect! {|element| ... } -> self
   #   array.collect! -> new_enumerator
   #
   # Calls the given block for each element of +self+
   # and pass the respective element. Each element will
   # be replaced by the resulting values.
   #
   # ISO 15.2.12.5.7
   def collect!(&block)
     return to_enum :collect! unless block
 
     idx = 0
     len = size
     while idx < len
       self[idx] = block.call self[idx]
       idx += 1
     end
     self
   end
 
   ##
   # call-seq:
   #   array.map! {|element| ... } -> self
   #   array.map! -> new_enumerator
   #
   # Alias for collect!
   #
   # ISO 15.2.12.5.20
   alias map! collect!
 
   ##
   # Private method for Array creation.
   #
   # ISO 15.2.12.5.15
   def initialize(size=0, obj=nil, &block)
     if size.is_a?(Array) && obj==nil && block == nil
       self.replace(size)
       return self
     end
     size = size.__to_int
     raise ArgumentError, "negative array size" if size < 0
 
     self.clear
     if size > 0
       self[size - 1] = nil # allocate
 
       idx = 0
       while idx < size
         self[idx] = (block)? block.call(idx): obj
         idx += 1
       end
     end
 
     self
   end
 
-  def _inspect(recur_list)
-    size = self.size
-    return "[]" if size == 0
-    return "[...]" if recur_list[self.object_id]
-    recur_list[self.object_id] = true
-    ary=[]
-    i=0
-    while i<size
-      ary<<self[i]._inspect(recur_list)
-      i+=1
-    end
-    "["+ary.join(", ")+"]"
-  end
-  ##
-  # Return the contents of this array as a string.
-  #
-  def inspect
-    self._inspect({})
-  end
-  alias to_s inspect
-
   ##
   # call-seq:
   #   array == other   -> true or false
   #
   #  Equality---Two arrays are equal if they contain the same number
   #  of elements and if each element is equal to (according to
   #  Object.==) the corresponding element in the other array.
   #
   def ==(other)
     other = self.__ary_eq(other)
     return false if other == false
     return true  if other == true
     len = self.size
     i = 0
     while i < len
       return false if self[i] != other[i]
       i += 1
     end
     return true
   end
 
   ##
   # call-seq:
   #   array.eql? other_array -> true or false
   #
   #  Returns <code>true</code> if +self+ and _other_ are the same object,
   #  or are both arrays with the same content.
   #
   def eql?(other)
     other = self.__ary_eq(other)
     return false if other == false
     return true  if other == true
     len = self.size
     i = 0
     while i < len
       return false unless self[i].eql?(other[i])
       i += 1
     end
     return true
   end
 
   ##
   # call-seq:
   #   array <=> other_array -> -1, 0, or 1
   #
   #  Comparison---Returns an integer (-1, 0, or +1)
   #  if this array is less than, equal to, or greater than <i>other_ary</i>.
   #  Each object in each array is compared (using <=>). If any value isn't
   #  equal, then that inequality is the return value. If all the
   #  values found are equal, then the return is based on a
   #  comparison of the array lengths. Thus, two arrays are
   #  "equal" according to <code>Array#<=></code> if and only if they have
   #  the same length and the value of each element is equal to the
   #  value of the corresponding element in the other array.
   #
   def <=>(other)
     other = self.__ary_cmp(other)
     return 0 if 0 == other
     return nil if nil == other
 
     len = self.size
     n = other.size
     len = n if len > n
     i = 0
     begin
       while i < len
         n = (self[i] <=> other[i])
         return n if n.nil? || n != 0
         i += 1
       end
     rescue NoMethodError
       return nil
     end
     len = self.size - other.size
     if len == 0
       0
     elsif len > 0
       1
     else
       -1
     end
   end
 
   ##
   # call-seq:
   #   array.delete(obj) -> deleted_object
   #   array.delete(obj) {|nosuch| ... } -> deleted_object or block_return
   #
   # Delete element with index +key+
   def delete(key, &block)
     while i = self.index(key)
       self.delete_at(i)
       ret = key
     end
     return block.call if ret.nil? && block
     ret
   end
 
   ##
   # call-seq:
   #   array.sort! -> self
   #   array.sort! {|a, b| ... } -> self
   #
   # Sort all elements and replace +self+ with these
   # elements.
   def sort!(&block)
     stack = [ [ 0, self.size - 1 ] ]
     until stack.empty?
       left, mid, right = stack.pop
       if right == nil
         right = mid
         # sort self[left..right]
         if left < right
           if left + 1 == right
             lval = self[left]
             rval = self[right]
             cmp = if block then block.call(lval,rval) else lval <=> rval end
             if cmp.nil?
               raise ArgumentError, "comparison of #{lval.inspect} and #{rval.inspect} failed"
             end
             if cmp > 0
               self[left]  = rval
               self[right] = lval
             end
           else
             mid = ((left + right + 1) / 2).floor
             stack.push [ left, mid, right ]
             stack.push [ mid, right ]
             stack.push [ left, (mid - 1) ] if left < mid - 1
           end
         end
       else
         lary = self[left, mid - left]
         lsize = lary.size
 
         # The entity sharing between lary and self may cause a large memory
         # copy operation in the merge loop below. This harmless operation
         # cancels the sharing and provides a huge performance gain.
         lary[0] = lary[0]
 
         # merge
         lidx = 0
         ridx = mid
         (left..right).each { |i|
           if lidx >= lsize
             break
           elsif ridx > right
             self[i, lsize - lidx] = lary[lidx, lsize - lidx]
             break
           else
             lval = lary[lidx]
             rval = self[ridx]
             cmp = if block then block.call(lval,rval) else lval <=> rval end
             if cmp.nil?
               raise ArgumentError, "comparison of #{lval.inspect} and #{rval.inspect} failed"
             end
             if cmp <= 0
               self[i] = lval
               lidx += 1
             else
               self[i] = rval
               ridx += 1
             end
           end
         }
       end
     end
     self
   end
 
   ##
   # call-seq:
   #   array.sort -> new_array
   #   array.sort {|a, b| ... } -> new_array
   #
   # Returns a new Array whose elements are those from +self+, sorted.
   def sort(&block)
     self.dup.sort!(&block)
   end
 
   ##
   # call-seq:
   #   array.to_a -> self
   #
   # Returns self, no need to convert.
   def to_a
     self
   end
   alias entries to_a
 
   ##
   # Array is enumerable
   # ISO 15.2.12.3
   include Enumerable
diff --git a/src/array.c b/src/array.c
index 9ea0b088a..f9d747ef9 100644
--- a/src/array.c
+++ b/src/array.c
@@ -1331,6 +1331,34 @@ mrb_ary_join_m(mrb_state *mrb, mrb_value ary)
   return mrb_ary_join(mrb, ary, sep);
 }
 
+/*
+ * call-seq:
+ *    ary.to_s    -> string
+ *    ary.inspect -> string
+ *
+ * Return the contents of this array as a string.
+ */
+static mrb_value
+mrb_ary_to_s(mrb_state *mrb, mrb_value self)
+{
+  mrb->c->ci->mid = MRB_SYM(inspect);
+  mrb_value ret = mrb_str_new_lit(mrb, "[");
+  int ai = mrb_gc_arena_save(mrb);
+  if (mrb_inspect_recursive_p(mrb, self)) {
+    mrb_str_cat_lit(mrb, ret, "...]");
+    return ret;
+  }
+  mrb_int len = RARRAY_LEN(self);
+  for (mrb_int i=0; i<len; i++) {
+    if (i>0) mrb_str_cat_lit(mrb, ret, ", ");
+    mrb_str_cat_str(mrb, ret, mrb_inspect(mrb, mrb_ary_ref(mrb, self, i)));
+    mrb_gc_arena_restore(mrb, ai);
+  }
+  mrb_str_cat_lit(mrb, ret, "]");
+
+  return ret;
+}
+
 static mrb_value
 mrb_ary_eq(mrb_state *mrb, mrb_value ary1)
 {
@@ -1378,40 +1406,42 @@ void
 mrb_init_array(mrb_state *mrb)
 {
   struct RClass *a;
 
   mrb->array_class = a = mrb_define_class(mrb, "Array", mrb->object_class);              /* 15.2.12 */
   MRB_SET_INSTANCE_TT(a, MRB_TT_ARRAY);
 
   mrb_define_class_method(mrb, a, "[]",        mrb_ary_s_create,     MRB_ARGS_ANY());    /* 15.2.12.4.1 */
 
   mrb_define_method(mrb, a, "+",               mrb_ary_plus,         MRB_ARGS_REQ(1));   /* 15.2.12.5.1  */
   mrb_define_method(mrb, a, "*",               mrb_ary_times,        MRB_ARGS_REQ(1));   /* 15.2.12.5.2  */
   mrb_define_method(mrb, a, "<<",              mrb_ary_push_m,       MRB_ARGS_REQ(1));   /* 15.2.12.5.3  */
   mrb_define_method(mrb, a, "[]",              mrb_ary_aget,         MRB_ARGS_ARG(1,1)); /* 15.2.12.5.4  */
   mrb_define_method(mrb, a, "[]=",             mrb_ary_aset,         MRB_ARGS_ARG(2,1)); /* 15.2.12.5.5  */
   mrb_define_method(mrb, a, "clear",           mrb_ary_clear_m,      MRB_ARGS_NONE());   /* 15.2.12.5.6  */
   mrb_define_method(mrb, a, "concat",          mrb_ary_concat_m,     MRB_ARGS_REQ(1));   /* 15.2.12.5.8  */
   mrb_define_method(mrb, a, "delete_at",       mrb_ary_delete_at,    MRB_ARGS_REQ(1));   /* 15.2.12.5.9  */
   mrb_define_method(mrb, a, "empty?",          mrb_ary_empty_p,      MRB_ARGS_NONE());   /* 15.2.12.5.12 */
   mrb_define_method(mrb, a, "first",           mrb_ary_first,        MRB_ARGS_OPT(1));   /* 15.2.12.5.13 */
   mrb_define_method(mrb, a, "index",           mrb_ary_index_m,      MRB_ARGS_REQ(1));   /* 15.2.12.5.14 */
   mrb_define_method(mrb, a, "initialize_copy", mrb_ary_replace_m,    MRB_ARGS_REQ(1));   /* 15.2.12.5.16 */
   mrb_define_method(mrb, a, "join",            mrb_ary_join_m,       MRB_ARGS_OPT(1));   /* 15.2.12.5.17 */
   mrb_define_method(mrb, a, "last",            mrb_ary_last,         MRB_ARGS_OPT(1));   /* 15.2.12.5.18 */
   mrb_define_method(mrb, a, "length",          mrb_ary_size,         MRB_ARGS_NONE());   /* 15.2.12.5.19 */
   mrb_define_method(mrb, a, "pop",             mrb_ary_pop,          MRB_ARGS_NONE());   /* 15.2.12.5.21 */
   mrb_define_method(mrb, a, "push",            mrb_ary_push_m,       MRB_ARGS_ANY());    /* 15.2.12.5.22 */
   mrb_define_method(mrb, a, "replace",         mrb_ary_replace_m,    MRB_ARGS_REQ(1));   /* 15.2.12.5.23 */
   mrb_define_method(mrb, a, "reverse",         mrb_ary_reverse,      MRB_ARGS_NONE());   /* 15.2.12.5.24 */
   mrb_define_method(mrb, a, "reverse!",        mrb_ary_reverse_bang, MRB_ARGS_NONE());   /* 15.2.12.5.25 */
   mrb_define_method(mrb, a, "rindex",          mrb_ary_rindex_m,     MRB_ARGS_REQ(1));   /* 15.2.12.5.26 */
   mrb_define_method(mrb, a, "shift",           mrb_ary_shift_m,      MRB_ARGS_OPT(1));   /* 15.2.12.5.27 */
   mrb_define_method(mrb, a, "size",            mrb_ary_size,         MRB_ARGS_NONE());   /* 15.2.12.5.28 */
   mrb_define_method(mrb, a, "slice",           mrb_ary_aget,         MRB_ARGS_ARG(1,1)); /* 15.2.12.5.29 */
   mrb_define_method(mrb, a, "unshift",         mrb_ary_unshift_m,    MRB_ARGS_ANY());    /* 15.2.12.5.30 */
+  mrb_define_method(mrb, a, "to_s",            mrb_ary_to_s,         MRB_ARGS_NONE());
+  mrb_define_method(mrb, a, "inspect",         mrb_ary_to_s,         MRB_ARGS_NONE());
 
   mrb_define_method(mrb, a, "__ary_eq",        mrb_ary_eq,           MRB_ARGS_REQ(1));
   mrb_define_method(mrb, a, "__ary_cmp",       mrb_ary_cmp,          MRB_ARGS_REQ(1));
   mrb_define_method(mrb, a, "__ary_index",     mrb_ary_index_m,      MRB_ARGS_REQ(1));   /* kept for mruby-array-ext */
   mrb_define_method(mrb, a, "__svalue",        mrb_ary_svalue,       MRB_ARGS_NONE());
 }
