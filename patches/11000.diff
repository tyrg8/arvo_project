commit c4502833b711a76cce1af0c5bf075692b965c991
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Sat Oct 13 11:48:49 2018 -0400

    [kerx] Use sanitizer.get_num_glyphs() instead of face->get_num_glyphs()

diff --git a/src/hb-aat-layout-kerx-table.hh b/src/hb-aat-layout-kerx-table.hh
index ef6d02db4..d59d6374a 100644
--- a/src/hb-aat-layout-kerx-table.hh
+++ b/src/hb-aat-layout-kerx-table.hh
@@ -226,68 +226,68 @@ struct KerxSubTableFormat1
 struct KerxSubTableFormat2
 {
   inline int get_kerning (hb_codepoint_t left, hb_codepoint_t right,
 			  unsigned int num_glyphs) const
   {
     unsigned int l = (this+leftClassTable).get_value_or_null (left, num_glyphs);
     unsigned int r = (this+rightClassTable).get_value_or_null (right, num_glyphs);
     unsigned int offset = l + r;
     const FWORD *v = &StructAtOffset<FWORD> (&(this+array), offset);
     if (unlikely ((const char *) v < (const char *) &array ||
 		  (const char *) v - (const char *) this > header.length - v->static_size))
       return 0;
     return *v;
   }
 
   inline bool apply (hb_aat_apply_context_t *c) const
   {
     TRACE_APPLY (this);
 
     if (!c->plan->requested_kerning)
       return false;
 
     accelerator_t accel (*this,
-			 c->face->get_num_glyphs ());
+			 c->sanitizer.get_num_glyphs ());
     hb_kern_machine_t<accelerator_t> machine (accel);
     machine.kern (c->font, c->buffer, c->plan->kern_mask);
 
     return_trace (true);
   }
 
   inline bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (likely (rowWidth.sanitize (c) &&
 			  leftClassTable.sanitize (c, this) &&
 			  rightClassTable.sanitize (c, this)));
   }
 
   struct accelerator_t
   {
     const KerxSubTableFormat2 &table;
     unsigned int num_glyphs;
 
     inline accelerator_t (const KerxSubTableFormat2 &table_,
 			  unsigned int num_glyphs_)
 			  : table (table_), num_glyphs (num_glyphs_) {}
 
     inline int get_kerning (hb_codepoint_t left, hb_codepoint_t right) const
     {
       return table.get_kerning (left, right, num_glyphs);
     }
   };
 
   protected:
   KerxSubTableHeader	header;
   HBUINT32		rowWidth;	/* The width, in bytes, of a row in the table. */
   LOffsetTo<Lookup<HBUINT16> >
 			leftClassTable;	/* Offset from beginning of this subtable to
 					 * left-hand class table. */
   LOffsetTo<Lookup<HBUINT16> >
 			rightClassTable;/* Offset from beginning of this subtable to
 					 * right-hand class table. */
   LOffsetTo<UnsizedArrayOf<FWORD>, false>
 			 array;		/* Offset from beginning of this subtable to
 					 * the start of the kerning array. */
   public:
   DEFINE_SIZE_STATIC (28);
 };
@@ -295,169 +295,169 @@ struct KerxSubTableFormat2
 struct KerxSubTableFormat4
 {
   struct EntryData
   {
     HBUINT16	ankrActionIndex;/* Either 0xFFFF (for no action) or the index of
 				 * the action to perform. */
     public:
     DEFINE_SIZE_STATIC (2);
   };
 
   struct driver_context_t
   {
     static const bool in_place = true;
     enum Flags
     {
       Mark		= 0x8000,	/* If set, remember this glyph as the marked glyph. */
       DontAdvance	= 0x4000,	/* If set, don't advance to the next glyph before
 					 * going to the new state. */
       Reserved		= 0x3FFF,	/* Not used; set to 0. */
     };
 
     enum SubTableFlags
     {
       ActionType	= 0xC0000000,	/* A two-bit field containing the action type. */
       Unused		= 0x3F000000,	/* Unused - must be zero. */
       Offset		= 0x00FFFFFF,	/* Masks the offset in bytes from the beginning
 					 * of the subtable to the beginning of the control
 					 * point table. */
     };
 
     inline driver_context_t (const KerxSubTableFormat4 *table,
 			     hb_aat_apply_context_t *c_) :
 	c (c_),
 	action_type ((table->flags & ActionType) >> 30),
 	ankrData ((HBUINT16 *) ((const char *) &table->machine + (table->flags & Offset))),
 	mark_set (false),
 	mark (0) {}
 
     inline bool is_actionable (StateTableDriver<EntryData> *driver,
 			       const Entry<EntryData> *entry)
     {
       return entry->data.ankrActionIndex != 0xFFFF;
     }
     inline bool transition (StateTableDriver<EntryData> *driver,
 			    const Entry<EntryData> *entry)
     {
       hb_buffer_t *buffer = driver->buffer;
       unsigned int flags = entry->flags;
 
       if (mark_set && entry->data.ankrActionIndex != 0xFFFF)
       {
 	hb_glyph_position_t &o = buffer->cur_pos();
 	switch (action_type)
 	{
 	  case 0: /* Control Point Actions.*/
 	  {
 	    /* indexed into glyph outline. */
 	    const HBUINT16 *data = &ankrData[entry->data.ankrActionIndex];
 	    if (!c->sanitizer.check_array (data, 2))
 	      return false;
 	    HB_UNUSED unsigned int markControlPoint = *data++;
 	    HB_UNUSED unsigned int currControlPoint = *data++;
 	    hb_position_t markX = 0;
 	    hb_position_t markY = 0;
 	    hb_position_t currX = 0;
 	    hb_position_t currY = 0;
 	    if (!c->font->get_glyph_contour_point_for_origin (c->buffer->info[mark].codepoint,
 							      markControlPoint,
 							      HB_DIRECTION_LTR /*XXX*/,
 							      &markX, &markY) ||
 		!c->font->get_glyph_contour_point_for_origin (c->buffer->cur ().codepoint,
 							      currControlPoint,
 							      HB_DIRECTION_LTR /*XXX*/,
 							      &currX, &currY))
 	      return true; /* True, such that the machine continues. */
 
 	    o.x_offset = markX - currX;
 	    o.y_offset = markY - currY;
 	  }
 	  break;
 
 	  case 1: /* Anchor Point Actions. */
 	  {
 	   /* Indexed into 'ankr' table. */
 	    const HBUINT16 *data = &ankrData[entry->data.ankrActionIndex];
 	    if (!c->sanitizer.check_array (data, 2))
 	      return false;
 	    unsigned int markAnchorPoint = *data++;
 	    unsigned int currAnchorPoint = *data++;
 	    const Anchor markAnchor = c->ankr_table.get_anchor (c->buffer->info[mark].codepoint,
 								markAnchorPoint,
-								c->face->get_num_glyphs (),
+								c->sanitizer.get_num_glyphs (),
 								c->ankr_end);
 	    const Anchor currAnchor = c->ankr_table.get_anchor (c->buffer->cur ().codepoint,
 								currAnchorPoint,
-								c->face->get_num_glyphs (),
+								c->sanitizer.get_num_glyphs (),
 								c->ankr_end);
 
 	    o.x_offset = c->font->em_scale_x (markAnchor.xCoordinate) - c->font->em_scale_x (currAnchor.xCoordinate);
 	    o.y_offset = c->font->em_scale_y (markAnchor.yCoordinate) - c->font->em_scale_y (currAnchor.yCoordinate);
 	  }
 	  break;
 
 	  case 2: /* Control Point Coordinate Actions. */
 	  {
 	    const FWORD *data = (const FWORD *) &ankrData[entry->data.ankrActionIndex];
 	    if (!c->sanitizer.check_array (data, 4))
 	      return false;
 	    int markX = *data++;
 	    int markY = *data++;
 	    int currX = *data++;
 	    int currY = *data++;
 
 	    o.x_offset = c->font->em_scale_x (markX) - c->font->em_scale_x (currX);
 	    o.y_offset = c->font->em_scale_y (markY) - c->font->em_scale_y (currY);
 	  }
 	  break;
 	}
 	o.attach_type() = ATTACH_TYPE_MARK;
 	o.attach_chain() = (int) mark - (int) buffer->idx;
 	buffer->scratch_flags |= HB_BUFFER_SCRATCH_FLAG_HAS_GPOS_ATTACHMENT;
       }
 
       if (flags & Mark)
       {
 	mark_set = true;
 	mark = buffer->idx;
       }
 
       return true;
     }
 
     private:
     hb_aat_apply_context_t *c;
     unsigned int action_type;
     const HBUINT16 *ankrData;
     bool mark_set;
     unsigned int mark;
   };
 
   inline bool apply (hb_aat_apply_context_t *c) const
   {
     TRACE_APPLY (this);
 
     driver_context_t dc (this, c);
 
     StateTableDriver<EntryData> driver (machine, c->buffer, c->font->face);
     driver.drive (&dc);
 
     return_trace (true);
   }
 
   inline bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
 
     /* The rest of array sanitizations are done at run-time. */
     return_trace (c->check_struct (this) &&
 		  machine.sanitize (c) &&
 		  flags.sanitize (c));
   }
 
   protected:
   KerxSubTableHeader	header;
   StateTable<EntryData>	machine;
   HBUINT32		flags;
   public:
   DEFINE_SIZE_STATIC (32);
 };
@@ -465,109 +465,109 @@ struct KerxSubTableFormat4
 struct KerxSubTableFormat6
 {
   enum Flags
   {
     ValuesAreLong	= 0x00000001,
   };
 
   inline bool is_long (void) const { return flags & ValuesAreLong; }
 
   inline int get_kerning (hb_codepoint_t left, hb_codepoint_t right,
 			  unsigned int num_glyphs) const
   {
     if (is_long ())
     {
       const U::Long &t = u.l;
       unsigned int l = (this+t.rowIndexTable).get_value_or_null (left, num_glyphs);
       unsigned int r = (this+t.columnIndexTable).get_value_or_null (right, num_glyphs);
       unsigned int offset = l + r;
       if (unlikely (offset < l)) return 0; /* Addition overflow. */
       if (unlikely (hb_unsigned_mul_overflows (offset, sizeof (FWORD32)))) return 0;
       const FWORD32 *v = &StructAtOffset<FWORD32> (&(this+t.array), offset * sizeof (FWORD32));
       if (unlikely ((const char *) v < (const char *) &t.array ||
 		    (const char *) v - (const char *) this > header.length - v->static_size))
 	return 0;
       return *v;
     }
     else
     {
       const U::Short &t = u.s;
       unsigned int l = (this+t.rowIndexTable).get_value_or_null (left, num_glyphs);
       unsigned int r = (this+t.columnIndexTable).get_value_or_null (right, num_glyphs);
       unsigned int offset = l + r;
       const FWORD *v = &StructAtOffset<FWORD> (&(this+t.array), offset * sizeof (FWORD));
       if (unlikely ((const char *) v < (const char *) &t.array ||
 		    (const char *) v - (const char *) this > header.length - v->static_size))
 	return 0;
       return *v;
     }
   }
 
   inline bool apply (hb_aat_apply_context_t *c) const
   {
     TRACE_APPLY (this);
 
     if (!c->plan->requested_kerning)
       return false;
 
     accelerator_t accel (*this,
-			 c->face->get_num_glyphs ());
+			 c->sanitizer.get_num_glyphs ());
     hb_kern_machine_t<accelerator_t> machine (accel);
     machine.kern (c->font, c->buffer, c->plan->kern_mask);
 
     return_trace (true);
   }
 
   inline bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (likely (c->check_struct (this) &&
 			  is_long () ?
 			  (
 			    u.l.rowIndexTable.sanitize (c, this) &&
 			    u.l.columnIndexTable.sanitize (c, this)
 			  ) : (
 			    u.s.rowIndexTable.sanitize (c, this) &&
 			    u.s.columnIndexTable.sanitize (c, this)
 			  )));
   }
 
   struct accelerator_t
   {
     const KerxSubTableFormat6 &table;
     unsigned int num_glyphs;
 
     inline accelerator_t (const KerxSubTableFormat6 &table_,
 			  unsigned int num_glyphs_)
 			  : table (table_), num_glyphs (num_glyphs_) {}
 
     inline int get_kerning (hb_codepoint_t left, hb_codepoint_t right) const
     {
       return table.get_kerning (left, right, num_glyphs);
     }
   };
 
   protected:
   KerxSubTableHeader		header;
   HBUINT32			flags;
   HBUINT16			rowCount;
   HBUINT16			columnCount;
   union U
   {
     struct Long
     {
       LOffsetTo<Lookup<HBUINT32> >	rowIndexTable;
       LOffsetTo<Lookup<HBUINT32> >	columnIndexTable;
       LOffsetTo<UnsizedArrayOf<FWORD32>, false>
 					array;
     } l;
     struct Short
     {
       LOffsetTo<Lookup<HBUINT16> >	rowIndexTable;
       LOffsetTo<Lookup<HBUINT16> >	columnIndexTable;
       LOffsetTo<UnsizedArrayOf<FWORD>, false>
 					array;
     } s;
   } u;
   public:
   DEFINE_SIZE_STATIC (32);
 };
