commit b4c01782212931014c603d337d762174a742c5b6
Author: Alex Deymo <deymo@google.com>
Date:   Fri Jul 23 16:21:33 2021 +0200

    Fuzz: Fix Rect rounding error decoding extra channels.
    
    When using an upsampling factor > 1 for extra channels with an odd size
    (or not a multiple of the upsampling factor) we need to round up the
    Rect copied in ModularImageToDecodedRect().
    
    This fixes an msan bug where some pixels near the right or bottom edge
    can be uninitialized.
    
    Added more msan checks to the extra channels to fail faster on this type
    of errors.

diff --git a/lib/jxl/dec_modular.cc b/lib/jxl/dec_modular.cc
index 4abc3d68..a8378c17 100644
--- a/lib/jxl/dec_modular.cc
+++ b/lib/jxl/dec_modular.cc
@@ -456,128 +456,135 @@ Status ModularFrameDecoder::DecodeAcMetadata(size_t group_id, BitReader* reader,
 Status ModularFrameDecoder::ModularImageToDecodedRect(
     Image& gi, PassesDecoderState* dec_state, jxl::ThreadPool* pool,
     ImageBundle* output, Rect rect) {
   auto& decoded = dec_state->decoded;
   const auto& frame_header = dec_state->shared->frame_header;
   const auto* metadata = frame_header.nonserialized_metadata;
   size_t xsize = rect.xsize();
   size_t ysize = rect.ysize();
   if (!xsize || !ysize) {
     return true;
   }
   JXL_DASSERT(rect.IsInside(decoded));
 
   int c = 0;
   if (do_color) {
     const bool rgb_from_gray =
         metadata->m.color_encoding.IsGray() &&
         frame_header.color_transform == ColorTransform::kNone;
     const bool fp = metadata->m.bit_depth.floating_point_sample;
 
     for (; c < 3; c++) {
       float factor = full_image.bitdepth < 32
                          ? 1.f / ((1u << full_image.bitdepth) - 1)
                          : 0;
       int c_in = c;
       if (frame_header.color_transform == ColorTransform::kXYB) {
         factor = dec_state->shared->matrices.DCQuants()[c];
         // XYB is encoded as YX(B-Y)
         if (c < 2) c_in = 1 - c;
       } else if (rgb_from_gray) {
         c_in = 0;
       }
       Channel& ch_in = gi.channel[c_in];
       // TODO(eustas): could we detect it on earlier stage?
       if (ch_in.w == 0 || ch_in.h == 0) {
         return JXL_FAILURE("Empty image");
       }
       size_t xsize_shifted = DivCeil(xsize, 1 << ch_in.hshift);
       size_t ysize_shifted = DivCeil(ysize, 1 << ch_in.vshift);
       Rect r(rect.x0() >> ch_in.hshift, rect.y0() >> ch_in.vshift,
              rect.xsize() >> ch_in.hshift, rect.ysize() >> ch_in.vshift,
              DivCeil(decoded.xsize(), 1 << ch_in.hshift),
              DivCeil(decoded.ysize(), 1 << ch_in.vshift));
       if (r.ysize() != ch_in.h || r.xsize() != ch_in.w) {
         return JXL_FAILURE(
             "Dimension mismatch: trying to fit a %zux%zu modular channel into "
             "a %zux%zu rect",
             ch_in.w, ch_in.h, r.xsize(), r.ysize());
       }
       if (frame_header.color_transform == ColorTransform::kXYB && c == 2) {
         JXL_ASSERT(!fp);
         RunOnPool(
             pool, 0, ysize_shifted, jxl::ThreadPool::SkipInit(),
             [&](const int task, const int thread) {
               const size_t y = task;
               const pixel_type* const JXL_RESTRICT row_in = ch_in.Row(y);
               const pixel_type* const JXL_RESTRICT row_in_Y =
                   gi.channel[0].Row(y);
               float* const JXL_RESTRICT row_out = r.PlaneRow(&decoded, c, y);
               HWY_DYNAMIC_DISPATCH(MultiplySum)
               (xsize_shifted, row_in, row_in_Y, factor, row_out);
             },
             "ModularIntToFloat");
       } else if (fp) {
         int bits = metadata->m.bit_depth.bits_per_sample;
         int exp_bits = metadata->m.bit_depth.exponent_bits_per_sample;
         RunOnPool(
             pool, 0, ysize_shifted, jxl::ThreadPool::SkipInit(),
             [&](const int task, const int thread) {
               const size_t y = task;
               const pixel_type* const JXL_RESTRICT row_in = ch_in.Row(y);
               float* const JXL_RESTRICT row_out = r.PlaneRow(&decoded, c, y);
               int_to_float(row_in, row_out, xsize_shifted, bits, exp_bits);
             },
             "ModularIntToFloat_losslessfloat");
       } else {
         RunOnPool(
             pool, 0, ysize_shifted, jxl::ThreadPool::SkipInit(),
             [&](const int task, const int thread) {
               const size_t y = task;
               const pixel_type* const JXL_RESTRICT row_in = ch_in.Row(y);
               if (rgb_from_gray) {
                 HWY_DYNAMIC_DISPATCH(RgbFromSingle)
                 (xsize_shifted, row_in, factor, &decoded, c, y, r);
               } else {
                 HWY_DYNAMIC_DISPATCH(SingleFromSingle)
                 (xsize_shifted, row_in, factor, &decoded, c, y, r);
               }
             },
             "ModularIntToFloat");
       }
       if (rgb_from_gray) {
         break;
       }
     }
     if (rgb_from_gray) {
       c = 1;
     }
   }
   for (size_t ec = 0; ec < dec_state->extra_channels.size(); ec++, c++) {
     const ExtraChannelInfo& eci = output->metadata()->extra_channel_info[ec];
     int bits = eci.bit_depth.bits_per_sample;
     int exp_bits = eci.bit_depth.exponent_bits_per_sample;
     bool fp = eci.bit_depth.floating_point_sample;
     JXL_ASSERT(fp || bits < 32);
     const float mul = fp ? 0 : (1.0f / ((1u << bits) - 1));
     size_t ecups = frame_header.extra_channel_upsampling[ec];
     const size_t ec_xsize = DivCeil(frame_dim.xsize_upsampled, ecups);
     const size_t ec_ysize = DivCeil(frame_dim.ysize_upsampled, ecups);
     Channel& ch_in = gi.channel[c];
+    // For x0, y0 there's no need to do a DivCeil().
+    JXL_DASSERT(rect.x0() % (1ul << ch_in.hshift) == 0);
+    JXL_DASSERT(rect.y0() % (1ul << ch_in.vshift) == 0);
     Rect r(rect.x0() >> ch_in.hshift, rect.y0() >> ch_in.vshift,
-           rect.xsize() >> ch_in.hshift, rect.ysize() >> ch_in.vshift, ec_xsize,
-           ec_ysize);
+           DivCeil(rect.xsize(), 1lu << ch_in.hshift),
+           DivCeil(rect.ysize(), 1lu << ch_in.vshift), ec_xsize, ec_ysize);
+
+    JXL_DASSERT(r.IsInside(dec_state->extra_channels[ec]));
+    JXL_DASSERT(r.IsInside(ch_in.plane));
     for (size_t y = 0; y < r.ysize(); ++y) {
       float* const JXL_RESTRICT row_out =
           r.Row(&dec_state->extra_channels[ec], y);
       const pixel_type* const JXL_RESTRICT row_in = ch_in.Row(y);
       if (fp) {
         int_to_float(row_in, row_out, r.xsize(), bits, exp_bits);
       } else {
         for (size_t x = 0; x < r.xsize(); ++x) {
           row_out[x] = row_in[x] * mul;
         }
       }
     }
+    JXL_CHECK_IMAGE_INITIALIZED(dec_state->extra_channels[ec], r);
   }
   return true;
 }
diff --git a/lib/jxl/dec_reconstruct.cc b/lib/jxl/dec_reconstruct.cc
index b295728b..817060a5 100644
--- a/lib/jxl/dec_reconstruct.cc
+++ b/lib/jxl/dec_reconstruct.cc
@@ -428,10 +428,11 @@ namespace {
 Rect ScaleRectForEC(Rect in, const FrameHeader& frame_header, size_t ec) {
   auto s = [&](size_t x) {
     return DivCeil(x * frame_header.upsampling,
                    frame_header.extra_channel_upsampling[ec]);
   };
+  // For x0 and y0 the DivCeil is actually an exact division.
   return Rect(s(in.x0()), s(in.y0()), s(in.xsize()), s(in.ysize()));
 }
 
 // Implements EnsurePaddingInPlace, but allows processing data one row at a
 // time.
@@ -1080,163 +1081,165 @@ Status FinalizeImageRect(
 Status FinalizeFrameDecoding(ImageBundle* decoded,
                              PassesDecoderState* dec_state, ThreadPool* pool,
                              bool force_fir, bool skip_blending) {
   const FrameHeader& frame_header = dec_state->shared->frame_header;
   const FrameDimensions& frame_dim = dec_state->shared->frame_dim;
 
   // FinalizeImageRect was not yet run, or we are forcing a run.
   if (!dec_state->EagerFinalizeImageRect() || force_fir) {
     std::vector<Rect> rects_to_process;
     for (size_t y = 0; y < frame_dim.ysize_padded; y += kGroupDim) {
       for (size_t x = 0; x < frame_dim.xsize_padded; x += kGroupDim) {
         Rect rect(x, y, kGroupDim, kGroupDim, frame_dim.xsize_padded,
                   frame_dim.ysize_padded);
         if (rect.xsize() == 0 || rect.ysize() == 0) continue;
         rects_to_process.push_back(rect);
       }
     }
     const auto allocate_storage = [&](size_t num_threads) {
       dec_state->EnsureStorage(num_threads);
       return true;
     };
 
     {
       std::vector<ImageF> ecs;
       const ImageMetadata& metadata = frame_header.nonserialized_metadata->m;
       for (size_t i = 0; i < metadata.num_extra_channels; i++) {
         if (frame_header.extra_channel_upsampling[i] == 1) {
           ecs.push_back(std::move(dec_state->extra_channels[i]));
         } else {
           ecs.emplace_back(frame_dim.xsize_upsampled_padded,
                            frame_dim.ysize_upsampled_padded);
         }
       }
       decoded->SetExtraChannels(std::move(ecs));
     }
 
     std::atomic<bool> apply_features_ok{true};
     auto run_apply_features = [&](size_t rect_id, size_t thread) {
       size_t xstart = PassesDecoderState::kGroupDataXBorder;
       size_t ystart = PassesDecoderState::kGroupDataYBorder;
       for (size_t c = 0; c < 3; c++) {
         Rect rh(rects_to_process[rect_id].x0() >>
                     frame_header.chroma_subsampling.HShift(c),
                 rects_to_process[rect_id].y0() >>
                     frame_header.chroma_subsampling.VShift(c),
                 rects_to_process[rect_id].xsize() >>
                     frame_header.chroma_subsampling.HShift(c),
                 rects_to_process[rect_id].ysize() >>
                     frame_header.chroma_subsampling.VShift(c));
         Rect group_data_rect(xstart, ystart, rh.xsize(), rh.ysize());
         // Poison the image in this thread to prevent leaking initialized data
         // from a previous run in this thread in msan builds.
         msan::PoisonImage(dec_state->group_data[thread].Plane(c));
         CopyImageToWithPadding(
             rh, dec_state->decoded.Plane(c), dec_state->FinalizeRectPadding(),
             group_data_rect, &dec_state->group_data[thread].Plane(c));
       }
       Rect group_data_rect(xstart, ystart, rects_to_process[rect_id].xsize(),
                            rects_to_process[rect_id].ysize());
       std::vector<std::pair<ImageF*, Rect>> ec_rects;
       ec_rects.reserve(decoded->extra_channels().size());
       for (size_t i = 0; i < decoded->extra_channels().size(); i++) {
         Rect r = ScaleRectForEC(rects_to_process[rect_id], frame_header, i);
         if (frame_header.extra_channel_upsampling[i] != 1) {
           Rect ec_input_rect(kBlockDim, 2, r.xsize(), r.ysize());
           auto eti =
               &dec_state
                    ->ec_temp_images[thread * decoded->extra_channels().size() +
                                     i];
           // Poison the temp image on this thread to prevent leaking initialized
           // data from a previous run in this thread in msan builds.
           msan::PoisonImage(*eti);
+          JXL_CHECK_IMAGE_INITIALIZED(dec_state->extra_channels[i], r);
           CopyImageToWithPadding(r, dec_state->extra_channels[i],
                                  /*padding=*/2, ec_input_rect, eti);
           ec_rects.emplace_back(eti, ec_input_rect);
         } else {
+          JXL_CHECK_IMAGE_INITIALIZED(decoded->extra_channels()[i], r);
           ec_rects.emplace_back(&decoded->extra_channels()[i], r);
         }
       }
       if (!FinalizeImageRect(&dec_state->group_data[thread], group_data_rect,
                              ec_rects, dec_state, thread, decoded,
                              rects_to_process[rect_id])) {
         apply_features_ok = false;
       }
     };
 
     RunOnPool(pool, 0, rects_to_process.size(), allocate_storage,
               run_apply_features, "ApplyFeatures");
 
     if (!apply_features_ok) {
       return JXL_FAILURE("FinalizeImageRect failed");
     }
   }
 
   const size_t xsize = frame_dim.xsize_upsampled;
   const size_t ysize = frame_dim.ysize_upsampled;
 
   decoded->ShrinkTo(xsize, ysize);
   if (dec_state->pre_color_transform_frame.xsize() != 0) {
     dec_state->pre_color_transform_frame.ShrinkTo(xsize, ysize);
   }
 
   if (!skip_blending && ImageBlender::NeedsBlending(dec_state)) {
     if (dec_state->pre_color_transform_frame.xsize() != 0) {
       // Extra channels are going to be modified. Make a copy.
       dec_state->pre_color_transform_ec.clear();
       for (const auto& ec : decoded->extra_channels()) {
         dec_state->pre_color_transform_ec.emplace_back(CopyImage(ec));
       }
     }
     ImageBlender blender;
     ImageBundle foreground = std::move(*decoded);
     decoded->SetFromImage(Image3F(frame_header.nonserialized_metadata->xsize(),
                                   frame_header.nonserialized_metadata->ysize()),
                           foreground.c_current());
     std::vector<Rect> extra_channels_rects;
     decoded->extra_channels().reserve(foreground.extra_channels().size());
     extra_channels_rects.reserve(foreground.extra_channels().size());
     for (size_t i = 0; i < foreground.extra_channels().size(); ++i) {
       decoded->extra_channels().emplace_back(
           frame_header.nonserialized_metadata->xsize(),
           frame_header.nonserialized_metadata->ysize());
       extra_channels_rects.emplace_back(decoded->extra_channels().back());
     }
     JXL_RETURN_IF_ERROR(blender.PrepareBlending(
         dec_state, foreground.origin, foreground.xsize(), foreground.ysize(),
         &frame_header.nonserialized_metadata->m.extra_channel_info,
         foreground.c_current(), Rect(*decoded->color()),
         /*output=*/decoded->color(), Rect(*decoded->color()),
         &decoded->extra_channels(), std::move(extra_channels_rects)));
 
     std::vector<Rect> rects_to_process;
     for (size_t y = 0; y < frame_dim.ysize; y += kGroupDim) {
       for (size_t x = 0; x < frame_dim.xsize; x += kGroupDim) {
         Rect rect(x, y, kGroupDim, kGroupDim, frame_dim.xsize, frame_dim.ysize);
         if (rect.xsize() == 0 || rect.ysize() == 0) continue;
         rects_to_process.push_back(rect);
       }
     }
 
     std::atomic<bool> blending_ok{true};
     JXL_RETURN_IF_ERROR(RunOnPool(
         pool, 0, rects_to_process.size(), ThreadPool::SkipInit(),
         [&](size_t i, size_t /*thread*/) {
           const Rect& rect = rects_to_process[i];
           auto rect_blender = blender.PrepareRect(
               rect, *foreground.color(), foreground.extra_channels(), rect);
           for (size_t y = 0; y < rect.ysize(); ++y) {
             if (!rect_blender.DoBlending(y)) {
               blending_ok = false;
               return;
             }
           }
         },
         "Blend"));
     JXL_RETURN_IF_ERROR(blending_ok.load());
   }
 
   return true;
 }
 
 }  // namespace jxl
 #endif  // HWY_ONCE
diff --git a/lib/jxl/dec_upsample.cc b/lib/jxl/dec_upsample.cc
index 9c7a5e5a..bdc2119d 100644
--- a/lib/jxl/dec_upsample.cc
+++ b/lib/jxl/dec_upsample.cc
@@ -1,17 +1,18 @@
 // Copyright (c) the JPEG XL Project Authors. All rights reserved.
 //
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
 #include "lib/jxl/dec_upsample.h"
 
 #undef HWY_TARGET_INCLUDE
 #define HWY_TARGET_INCLUDE "lib/jxl/dec_upsample.cc"
 #include <hwy/foreach_target.h>
 #include <hwy/highway.h>
 
 #include "lib/jxl/base/profiler.h"
 #include "lib/jxl/image_ops.h"
+#include "lib/jxl/sanitizers.h"
 
 HWY_BEFORE_NAMESPACE();
 namespace jxl {
@@ -353,23 +354,27 @@ size_t Upsampler::GetArenaSize(size_t max_dst_xsize) {
 void Upsampler::UpsampleRect(const ImageF& src, const Rect& src_rect,
                              ImageF* dst, const Rect& dst_rect,
                              ssize_t image_y_offset, size_t image_ysize,
                              float* arena) const {
   JXL_CHECK(arena);
+  JXL_CHECK_IMAGE_INITIALIZED(src, src_rect);
   HWY_DYNAMIC_DISPATCH(UpsampleRect)
   (upsampling_, reinterpret_cast<float*>(kernel_storage_.get()), src, src_rect,
    dst, dst_rect, image_y_offset, image_ysize, arena, x_repeat_);
+  JXL_CHECK_IMAGE_INITIALIZED(*dst, dst_rect);
 }
 
 void Upsampler::UpsampleRect(const Image3F& src, const Rect& src_rect,
                              Image3F* dst, const Rect& dst_rect,
                              ssize_t image_y_offset, size_t image_ysize,
                              float* arena) const {
   PROFILER_FUNC;
+  JXL_CHECK_IMAGE_INITIALIZED(src, src_rect);
   for (size_t c = 0; c < 3; c++) {
     UpsampleRect(src.Plane(c), src_rect, &dst->Plane(c), dst_rect,
                  image_y_offset, image_ysize, arena);
   }
+  JXL_CHECK_IMAGE_INITIALIZED(*dst, dst_rect);
 }
 
 }  // namespace jxl
 #endif  // HWY_ONCE
