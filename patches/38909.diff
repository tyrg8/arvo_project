commit bf6bd11a9b969c02a106f94ebf40cefbe8028456
Author: Daniel-Constantin Mierla <miconda@gmail.com>
Date:   Mon Sep 20 07:17:27 2021 +0200

    core: parser - additioal check for content lenght spanning next line

diff --git a/src/core/parser/parse_content.c b/src/core/parser/parse_content.c
index cda4b8177d..aff70f8660 100644
--- a/src/core/parser/parse_content.c
+++ b/src/core/parser/parse_content.c
@@ -214,60 +214,60 @@ static type_node_t subtype_tree[] = {
 char* parse_content_length(char* const buffer, const char* const end,
 		int* const length)
 {
 	int number;
 	char *p;
 	int  size;
 
 	p = buffer;
 	if(buffer>=end) {
 		LM_ERR("empty input buffer: %p - %p\n", buffer, end);
 		goto error;
 	}
 	/* search the begining of the number */
-	while ( p<end && (*p==' ' || *p=='\t' ||
-	(*p=='\n' && (*(p+1)==' '||*(p+1)=='\t')) ))
+	while ( p<end && (*p==' ' || *p=='\t'
+				|| (*p=='\n' && p+1<end && (*(p+1)==' ' || *(p+1)=='\t')) ) )
 		p++;
 	if (p==end)
 		goto error;
 	/* parse the number */
 	size = 0;
 	number = 0;
 	while (p<end && *p>='0' && *p<='9') {
 		if(number >= INT_MAX/10) {
 			LM_ERR("content lenght value is too large\n");
 			goto error;
 		}
 		number = number*10 + ((*p) - '0');
 		size ++;
 		p++;
 	}
 	if (p==end || size==0)
 		goto error;
 	do {
 		/* only spaces till the end-of-header */
 		while (p<end && (*p==' ' || *p=='\t')) p++;
 		if (p==end)
 			goto error;
 		/* EOH with \n or \r\n */
 		if(*p=='\n') {
 			p++;
 		} else if (p+1<end && *p=='\r' && *(p+1)=='\n') {
 			p += 2;
 		} else {
 			/* no valid EOH */
 			goto error;
 		}
 		if(p<end) {
 			/* multi line header body */
 			if(*p==' ' || *p=='\t') {
 				p++;
 				if (p==end)
 					goto error;
 			} else {
 				break;
 			}
 		}
 	} while(p<end);
 
 	*length = number;
 	return p;
