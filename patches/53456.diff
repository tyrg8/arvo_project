commit db34d54064ae35adc78a499c49363a256f5145f6
Author: Robin Watts <Robin.Watts@artifex.com>
Date:   Thu Nov 24 20:09:32 2022 +0000

    Bug 706086: Fix OSS Fuzz clist buffer overrun.
    
    clist_copy_bits can copy small bitmaps into the clist uncompressed.
    When it copies them it calculates the size required as being:
    
     raster * (h-1) + width_bytes
    
    where width_bytes is raster, without the padding at the end.
    
    Thus it saves a byte or two.
    
    The routine we have been using to copy the bitmap in since time
    immemorial did not know about this, so copied all the lines with
    padding. Most of the time this didn't matter, but just occasionally,
    if we get a bitmap that would JUST fit, we can overrun the buffer.

diff --git a/base/gsbitops.c b/base/gsbitops.c
index 479ebcd66..d2b9e9c95 100644
--- a/base/gsbitops.c
+++ b/base/gsbitops.c
@@ -1,31 +1,31 @@
-/* Copyright (C) 2001-2021 Artifex Software, Inc.
+/* Copyright (C) 2001-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 
 /* Bitmap filling, copying, and transforming operations */
 #include "stdio_.h"
 #include "memory_.h"
 #include "gdebug.h"
 #include "gserrors.h"
 #include "gstypes.h"
 #include "gsbittab.h"
 #include "gxbitops.h"
 #include "gxcindex.h"
 
 /* ---------------- Bit-oriented operations ---------------- */
 
 /* Define masks for little-endian operation. */
 /* masks[i] has the first i bits off and the rest on. */
 #if !ARCH_IS_BIG_ENDIAN
@@ -725,3 +725,32 @@ bytes_copy_rectangle_zero_padding(byte * dest, uint dest_raster,
         }
     }
 }
+
+/* Copy a rectangle of bytes zeroing any padding bytes, copying
+ * the last row with no padding. */
+void
+bytes_copy_rectangle_zero_padding_last_short(byte * dest, uint dest_raster,
+             const byte * src, uint src_raster, int width_bytes, int height)
+{
+    int padlen = dest_raster;
+    if (padlen < 0)
+        padlen = -padlen;
+    padlen -= width_bytes;
+    if (padlen == 0)
+    {
+        while (height-- > 0) {
+            memcpy(dest, src, width_bytes);
+            src += src_raster;
+            dest += dest_raster;
+        }
+    } else {
+        while (--height > 0) {
+            memcpy(dest, src, width_bytes);
+            memset(dest+width_bytes, 0, padlen);
+            src += src_raster;
+            dest += dest_raster;
+        }
+        if (height >= 0)
+            memcpy(dest, src, width_bytes);
+    }
+}
diff --git a/base/gsbitops.h b/base/gsbitops.h
index 127c24aab..dc919175a 100644
--- a/base/gsbitops.h
+++ b/base/gsbitops.h
@@ -1,46 +1,46 @@
-/* Copyright (C) 2001-2021 Artifex Software, Inc.
+/* Copyright (C) 2001-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 
 /* Interface for bitmap operations */
 
 
 #ifndef gsbitops_INCLUDED
 #  define gsbitops_INCLUDED
 
 #include "gxcindex.h"
 #include "gstypes.h"
 
 /* ---------------- Pixel processing macros ---------------- */
 
 /*
  * These macros support code that processes data pixel-by-pixel (or, to be
  * more accurate, packed arrays of values -- they may be complete pixels
  * or individual components of pixels).
  *
  * Supported #s of bits per value (bpv) are 1, 2, 4, or n * 8, where n <= 8.
  * The suffix 8, 12, 16, 32, or 64 on a macro name indicates the maximum
  * value of bpv that the macro is prepared to handle.
  *
  * The setup macros number bits within a byte in big-endian order, i.e.,
  * 0x80 is bit 0, 0x01 is bit 7.  However, sbit/dbit may use a different
  * representation for better performance.  ****** NYI ******
  */
 
 /* macro to eliminate compiler warning message */
 #define SAMPLE_BOUND_SHIFT(value, shift)\
     ((shift) >= 8 * sizeof(value) ? (shift) & (8 * sizeof(value) - 1) : (shift))
 
 /* Load a value from memory, without incrementing. */
@@ -500,6 +500,12 @@ int bytes_rectangle_is_const(const byte * src, uint src_raster, int width_bytes,
 /* Copy a rectangle of bytes, ensuring that any padding bits at the end
  * of each dest_raster line are zeroed. */
 void bytes_copy_rectangle_zero_padding(byte * dest, uint dest_raster,
     const byte * src, uint src_raster, int width_bytes, int height);
 
+/* Copy a rectangle of bytes, ensuring that any padding bits at the end
+ * of each dest_raster line are zeroed. The last row is copied without
+ * any padding. */
+void bytes_copy_rectangle_zero_padding_last_short(byte * dest, uint dest_raster,
+    const byte * src, uint src_raster, int width_bytes, int height);
+
 #endif /* gsbitops_INCLUDED */
diff --git a/base/gxclbits.c b/base/gxclbits.c
index 6ccc65a75..c3da5b944 100644
--- a/base/gxclbits.c
+++ b/base/gxclbits.c
@@ -156,130 +156,131 @@ int
 cmd_put_bits(gx_device_clist_writer * cldev, gx_clist_state * pcls,
   const byte * data, uint width_bits, uint height, uint raster, int op_size,
              int compression_mask, byte ** pdp, uint * psize)
 {
     uint short_raster, full_raster;
     uint short_size = clist_bitmap_bytes(width_bits, height,
                           compression_mask & ~cmd_mask_compress_any,
                           &short_raster, &full_raster);
     uint uncompressed_raster;
     uint uncompressed_size = clist_bitmap_bytes(width_bits, height, compression_mask,
                        &uncompressed_raster, &full_raster);
     uint max_size = (compression_mask & allow_large_bitmap) ? 0x7fffffff :
                         data_bits_size - op_size;
     gs_memory_t *mem = cldev->memory;
     byte *dp;
     int compress = 0;
     int code;
 
     /*
      * See if compressing the bits is possible and worthwhile.
      * Currently we can't compress if the compressed data won't fit in
      * the command reading buffer, or if the decompressed data won't fit
      * in the buffer and decompress_elsewhere isn't set.
      */
     if (short_size >= 50 &&
         (compression_mask & ((1<<cmd_compress_rle) | (1<<cmd_compress_cfe))) != 0 &&
         (uncompressed_size <= max_size ||
          (compression_mask & decompress_elsewhere) != 0)
         ) {
         union ss_ {
             stream_state ss;
             stream_CFE_state cf;
             stream_RLE_state rl;
         } sstate;
         int try_size = op_size + min(uncompressed_size, max_size);
 
         *psize = try_size;
         code = (pcls != 0 ?
                 set_cmd_put_op(&dp, cldev, pcls, 0, try_size) :
                 set_cmd_put_all_op(&dp, cldev, 0, try_size));
         if (code < 0)
             return code;
         cmd_uncount_op(0, try_size);
         /*
          * Note that we currently keep all the padding if we are
          * compressing.  This is ridiculous, but it's too hard to
          * change right now.
          */
         if (compression_mask & (1 << cmd_compress_cfe)) {
             /* Try CCITTFax compression. */
             clist_cfe_init(&sstate.cf,
                            uncompressed_raster << 3 /*width_bits*/,
                            mem);
             compress = cmd_compress_cfe;
         } else if (compression_mask & (1 << cmd_compress_rle)) {
             /* Try RLE compression. */
             clist_rle_init(&sstate.rl);
             compress = cmd_compress_rle;
         }
         if (compress) {
             byte *wbase = dp + (op_size - 1);
             stream_cursor_write w;
 
             /*
              * We can give up on compressing if we generate too much
              * output to fit in the command reading buffer, or too
              * much to make compression worthwhile.
              */
             uint wmax = min(uncompressed_size, max_size);
             int status;
 
             w.ptr = wbase;
             w.limit = w.ptr + min(wmax, short_size >> 1);
             status = cmd_compress_bitmap((stream_state *) & sstate, data,
                                   width_bits, /* was uncompressed_raster << 3, but this overruns. */
                                          raster, height, &w);
             if (status == 0) {	/* Use compressed representation. */
                 uint wcount = w.ptr - wbase;
 
                 cmd_shorten_list_op(cldev,
                              (pcls ? &pcls->list : cldev->band_range_list),
                                     try_size - (op_size + wcount));
                 *psize = op_size + wcount;
                 goto out;
             }
         }
         if (uncompressed_size > max_size) {
             /* Shorten to zero, erasing the operation altogether */
             if_debug1m('L', cldev->memory,
                        "[L]Uncompressed bits %u too large for buffer\n",
                        uncompressed_size);
             cmd_shorten_list_op(cldev,
                              (pcls ? &pcls->list : cldev->band_range_list),
                                 try_size);
             return_error(gs_error_limitcheck);
         }
         if (uncompressed_size != short_size) {
             if_debug2m('L',cldev->memory,"[L]Shortening bits from %u to %u\n",
                        try_size, op_size + short_size);
             cmd_shorten_list_op(cldev,
                              (pcls ? &pcls->list : cldev->band_range_list),
                                 try_size - (op_size + short_size));
             *psize = op_size + short_size;
         }
         compress = 0;
     } else if (uncompressed_size > max_size)
         return_error(gs_error_limitcheck);
     else {
         *psize = op_size + short_size;
         code = (pcls != 0 ?
                 set_cmd_put_op(&dp, cldev, pcls, 0, *psize) :
                 set_cmd_put_all_op(&dp, cldev, 0, *psize));
         if (code < 0)
             return code;
         cmd_uncount_op(0, *psize);
     }
     if ((compression_mask & (1 << cmd_compress_const)) &&
         (code = bytes_rectangle_is_const(data, raster, uncompressed_raster << 3, height)) >= 0) {
         cmd_shorten_list_op(cldev,
                             (pcls ? &pcls->list : cldev->band_range_list),
                             *psize - (op_size + 1));
         *psize = op_size + 1;
         dp[op_size] = code;
         compress = cmd_compress_const;
     } else {
         uint copy_bytes = (width_bits + 7) >> 3;
-        bytes_copy_rectangle_zero_padding(dp + op_size, short_raster, data, raster,
+        bytes_copy_rectangle_zero_padding_last_short(
+                             dp + op_size, short_raster, data, raster,
                              copy_bytes, height);
     }
 out:
