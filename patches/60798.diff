commit cf9cd35aa9d1db9d7b6b3e9207b47432fdb6fe5e
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Thu Jul 27 00:14:15 2023 +0200

    avcodec/evc_ps: Check num_ref_pic_list_in_sps
    
    Fixes: out of array write
    Fixes: 60798/clusterfuzz-testcase-minimized-ffmpeg_BSF_EVC_FRAME_MERGE_fuzzer-4633529766772736
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Reviewed-by: James Almer <jamrial@gmail.com>
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/evc.h b/libavcodec/evc.h
index d1fdb4fac6..9711c760fe 100644
--- a/libavcodec/evc.h
+++ b/libavcodec/evc.h
@@ -108,48 +108,48 @@ enum EVCSliceType {
 enum {
     // 7.4.3.2: aps_video_parameter_set_id is u(4).
     EVC_MAX_APS_COUNT = 32,
 
     // 7.4.3.1: sps_seq_parameter_set_id is in [0, 15].
     EVC_MAX_SPS_COUNT = 16,
 
     // 7.4.3.2: pps_pic_parameter_set_id is in [0, 63].
     EVC_MAX_PPS_COUNT = 64,
 
     // 7.4.5: slice header slice_pic_parameter_set_id in [0, 63]
     EVC_MAX_SH_COUNT = 64,
 
     // E.3.2: cpb_cnt_minus1[i] is in [0, 31].
     EVC_MAX_CPB_CNT = 32,
 
     // A.4.1: in table A.1 the highest level allows a MaxLumaPs of 35 651 584.
     EVC_MAX_LUMA_PS = 35651584,
 
     EVC_MAX_NUM_REF_PICS = 21,
 
-    EVC_MAX_NUM_RPLS = 32,
+    EVC_MAX_NUM_RPLS = 64,
 
     // A.4.1: pic_width_in_luma_samples and pic_height_in_luma_samples are
     // constrained to be not greater than sqrt(MaxLumaPs * 8).  Hence height/
     // width are bounded above by sqrt(8 * 35651584) = 16888.2 samples.
     EVC_MAX_WIDTH  = 16888,
     EVC_MAX_HEIGHT = 16888,
 
     // A.4.1: table A.1 allows at most 22 tile rows for any level.
     EVC_MAX_TILE_ROWS    = 22,
     // A.4.1: table A.1 allows at most 20 tile columns for any level.
     EVC_MAX_TILE_COLUMNS = 20,
 
     // A.4.1: table A.1 allows at most 600 slice segments for any level.
     EVC_MAX_SLICE_SEGMENTS = 600,
 
     // 7.4.7.1: in the worst case (tiles_enabled_flag and
     // entropy_coding_sync_enabled_flag are both set), entry points can be
     // placed at the beginning of every Ctb row in every tile, giving an
     // upper bound of (num_tile_columns_minus1 + 1) * PicHeightInCtbsY - 1.
     // Only a stream with very high resolution and perverse parameters could
     // get near that, though, so set a lower limit here with the maximum
     // possible value for 4K video (at most 135 16x16 Ctb rows).
     HEVC_MAX_ENTRY_POINT_OFFSETS = EVC_MAX_TILE_COLUMNS * 135,
 };
 
 #endif // AVCODEC_EVC_H
diff --git a/libavcodec/evc_ps.c b/libavcodec/evc_ps.c
index 04ee6a45e6..64384a392c 100644
--- a/libavcodec/evc_ps.c
+++ b/libavcodec/evc_ps.c
@@ -134,163 +134,172 @@ static int vui_parameters(GetBitContext *gb, VUIParameters *vui)
 // @see ISO_IEC_23094-1 (7.3.2.1 SPS RBSP syntax)
 int ff_evc_parse_sps(GetBitContext *gb, EVCParamSets *ps)
 {
     EVCParserSPS *sps;
     unsigned sps_seq_parameter_set_id;
     int ret;
 
     sps_seq_parameter_set_id = get_ue_golomb(gb);
 
     if (sps_seq_parameter_set_id >= EVC_MAX_SPS_COUNT)
         return AVERROR_INVALIDDATA;
 
     sps = av_mallocz(sizeof(*sps));
     if (!sps)
         return AVERROR(ENOMEM);
 
     sps->sps_seq_parameter_set_id = sps_seq_parameter_set_id;
 
     // the Baseline profile is indicated by profile_idc eqal to 0
     // the Main profile is indicated by profile_idc eqal to 1
     sps->profile_idc = get_bits(gb, 8);
 
     sps->level_idc = get_bits(gb, 8);
 
     skip_bits_long(gb, 32); /* skip toolset_idc_h */
     skip_bits_long(gb, 32); /* skip toolset_idc_l */
 
     // 0 - monochrome
     // 1 - 4:2:0
     // 2 - 4:2:2
     // 3 - 4:4:4
     sps->chroma_format_idc = get_ue_golomb_31(gb);
 
     sps->pic_width_in_luma_samples = get_ue_golomb_long(gb);
     sps->pic_height_in_luma_samples = get_ue_golomb_long(gb);
 
     sps->bit_depth_luma_minus8 = get_ue_golomb_31(gb);
     sps->bit_depth_chroma_minus8 = get_ue_golomb_31(gb);
 
     sps->sps_btt_flag = get_bits1(gb);
     if (sps->sps_btt_flag) {
         sps->log2_ctu_size_minus2 = get_ue_golomb_long(gb);
         sps->log2_min_cb_size_minus2 = get_ue_golomb_long(gb);
         sps->log2_diff_ctu_max_14_cb_size = get_ue_golomb_long(gb);
         sps->log2_diff_ctu_max_tt_cb_size = get_ue_golomb_long(gb);
         sps->log2_diff_min_cb_min_tt_cb_size_minus2 = get_ue_golomb_long(gb);
     }
 
     sps->sps_suco_flag = get_bits1(gb);
     if (sps->sps_suco_flag) {
         sps->log2_diff_ctu_size_max_suco_cb_size = get_ue_golomb_long(gb);
         sps->log2_diff_max_suco_min_suco_cb_size = get_ue_golomb_long(gb);
     }
 
     sps->sps_admvp_flag = get_bits1(gb);
     if (sps->sps_admvp_flag) {
         sps->sps_affine_flag = get_bits1(gb);
         sps->sps_amvr_flag = get_bits1(gb);
         sps->sps_dmvr_flag = get_bits1(gb);
         sps->sps_mmvd_flag = get_bits1(gb);
         sps->sps_hmvp_flag = get_bits1(gb);
     }
 
     sps->sps_eipd_flag =  get_bits1(gb);
     if (sps->sps_eipd_flag) {
         sps->sps_ibc_flag = get_bits1(gb);
         if (sps->sps_ibc_flag)
             sps->log2_max_ibc_cand_size_minus2 = get_ue_golomb(gb);
     }
 
     sps->sps_cm_init_flag = get_bits1(gb);
     if (sps->sps_cm_init_flag)
         sps->sps_adcc_flag = get_bits1(gb);
 
     sps->sps_iqt_flag = get_bits1(gb);
     if (sps->sps_iqt_flag)
         sps->sps_ats_flag = get_bits1(gb);
 
     sps->sps_addb_flag = get_bits1(gb);
     sps->sps_alf_flag = get_bits1(gb);
     sps->sps_htdf_flag = get_bits1(gb);
     sps->sps_rpl_flag = get_bits1(gb);
     sps->sps_pocs_flag = get_bits1(gb);
     sps->sps_dquant_flag = get_bits1(gb);
     sps->sps_dra_flag = get_bits1(gb);
 
     if (sps->sps_pocs_flag) {
         sps->log2_max_pic_order_cnt_lsb_minus4 = get_ue_golomb(gb);
         if (sps->log2_max_pic_order_cnt_lsb_minus4 > 12U) {
             ret = AVERROR_INVALIDDATA;
             goto fail;
         }
     }
 
     if (!sps->sps_pocs_flag || !sps->sps_rpl_flag) {
         sps->log2_sub_gop_length = get_ue_golomb(gb);
         if (sps->log2_sub_gop_length > 5U) {
             ret = AVERROR_INVALIDDATA;
             goto fail;
         }
         if (sps->log2_sub_gop_length == 0)
             sps->log2_ref_pic_gap_length = get_ue_golomb(gb);
     }
 
     if (!sps->sps_rpl_flag)
         sps->max_num_tid0_ref_pics = get_ue_golomb_31(gb);
     else {
         sps->sps_max_dec_pic_buffering_minus1 = get_ue_golomb_long(gb);
         sps->long_term_ref_pic_flag = get_bits1(gb);
         sps->rpl1_same_as_rpl0_flag = get_bits1(gb);
         sps->num_ref_pic_list_in_sps[0] = get_ue_golomb(gb);
 
+        if ((unsigned)sps->num_ref_pic_list_in_sps[0] >= EVC_MAX_NUM_RPLS) {
+            ret = AVERROR_INVALIDDATA;
+            goto fail;
+        }
+
         for (int i = 0; i < sps->num_ref_pic_list_in_sps[0]; ++i)
             ref_pic_list_struct(gb, &sps->rpls[0][i]);
 
         if (!sps->rpl1_same_as_rpl0_flag) {
             sps->num_ref_pic_list_in_sps[1] = get_ue_golomb(gb);
+            if ((unsigned)sps->num_ref_pic_list_in_sps[1] >= EVC_MAX_NUM_RPLS) {
+                ret = AVERROR_INVALIDDATA;
+                goto fail;
+            }
             for (int i = 0; i < sps->num_ref_pic_list_in_sps[1]; ++i)
                 ref_pic_list_struct(gb, &sps->rpls[1][i]);
         }
     }
 
     sps->picture_cropping_flag = get_bits1(gb);
 
     if (sps->picture_cropping_flag) {
         sps->picture_crop_left_offset = get_ue_golomb_long(gb);
         sps->picture_crop_right_offset = get_ue_golomb_long(gb);
         sps->picture_crop_top_offset = get_ue_golomb_long(gb);
         sps->picture_crop_bottom_offset = get_ue_golomb_long(gb);
     }
 
     if (sps->chroma_format_idc != 0) {
         sps->chroma_qp_table_struct.chroma_qp_table_present_flag = get_bits1(gb);
 
         if (sps->chroma_qp_table_struct.chroma_qp_table_present_flag) {
             sps->chroma_qp_table_struct.same_qp_table_for_chroma = get_bits1(gb);
             sps->chroma_qp_table_struct.global_offset_flag = get_bits1(gb);
             for (int i = 0; i < (sps->chroma_qp_table_struct.same_qp_table_for_chroma ? 1 : 2); i++) {
                 sps->chroma_qp_table_struct.num_points_in_qp_table_minus1[i] = get_ue_golomb(gb);
                 if (sps->chroma_qp_table_struct.num_points_in_qp_table_minus1[i] >= EVC_MAX_QP_TABLE_SIZE) {
                     ret = AVERROR_INVALIDDATA;
                     goto fail;
                 }
                 for (int j = 0; j <= sps->chroma_qp_table_struct.num_points_in_qp_table_minus1[i]; j++) {
                     sps->chroma_qp_table_struct.delta_qp_in_val_minus1[i][j] = get_bits(gb, 6);
                     sps->chroma_qp_table_struct.delta_qp_out_val[i][j] = get_se_golomb_long(gb);
                 }
             }
         }
     }
 
     sps->vui_parameters_present_flag = get_bits1(gb);
     if (sps->vui_parameters_present_flag)
         vui_parameters(gb, &(sps->vui_parameters));
 
     // @note
     // If necessary, add the missing fields to the EVCParserSPS structure
     // and then extend parser implementation
 
     av_freep(&ps->sps[sps_seq_parameter_set_id]);
     ps->sps[sps_seq_parameter_set_id] = sps;
 
     return 0;
