commit 2900f611a0947e18f1d3a28d6059bad10f3ff24f
Author: NinethDimension <songcongcongx@gmail.com>
Date:   Tue Jun 2 11:25:33 2020 +0800

    Update DnsLayer.cpp
    
    Change numOfOtherResources's type from uint16_t to uint32_t . Solved the bug of DNS resources number more than 65535 and less than 65835.

diff --git a/Packet++/src/DnsLayer.cpp b/Packet++/src/DnsLayer.cpp
index 3729a187..c80a7a28 100644
--- a/Packet++/src/DnsLayer.cpp
+++ b/Packet++/src/DnsLayer.cpp
@@ -124,89 +124,89 @@ bool DnsLayer::shortenLayer(int offsetInLayer, size_t numOfBytesToShorten, IDnsR
 void DnsLayer::parseResources()
 {
 	size_t offsetInPacket = sizeof(dnshdr);
 	IDnsResource* curResource = m_ResourceList;
 
 	uint16_t numOfQuestions = be16toh(getDnsHeader()->numberOfQuestions);
 	uint16_t numOfAnswers = be16toh(getDnsHeader()->numberOfAnswers);
 	uint16_t numOfAuthority = be16toh(getDnsHeader()->numberOfAuthority);
 	uint16_t numOfAdditional = be16toh(getDnsHeader()->numberOfAdditional);
 
-	uint16_t numOfOtherResources = numOfQuestions + numOfAnswers + numOfAuthority + numOfAdditional;
+	uint32_t numOfOtherResources = numOfQuestions + numOfAnswers + numOfAuthority + numOfAdditional;
 
 	if (numOfOtherResources > 300)
 	{
 		LOG_ERROR("DNS layer contains more than 300 resources, probably a bad packet. "
 				"Skipping parsing DNS resources");
 		return;
 	}
 
-	for (uint16_t i = 0; i < numOfOtherResources; i++)
+	for (uint32_t i = 0; i < numOfOtherResources; i++)
 	{
 		DnsResourceType resType;
 		if (numOfQuestions > 0)
 		{
 			resType = DnsQueryType;
 			numOfQuestions--;
 		}
 		else if (numOfAnswers > 0)
 		{
 			resType = DnsAnswerType;
 			numOfAnswers--;
 		}
 		else if (numOfAuthority > 0)
 		{
 			resType = DnsAuthorityType;
 			numOfAuthority--;
 		}
 		else
 		{
 			resType = DnsAdditionalType;
 			numOfAdditional--;
 		}
 
 		DnsResource* newResource = NULL;
 		DnsQuery* newQuery = NULL;
 		IDnsResource* newGenResource = NULL;
 		if (resType == DnsQueryType)
 		{
 			newQuery = new DnsQuery(this, offsetInPacket);
 			newGenResource = newQuery;
 			offsetInPacket += newQuery->getSize();
 		}
 		else
 		{
 			newResource = new DnsResource(this, offsetInPacket, resType);
 			newGenResource = newResource;
 			offsetInPacket += newResource->getSize();
 		}
 
 		if (offsetInPacket > m_DataLen)
 		{
 			//Parse packet failed, DNS resource is out of bounds. Probably a bad packet
 			delete newGenResource;
 			return;
 		}
 
 		// this resource is the first resource
 		if (m_ResourceList == NULL)
 		{
 			m_ResourceList = newGenResource;
 			curResource = m_ResourceList;
 		}
 		else
 		{
 			curResource->setNexResource(newGenResource);
 			curResource = curResource->getNextResource();
 		}
 
 		if (resType == DnsQueryType && m_FirstQuery == NULL)
 			m_FirstQuery = newQuery;
 		else if (resType == DnsAnswerType && m_FirstAnswer == NULL)
 			m_FirstAnswer = newResource;
 		else if (resType == DnsAuthorityType && m_FirstAuthority == NULL)
 			m_FirstAuthority = newResource;
 		else if (resType == DnsAdditionalType && m_FirstAdditional == NULL)
 			m_FirstAdditional = newResource;
 	}
 
 }
