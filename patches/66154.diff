commit ddda373eb529035db3b6b54433523853368ef05d
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Tue Feb 6 12:53:03 2024 +0100

    xmlreader: Make xmlTextReaderValidateEntity return an error code
    
    This makes sure that xmlTextReaderRead returns -1 if a memory
    allocation fails.

diff --git a/xmlreader.c b/xmlreader.c
index 6486c7da..9cd01759 100644
--- a/xmlreader.c
+++ b/xmlreader.c
@@ -999,102 +999,104 @@ xmlTextReaderValidatePop(xmlTextReaderPtr reader) {
 /**
  * xmlTextReaderValidateEntity:
  * @reader:  the xmlTextReaderPtr used
  *
  * Handle the validation when an entity reference is encountered and
  * entity substitution is not activated. As a result the parser interface
  * must walk through the entity and do the validation calls
  */
-static void
+static int
 xmlTextReaderValidateEntity(xmlTextReaderPtr reader) {
     xmlNodePtr oldnode = reader->node;
     xmlNodePtr node = reader->node;
 
     do {
 	if (node->type == XML_ENTITY_REF_NODE) {
 	    if ((node->children != NULL) &&
 		(node->children->type == XML_ENTITY_DECL) &&
 		(node->children->children != NULL)) {
 		if (xmlTextReaderEntPush(reader, node) < 0) {
                     if (node == oldnode)
                         break;
                     goto skip_children;
                 }
 		node = node->children->children;
 		continue;
 	    } else {
 		/*
 		 * The error has probably been raised already.
 		 */
 		if (node == oldnode)
 		    break;
                 goto skip_children;
 	    }
 #ifdef LIBXML_REGEXP_ENABLED
 	} else if (node->type == XML_ELEMENT_NODE) {
 	    reader->node = node;
 	    if (xmlTextReaderValidatePush(reader) < 0)
-                return;
+                return(-1);
 	} else if ((node->type == XML_TEXT_NODE) ||
 		   (node->type == XML_CDATA_SECTION_NODE)) {
             xmlTextReaderValidateCData(reader, node->content,
 	                               xmlStrlen(node->content));
 #endif
 	}
 
 	/*
 	 * go to next node
 	 */
 	if (node->children != NULL) {
 	    node = node->children;
 	    continue;
 	} else if (node->type == XML_ELEMENT_NODE) {
 	    if (xmlTextReaderValidatePop(reader) < 0)
-                return;
+                return(-1);
 	}
 skip_children:
 	if (node->next != NULL) {
 	    node = node->next;
 	    continue;
 	}
 	do {
 	    node = node->parent;
 	    if (node->type == XML_ELEMENT_NODE) {
 	        xmlNodePtr tmp;
 		if (reader->entNr == 0) {
 		    while ((tmp = node->last) != NULL) {
 			if ((tmp->extra & NODE_IS_PRESERVED) == 0) {
 			    xmlUnlinkNode(tmp);
 			    xmlTextReaderFreeNode(reader, tmp);
 			} else
 			    break;
 		    }
 		}
 		reader->node = node;
 		if (xmlTextReaderValidatePop(reader) < 0)
-                    return;
+                    return(-1);
 	    }
 	    if ((node->type == XML_ENTITY_DECL) &&
 		(reader->ent != NULL) && (reader->ent->children == node)) {
 		node = xmlTextReaderEntPop(reader);
 	    }
 	    if (node == oldnode)
 		break;
 	    if (node->next != NULL) {
 		node = node->next;
 		break;
 	    }
 	} while ((node != NULL) && (node != oldnode));
     } while ((node != NULL) && (node != oldnode));
     reader->node = oldnode;
+
+    return(0);
 }
 #endif /* LIBXML_REGEXP_ENABLED */
 
 
 /**
  * xmlTextReaderGetSuccessor:
  * @cur:  the current node
  *
  * Get the successor of a node if available.
  *
  * Returns the successor node or NULL
  */
@@ -1414,121 +1416,122 @@ get_next_node:
 node_found:
     /*
      * If we are in the middle of a piece of CDATA make sure it's finished
      */
     if ((reader->node != NULL) &&
         (reader->node->next == NULL) &&
         ((reader->node->type == XML_TEXT_NODE) ||
 	 (reader->node->type == XML_CDATA_SECTION_NODE))) {
             if (xmlTextReaderExpand(reader) == NULL)
 	        return -1;
     }
 
 #ifdef LIBXML_XINCLUDE_ENABLED
     /*
      * Handle XInclude if asked for
      */
     if ((reader->xinclude) && (reader->in_xinclude == 0) &&
         (reader->state != XML_TEXTREADER_BACKTRACK) &&
         (reader->node != NULL) &&
 	(reader->node->type == XML_ELEMENT_NODE) &&
 	(reader->node->ns != NULL) &&
 	((xmlStrEqual(reader->node->ns->href, XINCLUDE_NS)) ||
 	 (xmlStrEqual(reader->node->ns->href, XINCLUDE_OLD_NS)))) {
 	if (reader->xincctxt == NULL) {
 	    reader->xincctxt = xmlXIncludeNewContext(reader->ctxt->myDoc);
             if (reader->xincctxt == NULL) {
                 xmlTextReaderErrMemory(reader);
                 return(-1);
             }
 	    xmlXIncludeSetFlags(reader->xincctxt,
 	                        reader->parserFlags & (~XML_PARSE_NOXINCNODE));
             xmlXIncludeSetStreamingMode(reader->xincctxt, 1);
             if ((reader->errorFunc != NULL) || (reader->sErrorFunc != NULL))
                 xmlXIncludeSetErrorHandler(reader->xincctxt,
                         xmlTextReaderStructuredRelay, reader);
 	}
 	/*
 	 * expand that node and process it
 	 */
 	if (xmlTextReaderExpand(reader) == NULL)
 	    return(-1);
         if (xmlXIncludeProcessNode(reader->xincctxt, reader->node) < 0) {
             int err = xmlXIncludeGetLastError(reader->xincctxt);
 
             if (err == XML_ERR_NO_MEMORY)
                 xmlTextReaderErrMemory(reader);
             return(-1);
         }
     }
     if ((reader->node != NULL) && (reader->node->type == XML_XINCLUDE_START)) {
         reader->in_xinclude++;
 	goto get_next_node;
     }
     if ((reader->node != NULL) && (reader->node->type == XML_XINCLUDE_END)) {
         reader->in_xinclude--;
 	goto get_next_node;
     }
 #endif
     /*
      * Handle entities enter and exit when in entity replacement mode
      */
     if ((reader->node != NULL) &&
 	(reader->node->type == XML_ENTITY_REF_NODE) &&
 	(reader->ctxt != NULL) && (reader->ctxt->replaceEntities == 1)) {
 	if ((reader->node->children != NULL) &&
 	    (reader->node->children->type == XML_ENTITY_DECL) &&
 	    (reader->node->children->children != NULL)) {
 	    if (xmlTextReaderEntPush(reader, reader->node) < 0)
                 goto get_next_node;
 	    reader->node = reader->node->children->children;
 	}
 #ifdef LIBXML_REGEXP_ENABLED
     } else if ((reader->node != NULL) &&
 	       (reader->node->type == XML_ENTITY_REF_NODE) &&
 	       (reader->ctxt != NULL) && (reader->validate)) {
-	xmlTextReaderValidateEntity(reader);
+	if (xmlTextReaderValidateEntity(reader) < 0)
+            return(-1);
 #endif /* LIBXML_REGEXP_ENABLED */
     }
     if ((reader->node != NULL) &&
 	(reader->node->type == XML_ENTITY_DECL) &&
 	(reader->ent != NULL) && (reader->ent->children == reader->node)) {
 	reader->node = xmlTextReaderEntPop(reader);
 	reader->depth++;
         goto get_next_node;
     }
 #ifdef LIBXML_REGEXP_ENABLED
     if ((reader->validate != XML_TEXTREADER_NOT_VALIDATE) && (reader->node != NULL)) {
 	xmlNodePtr node = reader->node;
 
 	if ((node->type == XML_ELEMENT_NODE) &&
             ((reader->state != XML_TEXTREADER_END) &&
 	     (reader->state != XML_TEXTREADER_BACKTRACK))) {
 	    if (xmlTextReaderValidatePush(reader) < 0)
                 return(-1);
 	} else if ((node->type == XML_TEXT_NODE) ||
 		   (node->type == XML_CDATA_SECTION_NODE)) {
             xmlTextReaderValidateCData(reader, node->content,
 	                               xmlStrlen(node->content));
 	}
     }
 #endif /* LIBXML_REGEXP_ENABLED */
 #ifdef LIBXML_PATTERN_ENABLED
     if ((reader->patternNr > 0) && (reader->state != XML_TEXTREADER_END) &&
         (reader->state != XML_TEXTREADER_BACKTRACK)) {
         int i;
 	for (i = 0;i < reader->patternNr;i++) {
 	     if (xmlPatternMatch(reader->patternTab[i], reader->node) == 1) {
 	         xmlTextReaderPreserve(reader);
 		 break;
              }
 	}
     }
 #endif /* LIBXML_PATTERN_ENABLED */
 #ifdef LIBXML_SCHEMAS_ENABLED
     if ((reader->validate == XML_TEXTREADER_VALIDATE_XSD) &&
         (reader->xsdValidErrors == 0) &&
 	(reader->xsdValidCtxt != NULL)) {
 	reader->xsdValidErrors = !xmlSchemaIsValid(reader->xsdValidCtxt);
     }
 #endif /* LIBXML_PATTERN_ENABLED */
     return(1);
