commit ecca6e54f49f251bb4c16fe145d04c2b45923dc3
Author: Christos Zoulas <christos@zoulas.com>
Date:   Wed Feb 20 16:15:47 2019 +0000

    fix casts and bounds check (found by oss-fuzz)

diff --git a/src/encoding.c b/src/encoding.c
index 81cd9259..8d84669c 100644
--- a/src/encoding.c
+++ b/src/encoding.c
@@ -35,10 +35,10 @@
 #include "file.h"
 
 #ifndef	lint
-FILE_RCSID("@(#)$File: encoding.c,v 1.17 2019/02/20 02:35:27 christos Exp $")
+FILE_RCSID("@(#)$File: encoding.c,v 1.18 2019/02/20 16:15:47 christos Exp $")
 #endif	/* lint */
 
 #include "magic.h"
 #include <string.h>
 #include <memory.h>
 #include <stdlib.h>
@@ -423,35 +423,35 @@ private int
 looks_ucs16(const unsigned char *bf, size_t nbytes, unichar *ubf,
     size_t *ulen)
 {
 	int bigend;
 	size_t i;
 
 	if (nbytes < 2)
 		return 0;
 
 	if (bf[0] == 0xff && bf[1] == 0xfe)
 		bigend = 0;
 	else if (bf[0] == 0xfe && bf[1] == 0xff)
 		bigend = 1;
 	else
 		return 0;
 
 	*ulen = 0;
 
 	for (i = 2; i + 1 < nbytes; i += 2) {
 		/* XXX fix to properly handle chars > 65536 */
 
 		if (bigend)
-			ubf[(*ulen)++] = bf[i + 1] + 256 * bf[i];
+			ubf[(*ulen)++] = bf[i + 1] + (bf[i] << 8);
 		else
-			ubf[(*ulen)++] = bf[i] + 256 * bf[i + 1];
+			ubf[(*ulen)++] = bf[i] + (bf[i + 1] << 8);
 
 		if (ubf[*ulen - 1] == 0xfffe)
 			return 0;
 		if (ubf[*ulen - 1] < 128 &&
 		    text_chars[CAST(size_t, ubf[*ulen - 1])] != T)
 			return 0;
 	}
 
 	return 1 + bigend;
 }
@@ -460,63 +460,65 @@ private int
 looks_ucs32(const unsigned char *bf, size_t nbytes, unichar *ubf,
     size_t *ulen)
 {
 	int bigend;
 	size_t i;
 
 	if (nbytes < 4)
 		return 0;
 
 	if (bf[0] == 0xff && bf[1] == 0xfe && bf[2] == 0 && bf[3] == 0)
 		bigend = 0;
 	else if (bf[0] == 0 && bf[1] == 0 && bf[2] == 0xfe && bf[3] == 0xff)
 		bigend = 1;
 	else
 		return 0;
 
 	*ulen = 0;
 
-	for (i = 4; i + 1 < nbytes; i += 4) {
+	for (i = 4; i + 3 < nbytes; i += 4) {
 		/* XXX fix to properly handle chars > 65536 */
 
 		if (bigend)
 			ubf[(*ulen)++] = bf[i + 3] | (bf[i + 2] << 8)
-			    | (bf[i + 1] << 16) | bf[i] << 24;
+			    | (bf[i + 1] << 16)
+			    | CAST(unichar, bf[i] << 24);
 		else
 			ubf[(*ulen)++] = bf[i] | (bf[i + 1] << 8) 
-			    | (bf[i + 2] << 16) | (bf[i + 3] << 24);
+			    | (bf[i + 2] << 16)
+			    | CAST(unichar, bf[i + 3] << 24);
 
 		if (ubf[*ulen - 1] == 0xfffe)
 			return 0;
 		if (ubf[*ulen - 1] < 128 &&
 		    text_chars[CAST(size_t, ubf[*ulen - 1])] != T)
 			return 0;
 	}
 
 	return 1 + bigend;
 }
 #undef F
 #undef T
 #undef I
 #undef X
 
 /*
  * This table maps each EBCDIC character to an (8-bit extended) ASCII
  * character, as specified in the rationale for the dd(1) command in
  * draft 11.2 (September, 1991) of the POSIX P1003.2 standard.
  *
  * Unfortunately it does not seem to correspond exactly to any of the
  * five variants of EBCDIC documented in IBM's _Enterprise Systems
  * Architecture/390: Principles of Operation_, SA22-7201-06, Seventh
  * Edition, July, 1999, pp. I-1 - I-4.
  *
  * Fortunately, though, all versions of EBCDIC, including this one, agree
  * on most of the printing characters that also appear in (7-bit) ASCII.
  * Of these, only '|', '!', '~', '^', '[', and ']' are in question at all.
  *
  * Fortunately too, there is general agreement that codes 0x00 through
  * 0x3F represent control characters, 0x41 a nonbreaking space, and the
  * remainder printing characters.
  *
  * This is sufficient to allow us to identify EBCDIC text and to distinguish
  * between old-style and internationalized examples of text.
  */
