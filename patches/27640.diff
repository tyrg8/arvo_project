commit 55f2b065acd477a6810d5279fcace8b42bd594f5
Author: Ilya Maximets <i.maximets@ovn.org>
Date:   Mon Dec 21 16:01:04 2020 +0100

    odp-util: Fix netlink message overflow with userdata.
    
    Too big userdata could overflow netlink message leading to out-of-bound
    memory accesses or assertion while formatting nested actions.
    
    Fix that by checking the size and returning correct error code.
    
    Credit to OSS-Fuzz.
    
    Reported-at: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=27640
    Fixes: e995e3df57ea ("Allow OVS_USERSPACE_ATTR_USERDATA to be variable length.")
    Signed-off-by: Ilya Maximets <i.maximets@ovn.org>
    Acked-by: Flavio Leitner <fbl@sysclose.org>

diff --git a/lib/odp-util.c b/lib/odp-util.c
index 252a91bfa..d65ebb541 100644
--- a/lib/odp-util.c
+++ b/lib/odp-util.c
@@ -1300,196 +1300,202 @@ static int
 parse_odp_userspace_action(const char *s, struct ofpbuf *actions)
 {
     uint32_t pid;
     struct user_action_cookie cookie;
     struct ofpbuf buf;
     odp_port_t tunnel_out_port;
     int n = -1;
     void *user_data = NULL;
     size_t user_data_size = 0;
     bool include_actions = false;
     int res;
 
     if (!ovs_scan(s, "userspace(pid=%"SCNi32"%n", &pid, &n)) {
         return -EINVAL;
     }
 
     ofpbuf_init(&buf, 16);
     memset(&cookie, 0, sizeof cookie);
 
     user_data = &cookie;
     user_data_size = sizeof cookie;
     {
         uint32_t output;
         uint32_t probability;
         uint32_t collector_set_id;
         uint32_t obs_domain_id;
         uint32_t obs_point_id;
 
         /* USER_ACTION_COOKIE_CONTROLLER. */
         uint8_t dont_send;
         uint8_t continuation;
         uint16_t reason;
         uint32_t recirc_id;
         uint64_t rule_cookie;
         uint16_t controller_id;
         uint16_t max_len;
 
         int vid, pcp;
         int n1 = -1;
         if (ovs_scan(&s[n], ",sFlow(vid=%i,"
                      "pcp=%i,output=%"SCNi32")%n",
                      &vid, &pcp, &output, &n1)) {
             uint16_t tci;
 
             n += n1;
             tci = vid | (pcp << VLAN_PCP_SHIFT);
             if (tci) {
                 tci |= VLAN_CFI;
             }
 
             cookie.type = USER_ACTION_COOKIE_SFLOW;
             cookie.ofp_in_port = OFPP_NONE;
             cookie.ofproto_uuid = UUID_ZERO;
             cookie.sflow.vlan_tci = htons(tci);
             cookie.sflow.output = output;
         } else if (ovs_scan(&s[n], ",slow_path(%n",
                             &n1)) {
             n += n1;
             cookie.type = USER_ACTION_COOKIE_SLOW_PATH;
             cookie.ofp_in_port = OFPP_NONE;
             cookie.ofproto_uuid = UUID_ZERO;
             cookie.slow_path.reason = 0;
 
             res = parse_odp_flags(&s[n], slow_path_reason_to_string,
                                   &cookie.slow_path.reason,
                                   SLOW_PATH_REASON_MASK, NULL);
             if (res < 0 || s[n + res] != ')') {
                 goto out;
             }
             n += res + 1;
         } else if (ovs_scan(&s[n], ",flow_sample(probability=%"SCNi32","
                             "collector_set_id=%"SCNi32","
                             "obs_domain_id=%"SCNi32","
                             "obs_point_id=%"SCNi32","
                             "output_port=%"SCNi32"%n",
                             &probability, &collector_set_id,
                             &obs_domain_id, &obs_point_id,
                             &output, &n1)) {
             n += n1;
 
             cookie.type = USER_ACTION_COOKIE_FLOW_SAMPLE;
             cookie.ofp_in_port = OFPP_NONE;
             cookie.ofproto_uuid = UUID_ZERO;
             cookie.flow_sample.probability = probability;
             cookie.flow_sample.collector_set_id = collector_set_id;
             cookie.flow_sample.obs_domain_id = obs_domain_id;
             cookie.flow_sample.obs_point_id = obs_point_id;
             cookie.flow_sample.output_odp_port = u32_to_odp(output);
 
             if (ovs_scan(&s[n], ",ingress%n", &n1)) {
                 cookie.flow_sample.direction = NX_ACTION_SAMPLE_INGRESS;
                 n += n1;
             } else if (ovs_scan(&s[n], ",egress%n", &n1)) {
                 cookie.flow_sample.direction = NX_ACTION_SAMPLE_EGRESS;
                 n += n1;
             } else {
                 cookie.flow_sample.direction = NX_ACTION_SAMPLE_DEFAULT;
             }
             if (s[n] != ')') {
                 res = -EINVAL;
                 goto out;
             }
             n++;
         } else if (ovs_scan(&s[n], ",ipfix(output_port=%"SCNi32")%n",
                             &output, &n1) ) {
             n += n1;
             cookie.type = USER_ACTION_COOKIE_IPFIX;
             cookie.ofp_in_port = OFPP_NONE;
             cookie.ofproto_uuid = UUID_ZERO;
             cookie.ipfix.output_odp_port = u32_to_odp(output);
         } else if (ovs_scan(&s[n], ",controller(reason=%"SCNu16
                               ",dont_send=%"SCNu8
                               ",continuation=%"SCNu8
                               ",recirc_id=%"SCNu32
                               ",rule_cookie=%"SCNx64
                               ",controller_id=%"SCNu16
                               ",max_len=%"SCNu16")%n",
                               &reason, &dont_send, &continuation, &recirc_id,
                               &rule_cookie, &controller_id, &max_len, &n1)) {
             n += n1;
             cookie.type = USER_ACTION_COOKIE_CONTROLLER;
             cookie.ofp_in_port = OFPP_NONE;
             cookie.ofproto_uuid = UUID_ZERO;
             cookie.controller.dont_send = dont_send ? true : false;
             cookie.controller.continuation = continuation ? true : false;
             cookie.controller.reason = reason;
             cookie.controller.recirc_id = recirc_id;
             put_32aligned_be64(&cookie.controller.rule_cookie,
                                htonll(rule_cookie));
             cookie.controller.controller_id = controller_id;
             cookie.controller.max_len = max_len;
        } else if (ovs_scan(&s[n], ",userdata(%n", &n1)) {
             char *end;
 
             n += n1;
             end = ofpbuf_put_hex(&buf, &s[n], NULL);
             if (end[0] != ')') {
                 res = -EINVAL;
                 goto out;
             }
             user_data = buf.data;
             user_data_size = buf.size;
             n = (end + 1) - s;
         }
     }
 
     {
         int n1 = -1;
         if (ovs_scan(&s[n], ",actions%n", &n1)) {
             n += n1;
             include_actions = true;
         }
     }
 
     {
         int n1 = -1;
         if (ovs_scan(&s[n], ",tunnel_out_port=%"SCNi32")%n",
                      &tunnel_out_port, &n1)) {
-            odp_put_userspace_action(pid, user_data, user_data_size,
-                                     tunnel_out_port, include_actions, actions);
-            res = n + n1;
+            res = odp_put_userspace_action(pid, user_data, user_data_size,
+                                           tunnel_out_port, include_actions,
+                                           actions, NULL);
+            if (!res) {
+                res = n + n1;
+            }
             goto out;
         } else if (s[n] == ')') {
-            odp_put_userspace_action(pid, user_data, user_data_size,
-                                     ODPP_NONE, include_actions, actions);
-            res = n + 1;
+            res = odp_put_userspace_action(pid, user_data, user_data_size,
+                                           ODPP_NONE, include_actions,
+                                           actions, NULL);
+            if (!res) {
+                res = n + 1;
+            }
             goto out;
         }
     }
 
     {
         struct ovs_action_push_eth push;
         int eth_type = 0;
         int n1 = -1;
 
         if (ovs_scan(&s[n], "push_eth(src="ETH_ADDR_SCAN_FMT","
                      "dst="ETH_ADDR_SCAN_FMT",type=%i)%n",
                      ETH_ADDR_SCAN_ARGS(push.addresses.eth_src),
                      ETH_ADDR_SCAN_ARGS(push.addresses.eth_dst),
                      &eth_type, &n1)) {
 
             nl_msg_put_unspec(actions, OVS_ACTION_ATTR_PUSH_ETH,
                               &push, sizeof push);
 
             res = n + n1;
             goto out;
         }
     }
 
     if (!strncmp(&s[n], "pop_eth", 7)) {
         nl_msg_put_flag(actions, OVS_ACTION_ATTR_POP_ETH);
         res = 7;
         goto out;
     }
 
     res = -EINVAL;
@@ -7542,65 +7548,78 @@ const char *
 odp_key_fitness_to_string(enum odp_key_fitness fitness)
 {
     switch (fitness) {
     case ODP_FIT_PERFECT:
         return "OK";
     case ODP_FIT_TOO_MUCH:
         return "too_much";
     case ODP_FIT_TOO_LITTLE:
         return "too_little";
     case ODP_FIT_ERROR:
         return "error";
     default:
         return "<unknown>";
     }
 }
 
 /* Appends an OVS_ACTION_ATTR_USERSPACE action to 'odp_actions' that specifies
  * Netlink PID 'pid'.  If 'userdata' is nonnull, adds a userdata attribute
- * whose contents are the 'userdata_size' bytes at 'userdata' and returns the
- * offset within 'odp_actions' of the start of the cookie.  (If 'userdata' is
- * null, then the return value is not meaningful.) */
-size_t
+ * whose contents are the 'userdata_size' bytes at 'userdata' and sets
+ * 'odp_actions_ofs' if nonnull with the offset within 'odp_actions' of the
+ * start of the cookie.  (If 'userdata' is null, then the 'odp_actions_ofs'
+ * value is not meaningful.)
+ *
+ * Returns negative error code on failure. */
+int
 odp_put_userspace_action(uint32_t pid,
                          const void *userdata, size_t userdata_size,
                          odp_port_t tunnel_out_port,
                          bool include_actions,
-                         struct ofpbuf *odp_actions)
+                         struct ofpbuf *odp_actions, size_t *odp_actions_ofs)
 {
     size_t userdata_ofs;
     size_t offset;
 
     offset = nl_msg_start_nested(odp_actions, OVS_ACTION_ATTR_USERSPACE);
     nl_msg_put_u32(odp_actions, OVS_USERSPACE_ATTR_PID, pid);
     if (userdata) {
+        if (nl_attr_oversized(userdata_size)) {
+            return -E2BIG;
+        }
         userdata_ofs = odp_actions->size + NLA_HDRLEN;
 
         /* The OVS kernel module before OVS 1.11 and the upstream Linux kernel
          * module before Linux 3.10 required the userdata to be exactly 8 bytes
          * long:
          *
          *   - The kernel rejected shorter userdata with -ERANGE.
          *
          *   - The kernel silently dropped userdata beyond the first 8 bytes.
          *
          * Thus, for maximum compatibility, always put at least 8 bytes.  (We
          * separately disable features that required more than 8 bytes.) */
         memcpy(nl_msg_put_unspec_zero(odp_actions, OVS_USERSPACE_ATTR_USERDATA,
                                       MAX(8, userdata_size)),
                userdata, userdata_size);
     } else {
         userdata_ofs = 0;
     }
     if (tunnel_out_port != ODPP_NONE) {
         nl_msg_put_odp_port(odp_actions, OVS_USERSPACE_ATTR_EGRESS_TUN_PORT,
                             tunnel_out_port);
     }
     if (include_actions) {
         nl_msg_put_flag(odp_actions, OVS_USERSPACE_ATTR_ACTIONS);
     }
+    if (nl_attr_oversized(odp_actions->size - offset - NLA_HDRLEN)) {
+        return -E2BIG;
+    }
     nl_msg_end_nested(odp_actions, offset);
 
-    return userdata_ofs;
+    if (odp_actions_ofs) {
+        *odp_actions_ofs = userdata_ofs;
+    }
+
+    return 0;
 }
 
 void
diff --git a/lib/odp-util.h b/lib/odp-util.h
index 623a66aa2..a1d0d0fba 100644
--- a/lib/odp-util.h
+++ b/lib/odp-util.h
@@ -356,11 +356,12 @@ struct user_action_cookie {
 };
 BUILD_ASSERT_DECL(sizeof(struct user_action_cookie) == 48);
 
-size_t odp_put_userspace_action(uint32_t pid,
-                                const void *userdata, size_t userdata_size,
-                                odp_port_t tunnel_out_port,
-                                bool include_actions,
-                                struct ofpbuf *odp_actions);
+int odp_put_userspace_action(uint32_t pid,
+                             const void *userdata, size_t userdata_size,
+                             odp_port_t tunnel_out_port,
+                             bool include_actions,
+                             struct ofpbuf *odp_actions,
+                             size_t *odp_actions_ofs);
 void odp_put_tunnel_action(const struct flow_tnl *tunnel,
                            struct ofpbuf *odp_actions,
                            const char *tnl_type);
diff --git a/ofproto/ofproto-dpif-upcall.c b/ofproto/ofproto-dpif-upcall.c
index d79f48aa7..5fae46adf 100644
--- a/ofproto/ofproto-dpif-upcall.c
+++ b/ofproto/ofproto-dpif-upcall.c
@@ -1055,44 +1055,44 @@ static void
 compose_slow_path(struct udpif *udpif, struct xlate_out *xout,
                   odp_port_t odp_in_port, ofp_port_t ofp_in_port,
                   struct ofpbuf *buf, uint32_t meter_id,
                   struct uuid *ofproto_uuid)
 {
     struct user_action_cookie cookie;
     odp_port_t port;
     uint32_t pid;
 
     memset(&cookie, 0, sizeof cookie);
     cookie.type = USER_ACTION_COOKIE_SLOW_PATH;
     cookie.ofp_in_port = ofp_in_port;
     cookie.ofproto_uuid = *ofproto_uuid;
     cookie.slow_path.reason = xout->slow;
 
     port = xout->slow & (SLOW_CFM | SLOW_BFD | SLOW_LACP | SLOW_STP)
         ? ODPP_NONE
         : odp_in_port;
     pid = dpif_port_get_pid(udpif->dpif, port);
 
     size_t offset;
     size_t ac_offset;
     if (meter_id != UINT32_MAX) {
         /* If slowpath meter is configured, generate clone(meter, userspace)
          * action. */
         offset = nl_msg_start_nested(buf, OVS_ACTION_ATTR_SAMPLE);
         nl_msg_put_u32(buf, OVS_SAMPLE_ATTR_PROBABILITY, UINT32_MAX);
         ac_offset = nl_msg_start_nested(buf, OVS_SAMPLE_ATTR_ACTIONS);
         nl_msg_put_u32(buf, OVS_ACTION_ATTR_METER, meter_id);
     }
 
     odp_put_userspace_action(pid, &cookie, sizeof cookie,
-                             ODPP_NONE, false, buf);
+                             ODPP_NONE, false, buf, NULL);
 
     if (meter_id != UINT32_MAX) {
         nl_msg_end_nested(buf, ac_offset);
         nl_msg_end_nested(buf, offset);
     }
 }
 
 /* If there is no error, the upcall must be destroyed with upcall_uninit()
  * before quiescing, as the referred objects are guaranteed to exist only
  * until the calling thread quiesces.  Otherwise, do not call upcall_uninit()
  * since the 'upcall->put_actions' remains uninitialized. */
diff --git a/ofproto/ofproto-dpif-xlate.c b/ofproto/ofproto-dpif-xlate.c
index 4ea776052..2715a142b 100644
--- a/ofproto/ofproto-dpif-xlate.c
+++ b/ofproto/ofproto-dpif-xlate.c
@@ -3190,57 +3190,56 @@ static size_t
 compose_sample_action(struct xlate_ctx *ctx,
                       const uint32_t probability,
                       const struct user_action_cookie *cookie,
                       const odp_port_t tunnel_out_port,
                       bool include_actions)
 {
     if (probability == 0) {
         /* No need to generate sampling or the inner action. */
         return 0;
     }
 
     /* If the slow path meter is configured by the controller,
      * insert a meter action before the user space action.  */
     struct ofproto *ofproto = &ctx->xin->ofproto->up;
     uint32_t meter_id = ofproto->slowpath_meter_id;
 
     /* When meter action is not required, avoid generate sample action
      * for 100% sampling rate.  */
     bool is_sample = probability < UINT32_MAX || meter_id != UINT32_MAX;
     size_t sample_offset = 0, actions_offset = 0;
     if (is_sample) {
         sample_offset = nl_msg_start_nested(ctx->odp_actions,
                                             OVS_ACTION_ATTR_SAMPLE);
         nl_msg_put_u32(ctx->odp_actions, OVS_SAMPLE_ATTR_PROBABILITY,
                        probability);
         actions_offset = nl_msg_start_nested(ctx->odp_actions,
                                              OVS_SAMPLE_ATTR_ACTIONS);
     }
 
     if (meter_id != UINT32_MAX) {
         nl_msg_put_u32(ctx->odp_actions, OVS_ACTION_ATTR_METER, meter_id);
     }
 
     odp_port_t odp_port = ofp_port_to_odp_port(
         ctx->xbridge, ctx->xin->flow.in_port.ofp_port);
     uint32_t pid = dpif_port_get_pid(ctx->xbridge->dpif, odp_port);
-    size_t cookie_offset = odp_put_userspace_action(pid, cookie,
-                                                    sizeof *cookie,
-                                                    tunnel_out_port,
-                                                    include_actions,
-                                                    ctx->odp_actions);
-
+    size_t cookie_offset;
+    int res = odp_put_userspace_action(pid, cookie, sizeof *cookie,
+                                       tunnel_out_port, include_actions,
+                                       ctx->odp_actions, &cookie_offset);
+    ovs_assert(res == 0);
     if (is_sample) {
         nl_msg_end_nested(ctx->odp_actions, actions_offset);
         nl_msg_end_nested(ctx->odp_actions, sample_offset);
     }
 
     return cookie_offset;
 }
 
 /* If sFLow is not enabled, returns 0 without doing anything.
  *
  * If sFlow is enabled, appends a template "sample" action to the ODP actions
  * in 'ctx'.  This action is a template because some of the information needed
  * to fill it out is not available until flow translation is complete.  In this
  * case, this functions returns an offset, which is always nonzero, to pass
  * later to fix_sflow_action() to fill in the rest of the template. */
@@ -4811,28 +4810,28 @@ static void
 put_controller_user_action(struct xlate_ctx *ctx,
                            bool dont_send, bool continuation,
                            uint32_t recirc_id, int len,
                            enum ofp_packet_in_reason reason,
                            uint16_t controller_id)
 {
     struct user_action_cookie cookie;
 
     memset(&cookie, 0, sizeof cookie);
     cookie.type = USER_ACTION_COOKIE_CONTROLLER;
     cookie.ofp_in_port = OFPP_NONE,
     cookie.ofproto_uuid = ctx->xbridge->ofproto->uuid;
     cookie.controller.dont_send = dont_send;
     cookie.controller.continuation = continuation;
     cookie.controller.reason = reason;
     cookie.controller.recirc_id = recirc_id;
     put_32aligned_be64(&cookie.controller.rule_cookie, ctx->rule_cookie);
     cookie.controller.controller_id = controller_id;
     cookie.controller.max_len = len;
 
     odp_port_t odp_port = ofp_port_to_odp_port(ctx->xbridge,
                                              ctx->xin->flow.in_port.ofp_port);
     uint32_t pid = dpif_port_get_pid(ctx->xbridge->dpif, odp_port);
     odp_put_userspace_action(pid, &cookie, sizeof cookie, ODPP_NONE,
-                             false, ctx->odp_actions);
+                             false, ctx->odp_actions, NULL);
 }
 
 static void
diff --git a/tests/odp.at b/tests/odp.at
index 1ebdf0515..b762ebb2b 100644
--- a/tests/odp.at
+++ b/tests/odp.at
@@ -398,6 +398,43 @@ odp_actions_from_string: error
 ])
 AT_CLEANUP
 
+AT_SETUP([OVS datapath actions parsing and formatting - userdata overflow])
+dnl Userdata should fit in a single netlink message, i.e. should be less than
+dnl UINT16_MAX - NLA_HDRLEN = 65535 - 4 = 65531 bytes.  OVS should not accept
+dnl larger userdata.  OTOH, userdata is part of a nested netlink message, that
+dnl should not be oversized too.  'pid' takes NLA_HDRLEN + 4 = 8 bytes.
+dnl Plus NLA_HDRLEN for the nested header.  'actions' flag takes NLA_HDRLEN = 4
+dnl and 'tunnel_out_port' takes NLA_HDRLEN + 4 = 8 bytes.
+dnl So, for the variant with 'actions' maximum length of userdata should be:
+dnl UINT16_MAX -  NLA_HDRLEN   - (NLA_HDRLEN + 4) - NLA_HDRLEN - NLA_HDRLEN
+dnl  total max   nested header        pid             actions     userdata
+dnl Result: 65515 bytes for the actual userdata.
+dnl For the case with 'tunnel_out_port': 65511
+dnl Size of userdata will be rounded up to be multiple of 4, so highest
+dnl acceptable sizes are 65512 and 65508.
+
+dnl String with length 65512 * 2 = 131024 is valid, while 131026 is not.
+data_valid=$(  printf '%*s' 131024 | tr ' ' "a")
+data_invalid=$(printf '%*s' 131026 | tr ' ' "a")
+
+echo "userspace(pid=1234567,userdata(${data_valid}),actions)" > actions.txt
+echo "userspace(pid=1234567,userdata(${data_invalid}),actions)" >> actions.txt
+
+dnl String with length 65508 * 2 = 131016 is valid, while 131018 is not.
+data_valid=$(  printf '%*s' 131016 | tr ' ' "a")
+data_invalid=$(printf '%*s' 131018 | tr ' ' "a")
+
+echo "userspace(pid=1234567,userdata(${data_valid}),tunnel_out_port=10)" >> actions.txt
+echo "userspace(pid=1234567,userdata(${data_invalid}),tunnel_out_port=10)" >> actions.txt
+
+AT_CHECK_UNQUOTED([ovstest test-odp parse-actions < actions.txt], [0], [dnl
+`cat actions.txt | head -1`
+odp_actions_from_string: error
+`cat actions.txt | head -3 | tail -1`
+odp_actions_from_string: error
+])
+AT_CLEANUP
+
 AT_SETUP([OVS datapath keys parsing and formatting - 33 nested encap ])
 AT_DATA([odp-in.txt], [dnl
 encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap(encap()))))))))))))))))))))))))))))))))
