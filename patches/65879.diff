commit d186582d30a123e4f884c8d9a31c0387e019b076
Author: Tim Ledbetter <timledbetter@gmail.com>
Date:   Wed Jan 17 19:39:29 2024 +0000

    LibAudio: Avoid UAF when loading WAV metadata

diff --git a/Userland/Libraries/LibAudio/WavLoader.cpp b/Userland/Libraries/LibAudio/WavLoader.cpp
index 3f25ab2ed1..57fed364d6 100644
--- a/Userland/Libraries/LibAudio/WavLoader.cpp
+++ b/Userland/Libraries/LibAudio/WavLoader.cpp
@@ -296,41 +296,42 @@ MaybeLoaderError WavLoaderPlugin::parse_header()
 // http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/Docs/riffmci.pdf page 23 (LIST type)
 // We only recognize the relevant official metadata types; types added in later errata of RIFF are not relevant for audio.
 MaybeLoaderError WavLoaderPlugin::load_wav_info_block(Vector<RIFF::OwnedChunk> info_chunks)
 {
     for (auto const& chunk : info_chunks) {
-        auto metadata_name = chunk.id().as_ascii_string();
+        auto chunk_id = chunk.id();
+        auto metadata_name = chunk_id.as_ascii_string();
         // Chunk contents are zero-terminated strings "ZSTR", so we just drop the null terminator.
         StringView metadata_text { chunk.data().trim(chunk.size() - 1) };
         // Note that we assume chunks to be unique, since that seems to almost always be the case.
         // Worst case we just drop some metadata.
         if (metadata_name == "IART"sv) {
             // Artists are combined together with semicolons, at least when you edit them in Windows File Explorer.
             auto artists = metadata_text.split_view(";"sv);
             for (auto artist : artists)
                 TRY(m_metadata.add_person(Person::Role::Artist, TRY(String::from_utf8(artist))));
         } else if (metadata_name == "ICMT"sv) {
             m_metadata.comment = TRY(String::from_utf8(metadata_text));
         } else if (metadata_name == "ICOP"sv) {
             m_metadata.copyright = TRY(String::from_utf8(metadata_text));
         } else if (metadata_name == "ICRD"sv) {
             m_metadata.unparsed_time = TRY(String::from_utf8(metadata_text));
         } else if (metadata_name == "IENG"sv) {
             TRY(m_metadata.add_person(Person::Role::Engineer, TRY(String::from_utf8(metadata_text))));
         } else if (metadata_name == "IGNR"sv) {
             m_metadata.genre = TRY(String::from_utf8(metadata_text));
         } else if (metadata_name == "INAM"sv) {
             m_metadata.title = TRY(String::from_utf8(metadata_text));
         } else if (metadata_name == "IPRD"sv) {
             m_metadata.album = TRY(String::from_utf8(metadata_text));
         } else if (metadata_name == "ISFT"sv) {
             m_metadata.encoder = TRY(String::from_utf8(metadata_text));
         } else if (metadata_name == "ISRC"sv) {
             TRY(m_metadata.add_person(Person::Role::Publisher, TRY(String::from_utf8(metadata_text))));
         } else {
             TRY(m_metadata.add_miscellaneous(TRY(String::from_utf8(metadata_name)), TRY(String::from_utf8(metadata_text))));
         }
     }
     return {};
 }
 
 }
