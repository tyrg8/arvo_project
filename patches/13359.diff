commit 734ef70e7e719e7aa777dbafbc727225bf71980a
Author: Tim RÃ¼hsen <tim.ruehsen@gmx.de>
Date:   Sun Feb 24 11:55:33 2019 +0100

    Fix overflow introduced in ce0d453222ca51c056f4f442988710eb0b696365

diff --git a/lib/puny_decode.c b/lib/puny_decode.c
index 13a5fe6..0d5f3f2 100644
--- a/lib/puny_decode.c
+++ b/lib/puny_decode.c
@@ -137,82 +137,84 @@ static punycode_uint adapt(
 int punycode_decode(
   size_t input_length,
   const char input[],
   size_t *output_length,
   punycode_uint output[])
 {
   punycode_uint n, out, i, max_out, bias, oldi, w, k, digit, t;
   size_t b, j, in;
 
   /* Initialize the state: */
   n = initial_n;
   out = i = 0;
   max_out = *output_length > maxint ? maxint
             : (punycode_uint) *output_length;
   bias = initial_bias;
 
   /* Handle the basic code points:  Let b be the number of input code */
   /* points before the last delimiter, or 0 if there is none, then    */
   /* copy the first b code points to the output.                      */
 
   for (b = j = 0;  j < input_length;  ++j)  if (delim(input[j])) b = j;
   if (b >= max_out) return punycode_big_output;
 
   for (j = 0;  j < b;  ++j) {
     if (!basic(input[j])) return punycode_bad_input;
     output[out++] = input[j];
   }
-  b += delim(input[b]);
+
+  if (input_length)
+    b += delim(input[b]);
 
   for (j = b;  j < input_length;  ++j)
     if (!basic(input[j])) return punycode_bad_input;
 
   /* Main decoding loop:  Start just after the last delimiter if any  */
   /* basic code points were copied; start at the beginning otherwise. */
 
   for (in = b;  in < input_length;  ++out) {
 
     /* in is the index of the next ASCII code point to be consumed, */
     /* and out is the number of code points in the output array.    */
 
     /* Decode a generalized variable-length integer into delta,  */
     /* which gets added to i.  The overflow checking is easier   */
     /* if we increase i as we go, then subtract off its starting */
     /* value at the end to obtain delta.                         */
 
     for (oldi = i, w = 1, k = base;  ;  k += base) {
       if (in >= input_length) return punycode_bad_input;
       digit = decode_digit(input[in++]);
       if (digit >= base) return punycode_bad_input;
       if (digit > (maxint - i) / w) return punycode_overflow;
       i += digit * w;
       t = k <= bias /* + tmin */ ? tmin :     /* +tmin not needed */
           k >= bias + tmax ? tmax : k - bias;
       if (digit < t) break;
       if (w > maxint / (base - t)) return punycode_overflow;
       w *= (base - t);
     }
 
     bias = adapt(i - oldi, out + 1, oldi == 0);
 
     /* i was supposed to wrap around from out+1 to 0,   */
     /* incrementing n each time, so we'll fix that now: */
 
     if (i / (out + 1) > maxint - n) return punycode_overflow;
     n += i / (out + 1);
     if (n > 0x10FFFF || (n >= 0xD800 && n <= 0xDBFF)) return punycode_bad_input;
     i %= (out + 1);
 
     /* Insert n at position i of the output: */
 
     /* not needed for Punycode: */
     /* if (basic(n)) return punycode_bad_input; */
     if (out >= max_out) return punycode_big_output;
 
     memmove(output + i + 1, output + i, (out - i) * sizeof *output);
     output[i++] = n;
   }
 
   *output_length = (size_t) out;
   /* cannot overflow because out <= old value of *output_length */
   return punycode_success;
 }
