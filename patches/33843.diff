commit 055adb8467366802ad052a6893f1a0283809b7bd
Author: Jonathan Hui <jonhui@google.com>
Date:   Sat May 1 10:25:10 2021 -0700

    [cli] add args length checking to dns command (#6547)

diff --git a/src/cli/cli.cpp b/src/cli/cli.cpp
index e0e213304..d265f2a83 100644
--- a/src/cli/cli.cpp
+++ b/src/cli/cli.cpp
@@ -1417,80 +1417,83 @@ void Interpreter::OutputDnsTxtData(const uint8_t *aTxtData, uint16_t aTxtDataLen
 otError Interpreter::ProcessDns(uint8_t aArgsLength, Arg aArgs[])
 {
     OT_UNUSED_VARIABLE(aArgs);
 
     otError error = OT_ERROR_NONE;
 #if OPENTHREAD_CONFIG_DNS_CLIENT_ENABLE
     otDnsQueryConfig  queryConfig;
     otDnsQueryConfig *config = &queryConfig;
 #endif
 
     if (aArgsLength == 0)
     {
         error = OT_ERROR_INVALID_ARGS;
     }
 #if OPENTHREAD_CONFIG_REFERENCE_DEVICE_ENABLE
     else if (aArgs[0] == "compression")
     {
         if (aArgsLength == 1)
         {
             OutputEnabledDisabledStatus(otDnsIsNameCompressionEnabled());
         }
         else
         {
             bool enable;
 
             VerifyOrExit(aArgsLength == 2, error = OT_ERROR_INVALID_ARGS);
             SuccessOrExit(error = ParseEnableOrDisable(aArgs[1], enable));
             otDnsSetNameCompressionEnabled(enable);
         }
     }
 #endif // OPENTHREAD_CONFIG_REFERENCE_DEVICE_ENABLE
 #if OPENTHREAD_CONFIG_DNS_CLIENT_ENABLE
     else if (aArgs[0] == "config")
     {
         if (aArgsLength == 1)
         {
             const otDnsQueryConfig *defaultConfig = otDnsClientGetDefaultConfig(mInstance);
 
             OutputFormat("Server: [");
             OutputIp6Address(defaultConfig->mServerSockAddr.mAddress);
             OutputLine("]:%d", defaultConfig->mServerSockAddr.mPort);
             OutputLine("ResponseTimeout: %u ms", defaultConfig->mResponseTimeout);
             OutputLine("MaxTxAttempts: %u", defaultConfig->mMaxTxAttempts);
             OutputLine("RecursionDesired: %s",
                        (defaultConfig->mRecursionFlag == OT_DNS_FLAG_RECURSION_DESIRED) ? "yes" : "no");
         }
         else
         {
             SuccessOrExit(error = GetDnsConfig(aArgsLength, aArgs, config, 1));
             otDnsClientSetDefaultConfig(mInstance, config);
         }
     }
     else if (aArgs[0] == "resolve")
     {
+        VerifyOrExit(aArgsLength >= 2, error = OT_ERROR_INVALID_ARGS);
         SuccessOrExit(error = GetDnsConfig(aArgsLength, aArgs, config, 2));
         SuccessOrExit(error = otDnsClientResolveAddress(mInstance, aArgs[1].GetCString(),
                                                         &Interpreter::HandleDnsAddressResponse, this, config));
         error = OT_ERROR_PENDING;
     }
 #if OPENTHREAD_CONFIG_DNS_CLIENT_SERVICE_DISCOVERY_ENABLE
     else if (aArgs[0] == "browse")
     {
+        VerifyOrExit(aArgsLength >= 2, error = OT_ERROR_INVALID_ARGS);
         SuccessOrExit(error = GetDnsConfig(aArgsLength, aArgs, config, 2));
         SuccessOrExit(error = otDnsClientBrowse(mInstance, aArgs[1].GetCString(), &Interpreter::HandleDnsBrowseResponse,
                                                 this, config));
         error = OT_ERROR_PENDING;
     }
     else if (aArgs[0] == "service")
     {
+        VerifyOrExit(aArgsLength >= 3, error = OT_ERROR_INVALID_ARGS);
         SuccessOrExit(error = GetDnsConfig(aArgsLength, aArgs, config, 3));
         SuccessOrExit(error = otDnsClientResolveService(mInstance, aArgs[1].GetCString(), aArgs[2].GetCString(),
                                                         &Interpreter::HandleDnsServiceResponse, this, config));
         error = OT_ERROR_PENDING;
     }
 #endif // OPENTHREAD_CONFIG_DNS_CLIENT_SERVICE_DISCOVERY_ENABLE
 #endif // OPENTHREAD_CONFIG_DNS_CLIENT_ENABLE
     else
     {
         ExitNow(error = OT_ERROR_INVALID_COMMAND);
     }
