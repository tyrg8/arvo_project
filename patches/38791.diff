commit 1a264ac8851c47ab375ed160667a289d12e09e0b
Author: Eugene Kliuchnikov <eustas.ru@gmail.com>
Date:   Wed Sep 15 13:08:23 2021 +0200

    Add tests to CMake build (#120)
    
    Drive-by: get rid of googletest submodule
    
    Co-authored-by: Eugene Kliuchnikov <eustas@chromium.org>

diff --git a/.github/workflows/ci-wasm.yml b/.github/workflows/ci-wasm.yml
deleted file mode 100644
index b401ce8..0000000
--- a/.github/workflows/ci-wasm.yml
+++ /dev/null
@@ -1,59 +0,0 @@
-name: CMake WASM build
-
-on:
-  push:
-    branches: [ master ]
-  pull_request:
-    branches: [ master ]
-
-defaults:
-  run:
-    shell: bash
-
-jobs:
-  build:
-    runs-on: ${{ matrix.os }}-latest
-    strategy:
-      matrix:
-        include:
-        - os: ubuntu
-    steps:
-    - name: checkout
-      uses: actions/checkout@v2
-      with:
-        submodules: recursive
-
-    - name: Cache EMSDK
-      id: cache-emsdk
-      uses: actions/cache@v1
-      with:
-        path: ~/emsdk
-        key: ${{ runner.os }}-emsdk
-
-    - name: install
-      if: steps.cache-emsdk.outputs.cache-hit != 'true'
-      run: |
-        cd ~/
-        git clone https://github.com/emscripten-core/emsdk.git
-        cd emsdk
-        git pull
-        ./emsdk install latest
-
-    - name: post-install
-      run: |
-        cd ~/emsdk
-        ./emsdk activate latest
-
-    - name: configure
-      run: >-
-        source ~/emsdk/emsdk_env.sh &&
-        cmake
-        -DCMAKE_TOOLCHAIN_FILE="$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake"
-        -DCMAKE_BUILD_TYPE=Release
-        -B out
-
-    - name: build
-      run: cmake --build out --config Release -j 2
-
-    - name: test
-      run: cd out && ctest -j 2
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 288aa62..893b57b 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -1,4 +1,4 @@
-name: CMake build
+name: Build-Test-Upload
 
 on:
   push:
@@ -15,99 +15,128 @@ defaults:
 jobs:
   build:
     runs-on: ${{ matrix.os || 'ubuntu-latest' }}
     strategy:
       fail-fast: false
       matrix:
         include:
         - name: cmake:clang-9
           mode: cmake
           env: CC=/usr/bin/clang-9 CXX=/usr/bin/clang++-9
           os: ubuntu-18.04
 
         - name: cmake:clang-10
           mode: cmake
           env: CC=/usr/bin/clang-10 CXX=/usr/bin/clang++-10
           os: ubuntu-20.04
 
         - name: cmake:clang-11
           mode: cmake
           env: CC=/usr/bin/clang-11 CXX=/usr/bin/clang++-11
           os: ubuntu-20.04
 
         - name: cmake:clang-12
           mode: cmake
           env: CC=/usr/bin/clang-12 CXX=/usr/bin/clang++-12
           os: ubuntu-20.04
 
         - name: cmake:gcc-7
           mode: cmake
           env: CC=/usr/bin/gcc-7 CXX=/usr/bin/g++-7
           os: ubuntu-18.04
 
         - name: cmake:gcc-9
           mode: cmake
           env: CC=/usr/bin/gcc-9 CXX=/usr/bin/g++-9
           os: ubuntu-18.04
 
         - name: cmake:gcc-10
           mode: cmake
           env: CC=/usr/bin/gcc-10 CXX=/usr/bin/g++-10
           os: ubuntu-18.04
 
         - name: cmake:android:arm64-v8a
           mode: cmake
-          cmake_params: -DCMAKE_TOOLCHAIN_FILE=/usr/local/lib/android/sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_NATIVE_API_LEVEL=25
+          cmake_params: -DCMAKE_TOOLCHAIN_FILE=/usr/local/lib/android/sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_NATIVE_API_LEVEL=25 -DBUILD_TESTING=off
 
         - name: cmake:android:arm64-v8a
           mode: cmake
-          cmake_params: -DCMAKE_TOOLCHAIN_FILE=/usr/local/lib/android/sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_NATIVE_API_LEVEL=25
+          cmake_params: -DCMAKE_TOOLCHAIN_FILE=/usr/local/lib/android/sdk/ndk-bundle/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_NATIVE_API_LEVEL=25 -DBUILD_TESTING=off
+
+        - name: cmake:wasm
+          mode: cmake
+          wasm: true
+          cmake_params: -DCMAKE_TOOLCHAIN_FILE="$EMSDK/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake" -DBUILD_TESTING=off
+          env: source ~/emsdk/emsdk_env.sh &&
 
         - name: cmake:win:default
           mode: cmake
           upload_artifacts: true
           os: windows-latest
 
         - name: cmake:osx:default
           mode: cmake
           os: macos-latest
 
         - name: bazel:c
           mode: bazel
           bazel_project_root: .
 
         - name: bazel:java
           mode: bazel
           bazel_project_root: java
 
     steps:
     - name: Checkout
       uses: actions/checkout@v2
       with:
         submodules: recursive
 
+    - name: Cache EMSDK
+      if: ${{ matrix.wasm }}
+      id: cache-emsdk
+      uses: actions/cache@v1
+      with:
+        path: ~/emsdk
+        key: ${{ runner.os }}-emsdk
+
+    - name: Install EMSDK
+      if: ${{ matrix.wasm && steps.cache-emsdk.outputs.cache-hit != 'true' }}
+      run: |
+        cd ~/
+        git clone https://github.com/emscripten-core/emsdk.git
+        cd emsdk
+        git pull
+        ./emsdk install latest
+
+    - name: Post-install EMSDK
+      if: ${{ matrix.wasm }}
+      run: |
+        cd ~/emsdk
+        ./emsdk activate latest
+
     - name: Configure @ CMake
       if: ${{ matrix.mode == 'cmake' }}
       run: ${{ matrix.env }} cmake -DCMAKE_BUILD_TYPE=Release ${{ matrix.cmake_params }} -B out
 
     - name: Build @ CMake
       if: ${{ matrix.mode == 'cmake' }}
       run: cmake --build out --config Release -j 2
 
     - name: Test @ CMake
       if: ${{ matrix.mode == 'cmake' }}
       run: cd out && ctest -j 2
 
     - name: Build @ Bazel
       if: ${{ matrix.mode == 'bazel' }}
       run: cd ${{ matrix.bazel_project_root }} && bazel build -c opt ...:all
 
     - name: Test @ Bazel
       if: ${{ matrix.mode == 'bazel' }}
       run: cd ${{ matrix.bazel_project_root }} && bazel test -c opt ...:all
 
     - name: upload
       if: ${{ matrix.upload_artifacts }}
       uses: actions/upload-artifact@v2
       with:
         name: ${{ matrix.os }}
         path: out/artifacts
diff --git a/.gitmodules b/.gitmodules
index 01572aa..9eda6f3 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,9 +1,6 @@
 [submodule "third_party/brotli"]
 	path = third_party/brotli
 	url = https://github.com/google/brotli.git
-[submodule "third_party/googletest"]
-	path = third_party/googletest
-	url = https://github.com/google/googletest
 [submodule "third_party/highwayhash"]
 	path = third_party/highwayhash
 	url = https://github.com/google/highwayhash.git
diff --git a/CMakeLists.txt b/CMakeLists.txt
index ca53bde..8126cd1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 3.1)
+cmake_minimum_required(VERSION 3.11)
 
 project(BRUNSLI C CXX)
 
@@ -27,5 +27,19 @@ set(CMAKE_CXX_STANDARD_REQUIRED YES)
 
 add_subdirectory(third_party)
 
+include(FetchContent)
+
+# Add GTest
+FetchContent_Declare(
+  GTest
+  URL https://github.com/google/googletest/archive/refs/tags/release-1.11.0.zip
+)
+# For Windows: Prevent overriding the parent project's compiler/linker settings
+set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
+set(BUILD_GMOCK OFF CACHE INTERNAL "")
+FetchContent_MakeAvailable(GTest)
+
+include(CTest)
+
 # The Brunsli library definition.
 include(brunsli.cmake)
diff --git a/README.md b/README.md
index 499b6f7..5ca6acd 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,5 @@
 ### Introduction
-![CMake build](https://github.com/google/brunsli/workflows/CMake%20build/badge.svg?branch=master)
+![CMake build](https://github.com/google/brunsli/workflows/Build-Test-Upload/badge.svg?branch=master)
 
 
 Brunsli is a lossless JPEG repacking library.
diff --git a/brunsli.cmake b/brunsli.cmake
index b341288..f1c60c9 100644
--- a/brunsli.cmake
+++ b/brunsli.cmake
@@ -1,10 +1,9 @@
 # Copyright (c) Google LLC 2019
 #
 # Use of this source code is governed by an MIT-style
 # license that can be found in the LICENSE file or at
 # https://opensource.org/licenses/MIT.
 
-
 file(GLOB BRUNSLI_COMMON_SOURCES
   c/common/*.cc
 )
@@ -171,3 +170,40 @@ set_target_properties(cbrunsli dbrunsli ${BRUNSLI_LIBRARIES} PROPERTIES
   LIBRARY_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/artifacts"
   RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/artifacts"
 )
+
+if (${BUILD_TESTING})
+
+include(GoogleTest)
+
+set(BRUNSLI_TEST_ITEMS
+    bit_reader
+    build_huffman_table
+    c_api
+    context
+    distributions
+    fallback
+    headerless
+    huffman_tree
+    lehmer_code
+    quant_matrix
+)
+
+file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/tests)
+foreach (TEST_ITEM IN LISTS BRUNSLI_TEST_ITEMS)
+  set(TEST_NAME ${TEST_ITEM}_test)
+  add_executable(${TEST_NAME}
+    c/tests/${TEST_NAME}.cc
+    c/dec/decode.cc  # "static" brunslidec-c
+    c/enc/encode.cc  # "static" brunslienc-c
+    c/tests/test_utils.cc  # test utils
+  )
+  target_link_libraries(${TEST_NAME}
+    brunslicommon-static
+    brunslidec-static
+    brunslienc-static
+    gtest_main
+  )
+  gtest_discover_tests(${TEST_NAME})
+endforeach()
+
+endif()  # BUILD_TESTING
diff --git a/third_party/CMakeLists.txt b/third_party/CMakeLists.txt
index 683837d..fb30039 100644
--- a/third_party/CMakeLists.txt
+++ b/third_party/CMakeLists.txt
@@ -9,9 +9,5 @@ if (NOT TARGET brotlicommon-static)
   if (NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/brotli/c/include/brotli/decode.h")
     message(SEND_ERROR "Brotli is required to build brunsli, run \"git submodule update --init\" to get it, then run cmake again")
   endif ()
   add_subdirectory(brotli EXCLUDE_FROM_ALL)
 endif ()
-
-if (NOT TARGET gtest_main)
-  add_subdirectory(googletest EXCLUDE_FROM_ALL)
-endif ()
diff --git a/third_party/googletest b/third_party/googletest
deleted file mode 160000
index d128fc8..0000000
--- a/third_party/googletest
+++ /dev/null
@@ -1 +0,0 @@
-Subproject commit d128fc8252d53baad6ea456fa08cbf9028d255f4
