commit 2fe34facba4c88e2474f237ed5376841033da435
Merge: 6e21b8c90 909aa86d2
Author: Sean Parkinson <sean@wolfssl.com>
Date:   Tue Feb 14 12:51:20 2023 +1000

    Merge pull request #6084 from philljj/zd15607
    
    Check keyLen matches cipher in wolfSSL_CMAC_Init.

diff --git a/src/ssl.c b/src/ssl.c
index c710105b7..341d217a5 100644
--- a/src/ssl.c
+++ b/src/ssl.c
@@ -28560,35 +28560,42 @@ WOLFSSL_EVP_CIPHER_CTX* wolfSSL_CMAC_CTX_get0_cipher_ctx(WOLFSSL_CMAC_CTX* ctx)
 int wolfSSL_CMAC_Init(WOLFSSL_CMAC_CTX* ctx, const void *key, size_t keyLen,
                       const WOLFSSL_EVP_CIPHER* cipher, WOLFSSL_ENGINE* engine)
 {
     int ret = WOLFSSL_SUCCESS;
 
     (void)engine;
 
     WOLFSSL_ENTER("wolfSSL_CMAC_Init");
 
     if (ctx == NULL || cipher == NULL || (
             cipher != EVP_AES_128_CBC &&
             cipher != EVP_AES_192_CBC &&
             cipher != EVP_AES_256_CBC)) {
         ret = WOLFSSL_FAILURE;
     }
 
+    if (ret == WOLFSSL_SUCCESS) {
+        /* Check input keyLen matches input cipher. */
+        if ((int) keyLen != wolfSSL_EVP_Cipher_key_length(cipher)) {
+            ret = WOLFSSL_FAILURE;
+        }
+    }
+
     if (ret == WOLFSSL_SUCCESS) {
         ret = wc_InitCmac((Cmac*)ctx->internal, (const byte*)key,
                           (word32)keyLen, WC_CMAC_AES, NULL);
         if (ret != 0) {
             ret = WOLFSSL_FAILURE;
         }
         else {
             ret = WOLFSSL_SUCCESS;
         }
     }
     if (ret == WOLFSSL_SUCCESS) {
         ret = wolfSSL_EVP_CipherInit(ctx->cctx, cipher, (const byte*)key, NULL,
                                      1);
     }
 
     WOLFSSL_LEAVE("wolfSSL_CMAC_Init", ret);
 
     return ret;
 }
diff --git a/tests/api.c b/tests/api.c
index 4927b57a2..c8b4c0d54 100644
--- a/tests/api.c
+++ b/tests/api.c
@@ -39682,30 +39682,38 @@ static int test_wolfSSL_HMAC(void)
 static int test_wolfSSL_CMAC(void)
 {
     int res = TEST_SKIPPED;
 #if defined(WOLFSSL_CMAC) && defined(OPENSSL_EXTRA) && \
     defined(WOLFSSL_AES_DIRECT)
     int i;
     byte key[AES_128_KEY_SIZE];
     CMAC_CTX* cmacCtx = NULL;
     byte out[AES_BLOCK_SIZE];
     size_t outLen = AES_BLOCK_SIZE;
 
     for (i=0; i < AES_128_KEY_SIZE; ++i) {
         key[i] = i;
     }
     AssertNotNull(cmacCtx = CMAC_CTX_new());
     /* Check CMAC_CTX_get0_cipher_ctx; return value not used. */
     AssertNotNull(CMAC_CTX_get0_cipher_ctx(cmacCtx));
     AssertIntEQ(CMAC_Init(cmacCtx, key, AES_128_KEY_SIZE, EVP_aes_128_cbc(),
         NULL), SSL_SUCCESS);
     /* re-using test key as data to hash */
     AssertIntEQ(CMAC_Update(cmacCtx, key, AES_128_KEY_SIZE), SSL_SUCCESS);
     AssertIntEQ(CMAC_Update(cmacCtx, NULL, 0), SSL_SUCCESS);
     AssertIntEQ(CMAC_Final(cmacCtx, out, &outLen), SSL_SUCCESS);
     AssertIntEQ(outLen, AES_BLOCK_SIZE);
     CMAC_CTX_free(cmacCtx);
 
+    /* give a key too small for the cipher, verify we get failure */
+    cmacCtx = NULL;
+    AssertNotNull(cmacCtx = CMAC_CTX_new());
+    AssertNotNull(CMAC_CTX_get0_cipher_ctx(cmacCtx));
+    AssertIntEQ(CMAC_Init(cmacCtx, key, AES_128_KEY_SIZE, EVP_aes_192_cbc(),
+        NULL), SSL_FAILURE);
+    CMAC_CTX_free(cmacCtx);
+
     res = TEST_RES_CHECK(1);
 #endif /* WOLFSSL_CMAC && OPENSSL_EXTRA && WOLFSSL_AES_DIRECT */
     return res;
 }
