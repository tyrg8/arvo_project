commit 41adecad14af8a4255bfd47a79b86b6834a1b5d6
Author: Simon Kelley <simon@thekelleys.org.uk>
Date:   Sat Jan 1 22:15:16 2022 +0000

    Include client address if TFTP file-not-found errors.

diff --git a/CHANGELOG b/CHANGELOG
index 195a696..fc2cf5e 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -1,32 +1,36 @@
 version 2.87
         Allow arbitrary prefix lengths in --rev-server and
 	--domain=....,local
 
 	Replace --address=/#/..... functionality which got
 	missed in the 2.86 domain search rewrite.
 
 	Add --nftset option, like --ipset but for the newer nftables.
 	Thanks to Chen Zhenge for the patch.
 	
 	Add --filter-A and --filter-AAAA options, to remove IPv4 or IPv6
 	addresses from DNS answers.
 
 	Fix crash doing netbooting when --port is set to zero
 	to disable the DNS server. Thanks to Drexl Johannes
 	for the bug report.
 
 	Generalise --dhcp-relay. Sending via broadcast/multicast is
 	now supported for both IPv4 and IPv6 and the configuration
 	syntax made easier (but backwards compatible).
 	
 	Add snooping of IPv6 prefix-delegations to the DHCP-relay system.
 
 	Finesse parsing of --dhcp-remoteid and --dhcp-subscrid. To be treated
 	as hex, the pattern must consist of only hex digits AND contain
 	at least one ':'. Thanks to Bengt-Erik Sandstrom who tripped
 	over a pattern consisting of a decimal number which was interpreted
 	surprisingly.
 
+	Include client address in TFTP file-not-found error reports.
+	Thanks to Stefan Rink for the initial patch, which has been
+	re-worked by me (srk). All bugs mine.
+
 	
 version 2.86
 	Handle DHCPREBIND requests in the DHCPv6 server code.
diff --git a/po/de.po b/po/de.po
index 9cd48ee..1f1c058 100644
--- a/po/de.po
+++ b/po/de.po
@@ -2145,8 +2145,8 @@ msgstr "nicht unterstÃ¼tzte Anfrage von %s"
 
 #: tftp.c:512
 #, c-format
-msgid "file %s not found"
-msgstr "Datei %s nicht gefunden"
+msgid "file %s not found for %s"
+msgstr "Datei %s nicht gefunden fÃ¼r %s"
 
 #: tftp.c:602
 #, c-format
diff --git a/po/es.po b/po/es.po
index 9bd61fc..d5defc9 100644
--- a/po/es.po
+++ b/po/es.po
@@ -2213,8 +2213,8 @@ msgstr "pedido no-soportado desde %s"
 
 #: tftp.c:512
 #, fuzzy, c-format
-msgid "file %s not found"
-msgstr "archivo %s no encontrado"
+msgid "file %s not found for %s"
+msgstr "archivo %s no encontrado por %s"
 
 #: tftp.c:602
 #, c-format
diff --git a/po/fi.po b/po/fi.po
index f414461..8439233 100644
--- a/po/fi.po
+++ b/po/fi.po
@@ -2114,7 +2114,7 @@ msgstr ""
 
 #: tftp.c:512
 #, c-format
-msgid "file %s not found"
+msgid "file %s not found for %s"
 msgstr ""
 
 #: tftp.c:602
diff --git a/po/fr.po b/po/fr.po
index a97dc2f..9512739 100644
--- a/po/fr.po
+++ b/po/fr.po
@@ -2197,8 +2197,8 @@ msgstr "requ
 
 #: tftp.c:512
 #, c-format
-msgid "file %s not found"
-msgstr "fichier %s non trouvé"
+msgid "file %s not found for %s"
+msgstr "fichier %s non trouvé pour %s"
 
 #: tftp.c:602
 #, c-format
diff --git a/po/id.po b/po/id.po
index 11aa042..9549205 100644
--- a/po/id.po
+++ b/po/id.po
@@ -2460,8 +2460,8 @@ msgstr ""
 # OK
 #: tftp.c:512
 #, fuzzy, c-format
-msgid "file %s not found"
-msgstr "lease tak ditemukan"
+msgid "file %s not found for %s"
+msgstr "file %s tidak ditemukan untuk %s"
 
 #: tftp.c:602
 #, c-format
diff --git a/po/it.po b/po/it.po
index 6ed0010..e9ab318 100644
--- a/po/it.po
+++ b/po/it.po
@@ -2114,7 +2114,7 @@ msgstr ""
 
 #: tftp.c:512
 #, c-format
-msgid "file %s not found"
+msgid "file %s not found for %s"
 msgstr ""
 
 #: tftp.c:602
diff --git a/po/no.po b/po/no.po
index 33e80b8..892f7cc 100644
--- a/po/no.po
+++ b/po/no.po
@@ -2194,8 +2194,8 @@ msgstr ""
 
 #: tftp.c:512
 #, fuzzy, c-format
-msgid "file %s not found"
-msgstr "leie ikke funnet"
+msgid "file %s not found for %s"
+msgstr "fil %s ikke funnet for %s"
 
 #: tftp.c:602
 #, c-format
diff --git a/po/pl.po b/po/pl.po
index 29b9165..c98ed5d 100644
--- a/po/pl.po
+++ b/po/pl.po
@@ -2149,8 +2149,8 @@ msgstr "nieobsÅ‚ugiwane Å¼Ä…danie od komputera %s"
 
 #: tftp.c:512
 #, c-format
-msgid "file %s not found"
-msgstr "plik %s nie zostaÅ‚ znaleziony"
+msgid "file %s not found for %s"
+msgstr "plik %s nie zostaÅ‚ znaleziony dla %s"
 
 #: tftp.c:602
 #, c-format
diff --git a/po/pt_BR.po b/po/pt_BR.po
index a07a9ce..e57bd24 100644
--- a/po/pt_BR.po
+++ b/po/pt_BR.po
@@ -2114,7 +2114,7 @@ msgstr ""
 
 #: tftp.c:512
 #, c-format
-msgid "file %s not found"
+msgid "file %s not found for %s"
 msgstr ""
 
 #: tftp.c:602
diff --git a/po/ro.po b/po/ro.po
index 295e629..075ed7e 100644
--- a/po/ro.po
+++ b/po/ro.po
@@ -2195,8 +2195,8 @@ msgstr ""
 
 #: tftp.c:512
 #, fuzzy, c-format
-msgid "file %s not found"
-msgstr "Ã®mprumutul nu a fost gÄƒsit"
+msgid "file %s not found for %s"
+msgstr "fiÈ™ier %s nu a fost gÄƒsit pentru %s"
 
 #: tftp.c:602
 #, c-format
diff --git a/src/tftp.c b/src/tftp.c
index 3d87523..e8474d9 100644
--- a/src/tftp.c
+++ b/src/tftp.c
@@ -19,9 +19,9 @@
 #ifdef HAVE_TFTP
 
 static void handle_tftp(time_t now, struct tftp_transfer *transfer, ssize_t len);
-static struct tftp_file *check_tftp_fileperm(ssize_t *len, char *prefix);
+static struct tftp_file *check_tftp_fileperm(ssize_t *len, char *prefix, char *client);
 static void free_transfer(struct tftp_transfer *transfer);
-static ssize_t tftp_err(int err, char *packet, char *message, char *file);
+static ssize_t tftp_err(int err, char *packet, char *message, char *file, char *arg2);
 static ssize_t tftp_err_oops(char *packet, const char *file);
 static ssize_t get_block(char *packet, struct tftp_transfer *transfer);
 static char *next(char **p, char *end);
@@ -44,533 +44,532 @@ static void sanitise(char *buf);
 void tftp_request(struct listener *listen, time_t now)
 {
   ssize_t len;
   char *packet = daemon->packet;
   char *filename, *mode, *p, *end, *opt;
   union mysockaddr addr, peer;
   struct msghdr msg;
   struct iovec iov;
   struct ifreq ifr;
   int is_err = 1, if_index = 0, mtu = 0;
   struct iname *tmp;
   struct tftp_transfer *transfer = NULL, **up;
   int port = daemon->start_tftp_port; /* may be zero to use ephemeral port */
 #if defined(IP_MTU_DISCOVER) && defined(IP_PMTUDISC_DONT)
   int mtuflag = IP_PMTUDISC_DONT;
 #endif
   char namebuff[IF_NAMESIZE];
   char *name = NULL;
   char *prefix = daemon->tftp_prefix;
   struct tftp_prefix *pref;
   union all_addr addra;
   int family = listen->addr.sa.sa_family;
   /* Can always get recvd interface for IPv6 */
   int check_dest = !option_bool(OPT_NOWILD) || family == AF_INET6;
   union {
     struct cmsghdr align; /* this ensures alignment */
     char control6[CMSG_SPACE(sizeof(struct in6_pktinfo))];
 #if defined(HAVE_LINUX_NETWORK)
     char control[CMSG_SPACE(sizeof(struct in_pktinfo))];
 #elif defined(HAVE_SOLARIS_NETWORK)
     char control[CMSG_SPACE(sizeof(struct in_addr)) +
 		 CMSG_SPACE(sizeof(unsigned int))];
 #elif defined(IP_RECVDSTADDR) && defined(IP_RECVIF)
     char control[CMSG_SPACE(sizeof(struct in_addr)) +
 		 CMSG_SPACE(sizeof(struct sockaddr_dl))];
 #endif
   } control_u; 
 
   msg.msg_controllen = sizeof(control_u);
   msg.msg_control = control_u.control;
   msg.msg_flags = 0;
   msg.msg_name = &peer;
   msg.msg_namelen = sizeof(peer);
   msg.msg_iov = &iov;
   msg.msg_iovlen = 1;
 
   iov.iov_base = packet;
   iov.iov_len = daemon->packet_buff_sz;
 
   /* we overwrote the buffer... */
   daemon->srv_save = NULL;
 
   if ((len = recvmsg(listen->tftpfd, &msg, 0)) < 2)
     return;
   
   /* Can always get recvd interface for IPv6 */
   if (!check_dest)
     {
       if (listen->iface)
 	{
 	  addr = listen->iface->addr;
 	  name = listen->iface->name;
 	  mtu = listen->iface->mtu;
 	  if (daemon->tftp_mtu != 0 && daemon->tftp_mtu < mtu)
 	    mtu = daemon->tftp_mtu;
 	}
       else
 	{
 	  /* we're listening on an address that doesn't appear on an interface,
 	     ask the kernel what the socket is bound to */
 	  socklen_t tcp_len = sizeof(union mysockaddr);
 	  if (getsockname(listen->tftpfd, (struct sockaddr *)&addr, &tcp_len) == -1)
 	    return;
 	}
     }
   else
     {
       struct cmsghdr *cmptr;
 
       if (msg.msg_controllen < sizeof(struct cmsghdr))
         return;
       
       addr.sa.sa_family = family;
       
 #if defined(HAVE_LINUX_NETWORK)
       if (family == AF_INET)
 	for (cmptr = CMSG_FIRSTHDR(&msg); cmptr; cmptr = CMSG_NXTHDR(&msg, cmptr))
 	  if (cmptr->cmsg_level == IPPROTO_IP && cmptr->cmsg_type == IP_PKTINFO)
 	    {
 	      union {
 		unsigned char *c;
 		struct in_pktinfo *p;
 	      } p;
 	      p.c = CMSG_DATA(cmptr);
 	      addr.in.sin_addr = p.p->ipi_spec_dst;
 	      if_index = p.p->ipi_ifindex;
 	    }
       
 #elif defined(HAVE_SOLARIS_NETWORK)
       if (family == AF_INET)
 	for (cmptr = CMSG_FIRSTHDR(&msg); cmptr; cmptr = CMSG_NXTHDR(&msg, cmptr))
 	  {
 	    union {
 	      unsigned char *c;
 	      struct in_addr *a;
 	      unsigned int *i;
 	    } p;
 	    p.c = CMSG_DATA(cmptr);
 	    if (cmptr->cmsg_level == IPPROTO_IP && cmptr->cmsg_type == IP_RECVDSTADDR)
 	    addr.in.sin_addr = *(p.a);
 	    else if (cmptr->cmsg_level == IPPROTO_IP && cmptr->cmsg_type == IP_RECVIF)
 	    if_index = *(p.i);
 	  }
       
 #elif defined(IP_RECVDSTADDR) && defined(IP_RECVIF)
       if (family == AF_INET)
 	for (cmptr = CMSG_FIRSTHDR(&msg); cmptr; cmptr = CMSG_NXTHDR(&msg, cmptr))
 	  {
 	    union {
 	      unsigned char *c;
 	      struct in_addr *a;
 	      struct sockaddr_dl *s;
 	    } p;
 	    p.c = CMSG_DATA(cmptr);
 	    if (cmptr->cmsg_level == IPPROTO_IP && cmptr->cmsg_type == IP_RECVDSTADDR)
 	      addr.in.sin_addr = *(p.a);
 	    else if (cmptr->cmsg_level == IPPROTO_IP && cmptr->cmsg_type == IP_RECVIF)
 	      if_index = p.s->sdl_index;
 	  }
 	  
 #endif
 
       if (family == AF_INET6)
         {
           for (cmptr = CMSG_FIRSTHDR(&msg); cmptr; cmptr = CMSG_NXTHDR(&msg, cmptr))
             if (cmptr->cmsg_level == IPPROTO_IPV6 && cmptr->cmsg_type == daemon->v6pktinfo)
               {
                 union {
                   unsigned char *c;
                   struct in6_pktinfo *p;
                 } p;
                 p.c = CMSG_DATA(cmptr);
                   
                 addr.in6.sin6_addr = p.p->ipi6_addr;
                 if_index = p.p->ipi6_ifindex;
               }
         }
       
       if (!indextoname(listen->tftpfd, if_index, namebuff))
 	return;
 
       name = namebuff;
       
       addra.addr4 = addr.in.sin_addr;
 
       if (family == AF_INET6)
 	addra.addr6 = addr.in6.sin6_addr;
 
       if (daemon->tftp_interfaces)
 	{
 	  /* dedicated tftp interface list */
 	  for (tmp = daemon->tftp_interfaces; tmp; tmp = tmp->next)
 	    if (tmp->name && wildcard_match(tmp->name, name))
 	      break;
 
 	  if (!tmp)
 	    return;
 	}
       else
 	{
 	  /* Do the same as DHCP */
 	  if (!iface_check(family, &addra, name, NULL))
 	    {
 	      if (!option_bool(OPT_CLEVERBIND))
 		enumerate_interfaces(0); 
 	      if (!loopback_exception(listen->tftpfd, family, &addra, name) &&
 		  !label_exception(if_index, family, &addra))
 		return;
 	    }
 	  
 #ifdef HAVE_DHCP      
 	  /* allowed interfaces are the same as for DHCP */
 	  for (tmp = daemon->dhcp_except; tmp; tmp = tmp->next)
 	    if (tmp->name && wildcard_match(tmp->name, name))
 	      return;
 #endif
 	}
 
       safe_strncpy(ifr.ifr_name, name, IF_NAMESIZE);
       if (ioctl(listen->tftpfd, SIOCGIFMTU, &ifr) != -1)
 	{
 	  mtu = ifr.ifr_mtu;  
 	  if (daemon->tftp_mtu != 0 && daemon->tftp_mtu < mtu)
 	    mtu = daemon->tftp_mtu;    
 	}
     }
 
   /* Failed to get interface mtu - can use configured value. */
   if (mtu == 0)
     mtu = daemon->tftp_mtu;
 
   /* data transfer via server listening socket */
   if (option_bool(OPT_SINGLE_PORT))
     {
       int tftp_cnt;
 
       for (tftp_cnt = 0, transfer = daemon->tftp_trans, up = &daemon->tftp_trans; transfer; up = &transfer->next, transfer = transfer->next)
 	{
 	  tftp_cnt++;
 
 	  if (sockaddr_isequal(&peer, &transfer->peer))
 	    {
 	      if (ntohs(*((unsigned short *)packet)) == OP_RRQ)
 		{
 		  /* Handle repeated RRQ or abandoned transfer from same host and port 
 		     by unlinking and reusing the struct transfer. */
 		  *up = transfer->next;
 		  break;
 		}
 	      else
 		{
 		  handle_tftp(now, transfer, len);
 		  return;
 		}
 	    }
 	}
       
       /* Enforce simultaneous transfer limit. In non-single-port mode
 	 this is doene by not listening on the server socket when
 	 too many transfers are in progress. */
       if (!transfer && tftp_cnt >= daemon->tftp_max)
 	return;
     }
   
   if (name)
     {
       /* check for per-interface prefix */ 
       for (pref = daemon->if_prefix; pref; pref = pref->next)
 	if (strcmp(pref->interface, name) == 0)
 	  prefix = pref->prefix;  
     }
 
   if (family == AF_INET)
     {
       addr.in.sin_port = htons(port);
 #ifdef HAVE_SOCKADDR_SA_LEN
       addr.in.sin_len = sizeof(addr.in);
 #endif
     }
   else
     {
       addr.in6.sin6_port = htons(port);
       addr.in6.sin6_flowinfo = 0;
       addr.in6.sin6_scope_id = 0;
 #ifdef HAVE_SOCKADDR_SA_LEN
       addr.in6.sin6_len = sizeof(addr.in6);
 #endif
     }
 
   /* May reuse struct transfer from abandoned transfer in single port mode. */
   if (!transfer && !(transfer = whine_malloc(sizeof(struct tftp_transfer))))
     return;
   
   if (option_bool(OPT_SINGLE_PORT))
     transfer->sockfd = listen->tftpfd;
   else if ((transfer->sockfd = socket(family, SOCK_DGRAM, 0)) == -1)
     {
       free(transfer);
       return;
     }
   
   transfer->peer = peer;
   transfer->source = addra;
   transfer->if_index = if_index;
   transfer->timeout = now + 2;
   transfer->backoff = 1;
   transfer->block = 1;
   transfer->blocksize = 512;
   transfer->offset = 0;
   transfer->file = NULL;
   transfer->opt_blocksize = transfer->opt_transize = 0;
   transfer->netascii = transfer->carrylf = 0;
  
   (void)prettyprint_addr(&peer, daemon->addrbuff);
   
   /* if we have a nailed-down range, iterate until we find a free one. */
   while (!option_bool(OPT_SINGLE_PORT))
     {
       if (bind(transfer->sockfd, &addr.sa, sa_len(&addr)) == -1 ||
 #if defined(IP_MTU_DISCOVER) && defined(IP_PMTUDISC_DONT)
 	  setsockopt(transfer->sockfd, IPPROTO_IP, IP_MTU_DISCOVER, &mtuflag, sizeof(mtuflag)) == -1 ||
 #endif
 	  !fix_fd(transfer->sockfd))
 	{
 	  if (errno == EADDRINUSE && daemon->start_tftp_port != 0)
 	    {
 	      if (++port <= daemon->end_tftp_port)
 		{ 
 		  if (family == AF_INET)
 		    addr.in.sin_port = htons(port);
 		  else
 		    addr.in6.sin6_port = htons(port);
 		  
 		  continue;
 		}
 	      my_syslog(MS_TFTP | LOG_ERR, _("unable to get free port for TFTP"));
 	    }
 	  free_transfer(transfer);
 	  return;
 	}
       break;
     }
   
   p = packet + 2;
   end = packet + len;
   
   if (ntohs(*((unsigned short *)packet)) != OP_RRQ ||
       !(filename = next(&p, end)) ||
       !(mode = next(&p, end)) ||
       (strcasecmp(mode, "octet") != 0 && strcasecmp(mode, "netascii") != 0))
     {
-      len = tftp_err(ERR_ILL, packet, _("unsupported request from %s"), daemon->addrbuff);
+      len = tftp_err(ERR_ILL, packet, _("unsupported request from %s"), daemon->addrbuff, NULL);
       is_err = 1;
     }
   else
     {
       if (strcasecmp(mode, "netascii") == 0)
 	transfer->netascii = 1;
       
       while ((opt = next(&p, end)))
 	{
 	  if (strcasecmp(opt, "blksize") == 0)
 	    {
 	      if ((opt = next(&p, end)) && !option_bool(OPT_TFTP_NOBLOCK))
 		{
 		  /* 32 bytes for IP, UDP and TFTP headers, 52 bytes for IPv6 */
 		  int overhead = (family == AF_INET) ? 32 : 52;
 		  transfer->blocksize = atoi(opt);
 		  if (transfer->blocksize < 1)
 		    transfer->blocksize = 1;
 		  if (transfer->blocksize > (unsigned)daemon->packet_buff_sz - 4)
 		    transfer->blocksize = (unsigned)daemon->packet_buff_sz - 4;
 		  if (mtu != 0 && transfer->blocksize > (unsigned)mtu - overhead)
 		    transfer->blocksize = (unsigned)mtu - overhead;
 		  transfer->opt_blocksize = 1;
 		  transfer->block = 0;
 		}
 	    }
 	  else if (strcasecmp(opt, "tsize") == 0 && next(&p, end) && !transfer->netascii)
 	    {
 	      transfer->opt_transize = 1;
 	      transfer->block = 0;
 	    }
 	}
 
       /* cope with backslashes from windows boxen. */
       for (p = filename; *p; p++)
 	if (*p == '\\')
 	  *p = '/';
 	else if (option_bool(OPT_TFTP_LC))
 	  *p = tolower(*p);
 		
       strcpy(daemon->namebuff, "/");
       if (prefix)
 	{
 	  if (prefix[0] == '/')
 	    daemon->namebuff[0] = 0;
 	  strncat(daemon->namebuff, prefix, (MAXDNAME-1) - strlen(daemon->namebuff));
 	  if (prefix[strlen(prefix)-1] != '/')
 	    strncat(daemon->namebuff, "/", (MAXDNAME-1) - strlen(daemon->namebuff));
 
 	  if (option_bool(OPT_TFTP_APREF_IP))
 	    {
 	      size_t oldlen = strlen(daemon->namebuff);
 	      struct stat statbuf;
 	      
 	      strncat(daemon->namebuff, daemon->addrbuff, (MAXDNAME-1) - strlen(daemon->namebuff));
 	      strncat(daemon->namebuff, "/", (MAXDNAME-1) - strlen(daemon->namebuff));
 	      
 	      /* remove unique-directory if it doesn't exist */
 	      if (stat(daemon->namebuff, &statbuf) == -1 || !S_ISDIR(statbuf.st_mode))
 		daemon->namebuff[oldlen] = 0;
 	    }
 	  
 	  if (option_bool(OPT_TFTP_APREF_MAC))
 	    {
 	      unsigned char *macaddr = NULL;
 	      unsigned char macbuf[DHCP_CHADDR_MAX];
 	      
 #ifdef HAVE_DHCP
 	      if (daemon->dhcp && peer.sa.sa_family == AF_INET)
 	        {
 		  /* Check if the client IP is in our lease database */
 		  struct dhcp_lease *lease = lease_find_by_addr(peer.in.sin_addr);
 		  if (lease && lease->hwaddr_type == ARPHRD_ETHER && lease->hwaddr_len == ETHER_ADDR_LEN)
 		    macaddr = lease->hwaddr;
 		}
 #endif
 	      
 	      /* If no luck, try to find in ARP table. This only works if client is in same (V)LAN */
 	      if (!macaddr && find_mac(&peer, macbuf, 1, now) > 0)
 		macaddr = macbuf;
 	      
 	      if (macaddr)
 	        {
 		  size_t oldlen = strlen(daemon->namebuff);
 		  struct stat statbuf;
 
 		  snprintf(daemon->namebuff + oldlen, (MAXDNAME-1) - oldlen, "%.2x-%.2x-%.2x-%.2x-%.2x-%.2x/",
 			   macaddr[0], macaddr[1], macaddr[2], macaddr[3], macaddr[4], macaddr[5]);
 		  
 		  /* remove unique-directory if it doesn't exist */
 		  if (stat(daemon->namebuff, &statbuf) == -1 || !S_ISDIR(statbuf.st_mode))
 		    daemon->namebuff[oldlen] = 0;
 		}
 	    }
 	  
 	  /* Absolute pathnames OK if they match prefix */
 	  if (filename[0] == '/')
 	    {
 	      if (strstr(filename, daemon->namebuff) == filename)
 		daemon->namebuff[0] = 0;
 	      else
 		filename++;
 	    }
 	}
       else if (filename[0] == '/')
 	daemon->namebuff[0] = 0;
       strncat(daemon->namebuff, filename, (MAXDNAME-1) - strlen(daemon->namebuff));
       
       /* check permissions and open file */
-      if ((transfer->file = check_tftp_fileperm(&len, prefix)))
+      if ((transfer->file = check_tftp_fileperm(&len, prefix, daemon->addrbuff)))
 	{
 	  if ((len = get_block(packet, transfer)) == -1)
 	    len = tftp_err_oops(packet, daemon->namebuff);
 	  else
 	    is_err = 0;
 	}
     }
 
   send_from(transfer->sockfd, !option_bool(OPT_SINGLE_PORT), packet, len, &peer, &addra, if_index);
   
   if (is_err)
     free_transfer(transfer);
   else
     {
       transfer->next = daemon->tftp_trans;
       daemon->tftp_trans = transfer;
     }
 }
  
-static struct tftp_file *check_tftp_fileperm(ssize_t *len, char *prefix)
+static struct tftp_file *check_tftp_fileperm(ssize_t *len, char *prefix, char *client)
 {
   char *packet = daemon->packet, *namebuff = daemon->namebuff;
   struct tftp_file *file;
   struct tftp_transfer *t;
   uid_t uid = geteuid();
   struct stat statbuf;
   int fd = -1;
 
   /* trick to ban moving out of the subtree */
   if (prefix && strstr(namebuff, "/../"))
     goto perm;
   
   if ((fd = open(namebuff, O_RDONLY)) == -1)
     {
       if (errno == ENOENT)
 	{
-	  *len = tftp_err(ERR_FNF, packet, _("file %s not found"), namebuff);
+	  *len = tftp_err(ERR_FNF, packet, _("file %s not found for %s"), namebuff, client);
 	  return NULL;
 	}
       else if (errno == EACCES)
 	goto perm;
       else
 	goto oops;
     }
   
   /* stat the file descriptor to avoid stat->open races */
   if (fstat(fd, &statbuf) == -1)
     goto oops;
   
   /* running as root, must be world-readable */
   if (uid == 0)
     {
       if (!(statbuf.st_mode & S_IROTH))
 	goto perm;
     }
   /* in secure mode, must be owned by user running dnsmasq */
   else if (option_bool(OPT_TFTP_SECURE) && uid != statbuf.st_uid)
     goto perm;
       
   /* If we're doing many transfers from the same file, only 
      open it once this saves lots of file descriptors 
      when mass-booting a big cluster, for instance. 
      Be conservative and only share when inode and name match
      this keeps error messages sane. */
   for (t = daemon->tftp_trans; t; t = t->next)
     if (t->file->dev == statbuf.st_dev && 
 	t->file->inode == statbuf.st_ino &&
 	strcmp(t->file->filename, namebuff) == 0)
       {
 	close(fd);
 	t->file->refcount++;
 	return t->file;
       }
   
   if (!(file = whine_malloc(sizeof(struct tftp_file) + strlen(namebuff) + 1)))
     {
       errno = ENOMEM;
       goto oops;
     }
 
   file->fd = fd;
   file->size = statbuf.st_size;
   file->dev = statbuf.st_dev;
   file->inode = statbuf.st_ino;
   file->refcount = 1;
   strcpy(file->filename, namebuff);
   return file;
   
  perm:
-  errno = EACCES;
-  *len =  tftp_err(ERR_PERM, packet, _("cannot access %s: %s"), namebuff);
+  *len =  tftp_err(ERR_PERM, packet, _("cannot access %s: %s"), namebuff, strerror(EACCES));
   if (fd != -1)
     close(fd);
   return NULL;
 
  oops:
   *len =  tftp_err_oops(packet, namebuff);
   if (fd != -1)
     close(fd);
   return NULL;
 }
@@ -578,88 +577,88 @@ static struct tftp_file *check_tftp_fileperm(ssize_t *len, char *prefix)
 void check_tftp_listeners(time_t now)
 {
   struct tftp_transfer *transfer, *tmp, **up;
   
   /* In single port mode, all packets come via port 69 and tftp_request() */
   if (!option_bool(OPT_SINGLE_PORT))
     for (transfer = daemon->tftp_trans; transfer; transfer = transfer->next)
       if (poll_check(transfer->sockfd, POLLIN))
 	{
 	  union mysockaddr peer;
 	  socklen_t addr_len = sizeof(union mysockaddr);
 	  ssize_t len;
 	  
 	  /* we overwrote the buffer... */
 	  daemon->srv_save = NULL;
 
 	  if ((len = recvfrom(transfer->sockfd, daemon->packet, daemon->packet_buff_sz, 0, &peer.sa, &addr_len)) > 0)
 	    {
 	      if (sockaddr_isequal(&peer, &transfer->peer)) 
 		handle_tftp(now, transfer, len);
 	      else
 		{
 		  /* Wrong source address. See rfc1350 para 4. */
 		  prettyprint_addr(&peer, daemon->addrbuff);
-		  len = tftp_err(ERR_TID, daemon->packet, _("ignoring packet from %s (TID mismatch)"), daemon->addrbuff);
+		  len = tftp_err(ERR_TID, daemon->packet, _("ignoring packet from %s (TID mismatch)"), daemon->addrbuff, NULL);
 		  while(retry_send(sendto(transfer->sockfd, daemon->packet, len, 0, &peer.sa, sa_len(&peer))));
 		}
 	    }
 	}
 	  
   for (transfer = daemon->tftp_trans, up = &daemon->tftp_trans; transfer; transfer = tmp)
     {
       tmp = transfer->next;
       
       if (difftime(now, transfer->timeout) >= 0.0)
 	{
 	  int endcon = 0;
 	  ssize_t len;
 
 	  /* timeout, retransmit */
 	  transfer->timeout += 1 + (1<<(transfer->backoff/2));
 	  	  
 	  /* we overwrote the buffer... */
 	  daemon->srv_save = NULL;
 
 	  if ((len = get_block(daemon->packet, transfer)) == -1)
 	    {
 	      len = tftp_err_oops(daemon->packet, transfer->file->filename);
 	      endcon = 1;
 	    }
 	  else if (++transfer->backoff > 7)
 	    {
 	      /* don't complain about timeout when we're awaiting the last
 		 ACK, some clients never send it */
 	      if ((unsigned)len == transfer->blocksize + 4)
 		endcon = 1;
 	      len = 0;
 	    }
 
 	  if (len != 0)
 	    send_from(transfer->sockfd, !option_bool(OPT_SINGLE_PORT), daemon->packet, len,
 		      &transfer->peer, &transfer->source, transfer->if_index);
 	  	  
 	  if (endcon || len == 0)
 	    {
 	      strcpy(daemon->namebuff, transfer->file->filename);
 	      sanitise(daemon->namebuff);
 	      (void)prettyprint_addr(&transfer->peer, daemon->addrbuff);
 	      my_syslog(MS_TFTP | LOG_INFO, endcon ? _("failed sending %s to %s") : _("sent %s to %s"), daemon->namebuff, daemon->addrbuff);
 	      /* unlink */
 	      *up = tmp;
 	      if (endcon)
 		free_transfer(transfer);
 	      else
 		{
 		  /* put on queue to be sent to script and deleted */
 		  transfer->next = daemon->tftp_done_trans;
 		  daemon->tftp_done_trans = transfer;
 		}
 	      continue;
 	    }
 	}
 
       up = &transfer->next;
     }    
 }
 	  
 /* packet in daemon->packet as this is called. */
@@ -743,26 +742,25 @@ static void sanitise(char *buf)
 }
 
 #define MAXMESSAGE 500 /* limit to make packet < 512 bytes and definitely smaller than buffer */ 
-static ssize_t tftp_err(int err, char *packet, char *message, char *file)
+static ssize_t tftp_err(int err, char *packet, char *message, char *file, char *arg2)
 {
   struct errmess {
     unsigned short op, err;
     char message[];
   } *mess = (struct errmess *)packet;
   ssize_t len, ret = 4;
-  char *errstr = strerror(errno);
-  
+    
   memset(packet, 0, daemon->packet_buff_sz);
   if (file)
     sanitise(file);
   
   mess->op = htons(OP_ERR);
   mess->err = htons(err);
-  len = snprintf(mess->message, MAXMESSAGE,  message, file, errstr);
+  len = snprintf(mess->message, MAXMESSAGE,  message, file, arg2);
   ret += (len < MAXMESSAGE) ? len + 1 : MAXMESSAGE; /* include terminating zero */
   
   if (err != ERR_FNF || !option_bool(OPT_QUIET_TFTP))
     my_syslog(MS_TFTP | LOG_ERR, "%s", mess->message);
   
   return  ret;
 }
@@ -770,9 +768,9 @@ static ssize_t tftp_err(int err, char *packet, char *message, char *file)
 static ssize_t tftp_err_oops(char *packet, const char *file)
 {
   /* May have >1 refs to file, so potentially mangle a copy of the name */
   if (file != daemon->namebuff)
     strcpy(daemon->namebuff, file);
-  return tftp_err(ERR_NOTDEF, packet, _("cannot read %s: %s"), daemon->namebuff);
+  return tftp_err(ERR_NOTDEF, packet, _("cannot read %s: %s"), daemon->namebuff, strerror(errno));
 }
 
 /* return -1 for error, zero for done. */
