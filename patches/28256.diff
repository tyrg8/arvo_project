commit 16f4084f36c78d1c121a78aafb7dc1db5fe699e9
Author: DavidKorczynski <david@adalogics.com>
Date:   Wed Feb 24 23:09:35 2021 +0000

    http_client: fix bug when resizing header. (#3126)
    
    Signed-off-by: davkor <david@adalogics.com>

diff --git a/src/flb_http_client.c b/src/flb_http_client.c
index b33c337f1..5d22b2749 100644
--- a/src/flb_http_client.c
+++ b/src/flb_http_client.c
@@ -1100,156 +1100,156 @@ int flb_http_proxy_auth(struct flb_http_client *c,
 int flb_http_do(struct flb_http_client *c, size_t *bytes)
 {
     int ret;
     int r_bytes;
     int crlf = 2;
     int new_size;
     ssize_t available;
     size_t out_size;
     size_t bytes_header = 0;
     size_t bytes_body = 0;
     char *tmp;
 
     /* Append pending headers */
     ret = http_headers_compose(c);
     if (ret == -1) {
         return -1;
     }
 
     /* check enough space for the ending CRLF */
     if (header_available(c, crlf) != 0) {
         new_size = c->header_size + 2;
         tmp = flb_realloc(c->header_buf, new_size);
         if (!tmp) {
             return -1;
         }
-        c->header_buf = tmp;
-        c->header_len = new_size;
+        c->header_buf  = tmp;
+        c->header_size = new_size;
     }
 
     /* Append the ending header CRLF */
     c->header_buf[c->header_len++] = '\r';
     c->header_buf[c->header_len++] = '\n';
 
 #ifdef FLB_HAVE_HTTP_CLIENT_DEBUG
     /* debug: request_headers callback */
     flb_http_client_debug_cb(c, "_debug.http.request_headers");
 
     /* debug: request_payload callback */
     if (c->body_len > 0) {
         flb_http_client_debug_cb(c, "_debug.http.request_payload");
     }
 #endif
 
     flb_debug("[http_client] header=%s", c->header_buf);
     /* Write the header */
     ret = flb_io_net_write(c->u_conn,
                            c->header_buf, c->header_len,
                            &bytes_header);
     if (ret == -1) {
         /* errno might be changed from the original call */
         if (errno != 0) {
             flb_errno();
         }
         return -1;
     }
 
     if (c->body_len > 0) {
         ret = flb_io_net_write(c->u_conn,
                                c->body_buf, c->body_len,
                                &bytes_body);
         if (ret == -1) {
             flb_errno();
             return -1;
         }
     }
 
     /* number of sent bytes */
     *bytes = (bytes_header + bytes_body);
 
     /* Read the server response, we need at least 19 bytes */
     c->resp.data_len = 0;
     while (1) {
         available = flb_http_buffer_available(c) - 1;
         if (available <= 1) {
             /*
              * If there is no more space available on our buffer, try to
              * increase it.
              */
             ret = flb_http_buffer_increase(c, FLB_HTTP_DATA_CHUNK,
                                            &out_size);
             if (ret == -1) {
                 /*
                  * We could not allocate more space, let the caller handle
                  * this.
                  */
                 flb_upstream_conn_recycle(c->u_conn, FLB_FALSE);
                 return 0;
             }
             available = flb_http_buffer_available(c) - 1;
         }
 
         r_bytes = flb_io_net_read(c->u_conn,
                                   c->resp.data + c->resp.data_len,
                                   available);
         if (r_bytes <= 0) {
             if (c->flags & FLB_HTTP_10) {
                 break;
             }
         }
 
         /* Always append a NULL byte */
         if (r_bytes >= 0) {
             c->resp.data_len += r_bytes;
             c->resp.data[c->resp.data_len] = '\0';
 
             ret = process_data(c);
             if (ret == FLB_HTTP_ERROR) {
                 return -1;
             }
             else if (ret == FLB_HTTP_OK) {
                 break;
             }
             else if (ret == FLB_HTTP_MORE) {
                 continue;
             }
         }
         else {
             flb_error("[http_client] broken connection to %s:%i ?",
                       c->u_conn->u->tcp_host, c->u_conn->u->tcp_port);
             return -1;
         }
     }
 
     /* Check 'Connection' response header */
     ret = check_connection(c);
     if (ret == FLB_HTTP_OK) {
         /*
          * If the server replied that the connection will be closed
          * and our Upstream connection is in keepalive mode, we must
          * inactivate the connection.
          */
         if (c->resp.connection_close == FLB_TRUE) {
             /* Do not recycle the connection (no more keepalive) */
             flb_upstream_conn_recycle(c->u_conn, FLB_FALSE);
             flb_debug("[http_client] server %s:%i will close connection #%i",
                       c->u_conn->u->tcp_host, c->u_conn->u->tcp_port,
                       c->u_conn->fd);
         }
     }
 
 #ifdef FLB_HAVE_HTTP_CLIENT_DEBUG
     flb_http_client_debug_cb(c, "_debug.http.response_headers");
     if (c->resp.payload_size > 0) {
         flb_http_client_debug_cb(c, "_debug.http.response_payload");
     }
 #endif
 
     return 0;
 }
 
 /*
  * flb_http_client_proxy_connect opens a tunnel to a proxy server via
  * http `CONNECT` method. This is needed for https traffic through a
  * http proxy.
  * More: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT
  */
