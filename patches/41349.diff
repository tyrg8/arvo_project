commit 22b5f61cfcc9fb331fb66d7d71706d614656ae37
Author: Brendan Ward <bcward@astutespruce.com>
Date:   Tue Nov 23 15:19:37 2021 -0800

    Prepared geometry predicate exception memory leak (#506)
    
    Co-authored-by: Daniel Baston <dbaston@gmail.com>

diff --git a/src/geomgraph/Node.cpp b/src/geomgraph/Node.cpp
index 458e95bdc..66cb815e6 100644
--- a/src/geomgraph/Node.cpp
+++ b/src/geomgraph/Node.cpp
@@ -1,42 +1,43 @@
 /**********************************************************************
  *
  * GEOS - Geometry Engine Open Source
  * http://geos.osgeo.org
  *
  * Copyright (C) 2011 Sandro Santilli <strk@kbt.io>
  * Copyright (C) 2005-2006 Refractions Research Inc.
  * Copyright (C) 2001-2002 Vivid Solutions Inc.
  *
  * This is free software; you can redistribute and/or modify it under
  * the terms of the GNU Lesser General Public Licence as published
  * by the Free Software Foundation.
  * See the COPYING file for more information.
  *
  **********************************************************************
  *
  * Last port: geomgraph/Node.java r411 (JTS-1.12+)
  *
  **********************************************************************/
 
 #include <geos/geom/Coordinate.h>
 #include <geos/geomgraph/Node.h>
 #include <geos/geomgraph/Edge.h>
 #include <geos/geomgraph/EdgeEndStar.h>
 #include <geos/geomgraph/Label.h>
 #include <geos/geomgraph/DirectedEdge.h>
 #include <geos/geom/Location.h>
 #include <geos/util/IllegalArgumentException.h>
 #include <geos/util.h>
 
 #include <cmath>
+#include <memory>
 #include <string>
 #include <sstream>
 #include <vector>
 #include <algorithm>
 
 #ifndef GEOS_DEBUG
 #define GEOS_DEBUG 0
 #endif
 #ifndef COMPUTE_Z
 #define COMPUTE_Z 1
 #endif
@@ -132,32 +133,33 @@ Node::isIncidentEdgeInResult() const
 }
 
 void
-Node::add(EdgeEnd* e)
+Node::add(EdgeEnd* p_e)
 {
+    std::unique_ptr<EdgeEnd> e(p_e);
     assert(e);
 #if GEOS_DEBUG
     std::cerr << "[" << this << "] Node::add(" << e->print() << ")" << std::endl;
 #endif
     // Assert: start pt of e is equal to node point
     if(! e->getCoordinate().equals2D(coord)) {
         std::stringstream ss;
         ss << "EdgeEnd with coordinate " << e->getCoordinate()
            << " invalid for node " << coord;
         throw util::IllegalArgumentException(ss.str());
     }
 
     // It seems it's legal for edges to be NULL
     // we'd not be honouring the promise of adding
     // an EdgeEnd in this case, though ...
     assert(edges);
     //if (edges==NULL) return;
 
-    edges->insert(e);
-    e->setNode(this);
+    edges->insert(e.release());
+    p_e->setNode(this);
 #if COMPUTE_Z
-    addZ(e->getCoordinate().z);
+    addZ(p_e->getCoordinate().z);
 #endif
     testInvariant();
 }
 
 /*public*/
diff --git a/tests/unit/capi/GEOSPreparedGeometryTest.cpp b/tests/unit/capi/GEOSPreparedGeometryTest.cpp
index a9611c4c8..71849a0da 100644
--- a/tests/unit/capi/GEOSPreparedGeometryTest.cpp
+++ b/tests/unit/capi/GEOSPreparedGeometryTest.cpp
@@ -394,16 +394,34 @@ template<>
 void object::test<13>
 ()
 {
     geom1_ = GEOSGeomFromWKT("POLYGON((0 0, 0 1, 1 1, 1 0, 0 0))");
     geom2_ = GEOSGeomFromWKT("POINT EMPTY");
     prepGeom1_ = GEOSPrepare(geom1_);
 
     ensure(nullptr != prepGeom1_);
     ensure(nullptr != geom2_);
 
     int ret = GEOSPreparedCovers(prepGeom1_, geom2_);
     ensure_equals(ret, 0);
 }
 
+// Verify no memory leak on exception (https://github.com/libgeos/geos/issues/505)
+template<>
+template<>
+void object::test<14>
+()
+{
+    geom1_ = GEOSGeomFromWKT("LINESTRING(0 0, 1 NaN)");
+    geom2_ = GEOSGeomFromWKT("POINT(0 0)");
+    prepGeom1_ = GEOSPrepare(geom1_);
+
+    ensure(nullptr != prepGeom1_);
+    ensure(nullptr != geom2_);
+
+    int ret = GEOSPreparedTouches(prepGeom1_, geom2_);
+    ensure_equals(ret, 2);
+}
+
+
 } // namespace tut
 
