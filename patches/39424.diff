commit 1023a9ad12d146608ba6326a3114f9b23b812124
Author: Tim RÃ¼hsen <tim.ruehsen@gmx.de>
Date:   Sat Jan 15 22:38:32 2022 +0100

    Fix stack buffer overflow WRITE 1 in domain_to_punycode()
    
    Reported-by: oss-fuzz (issue 39424 and issue 39226)
    
    The affected code would only be built into the library when
    configured to build without any IDNA library.

diff --git a/src/psl.c b/src/psl.c
index 0e04778..7bfc3cb 100644
--- a/src/psl.c
+++ b/src/psl.c
@@ -565,42 +565,42 @@ static int mem_is_ascii(const char *s, size_t n)
 static int domain_to_punycode(const char *domain, char *out, size_t outsize)
 {
 	size_t outlen = 0, labellen;
 	punycode_uint input[256];
 	const char *label, *e;
 
 	for (e = label = domain; e; label = e + 1) {
 		e = strchr(label, '.');
 		labellen = e ? (size_t) (e - label) : strlen(label);
 
 		if (mem_is_ascii(label, labellen)) {
 			if (outlen + labellen + (e != NULL) >= outsize)
 				return 1;
 
 			memcpy(out + outlen, label, labellen);
 			outlen += labellen;
 		} else {
 			ssize_t inputlen = 0;
 
 			if (outlen + labellen + (e != NULL) + 4 >= outsize)
 				return 1;
 
 			if ((inputlen = utf8_to_utf32(label, labellen, input, countof(input))) < 0)
 				return 1;
 
 			memcpy(out + outlen, "xn--", 4);
 			outlen += 4;
 
-			labellen = outsize - outlen - 1; // -1 to leave space for the trailing \0
+			labellen = outsize - outlen - (e != NULL) - 1; // -1 to leave space for the trailing \0
 			if (punycode_encode(inputlen, input, &labellen, out + outlen))
 				return 1;
 			outlen += labellen;
 		}
 
 		if (e)
 			out[outlen++] = '.';
 		out[outlen] = 0;
 	}
 
 	return 0;
 }
 #endif
