commit 5cee79dded54abbe3a5fbf5f87ca1f3951bd0347
Author: Eugene Kliuchnikov <eustas.ru@gmail.com>
Date:   Mon Apr 24 12:30:26 2023 +0200

    Fix "Stack-buffer-overflow in pns_decode" (#104)

diff --git a/libfaad/pns.c b/libfaad/pns.c
index 3e7a650..9f4187d 100644
--- a/libfaad/pns.c
+++ b/libfaad/pns.c
@@ -158,120 +158,119 @@ static INLINE void gen_rand_vector(real_t *spec, int16_t scale_factor, uint16_t
 void pns_decode(ic_stream *ics_left, ic_stream *ics_right,
                 real_t *spec_left, real_t *spec_right, uint16_t frame_len,
                 uint8_t channel_pair, uint8_t object_type,
                 /* RNG states */ uint32_t *__r1, uint32_t *__r2)
 {
     uint8_t g, sfb, b;
-    uint16_t size, offs;
+    uint16_t begin, end;
 
     uint8_t group = 0;
     uint16_t nshort = frame_len >> 3;
 
     uint8_t sub = 0;
 
 #ifdef FIXED_POINT
     /* IMDCT scaling */
     if (object_type == LD)
     {
         sub = 9 /*9*/;
     } else {
         if (ics_left->window_sequence == EIGHT_SHORT_SEQUENCE)
             sub = 7 /*7*/;
         else
             sub = 10 /*10*/;
     }
 #endif
 
     for (g = 0; g < ics_left->num_window_groups; g++)
     {
         /* Do perceptual noise substitution decoding */
         for (b = 0; b < ics_left->window_group_length[g]; b++)
         {
+            uint16_t base = group * nshort;
             for (sfb = 0; sfb < ics_left->max_sfb; sfb++)
             {
                 uint32_t r1_dep = 0, r2_dep = 0;
 
                 if (is_noise(ics_left, g, sfb))
                 {
 #ifdef LTP_DEC
                     /* Simultaneous use of LTP and PNS is not prevented in the
                        syntax. If both LTP, and PNS are enabled on the same
                        scalefactor band, PNS takes precedence, and no prediction
                        is applied to this band.
                     */
                     ics_left->ltp.long_used[sfb] = 0;
                     ics_left->ltp2.long_used[sfb] = 0;
 #endif
 
 #ifdef MAIN_DEC
                     /* For scalefactor bands coded using PNS the corresponding
                        predictors are switched to "off".
                     */
                     ics_left->pred.prediction_used[sfb] = 0;
 #endif
-
-                    offs = ics_left->swb_offset[sfb];
-                    size = min(ics_left->swb_offset[sfb+1], ics_left->swb_offset_max) - offs;
+                    begin = min(base + ics_right->swb_offset[sfb], ics_right->swb_offset_max);
+                    end = min(base + ics_left->swb_offset[sfb+1], ics_left->swb_offset_max);
 
                     r1_dep = *__r1;
                     r2_dep = *__r2;
 
                     /* Generate random vector */
-                    gen_rand_vector(&spec_left[(group*nshort)+offs],
-                        ics_left->scale_factors[g][sfb], size, sub, __r1, __r2);
+                    gen_rand_vector(&spec_left[begin],
+                        ics_left->scale_factors[g][sfb], end - begin, sub, __r1, __r2);
                 }
 
 /* From the spec:
    If the same scalefactor band and group is coded by perceptual noise
    substitution in both channels of a channel pair, the correlation of
    the noise signal can be controlled by means of the ms_used field: While
    the default noise generation process works independently for each channel
    (separate generation of random vectors), the same random vector is used
    for both channels if ms_used[] is set for a particular scalefactor band
    and group. In this case, no M/S stereo coding is carried out (because M/S
    stereo coding and noise substitution coding are mutually exclusive).
    If the same scalefactor band and group is coded by perceptual noise
    substitution in only one channel of a channel pair the setting of ms_used[]
    is not evaluated.
 */
                 if ((ics_right != NULL)
                     && is_noise(ics_right, g, sfb))
                 {
 #ifdef LTP_DEC
                     /* See comment above. */
                     ics_right->ltp.long_used[sfb] = 0;
                     ics_right->ltp2.long_used[sfb] = 0;
 #endif
 #ifdef MAIN_DEC
                     /* See comment above. */
                     ics_right->pred.prediction_used[sfb] = 0;
 #endif
 
                     if (channel_pair && is_noise(ics_left, g, sfb) &&
                         (((ics_left->ms_mask_present == 1) &&
                         (ics_left->ms_used[g][sfb])) ||
                         (ics_left->ms_mask_present == 2)))
                     {
                         /*uint16_t c;*/
 
-                        offs = ics_right->swb_offset[sfb];
-                        size = min(ics_right->swb_offset[sfb+1], ics_right->swb_offset_max) - offs;
+                        begin = min(base + ics_right->swb_offset[sfb], ics_right->swb_offset_max);
+                        end = min(base + ics_right->swb_offset[sfb+1], ics_right->swb_offset_max);
 
                         /* Generate random vector dependent on left channel*/
-                        gen_rand_vector(&spec_right[(group*nshort)+offs],
-                            ics_right->scale_factors[g][sfb], size, sub, &r1_dep, &r2_dep);
+                        gen_rand_vector(&spec_right[begin],
+                            ics_right->scale_factors[g][sfb], end - begin, sub, &r1_dep, &r2_dep);
 
                     } else /*if (ics_left->ms_mask_present == 0)*/ {
-
-                        offs = ics_right->swb_offset[sfb];
-                        size = min(ics_right->swb_offset[sfb+1], ics_right->swb_offset_max) - offs;
+                        begin = min(base + ics_right->swb_offset[sfb], ics_right->swb_offset_max);
+                        end = min(base + ics_right->swb_offset[sfb+1], ics_right->swb_offset_max);
 
                         /* Generate random vector */
-                        gen_rand_vector(&spec_right[(group*nshort)+offs],
-                            ics_right->scale_factors[g][sfb], size, sub, __r1, __r2);
+                        gen_rand_vector(&spec_right[begin],
+                            ics_right->scale_factors[g][sfb], end - begin, sub, __r1, __r2);
                     }
                 }
             } /* sfb */
             group++;
         } /* b */
     } /* g */
 }
