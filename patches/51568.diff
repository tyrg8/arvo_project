commit aebf63d2e3b26db3e7d76374f3906c50a0f02085
Author: Keith Winstein <keithw@cs.stanford.edu>
Date:   Wed May 3 22:34:20 2023 -0700

    BinaryReader/BinaryReaderIR: check for missing end markers (#2218)

diff --git a/src/binary-reader-ir.cc b/src/binary-reader-ir.cc
index 2d21a6ce..9eba058b 100644
--- a/src/binary-reader-ir.cc
+++ b/src/binary-reader-ir.cc
@@ -448,7 +448,11 @@ Result BinaryReaderIR::TopLabel(LabelNode** label) {
 Result BinaryReaderIR::TopLabelExpr(LabelNode** label, Expr** expr) {
   CHECK_RESULT(TopLabel(label));
   LabelNode* parent_label;
   CHECK_RESULT(GetLabelAt(&parent_label, 1));
+  if (parent_label->exprs->empty()) {
+    PrintError("TopLabelExpr: parent label has empty expr list");
+    return Result::Error;
+  }
   *expr = &parent_label->exprs->back();
   return Result::Ok;
 }
@@ -1217,6 +1221,10 @@ Result BinaryReaderIR::OnUnreachableExpr() {
 
 Result BinaryReaderIR::EndFunctionBody(Index index) {
   current_func_ = nullptr;
+  if (!label_stack_.empty()) {
+    PrintError("function %" PRIindex " missing end marker", index);
+    return Result::Error;
+  }
   return Result::Ok;
 }
 
@@ -1297,6 +1305,10 @@ Result BinaryReaderIR::BeginElemSegmentInitExpr(Index index) {
 }
 
 Result BinaryReaderIR::EndInitExpr() {
+  if (!label_stack_.empty()) {
+    PrintError("init expression missing end marker");
+    return Result::Error;
+  }
   return Result::Ok;
 }
 
diff --git a/src/binary-reader.cc b/src/binary-reader.cc
index de91300a..8e86383d 100644
--- a/src/binary-reader.cc
+++ b/src/binary-reader.cc
@@ -560,7 +560,14 @@ Index BinaryReader::NumTotalFuncs() {
 
 Result BinaryReader::ReadInitExpr(Index index) {
   // Read instructions until END opcode is reached.
-  return ReadInstructions(/*stop_on_end=*/true, read_end_, NULL);
+  Opcode final_opcode(Opcode::Invalid);
+  CHECK_RESULT(
+      ReadInstructions(/*stop_on_end=*/true, read_end_, &final_opcode));
+  ERROR_UNLESS(state_.offset <= read_end_,
+               "init expression longer than given size");
+  ERROR_UNLESS(final_opcode == Opcode::End,
+               "init expression must end with END opcode");
+  return Result::Ok;
 }
 
 Result BinaryReader::ReadTable(Type* out_elem_type, Limits* out_elem_limits) {
diff --git a/test/regress/bad-missing-end.txt b/test/regress/bad-missing-end.txt
new file mode 100644
index 00000000..8c00f59f
--- /dev/null
+++ b/test/regress/bad-missing-end.txt
@@ -0,0 +1,11 @@
+;;; TOOL: run-gen-wasm-bad
+magic
+version
+section(TYPE) { count[1] function params[0] results[0] }
+section(FUNCTION) { count[1] type[0] }
+section(GLOBAL) { count[1] i32 mut[0] init_expr[] }
+section(CODE) { count[1] func { locals[0] } }
+(;; STDERR ;;;
+0000017: error: init expression must end with END opcode
+0000017: error: init expression must end with END opcode
+;;; STDERR ;;)
diff --git a/test/spec/binary.txt b/test/spec/binary.txt
index 58784707..b9de7087 100644
--- a/test/spec/binary.txt
+++ b/test/spec/binary.txt
@@ -265,7 +265,7 @@ out/test/spec/binary.wast:1653: assert_malformed passed:
 out/test/spec/binary.wast:1687: assert_malformed passed:
   0000021: error: unable to read u32 leb128: elem segment flags
 out/test/spec/binary.wast:1703: assert_malformed passed:
-  0000024: error: unable to read u32 leb128: elem count
+  0000024: error: init expression must end with END opcode
 out/test/spec/binary.wast:1720: assert_malformed passed:
   0000021: error: unfinished section (expected end: 0x27)
 out/test/spec/binary.wast:1746: assert_malformed passed:
diff --git a/test/spec/exception-handling/binary.txt b/test/spec/exception-handling/binary.txt
index 2e7e25f8..918bba95 100644
--- a/test/spec/exception-handling/binary.txt
+++ b/test/spec/exception-handling/binary.txt
@@ -266,7 +266,7 @@ out/test/spec/exception-handling/binary.wast:1653: assert_malformed passed:
 out/test/spec/exception-handling/binary.wast:1687: assert_malformed passed:
   0000021: error: unable to read u32 leb128: elem segment flags
 out/test/spec/exception-handling/binary.wast:1703: assert_malformed passed:
-  0000024: error: unable to read u32 leb128: elem count
+  0000024: error: init expression must end with END opcode
 out/test/spec/exception-handling/binary.wast:1720: assert_malformed passed:
   0000021: error: unfinished section (expected end: 0x27)
 out/test/spec/exception-handling/binary.wast:1746: assert_malformed passed:
diff --git a/test/spec/multi-memory/binary.txt b/test/spec/multi-memory/binary.txt
index 8aad12fe..c98ba8a5 100644
--- a/test/spec/multi-memory/binary.txt
+++ b/test/spec/multi-memory/binary.txt
@@ -246,7 +246,7 @@ out/test/spec/multi-memory/binary.wast:1462: assert_malformed passed:
 out/test/spec/multi-memory/binary.wast:1496: assert_malformed passed:
   0000021: error: unable to read u32 leb128: elem segment flags
 out/test/spec/multi-memory/binary.wast:1512: assert_malformed passed:
-  0000024: error: unable to read u32 leb128: elem count
+  0000024: error: init expression must end with END opcode
 out/test/spec/multi-memory/binary.wast:1529: assert_malformed passed:
   0000021: error: unfinished section (expected end: 0x27)
 out/test/spec/multi-memory/binary.wast:1555: assert_malformed passed:
