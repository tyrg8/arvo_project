commit ffbff25ec6c6d0ad3f8df76f57210698f7947fc3
Author: Veronika Hanulíková <vhanulik@redhat.com>
Date:   Fri Aug 11 09:44:57 2023 +0200

    fuzz_pkcs11.c: Use valid data for verify
    
    Thanks OSS-Fuzz
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=60971

diff --git a/src/tests/fuzzing/fuzz_pkcs11.c b/src/tests/fuzzing/fuzz_pkcs11.c
index b6e05c9a..fdc163b4 100644
--- a/src/tests/fuzzing/fuzz_pkcs11.c
+++ b/src/tests/fuzzing/fuzz_pkcs11.c
@@ -460,64 +460,64 @@ end:
 static void test_verify(const uint8_t *data, size_t size)
 {
 	CK_SESSION_HANDLE    session;
 	CK_MECHANISM         mech = {0, NULL_PTR, 0};
 	uint8_t              login_type = CKU_USER;
 	char                *pin = NULL;
 	const unsigned char *opt_id = NULL;
 	size_t               opt_id_len = 0;
 	const uint8_t       *verify_data = NULL, *sig_data = NULL;
 	size_t               verify_data_size = 0;
 	CK_OBJECT_HANDLE     key = CK_INVALID_HANDLE;
 	unsigned char        in_buffer[1025], sig_buffer[512];
 	CK_ULONG             sig_len = sizeof(sig_buffer);
 	size_t               to_process = 0;
 
 	/* Process options*/
 	if (set_mechanism(&data, &size, &mech) || size < 3)
 		return;
 	login_type = data[0];
 	data++; size--;
 	if (!(pin = extract_word(&data, &size)))
 		return;
 	opt_id = data;
 	opt_id_len = get_buffer(&opt_id, size, &data, &size, 256);
 
 	/* Prepare buffer with data */
 	verify_data = data;
 	if ((verify_data_size = get_buffer(&verify_data, size, &data, &size, 6000)) == 0)
 		goto end;
 	/* Get buffer with signature */
 	sig_data = data;
 	if ((sig_len = get_buffer(&sig_data, size, &data, &size, 512)) == 0)
 		goto end;
 	memcpy(sig_buffer, sig_data, sig_len);
 
 	/* Initialize */
 	if (fuzz_pkcs11_initialize(data, size, NULL, &session) != CKR_OK)
 		goto end;
 
 	p11->C_Login(session, login_type, (CK_UTF8CHAR *) pin, strlen(pin));
 
 	if (!fuzz_find_object(session, CKO_PUBLIC_KEY, &key, opt_id_len ? opt_id : NULL, opt_id_len)
 		&& !fuzz_find_object(session, CKO_CERTIFICATE, &key, opt_id_len ? opt_id : NULL, opt_id_len))
 		goto fin;
 
 	if (p11->C_VerifyInit(session, &mech, key) != CKR_OK)
 		goto fin;
 
 	if (verify_data_size <= sizeof(in_buffer)) {
 		memcpy(in_buffer, verify_data, verify_data_size);
 		p11->C_Verify(session, in_buffer, verify_data_size, sig_buffer, sig_len);
 	} else {
 		while (verify_data_size > 0) {
 			to_process = verify_data_size < sizeof(in_buffer) ? verify_data_size : sizeof(in_buffer);
 			verify_data_size -= to_process;
-			memcpy(in_buffer, data, to_process);
+			memcpy(in_buffer, verify_data, to_process);
 			verify_data += to_process;
 
 			if (p11->C_VerifyUpdate(session, in_buffer, to_process) != CKR_OK)
 				goto fin;
 		}
 
 		p11->C_VerifyFinal(session, sig_buffer, sig_len);
 	}
