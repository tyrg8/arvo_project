commit c32cac6e59a899497c603025b74fcfd316282f36
Author: dearblue <dearblue@users.osdn.me>
Date:   Wed May 4 09:13:56 2022 +0900

    Introduce `mrb_stack_extend_adjust()`
    
    If necessary, adjust the pointer on the VM stack after `mrb_stack_extend()`.

diff --git a/src/vm.c b/src/vm.c
index bff02877a..b04c9d7e5 100644
--- a/src/vm.c
+++ b/src/vm.c
@@ -202,6 +202,21 @@ mrb_stack_extend(mrb_state *mrb, mrb_int room)
   }
 }
 
+static void
+mrb_stack_extend_adjust(mrb_state *mrb, mrb_int room, const mrb_value **argp)
+{
+  const struct mrb_context *c = mrb->c;
+  ptrdiff_t voff = *argp - c->stbase;
+
+  if (voff < 0 || voff >= c->stend - c->stbase) {
+    mrb_stack_extend(mrb, room);
+  }
+  else {
+    mrb_stack_extend(mrb, room);
+    *argp = c->stbase + voff;
+  }
+}
+
 static inline struct REnv*
 uvenv(mrb_state *mrb, mrb_int up)
 {
@@ -481,91 +496,84 @@ MRB_API mrb_value
 mrb_funcall_with_block(mrb_state *mrb, mrb_value self, mrb_sym mid, mrb_int argc, const mrb_value *argv, mrb_value blk)
 {
   mrb_value val;
   int ai = mrb_gc_arena_save(mrb);
 
   if (!mrb->jmp) {
     struct mrb_jmpbuf c_jmp;
     ptrdiff_t nth_ci = mrb->c->ci - mrb->c->cibase;
 
     MRB_TRY(&c_jmp) {
       mrb->jmp = &c_jmp;
       /* recursive call */
       val = mrb_funcall_with_block(mrb, self, mid, argc, argv, blk);
       mrb->jmp = 0;
     }
     MRB_CATCH(&c_jmp) { /* error */
       while (nth_ci < (mrb->c->ci - mrb->c->cibase)) {
         cipop(mrb);
       }
       mrb->jmp = 0;
       val = mrb_obj_value(mrb->exc);
     }
     MRB_END_EXC(&c_jmp);
     mrb->jmp = 0;
   }
   else {
     mrb_method_t m;
     struct RClass *c;
     mrb_callinfo *ci = mrb->c->ci;
     mrb_int n = mrb_ci_nregs(ci);
-    ptrdiff_t voff = -1;
 
     if (!mrb->c->stbase) {
       stack_init(mrb);
     }
     if (ci - mrb->c->cibase > MRB_CALL_LEVEL_MAX) {
       mrb_exc_raise(mrb, mrb_obj_value(mrb->stack_err));
     }
-    if (mrb->c->stbase <= argv && argv < mrb->c->stend) {
-      voff = argv - mrb->c->stbase;
-    }
     if (argc < 0) {
       mrb_raisef(mrb, E_ARGUMENT_ERROR, "negative argc for funcall (%i)", argc);
     }
     c = mrb_class(mrb, self);
     m = mrb_method_search_vm(mrb, &c, mid);
-    mrb_stack_extend(mrb, n + argc + 3);
+    mrb_stack_extend_adjust(mrb, n + argc + 3, &argv);
     if (argc >= 15) {
       ci->stack[n+1] = mrb_ary_new_from_values(mrb, argc, argv);
       ci->stack[n+2] = blk;
       argc = 15;
     }
     else {
       if (argc > 0)
         stack_copy(ci->stack+n+1, argv, argc);
       ci->stack[n+argc+1] = blk;
     }
     if (MRB_METHOD_UNDEF_P(m)) {
       uint16_t ac = (uint16_t)argc;
       m = prepare_missing(mrb, self, mid, &c, (uint32_t)n, &ac, mrb_nil_value(), 0);
       argc = (mrb_int)ac;
       mid = MRB_SYM(method_missing);
     }
     ci = cipush(mrb, n, 0, c, NULL, mid, (uint16_t)argc);
     if (MRB_METHOD_PROC_P(m)) {
       struct RProc *p = MRB_METHOD_PROC(m);
 
       mrb_vm_ci_proc_set(ci, p);
       if (!MRB_PROC_CFUNC_P(p)) {
         mrb_stack_extend(mrb, p->body.irep->nregs + argc);
       }
     }
-    if (voff >= 0) {
-      argv = mrb->c->stbase + voff;
-    }
     ci->stack[0] = self;
 
     if (MRB_METHOD_CFUNC_P(m)) {
       ci->cci = CINFO_DIRECT;
       val = MRB_METHOD_CFUNC(m)(mrb, self);
       cipop(mrb);
     }
     else {
       ci->cci = CINFO_SKIP;
       val = mrb_run(mrb, MRB_METHOD_PROC(m), self);
     }
   }
   mrb_gc_arena_restore(mrb, ai);
   mrb_gc_protect(mrb, val);
   return val;
 }
@@ -839,43 +847,43 @@ MRB_API mrb_value
 mrb_yield_with_class(mrb_state *mrb, mrb_value b, mrb_int argc, const mrb_value *argv, mrb_value self, struct RClass *c)
 {
   struct RProc *p;
   mrb_sym mid = mrb->c->ci->mid;
   mrb_callinfo *ci;
   mrb_value val;
   mrb_int n;
 
   check_block(mrb, b);
   ci = mrb->c->ci;
   n = mrb_ci_nregs(ci);
   p = mrb_proc_ptr(b);
   ci = cipush(mrb, n, CINFO_SKIP, c, p, mid, 0 /* dummy */);
   ci->nk = 0;
   if (argc >= CALL_MAXARGS) {
     ci->n = 15;
     n = 3;
   }
   else {
     ci->n = (uint8_t)argc;
     n = argc + 2;
   }
-  mrb_stack_extend(mrb, n);
+  mrb_stack_extend_adjust(mrb, n, &argv);
   mrb->c->ci->stack[0] = self;
   if (ci->n == 15) {
     mrb->c->ci->stack[1] = mrb_ary_new_from_values(mrb, argc, argv);
     argc = 1;
   }
   else if (argc > 0) {
     stack_copy(mrb->c->ci->stack+1, argv, argc);
   }
   mrb->c->ci->stack[argc+1] = mrb_nil_value(); /* clear blk */
 
   if (MRB_PROC_CFUNC_P(p)) {
     ci->cci = CINFO_DIRECT;
     val = MRB_PROC_CFUNC(p)(mrb, self);
     cipop(mrb);
   }
   else {
     val = mrb_run(mrb, p, self);
   }
   return val;
 }
@@ -900,17 +908,17 @@ mrb_value
 mrb_yield_cont(mrb_state *mrb, mrb_value b, mrb_value self, mrb_int argc, const mrb_value *argv)
 {
   struct RProc *p;
   mrb_callinfo *ci;
 
   check_block(mrb, b);
   p = mrb_proc_ptr(b);
   ci = mrb->c->ci;
 
-  mrb_stack_extend(mrb, 4);
+  mrb_stack_extend_adjust(mrb, 4, &argv);
   mrb->c->ci->stack[1] = mrb_ary_new_from_values(mrb, argc, argv);
   mrb->c->ci->stack[2] = mrb_nil_value();
   mrb->c->ci->stack[3] = mrb_nil_value();
   ci->n = 15;
   ci->nk = 0;
   return exec_irep(mrb, self, p);
 }
