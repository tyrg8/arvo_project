commit 2aa2b4362e44aa4bcbd1e2086aab6d2aa82df506
Author: Aurelien David <aurelien.david@telecom-paristech.fr>
Date:   Tue Feb 13 13:27:23 2024 +0100

    check str len in sdp parse args
    
    ossfuzz issue 66591

diff --git a/src/ietf/sdp.c b/src/ietf/sdp.c
index c54c30c9b..009e57784 100644
--- a/src/ietf/sdp.c
+++ b/src/ietf/sdp.c
@@ -74,170 +74,174 @@ GF_SDP_FMTP *SDP_GetFMTPForPayload(GF_SDPMedia *media, u32 PayloadType)
 void SDP_ParseAttribute(GF_SDPInfo *sdp, char *buffer, GF_SDPMedia *media)
 {
 	s32 pos;
 	u32 PayT;
 	char comp[3000];
 	GF_X_Attribute *att;
 
 	pos = gf_token_get(buffer, 0, " :\t\r\n", comp, 3000);
 
 	if (!strcmp(comp, "cat")) {
 		if (media) return;
 		/*pos = */gf_token_get(buffer, pos, ":\t\r\n", comp, 3000);
 		sdp->a_cat = gf_strdup(comp);
 		return;
 	}
 	if (!strcmp(comp, "keywds")) {
 		if (media) return;
 		/*pos = */gf_token_get(buffer, pos, ":\t\r\n", comp, 3000);
 		sdp->a_keywds = gf_strdup(comp);
 		return;
 	}
 	if (!strcmp(comp, "tool")) {
 		if (media) return;
 		/*pos = */gf_token_get(buffer, pos, ":\r\n", comp, 3000);
 		sdp->a_tool = gf_strdup(comp);
 		return;
 	}
 
 	if (!strcmp(comp, "ptime")) {
 		if (!media) return;
 		/*pos = */gf_token_get(buffer, pos, ":\r\n", comp, 3000);
 		media->PacketTime = atoi(comp);
 		return;
 	}
 	if (!strcmp(comp, "recvonly")) {
 		if (!media) {
 			sdp->a_SendReceive = 1;
 		} else {
 			media->SendReceive = 1;
 		}
 		return;
 	}
 	if (!strcmp(comp, "sendonly")) {
 		if (!media) {
 			sdp->a_SendReceive = 2;
 		} else {
 			media->SendReceive = 2;
 		}
 		return;
 	}
 	if (!strcmp(comp, "sendrecv")) {
 		if (!media) {
 			sdp->a_SendReceive = 3;
 		} else {
 			media->SendReceive = 3;
 		}
 		return;
 	}
 	if (!strcmp(comp, "orient")) {
 		if (!media || media->Type) return;
 		/*pos = */gf_token_get(buffer, pos, ":\r\n", comp, 3000);
 		media->orientation = gf_strdup(comp);
 		return;
 	}
 	if (!strcmp(comp, "type")) {
 		if (media) return;
 		/*pos = */gf_token_get(buffer, pos, ":\r\n", comp, 3000);
 		sdp->a_type = gf_strdup(comp);
 		return;
 	}
 	if (!strcmp(comp, "charset")) {
 		if (media) return;
 		/*pos = */gf_token_get(buffer, pos, ":\r\n", comp, 3000);
 		sdp->a_charset = gf_strdup(comp);
 		return;
 	}
 	if (!strcmp(comp, "sdplang")) {
 		/*pos = */gf_token_get(buffer, pos, ":\r\n", comp, 3000);
 		if (media) {
 			media->sdplang = gf_strdup(comp);
 		} else {
 			sdp->a_sdplang = gf_strdup(comp);
 		}
 		return;
 	}
 	if (!strcmp(comp, "lang")) {
 		/*pos = */gf_token_get(buffer, pos, ":\r\n", comp, 3000);
 		if (media) {
 			media->lang = gf_strdup(comp);
 		} else {
 			sdp->a_lang = gf_strdup(comp);
 		}
 		return;
 	}
 	if (!strcmp(comp, "framerate")) {
 		//only for video
 		if (!media || (media->Type != 1)) return;
 		/*pos = */gf_token_get(buffer, pos, ":\r\n", comp, 3000);
 		media->FrameRate = atof(comp);
 		return;
 	}
 	if (!strcmp(comp, "quality")) {
 		if (!media) return;
 		/*pos = */gf_token_get(buffer, pos, ":\r\n", comp, 3000);
 		media->Quality = atoi(comp);
 		return;
 	}
 	if (!strcmp(comp, "rtpmap")) {
 		GF_RTPMap *map;
 		if (!media) return;
 		map = (GF_RTPMap*)gf_malloc(sizeof(GF_RTPMap));
 		pos = gf_token_get(buffer, pos, ": \r\n", comp, 3000);
 		map->PayloadType = atoi(comp);
 		pos = gf_token_get(buffer, pos, " /\r\n", comp, 3000);
 		map->payload_name = gf_strdup(comp);
 		pos = gf_token_get(buffer, pos, " /\r\n", comp, 3000);
 		map->ClockRate = atoi(comp);
 		pos = gf_token_get(buffer, pos, " /\r\n", comp, 3000);
 		map->AudioChannels = (pos > 0) ? atoi(comp) : 0;
 		gf_list_add(media->RTPMaps, map);
 		return;
 	}
 	//FMTP
 	if (!strcmp(comp, "fmtp")) {
 		GF_SDP_FMTP *fmtp;
 		if (!media) return;
 		pos = gf_token_get(buffer, pos, ": \r\n", comp, 3000);
 		PayT = atoi(comp);
 		fmtp = SDP_GetFMTPForPayload(media, PayT);
 		if (!fmtp) {
 			fmtp = gf_sdp_fmtp_new();
 			fmtp->PayloadType = PayT;
 			gf_list_add(media->FMTP, fmtp);
 		}
 		while (1) {
 			pos = gf_token_get(buffer, pos, "; =\r\n", comp, 3000);
 			if (pos <= 0) break;
 			att = (GF_X_Attribute*)gf_malloc(sizeof(GF_X_Attribute));
 			att->Name = gf_strdup(comp);
 			att->Value = NULL;
 			pos ++;
 			pos = gf_token_get(buffer, pos, ";\r\n", comp, 3000);
 			if (pos > 0) att->Value = gf_strdup(comp);
 			gf_list_add(fmtp->Attributes, att);
 		}
 		return;
 	}
 	//the rest cannot be discarded that way as it may be application-specific
 	//so keep it.
 	//a= <attribute> || <attribute>:<value>
 	//we add <attribute> <value> in case ...
 	pos = gf_token_get(buffer, 0, " :\r\n", comp, 3000);
 	att = (GF_X_Attribute*)gf_malloc(sizeof(GF_X_Attribute));
 	att->Name = gf_strdup(comp);
 	att->Value = NULL;
-	pos += 1;
-	if (buffer[pos] == ' ') pos += 1;
+
+	if (pos+1 < (s32)strlen(buffer)) {
+		pos += 1;
+		if (buffer[pos] == ' ') pos += 1;
+	}
+
 	pos = gf_token_get(buffer, pos, "\r\n", comp, 3000);
 	if (pos > 0) att->Value = gf_strdup(comp);
 
 	if (media) {
 		gf_list_add(media->Attributes, att);
 	} else {
 		gf_list_add(sdp->Attributes, att);
 	}
 }
 
 
 
 #define SDPM_DESTROY(p) if (media->p) gf_free(media->p)
