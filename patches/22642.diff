commit 1f0e84c12727dff0bd46240fe9e649985fc73512
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Wed May 27 19:07:18 2020 +0200

    GDALResampleChunk32R_Mode(): fix heap-buffer-overflow. master only. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22642

diff --git a/gdal/gcore/overview.cpp b/gdal/gcore/overview.cpp
index 1acce0dd13..da06bcf089 100644
--- a/gdal/gcore/overview.cpp
+++ b/gdal/gcore/overview.cpp
@@ -1077,240 +1077,239 @@ static CPLErr
 GDALResampleChunk32R_Mode( double dfXRatioDstToSrc, double dfYRatioDstToSrc,
                            double dfSrcXDelta,
                            double dfSrcYDelta,
                            GDALDataType /* eWrkDataType */,
                            const void * pChunk,
                            const GByte * pabyChunkNodataMask,
                            int nChunkXOff, int nChunkXSize,
                            int nChunkYOff, int nChunkYSize,
                            int nDstXOff, int nDstXOff2,
                            int nDstYOff, int nDstYOff2,
-                           GDALRasterBand * poOverview,
+                           GDALRasterBand * /* poOverview */,
                            void** ppDstBuffer,
                            GDALDataType* peDstBufferDataType,
                            const char * /* pszResampling */,
                            int bHasNoData, float fNoDataValue,
                            GDALColorTable* poColorTable,
                            GDALDataType eSrcDataType,
                            bool /* bPropagateNoData */ )
 
 {
     const float * const pafChunk = static_cast<const float *>( pChunk );
 
+    const int nDstXSize = nDstXOff2 - nDstXOff;
     *ppDstBuffer =
-        VSI_MALLOC3_VERBOSE(nDstXOff2 - nDstXOff, nDstYOff2 - nDstYOff,
+        VSI_MALLOC3_VERBOSE(nDstXSize, nDstYOff2 - nDstYOff,
                             GDALGetDataTypeSizeBytes(GDT_Float32));
     if( *ppDstBuffer == nullptr )
     {
         return CE_Failure;
     }
     *peDstBufferDataType = GDT_Float32;
     float* const pafDstBuffer = static_cast<float*>(*ppDstBuffer);
 
-    const int nOXSize = poOverview->GetXSize();
-
 /* -------------------------------------------------------------------- */
 /*      Create the filter kernel and allocate scanline buffer.          */
 /* -------------------------------------------------------------------- */
 
     if( !bHasNoData )
         fNoDataValue = 0.0f;
     int nEntryCount = 0;
     GDALColorEntry* aEntries = nullptr;
     int nTransparentIdx = -1;
     if( poColorTable &&
         !ReadColorTableAsArray(poColorTable, nEntryCount,
                                aEntries, nTransparentIdx) )
     {
         return CE_Failure;
     }
 
     GPtrDiff_t nMaxNumPx = 0;
     float *pafVals = nullptr;
     int *panSums = nullptr;
 
     const int nChunkRightXOff = nChunkXOff + nChunkXSize;
     const int nChunkBottomYOff = nChunkYOff + nChunkYSize;
     std::vector<int> anVals(256, 0);
 
 /* ==================================================================== */
 /*      Loop over destination scanlines.                                */
 /* ==================================================================== */
     for( int iDstLine = nDstYOff; iDstLine < nDstYOff2; ++iDstLine )
     {
         double dfSrcYOff = dfSrcYDelta + iDstLine * dfYRatioDstToSrc;
         int nSrcYOff = static_cast<int>(dfSrcYOff + 1e-8);
 #ifdef only_pixels_with_more_than_10_pct_participation
         // When oversampling, don't take into account pixels that have a tiny
         // participation in the resulting pixel
         if( dfYRatioDstToSrc > 1 && dfSrcYOff - nSrcYOff > 0.9 &&
             nSrcYOff < nChunkBottomYOff)
             nSrcYOff ++;
 #endif
         if( nSrcYOff < nChunkYOff )
             nSrcYOff = nChunkYOff;
 
         double dfSrcYOff2 = dfSrcYDelta + (iDstLine+1) * dfYRatioDstToSrc;
         int nSrcYOff2 = static_cast<int>(ceil(dfSrcYOff2 - 1e-8));
 #ifdef only_pixels_with_more_than_10_pct_participation
         // When oversampling, don't take into account pixels that have a tiny
         // participation in the resulting pixel
         if( dfYRatioDstToSrc > 1 && nSrcYOff2 - dfSrcYOff2 > 0.9 &&
             nSrcYOff2 > nChunkYOff)
             nSrcYOff2 --;
 #endif
         if( nSrcYOff2 == nSrcYOff )
             ++nSrcYOff2;
         if( nSrcYOff2 > nChunkBottomYOff )
             nSrcYOff2 = nChunkBottomYOff;
 
         const float * const pafSrcScanline =
             pafChunk + (static_cast<GPtrDiff_t>(nSrcYOff-nChunkYOff) * nChunkXSize);
         const GByte *pabySrcScanlineNodataMask = nullptr;
         if( pabyChunkNodataMask != nullptr )
             pabySrcScanlineNodataMask =
                 pabyChunkNodataMask + static_cast<GPtrDiff_t>(nSrcYOff-nChunkYOff) * nChunkXSize;
 
-        float* const pafDstScanline = pafDstBuffer + (iDstLine - nDstYOff) * nOXSize;
+        float* const pafDstScanline = pafDstBuffer + (iDstLine - nDstYOff) * nDstXSize;
 /* -------------------------------------------------------------------- */
 /*      Loop over destination pixels                                    */
 /* -------------------------------------------------------------------- */
         for( int iDstPixel = nDstXOff; iDstPixel < nDstXOff2; ++iDstPixel )
         {
             double dfSrcXOff = dfSrcXDelta + iDstPixel * dfXRatioDstToSrc;
             // Apply some epsilon to avoid numerical precision issues
             int nSrcXOff = static_cast<int>(dfSrcXOff + 1e-8);
 #ifdef only_pixels_with_more_than_10_pct_participation
             // When oversampling, don't take into account pixels that have a tiny
             // participation in the resulting pixel
             if( dfXRatioDstToSrc > 1 && dfSrcXOff - nSrcXOff > 0.9 &&
                 nSrcXOff < nChunkRightXOff)
                 nSrcXOff ++;
 #endif
             if( nSrcXOff < nChunkXOff )
                 nSrcXOff = nChunkXOff;
 
             double dfSrcXOff2 = dfSrcXDelta + (iDstPixel+1)* dfXRatioDstToSrc;
             int nSrcXOff2 = static_cast<int>(ceil(dfSrcXOff2 - 1e-8));
 #ifdef only_pixels_with_more_than_10_pct_participation
             // When oversampling, don't take into account pixels that have a tiny
             // participation in the resulting pixel
             if( dfXRatioDstToSrc > 1 && nSrcXOff2 - dfSrcXOff2 > 0.9 &&
                 nSrcXOff2 > nChunkXOff)
                 nSrcXOff2 --;
 #endif
             if( nSrcXOff2 == nSrcXOff )
                 nSrcXOff2 ++;
             if( nSrcXOff2 > nChunkRightXOff )
                 nSrcXOff2 = nChunkRightXOff;
 
             if( eSrcDataType != GDT_Byte || nEntryCount > 256 )
             {
                 // Not sure how much sense it makes to run a majority
                 // filter on floating point data, but here it is for the sake
                 // of compatibility. It won't look right on RGB images by the
                 // nature of the filter.
                 GPtrDiff_t nNumPx = static_cast<GPtrDiff_t>(nSrcYOff2-nSrcYOff)*(nSrcXOff2-nSrcXOff);
                 GPtrDiff_t iMaxInd = 0;
                 GPtrDiff_t iMaxVal = -1;
 
                 if( pafVals == nullptr || nNumPx > nMaxNumPx )
                 {
                     pafVals = static_cast<float *>(
                         CPLRealloc(pafVals, nNumPx * sizeof(float)) );
                     panSums = static_cast<int *>(
                         CPLRealloc(panSums, nNumPx * sizeof(int)) );
                     nMaxNumPx = nNumPx;
                 }
 
                 for( int iY = nSrcYOff; iY < nSrcYOff2; ++iY )
                 {
                     const GPtrDiff_t iTotYOff = static_cast<GPtrDiff_t>(iY-nSrcYOff)*nChunkXSize-nChunkXOff;
                     for( int iX = nSrcXOff; iX < nSrcXOff2; ++iX )
                     {
                         if( pabySrcScanlineNodataMask == nullptr ||
                             pabySrcScanlineNodataMask[iX+iTotYOff] )
                         {
                             const float fVal = pafSrcScanline[iX+iTotYOff];
                             GPtrDiff_t i = 0;  // Used after for.
 
                             // Check array for existing entry.
                             for( ; i < iMaxInd; ++i )
                                 if( pafVals[i] == fVal
                                     && ++panSums[i] > panSums[iMaxVal] )
                                 {
                                     iMaxVal = i;
                                     break;
                                 }
 
                             // Add to arr if entry not already there.
                             if( i == iMaxInd )
                             {
                                 pafVals[iMaxInd] = fVal;
                                 panSums[iMaxInd] = 1;
 
                                 if( iMaxVal < 0 )
                                     iMaxVal = iMaxInd;
 
                                 ++iMaxInd;
                             }
                         }
                     }
                 }
 
                 if( iMaxVal == -1 )
                     pafDstScanline[iDstPixel - nDstXOff] = fNoDataValue;
                 else
                     pafDstScanline[iDstPixel - nDstXOff] = pafVals[iMaxVal];
             }
             else // if( eSrcDataType == GDT_Byte && nEntryCount < 256 )
             {
                 // So we go here for a paletted or non-paletted byte band.
                 // The input values are then between 0 and 255.
                 int nMaxVal = 0;
                 int iMaxInd = -1;
 
                 // The cost of this zeroing might be high. Perhaps we should just
                 // use the above generic case, and go to this one if the number
                 // of source pixels is large enough
                 std::fill(anVals.begin(), anVals.end(), 0);
 
                 for( int iY = nSrcYOff; iY < nSrcYOff2; ++iY )
                 {
                     const GPtrDiff_t iTotYOff =
                         static_cast<GPtrDiff_t>(iY - nSrcYOff) * nChunkXSize - nChunkXOff;
                     for( int iX = nSrcXOff; iX < nSrcXOff2; ++iX )
                     {
                         const float val = pafSrcScanline[iX+iTotYOff];
                         if( bHasNoData == FALSE || val != fNoDataValue )
                         {
                             int nVal = static_cast<int>(val);
                             if( ++anVals[nVal] > nMaxVal)
                             {
                                 // Sum the density.
                                 // Is it the most common value so far?
                                 iMaxInd = nVal;
                                 nMaxVal = anVals[nVal];
                             }
                         }
                     }
                 }
 
                 if( iMaxInd == -1 )
                     pafDstScanline[iDstPixel - nDstXOff] = fNoDataValue;
                 else
                     pafDstScanline[iDstPixel - nDstXOff] =
                         static_cast<float>(iMaxInd);
             }
         }
     }
 
     CPLFree( aEntries );
     CPLFree( pafVals );
     CPLFree( panSums );
 
     return CE_None;
 }
 
 /************************************************************************/
 /*                  GDALResampleConvolutionHorizontal()                 */
 /************************************************************************/
