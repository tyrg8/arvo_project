commit 505050728200e6446cc3ee81d7a2808d3575ea07
Merge: 43358cc7b6 b078ae6c01
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Fri Oct 4 22:47:10 2019 +0200

    Merge branch 'PHP-7.4'

diff --git a/Zend/zend_compile.c b/Zend/zend_compile.c
index eeeadb9d18..2d5fd66efd 100644
--- a/Zend/zend_compile.c
+++ b/Zend/zend_compile.c
@@ -1649,13 +1649,17 @@ ZEND_API void zend_activate_auto_globals(void) /* {{{ */
 int ZEND_FASTCALL zendlex(zend_parser_stack_elem *elem) /* {{{ */
 {
 	zval zv;
+	int ret;
 
 	if (CG(increment_lineno)) {
 		CG(zend_lineno)++;
 		CG(increment_lineno) = 0;
 	}
 
-	return lex_scan(&zv, elem);
+	ret = lex_scan(&zv, elem);
+	ZEND_ASSERT(!EG(exception) || ret == T_ERROR);
+	return ret;
+
 }
 /* }}} */
 
diff --git a/Zend/zend_language_scanner.l b/Zend/zend_language_scanner.l
index 5ca29ee3be..365804b354 100644
--- a/Zend/zend_language_scanner.l
+++ b/Zend/zend_language_scanner.l
@@ -2287,277 +2287,286 @@ inline_char_handler:
 skip_escape_conversion:
 	if (SCNG(output_filter)) {
 		size_t sz = 0;
 		char *str = NULL;
 		zend_string *new_str;
 		s = Z_STRVAL_P(zendlval);
 		// TODO: avoid reallocation ???
 		SCNG(output_filter)((unsigned char **)&str, &sz, (unsigned char *)s, (size_t)Z_STRLEN_P(zendlval));
 		new_str = zend_string_init(str, sz, 0);
 		if (str != s) {
 			efree(str);
 		}
 		zend_string_release_ex(Z_STR_P(zendlval), 0);
 		ZVAL_STR(zendlval, new_str);
 	}
 	RETURN_TOKEN_WITH_VAL(T_CONSTANT_ENCAPSED_STRING);
 }
 
 
 <ST_IN_SCRIPTING>b?["] {
 	int bprefix = (yytext[0] != '"') ? 1 : 0;
 
 	while (YYCURSOR < YYLIMIT) {
 		switch (*YYCURSOR++) {
 			case '"':
 				yyleng = YYCURSOR - SCNG(yy_text);
 				if (EXPECTED(zend_scan_escape_string(zendlval, yytext+bprefix+1, yyleng-bprefix-2, '"') == SUCCESS)
 				 || !PARSER_MODE()) {
 					RETURN_TOKEN_WITH_VAL(T_CONSTANT_ENCAPSED_STRING);
 				} else {
 					RETURN_TOKEN(T_ERROR);
 				}
 			case '$':
 				if (IS_LABEL_START(*YYCURSOR) || *YYCURSOR == '{') {
 					break;
 				}
 				continue;
 			case '{':
 				if (*YYCURSOR == '$') {
 					break;
 				}
 				continue;
 			case '\\':
 				if (YYCURSOR < YYLIMIT) {
 					YYCURSOR++;
 				}
 				/* fall through */
 			default:
 				continue;
 		}
 
 		YYCURSOR--;
 		break;
 	}
 
 	/* Remember how much was scanned to save rescanning */
 	SET_DOUBLE_QUOTES_SCANNED_LENGTH(YYCURSOR - SCNG(yy_text) - yyleng);
 
 	YYCURSOR = SCNG(yy_text) + yyleng;
 
 	BEGIN(ST_DOUBLE_QUOTES);
 	RETURN_TOKEN('"');
 }
 
 
 <ST_IN_SCRIPTING>b?"<<<"{TABS_AND_SPACES}({LABEL}|([']{LABEL}['])|(["]{LABEL}["])){NEWLINE} {
 	char *s;
 	unsigned char *saved_cursor;
 	int bprefix = (yytext[0] != '<') ? 1 : 0, spacing = 0, indentation = 0;
 	zend_heredoc_label *heredoc_label = emalloc(sizeof(zend_heredoc_label));
 	zend_bool is_heredoc = 1;
 
 	CG(zend_lineno)++;
 	heredoc_label->length = yyleng-bprefix-3-1-(yytext[yyleng-2]=='\r'?1:0);
 	s = yytext+bprefix+3;
 	while ((*s == ' ') || (*s == '\t')) {
 		s++;
 		heredoc_label->length--;
 	}
 
 	if (*s == '\'') {
 		s++;
 		heredoc_label->length -= 2;
 		is_heredoc = 0;
 
 		BEGIN(ST_NOWDOC);
 	} else {
 		if (*s == '"') {
 			s++;
 			heredoc_label->length -= 2;
 		}
 
 		BEGIN(ST_HEREDOC);
 	}
 
 	heredoc_label->label = estrndup(s, heredoc_label->length);
 	heredoc_label->indentation = 0;
 	saved_cursor = YYCURSOR;
 
 	zend_ptr_stack_push(&SCNG(heredoc_label_stack), (void *) heredoc_label);
 
 	while (YYCURSOR < YYLIMIT && (*YYCURSOR == ' ' || *YYCURSOR == '\t')) {
 		if (*YYCURSOR == '\t') {
 			spacing |= HEREDOC_USING_TABS;
 		} else {
 			spacing |= HEREDOC_USING_SPACES;
 		}
 		++YYCURSOR;
 		++indentation;
 	}
 
 	if (YYCURSOR == YYLIMIT) {
 		YYCURSOR = saved_cursor;
 		RETURN_TOKEN(T_START_HEREDOC);
 	}
 
 	/* Check for ending label on the next line */
 	if (heredoc_label->length < YYLIMIT - YYCURSOR && !memcmp(YYCURSOR, s, heredoc_label->length)) {
 		if (!IS_LABEL_SUCCESSOR(YYCURSOR[heredoc_label->length])) {
 			if (spacing == (HEREDOC_USING_SPACES | HEREDOC_USING_TABS)) {
 				zend_throw_exception(zend_ce_parse_error, "Invalid indentation - tabs and spaces cannot be mixed", 0);
+				if (PARSER_MODE()) {
+					RETURN_TOKEN(T_ERROR);
+				}
 			}
 
 			YYCURSOR = saved_cursor;
 			heredoc_label->indentation = indentation;
 
 			BEGIN(ST_END_HEREDOC);
 			RETURN_TOKEN(T_START_HEREDOC);
 		}
 	}
 
 	YYCURSOR = saved_cursor;
 
 	if (is_heredoc && !SCNG(heredoc_scan_ahead)) {
 		zend_lex_state current_state;
 		int heredoc_nesting_level = 1;
 		int first_token = 0;
+		int error = 0;
 
 		zend_save_lexical_state(&current_state);
 
 		SCNG(heredoc_scan_ahead) = 1;
 		SCNG(heredoc_indentation) = 0;
 		SCNG(heredoc_indentation_uses_spaces) = 0;
 		LANG_SCNG(on_event) = NULL;
 
 		zend_ptr_stack_reverse_apply(&current_state.heredoc_label_stack, copy_heredoc_label_stack);
 
 		zend_exception_save();
 		while (heredoc_nesting_level) {
 			zval zv;
 			int retval;
 
 			ZVAL_UNDEF(&zv);
 			retval = lex_scan(&zv, NULL);
 			zval_ptr_dtor_nogc(&zv);
 
 			if (EG(exception)) {
 				zend_clear_exception();
 				break;
 			}
 
 			if (!first_token) {
 				first_token = retval;
 			}
 
 			switch (retval) {
 				case T_START_HEREDOC:
 					++heredoc_nesting_level;
 					break;
 				case T_END_HEREDOC:
 					--heredoc_nesting_level;
 					break;
 				case END:
 					heredoc_nesting_level = 0;
 			}
 		}
 		zend_exception_restore();
 
 		if (
 		    (first_token == T_VARIABLE
 		     || first_token == T_DOLLAR_OPEN_CURLY_BRACES
 		     || first_token == T_CURLY_OPEN
 		    ) && SCNG(heredoc_indentation)) {
 			zend_throw_exception_ex(zend_ce_parse_error, 0, "Invalid body indentation level (expecting an indentation level of at least %d)", SCNG(heredoc_indentation));
+			error = 1;
 		}
 
 		heredoc_label->indentation = SCNG(heredoc_indentation);
 		heredoc_label->indentation_uses_spaces = SCNG(heredoc_indentation_uses_spaces);
 
 		zend_restore_lexical_state(&current_state);
 		SCNG(heredoc_scan_ahead) = 0;
 		CG(increment_lineno) = 0;
+
+		if (PARSER_MODE() && error) {
+			RETURN_TOKEN(T_ERROR);
+		}
 	}
 
 	RETURN_TOKEN(T_START_HEREDOC);
 }
 
 
 <ST_IN_SCRIPTING>[`] {
 	BEGIN(ST_BACKQUOTE);
 	RETURN_TOKEN('`');
 }
 
 
 <ST_END_HEREDOC>{ANY_CHAR} {
 	zend_heredoc_label *heredoc_label = zend_ptr_stack_pop(&SCNG(heredoc_label_stack));
 
 	yyleng = heredoc_label->indentation + heredoc_label->length;
 	YYCURSOR += yyleng - 1;
 
 	heredoc_label_dtor(heredoc_label);
 	efree(heredoc_label);
 
 	BEGIN(ST_IN_SCRIPTING);
 	RETURN_TOKEN(T_END_HEREDOC);
 }
 
 
 <ST_DOUBLE_QUOTES,ST_BACKQUOTE,ST_HEREDOC>"{$" {
 	yy_push_state(ST_IN_SCRIPTING);
 	yyless(1);
 	RETURN_TOKEN(T_CURLY_OPEN);
 }
 
 
 <ST_DOUBLE_QUOTES>["] {
 	BEGIN(ST_IN_SCRIPTING);
 	RETURN_TOKEN('"');
 }
 
 <ST_BACKQUOTE>[`] {
 	BEGIN(ST_IN_SCRIPTING);
 	RETURN_TOKEN('`');
 }
 
 
 <ST_DOUBLE_QUOTES>{ANY_CHAR} {
 	if (GET_DOUBLE_QUOTES_SCANNED_LENGTH()) {
 		YYCURSOR += GET_DOUBLE_QUOTES_SCANNED_LENGTH() - 1;
 		SET_DOUBLE_QUOTES_SCANNED_LENGTH(0);
 
 		goto double_quotes_scan_done;
 	}
 
 	if (YYCURSOR > YYLIMIT) {
 		RETURN_TOKEN(END);
 	}
 	if (yytext[0] == '\\' && YYCURSOR < YYLIMIT) {
 		YYCURSOR++;
 	}
 
 	while (YYCURSOR < YYLIMIT) {
 		switch (*YYCURSOR++) {
 			case '"':
 				break;
 			case '$':
 				if (IS_LABEL_START(*YYCURSOR) || *YYCURSOR == '{') {
 					break;
 				}
 				continue;
 			case '{':
 				if (*YYCURSOR == '$') {
 					break;
 				}
 				continue;
 			case '\\':
 				if (YYCURSOR < YYLIMIT) {
 					YYCURSOR++;
 				}
 				/* fall through */
 			default:
 				continue;
 		}
 
 		YYCURSOR--;
 		break;
 	}
@@ -2565,149 +2574,152 @@ skip_escape_conversion:
 double_quotes_scan_done:
 	yyleng = YYCURSOR - SCNG(yy_text);
 
 	if (EXPECTED(zend_scan_escape_string(zendlval, yytext, yyleng, '"') == SUCCESS)
 	 || !PARSER_MODE()) {
 		RETURN_TOKEN_WITH_VAL(T_ENCAPSED_AND_WHITESPACE);
 	} else {
 		RETURN_TOKEN(T_ERROR);
 	}
 }
 
 
 <ST_BACKQUOTE>{ANY_CHAR} {
 	if (YYCURSOR > YYLIMIT) {
 		RETURN_TOKEN(END);
 	}
 	if (yytext[0] == '\\' && YYCURSOR < YYLIMIT) {
 		YYCURSOR++;
 	}
 
 	while (YYCURSOR < YYLIMIT) {
 		switch (*YYCURSOR++) {
 			case '`':
 				break;
 			case '$':
 				if (IS_LABEL_START(*YYCURSOR) || *YYCURSOR == '{') {
 					break;
 				}
 				continue;
 			case '{':
 				if (*YYCURSOR == '$') {
 					break;
 				}
 				continue;
 			case '\\':
 				if (YYCURSOR < YYLIMIT) {
 					YYCURSOR++;
 				}
 				/* fall through */
 			default:
 				continue;
 		}
 
 		YYCURSOR--;
 		break;
 	}
 
 	yyleng = YYCURSOR - SCNG(yy_text);
 
 	if (EXPECTED(zend_scan_escape_string(zendlval, yytext, yyleng, '`') == SUCCESS)
 	 || !PARSER_MODE()) {
 		RETURN_TOKEN_WITH_VAL(T_ENCAPSED_AND_WHITESPACE);
 	} else {
 		RETURN_TOKEN(T_ERROR);
 	}
 }
 
 
 <ST_HEREDOC>{ANY_CHAR} {
 	zend_heredoc_label *heredoc_label = zend_ptr_stack_top(&SCNG(heredoc_label_stack));
 	int newline = 0, indentation = 0, spacing = 0;
 
 	if (YYCURSOR > YYLIMIT) {
 		RETURN_TOKEN(END);
 	}
 
 	YYCURSOR--;
 
 	while (YYCURSOR < YYLIMIT) {
 		switch (*YYCURSOR++) {
 			case '\r':
 				if (*YYCURSOR == '\n') {
 					YYCURSOR++;
 				}
 				/* fall through */
 			case '\n':
 				indentation = spacing = 0;
 
 				while (YYCURSOR < YYLIMIT && (*YYCURSOR == ' ' || *YYCURSOR == '\t')) {
 					if (*YYCURSOR == '\t') {
 						spacing |= HEREDOC_USING_TABS;
 					} else {
 						spacing |= HEREDOC_USING_SPACES;
 					}
 					++YYCURSOR;
 					++indentation;
 				}
 
 				if (YYCURSOR == YYLIMIT) {
 					yyleng = YYCURSOR - SCNG(yy_text);
 					HANDLE_NEWLINES(yytext, yyleng);
 					ZVAL_NULL(zendlval);
 					RETURN_TOKEN_WITH_VAL(T_ENCAPSED_AND_WHITESPACE);
 				}
 
 				/* Check for ending label on the next line */
 				if (IS_LABEL_START(*YYCURSOR) && heredoc_label->length < YYLIMIT - YYCURSOR && !memcmp(YYCURSOR, heredoc_label->label, heredoc_label->length)) {
 					if (IS_LABEL_SUCCESSOR(YYCURSOR[heredoc_label->length])) {
 						continue;
 					}
 
 					if (spacing == (HEREDOC_USING_SPACES | HEREDOC_USING_TABS)) {
 						zend_throw_exception(zend_ce_parse_error, "Invalid indentation - tabs and spaces cannot be mixed", 0);
+						if (PARSER_MODE()) {
+							RETURN_TOKEN(T_ERROR);
+						}
 					}
 
 					/* newline before label will be subtracted from returned text, but
 					 * yyleng/yytext will include it, for zend_highlight/strip, tokenizer, etc. */
 					if (YYCURSOR[-indentation - 2] == '\r' && YYCURSOR[-indentation - 1] == '\n') {
 						newline = 2; /* Windows newline */
 					} else {
 						newline = 1;
 					}
 
 					CG(increment_lineno) = 1; /* For newline before label */
 
 					if (SCNG(heredoc_scan_ahead)) {
 						SCNG(heredoc_indentation) = indentation;
 						SCNG(heredoc_indentation_uses_spaces) = (spacing == HEREDOC_USING_SPACES);
 					} else {
 						YYCURSOR -= indentation;
 					}
 
 					BEGIN(ST_END_HEREDOC);
 
 					goto heredoc_scan_done;
 				}
 				continue;
 			case '$':
 				if (IS_LABEL_START(*YYCURSOR) || *YYCURSOR == '{') {
 					break;
 				}
 				continue;
 			case '{':
 				if (*YYCURSOR == '$') {
 					break;
 				}
 				continue;
 			case '\\':
 				if (YYCURSOR < YYLIMIT && *YYCURSOR != '\n' && *YYCURSOR != '\r') {
 					YYCURSOR++;
 				}
 				/* fall through */
 			default:
 				continue;
 		}
 
 		YYCURSOR--;
 		break;
 	}
@@ -2715,98 +2727,101 @@ double_quotes_scan_done:
 heredoc_scan_done:
 
 	yyleng = YYCURSOR - SCNG(yy_text);
 	ZVAL_STRINGL(zendlval, yytext, yyleng - newline);
 
 	if (!SCNG(heredoc_scan_ahead) && !EG(exception) && PARSER_MODE()) {
 		zend_bool newline_at_start = *(yytext - 1) == '\n' || *(yytext - 1) == '\r';
 		zend_string *copy = Z_STR_P(zendlval);
 
 		if (!strip_multiline_string_indentation(
 				zendlval, heredoc_label->indentation, heredoc_label->indentation_uses_spaces,
 				newline_at_start, newline != 0)) {
 			RETURN_TOKEN(T_ERROR);
 		}
 
 		if (UNEXPECTED(zend_scan_escape_string(zendlval, ZSTR_VAL(copy), ZSTR_LEN(copy), 0) != SUCCESS)) {
 			zend_string_efree(copy);
 			RETURN_TOKEN(T_ERROR);
 		}
 
 		zend_string_efree(copy);
 	} else {
 		HANDLE_NEWLINES(yytext, yyleng - newline);
 	}
 
 	RETURN_TOKEN_WITH_VAL(T_ENCAPSED_AND_WHITESPACE);
 }
 
 
 <ST_NOWDOC>{ANY_CHAR} {
 	zend_heredoc_label *heredoc_label = zend_ptr_stack_top(&SCNG(heredoc_label_stack));
 	int newline = 0, indentation = 0, spacing = -1;
 
 	if (YYCURSOR > YYLIMIT) {
 		RETURN_TOKEN(END);
 	}
 
 	YYCURSOR--;
 
 	while (YYCURSOR < YYLIMIT) {
 		switch (*YYCURSOR++) {
 			case '\r':
 				if (*YYCURSOR == '\n') {
 					YYCURSOR++;
 				}
 				/* fall through */
 			case '\n':
 				indentation = spacing = 0;
 
 				while (YYCURSOR < YYLIMIT && (*YYCURSOR == ' ' || *YYCURSOR == '\t')) {
 					if (*YYCURSOR == '\t') {
 						spacing |= HEREDOC_USING_TABS;
 					} else {
 						spacing |= HEREDOC_USING_SPACES;
 					}
 					++YYCURSOR;
 					++indentation;
 				}
 
 				if (YYCURSOR == YYLIMIT) {
 					yyleng = YYCURSOR - SCNG(yy_text);
 					HANDLE_NEWLINES(yytext, yyleng);
 					ZVAL_NULL(zendlval);
 					RETURN_TOKEN_WITH_VAL(T_ENCAPSED_AND_WHITESPACE);
 				}
 
 				/* Check for ending label on the next line */
 				if (IS_LABEL_START(*YYCURSOR) && heredoc_label->length < YYLIMIT - YYCURSOR && !memcmp(YYCURSOR, heredoc_label->label, heredoc_label->length)) {
 					if (IS_LABEL_SUCCESSOR(YYCURSOR[heredoc_label->length])) {
 						continue;
 					}
 
 					if (spacing == (HEREDOC_USING_SPACES | HEREDOC_USING_TABS)) {
 						zend_throw_exception(zend_ce_parse_error, "Invalid indentation - tabs and spaces cannot be mixed", 0);
+						if (PARSER_MODE()) {
+							RETURN_TOKEN(T_ERROR);
+						}
 					}
 
 					/* newline before label will be subtracted from returned text, but
 					 * yyleng/yytext will include it, for zend_highlight/strip, tokenizer, etc. */
 					if (YYCURSOR[-indentation - 2] == '\r' && YYCURSOR[-indentation - 1] == '\n') {
 						newline = 2; /* Windows newline */
 					} else {
 						newline = 1;
 					}
 
 					CG(increment_lineno) = 1; /* For newline before label */
 
 					YYCURSOR -= indentation;
 					heredoc_label->indentation = indentation;
 
 					BEGIN(ST_END_HEREDOC);
 
 					goto nowdoc_scan_done;
 				}
 				/* fall through */
 			default:
 				continue;
 		}
 	}
