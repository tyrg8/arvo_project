commit 6a9d13acc26bf02a33b9b8b836bed26d9d43f303
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Sun Jun 18 23:50:18 2023 +0200

    avformat/jpegxl_anim_dec: fix out of array read using buffer padding
    
    Fixes: out of array read
    Fixes: 59828/clusterfuzz-testcase-minimized-ffmpeg_dem_JPEGXL_ANIM_fuzzer-5029813220671488
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavformat/jpegxl_anim_dec.c b/libavformat/jpegxl_anim_dec.c
index 8d6ea5005c..956b56c1d8 100644
--- a/libavformat/jpegxl_anim_dec.c
+++ b/libavformat/jpegxl_anim_dec.c
@@ -112,26 +112,26 @@ static int jpegxl_collect_codestream_header(const uint8_t *input_buffer, int inp
 
 static int jpegxl_anim_probe(const AVProbeData *p)
 {
-    uint8_t buffer[4096];
+    uint8_t buffer[4096 + AV_INPUT_BUFFER_PADDING_SIZE];
     int copied;
 
     /* this is a raw codestream */
     if (AV_RL16(p->buf) == FF_JPEGXL_CODESTREAM_SIGNATURE_LE) {
         if (ff_jpegxl_verify_codestream_header(p->buf, p->buf_size, 1) >= 1)
             return AVPROBE_SCORE_MAX;
 
         return 0;
     }
 
     /* not a JPEG XL file at all */
     if (AV_RL64(p->buf) != FF_JPEGXL_CONTAINER_SIGNATURE_LE)
         return 0;
 
-    if (jpegxl_collect_codestream_header(p->buf, p->buf_size, buffer, sizeof(buffer), &copied) <= 0 || copied <= 0)
+    if (jpegxl_collect_codestream_header(p->buf, p->buf_size, buffer, sizeof(buffer) - AV_INPUT_BUFFER_PADDING_SIZE, &copied) <= 0 || copied <= 0)
         return 0;
 
     if (ff_jpegxl_verify_codestream_header(buffer, copied, 0) >= 1)
         return AVPROBE_SCORE_MAX;
 
     return 0;
 }
@@ -139,77 +139,78 @@ static int jpegxl_anim_probe(const AVProbeData *p)
 static int jpegxl_anim_read_header(AVFormatContext *s)
 {
     JXLAnimDemuxContext *ctx = s->priv_data;
     AVIOContext *pb = s->pb;
     AVStream *st;
     int offset = 0;
-    uint8_t head[256];
+    uint8_t head[256 + AV_INPUT_BUFFER_PADDING_SIZE];
+    const int sizeofhead = sizeof(head) - AV_INPUT_BUFFER_PADDING_SIZE;
     int headsize = 0;
     int ctrl;
     AVRational tb;
     GetBitContext gbi, *gb = &gbi;
 
     uint64_t sig16 = avio_rl16(pb);
     if (sig16 == FF_JPEGXL_CODESTREAM_SIGNATURE_LE) {
         AV_WL16(head, sig16);
-        headsize = avio_read(s->pb, head + 2, sizeof(head) - 2);
+        headsize = avio_read(s->pb, head + 2, sizeofhead - 2);
         if (headsize < 0)
             return headsize;
         headsize += 2;
         ctx->initial = av_buffer_alloc(headsize);
         if (!ctx->initial)
             return AVERROR(ENOMEM);
         memcpy(ctx->initial->data, head, headsize);
     } else {
         uint64_t sig64 = avio_rl64(pb);
         sig64 = (sig64 << 16) | sig16;
         if (sig64 != FF_JPEGXL_CONTAINER_SIGNATURE_LE)
             return AVERROR_INVALIDDATA;
         avio_skip(pb, 2); // first box always 12 bytes
         while (1) {
             int copied;
             uint8_t buf[4096];
             int read = avio_read(pb, buf, sizeof(buf));
             if (read < 0)
                 return read;
             if (!ctx->initial) {
                 ctx->initial = av_buffer_alloc(read + 12);
                 if (!ctx->initial)
                     return AVERROR(ENOMEM);
                 AV_WL64(ctx->initial->data, FF_JPEGXL_CONTAINER_SIGNATURE_LE);
                 AV_WL32(ctx->initial->data + 8, 0x0a870a0d);
             } else {
                 /* this only should be happening zero or one times in practice */
                 if (av_buffer_realloc(&ctx->initial, ctx->initial->size + read) < 0)
                     return AVERROR(ENOMEM);
             }
-            jpegxl_collect_codestream_header(buf, read, head + headsize, sizeof(head) - headsize, &copied);
+            jpegxl_collect_codestream_header(buf, read, head + headsize, sizeofhead - headsize, &copied);
             memcpy(ctx->initial->data + (ctx->initial->size - read), buf, read);
             headsize += copied;
-            if (headsize >= sizeof(head) || read < sizeof(buf))
+            if (headsize >= sizeofhead || read < sizeof(buf))
                 break;
         }
     }
     /* offset in bits of the animation header */
     offset = ff_jpegxl_verify_codestream_header(head, headsize, 0);
     if (offset <= 0)
         return AVERROR_INVALIDDATA;
     if (init_get_bits8(gb, head, headsize) < 0)
         return AVERROR_INVALIDDATA;
     skip_bits_long(gb, offset);
 
     st = avformat_new_stream(s, NULL);
     if (!st)
         return AVERROR(ENOMEM);
 
     st->codecpar->codec_type = AVMEDIA_TYPE_VIDEO;
     st->codecpar->codec_id   = AV_CODEC_ID_JPEGXL;
     ctrl = get_bits(gb, 2);
     tb.den = (const uint32_t[]){100, 1000, 1, 1}[ctrl] + get_bits_long(gb, (const uint32_t[]){0, 0, 10, 30}[ctrl]);
     ctrl = get_bits(gb, 2);
     tb.num = (const uint32_t[]){1, 1001, 1, 1}[ctrl] + get_bits_long(gb, (const uint32_t[]){0, 0, 8, 10}[ctrl]);
     avpriv_set_pts_info(st, 1, tb.num, tb.den);
 
     return 0;
 }
 
 /* the decoder requires the full input file as a single packet */
