commit 517738b19b7ab4b48e44116921003ef7f1b76e7b
Merge: 0d6232dc72 005d5f4df8
Author: Dmitry Stogov <dmitry@zend.com>
Date:   Tue Nov 30 11:42:58 2021 +0300

    Merge branch 'PHP-8.1'
    
    * PHP-8.1:
      JIT: Fix uninitialized result of ASSIGN_DIM[_OP] after clobbering array by user error handler

diff --git a/ext/opcache/jit/zend_jit_helpers.c b/ext/opcache/jit/zend_jit_helpers.c
index 297cf30161..56d341b7ac 100644
--- a/ext/opcache/jit/zend_jit_helpers.c
+++ b/ext/opcache/jit/zend_jit_helpers.c
@@ -568,65 +568,73 @@ static int ZEND_FASTCALL zend_jit_fetch_dim_isset_helper(zend_array *ht, zval *d
 static zval* ZEND_FASTCALL zend_jit_fetch_dim_rw_helper(zend_array *ht, zval *dim)
 {
 	zend_ulong hval;
 	zend_string *offset_key;
 	zval *retval;
+	zend_execute_data *execute_data;
+	const zend_op *opline;
 
 	if (Z_TYPE_P(dim) == IS_REFERENCE) {
 		dim = Z_REFVAL_P(dim);
 	}
 
 	switch (Z_TYPE_P(dim)) {
 		case IS_LONG:
 			hval = Z_LVAL_P(dim);
 			goto num_index;
 		case IS_STRING:
 			offset_key = Z_STR_P(dim);
 			goto str_index;
 		case IS_UNDEF:
-			if (!zend_jit_undefined_op_helper_write(ht, EG(current_execute_data)->opline->op2.var)) {
-				if (EG(exception)) {
-					undef_result_after_exception();
+			execute_data = EG(current_execute_data);
+			opline = EX(opline);
+			if (!zend_jit_undefined_op_helper_write(ht, opline->op2.var)) {
+				if (opline->result_type & (IS_VAR | IS_TMP_VAR)) {
+					if (EG(exception)) {
+						ZVAL_UNDEF(EX_VAR(opline->result.var));
+					} else {
+						ZVAL_NULL(EX_VAR(opline->result.var));
+					}
 				}
 				return NULL;
 			}
 			ZEND_FALLTHROUGH;
 		case IS_NULL:
 			offset_key = ZSTR_EMPTY_ALLOC();
 			goto str_index;
 		case IS_DOUBLE:
 			hval = zend_dval_to_lval_safe(Z_DVAL_P(dim));
 			goto num_index;
 		case IS_RESOURCE:
 			zend_use_resource_as_offset(dim);
 			hval = Z_RES_HANDLE_P(dim);
 			goto num_index;
 		case IS_FALSE:
 			hval = 0;
 			goto num_index;
 		case IS_TRUE:
 			hval = 1;
 			goto num_index;
 		default:
 			zend_jit_illegal_offset();
 			undef_result_after_exception();
 			return NULL;
 	}
 
 str_index:
 	if (ZEND_HANDLE_NUMERIC(offset_key, hval)) {
 		goto num_index;
 	}
 	retval = zend_hash_find(ht, offset_key);
 	if (!retval) {
 		/* Key may be released while throwing the undefined index warning. */
 		retval = zend_undefined_index_write(ht, offset_key);
 	}
 	return retval;
 
 num_index:
 	ZEND_HASH_INDEX_FIND(ht, hval, retval, num_undef);
 	return retval;
 
 num_undef:
 	return zend_undefined_offset_write(ht, hval);
 }
@@ -634,63 +642,71 @@ static zval* ZEND_FASTCALL zend_jit_fetch_dim_rw_helper(zend_array *ht, zval *di
 static zval* ZEND_FASTCALL zend_jit_fetch_dim_w_helper(zend_array *ht, zval *dim)
 {
 	zend_ulong hval;
 	zend_string *offset_key;
 	zval *retval;
+	zend_execute_data *execute_data;
+	const zend_op *opline;
 
 	if (Z_TYPE_P(dim) == IS_REFERENCE) {
 		dim = Z_REFVAL_P(dim);
 	}
 
 	switch (Z_TYPE_P(dim)) {
 		case IS_LONG:
 			hval = Z_LVAL_P(dim);
 			goto num_index;
 		case IS_STRING:
 			offset_key = Z_STR_P(dim);
 			goto str_index;
 		case IS_UNDEF:
-			if (!zend_jit_undefined_op_helper_write(ht, EG(current_execute_data)->opline->op2.var)) {
-				if (EG(exception)) {
-					undef_result_after_exception();
+			execute_data = EG(current_execute_data);
+			opline = EX(opline);
+			if (!zend_jit_undefined_op_helper_write(ht, opline->op2.var)) {
+				if (opline->result_type & (IS_VAR | IS_TMP_VAR)) {
+					if (EG(exception)) {
+						ZVAL_UNDEF(EX_VAR(opline->result.var));
+					} else {
+						ZVAL_NULL(EX_VAR(opline->result.var));
+					}
 				}
 				return NULL;
 			}
 			ZEND_FALLTHROUGH;
 		case IS_NULL:
 			offset_key = ZSTR_EMPTY_ALLOC();
 			goto str_index;
 		case IS_DOUBLE:
 			hval = zend_dval_to_lval_safe(Z_DVAL_P(dim));
 			goto num_index;
 		case IS_RESOURCE:
 			zend_use_resource_as_offset(dim);
 			hval = Z_RES_HANDLE_P(dim);
 			goto num_index;
 		case IS_FALSE:
 			hval = 0;
 			goto num_index;
 		case IS_TRUE:
 			hval = 1;
 			goto num_index;
 		default:
 			zend_jit_illegal_offset();
 			undef_result_after_exception();
 			if ((EG(opline_before_exception)+1)->opcode == ZEND_OP_DATA
 			 && ((EG(opline_before_exception)+1)->op1_type & (IS_VAR|IS_TMP_VAR))) {
 				zend_execute_data *execute_data = EG(current_execute_data);
 
 				zval_ptr_dtor_nogc(EX_VAR((EG(opline_before_exception)+1)->op1.var));
 			}
 			return NULL;
 	}
 
 str_index:
 	if (ZEND_HANDLE_NUMERIC(offset_key, hval)) {
 		goto num_index;
 	}
 	return zend_hash_lookup(ht, offset_key);
 
 num_index:
 	ZEND_HASH_INDEX_LOOKUP(ht, hval, retval);
 	return retval;
 }
diff --git a/ext/opcache/tests/jit/assign_dim_005.phpt b/ext/opcache/tests/jit/assign_dim_005.phpt
new file mode 100644
index 0000000000..2056ba0554
--- /dev/null
+++ b/ext/opcache/tests/jit/assign_dim_005.phpt
@@ -0,0 +1,22 @@
+--TEST--
+JIT ASSIGN_DIM: 005
+--INI--
+opcache.enable=1
+opcache.enable_cli=1
+opcache.file_update_protection=0
+opcache.jit_buffer_size=1M
+--FILE--
+<?php
+set_error_handler(function ($code, $msg) {
+	echo "Error: $msg\n";
+    $GLOBALS['a'] = null;
+});
+
+$a[$c] =                                                                                                                                    
+$a[$c] = 'x' ;
+var_dump($a);
+?>
+--EXPECT--
+Error: Undefined variable $c
+Error: Undefined variable $c
+NULL
