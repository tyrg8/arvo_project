commit 752bd8a192af209f44dacaf1d3510d0bfc6354b8
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Sat Nov 10 21:13:13 2018 -0500

    [kerx] Fix Format1 tupleKern sanitization
    
    Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=11312
    Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=11305

diff --git a/src/hb-aat-layout-kerx-table.hh b/src/hb-aat-layout-kerx-table.hh
index 3cd80acfd..6b61186a9 100644
--- a/src/hb-aat-layout-kerx-table.hh
+++ b/src/hb-aat-layout-kerx-table.hh
@@ -214,178 +214,178 @@ template <typename KernSubTableHeader>
 struct KerxSubTableFormat1
 {
   typedef typename KernSubTableHeader::Types Types;
   typedef typename Types::HBUINT HBUINT;
 
   typedef Format1Entry<Types::extended> Format1EntryT;
   typedef typename Format1EntryT::EntryData EntryData;
 
   struct driver_context_t
   {
     static const bool in_place = true;
     enum
     {
       DontAdvance	= Format1EntryT::DontAdvance,
     };
 
     inline driver_context_t (const KerxSubTableFormat1 *table_,
 			     hb_aat_apply_context_t *c_) :
 	c (c_),
 	table (table_),
 	/* Apparently the offset kernAction is from the beginning of the state-machine,
 	 * similar to offsets in morx table, NOT from beginning of this table, like
 	 * other subtables in kerx.  Discovered via testing. */
 	kernAction (&table->machine + table->kernAction),
 	depth (0),
 	crossStream (table->header.coverage & table->header.CrossStream) {}
 
     inline bool is_actionable (StateTableDriver<Types, EntryData> *driver HB_UNUSED,
 			       const Entry<EntryData> *entry)
     {
       return Format1EntryT::performAction (entry);
     }
     inline bool transition (StateTableDriver<Types, EntryData> *driver,
 			    const Entry<EntryData> *entry)
     {
       hb_buffer_t *buffer = driver->buffer;
       unsigned int flags = entry->flags;
 
       if (flags & Format1EntryT::Reset)
 	depth = 0;
 
       if (flags & Format1EntryT::Push)
       {
 	if (likely (depth < ARRAY_LENGTH (stack)))
 	  stack[depth++] = buffer->idx;
 	else
 	  depth = 0; /* Probably not what CoreText does, but better? */
       }
 
       if (Format1EntryT::performAction (entry))
       {
+	unsigned int tuple_count = MAX (1u, table->header.tuple_count ());
+
 	unsigned int kern_idx = Format1EntryT::kernActionIndex (entry);
 	kern_idx = Types::offsetToIndex (kern_idx, &table->machine, kernAction.arrayZ);
 	const FWORD *actions = &kernAction[kern_idx];
-	if (!c->sanitizer.check_array (actions, depth))
+	if (!c->sanitizer.check_array (actions, depth * tuple_count))
 	{
 	  depth = 0;
 	  return false;
 	}
 
 	hb_mask_t kern_mask = c->plan->kern_mask;
 
 	/* From Apple 'kern' spec:
 	 * "Each pops one glyph from the kerning stack and applies the kerning value to it.
 	 * The end of the list is marked by an odd value... */
-	unsigned int tuple_count = table->header.tuple_count ();
-	tuple_count = tuple_count ? tuple_count : 1;
 	bool last = false;
 	while (!last && depth--)
 	{
 	  unsigned int idx = stack[depth];
 	  int v = *actions;
 	  actions += tuple_count;
 	  if (idx >= buffer->len) continue;
 
 	  /* "The end of the list is marked by an odd value..." */
 	  last = v & 1;
 	  v &= ~1;
 
 	  hb_glyph_position_t &o = buffer->pos[idx];
 
 	  /* Testing shows that CoreText only applies kern (cross-stream or not)
 	   * if none has been applied by previous subtables.  That is, it does
 	   * NOT seem to accumulate as otherwise implied by specs. */
 
 	  /* The following flag is undocumented in the spec, but described
 	   * in the 'kern' table example. */
 	  if (v == -0x8000)
 	  {
 	    o.attach_type() = ATTACH_TYPE_NONE;
 	    o.attach_chain() = 0;
 	    o.x_offset = o.y_offset = 0;
 	  }
 	  else if (HB_DIRECTION_IS_HORIZONTAL (buffer->props.direction))
 	  {
 	    if (crossStream)
 	    {
 	      if (buffer->pos[idx].attach_type() && !buffer->pos[idx].y_offset)
 	      {
 		o.y_offset = c->font->em_scale_y (v);
 		buffer->scratch_flags |= HB_BUFFER_SCRATCH_FLAG_HAS_GPOS_ATTACHMENT;
 	      }
 	    }
 	    else if (buffer->info[idx].mask & kern_mask)
 	    {
 	      if (!buffer->pos[idx].x_offset)
 	      {
 		buffer->pos[idx].x_advance += c->font->em_scale_x (v);
 		buffer->pos[idx].x_offset += c->font->em_scale_x (v);
 	      }
 	    }
 	  }
 	  else
 	  {
 	    if (crossStream)
 	    {
 	      /* CoreText doesn't do crossStream kerning in vertical.  We do. */
 	      if (buffer->pos[idx].attach_type() && !buffer->pos[idx].x_offset)
 	      {
 		o.x_offset = c->font->em_scale_x (v);
 		buffer->scratch_flags |= HB_BUFFER_SCRATCH_FLAG_HAS_GPOS_ATTACHMENT;
 	      }
 	    }
 	    else if (buffer->info[idx].mask & kern_mask)
 	    {
 	      if (!buffer->pos[idx].y_offset)
 	      {
 		buffer->pos[idx].y_advance += c->font->em_scale_y (v);
 		buffer->pos[idx].y_offset += c->font->em_scale_y (v);
 	      }
 	    }
 	  }
 	}
       }
 
       return true;
     }
 
     private:
     hb_aat_apply_context_t *c;
     const KerxSubTableFormat1 *table;
     const UnsizedArrayOf<FWORD> &kernAction;
     unsigned int stack[8];
     unsigned int depth;
     bool crossStream;
   };
 
   inline bool apply (hb_aat_apply_context_t *c) const
   {
     TRACE_APPLY (this);
 
     if (!c->plan->requested_kerning &&
 	!(header.coverage & header.CrossStream))
       return false;
 
     driver_context_t dc (this, c);
 
     StateTableDriver<Types, EntryData> driver (machine, c->buffer, c->font->face);
     driver.drive (&dc);
 
     return_trace (true);
   }
 
   inline bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     /* The rest of array sanitizations are done at run-time. */
     return_trace (likely (c->check_struct (this) &&
 			  machine.sanitize (c)));
   }
 
   protected:
   KernSubTableHeader				header;
   StateTable<Types, EntryData>			machine;
   OffsetTo<UnsizedArrayOf<FWORD>, HBUINT, false>kernAction;
   public:
   DEFINE_SIZE_STATIC (KernSubTableHeader::static_size + 5 * sizeof (HBUINT));
 };
diff --git a/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-shape-fuzzer-5629524117553152 b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-shape-fuzzer-5629524117553152
new file mode 100644
index 000000000..01ca51737
Binary files /dev/null and b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-shape-fuzzer-5629524117553152 differ
