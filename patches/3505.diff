commit d505b6d818773a70c26ba6d31e6ae88beb0ecb0c
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Thu Sep 28 15:56:37 2017 +0300

    AbstractLJpegDecompressor::parseSOF(): cpp should be <= row length

diff --git a/src/librawspeed/decompressors/AbstractLJpegDecompressor.cpp b/src/librawspeed/decompressors/AbstractLJpegDecompressor.cpp
index 81eaf147..feb1a2cc 100644
--- a/src/librawspeed/decompressors/AbstractLJpegDecompressor.cpp
+++ b/src/librawspeed/decompressors/AbstractLJpegDecompressor.cpp
@@ -95,46 +95,51 @@ void AbstractLJpegDecompressor::decode() {
 void AbstractLJpegDecompressor::parseSOF(ByteStream sofInput, SOFInfo* sof) {
   sof->prec = sofInput.getByte();
   sof->h = sofInput.getU16();
   sof->w = sofInput.getU16();
   sof->cps = sofInput.getByte();
 
   if (sof->prec < 2 || sof->prec > 16)
     ThrowRDE("Invalid precision (%u).", sof->prec);
 
   if (sof->h == 0 || sof->w == 0)
     ThrowRDE("Frame width or height set to zero");
 
   if (sof->cps > 4 || sof->cps < 1)
     ThrowRDE("Only from 1 to 4 components are supported.");
 
   if (sof->cps < mRaw->getCpp()) {
     ThrowRDE("Component count should be no less than sample count (%u vs %u).",
              sof->cps, mRaw->getCpp());
   }
 
+  if (sof->cps > static_cast<uint32>(mRaw->dim.x)) {
+    ThrowRDE("Component count should be no greater than row length (%u vs %u).",
+             sof->cps, mRaw->dim.x);
+  }
+
   if (sofInput.getRemainSize() != 3 * sof->cps)
     ThrowRDE("Header size mismatch.");
 
   for (uint32 i = 0; i < sof->cps; i++) {
     sof->compInfo[i].componentId = sofInput.getByte();
 
     uint32 subs = sofInput.getByte();
     frame.compInfo[i].superV = subs & 0xf;
     frame.compInfo[i].superH = subs >> 4;
 
     if (frame.compInfo[i].superV < 1 || frame.compInfo[i].superV > 4)
       ThrowRDE("Horizontal sampling factor is invalid.");
 
     if (frame.compInfo[i].superH < 1 || frame.compInfo[i].superH > 4)
       ThrowRDE("Horizontal sampling factor is invalid.");
 
     uint32 Tq = sofInput.getByte();
     if (Tq != 0)
       ThrowRDE("Quantized components not supported.");
   }
 
   sof->initialized = true;
 
   mRaw->metadata.subsampling.x = sof->compInfo[0].superH;
   mRaw->metadata.subsampling.y = sof->compInfo[0].superV;
 }
diff --git a/src/librawspeed/decompressors/LJpegDecompressor.cpp b/src/librawspeed/decompressors/LJpegDecompressor.cpp
index 46d71cda..99248908 100644
--- a/src/librawspeed/decompressors/LJpegDecompressor.cpp
+++ b/src/librawspeed/decompressors/LJpegDecompressor.cpp
@@ -73,49 +73,51 @@ void LJpegDecompressor::decodeScan()
 template <int N_COMP>
 void LJpegDecompressor::decodeN()
 {
+  assert(mRaw->getCpp() > 0);
+  assert(N_COMP > 0);
+  assert(N_COMP >= mRaw->getCpp());
+  assert((N_COMP / mRaw->getCpp()) > 0);
+
+  assert(mRaw->dim.x >= N_COMP);
+
   auto ht = getHuffmanTables<N_COMP>();
   auto pred = getInitialPredictors<N_COMP>();
   auto predNext = pred.data();
 
   BitPumpJPEG bitStream(input);
 
   for (unsigned y = 0; y < frame.h; ++y) {
     auto destY = offY + y;
     // A recoded DNG might be split up into tiles of self contained LJpeg
     // blobs. The tiles at the bottom and the right may extend beyond the
     // dimension of the raw image buffer. The excessive content has to be
     // ignored. For y, we can simply stop decoding when we reached the border.
     if (destY >= static_cast<unsigned>(mRaw->dim.y))
       break;
 
     auto dest =
         reinterpret_cast<ushort16*>(mRaw->getDataUncropped(offX, destY));
 
     copy_n(predNext, N_COMP, pred.data());
     // the predictor for the next line is the start of this line
     predNext = dest;
 
-    assert(mRaw->getCpp() > 0);
-    assert(N_COMP > 0);
-    assert(N_COMP >= mRaw->getCpp());
-    assert((N_COMP / mRaw->getCpp()) > 0);
-
     unsigned width = min(frame.w,
                          (mRaw->dim.x - offX) / (N_COMP / mRaw->getCpp()));
 
     // For x, we first process all pixels within the image buffer ...
     for (unsigned x = 0; x < width; ++x) {
       unroll_loop<N_COMP>([&](int i) {
         *dest++ = pred[i] += ht[i]->decodeNext(bitStream);
       });
     }
     // ... and discard the rest.
     for (unsigned x = width; x < frame.w; ++x) {
       unroll_loop<N_COMP>([&](int i) {
         ht[i]->decodeNext(bitStream);
       });
     }
   }
 }
 
 } // namespace rawspeed
