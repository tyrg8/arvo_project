commit a47b7cd3aca70e9a0bddf8146eb4ab0cbd19c2c3
Author: tbeu <tbeu@users.noreply.github.com>
Date:   Fri Nov 15 23:20:41 2019 +0100

    Fix memory leak
    
    As reported by https://github.com/tbeu/matio/issues/131

diff --git a/src/mat.c b/src/mat.c
index c9c6bd1..e62a9d2 100644
--- a/src/mat.c
+++ b/src/mat.c
@@ -210,30 +210,35 @@ ClassType2DataType(enum matio_classes class_type)
 /** @brief Gets number of elements from a variable
  *
  * Gets number of elements from a variable by overflow-safe
  * multiplication
  * @ingroup MAT
  * @param matvar MAT variable information
  * @param nelems Number of elements
  * @retval 0 on success
  */
 int SafeMulDims(const matvar_t *matvar, size_t* nelems)
 {
     int i;
 
+    if ( matvar->rank == 0 ) {
+        *nelems = 0;
+        return 0;
+    }
+
     for ( i = 0; i < matvar->rank; i++ ) {
         if ( !psnip_safe_size_mul(nelems, *nelems, matvar->dims[i]) ) {
             *nelems = 0;
             return 1;
         }
     }
 
     return 0;
 }
 
 /** @brief Multiplies two unsigned integers
  *
  * @param res Result
  * @param a First operand
  * @param b Second operand
  * @retval 0 on success
  */
@@ -1501,174 +1506,174 @@ void
 Mat_VarFree(matvar_t *matvar)
 {
     size_t nelems = 0;
 
     if ( NULL == matvar )
         return;
     if ( NULL != matvar->dims ) {
         nelems = 1;
         SafeMulDims(matvar, &nelems);
         free(matvar->dims);
     }
     if ( NULL != matvar->data ) {
         switch (matvar->class_type ) {
             case MAT_C_STRUCT:
                 if ( !matvar->mem_conserve ) {
                     matvar_t **fields = (matvar_t**)matvar->data;
                     size_t nelems_x_nfields, i;
                     SafeMul(&nelems_x_nfields, nelems, matvar->internal->num_fields);
                     for ( i = 0; i < nelems_x_nfields; i++ )
                         Mat_VarFree(fields[i]);
 
                     free(matvar->data);
                 }
                 break;
             case MAT_C_CELL:
                 if ( !matvar->mem_conserve ) {
                     matvar_t **cells = (matvar_t**)matvar->data;
                     size_t i;
                     for ( i = 0; i < nelems; i++ )
                         Mat_VarFree(cells[i]);
 
                     free(matvar->data);
                 }
                 break;
             case MAT_C_SPARSE:
                 if ( !matvar->mem_conserve ) {
                     mat_sparse_t *sparse;
                     sparse = (mat_sparse_t*)matvar->data;
                     if ( sparse->ir != NULL )
                         free(sparse->ir);
                     if ( sparse->jc != NULL )
                         free(sparse->jc);
                     if ( matvar->isComplex && NULL != sparse->data ) {
                         ComplexFree((mat_complex_split_t*)sparse->data);
                     } else if ( sparse->data != NULL ) {
                         free(sparse->data);
                     }
                     free(sparse);
                 }
                 break;
             case MAT_C_DOUBLE:
             case MAT_C_SINGLE:
             case MAT_C_INT64:
             case MAT_C_UINT64:
             case MAT_C_INT32:
             case MAT_C_UINT32:
             case MAT_C_INT16:
             case MAT_C_UINT16:
             case MAT_C_INT8:
             case MAT_C_UINT8:
             case MAT_C_CHAR:
                 if ( !matvar->mem_conserve ) {
                     if ( matvar->isComplex ) {
                         ComplexFree((mat_complex_split_t*)matvar->data);
                     } else {
                         free(matvar->data);
                     }
                 }
                 break;
             case MAT_C_FUNCTION:
                 if ( !matvar->mem_conserve ) {
                     free(matvar->data);
                 }
                 break;
             case MAT_C_EMPTY:
             case MAT_C_OBJECT:
             case MAT_C_OPAQUE:
                 break;
         }
     }
 
     if ( NULL != matvar->internal ) {
 #if HAVE_ZLIB
         if ( matvar->compression == MAT_COMPRESSION_ZLIB ) {
             inflateEnd(matvar->internal->z);
             free(matvar->internal->z);
             if ( matvar->class_type == MAT_C_SPARSE && NULL != matvar->internal->data ) {
                 mat_sparse_t *sparse;
                 sparse = (mat_sparse_t*)matvar->internal->data;
                 if ( sparse->ir != NULL )
                     free(sparse->ir);
                 if ( sparse->jc != NULL )
                     free(sparse->jc);
                 if ( matvar->isComplex && NULL != sparse->data ) {
                     ComplexFree((mat_complex_split_t*)sparse->data);
                 } else if ( sparse->data != NULL ) {
                     free(sparse->data);
                 }
                 free(sparse);
             }
             else if ( matvar->isComplex && NULL != matvar->internal->data ) {
                 ComplexFree((mat_complex_split_t*)matvar->internal->data);
             } else if ( NULL != matvar->internal->data ) {
                 free(matvar->internal->data);
             }
         }
 #endif
 #if defined(MAT73) && MAT73
         if ( -1 < matvar->internal->id ) {
             switch ( H5Iget_type(matvar->internal->id) ) {
                 case H5I_GROUP:
                     H5Gclose(matvar->internal->id);
                     matvar->internal->id = -1;
                     break;
                 case H5I_DATASET:
                     H5Dclose(matvar->internal->id);
                     matvar->internal->id = -1;
                     break;
                 default:
                     break;
             }
         }
         if ( 0 < matvar->internal->hdf5_ref ) {
             switch ( H5Iget_type(matvar->internal->id) ) {
                 case H5I_GROUP:
                     H5Gclose(matvar->internal->id);
                     matvar->internal->hdf5_ref = -1;
                     break;
                 case H5I_DATASET:
                     H5Dclose(matvar->internal->id);
                     matvar->internal->hdf5_ref = -1;
                     break;
                 default:
                     break;
             }
         }
         if ( NULL != matvar->internal->hdf5_name ) {
             free(matvar->internal->hdf5_name);
             matvar->internal->hdf5_name = NULL;
         }
 #endif
         if ( NULL != matvar->internal->fieldnames &&
-             matvar->internal->num_fields > 0 ) {
+            matvar->internal->num_fields > 0 ) {
             size_t i;
             for ( i = 0; i < matvar->internal->num_fields; i++ ) {
                 if ( NULL != matvar->internal->fieldnames[i] )
                     free(matvar->internal->fieldnames[i]);
             }
             free(matvar->internal->fieldnames);
         }
         free(matvar->internal);
         matvar->internal = NULL;
     }
     if ( NULL != matvar->name )
         free(matvar->name);
     free(matvar);
 }
 
 /** @brief Calculate a single subscript from a set of subscript values
  *
  * Calculates a single linear subscript (0-relative) given a 1-relative
  * subscript for each dimension.  The calculation uses the formula below where
  * index is the linear index, s is an array of length RANK where each element
  * is the subscript for the corresponding dimension, D is an array whose
  * elements are the dimensions of the variable.
  * \f[
  *   index = \sum\limits_{k=0}^{RANK-1} [(s_k - 1) \prod\limits_{l=0}^{k} D_l ]
  * \f]
  * @ingroup MAT
  * @param rank Rank of the variable
  * @param dims Dimensions of the variable
  * @param subs Array of dimension subscripts
  * @return Single (linear) subscript
  */
