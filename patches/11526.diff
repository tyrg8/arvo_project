commit 8dcc1913a1670ede7b124f7b5b775d7ab8791386
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Sat Nov 24 09:47:45 2018 -0500

    [kerx/morx] Make sure object length is sanitized before accessing it

diff --git a/src/hb-aat-layout-kerx-table.hh b/src/hb-aat-layout-kerx-table.hh
index 521c4c728..2d5489324 100644
--- a/src/hb-aat-layout-kerx-table.hh
+++ b/src/hb-aat-layout-kerx-table.hh
@@ -831,155 +831,160 @@ template <typename T>
 struct KerxTable
 {
   /* https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern */
   inline const T* thiz (void) const { return static_cast<const T *> (this); }
 
   inline bool has_state_machine (void) const
   {
     typedef typename T::SubTable SubTable;
 
     const SubTable *st = &thiz()->firstSubTable;
     unsigned int count = thiz()->tableCount;
     for (unsigned int i = 0; i < count; i++)
     {
       if (st->get_type () == 1)
         return true;
       st = &StructAfter<SubTable> (*st);
     }
     return false;
   }
 
   inline bool has_cross_stream (void) const
   {
     typedef typename T::SubTable SubTable;
 
     const SubTable *st = &thiz()->firstSubTable;
     unsigned int count = thiz()->tableCount;
     for (unsigned int i = 0; i < count; i++)
     {
       if (st->u.header.coverage & st->u.header.CrossStream)
         return true;
       st = &StructAfter<SubTable> (*st);
     }
     return false;
   }
 
   inline int get_h_kerning (hb_codepoint_t left, hb_codepoint_t right) const
   {
     typedef typename T::SubTable SubTable;
 
     int v = 0;
     const SubTable *st = &thiz()->firstSubTable;
     unsigned int count = thiz()->tableCount;
     for (unsigned int i = 0; i < count; i++)
     {
       if ((st->u.header.coverage & (st->u.header.Variation | st->u.header.CrossStream)) ||
 	  !st->u.header.is_horizontal ())
         continue;
       v += st->get_kerning (left, right);
       st = &StructAfter<SubTable> (*st);
     }
     return v;
   }
 
   inline bool apply (AAT::hb_aat_apply_context_t *c) const
   {
     typedef typename T::SubTable SubTable;
 
     bool ret = false;
     bool seenCrossStream = false;
     c->set_lookup_index (0);
     const SubTable *st = &thiz()->firstSubTable;
     unsigned int count = thiz()->tableCount;
     for (unsigned int i = 0; i < count; i++)
     {
       bool reverse;
 
       if (!T::Types::extended && (st->u.header.coverage & st->u.header.Variation))
         goto skip;
 
       if (HB_DIRECTION_IS_HORIZONTAL (c->buffer->props.direction) != st->u.header.is_horizontal ())
 	goto skip;
 
       reverse = bool (st->u.header.coverage & st->u.header.Backwards) !=
 		HB_DIRECTION_IS_BACKWARD (c->buffer->props.direction);
 
       if (!c->buffer->message (c->font, "start %c%c%c%c subtable %d", HB_UNTAG (thiz()->tableTag), c->lookup_index))
 	goto skip;
 
       if (!seenCrossStream &&
 	  (st->u.header.coverage & st->u.header.CrossStream))
       {
         /* Attach all glyphs into a chain. */
         seenCrossStream = true;
 	hb_glyph_position_t *pos = c->buffer->pos;
 	unsigned int count = c->buffer->len;
 	for (unsigned int i = 0; i < count; i++)
 	{
 	  pos[i].attach_type() = ATTACH_TYPE_CURSIVE;
 	  pos[i].attach_chain() = HB_DIRECTION_IS_FORWARD (c->buffer->props.direction) ? -1 : +1;
 	  /* We intentionally don't set HB_BUFFER_SCRATCH_FLAG_HAS_GPOS_ATTACHMENT,
 	   * since there needs to be a non-zero attachment for post-positioning to
 	   * be needed. */
 	}
       }
 
       if (reverse)
 	c->buffer->reverse ();
 
       /* See comment in sanitize() for conditional here. */
       if (i < count - 1)
 	c->sanitizer.set_object (*st);
       else
 	c->sanitizer.reset_object ();
 
       ret |= st->dispatch (c);
 
       if (reverse)
 	c->buffer->reverse ();
 
       (void) c->buffer->message (c->font, "end %c%c%c%c subtable %d", HB_UNTAG (thiz()->tableTag), c->lookup_index);
 
     skip:
       st = &StructAfter<SubTable> (*st);
       c->set_lookup_index (c->lookup_index + 1);
     }
     c->sanitizer.reset_object ();
 
     return ret;
   }
 
   inline bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     if (unlikely (!thiz()->version.sanitize (c) ||
 		  thiz()->version < T::minVersion ||
 		  !thiz()->tableCount.sanitize (c)))
       return_trace (false);
 
     typedef typename T::SubTable SubTable;
 
     const SubTable *st = &thiz()->firstSubTable;
     unsigned int count = thiz()->tableCount;
     for (unsigned int i = 0; i < count; i++)
     {
+      if (unlikely (!st->u.header.sanitize (c)))
+      {
+	c->reset_object ();
+	return_trace (false);
+      }
       /* OpenType kern table has 2-byte subtable lengths.  That's limiting.
        * MS implementation also only supports one subtable, of format 0,
        * anyway.  Certain versions of some fonts, like Calibry, contain
        * kern subtable that exceeds 64kb.  Looks like, the subtable length
        * is simply ignored.  Which makes sense.  It's only needed if you
        * have multiple subtables.  To handle such fonts, we just ignore
        * the length for the last subtable. */
       if (i < count - 1)
 	c->set_object (*st);
       else
 	c->reset_object ();
 
       if (unlikely (!st->sanitize (c)))
 	return_trace (false);
       st = &StructAfter<SubTable> (*st);
     }
     c->reset_object ();
 
     return_trace (true);
   }
 };
diff --git a/src/hb-aat-layout-morx-table.hh b/src/hb-aat-layout-morx-table.hh
index 7a39eea8d..5b44a4cfa 100644
--- a/src/hb-aat-layout-morx-table.hh
+++ b/src/hb-aat-layout-morx-table.hh
@@ -941,151 +941,156 @@ template <typename Types>
 struct Chain
 {
   typedef typename Types::HBUINT HBUINT;
 
   inline hb_mask_t compile_flags (const hb_aat_map_builder_t *map) const
   {
     hb_mask_t flags = defaultFlags;
     {
       unsigned int count = featureCount;
       for (unsigned i = 0; i < count; i++)
       {
         const Feature &feature = featureZ[i];
         uint16_t type = feature.featureType;
 	uint16_t setting = feature.featureSetting;
       retry:
 	const hb_aat_map_builder_t::feature_info_t *info = map->features.bsearch (type);
 	if (info && info->setting == setting)
 	{
 	  flags &= feature.disableFlags;
 	  flags |= feature.enableFlags;
 	}
 	else if (type == 3/*kLetterCaseType*/ && setting == 3/*kSmallCapsSelector*/)
 	{
 	  /* Deprecated. https://github.com/harfbuzz/harfbuzz/issues/1342 */
 	  type = 37/*kLowerCaseType*/;
 	  setting = 1/*kLowerCaseSmallCapsSelector*/;
 	  goto retry;
 	}
       }
     }
     return flags;
   }
 
   inline void apply (hb_aat_apply_context_t *c,
 		     hb_mask_t flags) const
   {
     const ChainSubtable<Types> *subtable = &StructAfter<ChainSubtable<Types> > (featureZ.as_array (featureCount));
     unsigned int count = subtableCount;
     for (unsigned int i = 0; i < count; i++)
     {
       bool reverse;
 
       if (!(subtable->subFeatureFlags & flags))
         goto skip;
 
       if (!(subtable->get_coverage() & ChainSubtable<Types>::AllDirections) &&
 	  HB_DIRECTION_IS_VERTICAL (c->buffer->props.direction) !=
 	  bool (subtable->get_coverage() & ChainSubtable<Types>::Vertical))
         goto skip;
 
       /* Buffer contents is always in logical direction.  Determine if
        * we need to reverse before applying this subtable.  We reverse
        * back after if we did reverse indeed.
        *
        * Quoting the spac:
        * """
        * Bits 28 and 30 of the coverage field control the order in which
        * glyphs are processed when the subtable is run by the layout engine.
        * Bit 28 is used to indicate if the glyph processing direction is
        * the same as logical order or layout order. Bit 30 is used to
        * indicate whether glyphs are processed forwards or backwards within
        * that order.
 
 		Bit 30	Bit 28	Interpretation for Horizontal Text
 		0	0	The subtable is processed in layout order
 				(the same order as the glyphs, which is
 				always left-to-right).
 		1	0	The subtable is processed in reverse layout order
 				(the order opposite that of the glyphs, which is
 				always right-to-left).
 		0	1	The subtable is processed in logical order
 				(the same order as the characters, which may be
 				left-to-right or right-to-left).
 		1	1	The subtable is processed in reverse logical order
 				(the order opposite that of the characters, which
 				may be right-to-left or left-to-right).
        */
       reverse = subtable->get_coverage () & ChainSubtable<Types>::Logical ?
 		bool (subtable->get_coverage () & ChainSubtable<Types>::Backwards) :
 		bool (subtable->get_coverage () & ChainSubtable<Types>::Backwards) !=
 		HB_DIRECTION_IS_BACKWARD (c->buffer->props.direction);
 
       if (!c->buffer->message (c->font, "start chain subtable %d", c->lookup_index))
         goto skip;
 
       if (reverse)
         c->buffer->reverse ();
 
       c->sanitizer.set_object (*subtable);
 
       subtable->dispatch (c);
 
       if (reverse)
         c->buffer->reverse ();
 
       (void) c->buffer->message (c->font, "end chain subtable %d", c->lookup_index);
 
       if (unlikely (!c->buffer->successful)) return;
 
     skip:
       subtable = &StructAfter<ChainSubtable<Types> > (*subtable);
       c->set_lookup_index (c->lookup_index + 1);
     }
     c->sanitizer.reset_object ();
   }
 
   inline unsigned int get_size (void) const { return length; }
 
   inline bool sanitize (hb_sanitize_context_t *c, unsigned int version HB_UNUSED) const
   {
     TRACE_SANITIZE (this);
     if (!length.sanitize (c) ||
 	length < min_size ||
 	!c->check_range (this, length))
       return_trace (false);
 
     if (!c->check_array (featureZ.arrayZ, featureCount))
       return_trace (false);
 
     const ChainSubtable<Types> *subtable = &StructAfter<ChainSubtable<Types> > (featureZ.as_array (featureCount));
     unsigned int count = subtableCount;
     for (unsigned int i = 0; i < count; i++)
     {
+      if (unlikely (!c->check_struct (subtable)))
+      {
+	c->reset_object ();
+	return_trace (false);
+      }
       c->set_object (*subtable);
       if (!subtable->sanitize (c))
 	return_trace (false);
       subtable = &StructAfter<ChainSubtable<Types> > (*subtable);
     }
     c->reset_object ();
 
     return_trace (true);
   }
 
   protected:
   HBUINT32	defaultFlags;	/* The default specification for subtables. */
   HBUINT32	length;		/* Total byte count, including this header. */
   HBUINT	featureCount;	/* Number of feature subtable entries. */
   HBUINT	subtableCount;	/* The number of subtables in the chain. */
 
   UnsizedArrayOf<Feature>	featureZ;	/* Features. */
 /*ChainSubtable	firstSubtable;*//* Subtables. */
 /*subtableGlyphCoverageArray*/	/* Only if version >= 3. We don't use. */
 
   public:
   DEFINE_SIZE_MIN (8 + 2 * sizeof (HBUINT));
 };
 
 
 /*
  * The 'mort'/'morx' Table
  */
