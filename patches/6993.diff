commit 80d68c64a24b3e9b6d2b8be4a01a6eccf249092a
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Sat Mar 17 13:36:45 2018 +0000

    shpopen.c: fix potential read heap buffer overflow in single-point polygon in SHPRewindObject(). Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6993. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@41848 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/autotest/ogr/ogr_shape.py b/autotest/ogr/ogr_shape.py
index 5413282aa8..f9d5fe9b3d 100755
--- a/autotest/ogr/ogr_shape.py
+++ b/autotest/ogr/ogr_shape.py
@@ -5262,17 +5262,40 @@ def ogr_shape_107():
 def ogr_shape_108():
 
     ds = ogr.Open('data/poly.shp')
     lyr = ds.GetLayer(0)
     lyr.SetSpatialFilterRect(479750.6875,4764702.0,479750.6875,4764702.0)
     expected_fc = lyr.GetFeatureCount()
     lyr.SetAttributeFilter("1=1")
     if lyr.GetFeatureCount() != expected_fc:
         gdaltest.post_reason('fail')
         print(lyr.GetFeatureCount(), expected_fc)
         return'fail'
 
     return 'success'
 
+
+###############################################################################
+# Test writing invalid polygon
+
+def ogr_shape_109():
+
+    layer_name = 'ogr_shape_109'
+    filename = '/vsimem/' + layer_name + '.shp'
+
+    shape_drv = ogr.GetDriverByName('ESRI Shapefile')
+    ds = shape_drv.CreateDataSource(filename)
+    lyr = ds.CreateLayer(layer_name)
+
+    # Create a shape
+    f = ogr.Feature(lyr.GetLayerDefn())
+    f.SetGeometry(ogr.CreateGeometryFromWkt('POLYGON ((1 2))'))
+    lyr.CreateFeature(f)
+
+    ds = None
+    shape_drv.DeleteDataSource( filename )
+
+    return 'success'
+
 ###############################################################################
 def ogr_shape_cleanup():
 
@@ -5317,114 +5340,115 @@ def ogr_shape_cleanup():
 gdaltest_list = [
     ogr_shape_1,
     ogr_shape_2,
     ogr_shape_3,
     ogr_shape_4,
     ogr_shape_5,
     ogr_shape_6,
     ogr_shape_7,
     ogr_shape_8,
     ogr_shape_9,
     ogr_shape_10,
     ogr_shape_11,
     ogr_shape_12,
     ogr_shape_13,
     ogr_shape_14,
     ogr_shape_15,
     ogr_shape_16,
     ogr_shape_16_1,
     ogr_shape_17,
     ogr_shape_18,
     ogr_shape_19,
     ogr_shape_20,
     ogr_shape_21,
     ogr_shape_22,
     ogr_shape_23,
     ogr_shape_24,
     ogr_shape_25,
     ogr_shape_26,
     ogr_shape_27,
     ogr_shape_28,
     ogr_shape_29,
     ogr_shape_30,
     ogr_shape_31,
     ogr_shape_32,
     ogr_shape_33,
     ogr_shape_34,
     ogr_shape_35,
     ogr_shape_36,
     ogr_shape_37,
     ogr_shape_37_bis,
     ogr_shape_38,
     ogr_shape_39,
     ogr_shape_40,
     ogr_shape_41,
     ogr_shape_42,
     ogr_shape_43,
     ogr_shape_44,
     ogr_shape_45,
     ogr_shape_46,
     ogr_shape_47,
     ogr_shape_48,
     ogr_shape_49,
     ogr_shape_50,
     ogr_shape_51,
     ogr_shape_52,
     ogr_shape_53,
     ogr_shape_54,
     ogr_shape_55,
     ogr_shape_56,
     ogr_shape_57,
     ogr_shape_58,
     ogr_shape_59,
     ogr_shape_60,
     ogr_shape_61,
     ogr_shape_62,
     ogr_shape_63,
     ogr_shape_64,
     ogr_shape_65,
     ogr_shape_66,
     ogr_shape_67,
     ogr_shape_68,
     ogr_shape_69,
     ogr_shape_70,
     ogr_shape_71,
     ogr_shape_72,
     ogr_shape_73,
     ogr_shape_74,
     ogr_shape_75,
     ogr_shape_76,
     ogr_shape_77,
     ogr_shape_78,
     ogr_shape_79,
     ogr_shape_80,
     ogr_shape_81,
     ogr_shape_82,
     ogr_shape_83,
     ogr_shape_84,
     ogr_shape_85,
     ogr_shape_86,
     ogr_shape_87,
     ogr_shape_88,
     ogr_shape_89,
     ogr_shape_90,
     ogr_shape_91,
     ogr_shape_92,
     ogr_shape_93,
     ogr_shape_94,
     ogr_shape_95,
     ogr_shape_96,
     ogr_shape_97,
     ogr_shape_98,
     ogr_shape_99,
     ogr_shape_100,
     ogr_shape_101,
     ogr_shape_102,
     ogr_shape_103,
     ogr_shape_104,
     ogr_shape_105,
     ogr_shape_106,
     ogr_shape_107,
     ogr_shape_108,
+    ogr_shape_109,
     ogr_shape_cleanup ]
 
 # gdaltest_list = [ ogr_shape_107 ]
diff --git a/gdal/ogr/ogrsf_frmts/shape/shpopen.c b/gdal/ogr/ogrsf_frmts/shape/shpopen.c
index edc777c430..2e02000935 100644
--- a/gdal/ogr/ogrsf_frmts/shape/shpopen.c
+++ b/gdal/ogr/ogrsf_frmts/shape/shpopen.c
@@ -2934,163 +2934,164 @@ int SHPAPI_CALL
 SHPRewindObject( CPL_UNUSED SHPHandle hSHP,
                  SHPObject * psObject )
 {
     int  iOpRing, bAltered = 0;
 
 /* -------------------------------------------------------------------- */
 /*      Do nothing if this is not a polygon object.                     */
 /* -------------------------------------------------------------------- */
     if( psObject->nSHPType != SHPT_POLYGON
         && psObject->nSHPType != SHPT_POLYGONZ
         && psObject->nSHPType != SHPT_POLYGONM )
         return 0;
 
     if( psObject->nVertices == 0 || psObject->nParts == 0 )
         return 0;
 
 /* -------------------------------------------------------------------- */
 /*      Process each of the rings.                                      */
 /* -------------------------------------------------------------------- */
     for( iOpRing = 0; iOpRing < psObject->nParts; iOpRing++ )
     {
         int      bInner, iVert, nVertCount, nVertStart, iCheckRing;
         double   dfSum, dfTestX, dfTestY;
 
+        nVertStart = psObject->panPartStart[iOpRing];
+
+        if( iOpRing == psObject->nParts-1 )
+            nVertCount = psObject->nVertices - psObject->panPartStart[iOpRing];
+        else
+            nVertCount = psObject->panPartStart[iOpRing+1]
+                - psObject->panPartStart[iOpRing];
+
+        if (nVertCount < 2)
+            continue;
 /* -------------------------------------------------------------------- */
 /*      Determine if this ring is an inner ring or an outer ring        */
 /*      relative to all the other rings.  For now we assume the         */
 /*      first ring is outer and all others are inner, but eventually    */
 /*      we need to fix this to handle multiple island polygons and      */
 /*      unordered sets of rings.                                        */
 /*                                                                      */
 /* -------------------------------------------------------------------- */
 
         /* Use point in the middle of segment to avoid testing
          * common points of rings.
          */
         dfTestX = ( psObject->padfX[psObject->panPartStart[iOpRing]]
                     + psObject->padfX[psObject->panPartStart[iOpRing] + 1] ) / 2;
         dfTestY = ( psObject->padfY[psObject->panPartStart[iOpRing]]
                     + psObject->padfY[psObject->panPartStart[iOpRing] + 1] ) / 2;
 
         bInner = FALSE;
         for( iCheckRing = 0; iCheckRing < psObject->nParts; iCheckRing++ )
         {
+            int nVertStartCheck, nVertCountCheck;
             int iEdge;
 
             if( iCheckRing == iOpRing )
                 continue;
 
-            nVertStart = psObject->panPartStart[iCheckRing];
+            nVertStartCheck = psObject->panPartStart[iCheckRing];
 
             if( iCheckRing == psObject->nParts-1 )
-                nVertCount = psObject->nVertices
+                nVertCountCheck = psObject->nVertices
                     - psObject->panPartStart[iCheckRing];
             else
-                nVertCount = psObject->panPartStart[iCheckRing+1]
+                nVertCountCheck = psObject->panPartStart[iCheckRing+1]
                     - psObject->panPartStart[iCheckRing];
 
-            for( iEdge = 0; iEdge < nVertCount; iEdge++ )
+            for( iEdge = 0; iEdge < nVertCountCheck; iEdge++ )
             {
                 int iNext;
 
-                if( iEdge < nVertCount-1 )
+                if( iEdge < nVertCountCheck-1 )
                     iNext = iEdge+1;
                 else
                     iNext = 0;
 
                 /* Rule #1:
                  * Test whether the edge 'straddles' the horizontal ray from the test point (dfTestY,dfTestY)
                  * The rule #1 also excludes edges colinear with the ray.
                  */
-                if ( ( psObject->padfY[iEdge+nVertStart] < dfTestY
-                       && dfTestY <= psObject->padfY[iNext+nVertStart] )
-                     || ( psObject->padfY[iNext+nVertStart] < dfTestY
-                          && dfTestY <= psObject->padfY[iEdge+nVertStart] ) )
+                if ( ( psObject->padfY[iEdge+nVertStartCheck] < dfTestY
+                       && dfTestY <= psObject->padfY[iNext+nVertStartCheck] )
+                     || ( psObject->padfY[iNext+nVertStartCheck] < dfTestY
+                          && dfTestY <= psObject->padfY[iEdge+nVertStartCheck] ) )
                 {
                     /* Rule #2:
                      * Test if edge-ray intersection is on the right from the test point (dfTestY,dfTestY)
                      */
                     double const intersect =
-                        ( psObject->padfX[iEdge+nVertStart]
-                          + ( dfTestY - psObject->padfY[iEdge+nVertStart] )
-                          / ( psObject->padfY[iNext+nVertStart] - psObject->padfY[iEdge+nVertStart] )
-                          * ( psObject->padfX[iNext+nVertStart] - psObject->padfX[iEdge+nVertStart] ) );
+                        ( psObject->padfX[iEdge+nVertStartCheck]
+                          + ( dfTestY - psObject->padfY[iEdge+nVertStartCheck] )
+                          / ( psObject->padfY[iNext+nVertStartCheck] - psObject->padfY[iEdge+nVertStartCheck] )
+                          * ( psObject->padfX[iNext+nVertStartCheck] - psObject->padfX[iEdge+nVertStartCheck] ) );
 
                     if (intersect  < dfTestX)
                     {
                         bInner = !bInner;
                     }
                 }
             }
         } /* for iCheckRing */
 
 /* -------------------------------------------------------------------- */
 /*      Determine the current order of this ring so we will know if     */
 /*      it has to be reversed.                                          */
 /* -------------------------------------------------------------------- */
-        nVertStart = psObject->panPartStart[iOpRing];
-
-        if( iOpRing == psObject->nParts-1 )
-            nVertCount = psObject->nVertices - psObject->panPartStart[iOpRing];
-        else
-            nVertCount = psObject->panPartStart[iOpRing+1]
-                - psObject->panPartStart[iOpRing];
-
-        if (nVertCount < 2)
-            continue;
 
         dfSum = psObject->padfX[nVertStart] * (psObject->padfY[nVertStart+1] - psObject->padfY[nVertStart+nVertCount-1]);
         for( iVert = nVertStart + 1; iVert < nVertStart+nVertCount-1; iVert++ )
         {
             dfSum += psObject->padfX[iVert] * (psObject->padfY[iVert+1] - psObject->padfY[iVert-1]);
         }
 
         dfSum += psObject->padfX[iVert] * (psObject->padfY[nVertStart] - psObject->padfY[iVert-1]);
 
 /* -------------------------------------------------------------------- */
 /*      Reverse if necessary.                                           */
 /* -------------------------------------------------------------------- */
         if( (dfSum < 0.0 && bInner) || (dfSum > 0.0 && !bInner) )
         {
             int   i;
 
             bAltered++;
             for( i = 0; i < nVertCount/2; i++ )
             {
                 double dfSaved;
 
                 /* Swap X */
                 dfSaved = psObject->padfX[nVertStart+i];
                 psObject->padfX[nVertStart+i] =
                     psObject->padfX[nVertStart+nVertCount-i-1];
                 psObject->padfX[nVertStart+nVertCount-i-1] = dfSaved;
 
                 /* Swap Y */
                 dfSaved = psObject->padfY[nVertStart+i];
                 psObject->padfY[nVertStart+i] =
                     psObject->padfY[nVertStart+nVertCount-i-1];
                 psObject->padfY[nVertStart+nVertCount-i-1] = dfSaved;
 
                 /* Swap Z */
                 if( psObject->padfZ )
                 {
                     dfSaved = psObject->padfZ[nVertStart+i];
                     psObject->padfZ[nVertStart+i] =
                         psObject->padfZ[nVertStart+nVertCount-i-1];
                     psObject->padfZ[nVertStart+nVertCount-i-1] = dfSaved;
                 }
 
                 /* Swap M */
                 if( psObject->padfM )
                 {
                     dfSaved = psObject->padfM[nVertStart+i];
                     psObject->padfM[nVertStart+i] =
                         psObject->padfM[nVertStart+nVertCount-i-1];
                     psObject->padfM[nVertStart+nVertCount-i-1] = dfSaved;
                 }
             }
         }
     }
 
     return bAltered;
 }
