commit f49d8b7b1d33ddc0ef03d0dea822dec83fbb8722
Author: Jonathan Hui <jonhui@google.com>
Date:   Fri Dec 13 17:20:01 2019 -0800

    [mle] set appropriate Response TLV length in SendChildUpdateResponse (#4400)

diff --git a/src/core/thread/mle_router.cpp b/src/core/thread/mle_router.cpp
index 89a8b3e3d..c4dca1732 100644
--- a/src/core/thread/mle_router.cpp
+++ b/src/core/thread/mle_router.cpp
@@ -3029,70 +3029,70 @@ exit:
 void MleRouter::SendChildUpdateResponse(Child *                 aChild,
                                         const Ip6::MessageInfo &aMessageInfo,
                                         const uint8_t *         aTlvs,
                                         uint8_t                 aTlvsLength,
                                         const ChallengeTlv &    aChallenge)
 {
     otError  error = OT_ERROR_NONE;
     Message *message;
 
     VerifyOrExit((message = NewMleMessage()) != NULL, error = OT_ERROR_NO_BUFS);
     SuccessOrExit(error = AppendHeader(*message, Header::kCommandChildUpdateResponse));
 
     for (int i = 0; i < aTlvsLength; i++)
     {
         switch (aTlvs[i])
         {
         case Tlv::kStatus:
             SuccessOrExit(error = AppendStatus(*message, StatusTlv::kError));
             break;
 
         case Tlv::kAddressRegistration:
             SuccessOrExit(error = AppendChildAddresses(*message, *aChild));
             break;
 
         case Tlv::kLeaderData:
             SuccessOrExit(error = AppendLeaderData(*message));
             break;
 
         case Tlv::kMode:
             SuccessOrExit(error = AppendMode(*message, aChild->GetDeviceMode()));
             break;
 
         case Tlv::kNetworkData:
             SuccessOrExit(error = AppendNetworkData(*message, !aChild->IsFullNetworkData()));
             SuccessOrExit(error = AppendActiveTimestamp(*message));
             SuccessOrExit(error = AppendPendingTimestamp(*message));
             break;
 
         case Tlv::kResponse:
-            SuccessOrExit(error = AppendResponse(*message, aChallenge.GetChallenge(), aChallenge.GetLength()));
+            SuccessOrExit(error = AppendResponse(*message, aChallenge.GetChallenge(), aChallenge.GetChallengeLength()));
             break;
 
         case Tlv::kSourceAddress:
             SuccessOrExit(error = AppendSourceAddress(*message));
             break;
 
         case Tlv::kTimeout:
             SuccessOrExit(error = AppendTimeout(*message, aChild->GetTimeout()));
             break;
 
         case Tlv::kMleFrameCounter:
             SuccessOrExit(error = AppendMleFrameCounter(*message));
             break;
 
         case Tlv::kLinkFrameCounter:
             SuccessOrExit(error = AppendLinkFrameCounter(*message));
             break;
         }
     }
 
     SuccessOrExit(error = SendMessage(*message, aMessageInfo.GetPeerAddr()));
 
     if (aChild == NULL)
     {
         LogMleMessage("Send Child Update Response to child", aMessageInfo.GetPeerAddr());
     }
     else
     {
         LogMleMessage("Send Child Update Response to child", aMessageInfo.GetPeerAddr(), aChild->GetRloc16());
     }
