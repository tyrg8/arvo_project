commit 4361438987347d0f2507b7dcb3c4179b5e38d034
Author: Jack Lloyd <jack@randombit.net>
Date:   Thu Mar 1 11:00:23 2018 -0500

    Initialize z arrays within bigint_cnd_{sub,add}
    
    MSan requires compile time information about memory writes,
    so the inline asm writing to z is not seen. So OSS-Fuzz thinks
    the value is being used uninitialized.
    
    OSS-Fuzz 6626

diff --git a/src/lib/math/mp/mp_core.cpp b/src/lib/math/mp/mp_core.cpp
index 8b7b7a8c5..a86bbf3c0 100644
--- a/src/lib/math/mp/mp_core.cpp
+++ b/src/lib/math/mp/mp_core.cpp
@@ -35,59 +35,59 @@ void bigint_cnd_swap(word cnd, word x[], word y[], size_t size)
 /*
 * If cond > 0 adds x[0:size] to y[0:size] and returns carry
 * Runs in constant time
 */
 word bigint_cnd_add(word cnd, word x[], const word y[], size_t size)
    {
    const word mask = CT::expand_mask(cnd);
 
    word carry = 0;
-   word z[8];
 
    const size_t blocks = size - (size % 8);
+   word z[8] = { 0 };
 
    for(size_t i = 0; i != blocks; i += 8)
       {
       carry = word8_add3(z, x + i, y + i, carry);
 
       for(size_t j = 0; j != 8; ++j)
          x[i+j] = CT::select(mask, z[j], x[i+j]);
       }
 
    for(size_t i = blocks; i != size; ++i)
       {
-      const word z = word_add(x[i], y[i], &carry);
-      x[i] = CT::select(mask, z, x[i]);
+      z[0] = word_add(x[i], y[i], &carry);
+      x[i] = CT::select(mask, z[0], x[i]);
       }
 
    return carry & mask;
    }
 
 /*
 * If cond > 0 subs x[0:size] to y[0:size] and returns borrow
 * Runs in constant time
 */
 word bigint_cnd_sub(word cnd, word x[], const word y[], size_t size)
    {
    const word mask = CT::expand_mask(cnd);
 
    word carry = 0;
-   word z[8];
 
    const size_t blocks = size - (size % 8);
+   word z[8] = { 0 };
 
    for(size_t i = 0; i != blocks; i += 8)
       {
       carry = word8_sub3(z, x + i, y + i, carry);
 
       for(size_t j = 0; j != 8; ++j)
          x[i+j] = CT::select(mask, z[j], x[i+j]);
       }
 
    for(size_t i = blocks; i != size; ++i)
       {
-      const word z = word_sub(x[i], y[i], &carry);
-      x[i] = CT::select(mask, z, x[i]);
+      z[0] = word_sub(x[i], y[i], &carry);
+      x[i] = CT::select(mask, z[0], x[i]);
       }
 
    return carry & mask;
    }
