commit b4296e1c9b01be7c8b052ae023e0927cc6762b1b
Author: Tim Ledbetter <timledbetter@gmail.com>
Date:   Wed Oct 25 23:45:56 2023 +0100

    LibPDF: Don't use unsanitized values in error messages
    
    Previously, constructing error messages with unsanitized input could
    fail because error message strings must be UTF-8.

diff --git a/Tests/LibPDF/CMakeLists.txt b/Tests/LibPDF/CMakeLists.txt
index b466a25a82..402f9686ab 100644
--- a/Tests/LibPDF/CMakeLists.txt
+++ b/Tests/LibPDF/CMakeLists.txt
@@ -9,8 +9,9 @@ endforeach()
 set(TEST_FILES
     complex.pdf
     encryption_nocopy.pdf
     linearized.pdf
     non-linearized.pdf
+    oss-fuzz-testcase-62065.pdf
     password-is-sup.pdf
     type1.pdf
 )
diff --git a/Tests/LibPDF/TestPDF.cpp b/Tests/LibPDF/TestPDF.cpp
index d82762506f..fe70dd109a 100644
--- a/Tests/LibPDF/TestPDF.cpp
+++ b/Tests/LibPDF/TestPDF.cpp
@@ -73,3 +73,16 @@ TEST_CASE(encrypted_object_stream)
     EXPECT_EQ(MUST(info_dict.author()).value(), "van der Knijff");
     EXPECT_EQ(MUST(info_dict.creator()).value(), "Acrobat PDFMaker 9.1 voor Word");
 }
+
+TEST_CASE(malformed_pdf_document)
+{
+    Array test_inputs = {
+        "oss-fuzz-testcase-62065.pdf"sv
+    };
+
+    for (auto test_input : test_inputs) {
+        auto file = MUST(Core::MappedFile::map(test_input));
+        auto document_or_error = PDF::Document::create(file->bytes());
+        EXPECT(document_or_error.is_error());
+    }
+}
diff --git a/Tests/LibPDF/oss-fuzz-testcase-62065.pdf b/Tests/LibPDF/oss-fuzz-testcase-62065.pdf
new file mode 100644
index 0000000000..c35b0ceaee
--- /dev/null
+++ b/Tests/LibPDF/oss-fuzz-testcase-62065.pdf
@@ -0,0 +1 @@
+%PDF-ÿÿÿ
\ No newline at end of file
diff --git a/Userland/Libraries/LibPDF/ColorSpace.cpp b/Userland/Libraries/LibPDF/ColorSpace.cpp
index 58f30c3987..35e264c2a7 100644
--- a/Userland/Libraries/LibPDF/ColorSpace.cpp
+++ b/Userland/Libraries/LibPDF/ColorSpace.cpp
@@ -22,12 +22,13 @@ ENUMERATE_COLOR_SPACE_FAMILIES(ENUMERATE);
 PDFErrorOr<ColorSpaceFamily> ColorSpaceFamily::get(DeprecatedFlyString const& family_name)
 {
 #define ENUMERATE(f_name, may_be_specified_directly) \
     if (family_name == f_name.name()) {              \
         return ColorSpaceFamily::f_name;             \
     }
     ENUMERATE_COLOR_SPACE_FAMILIES(ENUMERATE)
 #undef ENUMERATE
-    return Error(Error::Type::MalformedPDF, DeprecatedString::formatted("Unknown ColorSpace family {}", family_name));
+    dbgln_if(PDF_DEBUG, "Unknown ColorSpace family: {}", family_name);
+    return Error(Error::Type::MalformedPDF, "Unknown ColorSpace family"_string);
 }
 
 PDFErrorOr<NonnullRefPtr<ColorSpace>> ColorSpace::create(DeprecatedFlyString const& name)
diff --git a/Userland/Libraries/LibPDF/DocumentParser.cpp b/Userland/Libraries/LibPDF/DocumentParser.cpp
index a4f775fdf2..29b0dc05a8 100644
--- a/Userland/Libraries/LibPDF/DocumentParser.cpp
+++ b/Userland/Libraries/LibPDF/DocumentParser.cpp
@@ -75,35 +75,39 @@ PDFErrorOr<Value> DocumentParser::parse_object_with_index(u32 index)
 PDFErrorOr<Version> DocumentParser::parse_header()
 {
     m_reader.move_to(0);
     if (m_reader.remaining() < 8 || !m_reader.matches("%PDF-"))
         return error("Not a PDF document");
 
     m_reader.move_by(5);
 
     char major_ver = m_reader.read();
-    if (major_ver != '1' && major_ver != '2')
-        return error(DeprecatedString::formatted("Unknown major version \"{}\"", major_ver));
+    if (major_ver != '1' && major_ver != '2') {
+        dbgln_if(PDF_DEBUG, "Unknown major version \"{}\"", major_ver);
+        return error("Unknown major version");
+    }
 
     if (m_reader.read() != '.')
         return error("Malformed PDF version");
 
     char minor_ver = m_reader.read();
-    if (minor_ver < '0' || minor_ver > '7')
-        return error(DeprecatedString::formatted("Unknown minor version \"{}\"", minor_ver));
+    if (minor_ver < '0' || minor_ver > '7') {
+        dbgln_if(PDF_DEBUG, "Unknown minor version \"{}\"", minor_ver);
+        return error("Unknown minor version");
+    }
 
     m_reader.consume_eol();
     m_reader.consume_whitespace();
 
     // Parse optional high-byte comment, which signifies a binary file
     // FIXME: Do something with this?
     auto comment = parse_comment();
     if (!comment.is_empty()) {
         auto binary = comment.length() >= 4;
         if (binary) {
             for (size_t i = 0; i < comment.length() && binary; i++)
                 binary = static_cast<u8>(comment[i]) > 128;
         }
     }
 
     return Version { major_ver - '0', minor_ver - '0' };
 }
diff --git a/Userland/Libraries/LibPDF/Filter.cpp b/Userland/Libraries/LibPDF/Filter.cpp
index 7d5b3936ab..c9dc45f998 100644
--- a/Userland/Libraries/LibPDF/Filter.cpp
+++ b/Userland/Libraries/LibPDF/Filter.cpp
@@ -15,43 +15,44 @@ namespace PDF {
 PDFErrorOr<ByteBuffer> Filter::decode(ReadonlyBytes bytes, DeprecatedFlyString const& encoding_type, RefPtr<DictObject> decode_parms)
 {
     int predictor = 1;
     int columns = 1;
     int colors = 1;
     int bits_per_component = 8;
 
     if (decode_parms) {
         if (decode_parms->contains(CommonNames::Predictor))
             predictor = decode_parms->get_value(CommonNames::Predictor).get<int>();
         if (decode_parms->contains(CommonNames::Columns))
             columns = decode_parms->get_value(CommonNames::Columns).get<int>();
         if (decode_parms->contains(CommonNames::Colors))
             colors = decode_parms->get_value(CommonNames::Colors).get<int>();
         if (decode_parms->contains(CommonNames::BitsPerComponent))
             bits_per_component = decode_parms->get_value(CommonNames::BitsPerComponent).get<int>();
     }
 
     if (encoding_type == CommonNames::ASCIIHexDecode)
         return decode_ascii_hex(bytes);
     if (encoding_type == CommonNames::ASCII85Decode)
         return decode_ascii85(bytes);
     if (encoding_type == CommonNames::LZWDecode)
         return decode_lzw(bytes);
     if (encoding_type == CommonNames::FlateDecode)
         return decode_flate(bytes, predictor, columns, colors, bits_per_component);
     if (encoding_type == CommonNames::RunLengthDecode)
         return decode_run_length(bytes);
     if (encoding_type == CommonNames::CCITTFaxDecode)
         return decode_ccitt(bytes);
     if (encoding_type == CommonNames::JBIG2Decode)
         return decode_jbig2(bytes);
     if (encoding_type == CommonNames::DCTDecode)
         return decode_dct(bytes);
     if (encoding_type == CommonNames::JPXDecode)
         return decode_jpx(bytes);
     if (encoding_type == CommonNames::Crypt)
         return decode_crypt(bytes);
 
-    return Error::malformed_error("Unrecognized filter encoding {}", encoding_type);
+    dbgln_if(PDF_DEBUG, "Unrecognized filter encoding {}", encoding_type);
+    return Error::malformed_error("Unrecognized filter encoding");
 }
 
 PDFErrorOr<ByteBuffer> Filter::decode_ascii_hex(ReadonlyBytes bytes)
diff --git a/Userland/Libraries/LibPDF/Fonts/PDFFont.cpp b/Userland/Libraries/LibPDF/Fonts/PDFFont.cpp
index b7e9390ff8..0d89baa3bc 100644
--- a/Userland/Libraries/LibPDF/Fonts/PDFFont.cpp
+++ b/Userland/Libraries/LibPDF/Fonts/PDFFont.cpp
@@ -35,17 +35,19 @@ namespace PDF {
 PDFErrorOr<NonnullRefPtr<PDFFont>> PDFFont::create(Document* document, NonnullRefPtr<DictObject> const& dict, float font_size)
 {
     auto subtype = TRY(dict->get_name(document, CommonNames::Subtype))->name();
 
     RefPtr<PDFFont> font;
-    if (subtype == "Type1")
+    if (subtype == "Type1") {
         font = adopt_ref(*new Type1Font());
-    else if (subtype == "TrueType")
+    } else if (subtype == "TrueType") {
         font = adopt_ref(*new TrueTypeFont());
-    else if (subtype == "Type0")
+    } else if (subtype == "Type0")
         font = adopt_ref(*new Type0Font());
-    else
-        return Error::internal_error("Unhandled font subtype: {}", subtype);
+    else {
+        dbgln_if(PDF_DEBUG, "Unhandled font subtype: {}", subtype);
+        return Error::internal_error("Unhandled font subtype");
+    }
 
     TRY(font->initialize(document, dict, font_size));
     return font.release_nonnull();
 }
diff --git a/Userland/Libraries/LibPDF/Fonts/Type1FontProgram.cpp b/Userland/Libraries/LibPDF/Fonts/Type1FontProgram.cpp
index 003ed0a150..04bc7d17d5 100644
--- a/Userland/Libraries/LibPDF/Fonts/Type1FontProgram.cpp
+++ b/Userland/Libraries/LibPDF/Fonts/Type1FontProgram.cpp
@@ -137,453 +137,455 @@ void Type1FontProgram::consolidate_glyphs()
 PDFErrorOr<Type1FontProgram::Glyph> Type1FontProgram::parse_glyph(ReadonlyBytes const& data, Vector<ByteBuffer> const& local_subroutines, Vector<ByteBuffer> const& global_subroutines, GlyphParserState& state, bool is_type2)
 {
     // Type 1 Font Format: https://adobe-type-tools.github.io/font-tech-notes/pdfs/T1_SPEC.pdf (Chapter 6: CharStrings dictionary)
     // Type 2 Charstring Format: https://adobe-type-tools.github.io/font-tech-notes/pdfs/5177.Type2.pdf
 
     auto push = [&](float value) -> PDFErrorOr<void> {
         if (state.sp >= state.stack.size())
             return error("Operand stack overflow");
         state.stack[state.sp++] = value;
         return {};
     };
 
     auto pop = [&]() -> float {
         return state.stack[--state.sp];
     };
 
     auto pop_front = [&]() {
         auto value = state.stack[0];
         --state.sp;
         for (size_t i = 0; i < state.sp; i++)
             state.stack[i] = state.stack[i + 1];
         return value;
     };
 
     auto& path = state.glyph.path();
     auto& point = state.point;
 
     // Core operations: move to, line to, curve to
     auto move_to = [&](float dx, float dy) {
         point.translate_by(dx, dy);
         if (is_type2)
             path.close();
         if (state.flex_feature) {
             state.flex_sequence[state.flex_index++] = state.point.x();
             state.flex_sequence[state.flex_index++] = state.point.y();
         } else {
             path.move_to(point);
         }
     };
 
     auto line_to = [&](float dx, float dy) {
         point.translate_by(dx, dy);
         path.line_to(point);
     };
 
     auto cube_bezier_curve_to = [&](float dx1, float dy1, float dx2, float dy2, float dx3, float dy3) {
         path.cubic_bezier_curve_to(
             point + Gfx::FloatPoint(dx1, dy1),
             point + Gfx::FloatPoint(dx1 + dx2, dy1 + dy2),
             point + Gfx::FloatPoint(dx1 + dx2 + dx3, dy1 + dy2 + dy3));
         point.translate_by(dx1 + dx2 + dx3, dy1 + dy2 + dy3);
     };
 
     // Shared operator logic
     auto rline_to = [&]() {
         auto dx = pop_front();
         auto dy = pop_front();
         line_to(dx, dy);
     };
 
     auto hvline_to = [&](bool horizontal) {
         while (state.sp > 0) {
             auto d = pop_front();
             float dx = horizontal ? d : 0;
             float dy = horizontal ? 0 : d;
             line_to(dx, dy);
             horizontal = !horizontal;
         }
     };
 
     auto rrcurve_to = [&]() {
         auto dx1 = pop_front();
         auto dy1 = pop_front();
         auto dx2 = pop_front();
         auto dy2 = pop_front();
         auto dx3 = pop_front();
         auto dy3 = pop_front();
         cube_bezier_curve_to(dx1, dy1, dx2, dy2, dx3, dy3);
     };
 
     auto hvcurve_to = [&](bool first_tangent_horizontal) {
         while (state.sp > 0) {
             auto d1 = pop_front();
             auto dx2 = pop_front();
             auto dy2 = pop_front();
             auto d3 = pop_front();
             float d4 = state.sp == 1 ? pop_front() : 0;
 
             auto dx1 = first_tangent_horizontal ? d1 : 0;
             auto dy1 = first_tangent_horizontal ? 0 : d1;
             auto dx3 = first_tangent_horizontal ? d4 : d3;
             auto dy3 = first_tangent_horizontal ? d3 : d4;
             cube_bezier_curve_to(dx1, dy1, dx2, dy2, dx3, dy3);
             first_tangent_horizontal = !first_tangent_horizontal;
         }
     };
 
     // Potential font width parsing for some commands (type2 only)
     bool is_first_command = true;
     enum EvenOrOdd {
         Even,
         Odd
     };
     auto maybe_read_width = [&](EvenOrOdd required_argument_count) {
         if (!is_type2 || !is_first_command || state.sp % 2 != required_argument_count)
             return;
         state.glyph.set_width(pop_front());
     };
 
     // Parse the stream of parameters and commands that make up a glyph outline.
     for (size_t i = 0; i < data.size(); ++i) {
         auto require = [&](unsigned num) -> PDFErrorOr<void> {
             if (i + num >= data.size())
                 return error("Malformed glyph outline definition");
             return {};
         };
 
         int v = data[i];
         if (v == 255) {
             TRY(require(4));
             // Both Type 1 and Type 2 spec:
             // "If the charstring byte contains the value 255, the next four bytes indicate a twoâs complement signed number.
             //  The first of these four bytes contains the highest order bits [...]"
             i32 a = static_cast<i32>((data[i + 1] << 24) | (data[i + 2] << 16) | (data[i + 3] << 8) | data[i + 4]);
             i += 4;
             if (is_type2) {
                 // Just in the Type 2 spec: "This number is interpreted as a Fixed; that is, a signed number with 16 bits of fraction."
                 TRY(push(a / (float)0x1'0000));
             } else {
                 TRY(push(a));
             }
         } else if (v >= 251) {
             TRY(require(1));
             auto w = data[++i];
             TRY(push(-((v - 251) * 256) - w - 108));
         } else if (v >= 247) {
             TRY(require(1));
             auto w = data[++i];
             TRY(push(((v - 247) * 256) + w + 108));
         } else if (v >= 32) {
             TRY(push(v - 139));
         } else if (v == 28) {
             if (is_type2) {
                 // Type 2 spec: "In addition to the 32 to 255 range of values, a ShortInt value is specified by using the operator (28)
                 // followed by two bytes which represent numbers between â32768 and +32767. The most significant byte follows the (28)."
                 TRY(require(2));
                 i16 a = static_cast<i16>((data[i + 1] << 8) | data[i + 2]);
                 i += 2;
                 TRY(push(a));
             } else {
-                return error(DeprecatedString::formatted("CFF Subr command 28 only valid in type2 data"));
+                return error("CFF Subr command 28 only valid in type2 data");
             }
         } else {
             // Not a parameter but a command byte.
             switch (v) {
 
             // hints operators
             case HStemHM:
                 state.n_hints += state.sp / 2;
                 [[fallthrough]];
             case HStem:
                 maybe_read_width(Odd);
                 state.sp = 0;
                 break;
 
             case VStemHM:
                 state.n_hints += state.sp / 2;
                 [[fallthrough]];
             case VStem:
                 maybe_read_width(Odd);
                 state.sp = 0;
                 break;
 
             case Hintmask:
             case Cntrmask: {
                 maybe_read_width(Odd);
                 state.n_hints += state.sp / 2;
                 auto hint_bytes = (state.n_hints + 8 - 1) / 8;
                 TRY(require(hint_bytes));
                 i += hint_bytes;
                 state.sp = 0;
                 break;
             }
 
             // move-to operators
             case RMoveTo: {
                 maybe_read_width(Odd);
                 auto dy = pop();
                 auto dx = pop();
                 move_to(dx, dy);
                 state.sp = 0;
                 break;
             }
             case HMoveTo: {
                 maybe_read_width(Even);
                 auto dx = pop();
                 move_to(dx, 0);
                 state.sp = 0;
                 break;
             }
             case VMoveTo: {
                 maybe_read_width(Even);
                 auto dy = pop();
                 move_to(0, dy);
                 state.sp = 0;
                 break;
             }
 
             // line-to operators
             case RLineTo: {
                 while (state.sp >= 2)
                     rline_to();
                 state.sp = 0;
                 break;
             }
             case HLineTo: {
                 hvline_to(true);
                 state.sp = 0;
                 break;
             }
             case VLineTo: {
                 hvline_to(false);
                 state.sp = 0;
                 break;
             }
 
             case RRCurveTo: {
                 while (state.sp >= 6)
                     rrcurve_to();
                 VERIFY(state.sp == 0);
                 break;
             }
 
             case ClosePath:
                 path.close();
                 state.sp = 0;
                 break;
 
             case CallGsubr:
                 if (!is_type2)
                     return error(DeprecatedString::formatted("CFF Gsubr only valid in type2 data"));
                 [[fallthrough]];
             case CallSubr: {
                 Vector<ByteBuffer> const& subroutines = v == CallSubr ? local_subroutines : global_subroutines;
                 auto subr_number = pop();
 
                 if (is_type2) {
                     // Type 2 spec:
                     // "The numbering of subroutines is encoded more compactly by using the negative half of the number space, which effectively
                     //  doubles the number of compactly encodable subroutine numbers. The bias applied depends on the number of subrs (gsubrs).
                     //  If the number of subrs (gsubrs) is less than 1240, the bias is 107. Otherwise if it is less than 33900, it is 1131; otherwise
                     //  it is 32768. This bias is added to the encoded subr (gsubr) number to find the appropriate entry in the subr (gsubr) array."
                     if (subroutines.size() < 1240)
                         subr_number += 107;
                     else if (subroutines.size() < 33900)
                         subr_number += 1131;
                     else
                         subr_number += 32768;
                 }
 
                 if (static_cast<size_t>(subr_number) >= subroutines.size())
                     return error("Subroutine index out of range");
 
                 // Subroutines 0-2 handle the flex feature.
                 if (subr_number == 0) {
                     if (state.flex_index != 14)
                         break;
 
                     auto& flex = state.flex_sequence;
 
                     path.cubic_bezier_curve_to(
                         { flex[2], flex[3] },
                         { flex[4], flex[5] },
                         { flex[6], flex[7] });
                     path.cubic_bezier_curve_to(
                         { flex[8], flex[9] },
                         { flex[10], flex[11] },
                         { flex[12], flex[13] });
 
                     state.flex_feature = false;
                     state.sp = 0;
                 } else if (subr_number == 1) {
                     state.flex_feature = true;
                     state.flex_index = 0;
                     state.sp = 0;
                 } else if (subr_number == 2) {
                     state.sp = 0;
                 } else {
                     auto const& subr = subroutines[subr_number];
                     if (subr.is_empty())
                         return error("Empty subroutine");
 
                     TRY(parse_glyph(subr, local_subroutines, global_subroutines, state, is_type2));
                 }
                 break;
             }
 
             case Return:
                 break;
 
             case Extended: {
                 TRY(require(1));
                 switch (data[++i]) {
                 case DotSection:
                 case VStem3:
                 case HStem3:
                     // FIXME: Do something with these?
                     state.sp = 0;
                     break;
 
                 case Seac: {
                     auto achar = pop();
                     auto bchar = pop();
                     auto ady = pop();
                     auto adx = pop();
                     // auto asb = pop();
                     state.glyph.set_accented_character(AccentedCharacter { (u8)bchar, (u8)achar, adx, ady });
                     state.sp = 0;
                     break;
                 }
 
                 case Div: {
                     auto num2 = pop();
                     auto num1 = pop();
 
                     TRY(push(num2 ? num1 / num2 : 0.0f));
                     break;
                 }
 
                 case CallOtherSubr: {
                     [[maybe_unused]] auto othersubr_number = pop();
                     auto n = static_cast<int>(pop());
                     for (int i = 0; i < n; ++i)
                         state.postscript_stack[state.postscript_sp++] = pop();
                     break;
                 }
 
                 case Pop:
                     TRY(push(state.postscript_stack[--state.postscript_sp]));
                     break;
 
                 case SetCurrentPoint: {
                     auto y = pop();
                     auto x = pop();
 
                     state.point = { x, y };
                     path.move_to(state.point);
                     state.sp = 0;
                     break;
                 }
 
                 case Hflex:
                 case Flex:
                 case Hflex1:
                 case Flex1:
                     // TODO: implement these
                     state.sp = 0;
                     break;
 
                 default:
-                    return error(DeprecatedString::formatted("Unhandled command: 12 {}", data[i]));
+                    dbgln_if(PDF_DEBUG, "Unhandled command: 12 {}", data[i]);
+                    return error("Unhandled command");
                 }
                 break;
             }
 
             case HSbW: {
                 auto wx = pop();
                 auto sbx = pop();
 
                 state.glyph.set_width(wx);
                 state.point = { sbx, 0.0f };
                 state.sp = 0;
                 break;
             }
 
             case EndChar: {
                 maybe_read_width(Odd);
                 if (is_type2)
                     path.close();
                 break;
             }
 
             case VHCurveTo: {
                 hvcurve_to(false);
                 state.sp = 0;
                 break;
             }
 
             case HVCurveTo: {
                 hvcurve_to(true);
                 state.sp = 0;
                 break;
             }
 
             case VVCurveTo: {
                 float dx1 = 0;
                 if (state.sp % 2 == 1)
                     dx1 = pop_front();
                 do {
                     auto dy1 = pop_front();
                     auto dx2 = pop_front();
                     auto dy2 = pop_front();
                     auto dy3 = pop_front();
                     cube_bezier_curve_to(dx1, dy1, dx2, dy2, 0, dy3);
                     dx1 = 0;
                 } while (state.sp >= 4);
                 state.sp = 0;
                 break;
             }
 
             case HHCurveTo: {
                 float dy1 = 0;
                 if (state.sp % 2 == 1)
                     dy1 = pop_front();
                 do {
                     auto dx1 = pop_front();
                     auto dx2 = pop_front();
                     auto dy2 = pop_front();
                     auto dx3 = pop_front();
                     cube_bezier_curve_to(dx1, dy1, dx2, dy2, dx3, 0);
                     dy1 = 0;
                 } while (state.sp >= 4);
                 state.sp = 0;
                 break;
             }
 
             case RCurveLine: {
                 while (state.sp >= 8) {
                     rrcurve_to();
                 }
                 rline_to();
                 state.sp = 0;
                 break;
             }
 
             case RLineCurve: {
                 while (state.sp >= 8) {
                     rline_to();
                 }
                 rrcurve_to();
                 break;
             }
 
             default:
-                return error(DeprecatedString::formatted("Unhandled command: {}", v));
+                dbgln_if(PDF_DEBUG, "Unhandled command: {}", v);
+                return error("Unhandled command");
             }
 
             is_first_command = false;
         }
     }
 
     return state.glyph;
 }
diff --git a/Userland/Libraries/LibPDF/Parser.cpp b/Userland/Libraries/LibPDF/Parser.cpp
index cde258ed99..00a428e7eb 100644
--- a/Userland/Libraries/LibPDF/Parser.cpp
+++ b/Userland/Libraries/LibPDF/Parser.cpp
@@ -59,49 +59,50 @@ DeprecatedString Parser::parse_comment()
 PDFErrorOr<Value> Parser::parse_value(CanBeIndirectValue can_be_indirect_value)
 {
     parse_comment();
 
     if (m_reader.matches("null")) {
         m_reader.move_by(4);
         m_reader.consume_whitespace();
         return Value(nullptr);
     }
 
     if (m_reader.matches("true")) {
         m_reader.move_by(4);
         m_reader.consume_whitespace();
         return Value(true);
     }
 
     if (m_reader.matches("false")) {
         m_reader.move_by(5);
         m_reader.consume_whitespace();
         return Value(false);
     }
 
     if (m_reader.matches_number()) {
         if (can_be_indirect_value == CanBeIndirectValue::Yes)
             return parse_possible_indirect_value_or_ref();
         else
             return parse_number();
     }
 
     if (m_reader.matches('/'))
         return MUST(parse_name());
 
     if (m_reader.matches("<<")) {
         auto dict = TRY(parse_dict());
         if (m_reader.matches("stream"))
             return TRY(parse_stream(dict));
         return dict;
     }
 
     if (m_reader.matches_any('(', '<'))
         return parse_string();
 
     if (m_reader.matches('['))
         return TRY(parse_array());
 
-    return error(DeprecatedString::formatted("Unexpected char \"{}\"", m_reader.peek()));
+    dbgln_if(PDF_DEBUG, "Unexpected char \"{}\"", m_reader.peek());
+    return error("Unexpected character");
 }
 
 PDFErrorOr<Value> Parser::parse_possible_indirect_value_or_ref()
