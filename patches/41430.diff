commit 12b211cda2ef5abec89304bd1ba3a79a82229feb
Author: tbeu <tbeu@users.noreply.github.com>
Date:   Sat Nov 27 18:25:02 2021 +0100

    Avoid uninitialized memory access
    
    As reported by https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=41430

diff --git a/src/mat5.c b/src/mat5.c
index be9923f..ab94127 100644
--- a/src/mat5.c
+++ b/src/mat5.c
@@ -809,91 +809,91 @@ static size_t
 WriteCompressedCharData(mat_t *mat, z_streamp z, void *data, size_t N, enum matio_types data_type)
 {
     size_t data_size, byteswritten = 0, nbytes = 0;
-    mat_uint32_t data_tag[2];
+    mat_uint32_t data_tag[2] = {0, 0};
     int buf_size = 1024;
     int err;
     mat_uint8_t buf[1024], pad[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 
     if ( mat == NULL || mat->fp == NULL )
         return 0;
 
     if ( data_type == MAT_T_UNKNOWN ) {
         data_size = Mat_SizeOf(MAT_T_UINT16);
     } else {
         data_size = Mat_SizeOf(data_type);
     }
 
     err = Mul(&nbytes, N, data_size);
     if ( err ) {
         return byteswritten;
     }
 
     switch ( data_type ) {
         case MAT_T_UINT8:
         case MAT_T_UINT16:
         case MAT_T_UTF8:
         case MAT_T_UTF16:
             data_tag[0] = MAT_T_UINT8 == data_type ? MAT_T_UTF8 : data_type;
             data_tag[1] = (mat_uint32_t)nbytes;
             z->next_in = ZLIB_BYTE_PTR(data_tag);
             z->avail_in = 8;
             do {
                 z->next_out = buf;
                 z->avail_out = buf_size;
                 deflate(z, Z_NO_FLUSH);
                 byteswritten += fwrite(buf, 1, buf_size - z->avail_out, (FILE *)mat->fp);
             } while ( z->avail_out == 0 );
 
             /* exit early if this is an empty data */
             if ( NULL == data || N < 1 )
                 break;
 
             z->next_in = (Bytef *)data;
             z->avail_in = (mat_uint32_t)nbytes;
             do {
                 z->next_out = buf;
                 z->avail_out = buf_size;
                 deflate(z, Z_NO_FLUSH);
                 byteswritten += fwrite(buf, 1, buf_size - z->avail_out, (FILE *)mat->fp);
             } while ( z->avail_out == 0 );
             /* Add/Compress padding to pad to 8-byte boundary */
             if ( nbytes % 8 ) {
                 z->next_in = pad;
                 z->avail_in = 8 - (nbytes % 8);
                 do {
                     z->next_out = buf;
                     z->avail_out = buf_size;
                     deflate(z, Z_NO_FLUSH);
                     byteswritten += fwrite(buf, 1, buf_size - z->avail_out, (FILE *)mat->fp);
                 } while ( z->avail_out == 0 );
             }
             break;
         case MAT_T_UNKNOWN:
             /* Sometimes empty char data will have MAT_T_UNKNOWN, so just write a data tag */
             data_tag[0] = MAT_T_UINT16;
             data_tag[1] = (mat_uint32_t)nbytes;
             z->next_in = ZLIB_BYTE_PTR(data_tag);
             z->avail_in = 8;
             do {
                 z->next_out = buf;
                 z->avail_out = buf_size;
                 deflate(z, Z_NO_FLUSH);
                 byteswritten += fwrite(buf, 1, buf_size - z->avail_out, (FILE *)mat->fp);
             } while ( z->avail_out == 0 );
             break;
         default:
             break;
     }
 
     return byteswritten;
 }
 #endif
 
 /** @brief Writes the data buffer to the file
  *
  * @param mat MAT file pointer
  * @param data pointer to the data to write
  * @param N number of elements to write
  * @param data_type data type of the data
  * @return number of bytes written
  */
@@ -2874,178 +2874,178 @@ static int
 Mat_VarReadNumeric5(mat_t *mat, matvar_t *matvar, void *data, size_t N)
 {
     int nBytes = 0, data_in_tag = 0, err = MATIO_E_NO_ERROR;
     enum matio_types packed_type = MAT_T_UNKNOWN;
-    mat_uint32_t tag[2];
+    mat_uint32_t tag[2] = {0, 0};
 
     if ( matvar->compression == MAT_COMPRESSION_ZLIB ) {
 #if HAVE_ZLIB
         matvar->internal->z->avail_in = 0;
         err = Inflate(mat, matvar->internal->z, tag, 4, NULL);
         if ( err ) {
             return err;
         }
         if ( mat->byteswap )
             (void)Mat_uint32Swap(tag);
 
         packed_type = TYPE_FROM_TAG(tag[0]);
         if ( tag[0] & 0xffff0000 ) { /* Data is in the tag */
             data_in_tag = 1;
             nBytes = (tag[0] & 0xffff0000) >> 16;
         } else {
             data_in_tag = 0;
             err = Inflate(mat, matvar->internal->z, tag + 1, 4, NULL);
             if ( err ) {
                 return err;
             }
             if ( mat->byteswap )
                 (void)Mat_uint32Swap(tag + 1);
             nBytes = tag[1];
         }
 #endif
     } else {
         err = Read(tag, 4, 1, (FILE *)mat->fp, NULL);
         if ( err ) {
             return err;
         }
         if ( mat->byteswap )
             (void)Mat_uint32Swap(tag);
         packed_type = TYPE_FROM_TAG(tag[0]);
         if ( tag[0] & 0xffff0000 ) { /* Data is in the tag */
             data_in_tag = 1;
             nBytes = (tag[0] & 0xffff0000) >> 16;
         } else {
             data_in_tag = 0;
             err = Read(tag + 1, 4, 1, (FILE *)mat->fp, NULL);
             if ( err ) {
                 return err;
             }
             if ( mat->byteswap )
                 (void)Mat_uint32Swap(tag + 1);
             nBytes = tag[1];
         }
     }
     if ( nBytes == 0 ) {
         matvar->nbytes = 0;
         return err;
     }
 
     if ( matvar->compression == MAT_COMPRESSION_NONE ) {
         switch ( matvar->class_type ) {
             case MAT_C_DOUBLE:
                 nBytes = ReadDoubleData(mat, (double *)data, packed_type, N);
                 break;
             case MAT_C_SINGLE:
                 nBytes = ReadSingleData(mat, (float *)data, packed_type, N);
                 break;
             case MAT_C_INT64:
 #ifdef HAVE_MAT_INT64_T
                 nBytes = ReadInt64Data(mat, (mat_int64_t *)data, packed_type, N);
 #endif
                 break;
             case MAT_C_UINT64:
 #ifdef HAVE_MAT_UINT64_T
                 nBytes = ReadUInt64Data(mat, (mat_uint64_t *)data, packed_type, N);
 #endif
                 break;
             case MAT_C_INT32:
                 nBytes = ReadInt32Data(mat, (mat_int32_t *)data, packed_type, N);
                 break;
             case MAT_C_UINT32:
                 nBytes = ReadUInt32Data(mat, (mat_uint32_t *)data, packed_type, N);
                 break;
             case MAT_C_INT16:
                 nBytes = ReadInt16Data(mat, (mat_int16_t *)data, packed_type, N);
                 break;
             case MAT_C_UINT16:
                 nBytes = ReadUInt16Data(mat, (mat_uint16_t *)data, packed_type, N);
                 break;
             case MAT_C_INT8:
                 nBytes = ReadInt8Data(mat, (mat_int8_t *)data, packed_type, N);
                 break;
             case MAT_C_UINT8:
                 nBytes = ReadUInt8Data(mat, (mat_uint8_t *)data, packed_type, N);
                 break;
             default:
                 break;
         }
         nBytes *= Mat_SizeOf(packed_type);
         /*
          * If the data was in the tag we started on a 4-byte
          * boundary so add 4 to make it an 8-byte
          */
         if ( data_in_tag )
             nBytes += 4;
         if ( (nBytes % 8) != 0 )
             (void)fseek((FILE *)mat->fp, 8 - (nBytes % 8), SEEK_CUR);
 #if HAVE_ZLIB
     } else if ( matvar->compression == MAT_COMPRESSION_ZLIB ) {
         switch ( matvar->class_type ) {
             case MAT_C_DOUBLE:
                 nBytes = ReadCompressedDoubleData(mat, matvar->internal->z, (double *)data,
                                                   packed_type, N);
                 break;
             case MAT_C_SINGLE:
                 nBytes = ReadCompressedSingleData(mat, matvar->internal->z, (float *)data,
                                                   packed_type, N);
                 break;
             case MAT_C_INT64:
 #ifdef HAVE_MAT_INT64_T
                 nBytes = ReadCompressedInt64Data(mat, matvar->internal->z, (mat_int64_t *)data,
                                                  packed_type, N);
 #endif
                 break;
             case MAT_C_UINT64:
 #ifdef HAVE_MAT_UINT64_T
                 nBytes = ReadCompressedUInt64Data(mat, matvar->internal->z, (mat_uint64_t *)data,
                                                   packed_type, N);
 #endif
                 break;
             case MAT_C_INT32:
                 nBytes = ReadCompressedInt32Data(mat, matvar->internal->z, (mat_int32_t *)data,
                                                  packed_type, N);
                 break;
             case MAT_C_UINT32:
                 nBytes = ReadCompressedUInt32Data(mat, matvar->internal->z, (mat_uint32_t *)data,
                                                   packed_type, N);
                 break;
             case MAT_C_INT16:
                 nBytes = ReadCompressedInt16Data(mat, matvar->internal->z, (mat_int16_t *)data,
                                                  packed_type, N);
                 break;
             case MAT_C_UINT16:
                 nBytes = ReadCompressedUInt16Data(mat, matvar->internal->z, (mat_uint16_t *)data,
                                                   packed_type, N);
                 break;
             case MAT_C_INT8:
                 nBytes = ReadCompressedInt8Data(mat, matvar->internal->z, (mat_int8_t *)data,
                                                 packed_type, N);
                 break;
             case MAT_C_UINT8:
                 nBytes = ReadCompressedUInt8Data(mat, matvar->internal->z, (mat_uint8_t *)data,
                                                  packed_type, N);
                 break;
             default:
                 break;
         }
         /*
          * If the data was in the tag we started on a 4-byte
          * boundary so add 4 to make it an 8-byte
          */
         if ( data_in_tag )
             nBytes += 4;
         if ( (nBytes % 8) != 0 )
             err = InflateSkip(mat, matvar->internal->z, 8 - (nBytes % 8), NULL);
 #endif
     }
     return err;
 }
 
 /** @if mat_devman
  * @brief Reads the data of a version 5 MAT variable
  *
  * @ingroup mat_internal
  * @param mat MAT file pointer
  * @param matvar MAT variable pointer to read the data
  * @retval 0 on success
  * @endif
  */
@@ -4453,238 +4453,238 @@ int
 Mat_VarReadData5(mat_t *mat, matvar_t *matvar, void *data, int *start, int *stride, int *edge)
 {
     int err = MATIO_E_NO_ERROR, real_bytes = 0;
-    mat_int32_t tag[2];
+    mat_uint32_t tag[2] = {0, 0};
 #if HAVE_ZLIB
     z_stream z;
 #endif
 
     (void)fseek((FILE *)mat->fp, matvar->internal->datapos, SEEK_SET);
     if ( matvar->compression == MAT_COMPRESSION_NONE ) {
         err = Read(tag, 4, 2, (FILE *)mat->fp, NULL);
         if ( err ) {
             return err;
         }
         if ( mat->byteswap ) {
-            (void)Mat_int32Swap(tag);
-            (void)Mat_int32Swap(tag + 1);
+            (void)Mat_uint32Swap(tag);
+            (void)Mat_uint32Swap(tag + 1);
         }
         matvar->data_type = TYPE_FROM_TAG(tag[0]);
         if ( tag[0] & 0xffff0000 ) { /* Data is packed in the tag */
             (void)fseek((FILE *)mat->fp, -4, SEEK_CUR);
             real_bytes = 4 + (tag[0] >> 16);
         } else {
             real_bytes = 8 + tag[1];
         }
 #if HAVE_ZLIB
     } else if ( matvar->compression == MAT_COMPRESSION_ZLIB ) {
         if ( NULL != matvar->internal->data ) {
             /* Data already read in ReadNextStructField or ReadNextCell */
             if ( matvar->isComplex ) {
                 mat_complex_split_t *ci, *co;
 
                 co = (mat_complex_split_t *)data;
                 ci = (mat_complex_split_t *)matvar->internal->data;
                 err = GetDataSlab(ci->Re, co->Re, matvar->class_type, matvar->data_type,
                                   matvar->dims, start, stride, edge, matvar->rank, matvar->nbytes);
                 if ( MATIO_E_NO_ERROR == err )
                     err = GetDataSlab(ci->Im, co->Im, matvar->class_type, matvar->data_type,
                                       matvar->dims, start, stride, edge, matvar->rank,
                                       matvar->nbytes);
                 return err;
             } else {
                 return GetDataSlab(matvar->internal->data, data, matvar->class_type,
                                    matvar->data_type, matvar->dims, start, stride, edge,
                                    matvar->rank, matvar->nbytes);
             }
         }
 
         err = inflateCopy(&z, matvar->internal->z);
         if ( err != Z_OK ) {
             Mat_Critical("inflateCopy returned error %s", zError(err));
             return MATIO_E_FILE_FORMAT_VIOLATION;
         }
         z.avail_in = 0;
         err = Inflate(mat, &z, tag, 4, NULL);
         if ( err ) {
             return err;
         }
         if ( mat->byteswap ) {
-            (void)Mat_int32Swap(tag);
+            (void)Mat_uint32Swap(tag);
         }
         matvar->data_type = TYPE_FROM_TAG(tag[0]);
         if ( !(tag[0] & 0xffff0000) ) { /* Data is NOT packed in the tag */
             err = Inflate(mat, &z, tag + 1, 4, NULL);
             if ( err ) {
                 return err;
             }
             if ( mat->byteswap ) {
-                (void)Mat_int32Swap(tag + 1);
+                (void)Mat_uint32Swap(tag + 1);
             }
             real_bytes = 8 + tag[1];
         } else {
             real_bytes = 4 + (tag[0] >> 16);
         }
 #endif
     }
     if ( real_bytes % 8 )
         real_bytes += (8 - (real_bytes % 8));
 
     if ( matvar->rank == 2 ) {
         if ( (size_t)stride[0] * (edge[0] - 1) + start[0] + 1 > matvar->dims[0] )
             err = MATIO_E_BAD_ARGUMENT;
         else if ( (size_t)stride[1] * (edge[1] - 1) + start[1] + 1 > matvar->dims[1] )
             err = MATIO_E_BAD_ARGUMENT;
         else if ( matvar->compression == MAT_COMPRESSION_NONE ) {
             if ( matvar->isComplex ) {
                 mat_complex_split_t *complex_data = (mat_complex_split_t *)data;
 
                 ReadDataSlab2(mat, complex_data->Re, matvar->class_type, matvar->data_type,
                               matvar->dims, start, stride, edge);
                 (void)fseek((FILE *)mat->fp, matvar->internal->datapos + real_bytes, SEEK_SET);
                 err = Read(tag, 4, 2, (FILE *)mat->fp, NULL);
                 if ( err ) {
                     return err;
                 }
                 if ( mat->byteswap ) {
-                    (void)Mat_int32Swap(tag);
-                    (void)Mat_int32Swap(tag + 1);
+                    (void)Mat_uint32Swap(tag);
+                    (void)Mat_uint32Swap(tag + 1);
                 }
                 matvar->data_type = TYPE_FROM_TAG(tag[0]);
                 if ( tag[0] & 0xffff0000 ) { /* Data is packed in the tag */
                     (void)fseek((FILE *)mat->fp, -4, SEEK_CUR);
                 }
                 ReadDataSlab2(mat, complex_data->Im, matvar->class_type, matvar->data_type,
                               matvar->dims, start, stride, edge);
             } else {
                 ReadDataSlab2(mat, data, matvar->class_type, matvar->data_type, matvar->dims, start,
                               stride, edge);
             }
         }
 #if HAVE_ZLIB
         else if ( matvar->compression == MAT_COMPRESSION_ZLIB ) {
             if ( matvar->isComplex ) {
                 mat_complex_split_t *complex_data = (mat_complex_split_t *)data;
 
                 ReadCompressedDataSlab2(mat, &z, complex_data->Re, matvar->class_type,
                                         matvar->data_type, matvar->dims, start, stride, edge);
 
                 (void)fseek((FILE *)mat->fp, matvar->internal->datapos, SEEK_SET);
 
                 /* Reset zlib knowledge to before reading real tag */
                 inflateEnd(&z);
                 err = inflateCopy(&z, matvar->internal->z);
                 if ( err != Z_OK ) {
                     Mat_Critical("inflateCopy returned error %s", zError(err));
                     return MATIO_E_FILE_FORMAT_VIOLATION;
                 }
                 InflateSkip(mat, &z, real_bytes, NULL);
                 z.avail_in = 0;
                 err = Inflate(mat, &z, tag, 4, NULL);
                 if ( err ) {
                     return err;
                 }
                 if ( mat->byteswap ) {
-                    (void)Mat_int32Swap(tag);
+                    (void)Mat_uint32Swap(tag);
                 }
                 matvar->data_type = TYPE_FROM_TAG(tag[0]);
                 if ( !(tag[0] & 0xffff0000) ) { /*Data is NOT packed in the tag*/
                     InflateSkip(mat, &z, 4, NULL);
                 }
                 ReadCompressedDataSlab2(mat, &z, complex_data->Im, matvar->class_type,
                                         matvar->data_type, matvar->dims, start, stride, edge);
             } else {
                 ReadCompressedDataSlab2(mat, &z, data, matvar->class_type, matvar->data_type,
                                         matvar->dims, start, stride, edge);
             }
             inflateEnd(&z);
         }
 #endif
     } else {
         if ( matvar->compression == MAT_COMPRESSION_NONE ) {
             if ( matvar->isComplex ) {
                 mat_complex_split_t *complex_data = (mat_complex_split_t *)data;
 
                 ReadDataSlabN(mat, complex_data->Re, matvar->class_type, matvar->data_type,
                               matvar->rank, matvar->dims, start, stride, edge);
 
                 (void)fseek((FILE *)mat->fp, matvar->internal->datapos + real_bytes, SEEK_SET);
                 err = Read(tag, 4, 2, (FILE *)mat->fp, NULL);
                 if ( err ) {
                     return err;
                 }
                 if ( mat->byteswap ) {
-                    (void)Mat_int32Swap(tag);
-                    (void)Mat_int32Swap(tag + 1);
+                    (void)Mat_uint32Swap(tag);
+                    (void)Mat_uint32Swap(tag + 1);
                 }
                 matvar->data_type = TYPE_FROM_TAG(tag[0]);
                 if ( tag[0] & 0xffff0000 ) { /* Data is packed in the tag */
                     (void)fseek((FILE *)mat->fp, -4, SEEK_CUR);
                 }
                 ReadDataSlabN(mat, complex_data->Im, matvar->class_type, matvar->data_type,
                               matvar->rank, matvar->dims, start, stride, edge);
             } else {
                 ReadDataSlabN(mat, data, matvar->class_type, matvar->data_type, matvar->rank,
                               matvar->dims, start, stride, edge);
             }
         }
 #if HAVE_ZLIB
         else if ( matvar->compression == MAT_COMPRESSION_ZLIB ) {
             if ( matvar->isComplex ) {
                 mat_complex_split_t *complex_data = (mat_complex_split_t *)data;
 
                 ReadCompressedDataSlabN(mat, &z, complex_data->Re, matvar->class_type,
                                         matvar->data_type, matvar->rank, matvar->dims, start,
                                         stride, edge);
 
                 (void)fseek((FILE *)mat->fp, matvar->internal->datapos, SEEK_SET);
                 /* Reset zlib knowledge to before reading real tag */
                 inflateEnd(&z);
                 err = inflateCopy(&z, matvar->internal->z);
                 if ( err != Z_OK ) {
                     Mat_Critical("inflateCopy returned error %s", zError(err));
                     return MATIO_E_FILE_FORMAT_VIOLATION;
                 }
                 InflateSkip(mat, &z, real_bytes, NULL);
                 z.avail_in = 0;
                 err = Inflate(mat, &z, tag, 4, NULL);
                 if ( err ) {
                     return err;
                 }
                 if ( mat->byteswap ) {
-                    (void)Mat_int32Swap(tag);
+                    (void)Mat_uint32Swap(tag);
                 }
                 matvar->data_type = TYPE_FROM_TAG(tag[0]);
                 if ( !(tag[0] & 0xffff0000) ) { /*Data is NOT packed in the tag*/
                     InflateSkip(mat, &z, 4, NULL);
                 }
                 ReadCompressedDataSlabN(mat, &z, complex_data->Im, matvar->class_type,
                                         matvar->data_type, matvar->rank, matvar->dims, start,
                                         stride, edge);
             } else {
                 ReadCompressedDataSlabN(mat, &z, data, matvar->class_type, matvar->data_type,
                                         matvar->rank, matvar->dims, start, stride, edge);
             }
             inflateEnd(&z);
         }
 #endif
     }
     if ( err == MATIO_E_NO_ERROR ) {
         matvar->data_type = ClassType2DataType(matvar->class_type);
         matvar->data_size = Mat_SizeOfClass(matvar->class_type);
     }
     return err;
 }
 
 /** @brief Reads a subset of a MAT variable using a 1-D indexing
  *
  * Reads data from a MAT variable using a linear (1-D) indexing mode. The
  * variable must have been read by Mat_VarReadInfo.
  * @ingroup MAT
  * @param mat MAT file to read data from
  * @param matvar MAT variable information
  * @param data pointer to store data in (must be pre-allocated)
  * @param start starting index
  * @param stride stride of data
  * @param edge number of elements to read
  * @retval 0 on success
  */
@@ -4692,170 +4692,170 @@ int
 Mat_VarReadDataLinear5(mat_t *mat, matvar_t *matvar, void *data, int start, int stride, int edge)
 {
     int err = MATIO_E_NO_ERROR, real_bytes = 0;
-    mat_int32_t tag[2];
+    mat_uint32_t tag[2] = {0, 0};
 #if HAVE_ZLIB
     z_stream z;
 #endif
     size_t nelems = 1;
 
     if ( mat->version == MAT_FT_MAT4 )
         return -1;
     (void)fseek((FILE *)mat->fp, matvar->internal->datapos, SEEK_SET);
     if ( matvar->compression == MAT_COMPRESSION_NONE ) {
         err = Read(tag, 4, 2, (FILE *)mat->fp, NULL);
         if ( err ) {
             return err;
         }
         if ( mat->byteswap ) {
-            (void)Mat_int32Swap(tag);
-            (void)Mat_int32Swap(tag + 1);
+            (void)Mat_uint32Swap(tag);
+            (void)Mat_uint32Swap(tag + 1);
         }
         matvar->data_type = (enum matio_types)(tag[0] & 0x000000ff);
         if ( tag[0] & 0xffff0000 ) { /* Data is packed in the tag */
             (void)fseek((FILE *)mat->fp, -4, SEEK_CUR);
             real_bytes = 4 + (tag[0] >> 16);
         } else {
             real_bytes = 8 + tag[1];
         }
 #if HAVE_ZLIB
     } else if ( matvar->compression == MAT_COMPRESSION_ZLIB ) {
         if ( NULL != matvar->internal->data ) {
             /* Data already read in ReadNextStructField or ReadNextCell */
             if ( matvar->isComplex ) {
                 mat_complex_split_t *ci, *co;
 
                 co = (mat_complex_split_t *)data;
                 ci = (mat_complex_split_t *)matvar->internal->data;
                 err = GetDataLinear(ci->Re, co->Re, matvar->class_type, matvar->data_type, start,
                                     stride, edge);
                 if ( err == MATIO_E_NO_ERROR )
                     err = GetDataLinear(ci->Im, co->Im, matvar->class_type, matvar->data_type,
                                         start, stride, edge);
                 return err;
             } else {
                 return GetDataLinear(matvar->internal->data, data, matvar->class_type,
                                      matvar->data_type, start, stride, edge);
             }
         }
 
         matvar->internal->z->avail_in = 0;
         err = inflateCopy(&z, matvar->internal->z);
         if ( err != Z_OK ) {
             Mat_Critical("inflateCopy returned error %s", zError(err));
             return MATIO_E_FILE_FORMAT_VIOLATION;
         }
         err = Inflate(mat, &z, tag, 4, NULL);
         if ( err ) {
             return err;
         }
         if ( mat->byteswap ) {
-            (void)Mat_int32Swap(tag);
-            (void)Mat_int32Swap(tag + 1);
+            (void)Mat_uint32Swap(tag);
+            (void)Mat_uint32Swap(tag + 1);
         }
         matvar->data_type = (enum matio_types)(tag[0] & 0x000000ff);
         if ( !(tag[0] & 0xffff0000) ) { /* Data is NOT packed in the tag */
             err = Inflate(mat, &z, tag + 1, 4, NULL);
             if ( err ) {
                 return err;
             }
             if ( mat->byteswap ) {
-                (void)Mat_int32Swap(tag + 1);
+                (void)Mat_uint32Swap(tag + 1);
             }
             real_bytes = 8 + tag[1];
         } else {
             real_bytes = 4 + (tag[0] >> 16);
         }
 #endif
     }
     if ( real_bytes % 8 )
         real_bytes += (8 - (real_bytes % 8));
 
     err = Mat_MulDims(matvar, &nelems);
     if ( err ) {
         Mat_Critical("Integer multiplication overflow");
         return err;
     }
 
     if ( (size_t)stride * (edge - 1) + start + 1 > nelems ) {
         err = MATIO_E_BAD_ARGUMENT;
     } else if ( matvar->compression == MAT_COMPRESSION_NONE ) {
         if ( matvar->isComplex ) {
             mat_complex_split_t *complex_data = (mat_complex_split_t *)data;
 
             ReadDataSlab1(mat, complex_data->Re, matvar->class_type, matvar->data_type, start,
                           stride, edge);
             (void)fseek((FILE *)mat->fp, matvar->internal->datapos + real_bytes, SEEK_SET);
             err = Read(tag, 4, 2, (FILE *)mat->fp, NULL);
             if ( err ) {
                 return err;
             }
             if ( mat->byteswap ) {
-                (void)Mat_int32Swap(tag);
-                (void)Mat_int32Swap(tag + 1);
+                (void)Mat_uint32Swap(tag);
+                (void)Mat_uint32Swap(tag + 1);
             }
             matvar->data_type = (enum matio_types)(tag[0] & 0x000000ff);
             if ( tag[0] & 0xffff0000 ) { /* Data is packed in the tag */
                 (void)fseek((FILE *)mat->fp, -4, SEEK_CUR);
             }
             ReadDataSlab1(mat, complex_data->Im, matvar->class_type, matvar->data_type, start,
                           stride, edge);
         } else {
             ReadDataSlab1(mat, data, matvar->class_type, matvar->data_type, start, stride, edge);
         }
 #if HAVE_ZLIB
     } else if ( matvar->compression == MAT_COMPRESSION_ZLIB ) {
         if ( matvar->isComplex ) {
             mat_complex_split_t *complex_data = (mat_complex_split_t *)data;
 
             ReadCompressedDataSlab1(mat, &z, complex_data->Re, matvar->class_type,
                                     matvar->data_type, start, stride, edge);
 
             (void)fseek((FILE *)mat->fp, matvar->internal->datapos, SEEK_SET);
 
             /* Reset zlib knowledge to before reading real tag */
             inflateEnd(&z);
             err = inflateCopy(&z, matvar->internal->z);
             if ( err != Z_OK ) {
                 Mat_Critical("inflateCopy returned error %s", zError(err));
                 return MATIO_E_FILE_FORMAT_VIOLATION;
             }
             InflateSkip(mat, &z, real_bytes, NULL);
             z.avail_in = 0;
             err = Inflate(mat, &z, tag, 4, NULL);
             if ( err ) {
                 return err;
             }
             if ( mat->byteswap ) {
-                (void)Mat_int32Swap(tag);
+                (void)Mat_uint32Swap(tag);
             }
             matvar->data_type = (enum matio_types)(tag[0] & 0x000000ff);
             if ( !(tag[0] & 0xffff0000) ) { /*Data is NOT packed in the tag*/
                 InflateSkip(mat, &z, 4, NULL);
             }
             ReadCompressedDataSlab1(mat, &z, complex_data->Im, matvar->class_type,
                                     matvar->data_type, start, stride, edge);
         } else {
             ReadCompressedDataSlab1(mat, &z, data, matvar->class_type, matvar->data_type, start,
                                     stride, edge);
         }
         inflateEnd(&z);
 #endif
     }
 
     matvar->data_type = ClassType2DataType(matvar->class_type);
     matvar->data_size = Mat_SizeOfClass(matvar->class_type);
 
     return err;
 }
 
 /** @if mat_devman
  * @brief Writes a matlab variable to a version 5 matlab file
  *
  * @ingroup mat_internal
  * @param mat MAT file pointer
  * @param matvar pointer to the mat variable
  * @param compress option to compress the variable
  *                 (only works for numeric types)
  * @retval 0 on success
  * @endif
  */
