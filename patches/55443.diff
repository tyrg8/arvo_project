commit e8da62c6ab890c6a27762f9285441afc6920e558
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Thu Feb 9 14:52:13 2023 +0000

    oss-fuzz 55443: Dangling reference in extreme out-of-memory condition
    
    If we've exhausted memory to the extent that we cannot even run the Postscript
    error handler properly, we can end up with references to the arrays that
    contain the record of the stacks' content in $error lasting until the final
    garbage collection, with the arrays themselves having been freed by the
    end-of-job restore.
    
    So explicitly remove those references and clear the operand stack before we
    tackle the final stages of shutting down.

diff --git a/psi/imain.c b/psi/imain.c
index 265859321..4ff96afd0 100644
--- a/psi/imain.c
+++ b/psi/imain.c
@@ -1,68 +1,68 @@
-/* Copyright (C) 2001-2021 Artifex Software, Inc.
+/* Copyright (C) 2001-2023 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 
 /* Common support for interpreter front ends */
 
 
 #include "malloc_.h"
 #include "memory_.h"
 #include "string_.h"
 #include "ghost.h"
 #include "gp.h"
 #include "gscdefs.h"            /* for gs_init_file */
 #include "gslib.h"
 #include "gsmatrix.h"           /* for gxdevice.h */
 #include "gsutil.h"             /* for bytes_compare */
 #include "gspaint.h"		/* for gs_erasepage */
 #include "gxdevice.h"
 #include "gxdevsop.h"		/* for gxdso_* enums */
 #include "gxclpage.h"
 #include "gdevprn.h"
 #include "gxalloc.h"
 #include "gxiodev.h"            /* for iodev struct */
 #include "gzstate.h"
 #include "ierrors.h"
 #include "oper.h"
 #include "iconf.h"              /* for gs_init_* imports */
 #include "idebug.h"
 #include "iddict.h"
 #include "iname.h"              /* for name_init */
 #include "dstack.h"
 #include "estack.h"
 #include "ostack.h"             /* put here for files.h */
 #include "stream.h"             /* for files.h */
 #include "files.h"
 #include "ialloc.h"
 #include "iinit.h"
 #include "strimpl.h"            /* for sfilter.h */
 #include "sfilter.h"            /* for iscan.h */
 #include "iscan.h"
 #include "main.h"
 #include "store.h"
 #include "isave.h"              /* for prototypes */
 #include "interp.h"
 #include "ivmspace.h"
 #include "idisp.h"              /* for setting display device callback */
 #include "iplugin.h"
 #include "zfile.h"
 
 #include "valgrind.h"
 
 /* ------ Exported data ------ */
 
 /** using backpointers retrieve minst from any memory pointer
  *
  */
@@ -1230,201 +1230,211 @@ int
 gs_main_finit(gs_main_instance * minst, int exit_status, int env_code)
 {
     i_ctx_t *i_ctx_p = minst->i_ctx_p;
     gs_dual_memory_t dmem = {0};
     int exit_code;
     ref error_object;
     char *tempnames = NULL;
     gs_lib_ctx_core_t *core;
 
     /* NB: need to free gs_name_table
      */
 
     /*
      * Previous versions of this code closed the devices in the
      * device list here.  Since these devices are now prototypes,
      * they cannot be opened, so they do not need to be closed;
      * alloc_restore_all will close dynamically allocated devices.
      */
     tempnames = gs_main_tempnames(minst);
 
     /* by the time we get here, we *must* avoid any random redefinitions of
      * operators etc, so we push systemdict onto the top of the dict stack.
      * We do this in C to avoid running into any other re-defininitions in the
      * Postscript world.
      */
     gs_finit_push_systemdict(i_ctx_p);
 
     /* We have to disable BGPrint before we call interp_reclaim() to prevent the
      * parent rendering thread initialising for the next page, whilst we are
      * removing objects it may want to access - for example, the I/O device table.
      * We also have to mess with the BeginPage/EndPage procs so that we don't
      * trigger a spurious extra page to be emitted.
      */
     if (minst->init_done >= 2) {
         gs_main_run_string(minst,
             "/BGPrint /GetDeviceParam .special_op \
             {{ <</BeginPage {pop} /EndPage {pop pop //false } \
               /BGPrint false /NumRenderingThreads 0>> setpagedevice} if} if \
               serverdict /.jobsavelevel get 0 eq {/quit} {/stop} ifelse \
               .systemvar exec",
             0 , &exit_code, &error_object);
     }
 
     /*
      * Close the "main" device, because it may need to write out
      * data before destruction. pdfwrite needs so.
      */
     if (minst->init_done >= 2) {
         int code = 0;
 
         if (idmemory->reclaim != 0) {
+            /* In extreme error conditions, these references can persist, despite the
+             * arrays themselves having been restored away.
+             */
+            gs_main_run_string(minst,
+                "$error /dstack undef \
+                 $error /estack undef \
+                 $error /ostack undef",
+                 0 , &exit_code, &error_object);
+
+            ref_stack_clear(&o_stack);
             code = interp_reclaim(&minst->i_ctx_p, avm_global);
 
             /* We ignore gs_error_VMerror because it comes from gs_vmreclaim()
             calling context_state_load(), and we don't seem to depend on the
             missing fields. */
             if (code == gs_error_VMerror) {
                 if (exit_status == 0 || exit_status == gs_error_Quit) {
                     exit_status = gs_error_VMerror;
                 }
             }
             else if (code < 0) {
                 ref error_name;
                 if (tempnames)
                     free(tempnames);
 
                 if (gs_errorname(i_ctx_p, code, &error_name) >= 0) {
                     char err_str[32] = {0};
                     name_string_ref(imemory, &error_name, &error_name);
                     memcpy(err_str, error_name.value.const_bytes, r_size(&error_name));
                     emprintf2(imemory, "ERROR: %s (%d) reclaiming the memory while the interpreter finalization.\n", err_str, code);
                 }
                 else {
                     emprintf1(imemory, "UNKNOWN ERROR %d reclaiming the memory while the interpreter finalization.\n", code);
                 }
 #ifdef MEMENTO
                 if (Memento_squeezing() && code != gs_error_VMerror ) return gs_error_Fatal;
 #endif
                 return gs_error_Fatal;
             }
             i_ctx_p = minst->i_ctx_p; /* interp_reclaim could change it. */
         }
 
         if (i_ctx_p->pgs != NULL && i_ctx_p->pgs->device != NULL &&
             gx_device_is_null(i_ctx_p->pgs->device)) {
             /* if the job replaced the device with the nulldevice, we we need to grestore
                away that device, so the block below can properly dispense
                with the default device.
              */
             int code = gs_grestoreall(i_ctx_p->pgs);
             if (code < 0) {
                 free(tempnames);
                 return_error(gs_error_Fatal);
             }
         }
 
         if (i_ctx_p->pgs != NULL && i_ctx_p->pgs->device != NULL) {
             gx_device *pdev = i_ctx_p->pgs->device;
             const char * dname = pdev->dname;
             gs_gc_root_t dev_root;
             gs_gc_root_t *dev_root_ptr = &dev_root;
             /* There is a chance that, during the call to gs_main_run_string(), the interpreter may
              * decide to call the garbager - the device is in gc memory, and the only reference to it
              * (in the gstate) has been removed, thus it can be destroyed by the garbager.
              * Counter-intuitively, adjusting the reference count makes not difference to that.
              * Register the device as a gc 'root' so it will be implicitely marked by garbager, and
              * and thus surive until control returns here.
              */
             if (gs_register_struct_root(pdev->memory, &dev_root_ptr, (void **)&pdev, "gs_main_finit") < 0) {
                 free(tempnames);
                 return_error(gs_error_Fatal);
             }
 
             /* make sure device doesn't isn't freed by .uninstalldevice */
             rc_adjust(pdev, 1, "gs_main_finit");
             /* deactivate the device just before we close it for the last time */
             gs_main_run_string(minst,
                 /* we need to do the 'quit' so we don't loop for input (double quit) */
                 ".uninstallpagedevice serverdict \
                 /.jobsavelevel get 0 eq {/quit} {/stop} ifelse .systemvar exec",
                 0 , &exit_code, &error_object);
             code = gs_closedevice(pdev);
             if (code < 0) {
                 ref error_name;
                 if (gs_errorname(i_ctx_p, code, &error_name) >= 0) {
                     char err_str[32] = {0};
                     name_string_ref(imemory, &error_name, &error_name);
                     memcpy(err_str, error_name.value.const_bytes, r_size(&error_name));
                     emprintf3(imemory, "ERROR: %s (%d) on closing %s device.\n", err_str, code, dname);
                 }
                 else {
                     emprintf2(imemory, "UNKNOWN ERROR %d closing %s device.\n", code, dname);
                }
             }
             gs_unregister_root(pdev->memory, dev_root_ptr, "gs_main_finit");
             rc_decrement(pdev, "gs_main_finit");                /* device might be freed */
             if (exit_status == 0 || exit_status == gs_error_Quit)
                 exit_status = code;
         }
 
       /* Flush stdout and stderr */
       gs_main_run_string(minst,
         "(%stdout) (w) file closefile (%stderr) (w) file closefile \
         serverdict /.jobsavelevel get 0 eq {/quit} {/stop} ifelse .systemexec \
           systemdict /savedinitialgstate .forceundef",
         0 , &exit_code, &error_object);
     }
     gp_readline_finit(minst->readline_data);
     gs_free_object(minst->heap, minst->saved_pages_initial_arg, "gs_main_finit");
     i_ctx_p = minst->i_ctx_p;		/* get current interp context */
     if (gs_debug_c(':')) {
         print_resource_usage(minst, &gs_imemory, "Final");
         dmprintf1(minst->heap, "%% Exiting instance "PRI_INTPTR"\n", (intptr_t)minst);
     }
     /* Do the equivalent of a restore "past the bottom". */
     /* This will release all memory, close all open files, etc. */
     if (minst->init_done >= 1) {
         gs_memory_t *mem_raw = i_ctx_p->memory.current->non_gc_memory;
         i_plugin_holder *h = i_ctx_p->plugin_list;
 
         dmem = *idmemory;
         env_code = alloc_restore_all(i_ctx_p);
         if (env_code < 0)
             emprintf1(mem_raw,
                       "ERROR %d while the final restore. See gs/psi/ierrors.h for code explanation.\n",
                       env_code);
         i_iodev_finit(&dmem);
         i_plugin_finit(mem_raw, h);
     }
 
     /* clean up redirected stdout */
     core = minst->heap->gs_lib_ctx->core;
     if (core->fstdout2
         && (gp_get_file(core->fstdout2) != core->fstdout)
         && (gp_get_file(core->fstdout2) != core->fstderr)) {
         gp_fclose(core->fstdout2);
         core->fstdout2 = NULL;
     }
 
     minst->heap->gs_lib_ctx->core->stdout_is_redirected = 0;
     minst->heap->gs_lib_ctx->core->stdout_to_stderr = 0;
     /* remove any temporary files, after ghostscript has closed files */
     if (tempnames) {
         char *p = tempnames;
         while (*p) {
             gp_unlink(minst->heap, p);
             p += strlen(p) + 1;
         }
         free(tempnames);
     }
     gs_lib_finit(exit_status, env_code, minst->heap);
 
     set_lib_path_length(minst, 0);
     gs_free_object(minst->heap, minst->lib_path.container.value.refs, "lib_path array");
     if (minst->init_done == 0 && i_ctx_p) {
         /* This fixes leak if memento forces failure in gs_main_init1(). */
         dmem = *idmemory;
     }
     ialloc_finit(&dmem);
     return exit_status;
 }
