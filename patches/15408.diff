commit ce11c281ad1de25a815d49a29043d127cbc6354d
Author: Jouni Malinen <j@w1.fi>
Date:   Sat Jun 22 18:11:24 2019 +0300

    TLS: Fix X.509v3 BasicConstraints parsing
    
    Handling of the optional pathLenConstraint after cA was not done
    properly. The position after cA needs to be compared to the end of the
    SEQUENCE, not the end of the available buffer, to determine whether the
    optional pathLenConstraint is present. In addition, when parsing
    pathLenConstraint, the length of the remaining buffer was calculated
    incorrectly by not subtracting the length of the header fields needed
    for cA. This could result in reading couple of octets beyond the end of
    the buffer before rejecting the ASN.1 data as invalid.
    
    Credit to OSS-Fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=15408
    Signed-off-by: Jouni Malinen <j@w1.fi>

diff --git a/src/tls/x509v3.c b/src/tls/x509v3.c
index d74b3a275..71ac6b95b 100644
--- a/src/tls/x509v3.c
+++ b/src/tls/x509v3.c
@@ -812,83 +812,85 @@ static int x509_parse_ext_key_usage(struct x509_certificate *cert,
 static int x509_parse_ext_basic_constraints(struct x509_certificate *cert,
 					    const u8 *pos, size_t len)
 {
 	struct asn1_hdr hdr;
 	unsigned long value;
 	size_t left;
+	const u8 *end_seq;
 
 	/*
 	 * BasicConstraints ::= SEQUENCE {
 	 * cA                      BOOLEAN DEFAULT FALSE,
 	 * pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
 	 */
 
 	if (asn1_get_next(pos, len, &hdr) < 0 ||
 	    hdr.class != ASN1_CLASS_UNIVERSAL ||
 	    hdr.tag != ASN1_TAG_SEQUENCE) {
 		wpa_printf(MSG_DEBUG, "X509: Expected SEQUENCE in "
 			   "BasicConstraints; found %d tag 0x%x",
 			   hdr.class, hdr.tag);
 		return -1;
 	}
 
 	cert->extensions_present |= X509_EXT_BASIC_CONSTRAINTS;
 
 	if (hdr.length == 0)
 		return 0;
 
+	end_seq = hdr.payload + hdr.length;
 	if (asn1_get_next(hdr.payload, hdr.length, &hdr) < 0 ||
 	    hdr.class != ASN1_CLASS_UNIVERSAL) {
 		wpa_printf(MSG_DEBUG, "X509: Failed to parse "
 			   "BasicConstraints");
 		return -1;
 	}
 
 	if (hdr.tag == ASN1_TAG_BOOLEAN) {
 		if (hdr.length != 1) {
 			wpa_printf(MSG_DEBUG, "X509: Unexpected "
 				   "Boolean length (%u) in BasicConstraints",
 				   hdr.length);
 			return -1;
 		}
 		cert->ca = hdr.payload[0];
 
-		if (hdr.length == pos + len - hdr.payload) {
+		pos = hdr.payload + hdr.length;
+		if (pos >= end_seq) {
+			/* No optional pathLenConstraint */
 			wpa_printf(MSG_DEBUG, "X509: BasicConstraints - cA=%d",
 				   cert->ca);
 			return 0;
 		}
-
-		if (asn1_get_next(hdr.payload + hdr.length, len - hdr.length,
-				  &hdr) < 0 ||
+		if (asn1_get_next(pos, end_seq - pos, &hdr) < 0 ||
 		    hdr.class != ASN1_CLASS_UNIVERSAL) {
 			wpa_printf(MSG_DEBUG, "X509: Failed to parse "
 				   "BasicConstraints");
 			return -1;
 		}
 	}
 
 	if (hdr.tag != ASN1_TAG_INTEGER) {
 		wpa_printf(MSG_DEBUG, "X509: Expected INTEGER in "
 			   "BasicConstraints; found class %d tag 0x%x",
 			   hdr.class, hdr.tag);
 		return -1;
 	}
 
 	pos = hdr.payload;
 	left = hdr.length;
 	value = 0;
 	while (left) {
 		value <<= 8;
 		value |= *pos++;
 		left--;
 	}
 
 	cert->path_len_constraint = value;
 	cert->extensions_present |= X509_EXT_PATH_LEN_CONSTRAINT;
 
 	wpa_printf(MSG_DEBUG, "X509: BasicConstraints - cA=%d "
 		   "pathLenConstraint=%lu",
 		   cert->ca, cert->path_len_constraint);
 
 	return 0;
 }
