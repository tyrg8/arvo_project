commit 442ef6300826816c115462f19df4c168a04415d5
Author: Idan Horowitz <idan.horowitz@gmail.com>
Date:   Sat Jun 5 19:21:15 2021 +0300

    LibJS: Add the global escape() & unescape() methods

diff --git a/Userland/Libraries/LibJS/Runtime/CommonPropertyNames.h b/Userland/Libraries/LibJS/Runtime/CommonPropertyNames.h
index 2f97beebb8..6a23ea170d 100644
--- a/Userland/Libraries/LibJS/Runtime/CommonPropertyNames.h
+++ b/Userland/Libraries/LibJS/Runtime/CommonPropertyNames.h
@@ -12,261 +12,263 @@
 namespace JS {
 
 #define ENUMERATE_STANDARD_PROPERTY_NAMES(P) \
     P(BYTES_PER_ELEMENT)                     \
     P(BigInt)                                \
     P(Boolean)                               \
     P(E)                                     \
     P(EPSILON)                               \
     P(Infinity)                              \
     P(JSON)                                  \
     P(LN10)                                  \
     P(LN2)                                   \
     P(LOG10E)                                \
     P(LOG2E)                                 \
     P(MAX_SAFE_INTEGER)                      \
     P(MAX_VALUE)                             \
     P(MIN_SAFE_INTEGER)                      \
     P(MIN_VALUE)                             \
     P(Math)                                  \
     P(NEGATIVE_INFINITY)                     \
     P(NaN)                                   \
     P(Number)                                \
     P(PI)                                    \
     P(POSITIVE_INFINITY)                     \
     P(Proxy)                                 \
     P(Reflect)                               \
     P(RegExp)                                \
     P(SQRT1_2)                               \
     P(SQRT2)                                 \
     P(String)                                \
     P(Symbol)                                \
     P(UTC)                                   \
     P(abs)                                   \
     P(acos)                                  \
     P(acosh)                                 \
     P(all)                                   \
     P(allSettled)                            \
     P(anchor)                                \
     P(any)                                   \
     P(apply)                                 \
     P(arguments)                             \
     P(asIntN)                                \
     P(asUintN)                               \
     P(asin)                                  \
     P(asinh)                                 \
     P(assert)                                \
     P(at)                                    \
     P(atan)                                  \
     P(atan2)                                 \
     P(atanh)                                 \
     P(big)                                   \
     P(bind)                                  \
     P(blink)                                 \
     P(bold)                                  \
     P(buffer)                                \
     P(byteLength)                            \
     P(byteOffset)                            \
     P(call)                                  \
     P(callee)                                \
     P(cbrt)                                  \
     P(ceil)                                  \
     P(charAt)                                \
     P(charCodeAt)                            \
     P(clear)                                 \
     P(clz32)                                 \
     P(concat)                                \
     P(configurable)                          \
     P(console)                               \
     P(construct)                             \
     P(constructor)                           \
     P(cos)                                   \
     P(cosh)                                  \
     P(count)                                 \
     P(countReset)                            \
     P(create)                                \
     P(debug)                                 \
     P(decodeURI)                             \
     P(decodeURIComponent)                    \
     P(defineProperties)                      \
     P(defineProperty)                        \
     P(deleteProperty)                        \
     P(description)                           \
     P(done)                                  \
     P(dotAll)                                \
     P(encodeURI)                             \
     P(encodeURIComponent)                    \
     P(endsWith)                              \
     P(entries)                               \
     P(enumerable)                            \
     P(error)                                 \
+    P(escape)                                \
     P(eval)                                  \
     P(every)                                 \
     P(exec)                                  \
     P(exp)                                   \
     P(expm1)                                 \
     P(fill)                                  \
     P(filter)                                \
     P(finally)                               \
     P(find)                                  \
     P(findIndex)                             \
     P(fixed)                                 \
     P(flags)                                 \
     P(flat)                                  \
     P(floor)                                 \
     P(fontcolor)                             \
     P(fontsize)                              \
     P(forEach)                               \
     P(freeze)                                \
     P(from)                                  \
     P(fromCharCode)                          \
     P(fround)                                \
     P(gc)                                    \
     P(get)                                   \
     P(getDate)                               \
     P(getDay)                                \
     P(getFullYear)                           \
     P(getHours)                              \
     P(getMilliseconds)                       \
     P(getMinutes)                            \
     P(getMonth)                              \
     P(getOwnPropertyDescriptor)              \
     P(getOwnPropertyNames)                   \
     P(getPrototypeOf)                        \
     P(getSeconds)                            \
     P(getTime)                               \
     P(getUTCDate)                            \
     P(getUTCDay)                             \
     P(getUTCFullYear)                        \
     P(getUTCHours)                           \
     P(getUTCMilliseconds)                    \
     P(getUTCMinutes)                         \
     P(getUTCMonth)                           \
     P(getUTCSeconds)                         \
     P(getYear)                               \
     P(global)                                \
     P(globalThis)                            \
     P(groups)                                \
     P(has)                                   \
     P(hasOwn)                                \
     P(hasOwnProperty)                        \
     P(hypot)                                 \
     P(ignoreCase)                            \
     P(imul)                                  \
     P(includes)                              \
     P(index)                                 \
     P(indexOf)                               \
     P(info)                                  \
     P(input)                                 \
     P(is)                                    \
     P(isArray)                               \
     P(isExtensible)                          \
     P(isFinite)                              \
     P(isFrozen)                              \
     P(isInteger)                             \
     P(isNaN)                                 \
     P(isPrototypeOf)                         \
     P(isSafeInteger)                         \
     P(isSealed)                              \
     P(isView)                                \
     P(italics)                               \
     P(join)                                  \
     P(keyFor)                                \
     P(keys)                                  \
     P(lastIndex)                             \
     P(lastIndexOf)                           \
     P(length)                                \
     P(link)                                  \
     P(log)                                   \
     P(log1p)                                 \
     P(log2)                                  \
     P(log10)                                 \
     P(map)                                   \
     P(max)                                   \
     P(message)                               \
     P(min)                                   \
     P(multiline)                             \
     P(name)                                  \
     P(next)                                  \
     P(now)                                   \
     P(of)                                    \
     P(ownKeys)                               \
     P(padEnd)                                \
     P(padStart)                              \
     P(parse)                                 \
     P(parseFloat)                            \
     P(parseInt)                              \
     P(pop)                                   \
     P(pow)                                   \
     P(preventExtensions)                     \
     P(propertyIsEnumerable)                  \
     P(prototype)                             \
     P(push)                                  \
     P(race)                                  \
     P(random)                                \
     P(raw)                                   \
     P(reduce)                                \
     P(reduceRight)                           \
     P(reject)                                \
     P(repeat)                                \
     P(resolve)                               \
     P(reverse)                               \
     P(round)                                 \
     P(seal)                                  \
     P(set)                                   \
     P(setFullYear)                           \
     P(setHours)                              \
     P(setMilliseconds)                       \
     P(setMinutes)                            \
     P(setPrototypeOf)                        \
     P(setSeconds)                            \
     P(setYear)                               \
     P(shift)                                 \
     P(sign)                                  \
     P(sin)                                   \
     P(sinh)                                  \
     P(slice)                                 \
     P(small)                                 \
     P(some)                                  \
     P(sort)                                  \
     P(source)                                \
     P(splice)                                \
     P(sqrt)                                  \
     P(startsWith)                            \
     P(sticky)                                \
     P(strike)                                \
     P(stringify)                             \
     P(sub)                                   \
     P(substr)                                \
     P(substring)                             \
     P(sup)                                   \
     P(tan)                                   \
     P(tanh)                                  \
     P(test)                                  \
     P(then)                                  \
     P(toDateString)                          \
     P(toGMTString)                           \
     P(toISOString)                           \
     P(toJSON)                                \
     P(toLocaleDateString)                    \
     P(toLocaleString)                        \
     P(toLocaleTimeString)                    \
     P(toLowerCase)                           \
     P(toString)                              \
     P(toTimeString)                          \
     P(toUpperCase)                           \
     P(toUTCString)                           \
     P(trace)                                 \
     P(trim)                                  \
     P(trimEnd)                               \
     P(trimLeft)                              \
     P(trimRight)                             \
     P(trimStart)                             \
     P(trunc)                                 \
     P(undefined)                             \
+    P(unescape)                              \
     P(unicode)                               \
     P(unshift)                               \
     P(value)                                 \
     P(valueOf)                               \
     P(values)                                \
     P(warn)                                  \
     P(writable)
diff --git a/Userland/Libraries/LibJS/Runtime/GlobalObject.cpp b/Userland/Libraries/LibJS/Runtime/GlobalObject.cpp
index a38489aae5..286ba65815 100644
--- a/Userland/Libraries/LibJS/Runtime/GlobalObject.cpp
+++ b/Userland/Libraries/LibJS/Runtime/GlobalObject.cpp
@@ -69,80 +69,82 @@ GlobalObject::GlobalObject()
 void GlobalObject::initialize_global_object()
 {
     auto& vm = this->vm();
 
     ensure_shape_is_unique();
 
     // These are done first since other prototypes depend on their presence.
     m_empty_object_shape = heap().allocate_without_global_object<Shape>(*this);
     m_object_prototype = heap().allocate_without_global_object<ObjectPrototype>(*this);
     m_function_prototype = heap().allocate_without_global_object<FunctionPrototype>(*this);
 
     m_new_object_shape = vm.heap().allocate_without_global_object<Shape>(*this);
     m_new_object_shape->set_prototype_without_transition(m_object_prototype);
 
     m_new_script_function_prototype_object_shape = vm.heap().allocate_without_global_object<Shape>(*this);
     m_new_script_function_prototype_object_shape->set_prototype_without_transition(m_object_prototype);
     m_new_script_function_prototype_object_shape->add_property_without_transition(vm.names.constructor, Attribute::Writable | Attribute::Configurable);
 
     static_cast<FunctionPrototype*>(m_function_prototype)->initialize(*this);
     static_cast<ObjectPrototype*>(m_object_prototype)->initialize(*this);
 
     set_prototype(m_object_prototype);
 
 #define __JS_ENUMERATE(ClassName, snake_name, PrototypeName, ConstructorName, ArrayType) \
     if (!m_##snake_name##_prototype)                                                     \
         m_##snake_name##_prototype = heap().allocate<PrototypeName>(*this, *this);
     JS_ENUMERATE_BUILTIN_TYPES
 #undef __JS_ENUMERATE
 
 #define __JS_ENUMERATE(ClassName, snake_name) \
     if (!m_##snake_name##_prototype)          \
         m_##snake_name##_prototype = heap().allocate<ClassName##Prototype>(*this, *this);
     JS_ENUMERATE_ITERATOR_PROTOTYPES
 #undef __JS_ENUMERATE
 
     u8 attr = Attribute::Writable | Attribute::Configurable;
     define_native_function(vm.names.gc, gc, 0, attr);
     define_native_function(vm.names.isNaN, is_nan, 1, attr);
     define_native_function(vm.names.isFinite, is_finite, 1, attr);
     define_native_function(vm.names.parseFloat, parse_float, 1, attr);
     define_native_function(vm.names.parseInt, parse_int, 1, attr);
     define_native_function(vm.names.eval, eval, 1, attr);
     define_native_function(vm.names.encodeURI, encode_uri, 1, attr);
     define_native_function(vm.names.decodeURI, decode_uri, 1, attr);
     define_native_function(vm.names.encodeURIComponent, encode_uri_component, 1, attr);
     define_native_function(vm.names.decodeURIComponent, decode_uri_component, 1, attr);
+    define_native_function(vm.names.escape, escape, 1, attr);
+    define_native_function(vm.names.unescape, unescape, 1, attr);
 
     define_property(vm.names.NaN, js_nan(), 0);
     define_property(vm.names.Infinity, js_infinity(), 0);
     define_property(vm.names.undefined, js_undefined(), 0);
 
     define_property(vm.names.globalThis, this, attr);
     define_property(vm.names.console, heap().allocate<ConsoleObject>(*this, *this), attr);
     define_property(vm.names.Math, heap().allocate<MathObject>(*this, *this), attr);
     define_property(vm.names.JSON, heap().allocate<JSONObject>(*this, *this), attr);
     define_property(vm.names.Reflect, heap().allocate<ReflectObject>(*this, *this), attr);
 
     add_constructor(vm.names.Array, m_array_constructor, m_array_prototype);
     add_constructor(vm.names.ArrayBuffer, m_array_buffer_constructor, m_array_buffer_prototype);
     add_constructor(vm.names.BigInt, m_bigint_constructor, m_bigint_prototype);
     add_constructor(vm.names.Boolean, m_boolean_constructor, m_boolean_prototype);
     add_constructor(vm.names.Date, m_date_constructor, m_date_prototype);
     add_constructor(vm.names.Error, m_error_constructor, m_error_prototype);
     add_constructor(vm.names.Function, m_function_constructor, m_function_prototype);
     add_constructor(vm.names.Number, m_number_constructor, m_number_prototype);
     add_constructor(vm.names.Object, m_object_constructor, m_object_prototype);
     add_constructor(vm.names.Promise, m_promise_constructor, m_promise_prototype);
     add_constructor(vm.names.Proxy, m_proxy_constructor, nullptr);
     add_constructor(vm.names.RegExp, m_regexp_constructor, m_regexp_prototype);
     add_constructor(vm.names.String, m_string_constructor, m_string_prototype);
     add_constructor(vm.names.Symbol, m_symbol_constructor, m_symbol_prototype);
 
     initialize_constructor(vm.names.TypedArray, m_typed_array_constructor, m_typed_array_prototype);
 
 #define __JS_ENUMERATE(ClassName, snake_name, PrototypeName, ConstructorName, ArrayType) \
     add_constructor(vm.names.ClassName, m_##snake_name##_constructor, m_##snake_name##_prototype);
     JS_ENUMERATE_ERROR_SUBCLASSES
     JS_ENUMERATE_TYPED_ARRAYS
 #undef __JS_ENUMERATE
 }
@@ -425,12 +427,54 @@ JS_DEFINE_NATIVE_FUNCTION(GlobalObject::encode_uri_component)
 JS_DEFINE_NATIVE_FUNCTION(GlobalObject::decode_uri_component)
 {
     auto uri_string = vm.argument(0).to_string(global_object);
     if (vm.exception())
         return {};
     auto decoded = decode(global_object, uri_string, ""sv);
     if (vm.exception())
         return {};
     return js_string(vm, move(decoded));
 }
 
+JS_DEFINE_NATIVE_FUNCTION(GlobalObject::escape)
+{
+    auto string = vm.argument(0).to_string(global_object);
+    if (vm.exception())
+        return {};
+    StringBuilder escaped;
+    for (auto code_point : Utf8View(string)) {
+        if (code_point < 256) {
+            if ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@*_+-./"sv.contains(code_point))
+                escaped.append(code_point);
+            else
+                escaped.appendff("%{:02X}", code_point);
+            continue;
+        }
+        escaped.appendff("%u{:04X}", code_point); // FIXME: Handle utf-16 surrogate pairs
+    }
+    return js_string(vm, escaped.build());
+}
+
+JS_DEFINE_NATIVE_FUNCTION(GlobalObject::unescape)
+{
+    auto string = vm.argument(0).to_string(global_object);
+    if (vm.exception())
+        return {};
+    ssize_t length = string.length();
+    StringBuilder unescaped(length);
+    for (auto k = 0; k < length; ++k) {
+        u32 code_point = string[k];
+        if (code_point == '%') {
+            if (k <= length - 6 && string[k + 1] == 'u' && is_ascii_hex_digit(string[k + 2]) && is_ascii_hex_digit(string[k + 3]) && is_ascii_hex_digit(string[k + 4]) && is_ascii_hex_digit(string[k + 5])) {
+                code_point = (parse_ascii_hex_digit(string[k + 2]) << 12) | (parse_ascii_hex_digit(string[k + 3]) << 8) | (parse_ascii_hex_digit(string[k + 4]) << 4) | parse_ascii_hex_digit(string[k + 5]);
+                k += 5;
+            } else if (k <= length - 3 && is_ascii_hex_digit(string[k + 1]) && is_ascii_hex_digit(string[k + 2])) {
+                code_point = (parse_ascii_hex_digit(string[k + 1]) << 4) | parse_ascii_hex_digit(string[k + 2]);
+                k += 2;
+            }
+        }
+        unescaped.append_code_point(code_point);
+    }
+    return js_string(vm, unescaped.build());
+}
+
 }
diff --git a/Userland/Libraries/LibJS/Runtime/GlobalObject.h b/Userland/Libraries/LibJS/Runtime/GlobalObject.h
index dc950c6604..ddcb0dbc13 100644
--- a/Userland/Libraries/LibJS/Runtime/GlobalObject.h
+++ b/Userland/Libraries/LibJS/Runtime/GlobalObject.h
@@ -58,34 +58,36 @@ protected:
 private:
     virtual bool is_global_object() const final { return true; }
 
     JS_DECLARE_NATIVE_FUNCTION(gc);
     JS_DECLARE_NATIVE_FUNCTION(is_nan);
     JS_DECLARE_NATIVE_FUNCTION(is_finite);
     JS_DECLARE_NATIVE_FUNCTION(parse_float);
     JS_DECLARE_NATIVE_FUNCTION(parse_int);
     JS_DECLARE_NATIVE_FUNCTION(eval);
     JS_DECLARE_NATIVE_FUNCTION(encode_uri);
     JS_DECLARE_NATIVE_FUNCTION(decode_uri);
     JS_DECLARE_NATIVE_FUNCTION(encode_uri_component);
     JS_DECLARE_NATIVE_FUNCTION(decode_uri_component);
+    JS_DECLARE_NATIVE_FUNCTION(escape);
+    JS_DECLARE_NATIVE_FUNCTION(unescape);
 
     NonnullOwnPtr<Console> m_console;
 
     Shape* m_empty_object_shape { nullptr };
     Shape* m_new_object_shape { nullptr };
     Shape* m_new_script_function_prototype_object_shape { nullptr };
 
     // Not included in JS_ENUMERATE_NATIVE_OBJECTS due to missing distinct prototype
     ProxyConstructor* m_proxy_constructor { nullptr };
 
 #define __JS_ENUMERATE(ClassName, snake_name, PrototypeName, ConstructorName, ArrayType) \
     ConstructorName* m_##snake_name##_constructor { nullptr };                           \
     Object* m_##snake_name##_prototype { nullptr };
     JS_ENUMERATE_BUILTIN_TYPES
 #undef __JS_ENUMERATE
 
 #define __JS_ENUMERATE(ClassName, snake_name) \
     Object* m_##snake_name##_prototype { nullptr };
     JS_ENUMERATE_ITERATOR_PROTOTYPES
 #undef __JS_ENUMERATE
 };
diff --git a/Userland/Libraries/LibJS/Tests/builtins/functions/escapeUnescape.js b/Userland/Libraries/LibJS/Tests/builtins/functions/escapeUnescape.js
new file mode 100644
index 0000000000..c8e29a4a89
--- /dev/null
+++ b/Userland/Libraries/LibJS/Tests/builtins/functions/escapeUnescape.js
@@ -0,0 +1,21 @@
+test("escape", () => {
+    [
+        ["abc123", "abc123"],
+        ["äöü", "%E4%F6%FC"],
+        ["ć", "%u0107"],
+        ["@*_+-./", "@*_+-./"],
+    ].forEach(test => {
+        expect(escape(test[0])).toBe(test[1]);
+    });
+});
+
+test("unescape", () => {
+    [
+        ["abc123", "abc123"],
+        ["%E4%F6%FC", "äöü"],
+        ["%u0107", "ć"],
+        ["@*_+-./", "@*_+-./"],
+    ].forEach(test => {
+        expect(unescape(test[0])).toBe(test[1]);
+    });
+});
