commit 2e681052b313ed547189d95d58d73081c028d604
Author: Antonio Maiorano <amaiorano@google.com>
Date:   Wed May 18 19:55:18 2022 +0000

    tint: Fix use-after-free
    
    Bug: chromium:1324533
    Bug: chromium:1326749
    Bug: oss-fuzz:47516
    Change-Id: I0fd2db8997beaeaedc867bd27ee8866ace4e7cf0
    Reviewed-on: https://dawn-review.googlesource.com/c/dawn/+/90820
    Commit-Queue: Antonio Maiorano <amaiorano@google.com>
    Reviewed-by: Dan Sinclair <dsinclair@chromium.org>
    Reviewed-by: Ben Clayton <bclayton@google.com>

diff --git a/src/tint/ast/traverse_expressions.h b/src/tint/ast/traverse_expressions.h
index cd9c86c0a5..59b00e9829 100644
--- a/src/tint/ast/traverse_expressions.h
+++ b/src/tint/ast/traverse_expressions.h
@@ -61,105 +61,105 @@ template <TraverseOrder ORDER = TraverseOrder::LeftToRight, typename CALLBACK>
 bool TraverseExpressions(const ast::Expression* root, diag::List& diags, CALLBACK&& callback) {
     using EXPR_TYPE = std::remove_pointer_t<traits::ParameterType<CALLBACK, 0>>;
     constexpr static bool kHasDepthArg = traits::SignatureOfT<CALLBACK>::parameter_count == 2;
 
     struct Pending {
         const ast::Expression* expr;
         size_t depth;
     };
 
     std::vector<Pending> to_visit{{root, 0}};
 
     auto push_single = [&](const ast::Expression* expr, size_t depth) {
         to_visit.push_back({expr, depth});
     };
     auto push_pair = [&](const ast::Expression* left, const ast::Expression* right, size_t depth) {
         if (ORDER == TraverseOrder::LeftToRight) {
             to_visit.push_back({right, depth});
             to_visit.push_back({left, depth});
         } else {
             to_visit.push_back({left, depth});
             to_visit.push_back({right, depth});
         }
     };
     auto push_list = [&](const std::vector<const ast::Expression*>& exprs, size_t depth) {
         if (ORDER == TraverseOrder::LeftToRight) {
             for (auto* expr : utils::Reverse(exprs)) {
                 to_visit.push_back({expr, depth});
             }
         } else {
             for (auto* expr : exprs) {
                 to_visit.push_back({expr, depth});
             }
         }
     };
 
     while (!to_visit.empty()) {
-        auto& p = to_visit.back();
+        auto p = to_visit.back();
         to_visit.pop_back();
         const ast::Expression* expr = p.expr;
 
         if (auto* filtered = expr->template As<EXPR_TYPE>()) {
             TraverseAction result;
             if constexpr (kHasDepthArg) {
                 result = callback(filtered, p.depth);
             } else {
                 result = callback(filtered);
             }
 
             switch (result) {
                 case TraverseAction::Stop:
                     return true;
                 case TraverseAction::Skip:
                     continue;
                 case TraverseAction::Descend:
                     break;
             }
         }
 
         bool ok = Switch(
             expr,
             [&](const IndexAccessorExpression* idx) {
                 push_pair(idx->object, idx->index, p.depth + 1);
                 return true;
             },
             [&](const BinaryExpression* bin_op) {
                 push_pair(bin_op->lhs, bin_op->rhs, p.depth + 1);
                 return true;
             },
             [&](const BitcastExpression* bitcast) {
                 push_single(bitcast->expr, p.depth + 1);
                 return true;
             },
             [&](const CallExpression* call) {
                 // TODO(crbug.com/tint/1257): Resolver breaks if we actually include
                 // the function name in the traversal. push_single(call->func);
                 push_list(call->args, p.depth + 1);
                 return true;
             },
             [&](const MemberAccessorExpression* member) {
                 // TODO(crbug.com/tint/1257): Resolver breaks if we actually include
                 // the member name in the traversal. push_pair(member->member, p.depth + 1);
                 push_single(member->structure, p.depth + 1);
                 return true;
             },
             [&](const UnaryOpExpression* unary) {
                 push_single(unary->expr, p.depth + 1);
                 return true;
             },
             [&](Default) {
                 if (expr->IsAnyOf<LiteralExpression, IdentifierExpression, PhonyExpression>()) {
                     return true;  // Leaf expression
                 }
                 TINT_ICE(AST, diags) << "unhandled expression type: " << expr->TypeInfo().name;
                 return false;
             });
         if (!ok) {
             return false;
         }
     }
     return true;
 }
 
 }  // namespace tint::ast
 
 #endif  // SRC_TINT_AST_TRAVERSE_EXPRESSIONS_H_
