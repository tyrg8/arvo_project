commit e3f38372d0e16b33369e0b56e116fedaf055936a
Author: Yash Patil <yash.patil@ittiam.com>
Date:   Fri Sep 1 15:47:53 2023 +0530

    Fix for use of uninitialized value in ixheaacd_cos_sin_mod
    
    These changes handle the Use-of-uninitialized-value
    runtime error reported because local buffer was not initialized
    in complex analysis QMF filter block leading to uninitialized access.
    
    Bug: ossFuzz:61691
    Test: poc in bug

diff --git a/decoder/generic/ixheaacd_qmf_dec_generic.c b/decoder/generic/ixheaacd_qmf_dec_generic.c
index ff1e958..e3e8e4a 100644
--- a/decoder/generic/ixheaacd_qmf_dec_generic.c
+++ b/decoder/generic/ixheaacd_qmf_dec_generic.c
@@ -590,152 +590,152 @@ VOID ixheaacd_sbr_qmfanal32_winadd(WORD16 *inp1, WORD16 *inp2,
 VOID ixheaacd_cplx_anal_qmffilt(const WORD16 *time_sample_buf,
                                 ia_sbr_scale_fact_struct *sbr_scale_factor,
                                 WORD32 **qmf_real, WORD32 **qmf_imag,
                                 ia_sbr_qmf_filter_bank_struct *qmf_bank,
                                 ia_qmf_dec_tables_struct *qmf_dec_tables_ptr,
                                 WORD32 ch_fac, WORD32 low_pow_flag,
                                 WORD audio_object_type) {
   WORD32 i, k;
   WORD32 num_time_slots = qmf_bank->num_time_slots;
 
-  WORD32 analysis_buffer[4 * NO_ANALYSIS_CHANNELS];
+  WORD32 analysis_buffer[4 * NO_ANALYSIS_CHANNELS] = { 0 };
   WORD16 *filter_states = qmf_bank->core_samples_buffer;
 
   WORD16 *fp1, *fp2, *tmp;
 
   WORD16 *filter_1;
   WORD16 *filter_2;
   WORD16 *filt_ptr;
   WORD32 start_slot = 0;
 
   if (audio_object_type != AOT_ER_AAC_ELD &&
       audio_object_type != AOT_ER_AAC_LD) {
     qmf_bank->filter_pos +=
         (qmf_dec_tables_ptr->qmf_c - qmf_bank->analy_win_coeff);
     qmf_bank->analy_win_coeff = qmf_dec_tables_ptr->qmf_c;
   } else {
     qmf_bank->filter_pos +=
         (qmf_dec_tables_ptr->qmf_c_eld3 - qmf_bank->analy_win_coeff);
     qmf_bank->analy_win_coeff = qmf_dec_tables_ptr->qmf_c_eld3;
   }
 
   filter_1 = qmf_bank->filter_pos;
 
   if (audio_object_type != AOT_ER_AAC_ELD &&
       audio_object_type != AOT_ER_AAC_LD) {
     filter_2 = filter_1 + 64;
   } else {
     filter_2 = filter_1 + qmf_bank->no_channels;
   }
 
   sbr_scale_factor->st_lb_scale = 0;
   sbr_scale_factor->lb_scale = -10;
   if (!low_pow_flag) {
     if (audio_object_type != AOT_ER_AAC_ELD &&
         audio_object_type != AOT_ER_AAC_LD) {
       sbr_scale_factor->lb_scale = -8;
     } else {
       sbr_scale_factor->lb_scale = -9;
     }
     if (qmf_bank->no_channels != 64) {
       qmf_bank->cos_twiddle =
           (WORD16 *)qmf_dec_tables_ptr->sbr_sin_cos_twiddle_l32;
       qmf_bank->alt_sin_twiddle =
           (WORD16 *)qmf_dec_tables_ptr->sbr_alt_sin_twiddle_l32;
     } else {
       qmf_bank->cos_twiddle =
           (WORD16 *)qmf_dec_tables_ptr->sbr_sin_cos_twiddle_l64;
       qmf_bank->alt_sin_twiddle =
           (WORD16 *)qmf_dec_tables_ptr->sbr_alt_sin_twiddle_l64;
     }
     if (audio_object_type != AOT_ER_AAC_ELD &&
         audio_object_type != AOT_ER_AAC_LD) {
       qmf_bank->t_cos = (WORD16 *)qmf_dec_tables_ptr->sbr_t_cos_sin_l32;
     } else {
       qmf_bank->t_cos =
           (WORD16 *)qmf_dec_tables_ptr->ixheaacd_sbr_t_cos_sin_l32_eld;
     }
   }
 
   fp1 = qmf_bank->anal_filter_states;
   fp2 = qmf_bank->anal_filter_states + qmf_bank->no_channels;
 
   if (audio_object_type == AOT_ER_AAC_ELD ||
       audio_object_type == AOT_ER_AAC_LD) {
     filter_2 = qmf_bank->filter_2;
     fp1 = qmf_bank->fp1_anal;
     fp2 = qmf_bank->fp2_anal;
   }
 
   for (i = start_slot; i < num_time_slots + start_slot; i++) {
     for (k = 0; k < qmf_bank->no_channels; k++)
       filter_states[qmf_bank->no_channels - 1 - k] =
           time_sample_buf[ch_fac * k];
 
     if (audio_object_type != AOT_ER_AAC_ELD &&
         audio_object_type != AOT_ER_AAC_LD) {
       ixheaacd_sbr_qmfanal32_winadd(fp1, fp2, filter_1, filter_2,
                                     analysis_buffer);
     } else {
       ixheaacd_sbr_qmfanal32_winadd_eld(fp1, fp2, filter_1, filter_2,
                                         analysis_buffer);
     }
 
     time_sample_buf += qmf_bank->no_channels * ch_fac;
 
     filter_states -= qmf_bank->no_channels;
     if (filter_states < qmf_bank->anal_filter_states) {
       filter_states = qmf_bank->anal_filter_states +
                       ((qmf_bank->no_channels * 10) - qmf_bank->no_channels);
     }
 
     tmp = fp1;
     fp1 = fp2;
     fp2 = tmp;
     if (audio_object_type != AOT_ER_AAC_ELD &&
         audio_object_type != AOT_ER_AAC_LD) {
       filter_1 += 64;
       filter_2 += 64;
     } else {
       filter_1 += qmf_bank->no_channels;
       filter_2 += qmf_bank->no_channels;
     }
 
     filt_ptr = filter_1;
     filter_1 = filter_2;
     filter_2 = filt_ptr;
     if (audio_object_type != AOT_ER_AAC_ELD &&
         audio_object_type != AOT_ER_AAC_LD) {
       if (filter_2 > (qmf_bank->analy_win_coeff + 640)) {
         filter_1 = (WORD16 *)qmf_bank->analy_win_coeff;
         filter_2 = (WORD16 *)qmf_bank->analy_win_coeff + 64;
       }
     } else {
       if (filter_2 >
           (qmf_bank->analy_win_coeff + (qmf_bank->no_channels * 10))) {
         filter_1 = (WORD16 *)qmf_bank->analy_win_coeff;
         filter_2 = (WORD16 *)qmf_bank->analy_win_coeff + qmf_bank->no_channels;
       }
     }
 
     if (!low_pow_flag) {
       ixheaacd_fwd_modulation(analysis_buffer, qmf_real[i], qmf_imag[i],
                               qmf_bank, qmf_dec_tables_ptr, 0);
     } else {
       ixheaacd_dct3_32(
           (WORD32 *)analysis_buffer, qmf_real[i], qmf_dec_tables_ptr->dct23_tw,
           qmf_dec_tables_ptr->post_fft_tbl, qmf_dec_tables_ptr->w_16,
           qmf_dec_tables_ptr->dig_rev_table4_16);
     }
   }
 
   qmf_bank->filter_pos = filter_1;
   qmf_bank->core_samples_buffer = filter_states;
 
   if (audio_object_type == AOT_ER_AAC_ELD || audio_object_type == AOT_ER_AAC_LD)
 
   {
     qmf_bank->fp1_anal = fp1;
     qmf_bank->fp2_anal = fp2;
     qmf_bank->filter_2 = filter_2;
   }
 }
