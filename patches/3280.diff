commit cb03cd607a3a7919ce9279559cb6b15d4551ce83
Author: Jonathan Hui <jonhui@nestlabs.com>
Date:   Wed Sep 6 13:19:06 2017 -0700

    [network-data] add length checks when adding new newtork data (#2171)
    
    Credit to OSS-Fuzz.

diff --git a/src/core/thread/network_data_leader_ftd.cpp b/src/core/thread/network_data_leader_ftd.cpp
index 436fd9ee2..195323a4d 100644
--- a/src/core/thread/network_data_leader_ftd.cpp
+++ b/src/core/thread/network_data_leader_ftd.cpp
@@ -161,24 +161,25 @@ void Leader::HandleServerData(void *aContext, otCoapHeader *aHeader, otMessage *
 void Leader::HandleServerData(Coap::Header &aHeader, Message &aMessage,
                               const Ip6::MessageInfo &aMessageInfo)
 {
     ThreadNetworkDataTlv networkData;
     ThreadRloc16Tlv rloc16;
 
     otLogInfoNetData(GetInstance(), "Received network data registration");
 
     if (ThreadTlv::GetTlv(aMessage, ThreadTlv::kRloc16, sizeof(rloc16), rloc16) == OT_ERROR_NONE)
     {
         VerifyOrExit(rloc16.IsValid());
         RemoveBorderRouter(rloc16.GetRloc16());
     }
 
     if (ThreadTlv::GetTlv(aMessage, ThreadTlv::kThreadNetworkData, sizeof(networkData), networkData) ==
         OT_ERROR_NONE)
     {
+        VerifyOrExit(networkData.IsValid());
         RegisterNetworkData(HostSwap16(aMessageInfo.mPeerAddr.mFields.m16[7]),
                             networkData.GetTlvs(), networkData.GetLength());
     }
 
     SuccessOrExit(GetNetif().GetCoap().SendEmptyAck(aHeader, aMessageInfo));
 
     otLogInfoNetData(GetInstance(), "Sent network data registration acknowledgment");
@@ -612,25 +613,25 @@ exit:
 otError Leader::AddNetworkData(uint8_t *aTlvs, uint8_t aTlvsLength)
 {
     otError error = OT_ERROR_NONE;
     NetworkDataTlv *cur = reinterpret_cast<NetworkDataTlv *>(aTlvs);
     NetworkDataTlv *end = reinterpret_cast<NetworkDataTlv *>(aTlvs + aTlvsLength);
 
     while (cur < end)
     {
-        VerifyOrExit((cur + 1) <= end && cur->GetNext() <= end, error = OT_ERROR_NONE);
+        VerifyOrExit((cur + 1) <= end && cur->GetNext() <= end, error = OT_ERROR_PARSE);
 
         switch (cur->GetType())
         {
         case NetworkDataTlv::kTypePrefix:
-            AddPrefix(*static_cast<PrefixTlv *>(cur));
+            SuccessOrExit(error = AddPrefix(*static_cast<PrefixTlv *>(cur)));
             otDumpDebgNetData(GetInstance(), "add prefix done", mTlvs, mLength);
             break;
 
         default:
             break;
         }
 
         cur = cur->GetNext();
     }
 
     otDumpDebgNetData(GetInstance(), "add done", mTlvs, mLength);
@@ -642,26 +643,26 @@ exit:
 otError Leader::AddPrefix(PrefixTlv &aPrefix)
 {
     otError error = OT_ERROR_NONE;
     NetworkDataTlv *cur = aPrefix.GetSubTlvs();
     NetworkDataTlv *end = aPrefix.GetNext();
 
     while (cur < end)
     {
-        VerifyOrExit((cur + 1) <= end && cur->GetNext() <= end, error = OT_ERROR_NONE);
+        VerifyOrExit((cur + 1) <= end && cur->GetNext() <= end, error = OT_ERROR_PARSE);
 
         switch (cur->GetType())
         {
         case NetworkDataTlv::kTypeHasRoute:
-            AddHasRoute(aPrefix, *static_cast<HasRouteTlv *>(cur));
+            SuccessOrExit(error = AddHasRoute(aPrefix, *static_cast<HasRouteTlv *>(cur)));
             break;
 
         case NetworkDataTlv::kTypeBorderRouter:
-            AddBorderRouter(aPrefix, *static_cast<BorderRouterTlv *>(cur));
+            SuccessOrExit(error = AddBorderRouter(aPrefix, *static_cast<BorderRouterTlv *>(cur)));
             break;
 
         default:
             break;
         }
 
         cur = cur->GetNext();
     }
@@ -673,94 +674,146 @@ exit:
 otError Leader::AddHasRoute(PrefixTlv &aPrefix, HasRouteTlv &aHasRoute)
 {
     otError error = OT_ERROR_NONE;
-    PrefixTlv *dstPrefix;
-    HasRouteTlv *dstHasRoute;
+    PrefixTlv *dstPrefix = NULL;
+    HasRouteTlv *dstHasRoute = NULL;
+    uint16_t appendLength = 0;
+
+    VerifyOrExit(aHasRoute.GetNumEntries() > 0, error = OT_ERROR_PARSE);
+
+    if ((dstPrefix = FindPrefix(aPrefix.GetPrefix(), aPrefix.GetPrefixLength())) != NULL)
+    {
+        dstHasRoute = FindHasRoute(*dstPrefix, aHasRoute.IsStable());
+    }
 
-    if ((dstPrefix = FindPrefix(aPrefix.GetPrefix(), aPrefix.GetPrefixLength())) == NULL)
+    if (dstPrefix == NULL)
+    {
+        appendLength += sizeof(PrefixTlv) + BitVectorBytes(aPrefix.GetPrefixLength());
+    }
+
+    if (dstHasRoute == NULL)
+    {
+        appendLength += sizeof(HasRouteTlv);
+    }
+
+    appendLength += sizeof(HasRouteEntry);
+
+    VerifyOrExit(mLength + appendLength <= sizeof(mTlvs), error = OT_ERROR_NO_BUFS);
+
+    if (dstPrefix == NULL)
     {
         dstPrefix = reinterpret_cast<PrefixTlv *>(mTlvs + mLength);
         Insert(reinterpret_cast<uint8_t *>(dstPrefix), sizeof(PrefixTlv) + BitVectorBytes(aPrefix.GetPrefixLength()));
         dstPrefix->Init(aPrefix.GetDomainId(), aPrefix.GetPrefixLength(), aPrefix.GetPrefix());
     }
 
     if (aHasRoute.IsStable())
     {
         dstPrefix->SetStable();
     }
 
-    if ((dstHasRoute = FindHasRoute(*dstPrefix, aHasRoute.IsStable())) == NULL)
+    if (dstHasRoute == NULL)
     {
         dstHasRoute = static_cast<HasRouteTlv *>(dstPrefix->GetNext());
         Insert(reinterpret_cast<uint8_t *>(dstHasRoute), sizeof(HasRouteTlv));
         dstPrefix->SetLength(dstPrefix->GetLength() + sizeof(HasRouteTlv));
         dstHasRoute->Init();
 
         if (aHasRoute.IsStable())
         {
             dstHasRoute->SetStable();
         }
     }
 
     Insert(reinterpret_cast<uint8_t *>(dstHasRoute->GetNext()), sizeof(HasRouteEntry));
     dstHasRoute->SetLength(dstHasRoute->GetLength() + sizeof(HasRouteEntry));
     dstPrefix->SetLength(dstPrefix->GetLength() + sizeof(HasRouteEntry));
     memcpy(dstHasRoute->GetEntry(dstHasRoute->GetNumEntries() - 1), aHasRoute.GetEntry(0),
            sizeof(HasRouteEntry));
 
+exit:
     return error;
 }
 
 otError Leader::AddBorderRouter(PrefixTlv &aPrefix, BorderRouterTlv &aBorderRouter)
 {
     otError error = OT_ERROR_NONE;
-    PrefixTlv *dstPrefix;
-    ContextTlv *dstContext;
-    BorderRouterTlv *dstBorderRouter;
-    int contextId;
+    PrefixTlv *dstPrefix = NULL;
+    ContextTlv *dstContext = NULL;
+    BorderRouterTlv *dstBorderRouter = NULL;
+    int contextId = -1;
+    uint16_t appendLength = 0;
+
+    VerifyOrExit(aBorderRouter.GetNumEntries() > 0, error = OT_ERROR_PARSE);
+
+    if ((dstPrefix = FindPrefix(aPrefix.GetPrefix(), aPrefix.GetPrefixLength())) != NULL)
+    {
+        dstContext = FindContext(*dstPrefix);
+        dstBorderRouter = FindBorderRouter(*dstPrefix, aBorderRouter.IsStable());
+    }
 
-    if ((dstPrefix = FindPrefix(aPrefix.GetPrefix(), aPrefix.GetPrefixLength())) == NULL)
+    if (dstPrefix == NULL)
+    {
+        appendLength += sizeof(PrefixTlv) + BitVectorBytes(aPrefix.GetPrefixLength());
+    }
+
+    if (dstContext == NULL)
+    {
+        appendLength += sizeof(ContextTlv);
+    }
+
+    if (dstBorderRouter == NULL)
+    {
+        appendLength += sizeof(BorderRouterTlv);
+    }
+
+    appendLength += sizeof(BorderRouterEntry);
+
+    VerifyOrExit(mLength + appendLength <= sizeof(mTlvs), error = OT_ERROR_NO_BUFS);
+
+    if (dstContext == NULL)
+    {
+        contextId = AllocateContext();
+        VerifyOrExit(contextId >= 0, error = OT_ERROR_NO_BUFS);
+    }
+
+    if (dstPrefix == NULL)
     {
         dstPrefix = reinterpret_cast<PrefixTlv *>(mTlvs + mLength);
         Insert(reinterpret_cast<uint8_t *>(dstPrefix), sizeof(PrefixTlv) + BitVectorBytes(aPrefix.GetPrefixLength()));
         dstPrefix->Init(aPrefix.GetDomainId(), aPrefix.GetPrefixLength(), aPrefix.GetPrefix());
     }
 
-    if ((dstContext = FindContext(*dstPrefix)) != NULL)
-    {
-        dstContext->SetCompress();
-    }
-    else if ((contextId = AllocateContext()) >= 0)
+    if (dstContext == NULL)
     {
         dstContext = static_cast<ContextTlv *>(dstPrefix->GetNext());
         Insert(reinterpret_cast<uint8_t *>(dstContext), sizeof(ContextTlv));
         dstPrefix->SetLength(dstPrefix->GetLength() + sizeof(ContextTlv));
         dstContext->Init();
         dstContext->SetCompress();
         dstContext->SetContextId(static_cast<uint8_t>(contextId));
         dstContext->SetContextLength(aPrefix.GetPrefixLength());
     }
 
-    VerifyOrExit(dstContext != NULL, error = OT_ERROR_NO_BUFS);
+    dstContext->SetCompress();
     mContextLastUsed[dstContext->GetContextId() - kMinContextId] = 0;
 
-
-    if ((dstBorderRouter = FindBorderRouter(*dstPrefix, aBorderRouter.IsStable())) == NULL)
+    if (dstBorderRouter == NULL)
     {
         dstBorderRouter = static_cast<BorderRouterTlv *>(dstPrefix->GetNext());
         Insert(reinterpret_cast<uint8_t *>(dstBorderRouter), sizeof(BorderRouterTlv));
         dstPrefix->SetLength(dstPrefix->GetLength() + sizeof(BorderRouterTlv));
         dstBorderRouter->Init();
     }
 
     Insert(reinterpret_cast<uint8_t *>(dstBorderRouter->GetNext()), sizeof(BorderRouterEntry));
     dstBorderRouter->SetLength(dstBorderRouter->GetLength() + sizeof(BorderRouterEntry));
     dstPrefix->SetLength(dstPrefix->GetLength() + sizeof(BorderRouterEntry));
     memcpy(dstBorderRouter->GetEntry(dstBorderRouter->GetNumEntries() - 1), aBorderRouter.GetEntry(0),
            sizeof(BorderRouterEntry));
 
     if (aBorderRouter.IsStable())
     {
         dstPrefix->SetStable();
         dstContext->SetStable();
         dstBorderRouter->SetStable();
     }
diff --git a/src/core/thread/thread_tlvs.hpp b/src/core/thread/thread_tlvs.hpp
index 0124babd4..a5a655243 100644
--- a/src/core/thread/thread_tlvs.hpp
+++ b/src/core/thread/thread_tlvs.hpp
@@ -473,23 +473,23 @@ class ThreadNetworkDataTlv: public ThreadTlv
 {
 public:
     /**
      * This method initializes the TLV.
      *
      */
     void Init(void) { SetType(kThreadNetworkData); SetLength(0); }
 
     /**
      * This method overrides same method of the base class
      *
      * @retval TRUE  the TLV appears to be well-formed.
      *
      */
-    bool IsValid(void) const { return true; }
+    bool IsValid(void) const { return GetLength() <= sizeof(*this) - sizeof(ThreadTlv); }
 
     /**
      * This method returns a pointer to the Network Data TLVs.
      *
      * @returns A pointer to the Network Data TLVs.
      *
      */
     uint8_t *GetTlvs(void) { return mTlvs; }
