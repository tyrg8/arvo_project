commit 932dfe05627c139013b9ea5d5e0e0e296b467e7e
Author: Alex Rebert <alexandre.rebert@gmail.com>
Date:   Thu Oct 28 22:27:19 2021 -0400

    Fix overflowing allocations in MDLMaterialLoader
    
    Some allocations might underallocate due to integer overflows. This
    commit ensures that we are throwing an exception if the allocation size
    does not fit in an unsigned int.
    
    Fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=25341

diff --git a/code/AssetLib/MDL/MDLMaterialLoader.cpp b/code/AssetLib/MDL/MDLMaterialLoader.cpp
index f44896819..62320814a 100644
--- a/code/AssetLib/MDL/MDLMaterialLoader.cpp
+++ b/code/AssetLib/MDL/MDLMaterialLoader.cpp
@@ -122,44 +122,47 @@ aiColor4D MDLImporter::ReplaceTextureWithColor(const aiTexture *pcTexture) {
 // ------------------------------------------------------------------------------------------------
 // Read a texture from a MDL3 file
 void MDLImporter::CreateTextureARGB8_3DGS_MDL3(const unsigned char *szData) {
     const MDL::Header *pcHeader = (const MDL::Header *)mBuffer; //the endianness is already corrected in the InternReadFile_3DGS_MDL345 function
 
     VALIDATE_FILE_SIZE(szData + pcHeader->skinwidth *
                                         pcHeader->skinheight);
 
     // allocate a new texture object
     aiTexture *pcNew = new aiTexture();
     pcNew->mWidth = pcHeader->skinwidth;
     pcNew->mHeight = pcHeader->skinheight;
 
+    if(pcNew->mWidth != 0 && pcNew->mHeight > UINT_MAX/pcNew->mWidth) {
+        throw DeadlyImportError("Invalid MDL file. A texture is too big.");
+    }
     pcNew->pcData = new aiTexel[pcNew->mWidth * pcNew->mHeight];
 
     const unsigned char *szColorMap;
     this->SearchPalette(&szColorMap);
 
     // copy texture data
     for (unsigned int i = 0; i < pcNew->mWidth * pcNew->mHeight; ++i) {
         const unsigned char val = szData[i];
         const unsigned char *sz = &szColorMap[val * 3];
 
         pcNew->pcData[i].a = 0xFF;
         pcNew->pcData[i].r = *sz++;
         pcNew->pcData[i].g = *sz++;
         pcNew->pcData[i].b = *sz;
     }
 
     FreePalette(szColorMap);
 
     // store the texture
     aiTexture **pc = this->pScene->mTextures;
     this->pScene->mTextures = new aiTexture *[pScene->mNumTextures + 1];
     for (unsigned int i = 0; i < pScene->mNumTextures; ++i)
         pScene->mTextures[i] = pc[i];
 
     pScene->mTextures[this->pScene->mNumTextures] = pcNew;
     pScene->mNumTextures++;
     delete[] pc;
 }
 
 // ------------------------------------------------------------------------------------------------
 // Read a texture from a MDL4 file
@@ -210,153 +213,156 @@ void MDLImporter::CreateTexture_3DGS_MDL4(const unsigned char *szData,
 // ------------------------------------------------------------------------------------------------
 // Load color data of a texture and convert it to our output format
 void MDLImporter::ParseTextureColorData(const unsigned char *szData,
         unsigned int iType,
         unsigned int *piSkip,
         aiTexture *pcNew) {
     const bool do_read = bad_texel != pcNew->pcData;
 
     // allocate storage for the texture image
     if (do_read) {
+        if(pcNew->mWidth != 0 && pcNew->mHeight > UINT_MAX/pcNew->mWidth) {
+            throw DeadlyImportError("Invalid MDL file. A texture is too big.");
+        }
         pcNew->pcData = new aiTexel[pcNew->mWidth * pcNew->mHeight];
     }
 
     // R5G6B5 format (with or without MIPs)
     // ****************************************************************
     if (2 == iType || 10 == iType) {
         VALIDATE_FILE_SIZE(szData + pcNew->mWidth * pcNew->mHeight * 2);
 
         // copy texture data
         unsigned int i;
         if (do_read) {
             for (i = 0; i < pcNew->mWidth * pcNew->mHeight; ++i) {
                 MDL::RGB565 val = ((MDL::RGB565 *)szData)[i];
                 AI_SWAP2(val);
 
                 pcNew->pcData[i].a = 0xFF;
                 pcNew->pcData[i].r = (unsigned char)val.b << 3;
                 pcNew->pcData[i].g = (unsigned char)val.g << 2;
                 pcNew->pcData[i].b = (unsigned char)val.r << 3;
             }
         } else {
             i = pcNew->mWidth * pcNew->mHeight;
         }
         *piSkip = i * 2;
 
         // apply MIP maps
         if (10 == iType) {
             *piSkip += ((i >> 2) + (i >> 4) + (i >> 6)) << 1;
             VALIDATE_FILE_SIZE(szData + *piSkip);
         }
     }
     // ARGB4 format (with or without MIPs)
     // ****************************************************************
     else if (3 == iType || 11 == iType) {
         VALIDATE_FILE_SIZE(szData + pcNew->mWidth * pcNew->mHeight * 4);
 
         // copy texture data
         unsigned int i;
         if (do_read) {
             for (i = 0; i < pcNew->mWidth * pcNew->mHeight; ++i) {
                 MDL::ARGB4 val = ((MDL::ARGB4 *)szData)[i];
                 AI_SWAP2(val);
 
                 pcNew->pcData[i].a = (unsigned char)val.a << 4;
                 pcNew->pcData[i].r = (unsigned char)val.r << 4;
                 pcNew->pcData[i].g = (unsigned char)val.g << 4;
                 pcNew->pcData[i].b = (unsigned char)val.b << 4;
             }
         } else
             i = pcNew->mWidth * pcNew->mHeight;
         *piSkip = i * 2;
 
         // apply MIP maps
         if (11 == iType) {
             *piSkip += ((i >> 2) + (i >> 4) + (i >> 6)) << 1;
             VALIDATE_FILE_SIZE(szData + *piSkip);
         }
     }
     // RGB8 format (with or without MIPs)
     // ****************************************************************
     else if (4 == iType || 12 == iType) {
         VALIDATE_FILE_SIZE(szData + pcNew->mWidth * pcNew->mHeight * 3);
 
         // copy texture data
         unsigned int i;
         if (do_read) {
             for (i = 0; i < pcNew->mWidth * pcNew->mHeight; ++i) {
                 const unsigned char *_szData = &szData[i * 3];
 
                 pcNew->pcData[i].a = 0xFF;
                 pcNew->pcData[i].b = *_szData++;
                 pcNew->pcData[i].g = *_szData++;
                 pcNew->pcData[i].r = *_szData;
             }
         } else
             i = pcNew->mWidth * pcNew->mHeight;
 
         // apply MIP maps
         *piSkip = i * 3;
         if (12 == iType) {
             *piSkip += ((i >> 2) + (i >> 4) + (i >> 6)) * 3;
             VALIDATE_FILE_SIZE(szData + *piSkip);
         }
     }
     // ARGB8 format (with ir without MIPs)
     // ****************************************************************
     else if (5 == iType || 13 == iType) {
         VALIDATE_FILE_SIZE(szData + pcNew->mWidth * pcNew->mHeight * 4);
 
         // copy texture data
         unsigned int i;
         if (do_read) {
             for (i = 0; i < pcNew->mWidth * pcNew->mHeight; ++i) {
                 const unsigned char *_szData = &szData[i * 4];
 
                 pcNew->pcData[i].b = *_szData++;
                 pcNew->pcData[i].g = *_szData++;
                 pcNew->pcData[i].r = *_szData++;
                 pcNew->pcData[i].a = *_szData;
             }
         } else {
             i = pcNew->mWidth * pcNew->mHeight;
         }
 
         // apply MIP maps
         *piSkip = i << 2;
         if (13 == iType) {
             *piSkip += ((i >> 2) + (i >> 4) + (i >> 6)) << 2;
         }
     }
     // palletized 8 bit texture. As for Quake 1
     // ****************************************************************
     else if (0 == iType) {
         VALIDATE_FILE_SIZE(szData + pcNew->mWidth * pcNew->mHeight);
 
         // copy texture data
         unsigned int i;
         if (do_read) {
 
             const unsigned char *szColorMap;
             SearchPalette(&szColorMap);
 
             for (i = 0; i < pcNew->mWidth * pcNew->mHeight; ++i) {
                 const unsigned char val = szData[i];
                 const unsigned char *sz = &szColorMap[val * 3];
 
                 pcNew->pcData[i].a = 0xFF;
                 pcNew->pcData[i].r = *sz++;
                 pcNew->pcData[i].g = *sz++;
                 pcNew->pcData[i].b = *sz;
             }
             this->FreePalette(szColorMap);
 
         } else
             i = pcNew->mWidth * pcNew->mHeight;
         *piSkip = i;
 
         // FIXME: Also support for MIP maps?
     }
 }
 
 // ------------------------------------------------------------------------------------------------
 // Get a texture from a MDL5 file
