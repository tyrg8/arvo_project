commit 2adfc70e9cc945053367deddea1b4ecb9018d277
Author: Victor M. Alvarez <vmalvarez@virustotal.com>
Date:   Wed Nov 8 10:43:55 2017 +0100

    Fix bug introduced in 15f831264acb82f7722cefd2cd9b7adea541826a.
    
    As the lexer doesn't terminate right after finding an error, a double-free can happen if pointers associated to tokens are not set to NULL after being freed.

diff --git a/libyara/grammar.c b/libyara/grammar.c
index db8f9bb7..49b00b80 100644
--- a/libyara/grammar.c
+++ b/libyara/grammar.c
@@ -1332,91 +1332,91 @@ static void
 yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, YR_COMPILER* compiler)
 {
   YYUSE (yyvaluep);
   YYUSE (yyscanner);
   YYUSE (compiler);
   if (!yymsg)
     yymsg = "Deleting";
   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
 
   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   switch (yytype)
     {
           case 10: /* _IDENTIFIER_  */
 #line 202 "grammar.y" /* yacc.c:1257  */
-      { yr_free(((*yyvaluep).c_string)); }
+      { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
 #line 1348 "grammar.c" /* yacc.c:1257  */
         break;
 
     case 11: /* _STRING_IDENTIFIER_  */
 #line 206 "grammar.y" /* yacc.c:1257  */
-      { yr_free(((*yyvaluep).c_string)); }
+      { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
 #line 1354 "grammar.c" /* yacc.c:1257  */
         break;
 
     case 12: /* _STRING_COUNT_  */
 #line 203 "grammar.y" /* yacc.c:1257  */
-      { yr_free(((*yyvaluep).c_string)); }
+      { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
 #line 1360 "grammar.c" /* yacc.c:1257  */
         break;
 
     case 13: /* _STRING_OFFSET_  */
 #line 204 "grammar.y" /* yacc.c:1257  */
-      { yr_free(((*yyvaluep).c_string)); }
+      { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
 #line 1366 "grammar.c" /* yacc.c:1257  */
         break;
 
     case 14: /* _STRING_LENGTH_  */
 #line 205 "grammar.y" /* yacc.c:1257  */
-      { yr_free(((*yyvaluep).c_string)); }
+      { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
 #line 1372 "grammar.c" /* yacc.c:1257  */
         break;
 
     case 15: /* _STRING_IDENTIFIER_WITH_WILDCARD_  */
 #line 207 "grammar.y" /* yacc.c:1257  */
-      { yr_free(((*yyvaluep).c_string)); }
+      { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
 #line 1378 "grammar.c" /* yacc.c:1257  */
         break;
 
     case 19: /* _TEXT_STRING_  */
 #line 208 "grammar.y" /* yacc.c:1257  */
-      { yr_free(((*yyvaluep).sized_string)); }
+      { yr_free(((*yyvaluep).sized_string)); ((*yyvaluep).sized_string) = NULL; }
 #line 1384 "grammar.c" /* yacc.c:1257  */
         break;
 
     case 20: /* _HEX_STRING_  */
 #line 209 "grammar.y" /* yacc.c:1257  */
-      { yr_free(((*yyvaluep).sized_string)); }
+      { yr_free(((*yyvaluep).sized_string)); ((*yyvaluep).sized_string) = NULL; }
 #line 1390 "grammar.c" /* yacc.c:1257  */
         break;
 
     case 21: /* _REGEXP_  */
 #line 210 "grammar.y" /* yacc.c:1257  */
-      { yr_free(((*yyvaluep).sized_string)); }
+      { yr_free(((*yyvaluep).sized_string)); ((*yyvaluep).sized_string) = NULL; }
 #line 1396 "grammar.c" /* yacc.c:1257  */
         break;
 
     case 94: /* arguments  */
 #line 212 "grammar.y" /* yacc.c:1257  */
-      { yr_free(((*yyvaluep).c_string)); }
+      { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
 #line 1402 "grammar.c" /* yacc.c:1257  */
         break;
 
     case 95: /* arguments_list  */
 #line 213 "grammar.y" /* yacc.c:1257  */
-      { yr_free(((*yyvaluep).c_string)); }
+      { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
 #line 1408 "grammar.c" /* yacc.c:1257  */
         break;
 
 
       default:
         break;
     }
   YY_IGNORE_MAYBE_UNINITIALIZED_END
 }
 
 
 
 
 /*----------.
 | yyparse.  |
 `----------*/
diff --git a/libyara/grammar.y b/libyara/grammar.y
index 8a60a8c6..3a375149 100644
--- a/libyara/grammar.y
+++ b/libyara/grammar.y
@@ -26,202 +26,202 @@ ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 %{
 
 
 #include <assert.h>
 #include <stdio.h>
 #include <string.h>
 #include <limits.h>
 #include <stdlib.h>
 #include <stddef.h>
 
 #include <yara/integers.h>
 #include <yara/utils.h>
 #include <yara/strutils.h>
 #include <yara/compiler.h>
 #include <yara/object.h>
 #include <yara/sizedstr.h>
 #include <yara/exec.h>
 #include <yara/error.h>
 #include <yara/mem.h>
 #include <yara/lexer.h>
 #include <yara/parser.h>
 
 #if defined(_MSC_VER)
 #define llabs _abs64
 #endif
 
 #define YYERROR_VERBOSE
 
 #define YYMALLOC yr_malloc
 #define YYFREE yr_free
 
 #define INTEGER_SET_ENUMERATION   1
 #define INTEGER_SET_RANGE         2
 
 #define fail_if(x) \
     if (x) \
     { \
       yyerror(yyscanner, compiler, NULL); \
       YYERROR; \
     } \
 
 
 #define check_type_with_cleanup(expression, expected_type, op, cleanup) \
     if (((expression.type) & (expected_type)) == 0) \
     { \
       switch(expression.type) \
       { \
         case EXPRESSION_TYPE_INTEGER: \
           yr_compiler_set_error_extra_info( \
               compiler, "wrong type \"integer\" for " op " operator"); \
           break; \
         case EXPRESSION_TYPE_FLOAT: \
           yr_compiler_set_error_extra_info( \
               compiler, "wrong type \"float\" for " op " operator"); \
           break; \
         case EXPRESSION_TYPE_STRING: \
           yr_compiler_set_error_extra_info( \
               compiler, "wrong type \"string\" for " op " operator"); \
           break; \
         case EXPRESSION_TYPE_BOOLEAN: \
           yr_compiler_set_error_extra_info( \
               compiler, "wrong type \"boolean\" for " op " operator"); \
           break; \
       } \
       cleanup; \
       compiler->last_result = ERROR_WRONG_TYPE; \
       yyerror(yyscanner, compiler, NULL); \
       YYERROR; \
     }
 
 
 #define check_type(expression, expected_type, op) \
     check_type_with_cleanup(expression, expected_type, op, )
 
 %}
 
 
 %expect 1   // expect 1 shift/reduce conflicts
 
 // Uncomment this line to print parsing information that can be useful to
 // debug YARA's grammar.
 
 // %debug
 
 %name-prefix "yara_yy"
 %pure-parser
 %parse-param {void *yyscanner}
 %parse-param {YR_COMPILER* compiler}
 %lex-param {yyscan_t yyscanner}
 %lex-param {YR_COMPILER* compiler}
 
 %token _DOT_DOT_
 %token _RULE_
 %token _PRIVATE_
 %token _GLOBAL_
 %token _META_
 %token <string> _STRINGS_
 %token _CONDITION_
 %token <c_string> _IDENTIFIER_
 %token <c_string> _STRING_IDENTIFIER_
 %token <c_string> _STRING_COUNT_
 %token <c_string> _STRING_OFFSET_
 %token <c_string> _STRING_LENGTH_
 %token <c_string> _STRING_IDENTIFIER_WITH_WILDCARD_
 %token <integer> _NUMBER_
 %token <double_> _DOUBLE_
 %token <integer> _INTEGER_FUNCTION_
 %token <sized_string> _TEXT_STRING_
 %token <sized_string> _HEX_STRING_
 %token <sized_string> _REGEXP_
 %token _ASCII_
 %token _WIDE_
 %token _NOCASE_
 %token _FULLWORD_
 %token _AT_
 %token _FILESIZE_
 %token _ENTRYPOINT_
 %token _ALL_
 %token _ANY_
 %token _IN_
 %token _OF_
 %token _FOR_
 %token _THEM_
 %token _MATCHES_
 %token _CONTAINS_
 %token _IMPORT_
 
 %token _TRUE_
 %token _FALSE_
 
 %left _OR_
 %left _AND_
 %left '|'
 %left '^'
 %left '&'
 %left _EQ_ _NEQ_
 %left _LT_ _LE_ _GT_ _GE_
 %left _SHIFT_LEFT_ _SHIFT_RIGHT_
 %left '+' '-'
 %left '*' '\\' '%'
 %right _NOT_ '~' UNARY_MINUS
 
 %type <rule>   rule
 
 %type <string> strings
 %type <string> string_declaration
 %type <string> string_declarations
 
 %type <meta> meta
 %type <meta> meta_declaration
 %type <meta> meta_declarations
 
 %type <c_string> tags
 %type <c_string> tag_list
 
 %type <integer> string_modifier
 %type <integer> string_modifiers
 
 %type <integer> integer_set
 
 %type <integer> rule_modifier
 %type <integer> rule_modifiers
 
 %type <expression> primary_expression
 %type <expression> boolean_expression
 %type <expression> expression
 %type <expression> identifier
 %type <expression> regexp
 
 %type <c_string> arguments
 %type <c_string> arguments_list
 
-%destructor { yr_free($$); } _IDENTIFIER_
-%destructor { yr_free($$); } _STRING_COUNT_
-%destructor { yr_free($$); } _STRING_OFFSET_
-%destructor { yr_free($$); } _STRING_LENGTH_
-%destructor { yr_free($$); } _STRING_IDENTIFIER_
-%destructor { yr_free($$); } _STRING_IDENTIFIER_WITH_WILDCARD_
-%destructor { yr_free($$); } _TEXT_STRING_
-%destructor { yr_free($$); } _HEX_STRING_
-%destructor { yr_free($$); } _REGEXP_
-
-%destructor { yr_free($$); } arguments
-%destructor { yr_free($$); } arguments_list
+%destructor { yr_free($$); $$ = NULL; } _IDENTIFIER_
+%destructor { yr_free($$); $$ = NULL; } _STRING_COUNT_
+%destructor { yr_free($$); $$ = NULL; } _STRING_OFFSET_
+%destructor { yr_free($$); $$ = NULL; } _STRING_LENGTH_
+%destructor { yr_free($$); $$ = NULL; } _STRING_IDENTIFIER_
+%destructor { yr_free($$); $$ = NULL; } _STRING_IDENTIFIER_WITH_WILDCARD_
+%destructor { yr_free($$); $$ = NULL; } _TEXT_STRING_
+%destructor { yr_free($$); $$ = NULL; } _HEX_STRING_
+%destructor { yr_free($$); $$ = NULL; } _REGEXP_
+
+%destructor { yr_free($$); $$ = NULL; } arguments
+%destructor { yr_free($$); $$ = NULL; } arguments_list
 
 %union {
   EXPRESSION      expression;
   SIZED_STRING*   sized_string;
   char*           c_string;
   int64_t         integer;
   double          double_;
   YR_STRING*      string;
   YR_META*        meta;
   YR_RULE*        rule;
 }
 
 
 %%
diff --git a/libyara/hex_grammar.c b/libyara/hex_grammar.c
index 3b611bd8..32447864 100644
--- a/libyara/hex_grammar.c
+++ b/libyara/hex_grammar.c
@@ -1015,67 +1015,67 @@ static void
 yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, HEX_LEX_ENVIRONMENT *lex_env)
 {
   YYUSE (yyvaluep);
   YYUSE (yyscanner);
   YYUSE (lex_env);
   if (!yymsg)
     yymsg = "Deleting";
   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
 
   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   switch (yytype)
     {
           case 16: /* tokens  */
 #line 102 "hex_grammar.y" /* yacc.c:1257  */
-      { yr_re_node_destroy(((*yyvaluep).re_node)); }
+      { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
 #line 1031 "hex_grammar.c" /* yacc.c:1257  */
         break;
 
     case 17: /* token_sequence  */
 #line 103 "hex_grammar.y" /* yacc.c:1257  */
-      { yr_re_node_destroy(((*yyvaluep).re_node)); }
+      { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
 #line 1037 "hex_grammar.c" /* yacc.c:1257  */
         break;
 
     case 18: /* token_or_range  */
 #line 104 "hex_grammar.y" /* yacc.c:1257  */
-      { yr_re_node_destroy(((*yyvaluep).re_node)); }
+      { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
 #line 1043 "hex_grammar.c" /* yacc.c:1257  */
         break;
 
     case 19: /* token  */
 #line 105 "hex_grammar.y" /* yacc.c:1257  */
-      { yr_re_node_destroy(((*yyvaluep).re_node)); }
+      { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
 #line 1049 "hex_grammar.c" /* yacc.c:1257  */
         break;
 
     case 21: /* range  */
 #line 108 "hex_grammar.y" /* yacc.c:1257  */
-      { yr_re_node_destroy(((*yyvaluep).re_node)); }
+      { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
 #line 1055 "hex_grammar.c" /* yacc.c:1257  */
         break;
 
     case 22: /* alternatives  */
 #line 107 "hex_grammar.y" /* yacc.c:1257  */
-      { yr_re_node_destroy(((*yyvaluep).re_node)); }
+      { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
 #line 1061 "hex_grammar.c" /* yacc.c:1257  */
         break;
 
     case 23: /* byte  */
 #line 106 "hex_grammar.y" /* yacc.c:1257  */
-      { yr_re_node_destroy(((*yyvaluep).re_node)); }
+      { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
 #line 1067 "hex_grammar.c" /* yacc.c:1257  */
         break;
 
 
       default:
         break;
     }
   YY_IGNORE_MAYBE_UNINITIALIZED_END
 }
 
 
 
 
 /*----------.
 | yyparse.  |
 `----------*/
diff --git a/libyara/hex_grammar.y b/libyara/hex_grammar.y
index 5dbc463e..cefd999f 100644
--- a/libyara/hex_grammar.y
+++ b/libyara/hex_grammar.y
@@ -26,86 +26,86 @@ ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 %{
 
 #include <string.h>
 #include <limits.h>
 
 #include <yara/integers.h>
 #include <yara/utils.h>
 #include <yara/hex_lexer.h>
 #include <yara/limits.h>
 #include <yara/mem.h>
 #include <yara/error.h>
 
 
 #define STR_EXPAND(tok) #tok
 #define STR(tok) STR_EXPAND(tok)
 
 #define YYERROR_VERBOSE
 
 #define YYMALLOC yr_malloc
 #define YYFREE yr_free
 
 #define mark_as_not_fast_regexp() \
     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP
 
 #define fail_if_too_many_ast_levels(cleanup_code) \
     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \
     { \
       { cleanup_code } \
       yyerror(yyscanner, lex_env, "string too long"); \
       YYABORT; \
     }
 
 #define fail_if(x, error) \
     if (x) \
     { \
       lex_env->last_error_code = error; \
       YYABORT; \
     } \
 
 #define destroy_node_if(x, node) \
     if (x) \
     { \
       yr_re_node_destroy(node); \
     } \
 
 %}
 
 %name-prefix "hex_yy"
 %pure-parser
 
 %parse-param {void *yyscanner}
 %parse-param {HEX_LEX_ENVIRONMENT *lex_env}
 
 %lex-param {yyscan_t yyscanner}
 %lex-param {HEX_LEX_ENVIRONMENT *lex_env}
 
 %union {
   int64_t integer;
   RE_NODE *re_node;
 }
 
 %token <integer> _BYTE_
 %token <integer> _MASKED_BYTE_
 %token <integer> _NUMBER_
 
 %type <re_node> tokens
 %type <re_node> token_sequence
 %type <re_node> token_or_range
 %type <re_node> token byte
 %type <re_node> alternatives
 %type <re_node> range
 
-%destructor { yr_re_node_destroy($$); } tokens
-%destructor { yr_re_node_destroy($$); } token_sequence
-%destructor { yr_re_node_destroy($$); } token_or_range
-%destructor { yr_re_node_destroy($$); } token
-%destructor { yr_re_node_destroy($$); } byte
-%destructor { yr_re_node_destroy($$); } alternatives
-%destructor { yr_re_node_destroy($$); } range
+%destructor { yr_re_node_destroy($$); $$ = NULL; } tokens
+%destructor { yr_re_node_destroy($$); $$ = NULL; } token_sequence
+%destructor { yr_re_node_destroy($$); $$ = NULL; } token_or_range
+%destructor { yr_re_node_destroy($$); $$ = NULL; } token
+%destructor { yr_re_node_destroy($$); $$ = NULL; } byte
+%destructor { yr_re_node_destroy($$); $$ = NULL; } alternatives
+%destructor { yr_re_node_destroy($$); $$ = NULL; } range
 
 %%
 
diff --git a/libyara/re_grammar.c b/libyara/re_grammar.c
index 63c83a39..674acc03 100644
--- a/libyara/re_grammar.c
+++ b/libyara/re_grammar.c
@@ -1037,55 +1037,55 @@ static void
 yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, RE_LEX_ENVIRONMENT *lex_env)
 {
   YYUSE (yyvaluep);
   YYUSE (yyscanner);
   YYUSE (lex_env);
   if (!yymsg)
     yymsg = "Deleting";
   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
 
   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   switch (yytype)
     {
           case 6: /* _CLASS_  */
 #line 104 "re_grammar.y" /* yacc.c:1257  */
-      { yr_free(((*yyvaluep).re_class)); }
+      { yr_free(((*yyvaluep).re_class)); ((*yyvaluep).re_class) = NULL; }
 #line 1053 "re_grammar.c" /* yacc.c:1257  */
         break;
 
     case 26: /* alternative  */
 #line 105 "re_grammar.y" /* yacc.c:1257  */
-      { yr_re_node_destroy(((*yyvaluep).re_node)); }
+      { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
 #line 1059 "re_grammar.c" /* yacc.c:1257  */
         break;
 
     case 27: /* concatenation  */
 #line 106 "re_grammar.y" /* yacc.c:1257  */
-      { yr_re_node_destroy(((*yyvaluep).re_node)); }
+      { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
 #line 1065 "re_grammar.c" /* yacc.c:1257  */
         break;
 
     case 28: /* repeat  */
 #line 107 "re_grammar.y" /* yacc.c:1257  */
-      { yr_re_node_destroy(((*yyvaluep).re_node)); }
+      { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
 #line 1071 "re_grammar.c" /* yacc.c:1257  */
         break;
 
     case 29: /* single  */
 #line 108 "re_grammar.y" /* yacc.c:1257  */
-      { yr_re_node_destroy(((*yyvaluep).re_node)); }
+      { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }
 #line 1077 "re_grammar.c" /* yacc.c:1257  */
         break;
 
 
       default:
         break;
     }
   YY_IGNORE_MAYBE_UNINITIALIZED_END
 }
 
 
 
 
 /*----------.
 | yyparse.  |
 `----------*/
diff --git a/libyara/re_grammar.y b/libyara/re_grammar.y
index 256e1f82..77c608aa 100644
--- a/libyara/re_grammar.y
+++ b/libyara/re_grammar.y
@@ -26,86 +26,86 @@ ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 %{
 
 #include <yara/integers.h>
 #include <yara/utils.h>
 #include <yara/error.h>
 #include <yara/limits.h>
 #include <yara/mem.h>
 #include <yara/re.h>
 #include <yara/re_lexer.h>
 
 
 #define YYERROR_VERBOSE
 
 #define YYMALLOC yr_malloc
 #define YYFREE yr_free
 
 #define mark_as_not_fast_regexp() \
     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP
 
 #define fail_if_too_many_ast_levels(cleanup_code) \
     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \
     { \
       { cleanup_code } \
       yyerror(yyscanner, lex_env, "regexp too long"); \
       YYABORT; \
     }
 
 #define fail_if(x, error) \
     if (x) \
     { \
       lex_env->last_error_code = error; \
       YYABORT; \
     } \
 
 #define destroy_node_if(x, node) \
     if (x) \
     { \
       yr_re_node_destroy(node); \
     } \
 
 %}
 
 %name-prefix "re_yy"
 %pure-parser
 
 %parse-param {void *yyscanner}
 %parse-param {RE_LEX_ENVIRONMENT *lex_env}
 
 %lex-param {yyscan_t yyscanner}
 %lex-param {RE_LEX_ENVIRONMENT *lex_env}
 
 %union {
   int integer;
   uint32_t range;
   RE_NODE* re_node;
   RE_CLASS* re_class;
 }
 
 
 %token <integer> _CHAR_ _ANY_
 %token <range> _RANGE_
 %token <re_class> _CLASS_
 
 %token _WORD_CHAR_
 %token _NON_WORD_CHAR_
 %token _SPACE_
 %token _NON_SPACE_
 %token _DIGIT_
 %token _NON_DIGIT_
 %token _WORD_BOUNDARY_
 %token _NON_WORD_BOUNDARY_
 
 %type <re_node>  alternative concatenation repeat single
 
-%destructor { yr_free($$); } _CLASS_
-%destructor { yr_re_node_destroy($$); } alternative
-%destructor { yr_re_node_destroy($$); } concatenation
-%destructor { yr_re_node_destroy($$); } repeat
-%destructor { yr_re_node_destroy($$); } single
+%destructor { yr_free($$); $$ = NULL; } _CLASS_
+%destructor { yr_re_node_destroy($$); $$ = NULL; } alternative
+%destructor { yr_re_node_destroy($$); $$ = NULL; } concatenation
+%destructor { yr_re_node_destroy($$); $$ = NULL; } repeat
+%destructor { yr_re_node_destroy($$); $$ = NULL; } single
 
 %%
 
