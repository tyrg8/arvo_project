commit ac3737372a00b8778b528094dd5bd58a74f67d42
Merge: 9701b330 4cb1f663
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Sun Nov 17 13:08:41 2019 +0100

    Merge pull request #1217 from rouault/fix_ossfuzz_18979
    
    pi.c: avoid integer overflow, resulting in later invalid access to memory in opj_t2_decode_packets()

diff --git a/src/lib/openjp2/pi.c b/src/lib/openjp2/pi.c
index 4a6ed68e..3ddb4a0c 100644
--- a/src/lib/openjp2/pi.c
+++ b/src/lib/openjp2/pi.c
@@ -338,121 +338,121 @@ LABEL_SKIP:
 static OPJ_BOOL opj_pi_next_rpcl(opj_pi_iterator_t * pi)
 {
     opj_pi_comp_t *comp = NULL;
     opj_pi_resolution_t *res = NULL;
     OPJ_UINT32 index = 0;
 
     if (!pi->first) {
         goto LABEL_SKIP;
     } else {
         OPJ_UINT32 compno, resno;
         pi->first = 0;
         pi->dx = 0;
         pi->dy = 0;
         for (compno = 0; compno < pi->numcomps; compno++) {
             comp = &pi->comps[compno];
             for (resno = 0; resno < comp->numresolutions; resno++) {
                 OPJ_UINT32 dx, dy;
                 res = &comp->resolutions[resno];
                 if (res->pdx + comp->numresolutions - 1 - resno < 32 &&
                         comp->dx <= UINT_MAX / (1u << (res->pdx + comp->numresolutions - 1 - resno))) {
                     dx = comp->dx * (1u << (res->pdx + comp->numresolutions - 1 - resno));
                     pi->dx = !pi->dx ? dx : opj_uint_min(pi->dx, dx);
                 }
                 if (res->pdy + comp->numresolutions - 1 - resno < 32 &&
                         comp->dy <= UINT_MAX / (1u << (res->pdy + comp->numresolutions - 1 - resno))) {
                     dy = comp->dy * (1u << (res->pdy + comp->numresolutions - 1 - resno));
                     pi->dy = !pi->dy ? dy : opj_uint_min(pi->dy, dy);
                 }
             }
         }
         if (pi->dx == 0 || pi->dy == 0) {
             return OPJ_FALSE;
         }
     }
     if (!pi->tp_on) {
         pi->poc.ty0 = pi->ty0;
         pi->poc.tx0 = pi->tx0;
         pi->poc.ty1 = pi->ty1;
         pi->poc.tx1 = pi->tx1;
     }
     for (pi->resno = pi->poc.resno0; pi->resno < pi->poc.resno1; pi->resno++) {
-        for (pi->y = pi->poc.ty0; pi->y < pi->poc.ty1;
-                pi->y += (OPJ_INT32)(pi->dy - (OPJ_UINT32)(pi->y % (OPJ_INT32)pi->dy))) {
-            for (pi->x = pi->poc.tx0; pi->x < pi->poc.tx1;
-                    pi->x += (OPJ_INT32)(pi->dx - (OPJ_UINT32)(pi->x % (OPJ_INT32)pi->dx))) {
+        for (pi->y = (OPJ_UINT32)pi->poc.ty0; pi->y < (OPJ_UINT32)pi->poc.ty1;
+                pi->y += (pi->dy - (pi->y % pi->dy))) {
+            for (pi->x = (OPJ_UINT32)pi->poc.tx0; pi->x < (OPJ_UINT32)pi->poc.tx1;
+                    pi->x += (pi->dx - (pi->x % pi->dx))) {
                 for (pi->compno = pi->poc.compno0; pi->compno < pi->poc.compno1; pi->compno++) {
                     OPJ_UINT32 levelno;
                     OPJ_INT32 trx0, try0;
                     OPJ_INT32  trx1, try1;
                     OPJ_UINT32  rpx, rpy;
                     OPJ_INT32  prci, prcj;
                     comp = &pi->comps[pi->compno];
                     if (pi->resno >= comp->numresolutions) {
                         continue;
                     }
                     res = &comp->resolutions[pi->resno];
                     levelno = comp->numresolutions - 1 - pi->resno;
                     /* Avoids division by zero */
                     /* Relates to id_000004,sig_06,src_000679,op_arith8,pos_49,val_-17 */
                     /* of  https://github.com/uclouvain/openjpeg/issues/938 */
                     if (levelno >= 32 ||
                             ((comp->dx << levelno) >> levelno) != comp->dx ||
                             ((comp->dy << levelno) >> levelno) != comp->dy) {
                         continue;
                     }
                     if ((comp->dx << levelno) > INT_MAX ||
                             (comp->dy << levelno) > INT_MAX) {
                         continue;
                     }
                     trx0 = opj_int_ceildiv(pi->tx0, (OPJ_INT32)(comp->dx << levelno));
                     try0 = opj_int_ceildiv(pi->ty0, (OPJ_INT32)(comp->dy << levelno));
                     trx1 = opj_int_ceildiv(pi->tx1, (OPJ_INT32)(comp->dx << levelno));
                     try1 = opj_int_ceildiv(pi->ty1, (OPJ_INT32)(comp->dy << levelno));
                     rpx = res->pdx + levelno;
                     rpy = res->pdy + levelno;
 
                     /* To avoid divisions by zero / undefined behaviour on shift */
                     /* in below tests */
                     /* Fixes reading id:000026,sig:08,src:002419,op:int32,pos:60,val:+32 */
                     /* of https://github.com/uclouvain/openjpeg/issues/938 */
                     if (rpx >= 31 || ((comp->dx << rpx) >> rpx) != comp->dx ||
                             rpy >= 31 || ((comp->dy << rpy) >> rpy) != comp->dy) {
                         continue;
                     }
 
                     /* See ISO-15441. B.12.1.3 Resolution level-position-component-layer progression */
                     if (!((pi->y % (OPJ_INT32)(comp->dy << rpy) == 0) || ((pi->y == pi->ty0) &&
                             ((try0 << levelno) % (1 << rpy))))) {
                         continue;
                     }
                     if (!((pi->x % (OPJ_INT32)(comp->dx << rpx) == 0) || ((pi->x == pi->tx0) &&
                             ((trx0 << levelno) % (1 << rpx))))) {
                         continue;
                     }
 
                     if ((res->pw == 0) || (res->ph == 0)) {
                         continue;
                     }
 
                     if ((trx0 == trx1) || (try0 == try1)) {
                         continue;
                     }
 
                     prci = opj_int_floordivpow2(opj_int_ceildiv(pi->x,
                                                 (OPJ_INT32)(comp->dx << levelno)), (OPJ_INT32)res->pdx)
                            - opj_int_floordivpow2(trx0, (OPJ_INT32)res->pdx);
                     prcj = opj_int_floordivpow2(opj_int_ceildiv(pi->y,
                                                 (OPJ_INT32)(comp->dy << levelno)), (OPJ_INT32)res->pdy)
                            - opj_int_floordivpow2(try0, (OPJ_INT32)res->pdy);
                     pi->precno = (OPJ_UINT32)(prci + prcj * (OPJ_INT32)res->pw);
                     for (pi->layno = pi->poc.layno0; pi->layno < pi->poc.layno1; pi->layno++) {
                         index = pi->layno * pi->step_l + pi->resno * pi->step_r + pi->compno *
                                 pi->step_c + pi->precno * pi->step_p;
                         if (index >= pi->include_size) {
                             opj_pi_emit_error(pi, "Invalid access to pi->include");
                             return OPJ_FALSE;
                         }
                         if (!pi->include[index]) {
                             pi->include[index] = 1;
                             return OPJ_TRUE;
                         }
@@ -470,120 +470,120 @@ LABEL_SKIP:
 static OPJ_BOOL opj_pi_next_pcrl(opj_pi_iterator_t * pi)
 {
     opj_pi_comp_t *comp = NULL;
     opj_pi_resolution_t *res = NULL;
     OPJ_UINT32 index = 0;
 
     if (!pi->first) {
         comp = &pi->comps[pi->compno];
         goto LABEL_SKIP;
     } else {
         OPJ_UINT32 compno, resno;
         pi->first = 0;
         pi->dx = 0;
         pi->dy = 0;
         for (compno = 0; compno < pi->numcomps; compno++) {
             comp = &pi->comps[compno];
             for (resno = 0; resno < comp->numresolutions; resno++) {
                 OPJ_UINT32 dx, dy;
                 res = &comp->resolutions[resno];
                 if (res->pdx + comp->numresolutions - 1 - resno < 32 &&
                         comp->dx <= UINT_MAX / (1u << (res->pdx + comp->numresolutions - 1 - resno))) {
                     dx = comp->dx * (1u << (res->pdx + comp->numresolutions - 1 - resno));
                     pi->dx = !pi->dx ? dx : opj_uint_min(pi->dx, dx);
                 }
                 if (res->pdy + comp->numresolutions - 1 - resno < 32 &&
                         comp->dy <= UINT_MAX / (1u << (res->pdy + comp->numresolutions - 1 - resno))) {
                     dy = comp->dy * (1u << (res->pdy + comp->numresolutions - 1 - resno));
                     pi->dy = !pi->dy ? dy : opj_uint_min(pi->dy, dy);
                 }
             }
         }
         if (pi->dx == 0 || pi->dy == 0) {
             return OPJ_FALSE;
         }
     }
     if (!pi->tp_on) {
         pi->poc.ty0 = pi->ty0;
         pi->poc.tx0 = pi->tx0;
         pi->poc.ty1 = pi->ty1;
         pi->poc.tx1 = pi->tx1;
     }
-    for (pi->y = pi->poc.ty0; pi->y < pi->poc.ty1;
-            pi->y += (OPJ_INT32)(pi->dy - (OPJ_UINT32)(pi->y % (OPJ_INT32)pi->dy))) {
-        for (pi->x = pi->poc.tx0; pi->x < pi->poc.tx1;
-                pi->x += (OPJ_INT32)(pi->dx - (OPJ_UINT32)(pi->x % (OPJ_INT32)pi->dx))) {
+    for (pi->y = (OPJ_UINT32)pi->poc.ty0; pi->y < (OPJ_UINT32)pi->poc.ty1;
+            pi->y += (pi->dy - (pi->y % pi->dy))) {
+        for (pi->x = (OPJ_UINT32)pi->poc.tx0; pi->x < (OPJ_UINT32)pi->poc.tx1;
+                pi->x += (pi->dx - (pi->x % pi->dx))) {
             for (pi->compno = pi->poc.compno0; pi->compno < pi->poc.compno1; pi->compno++) {
                 comp = &pi->comps[pi->compno];
                 for (pi->resno = pi->poc.resno0;
                         pi->resno < opj_uint_min(pi->poc.resno1, comp->numresolutions); pi->resno++) {
                     OPJ_UINT32 levelno;
                     OPJ_INT32 trx0, try0;
                     OPJ_INT32 trx1, try1;
                     OPJ_UINT32 rpx, rpy;
                     OPJ_INT32 prci, prcj;
                     res = &comp->resolutions[pi->resno];
                     levelno = comp->numresolutions - 1 - pi->resno;
                     /* Avoids division by zero */
                     /* Relates to id_000004,sig_06,src_000679,op_arith8,pos_49,val_-17 */
                     /* of  https://github.com/uclouvain/openjpeg/issues/938 */
                     if (levelno >= 32 ||
                             ((comp->dx << levelno) >> levelno) != comp->dx ||
                             ((comp->dy << levelno) >> levelno) != comp->dy) {
                         continue;
                     }
                     if ((comp->dx << levelno) > INT_MAX ||
                             (comp->dy << levelno) > INT_MAX) {
                         continue;
                     }
                     trx0 = opj_int_ceildiv(pi->tx0, (OPJ_INT32)(comp->dx << levelno));
                     try0 = opj_int_ceildiv(pi->ty0, (OPJ_INT32)(comp->dy << levelno));
                     trx1 = opj_int_ceildiv(pi->tx1, (OPJ_INT32)(comp->dx << levelno));
                     try1 = opj_int_ceildiv(pi->ty1, (OPJ_INT32)(comp->dy << levelno));
                     rpx = res->pdx + levelno;
                     rpy = res->pdy + levelno;
 
                     /* To avoid divisions by zero / undefined behaviour on shift */
                     /* in below tests */
                     /* Relates to id:000019,sig:08,src:001098,op:flip1,pos:49 */
                     /* of https://github.com/uclouvain/openjpeg/issues/938 */
                     if (rpx >= 31 || ((comp->dx << rpx) >> rpx) != comp->dx ||
                             rpy >= 31 || ((comp->dy << rpy) >> rpy) != comp->dy) {
                         continue;
                     }
 
                     /* See ISO-15441. B.12.1.4 Position-component-resolution level-layer progression */
                     if (!((pi->y % (OPJ_INT32)(comp->dy << rpy) == 0) || ((pi->y == pi->ty0) &&
                             ((try0 << levelno) % (1 << rpy))))) {
                         continue;
                     }
                     if (!((pi->x % (OPJ_INT32)(comp->dx << rpx) == 0) || ((pi->x == pi->tx0) &&
                             ((trx0 << levelno) % (1 << rpx))))) {
                         continue;
                     }
 
                     if ((res->pw == 0) || (res->ph == 0)) {
                         continue;
                     }
 
                     if ((trx0 == trx1) || (try0 == try1)) {
                         continue;
                     }
 
                     prci = opj_int_floordivpow2(opj_int_ceildiv(pi->x,
                                                 (OPJ_INT32)(comp->dx << levelno)), (OPJ_INT32)res->pdx)
                            - opj_int_floordivpow2(trx0, (OPJ_INT32)res->pdx);
                     prcj = opj_int_floordivpow2(opj_int_ceildiv(pi->y,
                                                 (OPJ_INT32)(comp->dy << levelno)), (OPJ_INT32)res->pdy)
                            - opj_int_floordivpow2(try0, (OPJ_INT32)res->pdy);
                     pi->precno = (OPJ_UINT32)(prci + prcj * (OPJ_INT32)res->pw);
                     for (pi->layno = pi->poc.layno0; pi->layno < pi->poc.layno1; pi->layno++) {
                         index = pi->layno * pi->step_l + pi->resno * pi->step_r + pi->compno *
                                 pi->step_c + pi->precno * pi->step_p;
                         if (index >= pi->include_size) {
                             opj_pi_emit_error(pi, "Invalid access to pi->include");
                             return OPJ_FALSE;
                         }
                         if (!pi->include[index]) {
                             pi->include[index] = 1;
                             return OPJ_TRUE;
                         }
@@ -601,117 +601,117 @@ LABEL_SKIP:
 static OPJ_BOOL opj_pi_next_cprl(opj_pi_iterator_t * pi)
 {
     opj_pi_comp_t *comp = NULL;
     opj_pi_resolution_t *res = NULL;
     OPJ_UINT32 index = 0;
 
     if (!pi->first) {
         comp = &pi->comps[pi->compno];
         goto LABEL_SKIP;
     } else {
         pi->first = 0;
     }
 
     for (pi->compno = pi->poc.compno0; pi->compno < pi->poc.compno1; pi->compno++) {
         OPJ_UINT32 resno;
         comp = &pi->comps[pi->compno];
         pi->dx = 0;
         pi->dy = 0;
         for (resno = 0; resno < comp->numresolutions; resno++) {
             OPJ_UINT32 dx, dy;
             res = &comp->resolutions[resno];
             if (res->pdx + comp->numresolutions - 1 - resno < 32 &&
                     comp->dx <= UINT_MAX / (1u << (res->pdx + comp->numresolutions - 1 - resno))) {
                 dx = comp->dx * (1u << (res->pdx + comp->numresolutions - 1 - resno));
                 pi->dx = !pi->dx ? dx : opj_uint_min(pi->dx, dx);
             }
             if (res->pdy + comp->numresolutions - 1 - resno < 32 &&
                     comp->dy <= UINT_MAX / (1u << (res->pdy + comp->numresolutions - 1 - resno))) {
                 dy = comp->dy * (1u << (res->pdy + comp->numresolutions - 1 - resno));
                 pi->dy = !pi->dy ? dy : opj_uint_min(pi->dy, dy);
             }
         }
         if (pi->dx == 0 || pi->dy == 0) {
             return OPJ_FALSE;
         }
         if (!pi->tp_on) {
             pi->poc.ty0 = pi->ty0;
             pi->poc.tx0 = pi->tx0;
             pi->poc.ty1 = pi->ty1;
             pi->poc.tx1 = pi->tx1;
         }
-        for (pi->y = pi->poc.ty0; pi->y < pi->poc.ty1;
-                pi->y += (OPJ_INT32)(pi->dy - (OPJ_UINT32)(pi->y % (OPJ_INT32)pi->dy))) {
-            for (pi->x = pi->poc.tx0; pi->x < pi->poc.tx1;
-                    pi->x += (OPJ_INT32)(pi->dx - (OPJ_UINT32)(pi->x % (OPJ_INT32)pi->dx))) {
+        for (pi->y = (OPJ_UINT32)pi->poc.ty0; pi->y < (OPJ_UINT32)pi->poc.ty1;
+                pi->y += (pi->dy - (pi->y % pi->dy))) {
+            for (pi->x = (OPJ_UINT32)pi->poc.tx0; pi->x < (OPJ_UINT32)pi->poc.tx1;
+                    pi->x += (pi->dx - (pi->x % pi->dx))) {
                 for (pi->resno = pi->poc.resno0;
                         pi->resno < opj_uint_min(pi->poc.resno1, comp->numresolutions); pi->resno++) {
                     OPJ_UINT32 levelno;
                     OPJ_INT32 trx0, try0;
                     OPJ_INT32 trx1, try1;
                     OPJ_UINT32 rpx, rpy;
                     OPJ_INT32 prci, prcj;
                     res = &comp->resolutions[pi->resno];
                     levelno = comp->numresolutions - 1 - pi->resno;
                     /* Avoids division by zero on id_000004,sig_06,src_000679,op_arith8,pos_49,val_-17 */
                     /* of  https://github.com/uclouvain/openjpeg/issues/938 */
                     if (levelno >= 32 ||
                             ((comp->dx << levelno) >> levelno) != comp->dx ||
                             ((comp->dy << levelno) >> levelno) != comp->dy) {
                         continue;
                     }
                     if ((comp->dx << levelno) > INT_MAX ||
                             (comp->dy << levelno) > INT_MAX) {
                         continue;
                     }
                     trx0 = opj_int_ceildiv(pi->tx0, (OPJ_INT32)(comp->dx << levelno));
                     try0 = opj_int_ceildiv(pi->ty0, (OPJ_INT32)(comp->dy << levelno));
                     trx1 = opj_int_ceildiv(pi->tx1, (OPJ_INT32)(comp->dx << levelno));
                     try1 = opj_int_ceildiv(pi->ty1, (OPJ_INT32)(comp->dy << levelno));
                     rpx = res->pdx + levelno;
                     rpy = res->pdy + levelno;
 
                     /* To avoid divisions by zero / undefined behaviour on shift */
                     /* in below tests */
                     /* Fixes reading id:000019,sig:08,src:001098,op:flip1,pos:49 */
                     /* of https://github.com/uclouvain/openjpeg/issues/938 */
                     if (rpx >= 31 || ((comp->dx << rpx) >> rpx) != comp->dx ||
                             rpy >= 31 || ((comp->dy << rpy) >> rpy) != comp->dy) {
                         continue;
                     }
 
                     /* See ISO-15441. B.12.1.5 Component-position-resolution level-layer progression */
                     if (!((pi->y % (OPJ_INT32)(comp->dy << rpy) == 0) || ((pi->y == pi->ty0) &&
                             ((try0 << levelno) % (1 << rpy))))) {
                         continue;
                     }
                     if (!((pi->x % (OPJ_INT32)(comp->dx << rpx) == 0) || ((pi->x == pi->tx0) &&
                             ((trx0 << levelno) % (1 << rpx))))) {
                         continue;
                     }
 
                     if ((res->pw == 0) || (res->ph == 0)) {
                         continue;
                     }
 
                     if ((trx0 == trx1) || (try0 == try1)) {
                         continue;
                     }
 
                     prci = opj_int_floordivpow2(opj_int_ceildiv(pi->x,
                                                 (OPJ_INT32)(comp->dx << levelno)), (OPJ_INT32)res->pdx)
                            - opj_int_floordivpow2(trx0, (OPJ_INT32)res->pdx);
                     prcj = opj_int_floordivpow2(opj_int_ceildiv(pi->y,
                                                 (OPJ_INT32)(comp->dy << levelno)), (OPJ_INT32)res->pdy)
                            - opj_int_floordivpow2(try0, (OPJ_INT32)res->pdy);
                     pi->precno = (OPJ_UINT32)(prci + prcj * (OPJ_INT32)res->pw);
                     for (pi->layno = pi->poc.layno0; pi->layno < pi->poc.layno1; pi->layno++) {
                         index = pi->layno * pi->step_l + pi->resno * pi->step_r + pi->compno *
                                 pi->step_c + pi->precno * pi->step_p;
                         if (index >= pi->include_size) {
                             opj_pi_emit_error(pi, "Invalid access to pi->include");
                             return OPJ_FALSE;
                         }
                         if (!pi->include[index]) {
                             pi->include[index] = 1;
                             return OPJ_TRUE;
                         }
diff --git a/src/lib/openjp2/pi.h b/src/lib/openjp2/pi.h
index 8c0dc25c..87380208 100644
--- a/src/lib/openjp2/pi.h
+++ b/src/lib/openjp2/pi.h
@@ -72,53 +72,53 @@ Packet iterator
 */
 typedef struct opj_pi_iterator {
     /** Enabling Tile part generation*/
     OPJ_BYTE tp_on;
     /** precise if the packet has been already used (useful for progression order change) */
     OPJ_INT16 *include;
     /** Number of elements in include array */
     OPJ_UINT32 include_size;
     /** layer step used to localize the packet in the include vector */
     OPJ_UINT32 step_l;
     /** resolution step used to localize the packet in the include vector */
     OPJ_UINT32 step_r;
     /** component step used to localize the packet in the include vector */
     OPJ_UINT32 step_c;
     /** precinct step used to localize the packet in the include vector */
     OPJ_UINT32 step_p;
     /** component that identify the packet */
     OPJ_UINT32 compno;
     /** resolution that identify the packet */
     OPJ_UINT32 resno;
     /** precinct that identify the packet */
     OPJ_UINT32 precno;
     /** layer that identify the packet */
     OPJ_UINT32 layno;
     /** 0 if the first packet */
     OPJ_BOOL first;
     /** progression order change information */
     opj_poc_t poc;
     /** number of components in the image */
     OPJ_UINT32 numcomps;
     /** Components*/
     opj_pi_comp_t *comps;
     /** FIXME DOC*/
-    OPJ_INT32 tx0, ty0, tx1, ty1;
+    OPJ_UINT32 tx0, ty0, tx1, ty1;
     /** FIXME DOC*/
-    OPJ_INT32 x, y;
+    OPJ_UINT32 x, y;
     /** FIXME DOC*/
     OPJ_UINT32 dx, dy;
 } opj_pi_iterator_t;
 
 /** @name Exported functions */
 /*@{*/
 /* ----------------------------------------------------------------------- */
 /**
  * Creates a packet iterator for encoding.
  *
  * @param   image       the image being encoded.
  * @param   cp      the coding parameters.
  * @param   tileno  index of the tile being encoded.
  * @param   t2_mode the type of pass for generating the packet iterator
  *
  * @return  a list of packet iterator that points to the first packet of the tile (not true).
 */
