commit 6b1247e8a6ce5708d57187cb33db5f6da96f86dc
Author: Yann Ylavic <ylavic@apache.org>
Date:   Sun Nov 14 11:22:07 2021 +0000

    Sync r1895020 and r1895021 from libapreq.
    
    
    
    git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1895023 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/server/apreq_parser_multipart.c b/server/apreq_parser_multipart.c
index e4c4d71b91..a6c0151367 100644
--- a/server/apreq_parser_multipart.c
+++ b/server/apreq_parser_multipart.c
@@ -213,55 +213,57 @@ static
 struct mfd_ctx * create_multipart_context(const char *content_type,
                                           apr_pool_t *pool,
                                           apr_bucket_alloc_t *ba,
                                           apr_size_t brigade_limit,
                                           const char *temp_dir,
                                           unsigned level)
 
 {
     apr_status_t s;
     apr_size_t blen;
     struct mfd_ctx *ctx;
     const char *attr;
     char *buf;
 
     attr = (content_type) ? strchr(content_type, ';') : NULL;
     if (!attr)
         return NULL; /* missing semicolon */
 
     ctx = apr_palloc(pool, sizeof *ctx);
 
     attr++;
     blen = strlen(attr) + 1;
     buf = apr_palloc(pool, 4 + blen);
     buf += 4;
     memcpy(buf, attr, blen);
 
     s = apreq_header_attribute(buf, "boundary", 8,
                                (const char **)&ctx->bdry, &blen);
     if (s != APR_SUCCESS)
         return NULL; /* missing boundary */
+    if (!ctx->bdry || !*ctx->bdry)
+        return NULL; /* boundary with no or empty value */
 
     ctx->bdry[blen] = 0;
 
     *--ctx->bdry = '-';
     *--ctx->bdry = '-';
     *--ctx->bdry = '\n';
     *--ctx->bdry = '\r';
 
     ctx->status = MFD_INIT;
     ctx->pattern = apr_strmatch_precompile(pool, ctx->bdry, 1);
     ctx->hdr_parser = apreq_parser_make(pool, ba, "",
                                         apreq_parse_headers,
                                         brigade_limit,
                                         temp_dir, NULL, NULL);
     ctx->info = NULL;
     ctx->bb = apr_brigade_create(pool, ba);
     ctx->in = apr_brigade_create(pool, ba);
     ctx->eos = apr_bucket_eos_create(ba);
     ctx->next_parser = NULL;
     ctx->param_name = NULL;
     ctx->upload = NULL;
     ctx->level = level;
 
     return ctx;
 }
diff --git a/server/apreq_util.c b/server/apreq_util.c
index eba8b8b3f6..11b66f9a14 100644
--- a/server/apreq_util.c
+++ b/server/apreq_util.c
@@ -846,155 +846,156 @@ APREQ_DECLARE(apr_status_t) apreq_file_mktemp(apr_file_t **fp,
 APREQ_DECLARE(apr_status_t)
     apreq_header_attribute(const char *hdr,
                            const char *name, const apr_size_t nlen,
                            const char **val, apr_size_t *vlen)
 {
     int done = 0;
 
     if (!nlen)
         return APREQ_ERROR_NOATTR;
 
     do {
         const char *hde, *v;
         apr_size_t tail = 0;
 
         /* Parse the name => [hdr:hde[ */
         hde = hdr;
     look_for_end_name:
         switch (*hde) {
         case 0:
         case '\r':
         case '\n':
             done = 1;
         case '=':
         case ';':
         case ',':
-            v = hde + 1;
+            v = hde;
             hde -= tail;
             break;
         case ' ':
         case '\t':
             if (hde == hdr)
                 ++hdr;
             else
                 ++tail;
             ++hde;
             goto look_for_end_name;
         default:
             /* The name is a token */
             if (!IS_TOKEN_CHAR(*hde))
                 return APREQ_ERROR_BADCHAR;
             /* Nothing after the tail */
             if (tail)
                 return APREQ_ERROR_BADATTR;
             ++hde;
             goto look_for_end_name;
         }
 
         /* Parse the value => (*val, *vlen) */
-        if (v[-1] == '=') {
+        if (*v == '=') {
             if (hde == hdr) {
                 /* The name can't be empty */
                 return APREQ_ERROR_BADATTR;
             }
 
+            ++v;
             while (IS_SPACE_CHAR(*v))
                 ++v;
 
             /* Quoted string ? */
             if (*v == '"') {
                 *val = ++v;
 
                 /* XXX: the interface does not permit unescaping,
                  *      it should have pool to allocate from.
                  * The caller can't know whether a returned '\\' is
                  * a quoted-char or not..
                  */
             look_for_end_quote:
                 switch (*v) {
                 case 0:
                 case '\r':
                 case '\n':
                     return APREQ_ERROR_BADSEQ;
                 case '"':
                     *vlen = v - *val;
                     break;
                 case '\\':
                     if (v[1] != 0)
                         ++v;
                     ++v;
                     goto look_for_end_quote;
                 default:
                     if (apr_iscntrl(*v))
                         return APREQ_ERROR_BADCHAR;
                     ++v;
                     goto look_for_end_quote;
                 }
 
             look_for_after_quote:
                 switch (*v) {
                 case 0:
                 case '\r':
                 case '\n':
                     done = 1;
                 case ';':
                 case ',':
                     break;
                 case ' ':
                 case '\t':
                     goto look_for_after_quote;
                 default:
                     if (apr_iscntrl(*v))
                         return APREQ_ERROR_BADCHAR;
                     return APREQ_ERROR_BADSEQ;
                 }
             }
             else {
                 *val = v;
                 tail = 0;
 
             look_for_end_value:
                 switch (*v) {
                 case 0:
                 case '\r':
                 case '\n':
                     done = 1;
                 case ';':
                 case ',':
                     *vlen = v - *val - tail;
                     break;
                 case ' ':
                 case '\t':
                     if (*val == v)
                         ++*val;
                     else
                         ++tail;
                     ++v;
                     goto look_for_end_value;
                 default:
                     if (apr_iscntrl(*v))
                         return APREQ_ERROR_BADCHAR;
                     ++v;
                     tail = 0;
                     goto look_for_end_value;
                 }
             }
         }
         else {
             *val = NULL;
             *vlen = 0;
         }
 
         if (hdr + nlen == hde && strncasecmp(hdr, name, nlen) == 0) {
             return APR_SUCCESS;
         }
 
         hdr = v + 1;
     } while (!done);
 
     return APREQ_ERROR_NOATTR;
 }
 
 
 
 #define BUCKET_IS_SPOOL(e) ((e)->type == &spool_bucket_type)
 #define FILE_BUCKET_LIMIT      ((apr_size_t)-1 - 1)
