commit 943a465d7b76b26de83d2038226c72bcf619c29f
Author: Albert Astals Cid <aacid@kde.org>
Date:   Tue May 29 20:23:51 2018 +0200

    SplashFTFont: Initialize textScale
    
    fixes oss-fuzz/8616

diff --git a/splash/SplashFTFont.cc b/splash/SplashFTFont.cc
index 1f1c6ada..79b7fdd4 100644
--- a/splash/SplashFTFont.cc
+++ b/splash/SplashFTFont.cc
@@ -60,172 +60,173 @@ static int glyphPathCubicTo(const FT_Vector *ctrl1, const FT_Vector *ctrl2,
 SplashFTFont::SplashFTFont(SplashFTFontFile *fontFileA, SplashCoord *matA,
 			   SplashCoord *textMatA):
   SplashFont(fontFileA, matA, textMatA, fontFileA->engine->aa), 
+  textScale(0),
   enableFreeTypeHinting(fontFileA->engine->enableFreeTypeHinting),
   enableSlightHinting(fontFileA->engine->enableSlightHinting)
 {
   FT_Face face;
   int div;
   int x, y;
 #ifdef USE_FIXEDPOINT
   SplashCoord scale;
 #endif
 
   face = fontFileA->face;
   if (FT_New_Size(face, &sizeObj)) {
     return;
   }
   face->size = sizeObj;
   size = splashRound(splashDist(0, 0, mat[2], mat[3]));
   if (size < 1) {
     size = 1;
   }
   if (FT_Set_Pixel_Sizes(face, 0, size)) {
     return;
   }
   // if the textMat values are too small, FreeType's fixed point
   // arithmetic doesn't work so well
   textScale = splashDist(0, 0, textMat[2], textMat[3]) / size;
 
   if (unlikely(textScale == 0)) {
     return;
   }
 
   div = face->bbox.xMax > 20000 ? 65536 : 1;
 
 #ifdef USE_FIXEDPOINT
   scale = (SplashCoord)1 / (SplashCoord)face->units_per_EM;
 
   // transform the four corners of the font bounding box -- the min
   // and max values form the bounding box of the transformed font
   x = (int)(mat[0] * (scale * (face->bbox.xMin / div)) +
 	    mat[2] * (scale * (face->bbox.yMin / div)));
   xMin = xMax = x;
   y = (int)(mat[1] * (scale * (face->bbox.xMin / div)) +
 	    mat[3] * (scale * (face->bbox.yMin / div)));
   yMin = yMax = y;
   x = (int)(mat[0] * (scale * (face->bbox.xMin / div)) +
 	    mat[2] * (scale * (face->bbox.yMax / div)));
   if (x < xMin) {
     xMin = x;
   } else if (x > xMax) {
     xMax = x;
   }
   y = (int)(mat[1] * (scale * (face->bbox.xMin / div)) +
 	    mat[3] * (scale * (face->bbox.yMax / div)));
   if (y < yMin) {
     yMin = y;
   } else if (y > yMax) {
     yMax = y;
   }
   x = (int)(mat[0] * (scale * (face->bbox.xMax / div)) +
 	    mat[2] * (scale * (face->bbox.yMin / div)));
   if (x < xMin) {
     xMin = x;
   } else if (x > xMax) {
     xMax = x;
   }
   y = (int)(mat[1] * (scale * (face->bbox.xMax / div)) +
 	    mat[3] * (scale * (face->bbox.yMin / div)));
   if (y < yMin) {
     yMin = y;
   } else if (y > yMax) {
     yMax = y;
   }
   x = (int)(mat[0] * (scale * (face->bbox.xMax / div)) +
 	    mat[2] * (scale * (face->bbox.yMax / div)));
   if (x < xMin) {
     xMin = x;
   } else if (x > xMax) {
     xMax = x;
   }
   y = (int)(mat[1] * (scale * (face->bbox.xMax / div)) +
 	    mat[3] * (scale * (face->bbox.yMax / div)));
   if (y < yMin) {
     yMin = y;
   } else if (y > yMax) {
     yMax = y;
   }
 #else // USE_FIXEDPOINT
   // transform the four corners of the font bounding box -- the min
   // and max values form the bounding box of the transformed font
   x = (int)((mat[0] * face->bbox.xMin + mat[2] * face->bbox.yMin) /
 	    (div * face->units_per_EM));
   xMin = xMax = x;
   y = (int)((mat[1] * face->bbox.xMin + mat[3] * face->bbox.yMin) /
 	    (div * face->units_per_EM));
   yMin = yMax = y;
   x = (int)((mat[0] * face->bbox.xMin + mat[2] * face->bbox.yMax) /
 	    (div * face->units_per_EM));
   if (x < xMin) {
     xMin = x;
   } else if (x > xMax) {
     xMax = x;
   }
   y = (int)((mat[1] * face->bbox.xMin + mat[3] * face->bbox.yMax) /
 	    (div * face->units_per_EM));
   if (y < yMin) {
     yMin = y;
   } else if (y > yMax) {
     yMax = y;
   }
   x = (int)((mat[0] * face->bbox.xMax + mat[2] * face->bbox.yMin) /
 	    (div * face->units_per_EM));
   if (x < xMin) {
     xMin = x;
   } else if (x > xMax) {
     xMax = x;
   }
   y = (int)((mat[1] * face->bbox.xMax + mat[3] * face->bbox.yMin) /
 	    (div * face->units_per_EM));
   if (y < yMin) {
     yMin = y;
   } else if (y > yMax) {
     yMax = y;
   }
   x = (int)((mat[0] * face->bbox.xMax + mat[2] * face->bbox.yMax) /
 	    (div * face->units_per_EM));
   if (x < xMin) {
     xMin = x;
   } else if (x > xMax) {
     xMax = x;
   }
   y = (int)((mat[1] * face->bbox.xMax + mat[3] * face->bbox.yMax) /
 	    (div * face->units_per_EM));
   if (y < yMin) {
     yMin = y;
   } else if (y > yMax) {
     yMax = y;
   }
 #endif // USE_FIXEDPOINT
   // This is a kludge: some buggy PDF generators embed fonts with
   // zero bounding boxes.
   if (xMax == xMin) {
     xMin = 0;
     xMax = size;
   }
   if (yMax == yMin) {
     yMin = 0;
     yMax = (int)((SplashCoord)1.2 * size);
   }
 
   // compute the transform matrix
 #ifdef USE_FIXEDPOINT
   matrix.xx = (FT_Fixed)((mat[0] / size).get16Dot16());
   matrix.yx = (FT_Fixed)((mat[1] / size).get16Dot16());
   matrix.xy = (FT_Fixed)((mat[2] / size).get16Dot16());
   matrix.yy = (FT_Fixed)((mat[3] / size).get16Dot16());
   textMatrix.xx = (FT_Fixed)((textMat[0] / (textScale * size)).get16Dot16());
   textMatrix.yx = (FT_Fixed)((textMat[1] / (textScale * size)).get16Dot16());
   textMatrix.xy = (FT_Fixed)((textMat[2] / (textScale * size)).get16Dot16());
   textMatrix.yy = (FT_Fixed)((textMat[3] / (textScale * size)).get16Dot16());
 #else
   matrix.xx = (FT_Fixed)((mat[0] / size) * 65536);
   matrix.yx = (FT_Fixed)((mat[1] / size) * 65536);
   matrix.xy = (FT_Fixed)((mat[2] / size) * 65536);
   matrix.yy = (FT_Fixed)((mat[3] / size) * 65536);
   textMatrix.xx = (FT_Fixed)((textMat[0] / (textScale * size)) * 65536);
   textMatrix.yx = (FT_Fixed)((textMat[1] / (textScale * size)) * 65536);
   textMatrix.xy = (FT_Fixed)((textMat[2] / (textScale * size)) * 65536);
   textMatrix.yy = (FT_Fixed)((textMat[3] / (textScale * size)) * 65536);
 #endif
 }
