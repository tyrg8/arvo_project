commit faf8dafbc988dd1bed93da53df59acc5626ea545
Author: Victor M. Alvarez <vmalvarez@virustotal.com>
Date:   Wed Nov 13 11:04:40 2019 +0100

    Fix memory leaks introduced in #1141 (#1161)

diff --git a/.travis.yml b/.travis.yml
index 4b49bb32..5cec8fb7 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -3,71 +3,71 @@ language: c
 matrix:
   include:
 
     # Build for 64-bit Linux without profiling enabled
     - os: linux
       dist: xenial
       sudo: required
       env: CONFIGFLAGS="CFLAGS=-m64 --enable-cuckoo --enable-magic --enable-address-sanitizer"
       # The certificate for scan.coverity.com is too new and is not recognized by
       # wget. This command adds the certificate to /etc/ssl/certs/ca-certificates.crt
       # See: https://github.com/travis-ci/travis-ci/issues/6142
       before_install: echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-certificates.crt
       install: |
         sudo apt-get update
         sudo apt-get install -y autoconf automake libtool libjansson-dev libmagic-dev libssl-dev
 
     # Build for 64-bit Linux with profiling enabled
     - os: linux
       dist: xenial
       sudo: required
       env: CONFIGFLAGS="CFLAGS=-m64 --enable-cuckoo --enable-magic --enable-address-sanitizer --enable-profiling"
       install: |
         sudo apt-get update
         sudo apt-get install -y autoconf automake libtool libjansson-dev libmagic-dev libssl-dev
 
     # Build for 32-bit Linux
     - os: linux
-      dist: xenial
+      dist: trusty
       sudo: required
       env: CONFIGFLAGS="CFLAGS=-m32 --enable-cuckoo --enable-magic"
       install: |
         sudo dpkg --add-architecture i386 && sudo rm -rf /etc/apt/sources.list.d/
         sudo apt-get update
         sudo apt-get remove postgresql-9.3
         sudo apt-get upgrade -y gcc
         sudo apt-get install -y gcc-multilib autoconf automake libtool libjansson-dev:i386 libmagic-dev:i386 libssl-dev:i386
 
     # Build for 64-bit Window using MinGW cross-compiler
     - os: linux
       dist: xenial
       sudo: required
       env: CONFIGFLAGS=--host=x86_64-w64-mingw32
       install: |
         sudo apt-get update
         sudo apt-get install -y gcc-mingw-w64 autoconf automake libtool
 
     # Build for 64-bit Window using MinGW cross-compiler
     - os: linux
       dist: xenial
       sudo: required
       env: CONFIGFLAGS=--host=i686-w64-mingw32
       install: |
         sudo apt-get update
         sudo apt-get install -y gcc-mingw-w64 autoconf automake libtool
 
     # Build for 64-bit Linux using Bazel instead of make.
     - os: linux
       dist: xenial
       install: |
          wget https://github.com/bazelbuild/bazel/releases/download/0.29.0/bazel_0.29.0-linux-x86_64.deb
          sudo dpkg -i bazel_0.29.0-linux-x86_64.deb
       before_script: bazel info
       script: bazel test //tests/...
 
     # Build for OS X
     - os: osx
       osx_image: xcode7.3
     - os: osx
       osx_image: xcode8.3
     - os: osx
       osx_image: xcode9.2
diff --git a/libyara/grammar.c b/libyara/grammar.c
index 8f3f0320..9bd9bad8 100644
--- a/libyara/grammar.c
+++ b/libyara/grammar.c
@@ -1,200 +1,204 @@
 /* A Bison parser, made by GNU Bison 3.0.5.  */
 
 /* Bison implementation for Yacc-like parsers in C
 
    Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.
 
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
    under terms of your choice, so long as that work isn't itself a
    parser generator using the skeleton or a modified version thereof
    as a parser skeleton.  Alternatively, if you modify or redistribute
    the parser skeleton itself, you may (at your option) remove this
    special exception, which will cause the skeleton and the resulting
    Bison output files to be licensed under the GNU General Public
    License without this special exception.
 
    This special exception was added by the Free Software Foundation in
    version 2.2 of Bison.  */
 
 /* C LALR(1) parser skeleton written by Richard Stallman, by
    simplifying the original so-called "semantic" parser.  */
 
 /* All symbols defined below should begin with yy or YY, to avoid
    infringing on user name space.  This should be done even for local
    variables, as they might otherwise be expanded by user macros.
    There are some unavoidable exceptions within include files to
    define necessary library symbols; they are noted "INFRINGES ON
    USER NAME SPACE" below.  */
 
 /* Identify Bison output.  */
 #define YYBISON 1
 
 /* Bison version.  */
 #define YYBISON_VERSION "3.0.5"
 
 /* Skeleton name.  */
 #define YYSKELETON_NAME "yacc.c"
 
 /* Pure parsers.  */
 #define YYPURE 1
 
 /* Push parsers.  */
 #define YYPUSH 0
 
 /* Pull parsers.  */
 #define YYPULL 1
 
 
 /* Substitute the variable and function names.  */
 #define yyparse         yara_yyparse
 #define yylex           yara_yylex
 #define yyerror         yara_yyerror
 #define yydebug         yara_yydebug
 #define yynerrs         yara_yynerrs
 
 
 /* Copy the first part of user declarations.  */
 #line 30 "grammar.y" /* yacc.c:339  */
 
 
 
 #include <assert.h>
 #include <stdio.h>
 #include <string.h>
 #include <limits.h>
 #include <stdlib.h>
 #include <stddef.h>
 
 #include <yara/integers.h>
 #include <yara/utils.h>
 #include <yara/strutils.h>
 #include <yara/compiler.h>
 #include <yara/object.h>
 #include <yara/sizedstr.h>
 #include <yara/exec.h>
 #include <yara/error.h>
 #include <yara/mem.h>
 #include <yara/lexer.h>
 #include <yara/parser.h>
 
 #if defined(_MSC_VER)
 #define llabs _abs64
 #endif
 
 #define YYERROR_VERBOSE
 
 #define YYMALLOC yr_malloc
 #define YYFREE yr_free
 
 #define INTEGER_SET_ENUMERATION   1
 #define INTEGER_SET_RANGE         2
 
 #define FOR_EXPRESSION_ALL 1
 #define FOR_EXPRESSION_ANY 2
 
 #define fail_if_error(e) \
     if (e != ERROR_SUCCESS) \
     { \
       compiler->last_error = e; \
       yyerror(yyscanner, compiler, NULL); \
       YYERROR; \
     } \
 
 
 #define set_flag_or_error(flags, new_flag) \
     if (flags & new_flag) \
     { \
       compiler->last_error = ERROR_DUPLICATED_MODIFIER; \
       yyerror(yyscanner, compiler, NULL); \
       YYERROR; \
     } \
     else \
     { \
       flags |= new_flag; \
     }
 
 
 #define check_type_with_cleanup(expression, expected_type, op, cleanup) \
     if (((expression.type) & (expected_type)) == 0) \
     { \
       switch(expression.type) \
       { \
         case EXPRESSION_TYPE_INTEGER: \
           yr_compiler_set_error_extra_info( \
               compiler, "wrong type \"integer\" for " op " operator"); \
           break; \
         case EXPRESSION_TYPE_FLOAT: \
           yr_compiler_set_error_extra_info( \
               compiler, "wrong type \"float\" for " op " operator"); \
           break; \
         case EXPRESSION_TYPE_STRING: \
           yr_compiler_set_error_extra_info( \
               compiler, "wrong type \"string\" for " op " operator"); \
           break; \
         case EXPRESSION_TYPE_BOOLEAN: \
           yr_compiler_set_error_extra_info( \
               compiler, "wrong type \"boolean\" for " op " operator"); \
           break; \
       } \
       cleanup; \
       compiler->last_error = ERROR_WRONG_TYPE; \
       yyerror(yyscanner, compiler, NULL); \
       YYERROR; \
     }
 
 // check_type(expression, EXPRESSION_TYPE_INTEGER | EXPRESSION_TYPE_FLOAT) is
 // used to ensure that the type of "expression" is either integer or float.
 #define check_type(expression, expected_type, op) \
     check_type_with_cleanup(expression, expected_type, op, )
 
 
 
-#define free_loop_identifiers() \
+#define loop_vars_cleanup(loop_depth) \
     {  \
-      YR_LOOP_CONTEXT* loop_ctx = &compiler->loop[compiler->loop_depth]; \
+      YR_LOOP_CONTEXT* loop_ctx = &compiler->loop[loop_depth]; \
       for (int i = 0; i < loop_ctx->vars_count; i++) \
+      { \
         yr_free((void*) loop_ctx->vars[i].identifier); \
+        loop_ctx->vars[i].identifier = NULL; \
+      } \
+      loop_ctx->vars_count = 0; \
     } \
 
 
-#line 175 "grammar.c" /* yacc.c:339  */
+#line 179 "grammar.c" /* yacc.c:339  */
 
 # ifndef YY_NULLPTR
 #  if defined __cplusplus && 201103L <= __cplusplus
 #   define YY_NULLPTR nullptr
 #  else
 #   define YY_NULLPTR 0
 #  endif
 # endif
 
 /* Enabling verbose error messages.  */
 #ifdef YYERROR_VERBOSE
 # undef YYERROR_VERBOSE
 # define YYERROR_VERBOSE 1
 #else
 # define YYERROR_VERBOSE 0
 #endif
 
 /* In a future release of Bison, this section will be replaced
    by #include "y.tab.h".  */
 #ifndef YY_YARA_YY_GRAMMAR_H_INCLUDED
 # define YY_YARA_YY_GRAMMAR_H_INCLUDED
 /* Debug traces.  */
 #ifndef YYDEBUG
 # define YYDEBUG 0
 #endif
 #if YYDEBUG
@@ -319,19 +323,19 @@ extern int yara_yydebug;
 
 union YYSTYPE
 {
-#line 270 "grammar.y" /* yacc.c:355  */
+#line 274 "grammar.y" /* yacc.c:355  */
 
   YR_EXPRESSION   expression;
   SIZED_STRING*   sized_string;
   char*           c_string;
   int64_t         integer;
   double          double_;
   YR_STRING*      string;
   YR_META*        meta;
   YR_RULE*        rule;
   YR_MODIFIER     modifier;
 
-#line 335 "grammar.c" /* yacc.c:355  */
+#line 339 "grammar.c" /* yacc.c:355  */
 };
 
 typedef union YYSTYPE YYSTYPE;
@@ -344,13 +348,13 @@ typedef union YYSTYPE YYSTYPE;
 int yara_yyparse (void *yyscanner, YR_COMPILER* compiler);
 
 #endif /* !YY_YARA_YY_GRAMMAR_H_INCLUDED  */
 
 /* Copy the second part of user declarations.  */
 
-#line 351 "grammar.c" /* yacc.c:358  */
+#line 355 "grammar.c" /* yacc.c:358  */
 
 #ifdef short
 # undef short
 #endif
 
 #ifdef YYTYPE_UINT8
@@ -648,25 +652,25 @@ static const yytype_uint8 yytranslate[] =
 #if YYDEBUG
   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
 static const yytype_uint16 yyrline[] =
 {
-       0,   285,   285,   287,   288,   289,   290,   291,   292,   300,
-     313,   318,   312,   339,   342,   372,   375,   400,   405,   406,
-     411,   412,   418,   421,   439,   448,   487,   488,   493,   510,
-     524,   538,   552,   570,   571,   577,   576,   592,   591,   612,
-     611,   636,   641,   661,   662,   663,   664,   665,   666,   672,
-     693,   727,   728,   732,   733,   734,   735,   736,   740,   741,
-     745,   749,   838,   885,   944,   990,   991,   995,  1023,  1063,
-    1106,  1126,  1133,  1140,  1152,  1162,  1176,  1191,  1202,  1264,
-    1297,  1212,  1408,  1407,  1486,  1492,  1499,  1498,  1544,  1543,
-    1587,  1594,  1601,  1608,  1615,  1622,  1629,  1633,  1641,  1659,
-    1683,  1757,  1785,  1794,  1803,  1827,  1842,  1862,  1861,  1867,
-    1879,  1880,  1885,  1892,  1903,  1907,  1912,  1921,  1925,  1933,
-    1945,  1959,  1967,  1974,  1999,  2011,  2023,  2039,  2051,  2067,
-    2109,  2130,  2165,  2200,  2234,  2259,  2276,  2286,  2296,  2306,
-    2316,  2336,  2356
+       0,   289,   289,   291,   292,   293,   294,   295,   296,   304,
+     317,   322,   316,   343,   346,   376,   379,   404,   409,   410,
+     415,   416,   422,   425,   443,   452,   491,   492,   497,   514,
+     528,   542,   556,   574,   575,   581,   580,   596,   595,   616,
+     615,   640,   645,   665,   666,   667,   668,   669,   670,   676,
+     697,   731,   732,   736,   737,   738,   739,   740,   744,   745,
+     749,   753,   842,   889,   948,   994,   995,   999,  1027,  1067,
+    1110,  1130,  1137,  1144,  1156,  1166,  1180,  1195,  1206,  1274,
+    1307,  1222,  1419,  1418,  1498,  1504,  1511,  1510,  1556,  1555,
+    1599,  1606,  1613,  1620,  1627,  1634,  1641,  1645,  1653,  1673,
+    1701,  1775,  1803,  1812,  1821,  1845,  1860,  1880,  1879,  1885,
+    1897,  1898,  1903,  1910,  1921,  1925,  1930,  1939,  1943,  1951,
+    1963,  1977,  1985,  1992,  2017,  2029,  2041,  2057,  2069,  2085,
+    2127,  2148,  2183,  2218,  2252,  2277,  2294,  2304,  2314,  2324,
+    2334,  2354,  2374
 };
 #endif
 
 #if YYDEBUG || YYERROR_VERBOSE || 0
 /* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
    First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
@@ -1381,91 +1385,91 @@ static void
 yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void *yyscanner, YR_COMPILER* compiler)
 {
   YYUSE (yyvaluep);
   YYUSE (yyscanner);
   YYUSE (compiler);
   if (!yymsg)
     yymsg = "Deleting";
   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
 
   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   switch (yytype)
     {
           case 11: /* "identifier"  */
-#line 257 "grammar.y" /* yacc.c:1258  */
+#line 261 "grammar.y" /* yacc.c:1258  */
       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
-#line 1397 "grammar.c" /* yacc.c:1258  */
+#line 1401 "grammar.c" /* yacc.c:1258  */
         break;
 
     case 12: /* "string identifier"  */
-#line 261 "grammar.y" /* yacc.c:1258  */
+#line 265 "grammar.y" /* yacc.c:1258  */
       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
-#line 1403 "grammar.c" /* yacc.c:1258  */
+#line 1407 "grammar.c" /* yacc.c:1258  */
         break;
 
     case 13: /* "string count"  */
-#line 258 "grammar.y" /* yacc.c:1258  */
+#line 262 "grammar.y" /* yacc.c:1258  */
       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
-#line 1409 "grammar.c" /* yacc.c:1258  */
+#line 1413 "grammar.c" /* yacc.c:1258  */
         break;
 
     case 14: /* "string offset"  */
-#line 259 "grammar.y" /* yacc.c:1258  */
+#line 263 "grammar.y" /* yacc.c:1258  */
       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
-#line 1415 "grammar.c" /* yacc.c:1258  */
+#line 1419 "grammar.c" /* yacc.c:1258  */
         break;
 
     case 15: /* "string length"  */
-#line 260 "grammar.y" /* yacc.c:1258  */
+#line 264 "grammar.y" /* yacc.c:1258  */
       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
-#line 1421 "grammar.c" /* yacc.c:1258  */
+#line 1425 "grammar.c" /* yacc.c:1258  */
         break;
 
     case 16: /* "string identifier with wildcard"  */
-#line 262 "grammar.y" /* yacc.c:1258  */
+#line 266 "grammar.y" /* yacc.c:1258  */
       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
-#line 1427 "grammar.c" /* yacc.c:1258  */
+#line 1431 "grammar.c" /* yacc.c:1258  */
         break;
 
     case 20: /* "text string"  */
-#line 263 "grammar.y" /* yacc.c:1258  */
+#line 267 "grammar.y" /* yacc.c:1258  */
       { yr_free(((*yyvaluep).sized_string)); ((*yyvaluep).sized_string) = NULL; }
-#line 1433 "grammar.c" /* yacc.c:1258  */
+#line 1437 "grammar.c" /* yacc.c:1258  */
         break;
 
     case 21: /* "hex string"  */
-#line 264 "grammar.y" /* yacc.c:1258  */
+#line 268 "grammar.y" /* yacc.c:1258  */
       { yr_free(((*yyvaluep).sized_string)); ((*yyvaluep).sized_string) = NULL; }
-#line 1439 "grammar.c" /* yacc.c:1258  */
+#line 1443 "grammar.c" /* yacc.c:1258  */
         break;
 
     case 22: /* "regular expression"  */
-#line 265 "grammar.y" /* yacc.c:1258  */
+#line 269 "grammar.y" /* yacc.c:1258  */
       { yr_free(((*yyvaluep).sized_string)); ((*yyvaluep).sized_string) = NULL; }
-#line 1445 "grammar.c" /* yacc.c:1258  */
+#line 1449 "grammar.c" /* yacc.c:1258  */
         break;
 
     case 101: /* arguments  */
-#line 267 "grammar.y" /* yacc.c:1258  */
+#line 271 "grammar.y" /* yacc.c:1258  */
       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
-#line 1451 "grammar.c" /* yacc.c:1258  */
+#line 1455 "grammar.c" /* yacc.c:1258  */
         break;
 
     case 102: /* arguments_list  */
-#line 268 "grammar.y" /* yacc.c:1258  */
+#line 272 "grammar.y" /* yacc.c:1258  */
       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }
-#line 1457 "grammar.c" /* yacc.c:1258  */
+#line 1461 "grammar.c" /* yacc.c:1258  */
         break;
 
 
       default:
         break;
     }
   YY_IGNORE_MAYBE_UNINITIALIZED_END
 }
 
 
 
 
 /*----------.
 | yyparse.  |
 `----------*/
@@ -1700,2485 +1704,2499 @@ yydefault:
 /*-----------------------------.
 | yyreduce -- Do a reduction.  |
 `-----------------------------*/
 yyreduce:
   /* yyn is the number of a rule to reduce with.  */
   yylen = yyr2[yyn];
 
   /* If YYLEN is nonzero, implement the default value of the action:
      '$$ = $1'.
 
      Otherwise, the following line sets YYVAL to garbage.
      This behavior is undocumented and Bison
      users should not rely upon it.  Assigning to YYVAL
      unconditionally makes the parser a bit smaller, and it avoids a
      GCC warning that YYVAL may be used uninitialized.  */
   yyval = yyvsp[1-yylen];
 
 
   YY_REDUCE_PRINT (yyn);
   switch (yyn)
     {
         case 8:
-#line 293 "grammar.y" /* yacc.c:1663  */
+#line 297 "grammar.y" /* yacc.c:1663  */
     {
         _yr_compiler_pop_file_name(compiler);
       }
-#line 1727 "grammar.c" /* yacc.c:1663  */
+#line 1731 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 9:
-#line 301 "grammar.y" /* yacc.c:1663  */
+#line 305 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_import(yyscanner, (yyvsp[0].sized_string));
 
         yr_free((yyvsp[0].sized_string));
 
         fail_if_error(result);
       }
-#line 1739 "grammar.c" /* yacc.c:1663  */
+#line 1743 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 10:
-#line 313 "grammar.y" /* yacc.c:1663  */
+#line 317 "grammar.y" /* yacc.c:1663  */
     {
         fail_if_error(yr_parser_reduce_rule_declaration_phase_1(
             yyscanner, (int32_t) (yyvsp[-2].integer), (yyvsp[0].c_string), &(yyval.rule)));
       }
-#line 1748 "grammar.c" /* yacc.c:1663  */
+#line 1752 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 11:
-#line 318 "grammar.y" /* yacc.c:1663  */
+#line 322 "grammar.y" /* yacc.c:1663  */
     {
         YR_RULE* rule = (yyvsp[-4].rule); // rule created in phase 1
 
         rule->tags = (yyvsp[-3].c_string);
         rule->metas = (yyvsp[-1].meta);
         rule->strings = (yyvsp[0].string);
       }
-#line 1760 "grammar.c" /* yacc.c:1663  */
+#line 1764 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 12:
-#line 326 "grammar.y" /* yacc.c:1663  */
+#line 330 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_rule_declaration_phase_2(
             yyscanner, (yyvsp[-7].rule)); // rule created in phase 1
 
         yr_free((yyvsp[-8].c_string));
 
         fail_if_error(result);
       }
-#line 1773 "grammar.c" /* yacc.c:1663  */
+#line 1777 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 13:
-#line 339 "grammar.y" /* yacc.c:1663  */
+#line 343 "grammar.y" /* yacc.c:1663  */
     {
         (yyval.meta) = NULL;
       }
-#line 1781 "grammar.c" /* yacc.c:1663  */
+#line 1785 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 14:
-#line 343 "grammar.y" /* yacc.c:1663  */
+#line 347 "grammar.y" /* yacc.c:1663  */
     {
         int result;
 
         // Each rule have a list of meta-data info, consisting in a
         // sequence of YR_META structures. The last YR_META structure does
         // not represent a real meta-data, it's just a end-of-list marker
         // identified by a specific type (META_TYPE_NULL). Here we
         // write the end-of-list marker.
 
         YR_META null_meta;
 
         memset(&null_meta, 0xFF, sizeof(YR_META));
         null_meta.type = META_TYPE_NULL;
 
         result = yr_arena_write_data(
             compiler->metas_arena,
             &null_meta,
             sizeof(YR_META),
             NULL);
 
         (yyval.meta) = (yyvsp[0].meta);
 
         fail_if_error(result);
       }
-#line 1810 "grammar.c" /* yacc.c:1663  */
+#line 1814 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 15:
-#line 372 "grammar.y" /* yacc.c:1663  */
+#line 376 "grammar.y" /* yacc.c:1663  */
     {
         (yyval.string) = NULL;
       }
-#line 1818 "grammar.c" /* yacc.c:1663  */
+#line 1822 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 16:
-#line 376 "grammar.y" /* yacc.c:1663  */
+#line 380 "grammar.y" /* yacc.c:1663  */
     {
         // Each rule have a list of strings, consisting in a sequence
         // of YR_STRING structures. The last YR_STRING structure does not
         // represent a real string, it's just a end-of-list marker
         // identified by a specific flag (STRING_FLAGS_NULL). Here we
         // write the end-of-list marker.
 
         YR_STRING null_string;
 
         memset(&null_string, 0xFF, sizeof(YR_STRING));
         null_string.g_flags = STRING_GFLAGS_NULL;
 
         fail_if_error(yr_arena_write_data(
             compiler->strings_arena,
             &null_string,
             sizeof(YR_STRING),
             NULL));
 
         (yyval.string) = (yyvsp[0].string);
       }
-#line 1843 "grammar.c" /* yacc.c:1663  */
+#line 1847 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 18:
-#line 405 "grammar.y" /* yacc.c:1663  */
+#line 409 "grammar.y" /* yacc.c:1663  */
     { (yyval.integer) = 0;  }
-#line 1849 "grammar.c" /* yacc.c:1663  */
+#line 1853 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 19:
-#line 406 "grammar.y" /* yacc.c:1663  */
+#line 410 "grammar.y" /* yacc.c:1663  */
     { (yyval.integer) = (yyvsp[-1].integer) | (yyvsp[0].integer); }
-#line 1855 "grammar.c" /* yacc.c:1663  */
+#line 1859 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 20:
-#line 411 "grammar.y" /* yacc.c:1663  */
+#line 415 "grammar.y" /* yacc.c:1663  */
     { (yyval.integer) = RULE_GFLAGS_PRIVATE; }
-#line 1861 "grammar.c" /* yacc.c:1663  */
+#line 1865 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 21:
-#line 412 "grammar.y" /* yacc.c:1663  */
+#line 416 "grammar.y" /* yacc.c:1663  */
     { (yyval.integer) = RULE_GFLAGS_GLOBAL; }
-#line 1867 "grammar.c" /* yacc.c:1663  */
+#line 1871 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 22:
-#line 418 "grammar.y" /* yacc.c:1663  */
+#line 422 "grammar.y" /* yacc.c:1663  */
     {
         (yyval.c_string) = NULL;
       }
-#line 1875 "grammar.c" /* yacc.c:1663  */
+#line 1879 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 23:
-#line 422 "grammar.y" /* yacc.c:1663  */
+#line 426 "grammar.y" /* yacc.c:1663  */
     {
         // Tags list is represented in the arena as a sequence
         // of null-terminated strings, the sequence ends with an
         // additional null character. Here we write the ending null
         //character. Example: tag1\0tag2\0tag3\0\0
 
         int result = yr_arena_write_string(
             yyget_extra(yyscanner)->sz_arena, "", NULL);
 
         fail_if_error(result);
 
         (yyval.c_string) = (yyvsp[0].c_string);
       }
-#line 1893 "grammar.c" /* yacc.c:1663  */
+#line 1897 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 24:
-#line 440 "grammar.y" /* yacc.c:1663  */
+#line 444 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_arena_write_string(
             yyget_extra(yyscanner)->sz_arena, (yyvsp[0].c_string), &(yyval.c_string));
 
         yr_free((yyvsp[0].c_string));
 
         fail_if_error(result);
       }
-#line 1906 "grammar.c" /* yacc.c:1663  */
+#line 1910 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 25:
-#line 449 "grammar.y" /* yacc.c:1663  */
+#line 453 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
 
         char* tag_name = (yyvsp[-1].c_string);
         size_t tag_length = tag_name != NULL ? strlen(tag_name) : 0;
 
         while (tag_length > 0)
         {
           if (strcmp(tag_name, (yyvsp[0].c_string)) == 0)
           {
             yr_compiler_set_error_extra_info(compiler, tag_name);
             result = ERROR_DUPLICATED_TAG_IDENTIFIER;
             break;
           }
 
           tag_name = (char*) yr_arena_next_address(
               yyget_extra(yyscanner)->sz_arena,
               tag_name,
               tag_length + 1);
 
           tag_length = tag_name != NULL ? strlen(tag_name) : 0;
         }
 
         if (result == ERROR_SUCCESS)
           result = yr_arena_write_string(
               yyget_extra(yyscanner)->sz_arena, (yyvsp[0].c_string), NULL);
 
         yr_free((yyvsp[0].c_string));
 
         fail_if_error(result);
 
         (yyval.c_string) = (yyvsp[-1].c_string);
       }
-#line 1944 "grammar.c" /* yacc.c:1663  */
+#line 1948 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 26:
-#line 487 "grammar.y" /* yacc.c:1663  */
+#line 491 "grammar.y" /* yacc.c:1663  */
     {  (yyval.meta) = (yyvsp[0].meta); }
-#line 1950 "grammar.c" /* yacc.c:1663  */
+#line 1954 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 27:
-#line 488 "grammar.y" /* yacc.c:1663  */
+#line 492 "grammar.y" /* yacc.c:1663  */
     {  (yyval.meta) = (yyvsp[-1].meta); }
-#line 1956 "grammar.c" /* yacc.c:1663  */
+#line 1960 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 28:
-#line 494 "grammar.y" /* yacc.c:1663  */
+#line 498 "grammar.y" /* yacc.c:1663  */
     {
         SIZED_STRING* sized_string = (yyvsp[0].sized_string);
 
         int result = yr_parser_reduce_meta_declaration(
             yyscanner,
             META_TYPE_STRING,
             (yyvsp[-2].c_string),
             sized_string->c_string,
             0,
             &(yyval.meta));
 
         yr_free((yyvsp[-2].c_string));
         yr_free((yyvsp[0].sized_string));
 
         fail_if_error(result);
       }
-#line 1977 "grammar.c" /* yacc.c:1663  */
+#line 1981 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 29:
-#line 511 "grammar.y" /* yacc.c:1663  */
+#line 515 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_meta_declaration(
             yyscanner,
             META_TYPE_INTEGER,
             (yyvsp[-2].c_string),
             NULL,
             (yyvsp[0].integer),
             &(yyval.meta));
 
         yr_free((yyvsp[-2].c_string));
 
         fail_if_error(result);
       }
-#line 1995 "grammar.c" /* yacc.c:1663  */
+#line 1999 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 30:
-#line 525 "grammar.y" /* yacc.c:1663  */
+#line 529 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_meta_declaration(
             yyscanner,
             META_TYPE_INTEGER,
             (yyvsp[-3].c_string),
             NULL,
             -(yyvsp[0].integer),
             &(yyval.meta));
 
         yr_free((yyvsp[-3].c_string));
 
         fail_if_error(result);
       }
-#line 2013 "grammar.c" /* yacc.c:1663  */
+#line 2017 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 31:
-#line 539 "grammar.y" /* yacc.c:1663  */
+#line 543 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_meta_declaration(
             yyscanner,
             META_TYPE_BOOLEAN,
             (yyvsp[-2].c_string),
             NULL,
             true,
             &(yyval.meta));
 
         yr_free((yyvsp[-2].c_string));
 
         fail_if_error(result);
       }
-#line 2031 "grammar.c" /* yacc.c:1663  */
+#line 2035 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 32:
-#line 553 "grammar.y" /* yacc.c:1663  */
+#line 557 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_meta_declaration(
             yyscanner,
             META_TYPE_BOOLEAN,
             (yyvsp[-2].c_string),
             NULL,
             false,
             &(yyval.meta));
 
         yr_free((yyvsp[-2].c_string));
 
         fail_if_error(result);
       }
-#line 2049 "grammar.c" /* yacc.c:1663  */
+#line 2053 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 33:
-#line 570 "grammar.y" /* yacc.c:1663  */
+#line 574 "grammar.y" /* yacc.c:1663  */
     { (yyval.string) = (yyvsp[0].string); }
-#line 2055 "grammar.c" /* yacc.c:1663  */
+#line 2059 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 34:
-#line 571 "grammar.y" /* yacc.c:1663  */
+#line 575 "grammar.y" /* yacc.c:1663  */
     { (yyval.string) = (yyvsp[-1].string); }
-#line 2061 "grammar.c" /* yacc.c:1663  */
+#line 2065 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 35:
-#line 577 "grammar.y" /* yacc.c:1663  */
+#line 581 "grammar.y" /* yacc.c:1663  */
     {
         compiler->current_line = yyget_lineno(yyscanner);
       }
-#line 2069 "grammar.c" /* yacc.c:1663  */
+#line 2073 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 36:
-#line 581 "grammar.y" /* yacc.c:1663  */
+#line 585 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_string_declaration(
             yyscanner, (yyvsp[0].modifier), (yyvsp[-4].c_string), (yyvsp[-1].sized_string), &(yyval.string));
 
         yr_free((yyvsp[-4].c_string));
         yr_free((yyvsp[-1].sized_string));
 
         fail_if_error(result);
         compiler->current_line = 0;
       }
-#line 2084 "grammar.c" /* yacc.c:1663  */
+#line 2088 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 37:
-#line 592 "grammar.y" /* yacc.c:1663  */
+#line 596 "grammar.y" /* yacc.c:1663  */
     {
         compiler->current_line = yyget_lineno(yyscanner);
       }
-#line 2092 "grammar.c" /* yacc.c:1663  */
+#line 2096 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 38:
-#line 596 "grammar.y" /* yacc.c:1663  */
+#line 600 "grammar.y" /* yacc.c:1663  */
     {
         int result;
 
         (yyvsp[0].modifier).flags |= STRING_GFLAGS_REGEXP;
 
         result = yr_parser_reduce_string_declaration(
             yyscanner, (yyvsp[0].modifier), (yyvsp[-4].c_string), (yyvsp[-1].sized_string), &(yyval.string));
 
         yr_free((yyvsp[-4].c_string));
         yr_free((yyvsp[-1].sized_string));
 
         fail_if_error(result);
 
         compiler->current_line = 0;
       }
-#line 2112 "grammar.c" /* yacc.c:1663  */
+#line 2116 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 39:
-#line 612 "grammar.y" /* yacc.c:1663  */
+#line 616 "grammar.y" /* yacc.c:1663  */
     {
         compiler->current_line = yyget_lineno(yyscanner);
       }
-#line 2120 "grammar.c" /* yacc.c:1663  */
+#line 2124 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 40:
-#line 616 "grammar.y" /* yacc.c:1663  */
+#line 620 "grammar.y" /* yacc.c:1663  */
     {
         int result;
 
         (yyvsp[0].modifier).flags |= STRING_GFLAGS_HEXADECIMAL;
 
         result = yr_parser_reduce_string_declaration(
             yyscanner, (yyvsp[0].modifier), (yyvsp[-4].c_string), (yyvsp[-1].sized_string), &(yyval.string));
 
         yr_free((yyvsp[-4].c_string));
         yr_free((yyvsp[-1].sized_string));
 
         fail_if_error(result);
 
         compiler->current_line = 0;
       }
-#line 2140 "grammar.c" /* yacc.c:1663  */
+#line 2144 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 41:
-#line 636 "grammar.y" /* yacc.c:1663  */
+#line 640 "grammar.y" /* yacc.c:1663  */
     {
         (yyval.modifier).flags = 0;
         (yyval.modifier).xor_min = 0;
         (yyval.modifier).xor_max = 0;
       }
-#line 2150 "grammar.c" /* yacc.c:1663  */
+#line 2154 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 42:
-#line 642 "grammar.y" /* yacc.c:1663  */
+#line 646 "grammar.y" /* yacc.c:1663  */
     {
         (yyval.modifier) = (yyvsp[-1].modifier);
 
         set_flag_or_error((yyval.modifier).flags, (yyvsp[0].modifier).flags);
 
         // Only set the xor minimum and maximum if we are dealing with the
         // xor modifier. If we don't check for this then we can end up with
         // "xor wide" resulting in whatever is on the stack for "wide"
         // overwriting the values for xor.
         if ((yyvsp[0].modifier).flags & STRING_GFLAGS_XOR)
         {
           (yyval.modifier).xor_min = (yyvsp[0].modifier).xor_min;
           (yyval.modifier).xor_max = (yyvsp[0].modifier).xor_max;
         }
       }
-#line 2170 "grammar.c" /* yacc.c:1663  */
+#line 2174 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 43:
-#line 661 "grammar.y" /* yacc.c:1663  */
+#line 665 "grammar.y" /* yacc.c:1663  */
     { (yyval.modifier).flags = STRING_GFLAGS_WIDE; }
-#line 2176 "grammar.c" /* yacc.c:1663  */
+#line 2180 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 44:
-#line 662 "grammar.y" /* yacc.c:1663  */
+#line 666 "grammar.y" /* yacc.c:1663  */
     { (yyval.modifier).flags = STRING_GFLAGS_ASCII; }
-#line 2182 "grammar.c" /* yacc.c:1663  */
+#line 2186 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 45:
-#line 663 "grammar.y" /* yacc.c:1663  */
+#line 667 "grammar.y" /* yacc.c:1663  */
     { (yyval.modifier).flags = STRING_GFLAGS_NO_CASE; }
-#line 2188 "grammar.c" /* yacc.c:1663  */
+#line 2192 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 46:
-#line 664 "grammar.y" /* yacc.c:1663  */
+#line 668 "grammar.y" /* yacc.c:1663  */
     { (yyval.modifier).flags = STRING_GFLAGS_FULL_WORD; }
-#line 2194 "grammar.c" /* yacc.c:1663  */
+#line 2198 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 47:
-#line 665 "grammar.y" /* yacc.c:1663  */
+#line 669 "grammar.y" /* yacc.c:1663  */
     { (yyval.modifier).flags = STRING_GFLAGS_PRIVATE; }
-#line 2200 "grammar.c" /* yacc.c:1663  */
+#line 2204 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 48:
-#line 667 "grammar.y" /* yacc.c:1663  */
+#line 671 "grammar.y" /* yacc.c:1663  */
     {
         (yyval.modifier).flags = STRING_GFLAGS_XOR;
         (yyval.modifier).xor_min = 0;
         (yyval.modifier).xor_max = 255;
       }
-#line 2210 "grammar.c" /* yacc.c:1663  */
+#line 2214 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 49:
-#line 673 "grammar.y" /* yacc.c:1663  */
+#line 677 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
 
         if ((yyvsp[-1].integer) < 0 || (yyvsp[-1].integer) > 255)
         {
           yr_compiler_set_error_extra_info(compiler, "invalid xor range");
           result = ERROR_INVALID_MODIFIER;
         }
 
         fail_if_error(result);
 
         (yyval.modifier).flags = STRING_GFLAGS_XOR;
         (yyval.modifier).xor_min = (yyvsp[-1].integer);
         (yyval.modifier).xor_max = (yyvsp[-1].integer);
       }
-#line 2230 "grammar.c" /* yacc.c:1663  */
+#line 2234 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 50:
-#line 694 "grammar.y" /* yacc.c:1663  */
+#line 698 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
 
         if ((yyvsp[-3].integer) < 0)
         {
           yr_compiler_set_error_extra_info(
               compiler, "lower bound for xor range exceeded (min: 0)");
           result = ERROR_INVALID_MODIFIER;
         }
 
         if ((yyvsp[-1].integer) > 255)
         {
           yr_compiler_set_error_extra_info(
               compiler, "upper bound for xor range exceeded (max: 255)");
           result = ERROR_INVALID_MODIFIER;
         }
 
         if ((yyvsp[-3].integer) > (yyvsp[-1].integer))
         {
           yr_compiler_set_error_extra_info(
               compiler, "xor lower bound exceeds upper bound");
           result = ERROR_INVALID_MODIFIER;
         }
 
         fail_if_error(result);
 
         (yyval.modifier).flags = STRING_GFLAGS_XOR;
         (yyval.modifier).xor_min = (yyvsp[-3].integer);
         (yyval.modifier).xor_max = (yyvsp[-1].integer);
       }
-#line 2265 "grammar.c" /* yacc.c:1663  */
+#line 2269 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 51:
-#line 727 "grammar.y" /* yacc.c:1663  */
+#line 731 "grammar.y" /* yacc.c:1663  */
     { (yyval.modifier).flags = 0; }
-#line 2271 "grammar.c" /* yacc.c:1663  */
+#line 2275 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 52:
-#line 728 "grammar.y" /* yacc.c:1663  */
+#line 732 "grammar.y" /* yacc.c:1663  */
     { set_flag_or_error((yyval.modifier).flags, (yyvsp[0].modifier).flags); }
-#line 2277 "grammar.c" /* yacc.c:1663  */
+#line 2281 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 53:
-#line 732 "grammar.y" /* yacc.c:1663  */
+#line 736 "grammar.y" /* yacc.c:1663  */
     { (yyval.modifier).flags = STRING_GFLAGS_WIDE; }
-#line 2283 "grammar.c" /* yacc.c:1663  */
+#line 2287 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 54:
-#line 733 "grammar.y" /* yacc.c:1663  */
+#line 737 "grammar.y" /* yacc.c:1663  */
     { (yyval.modifier).flags = STRING_GFLAGS_ASCII; }
-#line 2289 "grammar.c" /* yacc.c:1663  */
+#line 2293 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 55:
-#line 734 "grammar.y" /* yacc.c:1663  */
+#line 738 "grammar.y" /* yacc.c:1663  */
     { (yyval.modifier).flags = STRING_GFLAGS_NO_CASE; }
-#line 2295 "grammar.c" /* yacc.c:1663  */
+#line 2299 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 56:
-#line 735 "grammar.y" /* yacc.c:1663  */
+#line 739 "grammar.y" /* yacc.c:1663  */
     { (yyval.modifier).flags = STRING_GFLAGS_FULL_WORD; }
-#line 2301 "grammar.c" /* yacc.c:1663  */
+#line 2305 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 57:
-#line 736 "grammar.y" /* yacc.c:1663  */
+#line 740 "grammar.y" /* yacc.c:1663  */
     { (yyval.modifier).flags = STRING_GFLAGS_PRIVATE; }
-#line 2307 "grammar.c" /* yacc.c:1663  */
+#line 2311 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 58:
-#line 740 "grammar.y" /* yacc.c:1663  */
+#line 744 "grammar.y" /* yacc.c:1663  */
     { (yyval.modifier).flags = 0; }
-#line 2313 "grammar.c" /* yacc.c:1663  */
+#line 2317 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 59:
-#line 741 "grammar.y" /* yacc.c:1663  */
+#line 745 "grammar.y" /* yacc.c:1663  */
     { set_flag_or_error((yyval.modifier).flags, (yyvsp[0].modifier).flags); }
-#line 2319 "grammar.c" /* yacc.c:1663  */
+#line 2323 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 60:
-#line 745 "grammar.y" /* yacc.c:1663  */
+#line 749 "grammar.y" /* yacc.c:1663  */
     { (yyval.modifier).flags = STRING_GFLAGS_PRIVATE; }
-#line 2325 "grammar.c" /* yacc.c:1663  */
+#line 2329 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 61:
-#line 750 "grammar.y" /* yacc.c:1663  */
+#line 754 "grammar.y" /* yacc.c:1663  */
     {
         YR_EXPRESSION expr;
 
         int result = ERROR_SUCCESS;
         int var_index = yr_parser_lookup_loop_variable(yyscanner, (yyvsp[0].c_string), &expr);
 
         if (var_index >= 0)
         {
           // The identifier corresponds to a loop variable.
           result = yr_parser_emit_with_arg(
               yyscanner,
               OP_PUSH_M,
               var_index,
               NULL,
               NULL);
 
           // The expression associated to this identifier is the same one
           // associated to the loop variable.
           (yyval.expression) = expr;
         }
         else
         {
           // Search for identifier within the global namespace, where the
           // externals variables reside.
 
           YR_OBJECT* object = (YR_OBJECT*) yr_hash_table_lookup(
               compiler->objects_table, (yyvsp[0].c_string), NULL);
 
           if (object == NULL)
           {
             // If not found, search within the current namespace.
             char* ns = compiler->current_namespace->name;
 
             object = (YR_OBJECT*) yr_hash_table_lookup(
                 compiler->objects_table, (yyvsp[0].c_string), ns);
           }
 
           if (object != NULL)
           {
             char* id;
 
             result = yr_arena_write_string(
                 compiler->sz_arena, (yyvsp[0].c_string), &id);
 
             if (result == ERROR_SUCCESS)
               result = yr_parser_emit_with_arg_reloc(
                   yyscanner,
                   OP_OBJ_LOAD,
                   id,
                   NULL,
                   NULL);
 
             (yyval.expression).type = EXPRESSION_TYPE_OBJECT;
             (yyval.expression).value.object = object;
             (yyval.expression).identifier = object->identifier;
           }
           else
           {
             YR_RULE* rule = (YR_RULE*) yr_hash_table_lookup(
                 compiler->rules_table,
                 (yyvsp[0].c_string),
                 compiler->current_namespace->name);
 
             if (rule != NULL)
             {
               result = yr_parser_emit_with_arg_reloc(
                   yyscanner,
                   OP_PUSH_RULE,
                   rule,
                   NULL,
                   NULL);
 
               (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
               (yyval.expression).value.integer = UNDEFINED;
               (yyval.expression).identifier = rule->identifier;
             }
             else
             {
               yr_compiler_set_error_extra_info(compiler, (yyvsp[0].c_string));
               result = ERROR_UNDEFINED_IDENTIFIER;
             }
           }
         }
 
         yr_free((yyvsp[0].c_string));
 
         fail_if_error(result);
       }
-#line 2418 "grammar.c" /* yacc.c:1663  */
+#line 2422 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 62:
-#line 839 "grammar.y" /* yacc.c:1663  */
+#line 843 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
         YR_OBJECT* field = NULL;
 
         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_OBJECT &&
             (yyvsp[-2].expression).value.object->type == OBJECT_TYPE_STRUCTURE)
         {
           field = yr_object_lookup_field((yyvsp[-2].expression).value.object, (yyvsp[0].c_string));
 
           if (field != NULL)
           {
             char* ident;
 
             result = yr_arena_write_string(
                 compiler->sz_arena, (yyvsp[0].c_string), &ident);
 
             if (result == ERROR_SUCCESS)
               result = yr_parser_emit_with_arg_reloc(
                   yyscanner,
                   OP_OBJ_FIELD,
                   ident,
                   NULL,
                   NULL);
 
             (yyval.expression).type = EXPRESSION_TYPE_OBJECT;
             (yyval.expression).value.object = field;
             (yyval.expression).identifier = field->identifier;
           }
           else
           {
             yr_compiler_set_error_extra_info(compiler, (yyvsp[0].c_string));
             result = ERROR_INVALID_FIELD_NAME;
           }
         }
         else
         {
           yr_compiler_set_error_extra_info(
               compiler, (yyvsp[-2].expression).identifier);
 
           result = ERROR_NOT_A_STRUCTURE;
         }
 
         yr_free((yyvsp[0].c_string));
 
         fail_if_error(result);
       }
-#line 2469 "grammar.c" /* yacc.c:1663  */
+#line 2473 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 63:
-#line 886 "grammar.y" /* yacc.c:1663  */
+#line 890 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
         YR_OBJECT_ARRAY* array;
         YR_OBJECT_DICTIONARY* dict;
 
         if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&
             (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_ARRAY)
         {
           if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_INTEGER)
           {
             yr_compiler_set_error_extra_info(
                 compiler, "array indexes must be of integer type");
             result = ERROR_WRONG_TYPE;
           }
 
           fail_if_error(result);
 
           result = yr_parser_emit(
               yyscanner, OP_INDEX_ARRAY, NULL);
 
           array = object_as_array((yyvsp[-3].expression).value.object);
 
           (yyval.expression).type = EXPRESSION_TYPE_OBJECT;
           (yyval.expression).value.object = array->prototype_item;
           (yyval.expression).identifier = array->identifier;
         }
         else if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&
                  (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_DICTIONARY)
         {
           if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_STRING)
           {
             yr_compiler_set_error_extra_info(
                 compiler, "dictionary keys must be of string type");
             result = ERROR_WRONG_TYPE;
           }
 
           fail_if_error(result);
 
           result = yr_parser_emit(
               yyscanner, OP_LOOKUP_DICT, NULL);
 
           dict = object_as_dictionary((yyvsp[-3].expression).value.object);
 
           (yyval.expression).type = EXPRESSION_TYPE_OBJECT;
           (yyval.expression).value.object = dict->prototype_item;
           (yyval.expression).identifier = dict->identifier;
         }
         else
         {
           yr_compiler_set_error_extra_info(
               compiler, (yyvsp[-3].expression).identifier);
 
           result = ERROR_NOT_INDEXABLE;
         }
 
         fail_if_error(result);
       }
-#line 2531 "grammar.c" /* yacc.c:1663  */
+#line 2535 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 64:
-#line 945 "grammar.y" /* yacc.c:1663  */
+#line 949 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
         YR_OBJECT_FUNCTION* function;
         char* args_fmt;
 
         if ((yyvsp[-3].expression).type == EXPRESSION_TYPE_OBJECT &&
             (yyvsp[-3].expression).value.object->type == OBJECT_TYPE_FUNCTION)
         {
           result = yr_parser_check_types(
               compiler, object_as_function((yyvsp[-3].expression).value.object), (yyvsp[-1].c_string));
 
           if (result == ERROR_SUCCESS)
             result = yr_arena_write_string(
                 compiler->sz_arena, (yyvsp[-1].c_string), &args_fmt);
 
           if (result == ERROR_SUCCESS)
             result = yr_parser_emit_with_arg_reloc(
                 yyscanner,
                 OP_CALL,
                 args_fmt,
                 NULL,
                 NULL);
 
           function = object_as_function((yyvsp[-3].expression).value.object);
 
           (yyval.expression).type = EXPRESSION_TYPE_OBJECT;
           (yyval.expression).value.object = function->return_obj;
           (yyval.expression).identifier = function->identifier;
         }
         else
         {
           yr_compiler_set_error_extra_info(
               compiler, (yyvsp[-3].expression).identifier);
 
           result = ERROR_NOT_A_FUNCTION;
         }
 
         yr_free((yyvsp[-1].c_string));
 
         fail_if_error(result);
       }
-#line 2577 "grammar.c" /* yacc.c:1663  */
+#line 2581 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 65:
-#line 990 "grammar.y" /* yacc.c:1663  */
+#line 994 "grammar.y" /* yacc.c:1663  */
     { (yyval.c_string) = yr_strdup(""); }
-#line 2583 "grammar.c" /* yacc.c:1663  */
+#line 2587 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 66:
-#line 991 "grammar.y" /* yacc.c:1663  */
+#line 995 "grammar.y" /* yacc.c:1663  */
     { (yyval.c_string) = (yyvsp[0].c_string); }
-#line 2589 "grammar.c" /* yacc.c:1663  */
+#line 2593 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 67:
-#line 996 "grammar.y" /* yacc.c:1663  */
+#line 1000 "grammar.y" /* yacc.c:1663  */
     {
         (yyval.c_string) = (char*) yr_malloc(YR_MAX_FUNCTION_ARGS + 1);
 
         if ((yyval.c_string) == NULL)
           fail_if_error(ERROR_INSUFFICIENT_MEMORY);
 
         switch((yyvsp[0].expression).type)
         {
           case EXPRESSION_TYPE_INTEGER:
             strlcpy((yyval.c_string), "i", YR_MAX_FUNCTION_ARGS);
             break;
           case EXPRESSION_TYPE_FLOAT:
             strlcpy((yyval.c_string), "f", YR_MAX_FUNCTION_ARGS);
             break;
           case EXPRESSION_TYPE_BOOLEAN:
             strlcpy((yyval.c_string), "b", YR_MAX_FUNCTION_ARGS);
             break;
           case EXPRESSION_TYPE_STRING:
             strlcpy((yyval.c_string), "s", YR_MAX_FUNCTION_ARGS);
             break;
           case EXPRESSION_TYPE_REGEXP:
             strlcpy((yyval.c_string), "r", YR_MAX_FUNCTION_ARGS);
             break;
           default:
             assert(false);
         }
       }
-#line 2621 "grammar.c" /* yacc.c:1663  */
+#line 2625 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 68:
-#line 1024 "grammar.y" /* yacc.c:1663  */
+#line 1028 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
 
         if (strlen((yyvsp[-2].c_string)) == YR_MAX_FUNCTION_ARGS)
         {
           result = ERROR_TOO_MANY_ARGUMENTS;
         }
         else
         {
           switch((yyvsp[0].expression).type)
           {
             case EXPRESSION_TYPE_INTEGER:
               strlcat((yyvsp[-2].c_string), "i", YR_MAX_FUNCTION_ARGS);
               break;
             case EXPRESSION_TYPE_FLOAT:
               strlcat((yyvsp[-2].c_string), "f", YR_MAX_FUNCTION_ARGS);
               break;
             case EXPRESSION_TYPE_BOOLEAN:
               strlcat((yyvsp[-2].c_string), "b", YR_MAX_FUNCTION_ARGS);
               break;
             case EXPRESSION_TYPE_STRING:
               strlcat((yyvsp[-2].c_string), "s", YR_MAX_FUNCTION_ARGS);
               break;
             case EXPRESSION_TYPE_REGEXP:
               strlcat((yyvsp[-2].c_string), "r", YR_MAX_FUNCTION_ARGS);
               break;
             default:
               assert(false);
           }
         }
 
         fail_if_error(result);
 
         (yyval.c_string) = (yyvsp[-2].c_string);
       }
-#line 2661 "grammar.c" /* yacc.c:1663  */
+#line 2665 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 69:
-#line 1064 "grammar.y" /* yacc.c:1663  */
+#line 1068 "grammar.y" /* yacc.c:1663  */
     {
         SIZED_STRING* sized_string = (yyvsp[0].sized_string);
         RE* re;
         RE_ERROR error;
 
         int result = ERROR_SUCCESS;
         int re_flags = 0;
 
         if (sized_string->flags & SIZED_STRING_FLAGS_NO_CASE)
           re_flags |= RE_FLAGS_NO_CASE;
 
         if (sized_string->flags & SIZED_STRING_FLAGS_DOT_ALL)
           re_flags |= RE_FLAGS_DOT_ALL;
 
         result = yr_re_compile(
             sized_string->c_string,
             re_flags,
             compiler->re_code_arena,
             &re,
             &error);
 
         yr_free((yyvsp[0].sized_string));
 
         if (result == ERROR_INVALID_REGULAR_EXPRESSION)
           yr_compiler_set_error_extra_info(compiler, error.message);
 
         if (result == ERROR_SUCCESS)
           result = yr_parser_emit_with_arg_reloc(
               yyscanner,
               OP_PUSH,
               re,
               NULL,
               NULL);
 
         fail_if_error(result);
 
         (yyval.expression).type = EXPRESSION_TYPE_REGEXP;
       }
-#line 2704 "grammar.c" /* yacc.c:1663  */
+#line 2708 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 70:
-#line 1107 "grammar.y" /* yacc.c:1663  */
+#line 1111 "grammar.y" /* yacc.c:1663  */
     {
         if ((yyvsp[0].expression).type == EXPRESSION_TYPE_STRING)
         {
           if ((yyvsp[0].expression).value.sized_string != NULL)
           {
             yywarning(yyscanner,
               "Using literal string \"%s\" in a boolean operation.",
               (yyvsp[0].expression).value.sized_string->c_string);
           }
 
           fail_if_error(yr_parser_emit(
               yyscanner, OP_STR_TO_BOOL, NULL));
         }
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 2725 "grammar.c" /* yacc.c:1663  */
+#line 2729 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 71:
-#line 1127 "grammar.y" /* yacc.c:1663  */
+#line 1131 "grammar.y" /* yacc.c:1663  */
     {
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH, 1, NULL, NULL));
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 2736 "grammar.c" /* yacc.c:1663  */
+#line 2740 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 72:
-#line 1134 "grammar.y" /* yacc.c:1663  */
+#line 1138 "grammar.y" /* yacc.c:1663  */
     {
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH, 0, NULL, NULL));
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 2747 "grammar.c" /* yacc.c:1663  */
+#line 2751 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 73:
-#line 1141 "grammar.y" /* yacc.c:1663  */
+#line 1145 "grammar.y" /* yacc.c:1663  */
     {
         check_type((yyvsp[-2].expression), EXPRESSION_TYPE_STRING, "matches");
         check_type((yyvsp[0].expression), EXPRESSION_TYPE_REGEXP, "matches");
 
         fail_if_error(yr_parser_emit(
             yyscanner,
             OP_MATCHES,
             NULL));
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 2763 "grammar.c" /* yacc.c:1663  */
+#line 2767 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 74:
-#line 1153 "grammar.y" /* yacc.c:1663  */
+#line 1157 "grammar.y" /* yacc.c:1663  */
     {
         check_type((yyvsp[-2].expression), EXPRESSION_TYPE_STRING, "contains");
         check_type((yyvsp[0].expression), EXPRESSION_TYPE_STRING, "contains");
 
         fail_if_error(yr_parser_emit(
             yyscanner, OP_CONTAINS, NULL));
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 2777 "grammar.c" /* yacc.c:1663  */
+#line 2781 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 75:
-#line 1163 "grammar.y" /* yacc.c:1663  */
+#line 1167 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_string_identifier(
             yyscanner,
             (yyvsp[0].c_string),
             OP_FOUND,
             UNDEFINED);
 
         yr_free((yyvsp[0].c_string));
 
         fail_if_error(result);
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 2795 "grammar.c" /* yacc.c:1663  */
+#line 2799 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 76:
-#line 1177 "grammar.y" /* yacc.c:1663  */
+#line 1181 "grammar.y" /* yacc.c:1663  */
     {
         int result;
 
         check_type_with_cleanup((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, "at", yr_free((yyvsp[-2].c_string)));
 
         result = yr_parser_reduce_string_identifier(
             yyscanner, (yyvsp[-2].c_string), OP_FOUND_AT, (yyvsp[0].expression).value.integer);
 
         yr_free((yyvsp[-2].c_string));
 
         fail_if_error(result);
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 2814 "grammar.c" /* yacc.c:1663  */
+#line 2818 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 77:
-#line 1192 "grammar.y" /* yacc.c:1663  */
+#line 1196 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_string_identifier(
             yyscanner, (yyvsp[-2].c_string), OP_FOUND_IN, UNDEFINED);
 
         yr_free((yyvsp[-2].c_string));
 
         fail_if_error(result);
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 2829 "grammar.c" /* yacc.c:1663  */
+#line 2833 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 78:
-#line 1203 "grammar.y" /* yacc.c:1663  */
+#line 1207 "grammar.y" /* yacc.c:1663  */
     {
-        if (compiler->loop_depth > 0)
+        // Free all the loop variable identifiers and set loop_depth to 0. This
+        // is ok even if we have nested loops. If an error occurs while parsing
+        // the inner loop, it will be propagated to the outer loop anyways, so
+        // it's safe to do this cleanup while processing the error for the
+        // inner loop.
+
+        for (int i = 0; i <= compiler->loop_depth; i++)
         {
-          free_loop_identifiers();
-          compiler->loop_depth--;
+          loop_vars_cleanup(i);
         }
 
+        compiler->loop_depth = 0;
         YYERROR;
       }
-#line 2843 "grammar.c" /* yacc.c:1663  */
+#line 2853 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 79:
-#line 1264 "grammar.y" /* yacc.c:1663  */
+#line 1274 "grammar.y" /* yacc.c:1663  */
     {
         // var_frame is used for accessing local variables used in this loop.
         // All local variables are accessed using var_frame as a reference,
         // like var_frame + 0, var_frame + 1, etc. Here we initialize var_frame
         // with the correct value, which depends on the number of variables
         // defined by any outer loops.
 
         int var_frame = _yr_compiler_get_var_frame(compiler);
         int result = ERROR_SUCCESS;
 
         if (compiler->loop_depth == YR_MAX_LOOP_NESTING)
           result = ERROR_LOOP_NESTING_LIMIT_EXCEEDED;
 
+        // This loop uses 3 internal variables besides the ones explicitly
+        // defined by the user.
+        compiler->loop[compiler->loop_depth].vars_internal_count = 3;
+
+        // Initialize the number of variables, this number will be incremented
+        // as variable declaration are processed by for_variables.
+        compiler->loop[compiler->loop_depth].vars_count = 0;
+
         fail_if_error(result);
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_CLEAR_M, var_frame + 0, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_CLEAR_M, var_frame + 1, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_POP_M, var_frame + 2, NULL, NULL));
-
-        // This loop uses 3 internal variables besides the ones explicitly
-        // defined by the user.
-        compiler->loop[compiler->loop_depth].vars_internal_count = 3;
-
-        // Initialize the number of variables, this number will be incremented
-        // as variable declaration are processed by for_variables.
-        compiler->loop[compiler->loop_depth].vars_count = 0;
       }
-#line 2880 "grammar.c" /* yacc.c:1663  */
+#line 2890 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 80:
-#line 1297 "grammar.y" /* yacc.c:1663  */
+#line 1307 "grammar.y" /* yacc.c:1663  */
     {
         YR_LOOP_CONTEXT* loop_ctx = &compiler->loop[compiler->loop_depth];
         YR_FIXUP* fixup;
 
         uint8_t* loop_start_addr;
         void* jmp_arg_addr;
 
         int var_frame = _yr_compiler_get_var_frame(compiler);
 
         fail_if_error(yr_parser_emit(
             yyscanner, OP_ITER_NEXT, &loop_start_addr));
 
         // For each variable generate an instruction that pops the value from
         // the stack and store it into one memory slot starting at var_frame + 3
         // because the first 3 slots in the frame are for the internal variables.
 
         for (int i = 0; i < loop_ctx->vars_count; i++)
         {
           fail_if_error(yr_parser_emit_with_arg(
               yyscanner, OP_POP_M, var_frame + 3 + i, NULL, NULL));
         }
 
         fail_if_error(yr_parser_emit_with_arg_reloc(
             yyscanner,
             OP_JTRUE_P,
             0,
             NULL,
             &jmp_arg_addr));
 
         // Push a new fixup entry in the fixup stack so that the jump
         // destination is set once we know it.
 
         fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));
 
         if (fixup == NULL)
           fail_if_error(ERROR_INSUFFICIENT_MEMORY);
 
         fixup->address = jmp_arg_addr;
         fixup->next = compiler->fixup_stack_head;
         compiler->fixup_stack_head = fixup;
 
         loop_ctx->addr = loop_start_addr;
         compiler->loop_depth++;
       }
-#line 2929 "grammar.c" /* yacc.c:1663  */
+#line 2939 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 81:
-#line 1342 "grammar.y" /* yacc.c:1663  */
+#line 1352 "grammar.y" /* yacc.c:1663  */
     {
         YR_FIXUP* fixup;
         uint8_t* pop_addr;
         int var_frame;
 
-        free_loop_identifiers();
         compiler->loop_depth--;
 
+        loop_vars_cleanup(compiler->loop_depth);
+
         var_frame = _yr_compiler_get_var_frame(compiler);
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_ADD_M, var_frame + 0, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_INCR_M, var_frame + 1, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH_M, var_frame + 2, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg_reloc(
             yyscanner,
             OP_JUNDEF_P,
             compiler->loop[compiler->loop_depth].addr,
             NULL,
             NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH_M, var_frame + 0, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH_M, var_frame + 2, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg_reloc(
             yyscanner,
             OP_JL_P,
             compiler->loop[compiler->loop_depth].addr,
             NULL,
             NULL));
 
         fail_if_error(yr_parser_emit(
             yyscanner, OP_POP, &pop_addr));
 
         // Pop from the stack the fixup entry containing the jump's address
         // that needs to be fixed.
 
         fixup = compiler->fixup_stack_head;
         compiler->fixup_stack_head = fixup->next;
 
         // Fix the jump's target address.
         *(void**)(fixup->address) = (void*)(pop_addr);
 
         yr_free(fixup);
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH_M, var_frame + 0, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH_M, var_frame + 2, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_SWAPUNDEF, var_frame + 1, NULL, NULL));
 
         fail_if_error(yr_parser_emit(
             yyscanner, OP_INT_GE, NULL));
       }
-#line 2999 "grammar.c" /* yacc.c:1663  */
+#line 3010 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 82:
-#line 1408 "grammar.y" /* yacc.c:1663  */
+#line 1419 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
         int var_frame = _yr_compiler_get_var_frame(compiler);;
         uint8_t* addr;
 
         if (compiler->loop_depth == YR_MAX_LOOP_NESTING)
           result = ERROR_LOOP_NESTING_LIMIT_EXCEEDED;
 
         if (compiler->loop_for_of_var_index != -1)
           result = ERROR_NESTED_FOR_OF_LOOP;
 
         fail_if_error(result);
 
         yr_parser_emit_with_arg(
             yyscanner, OP_CLEAR_M, var_frame + 1, NULL, NULL);
 
         yr_parser_emit_with_arg(
             yyscanner, OP_CLEAR_M, var_frame + 2, NULL, NULL);
 
         // Pop the first string.
         yr_parser_emit_with_arg(
             yyscanner, OP_POP_M, var_frame, &addr, NULL);
 
         compiler->loop_for_of_var_index = var_frame;
         compiler->loop[compiler->loop_depth].vars_internal_count = 3;
         compiler->loop[compiler->loop_depth].vars_count = 0;
         compiler->loop[compiler->loop_depth].addr = addr;
         compiler->loop_depth++;
       }
-#line 3033 "grammar.c" /* yacc.c:1663  */
+#line 3044 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 83:
-#line 1438 "grammar.y" /* yacc.c:1663  */
+#line 1449 "grammar.y" /* yacc.c:1663  */
     {
         int var_frame = 0;
 
-        free_loop_identifiers();
         compiler->loop_depth--;
         compiler->loop_for_of_var_index = -1;
 
+        loop_vars_cleanup(compiler->loop_depth);
+
         var_frame = _yr_compiler_get_var_frame(compiler);
 
         // Increment counter by the value returned by the
         // boolean expression (0 or 1). If the boolean expression
         // returned UNDEFINED the OP_ADD_M won't do anything.
 
         yr_parser_emit_with_arg(
             yyscanner, OP_ADD_M, var_frame + 1, NULL, NULL);
 
         // Increment iterations counter.
         yr_parser_emit_with_arg(
             yyscanner, OP_INCR_M, var_frame + 2, NULL, NULL);
 
         // If next string is not undefined, go back to the
         // beginning of the loop.
         yr_parser_emit_with_arg_reloc(
             yyscanner,
             OP_JNUNDEF,
             compiler->loop[compiler->loop_depth].addr,
             NULL,
             NULL);
 
         // Pop end-of-list marker.
         yr_parser_emit(yyscanner, OP_POP, NULL);
 
         // At this point the loop quantifier (any, all, 1, 2,..)
         // is at top of the stack. Check if the quantifier is
         // undefined (meaning "all") and replace it with the
         // iterations counter in that case.
         yr_parser_emit_with_arg(
             yyscanner, OP_SWAPUNDEF, var_frame + 2, NULL, NULL);
 
         // Compare the loop quantifier with the number of
         // expressions evaluating to true.
         yr_parser_emit_with_arg(
             yyscanner, OP_PUSH_M, var_frame + 1, NULL, NULL);
 
         yr_parser_emit(yyscanner, OP_INT_LE, NULL);
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 3086 "grammar.c" /* yacc.c:1663  */
+#line 3098 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 84:
-#line 1487 "grammar.y" /* yacc.c:1663  */
+#line 1499 "grammar.y" /* yacc.c:1663  */
     {
         yr_parser_emit(yyscanner, OP_OF, NULL);
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 3096 "grammar.c" /* yacc.c:1663  */
+#line 3108 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 85:
-#line 1493 "grammar.y" /* yacc.c:1663  */
+#line 1505 "grammar.y" /* yacc.c:1663  */
     {
         yr_parser_emit(yyscanner, OP_NOT, NULL);
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 3106 "grammar.c" /* yacc.c:1663  */
+#line 3118 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 86:
-#line 1499 "grammar.y" /* yacc.c:1663  */
+#line 1511 "grammar.y" /* yacc.c:1663  */
     {
         YR_FIXUP* fixup;
         void* jmp_destination_addr;
 
         fail_if_error(yr_parser_emit_with_arg_reloc(
             yyscanner,
             OP_JFALSE,
             0,          // still don't know the jump destination
             NULL,
             &jmp_destination_addr));
 
         // create a fixup entry for the jump and push it in the stack
         fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));
 
         if (fixup == NULL)
           fail_if_error(ERROR_INSUFFICIENT_MEMORY);
 
         fixup->address = jmp_destination_addr;
         fixup->next = compiler->fixup_stack_head;
         compiler->fixup_stack_head = fixup;
       }
-#line 3132 "grammar.c" /* yacc.c:1663  */
+#line 3144 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 87:
-#line 1521 "grammar.y" /* yacc.c:1663  */
+#line 1533 "grammar.y" /* yacc.c:1663  */
     {
         YR_FIXUP* fixup;
         uint8_t* nop_addr;
 
         fail_if_error(yr_parser_emit(yyscanner, OP_AND, NULL));
 
         // Generate a do-nothing instruction (NOP) in order to get its address
         // and use it as the destination for the OP_JFALSE. We can not simply
         // use the address of the OP_AND instruction +1 because we can't be
         // sure that the instruction following the OP_AND is going to be in
         // the same arena page. As we don't have a reliable way of getting the
         // address of the next instruction we generate the OP_NOP.
 
         fail_if_error(yr_parser_emit(yyscanner, OP_NOP, &nop_addr));
 
         fixup = compiler->fixup_stack_head;
         *(void**)(fixup->address) = (void*) nop_addr;
         compiler->fixup_stack_head = fixup->next;
         yr_free(fixup);
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 3159 "grammar.c" /* yacc.c:1663  */
+#line 3171 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 88:
-#line 1544 "grammar.y" /* yacc.c:1663  */
+#line 1556 "grammar.y" /* yacc.c:1663  */
     {
         YR_FIXUP* fixup;
         void* jmp_destination_addr;
 
         fail_if_error(yr_parser_emit_with_arg_reloc(
             yyscanner,
             OP_JTRUE,
             0,         // still don't know the jump destination
             NULL,
             &jmp_destination_addr));
 
         fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));
 
         if (fixup == NULL)
           fail_if_error(ERROR_INSUFFICIENT_MEMORY);
 
         fixup->address = jmp_destination_addr;
         fixup->next = compiler->fixup_stack_head;
         compiler->fixup_stack_head = fixup;
       }
-#line 3184 "grammar.c" /* yacc.c:1663  */
+#line 3196 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 89:
-#line 1565 "grammar.y" /* yacc.c:1663  */
+#line 1577 "grammar.y" /* yacc.c:1663  */
     {
         YR_FIXUP* fixup;
         uint8_t* nop_addr;
 
         fail_if_error(yr_parser_emit(yyscanner, OP_OR, NULL));
 
         // Generate a do-nothing instruction (NOP) in order to get its address
         // and use it as the destination for the OP_JFALSE. We can not simply
         // use the address of the OP_OR instruction +1 because we can't be
         // sure that the instruction following the OP_AND is going to be in
         // the same arena page. As we don't have a reliable way of getting the
         // address of the next instruction we generate the OP_NOP.
 
         fail_if_error(yr_parser_emit(yyscanner, OP_NOP, &nop_addr));
 
         fixup = compiler->fixup_stack_head;
         *(void**)(fixup->address) = (void*)(nop_addr);
         compiler->fixup_stack_head = fixup->next;
         yr_free(fixup);
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 3211 "grammar.c" /* yacc.c:1663  */
+#line 3223 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 90:
-#line 1588 "grammar.y" /* yacc.c:1663  */
+#line 1600 "grammar.y" /* yacc.c:1663  */
     {
         fail_if_error(yr_parser_reduce_operation(
             yyscanner, "<", (yyvsp[-2].expression), (yyvsp[0].expression)));
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 3222 "grammar.c" /* yacc.c:1663  */
+#line 3234 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 91:
-#line 1595 "grammar.y" /* yacc.c:1663  */
+#line 1607 "grammar.y" /* yacc.c:1663  */
     {
         fail_if_error(yr_parser_reduce_operation(
             yyscanner, ">", (yyvsp[-2].expression), (yyvsp[0].expression)));
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 3233 "grammar.c" /* yacc.c:1663  */
+#line 3245 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 92:
-#line 1602 "grammar.y" /* yacc.c:1663  */
+#line 1614 "grammar.y" /* yacc.c:1663  */
     {
         fail_if_error(yr_parser_reduce_operation(
             yyscanner, "<=", (yyvsp[-2].expression), (yyvsp[0].expression)));
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 3244 "grammar.c" /* yacc.c:1663  */
+#line 3256 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 93:
-#line 1609 "grammar.y" /* yacc.c:1663  */
+#line 1621 "grammar.y" /* yacc.c:1663  */
     {
         fail_if_error(yr_parser_reduce_operation(
             yyscanner, ">=", (yyvsp[-2].expression), (yyvsp[0].expression)));
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 3255 "grammar.c" /* yacc.c:1663  */
+#line 3267 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 94:
-#line 1616 "grammar.y" /* yacc.c:1663  */
+#line 1628 "grammar.y" /* yacc.c:1663  */
     {
         fail_if_error(yr_parser_reduce_operation(
             yyscanner, "==", (yyvsp[-2].expression), (yyvsp[0].expression)));
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 3266 "grammar.c" /* yacc.c:1663  */
+#line 3278 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 95:
-#line 1623 "grammar.y" /* yacc.c:1663  */
+#line 1635 "grammar.y" /* yacc.c:1663  */
     {
         fail_if_error(yr_parser_reduce_operation(
             yyscanner, "!=", (yyvsp[-2].expression), (yyvsp[0].expression)));
 
         (yyval.expression).type = EXPRESSION_TYPE_BOOLEAN;
       }
-#line 3277 "grammar.c" /* yacc.c:1663  */
+#line 3289 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 96:
-#line 1630 "grammar.y" /* yacc.c:1663  */
+#line 1642 "grammar.y" /* yacc.c:1663  */
     {
         (yyval.expression) = (yyvsp[0].expression);
       }
-#line 3285 "grammar.c" /* yacc.c:1663  */
+#line 3297 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 97:
-#line 1634 "grammar.y" /* yacc.c:1663  */
+#line 1646 "grammar.y" /* yacc.c:1663  */
     {
         (yyval.expression) = (yyvsp[-1].expression);
       }
-#line 3293 "grammar.c" /* yacc.c:1663  */
+#line 3305 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 98:
-#line 1642 "grammar.y" /* yacc.c:1663  */
+#line 1654 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
 
         YR_LOOP_CONTEXT* loop_ctx = &compiler->loop[compiler->loop_depth];
 
         if (yr_parser_lookup_loop_variable(yyscanner, (yyvsp[0].c_string), NULL) >= 0)
         {
           yr_compiler_set_error_extra_info(compiler, (yyvsp[0].c_string));
+          yr_free((yyvsp[0].c_string));
+
           result = ERROR_DUPLICATED_LOOP_IDENTIFIER;
         }
 
         fail_if_error(result);
 
         loop_ctx->vars[loop_ctx->vars_count++].identifier = (yyvsp[0].c_string);
 
         assert(loop_ctx->vars_count <= YR_MAX_LOOP_VARS);
       }
-#line 3315 "grammar.c" /* yacc.c:1663  */
+#line 3329 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 99:
-#line 1660 "grammar.y" /* yacc.c:1663  */
+#line 1674 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
 
         YR_LOOP_CONTEXT* loop_ctx = &compiler->loop[compiler->loop_depth];
 
         if (loop_ctx->vars_count == YR_MAX_LOOP_VARS)
         {
           yr_compiler_set_error_extra_info(compiler, "too many loop variables");
+          yr_free((yyvsp[0].c_string));
+
           result = ERROR_SYNTAX_ERROR;
         }
         else if (yr_parser_lookup_loop_variable(yyscanner, (yyvsp[0].c_string), NULL) >= 0)
         {
           yr_compiler_set_error_extra_info(compiler, (yyvsp[0].c_string));
+          yr_free((yyvsp[0].c_string));
+
           result = ERROR_DUPLICATED_LOOP_IDENTIFIER;
         }
 
         fail_if_error(result);
 
         loop_ctx->vars[loop_ctx->vars_count++].identifier = (yyvsp[0].c_string);
       }
-#line 3340 "grammar.c" /* yacc.c:1663  */
+#line 3358 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 100:
-#line 1684 "grammar.y" /* yacc.c:1663  */
+#line 1702 "grammar.y" /* yacc.c:1663  */
     {
         YR_LOOP_CONTEXT* loop_ctx = &compiler->loop[compiler->loop_depth];
 
         // Initially we assume that the identifier is from a non-iterable type,
         // this will change later if it's iterable.
         int result = ERROR_WRONG_TYPE;
 
         if ((yyvsp[0].expression).type == EXPRESSION_TYPE_OBJECT)
         {
           switch((yyvsp[0].expression).value.object->type)
           {
             case OBJECT_TYPE_ARRAY:
               // If iterating an array the loop must define a single variable
               // that will hold the current item. If a different number of
               // variables were defined that's an error.
               if (loop_ctx->vars_count == 1)
               {
                 loop_ctx->vars[0].type = EXPRESSION_TYPE_OBJECT;
                 loop_ctx->vars[0].value.object = \
                     object_as_array((yyvsp[0].expression).value.object)->prototype_item;
 
                 result = yr_parser_emit(yyscanner, OP_ITER_START_ARRAY, NULL);
               }
               else
               {
                 yr_compiler_set_error_extra_info_fmt(
                     compiler,
                     "iterator for \"%s\" yields a single item on each iteration"
                     ", but the loop expects %d",
                     (yyvsp[0].expression).identifier,
                     loop_ctx->vars_count);
 
                 result =  ERROR_SYNTAX_ERROR;
               }
               break;
 
             case OBJECT_TYPE_DICTIONARY:
               // If iterating a dictionary the loop must define exactly two
               // variables, one for the key and another for the value . If a
               // different number of variables were defined that's an error.
               if (loop_ctx->vars_count == 2)
               {
                 loop_ctx->vars[0].type = EXPRESSION_TYPE_STRING;
                 loop_ctx->vars[0].value.sized_string = NULL;
                 loop_ctx->vars[1].type = EXPRESSION_TYPE_OBJECT;
                 loop_ctx->vars[1].value.object = \
                     object_as_array((yyvsp[0].expression).value.object)->prototype_item;
 
                 result = yr_parser_emit(yyscanner, OP_ITER_START_DICT, NULL);
               }
               else
               {
                 yr_compiler_set_error_extra_info_fmt(
                     compiler,
                     "iterator for \"%s\" yields a key,value pair item on each iteration",
                     (yyvsp[0].expression).identifier);
 
                 result =  ERROR_SYNTAX_ERROR;
               }
               break;
           }
         }
 
         if (result == ERROR_WRONG_TYPE)
         {
           yr_compiler_set_error_extra_info_fmt(
               compiler,
               "identifier \"%s\" is not iterable",
               (yyvsp[0].expression).identifier);
         }
 
         fail_if_error(result);
       }
-#line 3418 "grammar.c" /* yacc.c:1663  */
+#line 3436 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 101:
-#line 1758 "grammar.y" /* yacc.c:1663  */
+#line 1776 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
 
         YR_LOOP_CONTEXT* loop_ctx = &compiler->loop[compiler->loop_depth];
 
         if (loop_ctx->vars_count == 1)
         {
           loop_ctx->vars[0].type = EXPRESSION_TYPE_INTEGER;
           loop_ctx->vars[0].value.integer = UNDEFINED;
         }
         else
         {
           yr_compiler_set_error_extra_info_fmt(
               compiler,
               "iterator yields an integer on each iteration "
               ", but the loop expects %d",
               loop_ctx->vars_count);
 
           result =  ERROR_SYNTAX_ERROR;
         }
 
         fail_if_error(result);
       }
-#line 3446 "grammar.c" /* yacc.c:1663  */
+#line 3464 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 102:
-#line 1786 "grammar.y" /* yacc.c:1663  */
+#line 1804 "grammar.y" /* yacc.c:1663  */
     {
         // $2 contains the number of integers in the enumeration
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH, (yyvsp[-1].integer), NULL, NULL));
 
         fail_if_error(yr_parser_emit(
             yyscanner, OP_ITER_START_INT_ENUM, NULL));
       }
-#line 3459 "grammar.c" /* yacc.c:1663  */
+#line 3477 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 103:
-#line 1795 "grammar.y" /* yacc.c:1663  */
+#line 1813 "grammar.y" /* yacc.c:1663  */
     {
         fail_if_error(yr_parser_emit(
             yyscanner, OP_ITER_START_INT_RANGE, NULL));
       }
-#line 3468 "grammar.c" /* yacc.c:1663  */
+#line 3486 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 104:
-#line 1804 "grammar.y" /* yacc.c:1663  */
+#line 1822 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
 
         if ((yyvsp[-3].expression).type != EXPRESSION_TYPE_INTEGER)
         {
           yr_compiler_set_error_extra_info(
               compiler, "wrong type for range's lower bound");
           result = ERROR_WRONG_TYPE;
         }
 
         if ((yyvsp[-1].expression).type != EXPRESSION_TYPE_INTEGER)
         {
           yr_compiler_set_error_extra_info(
               compiler, "wrong type for range's upper bound");
           result = ERROR_WRONG_TYPE;
         }
 
         fail_if_error(result);
       }
-#line 3492 "grammar.c" /* yacc.c:1663  */
+#line 3510 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 105:
-#line 1828 "grammar.y" /* yacc.c:1663  */
+#line 1846 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
 
         if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)
         {
           yr_compiler_set_error_extra_info(
               compiler, "wrong type for enumeration item");
           result = ERROR_WRONG_TYPE;
         }
 
         fail_if_error(result);
 
         (yyval.integer) = 1;
       }
-#line 3511 "grammar.c" /* yacc.c:1663  */
+#line 3529 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 106:
-#line 1843 "grammar.y" /* yacc.c:1663  */
+#line 1861 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
 
         if ((yyvsp[0].expression).type != EXPRESSION_TYPE_INTEGER)
         {
           yr_compiler_set_error_extra_info(
               compiler, "wrong type for enumeration item");
           result = ERROR_WRONG_TYPE;
         }
 
         fail_if_error(result);
 
         (yyval.integer) = (yyvsp[-2].integer) + 1;
       }
-#line 3530 "grammar.c" /* yacc.c:1663  */
+#line 3548 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 107:
-#line 1862 "grammar.y" /* yacc.c:1663  */
+#line 1880 "grammar.y" /* yacc.c:1663  */
     {
         // Push end-of-list marker
         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);
       }
-#line 3539 "grammar.c" /* yacc.c:1663  */
+#line 3557 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 109:
-#line 1868 "grammar.y" /* yacc.c:1663  */
+#line 1886 "grammar.y" /* yacc.c:1663  */
     {
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH, UNDEFINED, NULL, NULL));
 
         fail_if_error(yr_parser_emit_pushes_for_strings(
             yyscanner, "$*"));
       }
-#line 3551 "grammar.c" /* yacc.c:1663  */
+#line 3569 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 112:
-#line 1886 "grammar.y" /* yacc.c:1663  */
+#line 1904 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));
         yr_free((yyvsp[0].c_string));
 
         fail_if_error(result);
       }
-#line 3562 "grammar.c" /* yacc.c:1663  */
+#line 3580 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 113:
-#line 1893 "grammar.y" /* yacc.c:1663  */
+#line 1911 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_emit_pushes_for_strings(yyscanner, (yyvsp[0].c_string));
         yr_free((yyvsp[0].c_string));
 
         fail_if_error(result);
       }
-#line 3573 "grammar.c" /* yacc.c:1663  */
+#line 3591 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 114:
-#line 1904 "grammar.y" /* yacc.c:1663  */
+#line 1922 "grammar.y" /* yacc.c:1663  */
     {
         (yyval.integer) = FOR_EXPRESSION_ANY;
       }
-#line 3581 "grammar.c" /* yacc.c:1663  */
+#line 3599 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 115:
-#line 1908 "grammar.y" /* yacc.c:1663  */
+#line 1926 "grammar.y" /* yacc.c:1663  */
     {
         yr_parser_emit_with_arg(yyscanner, OP_PUSH, UNDEFINED, NULL, NULL);
         (yyval.integer) = FOR_EXPRESSION_ALL;
       }
-#line 3590 "grammar.c" /* yacc.c:1663  */
+#line 3608 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 116:
-#line 1913 "grammar.y" /* yacc.c:1663  */
+#line 1931 "grammar.y" /* yacc.c:1663  */
     {
         yr_parser_emit_with_arg(yyscanner, OP_PUSH, 1, NULL, NULL);
         (yyval.integer) = FOR_EXPRESSION_ANY;
       }
-#line 3599 "grammar.c" /* yacc.c:1663  */
+#line 3617 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 117:
-#line 1922 "grammar.y" /* yacc.c:1663  */
+#line 1940 "grammar.y" /* yacc.c:1663  */
     {
         (yyval.expression) = (yyvsp[-1].expression);
       }
-#line 3607 "grammar.c" /* yacc.c:1663  */
+#line 3625 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 118:
-#line 1926 "grammar.y" /* yacc.c:1663  */
+#line 1944 "grammar.y" /* yacc.c:1663  */
     {
         fail_if_error(yr_parser_emit(
             yyscanner, OP_FILESIZE, NULL));
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
         (yyval.expression).value.integer = UNDEFINED;
       }
-#line 3619 "grammar.c" /* yacc.c:1663  */
+#line 3637 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 119:
-#line 1934 "grammar.y" /* yacc.c:1663  */
+#line 1952 "grammar.y" /* yacc.c:1663  */
     {
         yywarning(yyscanner,
             "Using deprecated \"entrypoint\" keyword. Use the \"entry_point\" "
             "function from PE module instead.");
 
         fail_if_error(yr_parser_emit(
             yyscanner, OP_ENTRYPOINT, NULL));
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
         (yyval.expression).value.integer = UNDEFINED;
       }
-#line 3635 "grammar.c" /* yacc.c:1663  */
+#line 3653 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 120:
-#line 1946 "grammar.y" /* yacc.c:1663  */
+#line 1964 "grammar.y" /* yacc.c:1663  */
     {
         check_type((yyvsp[-1].expression), EXPRESSION_TYPE_INTEGER, "intXXXX or uintXXXX");
 
         // _INTEGER_FUNCTION_ could be any of int8, int16, int32, uint8,
         // uint32, etc. $1 contains an index that added to OP_READ_INT results
         // in the proper OP_INTXX opcode.
 
         fail_if_error(yr_parser_emit(
             yyscanner, (uint8_t) (OP_READ_INT + (yyvsp[-3].integer)), NULL));
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
         (yyval.expression).value.integer = UNDEFINED;
       }
-#line 3653 "grammar.c" /* yacc.c:1663  */
+#line 3671 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 121:
-#line 1960 "grammar.y" /* yacc.c:1663  */
+#line 1978 "grammar.y" /* yacc.c:1663  */
     {
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH, (yyvsp[0].integer), NULL, NULL));
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
         (yyval.expression).value.integer = (yyvsp[0].integer);
       }
-#line 3665 "grammar.c" /* yacc.c:1663  */
+#line 3683 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 122:
-#line 1968 "grammar.y" /* yacc.c:1663  */
+#line 1986 "grammar.y" /* yacc.c:1663  */
     {
         fail_if_error(yr_parser_emit_with_arg_double(
             yyscanner, OP_PUSH, (yyvsp[0].double_), NULL, NULL));
 
         (yyval.expression).type = EXPRESSION_TYPE_FLOAT;
       }
-#line 3676 "grammar.c" /* yacc.c:1663  */
+#line 3694 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 123:
-#line 1975 "grammar.y" /* yacc.c:1663  */
+#line 1993 "grammar.y" /* yacc.c:1663  */
     {
         SIZED_STRING* sized_string;
 
         int result = yr_arena_write_data(
             compiler->sz_arena,
             (yyvsp[0].sized_string),
             (yyvsp[0].sized_string)->length + sizeof(SIZED_STRING),
             (void**) &sized_string);
 
         yr_free((yyvsp[0].sized_string));
 
         if (result == ERROR_SUCCESS)
           result = yr_parser_emit_with_arg_reloc(
               yyscanner,
               OP_PUSH,
               sized_string,
               NULL,
               NULL);
 
         fail_if_error(result);
 
         (yyval.expression).type = EXPRESSION_TYPE_STRING;
         (yyval.expression).value.sized_string = sized_string;
       }
-#line 3705 "grammar.c" /* yacc.c:1663  */
+#line 3723 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 124:
-#line 2000 "grammar.y" /* yacc.c:1663  */
+#line 2018 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_string_identifier(
             yyscanner, (yyvsp[0].c_string), OP_COUNT, UNDEFINED);
 
         yr_free((yyvsp[0].c_string));
 
         fail_if_error(result);
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
         (yyval.expression).value.integer = UNDEFINED;
       }
-#line 3721 "grammar.c" /* yacc.c:1663  */
+#line 3739 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 125:
-#line 2012 "grammar.y" /* yacc.c:1663  */
+#line 2030 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_string_identifier(
             yyscanner, (yyvsp[-3].c_string), OP_OFFSET, UNDEFINED);
 
         yr_free((yyvsp[-3].c_string));
 
         fail_if_error(result);
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
         (yyval.expression).value.integer = UNDEFINED;
       }
-#line 3737 "grammar.c" /* yacc.c:1663  */
+#line 3755 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 126:
-#line 2024 "grammar.y" /* yacc.c:1663  */
+#line 2042 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_emit_with_arg(
             yyscanner, OP_PUSH, 1, NULL, NULL);
 
         if (result == ERROR_SUCCESS)
           result = yr_parser_reduce_string_identifier(
               yyscanner, (yyvsp[0].c_string), OP_OFFSET, UNDEFINED);
 
         yr_free((yyvsp[0].c_string));
 
         fail_if_error(result);
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
         (yyval.expression).value.integer = UNDEFINED;
       }
-#line 3757 "grammar.c" /* yacc.c:1663  */
+#line 3775 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 127:
-#line 2040 "grammar.y" /* yacc.c:1663  */
+#line 2058 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_string_identifier(
             yyscanner, (yyvsp[-3].c_string), OP_LENGTH, UNDEFINED);
 
         yr_free((yyvsp[-3].c_string));
 
         fail_if_error(result);
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
         (yyval.expression).value.integer = UNDEFINED;
       }
-#line 3773 "grammar.c" /* yacc.c:1663  */
+#line 3791 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 128:
-#line 2052 "grammar.y" /* yacc.c:1663  */
+#line 2070 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_emit_with_arg(
             yyscanner, OP_PUSH, 1, NULL, NULL);
 
         if (result == ERROR_SUCCESS)
           result = yr_parser_reduce_string_identifier(
               yyscanner, (yyvsp[0].c_string), OP_LENGTH, UNDEFINED);
 
         yr_free((yyvsp[0].c_string));
 
         fail_if_error(result);
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
         (yyval.expression).value.integer = UNDEFINED;
       }
-#line 3793 "grammar.c" /* yacc.c:1663  */
+#line 3811 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 129:
-#line 2068 "grammar.y" /* yacc.c:1663  */
+#line 2086 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
 
         if ((yyvsp[0].expression).type == EXPRESSION_TYPE_OBJECT)
         {
           result = yr_parser_emit(
               yyscanner, OP_OBJ_VALUE, NULL);
 
           switch((yyvsp[0].expression).value.object->type)
           {
             case OBJECT_TYPE_INTEGER:
               (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
               (yyval.expression).value.integer = UNDEFINED;
               break;
             case OBJECT_TYPE_FLOAT:
               (yyval.expression).type = EXPRESSION_TYPE_FLOAT;
               break;
             case OBJECT_TYPE_STRING:
               (yyval.expression).type = EXPRESSION_TYPE_STRING;
               (yyval.expression).value.sized_string = NULL;
               break;
             default:
               // In a primary expression any identifier that corresponds to an
               // object must be of type integer, float or string. If "foobar" is
               // either a function, structure, dictionary or array you can not
               // use it as:
               //   condition: foobar
               yr_compiler_set_error_extra_info_fmt(
                   compiler,
                   "wrong usage of identifier \"%s\"",
                   (yyvsp[0].expression).identifier);
               result = ERROR_WRONG_TYPE;
           }
         }
         else
         {
           (yyval.expression) = (yyvsp[0].expression);
         }
 
         fail_if_error(result);
       }
-#line 3839 "grammar.c" /* yacc.c:1663  */
+#line 3857 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 130:
-#line 2110 "grammar.y" /* yacc.c:1663  */
+#line 2128 "grammar.y" /* yacc.c:1663  */
     {
         int result = ERROR_SUCCESS;
 
         check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER | EXPRESSION_TYPE_FLOAT, "-");
 
         if ((yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)
         {
           (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
           (yyval.expression).value.integer = ((yyvsp[0].expression).value.integer == UNDEFINED) ?
               UNDEFINED : -((yyvsp[0].expression).value.integer);
           result = yr_parser_emit(yyscanner, OP_INT_MINUS, NULL);
         }
         else if ((yyvsp[0].expression).type == EXPRESSION_TYPE_FLOAT)
         {
           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;
           result = yr_parser_emit(yyscanner, OP_DBL_MINUS, NULL);
         }
 
         fail_if_error(result);
       }
-#line 3864 "grammar.c" /* yacc.c:1663  */
+#line 3882 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 131:
-#line 2131 "grammar.y" /* yacc.c:1663  */
+#line 2149 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_operation(
             yyscanner, "+", (yyvsp[-2].expression), (yyvsp[0].expression));
 
         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&
             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)
         {
           int64_t i1 = (yyvsp[-2].expression).value.integer;
           int64_t i2 = (yyvsp[0].expression).value.integer;
 
           if (!IS_UNDEFINED(i1) && !IS_UNDEFINED(i2) &&
               (
                 (i2 > 0 && i1 > INT64_MAX - i2) ||
                 (i2 < 0 && i1 < INT64_MIN - i2)
               ))
           {
             yr_compiler_set_error_extra_info_fmt(
                 compiler, "%" PRId64 " + %" PRId64, i1, i2);
 
             result = ERROR_INTEGER_OVERFLOW;
           }
           else
           {
             (yyval.expression).value.integer = OPERATION(+, i1, i2);
             (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
           }
         }
         else
         {
           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;
         }
 
         fail_if_error(result);
       }
-#line 3903 "grammar.c" /* yacc.c:1663  */
+#line 3921 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 132:
-#line 2166 "grammar.y" /* yacc.c:1663  */
+#line 2184 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_operation(
             yyscanner, "-", (yyvsp[-2].expression), (yyvsp[0].expression));
 
         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&
             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)
         {
           int64_t i1 = (yyvsp[-2].expression).value.integer;
           int64_t i2 = (yyvsp[0].expression).value.integer;
 
           if (!IS_UNDEFINED(i1) && !IS_UNDEFINED(i2) &&
               (
                 (i2 < 0 && i1 > INT64_MAX + i2) ||
                 (i2 > 0 && i1 < INT64_MIN + i2)
               ))
           {
             yr_compiler_set_error_extra_info_fmt(
                 compiler, "%" PRId64 " - %" PRId64, i1, i2);
 
             result = ERROR_INTEGER_OVERFLOW;
           }
           else
           {
             (yyval.expression).value.integer = OPERATION(-, i1, i2);
             (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
           }
         }
         else
         {
           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;
         }
 
         fail_if_error(result);
       }
-#line 3942 "grammar.c" /* yacc.c:1663  */
+#line 3960 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 133:
-#line 2201 "grammar.y" /* yacc.c:1663  */
+#line 2219 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_operation(
             yyscanner, "*", (yyvsp[-2].expression), (yyvsp[0].expression));
 
         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&
             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)
         {
           int64_t i1 = (yyvsp[-2].expression).value.integer;
           int64_t i2 = (yyvsp[0].expression).value.integer;
 
           if (!IS_UNDEFINED(i1) && !IS_UNDEFINED(i2) &&
               (
                 i2 != 0 && llabs(i1) > INT64_MAX / llabs(i2)
               ))
           {
             yr_compiler_set_error_extra_info_fmt(
                 compiler, "%" PRId64 " * %" PRId64, i1, i2);
 
             result = ERROR_INTEGER_OVERFLOW;
           }
           else
           {
             (yyval.expression).value.integer = OPERATION(*, i1, i2);
             (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
           }
         }
         else
         {
           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;
         }
 
         fail_if_error(result);
       }
-#line 3980 "grammar.c" /* yacc.c:1663  */
+#line 3998 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 134:
-#line 2235 "grammar.y" /* yacc.c:1663  */
+#line 2253 "grammar.y" /* yacc.c:1663  */
     {
         int result = yr_parser_reduce_operation(
             yyscanner, "\\", (yyvsp[-2].expression), (yyvsp[0].expression));
 
         if ((yyvsp[-2].expression).type == EXPRESSION_TYPE_INTEGER &&
             (yyvsp[0].expression).type == EXPRESSION_TYPE_INTEGER)
         {
           if ((yyvsp[0].expression).value.integer != 0)
           {
             (yyval.expression).value.integer = OPERATION(/, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);
             (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
           }
           else
           {
             result = ERROR_DIVISION_BY_ZERO;
           }
         }
         else
         {
           (yyval.expression).type = EXPRESSION_TYPE_FLOAT;
         }
 
         fail_if_error(result);
       }
-#line 4009 "grammar.c" /* yacc.c:1663  */
+#line 4027 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 135:
-#line 2260 "grammar.y" /* yacc.c:1663  */
+#line 2278 "grammar.y" /* yacc.c:1663  */
     {
         check_type((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, "%");
         check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, "%");
 
         fail_if_error(yr_parser_emit(yyscanner, OP_MOD, NULL));
 
         if ((yyvsp[0].expression).value.integer != 0)
         {
           (yyval.expression).value.integer = OPERATION(%, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);
           (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
         }
         else
         {
           fail_if_error(ERROR_DIVISION_BY_ZERO);
         }
       }
-#line 4030 "grammar.c" /* yacc.c:1663  */
+#line 4048 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 136:
-#line 2277 "grammar.y" /* yacc.c:1663  */
+#line 2295 "grammar.y" /* yacc.c:1663  */
     {
         check_type((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, "^");
         check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, "^");
 
         fail_if_error(yr_parser_emit(yyscanner, OP_BITWISE_XOR, NULL));
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
         (yyval.expression).value.integer = OPERATION(^, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);
       }
-#line 4044 "grammar.c" /* yacc.c:1663  */
+#line 4062 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 137:
-#line 2287 "grammar.y" /* yacc.c:1663  */
+#line 2305 "grammar.y" /* yacc.c:1663  */
     {
         check_type((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, "^");
         check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, "^");
 
         fail_if_error(yr_parser_emit(yyscanner, OP_BITWISE_AND, NULL));
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
         (yyval.expression).value.integer = OPERATION(&, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);
       }
-#line 4058 "grammar.c" /* yacc.c:1663  */
+#line 4076 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 138:
-#line 2297 "grammar.y" /* yacc.c:1663  */
+#line 2315 "grammar.y" /* yacc.c:1663  */
     {
         check_type((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, "|");
         check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, "|");
 
         fail_if_error(yr_parser_emit(yyscanner, OP_BITWISE_OR, NULL));
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
         (yyval.expression).value.integer = OPERATION(|, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);
       }
-#line 4072 "grammar.c" /* yacc.c:1663  */
+#line 4090 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 139:
-#line 2307 "grammar.y" /* yacc.c:1663  */
+#line 2325 "grammar.y" /* yacc.c:1663  */
     {
         check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, "~");
 
         fail_if_error(yr_parser_emit(yyscanner, OP_BITWISE_NOT, NULL));
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
         (yyval.expression).value.integer = ((yyvsp[0].expression).value.integer == UNDEFINED) ?
             UNDEFINED : ~((yyvsp[0].expression).value.integer);
       }
-#line 4086 "grammar.c" /* yacc.c:1663  */
+#line 4104 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 140:
-#line 2317 "grammar.y" /* yacc.c:1663  */
+#line 2335 "grammar.y" /* yacc.c:1663  */
     {
         int result;
 
         check_type((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, "<<");
         check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, "<<");
 
         result = yr_parser_emit(yyscanner, OP_SHL, NULL);
 
         if (!IS_UNDEFINED((yyvsp[0].expression).value.integer) && (yyvsp[0].expression).value.integer < 0)
           result = ERROR_INVALID_OPERAND;
         else if (!IS_UNDEFINED((yyvsp[0].expression).value.integer) && (yyvsp[0].expression).value.integer >= 64)
           (yyval.expression).value.integer = 0;
         else
           (yyval.expression).value.integer = OPERATION(<<, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
 
         fail_if_error(result);
       }
-#line 4110 "grammar.c" /* yacc.c:1663  */
+#line 4128 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 141:
-#line 2337 "grammar.y" /* yacc.c:1663  */
+#line 2355 "grammar.y" /* yacc.c:1663  */
     {
         int result;
 
         check_type((yyvsp[-2].expression), EXPRESSION_TYPE_INTEGER, ">>");
         check_type((yyvsp[0].expression), EXPRESSION_TYPE_INTEGER, ">>");
 
         result = yr_parser_emit(yyscanner, OP_SHR, NULL);
 
         if (!IS_UNDEFINED((yyvsp[0].expression).value.integer) && (yyvsp[0].expression).value.integer < 0)
           result = ERROR_INVALID_OPERAND;
         else if (!IS_UNDEFINED((yyvsp[0].expression).value.integer) && (yyvsp[0].expression).value.integer >= 64)
           (yyval.expression).value.integer = 0;
         else
           (yyval.expression).value.integer = OPERATION(<<, (yyvsp[-2].expression).value.integer, (yyvsp[0].expression).value.integer);
 
         (yyval.expression).type = EXPRESSION_TYPE_INTEGER;
 
         fail_if_error(result);
       }
-#line 4134 "grammar.c" /* yacc.c:1663  */
+#line 4152 "grammar.c" /* yacc.c:1663  */
     break;
 
   case 142:
-#line 2357 "grammar.y" /* yacc.c:1663  */
+#line 2375 "grammar.y" /* yacc.c:1663  */
     {
         (yyval.expression) = (yyvsp[0].expression);
       }
-#line 4142 "grammar.c" /* yacc.c:1663  */
+#line 4160 "grammar.c" /* yacc.c:1663  */
     break;
 
 
-#line 4146 "grammar.c" /* yacc.c:1663  */
+#line 4164 "grammar.c" /* yacc.c:1663  */
       default: break;
     }
   /* User semantic actions sometimes alter yychar, and that requires
      that yytoken be updated with the new translation.  We take the
      approach of translating immediately before every use of yytoken.
      One alternative is translating here after every semantic action,
      but that translation would be missed if the semantic action invokes
      YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
      if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
      incorrect destructor might then be invoked immediately.  In the
      case of YYERROR or YYBACKUP, subsequent parser actions might lead
      to an incorrect destructor call or verbose syntax error message
      before the lookahead is translated.  */
   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
 
   YYPOPSTACK (yylen);
   yylen = 0;
   YY_STACK_PRINT (yyss, yyssp);
 
   *++yyvsp = yyval;
 
   /* Now 'shift' the result of the reduction.  Determine what state
      that goes to, based on the state we popped back to and the rule
      number reduced by.  */
 
   yyn = yyr1[yyn];
 
   yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
   if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
     yystate = yytable[yystate];
   else
     yystate = yydefgoto[yyn - YYNTOKENS];
 
   goto yynewstate;
 
 
 /*--------------------------------------.
 | yyerrlab -- here on detecting error.  |
 `--------------------------------------*/
@@ -4344,31 +4362,31 @@ yyexhaustedlab:
 yyreturn:
   if (yychar != YYEMPTY)
     {
       /* Make sure we have latest lookahead translation.  See comments at
          user semantic actions for why this is necessary.  */
       yytoken = YYTRANSLATE (yychar);
       yydestruct ("Cleanup: discarding lookahead",
                   yytoken, &yylval, yyscanner, compiler);
     }
   /* Do not reclaim the symbols of the rule whose action triggered
      this YYABORT or YYACCEPT.  */
   YYPOPSTACK (yylen);
   YY_STACK_PRINT (yyss, yyssp);
   while (yyssp != yyss)
     {
       yydestruct ("Cleanup: popping",
                   yystos[*yyssp], yyvsp, yyscanner, compiler);
       YYPOPSTACK (1);
     }
 #ifndef yyoverflow
   if (yyss != yyssa)
     YYSTACK_FREE (yyss);
 #endif
 #if YYERROR_VERBOSE
   if (yymsg != yymsgbuf)
     YYSTACK_FREE (yymsg);
 #endif
   return yyresult;
 }
-#line 2362 "grammar.y" /* yacc.c:1907  */
+#line 2380 "grammar.y" /* yacc.c:1907  */
 
diff --git a/libyara/grammar.h b/libyara/grammar.h
index a7630661..e62cfbcc 100644
--- a/libyara/grammar.h
+++ b/libyara/grammar.h
@@ -158,17 +158,17 @@ extern int yara_yydebug;
 
 union YYSTYPE
 {
-#line 270 "grammar.y" /* yacc.c:1916  */
+#line 274 "grammar.y" /* yacc.c:1916  */
 
   YR_EXPRESSION   expression;
   SIZED_STRING*   sized_string;
   char*           c_string;
   int64_t         integer;
   double          double_;
   YR_STRING*      string;
   YR_META*        meta;
   YR_RULE*        rule;
   YR_MODIFIER     modifier;
 
 #line 174 "grammar.h" /* yacc.c:1916  */
 };
diff --git a/libyara/grammar.y b/libyara/grammar.y
index 36b9598f..624fb758 100644
--- a/libyara/grammar.y
+++ b/libyara/grammar.y
@@ -26,258 +26,262 @@ ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 %{
 
 
 #include <assert.h>
 #include <stdio.h>
 #include <string.h>
 #include <limits.h>
 #include <stdlib.h>
 #include <stddef.h>
 
 #include <yara/integers.h>
 #include <yara/utils.h>
 #include <yara/strutils.h>
 #include <yara/compiler.h>
 #include <yara/object.h>
 #include <yara/sizedstr.h>
 #include <yara/exec.h>
 #include <yara/error.h>
 #include <yara/mem.h>
 #include <yara/lexer.h>
 #include <yara/parser.h>
 
 #if defined(_MSC_VER)
 #define llabs _abs64
 #endif
 
 #define YYERROR_VERBOSE
 
 #define YYMALLOC yr_malloc
 #define YYFREE yr_free
 
 #define INTEGER_SET_ENUMERATION   1
 #define INTEGER_SET_RANGE         2
 
 #define FOR_EXPRESSION_ALL 1
 #define FOR_EXPRESSION_ANY 2
 
 #define fail_if_error(e) \
     if (e != ERROR_SUCCESS) \
     { \
       compiler->last_error = e; \
       yyerror(yyscanner, compiler, NULL); \
       YYERROR; \
     } \
 
 
 #define set_flag_or_error(flags, new_flag) \
     if (flags & new_flag) \
     { \
       compiler->last_error = ERROR_DUPLICATED_MODIFIER; \
       yyerror(yyscanner, compiler, NULL); \
       YYERROR; \
     } \
     else \
     { \
       flags |= new_flag; \
     }
 
 
 #define check_type_with_cleanup(expression, expected_type, op, cleanup) \
     if (((expression.type) & (expected_type)) == 0) \
     { \
       switch(expression.type) \
       { \
         case EXPRESSION_TYPE_INTEGER: \
           yr_compiler_set_error_extra_info( \
               compiler, "wrong type \"integer\" for " op " operator"); \
           break; \
         case EXPRESSION_TYPE_FLOAT: \
           yr_compiler_set_error_extra_info( \
               compiler, "wrong type \"float\" for " op " operator"); \
           break; \
         case EXPRESSION_TYPE_STRING: \
           yr_compiler_set_error_extra_info( \
               compiler, "wrong type \"string\" for " op " operator"); \
           break; \
         case EXPRESSION_TYPE_BOOLEAN: \
           yr_compiler_set_error_extra_info( \
               compiler, "wrong type \"boolean\" for " op " operator"); \
           break; \
       } \
       cleanup; \
       compiler->last_error = ERROR_WRONG_TYPE; \
       yyerror(yyscanner, compiler, NULL); \
       YYERROR; \
     }
 
 // check_type(expression, EXPRESSION_TYPE_INTEGER | EXPRESSION_TYPE_FLOAT) is
 // used to ensure that the type of "expression" is either integer or float.
 #define check_type(expression, expected_type, op) \
     check_type_with_cleanup(expression, expected_type, op, )
 
 
 
-#define free_loop_identifiers() \
+#define loop_vars_cleanup(loop_depth) \
     {  \
-      YR_LOOP_CONTEXT* loop_ctx = &compiler->loop[compiler->loop_depth]; \
+      YR_LOOP_CONTEXT* loop_ctx = &compiler->loop[loop_depth]; \
       for (int i = 0; i < loop_ctx->vars_count; i++) \
+      { \
         yr_free((void*) loop_ctx->vars[i].identifier); \
+        loop_ctx->vars[i].identifier = NULL; \
+      } \
+      loop_ctx->vars_count = 0; \
     } \
 
 %}
 
 
 %expect 1   // expect 1 shift/reduce conflicts
 
 // Uncomment this line to print parsing information that can be useful to
 // debug YARA's grammar.
 
 // %debug
 
 %name-prefix "yara_yy"
 %pure-parser
 %parse-param {void *yyscanner}
 %parse-param {YR_COMPILER* compiler}
 %lex-param {yyscan_t yyscanner}
 %lex-param {YR_COMPILER* compiler}
 
 // Token that marks the end of the original file.
 %token _END_OF_FILE_  0                                "end of file"
 
 // Token that marks the end of included files, we can't use  _END_OF_FILE_
 // because bison stops parsing when it sees _END_OF_FILE_, we want to be
 // be able to identify the point where an included file ends, but continuing
 // parsing any content that follows.
 %token _END_OF_INCLUDED_FILE_                          "end of included file"
 
 %token _DOT_DOT_                                       ".."
 %token _RULE_                                          "<rule>"
 %token _PRIVATE_                                       "<private>"
 %token _GLOBAL_                                        "<global>"
 %token _META_                                          "<meta>"
 %token <string> _STRINGS_                              "<strings>"
 %token _CONDITION_                                     "<condition>"
 %token <c_string> _IDENTIFIER_                         "identifier"
 %token <c_string> _STRING_IDENTIFIER_                  "string identifier"
 %token <c_string> _STRING_COUNT_                       "string count"
 %token <c_string> _STRING_OFFSET_                      "string offset"
 %token <c_string> _STRING_LENGTH_                      "string length"
 %token <c_string> _STRING_IDENTIFIER_WITH_WILDCARD_
     "string identifier with wildcard"
 %token <integer> _NUMBER_                              "integer number"
 %token <double_> _DOUBLE_                              "floating point number"
 %token <integer> _INTEGER_FUNCTION_                    "integer function"
 %token <sized_string> _TEXT_STRING_                    "text string"
 %token <sized_string> _HEX_STRING_                     "hex string"
 %token <sized_string> _REGEXP_                         "regular expression"
 %token _ASCII_                                         "<ascii>"
 %token _WIDE_                                          "<wide>"
 %token _XOR_                                           "<xor>"
 %token _NOCASE_                                        "<nocase>"
 %token _FULLWORD_                                      "<fullword>"
 %token _AT_                                            "<at>"
 %token _FILESIZE_                                      "<filesize>"
 %token _ENTRYPOINT_                                    "<entrypoint>"
 %token _ALL_                                           "<all>"
 %token _ANY_                                           "<any>"
 %token _IN_                                            "<in>"
 %token _OF_                                            "<of>"
 %token _FOR_                                           "<for>"
 %token _THEM_                                          "<them>"
 %token _MATCHES_                                       "<matches>"
 %token _CONTAINS_                                      "<contains>"
 %token _IMPORT_                                        "<import>"
 %token _TRUE_                                          "<true>"
 %token _FALSE_                                         "<false"
 %token _OR_                                            "<or>"
 %token _AND_                                           "<and>"
 %token _NOT_                                           "<not>"
 %token _EQ_                                            "=="
 %token _NEQ_                                           "!="
 %token _LT_                                            "<"
 %token _LE_                                            "<="
 %token _GT_                                            ">"
 %token _GE_                                            ">="
 %token _SHIFT_LEFT_                                    "<<"
 %token _SHIFT_RIGHT_                                   ">>"
 
 %left _OR_
 %left _AND_
 %left '|'
 %left '^'
 %left '&'
 %left _EQ_ _NEQ_
 %left _LT_ _LE_ _GT_ _GE_
 %left _SHIFT_LEFT_ _SHIFT_RIGHT_
 %left '+' '-'
 %left '*' '\\' '%'
 %right _NOT_ '~' UNARY_MINUS
 
 %type <rule>   rule
 
 %type <string> strings
 %type <string> string_declaration
 %type <string> string_declarations
 
 %type <meta> meta
 %type <meta> meta_declaration
 %type <meta> meta_declarations
 
 %type <c_string> tags
 %type <c_string> tag_list
 
 %type <modifier> string_modifier
 %type <modifier> string_modifiers
 
 %type <modifier> regexp_modifier
 %type <modifier> regexp_modifiers
 
 %type <modifier> hex_modifier
 %type <modifier> hex_modifiers
 
 %type <integer> integer_set
 %type <integer> integer_enumeration
 %type <integer> for_expression
 %type <integer> rule_modifier
 %type <integer> rule_modifiers
 
 %type <expression> primary_expression
 %type <expression> boolean_expression
 %type <expression> expression
 %type <expression> identifier
 %type <expression> regexp
 
 %type <c_string> arguments
 %type <c_string> arguments_list
 
 %destructor { yr_free($$); $$ = NULL; } _IDENTIFIER_
 %destructor { yr_free($$); $$ = NULL; } _STRING_COUNT_
 %destructor { yr_free($$); $$ = NULL; } _STRING_OFFSET_
 %destructor { yr_free($$); $$ = NULL; } _STRING_LENGTH_
 %destructor { yr_free($$); $$ = NULL; } _STRING_IDENTIFIER_
 %destructor { yr_free($$); $$ = NULL; } _STRING_IDENTIFIER_WITH_WILDCARD_
 %destructor { yr_free($$); $$ = NULL; } _TEXT_STRING_
 %destructor { yr_free($$); $$ = NULL; } _HEX_STRING_
 %destructor { yr_free($$); $$ = NULL; } _REGEXP_
 
 %destructor { yr_free($$); $$ = NULL; } arguments
 %destructor { yr_free($$); $$ = NULL; } arguments_list
 
 %union {
   YR_EXPRESSION   expression;
   SIZED_STRING*   sized_string;
   char*           c_string;
   int64_t         integer;
   double          double_;
   YR_STRING*      string;
   YR_META*        meta;
   YR_RULE*        rule;
   YR_MODIFIER     modifier;
 }
 
 
 %%
@@ -1125,513 +1129,521 @@ boolean_expression
 expression
     : _TRUE_
       {
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH, 1, NULL, NULL));
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | _FALSE_
       {
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH, 0, NULL, NULL));
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | primary_expression _MATCHES_ regexp
       {
         check_type($1, EXPRESSION_TYPE_STRING, "matches");
         check_type($3, EXPRESSION_TYPE_REGEXP, "matches");
 
         fail_if_error(yr_parser_emit(
             yyscanner,
             OP_MATCHES,
             NULL));
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | primary_expression _CONTAINS_ primary_expression
       {
         check_type($1, EXPRESSION_TYPE_STRING, "contains");
         check_type($3, EXPRESSION_TYPE_STRING, "contains");
 
         fail_if_error(yr_parser_emit(
             yyscanner, OP_CONTAINS, NULL));
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | _STRING_IDENTIFIER_
       {
         int result = yr_parser_reduce_string_identifier(
             yyscanner,
             $1,
             OP_FOUND,
             UNDEFINED);
 
         yr_free($1);
 
         fail_if_error(result);
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | _STRING_IDENTIFIER_ _AT_ primary_expression
       {
         int result;
 
         check_type_with_cleanup($3, EXPRESSION_TYPE_INTEGER, "at", yr_free($1));
 
         result = yr_parser_reduce_string_identifier(
             yyscanner, $1, OP_FOUND_AT, $3.value.integer);
 
         yr_free($1);
 
         fail_if_error(result);
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | _STRING_IDENTIFIER_ _IN_ range
       {
         int result = yr_parser_reduce_string_identifier(
             yyscanner, $1, OP_FOUND_IN, UNDEFINED);
 
         yr_free($1);
 
         fail_if_error(result);
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | _FOR_ for_expression error
       {
-        if (compiler->loop_depth > 0)
+        // Free all the loop variable identifiers and set loop_depth to 0. This
+        // is ok even if we have nested loops. If an error occurs while parsing
+        // the inner loop, it will be propagated to the outer loop anyways, so
+        // it's safe to do this cleanup while processing the error for the
+        // inner loop.
+
+        for (int i = 0; i <= compiler->loop_depth; i++)
         {
-          free_loop_identifiers();
-          compiler->loop_depth--;
+          loop_vars_cleanup(i);
         }
 
+        compiler->loop_depth = 0;
         YYERROR;
       }
     | _FOR_ for_expression
       //
       //  for <min_expression> <identifier> in <iterator> : (<expression>)
       //
       //  CLEAR_M 0       ; clear number of true results returned by <expression>
       //  CLEAR_M 1       ; clear loop iteration counter
       //  POP_M 2         ; takes the result of <min_expression> from the stack
       //                  ; and puts it in M[2], once M[0] reaches M[2] the whole
       //                  ; for expression is satisfied
       //  <iterator>      ; the instructions generated by the <iterator> depend
       //                  ; on the type of iterator, but they will initialize the
       //                  ; iterator and get it ready for the ITER_NEXT instruction
       // repeat:
       //  ITER_NEXT       ; reads the iterator object from the stack but leaves it there,
       //                  ; puts next item in the sequence in the stack, and also a TRUE
       //                  ; or a FALSE value indicating whether or not there are more items
       //
       //  POP_M 3         ; pops the next item from the stack and puts it in M[3], it
       //
       //  JTRUE_P exit    ; pops the boolean that tells if we already reached
       //                  ; the end of the iterator
       //  <expression>    ; here goes the code for <expression> the value of the
       //                  ; expressions ends up being at the top of the stack
       //
       //  ADD_M 0         ; if <expression> was true M[0] is incremented by one,
       //                  ; this consumes the <expression>'s result from the stack
       //  INCR_M 1        ; increments iteration counter
       //
       //  PUSH_M 2
       //  JUNDEF_P repeat ; if M[2] is undefined it's because <min_expression> is "all",
       //                  ; in that case we need to repeat until there are no more items
       //
       //  PUSH_M 0        ; pushes number of true results for <expression>
       //  PUSH_M 2        ; pushes value of <min_expression>
       //
       //  JL_P repeat     ; if M[1] is less M[3] repeat
       //
       // exit:
       //  POP             ; remove the itertor object from the stack
       //
       //  PUSH_M 0        ; pushes number of true results for <expression>
       //  PUSH_M 2        ; pushes value of <min_expression>
       //
       //  SWAPUNDEF 1     ; if the value at the top of the stack (M[2]) is UNDEF
       //                  ; swap the UNDEF with loop iteration counter at M[1]
       //
       //  INT_GE          ; compares the the number of true results returned by
       //                  ; <expression> with the value of <min_expression> or
       //                  ; with the number of iterations, if <min_expression>
       //                  ; was "all". A 1 is pushed into the stack if the former
       //                  ; is greater than or equal to the latter
       //
       {
         // var_frame is used for accessing local variables used in this loop.
         // All local variables are accessed using var_frame as a reference,
         // like var_frame + 0, var_frame + 1, etc. Here we initialize var_frame
         // with the correct value, which depends on the number of variables
         // defined by any outer loops.
 
         int var_frame = _yr_compiler_get_var_frame(compiler);
         int result = ERROR_SUCCESS;
 
         if (compiler->loop_depth == YR_MAX_LOOP_NESTING)
           result = ERROR_LOOP_NESTING_LIMIT_EXCEEDED;
 
+        // This loop uses 3 internal variables besides the ones explicitly
+        // defined by the user.
+        compiler->loop[compiler->loop_depth].vars_internal_count = 3;
+
+        // Initialize the number of variables, this number will be incremented
+        // as variable declaration are processed by for_variables.
+        compiler->loop[compiler->loop_depth].vars_count = 0;
+
         fail_if_error(result);
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_CLEAR_M, var_frame + 0, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_CLEAR_M, var_frame + 1, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_POP_M, var_frame + 2, NULL, NULL));
-
-        // This loop uses 3 internal variables besides the ones explicitly
-        // defined by the user.
-        compiler->loop[compiler->loop_depth].vars_internal_count = 3;
-
-        // Initialize the number of variables, this number will be incremented
-        // as variable declaration are processed by for_variables.
-        compiler->loop[compiler->loop_depth].vars_count = 0;
       }
       for_variables _IN_ iterator ':'
       {
         YR_LOOP_CONTEXT* loop_ctx = &compiler->loop[compiler->loop_depth];
         YR_FIXUP* fixup;
 
         uint8_t* loop_start_addr;
         void* jmp_arg_addr;
 
         int var_frame = _yr_compiler_get_var_frame(compiler);
 
         fail_if_error(yr_parser_emit(
             yyscanner, OP_ITER_NEXT, &loop_start_addr));
 
         // For each variable generate an instruction that pops the value from
         // the stack and store it into one memory slot starting at var_frame + 3
         // because the first 3 slots in the frame are for the internal variables.
 
         for (int i = 0; i < loop_ctx->vars_count; i++)
         {
           fail_if_error(yr_parser_emit_with_arg(
               yyscanner, OP_POP_M, var_frame + 3 + i, NULL, NULL));
         }
 
         fail_if_error(yr_parser_emit_with_arg_reloc(
             yyscanner,
             OP_JTRUE_P,
             0,
             NULL,
             &jmp_arg_addr));
 
         // Push a new fixup entry in the fixup stack so that the jump
         // destination is set once we know it.
 
         fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));
 
         if (fixup == NULL)
           fail_if_error(ERROR_INSUFFICIENT_MEMORY);
 
         fixup->address = jmp_arg_addr;
         fixup->next = compiler->fixup_stack_head;
         compiler->fixup_stack_head = fixup;
 
         loop_ctx->addr = loop_start_addr;
         compiler->loop_depth++;
       }
       '(' boolean_expression ')'
       {
         YR_FIXUP* fixup;
         uint8_t* pop_addr;
         int var_frame;
 
-        free_loop_identifiers();
         compiler->loop_depth--;
 
+        loop_vars_cleanup(compiler->loop_depth);
+
         var_frame = _yr_compiler_get_var_frame(compiler);
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_ADD_M, var_frame + 0, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_INCR_M, var_frame + 1, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH_M, var_frame + 2, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg_reloc(
             yyscanner,
             OP_JUNDEF_P,
             compiler->loop[compiler->loop_depth].addr,
             NULL,
             NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH_M, var_frame + 0, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH_M, var_frame + 2, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg_reloc(
             yyscanner,
             OP_JL_P,
             compiler->loop[compiler->loop_depth].addr,
             NULL,
             NULL));
 
         fail_if_error(yr_parser_emit(
             yyscanner, OP_POP, &pop_addr));
 
         // Pop from the stack the fixup entry containing the jump's address
         // that needs to be fixed.
 
         fixup = compiler->fixup_stack_head;
         compiler->fixup_stack_head = fixup->next;
 
         // Fix the jump's target address.
         *(void**)(fixup->address) = (void*)(pop_addr);
 
         yr_free(fixup);
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH_M, var_frame + 0, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_PUSH_M, var_frame + 2, NULL, NULL));
 
         fail_if_error(yr_parser_emit_with_arg(
             yyscanner, OP_SWAPUNDEF, var_frame + 1, NULL, NULL));
 
         fail_if_error(yr_parser_emit(
             yyscanner, OP_INT_GE, NULL));
       }
     | _FOR_ for_expression _OF_ string_set ':'
       {
         int result = ERROR_SUCCESS;
         int var_frame = _yr_compiler_get_var_frame(compiler);;
         uint8_t* addr;
 
         if (compiler->loop_depth == YR_MAX_LOOP_NESTING)
           result = ERROR_LOOP_NESTING_LIMIT_EXCEEDED;
 
         if (compiler->loop_for_of_var_index != -1)
           result = ERROR_NESTED_FOR_OF_LOOP;
 
         fail_if_error(result);
 
         yr_parser_emit_with_arg(
             yyscanner, OP_CLEAR_M, var_frame + 1, NULL, NULL);
 
         yr_parser_emit_with_arg(
             yyscanner, OP_CLEAR_M, var_frame + 2, NULL, NULL);
 
         // Pop the first string.
         yr_parser_emit_with_arg(
             yyscanner, OP_POP_M, var_frame, &addr, NULL);
 
         compiler->loop_for_of_var_index = var_frame;
         compiler->loop[compiler->loop_depth].vars_internal_count = 3;
         compiler->loop[compiler->loop_depth].vars_count = 0;
         compiler->loop[compiler->loop_depth].addr = addr;
         compiler->loop_depth++;
       }
       '(' boolean_expression ')'
       {
         int var_frame = 0;
 
-        free_loop_identifiers();
         compiler->loop_depth--;
         compiler->loop_for_of_var_index = -1;
 
+        loop_vars_cleanup(compiler->loop_depth);
+
         var_frame = _yr_compiler_get_var_frame(compiler);
 
         // Increment counter by the value returned by the
         // boolean expression (0 or 1). If the boolean expression
         // returned UNDEFINED the OP_ADD_M won't do anything.
 
         yr_parser_emit_with_arg(
             yyscanner, OP_ADD_M, var_frame + 1, NULL, NULL);
 
         // Increment iterations counter.
         yr_parser_emit_with_arg(
             yyscanner, OP_INCR_M, var_frame + 2, NULL, NULL);
 
         // If next string is not undefined, go back to the
         // beginning of the loop.
         yr_parser_emit_with_arg_reloc(
             yyscanner,
             OP_JNUNDEF,
             compiler->loop[compiler->loop_depth].addr,
             NULL,
             NULL);
 
         // Pop end-of-list marker.
         yr_parser_emit(yyscanner, OP_POP, NULL);
 
         // At this point the loop quantifier (any, all, 1, 2,..)
         // is at top of the stack. Check if the quantifier is
         // undefined (meaning "all") and replace it with the
         // iterations counter in that case.
         yr_parser_emit_with_arg(
             yyscanner, OP_SWAPUNDEF, var_frame + 2, NULL, NULL);
 
         // Compare the loop quantifier with the number of
         // expressions evaluating to true.
         yr_parser_emit_with_arg(
             yyscanner, OP_PUSH_M, var_frame + 1, NULL, NULL);
 
         yr_parser_emit(yyscanner, OP_INT_LE, NULL);
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | for_expression _OF_ string_set
       {
         yr_parser_emit(yyscanner, OP_OF, NULL);
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | _NOT_ boolean_expression
       {
         yr_parser_emit(yyscanner, OP_NOT, NULL);
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | boolean_expression _AND_
       {
         YR_FIXUP* fixup;
         void* jmp_destination_addr;
 
         fail_if_error(yr_parser_emit_with_arg_reloc(
             yyscanner,
             OP_JFALSE,
             0,          // still don't know the jump destination
             NULL,
             &jmp_destination_addr));
 
         // create a fixup entry for the jump and push it in the stack
         fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));
 
         if (fixup == NULL)
           fail_if_error(ERROR_INSUFFICIENT_MEMORY);
 
         fixup->address = jmp_destination_addr;
         fixup->next = compiler->fixup_stack_head;
         compiler->fixup_stack_head = fixup;
       }
       boolean_expression
       {
         YR_FIXUP* fixup;
         uint8_t* nop_addr;
 
         fail_if_error(yr_parser_emit(yyscanner, OP_AND, NULL));
 
         // Generate a do-nothing instruction (NOP) in order to get its address
         // and use it as the destination for the OP_JFALSE. We can not simply
         // use the address of the OP_AND instruction +1 because we can't be
         // sure that the instruction following the OP_AND is going to be in
         // the same arena page. As we don't have a reliable way of getting the
         // address of the next instruction we generate the OP_NOP.
 
         fail_if_error(yr_parser_emit(yyscanner, OP_NOP, &nop_addr));
 
         fixup = compiler->fixup_stack_head;
         *(void**)(fixup->address) = (void*) nop_addr;
         compiler->fixup_stack_head = fixup->next;
         yr_free(fixup);
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | boolean_expression _OR_
       {
         YR_FIXUP* fixup;
         void* jmp_destination_addr;
 
         fail_if_error(yr_parser_emit_with_arg_reloc(
             yyscanner,
             OP_JTRUE,
             0,         // still don't know the jump destination
             NULL,
             &jmp_destination_addr));
 
         fixup = (YR_FIXUP*) yr_malloc(sizeof(YR_FIXUP));
 
         if (fixup == NULL)
           fail_if_error(ERROR_INSUFFICIENT_MEMORY);
 
         fixup->address = jmp_destination_addr;
         fixup->next = compiler->fixup_stack_head;
         compiler->fixup_stack_head = fixup;
       }
       boolean_expression
       {
         YR_FIXUP* fixup;
         uint8_t* nop_addr;
 
         fail_if_error(yr_parser_emit(yyscanner, OP_OR, NULL));
 
         // Generate a do-nothing instruction (NOP) in order to get its address
         // and use it as the destination for the OP_JFALSE. We can not simply
         // use the address of the OP_OR instruction +1 because we can't be
         // sure that the instruction following the OP_AND is going to be in
         // the same arena page. As we don't have a reliable way of getting the
         // address of the next instruction we generate the OP_NOP.
 
         fail_if_error(yr_parser_emit(yyscanner, OP_NOP, &nop_addr));
 
         fixup = compiler->fixup_stack_head;
         *(void**)(fixup->address) = (void*)(nop_addr);
         compiler->fixup_stack_head = fixup->next;
         yr_free(fixup);
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | primary_expression _LT_ primary_expression
       {
         fail_if_error(yr_parser_reduce_operation(
             yyscanner, "<", $1, $3));
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | primary_expression _GT_ primary_expression
       {
         fail_if_error(yr_parser_reduce_operation(
             yyscanner, ">", $1, $3));
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | primary_expression _LE_ primary_expression
       {
         fail_if_error(yr_parser_reduce_operation(
             yyscanner, "<=", $1, $3));
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | primary_expression _GE_ primary_expression
       {
         fail_if_error(yr_parser_reduce_operation(
             yyscanner, ">=", $1, $3));
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | primary_expression _EQ_ primary_expression
       {
         fail_if_error(yr_parser_reduce_operation(
             yyscanner, "==", $1, $3));
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | primary_expression _NEQ_ primary_expression
       {
         fail_if_error(yr_parser_reduce_operation(
             yyscanner, "!=", $1, $3));
 
         $$.type = EXPRESSION_TYPE_BOOLEAN;
       }
     | primary_expression
       {
         $$ = $1;
       }
     |'(' expression ')'
       {
         $$ = $2;
       }
     ;
@@ -1640,41 +1652,47 @@ expression
 for_variables
     : _IDENTIFIER_
       {
         int result = ERROR_SUCCESS;
 
         YR_LOOP_CONTEXT* loop_ctx = &compiler->loop[compiler->loop_depth];
 
         if (yr_parser_lookup_loop_variable(yyscanner, $1, NULL) >= 0)
         {
           yr_compiler_set_error_extra_info(compiler, $1);
+          yr_free($1);
+
           result = ERROR_DUPLICATED_LOOP_IDENTIFIER;
         }
 
         fail_if_error(result);
 
         loop_ctx->vars[loop_ctx->vars_count++].identifier = $1;
 
         assert(loop_ctx->vars_count <= YR_MAX_LOOP_VARS);
       }
     | for_variables ',' _IDENTIFIER_
       {
         int result = ERROR_SUCCESS;
 
         YR_LOOP_CONTEXT* loop_ctx = &compiler->loop[compiler->loop_depth];
 
         if (loop_ctx->vars_count == YR_MAX_LOOP_VARS)
         {
           yr_compiler_set_error_extra_info(compiler, "too many loop variables");
+          yr_free($3);
+
           result = ERROR_SYNTAX_ERROR;
         }
         else if (yr_parser_lookup_loop_variable(yyscanner, $3, NULL) >= 0)
         {
           yr_compiler_set_error_extra_info(compiler, $3);
+          yr_free($3);
+
           result = ERROR_DUPLICATED_LOOP_IDENTIFIER;
         }
 
         fail_if_error(result);
 
         loop_ctx->vars[loop_ctx->vars_count++].identifier = $3;
       }
     ;
diff --git a/tests/test-rules.c b/tests/test-rules.c
index 25474959..13d27325 100644
--- a/tests/test-rules.c
+++ b/tests/test-rules.c
@@ -1122,146 +1122,170 @@ static void test_of()
 void test_for()
 {
   assert_true_rule(
       "rule test { \
         strings: \
           $a = \"ssi\" \
         condition: \
           for all i in (1..#a) : (@a[i] >= 2 and @a[i] <= 5) \
       }",
       "mississippi");
 
   assert_true_rule(
       "rule test { \
         strings: \
           $a = \"ssi\" \
           $b = \"mi\" \
         condition: \
           for all i in (1..#a) : ( for all j in (1..#b) : (@a[i] >= @b[j])) \
       }",
       "mississippi");
 
   assert_false_rule(
       "rule test { \
         strings: \
           $a = \"ssi\" \
         condition: \
           for all i in (1..#a) : (@a[i] == 5) \
       }",
       "mississippi");
 
   assert_true_rule(
       "rule test { \
         condition: \
           for any i in (1, 2, 3) : (i <= 1) \
       }",
       NULL);
 
   assert_true_rule(
       "rule test { \
         condition: \
           for all i in (1, 2, 3) : (i >= 1) \
       }",
       NULL);
 
   assert_false_rule(
       "rule test { \
         condition: \
           for all i in (1, 0) : (i != 1) \
       }",
       NULL);
 
   assert_true_rule(
       "import \"tests\" \
       rule test { \
         condition: \
           for any item in tests.struct_array : ( \
             item.i == 1 \
           ) \
       }",
       NULL);
 
   assert_true_rule(
       "import \"tests\" \
       rule test { \
         condition: \
           for 0 item in tests.struct_array : ( \
             item.i == 100 \
           ) \
       }",
       NULL);
 
   assert_true_rule(
       "import \"tests\" \
       rule test { \
         condition: \
           for any item in tests.integer_array : ( \
             item == 2 \
           ) \
       }",
       NULL);
 
   assert_true_rule(
       "import \"tests\" \
       rule test { \
         condition: \
           for any item in tests.string_array : ( \
             item == \"bar\" \
           ) \
       }",
       NULL);
 
   assert_true_rule(
       "rule test { \
         condition: \
           for all i in (3,5,4) : ( \
             i >= 3 and i <= 5 \
           ) \
       }",
       NULL);
 
   assert_true_rule(
       "rule test { \
         condition: \
           for all i in (3..5) : ( \
             i >= 3 and i <= 5 \
           ) \
       }",
       NULL);
 
   assert_true_rule(
       "rule test { \
         condition: \
           for 2 i in (5..10) : ( \
             i == 6 or i == 7 \
           ) \
       }",
       NULL);
 
   assert_true_rule(
       "import \"tests\" \
       rule test { \
         condition: \
           for any k,v in tests.struct_dict : ( \
             k == \"foo\" and v.s == \"foo\" and v.i == 1 \
           ) \
       }",
       NULL);
 
   assert_error(
       "import \"tests\" \
       rule test { \
         condition: \
           for any k,v in tests.integer_array : ( false ) \
       }",
       ERROR_SYNTAX_ERROR);
 
   assert_error(
       "import \"tests\" \
       rule test { \
         condition: \
           for any a,b,c in tests.struct_dict : ( false ) \
       }",
       ERROR_SYNTAX_ERROR);
+
+  assert_error(
+      "import \"tests\" \
+      rule test { \
+        condition: \
+          for any i in tests.struct_dict : ( false ) \
+      }",
+      ERROR_SYNTAX_ERROR);
+
+  assert_error(
+      "import \"tests\" \
+      rule test { \
+        condition: \
+          for any i in tests.integer_array : ( undefined_ident ) \
+      }",
+      ERROR_UNDEFINED_IDENTIFIER);
+
+  assert_error(
+      "import \"tests\" \
+      rule test { \
+        condition: \
+          for any i in tests.integer_array : ( i == \"foo\" ) \
+      }",
+      ERROR_WRONG_TYPE);
 }
 
 
