commit a26fcd953ccd71b4171672c6bc14acf04454e61f
Author: jeanlf <jeanlf@gpac.io>
Date:   Mon Jan 22 13:28:42 2024 +0100

    fixed bug in 3ce00a25

diff --git a/src/filters/load_bt_xmt.c b/src/filters/load_bt_xmt.c
index f0d299e0f..d47251cec 100644
--- a/src/filters/load_bt_xmt.c
+++ b/src/filters/load_bt_xmt.c
@@ -829,145 +829,147 @@ static const char* my_strstr(const char *str, const char *pat, u32 str_len)
 {
 	u32 len_pat = (u32) strlen(pat);
 	if (len_pat>str_len) return NULL;
 	//basically a memmem clone (we don't use for portability reasons)
 	while (1) {
 		char *next = memchr(str, pat[0], str_len);
 		if (!next) return NULL;
 		u32 left = str_len - (u32) (next-str);
 		if (left<len_pat) return NULL;
 		if (!memcmp(next, pat, len_pat)) return next;
 		//left is always at least 1
 		str_len = left-1;
 		str = next+1;
 	}
 	return NULL;
 }
 #include <gpac/utf.h>
 static const char *ctxload_probe_data(const u8 *probe_data, u32 size, GF_FilterProbeScore *score)
 {
 	const char *mime_type = NULL;
 	char *dst = NULL;
 	GF_Err e;
 	u32 probe_size=size;
 	char *res=NULL;
 
 	/* check gzip magic header */
 	if ((size>2) && (probe_data[0] == 0x1f) && (probe_data[1] == 0x8b)) {
 		*score = GF_FPROBE_EXT_MATCH;
 		return "btz|bt.gz|xmt.gz|xmtz|wrl.gz|x3dv.gz|x3dvz|x3d.gz|x3dz";
 	}
 
 	e = gf_utf_get_string_from_bom(probe_data, size, &dst, &res, &probe_size);
 	if (e) return NULL;
 	probe_data = res;
 
 	//strip all spaces and \r\n
-	while (probe_data[0] && strchr("\n\r\t ", (char) probe_data[0]))
+	while (probe_size && probe_data[0] && strchr("\n\r\t ", (char) probe_data[0])) {
 		probe_data ++;
+		probe_size--;
+	}
 
 	//for XML, strip doctype, <?xml and comments
 	while (1) {
 		char *search=NULL;
 		if (!strncmp(probe_data, "<!DOCTYPE", 9)) {
 			search = ">";
 		}
 		//for XML, strip xml header
 		else if (!strncmp(probe_data, "<?xml", 5)) {
 			search = "?>";
 		}
 		else if (!strncmp(probe_data, "<!--", 4)) {
 			search = "-->";
 		} else {
 			break;
 		}
 		const char *res = my_strstr(probe_data, search, probe_size);
 		if (!res) goto exit;
 		res += strlen(search);
 		probe_size -= (u32) (res - (char*)probe_data);
 		probe_data = res;
 		while (probe_size && probe_data[0] && strchr("\n\r\t ", (char) probe_data[0])) {
 			probe_data ++;
 			probe_size--;
 		}
 	}
 	//probe_data is now the first element of the document, if XML
 	//we should refine by getting the xmlns attribute value rather than searching for its value...
 
 	if (my_strstr(probe_data, "http://www.w3.org/1999/XSL/Transform", probe_size)
 	) {
 	} else if (!strncmp(probe_data, "<XMT-A", strlen("<XMT-A"))
 		|| my_strstr(probe_data, "urn:mpeg:mpeg4:xmta:schema:2002", probe_size)
 	) {
 		mime_type = "application/x-xmt";
 	} else if (my_strstr(probe_data, "<X3D", probe_size)
 		|| my_strstr(probe_data, "http://www.web3d.org/specifications/x3d-3.0.xsd", probe_size)
 	) {
 		mime_type = "model/x3d+xml";
 	} else if (my_strstr(probe_data, "<saf", probe_size)
 		|| my_strstr(probe_data, "urn:mpeg:mpeg4:SAF:2005", probe_size)
 		|| my_strstr(probe_data, "urn:mpeg:mpeg4:LASeR:2005", probe_size)
 	) {
 		mime_type = "application/x-LASeR+xml";
 	} else if (!strncmp(probe_data, "<DIMSStream", strlen("<DIMSStream") ) ) {
 		mime_type = "application/dims";
 	} else if (!strncmp(probe_data, "<svg", 4) || my_strstr(probe_data, "http://www.w3.org/2000/svg", probe_size) ) {
 		mime_type = "image/svg+xml";
 	} else if (!strncmp(probe_data, "<widget", strlen("<widget") ) ) {
 		mime_type = "application/widget";
 	} else if (!strncmp(probe_data, "<NHNTStream", strlen("<NHNTStream") ) ) {
 		mime_type = "application/x-nhml";
 	} else if (!strncmp(probe_data, "<TextStream", strlen("<TextStream") ) ) {
 		mime_type = "text/ttxt";
 	} else if (!strncmp(probe_data, "<text3GTrack", strlen("<text3GTrack") ) ) {
 		mime_type = "quicktime/text";
 	}
 	//BT/VRML with no doc header
 	else {
 		//get first keyword
 		while (1) {
 			//strip all spaces and \r\n
 			while (probe_size && probe_data[0] && strchr("\n\r\t ", (char) probe_data[0])) {
 				probe_data ++;
 				probe_size--;
 			}
 			if (!probe_size) goto exit;
 
 			//VRML / XRDV files
 			if (!strncmp(probe_data, "#VRML V2.0", strlen("#VRML V2.0"))) {
 				mime_type = "model/vrml";
 				goto exit;
 			}
 			if (!strncmp(probe_data, "#X3D V3.0", strlen("#X3D V3.0"))) {
 				mime_type = "model/x3d+vrml";
 				goto exit;
 			}
 
 			//skip comment lines and some specific X3D keyword (we want to fetch a group
 			if ((probe_data[0] != '#')
 				&& strncmp(probe_data, "PROFILE", strlen("PROFILE"))
 				&& strncmp(probe_data, "COMPONENT", strlen("COMPONENT"))
 				&& strncmp(probe_data, "META", strlen("META"))
 				&& strncmp(probe_data, "IMPORT", strlen("IMPORT"))
 				&& strncmp(probe_data, "EXPORT", strlen("EXPORT"))
 			) {
 				break;
 			}
 			//skip line and go one
 			const char *next = my_strstr(probe_data, "\n", probe_size);
 			if (!next) goto exit;
 			probe_size -= (u32) (next - (char*)probe_data);
 			probe_data = next;
 		}
 		
 		if (!strncmp(probe_data, "InitialObjectDescriptor", strlen("InitialObjectDescriptor"))
 			|| !strncmp(probe_data, "EXTERNPROTO", strlen("EXTERNPROTO"))
 			|| !strncmp(probe_data, "PROTO", strlen("PROTO"))
 			|| !strncmp(probe_data, "Group", strlen("Group"))
 			|| !strncmp(probe_data, "OrderedGroup", strlen("OrderedGroup"))
 			|| !strncmp(probe_data, "Layer2D", strlen("Layer2D"))
 			|| !strncmp(probe_data, "Layer3D", strlen("Layer3D"))
 		) {
 			if (my_strstr(probe_data, "children", probe_size))
 				mime_type = "application/x-bt";
 		}
 	}
