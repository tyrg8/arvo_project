commit 1ead12acd5a7decb31ab3623da53eebfd88ddc15
Author: Marti Maria <marti.maria@littlecms.com>
Date:   Tue Jan 3 17:52:02 2023 +0100

    Add more checking on multilocalized unicode tags
    
    Don't allow odd numbers as offsets on utf16 tables.
    Maybe some arcane profiles would use odd addresses and then define an utf16 table with a spare byte in the beginning, but I have checked my +10,000 ICC profiles zoo and none of the legal ones does that. It is likely someone is trying an exploit or a fuzzer is involved. Kill'em all

diff --git a/src/cmsnamed.c b/src/cmsnamed.c
index 87f3936..bc580aa 100644
--- a/src/cmsnamed.c
+++ b/src/cmsnamed.c
@@ -329,49 +329,51 @@ static
 const wchar_t* _cmsMLUgetWide(const cmsMLU* mlu,
                               cmsUInt32Number *len,
                               cmsUInt16Number LanguageCode, cmsUInt16Number CountryCode,
                               cmsUInt16Number* UsedLanguageCode, cmsUInt16Number* UsedCountryCode)
 {
     cmsUInt32Number i;
     int Best = -1;
     _cmsMLUentry* v;
 
     if (mlu == NULL) return NULL;
 
     if (mlu -> AllocatedEntries <= 0) return NULL;
 
     for (i=0; i < mlu ->UsedEntries; i++) {
 
         v = mlu ->Entries + i;
 
         if (v -> Language == LanguageCode) {
 
             if (Best == -1) Best = (int) i;
 
             if (v -> Country == CountryCode) {
 
                 if (UsedLanguageCode != NULL) *UsedLanguageCode = v ->Language;
                 if (UsedCountryCode  != NULL) *UsedCountryCode = v ->Country;
 
                 if (len != NULL) *len = v ->Len;
 
                 return (wchar_t*) ((cmsUInt8Number*) mlu ->MemPool + v -> StrW);        // Found exact match
             }
         }
     }
 
     // No string found. Return First one
     if (Best == -1)
         Best = 0;
 
     v = mlu ->Entries + Best;
 
     if (UsedLanguageCode != NULL) *UsedLanguageCode = v ->Language;
     if (UsedCountryCode  != NULL) *UsedCountryCode = v ->Country;
 
     if (len != NULL) *len   = v ->Len;
 
+    if (v->StrW + v->Len > mlu->PoolSize) return NULL;
+
     return(wchar_t*) ((cmsUInt8Number*) mlu ->MemPool + v ->StrW);
 }
 
 
 // Obtain an ASCII representation of the wide string. Setting buffer to NULL returns the len
diff --git a/src/cmstypes.c b/src/cmstypes.c
index 1144d98..48c0b4b 100644
--- a/src/cmstypes.c
+++ b/src/cmstypes.c
@@ -1486,79 +1486,89 @@ static
 void *Type_MLU_Read(struct _cms_typehandler_struct* self, cmsIOHANDLER* io, cmsUInt32Number* nItems, cmsUInt32Number SizeOfTag)
 {
     cmsMLU* mlu;
     cmsUInt32Number Count, RecLen, NumOfWchar;
     cmsUInt32Number SizeOfHeader;
     cmsUInt32Number  Len, Offset;
     cmsUInt32Number  i;
     wchar_t*         Block;
     cmsUInt32Number  BeginOfThisString, EndOfThisString, LargestPosition;
 
     *nItems = 0;
     if (!_cmsReadUInt32Number(io, &Count)) return NULL;
     if (!_cmsReadUInt32Number(io, &RecLen)) return NULL;
 
     if (RecLen != 12) {
 
         cmsSignalError(self->ContextID, cmsERROR_UNKNOWN_EXTENSION, "multiLocalizedUnicodeType of len != 12 is not supported.");
         return NULL;
     }
 
     mlu = cmsMLUalloc(self ->ContextID, Count);
     if (mlu == NULL) return NULL;
 
     mlu ->UsedEntries = Count;
 
     SizeOfHeader = 12 * Count + sizeof(_cmsTagBase);
     LargestPosition = 0;
 
     for (i=0; i < Count; i++) {
 
         if (!_cmsReadUInt16Number(io, &mlu ->Entries[i].Language)) goto Error;
         if (!_cmsReadUInt16Number(io, &mlu ->Entries[i].Country))  goto Error;
 
         // Now deal with Len and offset.
         if (!_cmsReadUInt32Number(io, &Len)) goto Error;
         if (!_cmsReadUInt32Number(io, &Offset)) goto Error;
 
+        // Offset MUST be even because it indexes a block of utf16 chars. 
+        // Tricky profiles that uses odd positions will not work anyway
+        // because the whole utf16 block is previously converted to wchar_t 
+        // and sizeof this type may be of 4 bytes. On Linux systems, for example.
+        if (Offset & 1) goto Error;
+
         // Check for overflow
         if (Offset < (SizeOfHeader + 8)) goto Error;        
         if (((Offset + Len) < Len) || ((Offset + Len) > SizeOfTag + 8)) goto Error;
 
         // True begin of the string
         BeginOfThisString = Offset - SizeOfHeader - 8;
 
         // Adjust to wchar_t elements
         mlu ->Entries[i].Len = (Len * sizeof(wchar_t)) / sizeof(cmsUInt16Number);
         mlu ->Entries[i].StrW = (BeginOfThisString * sizeof(wchar_t)) / sizeof(cmsUInt16Number);
 
         // To guess maximum size, add offset + len
         EndOfThisString = BeginOfThisString + Len;
         if (EndOfThisString > LargestPosition)
             LargestPosition = EndOfThisString;
     }
 
     // Now read the remaining of tag and fill all strings. Subtract the directory
     SizeOfTag   = (LargestPosition * sizeof(wchar_t)) / sizeof(cmsUInt16Number);
     if (SizeOfTag == 0)
     {
         Block = NULL;
         NumOfWchar = 0;
 
     }
     else
     {
-        Block = (wchar_t*) _cmsMalloc(self ->ContextID, SizeOfTag);
+        // Make sure this is an even utf16 size.
+        if (SizeOfTag & 1) goto Error;
+
+        Block = (wchar_t*) _cmsCalloc(self ->ContextID, 1, SizeOfTag);
         if (Block == NULL) goto Error;
-        NumOfWchar = SizeOfTag / sizeof(wchar_t);
+       
+        NumOfWchar = SizeOfTag / sizeof(cmsUInt16Number);
         if (!_cmsReadWCharArray(io, NumOfWchar, Block)) {
             _cmsFree(self->ContextID, Block);
             goto Error;
         }
     }
 
     mlu ->MemPool  = Block;
     mlu ->PoolSize = SizeOfTag;
     mlu ->PoolUsed = SizeOfTag;
 
     *nItems = 1;
     return (void*) mlu;
