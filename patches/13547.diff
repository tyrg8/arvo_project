commit 6e8174e9577dde0aaa3e8e3850bd5f83f5c35a8f
Author: Jim Van Verth <jvanverth@google.com>
Date:   Mon Mar 4 14:10:34 2019 -0500

    Fix issue with offsetting polygon by 0 distance.
    
    Need to output matching indices as well.
    
    Bug: skia:13417, chromium:937412
    Change-Id: I251a70eb07fda8b3a257d9f57ebdd9f20ad01b5a
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/197160
    Reviewed-by: Kevin Lubick <kjlubick@google.com>
    Commit-Queue: Kevin Lubick <kjlubick@google.com>
    Commit-Queue: Jim Van Verth <jvanverth@google.com>

diff --git a/src/utils/SkPolyUtils.cpp b/src/utils/SkPolyUtils.cpp
index 0e91d091c3..52435798e2 100644
--- a/src/utils/SkPolyUtils.cpp
+++ b/src/utils/SkPolyUtils.cpp
@@ -1148,266 +1148,267 @@ static bool is_reflex_vertex(const SkPoint* inputPolygonVerts, int winding, SkSc
 bool SkOffsetSimplePolygon(const SkPoint* inputPolygonVerts, int inputPolygonSize, SkScalar offset,
                            SkTDArray<SkPoint>* offsetPolygon, SkTDArray<int>* polygonIndices) {
     if (inputPolygonSize < 3) {
         return false;
     }
 
     // need to be able to represent all the vertices in the 16-bit indices
     if (inputPolygonSize >= std::numeric_limits<uint16_t>::max()) {
         return false;
     }
 
     if (!SkScalarIsFinite(offset)) {
         return false;
     }
 
     // offsetting close to zero just returns the original poly
     if (SkScalarNearlyZero(offset)) {
         for (int i = 0; i < inputPolygonSize; ++i) {
             *offsetPolygon->push() = inputPolygonVerts[i];
+            *polygonIndices->push() = i;
         }
         return true;
     }
 
     // get winding direction
     int winding = SkGetPolygonWinding(inputPolygonVerts, inputPolygonSize);
     if (0 == winding) {
         return false;
     }
 
     // build normals
     SkAutoSTMalloc<64, SkVector> normals(inputPolygonSize);
     unsigned int numEdges = 0;
     for (int currIndex = 0, prevIndex = inputPolygonSize - 1;
          currIndex < inputPolygonSize;
          prevIndex = currIndex, ++currIndex) {
         if (!inputPolygonVerts[currIndex].isFinite()) {
             return false;
         }
         int nextIndex = (currIndex + 1) % inputPolygonSize;
         if (!compute_offset_vector(inputPolygonVerts[currIndex], inputPolygonVerts[nextIndex],
                                    offset, winding, &normals[currIndex])) {
             return false;
         }
         if (currIndex > 0) {
             // if reflex point, we need to add extra edges
             if (is_reflex_vertex(inputPolygonVerts, winding, offset,
                                  prevIndex, currIndex, nextIndex)) {
                 SkScalar rotSin, rotCos;
                 int numSteps;
                 if (!SkComputeRadialSteps(normals[prevIndex], normals[currIndex], offset,
                                           &rotSin, &rotCos, &numSteps)) {
                     return false;
                 }
                 numEdges += SkTMax(numSteps, 1);
             }
         }
         numEdges++;
     }
     // finish up the edge counting
     if (is_reflex_vertex(inputPolygonVerts, winding, offset, inputPolygonSize-1, 0, 1)) {
         SkScalar rotSin, rotCos;
         int numSteps;
         if (!SkComputeRadialSteps(normals[inputPolygonSize-1], normals[0], offset,
                                   &rotSin, &rotCos, &numSteps)) {
             return false;
         }
         numEdges += SkTMax(numSteps, 1);
     }
 
     // Make sure we don't overflow the max array count.
     // We shouldn't overflow numEdges, as SkComputeRadialSteps returns a max of 2^16-1,
     // and we have a max of 2^16-1 original vertices.
     if (numEdges > (unsigned int)std::numeric_limits<int32_t>::max()) {
         return false;
     }
 
     // build initial offset edge list
     SkSTArray<64, OffsetEdge> edgeData(numEdges);
     OffsetEdge* prevEdge = nullptr;
     for (int currIndex = 0, prevIndex = inputPolygonSize - 1;
          currIndex < inputPolygonSize;
          prevIndex = currIndex, ++currIndex) {
         int nextIndex = (currIndex + 1) % inputPolygonSize;
         // if reflex point, fill in curve
         if (is_reflex_vertex(inputPolygonVerts, winding, offset,
                              prevIndex, currIndex, nextIndex)) {
             SkScalar rotSin, rotCos;
             int numSteps;
             SkVector prevNormal = normals[prevIndex];
             if (!SkComputeRadialSteps(prevNormal, normals[currIndex], offset,
                                       &rotSin, &rotCos, &numSteps)) {
                 return false;
             }
             auto currEdge = edgeData.push_back_n(SkTMax(numSteps, 1));
             for (int i = 0; i < numSteps - 1; ++i) {
                 SkVector currNormal = SkVector::Make(prevNormal.fX*rotCos - prevNormal.fY*rotSin,
                                                      prevNormal.fY*rotCos + prevNormal.fX*rotSin);
                 setup_offset_edge(currEdge,
                                   inputPolygonVerts[currIndex] + prevNormal,
                                   inputPolygonVerts[currIndex] + currNormal,
                                   currIndex, currIndex);
                 prevNormal = currNormal;
                 currEdge->fPrev = prevEdge;
                 if (prevEdge) {
                     prevEdge->fNext = currEdge;
                 }
                 prevEdge = currEdge;
                 ++currEdge;
             }
             setup_offset_edge(currEdge,
                               inputPolygonVerts[currIndex] + prevNormal,
                               inputPolygonVerts[currIndex] + normals[currIndex],
                               currIndex, currIndex);
             currEdge->fPrev = prevEdge;
             if (prevEdge) {
                 prevEdge->fNext = currEdge;
             }
             prevEdge = currEdge;
         }
 
         // Add the edge
         auto currEdge = edgeData.push_back_n(1);
         setup_offset_edge(currEdge,
                           inputPolygonVerts[currIndex] + normals[currIndex],
                           inputPolygonVerts[nextIndex] + normals[currIndex],
                           currIndex, nextIndex);
         currEdge->fPrev = prevEdge;
         if (prevEdge) {
             prevEdge->fNext = currEdge;
         }
         prevEdge = currEdge;
     }
     // close up the linked list
     SkASSERT(prevEdge);
     prevEdge->fNext = &edgeData[0];
     edgeData[0].fPrev = prevEdge;
 
     // now clip edges
     SkASSERT(edgeData.count() == (int)numEdges);
     auto head = &edgeData[0];
     auto currEdge = head;
     unsigned int offsetVertexCount = numEdges;
     unsigned long long iterations = 0;
     unsigned long long maxIterations = (unsigned long long)(numEdges) * numEdges;
     while (head && prevEdge != currEdge && offsetVertexCount > 0) {
         ++iterations;
         // we should check each edge against each other edge at most once
         if (iterations > maxIterations) {
             return false;
         }
 
         SkScalar s, t;
         SkPoint intersection;
         if (prevEdge->checkIntersection(currEdge, &intersection, &s, &t)) {
             // if new intersection is further back on previous inset from the prior intersection
             if (s < prevEdge->fTValue) {
                 // no point in considering this one again
                 remove_node(prevEdge, &head);
                 --offsetVertexCount;
                 // go back one segment
                 prevEdge = prevEdge->fPrev;
                 // we've already considered this intersection, we're done
             } else if (currEdge->fTValue > SK_ScalarMin &&
                        SkPointPriv::EqualsWithinTolerance(intersection,
                                                           currEdge->fIntersection,
                                                           1.0e-6f)) {
                 break;
             } else {
                 // add intersection
                 currEdge->fIntersection = intersection;
                 currEdge->fTValue = t;
                 currEdge->fIndex = prevEdge->fEnd;
 
                 // go to next segment
                 prevEdge = currEdge;
                 currEdge = currEdge->fNext;
             }
         } else {
             // If there is no intersection, we want to minimize the distance between
             // the point where the segment lines cross and the segments themselves.
             OffsetEdge* prevPrevEdge = prevEdge->fPrev;
             OffsetEdge* currNextEdge = currEdge->fNext;
             SkScalar dist0 = currEdge->computeCrossingDistance(prevPrevEdge);
             SkScalar dist1 = prevEdge->computeCrossingDistance(currNextEdge);
             // if both lead to direct collision
             if (dist0 < 0 && dist1 < 0) {
                 // check first to see if either represent parts of one contour
                 SkPoint p1 = prevPrevEdge->fOffset.fP0 + prevPrevEdge->fOffset.fV;
                 bool prevSameContour = SkPointPriv::EqualsWithinTolerance(p1,
                                                                           prevEdge->fOffset.fP0);
                 p1 = currEdge->fOffset.fP0 + currEdge->fOffset.fV;
                 bool currSameContour = SkPointPriv::EqualsWithinTolerance(p1,
                                                                          currNextEdge->fOffset.fP0);
 
                 // want to step along contour to find intersections rather than jump to new one
                 if (currSameContour && !prevSameContour) {
                     remove_node(currEdge, &head);
                     currEdge = currNextEdge;
                     --offsetVertexCount;
                     continue;
                 } else if (prevSameContour && !currSameContour) {
                     remove_node(prevEdge, &head);
                     prevEdge = prevPrevEdge;
                     --offsetVertexCount;
                     continue;
                 }
             }
 
             // otherwise minimize collision distance along segment
             if (dist0 < dist1) {
                 remove_node(prevEdge, &head);
                 prevEdge = prevPrevEdge;
             } else {
                 remove_node(currEdge, &head);
                 currEdge = currNextEdge;
             }
             --offsetVertexCount;
         }
     }
 
     // store all the valid intersections that aren't nearly coincident
     // TODO: look at the main algorithm and see if we can detect these better
     offsetPolygon->reset();
     if (!head || offsetVertexCount == 0 ||
         offsetVertexCount >= std::numeric_limits<uint16_t>::max()) {
         return false;
     }
 
     static constexpr SkScalar kCleanupTolerance = 0.01f;
     offsetPolygon->setReserve(offsetVertexCount);
     int currIndex = 0;
     *offsetPolygon->push() = head->fIntersection;
     if (polygonIndices) {
         *polygonIndices->push() = head->fIndex;
     }
     currEdge = head->fNext;
     while (currEdge != head) {
         if (!SkPointPriv::EqualsWithinTolerance(currEdge->fIntersection,
                                                 (*offsetPolygon)[currIndex],
                                                 kCleanupTolerance)) {
             *offsetPolygon->push() = currEdge->fIntersection;
             if (polygonIndices) {
                 *polygonIndices->push() = currEdge->fIndex;
             }
             currIndex++;
         }
         currEdge = currEdge->fNext;
     }
     // make sure the first and last points aren't coincident
     if (currIndex >= 1 &&
         SkPointPriv::EqualsWithinTolerance((*offsetPolygon)[0], (*offsetPolygon)[currIndex],
                                             kCleanupTolerance)) {
         offsetPolygon->pop();
         if (polygonIndices) {
             polygonIndices->pop();
         }
     }
 
     // check winding of offset polygon (it should be same as the original polygon)
     SkScalar offsetWinding = SkGetPolygonWinding(offsetPolygon->begin(), offsetPolygon->count());
 
     return (winding*offsetWinding > 0 &&
             SkIsSimplePolygon(offsetPolygon->begin(), offsetPolygon->count()));
 }
 
 //////////////////////////////////////////////////////////////////////////////////////////
