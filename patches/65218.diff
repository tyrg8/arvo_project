commit 0ff40625b602590afffb383ab03d155e0ba509ed
Author: jeanlf <jeanlf@gpac.io>
Date:   Wed Jan 17 15:15:02 2024 +0100

    fixed potential crash in unix domain sockets with broken adresses

diff --git a/src/utils/os_net.c b/src/utils/os_net.c
index 737334730..e0732a6ac 100644
--- a/src/utils/os_net.c
+++ b/src/utils/os_net.c
@@ -1876,146 +1876,146 @@ GF_EXPORT
 GF_Err gf_sk_connect(GF_Socket *sock, const char *PeerName, u16 PortNumber, const char *ifce_ip_or_name)
 {
 	s32 ret;
 #ifdef GPAC_HAS_IPV6
 	u32 type;
 	struct addrinfo *res, *aip, *lip;
 #else
 	struct hostent *Host = NULL;
 #endif
 
 	if (sock->flags & GF_SOCK_IS_UN) {
 #ifdef GPAC_HAS_SOCK_UN
 		struct sockaddr_un server_add;
 		if (!sock->socket) {
 			sock->socket = socket(AF_UNIX, (sock->flags & GF_SOCK_IS_TCP) ? SOCK_STREAM : SOCK_DGRAM, 0);
 			if (sock->flags & GF_SOCK_NON_BLOCKING)
 				gf_sk_set_block_mode(sock, GF_TRUE);
 		}
 		server_add.sun_family = AF_UNIX;
-		strcpy(server_add.sun_path, PeerName);
+		strncpy(server_add.sun_path, PeerName, sizeof(server_add.sun_path));
 		if (connect(sock->socket, (struct sockaddr *)&server_add, sizeof(struct sockaddr_un)) < 0) {
 			GF_LOG(GF_LOG_ERROR, GF_LOG_NETWORK, ("[Socket] Failed to connect unix domain socket to %s\n", PeerName));
 			return GF_IP_CONNECTION_FAILURE;
 		}
 		return GF_OK;
 #else
 	     return GF_NOT_SUPPORTED;
 #endif
 	}
 
 #ifdef GPAC_HAS_IPV6
 	type = (sock->flags & GF_SOCK_IS_TCP) ? SOCK_STREAM : SOCK_DGRAM;
 
 	GF_LOG(GF_LOG_INFO, GF_LOG_NETWORK, ("[Sock_IPV6] Solving %s address\n", PeerName));
 	res = gf_sk_get_ipv6_addr(PeerName, PortNumber, AF_UNSPEC, AI_PASSIVE, type);
 	if (!res) return GF_IP_CONNECTION_FAILURE;
 	GF_LOG(GF_LOG_INFO, GF_LOG_NETWORK, ("[Sock_IPV6] Host %s found\n", PeerName));
 
 	lip = NULL;
 	if (ifce_ip_or_name) {
 		lip = gf_sk_get_ifce_ipv6_addr(ifce_ip_or_name, PortNumber, AF_UNSPEC, AI_PASSIVE, type);
 		if (!lip) return GF_IP_CONNECTION_FAILURE;
 	}
 
 	/*for all interfaces*/
 	for (aip=res; aip!=NULL; aip=aip->ai_next) {
 		if (type != (u32) aip->ai_socktype) continue;
 
 
 #ifndef GPAC_DISABLE_NETCAP
 		if (sock->cap_info) {
 			sock->cap_info->host_port = PortNumber;
 			if (lip) {
 				if (lip->ai_family==PF_INET) {
 					sock->cap_info->host_addr_v4 = inet_addr_from_name(ifce_ip_or_name);
 				} else {
 					memcpy(sock->cap_info->host_addr_v6, (u8*) &((struct sockaddr_in6 *)lip->ai_addr)->sin6_addr, sizeof(bin128));
 				}
 			}
 			if (aip->ai_family==AF_INET) {
 				sock->cap_info->peer_addr_v4 = inet_addr_from_name(PeerName);
 				sock->cap_info->peer_addr_v4 = ((struct sockaddr_in *)aip->ai_addr)->sin_addr.s_addr;
 			} else {
 				memcpy(sock->cap_info->peer_addr_v6, (u8*) &((struct sockaddr_in6 *)aip->ai_addr)->sin6_addr, sizeof(bin128));
 			}
 			//play/record, don't create socket
 			if (sock->cap_info->nf->cap_mode) {
 				if (sock->cap_info->nf->read_socks==NULL) {
 					sock->cap_info->peer_port = first_tcp_port;
 					first_tcp_port++;
 				}
 				sock->flags |= GF_SOCK_HAS_PEER;
 				freeaddrinfo(res);
 				if (lip) freeaddrinfo(lip);
 				return GF_OK;
 			}
 		}
 #endif
 		if (!sock->socket) {
 			sock->socket = socket(aip->ai_family, aip->ai_socktype, aip->ai_protocol);
 			if (sock->socket == INVALID_SOCKET) {
 				sock->socket = NULL_SOCKET;
 				continue;
 			}
 			if (sock->flags & GF_SOCK_IS_TCP) {
 				if (sock->flags & GF_SOCK_NON_BLOCKING)
 					gf_sk_set_block_mode(sock, GF_TRUE);
 			}
 
 			if (aip->ai_family==PF_INET6) sock->flags |= GF_SOCK_IS_IPV6;
 			else sock->flags &= ~GF_SOCK_IS_IPV6;
 
 			if (lip) {
 				ret = bind(sock->socket, lip->ai_addr, (int) lip->ai_addrlen);
 				if (ret == SOCKET_ERROR) {
 					sock_close(sock);
 					continue;
 				}
 			}
 		}
 
 		if (sock->flags & GF_SOCK_IS_TCP) {
 
 #if defined(WIN32) || defined(_WIN32_WCE)
 			//on winsock we must check writability between two connects for non-blocking sockets
 			if (sock->flags & GF_SOCK_HAS_CONNECT) {
 				if (gf_sk_select(sock, GF_SK_SELECT_WRITE) == GF_IP_NETWORK_EMPTY) {
 					GF_Err e = gf_sk_probe(sock);
 					if (e && (e != GF_IP_NETWORK_EMPTY)) return e;
 					return GF_IP_NETWORK_EMPTY;
 				}
 			}
 #endif
 
 			GF_LOG(GF_LOG_INFO, GF_LOG_NETWORK, ("[Sock_IPV6] Connecting to %s:%d\n", PeerName, PortNumber));
 			ret = connect(sock->socket, aip->ai_addr, (int) aip->ai_addrlen);
 			if (ret == SOCKET_ERROR) {
 				int err = LASTSOCKERROR;
 				if (sock->flags & GF_SOCK_NON_BLOCKING) {
 					switch (err) {
 					case EINPROGRESS:
 #if defined(WIN32) || defined(_WIN32_WCE)
 					case WSAEWOULDBLOCK:
 #endif
 						freeaddrinfo(res);
 						if (lip) freeaddrinfo(lip);
 						//remember we issued a first connect
 						sock->flags |= GF_SOCK_HAS_CONNECT;
 						return GF_IP_NETWORK_EMPTY;
 
 					case EISCONN:
 					case EALREADY:
 #if defined(WIN32) || defined(_WIN32_WCE)
 					case WSAEISCONN:
 #endif
 						if (gf_sk_select(sock, GF_SK_SELECT_WRITE) == GF_OK)
 							goto conn_ok;
 						freeaddrinfo(res);
 						if (lip) freeaddrinfo(lip);
 						return GF_IP_NETWORK_EMPTY;
 					}
 				}
 				sock_close(sock);
 				GF_LOG(GF_LOG_DEBUG, GF_LOG_NETWORK, ("[Sock_IPV6] Failed to connect to host %s: %s (%d) - retrying with next host address\n", PeerName, gf_errno_str(err), err ));
 				continue;
 			}
@@ -2163,229 +2163,229 @@ GF_EXPORT
 GF_Err gf_sk_bind(GF_Socket *sock, const char *ifce_ip_or_name, u16 port, const char *peer_name, u16 peer_port, u32 options)
 {
 #ifdef GPAC_HAS_IPV6
 	struct addrinfo *res, *aip;
 	int af;
 	u32 type;
 #else
 	u32 ip_add;
 	size_t addrlen;
 	struct sockaddr_in LocalAdd;
 	struct hostent *Host = NULL;
 #endif
 	s32 ret = 0;
 	s32 optval;
 
 	if (!sock || sock->socket) return GF_BAD_PARAM;
 	if (ifce_ip_or_name && !strcmp(ifce_ip_or_name, "127.0.0.1"))
 		ifce_ip_or_name = NULL;
 
 	if (sock->flags & GF_SOCK_IS_UN) {
 #ifdef GPAC_HAS_SOCK_UN
 		struct sockaddr_un server_un;
 		if (!sock->socket) {
 			sock->socket = socket(AF_UNIX, (sock->flags & GF_SOCK_IS_TCP) ? SOCK_STREAM : SOCK_DGRAM, 0);
 			if (sock->flags & GF_SOCK_NON_BLOCKING)
 				gf_sk_set_block_mode(sock, GF_TRUE);
 		}
 		server_un.sun_family = AF_UNIX;
-		strcpy(server_un.sun_path, peer_name);
+		strncpy(server_un.sun_path, peer_name, sizeof(server_un.sun_path));
 		ret = bind(sock->socket, (struct sockaddr *) &server_un, (int) sizeof(struct sockaddr_un));
 		if (ret == SOCKET_ERROR) {
 			if (LASTSOCKERROR == EADDRINUSE) {
 				return gf_sk_connect(sock, peer_name, peer_port, NULL);
 			}
 			GF_LOG(GF_LOG_ERROR, GF_LOG_NETWORK, ("[socket] cannot bind socket: %s\n", gf_errno_str(LASTSOCKERROR) ));
 			return GF_IP_CONNECTION_FAILURE;
 		}
 		GF_LOG(GF_LOG_INFO, GF_LOG_NETWORK, ("[socket] socket bound to unix domain %s\n", peer_name));
 		return GF_OK;
 #else
 	    return GF_NOT_SUPPORTED;
 #endif
 	}
 
 
 #ifndef WIN32
 	if (!ifce_ip_or_name && (!peer_name || !strcmp(peer_name,"localhost"))) {
 		peer_name="127.0.0.1";
 	}
 #endif
 
 #ifdef GPAC_HAS_IPV6
 	type = (sock->flags & GF_SOCK_IS_TCP) ? SOCK_STREAM : SOCK_DGRAM;
 	af = (options & GF_SOCK_FORCE_IPV6) ? PF_INET6 : PF_UNSPEC;
 	if (!gf_net_has_ipv6()) af = PF_INET;
 	/*probe way to peer: is it V4 or V6? */
 	if (peer_name && peer_port) {
 		res = gf_sk_get_ipv6_addr(peer_name, peer_port, af, AI_PASSIVE, type);
 		if (!res) {
 			GF_LOG(GF_LOG_ERROR, GF_LOG_NETWORK, ("[Socket] Cannot get IPV6 host name for %s:%d\n", peer_name, peer_port));
 			return GF_IP_ADDRESS_NOT_FOUND;
 		}
 #ifdef WIN32
 		/*win32 has troubles redirecting IPV4 datagrams to IPV6 sockets, so override
 		local family type to avoid IPV4(S)->IPV6(C) UDP*/
 		af = res->ai_family;
 #endif
 		memcpy(&sock->dest_addr, res->ai_addr, res->ai_addrlen);
 		sock->dest_addr_len = (u32) res->ai_addrlen;
 		freeaddrinfo(res);
 	}
 
 	res = gf_sk_get_ifce_ipv6_addr(ifce_ip_or_name, port, af, AI_PASSIVE, type);
 	if (!res) return GF_IP_ADDRESS_NOT_FOUND;
 
 	/*for all interfaces*/
 	for (aip=res; aip!=NULL; aip=aip->ai_next) {
 		if (type != (u32) aip->ai_socktype) continue;
 
 		if (aip->ai_next && (aip->ai_next->ai_family==PF_INET) && !gf_net_is_ipv6(peer_name)) continue;
 
 #ifndef GPAC_DISABLE_NETCAP
 		if (sock->cap_info) {
 			sock->cap_info->host_port = port ? port : peer_port;
 			if (aip->ai_family==PF_INET) {
 				sock->cap_info->host_addr_v4 = inet_addr_from_name(peer_name ? peer_name : ifce_ip_or_name);
 			} else {
 				memcpy(sock->cap_info->host_addr_v6, (u8*) &((struct sockaddr_in6 *)aip->ai_addr)->sin6_addr, sizeof(bin128));
 			}
 			if (peer_name && peer_port) {
 				if (sock->dest_addr.ss_family==AF_INET) {
 					struct sockaddr_in *r_add = (struct sockaddr_in *) &sock->dest_addr;
 					sock->cap_info->peer_port = r_add->sin_port;
 					sock->cap_info->peer_addr_v4 = r_add->sin_addr.s_addr;
 				} else {
 					struct sockaddr_in6 *r_add = (struct sockaddr_in6 *) &sock->dest_addr;
 					sock->cap_info->peer_port = r_add->sin6_port;
 					memcpy(sock->cap_info->peer_addr_v6, &(r_add->sin6_addr), sizeof(bin128));
 				}
 			}
 			//play/record, don't create socket
 			if (sock->cap_info->nf->cap_mode) {
 				if (aip->ai_family==PF_INET6) sock->flags |= GF_SOCK_IS_IPV6;
 				else sock->flags &= ~GF_SOCK_IS_IPV6;
 
 				freeaddrinfo(res);
 				return GF_OK;
 			}
 		}
 #endif
 		sock->socket = socket(aip->ai_family, aip->ai_socktype, aip->ai_protocol);
 		if (sock->socket == INVALID_SOCKET) {
 			sock->socket = NULL_SOCKET;
 			continue;
 		}
 		if (options & GF_SOCK_REUSE_PORT) {
 			optval = 1;
 			setsockopt(sock->socket, SOL_SOCKET, SO_REUSEADDR, (const char *) &optval, sizeof(optval));
 #ifdef SO_REUSEPORT
 			optval = 1;
 			setsockopt(sock->socket, SOL_SOCKET, SO_REUSEPORT, SSO_CAST &optval, sizeof(optval));
 #endif
 		}
 
 		if (sock->flags & GF_SOCK_NON_BLOCKING)
 			gf_sk_set_block_mode(sock, GF_TRUE);
 
 		if (peer_name && peer_port)
 			sock->flags |= GF_SOCK_HAS_PEER;
 
 		if (! (options & GF_SOCK_FAKE_BIND) ) {
 			ret = bind(sock->socket, aip->ai_addr, (int) aip->ai_addrlen);
 			if (ret == SOCKET_ERROR) {
 				GF_LOG(GF_LOG_WARNING, GF_LOG_NETWORK, ("[socket] bind failed: %s\n", gf_errno_str(LASTSOCKERROR) ));
 				sock_close(sock);
 				continue;
 			}
 		}
 		if (aip->ai_family==PF_INET6) sock->flags |= GF_SOCK_IS_IPV6;
 		else sock->flags &= ~GF_SOCK_IS_IPV6;
 
 		freeaddrinfo(res);
 		return GF_OK;
 	}
 	freeaddrinfo(res);
 	GF_LOG(GF_LOG_ERROR, GF_LOG_NETWORK, ("[Socket] Cannot bind to ifce %s port %d\n", ifce_ip_or_name ? ifce_ip_or_name : "any", port));
 	return GF_IP_CONNECTION_FAILURE;
 
 #else
 
 #ifndef GPAC_DISABLE_NETCAP
 	if (sock->cap_info) {
 		sock->cap_info->host_port = port ? port : peer_port;
 		sock->cap_info->host_addr_v4 = inet_addr_from_name(ifce_ip_or_name);
 		if (peer_name && peer_port) {
 			sock->cap_info->peer_port = peer_port;
 			sock->cap_info->peer_addr_v4 = inet_addr_from_name(peer_name);
 			sock->flags |= GF_SOCK_HAS_PEER;
 		}
 		//play/record, don't create socket
 		if (sock->cap_info->nf->cap_mode) {
 			return GF_OK;
 		}
 	}
 #endif
 
 	sock->socket = socket(AF_INET, (sock->flags & GF_SOCK_IS_TCP) ? SOCK_STREAM : SOCK_DGRAM, 0);
 	if (sock->flags & GF_SOCK_NON_BLOCKING)
 		gf_sk_set_block_mode(sock, GF_TRUE);
 	sock->flags &= ~GF_SOCK_IS_IPV6;
 
 	memset((void *) &LocalAdd, 0, sizeof(LocalAdd));
 
 	/*setup the address*/
 	ip_add = inet_addr_from_name(ifce_ip_or_name);
 	if (ip_add==0xFFFFFFFF) return GF_IP_CONNECTION_FAILURE;
 
 	if (peer_name && peer_port) {
 #ifdef WIN32
 		if ((inet_addr(peer_name)== ip_add) || !strcmp(peer_name, "127.0.0.1") ) {
 			optval = 1;
 			setsockopt(sock->socket, SOL_SOCKET, SO_USELOOPBACK, SSO_CAST &optval, sizeof(optval));
 		}
 #endif
 	}
 
 	LocalAdd.sin_family = AF_INET;
 	LocalAdd.sin_port = htons(port);
 	LocalAdd.sin_addr.s_addr = ip_add;
 	addrlen = sizeof(struct sockaddr_in);
 
 
 	if (options & GF_SOCK_REUSE_PORT) {
 		optval = 1;
 		setsockopt(sock->socket, SOL_SOCKET, SO_REUSEADDR, SSO_CAST &optval, sizeof(optval));
 #ifdef SO_REUSEPORT
 		optval = 1;
 		setsockopt(sock->socket, SOL_SOCKET, SO_REUSEPORT, SSO_CAST &optval, sizeof(optval));
 #endif
 	}
 
 	if (! (options & GF_SOCK_FAKE_BIND) ) {
 		/*bind the socket*/
 		ret = bind(sock->socket, (struct sockaddr *) &LocalAdd, (int) addrlen);
 		if (ret == SOCKET_ERROR) {
 			GF_LOG(GF_LOG_ERROR, GF_LOG_NETWORK, ("[socket] cannot bind socket: %s\n", gf_errno_str(LASTSOCKERROR) ));
 			ret = GF_IP_CONNECTION_FAILURE;
 		}
 	}
 
 	if (peer_name && peer_port) {
 		sock->dest_addr.sin_port = htons(peer_port);
 		sock->dest_addr.sin_family = AF_INET;
 		sock->dest_addr.sin_addr.s_addr = inet_addr(peer_name);
 		if (sock->dest_addr.sin_addr.s_addr == INADDR_NONE) {
 			Host = gf_gethostbyname(peer_name);
 			if (Host == NULL) ret = GF_IP_ADDRESS_NOT_FOUND;
 			else memcpy((char *) &sock->dest_addr.sin_addr, Host->h_addr_list[0], sizeof(u32));
 		}
 		sock->flags |= GF_SOCK_HAS_PEER;
 	}
 	if (sock->flags & GF_SOCK_HAS_PEER) {
 		GF_LOG(GF_LOG_INFO, GF_LOG_NETWORK, ("[socket] socket bound to %08X - port %d - remote peer: %s:%d\n", ip_add, port, peer_name, peer_port));
 	} else {
 		GF_LOG(GF_LOG_INFO, GF_LOG_NETWORK, ("[socket] socket bound to %08X - port %d\n", ip_add, port));
 	}
 	return ret;
 #endif
 }
