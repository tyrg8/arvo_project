commit 6ef4fa071e2c25b71e81a91646b43378cf957388
Author: Alan Modra <amodra@gmail.com>
Date:   Wed Nov 3 16:21:42 2021 +1030

    asan: dlltool buffer overflow: embedded NUL in string
    
    yyleng gives the pattern length, xstrdup just copies up to the NUL.
    So it is quite possible writing at an index of yyleng-2 overflows
    the xstrdup allocated string buffer.  xmemdup quite handily avoids
    this problem, even writing the terminating NUL over the trailing
    quote.  Use it in ldlex.l too where we'd already had a report of this
    problem and fixed it by hand, and to implement xmemdup0 in gas.
    
    binutils/
            * deflex.l (single and double quote strings): Use xmemdup.
    gas/
            * as.h (xmemdup0): Use xmemdup.
    ld/
            PR 20906
            * ldlex.l (double quote string): Use xmemdup.

diff --git a/binutils/deflex.l b/binutils/deflex.l
index 1f3ba6532d4..def908c1139 100644
--- a/binutils/deflex.l
+++ b/binutils/deflex.l
@@ -32,62 +32,60 @@
 int linenumber;
 
 %}
 %%
 "NAME" 		{ return NAME;}
 "LIBRARY"	{ return LIBRARY;}
 "DESCRIPTION" 	{ return DESCRIPTION;}
 "STACKSIZE"	{ return STACKSIZE;}
 "HEAPSIZE" 	{ return HEAPSIZE;}
 "CODE" 		{ return CODE;}
 "DATA"		{ return DATA;}
 "SECTIONS"	{ return SECTIONS;}
 "EXPORTS"	{ return EXPORTS;}
 "IMPORTS"	{ return IMPORTS;}
 "VERSION"	{ return VERSIONK;}
 "BASE"		{ return BASE;}
 "CONSTANT"	{ return CONSTANT; }
 "NONAME"	{ return NONAME; }
 "PRIVATE"	{ return PRIVATE; }
 "READ"		{ return READ;}
 "WRITE"		{ return WRITE;}
 "EXECUTE"	{ return EXECUTE;}
 "SHARED"	{ return SHARED;}
 "NONSHARED"	{ return NONSHARED;}
 "SINGLE"	{ return SINGLE;}
 "MULTIPLE"	{ return MULTIPLE;}
 "INITINSTANCE"	{ return INITINSTANCE;}
 "INITGLOBAL"	{ return INITGLOBAL;}
 "TERMINSTANCE"	{ return TERMINSTANCE;}
 "TERMGLOBAL"	{ return TERMGLOBAL;}
 
 [0-9][x0-9A-Fa-f]* { yylval.number = strtol (yytext,0,0);
 		return NUMBER; }
 
 (@)?[A-Za-z$:\-\_?][A-Za-z0-9/$:\<\>\-\_@?+]* {
 		yylval.id =  xstrdup (yytext);
 		return ID;
 		}
 
 "\""[^\"]*"\"" {
-		yylval.id = xstrdup (yytext+1);
-		yylval.id[yyleng-2] = 0;
+		yylval.id = xmemdup (yytext + 1, yyleng - 2, yyleng - 1);
 		return ID;
 		}
 
 "\'"[^\']*"\'" {
-		yylval.id = xstrdup (yytext+1);
-		yylval.id[yyleng-2] = 0;
+		yylval.id = xmemdup (yytext + 1, yyleng - 2, yyleng - 1);
 		return ID;
 		}
 "*".* 		{ }
 ";".* 		{ }
 " "		{ }
 "\t"		{ }
 "\r"		{ }
 "\n"	 	{ linenumber ++ ;}
 "=="		{ return EQUAL;}
 "=" 		{ return '=';}
 "." 		{ return '.';}
 "@"	 	{ return '@';}
 ","		{ return ',';}
 %%
diff --git a/gas/as.h b/gas/as.h
index 14a768f8889..f3f12fbd2f8 100644
--- a/gas/as.h
+++ b/gas/as.h
@@ -484,9 +484,7 @@ void add_debug_prefix_map (const char *);
 static inline char *
 xmemdup0 (const char *in, size_t len)
 {
-  char *out = (char *) xmalloc (len + 1);
-  out[len] = 0;
-  return (char *) memcpy (out, in, len);
+  return xmemdup (in, len, len + 1);
 }
 
 struct expressionS;
diff --git a/ld/ldlex.l b/ld/ldlex.l
index 6aeba6de656..5db1e731b74 100644
--- a/ld/ldlex.l
+++ b/ld/ldlex.l
@@ -104,401 +104,393 @@ V_TAG [.$_a-zA-Z][._a-zA-Z0-9]*
 V_IDENTIFIER [*?.$_a-zA-Z\[\]\-\!\^\\]([*?.$_a-zA-Z0-9\[\]\-\!\^\\]|::)*
 
 %s SCRIPT
 %s INPUTLIST
 %s EXPRESSION
 %s MRI
 %s WILD
 %s VERS_START
 %s VERS_SCRIPT
 %s VERS_NODE
 %%
 
   if (parser_input != input_selected)
     {
       /* The first token of the input determines the initial parser state.  */
       input_type t = parser_input;
       parser_input = input_selected;
       switch (t)
 	{
 	case input_script: return INPUT_SCRIPT; break;
 	case input_mri_script: return INPUT_MRI_SCRIPT; break;
 	case input_version_script: return INPUT_VERSION_SCRIPT; break;
 	case input_dynamic_list: return INPUT_DYNAMIC_LIST; break;
 	case input_defsym: return INPUT_DEFSYM; break;
 	default: abort ();
 	}
     }
 
 <SCRIPT,EXPRESSION,VERS_START,VERS_NODE,VERS_SCRIPT,INPUTLIST>"/*" {
 				comment (); }
 
 <MRI,EXPRESSION>"$"([0-9A-Fa-f])+ {
 				yylval.integer = bfd_scan_vma (yytext + 1, 0, 16);
 				yylval.bigint.str = NULL;
 				return INT;
 			}
 
 <MRI,EXPRESSION>([0-9A-Fa-f])+(H|h|X|x|B|b|O|o|D|d) {
 				   int ibase ;
 				   switch (yytext[yyleng - 1]) {
 				    case 'X':
 				    case 'x':
 				    case 'H':
 				    case 'h':
 				     ibase = 16;
 				     break;
 				    case 'O':
 				    case 'o':
 				     ibase = 8;
 				     break;
 				    case 'B':
 				    case 'b':
 				     ibase = 2;
 				     break;
 				    default:
 				     ibase = 10;
 				   }
 				   yylval.integer = bfd_scan_vma (yytext, 0,
 								  ibase);
 				   yylval.bigint.str = NULL;
 				   return INT;
 				 }
 <SCRIPT,MRI,EXPRESSION>((("$"|0[xX])([0-9A-Fa-f])+)|(([0-9])+))(M|K|m|k)? {
 				  char *s = yytext;
 				  int ibase = 0;
 
 				  if (*s == '$')
 				    {
 				      ++s;
 				      ibase = 16;
 				    }
 				  yylval.integer = bfd_scan_vma (s, 0, ibase);
 				  yylval.bigint.str = NULL;
 				  if (yytext[yyleng - 1] == 'M'
 				      || yytext[yyleng - 1] == 'm')
 				    {
 				      yylval.integer *= 1024 * 1024;
 				    }
 				  else if (yytext[yyleng - 1] == 'K'
 				      || yytext[yyleng - 1]=='k')
 				    {
 				      yylval.integer *= 1024;
 				    }
 				  else if (yytext[0] == '0'
 					   && (yytext[1] == 'x'
 					       || yytext[1] == 'X'))
 				    {
 				      yylval.bigint.str = xstrdup (yytext + 2);
 				    }
 				  return INT;
 				}
 
   /* Some tokens that only appear in expressions must be enabled for
      states other than EXPRESSION, since parser lookahead means they
      must be recognised before the parser switches the lexer out of
      SCRIPT or WILD state into EXPRESSION state.
 
      This sort of thing happens for example with NAME in ldgram.y
      "section" rule, which is immediately followed by ldlex_expression.
      However, if you follow the grammar from "sec_or_group_p1" you see
      "assignment" appearing in "statement_anywhere".  Now,
      "assignment" also has NAME as its first token, just like
      "section".  So the parser can't know whether it is in the
      "section" or the "assignment" rule until it has scanned the next
      token to find an assignment operator.  Thus the next token after
      NAME in the "section" rule may be lexed before the lexer is
      switched to EXPRESSION state, and there are quite a number of
      optional components.  The first token in all those components
      must be able to be lexed in SCRIPT state, as well as the
      assignment operators.  In fact, due to "opt_exp_with_type",
      anything that can appear on the left hand side of "exp" might
      need to be lexed in SCRIPT state.
 
      MRI mode tends to cover everything in MRI scripts.
   */
 <MRI,WILD>"]"				{ RTOKEN(']'); }
 <MRI,WILD>"["				{ RTOKEN('['); }
 <SCRIPT,EXPRESSION,MRI,WILD>"<<="	{ RTOKEN(LSHIFTEQ); }
 <SCRIPT,EXPRESSION,MRI,WILD>">>="	{ RTOKEN(RSHIFTEQ); }
 <EXPRESSION,MRI>"||"			{ RTOKEN(OROR); }
 <EXPRESSION,MRI>"=="			{ RTOKEN(EQ); }
 <EXPRESSION,MRI>"!="			{ RTOKEN(NE); }
 <EXPRESSION,MRI>">="			{ RTOKEN(GE); }
 <EXPRESSION,MRI>"<="			{ RTOKEN(LE); }
 <EXPRESSION,MRI>"<<"			{ RTOKEN(LSHIFT); }
 <EXPRESSION,MRI>">>"			{ RTOKEN(RSHIFT); }
 <SCRIPT,EXPRESSION,MRI,WILD>"+="	{ RTOKEN(PLUSEQ); }
 <SCRIPT,EXPRESSION,MRI,WILD>"-="	{ RTOKEN(MINUSEQ); }
 <SCRIPT,EXPRESSION,MRI,WILD>"*="	{ RTOKEN(MULTEQ); }
 <SCRIPT,EXPRESSION,MRI,WILD>"/="	{ RTOKEN(DIVEQ); }
 <SCRIPT,EXPRESSION,MRI,WILD>"&="	{ RTOKEN(ANDEQ); }
 <SCRIPT,EXPRESSION,MRI,WILD>"|="	{ RTOKEN(OREQ); }
 <EXPRESSION,MRI>"&&"			{ RTOKEN(ANDAND); }
 <SCRIPT,EXPRESSION,MRI>">"		{ RTOKEN('>'); }
 <SCRIPT,EXPRESSION,MRI,INPUTLIST>","	{ RTOKEN(','); }
 <EXPRESSION,MRI,WILD>"&"		{ RTOKEN('&'); }
 <EXPRESSION,MRI>"|"			{ RTOKEN('|'); }
 <SCRIPT,EXPRESSION,MRI>"~"		{ RTOKEN('~'); }
 <SCRIPT,EXPRESSION,MRI>"!"		{ RTOKEN('!'); }
 <EXPRESSION,MRI>"?"			{ RTOKEN('?'); }
 <EXPRESSION,MRI>"*"			{ RTOKEN('*'); }
 <SCRIPT,EXPRESSION,MRI>"+"		{ RTOKEN('+'); }
 <SCRIPT,EXPRESSION,MRI>"-"		{ RTOKEN('-'); }
 <EXPRESSION,MRI>"/"			{ RTOKEN('/'); }
 <EXPRESSION,MRI>"%"			{ RTOKEN('%'); }
 <EXPRESSION,MRI>"<"			{ RTOKEN('<'); }
 <SCRIPT,EXPRESSION,MRI,WILD>"="		{ RTOKEN('='); }
 <SCRIPT,EXPRESSION,MRI,WILD>"}"		{ RTOKEN('}'); }
 <SCRIPT,EXPRESSION,MRI,WILD>"{"		{ RTOKEN('{'); }
 <SCRIPT,EXPRESSION,MRI,WILD,INPUTLIST>")" { RTOKEN(')'); }
 <SCRIPT,EXPRESSION,MRI,WILD,INPUTLIST>"(" { RTOKEN('('); }
 <SCRIPT,EXPRESSION,MRI>":"		{ RTOKEN(':'); }
 <SCRIPT,EXPRESSION,MRI,WILD>";"		{ RTOKEN(';'); }
 <SCRIPT>"MEMORY"			{ RTOKEN(MEMORY); }
 <SCRIPT>"REGION_ALIAS"			{ RTOKEN(REGION_ALIAS); }
 <SCRIPT>"LD_FEATURE"			{ RTOKEN(LD_FEATURE); }
 <SCRIPT,EXPRESSION>"ORIGIN"		{ RTOKEN(ORIGIN); }
 <SCRIPT>"VERSION"			{ RTOKEN(VERSIONK); }
 <SCRIPT,EXPRESSION>"BLOCK"		{ RTOKEN(BLOCK); }
 <SCRIPT,EXPRESSION>"BIND"		{ RTOKEN(BIND); }
 <SCRIPT,EXPRESSION>"LENGTH"		{ RTOKEN(LENGTH); }
 <SCRIPT,EXPRESSION>"ALIGN"		{ RTOKEN(ALIGN_K); }
 <SCRIPT,EXPRESSION>"DATA_SEGMENT_ALIGN"	{ RTOKEN(DATA_SEGMENT_ALIGN); }
 <SCRIPT,EXPRESSION>"DATA_SEGMENT_RELRO_END" { RTOKEN(DATA_SEGMENT_RELRO_END); }
 <SCRIPT,EXPRESSION>"DATA_SEGMENT_END"	{ RTOKEN(DATA_SEGMENT_END); }
 <SCRIPT,EXPRESSION>"ADDR"		{ RTOKEN(ADDR); }
 <SCRIPT,EXPRESSION>"LOADADDR"		{ RTOKEN(LOADADDR); }
 <SCRIPT,EXPRESSION>"ALIGNOF"		{ RTOKEN(ALIGNOF); }
 <SCRIPT,EXPRESSION>"ABSOLUTE"		{ RTOKEN(ABSOLUTE); }
 <SCRIPT,EXPRESSION>"MAX"		{ RTOKEN(MAX_K); }
 <SCRIPT,EXPRESSION>"MIN"		{ RTOKEN(MIN_K); }
 <SCRIPT,EXPRESSION>"LOG2CEIL"		{ RTOKEN(LOG2CEIL); }
 <SCRIPT,EXPRESSION,WILD>"ASSERT"	{ RTOKEN(ASSERT_K); }
 <SCRIPT>"ENTRY"				{ RTOKEN(ENTRY); }
 <SCRIPT,MRI>"EXTERN"			{ RTOKEN(EXTERN); }
 <SCRIPT,EXPRESSION>"NEXT"		{ RTOKEN(NEXT); }
 <SCRIPT,EXPRESSION>"SIZEOF_HEADERS"	{ RTOKEN(SIZEOF_HEADERS); }
 <SCRIPT,EXPRESSION>"SEGMENT_START"	{ RTOKEN(SEGMENT_START); }
 <SCRIPT>"MAP"				{ RTOKEN(MAP); }
 <SCRIPT,EXPRESSION>"SIZEOF"		{ RTOKEN(SIZEOF); }
 <SCRIPT>"TARGET"			{ RTOKEN(TARGET_K); }
 <SCRIPT>"SEARCH_DIR"			{ RTOKEN(SEARCH_DIR); }
 <SCRIPT>"OUTPUT"			{ RTOKEN(OUTPUT); }
 <SCRIPT>"INPUT"				{ RTOKEN(INPUT); }
 <SCRIPT>"GROUP"				{ RTOKEN(GROUP); }
 <INPUTLIST>"AS_NEEDED"			{ RTOKEN(AS_NEEDED); }
 <SCRIPT,EXPRESSION>"DEFINED"		{ RTOKEN(DEFINED); }
 <WILD>"CREATE_OBJECT_SYMBOLS"		{ RTOKEN(CREATE_OBJECT_SYMBOLS); }
 <WILD>"CONSTRUCTORS"			{ RTOKEN(CONSTRUCTORS); }
 <SCRIPT>"FORCE_COMMON_ALLOCATION"	{ RTOKEN(FORCE_COMMON_ALLOCATION); }
 <SCRIPT>"FORCE_GROUP_ALLOCATION"	{ RTOKEN(FORCE_GROUP_ALLOCATION); }
 <SCRIPT>"INHIBIT_COMMON_ALLOCATION"	{ RTOKEN(INHIBIT_COMMON_ALLOCATION); }
 <SCRIPT>"SECTIONS"			{ RTOKEN(SECTIONS); }
 <SCRIPT>"INSERT"			{ RTOKEN(INSERT_K); }
 <SCRIPT>"AFTER"				{ RTOKEN(AFTER); }
 <SCRIPT>"BEFORE"			{ RTOKEN(BEFORE); }
 <WILD>"FILL"				{ RTOKEN(FILL); }
 <SCRIPT>"STARTUP"			{ RTOKEN(STARTUP); }
 <SCRIPT>"OUTPUT_FORMAT"			{ RTOKEN(OUTPUT_FORMAT); }
 <SCRIPT>"OUTPUT_ARCH"			{ RTOKEN(OUTPUT_ARCH); }
 <SCRIPT>"HLL"				{ RTOKEN(HLL); }
 <SCRIPT>"SYSLIB"			{ RTOKEN(SYSLIB); }
 <SCRIPT>"FLOAT"				{ RTOKEN(FLOAT); }
 <WILD>"QUAD"				{ RTOKEN(QUAD); }
 <WILD>"SQUAD"				{ RTOKEN(SQUAD); }
 <WILD>"LONG"				{ RTOKEN(LONG); }
 <WILD>"SHORT"				{ RTOKEN(SHORT); }
 <WILD>"BYTE"				{ RTOKEN(BYTE); }
 <SCRIPT>"NOFLOAT"			{ RTOKEN(NOFLOAT); }
 <SCRIPT,EXPRESSION>"NOCROSSREFS"	{ RTOKEN(NOCROSSREFS); }
 <SCRIPT,EXPRESSION>"NOCROSSREFS_TO"	{ RTOKEN(NOCROSSREFS_TO); }
 <SCRIPT,EXPRESSION>"OVERLAY"		{ RTOKEN(OVERLAY); }
 <WILD>"SORT_BY_NAME"			{ RTOKEN(SORT_BY_NAME); }
 <WILD>"SORT_BY_ALIGNMENT"		{ RTOKEN(SORT_BY_ALIGNMENT); }
 <WILD>"SORT"				{ RTOKEN(SORT_BY_NAME); }
 <WILD>"SORT_BY_INIT_PRIORITY"		{ RTOKEN(SORT_BY_INIT_PRIORITY); }
 <WILD>"SORT_NONE"			{ RTOKEN(SORT_NONE); }
 <EXPRESSION>"NOLOAD"			{ RTOKEN(NOLOAD); }
 <EXPRESSION>"READONLY"			{ RTOKEN(READONLY); }
 <EXPRESSION>"DSECT"			{ RTOKEN(DSECT); }
 <EXPRESSION>"COPY"			{ RTOKEN(COPY); }
 <EXPRESSION>"INFO"			{ RTOKEN(INFO); }
 <SCRIPT,EXPRESSION>"ONLY_IF_RO"		{ RTOKEN(ONLY_IF_RO); }
 <SCRIPT,EXPRESSION>"ONLY_IF_RW"		{ RTOKEN(ONLY_IF_RW); }
 <SCRIPT,EXPRESSION>"SPECIAL"		{ RTOKEN(SPECIAL); }
 <SCRIPT>"o"				{ RTOKEN(ORIGIN); }
 <SCRIPT>"org"				{ RTOKEN(ORIGIN); }
 <SCRIPT>"l"				{ RTOKEN(LENGTH); }
 <SCRIPT>"len"				{ RTOKEN(LENGTH); }
 <WILD>"INPUT_SECTION_FLAGS"		{ RTOKEN(INPUT_SECTION_FLAGS); }
 <SCRIPT,EXPRESSION,WILD,MRI>"INCLUDE"	{ RTOKEN(INCLUDE);}
 <SCRIPT>"PHDRS"				{ RTOKEN(PHDRS); }
 <SCRIPT,EXPRESSION,WILD>"AT"		{ RTOKEN(AT);}
 <SCRIPT,EXPRESSION>"ALIGN_WITH_INPUT"	{ RTOKEN(ALIGN_WITH_INPUT);}
 <SCRIPT,EXPRESSION>"SUBALIGN"		{ RTOKEN(SUBALIGN);}
 <SCRIPT,EXPRESSION,WILD>"HIDDEN"	{ RTOKEN(HIDDEN); }
 <SCRIPT,EXPRESSION,WILD>"PROVIDE"	{ RTOKEN(PROVIDE); }
 <SCRIPT,EXPRESSION,WILD>"PROVIDE_HIDDEN" { RTOKEN(PROVIDE_HIDDEN); }
 <WILD>"KEEP"				{ RTOKEN(KEEP); }
 <WILD>"EXCLUDE_FILE"			{ RTOKEN(EXCLUDE_FILE); }
 <SCRIPT,EXPRESSION>"CONSTANT"		{ RTOKEN(CONSTANT);}
 
 <MRI>"#".*\n?			{ ++ lineno; }
 <MRI>"\n"			{ ++ lineno;  RTOKEN(NEWLINE); }
 <MRI>"*".*			{ /* Mri comment line */ }
 <MRI>";".*			{ /* Mri comment line */ }
 <MRI>"END"			{ RTOKEN(ENDWORD); }
 <MRI>"ABSOLUTE"			{ RTOKEN(ABSOLUTE); }
 <MRI>"ALIGNMOD"			{ RTOKEN(ALIGNMOD);}
 <MRI>"ALIGN"			{ RTOKEN(ALIGN_K);}
 <MRI>"CHIP"			{ RTOKEN(CHIP); }
 <MRI>"BASE"			{ RTOKEN(BASE); }
 <MRI>"ALIAS"			{ RTOKEN(ALIAS); }
 <MRI>"TRUNCATE"			{ RTOKEN(TRUNCATE); }
 <MRI>"LOAD"			{ RTOKEN(LOAD); }
 <MRI>"PUBLIC"			{ RTOKEN(PUBLIC); }
 <MRI>"ORDER"			{ RTOKEN(ORDER); }
 <MRI>"NAME"			{ RTOKEN(NAMEWORD); }
 <MRI>"FORMAT"			{ RTOKEN(FORMAT); }
 <MRI>"CASE"			{ RTOKEN(CASE); }
 <MRI>"START"			{ RTOKEN(START); }
 <MRI>"LIST".*			{ RTOKEN(LIST); /* LIST and ignore to end of line */ }
 <MRI>"SECT"			{ RTOKEN(SECT); }
 <MRI>"end"			{ RTOKEN(ENDWORD); }
 <MRI>"absolute"			{ RTOKEN(ABSOLUTE); }
 <MRI>"alignmod"			{ RTOKEN(ALIGNMOD);}
 <MRI>"align"			{ RTOKEN(ALIGN_K);}
 <MRI>"chip"			{ RTOKEN(CHIP); }
 <MRI>"base"			{ RTOKEN(BASE); }
 <MRI>"alias"			{ RTOKEN(ALIAS); }
 <MRI>"truncate"			{ RTOKEN(TRUNCATE); }
 <MRI>"load"			{ RTOKEN(LOAD); }
 <MRI>"public"			{ RTOKEN(PUBLIC); }
 <MRI>"order"			{ RTOKEN(ORDER); }
 <MRI>"name"			{ RTOKEN(NAMEWORD); }
 <MRI>"format"			{ RTOKEN(FORMAT); }
 <MRI>"case"			{ RTOKEN(CASE); }
 <MRI>"extern"			{ RTOKEN(EXTERN); }
 <MRI>"start"			{ RTOKEN(START); }
 <MRI>"list".*			{ RTOKEN(LIST); /* LIST and ignore to end of line */ }
 <MRI>"sect"			{ RTOKEN(SECT); }
 
 <MRI>{FILENAMECHAR1}{NOCFILENAMECHAR}*	{
 /* Filename without commas, needed to parse mri stuff */
 				  yylval.name = xstrdup (yytext);
 				  return NAME;
 				}
 
 
 <SCRIPT,INPUTLIST>{FILENAMECHAR1}{FILENAMECHAR}*	{
 				  yylval.name = xstrdup (yytext);
 				  return NAME;
 				}
 <INPUTLIST>"="{FILENAMECHAR1}{FILENAMECHAR}*	{
 /* Filename to be prefixed by --sysroot or when non-sysrooted, nothing.  */
 				  yylval.name = xstrdup (yytext);
 				  return NAME;
 				}
 <INPUTLIST>"-l"{FILENAMECHAR}+ {
 				  yylval.name = xstrdup (yytext + 2);
 				  return LNAME;
 				}
 <EXPRESSION>{SYMBOLNAMECHAR1}{SYMBOLNAMECHAR}* {
 				  yylval.name = xstrdup (yytext);
 				  return NAME;
 				}
   /* The following rule is to prevent a fill expression on the output
      section before /DISCARD/ interpreting the '/' as a divide.  */
 <EXPRESSION>"/DISCARD/"		{
 				  yylval.name = xstrdup (yytext);
 				  return NAME;
 				}
 <WILD>{WILDCHAR}* {
 		/* Annoyingly, this pattern can match comments, and we have
 		   longest match issues to consider.  So if the first two
 		   characters are a comment opening, put the input back and
 		   try again.  */
 		if (yytext[0] == '/' && yytext[1] == '*')
 		  {
 		    yyless (2);
 		    comment ();
 		  }
 		else
 		  {
 		    yylval.name = xstrdup (yytext);
 		    return NAME;
 		  }
 	}
 
 <SCRIPT,EXPRESSION,WILD,VERS_NODE,INPUTLIST>"\""[^\"]*"\"" {
-					/* No matter the state, quotes
-					   give what's inside.  */
-					bfd_size_type len;
-					yylval.name = xstrdup (yytext + 1);
-					/* PR ld/20906.  A corrupt input file
-					   can contain bogus strings.  */
-					len = strlen (yylval.name);
-					if (len > (bfd_size_type) yyleng - 2)
-					  len = yyleng - 2;
-					yylval.name[len] = 0;
-					return NAME;
-				}
+		/* No matter the state, quotes give what's inside.  */
+		yylval.name = xmemdup (yytext + 1, yyleng - 2, yyleng - 1);
+		return NAME;
+	}
 
 <SCRIPT,EXPRESSION,WILD,VERS_START,VERS_NODE,VERS_SCRIPT,INPUTLIST>"\n" {
 				lineno++; }
 <MRI,SCRIPT,EXPRESSION,WILD,VERS_START,VERS_NODE,VERS_SCRIPT,INPUTLIST>[ \t\r]+ {
 				/* Eat up whitespace */ }
 <SCRIPT,EXPRESSION,WILD,VERS_START,VERS_NODE,VERS_SCRIPT>#.* {
 				/* Eat up comments */ }
 
 <VERS_NODE,VERS_SCRIPT>[:,;]	{ return *yytext; }
 
 <VERS_NODE>global		{ RTOKEN(GLOBAL); }
 
 <VERS_NODE>local		{ RTOKEN(LOCAL); }
 
 <VERS_NODE>extern		{ RTOKEN(EXTERN); }
 
 <VERS_NODE>{V_IDENTIFIER}	{ yylval.name = xstrdup (yytext);
 				  return VERS_IDENTIFIER; }
 
 <VERS_SCRIPT>{V_TAG}		{ yylval.name = xstrdup (yytext);
 				  return VERS_TAG; }
 
 <VERS_START>"{"			{ BEGIN(VERS_SCRIPT); return *yytext; }
 
 <VERS_SCRIPT>"{"		{ BEGIN(VERS_NODE);
 				  vers_node_nesting = 0;
 				  return *yytext;
 				}
 <VERS_SCRIPT>"}"		{ return *yytext; }
 <VERS_NODE>"{"			{ vers_node_nesting++; return *yytext; }
 <VERS_NODE>"}"			{ if (--vers_node_nesting < 0)
 				    BEGIN(VERS_SCRIPT);
 				  return *yytext;
 				}
 
 <<EOF>> {
   include_stack_ptr--;
   if (include_stack_ptr == 0)
     {
       lineno = 0;
       yyterminate ();
     }
   else
     yy_switch_to_buffer (include_stack[include_stack_ptr]);
 
   lineno = lineno_stack[include_stack_ptr];
   input_flags.sysrooted = sysrooted_stack[include_stack_ptr];
 
   return END;
 }
 
 <SCRIPT,WILD,MRI,VERS_START,VERS_SCRIPT,VERS_NODE>.	lex_warn_invalid (" in script", yytext);
 <EXPRESSION>.	lex_warn_invalid (" in expression", yytext);
 
 %%
 
 
 /* Switch flex to reading script file NAME, open on FILE,
    saving the current input info on the include stack.  */
