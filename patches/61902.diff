commit 112fe0d0dba0531cf540eaeefc21397982ad47da
Author: Akshay Ragir <akshay.ragir@ittiam.com>
Date:   Fri Sep 1 20:10:04 2023 +0530

    Fix for the Global-buffer-overflow READ 4 in iusace_estimate_scfs_chan
    
    These changes handle the Global-buffer-overflow runtime error
    reported when the value of scalefactor band form factor
    becomes zero. This is resolved by making it closer to zero
    instead of absolute zero.
    
    Bug: ossFuzz:61902
    Test: poc in bug

diff --git a/encoder/ixheaace_fd_qc_adjthr.c b/encoder/ixheaace_fd_qc_adjthr.c
index af53704..320c32a 100644
--- a/encoder/ixheaace_fd_qc_adjthr.c
+++ b/encoder/ixheaace_fd_qc_adjthr.c
@@ -1,53 +1,54 @@
 /******************************************************************************
  *                                                                            *
  * Copyright (C) 2023 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  *****************************************************************************
  * Originally developed and contributed by Ittiam Systems Pvt. Ltd, Bangalore
  */
 
 #include <string.h>
 #include <math.h>
 #include <stdlib.h>
 #include <limits.h>
+#include <float.h>
 #include "iusace_type_def.h"
 #include "ixheaac_error_standards.h"
 #include "ixheaace_error_codes.h"
 #include "ixheaace_psy_const.h"
 #include "ixheaace_tns.h"
 #include "ixheaace_tns_params.h"
 #include "ixheaace_rom.h"
 #include "iusace_block_switch_const.h"
 #include "iusace_cnst.h"
 #include "iusace_rom.h"
 #include "ixheaace_mps_common_define.h"
 #include "iusace_bitbuffer.h"
 #include "impd_drc_common_enc.h"
 #include "impd_drc_uni_drc.h"
 #include "impd_drc_api.h"
 #include "impd_drc_uni_drc_eq.h"
 #include "impd_drc_uni_drc_filter_bank.h"
 #include "impd_drc_gain_enc.h"
 #include "impd_drc_struct_def.h"
 
 #include "ixheaace_memory_standards.h"
 #include "iusace_tns_usac.h"
 #include "iusace_psy_mod.h"
 #include "iusace_config.h"
 #include "ixheaace_adjust_threshold_data.h"
 #include "iusace_fd_qc_util.h"
 #include "iusace_fd_qc_adjthr.h"
 #include "ixheaace_aac_constants.h"
 #include "ixheaace_sbr_def.h"
@@ -1549,156 +1550,156 @@ static VOID iusace_assimilate_multiple_scf(ia_psy_mod_out_data_struct *pstr_psy_
 VOID iusace_estimate_scfs_chan(ia_psy_mod_out_data_struct *pstr_psy_out,
                                ia_qc_out_chan_struct *str_qc_out_chan, WORD32 num_channels,
                                WORD32 chn, iusace_scratch_mem *pstr_scratch) {
   WORD16 *ptr_scalefactor;
   WORD32 *global_gain;
   FLOAT32 *p_sfb_form_factor;
   FLOAT32 *p_sfb_num_relevant_lines;
   WORD16 *ptr_quant_spec;
   WORD32 i, ch, j, idx = 0;
   FLOAT32 thresh, energy, energy_part, thr_part;
   FLOAT32 scf_float;
   WORD16 scf_int = 0, min_scf = 0, max_scf = 0;
   FLOAT64 max_spec = 0.0f;
   WORD16 min_sf_max_quant[MAX_NUM_GROUPED_SFB] = {0};
   pUWORD8 ptr_scratch = pstr_scratch->ptr_fd_scratch;
   FLOAT32 *ptr_sfb_dist = (FLOAT32 *)ptr_scratch;
   ptr_scratch += MAX_NUM_GROUPED_SFB * sizeof(ptr_sfb_dist[0]);
   WORD16 min_calc_scf[MAX_NUM_GROUPED_SFB] = {0};
 
   WORD16 *ptr_quant_spec_temp = pstr_scratch->p_adjthr_quant_spec_temp;
   FLOAT32 *ptr_exp_spec = pstr_scratch->p_adjthr_ptr_exp_spec;
   FLOAT32 *ptr_mdct_spec_float = pstr_scratch->p_adjthr_mdct_spec_float;
   FLOAT32 *sfb_const_pe_part = (FLOAT32 *)ptr_scratch;
 
   FLOAT32 **ptr_sfb_form_factor = &pstr_scratch->ptr_sfb_form_fac[0];
   FLOAT32 **ptr_sfb_num_relevant_lines = &pstr_scratch->ptr_sfb_num_relevant_lines[0];
 
   ptr_scratch += MAX_NUM_GROUPED_SFB * sizeof(sfb_const_pe_part[0]);
 
   memset(ptr_quant_spec_temp, 0, FRAME_LEN_LONG * sizeof(WORD16));
   memset(ptr_mdct_spec_float, 0, FRAME_LEN_LONG * sizeof(FLOAT32));
   memset(ptr_exp_spec, 0, FRAME_LEN_LONG * sizeof(FLOAT32));
   memset(ptr_sfb_dist, 0, MAX_NUM_GROUPED_SFB * sizeof(FLOAT32));
   for (ch = chn; ch < chn + num_channels; ch++) {
     ia_psy_mod_out_data_struct *ptr_psy_out = &pstr_psy_out[ch];
     str_qc_out_chan[idx].global_gain = 0;
 
     memset(str_qc_out_chan[idx].scalefactor, 0,
            sizeof(str_qc_out_chan[idx].scalefactor[0]) * pstr_psy_out[ch].sfb_count);
     memset(str_qc_out_chan[idx].quant_spec, 0,
            sizeof(str_qc_out_chan[idx].quant_spec[0]) * FRAME_LEN_LONG);
 
     ptr_scalefactor = str_qc_out_chan[idx].scalefactor;
     global_gain = &str_qc_out_chan[idx].global_gain;
     p_sfb_form_factor = &ptr_sfb_form_factor[idx][0];
     p_sfb_num_relevant_lines = &ptr_sfb_num_relevant_lines[idx][0];
     ptr_quant_spec = str_qc_out_chan[idx].quant_spec;
     for (i = 0; i < ptr_psy_out->sfb_count; i++) {
       thresh = ptr_psy_out->ptr_sfb_thr[i];
       energy = ptr_psy_out->ptr_sfb_energy[i];
       max_spec = 0.0;
 
       for (j = ptr_psy_out->sfb_offsets[i]; j < ptr_psy_out->sfb_offsets[i + 1]; j++) {
         max_spec = MAX(max_spec, fabs(ptr_psy_out->ptr_spec_coeffs[j]));
       }
 
       ptr_scalefactor[i] = MIN_SHRT_VAL;
       min_sf_max_quant[i] = MIN_SHRT_VAL;
 
       if ((max_spec > 0.0) && (energy > thresh) && (p_sfb_form_factor[i] != MIN_FLT_VAL)) {
-        energy_part = (FLOAT32)log10(p_sfb_form_factor[i]);
+        energy_part = (FLOAT32)log10(p_sfb_form_factor[i] + FLT_EPSILON);
 
         thr_part = (FLOAT32)log10(6.75 * thresh + MIN_FLT_VAL);
         scf_float = 8.8585f * (thr_part - energy_part);
         scf_int = (WORD16)floor(scf_float);
         min_sf_max_quant[i] = (WORD16)ceil(C1_SF + C2_SF * log(max_spec));
         scf_int = MAX(scf_int, min_sf_max_quant[i]);
 
         for (j = 0; j < ptr_psy_out->sfb_offsets[i + 1] - ptr_psy_out->sfb_offsets[i]; j++) {
           ptr_exp_spec[ptr_psy_out->sfb_offsets[i] + j] =
               (FLOAT32)(ptr_psy_out->ptr_spec_coeffs[ptr_psy_out->sfb_offsets[i] + j]);
           ptr_mdct_spec_float[ptr_psy_out->sfb_offsets[i] + j] =
               (FLOAT32)(ptr_psy_out->ptr_spec_coeffs[ptr_psy_out->sfb_offsets[i] + j]);
         }
 
         iusace_calculate_exp_spec(ptr_psy_out->sfb_offsets[i + 1] - ptr_psy_out->sfb_offsets[i],
                                   ptr_exp_spec + ptr_psy_out->sfb_offsets[i],
                                   ptr_mdct_spec_float + ptr_psy_out->sfb_offsets[i]);
 
         scf_int = iusace_improve_scf(
             ptr_mdct_spec_float + ptr_psy_out->sfb_offsets[i],
             ptr_exp_spec + ptr_psy_out->sfb_offsets[i],
             ptr_quant_spec + ptr_psy_out->sfb_offsets[i],
             ptr_quant_spec_temp + ptr_psy_out->sfb_offsets[i],
             ptr_psy_out->sfb_offsets[i + 1] - ptr_psy_out->sfb_offsets[i], thresh, scf_int,
             min_sf_max_quant[i], &ptr_sfb_dist[i], &min_calc_scf[i]);
 
         ptr_scalefactor[i] = scf_int;
       }
     }
 
     for (i = 0; i < ptr_psy_out->sfb_count; i++) {
       sfb_const_pe_part[i] = MIN_FLT_VAL;
     }
 
     iusace_assimilate_single_scf(ptr_psy_out, ptr_exp_spec, ptr_quant_spec, ptr_quant_spec_temp,
                                  ptr_scalefactor, min_sf_max_quant, ptr_sfb_dist,
                                  sfb_const_pe_part, p_sfb_form_factor, p_sfb_num_relevant_lines,
                                  min_calc_scf, ptr_mdct_spec_float);
 
     iusace_assimilate_multiple_scf(ptr_psy_out, ptr_exp_spec, ptr_quant_spec, ptr_quant_spec_temp,
                                    ptr_scalefactor, min_sf_max_quant, ptr_sfb_dist,
                                    sfb_const_pe_part, p_sfb_form_factor, p_sfb_num_relevant_lines,
                                    ptr_mdct_spec_float, ptr_scratch);
 
     max_scf = MIN_SHRT_VAL;
     min_scf = MAX_SHRT_VAL;
     for (i = 0; i < ptr_psy_out->sfb_count; i++) {
       if (max_scf < ptr_scalefactor[i]) {
         max_scf = ptr_scalefactor[i];
       }
       if ((ptr_scalefactor[i] != MIN_SHRT_VAL) && (min_scf > ptr_scalefactor[i])) {
         min_scf = ptr_scalefactor[i];
       }
     }
 
     for (i = 0; i < pstr_psy_out[ch].sfb_count; i++) {
       if ((ptr_scalefactor[i] != MIN_SHRT_VAL) &&
           (min_scf + MAX_SCF_DELTA) < ptr_scalefactor[i]) {
         ptr_scalefactor[i] = min_scf + MAX_SCF_DELTA;
 
         iusace_calc_sfb_dist(ptr_mdct_spec_float + ptr_psy_out->sfb_offsets[i],
                              ptr_exp_spec + ptr_psy_out->sfb_offsets[i],
                              ptr_quant_spec + ptr_psy_out->sfb_offsets[i],
                              ptr_psy_out->sfb_offsets[i + 1] - ptr_psy_out->sfb_offsets[i],
                              ptr_scalefactor[i]);
       }
     }
 
     max_scf = MIN((min_scf + MAX_SCF_DELTA), max_scf);
 
     if (max_scf > MIN_SHRT_VAL) {
       *global_gain = max_scf;
       for (i = 0; i < ptr_psy_out->sfb_count; i++) {
         if (ptr_scalefactor[i] == MIN_SHRT_VAL) {
           ptr_scalefactor[i] = 0;
           memset(
               &ptr_psy_out->ptr_spec_coeffs[ptr_psy_out->sfb_offsets[i]], 0,
               (ptr_psy_out->sfb_offsets[i + 1] - ptr_psy_out->sfb_offsets[i]) * sizeof(FLOAT64));
         } else {
           ptr_scalefactor[i] = max_scf - ptr_scalefactor[i];
         }
       }
     } else {
       *global_gain = 0;
       for (i = 0; i < ptr_psy_out->sfb_count; i++) {
         ptr_scalefactor[i] = 0;
         memset(&ptr_psy_out->ptr_spec_coeffs[ptr_psy_out->sfb_offsets[i]], 0,
                (ptr_psy_out->sfb_offsets[i + 1] - ptr_psy_out->sfb_offsets[i]) * sizeof(FLOAT64));
       }
     }
     idx++;
   }
 
   return;
 }
