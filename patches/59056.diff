commit 5c45cdc0adb50e3b169cada0ea5ce0126d04184a
Author: Alex <aleksandrosansan@gmail.com>
Date:   Wed Aug 16 07:45:23 2023 +0000

    Fix Invalid-free in Assimp::FBX::Scope::Scope

diff --git a/code/AssetLib/FBX/FBXParser.cpp b/code/AssetLib/FBX/FBXParser.cpp
index c7b579665..955e811cb 100644
--- a/code/AssetLib/FBX/FBXParser.cpp
+++ b/code/AssetLib/FBX/FBXParser.cpp
@@ -179,44 +179,44 @@ Element::~Element()
 Scope::Scope(Parser& parser,bool topLevel)
 {
     if(!topLevel) {
         TokenPtr t = parser.CurrentToken();
         if (t->Type() != TokenType_OPEN_BRACKET) {
             ParseError("expected open bracket",t);
         }
     }
 
     StackAllocator &allocator = parser.GetAllocator();
     TokenPtr n = parser.AdvanceToNextToken();
     if (n == nullptr) {
         ParseError("unexpected end of file");
     }
 
     // note: empty scopes are allowed
     while(n->Type() != TokenType_CLOSE_BRACKET) {
         if (n->Type() != TokenType_KEY) {
             ParseError("unexpected token, expected TOK_KEY",n);
         }
 
         const std::string& str = n->StringContents();
         if (str.empty()) {
             ParseError("unexpected content: empty string.");
         }
 
         auto *element = new_Element(*n, parser);
 
         // Element() should stop at the next Key token (or right after a Close token)
         n = parser.CurrentToken();
         if (n == nullptr) {
             if (topLevel) {
                 elements.insert(ElementMap::value_type(str, element));
                 return;
             }
-            delete element;
+            delete_Element(element);
             ParseError("unexpected end of file",parser.LastToken());
         } else {
             elements.insert(ElementMap::value_type(str, element));
         }
     }
 }
 
 // ------------------------------------------------------------------------------------------------
