commit 8d98c51d133b058a845ed7a84bfe8a43083bbb03
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Sat Nov 3 15:14:57 2018 -0400

    [kern] Third try fix access violation in Format3
    
    Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=11245

diff --git a/src/hb-ot-kern-table.hh b/src/hb-ot-kern-table.hh
index b0ed4399b..e361330b0 100644
--- a/src/hb-ot-kern-table.hh
+++ b/src/hb-ot-kern-table.hh
@@ -411,64 +411,63 @@ struct KernSubTableFormat2
 struct KernSubTableFormat3
 {
   inline int get_kerning (hb_codepoint_t left, hb_codepoint_t right) const
   {
     hb_array_t<const FWORD> kernValue = kernValueZ.as_array (kernValueCount);
     hb_array_t<const HBUINT8> leftClass = StructAfter<const UnsizedArrayOf<HBUINT8> > (kernValue).as_array (glyphCount);
     hb_array_t<const HBUINT8> rightClass = StructAfter<const UnsizedArrayOf<HBUINT8> > (leftClass).as_array (glyphCount);
     hb_array_t<const HBUINT8> kernIndex = StructAfter<const UnsizedArrayOf<HBUINT8> > (rightClass).as_array (leftClassCount * rightClassCount);
 
     unsigned int leftC = leftClass[left];
     unsigned int rightC = rightClass[right];
     if (unlikely (leftC >= leftClassCount || rightC >= rightClassCount))
       return 0;
     unsigned int i = leftC * rightClassCount + rightC;
     return kernValue[kernIndex[i]];
   }
 
   inline bool apply (AAT::hb_aat_apply_context_t *c) const
   {
     TRACE_APPLY (this);
 
     if (!c->plan->requested_kerning)
       return false;
 
     hb_kern_machine_t<KernSubTableFormat3> machine (*this);
     machine.kern (c->font, c->buffer, c->plan->kern_mask);
 
     return_trace (true);
   }
 
   inline bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
-    return_trace (true); /* Disabled.  See above. */
     return_trace (c->check_struct (this) &&
 		  c->check_range (kernValueZ,
 				  kernValueCount * sizeof (FWORD) +
 				  glyphCount * 2 +
 				  leftClassCount * rightClassCount));
   }
 
   protected:
   HBUINT16	glyphCount;	/* The number of glyphs in this font. */
   HBUINT8	kernValueCount;	/* The number of kerning values. */
   HBUINT8	leftClassCount;	/* The number of left-hand classes. */
   HBUINT8	rightClassCount;/* The number of right-hand classes. */
   HBUINT8	flags;		/* Set to zero (reserved for future use). */
   UnsizedArrayOf<FWORD>
 		kernValueZ;	/* The kerning values.
 				 * Length kernValueCount. */
 #if 0
   UnsizedArrayOf<HBUINT8>
 		leftClass;	/* The left-hand classes.
 				 * Length glyphCount. */
   UnsizedArrayOf<HBUINT8>
 		RightClass;	/* The right-hand classes.
 				 * Length glyphCount. */
   UnsizedArrayOf<HBUINT8>
 		kernIndex;	/* The indices into the kernValue array.
 				 * Length leftClassCount * rightClassCount */
 #endif
   public:
   DEFINE_SIZE_ARRAY (6, kernValueZ);
 };
