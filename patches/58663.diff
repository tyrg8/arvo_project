commit cda646a598207642721b753ef5abcebb2525f61b
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Fri May 5 15:57:13 2023 -0600

    [subset-plan] Check success of all object members

diff --git a/src/hb-subset-plan-member-list.hh b/src/hb-subset-plan-member-list.hh
index 728c66e2f..478c3d1c8 100644
--- a/src/hb-subset-plan-member-list.hh
+++ b/src/hb-subset-plan-member-list.hh
@@ -111,14 +111,14 @@ HB_SUBSET_PLAN_MEMBER (hb_map_t, axes_index_map)
 HB_SUBSET_PLAN_MEMBER (hb_map_t, axes_old_index_tag_map)
 
 //hmtx metrics map: new gid->(advance, lsb)
-mutable HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<hb_codepoint_t, hb_pair_t E(<unsigned, int>)>), hmtx_map)
+HB_SUBSET_PLAN_MEMBER (mutable hb_hashmap_t E(<hb_codepoint_t, hb_pair_t E(<unsigned, int>)>), hmtx_map)
 //vmtx metrics map: new gid->(advance, lsb)
-mutable HB_SUBSET_PLAN_MEMBER (hb_hashmap_t E(<hb_codepoint_t, hb_pair_t E(<unsigned, int>)>), vmtx_map)
+HB_SUBSET_PLAN_MEMBER (mutable hb_hashmap_t E(<hb_codepoint_t, hb_pair_t E(<unsigned, int>)>), vmtx_map)
 //boundsWidth map: new gid->boundsWidth, boundWidth=xMax - xMin
-mutable HB_SUBSET_PLAN_MEMBER (hb_map_t, bounds_width_map)
+HB_SUBSET_PLAN_MEMBER (mutable hb_map_t, bounds_width_map)
 //boundsHeight map: new gid->boundsHeight, boundsHeight=yMax - yMin
-mutable HB_SUBSET_PLAN_MEMBER (hb_map_t, bounds_height_map)
+HB_SUBSET_PLAN_MEMBER (mutable hb_map_t, bounds_height_map)
 
 #ifdef HB_EXPERIMENTAL_API
 // name table overrides map: hb_ot_name_record_ids_t-> name string new value or
 // None to indicate should remove
diff --git a/src/hb-subset-plan.cc b/src/hb-subset-plan.cc
index 3e5033779..013f9ccc4 100644
--- a/src/hb-subset-plan.cc
+++ b/src/hb-subset-plan.cc
@@ -949,124 +949,128 @@ _update_instance_metrics_map_from_cff2 (hb_subset_plan_t *plan)
 hb_subset_plan_t::hb_subset_plan_t (hb_face_t *face,
 				    const hb_subset_input_t *input)
 {
   successful = true;
   flags = input->flags;
 
   unicode_to_new_gid_list.init ();
 
   name_ids = *input->sets.name_ids;
   name_languages = *input->sets.name_languages;
   layout_features = *input->sets.layout_features;
   layout_scripts = *input->sets.layout_scripts;
   glyphs_requested = *input->sets.glyphs;
   drop_tables = *input->sets.drop_tables;
   no_subset_tables = *input->sets.no_subset_tables;
   source = hb_face_reference (face);
   dest = hb_face_builder_create ();
 
   codepoint_to_glyph = hb_map_create ();
   glyph_map = hb_map_create ();
   reverse_glyph_map = hb_map_create ();
 
   gdef_varstore_inner_maps.init ();
 
   user_axes_location = input->axes_location;
   all_axes_pinned = false;
   pinned_at_default = true;
 
 #ifdef HB_EXPERIMENTAL_API
   for (auto _ : input->name_table_overrides)
   {
     hb_bytes_t name_bytes = _.second;
     unsigned len = name_bytes.length;
     char *name_str = (char *) hb_malloc (len);
     if (unlikely (!check_success (name_str)))
       break;
 
     hb_memcpy (name_str, name_bytes.arrayZ, len);
     name_table_overrides.set (_.first, hb_bytes_t (name_str, len));
   }
 #endif
 
   void* accel = hb_face_get_user_data(face, hb_subset_accelerator_t::user_data_key());
 
   attach_accelerator_data = input->attach_accelerator_data;
   force_long_loca = input->force_long_loca;
   if (accel)
     accelerator = (hb_subset_accelerator_t*) accel;
 
   if (unlikely (in_error ()))
     return;
 
 #ifndef HB_NO_VAR
   _normalize_axes_location (face, this);
 #endif
 
   _populate_unicodes_to_retain (input->sets.unicodes, input->sets.glyphs, this);
 
   _populate_gids_to_retain (this, input->sets.drop_tables);
   if (unlikely (in_error ()))
     return;
 
   _create_old_gid_to_new_gid_map (face,
                                   input->flags & HB_SUBSET_FLAGS_RETAIN_GIDS,
 				  &_glyphset,
 				  glyph_map,
 				  reverse_glyph_map,
 				  &_num_output_glyphs);
 
   _create_glyph_map_gsub (
       &_glyphset_gsub,
       glyph_map,
       &glyph_map_gsub);
 
   // Now that we have old to new gid map update the unicode to new gid list.
   for (unsigned i = 0; i < unicode_to_new_gid_list.length; i++)
   {
     // Use raw array access for performance.
     unicode_to_new_gid_list.arrayZ[i].second =
         glyph_map->get(unicode_to_new_gid_list.arrayZ[i].second);
   }
 
   if (unlikely (in_error ()))
     return;
 
 #ifndef HB_NO_VAR
   _update_instance_metrics_map_from_cff2 (this);
 #endif
 
   if (attach_accelerator_data)
   {
     hb_multimap_t gid_to_unicodes;
 
     hb_map_t &unicode_to_gid = *codepoint_to_glyph;
 
     for (auto unicode : unicodes)
     {
       auto gid = unicode_to_gid[unicode];
       gid_to_unicodes.add (gid, unicode);
     }
 
     inprogress_accelerator =
       hb_subset_accelerator_t::create (*codepoint_to_glyph,
 				       gid_to_unicodes,
                                        unicodes,
 				       has_seac);
   }
+
+#define HB_SUBSET_PLAN_MEMBER(Type, Name) check_success (!Name.in_error ());
+#include "hb-subset-plan-member-list.hh"
+#undef HB_SUBSET_PLAN_MEMBER
 }
 
 /**
  * hb_subset_plan_create_or_fail:
  * @face: font face to create the plan for.
  * @input: a #hb_subset_input_t input.
  *
  * Computes a plan for subsetting the supplied face according
  * to a provided input. The plan describes
  * which tables and glyphs should be retained.
  *
  * Return value: (transfer full): New subset plan. Destroy with
  * hb_subset_plan_destroy(). If there is a failure creating the plan
  * nullptr will be returned.
  *
  * Since: 4.0.0
  **/
