commit b1e3c5970dbf6ef329b5b146ae03158824e201fb
Author: Dan Bloomberg <dan.bloomberg@gmail.com>
Date:   Mon May 11 15:57:40 2020 -0700

    Attempted to fix issue 22143: in oss-fuzz:  Null deference READ
    * check result of colormap removal; otherwise, failure would cause a crash

diff --git a/src/colorcontent.c b/src/colorcontent.c
index 4a49b92..cdd7ba4 100644
--- a/src/colorcontent.c
+++ b/src/colorcontent.c
@@ -696,69 +696,73 @@ PIX       *pixc, *pixd;
 PIXCMAP   *cmap;
 
     PROCNAME("pixMaskOverColorPixels");
 
     if (!pixs)
         return (PIX *)ERROR_PTR("pixs not defined", procName, NULL);
     pixGetDimensions(pixs, &w, &h, &d);
 
     cmap = pixGetColormap(pixs);
     if (!cmap && d != 32)
         return (PIX *)ERROR_PTR("pixs not cmapped or 32 bpp", procName, NULL);
     if (cmap)
         pixc = pixRemoveColormap(pixs, REMOVE_CMAP_TO_FULL_COLOR);
     else
         pixc = pixClone(pixs);
+    if (!pixc || pixGetDepth(pixc) != 32) {
+        pixDestroy(&pixc);
+        return (PIX *)ERROR_PTR("rgb pix not made", procName, NULL);
+    }
 
     pixd = pixCreate(w, h, 1);
     datad = pixGetData(pixd);
     wpld = pixGetWpl(pixd);
     datas = pixGetData(pixc);
     wpls = pixGetWpl(pixc);
     for (i = 0; i < h; i++) {
         lines = datas + i * wpls;
         lined = datad + i * wpld;
         for (j = 0; j < w; j++) {
             extractRGBValues(lines[j], &rval, &gval, &bval);
             minval = L_MIN(rval, gval);
             minval = L_MIN(minval, bval);
             maxval = L_MAX(rval, gval);
             maxval = L_MAX(maxval, bval);
             if (maxval - minval >= threshdiff)
                 SET_DATA_BIT(lined, j);
         }
     }
 
     if (mindist > 1) {
         size = 2 * (mindist - 1) + 1;
         pixErodeBrick(pixd, pixd, size, size);
     }
 
     pixDestroy(&pixc);
     return pixd;
 }
 
 
 /* ----------------------------------------------------------------------- *
  *          Generate a mask over dark pixels with little color             *
  * ----------------------------------------------------------------------- */
 /*!
  * \brief   pixMaskOverGrayPixels()
  *
  * \param[in]    pixs      32 bpp rgb
  * \param[in]    maxlimit  only consider pixels with max component <= %maxlimit
  * \param[in]    satlimit  only consider pixels with saturation <= %satlimit
  * \return  pixd (1 bpp), or NULL on error
  *
  * <pre>
  * Notes:
  *      (1) This generates a mask over rgb pixels that are gray (i.e.,
  *          have low saturation) and are not too bright.  For example, if
  *          we know that the gray pixels in %pixs have saturation
  *          (max - min) less than 10, and brightness (max) less than 200,
  *             pixMaskOverGrayPixels(pixs, 220, 10)
  *          will generate a mask over the gray pixels.  Other pixels that
  *          are not too dark and have a relatively large saturation will
  *          be little affected.
  *      (2) The algorithm is related to pixDarkenGray().
  * </pre>
  */
