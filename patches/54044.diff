commit 22b0390e2dcefcf737d70f8d965d99b902831a29
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Mon Dec 5 09:43:36 2022 -0700

    Revert "[VarData] Don't clear memory we are going to fill in completely"
    
    This reverts commit e28e2dad03a453c5e5c4c5a9d6fd276182c5f80b.
    
    This made fuzzer unhappy. I'm not sure how.
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=54044

diff --git a/src/hb-ot-layout-common.hh b/src/hb-ot-layout-common.hh
index f94c3a5d3..571c812e4 100644
--- a/src/hb-ot-layout-common.hh
+++ b/src/hb-ot-layout-common.hh
@@ -2390,277 +2390,277 @@ struct VarRegionList
 struct VarData
 {
   unsigned int get_region_index_count () const
   { return regionIndices.len; }
 
   unsigned int get_row_size () const
   { return (wordCount () + regionIndices.len) * (longWords () ? 2 : 1); }
 
   unsigned int get_size () const
   { return min_size
 	 - regionIndices.min_size + regionIndices.get_size ()
 	 + itemCount * get_row_size ();
   }
 
   float get_delta (unsigned int inner,
 		   const int *coords, unsigned int coord_count,
 		   const VarRegionList &regions,
 		   VarRegionList::cache_t *cache = nullptr) const
   {
     if (unlikely (inner >= itemCount))
       return 0.;
 
    unsigned int count = regionIndices.len;
    bool is_long = longWords ();
    unsigned word_count = wordCount ();
    unsigned int scount = is_long ? count : word_count;
    unsigned int lcount = is_long ? word_count : 0;
 
    const HBUINT8 *bytes = get_delta_bytes ();
    const HBUINT8 *row = bytes + inner * get_row_size ();
 
    float delta = 0.;
    unsigned int i = 0;
 
    const HBINT32 *lcursor = reinterpret_cast<const HBINT32 *> (row);
    for (; i < lcount; i++)
    {
      float scalar = regions.evaluate (regionIndices.arrayZ[i], coords, coord_count, cache);
      delta += scalar * *lcursor++;
    }
    const HBINT16 *scursor = reinterpret_cast<const HBINT16 *> (lcursor);
    for (; i < scount; i++)
    {
      float scalar = regions.evaluate (regionIndices.arrayZ[i], coords, coord_count, cache);
      delta += scalar * *scursor++;
    }
    const HBINT8 *bcursor = reinterpret_cast<const HBINT8 *> (scursor);
    for (; i < count; i++)
    {
      float scalar = regions.evaluate (regionIndices.arrayZ[i], coords, coord_count, cache);
      delta += scalar * *bcursor++;
    }
 
    return delta;
   }
 
   void get_region_scalars (const int *coords, unsigned int coord_count,
 			   const VarRegionList &regions,
 			   float *scalars /*OUT */,
 			   unsigned int num_scalars) const
   {
     unsigned count = hb_min (num_scalars, regionIndices.len);
     for (unsigned int i = 0; i < count; i++)
       scalars[i] = regions.evaluate (regionIndices.arrayZ[i], coords, coord_count);
     for (unsigned int i = count; i < num_scalars; i++)
       scalars[i] = 0.f;
   }
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (c->check_struct (this) &&
 		  regionIndices.sanitize (c) &&
 		  wordCount () <= regionIndices.len &&
 		  c->check_range (get_delta_bytes (),
 				  itemCount,
 				  get_row_size ()));
   }
 
   bool serialize (hb_serialize_context_t *c,
 		  const VarData *src,
 		  const hb_inc_bimap_t &inner_map,
 		  const hb_bimap_t &region_map)
   {
     TRACE_SERIALIZE (this);
     if (unlikely (!c->extend_min (this))) return_trace (false);
     itemCount = inner_map.get_next_value ();
 
     /* Optimize word count */
     unsigned ri_count = src->regionIndices.len;
     enum delta_size_t { kZero=0, kNonWord, kWord };
     hb_vector_t<delta_size_t> delta_sz;
     hb_vector_t<unsigned int> ri_map;	/* maps new index to old index */
     delta_sz.resize (ri_count);
     ri_map.resize (ri_count);
     unsigned int new_word_count = 0;
     unsigned int r;
 
     const HBUINT8 *src_delta_bytes = src->get_delta_bytes ();
     unsigned src_row_size = src->get_row_size ();
     unsigned src_word_count = src->wordCount ();
     unsigned src_long_words = src->longWords ();
 
     bool has_long = false;
     if (src_long_words)
     {
       for (r = 0; r < src_word_count; r++)
       {
 	for (unsigned int i = 0; i < inner_map.get_next_value (); i++)
 	{
 	  unsigned int old = inner_map.backward (i);
 	  int32_t delta = src->get_item_delta_fast (old, r, src_delta_bytes, src_row_size);
 	  if (delta < -65536 || 65535 < delta)
 	  {
 	    has_long = true;
 	    break;
 	  }
         }
       }
     }
 
     signed min_threshold = has_long ? -65536 : -128;
     signed max_threshold = has_long ? +65535 : +127;
     for (r = 0; r < ri_count; r++)
     {
       bool short_circuit = src_long_words == has_long && src_word_count <= r;
 
       delta_sz[r] = kZero;
       for (unsigned int i = 0; i < inner_map.get_next_value (); i++)
       {
 	unsigned int old = inner_map.backward (i);
 	int32_t delta = src->get_item_delta_fast (old, r, src_delta_bytes, src_row_size);
 	if (delta < min_threshold || max_threshold < delta)
 	{
 	  delta_sz[r] = kWord;
 	  new_word_count++;
 	  break;
 	}
 	else if (delta != 0)
 	{
 	  delta_sz[r] = kNonWord;
 	  if (short_circuit)
 	    break;
 	}
       }
     }
 
     unsigned int word_index = 0;
     unsigned int non_word_index = new_word_count;
     unsigned int new_ri_count = 0;
     for (r = 0; r < ri_count; r++)
       if (delta_sz[r])
       {
 	unsigned new_r = (delta_sz[r] == kWord)? word_index++ : non_word_index++;
 	ri_map[new_r] = r;
 	new_ri_count++;
       }
 
     wordSizeCount = new_word_count | (has_long ? 0x8000u /* LONG_WORDS */ : 0);
 
     regionIndices.len = new_ri_count;
 
-    if (unlikely (!c->extend_size (this, get_size (), false))) return_trace (false);
+    if (unlikely (!c->extend (this))) return_trace (false);
 
     for (r = 0; r < new_ri_count; r++)
       regionIndices[r] = region_map[src->regionIndices[ri_map[r]]];
 
     HBUINT8 *delta_bytes = get_delta_bytes ();
     unsigned row_size = get_row_size ();
     unsigned count = itemCount;
     for (unsigned int i = 0; i < count; i++)
     {
       unsigned int old = inner_map.backward (i);
       for (unsigned int r = 0; r < new_ri_count; r++)
 	set_item_delta_fast (i, r,
 			     src->get_item_delta_fast (old, ri_map[r],
 						       src_delta_bytes, src_row_size),
 			     delta_bytes, row_size);
     }
 
     return_trace (true);
   }
 
   void collect_region_refs (hb_set_t &region_indices, const hb_inc_bimap_t &inner_map) const
   {
     const HBUINT8 *delta_bytes = get_delta_bytes ();
     unsigned row_size = get_row_size ();
 
     for (unsigned int r = 0; r < regionIndices.len; r++)
     {
       unsigned int region = regionIndices.arrayZ[r];
       if (region_indices.has (region)) continue;
       for (unsigned int i = 0; i < inner_map.get_next_value (); i++)
 	if (get_item_delta_fast (inner_map.backward (i), r, delta_bytes, row_size) != 0)
 	{
 	  region_indices.add (region);
 	  break;
 	}
     }
   }
 
   protected:
   const HBUINT8 *get_delta_bytes () const
   { return &StructAfter<HBUINT8> (regionIndices); }
 
   HBUINT8 *get_delta_bytes ()
   { return &StructAfter<HBUINT8> (regionIndices); }
 
   int32_t get_item_delta_fast (unsigned int item, unsigned int region,
 			       const HBUINT8 *delta_bytes, unsigned row_size) const
   {
     if (unlikely (item >= itemCount || region >= regionIndices.len)) return 0;
 
     const HBINT8 *p = (const HBINT8 *) delta_bytes + item * row_size;
     unsigned word_count = wordCount ();
     bool is_long = longWords ();
     if (is_long)
     {
       if (region < word_count)
 	return ((const HBINT32 *) p)[region];
       else
 	return ((const HBINT16 *)(p + HBINT32::static_size * word_count))[region - word_count];
     }
     else
     {
       if (region < word_count)
 	return ((const HBINT16 *) p)[region];
       else
 	return (p + HBINT16::static_size * word_count)[region - word_count];
     }
   }
   int32_t get_item_delta (unsigned int item, unsigned int region) const
   {
      return get_item_delta_fast (item, region,
 				 get_delta_bytes (),
 				 get_row_size ());
   }
 
   void set_item_delta_fast (unsigned int item, unsigned int region, int32_t delta,
 			    HBUINT8 *delta_bytes, unsigned row_size)
   {
     HBINT8 *p = (HBINT8 *) delta_bytes + item * row_size;
     unsigned word_count = wordCount ();
     bool is_long = longWords ();
     if (is_long)
     {
       if (region < word_count)
 	((HBINT32 *) p)[region] = delta;
       else
 	((HBINT16 *)(p + HBINT32::static_size * word_count))[region - word_count] = delta;
     }
     else
     {
       if (region < word_count)
 	((HBINT16 *) p)[region] = delta;
       else
 	(p + HBINT16::static_size * word_count)[region - word_count] = delta;
     }
   }
   void set_item_delta (unsigned int item, unsigned int region, int32_t delta)
   {
     set_item_delta_fast (item, region, delta,
 			 get_delta_bytes (),
 			 get_row_size ());
   }
 
   bool longWords () const { return wordSizeCount & 0x8000u /* LONG_WORDS */; }
   unsigned wordCount () const { return wordSizeCount & 0x7FFFu /* WORD_DELTA_COUNT_MASK */; }
 
   protected:
   HBUINT16		itemCount;
   HBUINT16		wordSizeCount;
   Array16Of<HBUINT16>	regionIndices;
 /*UnsizedArrayOf<HBUINT8>bytesX;*/
   public:
   DEFINE_SIZE_ARRAY (6, regionIndices);
 };
