commit 299a0b2a009618578d866b3621fe75cfc17d235c
Author: Martin Davis <mtnclimb@gmail.com>
Date:   Tue Oct 25 16:59:41 2022 -0700

    Add OverlayNG support for simple GeometryCollection inputs (#716)

diff --git a/include/geos/operation/overlayng/OverlayNG.h b/include/geos/operation/overlayng/OverlayNG.h
index 9a5c23a5d..7fed36bba 100644
--- a/include/geos/operation/overlayng/OverlayNG.h
+++ b/include/geos/operation/overlayng/OverlayNG.h
@@ -47,68 +47,74 @@ namespace operation { // geos.operation
 namespace overlayng { // geos.operation.overlayng
 
 /**
  * Computes the geometric overlay of two {@link geom::Geometry}s,
  * using an explicit precision model to allow robust computation.
  * The overlay can be used to determine any of the
  * following set-theoretic operations (boolean combinations) of the geometries:
  *
  * * INTERSECTION - all points which lie in both geometries
  * * UNION - all points which lie in at least one geometry
  * * DIFFERENCE - all points which lie in the first geometry but not the second
  * * SYMDIFFERENCE - all points which lie in one geometry but not both
  *
- * Input geometries may have different dimension.
- * Input collections must be homogeneous
- * (all elements must have the same dimension).
+ * The requirements for overlay input are:
+ * * Input collections must be homogeneous
+ *   (all elements must have the same dimension).
+ * * Inputs may be simple link GeometryCollections.
+ *   A GeometryCollection is simple if it can be flattened into a valid Multi-geometry;
+ *   i.e. it is homogeneous and does not contain any overlapping Polygons.
+ * * In general, inputs must be valid geometries.
+ *   However, polygonal inputs may contain the following two kinds of "mild" invalid topology:
+ *   (i) rings which self-touch at discrete points (sometimes called inverted shells and exverted holes).
+ *   (ii) rings which touch along line segments (i.e. topology collapse).
  *
  * The precision model used for the computation can be supplied
  * independent of the precision model of the input geometry.
  * The main use for this is to allow using a fixed precision
  * for geometry with a floating precision model.
  * This does two things: ensures robust computation;
  * and forces the output to be validly rounded to the precision model.
  *
  * For fixed precision models noding is performed using a {@link noding::snapround::SnapRoundingNoder}.
  * This provides robust computation (as long as precision is limited to
  * around 13 decimal digits).
  *
  * For floating precision an {@link noding::MCIndexNoder} is used.
  * This is not fully robust, so can sometimes result in
  * {@link util::TopologyException}s being thrown.
  * For robust full-precision overlay see {@link OverlayNGRobust}.
  *
  * Note: If a {@link noding::snap::SnappingNoder} is used
  * it is best to specify a fairly small snap tolerance,
  * since the intersection clipping optimization can
  * interact with the snapping to alter the result.
  *
- * TOptionally the overlay computation can process using strict mode
+ * Optionally the overlay computation can process using strict mode
  * (via setStrictMode(boolean). In strict mode result semantics are:
  *
  *  - Lines and Points resulting from topology collapses are not included
  *    in the result
  *  - Result geometry is homogeneous for the
  *    INTERSECTION and DIFFERENCE operations.
  *  - Result geometry is homogeneous for the
  *    UNION and SYMDIFFERENCE operations if
  *    the inputs have the same dimension.
  *
  * Strict mode has the following benefits:
  *
  *  - Results are simpler
  *  - Overlay operations are chainable without needing to remove
  *    lower-dimension elements
  *
  * The original JTS overlay semantics correspond to non-strict mode.
  *
- *
  * If a robustness error occurs, a TopologyException is thrown.
  * These are usually caused by numerical rounding causing the noding
  * output to not be fully noded.
  * For robust computation with full-precision {@link OverlayNGRobust}
  * can be used.
  *
  * @author mdavis
  * @see OverlayNGRobust
  *
  */
@@ -155,252 +161,251 @@ private:
 public:
     /**
     * The default setting for Strict Mode.
     *
     * The original JTS overlay semantics used non-strict result
     * semantics, including;
     * - An Intersection result can be mixed-dimension,
     *   due to inclusion of intersection components of all dimensions
     * - Results can include lines caused by Area topology collapse
     */
     static constexpr bool STRICT_MODE_DEFAULT = false;
 
     static constexpr int INTERSECTION   = overlay::OverlayOp::opINTERSECTION;
     static constexpr int UNION          = overlay::OverlayOp::opUNION;
     static constexpr int DIFFERENCE     = overlay::OverlayOp::opDIFFERENCE;
     static constexpr int SYMDIFFERENCE  = overlay::OverlayOp::opSYMDIFFERENCE;
 
     /**
     * Creates an overlay operation on the given geometries,
     * with a defined precision model.
     * The noding strategy is determined by the precision model.
     */
     OverlayNG(const geom::Geometry* geom0, const geom::Geometry* geom1, const geom::GeometryFactory* p_geomFact, int p_opCode)
         : pm(p_geomFact->getPrecisionModel())
         , inputGeom(geom0, geom1)
         , geomFact(p_geomFact)
         , opCode(p_opCode)
         , noder(nullptr)
         , isStrictMode(STRICT_MODE_DEFAULT)
         , isOptimized(true)
         , isAreaResultOnly(false)
         , isOutputEdges(false)
         , isOutputResultEdges(false)
         , isOutputNodedEdges(false)
     {}
 
     /**
     * Creates an overlay operation on the given geometries,
     * with a defined precision model.
     * The noding strategy is determined by the precision model.
     */
     OverlayNG(const geom::Geometry* geom0, const geom::Geometry* geom1, const geom::PrecisionModel* p_pm, int p_opCode)
         : pm(p_pm)
         , inputGeom(geom0, geom1)
         , geomFact(geom0->getFactory())
         , opCode(p_opCode)
         , noder(nullptr)
         , isStrictMode(STRICT_MODE_DEFAULT)
         , isOptimized(true)
         , isAreaResultOnly(false)
         , isOutputEdges(false)
         , isOutputResultEdges(false)
         , isOutputNodedEdges(false)
     {}
 
     /**
     * Creates an overlay operation on the given geometries
     * using the precision model of the geometries.
     *
     * The noder is chosen according to the precision model specified.
     *
     *  - For {@link PrecisionModel#FIXED}
     * a snap-rounding noder is used, and the computation is robust.
     *  - For {@link PrecisionModel#FLOATING}
     * a non-snapping noder is used,
     * and this computation may not be robust.
     * If errors occur a {@link util::TopologyException} is thrown.
     */
     OverlayNG(const geom::Geometry* geom0, const geom::Geometry* geom1, int p_opCode)
         : OverlayNG(geom0, geom1, geom0->getFactory()->getPrecisionModel(), p_opCode)
     {}
 
     OverlayNG(const geom::Geometry* geom0, const geom::PrecisionModel* p_pm)
         : OverlayNG(geom0, nullptr, p_pm, UNION)
     {}
 
     /**
     * Sets whether overlay processing optimizations are enabled.
     * It may be useful to disable optimizations
     * for testing purposes.
     * Default is TRUE (optimization enabled).
     *
     * @param p_isOptimized whether to optimize processing
     */
     void setOptimized(bool p_isOptimized) { isOptimized = p_isOptimized; }
     void setStrictMode(bool p_isStrictMode) { isStrictMode = p_isStrictMode; }
     void setAreaResultOnly(bool p_areaResultOnly) { isAreaResultOnly = p_areaResultOnly; }
     void setOutputEdges(bool p_isOutputEdges) { isOutputEdges = p_isOutputEdges; }
     void setOutputResultEdges(bool p_isOutputResultEdges) { isOutputResultEdges = p_isOutputResultEdges; }
     void setNoder(noding::Noder* p_noder) { noder = p_noder; }
 
     void setOutputNodedEdges(bool p_isOutputNodedEdges)
     {
         isOutputEdges = true;
         isOutputNodedEdges = p_isOutputNodedEdges;
     }
 
     /**
      * Gets the result of the overlay operation.
      *
      * @return the result of the overlay operation.
      *
      * @throws IllegalArgumentException if the input is not supported (e.g. a mixed-dimension geometry)
      * @throws TopologyException if a robustness error occurs
      */
     std::unique_ptr<Geometry> getResult();
 
     /**
     * Tests whether a point with a given topological {@link OverlayLabel}
     * relative to two geometries is contained in
     * the result of overlaying the geometries using
     * a given overlay operation.
     *
     * The method handles arguments of {@link Location#NONE} correctly
     */
     static bool isResultOfOpPoint(const OverlayLabel* label, int opCode);
 
     /**
     * Tests whether a point with given {@link geom::Location}s
     * relative to two geometries would be contained in
     * the result of overlaying the geometries using
     * a given overlay operation.
     * This is used to determine whether components
     * computed during the overlay process should be
     * included in the result geometry.
     *
     * The method handles arguments of {@link Location#NONE} correctly.
     */
     static bool isResultOfOp(int overlayOpCode, Location loc0, Location loc1);
 
     /**
     * Computes an overlay operation for
     * the given geometry operands, with the
     * noding strategy determined by the precision model.
     *
     * @param geom0 the first geometry argument
     * @param geom1 the second geometry argument
     * @param opCode the code for the desired overlay operation
     * @param pm the precision model to use
     * @return the result of the overlay operation
     */
     static std::unique_ptr<Geometry>
     overlay(const Geometry* geom0, const Geometry* geom1,
             int opCode, const PrecisionModel* pm);
 
 
     /**
     * Computes an overlay operation on the given geometry operands,
     * using a supplied {@link noding::Noder}.
     *
     * @param geom0 the first geometry argument
     * @param geom1 the second geometry argument
     * @param opCode the code for the desired overlay operation
     * @param pm the precision model to use (which may be null if the noder does not use one)
     * @param noder the noder to use
     * @return the result of the overlay operation
     */
     static std::unique_ptr<Geometry>
     overlay(const Geometry* geom0, const Geometry* geom1,
             int opCode, const PrecisionModel* pm, noding::Noder* noder);
 
 
     /**
     * Computes an overlay operation on the given geometry operands,
     * using a supplied {@link noding::Noder}.
     *
     * @param geom0 the first geometry argument
     * @param geom1 the second geometry argument
     * @param opCode the code for the desired overlay operation
     * @param noder the noder to use
     * @return the result of the overlay operation
     */
     static std::unique_ptr<Geometry>
     overlay(const Geometry* geom0, const Geometry* geom1,
             int opCode, noding::Noder* noder);
 
     /**
     * Computes an overlay operation on
     * the given geometry operands,
     * using the precision model of the geometry.
     * and an appropriate noder.
     *
     * The noder is chosen according to the precision model specified.
     *
     *  - For {@link geom::PrecisionModel#FIXED}
     *    a snap-rounding noder is used, and the computation is robust.
     *  - For {@link geom::PrecisionModel#FLOATING}
     *    a non-snapping noder is used,
     *    and this computation may not be robust.
     * If errors occur a {@link util::TopologyException} is thrown.
     *
     * @param geom0 the first argument geometry
     * @param geom1 the second argument geometry
     * @param opCode the code for the desired overlay operation
     * @return the result of the overlay operation
     */
     static std::unique_ptr<Geometry>
     overlay(const Geometry* geom0, const Geometry* geom1, int opCode);
 
 
     /**
     * Computes a union operation on
     * the given geometry, with the supplied precision model.
     * The primary use for this is to perform precision reduction
     * (round the geometry to the supplied precision).
     *
     * The input must be a valid geometry.
     * Collections must be homogeneous.
     * IMPORTANT: You probably want OverlayNGUnaryUnion, not this.
     *
     * @param geom the geometry
     * @param pm the precision model to use
     * @return the result of the union operation
     *
     * @see OverlayMixedPoints
     * @see PrecisionReducer
     * @see UnaryUnionNG
     * @see CoverageUnion
     */
     static std::unique_ptr<Geometry>
     geomunion(const Geometry* geom, const PrecisionModel* pm);
 
 
     /**
     * Computes a union of a single geometry using a custom noder.
     *
     * The primary use of this is to support coverage union.
     *
     * The input must be a valid geometry.
     * Collections must be homogeneous.
     * IMPORTANT: You probably want OverlayNGUnaryUnion, not this.
     *
     * @param geom the geometry to union
     * @param pm the precision model to use (maybe be null)
     * @param noder the noder to use
     * @return the result geometry
     *
     * @see CoverageUnion
     */
     static std::unique_ptr<Geometry>
     geomunion(const Geometry* geom, const PrecisionModel* pm, noding::Noder* noder);
 
 
 
 
 };
 
 
 } // namespace geos.operation.overlayng
 } // namespace geos.operation
 } // namespace geos
-
diff --git a/include/geos/operation/overlayng/OverlayPoints.h b/include/geos/operation/overlayng/OverlayPoints.h
index 87597c813..2e9c15303 100644
--- a/include/geos/operation/overlayng/OverlayPoints.h
+++ b/include/geos/operation/overlayng/OverlayPoints.h
@@ -57,67 +57,62 @@ class GEOS_DLL OverlayPoints {
 private:
 
     // Members
     int opCode;
     const Geometry* geom0;
     const Geometry* geom1;
     const PrecisionModel* pm;
     const GeometryFactory* geometryFactory;
     std::vector<std::unique_ptr<Point>> resultList;
 
     // Methods
     void
     computeIntersection(std::map<Coordinate, std::unique_ptr<Point>>& map0,
                         std::map<Coordinate, std::unique_ptr<Point>>& map1,
                         std::vector<std::unique_ptr<Point>>& resultList);
 
     void
     computeDifference(std::map<Coordinate, std::unique_ptr<Point>>& map0,
                       std::map<Coordinate, std::unique_ptr<Point>>& map1,
                       std::vector<std::unique_ptr<Point>>& resultList);
 
     void
     computeUnion(std::map<Coordinate, std::unique_ptr<Point>>& map0,
                  std::map<Coordinate, std::unique_ptr<Point>>& map1,
                  std::vector<std::unique_ptr<Point>>& resultList);
 
     std::map<Coordinate, std::unique_ptr<Point>> buildPointMap(const Geometry* geom);
 
-    Coordinate roundCoord(const Point* pt, const PrecisionModel* pm) const;
-
-
-
 public:
 
     /**
     * Creates an instance of an overlay operation on inputs which are both point geometries.
     */
     OverlayPoints(int p_opCode, const Geometry* p_geom0, const Geometry* p_geom1, const PrecisionModel* p_pm)
         : opCode(p_opCode)
         , geom0(p_geom0)
         , geom1(p_geom1)
         , pm(p_pm)
         , geometryFactory(p_geom0->getFactory()) {}
 
     OverlayPoints(const OverlayPoints&) = delete;
     OverlayPoints& operator=(const OverlayPoints&) = delete;
 
     /**
     * Performs an overlay operation on inputs which are both point geometries.
     */
     static std::unique_ptr<Geometry> overlay(int opCode, const Geometry* geom0, const Geometry* geom1, const PrecisionModel* pm);
 
     /**
     * Gets the result of the overlay.
     *
     * @return the overlay result
     */
     std::unique_ptr<Geometry> getResult();
 
 
 };
 
 
 } // namespace geos.operation.overlayng
 } // namespace geos.operation
 } // namespace geos
-
diff --git a/src/algorithm/locate/IndexedPointInAreaLocator.cpp b/src/algorithm/locate/IndexedPointInAreaLocator.cpp
index da233e20e..0182903ef 100644
--- a/src/algorithm/locate/IndexedPointInAreaLocator.cpp
+++ b/src/algorithm/locate/IndexedPointInAreaLocator.cpp
@@ -47,16 +47,24 @@ void
 IndexedPointInAreaLocator::IntervalIndexedGeometry::init(const geom::Geometry& g)
 {
     geom::LineString::ConstVect lines;
     geom::util::LinearComponentExtracter::getLines(g, lines);
 
     // pre-compute size of segment vector
     std::size_t nsegs = 0;
     for(const geom::LineString* line : lines) {
+        //-- only include rings of Polygons or LinearRings
+        if (! line->isClosed())
+          continue;
+
         nsegs += line->getCoordinatesRO()->size() - 1;
     }
     index = decltype(index)(10, nsegs);
 
     for(const geom::LineString* line : lines) {
+        //-- only include rings of Polygons or LinearRings
+        if (! line->isClosed())
+          continue;
+
         addLine(line->getCoordinatesRO());
     }
 }
@@ -87,15 +95,9 @@ IndexedPointInAreaLocator::buildIndex(const geom::Geometry& g)
 //
 // public:
 //
 IndexedPointInAreaLocator::IndexedPointInAreaLocator(const geom::Geometry& g)
     :	areaGeom(g)
 {
-    const std::type_info& areaGeomId = typeid(areaGeom);
-    if(areaGeomId != typeid(geom::Polygon)
-            &&	areaGeomId != typeid(geom::MultiPolygon)
-            &&	areaGeomId != typeid(geom::LinearRing)) {
-        throw util::IllegalArgumentException("Argument must be Polygonal or LinearRing");
-    }
 }
 
 geom::Location
diff --git a/src/operation/overlayng/OverlayMixedPoints.cpp b/src/operation/overlayng/OverlayMixedPoints.cpp
index de2067d5b..f79087f8b 100644
--- a/src/operation/overlayng/OverlayMixedPoints.cpp
+++ b/src/operation/overlayng/OverlayMixedPoints.cpp
@@ -1,43 +1,76 @@
 /**********************************************************************
  *
  * GEOS - Geometry Engine Open Source
  * http://geos.osgeo.org
  *
  * Copyright (C) 2020 Paul Ramsey <pramsey@cleverelephant.ca>
  *
  * This is free software; you can redistribute and/or modify it under
  * the terms of the GNU Lesser General Public Licence as published
  * by the Free Software Foundation.
  * See the COPYING file for more information.
  *
  **********************************************************************/
 
 #include <geos/operation/overlayng/OverlayMixedPoints.h>
 
 #include <geos/algorithm/locate/IndexedPointInAreaLocator.h>
 #include <geos/algorithm/locate/PointOnGeometryLocator.h>
 #include <geos/geom/CoordinateArraySequence.h>
 #include <geos/geom/Coordinate.h>
 #include <geos/geom/Geometry.h>
 #include <geos/geom/GeometryFactory.h>
 #include <geos/geom/PrecisionModel.h>
 #include <geos/operation/overlayng/IndexedPointOnLineLocator.h>
 #include <geos/operation/overlayng/OverlayEdge.h>
 #include <geos/operation/overlayng/OverlayGraph.h>
 #include <geos/operation/overlayng/OverlayLabel.h>
 #include <geos/operation/overlayng/OverlayNG.h>
 #include <geos/operation/overlayng/OverlayUtil.h>
 #include <geos/util/Assert.h>
 
-
-
 namespace geos {      // geos
 namespace operation { // geos.operation
 namespace overlayng { // geos.operation.overlayng
 
-
 using namespace geos::geom;
 
+/**
+ * @brief Extracts and rounds coordinates from a geometry
+ *
+ */
+class CoordinateExtractingFilter: public geom::CoordinateFilter {
+public:
+    CoordinateExtractingFilter(CoordinateArraySequence& p_pts, const PrecisionModel& p_pm)
+        : pts(p_pts), pm(p_pm)
+    {}
+
+    /**
+     * Destructor.
+     * Virtual dctor promises appropriate behaviour when someone will
+     * delete a derived-class object via a base-class pointer.
+     * http://www.parashift.com/c++-faq-lite/virtual-functions.html#faq-20.7
+     */
+    ~CoordinateExtractingFilter() override {}
+
+    /**
+     * Performs a filtering operation with or on coord in "read-only" mode.
+     * @param coord The "read-only" Coordinate to which
+     * 				the filter is applied.
+     */
+    void
+    filter_ro(const geom::Coordinate* coord) override
+    {
+        Coordinate p(*coord);
+        pm.makePrecise(p);
+        pts.add(p);
+    }
+
+private:
+    CoordinateArraySequence& pts;
+    const PrecisionModel& pm;
+};
+
 /*public*/
 OverlayMixedPoints::OverlayMixedPoints(int p_opCode, const Geometry* geom0, const Geometry* geom1, const PrecisionModel* p_pm)
     : opCode(p_opCode)
@@ -234,17 +267,10 @@ std::unique_ptr<CoordinateArraySequence>
 OverlayMixedPoints::extractCoordinates(const Geometry* points, const PrecisionModel* p_pm) const
 {
     std::unique_ptr<CoordinateArraySequence> coords(new CoordinateArraySequence());
-    std::size_t n = points->getNumGeometries();
-    for (std::size_t i = 0; i < n; i++) {
-        const Point* point = static_cast<const Point*>(points->getGeometryN(i));
-        if (point->isEmpty()) {
-            continue;
-        }
-        Coordinate coord;
-        OverlayUtil::round(point, p_pm, coord);
-        coords->add(coord, true);
-    }
+
+    CoordinateExtractingFilter filter(*coords, *p_pm);
+    points->apply_ro(&filter);
     return coords;
 }
 
 /*private*/
@@ -266,21 +292,15 @@ std::vector<std::unique_ptr<LineString>>
 OverlayMixedPoints::extractLines(const Geometry* geom) const
 {
     std::vector<std::unique_ptr<LineString>> list;
     for (std::size_t i = 0; i < geom->getNumGeometries(); i++) {
         const LineString* line = static_cast<const LineString*>(geom->getGeometryN(i));
         if (! line->isEmpty()) {
             list.emplace_back(line->clone());
         }
     }
     return list;
 }
 
-
-
-
-
-
-
 } // namespace geos.operation.overlayng
 } // namespace geos.operation
 } // namespace geos
diff --git a/src/operation/overlayng/OverlayPoints.cpp b/src/operation/overlayng/OverlayPoints.cpp
index 8c1c1bf91..c328687b5 100644
--- a/src/operation/overlayng/OverlayPoints.cpp
+++ b/src/operation/overlayng/OverlayPoints.cpp
@@ -27,6 +27,47 @@ namespace geos {      // geos
 namespace operation { // geos.operation
 namespace overlayng { // geos.operation.overlayng
 
+struct PointExtractingFilter: public GeometryComponentFilter {
+
+    PointExtractingFilter(std::map<Coordinate, std::unique_ptr<Point>>& p_ptMap, const PrecisionModel* p_pm)
+        : ptMap(p_ptMap), pm(p_pm)
+    {}
+
+    void
+    filter_ro(const Geometry* geom)
+    {
+        if (geom->getGeometryTypeId() != GEOS_POINT) return;
+
+        const Point* pt = static_cast<const Point*>(geom);
+        // don't add empty points
+        if (pt->isEmpty()) return;
+
+        Coordinate p = roundCoord(pt, pm);
+        /**
+        * Only add first occurrence of a point.
+        * This provides the merging semantics of overlay
+        */
+        if (ptMap.find(p) == ptMap.end()) {
+            std::unique_ptr<Point> newPt(pt->getFactory()->createPoint(p));
+            ptMap[p] = std::move(newPt);
+        }
+    }
+
+    static Coordinate
+    roundCoord(const Point* pt, const PrecisionModel* p_pm)
+    {
+        const Coordinate* p = pt->getCoordinate();
+        if (OverlayUtil::isFloating(p_pm))
+            return *p;
+        Coordinate p2 = *p;
+        p_pm->makePrecise(p2);
+        return p2;
+    }
+
+private:
+    std::map<Coordinate, std::unique_ptr<Point>>& ptMap;
+    const PrecisionModel* pm;
+};
 
 /*public static*/
 std::unique_ptr<Geometry>
@@ -109,71 +150,33 @@ void
 OverlayPoints::computeUnion(std::map<Coordinate, std::unique_ptr<Point>>& map0,
              std::map<Coordinate, std::unique_ptr<Point>>& map1,
              std::vector<std::unique_ptr<Point>>& rsltList)
 {
     // take all map0 points
     for (auto& ent : map0) {
         rsltList.emplace_back(ent.second.release());
     }
 
     // find any map1 points that aren't already in the result
     for (auto& ent : map1) {
         // is there no entry in map0?
         const auto& it = map0.find(ent.first);
         if (it == map0.end()) {
             // add it to the result, taking ownership
             rsltList.emplace_back(ent.second.release());
         }
     }
 }
 
-
 /*private*/
 std::map<Coordinate, std::unique_ptr<Point>>
 OverlayPoints::buildPointMap(const Geometry* geom)
 {
     std::map<Coordinate, std::unique_ptr<Point>> map;
-    for (std::size_t i = 0; i < geom->getNumGeometries(); i++) {
-        const Geometry* elt = geom->getGeometryN(i);
-        if (elt->getGeometryTypeId() != GEOS_POINT) {
-            throw util::IllegalArgumentException("Non-point geometry input to point overlay");
-        }
-        // don't add empty points
-        if (elt->isEmpty()) continue;
-
-        const Point* pt = static_cast<const Point*>(elt);
-        Coordinate p = roundCoord(pt, pm);
-        /**
-        * Only add first occurrence of a point.
-        * This provides the merging semantics of overlay
-        */
-        if (map.find(p) == map.end()) {
-            std::unique_ptr<Point> newPt(pt->getFactory()->createPoint(p));
-            map[p] = std::move(newPt);
-        }
-    }
+    PointExtractingFilter filter(map, pm);
+    geom->apply_ro(&filter);
     return map;
 }
 
-
-/*private*/
-Coordinate
-OverlayPoints::roundCoord(const Point* pt, const PrecisionModel* p_pm) const
-{
-    const Coordinate* p = pt->getCoordinate();
-    if (OverlayUtil::isFloating(p_pm))
-        return *p;
-    Coordinate p2 = *p;
-    p_pm->makePrecise(p2);
-    return p2;
-}
-
-
-
-
-
-
-
-
 } // namespace geos.operation.overlayng
 } // namespace geos.operation
 } // namespace geos
diff --git a/tests/unit/operation/overlayng/OverlayNGGeometryCollectionTest.cpp b/tests/unit/operation/overlayng/OverlayNGGeometryCollectionTest.cpp
new file mode 100644
index 000000000..55d32d515
--- /dev/null
+++ b/tests/unit/operation/overlayng/OverlayNGGeometryCollectionTest.cpp
@@ -0,0 +1,155 @@
+//
+// Test Suite for geos::operation::overlayng::OverlayNG class for GeometryCollections.
+
+#include <tut/tut.hpp>
+#include <utility.h>
+
+// geos
+#include <geos/operation/overlayng/OverlayNG.h>
+
+// std
+#include <memory>
+
+using namespace geos::geom;
+using namespace geos::operation::overlayng;
+using geos::io::WKTReader;
+using geos::io::WKTWriter;
+
+namespace tut {
+//
+// Test Group
+//
+
+// Common data used by all tests
+struct test_overlaynggc_data {
+
+    WKTReader r;
+    WKTWriter w;
+
+    void
+    testOverlay(const std::string& a, const std::string& b, const std::string& expected, int opCode)
+    {
+        PrecisionModel pm;
+        std::unique_ptr<Geometry> geom_a = r.read(a);
+        std::unique_ptr<Geometry> geom_b = r.read(b);
+        std::unique_ptr<Geometry> geom_expected = r.read(expected);
+        std::unique_ptr<Geometry> geom_result = OverlayNG::overlay(geom_a.get(), geom_b.get(), opCode, &pm);
+        // std::string wkt_result = w.write(geom_result.get());
+        // std::cout << std::endl << wkt_result << std::endl;
+        ensure_equals_geometry(geom_expected.get(), geom_result.get());
+    }
+
+    void
+    testIntersection(const std::string& a, const std::string& b, const std::string& expected)
+    {
+        testOverlay(a, b, expected, OverlayNG::INTERSECTION);
+    }
+
+    void
+    testUnion(const std::string& a, const std::string& b, const std::string& expected)
+    {
+        testOverlay(a, b, expected, OverlayNG::UNION);
+    }
+};
+
+typedef test_group<test_overlaynggc_data> group;
+typedef group::object object;
+
+group test_overlaynggc_group("geos::operation::overlayng::OverlayNGGeometryCollection");
+
+//
+// Test Cases
+//
+
+//  testSimpleA_mP
+template<>
+template<>
+void object::test<1> ()
+{
+    std::string a = "POLYGON ((0 0, 0 1, 1 1, 0 0))";
+    std::string b = "GEOMETRYCOLLECTION ( MULTIPOINT ((0 0), (99 99)) )";
+    testIntersection(a, b,
+        "POINT (0 0)");
+    testUnion(a, b,
+        "GEOMETRYCOLLECTION (POINT (99 99), POLYGON ((0 0, 0 1, 1 1, 0 0)))");
+}
+
+//  testSimpleP_mP
+template<>
+template<>
+void object::test<2> ()
+{
+    std::string a = "POINT(0 0)";
+    std::string b = "GEOMETRYCOLLECTION ( MULTIPOINT ((0 0), (99 99)) )";
+    testIntersection(a, b,
+        "POINT (0 0)");
+    testUnion(a, b,
+        "MULTIPOINT ((0 0), (99 99))");
+}
+
+//  testSimpleP_mL
+template<>
+template<>
+void object::test<3> ()
+{
+    std::string a = "POINT(5 5)";
+    std::string b = "GEOMETRYCOLLECTION ( MULTILINESTRING ((1 9, 9 1), (1 1, 9 9)) )";
+    testIntersection(a, b,
+        "POINT (5 5)");
+    testUnion(a, b,
+        "MULTILINESTRING ((1 1, 5 5), (1 9, 5 5), (5 5, 9 1), (5 5, 9 9))");
+}
+
+//  testSimpleP_mA
+template<>
+template<>
+void object::test<4> ()
+{
+    std::string a = "POINT(5 5)";
+    std::string b = "GEOMETRYCOLLECTION ( MULTIPOLYGON (((1 1, 1 5, 5 5, 5 1, 1 1)), ((9 9, 9 5, 5 5, 5 9, 9 9))) )";
+    testIntersection(a, b,
+        "POINT (5 5)");
+    testUnion(a, b,
+        "MULTIPOLYGON (((1 1, 1 5, 5 5, 5 1, 1 1)), ((9 9, 9 5, 5 5, 5 9, 9 9)))");
+}
+
+//  testSimpleP_AA
+template<>
+template<>
+void object::test<5> ()
+{
+    std::string a = "POINT(5 5)";
+    std::string b = "GEOMETRYCOLLECTION ( POLYGON ((1 1, 1 5, 5 5, 5 1, 1 1)), POLYGON ((9 9, 9 5, 5 5, 5 9, 9 9)) )";
+    testIntersection(a, b,
+        "POINT (5 5)");
+    testUnion(a, b,
+        "MULTIPOLYGON (((1 1, 1 5, 5 5, 5 1, 1 1)), ((9 9, 9 5, 5 5, 5 9, 9 9)))");
+    }
+
+//  testSimpleL_AA
+template<>
+template<>
+void object::test<6> ()
+{
+    std::string a = "LINESTRING (0 0, 10 10)";
+    std::string b = "GEOMETRYCOLLECTION ( POLYGON ((1 1, 1 5, 5 5, 5 1, 1 1)), POLYGON ((9 9, 9 5, 5 5, 5 9, 9 9)) )";
+    testIntersection(a, b,
+        "MULTILINESTRING ((1 1, 5 5), (5 5, 9 9))");
+    testUnion(a, b,
+        "GEOMETRYCOLLECTION (LINESTRING (0 0, 1 1), LINESTRING (9 9, 10 10), POLYGON ((1 1, 1 5, 5 5, 5 1, 1 1)), POLYGON ((5 5, 5 9, 9 9, 9 5, 5 5)))");
+    }
+
+//  testSimpleA_AA
+template<>
+template<>
+void object::test<7> ()
+{
+    std::string a = "POLYGON ((2 8, 8 8, 8 2, 2 2, 2 8))";
+    std::string b = "GEOMETRYCOLLECTION ( POLYGON ((1 1, 1 5, 5 5, 5 1, 1 1)), POLYGON ((9 9, 9 5, 5 5, 5 9, 9 9)) )";
+    testIntersection(a, b,
+        "MULTIPOLYGON (((2 2, 2 5, 5 5, 5 2, 2 2)), ((5 5, 5 8, 8 8, 8 5, 5 5)))");
+    testUnion(a, b,
+        "POLYGON ((1 1, 1 5, 2 5, 2 8, 5 8, 5 9, 9 9, 9 5, 8 5, 8 2, 5 2, 5 1, 1 1))");
+}
+
+} // namespace tut
diff --git a/tests/xmltester/tests/general/TestNGOverlayGC.xml b/tests/xmltester/tests/general/TestNGOverlayGC.xml
new file mode 100644
index 000000000..d50eb44c7
--- /dev/null
+++ b/tests/xmltester/tests/general/TestNGOverlayGC.xml
@@ -0,0 +1,127 @@
+<run>
+<desc>Tests for OverlayNG operations with simple GeometryCollection inputs.
+Covers topological situations with no precision collapse.
+Uses a floating precision model.
+</desc>
+
+<case>
+  <desc>AgA - simple overlapping</desc>
+  <a>
+    POLYGON ((2 8, 8 8, 8 2, 2 2, 2 8))
+  </a>
+  <b>
+    GEOMETRYCOLLECTION ( POLYGON ((1 1, 1 5, 5 5, 5 1, 1 1)), POLYGON ((9 9, 9 5, 5 5, 5 9, 9 9)) )
+  </b>
+<test>
+  <op name="intersectionNG" arg1="A" arg2="B">
+    MULTIPOLYGON (((2 2, 2 5, 5 5, 5 2, 2 2)), ((5 5, 5 8, 8 8, 8 5, 5 5)))
+  </op>
+</test>
+<test>
+  <op name="unionNG" arg1="A" arg2="B">
+    POLYGON ((1 1, 1 5, 2 5, 2 8, 5 8, 5 9, 9 9, 9 5, 8 5, 8 2, 5 2, 5 1, 1 1))
+  </op>
+</test>
+<test>
+  <op name="differenceNG" arg1="A" arg2="B">
+    MULTIPOLYGON (((5 8, 5 5, 2 5, 2 8, 5 8)), ((8 2, 5 2, 5 5, 8 5, 8 2)))
+  </op>
+</test>
+<test>
+  <op name="symdifferenceNG" arg1="A" arg2="B">
+    MULTIPOLYGON (((5 8, 5 5, 2 5, 2 8, 5 8)), ((8 8, 5 8, 5 9, 9 9, 9 5, 8 5, 8 8)), ((8 2, 5 2, 5 5, 8 5, 8 2)), ((2 2, 5 2, 5 1, 1 1, 1 5, 2 5, 2 2)))
+  </op>
+</test>
+</case>
+
+<case>
+  <desc>AgmP - simple partially overlapping</desc>
+  <a>
+    POLYGON ((0 0, 0 1, 1 1, 0 0))
+  </a>
+  <b>
+    GEOMETRYCOLLECTION ( MULTIPOINT ((0 0), (99 99)) )
+  </b>
+<test>
+  <op name="intersectionNG" arg1="A" arg2="B">
+    POINT (0 0)
+  </op>
+</test>
+<test>
+  <op name="unionNG" arg1="A" arg2="B">
+    GEOMETRYCOLLECTION (POINT (99 99), POLYGON ((0 0, 0 1, 1 1, 0 0)))
+  </op>
+</test>
+<test>
+  <op name="differenceNG" arg1="A" arg2="B">
+    POLYGON ((0 1, 1 1, 0 0, 0 1))
+  </op>
+</test>
+<test>
+  <op name="symdifferenceNG" arg1="A" arg2="B">
+    GEOMETRYCOLLECTION (POLYGON ((0 1, 1 1, 0 0, 0 1)), POINT (99 99))
+  </op>
+</test>
+</case>
+
+<case>
+  <desc>LgcA - simple overlapping</desc>
+  <a>
+    LINESTRING (0 0, 10 10)
+  </a>
+  <b>
+    GEOMETRYCOLLECTION ( POLYGON ((1 1, 1 5, 5 5, 5 1, 1 1)), POLYGON ((9 9, 9 5, 5 5, 5 9, 9 9)) )
+  </b>
+<test>
+  <op name="intersectionNG" arg1="A" arg2="B">
+    MULTILINESTRING ((1 1, 5 5), (5 5, 9 9))
+  </op>
+</test>
+<test>
+  <op name="unionNG" arg1="A" arg2="B">
+    GEOMETRYCOLLECTION (LINESTRING (0 0, 1 1), LINESTRING (9 9, 10 10), POLYGON ((1 1, 1 5, 5 5, 5 1, 1 1)), POLYGON ((5 5, 5 9, 9 9, 9 5, 5 5)))
+  </op>
+</test>
+<test>
+  <op name="differenceNG" arg1="A" arg2="B">
+    MULTILINESTRING ((0 0, 1 1), (9 9, 10 10))
+  </op>
+</test>
+<test>
+  <op name="symdifferenceNG" arg1="A" arg2="B">
+    GEOMETRYCOLLECTION (POLYGON ((1 5, 5 5, 5 1, 1 1, 1 5)), POLYGON ((9 5, 5 5, 5 9, 9 9, 9 5)), LINESTRING (0 0, 1 1), LINESTRING (9 9, 10 10))
+  </op>
+</test>
+</case>
+
+<case>
+  <desc>PgcA - simple covered</desc>
+  <a>
+    POINT(5 5)
+  </a>
+  <b>
+    GEOMETRYCOLLECTION ( MULTIPOLYGON (((1 1, 1 5, 5 5, 5 1, 1 1)), ((9 9, 9 5, 5 5, 5 9, 9 9))) )
+  </b>
+<test>
+  <op name="intersectionNG" arg1="A" arg2="B">
+    POINT (5 5)
+  </op>
+</test>
+<test>
+  <op name="unionNG" arg1="A" arg2="B">
+    MULTIPOLYGON (((1 1, 1 5, 5 5, 5 1, 1 1)), ((9 9, 9 5, 5 5, 5 9, 9 9)))
+  </op>
+</test>
+<test>
+  <op name="differenceNG" arg1="A" arg2="B">
+    POINT EMPTY
+  </op>
+</test>
+<test>
+  <op name="symdifferenceNG" arg1="A" arg2="B">
+    MULTIPOLYGON (((1 5, 5 5, 5 1, 1 1, 1 5)), ((9 5, 5 5, 5 9, 9 9, 9 5)))
+  </op>
+</test>
+</case>
+
+</run>
