commit 865581704e856711ced7027f212aae88d332944e
Merge: 60d059fc9 8254112c9
Author: Sean Parkinson <sean@wolfssl.com>
Date:   Mon Apr 24 08:03:02 2023 +1000

    Merge pull request #6312 from philljj/zd15961
    
    Fix out-of-bounds write in fp_mod_2d.

diff --git a/wolfcrypt/src/tfm.c b/wolfcrypt/src/tfm.c
index aa4b441d8..fe8f5bffe 100644
--- a/wolfcrypt/src/tfm.c
+++ b/wolfcrypt/src/tfm.c
@@ -992,49 +992,56 @@ int fp_mod(fp_int *a, fp_int *b, fp_int *c)
 /* c = a mod 2**d */
 void fp_mod_2d(fp_int *a, int b, fp_int *c)
 {
    unsigned int x;
    unsigned int bmax;
 
    /* zero if count less than or equal to zero */
    if (b <= 0) {
       fp_zero(c);
       return;
    }
 
    /* get copy of input */
    fp_copy(a, c);
 
    /* if 2**d is larger than we just return */
    if (c->sign == FP_ZPOS && b >= (DIGIT_BIT * a->used)) {
       return;
    }
 
    bmax = ((unsigned int)b + DIGIT_BIT - 1) / DIGIT_BIT;
+
+   /* If a is negative and bmax is larger than FP_SIZE, then the
+    * result can't fit within c. Just return. */
+   if (c->sign == FP_NEG && bmax > FP_SIZE) {
+      return;
+   }
+
   /* zero digits above the last digit of the modulus */
    for (x = bmax; x < (unsigned int)c->used; x++) {
     c->dp[x] = 0;
   }
 
   if (c->sign == FP_NEG) {
      fp_digit carry = 0;
      /* negate value */
      for (x = 0; x < (unsigned int)c->used; x++) {
          fp_digit next = c->dp[x] > 0;
          c->dp[x] = (fp_digit)0 - c->dp[x] - carry;
          carry |= next;
      }
      for (; x < bmax; x++) {
          c->dp[x] = (fp_digit)0 - carry;
      }
      c->used = (int)bmax;
      c->sign = FP_ZPOS;
   }
 
   /* clear the digit that is not completely outside/inside the modulus */
   x = DIGIT_BIT - (b % DIGIT_BIT);
   if (x != DIGIT_BIT) {
      c->dp[bmax - 1] &= ~((fp_digit)0) >> x;
   }
 
   fp_clamp (c);
 }
