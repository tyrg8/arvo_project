commit 6986e81f6fa441a56c4effe2bf2f177ca892255e
Author: Alex <aleksandrosansan@gmail.com>
Date:   Thu Aug 24 09:27:13 2023 +0200

    Fixes poc_assign from #1129 (#1178)

diff --git a/Common++/header/GeneralUtils.h b/Common++/header/GeneralUtils.h
index 86fccc5f..ec5409ee 100644
--- a/Common++/header/GeneralUtils.h
+++ b/Common++/header/GeneralUtils.h
@@ -9,47 +9,62 @@
 /**
  * \namespace pcpp
  * \brief The main namespace for the PcapPlusPlus lib
  */
 namespace pcpp
 {
 	/**
 	 * Convert a byte array into a string of hex characters. For example: for the array { 0xaa, 0x2b, 0x10 } the string
 	 * "aa2b10" will be returned
 	 * @param[in] byteArr A byte array
 	 * @param[in] byteArrSize The size of the byte array [in bytes]
 	 * @param[in] stringSizeLimit An optional parameter that enables to limit the returned string size. If set to a positive
 	 * integer value the returned string size will be equal or less than this value. If the string representation of the
 	 * whole array is longer than this size then only part of the array will be read. The default value is -1 which means no
 	 * string size limitation
 	 * @return A string of hex characters representing the byte array
 	 */
 	std::string byteArrayToHexString(const uint8_t* byteArr, size_t byteArrSize, int stringSizeLimit = -1);
 
 	/**
 	 * Convert a string of hex characters into a byte array. For example: for the string "aa2b10" an array of values
 	 * { 0xaa, 0x2b, 0x10 } will be returned
 	 * @param[in] hexString A string of hex characters
 	 * @param[out] resultByteArr A pre-allocated byte array where the result will be written to
 	 * @param[in] resultByteArrSize The size of the pre-allocated byte array
 	 * @return The size of the result array. If the string represents an array that is longer than the pre-allocated size
 	 * (resultByteArrSize) then the result array will contain only the part of the string that managed to fit into the
 	 * array, and the returned size will be resultByteArrSize. However if the string represents an array that is shorter
 	 * than the pre-allocated size then some of the cells will remain empty and contain zeros, and the returned size will
 	 * be the part of the array that contain data. If the input is an illegal hex string 0 will be returned.
 	 * Illegal hex string means odd number of characters or a string that contains non-hex characters
 	 */
 	size_t hexStringToByteArray(const std::string& hexString, uint8_t* resultByteArr, size_t resultByteArrSize);
 
 	/**
 	 * This is a cross platform version of memmem (https://man7.org/linux/man-pages/man3/memmem.3.html) which is not supported
 	 * on all platforms.
 	 * @param[in] haystack A pointer to the buffer to be searched
 	 * @param[in] haystackLen Length of the haystack buffer
 	 * @param[in] needle A pointer to a buffer that will be searched for
 	 * @param[in] needleLen Length of the needle buffer
 	 * @return A pointer to the beginning of the substring, or NULL if the substring is not found
 	 */
 	char* cross_platform_memmem(const char* haystack, size_t haystackLen, const char* needle, size_t needleLen);
+
+	/**
+	 * Calculates alignment.
+	 * @param[in] number Given number
+	 * @return The aligned number
+	*/
+	template <int alignment>
+	static int align(int number)
+	{
+		// Only works for alignment with power of 2
+		constexpr bool isPowerOfTwo = alignment && ((alignment & (alignment - 1)) == 0);
+		static_assert(isPowerOfTwo, "Alignment must be a power of 2");
+		int mask = alignment - 1;
+		return (number + mask) & ~mask;
+	}
 }
 
 #endif // PCAPPP_GENERAL_UTILS
diff --git a/Packet++/header/NflogLayer.h b/Packet++/header/NflogLayer.h
index 4df4d5d2..2fd7804c 100644
--- a/Packet++/header/NflogLayer.h
+++ b/Packet++/header/NflogLayer.h
@@ -1,234 +1,231 @@
 #ifndef PACKETPP_NFLOG_LAYER
 #define PACKETPP_NFLOG_LAYER
 
 #include "Layer.h"
 #include "TLVData.h"
+#include "GeneralUtils.h"
 
 /// @file
 
 /**
  * \namespace pcpp
  * \brief The main namespace for the PcapPlusPlus lib
  */
 namespace pcpp
 {
 	/**
 	 * @struct nflog_header
 	 * Represents Nflog header
 	 */
 #pragma pack(push, 1)
 	struct nflog_header
 	{
 		/** A Linux AF_ value, so it's 2 for IPv4 and 10 for IPv6 */
 		uint8_t addressFamily;
 		/** The version field is 0 for the current version of the pseudo-header */
 		uint8_t version;
 		/** The network byte order (big-endian) */
 		uint16_t resourceId;
 	};
 #pragma pack(pop)
 
 	/**
 	 * @enum NflogTlvType
 	 * Represents TLV types of NFLOG packets
 	*/
 	enum class NflogTlvType
 	{
 		/** the packet header structure */
 		NFULA_PACKET_HDR			= 1,
 		/** packet mark from skbuff */
 		NFULA_MARK					= 2,
 		/** nflog_timestamp_t for skbuff's time stamp */
  		NFULA_TIMESTAMP				= 3,
 		/** ifindex of device on which packet received (possibly bridge group) */
  		NFULA_IFINDEX_INDEV			= 4,
 		/** ifindex of device on which packet transmitted (possibly bridge group) */
  		NFULA_IFINDEX_OUTDEV		= 5,
 		/** ifindex of physical device on which packet received (not bridge group) */
  		NFULA_IFINDEX_PHYSINDEV		= 6,
 		/** ifindex of physical device on which packet transmitted (not bridge group) */
  		NFULA_IFINDEX_PHYSOUTDEV	= 7,
 		/** nflog_hwaddr_t for hardware address */
  		NFULA_HWADDR				= 8,
 		/** packet payload */
  		NFULA_PAYLOAD				= 9,
 		/** text string - null-terminated, count includes NUL */
  		NFULA_PREFIX				= 10,
 		/** UID owning socket on which packet was sent/received */
  		NFULA_UID					= 11,
 		/** sequence number of packets on this NFLOG socket */
  		NFULA_SEQ					= 12,
 		/** sequence number of pakets on all NFLOG sockets */
  		NFULA_SEQ_GLOBAL			= 13,
 		/** GID owning socket on which packet was sent/received */
  		NFULA_GID					= 14,
 		/** ARPHRD_ type of skbuff's device */
  		NFULA_HWTYPE				= 15,
 		/** skbuff's MAC-layer header */
  		NFULA_HWHEADER				= 16,
 		/** length of skbuff's MAC-layer header */
  		NFULA_HWLEN					= 17,
 	};
 
 	/**
 	 * @class NflogTlv
 	 * A wrapper class for NFLOG TLV fields. This class does not create or modify TLVs related to NFLOG, but rather
 	 * serves as a wrapper and provides useful methods for setting and retrieving data to/from them
 	 */
 	class NflogTlv
 	{
 	private:
 		struct NflogTLVRawData
 		{
 			/** Record length in bytes */
 			uint16_t recordLen;
 			/** Record type */
 			uint16_t recordType;
 			/** Record value (variable size) */
 			uint8_t recordValue[];
 		};
 		NflogTLVRawData* m_Data;
 	public:
 		/**
 		 * A c'tor for this class that gets a pointer to the option raw data (byte array)
 		 * @param[in] recordRawData A pointer to the option raw data
 		 */
 		explicit NflogTlv(uint8_t* recordRawData)
 		{
 			assign(recordRawData);
 		}
 
 		/**
 		 * @return recordLen attribute in NflogTLVRawData
 		 */
-		size_t getTotalSize() const { return m_Data->recordLen; }
+		size_t getTotalSize() const
+		{
+			// as in https://github.com/the-tcpdump-group/libpcap/blob/766b607d60d8038087b49fc4cf433dac3dcdb49c/pcap-util.c#L371-L374
+			return align<4>(m_Data->recordLen);
+		}
 
 		/**
 		 * Assign a pointer to the TLV record raw data (byte array)
 		 * @param[in] recordRawData A pointer to the TLV record raw data
 		 */
 		void assign(uint8_t* recordRawData)
 		{
-			if(recordRawData == nullptr)
-				m_Data = nullptr;
-			else
-			{
-				// to pass from some unknown paddings after tlv with type NFULA_PREFIX
-				while (*recordRawData == 0)
-					recordRawData += 1;
-				m_Data = (NflogTLVRawData*)recordRawData;
-			}
+			m_Data = (NflogTLVRawData*)recordRawData;
 		}
 
 		/**
 		 * @return True if the TLV record raw data is nullptr, false otherwise
 		 */
 		bool isNull() const
 		{
 			return (m_Data == nullptr);
 		}
 
 		/**
 		 * @return The type field of the record (the 'T' in __Type__-Length-Value)
 		 */
 		uint16_t getType() const { return m_Data->recordType; }
 
 		/**
 		 * @return A pointer to the TLV record raw data byte stream
 		 */
 		uint8_t* getRecordBasePtr() const { return (uint8_t*)m_Data; }
 
 		/**
 		 * @return A pointer to the value of the record as byte array (the 'V' in Type-Length- __Value__)
 		 */
 		uint8_t* getValue() const { return m_Data->recordValue; }
 	};
 
 	/**
 	 * @class NflogLayer
 	 * Represents an NFLOG protocol layer
 	 */
 	class NflogLayer : public Layer
 	{
 	public:
 		/**
 		 * A constructor that creates the layer from an existing packet raw data
 		 * @param[in] data A pointer to the raw data (will be casted to ether_header)
 		 * @param[in] dataLen Size of the data in bytes
 		 * @param[in] packet A pointer to the Packet instance where layer will be stored in
 		 */
 		NflogLayer(uint8_t* data, size_t dataLen, Packet* packet) : Layer(data, dataLen, NULL, packet) { m_Protocol = NFLOG; }
 
 		~NflogLayer() {}
 
 		/**
 		 * Get a pointer to the Nflog header.
 		 * @return A pointer to the nflog_header
 		 */
 		nflog_header* getNflogHeader() const { return (nflog_header*)m_Data; }
 
 		/**
 		 * Get address family of the packet. e.g. 2 for ipv4 and 10 for ipv6
 		 * @return an unsigned char of address family
 		*/
 		uint8_t getFamily();
 
 		/**
 		 * Get Version number inside packet header
 		 * The version field is 0 for the current version of the pseudo-header
 		 * @return an unsigned char for version
 		*/
 		uint8_t getVersion();
 
 		/**
 		 * Get Resource Id in packet header
 		 * On one netlink socket it's possible to listen to several nflog groups; the resource ID is the nflog group for the packet
 		*/
 		uint16_t getResourceId();
 
 		/**
 		 * Get a TLV object found with the input type. if no tlv is found, the internal value of the object will set to nullptr
 		 * @param[in] type type of tlv by using enum class defined as NflogTlvType
 		 * @return NflogTlv obtained by type
 		*/
 		NflogTlv getTlvByType(NflogTlvType type) const;
 
 		// implement abstract methods
 
 		/**
 		 * Currently identifies the following next layers: IPv4Layer, IPv6Layer using address family
 		 * Otherwise sets PayloadLayer
 		 */
 		void parseNextLayer();
 
 		/**
 		 * @return Size of nflog_header
 		 */
 		size_t getHeaderLen() const;
 
 		/**
 		 * Does nothing for this layer
 		*/
 		void computeCalculateFields() {};
 
 		std::string toString() const;
 
 		OsiModelLayer getOsiModelLayer() const { return OsiModelDataLinkLayer; }
 
 		/**
 		* A static method that validates the input data
 		* @param[in] data The pointer to the beginning of a byte stream of an NFLOG packet
 		* @param[in] dataLen The length of the byte stream
 		* @return True if the data is valid and can represent an NFLOG packet
 		*/
 		static bool isDataValid(const uint8_t* data, size_t dataLen);
 
 	private:
 		uint8_t* getTlvsBasePtr() const { return m_Data + sizeof(nflog_header); }
 
 		TLVRecordReader<NflogTlv> m_TlvReader;
 	};
 
 } // namespace pcpp
 
 #endif /* PACKETPP_NFLOG_LAYER */
diff --git a/Tests/Packet++Test/Tests/NflogTests.cpp b/Tests/Packet++Test/Tests/NflogTests.cpp
index 0aabea2f..ec8a5fb1 100644
--- a/Tests/Packet++Test/Tests/NflogTests.cpp
+++ b/Tests/Packet++Test/Tests/NflogTests.cpp
@@ -12,49 +12,49 @@
 PTF_TEST_CASE(NflogPacketParsingTest)
 {
 	timeval time;
 	gettimeofday(&time, NULL);
 
 	READ_FILE_AND_CREATE_PACKET_LINKTYPE(1, "PacketExamples/nflogPacket.dat", pcpp::LINKTYPE_NFLOG);
 
 	pcpp::Packet nflogPacket(&rawPacket1);
 
 	PTF_ASSERT_TRUE(nflogPacket.isPacketOfType(pcpp::NFLOG));
 	PTF_ASSERT_EQUAL(nflogPacket.getFirstLayer()->getProtocol(), pcpp::NFLOG, enum);
 	pcpp::NflogLayer* nflogLayer = nflogPacket.getLayerOfType<pcpp::NflogLayer>();
 	PTF_ASSERT_NOT_NULL(nflogLayer->getNextLayer());
 
 	PTF_ASSERT_EQUAL(nflogLayer->getFamily(), pcpp::IPv4);
 	PTF_ASSERT_EQUAL(nflogLayer->getVersion(), 0);
 	PTF_ASSERT_EQUAL(nflogLayer->getResourceId(), 42);
 
 	PTF_ASSERT_EQUAL(nflogLayer->getNextLayer()->getProtocol(), pcpp::IPv4, enum);
 
 	pcpp::NflogTlvType expectedTypes[6] = {
 		pcpp::NflogTlvType::NFULA_PACKET_HDR,
 		pcpp::NflogTlvType::NFULA_PREFIX,
 		pcpp::NflogTlvType::NFULA_IFINDEX_OUTDEV,
 		pcpp::NflogTlvType::NFULA_UID,
 		pcpp::NflogTlvType::NFULA_GID,
 		pcpp::NflogTlvType::NFULA_PAYLOAD
 	};
 
-	int optSizes[6] = {8, 5, 8, 8, 8, 65};
+	int optSizes[6] = {8, 8, 8, 8, 8, 68};
 	std::string optDataAsHexString[6] = {
 		"0800010000000300",
-		"05000a0000",
+		"05000a0000000000",
 		"0800050000000002",
 		"08000b0000000000",
 		"08000e0000000000",
-		"410009004500003d021040004011208f0a00020f0a000203a542003500294156c04e0100000100000000000003777777076578616d706c65036e65740000010001"
+		"410009004500003d021040004011208f0a00020f0a000203a542003500294156c04e0100000100000000000003777777076578616d706c65036e657400000100012f0a31"
 	};
 
 	for (int i = 0; i < 6; i++) {
 		pcpp::NflogTlv tlv = nflogLayer->getTlvByType(expectedTypes[i]);
 
 		PTF_ASSERT_EQUAL(tlv.getTotalSize(), optSizes[i]);
 		PTF_ASSERT_EQUAL(pcpp::byteArrayToHexString(tlv.getRecordBasePtr(), optSizes[i]), optDataAsHexString[i]);
 	}
 
 	/// sum of all TLVs before payload + size of nflog_header + size of (recordLength + recordType) variables of payload TLV
-	PTF_ASSERT_EQUAL(nflogLayer->getHeaderLen(), 45);
+	PTF_ASSERT_EQUAL(nflogLayer->getHeaderLen(), 48);
 }
