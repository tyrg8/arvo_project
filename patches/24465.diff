commit 1909b3e8d27deed5acc93e7f9a0bf48b397e1788
Author: Alex Rebert <alexandre.rebert@gmail.com>
Date:   Thu Oct 28 23:33:07 2021 -0400

    Fix overflow in IOStreamBuffer
    
    `getNextLine` & `getNextDataLine` now double the buffer size each time
    it is needed to avoid writing out of bounds.
    
    Fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=24465

diff --git a/include/assimp/IOStreamBuffer.h b/include/assimp/IOStreamBuffer.h
index d54774759..bbb5ef256 100644
--- a/include/assimp/IOStreamBuffer.h
+++ b/include/assimp/IOStreamBuffer.h
@@ -241,38 +241,43 @@ template <class T>
 AI_FORCE_INLINE bool IOStreamBuffer<T>::getNextDataLine(std::vector<T> &buffer, T continuationToken) {
     buffer.resize(m_cacheSize);
     if (m_cachePos >= m_cacheSize || 0 == m_filePos) {
         if (!readNextBlock()) {
             return false;
         }
     }
 
     size_t i = 0;
     for (;;) {
         if (continuationToken == m_cache[m_cachePos] && IsLineEnd(m_cache[m_cachePos + 1])) {
             ++m_cachePos;
             while (m_cache[m_cachePos] != '\n') {
                 ++m_cachePos;
             }
             ++m_cachePos;
         } else if (IsLineEnd(m_cache[m_cachePos])) {
             break;
         }
 
         buffer[i] = m_cache[m_cachePos];
         ++m_cachePos;
         ++i;
+
+        if(i == buffer.size()) {
+            buffer.resize(buffer.size() * 2);
+        }
+
         if (m_cachePos >= size()) {
             break;
         }
         if (m_cachePos >= m_cacheSize) {
             if (!readNextBlock()) {
                 return false;
             }
         }
     }
 
     buffer[i] = '\n';
     ++m_cachePos;
 
     return true;
 }
@@ -285,37 +290,42 @@ template <class T>
 AI_FORCE_INLINE bool IOStreamBuffer<T>::getNextLine(std::vector<T> &buffer) {
     buffer.resize(m_cacheSize);
     if (isEndOfCache(m_cachePos, m_cacheSize) || 0 == m_filePos) {
         if (!readNextBlock()) {
             return false;
         }
     }
 
     if (IsLineEnd(m_cache[m_cachePos])) {
         // skip line end
         while (m_cache[m_cachePos] != '\n') {
             ++m_cachePos;
         }
         ++m_cachePos;
         if (isEndOfCache(m_cachePos, m_cacheSize)) {
             if (!readNextBlock()) {
                 return false;
             }
         }
     }
 
     size_t i(0);
     while (!IsLineEnd(m_cache[m_cachePos])) {
         buffer[i] = m_cache[m_cachePos];
         ++m_cachePos;
         ++i;
+
+        if(i == buffer.size()) {
+            buffer.resize(buffer.size() * 2);
+        }
+
         if (m_cachePos >= m_cacheSize) {
             if (!readNextBlock()) {
                 return false;
             }
         }
     }
     buffer[i] = '\n';
     ++m_cachePos;
 
     return true;
 }
