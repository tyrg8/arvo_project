commit 878ef436e6cf401e5134899d70d5a8c0815cd549
Author: Christian Egli <christian.egli@sbs.ch>
Date:   Wed Nov 8 13:52:13 2023 +0100

    Fail if the size param to memcpy is negative
    
    Make sure the size param for memcpy is not negative.
    
    This should fix https://oss-fuzz.com/testcase-detail/6608976274653184
    also mentioned in https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=60723
    
    For inspiration I looked at
    https://github.com/inikep/lizard/commit/02491c71c2e6fd5c10997404df2f18d0fc7afadb

diff --git a/liblouis/lou_translateString.c b/liblouis/lou_translateString.c
index 53c5e711..4f38a1a7 100644
--- a/liblouis/lou_translateString.c
+++ b/liblouis/lou_translateString.c
@@ -436,52 +436,54 @@ static int
 swapReplace(int start, int end, const TranslationTableHeader *table,
 		const InString *input, OutString *output, int *posMapping,
 		const widechar *passInstructions, int passIC) {
 	TranslationTableOffset swapRuleOffset;
 	TranslationTableRule *swapRule;
 	widechar *replacements;
 	int p;
 	swapRuleOffset = (passInstructions[passIC + 1] << 16) | passInstructions[passIC + 2];
 	swapRule = (TranslationTableRule *)&table->ruleArea[swapRuleOffset];
 	replacements = &swapRule->charsdots[swapRule->charslen];
 	for (p = start; p < end; p++) {
 		int rep;
 		int test;
 		int k;
 		if (swapRule->opcode == CTO_SwapDd) {
 			// A sequence of dot patterns is encoded as the length of the first dot
 			// pattern (single widechar) followed by the contents of the first dot pattern
 			// (one widechar per cell) followed by the length of the second dot pattern,
 			// etc. See the function `compileSwapDots'. Because the third operand of a
 			// swapdd rule can only contain single-cell dot patterns, the elements at
 			// index 0, 2, ... are "1" and the elements at index 1, 3, ... are the dot
 			// patterns.
 			for (test = 0; test * 2 + 1 < swapRule->charslen; test++)
 				if (input->chars[p] == swapRule->charsdots[test * 2 + 1]) break;
 			if (test * 2 == swapRule->charslen) continue;
 		} else {
 			for (test = 0; test < swapRule->charslen; test++)
 				if (input->chars[p] == swapRule->charsdots[test]) break;
 			if (test == swapRule->charslen) continue;
 		}
 		k = 0;
 		for (rep = 0; rep < test; rep++)
 			if (swapRule->opcode == CTO_SwapCc)
 				k++;
 			else
 				k += replacements[k];
 		if (swapRule->opcode == CTO_SwapCc) {
 			if ((output->length + 1) > output->maxlength) return 0;
 			posMapping[output->length] = p;
 			output->chars[output->length++] = replacements[k];
 		} else {
 			int l = replacements[k] - 1;
 			int d = output->length + l;
 			if (d > output->maxlength) return 0;
 			while (--d >= output->length) posMapping[d] = p;
-			memcpy(&output->chars[output->length], &replacements[k + 1],
-					l * sizeof(*output->chars));
+			// if length is negative fail
+			int length = l * sizeof(*output->chars);
+			if (length < 0) return 0;
+			memcpy(&output->chars[output->length], &replacements[k + 1], length);
 			output->length += l;
 		}
 	}
 	return 1;
 }
