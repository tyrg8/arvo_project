commit 7053e97a1511f3a716d4cf8320ea9ef6518dc745
Author: thomp-j <58603847+thomp-j@users.noreply.github.com>
Date:   Sun Aug 6 00:33:08 2023 -0400

    Fix vulnerabilities found by fuzzer. (#6579)
    
    * Fix vulnerabilities found by fuzzer.
    
    * Fix Typo in RWMol.cpp
    
    * Update RWMol.cpp
    
    This is an attempt to double check where the test failure is coming from.
    
    * Update RWMol.cpp
    
    Re-adding changes to test tests.

diff --git a/Code/GraphMol/FileParsers/MolFileParser.cpp b/Code/GraphMol/FileParsers/MolFileParser.cpp
index c28567d06..b383df6b0 100644
--- a/Code/GraphMol/FileParsers/MolFileParser.cpp
+++ b/Code/GraphMol/FileParsers/MolFileParser.cpp
@@ -267,72 +267,84 @@ std::string parseEnhancedStereo(std::istream *inStream, unsigned int &line,
 void ParseOldAtomList(RWMol *mol, const std::string_view &text,
                       unsigned int line) {
   PRECONDITION(mol, "bad mol");
   unsigned int idx;
   try {
     idx = FileParserUtils::stripSpacesAndCast<unsigned int>(text.substr(0, 3)) -
           1;
   } catch (boost::bad_lexical_cast &) {
     std::ostringstream errout;
     errout << "Cannot convert '" << text.substr(0, 3) << "' to int on line "
            << line;
     throw FileParseException(errout.str());
   }
 
   URANGE_CHECK(idx, mol->getNumAtoms());
   QueryAtom a(*(mol->getAtomWithIdx(idx)));
 
   auto *q = new ATOM_OR_QUERY;
   q->setDescription("AtomOr");
 
   switch (text[4]) {
     case 'T':
       q->setNegation(true);
       break;
     case 'F':
       q->setNegation(false);
       break;
     default:
       delete q;
       std::ostringstream errout;
       errout << "Unrecognized atom-list query modifier: '" << text[4]
              << "' on line " << line;
       throw FileParseException(errout.str());
   }
 
   int nQueries;
   try {
     nQueries = FileParserUtils::toInt(text.substr(9, 1));
+  } catch (const std::out_of_range &) {
+    delete q;
+    std::ostringstream errout;
+    errout << "Cannot convert position 9 of '" << text << "' to int on line "
+           << line;
+    throw FileParseException(errout.str());
   } catch (boost::bad_lexical_cast &) {
     delete q;
     std::ostringstream errout;
     errout << "Cannot convert '" << text.substr(9, 1) << "' to int on line "
            << line;
     throw FileParseException(errout.str());
   }
 
   RANGE_CHECK(0, nQueries, 5);
   for (int i = 0; i < nQueries; i++) {
     int pos = 11 + i * 4;
     int atNum;
     try {
       atNum = FileParserUtils::toInt(text.substr(pos, 3));
+    } catch (const std::out_of_range &) {
+      delete q;
+      std::ostringstream errout;
+      errout << "Cannot convert position " << pos << " of '" << text
+             << "' to int on line " << line;
+      throw FileParseException(errout.str());
     } catch (boost::bad_lexical_cast &) {
       delete q;
       std::ostringstream errout;
       errout << "Cannot convert '" << text.substr(pos, 3) << "' to int on line "
              << line;
       throw FileParseException(errout.str());
     }
     RANGE_CHECK(0, atNum, 200);  // goofy!
     q->addChild(
         QueryAtom::QUERYATOM_QUERY::CHILD_TYPE(makeAtomNumQuery(atNum)));
     if (!i) {
       a.setAtomicNum(atNum);
     }
   }
 
   a.setQuery(q);
   a.setProp(common_properties::_MolFileAtomQuery, 1);
 
   mol->replaceAtom(idx, &a);
 }
diff --git a/Code/GraphMol/RWMol.cpp b/Code/GraphMol/RWMol.cpp
index 858bf5b4a..e92e6cc5e 100644
--- a/Code/GraphMol/RWMol.cpp
+++ b/Code/GraphMol/RWMol.cpp
@@ -131,37 +131,39 @@ unsigned int RWMol::addAtom(bool updateLabel) {
 void RWMol::replaceAtom(unsigned int idx, Atom *atom_pin, bool,
                         bool preserveProps) {
   PRECONDITION(atom_pin, "bad atom passed to replaceAtom");
   URANGE_CHECK(idx, getNumAtoms());
   Atom *atom_p = atom_pin->copy();
   atom_p->setOwningMol(this);
   atom_p->setIdx(idx);
   MolGraph::vertex_descriptor vd = boost::vertex(idx, d_graph);
   if (preserveProps) {
     const bool replaceExistingData = false;
     atom_p->updateProps(*d_graph[vd], replaceExistingData);
   }
 
   const auto orig_p = d_graph[vd];
   delete orig_p;
   d_graph[vd] = atom_p;
 
   // handle bookmarks
   for (auto &ab : d_atomBookmarks) {
     for (auto &elem : ab.second) {
       if (elem == orig_p) {
         elem = atom_p;
       }
     }
   }
 
   // handle stereo group
   for (auto &group : d_stereo_groups) {
     auto atoms = group.getAtoms();
     auto aiter = std::find(atoms.begin(), atoms.end(), orig_p);
-    if (aiter != atoms.end()) {
+    while (aiter != atoms.end()) {
       *aiter = atom_p;
-      group = StereoGroup(group.getGroupType(), std::move(atoms));
+      ++aiter;
+      aiter = std::find(aiter, atoms.end(), orig_p);
     }
+    group = StereoGroup(group.getGroupType(), std::move(atoms));
   }
 };
 
