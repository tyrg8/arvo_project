commit 39aca01d21fb85809e5690b6b3331d247c475d80
Author: Armando Montanez <amontanez@google.com>
Date:   Mon Jan 8 22:32:53 2024 +0000

    pw_stream: Make stream adapters use reinterpret_cast
    
    pw_stream uses static_cast() to cast types up to a generic Stream and
    then down to a smaller API subset (e.g. stream::Writer) using static
    cast. This downcast can sometimes be to a completely different type.
    While in practice this is usually fine, it technically relies on
    undefined behavior, which is caught during fuzz testing. This change
    changes the relevant static_cast() calls to be reinterpret_cast() to do
    two things:
    
    1. Prevent UBSAN from tripping.
    2. More clearly illustrate that *technically* pw::stream::Stream relies
       on undefined behavior when casting.
    
    Fixes: b/314829006
    Change-Id: I7b5afb72e07cd8a9969223cab7ea91711ab00542
    Reviewed-on: https://pigweed-review.googlesource.com/c/pigweed/pigweed/+/186766
    Reviewed-by: Taylor Cramer <cramertj@google.com>
    Commit-Queue: Armando Montanez <amontanez@google.com>
    Reviewed-by: Wyatt Hepler <hepler@google.com>

diff --git a/pw_stream/public/pw_stream/stream.h b/pw_stream/public/pw_stream/stream.h
index f8b69056b..ca87c6dc9 100644
--- a/pw_stream/public/pw_stream/stream.h
+++ b/pw_stream/public/pw_stream/stream.h
@@ -457,174 +457,160 @@ class NonSeekableWriter : public Writer {
 /// A Stream that supports both reading and writing.
 ///
 /// Use in APIs when:
 ///   * Must both read from and write to a stream.
 ///   * May or may not need seeking. Use a SeekableReaderWriter& if seeking is
 ///     required.
 ///
 /// Inherit from when:
 ///   * Cannot extend ReaderWriter directly. Instead, extend
 ///     SeekableReaderWriter, NonSeekableReaderWriter, or (rarely)
 ///     RelativeSeekableReaderWriter, as appropriate.
 ///
 /// A ReaderWriter may or may not support seeking. Check seekable() or try
 /// calling Seek() to determine if the stream is seekable.
 class ReaderWriter : public Stream {
  public:
   // ReaderWriters may be used as Readers.
-  constexpr Reader& as_reader() {
-    return static_cast<Reader&>(static_cast<Stream&>(*this));
-  }
-  constexpr const Reader& as_reader() const {
-    return static_cast<const Reader&>(static_cast<const Stream&>(*this));
+  Reader& as_reader() { return *std::launder(reinterpret_cast<Reader*>(this)); }
+  const Reader& as_reader() const {
+    return *std::launder(reinterpret_cast<const Reader*>(this));
   }
 
-  constexpr operator Reader&() { return as_reader(); }
-  constexpr operator const Reader&() const { return as_reader(); }
+  operator Reader&() { return as_reader(); }
+  operator const Reader&() const { return as_reader(); }
 
   // ReaderWriters may be used as Writers.
-  constexpr Writer& as_writer() {
-    return static_cast<Writer&>(static_cast<Stream&>(*this));
-  }
-  constexpr const Writer& as_writer() const {
-    return static_cast<const Writer&>(static_cast<const Stream&>(*this));
+  Writer& as_writer() { return *std::launder(reinterpret_cast<Writer*>(this)); }
+  const Writer& as_writer() const {
+    return *std::launder(reinterpret_cast<const Writer*>(this));
   }
 
-  constexpr operator Writer&() { return as_writer(); }
-  constexpr operator const Writer&() const { return as_writer(); }
+  operator Writer&() { return as_writer(); }
+  operator const Writer&() const { return as_writer(); }
 
  private:
   friend class RelativeSeekableReaderWriter;
   friend class NonSeekableReaderWriter;
 
   constexpr ReaderWriter(Seekability seekability)
       : Stream(true, true, seekability) {}
 };
 
 /// A ReaderWriter that supports at least relative seeking within some range of
 /// the current position. Seeking beyond that or from other origins may or may
 /// not be supported. The extent to which seeking is possible is NOT exposed by
 /// this API.
 ///
 /// Use in APIs when:
 ///   * Relative seeking is required. Usage in APIs should be rare; generally
 ///     ReaderWriter should be used instead.
 ///
 /// Inherit from when:
 ///   * Implementing a ReaderWriter that can only support seeking near the
 ///     current position.
 ///
 /// A buffered ReaderWriter that only supports seeking within its buffer is a
 /// good example of a RelativeSeekableReaderWriter.
 class RelativeSeekableReaderWriter : public ReaderWriter {
  public:
   // RelativeSeekableReaderWriters may be used as RelativeSeekableReaders or
   // RelativeSeekableWriters.
-  constexpr operator RelativeSeekableReader&() {
-    return static_cast<RelativeSeekableReader&>(static_cast<Stream&>(*this));
+  operator RelativeSeekableReader&() {
+    return *std::launder(reinterpret_cast<RelativeSeekableReader*>(this));
   }
-  constexpr operator const RelativeSeekableReader&() const {
-    return static_cast<const RelativeSeekableReader&>(
-        static_cast<const Stream&>(*this));
+  operator const RelativeSeekableReader&() const {
+    return *std::launder(reinterpret_cast<const RelativeSeekableReader*>(this));
   }
-  constexpr operator RelativeSeekableWriter&() {
-    return static_cast<RelativeSeekableWriter&>(static_cast<Stream&>(*this));
+  operator RelativeSeekableWriter&() {
+    return *std::launder(reinterpret_cast<RelativeSeekableWriter*>(this));
   }
-  constexpr operator const RelativeSeekableWriter&() const {
-    return static_cast<const RelativeSeekableWriter&>(
-        static_cast<const Stream&>(*this));
+  operator const RelativeSeekableWriter&() const {
+    return *std::launder(reinterpret_cast<const RelativeSeekableWriter*>(this));
   }
 
  protected:
   constexpr RelativeSeekableReaderWriter()
       : ReaderWriter(Seekability::kRelative) {}
 
  private:
   friend class SeekableReaderWriter;
 
   constexpr RelativeSeekableReaderWriter(Seekability seekability)
       : ReaderWriter(seekability) {}
 };
 
 /// A ReaderWriter that fully supports seeking.
 ///
 /// Use in APIs when:
 ///   * Absolute seeking is required. Use ReaderWriter& if seeking is not
 ///     required or seek failures can be handled gracefully.
 ///
 /// Inherit from when:
 ///   * Implementing a writer that supports absolute seeking.
 ///
 class SeekableReaderWriter : public RelativeSeekableReaderWriter {
  public:
   // SeekableReaderWriters may be used as SeekableReaders.
-  constexpr SeekableReader& as_seekable_reader() {
-    return static_cast<SeekableReader&>(static_cast<Stream&>(*this));
+  SeekableReader& as_seekable_reader() {
+    return *std::launder(reinterpret_cast<SeekableReader*>(this));
   }
-  constexpr const SeekableReader& as_seekable_reader() const {
-    return static_cast<const SeekableReader&>(
-        static_cast<const Stream&>(*this));
+  const SeekableReader& as_seekable_reader() const {
+    return *std::launder(reinterpret_cast<const SeekableReader*>(this));
   }
 
-  constexpr operator SeekableReader&() { return as_seekable_reader(); }
-  constexpr operator const SeekableReader&() const {
-    return as_seekable_reader();
-  }
+  operator SeekableReader&() { return as_seekable_reader(); }
+  operator const SeekableReader&() const { return as_seekable_reader(); }
 
   // SeekableReaderWriters may be used as SeekableWriters.
-  constexpr SeekableWriter& as_seekable_writer() {
-    return static_cast<SeekableWriter&>(static_cast<Stream&>(*this));
+  SeekableWriter& as_seekable_writer() {
+    return *std::launder(reinterpret_cast<SeekableWriter*>(this));
   }
-  constexpr const SeekableWriter& as_seekable_writer() const {
-    return static_cast<const SeekableWriter&>(
-        static_cast<const Stream&>(*this));
+  const SeekableWriter& as_seekable_writer() const {
+    return *std::launder(reinterpret_cast<const SeekableWriter*>(this));
   }
 
-  constexpr operator SeekableWriter&() { return as_seekable_writer(); }
-  constexpr operator const SeekableWriter&() const {
-    return as_seekable_writer();
-  }
+  operator SeekableWriter&() { return as_seekable_writer(); }
+  operator const SeekableWriter&() const { return as_seekable_writer(); }
 
  protected:
   constexpr SeekableReaderWriter()
       : RelativeSeekableReaderWriter(Seekability::kAbsolute) {}
 };
 
 /// A ReaderWriter that does not support seeking. The Seek() method is hidden.
 ///
 /// Use in APIs when:
 ///   * Do NOT use in APIs! If seeking is not required, use ReaderWriter&
 ///     instead.
 ///
 /// Inherit from when:
 ///   * Implementing a ReaderWriter that does not support seeking.
 ///
 class NonSeekableReaderWriter : public ReaderWriter {
  public:
   // NonSeekableReaderWriters may be used as either NonSeekableReaders or
   // NonSeekableWriters. Note that NonSeekableReaderWriter& generally should not
   // be used in APIs, which should accept ReaderWriter& instead.
-  constexpr operator NonSeekableReader&() {
-    return static_cast<NonSeekableReader&>(static_cast<Stream&>(*this));
+  operator NonSeekableReader&() {
+    return *std::launder(reinterpret_cast<NonSeekableReader*>(this));
   }
-  constexpr operator const NonSeekableReader&() const {
-    return static_cast<const NonSeekableReader&>(
-        static_cast<const Stream&>(*this));
+  operator const NonSeekableReader&() const {
+    return *std::launder(reinterpret_cast<const NonSeekableReader*>(this));
   }
-  constexpr operator NonSeekableWriter&() {
-    return static_cast<NonSeekableWriter&>(static_cast<Stream&>(*this));
+  operator NonSeekableWriter&() {
+    return *std::launder(reinterpret_cast<NonSeekableWriter*>(this));
   }
-  constexpr operator const NonSeekableWriter&() const {
-    return static_cast<const NonSeekableWriter&>(
-        static_cast<const Stream&>(*this));
+  operator const NonSeekableWriter&() const {
+    return *std::launder(reinterpret_cast<const NonSeekableWriter*>(this));
   }
 
  protected:
   constexpr NonSeekableReaderWriter() : ReaderWriter(Seekability::kNone) {}
 
  private:
   using ReaderWriter::Seek;
 
   Status DoSeek(ptrdiff_t, Whence) final { return Status::Unimplemented(); }
 };
 
 }  // namespace pw::stream
diff --git a/pw_transfer/public/pw_transfer/handler.h b/pw_transfer/public/pw_transfer/handler.h
index 55df84db1..65f33ce09 100644
--- a/pw_transfer/public/pw_transfer/handler.h
+++ b/pw_transfer/public/pw_transfer/handler.h
@@ -142,20 +142,19 @@ class WriteOnlyHandler : public Handler {
 class ReadWriteHandler : public Handler {
  public:
   constexpr ReadWriteHandler(uint32_t resource_id)
       : Handler(resource_id, static_cast<stream::Reader*>(nullptr)) {}
-  constexpr ReadWriteHandler(uint32_t resource_id,
-                             stream::ReaderWriter& reader_writer)
+  ReadWriteHandler(uint32_t resource_id, stream::ReaderWriter& reader_writer)
       : Handler(resource_id, &static_cast<stream::Reader&>(reader_writer)) {}
 
   ~ReadWriteHandler() override = default;
 
   // Both reads and writes are supported.
   Status PrepareRead() override { return OkStatus(); }
   Status PrepareWrite() override { return OkStatus(); }
 
   void set_reader_writer(stream::ReaderWriter& reader_writer) {
     set_reader(reader_writer);
   }
 };
 
 }  // namespace pw::transfer
