commit a9010da8a4af17479c706f2cf4e8c6acdc1585ce
Author: Greg Landrum <greg.landrum@gmail.com>
Date:   Wed Jul 22 16:57:31 2020 +0200

    Small bug fixes and cleanups from fuzz testing (#3299)
    
    * fix ossfuzz issue 24074
    
    * fix ossfuzz issue 23896
    
    * switch to throw exceptions when reading ints/floats
    
    * remove extraneous benchmarking code
    
    * change type of AH query
    
    * confirm an invariant while finding rings
    
    * no sense in adding these tests to github
    
    * switch to use fail() instead of failbit
    switch to acceptSpaces by default

diff --git a/Code/GraphMol/FileParsers/FileParserUtils.h b/Code/GraphMol/FileParsers/FileParserUtils.h
index 3d1726623..c99a1235c 100644
--- a/Code/GraphMol/FileParsers/FileParserUtils.h
+++ b/Code/GraphMol/FileParsers/FileParserUtils.h
@@ -29,12 +29,12 @@ T stripSpacesAndCast(const std::string &input, bool acceptSpaces = false) {
   std::string trimmed = boost::trim_copy(input);
   if (acceptSpaces && trimmed == "") {
     return 0;
   } else {
     return boost::lexical_cast<T>(trimmed);
   }
 }
 RDKIT_FILEPARSERS_EXPORT int toInt(const std::string &input,
-                                   bool acceptSpaces = false);
+                                   bool acceptSpaces = true);
 RDKIT_FILEPARSERS_EXPORT double toDouble(const std::string &input,
                                          bool acceptSpaces = true);
 
diff --git a/Code/GraphMol/FileParsers/MolFileParser.cpp b/Code/GraphMol/FileParsers/MolFileParser.cpp
index 667ea393e..8c995bbbc 100644
--- a/Code/GraphMol/FileParsers/MolFileParser.cpp
+++ b/Code/GraphMol/FileParsers/MolFileParser.cpp
@@ -58,25 +58,35 @@ namespace FileParserUtils {
 int toInt(const std::string &input, bool acceptSpaces) {
   int res = 0;
   // don't need to worry about locale stuff here because
   // we're not going to have delimiters
-  res = strtol(input.c_str(), nullptr, 10);
-  if (!res && !acceptSpaces && input[0] == ' ') {
-    std::string trimmed = boost::trim_copy(input);
-    if (trimmed.length() == 0) {
+
+  // sanity check on the input since strtol doesn't do it for us:
+  const char *txt = input.c_str();
+  while (*txt != '\x00') {
+    if ((*txt >= '0' && *txt <= '9') || (acceptSpaces && *txt == ' ') ||
+        *txt == '+' || *txt == '-') {
+      ++txt;
+    } else {
       throw boost::bad_lexical_cast();
     }
   }
+  res = strtol(input.c_str(), nullptr, 10);
   return res;
 }
 
 double toDouble(const std::string &input, bool acceptSpaces) {
-  double res = atof(input.c_str());
-  if (res == 0.0 && !acceptSpaces && input[0] == ' ') {
-    std::string trimmed = boost::trim_copy(input);
-    if (trimmed.length() == 0) {
+  // sanity check on the input since strtol doesn't do it for us:
+  const char *txt = input.c_str();
+  // check for ',' and '.' because locale
+  while (*txt != '\x00') {
+    if ((*txt >= '0' && *txt <= '9') || (acceptSpaces && *txt == ' ') ||
+        *txt == '+' || *txt == '-' || *txt == ',' || *txt == '.') {
+      ++txt;
+    } else {
       throw boost::bad_lexical_cast();
     }
   }
+  double res = atof(input.c_str());
   return res;
 }
 
@@ -821,53 +831,53 @@ void ParseZBOLine(RWMol *mol, const std::string &text, unsigned int line) {
 void ParseMarvinSmartsLine(RWMol *mol, const std::string &text,
                            unsigned int line) {
   const unsigned int atomNumStart = 10;
   const unsigned int smartsStart = 15;
   const unsigned int SMA = 7;
   // M  MRV SMA   1 [*;A]
   // 01234567890123456789
   //           1111111111
-  if (text.substr(SMA, 3) != "SMA") {
+  if (text.substr(0, 10) != "M  MRV SMA") {
     return;
   }
 
   unsigned int idx;
   std::string idxTxt = text.substr(atomNumStart, smartsStart - atomNumStart);
   try {
     idx = FileParserUtils::stripSpacesAndCast<unsigned int>(idxTxt) - 1;
   } catch (boost::bad_lexical_cast &) {
     std::ostringstream errout;
     errout << "Cannot convert '" << idxTxt << "' to an atom index on line "
            << line;
     throw FileParseException(errout.str());
   }
 
   URANGE_CHECK(idx, mol->getNumAtoms());
   // Should we check the validity of the marvin line here?  Should we
   // automatically
   //   Add these as recursive smarts?  I tend to think so...
   std::string sma = text.substr(smartsStart);
   Atom *at = mol->getAtomWithIdx(idx);
   at->setProp(common_properties::MRV_SMA, sma);
   RWMol *m = nullptr;
   try {
     m = SmartsToMol(sma);
   } catch (...) {
     // Is this every used?
   }
 
   if (m) {
     QueryAtom::QUERYATOM_QUERY *query = new RecursiveStructureQuery(m);
     if (!at->hasQuery()) {
       QueryAtom qAt(*at);
       int oidx = at->getIdx();
       mol->replaceAtom(oidx, &qAt);
       at = mol->getAtomWithIdx(oidx);
     }
     at->expandQuery(query, Queries::COMPOSITE_AND);
     at->setProp(common_properties::_MolFileAtomQuery, 1);
   } else {
     std::ostringstream errout;
     errout << "Cannot parse smarts: '" << sma << "' on line " << line;
     throw FileParseException(errout.str());
   }
 }
diff --git a/Code/GraphMol/FindRings.cpp b/Code/GraphMol/FindRings.cpp
index 98aab4600..1bc83c2f1 100644
--- a/Code/GraphMol/FindRings.cpp
+++ b/Code/GraphMol/FindRings.cpp
@@ -154,48 +154,49 @@ typedef RINGINVAR_INT_VECT_MAP::const_iterator RINGINVAR_INT_VECT_MAP_CI;
 void findSSSRforDupCands(const ROMol &mol, VECT_INT_VECT &res,
                          RINGINVAR_SET &invars, const INT_INT_VECT_MAP dupMap,
                          const RINGINVAR_INT_VECT_MAP &dupD2Cands,
                          INT_VECT &atomDegrees,
                          boost::dynamic_bitset<> activeBonds) {
   BFSWorkspace bfs_workspace;
   for (const auto &dupD2Cand : dupD2Cands) {
     const INT_VECT &dupCands = dupD2Cand.second;
     if (dupCands.size() > 1) {
       // we have duplicate candidates.
       VECT_INT_VECT nrings;
       auto minSiz = static_cast<unsigned int>(MAX_INT);
       for (int dupCand : dupCands) {
         // now break bonds for all the d2 nodes for that give the same rings as
         // with (*dupi) and recompute smallest ring with (*dupi)
         INT_VECT atomDegreesCopy = atomDegrees;
         boost::dynamic_bitset<> activeBondsCopy = activeBonds;
         INT_SET changed;
         auto dmci = dupMap.find(dupCand);
+        CHECK_INVARIANT(dmci != dupMap.end(), "duplicate could not be found");
         for (int dni : dmci->second) {
           trimBonds(dni, mol, changed, atomDegreesCopy, activeBondsCopy);
         }
 
         // now find the smallest ring/s around (*dupi)
         VECT_INT_VECT srings;
         bfs_workspace.smallestRingsBfs(mol, dupCand, srings, activeBondsCopy);
         for (VECT_INT_VECT_CI sri = srings.begin(); sri != srings.end();
              ++sri) {
           if (sri->size() < minSiz) {
             minSiz = rdcast<unsigned int>(sri->size());
           }
           nrings.push_back((*sri));
         }
       }
 
       for (VECT_INT_VECT_CI nri = nrings.begin(); nri != nrings.end(); ++nri) {
         if (nri->size() == minSiz) {
           std::uint32_t invr =
               RingUtils::computeRingInvariant(*nri, mol.getNumAtoms());
           if (invars.find(invr) == invars.end()) {
             res.push_back((*nri));
             invars.insert(invr);
           }
         }
       }  // end of loop over new rings found
     }    // end if (dupCand.size() > 1)
   }      // end of loop over all set of duplicate candidates
 }
diff --git a/Code/GraphMol/QueryOps.cpp b/Code/GraphMol/QueryOps.cpp
index 468358233..23212f5f2 100644
--- a/Code/GraphMol/QueryOps.cpp
+++ b/Code/GraphMol/QueryOps.cpp
@@ -363,10 +363,10 @@ ATOM_EQUALS_QUERY *makeAAtomQuery() {
   ATOM_EQUALS_QUERY *res = makeAtomNumQuery(1);
   res->setNegation(true);
   res->setTypeLabel("A");
   return res;
 }
-ATOM_EQUALS_QUERY *makeAHAtomQuery() {
-  auto *res = rdcast<ATOM_EQUALS_QUERY *>(makeAtomNullQuery());
+ATOM_NULL_QUERY *makeAHAtomQuery() {
+  auto *res = makeAtomNullQuery();
   res->setTypeLabel("AH");
   return res;
 }
diff --git a/Code/GraphMol/QueryOps.h b/Code/GraphMol/QueryOps.h
index a7d79e263..b19cc13c0 100644
--- a/Code/GraphMol/QueryOps.h
+++ b/Code/GraphMol/QueryOps.h
@@ -561,7 +561,7 @@ RDKIT_GRAPHMOL_EXPORT ATOM_EQUALS_QUERY *makeAtomRingBondCountQuery(int what);
 //! returns a Query for matching generic A atoms (heavy atoms)
 RDKIT_GRAPHMOL_EXPORT ATOM_EQUALS_QUERY *makeAAtomQuery();
 //! returns a Query for matching generic AH atoms (any atom)
-RDKIT_GRAPHMOL_EXPORT ATOM_EQUALS_QUERY *makeAHAtomQuery();
+RDKIT_GRAPHMOL_EXPORT ATOM_NULL_QUERY *makeAHAtomQuery();
 //! returns a Query for matching generic Q atoms (heteroatoms)
 RDKIT_GRAPHMOL_EXPORT ATOM_OR_QUERY *makeQAtomQuery();
 //! returns a Query for matching generic QH atoms (heteroatom or H)
diff --git a/Code/GraphMol/ROMol.cpp b/Code/GraphMol/ROMol.cpp
index 3a9240f50..1c84fca98 100644
--- a/Code/GraphMol/ROMol.cpp
+++ b/Code/GraphMol/ROMol.cpp
@@ -202,10 +202,9 @@ const Atom *ROMol::getAtomWithIdx(unsigned int idx) const {
 // returns the first inserted atom with the given bookmark
 Atom *ROMol::getAtomWithBookmark(int mark) {
   PRECONDITION(d_atomBookmarks.count(mark) != 0, "atom bookmark not found");
   PRECONDITION(d_atomBookmarks[mark].begin() != d_atomBookmarks[mark].end(),
                "atom bookmark not found");
-
   return *(d_atomBookmarks[mark].begin());
 };
 
 // returns all atoms with the given bookmark
diff --git a/Code/GraphMol/SubstanceGroup.cpp b/Code/GraphMol/SubstanceGroup.cpp
index 2209f04c9..a4f26690a 100644
--- a/Code/GraphMol/SubstanceGroup.cpp
+++ b/Code/GraphMol/SubstanceGroup.cpp
@@ -59,6 +59,7 @@ void SubstanceGroup::addAtomWithIdx(unsigned int idx) {
 void SubstanceGroup::addAtomWithBookmark(int mark) {
   PRECONDITION(dp_mol, "bad mol");
   Atom *atom = dp_mol->getUniqueAtomWithBookmark(mark);
+  PRECONDITION(atom, "atom not found");
   d_atoms.push_back(atom->getIdx());
 }
 
diff --git a/Code/RDGeneral/StreamOps.h b/Code/RDGeneral/StreamOps.h
index cb53ccbf1..e26bb0e64 100644
--- a/Code/RDGeneral/StreamOps.h
+++ b/Code/RDGeneral/StreamOps.h
@@ -142,39 +142,67 @@ inline void appendPackedIntToStream(std::stringstream &ss,
 //! Reads an integer from a stream in packed format and returns the result.
 inline boost::uint32_t readPackedIntFromStream(std::stringstream &ss) {
   boost::uint32_t val, num;
   int shift, offset;
   char tmp;
   ss.read(&tmp, sizeof(tmp));
+  if (ss.fail()) {
+    throw std::runtime_error("failed to read from stream");
+  }
+
   val = UCHAR(tmp);
   offset = 0;
   if ((val & 1) == 0) {
     shift = 1;
   } else if ((val & 3) == 1) {
     ss.read((char *)&tmp, sizeof(tmp));
+    if (ss.fail()) {
+      throw std::runtime_error("failed to read from stream");
+    }
+
     val |= (UCHAR(tmp) << 8);
     shift = 2;
     offset = (1 << 7);
   } else if ((val & 7) == 3) {
     ss.read((char *)&tmp, sizeof(tmp));
+    if (ss.fail()) {
+      throw std::runtime_error("failed to read from stream");
+    }
+
     val |= (UCHAR(tmp) << 8);
     ss.read((char *)&tmp, sizeof(tmp));
+    if (ss.fail()) {
+      throw std::runtime_error("failed to read from stream");
+    }
+
     val |= (UCHAR(tmp) << 16);
     shift = 3;
     offset = (1 << 7) + (1 << 14);
   } else {
     ss.read((char *)&tmp, sizeof(tmp));
+    if (ss.fail()) {
+      throw std::runtime_error("failed to read from stream");
+    }
+
     val |= (UCHAR(tmp) << 8);
     ss.read((char *)&tmp, sizeof(tmp));
+    if (ss.fail()) {
+      throw std::runtime_error("failed to read from stream");
+    }
+
     val |= (UCHAR(tmp) << 16);
     ss.read((char *)&tmp, sizeof(tmp));
+    if (ss.fail()) {
+      throw std::runtime_error("failed to read from stream");
+    }
+
     val |= (UCHAR(tmp) << 24);
     shift = 3;
     offset = (1 << 7) + (1 << 14) + (1 << 21);
   }
   num = (val >> shift) + offset;
   // num = EndianSwapBytes<LITTLE_ENDIAN_ORDER,HOST_ENDIAN_ORDER>(num);
   return num;
 }
 
 //! Reads an integer from a char * in packed format and returns the result.
 //!  The argument is advanced
@@ -246,7 +274,10 @@ template <typename T>
 void streamRead(std::istream &ss, T &loc) {
   T tloc;
   ss.read((char *)&tloc, sizeof(T));
+  if (ss.fail()) {
+    throw std::runtime_error("failed to read from stream");
+  }
   loc = EndianSwapBytes<LITTLE_ENDIAN_ORDER, HOST_ENDIAN_ORDER>(tloc);
 }
 
 //! special case for string
@@ -259,9 +290,15 @@ void streamRead(std::istream &ss, T &obj, int version) {
 inline void streamRead(std::istream &ss, std::string &what, int version) {
   RDUNUSED_PARAM(version);
   unsigned int l;
   ss.read((char *)&l, sizeof(l));
+  if (ss.fail()) {
+    throw std::runtime_error("failed to read from stream");
+  }
   char *buff = new char[l];
   ss.read(buff, sizeof(char) * l);
+  if (ss.fail()) {
+    throw std::runtime_error("failed to read from stream");
+  }
   what = std::string(buff, l);
   delete[] buff;
 };
