commit 84f955dd77e42ffb57cb05a869cb8c8bf68f1e13
Author: Mallikarjun Kamble <mallikarjun.kamble@ittiam.com>
Date:   Thu Apr 27 13:17:22 2023 +0530

    svcdec: Fix for out of range reference index during base mode flag
    
    Bug: 58278
    Test: svc_dec_fuzzer

diff --git a/decoder/svc/isvcd_parse_ebslice.c b/decoder/svc/isvcd_parse_ebslice.c
index 3a92dfe..d805764 100644
--- a/decoder/svc/isvcd_parse_ebslice.c
+++ b/decoder/svc/isvcd_parse_ebslice.c
@@ -218,409 +218,421 @@ WORD32 isvcd_parse_bmb_cabac(svc_dec_lyr_struct_t *ps_svc_lyr_dec, dec_mb_info_t
     /*RESIDUAL FOR Start to end idx*/
     ih264d_parse_residual4x4_cabac(ps_dec, ps_cur_mb_info, 0);
     if(EXCEED_OFFSET(ps_dec->ps_bitstrm)) return ERROR_EOB_TERMINATE_T;
     return OK;
 }
 /*!
  **************************************************************************
  * \if Function name : isvcd_mv_pred_ref_tfr_nby2_ebmb \endif
  *
  * \brief
  *    This function computes the mv pred for b frame
  *
  * \return
  *    0 on Success and Error code otherwise
  **************************************************************************
  */
 WORD32 isvcd_mv_pred_ref_tfr_nby2_ebmb(dec_struct_t *ps_dec, UWORD8 u1_mb_idx, UWORD8 u1_num_mbs)
 {
     svc_dec_lyr_struct_t *ps_svc_lyr_dec = (svc_dec_lyr_struct_t *) ps_dec;
     parse_pmbarams_t *ps_mb_part_info;
     parse_part_params_t *ps_part;
     mv_pred_t *ps_mv_nmb, *ps_mv_nmb_start, *ps_mv_ntop, *ps_mv_ntop_start;
     pic_buffer_t *ps_ref_frame;
     UWORD8 u1_direct_mode_width;
     UWORD8 i, j;
     dec_mb_info_t *ps_cur_mb_info;
     dec_svc_mb_info_t *ps_svc_cur_mb_info;
     const UWORD8 u1_mbaff = ps_dec->ps_cur_slice->u1_mbaff_frame_flag;
     UWORD8 u1_field;
     WORD32 ret = 0;
     WORD16 i2_mv_x, i2_mv_y;
 
     ps_dec->i4_submb_ofst -= (u1_num_mbs - u1_mb_idx) << 4;
     ps_mb_part_info = ps_dec->ps_parse_mb_data;
     ps_part = ps_dec->ps_parse_part_params;
 
     /* N/2 Mb MvPred and Transfer Setup Loop */
     for(i = u1_mb_idx; i < u1_num_mbs; i++, ps_mb_part_info++)
     {
         UWORD8 u1_colz = 0;
         ps_dec->i4_submb_ofst += SUB_BLK_SIZE;
         /* Restore the slice scratch MbX and MbY context */
         ps_cur_mb_info = ps_dec->ps_nmb_info + i;
         ps_svc_cur_mb_info = ps_svc_lyr_dec->ps_svc_nmb_info + i;
         u1_field = ps_cur_mb_info->u1_mb_field_decodingflag;
         ps_mv_nmb_start = ps_dec->ps_mv_cur + (i << 4);
         ps_dec->u2_mbx = ps_cur_mb_info->u2_mbx;
         ps_dec->u2_mby = ps_cur_mb_info->u2_mby;
         ps_dec->u1_currB_type = 0;
         ps_dec->u2_mv_2mb[i & 0x1] = 0;
 
         /* Look for MV Prediction and Reference Transfer in Non-I Mbs */
         if(!ps_mb_part_info->u1_isI_mb)
         {
             UWORD8 u1_blk_no;
             WORD16 i1_ref_idx, i1_ref_idx1;
             UWORD8 u1_pred_mode;
             UWORD8 u1_sub_mb_x, u1_sub_mb_y, u1_sub_mb_num;
             UWORD8 u1_lx, u1_lx_start, u1_lxend, u1_tmp_lx;
             UWORD8 u1_num_part, u1_num_ref, u1_wd, u1_ht;
             UWORD32 *pu4_wt_offst;
             UWORD8 u1_scale_ref, u4_bot_mb;
             deblk_mb_t *ps_cur_deblk_mb = ps_dec->ps_deblk_mbn + i;
             WORD8(*pi1_ref_idx)[MAX_REFIDX_INFO_PER_MB] = ps_mb_part_info->i1_ref_idx;
             WORD8 *pi1_ref_idx0 = pi1_ref_idx[0], *pi1_ref_idx1 = pi1_ref_idx[1];
             UWORD32 **ppu4_wt_ofst = ps_mb_part_info->pu4_wt_offst;
             WORD32 i4_mb_mode_svc;
             UWORD8 u1_motion_pred_flag_l0 = ps_svc_cur_mb_info->au1_motion_pred_flag[0];
             UWORD8 u1_motion_pred_flag_l1 = ps_svc_cur_mb_info->au1_motion_pred_flag[1];
 
             /* MB Level initialisations */
             ps_dec->u4_num_pmbair = i >> u1_mbaff;
             ps_dec->u1_mb_idx_mv = i;
 
             i4_mb_mode_svc = isvcd_interlyr_motion_mode_pred(
                 ps_svc_lyr_dec, ps_cur_mb_info, ps_svc_cur_mb_info, ps_mb_part_info, ps_part);
 
             if((-1 == i4_mb_mode_svc) || (SVC_INTER_MB == i4_mb_mode_svc))
             {
                 ps_mv_ntop_start =
                     ps_mv_nmb_start - (ps_dec->u2_frm_wd_in_mbs << (4 + u1_mbaff)) + 12;
 
                 u1_num_part = ps_mb_part_info->u1_num_part;
                 ps_cur_deblk_mb->u1_mb_type |= (u1_num_part > 1) << 1;
                 u1_direct_mode_width = (1 == ps_mb_part_info->u1_num_part) ? 16 : 8;
 
                 ps_cur_mb_info->u4_pred_info_pkd_idx = ps_dec->u4_pred_info_pkd_idx;
                 ps_cur_mb_info->u1_num_pred_parts = 0;
 
                 /****************************************************/
                 /* weighted u4_ofst pointer calculations, this loop  */
                 /* runs maximum 4 times, even in direct cases       */
                 /****************************************************/
                 u1_scale_ref = u1_mbaff & ps_cur_mb_info->u1_mb_field_decodingflag;
                 u4_bot_mb = 1 - ps_cur_mb_info->u1_topmb;
                 if(ps_dec->ps_cur_pps->u1_wted_bipred_idc)
                 {
                     u1_num_ref = MIN(u1_num_part, 4);
                     if(PART_DIRECT_16x16 != ps_part->u1_is_direct)
                     {
                         for(u1_blk_no = 0; u1_blk_no < u1_num_ref; u1_blk_no++)
                         {
                             i1_ref_idx = MAX(pi1_ref_idx0[u1_blk_no], 0);
                             if(u1_scale_ref) i1_ref_idx >>= 1;
                             i1_ref_idx *= ps_dec->ps_cur_slice->u1_num_ref_idx_lx_active[1];
                             if(u1_scale_ref)
                                 i1_ref_idx += (MAX(pi1_ref_idx1[u1_blk_no], 0) >> 1);
                             else
                                 i1_ref_idx += MAX(pi1_ref_idx1[u1_blk_no], 0);
                             pu4_wt_offst = (UWORD32 *) &ps_dec->pu4_wt_ofsts[2 * X3(i1_ref_idx)];
 
                             if(pi1_ref_idx0[u1_blk_no] < 0) pu4_wt_offst += 1;
 
                             ppu4_wt_ofst[u1_blk_no] = pu4_wt_offst;
                             if(u1_scale_ref && (ps_dec->ps_cur_pps->u1_wted_bipred_idc == 2))
                             {
                                 i1_ref_idx = MAX(pi1_ref_idx0[u1_blk_no], 0);
                                 i1_ref_idx *=
                                     (ps_dec->ps_cur_slice->u1_num_ref_idx_lx_active[1] << 1);
                                 i1_ref_idx += MAX(pi1_ref_idx1[u1_blk_no], 0);
                                 if(u4_bot_mb)
                                 {
                                     i1_ref_idx +=
                                         (ps_dec->ps_cur_slice->u1_num_ref_idx_lx_active[0] << 1) *
                                         (ps_dec->ps_cur_slice->u1_num_ref_idx_lx_active[1] << 1);
                                 }
                                 pu4_wt_offst =
                                     (UWORD32 *) &ps_dec->pu4_mbaff_wt_mat[2 * X3(i1_ref_idx)];
                                 ppu4_wt_ofst[u1_blk_no] = pu4_wt_offst;
                             }
                         }
                     }
                 }
 
                 /**************************************************/
                 /* Loop on Partitions                             */
                 /* direct mode is reflected as a single partition */
                 /**************************************************/
                 for(j = 0; j < u1_num_part; j++, ps_part++)
                 {
                     u1_sub_mb_num = ps_part->u1_sub_mb_num;
                     ps_dec->u1_sub_mb_num = u1_sub_mb_num;
 
                     if(PART_NOT_DIRECT != ps_part->u1_is_direct)
                     {
                         /**************************************************/
                         /* Direct Mode, Call DecodeSpatial/TemporalDirect */
                         /* only (those will in turn call FormMbPartInfo)  */
                         /**************************************************/
                         ret = isvcd_decode_spatial_direct(ps_dec, u1_direct_mode_width,
                                                           ps_cur_mb_info, i);
                         if(ret != OK) return ret;
                         ps_cur_deblk_mb->u1_mb_type |= (ps_dec->u1_currB_type << 1);
                     }
                     else
                     {
                         mv_pred_t s_mvPred = {0};
                         /**************************************************/
                         /* Non Direct Mode, Call Motion Vector Predictor  */
                         /* and FormMbpartInfo                             */
                         /**************************************************/
                         u1_sub_mb_x = u1_sub_mb_num & 0x03;
                         u1_sub_mb_y = u1_sub_mb_num >> 2;
                         u1_blk_no = (u1_num_part < 4)
                                         ? j
                                         : (((u1_sub_mb_y >> 1) << 1) + (u1_sub_mb_x >> 1));
 
                         ps_mv_ntop = ps_mv_ntop_start + u1_sub_mb_x;
                         ps_mv_nmb = ps_mv_nmb_start + u1_sub_mb_num;
 
                         /* Populate the colpic info and reference frames */
                         s_mvPred.i1_ref_frame[0] = pi1_ref_idx0[u1_blk_no];
                         s_mvPred.i1_ref_frame[1] = pi1_ref_idx1[u1_blk_no];
                         u1_pred_mode = ps_part->u1_pred_mode;
                         u1_wd = ps_part->u1_partwidth;
                         u1_ht = ps_part->u1_partheight;
 
                         if(1 != ps_svc_cur_mb_info->u1_base_mode_flag)
                         {
                             u1_lx_start = 0;
                             u1_lxend = 2;
                             if(PRED_L0 == u1_pred_mode)
                             {
                                 s_mvPred.i2_mv[2] = 0;
                                 s_mvPred.i2_mv[3] = 0;
                                 if(0 == (u1_motion_pred_flag_l0 & (1 << u1_blk_no)))
                                 {
                                     u1_lxend = 1;
                                 }
                                 else
                                 {
                                     u1_lxend = 0;
                                 }
                             }
                             else if(PRED_L1 == u1_pred_mode)
                             {
                                 s_mvPred.i2_mv[0] = 0;
                                 s_mvPred.i2_mv[1] = 0;
                                 if(0 == (u1_motion_pred_flag_l1 & (1 << u1_blk_no)))
                                 {
                                     u1_lx_start = 1;
                                 }
                                 else
                                 {
                                     u1_lx_start = 2;
                                 }
                             }
                             else  // Bi Pred
                             {
                                 if(0 == (u1_motion_pred_flag_l0 & (1 << u1_blk_no)))
                                 {
                                     u1_lxend = 1;
                                 }
                                 if(0 == (u1_motion_pred_flag_l1 & (1 << u1_blk_no)))
                                 {
                                     u1_lx_start = 1;
                                 }
                                 if((0 != (u1_motion_pred_flag_l0 & (1 << u1_blk_no))) &&
                                    (0 != (u1_motion_pred_flag_l1 & (1 << u1_blk_no))))
                                 {
                                     u1_lx_start = 0;
                                     u1_lxend = 0;
                                 }
                                 if((0 == (u1_motion_pred_flag_l0 & (1 << u1_blk_no))) &&
                                    (0 == (u1_motion_pred_flag_l1 & (1 << u1_blk_no))))
                                 {
                                     u1_lx_start = 0;
                                     u1_lxend = 2;
                                 }
                             }
                             ps_dec->pf_mvpred(ps_dec, ps_cur_mb_info, ps_mv_nmb, ps_mv_ntop,
                                               &s_mvPred, u1_sub_mb_num, u1_wd, u1_lx_start,
                                               u1_lxend, ps_cur_mb_info->u1_mb_mc_mode);
                         }
 
                         /* for generic case based on pred mode derived / signalled */
                         u1_lx_start = 0;
                         u1_lxend = 2;
                         if(PRED_L0 == u1_pred_mode)
                         {
                             s_mvPred.i2_mv[2] = 0;
                             s_mvPred.i2_mv[3] = 0;
                             u1_lxend = 1;
                         }
                         if(PRED_L1 == u1_pred_mode)
                         {
                             s_mvPred.i2_mv[0] = 0;
                             s_mvPred.i2_mv[1] = 0;
                             u1_lx_start = 1;
                         }
 
                         /**********************************************************/
                         /* Loop on number of predictors, 1 Each for Forw Backw    */
                         /* Loop 2 times for BiDirect mode                         */
                         /**********************************************************/
                         for(u1_lx = u1_lx_start; u1_lx < u1_lxend; u1_lx++)
                         {
                             UWORD8 u1_motion_pred_flag =
                                 u1_lx ? u1_motion_pred_flag_l1 : u1_motion_pred_flag_l0;
 
                             if((0 != (u1_motion_pred_flag & (1 << u1_blk_no))) ||
                                (ps_svc_cur_mb_info->u1_base_mode_flag))
                             {
                                 isvcd_retrive_infer_mode_mv(ps_svc_lyr_dec, &s_mvPred, u1_lx,
                                                             u1_sub_mb_num);
                             }
                             /********************************************************/
                             /* Predict Mv                                           */
                             /* Add Mv Residuals and store back                      */
                             /********************************************************/
                             u1_tmp_lx = (u1_lx << 1);
                             i1_ref_idx = s_mvPred.i1_ref_frame[u1_lx];
+                            /********************************************************************/
+                            /* If reference index is inferred from the base layer and it is     */
+                            /* exceeding the number of active reference in the current layer.   */
+                            /* Then reference index is clipped to the max in the current layer  */
+                            /********************************************************************/
+                            if(ps_svc_cur_mb_info->u1_base_mode_flag == 1)
+                            {
+                                if(i1_ref_idx > (ps_dec->ps_cur_slice->u1_num_ref_idx_lx_active[u1_lx] - 1))
+                                {
+                                    i1_ref_idx = ps_dec->ps_cur_slice->u1_num_ref_idx_lx_active[u1_lx] - 1;
+                                }
+                            }
                             if(0 == ps_svc_cur_mb_info->u1_base_mode_flag)
                             {
                                 i2_mv_x = ps_mv_nmb->i2_mv[u1_tmp_lx];
                                 i2_mv_y = ps_mv_nmb->i2_mv[u1_tmp_lx + 1];
 
                                 i2_mv_x += s_mvPred.i2_mv[u1_tmp_lx];
                                 i2_mv_y += s_mvPred.i2_mv[u1_tmp_lx + 1];
 
                                 s_mvPred.i2_mv[u1_tmp_lx] = i2_mv_x;
                                 s_mvPred.i2_mv[u1_tmp_lx + 1] = i2_mv_y;
                             }
                             else
                             {
                                 i2_mv_x = s_mvPred.i2_mv[u1_tmp_lx];
                                 i2_mv_y = s_mvPred.i2_mv[u1_tmp_lx + 1];
                             }
 
                             /********************************************************/
                             /* Transfer setup call                                  */
                             /* convert RefIdx if it is MbAff                        */
                             /* Pass Weight Offset and refFrame                      */
                             /********************************************************/
                             i1_ref_idx1 = i1_ref_idx >> u1_scale_ref;
 
                             if(-1 == i1_ref_idx1) return NOT_OK;
                             if(u1_scale_ref && ((i1_ref_idx & 0x01) != u4_bot_mb))
                                 i1_ref_idx1 += MAX_REF_BUFS;
                             ps_ref_frame = ps_dec->ps_ref_pic_buf_lx[u1_lx][i1_ref_idx1];
 
                             /* Storing Colocated-Zero u4_flag */
                             if(u1_lx == u1_lx_start)
                             {
                                 /* Fill colocated info in MvPred structure */
                                 s_mvPred.u1_col_ref_pic_idx = ps_ref_frame->u1_mv_buf_id;
                                 s_mvPred.u1_pic_type = ps_ref_frame->u1_pic_type;
 
                                 /* Calculating colocated zero information */
                                 u1_colz =
                                     (u1_field << 1) | ((i1_ref_idx == 0) && (ABS(i2_mv_x) <= 1) &&
                                                        (ABS(i2_mv_y) <= 1));
                                 u1_colz |= ps_mb_part_info->u1_col_info[u1_blk_no];
                             }
 
                             pu4_wt_offst = ppu4_wt_ofst[u1_blk_no];
                             {
                                 pred_info_pkd_t *ps_pred_pkd;
                                 WORD16 i2_mv[2];
 
                                 i2_mv[0] = i2_mv_x;
                                 i2_mv[1] = i2_mv_y;
 
                                 ps_pred_pkd = ps_dec->ps_pred_pkd + ps_dec->u4_pred_info_pkd_idx;
                                 ih264d_fill_pred_info(i2_mv, u1_wd, u1_ht, u1_sub_mb_num,
                                                       u1_pred_mode, ps_pred_pkd,
                                                       ps_ref_frame->u1_pic_buf_id, i1_ref_idx,
                                                       pu4_wt_offst, ps_ref_frame->u1_pic_type);
                                 ps_dec->u4_pred_info_pkd_idx++;
                                 ps_cur_mb_info->u1_num_pred_parts++;
                             }
                         }
                         if(ps_mv_nmb)
                         {
                             ih264d_rep_mv_colz(ps_dec, &s_mvPred, ps_mv_nmb, u1_sub_mb_num, u1_colz,
                                                u1_ht, u1_wd);
                         }
                         else
                         {
                             return NOT_OK;
                         }
                     }
                 }
                 /* to take care of 16 parttitions increment for base mode flag case*/
                 if(1 == ps_svc_cur_mb_info->u1_base_mode_flag)
                 {
                     ps_part += (MAX_NUM_MB_PART - u1_num_part);
                 }
             }
             else
             {
                 /* Set zero values in case of Intra Mbs */
                 mv_pred_t s_mvPred = {{0, 0, 0, 0}, {-1, -1}, 0, 0};
                 /* to take care of 16 parttitions increment for base mode flag case*/
                 if(1 != ps_svc_cur_mb_info->u1_base_mode_flag)
                 {
                     return NOT_OK;
                 }
 
                 ps_cur_deblk_mb->u1_mb_type |= D_INTRA_IBL;
                 if((ps_svc_lyr_dec->u1_layer_identifier != TARGET_LAYER) &&
                    (DBLK_ENABLED == ps_dec->ps_cur_slice->u1_disable_dblk_filter_idc))
                 {
                     ps_cur_deblk_mb->u1_deblocking_mode = MB_ENABLE_FILTERING;
                 }
 
                 ps_part += (MAX_NUM_MB_PART);
                 /* Storing colocated zero information */
                 if(ps_mv_nmb_start)
                 {
                     ih264d_rep_mv_colz(ps_dec, &s_mvPred, ps_mv_nmb_start, 0,
                                        (UWORD8) (u1_field << 1), 4, 4);
                 }
                 else
                 {
                     return NOT_OK;
                 }
             }
         }
         else
         {
             /* Set zero values in case of Intra Mbs */
             mv_pred_t s_mvPred = {{0, 0, 0, 0}, {-1, -1}, 0, 0};
             /* Storing colocated zero information */
             if(ps_mv_nmb_start)
             {
                 ih264d_rep_mv_colz(ps_dec, &s_mvPred, ps_mv_nmb_start, 0, (UWORD8) (u1_field << 1),
                                    4, 4);
             }
             else
             {
                 return NOT_OK;
             }
         }
     }
     return OK;
 }
 
 /*!
 **************************************************************************
 * \if Function name : isvcd_parse_bmb_cavlc \endif
 *
 * \brief
 *    This function parses CAVLC syntax of a B MB.
 *
 * \return
 *    0 on Success and Error code otherwise
 **************************************************************************
 */
diff --git a/decoder/svc/isvcd_process_epslice.c b/decoder/svc/isvcd_process_epslice.c
index d23aa5e..cbcce8c 100644
--- a/decoder/svc/isvcd_process_epslice.c
+++ b/decoder/svc/isvcd_process_epslice.c
@@ -163,327 +163,339 @@ WORD32 isvcd_interlyr_motion_mode_pred(svc_dec_lyr_struct_t *ps_svc_lyr_dec,
         i4_mb_mode =
             ps_lyr_mem->pf_inter_lyr_pred(ps_svc_lyr_dec->pv_mode_mv_sample_ctxt, ps_cur_mb_info,
                                           ps_svc_cur_mb_info, ps_dec, ps_mb_part_info, ps_part);
     }
     return i4_mb_mode;
 }
 /*!
  **************************************************************************
  * \if Function name : isvcd_mv_pred_ref_tfr_nby2_epmb \endif
  *
  * \brief
  *
  * \return
  *    0 on Success and Error code otherwise
  **************************************************************************
  */
 WORD32 isvcd_mv_pred_ref_tfr_nby2_epmb(dec_struct_t *ps_dec, UWORD8 u1_mb_idx, UWORD8 u1_num_mbs)
 {
     svc_dec_lyr_struct_t *ps_svc_lyr_dec = (svc_dec_lyr_struct_t *) ps_dec;
     parse_pmbarams_t *ps_mb_part_info;
     parse_part_params_t *ps_part;
     mv_pred_t *ps_mv_nmb, *ps_mv_nmb_start, *ps_mv_ntop, *ps_mv_ntop_start;
     UWORD32 i, j;
     const UWORD32 u1_mbaff = ps_dec->ps_cur_slice->u1_mbaff_frame_flag;
     dec_mb_info_t *ps_cur_mb_info;
     dec_svc_mb_info_t *ps_svc_cur_mb_info;
     WORD32 i2_mv_x, i2_mv_y;
 
     ps_dec->i4_submb_ofst -= (u1_num_mbs - u1_mb_idx) << 4;
     ps_mb_part_info = ps_dec->ps_parse_mb_data;
     ps_part = ps_dec->ps_parse_part_params;
 
     /* N/2 Mb MvPred and Transfer Setup Loop */
     for(i = u1_mb_idx; i < u1_num_mbs; i++, ps_mb_part_info++)
     {
         UWORD32 u1_colz;
         UWORD32 u1_field;
         mv_pred_t s_mvPred = {0};
         mv_pred_t *ps_mv_pred = &s_mvPred;
 
         *ps_mv_pred = ps_dec->s_default_mv_pred;
 
         ps_dec->i4_submb_ofst += SUB_BLK_SIZE;
 
         /* Restore the slice scratch MbX and MbY context */
         ps_cur_mb_info = ps_dec->ps_nmb_info + i;
         ps_svc_cur_mb_info = ps_svc_lyr_dec->ps_svc_nmb_info + i;
         u1_field = ps_cur_mb_info->u1_mb_field_decodingflag;
 
         ps_mv_nmb_start = ps_dec->ps_mv_cur + (i << 4);
         ps_dec->u2_mbx = ps_cur_mb_info->u2_mbx;
         ps_dec->u2_mby = ps_cur_mb_info->u2_mby;
         ps_dec->u2_mv_2mb[i & 0x1] = 0;
 
         /* Look for MV Prediction and Reference Transfer in Non-I Mbs */
         if(!ps_mb_part_info->u1_isI_mb)
         {
             UWORD32 u1_blk_no;
             WORD32 i1_ref_idx, i1_ref_idx1;
             UWORD32 u1_sub_mb_x, u1_sub_mb_y, u1_sub_mb_num;
             UWORD32 u1_num_part, u1_num_ref, u1_wd, u1_ht;
             UWORD32 *pu4_wt_offst, **ppu4_wt_ofst;
             UWORD32 u1_scale_ref, u4_bot_mb;
             WORD8 *pi1_ref_idx = ps_mb_part_info->i1_ref_idx[0];
             pic_buffer_t *ps_ref_frame, **pps_ref_frame;
             deblk_mb_t *ps_cur_deblk_mb = ps_dec->ps_deblk_mbn + i;
             WORD32 i4_mb_mode_svc;
             UWORD8 u1_motion_pred_flag_l0 = ps_svc_cur_mb_info->au1_motion_pred_flag[0];
 
             /* MB Level initialisations */
             ps_dec->u4_num_pmbair = i >> u1_mbaff;
             ps_dec->u1_mb_idx_mv = i;
             ppu4_wt_ofst = ps_mb_part_info->pu4_wt_offst;
             pps_ref_frame = ps_dec->ps_ref_pic_buf_lx[0];
 
             i4_mb_mode_svc = isvcd_interlyr_motion_mode_pred(
                 ps_svc_lyr_dec, ps_cur_mb_info, ps_svc_cur_mb_info, ps_mb_part_info, ps_part);
 
             if((-1 == i4_mb_mode_svc) || (SVC_INTER_MB == i4_mb_mode_svc))
             {
                 ps_mv_ntop_start =
                     ps_mv_nmb_start - (ps_dec->u2_frm_wd_in_mbs << (4 + u1_mbaff)) + 12;
 
                 u1_num_part = ps_mb_part_info->u1_num_part;
                 ps_cur_deblk_mb->u1_mb_type |= (u1_num_part > 1) << 1;
                 ps_cur_mb_info->u4_pred_info_pkd_idx = ps_dec->u4_pred_info_pkd_idx;
                 ps_cur_mb_info->u1_num_pred_parts = 0;
 
                 /****************************************************/
                 /* weighted u4_ofst pointer calculations, this loop  */
                 /* runs maximum 4 times, even in direct cases       */
                 /****************************************************/
                 u1_scale_ref = u1_mbaff & u1_field;
 
                 u4_bot_mb = 1 - ps_cur_mb_info->u1_topmb;
                 if(ps_dec->ps_cur_pps->u1_wted_pred_flag)
                 {
                     u1_num_ref = MIN(u1_num_part, 4);
                     for(u1_blk_no = 0; u1_blk_no < u1_num_ref; u1_blk_no++)
                     {
                         i1_ref_idx = pi1_ref_idx[u1_blk_no];
                         if(u1_scale_ref) i1_ref_idx >>= 1;
                         pu4_wt_offst = (UWORD32 *) &ps_dec->pu4_wt_ofsts[2 * X3(i1_ref_idx)];
                         ppu4_wt_ofst[u1_blk_no] = pu4_wt_offst;
                     }
                 }
                 else
                 {
                     ppu4_wt_ofst[0] = NULL;
                     ppu4_wt_ofst[1] = NULL;
                     ppu4_wt_ofst[2] = NULL;
                     ppu4_wt_ofst[3] = NULL;
                 }
 
                 /**************************************************/
                 /* Loop on Partitions                             */
                 /**************************************************/
                 for(j = 0; j < u1_num_part; j++, ps_part++)
                 {
                     u1_sub_mb_num = ps_part->u1_sub_mb_num;
                     ps_dec->u1_sub_mb_num = u1_sub_mb_num;
 
                     if(PART_NOT_DIRECT != ps_part->u1_is_direct)
                     {
                         /* Mb Skip Mode */
                         /* Setting the default and other members of MvPred Structure */
                         s_mvPred.i2_mv[2] = -1;
                         s_mvPred.i2_mv[3] = -1;
                         s_mvPred.i1_ref_frame[0] = 0;
                         i1_ref_idx = (u1_scale_ref && u4_bot_mb) ? MAX_REF_BUFS : 0;
                         ps_ref_frame = pps_ref_frame[i1_ref_idx];
                         s_mvPred.u1_col_ref_pic_idx = ps_ref_frame->u1_mv_buf_id;
                         s_mvPred.u1_pic_type = ps_ref_frame->u1_pic_type;
                         pu4_wt_offst = (UWORD32 *) &ps_dec->pu4_wt_ofsts[0];
 
                         ps_dec->pf_mvpred(ps_dec, ps_cur_mb_info, ps_mv_nmb_start, ps_mv_ntop_start,
                                           &s_mvPred, 0, 4, 0, 1, MB_SKIP);
 
                         {
                             pred_info_pkd_t *ps_pred_pkd;
                             ps_pred_pkd = ps_dec->ps_pred_pkd + ps_dec->u4_pred_info_pkd_idx;
                             ih264d_fill_pred_info(s_mvPred.i2_mv, 4, 4, 0, PRED_L0, ps_pred_pkd,
                                                   ps_ref_frame->u1_pic_buf_id,
                                                   (i1_ref_idx >> u1_scale_ref), pu4_wt_offst,
                                                   ps_ref_frame->u1_pic_type);
 
                             ps_dec->u4_pred_info_pkd_idx++;
                             ps_cur_mb_info->u1_num_pred_parts++;
                         }
 
                         /* Storing colocated zero information */
                         u1_colz = ((ABS(s_mvPred.i2_mv[0]) <= 1) && (ABS(s_mvPred.i2_mv[1]) <= 1)) +
                                   (u1_field << 1);
 
                         if(ps_mv_nmb_start)
                         {
                             ih264d_rep_mv_colz(ps_dec, &s_mvPred, ps_mv_nmb_start, 0, u1_colz, 4,
                                                4);
                         }
                         else
                         {
                             return NOT_OK;
                         }
                     }
                     else
                     {
                         u1_sub_mb_x = u1_sub_mb_num & 0x03;
                         u1_sub_mb_y = u1_sub_mb_num >> 2;
                         u1_blk_no = (u1_num_part < 4)
                                         ? j
                                         : (((u1_sub_mb_y >> 1) << 1) + (u1_sub_mb_x >> 1));
 
                         ps_mv_ntop = ps_mv_ntop_start + u1_sub_mb_x;
                         ps_mv_nmb = ps_mv_nmb_start + u1_sub_mb_num;
 
                         u1_wd = ps_part->u1_partwidth;
                         u1_ht = ps_part->u1_partheight;
 
                         /* Populate the colpic info and reference frames */
                         i1_ref_idx = pi1_ref_idx[u1_blk_no];
+                        /********************************************************************/
+                        /* If reference index is inferred from the base layer and it is     */
+                        /* exceeding the number of active reference in the current layer.   */
+                        /* Then reference index is clipped to the max in the current layer  */
+                        /********************************************************************/
+                        if(ps_svc_cur_mb_info->u1_base_mode_flag == 1)
+                        {
+                            if(i1_ref_idx > (ps_dec->ps_cur_slice->u1_num_ref_idx_lx_active[0] - 1))
+                            {
+                                i1_ref_idx = ps_dec->ps_cur_slice->u1_num_ref_idx_lx_active[0] - 1;
+                            }
+                        }
                         s_mvPred.i1_ref_frame[0] = i1_ref_idx;
 
                         if((1 != ps_svc_cur_mb_info->u1_base_mode_flag) &&
                            (0 == (u1_motion_pred_flag_l0 & (1 << u1_blk_no))))
                         {
                             /********************************************************/
                             /* Predict Mv                                           */
                             /* Add Mv Residuals and store back                      */
                             /********************************************************/
                             ps_dec->pf_mvpred(ps_dec, ps_cur_mb_info, ps_mv_nmb, ps_mv_ntop,
                                               &s_mvPred, u1_sub_mb_num, u1_wd, 0, 1,
                                               ps_cur_mb_info->u1_mb_mc_mode);
 
                             i2_mv_x = ps_mv_nmb->i2_mv[0];
                             i2_mv_y = ps_mv_nmb->i2_mv[1];
                             i2_mv_x += s_mvPred.i2_mv[0];
                             i2_mv_y += s_mvPred.i2_mv[1];
                             s_mvPred.i2_mv[0] = i2_mv_x;
                             s_mvPred.i2_mv[1] = i2_mv_y;
                         }
                         else
                         {
                             isvcd_retrive_infer_mode_mv(ps_svc_lyr_dec, &s_mvPred, 0,
                                                         u1_sub_mb_num);
 
                             if(0 != (u1_motion_pred_flag_l0 & (1 << u1_blk_no)))
                             {
                                 i2_mv_x = ps_mv_nmb->i2_mv[0];
                                 i2_mv_y = ps_mv_nmb->i2_mv[1];
                                 i2_mv_x += s_mvPred.i2_mv[0];
                                 i2_mv_y += s_mvPred.i2_mv[1];
                                 s_mvPred.i2_mv[0] = i2_mv_x;
                                 s_mvPred.i2_mv[1] = i2_mv_y;
                             }
                             i2_mv_x = s_mvPred.i2_mv[0];
                             i2_mv_y = s_mvPred.i2_mv[1];
                         }
                         /********************************************************/
                         /* Transfer setup call                                  */
                         /* convert RefIdx if it is MbAff                        */
                         /* Pass Weight Offset and refFrame                      */
                         /********************************************************/
                         i1_ref_idx1 = i1_ref_idx >> u1_scale_ref;
                         if(u1_scale_ref && ((i1_ref_idx & 0x01) != u4_bot_mb))
                             i1_ref_idx1 += MAX_REF_BUFS;
                         if(-1 == i1_ref_idx1) return NOT_OK;
                         ps_ref_frame = pps_ref_frame[i1_ref_idx1];
                         pu4_wt_offst = ppu4_wt_ofst[u1_blk_no];
 
                         {
                             pred_info_pkd_t *ps_pred_pkd;
                             ps_pred_pkd = ps_dec->ps_pred_pkd + ps_dec->u4_pred_info_pkd_idx;
                             ih264d_fill_pred_info(s_mvPred.i2_mv, u1_wd, u1_ht, u1_sub_mb_num,
                                                   PRED_L0, ps_pred_pkd, ps_ref_frame->u1_pic_buf_id,
                                                   (i1_ref_idx >> u1_scale_ref), pu4_wt_offst,
                                                   ps_ref_frame->u1_pic_type);
 
                             ps_dec->u4_pred_info_pkd_idx++;
                             ps_cur_mb_info->u1_num_pred_parts++;
                         }
 
                         /* Fill colocated info in MvPred structure */
                         s_mvPred.u1_col_ref_pic_idx = ps_ref_frame->u1_mv_buf_id;
                         s_mvPred.u1_pic_type = ps_ref_frame->u1_pic_type;
 
                         /* Calculating colocated zero information */
                         u1_colz = (u1_field << 1) |
                                   ((i1_ref_idx == 0) && (ABS(i2_mv_x) <= 1) && (ABS(i2_mv_y) <= 1));
                         u1_colz |= ps_mb_part_info->u1_col_info[u1_blk_no];
 
                         /* Replicate the motion vectors and colzero u4_flag  */
                         /* for all sub-partitions                         */
 
                         if(ps_mv_nmb)
                         {
                             ih264d_rep_mv_colz(ps_dec, &s_mvPred, ps_mv_nmb, u1_sub_mb_num, u1_colz,
                                                u1_ht, u1_wd);
                         }
                         else
                         {
                             return NOT_OK;
                         }
                     }
                 }
 
                 /* to take care of 16 parttitions increment for base mode flag case*/
                 if(1 == ps_svc_cur_mb_info->u1_base_mode_flag)
                 {
                     ps_part += (MAX_NUM_MB_PART - u1_num_part);
                 }
             }
             else
             {
                 ps_cur_deblk_mb->u1_mb_type |= D_INTRA_IBL;
                 if((ps_svc_lyr_dec->u1_layer_identifier != TARGET_LAYER) &&
                    (DBLK_ENABLED == ps_dec->ps_cur_slice->u1_disable_dblk_filter_idc))
                 {
                     ps_cur_deblk_mb->u1_deblocking_mode = MB_ENABLE_FILTERING;
                 }
                 /* to take care of 16 parttitions increment for base mode flag case*/
                 if(1 != ps_svc_cur_mb_info->u1_base_mode_flag)
                 {
                     return NOT_OK;
                 }
                 {
                     ps_part += (MAX_NUM_MB_PART);
                 }
                 /* Storing colocated zero information */
                 if(ps_mv_nmb_start)
                 {
                     ih264d_rep_mv_colz(ps_dec, &s_mvPred, ps_mv_nmb_start, 0,
                                        (UWORD8) (u1_field << 1), 4, 4);
                 }
                 else
                 {
                     return NOT_OK;
                 }
             }
         }
         else
         {
             /* Storing colocated zero information */
             if(ps_mv_nmb_start)
             {
                 ih264d_rep_mv_colz(ps_dec, &s_mvPred, ps_mv_nmb_start, 0, (UWORD8) (u1_field << 1),
                                    4, 4);
             }
             else
             {
                 return NOT_OK;
             }
         }
     }
     return OK;
 }
 /*!
  **************************************************************************
  * \if Function name : isvcd_update_intra_mb_inter_layer_info \endif
  *
  * \brief : IT
  *    This function decodes an Inter MB fornfor ot target base layers
  *    Only for Progressive : saves residual for upper enhancement layers
  *
  * \return
  *    0 on Success and Error code otherwise
  **************************************************************************
  */
