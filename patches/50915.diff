commit 60a019fb5bd4a119c90167662449a3224b91f629
Author: Zoltan Szabadka <szabadka@google.com>
Date:   Mon Oct 17 14:37:35 2022 +0200

    Check the sizes of extra channel backgrounds in blending stage.
    
    This prevents e.g. blending against a smaller preview frame.

diff --git a/lib/jxl/frame_header.cc b/lib/jxl/frame_header.cc
index 7316d972..6fa68954 100644
--- a/lib/jxl/frame_header.cc
+++ b/lib/jxl/frame_header.cc
@@ -81,20 +81,19 @@ Status BlendingInfo::VisitFields(Visitor* JXL_RESTRICT visitor) {
 
 std::string BlendingInfo::DebugString() const {
   std::ostringstream os;
-  os << ",";
   os << (mode == BlendMode::kReplace            ? "Replace"
          : mode == BlendMode::kAdd              ? "Add"
          : mode == BlendMode::kBlend            ? "Blend"
          : mode == BlendMode::kAlphaWeightedAdd ? "AlphaWeightedAdd"
                                                 : "Mul");
   if (nonserialized_num_extra_channels > 0 &&
       (mode == BlendMode::kBlend || mode == BlendMode::kAlphaWeightedAdd)) {
     os << ",alpha=" << alpha_channel << ",clamp=" << clamp;
   } else if (mode == BlendMode::kMul) {
     os << ",clamp=" << clamp;
   }
   if (mode != BlendMode::kReplace || nonserialized_is_partial_frame) {
     os << ",source=" << source;
   }
   return os.str();
 }
@@ -429,67 +428,73 @@ Status FrameHeader::VisitFields(Visitor* JXL_RESTRICT visitor) {
 std::string FrameHeader::DebugString() const {
   std::ostringstream os;
   os << (encoding == FrameEncoding::kVarDCT ? "VarDCT" : "Modular");
   os << ",";
   os << (frame_type == FrameType::kRegularFrame    ? "Regular"
          : frame_type == FrameType::kDCFrame       ? "DC"
          : frame_type == FrameType::kReferenceOnly ? "Reference"
                                                    : "SkipProgressive");
   if (frame_type == FrameType::kDCFrame) {
     os << "(lv" << dc_level << ")";
   }
 
   if (flags) {
     os << ",";
     uint32_t remaining = flags;
 
 #define TEST_FLAG(name)           \
   if (flags & Flags::k##name) {   \
     remaining &= ~Flags::k##name; \
     os << #name;                  \
     if (remaining) os << "|";     \
   }
     TEST_FLAG(Noise);
     TEST_FLAG(Patches);
     TEST_FLAG(Splines);
     TEST_FLAG(UseDcFrame);
     TEST_FLAG(SkipAdaptiveDCSmoothing);
 #undef TEST_FLAG
   }
 
   os << ",";
   os << (color_transform == ColorTransform::kXYB     ? "XYB"
          : color_transform == ColorTransform::kYCbCr ? "YCbCr"
                                                      : "None");
 
   if (encoding == FrameEncoding::kModular) {
     os << ",shift=" << group_size_shift;
   } else if (color_transform == ColorTransform::kXYB) {
     os << ",qm=" << x_qm_scale << ";" << b_qm_scale;
   }
   if (frame_type != FrameType::kReferenceOnly) {
     os << "," << passes.DebugString();
   }
   if (custom_size_or_origin) {
     os << ",xs=" << frame_size.xsize;
     os << ",ys=" << frame_size.ysize;
     if (frame_type == FrameType::kRegularFrame ||
         frame_type == FrameType::kSkipProgressive) {
       os << ",x0=" << frame_origin.x0;
       os << ",y0=" << frame_origin.y0;
     }
   }
   if (upsampling > 1) os << ",up=" << upsampling;
   if (loop_filter.gab) os << ",Gaborish";
   if (loop_filter.epf_iters > 0) os << ",epf=" << loop_filter.epf_iters;
   if (animation_frame.duration > 0) os << ",dur=" << animation_frame.duration;
   if (frame_type == FrameType::kRegularFrame ||
       frame_type == FrameType::kSkipProgressive) {
+    os << ",";
     os << blending_info.DebugString();
+    for (size_t i = 0; i < extra_channel_blending_info.size(); ++i) {
+      os << (i == 0 ? "[" : ";");
+      os << extra_channel_blending_info[i].DebugString();
+      if (i + 1 == extra_channel_blending_info.size()) os << "]";
+    }
   }
   if (save_as_reference > 0) os << ",ref=" << save_as_reference;
   os << "," << (save_before_color_transform ? "before" : "after") << "_ct";
   if (is_last) os << ",last";
   return os.str();
 }
 
 }  // namespace jxl
diff --git a/lib/jxl/render_pipeline/stage_blending.cc b/lib/jxl/render_pipeline/stage_blending.cc
index 5d36c0a7..c5d47f08 100644
--- a/lib/jxl/render_pipeline/stage_blending.cc
+++ b/lib/jxl/render_pipeline/stage_blending.cc
@@ -20,190 +20,203 @@ namespace HWY_NAMESPACE {
 class BlendingStage : public RenderPipelineStage {
  public:
   explicit BlendingStage(const PassesDecoderState* dec_state,
                          const ColorEncoding& frame_color_encoding)
       : RenderPipelineStage(RenderPipelineStage::Settings()),
         state_(*dec_state->shared) {
     image_xsize_ = state_.frame_header.nonserialized_metadata->xsize();
     image_ysize_ = state_.frame_header.nonserialized_metadata->ysize();
     extra_channel_info_ =
         &state_.frame_header.nonserialized_metadata->m.extra_channel_info;
     info_ = state_.frame_header.blending_info;
     const std::vector<BlendingInfo>& ec_info =
         state_.frame_header.extra_channel_blending_info;
     ImageBundle& bg = *state_.reference_frames[info_.source].frame;
     bg_ = &bg;
     if (bg.xsize() == 0 || bg.ysize() == 0) {
       zeroes_.resize(image_xsize_, 0.f);
     } else if (state_.reference_frames[info_.source].ib_is_in_xyb) {
       initialized_ = JXL_FAILURE(
           "Trying to blend XYB reference frame %i and non-XYB frame",
           info_.source);
       return;
     } else if (std::any_of(ec_info.begin(), ec_info.end(),
                            [this](const BlendingInfo& info) {
                              const ImageBundle& bg =
                                  *state_.reference_frames[info.source].frame;
                              return bg.xsize() == 0 || bg.ysize() == 0;
                            })) {
       zeroes_.resize(image_xsize_, 0.f);
     }
 
-    if (bg.xsize() != 0 && bg.ysize() != 0 &&
-        (bg.xsize() < image_xsize_ || bg.ysize() < image_ysize_ ||
-         bg.origin.x0 != 0 || bg.origin.y0 != 0)) {
-      initialized_ = JXL_FAILURE("Trying to use a %" PRIuS "x%" PRIuS
-                                 " crop as a background",
-                                 bg.xsize(), bg.ysize());
+    auto verify_bg_size = [&](const ImageBundle& bg) -> Status {
+      if (bg.xsize() != 0 && bg.ysize() != 0 &&
+          (bg.xsize() < image_xsize_ || bg.ysize() < image_ysize_ ||
+           bg.origin.x0 != 0 || bg.origin.y0 != 0)) {
+        return JXL_FAILURE("Trying to use a %" PRIuS "x%" PRIuS
+                           " crop as a background",
+                           bg.xsize(), bg.ysize());
+      }
+      return true;
+    };
+
+    Status ok = verify_bg_size(bg);
+    for (const auto& info : ec_info) {
+      const ImageBundle& bg = *state_.reference_frames[info.source].frame;
+      if (!!ok) ok = verify_bg_size(bg);
+    }
+    if (!ok) {
+      initialized_ = ok;
       return;
     }
+
     if (state_.metadata->m.xyb_encoded) {
       if (!dec_state->output_encoding_info.color_encoding_is_original) {
         initialized_ = JXL_FAILURE("Blending in unsupported color space");
         return;
       }
     }
 
     blending_info_.resize(ec_info.size() + 1);
     auto make_blending = [&](const BlendingInfo& info, PatchBlending* pb) {
       pb->alpha_channel = info.alpha_channel;
       pb->clamp = info.clamp;
       switch (info.mode) {
         case BlendMode::kReplace: {
           pb->mode = PatchBlendMode::kReplace;
           break;
         }
         case BlendMode::kAdd: {
           pb->mode = PatchBlendMode::kAdd;
           break;
         }
         case BlendMode::kMul: {
           pb->mode = PatchBlendMode::kMul;
           break;
         }
         case BlendMode::kBlend: {
           pb->mode = PatchBlendMode::kBlendAbove;
           break;
         }
         case BlendMode::kAlphaWeightedAdd: {
           pb->mode = PatchBlendMode::kAlphaWeightedAddAbove;
           break;
         }
         default: {
           JXL_ABORT("Invalid blend mode");  // should have failed to decode
         }
       }
     };
     make_blending(info_, &blending_info_[0]);
     for (size_t i = 0; i < ec_info.size(); i++) {
       make_blending(ec_info[i], &blending_info_[1 + i]);
     }
   }
 
   Status IsInitialized() const override { return initialized_; }
 
   void ProcessRow(const RowInfo& input_rows, const RowInfo& output_rows,
                   size_t xextra, size_t xsize, size_t xpos, size_t ypos,
                   size_t thread_id) const final {
     PROFILER_ZONE("Blend");
     JXL_ASSERT(initialized_);
     const FrameOrigin& frame_origin = state_.frame_header.frame_origin;
     ssize_t bg_xpos = frame_origin.x0 + static_cast<ssize_t>(xpos);
     ssize_t bg_ypos = frame_origin.y0 + static_cast<ssize_t>(ypos);
     int offset = 0;
     if (bg_xpos + static_cast<ssize_t>(xsize) <= 0 ||
         frame_origin.x0 >= static_cast<ssize_t>(image_xsize_) || bg_ypos < 0 ||
         bg_ypos >= static_cast<ssize_t>(image_ysize_)) {
       return;
     }
     if (bg_xpos < 0) {
       offset -= bg_xpos;
       xsize += bg_xpos;
       bg_xpos = 0;
     }
     if (bg_xpos + xsize > image_xsize_) {
       xsize =
           std::max<ssize_t>(0, static_cast<ssize_t>(image_xsize_) - bg_xpos);
     }
     std::vector<const float*> bg_row_ptrs_(input_rows.size());
     std::vector<float*> fg_row_ptrs_(input_rows.size());
     size_t num_c = std::min(input_rows.size(), extra_channel_info_->size() + 3);
     for (size_t c = 0; c < num_c; ++c) {
       fg_row_ptrs_[c] = GetInputRow(input_rows, c, 0) + offset;
       if (c < 3) {
         bg_row_ptrs_[c] =
             bg_->xsize() != 0 && bg_->ysize() != 0
                 ? bg_->color()->ConstPlaneRow(c, bg_ypos) + bg_xpos
                 : zeroes_.data();
       } else {
         const ImageBundle& ec_bg =
             *state_
                  .reference_frames[state_.frame_header
                                        .extra_channel_blending_info[c - 3]
                                        .source]
                  .frame;
         bg_row_ptrs_[c] =
             ec_bg.xsize() != 0 && ec_bg.ysize() != 0
                 ? ec_bg.extra_channels()[c - 3].ConstRow(bg_ypos) + bg_xpos
                 : zeroes_.data();
       }
     }
     PerformBlending(bg_row_ptrs_.data(), fg_row_ptrs_.data(),
                     fg_row_ptrs_.data(), 0, xsize, blending_info_[0],
                     blending_info_.data() + 1, *extra_channel_info_);
   }
 
   RenderPipelineChannelMode GetChannelMode(size_t c) const final {
     return RenderPipelineChannelMode::kInPlace;
   }
 
   bool SwitchToImageDimensions() const override { return true; }
 
   void GetImageDimensions(size_t* xsize, size_t* ysize,
                           FrameOrigin* frame_origin) const override {
     *xsize = image_xsize_;
     *ysize = image_ysize_;
     *frame_origin = state_.frame_header.frame_origin;
   }
 
   void ProcessPaddingRow(const RowInfo& output_rows, size_t xsize, size_t xpos,
                          size_t ypos) const override {
     if (bg_->xsize() == 0 || bg_->ysize() == 0) {
       for (size_t c = 0; c < 3; ++c) {
         memset(GetInputRow(output_rows, c, 0), 0, xsize * sizeof(float));
       }
     } else {
       for (size_t c = 0; c < 3; ++c) {
         memcpy(GetInputRow(output_rows, c, 0),
                bg_->color()->ConstPlaneRow(c, ypos) + xpos,
                xsize * sizeof(float));
       }
     }
     for (size_t ec = 0; ec < extra_channel_info_->size(); ++ec) {
       const ImageBundle& ec_bg =
           *state_
                .reference_frames
                    [state_.frame_header.extra_channel_blending_info[ec].source]
                .frame;
       if (ec_bg.xsize() == 0 || ec_bg.ysize() == 0) {
         memset(GetInputRow(output_rows, 3 + ec, 0), 0, xsize * sizeof(float));
       } else {
         memcpy(GetInputRow(output_rows, 3 + ec, 0),
                ec_bg.extra_channels()[ec].ConstRow(ypos) + xpos,
                xsize * sizeof(float));
       }
     }
   }
 
   const char* GetName() const override { return "Blending"; }
 
  private:
   const PassesSharedState& state_;
   BlendingInfo info_;
   ImageBundle* bg_;
   Status initialized_ = true;
   size_t image_xsize_;
   size_t image_ysize_;
   std::vector<PatchBlending> blending_info_;
   const std::vector<ExtraChannelInfo>* extra_channel_info_;
   std::vector<float> zeroes_;
 };
