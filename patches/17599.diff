commit b1abe27db0869d345ac5c0240a21e322a725fff9
Author: Raúl Marín Rodríguez <rmrodriguez@carto.com>
Date:   Thu Oct 10 16:58:46 2019 +0000

    WKB: Avoid buffer overflow
    
    This only happens when not running under PG context, as
    lwerror continues execution and that means that even after
    detecting there isn't enough bytes still try to read from the buffer
    
    Closes #4535
    Closes https://github.com/postgis/postgis/pull/495
    
    
    git-svn-id: http://svn.osgeo.org/postgis/trunk@17904 b70326c6-7e19-0410-871a-916f4a2858ee

diff --git a/NEWS b/NEWS
index fdca48380..722ea6422 100644
--- a/NEWS
+++ b/NEWS
@@ -7,9 +7,10 @@ Additional features enabled if you are running Proj6+ and PostgreSQL 12
 Additional performance enhancements if running GEOS 3.8+
 
 * Major highlights *
   - #4534, Fix leak in lwcurvepoly_from_wkb_state (Raúl Marín)
   - #4536, Fix leak in lwcollection_from_wkb_state (Raúl Marín)
   - #4537, Fix leak in WKT collection parser (Raúl Marín)
+  - #4535, WKB: Avoid buffer overflow (Raúl Marín)
 
 PostGIS 3.0.0rc1
 2019/10/08
diff --git a/liblwgeom/cunit/cu_in_wkb.c b/liblwgeom/cunit/cu_in_wkb.c
index c938c34d0..d928c6f69 100644
--- a/liblwgeom/cunit/cu_in_wkb.c
+++ b/liblwgeom/cunit/cu_in_wkb.c
@@ -228,36 +228,41 @@ static void test_wkb_in_malformed(void)
 }
 
 static void
-test_wkb_leak(void)
+test_wkb_fuzz(void)
 {
 	/* OSS-FUZZ https://trac.osgeo.org/postgis/ticket/4534 */
 	uint8_t wkb[36] = {000, 000, 000, 000, 015, 000, 000, 000, 003, 000, 200, 000, 000, 010, 000, 000, 000, 000,
 			   000, 000, 000, 000, 010, 000, 000, 000, 000, 000, 000, 000, 000, 010, 000, 000, 000, 000};
 	LWGEOM *g = lwgeom_from_wkb(wkb, 36, LW_PARSER_CHECK_NONE);
 	lwgeom_free(g);
 
 	/* OSS-FUZZ https://trac.osgeo.org/postgis/ticket/4536 */
 	uint8_t wkb2[319] = {
 	    001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001,
 	    001, 001, 001, 001, 001, 012, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001,
 	    001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 051, 001, 001,
 	    001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001,
 	    001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 000, 115, 001, 001, 001, 001,
 	    001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 000, 001, 001, 001, 001, 001, 001, 001,
 	    001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001,
 	    001, 001, 001, 001, 001, 001, 000, 000, 000, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001,
 	    001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 002,
 	    001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001,
 	    001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 207, 001,
 	    001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001,
 	    001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 000, 000, 000, 000, 000,
 	    000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 000, 001, 001,
 	    001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001,
 	    001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001, 001};
 	g = lwgeom_from_wkb(wkb2, 319, LW_PARSER_CHECK_NONE);
 	lwgeom_free(g);
+
+	/* OSS-FUZZ: https://trac.osgeo.org/postgis/ticket/4535 */
+	uint8_t wkb3[9] = {0x01, 0x03, 0x00, 0x00, 0x10, 0x8d, 0x55, 0xf3, 0xff};
+	g = lwgeom_from_wkb(wkb3, 9, LW_PARSER_CHECK_NONE);
+	lwgeom_free(g);
 }
 
 /*
 ** Used by test harness to register the tests in this file.
 */
@@ -265,18 +270,18 @@ void wkb_in_suite_setup(void);
 void wkb_in_suite_setup(void)
 {
 	CU_pSuite suite = CU_add_suite("wkb_input", init_wkb_in_suite, clean_wkb_in_suite);
 	PG_ADD_TEST(suite, test_wkb_in_point);
 	PG_ADD_TEST(suite, test_wkb_in_linestring);
 	PG_ADD_TEST(suite, test_wkb_in_polygon);
 	PG_ADD_TEST(suite, test_wkb_in_multipoint);
 	PG_ADD_TEST(suite, test_wkb_in_multilinestring);
 	PG_ADD_TEST(suite, test_wkb_in_multipolygon);
 	PG_ADD_TEST(suite, test_wkb_in_collection);
 	PG_ADD_TEST(suite, test_wkb_in_circularstring);
 	PG_ADD_TEST(suite, test_wkb_in_compoundcurve);
 	PG_ADD_TEST(suite, test_wkb_in_curvpolygon);
 	PG_ADD_TEST(suite, test_wkb_in_multicurve);
 	PG_ADD_TEST(suite, test_wkb_in_multisurface);
 	PG_ADD_TEST(suite, test_wkb_in_malformed);
-	PG_ADD_TEST(suite, test_wkb_leak);
+	PG_ADD_TEST(suite, test_wkb_fuzz);
 }
diff --git a/liblwgeom/lwin_wkb.c b/liblwgeom/lwin_wkb.c
index 8f0b235b7..976e14766 100644
--- a/liblwgeom/lwin_wkb.c
+++ b/liblwgeom/lwin_wkb.c
@@ -33,21 +33,22 @@
 /**
 * Used for passing the parse state between the parsing functions.
 */
 typedef struct
 {
 	const uint8_t *wkb; /* Points to start of WKB */
-	size_t wkb_size; /* Expected size of WKB */
-	int swap_bytes; /* Do an endian flip? */
-	int check; /* Simple validity checks on geometries */
-	uint32_t lwtype; /* Current type we are handling */
 	int32_t srid;    /* Current SRID we are handling */
-	int has_z; /* Z? */
-	int has_m; /* M? */
-	int has_srid; /* SRID? */
+	size_t wkb_size; /* Expected size of WKB */
+	int8_t swap_bytes;  /* Do an endian flip? */
+	int8_t check;       /* Simple validity checks on geometries */
+	int8_t lwtype;      /* Current type we are handling */
+	int8_t has_z;       /* Z? */
+	int8_t has_m;       /* M? */
+	int8_t has_srid;    /* SRID? */
+	int8_t error;       /* An error was found (not enough bytes to read) */
 	const uint8_t *pos; /* Current parse position */
 } wkb_parse_state;
 
 
 /**
 * Internal function declarations.
 */
@@ -122,18 +123,18 @@ uint8_t* bytes_from_hexbytes(const char *hexbuf, size_t hexsize)
 /**
 * Check that we are not about to read off the end of the WKB
 * array.
 */
 static inline void wkb_parse_state_check(wkb_parse_state *s, size_t next)
 {
 	if( (s->pos + next) > (s->wkb + s->wkb_size) )
 	{
 		lwerror("WKB structure does not match expected size!");
-		return;
+		s->error = LW_TRUE;
 	}
 }
 
 /**
 * Take in an unknown kind of wkb type number and ensure it comes out
 * as an extended WKB type number (with Z/M/SRID flags masked onto the
 * high bits).
 */
@@ -248,545 +249,584 @@ static void lwtype_from_wkb_state(wkb_parse_state *s, uint32_t wkb_type)
 /**
 * Byte
 * Read a byte and advance the parse state forward.
 */
 static char byte_from_wkb_state(wkb_parse_state *s)
 {
 	char char_value = 0;
 	LWDEBUG(4, "Entered function");
 
 	wkb_parse_state_check(s, WKB_BYTE_SIZE);
+	if (s->error)
+		return 0;
 	LWDEBUG(4, "Passed state check");
 
 	char_value = s->pos[0];
 	LWDEBUGF(4, "Read byte value: %x", char_value);
 	s->pos += WKB_BYTE_SIZE;
 
 	return char_value;
 }
 
 /**
 * Int32
 * Read 4-byte integer and advance the parse state forward.
 */
 static uint32_t integer_from_wkb_state(wkb_parse_state *s)
 {
 	uint32_t i = 0;
 
 	wkb_parse_state_check(s, WKB_INT_SIZE);
+	if (s->error)
+		return 0;
 
 	memcpy(&i, s->pos, WKB_INT_SIZE);
 
 	/* Swap? Copy into a stack-allocated integer. */
 	if( s->swap_bytes )
 	{
 		int j = 0;
 		uint8_t tmp;
 
 		for( j = 0; j < WKB_INT_SIZE/2; j++ )
 		{
 			tmp = ((uint8_t*)(&i))[j];
 			((uint8_t*)(&i))[j] = ((uint8_t*)(&i))[WKB_INT_SIZE - j - 1];
 			((uint8_t*)(&i))[WKB_INT_SIZE - j - 1] = tmp;
 		}
 	}
 
 	s->pos += WKB_INT_SIZE;
 	return i;
 }
 
 /**
 * Double
 * Read an 8-byte double and advance the parse state forward.
 */
 static double double_from_wkb_state(wkb_parse_state *s)
 {
 	double d = 0;
 
-	wkb_parse_state_check(s, WKB_DOUBLE_SIZE);
-
 	memcpy(&d, s->pos, WKB_DOUBLE_SIZE);
 
 	/* Swap? Copy into a stack-allocated integer. */
 	if( s->swap_bytes )
 	{
 		int i = 0;
 		uint8_t tmp;
 
 		for( i = 0; i < WKB_DOUBLE_SIZE/2; i++ )
 		{
 			tmp = ((uint8_t*)(&d))[i];
 			((uint8_t*)(&d))[i] = ((uint8_t*)(&d))[WKB_DOUBLE_SIZE - i - 1];
 			((uint8_t*)(&d))[WKB_DOUBLE_SIZE - i - 1] = tmp;
 		}
 
 	}
 
 	s->pos += WKB_DOUBLE_SIZE;
 	return d;
 }
 
 /**
 * POINTARRAY
 * Read a dynamically sized point array and advance the parse state forward.
 * First read the number of points, then read the points.
 */
 static POINTARRAY* ptarray_from_wkb_state(wkb_parse_state *s)
 {
 	POINTARRAY *pa = NULL;
 	size_t pa_size;
 	uint32_t ndims = 2;
 	uint32_t npoints = 0;
 	static uint32_t maxpoints = UINT_MAX / WKB_DOUBLE_SIZE / 4;
 
 	/* Calculate the size of this point array. */
 	npoints = integer_from_wkb_state(s);
+	if (s->error)
+		return NULL;
 	if (npoints > maxpoints)
 	{
 		lwerror("Pointarray length (%d) is too large");
 		return NULL;
 	}
 
 	LWDEBUGF(4,"Pointarray has %d points", npoints);
 
 	if( s->has_z ) ndims++;
 	if( s->has_m ) ndims++;
 	pa_size = npoints * ndims * WKB_DOUBLE_SIZE;
 
 	/* Empty! */
 	if( npoints == 0 )
 		return ptarray_construct(s->has_z, s->has_m, npoints);
 
 	/* Does the data we want to read exist? */
 	wkb_parse_state_check(s, pa_size);
+	if (s->error)
+		return NULL;
 
 	/* If we're in a native endianness, we can just copy the data directly! */
 	if( ! s->swap_bytes )
 	{
 		pa = ptarray_construct_copy_data(s->has_z, s->has_m, npoints, (uint8_t*)s->pos);
 		s->pos += pa_size;
 	}
 	/* Otherwise we have to read each double, separately. */
 	else
 	{
 		uint32_t i = 0;
 		double *dlist;
 		pa = ptarray_construct(s->has_z, s->has_m, npoints);
 		dlist = (double*)(pa->serialized_pointlist);
 		for( i = 0; i < npoints * ndims; i++ )
 		{
 			dlist[i] = double_from_wkb_state(s);
 		}
 	}
 
 	return pa;
 }
 
 /**
 * POINT
 * Read a WKB point, starting just after the endian byte,
 * type number and optional srid number.
 * Advance the parse state forward appropriately.
 * WKB point has just a set of doubles, with the quantity depending on the
 * dimension of the point, so this looks like a special case of the above
 * with only one point.
 */
 static LWPOINT* lwpoint_from_wkb_state(wkb_parse_state *s)
 {
 	static uint32_t npoints = 1;
 	POINTARRAY *pa = NULL;
 	size_t pa_size;
 	uint32_t ndims = 2;
 	const POINT2D *pt;
 
 	/* Count the dimensions. */
 	if( s->has_z ) ndims++;
 	if( s->has_m ) ndims++;
 	pa_size = ndims * WKB_DOUBLE_SIZE;
 
 	/* Does the data we want to read exist? */
 	wkb_parse_state_check(s, pa_size);
+	if (s->error)
+		return NULL;
 
 	/* If we're in a native endianness, we can just copy the data directly! */
 	if( ! s->swap_bytes )
 	{
 		pa = ptarray_construct_copy_data(s->has_z, s->has_m, npoints, (uint8_t*)s->pos);
 		s->pos += pa_size;
 	}
 	/* Otherwise we have to read each double, separately */
 	else
 	{
 		uint32_t i = 0;
 		double *dlist;
 		pa = ptarray_construct(s->has_z, s->has_m, npoints);
 		dlist = (double*)(pa->serialized_pointlist);
 		for( i = 0; i < ndims; i++ )
 		{
 			dlist[i] = double_from_wkb_state(s);
 		}
 	}
 
 	/* Check for POINT(NaN NaN) ==> POINT EMPTY */
 	pt = getPoint2d_cp(pa, 0);
 	if ( isnan(pt->x) && isnan(pt->y) )
 	{
 		ptarray_free(pa);
 		return lwpoint_construct_empty(s->srid, s->has_z, s->has_m);
 	}
 	else
 	{
 		return lwpoint_construct(s->srid, NULL, pa);
 	}
 }
 
 /**
 * LINESTRING
 * Read a WKB linestring, starting just after the endian byte,
 * type number and optional srid number. Advance the parse state
 * forward appropriately.
 * There is only one pointarray in a linestring. Optionally
 * check for minimal following of rules (two point minimum).
 */
 static LWLINE* lwline_from_wkb_state(wkb_parse_state *s)
 {
 	POINTARRAY *pa = ptarray_from_wkb_state(s);
+	if (s->error)
+		return NULL;
 
 	if( pa == NULL || pa->npoints == 0 )
 	{
-		ptarray_free(pa);
+		if (pa)
+			ptarray_free(pa);
 		return lwline_construct_empty(s->srid, s->has_z, s->has_m);
 	}
 
 	if( s->check & LW_PARSER_CHECK_MINPOINTS && pa->npoints < 2 )
 	{
 		lwerror("%s must have at least two points", lwtype_name(s->lwtype));
 		return NULL;
 	}
 
 	return lwline_construct(s->srid, NULL, pa);
 }
 
 /**
 * CIRCULARSTRING
 * Read a WKB circularstring, starting just after the endian byte,
 * type number and optional srid number. Advance the parse state
 * forward appropriately.
 * There is only one pointarray in a linestring. Optionally
 * check for minimal following of rules (three point minimum,
 * odd number of points).
 */
 static LWCIRCSTRING* lwcircstring_from_wkb_state(wkb_parse_state *s)
 {
 	POINTARRAY *pa = ptarray_from_wkb_state(s);
+	if (s->error)
+		return NULL;
 
 	if( pa == NULL || pa->npoints == 0 )
+	{
+		if (pa)
+			ptarray_free(pa);
 		return lwcircstring_construct_empty(s->srid, s->has_z, s->has_m);
+	}
 
 	if( s->check & LW_PARSER_CHECK_MINPOINTS && pa->npoints < 3 )
 	{
 		lwerror("%s must have at least three points", lwtype_name(s->lwtype));
 		return NULL;
 	}
 
 	if( s->check & LW_PARSER_CHECK_ODD && ! (pa->npoints % 2) )
 	{
 		lwerror("%s must have an odd number of points", lwtype_name(s->lwtype));
 		return NULL;
 	}
 
 	return lwcircstring_construct(s->srid, NULL, pa);
 }
 
 /**
 * POLYGON
 * Read a WKB polygon, starting just after the endian byte,
 * type number and optional srid number. Advance the parse state
 * forward appropriately.
 * First read the number of rings, then read each ring
 * (which are structured as point arrays)
 */
 static LWPOLY* lwpoly_from_wkb_state(wkb_parse_state *s)
 {
 	uint32_t nrings = integer_from_wkb_state(s);
+	if (s->error)
+		return NULL;
 	uint32_t i = 0;
 	LWPOLY *poly = lwpoly_construct_empty(s->srid, s->has_z, s->has_m);
 
 	LWDEBUGF(4,"Polygon has %d rings", nrings);
 
 	/* Empty polygon? */
 	if( nrings == 0 )
 		return poly;
 
 	for( i = 0; i < nrings; i++ )
 	{
 		POINTARRAY *pa = ptarray_from_wkb_state(s);
-		if( pa == NULL )
-			continue;
+		if (pa == NULL)
+			return NULL;
 
 		/* Check for at least four points. */
-		if( s->check & LW_PARSER_CHECK_MINPOINTS && pa->npoints < 4 )
+		if (s->check & LW_PARSER_CHECK_MINPOINTS && pa->npoints < 4)
 		{
+			lwpoly_free(poly);
 			LWDEBUGF(2, "%s must have at least four points in each ring", lwtype_name(s->lwtype));
 			lwerror("%s must have at least four points in each ring", lwtype_name(s->lwtype));
 			return NULL;
 		}
 
 		/* Check that first and last points are the same. */
 		if( s->check & LW_PARSER_CHECK_CLOSURE && ! ptarray_is_closed_2d(pa) )
 		{
+			lwpoly_free(poly);
 			LWDEBUGF(2, "%s must have closed rings", lwtype_name(s->lwtype));
 			lwerror("%s must have closed rings", lwtype_name(s->lwtype));
 			return NULL;
 		}
 
 		/* Add ring to polygon */
 		if ( lwpoly_add_ring(poly, pa) == LW_FAILURE )
 		{
+			lwpoly_free(poly);
 			LWDEBUG(2, "Unable to add ring to polygon");
 			lwerror("Unable to add ring to polygon");
+			return NULL;
 		}
 
 	}
 	return poly;
 }
 
 /**
 * TRIANGLE
 * Read a WKB triangle, starting just after the endian byte,
 * type number and optional srid number. Advance the parse state
 * forward appropriately.
 * Triangles are encoded like polygons in WKB, but more like linestrings
 * as lwgeometries.
 */
 static LWTRIANGLE* lwtriangle_from_wkb_state(wkb_parse_state *s)
 {
 	uint32_t nrings = integer_from_wkb_state(s);
+	if (s->error)
+		return NULL;
 	LWTRIANGLE *tri = lwtriangle_construct_empty(s->srid, s->has_z, s->has_m);
 	POINTARRAY *pa = NULL;
 
 	/* Empty triangle? */
 	if( nrings == 0 )
 		return tri;
 
 	/* Should be only one ring. */
 	if ( nrings != 1 )
 		lwerror("Triangle has wrong number of rings: %d", nrings);
 
 	/* There's only one ring, we hope? */
 	pa = ptarray_from_wkb_state(s);
 
 	/* If there's no points, return an empty triangle. */
 	if( pa == NULL )
 		return tri;
 
 	/* Check for at least four points. */
 	if( s->check & LW_PARSER_CHECK_MINPOINTS && pa->npoints < 4 )
 	{
 		LWDEBUGF(2, "%s must have at least four points", lwtype_name(s->lwtype));
 		lwerror("%s must have at least four points", lwtype_name(s->lwtype));
 		return NULL;
 	}
 
 	if( s->check & LW_PARSER_CHECK_ZCLOSURE && ! ptarray_is_closed_z(pa) )
 	{
 		lwerror("%s must have closed rings", lwtype_name(s->lwtype));
 		return NULL;
 	}
 
 	/* Empty TRIANGLE starts w/ empty POINTARRAY, free it first */
 	if (tri->points)
 		ptarray_free(tri->points);
 
 	tri->points = pa;
 	return tri;
 }
 
 /**
 * CURVEPOLYTYPE
 */
 static LWCURVEPOLY* lwcurvepoly_from_wkb_state(wkb_parse_state *s)
 {
 	uint32_t ngeoms = integer_from_wkb_state(s);
+	if (s->error)
+		return NULL;
 	LWCURVEPOLY *cp = lwcurvepoly_construct_empty(s->srid, s->has_z, s->has_m);
 	LWGEOM *geom = NULL;
 	uint32_t i;
 
 	/* Empty collection? */
 	if ( ngeoms == 0 )
 		return cp;
 
 	for ( i = 0; i < ngeoms; i++ )
 	{
 		geom = lwgeom_from_wkb_state(s);
 		if ( lwcurvepoly_add_ring(cp, geom) == LW_FAILURE )
 		{
 			lwgeom_free(geom);
 			lwgeom_free((LWGEOM *)cp);
 			lwerror("Unable to add geometry (%p) to curvepoly (%p)", geom, cp);
 			return NULL;
 		}
 	}
 
 	return cp;
 }
 
 /**
 * POLYHEDRALSURFACETYPE
 */
 
 /**
 * COLLECTION, MULTIPOINTTYPE, MULTILINETYPE, MULTIPOLYGONTYPE, COMPOUNDTYPE,
 * MULTICURVETYPE, MULTISURFACETYPE,
 * TINTYPE
 */
 static LWCOLLECTION* lwcollection_from_wkb_state(wkb_parse_state *s)
 {
 	uint32_t ngeoms = integer_from_wkb_state(s);
+	if (s->error)
+		return NULL;
 	LWCOLLECTION *col = lwcollection_construct_empty(s->lwtype, s->srid, s->has_z, s->has_m);
 	LWGEOM *geom = NULL;
 	uint32_t i;
 
 	LWDEBUGF(4,"Collection has %d components", ngeoms);
 
 	/* Empty collection? */
 	if ( ngeoms == 0 )
 		return col;
 
 	/* Be strict in polyhedral surface closures */
 	if ( s->lwtype == POLYHEDRALSURFACETYPE )
 		s->check |= LW_PARSER_CHECK_ZCLOSURE;
 
 	for ( i = 0; i < ngeoms; i++ )
 	{
 		geom = lwgeom_from_wkb_state(s);
 		if ( lwcollection_add_lwgeom(col, geom) == NULL )
 		{
 			lwgeom_free(geom);
 			lwgeom_free((LWGEOM *)col);
 			lwerror("Unable to add geometry (%p) to collection (%p)", geom, col);
 			return NULL;
 		}
 	}
 
 	return col;
 }
 
 
 /**
 * GEOMETRY
 * Generic handling for WKB geometries. The front of every WKB geometry
 * (including those embedded in collections) is an endian byte, a type
 * number and an optional srid number. We handle all those here, then pass
 * to the appropriate handler for the specific type.
 */
 LWGEOM* lwgeom_from_wkb_state(wkb_parse_state *s)
 {
 	char wkb_little_endian;
 	uint32_t wkb_type;
 
 	LWDEBUG(4,"Entered function");
 
 	/* Fail when handed incorrect starting byte */
 	wkb_little_endian = byte_from_wkb_state(s);
+	if (s->error)
+		return NULL;
 	if( wkb_little_endian != 1 && wkb_little_endian != 0 )
 	{
 		LWDEBUG(4,"Leaving due to bad first byte!");
 		lwerror("Invalid endian flag value encountered.");
 		return NULL;
 	}
 
 	/* Check the endianness of our input  */
 	s->swap_bytes = LW_FALSE;
 
 	/* Machine arch is big endian, request is for little */
 	if (IS_BIG_ENDIAN && wkb_little_endian)
 		s->swap_bytes = LW_TRUE;
 	/* Machine arch is little endian, request is for big */
 	else if ((!IS_BIG_ENDIAN) && (!wkb_little_endian))
 		s->swap_bytes = LW_TRUE;
 
 	/* Read the type number */
 	wkb_type = integer_from_wkb_state(s);
+	if (s->error)
+		return NULL;
 	LWDEBUGF(4,"Got WKB type number: 0x%X", wkb_type);
 	lwtype_from_wkb_state(s, wkb_type);
 
 	/* Read the SRID, if necessary */
 	if( s->has_srid )
 	{
 		s->srid = clamp_srid(integer_from_wkb_state(s));
+		if (s->error)
+			return NULL;
 		/* TODO: warn on explicit UNKNOWN srid ? */
 		LWDEBUGF(4,"Got SRID: %u", s->srid);
 	}
 
 	/* Do the right thing */
 	switch( s->lwtype )
 	{
 		case POINTTYPE:
 			return (LWGEOM*)lwpoint_from_wkb_state(s);
 			break;
 		case LINETYPE:
 			return (LWGEOM*)lwline_from_wkb_state(s);
 			break;
 		case CIRCSTRINGTYPE:
 			return (LWGEOM*)lwcircstring_from_wkb_state(s);
 			break;
 		case POLYGONTYPE:
 			return (LWGEOM*)lwpoly_from_wkb_state(s);
 			break;
 		case TRIANGLETYPE:
 			return (LWGEOM*)lwtriangle_from_wkb_state(s);
 			break;
 		case CURVEPOLYTYPE:
 			return (LWGEOM*)lwcurvepoly_from_wkb_state(s);
 			break;
 		case MULTIPOINTTYPE:
 		case MULTILINETYPE:
 		case MULTIPOLYGONTYPE:
 		case COMPOUNDTYPE:
 		case MULTICURVETYPE:
 		case MULTISURFACETYPE:
 		case POLYHEDRALSURFACETYPE:
 		case TINTYPE:
 		case COLLECTIONTYPE:
 			return (LWGEOM*)lwcollection_from_wkb_state(s);
 			break;
 
 		/* Unknown type! */
 		default:
 			lwerror("%s: Unsupported geometry type: %s", __func__, lwtype_name(s->lwtype));
 	}
 
 	/* Return value to keep compiler happy. */
 	return NULL;
 
 }
 
 /* TODO add check for SRID consistency */
 
 /**
 * WKB inputs *must* have a declared size, to prevent malformed WKB from reading
 * off the end of the memory segment (this stops a malevolent user from declaring
 * a one-ring polygon to have 10 rings, causing the WKB reader to walk off the
 * end of the memory).
 *
 * Check is a bitmask of: LW_PARSER_CHECK_MINPOINTS, LW_PARSER_CHECK_ODD,
 * LW_PARSER_CHECK_CLOSURE, LW_PARSER_CHECK_NONE, LW_PARSER_CHECK_ALL
 */
 LWGEOM* lwgeom_from_wkb(const uint8_t *wkb, const size_t wkb_size, const char check)
 {
 	wkb_parse_state s;
 
 	/* Initialize the state appropriately */
 	s.wkb = wkb;
 	s.wkb_size = wkb_size;
 	s.swap_bytes = LW_FALSE;
 	s.check = check;
 	s.lwtype = 0;
 	s.srid = SRID_UNKNOWN;
 	s.has_z = LW_FALSE;
 	s.has_m = LW_FALSE;
 	s.has_srid = LW_FALSE;
+	s.error = LW_FALSE;
 	s.pos = wkb;
 
+	if (!wkb || !wkb_size)
+		return NULL;
+
 	return lwgeom_from_wkb_state(&s);
 }
 
