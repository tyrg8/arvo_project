commit b8b582af3d54b924c6ae89cfaaa47ce1cbd3c958
Author: Guy Harris <guy@alum.mit.edu>
Date:   Tue Mar 5 13:25:31 2019 -0800

    Fix up size calculations.
    
    The elements in the tables listing UTF-8 and Boolean properties are
    guints, which are *not* the same size as guint16's.  (This isn't a
    PDP-11 or a 68k-based machine with a compiler that has 16-bit ints or a
    machine running 16-bit x86 code or....)
    
    Bug: 15556
    Change-Id: I14076584fea74c9c04e2d6b647212e7a2603c275
    Reviewed-on: https://code.wireshark.org/review/32336
    Reviewed-by: Guy Harris <guy@alum.mit.edu>

diff --git a/epan/dissectors/packet-noe.c b/epan/dissectors/packet-noe.c
index e32b25e605..2806d3bd0f 100644
--- a/epan/dissectors/packet-noe.c
+++ b/epan/dissectors/packet-noe.c
@@ -608,70 +608,76 @@ static guint utf8_properties[] = {
     ((OPCODE_C_ime_context       << 8) | OPCODE_P_A_name         )
 };
 
+#define N_UTF8_PROPERTIES (sizeof utf8_properties / sizeof utf8_properties[0])
+#define UTF8_PROPERTY_SIZE (sizeof utf8_properties[0])
+
 static guint bool_properties[] = {
     ((OPCODE_C_terminal          << 8) | OPCODE_P_B_negative_ack     ),
     ((OPCODE_C_terminal          << 8) | OPCODE_P_B_CS_idle_state    ),
     ((OPCODE_C_terminal          << 8) | OPCODE_P_B_PS_idle_state    ),
     ((OPCODE_C_terminal          << 8) | OPCODE_P_B_use_customisation),
     ((OPCODE_C_terminal          << 8) | OPCODE_P_B_ime_lock         ),
     ((OPCODE_C_audioconfig       << 8) | OPCODE_P_B_enable           ),
     ((OPCODE_C_audioconfig       << 8) | OPCODE_P_B_qos_ticket       ),
     ((OPCODE_C_leds              << 8) | OPCODE_P_B_onoff            ),
     ((OPCODE_C_screen            << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_screen            << 8) | OPCODE_P_B_clearscreen      ),
     ((OPCODE_C_AOMV              << 8) | OPCODE_P_B_all_icons_off    ),
     ((OPCODE_C_AOMV              << 8) | OPCODE_P_A_enable           ),
     ((OPCODE_C_bluetooth         << 8) | OPCODE_P_B_bth_ringing      ),
     ((OPCODE_C_bluetooth         << 8) | OPCODE_P_B_bonded_devices   ),
     ((OPCODE_C_callstate         << 8) | OPCODE_P_B_enable           ),
     ((OPCODE_C_framebox          << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_framebox          << 8) | OPCODE_P_B_autospread       ),
     ((OPCODE_C_framebox          << 8) | OPCODE_P_B_cycling          ),
     ((OPCODE_C_tabbox            << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_listbox           << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_listbox           << 8) | OPCODE_P_B_showevent        ),
     ((OPCODE_C_listbox           << 8) | OPCODE_P_B_showactive       ),
     ((OPCODE_C_listbox           << 8) | OPCODE_P_B_circular         ),
     ((OPCODE_C_listbox           << 8) | OPCODE_P_B_disablelongpress ),
     ((OPCODE_C_actionlistbox     << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_textbox           << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_actionbox         << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_inputbox          << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_inputbox          << 8) | OPCODE_P_B_enable           ),
     ((OPCODE_C_inputbox          << 8) | OPCODE_P_B_password         ),
     ((OPCODE_C_inputbox          << 8) | OPCODE_P_B_focus            ),
     ((OPCODE_C_inputbox          << 8) | OPCODE_P_B_inputborder      ),
     ((OPCODE_C_checkbox          << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_checkbox          << 8) | OPCODE_P_B_enable           ),
     ((OPCODE_C_checkbox          << 8) | OPCODE_P_B_state            ),
     ((OPCODE_C_datebox           << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_timerbox          << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_popupbox          << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_popupbox          << 8) | OPCODE_P_B_modal            ),
     ((OPCODE_C_dialogbox         << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_dialogbox         << 8) | OPCODE_P_B_modal            ),
     ((OPCODE_C_sliderbar         << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_progressbar       << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_imagebox          << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_iconbox           << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_AOMVbox           << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_telephonicbox     << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_telephonicbox     << 8) | OPCODE_P_B_enable           ),
     ((OPCODE_C_AOMEL             << 8) | OPCODE_P_B_all_icons_off    ),
     ((OPCODE_C_AOMEL             << 8) | OPCODE_P_B_all_labels_off   ),
     ((OPCODE_C_AOM10             << 8) | OPCODE_P_B_all_icons_off    ),
     ((OPCODE_C_AOM40             << 8) | OPCODE_P_B_all_icons_off    ),
     ((OPCODE_C_telephonicboxitem << 8) | OPCODE_P_B_focus            ),
     ((OPCODE_C_bluetooth_device  << 8) | OPCODE_P_B_enable           ),
     ((OPCODE_C_bluetooth_device  << 8) | OPCODE_P_B_bonded           ),
     ((OPCODE_C_headerbox         << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_ime_context       << 8) | OPCODE_P_B_enable           ),
     ((OPCODE_C_ime_context       << 8) | OPCODE_P_B_visible          ),
     ((OPCODE_C_ime_context       << 8) | OPCODE_P_A_mode             ),
     ((OPCODE_C_ime_context       << 8) | OPCODE_P_A_state            ),
     ((OPCODE_C_ime_context       << 8) | OPCODE_P_A_enable           )
 };
 
+#define N_BOOL_PROPERTIES (sizeof bool_properties / sizeof bool_properties[0])
+#define BOOL_PROPERTY_SIZE (sizeof bool_properties[0])
+
 /*-----------------------------------------------------------------------------
   globals
   ---------------------------------------------------------------------------*/
@@ -1059,16 +1065,16 @@ static int compcp(const void *pcp1, const void *pcp2)
 static gboolean property_is_bool(guint8 noe_class, guint8 property_code)
 {
     guint key = ((noe_class << 8) | property_code);
-    return (bsearch(&key, bool_properties, (sizeof(bool_properties)/sizeof(guint16)), sizeof(guint16), compcp) != NULL);
+    return (bsearch(&key, bool_properties, N_BOOL_PROPERTIES, BOOL_PROPERTY_SIZE, compcp) != NULL);
 }
 
 static gboolean property_is_utf8(guint8 noe_class, guint8 property_code)
 {
     guint key = ((noe_class << 8) | property_code);
-    return (bsearch(&key, utf8_properties, (sizeof(utf8_properties)/sizeof(guint16)), sizeof(guint16), compcp) != NULL);
+    return (bsearch(&key, utf8_properties, N_UTF8_PROPERTIES, UTF8_PROPERTY_SIZE, compcp) != NULL);
 }
 
 /*-----------------------------------------------------------------------------
     MESSAGE BODY DECODER
     This function decodes the message body of an 0x15 (and 0x16) UA3G message.
     ---------------------------------------------------------------------------*/
