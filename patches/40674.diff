commit cd021a1311572d4f9bb37b0b808685a5ed84bcc3
Author: David Anderson <davea42@linuxmail.org>
Date:   Mon Nov 8 10:20:24 2021 -0800

    Working toward complete reporting of the oss-fuzz
    reports.
            modified:   bugxml/data.txt
    
    Corrected a test for a section group section-reference
    so it catches a section number just one too big.
            modified:   src/lib/libdwarf/dwarf_elf_load_headers.c

diff --git a/bugxml/data.txt b/bugxml/data.txt
index 82d7412a..71b8d7b3 100644
--- a/bugxml/data.txt
+++ b/bugxml/data.txt
@@ -1,3 +1,18 @@
+id: DW202111-010
+cve:
+fuzzer: oss-fuzz-40627
+datereported: 2021-11-02
+reportedby: David Korczynski
+vulnerability: Abrt in _dwarf_error_string
+product: libdwarf
+description: The Elf object file has some corruption. The
+  read now stops with an error.
+datefixed: 2021-11-07
+references: regressiontests/ossfuzz40627/clusterfuzz-testcase-fuzz_init_path-5186858573758464
+  regressiontests/ossfuzz40627/clusterfuzz-testcase-minimized-fuzz_init_path-5186858573758464
+gitfixid: 94dece3ce0f030d06da442a103bd6a5301410b25
+tarrelease:
+endrec: DW202111-010
 
 id: DW202111-009
 cve:
@@ -40,11 +55,10 @@ reportedby: David Korczynski
 vulnerability:  Null-dereference READ in dwarf_object_init_b
 product: libdwarf
 description: Verified as fixed by oss-fuzz
-  The testcase has illegal libdwarf call
-  and improper include statements.
-datefixed:
+  The Macho headers are corrupted and that is now reported.
+datefixed: 2021-11-07
 references:
-gitfixid:
+gitfixid: 94dece3ce0f030d06da442a103bd6a5301410b25
 tarrelease:
 endrec: DW202111-007
 
@@ -55,11 +69,10 @@ datereported: 2021-11-03
 reportedby: David Korczynski
 vulnerability: Heap-buffer-overflow in _dwarf_elf_setup_all_section_groups
 product: libdwarf
-description: The testcase has illegal libdwarf call
-  and improper include statements.
-datefixed: 
-references: 
-gitfixid: 
+description:  Object file has corrupt section group information.
+datefixed: 2021-11-07
+references: regressiontests/ossfuzz40674/clusterfuzz-testcase-minimized-fuzz_init_path-6557751518560256
+gitfixid: 94dece3ce0f030d06da442a103bd6a5301410b25
 tarrelease:
 endrec: DW202111-005
 
@@ -70,13 +83,12 @@ datereported: 2021-11-03
 reportedby: David Korczynski
 vulnerability: Null-dereference READ in dwarf_object_init_b 
 product: libdwarf
-description: 
+description: The macho object has corrupted headers
+  and now mentions that and stops.
   Verified as fixed by oss-fuzz 2021-11-03
-  The testcase has illegal libdwarf call
-  and improper include statements.
 datefixed: 2021-11-05
-references: 
-gitfixid: 
+references: regressiontests/ossfuzz40673/clusterfuzz-testcase-minimized-fuzz_init_path-6240961391362048.fuzz 
+gitfixid: 94dece3ce0f030d06da442a103bd6a5301410b25
 tarrelease:
 endrec: DW202111-004
 
diff --git a/src/lib/libdwarf/dwarf_elf_load_headers.c b/src/lib/libdwarf/dwarf_elf_load_headers.c
index 7b24881d..a68a9ac3 100644
--- a/src/lib/libdwarf/dwarf_elf_load_headers.c
+++ b/src/lib/libdwarf/dwarf_elf_load_headers.c
@@ -1679,154 +1679,158 @@ static int
 elf_flagmatches(Dwarf_Unsigned flagsword,Dwarf_Unsigned flag)
 {
     if ((flagsword&flag) == flag) {
         return TRUE;
     }
     return FALSE;
 }
 
-/*  For SHT_GROUP sections. */
+/*  For SHT_GROUP sections. 
+    A group section starts with a 32bit flag
+    word with value 1. 
+    32bit section numbers of the sections
+    in the group follow the flag field. */
 static int
 read_gs_section_group(
     dwarf_elf_object_access_internals_t *ep,
     struct generic_shdr* psh,
     int *errcode)
 {
     Dwarf_Unsigned i = 0;
     int res = 0;
 
     if (!psh->gh_sht_group_array) {
         Dwarf_Unsigned seclen = psh->gh_size;
         char *data = 0;
         char *dp = 0;
         Dwarf_Unsigned* grouparray = 0;
         char dblock[4];
         Dwarf_Unsigned va = 0;
         Dwarf_Unsigned count = 0;
         int foundone = 0;
 
         if (seclen < DWARF_32BIT_SIZE) {
             *errcode = DW_DLE_ELF_SECTION_GROUP_ERROR;
             return DW_DLV_ERROR;
         }
         data = malloc(seclen);
         if (!data) {
             *errcode = DW_DLE_ALLOC_FAIL;
             return DW_DLV_ERROR;
         }
         dp = data;
         if (psh->gh_entsize != DWARF_32BIT_SIZE) {
             *errcode = DW_DLE_ELF_SECTION_GROUP_ERROR;
             free(data);
             return DW_DLV_ERROR;
         }
         if (!psh->gh_entsize) {
             free(data);
             *errcode = DW_DLE_ELF_SECTION_GROUP_ERROR;
             return DW_DLV_ERROR;
         }
         count = seclen/psh->gh_entsize;
-        if (count > ep->f_loc_shdr.g_count) {
+        if (count >= ep->f_loc_shdr.g_count) {
             /* Impossible */
             free(data);
             *errcode = DW_DLE_ELF_SECTION_GROUP_ERROR;
             return DW_DLV_ERROR;
         }
         res = RRMOA(ep->f_fd,data,psh->gh_offset,seclen,
             ep->f_filesize,errcode);
         if (res != DW_DLV_OK) {
             free(data);
             return res;
         }
         grouparray = malloc(count * sizeof(Dwarf_Unsigned));
         if (!grouparray) {
             free(data);
             *errcode = DW_DLE_ALLOC_FAIL;
             return DW_DLV_ERROR;
         }
 
         memcpy(dblock,dp,DWARF_32BIT_SIZE);
         ASNAR(memcpy,va,dblock);
         /* There is ambiguity on the endianness of this stuff. */
         if (va != 1 && va != 0x1000000) {
             /*  Could be corrupted elf object. */
             *errcode = DW_DLE_ELF_SECTION_GROUP_ERROR;
             free(data);
             free(grouparray);
             return DW_DLV_ERROR;
         }
         grouparray[0] = 1;
         dp = dp + DWARF_32BIT_SIZE;
         for ( i = 1; i < count; ++i,dp += DWARF_32BIT_SIZE) {
             Dwarf_Unsigned gseca = 0;
             Dwarf_Unsigned gsecb = 0;
             struct generic_shdr* targpsh = 0;
 
             memcpy(dblock,dp,DWARF_32BIT_SIZE);
             ASNAR(memcpy,gseca,dblock);
             ASNAR(_dwarf_memcpy_swap_bytes,gsecb,dblock);
             if (!gseca) {
                 free(data);
                 free(grouparray);
                 *errcode = DW_DLE_ELF_SECTION_GROUP_ERROR;
                 return DW_DLV_ERROR;
             }
             grouparray[i] = gseca;
-            if (gseca > ep->f_loc_shdr.g_count) {
+            if (gseca >= ep->f_loc_shdr.g_count) {
                 /*  Might be confused endianness by
                     the compiler generating the SHT_GROUP.
                     This is pretty horrible. */
 
-                if (gsecb > ep->f_loc_shdr.g_count) {
+                if (gsecb >= ep->f_loc_shdr.g_count) {
                     *errcode = DW_DLE_ELF_SECTION_GROUP_ERROR;
                     free(data);
                     free(grouparray);
                     return DW_DLV_ERROR;
                 }
                 /* Ok. Yes, ugly. */
                 gseca = gsecb;
                 grouparray[i] = gseca;
             }
             targpsh = ep->f_shdr + gseca;
             if (targpsh->gh_section_group_number) {
                 /* multi-assignment to groups. Oops. */
                 free(data);
                 free(grouparray);
                 *errcode = DW_DLE_ELF_SECTION_GROUP_ERROR;
                 return DW_DLV_ERROR;
             }
             targpsh->gh_section_group_number =
                 ep->f_sg_next_group_number;
             foundone = 1;
         }
         if (foundone) {
             ++ep->f_sg_next_group_number;
             ++ep->f_sht_group_type_section_count;
         }
         free(data);
         psh->gh_sht_group_array = grouparray;
         psh->gh_sht_group_array_count = count;
     }
     return DW_DLV_OK;
 }
 /*  Does related things.
     A)  Counts the number of SHT_GROUP
         and for each builds an array of the sections in the group
         (which we expect are all DWARF-related)
         and sets the group number in each mentioned section.
     B)  Counts the number of SHF_GROUP flags.
     C)  If gnu groups:
         ensure all the DWARF sections marked with right group
         based on A(we will mark unmarked as group 1,
         DW_GROUPNUMBER_BASE).
     D)  If arm groups (SHT_GROUP zero, SHF_GROUP non-zero):
         Check the relocations of all SHF_GROUP section
         FIXME: algorithm needed.
 
     If SHT_GROUP and SHF_GROUP this is GNU groups.
     If no SHT_GROUP and have SHF_GROUP this is
     arm cc groups and we must use relocation information
     to identify the group members.
 
     It seems(?) impossible for an object to have both
     dwo sections and (SHF_GROUP or SHT_GROUP), but
     we do not rule that out here.  */
