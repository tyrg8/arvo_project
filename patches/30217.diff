commit e87331beefe63df068481e4919b6007e6a05fbef
Author: Victor M. Alvarez <vmalvarez@virustotal.com>
Date:   Thu May 20 16:15:13 2021 +0200

    Revert a11a7e5afe8957ba3be0f8af298c6149e21af1dc and fix buffer run in "macho" module.
    
    The fix attempt in a11a7e5afe8957ba3be0f8af298c6149e21af1dc was not effective.

diff --git a/libyara/modules/macho/macho.c b/libyara/modules/macho/macho.c
index becbb8eb..23611ef1 100644
--- a/libyara/modules/macho/macho.c
+++ b/libyara/modules/macho/macho.c
@@ -209,316 +209,334 @@ int macho_offset_to_rva(uint64_t offset, uint64_t* result, YR_OBJECT* object)
 
 // Get entry point address from LC_UNIXTHREAD load command.
 void macho_handle_unixthread(
-    const uint8_t* command,
+    const uint8_t* data,
+    size_t size,
     YR_OBJECT* object,
     YR_SCAN_CONTEXT* context)
 {
   int should_swap = should_swap_bytes(get_integer(object, "magic"));
   bool is64 = false;
 
-  uint32_t command_size = ((yr_thread_command_t*) command)->cmdsize;
+  if (size < sizeof(yr_thread_command_t))
+    return;
+
+  // command_size is the size indicated in yr_thread_command_t structure, but
+  // limited to the data's size because we can't rely on the structure having a
+  // valid size.
+  uint32_t command_size = yr_min(size, ((yr_thread_command_t*) data)->cmdsize);
 
-  // command_size should be greater than the size of yr_thread_command_t, if
-  // not the file is corrupt.
+  // command_size should be at least the size of yr_thread_command_t.
   if (command_size < sizeof(yr_thread_command_t))
     return;
 
   // command_size includes the size of yr_thread_command_t and the thread
   // state structure that follows, let's compute the size of the thread state
   // structure.
   size_t thread_state_size = command_size - sizeof(yr_thread_command_t);
 
   // The structure that contains the thread state starts where
   // yr_thread_command_t ends.
-  const void* thread_state = command + sizeof(yr_thread_command_t);
+  const void* thread_state = data + sizeof(yr_thread_command_t);
 
   uint64_t address = 0;
 
   switch (get_integer(object, "cputype"))
   {
   case CPU_TYPE_MC680X0:
   {
     if (thread_state_size >= sizeof(yr_m68k_thread_state_t))
       address = ((yr_m68k_thread_state_t*) thread_state)->pc;
     break;
   }
   case CPU_TYPE_MC88000:
   {
     if (thread_state_size >= sizeof(yr_m88k_thread_state_t))
       address = ((yr_m88k_thread_state_t*) thread_state)->xip;
     break;
   }
   case CPU_TYPE_SPARC:
   {
     if (thread_state_size >= sizeof(yr_sparc_thread_state_t))
       address = ((yr_sparc_thread_state_t*) thread_state)->pc;
     break;
   }
   case CPU_TYPE_POWERPC:
   {
     if (thread_state_size >= sizeof(yr_ppc_thread_state_t))
       address = ((yr_ppc_thread_state_t*) thread_state)->srr0;
     break;
   }
   case CPU_TYPE_X86:
   {
     if (thread_state_size >= sizeof(yr_x86_thread_state_t))
       address = ((yr_x86_thread_state_t*) thread_state)->eip;
     break;
   }
   case CPU_TYPE_ARM:
   {
     if (thread_state_size >= sizeof(yr_arm_thread_state_t))
       address = ((yr_arm_thread_state_t*) thread_state)->pc;
     break;
   }
   case CPU_TYPE_X86_64:
   {
     if (thread_state_size >= sizeof(yr_x86_thread_state64_t))
       address = ((yr_x86_thread_state64_t*) thread_state)->rip;
     is64 = true;
     break;
   }
   case CPU_TYPE_ARM64:
   {
     if (thread_state_size >= sizeof(yr_arm_thread_state64_t))
       address = ((yr_arm_thread_state64_t*) thread_state)->pc;
     is64 = true;
     break;
   }
   case CPU_TYPE_POWERPC64:
   {
     if (thread_state_size >= sizeof(yr_ppc_thread_state64_t))
       address = ((yr_ppc_thread_state64_t*) thread_state)->srr0;
     is64 = true;
     break;
   }
 
   default:
     return;
   }
 
   if (should_swap)
   {
     if (is64)
       address = yr_bswap64(address);
     else
       address = yr_bswap32(address);
   }
 
   if (context->flags & SCAN_FLAGS_PROCESS_MEMORY)
   {
     set_integer(address, object, "entry_point");
   }
   else
   {
     uint64_t offset = 0;
     if (macho_rva_to_offset(address, &offset, object))
     {
       set_integer(offset, object, "entry_point");
     }
   }
 }
 
 // Get entry point offset and stack-size from LC_MAIN load command.
 
 void macho_handle_main(
-    void* command,
+    void* data,
+    size_t size,
     YR_OBJECT* object,
     YR_SCAN_CONTEXT* context)
 {
   yr_entry_point_command_t ep_command;
 
-  memcpy(&ep_command, command, sizeof(yr_entry_point_command_t));
+  if (size < sizeof(yr_entry_point_command_t))
+    return;
+
+  memcpy(&ep_command, data, sizeof(yr_entry_point_command_t));
 
   if (should_swap_bytes(get_integer(object, "magic")))
     swap_entry_point_command(&ep_command);
 
   if (context->flags & SCAN_FLAGS_PROCESS_MEMORY)
   {
     uint64_t address = 0;
     if (macho_offset_to_rva(ep_command.entryoff, &address, object))
     {
       set_integer(address, object, "entry_point");
     }
   }
   else
   {
     set_integer(ep_command.entryoff, object, "entry_point");
   }
   set_integer(ep_command.stacksize, object, "stack_size");
 }
 
 // Load segment and its sections.
 
 void macho_handle_segment(
-    const uint8_t* command,
+    const uint8_t* data,
+    size_t size,
     const unsigned i,
     YR_OBJECT* object)
 {
-  int should_swap = should_swap_bytes(get_integer(object, "magic"));
+  if (size < sizeof(yr_segment_command_32_t))
+    return;
 
   yr_segment_command_32_t sg;
 
-  memcpy(&sg, command, sizeof(yr_segment_command_32_t));
+  memcpy(&sg, data, sizeof(yr_segment_command_32_t));
+
+  int should_swap = should_swap_bytes(get_integer(object, "magic"));
 
   if (should_swap)
     swap_segment_command(&sg);
 
   set_sized_string(
       sg.segname, strnlen(sg.segname, 16), object, "segments[%i].segname", i);
 
   set_integer(sg.vmaddr, object, "segments[%i].vmaddr", i);
   set_integer(sg.vmsize, object, "segments[%i].vmsize", i);
   set_integer(sg.fileoff, object, "segments[%i].fileoff", i);
   set_integer(sg.filesize, object, "segments[%i].fsize", i);
   set_integer(sg.maxprot, object, "segments[%i].maxprot", i);
   set_integer(sg.initprot, object, "segments[%i].initprot", i);
   set_integer(sg.nsects, object, "segments[%i].nsects", i);
   set_integer(sg.flags, object, "segments[%i].flags", i);
 
   uint64_t parsed_size = sizeof(yr_segment_command_32_t);
 
   // The array of yr_section_32_t starts where yr_segment_command_32_t ends.
   yr_section_32_t* sections =
-      (yr_section_32_t*) (command + sizeof(yr_segment_command_32_t));
+      (yr_section_32_t*) (data + sizeof(yr_segment_command_32_t));
 
   for (unsigned j = 0; j < sg.nsects; ++j)
   {
     yr_section_32_t sec;
 
     parsed_size += sizeof(yr_section_32_t);
 
     if (sg.cmdsize < parsed_size)
       break;
 
     memcpy(&sec, &sections[j], sizeof(yr_section_32_t));
 
     if (should_swap)
       swap_section(&sec);
 
     set_sized_string(
         sec.segname,
         strnlen(sec.segname, 16),
         object,
         "segments[%i].sections[%i].segname",
         i,
         j);
 
     set_sized_string(
         sec.sectname,
         strnlen(sec.sectname, 16),
         object,
         "segments[%i].sections[%i].sectname",
         i,
         j);
 
     set_integer(sec.addr, object, "segments[%i].sections[%i].addr", i, j);
 
     set_integer(sec.size, object, "segments[%i].sections[%i].size", i, j);
 
     set_integer(sec.offset, object, "segments[%i].sections[%i].offset", i, j);
 
     set_integer(sec.align, object, "segments[%i].sections[%i].align", i, j);
 
     set_integer(sec.reloff, object, "segments[%i].sections[%i].reloff", i, j);
 
     set_integer(sec.nreloc, object, "segments[%i].sections[%i].nreloc", i, j);
 
     set_integer(sec.flags, object, "segments[%i].sections[%i].flags", i, j);
 
     set_integer(
         sec.reserved1, object, "segments[%i].sections[%i].reserved1", i, j);
 
     set_integer(
         sec.reserved2, object, "segments[%i].sections[%i].reserved2", i, j);
   }
 }
 
 void macho_handle_segment_64(
-    const uint8_t* command,
+    const uint8_t* data,
+    size_t size,
     const unsigned i,
     YR_OBJECT* object)
 {
-  int should_swap = should_swap_bytes(get_integer(object, "magic"));
+  if (size < sizeof(yr_segment_command_64_t))
+    return;
 
   yr_segment_command_64_t sg;
 
-  memcpy(&sg, command, sizeof(yr_segment_command_64_t));
+  memcpy(&sg, data, sizeof(yr_segment_command_64_t));
+
+  int should_swap = should_swap_bytes(get_integer(object, "magic"));
 
   if (should_swap)
     swap_segment_command_64(&sg);
 
   set_sized_string(
       sg.segname, strnlen(sg.segname, 16), object, "segments[%i].segname", i);
 
   set_integer(sg.vmaddr, object, "segments[%i].vmaddr", i);
   set_integer(sg.vmsize, object, "segments[%i].vmsize", i);
   set_integer(sg.fileoff, object, "segments[%i].fileoff", i);
   set_integer(sg.filesize, object, "segments[%i].fsize", i);
   set_integer(sg.maxprot, object, "segments[%i].maxprot", i);
   set_integer(sg.initprot, object, "segments[%i].initprot", i);
   set_integer(sg.nsects, object, "segments[%i].nsects", i);
   set_integer(sg.flags, object, "segments[%i].flags", i);
 
   uint64_t parsed_size = sizeof(yr_segment_command_64_t);
 
   yr_section_64_t sec;
 
   for (unsigned j = 0; j < sg.nsects; ++j)
   {
     parsed_size += sizeof(yr_section_64_t);
+
     if (sg.cmdsize < parsed_size)
       break;
 
     memcpy(
         &sec,
-        command + sizeof(yr_segment_command_64_t) +
-            (j * sizeof(yr_section_64_t)),
+        data + sizeof(yr_segment_command_64_t) + (j * sizeof(yr_section_64_t)),
         sizeof(yr_section_64_t));
 
     if (should_swap)
       swap_section_64(&sec);
 
     set_sized_string(
         sec.segname,
         strnlen(sec.segname, 16),
         object,
         "segments[%i].sections[%i].segname",
         i,
         j);
 
     set_sized_string(
         sec.sectname,
         strnlen(sec.sectname, 16),
         object,
         "segments[%i].sections[%i].sectname",
         i,
         j);
 
     set_integer(sec.addr, object, "segments[%i].sections[%i].addr", i, j);
 
     set_integer(sec.size, object, "segments[%i].sections[%i].size", i, j);
 
     set_integer(sec.offset, object, "segments[%i].sections[%i].offset", i, j);
 
     set_integer(sec.align, object, "segments[%i].sections[%i].align", i, j);
 
     set_integer(sec.reloff, object, "segments[%i].sections[%i].reloff", i, j);
 
     set_integer(sec.nreloc, object, "segments[%i].sections[%i].nreloc", i, j);
 
     set_integer(sec.flags, object, "segments[%i].sections[%i].flags", i, j);
 
     set_integer(
         sec.reserved1, object, "segments[%i].sections[%i].reserved1", i, j);
 
     set_integer(
         sec.reserved2, object, "segments[%i].sections[%i].reserved2", i, j);
 
     set_integer(
         sec.reserved3, object, "segments[%i].sections[%i].reserved3", i, j);
   }
 }
 
 // Parse Mach-O file.
@@ -526,117 +544,113 @@ void macho_handle_segment_64(
 void macho_parse_file(
     const uint8_t* data,
     const uint64_t size,
     YR_OBJECT* object,
     YR_SCAN_CONTEXT* context)
 {
   // Size must be large enough the hold yr_mach_header_64_t, which is larger
   // than yr_mach_header_32_t.
   if (size < sizeof(yr_mach_header_64_t))
     return;
 
   size_t header_size = macho_is_32(data) ? sizeof(yr_mach_header_32_t)
                                          : sizeof(yr_mach_header_64_t);
 
   // yr_mach_header_64_t is used for storing the header for both for 32-bits and
   // 64-bits files. yr_mach_header_64_t is exactly like yr_mach_header_32_t
   // but with an extra "reserved" field at the end.
   yr_mach_header_64_t header;
 
   memcpy(&header, data, header_size);
 
   int should_swap = should_swap_bytes(header.magic);
 
   if (should_swap)
     swap_mach_header(&header);
 
   set_integer(header.magic, object, "magic");
   set_integer(header.cputype, object, "cputype");
   set_integer(header.cpusubtype, object, "cpusubtype");
   set_integer(header.filetype, object, "filetype");
   set_integer(header.ncmds, object, "ncmds");
   set_integer(header.sizeofcmds, object, "sizeofcmds");
   set_integer(header.flags, object, "flags");
 
   // The "reserved" field exists only in 64 bits files.
   if (!macho_is_32(data))
     set_integer(header.reserved, object, "reserved");
 
   // The first command parsing pass handles only segments.
   uint64_t seg_count = 0;
   uint64_t parsed_size = header_size;
   uint8_t* command = (uint8_t*) (data + header_size);
 
   yr_load_command_t command_struct;
 
   for (unsigned i = 0; i < header.ncmds; i++)
   {
     if (data + size < command + sizeof(yr_load_command_t))
       break;
 
     memcpy(&command_struct, command, sizeof(yr_load_command_t));
 
     if (should_swap)
       swap_load_command(&command_struct);
 
     if (size - parsed_size < command_struct.cmdsize)
       break;
 
     if (command_struct.cmdsize < sizeof(yr_load_command_t))
       break;
 
     switch (command_struct.cmd)
     {
     case LC_SEGMENT:
-      if (command_struct.cmdsize >= sizeof(yr_segment_command_32_t))
-        macho_handle_segment(command, seg_count++, object);
+      macho_handle_segment(command, size - parsed_size, seg_count++, object);
       break;
     case LC_SEGMENT_64:
-      if (command_struct.cmdsize >= sizeof(yr_segment_command_64_t))
-        macho_handle_segment_64(command, seg_count++, object);
+      macho_handle_segment_64(command, size - parsed_size, seg_count++, object);
       break;
     }
 
     command += command_struct.cmdsize;
     parsed_size += command_struct.cmdsize;
   }
 
   set_integer(seg_count, object, "number_of_segments");
 
   // The second command parsing pass handles others, who use segment count.
   parsed_size = header_size;
   command = (uint8_t*) (data + header_size);
 
   for (unsigned i = 0; i < header.ncmds; i++)
   {
     if (data + size < command + sizeof(yr_load_command_t))
       break;
 
     memcpy(&command_struct, command, sizeof(yr_load_command_t));
 
     if (should_swap)
       swap_load_command(&command_struct);
 
     if (size - parsed_size < command_struct.cmdsize)
       break;
 
     if (command_struct.cmdsize < sizeof(yr_load_command_t))
       break;
 
     switch (command_struct.cmd)
     {
     case LC_UNIXTHREAD:
-      if (command_struct.cmdsize >= sizeof(yr_thread_command_t))
-        macho_handle_unixthread(command, object, context);
+      macho_handle_unixthread(command, size - parsed_size, object, context);
       break;
     case LC_MAIN:
-      if (command_struct.cmdsize >= sizeof(yr_entry_point_command_t))
-        macho_handle_main(command, object, context);
+      macho_handle_main(command, size - parsed_size, object, context);
       break;
     }
 
     command += command_struct.cmdsize;
     parsed_size += command_struct.cmdsize;
   }
 }
 
 // Parse Mach-O fat file.
