commit 767a0d9302dce5d7467014cfd64f91a1b266e6d9
Author: Nathan Moinvaziri <nathan@nathanm.com>
Date:   Sat Feb 13 21:10:01 2021 -0800

    Fixed ASAN heap-buffer-overflow by checking for reading trailer outside of the frame boundaries.
    https://oss-fuzz.com/testcase-detail/5143072323272704

diff --git a/blosc/frame.c b/blosc/frame.c
index b2958bc3..10486955 100644
--- a/blosc/frame.c
+++ b/blosc/frame.c
@@ -578,201 +578,206 @@ int update_frame_len(blosc2_frame_s* frame, int64_t len) {
 int frame_update_trailer(blosc2_frame_s* frame, blosc2_schunk* schunk) {
   if (frame != NULL && frame->len == 0) {
     BLOSC_TRACE_ERROR("The trailer cannot be updated on empty frames.");
   }
 
   // Create the trailer in msgpack (see the frame format document)
   uint32_t trailer_len = FRAME_TRAILER_MINLEN;
   uint8_t* trailer = (uint8_t*)calloc((size_t)trailer_len, 1);
   uint8_t* ptrailer = trailer;
   *ptrailer = 0x90 + 4;  // fixarray with 4 elements
   ptrailer += 1;
   // Trailer format version
   *ptrailer = FRAME_TRAILER_VERSION;
   ptrailer += 1;
 
   int32_t current_trailer_len = (int32_t)(ptrailer - trailer);
 
   // Now, deal with variable-length metalayers
   int16_t nvlmetalayers = schunk->nvlmetalayers;
   if (nvlmetalayers < 0 || nvlmetalayers > BLOSC2_MAX_METALAYERS) {
     return -1;
   }
 
   // Make space for the header of metalayers (array marker, size, map of offsets)
   trailer = realloc(trailer, (size_t) current_trailer_len + 1 + 1 + 2 + 1 + 2);
   ptrailer = trailer + current_trailer_len;
 
   // The msgpack header for the metalayers (array_marker, size, map of offsets, list of metalayers)
   *ptrailer = 0x90 + 3;  // array with 3 elements
   ptrailer += 1;
 
   int32_t tsize = (ptrailer - trailer);
 
   // Size for the map (index) of metalayer offsets, including this uint16 size (to be filled out later on)
   *ptrailer = 0xcd;  // uint16
   ptrailer += 1 + 2;
 
   // Map (index) of offsets for optional metalayers
   *ptrailer = 0xde;  // map 16 with N keys
   ptrailer += 1;
   big_store(ptrailer, &nvlmetalayers, sizeof(nvlmetalayers));
   ptrailer += sizeof(nvlmetalayers);
   current_trailer_len = (int32_t)(ptrailer - trailer);
   int32_t *offtodata = malloc(nvlmetalayers * sizeof(int32_t));
   for (int nvlmetalayer = 0; nvlmetalayer < nvlmetalayers; nvlmetalayer++) {
     if (frame == NULL) {
       return -1;
     }
     blosc2_metalayer *vlmetalayer = schunk->vlmetalayers[nvlmetalayer];
     uint8_t name_len = (uint8_t) strlen(vlmetalayer->name);
     trailer = realloc(trailer, (size_t)current_trailer_len + 1 + name_len + 1 + 4);
     ptrailer = trailer + current_trailer_len;
     // Store the vlmetalayer
     if (name_len >= (1U << 5U)) {  // metalayer strings cannot be longer than 32 bytes
       free(offtodata);
       return -1;
     }
     *ptrailer = (uint8_t)0xa0 + name_len;  // str
     ptrailer += 1;
     memcpy(ptrailer, vlmetalayer->name, name_len);
     ptrailer += name_len;
     // Space for storing the offset for the value of this vlmetalayer
     *ptrailer = 0xd2;  // int32
     ptrailer += 1;
     offtodata[nvlmetalayer] = (int32_t)(ptrailer - trailer);
     ptrailer += 4;
     current_trailer_len += 1 + name_len + 1 + 4;
   }
   int32_t tsize2 = (int32_t)(ptrailer - trailer);
   if (tsize2 != current_trailer_len) {  // sanity check
     return -1;
   }
 
   // Map size + int16 size
   if ((uint32_t) (tsize2 - tsize) >= (1U << 16U)) {
     return -1;
   }
   uint16_t map_size = (uint16_t) (tsize2 - tsize);
   big_store(trailer + 4, &map_size, sizeof(map_size));
 
   // Make space for an (empty) array
   tsize = (int32_t)(ptrailer - trailer);
   trailer = realloc(trailer, (size_t) tsize + 2 + 1 + 2);
   ptrailer = trailer + tsize;
 
   // Now, store the values in an array
   *ptrailer = 0xdc;  // array 16 with N elements
   ptrailer += 1;
   big_store(ptrailer, &nvlmetalayers, sizeof(nvlmetalayers));
   ptrailer += sizeof(nvlmetalayers);
   current_trailer_len = (int32_t)(ptrailer - trailer);
   for (int nvlmetalayer = 0; nvlmetalayer < nvlmetalayers; nvlmetalayer++) {
     if (frame == NULL) {
       return -1;
     }
     blosc2_metalayer *vlmetalayer = schunk->vlmetalayers[nvlmetalayer];
     trailer = realloc(trailer, (size_t)current_trailer_len + 1 + 4 + vlmetalayer->content_len);
     ptrailer = trailer + current_trailer_len;
     // Store the serialized contents for this vlmetalayer
     *ptrailer = 0xc6;  // bin32
     ptrailer += 1;
     big_store(ptrailer, &(vlmetalayer->content_len), sizeof(vlmetalayer->content_len));
     ptrailer += 4;
     memcpy(ptrailer, vlmetalayer->content, vlmetalayer->content_len);  // buffer, no need to swap
     ptrailer += vlmetalayer->content_len;
     // Update the offset now that we know it
     big_store(trailer + offtodata[nvlmetalayer], &current_trailer_len, sizeof(current_trailer_len));
     current_trailer_len += 1 + 4 + vlmetalayer->content_len;
   }
   free(offtodata);
   tsize = (int32_t)(ptrailer - trailer);
   if (tsize != current_trailer_len) {  // sanity check
     return -1;
   }
 
   trailer = realloc(trailer, (size_t)current_trailer_len + 23);
   ptrailer = trailer + current_trailer_len;
   trailer_len = (ptrailer - trailer) + 23;
 
   // Trailer length
   *ptrailer = 0xce;  // uint32
   ptrailer += 1;
   big_store(ptrailer, &trailer_len, sizeof(uint32_t));
   ptrailer += sizeof(uint32_t);
   // Up to 16 bytes for frame fingerprint (using XXH3 included in https://github.com/Cyan4973/xxHash)
   // Maybe someone would need 256-bit in the future, but for the time being 128-bit seems like a good tradeoff
   *ptrailer = 0xd8;  // fixext 16
   ptrailer += 1;
   *ptrailer = 0;  // fingerprint type: 0 -> no fp; 1 -> 32-bit; 2 -> 64-bit; 3 -> 128-bit
   ptrailer += 1;
 
   // Uncomment this when we compute an actual fingerprint
   // memcpy(ptrailer, xxh3_fingerprint, sizeof(xxh3_fingerprint));
   ptrailer += 16;
 
   // Sanity check
   if (ptrailer - trailer != trailer_len) {
     return BLOSC2_ERROR_DATA;
   }
 
   int32_t header_len;
   int64_t frame_len;
   int64_t nbytes;
   int64_t cbytes;
   int32_t chunksize;
   int32_t nchunks;
   int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
                             NULL, NULL, NULL, NULL, NULL);
   if (ret < 0) {
     BLOSC_TRACE_ERROR("Unable to get meta info from frame.");
     return ret;
   }
 
   int64_t trailer_offset = get_trailer_offset(frame, header_len, nbytes > 0);
 
+  if (trailer_offset < BLOSC_EXTENDED_HEADER_LENGTH) {
+    BLOSC_TRACE_ERROR("Unable to get trailer offset in frame.");
+    return BLOSC2_ERROR_READ_BUFFER;
+  }
+
   // Update the trailer.  As there are no internal offsets to the trailer section,
   // and it is always at the end of the frame, we can just write (or overwrite) it
   // at the end of the frame.
   if (frame->cframe != NULL) {
     frame->cframe = realloc(frame->cframe, (size_t)(trailer_offset + trailer_len));
     if (frame->cframe == NULL) {
       BLOSC_TRACE_ERROR("Cannot realloc space for the frame.");
       return BLOSC2_ERROR_MEMORY_ALLOC;
     }
     memcpy(frame->cframe + trailer_offset, trailer, trailer_len);
   }
   else {
     FILE* fp = NULL;
     if (frame->sframe) {
       fp = sframe_open_index(frame->urlpath, "rb+");
     }
     else {
       fp = fopen(frame->urlpath, "rb+");
     }
     fseek(fp, trailer_offset, SEEK_SET);
     size_t wbytes = fwrite(trailer, 1, trailer_len, fp);
     if (wbytes != (size_t)trailer_len) {
       BLOSC_TRACE_ERROR("Cannot write the trailer length in trailer.");
       return BLOSC2_ERROR_FILE_WRITE;
     }
     if (TRUNCATE(fileno(fp), trailer_offset + trailer_len) != 0) {
       BLOSC_TRACE_ERROR("Cannot truncate the frame.");
       return BLOSC2_ERROR_FILE_TRUNCATE;
     }
     fclose(fp);
 
   }
   free(trailer);
 
   int rc = update_frame_len(frame, trailer_offset + trailer_len);
   if (rc < 0) {
     return rc;
   }
   frame->len = trailer_offset + trailer_len;
   frame->trailer_len = trailer_len;
 
   return 1;
 }
 
 
 /* Initialize a frame out of a file */
@@ -1019,55 +1024,62 @@ int64_t frame_from_schunk(blosc2_schunk *schunk, blosc2_frame_s *frame) {
 // Get the compressed data offsets
 uint8_t* get_coffsets(blosc2_frame_s *frame, int32_t header_len, int64_t cbytes, int32_t *off_cbytes) {
   if (frame->coffsets != NULL) {
     if (off_cbytes != NULL) {
       *off_cbytes = *(int32_t *) (frame->coffsets + BLOSC2_CHUNK_CBYTES);
     }
     return frame->coffsets;
   }
   if (frame->cframe != NULL) {
     int64_t off_pos = header_len + cbytes;
     // Check that there is enough room to read Blosc header
     if (off_pos < 0 || off_pos + BLOSC_EXTENDED_HEADER_LENGTH < 0 ||
         off_pos + BLOSC_EXTENDED_HEADER_LENGTH > frame->len) {
       BLOSC_TRACE_ERROR("Cannot read the offsets outside of frame boundary.");
       return NULL;
     }
     // For in-memory frames, the coffset is just one pointer away
     uint8_t* off_start = frame->cframe + off_pos;
     if (off_cbytes != NULL) {
       *off_cbytes = *(int32_t*) (off_start + BLOSC2_CHUNK_CBYTES);
     }
     return off_start;
   }
 
   int64_t trailer_offset = get_trailer_offset(frame, header_len, true);
+
+  if (trailer_offset < BLOSC_EXTENDED_HEADER_LENGTH || trailer_offset + FRAME_TRAILER_MINLEN > frame->len) {
+    BLOSC_TRACE_ERROR("Cannot read the trailer out of the frame.");
+    return NULL;
+  }
+
   int32_t coffsets_cbytes;
   if (frame->sframe) {
     coffsets_cbytes = (int32_t) (trailer_offset - (header_len + 0));
   }
   else {
     coffsets_cbytes = (int32_t) (trailer_offset - (header_len + cbytes));
   }
+
   if (off_cbytes != NULL) {
     *off_cbytes = coffsets_cbytes;
   }
   FILE* fp = NULL;
   uint8_t* coffsets = malloc((size_t)coffsets_cbytes);
   if (frame->sframe) {
     fp = sframe_open_index(frame->urlpath, "rb");
     fseek(fp, header_len + 0, SEEK_SET);
   }
   else {
     fp = fopen(frame->urlpath, "rb");
     fseek(fp, header_len + cbytes, SEEK_SET);
   }
   size_t rbytes = fread(coffsets, 1, (size_t)coffsets_cbytes, fp);
   fclose(fp);
   if (rbytes != (size_t)coffsets_cbytes) {
     BLOSC_TRACE_ERROR("Cannot read the offsets out of the frame.");
     free(coffsets);
     return NULL;
   }
   frame->coffsets = coffsets;
   return coffsets;
 }
@@ -1424,54 +1436,59 @@ static int get_vlmeta_from_trailer(blosc2_frame_s* frame, blosc2_schunk* schunk,
 int frame_get_vlmetalayers(blosc2_frame_s* frame, blosc2_schunk* schunk) {
   int32_t header_len;
   int64_t frame_len;
   int64_t nbytes;
   int64_t cbytes;
   int32_t chunksize;
   int32_t nchunks;
   int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
                             NULL, NULL, NULL, NULL, NULL);
   if (ret < 0) {
     BLOSC_TRACE_ERROR("Unable to get the trailer info from frame.");
     return ret;
   }
 
-  int32_t trailer_offset = get_trailer_offset(frame, header_len, nbytes > 0);
+  int64_t trailer_offset = get_trailer_offset(frame, header_len, nbytes > 0);
   int32_t trailer_len = frame->trailer_len;
 
+  if (trailer_offset < BLOSC_EXTENDED_HEADER_LENGTH || trailer_offset + trailer_len > frame->len) {
+    BLOSC_TRACE_ERROR("Cannot access the trailer out of the frame.");
+    return BLOSC2_ERROR_READ_BUFFER;
+  }
+
   // Get the trailer
   uint8_t* trailer = NULL;
   if (frame->cframe != NULL) {
     trailer = frame->cframe + trailer_offset;
   } else {
     size_t rbytes = 0;
     trailer = malloc(trailer_len);
     FILE* fp = NULL;
     if (frame->sframe) {
       char* eframe_name = malloc(strlen(frame->urlpath) + strlen("/chunks.b2frame") + 1);
       sprintf(eframe_name, "%s/chunks.b2frame", frame->urlpath);
       fp = fopen(eframe_name, "rb");
       free(eframe_name);
     }
     else {
       fp = fopen(frame->urlpath, "rb");
     }
     if (fp != NULL) {
       fseek(fp, trailer_offset, SEEK_SET);
       rbytes = fread(trailer, 1, trailer_len, fp);
       fclose(fp);
     }
     if (rbytes != (size_t) trailer_len) {
       BLOSC_TRACE_ERROR("Cannot access the trailer out of the fileframe.");
       free(trailer);
       return BLOSC2_ERROR_FILE_READ;
     }
   }
 
   ret = get_vlmeta_from_trailer(frame, schunk, trailer, trailer_len);
 
   if (frame->cframe == NULL) {
     free(trailer);
   }
 
   return ret;
 }
