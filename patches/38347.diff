commit 2f209573d0f582385baa00cae45dcf10d50d96c4
Author: Martijn van Beurden <mvanb1@gmail.com>
Date:   Wed Dec 22 21:17:14 2021 +0100

    Check for predictor order <= blocksize in subframe header
    
    Credit: Oss-Fuzz
    Issue: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=38347
    
    Signed-off-by: Ralph Giles <giles@thaumas.net>

diff --git a/src/libFLAC/stream_decoder.c b/src/libFLAC/stream_decoder.c
index 143229bb..f1fa8842 100644
--- a/src/libFLAC/stream_decoder.c
+++ b/src/libFLAC/stream_decoder.c
@@ -2485,79 +2485,91 @@ FLAC__bool read_frame_header_(FLAC__StreamDecoder *decoder)
 FLAC__bool read_subframe_(FLAC__StreamDecoder *decoder, uint32_t channel, uint32_t bps, FLAC__bool do_full_decode)
 {
 	FLAC__uint32 x;
 	FLAC__bool wasted_bits;
 	uint32_t i;
 
 	if(!FLAC__bitreader_read_raw_uint32(decoder->private_->input, &x, 8)) /* MAGIC NUMBER */
 		return false; /* read_callback_ sets the state for us */
 
 	wasted_bits = (x & 1);
 	x &= 0xfe;
 
 	if(wasted_bits) {
 		uint32_t u;
 		if(!FLAC__bitreader_read_unary_unsigned(decoder->private_->input, &u))
 			return false; /* read_callback_ sets the state for us */
 		decoder->private_->frame.subframes[channel].wasted_bits = u+1;
 		if (decoder->private_->frame.subframes[channel].wasted_bits >= bps)
 			return false;
 		bps -= decoder->private_->frame.subframes[channel].wasted_bits;
 	}
 	else
 		decoder->private_->frame.subframes[channel].wasted_bits = 0;
 
 	/*
 	 * Lots of magic numbers here
 	 */
 	if(x & 0x80) {
 		send_error_to_client_(decoder, FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC);
 		decoder->protected_->state = FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC;
 		return true;
 	}
 	else if(x == 0) {
 		if(!read_subframe_constant_(decoder, channel, bps, do_full_decode))
 			return false;
 	}
 	else if(x == 2) {
 		if(!read_subframe_verbatim_(decoder, channel, bps, do_full_decode))
 			return false;
 	}
 	else if(x < 16) {
 		send_error_to_client_(decoder, FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM);
 		decoder->protected_->state = FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC;
 		return true;
 	}
 	else if(x <= 24) {
+		uint32_t predictor_order = (x>>1)&7;
 		if(decoder->private_->frame.header.bits_per_sample > 24){
 			/* Decoder isn't equipped for fixed subframes with more than 24 bps */
 			send_error_to_client_(decoder, FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM);
 			decoder->protected_->state = FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC;
 			return true;
 		}
-		if(!read_subframe_fixed_(decoder, channel, bps, (x>>1)&7, do_full_decode))
+		if(decoder->private_->frame.header.blocksize <= predictor_order){
+			send_error_to_client_(decoder, FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC);
+			decoder->protected_->state = FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC;
+			return true;
+		}
+		if(!read_subframe_fixed_(decoder, channel, bps, predictor_order, do_full_decode))
 			return false;
 		if(decoder->protected_->state == FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC) /* means bad sync or got corruption */
 			return true;
 	}
 	else if(x < 64) {
 		send_error_to_client_(decoder, FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM);
 		decoder->protected_->state = FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC;
 		return true;
 	}
 	else {
-		if(!read_subframe_lpc_(decoder, channel, bps, ((x>>1)&31)+1, do_full_decode))
+		uint32_t predictor_order = ((x>>1)&31)+1;
+		if(decoder->private_->frame.header.blocksize <= predictor_order){
+			send_error_to_client_(decoder, FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC);
+			decoder->protected_->state = FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC;
+			return true;
+		}
+		if(!read_subframe_lpc_(decoder, channel, bps, predictor_order, do_full_decode))
 			return false;
 		if(decoder->protected_->state == FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC) /* means bad sync or got corruption */
 			return true;
 	}
 
 	if(wasted_bits && do_full_decode) {
 		x = decoder->private_->frame.subframes[channel].wasted_bits;
 		for(i = 0; i < decoder->private_->frame.header.blocksize; i++) {
 			uint32_t val = decoder->private_->output[channel][i];
 			decoder->private_->output[channel][i] = (val << x);
 		}
 	}
 
 	return true;
 }
