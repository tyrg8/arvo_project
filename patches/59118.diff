commit 9b7e822916a0ccd6fa961e5364f99112bed964c6
Author: Reini Urban <rurban@cpan.org>
Date:   Thu Jun 8 13:10:28 2023 +0200

    outdxf: fix unsigned loop overflow
    
    which never goes < 0 when decr len -= 255.
    Fixes GH #759, thanks to @weikenxq

diff --git a/src/decode.h b/src/decode.h
index 9c8cc187..48fab63c 100644
--- a/src/decode.h
+++ b/src/decode.h
@@ -1,35 +1,35 @@
 /*****************************************************************************/
 /*  LibreDWG - free implementation of the DWG file format                    */
 /*                                                                           */
 /*  Copyright (C) 2009-2019 Free Software Foundation, Inc.                   */
 /*                                                                           */
 /*  This library is free software, licensed under the terms of the GNU       */
 /*  General Public License as published by the Free Software Foundation,     */
 /*  either version 3 of the License, or (at your option) any later version.  */
 /*  You should have received a copy of the GNU General Public License        */
 /*  along with this program.  If not, see <http://www.gnu.org/licenses/>.    */
 /*****************************************************************************/
 
 /*
  * decode.h: decoding function prototypes
  * written by Felipe Castro
  * modified by Felipe CorrÃªa da Silva Sances
  * modified by Rodrigo Rodrigues da Silva
  * modified by Reini Urban
  */
 
 #ifndef DECODE_H
 #define DECODE_H
 
 #include "bits.h"
 #include "dwg.h"
 #include "decode_r11.h"
 
 #ifdef IN_DXF_H
 #  error in_dxf.h must be included after decode.h because of FORMAT_BD
 #endif
 
-#define REFS_PER_REALLOC 128
+#define REFS_PER_REALLOC 16384
 
 typedef enum ENTITY_SECTION_INDEX_R11
 {
diff --git a/src/out_dxf.c b/src/out_dxf.c
index da314fbc..33381a9b 100644
--- a/src/out_dxf.c
+++ b/src/out_dxf.c
@@ -1224,58 +1224,60 @@ static void
 dxf_fixup_string (Bit_Chain *restrict dat, char *restrict str, const int opts,
                   const int dxf, const int dxfcont)
 {
   if (str && *str)
     {
       if (opts
           && (strchr (str, '\n') || strchr (str, '\r')
               || strstr (str, "\\M+1")))
         {
           static char _buf[1024] = { 0 };
           const size_t origlen = strlen (str);
-          size_t len = (2 * origlen) + 1;
+          long len = (long)((2 * origlen) + 1);
           if (len > 1024)
             { // FIXME: maybe we need this for chunked strings
               fprintf (dat->fh, "\r\n");
               LOG_ERROR ("Overlarge DXF string, len=%zu", origlen);
               return;
             }
           *_buf = '\0';
-          len = strlen (cquote (_buf, len, str));
+          len = (long)strlen (cquote (_buf, len, str));
           if (len > 255 && dxf == 1)
             {
               char *bufp = &_buf[0];
               // GROUP 1 already printed
               while (len > 0)
                 {
-                  fprintf (dat->fh, "%.*s\r\n", len > 255 ? 255 : (int)len, bufp);
+                  int rlen = len > 255 ? 255 : len;
+                  fprintf (dat->fh, "%.*s\r\n", rlen, bufp);
                   len -= 255;
                   bufp += 255;
                   if (len > 0)
                     fprintf (dat->fh, "%3d\r\n", dxfcont);
                 }
             }
           else
             fprintf (dat->fh, "%s\r\n", _buf);
         }
       else
         {
-          size_t len = strlen (str);
+          long len = (long)strlen (str);
           if (len > 255 && dxf == 1)
             {
               // GROUP 1 already printed
               while (len > 0)
                 {
-                  fprintf (dat->fh, "%.*s\r\n", len > 255 ? 255 : (int)len, str);
+                  int rlen = len > 255 ? 255 : len;
+                  fprintf (dat->fh, "%.*s\r\n", (int)rlen, str);
                   len -= 255;
                   str += 255;
-                  if (len > 0)
+                  if (len > 255)
                     fprintf (dat->fh, "  3\r\n");
                 }
             }
           else
             fprintf (dat->fh, "%s\r\n", str);
         }
     }
   else
     fprintf (dat->fh, "\r\n");
 }
