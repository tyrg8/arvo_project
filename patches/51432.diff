commit 7d1c7d46c7a7fcd9987fc2691712b0696ab6646c
Author: Caol√°n McNamara <caolanm@redhat.com>
Date:   Fri Sep 16 09:41:39 2022 +0100

    ofz#51432 double-free with bad .aff

diff --git a/src/hunspell/hashmgr.cxx b/src/hunspell/hashmgr.cxx
index 3328e53..75803f8 100644
--- a/src/hunspell/hashmgr.cxx
+++ b/src/hunspell/hashmgr.cxx
@@ -710,78 +710,91 @@ int HashMgr::hash(const char* word, size_t len) const {
 int HashMgr::decode_flags(unsigned short** result, const std::string& flags, FileMgr* af) const {
   int len;
   if (flags.empty()) {
     *result = NULL;
     return 0;
   }
   switch (flag_mode) {
     case FLAG_LONG: {  // two-character flags (1x2yZz -> 1x 2y Zz)
       len = flags.size();
       if (len % 2 == 1)
         HUNSPELL_WARNING(stderr, "error: line %d: bad flagvector\n",
                          af->getlinenum());
       len /= 2;
       *result = new unsigned short[len];
       for (int i = 0; i < len; i++) {
-        (*result)[i] = ((unsigned short)((unsigned char)flags[i * 2]) << 8) +
-                       (unsigned char)flags[i * 2 + 1];
+        unsigned short flag = ((unsigned short)((unsigned char)flags[i * 2]) << 8) +
+                              (unsigned char)flags[i * 2 + 1];
+
+        if (flag >= DEFAULTFLAGS) {
+          HUNSPELL_WARNING(stderr,
+                           "error: line %d: flag id %d is too large (max: %d)\n",
+                           af->getlinenum(), flag, DEFAULTFLAGS - 1);
+          flag = 0;
+        }
+
+        (*result)[i] = flag;
       }
       break;
     }
     case FLAG_NUM: {  // decimal numbers separated by comma (4521,23,233 -> 4521
                       // 23 233)
       len = 1;
       unsigned short* dest;
       for (size_t i = 0; i < flags.size(); ++i) {
         if (flags[i] == ',')
           len++;
       }
       *result = new unsigned short[len];
       dest = *result;
       const char* src = flags.c_str();
       for (size_t p = 0; p < flags.size(); ++p) {
         if (flags[p] == ',') {
           int i = atoi(src);
-          if (i >= DEFAULTFLAGS)
+          if (i >= DEFAULTFLAGS) {
             HUNSPELL_WARNING(
                 stderr, "error: line %d: flag id %d is too large (max: %d)\n",
                 af->getlinenum(), i, DEFAULTFLAGS - 1);
+             i = 0;
+	  }
           *dest = (unsigned short)i;
           if (*dest == 0)
             HUNSPELL_WARNING(stderr, "error: line %d: 0 is wrong flag id\n",
                              af->getlinenum());
           src = flags.c_str() + p + 1;
           dest++;
         }
       }
       int i = atoi(src);
-      if (i >= DEFAULTFLAGS)
+      if (i >= DEFAULTFLAGS) {
         HUNSPELL_WARNING(stderr,
                          "error: line %d: flag id %d is too large (max: %d)\n",
                          af->getlinenum(), i, DEFAULTFLAGS - 1);
+        i = 0;
+      }
       *dest = (unsigned short)i;
       if (*dest == 0)
         HUNSPELL_WARNING(stderr, "error: line %d: 0 is wrong flag id\n",
                          af->getlinenum());
       break;
     }
     case FLAG_UNI: {  // UTF-8 characters
       std::vector<w_char> w;
       u8_u16(w, flags);
       len = w.size();
       *result = new unsigned short[len];
       memcpy(*result, w.data(), len * sizeof(short));
       break;
     }
     default: {  // Ispell's one-character flags (erfg -> e r f g)
       unsigned short* dest;
       len = flags.size();
       *result = new unsigned short[len];
       dest = *result;
       for (size_t i = 0; i < flags.size(); ++i) {
         *dest = (unsigned char)flags[i];
         dest++;
       }
     }
   }
   return len;
 }
@@ -789,64 +802,68 @@ int HashMgr::decode_flags(unsigned short** result, const std::string& flags, Fil
 bool HashMgr::decode_flags(std::vector<unsigned short>& result, const std::string& flags, FileMgr* af) const {
   if (flags.empty()) {
     return false;
   }
   switch (flag_mode) {
     case FLAG_LONG: {  // two-character flags (1x2yZz -> 1x 2y Zz)
       size_t len = flags.size();
       if (len % 2 == 1)
         HUNSPELL_WARNING(stderr, "error: line %d: bad flagvector\n",
                          af->getlinenum());
       len /= 2;
       result.reserve(result.size() + len);
       for (size_t i = 0; i < len; ++i) {
         result.push_back(((unsigned short)((unsigned char)flags[i * 2]) << 8) +
                          (unsigned char)flags[i * 2 + 1]);
       }
       break;
     }
     case FLAG_NUM: {  // decimal numbers separated by comma (4521,23,233 -> 4521
                       // 23 233)
       const char* src = flags.c_str();
       for (const char* p = src; *p; p++) {
         if (*p == ',') {
           int i = atoi(src);
-          if (i >= DEFAULTFLAGS)
+          if (i >= DEFAULTFLAGS) {
             HUNSPELL_WARNING(
                 stderr, "error: line %d: flag id %d is too large (max: %d)\n",
                 af->getlinenum(), i, DEFAULTFLAGS - 1);
+            i = 0;
+	  }
           result.push_back((unsigned short)i);
           if (result.back() == 0)
             HUNSPELL_WARNING(stderr, "error: line %d: 0 is wrong flag id\n",
                              af->getlinenum());
           src = p + 1;
         }
       }
       int i = atoi(src);
-      if (i >= DEFAULTFLAGS)
+      if (i >= DEFAULTFLAGS) {
         HUNSPELL_WARNING(stderr,
                          "error: line %d: flag id %d is too large (max: %d)\n",
                          af->getlinenum(), i, DEFAULTFLAGS - 1);
+        i = 0;
+      }
       result.push_back((unsigned short)i);
       if (result.back() == 0)
         HUNSPELL_WARNING(stderr, "error: line %d: 0 is wrong flag id\n",
                          af->getlinenum());
       break;
     }
     case FLAG_UNI: {  // UTF-8 characters
       std::vector<w_char> w;
       u8_u16(w, flags);
       size_t len = w.size();
       size_t origsize = result.size();
       result.resize(origsize + len);
       memcpy(result.data() + origsize, w.data(), len * sizeof(short));
       break;
     }
     default: {  // Ispell's one-character flags (erfg -> e r f g)
       result.reserve(flags.size());
       for (size_t i = 0; i < flags.size(); ++i) {
         result.push_back((unsigned char)flags[i]);
       }
     }
   }
   return true;
 }
@@ -854,28 +871,30 @@ bool HashMgr::decode_flags(std::vector<unsigned short>& result, const std::strin
 unsigned short HashMgr::decode_flag(const std::string& f) const {
   unsigned short s = 0;
   int i;
   switch (flag_mode) {
     case FLAG_LONG:
       s = ((unsigned short)((unsigned char)f[0]) << 8) + (unsigned char)f[1];
       break;
     case FLAG_NUM:
       i = atoi(f.c_str());
-      if (i >= DEFAULTFLAGS)
+      if (i >= DEFAULTFLAGS) {
         HUNSPELL_WARNING(stderr, "error: flag id %d is too large (max: %d)\n",
                          i, DEFAULTFLAGS - 1);
+        i = 0;
+      }
       s = (unsigned short)i;
       break;
     case FLAG_UNI: {
       std::vector<w_char> w;
       u8_u16(w, f);
       if (!w.empty())
           memcpy(&s, w.data(), 1 * sizeof(short));
       break;
     }
     default:
       s = (unsigned char)f[0];
   }
   if (s == 0)
     HUNSPELL_WARNING(stderr, "error: 0 is wrong flag id\n");
   return s;
 }
