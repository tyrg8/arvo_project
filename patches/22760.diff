commit 7b5ba2afc759b7a44f6776a53030b494c6d985c3
Author: Dan Bloomberg <dan.bloomberg@gmail.com>
Date:   Fri May 29 13:22:12 2020 -0700

    Issue 22764 in oss-fuzz: uninit value in numaCrossingByThreshold().
    * may be related to issue 22760: illegal read in pixAverageRasterScans().
    * In readbarcode.c, make sure each pix is large enough.  Fix bug in
      pixAverageRasterScans(), that could lead to illegal addressing.
    * Added numa size checking; if n < 2 there will not be any crossings.
    * In binexpand.c, remove unnecessary warning.

diff --git a/src/binexpand.c b/src/binexpand.c
index c7a8c1a..3c67297 100644
--- a/src/binexpand.c
+++ b/src/binexpand.c
@@ -142,88 +142,86 @@ l_uint32  *datas, *datad, *lines, *lined, *tab4, *tab8;
 PIX       *pixd;
 
     PROCNAME("pixExpandBinaryPower2");
 
     if (!pixs)
         return (PIX *)ERROR_PTR("pixs not defined", procName, NULL);
     pixGetDimensions(pixs, &w, &h, &d);
     if (d != 1)
         return (PIX *)ERROR_PTR("pixs not binary", procName, NULL);
     if (factor == 1)
         return pixCopy(NULL, pixs);
     if (factor != 2 && factor != 4 && factor != 8 && factor != 16)
         return (PIX *)ERROR_PTR("factor must be in {2,4,8,16}", procName, NULL);
 
     wpls = pixGetWpl(pixs);
     datas = pixGetData(pixs);
     wd = factor * w;
     hd = factor * h;
     if ((pixd = pixCreate(wd, hd, 1)) == NULL)
         return (PIX *)ERROR_PTR("pixd not made", procName, NULL);
     pixCopyResolution(pixd, pixs);
     pixScaleResolution(pixd, (l_float32)factor, (l_float32)factor);
     wpld = pixGetWpl(pixd);
     datad = pixGetData(pixd);
     if (factor == 2) {
         tab2 = makeExpandTab2x();
         sbytes = (w + 7) / 8;
         for (i = 0; i < h; i++) {
             lines = datas + i * wpls;
             lined = datad + 2 * i * wpld;
             for (j = 0; j < sbytes; j++) {
                 sval = GET_DATA_BYTE(lines, j);
                 SET_DATA_TWO_BYTES(lined, j, tab2[sval]);
             }
             memcpy(lined + wpld, lined, 4 * wpld);
         }
         LEPT_FREE(tab2);
     } else if (factor == 4) {
         tab4 = makeExpandTab4x();
         sbytes = (w + 7) / 8;
         for (i = 0; i < h; i++) {
             lines = datas + i * wpls;
             lined = datad + 4 * i * wpld;
             for (j = 0; j < sbytes; j++) {
                 sval = GET_DATA_BYTE(lines, j);
                 lined[j] = tab4[sval];
             }
             for (k = 1; k < 4; k++)
                 memcpy(lined + k * wpld, lined, 4 * wpld);
         }
         LEPT_FREE(tab4);
     } else if (factor == 8) {
         tab8 = makeExpandTab8x();
         sqbits = (w + 3) / 4;
         for (i = 0; i < h; i++) {
             lines = datas + i * wpls;
             lined = datad + 8 * i * wpld;
             for (j = 0; j < sqbits; j++) {
                 sval = GET_DATA_QBIT(lines, j);
-                if (sval > 15)
-                    L_WARNING("sval = %d; should be < 16\n", procName, sval);
                 lined[j] = tab8[sval];
             }
             for (k = 1; k < 8; k++)
                 memcpy(lined + k * wpld, lined, 4 * wpld);
         }
         LEPT_FREE(tab8);
     } else {  /* factor == 16 */
         sdibits = (w + 1) / 2;
         for (i = 0; i < h; i++) {
             lines = datas + i * wpls;
             lined = datad + 16 * i * wpld;
             for (j = 0; j < sdibits; j++) {
                 sval = GET_DATA_DIBIT(lines, j);
                 lined[j] = expandtab16[sval];
             }
             for (k = 1; k < 16; k++)
                 memcpy(lined + k * wpld, lined, 4 * wpld);
         }
     }
 
     return pixd;
 }
 
 
 /*-------------------------------------------------------------------*
  *             Expansion tables for 2x, 4x and 8x expansion          *
  *-------------------------------------------------------------------*/
diff --git a/src/numafunc2.c b/src/numafunc2.c
index 9673d3b..f667303 100644
--- a/src/numafunc2.c
+++ b/src/numafunc2.c
@@ -2691,87 +2691,88 @@ l_float32  fval, delx, len;
 NUMA      *nat;
 
     PROCNAME("numaCountReversals");
 
     if (pnr) *pnr = 0;
     if (prd) *prd = 0.0;
     if (!pnr && !prd)
         return ERROR_INT("neither &nr nor &rd are defined", procName, 1);
     if (!nas)
         return ERROR_INT("nas not defined", procName, 1);
     if ((n = numaGetCount(nas)) == 0) {
         L_INFO("nas is empty\n", procName);
         return 0;
     }
     if (minreversal < 0.0)
         return ERROR_INT("minreversal < 0", procName, 1);
 
         /* Decide if the only values are 0 and 1 */
     binvals = TRUE;
     for (i = 0; i < n; i++) {
         numaGetFValue(nas, i, &fval);
         if (fval != 0.0 && fval != 1.0) {
             binvals = FALSE;
             break;
         }
     }
 
     nr = 0;
     if (binvals) {
         if (minreversal > 1.0) {
             L_WARNING("binary values but minreversal > 1\n", procName);
         } else {
             ia = numaGetIArray(nas);
             ival = ia[0];
             for (i = 1; i < n; i++) {
                 if (ia[i] != ival) {
                     nr++;
                     ival = ia[i];
                 }
             }
             LEPT_FREE(ia);
         }
     } else {
         nat = numaFindExtrema(nas, minreversal, NULL);
         nr = numaGetCount(nat);
         numaDestroy(&nat);
     }
     if (pnr) *pnr = nr;
     if (prd) {
         numaGetParameters(nas, NULL, &delx);
         len = delx * n;
         *prd = (l_float32)nr / len;
     }
 
     return 0;
 }
 
 
 /*----------------------------------------------------------------------*
  *                Threshold crossings and frequency analysis            *
  *----------------------------------------------------------------------*/
 /*!
  * \brief   numaSelectCrossingThreshold()
  *
  * \param[in]    nax          [optional] numa of abscissa values; can be NULL
  * \param[in]    nay          signal
  * \param[in]    estthresh    estimated pixel threshold for crossing:
  *                            e.g., for images, white <--> black; typ. ~120
  * \param[out]   pbestthresh  robust estimate of threshold to use
- * \return  0 if OK, 1 on error
+ * \return  0 if OK, 1 on error or warning
  *
  * <pre>
  * Notes:
  *     (1) When a valid threshold is used, the number of crossings is
  *         a maximum, because none are missed.  If no threshold intersects
  *         all the crossings, the crossings must be determined with
  *         numaCrossingsByPeaks().
  *     (2) %estthresh is an input estimate of the threshold that should
  *         be used.  We compute the crossings with 41 thresholds
  *         (20 below and 20 above).  There is a range in which the
  *         number of crossings is a maximum.  Return a threshold
  *         in the center of this stable plateau of crossings.
  *         This can then be used with numaCrossingsByThreshold()
  *         to get a good estimate of crossing locations.
+ *     (3) If the count of nay is less than 2, a warning is issued.
  * </pre>
  */
 l_ok
@@ -2786,98 +2787,102 @@ l_float32  thresh, fmaxval, fmodeval;
 NUMA      *nat, *nac;
 
     PROCNAME("numaSelectCrossingThreshold");
 
     if (!pbestthresh)
         return ERROR_INT("&bestthresh not defined", procName, 1);
     *pbestthresh = 0.0;
     if (!nay)
         return ERROR_INT("nay not defined", procName, 1);
+    if (numaGetCount(nay) < 2) {
+        L_WARNING("nay count < 2; no threshold crossing\n", procName);
+        return 1;
+    }
 
         /* Compute the number of crossings for different thresholds */
     nat = numaCreate(41);
     for (i = 0; i < 41; i++) {
         thresh = estthresh - 80.0 + 4.0 * i;
         nac = numaCrossingsByThreshold(nax, nay, thresh);
         numaAddNumber(nat, numaGetCount(nac));
         numaDestroy(&nac);
     }
 
         /* Find the center of the plateau of max crossings, which
          * extends from thresh[istart] to thresh[iend]. */
     numaGetMax(nat, &fmaxval, NULL);
     maxval = (l_int32)fmaxval;
     nmax = 0;
     for (i = 0; i < 41; i++) {
         numaGetIValue(nat, i, &val);
         if (val == maxval)
             nmax++;
     }
     if (nmax < 3) {  /* likely accidental max; try the mode */
         numaGetMode(nat, &fmodeval, &count);
         if (count > nmax && fmodeval > 0.5 * fmaxval)
             maxval = (l_int32)fmodeval;  /* use the mode */
     }
 
     inrun = FALSE;
     iend = 40;
     maxrunlen = 0, maxstart = 0, maxend = 0;
     for (i = 0; i < 41; i++) {
         numaGetIValue(nat, i, &val);
         if (val == maxval) {
             if (!inrun) {
                 istart = i;
                 inrun = TRUE;
             }
             continue;
         }
         if (inrun && (val != maxval)) {
             iend = i - 1;
             runlen = iend - istart + 1;
             inrun = FALSE;
             if (runlen > maxrunlen) {
                 maxstart = istart;
                 maxend = iend;
                 maxrunlen = runlen;
             }
         }
     }
     if (inrun) {
         runlen = i - istart;
         if (runlen > maxrunlen) {
             maxstart = istart;
             maxend = i - 1;
             maxrunlen = runlen;
         }
     }
 
     *pbestthresh = estthresh - 80.0 + 2.0 * (l_float32)(maxstart + maxend);
 
 #if  DEBUG_CROSSINGS
     lept_stderr("\nCrossings attain a maximum at %d thresholds, between:\n"
                 "  thresh[%d] = %5.1f and thresh[%d] = %5.1f\n",
                 nmax, maxstart, estthresh - 80.0 + 4.0 * maxstart,
                 maxend, estthresh - 80.0 + 4.0 * maxend);
     lept_stderr("The best choice: %5.1f\n", *pbestthresh);
     lept_stderr("Number of crossings at the 41 thresholds:");
     numaWriteStderr(nat);
 #endif  /* DEBUG_CROSSINGS */
 
     numaDestroy(&nat);
     return 0;
 }
 
 
 /*!
  * \brief   numaCrossingsByThreshold()
  *
  * \param[in]    nax     [optional] numa of abscissa values; can be NULL
  * \param[in]    nay     numa of ordinate values, corresponding to nax
  * \param[in]    thresh  threshold value for nay
  * \return  nad abscissa pts at threshold, or NULL on error
  *
  * <pre>
  * Notes:
  *      (1) If nax == NULL, we use startx and delx from nay to compute
  *          the crossing values in nad.
  * </pre>
  */
@@ -2892,57 +2897,58 @@ l_float32  xval1, xval2, yval1, yval2, delta1, delta2, crossval, fract;
 NUMA      *nad;
 
     PROCNAME("numaCrossingsByThreshold");
 
     if (!nay)
         return (NUMA *)ERROR_PTR("nay not defined", procName, NULL);
     n = numaGetCount(nay);
 
     if (nax && (numaGetCount(nax) != n))
         return (NUMA *)ERROR_PTR("nax and nay sizes differ", procName, NULL);
 
     nad = numaCreate(0);
+    if (n < 2) return nad;
     numaGetFValue(nay, 0, &yval1);
     numaGetParameters(nay, &startx, &delx);
     if (nax)
         numaGetFValue(nax, 0, &xval1);
     else
         xval1 = startx;
     for (i = 1; i < n; i++) {
         numaGetFValue(nay, i, &yval2);
         if (nax)
             numaGetFValue(nax, i, &xval2);
         else
             xval2 = startx + i * delx;
         delta1 = yval1 - thresh;
         delta2 = yval2 - thresh;
         if (delta1 == 0.0) {
             numaAddNumber(nad, xval1);
         } else if (delta2 == 0.0) {
             numaAddNumber(nad, xval2);
         } else if (delta1 * delta2 < 0.0) {  /* crossing */
             fract = L_ABS(delta1) / L_ABS(yval1 - yval2);
             crossval = xval1 + fract * (xval2 - xval1);
             numaAddNumber(nad, crossval);
         }
         xval1 = xval2;
         yval1 = yval2;
     }
 
     return nad;
 }
 
 
 /*!
  * \brief   numaCrossingsByPeaks()
  *
  * \param[in]    nax     [optional] numa of abscissa values
  * \param[in]    nay     numa of ordinate values, corresponding to nax
  * \param[in]    delta   parameter used to identify when a new peak can be found
  * \return  nad abscissa pts at threshold, or NULL on error
  *
  * <pre>
  * Notes:
  *      (1) If nax == NULL, we use startx and delx from nay to compute
  *          the crossing values in nad.
  * </pre>
  */
diff --git a/src/readbarcode.c b/src/readbarcode.c
index 3b10865..cbfe891 100644
--- a/src/readbarcode.c
+++ b/src/readbarcode.c
@@ -93,6 +93,10 @@ static const l_int32  MAX_SPACE_WIDTH = 19;  /* was 15 */
 static const l_int32  MAX_NOISE_WIDTH = 50;  /* smaller than barcode width */
 static const l_int32  MAX_NOISE_HEIGHT = 30;  /* smaller than barcode height */
 
+    /* Minimum barcode image size */
+static const l_int32  MIN_BC_WIDTH = 100;
+static const l_int32  MIN_BC_HEIGHT = 50;
+
     /* Static functions */
 static PIX *pixGenerateBarcodeMask(PIX *pixs, l_int32 maxspace,
                                    l_int32 nwidth, l_int32 nheight);
@@ -263,75 +267,80 @@ pixReadBarcodes(PIXA     *pixa,
 {
 char      *barstr, *data;
 char       emptystring[] = "";
-l_int32    i, j, n, nbars, ival;
+l_int32    w, h, i, j, n, nbars, ival;
 NUMA      *na;
 PIX       *pixt;
 SARRAY    *saw, *sad;
 
     PROCNAME("pixReadBarcodes");
 
     if (psaw) *psaw = NULL;
     if (!pixa)
         return (SARRAY *)ERROR_PTR("pixa not defined", procName, NULL);
     if (format != L_BF_ANY && !barcodeFormatIsSupported(format))
         return (SARRAY *)ERROR_PTR("unsupported format", procName, NULL);
     if (method != L_USE_WIDTHS && method != L_USE_WINDOWS)
         return (SARRAY *)ERROR_PTR("invalid method", procName, NULL);
 
     n = pixaGetCount(pixa);
     saw = sarrayCreate(n);
     sad = sarrayCreate(n);
     for (i = 0; i < n; i++) {
             /* Extract the widths of the lines in each barcode */
         pixt = pixaGetPix(pixa, i, L_CLONE);
+        pixGetDimensions(pixt, &w, &h, NULL);
+        if (w < MIN_BC_WIDTH || h < MIN_BC_HEIGHT) {
+            L_ERROR("pix is too small: w = %d, h = %d\n", procName, w, h);
+            continue;
+        }
         na = pixReadBarcodeWidths(pixt, method, debugflag);
         pixDestroy(&pixt);
         if (!na) {
             ERROR_INT("valid barcode widths not returned", procName, 1);
             continue;
         }
 
             /* Save the widths as a string */
         nbars = numaGetCount(na);
         barstr = (char *)LEPT_CALLOC(nbars + 1, sizeof(char));
         for (j = 0; j < nbars; j++) {
             numaGetIValue(na, j, &ival);
             barstr[j] = 0x30 + ival;
         }
         sarrayAddString(saw, barstr, L_INSERT);
         numaDestroy(&na);
 
             /* Decode the width strings */
         data = barcodeDispatchDecoder(barstr, format, debugflag);
         if (!data) {
             ERROR_INT("barcode not decoded", procName, 1);
             sarrayAddString(sad, emptystring, L_COPY);
             continue;
         }
         sarrayAddString(sad, data, L_INSERT);
     }
 
         /* If nothing found, clean up */
     if (sarrayGetCount(saw) == 0) {
         sarrayDestroy(&saw);
         sarrayDestroy(&sad);
         return (SARRAY *)ERROR_PTR("no valid barcode data", procName, NULL);
     }
 
     if (psaw)
         *psaw = saw;
     else
         sarrayDestroy(&saw);
 
     return sad;
 }
 
 
 /*!
  * \brief   pixReadBarcodeWidths()
  *
  * \param[in]    pixs        of 8 bpp deskewed and cropped barcode
  * \param[in]    method      L_USE_WIDTHS, L_USE_WINDOWS;
  * \param[in]    debugflag   use 1 to generate debug output
  * \return  na   numa of widths (each in set {1,2,3,4}, or NULL on error
  */
@@ -724,49 +733,50 @@ GPLOT     *gplot;
 NUMA      *nas, *nax, *nay, *nad;
 
     PROCNAME("pixExtractBarcodeCrossings");
 
     if (!pixs || pixGetDepth(pixs) != 8)
         return (NUMA *)ERROR_PTR("pixs undefined or not 8 bpp", procName, NULL);
 
         /* Scan pixels horizontally and average results */
-    nas = pixAverageRasterScans(pixs, 51);
+    if ((nas = pixAverageRasterScans(pixs, 50)) == NULL)
+        return (NUMA *)ERROR_PTR("nas not made", procName, NULL);
 
         /* Interpolate to get 4x the number of values */
     w = pixGetWidth(pixs);
     numaInterpolateEqxInterval(0.0, 1.0, nas, L_QUADRATIC_INTERP, 0.0,
                                (l_float32)(w - 1), 4 * w + 1, &nax, &nay);
 
     if (debugflag) {
         lept_mkdir("lept/barcode");
         gplot = gplotCreate("/tmp/lept/barcode/signal", GPLOT_PNG,
                             "Pixel values", "dist in pixels", "value");
         gplotAddPlot(gplot, nax, nay, GPLOT_LINES, "plot 1");
         gplotMakeOutput(gplot);
         gplotDestroy(&gplot);
     }
 
         /* Locate the crossings.  Run multiple times with different
          * thresholds, and choose a threshold in the center of the
          * run of thresholds that all give the maximum number of crossings. */
     numaSelectCrossingThreshold(nax, nay, thresh, &bestthresh);
 
         /* Get the crossings with the best threshold. */
     nad = numaCrossingsByThreshold(nax, nay, bestthresh);
 
     numaDestroy(&nas);
     numaDestroy(&nax);
     numaDestroy(&nay);
     return nad;
 }
 
 
 /*------------------------------------------------------------------------*
  *                         Average adjacent rasters                       *
  *------------------------------------------------------------------------*/
 /*!
  * \brief   pixAverageRasterScans()
  *
  * \param[in]    pixs     input image; 8 bpp
  * \param[in]    nscans   number of adjacent scans, about the center vertically
  * \return  numa of average pixel values across image, or NULL on error
  */
@@ -780,61 +790,61 @@ l_float32  *array;
 NUMA       *nad;
 
     PROCNAME("pixAverageRasterScans");
 
     if (!pixs || pixGetDepth(pixs) != 8)
         return (NUMA *)ERROR_PTR("pixs undefined or not 8 bpp", procName, NULL);
 
     pixGetDimensions(pixs, &w, &h, NULL);
-    if (nscans <= h) {
+    if (nscans > h) {
         first = 0;
         last = h - 1;
         nscans = h;
     } else {
         first = (h - nscans) / 2;
         last = first + nscans - 1;
     }
 
     nad = numaCreate(w);
     numaSetCount(nad, w);
     array = numaGetFArray(nad, L_NOCOPY);
     wpl = pixGetWpl(pixs);
     data = pixGetData(pixs);
     for (j = 0; j < w; j++) {
         for (i = first; i <= last; i++) {
             line = data + i * wpl;
             val = GET_DATA_BYTE(line, j);
             array[j] += val;
         }
         array[j] = array[j] / (l_float32)nscans;
     }
 
     return nad;
 }
 
 
 /*------------------------------------------------------------------------*
  *                   Signal processing for barcode widths                 *
  *------------------------------------------------------------------------*/
 /*!
  * \brief   numaQuantizeCrossingsByWidth()
  *
  * \param[in]    nas         numa of crossing locations, in pixel units
  * \param[in]    binfract    histo binsize as a fraction of minsize; e.g., 0.25
  * \param[out]   pnaehist    [optional] histo of even (black) bar widths
  * \param[out]   pnaohist    [optional] histo of odd (white) bar widths
  * \param[in]    debugflag   1 to generate plots of histograms of bar widths
  * \return  nad   sequence of widths, in unit sizes, or NULL on error
  *
  * <pre>
  * Notes:
  *      (1) This first computes the histogram of black and white bar widths,
  *          binned in appropriate units.  There should be well-defined
  *          peaks, each corresponding to a specific width.  The sequence
  *          of barcode widths (namely, the integers from the set {1,2,3,4})
  *          is returned.
  *      (2) The optional returned histograms are binned in width units
  *          that are inversely proportional to %binfract.  For example,
  *          if %binfract = 0.25, there are 4.0 bins in the distance of
  *          the width of the narrowest bar.
  * </pre>
  */
