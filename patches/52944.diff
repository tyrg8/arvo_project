commit e29d15cda20e6e7c7e1122c30bff7805a2e59fbc
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Wed Nov 2 00:55:10 2022 +0300

    DngOpcodes::PixelOpcode: rewrite applyOP() once more
    
    `op()` should receive coords with step 1, regardless of our step.

diff --git a/src/librawspeed/common/DngOpcodes.cpp b/src/librawspeed/common/DngOpcodes.cpp
index 59da0cfa..5d08abf5 100644
--- a/src/librawspeed/common/DngOpcodes.cpp
+++ b/src/librawspeed/common/DngOpcodes.cpp
@@ -298,46 +298,48 @@ class DngOpcodes::PixelOpcode : public ROIOpcode {
 protected:
   explicit PixelOpcode(const RawImage& ri, ByteStream& bs,
                        iRectangle2D& integrated_subimg_)
       : ROIOpcode(ri, bs, integrated_subimg_), firstPlane(bs.getU32()),
         planes(bs.getU32()) {
 
     if (planes == 0 || firstPlane > ri->getCpp() || planes > ri->getCpp() ||
         firstPlane + planes > ri->getCpp()) {
       ThrowRDE("Bad plane params (first %u, num %u), got planes = %u",
                firstPlane, planes, ri->getCpp());
     }
 
     rowPitch = bs.getU32();
     colPitch = bs.getU32();
 
     const iRectangle2D& ROI = getRoi();
 
     if (rowPitch < 1 || rowPitch > static_cast<uint32_t>(ROI.getHeight()) ||
         colPitch < 1 || colPitch > static_cast<uint32_t>(ROI.getWidth()))
       ThrowRDE("Invalid pitch");
   }
 
   [[nodiscard]] const iPoint2D __attribute__((pure)) getPitch() const {
     return {static_cast<int>(colPitch), static_cast<int>(rowPitch)};
   }
 
   // traverses the current ROI and applies the operation OP to each pixel,
   // i.e. each pixel value v is replaced by op(x, y, v), where x/y are the
   // coordinates of the pixel value v.
   template <typename T, typename OP> void applyOP(const RawImage& ri, OP op) {
     const CroppedArray2DRef<T> img = getDataAsCroppedArray2DRef<T>(ri);
     int cpp = ri->getCpp();
     const iRectangle2D& ROI = getRoi();
-    for (auto y = 0; y < ROI.getHeight(); y += rowPitch) {
-      for (auto x = 0; x < ROI.getWidth(); x += colPitch) {
+    const iPoint2D numAffected(roundUpDivision(getRoi().dim.x, colPitch),
+                               roundUpDivision(getRoi().dim.y, rowPitch));
+    for (int y = 0; y < numAffected.y; ++y) {
+      for (int x = 0; x < numAffected.x; ++x) {
         for (auto p = 0U; p < planes; ++p) {
-          T& pixel =
-              img(ROI.getTop() + y, firstPlane + (ROI.getLeft() + x) * cpp + p);
+          T& pixel = img(ROI.getTop() + rowPitch * y,
+                         firstPlane + (ROI.getLeft() + colPitch * x) * cpp + p);
           pixel = op(x, y, pixel);
         }
       }
     }
   }
 };
 
 // ****************************************************************************
