commit e27ceb2b0e64b9a56ba79d844ea96553d87dc113
Author: Robin Watts <Robin.Watts@artifex.com>
Date:   Tue Jan 26 19:20:36 2021 +0000

    OSS-Fuzz 29728: Avoid buffer overflow.
    
    Don't access past the end of the xref_index.

diff --git a/source/pdf/pdf-xref.c b/source/pdf/pdf-xref.c
index a160d20b1..4b58d356f 100644
--- a/source/pdf/pdf-xref.c
+++ b/source/pdf/pdf-xref.c
@@ -295,115 +295,115 @@ pdf_xref_entry *pdf_get_populating_xref_entry(fz_context *ctx, pdf_document *doc
 pdf_xref_entry *pdf_get_xref_entry(fz_context *ctx, pdf_document *doc, int i)
 {
 	pdf_xref *xref = NULL;
 	pdf_xref_subsec *sub;
 	int j;
 
 	if (i < 0)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "Negative object number requested");
 
-	if (i <= doc->max_xref_len)
+	if (i < doc->max_xref_len)
 		j = doc->xref_index[i];
 	else
 		j = 0;
 
 	/* If we have an active local xref, check there first. */
 	if (doc->local_xref && doc->local_xref_nesting > 0)
 	{
 		xref = doc->local_xref;
 
 		if (i < xref->num_objects)
 		{
 			for (sub = xref->subsec; sub != NULL; sub = sub->next)
 			{
 				pdf_xref_entry *entry;
 
 				if (i < sub->start || i >= sub->start + sub->len)
 					continue;
 
 				entry = &sub->table[i - sub->start];
 				if (entry->type)
 					return entry;
 			}
 		}
 	}
 
 	/* We may be accessing an earlier version of the document using xref_base
 	 * and j may be an index into a later xref section */
 	if (doc->xref_base > j)
 		j = doc->xref_base;
 	else
 		j = 0;
 
 
 	/* Find the first xref section where the entry is defined. */
 	for (; j < doc->num_xref_sections; j++)
 	{
 		xref = &doc->xref_sections[j];
 
 		if (i < xref->num_objects)
 		{
 			for (sub = xref->subsec; sub != NULL; sub = sub->next)
 			{
 				pdf_xref_entry *entry;
 
 				if (i < sub->start || i >= sub->start + sub->len)
 					continue;
 
 				entry = &sub->table[i - sub->start];
 				if (entry->type)
 				{
 					/* Don't update xref_index if xref_base may have
 					 * influenced the value of j */
 					if (doc->xref_base == 0)
 						doc->xref_index[i] = j;
 					return entry;
 				}
 			}
 		}
 	}
 
 	/* Didn't find the entry in any section. Return the entry from
 	 * the local_xref (if there is one active), or the final section. */
 	if (doc->local_xref && doc->local_xref_nesting > 0)
 	{
 		if (xref == NULL || i < xref->num_objects)
 		{
 			xref = doc->local_xref;
 			sub = xref->subsec;
 			assert(sub != NULL && sub->next == NULL);
 			if (i >= sub->start && i < sub->start + sub->len)
 				return &sub->table[i - sub->start];
 		}
 
 		/* Expand the xref so we can return a pointer. */
 		resize_xref_sub(ctx, xref, 0, i+1);
 		sub = xref->subsec;
 		return &sub->table[i - sub->start];
 	}
 
 	doc->xref_index[i] = 0;
 	if (xref == NULL || i < xref->num_objects)
 	{
 		xref = &doc->xref_sections[doc->xref_base];
 		for (sub = xref->subsec; sub != NULL; sub = sub->next)
 		{
 			if (i >= sub->start && i < sub->start + sub->len)
 				return &sub->table[i - sub->start];
 		}
 	}
 
 	/* At this point, we solidify the xref. This ensures that we
 	 * can return a pointer. This is the only case where this function
 	 * might throw an exception, and it will never happen when we are
 	 * working within a 'solid' xref. */
 	ensure_solid_xref(ctx, doc, i+1, 0);
 	xref = &doc->xref_sections[0];
 	sub = xref->subsec;
 	return &sub->table[i - sub->start];
 }
 
 /*
 	Ensure we have an incremental xref section where we can store
 	updated versions of indirect objects. This is a new xref section
 	consisting of a single xref subsection.
 */
