commit a52882e7163fd8886345e4f459d51642cc57c277
Author: seladb <pcapplusplus@gmail.com>
Date:   Tue Jun 16 06:35:26 2020 -0400

    Bugfix 22829 in oss-fuzz: mem leak fix in pcpp::tbp_my_own_strnlen

diff --git a/Packet++/src/TextBasedProtocol.cpp b/Packet++/src/TextBasedProtocol.cpp
index fee52969..f9c8ae1e 100644
--- a/Packet++/src/TextBasedProtocol.cpp
+++ b/Packet++/src/TextBasedProtocol.cpp
@@ -9,17 +9,15 @@ namespace pcpp
 {
 
 // this implementation of strnlen is required since mingw doesn't have strnlen
-size_t tbp_my_own_strnlen(const char* s, size_t n)
+size_t tbp_my_own_strnlen(const char* s, size_t maxlen)
 {
-	if (s == NULL || n == 0)
+	if (s == NULL || maxlen == 0)
 		return 0;
 
-	const char* p = s;
-	/* We don't check here for NULL pointers.  */
-	for (;*p != 0 && n > 0; p++, n--)
-		;
-	return (size_t) (p - s);
+	size_t i = 0;
+	for(; (i < maxlen) && s[i]; ++i);
+	return i;
 }
 
 
 // -------- Class TextBasedProtocolMessage -----------------
@@ -438,79 +436,77 @@ void TextBasedProtocolMessage::computeCalculateFields()
 HeaderField::HeaderField(TextBasedProtocolMessage* TextBasedProtocolMessage, int offsetInMessage, char nameValueSeperator, bool spacesAllowedBetweenNameAndValue) :
 		m_NewFieldData(NULL), m_TextBasedProtocolMessage(TextBasedProtocolMessage), m_NameOffsetInMessage(offsetInMessage), m_NextField(NULL),
 		m_NameValueSeperator(nameValueSeperator), m_SpacesAllowedBetweenNameAndValue(spacesAllowedBetweenNameAndValue)
 {
 	char* fieldData = (char*)(m_TextBasedProtocolMessage->m_Data + m_NameOffsetInMessage);
-	//char* fieldEndPtr = strchr(fieldData, '\n');
-	char* fieldEndPtr = (char*)memchr(fieldData, '\n',m_TextBasedProtocolMessage->m_DataLen-(size_t)m_NameOffsetInMessage);
+	char* fieldEndPtr = (char*)memchr(fieldData, '\n', m_TextBasedProtocolMessage->m_DataLen - (size_t)m_NameOffsetInMessage);
 	if (fieldEndPtr == NULL)
-		m_FieldSize = tbp_my_own_strnlen(fieldData, m_TextBasedProtocolMessage->m_DataLen-(size_t)m_NameOffsetInMessage);
+		m_FieldSize = tbp_my_own_strnlen(fieldData, m_TextBasedProtocolMessage->m_DataLen - (size_t)m_NameOffsetInMessage);
 	else
 		m_FieldSize = fieldEndPtr - fieldData + 1;
 
 	if (m_FieldSize == 0 || (*fieldData) == '\r' || (*fieldData) == '\n')
 	{
 		m_FieldNameSize = -1;
 		m_ValueOffsetInMessage = -1;
 		m_FieldValueSize = -1;
 		m_FieldNameSize = -1;
 		m_IsEndOfHeaderField = true;
 		return;
 	}
 	else
 		m_IsEndOfHeaderField = false;
 
-//	char* fieldValuePtr = strchr(fieldData, ':');
-	char* fieldValuePtr = (char*)memchr(fieldData, nameValueSeperator, m_TextBasedProtocolMessage->m_DataLen-(size_t)m_NameOffsetInMessage);
+	char* fieldValuePtr = (char*)memchr(fieldData, nameValueSeperator, m_TextBasedProtocolMessage->m_DataLen - (size_t)m_NameOffsetInMessage);
 	// could not find the position of the separator, meaning field value position is unknown
 	if (fieldValuePtr == NULL)
 	{
 		m_ValueOffsetInMessage = -1;
 		m_FieldValueSize = -1;
 		m_FieldNameSize = m_FieldSize;
 	}
 	else
 	{
 		m_FieldNameSize = fieldValuePtr - fieldData;
 		// Header field looks like this: <field_name>[separator]<zero or more spaces><field_Value>
 		// So fieldValuePtr give us the position of the separator. Value offset is the first non-space byte forward
 		fieldValuePtr++;
 
 		// reached the end of the packet and value start offset wasn't found
 		if ((size_t)(fieldValuePtr - (char*)(m_TextBasedProtocolMessage->m_Data)) >= m_TextBasedProtocolMessage->getDataLen())
 		{
 			m_ValueOffsetInMessage = -1;
 			m_FieldValueSize = -1;
 			return;
 		}
 
 		if (spacesAllowedBetweenNameAndValue)
 		{
 			// advance fieldValuePtr 1 byte forward while didn't get to end of packet and fieldValuePtr points to a space char
 			while ((size_t)(fieldValuePtr - (char*)m_TextBasedProtocolMessage->m_Data) <= m_TextBasedProtocolMessage->getDataLen() && (*fieldValuePtr) == ' ')
 			{
 				fieldValuePtr++;
 			}
 		}
 
 		// reached the end of the packet and value start offset wasn't found
 		if ((size_t)(fieldValuePtr - (char*)(m_TextBasedProtocolMessage->m_Data)) >= m_TextBasedProtocolMessage->getDataLen())
 		{
 			m_ValueOffsetInMessage = -1;
 			m_FieldValueSize = -1;
 		}
 		else
 		{
 			m_ValueOffsetInMessage = fieldValuePtr - (char*)m_TextBasedProtocolMessage->m_Data;
 			// couldn't find the end of the field, so assuming the field value length is from m_ValueOffsetInMessage until the end of the packet
 			if (fieldEndPtr == NULL)
 				m_FieldValueSize = (char*)(m_TextBasedProtocolMessage->m_Data + m_TextBasedProtocolMessage->getDataLen()) - fieldValuePtr;
 			else
 			{
 				m_FieldValueSize = fieldEndPtr - fieldValuePtr;
 				// if field ends with \r\n, decrease the value length by 1
 				if ((*(--fieldEndPtr)) == '\r')
 					m_FieldValueSize--;
 			}
 		}
 	}
 }
diff --git a/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5165538295939072 b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5165538295939072
new file mode 100644
index 00000000..4546fc58
Binary files /dev/null and b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5165538295939072 differ
