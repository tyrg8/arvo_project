commit 5681c6275b5ad9cf3d84af243a66b900a0628f72
Author: James Carter <jwcart2@gmail.com>
Date:   Wed Apr 28 16:06:58 2021 -0400

    libsepol/cil: Fix instances where an error returns SEPOL_OK
    
    There are six instances when the CIL policy is being built or
    resolved where an error can be detected, but SEPOL_OK is returned
    instead of SEPOL_ERR. This causes the policy compiler to continue
    when it should exit with an error.
    
    Return SEPOL_ERR in these cases, so the compiler exits with an
    error.
    
    Two of the instances were found by the secilc-fuzzer.
    
    Signed-off-by: James Carter <jwcart2@gmail.com>

diff --git a/libsepol/cil/src/cil_build_ast.c b/libsepol/cil/src/cil_build_ast.c
index 5b1e2824..87043a8f 100644
--- a/libsepol/cil/src/cil_build_ast.c
+++ b/libsepol/cil/src/cil_build_ast.c
@@ -406,47 +406,48 @@ void cil_destroy_in(struct cil_in *in)
 int cil_gen_class(struct cil_db *db, struct cil_tree_node *parse_current, struct cil_tree_node *ast_node)
 {
 	enum cil_syntax syntax[] = {
 		CIL_SYN_STRING,
 		CIL_SYN_STRING,
 		CIL_SYN_LIST | CIL_SYN_EMPTY_LIST,
 		CIL_SYN_END
 	};
 	int syntax_len = sizeof(syntax)/sizeof(*syntax);
 	char *key = NULL;
 	struct cil_class *class = NULL;
 	struct cil_tree_node *perms = NULL;
 	int rc = SEPOL_ERR;
 
 	rc = __cil_verify_syntax(parse_current, syntax, syntax_len);
 	if (rc != SEPOL_OK) {
 		goto exit;
 	}
 
 	cil_class_init(&class);
 
 	key = parse_current->next->data;
 	if (key == CIL_KEY_UNORDERED) {
 		cil_log(CIL_ERR, "'unordered' keyword is reserved and not a valid class name.\n");
 		rc = SEPOL_ERR;
 		goto exit;
 	}
 
 	rc = cil_gen_node(db, ast_node, (struct cil_symtab_datum*)class, (hashtab_key_t)key, CIL_SYM_CLASSES, CIL_CLASS);
 	if (rc != SEPOL_OK) {
 		goto exit;
 	}
 
 	if (parse_current->next->next != NULL) {
 		perms = parse_current->next->next->cl_head;
 		rc = cil_gen_perm_nodes(db, perms, ast_node, CIL_PERM, &class->num_perms);
 		if (rc != SEPOL_OK) {
 			goto exit;
 		}
 		if (class->num_perms > CIL_PERMS_PER_CLASS) {
 			cil_tree_log(parse_current, CIL_ERR, "Too many permissions in class '%s'", class->datum.name);
+			rc = SEPOL_ERR;
 			goto exit;
 		}
 
 	}
 
 	return SEPOL_OK;
@@ -983,42 +984,43 @@ void cil_destroy_classmapping(struct cil_classmapping *mapping)
 // TODO try to merge some of this with cil_gen_class (helper function for both)
 int cil_gen_common(struct cil_db *db, struct cil_tree_node *parse_current, struct cil_tree_node *ast_node)
 {
 	enum cil_syntax syntax[] = {
 		CIL_SYN_STRING,
 		CIL_SYN_STRING,
 		CIL_SYN_LIST,
 		CIL_SYN_END
 	};
 	int syntax_len = sizeof(syntax)/sizeof(*syntax);
 	char *key = NULL;
 	struct cil_class *common = NULL;
 	int rc = SEPOL_ERR;
 
 	if (db == NULL || parse_current == NULL || ast_node == NULL) {
 		goto exit;
 	}
 
 	rc = __cil_verify_syntax(parse_current, syntax, syntax_len);
 	if (rc != SEPOL_OK) {
 		goto exit;
 	}
 
 	cil_class_init(&common);
 
 	key = parse_current->next->data;
 
 	rc = cil_gen_node(db, ast_node, (struct cil_symtab_datum*)common, (hashtab_key_t)key, CIL_SYM_COMMONS, CIL_COMMON);
 	if (rc != SEPOL_OK) {
 		goto exit;
 	}
 
 	rc = cil_gen_perm_nodes(db, parse_current->next->next->cl_head, ast_node, CIL_PERM, &common->num_perms);
 	if (rc != SEPOL_OK) {
 		goto exit;
 	}
 	if (common->num_perms > CIL_PERMS_PER_CLASS) {
 		cil_tree_log(parse_current, CIL_ERR, "Too many permissions in common '%s'", common->datum.name);
+		rc = SEPOL_ERR;
 		goto exit;
 	}
 
 	return SEPOL_OK;
@@ -3170,49 +3172,50 @@ void cil_destroy_typeattributeset(struct cil_typeattributeset *attrset)
 int cil_gen_expandtypeattribute(struct cil_db *db, struct cil_tree_node *parse_current, struct cil_tree_node *ast_node)
 {
 	enum cil_syntax syntax[] = {
 		CIL_SYN_STRING,
 		CIL_SYN_STRING | CIL_SYN_LIST,
 		CIL_SYN_STRING,
 		CIL_SYN_END
 	};
 	char *expand_str;
 	int syntax_len = sizeof(syntax)/sizeof(*syntax);
 	struct cil_expandtypeattribute *expandattr = NULL;
 	int rc = SEPOL_ERR;
 
 	if (db == NULL || parse_current == NULL || ast_node == NULL) {
 		goto exit;
 	}
 
 	rc = __cil_verify_syntax(parse_current, syntax, syntax_len);
 	if (rc != SEPOL_OK) {
 		goto exit;
 	}
 
 	cil_expandtypeattribute_init(&expandattr);
 
 	if (parse_current->next->cl_head == NULL) {
 		cil_list_init(&expandattr->attr_strs, CIL_TYPE);
 		cil_list_append(expandattr->attr_strs, CIL_STRING, parse_current->next->data);
 	} else {
 		rc = cil_fill_list(parse_current->next->cl_head, CIL_TYPE, &expandattr->attr_strs);
 		if (rc != SEPOL_OK) {
 			goto exit;
 		}
 	}
 
 	expand_str = parse_current->next->next->data;
 
 	if (expand_str == CIL_KEY_CONDTRUE) {
 		expandattr->expand = CIL_TRUE;
 	} else if (expand_str == CIL_KEY_CONDFALSE) {
 		expandattr->expand = CIL_FALSE;
 	} else {
 		cil_log(CIL_ERR, "Value must be either \'true\' or \'false\'");
+		rc = SEPOL_ERR;
 		goto exit;
 	}
 
 	ast_node->data = expandattr;
 	ast_node->flavor = CIL_EXPANDTYPEATTRIBUTE;
 
 	return SEPOL_OK;
diff --git a/libsepol/cil/src/cil_resolve_ast.c b/libsepol/cil/src/cil_resolve_ast.c
index 872b6799..5389df43 100644
--- a/libsepol/cil/src/cil_resolve_ast.c
+++ b/libsepol/cil/src/cil_resolve_ast.c
@@ -741,38 +741,39 @@ int __class_update_perm_values(__attribute__((unused)) hashtab_key_t k, hashtab_
 int cil_resolve_classcommon(struct cil_tree_node *current, void *extra_args)
 {
 	struct cil_class *class = NULL;
 	struct cil_class *common = NULL;
 	struct cil_classcommon *clscom = current->data;
 	struct cil_symtab_datum *class_datum = NULL;
 	struct cil_symtab_datum *common_datum = NULL;
 	int rc = SEPOL_ERR;
 
 	rc = cil_resolve_name(current, clscom->class_str, CIL_SYM_CLASSES, extra_args, &class_datum);
 	if (rc != SEPOL_OK) {
 		goto exit;
 	}
 
 	rc = cil_resolve_name(current, clscom->common_str, CIL_SYM_COMMONS, extra_args, &common_datum);
 	if (rc != SEPOL_OK) {
 		goto exit;
 	}
 
 	class = (struct cil_class *)class_datum;
 	common = (struct cil_class *)common_datum;
 	if (class->common != NULL) {
 		cil_log(CIL_ERR, "class cannot be associeated with more than one common\n");
 		rc = SEPOL_ERR;
 		goto exit;
 	}
 
 	class->common = common;
 
 	cil_symtab_map(&class->perms, __class_update_perm_values, &common->num_perms);
 
 	class->num_perms += common->num_perms;
 	if (class->num_perms > CIL_PERMS_PER_CLASS) {
 		cil_tree_log(current, CIL_ERR, "Too many permissions in class '%s' when including common permissions", class->datum.name);
+		rc = SEPOL_ERR;
 		goto exit;
 	}
 
 	return SEPOL_OK;
@@ -1463,39 +1464,40 @@ exit:
 int cil_resolve_classorder(struct cil_tree_node *current, void *extra_args)
 {
 	struct cil_args_resolve *args = extra_args;
 	struct cil_list *classorder_list = args->classorder_lists;
 	struct cil_list *unordered_classorder_list = args->unordered_classorder_lists;
 	struct cil_classorder *classorder = current->data;
 	struct cil_list *new = NULL;
 	struct cil_list_item *curr = NULL;
 	struct cil_symtab_datum *datum = NULL;
 	struct cil_ordered_list *class_list = NULL;
 	int rc = SEPOL_ERR;
 	int unordered = CIL_FALSE;
 
 	cil_list_init(&new, CIL_CLASSORDER);
 
 	cil_list_for_each(curr, classorder->class_list_str) {
 		if (curr->data == CIL_KEY_UNORDERED) {
 			unordered = CIL_TRUE;
 			continue;
 		}
 
 		rc = cil_resolve_name(current, (char *)curr->data, CIL_SYM_CLASSES, extra_args, &datum);
 		if (rc != SEPOL_OK) {
 			cil_log(CIL_ERR, "Failed to resolve class %s in classorder\n", (char *)curr->data);
+			rc = SEPOL_ERR;
 			goto exit;
 		}
 		cil_list_append(new, CIL_CLASS, datum);
 	}
 
 	__cil_ordered_list_init(&class_list);
 	class_list->list = new;
 	class_list->node = current;
 	if (unordered) {
 		cil_list_append(unordered_classorder_list, CIL_CLASSORDER, class_list);
 	} else {
 		cil_list_append(classorder_list, CIL_CLASSORDER, class_list);
 	}
 
 	return SEPOL_OK;
@@ -2452,21 +2454,22 @@ exit:
 int cil_resolve_blockabstract(struct cil_tree_node *current, void *extra_args)
 {
 	struct cil_blockabstract *abstract = current->data;
 	struct cil_symtab_datum *block_datum = NULL;
 	struct cil_tree_node *block_node = NULL;
 	int rc = SEPOL_ERR;
 
 	rc = cil_resolve_name(current, abstract->block_str, CIL_SYM_BLOCKS, extra_args, &block_datum);
 	if (rc != SEPOL_OK) {
 		goto exit;
 	}
 
 	block_node = NODE(block_datum);
 	if (block_node->flavor != CIL_BLOCK) {
 		cil_log(CIL_ERR, "Failed to resolve blockabstract to a block, rc: %d\n", rc);
+		rc = SEPOL_ERR;
 		goto exit;
 	}
 
 	((struct cil_block*)block_datum)->is_abstract = CIL_TRUE;
 
 	return SEPOL_OK;
