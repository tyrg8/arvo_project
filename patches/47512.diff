commit 74a8f296e0f195916d28e1c928f457e04aa22892
Author: Veronika Hanulikova <vhanulik@redhat.com>
Date:   Thu May 5 17:03:51 2022 +0200

    fuzz_card: Do not use fuzzing input for output buffer

diff --git a/src/tests/fuzzing/fuzz_card.c b/src/tests/fuzzing/fuzz_card.c
index c2d7e288..d7e24922 100644
--- a/src/tests/fuzzing/fuzz_card.c
+++ b/src/tests/fuzzing/fuzz_card.c
@@ -29,72 +29,70 @@
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
 	sc_context_t     *ctx = NULL;
 	sc_card_t        *card = NULL;
 	struct sc_reader *reader = NULL;
 	unsigned long     flag = 0;
 	const uint8_t    *ptr = NULL;
 	uint16_t          ptr_size = 0;
 	u8                files[SC_MAX_EXT_APDU_BUFFER_SIZE];
 	uint8_t           len = 0;
 	u8               *rnd = NULL, *wrap_buf = NULL, *unwrap_buf = NULL;
 	size_t            wrap_buf_len = 0, unwrap_buf_len = 0;
 	int               reset = 0, r = 0;
 
 #ifdef FUZZING_ENABLED
 	fclose(stdout);
 #endif
 
 	if (size <= sizeof(unsigned long) + 1)
 		return 0;
 
 	flag = *((unsigned long *) data);
 	len = *(data + sizeof(unsigned long));
 	data += (sizeof(unsigned long) + sizeof(uint8_t));
 	size -= (sizeof(unsigned long) + sizeof(uint8_t));
 
 	/* Establish context for fuzz app*/
 	sc_establish_context(&ctx, "fuzz");
 	if (!ctx)
 		return 0;
 
 	if (fuzz_connect_card(ctx, &card, &reader, data, size) != SC_SUCCESS)
 		goto err;
 
 	/* Wrap & Unwrap*/
-	fuzz_get_chunk(reader, &ptr, &ptr_size);
-	if (!(wrap_buf = malloc(ptr_size)))
+	if (!(wrap_buf = malloc(SC_MAX_APDU_BUFFER_SIZE)))
 		goto err;
-	memcpy(wrap_buf, ptr, ptr_size);
-	wrap_buf_len = ptr_size;
+	wrap_buf_len = SC_MAX_APDU_BUFFER_SIZE;
 	sc_wrap(card, NULL, 0, wrap_buf, wrap_buf_len);
 
 	fuzz_get_chunk(reader, &ptr, &ptr_size);
 	if (!(unwrap_buf = malloc(ptr_size)))
 		goto err;
 	memcpy(unwrap_buf, ptr, ptr_size);
 	unwrap_buf_len = ptr_size;
 	sc_unwrap(card, unwrap_buf, unwrap_buf_len, NULL, 0);
 
 	/* Write binary  */
 	sc_write_binary(card, 0, ptr, ptr_size, flag);
 
 	/* Put data */
 	fuzz_get_chunk(reader, &ptr, &ptr_size);
 	sc_put_data(card, flag, ptr, ptr_size);
 
 	/* List files */
 	sc_list_files(card, files, sizeof(files));
 
 	/* Get challenge */
 	rnd = malloc(len);
 	if (rnd == NULL)
 		goto err;
 	if ((r = sc_get_challenge(card, rnd, len)) != SC_SUCCESS)
 		sc_log(ctx, "sc_get_challenge failed with rc = %d", r);
 
 	/* Append record */
 	sc_append_record(card, ptr, ptr_size, flag);
 
 	/* Reset card */
 	reset = (*data) < 128 ? 1 : 0;
 	sc_reset(card, reset);
