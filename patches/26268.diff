commit 20b8d16e4f3fa4d94b606a7f7804ee56c776768b
Author: Dan Bloomberg <dan.bloomberg@gmail.com>
Date:   Sun Oct 25 00:56:14 2020 -0700

    Issue 26358: graphics_fuzzer: null deref in pixFillPolygon
    * also Issue 26409 (duplicate)

diff --git a/src/graphics.c b/src/graphics.c
index 9105749..c2100a9 100644
--- a/src/graphics.c
+++ b/src/graphics.c
@@ -2568,71 +2568,75 @@ l_int32  *xstart, *xend;
 PIX      *pixi, *pixd;
 
     PROCNAME("pixFillPolygon");
 
     if (!pixs || (pixGetDepth(pixs) != 1))
         return (PIX *)ERROR_PTR("pixs undefined or not 1 bpp", procName, NULL);
     if (!pta)
         return (PIX *)ERROR_PTR("pta not defined", procName, NULL);
+    if (ptaGetCount(pta) < 2)
+        return (PIX *)ERROR_PTR("pta has < 2 pts", procName, NULL);
 
     pixGetDimensions(pixs, &w, &h, NULL);
-    xstart = (l_int32 *)LEPT_CALLOC(w / 2, sizeof(l_int32));
-    xend = (l_int32 *)LEPT_CALLOC(w / 2, sizeof(l_int32));
+    xstart = (l_int32 *)LEPT_CALLOC(L_MAX(1, w / 2), sizeof(l_int32));
+    xend = (l_int32 *)LEPT_CALLOC(L_MAX(1, w / 2), sizeof(l_int32));
+    if (!xstart)
+        return (PIX *)ERROR_PTR("xstart and xend not made", procName, NULL);
 
         /* Find a raster with 2 or more black runs.  The first background
          * pixel after the end of the first run is likely to be inside
          * the polygon, and can be used as a seed pixel. */
     found = FALSE;
     for (i = ymin + 1; i < h; i++) {
         pixFindHorizontalRuns(pixs, i, xstart, xend, &n);
         if (n > 1) {
             ptaPtInsidePolygon(pta, xend[0] + 1, i, &inside);
             if (inside) {
                 found = TRUE;
                 break;
             }
         }
     }
     if (!found) {
         L_WARNING("nothing found to fill\n", procName);
         LEPT_FREE(xstart);
         LEPT_FREE(xend);
         return 0;
     }
 
         /* Place the seed pixel in the output image */
     pixd = pixCreateTemplate(pixs);
     pixSetPixel(pixd, xend[0] + 1, i, 1);
 
         /* Invert pixs to make a filling mask, and fill from the seed */
     pixi = pixInvert(NULL, pixs);
     pixSeedfillBinary(pixd, pixd, pixi, 4);
 
         /* Add the pixels of the original polygon outline */
     pixOr(pixd, pixd, pixs);
 
     pixDestroy(&pixi);
     LEPT_FREE(xstart);
     LEPT_FREE(xend);
     return pixd;
 }
 
 
 /*------------------------------------------------------------------*
  *             Contour rendering on grayscale images                *
  *------------------------------------------------------------------*/
 /*!
  * \brief   pixRenderContours()
  *
  * \param[in]    pixs        8 or 16 bpp; no colormap
  * \param[in]    startval    value of lowest contour; must be in [0 ... maxval]
  * \param[in]    incr        increment to next contour; must be > 0
  * \param[in]    outdepth    either 1 or depth of pixs
  * \return  pixd, or NULL on error
  *
  * <pre>
  * Notes:
  *      (1) The output can be either 1 bpp, showing just the contour
  *          lines, or a copy of the input pixs with the contour lines
  *          superposed.
  * </pre>
  */
