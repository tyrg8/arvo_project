commit 234d86c92aee0e6b77a3fcf7de44f62390ca2088
Author: Derek Bailey <derekbailey@google.com>
Date:   Thu Apr 21 21:22:20 2022 -0700

    fixed off-by-one in parser

diff --git a/src/idl_parser.cpp b/src/idl_parser.cpp
index 74d61f3e..690bd8d5 100644
--- a/src/idl_parser.cpp
+++ b/src/idl_parser.cpp
@@ -314,254 +314,254 @@ static inline bool IsIdentifierStart(char c) {
 CheckedError Parser::Next() {
   doc_comment_.clear();
   bool seen_newline = cursor_ == source_;
   attribute_.clear();
   attr_is_trivial_ascii_string_ = true;
   for (;;) {
     char c = *cursor_++;
     token_ = c;
     switch (c) {
       case '\0':
         cursor_--;
         token_ = kTokenEof;
         return NoError();
       case ' ':
       case '\r':
       case '\t': break;
       case '\n':
         MarkNewLine();
         seen_newline = true;
         break;
       case '{':
       case '}':
       case '(':
       case ')':
       case '[':
       case ']':
       case ',':
       case ':':
       case ';':
       case '=': return NoError();
       case '\"':
       case '\'': {
         int unicode_high_surrogate = -1;
 
         while (*cursor_ != c) {
           if (*cursor_ < ' ' && static_cast<signed char>(*cursor_) >= 0)
             return Error("illegal character in string constant");
           if (*cursor_ == '\\') {
             attr_is_trivial_ascii_string_ = false;  // has escape sequence
             cursor_++;
             if (unicode_high_surrogate != -1 && *cursor_ != 'u') {
               return Error(
                   "illegal Unicode sequence (unpaired high surrogate)");
             }
             switch (*cursor_) {
               case 'n':
                 attribute_ += '\n';
                 cursor_++;
                 break;
               case 't':
                 attribute_ += '\t';
                 cursor_++;
                 break;
               case 'r':
                 attribute_ += '\r';
                 cursor_++;
                 break;
               case 'b':
                 attribute_ += '\b';
                 cursor_++;
                 break;
               case 'f':
                 attribute_ += '\f';
                 cursor_++;
                 break;
               case '\"':
                 attribute_ += '\"';
                 cursor_++;
                 break;
               case '\'':
                 attribute_ += '\'';
                 cursor_++;
                 break;
               case '\\':
                 attribute_ += '\\';
                 cursor_++;
                 break;
               case '/':
                 attribute_ += '/';
                 cursor_++;
                 break;
               case 'x': {  // Not in the JSON standard
                 cursor_++;
                 uint64_t val;
                 ECHECK(ParseHexNum(2, &val));
                 attribute_ += static_cast<char>(val);
                 break;
               }
               case 'u': {
                 cursor_++;
                 uint64_t val;
                 ECHECK(ParseHexNum(4, &val));
                 if (val >= 0xD800 && val <= 0xDBFF) {
                   if (unicode_high_surrogate != -1) {
                     return Error(
                         "illegal Unicode sequence (multiple high surrogates)");
                   } else {
                     unicode_high_surrogate = static_cast<int>(val);
                   }
                 } else if (val >= 0xDC00 && val <= 0xDFFF) {
                   if (unicode_high_surrogate == -1) {
                     return Error(
                         "illegal Unicode sequence (unpaired low surrogate)");
                   } else {
                     int code_point = 0x10000 +
                                      ((unicode_high_surrogate & 0x03FF) << 10) +
                                      (val & 0x03FF);
                     ToUTF8(code_point, &attribute_);
                     unicode_high_surrogate = -1;
                   }
                 } else {
                   if (unicode_high_surrogate != -1) {
                     return Error(
                         "illegal Unicode sequence (unpaired high surrogate)");
                   }
                   ToUTF8(static_cast<int>(val), &attribute_);
                 }
                 break;
               }
               default: return Error("unknown escape code in string constant");
             }
           } else {  // printable chars + UTF-8 bytes
             if (unicode_high_surrogate != -1) {
               return Error(
                   "illegal Unicode sequence (unpaired high surrogate)");
             }
             // reset if non-printable
             attr_is_trivial_ascii_string_ &=
                 check_ascii_range(*cursor_, ' ', '~');
 
             attribute_ += *cursor_++;
           }
         }
         if (unicode_high_surrogate != -1) {
           return Error("illegal Unicode sequence (unpaired high surrogate)");
         }
         cursor_++;
         if (!attr_is_trivial_ascii_string_ && !opts.allow_non_utf8 &&
             !ValidateUTF8(attribute_)) {
           return Error("illegal UTF-8 sequence");
         }
         token_ = kTokenStringConstant;
         return NoError();
       }
       case '/':
         if (*cursor_ == '/') {
           const char *start = ++cursor_;
           while (*cursor_ && *cursor_ != '\n' && *cursor_ != '\r') cursor_++;
           if (*start == '/') {  // documentation comment
             if (!seen_newline)
               return Error(
                   "a documentation comment should be on a line on its own");
             doc_comment_.push_back(std::string(start + 1, cursor_));
           }
           break;
         } else if (*cursor_ == '*') {
           cursor_++;
           // TODO: make nested.
           while (*cursor_ != '*' || cursor_[1] != '/') {
             if (*cursor_ == '\n') MarkNewLine();
             if (!*cursor_) return Error("end of file in comment");
             cursor_++;
           }
           cursor_ += 2;
           break;
         }
         FLATBUFFERS_FALLTHROUGH();  // else fall thru
       default:
         if (IsIdentifierStart(c)) {
           // Collect all chars of an identifier:
           const char *start = cursor_ - 1;
           while (IsIdentifierStart(*cursor_) || is_digit(*cursor_)) cursor_++;
           attribute_.append(start, cursor_);
           token_ = kTokenIdentifier;
           return NoError();
         }
 
         const auto has_sign = (c == '+') || (c == '-');
         if (has_sign) {
           // Check for +/-inf which is considered a float constant.
           if (strncmp(cursor_, "inf", 3) == 0 &&
-              !(IsIdentifierStart(cursor_[4]) || is_digit(cursor_[4]))) {
+              !(IsIdentifierStart(cursor_[3]) || is_digit(cursor_[3]))) {
             attribute_.assign(cursor_ - 1, cursor_ + 3);
             token_ = kTokenFloatConstant;
             cursor_ += 3;
             return NoError();
           }
 
           if (IsIdentifierStart(*cursor_)) {
             // '-'/'+' and following identifier - it could be a predefined
             // constant. Return the sign in token_, see ParseSingleValue.
             return NoError();
           }
         }
 
         auto dot_lvl =
             (c == '.') ? 0 : 1;  // dot_lvl==0 <=> exactly one '.' seen
         if (!dot_lvl && !is_digit(*cursor_)) return NoError();  // enum?
         // Parser accepts hexadecimal-floating-literal (see C++ 5.13.4).
         if (is_digit(c) || has_sign || !dot_lvl) {
           const auto start = cursor_ - 1;
           auto start_digits = !is_digit(c) ? cursor_ : cursor_ - 1;
           if (!is_digit(c) && is_digit(*cursor_)) {
             start_digits = cursor_;  // see digit in cursor_ position
             c = *cursor_++;
           }
           // hex-float can't begind with '.'
           auto use_hex = dot_lvl && (c == '0') && is_alpha_char(*cursor_, 'X');
           if (use_hex) start_digits = ++cursor_;  // '0x' is the prefix, skip it
           // Read an integer number or mantisa of float-point number.
           do {
             if (use_hex) {
               while (is_xdigit(*cursor_)) cursor_++;
             } else {
               while (is_digit(*cursor_)) cursor_++;
             }
           } while ((*cursor_ == '.') && (++cursor_) && (--dot_lvl >= 0));
           // Exponent of float-point number.
           if ((dot_lvl >= 0) && (cursor_ > start_digits)) {
             // The exponent suffix of hexadecimal float number is mandatory.
             if (use_hex && !dot_lvl) start_digits = cursor_;
             if ((use_hex && is_alpha_char(*cursor_, 'P')) ||
                 is_alpha_char(*cursor_, 'E')) {
               dot_lvl = 0;  // Emulate dot to signal about float-point number.
               cursor_++;
               if (*cursor_ == '+' || *cursor_ == '-') cursor_++;
               start_digits = cursor_;  // the exponent-part has to have digits
               // Exponent is decimal integer number
               while (is_digit(*cursor_)) cursor_++;
               if (*cursor_ == '.') {
                 cursor_++;  // If see a dot treat it as part of invalid number.
                 dot_lvl = -1;  // Fall thru to Error().
               }
             }
           }
           // Finalize.
           if ((dot_lvl >= 0) && (cursor_ > start_digits)) {
             attribute_.append(start, cursor_);
             token_ = dot_lvl ? kTokenIntegerConstant : kTokenFloatConstant;
             return NoError();
           } else {
             return Error("invalid number: " + std::string(start, cursor_));
           }
         }
         std::string ch;
         ch = c;
         if (false == check_ascii_range(c, ' ', '~'))
           ch = "code: " + NumToString(c);
         return Error("illegal character: " + ch);
     }
   }
 }
 
 // Check if a given token is next.
diff --git a/tests/fuzzer/readme.md b/tests/fuzzer/readme.md
index 1d0b392c..c4513012 100644
--- a/tests/fuzzer/readme.md
+++ b/tests/fuzzer/readme.md
@@ -11,10 +11,11 @@ For details about **libFuzzer** see: https://llvm.org/docs/LibFuzzer.html
 To build and run these tests LLVM compiler (with clang frontend) and CMake should be installed before.
 
 The fuzzer section include four tests:
+- `annotator_fuzzer` checks that inputs given to the flatc --annotate are always parsable;
 - `verifier_fuzzer` checks stability of deserialization engine for `Monster` schema;
 - `parser_fuzzer` checks stability of schema and json parser under various inputs;
 - `scalar_parser` focused on validation of the parser while parse numeric scalars in schema and/or json files;
 - `flexverifier_fuzzer` checks stability of deserialization engine for FlexBuffers only;
 
 ## Build
 ```sh
