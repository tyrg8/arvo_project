commit 6ecf2c0a5e4d100754be3fb99ff0656d1b112e24
Merge: feb911c61 c2476e385
Author: David Garske <david@wolfssl.com>
Date:   Wed Jul 27 15:43:16 2022 -0700

    Merge pull request #5399 from SparkiDev/sp_exptmod_reduce
    
    SP int: exptmod ensure base is less than modulus

diff --git a/wolfcrypt/src/sp_int.c b/wolfcrypt/src/sp_int.c
index db84a3e72..763ec1f8f 100644
--- a/wolfcrypt/src/sp_int.c
+++ b/wolfcrypt/src/sp_int.c
@@ -7025,349 +7025,350 @@ static
 #endif
 int sp_div(sp_int* a, sp_int* d, sp_int* r, sp_int* rem)
 {
     int err = MP_OKAY;
     int ret;
     int done = 0;
     int i;
     int s = 0;
     sp_int_digit dt;
     sp_int_digit t;
     sp_int* sa = NULL;
     sp_int* sd = NULL;
     sp_int* tr = NULL;
     sp_int* trial = NULL;
 #ifdef WOLFSSL_SP_INT_NEGATIVE
     int aSign = MP_ZPOS;
     int dSign = MP_ZPOS;
 #endif /* WOLFSSL_SP_INT_NEGATIVE */
     DECL_SP_INT_ARRAY(td, (a == NULL) ? 1 : a->used + 1, 4);
 
     if ((a == NULL) || (d == NULL) || ((r == NULL) && (rem == NULL))) {
         err = MP_VAL;
     }
     if ((err == MP_OKAY) && sp_iszero(d)) {
         err = MP_VAL;
     }
     if ((err == MP_OKAY) && (r != NULL) && (r->size < a->used - d->used + 2)) {
         err = MP_VAL;
     }
     if ((err == MP_OKAY) && (rem != NULL)) {
         if ((a->used <= d->used) && (rem->size < a->used + 1)) {
             err = MP_VAL;
         }
         else if ((a->used > d->used) && (rem->size < d->used + 1)) {
             err = MP_VAL;
         }
     }
     /* May need to shift number being divided left into a new word. */
     if ((err == MP_OKAY) && (a->used == SP_INT_DIGITS)) {
         int bits = SP_WORD_SIZE - (sp_count_bits(d) % SP_WORD_SIZE);
         if ((bits != SP_WORD_SIZE) &&
                 (sp_count_bits(a) + bits > SP_INT_DIGITS * SP_WORD_SIZE)) {
             err = MP_VAL;
         }
     }
 
 #if 0
     if (err == MP_OKAY) {
         sp_print(a, "a");
         sp_print(d, "b");
     }
 #endif
 
     if (err == MP_OKAY) {
     #ifdef WOLFSSL_SP_INT_NEGATIVE
         aSign = a->sign;
         dSign = d->sign;
     #endif /* WOLFSSL_SP_INT_NEGATIVE */
 
         ret = _sp_cmp_abs(a, d);
         if (ret == MP_LT) {
             if (rem != NULL) {
                 sp_copy(a, rem);
             }
             if (r != NULL) {
                 sp_set(r, 0);
             }
             done = 1;
         }
         else if (ret == MP_EQ) {
             if (rem != NULL) {
                 sp_set(rem, 0);
             }
             if (r != NULL) {
                 sp_set(r, 1);
             #ifdef WOLFSSL_SP_INT_NEGATIVE
                 r->sign = (aSign == dSign) ? MP_ZPOS : MP_NEG;
             #endif /* WOLFSSL_SP_INT_NEGATIVE */
             }
             done = 1;
         }
         else if (sp_count_bits(a) == sp_count_bits(d)) {
             /* a is greater than d but same bit length */
             if (rem != NULL) {
                 _sp_sub_off(a, d, rem, 0);
             #ifdef WOLFSSL_SP_INT_NEGATIVE
                 rem->sign = aSign;
             #endif
             }
             if (r != NULL) {
                 sp_set(r, 1);
             #ifdef WOLFSSL_SP_INT_NEGATIVE
                 r->sign = (aSign == dSign) ? MP_ZPOS : MP_NEG;
             #endif /* WOLFSSL_SP_INT_NEGATIVE */
             }
             done = 1;
         }
     }
 
     if (!done) {
 #if (defined(WOLFSSL_SMALL_STACK) || defined(SP_ALLOC)) && \
     !defined(WOLFSSL_SP_NO_MALLOC)
         int cnt = 4;
-        if ((rem != NULL) && (rem != d)) {
+        if ((rem != NULL) && (rem != d) && (rem->size > a->used)) {
             cnt--;
         }
         if ((r != NULL) && (r != d)) {
             cnt--;
         }
         /* Macro always has code associated with it and checks err first. */
         ALLOC_SP_INT_ARRAY(td, a->used + 1, cnt, err, NULL);
 #else
         ALLOC_SP_INT_ARRAY(td, a->used + 1, 4, err, NULL);
 #endif
     }
 
     if ((!done) && (err == MP_OKAY)) {
         sd    = td[0];
         trial = td[1];
 #if (defined(WOLFSSL_SMALL_STACK) || defined(SP_ALLOC)) && \
     !defined(WOLFSSL_SP_NO_MALLOC)
         i = 2;
-        sa    = ((rem != NULL) && (rem != d)) ? rem : td[i++];
-        tr    = ((r != NULL) && (r != d))     ? r   : td[i];
+        sa    = ((rem != NULL) && (rem != d) && (rem->size > a->used)) ? rem :
+            td[i++];
+        tr    = ((r != NULL) && (r != d)) ? r : td[i];
 #else
         sa    = td[2];
         tr    = td[3];
 #endif
 
         sp_init_size(sd, d->used + 1);
         sp_init_size(trial, a->used + 1);
 #if (defined(WOLFSSL_SMALL_STACK) || defined(SP_ALLOC)) && \
     !defined(WOLFSSL_SP_NO_MALLOC)
-        if ((rem == NULL) || (rem == d)) {
+        if (sa != rem) {
             sp_init_size(sa, a->used + 1);
         }
-        if ((r == NULL) || (r == d)) {
+        if (tr != r) {
             sp_init_size(tr, a->used - d->used + 2);
         }
 #else
         sp_init_size(sa, a->used + 1);
         sp_init_size(tr, a->used - d->used + 2);
 #endif
 
         s = sp_count_bits(d);
         s = SP_WORD_SIZE - (s & SP_WORD_MASK);
         sp_copy(a, sa);
         if (s != SP_WORD_SIZE) {
             err = sp_lshb(sa, s);
             if (err == MP_OKAY) {
                 sp_copy(d, sd);
                 d = sd;
                 err = sp_lshb(sd, s);
             }
         }
     }
     if ((!done) && (err == MP_OKAY) && (d->used > 0)) {
 #ifdef WOLFSSL_SP_SMALL
         int c;
 #else
         int j;
         int o;
     #ifndef SQR_MUL_ASM
         sp_int_sword sw;
     #else
         sp_int_digit sl;
         sp_int_digit sh;
         sp_int_digit st;
     #endif
 #endif /* WOLFSSL_SP_SMALL */
 #ifdef WOLFSSL_SP_INT_NEGATIVE
         sa->sign = MP_ZPOS;
         sd->sign = MP_ZPOS;
 #endif /* WOLFSSL_SP_INT_NEGATIVE */
 
         tr->used = sa->used - d->used + 1;
         sp_clear(tr);
         tr->used = sa->used - d->used + 1;
         dt = d->dp[d->used-1];
 
         for (i = d->used - 1; i > 0; i--) {
             if (sa->dp[sa->used - d->used + i] != d->dp[i]) {
                 break;
             }
         }
         if (sa->dp[sa->used - d->used + i] >= d->dp[i]) {
             i = sa->used;
             _sp_sub_off(sa, d, sa, sa->used - d->used);
             /* Keep the same used so that 0 zeros will be put in. */
             sa->used = i;
             if (r != NULL) {
                 tr->dp[sa->used - d->used] = 1;
             }
         }
         for (i = sa->used - 1; i >= d->used; i--) {
             if (sa->dp[i] == dt) {
                 t = SP_DIGIT_MAX;
             }
             else {
                 t = sp_div_word(sa->dp[i], sa->dp[i-1], dt);
             }
 
 #ifdef WOLFSSL_SP_SMALL
             do {
                 err = _sp_mul_d(d, t, trial, i - d->used);
                 if (err != MP_OKAY) {
                     break;
                 }
                 c = _sp_cmp_abs(trial, sa);
                 if (c == MP_GT) {
                     t--;
                 }
             }
             while (c == MP_GT);
 
             if (err != MP_OKAY) {
                 break;
             }
 
             _sp_sub_off(sa, trial, sa, 0);
             tr->dp[i - d->used] += t;
             if (tr->dp[i - d->used] < t) {
                 tr->dp[i + 1 - d->used]++;
             }
 #else
             o = i - d->used;
             do {
             #ifndef SQR_MUL_ASM
                 sp_int_word tw = 0;
             #else
                 sp_int_digit tl = 0;
                 sp_int_digit th = 0;
             #endif
                 for (j = 0; j < d->used; j++) {
                 #ifndef SQR_MUL_ASM
                     tw += (sp_int_word)d->dp[j] * t;
                     trial->dp[j] = (sp_int_digit)tw;
                     tw >>= SP_WORD_SIZE;
                 #else
                     SP_ASM_MUL_ADD_NO(tl, th, d->dp[j], t);
                     trial->dp[j] = tl;
                     tl = th;
                     th = 0;
                 #endif
                 }
               #ifndef SQR_MUL_ASM
                 trial->dp[j] = (sp_int_digit)tw;
               #else
                 trial->dp[j] = tl;
               #endif
 
                 for (j = d->used; j > 0; j--) {
                     if (trial->dp[j] != sa->dp[j + o]) {
                         break;
                     }
                 }
                 if (trial->dp[j] > sa->dp[j + o]) {
                     t--;
                 }
             }
             while (trial->dp[j] > sa->dp[j + o]);
 
         #ifndef SQR_MUL_ASM
             sw = 0;
         #else
             sl = 0;
             sh = 0;
         #endif
             for (j = 0; j <= d->used; j++) {
             #ifndef SQR_MUL_ASM
                 sw += sa->dp[j + o];
                 sw -= trial->dp[j];
                 sa->dp[j + o] = (sp_int_digit)sw;
                 sw >>= SP_WORD_SIZE;
             #else
                 st = sa->dp[j + o];
                 SP_ASM_ADDC(sl, sh, st);
                 st = trial->dp[j];
                 SP_ASM_SUBC(sl, sh, st);
                 sa->dp[j + o] = sl;
                 sl = sh;
                 sh = (sp_int_digit)0 - (sl >> (SP_WORD_SIZE - 1));
             #endif
             }
 
             tr->dp[o] = t;
 #endif /* WOLFSSL_SP_SMALL */
         }
         sa->used = i + 1;
 
         if ((err == MP_OKAY) && (rem != NULL)) {
 #ifdef WOLFSSL_SP_INT_NEGATIVE
             sa->sign = (sa->used == 0) ? MP_ZPOS : aSign;
 #endif /* WOLFSSL_SP_INT_NEGATIVE */
             if (s != SP_WORD_SIZE) {
                 sp_rshb(sa, s, sa);
             }
             sp_copy(sa, rem);
             sp_clamp(rem);
 #ifdef WOLFSSL_SP_INT_NEGATIVE
             if (sp_iszero(rem)) {
                 rem->sign = MP_ZPOS;
             }
 #endif
         }
         if ((err == MP_OKAY) && (r != NULL)) {
             sp_copy(tr, r);
             sp_clamp(r);
 #ifdef WOLFSSL_SP_INT_NEGATIVE
             if (sp_iszero(r)) {
                 r->sign = MP_ZPOS;
             }
             else {
                 r->sign = (aSign == dSign) ? MP_ZPOS : MP_NEG;
             }
 #endif /* WOLFSSL_SP_INT_NEGATIVE */
         }
     }
 
 #if 0
     if (err == MP_OKAY) {
         if (rem != NULL) {
             sp_print(rem, "rdr");
         }
         if (r != NULL) {
             sp_print(r, "rdw");
         }
     }
 #endif
 
     FREE_SP_INT_ARRAY(td, NULL);
     return err;
 }
 #endif /* WOLFSSL_SP_MATH_ALL || !NO_DH || HAVE_ECC || \
         * (!NO_RSA && !WOLFSSL_RSA_VERIFY_ONLY) */
 
 #if defined(WOLFSSL_SP_MATH_ALL) || !defined(NO_DH) || defined(HAVE_ECC) || \
     (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY) && \
      !defined(WOLFSSL_RSA_PUBLIC_ONLY))
 #ifndef FREESCALE_LTC_TFM
 /* Calculate the remainder of dividing a by m: r = a mod m.
  *
  * @param  [in]   a  SP integer to reduce.
  * @param  [in]   m  SP integer that is the modulus.
  * @param  [out]  r  SP integer to store result in.
  *
  * @return  MP_OKAY on success.
  * @return  MP_VAL when a, m or r is NULL or m is 0.
  */
@@ -11277,165 +11278,181 @@ static int _sp_exptmod_base_2(sp_int* e, int digits, sp_int* m, sp_int* r)
 #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
     !defined(NO_DH) || (!defined(NO_RSA) && defined(WOLFSSL_KEY_GEN))
 /* Exponentiates b to the power of e modulo m into r: r = b ^ e mod m
  *
  * @param  [in]   b     SP integer that is the base.
  * @param  [in]   e     SP integer that is the exponent.
  * @param  [in]   bits  Number of bits in base to use. May be greater than
  *                      count of bits in b.
  * @param  [in]   m     SP integer that is the modulus.
  * @param  [out]  r     SP integer to hold result.
  *
  * @return  MP_OKAY on success.
  * @return  MP_VAL when b, e, m or r is NULL; or m <= 0 or e is negative.
  * @return  MP_MEM when dynamic memory allocation fails.
  */
 int sp_exptmod_ex(sp_int* b, sp_int* e, int digits, sp_int* m, sp_int* r)
 {
     int err = MP_OKAY;
     int done = 0;
     int mBits = sp_count_bits(m);
     int bBits = sp_count_bits(b);
     int eBits = sp_count_bits(e);
 
     if ((b == NULL) || (e == NULL) || (m == NULL) || (r == NULL)) {
         err = MP_VAL;
     }
 
 #if 0
     if (err == MP_OKAY) {
         sp_print(b, "a");
         sp_print(e, "b");
         sp_print(m, "m");
     }
 #endif
 
-    if (err != MP_OKAY) {
-    }
-    /* Handle special cases. */
-    else if (sp_iszero(m)) {
+    /* Check for invalid modulus. */
+    if ((err == MP_OKAY) && sp_iszero(m)) {
         err = MP_VAL;
     }
 #ifdef WOLFSSL_SP_INT_NEGATIVE
-    else if ((e->sign == MP_NEG) || (m->sign == MP_NEG)) {
+    /* Check for unsupported negative values of exponent and modulus. */
+    if ((err == MP_OKAY) && ((e->sign == MP_NEG) || (m->sign == MP_NEG))) {
         err = MP_VAL;
     }
 #endif
-    else if (sp_isone(m)) {
+
+    /* Check for degenerate cases. */
+    if ((err == MP_OKAY) && sp_isone(m)) {
         sp_set(r, 0);
         done = 1;
     }
-    else if (sp_iszero(e)) {
+    if ((!done) && (err == MP_OKAY) && sp_iszero(e)) {
         sp_set(r, 1);
         done = 1;
     }
-    else if (sp_iszero(b)) {
+
+    /* Check whether base needs to be reduced. */
+    if ((!done) && (err == MP_OKAY) && (_sp_cmp_abs(b, m) != MP_LT)) {
+        if ((r == e) || (r == m)) {
+            err = MP_VAL;
+        }
+        if (err == MP_OKAY) {
+            err = sp_mod(b, m, r);
+        }
+        if (err == MP_OKAY) {
+            b = r;
+        }
+    }
+    /* Check for degenerate case of base. */
+    if ((!done) && (err == MP_OKAY) && sp_iszero(b)) {
         sp_set(r, 0);
         done = 1;
     }
+
     /* Ensure SP integers have space for intermediate values. */
-    else if (m->used * 2 >= r->size) {
+    if ((!done) && (err == MP_OKAY) && (m->used * 2 >= r->size)) {
         err = MP_VAL;
     }
 
     if ((!done) && (err == MP_OKAY)) {
         /* Use code optimized for specific sizes if possible */
 #if (defined(WOLFSSL_SP_MATH) || defined(WOLFSSL_SP_MATH_ALL)) && \
     (defined(WOLFSSL_HAVE_SP_RSA) || defined(WOLFSSL_HAVE_SP_DH))
     #ifndef WOLFSSL_SP_NO_2048
         if ((mBits == 1024) && sp_isodd(m) && (bBits <= 1024) &&
             (eBits <= 1024)) {
             err = sp_ModExp_1024(b, e, m, r);
             done = 1;
         }
         else if ((mBits == 2048) && sp_isodd(m) && (bBits <= 2048) &&
                  (eBits <= 2048)) {
             err = sp_ModExp_2048(b, e, m, r);
             done = 1;
         }
         else
     #endif
     #ifndef WOLFSSL_SP_NO_3072
         if ((mBits == 1536) && sp_isodd(m) && (bBits <= 1536) &&
             (eBits <= 1536)) {
             err = sp_ModExp_1536(b, e, m, r);
             done = 1;
         }
         else if ((mBits == 3072) && sp_isodd(m) && (bBits <= 3072) &&
                  (eBits <= 3072)) {
             err = sp_ModExp_3072(b, e, m, r);
             done = 1;
         }
         else
     #endif
     #ifdef WOLFSSL_SP_4096
         if ((mBits == 4096) && sp_isodd(m) && (bBits <= 4096) &&
             (eBits <= 4096)) {
             err = sp_ModExp_4096(b, e, m, r);
             done = 1;
         }
         else
     #endif
 #endif
         {
         }
     }
 #if defined(WOLFSSL_SP_MATH_ALL) || !defined(NO_DH)
 #if (defined(WOLFSSL_RSA_VERIFY_ONLY) || defined(WOLFSSL_RSA_PUBLIC_ONLY)) && \
     defined(NO_DH)
     if ((!done) && (err == MP_OKAY))
         err = sp_exptmod_nct(b, e, m, r);
     }
 #else
 #if defined(WOLFSSL_SP_MATH_ALL)
     if ((!done) && (err == MP_OKAY) && (b->used == 1) && (b->dp[0] == 2) &&
          mp_isodd(m)) {
         /* Use the generic base 2 implementation. */
         err = _sp_exptmod_base_2(e, digits, m, r);
     }
     else if ((!done) && (err == MP_OKAY) && ((m->used > 1) && mp_isodd(m))) {
     #ifndef WC_NO_HARDEN
         err = _sp_exptmod_mont_ex(b, e, digits * SP_WORD_SIZE, m, r);
     #else
         err = sp_exptmod_nct(b, e, m, r);
     #endif
     }
     else
 #endif /* WOLFSSL_SP_MATH_ALL */
     if ((!done) && (err == MP_OKAY)) {
         /* Otherwise use the generic implementation. */
         err = _sp_exptmod_ex(b, e, digits * SP_WORD_SIZE, m, r);
     }
 #endif /* WOLFSSL_RSA_VERIFY_ONLY || WOLFSSL_RSA_PUBLIC_ONLY */
 #else
     if ((!done) && (err == MP_OKAY)) {
         err = MP_VAL;
     }
 #endif /* WOLFSSL_SP_MATH_ALL || WOLFSSL_HAVE_SP_DH */
 
     (void)mBits;
     (void)bBits;
     (void)eBits;
     (void)digits;
 
 #if 0
     if (err == MP_OKAY) {
         sp_print(r, "rme");
     }
 #endif
     return err;
 }
 #endif /* WOLFSSL_SP_MATH_ALL || WOLFSSL_HAVE_SP_DH */
 
 #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
     !defined(NO_DH) || (!defined(NO_RSA) && defined(WOLFSSL_KEY_GEN))
 /* Exponentiates b to the power of e modulo m into r: r = b ^ e mod m
  *
  * @param  [in]   b  SP integer that is the base.
  * @param  [in]   e  SP integer that is the exponent.
  * @param  [in]   m  SP integer that is the modulus.
  * @param  [out]  r  SP integer to hold result.
  *
  * @return  MP_OKAY on success.
  * @return  MP_VAL when b, e, m or r is NULL; or m <= 0 or e is negative.
  * @return  MP_MEM when dynamic memory allocation fails.
  */
