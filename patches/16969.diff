commit 77f79475fd0419d16f1efe7812a44a9720fef10b
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Fri Sep 27 13:26:01 2019 +0100

    Bug 701634: Correctly handle file name of "\0"
    
    Attempting to open a file with a filename string starting with a NULL
    character should be treated the same as if the string was zero length.
    
    Not doing so created a broken file object leading to several operations
    resulting in a segfault.
    
    Also, add cleanup in the event of such an error, freeing memory allocated in
    preparing the gs stream object.

diff --git a/base/sfxcommon.c b/base/sfxcommon.c
index e5d5e88e3..002651ba0 100644
--- a/base/sfxcommon.c
+++ b/base/sfxcommon.c
@@ -62,41 +62,48 @@ int
 file_open_stream(const char *fname, uint len, const char *file_access,
                  uint buffer_size, stream ** ps, gx_io_device *iodev,
                  iodev_proc_fopen_t fopen_proc, gs_memory_t *mem)
 {
     int code;
     gp_file *file;
     char fmode[4];  /* r/w/a, [+], [b], null */
 
 #ifdef DEBUG
     if (strlen(gp_fmode_binary_suffix) > 0) {
         if (strchr(file_access, gp_fmode_binary_suffix[0]) != NULL)
 	    dmprintf(mem, "\nWarning: spurious 'b' character in file access mode\n");
 	assert(strchr(file_access, gp_fmode_binary_suffix[0]) == NULL);
     }
 #endif
 
     if (!iodev)
         iodev = iodev_default(mem);
     code = file_prepare_stream(fname, len, file_access, buffer_size, ps, fmode, mem);
     if (code < 0)
         return code;
     if (fname == 0)
         return 0;
-    if (fname[0] == 0)		/* fopen_proc gets NUL terminated string, not len */
-        return 0;		/* so this is the same as len == 0, so return NULL */
+    if (fname[0] == 0) {        /* fopen_proc gets NUL terminated string, not len */
+                                /* so this is the same as len == 0, so return NULL */
+        /* discard the stuff we allocated to keep from accumulating stuff needing GC */
+        gs_free_object(mem, (*ps)->cbuf, "file_close(buffer)");
+        gs_free_object(mem, *ps, "file_prepare_stream(stream)");
+        *ps = NULL;
+
+        return 0;
+    }
     code = (*fopen_proc)(iodev, (char *)(*ps)->cbuf, fmode, &file,
                          (char *)(*ps)->cbuf, (*ps)->bsize, mem);
     if (code < 0) {
         /* discard the stuff we allocated to keep from accumulating stuff needing GC */
         gs_free_object(mem, (*ps)->cbuf, "file_close(buffer)");
         gs_free_object(mem, *ps, "file_prepare_stream(stream)");
         *ps = NULL;
         return code;
     }
     if (file_init_stream(*ps, file, fmode, (*ps)->cbuf, (*ps)->bsize) != 0)
         return_error(gs_error_ioerror);
     return 0;
 }
 
 /* Close a file stream.  This replaces the close procedure in the stream */
 /* for normal (OS) files and for filters. */
diff --git a/psi/zfile.c b/psi/zfile.c
index 2b7d1684d..2f13992f4 100644
--- a/psi/zfile.c
+++ b/psi/zfile.c
@@ -231,69 +231,71 @@ int                             /* exported for zsysvm.c */
 zfile(i_ctx_t *i_ctx_p)
 {
     os_ptr op = osp;
     char file_access[4];
     gs_parsed_file_name_t pname;
     int code = parse_file_access_string(op, file_access);
     stream *s;
 
     if (code < 0)
         return code;
     code = parse_file_name(op-1, &pname, i_ctx_p->LockFilePermissions, imemory);
     if (code < 0)
         return code;
         /*
          * HACK: temporarily patch the current context pointer into the
          * state pointer for stdio-related devices.  See ziodev.c for
          * more information.
          */
     if (pname.iodev && pname.iodev->dtype == iodev_dtype_stdio) {
         bool statement = (strcmp(pname.iodev->dname, "%statementedit%") == 0);
         bool lineedit = (strcmp(pname.iodev->dname, "%lineedit%") == 0);
         if (pname.fname)
             return_error(gs_error_invalidfileaccess);
         if (statement || lineedit) {
             /* These need special code to support callouts */
             gx_io_device *indev = gs_findiodevice(imemory,
                                                   (const byte *)"%stdin", 6);
             stream *ins;
             if (strcmp(file_access, "r"))
                 return_error(gs_error_invalidfileaccess);
             indev->state = i_ctx_p;
             code = (indev->procs.open_device)(indev, file_access, &ins, imemory);
             indev->state = 0;
             if (code < 0)
                 return code;
             check_ostack(2);
             push(2);
             make_stream_file(op - 3, ins, file_access);
             make_bool(op-2, statement);
             make_int(op-1, 0);
             make_string(op, icurrent_space, 0, NULL);
             return zfilelineedit(i_ctx_p);
         }
         pname.iodev->state = i_ctx_p;
         code = (*pname.iodev->procs.open_device)(pname.iodev,
                                                  file_access, &s, imemory);
         pname.iodev->state = NULL;
     } else {
         if (pname.iodev == NULL)
             pname.iodev = iodev_default(imemory);
         code = zopen_file(i_ctx_p, &pname, file_access, &s, imemory);
     }
     if (code < 0)
         return code;
+    if (s == NULL)
+        return_error(gs_error_undefinedfilename);
     code = ssetfilename(s, op[-1].value.const_bytes, r_size(op - 1));
     if (code < 0) {
         sclose(s);
         return_error(gs_error_VMerror);
     }
     make_stream_file(op - 1, s, file_access);
     pop(1);
     return code;
 }
 
 /*
  * Files created with .tempfile permit some operations even if the
  * temp directory is not explicitly named on the PermitFile... path
  * The names 'SAFETY' and 'tempfiles' are defined by gs_init.ps
 */
@@ -651,61 +653,62 @@ int                             /* exported for zsysvm.c */
 zlibfile(i_ctx_t *i_ctx_p)
 {
     os_ptr op = osp;
     int code;
     byte cname[DEFAULT_BUFFER_SIZE];
     uint clen;
     gs_parsed_file_name_t pname;
     stream *s;
     gx_io_device *iodev_dflt;
 
     check_ostack(2);
     code = parse_file_name(op, &pname, i_ctx_p->LockFilePermissions, imemory);
     if (code < 0)
         return code;
     iodev_dflt = iodev_default(imemory);
     if (pname.iodev == NULL)
         pname.iodev = iodev_dflt;
     if (pname.iodev != iodev_dflt) { /* Non-OS devices don't have search paths (yet). */
         code = zopen_file(i_ctx_p, &pname, "r", &s, imemory);
+        if (s == NULL) code = gs_note_error(gs_error_undefinedfilename);
         if (code >= 0) {
             code = ssetfilename(s, op->value.const_bytes, r_size(op));
             if (code < 0) {
                 sclose(s);
                 return_error(gs_error_VMerror);
             }
         }
         if (code < 0) {
             push(1);
             make_false(op);
             return 0;
         }
         make_stream_file(op, s, "r");
     } else {
         ref fref;
 
         code = lib_file_open(i_ctx_p->lib_path, imemory, i_ctx_p, pname.fname, pname.len,
                              (char *)cname, sizeof(cname), &clen, &fref);
         if (code >= 0) {
             s = fptr(&fref);
             code = ssetfilename(s, cname, clen);
             if (code < 0) {
                 sclose(s);
                 return_error(gs_error_VMerror);
             }
         }
         if (code < 0) {
             if (code == gs_error_VMerror || code == gs_error_invalidfileaccess)
                 return code;
             push(1);
             make_false(op);
             return 0;
         }
         ref_assign(op, &fref);
     }
     push(1);
     make_true(op);
     return 0;
 }
 
 /* A "simple" prefix is defined as a (possibly empty) string of
    alphanumeric, underscore, and hyphen characters. */
