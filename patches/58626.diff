commit 319a488b3903cf92c3b45d1772717168a10f94d7
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Thu May 4 10:36:48 2023 -0600

    [GDEF] Fix null check
    
    Fixes https://oss-fuzz.com/testcase-detail/5920994267889664

diff --git a/src/OT/Layout/GDEF/GDEF.hh b/src/OT/Layout/GDEF/GDEF.hh
index df51ea70f..95d7a7141 100644
--- a/src/OT/Layout/GDEF/GDEF.hh
+++ b/src/OT/Layout/GDEF/GDEF.hh
@@ -631,294 +631,294 @@ struct GDEFVersion1_2
 struct GDEF
 {
   static constexpr hb_tag_t tableTag = HB_OT_TAG_GDEF;
 
   enum GlyphClasses {
     UnclassifiedGlyph	= 0,
     BaseGlyph		= 1,
     LigatureGlyph	= 2,
     MarkGlyph		= 3,
     ComponentGlyph	= 4
   };
 
   unsigned int get_size () const
   {
     switch (u.version.major) {
     case 1: return u.version1.get_size ();
 #ifndef HB_NO_BEYOND_64K
     case 2: return u.version2.get_size ();
 #endif
     default: return u.version.static_size;
     }
   }
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     if (unlikely (!u.version.sanitize (c))) return_trace (false);
     switch (u.version.major) {
     case 1: return_trace (u.version1.sanitize (c));
 #ifndef HB_NO_BEYOND_64K
     case 2: return_trace (u.version2.sanitize (c));
 #endif
     default: return_trace (true);
     }
   }
 
   bool subset (hb_subset_context_t *c) const
   {
     switch (u.version.major) {
     case 1: return u.version1.subset (c);
 #ifndef HB_NO_BEYOND_64K
     case 2: return u.version2.subset (c);
 #endif
     default: return false;
     }
   }
 
   bool has_glyph_classes () const
   {
     switch (u.version.major) {
     case 1: return u.version1.glyphClassDef != 0;
 #ifndef HB_NO_BEYOND_64K
     case 2: return u.version2.glyphClassDef != 0;
 #endif
     default: return false;
     }
   }
   const ClassDef &get_glyph_class_def () const
   {
     switch (u.version.major) {
     case 1: return this+u.version1.glyphClassDef;
 #ifndef HB_NO_BEYOND_64K
     case 2: return this+u.version2.glyphClassDef;
 #endif
     default: return Null(ClassDef);
     }
   }
   bool has_attach_list () const
   {
     switch (u.version.major) {
     case 1: return u.version1.attachList != 0;
 #ifndef HB_NO_BEYOND_64K
     case 2: return u.version2.attachList != 0;
 #endif
     default: return false;
     }
   }
   const AttachList &get_attach_list () const
   {
     switch (u.version.major) {
     case 1: return this+u.version1.attachList;
 #ifndef HB_NO_BEYOND_64K
     case 2: return this+u.version2.attachList;
 #endif
     default: return Null(AttachList);
     }
   }
   bool has_lig_carets () const
   {
     switch (u.version.major) {
     case 1: return u.version1.ligCaretList != 0;
 #ifndef HB_NO_BEYOND_64K
     case 2: return u.version2.ligCaretList != 0;
 #endif
     default: return false;
     }
   }
   const LigCaretList &get_lig_caret_list () const
   {
     switch (u.version.major) {
     case 1: return this+u.version1.ligCaretList;
 #ifndef HB_NO_BEYOND_64K
     case 2: return this+u.version2.ligCaretList;
 #endif
     default: return Null(LigCaretList);
     }
   }
   bool has_mark_attachment_types () const
   {
     switch (u.version.major) {
     case 1: return u.version1.markAttachClassDef != 0;
 #ifndef HB_NO_BEYOND_64K
     case 2: return u.version2.markAttachClassDef != 0;
 #endif
     default: return false;
     }
   }
   const ClassDef &get_mark_attach_class_def () const
   {
     switch (u.version.major) {
     case 1: return this+u.version1.markAttachClassDef;
 #ifndef HB_NO_BEYOND_64K
     case 2: return this+u.version2.markAttachClassDef;
 #endif
     default: return Null(ClassDef);
     }
   }
   bool has_mark_glyph_sets () const
   {
     switch (u.version.major) {
     case 1: return u.version.to_int () >= 0x00010002u && u.version1.markGlyphSetsDef != 0;
 #ifndef HB_NO_BEYOND_64K
     case 2: return u.version2.markGlyphSetsDef != 0;
 #endif
     default: return false;
     }
   }
   const MarkGlyphSets &get_mark_glyph_sets () const
   {
     switch (u.version.major) {
     case 1: return u.version.to_int () >= 0x00010002u ? this+u.version1.markGlyphSetsDef : Null(MarkGlyphSets);
 #ifndef HB_NO_BEYOND_64K
     case 2: return this+u.version2.markGlyphSetsDef;
 #endif
     default: return Null(MarkGlyphSets);
     }
   }
   bool has_var_store () const
   {
     switch (u.version.major) {
     case 1: return u.version.to_int () >= 0x00010003u && u.version1.varStore != 0;
 #ifndef HB_NO_BEYOND_64K
     case 2: return u.version2.varStore != 0;
 #endif
     default: return false;
     }
   }
   const VariationStore &get_var_store () const
   {
     switch (u.version.major) {
     case 1: return u.version.to_int () >= 0x00010003u ? this+u.version1.varStore : Null(VariationStore);
 #ifndef HB_NO_BEYOND_64K
     case 2: return this+u.version2.varStore;
 #endif
     default: return Null(VariationStore);
     }
   }
 
 
   bool has_data () const { return u.version.to_int (); }
   unsigned int get_glyph_class (hb_codepoint_t glyph) const
   { return get_glyph_class_def ().get_class (glyph); }
   void get_glyphs_in_class (unsigned int klass, hb_set_t *glyphs) const
   { get_glyph_class_def ().collect_class (glyphs, klass); }
 
   unsigned int get_mark_attachment_type (hb_codepoint_t glyph) const
   { return get_mark_attach_class_def ().get_class (glyph); }
 
   unsigned int get_attach_points (hb_codepoint_t glyph_id,
 				  unsigned int start_offset,
 				  unsigned int *point_count /* IN/OUT */,
 				  unsigned int *point_array /* OUT */) const
   { return get_attach_list ().get_attach_points (glyph_id, start_offset, point_count, point_array); }
 
   unsigned int get_lig_carets (hb_font_t *font,
 			       hb_direction_t direction,
 			       hb_codepoint_t glyph_id,
 			       unsigned int start_offset,
 			       unsigned int *caret_count /* IN/OUT */,
 			       hb_position_t *caret_array /* OUT */) const
   { return get_lig_caret_list ().get_lig_carets (font,
 						 direction, glyph_id, get_var_store(),
 						 start_offset, caret_count, caret_array); }
 
   bool mark_set_covers (unsigned int set_index, hb_codepoint_t glyph_id) const
   { return get_mark_glyph_sets ().covers (set_index, glyph_id); }
 
   /* glyph_props is a 16-bit integer where the lower 8-bit have bits representing
    * glyph class and other bits, and high 8-bit the mark attachment type (if any).
    * Not to be confused with lookup_props which is very similar. */
   unsigned int get_glyph_props (hb_codepoint_t glyph) const
   {
     unsigned int klass = get_glyph_class (glyph);
 
     static_assert (((unsigned int) HB_OT_LAYOUT_GLYPH_PROPS_BASE_GLYPH == (unsigned int) LookupFlag::IgnoreBaseGlyphs), "");
     static_assert (((unsigned int) HB_OT_LAYOUT_GLYPH_PROPS_LIGATURE == (unsigned int) LookupFlag::IgnoreLigatures), "");
     static_assert (((unsigned int) HB_OT_LAYOUT_GLYPH_PROPS_MARK == (unsigned int) LookupFlag::IgnoreMarks), "");
 
     switch (klass) {
     default:			return HB_OT_LAYOUT_GLYPH_CLASS_UNCLASSIFIED;
     case BaseGlyph:		return HB_OT_LAYOUT_GLYPH_PROPS_BASE_GLYPH;
     case LigatureGlyph:		return HB_OT_LAYOUT_GLYPH_PROPS_LIGATURE;
     case MarkGlyph:
 	  klass = get_mark_attachment_type (glyph);
 	  return HB_OT_LAYOUT_GLYPH_PROPS_MARK | (klass << 8);
     }
   }
 
   HB_INTERNAL bool is_blocklisted (hb_blob_t *blob,
 				   hb_face_t *face) const;
 
   struct accelerator_t
   {
     accelerator_t (hb_face_t *face)
     {
       table = hb_sanitize_context_t ().reference_table<GDEF> (face);
       if (unlikely (table->is_blocklisted (table.get_blob (), face)))
       {
 	hb_blob_destroy (table.get_blob ());
 	table = hb_blob_get_empty ();
       }
     }
     ~accelerator_t () { table.destroy (); }
 
     unsigned int get_glyph_props (hb_codepoint_t glyph) const
     {
       unsigned v;
       if (glyph_props_cache.get (glyph, &v))
         return v;
 
       v = table->get_glyph_props (glyph);
-      if (likely (table)) // Don't try setting if we are the null instance!
+      if (likely (table.get_blob ())) // Don't try setting if we are the null instance!
 	glyph_props_cache.set (glyph, v);
 
       return v;
     }
 
     hb_blob_ptr_t<GDEF> table;
     mutable hb_cache_t<21, 3, 8> glyph_props_cache;
   };
 
   void collect_variation_indices (hb_collect_variation_indices_context_t *c) const
   { get_lig_caret_list ().collect_variation_indices (c); }
 
   void remap_layout_variation_indices (const hb_set_t *layout_variation_indices,
 				       hb_hashmap_t<unsigned, hb_pair_t<unsigned, int>> *layout_variation_idx_delta_map /* OUT */) const
   {
     if (!has_var_store ()) return;
     if (layout_variation_indices->is_empty ()) return;
 
     unsigned new_major = 0, new_minor = 0;
     unsigned last_major = (layout_variation_indices->get_min ()) >> 16;
     for (unsigned idx : layout_variation_indices->iter ())
     {
       uint16_t major = idx >> 16;
       if (major >= get_var_store ().get_sub_table_count ()) break;
       if (major != last_major)
       {
 	new_minor = 0;
 	++new_major;
       }
 
       unsigned new_idx = (new_major << 16) + new_minor;
       if (!layout_variation_idx_delta_map->has (idx))
         continue;
       int delta = hb_second (layout_variation_idx_delta_map->get (idx));
 
       layout_variation_idx_delta_map->set (idx, hb_pair_t<unsigned, int> (new_idx, delta));
       ++new_minor;
       last_major = major;
     }
   }
 
   protected:
   union {
   FixedVersion<>		version;	/* Version identifier */
   GDEFVersion1_2<SmallTypes>	version1;
 #ifndef HB_NO_BEYOND_64K
   GDEFVersion1_2<MediumTypes>	version2;
 #endif
   } u;
   public:
   DEFINE_SIZE_MIN (4);
 };
