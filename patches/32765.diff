commit 411e27776f5c0ec8359508f0e2cabb1538375e53
Author: Mike Klein <mtklein@google.com>
Date:   Thu Apr 1 09:04:51 2021 -0500

    fix fuzzer bug
    
    I mistakenly rewrote read_mft_common() to trust input_channels before
    testing it's in safe range.  This CL restores the original order.
    
    out/clang.xsan/fuzz_iccprofile_atf and the new test case repro'd this.
    
    It looks like this might fix attached both issues, but I haven't looked
    as hard at 32767 or repro'd it with MSAN.
    
    Bug: oss-fuzz:32765, oss-fuzz:32767
    Change-Id: I6f546ec304e6fe6fcf7f60872161e5ad9ca10e43
    Reviewed-on: https://skia-review.googlesource.com/c/skcms/+/391797
    Commit-Queue: Brian Osman <brianosman@google.com>
    Auto-Submit: Mike Klein <mtklein@google.com>
    Reviewed-by: Brian Osman <brianosman@google.com>

diff --git a/profiles/fuzz/a2b_too_many_input_channels2.icc b/profiles/fuzz/a2b_too_many_input_channels2.icc
new file mode 100644
index 0000000..9b8a2ce
Binary files /dev/null and b/profiles/fuzz/a2b_too_many_input_channels2.icc differ
diff --git a/profiles/fuzz/a2b_too_many_input_channels2.icc.txt b/profiles/fuzz/a2b_too_many_input_channels2.icc.txt
new file mode 100644
index 0000000..979baac
--- /dev/null
+++ b/profiles/fuzz/a2b_too_many_input_channels2.icc.txt
@@ -0,0 +1 @@
+Unable to parse ICC profile
diff --git a/skcms.cc b/skcms.cc
index aabe489..710f598 100644
--- a/skcms.cc
+++ b/skcms.cc
@@ -603,56 +603,54 @@ typedef struct {
 static bool read_mft_common(const mft_CommonLayout* mftTag, skcms_A2B* a2b) {
     // MFT matrices are applied before the first set of curves, but must be identity unless the
     // input is PCSXYZ. We don't support PCSXYZ profiles, so we ignore this matrix. Note that the
     // matrix in skcms_A2B is applied later in the pipe, so supporting this would require another
     // field/flag.
     a2b->matrix_channels = 0;
-
     a2b-> input_channels = mftTag-> input_channels[0];
     a2b->output_channels = mftTag->output_channels[0];
 
-    for (uint32_t i = 0; i < a2b->input_channels; ++i) {
-        a2b->grid_points[i] = mftTag->grid_points[0];
-    }
-    // The grid only makes sense with at least two points along each axis
-    if (a2b->grid_points[0] < 2) {
-        return false;
-    }
-
     // We require exactly three (ie XYZ/Lab/RGB) output channels
     if (a2b->output_channels != ARRAY_COUNT(a2b->output_curves)) {
         return false;
     }
     // We require at least one, and no more than four (ie CMYK) input channels
     if (a2b->input_channels < 1 || a2b->input_channels > ARRAY_COUNT(a2b->input_curves)) {
         return false;
     }
 
+    for (uint32_t i = 0; i < a2b->input_channels; ++i) {
+        a2b->grid_points[i] = mftTag->grid_points[0];
+    }
+    // The grid only makes sense with at least two points along each axis
+    if (a2b->grid_points[0] < 2) {
+        return false;
+    }
     return true;
 }
 
 // All as the A2B version above, except where noted.
 static bool read_mft_common(const mft_CommonLayout* mftTag, skcms_B2A* b2a) {
-    // All the same as A2B until the next comment...
+    // Same as A2B.
     b2a->matrix_channels = 0;
-
     b2a-> input_channels = mftTag-> input_channels[0];
     b2a->output_channels = mftTag->output_channels[0];
 
-    for (uint32_t i = 0; i < b2a->input_channels; ++i) {
-        b2a->grid_points[i] = mftTag->grid_points[0];
-    }
-    if (b2a->grid_points[0] < 2) {
-        return false;
-    }
 
-    // ...for B2A, exactly 3 *input* channels and 1-4 *output* channels.
+    // For B2A, exactly 3 *input* channels and 1-4 *output* channels.
     if (b2a->input_channels != ARRAY_COUNT(b2a->input_curves)) {
         return false;
     }
     if (b2a->output_channels < 1 || b2a->output_channels > ARRAY_COUNT(b2a->output_curves)) {
         return false;
     }
 
+    // Same as A2B.
+    for (uint32_t i = 0; i < b2a->input_channels; ++i) {
+        b2a->grid_points[i] = mftTag->grid_points[0];
+    }
+    if (b2a->grid_points[0] < 2) {
+        return false;
+    }
     return true;
 }
 
diff --git a/tests.c b/tests.c
index 76fde3d..401777c 100644
--- a/tests.c
+++ b/tests.c
@@ -554,157 +554,158 @@ static void test_FormatConversions_float() {
 static const char* profile_test_cases[] = {
     // iccMAX profiles that we can't parse at all
     "profiles/color.org/sRGB_D65_colorimetric.icc",
     "profiles/color.org/sRGB_D65_MAT.icc",
     "profiles/color.org/sRGB_ISO22028.icc",
 
     // V2 or V4 profiles that only include A2B/B2A tags (no TRC or XYZ)
     "profiles/color.org/sRGB_ICC_v4_Appearance.icc",
     "profiles/color.org/sRGB_v4_ICC_preference.icc",
     "profiles/color.org/Upper_Left.icc",
     "profiles/color.org/Upper_Right.icc",
     "profiles/misc/Apple_Wide_Color.icc",
     "profiles/misc/Coated_FOGRA27_CMYK.icc",
     "profiles/misc/Coated_FOGRA39_CMYK.icc",
     "profiles/misc/ColorLogic_ISO_Coated_CMYK.icc",  // Has kTRC.
     "profiles/misc/Japan_Color_2001_Coated.icc",
     "profiles/misc/Lexmark_X110.icc",
     "profiles/misc/MartiMaria_browsertest_A2B.icc",
     "profiles/misc/PrintOpen_ISO_Coated_CMYK.icc",   // Has kTRC.
     "profiles/misc/sRGB_ICC_v4_beta.icc",
     "profiles/misc/SWOP_Coated_20_GCR_CMYK.icc",
     "profiles/misc/US_Web_Coated_SWOP_CMYK.icc",
     "profiles/misc/XRite_GRACol7_340_CMYK.icc",
 
     // V2 monochrome output profiles that include kTRC but no A2B
     "profiles/misc/Dot_Gain_20_Grayscale.icc",  // kTRC table
     "profiles/misc/Gray_Gamma_22.icc",          // kTRC gamma
 
     // V4 profiles with parametric TRC curves and XYZ
     "profiles/mobile/Display_P3_parametric.icc",
     "profiles/mobile/sRGB_parametric.icc",
     "profiles/mobile/iPhone7p.icc",
     "profiles/misc/sRGB_lcms.icc",
 
     // V4 profiles with LUT TRC curves and XYZ
     "profiles/mobile/Display_P3_LUT.icc",
     "profiles/mobile/sRGB_LUT.icc",
 
     // V2 profiles with gamma TRC and XYZ
     "profiles/color.org/Lower_Left.icc",
     "profiles/color.org/Lower_Right.icc",
     "profiles/misc/AdobeRGB.icc",
     "profiles/misc/AdobeColorSpin.icc",
     "profiles/misc/Color_Spin_Gamma_18.icc",
     "profiles/misc/Generic_RGB_Gamma_18.icc",
 
     // V2 profiles with LUT TRC and XYZ
     "profiles/color.org/sRGB2014.icc",
     "profiles/sRGB_Facebook.icc",
     "profiles/misc/Apple_Color_LCD.icc",
     "profiles/misc/HD_709.icc",
     "profiles/misc/sRGB_black_scaled.icc",
     "profiles/misc/sRGB_HP.icc",
     "profiles/misc/sRGB_HP_2.icc",
 
     // Calibrated monitor profile with identical sRGB-ish tables.
     "profiles/misc/sRGB_Calibrated_Homogeneous.icc",
 
     // Calibrated monitor profile with slightly different sRGB-like tables for each channel.
     "profiles/misc/sRGB_Calibrated_Heterogeneous.icc",
 
     // Calibrated monitor profile with non-monotonic TRC tables. We approximate, but badly.
     "profiles/misc/DisplayCal_ASUS_NonMonotonic.icc",
 
     // Hard test profile. Non-invertible XYZ, three separate tables that fail to approximate
     "profiles/misc/MartiMaria_browsertest_HARD.icc",
 
     // Camera profile with three separate tables that fail to approximate
     "profiles/misc/Phase_One_P25.icc",
 
     // Profile claims to be sRGB, but seems quite different
     "profiles/misc/Kodak_sRGB.icc",
 
     // Bad profiles found inn the wild
     "profiles/misc/ColorGATE_Sihl_PhotoPaper.icc",  // Broken tag table, and A2B0 fails to parse
     "profiles/misc/bad_pcs.icc",                    // PCS is 'RGB '
 
     // Unsure what the bug here is, chromium:875650.
     "profiles/misc/ThinkpadX1YogaV2.icc",
     "profiles/misc/XPS13_9360.icc",
 
     // Calibrated profile where A2B/B2A and XYZ+TRC produce very different gamut mappings.
     // User was (rightly) confused & convinced that profile was being ignored.
     "profiles/misc/Calibrated_A2B_XYZ_Mismatch.icc",  // chromium:1055154
 
     // fuzzer generated profiles that found parsing bugs
 
     // Bad tag table data - these should not parse
     "profiles/fuzz/last_tag_too_small.icc",   // skia:7592
     "profiles/fuzz/named_tag_too_small.icc",  // skia:7592
 
     // Bad tag data - these should not parse
     "profiles/fuzz/curv_size_overflow.icc",           // skia:7593
     "profiles/fuzz/truncated_curv_tag.icc",           // oss-fuzz:6103
     "profiles/fuzz/zero_a.icc",                       // oss-fuzz:????
     "profiles/fuzz/a2b_too_many_input_channels.icc",  // oss-fuzz:6521
+    "profiles/fuzz/a2b_too_many_input_channels2.icc", // oss-fuzz:32765
     "profiles/fuzz/mangled_trc_tags.icc",             // chromium:835666
     "profiles/fuzz/negative_g_para.icc",              // chromium:836634
 
     // Caused skcms_PolyTF fit to round trip indices outside the range of int.
     "profiles/fuzz/infinite_roundtrip.icc",           // oss-fuzz:8101
     "profiles/fuzz/polytf_big_float_to_int_cast.icc", // oss-fuzz:8142
 
     // Caused skcms_ApproximateCurve to violate the a*d+b >= 0 constraint.
     "profiles/fuzz/inverse_tf_adb_negative.icc",      // oss-fuzz:8130
 
     // Caused skcms_PolyTF fit to send P to NaN due to very large inverse lhs
     "profiles/fuzz/polytf_nan_after_update.icc",      // oss-fuzz:8165
 
     // Table is approximated by an inverse TF whose inverse is not invertible.
     "profiles/fuzz/inverse_tf_not_invertible.icc",    // chromium:841210
 
     // Table is approximated by a TF whose inverse has g > 16M (timeout in approx_pow)
     "profiles/fuzz/inverse_tf_huge_g.icc",            // chromium:842374
 
     // mAB has a CLUT with 1 input channel
     "profiles/fuzz/one_d_clut.icc",                   // chromium:874433
 
     // Non-D50 profiles.
     "profiles/misc/SM245B.icc",
     "profiles/misc/BenQ_GL2450.icc",
 
     // This profile is fine, but has really small TRC tables (5 points).
     "profiles/misc/BenQ_RL2455.icc",                 // chromium:869115
 
     // This calibrated profile has a non-zero black.
     "profiles/misc/calibrated_nonzero_black.icc",
 
     // A zero g term causes a divide by zero when inverting.
     "profiles/fuzz/zero_g.icc",                       // oss-fuzz:12430
 
     // Reasonable table, but gets approximated very badly
     "profiles/misc/crbug_976551.icc",                 // chromium:976551
 
     // The a term goes negative when inverting.
     "profiles/fuzz/negative_a_when_inverted.icc",     // oss-fuzz:16581
 
     // a + b is negative when inverting, because d>0
     "profiles/fuzz/negative_a_plus_b.icc",            // oss-fuzz:16584
 
     "profiles/fuzz/nan_s.icc",                        // oss-fuzz:16674
     "profiles/fuzz/inf_a.icc",                        // oss-fuzz:16675
 
     "profiles/fuzz/fit_pq.icc",                       // oss-fuzz:18249
 
     // Reasonable table, bad approximation (converges very slowly)
     "profiles/misc/MR2416GSDF.icc",                   // chromium:869115
 
     // Three different tables w/shoulders, bad approximation (slow convergence)
     "profiles/misc/crbug_1017960_19.icc",             // chromium:1017960
 
     "profiles/fuzz/direct_fit_not_invertible.icc",    // oss-fuzz:19341
     "profiles/fuzz/direct_fit_negative_a.icc",        // oss-fuzz:19467
 
     // g = 1027 -> -nan from exp2f_, sign-strip doesn't work, leading to powf_ assert
     "profiles/fuzz/large_g.icc",                      // chromium:996795
 };
