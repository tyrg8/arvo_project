commit 495fe725e0dfa2f0bf3f588ea154488d9fc0a82c
Author: Martin Mathieson <martin.r.mathieson@googlemail.com>
Date:   Wed Mar 29 09:35:44 2023 +0000

    ORAN FH CUS: add another array index check

diff --git a/epan/dissectors/packet-oran.c b/epan/dissectors/packet-oran.c
index 1733ffcccc..d69aa651a5 100644
--- a/epan/dissectors/packet-oran.c
+++ b/epan/dissectors/packet-oran.c
@@ -603,132 +603,137 @@ typedef struct {
 
 
 /* Work out bundle allocation for ext 11.  Take into account ext6, ext12 or ext13 in this section before ext 11. */
+/* Won't be called with numBundPrb=0 */
 static void ext11_work_out_bundles(guint startPrbc,
                                    guint numPrbc,
                                    guint numBundPrb,             /* number of PRBs pre (full) bundle */
                                    ext11_settings_t *settings)
 {
     /* Allocation configured by ext 6 */
     if (settings->ext6_set) {
         guint bundles_per_entry = settings->ext6_rbg_size / numBundPrb;
 
         guint bundles_set = 0;
         for (guint8 n=0; n < settings->ext6_num_bits_set; n++) {
             /* For each bit set in the mask */
             guint32 prb_start = settings->ext6_bits_set[n] * settings->ext6_rbg_size;
 
             /* For each bundle within identified rbgSize block */
             for (guint m=0; m < bundles_per_entry; m++) {
                 settings->bundles[bundles_set].start = prb_start+(m*numBundPrb);
                 /* Start already beyond end, so doesn't count. */
                 if (settings->bundles[bundles_set].start > (startPrbc+numPrbc)) {
                     break;
                 }
                 settings->bundles[bundles_set].end = prb_start+((m+1)*numBundPrb)-1;
                 if (settings->bundles[bundles_set].end > numPrbc) {
                     /* Extends beyond end, so counts but is an orphan bundle */
                     settings->bundles[bundles_set].end = numPrbc;
                     settings->bundles[bundles_set].is_orphan = TRUE;
                 }
                 bundles_set++;
                 if (bundles_set == MAX_BFW_BUNDLES) {
                     return;
                 }
             }
         }
         settings->num_bundles = bundles_set;
     }
 
-    /* Allocation configured by ext 6 */
+    /* Allocation configured by ext 12 */
     else if (settings->ext12_set) {
         /* First, allocate normally from startPrbc, numPrbc */
         settings->num_bundles = (numPrbc+numBundPrb-1) / numBundPrb;
 
         /* Don't overflow settings->bundles[] ! */
         settings->num_bundles = MIN(MAX_BFW_BUNDLES, settings->num_bundles);
 
         for (guint32 n=0; n < settings->num_bundles; n++) {
             settings->bundles[n].start = startPrbc + n*numBundPrb;
             settings->bundles[n].end =   settings->bundles[n].start + numBundPrb-1;
             /* Does it go beyond the end? */
             if (settings->bundles[n].end > startPrbc+numPrbc) {
                 settings->bundles[n].end = numPrbc+numPrbc;
                 settings->bundles[n].is_orphan = TRUE;
             }
         }
         if (settings->num_bundles == MAX_BFW_BUNDLES) {
             return;
         }
 
         guint prb_offset = startPrbc + numPrbc;
 
         /* Loop over pairs, adding bundles for each */
         for (guint p=0; p < settings->ext12_num_pairs; p++) {
             prb_offset += settings->ext12_pairs[p].off_start_prb;
             guint pair_bundles = (settings->ext12_pairs[p].num_prb+numBundPrb-1) / numBundPrb;
 
             for (guint32 n=0; n < pair_bundles; n++) {
                 guint idx = settings->num_bundles;
 
                 settings->bundles[idx].start = prb_offset + n*numBundPrb;
                 settings->bundles[idx].end =   settings->bundles[idx].start + numBundPrb-1;
                 /* Does it go beyond the end? */
                 if (settings->bundles[idx].end > prb_offset + settings->ext12_pairs[p].num_prb) {
                     settings->bundles[idx].end = prb_offset + settings->ext12_pairs[p].num_prb;
                     settings->bundles[idx].is_orphan = TRUE;
                 }
                 /* Range check / return */
                 settings->num_bundles++;
                 if (settings->num_bundles == MAX_BFW_BUNDLES) {
                     return;
                 }
             }
 
             prb_offset += settings->ext12_pairs[p].num_prb;
         }
     }
 
     /* Allocation configured by ext 13 */
     else if (settings->ext13_set) {
         guint alloc_size = (numPrbc+numBundPrb-1) / numBundPrb;
         settings->num_bundles = alloc_size * settings->ext13_num_start_prbs;
 
         /* Don't overflow settings->bundles[] ! */
         settings->num_bundles = MIN(MAX_BFW_BUNDLES, settings->num_bundles);
 
         for (guint alloc=0; alloc < settings->ext13_num_start_prbs; alloc++) {
             guint alloc_start = alloc * alloc_size;
             for (guint32 n=0; n < alloc_size; n++) {
+                if ((alloc_start+n) >= MAX_BFW_BUNDLES) {
+                    /* ERROR */
+                    return;
+                }
                 settings->bundles[alloc_start+n].start = settings->ext13_start_prbs[alloc] + startPrbc + n*numBundPrb;
                 settings->bundles[alloc_start+n].end =   settings->bundles[alloc_start+n].start + numBundPrb-1;
                 if (settings->bundles[alloc_start+n].end > settings->ext13_start_prbs[alloc] + numPrbc) {
                     settings->bundles[alloc_start+n].end = settings->ext13_start_prbs[alloc] + numPrbc;
                     settings->bundles[alloc_start+n].is_orphan = TRUE;
                 }
             }
         }
     }
 
     /* Bundles not controlled by other extensions - just divide up range into bundles we have */
     else {
         settings->num_bundles = (numPrbc+numBundPrb-1) / numBundPrb;
 
         /* Don't overflow settings->bundles[] ! */
         settings->num_bundles = MIN(MAX_BFW_BUNDLES, settings->num_bundles);
 
         for (guint32 n=0; n < settings->num_bundles; n++) {
             settings->bundles[n].start = startPrbc + n*numBundPrb;
             settings->bundles[n].end =   settings->bundles[n].start + numBundPrb-1;
             /* Does it go beyond the end? */
             if (settings->bundles[n].end > startPrbc+numPrbc) {
                 settings->bundles[n].end = numPrbc+numPrbc;
                 settings->bundles[n].is_orphan = TRUE;
             }
         }
     }
 }
 
 
 
 /*******************************************************/
 /* Overall state of a flow (eAxC)                      */
