commit 6f75899f1f90fa87e52da0df09ddaa2e5be778f9
Author: David Anderson <davea42@linuxmail.org>
Date:   Mon Jun 26 12:50:39 2023 -0700

    Correction to a sanity test.
    DW202306-011  ossfuzz 60090
    The test was < yet was supposed to be >= .
    The test itself is just a few weeks old.
    Near line 855.
            modified:   src/lib/libdwarf/dwarf_frame2.c

diff --git a/src/lib/libdwarf/dwarf_frame2.c b/src/lib/libdwarf/dwarf_frame2.c
index 867c6ee6..cc5d552e 100644
--- a/src/lib/libdwarf/dwarf_frame2.c
+++ b/src/lib/libdwarf/dwarf_frame2.c
@@ -640,406 +640,405 @@ int
 _dwarf_create_cie_from_after_start(Dwarf_Debug dbg,
     struct cie_fde_prefix_s *prefix,
     Dwarf_Small * section_pointer,
     Dwarf_Small * frame_ptr,
     Dwarf_Small * section_ptr_end,
     Dwarf_Unsigned cie_count,
     int use_gnu_cie_calc,
     Dwarf_Cie * cie_ptr_out,
     Dwarf_Error * error)
 {
     Dwarf_Cie new_cie = 0;
 
     /*  egcs-1.1.2 .eh_frame uses 0 as the distinguishing
         id. sgi uses
         -1 (in .debug_frame). .eh_frame not quite identical to
         .debug_frame */
     /*  We here default the address size as it is not present
         in DWARF2 or DWARF3 cie data, below we set it right if
         it is present. */
     Dwarf_Half address_size = dbg->de_pointer_size;
     Dwarf_Small *augmentation = 0;
     Dwarf_Half segment_size = 0;
     Dwarf_Signed data_alignment_factor = -1;
     Dwarf_Unsigned code_alignment_factor = 4;
     Dwarf_Unsigned return_address_register = 31;
     int local_length_size = 0;
     Dwarf_Unsigned leb128_length = 0;
     Dwarf_Unsigned cie_aug_data_len = 0;
     Dwarf_Small *cie_aug_data = 0;
     Dwarf_Addr gnu_personality_handler_addr = 0;
     unsigned char gnu_personality_handler_encoding = 0;
     unsigned char gnu_lsda_encoding = 0;
     unsigned char gnu_fde_begin_encoding = 0;
     int res = 0;
     Dwarf_Small version = 0;
 
     enum Dwarf_augmentation_type augt = aug_unknown;
 
     /*  This is a CIE, Common Information Entry: See the dwarf spec,
         section 6.4.1 */
     if (frame_ptr >= section_ptr_end) {
         _dwarf_error_string(dbg, error,
             DW_DLE_DEBUG_FRAME_LENGTH_BAD,
             "DW_DLE_DEBUG_FRAME_LENGTH_BAD: reading a cie"
             " version byte we have run off"
             " the end of the section.  Corrupt Dwarf");
         return DW_DLV_ERROR;
     }
     version = *(Dwarf_Small *) frame_ptr;
 
     if ((frame_ptr+2) >= section_ptr_end) {
         _dwarf_error_string(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD,
             "DW_DLE_DEBUG_FRAME_LENGTH_BAD: reading an augmentation"
             " would run off"
             " the end of the section.  Corrupt Dwarf");
         return DW_DLV_ERROR;
     }
     if (version != DW_CIE_VERSION && version != DW_CIE_VERSION3 &&
         version != DW_CIE_VERSION4 && version != DW_CIE_VERSION5) {
         dwarfstring m;
         dwarfstring_constructor(&m);
         dwarfstring_append_printf_u(&m,
             "DW_DLE_FRAME_VERSION_BAD: cie version %u unknown",
             version);
         _dwarf_error_string(dbg, error,
             DW_DLE_FRAME_VERSION_BAD,
             dwarfstring_string(&m));
         dwarfstring_destructor(&m);
         return DW_DLV_ERROR;
     }
     frame_ptr++;
     augmentation = frame_ptr;
     res = _dwarf_check_string_valid(dbg,section_pointer,
         frame_ptr,section_ptr_end,
         DW_DLE_AUGMENTATION_STRING_OFF_END,error);
     if (res != DW_DLV_OK) {
         return res;
     }
     frame_ptr = frame_ptr + strlen((char *) frame_ptr) + 1;
     if (frame_ptr  >= section_ptr_end) {
         _dwarf_error_string(dbg, error,
             DW_DLE_DEBUG_FRAME_LENGTH_BAD,
             "DW_DLE_DEBUG_FRAME_LENGTH_BAD: following any "
             "augmentation field we have run off "
             "the end of the section "
             "with the CIE incomplete.  Corrupt Dwarf");
         return DW_DLV_ERROR;
     }
     augt = _dwarf_get_augmentation_type(dbg,
         augmentation, use_gnu_cie_calc);
     if (augt == aug_eh) {
         if ((frame_ptr+local_length_size)  >= section_ptr_end) {
             _dwarf_error_string(dbg, error,
                 DW_DLE_DEBUG_FRAME_LENGTH_BAD,
                 "DW_DLE_DEBUG_FRAME_LENGTH_BAD: following "
                 "type field we have run off the end of the section "
                 "with the CIE incomplete.  Corrupt Dwarf");
             return DW_DLV_ERROR;
         }
 #if 0
         /* REFERENCED *//* Not used in this instance */
         Dwarf_Unsigned exception_table_addr = 0;
         /* this is per egcs-1.1.2 as on RH 6.0 */
         READ_UNALIGNED_CK(dbg, exception_table_addr,
             Dwarf_Unsigned, frame_ptr, local_length_size,
             error,section_ptr_end);
 #endif
         frame_ptr += local_length_size;
     }
     {
         Dwarf_Unsigned lreg = 0;
         unsigned long size = 0;
 
         if (version == DW_CIE_VERSION4) {
             if ((frame_ptr+2)  >= section_ptr_end) {
                 _dwarf_error_string(dbg, error,
                     DW_DLE_DEBUG_FRAME_LENGTH_BAD,
                     "DW_DLE_DEBUG_FRAME_LENGTH_BAD: "
                     "We would run off the end of the section "
                     "in a DWARF4 cie header.  Corrupt Dwarf");
                 return DW_DLV_ERROR;
             }
             address_size = *((unsigned char *)frame_ptr);
             if (address_size  <  1) {
                 _dwarf_error_string(dbg, error,
                     DW_DLE_ADDRESS_SIZE_ZERO,
                     "DW_DLE_ADDRESS_SIZE_ZERO: bad address size "
                     "for a DWARF4 cie header");
                 return DW_DLV_ERROR;
             }
             if (address_size  > sizeof(Dwarf_Addr)) {
                 _dwarf_create_address_size_dwarf_error(dbg,
                     error,address_size,
                     DW_DLE_ADDRESS_SIZE_ERROR,
                     "DW_DLE_ADDRESS_SIZE_ERROR..:");
                 return DW_DLV_ERROR;
             }
             if ((frame_ptr+2)  >= section_ptr_end) {
                 _dwarf_error_string(dbg, error,
                     DW_DLE_DEBUG_FRAME_LENGTH_BAD,
                     "DW_DLE_DEBUG_FRAME_LENGTH_BAD: "
                     "Running off the end "
                     " of a CIE header. Corrupt DWARF4");
                 return DW_DLV_ERROR;
             }
             ++frame_ptr;
             segment_size = *((unsigned char *)frame_ptr);
             ++frame_ptr;
             if (segment_size  > sizeof(Dwarf_Addr)) {
                 _dwarf_error(dbg, error, DW_DLE_SEGMENT_SIZE_BAD);
                 return DW_DLV_ERROR;
             }
         }
 
         /* Not a great test. But the DECODE* do checking so ok.  */
         if ((frame_ptr+2)  >= section_ptr_end) {
             _dwarf_error_string(dbg, error,
                 DW_DLE_DEBUG_FRAME_LENGTH_BAD,
                 "DW_DLE_DEBUG_FRAME_LENGTH_BAD: Running off the end "
                 " of a CIE header before the code alignment value "
                 "read. Corrupt DWARF");
             return DW_DLV_ERROR;
         }
         DECODE_LEB128_UWORD_CK(frame_ptr, lreg,dbg,error,
             section_ptr_end);
         code_alignment_factor = (Dwarf_Unsigned) lreg;
         res = dwarf_decode_signed_leb128(
             (char *)frame_ptr,
             &leb128_length,&data_alignment_factor,
             (char *)section_ptr_end);
         if (res != DW_DLV_OK) {
             return res;
         }
         frame_ptr = frame_ptr + leb128_length;
         if ((frame_ptr+1)  >= section_ptr_end) {
             _dwarf_error_string(dbg, error,
                 DW_DLE_DEBUG_FRAME_LENGTH_BAD,
                 "DW_DLE_DEBUG_FRAME_LENGTH_BAD: Running off the end "
                 "of a CIE header before the return address register "
                 "number read. Corrupt DWARF");
 
             return DW_DLV_ERROR;
         }
         res = _dwarf_get_return_address_reg(frame_ptr, version,
             dbg,section_ptr_end, &size,
             &return_address_register,error);
         if (res != DW_DLV_OK) {
             return res;
         }
         if (return_address_register >
             dbg->de_frame_reg_rules_entry_count) {
             _dwarf_error(dbg, error, DW_DLE_CIE_RET_ADDR_REG_ERROR);
             return DW_DLV_ERROR;
         }
         frame_ptr += size;
         if ((frame_ptr)  > section_ptr_end) {
             _dwarf_error_string(dbg, error,
                 DW_DLE_DEBUG_FRAME_LENGTH_BAD,
                 "DW_DLE_DEBUG_FRAME_LENGTH_BAD: Past the end "
                 "of a CIE header before reading "
                 "the augmentation string."
                 " Corrupt DWARF");
             return DW_DLV_ERROR;
         }
     }
     switch (augt) {
     case aug_empty_string:
         break;
     case aug_irix_mti_v1:
         break;
     case aug_irix_exception_table:{
         Dwarf_Unsigned lreg = 0;
         Dwarf_Unsigned length_of_augmented_fields;
 
         /* Decode the length of augmented fields. */
         DECODE_LEB128_UWORD_CK(frame_ptr, lreg,
             dbg,error,section_ptr_end);
         length_of_augmented_fields = (Dwarf_Unsigned) lreg;
-        if (length_of_augmented_fields < dbg->de_filesize) {
+        if (length_of_augmented_fields >= dbg->de_filesize) {
             _dwarf_error_string(dbg,error,
                 DW_DLE_DEBUG_FRAME_LENGTH_BAD,
                 "DW_DLE_DEBUG_FRAME_LENGTH_BAD: "
                 "The irix exception table length is too large "
                 "to be real");
             return DW_DLV_ERROR;
         }
         /* set the frame_ptr to point at the instruction start. */
         frame_ptr += length_of_augmented_fields;
         }
         break;
 
     case aug_eh:{
         int err = 0;
         unsigned long increment = 0;
 
         if (!use_gnu_cie_calc) {
             /* This should be impossible. */
             _dwarf_error(dbg, error,
                 DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
             return DW_DLV_ERROR;
         }
 
         err = _dwarf_get_gcc_eh_augmentation(dbg, frame_ptr,
             &increment,
             augt,
             section_ptr_end,
             (char *) augmentation,error);
         if (err == DW_DLV_ERROR) {
             _dwarf_error(dbg, error,
                 DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
             return DW_DLV_ERROR;
         }
         frame_ptr += increment;
         }
         break;
     case aug_gcc_eh_z:{
         /*  Here we have Augmentation Data Length (uleb128) followed
             by Augmentation Data bytes (not a string). */
         int resz = DW_DLV_ERROR;
         Dwarf_Unsigned adlen = 0;
 
         if ((frame_ptr+1)  > section_ptr_end) {
             _dwarf_error_string(dbg, error,
                 DW_DLE_DEBUG_FRAME_LENGTH_BAD,
                 "DW_DLE_AUG_DATA_LENGTH_BAD: The "
                 "gcc .eh_frame augmentation data "
                 "cannot be read. Out of room in the section."
                 " Corrupt DWARF.");
             return DW_DLV_ERROR;
         }
         DECODE_LEB128_UWORD_CK(frame_ptr, adlen,
             dbg,error,section_ptr_end);
         cie_aug_data_len = adlen;
         cie_aug_data = frame_ptr;
         if (adlen) {
             Dwarf_Small *cie_aug_data_end = cie_aug_data+adlen;
             if (cie_aug_data_end < cie_aug_data ||
                 cie_aug_data_end > section_ptr_end) {
                 dwarfstring m;
 
                 dwarfstring_constructor(&m);
                 dwarfstring_append_printf_u(&m,
                     "DW_DLE_AUG_DATA_LENGTH_BAD: The "
                     "gcc .eh_frame augmentation data "
                     "length of %" DW_PR_DUu " is too long to"
                     " fit in the section.",adlen);
                 _dwarf_error_string(dbg, error,
                     DW_DLE_AUG_DATA_LENGTH_BAD,
                     dwarfstring_string(&m));
                 dwarfstring_destructor(&m);
                 return DW_DLV_ERROR;
             }
         }
         resz = _dwarf_gnu_aug_encodings(dbg,
             (char *) augmentation,
             cie_aug_data,
             cie_aug_data_len,
             address_size,
             &gnu_personality_handler_encoding,
             &gnu_lsda_encoding,
             &gnu_fde_begin_encoding,
             &gnu_personality_handler_addr,
             error);
         if (resz != DW_DLV_OK) {
             _dwarf_error_string(dbg, error,
                 DW_DLE_FRAME_AUGMENTATION_UNKNOWN,
                 "DW_DLE_FRAME_AUGMENTATION_UNKNOWN "
                 " Reading gnu aug encodings failed");
             return resz;
         }
         frame_ptr += adlen;
         }
         break;
     case aug_armcc:
         break;
     default:{
         /*  We do not understand the augmentation string. No
             assumption can be made about any fields other than what
             we have already read. */
         frame_ptr = prefix->cf_start_addr +
             prefix->cf_length + prefix->cf_local_length_size
             + prefix->cf_local_extension_size;
         /*  FIX -- What are the values of data_alignment_factor,
             code_alignment_factor, return_address_register and
             instruction start? They were clearly uninitialized in the
             previous version and I am leaving them the same way. */
         }
         if ((frame_ptr)  > section_ptr_end) {
             _dwarf_error_string(dbg, error,
                 DW_DLE_DEBUG_FRAME_LENGTH_BAD,
                 "DW_DLE_DEBUG_FRAME_LENGTH_BAD: "
                 "Reading an unknown type of augmentation string "
                 "run off the end of the section. Corrupt DWARF.");
             return DW_DLV_ERROR;
         }
         break;
     }   /* End switch on augmentation type. */
 
     new_cie = (Dwarf_Cie) _dwarf_get_alloc(dbg, DW_DLA_CIE, 1);
     if (new_cie == NULL) {
         _dwarf_error_string(dbg, error, 
             DW_DLE_ALLOC_FAIL,
             "DW_DLE_ALLOC_FAIL "
             "attempting to allocate a Dwarf_Cie");
         return DW_DLV_ERROR;
     }
 
     new_cie->ci_cie_version_number = version;
     new_cie->ci_initial_table = NULL;
     new_cie->ci_length = (Dwarf_Unsigned) prefix->cf_length;
     new_cie->ci_length_size =
         (Dwarf_Small)prefix->cf_local_length_size;
     new_cie->ci_extension_size =
         (Dwarf_Small)prefix->cf_local_extension_size;
     new_cie->ci_augmentation = (char *) augmentation;
 
     new_cie->ci_data_alignment_factor =
         (Dwarf_Sbyte) data_alignment_factor;
     new_cie->ci_code_alignment_factor =
         (Dwarf_Small) code_alignment_factor;
     new_cie->ci_return_address_register = return_address_register;
     new_cie->ci_cie_start = prefix->cf_start_addr;
 
     if ( frame_ptr > section_ptr_end) {
         _dwarf_error(dbg, error, DW_DLE_DF_FRAME_DECODING_ERROR);
         return DW_DLV_ERROR;
     }
     new_cie->ci_cie_instr_start = frame_ptr;
-
     new_cie->ci_dbg = dbg;
     new_cie->ci_augmentation_type = augt;
     new_cie->ci_gnu_eh_augmentation_len = cie_aug_data_len;
     new_cie->ci_gnu_eh_augmentation_bytes = cie_aug_data;
     new_cie->ci_gnu_personality_handler_encoding =
         gnu_personality_handler_encoding;
     new_cie->ci_gnu_personality_handler_addr =
         gnu_personality_handler_addr;
     new_cie->ci_gnu_lsda_encoding = gnu_lsda_encoding;
     new_cie->ci_gnu_fde_begin_encoding = gnu_fde_begin_encoding;
 
     new_cie->ci_index = cie_count;
     new_cie->ci_section_ptr = prefix->cf_section_ptr;
     new_cie->ci_section_end = section_ptr_end;
     new_cie->ci_cie_end = new_cie->ci_cie_start + new_cie->ci_length +
         new_cie->ci_length_size+ new_cie->ci_extension_size;
     if ( new_cie->ci_cie_end > section_ptr_end) {
         dwarf_dealloc(dbg,new_cie,DW_DLA_CIE);
         _dwarf_error(dbg, error, DW_DLE_DF_FRAME_DECODING_ERROR);
         return DW_DLV_ERROR;
     }
 
     /* The Following new in DWARF4 */
     new_cie->ci_address_size = address_size;
     new_cie->ci_segment_size = segment_size;
     validate_length(dbg,new_cie,new_cie->ci_length,
         new_cie->ci_length_size, new_cie->ci_extension_size,
         new_cie->ci_section_ptr,
         new_cie->ci_cie_start,"cie");
     *cie_ptr_out = new_cie;
     return DW_DLV_OK;
 }
 
 /*  Internal function, not called by consumer code.
     'prefix' has accumulated the info up thru the cie-id
     and now we consume the rest and build a Dwarf_Fde_s structure.
     Can be called with cie_ptr_in NULL from dwarf_frame.c  */
