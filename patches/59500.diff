commit 56a9eef4c66808608ae01bee70e1a4954c34b1d9
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Tue Jun 6 13:48:01 2023 +0200

    Handle underflow of bmp palette size.
    
    This fixes OSS-fuzz issue 59500.

diff --git a/source/fitz/load-bmp.c b/source/fitz/load-bmp.c
index db173ce0a..7a37ebc40 100644
--- a/source/fitz/load-bmp.c
+++ b/source/fitz/load-bmp.c
@@ -932,26 +932,29 @@ static const unsigned char *
 bmp_read_palette(fz_context *ctx, struct info *info, const unsigned char *begin, const unsigned char *end, const unsigned char *p)
 {
 	int i, expected, present, entry_size;
-	const unsigned char *bitmap;
 
 	entry_size = palette_entry_size(info);
-	bitmap = begin + info->bitmapoffset;
 
-	expected = fz_mini(info->colors, 1 << info->bitcount);
-	if (expected == 0)
-		expected = 1 << info->bitcount;
-	present = fz_mini(expected, (bitmap - p) / entry_size);
+	if (info->colors == 0)
+		expected = info->colors = 1 << info->bitcount;
+	else
+		expected = fz_mini(info->colors, 1 << info->bitcount);
+
+	if (info->bitmapoffset == 0)
+		present = fz_mini(expected, (end - p) / entry_size);
+	else
+		present = fz_mini(expected, (begin + info->bitmapoffset - p) / entry_size);
 
 	for (i = 0; i < present; i++)
 	{
 		/* ignore alpha channel even if present */
 		info->palette[3 * i + 0] = read8(p + i * entry_size + 2);
 		info->palette[3 * i + 1] = read8(p + i * entry_size + 1);
 		info->palette[3 * i + 2] = read8(p + i * entry_size + 0);
 	}
 
 	if (present < expected)
 		bmp_load_default_palette(ctx, info, present);
 
 	return p + present * entry_size;
 }
@@ -1091,113 +1094,115 @@ static fz_pixmap *
 bmp_read_image(fz_context *ctx, struct info *info, const unsigned char *begin, const unsigned char *end, const unsigned char *p, int only_metadata)
 {
 	const unsigned char *profilebegin;
 
 	memset(info, 0x00, sizeof (*info));
 	info->colorspacetype = 0xffffffff;
 
 	p = profilebegin = bmp_read_file_header(ctx, info, begin, end, p);
 
 	p = bmp_read_info_header(ctx, info, begin, end, p);
 
 	/* clamp bitmap offset to buffer size */
+	if (info->bitmapoffset < (uint32_t)(p - begin))
+		info->bitmapoffset = 0;
 	if ((uint32_t)(end - begin) < info->bitmapoffset)
 		info->bitmapoffset = end - begin;
 
 	if (has_palette(info))
 		p = bmp_read_palette(ctx, info, begin, end, p);
 
 	if (has_color_masks(info))
 		p = bmp_read_color_masks(ctx, info, begin, end, p);
 
 	info->xres = DPM_TO_DPI(info->xres);
 	info->yres = DPM_TO_DPI(info->yres);
 
 	/* extract topdown/bottomup from height for windows bitmaps */
 	if (is_win_bmp(info))
 	{
 		int bits = info->version == 12 ? 16 : 32;
 
 		info->topdown = (info->height >> (bits - 1)) & 1;
 		if (info->topdown)
 		{
 			info->height--;
 			info->height = ~info->height;
 			info->height &= bits == 16 ? 0xffff : 0xffffffff;
 		}
 	}
 
 	/* GIMP incorrectly writes BMP v5 headers that omit color masks
 	but include colorspace information. This means they look like
 	BMP v4 headers and that we interpret the colorspace information
 	partially as color mask data, partially as colorspace information.
 	Let's work around this... */
 	if (info->version == 108 &&
 			info->rmask == 0x73524742 && /* colorspacetype */
 			info->gmask == 0x00000000 && /* endpoints[0] */
 			info->bmask == 0x00000000 && /* endpoints[1] */
 			info->amask == 0x00000000 && /* endpoints[2] */
 			info->colorspacetype == 0x00000000 && /* endpoints[3] */
 			info->endpoints[0] == 0x00000000 && /* endpoints[4] */
 			info->endpoints[1] == 0x00000000 && /* endpoints[5] */
 			info->endpoints[2] == 0x00000000 && /* endpoints[6] */
 			info->endpoints[3] == 0x00000000 && /* endpoints[7] */
 			info->endpoints[4] == 0x00000000 && /* endpoints[8] */
 			info->endpoints[5] == 0x00000000 && /* gamma[0] */
 			info->endpoints[6] == 0x00000000 && /* gamma[1] */
 			info->endpoints[7] == 0x00000000 && /* gamma[2] */
 			info->endpoints[8] == 0x00000002) /* intent */
 	{
 		info->rmask = 0;
 		info->colorspacetype = 0x73524742;
 		info->intent = 0x00000002;
 	}
 
 	/* get number of bits per component and component shift */
 	compute_mask_info(info->rmask, &info->rshift, &info->rbits);
 	compute_mask_info(info->gmask, &info->gshift, &info->gbits);
 	compute_mask_info(info->bmask, &info->bshift, &info->bbits);
 	compute_mask_info(info->amask, &info->ashift, &info->abits);
 
 	if (info->width == 0 || info->width > SHRT_MAX || info->height == 0 || info->height > SHRT_MAX)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "image dimensions (%u x %u) out of range in bmp image", info->width, info->height);
 	if (!is_valid_compression(info))
 		fz_throw(ctx, FZ_ERROR_GENERIC, "unsupported compression method (%u) in bmp image", info->compression);
 	if (!is_valid_bitcount(info))
 		fz_throw(ctx, FZ_ERROR_GENERIC, "invalid bits per pixel (%u) for compression (%u) in bmp image", info->bitcount, info->compression);
 	if (info->rbits > info->bitcount)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "unsupported %u bit red mask in bmp image", info->rbits);
 	if (info->gbits > info->bitcount)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "unsupported %u bit green mask in bmp image", info->gbits);
 	if (info->bbits > info->bitcount)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "unsupported %u bit blue mask in bmp image", info->bbits);
 	if (info->abits > info->bitcount)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "unsupported %u bit alpha mask in bmp image", info->abits);
 
 	/* Read color profile or default to RGB */
 	if (has_color_profile(info))
 		info->cs = bmp_read_color_profile(ctx, info, profilebegin, end);
 	if (!info->cs)
 		info->cs = fz_keep_colorspace(ctx, fz_device_rgb(ctx));
 
 	if (only_metadata)
 		return NULL;
 
 	/* bitmap cannot begin before headers have ended */
 	if ((uint32_t)(p - begin) < info->bitmapoffset)
 		p = begin + info->bitmapoffset;
 
 	if (is_win_bmp(info) && info->compression == BI_JPEG)
 	{
 		if ((uint32_t)(end - p) < info->bitmapsize)
 			fz_warn(ctx, "premature end in jpeg image embedded in bmp image");
 		return fz_load_jpeg(ctx, p, end - p);
 	}
 	else if (is_win_bmp(info) && info->compression == BI_PNG)
 	{
 		if ((uint32_t)(end - p) < info->bitmapsize)
 			fz_warn(ctx, "premature end in png image embedded in bmp image");
 		return fz_load_png(ctx, p, end - p);
 	}
 	else
 		return bmp_read_bitmap(ctx, info, begin, end, p);
 }
