commit 311413f16b92a8d5811897b5793ca8a9f218b779
Author: Garret Rieger <grieger@google.com>
Date:   Sat Jun 11 01:05:57 2022 +0000

    [subset] Fix fuzzer issue.
    
    Fixes https://oss-fuzz.com/testcase-detail/5693568490012672. new_index should be set from new_index2 when the entry is present in the map.

diff --git a/src/hb-ot-post-table-v2subset.hh b/src/hb-ot-post-table-v2subset.hh
index c8a4429eb..9d651cca8 100644
--- a/src/hb-ot-post-table-v2subset.hh
+++ b/src/hb-ot-post-table-v2subset.hh
@@ -39,30 +39,30 @@ template<typename Iterator>
 HB_INTERNAL bool postV2Tail::serialize (hb_serialize_context_t *c,
                                         Iterator it,
                                         const void* _post) const
 {
   TRACE_SERIALIZE (this);
   auto *out = c->start_embed (this);
   if (unlikely (!c->check_success (out))) return_trace (false);
   if (!out->glyphNameIndex.serialize (c, + it
                                          | hb_map (hb_second)))
       return_trace (false);
 
   hb_set_t copied_indices;
   for (const auto& _ : + it )
   {
     unsigned glyph_id = _.first;
     unsigned new_index = _.second;
-    
+
     if (new_index < 258) continue;
     if (copied_indices.has (new_index)) continue;
     copied_indices.add (new_index);
-    
+
     hb_bytes_t s = reinterpret_cast<const post::accelerator_t*> (_post)->find_glyph_name (glyph_id);
     HBUINT8 *o = c->allocate_size<HBUINT8> (HBUINT8::static_size * (s.length + 1));
     if (unlikely (!o)) return_trace (false);
     if (!c->check_assign (o[0], s.length, HB_SERIALIZE_ERROR_INT_OVERFLOW)) return_trace (false);
     memcpy (o+1, s.arrayZ, HBUINT8::static_size * s.length);
   }
 
   return_trace (true);
 }
@@ -70,66 +70,67 @@ HB_INTERNAL bool postV2Tail::serialize (hb_serialize_context_t *c,
 HB_INTERNAL bool postV2Tail::subset (hb_subset_context_t *c) const
 {
   TRACE_SUBSET (this);
 
   const hb_map_t &reverse_glyph_map = *c->plan->reverse_glyph_map;
   unsigned num_glyphs = c->plan->num_output_glyphs ();
   hb_map_t old_new_index_map, old_gid_new_index_map;
   unsigned i = 0;
 
   post::accelerator_t _post (c->plan->source);
 
   hb_hashmap_t<hb_bytes_t, unsigned, true> glyph_name_to_new_index;
   for (hb_codepoint_t new_gid = 0; new_gid < num_glyphs; new_gid++)
   {
     hb_codepoint_t old_gid = reverse_glyph_map.get (new_gid);
     unsigned old_index = glyphNameIndex[old_gid];
 
     unsigned new_index;
     const unsigned *new_index2;
     if (old_index <= 257) new_index = old_index;
-    else if (!old_new_index_map.has (old_index, &new_index2))
+    else if (old_new_index_map.has (old_index, &new_index2))
     {
       new_index = *new_index2;
+    } else {
       hb_bytes_t s = _post.find_glyph_name (old_gid);
       new_index = glyph_name_to_new_index.get (s);
       if (new_index == (unsigned)-1)
       {
         int standard_glyph_index = -1;
         for (unsigned i = 0; i < format1_names_length; i++)
         {
           if (s == format1_names (i))
           {
             standard_glyph_index = i;
             break;
           }
         }
 
         if (standard_glyph_index == -1)
         {
           new_index = 258 + i;
           i++;
         }
         else
         { new_index = standard_glyph_index; }
         glyph_name_to_new_index.set (s, new_index);
       }
       old_new_index_map.set (old_index, new_index);
     }
     old_gid_new_index_map.set (old_gid, new_index);
   }
 
   auto index_iter =
   + hb_range (num_glyphs)
   | hb_map (reverse_glyph_map)
   | hb_map_retains_sorting ([&](hb_codepoint_t old_gid)
                             {
                               unsigned new_index = old_gid_new_index_map.get (old_gid);
                               return hb_pair_t<unsigned, unsigned> (old_gid, new_index);
                             })
   ;
 
   return_trace (serialize (c->serializer, index_iter, &_post));
 }
 
 } /* namespace OT */
 #endif /* HB_OT_POST_TABLE_V2SUBSET_HH */
diff --git a/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5693568490012672 b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5693568490012672
new file mode 100644
index 000000000..19521a101
Binary files /dev/null and b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5693568490012672 differ
