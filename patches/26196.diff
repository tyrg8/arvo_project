commit 1b78cad9f787903486ea511b85e5c5efe4a7e729
Author: seladb <pcapplusplus@gmail.com>
Date:   Thu Oct 22 23:45:53 2020 -0700

    Move non-platform-specific parts of IpUtils to PacketUtils and move the rest under namespace internal

diff --git a/Common++/header/IpUtils.h b/Common++/header/IpUtils.h
index 18f6f7a3..1e021fcb 100644
--- a/Common++/header/IpUtils.h
+++ b/Common++/header/IpUtils.h
@@ -1,33 +1,32 @@
 #ifndef PCAPPP_IP_UTILS
 #define PCAPPP_IP_UTILS
 
 #include <stdint.h>
 #ifdef LINUX
 #include <in.h>
 #include <arpa/inet.h>
 #endif
 #ifdef MAC_OS_X
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #endif
 #if defined(WIN32) || defined(WINx64) || defined(PCAPPP_MINGW_ENV)
-#include <winsock2.h>
 #include <ws2tcpip.h>
 #endif
 #ifdef FREEBSD
 #include <sys/socket.h>
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #endif
 
 /// @file
 
 #if defined(WIN32) && !defined(_MSC_VER)
 /**
  * Convert a network format address to presentation format.
  * @param[in] af Address family, can be either AF_INET (IPv4) or AF_INET6 (IPv6)
  * @param[in] src Network address structure, can be either in_addr (IPv4) or in6_addr (IPv6)
  * @param[out] dst Network address string representation
  * @param[in] size 'dst' Maximum size
  * @return pointer to presentation format address ('dst'), or NULL (see errno).
  */
@@ -51,79 +50,38 @@ int inet_pton(int af, const char* src, void* dst);
 /**
  * \namespace pcpp
  * \brief The main namespace for the PcapPlusPlus lib
  */
 namespace pcpp
 {
-
-	/**
-	 * Extract IPv4 address from sockaddr
-	 * @param[in] sa - input sockaddr
-	 * @return Address in in_addr format
-	 */
-	in_addr* sockaddr2in_addr(struct sockaddr *sa);
-
-	/**
-	 * Extract IPv6 address from sockaddr
-	 * @param[in] sa - input sockaddr
-	 * @return Address in in6_addr format
-	 */
-	in6_addr* sockaddr2in6_addr(struct sockaddr *sa);
-
-	/**
-	 * Converts a sockaddr format address to its string representation
-	 * @param[in] sa Address in sockaddr format
-	 * @param[out]  resultString String representation of the address
-	 */
-	void sockaddr2string(struct sockaddr *sa, char* resultString);
-
-	/**
-	 * Convert a in_addr format address to 32bit representation
-	 * @param[in] inAddr Address in in_addr format
-	 * @return Address in 32bit format
-	 */
-	uint32_t in_addr2int(in_addr inAddr);
-
-	/**
-	 * A struct that represent a single buffer
-	 */
-	template<typename T>
-	struct ScalarBuffer
+	namespace internal
 	{
 		/**
-		 * The pointer to the buffer
+		 * Extract IPv4 address from sockaddr
+		 * @param[in] sa - input sockaddr
+		 * @return Address in in_addr format
 		 */
-		T* buffer;
+		in_addr* sockaddr2in_addr(struct sockaddr *sa);
 
 		/**
-		 * Buffer length
+		 * Extract IPv6 address from sockaddr
+		 * @param[in] sa - input sockaddr
+		 * @return Address in in6_addr format
 		 */
-		size_t len;
-	};
-
-	/**
-	 * Computes the checksum for a vector of buffers
-	 * @param[in] vec The vector of buffers
-	 * @param[in] vecSize Number of ScalarBuffers in vector
-	 * @return The checksum result
-	 */
-	uint16_t compute_checksum(ScalarBuffer<uint16_t> vec[], size_t vecSize);
+		in6_addr* sockaddr2in6_addr(struct sockaddr *sa);
 
-	/**
-	 * Computes Fowler-Noll-Vo (FNV-1) 32bit hash function on an array of byte buffers. The hash is calculated on each
-	 * byte in each byte buffer, as if all byte buffers were one long byte buffer
-	 * @param[in] vec An array of byte buffers (ScalarBuffer of type uint8_t)
-	 * @param[in] vecSize The length of vec
-	 * @return The 32bit hash value
-	 */
-	uint32_t fnv_hash(ScalarBuffer<uint8_t> vec[], size_t vecSize);
-
-	/**
-	 * Computes Fowler-Noll-Vo (FNV-1) 32bit hash function on a byte buffer
-	 * @param[in] buffer The byte buffer
-	 * @param[in] bufSize The size of the byte buffer
-	 * @return The 32bit hash value
-	 */
-	uint32_t fnv_hash(uint8_t* buffer, size_t bufSize);
+		/**
+		 * Converts a sockaddr format address to its string representation
+		 * @param[in] sa Address in sockaddr format
+		 * @param[out]  resultString String representation of the address
+		 */
+		void sockaddr2string(struct sockaddr *sa, char* resultString);
 
+		/**
+		 * Convert a in_addr format address to 32bit representation
+		 * @param[in] inAddr Address in in_addr format
+		 * @return Address in 32bit format
+		 */
+		uint32_t in_addr2int(in_addr inAddr);
+	} // namespace internal
 } // namespace pcpp
 #endif
diff --git a/Common++/src/IpUtils.cpp b/Common++/src/IpUtils.cpp
index e380b816..89a5ee3b 100644
--- a/Common++/src/IpUtils.cpp
+++ b/Common++/src/IpUtils.cpp
@@ -16,130 +16,61 @@
 
 namespace pcpp
 {
-
-in_addr* sockaddr2in_addr(struct sockaddr* sa)
-{
-	if (sa == NULL)
-		return NULL;
-	if (sa->sa_family == AF_INET)
-		return &(((struct sockaddr_in*)sa)->sin_addr);
-	LOG_DEBUG("sockaddr family is not AF_INET. Returning NULL");
-	return NULL;
-}
-
-in6_addr* sockaddr2in6_addr(struct sockaddr* sa)
-{
-	if (sa->sa_family == AF_INET6)
-		return &(((struct sockaddr_in6*)sa)->sin6_addr);
-	LOG_DEBUG("sockaddr family is not AF_INET6. Returning NULL");
-	return NULL;
-}
-
-void sockaddr2string(struct sockaddr* sa, char* resultString)
-{
-	in_addr* ipv4Addr = sockaddr2in_addr(sa);
-	if (ipv4Addr != NULL)
+	namespace internal
 	{
-		LOG_DEBUG("IPv4 packet address");
-		inet_ntop(AF_INET, &(((sockaddr_in*)sa)->sin_addr), resultString, INET_ADDRSTRLEN);
-	}
-	else
-	{
-		LOG_DEBUG("Not IPv4 packet address. Assuming IPv6 packet");
-		inet_ntop(AF_INET6, &(((sockaddr_in6*)sa)->sin6_addr), resultString, INET6_ADDRSTRLEN);
-	}
-}
-
-uint32_t in_addr2int(in_addr inAddr)
-{
-#ifdef WIN32
-	return inAddr.S_un.S_addr;
-#else
-	return inAddr.s_addr;
-#endif
-}
-
-uint16_t compute_checksum(ScalarBuffer<uint16_t> vec[], size_t vecSize)
-{
-	uint32_t sum = 0;
-	for (size_t i = 0; i<vecSize; i++)
-	{
-		uint32_t local_sum = 0;
-		size_t buff_len = vec[i].len;
-		while (buff_len > 1) {
-			LOG_DEBUG("Value to add = 0x%4X", *(vec[i].buffer));
-			local_sum += *(vec[i].buffer);
-			++(vec[i].buffer);
-			buff_len -= 2;
+		in_addr* sockaddr2in_addr(struct sockaddr* sa)
+		{
+			if (sa == NULL)
+				return NULL;
+			if (sa->sa_family == AF_INET)
+				return &(((struct sockaddr_in*)sa)->sin_addr);
+			LOG_DEBUG("sockaddr family is not AF_INET. Returning NULL");
+			return NULL;
 		}
-		LOG_DEBUG("Local sum = %d, 0x%4X", local_sum, local_sum);
 
-		if (buff_len == 1)
+		in6_addr* sockaddr2in6_addr(struct sockaddr* sa)
 		{
-			uint8_t lastByte = *(vec[i].buffer);
-			LOG_DEBUG("1 byte left, adding value: 0x%4X", lastByte);
-			local_sum += lastByte;
-			LOG_DEBUG("Local sum = %d, 0x%4X", local_sum, local_sum);
+			if (sa->sa_family == AF_INET6)
+				return &(((struct sockaddr_in6*)sa)->sin6_addr);
+			LOG_DEBUG("sockaddr family is not AF_INET6. Returning NULL");
+			return NULL;
 		}
 
-		while (local_sum>>16) {
-			local_sum = (local_sum & 0xffff) + (local_sum >> 16);
+		void sockaddr2string(struct sockaddr* sa, char* resultString)
+		{
+			in_addr* ipv4Addr = sockaddr2in_addr(sa);
+			if (ipv4Addr != NULL)
+			{
+				LOG_DEBUG("IPv4 packet address");
+				inet_ntop(AF_INET, &(((sockaddr_in*)sa)->sin_addr), resultString, INET_ADDRSTRLEN);
+			}
+			else
+			{
+				LOG_DEBUG("Not IPv4 packet address. Assuming IPv6 packet");
+				inet_ntop(AF_INET6, &(((sockaddr_in6*)sa)->sin6_addr), resultString, INET6_ADDRSTRLEN);
+			}
 		}
-		local_sum = ntohs(local_sum);
-		LOG_DEBUG("Local sum = %d, 0x%4X", local_sum, local_sum);
-		sum += local_sum;
-	}
-
-	while (sum>>16) {
-		sum = (sum & 0xffff) + (sum >> 16);
-	}
-
-	LOG_DEBUG("Sum before invert = %d, 0x%4X", sum, sum);
-
-	sum = ~sum;
-
-	LOG_DEBUG("Calculated checksum = %d, 0x%4X", sum, sum);
-
-	return ((uint16_t) sum);
-}
 
-
-static const uint32_t FNV_PRIME = 16777619u;
-static const uint32_t OFFSET_BASIS = 2166136261u;
-
-uint32_t fnv_hash(ScalarBuffer<uint8_t> vec[], size_t vecSize)
-{
-	uint32_t hash = OFFSET_BASIS;
-	for (size_t i = 0; i < vecSize; ++i)
-	{
-		for (size_t j = 0; j < vec[i].len; ++j)
+		uint32_t in_addr2int(in_addr inAddr)
 		{
-			hash *= FNV_PRIME;
-			hash ^= vec[i].buffer[j];
+		#ifdef WIN32
+			return inAddr.S_un.S_addr;
+		#else
+			return inAddr.s_addr;
+		#endif
 		}
-	}
-	return hash;
-}
-
-uint32_t fnv_hash(uint8_t* buffer, size_t bufSize)
-{
-	ScalarBuffer<uint8_t> scalarBuf;
-	scalarBuf.buffer = buffer;
-	scalarBuf.len = bufSize;
-	return fnv_hash(&scalarBuf, 1);
-}
-
+	} // namespace internal
 } // namespace pcpp
 
 #if defined(WIN32) && !defined(_MSC_VER)
 /* const char *
  * inet_ntop4(src, dst, size)
  *	format an IPv4 address
  * return:
  *	`dst' (as a const)
  * notes:
  *	(1) uses no statics
  *	(2) takes a u_char* not an in_addr as input
  * author:
  *	Paul Vixie, 1996.
  */
diff --git a/Examples/PcapSplitter/IPPortSplitters.h b/Examples/PcapSplitter/IPPortSplitters.h
index 0ecea6b1..02e096da 100644
--- a/Examples/PcapSplitter/IPPortSplitters.h
+++ b/Examples/PcapSplitter/IPPortSplitters.h
@@ -1,17 +1,13 @@
 #pragma once
 
 #include "Splitters.h"
-#if !defined(WIN32) && !defined(WINx64) && !defined(PCAPPP_MINGW_ENV)
-// required for including "IpUtils.h". TODO: remove it when fixing IpUtils
-#include <in.h>
-#endif
-#include "IpUtils.h"
+#include "PacketUtils.h"
 #include "SystemUtils.h"
 
 
 /**
  * A virtual abstract class for all splitters that split files by IP address or TCP/UDP port. Inherits from ValueBasedSplitter,
  * so it already contains a mapping of IP/port to file number, a flow table, and supports max number of files or undefined
  * number of files. This class arranges packets by TCP/UDP flows and for each flow lets the inherited classes determine
  * to which file number this flow will be matched
  */
diff --git a/Packet++/header/PacketUtils.h b/Packet++/header/PacketUtils.h
index 4169ee89..80ce920a 100644
--- a/Packet++/header/PacketUtils.h
+++ b/Packet++/header/PacketUtils.h
@@ -8,28 +8,69 @@
 /**
  * \namespace pcpp
  * \brief The main namespace for the PcapPlusPlus lib
  */
 namespace pcpp
 {
+	/**
+	 * A struct that represent a single buffer
+	 */
+	template<typename T>
+	struct ScalarBuffer
+	{
+		/**
+		 * The pointer to the buffer
+		 */
+		T* buffer;
+
+		/**
+		 * Buffer length
+		 */
+		size_t len;
+	};
+
+	/**
+	 * Computes the checksum for a vector of buffers
+	 * @param[in] vec The vector of buffers
+	 * @param[in] vecSize Number of ScalarBuffers in vector
+	 * @return The checksum result
+	 */
+	uint16_t compute_checksum(ScalarBuffer<uint16_t> vec[], size_t vecSize);
+
+	/**
+	 * Computes Fowler-Noll-Vo (FNV-1) 32bit hash function on an array of byte buffers. The hash is calculated on each
+	 * byte in each byte buffer, as if all byte buffers were one long byte buffer
+	 * @param[in] vec An array of byte buffers (ScalarBuffer of type uint8_t)
+	 * @param[in] vecSize The length of vec
+	 * @return The 32bit hash value
+	 */
+	uint32_t fnv_hash(ScalarBuffer<uint8_t> vec[], size_t vecSize);
+
+	/**
+	 * Computes Fowler-Noll-Vo (FNV-1) 32bit hash function on a byte buffer
+	 * @param[in] buffer The byte buffer
+	 * @param[in] bufSize The size of the byte buffer
+	 * @return The 32bit hash value
+	 */
+	uint32_t fnv_hash(uint8_t* buffer, size_t bufSize);
 
 	/**
 	 * A method that is given a packet and calculates a hash value by the packet's 5-tuple. Supports IPv4, IPv6,
 	 * TCP and UDP. For packets which doesn't have 5-tuple (for example: packets which aren't IPv4/6 or aren't
 	 * TCP/UDP) the value of 0 will be returned
 	 * @param[in] packet The packet to calculate hash for
 	 * @param[in] directionUnique Make hash value unique for each direction
 	 * @return The hash value calculated for this packet or 0 if the packet doesn't contain 5-tuple
 	 */
 	uint32_t hash5Tuple(Packet* packet, bool const& directionUnique = false);
 
 	/**
 	 * A method that is given a packet and calculates a hash value by the packet's 2-tuple (IP src + IP dst). Supports
 	 * IPv4 and IPv6. For packets which aren't IPv4/6 the value of 0 will be returned
 	 * @param[in] packet The packet to calculate hash for
 	 * @return The hash value calculated for this packet or 0 if the packet isn't IPv4/6
 	 */
 	uint32_t hash2Tuple(Packet* packet);
 
 } // namespace pcpp
 
 #endif /* PACKETPP_PACKET_UTILS */
diff --git a/Packet++/header/VlanLayer.h b/Packet++/header/VlanLayer.h
index e9009d5e..75a975de 100644
--- a/Packet++/header/VlanLayer.h
+++ b/Packet++/header/VlanLayer.h
@@ -1,15 +1,12 @@
 #ifndef PACKETPP_VLAN_LAYER
 #define PACKETPP_VLAN_LAYER
 
 #include "Layer.h"
 #include "EthLayer.h"
-#if defined(WIN32) || defined(WINx64)
-#include <winsock2.h>
-#endif
 
 /// @file
 
 /**
  * \namespace pcpp
  * \brief The main namespace for the PcapPlusPlus lib
  */
diff --git a/Packet++/src/GreLayer.cpp b/Packet++/src/GreLayer.cpp
index 5dad318c..5fa1fbe8 100644
--- a/Packet++/src/GreLayer.cpp
+++ b/Packet++/src/GreLayer.cpp
@@ -1,17 +1,17 @@
 #define LOG_MODULE PacketLogModuleGreLayer
 
 #include "GreLayer.h"
 #include "EthLayer.h"
 #include "IPv4Layer.h"
 #include "IPv6Layer.h"
 #include "PPPoELayer.h"
 #include "VlanLayer.h"
 #include "MplsLayer.h"
 #include "PayloadLayer.h"
+#include "PacketUtils.h"
 #include "Logger.h"
-#include "IpUtils.h"
 #include "EndianPortable.h"
 
 // ==============
 // GreLayer class
 // ==============
diff --git a/Packet++/src/IPReassembly.cpp b/Packet++/src/IPReassembly.cpp
index 14ed7938..4f8e2b10 100644
--- a/Packet++/src/IPReassembly.cpp
+++ b/Packet++/src/IPReassembly.cpp
@@ -1,9 +1,9 @@
 #define LOG_MODULE PacketLogModuleIPReassembly
 
 #include "IPReassembly.h"
 #include "IPv4Layer.h"
 #include "IPv6Layer.h"
-#include "IpUtils.h"
+#include "PacketUtils.h"
 #include "Logger.h"
 #include <string.h>
 #include "EndianPortable.h"
diff --git a/Packet++/src/IPv4Layer.cpp b/Packet++/src/IPv4Layer.cpp
index 8aa01db8..ca7407ba 100644
--- a/Packet++/src/IPv4Layer.cpp
+++ b/Packet++/src/IPv4Layer.cpp
@@ -1,16 +1,16 @@
 #define LOG_MODULE PacketLogModuleIPv4Layer
 
 #include "IPv4Layer.h"
 #include "IPv6Layer.h"
 #include "PayloadLayer.h"
 #include "UdpLayer.h"
 #include "TcpLayer.h"
 #include "IcmpLayer.h"
 #include "GreLayer.h"
 #include "IgmpLayer.h"
+#include "PacketUtils.h"
 #include <string.h>
 #include <sstream>
-#include "IpUtils.h"
 #include "Logger.h"
 #include "EndianPortable.h"
 
diff --git a/Packet++/src/IPv6Layer.cpp b/Packet++/src/IPv6Layer.cpp
index 963bc078..e247d590 100644
--- a/Packet++/src/IPv6Layer.cpp
+++ b/Packet++/src/IPv6Layer.cpp
@@ -1,14 +1,14 @@
 #define LOG_MODULE PacketLogModuleIPv6Layer
 
 #include "IPv6Layer.h"
 #include "IPv4Layer.h"
 #include "PayloadLayer.h"
 #include "UdpLayer.h"
 #include "TcpLayer.h"
 #include "GreLayer.h"
 #include "Packet.h"
+#include "PacketUtils.h"
 #include <string.h>
-#include "IpUtils.h"
 #include "EndianPortable.h"
 
 namespace pcpp
diff --git a/Packet++/src/IcmpLayer.cpp b/Packet++/src/IcmpLayer.cpp
index ff95809d..cf5bedbb 100644
--- a/Packet++/src/IcmpLayer.cpp
+++ b/Packet++/src/IcmpLayer.cpp
@@ -1,10 +1,10 @@
 #define LOG_MODULE PacketLogModuleIcmpLayer
 
 #include "IcmpLayer.h"
 #include "PayloadLayer.h"
 #include "Packet.h"
-#include "IpUtils.h"
+#include "PacketUtils.h"
 #include "Logger.h"
 #include <sstream>
 #include <string.h>
 #include "EndianPortable.h"
diff --git a/Packet++/src/IgmpLayer.cpp b/Packet++/src/IgmpLayer.cpp
index 4c90f644..92e6c94c 100644
--- a/Packet++/src/IgmpLayer.cpp
+++ b/Packet++/src/IgmpLayer.cpp
@@ -1,7 +1,7 @@
 #define LOG_MODULE PacketLogModuleIgmpLayer
 
 #include "IgmpLayer.h"
-#include "IpUtils.h"
+#include "PacketUtils.h"
 #include "Logger.h"
 #include <string.h>
 #include "EndianPortable.h"
diff --git a/Packet++/src/PacketUtils.cpp b/Packet++/src/PacketUtils.cpp
index 03355ee8..cb644b3f 100644
--- a/Packet++/src/PacketUtils.cpp
+++ b/Packet++/src/PacketUtils.cpp
@@ -1,15 +1,85 @@
 #include <string.h>
 #include "PacketUtils.h"
-#include "IpUtils.h"
 #include "IPv4Layer.h"
 #include "IPv6Layer.h"
 #include "TcpLayer.h"
 #include "UdpLayer.h"
 #include "IcmpLayer.h"
+#include "Logger.h"
+#include "EndianPortable.h"
 
 namespace pcpp
 {
 
+uint16_t compute_checksum(ScalarBuffer<uint16_t> vec[], size_t vecSize)
+{
+	uint32_t sum = 0;
+	for (size_t i = 0; i<vecSize; i++)
+	{
+		uint32_t local_sum = 0;
+		size_t buff_len = vec[i].len;
+		while (buff_len > 1) {
+			LOG_DEBUG("Value to add = 0x%4X", *(vec[i].buffer));
+			local_sum += *(vec[i].buffer);
+			++(vec[i].buffer);
+			buff_len -= 2;
+		}
+		LOG_DEBUG("Local sum = %d, 0x%4X", local_sum, local_sum);
+
+		if (buff_len == 1)
+		{
+			uint8_t lastByte = *(vec[i].buffer);
+			LOG_DEBUG("1 byte left, adding value: 0x%4X", lastByte);
+			local_sum += lastByte;
+			LOG_DEBUG("Local sum = %d, 0x%4X", local_sum, local_sum);
+		}
+
+		while (local_sum>>16) {
+			local_sum = (local_sum & 0xffff) + (local_sum >> 16);
+		}
+		local_sum = be16toh(local_sum);
+		LOG_DEBUG("Local sum = %d, 0x%4X", local_sum, local_sum);
+		sum += local_sum;
+	}
+
+	while (sum>>16) {
+		sum = (sum & 0xffff) + (sum >> 16);
+	}
+
+	LOG_DEBUG("Sum before invert = %d, 0x%4X", sum, sum);
+
+	sum = ~sum;
+
+	LOG_DEBUG("Calculated checksum = %d, 0x%4X", sum, sum);
+
+	return ((uint16_t) sum);
+}
+
+static const uint32_t FNV_PRIME = 16777619u;
+static const uint32_t OFFSET_BASIS = 2166136261u;
+
+uint32_t fnv_hash(ScalarBuffer<uint8_t> vec[], size_t vecSize)
+{
+	uint32_t hash = OFFSET_BASIS;
+	for (size_t i = 0; i < vecSize; ++i)
+	{
+		for (size_t j = 0; j < vec[i].len; ++j)
+		{
+			hash *= FNV_PRIME;
+			hash ^= vec[i].buffer[j];
+		}
+	}
+	return hash;
+}
+
+uint32_t fnv_hash(uint8_t* buffer, size_t bufSize)
+{
+	ScalarBuffer<uint8_t> scalarBuf;
+	scalarBuf.buffer = buffer;
+	scalarBuf.len = bufSize;
+	return fnv_hash(&scalarBuf, 1);
+}
+
 uint32_t hash5Tuple(Packet* packet, bool const& directionUnique)
 {
 	if (!packet->isPacketOfType(IPv4) && !packet->isPacketOfType(IPv6))
diff --git a/Packet++/src/TcpLayer.cpp b/Packet++/src/TcpLayer.cpp
index 16a189e0..ebbe694f 100644
--- a/Packet++/src/TcpLayer.cpp
+++ b/Packet++/src/TcpLayer.cpp
@@ -1,15 +1,15 @@
 #define LOG_MODULE PacketLogModuleTcpLayer
 
 #include "EndianPortable.h"
 #include "TcpLayer.h"
 #include "IPv4Layer.h"
 #include "IPv6Layer.h"
 #include "PayloadLayer.h"
 #include "HttpLayer.h"
 #include "SSLLayer.h"
 #include "SipLayer.h"
 #include "BgpLayer.h"
-#include "IpUtils.h"
+#include "PacketUtils.h"
 #include "Logger.h"
 #include <string.h>
 #include <sstream>
diff --git a/Packet++/src/UdpLayer.cpp b/Packet++/src/UdpLayer.cpp
index bb8b779b..04e81b6b 100644
--- a/Packet++/src/UdpLayer.cpp
+++ b/Packet++/src/UdpLayer.cpp
@@ -1,17 +1,17 @@
 #define LOG_MODULE PacketLogModuleUdpLayer
 
 #include "EndianPortable.h"
 #include "UdpLayer.h"
-#include "IpUtils.h"
 #include "PayloadLayer.h"
 #include "IPv4Layer.h"
 #include "IPv6Layer.h"
 #include "DnsLayer.h"
 #include "DhcpLayer.h"
 #include "VxlanLayer.h"
 #include "SipLayer.h"
 #include "RadiusLayer.h"
 #include "GtpLayer.h"
+#include "PacketUtils.h"
 #include "Logger.h"
 #include <string.h>
 #include <sstream>
diff --git a/Pcap++/src/PcapLiveDevice.cpp b/Pcap++/src/PcapLiveDevice.cpp
index db3de811..78730282 100644
--- a/Pcap++/src/PcapLiveDevice.cpp
+++ b/Pcap++/src/PcapLiveDevice.cpp
@@ -70,73 +70,73 @@ static pcap_direction_t directionTypeMap(PcapLiveDevice::PcapDirection direction
 PcapLiveDevice::PcapLiveDevice(pcap_if_t* pInterface, bool calculateMTU, bool calculateMacAddress, bool calculateDefaultGateway) : IPcapDevice(),
 		m_MacAddress(""), m_DefaultGateway(IPv4Address::Zero)
 {
 	m_Name = NULL;
 	m_Description = NULL;
 	m_DeviceMtu = 0;
 	m_LinkType = LINKTYPE_ETHERNET;
 
 	m_IsLoopback = (pInterface->flags & 0x1) == PCAP_IF_LOOPBACK;
 
 	int strLength = strlen(pInterface->name)+1;
 	m_Name = new char[strLength];
 	strncpy((char*)m_Name, pInterface->name, strLength);
 
 	strLength = 1;
 	if (pInterface->description != NULL)
 		strLength += strlen(pInterface->description);
 	m_Description = new char[strLength];
 	if (pInterface->description != NULL)
 		strncpy((char*)m_Description, pInterface->description, strLength);
 	else
 		strncpy((char*)m_Description, "", strLength);
 	LOG_DEBUG("Added live device: name=%s; desc=%s", m_Name, m_Description);
 	LOG_DEBUG("   Addresses:");
 	while (pInterface->addresses != NULL)
 	{
 		m_Addresses.insert(m_Addresses.end(), *(pInterface->addresses));
 		pInterface->addresses = pInterface->addresses->next;
 		if (LoggerPP::getInstance().isDebugEnabled(PcapLogModuleLiveDevice) && pInterface->addresses != NULL && pInterface->addresses->addr != NULL)
 		{
 			char addrAsString[INET6_ADDRSTRLEN];
-			sockaddr2string(pInterface->addresses->addr, addrAsString);
+			internal::sockaddr2string(pInterface->addresses->addr, addrAsString);
 			LOG_DEBUG("      %s", addrAsString);
 		}
 	}
 
 	if (calculateMTU)
 	{
 		setDeviceMtu();
 		LOG_DEBUG("   MTU: %d", (int)m_DeviceMtu);
 	}
 
 	if (calculateDefaultGateway)
 	{
 		setDefaultGateway();
 		LOG_DEBUG("   Default Gateway: %s", m_DefaultGateway.toString().c_str());
 	}
 
 	//init all other members
 	m_CaptureThreadStarted = false;
 	m_StatsThreadStarted = false;
 	m_IsLoopback = false;
 	m_StopThread = false;
 	m_CaptureThread = new PcapThread();
 	m_StatsThread = new PcapThread();
 	memset(m_CaptureThread, 0, sizeof(PcapThread));
 	memset(m_StatsThread, 0, sizeof(PcapThread));
 	m_cbOnPacketArrives = NULL;
 	m_cbOnStatsUpdate = NULL;
 	m_cbOnPacketArrivesBlockingMode = NULL;
 	m_cbOnPacketArrivesBlockingModeUserCookie = NULL;
 	m_IntervalToUpdateStats = 0;
 	m_cbOnPacketArrivesUserCookie = NULL;
 	m_cbOnStatsUpdateUserCookie = NULL;
 	m_CaptureCallbackMode = true;
 	m_CapturedPackets = NULL;
 	if (calculateMacAddress)
 	{
 		setDeviceMacAddress();
 		if (m_MacAddress.isValid())
 			LOG_DEBUG("   MAC addr: %s", m_MacAddress.toString().c_str());
 	}
 }
@@ -899,23 +899,23 @@ void PcapLiveDevice::setDefaultGateway()
 IPv4Address PcapLiveDevice::getIPv4Address() const
 {
 	for(std::vector<pcap_addr_t>::const_iterator addrIter = m_Addresses.begin(); addrIter != m_Addresses.end(); addrIter++)
 	{
 		if (LoggerPP::getInstance().isDebugEnabled(PcapLogModuleLiveDevice) && addrIter->addr != NULL)
 		{
 			char addrAsString[INET6_ADDRSTRLEN];
-			sockaddr2string(addrIter->addr, addrAsString);
+			internal::sockaddr2string(addrIter->addr, addrAsString);
 			LOG_DEBUG("Searching address %s", addrAsString);
 		}
 
-		in_addr* currAddr = sockaddr2in_addr(addrIter->addr);
+		in_addr* currAddr = internal::sockaddr2in_addr(addrIter->addr);
 		if (currAddr == NULL)
 		{
 			LOG_DEBUG("Address is NULL");
 			continue;
 		}
 
 		return IPv4Address(currAddr->s_addr);
 	}
 
 	return IPv4Address::Zero;
 }
diff --git a/Pcap++/src/PcapLiveDeviceList.cpp b/Pcap++/src/PcapLiveDeviceList.cpp
index 4e749236..90f44809 100644
--- a/Pcap++/src/PcapLiveDeviceList.cpp
+++ b/Pcap++/src/PcapLiveDeviceList.cpp
@@ -68,149 +68,149 @@ void PcapLiveDeviceList::init()
 void PcapLiveDeviceList::setDnsServers()
 {
 #if defined(WIN32) || defined(WINx64)
 	FIXED_INFO * fixedInfo;
 	ULONG    ulOutBufLen;
 	DWORD    dwRetVal;
 	IP_ADDR_STRING * pIPAddr;
 
 	uint8_t buf1[sizeof(FIXED_INFO)];
 	fixedInfo = (FIXED_INFO *) buf1;
 	ulOutBufLen = sizeof( FIXED_INFO );
 
 	dwRetVal = GetNetworkParams( fixedInfo, &ulOutBufLen );
 	uint8_t* buf2 = new uint8_t[ulOutBufLen];
 	if(ERROR_BUFFER_OVERFLOW == dwRetVal)
 	{
 		fixedInfo = (FIXED_INFO *)buf2;
 	}
 
 	if ((dwRetVal = GetNetworkParams( fixedInfo, &ulOutBufLen )) != 0)
 		LOG_ERROR("Call to GetNetworkParams failed. Return Value: %08lx\n", dwRetVal);
 	else
 	{
 		m_DnsServers.push_back(IPv4Address(fixedInfo->DnsServerList.IpAddress.String));
 		int i = 1;
 		LOG_DEBUG("Default DNS server IP #%d: %s\n", i++, fixedInfo->DnsServerList.IpAddress.String );
 
 		pIPAddr = fixedInfo->DnsServerList.Next;
 		while ( pIPAddr )
 		{
 			m_DnsServers.push_back(IPv4Address(pIPAddr->IpAddress.String));
 			LOG_DEBUG("Default DNS server IP #%d: %s\n", i++, pIPAddr->IpAddress.String);
 			pIPAddr = pIPAddr -> Next;
 		}
 	}
 
 	delete[] buf2;
 #elif LINUX
 	// verify that nmcli exist
 	std::string command = "command -v nmcli >/dev/null 2>&1 || { echo 'nmcli not installed'; }";
 	std::string nmcliExists = executeShellCommand(command);
 	if (nmcliExists != "")
 	{
 		LOG_DEBUG("Error retrieving DNS server list: nmcli doesn't exist");
 		return;
 	}
 
 	// check nmcli major version (0 or 1)
 	command = "nmcli -v | awk -F' ' '{print $NF}' | awk -F'.' '{print $1}'";
 	std::string nmcliMajorVer = executeShellCommand(command);
 	nmcliMajorVer.erase(std::remove(nmcliMajorVer.begin(), nmcliMajorVer.end(), '\n'), nmcliMajorVer.end());
 	LOG_DEBUG("Found nmcli. nmcli major version is: '%s'", nmcliMajorVer.c_str());
 
 	// build nmcli command according to its major version
 	if (nmcliMajorVer == "0")
 		command = "nmcli dev list | grep IP4.DNS";
 	else
 		command = "nmcli dev show | grep IP4.DNS";
 
 	std::string dnsServersInfo = executeShellCommand(command);
 	if (dnsServersInfo == "")
 	{
 		LOG_DEBUG("Error retrieving DNS server list: call to nmcli gave no output");
 		return;
 	}
 
 	std::istringstream stream(dnsServersInfo);
 	std::string line;
 	int i = 1;
 	while(std::getline(stream, line))
 	{
 		std::istringstream lineStream(line);
 		std::string headline;
 		std::string dnsIP;
 		lineStream >> headline;
 		lineStream >> dnsIP;
 		IPv4Address dnsIPAddr(dnsIP);
 		if (!dnsIPAddr.isValid())
 			continue;
 
 		if (std::find(m_DnsServers.begin(), m_DnsServers.end(), dnsIPAddr) == m_DnsServers.end())
 		{
 			m_DnsServers.push_back(dnsIPAddr);
 			LOG_DEBUG("Default DNS server IP #%d: %s\n", i++, dnsIPAddr.toString().c_str());
 		}
 	}
 #elif MAC_OS_X
 
 	SCDynamicStoreRef dynRef = SCDynamicStoreCreate(kCFAllocatorSystemDefault, CFSTR("iked"), NULL, NULL);
 	if (dynRef == NULL)
 	{
 		LOG_DEBUG("Couldn't set DNS server list: failed to retrieve SCDynamicStore");
 		return;
 	}
 
 	CFDictionaryRef dnsDict = (CFDictionaryRef)SCDynamicStoreCopyValue(dynRef,CFSTR("State:/Network/Global/DNS"));
 
 	if (dnsDict == NULL)
 	{
 		LOG_DEBUG("Couldn't set DNS server list: failed to get DNS dictionary");
 		CFRelease(dynRef);
 		return;
 	}
 
 	CFArrayRef serverAddresses = (CFArrayRef)CFDictionaryGetValue(dnsDict, CFSTR("ServerAddresses"));
 
 	if (serverAddresses == NULL)
 	{
 		LOG_DEBUG("Couldn't set DNS server list: server addresses array is null");
 		CFRelease(dynRef);
 		CFRelease(dnsDict);
 		return;
 	}
 
 	CFIndex count = CFArrayGetCount(serverAddresses);
 	for (CFIndex i = 0; i < count; i++)
 	{
 		CFStringRef serverAddress = (CFStringRef)CFArrayGetValueAtIndex(serverAddresses, i);
 
 		if (serverAddress == NULL)
 			continue;
 
 		uint8_t buf[20];
 		char* serverAddressCString = (char*)buf;
 		CFStringGetCString(serverAddress, serverAddressCString, 20, kCFStringEncodingUTF8);
 		m_DnsServers.push_back(IPv4Address(serverAddressCString));
 		LOG_DEBUG("Default DNS server IP #%d: %s\n", (int)(i+1), serverAddressCString);
 	}
 
 	CFRelease(dynRef);
 	CFRelease(dnsDict);
 
 #elif FREEBSD
 
 	res_init();
 
 	for (int i = 0; i < _res.nscount; i++)
 	{
 		sockaddr* saddr = (sockaddr*)&_res.nsaddr_list[i];
 		if (saddr == NULL)
 			continue;
-		in_addr* inaddr = sockaddr2in_addr(saddr);
+		in_addr* inaddr = internal::sockaddr2in_addr(saddr);
 		if (inaddr == NULL)
 			continue;
-		m_DnsServers.push_back(IPv4Address(in_addr2int(*inaddr)));
+		m_DnsServers.push_back(IPv4Address(internal::in_addr2int(*inaddr)));
 	}
 
 #endif
 }
@@ -230,32 +230,32 @@ PcapLiveDevice* PcapLiveDeviceList::getPcapLiveDeviceByIp(const IPAddress& ipAdd
 PcapLiveDevice* PcapLiveDeviceList::getPcapLiveDeviceByIp(const IPv4Address& ipAddr) const
 {
 	LOG_DEBUG("Searching all live devices...");
 	for(std::vector<PcapLiveDevice*>::const_iterator devIter = m_LiveDeviceList.begin(); devIter != m_LiveDeviceList.end(); devIter++)
 	{
 		LOG_DEBUG("Searching device '%s'. Searching all addresses...", (*devIter)->m_Name);
 		for(std::vector<pcap_addr_t>::iterator addrIter = (*devIter)->m_Addresses.begin(); addrIter != (*devIter)->m_Addresses.end(); addrIter++)
 		{
 			if (LoggerPP::getInstance().isDebugEnabled(PcapLogModuleLiveDevice) && addrIter->addr != NULL)
 			{
 				char addrAsString[INET6_ADDRSTRLEN];
-				sockaddr2string(addrIter->addr, addrAsString);
+				internal::sockaddr2string(addrIter->addr, addrAsString);
 				LOG_DEBUG("Searching address %s", addrAsString);
 			}
 
-			in_addr* currAddr = sockaddr2in_addr(addrIter->addr);
+			in_addr* currAddr = internal::sockaddr2in_addr(addrIter->addr);
 			if (currAddr == NULL)
 			{
 				LOG_DEBUG("Address is NULL");
 				continue;
 			}
 
 			if (currAddr->s_addr == ipAddr.toInt())
 			{
 				LOG_DEBUG("Found matched address!");
 				return (*devIter);
 			}
 		}
 	}
 
 	return NULL;
 }
@@ -263,37 +263,37 @@ PcapLiveDevice* PcapLiveDeviceList::getPcapLiveDeviceByIp(const IPv4Address& ipA
 PcapLiveDevice* PcapLiveDeviceList::getPcapLiveDeviceByIp(const IPv6Address& ip6Addr) const
 {
 	LOG_DEBUG("Searching all live devices...");
 	for(std::vector<PcapLiveDevice*>::const_iterator devIter = m_LiveDeviceList.begin(); devIter != m_LiveDeviceList.end(); devIter++)
 	{
 		LOG_DEBUG("Searching device '%s'. Searching all addresses...", (*devIter)->m_Name);
 		for(std::vector<pcap_addr_t>::iterator addrIter = (*devIter)->m_Addresses.begin(); addrIter != (*devIter)->m_Addresses.end(); addrIter++)
 		{
 			if (LoggerPP::getInstance().isDebugEnabled(PcapLogModuleLiveDevice) && addrIter->addr != NULL)
 			{
 				char addrAsString[INET6_ADDRSTRLEN];
-				sockaddr2string(addrIter->addr, addrAsString);
+				internal::sockaddr2string(addrIter->addr, addrAsString);
 				LOG_DEBUG("Searching address %s", addrAsString);
 			}
 
-			in6_addr* currAddr = sockaddr2in6_addr(addrIter->addr);
+			in6_addr* currAddr = internal::sockaddr2in6_addr(addrIter->addr);
 			if (currAddr == NULL)
 			{
 				LOG_DEBUG("Address is NULL");
 				continue;
 			}
 
 			uint8_t* addrAsArr; size_t addrLen;
 			ip6Addr.copyTo(&addrAsArr, addrLen);
 			if (memcmp(currAddr, addrAsArr, sizeof(struct in6_addr)) == 0)
 			{
 				LOG_DEBUG("Found matched address!");
 				delete [] addrAsArr;
 				return (*devIter);
 			}
 
 			delete [] addrAsArr;
 		}
 	}
 
 	return NULL;
 }
diff --git a/Pcap++/src/PcapRemoteDeviceList.cpp b/Pcap++/src/PcapRemoteDeviceList.cpp
index 129a86ad..01a7358e 100644
--- a/Pcap++/src/PcapRemoteDeviceList.cpp
+++ b/Pcap++/src/PcapRemoteDeviceList.cpp
@@ -106,33 +106,33 @@ PcapRemoteDevice* PcapRemoteDeviceList::getRemoteDeviceByIP(const IPAddress& ipA
 PcapRemoteDevice* PcapRemoteDeviceList::getRemoteDeviceByIP(const IPv4Address& ip4Addr) const
 {
 	LOG_DEBUG("Searching all remote devices in list...");
 	for(ConstRemoteDeviceListIterator devIter = m_RemoteDeviceList.begin(); devIter != m_RemoteDeviceList.end(); devIter++)
 	{
 		LOG_DEBUG("Searching device '%s'. Searching all addresses...", (*devIter)->m_Name);
 		for(std::vector<pcap_addr_t>::iterator addrIter = (*devIter)->m_Addresses.begin(); addrIter != (*devIter)->m_Addresses.end(); addrIter++)
 		{
 			if (LoggerPP::getInstance().isDebugEnabled(PcapLogModuleRemoteDevice) && addrIter->addr != NULL)
 			{
 				char addrAsString[INET6_ADDRSTRLEN];
-				sockaddr2string(addrIter->addr, addrAsString);
+				internal::sockaddr2string(addrIter->addr, addrAsString);
 				LOG_DEBUG("Searching address %s", addrAsString);
 			}
 
-			in_addr* currAddr = sockaddr2in_addr(addrIter->addr);
+			in_addr* currAddr = internal::sockaddr2in_addr(addrIter->addr);
 			if (currAddr == NULL)
 			{
 				LOG_DEBUG("Address is NULL");
 				continue;
 			}
 
 			if (currAddr->s_addr == ip4Addr.toInt())
 			{
 				LOG_DEBUG("Found matched address!");
 				return (*devIter);
 			}
 		}
 	}
 
 	return NULL;
 
 }
@@ -140,37 +140,37 @@ PcapRemoteDevice* PcapRemoteDeviceList::getRemoteDeviceByIP(const IPv4Address& i
 PcapRemoteDevice* PcapRemoteDeviceList::getRemoteDeviceByIP(const IPv6Address& ip6Addr) const
 {
 	LOG_DEBUG("Searching all remote devices in list...");
 	for(ConstRemoteDeviceListIterator devIter = m_RemoteDeviceList.begin(); devIter != m_RemoteDeviceList.end(); devIter++)
 	{
 		LOG_DEBUG("Searching device '%s'. Searching all addresses...", (*devIter)->m_Name);
 		for(std::vector<pcap_addr_t>::iterator addrIter = (*devIter)->m_Addresses.begin(); addrIter != (*devIter)->m_Addresses.end(); addrIter++)
 		{
 			if (LoggerPP::getInstance().isDebugEnabled(PcapLogModuleRemoteDevice) && addrIter->addr != NULL)
 			{
 				char addrAsString[INET6_ADDRSTRLEN];
-				sockaddr2string(addrIter->addr, addrAsString);
+				internal::sockaddr2string(addrIter->addr, addrAsString);
 				LOG_DEBUG("Searching address %s", addrAsString);
 			}
 
-			in6_addr* currAddr = sockaddr2in6_addr(addrIter->addr);
+			in6_addr* currAddr = internal::sockaddr2in6_addr(addrIter->addr);
 			if (currAddr == NULL)
 			{
 				LOG_DEBUG("Address is NULL");
 				continue;
 			}
 
 			uint8_t* addrAsArr; size_t addrLen;
 			ip6Addr.copyTo(&addrAsArr, addrLen);
 			if (memcmp(currAddr, addrAsArr, sizeof(struct in6_addr)) == 0)
 			{
 				LOG_DEBUG("Found matched address!");
 				delete [] addrAsArr;
 				return (*devIter);
 			}
 			delete [] addrAsArr;
 		}
 	}
 
 	return NULL;
 
 }
