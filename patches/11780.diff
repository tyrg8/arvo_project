commit dad4bfcfa39f744bf9d9c8f2a8f5b040982e6022
Author: Leon Scroggins III <scroggo@google.com>
Date:   Mon Dec 10 12:37:10 2018 -0500

    SkWuffsCodec: swizzle only the dirty rect
    
    This should result in a little less work, since the dirty rect should be
    a subset of the frame rect. More importantly, the dirty rect will be
    empty until we've fully read the color table. For incomplete data, we
    therefore shouldn't read an uninitialized color table.
    
    This also lets us convert from the Wuffs palette to the Skia palette
    (fColorTable) once (per frame), not once per onIncrementalDecode call.
    Again, this means we do a little less work.
    
    Bug: oss-fuzz:11780
    Change-Id: I1991778ca19f0525a0fefa57448e2dd015ea38fb
    Reviewed-on: https://skia-review.googlesource.com/c/175900
    Commit-Queue: Leon Scroggins <scroggo@google.com>
    Reviewed-by: Leon Scroggins <scroggo@google.com>

diff --git a/DEPS b/DEPS
index afcd04b4f9..f1a272366b 100644
--- a/DEPS
+++ b/DEPS
@@ -7,37 +7,37 @@ vars = {
 deps = {
   "buildtools"                            : "https://chromium.googlesource.com/chromium/buildtools.git@505de88083136eefd056e5ee4ca0f01fe9b33de8",
   "common"                                : "https://skia.googlesource.com/common.git@9737551d7a52c3db3262db5856e6bcd62c462b92",
   "third_party/externals/angle2"          : "https://chromium.googlesource.com/angle/angle.git@19f2f9eb2503b5c500a349752f16f3b0bd2f274d",
   "third_party/externals/dng_sdk"         : "https://android.googlesource.com/platform/external/dng_sdk.git@96443b262250c390b0caefbf3eed8463ba35ecae",
   "third_party/externals/egl-registry"    : "https://skia.googlesource.com/external/github.com/KhronosGroup/EGL-Registry@a0bca08de07c7d7651047bedc0b653cfaaa4f2ae",
   "third_party/externals/expat"           : "https://android.googlesource.com/platform/external/expat.git@android-6.0.1_r55",
   "third_party/externals/freetype"        : "https://skia.googlesource.com/third_party/freetype2.git@7edc937fe679d14d66f55cf6f7fa607925d38f3c",
   "third_party/externals/harfbuzz"        : "https://skia.googlesource.com/third_party/harfbuzz.git@8be74d85534534dbdd39a0a6f496e26e9f3e661d",
   "third_party/externals/icu"             : "https://chromium.googlesource.com/chromium/deps/icu.git@407b39301e71006b68bd38e770f35d32398a7b14",
   "third_party/externals/imgui"           : "https://skia.googlesource.com/external/github.com/ocornut/imgui.git@bc6ac8b2aee0614debd940e45bc9cd0d9b355c86",
   # TODO: remove jsoncpp after migrating clients to SkJSON
   "third_party/externals/jsoncpp"         : "https://chromium.googlesource.com/external/github.com/open-source-parsers/jsoncpp.git@1.0.0",
   "third_party/externals/libjpeg-turbo"   : "https://skia.googlesource.com/external/github.com/libjpeg-turbo/libjpeg-turbo.git@2.0.0",
   "third_party/externals/libpng"          : "https://skia.googlesource.com/third_party/libpng.git@v1.6.33",
   "third_party/externals/libwebp"         : "https://chromium.googlesource.com/webm/libwebp.git@v1.0.1",
   "third_party/externals/lua"             : "https://skia.googlesource.com/external/github.com/lua/lua.git@v5-3-4",
   "third_party/externals/microhttpd"      : "https://android.googlesource.com/platform/external/libmicrohttpd@748945ec6f1c67b7efc934ab0808e1d32f2fb98d",
   "third_party/externals/opencl-lib"      : "https://skia.googlesource.com/external/github.com/GPUOpen-Tools/common-lib-amd-APPSDK-3.0@4e6d30e406d2e5a65e1d65e404fe6df5f772a32b",
   "third_party/externals/opengl-registry" : "https://skia.googlesource.com/external/github.com/KhronosGroup/OpenGL-Registry@14b80ebeab022b2c78f84a573f01028c96075553",
   "third_party/externals/piex"            : "https://android.googlesource.com/platform/external/piex.git@bb217acdca1cc0c16b704669dd6f91a1b509c406",
   "third_party/externals/sdl"             : "https://skia.googlesource.com/third_party/sdl@5d7cfcca344034aff9327f77fc181ae3754e7a90",
   "third_party/externals/sfntly"          : "https://chromium.googlesource.com/external/github.com/googlei18n/sfntly.git@b55ff303ea2f9e26702b514cf6a3196a2e3e2974",
   "third_party/externals/spirv-headers"   : "https://skia.googlesource.com/external/github.com/KhronosGroup/SPIRV-Headers.git@661ad91124e6af2272afd00f804d8aa276e17107",
   "third_party/externals/spirv-tools"     : "https://skia.googlesource.com/external/github.com/KhronosGroup/SPIRV-Tools.git@e9e4393b1c5aad7553c05782acefbe32b42644bd",
   "third_party/externals/swiftshader"     : "https://swiftshader.googlesource.com/SwiftShader@2661e840833165f119862f3a43bc15743ce82cd5",
   #"third_party/externals/v8"              : "https://chromium.googlesource.com/v8/v8.git@5f1ae66d5634e43563b2d25ea652dfb94c31a3b4",
-  "third_party/externals/wuffs"           : "https://github.com/google/wuffs.git@b5c47e273f7f8862bcf04976453d0ec81e6e6650",
+  "third_party/externals/wuffs"           : "https://github.com/google/wuffs.git@f51c71b72cfc3ce3515d1196eb78f0a64c9955ff",
   "third_party/externals/zlib"            : "https://chromium.googlesource.com/chromium/src/third_party/zlib@47af7c547f8551bd25424e56354a2ae1e9062859",
   "third_party/externals/Nima-Cpp"      : "https://github.com/2d-inc/Nima-Cpp.git@4bd02269d7d1d2e650950411325eafa15defb084",
   "third_party/externals/Nima-Math-Cpp" : "https://github.com/2d-inc/Nima-Math-Cpp.git@e0c12772093fa8860f55358274515b86885f0108",
 
   "../src": {
     "url": "https://chromium.googlesource.com/chromium/src.git@df35166fd2ae545e9d31701a2d9b9cb286dc5ad6",
     "condition": "checkout_chromium",
   },
 }
diff --git a/src/codec/SkWuffsCodec.cpp b/src/codec/SkWuffsCodec.cpp
index fe859b75e5..4cdbf63597 100644
--- a/src/codec/SkWuffsCodec.cpp
+++ b/src/codec/SkWuffsCodec.cpp
@@ -162,66 +162,67 @@ public:
 private:
     // SkCodec overrides.
     SkEncodedImageFormat onGetEncodedFormat() const override;
     Result onGetPixels(const SkImageInfo&, void*, size_t, const Options&, int*) override;
     const SkFrameHolder* getFrameHolder() const override;
     Result               onStartIncrementalDecode(const SkImageInfo&      dstInfo,
                                                   void*                   dst,
                                                   size_t                  rowBytes,
                                                   const SkCodec::Options& options) override;
     Result               onIncrementalDecode(int* rowsDecoded) override;
     int                  onGetFrameCount() override;
     bool                 onGetFrameInfo(int, FrameInfo*) const override;
     int                  onGetRepetitionCount() override;
     SkSampler*           getSampler(bool createIfNecessary) override;
     bool                 conversionSupported(const SkImageInfo& dst, bool, bool) override;
 
     void   readFrames();
     Result seekFrame(int frameIndex);
 
     Result      resetDecoder();
     const char* decodeFrameConfig();
     const char* decodeFrame();
     void        updateNumFullyReceivedFrames();
 
     SkWuffsSpySampler                                       fSpySampler;
     SkWuffsFrameHolder                                      fFrameHolder;
     std::unique_ptr<SkStream>                               fStream;
     std::unique_ptr<wuffs_gif__decoder, decltype(&sk_free)> fDecoder;
     std::unique_ptr<uint8_t, decltype(&sk_free)>            fPixbufPtr;
     std::unique_ptr<uint8_t, decltype(&sk_free)>            fWorkbufPtr;
     size_t                                                  fWorkbufLen;
 
     const uint64_t           fFirstFrameIOPosition;
     wuffs_base__frame_config fFrameConfig;
     wuffs_base__pixel_buffer fPixelBuffer;
     wuffs_base__io_buffer    fIOBuffer;
 
     // Incremental decoding state.
     uint8_t* fIncrDecDst;
     size_t   fIncrDecRowBytes;
 
     std::unique_ptr<SkSwizzler> fSwizzler;
     SkPMColor                   fColorTable[256];
+    bool                        fColorTableFilled;
 
     uint64_t                  fNumFullyReceivedFrames;
     std::vector<SkWuffsFrame> fFrames;
     bool                      fFramesComplete;
 
     // If calling an fDecoder method returns an incomplete status, then
     // fDecoder is suspended in a coroutine (i.e. waiting on I/O or halted on a
     // non-recoverable error). To keep its internal proof-of-safety invariants
     // consistent, there's only two things you can safely do with a suspended
     // Wuffs object: resume the coroutine, or reset all state (memset to zero
     // and start again).
     //
     // If fDecoderIsSuspended, and we aren't sure that we're going to resume
     // the coroutine, then we will need to call this->resetDecoder before
     // calling other fDecoder methods.
     bool fDecoderIsSuspended;
 
     uint8_t fBuffer[SK_WUFFS_CODEC_BUFFER_SIZE];
 
     typedef SkCodec INHERITED;
 };
 
 // -------------------------------- SkWuffsFrame implementation
@@ -294,48 +295,49 @@ int SkWuffsSpySampler::onSetSampleX(int sampleX) {
 SkWuffsCodec::SkWuffsCodec(SkEncodedInfo&&                                         encodedInfo,
                            std::unique_ptr<SkStream>                               stream,
                            std::unique_ptr<wuffs_gif__decoder, decltype(&sk_free)> dec,
                            std::unique_ptr<uint8_t, decltype(&sk_free)>            pixbuf_ptr,
                            std::unique_ptr<uint8_t, decltype(&sk_free)>            workbuf_ptr,
                            size_t                                                  workbuf_len,
                            wuffs_base__image_config                                imgcfg,
                            wuffs_base__pixel_buffer                                pixbuf,
                            wuffs_base__io_buffer                                   iobuf)
     : INHERITED(std::move(encodedInfo),
                 skcms_PixelFormat_RGBA_8888,
                 // Pass a nullptr SkStream to the SkCodec constructor. We
                 // manage the stream ourselves, as the default SkCodec behavior
                 // is too trigger-happy on rewinding the stream.
                 nullptr),
       fSpySampler(imgcfg.pixcfg.width()),
       fFrameHolder(),
       fStream(std::move(stream)),
       fDecoder(std::move(dec)),
       fPixbufPtr(std::move(pixbuf_ptr)),
       fWorkbufPtr(std::move(workbuf_ptr)),
       fWorkbufLen(workbuf_len),
       fFirstFrameIOPosition(imgcfg.first_frame_io_position()),
       fFrameConfig((wuffs_base__frame_config){}),
       fPixelBuffer(pixbuf),
       fIOBuffer((wuffs_base__io_buffer){}),
       fIncrDecDst(nullptr),
       fIncrDecRowBytes(0),
       fSwizzler(nullptr),
+      fColorTableFilled(false),
       fNumFullyReceivedFrames(0),
       fFramesComplete(false),
       fDecoderIsSuspended(false) {
     fFrameHolder.init(this, imgcfg.pixcfg.width(), imgcfg.pixcfg.height());
     sk_memset32(fColorTable, 0, SK_ARRAY_COUNT(fColorTable));
 
     // Initialize fIOBuffer's fields, copying any outstanding data from iobuf to
     // fIOBuffer, as iobuf's backing array may not be valid for the lifetime of
     // this SkWuffsCodec object, but fIOBuffer's backing array (fBuffer) is.
     SkASSERT(iobuf.data.len == SK_WUFFS_CODEC_BUFFER_SIZE);
     memmove(fBuffer, iobuf.data.ptr, iobuf.meta.wi);
     fIOBuffer = ((wuffs_base__io_buffer){
         .data = ((wuffs_base__slice_u8){
             .ptr = fBuffer,
             .len = SK_WUFFS_CODEC_BUFFER_SIZE,
         }),
         .meta = iobuf.meta,
     });
 }
@@ -370,27 +372,28 @@ const SkFrameHolder* SkWuffsCodec::getFrameHolder() const {
 SkCodec::Result SkWuffsCodec::onStartIncrementalDecode(const SkImageInfo&      dstInfo,
                                                        void*                   dst,
                                                        size_t                  rowBytes,
                                                        const SkCodec::Options& options) {
     if (options.fSubset) {
         return SkCodec::kUnimplemented;
     }
     SkCodec::Result result = this->seekFrame(options.fFrameIndex);
     if (result != SkCodec::kSuccess) {
         return result;
     }
 
     fSpySampler.reset();
     fSwizzler = nullptr;
+    fColorTableFilled = false;
 
     const char* status = this->decodeFrameConfig();
     if (status == nullptr) {
         fIncrDecDst = static_cast<uint8_t*>(dst);
         fIncrDecRowBytes = rowBytes;
         return SkCodec::kSuccess;
     } else if (status == wuffs_base__suspension__short_read) {
         return SkCodec::kIncompleteInput;
     } else {
         SkCodecPrintf("decodeFrameConfig: %s", status);
         return SkCodec::kErrorInInput;
     }
 }
@@ -418,136 +421,146 @@ static void blend(uint32_t* dst, const uint32_t* src, int width) {
 SkCodec::Result SkWuffsCodec::onIncrementalDecode(int* rowsDecoded) {
     if (!fIncrDecDst) {
         return SkCodec::kInternalError;
     }
 
     // In Wuffs, a paletted image is always 1 byte per pixel.
     static constexpr size_t src_bpp = 1;
     wuffs_base__table_u8 pixels = fPixelBuffer.plane(0);
     int scaledHeight = dstInfo().height();
     const bool independent = independent_frame(this, options().fFrameIndex);
-    wuffs_base__rect_ie_u32 r = fFrameConfig.bounds();
+    wuffs_base__rect_ie_u32 frame_rect = fFrameConfig.bounds();
     if (!fSwizzler) {
-        auto bounds = SkIRect::MakeLTRB(r.min_incl_x, r.min_incl_y, r.max_excl_x, r.max_excl_y);
+        auto bounds = SkIRect::MakeLTRB(frame_rect.min_incl_x, frame_rect.min_incl_y,
+                                        frame_rect.max_excl_x, frame_rect.max_excl_y);
         fSwizzler = SkSwizzler::Make(this->getEncodedInfo(), fColorTable, dstInfo(),
                                      this->options(), &bounds);
         fSwizzler->setSampleX(fSpySampler.sampleX());
         fSwizzler->setSampleY(fSpySampler.sampleY());
         scaledHeight = get_scaled_dimension(dstInfo().height(), fSpySampler.sampleY());
 
         // Zero-initialize wuffs' buffer covering the frame rect. This will later be used to
         // determine how we write to the output, even if the image was incomplete. This ensures
         // that we do not swizzle uninitialized memory.
-        for (uint32_t y = r.min_incl_y; y < r.max_excl_y; y++) {
-            uint8_t* s = pixels.ptr + (y * pixels.stride) + (r.min_incl_x * src_bpp);
-            sk_bzero(s, r.width() * src_bpp);
+        for (uint32_t y = frame_rect.min_incl_y; y < frame_rect.max_excl_y; y++) {
+            uint8_t* s = pixels.ptr + (y * pixels.stride) + (frame_rect.min_incl_x * src_bpp);
+            sk_bzero(s, frame_rect.width() * src_bpp);
         }
 
         // If the frame rect does not fill the output, ensure that those pixels are not
         // left uninitialized either.
         if (independent && bounds != this->bounds()) {
             auto fillInfo = dstInfo().makeWH(fSwizzler->fillWidth(), scaledHeight);
             SkSampler::Fill(fillInfo, fIncrDecDst, fIncrDecRowBytes, options().fZeroInitialized);
         }
     }
 
     // The semantics of *rowsDecoded is: say you have a 10 pixel high image
     // (both the frame and the image). If you only decoded the first 3 rows,
     // set this to 3, and then SkCodec (or the caller of incrementalDecode)
     // would zero-initialize the remaining 7 (unless the memory was already
     // zero-initialized).
     //
     // Now let's say that the image is still 10 pixels high, but the frame is
     // from row 5 to 9. If you only decoded 3 rows, but you initialized the
     // first 5, you could return 8, and the caller would zero-initialize the
     // final 2. For GIF (where a frame can be smaller than the image and can be
     // interlaced), we just zero-initialize all 10 rows ahead of time and
     // return the height of the image, so the caller knows it doesn't need to
     // do anything.
     //
     // Similarly, if the output is scaled, we zero-initialized all
     // |scaledHeight| rows (the scaled image height), so we inform the caller
     // that it doesn't need to do anything.
     if (rowsDecoded) {
         *rowsDecoded = scaledHeight;
     }
 
     SkCodec::Result result = SkCodec::kSuccess;
     const char*     status = this->decodeFrame();
     if (status != nullptr) {
         if (status == wuffs_base__suspension__short_read) {
             result = SkCodec::kIncompleteInput;
         } else {
             SkCodecPrintf("decodeFrame: %s", status);
             result = SkCodec::kErrorInInput;
         }
 
         if (!independent) {
             // For a dependent frame, we cannot blend the partial result, since
             // that will overwrite the contribution from prior frames with all
             // zeroes that were written to |pixels| above.
             return result;
         }
     }
 
-    // If the frame rect is empty, no need to swizzle.
-    if (!r.is_empty()) {
-        wuffs_base__slice_u8 palette = fPixelBuffer.palette();
-        SkASSERT(palette.len == 4 * 256);
-        auto proc = choose_pack_color_proc(false, dstInfo().colorType());
-        for (int i = 0; i < 256; i++) {
-            uint8_t* p = palette.ptr + 4 * i;
-            fColorTable[i] = proc(p[3], p[2], p[1], p[0]);
+    // If the frame's dirty rect is empty, no need to swizzle.
+    wuffs_base__rect_ie_u32 dirty_rect = wuffs_gif__decoder__frame_dirty_rect(fDecoder.get());
+    if (!dirty_rect.is_empty()) {
+        if (!fColorTableFilled) {
+            fColorTableFilled = true;
+            wuffs_base__slice_u8 palette = fPixelBuffer.palette();
+            SkASSERT(palette.len == 4 * 256);
+            auto proc = choose_pack_color_proc(false, dstInfo().colorType());
+            for (int i = 0; i < 256; i++) {
+                uint8_t* p = palette.ptr + 4 * i;
+                fColorTable[i] = proc(p[3], p[2], p[1], p[0]);
+            }
         }
 
         std::unique_ptr<uint8_t[]> tmpBuffer;
         if (!independent) {
             tmpBuffer.reset(new uint8_t[dstInfo().minRowBytes()]);
         }
         const int sampleY = fSwizzler->sampleY();
-        for (uint32_t y = r.min_incl_y; y < r.max_excl_y; y++) {
+        for (uint32_t y = dirty_rect.min_incl_y; y < dirty_rect.max_excl_y; y++) {
             int dstY = y;
             if (sampleY != 1) {
                 if (!fSwizzler->rowNeeded(y)) {
                     continue;
                 }
                 dstY /= sampleY;
                 if (dstY >= scaledHeight) {
                     break;
                 }
             }
 
-            // We don't adjust d by (r.min_incl_x * dst_bpp) as we have already
-            // accounted for that in swizzleRect, above.
+            // We don't adjust d by (frame_rect.min_incl_x * dst_bpp) as we
+            // have already accounted for that in swizzleRect, above.
             uint8_t* d = fIncrDecDst + (dstY * fIncrDecRowBytes);
 
             // The Wuffs model is that the dst buffer is the image, not the frame.
             // The expectation is that you allocate the buffer once, but re-use it
             // for the N frames, regardless of each frame's top-left co-ordinate.
             //
             // To get from the start (in the X-direction) of the image to the start
-            // of the frame, we adjust s by (r.min_incl_x * src_bpp).
-            uint8_t* s = pixels.ptr + (y * pixels.stride) + (r.min_incl_x * src_bpp);
+            // of the frame, we adjust s by (frame_rect.min_incl_x * src_bpp).
+            //
+            // We adjust (in the X-direction) by the frame rect, not the dirty
+            // rect, because the swizzler (which operates on rows) was
+            // configured with the frame rect's X range.
+            uint8_t* s = pixels.ptr + (y * pixels.stride) + (frame_rect.min_incl_x * src_bpp);
             if (independent) {
                 fSwizzler->swizzle(d, s);
             } else {
                 SkASSERT(tmpBuffer.get());
                 fSwizzler->swizzle(tmpBuffer.get(), s);
                 d = SkTAddOffset<uint8_t>(d, fSwizzler->swizzleOffsetBytes());
                 const auto* swizzled = SkTAddOffset<uint32_t>(tmpBuffer.get(),
                                                               fSwizzler->swizzleOffsetBytes());
                 blend(reinterpret_cast<uint32_t*>(d), swizzled, fSwizzler->swizzleWidth());
             }
         }
     }
 
     if (result == SkCodec::kSuccess) {
         fSpySampler.reset();
         fIncrDecDst = nullptr;
         fIncrDecRowBytes = 0;
         fSwizzler = nullptr;
+        fColorTableFilled = false;
     } else {
         // Make fSpySampler return whatever fSwizzler would have for fillWidth.
         fSpySampler.fFillWidth = fSwizzler->fillWidth();
     }
     return result;
 }
