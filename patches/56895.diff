commit 771cfcca1ef6a4a7eb9595d700fc72020d0ed72e
Author: David Anderson <davea42@linuxmail.org>
Date:   Fri Mar 24 09:40:15 2023 -0700

    Fixing ossfuzz 56895, reading past end of section
    of a Compilation Unit. the tests of such were not
    sufficiently precise to catch the error.
            modified:   src/lib/libdwarf/dwarf_die_deliv.c

diff --git a/src/lib/libdwarf/dwarf_die_deliv.c b/src/lib/libdwarf/dwarf_die_deliv.c
index e47d4858..3d1eb3ca 100644
--- a/src/lib/libdwarf/dwarf_die_deliv.c
+++ b/src/lib/libdwarf/dwarf_die_deliv.c
@@ -302,108 +302,132 @@ static int
 _dwarf_read_cu_version_and_abbrev_offset(Dwarf_Debug dbg,
     Dwarf_Small *data,
     Dwarf_Bool is_info,
     unsigned offset_size, /* 4 or 8 */
     Dwarf_CU_Context cu_context,
     /* end_data used for sanity checking */
     Dwarf_Small *    end_data,
     Dwarf_Unsigned * bytes_read_out,
     Dwarf_Error *    error)
 {
     Dwarf_Small *  data_start = data;
     Dwarf_Small *  dataptr = data;
     Dwarf_Ubyte    unit_type = 0;
     Dwarf_Ubyte    addrsize =  0;
     Dwarf_Unsigned abbrev_offset = 0;
     Dwarf_Half version = 0;
 
     READ_UNALIGNED_CK(dbg, version, Dwarf_Half,
         dataptr,DWARF_HALF_SIZE,error,end_data);
     dataptr += DWARF_HALF_SIZE;
     if (version == DW_CU_VERSION5) {
         Dwarf_Ubyte unit_typeb = 0;
+        Dwarf_Unsigned herelen = sizeof(unit_typeb) +
+            sizeof(addrsize) + offset_size;
+          
+            
 
+        if ((dataptr+herelen) > end_data) {
+            _dwarf_error_string(dbg, error,
+            DW_DLE_CU_UT_TYPE_ERROR,
+            "DW_DLE_UT_TYPE_ERROR: "
+            " Reading the unit type, address size, "
+            "and abbrev_offset of the DWARF5 header"
+            " will run off the end of the section. "
+            "Corrupt DWARF");
+        }
         READ_UNALIGNED_CK(dbg, unit_typeb, Dwarf_Ubyte,
             dataptr, sizeof(unit_typeb),error,end_data);
         dataptr += sizeof(unit_typeb);
 
         unit_type = unit_typeb;
         /* We do not need is_info flag in DWARF5 */
         if (is_unknown_UT_value(unit_type)) {
             /*  DWARF5 object file is corrupt. Invalid value */
             dwarfstring m;
             dwarfstring_constructor(&m);
             dwarfstring_append_printf_u(&m,
                 "DW_DLE_CU_UT_TYPE_ERROR: we do not know "
                 " the CU header unit_type 0x%x",unit_type);
             dwarfstring_append_printf_u(&m," (%u) so cannot"
                 "process this compilation_unit. A valid type ",
                 unit_type);
             dwarfstring_append(&m,"would be DW_UT_compile"
                 ", for example");
             _dwarf_error_string(dbg, error,
                 DW_DLE_CU_UT_TYPE_ERROR,
                 dwarfstring_string(&m));
             dwarfstring_destructor(&m);
             return DW_DLV_ERROR;
         }
         READ_UNALIGNED_CK(dbg, addrsize, unsigned char,
             dataptr, sizeof(addrsize),error,end_data);
         dataptr += sizeof(char);
 
         READ_UNALIGNED_CK(dbg, abbrev_offset, Dwarf_Unsigned,
             dataptr, offset_size,error,end_data);
         dataptr += offset_size;
 
     } else if (version == DW_CU_VERSION2 ||
         version == DW_CU_VERSION3 ||
         version == DW_CU_VERSION4) {
+        Dwarf_Unsigned herelen = sizeof(addrsize) + offset_size;
+
+        if ((dataptr+herelen) > end_data) {
+            _dwarf_error_string(dbg, error,
+            DW_DLE_CU_UT_TYPE_ERROR,
+            "DW_DLE_UT_TYPE_ERROR: "
+            " Reading the address size, "
+            "and abbrev_offset of the DWARF header"
+            " will run off the end of the section. "
+            "Corrupt DWARF");
+        }
         /*  DWARF2,3,4  */
         READ_UNALIGNED_CK(dbg, abbrev_offset, Dwarf_Unsigned,
             dataptr, offset_size,error,end_data);
         dataptr += offset_size;
 
         READ_UNALIGNED_CK(dbg, addrsize, Dwarf_Ubyte,
             dataptr, sizeof(addrsize),error,end_data);
         dataptr += sizeof(addrsize);
 
         /*  This is an initial approximation of unit_type.
             For DW4 we will refine this after we
             have built the CU header (by reading
             CU_die)
         */
         unit_type = is_info?DW_UT_compile:DW_UT_type;
     } else {
         _dwarf_error(dbg, error, DW_DLE_VERSION_STAMP_ERROR);
         return DW_DLV_ERROR;
     }
     cu_context->cc_version_stamp = version;
     cu_context->cc_unit_type     = unit_type;
     cu_context->cc_address_size  = addrsize;
     cu_context->cc_abbrev_offset = abbrev_offset;
     if (!addrsize) {
         _dwarf_error(dbg,error,DW_DLE_ADDRESS_SIZE_ZERO);
         return DW_DLV_ERROR;
     }
     if (addrsize < MINIMUM_ADDRESS_SIZE ||
         addrsize > MAXIMUM_ADDRESS_SIZE ) {
         _dwarf_create_address_size_dwarf_error(dbg,error,addrsize,
             DW_DLE_ADDRESS_SIZE_ERROR,
             "DW_DLE_ADDRESS_SIZE_ERROR::");
         return DW_DLV_ERROR;
     }
     if (addrsize  > sizeof(Dwarf_Addr)) {
         _dwarf_create_address_size_dwarf_error(dbg,error,addrsize,
             DW_DLE_ADDRESS_SIZE_ERROR,
             "DW_DLE_ADDRESS_SIZE_ERROR: not representable"
             " in Dwarf_Addr field.");
         return DW_DLV_ERROR;
     }
 
     /* We are ignoring this. Can get it from DWARF5. */
     cu_context->cc_segment_selector_size = 0;
     *bytes_read_out = (dataptr - data_start);
     return DW_DLV_OK;
 }
 
 /*  .debug_info[.dwo]   .debug_types[.dwo]
     the latter only DWARF4. */
@@ -552,55 +576,55 @@ static int
 finish_cu_context_via_cudie_inner(
     Dwarf_Debug dbg,
     Dwarf_CU_Context cu_context,
     Dwarf_Error *error)
 {
     /*  DW4: Look for DW_AT_dwo_id and
         DW_AT_low_pc and more.
         if there is one pick up the hash
         DW5: hash in skeleton CU die
         Also pick up cc_str_offset_base and
         any other base values. */
     Dwarf_Die cudie = 0;
     int resdwo = 0;
 
     /*  Must call the internal siblingof so
         we do not depend on the dbg...de_cu_context
         used by and for dwarf_cu_header_* calls. */
     resdwo = _dwarf_siblingof_internal(dbg,NULL,
         cu_context,
         cu_context->cc_is_info,
         &cudie, error);
     if (resdwo == DW_DLV_OK) {
         Dwarf_Half cutag = 0;
         int resdwob = 0;
         resdwob = find_cu_die_base_fields(dbg,
             cu_context,
             cudie,
             error);
         if (resdwob == DW_DLV_NO_ENTRY) {
             /* The CU die has no children */
-            dwarf_dealloc(dbg,cudie,DW_DLA_DIE);
+            dwarf_dealloc_die(cudie);
             cudie = 0;
             cu_context->cc_cu_die_has_children = FALSE;
             return DW_DLV_OK;
         }
         if (resdwob == DW_DLV_ERROR) {
             /*  Not applicable or an error */
-            dwarf_dealloc(dbg,cudie,DW_DLA_DIE);
+            dwarf_dealloc_die(cudie);
             cudie = 0;
             return resdwob;
         }
         resdwob = dwarf_tag(cudie,&cutag,error);
         if (resdwob == DW_DLV_OK) {
             cu_context->cc_cu_die_tag = cutag;
         }
-        dwarf_dealloc(dbg,cudie,DW_DLA_DIE);
+        dwarf_dealloc_die(cudie);
         return resdwob;
     }
     if (resdwo == DW_DLV_NO_ENTRY) {
         /* no cudie. Empty CU. */
         return DW_DLV_OK;
     }
     /* no cudie. DW_DLV_ERROR.*/
     return resdwo;
 }
@@ -673,228 +697,244 @@ static int
 _dwarf_make_CU_Context(Dwarf_Debug dbg,
     Dwarf_Off offset,Dwarf_Bool is_info,
     Dwarf_CU_Context * context_out,Dwarf_Error * error)
 {
     Dwarf_CU_Context cu_context = 0;
     Dwarf_Unsigned   length = 0;
     Dwarf_Unsigned   typeoffset = 0;
     Dwarf_Sig8       signaturedata;
     Dwarf_Unsigned   types_extra_len = 0;
     Dwarf_Unsigned   max_cu_local_offset =  0;
     Dwarf_Unsigned   max_cu_global_offset =  0;
     Dwarf_Byte_Ptr   cu_ptr = 0;
     Dwarf_Byte_Ptr   section_end_ptr = 0;
     int              local_length_size = 0;
     Dwarf_Unsigned   bytes_read = 0;
     const char *     secname = 0;
     Dwarf_Debug_InfoTypes dis = 0;
     struct Dwarf_Section_s * secdp = 0;
     Dwarf_Unsigned   section_size = 0;
     Dwarf_Half       unit_type = 0;
     Dwarf_Unsigned   version = 0;
     Dwarf_Small *    dataptr = 0;
     int              res = 0;
     if (is_info) {
         secname = dbg->de_debug_info.dss_name;
         dis     = &dbg->de_info_reading;
         secdp   = &dbg->de_debug_info;
     } else {
         secname = dbg->de_debug_types.dss_name;
         dis =     &dbg->de_types_reading;
         secdp   = &dbg->de_debug_types;
     }
     section_size = secdp->dss_size;
 
     signaturedata = dwarfsig8zero;
     cu_context =
         (Dwarf_CU_Context)_dwarf_get_alloc(dbg, DW_DLA_CU_CONTEXT, 1);
     if (!cu_context) {
         _dwarf_error(dbg, error, DW_DLE_ALLOC_FAIL);
         return DW_DLV_ERROR;
     }
     cu_context->cc_dbg = dbg;
     cu_context->cc_is_info = is_info;
 
     dataptr = is_info? dbg->de_debug_info.dss_data:
         dbg->de_debug_types.dss_data;
     /*  Preliminary sanity checking. */
     if (!dataptr) {
         local_dealloc_cu_context(dbg,cu_context);
         _dwarf_error(dbg, error, DW_DLE_INFO_HEADER_ERROR);
         return DW_DLV_ERROR;
     }
     if (offset >= section_size) {
         local_dealloc_cu_context(dbg,cu_context);
         _dwarf_error(dbg, error, DW_DLE_INFO_HEADER_ERROR);
         return DW_DLV_ERROR;
     }
     if ((offset+4) > section_size) {
         local_dealloc_cu_context(dbg,cu_context);
         _dwarf_error(dbg, error, DW_DLE_INFO_HEADER_ERROR);
         return DW_DLV_ERROR;
     }
     section_end_ptr = dataptr+section_size;
     cu_ptr = (Dwarf_Byte_Ptr) (dataptr+offset);
 
     if (section_name_ends_with_dwo(secname)) {
         cu_context->cc_is_dwo = TRUE;
     }
     res = read_info_area_length_and_check(dbg,
         cu_context,
         offset,
         &cu_ptr,
         section_size,
         section_end_ptr,
         &max_cu_global_offset,
         error);
     if (res != DW_DLV_OK) {
         local_dealloc_cu_context(dbg,cu_context);
         return res;
     }
     local_length_size = cu_context->cc_length_size;
     length = cu_context->cc_length;
     max_cu_local_offset =  length;
     res  = _dwarf_read_cu_version_and_abbrev_offset(dbg,
         cu_ptr,
         is_info,
         local_length_size,
         cu_context,
         section_end_ptr,
         &bytes_read,error);
     if (res != DW_DLV_OK) {
         local_dealloc_cu_context(dbg,cu_context);
         return res;
     }
     version = cu_context->cc_version_stamp;
     cu_ptr += bytes_read;
     unit_type = cu_context->cc_unit_type;
     if (cu_ptr > section_end_ptr) {
         local_dealloc_cu_context(dbg,cu_context);
         _dwarf_error(dbg, error, DW_DLE_INFO_HEADER_ERROR);
         return DW_DLV_ERROR;
     }
 
     /*  In a dwp context, the abbrev_offset is
         still  incomplete.
         We need to add in the base from the .debug_cu_index
         or .debug_tu_index . Done below */
 
     /*  At this point, for DW4, the unit_type is not fully
         correct as we don't know if it is a skeleton or
         a split_compile or split_type */
     if (version ==  DW_CU_VERSION5 ||
         version == DW_CU_VERSION4) {
         /*  DW4/DW5  header fields, depending on UT type.
             See DW5  section 7.5.1.x, DW4
             data is a GNU extension of DW4. */
         switch(unit_type) {
         case DW_UT_split_type:
         case DW_UT_type: {
             types_extra_len = sizeof(Dwarf_Sig8) /* 8 */ +
                 local_length_size /*type_offset size*/;
             break;
         }
         case DW_UT_skeleton:
         case DW_UT_split_compile: {
             types_extra_len = sizeof(Dwarf_Sig8) /* 8 */;
             break;
         }
         case DW_UT_compile: /*  No additional fields */
         case DW_UT_partial: /*  No additional fields */
             break;
         default:
             /*  Data corruption in libdwarf? */
             report_local_unit_type_error(dbg, unit_type,
                 "(DW4 or DW5)",error);
             local_dealloc_cu_context(dbg,cu_context);
             return DW_DLV_ERROR;
         }
     }
 
     /*  Compare the space following the length field
         to the bytes in the CU header. */
     if (length <
         (CU_VERSION_STAMP_SIZE /* is 2 */ +
         local_length_size /*for debug_abbrev offset */ +
         CU_ADDRESS_SIZE_SIZE /* is 1 */ +
         /* and finally size of the rest of the header: */
         types_extra_len)) {
 
         local_dealloc_cu_context(dbg,cu_context);
-        _dwarf_error(dbg, error, DW_DLE_CU_LENGTH_ERROR);
+        _dwarf_error_string(dbg, error, DW_DLE_CU_LENGTH_ERROR,
+             "DW_DLE_CU_LENGTH_ERROR: reading version "
+             "stamp and address size fields");
         return DW_DLV_ERROR;
     }
     /*  Now we can read the fields with some confidence,
         we know the fields of the header are inside
         the section. */
 
     cu_context->cc_unit_type = unit_type;
     switch(unit_type) {
     case DW_UT_split_type:
     case DW_UT_type: {
         int tres = 0;
         /*  ASSERT: DW_CU_VERSION4 or DW_CU_VERSION5,
             determined by logic above.
             Now read the debug_types extra header fields of
             the signature (8 bytes) and the typeoffset.
             This can be in executable, ordinary object
             (as in Type Unit),
             there was no dwo in DWARF4
         */
+        if ((cu_ptr + sizeof(signaturedata)) > section_end_ptr) {
+            _dwarf_error_string(dbg, error, DW_DLE_CU_LENGTH_ERROR,
+                 "DW_DLE_CU_LENGTH_ERROR: reading "
+                 "Dwarf_Sig8 signature field");
+            local_dealloc_cu_context(dbg,cu_context);
+            return DW_DLV_ERROR;
+        }
         memcpy(&signaturedata,cu_ptr,sizeof(signaturedata));
         cu_ptr += sizeof(signaturedata);
         tres = _dwarf_read_unaligned_ck_wrapper(dbg,
             &typeoffset,cu_ptr,local_length_size,
             section_end_ptr,error);
         if (tres != DW_DLV_OK ) {
             local_dealloc_cu_context(dbg,cu_context);
             return tres;
         }
         cu_context->cc_signature = signaturedata;
         cu_context->cc_signature_present = TRUE;
         cu_context->cc_signature_offset = typeoffset;
         if (typeoffset >= max_cu_local_offset) {
             local_dealloc_cu_context(dbg,cu_context);
             _dwarf_error(dbg, error,
                 DW_DLE_DEBUG_TYPEOFFSET_BAD);
             return DW_DLV_ERROR;
         }
         }
         break;
     case DW_UT_skeleton:
     case DW_UT_split_compile: {
+        if ((cu_ptr + sizeof(signaturedata)) > section_end_ptr) {
+            _dwarf_error_string(dbg, error, DW_DLE_CU_LENGTH_ERROR,
+                 "DW_DLE_CU_LENGTH_ERROR: reading "
+                 "Dwarf_Sig8 signature field");
+            local_dealloc_cu_context(dbg,cu_context);
+            return DW_DLV_ERROR;
+        }
         /*  These unit types make a pair and
             paired units have identical signature.*/
         memcpy(&signaturedata,cu_ptr,sizeof(signaturedata));
         cu_context->cc_signature = signaturedata;
         cu_context->cc_signature_present = TRUE;
 
         break;
         }
     /* The following with no additional fields */
     case DW_UT_compile:
     case DW_UT_partial:
         break;
     default: {
         /*  Data corruption in libdwarf? */
         report_local_unit_type_error(dbg, unit_type,
             "",error);
         local_dealloc_cu_context(dbg,cu_context);
         return DW_DLV_ERROR;
         }
     }
     cu_context->cc_abbrev_hash_table =
         (Dwarf_Hash_Table) calloc(1,
         sizeof(struct Dwarf_Hash_Table_s));
     if (!cu_context->cc_abbrev_hash_table) {
         local_dealloc_cu_context(dbg,cu_context);
         _dwarf_error(dbg, error, DW_DLE_ALLOC_FAIL);
         return DW_DLV_ERROR;
     }
     cu_context->cc_debug_offset = offset;
 
     /*  This is recording an overall section value for later
         sanity checking. */
     dis->de_last_offset = max_cu_global_offset;
     *context_out  = cu_context;
     return DW_DLV_OK;
 }
