commit 80dfb7bb3f415dac465f89f8945a1546c4fcc280
Author: Edward Hervey <edward@centricular.com>
Date:   Fri May 4 09:29:22 2018 +0200

    gst: Use memcpy() instead of strncpy() where appropriate
    
    strncpy() is assumed to be for strings so the compiler assumes that
    it will need an extra byte for the string-terminaning NULL.
    
    For cases where we know it's actually "binary" data, just copy it
    with memcpy.
    
    https://bugzilla.gnome.org/show_bug.cgi?id=795756

diff --git a/gst/gstregistrybinary.c b/gst/gstregistrybinary.c
index ab7025437e..2e6451b821 100644
--- a/gst/gstregistrybinary.c
+++ b/gst/gstregistrybinary.c
@@ -335,24 +335,24 @@ inline static gboolean
 gst_registry_binary_initialize_magic (GstBinaryRegistryMagic * m)
 {
   memset (m, 0, sizeof (GstBinaryRegistryMagic));
 
-  if (!strncpy (m->magic, GST_MAGIC_BINARY_REGISTRY_STR,
+  if (!memcpy (m->magic, GST_MAGIC_BINARY_REGISTRY_STR,
           GST_MAGIC_BINARY_REGISTRY_LEN)
       || !strncpy (m->version, GST_MAGIC_BINARY_VERSION_STR,
           GST_MAGIC_BINARY_VERSION_LEN)) {
     GST_ERROR ("Failed to write magic to the registry magic structure");
     return FALSE;
   }
 
   return TRUE;
 }
 
 /**
  * gst_registry_binary_write_cache:
  * @registry: a #GstRegistry
  * @location: a filename
  *
  * Write the @registry to a cache to file at given @location.
  *
  * Returns: %TRUE on success.
  */
diff --git a/libs/gst/helpers/gst-ptp-helper.c b/libs/gst/helpers/gst-ptp-helper.c
index 423c4efd07..91a2570fac 100644
--- a/libs/gst/helpers/gst-ptp-helper.c
+++ b/libs/gst/helpers/gst-ptp-helper.c
@@ -214,294 +214,294 @@ static void
 setup_sockets (void)
 {
   GInetAddress *bind_addr, *mcast_addr;
   GSocketAddress *bind_saddr;
   GSource *socket_event_source, *socket_general_source;
   gchar **probed_ifaces = NULL;
   GError *err = NULL;
 
   /* Create sockets */
   socket_event =
       g_socket_new (G_SOCKET_FAMILY_IPV4, G_SOCKET_TYPE_DATAGRAM,
       G_SOCKET_PROTOCOL_UDP, &err);
   if (!socket_event)
     g_error ("Couldn't create event socket: %s", err->message);
   g_clear_error (&err);
   g_socket_set_multicast_loopback (socket_event, FALSE);
 
   socket_general =
       g_socket_new (G_SOCKET_FAMILY_IPV4, G_SOCKET_TYPE_DATAGRAM,
       G_SOCKET_PROTOCOL_UDP, &err);
   if (!socket_general)
     g_error ("Couldn't create general socket: %s", err->message);
   g_clear_error (&err);
   g_socket_set_multicast_loopback (socket_general, FALSE);
 
   /* Bind sockets */
   bind_addr = g_inet_address_new_any (G_SOCKET_FAMILY_IPV4);
   bind_saddr = g_inet_socket_address_new (bind_addr, PTP_EVENT_PORT);
   if (!g_socket_bind (socket_event, bind_saddr, TRUE, &err))
     g_error ("Couldn't bind event socket: %s", err->message);
   g_object_unref (bind_saddr);
   bind_saddr = g_inet_socket_address_new (bind_addr, PTP_GENERAL_PORT);
   if (!g_socket_bind (socket_general, bind_saddr, TRUE, &err))
     g_error ("Couldn't bind general socket: %s", err->message);
   g_object_unref (bind_saddr);
   g_object_unref (bind_addr);
 
   /* Probe all non-loopback interfaces */
   if (!ifaces) {
 #if defined(HAVE_SIOCGIFCONF_SIOCGIFFLAGS_SIOCGIFHWADDR)
     struct ifreq ifr;
     struct ifconf ifc;
     gchar buf[8192];
 
     ifc.ifc_len = sizeof (buf);
     ifc.ifc_buf = buf;
     if (ioctl (g_socket_get_fd (socket_event), SIOCGIFCONF, &ifc) != -1) {
       guint i, idx = 0;
 
       probed_ifaces = g_new0 (gchar *, ifc.ifc_len + 1);
 
       for (i = 0; i < ifc.ifc_len / sizeof (struct ifreq); i++) {
         strncpy (ifr.ifr_name, ifc.ifc_req[i].ifr_name, IFNAMSIZ);
         if (ioctl (g_socket_get_fd (socket_event), SIOCGIFFLAGS, &ifr) == 0) {
           if ((ifr.ifr_flags & IFF_LOOPBACK))
             continue;
           probed_ifaces[idx] = g_strndup (ifc.ifc_req[i].ifr_name, IFNAMSIZ);
           idx++;
         } else {
           g_warning ("can't get flags of interface '%s'",
               ifc.ifc_req[i].ifr_name);
           probed_ifaces[idx] = g_strndup (ifc.ifc_req[i].ifr_name, IFNAMSIZ);
           idx++;
         }
         if (idx != 0)
           ifaces = probed_ifaces;
       }
     }
 #elif defined(HAVE_GETIFADDRS_AF_LINK)
     struct ifaddrs *ifaddr, *ifa;
 
     if (getifaddrs (&ifaddr) != -1) {
       GPtrArray *arr;
 
       arr = g_ptr_array_new ();
 
       for (ifa = ifaddr; ifa; ifa = ifa->ifa_next) {
         if ((ifa->ifa_flags & IFF_LOOPBACK))
           continue;
 
         if (!ifa->ifa_addr || ifa->ifa_addr->sa_family != AF_LINK)
           continue;
 
         g_ptr_array_add (arr, g_strdup (ifa->ifa_name));
       }
       freeifaddrs (ifaddr);
 
       g_ptr_array_add (arr, NULL);
       ifaces = probed_ifaces = (gchar **) g_ptr_array_free (arr, FALSE);
     }
 #else
 #warning "Implement something to list all network interfaces"
 #endif
   }
 
   /* Get a clock id from the MAC address if none was given */
   if (clock_id == (guint64) - 1) {
     gboolean success = FALSE;
 
 #if defined(HAVE_SIOCGIFCONF_SIOCGIFFLAGS_SIOCGIFHWADDR)
     struct ifreq ifr;
 
     if (ifaces) {
       gchar **ptr = ifaces;
 
       while (*ptr) {
-        strncpy (ifr.ifr_name, *ptr, IFNAMSIZ);
+        memcpy (ifr.ifr_name, *ptr, IFNAMSIZ);
         if (ioctl (g_socket_get_fd (socket_event), SIOCGIFHWADDR, &ifr) == 0) {
           clock_id_array[0] = ifr.ifr_hwaddr.sa_data[0];
           clock_id_array[1] = ifr.ifr_hwaddr.sa_data[1];
           clock_id_array[2] = ifr.ifr_hwaddr.sa_data[2];
           clock_id_array[3] = 0xff;
           clock_id_array[4] = 0xfe;
           clock_id_array[5] = ifr.ifr_hwaddr.sa_data[3];
           clock_id_array[6] = ifr.ifr_hwaddr.sa_data[4];
           clock_id_array[7] = ifr.ifr_hwaddr.sa_data[5];
           success = TRUE;
           break;
         }
       }
 
       ptr++;
     } else {
       struct ifconf ifc;
       gchar buf[8192];
 
       ifc.ifc_len = sizeof (buf);
       ifc.ifc_buf = buf;
       if (ioctl (g_socket_get_fd (socket_event), SIOCGIFCONF, &ifc) != -1) {
         guint i;
 
         for (i = 0; i < ifc.ifc_len / sizeof (struct ifreq); i++) {
           strncpy (ifr.ifr_name, ifc.ifc_req[i].ifr_name, IFNAMSIZ);
           if (ioctl (g_socket_get_fd (socket_event), SIOCGIFFLAGS, &ifr) == 0) {
             if ((ifr.ifr_flags & IFF_LOOPBACK))
               continue;
 
             if (ioctl (g_socket_get_fd (socket_event), SIOCGIFHWADDR,
                     &ifr) == 0) {
               clock_id_array[0] = ifr.ifr_hwaddr.sa_data[0];
               clock_id_array[1] = ifr.ifr_hwaddr.sa_data[1];
               clock_id_array[2] = ifr.ifr_hwaddr.sa_data[2];
               clock_id_array[3] = 0xff;
               clock_id_array[4] = 0xfe;
               clock_id_array[5] = ifr.ifr_hwaddr.sa_data[3];
               clock_id_array[6] = ifr.ifr_hwaddr.sa_data[4];
               clock_id_array[7] = ifr.ifr_hwaddr.sa_data[5];
               success = TRUE;
               break;
             }
           } else {
             g_warning ("can't get flags of interface '%s'",
                 ifc.ifc_req[i].ifr_name);
           }
         }
       }
     }
 #elif defined(HAVE_GETIFADDRS_AF_LINK)
     struct ifaddrs *ifaddr, *ifa;
 
     if (getifaddrs (&ifaddr) != -1) {
       for (ifa = ifaddr; ifa; ifa = ifa->ifa_next) {
         struct sockaddr_dl *sdl = (struct sockaddr_dl *) ifa->ifa_addr;
         guint8 mac_addr[6];
 
         if ((ifa->ifa_flags & IFF_LOOPBACK))
           continue;
 
         if (!ifa->ifa_addr || ifa->ifa_addr->sa_family != AF_LINK)
           continue;
 
         if (ifaces) {
           gchar **p = ifaces;
           gboolean found = FALSE;
 
           while (*p) {
             if (strcmp (*p, ifa->ifa_name) == 0) {
               found = TRUE;
               break;
             }
             p++;
           }
 
           if (!found)
             continue;
         }
 
         if (sdl->sdl_alen != 6)
           continue;
 
         memcpy (mac_addr, LLADDR (sdl), sdl->sdl_alen);
 
         clock_id_array[0] = mac_addr[0];
         clock_id_array[1] = mac_addr[1];
         clock_id_array[2] = mac_addr[2];
         clock_id_array[3] = 0xff;
         clock_id_array[4] = 0xfe;
         clock_id_array[5] = mac_addr[3];
         clock_id_array[6] = mac_addr[4];
         clock_id_array[7] = mac_addr[5];
         success = TRUE;
         break;
       }
 
       freeifaddrs (ifaddr);
     }
 #else
 #warning "Implement something to get MAC addresses of network interfaces"
 #endif
 
     if (!success) {
       g_warning ("can't get any MAC address, using random clock id");
       clock_id = (((guint64) g_random_int ()) << 32) | (g_random_int ());
       GST_WRITE_UINT64_BE (clock_id_array, clock_id);
       clock_id_array[3] = 0xff;
       clock_id_array[4] = 0xfe;
     }
   } else {
     GST_WRITE_UINT64_BE (clock_id_array, clock_id);
   }
 
   /* Join multicast groups */
   mcast_addr = g_inet_address_new_from_string (PTP_MULTICAST_GROUP);
   if (ifaces) {
     gchar **ptr = ifaces;
     gboolean success = FALSE;
 
     while (*ptr) {
       gint c = 0;
       if (!g_socket_join_multicast_group (socket_event, mcast_addr, FALSE, *ptr,
               &err)
           && !g_error_matches (err, G_IO_ERROR, G_IO_ERROR_ADDRESS_IN_USE))
         g_warning ("Couldn't join multicast group on interface '%s': %s", *ptr,
             err->message);
       else
         c++;
       g_clear_error (&err);
 
       if (!g_socket_join_multicast_group (socket_general, mcast_addr, FALSE,
               *ptr, &err)
           && !g_error_matches (err, G_IO_ERROR, G_IO_ERROR_ADDRESS_IN_USE))
         g_warning ("Couldn't join multicast group on interface '%s': %s", *ptr,
             err->message);
       else
         c++;
       g_clear_error (&err);
 
       if (c == 2)
         success = TRUE;
       ptr++;
     }
 
     if (!success) {
       /* Join multicast group without any interface */
       if (!g_socket_join_multicast_group (socket_event, mcast_addr, FALSE, NULL,
               &err))
         g_error ("Couldn't join multicast group: %s", err->message);
       g_clear_error (&err);
       if (!g_socket_join_multicast_group (socket_general, mcast_addr, FALSE,
               NULL, &err))
         g_error ("Couldn't join multicast group: %s", err->message);
       g_clear_error (&err);
     }
   } else {
     /* Join multicast group without any interface */
     if (!g_socket_join_multicast_group (socket_event, mcast_addr, FALSE, NULL,
             &err))
       g_error ("Couldn't join multicast group: %s", err->message);
     g_clear_error (&err);
     if (!g_socket_join_multicast_group (socket_general, mcast_addr, FALSE, NULL,
             &err))
       g_error ("Couldn't join multicast group: %s", err->message);
     g_clear_error (&err);
   }
 
   event_saddr = g_inet_socket_address_new (mcast_addr, PTP_EVENT_PORT);
   general_saddr = g_inet_socket_address_new (mcast_addr, PTP_GENERAL_PORT);
 
   /* Create socket sources */
   socket_event_source =
       g_socket_create_source (socket_event, G_IO_IN | G_IO_PRI, NULL);
   g_source_set_priority (socket_event_source, G_PRIORITY_HIGH);
   g_source_set_callback (socket_event_source, (GSourceFunc) have_socket_data_cb,
       NULL, NULL);
   g_source_attach (socket_event_source, NULL);
   socket_general_source =
       g_socket_create_source (socket_general, G_IO_IN | G_IO_PRI, NULL);
   g_source_set_priority (socket_general_source, G_PRIORITY_DEFAULT);
   g_source_set_callback (socket_general_source,
       (GSourceFunc) have_socket_data_cb, NULL, NULL);
   g_source_attach (socket_general_source, NULL);
 
   g_strfreev (probed_ifaces);
 }
