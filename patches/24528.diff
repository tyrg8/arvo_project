commit 0a9dc7bf4dcbfeeb99dd99d5d40e8821b8a885a1
Author: Nickolay Olshevsky <o.nickolay@gmail.com>
Date:   Fri Jul 31 14:30:58 2020 +0300

    Check string lengths when using strncmp for minimum bounds.

diff --git a/src/librekey/key_store_g10.cpp b/src/librekey/key_store_g10.cpp
index ab626bdc..bb583596 100644
--- a/src/librekey/key_store_g10.cpp
+++ b/src/librekey/key_store_g10.cpp
@@ -760,166 +760,164 @@ static bool
 parse_protected_seckey(pgp_key_pkt_t *seckey, s_exp_t *s_exp, const char *password)
 {
     const format_info *   format;
     bool                  ret = false;
     s_exp_t               decrypted_s_exp = {0};
     s_exp_t *             alg = NULL;
     s_exp_t *             params = NULL;
     s_exp_block_t *       protected_at_data = NULL;
     sub_element_t *       sub_el = NULL;
     pgp_key_protection_t *prot;
 
     // find and validate the protected section
     s_exp_t *protected_key = lookup_variable(s_exp, "protected");
     if (!protected_key) {
         RNP_LOG("missing protected section");
         goto done;
     }
     if (sub_element_count(protected_key) != 4 || !sub_element_at(protected_key, 1)->is_block ||
         sub_element_at(protected_key, 2)->is_block ||
         !sub_element_at(protected_key, 3)->is_block) {
         RNP_LOG("Wrong protected format, expected: (protected mode (parms) "
                 "encrypted_octet_string)\n");
         goto done;
     }
 
     // lookup the protection format
     sub_el = sub_element_at(protected_key, 1);
     format = parse_format((const char *) sub_el->block.bytes, sub_el->block.len);
     if (format == NULL) {
         RNP_LOG("Unsupported protected mode: '%.*s'\n",
                 (int) sub_el->block.len,
                 sub_el->block.bytes);
         goto done;
     }
 
     // fill in some fields based on the lookup above
     prot = &seckey->sec_protection;
     prot->symm_alg = format->cipher;
     prot->cipher_mode = format->cipher_mode;
     prot->s2k.hash_alg = format->hash_alg;
 
     // locate and validate the protection parameters
     params = &sub_element_at(protected_key, 2)->s_exp;
     if (sub_element_count(params) != 2 || sub_element_at(params, 0)->is_block ||
         !sub_element_at(params, 1)->is_block) {
         RNP_LOG("Wrong params format, expected: ((hash salt no_of_iterations) iv)\n");
         goto done;
     }
 
     // locate and validate the (hash salt no_of_iterations) exp
     alg = &sub_element_at(params, 0)->s_exp;
     if (sub_element_count(alg) != 3 || !sub_element_at(alg, 0)->is_block ||
         !sub_element_at(alg, 1)->is_block || !sub_element_at(alg, 2)->is_block) {
         RNP_LOG("Wrong params sub-level format, expected: (hash salt no_of_iterations)\n");
         goto done;
     }
     sub_el = sub_element_at(alg, 0);
-    if (strncmp("sha1", (const char *) sub_el->block.bytes, sub_el->block.len) != 0) {
+    if ((sub_el->block.len != 4) || memcmp("sha1", sub_el->block.bytes, 4)) {
         RNP_LOG("Wrong hashing algorithm, should be sha1 but %.*s\n",
                 (int) sub_el->block.len,
                 sub_el->block.bytes);
         goto done;
     }
 
     // fill in some constant values
     prot->s2k.hash_alg = PGP_HASH_SHA1;
     prot->s2k.usage = PGP_S2KU_ENCRYPTED_AND_HASHED;
     prot->s2k.specifier = PGP_S2KS_ITERATED_AND_SALTED;
 
     // check salt size
     sub_el = sub_element_at(alg, 1);
     if (sub_el->block.len != PGP_SALT_SIZE) {
         RNP_LOG(
           "Wrong salt size, should be %d but %d\n", PGP_SALT_SIZE, (int) sub_el->block.len);
         goto done;
     }
 
     // salt
     memcpy(prot->s2k.salt, sub_el->block.bytes, sub_el->block.len);
     // s2k iterations
     sub_el = sub_element_at(alg, 2);
     prot->s2k.iterations = block_to_unsigned(&sub_el->block);
     if (prot->s2k.iterations == UINT_MAX) {
         RNP_LOG(
           "Wrong numbers of iteration, %.*s\n", (int) sub_el->block.len, sub_el->block.bytes);
         goto done;
     }
 
     // iv
     sub_el = sub_element_at(params, 1);
     if (sub_el->block.len != format->iv_size) {
         RNP_LOG("Wrong nonce size, should be %zu but %d\n",
                 format->iv_size,
                 (int) sub_el->block.len);
         goto done;
     }
     memcpy(prot->iv, sub_el->block.bytes, sub_el->block.len);
 
     // we're all done if no password was provided (decryption not requested)
     if (!password) {
         seckey->material.secret = false;
         ret = true;
         goto done;
     }
 
     // password was provided, so decrypt
     sub_el = sub_element_at(protected_key, 3);
     if (!decrypt_protected_section(
           sub_el->block.bytes, sub_el->block.len, seckey, password, &decrypted_s_exp)) {
         goto done;
     }
     // see if we have a protected-at section
     protected_at_data = lookup_variable_data(s_exp, "protected-at");
     char protected_at[G10_PROTECTED_AT_SIZE];
     if (protected_at_data) {
         if (protected_at_data->len != G10_PROTECTED_AT_SIZE) {
             RNP_LOG("protected-at has wrong length: %zu, expected, %d\n",
                     protected_at_data->len,
                     G10_PROTECTED_AT_SIZE);
             goto done;
         }
         memcpy(protected_at, protected_at_data->bytes, protected_at_data->len);
     }
     // parse MPIs
     if (!parse_seckey(seckey, &sub_element_at(&decrypted_s_exp, 0)->s_exp, seckey->alg)) {
         RNP_LOG("failed to parse seckey");
         goto done;
     }
     // check hash, if present
     if (sub_element_count(&decrypted_s_exp) > 1) {
         sub_el = sub_element_at(&decrypted_s_exp, 1);
         if (sub_el->is_block || sub_element_count(&sub_el->s_exp) < 3 ||
             !sub_element_at(&sub_el->s_exp, 0)->is_block ||
             !sub_element_at(&sub_el->s_exp, 1)->is_block ||
             !sub_element_at(&sub_el->s_exp, 2)->is_block ||
-            strncmp("hash",
-                    (const char *) sub_element_at(&sub_el->s_exp, 0)->block.bytes,
-                    sub_element_at(&sub_el->s_exp, 0)->block.len) != 0) {
+            (sub_element_at(&sub_el->s_exp, 0)->block.len != 4) ||
+            memcmp("hash", sub_element_at(&sub_el->s_exp, 0)->block.bytes, 4)) {
             RNP_LOG("Has got wrong hash block at encrypted key data.");
             goto done;
         }
 
-        if (strncmp("sha1",
-                    (const char *) sub_element_at(&sub_el->s_exp, 1)->block.bytes,
-                    sub_element_at(&sub_el->s_exp, 1)->block.len) != 0) {
+        if ((sub_element_at(&sub_el->s_exp, 1)->block.len != 4) ||
+            memcmp("sha1", sub_element_at(&sub_el->s_exp, 1)->block.bytes, 4)) {
             RNP_LOG("Supported only sha1 hash at encrypted private key.");
             goto done;
         }
 
         uint8_t checkhash[G10_SHA1_HASH_SIZE];
         if (!g10_calculated_hash(seckey, protected_at, checkhash)) {
             RNP_LOG("failed to calculate hash");
             goto done;
         }
 
         sub_el = sub_element_at(&sub_el->s_exp, 2);
         if (sub_el->block.len != G10_SHA1_HASH_SIZE ||
             memcmp(checkhash, sub_el->block.bytes, G10_SHA1_HASH_SIZE) != 0) {
             RNP_DHEX("Expected hash", checkhash, G10_SHA1_HASH_SIZE);
             RNP_DHEX("Has hash", sub_el->block.bytes, sub_el->block.len);
             RNP_LOG("Incorrect hash at encrypted private key.");
             goto done;
         }
     }
     seckey->material.secret = true;
     ret = true;
@@ -933,102 +931,103 @@ static bool
 g10_parse_seckey(pgp_key_pkt_t *seckey,
                  const uint8_t *data,
                  size_t         data_len,
                  const char *   password)
 {
     s_exp_t          s_exp = {0};
     bool             ret = false;
     pgp_pubkey_alg_t alg = PGP_PKA_NOTHING;
     s_exp_t *        algorithm_s_exp = NULL;
     s_exp_block_t *  block = NULL;
     bool             is_protected = false;
 
     RNP_DHEX("S-exp", (const uint8_t *) data, data_len);
 
     const char *bytes = (const char *) data;
     if (!parse_sexp(&s_exp, &bytes, &data_len)) {
         goto done;
     }
 
     /* expected format:
      *  (<type>
      *    (<algo>
      *	   (x <mpi>)
      *	   (y <mpi>)
      *    )
      *  )
      */
 
     if (sub_element_count(&s_exp) != 2 || !sub_element_at(&s_exp, 0)->is_block ||
         sub_element_at(&s_exp, 1)->is_block) {
         RNP_LOG("Wrong format, expected: (<type> (...))");
         goto done;
     }
 
     block = &sub_element_at(&s_exp, 0)->block;
-    if (!strncmp("private-key", (const char *) block->bytes, block->len)) {
+    if ((block->len == 11) && !memcmp("private-key", block->bytes, block->len)) {
         is_protected = false;
-    } else if (!strncmp("protected-private-key", (const char *) block->bytes, block->len)) {
+    } else if ((block->len == 21) &&
+               !memcmp("protected-private-key", block->bytes, block->len)) {
         is_protected = true;
     } else {
         RNP_LOG("Unsupported top-level block: '%.*s'", (int) block->len, block->bytes);
         goto done;
     }
 
     algorithm_s_exp = &sub_element_at(&s_exp, 1)->s_exp;
 
     if (sub_element_count(algorithm_s_exp) < 2) {
         RNP_LOG("Wrong count of algorithm-level elements: %d, should great than 1",
                 (int) sub_element_count(algorithm_s_exp));
         goto done;
     }
 
     if (!sub_element_at(algorithm_s_exp, 0)->is_block) {
         RNP_LOG("Expected block with algorithm name, but has s-exp");
         goto done;
     }
 
     block = &sub_element_at(algorithm_s_exp, 0)->block;
     alg = PGP_PKA_NOTHING;
     for (size_t i = 0; i < ARRAY_SIZE(g10_alg_aliases); i++) {
         if (strlen(g10_alg_aliases[i].string) != block->len) {
             continue;
         }
         if (!memcmp(g10_alg_aliases[i].string, block->bytes, block->len)) {
             alg = (pgp_pubkey_alg_t) g10_alg_aliases[i].type;
             break;
         }
     }
 
     if (alg == PGP_PKA_NOTHING) {
         RNP_LOG("Unsupported algorithm: '%.*s'", (int) block->len, block->bytes);
         goto done;
     }
 
     if (!parse_pubkey(seckey, algorithm_s_exp, alg)) {
         RNP_LOG("failed to parse pubkey");
         goto done;
     }
 
     if (is_protected) {
         if (!parse_protected_seckey(seckey, algorithm_s_exp, password)) {
             goto done;
         }
     } else {
         seckey->sec_protection.s2k.usage = PGP_S2KU_NONE;
         seckey->sec_protection.symm_alg = PGP_SA_PLAINTEXT;
         seckey->sec_protection.s2k.hash_alg = PGP_HASH_UNKNOWN;
         if (!parse_seckey(seckey, algorithm_s_exp, alg)) {
             RNP_LOG("failed to parse seckey");
             goto done;
         }
     }
 
     if (rnp_get_debug(__FILE__)) {
         pgp_key_grip_t grip;
         char           grips[PGP_KEY_GRIP_SIZE * 3];
         if (rnp_key_store_get_key_grip(&seckey->material, grip)) {
             RNP_LOG("loaded G10 key with GRIP: %s\n",
                     rnp_strhexdump_upper(grips, grip.data(), grip.size(), ""));
         }
     }
     ret = true;
diff --git a/src/librepgp/stream-armor.cpp b/src/librepgp/stream-armor.cpp
index e11bbba5..b7fbe14f 100644
--- a/src/librepgp/stream-armor.cpp
+++ b/src/librepgp/stream-armor.cpp
@@ -187,29 +187,29 @@ static bool
 armor_read_trailer(pgp_source_t *src)
 {
     char                        st[64];
     char                        str[64];
     size_t                      stlen;
     pgp_source_armored_param_t *param = (pgp_source_armored_param_t *) src->param;
 
     if (!armor_skip_chars(param->readsrc, "\r\n")) {
         return false;
     }
 
     stlen = strlen(param->armorhdr);
-    if (stlen + 8 + 1 <= sizeof(st)) {
+    if ((stlen > 5) && (stlen + 8 + 1 <= sizeof(st))) {
         memcpy(st, ST_ARMOR_END, 8); /* 8 here is mandatory */
         memcpy(st + 8, param->armorhdr + 5, stlen - 5);
         memcpy(st + stlen + 3, ST_DASHES, 5);
         stlen += 8;
     } else {
         RNP_LOG("Internal error");
         return false;
     }
     if (!src_peek_eq(param->readsrc, str, stlen) || strncmp(str, st, stlen)) {
         return false;
     }
     src_skip(param->readsrc, stlen);
     (void) armor_skip_chars(param->readsrc, "\t ");
     (void) src_skip_eol(param->readsrc);
     return true;
 }
@@ -453,30 +453,37 @@ find_armor_header(const char *buf, size_t len, size_t *hdrlen)
     return NULL;
 }
 
+static bool
+str_equals(const char *str, size_t len, const char *another)
+{
+    size_t alen = strlen(another);
+    return (len == alen) && !memcmp(str, another, alen);
+}
+
 static pgp_armored_msg_t
 armor_str_to_data_type(const char *str, size_t len)
 {
     if (!str) {
         return PGP_ARMORED_UNKNOWN;
     }
-    if (!strncmp(str, "BEGIN PGP MESSAGE", len)) {
+    if (str_equals(str, len, "BEGIN PGP MESSAGE")) {
         return PGP_ARMORED_MESSAGE;
     }
-    if (!strncmp(str, "BEGIN PGP PUBLIC KEY BLOCK", len) ||
-        !strncmp(str, "BEGIN PGP PUBLIC KEY", len)) {
+    if (str_equals(str, len, "BEGIN PGP PUBLIC KEY BLOCK") ||
+        str_equals(str, len, "BEGIN PGP PUBLIC KEY")) {
         return PGP_ARMORED_PUBLIC_KEY;
     }
-    if (!strncmp(str, "BEGIN PGP SECRET KEY BLOCK", len) ||
-        !strncmp(str, "BEGIN PGP SECRET KEY", len) ||
-        !strncmp(str, "BEGIN PGP PRIVATE KEY BLOCK", len) ||
-        !strncmp(str, "BEGIN PGP PRIVATE KEY", len)) {
+    if (str_equals(str, len, "BEGIN PGP SECRET KEY BLOCK") ||
+        str_equals(str, len, "BEGIN PGP SECRET KEY") ||
+        str_equals(str, len, "BEGIN PGP PRIVATE KEY BLOCK") ||
+        str_equals(str, len, "BEGIN PGP PRIVATE KEY")) {
         return PGP_ARMORED_SECRET_KEY;
     }
-    if (!strncmp(str, "BEGIN PGP SIGNATURE", len)) {
+    if (str_equals(str, len, "BEGIN PGP SIGNATURE")) {
         return PGP_ARMORED_SIGNATURE;
     }
-    if (!strncmp(str, "BEGIN PGP SIGNED MESSAGE", len)) {
+    if (str_equals(str, len, "BEGIN PGP SIGNED MESSAGE")) {
         return PGP_ARMORED_CLEARTEXT;
     }
     return PGP_ARMORED_UNKNOWN;
 }
@@ -594,55 +601,55 @@ static bool
 armor_parse_headers(pgp_source_t *src)
 {
     pgp_source_armored_param_t *param = (pgp_source_armored_param_t *) src->param;
     char                        header[1024] = {0};
 
     do {
         size_t hdrlen = 0;
         if (!src_peek_line(param->readsrc, header, sizeof(header), &hdrlen)) {
             /* if line is too long let's cut it to the reasonable size */
             src_skip(param->readsrc, hdrlen);
             if ((hdrlen != sizeof(header) - 1) || !armor_skip_line(param->readsrc)) {
                 RNP_LOG("failed to peek line: unexpected end of data");
                 return false;
             }
             RNP_LOG("Too long armor header - truncated.");
             header[hdrlen] = '\0';
         } else if (hdrlen) {
             src_skip(param->readsrc, hdrlen);
         } else {
             /* empty line - end of the headers */
             return src_skip_eol(param->readsrc);
         }
 
         char *hdrval = (char *) malloc(hdrlen + 1);
         if (!hdrval) {
             RNP_LOG("malloc failed");
             return false;
         }
 
-        if (strncmp(header, ST_HEADER_VERSION, 9) == 0) {
+        if ((hdrlen >= 9) && !strncmp(header, ST_HEADER_VERSION, 9)) {
             memcpy(hdrval, header + 9, hdrlen - 8);
             free(param->version);
             param->version = hdrval;
-        } else if (strncmp(header, ST_HEADER_COMMENT, 9) == 0) {
+        } else if ((hdrlen >= 9) && !strncmp(header, ST_HEADER_COMMENT, 9)) {
             memcpy(hdrval, header + 9, hdrlen - 8);
             free(param->comment);
             param->comment = hdrval;
-        } else if (strncmp(header, ST_HEADER_HASH, 6) == 0) {
+        } else if ((hdrlen >= 5) && !strncmp(header, ST_HEADER_HASH, 6)) {
             memcpy(hdrval, header + 6, hdrlen - 5);
             free(param->hash);
             param->hash = hdrval;
-        } else if (strncmp(header, ST_HEADER_CHARSET, 9) == 0) {
+        } else if ((hdrlen >= 9) && !strncmp(header, ST_HEADER_CHARSET, 9)) {
             memcpy(hdrval, header + 9, hdrlen - 8);
             free(param->charset);
             param->charset = hdrval;
         } else {
             RNP_LOG("unknown header '%s'", header);
             free(hdrval);
         }
 
         if (!src_skip_eol(param->readsrc)) {
             return false;
         }
     } while (1);
 }
diff --git a/src/librepgp/stream-parse.cpp b/src/librepgp/stream-parse.cpp
index c9c6040a..a294e31d 100644
--- a/src/librepgp/stream-parse.cpp
+++ b/src/librepgp/stream-parse.cpp
@@ -989,48 +989,48 @@ static bool
 cleartext_parse_headers(pgp_source_t *src)
 {
     pgp_source_signed_param_t *param = (pgp_source_signed_param_t *) src->param;
     char                       hdr[1024] = {0};
     char *                     hval;
     pgp_hash_alg_t             halg;
     size_t                     hdrlen;
 
     do {
         if (!src_peek_line(param->readsrc, hdr, sizeof(hdr), &hdrlen)) {
             RNP_LOG("failed to peek line");
             return false;
         }
 
         if (!hdrlen) {
             break;
         }
 
-        if (strncmp(hdr, ST_HEADER_HASH, 6) == 0) {
+        if ((hdrlen >= 6) && !strncmp(hdr, ST_HEADER_HASH, 6)) {
             hval = hdr + 6;
 
             std::string remainder = hval;
 
             const std::string        delimiters = ", \t";
             std::vector<std::string> tokens;
 
             tokenize(remainder, delimiters, tokens);
 
             for (const auto &token : tokens) {
                 if ((halg = pgp_str_to_hash_alg(token.c_str())) == PGP_HASH_UNKNOWN) {
                     RNP_LOG("unknown halg: %s", token.c_str());
                 }
                 pgp_hash_list_add(param->hashes, halg);
             }
         } else {
             RNP_LOG("unknown header '%s'", hdr);
         }
 
         src_skip(param->readsrc, hdrlen);
 
         if (!src_skip_eol(param->readsrc)) {
             return false;
         }
     } while (1);
 
     /* we have exactly one empty line after the headers */
     return src_skip_eol(param->readsrc);
 }
diff --git a/src/tests/data/test_stream_armor/too_short_header.asc b/src/tests/data/test_stream_armor/too_short_header.asc
new file mode 100644
index 00000000..0d4db207
--- /dev/null
+++ b/src/tests/data/test_stream_armor/too_short_header.asc
@@ -0,0 +1,4 @@
+----------
+-----BEGIN PGP 
+
+=azaS
diff --git a/src/tests/ffi.cpp b/src/tests/ffi.cpp
index d819f9e3..a3d88423 100644
--- a/src/tests/ffi.cpp
+++ b/src/tests/ffi.cpp
@@ -4584,111 +4584,119 @@ TEST_F(rnp_tests, test_ffi_enarmor_dearmor)
 TEST_F(rnp_tests, test_ffi_dearmor_edge_cases)
 {
     rnp_input_t  input = NULL;
     rnp_output_t output = NULL;
 
     assert_rnp_success(
       rnp_input_from_path(&input, "data/test_stream_armor/long_header_line.asc"));
     assert_rnp_success(rnp_output_to_memory(&output, 0));
     assert_rnp_success(rnp_dearmor(input, output));
     uint8_t *buf = NULL;
     size_t   len = 0;
     assert_rnp_success(rnp_output_memory_get_buf(output, &buf, &len, false));
     assert_int_equal(len, 2226);
     rnp_input_destroy(input);
     rnp_output_destroy(output);
 
     assert_rnp_success(
       rnp_input_from_path(&input, "data/test_stream_armor/empty_header_line.asc"));
     assert_rnp_success(rnp_output_to_memory(&output, 0));
     assert_rnp_success(rnp_dearmor(input, output));
     buf = NULL;
     len = 0;
     assert_rnp_success(rnp_output_memory_get_buf(output, &buf, &len, false));
     assert_int_equal(len, 2226);
     rnp_input_destroy(input);
     rnp_output_destroy(output);
 
     assert_rnp_success(
       rnp_input_from_path(&input, "data/test_stream_armor/duplicate_header_line.asc"));
     assert_rnp_success(rnp_output_to_memory(&output, 0));
     assert_rnp_success(rnp_dearmor(input, output));
     buf = NULL;
     len = 0;
     assert_rnp_success(rnp_output_memory_get_buf(output, &buf, &len, false));
     assert_int_equal(len, 2226);
     rnp_input_destroy(input);
     rnp_output_destroy(output);
 
     assert_rnp_success(
       rnp_input_from_path(&input, "data/test_stream_armor/long_header_line_1024.asc"));
     assert_rnp_success(rnp_output_to_memory(&output, 0));
     assert_rnp_success(rnp_dearmor(input, output));
     buf = NULL;
     len = 0;
     assert_rnp_success(rnp_output_memory_get_buf(output, &buf, &len, false));
     assert_int_equal(len, 2226);
     rnp_input_destroy(input);
     rnp_output_destroy(output);
 
     assert_rnp_success(
       rnp_input_from_path(&input, "data/test_stream_armor/wrong_header_line.asc"));
     assert_rnp_success(rnp_output_to_memory(&output, 0));
     assert_rnp_success(rnp_dearmor(input, output));
     buf = NULL;
     len = 0;
     assert_rnp_success(rnp_output_memory_get_buf(output, &buf, &len, false));
     assert_int_equal(len, 2226);
     rnp_input_destroy(input);
     rnp_output_destroy(output);
 
     /* invalid, > 127 (negative char), preceding the armor header - just warning */
     assert_rnp_success(
       rnp_input_from_path(&input, "data/test_stream_armor/wrong_chars_header.asc"));
     assert_rnp_success(rnp_output_to_memory(&output, 0));
     assert_rnp_success(rnp_dearmor(input, output));
     buf = NULL;
     len = 0;
     assert_rnp_success(rnp_output_memory_get_buf(output, &buf, &len, false));
     assert_int_equal(len, 2226);
     rnp_input_destroy(input);
     rnp_output_destroy(output);
 
     /* invalid, > 127, base64 chars at positions 1..4 */
     assert_rnp_success(
       rnp_input_from_path(&input, "data/test_stream_armor/wrong_chars_base64_1.asc"));
     assert_rnp_success(rnp_output_to_memory(&output, 0));
     assert_rnp_failure(rnp_dearmor(input, output));
     rnp_input_destroy(input);
     rnp_output_destroy(output);
 
     assert_rnp_success(
       rnp_input_from_path(&input, "data/test_stream_armor/wrong_chars_base64_2.asc"));
     assert_rnp_success(rnp_output_to_memory(&output, 0));
     assert_rnp_failure(rnp_dearmor(input, output));
     rnp_input_destroy(input);
     rnp_output_destroy(output);
 
     assert_rnp_success(
       rnp_input_from_path(&input, "data/test_stream_armor/wrong_chars_base64_3.asc"));
     assert_rnp_success(rnp_output_to_memory(&output, 0));
     assert_rnp_failure(rnp_dearmor(input, output));
     rnp_input_destroy(input);
     rnp_output_destroy(output);
 
     assert_rnp_success(
       rnp_input_from_path(&input, "data/test_stream_armor/wrong_chars_base64_4.asc"));
     assert_rnp_success(rnp_output_to_memory(&output, 0));
     assert_rnp_failure(rnp_dearmor(input, output));
     rnp_input_destroy(input);
     rnp_output_destroy(output);
 
     /* invalid, > 127 base64 char in the crc */
     assert_rnp_success(
       rnp_input_from_path(&input, "data/test_stream_armor/wrong_chars_crc.asc"));
     assert_rnp_success(rnp_output_to_memory(&output, 0));
     assert_rnp_failure(rnp_dearmor(input, output));
     rnp_input_destroy(input);
     rnp_output_destroy(output);
+
+    /* too short armor header */
+    assert_rnp_success(
+      rnp_input_from_path(&input, "data/test_stream_armor/too_short_header.asc"));
+    assert_rnp_success(rnp_output_to_memory(&output, 0));
+    assert_rnp_failure(rnp_dearmor(input, output));
+    rnp_input_destroy(input);
+    rnp_output_destroy(output);
 }
 
 TEST_F(rnp_tests, test_ffi_customized_enarmor)
