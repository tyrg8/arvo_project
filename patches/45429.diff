commit df14a0788709cebb933296b4e5e64ed619d5a77d
Merge: 46c0be5eb2 770a544af4
Author: Dmitry Stogov <dmitry@zend.com>
Date:   Fri Mar 11 14:31:32 2022 +0300

    Merge branch 'PHP-8.1'
    
    * PHP-8.1:
      Optimizer: Fix inorrect constant substitution in FETCH_LIST_R

diff --git a/Zend/Optimizer/block_pass.c b/Zend/Optimizer/block_pass.c
index a9c73306e1..e7f62a6814 100644
--- a/Zend/Optimizer/block_pass.c
+++ b/Zend/Optimizer/block_pass.c
@@ -134,774 +134,780 @@ static int get_const_switch_target(zend_cfg *cfg, zend_op_array *op_array, zend_
 static void zend_optimize_block(zend_basic_block *block, zend_op_array *op_array, zend_bitset used_ext, zend_cfg *cfg, zend_op **Tsource, uint32_t *opt_count)
 {
 	zend_op *opline, *src;
 	zend_op *end, *last_op = NULL;
 
 	if (block->len == 0) {
 		return;
 	}
 
 	if (op_array->opcodes[block->start].opcode == ZEND_NOP) {
 		/* remove leading NOPs */
 		strip_leading_nops(op_array, block);
 	}
 
 	opline = op_array->opcodes + block->start;
 	end = opline + block->len;
 	while (opline < end) {
 		/* Constant Propagation: strip X = QM_ASSIGN(const) */
 		if (opline->op1_type == IS_TMP_VAR &&
 		    opline->opcode != ZEND_FREE) {
 			src = VAR_SOURCE(opline->op1);
 			if (src &&
 			    src->opcode == ZEND_QM_ASSIGN &&
 			    src->op1_type == IS_CONST
 			) {
 				znode_op op1 = opline->op1;
 				if (opline->opcode == ZEND_VERIFY_RETURN_TYPE) {
 					COPY_NODE(opline->result, opline->op1);
 					COPY_NODE(opline->op1, src->op1);
 					VAR_SOURCE(op1) = NULL;
 					MAKE_NOP(src);
 					++(*opt_count);
 				} else {
 					zval c;
 					ZVAL_COPY(&c, &ZEND_OP1_LITERAL(src));
-					if (zend_optimizer_update_op1_const(op_array, opline, &c)) {
+					if (opline->opcode != ZEND_CASE
+					 && opline->opcode != ZEND_CASE_STRICT
+					 && opline->opcode != ZEND_FETCH_LIST_R
+					 && opline->opcode != ZEND_SWITCH_LONG
+					 && opline->opcode != ZEND_SWITCH_STRING
+					 && opline->opcode != ZEND_MATCH
+					 && zend_optimizer_update_op1_const(op_array, opline, &c)) {
 						VAR_SOURCE(op1) = NULL;
 						literal_dtor(&ZEND_OP1_LITERAL(src));
 						MAKE_NOP(src);
 						++(*opt_count);
 					} else {
 						zval_ptr_dtor_nogc(&c);
 					}
 				}
 			}
 		}
 
 		/* Constant Propagation: strip X = QM_ASSIGN(const) */
 		if (opline->op2_type == IS_TMP_VAR) {
 			src = VAR_SOURCE(opline->op2);
 			if (src &&
 			    src->opcode == ZEND_QM_ASSIGN &&
 			    src->op1_type == IS_CONST) {
 
 				znode_op op2 = opline->op2;
 				zval c;
 
 				ZVAL_COPY(&c, &ZEND_OP1_LITERAL(src));
 				if (zend_optimizer_update_op2_const(op_array, opline, &c)) {
 					VAR_SOURCE(op2) = NULL;
 					literal_dtor(&ZEND_OP1_LITERAL(src));
 					MAKE_NOP(src);
 					++(*opt_count);
 				} else {
 					zval_ptr_dtor_nogc(&c);
 				}
 			}
 		}
 
 		switch (opline->opcode) {
 			case ZEND_ECHO:
 				if (opline->op1_type & (IS_TMP_VAR|IS_VAR)) {
 					src = VAR_SOURCE(opline->op1);
 					if (src &&
 					    src->opcode == ZEND_CAST &&
 					    src->extended_value == IS_STRING) {
 						/* T = CAST(X, String), ECHO(T) => NOP, ECHO(X) */
 						VAR_SOURCE(opline->op1) = NULL;
 						COPY_NODE(opline->op1, src->op1);
 						MAKE_NOP(src);
 						++(*opt_count);
 					}
 				} else if (opline->op1_type == IS_CONST &&
 				           Z_TYPE(ZEND_OP1_LITERAL(opline)) != IS_DOUBLE) {
 					if (last_op == opline - 1) {
 						/* compress consecutive ECHO's.
 						 * Float to string conversion may be affected by current
 						 * locale setting.
 						 */
 						size_t l, old_len;
 
 						if (Z_TYPE(ZEND_OP1_LITERAL(opline)) != IS_STRING) {
 							convert_to_string(&ZEND_OP1_LITERAL(opline));
 						}
 						if (Z_TYPE(ZEND_OP1_LITERAL(last_op)) != IS_STRING) {
 							convert_to_string(&ZEND_OP1_LITERAL(last_op));
 						}
 						old_len = Z_STRLEN(ZEND_OP1_LITERAL(last_op));
 						l = old_len + Z_STRLEN(ZEND_OP1_LITERAL(opline));
 						if (!Z_REFCOUNTED(ZEND_OP1_LITERAL(last_op))) {
 							zend_string *tmp = zend_string_alloc(l, 0);
 							memcpy(ZSTR_VAL(tmp), Z_STRVAL(ZEND_OP1_LITERAL(last_op)), old_len);
 							Z_STR(ZEND_OP1_LITERAL(last_op)) = tmp;
 						} else {
 							Z_STR(ZEND_OP1_LITERAL(last_op)) = zend_string_extend(Z_STR(ZEND_OP1_LITERAL(last_op)), l, 0);
 						}
 						Z_TYPE_INFO(ZEND_OP1_LITERAL(last_op)) = IS_STRING_EX;
 						memcpy(Z_STRVAL(ZEND_OP1_LITERAL(last_op)) + old_len, Z_STRVAL(ZEND_OP1_LITERAL(opline)), Z_STRLEN(ZEND_OP1_LITERAL(opline)));
 						Z_STRVAL(ZEND_OP1_LITERAL(last_op))[l] = '\0';
 						zval_ptr_dtor_nogc(&ZEND_OP1_LITERAL(opline));
 						ZVAL_STR(&ZEND_OP1_LITERAL(opline), zend_new_interned_string(Z_STR(ZEND_OP1_LITERAL(last_op))));
 						ZVAL_NULL(&ZEND_OP1_LITERAL(last_op));
 						MAKE_NOP(last_op);
 						++(*opt_count);
 					}
 					last_op = opline;
 				}
 				break;
 
 			case ZEND_FREE:
 				if (opline->op1_type == IS_TMP_VAR) {
 					src = VAR_SOURCE(opline->op1);
 					if (src) {
 						switch (src->opcode) {
 							case ZEND_BOOL:
 							case ZEND_BOOL_NOT:
 								/* T = BOOL(X), FREE(T) => T = BOOL(X) */
 								/* The remaining BOOL is removed by a separate optimization */
 								VAR_SOURCE(opline->op1) = NULL;
 								MAKE_NOP(opline);
 								++(*opt_count);
 								break;
 							case ZEND_ASSIGN:
 							case ZEND_ASSIGN_DIM:
 							case ZEND_ASSIGN_OBJ:
 							case ZEND_ASSIGN_STATIC_PROP:
 							case ZEND_ASSIGN_OP:
 							case ZEND_ASSIGN_DIM_OP:
 							case ZEND_ASSIGN_OBJ_OP:
 							case ZEND_ASSIGN_STATIC_PROP_OP:
 							case ZEND_PRE_INC:
 							case ZEND_PRE_DEC:
 							case ZEND_PRE_INC_OBJ:
 							case ZEND_PRE_DEC_OBJ:
 							case ZEND_PRE_INC_STATIC_PROP:
 							case ZEND_PRE_DEC_STATIC_PROP:
 								src->result_type = IS_UNUSED;
 								VAR_SOURCE(opline->op1) = NULL;
 								MAKE_NOP(opline);
 								++(*opt_count);
 								break;
 							default:
 								break;
 						}
 					}
 				} else if (opline->op1_type == IS_VAR) {
 					src = VAR_SOURCE(opline->op1);
 					/* V = OP, FREE(V) => OP. NOP */
 					if (src &&
 					    src->opcode != ZEND_FETCH_R &&
 					    src->opcode != ZEND_FETCH_STATIC_PROP_R &&
 					    src->opcode != ZEND_FETCH_DIM_R &&
 					    src->opcode != ZEND_FETCH_OBJ_R &&
 					    src->opcode != ZEND_NEW) {
 						src->result_type = IS_UNUSED;
 						MAKE_NOP(opline);
 						++(*opt_count);
 						if (src->opcode == ZEND_QM_ASSIGN) {
 							if (src->op1_type & (IS_VAR|IS_TMP_VAR)) {
 								src->opcode = ZEND_FREE;
 							} else {
 								MAKE_NOP(src);
 							}
 						}
 					}
 				}
 				break;
 
 #if 0
 		/* pre-evaluate functions:
 		   constant(x)
 		   function_exists(x)
 		   extension_loaded(x)
 		   BAD: interacts badly with Accelerator
 		*/
 		if((opline->op1_type & IS_VAR) &&
 		   VAR_SOURCE(opline->op1) && VAR_SOURCE(opline->op1)->opcode == ZEND_DO_CF_FCALL &&
 		   VAR_SOURCE(opline->op1)->extended_value == 1) {
 			zend_op *fcall = VAR_SOURCE(opline->op1);
 			zend_op *sv = fcall-1;
 			if(sv >= block->start_opline && sv->opcode == ZEND_SEND_VAL &&
 			   sv->op1_type == IS_CONST && Z_TYPE(OPLINE_OP1_LITERAL(sv)) == IS_STRING &&
 			   Z_LVAL(OPLINE_OP2_LITERAL(sv)) == 1
 			   ) {
 				zval *arg = &OPLINE_OP1_LITERAL(sv);
 				char *fname = FUNCTION_CACHE->funcs[Z_LVAL(ZEND_OP1_LITERAL(fcall))].function_name;
 				size_t flen = FUNCTION_CACHE->funcs[Z_LVAL(ZEND_OP1_LITERAL(fcall))].name_len;
 				if((flen == sizeof("function_exists")-1 && zend_binary_strcasecmp(fname, flen, "function_exists", sizeof("function_exists")-1) == 0) ||
 						  (flen == sizeof("is_callable")-1 && zend_binary_strcasecmp(fname, flen, "is_callable", sizeof("is_callable")-1) == 0)
 						  ) {
 					zend_function *function;
 					if((function = zend_hash_find_ptr(EG(function_table), Z_STR_P(arg))) != NULL) {
 						literal_dtor(arg);
 						MAKE_NOP(sv);
 						MAKE_NOP(fcall);
 						LITERAL_BOOL(opline->op1, 1);
 						opline->op1_type = IS_CONST;
 					}
 				} else if(flen == sizeof("constant")-1 && zend_binary_strcasecmp(fname, flen, "constant", sizeof("constant")-1) == 0) {
 					zval c;
 					if (zend_optimizer_get_persistent_constant(Z_STR_P(arg), &c, 1 ELS_CC)) {
 						literal_dtor(arg);
 						MAKE_NOP(sv);
 						MAKE_NOP(fcall);
 						ZEND_OP1_LITERAL(opline) = zend_optimizer_add_literal(op_array, &c);
 						/* no copy ctor - get already copied it */
 						opline->op1_type = IS_CONST;
 					}
 				} else if(flen == sizeof("extension_loaded")-1 && zend_binary_strcasecmp(fname, flen, "extension_loaded", sizeof("extension_loaded")-1) == 0) {
 					if(zend_hash_exists(&module_registry, Z_STR_P(arg))) {
 						literal_dtor(arg);
 						MAKE_NOP(sv);
 						MAKE_NOP(fcall);
 						LITERAL_BOOL(opline->op1, 1);
 						opline->op1_type = IS_CONST;
 					}
 				}
 			}
 		}
 #endif
 
 			case ZEND_FETCH_LIST_R:
 			case ZEND_FETCH_LIST_W:
 				if (opline->op1_type & (IS_TMP_VAR|IS_VAR)) {
 					/* LIST variable will be deleted later by FREE */
 					Tsource[VAR_NUM(opline->op1.var)] = NULL;
 				}
 				break;
 
 			case ZEND_SWITCH_LONG:
 			case ZEND_SWITCH_STRING:
 			case ZEND_MATCH:
 				if (opline->op1_type & (IS_TMP_VAR|IS_VAR)) {
 					/* SWITCH variable will be deleted later by FREE, so we can't optimize it */
 					Tsource[VAR_NUM(opline->op1.var)] = NULL;
 					break;
 				}
 				if (opline->op1_type == IS_CONST) {
 					int target = get_const_switch_target(cfg, op_array, block, opline, &ZEND_OP1_LITERAL(opline));
 					literal_dtor(&ZEND_OP1_LITERAL(opline));
 					literal_dtor(&ZEND_OP2_LITERAL(opline));
 					opline->opcode = ZEND_JMP;
 					opline->op1_type = IS_UNUSED;
 					opline->op2_type = IS_UNUSED;
 					block->successors_count = 1;
 					block->successors[0] = target;
 				}
 				break;
 
 			case ZEND_CASE:
 			case ZEND_CASE_STRICT:
 			case ZEND_COPY_TMP:
 				if (opline->op1_type & (IS_TMP_VAR|IS_VAR)) {
 					/* Variable will be deleted later by FREE, so we can't optimize it */
 					Tsource[VAR_NUM(opline->op1.var)] = NULL;
 					break;
 				}
 				ZEND_FALLTHROUGH;
 
 			case ZEND_IS_EQUAL:
 			case ZEND_IS_NOT_EQUAL:
 				if (opline->op1_type == IS_CONST &&
 				    opline->op2_type == IS_CONST) {
 					goto optimize_constant_binary_op;
 				}
 		        /* IS_EQ(TRUE, X)      => BOOL(X)
 		         * IS_EQ(FALSE, X)     => BOOL_NOT(X)
 		         * IS_NOT_EQ(TRUE, X)  => BOOL_NOT(X)
 		         * IS_NOT_EQ(FALSE, X) => BOOL(X)
 		         * CASE(TRUE, X)       => BOOL(X)
 		         * CASE(FALSE, X)      => BOOL_NOT(X)
 		         */
 				if (opline->op1_type == IS_CONST &&
 					(Z_TYPE(ZEND_OP1_LITERAL(opline)) == IS_FALSE ||
 					 Z_TYPE(ZEND_OP1_LITERAL(opline)) == IS_TRUE)) {
 					/* Optimization of comparison with "null" is not safe,
 					 * because ("0" == null) is not equal to !("0")
 					 */
 					opline->opcode =
 						((opline->opcode != ZEND_IS_NOT_EQUAL) == ((Z_TYPE(ZEND_OP1_LITERAL(opline))) == IS_TRUE)) ?
 						ZEND_BOOL : ZEND_BOOL_NOT;
 					COPY_NODE(opline->op1, opline->op2);
 					SET_UNUSED(opline->op2);
 					++(*opt_count);
 					goto optimize_bool;
 				} else if (opline->op2_type == IS_CONST &&
 				           (Z_TYPE(ZEND_OP2_LITERAL(opline)) == IS_FALSE ||
 				            Z_TYPE(ZEND_OP2_LITERAL(opline)) == IS_TRUE)) {
 					/* Optimization of comparison with "null" is not safe,
 					 * because ("0" == null) is not equal to !("0")
 					 */
 					opline->opcode =
 						((opline->opcode != ZEND_IS_NOT_EQUAL) == ((Z_TYPE(ZEND_OP2_LITERAL(opline))) == IS_TRUE)) ?
 						ZEND_BOOL : ZEND_BOOL_NOT;
 					SET_UNUSED(opline->op2);
 					++(*opt_count);
 					goto optimize_bool;
 				}
 				break;
 
 			case ZEND_BOOL:
 			case ZEND_BOOL_NOT:
 			optimize_bool:
 				if (opline->op1_type == IS_CONST) {
 					goto optimize_const_unary_op;
 				}
 				if (opline->op1_type == IS_TMP_VAR &&
 				    !zend_bitset_in(used_ext, VAR_NUM(opline->op1.var))) {
 					src = VAR_SOURCE(opline->op1);
 					if (src) {
 						switch (src->opcode) {
 							case ZEND_BOOL_NOT:
 								/* T = BOOL_NOT(X) + BOOL(T) -> NOP, BOOL_NOT(X) */
 								VAR_SOURCE(opline->op1) = NULL;
 								COPY_NODE(opline->op1, src->op1);
 								opline->opcode = (opline->opcode == ZEND_BOOL) ? ZEND_BOOL_NOT : ZEND_BOOL;
 								MAKE_NOP(src);
 								++(*opt_count);
 								goto optimize_bool;
 							case ZEND_BOOL:
 								/* T = BOOL(X) + BOOL(T) -> NOP, BOOL(X) */
 								VAR_SOURCE(opline->op1) = NULL;
 								COPY_NODE(opline->op1, src->op1);
 								MAKE_NOP(src);
 								++(*opt_count);
 								goto optimize_bool;
 							case ZEND_IS_EQUAL:
 								if (opline->opcode == ZEND_BOOL_NOT) {
 									src->opcode = ZEND_IS_NOT_EQUAL;
 								}
 								COPY_NODE(src->result, opline->result);
 								SET_VAR_SOURCE(src);
 								MAKE_NOP(opline);
 								++(*opt_count);
 								break;
 							case ZEND_IS_NOT_EQUAL:
 								if (opline->opcode == ZEND_BOOL_NOT) {
 									src->opcode = ZEND_IS_EQUAL;
 								}
 								COPY_NODE(src->result, opline->result);
 								SET_VAR_SOURCE(src);
 								MAKE_NOP(opline);
 								++(*opt_count);
 								break;
 							case ZEND_IS_IDENTICAL:
 								if (opline->opcode == ZEND_BOOL_NOT) {
 									src->opcode = ZEND_IS_NOT_IDENTICAL;
 								}
 								COPY_NODE(src->result, opline->result);
 								SET_VAR_SOURCE(src);
 								MAKE_NOP(opline);
 								++(*opt_count);
 								break;
 							case ZEND_IS_NOT_IDENTICAL:
 								if (opline->opcode == ZEND_BOOL_NOT) {
 									src->opcode = ZEND_IS_IDENTICAL;
 								}
 								COPY_NODE(src->result, opline->result);
 								SET_VAR_SOURCE(src);
 								MAKE_NOP(opline);
 								++(*opt_count);
 								break;
 							case ZEND_IS_SMALLER:
 								if (opline->opcode == ZEND_BOOL_NOT) {
 									zend_uchar tmp_type;
 									uint32_t tmp;
 
 									src->opcode = ZEND_IS_SMALLER_OR_EQUAL;
 									tmp_type = src->op1_type;
 									src->op1_type = src->op2_type;
 									src->op2_type = tmp_type;
 									tmp = src->op1.num;
 									src->op1.num = src->op2.num;
 									src->op2.num = tmp;
 								}
 								COPY_NODE(src->result, opline->result);
 								SET_VAR_SOURCE(src);
 								MAKE_NOP(opline);
 								++(*opt_count);
 								break;
 							case ZEND_IS_SMALLER_OR_EQUAL:
 								if (opline->opcode == ZEND_BOOL_NOT) {
 									zend_uchar tmp_type;
 									uint32_t tmp;
 
 									src->opcode = ZEND_IS_SMALLER;
 									tmp_type = src->op1_type;
 									src->op1_type = src->op2_type;
 									src->op2_type = tmp_type;
 									tmp = src->op1.num;
 									src->op1.num = src->op2.num;
 									src->op2.num = tmp;
 								}
 								COPY_NODE(src->result, opline->result);
 								SET_VAR_SOURCE(src);
 								MAKE_NOP(opline);
 								++(*opt_count);
 								break;
 							case ZEND_ISSET_ISEMPTY_CV:
 							case ZEND_ISSET_ISEMPTY_VAR:
 							case ZEND_ISSET_ISEMPTY_DIM_OBJ:
 							case ZEND_ISSET_ISEMPTY_PROP_OBJ:
 							case ZEND_ISSET_ISEMPTY_STATIC_PROP:
 							case ZEND_INSTANCEOF:
 							case ZEND_TYPE_CHECK:
 							case ZEND_DEFINED:
 							case ZEND_IN_ARRAY:
 							case ZEND_ARRAY_KEY_EXISTS:
 								if (opline->opcode == ZEND_BOOL_NOT) {
 									break;
 								}
 								COPY_NODE(src->result, opline->result);
 								SET_VAR_SOURCE(src);
 								MAKE_NOP(opline);
 								++(*opt_count);
 								break;
 						}
 					}
 				}
 				break;
 
 			case ZEND_JMPZ:
 			case ZEND_JMPNZ:
 			    while (1) {
 					if (opline->op1_type == IS_CONST) {
 						++(*opt_count);
 						block->successors_count = 1;
 						if (zend_is_true(&ZEND_OP1_LITERAL(opline)) ==
 						    (opline->opcode == ZEND_JMPZ)) {
 
 							MAKE_NOP(opline);
 							block->successors[0] = block->successors[1];
 							block->len--;
 							cfg->blocks[block->successors[0]].flags |= ZEND_BB_FOLLOW;
 							break;
 						} else {
 							zend_basic_block *next = cfg->blocks + block->successors[1];
 
 							next->flags &= ~ZEND_BB_FOLLOW;
 							if (!(next->flags & (ZEND_BB_TARGET|ZEND_BB_PROTECTED))) {
 								next->flags &= ~ZEND_BB_REACHABLE;
 							}
 							opline->opcode = ZEND_JMP;
 							COPY_NODE(opline->op1, opline->op2);
 							break;
 						}
 					} else if (opline->op1_type == IS_TMP_VAR &&
 					           !zend_bitset_in(used_ext, VAR_NUM(opline->op1.var))) {
 						src = VAR_SOURCE(opline->op1);
 						if (src) {
 							if (src->opcode == ZEND_BOOL_NOT) {
 								VAR_SOURCE(opline->op1) = NULL;
 								COPY_NODE(opline->op1, src->op1);
 								/* T = BOOL_NOT(X) + JMPZ(T) -> NOP, JMPNZ(X) */
 								opline->opcode = INV_COND(opline->opcode);
 								MAKE_NOP(src);
 								++(*opt_count);
 								continue;
 							} else if (src->opcode == ZEND_BOOL ||
 							           src->opcode == ZEND_QM_ASSIGN) {
 								VAR_SOURCE(opline->op1) = NULL;
 								COPY_NODE(opline->op1, src->op1);
 								MAKE_NOP(src);
 								++(*opt_count);
 								continue;
 							}
 						}
 					}
 					break;
 				}
 				break;
 
 			case ZEND_JMPZ_EX:
 			case ZEND_JMPNZ_EX:
 				while (1) {
 					if (opline->op1_type == IS_CONST) {
 						if (zend_is_true(&ZEND_OP1_LITERAL(opline)) ==
 						    (opline->opcode == ZEND_JMPZ_EX)) {
 
 							++(*opt_count);
 							opline->opcode = ZEND_QM_ASSIGN;
 							zval_ptr_dtor_nogc(&ZEND_OP1_LITERAL(opline));
 							ZVAL_BOOL(&ZEND_OP1_LITERAL(opline), opline->opcode == ZEND_JMPZ_EX);
 							opline->op2.num = 0;
 							block->successors_count = 1;
 							block->successors[0] = block->successors[1];
 							cfg->blocks[block->successors[0]].flags |= ZEND_BB_FOLLOW;
 							break;
 						}
 					} else if (opline->op1_type == IS_TMP_VAR &&
 					           (!zend_bitset_in(used_ext, VAR_NUM(opline->op1.var)) ||
 					            opline->result.var == opline->op1.var)) {
 						src = VAR_SOURCE(opline->op1);
 						if (src) {
 							if (src->opcode == ZEND_BOOL ||
 							    src->opcode == ZEND_QM_ASSIGN) {
 								VAR_SOURCE(opline->op1) = NULL;
 								COPY_NODE(opline->op1, src->op1);
 								MAKE_NOP(src);
 								++(*opt_count);
 								continue;
 							}
 						}
 					}
 					break;
 				}
 				break;
 
 			case ZEND_CONCAT:
 			case ZEND_FAST_CONCAT:
 				if (opline->op1_type == IS_CONST &&
 				    opline->op2_type == IS_CONST) {
 					goto optimize_constant_binary_op;
 				}
 
 				if (opline->op2_type == IS_CONST &&
 				    opline->op1_type == IS_TMP_VAR) {
 
 					src = VAR_SOURCE(opline->op1);
 				    if (src &&
 					    (src->opcode == ZEND_CONCAT ||
 					     src->opcode == ZEND_FAST_CONCAT) &&
 					    src->op2_type == IS_CONST) {
 						/* compress consecutive CONCATs */
 						size_t l, old_len;
 
 						if (Z_TYPE(ZEND_OP2_LITERAL(opline)) != IS_STRING) {
 							convert_to_string(&ZEND_OP2_LITERAL(opline));
 						}
 						if (Z_TYPE(ZEND_OP2_LITERAL(src)) != IS_STRING) {
 							convert_to_string(&ZEND_OP2_LITERAL(src));
 						}
 
 						VAR_SOURCE(opline->op1) = NULL;
 						COPY_NODE(opline->op1, src->op1);
 						old_len = Z_STRLEN(ZEND_OP2_LITERAL(src));
 						l = old_len + Z_STRLEN(ZEND_OP2_LITERAL(opline));
 						if (!Z_REFCOUNTED(ZEND_OP2_LITERAL(src))) {
 							zend_string *tmp = zend_string_alloc(l, 0);
 							memcpy(ZSTR_VAL(tmp), Z_STRVAL(ZEND_OP2_LITERAL(src)), old_len);
 							Z_STR(ZEND_OP2_LITERAL(src)) = tmp;
 						} else {
 							Z_STR(ZEND_OP2_LITERAL(src)) = zend_string_extend(Z_STR(ZEND_OP2_LITERAL(src)), l, 0);
 						}
 						Z_TYPE_INFO(ZEND_OP2_LITERAL(src)) = IS_STRING_EX;
 						memcpy(Z_STRVAL(ZEND_OP2_LITERAL(src)) + old_len, Z_STRVAL(ZEND_OP2_LITERAL(opline)), Z_STRLEN(ZEND_OP2_LITERAL(opline)));
 						Z_STRVAL(ZEND_OP2_LITERAL(src))[l] = '\0';
 						zval_ptr_dtor_str(&ZEND_OP2_LITERAL(opline));
 						ZVAL_STR(&ZEND_OP2_LITERAL(opline), zend_new_interned_string(Z_STR(ZEND_OP2_LITERAL(src))));
 						ZVAL_NULL(&ZEND_OP2_LITERAL(src));
 						MAKE_NOP(src);
 						++(*opt_count);
 					}
 				}
 
 				if (opline->op1_type & (IS_TMP_VAR|IS_VAR)) {
 					src = VAR_SOURCE(opline->op1);
 					if (src &&
 					    src->opcode == ZEND_CAST &&
 					    src->extended_value == IS_STRING &&
 					    src->op1_type != IS_CONST) {
 						/* convert T1 = CAST(STRING, X), T2 = CONCAT(T1, Y) to T2 = CONCAT(X,Y) */
 						VAR_SOURCE(opline->op1) = NULL;
 						COPY_NODE(opline->op1, src->op1);
 						MAKE_NOP(src);
 						++(*opt_count);
 					}
 	            }
 				if (opline->op2_type & (IS_TMP_VAR|IS_VAR)) {
 					src = VAR_SOURCE(opline->op2);
 					if (src &&
 					    src->opcode == ZEND_CAST &&
 					    src->extended_value == IS_STRING &&
 					    src->op1_type != IS_CONST) {
 						/* convert T1 = CAST(STRING, X), T2 = CONCAT(Y, T1) to T2 = CONCAT(Y,X) */
 						zend_op *src = VAR_SOURCE(opline->op2);
 						VAR_SOURCE(opline->op2) = NULL;
 						COPY_NODE(opline->op2, src->op1);
 						MAKE_NOP(src);
 						++(*opt_count);
 					}
 				}
 				if (opline->op1_type == IS_CONST &&
 				    Z_TYPE(ZEND_OP1_LITERAL(opline)) == IS_STRING &&
 				    Z_STRLEN(ZEND_OP1_LITERAL(opline)) == 0) {
 					/* convert CONCAT('', X) => CAST(STRING, X) */
 					literal_dtor(&ZEND_OP1_LITERAL(opline));
 					opline->opcode = ZEND_CAST;
 					opline->extended_value = IS_STRING;
 					COPY_NODE(opline->op1, opline->op2);
 					opline->op2_type = IS_UNUSED;
 					opline->op2.var = 0;
 					++(*opt_count);
 				} else if (opline->op2_type == IS_CONST &&
 			           Z_TYPE(ZEND_OP2_LITERAL(opline)) == IS_STRING &&
 			           Z_STRLEN(ZEND_OP2_LITERAL(opline)) == 0) {
 					/* convert CONCAT(X, '') => CAST(STRING, X) */
 					literal_dtor(&ZEND_OP2_LITERAL(opline));
 					opline->opcode = ZEND_CAST;
 					opline->extended_value = IS_STRING;
 					opline->op2_type = IS_UNUSED;
 					opline->op2.var = 0;
 					++(*opt_count);
 				} else if (opline->opcode == ZEND_CONCAT &&
 				           (opline->op1_type == IS_CONST ||
 				            (opline->op1_type == IS_TMP_VAR &&
 				             VAR_SOURCE(opline->op1) &&
 				             (VAR_SOURCE(opline->op1)->opcode == ZEND_FAST_CONCAT ||
 				              VAR_SOURCE(opline->op1)->opcode == ZEND_ROPE_END ||
 				              VAR_SOURCE(opline->op1)->opcode == ZEND_FETCH_CONSTANT ||
 				              VAR_SOURCE(opline->op1)->opcode == ZEND_FETCH_CLASS_CONSTANT))) &&
 				           (opline->op2_type == IS_CONST ||
 				            (opline->op2_type == IS_TMP_VAR &&
 				             VAR_SOURCE(opline->op2) &&
 				             (VAR_SOURCE(opline->op2)->opcode == ZEND_FAST_CONCAT ||
 				              VAR_SOURCE(opline->op2)->opcode == ZEND_ROPE_END ||
 				              VAR_SOURCE(opline->op2)->opcode == ZEND_FETCH_CONSTANT ||
 				              VAR_SOURCE(opline->op2)->opcode == ZEND_FETCH_CLASS_CONSTANT)))) {
 					opline->opcode = ZEND_FAST_CONCAT;
 					++(*opt_count);
 				}
 				break;
 
 			case ZEND_ADD:
 			case ZEND_SUB:
 			case ZEND_MUL:
 			case ZEND_DIV:
 			case ZEND_MOD:
 			case ZEND_SL:
 			case ZEND_SR:
 			case ZEND_IS_SMALLER:
 			case ZEND_IS_SMALLER_OR_EQUAL:
 			case ZEND_IS_IDENTICAL:
 			case ZEND_IS_NOT_IDENTICAL:
 			case ZEND_BOOL_XOR:
 			case ZEND_BW_OR:
 			case ZEND_BW_AND:
 			case ZEND_BW_XOR:
 				if (opline->op1_type == IS_CONST &&
 				    opline->op2_type == IS_CONST) {
 					/* evaluate constant expressions */
 					zval result;
 
 optimize_constant_binary_op:
 					if (zend_optimizer_eval_binary_op(&result, opline->opcode, &ZEND_OP1_LITERAL(opline), &ZEND_OP2_LITERAL(opline)) == SUCCESS) {
 						literal_dtor(&ZEND_OP1_LITERAL(opline));
 						literal_dtor(&ZEND_OP2_LITERAL(opline));
 						opline->opcode = ZEND_QM_ASSIGN;
 						SET_UNUSED(opline->op2);
 						zend_optimizer_update_op1_const(op_array, opline, &result);
 						++(*opt_count);
 					}
 				}
 				break;
 
 			case ZEND_BW_NOT:
 				if (opline->op1_type == IS_CONST) {
 					/* evaluate constant unary ops */
 					zval result;
 
 optimize_const_unary_op:
 					if (zend_optimizer_eval_unary_op(&result, opline->opcode, &ZEND_OP1_LITERAL(opline)) == SUCCESS) {
 						literal_dtor(&ZEND_OP1_LITERAL(opline));
 						opline->opcode = ZEND_QM_ASSIGN;
 						zend_optimizer_update_op1_const(op_array, opline, &result);
 						++(*opt_count);
 					}
 				}
 				break;
 
 			case ZEND_CAST:
 				if (opline->op1_type == IS_CONST) {
 					/* cast of constant operand */
 					zval result;
 
 					if (zend_optimizer_eval_cast(&result, opline->extended_value, &ZEND_OP1_LITERAL(opline)) == SUCCESS) {
 						literal_dtor(&ZEND_OP1_LITERAL(opline));
 						opline->opcode = ZEND_QM_ASSIGN;
 						opline->extended_value = 0;
 						zend_optimizer_update_op1_const(op_array, opline, &result);
 						++(*opt_count);
 					}
 				}
 				break;
 
 			case ZEND_STRLEN:
 				if (opline->op1_type == IS_CONST) {
 					zval result;
 
 					if (zend_optimizer_eval_strlen(&result, &ZEND_OP1_LITERAL(opline)) == SUCCESS) {
 						literal_dtor(&ZEND_OP1_LITERAL(opline));
 						opline->opcode = ZEND_QM_ASSIGN;
 						zend_optimizer_update_op1_const(op_array, opline, &result);
 						++(*opt_count);
 					}
 				}
 				break;
 
 			case ZEND_RETURN:
 			case ZEND_EXIT:
 				if (opline->op1_type == IS_TMP_VAR) {
 					src = VAR_SOURCE(opline->op1);
 					if (src && src->opcode == ZEND_QM_ASSIGN) {
 						zend_op *op = src + 1;
 						bool optimize = 1;
 
 						while (op < opline) {
 							if ((op->op1_type == opline->op1_type
 							  && op->op1.var == opline->op1.var)
 							 || (op->op2_type == opline->op1_type
 							  && op->op2.var == opline->op1.var)) {
 								optimize = 0;
 								break;
 							}
 							op++;
 						}
 
 						if (optimize) {
 							/* T = QM_ASSIGN(X), RETURN(T) to NOP, RETURN(X) */
 							VAR_SOURCE(opline->op1) = NULL;
 							COPY_NODE(opline->op1, src->op1);
 							MAKE_NOP(src);
 							++(*opt_count);
 						}
 					}
 				}
 				break;
 
 			case ZEND_QM_ASSIGN:
 				if (opline->op1_type == opline->result_type &&
 				    opline->op1.var == opline->result.var) {
 					/* strip T = QM_ASSIGN(T) */
 					MAKE_NOP(opline);
 					++(*opt_count);
 				} else if (opline->op1_type == IS_TMP_VAR &&
 				           opline->result_type == IS_TMP_VAR &&
 				           !zend_bitset_in(used_ext, VAR_NUM(opline->op1.var))) {
 					/* T1 = ..., T2 = QM_ASSIGN(T1) to T2 = ..., NOP */
 					src = VAR_SOURCE(opline->op1);
 					if (src &&
 						src->opcode != ZEND_COPY_TMP &&
 						src->opcode != ZEND_ADD_ARRAY_ELEMENT &&
 						src->opcode != ZEND_ADD_ARRAY_UNPACK &&
 						(src->opcode != ZEND_DECLARE_LAMBDA_FUNCTION ||
 						 src == opline -1)) {
 						src->result.var = opline->result.var;
 						VAR_SOURCE(opline->op1) = NULL;
 						VAR_SOURCE(opline->result) = src;
 						MAKE_NOP(opline);
 						++(*opt_count);
 					}
 				}
 				break;
 		}
 
 		/* get variable source */
 		if (opline->result_type & (IS_VAR|IS_TMP_VAR)) {
 			SET_VAR_SOURCE(opline);
 		}
 		opline++;
 	}
 }
 
 /* Rebuild plain (optimized) op_array from CFG */
diff --git a/ext/opcache/tests/opt/block_pass_003.phpt b/ext/opcache/tests/opt/block_pass_003.phpt
new file mode 100644
index 0000000000..25d32e1e4d
--- /dev/null
+++ b/ext/opcache/tests/opt/block_pass_003.phpt
@@ -0,0 +1,20 @@
+--TEST--
+Block Pass 003: Inorrect constant substitution in FETCH_LIST_R
+--INI--
+opcache.enable=1
+opcache.enable_cli=1
+opcache.optimization_level=-1
+--EXTENSIONS--
+opcache
+--FILE--
+<?php
+function test() {
+    for ($i = 0; $i < 10; $i++) {
+        list($a, $b) = 1 ? 1 : 2;
+    }
+}
+test();
+?>
+DONE
+--EXPECT--
+DONE
