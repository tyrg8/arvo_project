commit dd9e9bb80e500ad5e1213e7b4a5f7075ef09b547
Author: Dirk Lemstra <dirk@lemstra.org>
Date:   Thu Jul 14 20:35:25 2022 +0200

    Added extra checks to make sure we don't go out of bounds when checking spaces.

diff --git a/MagickCore/magic.c b/MagickCore/magic.c
index eb8170d01..605f20e53 100644
--- a/MagickCore/magic.c
+++ b/MagickCore/magic.c
@@ -274,104 +274,109 @@ static MagickBooleanType IsMagicCacheInstantiated()
   return(magic_cache != (LinkedListInfo *) NULL ? MagickTrue : MagickFalse);
 }
 
+static inline MagickBooleanType MatchesMagic(const unsigned char *magic,
+  const size_t length,const MagicInfo *magic_info)
+{
+  const unsigned char
+    *q;
+
+  MagickOffsetType
+    remaining;
+
+  assert(magic_info->offset >= 0);
+  q=magic+magic_info->offset;
+  remaining=(MagickOffsetType) length-magic_info->offset;
+  if (magic_info->skip_spaces != MagickFalse)
+    {
+      while ((remaining > 0) && (isspace(*q) != 0))
+        {
+          q++;
+          remaining--;
+        }
+    }
+  if ((remaining >= magic_info->length) &&
+      (memcmp(q,magic_info->magic,magic_info->length) == 0))
+    return(MagickTrue);
+  return(MagickFalse);
+}
+
 MagickExport const MagicInfo *GetMagicInfo(const unsigned char *magic,
   const size_t length,ExceptionInfo *exception)
 {
   const MagicInfo
     *p;
 
-  MagickOffsetType
-    offset;
-
   assert(exception != (ExceptionInfo *) NULL);
   if (IsMagicListInstantiated(exception) == MagickFalse)
     return((const MagicInfo *) NULL);
   if (IsMagicCacheInstantiated() == MagickFalse)
     return((const MagicInfo *) NULL);
   /*
     Search for cached entries.
   */
   if (magic != (const unsigned char *) NULL)
     {
       LockSemaphoreInfo(magic_cache_semaphore);
       ResetLinkedListIterator(magic_cache);
       p=(const MagicInfo *) GetNextValueInLinkedList(magic_cache);
       while (p != (const MagicInfo *) NULL)
       {
-        const unsigned char
-          *q;
-
-        q=magic;
-        if (p->skip_spaces != MagickFalse)
-          while (isspace(*q) != 0) q++;
-        assert(p->offset >= 0);
-        offset=p->offset+(MagickOffsetType) p->length;
-        if ((offset <= (MagickOffsetType) length) &&
-            (memcmp(q+p->offset,p->magic,p->length) == 0))
+        if (MatchesMagic(magic,length,p) != MagickFalse)
           break;
         p=(const MagicInfo *) GetNextValueInLinkedList(magic_cache);
       }
       UnlockSemaphoreInfo(magic_cache_semaphore);
       if (p != (const MagicInfo *) NULL)
         return(p);
     }
   /*
     Search for magic tag.
   */
   LockSemaphoreInfo(magic_list_semaphore);
   ResetLinkedListIterator(magic_list);
   p=(const MagicInfo *) GetNextValueInLinkedList(magic_list);
   if (magic == (const unsigned char *) NULL)
     {
       UnlockSemaphoreInfo(magic_list_semaphore);
       return(p);
     }
   while (p != (const MagicInfo *) NULL)
   {
-    const unsigned char
-      *q;
-
-    q=magic;
-    if (p->skip_spaces != MagickFalse)
-      while (isspace(*q) != 0) q++;
-    assert(p->offset >= 0);
-    offset=p->offset+(MagickOffsetType) p->length;
-    if ((offset <= (MagickOffsetType) length) &&
-        (memcmp(q+p->offset,p->magic,p->length) == 0))
+    if (MatchesMagic(magic,length,p) != MagickFalse)
       break;
     p=(const MagicInfo *) GetNextValueInLinkedList(magic_list);
   }
   UnlockSemaphoreInfo(magic_list_semaphore);
   if (p != (const MagicInfo *) NULL)
     {
       LockSemaphoreInfo(magic_cache_semaphore);
       (void) InsertValueInSortedLinkedList(magic_cache,CompareMagickInfoExtent,
         NULL,p);
       UnlockSemaphoreInfo(magic_cache_semaphore);
     }
   return(p);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   G e t M a g i c P a t t e r n E x t e n t                                 %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  GetMagicPatternExtent() returns the extent of the buffer that is
 %  required to check all the MagickInfos. It returns zero if the list is empty.
 %
 %  The format of the GetMagicPatternExtent method is:
 %
 %      size_t GetMagicPatternExtent(ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
