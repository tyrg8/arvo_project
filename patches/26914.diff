commit 2f287f41eda67c8efd9c68b859d07eac98473b86
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Mon Nov 2 22:58:37 2020 +0000

    ttps://bugs.chromium.org/p/oss-fuzz/issues/detail?id=26914

diff --git a/MagickCore/locale.c b/MagickCore/locale.c
index ce5dfbffc..70ed2ca8a 100644
--- a/MagickCore/locale.c
+++ b/MagickCore/locale.c
@@ -1452,75 +1452,75 @@ MagickExport void LocaleLower(char *string)
   assert(string != (char *) NULL);
   for (q=string; *q != '\0'; q++)
     *q=(char) LocaleLowercase((int) *q);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   L o c a l e L o w e r c a s e                                             %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  LocaleLowercase() convert to lowercase.
 %
 %  The format of the LocaleLowercase method is:
 %
 %      void LocaleLowercase(const int c)
 %
 %  A description of each parameter follows:
 %
 %    o If c is a uppercase letter, return its lowercase equivalent.
 %
 */
 MagickExport int LocaleLowercase(const int c)
 {
-  if (c == EOF)
+  if ((c == EOF) || (c != (unsigned char) c))
     return(c);
 #if defined(MAGICKCORE_LOCALE_SUPPORT)
   if (c_locale != (locale_t) NULL)
     return(tolower_l(c,c_locale));
 #endif
   return(tolower(c));
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   L o c a l e N C o m p a r e                                               %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  LocaleNCompare() performs a case-insensitive comparison of two strings
 %  byte-by-byte, according to the ordering of the current locale encoding.
 %
 %  LocaleNCompare returns an integer greater than, equal to, or less than 0,
 %  if the string pointed to by p is greater than, equal to, or less than the
 %  string pointed to by q respectively.  The sign of a non-zero return value
 %  is determined by the sign of the difference between the values of the first
 %  pair of bytes that differ in the strings being compared.
 %
 %  The LocaleNCompare method makes the same comparison as LocaleCompare but
 %  looks at a maximum of n bytes.  Bytes following a null byte are not
 %  compared.
 %
 %  The format of the LocaleNCompare method is:
 %
 %      int LocaleNCompare(const char *p,const char *q,const size_t n)
 %
 %  A description of each parameter follows:
 %
 %    o p: A pointer to a character string.
 %
 %    o q: A pointer to a character string to compare to p.
 %
 %    o length: the number of characters to compare in strings p and q.
 %
 */
