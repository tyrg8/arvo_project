commit 14fddd17df97c6f16faf593b7f224c9891ef27dc
Author: Dmitry Stogov <dmitry@zend.com>
Date:   Mon Apr 4 12:03:39 2022 +0300

    Fix arsort() crash on recursion
    
    Fixes oss-fuzz #46315

diff --git a/Zend/tests/bug63882_2.phpt b/Zend/tests/bug63882_2.phpt
new file mode 100644
index 0000000000..c457a7ad45
--- /dev/null
+++ b/Zend/tests/bug63882_2.phpt
@@ -0,0 +1,23 @@
+--TEST--
+Bug #63882_2 (arsort crash on recursion)
+--FILE--
+<?php
+$token = array();
+$conditions = array();
+for ($i = 0; $i <= 2; $i++) {
+    $tokens = $conditions;
+    $a[0] =& $a;
+    $a = unserialize(serialize($GLOBALS));
+    $a[0] =& $a;
+    $a = unserialize(serialize($GLOBALS));
+    $a[0] =& $a;
+    foreach($a as $v) {
+        if ($v == 1) {
+            arsort($a);
+        }
+    }
+}
+?>
+DONE
+--EXPECT--
+DONE
diff --git a/Zend/zend_hash.c b/Zend/zend_hash.c
index 5f878b2154..cf0f9e5b33 100644
--- a/Zend/zend_hash.c
+++ b/Zend/zend_hash.c
@@ -2522,71 +2522,81 @@ ZEND_API void zend_hash_bucket_packed_swap(Bucket *p, Bucket *q)
 ZEND_API void ZEND_FASTCALL zend_hash_sort_ex(HashTable *ht, sort_func_t sort, bucket_compare_func_t compar, bool renumber)
 {
 	Bucket *p;
 	uint32_t i, j;
 
 	IS_CONSISTENT(ht);
 	HT_ASSERT_RC1(ht);
 
 	if (!(ht->nNumOfElements>1) && !(renumber && ht->nNumOfElements>0)) {
 		/* Doesn't require sorting */
 		return;
 	}
 
 	if (HT_IS_WITHOUT_HOLES(ht)) {
 		/* Store original order of elements in extra space to allow stable sorting. */
 		for (i = 0; i < ht->nNumUsed; i++) {
 			Z_EXTRA(ht->arData[i].val) = i;
 		}
 	} else {
 		/* Remove holes and store original order. */
 		for (j = 0, i = 0; j < ht->nNumUsed; j++) {
 			p = ht->arData + j;
 			if (UNEXPECTED(Z_TYPE(p->val) == IS_UNDEF)) continue;
 			if (i != j) {
 				ht->arData[i] = *p;
 			}
 			Z_EXTRA(ht->arData[i].val) = i;
 			i++;
 		}
 		ht->nNumUsed = i;
 	}
 
+	if (!(HT_FLAGS(ht) & HASH_FLAG_PACKED)) {
+		/* We broke the hash colisions chains overriding Z_NEXT() by Z_EXTRA().
+		 * Reset the hash headers table as well to avoid possilbe inconsistent
+		 * access on recursive data structures.
+	     *
+	     * See Zend/tests/bug63882_2.phpt
+		 */
+		HT_HASH_RESET(ht);
+	}
+
 	sort((void *)ht->arData, ht->nNumUsed, sizeof(Bucket), (compare_func_t) compar,
 			(swap_func_t)(renumber? zend_hash_bucket_renum_swap :
 				((HT_FLAGS(ht) & HASH_FLAG_PACKED) ? zend_hash_bucket_packed_swap : zend_hash_bucket_swap)));
 
 	ht->nInternalPointer = 0;
 
 	if (renumber) {
 		for (j = 0; j < i; j++) {
 			p = ht->arData + j;
 			p->h = j;
 			if (p->key) {
 				zend_string_release(p->key);
 				p->key = NULL;
 			}
 		}
 
 		ht->nNextFreeElement = i;
 	}
 	if (HT_FLAGS(ht) & HASH_FLAG_PACKED) {
 		if (!renumber) {
 			zend_hash_packed_to_hash(ht);
 		}
 	} else {
 		if (renumber) {
 			void *new_data, *old_data = HT_GET_DATA_ADDR(ht);
 			Bucket *old_buckets = ht->arData;
 
 			new_data = pemalloc(HT_SIZE_EX(ht->nTableSize, HT_MIN_MASK), (GC_FLAGS(ht) & IS_ARRAY_PERSISTENT));
 			HT_FLAGS(ht) |= HASH_FLAG_PACKED | HASH_FLAG_STATIC_KEYS;
 			ht->nTableMask = HT_MIN_MASK;
 			HT_SET_DATA_ADDR(ht, new_data);
 			memcpy(ht->arData, old_buckets, sizeof(Bucket) * ht->nNumUsed);
 			pefree(old_data, GC_FLAGS(ht) & IS_ARRAY_PERSISTENT);
 			HT_HASH_RESET_PACKED(ht);
 		} else {
 			zend_hash_rehash(ht);
 		}
 	}
 }
