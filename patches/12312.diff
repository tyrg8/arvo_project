commit 7a6686a589ed6bf17a5af0b8012501e4d4ee2ded
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Mon Jan 14 15:09:14 2019 -0500

    [AAT] Fix mort ContextualSubtable offset access
    
    Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=12312

diff --git a/src/hb-aat-layout-morx-table.hh b/src/hb-aat-layout-morx-table.hh
index fd955b5b7..15686b657 100644
--- a/src/hb-aat-layout-morx-table.hh
+++ b/src/hb-aat-layout-morx-table.hh
@@ -191,168 +191,169 @@ template <typename Types>
 struct ContextualSubtable
 {
   typedef typename Types::HBUINT HBUINT;
 
   struct EntryData
   {
     HBUINT16	markIndex;	/* Index of the substitution table for the
 				 * marked glyph (use 0xFFFF for none). */
     HBUINT16	currentIndex;	/* Index of the substitution table for the
 				 * current glyph (use 0xFFFF for none). */
     public:
     DEFINE_SIZE_STATIC (4);
   };
 
   struct driver_context_t
   {
     enum { in_place = true };
     enum Flags
     {
       SetMark		= 0x8000,	/* If set, make the current glyph the marked glyph. */
       DontAdvance	= 0x4000,	/* If set, don't advance to the next glyph before
 					 * going to the new state. */
       Reserved		= 0x3FFF,	/* These bits are reserved and should be set to 0. */
     };
 
     driver_context_t (const ContextualSubtable *table_,
 			     hb_aat_apply_context_t *c_) :
 	ret (false),
 	c (c_),
 	mark_set (false),
 	mark (0),
 	table (table_),
 	subs (table+table->substitutionTables) {}
 
     bool is_actionable (StateTableDriver<Types, EntryData> *driver,
 			const Entry<EntryData> *entry)
     {
       hb_buffer_t *buffer = driver->buffer;
 
       if (buffer->idx == buffer->len && !mark_set)
         return false;
 
       return entry->data.markIndex != 0xFFFF || entry->data.currentIndex != 0xFFFF;
     }
     bool transition (StateTableDriver<Types, EntryData> *driver,
 		     const Entry<EntryData> *entry)
     {
       hb_buffer_t *buffer = driver->buffer;
 
       /* Looks like CoreText applies neither mark nor current substitution for
        * end-of-text if mark was not explicitly set. */
       if (buffer->idx == buffer->len && !mark_set)
         return true;
 
       const GlyphID *replacement;
 
       replacement = nullptr;
       if (Types::extended)
       {
 	if (entry->data.markIndex != 0xFFFF)
 	{
 	  const Lookup<GlyphID> &lookup = subs[entry->data.markIndex];
 	  replacement = lookup.get_value (buffer->info[mark].codepoint, driver->num_glyphs);
 	}
       }
       else
       {
 	unsigned int offset = entry->data.markIndex + buffer->info[mark].codepoint;
 	const UnsizedArrayOf<GlyphID> &subs_old = (const UnsizedArrayOf<GlyphID> &) subs;
 	replacement = &subs_old[Types::wordOffsetToIndex (offset, table, subs_old.arrayZ)];
 	if (!replacement->sanitize (&c->sanitizer) || !*replacement)
 	  replacement = nullptr;
       }
       if (replacement)
       {
 	buffer->unsafe_to_break (mark, MIN (buffer->idx + 1, buffer->len));
 	buffer->info[mark].codepoint = *replacement;
 	ret = true;
       }
 
       replacement = nullptr;
       unsigned int idx = MIN (buffer->idx, buffer->len - 1);
       if (Types::extended)
       {
 	if (entry->data.currentIndex != 0xFFFF)
 	{
 	  const Lookup<GlyphID> &lookup = subs[entry->data.currentIndex];
 	  replacement = lookup.get_value (buffer->info[idx].codepoint, driver->num_glyphs);
 	}
       }
       else
       {
 	unsigned int offset = entry->data.currentIndex + buffer->info[idx].codepoint;
 	const UnsizedArrayOf<GlyphID> &subs_old = (const UnsizedArrayOf<GlyphID> &) subs;
 	replacement = &subs_old[Types::wordOffsetToIndex (offset, table, subs_old.arrayZ)];
 	if (!replacement->sanitize (&c->sanitizer) || !*replacement)
 	  replacement = nullptr;
       }
       if (replacement)
       {
 	buffer->info[idx].codepoint = *replacement;
 	ret = true;
       }
 
       if (entry->flags & SetMark)
       {
 	mark_set = true;
 	mark = buffer->idx;
       }
 
       return true;
     }
 
     public:
     bool ret;
     private:
     hb_aat_apply_context_t *c;
     bool mark_set;
     unsigned int mark;
     const ContextualSubtable *table;
     const UnsizedOffsetListOf<Lookup<GlyphID>, HBUINT, false> &subs;
   };
 
   bool apply (hb_aat_apply_context_t *c) const
   {
     TRACE_APPLY (this);
 
     driver_context_t dc (this, c);
 
     StateTableDriver<Types, EntryData> driver (machine, c->buffer, c->face);
     driver.drive (&dc);
 
     return_trace (dc.ret);
   }
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
 
     unsigned int num_entries = 0;
     if (unlikely (!machine.sanitize (c, &num_entries))) return_trace (false);
 
-    if (!Types::extended) return_trace (true);
+    if (!Types::extended)
+      return_trace (substitutionTables.sanitize (c, this, 0));
 
     unsigned int num_lookups = 0;
 
     const Entry<EntryData> *entries = machine.get_entries ();
     for (unsigned int i = 0; i < num_entries; i++)
     {
       const EntryData &data = entries[i].data;
 
       if (data.markIndex != 0xFFFF)
 	num_lookups = MAX<unsigned int> (num_lookups, 1 + data.markIndex);
       if (data.currentIndex != 0xFFFF)
 	num_lookups = MAX<unsigned int> (num_lookups, 1 + data.currentIndex);
     }
 
     return_trace (substitutionTables.sanitize (c, this, num_lookups));
   }
 
   protected:
   StateTable<Types, EntryData>
 		machine;
   OffsetTo<UnsizedOffsetListOf<Lookup<GlyphID>, HBUINT, false>, HBUINT, false>
 		substitutionTables;
   public:
   DEFINE_SIZE_STATIC (20);
 };
diff --git a/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-shape-fuzzer-5631444412530688 b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-shape-fuzzer-5631444412530688
new file mode 100644
index 000000000..25f7d697e
Binary files /dev/null and b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-shape-fuzzer-5631444412530688 differ
