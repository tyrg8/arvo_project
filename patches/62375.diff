commit 7d4213b3abd5360c88e9120c3bc68ffd9b8a6870
Author: Shen-Ta Hsieh <beststeve@secondstate.io>
Date:   Mon Oct 30 16:15:41 2023 +0800

    [AOT] Validate AOT section header fields
    
    Signed-off-by: Shen-Ta Hsieh <beststeve@secondstate.io>

diff --git a/lib/loader/shared_library.cpp b/lib/loader/shared_library.cpp
index 0d8edbb8..a868a897 100644
--- a/lib/loader/shared_library.cpp
+++ b/lib/loader/shared_library.cpp
@@ -79,65 +79,70 @@ Expect<void> SharedLibrary::load(const std::filesystem::path &Path) noexcept {
 Expect<void> SharedLibrary::load(const AST::AOTSection &AOTSec) noexcept {
   BinarySize = 0;
   for (const auto &Section : AOTSec.getSections()) {
     const auto Offset = std::get<1>(Section);
     const auto Size = std::get<2>(Section);
     BinarySize = std::max(BinarySize, Offset + Size);
   }
   BinarySize = roundUpPageBoundary(BinarySize);
 
   Binary = Allocator::allocate_chunk(BinarySize);
   if (unlikely(!Binary)) {
     spdlog::error(ErrCode::Value::MemoryOutOfBounds);
     return Unexpect(ErrCode::Value::MemoryOutOfBounds);
   }
 
   std::vector<std::pair<uint8_t *, uint64_t>> ExecutableRanges;
   for (const auto &Section : AOTSec.getSections()) {
     const auto Offset = std::get<1>(Section);
     const auto Size = std::get<2>(Section);
     const auto &Content = std::get<3>(Section);
-    assuming(Content.size() <= Size);
+    if (Size > BinarySize || Offset > BinarySize ||
+        Offset + Size > BinarySize || Content.size() > Size) {
+      return Unexpect(ErrCode::Value::IntegerTooLarge);
+    }
     std::copy(Content.begin(), Content.end(), Binary + Offset);
     switch (std::get<0>(Section)) {
     case 1: { // Text
       const auto O = roundDownPageBoundary(Offset);
       const auto S = roundUpPageBoundary(Size + (Offset - O));
       ExecutableRanges.emplace_back(Binary + O, S);
       break;
     }
     case 2: // Data
       break;
     case 3: // BSS
       break;
 #if WASMEDGE_OS_WINDOWS
     case 4: // PData
       PDataAddress = reinterpret_cast<void *>(Binary + Offset);
       PDataSize =
           static_cast<uint32_t>(Size / sizeof(winapi::RUNTIME_FUNCTION_));
       break;
 #endif
+    default:
+      return Unexpect(ErrCode::Value::IntegerTooLarge);
     }
   }
 
   for (const auto &[Pointer, Size] : ExecutableRanges) {
     if (!Allocator::set_chunk_executable(Pointer, Size)) {
       spdlog::error(ErrCode::Value::MemoryOutOfBounds);
       spdlog::error("    set_chunk_executable failed:{}", std::strerror(errno));
       return Unexpect(ErrCode::Value::MemoryOutOfBounds);
     }
   }
 
   IntrinsicsAddress = AOTSec.getIntrinsicsAddress();
   TypesAddress = AOTSec.getTypesAddress();
   CodesAddress = AOTSec.getCodesAddress();
 
 #if WASMEDGE_OS_WINDOWS
   if (PDataSize != 0) {
     winapi::RtlAddFunctionTable(
         static_cast<winapi::PRUNTIME_FUNCTION_>(PDataAddress), PDataSize,
         reinterpret_cast<winapi::ULONG_PTR_>(Binary));
   }
 #endif
 
   return {};
 }
