commit 10624a2beb3b5e185cf10e6d11877555e84979ed
Author: Tim Ledbetter <timledbetter@gmail.com>
Date:   Sat Nov 11 11:10:08 2023 +0000

    LibGfx/ICC: Avoid overflow when creating `MultiLocalizedUnicodeTagData`
    
    Previously, it was possible for a `MultiLocalizedUnicodeTagData` object
    with a incorrect length  or offset fields to cause a buffer overflow.

diff --git a/Userland/Libraries/LibGfx/ICC/TagTypes.cpp b/Userland/Libraries/LibGfx/ICC/TagTypes.cpp
index 966c18cf1c..5fe20b5fce 100644
--- a/Userland/Libraries/LibGfx/ICC/TagTypes.cpp
+++ b/Userland/Libraries/LibGfx/ICC/TagTypes.cpp
@@ -673,61 +673,65 @@ StringView MeasurementTagData::standard_illuminant_name(StandardIlluminant stand
 ErrorOr<NonnullRefPtr<MultiLocalizedUnicodeTagData>> MultiLocalizedUnicodeTagData::from_bytes(ReadonlyBytes bytes, u32 offset, u32 size)
 {
     // ICC v4, 10.15 multiLocalizedUnicodeType
     VERIFY(tag_type(bytes) == Type);
     TRY(check_reserved(bytes));
 
     // "Multiple strings within this tag may share storage locations. For example, en/US and en/UK can refer to the
     //  same string data."
     // This implementation makes redundant string copies in that case.
     // Most of the time, this costs just a few bytes, so that seems ok.
 
     if (bytes.size() < 4 * sizeof(u32))
         return Error::from_string_literal("ICC::Profile: multiLocalizedUnicodeType has not enough data");
 
     // Table 54 — multiLocalizedUnicodeType
     u32 number_of_records = *bit_cast<BigEndian<u32> const*>(bytes.data() + 8);
     u32 record_size = *bit_cast<BigEndian<u32> const*>(bytes.data() + 12);
 
     // "The fourth field of this tag, the record size, should contain the value 12, which corresponds to the size in bytes
     // of each record. Any code that needs to access the nth record should determine the record’s offset by multiplying
     // n by the contents of this size field and adding 16. This minor extra effort allows for future expansion of the record
     // encoding, should the need arise, without having to define a new tag type."
     if (record_size < sizeof(MultiLocalizedUnicodeRawRecord))
         return Error::from_string_literal("ICC::Profile: multiLocalizedUnicodeType record size too small");
-    if (bytes.size() < 16 + number_of_records * record_size)
+
+    Checked<size_t> records_size_in_bytes = number_of_records;
+    records_size_in_bytes *= record_size;
+    records_size_in_bytes += 16;
+    if (records_size_in_bytes.has_overflow() || bytes.size() < records_size_in_bytes.value())
         return Error::from_string_literal("ICC::Profile: multiLocalizedUnicodeType not enough data for records");
 
     Vector<Record> records;
     TRY(records.try_resize(number_of_records));
 
     // "For the definition of language codes and country codes, see respectively
     //  ISO 639-1 and ISO 3166-1. The Unicode strings in storage should be encoded as 16-bit big-endian, UTF-16BE,
     //  and should not be NULL terminated."
     auto& utf_16be_decoder = *TextCodec::decoder_for("utf-16be"sv);
 
     for (u32 i = 0; i < number_of_records; ++i) {
         size_t offset = 16 + i * record_size;
         auto record = *bit_cast<MultiLocalizedUnicodeRawRecord const*>(bytes.data() + offset);
 
         records[i].iso_639_1_language_code = record.language_code;
         records[i].iso_3166_1_country_code = record.country_code;
 
         if (record.string_length_in_bytes % 2 != 0)
             return Error::from_string_literal("ICC::Profile: multiLocalizedUnicodeType odd UTF-16 byte length");
 
-        if (record.string_offset_in_bytes + record.string_length_in_bytes > bytes.size())
+        if (static_cast<u64>(record.string_offset_in_bytes) + record.string_length_in_bytes > bytes.size())
             return Error::from_string_literal("ICC::Profile: multiLocalizedUnicodeType string offset out of bounds");
 
         StringView utf_16be_data { bytes.data() + record.string_offset_in_bytes, record.string_length_in_bytes };
 
         // Despite the "should not be NULL terminated" in the spec, some files in the wild have trailing NULLs.
         // Fix up this case here, so that application code doesn't have to worry about it.
         // (If this wasn't hit in practice, we'd return an Error instead.)
         while (utf_16be_data.length() >= 2 && utf_16be_data.ends_with(StringView("\0", 2)))
             utf_16be_data = utf_16be_data.substring_view(0, utf_16be_data.length() - 2);
 
         records[i].text = TRY(utf_16be_decoder.to_utf8(utf_16be_data));
     }
 
     return try_make_ref_counted<MultiLocalizedUnicodeTagData>(offset, size, move(records));
 }
