commit 174b2fcf595a22af1ac6dcfa009ca5e7fcb8435e
Author: Kim Kulling <kimkulling@users.noreply.github.com>
Date:   Wed Apr 27 20:21:30 2022 +0200

    Fix invalid use of material reference.

diff --git a/code/AssetLib/ASE/ASEParser.cpp b/code/AssetLib/ASE/ASEParser.cpp
index 9e2d301e8..0d526147c 100644
--- a/code/AssetLib/ASE/ASEParser.cpp
+++ b/code/AssetLib/ASE/ASEParser.cpp
@@ -512,151 +512,152 @@ void Parser::ParseLV1MaterialListBlock() {
 // ------------------------------------------------------------------------------------------------
 void Parser::ParseLV2MaterialBlock(ASE::Material &mat) {
     AI_ASE_PARSER_INIT();
 
     unsigned int iNumSubMaterials = 0;
     while (true) {
         if ('*' == *filePtr) {
             ++filePtr;
             if (TokenMatch(filePtr, "MATERIAL_NAME", 13)) {
                 if (!ParseString(mat.mName, "*MATERIAL_NAME"))
                     SkipToNextToken();
                 continue;
             }
             // ambient material color
             if (TokenMatch(filePtr, "MATERIAL_AMBIENT", 16)) {
                 ParseLV4MeshFloatTriple(&mat.mAmbient.r);
                 continue;
             }
             // diffuse material color
             if (TokenMatch(filePtr, "MATERIAL_DIFFUSE", 16)) {
                 ParseLV4MeshFloatTriple(&mat.mDiffuse.r);
                 continue;
             }
             // specular material color
             if (TokenMatch(filePtr, "MATERIAL_SPECULAR", 17)) {
                 ParseLV4MeshFloatTriple(&mat.mSpecular.r);
                 continue;
             }
             // material shading type
             if (TokenMatch(filePtr, "MATERIAL_SHADING", 16)) {
                 if (TokenMatch(filePtr, "Blinn", 5)) {
                     mat.mShading = Discreet3DS::Blinn;
                 } else if (TokenMatch(filePtr, "Phong", 5)) {
                     mat.mShading = Discreet3DS::Phong;
                 } else if (TokenMatch(filePtr, "Flat", 4)) {
                     mat.mShading = Discreet3DS::Flat;
                 } else if (TokenMatch(filePtr, "Wire", 4)) {
                     mat.mShading = Discreet3DS::Wire;
                 } else {
                     // assume gouraud shading
                     mat.mShading = Discreet3DS::Gouraud;
                     SkipToNextToken();
                 }
                 continue;
             }
             // material transparency
             if (TokenMatch(filePtr, "MATERIAL_TRANSPARENCY", 21)) {
                 ParseLV4MeshFloat(mat.mTransparency);
                 mat.mTransparency = ai_real(1.0) - mat.mTransparency;
                 continue;
             }
             // material self illumination
             if (TokenMatch(filePtr, "MATERIAL_SELFILLUM", 18)) {
                 ai_real f = 0.0;
                 ParseLV4MeshFloat(f);
 
                 mat.mEmissive.r = f;
                 mat.mEmissive.g = f;
                 mat.mEmissive.b = f;
                 continue;
             }
             // material shininess
             if (TokenMatch(filePtr, "MATERIAL_SHINE", 14)) {
                 ParseLV4MeshFloat(mat.mSpecularExponent);
                 mat.mSpecularExponent *= 15;
                 continue;
             }
             // two-sided material
             if (TokenMatch(filePtr, "MATERIAL_TWOSIDED", 17)) {
                 mat.mTwoSided = true;
                 continue;
             }
             // material shininess strength
             if (TokenMatch(filePtr, "MATERIAL_SHINESTRENGTH", 22)) {
                 ParseLV4MeshFloat(mat.mShininessStrength);
                 continue;
             }
             // diffuse color map
             if (TokenMatch(filePtr, "MAP_DIFFUSE", 11)) {
                 // parse the texture block
                 ParseLV3MapBlock(mat.sTexDiffuse);
                 continue;
             }
             // ambient color map
             if (TokenMatch(filePtr, "MAP_AMBIENT", 11)) {
                 // parse the texture block
                 ParseLV3MapBlock(mat.sTexAmbient);
                 continue;
             }
             // specular color map
             if (TokenMatch(filePtr, "MAP_SPECULAR", 12)) {
                 // parse the texture block
                 ParseLV3MapBlock(mat.sTexSpecular);
                 continue;
             }
             // opacity map
             if (TokenMatch(filePtr, "MAP_OPACITY", 11)) {
                 // parse the texture block
                 ParseLV3MapBlock(mat.sTexOpacity);
                 continue;
             }
             // emissive map
             if (TokenMatch(filePtr, "MAP_SELFILLUM", 13)) {
                 // parse the texture block
                 ParseLV3MapBlock(mat.sTexEmissive);
                 continue;
             }
             // bump map
             if (TokenMatch(filePtr, "MAP_BUMP", 8)) {
                 // parse the texture block
                 ParseLV3MapBlock(mat.sTexBump);
             }
             // specular/shininess map
             if (TokenMatch(filePtr, "MAP_SHINESTRENGTH", 17)) {
                 // parse the texture block
                 ParseLV3MapBlock(mat.sTexShininess);
                 continue;
             }
             // number of submaterials
             if (TokenMatch(filePtr, "NUMSUBMTLS", 10)) {
                 ParseLV4MeshLong(iNumSubMaterials);
 
                 // allocate enough storage
                 mat.avSubMaterials.resize(iNumSubMaterials, Material("INVALID SUBMATERIAL"));
             }
             // submaterial chunks
             if (TokenMatch(filePtr, "SUBMATERIAL", 11)) {
 
                 unsigned int iIndex = 0;
                 ParseLV4MeshLong(iIndex);
 
                 if (iIndex >= iNumSubMaterials) {
                     LogWarning("Out of range: submaterial index is too large");
                     iIndex = iNumSubMaterials - 1;
                 }
 
                 // get a reference to the material
                 if (iIndex < mat.avSubMaterials.size()) {
                     Material &sMat = mat.avSubMaterials[iIndex];
+
+                    // parse the material block
+                    ParseLV2MaterialBlock(sMat);
                 }
 
-                // parse the material block
-                ParseLV2MaterialBlock(sMat);
                 continue;
             }
         }
         AI_ASE_HANDLE_SECTION("2", "*MATERIAL");
     }
 }
 
 // ------------------------------------------------------------------------------------------------
