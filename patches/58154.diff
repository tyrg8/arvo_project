commit b9f4e4bf1c27ad885e4d611c5cf62928d96d5401
Author: Dirk Farin <dirk.farin@gmail.com>
Date:   Thu Apr 20 15:54:08 2023 +0200

    fix integer overflow in parsing rgan polygon

diff --git a/libheif/region.cc b/libheif/region.cc
index 417fade..1e1d7da 100644
--- a/libheif/region.cc
+++ b/libheif/region.cc
@@ -194,26 +194,29 @@ Error RegionGeometry_Ellipse::parse(const std::vector<uint8_t>& data,
 Error RegionGeometry_Polygon::parse(const std::vector<uint8_t>& data,
                                     int field_size,
                                     unsigned int* dataOffset)
 {
-  unsigned int bytesRequired1 = (field_size / 8) * 1;
+  uint32_t bytesRequired1 = (field_size / 8) * 1;
   if (data.size() - *dataOffset < bytesRequired1) {
     return Error(heif_error_Invalid_input, heif_suberror_Invalid_region_data,
                  "Insufficient data remaining for polygon");
   }
 
+  // Note: we need to do the calculation in uint64_t because numPoints may be any 32-bit number
+  // and it is multiplied by (at most) 8.
+
   uint32_t numPoints = parse_unsigned(data, field_size, dataOffset);
-  unsigned int bytesRequired2 = (field_size / 8) * numPoints * 2;
+  uint64_t bytesRequired2 = (field_size / 8) * uint64_t(numPoints) * 2;
   if (data.size() - *dataOffset < bytesRequired2) {
     return Error(heif_error_Invalid_input, heif_suberror_Invalid_region_data,
                  "Insufficient data remaining for polygon");
   }
 
   for (uint32_t i = 0; i < numPoints; i++) {
     Point p;
     p.x = parse_signed(data, field_size, dataOffset);
     p.y = parse_signed(data, field_size, dataOffset);
     points.push_back(p);
   }
 
   return Error::Ok;
 }
