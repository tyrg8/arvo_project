commit 271b9b8367a8151fcd98723d73382ec56f05c810
Author: David Anderson <davea42@linuxmail.org>
Date:   Tue Mar 28 13:40:09 2023 -0700

    Fixes ossfuzz 57442  DW202303-052
    Checks more carefully for a corrupted rnglists
    header.
            modified:   src/lib/libdwarf/dwarf_rnglists.c

diff --git a/src/lib/libdwarf/dwarf_rnglists.c b/src/lib/libdwarf/dwarf_rnglists.c
index b31b0d9c..265b5538 100644
--- a/src/lib/libdwarf/dwarf_rnglists.c
+++ b/src/lib/libdwarf/dwarf_rnglists.c
@@ -30,29 +30,30 @@ OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 #include <config.h>
 
 #include <stdlib.h> /* free() malloc() */
+#include <stdio.h> /* printf */
 #include <string.h> /* memset() */
 
 #if defined(_WIN32) && defined(HAVE_STDAFX_H)
 #include "stdafx.h"
 #endif /* HAVE_STDAFX_H */
 
 #include "dwarf.h"
 #include "libdwarf.h"
 #include "libdwarf_private.h"
 #include "dwarf_base_types.h"
 #include "dwarf_opaque.h"
 #include "dwarf_alloc.h"
 #include "dwarf_error.h"
 #include "dwarf_util.h"
 #include "dwarf_string.h"
 #include "dwarf_rnglists.h"
 
 #define SIZEOFT8 1
 #define SIZEOFT16 2
 #define SIZEOFT32 4
 #define SIZEOFT64 8
 
 #if 0
@@ -216,199 +217,214 @@ int
 _dwarf_internal_read_rnglists_header(Dwarf_Debug dbg,
     Dwarf_Unsigned contextnum,
     Dwarf_Unsigned sectionlength,
     Dwarf_Small *data,
     Dwarf_Small *end_data,
     Dwarf_Unsigned offset,
     Dwarf_Rnglists_Context  buildhere,
     Dwarf_Unsigned *next_offset,
     Dwarf_Error *error)
 {
     Dwarf_Small *startdata = data;
     Dwarf_Unsigned arealen = 0;
     int offset_size = 0;
     int exten_size = 0;
     Dwarf_Unsigned version = 0;
     unsigned address_size = 0;
     unsigned segment_selector_size=  0;
     Dwarf_Unsigned offset_entry_count = 0;
     Dwarf_Unsigned localoff = 0;
     Dwarf_Unsigned lists_len = 0;
     Dwarf_Unsigned secsize_dbg = 0;
 
     secsize_dbg = dbg->de_debug_rnglists.dss_size;
     /*  Sanity checks */
     if (sectionlength > secsize_dbg) {
          dwarfstring m;
          dwarfstring_constructor(&m);
          dwarfstring_append_printf_u(&m,
              "DW_DLE_RNGLISTS_ERROR: "
              " section_length argument (%lu) mismatch vs.",
              sectionlength); 
          dwarfstring_append_printf_u(&m,
              ".debug_rnglists"
              " section length",secsize_dbg);
          _dwarf_error_string(dbg,error,DW_DLE_RNGLISTS_ERROR,
              dwarfstring_string(&m));
          dwarfstring_destructor(&m);
          return DW_DLV_ERROR;
     }
     if (sectionlength > secsize_dbg) {
          dwarfstring m;
          dwarfstring_constructor(&m);
          dwarfstring_append(&m, 
              "DW_DLE_RNGLISTS_ERROR: "
              " section_length argument mismatch vs. .debug_rnglists"
              " section length including header.");
          _dwarf_error_string(dbg,error,DW_DLE_RNGLISTS_ERROR,
              dwarfstring_string(&m));
          dwarfstring_destructor(&m);
          return DW_DLV_ERROR;
     }
+    buildhere->rc_startaddr = data;
     READ_AREA_LENGTH_CK(dbg,arealen,Dwarf_Unsigned,
         data,offset_size,exten_size,
         error,
         sectionlength,end_data);
     if (arealen > sectionlength ||
         (arealen+offset_size+exten_size) > sectionlength) {
         dwarfstring m;
         dwarfstring_constructor(&m);
         dwarfstring_append_printf_u(&m,
             "DW_DLE_RNGLISTS_ERROR: A .debug_rnglists "
             "area size of 0x%x ",arealen);
         dwarfstring_append_printf_u(&m,
             "at offset 0x%x ",offset);
         dwarfstring_append_printf_u(&m,
             "is larger than the entire section size of "
             "0x%x. Corrupt DWARF.",sectionlength);
         _dwarf_error_string(dbg,error,DW_DLE_RNGLISTS_ERROR,
             dwarfstring_string(&m));
         dwarfstring_destructor(&m);
         return DW_DLV_ERROR;
     }
 
     localoff = offset_size+exten_size;
     buildhere->rc_length = arealen + localoff;
     buildhere->rc_dbg = dbg;
     buildhere->rc_index = contextnum;
     buildhere->rc_header_offset = offset;
     buildhere->rc_offset_size = offset_size;
     buildhere->rc_extension_size = exten_size;
     buildhere->rc_magic = RNGLISTS_MAGIC;
     READ_UNALIGNED_CK(dbg,version,Dwarf_Unsigned,data,
         SIZEOFT16,error,end_data);
     if (version != DW_CU_VERSION5) {
         dwarfstring m;
         dwarfstring_constructor(&m);
         dwarfstring_append_printf_u(&m,
             "DW_DLE_RNGLISTS_ERROR: The version should be 5 "
             "but we find %u instead.",version);
         _dwarf_error_string(dbg,error,DW_DLE_RNGLISTS_ERROR,
             dwarfstring_string(&m));
         dwarfstring_destructor(&m);
         return DW_DLV_ERROR;
     }
     buildhere->rc_version = version;
     data += SIZEOFT16;
     localoff += SIZEOFT16;
 
     READ_UNALIGNED_CK(dbg,address_size,unsigned,data,
         SIZEOFT8,error,end_data);
     if (address_size != 4 && address_size != 8 &&
         address_size != 2) {
         dwarfstring m;
         dwarfstring_constructor(&m);
         dwarfstring_append_printf_u(&m,
             " DW_DLE_RNGLISTS_ERROR: .debug_rnglists "
             "The address size "
             "of %u is not supported.",address_size);
         _dwarf_error_string(dbg,error,DW_DLE_RNGLISTS_ERROR,
             dwarfstring_string(&m));
         dwarfstring_destructor(&m);
         return DW_DLV_ERROR;
     }
     buildhere->rc_address_size = address_size;
     localoff++;
     data++;
 
     READ_UNALIGNED_CK(dbg,segment_selector_size,unsigned,data,
         SIZEOFT8,error,end_data);
     buildhere->rc_segment_selector_size = segment_selector_size;
     data++;
     localoff++;
     if (segment_selector_size) {
         dwarfstring m;
         dwarfstring_constructor(&m);
         dwarfstring_append_printf_u(&m,
             " DW_DLE_RNGLISTS_ERROR: .debug_rnglists"
             " The segment selector size "
             "of %u is not supported.",address_size);
         _dwarf_error_string(dbg,error,DW_DLE_RNGLISTS_ERROR,
             dwarfstring_string(&m));
         dwarfstring_destructor(&m);
         return DW_DLV_ERROR;
     }
     if ((offset+localoff+SIZEOFT32) > secsize_dbg) {
         dwarfstring m;
         dwarfstring_constructor(&m);
         dwarfstring_append_printf_u(&m,
             " DW_DLE_RNGLISTS_ERROR: .debug_rnglists"
             " Header runs off the end of the section "
             " with offset %u",offset+localoff+SIZEOFT32);
         _dwarf_error_string(dbg,error,DW_DLE_RNGLISTS_ERROR,
             dwarfstring_string(&m));
         dwarfstring_destructor(&m);
         return DW_DLV_ERROR;
     }
 
     READ_UNALIGNED_CK(dbg,offset_entry_count,Dwarf_Unsigned,data,
         SIZEOFT32,error,end_data);
     buildhere->rc_offset_entry_count = offset_entry_count;
     data += SIZEOFT32;
     localoff+= SIZEOFT32;
     if (offset_entry_count ){
         buildhere->rc_offsets_array = data;
     }
+
     lists_len = offset_size *offset_entry_count;
     if (offset_entry_count >= secsize_dbg ||
         lists_len >= secsize_dbg) {
         dwarfstring m;
         dwarfstring_constructor(&m);
         dwarfstring_append_printf_u(&m,
             " DW_DLE_RNGLISTS_ERROR: .debug_rnglists"
             " offset entry count"
             " of %u is clearly impossible. Corrupt data",
             offset_entry_count);
         _dwarf_error_string(dbg,error,DW_DLE_RNGLISTS_ERROR,
             dwarfstring_string(&m));
         dwarfstring_destructor(&m);
         return DW_DLV_ERROR;
     }
     data += lists_len;
     buildhere->rc_offsets_off_in_sect = offset+localoff;
     localoff += lists_len;
     if (localoff > buildhere->rc_length) {
         dwarfstring m;
         dwarfstring_constructor(&m);
         dwarfstring_append_printf_u(&m,
             " DW_DLE_RNGLISTS_ERROR: .debug_rnglists"
             " length of rnglists header too large at"
             " of %u is clearly impossible. Corrupt data",
             localoff);
         _dwarf_error_string(dbg,error,DW_DLE_RNGLISTS_ERROR,
             dwarfstring_string(&m));
         dwarfstring_destructor(&m);
         return DW_DLV_ERROR;
     }
     buildhere->rc_first_rnglist_offset = offset+localoff;
     buildhere->rc_rnglists_header = startdata;
     buildhere->rc_endaddr = startdata +buildhere->rc_length;
+    if (buildhere->rc_endaddr > end_data) {
+        dwarfstring m;
+        dwarfstring_constructor(&m);
+        dwarfstring_append_printf_u(&m,
+            " DW_DLE_RNGLISTS_ERROR: .debug_rnglists"
+            " length of rnglists header (%u) "
+            "runs off end of section. Corrupt data",
+            buildhere->rc_length);
+        _dwarf_error_string(dbg,error,DW_DLE_RNGLISTS_ERROR,
+            dwarfstring_string(&m));
+        dwarfstring_destructor(&m);
+        return DW_DLV_ERROR;
+    }
     buildhere->rc_past_last_rnglist_offset =
         buildhere->rc_header_offset +buildhere->rc_length;
     *next_offset =  buildhere->rc_past_last_rnglist_offset;
     return DW_DLV_OK;
 }
 
 /*  We return a pointer to an array of contexts
     (not context pointers) through *cxt if
     we succeed and are returning DW_DLV_OK.
     We never return DW_DLV_NO_ENTRY here. */
@@ -594,80 +610,81 @@ int
 dwarf_get_rnglist_offset_index_value(
     Dwarf_Debug dbg,
     Dwarf_Unsigned context_index,
     Dwarf_Unsigned offsetentry_index,
     Dwarf_Unsigned * offset_value_out,
     Dwarf_Unsigned * global_offset_value_out,
     Dwarf_Error *error)
 {
     Dwarf_Rnglists_Context con = 0;
     unsigned offset_len = 0;
     Dwarf_Small *offsetptr = 0;
     Dwarf_Unsigned targetoffset = 0;
     Dwarf_Unsigned localoffset = 0;
+    Dwarf_Unsigned lastvalidlocaloffset = 0;
 
     if (!dbg || dbg->de_magic != DBG_IS_VALID) { 
         _dwarf_error_string(NULL, error,DW_DLE_DBG_NULL,
             "DW_DLE_DBG_NULL "
             "NULL or invalid dbg "
             "argument passed to "
             "dwarf_get_rnglist_offset_index_value()");
         return DW_DLV_ERROR;
     }
     if (!dbg->de_rnglists_context) {
         return DW_DLV_NO_ENTRY;
     }
 
     if (!dbg->de_rnglists_context_count) {
         return DW_DLV_NO_ENTRY;
     }
     if (context_index >= dbg->de_rnglists_context_count) {
         return DW_DLV_NO_ENTRY;
     }
     con = dbg->de_rnglists_context[context_index];
     if (con->rc_magic != RNGLISTS_MAGIC) {
         _dwarf_error_string(NULL, error,DW_DLE_DBG_NULL,
             "DW_DLE_DBG_NULL "
             "rnglists context magic wrong "
             "not RNGLISTS_MAGIC");
         return DW_DLV_ERROR;
     }
     if (offsetentry_index >= con->rc_offset_entry_count) {
         return DW_DLV_NO_ENTRY;
     }
     offset_len  = con->rc_offset_size;
     localoffset = offsetentry_index*offset_len;
     offsetptr   = con->rc_offsets_array + localoffset;
-
-    if ((con->rc_offsets_off_in_sect +offset_len) > 
+    if ((con->rc_offsets_off_in_sect +localoffset +
+        offset_len) > 
         con->rc_past_last_rnglist_offset) {  
         dwarfstring m;
 
         dwarfstring_constructor(&m);
         dwarfstring_append_printf_u(&m,
             "DW_DLE_RNGLISTS_ERROR "
             "dwarf_get_rnglist_offset_index_value() "
             " Offset for index %u is too large. ",
             offsetentry_index);
         _dwarf_error_string(dbg, error,DW_DLE_RNGLISTS_ERROR,
             dwarfstring_string(&m));
         dwarfstring_destructor(&m);
         return DW_DLV_ERROR;
     
     }
     READ_UNALIGNED_CK(dbg,targetoffset,Dwarf_Unsigned,
         offsetptr,
         offset_len,error,con->rc_endaddr);
     if (offset_value_out) {
         *offset_value_out = targetoffset;
     }
     if (global_offset_value_out) {
         *global_offset_value_out = targetoffset +
             con->rc_offsets_off_in_sect;
     }
     return DW_DLV_OK;
 }
 
 /*  Used by dwarfdump to print basic data from the
     data generated to look at a specific rangelist
     as returned by  dwarf_rnglists_index_get_rle_head()
     or dwarf_rnglists_offset_get_rle_head. */
