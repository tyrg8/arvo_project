commit 149cb3587e4cd3928f8f56553ecfeaac15452585
Author: pancake <pancake@nopcode.org>
Date:   Sun Feb 10 01:14:31 2019 +0100

    Fix clusterfuzz-testcase-minimized-ia_fuzz-5670419745472512.dms

diff --git a/libr/bin/format/pe/pe.c b/libr/bin/format/pe/pe.c
index bf7848580c..c8564404ee 100644
--- a/libr/bin/format/pe/pe.c
+++ b/libr/bin/format/pe/pe.c
@@ -1213,13 +1213,13 @@ static int bin_pe_init_exports(struct PE_(r_bin_pe_obj_t)* bin) {
 	return true;
 }
 
-static void _free_resources(r_pe_resource *rs) {
+static void _free_resource(r_pe_resource *rs) {
 	if (rs) {
 		free (rs->name);
 		free (rs->timestr);
 		free (rs->data);
 		free (rs->type);
 		free (rs->language);
 		free (rs);
 	}
 }
@@ -1228,24 +1228,24 @@ static void _free_resources(r_pe_resource *rs) {
 static int bin_pe_init_resource(struct PE_(r_bin_pe_obj_t)* bin) {
 	PE_(image_data_directory) * resource_dir = &bin->data_directory[PE_IMAGE_DIRECTORY_ENTRY_RESOURCE];
 	PE_DWord resource_dir_paddr = bin_pe_rva_to_paddr (bin, resource_dir->VirtualAddress);
 	if (!resource_dir_paddr) {
 		return false;
 	}
 
-	bin->resources = r_list_newf ((RListFree)_free_resources);
+	bin->resources = r_list_newf ((RListFree)_free_resource);
 	if (!bin->resources) {
 		return false;
 	}
 	if (!(bin->resource_directory = malloc (sizeof(*bin->resource_directory)))) {
 		r_sys_perror ("malloc (resource directory)");
 		return false;
 	}
 	if (r_buf_read_at (bin->b, resource_dir_paddr, (ut8*) bin->resource_directory,
 		sizeof (*bin->resource_directory)) != sizeof (*bin->resource_directory)) {
 		bprintf ("Warning: read (resource directory)\n");
 		R_FREE (bin->resource_directory);
 		return false;
 	}
 	bin->resource_directory_offset = resource_dir_paddr;
 	return true;
 }
@@ -2242,133 +2242,141 @@ static char* _resource_type_str(int type) {
 }
 
 static void _parse_resource_directory(struct PE_(r_bin_pe_obj_t) *bin, Pe_image_resource_directory *dir, ut64 offDir, int type, int id, HtUU *dirs, char *resource_name) {
+	ut8 *resourceEntryName = NULL;
 	int index = 0;
 	ut32 totalRes = dir->NumberOfNamedEntries + dir->NumberOfIdEntries;
 	ut64 rsrc_base = bin->resource_directory_offset;
 	ut64 off;
 	if (totalRes > R_PE_MAX_RESOURCES) {
 		return;
 	}
 	for (index = 0; index < totalRes; index++) {
 		Pe_image_resource_directory_entry entry;
 		off = rsrc_base + offDir + sizeof(*dir) + index * sizeof(entry);
 		if (ht_uu_find (dirs, off, NULL)) {
 			break;
 		}
 		ht_uu_insert (dirs, off, 1);
 		if (off > bin->size || off + sizeof (entry) > bin->size) {
 			break;
 		}
 		if (r_buf_read_at (bin->b, off, (ut8*)&entry, sizeof(entry)) < 1) {
 			eprintf ("Warning: read resource entry\n");
 			break;
 		}
-		ut8 *resourceEntryName = NULL;
 		if (entry.u1.s.NameIsString) {
 			int i;
-			ut16 resourceEntryNameLength;
-			r_buf_read_at (bin->b, bin->resource_directory_offset + entry.u1.s.NameOffset, (ut8*)&resourceEntryNameLength, sizeof (ut16));
-
+			ut16 buf, resourceEntryNameLength;
+			r_buf_read_at (bin->b, bin->resource_directory_offset + entry.u1.s.NameOffset, (ut8*)&buf, sizeof (ut16));
+			resourceEntryNameLength = r_read_le16 (&buf);
 			resourceEntryName = calloc (resourceEntryNameLength + 1, sizeof (ut8));
-			for(i = 0; i < 2 * resourceEntryNameLength; i += 2) { /* Convert Unicode to ASCII */
-				r_buf_read_at (bin->b, bin->resource_directory_offset + entry.u1.s.NameOffset + 2 + i, resourceEntryName + (i/2), sizeof (ut8));
+			if (resourceEntryName) {
+				for (i = 0; i < resourceEntryNameLength; i++) { /* Convert Unicode to ASCII */
+					ut8 byte;
+					int r = r_buf_read_at (bin->b, bin->resource_directory_offset + entry.u1.s.NameOffset + 2 + (i*2), &byte, sizeof (ut8));
+					if (r < 1 || !byte) {
+						R_FREE (resourceEntryName);
+						break;
+					}
+					resourceEntryName[i] = byte;
+				}
 			}
 		}
 		if (entry.u2.s.DataIsDirectory) {
 			//detect here malicious file trying to making us infinite loop
 			Pe_image_resource_directory identEntry;
 			off = rsrc_base + entry.u2.s.OffsetToDirectory;
 			int len = r_buf_read_at (bin->b, off, (ut8*) &identEntry, sizeof (identEntry));
 			if (len < 1 || len != sizeof (Pe_image_resource_directory)) {
 				eprintf ("Warning: parsing resource directory\n");
 			}
 			if (resource_name && resourceEntryName) {
 				/* We're about to recursively call this function with a new resource entry name
 				   and we haven't used resource_name, so free it. Only happens in weird PEs. */
 				R_FREE (resource_name);
 			}
 			_parse_resource_directory (bin, &identEntry,
 				entry.u2.s.OffsetToDirectory, type, entry.u1.Id, dirs, (char *)resourceEntryName);
 			continue;
 		} else {
 			free (resourceEntryName);
 		}
 
 		Pe_image_resource_data_entry *data = R_NEW0 (Pe_image_resource_data_entry);
 		if (!data) {
 			break;
 		}
 		off = rsrc_base + entry.u2.OffsetToData;
 		if (off > bin->size || off + sizeof (*data) > bin->size) {
 			free (data);
 			break;
 		}
 		if (r_buf_read_at (bin->b, off, (ut8*)data, sizeof (*data)) != sizeof (*data)) {
 			eprintf ("Warning: read (resource data entry)\n");
 			free (data);
 			break;
 		}
 		if (type == PE_RESOURCE_ENTRY_VERSION) {
 			char key[64];
 			int counter = 0;
 			Sdb *sdb = sdb_new0 ();
 			if (!sdb) {
 				free (data);
 				sdb_free (sdb);
 				continue;
 			}
 			PE_DWord data_paddr = bin_pe_rva_to_paddr (bin, data->OffsetToData);
 			if (!data_paddr) {
 				bprintf ("Warning: bad RVA in resource data entry\n");
 				free (data);
 				sdb_free (sdb);
 				continue;
 			}
 			PE_DWord cur_paddr = data_paddr;
 			if ((cur_paddr & 0x3) != 0) {
 				bprintf ("Warning: not aligned version info address\n");
 				free (data);
 				sdb_free (sdb);
 				continue;
 			}
 			while (cur_paddr < (data_paddr + data->Size) && cur_paddr < bin->size) {
 				PE_VS_VERSIONINFO* vs_VersionInfo = Pe_r_bin_pe_parse_version_info (bin, cur_paddr);
 				if (vs_VersionInfo) {
 					snprintf (key, 30, "VS_VERSIONINFO%d", counter++);
 					sdb_ns_set (sdb, key, Pe_r_bin_store_resource_version_info (vs_VersionInfo));
 				} else {
 					break;
 				}
 				if (vs_VersionInfo->wLength < 1) {
 					// Invalid version length
 					break;
 				}
 				cur_paddr += vs_VersionInfo->wLength;
 				free_VS_VERSIONINFO (vs_VersionInfo);
 				align32 (cur_paddr);
 			}
 			sdb_ns_set (bin->kv, "vs_version_info", sdb);
 		}
 		r_pe_resource *rs = R_NEW0 (r_pe_resource);
 		if (!rs) {
 			free (data);
 			break;
 		}
 		/* Compare compileTimeStamp to resource timestamp to figure out if DOS date or POSIX date */
 		if (r_time_stamp_is_dos_format ((ut32) sdb_num_get (bin->kv, "image_file_header.TimeDateStamp", 0), dir->TimeDateStamp)) {
 			rs->timestr = r_time_stamp_to_str ( r_dos_time_stamp_to_posix (dir->TimeDateStamp));
 		} else {
 			rs->timestr = r_time_stamp_to_str (dir->TimeDateStamp);
 		}
 		rs->type = _resource_type_str (type);
 		rs->language = strdup (_resource_lang_str (entry.u1.Name & 0x3ff));
 		rs->data = data;
 		if (resource_name) {
 			rs->name = resource_name;
 		} else {
 			char numberbuf[6];
 			rs->name = strdup (sdb_itoa (id, numberbuf, 10));
 		}
 		r_list_append (bin->resources, rs);
 	}
 }
