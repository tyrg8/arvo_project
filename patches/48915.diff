commit 3ebb55b75f3ea0194814c787c6b5ebcaba76db07
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Mon Jul 11 11:02:27 2022 +0900

    bigint.c (mrb_bint_copy): allow dup operation for bigints.

diff --git a/include/mruby/internal.h b/include/mruby/internal.h
index 02500521b..5215d0e51 100644
--- a/include/mruby/internal.h
+++ b/include/mruby/internal.h
@@ -182,6 +182,7 @@ mrb_float mrb_bint_as_float(mrb_state *mrb, mrb_value x);
 mrb_int mrb_bint_as_int(mrb_state *mrb, mrb_value x);
 mrb_int mrb_bint_cmp(mrb_state *mrb, mrb_value x, mrb_value y);
 void mrb_gc_free_bint(mrb_state *mrb, struct RBasic *x);
+void mrb_bint_copy(mrb_state *mrb, mrb_value x, mrb_value y);
 #endif
 
 #endif  /* MRUBY_INTERNAL_H */
diff --git a/mrbgems/mruby-bigint/core/bigint.c b/mrbgems/mruby-bigint/core/bigint.c
index 4aba1c340..53464a3ab 100644
--- a/mrbgems/mruby-bigint/core/bigint.c
+++ b/mrbgems/mruby-bigint/core/bigint.c
@@ -17,24 +17,22 @@ static void
 mpz_init(mrb_state *mrb, mpz_t *s)
 {
   s->p = (mp_limb*)mrb_malloc(mrb, sizeof(mp_limb)*2);
   s->p[0] = 0;
   s->p[1] = 0;
   s->sn=0;
   s->sz=2;
 }
 
-#if 0
 static void
 mpz_init_set(mrb_state *mrb, mpz_t *s, mpz_t *t)
 {
   s->p = (mp_limb*)mrb_malloc(mrb, sizeof(mp_limb) * t->sz);
   for (size_t i=0;i < t->sz ; i++)
     (s->p)[i] = (t->p)[i];
 
   s->sn = t->sn;
   s->sz = t->sz;
 }
-#endif
 
 static void
 mpz_set_int(mrb_state *mrb, mpz_t *y, mrb_int v)
@@ -1450,3 +1448,11 @@ mrb_bint_rshift(mrb_state *mrb, mrb_value x, mrb_int width)
   }
   return bint_norm(mrb, b2);
 }
+
+void
+mrb_bint_copy(mrb_state *mrb, mrb_value x, mrb_value y)
+{
+  struct RBigint *b = RBIGINT(x);
+  struct RBigint *b2 = RBIGINT(y);
+  mpz_init_set(mrb, &b->mp, &b2->mp);
+}
diff --git a/src/class.c b/src/class.c
index 483a88ee0..b8a2268c2 100644
--- a/src/class.c
+++ b/src/class.c
@@ -2718,57 +2718,62 @@ static void
 init_copy(mrb_state *mrb, mrb_value dest, mrb_value obj)
 {
   switch (mrb_type(obj)) {
     case MRB_TT_ICLASS:
       copy_class(mrb, dest, obj);
       return;
     case MRB_TT_CLASS:
     case MRB_TT_MODULE:
       copy_class(mrb, dest, obj);
       mrb_iv_copy(mrb, dest, obj);
       mrb_iv_remove(mrb, dest, MRB_SYM(__classname__));
       break;
     case MRB_TT_OBJECT:
     case MRB_TT_SCLASS:
     case MRB_TT_HASH:
     case MRB_TT_DATA:
     case MRB_TT_EXCEPTION:
       mrb_iv_copy(mrb, dest, obj);
       break;
     case MRB_TT_ISTRUCT:
       mrb_istruct_copy(dest, obj);
       break;
+#ifdef MRB_USE_BIGINT
+    case MRB_TT_BIGINT:
+      mrb_bint_copy(mrb, dest, obj);
+      break;
+#endif
 
     default:
       break;
   }
   if (!mrb_func_basic_p(mrb, dest, MRB_SYM(initialize_copy), mrb_obj_init_copy)) {
     mrb_funcall_id(mrb, dest, MRB_SYM(initialize_copy), 1, obj);
   }
 }
 
 /* 15.3.1.3.8  */
 /*
  *  call-seq:
  *     obj.clone -> an_object
  *
  *  Produces a shallow copy of <i>obj</i>---the instance variables of
  *  <i>obj</i> are copied, but not the objects they reference. Copies
  *  the frozen state of <i>obj</i>. See also the discussion
  *  under <code>Object#dup</code>.
  *
  *     class Klass
  *        attr_accessor :str
  *     end
  *     s1 = Klass.new      #=> #<Klass:0x401b3a38>
  *     s1.str = "Hello"    #=> "Hello"
  *     s2 = s1.clone       #=> #<Klass:0x401b3998 @str="Hello">
  *     s2.str[1,4] = "i"   #=> "i"
  *     s1.inspect          #=> "#<Klass:0x401b3a38 @str=\"Hi\">"
  *     s2.inspect          #=> "#<Klass:0x401b3998 @str=\"Hi\">"
  *
  *  This method may have class-specific behavior.  If so, that
  *  behavior will be documented under the #+initialize_copy+ method of
  *  the class.
  *
  *  Some Class(True False Nil Symbol Integer Float) Object  cannot clone.
  */
