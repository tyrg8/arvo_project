commit b236b7a588ac2973a057ec578011cdc17c26f16d
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Thu Jun 8 21:53:05 2023 +0200

    parser: Halt parser when growing buffer results in OOM
    
    Fix short-lived regression from previous commit.
    
    It might be safer to make xmlBufSetInputBaseCur use the original buffer
    even in case of errors.
    
    Found by OSS-Fuzz.

diff --git a/buf.c b/buf.c
index f876ea99..fbaf926a 100644
--- a/buf.c
+++ b/buf.c
@@ -1099,15 +1099,19 @@ int
 xmlBufSetInputBaseCur(xmlBufPtr buf, xmlParserInputPtr input,
                       size_t base, size_t cur) {
     if (input == NULL)
         return(-1);
+    /*
+     * TODO: It might be safer to keep using the buffer content if there
+     * was an error.
+     */
     if ((buf == NULL) || (buf->error)) {
         input->base = input->cur = input->end = BAD_CAST "";
         return(-1);
     }
     CHECK_COMPAT(buf)
     input->base = &buf->content[base];
     input->cur = input->base + cur;
     input->end = &buf->content[buf->use];
     return(0);
 }
 
diff --git a/encoding.c b/encoding.c
index 0a1b4867..3d461cd3 100644
--- a/encoding.c
+++ b/encoding.c
@@ -2123,56 +2123,58 @@ int
 xmlCharEncInput(xmlParserInputBufferPtr input, int flush)
 {
     int ret;
     size_t written;
     size_t toconv;
     int c_in;
     int c_out;
     xmlBufPtr in;
     xmlBufPtr out;
 
     if ((input == NULL) || (input->encoder == NULL) ||
         (input->buffer == NULL) || (input->raw == NULL))
         return(XML_ENC_ERR_INTERNAL);
     out = input->buffer;
     in = input->raw;
 
     toconv = xmlBufUse(in);
     if (toconv == 0)
         return (0);
     if ((toconv > 64 * 1024) && (flush == 0))
         toconv = 64 * 1024;
     written = xmlBufAvail(out);
     if (toconv * 2 >= written) {
-        if (xmlBufGrow(out, toconv * 2) < 0)
+        if (xmlBufGrow(out, toconv * 2) < 0) {
+            input->error = XML_ERR_NO_MEMORY;
             return(XML_ENC_ERR_MEMORY);
+        }
         written = xmlBufAvail(out);
     }
     if ((written > 128 * 1024) && (flush == 0))
         written = 128 * 1024;
 
     c_in = toconv;
     c_out = written;
     ret = xmlEncInputChunk(input->encoder, xmlBufEnd(out), &c_out,
                            xmlBufContent(in), &c_in, flush);
     xmlBufShrink(in, c_in);
     xmlBufAddLen(out, c_out);
 
     if ((c_out == 0) && (ret != 0)) {
         if (input->error == 0)
             input->error = xmlEncConvertError(ret);
         return(ret);
     }
 
     return (c_out);
 }
 
 /**
  * xmlCharEncInFunc:
  * @handler:	char encoding transformation data structure
  * @out:  an xmlBuffer for the output.
  * @in:  an xmlBuffer for the input
  *
  * Generic front-end for the encoding handler input function
  *
  * Returns the number of bytes written or an XML_ENC_ERR code.
  */
diff --git a/parserInternals.c b/parserInternals.c
index bc65c631..5c267cd2 100644
--- a/parserInternals.c
+++ b/parserInternals.c
@@ -537,51 +537,55 @@ int
 xmlParserGrow(xmlParserCtxtPtr ctxt) {
     xmlParserInputPtr in = ctxt->input;
     xmlParserInputBufferPtr buf = in->buf;
     ptrdiff_t curEnd = in->end - in->cur;
     ptrdiff_t curBase = in->cur - in->base;
     int ret;
 
     if (buf == NULL)
         return(0);
     /* Don't grow push parser buffer. */
     if (ctxt->progressive)
         return(0);
     /* Don't grow memory buffers. */
     if ((buf->encoder == NULL) && (buf->readcallback == NULL))
         return(0);
     if (buf->error != 0)
         return(-1);
 
     if (((curEnd > XML_MAX_LOOKUP_LIMIT) ||
          (curBase > XML_MAX_LOOKUP_LIMIT)) &&
         ((ctxt->options & XML_PARSE_HUGE) == 0)) {
         xmlErrMemory(ctxt, "Huge input lookup");
         xmlHaltParser(ctxt);
 	return(-1);
     }
 
     if (curEnd >= INPUT_CHUNK)
         return(0);
 
     ret = xmlParserInputBufferGrow(buf, INPUT_CHUNK);
     xmlBufSetInputBaseCur(buf->buffer, in, 0, curBase);
 
-    if (ret < 0)
+    if (ret < 0) {
         xmlFatalErr(ctxt, buf->error, NULL);
+        /* Buffer contents may be lost in case of memory errors. */
+        if (buf->error == XML_ERR_NO_MEMORY)
+            xmlHaltParser(ctxt);
+    }
 
     return(ret);
 }
 
 /**
  * xmlParserInputGrow:
  * @in:  an XML parser input
  * @len:  an indicative size for the lookahead
  *
  * DEPRECATED: Don't use.
  *
  * This function increase the input for the parser. It tries to
  * preserve pointers to the input buffer, and keep already read data
  *
  * Returns the amount of char read, or -1 in case of error, 0 indicate the
  * end of this entity
  */
