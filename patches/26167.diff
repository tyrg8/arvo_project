commit 5b09e6a00788d08a89604bd77f154c0e11dda035
Author: John Stiles <johnstiles@google.com>
Date:   Wed Oct 21 10:02:24 2020 -0400

    Reland "Create a basic IRNode pooling system."
    
    This is a reland of e16eca95f5c08c2bdf72cc0b04af62a1071afd8d
    
    Original change's description:
    > Create a basic IRNode pooling system.
    >
    > Allocations are redirected by overriding `operator new` and `operator
    > delete` on the IRNode class. This allows us to use our existing
    > `unique_ptr` and `make_unique` calls as-is. The Pool class is simple;
    > it holds a fixed number of nodes and recycles them as they are returned.
    >
    > A fixed pool size of 2000 nodes was chosen. That is large enough to hold
    > the contents of `sksl_large` during compilation, but it can be
    > overflowed by very large shaders, or if multiple programs are converted
    > at the same time. Exhausting the pool is not a problem; if this happens,
    > additional nodes will be allocated via the system allocator as usual.
    > More elaborate schemes are possible but might not add a lot of value.
    >
    > Thread safety is accomplished by placing the pool in a `thread_local`
    > static during a Program's creation and destruction; the pool is freed
    > when the program is destroyed. One important consequence of this
    > strategy is that a program must free every node that it allocated during
    > its creation, or else the node will be leaked. In debug, leaking a node
    > will be detected and causes a DEBUGFAIL. In release, the pool will be
    > freed despite having a live node in it, and if that node is later freed,
    > that pointer will be passed to the system `free` (which is likely to
    > cause a crash).
    >
    > In this CL, iOS does not support pooling, since support for
    > `thread_local` was only added on iOS 9. This is fixed in the followup
    > CL, http://review.skia.org/328837, which uses pthread keys on iOS.
    >
    > Nanobench shows ~15% improvement:
    >   (last week) http://screen/5CNBhTaZApcDA8h
    >       (today) http://screen/8ti5Rymvf6LUs8i
    >
    > Change-Id: I559de73606ee1be54e5eae7f82129dc928a63e3c
    > Reviewed-on: https://skia-review.googlesource.com/c/skia/+/326876
    > Commit-Queue: John Stiles <johnstiles@google.com>
    > Reviewed-by: Ethan Nicholas <ethannicholas@google.com>
    > Auto-Submit: John Stiles <johnstiles@google.com>
    
    Change-Id: I114971e8e7ac0fabaf26216ae8813eeeaad0d4a2
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/329086
    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>
    Commit-Queue: John Stiles <johnstiles@google.com>

diff --git a/gn/sksl.gni b/gn/sksl.gni
index 4d33e8aedf..8e73c82707 100644
--- a/gn/sksl.gni
+++ b/gn/sksl.gni
@@ -10,104 +10,106 @@ _include = get_path_info("../include", "abspath")
 skia_sksl_sources = [
   "$_include/private/SkSLSampleUsage.h",
   "$_src/sksl/SkSLASTFile.h",
   "$_src/sksl/SkSLASTNode.cpp",
   "$_src/sksl/SkSLASTNode.h",
   "$_src/sksl/SkSLAnalysis.cpp",
   "$_src/sksl/SkSLAnalysis.h",
   "$_src/sksl/SkSLByteCode.cpp",
   "$_src/sksl/SkSLByteCode.h",
   "$_src/sksl/SkSLByteCodeGenerator.cpp",
   "$_src/sksl/SkSLByteCodeGenerator.h",
   "$_src/sksl/SkSLCFGGenerator.cpp",
   "$_src/sksl/SkSLCFGGenerator.h",
   "$_src/sksl/SkSLCompiler.cpp",
   "$_src/sksl/SkSLCompiler.h",
   "$_src/sksl/SkSLContext.h",
   "$_src/sksl/SkSLDefines.h",
   "$_src/sksl/SkSLDehydrator.cpp",
   "$_src/sksl/SkSLDehydrator.h",
   "$_src/sksl/SkSLErrorReporter.h",
   "$_src/sksl/SkSLExternalValue.h",
   "$_src/sksl/SkSLFileOutputStream.h",
   "$_src/sksl/SkSLIRGenerator.cpp",
   "$_src/sksl/SkSLIRGenerator.h",
   "$_src/sksl/SkSLInliner.cpp",
   "$_src/sksl/SkSLInliner.h",
   "$_src/sksl/SkSLLexer.cpp",
   "$_src/sksl/SkSLLexer.h",
   "$_src/sksl/SkSLMemoryLayout.h",
   "$_src/sksl/SkSLParser.cpp",
   "$_src/sksl/SkSLParser.h",
+  "$_src/sksl/SkSLPool.cpp",
+  "$_src/sksl/SkSLPool.h",
   "$_src/sksl/SkSLPosition.h",
   "$_src/sksl/SkSLRehydrator.cpp",
   "$_src/sksl/SkSLRehydrator.h",
   "$_src/sksl/SkSLSampleUsage.cpp",
   "$_src/sksl/SkSLSectionAndParameterHelper.cpp",
   "$_src/sksl/SkSLSectionAndParameterHelper.h",
   "$_src/sksl/SkSLString.cpp",
   "$_src/sksl/SkSLString.h",
   "$_src/sksl/SkSLStringStream.h",
   "$_src/sksl/SkSLUtil.cpp",
   "$_src/sksl/SkSLUtil.h",
   "$_src/sksl/ir/SkSLBinaryExpression.h",
   "$_src/sksl/ir/SkSLBlock.h",
   "$_src/sksl/ir/SkSLBoolLiteral.h",
   "$_src/sksl/ir/SkSLBreakStatement.h",
   "$_src/sksl/ir/SkSLConstructor.cpp",
   "$_src/sksl/ir/SkSLConstructor.h",
   "$_src/sksl/ir/SkSLContinueStatement.h",
   "$_src/sksl/ir/SkSLDiscardStatement.h",
   "$_src/sksl/ir/SkSLDoStatement.h",
   "$_src/sksl/ir/SkSLEnum.h",
   "$_src/sksl/ir/SkSLExpression.h",
   "$_src/sksl/ir/SkSLExpressionStatement.h",
   "$_src/sksl/ir/SkSLExtension.h",
   "$_src/sksl/ir/SkSLExternalFunctionCall.h",
   "$_src/sksl/ir/SkSLExternalValueReference.h",
   "$_src/sksl/ir/SkSLField.h",
   "$_src/sksl/ir/SkSLFieldAccess.h",
   "$_src/sksl/ir/SkSLFloatLiteral.h",
   "$_src/sksl/ir/SkSLForStatement.h",
   "$_src/sksl/ir/SkSLFunctionCall.h",
   "$_src/sksl/ir/SkSLFunctionDeclaration.h",
   "$_src/sksl/ir/SkSLFunctionDefinition.h",
   "$_src/sksl/ir/SkSLFunctionReference.h",
   "$_src/sksl/ir/SkSLIRNode.cpp",
   "$_src/sksl/ir/SkSLIRNode.h",
   "$_src/sksl/ir/SkSLIfStatement.h",
   "$_src/sksl/ir/SkSLIndexExpression.h",
   "$_src/sksl/ir/SkSLInlineMarker.h",
   "$_src/sksl/ir/SkSLIntLiteral.h",
   "$_src/sksl/ir/SkSLInterfaceBlock.h",
   "$_src/sksl/ir/SkSLLayout.h",
   "$_src/sksl/ir/SkSLModifiers.h",
   "$_src/sksl/ir/SkSLModifiersDeclaration.h",
   "$_src/sksl/ir/SkSLNop.h",
   "$_src/sksl/ir/SkSLNullLiteral.h",
   "$_src/sksl/ir/SkSLPostfixExpression.h",
   "$_src/sksl/ir/SkSLPrefixExpression.h",
   "$_src/sksl/ir/SkSLProgram.h",
   "$_src/sksl/ir/SkSLProgramElement.h",
   "$_src/sksl/ir/SkSLReturnStatement.h",
   "$_src/sksl/ir/SkSLSection.h",
   "$_src/sksl/ir/SkSLSetting.cpp",
   "$_src/sksl/ir/SkSLSetting.h",
   "$_src/sksl/ir/SkSLStatement.h",
   "$_src/sksl/ir/SkSLSwitchCase.h",
   "$_src/sksl/ir/SkSLSwitchStatement.h",
   "$_src/sksl/ir/SkSLSwizzle.h",
   "$_src/sksl/ir/SkSLSymbol.h",
   "$_src/sksl/ir/SkSLSymbolAlias.h",
   "$_src/sksl/ir/SkSLSymbolTable.cpp",
   "$_src/sksl/ir/SkSLSymbolTable.h",
   "$_src/sksl/ir/SkSLTernaryExpression.h",
   "$_src/sksl/ir/SkSLType.cpp",
   "$_src/sksl/ir/SkSLType.h",
   "$_src/sksl/ir/SkSLTypeReference.h",
   "$_src/sksl/ir/SkSLUnresolvedFunction.h",
   "$_src/sksl/ir/SkSLVarDeclarations.h",
   "$_src/sksl/ir/SkSLVariable.h",
   "$_src/sksl/ir/SkSLVariableReference.cpp",
   "$_src/sksl/ir/SkSLVariableReference.h",
   "$_src/sksl/ir/SkSLWhileStatement.h",
 ]
diff --git a/src/sksl/SkSLCompiler.cpp b/src/sksl/SkSLCompiler.cpp
index 22c7492686..6c88308005 100644
--- a/src/sksl/SkSLCompiler.cpp
+++ b/src/sksl/SkSLCompiler.cpp
@@ -1538,38 +1538,47 @@ bool Compiler::scanCFG(FunctionDefinition& f) {
 std::unique_ptr<Program> Compiler::convertProgram(
         Program::Kind kind,
         String text,
         const Program::Settings& settings,
         const std::vector<std::unique_ptr<ExternalValue>>* externalValues) {
     SkASSERT(!externalValues || (kind == Program::kGeneric_Kind));
 
     fErrorText = "";
     fErrorCount = 0;
     fInliner.reset(fContext.get(), fIRGenerator->fModifiers.get(), &settings);
 
     // Not using AutoSource, because caller is likely to call errorText() if we fail to compile
     std::unique_ptr<String> textPtr(new String(std::move(text)));
     fSource = textPtr.get();
 
     const ParsedModule& baseModule = this->moduleForProgramKind(kind);
 
+    // Enable node pooling while converting and optimizing the program for a performance boost.
+    // The Program will take ownership of the pool.
+    std::unique_ptr<Pool> pool = Pool::CreatePoolOnThread(2000);
     IRGenerator::IRBundle ir =
             fIRGenerator->convertProgram(kind, &settings, baseModule, /*isBuiltinCode=*/false,
                                          textPtr->c_str(), textPtr->size(), externalValues);
-    auto result = std::make_unique<Program>(kind,
-                                            std::move(textPtr),
-                                            settings,
-                                            fContext,
-                                            std::move(ir.fElements),
-                                            std::move(ir.fModifiers),
-                                            std::move(ir.fSymbolTable),
-                                            ir.fInputs);
+    auto program = std::make_unique<Program>(kind,
+                                             std::move(textPtr),
+                                             settings,
+                                             fContext,
+                                             std::move(ir.fElements),
+                                             std::move(ir.fModifiers),
+                                             std::move(ir.fSymbolTable),
+                                             std::move(pool),
+                                             ir.fInputs);
+    bool success = false;
     if (fErrorCount) {
-        return nullptr;
-    }
-    if (settings.fOptimize && !this->optimize(*result)) {
-        return nullptr;
+        // Do not return programs that failed to compile.
+    } else if (settings.fOptimize && !this->optimize(*program)) {
+        // Do not return programs that failed to optimize.
+    } else {
+        // We have a successful program!
+        success = true;
     }
-    return result;
+
+    program->fPool->detachFromThread();
+    return success ? std::move(program) : nullptr;
 }
 
 bool Compiler::optimize(Program& program) {
diff --git a/src/sksl/SkSLPool.cpp b/src/sksl/SkSLPool.cpp
new file mode 100644
index 0000000000..7e47e02b77
--- /dev/null
+++ b/src/sksl/SkSLPool.cpp
@@ -0,0 +1,175 @@
+/*
+ * Copyright 2020 Google LLC
+ *
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ */
+
+#include "src/sksl/SkSLPool.h"
+
+#include "src/sksl/ir/SkSLIRNode.h"
+
+#define VLOG(...) // printf(__VA_ARGS__)
+
+namespace SkSL {
+
+#if defined(SK_BUILD_FOR_IOS) && \
+        (!defined(__IPHONE_9_0) || __IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_9_0)
+
+// iOS did not support for C++11 `thread_local` variables until iOS 9.
+// Pooling is not supported here; we allocate all nodes directly.
+struct PoolData {};
+
+Pool::~Pool() {}
+void Pool* Pool::CreatePoolOnThread(int nodesInPool) { return new Pool; }
+void Pool::detachFromThread() {}
+void Pool::attachToThread() {}
+void* Pool::AllocIRNode() { return ::operator new(sizeof(IRNode)); }
+void Pool::FreeIRNode(void* node) { ::operator delete(node); }
+
+#else  // !defined(SK_BUILD_FOR_IOS)...
+
+namespace { struct IRNodeData {
+    union {
+        uint8_t fBuffer[sizeof(IRNode)];
+        IRNodeData* fFreeListNext;
+    };
+}; }
+
+struct PoolData {
+    // This holds the first free node in the pool. It will be null when the pool is exhausted.
+    IRNodeData* fFreeListHead = fNodes;
+
+    // This points to end of our pooled data, and implies the number of nodes.
+    IRNodeData* fNodesEnd = nullptr;
+
+    // Our pooled data lives here. (We allocate lots of nodes here, not just one.)
+    IRNodeData fNodes[1];
+
+    // Accessors.
+    ptrdiff_t nodeCount() { return fNodesEnd - fNodes; }
+
+    ptrdiff_t nodeIndex(IRNodeData* node) {
+        SkASSERT(node >= fNodes);
+        SkASSERT(node < fNodesEnd);
+        return node - fNodes;
+    }
+};
+
+static thread_local PoolData* sPoolData = nullptr;
+
+static PoolData* create_pool_data(int nodesInPool) {
+    // Create a PoolData structure with extra space at the end for additional IRNode data.
+    int numExtraIRNodes = nodesInPool - 1;
+    PoolData* poolData = static_cast<PoolData*>(malloc(sizeof(PoolData) +
+                                                       (sizeof(IRNodeData) * numExtraIRNodes)));
+
+    // Initialize each pool node as a free node. The free nodes form a singly-linked list, each
+    // pointing to the next free node in sequence.
+    for (int index = 0; index < nodesInPool - 1; ++index) {
+        poolData->fNodes[index].fFreeListNext = &poolData->fNodes[index + 1];
+    }
+    poolData->fNodes[nodesInPool - 1].fFreeListNext = nullptr;
+    poolData->fNodesEnd = &poolData->fNodes[nodesInPool];
+
+    return poolData;
+}
+
+
+Pool::~Pool() {
+    if (sPoolData == fData) {
+        SkDEBUGFAIL("SkSL pool is being destroyed while it is still attached to the thread");
+        sPoolData = nullptr;
+    }
+
+    // In debug mode, report any leaked nodes.
+#ifdef SK_DEBUG
+    ptrdiff_t nodeCount = fData->nodeCount();
+    std::vector<bool> freed(nodeCount);
+    for (IRNodeData* node = fData->fFreeListHead; node; node = node->fFreeListNext) {
+        ptrdiff_t nodeIndex = fData->nodeIndex(node);
+        freed[nodeIndex] = true;
+    }
+    bool foundLeaks = false;
+    for (int index = 0; index < nodeCount; ++index) {
+        if (!freed[index]) {
+            IRNode* leak = reinterpret_cast<IRNode*>(fData->fNodes[index].fBuffer);
+            SkDebugf("Node %d leaked: %s\n", index, leak->description().c_str());
+            foundLeaks = true;
+        }
+    }
+    if (foundLeaks) {
+        SkDEBUGFAIL("leaking SkSL pool nodes; if they are later freed, this will likely be fatal");
+    }
+#endif
+
+    VLOG("DELETE Pool:0x%016llX\n", (uint64_t)fData);
+    free(fData);
+}
+
+std::unique_ptr<Pool> Pool::CreatePoolOnThread(int nodesInPool) {
+    auto pool = std::unique_ptr<Pool>(new Pool);
+    pool->fData = create_pool_data(nodesInPool);
+    pool->fData->fFreeListHead = &pool->fData->fNodes[0];
+    VLOG("CREATE Pool:0x%016llX\n", (uint64_t)pool->fData);
+    pool->attachToThread();
+    return pool;
+}
+
+void Pool::detachFromThread() {
+    VLOG("DETACH Pool:0x%016llX\n", (uint64_t)sPoolData);
+    SkASSERT(sPoolData != nullptr);
+    sPoolData = nullptr;
+}
+
+void Pool::attachToThread() {
+    VLOG("ATTACH Pool:0x%016llX\n", (uint64_t)fData);
+    SkASSERT(sPoolData == nullptr);
+    sPoolData = fData;
+}
+
+void* Pool::AllocIRNode() {
+    // Is a pool attached?
+    if (sPoolData) {
+        // Does the pool contain a free node?
+        IRNodeData* node = sPoolData->fFreeListHead;
+        if (node) {
+            // Yes. Take a node from the freelist.
+            sPoolData->fFreeListHead = node->fFreeListNext;
+            VLOG("ALLOC  Pool:0x%016llX Index:%04d         0x%016llX\n",
+                 (uint64_t)sPoolData, (int)(node - &sPoolData->fNodes[0]), (uint64_t)node);
+            return node->fBuffer;
+        }
+    }
+
+    // The pool is detached or full; allocate nodes using malloc.
+    void* ptr = ::operator new(sizeof(IRNode));
+    VLOG("ALLOC  Pool:0x%016llX Index:____ malloc  0x%016llX\n",
+         (uint64_t)sPoolData, (uint64_t)ptr);
+    return ptr;
+}
+
+void Pool::FreeIRNode(void* node_v) {
+    // Is a pool attached?
+    if (sPoolData) {
+        // Did this node come from our pool?
+        auto* node = static_cast<IRNodeData*>(node_v);
+        if (node >= &sPoolData->fNodes[0] && node < sPoolData->fNodesEnd) {
+            // Yes. Push it back onto the freelist.
+            VLOG("FREE   Pool:0x%016llX Index:%04d         0x%016llX\n",
+                 (uint64_t)sPoolData, (int)(node - &sPoolData->fNodes[0]), (uint64_t)node);
+            node->fFreeListNext = sPoolData->fFreeListHead;
+            sPoolData->fFreeListHead = node;
+            return;
+        }
+    }
+
+    // No pool is attached or the node was malloced; it must be freed.
+    VLOG("FREE   Pool:0x%016llX Index:____ free    0x%016llX\n",
+         (uint64_t)sPoolData, (uint64_t)node_v);
+    ::operator delete(node_v);
+}
+
+#endif  // !defined(SK_BUILD_FOR_IOS)...
+
+}  // namespace SkSL
diff --git a/src/sksl/SkSLPool.h b/src/sksl/SkSLPool.h
new file mode 100644
index 0000000000..f7338acfc7
--- /dev/null
+++ b/src/sksl/SkSLPool.h
@@ -0,0 +1,51 @@
+/*
+ * Copyright 2020 Google LLC
+ *
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ */
+
+#ifndef SKSL_POOL
+#define SKSL_POOL
+
+#include <memory>
+
+namespace SkSL {
+
+class IRNode;
+struct PoolData;
+
+class Pool {
+public:
+    ~Pool();
+
+    // Creates a pool to store newly-created IRNodes during program creation and attaches it to the
+    // current thread. When your program is complete, call pool->detachFromThread() to transfer
+    // ownership of those nodes. Before destroying any of the program's nodes, reattach the pool via
+    // pool->attachToThread(). It is an error to call CreatePoolOnThread if a pool is already
+    // attached to the current thread.
+    static std::unique_ptr<Pool> CreatePoolOnThread(int nodesInPool);
+
+    // Once a pool has been created and the ephemeral work has completed, detach it from its thread.
+    // It is an error to call this while no pool is attached.
+    void detachFromThread();
+
+    // Reattaches a pool to the current thread. It is an error to call this while a pool is already
+    // attached.
+    void attachToThread();
+
+    // Retrieves a node from the thread pool. If the pool is exhausted, this will allocate a node.
+    static void* AllocIRNode();
+
+    // Releases a node that was created by AllocIRNode. This will return it to the pool, or free it,
+    // as appropriate. Make sure to free all nodes, since some of them may be real allocations.
+    static void FreeIRNode(void* node_v);
+
+private:
+    Pool() = default;  // use CreatePoolOnThread to make a pool
+    PoolData* fData = nullptr;
+};
+
+}  // namespace SkSL
+
+#endif
diff --git a/src/sksl/ir/SkSLIRNode.h b/src/sksl/ir/SkSLIRNode.h
index 982ed34a8f..58241af54f 100644
--- a/src/sksl/ir/SkSLIRNode.h
+++ b/src/sksl/ir/SkSLIRNode.h
@@ -1,20 +1,21 @@
 /*
  * Copyright 2016 Google Inc.
  *
  * Use of this source code is governed by a BSD-style license that can be
  * found in the LICENSE file.
  */
 
 #ifndef SKSL_IRNODE
 #define SKSL_IRNODE
 
 #include "include/private/SkTArray.h"
 #include "src/sksl/SkSLASTNode.h"
 #include "src/sksl/SkSLLexer.h"
 #include "src/sksl/SkSLModifiersPool.h"
+#include "src/sksl/SkSLPool.h"
 #include "src/sksl/SkSLString.h"
 
 #include <algorithm>
 #include <atomic>
 #include <unordered_set>
 #include <vector>
@@ -64,6 +65,20 @@ public:
     // purposes
     int fOffset;
 
+    // Override operator new and delete to allow us to control allocation behavior.
+    static void* operator new(const size_t size) {
+        // TODO: once all IRNodes hold their data in fData, everything should come out of the pool,
+        // and this check should become an assertion.
+        if (size == sizeof(IRNode)) {
+            return Pool::AllocIRNode();
+        }
+        return ::operator new(size);
+    }
+
+    static void operator delete(void* ptr) {
+        Pool::FreeIRNode(ptr);
+    }
+
 protected:
     struct BlockData {
         std::shared_ptr<SymbolTable> fSymbolTable;
diff --git a/src/sksl/ir/SkSLProgram.h b/src/sksl/ir/SkSLProgram.h
index d37035395c..b86c6f6d7f 100644
--- a/src/sksl/ir/SkSLProgram.h
+++ b/src/sksl/ir/SkSLProgram.h
@@ -32,158 +32,174 @@
 namespace SkSL {
 
 class Context;
+class Pool;
 
 /**
  * Represents a fully-digested program, ready for code generation.
  */
 struct Program {
     struct Settings {
         struct Value {
             Value(bool b)
             : fKind(kBool_Kind)
             , fValue(b) {}
 
             Value(int i)
             : fKind(kInt_Kind)
             , fValue(i) {}
 
             Value(unsigned int i)
             : fKind(kInt_Kind)
             , fValue(i) {}
 
             Value(float f)
             : fKind(kFloat_Kind)
             , fValueF(f) {}
 
             std::unique_ptr<Expression> literal(const Context& context, int offset) const {
                 switch (fKind) {
                     case Program::Settings::Value::kBool_Kind:
                         return std::unique_ptr<Expression>(new BoolLiteral(context,
                                                                            offset,
                                                                            fValue));
                     case Program::Settings::Value::kInt_Kind:
                         return std::unique_ptr<Expression>(new IntLiteral(context,
                                                                           offset,
                                                                           fValue));
                     case Program::Settings::Value::kFloat_Kind:
                         return std::unique_ptr<Expression>(new FloatLiteral(context,
                                                                             offset,
                                                                             fValueF));
                     default:
                         SkASSERT(false);
                         return nullptr;
                 }
             }
 
             enum {
                 kBool_Kind,
                 kInt_Kind,
                 kFloat_Kind,
             } fKind;
 
             union {
                 int   fValue;  // for kBool_Kind and kInt_Kind
                 float fValueF; // for kFloat_Kind
             };
         };
 
 #if defined(SKSL_STANDALONE) || !SK_SUPPORT_GPU
         const StandaloneShaderCaps* fCaps = &standaloneCaps;
 #else
         const GrShaderCaps* fCaps = nullptr;
 #endif
         // if false, sk_FragCoord is exactly the same as gl_FragCoord. If true, the y coordinate
         // must be flipped.
         bool fFlipY = false;
         // if false, sk_FragCoord is exactly the same as gl_FragCoord. If true, the w coordinate
         // must be inversed.
         bool fInverseW = false;
         // If true the destination fragment color is read sk_FragColor. It must be declared inout.
         bool fFragColorIsInOut = false;
         // if true, Setting objects (e.g. sk_Caps.fbFetchSupport) should be replaced with their
         // constant equivalents during compilation
         bool fReplaceSettings = true;
         // if true, all halfs are forced to be floats
         bool fForceHighPrecision = false;
         // if true, add -0.5 bias to LOD of all texture lookups
         bool fSharpenTextures = false;
         // if the program needs to create an RTHeight uniform, this is its offset in the uniform
         // buffer
         int fRTHeightOffset = -1;
         // if the program needs to create an RTHeight uniform and is creating spriv, this is the
         // binding and set number of the uniform buffer.
         int fRTHeightBinding = -1;
         int fRTHeightSet = -1;
         // If true, remove any uncalled functions other than main(). Note that a function which
         // starts out being used may end up being uncalled after optimization.
         bool fRemoveDeadFunctions = true;
         // Functions larger than this (measured in IR nodes) will not be inlined. The default value
         // is arbitrary. A value of zero will disable the inliner entirely.
         int fInlineThreshold = 49;
         // true to enable optimization passes
         bool fOptimize = true;
         // If true, implicit conversions to lower precision numeric types are allowed
         // (eg, float to half)
         bool fAllowNarrowingConversions = false;
     };
 
     struct Inputs {
         // if true, this program requires the render target width uniform to be defined
         bool fRTWidth;
 
         // if true, this program requires the render target height uniform to be defined
         bool fRTHeight;
 
         // if true, this program must be recompiled if the flipY setting changes. If false, the
         // program will compile to the same code regardless of the flipY setting.
         bool fFlipY;
 
         void reset() {
             fRTWidth = false;
             fRTHeight = false;
             fFlipY = false;
         }
 
         bool isEmpty() {
             return !fRTWidth && !fRTHeight && !fFlipY;
         }
     };
 
     enum Kind {
         kFragment_Kind,
         kVertex_Kind,
         kGeometry_Kind,
         kFragmentProcessor_Kind,
         kPipelineStage_Kind,
         kGeneric_Kind,
     };
 
     Program(Kind kind,
             std::unique_ptr<String> source,
             Settings settings,
             std::shared_ptr<Context> context,
             std::vector<std::unique_ptr<ProgramElement>> elements,
             std::unique_ptr<ModifiersPool> modifiers,
             std::shared_ptr<SymbolTable> symbols,
+            std::unique_ptr<Pool> pool,
             Inputs inputs)
     : fKind(kind)
     , fSource(std::move(source))
     , fSettings(settings)
     , fContext(context)
     , fSymbols(symbols)
+    , fPool(std::move(pool))
     , fInputs(inputs)
     , fElements(std::move(elements))
     , fModifiers(std::move(modifiers)) {}
 
+    ~Program() {
+        // Some or all of the program elements are in the pool. To free them safely, we must attach
+        // the pool before destroying any program elements. (Otherwise, we may accidentally call
+        // delete on a pooled node.)
+        fPool->attachToThread();
+        fElements.clear();
+        fContext.reset();
+        fSymbols.reset();
+        fModifiers.reset();
+        fPool->detachFromThread();
+    }
+
     const std::vector<std::unique_ptr<ProgramElement>>& elements() const { return fElements; }
 
     Kind fKind;
     std::unique_ptr<String> fSource;
     Settings fSettings;
     std::shared_ptr<Context> fContext;
     // it's important to keep fElements defined after (and thus destroyed before) fSymbols,
     // because destroying elements can modify reference counts in symbols
     std::shared_ptr<SymbolTable> fSymbols;
+    std::unique_ptr<Pool> fPool;
     Inputs fInputs;
 
 private:
