commit 4d7b55ab7b05b95c4fbc15e1465a09f6dc0805cb
Author: Luca Versari <veluca@google.com>
Date:   Mon Nov 29 23:39:41 2021 +0100

    Use FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION to disable ANS checksums.
    
    Note that this does not enable the flag yet.

diff --git a/lib/jxl/dec_ans.h b/lib/jxl/dec_ans.h
index 8919e32a..b5de8c12 100644
--- a/lib/jxl/dec_ans.h
+++ b/lib/jxl/dec_ans.h
@@ -151,269 +151,273 @@ struct ANSCode {
 class ANSSymbolReader {
  public:
   // Invalid symbol reader, to be overwritten.
   ANSSymbolReader() = default;
   ANSSymbolReader(const ANSCode* code, BitReader* JXL_RESTRICT br,
                   size_t distance_multiplier = 0)
       : alias_tables_(
             reinterpret_cast<AliasTable::Entry*>(code->alias_tables.get())),
         huffman_data_(code->huffman_data.data()),
         use_prefix_code_(code->use_prefix_code),
         configs(code->uint_config.data()) {
     if (!use_prefix_code_) {
       state_ = static_cast<uint32_t>(br->ReadFixedBits<32>());
       log_alpha_size_ = code->log_alpha_size;
       log_entry_size_ = ANS_LOG_TAB_SIZE - code->log_alpha_size;
       entry_size_minus_1_ = (1 << log_entry_size_) - 1;
     } else {
       state_ = (ANS_SIGNATURE << 16u);
     }
     if (!code->lz77.enabled) return;
     // a std::vector incurs unacceptable decoding speed loss because of
     // initialization.
     lz77_window_storage_ = AllocateArray(kWindowSize * sizeof(uint32_t));
     lz77_window_ = reinterpret_cast<uint32_t*>(lz77_window_storage_.get());
     lz77_ctx_ = code->lz77.nonserialized_distance_context;
     lz77_length_uint_ = code->lz77.length_uint_config;
     lz77_threshold_ = code->lz77.min_symbol;
     lz77_min_length_ = code->lz77.min_length;
     num_special_distances_ =
         distance_multiplier == 0 ? 0 : kNumSpecialDistances;
     for (size_t i = 0; i < num_special_distances_; i++) {
       int dist = kSpecialDistances[i][0];
       dist += static_cast<int>(distance_multiplier) * kSpecialDistances[i][1];
       if (dist < 1) dist = 1;
       special_distances_[i] = dist;
     }
   }
 
   JXL_INLINE size_t ReadSymbolANSWithoutRefill(const size_t histo_idx,
                                                BitReader* JXL_RESTRICT br) {
     const uint32_t res = state_ & (ANS_TAB_SIZE - 1u);
 
     const AliasTable::Entry* table =
         &alias_tables_[histo_idx << log_alpha_size_];
     const AliasTable::Symbol symbol =
         AliasTable::Lookup(table, res, log_entry_size_, entry_size_minus_1_);
     state_ = symbol.freq * (state_ >> ANS_LOG_TAB_SIZE) + symbol.offset;
 
 #if 1
     // Branchless version is about equally fast on SKX.
     const uint32_t new_state =
         (state_ << 16u) | static_cast<uint32_t>(br->PeekFixedBits<16>());
     const bool normalize = state_ < (1u << 16u);
     state_ = normalize ? new_state : state_;
     br->Consume(normalize ? 16 : 0);
 #else
     if (JXL_UNLIKELY(state_ < (1u << 16u))) {
       state_ = (state_ << 16u) | br->PeekFixedBits<16>();
       br->Consume(16);
     }
 #endif
     const uint32_t next_res = state_ & (ANS_TAB_SIZE - 1u);
     AliasTable::Prefetch(table, next_res, log_entry_size_);
 
     return symbol.value;
   }
 
   JXL_INLINE size_t ReadSymbolHuffWithoutRefill(const size_t histo_idx,
                                                 BitReader* JXL_RESTRICT br) {
     return huffman_data_[histo_idx].ReadSymbol(br);
   }
 
   JXL_INLINE size_t ReadSymbolWithoutRefill(const size_t histo_idx,
                                             BitReader* JXL_RESTRICT br) {
     // TODO(veluca): hoist if in hotter loops.
     if (JXL_UNLIKELY(use_prefix_code_)) {
       return ReadSymbolHuffWithoutRefill(histo_idx, br);
     }
     return ReadSymbolANSWithoutRefill(histo_idx, br);
   }
 
   JXL_INLINE size_t ReadSymbol(const size_t histo_idx,
                                BitReader* JXL_RESTRICT br) {
     br->Refill();
     return ReadSymbolWithoutRefill(histo_idx, br);
   }
 
-  bool CheckANSFinalState() { return state_ == (ANS_SIGNATURE << 16u); }
+#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
+  bool CheckANSFinalState() const { return true; }
+#else
+  bool CheckANSFinalState() const { return state_ == (ANS_SIGNATURE << 16u); }
+#endif
 
   template <typename BitReader>
   static JXL_INLINE uint32_t ReadHybridUintConfig(
       const HybridUintConfig& config, size_t token, BitReader* br) {
     size_t split_token = config.split_token;
     size_t msb_in_token = config.msb_in_token;
     size_t lsb_in_token = config.lsb_in_token;
     size_t split_exponent = config.split_exponent;
     // Fast-track version of hybrid integer decoding.
     if (token < split_token) return token;
     uint32_t nbits = split_exponent - (msb_in_token + lsb_in_token) +
                      ((token - split_token) >> (msb_in_token + lsb_in_token));
     // Max amount of bits for ReadBits is 32 and max valid left shift is 29
     // bits. However, for speed no error is propagated here, instead limit the
     // nbits size. If nbits > 29, the code stream is invalid, but no error is
     // returned.
     // Note that in most cases we will emit an error if the histogram allows
     // representing numbers that would cause invalid shifts, but we need to
     // keep this check as when LZ77 is enabled it might make sense to have an
     // histogram that could in principle cause invalid shifts.
     nbits &= 31u;
     uint32_t low = token & ((1 << lsb_in_token) - 1);
     token >>= lsb_in_token;
     const size_t bits = br->PeekBits(nbits);
     br->Consume(nbits);
     size_t ret = (((((1 << msb_in_token) | (token & ((1 << msb_in_token) - 1)))
                     << nbits) |
                    bits)
                   << lsb_in_token) |
                  low;
     // TODO(eustas): mark BitReader as unhealthy if nbits > 29 or ret does not
     //               fit uint32_t
     return static_cast<uint32_t>(ret);
   }
 
   // Takes a *clustered* idx.
   size_t ReadHybridUintClustered(size_t ctx, BitReader* JXL_RESTRICT br) {
     if (JXL_UNLIKELY(num_to_copy_ > 0)) {
       size_t ret = lz77_window_[(copy_pos_++) & kWindowMask];
       num_to_copy_--;
       lz77_window_[(num_decoded_++) & kWindowMask] = ret;
       return ret;
     }
     br->Refill();  // covers ReadSymbolWithoutRefill + PeekBits
     size_t token = ReadSymbolWithoutRefill(ctx, br);
     if (JXL_UNLIKELY(token >= lz77_threshold_)) {
       num_to_copy_ =
           ReadHybridUintConfig(lz77_length_uint_, token - lz77_threshold_, br) +
           lz77_min_length_;
       br->Refill();  // covers ReadSymbolWithoutRefill + PeekBits
       // Distance code.
       size_t token = ReadSymbolWithoutRefill(lz77_ctx_, br);
       size_t distance = ReadHybridUintConfig(configs[lz77_ctx_], token, br);
       if (JXL_LIKELY(distance < num_special_distances_)) {
         distance = special_distances_[distance];
       } else {
         distance = distance + 1 - num_special_distances_;
       }
       if (JXL_UNLIKELY(distance > num_decoded_)) {
         distance = num_decoded_;
       }
       if (JXL_UNLIKELY(distance > kWindowSize)) {
         distance = kWindowSize;
       }
       copy_pos_ = num_decoded_ - distance;
       if (JXL_UNLIKELY(distance == 0)) {
         JXL_DASSERT(lz77_window_ != nullptr);
         // distance 0 -> num_decoded_ == copy_pos_ == 0
         size_t to_fill = std::min<size_t>(num_to_copy_, kWindowSize);
         memset(lz77_window_, 0, to_fill * sizeof(lz77_window_[0]));
       }
       // TODO(eustas): overflow; mark BitReader as unhealthy
       if (num_to_copy_ < lz77_min_length_) return 0;
       return ReadHybridUintClustered(ctx, br);  // will trigger a copy.
     }
     size_t ret = ReadHybridUintConfig(configs[ctx], token, br);
     if (lz77_window_) lz77_window_[(num_decoded_++) & kWindowMask] = ret;
     return ret;
   }
 
   JXL_INLINE size_t ReadHybridUint(size_t ctx, BitReader* JXL_RESTRICT br,
                                    const std::vector<uint8_t>& context_map) {
     return ReadHybridUintClustered(context_map[ctx], br);
   }
 
   // ctx is a *clustered* context!
   // This function will modify the ANS state as if `count` symbols have been
   // decoded.
   bool IsSingleValueAndAdvance(size_t ctx, uint32_t* value, size_t count) {
     // TODO(veluca): No optimization for Huffman mode yet.
     if (use_prefix_code_) return false;
     // TODO(eustas): propagate "degenerate_symbol" to simplify this method.
     const uint32_t res = state_ & (ANS_TAB_SIZE - 1u);
     const AliasTable::Entry* table = &alias_tables_[ctx << log_alpha_size_];
     AliasTable::Symbol symbol =
         AliasTable::Lookup(table, res, log_entry_size_, entry_size_minus_1_);
     if (symbol.freq != ANS_TAB_SIZE) return false;
     if (configs[ctx].split_token <= symbol.value) return false;
     if (symbol.value >= lz77_threshold_) return false;
     *value = symbol.value;
     if (lz77_window_) {
       for (size_t i = 0; i < count; i++) {
         lz77_window_[(num_decoded_++) & kWindowMask] = symbol.value;
       }
     }
     return true;
   }
 
   static constexpr size_t kMaxCheckpointInterval = 512;
   struct Checkpoint {
     uint32_t state;
     uint32_t num_to_copy;
     uint32_t copy_pos;
     uint32_t num_decoded;
     uint32_t lz77_window[kMaxCheckpointInterval];
   };
   void Save(Checkpoint* checkpoint) {
     checkpoint->state = state_;
     checkpoint->num_decoded = num_decoded_;
     checkpoint->num_to_copy = num_to_copy_;
     checkpoint->copy_pos = copy_pos_;
     if (lz77_window_) {
       size_t win_start = num_decoded_ & kWindowMask;
       size_t win_end = (num_decoded_ + kMaxCheckpointInterval) & kWindowMask;
       if (win_end > win_start) {
         memcpy(checkpoint->lz77_window, lz77_window_ + win_start,
                (win_end - win_start) * sizeof(*lz77_window_));
       } else {
         memcpy(checkpoint->lz77_window, lz77_window_ + win_start,
                (kWindowSize - win_start) * sizeof(*lz77_window_));
         memcpy(checkpoint->lz77_window + (kWindowSize - win_start),
                lz77_window_, win_end * sizeof(*lz77_window_));
       }
     }
   }
   void Restore(const Checkpoint& checkpoint) {
     state_ = checkpoint.state;
     JXL_DASSERT(num_decoded_ <=
                 checkpoint.num_decoded + kMaxCheckpointInterval);
     num_decoded_ = checkpoint.num_decoded;
     num_to_copy_ = checkpoint.num_to_copy;
     copy_pos_ = checkpoint.copy_pos;
     if (lz77_window_) {
       size_t win_start = num_decoded_ & kWindowMask;
       size_t win_end = (num_decoded_ + kMaxCheckpointInterval) & kWindowMask;
       if (win_end > win_start) {
         memcpy(lz77_window_ + win_start, checkpoint.lz77_window,
                (win_end - win_start) * sizeof(*lz77_window_));
       } else {
         memcpy(lz77_window_ + win_start, checkpoint.lz77_window,
                (kWindowSize - win_start) * sizeof(*lz77_window_));
         memcpy(lz77_window_, checkpoint.lz77_window + (kWindowSize - win_start),
                win_end * sizeof(*lz77_window_));
       }
     }
   }
 
  private:
   const AliasTable::Entry* JXL_RESTRICT alias_tables_;  // not owned
   const HuffmanDecodingData* huffman_data_;
   bool use_prefix_code_;
   uint32_t state_ = ANS_SIGNATURE << 16u;
   const HybridUintConfig* JXL_RESTRICT configs;
   uint32_t log_alpha_size_;
   uint32_t log_entry_size_;
   uint32_t entry_size_minus_1_;
 
   // LZ77 structures and constants.
   static constexpr size_t kWindowMask = kWindowSize - 1;
   CacheAlignedUniquePtr lz77_window_storage_;
   uint32_t* lz77_window_ = nullptr;
   uint32_t num_decoded_ = 0;
   uint32_t num_to_copy_ = 0;
   uint32_t copy_pos_ = 0;
   uint32_t lz77_ctx_ = 0;
   uint32_t lz77_min_length_ = 0;
   uint32_t lz77_threshold_ = 1 << 20;  // bigger than any symbol.
   HybridUintConfig lz77_length_uint_;
   uint32_t special_distances_[kNumSpecialDistances];
   uint32_t num_special_distances_;
 };
