commit 6269866bddd789be354d189ce31ad444b479a772
Author: Garret Rieger <grieger@google.com>
Date:   Fri Jul 16 14:06:55 2021 -0700

    [subset] Keep bimap consistent if only one of the internal maps is in error.

diff --git a/src/hb-bimap.hh b/src/hb-bimap.hh
index e9f3a6a52..d40988075 100644
--- a/src/hb-bimap.hh
+++ b/src/hb-bimap.hh
@@ -33,62 +33,67 @@
 /* Bi-directional map */
 struct hb_bimap_t
 {
   hb_bimap_t () { init (); }
   ~hb_bimap_t () { fini (); }
 
   void init ()
   {
     forw_map.init ();
     back_map.init ();
   }
 
   void fini ()
   {
     forw_map.fini ();
     back_map.fini ();
   }
 
   void reset ()
   {
     forw_map.reset ();
     back_map.reset ();
   }
 
   bool in_error () const { return forw_map.in_error () || back_map.in_error (); }
 
   void set (hb_codepoint_t lhs, hb_codepoint_t rhs)
   {
+    if (in_error ()) return;
     if (unlikely (lhs == HB_MAP_VALUE_INVALID)) return;
     if (unlikely (rhs == HB_MAP_VALUE_INVALID)) { del (lhs); return; }
+
     forw_map.set (lhs, rhs);
+    if (in_error ()) return;
+
     back_map.set (rhs, lhs);
+    if (in_error ()) forw_map.del (lhs);
   }
 
   hb_codepoint_t get (hb_codepoint_t lhs) const { return forw_map.get (lhs); }
   hb_codepoint_t backward (hb_codepoint_t rhs) const { return back_map.get (rhs); }
 
   hb_codepoint_t operator [] (hb_codepoint_t lhs) const { return get (lhs); }
   bool has (hb_codepoint_t lhs, hb_codepoint_t *vp = nullptr) const { return forw_map.has (lhs, vp); }
 
   void del (hb_codepoint_t lhs)
   {
     back_map.del (get (lhs));
     forw_map.del (lhs);
   }
 
   void clear ()
   {
     forw_map.clear ();
     back_map.clear ();
   }
 
   bool is_empty () const { return get_population () == 0; }
 
   unsigned int get_population () const { return forw_map.get_population (); }
 
   protected:
   hb_map_t  forw_map;
   hb_map_t  back_map;
 };
 
 /* Inremental bimap: only lhs is given, rhs is incrementally assigned */
diff --git a/src/hb-ot-layout-common.hh b/src/hb-ot-layout-common.hh
index b70dc77fa..187a8816c 100644
--- a/src/hb-ot-layout-common.hh
+++ b/src/hb-ot-layout-common.hh
@@ -2735,147 +2735,148 @@ struct VarData
 struct VariationStore
 {
   private:
   float get_delta (unsigned int outer, unsigned int inner,
 		   const int *coords, unsigned int coord_count) const
   {
 #ifdef HB_NO_VAR
     return 0.f;
 #endif
 
     if (unlikely (outer >= dataSets.len))
       return 0.f;
 
     return (this+dataSets[outer]).get_delta (inner,
 					     coords, coord_count,
 					     this+regions);
   }
 
   public:
   float get_delta (unsigned int index,
 		   const int *coords, unsigned int coord_count) const
   {
     unsigned int outer = index >> 16;
     unsigned int inner = index & 0xFFFF;
     return get_delta (outer, inner, coords, coord_count);
   }
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
 #ifdef HB_NO_VAR
     return true;
 #endif
 
     TRACE_SANITIZE (this);
     return_trace (c->check_struct (this) &&
 		  format == 1 &&
 		  regions.sanitize (c, this) &&
 		  dataSets.sanitize (c, this));
   }
 
   bool serialize (hb_serialize_context_t *c,
 		  const VariationStore *src,
 		  const hb_array_t <hb_inc_bimap_t> &inner_maps)
   {
     TRACE_SERIALIZE (this);
     unsigned int set_count = 0;
     for (unsigned int i = 0; i < inner_maps.length; i++)
       if (inner_maps[i].get_population () > 0) set_count++;
 
     unsigned int size = min_size + HBUINT32::static_size * set_count;
     if (unlikely (!c->allocate_size<HBUINT32> (size))) return_trace (false);
     format = 1;
 
     hb_inc_bimap_t region_map;
     for (unsigned int i = 0; i < inner_maps.length; i++)
       (src+src->dataSets[i]).collect_region_refs (region_map, inner_maps[i]);
-    if (region_map.in_error()) return_trace (false);
+    if (region_map.in_error())
+      return_trace (false);
     region_map.sort ();
 
     if (unlikely (!regions.serialize_serialize (c, &(src+src->regions), region_map)))
       return_trace (false);
 
     /* TODO: The following code could be simplified when
      * List16OfOffset16To::subset () can take a custom param to be passed to VarData::serialize ()
      */
     dataSets.len = set_count;
     unsigned int set_index = 0;
     for (unsigned int i = 0; i < inner_maps.length; i++)
     {
       if (inner_maps[i].get_population () == 0) continue;
       if (unlikely (!dataSets[set_index++]
                         .serialize_serialize (c, &(src+src->dataSets[i]), inner_maps[i], region_map)))
 	return_trace (false);
     }
 
     return_trace (true);
   }
 
   bool subset (hb_subset_context_t *c) const
   {
     TRACE_SUBSET (this);
 
     VariationStore *varstore_prime = c->serializer->start_embed<VariationStore> ();
     if (unlikely (!varstore_prime)) return_trace (false);
 
     const hb_set_t *variation_indices = c->plan->layout_variation_indices;
     if (variation_indices->is_empty ()) return_trace (false);
 
     hb_vector_t<hb_inc_bimap_t> inner_maps;
     inner_maps.resize ((unsigned) dataSets.len);
     for (unsigned i = 0; i < inner_maps.length; i++)
       inner_maps[i].init ();
 
     for (unsigned idx : c->plan->layout_variation_indices->iter ())
     {
       uint16_t major = idx >> 16;
       uint16_t minor = idx & 0xFFFF;
 
       if (major >= inner_maps.length)
       {
 	for (unsigned i = 0; i < inner_maps.length; i++)
 	  inner_maps[i].fini ();
 	return_trace (false);
       }
       inner_maps[major].add (minor);
     }
     varstore_prime->serialize (c->serializer, this, inner_maps.as_array ());
 
     for (unsigned i = 0; i < inner_maps.length; i++)
       inner_maps[i].fini ();
 
     return_trace (
         !c->serializer->in_error()
         && varstore_prime->dataSets);
   }
 
   unsigned int get_region_index_count (unsigned int ivs) const
   { return (this+dataSets[ivs]).get_region_index_count (); }
 
   void get_scalars (unsigned int ivs,
 		    const int *coords, unsigned int coord_count,
 		    float *scalars /*OUT*/,
 		    unsigned int num_scalars) const
   {
 #ifdef HB_NO_VAR
     for (unsigned i = 0; i < num_scalars; i++)
       scalars[i] = 0.f;
     return;
 #endif
 
     (this+dataSets[ivs]).get_scalars (coords, coord_count, this+regions,
 				      &scalars[0], num_scalars);
   }
 
   unsigned int get_sub_table_count () const { return dataSets.len; }
 
   protected:
   HBUINT16				format;
   Offset32To<VarRegionList>		regions;
   Array16OfOffset32To<VarData>		dataSets;
   public:
   DEFINE_SIZE_ARRAY (8, dataSets);
 };
 
 /*
  * Feature Variations
  */
