commit 4190f27b41ffb710e7d56fe1f1883cd8cd8b853e
Author: Florin Malita <fmalita@chromium.org>
Date:   Tue Jun 16 12:58:08 2020 -0400

    Fix SkParse::FindNamedColor OOB
    
    Plus some minor cleanup and asserts.
    
    Bug: oss-fuzz:23395
    
    Change-Id: I667bee2d7f21864defe2fd97df9eb4e99d69d9ca
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/296451
    Reviewed-by: Mike Klein <mtklein@google.com>
    Reviewed-by: Tyler Denniston <tdenniston@google.com>
    Commit-Queue: Florin Malita <fmalita@google.com>

diff --git a/gn/tests.gni b/gn/tests.gni
index 5b8b99f299..d8b7494bf9 100644
--- a/gn/tests.gni
+++ b/gn/tests.gni
@@ -9,318 +9,319 @@ _tests = get_path_info("../tests", "abspath")
 tests_sources = [
   "$_tests/AAClipTest.cpp",
   "$_tests/AdvancedBlendTest.cpp",
   "$_tests/AndroidCodecTest.cpp",
   "$_tests/AnimatedImageTest.cpp",
   "$_tests/AnnotationTest.cpp",
   "$_tests/ApplyGammaTest.cpp",
   "$_tests/ArenaAllocTest.cpp",
   "$_tests/AsADashTest.cpp",
   "$_tests/BRDTest.cpp",
   "$_tests/BackendAllocationTest.cpp",
   "$_tests/BackendSurfaceMutableStateTest.cpp",
   "$_tests/BadIcoTest.cpp",
   "$_tests/BitSetTest.cpp",
   "$_tests/BitmapCopyTest.cpp",
   "$_tests/BitmapGetColorTest.cpp",
   "$_tests/BitmapTest.cpp",
   "$_tests/BlendTest.cpp",
   "$_tests/BlitMaskClip.cpp",
   "$_tests/BlurTest.cpp",
   "$_tests/BulkRectTest.cpp",
   "$_tests/CTest.cpp",
   "$_tests/CachedDataTest.cpp",
   "$_tests/CachedDecodingPixelRefTest.cpp",
   "$_tests/CanvasStateHelpers.cpp",
   "$_tests/CanvasStateHelpers.h",
   "$_tests/CanvasStateTest.cpp",
   "$_tests/CanvasTest.cpp",
   "$_tests/ChecksumTest.cpp",
   "$_tests/ClearTest.cpp",
   "$_tests/ClipBoundsTest.cpp",
   "$_tests/ClipCubicTest.cpp",
   "$_tests/ClipStackTest.cpp",
   "$_tests/ClipperTest.cpp",
   "$_tests/CodecAnimTest.cpp",
   "$_tests/CodecExactReadTest.cpp",
   "$_tests/CodecPartialTest.cpp",
   "$_tests/CodecPriv.h",
   "$_tests/CodecRecommendedTypeTest.cpp",
   "$_tests/CodecTest.cpp",
   "$_tests/ColorFilterTest.cpp",
   "$_tests/ColorMatrixTest.cpp",
   "$_tests/ColorPrivTest.cpp",
   "$_tests/ColorSpaceTest.cpp",
   "$_tests/ColorTest.cpp",
   "$_tests/CompressedBackendAllocationTest.cpp",
   "$_tests/CopySurfaceTest.cpp",
   "$_tests/CrbugOssfuzz21688.cpp",
   "$_tests/CubicMapTest.cpp",
   "$_tests/DashPathEffectTest.cpp",
   "$_tests/DataRefTest.cpp",
   "$_tests/DebugLayerManagerTest.cpp",
   "$_tests/DefaultPathRendererTest.cpp",
   "$_tests/DeferredDisplayListTest.cpp",
   "$_tests/DequeTest.cpp",
   "$_tests/DescriptorTest.cpp",
   "$_tests/DetermineDomainModeTest.cpp",
   "$_tests/DeviceTest.cpp",
   "$_tests/DiscardableMemoryPoolTest.cpp",
   "$_tests/DiscardableMemoryTest.cpp",
   "$_tests/DrawBitmapRectTest.cpp",
   "$_tests/DrawOpAtlasTest.cpp",
   "$_tests/DrawPathTest.cpp",
   "$_tests/DrawTextTest.cpp",
   "$_tests/EmptyPathTest.cpp",
   "$_tests/EncodeTest.cpp",
   "$_tests/EncodedInfoTest.cpp",
   "$_tests/ExifTest.cpp",
   "$_tests/ExtendedSkColorTypeTests.cpp",
   "$_tests/F16StagesTest.cpp",
   "$_tests/FakeStreams.h",
   "$_tests/FillPathTest.cpp",
   "$_tests/FitsInTest.cpp",
   "$_tests/FlattenDrawableTest.cpp",
   "$_tests/FlattenableFactoryToName.cpp",
   "$_tests/FlattenableNameToFactory.cpp",
   "$_tests/Float16Test.cpp",
   "$_tests/FloatingPointTextureTest.cpp",
   "$_tests/FontHostStreamTest.cpp",
   "$_tests/FontHostTest.cpp",
   "$_tests/FontMgrAndroidParserTest.cpp",
   "$_tests/FontMgrFontConfigTest.cpp",
   "$_tests/FontMgrTest.cpp",
   "$_tests/FontNamesTest.cpp",
   "$_tests/FontTest.cpp",
   "$_tests/FrontBufferedStreamTest.cpp",
   "$_tests/GLBackendSurfaceTest.cpp",
   "$_tests/GeometryTest.cpp",
   "$_tests/GifTest.cpp",
   "$_tests/GlyphRunTest.cpp",
   "$_tests/GpuDrawPathTest.cpp",
   "$_tests/GpuRectanizerTest.cpp",
   "$_tests/GrAHardwareBufferTest.cpp",
   "$_tests/GrBlockAllocatorTest.cpp",
   "$_tests/GrCCPRTest.cpp",
   "$_tests/GrContextAbandonTest.cpp",
   "$_tests/GrContextFactoryTest.cpp",
   "$_tests/GrFinishedFlushTest.cpp",
   "$_tests/GrMemoryPoolTest.cpp",
   "$_tests/GrMeshTest.cpp",
   "$_tests/GrMipMappedTest.cpp",
   "$_tests/GrOpListFlushTest.cpp",
   "$_tests/GrPipelineDynamicStateTest.cpp",
   "$_tests/GrPorterDuffTest.cpp",
   "$_tests/GrQuadBufferTest.cpp",
   "$_tests/GrQuadCropTest.cpp",
   "$_tests/GrStyledShapeTest.cpp",
   "$_tests/GrSubmittedFlushTest.cpp",
   "$_tests/GrSurfaceTest.cpp",
   "$_tests/GrTAllocatorTest.cpp",
   "$_tests/GrTRecorderTest.cpp",
   "$_tests/GrTestingBackendTextureUploadTest.cpp",
   "$_tests/GrTextureMipMapInvalidationTest.cpp",
   "$_tests/GrUploadPixelsTests.cpp",
   "$_tests/GradientTest.cpp",
   "$_tests/HSVRoundTripTest.cpp",
   "$_tests/HashTest.cpp",
   "$_tests/HighContrastFilterTest.cpp",
   "$_tests/ICCTest.cpp",
   "$_tests/ImageBitmapTest.cpp",
   "$_tests/ImageCacheTest.cpp",
   "$_tests/ImageFilterCacheTest.cpp",
   "$_tests/ImageFilterTest.cpp",
   "$_tests/ImageFrom565Bitmap.cpp",
   "$_tests/ImageGeneratorTest.cpp",
   "$_tests/ImageIsOpaqueTest.cpp",
   "$_tests/ImageNewShaderTest.cpp",
   "$_tests/ImageTest.cpp",
   "$_tests/IncrTopoSortTest.cpp",
   "$_tests/IndexedPngOverflowTest.cpp",
   "$_tests/InfRectTest.cpp",
   "$_tests/InsetConvexPolyTest.cpp",
   "$_tests/InterpolatorTest.cpp",
   "$_tests/InvalidIndexedPngTest.cpp",
   "$_tests/IsClosedSingleContourTest.cpp",
   "$_tests/JSONTest.cpp",
   "$_tests/LListTest.cpp",
   "$_tests/LRUCacheTest.cpp",
   "$_tests/LayerDrawLooperTest.cpp",
   "$_tests/LazyProxyTest.cpp",
   "$_tests/M44Test.cpp",
   "$_tests/MD5Test.cpp",
   "$_tests/MallocPixelRefTest.cpp",
   "$_tests/MaskCacheTest.cpp",
   "$_tests/MathTest.cpp",
   "$_tests/Matrix44Test.cpp",
   "$_tests/MatrixClipCollapseTest.cpp",
   "$_tests/MatrixColorFilterTest.cpp",
   "$_tests/MatrixTest.cpp",
   "$_tests/MemoryTest.cpp",
   "$_tests/MemsetTest.cpp",
   "$_tests/MessageBusTest.cpp",
   "$_tests/MetaDataTest.cpp",
   "$_tests/MipMapTest.cpp",
   "$_tests/MultiPictureDocumentTest.cpp",
   "$_tests/NonlinearBlendingTest.cpp",
   "$_tests/OSPathTest.cpp",
   "$_tests/OctoBoundsTest.cpp",
   "$_tests/OffsetSimplePolyTest.cpp",
   "$_tests/OnFlushCallbackTest.cpp",
   "$_tests/OnceTest.cpp",
   "$_tests/OpChainTest.cpp",
   "$_tests/OverAlignedTest.cpp",
   "$_tests/PDFDeflateWStreamTest.cpp",
   "$_tests/PDFDocumentTest.cpp",
   "$_tests/PDFGlyphsToUnicodeTest.cpp",
   "$_tests/PDFJpegEmbedTest.cpp",
   "$_tests/PDFMetadataAttributeTest.cpp",
   "$_tests/PDFOpaqueSrcModeToSrcOverTest.cpp",
   "$_tests/PDFPrimitivesTest.cpp",
   "$_tests/PDFTaggedLinkTest.cpp",
   "$_tests/PDFTaggedPruningTest.cpp",
   "$_tests/PDFTaggedTableTest.cpp",
   "$_tests/PDFTaggedTest.cpp",
   "$_tests/PackBitsTest.cpp",
   "$_tests/PackedConfigsTextureTest.cpp",
   "$_tests/PaintImageFilterTest.cpp",
   "$_tests/PaintTest.cpp",
   "$_tests/ParametricStageTest.cpp",
+  "$_tests/ParseColorTest.cpp",
   "$_tests/ParsePathTest.cpp",
   "$_tests/PathCoverageTest.cpp",
   "$_tests/PathMeasureTest.cpp",
   "$_tests/PathRendererCacheTests.cpp",
   "$_tests/PathTest.cpp",
   "$_tests/PictureBBHTest.cpp",
   "$_tests/PictureShaderTest.cpp",
   "$_tests/PictureTest.cpp",
   "$_tests/PinnedImageTest.cpp",
   "$_tests/PixelRefTest.cpp",
   "$_tests/Point3Test.cpp",
   "$_tests/PointTest.cpp",
   "$_tests/PolyUtilsTest.cpp",
   "$_tests/PremulAlphaRoundTripTest.cpp",
   "$_tests/PrimitiveProcessorTest.cpp",
   "$_tests/ProcessorTest.cpp",
   "$_tests/ProgramsTest.cpp",
   "$_tests/PromiseImageTest.cpp",
   "$_tests/ProxyConversionTest.cpp",
   "$_tests/ProxyRefTest.cpp",
   "$_tests/ProxyTest.cpp",
   "$_tests/QuickRejectTest.cpp",
   "$_tests/RRectInPathTest.cpp",
   "$_tests/RTreeTest.cpp",
   "$_tests/RandomTest.cpp",
   "$_tests/ReadPixelsTest.cpp",
   "$_tests/ReadWriteAlphaTest.cpp",
   "$_tests/RecordDrawTest.cpp",
   "$_tests/RecordOptsTest.cpp",
   "$_tests/RecordPatternTest.cpp",
   "$_tests/RecordTest.cpp",
   "$_tests/RecordTestUtils.h",
   "$_tests/RecorderTest.cpp",
   "$_tests/RecordingXfermodeTest.cpp",
   "$_tests/RectTest.cpp",
   "$_tests/RefCntTest.cpp",
   "$_tests/RegionTest.cpp",
   "$_tests/RenderTargetContextTest.cpp",
   "$_tests/RepeatedClippedBlurTest.cpp",
   "$_tests/ResourceAllocatorTest.cpp",
   "$_tests/ResourceCacheTest.cpp",
   "$_tests/RoundRectTest.cpp",
   "$_tests/SRGBReadWritePixelsTest.cpp",
   "$_tests/SRGBTest.cpp",
   "$_tests/SVGDeviceTest.cpp",
   "$_tests/SafeMathTest.cpp",
   "$_tests/SamplePatternDictionaryTest.cpp",
   "$_tests/ScalarTest.cpp",
   "$_tests/ScaleToSidesTest.cpp",
   "$_tests/SerialProcsTest.cpp",
   "$_tests/SerializationTest.cpp",
   "$_tests/ShaderOpacityTest.cpp",
   "$_tests/ShaderTest.cpp",
   "$_tests/ShadowTest.cpp",
   "$_tests/ShaperTest.cpp",
   "$_tests/SizeTest.cpp",
   "$_tests/SkBase64Test.cpp",
   "$_tests/SkColor4fTest.cpp",
   "$_tests/SkColorSpaceXformStepsTest.cpp",
   "$_tests/SkDOMTest.cpp",
   "$_tests/SkFixed15Test.cpp",
   "$_tests/SkGaussFilterTest.cpp",
   "$_tests/SkGlyphBufferTest.cpp",
   "$_tests/SkImageTest.cpp",
   "$_tests/SkNxTest.cpp",
   "$_tests/SkPEGTest.cpp",
   "$_tests/SkRasterPipelineTest.cpp",
   "$_tests/SkRemoteGlyphCacheTest.cpp",
   "$_tests/SkResourceCacheTest.cpp",
   "$_tests/SkRuntimeEffectTest.cpp",
   "$_tests/SkSLErrorTest.cpp",
   "$_tests/SkSLFPTest.cpp",
   "$_tests/SkSLGLSLTest.cpp",
   "$_tests/SkSLInterpreterTest.cpp",
   "$_tests/SkSLMemoryLayoutTest.cpp",
   "$_tests/SkSLMetalTest.cpp",
   "$_tests/SkSLSPIRVTest.cpp",
   "$_tests/SkScalerCacheTest.cpp",
   "$_tests/SkShaperJSONWriterTest.cpp",
   "$_tests/SkSharedMutexTest.cpp",
   "$_tests/SkStrikeCacheTest.cpp",
   "$_tests/SkUTFTest.cpp",
   "$_tests/SkVMTest.cpp",
   "$_tests/SkVxTest.cpp",
   "$_tests/Skbug5221.cpp",
   "$_tests/Skbug6389.cpp",
   "$_tests/Skbug6653.cpp",
   "$_tests/SortTest.cpp",
   "$_tests/SpecialImageTest.cpp",
   "$_tests/SpecialSurfaceTest.cpp",
   "$_tests/SrcOverTest.cpp",
   "$_tests/SrcSrcOverBatchTest.cpp",
   "$_tests/StreamBufferTest.cpp",
   "$_tests/StreamTest.cpp",
   "$_tests/StringTest.cpp",
   "$_tests/StrokeTest.cpp",
   "$_tests/StrokerTest.cpp",
   "$_tests/SubsetPath.cpp",
   "$_tests/SubsetPath.h",
   "$_tests/SurfaceSemaphoreTest.cpp",
   "$_tests/SurfaceTest.cpp",
   "$_tests/SwizzlerTest.cpp",
   "$_tests/TArrayTest.cpp",
   "$_tests/TDPQueueTest.cpp",
   "$_tests/TLazyTest.cpp",
   "$_tests/TemplatesTest.cpp",
   "$_tests/Test.cpp",
   "$_tests/Test.h",
   "$_tests/TestTest.cpp",
   "$_tests/TestUtils.cpp",
   "$_tests/TestUtils.h",
   "$_tests/TextBlobCacheTest.cpp",
   "$_tests/TextBlobTest.cpp",
   "$_tests/TextureProxyTest.cpp",
   "$_tests/TextureStripAtlasManagerTest.cpp",
   "$_tests/Time.cpp",
   "$_tests/TopoSortTest.cpp",
   "$_tests/TraceMemoryDumpTest.cpp",
   "$_tests/TracingTest.cpp",
   "$_tests/TransferPixelsTest.cpp",
   "$_tests/TriangulatingPathRendererTests.cpp",
   "$_tests/TypefaceTest.cpp",
   "$_tests/UnicodeTest.cpp",
   "$_tests/UtilsTest.cpp",
   "$_tests/VerticesTest.cpp",
   "$_tests/VkBackendSurfaceTest.cpp",
   "$_tests/VkDrawableTest.cpp",
   "$_tests/VkHardwareBufferTest.cpp",
   "$_tests/VkPriorityExtensionTest.cpp",
   "$_tests/VkProtectedContextTest.cpp",
   "$_tests/VkWrapTests.cpp",
   "$_tests/VkYcbcrSamplerTest.cpp",
   "$_tests/VptrTest.cpp",
   "$_tests/WindowRectanglesTest.cpp",
   "$_tests/WritePixelsTest.cpp",
   "$_tests/Writer32Test.cpp",
   "$_tests/YUVCacheTest.cpp",
   "$_tests/YUVTest.cpp",
 ]
diff --git a/src/utils/SkParseColor.cpp b/src/utils/SkParseColor.cpp
index ba7c51048f..671708bcb9 100644
--- a/src/utils/SkParseColor.cpp
+++ b/src/utils/SkParseColor.cpp
@@ -155,79 +155,107 @@ static const unsigned int gColorNames[] = {
 const char* SkParse::FindNamedColor(const char* name, size_t len, SkColor* color) {
     const char* namePtr = name;
     unsigned int sixMatches[4];
     unsigned int* sixMatchPtr = sixMatches;
     bool first = true;
     bool last = false;
     char ch;
     do {
         unsigned int sixMatch = 0;
         for (int chIndex = 0; chIndex < 6; chIndex++) {
             sixMatch <<= 5;
             ch = *namePtr  | 0x20;
             if (ch < 'a' || ch > 'z')
                 ch = 0;
             else {
                 ch = ch - 'a' + 1;
                 namePtr++;
             }
             sixMatch |= ch ;  // turn 'A' (0x41) into 'a' (0x61);
         }
         sixMatch <<= 1;
         sixMatch |= 1;
         if (first) {
             sixMatch |= 0x80000000;
             first = false;
         }
         ch = *namePtr | 0x20;
         last = ch < 'a' || ch > 'z';
         if (last)
             sixMatch &= ~1;
         len -= 6;
         *sixMatchPtr++ = sixMatch;
     } while (last == false && len > 0);
-    const int colorNameSize = sizeof(gColorNames) / sizeof(unsigned int);
-    int lo = 0;
-    int hi = colorNameSize - 3; // back off to beginning of yellowgreen
+
+    auto is_rec_start = [](size_t i) {
+        SkASSERT(i < SK_ARRAY_COUNT(gColorNames));
+
+        // the first record word is tagged in bit 31
+        return static_cast<int>(gColorNames[i]) < 0;
+    };
+
+    auto rec_start = [&](size_t i, int dir) {
+        // find the beginning of a record, searching in the given direction.
+        while (!is_rec_start(i)) {
+            i += dir;
+        }
+
+        return i;
+    };
+
+    size_t lo = 0,
+           hi = SK_ARRAY_COUNT(gColorNames) - 3; // back off to beginning of yellowgreen
+
     while (lo <= hi) {
-        int mid = (hi + lo) >> 1;
-        while ((int) gColorNames[mid] >= 0)
-            --mid;
+        SkASSERT(is_rec_start(lo));
+        SkASSERT(is_rec_start(hi));
+
+        const auto  mid         = rec_start((hi + lo) >> 1, -1);
+        const auto* midMatchPtr = &gColorNames[mid]; // separate cursor, to keep |mid| on rec start
+
         sixMatchPtr = sixMatches;
-        while (gColorNames[mid] == *sixMatchPtr) {
-            ++mid;
+        while (*midMatchPtr == *sixMatchPtr) {
+            ++midMatchPtr;
             if ((*sixMatchPtr & 1) == 0) { // last
-                *color = gColorNames[mid] | 0xFF000000;
+                // jackpot
+                *color = *midMatchPtr | 0xFF000000;
                 return namePtr;
             }
             ++sixMatchPtr;
         }
-        int sixMask = *sixMatchPtr & ~0x80000000;
-        int midMask = gColorNames[mid] & ~0x80000000;
+
+        if (hi == lo) {
+            // not found
+            break;
+        }
+
+        int sixMask = *sixMatchPtr & ~0x80000000,
+            midMask = *midMatchPtr & ~0x80000000;
+
+        SkASSERT(sixMask != midMask);
         if (sixMask > midMask) {
-            lo = mid + 2;   // skip color
-            while ((int) gColorNames[lo] >= 0)
-                ++lo;
-        } else if (hi == mid)
-            return nullptr;
-        else
+            // skip color
+            lo = rec_start(mid + 2,  1);
+        } else {
             hi = mid;
+        }
     }
+
     return nullptr;
 }
 
 // !!! move to char utilities
 //static int count_separators(const char* str, const char* sep) {
 //  char c;
 //  int separators = 0;
 //  while ((c = *str++) != '\0') {
 //      if (strchr(sep, c) == nullptr)
 //          continue;
 //      do {
 //          if ((c = *str++) == '\0')
 //              goto goHome;
 //      } while (strchr(sep, c) != nullptr);
 //      separators++;
 //  }
 //goHome:
 //  return separators;
 //}
diff --git a/tests/ParseColorTest.cpp b/tests/ParseColorTest.cpp
new file mode 100644
index 0000000000..35f80de803
--- /dev/null
+++ b/tests/ParseColorTest.cpp
@@ -0,0 +1,194 @@
+/*
+ * Copyright 2020 Google LLC
+ *
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ */
+
+#include "include/utils/SkParse.h"
+#include "tests/Test.h"
+
+static constexpr struct {
+    const char* fName;
+    SkColor     fColor;
+} gNamedColors[] = {
+    { "aliceblue",            0xfff0f8ff },
+    { "antiquewhite",         0xfffaebd7 },
+    { "aqua",                 0xff00ffff },
+    { "aquamarine",           0xff7fffd4 },
+    { "azure",                0xfff0ffff },
+    { "beige",                0xfff5f5dc },
+    { "bisque",               0xffffe4c4 },
+    { "black",                0xff000000 },
+    { "blanchedalmond",       0xffffebcd },
+    { "blue",                 0xff0000ff },
+    { "blueviolet",           0xff8a2be2 },
+    { "brown",                0xffa52a2a },
+    { "burlywood",            0xffdeb887 },
+    { "cadetblue",            0xff5f9ea0 },
+    { "chartreuse",           0xff7fff00 },
+    { "chocolate",            0xffd2691e },
+    { "coral",                0xffff7f50 },
+    { "cornflowerblue",       0xff6495ed },
+    { "cornsilk",             0xfffff8dc },
+    { "crimson",              0xffdc143c },
+    { "cyan",                 0xff00ffff },
+    { "darkblue",             0xff00008b },
+    { "darkcyan",             0xff008b8b },
+    { "darkgoldenrod",        0xffb8860b },
+    { "darkgray",             0xffa9a9a9 },
+    { "darkgreen",            0xff006400 },
+    { "darkkhaki",            0xffbdb76b },
+    { "darkmagenta",          0xff8b008b },
+    { "darkolivegreen",       0xff556b2f },
+    { "darkorange",           0xffff8c00 },
+    { "darkorchid",           0xff9932cc },
+    { "darkred",              0xff8b0000 },
+    { "darksalmon",           0xffe9967a },
+    { "darkseagreen",         0xff8fbc8f },
+    { "darkslateblue",        0xff483d8b },
+    { "darkslategray",        0xff2f4f4f },
+    { "darkturquoise",        0xff00ced1 },
+    { "darkviolet",           0xff9400d3 },
+    { "deeppink",             0xffff1493 },
+    { "deepskyblue",          0xff00bfff },
+    { "dimgray",              0xff696969 },
+    { "dodgerblue",           0xff1e90ff },
+    { "firebrick",            0xffb22222 },
+    { "floralwhite",          0xfffffaf0 },
+    { "forestgreen",          0xff228b22 },
+    { "fuchsia",              0xffff00ff },
+    { "gainsboro",            0xffdcdcdc },
+    { "ghostwhite",           0xfff8f8ff },
+    { "gold",                 0xffffd700 },
+    { "goldenrod",            0xffdaa520 },
+    { "gray",                 0xff808080 },
+    { "green",                0xff008000 },
+    { "greenyellow",          0xffadff2f },
+    { "honeydew",             0xfff0fff0 },
+    { "hotpink",              0xffff69b4 },
+    { "indianred",            0xffcd5c5c },
+    { "indigo",               0xff4b0082 },
+    { "ivory",                0xfffffff0 },
+    { "khaki",                0xfff0e68c },
+    { "lavender",             0xffe6e6fa },
+    { "lavenderblush",        0xfffff0f5 },
+    { "lawngreen",            0xff7cfc00 },
+    { "lemonchiffon",         0xfffffacd },
+    { "lightblue",            0xffadd8e6 },
+    { "lightcoral",           0xfff08080 },
+    { "lightcyan",            0xffe0ffff },
+    { "lightgoldenrodyellow", 0xfffafad2 },
+    { "lightgreen",           0xff90ee90 },
+    { "lightgrey",            0xffd3d3d3 },
+    { "lightpink",            0xffffb6c1 },
+    { "lightsalmon",          0xffffa07a },
+    { "lightseagreen",        0xff20b2aa },
+    { "lightskyblue",         0xff87cefa },
+    { "lightslategray",       0xff778899 },
+    { "lightsteelblue",       0xffb0c4de },
+    { "lightyellow",          0xffffffe0 },
+    { "lime",                 0xff00ff00 },
+    { "limegreen",            0xff32cd32 },
+    { "linen",                0xfffaf0e6 },
+    { "magenta",              0xffff00ff },
+    { "maroon",               0xff800000 },
+    { "mediumaquamarine",     0xff66cdaa },
+    { "mediumblue",           0xff0000cd },
+    { "mediumorchid",         0xffba55d3 },
+    { "mediumpurple",         0xff9370db },
+    { "mediumseagreen",       0xff3cb371 },
+    { "mediumslateblue",      0xff7b68ee },
+    { "mediumspringgreen",    0xff00fa9a },
+    { "mediumturquoise",      0xff48d1cc },
+    { "mediumvioletred",      0xffc71585 },
+    { "midnightblue",         0xff191970 },
+    { "mintcream",            0xfff5fffa },
+    { "mistyrose",            0xffffe4e1 },
+    { "moccasin",             0xffffe4b5 },
+    { "navajowhite",          0xffffdead },
+    { "navy",                 0xff000080 },
+    { "oldlace",              0xfffdf5e6 },
+    { "olive",                0xff808000 },
+    { "olivedrab",            0xff6b8e23 },
+    { "orange",               0xffffa500 },
+    { "orangered",            0xffff4500 },
+    { "orchid",               0xffda70d6 },
+    { "palegoldenrod",        0xffeee8aa },
+    { "palegreen",            0xff98fb98 },
+    { "paleturquoise",        0xffafeeee },
+    { "palevioletred",        0xffdb7093 },
+    { "papayawhip",           0xffffefd5 },
+    { "peachpuff",            0xffffdab9 },
+    { "peru",                 0xffcd853f },
+    { "pink",                 0xffffc0cb },
+    { "plum",                 0xffdda0dd },
+    { "powderblue",           0xffb0e0e6 },
+    { "purple",               0xff800080 },
+    { "red",                  0xffff0000 },
+    { "rosybrown",            0xffbc8f8f },
+    { "royalblue",            0xff4169e1 },
+    { "saddlebrown",          0xff8b4513 },
+    { "salmon",               0xfffa8072 },
+    { "sandybrown",           0xfff4a460 },
+    { "seagreen",             0xff2e8b57 },
+    { "seashell",             0xfffff5ee },
+    { "sienna",               0xffa0522d },
+    { "silver",               0xffc0c0c0 },
+    { "skyblue",              0xff87ceeb },
+    { "slateblue",            0xff6a5acd },
+    { "slategray",            0xff708090 },
+    { "snow",                 0xfffffafa },
+    { "springgreen",          0xff00ff7f },
+    { "steelblue",            0xff4682b4 },
+    { "tan",                  0xffd2b48c },
+    { "teal",                 0xff008080 },
+    { "thistle",              0xffd8bfd8 },
+    { "tomato",               0xffff6347 },
+    { "turquoise",            0xff40e0d0 },
+    { "violet",               0xffee82ee },
+    { "wheat",                0xfff5deb3 },
+    { "white",                0xffffffff },
+    { "whitesmoke",           0xfff5f5f5 },
+    { "yellow",               0xffffff00 },
+    { "yellowgreen",          0xff9acd32 },
+};
+
+static bool is_valid_name(const SkString& name) {
+    for (const auto& c : gNamedColors) {
+        if (name.equals(c.fName)) return true;
+    }
+    return false;
+}
+
+DEF_TEST(ParseNamedColor, reporter) {
+    SkColor color;
+
+    for (const auto& c : gNamedColors) {
+        // check the real name
+        REPORTER_ASSERT(reporter, SkParse::FindNamedColor(c.fName , strlen(c.fName), &color)
+                                                       == c.fName + strlen(c.fName));
+        REPORTER_ASSERT(reporter, color == c.fColor);
+
+        // check partial prefixes
+        for (int l = strlen(c.fName) - 1; l >= 0; --l) {
+            SkString s(c.fName, l);
+            // some substrings are valid color names
+            if (is_valid_name(s)) continue;
+
+            REPORTER_ASSERT(reporter, SkParse::FindNamedColor(s.c_str(), l, &color) == nullptr);
+        }
+
+        // check suffixes
+        SkString s(c.fName, strlen(c.fName));
+        s.append("A");
+        REPORTER_ASSERT(reporter, SkParse::FindNamedColor(s.c_str(), s.size(), &color) == nullptr);
+    }
+
+    // some oddballs
+    REPORTER_ASSERT(reporter, SkParse::FindNamedColor(""   , 0, &color) == nullptr);
+    REPORTER_ASSERT(reporter, SkParse::FindNamedColor("aaa", 3, &color) == nullptr);
+    REPORTER_ASSERT(reporter, SkParse::FindNamedColor("zzz", 3, &color) == nullptr);
+    REPORTER_ASSERT(reporter, SkParse::FindNamedColor("aaaaaaaaaaaa", 12, &color) == nullptr);
+    REPORTER_ASSERT(reporter, SkParse::FindNamedColor("zzzzzzzzzzzz", 12, &color) == nullptr);
+}
