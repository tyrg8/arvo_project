commit 567243d2578dd6e0f027edca043cbcf1dd60b0cb
Author: JacobBarthelmeh <jacob@wolfssl.com>
Date:   Sun Dec 10 05:47:47 2023 -0800

    touch up autoconf build with xilinx and sp macro guards

diff --git a/configure.ac b/configure.ac
index 0e2d07061..dc8d05163 100644
--- a/configure.ac
+++ b/configure.ac
@@ -9323,6 +9323,7 @@ AM_CONDITIONAL([BUILD_HPKE],[test "x$ENABLED_HPKE" = "xyes" || test "x$ENABLED_U
 AM_CONDITIONAL([BUILD_DTLS],[test "x$ENABLED_DTLS" = "xyes" || test "x$ENABLED_USERSETTINGS" = "xyes"])
 AM_CONDITIONAL([BUILD_MAXQ10XX],[test "x$ENABLED_MAXQ10XX" = "xyes"])
 AM_CONDITIONAL([BUILD_ARIA],[test "x$ENABLED_ARIA" = "xyes"])
+AM_CONDITIONAL([BUILD_XILINX],[test "x$ENABLED_XILINX" = "xyes"])
 
 if test "$ENABLED_REPRODUCIBLE_BUILD" != "yes" &&
    (test "$ax_enable_debug" = "yes" ||
diff --git a/src/include.am b/src/include.am
index a69822fff..6c30e6427 100644
--- a/src/include.am
+++ b/src/include.am
@@ -900,10 +900,14 @@ endif
 
 endif !BUILD_CRYPTONLY
 
+if BUILD_XILINX
+src_libwolfssl@LIBSUFFIX@_la_SOURCES += wolfcrypt/src/port/xilinx/xil-aesgcm.c
+endif
 
 endif !BUILD_FIPS_RAND
 
 if BUILD_ARIA
 src_libwolfssl@LIBSUFFIX@_la_SOURCES += wolfcrypt/src/port/aria/aria-crypt.c
 src_libwolfssl@LIBSUFFIX@_la_SOURCES += wolfcrypt/src/port/aria/aria-cryptocb.c
 endif
+
diff --git a/wolfcrypt/src/sp_int.c b/wolfcrypt/src/sp_int.c
index 94fc01c35..37a34d8e9 100644
--- a/wolfcrypt/src/sp_int.c
+++ b/wolfcrypt/src/sp_int.c
@@ -6972,68 +6972,68 @@ static
 #endif /* !WOLFSSL_SP_MATH_ALL && (!HAVE_ECC || !HAVE_COMP_KEY) */
 int sp_mod_d(const sp_int* a, sp_int_digit d, sp_int_digit* r)
 {
     int err = MP_OKAY;
 
     /* Validate parameters. */
     if ((a == NULL) || (r == NULL) || (d == 0)) {
         err = MP_VAL;
     }
 
 #if 0
     sp_print(a, "a");
     sp_print_digit(d, "m");
 #endif
 
     if (err == MP_OKAY) {
         /* Check whether d is a power of 2. */
         if ((d & (d - 1)) == 0) {
             if (a->used == 0) {
                 *r = 0;
             }
             else {
                 *r = a->dp[0] & (d - 1);
             }
         }
 #if !defined(WOLFSSL_SP_SMALL)
     #if SP_WORD_SIZE < 64
         else if (d == 3) {
             /* Fast implementation for divisor of 3. */
             _sp_div_3(a, NULL, r);
         }
     #endif
         else if (d == 10) {
             /* Fast implementation for divisor of 10. */
             _sp_div_10(a, NULL, r);
         }
 #endif
         else if (d <= SP_HALF_MAX) {
             /* For small divisors. */
             _sp_div_small(a, d, NULL, r);
         }
         else {
             _sp_mod_d(a, d, r);
         }
 
     #ifdef WOLFSSL_SP_INT_NEGATIVE
         if (a->sign == MP_NEG) {
             *r = d - *r;
         }
     #endif
     }
 
 #if 0
     sp_print_digit(*r, "rmod");
 #endif
 
     return err;
 }
 #endif /* WOLFSSL_SP_MOD_D */
 
 #if defined(HAVE_ECC) || !defined(NO_DSA) || defined(OPENSSL_EXTRA) || \
     (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY) && \
-     !defined(WOLFSSL_RSA_PUBLIC_ONLY))
+     !defined(WOLFSSL_RSA_PUBLIC_ONLY)) || defined(WOLFSSL_SP_INVMOD)
 /* Divides a by 2 and stores in r: r = a >> 1
  *
  * @param  [in]   a  SP integer to divide.
  * @param  [out]  r  SP integer to hold result.
  */
@@ -19180,102 +19180,102 @@ static int _sp_prime_random_trials(const sp_int* a, int trials, int* result,
 /* Check whether a is prime.
  * Checks against a number of small primes and does t iterations of
  * Miller-Rabin.
  *
  * @param  [in]   a       SP integer to check.
  * @param  [in]   trials  Number of iterations of Miller-Rabin test to perform.
  * @param  [out]  result  MP_YES when number is prime.
  *                        MP_NO otherwise.
  * @param  [in]   rng     Random number generator for Miller-Rabin testing.
  *
  * @return  MP_OKAY on success.
  * @return  MP_VAL when a, result or rng is NULL.
  * @return  MP_MEM when dynamic memory allocation fails.
  */
 int sp_prime_is_prime_ex(const sp_int* a, int trials, int* result, WC_RNG* rng)
 {
     int err = MP_OKAY;
     int ret = MP_YES;
     int haveRes = 0;
 
     if ((a == NULL) || (result == NULL) || (rng == NULL)) {
         err = MP_VAL;
     }
 #ifndef WC_NO_RNG
     if ((err == MP_OKAY) && (a->used * 2 >= SP_INT_DIGITS)) {
         err = MP_VAL;
     }
 #endif
 #ifdef WOLFSSL_SP_INT_NEGATIVE
     if ((err == MP_OKAY) && (a->sign == MP_NEG)) {
         err = MP_VAL;
     }
 #endif
 
     /* Ensure trials is valid. Maximum based on number of small primes
      * available. */
     if ((err == MP_OKAY) && ((trials <= 0) || (trials > SP_PRIME_SIZE))) {
         err = MP_VAL;
     }
 
     if ((err == MP_OKAY) && sp_isone(a)) {
         ret = MP_NO;
         haveRes = 1;
     }
 
     SAVE_VECTOR_REGISTERS(err = _svr_ret;);
 
     /* Check against known small primes when a has 1 digit. */
     if ((err == MP_OKAY) && (!haveRes) && (a->used == 1) &&
             (a->dp[0] <= (sp_int_digit)sp_primes[SP_PRIME_SIZE - 1])) {
         haveRes = sp_cmp_primes(a, &ret);
     }
 
     /* Check all small primes for even divisibility. */
     if ((err == MP_OKAY) && (!haveRes)) {
         err = sp_div_primes(a, &haveRes, &ret);
     }
 
 #ifndef WC_NO_RNG
     /* Check a number of iterations of Miller-Rabin with random large values. */
     if ((err == MP_OKAY) && (!haveRes)) {
         err = _sp_prime_random_trials(a, trials, &ret, rng);
     }
 #else
     (void)trials;
 #endif /* !WC_NO_RNG */
 
     if (result != NULL) {
         *result = ret;
     }
 
     RESTORE_VECTOR_REGISTERS();
 
     return err;
 }
 #endif /* WOLFSSL_SP_PRIME_GEN */
 
-#if !defined(NO_RSA) && defined(WOLFSSL_KEY_GEN)
+#if !defined(NO_RSA) || defined(WOLFSSL_KEY_GEN)
 
 /* Calculates the Greatest Common Denominator (GCD) of a and b into r.
  *
  * Find the largest number that divides both a and b without remainder.
  * r <= a, r <= b, a % r == 0, b % r == 0
  *
  * a and b are positive integers.
  *
  * Euclidean Algorithm:
  *  1. If a > b then a = b, b = a
  *  2. u = a
  *  3. v = b % a
  *  4. While v != 0
  *   4.1. t = u % v
  *   4.2. u <= v, v <= t, t <= u
  *  5. r = u
  *
  * @param  [in]   a  SP integer of first operand.
  * @param  [in]   b  SP integer of second operand.
  * @param  [out]  r  SP integer to hold result.
  *
  * @return  MP_OKAY on success.
  * @return  MP_MEM when dynamic memory allocation fails.
  */
diff --git a/wolfssl/wolfcrypt/sp_int.h b/wolfssl/wolfcrypt/sp_int.h
index e768d0cd5..cf7b8f289 100644
--- a/wolfssl/wolfcrypt/sp_int.h
+++ b/wolfssl/wolfcrypt/sp_int.h
@@ -1067,7 +1067,7 @@ MP_API int sp_rand_prime(sp_int* r, int len, WC_RNG* rng, void* heap);
 MP_API int sp_prime_is_prime(const sp_int* a, int t, int* result);
 MP_API int sp_prime_is_prime_ex(const sp_int* a, int t, int* result,
     WC_RNG* rng);
-#if !defined(NO_RSA) && defined(WOLFSSL_KEY_GEN)
+#if !defined(NO_RSA) || defined(WOLFSSL_KEY_GEN)
 MP_API int sp_gcd(const sp_int* a, const sp_int* b, sp_int* r);
 #endif
 #if !defined(NO_RSA) && defined(WOLFSSL_KEY_GEN) && \
