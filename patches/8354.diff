commit f504273c10a7448aabd619175bc1e041458cb1a7
Author: Caolán McNamara <caolanm@redhat.com>
Date:   Fri May 18 10:29:58 2018 +0100

    ofz#8330 Abrt, fallout from rework to use buffer
    
    Change-Id: I9d4a70d8ae2f5247901c584dc05405665eac065b
    Reviewed-on: https://gerrit.libreoffice.org/54525
    Reviewed-by: Caolán McNamara <caolanm@redhat.com>
    Tested-by: Caolán McNamara <caolanm@redhat.com>

diff --git a/starmath/source/mathtype.cxx b/starmath/source/mathtype.cxx
index 4eab25b87c15..2d25623bdc8b 100644
--- a/starmath/source/mathtype.cxx
+++ b/starmath/source/mathtype.cxx
@@ -2844,107 +2844,107 @@ void MathType::HandleSetSize()
 bool MathType::HandleChar(sal_Int32 &rTextStart, int &rSetSize, int nLevel,
     sal_uInt8 nTag, sal_uInt8 nSelector, sal_uInt8 nVariation, bool bSilent)
 {
     sal_Unicode nChar(0);
     bool bRet = true;
 
     if (xfAUTO(nTag))
     {
     //This is a candidate for function recognition, whatever
     //that is!
     }
 
     sal_uInt8 nOldTypeFace = nTypeFace;
     pS->ReadUChar( nTypeFace );
     if (nVersion < 3)
     {
         sal_uInt8 nChar8(0);
         pS->ReadUChar( nChar8 );
         nChar = nChar8;
     }
     else
         pS->ReadUtf16( nChar );
 
     /*
     bad character, old mathtype < 3 has these
     */
     if (nChar < 0x20)
         return bRet;
 
     if (xfEMBELL(nTag))
     {
         //A bit tricky, the character emblishments for
         //mathtype can all be listed after each other, in
         //starmath some must go before the character and some
         //must go after. In addition some of the emblishments
         //may repeated and in starmath some of these groups
         //must be gathered together. sPost is the portion that
         //follows the char and nPostSup and nPostlSup are the
         //indexes at which this class of emblishment is
         //collated together
         sPost.clear();
         nPostSup = nPostlSup = 0;
         int nOriglen=rRet.getLength()-rTextStart;
         rRet.append(" {");  // #i24340# make what would be "vec {A}_n" become "{vec {A}}_n"
         if ((!bSilent) && (nOriglen > 1))
             rRet.append("\"");
         bRet = HandleRecords( nLevel+1, nSelector, nVariation );
         if (!bSilent)
         {
             if (nOriglen > 1)
             {
                 OUString aStr;
                 TypeFaceToString(aStr,nOldTypeFace);
                 aStr += "\"";
-                rRet.insert(rTextStart, aStr);
+                rRet.insert(std::min(rTextStart, rRet.getLength()), aStr);
 
                 aStr.clear();
                 TypeFaceToString(aStr,nTypeFace);
                 rRet.append(aStr).append("{");
             }
             else
                 rRet.append(" {");
             rTextStart = rRet.getLength();
         }
     }
 
     if (!bSilent)
     {
         sal_Int32 nOldLen = rRet.getLength();
         if (
             HandleSize(nLSize,nDSize,rSetSize) ||
             (nOldTypeFace != nTypeFace)
            )
         {
             if ((nOldLen - rTextStart) > 1)
             {
                 rRet.insert(nOldLen, "\"");
                 OUString aStr;
                 TypeFaceToString(aStr,nOldTypeFace);
                 aStr += "\"";
                 rRet.insert(rTextStart,aStr);
             }
             rTextStart = rRet.getLength();
         }
         nOldLen = rRet.getLength();
         if (!LookupChar(nChar,rRet,nVersion,nTypeFace))
         {
             if (nOldLen - rTextStart > 1)
             {
                 rRet.insert(nOldLen, "\"");
                 OUString aStr;
                 TypeFaceToString(aStr,nOldTypeFace);
                 aStr += "\"";
                 rRet.insert(rTextStart, aStr);
             }
             rTextStart = rRet.getLength();
         }
         lcl_PrependDummyTerm(rRet, rTextStart);
     }
 
     if ((xfEMBELL(nTag)) && (!bSilent))
     {
         rRet.append("}}").append(sPost);  // #i24340# make what would be "vec {A}_n" become "{vec {A}}_n"
         rTextStart = rRet.getLength();
     }
     return bRet;
 }
