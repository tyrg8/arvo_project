commit 41ab86fce0c0d2056ae038ff08ac978027c093df
Author: Eugene Kliuchnikov <eustas.ru@gmail.com>
Date:   Fri Jun 30 10:58:11 2023 +0200

    Fix UB in HF adjustment. (#161)
    
    Actually, apply the same sanity filters as in non-fixed code.

diff --git a/libfaad/common.c b/libfaad/common.c
index 04e1a41..2233349 100644
--- a/libfaad/common.c
+++ b/libfaad/common.c
@@ -352,42 +352,44 @@ static const real_t log2_tab[] = {
 real_t pow2_fix(real_t val)
 {
     uint32_t x1, x2;
     uint32_t errcorr;
     uint32_t index_frac;
     real_t retval;
     int32_t whole = (val >> REAL_BITS);
 
     /* rest = [0..1] */
     int32_t rest = val & ((1 << REAL_BITS) - 1);
 
     /* index into pow2_tab */
     int32_t index = rest >> (REAL_BITS-TABLE_BITS);
 
 
     if (val == 0)
         return (1<<REAL_BITS);
+    if (REAL_BITS + whole < 0)
+        return 0;
 
     /* leave INTERP_BITS bits */
     index_frac = rest >> (REAL_BITS-TABLE_BITS-INTERP_BITS);
     index_frac = index_frac & ((1<<INTERP_BITS)-1);
 
     if (whole > 0)
     {
         retval = 1 << whole;
     } else {
         retval = REAL_CONST(1) >> -whole;
     }
 
     x1 = pow2_tab[index & ((1<<TABLE_BITS)-1)];
     x2 = pow2_tab[(index & ((1<<TABLE_BITS)-1)) + 1];
     errcorr = ( (index_frac*(x2-x1))) >> INTERP_BITS;
 
     if (whole > 0)
     {
         retval = retval * (errcorr + x1);
     } else {
         retval = MUL_R(retval, (errcorr + x1));
     }
 
     return retval;
 }
@@ -431,86 +433,44 @@ int32_t pow2_int(real_t val)
 /* ld(x) = ld(x*y/y) = ld(x/y) + ld(y), with y=2^N and [1 <= (x/y) < 2] */
 int32_t log2_int(uint32_t val)
 {
     uint32_t frac;
     int32_t exp = 0;
     uint32_t index;
     uint32_t index_frac;
     uint32_t x1, x2;
     uint32_t errcorr;
 
     /* error */
     if (val == 0)
         return -10000;
 
     exp = floor_log2(val);
     exp -= REAL_BITS;
 
     /* frac = [1..2] */
     if (exp >= 0)
         frac = val >> exp;
     else
         frac = val << -exp;
 
     /* index in the log2 table */
     index = frac >> (REAL_BITS-TABLE_BITS);
 
     /* leftover part for linear interpolation */
     index_frac = frac & ((1<<(REAL_BITS-TABLE_BITS))-1);
 
     /* leave INTERP_BITS bits */
     index_frac = index_frac >> (REAL_BITS-TABLE_BITS-INTERP_BITS);
 
     x1 = log2_tab[index & ((1<<TABLE_BITS)-1)];
     x2 = log2_tab[(index & ((1<<TABLE_BITS)-1)) + 1];
 
     /* linear interpolation */
     /* retval = exp + ((index_frac)*x2 + (1-index_frac)*x1) */
 
     errcorr = (index_frac * (x2-x1)) >> INTERP_BITS;
 
     return ((exp+REAL_BITS) << REAL_BITS) + errcorr + x1;
 }
 
-/* ld(x) = ld(x*y/y) = ld(x/y) + ld(y), with y=2^N and [1 <= (x/y) < 2] */
-real_t log2_fix(uint32_t val)
-{
-    uint32_t frac;
-    int32_t exp = 0;
-    uint32_t index;
-    uint32_t index_frac;
-    uint32_t x1, x2;
-    uint32_t errcorr;
-
-    /* error */
-    if (val == 0)
-        return -100000;
-
-    exp = floor_log2(val);
-    exp -= REAL_BITS;
-
-    /* frac = [1..2] */
-    if (exp >= 0)
-        frac = val >> exp;
-    else
-        frac = val << -exp;
-
-    /* index in the log2 table */
-    index = frac >> (REAL_BITS-TABLE_BITS);
-
-    /* leftover part for linear interpolation */
-    index_frac = frac & ((1<<(REAL_BITS-TABLE_BITS))-1);
-
-    /* leave INTERP_BITS bits */
-    index_frac = index_frac >> (REAL_BITS-TABLE_BITS-INTERP_BITS);
-
-    x1 = log2_tab[index & ((1<<TABLE_BITS)-1)];
-    x2 = log2_tab[(index & ((1<<TABLE_BITS)-1)) + 1];
-
-    /* linear interpolation */
-    /* retval = exp + ((index_frac)*x2 + (1-index_frac)*x1) */
-
-    errcorr = (index_frac * (x2-x1)) >> INTERP_BITS;
-
-    return (exp << REAL_BITS) + errcorr + x1;
-}
 #endif
diff --git a/libfaad/common.h b/libfaad/common.h
index d12acc1..c7b8d0d 100644
--- a/libfaad/common.h
+++ b/libfaad/common.h
@@ -419,7 +419,6 @@ uint32_t ne_rng(uint32_t *__r1, uint32_t *__r2);
 uint32_t wl_min_lzc(uint32_t x);
 #define LOG2_MIN_INF REAL_CONST(-10000)
 int32_t log2_int(uint32_t val);
-int32_t log2_fix(uint32_t val);
 int32_t pow2_int(real_t val);
 real_t pow2_fix(real_t val);
 #endif
diff --git a/libfaad/rvlc.c b/libfaad/rvlc.c
index 49584cb..da7b870 100644
--- a/libfaad/rvlc.c
+++ b/libfaad/rvlc.c
@@ -177,97 +177,97 @@ uint8_t rvlc_decode_scale_factors(ic_stream *ics, bitfile *ld)
 static uint8_t rvlc_decode_sf_forward(ic_stream *ics, bitfile *ld_sf, bitfile *ld_esc,
                                       uint8_t *intensity_used)
 {
     int8_t g, sfb;
     int8_t t = 0;
     int8_t error = ld_sf->error | ld_esc->error;
     int8_t noise_pcm_flag = 1;
 
     int16_t scale_factor = ics->global_gain;
     int16_t is_position = 0;
     int16_t noise_energy = ics->global_gain - 90 - 256;
     int16_t scale_factor_max = 255;
 #ifdef FIXED_POINT
     /* TODO: consider rolling out to regular build. */
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
     /* The value is inexact, adjusted to current fuzzer findings. */
-    scale_factor_max = 174;
+    scale_factor_max = 165;
 #endif  // FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
 #endif  // FIXED_POINT
 
 #ifdef PRINT_RVLC
     printf("\nglobal_gain: %d\n", ics->global_gain);
 #endif
 
     for (g = 0; g < ics->num_window_groups; g++)
     {
         for (sfb = 0; sfb < ics->max_sfb; sfb++)
         {
             if (error)
             {
                 ics->scale_factors[g][sfb] = 0;
             } else {
                 switch (ics->sfb_cb[g][sfb])
                 {
                 case ZERO_HCB: /* zero book */
                     ics->scale_factors[g][sfb] = 0;
                     break;
                 case INTENSITY_HCB: /* intensity books */
                 case INTENSITY_HCB2:
 
                     *intensity_used = 1;
 
                     /* decode intensity position */
                     t = rvlc_huffman_sf(ld_sf, ld_esc /*, +1*/);
 
                     is_position += t;
                     ics->scale_factors[g][sfb] = is_position;
 
                     break;
                 case NOISE_HCB: /* noise books */
 
                     /* decode noise energy */
                     if (noise_pcm_flag)
                     {
                         int16_t n = ics->dpcm_noise_nrg;
                         noise_pcm_flag = 0;
                         noise_energy += n;
                     } else {
                         t = rvlc_huffman_sf(ld_sf, ld_esc /*, +1*/);
                         noise_energy += t;
                     }
 
                     ics->scale_factors[g][sfb] = noise_energy;
 
                     break;
                 default: /* spectral books */
 
                     /* decode scale factor */
                     t = rvlc_huffman_sf(ld_sf, ld_esc /*, +1*/);
 
                     scale_factor += t;
                     if (scale_factor < 0 || scale_factor > 255)
                         return 4;
 
                     ics->scale_factors[g][sfb] = min(scale_factor, scale_factor_max);
 
                     break;
                 }
 #ifdef PRINT_RVLC
                 printf("%3d:%4d%4d\n", sfb, ics->sfb_cb[g][sfb],
                     ics->scale_factors[g][sfb]);
 #endif
                 if (t == 99)
                 {
                     error = 1;
                 }
             }
         }
     }
 #ifdef PRINT_RVLC
     printf("\n\n");
 #endif
 
     return 0;
 }
 
 #if 0 // not used right now, doesn't work correctly yet
diff --git a/libfaad/sbr_hfadj.c b/libfaad/sbr_hfadj.c
index 6da7325..2cb2088 100644
--- a/libfaad/sbr_hfadj.c
+++ b/libfaad/sbr_hfadj.c
@@ -279,90 +279,103 @@ static const real_t log2_int_tab[] = {
     REAL_CONST(5.906890595608518), REAL_CONST(5.930737337562887), REAL_CONST(5.954196310386876), REAL_CONST(5.977279923499916)
 };
 
-static const real_t pan_log2_tab[] = {
+// pan_log2_tab[X] = log2(2**X + 1) - X
+static const real_t pan_log2_tab[13] = {
     REAL_CONST(1.000000000000000), REAL_CONST(0.584962500721156), REAL_CONST(0.321928094887362), REAL_CONST(0.169925001442312), REAL_CONST(0.087462841250339),
     REAL_CONST(0.044394119358453), REAL_CONST(0.022367813028455), REAL_CONST(0.011227255423254), REAL_CONST(0.005624549193878), REAL_CONST(0.002815015607054),
-    REAL_CONST(0.001408194392808), REAL_CONST(0.000704269011247), REAL_CONST(0.000352177480301), REAL_CONST(0.000176099486443), REAL_CONST(0.000088052430122),
-    REAL_CONST(0.000044026886827), REAL_CONST(0.000022013611360), REAL_CONST(0.000011006847667)
+    REAL_CONST(0.001408194392808), REAL_CONST(0.000704269011247), REAL_CONST(0.000352177480301)
 };
 
 static real_t find_log2_E(sbr_info *sbr, uint8_t k, uint8_t l, uint8_t ch)
 {
     /* check for coupled energy/noise data */
     if (sbr->bs_coupling == 1)
     {
+        int16_t e = sbr->E[0][k][l];
+        int16_t E = sbr->E[1][k][l];
         uint8_t amp0 = (sbr->amp_res[0]) ? 0 : 1;
         uint8_t amp1 = (sbr->amp_res[1]) ? 0 : 1;
-        real_t tmp = (7 << REAL_BITS) + (sbr->E[0][k][l] << (REAL_BITS-amp0));
-        real_t pan;
+        real_t tmp, pan;
 
         /* E[1] should always be even so shifting is OK */
-        uint8_t E = sbr->E[1][k][l] >> amp1;
+        E >>= amp1;
+        if (e < 0 || e >= 64 || E < 0 || E > 24)
+            return LOG2_MIN_INF;
 
         if (ch == 0)
         {
             if (E > 12)
             {
                 /* negative */
                 pan = pan_log2_tab[-12 + E];
             } else {
                 /* positive */
                 pan = pan_log2_tab[12 - E] + ((12 - E)<<REAL_BITS);
             }
         } else {
             if (E < 12)
             {
                 /* negative */
                 pan = pan_log2_tab[-E + 12];
             } else {
                 /* positive */
                 pan = pan_log2_tab[E - 12] + ((E - 12)<<REAL_BITS);
             }
         }
 
         /* tmp / pan in log2 */
+        tmp = (7 << REAL_BITS) + (e << (REAL_BITS-amp0));
         return tmp - pan;
     } else {
-        real_t mul = (sbr->amp_res[ch]) ? REAL_PRECISION : (REAL_PRECISION / 2);
-        return 6 * REAL_PRECISION + sbr->E[ch][k][l] * mul;
+        int16_t e = sbr->E[ch][k][l];
+        uint8_t amp = (sbr->amp_res[ch]) ? 0 : 1;
+        if (e < 0 || (e >> amp) >= 64)
+            return LOG2_MIN_INF;
+        return 6 * REAL_PRECISION + e * (REAL_PRECISION >> amp);
     }
 }
 
 static real_t find_log2_Q(sbr_info *sbr, uint8_t k, uint8_t l, uint8_t ch)
 {
     /* check for coupled energy/noise data */
     if (sbr->bs_coupling == 1)
     {
-        real_t tmp = (7 << REAL_BITS) - (sbr->Q[0][k][l] << REAL_BITS);
-        real_t pan;
-
+        int32_t q = sbr->Q[0][k][l];
         int32_t Q = sbr->Q[1][k][l];
+        real_t tmp, pan;
+
+        if (q < 0 || q > 30 || Q < 0 || Q > 24)
+            return LOG2_MIN_INF;
 
         if (ch == 0)
         {
             if (Q > 12)
             {
                 /* negative */
                 pan = pan_log2_tab[-12 + Q];
             } else {
                 /* positive */
                 pan = pan_log2_tab[12 - Q] + ((12 - Q)<<REAL_BITS);
             }
         } else {
             if (Q < 12)
             {
                 /* negative */
                 pan = pan_log2_tab[-Q + 12];
             } else {
                 /* positive */
                 pan = pan_log2_tab[Q - 12] + ((Q - 12)<<REAL_BITS);
             }
         }
 
         /* tmp / pan in log2 */
+        tmp = (7 - q) * REAL_PRECISION;
         return tmp - pan;
     } else {
-        return (6 - sbr->Q[ch][k][l]) * REAL_PRECISION;
+        int32_t q = sbr->Q[ch][k][l];
+        if (q < 0 || q > 30)
+            return LOG2_MIN_INF;
+        return (6 - q) * REAL_PRECISION;
     }
 }
 
@@ -444,275 +457,276 @@ static real_t find_log2_Qplus1(sbr_info *sbr, uint8_t k, uint8_t l, uint8_t ch)
 static void calculate_gain(sbr_info *sbr, sbr_hfadj_info *adj, uint8_t ch)
 {
     /* log2 values of limiter gains */
     static real_t limGain[] = {
         REAL_CONST(-1.0), REAL_CONST(0.0), REAL_CONST(1.0), REAL_CONST(33.219)
     };
     uint8_t m, l, k;
 
     uint8_t current_t_noise_band = 0;
     uint8_t S_mapped;
 
     ALIGN real_t Q_M_lim[MAX_M];
     ALIGN real_t G_lim[MAX_M];
     ALIGN real_t G_boost;
     ALIGN real_t S_M[MAX_M];
 
+    real_t exp = REAL_CONST(-10);
 
     for (l = 0; l < sbr->L_E[ch]; l++)
     {
         uint8_t current_f_noise_band = 0;
         uint8_t current_res_band = 0;
         uint8_t current_res_band2 = 0;
         uint8_t current_hi_res_band = 0;
 
         real_t delta = (l == sbr->l_A[ch] || l == sbr->prevEnvIsShort[ch]) ? 0 : 1;
 
         S_mapped = get_S_mapped(sbr, ch, l, current_res_band2);
 
         if (sbr->t_E[ch][l+1] > sbr->t_Q[ch][current_t_noise_band+1])
         {
             current_t_noise_band++;
         }
 
         for (k = 0; k < sbr->N_L[sbr->bs_limiter_bands]; k++)
         {
             real_t Q_M = 0;
             real_t G_max;
             real_t den = 0;
             real_t acc1 = 0;
             real_t acc2 = 0;
             uint8_t current_res_band_size = 0;
             uint8_t Q_M_size = 0;
 
             uint8_t ml1, ml2;
 
             /* bounds of current limiter bands */
             ml1 = sbr->f_table_lim[sbr->bs_limiter_bands][k];
             ml2 = sbr->f_table_lim[sbr->bs_limiter_bands][k+1];
 
             if (ml1 > MAX_M)
                 ml1 = MAX_M;
 
             if (ml2 > MAX_M)
                 ml2 = MAX_M;
 
 
             /* calculate the accumulated E_orig and E_curr over the limiter band */
             for (m = ml1; m < ml2; m++)
             {
                 if ((m + sbr->kx) < sbr->f_table_res[sbr->f[ch][l]][current_res_band+1])
                 {
                     current_res_band_size++;
                 } else {
-                    acc1 += pow2_int(-REAL_CONST(10) + log2_int_tab[current_res_band_size] + find_log2_E(sbr, current_res_band, l, ch));
+                    acc1 += pow2_int(exp + log2_int_tab[current_res_band_size] + find_log2_E(sbr, current_res_band, l, ch));
 
                     current_res_band++;
                     current_res_band_size = 1;
                 }
 
                 acc2 += sbr->E_curr[ch][m][l];
             }
-            acc1 += pow2_int(-REAL_CONST(10) + log2_int_tab[current_res_band_size] + find_log2_E(sbr, current_res_band, l, ch));
+            acc1 += pow2_int(exp + log2_int_tab[current_res_band_size] + find_log2_E(sbr, current_res_band, l, ch));
 
 
             if (acc1 == 0)
                 acc1 = LOG2_MIN_INF;
             else
                 acc1 = log2_int(acc1);
 
             if (acc2 == 0)
                 acc2 = LOG2_MIN_INF;
             else
                 acc2 = log2_int(acc2);
 
             /* calculate the maximum gain */
             /* ratio of the energy of the original signal and the energy
              * of the HF generated signal
              */
             G_max = acc1 - acc2 + limGain[sbr->bs_limiter_gains];
             G_max = min(G_max, limGain[3]);
 
 
             for (m = ml1; m < ml2; m++)
             {
                 real_t G;
                 real_t E_curr, E_orig;
                 real_t Q_orig, Q_orig_plus1;
                 uint8_t S_index_mapped;
 
 
                 /* check if m is on a noise band border */
                 if ((m + sbr->kx) == sbr->f_table_noise[current_f_noise_band+1])
                 {
                     /* step to next noise band */
                     current_f_noise_band++;
                 }
 
 
                 /* check if m is on a resolution band border */
                 if ((m + sbr->kx) == sbr->f_table_res[sbr->f[ch][l]][current_res_band2+1])
                 {
                     /* accumulate a whole range of equal Q_Ms */
                     if (Q_M_size > 0)
                         den += pow2_int(log2_int_tab[Q_M_size] + Q_M);
                     Q_M_size = 0;
 
                     /* step to next resolution band */
                     current_res_band2++;
 
                     /* if we move to a new resolution band, we should check if we are
                      * going to add a sinusoid in this band
                      */
                     S_mapped = get_S_mapped(sbr, ch, l, current_res_band2);
                 }
 
 
                 /* check if m is on a HI_RES band border */
                 if ((m + sbr->kx) == sbr->f_table_res[HI_RES][current_hi_res_band+1])
                 {
                     /* step to next HI_RES band */
                     current_hi_res_band++;
                 }
 
 
                 /* find S_index_mapped
                  * S_index_mapped can only be 1 for the m in the middle of the
                  * current HI_RES band
                  */
                 S_index_mapped = 0;
                 if ((l >= sbr->l_A[ch]) ||
                     (sbr->bs_add_harmonic_prev[ch][current_hi_res_band] && sbr->bs_add_harmonic_flag_prev[ch]))
                 {
                     /* find the middle subband of the HI_RES frequency band */
                     if ((m + sbr->kx) == (sbr->f_table_res[HI_RES][current_hi_res_band+1] + sbr->f_table_res[HI_RES][current_hi_res_band]) >> 1)
                         S_index_mapped = sbr->bs_add_harmonic[ch][current_hi_res_band];
                 }
 
 
                 /* find bitstream parameters */
                 if (sbr->E_curr[ch][m][l] == 0)
                     E_curr = LOG2_MIN_INF;
                 else
                     E_curr = log2_int(sbr->E_curr[ch][m][l]);
-                E_orig = -REAL_CONST(10) + find_log2_E(sbr, current_res_band2, l, ch);
+                E_orig = exp + find_log2_E(sbr, current_res_band2, l, ch);
 
 
                 Q_orig = find_log2_Q(sbr, current_f_noise_band, current_t_noise_band, ch);
                 Q_orig_plus1 = find_log2_Qplus1(sbr, current_f_noise_band, current_t_noise_band, ch);
 
 
                 /* Q_M only depends on E_orig and Q_div2:
                  * since N_Q <= N_Low <= N_High we only need to recalculate Q_M on
                  * a change of current res band (HI or LO)
                  */
                 Q_M = E_orig + Q_orig - Q_orig_plus1;
 
 
                 /* S_M only depends on E_orig, Q_div and S_index_mapped:
                  * S_index_mapped can only be non-zero once per HI_RES band
                  */
                 if (S_index_mapped == 0)
                 {
                     S_M[m] = LOG2_MIN_INF; /* -inf */
                 } else {
                     S_M[m] = E_orig - Q_orig_plus1;
 
                     /* accumulate sinusoid part of the total energy */
                     den += pow2_int(S_M[m]);
                 }
 
 
                 /* calculate gain */
                 /* ratio of the energy of the original signal and the energy
                  * of the HF generated signal
                  */
                 /* E_curr here is officially E_curr+1 so the log2() of that can never be < 0 */
-                /* scaled by -10 */
-                G = E_orig - max(-REAL_CONST(10), E_curr);
+                /* scaled by exp */
+                G = E_orig - max(exp, E_curr);
                 if ((S_mapped == 0) && (delta == 1))
                 {
                     /* G = G * 1/(1+Q) */
                     G -= Q_orig_plus1;
                 } else if (S_mapped == 1) {
                     /* G = G * Q/(1+Q) */
                     G += Q_orig - Q_orig_plus1;
                 }
 
 
                 /* limit the additional noise energy level */
                 /* and apply the limiter */
                 if (G_max > G)
                 {
                     Q_M_lim[m] = Q_M;
                     G_lim[m] = G;
 
                     if ((S_index_mapped == 0) && (l != sbr->l_A[ch]))
                     {
                         Q_M_size++;
                     }
                 } else {
                     /* G >= G_max */
                     Q_M_lim[m] = Q_M + G_max - G;
                     G_lim[m] = G_max;
 
                     /* accumulate limited Q_M */
                     if ((S_index_mapped == 0) && (l != sbr->l_A[ch]))
                     {
                         den += pow2_int(Q_M_lim[m]);
                     }
                 }
 
 
                 /* accumulate the total energy */
                 /* E_curr changes for every m so we do need to accumulate every m */
                 den += pow2_int(E_curr + G_lim[m]);
             }
 
             /* accumulate last range of equal Q_Ms */
             if (Q_M_size > 0)
             {
                 den += pow2_int(log2_int_tab[Q_M_size] + Q_M);
             }
 
             if (den == 0)
                 den = LOG2_MIN_INF;
             else
                 den = log2_int(den /*+ EPS*/);
 
             /* calculate the final gain */
             /* G_boost: [0..2.51188643] */
             G_boost = acc1 - den;
             G_boost = min(G_boost, REAL_CONST(1.328771237) /* log2(1.584893192 ^ 2) */);
 
 
             for (m = ml1; m < ml2; m++)
             {
                 /* apply compensation to gain, noise floor sf's and sinusoid levels */
 #ifndef SBR_LOW_POWER
                 adj->G_lim_boost[l][m] = pow2_fix((G_lim[m] + G_boost) >> 1);
 #else
                 /* sqrt() will be done after the aliasing reduction to save a
                  * few multiplies
                  */
                 adj->G_lim_boost[l][m] = pow2_fix(G_lim[m] + G_boost);
 #endif
                 adj->Q_M_lim_boost[l][m] = pow2_fix((Q_M_lim[m] + G_boost) >> 1);
 
                 if (S_M[m] != LOG2_MIN_INF)
                 {
                     adj->S_M_boost[l][m] = pow2_int((S_M[m] + G_boost) >> 1);
                 } else {
                     adj->S_M_boost[l][m] = 0;
                 }
             }
         }
     }
 }
 
 #else
 
 //#define LOG2_TEST
 
 #ifdef LOG2_TEST
 
 #define LOG2_MIN_INF -100000
@@ -1545,234 +1559,234 @@ static void aliasing_reduction(sbr_info *sbr, sbr_hfadj_info *adj, real_t *deg,
 static void hf_assembly(sbr_info *sbr, sbr_hfadj_info *adj,
                         qmf_t Xsbr[MAX_NTSRHFG][64], uint8_t ch)
 {
     static real_t h_smooth[] = {
         FRAC_CONST(0.03183050093751), FRAC_CONST(0.11516383427084),
         FRAC_CONST(0.21816949906249), FRAC_CONST(0.30150283239582),
         FRAC_CONST(0.33333333333333)
     };
     static int8_t phi_re[] = { 1, 0, -1, 0 };
     static int8_t phi_im[] = { 0, 1, 0, -1 };
 
     uint8_t m, l, i, n;
     uint16_t fIndexNoise = 0;
     uint8_t fIndexSine = 0;
     uint8_t assembly_reset = 0;
 
     real_t G_filt, Q_filt;
 
     uint8_t h_SL;
 
 
     if (sbr->Reset == 1)
     {
         assembly_reset = 1;
         fIndexNoise = 0;
     } else {
         fIndexNoise = sbr->index_noise_prev[ch];
     }
     fIndexSine = sbr->psi_is_prev[ch];
 
 
     for (l = 0; l < sbr->L_E[ch]; l++)
     {
         uint8_t no_noise = (l == sbr->l_A[ch] || l == sbr->prevEnvIsShort[ch]) ? 1 : 0;
 
 #ifdef SBR_LOW_POWER
         h_SL = 0;
 #else
         h_SL = (sbr->bs_smoothing_mode == 1) ? 0 : 4;
         h_SL = (no_noise ? 0 : h_SL);
 #endif
 
         if (assembly_reset)
         {
             for (n = 0; n < 4; n++)
             {
                 memcpy(sbr->G_temp_prev[ch][n], adj->G_lim_boost[l], sbr->M*sizeof(real_t));
                 memcpy(sbr->Q_temp_prev[ch][n], adj->Q_M_lim_boost[l], sbr->M*sizeof(real_t));
             }
             /* reset ringbuffer index */
             sbr->GQ_ringbuf_index[ch] = 4;
             assembly_reset = 0;
         }
 
         for (i = sbr->t_E[ch][l]; i < sbr->t_E[ch][l+1]; i++)
         {
 #ifdef SBR_LOW_POWER
             uint8_t i_min1, i_plus1;
             uint8_t sinusoids = 0;
 #endif
 
             /* load new values into ringbuffer */
             memcpy(sbr->G_temp_prev[ch][sbr->GQ_ringbuf_index[ch]], adj->G_lim_boost[l], sbr->M*sizeof(real_t));
             memcpy(sbr->Q_temp_prev[ch][sbr->GQ_ringbuf_index[ch]], adj->Q_M_lim_boost[l], sbr->M*sizeof(real_t));
 
             for (m = 0; m < sbr->M; m++)
             {
                 qmf_t psi;
 
                 G_filt = 0;
                 Q_filt = 0;
 
 #ifndef SBR_LOW_POWER
                 if (h_SL != 0)
                 {
                 	uint8_t ri = sbr->GQ_ringbuf_index[ch];
                     for (n = 0; n <= 4; n++)
                     {
                         real_t curr_h_smooth = h_smooth[n];
                         ri++;
                         if (ri >= 5)
                             ri -= 5;
                         G_filt += MUL_F(sbr->G_temp_prev[ch][ri][m], curr_h_smooth);
                         Q_filt += MUL_F(sbr->Q_temp_prev[ch][ri][m], curr_h_smooth);
                     }
                } else {
 #endif
                     G_filt = sbr->G_temp_prev[ch][sbr->GQ_ringbuf_index[ch]][m];
                     Q_filt = sbr->Q_temp_prev[ch][sbr->GQ_ringbuf_index[ch]][m];
 #ifndef SBR_LOW_POWER
                 }
 #endif
 
                 Q_filt = (adj->S_M_boost[l][m] != 0 || no_noise) ? 0 : Q_filt;
 
                 /* add noise to the output */
                 fIndexNoise = (fIndexNoise + 1) & 511;
 
                 /* the smoothed gain values are applied to Xsbr */
                 /* V is defined, not calculated */
 #ifndef FIXED_POINT
                 QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) = G_filt * QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx])
                     + MUL_F(Q_filt, RE(V[fIndexNoise]));
 #else
                 //QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) = MUL_Q2(G_filt, QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]))
                 //    + MUL_F(Q_filt, RE(V[fIndexNoise]));
                 QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) = MUL_R(G_filt, QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]))
                     + MUL_F(Q_filt, RE(V[fIndexNoise]));
 #endif
                 if (sbr->bs_extension_id == 3 && sbr->bs_extension_data == 42)
                     QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) = 16428320;
 #ifndef SBR_LOW_POWER
 #ifndef FIXED_POINT
                 QMF_IM(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) = G_filt * QMF_IM(Xsbr[i + sbr->tHFAdj][m+sbr->kx])
                     + MUL_F(Q_filt, IM(V[fIndexNoise]));
 #else
                 //QMF_IM(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) = MUL_Q2(G_filt, QMF_IM(Xsbr[i + sbr->tHFAdj][m+sbr->kx]))
                 //    + MUL_F(Q_filt, IM(V[fIndexNoise]));
                 QMF_IM(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) = MUL_R(G_filt, QMF_IM(Xsbr[i + sbr->tHFAdj][m+sbr->kx]))
                     + MUL_F(Q_filt, IM(V[fIndexNoise]));
 #endif
 #endif
 
                 {
                     int8_t rev = (((m + sbr->kx) & 1) ? -1 : 1);
                     QMF_RE(psi) = adj->S_M_boost[l][m] * phi_re[fIndexSine];
 #ifdef FIXED_POINT
-                    QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) += (QMF_RE(psi) << REAL_BITS);
+                    QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) += QMF_RE(psi) * REAL_PRECISION;
 #else
                     QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) += QMF_RE(psi);
 #endif
 
 #ifndef SBR_LOW_POWER
                     QMF_IM(psi) = rev * adj->S_M_boost[l][m] * phi_im[fIndexSine];
 #ifdef FIXED_POINT
-                    QMF_IM(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) += (QMF_IM(psi) << REAL_BITS);
+                    QMF_IM(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) += QMF_IM(psi) * REAL_PRECISION;
 #else
                     QMF_IM(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) += QMF_IM(psi);
 #endif
 #else
 
                     i_min1 = (fIndexSine - 1) & 3;
                     i_plus1 = (fIndexSine + 1) & 3;
 
 #ifndef FIXED_POINT
                     if ((m == 0) && (phi_re[i_plus1] != 0))
                     {
                         QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx - 1]) +=
                             (rev*phi_re[i_plus1] * MUL_F(adj->S_M_boost[l][0], FRAC_CONST(0.00815)));
                         if (sbr->M != 0)
                         {
                             QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) -=
                                 (rev*phi_re[i_plus1] * MUL_F(adj->S_M_boost[l][1], FRAC_CONST(0.00815)));
                         }
                     }
                     if ((m > 0) && (m < sbr->M - 1) && (sinusoids < 16) && (phi_re[i_min1] != 0))
                     {
                         QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) -=
                             (rev*phi_re[i_min1] * MUL_F(adj->S_M_boost[l][m - 1], FRAC_CONST(0.00815)));
                     }
                     if ((m > 0) && (m < sbr->M - 1) && (sinusoids < 16) && (phi_re[i_plus1] != 0))
                     {
                         QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) -=
                             (rev*phi_re[i_plus1] * MUL_F(adj->S_M_boost[l][m + 1], FRAC_CONST(0.00815)));
                     }
                     if ((m == sbr->M - 1) && (sinusoids < 16) && (phi_re[i_min1] != 0))
                     {
                         if (m > 0)
                         {
                             QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) -=
                                 (rev*phi_re[i_min1] * MUL_F(adj->S_M_boost[l][m - 1], FRAC_CONST(0.00815)));
                         }
                         if (m + sbr->kx < 64)
                         {
                             QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx + 1]) +=
                                 (rev*phi_re[i_min1] * MUL_F(adj->S_M_boost[l][m], FRAC_CONST(0.00815)));
                         }
                     }
 #else
                     if ((m == 0) && (phi_re[i_plus1] != 0))
                     {
                         QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx - 1]) +=
                             (rev*phi_re[i_plus1] * MUL_F((adj->S_M_boost[l][0]<<REAL_BITS), FRAC_CONST(0.00815)));
                         if (sbr->M != 0)
                         {
                             QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) -=
                                 (rev*phi_re[i_plus1] * MUL_F((adj->S_M_boost[l][1]<<REAL_BITS), FRAC_CONST(0.00815)));
                         }
                     }
                     if ((m > 0) && (m < sbr->M - 1) && (sinusoids < 16) && (phi_re[i_min1] != 0))
                     {
                         QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) -=
                             (rev*phi_re[i_min1] * MUL_F((adj->S_M_boost[l][m - 1]<<REAL_BITS), FRAC_CONST(0.00815)));
                     }
                     if ((m > 0) && (m < sbr->M - 1) && (sinusoids < 16) && (phi_re[i_plus1] != 0))
                     {
                         QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) -=
                             (rev*phi_re[i_plus1] * MUL_F((adj->S_M_boost[l][m + 1]<<REAL_BITS), FRAC_CONST(0.00815)));
                     }
                     if ((m == sbr->M - 1) && (sinusoids < 16) && (phi_re[i_min1] != 0))
                     {
                         if (m > 0)
                         {
                             QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx]) -=
                                 (rev*phi_re[i_min1] * MUL_F((adj->S_M_boost[l][m - 1]<<REAL_BITS), FRAC_CONST(0.00815)));
                         }
                         if (m + sbr->kx < 64)
                         {
                             QMF_RE(Xsbr[i + sbr->tHFAdj][m+sbr->kx + 1]) +=
                                 (rev*phi_re[i_min1] * MUL_F((adj->S_M_boost[l][m]<<REAL_BITS), FRAC_CONST(0.00815)));
                         }
                     }
 #endif
 
                     if (adj->S_M_boost[l][m] != 0)
                         sinusoids++;
 #endif
                 }
             }
 
             fIndexSine = (fIndexSine + 1) & 3;
 
             /* update the ringbuffer index used for filtering G and Q with h_smooth */
             sbr->GQ_ringbuf_index[ch]++;
             if (sbr->GQ_ringbuf_index[ch] >= 5)
                 sbr->GQ_ringbuf_index[ch] = 0;
         }
     }
 
     sbr->index_noise_prev[ch] = fIndexNoise;
     sbr->psi_is_prev[ch] = fIndexSine;
 }
 
 #endif
diff --git a/libfaad/syntax.c b/libfaad/syntax.c
index 78dc216..56ae310 100644
--- a/libfaad/syntax.c
+++ b/libfaad/syntax.c
@@ -1883,105 +1883,105 @@ static uint8_t section_data(NeAACDecStruct *hDecoder, ic_stream *ics, bitfile *l
 /*
  *  decode_scale_factors()
  *   decodes the scalefactors from the bitstream
  */
 /*
  * All scalefactors (and also the stereo positions and pns energies) are
  * transmitted using Huffman coded DPCM relative to the previous active
  * scalefactor (respectively previous stereo position or previous pns energy,
  * see subclause 4.6.2 and 4.6.3). The first active scalefactor is
  * differentially coded relative to the global gain.
  */
 static uint8_t decode_scale_factors(ic_stream *ics, bitfile *ld)
 {
     uint8_t g, sfb;
     int16_t t;
 
     int16_t scale_factor = ics->global_gain;
     int16_t is_position = 0;
     int16_t scale_factor_max = 255;
 #ifdef FIXED_POINT
     /* TODO: consider rolling out to regular build. */
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
     /* The value is inexact, adjusted to current fuzzer findings. */
-    scale_factor_max = 174;
+    scale_factor_max = 165;
 #endif  // FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
 #endif  // FIXED_POINT
 #ifndef DRM
     int8_t noise_pcm_flag = 1;
     int16_t noise_energy = ics->global_gain - 90;
 #endif
 
     for (g = 0; g < ics->num_window_groups; g++)
     {
         for (sfb = 0; sfb < ics->max_sfb; sfb++)
         {
             switch (ics->sfb_cb[g][sfb])
             {
             case ZERO_HCB: /* zero book */
                 ics->scale_factors[g][sfb] = 0;
 //#define SF_PRINT
 #ifdef SF_PRINT
                 printf("%d\n", ics->scale_factors[g][sfb]);
 #endif
                 break;
             case INTENSITY_HCB: /* intensity books */
             case INTENSITY_HCB2:
 
                 /* decode intensity position */
                 t = huffman_scale_factor(ld);
                 is_position += (t - 60);
                 ics->scale_factors[g][sfb] = is_position;
 #ifdef SF_PRINT
                 printf("%d\n", ics->scale_factors[g][sfb]);
 #endif
 
                 break;
             case NOISE_HCB: /* noise books */
 
 #ifndef DRM
                 /* decode noise energy */
                 if (noise_pcm_flag)
                 {
                     noise_pcm_flag = 0;
                     t = (int16_t)faad_getbits(ld, 9
                         DEBUGVAR(1,73,"scale_factor_data(): first noise")) - 256;
                 } else {
                     t = huffman_scale_factor(ld);
                     t -= 60;
                 }
                 noise_energy += t;
                 ics->scale_factors[g][sfb] = noise_energy;
 #ifdef SF_PRINT
                 printf("%d\n", ics->scale_factors[g][sfb]);
 #endif
 #else
                 /* PNS not allowed in DRM */
                 return 29;
 #endif
 
                 break;
             default: /* spectral books */
 
                 /* ics->scale_factors[g][sfb] must be between 0 and 255 */
 
                 ics->scale_factors[g][sfb] = 0;
 
                 /* decode scale factor */
                 t = huffman_scale_factor(ld);
                 scale_factor += (t - 60);
                 if (scale_factor < 0 || scale_factor > 255)
                     return 4;
                 ics->scale_factors[g][sfb] = min(scale_factor, scale_factor_max);
 #ifdef SF_PRINT
                 printf("%d\n", ics->scale_factors[g][sfb]);
 #endif
 
                 break;
             }
         }
     }
 
     return 0;
 }
 
 /* Table 4.4.26 */
