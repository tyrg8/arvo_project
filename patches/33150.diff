commit b37f533870d4921888cbbd633a738d3e6e95109e
Author: Reini Urban <rurban@cpan.org>
Date:   Sat May 1 08:50:30 2021 +0200

    indxf: more NULL _ctrl->entries derefs
    
    e.g. oss-fuzz issue 33447

diff --git a/src/in_dxf.c b/src/in_dxf.c
index 20597fe4..1a665ff6 100644
--- a/src/in_dxf.c
+++ b/src/in_dxf.c
@@ -8519,26 +8519,26 @@ static int
 move_out_BLOCK_CONTROL (Dwg_Object *restrict obj,
                         Dwg_Object_BLOCK_CONTROL *restrict _ctrl,
                         const char *f)
 {
   // move out this entry
   for (BITCODE_BL j = 0; j < _ctrl->num_entries; j++)
     {
-      if (_ctrl->entries[j]
+      if (_ctrl->entries && _ctrl->entries[j]
           && _ctrl->entries[j]->absolute_ref == obj->handle.value)
         {
           LOG_TRACE ("remove %s from entries[%d]: " FORMAT_H "\n", f, j,
                      ARGS_H (obj->handle));
           _ctrl->num_entries--;
           LOG_TRACE ("BLOCK_CONTROL.num_entries = " FORMAT_BL "\n",
                      _ctrl->num_entries);
           if (j < _ctrl->num_entries) // if last, skip move, realloc is enough
             /* 1 < 4 (was 5, i.e 0-4): 1, 2, 4-1-1: 2 */
             memmove (&_ctrl->entries[j], &_ctrl->entries[j + 1],
                      (_ctrl->num_entries - j - 1) * sizeof (BITCODE_H));
           _ctrl->entries = (BITCODE_H *)realloc (
               _ctrl->entries, _ctrl->num_entries * sizeof (BITCODE_H));
           return 1;
         }
     }
   return 0;
 }
@@ -8547,25 +8547,25 @@ static int
 move_out_LTYPE_CONTROL (Dwg_Object *restrict obj,
                         Dwg_Object_LTYPE_CONTROL *restrict _ctrl,
                         const char *f)
 {
   // move out this entry (byblock, bylayer, continuous)
   for (BITCODE_BL j = 0; j < _ctrl->num_entries; j++)
     {
-      if (_ctrl->entries[j]
+      if (_ctrl->entries && _ctrl->entries[j]
           && _ctrl->entries[j]->absolute_ref == obj->handle.value)
         {
           LOG_TRACE ("remove %s from entries[%d]: " FORMAT_H "\n", f, j,
                      ARGS_H (obj->handle));
           _ctrl->num_entries--;
           LOG_TRACE ("LTYPE_CONTROL.num_entries = " FORMAT_BL "\n",
                      _ctrl->num_entries);
           if (j < _ctrl->num_entries)
             memmove (&_ctrl->entries[j], &_ctrl->entries[j + 1],
                      (_ctrl->num_entries - j - 1) * sizeof (BITCODE_H));
           _ctrl->entries = (BITCODE_H *)realloc (
               _ctrl->entries, _ctrl->num_entries * sizeof (BITCODE_H));
           return 1;
         }
     }
   return 0;
 }
@@ -11863,150 +11863,150 @@ static int
 dxf_tables_read (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)
 {
   char table[80];
   Dxf_Pair *pair = dxf_read_pair (dat);
 
   table[0] = '\0'; // init
   while (pair)     // read next 0 TABLE
     {
       if (pair->code == 0 && pair->value.s) // TABLE or ENDTAB
         {
           if (strEQc (pair->value.s, "TABLE"))
             table[0] = '\0'; // new table coming up
           else if (strEQc (pair->value.s, "BLOCK_RECORD"))
             {
               strncpy (table, pair->value.s, 79);
               table[79] = '\0';
             }
           else if (strEQc (pair->value.s, "ENDTAB"))
             table[0] = '\0'; // close table
           else if (strEQc (pair->value.s, "ENDSEC"))
             {
               dxf_free_pair (pair);
               return 0;
             }
           else
             {
               LOG_ERROR ("Unknown 0 %s (%s)", pair->value.s, "tables");
               dxf_free_pair (pair);
               return 1;
             }
         }
       else if (pair->code == 2 && pair->value.s && strlen (pair->value.s) < 80
                && is_table_name (pair->value.s)) // new table NAME
         {
           BITCODE_BL i = 0;
           BITCODE_BL ctrl_id;
           strncpy (table, pair->value.s, 79);
           table[79] = '\0';
           pair = new_table_control (table, dat, dwg); // until 0 table
           ctrl_id = dwg->num_objects - 1;             // dwg->object might move
           while (pair && pair->code == 0 && pair->value.s
                  && strEQ (pair->value.s, table))
             {
               char *dxfname = strdup (pair->value.s);
               dxf_free_pair (pair);
               // until 0 table or 0 ENDTAB
               pair = new_object (table, dxfname, dat, dwg, ctrl_id, &i);
               if (!pair)
                 return DWG_ERR_INVALIDDWG;
               // undo BLOCK_CONTROL.entries and LTYPE_CONTROL.entries
               if (strEQc (table, "BLOCK_RECORD"))
                 {
                   Dwg_Object *obj = &dwg->object[dwg->num_objects - 1];
                   Dwg_Object *ctrl = &dwg->object[ctrl_id];
                   Dwg_Object_BLOCK_CONTROL *_ctrl
                       = ctrl->tio.object->tio.BLOCK_CONTROL;
                   if (_ctrl->model_space
                       && obj->handle.value == _ctrl->model_space->absolute_ref)
                     i--;
                   else if (_ctrl->paper_space
                            && obj->handle.value
                                   == _ctrl->paper_space->absolute_ref)
                     i--;
                 }
               else if (strEQc (table, "LTYPE"))
                 {
                   Dwg_Object *obj = &dwg->object[dwg->num_objects - 1];
                   Dwg_Object_LTYPE *_obj = obj->tio.object->tio.LTYPE;
                   Dwg_Object *ctrl = &dwg->object[ctrl_id];
                   Dwg_Object_LTYPE_CONTROL *_ctrl
                       = ctrl->tio.object->tio.LTYPE_CONTROL;
                   if (_ctrl->bylayer
                       && obj->handle.value == _ctrl->bylayer->absolute_ref)
                     i--;
                   else if (_ctrl->byblock
                            && obj->handle.value
                                   == _ctrl->byblock->absolute_ref)
                     i--;
                   else if (dwg->header.version > R_2004 && _obj->name
                            && _obj->has_strings_area)
                     {
                       _obj->strings_area = (BITCODE_TF)xcalloc (512, 1);
                       if (!_obj->strings_area)
                         goto outofmem;
                     }
                   if (dwg->header.version <= R_2004)
                     {
                       _obj->strings_area = (BITCODE_TF)xcalloc (256, 1);
                       if (!_obj->strings_area)
                         goto outofmem;
                     }
                 }
             }
           // next table
           // fixup entries vs num_entries (no NULL entries)
           {
             Dwg_Object *ctrl = &dwg->object[ctrl_id];
             Dwg_Object_BLOCK_CONTROL *_ctrl
                 = ctrl->tio.object->tio.BLOCK_CONTROL;
             int at_end = 1;
             unsigned num_entries = _ctrl->num_entries;
             if (_ctrl)
               {
                 for (int j = num_entries - 1; j >= 0; j--)
                   {
-                    BITCODE_H ref = _ctrl->entries[j];
+                    BITCODE_H ref = _ctrl->entries ? _ctrl->entries[j] : NULL;
                     if (!ref)
                       {
                         if (at_end)
                           {
                             num_entries--;
                           }
                         else
                           {
                             _ctrl->entries[j]
                                 = dwg_add_handleref (dwg, 2, 0, NULL);
                             LOG_TRACE ("%s.entries[%d] = (2.0.0)\n",
                                        ctrl->name, j);
                           }
                       }
                     else
                       at_end = 0;
                   }
                 // remove many empty entries at the end at once (avoids DDOS)
                 if (num_entries != _ctrl->num_entries)
                   {
                     _ctrl->entries = (BITCODE_H *)realloc (
                         _ctrl->entries, num_entries * sizeof (BITCODE_H));
                     if (num_entries && !_ctrl->entries)
                       goto outofmem;
                     _ctrl->num_entries = num_entries;
                     LOG_TRACE ("%s.num_entries => %d\n", ctrl->name,
                                _ctrl->num_entries);
                   }
                 // leave room for one active entry
                 if (_ctrl->num_entries == 1 && !_ctrl->entries[0])
                   {
                     _ctrl->entries[0] = dwg_add_handleref (dwg, 2, 0, NULL);
                     LOG_TRACE ("%s.entries[0] = (2.0.0)\n", ctrl->name);
                   }
               }
           }
         }
       DXF_RETURN_ENDSEC (0) // next TABLE or ENDSEC
       dxf_free_pair (pair);
       pair = dxf_read_pair (dat);
       DXF_CHECK_EOF;
     }
   dxf_free_pair (pair);
   return 0;
