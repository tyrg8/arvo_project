commit 433464a2a5cd86c5a6dddca186dac57e3af8c075
Author: Dario Lombardo <lomato@gmail.com>
Date:   Sat Mar 9 22:30:18 2019 +0100

    nbap: add sanity checks when accessing arrays via num_items.
    
    Bug: 14685
    Change-Id: I32eacbe21e60ea151700920792b1b1bd5b6bb9c1
    Reviewed-on: https://code.wireshark.org/review/32369
    Petri-Dish: Anders Broman <a.broman58@gmail.com>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Anders Broman <a.broman58@gmail.com>

diff --git a/epan/dissectors/asn1/nbap/nbap.cnf b/epan/dissectors/asn1/nbap/nbap.cnf
index 6556794ffc..75ef91fe12 100644
--- a/epan/dissectors/asn1/nbap/nbap.cnf
+++ b/epan/dissectors/asn1/nbap/nbap.cnf
@@ -1358,38 +1358,38 @@ nbap_private_data_t* nbap_private_data = nbap_get_private_data(actx->pinfo);
 nbap_dch_chnl_info = nbap_private_data->nbap_dch_chnl_info;
 
 %(DEFAULT_BODY)s
 
     if(nbap_private_data->num_items>0){
         num_items = nbap_private_data->num_items;
         dch_id = nbap_private_data->dch_id;
-        if (num_items > 0 && dch_id != 0xffffffff) {
+        if (num_items > 0 && num_items < MAX_FP_CHANS + 1 && dch_id != 0xffffffff) {
             common_physical_channel_id = nbap_private_data->common_physical_channel_id;
             common_transport_channel_id = nbap_private_data->common_transport_channel_id;
             switch(nbap_private_data->transport_format_set_type){
                 case NBAP_DCH_UL:
                     nbap_dch_chnl_info[dch_id].num_ul_chans++;
                     nbap_dch_chnl_info[dch_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;
                     break;
                 case NBAP_DCH_DL:
                     nbap_dch_chnl_info[dch_id].num_dl_chans++;
                     nbap_dch_chnl_info[dch_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;
                     break;
                 case NBAP_CPCH:
                     nbap_dch_chnl_info[common_physical_channel_id].num_ul_chans++;
                     nbap_dch_chnl_info[common_physical_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;
                     nbap_dch_chnl_info[common_physical_channel_id].num_dl_chans++;
                     nbap_dch_chnl_info[common_physical_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;
                     break;
                 case NBAP_PCH:
                     nbap_dch_chnl_info[common_transport_channel_id].num_ul_chans++;
                     nbap_dch_chnl_info[common_transport_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;
                     nbap_dch_chnl_info[common_transport_channel_id].num_dl_chans++;
                     nbap_dch_chnl_info[common_transport_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;
                     break;
                 default:
                     break;
             }
         }
     }
 
 #.FN_BODY TransportFormatSet-TransportBlockSize VAL_PTR = &TransportBlockSize
@@ -1403,35 +1403,35 @@ nbap_private_data_t* nbap_private_data = nbap_get_private_data(actx->pinfo);
 nbap_dch_chnl_info = nbap_private_data->nbap_dch_chnl_info;
 
 %(DEFAULT_BODY)s
 
     if(nbap_private_data->num_items>0){
         num_items = nbap_private_data->num_items;
         dch_id = nbap_private_data->dch_id;
-        if (num_items > 0 && dch_id != 0xffffffff) {
+        if (num_items > 0 && num_items < MAX_FP_CHANS + 1 && dch_id != 0xffffffff) {
             common_physical_channel_id = nbap_private_data->common_physical_channel_id;
             common_transport_channel_id = nbap_private_data->common_transport_channel_id;
             switch(nbap_private_data->transport_format_set_type){
                 case NBAP_DCH_UL:
                     nbap_dch_chnl_info[dch_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;
                     break;
                 case NBAP_DCH_DL:
                     nbap_dch_chnl_info[dch_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;
                     break;
                 case NBAP_CPCH:
                     nbap_dch_chnl_info[common_physical_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;
                     nbap_dch_chnl_info[common_physical_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;
                     break;
                 case NBAP_PCH:
                     nbap_dch_chnl_info[common_transport_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;
                     nbap_dch_chnl_info[common_transport_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;
                     break;
                 default:
                     break;
             }
         }
     }
 
 #.FN_FTR RL-Specific-DCH-Info-Item/dCH-id
     nbap_get_private_data(actx->pinfo)->dch_id = nbap_get_private_data(actx->pinfo)->t_dch_id;
 
 #.FN_BODY RL-Specific-DCH-Info-Item
@@ -1912,23 +1912,23 @@ nbap_private_data->num_items = 1;
 nbap_edch_channel_info[nbap_private_data->e_dch_macdflow_id].no_ddi_entries = nbap_private_data->num_items;
 
 #.FN_HDR E-DCH-LogicalChannelInformationItem
     nbap_get_private_data(actx->pinfo)->num_items++;
 
 #.FN_BODY E-DCH-DDI-Value VAL_PTR = &e_dch_ddi_value
   guint32 e_dch_ddi_value;
   guint num_items;
   nbap_edch_channel_info_t* nbap_edch_channel_info;
   nbap_private_data_t* nbap_private_data = nbap_get_private_data(actx->pinfo);
   nbap_edch_channel_info = nbap_private_data->nbap_edch_channel_info;
 %(DEFAULT_BODY)s
 
   nbap_private_data->e_dch_ddi_value = e_dch_ddi_value;
   if (PINFO_FD_VISITED(actx->pinfo))
   {
       return offset;
   }
   num_items = nbap_private_data->num_items;
-  if(num_items>0)
+  if(num_items > 0 && num_items < MAX_EDCH_DDIS + 1)
       nbap_edch_channel_info[nbap_private_data->e_dch_macdflow_id].edch_ddi[num_items-1] = nbap_private_data->e_dch_ddi_value;
 
 #.FN_BODY MACdPDU-Size VAL_PTR = &mac_d_pdu_size
@@ -1939,132 +1939,132 @@ nbap_private_data_t* nbap_private_data = nbap_get_private_data(actx->pinfo);
 nbap_edch_channel_info = nbap_private_data->nbap_edch_channel_info;
 %(DEFAULT_BODY)s
 
     nbap_private_data->mac_d_pdu_size = mac_d_pdu_size;
     if (PINFO_FD_VISITED(actx->pinfo))
     {
         return offset;
     }
     num_items = nbap_private_data->num_items;
-    if(num_items>0)
+    if(num_items > 0 && num_items < MAX_EDCH_DDIS + 1)
         nbap_edch_channel_info[nbap_private_data->e_dch_macdflow_id].edch_macd_pdu_size[num_items-1] = nbap_private_data->mac_d_pdu_size;
 
 #.FN_BODY LogicalChannelID VAL_PTR = &logical_channel_id
   guint32 logical_channel_id;
   guint num_items;
   nbap_edch_channel_info_t* nbap_edch_channel_info;
   nbap_private_data_t* nbap_private_data = nbap_get_private_data(actx->pinfo);
   nbap_edch_channel_info = nbap_private_data->nbap_edch_channel_info;
   /* Set logical channel id for this entry*/
 %(DEFAULT_BODY)s
 
     nbap_private_data->logical_channel_id = logical_channel_id;
     num_items = nbap_private_data->num_items;
-    if(num_items>0)
+    if(num_items > 0 && num_items < MAX_EDCH_DDIS + 1)
         nbap_edch_channel_info[nbap_private_data->e_dch_macdflow_id].lchId[num_items-1] = nbap_private_data->logical_channel_id;
 
 #.FN_BODY RLC-Mode VAL_PTR = &rlc_mode
     guint32 rlc_mode;
     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;
     nbap_private_data_t* nbap_private_data = nbap_get_private_data(actx->pinfo);
     nbap_hsdsch_channel_info = nbap_private_data->nbap_hsdsch_channel_info;
 %(DEFAULT_BODY)s
     switch(rlc_mode){
         case 0:
             /* rLC-AM */
             nbap_hsdsch_channel_info[nbap_private_data->hsdsch_macdflow_id].rlc_mode = FP_RLC_AM;
             break;
         case 1:
             /* rLC-UM */
             nbap_hsdsch_channel_info[nbap_private_data->hsdsch_macdflow_id].rlc_mode = FP_RLC_UM;
             break;
         default:
             break;
     }
 
 #.FN_BODY UE-Capability-Information/hSDSCH-Physical-Layer-Category  VAL_PTR = &hsdsch_physical_layer_category
     guint32 hsdsch_physical_layer_category;
     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;
     nbap_private_data_t* nbap_private_data = nbap_get_private_data(actx->pinfo);
     nbap_hsdsch_channel_info = nbap_private_data->nbap_hsdsch_channel_info;
 
 %(DEFAULT_BODY)s
 
     nbap_hsdsch_channel_info[nbap_private_data->hsdsch_macdflow_id].hsdsch_physical_layer_category = hsdsch_physical_layer_category;
 
 #.FN_BODY HSDSCH-MACdFlows-Information
     int protocol_ie_id;
     guint32 i;
     nbap_private_data_t* nbap_private_data = nbap_get_private_data(actx->pinfo);
     nbap_private_data->num_items = 0;
     protocol_ie_id = nbap_private_data->protocol_ie_id;
     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;
     nbap_hsdsch_channel_info = nbap_private_data->nbap_hsdsch_channel_info;
 
     /*Handle special cases, when the tree is weird, ie. no useful message appears in the tree, like HSDHSCH-Information-FDD */
     switch(protocol_ie_id){
             /*This flow must also be added*/
             case id_HSDSCH_MACdFlows_to_Add:
                 if (!PINFO_FD_VISITED(actx->pinfo)){
                 /* Set port to zero use that as an indication of whether we have data or not */
                     for (i = 0; i < maxNrOfMACdFlows; i++) {
                         nbap_hsdsch_channel_info[i].crnc_port = 0;
                         nbap_hsdsch_channel_info[i].rlc_mode = FP_RLC_MODE_UNKNOWN;
                         /*XXX: Added 29 jun*/
                         nbap_hsdsch_channel_info[i].entity = entity_not_specified;  /* Maybe this should default to entity = hs*/
                     }
                 }
 %(DEFAULT_BODY)s
                 add_hsdsch_bind(actx->pinfo);
 
             break;
             default:
 %(DEFAULT_BODY)s
             break;
         }
 
 # Reset num_items before calling the sequence
 #.FN_HDR HSDSCH-MACdFlows-to-Delete
     nbap_get_private_data(actx->pinfo)->num_items = 0;
 
 # Make sure num_items isn't 0 when accessing HSDSCH-MACdFlow-ID
 #
 #.FN_HDR HSDSCH-MACdFlows-to-Delete-Item
     nbap_get_private_data(actx->pinfo)->num_items++;
 
 #.FN_HDR PriorityQueue-InfoItem
     nbap_get_private_data(actx->pinfo)->num_items++;
 
 #.FN_HDR PriorityQueue-InfoItem-to-Add
     nbap_get_private_data(actx->pinfo)->num_items = 1;
 
 #.FN_HDR HSDSCH-MACdFlow-Specific-InformationResp-Item
     nbap_get_private_data(actx->pinfo)->num_items++;
 
 #.FN_BODY HSDSCH-MACdFlow-Specific-InfoItem
     address     dst_addr;
     guint32 transportLayerAddress_ipv4;
     guint16 bindingID;
     guint32 hsdsch_macdflow_id;
     nbap_private_data_t* nbap_private_data = nbap_get_private_data(actx->pinfo);
     nbap_hsdsch_channel_info_t* nbap_hsdsch_channel_info;
     nbap_hsdsch_channel_info = nbap_private_data->nbap_hsdsch_channel_info;
 
     nbap_private_data->transportLayerAddress_ipv4 = 0;
     nbap_private_data->binding_id_port = 0;
     nbap_private_data->num_items++;
 %(DEFAULT_BODY)s
 
     transportLayerAddress_ipv4 = nbap_private_data->transportLayerAddress_ipv4;
     bindingID = nbap_private_data->binding_id_port;
     if (PINFO_FD_VISITED(actx->pinfo) || transportLayerAddress_ipv4 == 0 || bindingID == 0){
         return offset;
     }
 
     set_address(&dst_addr, AT_IPv4, 4, &transportLayerAddress_ipv4);
 
     /* Set address for collection of HSDSCH entries */
     hsdsch_macdflow_id = nbap_private_data->hsdsch_macdflow_id;
     copy_address_wmem(actx->pinfo->pool,&(nbap_hsdsch_channel_info[hsdsch_macdflow_id].crnc_address),&dst_addr);
     nbap_hsdsch_channel_info[hsdsch_macdflow_id].crnc_port = bindingID;
 
 #.FN_BODY MAC-PDU-SizeExtended
diff --git a/epan/dissectors/packet-nbap.c b/epan/dissectors/packet-nbap.c
index 3cac889986..ae7db54cf0 100644
--- a/epan/dissectors/packet-nbap.c
+++ b/epan/dissectors/packet-nbap.c
@@ -11794,21 +11794,21 @@ static int
 dissect_nbap_LogicalChannelID(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
 #line 1952 "./asn1/nbap/nbap.cnf"
   guint32 logical_channel_id;
   guint num_items;
   nbap_edch_channel_info_t* nbap_edch_channel_info;
   nbap_private_data_t* nbap_private_data = nbap_get_private_data(actx->pinfo);
   nbap_edch_channel_info = nbap_private_data->nbap_edch_channel_info;
   /* Set logical channel id for this entry*/
   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,
                                                             1U, 15U, &logical_channel_id, FALSE);
 
 
     nbap_private_data->logical_channel_id = logical_channel_id;
     num_items = nbap_private_data->num_items;
-    if(num_items>0)
+    if(num_items > 0 && num_items < MAX_EDCH_DDIS + 1)
         nbap_edch_channel_info[nbap_private_data->e_dch_macdflow_id].lchId[num_items-1] = nbap_private_data->logical_channel_id;
 
 
 
   return offset;
 }
@@ -12303,18 +12303,18 @@ nbap_private_data_t* nbap_private_data = nbap_get_private_data(actx->pinfo);
 nbap_edch_channel_info = nbap_private_data->nbap_edch_channel_info;
   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,
                                                             1U, 5000U, &mac_d_pdu_size, TRUE);
 
 
     nbap_private_data->mac_d_pdu_size = mac_d_pdu_size;
     if (PINFO_FD_VISITED(actx->pinfo))
     {
         return offset;
     }
     num_items = nbap_private_data->num_items;
-    if(num_items>0)
+    if(num_items > 0 && num_items < MAX_EDCH_DDIS + 1)
         nbap_edch_channel_info[nbap_private_data->e_dch_macdflow_id].edch_macd_pdu_size[num_items-1] = nbap_private_data->mac_d_pdu_size;
 
 
 
   return offset;
 }
@@ -15037,43 +15037,43 @@ nbap_private_data_t* nbap_private_data = nbap_get_private_data(actx->pinfo);
 nbap_dch_chnl_info = nbap_private_data->nbap_dch_chnl_info;
 
   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,
                                                             0U, 512U, &NrOfTransportBlocks, FALSE);
 
 
     if(nbap_private_data->num_items>0){
         num_items = nbap_private_data->num_items;
         dch_id = nbap_private_data->dch_id;
-        if (num_items > 0 && dch_id != 0xffffffff) {
+        if (num_items > 0 && num_items < MAX_FP_CHANS + 1 && dch_id != 0xffffffff) {
             common_physical_channel_id = nbap_private_data->common_physical_channel_id;
             common_transport_channel_id = nbap_private_data->common_transport_channel_id;
             switch(nbap_private_data->transport_format_set_type){
                 case NBAP_DCH_UL:
                     nbap_dch_chnl_info[dch_id].num_ul_chans++;
                     nbap_dch_chnl_info[dch_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;
                     break;
                 case NBAP_DCH_DL:
                     nbap_dch_chnl_info[dch_id].num_dl_chans++;
                     nbap_dch_chnl_info[dch_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;
                     break;
                 case NBAP_CPCH:
                     nbap_dch_chnl_info[common_physical_channel_id].num_ul_chans++;
                     nbap_dch_chnl_info[common_physical_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;
                     nbap_dch_chnl_info[common_physical_channel_id].num_dl_chans++;
                     nbap_dch_chnl_info[common_physical_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;
                     break;
                 case NBAP_PCH:
                     nbap_dch_chnl_info[common_transport_channel_id].num_ul_chans++;
                     nbap_dch_chnl_info[common_transport_channel_id].ul_chan_num_tbs[num_items-1] = NrOfTransportBlocks;
                     nbap_dch_chnl_info[common_transport_channel_id].num_dl_chans++;
                     nbap_dch_chnl_info[common_transport_channel_id].dl_chan_num_tbs[num_items-1] = NrOfTransportBlocks;
                     break;
                 default:
                     break;
             }
         }
     }
 
 
 
   return offset;
 }
@@ -15093,37 +15093,37 @@ nbap_private_data_t* nbap_private_data = nbap_get_private_data(actx->pinfo);
 nbap_dch_chnl_info = nbap_private_data->nbap_dch_chnl_info;
 
   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,
                                                             0U, 5000U, &TransportBlockSize, FALSE);
 
 
     if(nbap_private_data->num_items>0){
         num_items = nbap_private_data->num_items;
         dch_id = nbap_private_data->dch_id;
-        if (num_items > 0 && dch_id != 0xffffffff) {
+        if (num_items > 0 && num_items < MAX_FP_CHANS + 1 && dch_id != 0xffffffff) {
             common_physical_channel_id = nbap_private_data->common_physical_channel_id;
             common_transport_channel_id = nbap_private_data->common_transport_channel_id;
             switch(nbap_private_data->transport_format_set_type){
                 case NBAP_DCH_UL:
                     nbap_dch_chnl_info[dch_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;
                     break;
                 case NBAP_DCH_DL:
                     nbap_dch_chnl_info[dch_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;
                     break;
                 case NBAP_CPCH:
                     nbap_dch_chnl_info[common_physical_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;
                     nbap_dch_chnl_info[common_physical_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;
                     break;
                 case NBAP_PCH:
                     nbap_dch_chnl_info[common_transport_channel_id].ul_chan_tf_size[num_items-1] = TransportBlockSize;
                     nbap_dch_chnl_info[common_transport_channel_id].dl_chan_tf_size[num_items-1] = TransportBlockSize;
                     break;
                 default:
                     break;
             }
         }
     }
 
 
 
   return offset;
 }
@@ -18299,24 +18299,24 @@ static int
 dissect_nbap_E_DCH_DDI_Value(tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
 #line 1918 "./asn1/nbap/nbap.cnf"
   guint32 e_dch_ddi_value;
   guint num_items;
   nbap_edch_channel_info_t* nbap_edch_channel_info;
   nbap_private_data_t* nbap_private_data = nbap_get_private_data(actx->pinfo);
   nbap_edch_channel_info = nbap_private_data->nbap_edch_channel_info;
   offset = dissect_per_constrained_integer(tvb, offset, actx, tree, hf_index,
                                                             0U, 62U, &e_dch_ddi_value, FALSE);
 
 
   nbap_private_data->e_dch_ddi_value = e_dch_ddi_value;
   if (PINFO_FD_VISITED(actx->pinfo))
   {
       return offset;
   }
   num_items = nbap_private_data->num_items;
-  if(num_items>0)
+  if(num_items > 0 && num_items < MAX_EDCH_DDIS + 1)
       nbap_edch_channel_info[nbap_private_data->e_dch_macdflow_id].edch_ddi[num_items-1] = nbap_private_data->e_dch_ddi_value;
 
 
 
   return offset;
 }
