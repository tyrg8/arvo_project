commit 64551d511471a4a6ca40e08d8c33659a5a52d06f
Author: Reini Urban <rurban@cpan.org>
Date:   Tue Oct 31 17:27:03 2023 +0100

    bits: fix CHK_OVERFLOW
    
    CHK_OVERFLOW_PLUS is ok.
    Fixes ossfuzz 55579, 54163, 54162, 57911, 60993

diff --git a/src/bits.c b/src/bits.c
index 309b7332..474d6d90 100644
--- a/src/bits.c
+++ b/src/bits.c
@@ -113,46 +113,46 @@ void
 bit_reset_chain (Bit_Chain *dat)
 {
   size_t pos = dat->byte;
   dat->byte = 0;
   if (pos < dat->size) // not already overflowed
     dat->chain += pos;
   if (dat->size > 0)
     dat->size -= pos;
 }
 
 #ifdef DWG_ABORT
 #  define CHK_OVERFLOW(func, retval)                                          \
-    if (dat->byte > dat->size                                                 \
-        || ((dat->byte * 8) + dat->bit > dat->size * 8))                      \
+    if (dat->byte >= dat->size                                                \
+        || ((dat->byte * 8) + dat->bit >= dat->size * 8))                     \
       {                                                                       \
         loglevel = dat->opts & DWG_OPTS_LOGLEVEL;                             \
         LOG_ERROR ("%s buffer overflow at %" PRIuSIZE ".%u > %" PRIuSIZE,     \
                    func, dat->byte, dat->bit, dat->size)                      \
         if (++errors > DWG_ABORT_LIMIT)                                       \
           abort ();                                                           \
         return retval;                                                        \
       }
 #else
 #  define CHK_OVERFLOW(func, retval)                                          \
-    if (dat->byte > dat->size                                                 \
-        || ((dat->byte * 8) + dat->bit > dat->size * 8))                      \
+    if (dat->byte >= dat->size                                                \
+        || ((dat->byte * 8) + dat->bit >= dat->size * 8))                     \
       {                                                                       \
         loglevel = dat->opts & DWG_OPTS_LOGLEVEL;                             \
         LOG_ERROR ("%s buffer overflow at %" PRIuSIZE ".%u > %" PRIuSIZE,     \
                    func, dat->byte, dat->bit, dat->size)                      \
         return retval;                                                        \
       }
 #endif
 
 #define CHK_OVERFLOW_PLUS(plus, func, retval)                                 \
   if ((dat->byte + plus > dat->size)                                          \
       || (((dat->byte + plus) * 8) + dat->bit > dat->size * 8))               \
     {                                                                         \
       loglevel = dat->opts & DWG_OPTS_LOGLEVEL;                               \
       LOG_ERROR ("%s buffer overflow at %" PRIuSIZE ".%u + %d > %" PRIuSIZE,  \
                  func, dat->byte, dat->bit, (int)(plus), dat->size)           \
       return retval;                                                          \
     }
 
 /** Read 1 bit.
  */
@@ -930,42 +930,41 @@ BITCODE_MC
 bit_read_MC (Bit_Chain *dat)
 {
   int i, j;
   int negative;
   unsigned char byte[8];
   BITCODE_UMC result;
 
   negative = 0;
   result = 0;
   for (i = 4, j = 0; i >= 0; i--, j += 7)
     {
       byte[i] = bit_read_RC (dat);
-      CHK_OVERFLOW (__FUNCTION__, 0)
       if (!(byte[i] & 0x80))
         {
           if ((byte[i] & 0x40))
             {
               negative = 1;
               byte[i] &= 0xbf;
             }
           result |= (((BITCODE_UMC)byte[i]) << j);
           return (negative ? -((BITCODE_MC)result) : (BITCODE_MC)result);
         }
       else
         byte[i] &= 0x7f;
 
       result |= ((BITCODE_UMC)byte[i]) << j;
     }
 
   loglevel = dat->opts & DWG_OPTS_LOGLEVEL;
   LOG_ERROR (
       "bit_read_MC: error parsing modular char. i=%d, j=%d, result=" FORMAT_UMC
       ",\n"
       " @%" PRIuSIZE ".@%u: [0x%x 0x%x 0x%x 0x%x 0x%x]",
       i, j, result, dat->byte - 5, dat->bit, dat->chain[dat->byte - 5],
       dat->chain[dat->byte - 4], dat->chain[dat->byte - 3],
       dat->chain[dat->byte - 2], dat->chain[dat->byte - 1])
   return 0; /* error... */
 }
 
 /** Write 1 modular char (max 5 bytes, signed).
  */
@@ -1009,38 +1008,37 @@ BITCODE_UMC
 bit_read_UMC (Bit_Chain *dat)
 {
   int i, j;
 // eg handle FD485E65F
 #define MAX_BYTE_UMC 8
   unsigned char byte[MAX_BYTE_UMC] = { 0, 0, 0, 0, 0, 0, 0, 0 };
   BITCODE_UMC result;
 
   result = 0;
   for (i = MAX_BYTE_UMC - 1, j = 0; i >= 0; i--, j += 7)
     {
       byte[i] = bit_read_RC (dat);
-      CHK_OVERFLOW (__FUNCTION__, 0)
       if (!(byte[i] & 0x80))
         {
           result |= (((BITCODE_UMC)byte[i]) << j);
           return result;
         }
       else
         byte[i] &= 0x7f;
 
       result |= ((BITCODE_UMC)byte[i]) << j;
     }
 
   loglevel = dat->opts & DWG_OPTS_LOGLEVEL;
   LOG_ERROR (
       "bit_read_UMC: error parsing modular char, i=%d,j=%d,result=" FORMAT_UMC,
       i, j, result)
   LOG_HANDLE ("  @%" PRIuSIZE ".%u: [0x%x 0x%x 0x%x 0x%x 0x%x 0x%x]\n",
               dat->byte - 6, dat->bit, dat->chain[dat->byte - 6],
               dat->chain[dat->byte - 5], dat->chain[dat->byte - 4],
               dat->chain[dat->byte - 3], dat->chain[dat->byte - 2],
               dat->chain[dat->byte - 1])
   return 0; /* error... */
 }
 
 /** Write 1 modular char (max 8 bytes, unsigned).
  */
@@ -1077,29 +1075,28 @@ BITCODE_MS
 bit_read_MS (Bit_Chain *dat)
 {
   int i, j;
   BITCODE_RS word[2] = { 0, 0 };
   BITCODE_MS result;
 
   result = 0;
   for (i = 1, j = 0; i >= 0; i--, j += 15)
     {
       word[i] = bit_read_RS (dat);
-      CHK_OVERFLOW (__FUNCTION__, 0)
       if (!(word[i] & 0x8000))
         {
           result |= ((BITCODE_MS)word[i] << j);
           return result;
         }
       else
         word[i] &= 0x7fff;
       result |= ((BITCODE_MS)word[i] << j);
     }
   loglevel = dat->opts & DWG_OPTS_LOGLEVEL;
   LOG_ERROR (
       "bit_read_MS: error parsing modular short, i=%d,j=%d,result=" FORMAT_MS,
       i, j, result)
   return 0; /* error... */
 }
 
 /** Write 1 modular short (max 2 words).
  */
@@ -1168,57 +1165,55 @@ BITCODE_DD
 bit_read_DD (Bit_Chain *dat, double default_value)
 {
   unsigned char two_bit_code;
   unsigned char *uchar_result;
 
   two_bit_code = bit_read_BB (dat);
   if (two_bit_code == 0)
     {
-      CHK_OVERFLOW (__FUNCTION__, bit_nan ())
       return default_value;
     }
   if (two_bit_code == 3)
     return bit_read_RD (dat);
   if (two_bit_code == 2)
     {
       // dbl: 7654 3210
       uchar_result = (unsigned char *)&default_value;
       CHK_OVERFLOW_PLUS (6, __FUNCTION__, bit_nan ())
 #ifdef WORDS_BIGENDIAN
       uchar_result[7] = bit_read_RC (dat);
       uchar_result[6] = bit_read_RC (dat);
       uchar_result[5] = bit_read_RC (dat);
       uchar_result[4] = bit_read_RC (dat);
       uchar_result[3] = bit_read_RC (dat);
       uchar_result[2] = bit_read_RC (dat);
       // keep the first 2 bytes
 #else
       // first 2 bytes eq (6-7), the rest not (0-5)
       uchar_result[4] = bit_read_RC (dat);
       uchar_result[5] = bit_read_RC (dat);
       uchar_result[0] = bit_read_RC (dat);
       uchar_result[1] = bit_read_RC (dat);
       uchar_result[2] = bit_read_RC (dat);
       uchar_result[3] = bit_read_RC (dat);
 #endif
-      CHK_OVERFLOW (__FUNCTION__, bit_nan ())
       return default_value;
     }
   else /* if (two_bit_code == 1) */
     {
       // first 4bits eq, only last 4
 #ifdef WORDS_BIGENDIAN
       uint32_t *result = (uint32_t *)&default_value;
       CHK_OVERFLOW_PLUS (4, __FUNCTION__, bit_nan ())
       *result = bit_read_RL (dat);
 #else
       uchar_result = (unsigned char *)&default_value;
       CHK_OVERFLOW_PLUS (4, __FUNCTION__, bit_nan ())
       uchar_result[0] = bit_read_RC (dat);
       uchar_result[1] = bit_read_RC (dat);
       uchar_result[2] = bit_read_RC (dat);
       uchar_result[3] = bit_read_RC (dat);
 #endif
       CHK_OVERFLOW (__FUNCTION__, bit_nan ())
       return default_value;
     }
 }
