commit 538b229cab5e6317053c15c66417a9d053681ad0
Author: jeanlf <jeanlf@gpac.io>
Date:   Wed Jan 17 11:39:55 2024 +0100

    fixed potential crash in ghi demux init

diff --git a/src/filters/dmx_ghi.c b/src/filters/dmx_ghi.c
index b6c6d245b..d7b4950cc 100644
--- a/src/filters/dmx_ghi.c
+++ b/src/filters/dmx_ghi.c
@@ -960,135 +960,137 @@ GF_Err ghi_dmx_init_xml(GF_Filter *filter, GHIDmxCtx *ctx, const u8 *data)
 			if (!st->seg_info.first_pck_seq) {
 				st->empty_seg = 1;
 			} else {
 				surl = gf_list_get(st->segs_xml, st->seg_num);
 				if (surl) {
 					st->nb_pck = (u32) (surl->first_pck_seq - st->seg_info.first_pck_seq);
 					if (!ctx->max_end_start_offset_plus_one
 						|| (ctx->max_end_start_offset_plus_one-1<surl->frag_start_offset)
 					) {
 						ctx->max_end_start_offset_plus_one = surl->frag_start_offset+1;
 					}
 					//first packet of next seg is split, we need this packet in current segment
 					if (surl->split_first_dur) st->nb_pck++;
 					if (surl->frag_start_offset)
 						st->use_offsets=1;
 				}
 			}
 			surl = gf_list_get(st->segs_xml, 0);
 			st->first_frag_start_offset = (u32) surl->frag_start_offset;
 		}
 	}
 	gf_mpd_del(mpd);
 	return GF_OK;
 #else
 	return GF_NOT_SUPPORTED;
 #endif
 }
 GF_Err ghi_dmx_init(GF_Filter *filter, GHIDmxCtx *ctx)
 {
 	u32 size, i, nb_active=0;
 	GF_Err e;
 	GF_BitStream *bs = NULL;
 	GF_FilterPacket *pck = gf_filter_pid_get_packet(ctx->ipid);
 	if (!pck) return GF_OK;
 	ctx->init = GF_TRUE;
 	const u8 *data = gf_filter_pck_get_data(pck, &size);
 	if (!data) {
 		return GF_SERVICE_ERROR;
 	}
 	if ((data[0] == 'G') && (data[1] == 'H') && (data[2] == 'I') && (data[3] == 'D')) {
 		bs = gf_bs_new(data, size, GF_BITSTREAM_READ);
 		e = ghi_dmx_init_bin(filter, ctx, bs);
 		if (!e && gf_bs_is_overflow(bs)) e = GF_NON_COMPLIANT_BITSTREAM;
-	} else {
+	} else if (gf_utf8_is_legal(data, size))
 		e = ghi_dmx_init_xml(filter, ctx, data);
+	else {
+		e = GF_NON_COMPLIANT_BITSTREAM;
 	}
 	if (e) {
 		if (bs) gf_bs_del(bs);
 		gf_filter_pid_drop_packet(ctx->ipid);
 		gf_filter_setup_failure(filter, e);
 		return e;
 	}
 
 	//unmark muxed inactive
 	ghi_dmx_unmark_muxed(ctx);
 
 	//declare pids
 	for (i=0; i<gf_list_count(ctx->streams); i++) {
 		GHIStream *st = gf_list_get(ctx->streams, i);
 
 		u32 k;
 		for (k=0; k<gf_list_count(ctx->streams); k++) {
 			GHIStream *st_a = gf_list_get(ctx->streams, k);
 			if (!strcmp(st_a->res_url, st->res_url)) {
 				st->filter_src = st_a->filter_src;
 				break;
 			}
 		}
 		if (st->inactive) continue;
 		nb_active++;
 		if (st->filter_src) continue;
 
 		//load all segments
 		if (ctx->gm && bs)
 			ghi_dmx_parse_seg(ctx, bs, st, 0);
 
 		if (ctx->gm && !ctx->force) {
 			if (st->segs_bin)
 				ghi_dmx_declare_opid_bin(filter, ctx, st, bs);
 			else
 				ghi_dmx_declare_opid_xml(filter, ctx, st);
 			continue;
 		}
 		const GF_PropertyValue *p = gf_filter_pid_get_property(ctx->ipid, GF_PROP_PID_URL);
 		char *args = gf_url_concatenate (p ? p->value.string : "./", st->res_url);
 
 		if (st->first_frag_start_offset) {
 			char szRange[100];
 			char c = gf_filter_get_sep(filter, GF_FS_SEP_ARGS);
 			sprintf(szRange, "%cgpac%crange=0-%u", c, c, st->first_frag_start_offset-1);
 			gf_dynstrcat(&args, szRange, NULL);
 		}
 
 		if (!ctx->gm) {
 			char szOpt[100];
 			char c = gf_filter_get_sep(filter, GF_FS_SEP_ARGS);
 			sprintf(szOpt, "%cgfopt%clightp%cindex=0", c, c, c);
 			gf_dynstrcat(&args, szOpt, NULL);
 
 			if (!ctx->min_ts_plus_one
 				|| gf_timestamp_less(st->seg_info.first_tfdt+1, st->pid_timescale, ctx->min_ts_plus_one, ctx->min_ts_timescale)
 			) {
 				ctx->min_ts_plus_one = st->seg_info.first_tfdt+1;
 				ctx->min_ts_timescale = st->pid_timescale;
 			}
 
 			if (st->use_offsets) {
 				if (!ctx->min_offset_plus_one || (st->seg_info.frag_start_offset < ctx->min_offset_plus_one-1))
 					ctx->min_offset_plus_one = st->seg_info.frag_start_offset+1;
 			}
 		}
 
 		st->filter_src = gf_filter_connect_source(filter, args, NULL, GF_FALSE, &e);
 		gf_free(args);
 		if (!st->filter_src) {
 			if (bs) gf_bs_del(bs);
 			gf_filter_pid_drop_packet(ctx->ipid);
 
 			GF_LOG(GF_LOG_ERROR, GF_LOG_DASH, ("[GHIXDmx] error locating source filter for rep %s name %s: %s\n", st->rep_id, st->res_url, gf_error_to_string(e) ));
 			gf_filter_setup_failure(filter, e);
 			return e;
 		}
 		gf_filter_set_source(filter, st->filter_src, NULL);
 
 		gf_filter_set_setup_failure_callback(filter, st->filter_src, ghi_dmx_on_filter_setup_error, filter);
 	}
 
 	if (bs) gf_bs_del(bs);
 	gf_filter_pid_drop_packet(ctx->ipid);
 	gf_filter_pid_set_discard(ctx->ipid, GF_TRUE);
 
 	if (nb_active) return GF_OK;
 	GF_LOG(GF_LOG_ERROR, GF_LOG_DASH, ("[GHIXDmx] No active representation to generate !\n"));
 	return GF_BAD_PARAM;
 }
