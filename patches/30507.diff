commit ce5fe2a6e807b819866b4f429ca6f7a2d74445b7
Author: Luke Wilde <lukew@serenityos.org>
Date:   Fri Feb 26 22:31:07 2021 +0000

    LibGfx: Fix read buffer overflow in interlaced GIF decode
    
    Unfortunately 10420dee7e48c818a7b1c5386b8fcebc587825f0 didn't quite fix it,
    as the buffer overflow was actually happening here:
    https://github.com/SerenityOS/serenity/blob/af2220448834fb0bff5132bf68104719819862ce/Userland/Libraries/LibGfx/GIFLoader.cpp#L402
    
    Found by oss-fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=30507

diff --git a/Userland/Libraries/LibGfx/GIFLoader.cpp b/Userland/Libraries/LibGfx/GIFLoader.cpp
index 3bec3d1ce9..fb7b9eb26b 100644
--- a/Userland/Libraries/LibGfx/GIFLoader.cpp
+++ b/Userland/Libraries/LibGfx/GIFLoader.cpp
@@ -308,115 +308,116 @@ static void clear_rect(Bitmap& bitmap, const IntRect& rect, Color color)
 static bool decode_frame(GIFLoadingContext& context, size_t frame_index)
 {
     if (frame_index >= context.images.size()) {
         return false;
     }
 
     if (context.state >= GIFLoadingContext::State::FrameComplete && frame_index == context.current_frame) {
         return true;
     }
 
     size_t start_frame = context.current_frame + 1;
     if (context.state < GIFLoadingContext::State::FrameComplete) {
         start_frame = 0;
         context.frame_buffer = Bitmap::create_purgeable(BitmapFormat::RGBA32, { context.logical_screen.width, context.logical_screen.height });
         if (!context.frame_buffer)
             return false;
         context.prev_frame_buffer = Bitmap::create_purgeable(BitmapFormat::RGBA32, { context.logical_screen.width, context.logical_screen.height });
         if (!context.prev_frame_buffer)
             return false;
     } else if (frame_index < context.current_frame) {
         start_frame = 0;
     }
 
     for (size_t i = start_frame; i <= frame_index; ++i) {
         auto& image = context.images.at(i);
 
         const auto previous_image_disposal_method = i > 0 ? context.images.at(i - 1).disposal_method : ImageDescriptor::DisposalMethod::None;
 
         if (i == 0) {
             context.frame_buffer->fill(Color::Transparent);
         } else if (i > 0 && image.disposal_method == ImageDescriptor::DisposalMethod::RestorePrevious
             && previous_image_disposal_method != ImageDescriptor::DisposalMethod::RestorePrevious) {
             // This marks the start of a run of frames that once disposed should be restored to the
             // previous underlying image contents. Therefore we make a copy of the current frame
             // buffer so that it can be restored later.
             copy_frame_buffer(*context.prev_frame_buffer, *context.frame_buffer);
         }
 
         if (previous_image_disposal_method == ImageDescriptor::DisposalMethod::RestoreBackground) {
             // Note: RestoreBackground could be interpreted either as restoring the underlying
             // background of the entire image (e.g. container element's background-color), or the
             // background color of the GIF itself. It appears that all major browsers and most other
             // GIF decoders adhere to the former interpretation, therefore we will do the same by
             // clearing the entire frame buffer to transparent.
             clear_rect(*context.frame_buffer, context.images.at(i - 1).rect(), Color::Transparent);
         } else if (i > 0 && previous_image_disposal_method == ImageDescriptor::DisposalMethod::RestorePrevious) {
             // Previous frame indicated that once disposed, it should be restored to *its* previous
             // underlying image contents, therefore we restore the saved previous frame buffer.
             copy_frame_buffer(*context.frame_buffer, *context.prev_frame_buffer);
         }
 
         LZWDecoder decoder(image.lzw_encoded_bytes, image.lzw_min_code_size);
 
         // Add GIF-specific control codes
         const int clear_code = decoder.add_control_code();
         const int end_of_information_code = decoder.add_control_code();
 
         const auto& color_map = image.use_global_color_map ? context.logical_screen.color_map : image.color_map;
 
         int pixel_index = 0;
         int row = 0;
         int interlace_pass = 0;
         while (true) {
             Optional<u16> code = decoder.next_code();
             if (!code.has_value()) {
 #if GIF_DEBUG
                 dbgln("Unexpectedly reached end of gif frame data");
 #endif
                 return false;
             }
 
             if (code.value() == clear_code) {
                 decoder.reset();
                 continue;
             }
             if (code.value() == end_of_information_code)
                 break;
             if (!image.width)
                 continue;
 
             auto colors = decoder.get_output();
             for (const auto& color : colors) {
                 auto c = color_map[color];
 
                 int x = pixel_index % image.width + image.x;
                 int y = row + image.y;
 
                 if (context.frame_buffer->rect().contains(x, y) && (!image.transparent || color != image.transparency_index)) {
                     context.frame_buffer->set_pixel(x, y, c);
                 }
 
                 ++pixel_index;
                 if (pixel_index % image.width == 0) {
                     if (image.interlaced) {
-                        if (row + INTERLACE_ROW_STRIDES[interlace_pass] >= image.height) {
-                            ++interlace_pass;
-                            if (interlace_pass < 4)
-                                row = INTERLACE_ROW_OFFSETS[interlace_pass];
-                        } else {
-                            if (interlace_pass < 4)
+                        if (interlace_pass < 4) {
+                            if (row + INTERLACE_ROW_STRIDES[interlace_pass] >= image.height) {
+                                ++interlace_pass;
+                                if (interlace_pass < 4)
+                                    row = INTERLACE_ROW_OFFSETS[interlace_pass];
+                            } else {
                                 row += INTERLACE_ROW_STRIDES[interlace_pass];
+                            }
                         }
                     } else {
                         ++row;
                     }
                 }
             }
         }
 
         context.current_frame = i;
         context.state = GIFLoadingContext::State::FrameComplete;
     }
 
     return true;
 }
