commit 9b01779cbf321d23fe45cc7e3abe7a2081ab69d4
Author: Kurt Roeckx <kurt@roeckx.be>
Date:   Sat Sep 23 14:49:03 2017 +0200

    Use curve_id not the nid
    
    Found by OSS-Fuzz and the tests
    
    Reviewed-by: Andy Polyakov <appro@openssl.org>
    GH: #4410

diff --git a/ssl/t1_lib.c b/ssl/t1_lib.c
index fd26595007..67b06f261a 100644
--- a/ssl/t1_lib.c
+++ b/ssl/t1_lib.c
@@ -461,34 +461,34 @@ int tls1_set_groups_list(uint16_t **pext, size_t *pextlen, const char *str)
 /* For an EC key set TLS id and required compression based on parameters */
 static int tls1_set_ec_id(uint16_t *pcurve_id, unsigned char *comp_id,
                           EC_KEY *ec)
 {
-    int id;
+    int curve_nid;
     const EC_GROUP *grp;
     if (!ec)
         return 0;
     /* Determine if it is a prime field */
     grp = EC_KEY_get0_group(ec);
     if (!grp)
         return 0;
     /* Determine curve ID */
-    id = EC_GROUP_get_curve_name(grp);
-    *pcurve_id = tls1_ec_nid2curve_id(id);
+    curve_nid = EC_GROUP_get_curve_name(grp);
+    *pcurve_id = tls1_ec_nid2curve_id(curve_nid);
     /* If no id return error: we don't support arbitrary explicit curves */
     if (*pcurve_id == 0)
         return 0;
     if (comp_id) {
         if (EC_KEY_get0_public_key(ec) == NULL)
             return 0;
         if (EC_KEY_get_conv_form(ec) == POINT_CONVERSION_UNCOMPRESSED) {
             *comp_id = TLSEXT_ECPOINTFORMAT_uncompressed;
         } else {
-            if ((nid_list[id - 1].flags & TLS_CURVE_TYPE) == TLS_CURVE_PRIME)
+            if ((nid_list[*pcurve_id - 1].flags & TLS_CURVE_TYPE) == TLS_CURVE_PRIME)
                 *comp_id = TLSEXT_ECPOINTFORMAT_ansiX962_compressed_prime;
             else
                 *comp_id = TLSEXT_ECPOINTFORMAT_ansiX962_compressed_char2;
         }
     }
     return 1;
 }
 
 /* Check an EC key is compatible with extensions */
