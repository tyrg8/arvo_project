commit 6b83a7654e345754f751f9171ea92e2ae763b0eb
Author: Dirk Lemstra <dirk@lemstra.org>
Date:   Tue Jul 19 07:46:37 2022 +0200

    Moved creation of the fill pattern image.

diff --git a/coders/bayer.c b/coders/bayer.c
index 19230c609..1bad0ec4c 100644
--- a/coders/bayer.c
+++ b/coders/bayer.c
@@ -265,81 +265,103 @@ ModuleExport void UnregisterBAYERImage(void)
 {
   (void) UnregisterMagickInfo("BAYERA");
   (void) UnregisterMagickInfo("BAYER");
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   W r i t e B A Y E R I m a g e                                             %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  WriteBAYERImage() deconstructs a full color image into a single channel
 %  RGGB raw image format.
 %
 %  Reference: http://im.snibgo.com/mosaic.htm.
 %
 %  The format of the WriteBAYERImage method is:
 %
 %      MagickBooleanType WriteBAYERImage(const ImageInfo *image_info,
 %        Image *image,ExceptionInfo *exception)
 %
 %  A description of each parameter follows.
 %
 %    o image_info: the image info.
 %
 %    o image:  The image.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 static Image* BayerApplyMask(Image *images,size_t index_a,size_t index_b,
-  Image *tile_image,ExceptionInfo *exception)
+  size_t fill_x,size_t fill_y,ExceptionInfo *exception)
 {
+  DrawInfo
+    *draw_info;
+
   Image
     *canvas,
     *mask_image,
     *result;
 
-  DrawInfo
-    *draw_info;
+  PixelInfo
+    pixel;
+
+  Quantum
+    *q;
 
   draw_info=AcquireDrawInfo();
   if (draw_info == (DrawInfo *) NULL)
     return((Image *) NULL);
+  draw_info->fill_pattern=AcquireImage((ImageInfo *) NULL,exception);
+  if (draw_info->fill_pattern == (Image *) NULL)
+    {
+      draw_info=DestroyDrawInfo(draw_info);
+      return((Image *) NULL);
+    }
+  (void) SetImageExtent(draw_info->fill_pattern,2,2,exception);
+  (void) QueryColorCompliance("#000",AllCompliance,
+    &draw_info->fill_pattern->background_color,exception);
+  (void) SetImageBackgroundColor(draw_info->fill_pattern,exception);
+  q=GetAuthenticPixels(draw_info->fill_pattern,fill_x,fill_y,1,1,exception);
+  if (q == (Quantum *) NULL)
+    {
+      draw_info=DestroyDrawInfo(draw_info);
+      return((Image *) NULL);
+    }
+  (void) QueryColorCompliance("#fff",AllCompliance,&pixel,exception);
+  SetPixelViaPixelInfo(draw_info->fill_pattern,&pixel,q);
   mask_image=CloneImage(GetImageFromList(images,index_a),0,0,MagickTrue,
     exception);
   if (mask_image == (Image *) NULL)
     {
       draw_info=DestroyDrawInfo(draw_info);
       return((Image *) NULL);
     }
-  draw_info->fill_pattern=tile_image;
   draw_info->primitive=ConstantString("color 0,0 reset");
   (void) DrawImage(mask_image,draw_info,exception);
   (void) SetImageAlphaChannel(mask_image,OffAlphaChannel,exception);
-  draw_info->fill_pattern=(Image *) NULL;
   draw_info=DestroyDrawInfo(draw_info);
   canvas=CloneImage(GetImageFromList(images,index_b),0,0,MagickTrue,exception);
   if (canvas == (Image *) NULL)
     {
       mask_image=DestroyImage(mask_image);
       return((Image *) NULL);
     }
   (void) CompositeImage(canvas,mask_image,CopyAlphaCompositeOp,MagickTrue,0,0,
     exception);
   mask_image=DestroyImage(mask_image);
   result=CloneImage(GetImageFromList(images,index_a),0,0,MagickTrue,exception);
   if (result != (Image *) NULL)
     {
       (void) CompositeImage(result,canvas,OverCompositeOp,MagickTrue,0,0,
         exception);
       (void) SetImageAlphaChannel(result,OffAlphaChannel,exception);
     }
   canvas=DestroyImage(canvas);
   return(result);
 }
@@ -347,101 +369,64 @@ static Image* BayerApplyMask(Image *images,size_t index_a,size_t index_b,
 static MagickBooleanType WriteBAYERImage(const ImageInfo *image_info,
   Image *image,ExceptionInfo *exception)
 {
-#define ThrowBAYERException \
-{ \
-  if (bayer_b != (Image *) NULL) \
-    bayer_b=DestroyImage(bayer_b); \
-  if (bayer_g0 != (Image *) NULL) \
-    bayer_g0=DestroyImage(bayer_g0); \
-  if (bayer_g1 != (Image *) NULL) \
-    bayer_g1=DestroyImage(bayer_g1); \
-  if (bayer_image != (Image *) NULL) \
-    bayer_image=DestroyImage(bayer_image); \
-  if (images != (Image *) NULL) \
-    images=DestroyImageList(images); \
-  return(MagickFalse); \
-}
   Image
-    *bayer_b=(Image *) NULL,
-    *bayer_g0=(Image *) NULL,
-    *bayer_g1=(Image *) NULL,
     *bayer_image=(Image *) NULL,
     *images=(Image *) NULL;
 
   MagickBooleanType
     status;
 
-  PixelInfo
-    pixel;
-
-  Quantum
-    *q;
-
   /*
     Deconstruct RGB image into a single channel RGGB raw image.
   */
   assert(image_info != (const ImageInfo *) NULL);
   assert(image_info->signature == MagickCoreSignature);
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (IsEventLogging() != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
-  bayer_g0=AcquireImage((ImageInfo *) NULL,exception);
-  if (bayer_g0 == (Image *) NULL)
-    return(MagickFalse);
-  (void) SetImageExtent(bayer_g0,2,2,exception);
-  (void) QueryColorCompliance("#000",AllCompliance,
-    &bayer_g0->background_color,exception);
-  (void) SetImageBackgroundColor(bayer_g0,exception);
-  q=GetAuthenticPixels(bayer_g0,1,0,1,1,exception);
-  if (q == (Quantum *) NULL)
-    ThrowBAYERException;
-  (void) QueryColorCompliance("#fff",AllCompliance,&pixel,exception);
-  SetPixelViaPixelInfo(bayer_g0,&pixel,q);
-  bayer_b=RollImage(bayer_g0,0,1,exception);
-  if (bayer_b == (Image *) NULL)
-    ThrowBAYERException;
-  bayer_g1=RollImage(bayer_b,-1,0,exception);
-  if (bayer_g1 == (Image *) NULL)
-    ThrowBAYERException;
   bayer_image=CloneImage(image,0,0,MagickTrue,exception);
   status=MagickFalse;
   if (bayer_image == (Image *) NULL)
-    ThrowBAYERException;
+    return(MagickFalse);
   (void) SetImageColorspace(bayer_image,sRGBColorspace,exception);
   (void) SetPixelChannelMask(bayer_image,RedChannel|GreenChannel|BlueChannel);
   images=SeparateImages(bayer_image,exception);
-  if (images == (Image *) NULL)
-    ThrowBAYERException;
   bayer_image=DestroyImage(bayer_image);
-  bayer_image=BayerApplyMask(images,0,1,bayer_g0,exception);
+  if (images == (Image *) NULL)
+    return(MagickFalse);
+  bayer_image=BayerApplyMask(images,0,1,1,0,exception);
   if (bayer_image == (Image *) NULL)
-    ThrowBAYERException;
+    {
+      images=DestroyImageList(images);
+      return(MagickFalse);
+    }
   AppendImageToList(&images,bayer_image);
-  bayer_image=BayerApplyMask(images,3,1,bayer_g1,exception);
+  bayer_image=BayerApplyMask(images,3,1,0,1,exception);
   if (bayer_image == (Image *) NULL)
-    ThrowBAYERException;
+    {
+      images=DestroyImageList(images);
+      return(MagickFalse);
+    }
   AppendImageToList(&images,bayer_image);
-  bayer_image=BayerApplyMask(images,4,2,bayer_b,exception);
+  status=MagickFalse;
+  bayer_image=BayerApplyMask(images,4,2,1,1,exception);
   if (bayer_image != (Image *) NULL)
     status=MagickTrue;
   images=DestroyImageList(images);
-  bayer_g1=DestroyImage(bayer_g1);
-  bayer_g0=DestroyImage(bayer_g0);
-  bayer_b=DestroyImage(bayer_b);
   if (bayer_image != (Image *) NULL)
     {
       ImageInfo
         *write_info;
 
       write_info=CloneImageInfo(image_info);
       write_info->verbose=MagickFalse;
       (void) CopyMagickString(write_info->magick,"GRAY",MagickPathExtent);
       (void) CopyMagickString(bayer_image->filename,image->filename,
         MagickPathExtent);
       status=WriteImage(write_info,bayer_image,exception);
       bayer_image=DestroyImage(bayer_image);
       write_info=DestroyImageInfo(write_info);
     }
   return(status);
 }
