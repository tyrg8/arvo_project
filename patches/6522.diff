commit f85a9d6a08ebba9e319abdc05eadc3e443b878f1
Author: Tor Andersson <tor.andersson@artifex.com>
Date:   Tue Aug 28 21:41:07 2018 +0800

    Bug 699683: Skip painting too large images when using interpolation.
    
    When painting images using interpolation 16.16 fixpoint
    arithmetics is used. This limits the width/height of any
    image that can be painted to 32767. There was no size check,
    so large images caused overflow and subsequent out of bounds
    accesses which triggered MSAN. This c
    
    Thanks to oss-fuzz for reporting.

diff --git a/source/fitz/draw-affine.c b/source/fitz/draw-affine.c
index 61f7eb3f7..143836124 100644
--- a/source/fitz/draw-affine.c
+++ b/source/fitz/draw-affine.c
@@ -3871,192 +3871,196 @@ static void
 fz_paint_image_imp(fz_pixmap *dst, const fz_irect *scissor, fz_pixmap *shape, fz_pixmap *group_alpha, const fz_pixmap *img, fz_matrix ctm, const byte *color, int alpha, int lerp_allowed, int as_tiled, const fz_overprint *eop)
 {
 	byte *dp, *sp, *hp, *gp;
 	int u, v, fa, fb, fc, fd;
 	int x, y, w, h;
 	int sw, sh, ss, sa, sn, hs, da, dn, gs;
 	fz_irect bbox;
 	int dolerp;
 	paintfn_t *paintfn;
 	int is_rectilinear;
 
 	if (alpha == 0)
 		return;
 
 	/* grid fit the image */
 	ctm = fz_gridfit_matrix(as_tiled, ctm);
 
 	/* turn on interpolation for upscaled and non-rectilinear transforms */
 	dolerp = 0;
 	is_rectilinear = fz_is_rectilinear(ctm);
 	if (!is_rectilinear)
 		dolerp = lerp_allowed;
 	if (sqrtf(ctm.a * ctm.a + ctm.b * ctm.b) > img->w)
 		dolerp = lerp_allowed;
 	if (sqrtf(ctm.c * ctm.c + ctm.d * ctm.d) > img->h)
 		dolerp = lerp_allowed;
 
 	/* except when we shouldn't, at large magnifications */
 	if (!(img->flags & FZ_PIXMAP_FLAG_INTERPOLATE))
 	{
 		if (sqrtf(ctm.a * ctm.a + ctm.b * ctm.b) > img->w * 2)
 			dolerp = 0;
 		if (sqrtf(ctm.c * ctm.c + ctm.d * ctm.d) > img->h * 2)
 			dolerp = 0;
 	}
 
 	bbox = fz_irect_from_rect(fz_transform_rect(fz_unit_rect, ctm));
 	bbox = fz_intersect_irect(bbox, *scissor);
 
 	x = bbox.x0;
 	if (shape && shape->x > x)
 		x = shape->x;
 	if (group_alpha && group_alpha->x > x)
 		x = group_alpha->x;
 	y = bbox.y0;
 	if (shape && shape->y > y)
 		y = shape->y;
 	if (group_alpha && group_alpha->y > y)
 		y = group_alpha->y;
 	w = bbox.x1;
 	if (shape && shape->x + shape->w < w)
 		w = shape->x + shape->w;
 	if (group_alpha && group_alpha->x + group_alpha->w < w)
 		w = group_alpha->x + group_alpha->w;
 	w -= x;
 	h = bbox.y1;
 	if (shape && shape->y + shape->h < h)
 		h = shape->y + shape->h;
 	if (group_alpha && group_alpha->y + group_alpha->h < h)
 		h = group_alpha->y + group_alpha->h;
 	h -= y;
 	if (w <= 0 || h <= 0)
 		return;
 
 	/* map from screen space (x,y) to image space (u,v) */
 	ctm = fz_pre_scale(ctm, 1.0f / img->w, 1.0f / img->h);
 	ctm = fz_invert_matrix(ctm);
 
 	fa = (int)(ctm.a *= 65536.0f);
 	fb = (int)(ctm.b *= 65536.0f);
 	fc = (int)(ctm.c *= 65536.0f);
 	fd = (int)(ctm.d *= 65536.0f);
 	ctm.e *= 65536.0f;
 	ctm.f *= 65536.0f;
 
 	/* Calculate initial texture positions. Do a half step to start. */
 	/* Bug 693021: Keep calculation in float for as long as possible to
 	 * avoid overflow. */
 	u = (int)((ctm.a * x) + (ctm.c * y) + ctm.e + ((ctm.a + ctm.c) * .5f));
 	v = (int)((ctm.b * x) + (ctm.d * y) + ctm.f + ((ctm.b + ctm.d) * .5f));
 
 	dp = dst->samples + (unsigned int)((y - dst->y) * dst->stride + (x - dst->x) * dst->n);
 	da = dst->alpha;
 	dn = dst->n - da;
 	sp = img->samples;
 	sw = img->w;
 	sh = img->h;
 	ss = img->stride;
 	sa = img->alpha;
 	sn = img->n - sa;
 	if (shape)
 	{
 		hs = shape->stride;
 		hp = shape->samples + (unsigned int)((y - shape->y) * shape->stride + x - shape->x);
 	}
 	else
 	{
 		hs = 0;
 		hp = NULL;
 	}
 	if (group_alpha)
 	{
 		gs = group_alpha->stride;
 		gp = group_alpha->samples + (unsigned int)((y - group_alpha->y) * group_alpha->stride + x - group_alpha->x);
 	}
 	else
 	{
 		gs = 0;
 		gp = NULL;
 	}
 
 	/* TODO: if (fb == 0 && fa == 1) call fz_paint_span */
 
 	/* Sometimes we can get an alpha only input to be
 	 * plotted. In this case treat it as a greyscale
 	 * input. */
 	if (img->n == sa && color)
 	{
 		sa = 0;
 		sn = 1;
 	}
 
 #if FZ_PLOTTERS_RGB
 	if (dn == 3 && img->n == 1 + sa && !color && eop == NULL)
 	{
 		if (dolerp)
 			paintfn = fz_paint_affine_g2rgb_lerp(da, sa, fa, fb, dn, alpha);
 		else
 			paintfn = fz_paint_affine_g2rgb_near(da, sa, fa, fb, dn, alpha);
 	}
 	else
 #endif /* FZ_PLOTTERS_RGB */
 #ifdef FZ_ENABLE_SPOT_RENDERING
 	if (sn != dn)
 	{
 		if (dolerp)
 		{
 			if (color)
 				paintfn = fz_paint_affine_color_lerp_spots(da, sa, fa, fb, dn, sn, alpha, eop);
 			else
 				paintfn = fz_paint_affine_lerp_spots(da, sa, fa, fb, dn, sn, alpha, eop);
 		}
 		else
 		{
 			if (color)
 				paintfn = fz_paint_affine_color_near_spots(da, sa, fa, fb, dn, sn, alpha, eop);
 			else
 				paintfn = fz_paint_affine_near_spots(da, sa, fa, fb, dn, sn, alpha, eop);
 		}
 	}
 	else
 #endif /* FZ_ENABLE_SPOT_RENDERING */
 	{
 		assert((!color && sn == dn) || (color && sn + sa == 1));
 		if (dolerp)
 		{
 			if (color)
 				paintfn = fz_paint_affine_color_lerp(da, sa, fa, fb, dn, alpha, eop);
 			else
 				paintfn = fz_paint_affine_lerp(da, sa, fa, fb, dn, alpha, eop);
 		}
 		else
 		{
 			if (color)
 				paintfn = fz_paint_affine_color_near(da, sa, fa, fb, dn, alpha, eop);
 			else
 				paintfn = fz_paint_affine_near(da, sa, fa, fb, dn, alpha, eop);
 		}
 	}
 
 	assert(paintfn);
 	if (paintfn == NULL)
 		return;
 
 	if (dolerp)
 	{
+		/* image size overflows 16.16 fixed point math */
+		if (sw >= 32768 || sh >= 32768)
+			return;
+
 		u -= 32768;
 		v -= 32768;
 		sw = (sw<<16) + 32768;
 		sh = (sh<<16) + 32768;
 	}
 
 	while (h--)
 	{
 		paintfn(dp, da, sp, sw, sh, ss, sa, u, v, fa, fb, w, dn, sn, alpha, color, hp, gp, eop);
 		dp += dst->stride;
 		hp += hs;
 		gp += gs;
 		u += fc;
 		v += fd;
 	}
 }
