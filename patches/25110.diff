commit 3fcf319378f9396a9ca840cd63b96a441818e1f1
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Sat Aug 22 00:43:18 2020 +0200

    Fix regression introduced with commit d88df4b
    
    Revert the commit and use a different approach.
    
    Found by OSS-Fuzz.

diff --git a/xinclude.c b/xinclude.c
index c92b32bc..f48e0af5 100644
--- a/xinclude.c
+++ b/xinclude.c
@@ -54,13 +54,13 @@ typedef xmlXIncludeRef *xmlXIncludeRefPtr;
 struct _xmlXIncludeRef {
     xmlChar              *URI; /* the fully resolved resource URL */
     xmlChar         *fragment; /* the fragment in the URI */
     xmlDocPtr		  doc; /* the parsed document */
     xmlNodePtr            ref; /* the node making the reference in the source */
     xmlNodePtr            inc; /* the included copy */
     int                   xml; /* xml or txt */
     int                 count; /* how many refs use that specific doc */
-    int		         skip; /* skip in case of errors */
     int	             fallback; /* fallback was loaded */
+    int		      emptyFb; /* flag to show fallback empty */
 };
 
 struct _xmlXIncludeCtxt {
@@ -1962,52 +1962,55 @@ static int
 xmlXIncludeLoadFallback(xmlXIncludeCtxtPtr ctxt, xmlNodePtr fallback, int nr) {
     xmlXIncludeCtxtPtr newctxt;
     int ret = 0;
     int oldNbErrors = ctxt->nbErrors;
 
     if ((fallback == NULL) || (fallback->type == XML_NAMESPACE_DECL) ||
         (ctxt == NULL))
 	return(-1);
     if (fallback->children != NULL) {
 	/*
 	 * It's possible that the fallback also has 'includes'
 	 * (Bug 129969), so we re-process the fallback just in case
 	 */
 	newctxt = xmlXIncludeNewContext(ctxt->doc);
 	if (newctxt == NULL)
 	    return (-1);
 	newctxt->_private = ctxt->_private;
 	newctxt->base = xmlStrdup(ctxt->base);	/* Inherit the base from the existing context */
 	xmlXIncludeSetFlags(newctxt, ctxt->parseFlags);
         newctxt->incTotal = ctxt->incTotal;
         if (xmlXIncludeDoProcess(newctxt, ctxt->doc, fallback, 1) < 0)
             ret = -1;
         ctxt->incTotal = newctxt->incTotal;
 	if (ctxt->nbErrors > oldNbErrors)
 	    ret = -1;
 	xmlXIncludeFreeContext(newctxt);
 
 	ctxt->incTab[nr]->inc = xmlDocCopyNodeList(ctxt->doc,
 	                                           fallback->children);
+        if (ctxt->incTab[nr]->inc == NULL)
+            ctxt->incTab[nr]->emptyFb = 1;
     } else {
         ctxt->incTab[nr]->inc = NULL;
+	ctxt->incTab[nr]->emptyFb = 1;	/* flag empty callback */
     }
     ctxt->incTab[nr]->fallback = 1;
     return(ret);
 }
 
 /************************************************************************
  *									*
  *			XInclude Processing				*
  *									*
  ************************************************************************/
 
 /**
  * xmlXIncludePreProcessNode:
  * @ctxt: an XInclude context
  * @node: an XInclude node
  *
  * Implement the XInclude preprocessing, currently just adding the element
  * for further processing.
  *
  * Returns the result list or NULL in case of error
  */
@@ -2030,156 +2033,155 @@ static int
 xmlXIncludeLoadNode(xmlXIncludeCtxtPtr ctxt, int nr) {
     xmlNodePtr cur;
     xmlChar *href;
     xmlChar *parse;
     xmlChar *base;
     xmlChar *oldBase;
     xmlChar *URI;
     int xml = 1; /* default Issue 64 */
     int ret;
 
     if (ctxt == NULL)
 	return(-1);
     if ((nr < 0) || (nr >= ctxt->incNr))
 	return(-1);
     cur = ctxt->incTab[nr]->ref;
     if (cur == NULL)
 	return(-1);
 
     /*
      * read the attributes
      */
     href = xmlXIncludeGetProp(ctxt, cur, XINCLUDE_HREF);
     if (href == NULL) {
 	href = xmlStrdup(BAD_CAST ""); /* @@@@ href is now optional */
 	if (href == NULL)
 	    return(-1);
     }
     parse = xmlXIncludeGetProp(ctxt, cur, XINCLUDE_PARSE);
     if (parse != NULL) {
 	if (xmlStrEqual(parse, XINCLUDE_PARSE_XML))
 	    xml = 1;
 	else if (xmlStrEqual(parse, XINCLUDE_PARSE_TEXT))
 	    xml = 0;
 	else {
 	    xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	                   XML_XINCLUDE_PARSE_VALUE,
 			   "invalid value %s for 'parse'\n", parse);
 	    if (href != NULL)
 		xmlFree(href);
 	    if (parse != NULL)
 		xmlFree(parse);
 	    return(-1);
 	}
     }
 
     /*
      * compute the URI
      */
     base = xmlNodeGetBase(ctxt->doc, cur);
     if (base == NULL) {
 	URI = xmlBuildURI(href, ctxt->doc->URL);
     } else {
 	URI = xmlBuildURI(href, base);
     }
     if (URI == NULL) {
 	xmlChar *escbase;
 	xmlChar *eschref;
 	/*
 	 * Some escaping may be needed
 	 */
 	escbase = xmlURIEscape(base);
 	eschref = xmlURIEscape(href);
 	URI = xmlBuildURI(eschref, escbase);
 	if (escbase != NULL)
 	    xmlFree(escbase);
 	if (eschref != NULL)
 	    xmlFree(eschref);
     }
     if (URI == NULL) {
 	xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	               XML_XINCLUDE_HREF_URI, "failed build URL\n", NULL);
 	if (parse != NULL)
 	    xmlFree(parse);
 	if (href != NULL)
 	    xmlFree(href);
 	if (base != NULL)
 	    xmlFree(base);
 	return(-1);
     }
 #ifdef DEBUG_XINCLUDE
     xmlGenericError(xmlGenericErrorContext, "parse: %s\n",
 	    xml ? "xml": "text");
     xmlGenericError(xmlGenericErrorContext, "URI: %s\n", URI);
 #endif
 
     /*
      * Save the base for this include (saving the current one)
      */
     oldBase = ctxt->base;
     ctxt->base = base;
 
     if (xml) {
 	ret = xmlXIncludeLoadDoc(ctxt, URI, nr);
 	/* xmlXIncludeGetFragment(ctxt, cur, URI); */
     } else {
 	ret = xmlXIncludeLoadTxt(ctxt, URI, nr);
     }
 
     /*
      * Restore the original base before checking for fallback
      */
     ctxt->base = oldBase;
 
     if (ret < 0) {
 	xmlNodePtr children;
 
 	/*
 	 * Time to try a fallback if available
 	 */
 #ifdef DEBUG_XINCLUDE
 	xmlGenericError(xmlGenericErrorContext, "error looking for fallback\n");
 #endif
 	children = cur->children;
 	while (children != NULL) {
 	    if ((children->type == XML_ELEMENT_NODE) &&
 		(children->ns != NULL) &&
 		(xmlStrEqual(children->name, XINCLUDE_FALLBACK)) &&
 		((xmlStrEqual(children->ns->href, XINCLUDE_NS)) ||
 		 (xmlStrEqual(children->ns->href, XINCLUDE_OLD_NS)))) {
 		ret = xmlXIncludeLoadFallback(ctxt, children, nr);
 		break;
 	    }
 	    children = children->next;
 	}
     }
     if (ret < 0) {
-        ctxt->incTab[nr]->skip = 1;
 	xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	               XML_XINCLUDE_NO_FALLBACK,
 		       "could not load %s, and no fallback was found\n",
 		       URI);
     }
 
     /*
      * Cleanup
      */
     if (URI != NULL)
 	xmlFree(URI);
     if (parse != NULL)
 	xmlFree(parse);
     if (href != NULL)
 	xmlFree(href);
     if (base != NULL)
 	xmlFree(base);
     return(0);
 }
 
 /**
  * xmlXIncludeIncludeNode:
  * @ctxt: an XInclude context
  * @nr: the node number
  *
  * Implement the infoset replacement for the given node
  *
  * Returns 0 if substitution succeeded, -1 if some processing failed
  */
@@ -2187,100 +2189,101 @@ static int
 xmlXIncludeIncludeNode(xmlXIncludeCtxtPtr ctxt, int nr) {
     xmlNodePtr cur, end, list, tmp;
 
     if (ctxt == NULL)
 	return(-1);
     if ((nr < 0) || (nr >= ctxt->incNr))
 	return(-1);
     cur = ctxt->incTab[nr]->ref;
     if ((cur == NULL) || (cur->type == XML_NAMESPACE_DECL))
 	return(-1);
 
     list = ctxt->incTab[nr]->inc;
     ctxt->incTab[nr]->inc = NULL;
+    ctxt->incTab[nr]->emptyFb = 0;
 
     /*
      * Check against the risk of generating a multi-rooted document
      */
     if ((cur->parent != NULL) &&
 	(cur->parent->type != XML_ELEMENT_NODE)) {
 	int nb_elem = 0;
 
 	tmp = list;
 	while (tmp != NULL) {
 	    if (tmp->type == XML_ELEMENT_NODE)
 		nb_elem++;
 	    tmp = tmp->next;
 	}
 	if (nb_elem > 1) {
 	    xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	                   XML_XINCLUDE_MULTIPLE_ROOT,
 		       "XInclude error: would result in multiple root nodes\n",
 			   NULL);
             xmlFreeNodeList(list);
 	    return(-1);
 	}
     }
 
     if (ctxt->parseFlags & XML_PARSE_NOXINCNODE) {
 	/*
 	 * Add the list of nodes
 	 */
 	while (list != NULL) {
 	    end = list;
 	    list = list->next;
 
 	    xmlAddPrevSibling(cur, end);
 	}
 	xmlUnlinkNode(cur);
 	xmlFreeNode(cur);
     } else {
         xmlNodePtr child, next;
 
 	/*
 	 * Change the current node as an XInclude start one, and add an
 	 * XInclude end one
 	 */
         if (ctxt->incTab[nr]->fallback)
             xmlUnsetProp(cur, BAD_CAST "href");
 	cur->type = XML_XINCLUDE_START;
         /* Remove fallback children */
         for (child = cur->children; child != NULL; child = next) {
             next = child->next;
             xmlUnlinkNode(child);
             xmlFreeNode(child);
         }
 	end = xmlNewDocNode(cur->doc, cur->ns, cur->name, NULL);
 	if (end == NULL) {
 	    xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	                   XML_XINCLUDE_BUILD_FAILED,
 			   "failed to build node\n", NULL);
             xmlFreeNodeList(list);
 	    return(-1);
 	}
 	end->type = XML_XINCLUDE_END;
 	xmlAddNextSibling(cur, end);
 
 	/*
 	 * Add the list of nodes
 	 */
 	while (list != NULL) {
 	    cur = list;
 	    list = list->next;
 
 	    xmlAddPrevSibling(end, cur);
 	}
     }
 
 
     return(0);
 }
 
 /**
  * xmlXIncludeTestNode:
  * @ctxt: the XInclude processing context
  * @node: an XInclude node
  *
  * test if the node is an XInclude node
  *
  * Returns 1 true, 0 otherwise
  */
@@ -2367,113 +2370,114 @@ static int
 xmlXIncludeDoProcess(xmlXIncludeCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr tree,
                      int skipRoot) {
     xmlNodePtr cur;
     int ret = 0;
     int i, start;
 
     if ((doc == NULL) || (tree == NULL) || (tree->type == XML_NAMESPACE_DECL))
 	return(-1);
     if ((skipRoot) && (tree->children == NULL))
         return(-1);
     if (ctxt == NULL)
 	return(-1);
 
     if (doc->URL != NULL) {
 	ret = xmlXIncludeURLPush(ctxt, doc->URL);
 	if (ret < 0)
 	    return(-1);
     }
     start = ctxt->incNr;
 
     /*
      * TODO: The phases must run separately for recursive inclusions.
      *
      * - Phase 1 should start with top-level XInclude nodes, load documents,
      *   execute XPointer expressions, then process only the result nodes
      *   (not whole document, see bug #324081) and only for phase 1
      *   recursively. We will need a backreference from xmlNodes to
      *   xmlIncludeRefs to detect references that were already visited.
      *   This can also be used for proper cycle detection, see bug #344240.
      *
      * - Phase 2 should visit all top-level XInclude nodes and expand
      *   possible subreferences in the replacement recursively.
      *
      * - Phase 3 should finally replace the top-level XInclude nodes.
      *   It could also be run together with phase 2.
      */
 
     /*
      * First phase: lookup the elements in the document
      */
     if (skipRoot)
         cur = tree->children;
     else
         cur = tree;
     do {
 	/* TODO: need to work on entities -> stack */
         if (xmlXIncludeTestNode(ctxt, cur) == 1) {
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
             /*
              * Avoid superlinear expansion by limiting the total number
              * of replacements.
              */
             if (ctxt->incTotal >= 20)
                 return(-1);
 #endif
             ctxt->incTotal++;
             xmlXIncludePreProcessNode(ctxt, cur);
         } else if ((cur->children != NULL) &&
                    (cur->children->type != XML_ENTITY_DECL) &&
                    (cur->children->type != XML_XINCLUDE_START) &&
                    (cur->children->type != XML_XINCLUDE_END)) {
             cur = cur->children;
             continue;
         }
         do {
             if (cur == tree)
                 break;
             if (cur->next != NULL) {
                 cur = cur->next;
                 break;
             }
             cur = cur->parent;
         } while (cur != NULL);
     } while ((cur != NULL) && (cur != tree));
 
     /*
      * Second Phase : collect the infosets fragments
      */
     for (i = start;i < ctxt->incNr; i++) {
         xmlXIncludeLoadNode(ctxt, i);
 	ret++;
     }
 
     /*
      * Third phase: extend the original document infoset.
      *
      * Originally we bypassed the inclusion if there were any errors
      * encountered on any of the XIncludes.  A bug was raised (bug
      * 132588) requesting that we output the XIncludes without error,
      * so the check for inc!=NULL || xptr!=NULL was put in.  This may
      * give some other problems in the future, but for now it seems to
      * work ok.
      *
      */
     for (i = ctxt->incBase;i < ctxt->incNr; i++) {
-	if (ctxt->incTab[i]->skip == 0)
+	if ((ctxt->incTab[i]->inc != NULL) ||
+	    (ctxt->incTab[i]->emptyFb != 0))	/* (empty fallback) */
 	    xmlXIncludeIncludeNode(ctxt, i);
     }
 
     if (doc->URL != NULL)
 	xmlXIncludeURLPop(ctxt);
     return(ret);
 }
 
 /**
  * xmlXIncludeSetFlags:
  * @ctxt:  an XInclude processing context
  * @flags: a set of xmlParserOption used for parsing XML includes
  *
  * Set the flags used for further processing of XML resources.
  *
  * Returns 0 in case of success and -1 in case of error.
  */
