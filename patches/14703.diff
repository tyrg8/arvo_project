commit 5724138c01c616f8327e5be5156f56290c9a395c
Author: Albert Astals Cid <aacid@kde.org>
Date:   Mon May 13 19:34:16 2019 +0200

    KAr::openArchive: Protect against Heap-buffer-overflow in broken files
    
    Summary: If size is negative there's no need to continue, file is broken
    
    Reviewers: apol
    
    Reviewed By: apol
    
    Subscribers: apol, kde-frameworks-devel
    
    Tags: #frameworks
    
    Differential Revision: https://phabricator.kde.org/D21149

diff --git a/src/kar.cpp b/src/kar.cpp
index 4960c84..eb87eea 100644
--- a/src/kar.cpp
+++ b/src/kar.cpp
@@ -92,93 +92,98 @@ bool KAr::doWriteSymLink(const QString &, const QString &, const QString &,
 bool KAr::openArchive(QIODevice::OpenMode mode)
 {
     // Open archive
 
     if (mode == QIODevice::WriteOnly) {
         return true;
     }
     if (mode != QIODevice::ReadOnly && mode != QIODevice::ReadWrite) {
         setErrorString(tr("Unsupported mode %1").arg(mode));
         return false;
     }
 
     QIODevice *dev = device();
     if (!dev) {
         return false;
     }
 
     QByteArray magic = dev->read(7);
     if (magic != "!<arch>") {
         setErrorString(tr("Invalid main magic"));
         return false;
     }
 
     char *ar_longnames = nullptr;
     while (! dev->atEnd()) {
         QByteArray ar_header;
         ar_header.resize(60);
 
         dev->seek(dev->pos() + (2 - (dev->pos() % 2)) % 2);   // Ar headers are padded to byte boundary
 
         if (dev->read(ar_header.data(), 60) != 60) {   // Read ar header
             //qCWarning(KArchiveLog) << "Couldn't read header";
             delete[] ar_longnames;
             //return false;
             return true; // Probably EOF / trailing junk
         }
 
         if (!ar_header.endsWith("`\n")) { // Check header magic // krazy:exclude=strings
             setErrorString(tr("Invalid magic"));
             delete[] ar_longnames;
             return false;
         }
 
         QByteArray name = ar_header.mid(0, 16);   // Process header
         const int date = ar_header.mid(16, 12).trimmed().toInt();
         //const int uid = ar_header.mid( 28, 6 ).trimmed().toInt();
         //const int gid = ar_header.mid( 34, 6 ).trimmed().toInt();
         const int mode = ar_header.mid(40, 8).trimmed().toInt();
         const qint64 size = ar_header.mid(48, 10).trimmed().toInt();
+        if (size < 0) {
+            setErrorString(tr("Invalid size"));
+            delete[] ar_longnames;
+            return false;
+        }
 
         bool skip_entry = false; // Deal with special entries
         if (name.mid(0, 1) == "/") {
             if (name.mid(1, 1) == "/") { // Longfilename table entry
                 delete[] ar_longnames;
                 ar_longnames = new char[size + 1];
                 ar_longnames[size] = '\0';
                 dev->read(ar_longnames, size);
                 skip_entry = true;
                 //qCDebug(KArchiveLog) << "Read in longnames entry";
             } else if (name.mid(1, 1) == " ") { // Symbol table entry
                 //qCDebug(KArchiveLog) << "Skipped symbol entry";
                 dev->seek(dev->pos() + size);
                 skip_entry = true;
             } else { // Longfilename
                 //qCDebug(KArchiveLog) << "Longfilename #" << name.mid(1, 15).toInt();
                 if (! ar_longnames) {
                     setErrorString(tr("Invalid longfilename reference"));
                     delete[] ar_longnames;
                     return false;
                 }
                 name = &ar_longnames[name.mid(1, 15).toInt()];
                 name = name.left(name.indexOf("/"));
             }
         }
         if (skip_entry) {
             continue;
         }
 
         name = name.trimmed(); // Process filename
         name.replace('/', QByteArray());
         //qCDebug(KArchiveLog) << "Filename: " << name << " Size: " << size;
 
         KArchiveEntry *entry = new KArchiveFile(this, QString::fromLocal8Bit(name.constData()), mode, KArchivePrivate::time_tToDateTime(date),
                                                 rootDir()->user(), rootDir()->group(), /*symlink*/ QString(),
                                                 dev->pos(), size);
         rootDir()->addEntry(entry); // Ar files don't support directories, so everything in root
 
         dev->seek(dev->pos() + size);   // Skip contents
     }
     delete[] ar_longnames;
 
     return true;
 }
