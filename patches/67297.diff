commit dd0bc880bca3743bacf62e7f021a4eacd74b7fcd
Author: Philip Hazel <Philip.Hazel@gmail.com>
Date:   Sat Mar 9 17:01:03 2024 +0000

    Fix overwriting bug in fuzzsupport when text is very short

diff --git a/ChangeLog b/ChangeLog
index f2b0d7a..5aca4d1 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -8,7 +8,7 @@ Version 10.44 xx-xxx-2024
 -------------------------
 
 1. If a pattern contained a variable-length lookbehind in which the first
-branch was not the one with the shortest minimym length, and the lookbehind
+branch was not the one with the shortest minimum length, and the lookbehind
 contained a capturing group, and elsewhere in the pattern there was another
 lookbehind that referenced that group, the pattern was incorrectly compiled,
 leading to unpredictable results, including crashes in JIT compiling. An
diff --git a/src/pcre2_fuzzsupport.c b/src/pcre2_fuzzsupport.c
index cfa361e..20218ca 100644
--- a/src/pcre2_fuzzsupport.c
+++ b/src/pcre2_fuzzsupport.c
@@ -295,69 +295,69 @@ Start the scan at the second character so there can be a lookbehind for a
 backslash, and end it before the end so that the next character can be checked
 for an opening brace. */
 
-for (size_t i = 1; i < size - 2; i++)
+if (size > 3) for (size_t i = 1; i < size - 2; i++)
   {
   size_t j;
-
+  
   if (wdata[i] != ')' || wdata[i-1] == '\\' || wdata[i+1] != '{') continue;
   i++;  /* Points to '{' */
 
   /* Loop for two values a quantifier. Offset i points to brace or comma at the
   start of the loop.*/
 
   for (int ii = 0; ii < 2; ii++)
     {
     int q = 0;
 
     /* Ignore leading spaces */
 
     while (wdata[i+1] == ' ' || wdata[i+1] == '\t')
       {
       i++;
       if (i >= size - 1) goto END_QSCAN;
       }
 
     /* Scan for a number ending in brace or comma in the first iteration,
     optionally preceded by space. */
 
     for (j = i + 1; j < size && j < i + 7; j++)
       {
       if (wdata[j] == ' ' || wdata[j] == '\t')
         {
         do j++; while (j < size && (wdata[j] == ' ' || wdata[j] == '\t'));
         if (wdata[j] != '}' && wdata[j] != ',') goto OUTERLOOP;
         }
       if (wdata[j] == '}' || (ii == 0 && wdata[j] == ',')) break;
       if (wdata[j] < '0' || wdata[j] > '9') goto OUTERLOOP;
       q = q * 10 + wdata[j] - '0';
       }
 
     /* Hit ',' or '}' or read 6 digits. Six digits is a number > 65536 which is
     the maximum quantifier. Leave such numbers alone. */
 
     if (j >= i + 7 || q > 65535) goto OUTERLOOP;
 
     /* Limit the quantifier size to 10 */
 
     if (q > 10)
       {
 #ifdef STANDALONE
       printf("Reduced quantifier value %d to 10.\n", q);
 #endif
       for (size_t k = i + 1; k < j; k++) wdata[k] = '0';
       wdata[j - 2] = '1';
       }
 
     /* Advance to end of number and break if reached closing brace (continue
     after comma, which is only valid in the first time round this loop). */
 
     i = j;
     if (wdata[i] == '}') break;
     }
 
   /* Continue along the data string */
 
   OUTERLOOP:
   i = j;
   continue;
   }
