commit 8f61427880c061b5d13f55cedc138220a16f9aa3
Merge: 1791eac7f 1ec3dbd11
Author: Kim Kulling <kimkulling@users.noreply.github.com>
Date:   Tue Jun 27 22:08:29 2023 +0200

    Merge pull request #5128 from sashashura/5093294573486080
    
    Fix UNKNOWN READ in Assimp::MDLImporter::ParseSkinLump_3DGS_MDL7

diff --git a/code/AssetLib/MDL/MDLMaterialLoader.cpp b/code/AssetLib/MDL/MDLMaterialLoader.cpp
index f00b6bd03..3d39fa645 100644
--- a/code/AssetLib/MDL/MDLMaterialLoader.cpp
+++ b/code/AssetLib/MDL/MDLMaterialLoader.cpp
@@ -442,239 +442,241 @@ void MDLImporter::CreateTexture_3DGS_MDL5(const unsigned char *szData,
 // ------------------------------------------------------------------------------------------------
 // Get a skin from a MDL7 file - more complex than all other subformats
 void MDLImporter::ParseSkinLump_3DGS_MDL7(
         const unsigned char *szCurrent,
         const unsigned char **szCurrentOut,
         aiMaterial *pcMatOut,
         unsigned int iType,
         unsigned int iWidth,
         unsigned int iHeight) {
     std::unique_ptr<aiTexture> pcNew;
     if (szCurrent == nullptr) {
         return;
     }
 
     // get the type of the skin
     unsigned int iMasked = (unsigned int)(iType & 0xF);
 
     if (0x1 == iMasked) {
         // ***** REFERENCE TO ANOTHER SKIN INDEX *****
         int referrer = (int)iWidth;
         pcMatOut->AddProperty<int>(&referrer, 1, AI_MDL7_REFERRER_MATERIAL);
     } else if (0x6 == iMasked) {
         // ***** EMBEDDED DDS FILE *****
         if (1 != iHeight) {
             ASSIMP_LOG_WARN("Found a reference to an embedded DDS texture, "
                             "but texture height is not equal to 1, which is not supported by MED");
         }
         if (iWidth == 0) {
             ASSIMP_LOG_ERROR("Found a reference to an embedded DDS texture, but texture width is zero, aborting import.");
             return;
         }
 
         pcNew.reset(new aiTexture);
         pcNew->mHeight = 0;
         pcNew->mWidth = iWidth;
 
         // place a proper format hint
         pcNew->achFormatHint[0] = 'd';
         pcNew->achFormatHint[1] = 'd';
         pcNew->achFormatHint[2] = 's';
         pcNew->achFormatHint[3] = '\0';
 
+        SizeCheck(szCurrent + pcNew->mWidth);
+
         pcNew->pcData = (aiTexel *)new unsigned char[pcNew->mWidth];
         memcpy(pcNew->pcData, szCurrent, pcNew->mWidth);
         szCurrent += iWidth;
     } else if (0x7 == iMasked) {
         // ***** REFERENCE TO EXTERNAL FILE *****
         if (1 != iHeight) {
             ASSIMP_LOG_WARN("Found a reference to an external texture, "
                             "but texture height is not equal to 1, which is not supported by MED");
         }
 
         aiString szFile;
         const size_t iLen = strlen((const char *)szCurrent);
         size_t iLen2 = iLen > (MAXLEN - 1) ? (MAXLEN - 1) : iLen;
         memcpy(szFile.data, (const char *)szCurrent, iLen2);
         szFile.data[iLen2] = '\0';
         szFile.length = static_cast<ai_uint32>(iLen2);
 
         szCurrent += iLen2 + 1;
 
         // place this as diffuse texture
         pcMatOut->AddProperty(&szFile, AI_MATKEY_TEXTURE_DIFFUSE(0));
     } else if (iMasked || !iType || (iType && iWidth && iHeight)) {
         pcNew.reset(new aiTexture());
         if (!iHeight || !iWidth) {
             ASSIMP_LOG_WARN("Found embedded texture, but its width "
                             "an height are both 0. Is this a joke?");
 
             // generate an empty chess pattern
             pcNew->mWidth = pcNew->mHeight = 8;
             pcNew->pcData = new aiTexel[64];
             for (unsigned int x = 0; x < 8; ++x) {
                 for (unsigned int y = 0; y < 8; ++y) {
                     const bool bSet = ((0 == x % 2 && 0 != y % 2) ||
                                        (0 != x % 2 && 0 == y % 2));
 
                     aiTexel *pc = &pcNew->pcData[y * 8 + x];
                     pc->r = pc->b = pc->g = (bSet ? 0xFF : 0);
                     pc->a = 0xFF;
                 }
             }
         } else {
             // it is a standard color texture. Fill in width and height
             // and call the same function we used for loading MDL5 files
 
             pcNew->mWidth = iWidth;
             pcNew->mHeight = iHeight;
 
             unsigned int iSkip = 0;
             ParseTextureColorData(szCurrent, iMasked, &iSkip, pcNew.get());
 
             // skip length of texture data
             szCurrent += iSkip;
         }
     }
 
     // sometimes there are MDL7 files which have a monochrome
     // texture instead of material colors ... possible they have
     // been converted to MDL7 from other formats, such as MDL5
     aiColor4D clrTexture;
     if (pcNew)
         clrTexture = ReplaceTextureWithColor(pcNew.get());
     else
         clrTexture.r = get_qnan();
 
     // check whether a material definition is contained in the skin
     if (iType & AI_MDL7_SKINTYPE_MATERIAL) {
         BE_NCONST MDL::Material_MDL7 *pcMatIn = (BE_NCONST MDL::Material_MDL7 *)szCurrent;
         szCurrent = (unsigned char *)(pcMatIn + 1);
         VALIDATE_FILE_SIZE(szCurrent);
 
         aiColor3D clrTemp;
 
 #define COLOR_MULTIPLY_RGB()         \
     if (is_not_qnan(clrTexture.r)) { \
         clrTemp.r *= clrTexture.r;   \
         clrTemp.g *= clrTexture.g;   \
         clrTemp.b *= clrTexture.b;   \
     }
 
         // read diffuse color
         clrTemp.r = pcMatIn->Diffuse.r;
         AI_SWAP4(clrTemp.r);
         clrTemp.g = pcMatIn->Diffuse.g;
         AI_SWAP4(clrTemp.g);
         clrTemp.b = pcMatIn->Diffuse.b;
         AI_SWAP4(clrTemp.b);
         COLOR_MULTIPLY_RGB();
         pcMatOut->AddProperty<aiColor3D>(&clrTemp, 1, AI_MATKEY_COLOR_DIFFUSE);
 
         // read specular color
         clrTemp.r = pcMatIn->Specular.r;
         AI_SWAP4(clrTemp.r);
         clrTemp.g = pcMatIn->Specular.g;
         AI_SWAP4(clrTemp.g);
         clrTemp.b = pcMatIn->Specular.b;
         AI_SWAP4(clrTemp.b);
         COLOR_MULTIPLY_RGB();
         pcMatOut->AddProperty<aiColor3D>(&clrTemp, 1, AI_MATKEY_COLOR_SPECULAR);
 
         // read ambient color
         clrTemp.r = pcMatIn->Ambient.r;
         AI_SWAP4(clrTemp.r);
         clrTemp.g = pcMatIn->Ambient.g;
         AI_SWAP4(clrTemp.g);
         clrTemp.b = pcMatIn->Ambient.b;
         AI_SWAP4(clrTemp.b);
         COLOR_MULTIPLY_RGB();
         pcMatOut->AddProperty<aiColor3D>(&clrTemp, 1, AI_MATKEY_COLOR_AMBIENT);
 
         // read emissive color
         clrTemp.r = pcMatIn->Emissive.r;
         AI_SWAP4(clrTemp.r);
         clrTemp.g = pcMatIn->Emissive.g;
         AI_SWAP4(clrTemp.g);
         clrTemp.b = pcMatIn->Emissive.b;
         AI_SWAP4(clrTemp.b);
         pcMatOut->AddProperty<aiColor3D>(&clrTemp, 1, AI_MATKEY_COLOR_EMISSIVE);
 
 #undef COLOR_MULITPLY_RGB
 
         // FIX: Take the opacity from the ambient color.
         // The doc say something else, but it is fact that MED exports the
         // opacity like this .... oh well.
         clrTemp.r = pcMatIn->Ambient.a;
         AI_SWAP4(clrTemp.r);
         if (is_not_qnan(clrTexture.r)) {
             clrTemp.r *= clrTexture.a;
         }
         pcMatOut->AddProperty<ai_real>(&clrTemp.r, 1, AI_MATKEY_OPACITY);
 
         // read phong power
         int iShadingMode = (int)aiShadingMode_Gouraud;
         AI_SWAP4(pcMatIn->Power);
         if (0.0f != pcMatIn->Power) {
             iShadingMode = (int)aiShadingMode_Phong;
             // pcMatIn is packed, we can't form pointers to its members
             float power = pcMatIn->Power;
             pcMatOut->AddProperty<float>(&power, 1, AI_MATKEY_SHININESS);
         }
         pcMatOut->AddProperty<int>(&iShadingMode, 1, AI_MATKEY_SHADING_MODEL);
     } else if (is_not_qnan(clrTexture.r)) {
         pcMatOut->AddProperty<aiColor4D>(&clrTexture, 1, AI_MATKEY_COLOR_DIFFUSE);
         pcMatOut->AddProperty<aiColor4D>(&clrTexture, 1, AI_MATKEY_COLOR_SPECULAR);
     }
     // if the texture could be replaced by a single material color
     // we don't need the texture anymore
     if (is_not_qnan(clrTexture.r)) {
         pcNew.reset();
     }
 
     // If an ASCII effect description (HLSL?) is contained in the file,
     // we can simply ignore it ...
     if (iType & AI_MDL7_SKINTYPE_MATERIAL_ASCDEF) {
         VALIDATE_FILE_SIZE(szCurrent);
         int32_t iMe = *((int32_t *)szCurrent);
         AI_SWAP4(iMe);
         szCurrent += sizeof(char) * iMe + sizeof(int32_t);
         VALIDATE_FILE_SIZE(szCurrent);
     }
 
     // If an embedded texture has been loaded setup the corresponding
     // data structures in the aiScene instance
     if (pcNew && pScene->mNumTextures <= 999) {
         // place this as diffuse texture
         char current[5];
         ai_snprintf(current, 5, "*%i", this->pScene->mNumTextures);
 
         aiString szFile;
         const size_t iLen = strlen((const char *)current);
         ::memcpy(szFile.data, (const char *)current, iLen + 1);
         szFile.length = (ai_uint32)iLen;
 
         pcMatOut->AddProperty(&szFile, AI_MATKEY_TEXTURE_DIFFUSE(0));
 
         // store the texture
         if (!pScene->mNumTextures) {
             pScene->mNumTextures = 1;
             pScene->mTextures = new aiTexture *[1];
             pScene->mTextures[0] = pcNew.release();
         } else {
             aiTexture **pc = pScene->mTextures;
             pScene->mTextures = new aiTexture *[pScene->mNumTextures + 1];
             for (unsigned int i = 0; i < pScene->mNumTextures; ++i) {
                 pScene->mTextures[i] = pc[i];
             }
 
             pScene->mTextures[pScene->mNumTextures] = pcNew.release();
             pScene->mNumTextures++;
             delete[] pc;
         }
     }
     VALIDATE_FILE_SIZE(szCurrent);
     *szCurrentOut = szCurrent;
 }
 
 // ------------------------------------------------------------------------------------------------
 // Skip a skin lump
