commit 143a12bd5a5402231bde748cbbdc22bb3984a522
Author: Alan Modra <amodra@gmail.com>
Date:   Fri Apr 28 11:11:09 2023 +0930

    Re: Keeping track of rs6000-coff archive element pointers
    
    Commit de7b90610e9e left a hole in the element checking, explained by
    the comment added to _bfd_xcoff_openr_next_archived_file.  While
    fixing this, tidy some types used to hold unsigned values so that
    casts are not needed to avoid signed/unsigned comparison warnings.
    Also tidy a few things in xcoff.h.
    
    bfd/
            * coff-rs6000.c (_bfd_xcoff_openr_next_archived_file): Check
            that we aren't pointing back at the last element.  Make
            filestart a ufile_ptr.  Update for xcoff_artdata change.
            (_bfd_strntol, _bfd_strntoll): Return unsigned values.
            (_bfd_xcoff_slurp_armap): Make off a ufile_ptr.
            (add_ranges): Update for xcoff_artdata change.
            * libbfd-in.h (struct artdata): Make first_file_filepos a
            ufile_ptr.
            * libbfd.h: Regenerate.
    include/
            * coff/xcoff.h (struct xcoff_artdata): Replace min_elt with
            ar_hdr_size.
            (xcoff_big_format_p): In the !SMALL_ARCHIVE case return true
            for anything but a small archive.

diff --git a/bfd/coff-rs6000.c b/bfd/coff-rs6000.c
index 3b451912df7..421dc8f7ee5 100644
--- a/bfd/coff-rs6000.c
+++ b/bfd/coff-rs6000.c
@@ -1294,7 +1294,7 @@ _bfd_xcoff_reloc_name_lookup (bfd *abfd ATTRIBUTE_UNUSED,
    take a maximum length as an additional parameter.  Also - just to save space,
    we omit the endptr return parameter, since we know that it is never used.  */
 
-static long
+static unsigned long
 _bfd_strntol (const char * nptr, int base, unsigned int maxlen)
 {
   char buf[24]; /* Should be enough.  */
@@ -1306,7 +1306,7 @@ _bfd_strntol (const char * nptr, int base, unsigned int maxlen)
   return strtol (buf, NULL, base);
 }
 
-static long long
+static unsigned long long
 _bfd_strntoll (const char * nptr, int base, unsigned int maxlen)
 {
   char buf[32]; /* Should be enough.  */
@@ -1338,163 +1338,163 @@ _bfd_strntoll (const char * nptr, int base, unsigned int maxlen)
 bool
 _bfd_xcoff_slurp_armap (bfd *abfd)
 {
-  file_ptr off;
+  ufile_ptr off;
   size_t namlen;
   bfd_size_type sz;
   bfd_byte *contents, *cend;
   bfd_vma c, i;
   carsym *arsym;
   bfd_byte *p;
 
   if (x_artdata (abfd) == NULL)
     {
       abfd->has_armap = false;
       return true;
     }
 
   if (! xcoff_big_format_p (abfd))
     {
       /* This is for the old format.  */
       struct xcoff_ar_hdr hdr;
 
       GET_VALUE_IN_FIELD (off, x_artdata (abfd)->u.hdr.symoff, 10);
       if (off == 0)
 	{
 	  abfd->has_armap = false;
 	  return true;
 	}
 
       if (bfd_seek (abfd, off, SEEK_SET) != 0)
 	return false;
 
       /* The symbol table starts with a normal archive header.  */
       if (bfd_bread (&hdr, (bfd_size_type) SIZEOF_AR_HDR, abfd)
 	  != SIZEOF_AR_HDR)
 	return false;
 
       /* Skip the name (normally empty).  */
       GET_VALUE_IN_FIELD (namlen, hdr.namlen, 10);
       off = ((namlen + 1) & ~ (size_t) 1) + SXCOFFARFMAG;
       if (bfd_seek (abfd, off, SEEK_CUR) != 0)
 	return false;
 
       GET_VALUE_IN_FIELD (sz, hdr.size, 10);
       if (sz + 1 < 5)
 	{
 	  bfd_set_error (bfd_error_bad_value);
 	  return false;
 	}
 
       /* Read in the entire symbol table.  */
       contents = (bfd_byte *) _bfd_alloc_and_read (abfd, sz + 1, sz);
       if (contents == NULL)
 	return false;
 
       /* Ensure strings are NULL terminated so we don't wander off the
 	 end of the buffer.  */
       contents[sz] = 0;
 
       /* The symbol table starts with a four byte count.  */
       c = H_GET_32 (abfd, contents);
 
       if (c >= sz / 4)
 	{
 	  bfd_set_error (bfd_error_bad_value);
 	  return false;
 	}
 
       bfd_ardata (abfd)->symdefs =
 	((carsym *) bfd_alloc (abfd, c * sizeof (carsym)));
       if (bfd_ardata (abfd)->symdefs == NULL)
 	return false;
 
       /* After the count comes a list of four byte file offsets.  */
       for (i = 0, arsym = bfd_ardata (abfd)->symdefs, p = contents + 4;
 	   i < c;
 	   ++i, ++arsym, p += 4)
 	arsym->file_offset = H_GET_32 (abfd, p);
     }
   else
     {
       /* This is for the new format.  */
       struct xcoff_ar_hdr_big hdr;
 
       GET_VALUE_IN_FIELD (off, x_artdata (abfd)->u.bhdr.symoff, 10);
       if (off == 0)
 	{
 	  abfd->has_armap = false;
 	  return true;
 	}
 
       if (bfd_seek (abfd, off, SEEK_SET) != 0)
 	return false;
 
       /* The symbol table starts with a normal archive header.  */
       if (bfd_bread (&hdr, (bfd_size_type) SIZEOF_AR_HDR_BIG, abfd)
 	  != SIZEOF_AR_HDR_BIG)
 	return false;
 
       /* Skip the name (normally empty).  */
       GET_VALUE_IN_FIELD (namlen, hdr.namlen, 10);
       off = ((namlen + 1) & ~ (size_t) 1) + SXCOFFARFMAG;
       if (bfd_seek (abfd, off, SEEK_CUR) != 0)
 	return false;
 
       GET_VALUE_IN_FIELD (sz, hdr.size, 10);
       if (sz + 1 < 9)
 	{
 	  bfd_set_error (bfd_error_bad_value);
 	  return false;
 	}
 
       /* Read in the entire symbol table.  */
       contents = (bfd_byte *) _bfd_alloc_and_read (abfd, sz + 1, sz);
       if (contents == NULL)
 	return false;
 
       /* Ensure strings are NULL terminated so we don't wander off the
 	 end of the buffer.  */
       contents[sz] = 0;
 
       /* The symbol table starts with an eight byte count.  */
       c = H_GET_64 (abfd, contents);
 
       if (c >= sz / 8)
 	{
 	  bfd_set_error (bfd_error_bad_value);
 	  return false;
 	}
 
       bfd_ardata (abfd)->symdefs =
 	((carsym *) bfd_alloc (abfd, c * sizeof (carsym)));
       if (bfd_ardata (abfd)->symdefs == NULL)
 	return false;
 
       /* After the count comes a list of eight byte file offsets.  */
       for (i = 0, arsym = bfd_ardata (abfd)->symdefs, p = contents + 8;
 	   i < c;
 	   ++i, ++arsym, p += 8)
 	arsym->file_offset = H_GET_64 (abfd, p);
     }
 
   /* After the file offsets come null terminated symbol names.  */
   cend = contents + sz;
   for (i = 0, arsym = bfd_ardata (abfd)->symdefs;
        i < c;
        ++i, ++arsym, p += strlen ((char *) p) + 1)
     {
       if (p >= cend)
 	{
 	  bfd_set_error (bfd_error_bad_value);
 	  return false;
 	}
       arsym->name = (char *) p;
     }
 
   bfd_ardata (abfd)->symdef_count = c;
   abfd->has_armap = true;
 
   return true;
 }
 
 /* See if this is an XCOFF archive.  */
@@ -1611,61 +1611,62 @@ static bool
 add_range (bfd *abfd, ufile_ptr start, ufile_ptr end)
 {
   if (end <= start)
     {
     err:
       bfd_set_error (bfd_error_malformed_archive);
       return false;
     }
 
   /* This list is kept sorted by address.  Find the highest address
      range on the list that ends before the new range starts.  Exit
      the loop with that range in LO, and the mext higher range in HI.  */
   struct ar_ranges *hi = &x_artdata (abfd)->ranges;
   struct ar_ranges *lo = NULL;
   while (hi && hi->end <= start)
     {
       lo = hi;
       hi = hi->next;
     }
 
   if (lo == NULL)
     /* Start overlaps the file header or elements adjacent to it.  */
     goto err;
 
   if (hi && hi->start < end)
     /* Overlap with another element.  */
     goto err;
 
-  unsigned min_elt = x_artdata (abfd)->min_elt;
+  /* A zero size element with a one char name is this big.  */
+  unsigned min_elt = x_artdata (abfd)->ar_hdr_size + 2 + SXCOFFARFMAG;
   if (start - lo->end < min_elt)
     {
       /* Merge into an existing range.  */
       lo->end = end;
       if (hi && hi->start - end < min_elt)
 	{
 	  /* In fact, we can merge two ranges.  */
 	  lo->end = hi->end;
 	  lo->next = hi->next;
 	  /* The list uses bfd_alloc so don't free HI.  */
 	}
       return true;
     }
 
   if (hi && hi->start - end < min_elt)
     {
       /* Merge into an existing range.  */
       hi->start = start;
       return true;
     }
 
   struct ar_ranges *newr = bfd_alloc (abfd, sizeof (*newr));
   if (newr == NULL)
     return false;
   newr->start = start;
   newr->end = end;
   newr->next = hi;
   lo->next = newr;
   return true;
 }
 
 /* Read the archive header in an XCOFF archive.  */
@@ -1757,64 +1758,80 @@ _bfd_xcoff_read_ar_hdr (bfd *abfd)
 bfd *
 _bfd_xcoff_openr_next_archived_file (bfd *archive, bfd *last_file)
 {
-  file_ptr filestart;
+  ufile_ptr filestart;
 
   if (x_artdata (archive) == NULL)
     {
       bfd_set_error (bfd_error_invalid_operation);
       return NULL;
     }
 
   if (! xcoff_big_format_p (archive))
     {
       if (last_file == NULL)
 	{
 	  filestart = bfd_ardata (archive)->first_file_filepos;
-	  if (x_artdata (archive)->min_elt == 0)
+	  if (x_artdata (archive)->ar_hdr_size == 0)
 	    {
 	      x_artdata (archive)->ranges.end = SIZEOF_AR_FILE_HDR;
-	      x_artdata (archive)->min_elt = SIZEOF_AR_HDR + SXCOFFARFMAG + 2;
+	      x_artdata (archive)->ar_hdr_size = SIZEOF_AR_HDR;
 	    }
 	}
       else
 	GET_VALUE_IN_FIELD (filestart, arch_xhdr (last_file)->nextoff, 10);
 
       if (filestart == 0
 	  || EQ_VALUE_IN_FIELD (filestart,
 				x_artdata (archive)->u.hdr.memoff, 10)
 	  || EQ_VALUE_IN_FIELD (filestart,
 				x_artdata (archive)->u.hdr.symoff, 10))
 	{
 	  bfd_set_error (bfd_error_no_more_archived_files);
 	  return NULL;
 	}
     }
   else
     {
       if (last_file == NULL)
 	{
 	  filestart = bfd_ardata (archive)->first_file_filepos;
-	  if (x_artdata (archive)->min_elt == 0)
+	  if (x_artdata (archive)->ar_hdr_size == 0)
 	    {
 	      x_artdata (archive)->ranges.end = SIZEOF_AR_FILE_HDR_BIG;
-	      x_artdata (archive)->min_elt = SIZEOF_AR_HDR_BIG + SXCOFFARFMAG + 2;
+	      x_artdata (archive)->ar_hdr_size = SIZEOF_AR_HDR_BIG;
 	    }
 	}
       else
 	GET_VALUE_IN_FIELD (filestart, arch_xhdr_big (last_file)->nextoff, 10);
 
       if (filestart == 0
 	  || EQ_VALUE_IN_FIELD (filestart,
 				x_artdata (archive)->u.bhdr.memoff, 10)
 	  || EQ_VALUE_IN_FIELD (filestart,
 				x_artdata (archive)->u.bhdr.symoff, 10))
 	{
 	  bfd_set_error (bfd_error_no_more_archived_files);
 	  return NULL;
 	}
     }
 
+  /* Check that we aren't pointing back at the last element.  This is
+     necessary depite the add_range checking in _bfd_xcoff_read_ar_hdr
+     because archive.c leaves the last element open and thus in the
+     archive element cache until the next element is opened.  */
+  if (last_file != NULL)
+    {
+      ufile_ptr laststart = last_file->proxy_origin;
+      laststart -= x_artdata (archive)->ar_hdr_size;
+      laststart -= arch_eltdata (last_file)->extra_size;
+      if (filestart == laststart)
+	{
+	  bfd_set_error (bfd_error_malformed_archive);
+	  return NULL;
+	}
+    }
+
   return _bfd_get_elt_at_filepos (archive, filestart, NULL);
 }
 
 /* Stat an element in an XCOFF archive.  */
diff --git a/bfd/libbfd-in.h b/bfd/libbfd-in.h
index 68b5343fd2e..4305b8416ea 100644
--- a/bfd/libbfd-in.h
+++ b/bfd/libbfd-in.h
@@ -72,25 +72,25 @@ extern unsigned int _bfd_section_id ATTRIBUTE_HIDDEN;
 
 struct artdata
 {
-  file_ptr first_file_filepos;
+  ufile_ptr first_file_filepos;
   /* Speed up searching the armap */
   htab_t cache;
   carsym *symdefs;		/* The symdef entries.  */
   symindex symdef_count;	/* How many there are.  */
   char *extended_names;		/* Clever intel extension.  */
   bfd_size_type extended_names_size; /* Size of extended names.  */
   /* When more compilers are standard C, this can be a time_t.  */
   long  armap_timestamp;	/* Timestamp value written into armap.
 				   This is used for BSD archives to check
 				   that the timestamp is recent enough
 				   for the BSD linker to not complain,
 				   just before we finish writing an
 				   archive.  */
   file_ptr armap_datepos;	/* Position within archive to seek to
 				   rewrite the date field.  */
   void *tdata;			/* Backend specific information.  */
 };
 
 #define bfd_ardata(bfd) ((bfd)->tdata.aout_ar_data)
 
 /* Goes in bfd's arelt_data slot */
diff --git a/bfd/libbfd.h b/bfd/libbfd.h
index bb7f2f1efcf..aceec4ab9c0 100644
--- a/bfd/libbfd.h
+++ b/bfd/libbfd.h
@@ -78,25 +78,25 @@ extern unsigned int _bfd_section_id ATTRIBUTE_HIDDEN;
 
 struct artdata
 {
-  file_ptr first_file_filepos;
+  ufile_ptr first_file_filepos;
   /* Speed up searching the armap */
   htab_t cache;
   carsym *symdefs;		/* The symdef entries.  */
   symindex symdef_count;	/* How many there are.  */
   char *extended_names;		/* Clever intel extension.  */
   bfd_size_type extended_names_size; /* Size of extended names.  */
   /* When more compilers are standard C, this can be a time_t.  */
   long  armap_timestamp;	/* Timestamp value written into armap.
 				   This is used for BSD archives to check
 				   that the timestamp is recent enough
 				   for the BSD linker to not complain,
 				   just before we finish writing an
 				   archive.  */
   file_ptr armap_datepos;	/* Position within archive to seek to
 				   rewrite the date field.  */
   void *tdata;			/* Backend specific information.  */
 };
 
 #define bfd_ardata(bfd) ((bfd)->tdata.aout_ar_data)
 
 /* Goes in bfd's arelt_data slot */
diff --git a/include/coff/xcoff.h b/include/coff/xcoff.h
index 08afc000bf0..7e86cc37d5c 100644
--- a/include/coff/xcoff.h
+++ b/include/coff/xcoff.h
@@ -645,45 +645,45 @@ struct ar_ranges
 /* An archive bfd has tdata pointing to a struct artdata.  The xcoff
    backend has artdata.tdata pointing to the following.  */
 struct xcoff_artdata
 {
   union
   {
     struct xcoff_ar_file_hdr hdr;
     struct xcoff_ar_file_hdr_big bhdr;
   } u;
   struct ar_ranges ranges;
   /* Anything less than this size can't hold an archive element.  */
-  unsigned int min_elt;
+  unsigned int ar_hdr_size;
 };
 
 #define x_artdata(abfd) ((struct xcoff_artdata *) bfd_ardata (abfd)->tdata)
 
 /* We often have to distinguish between the old and big file format.
    u.hdr.magic and u.bhdr.magic have the same size and position.  */
 #ifndef SMALL_ARCHIVE
 /* Creates big archives by default */
 #define xcoff_big_format_p(abfd) \
-  (bfd_ardata (abfd) != NULL				\
-   && (x_artdata (abfd) == NULL			\
-       || x_artdata (abfd)->u.hdr.magic[1] == 'b'))
+  (bfd_ardata (abfd) == NULL			\
+   || x_artdata (abfd) == NULL			\
+   || x_artdata (abfd)->u.hdr.magic[1] != 'a')
 #else
 /* Creates small archives by default. */
 #define xcoff_big_format_p(abfd) \
-  (bfd_ardata (abfd) != NULL				\
+  (bfd_ardata (abfd) != NULL			\
    && x_artdata (abfd) != NULL			\
    && x_artdata (abfd)->u.hdr.magic[1] == 'b')
 #endif
 
 /* We store a copy of the xcoff_ar_hdr in the arelt_data field of an
    archive element.  Similar for the big archive.  */
 #define arch_eltdata(bfd) ((struct areltdata *) ((bfd)->arelt_data))
 #define arch_xhdr(bfd) \
   ((struct xcoff_ar_hdr *) arch_eltdata (bfd)->arch_header)
 #define arch_xhdr_big(bfd) \
   ((struct xcoff_ar_hdr_big *) arch_eltdata (bfd)->arch_header)
 
 /* True if symbols of class CLASS are external.  */
 #define EXTERN_SYM_P(CLASS) \
   ((CLASS) == C_EXT || (CLASS) == C_AIX_WEAKEXT)
 
 #endif /* _INTERNAL_XCOFF_H */
