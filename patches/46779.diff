commit 803484dc3e71379d1cc3e3a2f0c56e3891b1c7bd
Merge: 3bb323fbd 7a24f4c9e
Author: eugene7646 <elivis@basistech.com>
Date:   Wed Aug 17 14:13:17 2022 -0400

    Merge pull request #2726 from sashashura/patch-2
    
    Fixes Heap-buffer-overflow READ in ntfs_make_data_run

diff --git a/tsk/fs/ntfs.c b/tsk/fs/ntfs.c
index 42e5b1736..6f509523e 100644
--- a/tsk/fs/ntfs.c
+++ b/tsk/fs/ntfs.c
@@ -3240,127 +3240,129 @@ static uint8_t
 ntfs_load_bmap(NTFS_INFO * ntfs)
 {
     ssize_t cnt = 0;
     ntfs_attr *attr = NULL;
     ntfs_attr *data_attr = NULL;
     TSK_FS_INFO *fs = NULL;
     ntfs_mft *mft = NULL;
 
     if (ntfs == NULL) {
         goto on_error;
     }
     fs = &ntfs->fs_info;
 
     if ((mft = (ntfs_mft *) tsk_malloc(ntfs->mft_rsize_b)) == NULL) {
         goto on_error;
     }
 
     /* Get data on the bitmap */
     if (ntfs_dinode_lookup(ntfs, (char *) mft, NTFS_MFT_BMAP) != TSK_OK) {
         goto on_error;
     }
 
     attr = (ntfs_attr *) ((uintptr_t) mft +
         tsk_getu16(fs->endian, mft->attr_off));
     data_attr = NULL;
 
     uint32_t attr_len = 0;
     uint32_t attr_type = 0;
 
     /* cycle through them */
     while ((uintptr_t) attr + sizeof (ntfs_attr) <=
             ((uintptr_t) mft + (uintptr_t) ntfs->mft_rsize_b)) {
 
         attr_len = tsk_getu32(fs->endian, attr->len);
         attr_type = tsk_getu32(fs->endian, attr->type);
 
         if ((attr_len == 0) || (attr_type == 0xffffffff)) {
             break;
         }
 
         if (attr_type == NTFS_ATYPE_DATA) {
             data_attr = attr;
             break;
         }
 
         attr = (ntfs_attr *) ((uintptr_t) attr + attr_len);
     }
 
     /* did we get it? */
     if (data_attr == NULL) {
         tsk_error_reset();
         tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
         tsk_error_set_errstr("Error Finding Bitmap Data Attribute");
         goto on_error;
     }
     attr_len = tsk_getu32(fs->endian, data_attr->len);
     if (attr_len > ntfs->mft_rsize_b) {
         goto on_error;
     }
 
     uint64_t run_start_vcn = tsk_getu64(fs->endian, data_attr->c.nr.start_vcn);
     uint16_t run_off = tsk_getu16(fs->endian, data_attr->c.nr.run_off);
 
-    if ((run_off < 48) || (run_off >= attr_len)) {
+    if ((run_off < 48) ||
+        (run_off >= attr_len) ||
+        ((uintptr_t) data_attr + run_off) > ((uintptr_t) mft + (uintptr_t) ntfs->mft_rsize_b)) {
         tsk_error_reset();
         tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
         tsk_error_set_errstr("Invalid run_off of Bitmap Data Attribute - value out of bounds");
         goto on_error;
     }
     /* convert data run to generic form */
     if ((ntfs_make_data_run(ntfs,
                 run_start_vcn,
                 (ntfs_runlist *) ((uintptr_t) data_attr + run_off),
                 attr_len - run_off,
                 &(ntfs->bmap), NULL, NTFS_MFT_BMAP)) != TSK_OK) {
         goto on_error;
     }
     ntfs->bmap_buf = (char *) tsk_malloc(fs->block_size);
     if (ntfs->bmap_buf == NULL) {
         goto on_error;
     }
 
     /* Load the first cluster so that we have something there */
     ntfs->bmap_buf_off = 0;
 
     // Check ntfs->bmap before it is accessed.
     if (ntfs->bmap == NULL) {
         goto on_error;
     }
     if (ntfs->bmap->addr > fs->last_block) {
         tsk_error_reset();
         tsk_error_set_errno(TSK_ERR_FS_GENFS);
         tsk_error_set_errstr
             ("ntfs_load_bmap: Bitmap too large for image size: %" PRIuDADDR
             "", ntfs->bmap->addr);
         goto on_error;
     }
     cnt =
         tsk_fs_read_block(fs,
         ntfs->bmap->addr, ntfs->bmap_buf, fs->block_size);
     if (cnt != fs->block_size) {
         if (cnt >= 0) {
             tsk_error_reset();
             tsk_error_set_errno(TSK_ERR_FS_READ);
         }
         tsk_error_set_errstr2("ntfs_load_bmap: Error reading block at %"
             PRIuDADDR, ntfs->bmap->addr);
         goto on_error;
     }
 
     free (mft);
     return 0;
 
 on_error:
     if (mft != NULL) {
         free (mft);
     }
     return 1;
 }
 
 
 /*
  * Load the VOLUME MFT entry and the VINFO attribute so that we
  * can identify the volume version of this.
  *
  * Return 1 on error and 0 on success
  */
