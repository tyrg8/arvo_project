commit 7790ee8736a316f037c18c436d7d2d7a1118abaf
Author: Ilija Tovilo <ilija.tovilo@me.com>
Date:   Mon May 22 22:02:27 2023 +0200

    Fix concat_function use-after-free on out-of-memory error (#11297)
    
    Introduced by GH-10049

diff --git a/Zend/tests/bug79836_4.phpt b/Zend/tests/bug79836_4.phpt
new file mode 100644
index 0000000000..2d6b862f42
--- /dev/null
+++ b/Zend/tests/bug79836_4.phpt
@@ -0,0 +1,18 @@
+--TEST--
+Bug #79836 (use-after-free in concat_function)
+--INI--
+memory_limit=10M
+--FILE--
+<?php
+class Foo {
+    public function __toString() {
+        return str_repeat('a', 10);
+    }
+}
+
+$i = str_repeat('a', 5 * 1024 * 1024);
+$e = new Foo();
+$e .= $i;
+?>
+--EXPECTF--
+Fatal error: Allowed memory size of %d bytes exhausted%s(tried to allocate %d bytes) in %s on line %d
diff --git a/Zend/zend_operators.c b/Zend/zend_operators.c
index 7e5e5ff3e0..0b7902d4e3 100644
--- a/Zend/zend_operators.c
+++ b/Zend/zend_operators.c
@@ -2006,80 +2006,83 @@ ZEND_API zend_result ZEND_FASTCALL concat_function(zval *result, zval *op1, zval
 has_op2_string:;
 	if (UNEXPECTED(ZSTR_LEN(op1_string) == 0)) {
 		if (EXPECTED(result != op2 || Z_TYPE_P(result) != IS_STRING)) {
 			if (result == orig_op1) {
 				i_zval_ptr_dtor(result);
 			}
 			if (free_op2_string) {
 				/* transfer ownership of op2_string */
 				ZVAL_STR(result, op2_string);
 				free_op2_string = false;
 			} else {
 				ZVAL_STR_COPY(result, op2_string);
 			}
 		}
 	} else if (UNEXPECTED(ZSTR_LEN(op2_string) == 0)) {
 		if (EXPECTED(result != op1 || Z_TYPE_P(result) != IS_STRING)) {
 			if (result == orig_op1) {
 				i_zval_ptr_dtor(result);
 			}
 			if (free_op1_string) {
 				/* transfer ownership of op1_string */
 				ZVAL_STR(result, op1_string);
 				free_op1_string = false;
 			} else {
 				ZVAL_STR_COPY(result, op1_string);
 			}
 		}
 	} else {
 		size_t op1_len = ZSTR_LEN(op1_string);
 		size_t op2_len = ZSTR_LEN(op2_string);
 		size_t result_len = op1_len + op2_len;
 		zend_string *result_str;
 		uint32_t flags = ZSTR_GET_COPYABLE_CONCAT_PROPERTIES_BOTH(op1_string, op2_string);
 
 		if (UNEXPECTED(op1_len > ZSTR_MAX_LEN - op2_len)) {
 			if (free_op1_string) zend_string_release(op1_string);
 			if (free_op2_string) zend_string_release(op2_string);
 			zend_throw_error(NULL, "String size overflow");
 			if (orig_op1 != result) {
 				ZVAL_UNDEF(result);
 			}
 			return FAILURE;
 		}
 
 		if (result == op1) {
+			/* special case, perform operations on result */
+			result_str = zend_string_extend(op1_string, result_len, 0);
+			/* Free result after zend_string_extend(), as it may throw an out-of-memory error. If we
+			 * free it before we would leave the released variable on the stack with shutdown trying
+			 * to free it again. */
 			if (free_op1_string) {
 				/* op1_string will be used as the result, so we should not free it */
 				i_zval_ptr_dtor(result);
 				free_op1_string = false;
 			}
-			/* special case, perform operations on result */
-			result_str = zend_string_extend(op1_string, result_len, 0);
 			/* account for the case where result_str == op1_string == op2_string and the realloc is done */
 			if (op1_string == op2_string) {
 				if (free_op2_string) {
 					zend_string_release(op2_string);
 					free_op2_string = false;
 				}
 				op2_string = result_str;
 			}
 		} else {
 			result_str = zend_string_alloc(result_len, 0);
 			memcpy(ZSTR_VAL(result_str), ZSTR_VAL(op1_string), op1_len);
 			if (result == orig_op1) {
 				i_zval_ptr_dtor(result);
 			}
 		}
 		GC_ADD_FLAGS(result_str, flags);
 
 		ZVAL_NEW_STR(result, result_str);
 		memcpy(ZSTR_VAL(result_str) + op1_len, ZSTR_VAL(op2_string), op2_len);
 		ZSTR_VAL(result_str)[result_len] = '\0';
 	}
 
 	if (free_op1_string) zend_string_release(op1_string);
 	if (free_op2_string) zend_string_release(op2_string);
 
 	return SUCCESS;
 }
 /* }}} */
