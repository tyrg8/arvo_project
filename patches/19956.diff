commit 257a197ae723b55d26c3254dbe1edd8b0509af1b
Author: Ebrahim Byagowi <ebrahim@gnu.org>
Date:   Thu Jan 9 22:55:45 2020 +0330

    Fail serialize when map has incorrect value
    
    fixes https://crbug.com/oss-fuzz/19956
    
    am not super happy with the fix, guess we should do some check
    before the memcpy anyway as @blueshade7 thinks also,
    so let's have it or revert it when we have a better approach for the case.

diff --git a/src/hb-ot-layout-common.hh b/src/hb-ot-layout-common.hh
index 4ac9c3ca2..540783d4a 100644
--- a/src/hb-ot-layout-common.hh
+++ b/src/hb-ot-layout-common.hh
@@ -1871,55 +1871,60 @@ struct VarRegionAxis
 struct VarRegionList
 {
   float evaluate (unsigned int region_index,
 			 const int *coords, unsigned int coord_len) const
   {
     if (unlikely (region_index >= regionCount))
       return 0.;
 
     const VarRegionAxis *axes = axesZ.arrayZ + (region_index * axisCount);
 
     float v = 1.;
     unsigned int count = axisCount;
     for (unsigned int i = 0; i < count; i++)
     {
       int coord = i < coord_len ? coords[i] : 0;
       float factor = axes[i].evaluate (coord);
       if (factor == 0.f)
 	return 0.;
       v *= factor;
     }
     return v;
   }
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (c->check_struct (this) &&
 		  axesZ.sanitize (c, (unsigned int) axisCount * (unsigned int) regionCount));
   }
 
   bool serialize (hb_serialize_context_t *c, const VarRegionList *src, const hb_bimap_t &region_map)
   {
     TRACE_SERIALIZE (this);
     VarRegionList *out = c->allocate_min<VarRegionList> ();
     if (unlikely (!out)) return_trace (false);
     axisCount = src->axisCount;
     regionCount = region_map.get_population ();
     if (unlikely (!c->allocate_size<VarRegionList> (get_size () - min_size))) return_trace (false);
+    unsigned int region_count = src->get_region_count ();
     for (unsigned int r = 0; r < regionCount; r++)
-      memcpy (&axesZ[axisCount * r], &src->axesZ[axisCount * region_map.backward (r)], VarRegionAxis::static_size * axisCount);
+    {
+      unsigned int backward = region_map.backward (r);
+      if (backward >= region_count) return_trace (false);
+      memcpy (&axesZ[axisCount * r], &src->axesZ[axisCount * backward], VarRegionAxis::static_size * axisCount);
+    }
 
     return_trace (true);
   }
 
   unsigned int get_size () const { return min_size + VarRegionAxis::static_size * axisCount * regionCount; }
   unsigned int get_region_count () const { return regionCount; }
 
   protected:
   HBUINT16	axisCount;
   HBUINT16	regionCount;
   UnsizedArrayOf<VarRegionAxis>
 		axesZ;
   public:
   DEFINE_SIZE_ARRAY (4, axesZ);
 };
diff --git a/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5708764082864128 b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5708764082864128
new file mode 100644
index 000000000..96cfb0065
Binary files /dev/null and b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5708764082864128 differ
