commit f17f1277607e5d745d889489f8da43b2a4e996a6
Author: Dario Lombardo <lomato@gmail.com>
Date:   Sat Nov 30 23:04:57 2019 +0100

    ieee1722: use payload_length only when it's valid.
    
    Bug: 16241
    Change-Id: If9e08fef649830dfed48a53d2d1cad983b7ca090
    Reviewed-on: https://code.wireshark.org/review/35263
    Petri-Dish: Dario Lombardo <lomato@gmail.com>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Michael Mann <mmann78@netscape.net>

diff --git a/epan/dissectors/packet-ieee1722.c b/epan/dissectors/packet-ieee1722.c
index 3cb4fa74e0..ec6a3110bb 100644
--- a/epan/dissectors/packet-ieee1722.c
+++ b/epan/dissectors/packet-ieee1722.c
@@ -2793,68 +2793,69 @@ static void describe_lin_message(proto_item *dst, guint32 bus_id, guint32 lin_id
 static int dissect_1722_acf_lin(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)
 {
     proto_item *ti;
     proto_item *ti_lin;
     proto_tree *tree_lin;
     proto_tree *tree_flags;
     guint       offset = 0;
     guint       captured_length = tvb_captured_length(tvb);
     guint32     pad_length;
     gboolean    mtv;
     guint32     bus_id;
     guint32     lin_id;
     gint        payload_length;
 
     ti_lin = proto_tree_add_item(tree, proto_1722_acf_lin, tvb, offset, -1, ENC_NA);
     tree_lin = proto_item_add_subtree(ti_lin, ett_1722_lin);
 
     if (captured_length < IEEE_1722_ACF_LIN_HEADER_SIZE) {
         expert_add_info(pinfo, ti_lin, &ei_1722_lin_header_cropped);
         return captured_length;
     }
 
     tree_flags = proto_tree_add_subtree(tree_lin, tvb, offset, 1, ett_1722_lin_flags, &ti, "Flags and BusID");
     proto_tree_add_item_ret_uint(tree_flags, hf_1722_lin_pad, tvb, offset, 1, ENC_BIG_ENDIAN, &pad_length);
     proto_tree_add_item_ret_boolean(tree_flags, hf_1722_lin_mtv, tvb, offset, 1, ENC_BIG_ENDIAN, &mtv);
     proto_tree_add_item_ret_uint(tree_flags, hf_1722_lin_bus_id, tvb, offset, 1, ENC_BIG_ENDIAN, &bus_id);
     proto_item_append_text(ti, ": pad=%u, mtv=%u, bus_id=%u", pad_length, (unsigned)mtv, bus_id);
     offset += 1;
 
     proto_tree_add_item_ret_uint(tree_lin, hf_1722_lin_identifier, tvb, offset, 1, ENC_BIG_ENDIAN, &lin_id);
     offset += 1;
 
     proto_tree_add_item(tree_lin, hf_1722_lin_message_timestamp, tvb, offset, 8, ENC_BIG_ENDIAN);
     offset += 8;
 
     describe_lin_message(ti_lin, bus_id, lin_id);
     describe_lin_message(proto_tree_get_parent(tree), bus_id, lin_id);
     col_set_str(pinfo->cinfo, COL_PROTOCOL, "ACF-LIN");
     col_clear(pinfo->cinfo, COL_INFO);
     col_add_fstr(pinfo->cinfo, COL_INFO, "ACF-LIN(%u): 0x%02x   ", bus_id, lin_id);
 
     payload_length = tvb_reported_length_remaining(tvb, offset) - pad_length;
-    col_append_str(pinfo->cinfo, COL_INFO, tvb_bytes_to_str_punct(wmem_packet_scope(), tvb, offset, payload_length, ' '));
 
     if (payload_length < 0 || payload_length > 8)
     {
         expert_add_info(pinfo, ti_lin, &ei_1722_lin_invalid_payload_length);
-
     }
     else if (payload_length > 0)
     {
         tvbuff_t*   next_tvb = tvb_new_subset_length(tvb, offset, payload_length);
+
+        col_append_str(pinfo->cinfo, COL_INFO, tvb_bytes_to_str_punct(wmem_packet_scope(), tvb, offset, payload_length, ' '));
+
         /* at the moment, there's no global LIN sub-protocols support. Use our own. */
         if (dissector_try_payload_new(avb1722_acf_lin_dissector_table, next_tvb, pinfo, tree, TRUE, &lin_id) <= 0)
         {
             call_data_dissector(next_tvb, pinfo, tree);
         }
 
         offset += payload_length;
     }
 
     if (pad_length > 0 && tvb_reported_length_remaining(tvb, offset) >= (gint)pad_length)
     {
         proto_tree_add_item(tree_lin, hf_1722_lin_padding, tvb, offset, pad_length, ENC_NA);
     }
 
     return captured_length;
 }
