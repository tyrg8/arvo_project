commit 964e268f0bf975b881f322ff6d9dd53957fa837d
Author: jeanlf <jeanlf@gpac.io>
Date:   Mon Jan 22 13:54:30 2024 +0100

    fixed possible heap iverflow with broken m3u8 parsing

diff --git a/src/media_tools/m3u8.c b/src/media_tools/m3u8.c
index 95e69605b..4edef44fd 100644
--- a/src/media_tools/m3u8.c
+++ b/src/media_tools/m3u8.c
@@ -319,57 +319,60 @@ static void reset_attributes(s_accumulated_attributes *attributes)
 static char** extract_attributes(const char *name, const char *line, const int num_attributes) {
 	int sz, i, curr_attribute, start;
 	char **ret;
 	u8 quote = 0;
 	int len = (u32) strlen(line);
 	start = (u32) strlen(name);
 	if (len <= start)
 		return NULL;
 	if (!safe_start_equals(name, line))
 		return NULL;
 	ret = gf_calloc((num_attributes + 1), sizeof(char*));
+	if (!ret) return NULL;
+	if (!num_attributes) return ret;
+	
 	curr_attribute = 0;
 	for (i=start; i<=len; i++) {
 		if (line[i] == '\0' || (!quote && line[i] == ',')  || (line[i] == quote)) {
 			u32 spaces = 0;
 			sz = i - start;
 			if (quote && (line[i] == quote))
 				sz++;
 
 			while (line[start+spaces] == ' ')
 				spaces++;
 			if ((sz-spaces<=1) && (line[start+spaces]==',')) {
 				//start = i+1;
 			} else {
 				if (!strncmp(&line[start+spaces], "\t", sz-spaces) || !strncmp(&line[start+spaces], "\n", sz-spaces)) {
 				} else {
 					ret[curr_attribute] = gf_calloc( (1+sz-spaces), sizeof(char));
 					strncpy(ret[curr_attribute], &(line[start+spaces]), sz-spaces);
 					curr_attribute++;
 					if (curr_attribute >= num_attributes)
 						break;
 				}
 			}
 			start = i+1;
 
 			if (start == len) {
 				return ret;
 			}
 		}
 		if ((line[i] == '\'') || (line[i] == '"'))  {
 			if (quote) {
 				quote = 0;
 			} else {
 				quote = line[i];
 			}
 		}
 	}
 	if (curr_attribute == 0) {
 		gf_free(ret);
 		return NULL;
 	}
 	return ret;
 }
 
 #define M3U8_COMPATIBILITY_VERSION(v) \
 	if (v > attributes->compatibility_version) \
 		attributes->compatibility_version = v;
@@ -378,430 +381,430 @@ static void free_attrs(char** attributes)
 {
 	u32 i = 0;
 	while (attributes[i] != NULL) {
 		gf_free(attributes[i]);
 		i++;
 	}
 	gf_free(attributes);
 }
 /**
  * Parses the attributes and accumulate into the attributes structure
  */
 static char** parse_attributes(const char *line, s_accumulated_attributes *attributes) {
 	int int_value, i;
 	char **ret;
 	char *end_ptr;
 	if (line == NULL)
 		return NULL;
 	if (!safe_start_equals("#EXT", line))
 		return NULL;
 	if (safe_start_equals("#EXT-X-ENDLIST", line)) {
 		attributes->is_playlist_ended = GF_TRUE;
 		M3U8_COMPATIBILITY_VERSION(1);
 		return NULL;
 	}
 	/* reset not accumated attributes */
 	attributes->type = MEDIA_TYPE_UNKNOWN;
 
 	ret = extract_attributes("#EXT-X-TARGETDURATION:", line, 1);
 	if (ret) {
 		/* #EXT-X-TARGETDURATION:<seconds> */
 		if (ret[0]) {
 			int_value = (s32) strtol(ret[0], &end_ptr, 10);
 			if (end_ptr != ret[0]) {
 				attributes->target_duration_in_seconds = int_value;
 			}
 		}
 		M3U8_COMPATIBILITY_VERSION(1);
 		return ret;
 	}
 	ret = extract_attributes("#EXT-X-MEDIA-SEQUENCE:", line, 1);
 	if (ret) {
 		/* #EXT-X-MEDIA-SEQUENCE:<number> */
 		if (ret[0]) {
 			int_value = (s32)strtol(ret[0], &end_ptr, 10);
 			if (end_ptr != ret[0]) {
 				attributes->min_media_sequence = int_value;
 				attributes->current_media_seq = int_value;
 			}
 		}
 		M3U8_COMPATIBILITY_VERSION(1);
 		return ret;
 	}
 	ret = extract_attributes("#EXT-X-VERSION:", line, 1);
 	if (ret) {
 		/* #EXT-X-VERSION:<number> */
 		if (ret[0]) {
 			int_value = (s32)strtol(ret[0], &end_ptr, 10);
 			if (end_ptr != ret[0]) {
 				attributes->version = int_value;
 			}
 			//although technically it is mandated for v2 or more, don't complain if set for v1
 			M3U8_COMPATIBILITY_VERSION(1);
 		}
 		return ret;
 	}
 	ret = extract_attributes("#EXTINF:", line, 2);
 	if (ret) {
 		M3U8_COMPATIBILITY_VERSION(1);
 		/* #EXTINF:<duration>,<title> */
 		attributes->is_media_segment = GF_TRUE;
 		if (ret[0]) {
 			double double_value = strtod(ret[0], &end_ptr);
 			if (end_ptr != ret[0]) {
 				attributes->duration_in_seconds = double_value;
 			}
 			if (strstr(ret[0], ".") || (double_value > (int)double_value)) {
 				M3U8_COMPATIBILITY_VERSION(3);
 			}
 		}
 		if (ret[1]) {
 			if (attributes->title) gf_free(attributes->title);
 			attributes->title = gf_strdup(ret[1]);
 		}
 		return ret;
 	}
 	ret = extract_attributes("#EXT-X-KEY:", line, 4);
 	if (ret) {
 		/* #EXT-X-KEY:METHOD=<method>[,URI="<URI>"] */
 		const char *method = "METHOD=";
 		const size_t method_len = strlen(method);
 		if (safe_start_equals(method, ret[0])) {
 			if (!strncmp(ret[0]+method_len, "NONE", 4)) {
 				attributes->key_method = DRM_NONE;
 				if (attributes->key_url) {
 					gf_free(attributes->key_url);
 					attributes->key_url = NULL;
 				}
 			} else if (!strncmp(ret[0]+method_len, "AES-128", 7)) {
 				attributes->key_method = DRM_AES_128;
 			} else if (!strncmp(ret[0]+method_len, "SAMPLE-AES", 10)) {
 				attributes->key_method = DRM_CENC;
 			} else {
 				GF_LOG(GF_LOG_ERROR, GF_LOG_DASH,("[M3U8] EXT-X-KEY method not recognized.\n"));
 			}
 			if (ret[1] != NULL && safe_start_equals("URI=\"", ret[1])) {
 				int_value = (u32) strlen(ret[1]);
 				if (ret[1][int_value-1] == '"') {
 					if (attributes->key_url) gf_free(attributes->key_url);
 					attributes->key_url = gf_strdup(&(ret[1][5]));
 					if (attributes->key_url) {
 						u32 klen = (u32) strlen(attributes->key_url);
 						attributes->key_url[klen-1] = 0;
 					}
 				}
 			}
 			attributes->has_iv = GF_FALSE;
 			if (ret[2] != NULL && safe_start_equals("IV=", ret[2])) {
 				char *IV = ret[2] + 3;
 				if (!strncmp(IV, "0x", 2)) IV+=2;
 				if (strlen(IV) != 32) {
 					GF_LOG(GF_LOG_ERROR, GF_LOG_DASH,("[M3U8] EXT-X-KEY wrong IV len\n"));
 				} else {
 					for (i=0; i<16; i++) {
 						char szV[3];
 						u32 v;
 						szV[0] = IV[2*i];
 						szV[1] = IV[2*i + 1];
 						szV[2] = 0;
 						sscanf(szV, "%X", &v);
 						attributes->key_iv[i] = v;
 					}
 				}
 				attributes->has_iv = GF_TRUE;
 			}
 		}
 		M3U8_COMPATIBILITY_VERSION(1);
 		return ret;
 	}
 	ret = extract_attributes("#EXT-X-PROGRAM-DATE-TIME:", line, 1);
 	if (ret) {
 		/* #EXT-X-PROGRAM-DATE-TIME:<YYYY-MM-DDThh:mm:ssZ> */
 		if (ret[0]) attributes->playlist_utc_timestamp = gf_net_parse_date(ret[0]);
 		M3U8_COMPATIBILITY_VERSION(1);
 		return ret;
 	}
 	ret = extract_attributes("#EXT-X-ALLOW-CACHE:", line, 1);
 	if (ret) {
 		/* #EXT-X-ALLOW-CACHE:<YES|NO> */
 		GF_LOG(GF_LOG_INFO, GF_LOG_DASH,("[M3U8] EXT-X-ALLOW-CACHE not supported.\n", line));
 		M3U8_COMPATIBILITY_VERSION(1);
 		return ret;
 	}
 	ret = extract_attributes("#EXT-X-PLAYLIST-TYPE", line, 1);
 	if (ret) {
 		if (ret[0] && !strcmp(ret[0], "VOD")) attributes->is_playlist_ended = GF_TRUE;
 		M3U8_COMPATIBILITY_VERSION(3);
 		return ret;
 	}
 	ret = extract_attributes("#EXT-X-MAP", line, 4);
 	if (ret) {
 		/* #EXT-X-MAP:URI="<URI>"] */
 		i=0;
 		while (ret[i] != NULL) {
 			char *val = ret[i];
 			if (val[0]==':') val++;
 			if (safe_start_equals("URI=\"", val)) {
 				char *uri = val + 5;
 				int_value = (u32) strlen(uri);
 				if (int_value > 0 && uri[int_value-1] == '"') {
 					if (attributes->init_url) gf_free(attributes->init_url);
 					attributes->init_url = gf_strdup(uri);
 					attributes->init_url[int_value-1]=0;
 				} else {
 					GF_LOG(GF_LOG_ERROR, GF_LOG_DASH,("[M3U8] Invalid URI (%s) in EXT-X-MAP\n", val));
 				}
 			}
 			else if (safe_start_equals("BYTERANGE=\"", val)) {
 				u64 begin, size;
 				val+=10;
 				if (sscanf(val, "\""LLU"@"LLU"\"", &size, &begin) == 2) {
 					if (size) {
 						attributes->init_byte_range_start = begin;
 						attributes->init_byte_range_end = begin + size - 1;
 					} else {
 						GF_LOG(GF_LOG_ERROR, GF_LOG_DASH,("[M3U8] Invalid byte range %s\n", val));
 					}
 				}
 			}
 			i++;
 		}
 		M3U8_COMPATIBILITY_VERSION(3);
 		return ret;
 	}
 	ret = extract_attributes("#EXT-X-STREAM-INF:", line, 10);
 	if (ret) {
 		/* #EXT-X-STREAM-INF:[attribute=value][,attribute=value]* */
 		i = 0;
 		attributes->is_master_playlist = GF_TRUE;
 		M3U8_COMPATIBILITY_VERSION(1);
 		while (ret[i] != NULL) {
 			char *utility;
 			if (safe_start_equals("BANDWIDTH=", ret[i])) {
 				utility = &(ret[i][10]);
 				int_value = (s32) strtol(utility, &end_ptr, 10);
 				if (end_ptr != utility)
 					attributes->bandwidth = int_value;
 			} else if (safe_start_equals("PROGRAM-ID=", ret[i])) {
 				utility = &(ret[i][11]);
 				int_value = (s32) strtol(utility, &end_ptr, 10);
 				if (end_ptr != utility)
 					attributes->stream_id = int_value;
 			} else if (safe_start_equals("CODECS=\"", ret[i])) {
 				int_value = (u32) strlen(ret[i]);
 				if (ret[i][int_value-1] == '"') {
 					if (attributes->codecs) gf_free(attributes->codecs);
 					attributes->codecs = gf_strdup(&(ret[i][7]));
 				}
 			} else if (safe_start_equals("RESOLUTION=", ret[i])) {
 				u32 w, h;
 				utility = &(ret[i][11]);
 				if ((sscanf(utility, "%dx%d", &w, &h)==2) || (sscanf(utility, "%dx%d,", &w, &h)==2)) {
 					attributes->width = w;
 					attributes->height = h;
 				}
 				M3U8_COMPATIBILITY_VERSION(2);
 			} else if (safe_start_equals("AUDIO=", ret[i])) {
 				gf_assert(attributes->type == MEDIA_TYPE_UNKNOWN);
 				attributes->type = MEDIA_TYPE_AUDIO;
 				if (attributes->group.audio) gf_free(attributes->group.audio);
 				attributes->group.audio = gf_strdup(ret[i] + 6);
 				M3U8_COMPATIBILITY_VERSION(4);
 			} else if (safe_start_equals("VIDEO=", ret[i])) {
 				gf_assert(attributes->type == MEDIA_TYPE_UNKNOWN);
 				attributes->type = MEDIA_TYPE_VIDEO;
 				if (attributes->group.video) gf_free(attributes->group.video);
 				attributes->group.video = gf_strdup(ret[i] + 6);
 				M3U8_COMPATIBILITY_VERSION(4);
 			}
 			i++;
 		}
 		if (!attributes->bandwidth) {
 			GF_LOG(GF_LOG_WARNING, GF_LOG_DASH,("[M3U8] Invalid #EXT-X-STREAM-INF: no BANDWIDTH found. Ignoring the line.\n"));
 			free_attrs(ret);
 			return NULL;
 		}
 		return ret;
 	}
 	ret = extract_attributes("#EXT-X-DISCONTINUITY", line, 0);
 	if (ret) {
 		attributes->discontinuity = 1;
 		M3U8_COMPATIBILITY_VERSION(1);
 		return ret;
 	}
-	ret = extract_attributes("#EXT-X-DISCONTINUITY-SEQUENCE", line, 0);
+	ret = extract_attributes("#EXT-X-DISCONTINUITY-SEQUENCE", line, 1);
 	if (ret) {
 		if (ret[0]) {
 			int_value = (s32)strtol(ret[0], &end_ptr, 10);
 			if (end_ptr != ret[0]) {
 				attributes->discontinuity = int_value;
 			}
 		}
 		M3U8_COMPATIBILITY_VERSION(1);
 		return ret;
 	}
 	ret = extract_attributes("#EXT-X-BYTERANGE:", line, 1);
 	if (ret) {
 		/* #EXT-X-BYTERANGE:<begin@end> */
 		if (ret[0]) {
 			u64 begin, size;
 			if (sscanf(ret[0], LLU"@"LLU, &size, &begin) == 2) {
 				if (size) {
 					attributes->byte_range_start = begin;
 					attributes->byte_range_end = begin + size - 1;
 				} else {
 					GF_LOG(GF_LOG_ERROR, GF_LOG_DASH,("[M3U8] Invalid byte range %s\n", ret[0]));
 				}
 			}
 		}
 		M3U8_COMPATIBILITY_VERSION(4);
 		return ret;
 	}
 	ret = extract_attributes("#EXT-X-MEDIA:", line, 14);
 	if (ret) {
 		/* #EXT-X-MEDIA:[TYPE={AUDIO,VIDEO}],[URI],[GROUP-ID],[LANGUAGE],[NAME],[DEFAULT={YES,NO}],[AUTOSELECT={YES,NO}] */
 		M3U8_COMPATIBILITY_VERSION(4);
 		attributes->is_master_playlist = GF_TRUE;
 		i = 0;
 		while (ret[i] != NULL) {
 			if (safe_start_equals("TYPE=", ret[i])) {
 				if (!strncmp(ret[i]+5, "AUDIO", 5)) {
 					attributes->type = MEDIA_TYPE_AUDIO;
 				} else if (!strncmp(ret[i]+5, "VIDEO", 5)) {
 					attributes->type = MEDIA_TYPE_VIDEO;
 				} else if (!strncmp(ret[i]+5, "SUBTITLES", 9)) {
 					attributes->type = MEDIA_TYPE_SUBTITLES;
 				} else if (!strncmp(ret[i]+5, "CLOSED-CAPTIONS", 15)) {
 					attributes->type = MEDIA_TYPE_CLOSED_CAPTIONS;
 				} else {
 					GF_LOG(GF_LOG_WARNING, GF_LOG_DASH,("[M3U8] Unsupported #EXT-X-MEDIA:TYPE=%s\n", ret[i]+5));
 				}
 			} else if (safe_start_equals("URI=\"", ret[i])) {
 				size_t len;
 				if (attributes->mediaURL) gf_free(attributes->mediaURL);
 				attributes->mediaURL = gf_strdup(ret[i]+5);
 				len = strlen(attributes->mediaURL);
 				if (len && (attributes->mediaURL[len-1] == '"')) {
 					attributes->mediaURL[len-1] = '\0';
 				} else {
 					GF_LOG(GF_LOG_WARNING, GF_LOG_DASH,("[M3U8] Misformed #EXT-X-MEDIA:URI=%s. Quotes are incorrect.\n", ret[i]+5));
 				}
 			} else if (safe_start_equals("GROUP-ID=", ret[i])) {
 				if (attributes->type == MEDIA_TYPE_AUDIO) {
 					if (attributes->group.audio) gf_free(attributes->group.audio);
 					attributes->group.audio = gf_strdup(ret[i]+9);
 					attributes->stream_id = GROUP_ID_TO_PROGRAM_ID(AUDIO, attributes->group.audio);
 				} else if (attributes->type == MEDIA_TYPE_VIDEO) {
 					if (attributes->group.video) gf_free(attributes->group.video);
 					attributes->group.video = gf_strdup(ret[i]+9);
 					attributes->stream_id = GROUP_ID_TO_PROGRAM_ID(VIDEO, attributes->group.video);
 				} else if (attributes->type == MEDIA_TYPE_SUBTITLES) {
 					if (attributes->group.subtitle) gf_free(attributes->group.subtitle);
 					attributes->group.subtitle = gf_strdup(ret[i]+9);
 					attributes->stream_id = GROUP_ID_TO_PROGRAM_ID(SUBTITLES, attributes->group.subtitle);
 				} else if (attributes->type == MEDIA_TYPE_CLOSED_CAPTIONS) {
 					if (attributes->group.closed_captions) gf_free(attributes->group.closed_captions);
 					attributes->group.closed_captions = gf_strdup(ret[i]+9);
 					attributes->stream_id = GROUP_ID_TO_PROGRAM_ID(CLOSED_CAPTIONS, attributes->group.closed_captions);
 				} else if (attributes->type == MEDIA_TYPE_UNKNOWN) {
 					GF_LOG(GF_LOG_ERROR, GF_LOG_DASH,("[M3U8] Invalid #EXT-X-MEDIA:GROUP-ID=%s. Ignoring the line.\n", ret[i]+9));
 					free_attrs(ret);
 					return NULL;
 				}
 			} else if (safe_start_equals("LANGUAGE=\"", ret[i])) {
 				size_t len;
 				if (attributes->language) gf_free(attributes->language);
 				attributes->language = gf_strdup(ret[i]+9);
 				len = strlen(attributes->language);
 				if (len && (attributes->language[len-1] == '"')) {
 					attributes->language[len-1] = '\0';
 				} else {
 					GF_LOG(GF_LOG_WARNING, GF_LOG_DASH,("[M3U8] Misformed #EXT-X-MEDIA:LANGUAGE=%s. Quotes are incorrect.\n", ret[i]+5));
 				}
 			} else if (safe_start_equals("NAME=", ret[i])) {
 				if (attributes->name) gf_free(attributes->name);
 				attributes->name = gf_strdup(ret[i]+5+1);
 				u32 len = (u32) strlen(attributes->name);
 				if (len) attributes->name[len-1]=0;
 			} else if (safe_start_equals("DEFAULT=", ret[i])) {
 				if (!strncmp(ret[i]+8, "YES", 3)) {
 					attributes->is_default = GF_TRUE;
 				} else if (!strncmp(ret[i]+8, "NO", 2)) {
 					attributes->is_default = GF_FALSE;
 				} else {
 					GF_LOG(GF_LOG_WARNING, GF_LOG_DASH,("[M3U8] Invalid #EXT-X-MEDIA:DEFAULT=%s\n", ret[i]+8));
 				}
 			} else if (safe_start_equals("AUTOSELECT=", ret[i])) {
 				if (!strncmp(ret[i]+11, "YES", 3)) {
 					attributes->is_autoselect = GF_TRUE;
 				} else if (!strncmp(ret[i]+11, "NO", 2)) {
 					attributes->is_autoselect = GF_TRUE;
 				} else {
 					GF_LOG(GF_LOG_WARNING, GF_LOG_DASH,("[M3U8] Invalid #EXT-X-MEDIA:AUTOSELECT=%s\n", ret[i]+11));
 				}
 			} else if (safe_start_equals("CHANNELS=", ret[i])) {
 				sscanf(ret[i] + 9, "\"%u\"", &attributes->channels);
 
 			} else {
 				GF_LOG(GF_LOG_WARNING, GF_LOG_DASH,("[M3U8] Attribute %s not supported\n", ret[i]));
 			}
 
 			i++;
 		}
 
 		if (attributes->type == MEDIA_TYPE_UNKNOWN) {
 			GF_LOG(GF_LOG_WARNING, GF_LOG_DASH,("[M3U8] Invalid #EXT-X-MEDIA: TYPE is missing. Ignoring the line.\n"));
 			free_attrs(ret);
 			return NULL;
 		}
 		if (attributes->type == MEDIA_TYPE_CLOSED_CAPTIONS && attributes->mediaURL) {
 			GF_LOG(GF_LOG_WARNING, GF_LOG_DASH,("[M3U8] Invalid #EXT-X-MEDIA: TYPE is CLOSED-CAPTIONS but URI is present. Ignoring the URI.\n"));
 			gf_free(attributes->mediaURL);
 			attributes->mediaURL = NULL;
 		}
 		if ((attributes->type == MEDIA_TYPE_AUDIO && !attributes->group.audio)
 		        || (attributes->type == MEDIA_TYPE_VIDEO && !attributes->group.video)) {
 			GF_LOG(GF_LOG_WARNING, GF_LOG_DASH,("[M3U8] Invalid #EXT-X-MEDIA: missing GROUP-ID attribute. Ignoring the line.\n"));
 			free_attrs(ret);
 			return NULL;
 		}
 		if (!attributes->stream_id) {
 			GF_LOG(GF_LOG_WARNING, GF_LOG_DASH,("[M3U8] Invalid #EXT-X-MEDIA: no ID was computed. Check previous errors. Ignoring the line.\n"));
 			free_attrs(ret);
 			return NULL;
 		}
 
 		return ret;
 	}
 	if (!strncmp(line, "#EXT-X-INDEPENDENT-SEGMENTS", strlen("#EXT-X-INDEPENDENT-SEGMENTS") )) {
 		attributes->independent_segments = GF_TRUE;
 		M3U8_COMPATIBILITY_VERSION(1);
 		return NULL;
 	}
 	if (!strncmp(line, "#EXT-X-I-FRAME-STREAM-INF", strlen("#EXT-X-I-FRAME-STREAM-INF") )) {
 		//todo extract I/intra rate for speed adaptation
 		return NULL;
 	}
 	if (!strncmp(line, "#EXT-X-PART-INF", strlen("#EXT-X-PART-INF") )) {
 		attributes->low_latency = GF_TRUE;
 		return NULL;
 	}
 	//TODO for now we don't use preload hint
 	if (!strncmp(line, "#EXT-X-SERVER-CONTROL", strlen("#EXT-X-SERVER-CONTROL") )) {
 		return NULL;
 	}
 	//TODO for now we don't use preload hint
 	if (!strncmp(line, "#EXT-X-PRELOAD-HINT", strlen("#EXT-X-PRELOAD-HINT") )) {
 		return NULL;
 	}
 	//TODO for now we don't use preload hint
 	if (!strncmp(line, "#EXT-X-RENDITION-REPORT", strlen("#EXT-X-RENDITION-REPORT") )) {
 		return NULL;
 	}
 	GF_LOG(GF_LOG_WARNING, GF_LOG_DASH,("[M3U8] Unsupported directive %s\n", line));
 	return NULL;
 }
 
 /**
  * Creates a new MasterPlaylist
 \return NULL if MasterPlaylist element could not be allocated
  */
