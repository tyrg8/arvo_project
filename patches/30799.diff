commit e21c83650f15a197b286f8eed8c7d723c6900925
Author: Oliver Sander <oliver.sander@tu-dresden.de>
Date:   Wed Feb 10 21:36:51 2021 +0100

    pdftoppm: Fix rounding bug in computation of output bitmap size
    
    When a specific output image size was requested, the code would use
    that size to compute the target resolution, and then use the
    resolution to get the image size back.  In finite-precision
    arithmetic the resulting image size is not necessarily an
    integer, and a subsequent call to `ceil` then sometimes lead to
    an image size that was 1 larger than what was explicitly
    requested.
    
    Fix this by using a given image size directly, without converting
    it to resolution and back.
    
    BUG: https://gitlab.freedesktop.org/poppler/poppler/issues/927

diff --git a/utils/pdftoppm.cc b/utils/pdftoppm.cc
index 1789aadf..97fdbea2 100644
--- a/utils/pdftoppm.cc
+++ b/utils/pdftoppm.cc
@@ -391,322 +391,333 @@ static void processPageJobs()
 int main(int argc, char *argv[])
 {
     GooString *fileName = nullptr;
     char *ppmRoot = nullptr;
     char *ppmFile;
     GooString *ownerPW, *userPW;
     SplashColor paperColor;
 #ifndef UTILS_USE_PTHREADS
     SplashOutputDev *splashOut;
 #else
     pthread_t *jobs;
 #endif // UTILS_USE_PTHREADS
     bool ok;
     int pg, pg_num_len;
     double pg_w, pg_h;
 #ifdef USE_CMS
     cmsColorSpaceSignature profilecolorspace;
 #endif
 
     Win32Console win32Console(&argc, &argv);
 
     // parse args
     ok = parseArgs(argDesc, &argc, argv);
     if (mono && gray) {
         ok = false;
     }
     if (resolution != 0.0 && (x_resolution == 150.0 || y_resolution == 150.0)) {
         x_resolution = resolution;
         y_resolution = resolution;
     }
     if (!ok || argc > 3 || printVersion || printHelp) {
         fprintf(stderr, "pdftoppm version %s\n", PACKAGE_VERSION);
         fprintf(stderr, "%s\n", popplerCopyright);
         fprintf(stderr, "%s\n", xpdfCopyright);
         if (!printVersion) {
             printUsage("pdftoppm", "[PDF-file [PPM-file-prefix]]", argDesc);
         }
         if (printVersion || printHelp) {
             return 0;
         } else {
             return kOtherError;
         }
     }
     if (argc > 1)
         fileName = new GooString(argv[1]);
     if (argc == 3)
         ppmRoot = argv[2];
 
     if (antialiasStr[0]) {
         if (!GlobalParams::parseYesNo2(antialiasStr, &fontAntialias)) {
             fprintf(stderr, "Bad '-aa' value on command line\n");
         }
     }
     if (vectorAntialiasStr[0]) {
         if (!GlobalParams::parseYesNo2(vectorAntialiasStr, &vectorAntialias)) {
             fprintf(stderr, "Bad '-aaVector' value on command line\n");
         }
     }
 
     if (jpegOpt.getLength() > 0) {
         if (!jpeg)
             fprintf(stderr, "Warning: -jpegopt only valid with jpeg output.\n");
         parseJpegOptions();
     }
 
     // read config file
     globalParams = std::make_unique<GlobalParams>();
     if (enableFreeTypeStr[0]) {
         if (!GlobalParams::parseYesNo2(enableFreeTypeStr, &enableFreeType)) {
             fprintf(stderr, "Bad '-freetype' value on command line\n");
         }
     }
     if (thinLineModeStr[0]) {
         if (strcmp(thinLineModeStr, "solid") == 0) {
             thinLineMode = splashThinLineSolid;
         } else if (strcmp(thinLineModeStr, "shape") == 0) {
             thinLineMode = splashThinLineShape;
         } else if (strcmp(thinLineModeStr, "none") != 0) {
             fprintf(stderr, "Bad '-thinlinemode' value on command line\n");
         }
     }
     if (quiet) {
         globalParams->setErrQuiet(quiet);
     }
 
     // open PDF file
     if (ownerPassword[0]) {
         ownerPW = new GooString(ownerPassword);
     } else {
         ownerPW = nullptr;
     }
     if (userPassword[0]) {
         userPW = new GooString(userPassword);
     } else {
         userPW = nullptr;
     }
 
     if (fileName == nullptr) {
         fileName = new GooString("fd://0");
     }
     if (fileName->cmp("-") == 0) {
         delete fileName;
         fileName = new GooString("fd://0");
     }
     std::unique_ptr<PDFDoc> doc(PDFDocFactory().createPDFDoc(*fileName, ownerPW, userPW));
     delete fileName;
 
     if (userPW) {
         delete userPW;
     }
     if (ownerPW) {
         delete ownerPW;
     }
     if (!doc->isOk()) {
         return 1;
     }
 
     // get page range
     if (firstPage < 1)
         firstPage = 1;
     if (singleFile && lastPage < 1)
         lastPage = firstPage;
     if (lastPage < 1 || lastPage > doc->getNumPages())
         lastPage = doc->getNumPages();
     if (lastPage < firstPage) {
         fprintf(stderr, "Wrong page range given: the first page (%d) can not be after the last page (%d).\n", firstPage, lastPage);
         return kOtherError;
     }
 
     // If our page range selection and document size indicate we're only
     // outputting a single page, ensure that even/odd page selection doesn't
     // filter out that single page.
     if (firstPage == lastPage && ((printOnlyEven && firstPage % 2 == 1) || (printOnlyOdd && firstPage % 2 == 0))) {
         fprintf(stderr, "Invalid even/odd page selection, no pages match criteria.\n");
         return kOtherError;
     }
 
     if (singleFile && firstPage < lastPage) {
         if (!quiet) {
             fprintf(stderr, "Warning: Single file will write only the first of the %d pages.\n", lastPage + 1 - firstPage);
         }
         lastPage = firstPage;
     }
 
     // write PPM files
     if (jpegcmyk || overprint) {
         globalParams->setOverprintPreview(true);
         splashClearColor(paperColor);
     } else {
         paperColor[0] = 255;
         paperColor[1] = 255;
         paperColor[2] = 255;
     }
 
 #ifdef USE_CMS
     if (!displayprofilename.toStr().empty()) {
         displayprofile = make_GfxLCMSProfilePtr(cmsOpenProfileFromFile(displayprofilename.c_str(), "r"));
         if (!displayprofile) {
             fprintf(stderr, "Could not open the ICC profile \"%s\".\n", displayprofilename.c_str());
             return kOtherError;
         }
         if (!cmsIsIntentSupported(displayprofile.get(), INTENT_RELATIVE_COLORIMETRIC, LCMS_USED_AS_OUTPUT) && !cmsIsIntentSupported(displayprofile.get(), INTENT_ABSOLUTE_COLORIMETRIC, LCMS_USED_AS_OUTPUT)
             && !cmsIsIntentSupported(displayprofile.get(), INTENT_SATURATION, LCMS_USED_AS_OUTPUT) && !cmsIsIntentSupported(displayprofile.get(), INTENT_PERCEPTUAL, LCMS_USED_AS_OUTPUT)) {
             fprintf(stderr, "ICC profile \"%s\" is not an output profile.\n", displayprofilename.c_str());
             return kOtherError;
         }
         profilecolorspace = cmsGetColorSpace(displayprofile.get());
         // Note: In contrast to pdftops we do not fail if a non-matching ICC profile is supplied.
         //       Doing so would be pretentious, since SplashOutputDev by default assumes sRGB, even for
         //       the CMYK and Mono cases.
         if (jpegcmyk || overprint) {
             if (profilecolorspace != cmsSigCmykData) {
                 fprintf(stderr, "Warning: Supplied ICC profile \"%s\" is not a CMYK profile.\n", displayprofilename.c_str());
             }
         } else if (mono || gray) {
             if (profilecolorspace != cmsSigGrayData) {
                 fprintf(stderr, "Warning: Supplied ICC profile \"%s\" is not a monochrome profile.\n", displayprofilename.c_str());
             }
         } else {
             if (profilecolorspace != cmsSigRgbData) {
                 fprintf(stderr, "Warning: Supplied ICC profile \"%s\" is not a RGB profile.\n", displayprofilename.c_str());
             }
         }
     }
     if (!defaultgrayprofilename.toStr().empty()) {
         defaultgrayprofile = make_GfxLCMSProfilePtr(cmsOpenProfileFromFile(defaultgrayprofilename.c_str(), "r"));
         if (!checkICCProfile(defaultgrayprofile, defaultgrayprofilename.c_str(), LCMS_USED_AS_INPUT, cmsSigGrayData)) {
             return kOtherError;
         }
     }
     if (!defaultrgbprofilename.toStr().empty()) {
         defaultrgbprofile = make_GfxLCMSProfilePtr(cmsOpenProfileFromFile(defaultrgbprofilename.c_str(), "r"));
         if (!checkICCProfile(defaultrgbprofile, defaultrgbprofilename.c_str(), LCMS_USED_AS_INPUT, cmsSigRgbData)) {
             return kOtherError;
         }
     }
     if (!defaultcmykprofilename.toStr().empty()) {
         defaultcmykprofile = make_GfxLCMSProfilePtr(cmsOpenProfileFromFile(defaultcmykprofilename.c_str(), "r"));
         if (!checkICCProfile(defaultcmykprofile, defaultcmykprofilename.c_str(), LCMS_USED_AS_INPUT, cmsSigCmykData)) {
             return kOtherError;
         }
     }
 #endif
 
 #ifndef UTILS_USE_PTHREADS
 
     splashOut = new SplashOutputDev(mono ? splashModeMono1 : gray ? splashModeMono8 : (jpegcmyk || overprint) ? splashModeDeviceN8 : splashModeRGB8, 4, false, paperColor, true, thinLineMode);
 
     splashOut->setFontAntialias(fontAntialias);
     splashOut->setVectorAntialias(vectorAntialias);
     splashOut->setEnableFreeType(enableFreeType);
 #    ifdef USE_CMS
     splashOut->setDisplayProfile(displayprofile);
     splashOut->setDefaultGrayProfile(defaultgrayprofile);
     splashOut->setDefaultRGBProfile(defaultrgbprofile);
     splashOut->setDefaultCMYKProfile(defaultcmykprofile);
 #    endif
     splashOut->startDoc(doc.get());
 
 #endif // UTILS_USE_PTHREADS
 
     if (sz != 0)
         param_w = param_h = sz;
     pg_num_len = numberOfCharacters(doc->getNumPages());
     for (pg = firstPage; pg <= lastPage; ++pg) {
         if (printOnlyEven && pg % 2 == 1)
             continue;
         if (printOnlyOdd && pg % 2 == 0)
             continue;
         if (useCropBox) {
             pg_w = doc->getPageCropWidth(pg);
             pg_h = doc->getPageCropHeight(pg);
         } else {
             pg_w = doc->getPageMediaWidth(pg);
             pg_h = doc->getPageMediaHeight(pg);
         }
 
         if (scaleDimensionBeforeRotation && needToRotate(doc->getPageRotate(pg)))
             std::swap(pg_w, pg_h);
 
+        // Handle requests for specific image size
         if (scaleTo != 0) {
             resolution = (72.0 * scaleTo) / (pg_w > pg_h ? pg_w : pg_h);
             x_resolution = y_resolution = resolution;
+            pg_w = pg_h = scaleTo;
         } else {
             if (x_scaleTo > 0) {
                 x_resolution = (72.0 * x_scaleTo) / pg_w;
+                pg_w = x_scaleTo;
                 if (y_scaleTo == -1)
                     y_resolution = x_resolution;
             }
+
             if (y_scaleTo > 0) {
                 y_resolution = (72.0 * y_scaleTo) / pg_h;
+                pg_h = y_scaleTo;
                 if (x_scaleTo == -1)
                     x_resolution = y_resolution;
             }
+
+            // No specific image size requested---compute the size from the resolution
+            if (x_scaleTo <= 0) {
+                pg_w = pg_w * (x_resolution / 72.0);
+            }
+            if (y_scaleTo <= 0) {
+                pg_h = pg_h * (y_resolution / 72.0);
+            }
         }
-        pg_w = pg_w * (x_resolution / 72.0);
-        pg_h = pg_h * (y_resolution / 72.0);
 
         if (!scaleDimensionBeforeRotation && needToRotate(doc->getPageRotate(pg)))
             std::swap(pg_w, pg_h);
 
         if (ppmRoot != nullptr) {
             const char *ext = png ? "png" : (jpeg || jpegcmyk) ? "jpg" : tiff ? "tif" : mono ? "pbm" : gray ? "pgm" : "ppm";
             if (singleFile && !forceNum) {
                 ppmFile = new char[strlen(ppmRoot) + 1 + strlen(ext) + 1];
                 sprintf(ppmFile, "%s.%s", ppmRoot, ext);
             } else {
                 ppmFile = new char[strlen(ppmRoot) + 1 + pg_num_len + 1 + strlen(ext) + 1];
                 sprintf(ppmFile, "%s%s%0*d.%s", ppmRoot, sep, pg_num_len, pg, ext);
             }
         } else {
             ppmFile = nullptr;
         }
 #ifndef UTILS_USE_PTHREADS
         // process job in main thread
         savePageSlice(doc.get(), splashOut, pg, param_x, param_y, param_w, param_h, pg_w, pg_h, ppmFile);
 
         delete[] ppmFile;
 #else
 
         // queue job for worker threads
         PageJob pageJob = { .doc = doc.get(),
                             .pg = pg,
 
                             .pg_w = pg_w,
                             .pg_h = pg_h,
 
                             .paperColor = &paperColor,
 
                             .ppmFile = ppmFile };
 
         pageJobQueue.push_back(pageJob);
 
 #endif // UTILS_USE_PTHREADS
     }
 #ifndef UTILS_USE_PTHREADS
     delete splashOut;
 #else
 
     // spawn worker threads and wait on them
     jobs = (pthread_t *)malloc(numberOfJobs * sizeof(pthread_t));
 
     for (int i = 0; i < numberOfJobs; ++i) {
         if (pthread_create(&jobs[i], NULL, (void *(*)(void *))processPageJobs, NULL) != 0) {
             fprintf(stderr, "pthread_create() failed with errno: %d\n", errno);
             exit(EXIT_FAILURE);
         }
     }
 
     for (int i = 0; i < numberOfJobs; ++i) {
         if (pthread_join(jobs[i], NULL) != 0) {
             fprintf(stderr, "pthread_join() failed with errno: %d\n", errno);
             exit(EXIT_FAILURE);
         }
     }
 
     free(jobs);
 
 #endif // UTILS_USE_PTHREADS
 
     return 0;
 }
