changeset:   16464:417633b22abb
user:        Bob Friesenhahn <bfriesen@GraphicsMagick.org>
date:        Sun Feb 07 14:52:54 2021 -0600
summary:     Add explicit cast to float where implicit casts to float from double were occurring.

diff -r ced6822dd64a -r 417633b22abb ChangeLog
--- a/ChangeLog	Sun Feb 07 13:27:16 2021 -0600
+++ b/ChangeLog	Sun Feb 07 14:52:54 2021 -0600
@@ -1,5 +1,8 @@
 2021-02-07  Bob Friesenhahn  <bfriesen@simple.dallas.tx.us>
 
+        * Add explicit cast to float where implicit casts to float from
+        double were occurring.
+
         * magick/utility.c (MagickDoubleToLong): Guard against LONG_MAX
         not directly representable as a double.
 
diff -r ced6822dd64a -r 417633b22abb coders/cineon.c
--- a/coders/cineon.c	Sun Feb 07 13:27:16 2021 -0600
+++ b/coders/cineon.c	Sun Feb 07 14:52:54 2021 -0600
@@ -1,5 +1,5 @@
 /*
-% Copyright (C) 2003-2020 GraphicsMagick Group
+% Copyright (C) 2003-2021 GraphicsMagick Group
 %
 % This program is covered by multiple licenses, which are described in
 % Copyright.txt. You should have received a copy of Copyright.txt with this
@@ -1084,9 +1084,9 @@
     *definition_value; \
 \
   if ((definition_value=AccessDefinition(image_info,"dpx",&key[4]))) \
-    member.f=strtod(definition_value, (char **) NULL); \
+    member.f=(float) strtod(definition_value, (char **) NULL); \
   else if ((attribute=GetImageAttribute(image,key))) \
-    member.f=strtod(attribute->value, (char **) NULL); \
+    member.f=(float) strtod(attribute->value, (char **) NULL); \
   else \
     SET_UNDEFINED_R32(member); \
 }
@@ -1271,32 +1271,32 @@
   SET_UNDEFINED_R32(cin_image_info.white_point[1]);
   if ( image->chromaticity.white_point.x != 0.0 && image->chromaticity.white_point.y != 0.0 )
     {
-      cin_image_info.white_point[0].f = image->chromaticity.white_point.x;
-      cin_image_info.white_point[1].f = image->chromaticity.white_point.y;
+      cin_image_info.white_point[0].f = (float) image->chromaticity.white_point.x;
+      cin_image_info.white_point[1].f = (float) image->chromaticity.white_point.y;
     }
   /* Red primary chromaticity - x,y pair */
   SET_UNDEFINED_R32(cin_image_info.red_primary_chromaticity[0]);
   SET_UNDEFINED_R32(cin_image_info.red_primary_chromaticity[1]);
   if ( image->chromaticity.red_primary.x != 0.0 &&  image->chromaticity.red_primary.y != 0.0)
     {
-      cin_image_info.red_primary_chromaticity[0].f = image->chromaticity.red_primary.x;
-      cin_image_info.red_primary_chromaticity[1].f = image->chromaticity.red_primary.y;
+      cin_image_info.red_primary_chromaticity[0].f = (float) image->chromaticity.red_primary.x;
+      cin_image_info.red_primary_chromaticity[1].f = (float) image->chromaticity.red_primary.y;
     }
   /* Green primary chromaticity - x,y pair */
   SET_UNDEFINED_R32(cin_image_info.green_primary_chromaticity[0]);
   SET_UNDEFINED_R32(cin_image_info.green_primary_chromaticity[1]);
   if ( image->chromaticity.green_primary.x != 0.0 && image->chromaticity.green_primary.y != 0.0 )
     {
-      cin_image_info.green_primary_chromaticity[0].f = image->chromaticity.green_primary.x;
-      cin_image_info.green_primary_chromaticity[1].f = image->chromaticity.green_primary.y;
+      cin_image_info.green_primary_chromaticity[0].f = (float) image->chromaticity.green_primary.x;
+      cin_image_info.green_primary_chromaticity[1].f = (float) image->chromaticity.green_primary.y;
     }
   /* Blue primary chromaticity - x,y pair */
   SET_UNDEFINED_R32(cin_image_info.blue_primary_chromaticity[0]);
   SET_UNDEFINED_R32(cin_image_info.blue_primary_chromaticity[1]);
   if ( image->chromaticity.blue_primary.x != 0.0 && image->chromaticity.blue_primary.y != 0.0 )
     {
-      cin_image_info.blue_primary_chromaticity[0].f = image->chromaticity.blue_primary.x;
-      cin_image_info.blue_primary_chromaticity[1].f = image->chromaticity.blue_primary.y;
+      cin_image_info.blue_primary_chromaticity[0].f = (float) image->chromaticity.blue_primary.x;
+      cin_image_info.blue_primary_chromaticity[1].f = (float) image->chromaticity.blue_primary.y;
     }
   /* Label text */
   AttributeToString(image_info,image,"DPX:file.project.name",cin_image_info.label_text);
diff -r ced6822dd64a -r 417633b22abb coders/dpx.c
--- a/coders/dpx.c	Sun Feb 07 13:27:16 2021 -0600
+++ b/coders/dpx.c	Sun Feb 07 14:52:54 2021 -0600
@@ -1,5 +1,5 @@
 /*
-% Copyright (C) 2005-2020 GraphicsMagick Group
+% Copyright (C) 2005-2021 GraphicsMagick Group
 %
 % This program is covered by multiple licenses, which are described in
 % Copyright.txt. You should have received a copy of Copyright.txt with this
@@ -3606,9 +3606,9 @@
     *definition_value_; \
 \
   if ((definition_value_=AccessDefinition(image_info,"dpx",&key[4]))) \
-    member.f=strtod(definition_value_, (char **) NULL); \
+    member.f=(float) strtod(definition_value_, (char **) NULL); \
   else if ((attribute_=GetImageAttribute(image,key))) \
-    member.f=strtod(attribute_->value, (char **) NULL); \
+    member.f=(float) strtod(attribute_->value, (char **) NULL); \
   else \
     SET_UNDEFINED_R32(member); \
 }
diff -r ced6822dd64a -r 417633b22abb coders/png.c
--- a/coders/png.c	Sun Feb 07 13:27:16 2021 -0600
+++ b/coders/png.c	Sun Feb 07 14:52:54 2021 -0600
@@ -1,5 +1,5 @@
 /*
-% Copyright (C) 2003-2020 GraphicsMagick Group
+% Copyright (C) 2003-2021 GraphicsMagick Group
 % Copyright (C) 2002 ImageMagick Studio
 % Copyright 1991-1999 E. I. du Pont de Nemours and Company
 %
@@ -4745,7 +4745,7 @@
                     igamma;
 
                   igamma=mng_get_long(p);
-                  mng_info->global_gamma=((float) igamma)*0.00001;
+                  mng_info->global_gamma=((float) igamma*0.00001f);
                   mng_info->have_global_gama=MagickTrue;
                 }
               else
diff -r ced6822dd64a -r 417633b22abb coders/preview.c
--- a/coders/preview.c	Sun Feb 07 13:27:16 2021 -0600
+++ b/coders/preview.c	Sun Feb 07 14:52:54 2021 -0600
@@ -1,5 +1,5 @@
 /*
-% Copyright (C) 2003-2019 GraphicsMagick Group
+% Copyright (C) 2003-2021 GraphicsMagick Group
 % Copyright (C) 2002 ImageMagick Studio
 % Copyright 1991-1999 E. I. du Pont de Nemours and Company
 %
@@ -180,7 +180,7 @@
     factor[MaxTextExtent],
     label[MaxTextExtent];
 
-  float
+  double
     degrees,
     gamma,
     percentage,
diff -r ced6822dd64a -r 417633b22abb coders/tiff.c
--- a/coders/tiff.c	Sun Feb 07 13:27:16 2021 -0600
+++ b/coders/tiff.c	Sun Feb 07 14:52:54 2021 -0600
@@ -2031,8 +2031,8 @@
       if (planar_config == PLANARCONFIG_SEPARATE)
         image->interlace=PlaneInterlace;
       (void) TIFFGetFieldDefaulted(tiff,TIFFTAG_RESOLUTIONUNIT,&units);
-      x_resolution=image->x_resolution;
-      y_resolution=image->y_resolution;
+      x_resolution=(float) image->x_resolution;
+      y_resolution=(float) image->y_resolution;
       (void) TIFFGetFieldDefaulted(tiff,TIFFTAG_XRESOLUTION,&x_resolution);
       (void) TIFFGetFieldDefaulted(tiff,TIFFTAG_YRESOLUTION,&y_resolution);
       image->x_resolution=x_resolution;
@@ -5580,12 +5580,12 @@
             Set image primary chromaticities (x,y coordinates of RGB
             colorants and white point).
           */
-          chromaticity[0]=image->chromaticity.red_primary.x;
-          chromaticity[1]=image->chromaticity.red_primary.y;
-          chromaticity[2]=image->chromaticity.green_primary.x;
-          chromaticity[3]=image->chromaticity.green_primary.y;
-          chromaticity[4]=image->chromaticity.blue_primary.x;
-          chromaticity[5]=image->chromaticity.blue_primary.y;
+          chromaticity[0]=(float) image->chromaticity.red_primary.x;
+          chromaticity[1]=(float) image->chromaticity.red_primary.y;
+          chromaticity[2]=(float) image->chromaticity.green_primary.x;
+          chromaticity[3]=(float) image->chromaticity.green_primary.y;
+          chromaticity[4]=(float) image->chromaticity.blue_primary.x;
+          chromaticity[5]=(float) image->chromaticity.blue_primary.y;
           if (logging)
             (void) LogMagickEvent(CoderEvent,GetMagickModule(),
                                   "Primary Chromaticities: "
@@ -5597,8 +5597,8 @@
                                   chromaticity[4] /* blue_primary.x */,
                                   chromaticity[5] /* blue_primary.y */);
           (void) TIFFSetField(tiff,TIFFTAG_PRIMARYCHROMATICITIES,chromaticity);
-          chromaticity[0]=image->chromaticity.white_point.x;
-          chromaticity[1]=image->chromaticity.white_point.y;
+          chromaticity[0]=(float) image->chromaticity.white_point.x;
+          chromaticity[1]=(float) image->chromaticity.white_point.y;
           if (logging)
             (void) LogMagickEvent(CoderEvent,GetMagickModule(),
                                   "White Point: %gx%g",
diff -r ced6822dd64a -r 417633b22abb coders/wmf.c
--- a/coders/wmf.c	Sun Feb 07 13:27:16 2021 -0600
+++ b/coders/wmf.c	Sun Feb 07 14:52:54 2021 -0600
@@ -1,5 +1,5 @@
 /*
-% Copyright (C) 2003-2020 GraphicsMagick Group
+% Copyright (C) 2003-2021 GraphicsMagick Group
 % Copyright (C) 2002 ImageMagick Studio
 %
 % This program is covered by multiple licenses, which are described in
@@ -1339,9 +1339,9 @@
                 text_width = metrics.width * (ddata->scale_y / ddata->scale_x);
 
 #if defined(HasWMFlite)
-              point.x -= text_width / 2;
+              point.x -= (float) (text_width / 2.0);
 #else
-              point.x += bbox_width / 2 - text_width / 2;
+              point.x += (float) (bbox_width / 2.0 - text_width / 2.0);
 #endif
             }
         }
@@ -1436,9 +1436,9 @@
       if(metrics.underline_thickness < 1.5)
         line_height *= 0.55;
       ulTL.x = 0;
-      ulTL.y = AbsoluteValue(metrics.descent) - line_height;
-      ulBR.x = metrics.width;
-      ulBR.y = AbsoluteValue(metrics.descent);
+      ulTL.y = (float) (AbsoluteValue(metrics.descent) - line_height);
+      ulBR.x = (float) metrics.width;
+      ulBR.y = (float) AbsoluteValue(metrics.descent);
 
       DrawRectangle(WmfDrawContext,
                     XC(ulTL.x), YC(ulTL.y), XC(ulBR.x), YC(ulBR.y));
@@ -1458,9 +1458,9 @@
       if(metrics.underline_thickness < 2.0)
         line_height *= 0.55;
       ulTL.x = 0;
-      ulTL.y = -(((double) metrics.ascent) / 2 + line_height / 2);
-      ulBR.x = metrics.width;
-      ulBR.y = -(((double) metrics.ascent) / 2 - line_height / 2);
+      ulTL.y = (float) -(((double) metrics.ascent) / 2.0 + line_height / 2.0);
+      ulBR.x = (float) metrics.width;
+      ulBR.y = (float) -(((double) metrics.ascent) / 2.0 - line_height / 2.0);
 
       DrawRectangle(WmfDrawContext,
                     XC(ulTL.x), YC(ulTL.y), XC(ulBR.x), YC(ulBR.y));
diff -r ced6822dd64a -r 417633b22abb coders/wpg.c
--- a/coders/wpg.c	Sun Feb 07 13:27:16 2021 -0600
+++ b/coders/wpg.c	Sun Feb 07 14:52:54 2021 -0600
@@ -1,5 +1,5 @@
 /*
-% Copyright (C) 2003-2020 GraphicsMagick Group
+% Copyright (C) 2003-2021 GraphicsMagick Group
 % Copyright (C) 2002 ImageMagick Studio
 %
 % This program is covered by multiple licenses, which are described in
@@ -768,7 +768,7 @@
  if(Flags & ROT)
         {
         x=ReadBlobLSBLong(image);       /*Rot Angle*/
-        if(Angle) *Angle=x/65536.0;
+        if(Angle) *Angle=(float) (x/65536.0);
         }
  if(Flags & (ROT|SCL))
         {
diff -r ced6822dd64a -r 417633b22abb magick/colorspace.c
--- a/magick/colorspace.c	Sun Feb 07 13:27:16 2021 -0600
+++ b/magick/colorspace.c	Sun Feb 07 14:52:54 2021 -0600
@@ -1,5 +1,5 @@
 /*
-% Copyright (C) 2003 - 2019 GraphicsMagick Group
+% Copyright (C) 2003 - 2021 GraphicsMagick Group
 % Copyright (C) 2003 ImageMagick Studio
 % Copyright 1991-1999 E. I. du Pont de Nemours and Company
 %
@@ -674,27 +674,27 @@
           xform.primary_info.z=(ScaleCharToMap(137));
           for (i=0; i <= (long) (0.018*MaxMap); i++)
             {
-              xform.x[i].x=(0.003962014134275617*i);
-              xform.x[i].y=((-0.002426619775463276)*i);
-              xform.x[i].z=(0.006927257754597858*i);
-              xform.y[i].x=(0.007778268551236748*i);
-              xform.y[i].y=((-0.004763965913702149)*i);
-              xform.y[i].z=((-0.005800713697502058)*i);
-              xform.z[i].x=(0.001510600706713781*i);
-              xform.z[i].y=(0.007190585689165425*i);
-              xform.z[i].z=((-0.0011265440570958)*i);
+              xform.x[i].x=(float) (0.003962014134275617*i);
+              xform.x[i].y=(float) ((-0.002426619775463276)*i);
+              xform.x[i].z=(float) (0.006927257754597858*i);
+              xform.y[i].x=(float) (0.007778268551236748*i);
+              xform.y[i].y=(float) ((-0.004763965913702149)*i);
+              xform.y[i].z=(float) ((-0.005800713697502058)*i);
+              xform.z[i].x=(float) (0.001510600706713781*i);
+              xform.z[i].y=(float) (0.007190585689165425*i);
+              xform.z[i].z=(float) ((-0.0011265440570958)*i);
             }
           for ( ; i <= (long) MaxMap; i++)
             {
-              xform.x[i].x=(0.2201118963486454*(1.099*i-0.099));
-              xform.x[i].y=((-0.1348122097479598)*(1.099*i-0.099));
-              xform.x[i].z=(0.3848476530332144*(1.099*i-0.099));
-              xform.y[i].x=(0.4321260306242638*(1.099*i-0.099));
-              xform.y[i].y=((-0.2646647729834528)*(1.099*i-0.099));
-              xform.y[i].z=((-0.3222618720834477)*(1.099*i-0.099));
-              xform.z[i].x=(0.08392226148409894*(1.099*i-0.099));
-              xform.z[i].y=(0.3994769827314126*(1.099*i-0.099));
-              xform.z[i].z=((-0.06258578094976668)*(1.099*i-0.099));
+              xform.x[i].x=(float) (0.2201118963486454*(1.099*i-0.099));
+              xform.x[i].y=(float) ((-0.1348122097479598)*(1.099*i-0.099));
+              xform.x[i].z=(float) (0.3848476530332144*(1.099*i-0.099));
+              xform.y[i].x=(float) (0.4321260306242638*(1.099*i-0.099));
+              xform.y[i].y=(float) ((-0.2646647729834528)*(1.099*i-0.099));
+              xform.y[i].z=(float) ((-0.3222618720834477)*(1.099*i-0.099));
+              xform.z[i].x=(float) (0.08392226148409894*(1.099*i-0.099));
+              xform.z[i].y=(float) (0.3994769827314126*(1.099*i-0.099));
+              xform.z[i].z=(float) ((-0.06258578094976668)*(1.099*i-0.099));
             }
           break;
         }
@@ -714,15 +714,15 @@
 #endif
           for (i=0; i <= (long) MaxMap; i++)
             {
-              xform.x[i].x=(0.412453f*(float) i);
-              xform.x[i].y=(0.212671f*(float) i);
-              xform.x[i].z=(0.019334f*(float) i);
-              xform.y[i].x=(0.35758f*(float) i);
-              xform.y[i].y=(0.71516f*(float) i);
-              xform.y[i].z=(0.119193f*(float) i);
-              xform.z[i].x=(0.180423f*(float) i);
-              xform.z[i].y=(0.072169f*(float) i);
-              xform.z[i].z=(0.950227f*(float) i);
+              xform.x[i].x=(float) (0.412453f*(float) i);
+              xform.x[i].y=(float) (0.212671f*(float) i);
+              xform.x[i].z=(float) (0.019334f*(float) i);
+              xform.y[i].x=(float) (0.35758f*(float) i);
+              xform.y[i].y=(float) (0.71516f*(float) i);
+              xform.y[i].z=(float) (0.119193f*(float) i);
+              xform.z[i].x=(float) (0.180423f*(float) i);
+              xform.z[i].y=(float) (0.072169f*(float) i);
+              xform.z[i].z=(float) (0.950227f*(float) i);
             }
           break;
         }
@@ -747,15 +747,15 @@
 #endif
           for (i=0; i <= (long) MaxMap; i++)
             {
-              xform.x[i].x=(0.299f*(float) i); /* Red */
-              xform.x[i].y=((-0.16873f)*(float) i); /* Green */
-              xform.x[i].z=(0.500000f*(float) i); /* Blue */
-              xform.y[i].x=(0.587f*(float) i); /* Red */
-              xform.y[i].y=((-0.331264f)*(float) i); /* Green */
-              xform.y[i].z=((-0.418688f)*(float) i); /* Blue */
-              xform.z[i].x=(0.114f*(float) i); /* Red */
-              xform.z[i].y=(0.500000f*(float) i); /* Green */
-              xform.z[i].z=((-0.081312f)*(float) i); /* Blue */
+              xform.x[i].x=(float) (0.299f*(float) i); /* Red */
+              xform.x[i].y=(float) ((-0.16873f)*(float) i); /* Green */
+              xform.x[i].z=(float) (0.500000f*(float) i); /* Blue */
+              xform.y[i].x=(float) (0.587f*(float) i); /* Red */
+              xform.y[i].y=(float) ((-0.331264f)*(float) i); /* Green */
+              xform.y[i].z=(float) ((-0.418688f)*(float) i); /* Blue */
+              xform.z[i].x=(float) (0.114f*(float) i); /* Red */
+              xform.z[i].y=(float) (0.500000f*(float) i); /* Green */
+              xform.z[i].z=(float) ((-0.081312f)*(float) i); /* Blue */
             }
           break;
         }
@@ -780,15 +780,15 @@
 #endif
           for (i=0; i <= (long) MaxMap; i++)
             {
-              xform.x[i].x=(0.212600f*(float) i); /* Red */
-              xform.x[i].y=((-0.114572f)*(float) i); /* Green */
-              xform.x[i].z=(0.500000f*(float) i); /* Blue */
-              xform.y[i].x=(0.715200f*(float) i); /* Red */
-              xform.y[i].y=((-0.385428f)*(float) i); /* Green */
-              xform.y[i].z=((-0.454153f)*(float) i); /* Blue */
-              xform.z[i].x=(0.072200f*(float) i); /* Red */
-              xform.z[i].y=(0.500000f*(float) i); /* Green */
-              xform.z[i].z=((-0.045847f)*(float) i); /* Blue */
+              xform.x[i].x=(float) (0.212600f*(float) i); /* Red */
+              xform.x[i].y=(float) ((-0.114572f)*(float) i); /* Green */
+              xform.x[i].z=(float) (0.500000f*(float) i); /* Blue */
+              xform.y[i].x=(float) (0.715200f*(float) i); /* Red */
+              xform.y[i].y=(float) ((-0.385428f)*(float) i); /* Green */
+              xform.y[i].z=(float) ((-0.454153f)*(float) i); /* Blue */
+              xform.z[i].x=(float) (0.072200f*(float) i); /* Red */
+              xform.z[i].y=(float) (0.500000f*(float) i); /* Green */
+              xform.z[i].z=(float) ((-0.045847f)*(float) i); /* Blue */
             }
           break;
         }
@@ -811,27 +811,27 @@
           xform.primary_info.z=(ScaleCharToMap(137));
           for (i=0; i <= (long) (0.018*MaxMap); i++)
             {
-              xform.x[i].x=(0.003962014134275617*i);
-              xform.x[i].y=((-0.002426619775463276)*i);
-              xform.x[i].z=(0.006927257754597858*i);
-              xform.y[i].x=(0.007778268551236748*i);
-              xform.y[i].y=((-0.004763965913702149)*i);
-              xform.y[i].z=((-0.005800713697502058)*i);
-              xform.z[i].x=(0.001510600706713781*i);
-              xform.z[i].y=(0.007190585689165425*i);
-              xform.z[i].z=((-0.0011265440570958)*i);
+              xform.x[i].x=(float) (0.003962014134275617*i);
+              xform.x[i].y=(float) ((-0.002426619775463276)*i);
+              xform.x[i].z=(float) (0.006927257754597858*i);
+              xform.y[i].x=(float) (0.007778268551236748*i);
+              xform.y[i].y=(float) ((-0.004763965913702149)*i);
+              xform.y[i].z=(float) ((-0.005800713697502058)*i);
+              xform.z[i].x=(float) (0.001510600706713781*i);
+              xform.z[i].y=(float) (0.007190585689165425*i);
+              xform.z[i].z=(float) ((-0.0011265440570958)*i);
             }
           for ( ; i <= (long) MaxMap; i++)
             {
-              xform.x[i].x=(0.2201118963486454*(1.099*i-0.099));
-              xform.x[i].y=((-0.1348122097479598)*(1.099*i-0.099));
-              xform.x[i].z=(0.3848476530332144*(1.099*i-0.099));
-              xform.y[i].x=(0.4321260306242638*(1.099*i-0.099));
-              xform.y[i].y=((-0.2646647729834528)*(1.099*i-0.099));
-              xform.y[i].z=((-0.3222618720834477)*(1.099*i-0.099));
-              xform.z[i].x=(0.08392226148409894*(1.099*i-0.099));
-              xform.z[i].y=(0.3994769827314126*(1.099*i-0.099));
-              xform.z[i].z=((-0.06258578094976668)*(1.099*i-0.099));
+              xform.x[i].x=(float) (0.2201118963486454*(1.099*i-0.099));
+              xform.x[i].y=(float) ((-0.1348122097479598)*(1.099*i-0.099));
+              xform.x[i].z=(float) (0.3848476530332144*(1.099*i-0.099));
+              xform.y[i].x=(float) (0.4321260306242638*(1.099*i-0.099));
+              xform.y[i].y=(float) ((-0.2646647729834528)*(1.099*i-0.099));
+              xform.y[i].z=(float) ((-0.3222618720834477)*(1.099*i-0.099));
+              xform.z[i].x=(float) (0.08392226148409894*(1.099*i-0.099));
+              xform.z[i].y=(float) (0.3994769827314126*(1.099*i-0.099));
+              xform.z[i].z=(float) ((-0.06258578094976668)*(1.099*i-0.099));
             }
           break;
         }
@@ -856,15 +856,15 @@
 #endif
           for (i=0; i <= (long) MaxMap; i++)
             {
-              xform.x[i].x=(0.299f*(float) i);
-              xform.x[i].y=(0.596f*(float) i);
-              xform.x[i].z=(0.211f*(float) i);
-              xform.y[i].x=(0.587f*(float) i);
-              xform.y[i].y=((-0.274f)*(float) i);
-              xform.y[i].z=((-0.523f)*(float) i);
-              xform.z[i].x=(0.114f*(float) i);
-              xform.z[i].y=((-0.322f)*(float) i);
-              xform.z[i].z=(0.312f*(float) i);
+              xform.x[i].x=(float) (0.299f*(float) i);
+              xform.x[i].y=(float) (0.596f*(float) i);
+              xform.x[i].z=(float) (0.211f*(float) i);
+              xform.y[i].x=(float) (0.587f*(float) i);
+              xform.y[i].y=(float) ((-0.274f)*(float) i);
+              xform.y[i].z=(float) ((-0.523f)*(float) i);
+              xform.z[i].x=(float) (0.114f*(float) i);
+              xform.z[i].y=(float) ((-0.322f)*(float) i);
+              xform.z[i].z=(float) (0.312f*(float) i);
             }
           break;
         }
@@ -889,15 +889,15 @@
 #endif
           for (i=0; i <= (long) MaxMap; i++)
             {
-              xform.x[i].x=(0.299f*(float) i);
-              xform.x[i].y=((-0.168736f)*(float) i);
-              xform.x[i].z=(0.5f*(float) i);
-              xform.y[i].x=(0.587f*(float) i);
-              xform.y[i].y=((-0.331264f)*(float) i);
-              xform.y[i].z=((-0.418688f)*(float) i);
-              xform.z[i].x=(0.114f*(float) i);
-              xform.z[i].y=(0.5f*(float) i);
-              xform.z[i].z=((-0.081312f)*(float) i);
+              xform.x[i].x=(float) (0.299f*(float) i);
+              xform.x[i].y=(float) ((-0.168736f)*(float) i);
+              xform.x[i].z=(float) (0.5f*(float) i);
+              xform.y[i].x=(float) (0.587f*(float) i);
+              xform.y[i].y=(float) ((-0.331264f)*(float) i);
+              xform.y[i].z=(float) ((-0.418688f)*(float) i);
+              xform.z[i].x=(float) (0.114f*(float) i);
+              xform.z[i].y=(float) (0.5f*(float) i);
+              xform.z[i].z=(float) ((-0.081312f)*(float) i);
             }
           break;
         }
@@ -923,15 +923,15 @@
 #endif
           for (i=0; i <= (long) MaxMap; i++)
             {
-              xform.x[i].x=(0.299f*(float) i);
-              xform.x[i].y=((-0.1474f)*(float) i);
-              xform.x[i].z=(0.615f*(float) i);
-              xform.y[i].x=(0.587f*(float) i);
-              xform.y[i].y=((-0.2895f)*(float) i);
-              xform.y[i].z=((-0.515f)*(float) i);
-              xform.z[i].x=(0.114f*(float) i);
-              xform.z[i].y=(0.4369f*(float) i);
-              xform.z[i].z=((-0.1f)*(float) i);
+              xform.x[i].x=(float) (0.299f*(float) i);
+              xform.x[i].y=(float) ((-0.1474f)*(float) i);
+              xform.x[i].z=(float) (0.615f*(float) i);
+              xform.y[i].x=(float) (0.587f*(float) i);
+              xform.y[i].y=(float) ((-0.2895f)*(float) i);
+              xform.y[i].z=(float) ((-0.515f)*(float) i);
+              xform.z[i].x=(float) (0.114f*(float) i);
+              xform.z[i].y=(float) (0.4369f*(float) i);
+              xform.z[i].z=(float) ((-0.1f)*(float) i);
             }
           break;
         }
diff -r ced6822dd64a -r 417633b22abb magick/effect.c
--- a/magick/effect.c	Sun Feb 07 13:27:16 2021 -0600
+++ b/magick/effect.c	Sun Feb 07 14:52:54 2021 -0600
@@ -1,5 +1,5 @@
 /*
-% Copyright (C) 2003-2020 GraphicsMagick Group
+% Copyright (C) 2003-2021 GraphicsMagick Group
 % Copyright (C) 2002 ImageMagick Studio
 %
 % This program is covered by multiple licenses, which are described in
@@ -1374,7 +1374,7 @@
     normalize=1.0/normalize;
     for (i=0; i < (width*width); i++)
       {
-        normal_kernel[i]=normalize*kernel[i];
+        normal_kernel[i]=(float_quantum_t) (normalize*kernel[i]);
       }
   }
 
diff -r ced6822dd64a -r 417633b22abb magick/gem.c
--- a/magick/gem.c	Sun Feb 07 13:27:16 2021 -0600
+++ b/magick/gem.c	Sun Feb 07 14:52:54 2021 -0600
@@ -1,5 +1,5 @@
 /*
-% Copyright (C) 2003-2019 GraphicsMagick Group
+% Copyright (C) 2003-2021 GraphicsMagick Group
 % Copyright (C) 2002 ImageMagick Studio
 %
 % This program is covered by multiple licenses, which are described in
@@ -196,10 +196,10 @@
   pixel=(NOISE_FLT_T) quantum_pixel;
 
 #if QuantumDepth > 8
-  pixel /= MaxRGBDouble/255.0;
+  pixel /= (NOISE_FLT_T) (MaxRGBDouble/255.0);
 #endif
 
-  alpha=MagickRandomRealInlined(kernel);
+  alpha=(NOISE_FLT_T) MagickRandomRealInlined(kernel);
   if (alpha == 0.0)
     alpha=1.0;
   switch (noise_type)
@@ -215,7 +215,7 @@
       float
         tau;
 
-      beta=MagickRandomRealInlined(kernel);
+      beta=(NOISE_FLT_T) MagickRandomRealInlined(kernel);
       sigma=SQRTF(-2.0*LOGF(alpha))*COSF(2.0*MagickPI*beta);
       tau=SQRTF(-2.0*LOGF(alpha))*SINF(2.0*MagickPI*beta);
       value=SQRTF(pixel)*SigmaGaussian*sigma+TauGaussian*tau;
@@ -227,7 +227,7 @@
         sigma=255.0;
       else
         sigma=SQRTF(-2.0*LOGF(alpha));
-      beta=MagickRandomRealInlined(kernel);
+      beta=(NOISE_FLT_T) MagickRandomRealInlined(kernel);
       value=pixel*SigmaMultiplicativeGaussian*sigma*COSF(2.0*MagickPI*beta);
       break;
     }
@@ -252,7 +252,7 @@
             value=SigmaLaplacian*LOGF(2.0*alpha);
           break;
         }
-      beta=1.0-alpha;
+      beta=(NOISE_FLT_T) 1.0-alpha;
       if (beta <= (0.5*NoiseEpsilon))
         value=255.0;
       else
@@ -270,7 +270,7 @@
       limit=exp(-SigmaPoisson*(double) pixel);
       for (i=0; alpha > limit; i++)
       {
-        beta=MagickRandomRealInlined(kernel);
+        beta=(NOISE_FLT_T) MagickRandomRealInlined(kernel);
         alpha=alpha*beta;
       }
       value=pixel-((double) i/SigmaPoisson);
diff -r ced6822dd64a -r 417633b22abb www/Changelog.html
--- a/www/Changelog.html	Sun Feb 07 13:27:16 2021 -0600
+++ b/www/Changelog.html	Sun Feb 07 14:52:54 2021 -0600
@@ -37,8 +37,11 @@
 
 <p>2021-02-07  Bob Friesenhahn  &lt;<a class="reference external" href="mailto:bfriesen&#37;&#52;&#48;simple&#46;dallas&#46;tx&#46;us">bfriesen<span>&#64;</span>simple<span>&#46;</span>dallas<span>&#46;</span>tx<span>&#46;</span>us</a>&gt;</p>
 <blockquote>
-* magick/utility.c (MagickDoubleToLong): Guard against LONG_MAX
-not directly representable as a double.</blockquote>
+<p>* Add explicit cast to float where implicit casts to float from
+double were occurring.</p>
+<p>* magick/utility.c (MagickDoubleToLong): Guard against LONG_MAX
+not directly representable as a double.</p>
+</blockquote>
 <p>2021-02-06  Bob Friesenhahn  &lt;<a class="reference external" href="mailto:bfriesen&#37;&#52;&#48;simple&#46;dallas&#46;tx&#46;us">bfriesen<span>&#64;</span>simple<span>&#46;</span>dallas<span>&#46;</span>tx<span>&#46;</span>us</a>&gt;</p>
 <blockquote>
 * magick/utility.c (TranslateTextEx): If image resolution is

