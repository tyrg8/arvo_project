commit aa35499b1c6a7adfa5de453736a0f0626378f69a
Author: Arnaud Le Blanc <arnaud.lb@gmail.com>
Date:   Tue Dec 21 07:17:12 2021 +0100

    Use new param API in ext/pcntl (#7751)

diff --git a/ext/pcntl/pcntl.c b/ext/pcntl/pcntl.c
index 645b211952..61fe69d123 100644
--- a/ext/pcntl/pcntl.c
+++ b/ext/pcntl/pcntl.c
@@ -519,636 +519,655 @@ PHP_MINFO_FUNCTION(pcntl)
 /* {{{ Forks the currently running process following the same behavior as the UNIX fork() system call*/
 PHP_FUNCTION(pcntl_fork)
 {
 	pid_t id;
 
-	if (zend_parse_parameters_none() == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_NONE();
 
 	id = fork();
 	if (id == -1) {
 		PCNTL_G(last_error) = errno;
 		php_error_docref(NULL, E_WARNING, "Error %d", errno);
 	}
 
 	RETURN_LONG((zend_long) id);
 }
 /* }}} */
 
 /* {{{ Set an alarm clock for delivery of a signal*/
 PHP_FUNCTION(pcntl_alarm)
 {
 	zend_long seconds;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &seconds) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(1, 1)
+		Z_PARAM_LONG(seconds);
+	ZEND_PARSE_PARAMETERS_END();
 
 	RETURN_LONG((zend_long) alarm(seconds));
 }
 /* }}} */
 
 #define PHP_RUSAGE_PARA(from, to, field) \
 	add_assoc_long(to, #field, from.field)
 #ifndef _OSD_POSIX
 	#define PHP_RUSAGE_SPECIAL(from, to) \
 		PHP_RUSAGE_PARA(from, to, ru_oublock); \
 		PHP_RUSAGE_PARA(from, to, ru_inblock); \
 		PHP_RUSAGE_PARA(from, to, ru_msgsnd); \
 		PHP_RUSAGE_PARA(from, to, ru_msgrcv); \
 		PHP_RUSAGE_PARA(from, to, ru_maxrss); \
 		PHP_RUSAGE_PARA(from, to, ru_ixrss); \
 		PHP_RUSAGE_PARA(from, to, ru_idrss); \
 		PHP_RUSAGE_PARA(from, to, ru_minflt); \
 		PHP_RUSAGE_PARA(from, to, ru_majflt); \
 		PHP_RUSAGE_PARA(from, to, ru_nsignals); \
 		PHP_RUSAGE_PARA(from, to, ru_nvcsw); \
 		PHP_RUSAGE_PARA(from, to, ru_nivcsw); \
 		PHP_RUSAGE_PARA(from, to, ru_nswap);
 #else /*_OSD_POSIX*/
 	#define PHP_RUSAGE_SPECIAL(from, to)
 #endif
 
 #define PHP_RUSAGE_COMMON(from ,to) \
 	PHP_RUSAGE_PARA(from, to, ru_utime.tv_usec); \
 	PHP_RUSAGE_PARA(from, to, ru_utime.tv_sec); \
 	PHP_RUSAGE_PARA(from, to, ru_stime.tv_usec); \
 	PHP_RUSAGE_PARA(from, to, ru_stime.tv_sec);
 
 #define PHP_RUSAGE_TO_ARRAY(from, to) \
 	if (to) { \
 		PHP_RUSAGE_SPECIAL(from, to) \
 		PHP_RUSAGE_COMMON(from, to); \
 	}
 
 /* {{{ Waits on or returns the status of a forked child as defined by the waitpid() system call */
 PHP_FUNCTION(pcntl_waitpid)
 {
 	zend_long pid, options = 0;
 	zval *z_status = NULL, *z_rusage = NULL;
 	int status;
 	pid_t child_id;
 #ifdef HAVE_WAIT4
 	struct rusage rusage;
 #endif
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "lz|lz", &pid, &z_status, &options, &z_rusage) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(2, 4)
+		Z_PARAM_LONG(pid)
+		Z_PARAM_ZVAL(z_status)
+		Z_PARAM_OPTIONAL
+		Z_PARAM_LONG(options)
+		Z_PARAM_ZVAL(z_rusage)
+	ZEND_PARSE_PARAMETERS_END();
 
 	status = zval_get_long(z_status);
 
 #ifdef HAVE_WAIT4
 	if (z_rusage) {
 		z_rusage = zend_try_array_init(z_rusage);
 		if (!z_rusage) {
 			RETURN_THROWS();
 		}
 
 		memset(&rusage, 0, sizeof(struct rusage));
 		child_id = wait4((pid_t) pid, &status, options, &rusage);
 	} else {
 		child_id = waitpid((pid_t) pid, &status, options);
 	}
 #else
 	child_id = waitpid((pid_t) pid, &status, options);
 #endif
 
 	if (child_id < 0) {
 		PCNTL_G(last_error) = errno;
 	}
 
 #ifdef HAVE_WAIT4
 	if (child_id > 0) {
 		PHP_RUSAGE_TO_ARRAY(rusage, z_rusage);
 	}
 #endif
 
 	ZEND_TRY_ASSIGN_REF_LONG(z_status, status);
 
 	RETURN_LONG((zend_long) child_id);
 }
 /* }}} */
 
 /* {{{ Waits on or returns the status of a forked child as defined by the waitpid() system call */
 PHP_FUNCTION(pcntl_wait)
 {
 	zend_long options = 0;
 	zval *z_status = NULL, *z_rusage = NULL;
 	int status;
 	pid_t child_id;
 #ifdef HAVE_WAIT3
 	struct rusage rusage;
 #endif
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "z|lz", &z_status, &options, &z_rusage) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(1, 3)
+		Z_PARAM_ZVAL(z_status)
+		Z_PARAM_OPTIONAL
+		Z_PARAM_LONG(options)
+		Z_PARAM_ZVAL(z_rusage)
+	ZEND_PARSE_PARAMETERS_END();
 
 	status = zval_get_long(z_status);
 #ifdef HAVE_WAIT3
 	if (z_rusage) {
 		z_rusage = zend_try_array_init(z_rusage);
 		if (!z_rusage) {
 			RETURN_THROWS();
 		}
 
 		memset(&rusage, 0, sizeof(struct rusage));
 		child_id = wait3(&status, options, &rusage);
 	} else if (options) {
 		child_id = wait3(&status, options, NULL);
 	} else {
 		child_id = wait(&status);
 	}
 #else
 	child_id = wait(&status);
 #endif
 	if (child_id < 0) {
 		PCNTL_G(last_error) = errno;
 	}
 
 #ifdef HAVE_WAIT3
 	if (child_id > 0) {
 		PHP_RUSAGE_TO_ARRAY(rusage, z_rusage);
 	}
 #endif
 
 	ZEND_TRY_ASSIGN_REF_LONG(z_status, status);
 
 	RETURN_LONG((zend_long) child_id);
 }
 /* }}} */
 
 #undef PHP_RUSAGE_PARA
 #undef PHP_RUSAGE_SPECIAL
 #undef PHP_RUSAGE_COMMON
 #undef PHP_RUSAGE_TO_ARRAY
 
 /* {{{ Returns true if the child status code represents a successful exit */
 PHP_FUNCTION(pcntl_wifexited)
 {
 	zend_long status_word;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &status_word) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(1, 1)
+		Z_PARAM_LONG(status_word)
+	ZEND_PARSE_PARAMETERS_END();
 
 #ifdef WIFEXITED
 	int int_status_word = (int) status_word;
 	if (WIFEXITED(int_status_word)) {
 		RETURN_TRUE;
 	}
 #endif
 
 	RETURN_FALSE;
 }
 /* }}} */
 
 /* {{{ Returns true if the child status code represents a stopped process (WUNTRACED must have been used with waitpid) */
 PHP_FUNCTION(pcntl_wifstopped)
 {
 	zend_long status_word;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &status_word) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(1, 1)
+		Z_PARAM_LONG(status_word)
+	ZEND_PARSE_PARAMETERS_END();
 
 #ifdef WIFSTOPPED
 	int int_status_word = (int) status_word;
 	if (WIFSTOPPED(int_status_word)) {
 		RETURN_TRUE;
 	}
 #endif
 
 	RETURN_FALSE;
 }
 /* }}} */
 
 /* {{{ Returns true if the child status code represents a process that was terminated due to a signal */
 PHP_FUNCTION(pcntl_wifsignaled)
 {
 	zend_long status_word;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &status_word) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(1, 1)
+		Z_PARAM_LONG(status_word)
+	ZEND_PARSE_PARAMETERS_END();
 
 #ifdef WIFSIGNALED
 	int int_status_word = (int) status_word;
 	if (WIFSIGNALED(int_status_word)) {
 		RETURN_TRUE;
 	}
 #endif
 
 	RETURN_FALSE;
 }
 /* }}} */
+
 /* {{{ Returns true if the child status code represents a process that was resumed due to a SIGCONT signal */
 PHP_FUNCTION(pcntl_wifcontinued)
 {
 	zend_long status_word;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &status_word) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(1, 1)
+		Z_PARAM_LONG(status_word)
+	ZEND_PARSE_PARAMETERS_END();
 
 #ifdef HAVE_WCONTINUED
 	int int_status_word = (int) status_word;
 	if (WIFCONTINUED(int_status_word)) {
 		RETURN_TRUE;
 	}
 #endif
 	RETURN_FALSE;
 }
 /* }}} */
 
 
 /* {{{ Returns the status code of a child's exit */
 PHP_FUNCTION(pcntl_wexitstatus)
 {
 	zend_long status_word;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &status_word) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(1, 1)
+		Z_PARAM_LONG(status_word)
+	ZEND_PARSE_PARAMETERS_END();
 
 #ifdef WEXITSTATUS
 	int int_status_word = (int) status_word;
 	RETURN_LONG(WEXITSTATUS(int_status_word));
 #else
 	RETURN_FALSE;
 #endif
 }
 /* }}} */
 
 /* {{{ Returns the number of the signal that terminated the process who's status code is passed  */
 PHP_FUNCTION(pcntl_wtermsig)
 {
 	zend_long status_word;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &status_word) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(1, 1)
+		Z_PARAM_LONG(status_word)
+	ZEND_PARSE_PARAMETERS_END();
 
 #ifdef WTERMSIG
 	int int_status_word = (int) status_word;
 	RETURN_LONG(WTERMSIG(int_status_word));
 #else
 	RETURN_FALSE;
 #endif
 }
 /* }}} */
 
 /* {{{ Returns the number of the signal that caused the process to stop who's status code is passed */
 PHP_FUNCTION(pcntl_wstopsig)
 {
 	zend_long status_word;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &status_word) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(1, 1)
+		Z_PARAM_LONG(status_word)
+	ZEND_PARSE_PARAMETERS_END();
 
 #ifdef WSTOPSIG
 	int int_status_word = (int) status_word;
 	RETURN_LONG(WSTOPSIG(int_status_word));
 #else
 	RETURN_FALSE;
 #endif
 }
 /* }}} */
 
 /* {{{ Executes specified program in current process space as defined by exec(2) */
 PHP_FUNCTION(pcntl_exec)
 {
 	zval *args = NULL, *envs = NULL;
 	zval *element;
 	HashTable *args_hash, *envs_hash;
 	int argc = 0, argi = 0;
 	int envc = 0, envi = 0;
 	char **argv = NULL, **envp = NULL;
 	char **current_arg, **pair;
 	size_t pair_length;
 	zend_string *key;
 	char *path;
 	size_t path_len;
 	zend_ulong key_num;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "p|aa", &path, &path_len, &args, &envs) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(1, 3)
+		Z_PARAM_PATH(path, path_len)
+		Z_PARAM_OPTIONAL
+		Z_PARAM_ARRAY(args)
+		Z_PARAM_ARRAY(envs)
+	ZEND_PARSE_PARAMETERS_END();
 
 	if (ZEND_NUM_ARGS() > 1) {
 		/* Build argument list */
 		SEPARATE_ARRAY(args);
 		args_hash = Z_ARRVAL_P(args);
 		argc = zend_hash_num_elements(args_hash);
 
 		argv = safe_emalloc((argc + 2), sizeof(char *), 0);
 		*argv = path;
 		current_arg = argv+1;
 		ZEND_HASH_FOREACH_VAL(args_hash, element) {
 			if (argi >= argc) break;
 			if (!try_convert_to_string(element)) {
 				efree(argv);
 				RETURN_THROWS();
 			}
 
 			*current_arg = Z_STRVAL_P(element);
 			argi++;
 			current_arg++;
 		} ZEND_HASH_FOREACH_END();
 		*current_arg = NULL;
 	} else {
 		argv = emalloc(2 * sizeof(char *));
 		argv[0] = path;
 		argv[1] = NULL;
 	}
 
 	if ( ZEND_NUM_ARGS() == 3 ) {
 		/* Build environment pair list */
 		SEPARATE_ARRAY(envs);
 		envs_hash = Z_ARRVAL_P(envs);
 		envc = zend_hash_num_elements(envs_hash);
 
 		pair = envp = safe_emalloc((envc + 1), sizeof(char *), 0);
 		ZEND_HASH_FOREACH_KEY_VAL(envs_hash, key_num, key, element) {
 			if (envi >= envc) break;
 			if (!key) {
 				key = zend_long_to_str(key_num);
 			} else {
 				zend_string_addref(key);
 			}
 
 			if (!try_convert_to_string(element)) {
 				zend_string_release(key);
 				efree(argv);
 				efree(envp);
 				RETURN_THROWS();
 			}
 
 			/* Length of element + equal sign + length of key + null */
 			ZEND_ASSERT(Z_STRLEN_P(element) < SIZE_MAX && ZSTR_LEN(key) < SIZE_MAX);
 			*pair = safe_emalloc(Z_STRLEN_P(element) + 1, sizeof(char), ZSTR_LEN(key) + 1);
 			pair_length = Z_STRLEN_P(element) + ZSTR_LEN(key) + 2;
 			strlcpy(*pair, ZSTR_VAL(key), ZSTR_LEN(key) + 1);
 			strlcat(*pair, "=", pair_length);
 			strlcat(*pair, Z_STRVAL_P(element), pair_length);
 
 			/* Cleanup */
 			zend_string_release_ex(key, 0);
 			envi++;
 			pair++;
 		} ZEND_HASH_FOREACH_END();
 		*(pair) = NULL;
 
 		if (execve(path, argv, envp) == -1) {
 			PCNTL_G(last_error) = errno;
 			php_error_docref(NULL, E_WARNING, "Error has occurred: (errno %d) %s", errno, strerror(errno));
 		}
 
 		/* Cleanup */
 		for (pair = envp; *pair != NULL; pair++) efree(*pair);
 		efree(envp);
 	} else {
 
 		if (execv(path, argv) == -1) {
 			PCNTL_G(last_error) = errno;
 			php_error_docref(NULL, E_WARNING, "Error has occurred: (errno %d) %s", errno, strerror(errno));
 		}
 	}
 
 	efree(argv);
 
 	RETURN_FALSE;
 }
 /* }}} */
 
 /* {{{ Assigns a system signal handler to a PHP function */
 PHP_FUNCTION(pcntl_signal)
 {
 	zval *handle;
 	zend_long signo;
 	bool restart_syscalls = 1;
 	bool restart_syscalls_is_null = 1;
 	char *error = NULL;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "lz|b!", &signo, &handle, &restart_syscalls, &restart_syscalls_is_null) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(2, 3)
+		Z_PARAM_LONG(signo)
+		Z_PARAM_ZVAL(handle)
+		Z_PARAM_OPTIONAL
+		Z_PARAM_BOOL_OR_NULL(restart_syscalls, restart_syscalls_is_null)
+	ZEND_PARSE_PARAMETERS_END();
 
 	if (signo < 1) {
 		zend_argument_value_error(1, "must be greater than or equal to 1");
 		RETURN_THROWS();
 	}
 
 	if (signo >= PCNTL_G(num_signals)) {
 		zend_argument_value_error(1, "must be less than %d", PCNTL_G(num_signals));
 		RETURN_THROWS();
 	}
 
 	if (!PCNTL_G(spares)) {
 		/* since calling malloc() from within a signal handler is not portable,
 		 * pre-allocate a few records for recording signals */
 		int i;
 		for (i = 0; i < PCNTL_G(num_signals); i++) {
 			struct php_pcntl_pending_signal *psig;
 
 			psig = emalloc(sizeof(*psig));
 			psig->next = PCNTL_G(spares);
 			PCNTL_G(spares) = psig;
 		}
 	}
 
 	/* If restart_syscalls was not explicitly specified and the signal is SIGALRM, then default
 	 * restart_syscalls to false. PHP used to enforce that restart_syscalls is false for SIGALRM,
 	 * so we keep this differing default to reduce the degree of BC breakage. */
 	if (restart_syscalls_is_null && signo == SIGALRM) {
 		restart_syscalls = 0;
 	}
 
 	/* Special long value case for SIG_DFL and SIG_IGN */
 	if (Z_TYPE_P(handle) == IS_LONG) {
 		if (Z_LVAL_P(handle) != (zend_long) SIG_DFL && Z_LVAL_P(handle) != (zend_long) SIG_IGN) {
 			zend_argument_value_error(2, "must be either SIG_DFL or SIG_IGN when an integer value is given");
 			RETURN_THROWS();
 		}
 		if (php_signal(signo, (Sigfunc *) Z_LVAL_P(handle), (int) restart_syscalls) == (void *)SIG_ERR) {
 			PCNTL_G(last_error) = errno;
 			php_error_docref(NULL, E_WARNING, "Error assigning signal");
 			RETURN_FALSE;
 		}
 		zend_hash_index_update(&PCNTL_G(php_signal_table), signo, handle);
 		RETURN_TRUE;
 	}
 
 	if (!zend_is_callable_ex(handle, NULL, 0, NULL, NULL, &error)) {
 		zend_string *func_name = zend_get_callable_name(handle);
 		PCNTL_G(last_error) = EINVAL;
 
 		zend_argument_type_error(2, "must be of type callable|int, %s given", zend_zval_type_name(handle));
 		zend_string_release_ex(func_name, 0);
 		efree(error);
 		RETURN_THROWS();
 	}
 	ZEND_ASSERT(!error);
 
 	/* Add the function name to our signal table */
 	handle = zend_hash_index_update(&PCNTL_G(php_signal_table), signo, handle);
 	Z_TRY_ADDREF_P(handle);
 
 	if (php_signal4(signo, pcntl_signal_handler, (int) restart_syscalls, 1) == (void *)SIG_ERR) {
 		PCNTL_G(last_error) = errno;
 		php_error_docref(NULL, E_WARNING, "Error assigning signal");
 		RETURN_FALSE;
 	}
 	RETURN_TRUE;
 }
 /* }}} */
 
 /* {{{ Gets signal handler */
 PHP_FUNCTION(pcntl_signal_get_handler)
 {
 	zval *prev_handle;
 	zend_long signo;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &signo) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(1, 1)
+		Z_PARAM_LONG(signo)
+	ZEND_PARSE_PARAMETERS_END();
 
 	if (signo < 1 || signo > 32) {
 		zend_argument_value_error(1, "must be between 1 and 32");
 		RETURN_THROWS();
 	}
 
 	if ((prev_handle = zend_hash_index_find(&PCNTL_G(php_signal_table), signo)) != NULL) {
 		RETURN_COPY(prev_handle);
 	} else {
 		RETURN_LONG((zend_long)SIG_DFL);
 	}
 }
 
 /* {{{ Dispatch signals to signal handlers */
 PHP_FUNCTION(pcntl_signal_dispatch)
 {
-	if (zend_parse_parameters_none() == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_NONE();
 
 	pcntl_signal_dispatch();
 	RETURN_TRUE;
 }
 /* }}} */
 
 #ifdef HAVE_SIGPROCMASK
 /* {{{ Examine and change blocked signals */
 PHP_FUNCTION(pcntl_sigprocmask)
 {
 	zend_long          how, signo;
 	zval         *user_set, *user_oldset = NULL, *user_signo;
 	sigset_t      set, oldset;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "la|z", &how, &user_set, &user_oldset) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(2, 3)
+		Z_PARAM_LONG(how)
+		Z_PARAM_ARRAY(user_set)
+		Z_PARAM_OPTIONAL
+		Z_PARAM_ZVAL(user_oldset)
+	ZEND_PARSE_PARAMETERS_END();
 
 	if (sigemptyset(&set) != 0 || sigemptyset(&oldset) != 0) {
 		PCNTL_G(last_error) = errno;
 		php_error_docref(NULL, E_WARNING, "%s", strerror(errno));
 		RETURN_FALSE;
 	}
 
 	ZEND_HASH_FOREACH_VAL(Z_ARRVAL_P(user_set), user_signo) {
 		signo = zval_get_long(user_signo);
 		if (sigaddset(&set, signo) != 0) {
 			PCNTL_G(last_error) = errno;
 			php_error_docref(NULL, E_WARNING, "%s", strerror(errno));
 			RETURN_FALSE;
 		}
 	} ZEND_HASH_FOREACH_END();
 
 	if (sigprocmask(how, &set, &oldset) != 0) {
 		PCNTL_G(last_error) = errno;
 		php_error_docref(NULL, E_WARNING, "%s", strerror(errno));
 		RETURN_FALSE;
 	}
 
 	if (user_oldset != NULL) {
 		user_oldset = zend_try_array_init(user_oldset);
 		if (!user_oldset) {
 			RETURN_THROWS();
 		}
 
 		for (signo = 1; signo < PCNTL_G(num_signals); ++signo) {
 			if (sigismember(&oldset, signo) != 1) {
 				continue;
 			}
 			add_next_index_long(user_oldset, signo);
 		}
 	}
 
 	RETURN_TRUE;
 }
 /* }}} */
 #endif
 
 #ifdef HAVE_STRUCT_SIGINFO_T
 # if defined(HAVE_SIGWAITINFO) && defined(HAVE_SIGTIMEDWAIT)
 static void pcntl_sigwaitinfo(INTERNAL_FUNCTION_PARAMETERS, int timedwait) /* {{{ */
 {
 	zval            *user_set, *user_signo, *user_siginfo = NULL;
 	zend_long             tv_sec = 0, tv_nsec = 0;
 	sigset_t         set;
 	int              signo;
 	siginfo_t        siginfo;
 	struct timespec  timeout;
 
 	if (timedwait) {
-		if (zend_parse_parameters(ZEND_NUM_ARGS(), "a|zll", &user_set, &user_siginfo, &tv_sec, &tv_nsec) == FAILURE) {
-			RETURN_THROWS();
-		}
+		ZEND_PARSE_PARAMETERS_START(1, 4)
+			Z_PARAM_ARRAY(user_set)
+			Z_PARAM_OPTIONAL
+			Z_PARAM_ZVAL(user_siginfo)
+			Z_PARAM_LONG(tv_sec)
+			Z_PARAM_LONG(tv_nsec)
+		ZEND_PARSE_PARAMETERS_END();
 	} else {
-		if (zend_parse_parameters(ZEND_NUM_ARGS(), "a|z", &user_set, &user_siginfo) == FAILURE) {
-			RETURN_THROWS();
-		}
+		ZEND_PARSE_PARAMETERS_START(1, 2)
+			Z_PARAM_ARRAY(user_set)
+			Z_PARAM_OPTIONAL
+			Z_PARAM_ZVAL(user_siginfo)
+		ZEND_PARSE_PARAMETERS_END();
 	}
 
 	if (sigemptyset(&set) != 0) {
 		PCNTL_G(last_error) = errno;
 		php_error_docref(NULL, E_WARNING, "%s", strerror(errno));
 		RETURN_FALSE;
 	}
 
 	ZEND_HASH_FOREACH_VAL(Z_ARRVAL_P(user_set), user_signo) {
 		signo = zval_get_long(user_signo);
 		if (sigaddset(&set, signo) != 0) {
 			PCNTL_G(last_error) = errno;
 			php_error_docref(NULL, E_WARNING, "%s", strerror(errno));
 			RETURN_FALSE;
 		}
 	} ZEND_HASH_FOREACH_END();
 
 	if (timedwait) {
 		timeout.tv_sec  = (time_t) tv_sec;
 		timeout.tv_nsec = tv_nsec;
 		signo = sigtimedwait(&set, &siginfo, &timeout);
 	} else {
 		signo = sigwaitinfo(&set, &siginfo);
 	}
 	if (signo == -1 && errno != EAGAIN) {
 		PCNTL_G(last_error) = errno;
 		php_error_docref(NULL, E_WARNING, "%s", strerror(errno));
 	}
 
 	/*
 	 * sigtimedwait and sigwaitinfo can return 0 on success on some
 	 * platforms, e.g. NetBSD
 	 */
 	if (!signo && siginfo.si_signo) {
 		signo = siginfo.si_signo;
 	}
 	pcntl_siginfo_to_zval(signo, &siginfo, user_siginfo);
 	RETURN_LONG(signo);
 }
 /* }}} */
 
 /* {{{ Synchronously wait for queued signals */
@@ -1225,105 +1244,108 @@ static void pcntl_siginfo_to_zval(int signo, siginfo_t *siginfo, zval *user_sigi
 #ifdef HAVE_GETPRIORITY
 /* {{{ Get the priority of any process */
 PHP_FUNCTION(pcntl_getpriority)
 {
 	zend_long who = PRIO_PROCESS;
 	zend_long pid;
 	bool pid_is_null = 1;
 	int pri;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "|l!l", &pid, &pid_is_null, &who) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(0, 2)
+		Z_PARAM_OPTIONAL
+		Z_PARAM_LONG_OR_NULL(pid, pid_is_null)
+		Z_PARAM_LONG(who)
+	ZEND_PARSE_PARAMETERS_END();
 
 	/* needs to be cleared, since any returned value is valid */
 	errno = 0;
 
 	pri = getpriority(who, pid_is_null ? getpid() : pid);
 
 	if (errno) {
 		PCNTL_G(last_error) = errno;
 		switch (errno) {
 			case ESRCH:
 				php_error_docref(NULL, E_WARNING, "Error %d: No process was located using the given parameters", errno);
 				break;
 			case EINVAL:
 				zend_argument_value_error(2, "must be one of PRIO_PGRP, PRIO_USER, or PRIO_PROCESS");
 				RETURN_THROWS();
 			default:
 				php_error_docref(NULL, E_WARNING, "Unknown error %d has occurred", errno);
 				break;
 		}
 		RETURN_FALSE;
 	}
 
 	RETURN_LONG(pri);
 }
 /* }}} */
 #endif
 
 #ifdef HAVE_SETPRIORITY
 /* {{{ Change the priority of any process */
 PHP_FUNCTION(pcntl_setpriority)
 {
 	zend_long who = PRIO_PROCESS;
 	zend_long pid;
 	bool pid_is_null = 1;
 	zend_long pri;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l|l!l", &pri, &pid, &pid_is_null, &who) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(1, 3)
+		Z_PARAM_LONG(pri)
+		Z_PARAM_OPTIONAL
+		Z_PARAM_LONG_OR_NULL(pid, pid_is_null)
+		Z_PARAM_LONG(who)
+	ZEND_PARSE_PARAMETERS_END();
 
 	if (setpriority(who, pid_is_null ? getpid() : pid, pri)) {
 		PCNTL_G(last_error) = errno;
 		switch (errno) {
 			case ESRCH:
 				php_error_docref(NULL, E_WARNING, "Error %d: No process was located using the given parameters", errno);
 				break;
 			case EINVAL:
 				zend_argument_value_error(3, "must be one of PRIO_PGRP, PRIO_USER, or PRIO_PROCESS");
 				RETURN_THROWS();
 			case EPERM:
 				php_error_docref(NULL, E_WARNING, "Error %d: A process was located, but neither its effective nor real user ID matched the effective user ID of the caller", errno);
 				break;
 			case EACCES:
 				php_error_docref(NULL, E_WARNING, "Error %d: Only a super user may attempt to increase the process priority", errno);
 				break;
 			default:
 				php_error_docref(NULL, E_WARNING, "Unknown error %d has occurred", errno);
 				break;
 		}
 		RETURN_FALSE;
 	}
 
 	RETURN_TRUE;
 }
 /* }}} */
 #endif
 
 /* {{{ Retrieve the error number set by the last pcntl function which failed. */
 PHP_FUNCTION(pcntl_get_last_error)
 {
-	if (zend_parse_parameters_none() == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_NONE();
 
 	RETURN_LONG(PCNTL_G(last_error));
 }
 /* }}} */
 
 /* {{{ Retrieve the system error message associated with the given errno. */
 PHP_FUNCTION(pcntl_strerror)
 {
 	zend_long error;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "l", &error) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(1, 1)
+		Z_PARAM_LONG(error)
+	ZEND_PARSE_PARAMETERS_END();
 
 	RETURN_STRING(strerror(error));
 }
 /* }}} */
 
 /* Our custom signal handler that calls the appropriate php_function */
 #ifdef HAVE_STRUCT_SIGINFO_T
@@ -1435,20 +1457,21 @@ static void pcntl_signal_dispatch_tick_function(int dummy_int, void *dummy_point
 /* {{{ Enable/disable asynchronous signal handling and return the old setting. */
 PHP_FUNCTION(pcntl_async_signals)
 {
 	bool on, on_is_null = 1;
 
-	if (zend_parse_parameters(ZEND_NUM_ARGS(), "|b!", &on, &on_is_null) == FAILURE) {
-		RETURN_THROWS();
-	}
+	ZEND_PARSE_PARAMETERS_START(0, 1)
+		Z_PARAM_OPTIONAL
+		Z_PARAM_BOOL_OR_NULL(on, on_is_null)
+	ZEND_PARSE_PARAMETERS_END();
 
 	if (on_is_null) {
 		RETURN_BOOL(PCNTL_G(async_signals));
 	}
 
 	RETVAL_BOOL(PCNTL_G(async_signals));
 	PCNTL_G(async_signals) = on;
 }
 /* }}} */
 
 #ifdef HAVE_UNSHARE
 /* {{{ disassociate parts of the process execution context */
