commit e1b849034261580c2e4e8598408fc6fba8eec91f
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Sun Nov 19 17:47:06 2017 +0300

    SonyArw2Decompressor: width is a multiple of 32

diff --git a/src/librawspeed/decompressors/SonyArw2Decompressor.cpp b/src/librawspeed/decompressors/SonyArw2Decompressor.cpp
index 461c5d66..231b23a7 100644
--- a/src/librawspeed/decompressors/SonyArw2Decompressor.cpp
+++ b/src/librawspeed/decompressors/SonyArw2Decompressor.cpp
@@ -34,16 +34,16 @@ namespace rawspeed {
 SonyArw2Decompressor::SonyArw2Decompressor(const RawImage& img,
                                            const ByteStream& input_)
     : AbstractParallelizedDecompressor(img) {
   if (mRaw->getCpp() != 1 || mRaw->getDataType() != TYPE_USHORT16 ||
       mRaw->getBpp() != 2)
     ThrowRDE("Unexpected component count / data type");
 
   const uint32 w = mRaw->dim.x;
   const uint32 h = mRaw->dim.y;
 
-  if (w == 0 || h == 0 || w > 8000 || h > 5320)
+  if (w == 0 || h == 0 || w % 32 != 0 || w > 8000 || h > 5320)
     ThrowRDE("Unexpected image dimensions found: (%u; %u)", w, h);
 
   // 1 byte per pixel
   input = input_.peekStream(mRaw->dim.x * mRaw->dim.y);
 }
@@ -51,46 +51,50 @@ SonyArw2Decompressor::SonyArw2Decompressor(const RawImage& img,
 void SonyArw2Decompressor::decompressThreaded(
     const RawDecompressorThread* t) const {
   uchar8* data = mRaw->getData();
   uint32 pitch = mRaw->pitch;
   int32 w = mRaw->dim.x;
 
+  assert(mRaw->dim.x > 0);
+  assert(mRaw->dim.x % 32 == 0);
+  assert(mRaw->dim.y > 0);
+
   BitPumpLSB bits(input);
   for (uint32 y = t->start; y < t->end; y++) {
     auto* dest = reinterpret_cast<ushort16*>(&data[y * pitch]);
     // Realign
     bits.setBufferPosition(w * y);
     uint32 random = bits.peekBits(24);
 
     // Process 32 pixels (16x2) per loop.
     for (int32 x = 0; x < w - 30;) {
       int _max = bits.getBits(11);
       int _min = bits.getBits(11);
       int _imax = bits.getBits(4);
       int _imin = bits.getBits(4);
 
       int sh = 0;
       while ((sh < 4) && ((0x80 << sh) <= (_max - _min)))
         sh++;
 
       for (int i = 0; i < 16; i++) {
         int p;
         if (i == _imax)
           p = _max;
         else {
           if (i == _imin)
             p = _min;
           else {
             p = (bits.getBits(7) << sh) + _min;
             if (p > 0x7ff)
               p = 0x7ff;
           }
         }
         mRaw->setWithLookUp(p << 1, reinterpret_cast<uchar8*>(&dest[x + i * 2]),
                             &random);
       }
       x += ((x & 1) != 0) ? 31 : 1; // Skip to next 32 pixels
     }
   }
 }
 
 } // namespace rawspeed
