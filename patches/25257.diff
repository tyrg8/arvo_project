commit 2c15c9ce80b0c8779a3d5cc5ad1c3452e620d084
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Fri Aug 28 16:43:22 2020 +0200

    Rehash function table after disabling functions
    
    To perform fast shutdown without full table cleanup we need all
    internal functions to be in one continuous chunk. This was
    violated when functions were deleted via disable_functions.
    
    This drops the zend_disable_function() API in favor of
    zend_disable_functions(), which disables the given list of
    functions and performs the necessary rehash afterwards.
    
    Also drop PG(disabled_functions), which is no longer used.

diff --git a/Zend/zend_API.c b/Zend/zend_API.c
index ae33bf3022..139e11e937 100644
--- a/Zend/zend_API.c
+++ b/Zend/zend_API.c
@@ -2790,12 +2790,46 @@ ZEND_API zend_result zend_set_hash_symbol(zval *symbol, const char *name, size_t
 
 /* Disabled functions support */
 
-ZEND_API zend_result zend_disable_function(const char *function_name, size_t function_name_length) /* {{{ */
+static void zend_disable_function(const char *function_name, size_t function_name_length)
 {
-	return zend_hash_str_del(CG(function_table), function_name, function_name_length);
+	zend_hash_str_del(CG(function_table), function_name, function_name_length);
+}
+
+ZEND_API void zend_disable_functions(const char *function_list) /* {{{ */
+{
+	if (!function_list || !*function_list) {
+		return;
+	}
+
+	const char *s = NULL, *e = function_list;
+	while (*e) {
+		switch (*e) {
+			case ' ':
+			case ',':
+				if (s) {
+					zend_disable_function(s, e - s);
+					s = NULL;
+				}
+				break;
+			default:
+				if (!s) {
+					s = e;
+				}
+				break;
+		}
+		e++;
+	}
+	if (s) {
+		zend_disable_function(s, e - s);
+	}
+
+	/* Rehash the function table after deleting functions. This ensures that all internal
+	 * functions are contiguous, which means we don't need to perform full table cleanup
+	 * on shutdown. */
+	zend_hash_rehash(CG(function_table));
 }
 /* }}} */
 
 #ifdef ZEND_WIN32
 #pragma optimize("", off)
 #endif
diff --git a/Zend/zend_API.h b/Zend/zend_API.h
index 6f028ae65e..d46fe6968a 100644
--- a/Zend/zend_API.h
+++ b/Zend/zend_API.h
@@ -341,7 +341,7 @@ ZEND_API zend_result zend_register_class_alias_ex(const char *name, size_t name_
 #define zend_register_ns_class_alias(ns, name, ce) \
 	zend_register_class_alias_ex(ZEND_NS_NAME(ns, name), sizeof(ZEND_NS_NAME(ns, name))-1, ce, 1)
 
-ZEND_API zend_result zend_disable_function(const char *function_name, size_t function_name_length);
+ZEND_API void zend_disable_functions(const char *function_list);
 ZEND_API zend_result zend_disable_class(const char *class_name, size_t class_name_length);
 
 ZEND_API ZEND_COLD void zend_wrong_param_count(void);
diff --git a/main/main.c b/main/main.c
index c9cb9b2d85..9a92447f41 100644
--- a/main/main.c
+++ b/main/main.c
@@ -276,66 +276,29 @@ static PHP_INI_MH(OnChangeMemoryLimit)
 /* {{{ PHP_INI_MH */
 static PHP_INI_MH(OnSetLogFilter)
 {
 	const char *filter = ZSTR_VAL(new_value);
 
 	if (!strcmp(filter, "all")) {
 		PG(syslog_filter) = PHP_SYSLOG_FILTER_ALL;
 		return SUCCESS;
 	}
 	if (!strcmp(filter, "no-ctrl")) {
 		PG(syslog_filter) = PHP_SYSLOG_FILTER_NO_CTRL;
 		return SUCCESS;
 	}
 	if (!strcmp(filter, "ascii")) {
 		PG(syslog_filter) = PHP_SYSLOG_FILTER_ASCII;
 		return SUCCESS;
 	}
 	if (!strcmp(filter, "raw")) {
 		PG(syslog_filter) = PHP_SYSLOG_FILTER_RAW;
 		return SUCCESS;
 	}
 
 	return FAILURE;
 }
 /* }}} */
 
-/* {{{ php_disable_functions */
-static void php_disable_functions(void)
-{
-	char *s = NULL, *e;
-
-	if (!*(INI_STR("disable_functions"))) {
-		return;
-	}
-
-	e = PG(disable_functions) = strdup(INI_STR("disable_functions"));
-	if (e == NULL) {
-		return;
-	}
-	while (*e) {
-		switch (*e) {
-			case ' ':
-			case ',':
-				if (s) {
-					*e = '\0';
-					zend_disable_function(s, e-s);
-					s = NULL;
-				}
-				break;
-			default:
-				if (!s) {
-					s = e;
-				}
-				break;
-		}
-		e++;
-	}
-	if (s) {
-		zend_disable_function(s, e-s);
-	}
-}
-/* }}} */
-
 /* {{{ php_disable_classes */
 static void php_disable_classes(void)
 {
@@ -1920,20 +1883,17 @@ static void core_globals_ctor(php_core_globals *core_globals)
 /* {{{ core_globals_dtor */
 static void core_globals_dtor(php_core_globals *core_globals)
 {
 	/* These should have been freed earlier. */
 	ZEND_ASSERT(!core_globals->last_error_message);
 	ZEND_ASSERT(!core_globals->last_error_file);
 
-	if (core_globals->disable_functions) {
-		free(core_globals->disable_functions);
-	}
 	if (core_globals->disable_classes) {
 		free(core_globals->disable_classes);
 	}
 	if (core_globals->php_binary) {
 		free(core_globals->php_binary);
 	}
 
 	php_shutdown_ticks();
 }
 /* }}} */
@@ -2016,362 +1976,362 @@ void dummy_invalid_parameter_handler(
 /* {{{ php_module_startup */
 int php_module_startup(sapi_module_struct *sf, zend_module_entry *additional_modules, uint32_t num_additional_modules)
 {
 	zend_utility_functions zuf;
 	zend_utility_values zuv;
 	int retval = SUCCESS, module_number=0;	/* for REGISTER_INI_ENTRIES() */
 	char *php_os;
 	zend_module_entry *module;
 
 #ifdef PHP_WIN32
 	WORD wVersionRequested = MAKEWORD(2, 0);
 	WSADATA wsaData;
 
 	php_os = "WINNT";
 
 	old_invalid_parameter_handler =
 		_set_invalid_parameter_handler(dummy_invalid_parameter_handler);
 	if (old_invalid_parameter_handler != NULL) {
 		_set_invalid_parameter_handler(old_invalid_parameter_handler);
 	}
 
 	/* Disable the message box for assertions.*/
 	_CrtSetReportMode(_CRT_ASSERT, 0);
 #else
 	php_os = PHP_OS;
 #endif
 
 #ifdef ZTS
 	(void)ts_resource(0);
 #endif
 
 #ifdef PHP_WIN32
 	if (!php_win32_init_random_bytes()) {
 		fprintf(stderr, "\ncrypt algorithm provider initialization failed\n");
 		return FAILURE;
 	}
 #endif
 
 	module_shutdown = 0;
 	module_startup = 1;
 	sapi_initialize_empty_request();
 	sapi_activate();
 
 	if (module_initialized) {
 		return SUCCESS;
 	}
 
 	sapi_module = *sf;
 
 	php_output_startup();
 
 #ifdef ZTS
 	ts_allocate_fast_id(&core_globals_id, &core_globals_offset, sizeof(php_core_globals), (ts_allocate_ctor) core_globals_ctor, (ts_allocate_dtor) core_globals_dtor);
 #ifdef PHP_WIN32
 	ts_allocate_id(&php_win32_core_globals_id, sizeof(php_win32_core_globals), (ts_allocate_ctor) php_win32_core_globals_ctor, (ts_allocate_dtor) php_win32_core_globals_dtor);
 #endif
 #else
 	memset(&core_globals, 0, sizeof(core_globals));
 	php_startup_ticks();
 #endif
 	gc_globals_ctor();
 
 	zuf.error_function = php_error_cb;
 	zuf.printf_function = php_printf;
 	zuf.write_function = php_output_write;
 	zuf.fopen_function = php_fopen_wrapper_for_zend;
 	zuf.message_handler = php_message_handler_for_zend;
 	zuf.get_configuration_directive = php_get_configuration_directive_for_zend;
 	zuf.ticks_function = php_run_ticks;
 	zuf.on_timeout = php_on_timeout;
 	zuf.stream_open_function = php_stream_open_for_zend;
 	zuf.printf_to_smart_string_function = php_printf_to_smart_string;
 	zuf.printf_to_smart_str_function = php_printf_to_smart_str;
 	zuf.getenv_function = sapi_getenv;
 	zuf.resolve_path_function = php_resolve_path_for_zend;
 	zend_startup(&zuf);
 	zend_update_current_locale();
 
 #if ZEND_DEBUG
 	zend_register_error_notify_callback(report_zend_debug_error_notify_cb);
 #endif
 
 #if HAVE_TZSET
 	tzset();
 #endif
 
 #ifdef PHP_WIN32
 # if PHP_LINKER_MAJOR == 14
 	/* Extend for other CRT if needed. */
 #  if PHP_DEBUG
 #   define PHP_VCRUNTIME "vcruntime140d.dll"
 #  else
 #   define PHP_VCRUNTIME "vcruntime140.dll"
 #  endif
 	char *img_err;
 	if (!php_win32_crt_compatible(PHP_VCRUNTIME, &img_err)) {
 		php_error(E_CORE_WARNING, img_err);
 		efree(img_err);
 		return FAILURE;
 	}
 #  undef PHP_VCRUNTIME
 # endif
 
 	/* start up winsock services */
 	if (WSAStartup(wVersionRequested, &wsaData) != 0) {
 		php_printf("\nwinsock.dll unusable. %d\n", WSAGetLastError());
 		return FAILURE;
 	}
 	php_win32_signal_ctrl_handler_init();
 #endif
 
 	le_index_ptr = zend_register_list_destructors_ex(NULL, NULL, "index pointer", 0);
 
 	/* Register constants */
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_VERSION", PHP_VERSION, sizeof(PHP_VERSION)-1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_MAJOR_VERSION", PHP_MAJOR_VERSION, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_MINOR_VERSION", PHP_MINOR_VERSION, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_RELEASE_VERSION", PHP_RELEASE_VERSION, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_EXTRA_VERSION", PHP_EXTRA_VERSION, sizeof(PHP_EXTRA_VERSION) - 1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_VERSION_ID", PHP_VERSION_ID, CONST_PERSISTENT | CONST_CS);
 #ifdef ZTS
 	REGISTER_MAIN_LONG_CONSTANT("PHP_ZTS", 1, CONST_PERSISTENT | CONST_CS);
 #else
 	REGISTER_MAIN_LONG_CONSTANT("PHP_ZTS", 0, CONST_PERSISTENT | CONST_CS);
 #endif
 	REGISTER_MAIN_LONG_CONSTANT("PHP_DEBUG", PHP_DEBUG, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_OS", php_os, strlen(php_os), CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_OS_FAMILY", PHP_OS_FAMILY, sizeof(PHP_OS_FAMILY)-1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_SAPI", sapi_module.name, strlen(sapi_module.name), CONST_PERSISTENT | CONST_CS | CONST_NO_FILE_CACHE);
 	REGISTER_MAIN_STRINGL_CONSTANT("DEFAULT_INCLUDE_PATH", PHP_INCLUDE_PATH, sizeof(PHP_INCLUDE_PATH)-1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PEAR_INSTALL_DIR", PEAR_INSTALLDIR, sizeof(PEAR_INSTALLDIR)-1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PEAR_EXTENSION_DIR", PHP_EXTENSION_DIR, sizeof(PHP_EXTENSION_DIR)-1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_EXTENSION_DIR", PHP_EXTENSION_DIR, sizeof(PHP_EXTENSION_DIR)-1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_PREFIX", PHP_PREFIX, sizeof(PHP_PREFIX)-1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_BINDIR", PHP_BINDIR, sizeof(PHP_BINDIR)-1, CONST_PERSISTENT | CONST_CS);
 #ifndef PHP_WIN32
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_MANDIR", PHP_MANDIR, sizeof(PHP_MANDIR)-1, CONST_PERSISTENT | CONST_CS);
 #endif
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_LIBDIR", PHP_LIBDIR, sizeof(PHP_LIBDIR)-1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_DATADIR", PHP_DATADIR, sizeof(PHP_DATADIR)-1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_SYSCONFDIR", PHP_SYSCONFDIR, sizeof(PHP_SYSCONFDIR)-1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_LOCALSTATEDIR", PHP_LOCALSTATEDIR, sizeof(PHP_LOCALSTATEDIR)-1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_CONFIG_FILE_PATH", PHP_CONFIG_FILE_PATH, strlen(PHP_CONFIG_FILE_PATH), CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_CONFIG_FILE_SCAN_DIR", PHP_CONFIG_FILE_SCAN_DIR, sizeof(PHP_CONFIG_FILE_SCAN_DIR)-1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_SHLIB_SUFFIX", PHP_SHLIB_SUFFIX, sizeof(PHP_SHLIB_SUFFIX)-1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_STRINGL_CONSTANT("PHP_EOL", PHP_EOL, sizeof(PHP_EOL)-1, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_MAXPATHLEN", MAXPATHLEN, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_INT_MAX", ZEND_LONG_MAX, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_INT_MIN", ZEND_LONG_MIN, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_INT_SIZE", SIZEOF_ZEND_LONG, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_FD_SETSIZE", FD_SETSIZE, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_FLOAT_DIG", DBL_DIG, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_DOUBLE_CONSTANT("PHP_FLOAT_EPSILON", DBL_EPSILON, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_DOUBLE_CONSTANT("PHP_FLOAT_MAX", DBL_MAX, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_DOUBLE_CONSTANT("PHP_FLOAT_MIN", DBL_MIN, CONST_PERSISTENT | CONST_CS);
 
 #ifdef PHP_WIN32
 	REGISTER_MAIN_LONG_CONSTANT("PHP_WINDOWS_VERSION_MAJOR",      EG(windows_version_info).dwMajorVersion, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_WINDOWS_VERSION_MINOR",      EG(windows_version_info).dwMinorVersion, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_WINDOWS_VERSION_BUILD",      EG(windows_version_info).dwBuildNumber, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_WINDOWS_VERSION_PLATFORM",   EG(windows_version_info).dwPlatformId, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_WINDOWS_VERSION_SP_MAJOR",   EG(windows_version_info).wServicePackMajor, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_WINDOWS_VERSION_SP_MINOR",   EG(windows_version_info).wServicePackMinor, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_WINDOWS_VERSION_SUITEMASK",  EG(windows_version_info).wSuiteMask, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_WINDOWS_VERSION_PRODUCTTYPE", EG(windows_version_info).wProductType, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_WINDOWS_NT_DOMAIN_CONTROLLER", VER_NT_DOMAIN_CONTROLLER, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_WINDOWS_NT_SERVER", VER_NT_SERVER, CONST_PERSISTENT | CONST_CS);
 	REGISTER_MAIN_LONG_CONSTANT("PHP_WINDOWS_NT_WORKSTATION", VER_NT_WORKSTATION, CONST_PERSISTENT | CONST_CS);
 #endif
 
 	php_binary_init();
 	if (PG(php_binary)) {
 		REGISTER_MAIN_STRINGL_CONSTANT("PHP_BINARY", PG(php_binary), strlen(PG(php_binary)), CONST_PERSISTENT | CONST_CS | CONST_NO_FILE_CACHE);
 	} else {
 		REGISTER_MAIN_STRINGL_CONSTANT("PHP_BINARY", "", 0, CONST_PERSISTENT | CONST_CS | CONST_NO_FILE_CACHE);
 	}
 
 	php_output_register_constants();
 	php_rfc1867_register_constants();
 
 	/* this will read in php.ini, set up the configuration parameters,
 	   load zend extensions and register php function extensions
 	   to be loaded later */
 	if (php_init_config() == FAILURE) {
 		return FAILURE;
 	}
 
 	/* Register PHP core ini entries */
 	REGISTER_INI_ENTRIES();
 
 	/* Register Zend ini entries */
 	zend_register_standard_ini_entries();
 
 #ifdef ZEND_WIN32
 	/* Until the current ini values was setup, the current cp is 65001.
 		If the actual ini values are different, some stuff needs to be updated.
 		It concerns at least main_cwd_state and there might be more. As we're
 		still in the startup phase, lets use the chance and reinit the relevant
 		item according to the current codepage. Still, if ini_set() is used
 		later on, a more intelligent way to update such stuff is needed.
 		Startup/shutdown routines could involve touching globals and thus
 		can't always be used on demand. */
 	if (!php_win32_cp_use_unicode()) {
 		virtual_cwd_main_cwd_init(1);
 	}
 #endif
 
 	/* Disable realpath cache if an open_basedir is set */
 	if (PG(open_basedir) && *PG(open_basedir)) {
 		CWDG(realpath_cache_size_limit) = 0;
 	}
 
 	PG(have_called_openlog) = 0;
 
 	/* initialize stream wrappers registry
 	 * (this uses configuration parameters from php.ini)
 	 */
 	if (php_init_stream_wrappers(module_number) == FAILURE)	{
 		php_printf("PHP:  Unable to initialize stream url wrappers.\n");
 		return FAILURE;
 	}
 
 	zuv.html_errors = 1;
 	php_startup_auto_globals();
 	zend_set_utility_values(&zuv);
 	php_startup_sapi_content_types();
 
 	/* startup extensions statically compiled in */
 	if (php_register_internal_extensions_func() == FAILURE) {
 		php_printf("Unable to start builtin modules\n");
 		return FAILURE;
 	}
 
 	/* start additional PHP extensions */
 	php_register_extensions_bc(additional_modules, num_additional_modules);
 
 	/* load and startup extensions compiled as shared objects (aka DLLs)
 	   as requested by php.ini entries
 	   these are loaded after initialization of internal extensions
 	   as extensions *might* rely on things from ext/standard
 	   which is always an internal extension and to be initialized
 	   ahead of all other internals
 	 */
 	php_ini_register_extensions();
 	zend_startup_modules();
 
 	/* start Zend extensions */
 	zend_startup_extensions();
 
 	zend_collect_module_handlers();
 
 	/* register additional functions */
 	if (sapi_module.additional_functions) {
 		if ((module = zend_hash_str_find_ptr(&module_registry, "standard", sizeof("standard")-1)) != NULL) {
 			EG(current_module) = module;
 			zend_register_functions(NULL, sapi_module.additional_functions, NULL, MODULE_PERSISTENT);
 			EG(current_module) = NULL;
 		}
 	}
 
 	/* disable certain classes and functions as requested by php.ini */
-	php_disable_functions();
+	zend_disable_functions(INI_STR("disable_functions"));
 	php_disable_classes();
 
 	/* make core report what it should */
 	if ((module = zend_hash_str_find_ptr(&module_registry, "core", sizeof("core")-1)) != NULL) {
 		module->version = PHP_VERSION;
 		module->info_func = PHP_MINFO(php_core);
 	}
 
 	module_initialized = 1;
 
 	if (zend_post_startup() != SUCCESS) {
 		return FAILURE;
 	}
 
 	/* Check for deprecated directives */
 	/* NOTE: If you add anything here, remember to add it to build/Makefile.global! */
 	{
 		struct {
 			const long error_level;
 			const char *phrase;
 			const char *directives[18]; /* Remember to change this if the number of directives change */
 		} directives[2] = {
 			{
 				E_DEPRECATED,
 				"Directive '%s' is deprecated",
 				{
 					"allow_url_include",
 					NULL
 				}
 			},
 			{
 				E_CORE_ERROR,
 				"Directive '%s' is no longer available in PHP",
 				{
 					"allow_call_time_pass_reference",
 					"asp_tags",
 					"define_syslog_variables",
 					"highlight.bg",
 					"magic_quotes_gpc",
 					"magic_quotes_runtime",
 					"magic_quotes_sybase",
 					"register_globals",
 					"register_long_arrays",
 					"safe_mode",
 					"safe_mode_gid",
 					"safe_mode_include_dir",
 					"safe_mode_exec_dir",
 					"safe_mode_allowed_env_vars",
 					"safe_mode_protected_env_vars",
 					"zend.ze1_compatibility_mode",
 					"track_errors",
 					NULL
 				}
 			}
 		};
 
 		unsigned int i;
 
 		zend_try {
 			/* 2 = Count of deprecation structs */
 			for (i = 0; i < 2; i++) {
 				const char **p = directives[i].directives;
 
 				while(*p) {
 					zend_long value;
 
 					if (cfg_get_long((char*)*p, &value) == SUCCESS && value) {
 						zend_error(directives[i].error_level, directives[i].phrase, *p);
 					}
 
 					++p;
 				}
 			}
 		} zend_catch {
 			retval = FAILURE;
 		} zend_end_try();
 	}
 
 	virtual_cwd_deactivate();
 
 	sapi_deactivate();
 	module_startup = 0;
 
 	/* Don't leak errors from startup into the per-request phase. */
 	clear_last_error();
 	shutdown_memory_manager(1, 0);
  	virtual_cwd_activate();
 
 	zend_interned_strings_switch_storage(1);
 
 #if ZEND_RC_DEBUG
 	zend_rc_debug = 1;
 #endif
 
 	/* we're done */
 	return retval;
 }
 /* }}} */
 
 /* {{{ php_module_shutdown_wrapper */
diff --git a/main/php_globals.h b/main/php_globals.h
index 42337e5b9b..e079866645 100644
--- a/main/php_globals.h
+++ b/main/php_globals.h
@@ -53,121 +53,120 @@ typedef struct _arg_separators {
 struct _php_core_globals {
 	zend_bool implicit_flush;
 
 	zend_long output_buffering;
 
 	zend_bool enable_dl;
 
 	char *output_handler;
 
 	char *unserialize_callback_func;
 	zend_long serialize_precision;
 
 	zend_long memory_limit;
 	zend_long max_input_time;
 
 	zend_uchar display_errors;
 	zend_bool display_startup_errors;
 	zend_bool log_errors;
 	zend_long      log_errors_max_len;
 	zend_bool ignore_repeated_errors;
 	zend_bool ignore_repeated_source;
 	zend_bool report_memleaks;
 	char *error_log;
 
 	char *doc_root;
 	char *user_dir;
 	char *include_path;
 	char *open_basedir;
 	char *extension_dir;
 	char *php_binary;
 	char *sys_temp_dir;
 
 	char *upload_tmp_dir;
 	zend_long upload_max_filesize;
 
 	char *error_append_string;
 	char *error_prepend_string;
 
 	char *auto_prepend_file;
 	char *auto_append_file;
 
 	char *input_encoding;
 	char *internal_encoding;
 	char *output_encoding;
 
 	arg_separators arg_separator;
 
 	char *variables_order;
 
 	HashTable rfc1867_protected_variables;
 
 	short connection_status;
 	zend_bool ignore_user_abort;
 
 	unsigned char header_is_being_sent;
 
 	zend_llist tick_functions;
 
 	zval http_globals[6];
 
 	zend_bool expose_php;
 
 	zend_bool register_argc_argv;
 	zend_bool auto_globals_jit;
 
 	char *docref_root;
 	char *docref_ext;
 
 	zend_bool html_errors;
 	zend_bool xmlrpc_errors;
 
 	zend_long xmlrpc_error_number;
 
 	zend_bool activated_auto_globals[8];
 
 	zend_bool modules_activated;
 	zend_bool file_uploads;
 	zend_bool during_request_startup;
 	zend_bool allow_url_fopen;
 	zend_bool enable_post_data_reading;
 	zend_bool report_zend_debug;
 
 	int last_error_type;
 	zend_string *last_error_message;
 	char *last_error_file;
 	int  last_error_lineno;
 
 	char *php_sys_temp_dir;
 
-	char *disable_functions;
 	char *disable_classes;
 	zend_bool allow_url_include;
 #ifdef PHP_WIN32
 	zend_bool com_initialized;
 #endif
 	zend_long max_input_nesting_level;
 	zend_long max_input_vars;
 	zend_bool in_user_include;
 
 	char *user_ini_filename;
 	zend_long user_ini_cache_ttl;
 
 	char *request_order;
 
 	zend_bool mail_x_header;
 	char *mail_log;
 
 	zend_bool in_error_log;
 
 #ifdef PHP_WIN32
 	zend_bool windows_show_crt_warning;
 #endif
 
 	zend_long syslog_facility;
 	char *syslog_ident;
 	zend_bool have_called_openlog;
 	zend_long syslog_filter;
 };
 
 
 #endif /* PHP_GLOBALS_H */
diff --git a/sapi/fpm/fpm/fpm_php.c b/sapi/fpm/fpm/fpm_php.c
index 18d5dae086..96648f4437 100644
--- a/sapi/fpm/fpm/fpm_php.c
+++ b/sapi/fpm/fpm/fpm_php.c
@@ -80,35 +80,33 @@ static void fpm_php_disable(char *value, int (*zend_disable)(const char *, size_
 int fpm_php_apply_defines_ex(struct key_value_s *kv, int mode) /* {{{ */
 {
 
 	char *name = kv->key;
 	char *value = kv->value;
 	int name_len = strlen(name);
 	int value_len = strlen(value);
 
 	if (!strcmp(name, "extension") && *value) {
 		zval zv;
 		php_dl(value, MODULE_PERSISTENT, &zv, 1);
 		return Z_TYPE(zv) == IS_TRUE;
 	}
 
 	if (fpm_php_zend_ini_alter_master(name, name_len, value, value_len, mode, PHP_INI_STAGE_ACTIVATE) == FAILURE) {
 		return -1;
 	}
 
 	if (!strcmp(name, "disable_functions") && *value) {
-		char *v = strdup(value);
-		PG(disable_functions) = v;
-		fpm_php_disable(v, zend_disable_function);
+		zend_disable_functions(value);
 		return 1;
 	}
 
 	if (!strcmp(name, "disable_classes") && *value) {
 		char *v = strdup(value);
 		PG(disable_classes) = v;
 		fpm_php_disable(v, zend_disable_class);
 		return 1;
 	}
 
 	return 1;
 }
 /* }}} */
