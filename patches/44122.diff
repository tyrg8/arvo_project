commit d64d5ddc57ac58f3bcff2bd531cbe1e71bc4e356
Author: Yann Collet <cyan@fb.com>
Date:   Thu Jan 27 14:54:18 2022 -0800

    fix 44122 test error
    
    It's a bug in the test itself, in exceptional circumstances (no more space for additional sequence).
    
    There should be enough room for all cases to work fine from now on,
    and if not, we have an additional `assert()` to catch that situation.

diff --git a/tests/fuzz/sequence_compression_api.c b/tests/fuzz/sequence_compression_api.c
index b35f5a79..443e0a18 100644
--- a/tests/fuzz/sequence_compression_api.c
+++ b/tests/fuzz/sequence_compression_api.c
@@ -132,90 +132,91 @@ static size_t decodeSequences(void* dst, size_t nbSequences,
 /* Returns nb sequences generated
  * Note : random sequences are always valid in ZSTD_sf_noBlockDelimiters mode.
  * However, it can fail with ZSTD_sf_explicitBlockDelimiters,
  * due to potential lack of space in
  */
 static size_t generateRandomSequences(FUZZ_dataProducer_t* producer,
                                       size_t literalsSizeLimit, size_t dictSize,
                                       size_t windowLog, ZSTD_sequenceFormat_e mode)
 {
     const uint32_t repCode = 0;  /* not used by sequence ingestion api */
     const uint32_t windowSize = 1 << windowLog;
     const uint32_t blockSizeMax = MIN(128 << 10, 1 << windowLog);
     uint32_t matchLengthMax = ZSTD_FUZZ_MATCHLENGTH_MAXSIZE;
     uint32_t bytesGenerated = 0;
     uint32_t nbSeqGenerated = 0;
     uint32_t isFirstSequence = 1;
     uint32_t blockSize = 0;
 
     if (mode == ZSTD_sf_explicitBlockDelimiters) {
         /* ensure that no sequence can be larger than one block */
         literalsSizeLimit = MIN(literalsSizeLimit, blockSizeMax/2);
         matchLengthMax = MIN(matchLengthMax, blockSizeMax/2);
     }
 
-    while ( nbSeqGenerated < ZSTD_FUZZ_MAX_NBSEQ-1
+    while ( nbSeqGenerated < ZSTD_FUZZ_MAX_NBSEQ-2 /* extra room for explicit delimiters */
          && bytesGenerated < ZSTD_FUZZ_GENERATED_SRC_MAXSIZE
          && !FUZZ_dataProducer_empty(producer)) {
         uint32_t matchLength;
         uint32_t matchBound = matchLengthMax;
         uint32_t offset;
         uint32_t offsetBound;
         const uint32_t minLitLength = (isFirstSequence && (dictSize == 0));
         const uint32_t litLength = FUZZ_dataProducer_uint32Range(producer, minLitLength, (uint32_t)literalsSizeLimit);
         bytesGenerated += litLength;
         if (bytesGenerated > ZSTD_FUZZ_GENERATED_SRC_MAXSIZE) {
             break;
         }
         offsetBound = (bytesGenerated > windowSize) ? windowSize : bytesGenerated + (uint32_t)dictSize;
         offset = FUZZ_dataProducer_uint32Range(producer, 1, offsetBound);
         if (dictSize > 0 && bytesGenerated <= windowSize) {
             /* Prevent match length from being such that it would be associated with an offset too large
              * from the decoder's perspective. If not possible (match would be too small),
              * then reduce the offset if necessary.
              */
             const size_t bytesToReachWindowSize = windowSize - bytesGenerated;
             if (bytesToReachWindowSize < ZSTD_MINMATCH_MIN) {
                 const uint32_t newOffsetBound = offsetBound > windowSize ? windowSize : offsetBound;
                 offset = FUZZ_dataProducer_uint32Range(producer, 1, newOffsetBound);
             } else {
                 matchBound = MIN(matchLengthMax, (uint32_t)bytesToReachWindowSize);
             }
         }
         matchLength = FUZZ_dataProducer_uint32Range(producer, ZSTD_MINMATCH_MIN, matchBound);
         bytesGenerated += matchLength;
         if (bytesGenerated > ZSTD_FUZZ_GENERATED_SRC_MAXSIZE) {
             break;
         }
         {   ZSTD_Sequence seq = {offset, litLength, matchLength, repCode};
             const uint32_t lastLits = FUZZ_dataProducer_uint32Range(producer, 0, litLength);
             #define SPLITPROB 6000
             #define SPLITMARK 5234
             const int split = (FUZZ_dataProducer_uint32Range(producer, 0, SPLITPROB) == SPLITMARK);
             if (mode == ZSTD_sf_explicitBlockDelimiters) {
                 const size_t seqSize = seq.litLength + seq.matchLength;
                 if (blockSize + seqSize > blockSizeMax) {  /* reaching limit : must end block now */
                     const ZSTD_Sequence endBlock = {0, 0, 0, 0};
                     generatedSequences[nbSeqGenerated++] = endBlock;
                     blockSize = seqSize;
                 }
                 if (split) {
                     const ZSTD_Sequence endBlock = {0, lastLits, 0, 0};
                     generatedSequences[nbSeqGenerated++] = endBlock;
                     assert(lastLits <= seq.litLength);
                     seq.litLength -= lastLits;
                     blockSize = seqSize - lastLits;
                 } else {
                     blockSize += seqSize;
                 }
             }
             generatedSequences[nbSeqGenerated++] = seq;
             isFirstSequence = 0;
     }   }
     if (mode == ZSTD_sf_explicitBlockDelimiters) {
         /* always end sequences with a block delimiter */
         const ZSTD_Sequence endBlock = {0, 0, 0, 0};
+        assert(nbSeqGenerated < ZSTD_FUZZ_MAX_NBSEQ);
         generatedSequences[nbSeqGenerated++] = endBlock;
     }
 
     return nbSeqGenerated;
 }
