commit 41afa89fc94a6b1cef0d0cb19263875ecf08adb6
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Sun Apr 10 14:09:29 2022 +0200

    Fix short-lived regression in xmlStaticCopyNode
    
    Commit 7618a3b1 didn't account for coalesced text nodes.
    
    I think it would be better if xmlStaticCopyNode didn't try to coalesce
    text nodes at all. This code path can only be triggered if some other
    code doesn't coalesce text nodes properly. In this case, OSS-Fuzz found
    such behavior in xinclude.c.

diff --git a/result/XInclude/coalesce.xml b/result/XInclude/coalesce.xml
new file mode 100644
index 00000000..192015a5
--- /dev/null
+++ b/result/XInclude/coalesce.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<test xmlns:xi="http://www.w3.org/2001/XInclude">
+    <t1 xmlns:xi="http://www.w3.org/2001/XInclude" xml:base="../ents/coalesce1.xml">
+    start
+    
+    start
+    
+    end
+</t1>
+</test>
diff --git a/result/XInclude/coalesce.xml.rdr b/result/XInclude/coalesce.xml.rdr
new file mode 100644
index 00000000..95a32aa1
--- /dev/null
+++ b/result/XInclude/coalesce.xml.rdr
@@ -0,0 +1,17 @@
+0 1 test 0 0
+1 14 #text 0 1 
+    
+1 1 t1 0 0
+2 3 #text 0 1 
+    start
+    
+2 3 #text 0 1 
+    start
+    
+2 3 #text 0 1 
+    end
+
+1 15 t1 0 0
+1 14 #text 0 1 
+
+0 15 test 0 0
diff --git a/test/XInclude/docs/coalesce.xml b/test/XInclude/docs/coalesce.xml
new file mode 100644
index 00000000..33d5cb64
--- /dev/null
+++ b/test/XInclude/docs/coalesce.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<test xmlns:xi="http://www.w3.org/2001/XInclude">
+    <xi:include href="../ents/coalesce1.xml#xpointer(/t1))"/>
+</test>
diff --git a/test/XInclude/ents/coalesce1.xml b/test/XInclude/ents/coalesce1.xml
new file mode 100644
index 00000000..bba7b696
--- /dev/null
+++ b/test/XInclude/ents/coalesce1.xml
@@ -0,0 +1,5 @@
+<t1 xmlns:xi="http://www.w3.org/2001/XInclude">
+    start
+    <xi:include href="#xpointer(/t1/text()[1])"/>
+    end
+</t1>
diff --git a/tree.c b/tree.c
index 8077348a..07499484 100644
--- a/tree.c
+++ b/tree.c
@@ -4208,177 +4208,188 @@ static xmlNodePtr
 xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
                   int extended) {
     xmlNodePtr ret;
 
     if (node == NULL) return(NULL);
     switch (node->type) {
         case XML_TEXT_NODE:
         case XML_CDATA_SECTION_NODE:
         case XML_ELEMENT_NODE:
         case XML_DOCUMENT_FRAG_NODE:
         case XML_ENTITY_REF_NODE:
         case XML_ENTITY_NODE:
         case XML_PI_NODE:
         case XML_COMMENT_NODE:
         case XML_XINCLUDE_START:
         case XML_XINCLUDE_END:
 	    break;
         case XML_ATTRIBUTE_NODE:
 		return((xmlNodePtr) xmlCopyPropInternal(doc, parent, (xmlAttrPtr) node));
         case XML_NAMESPACE_DECL:
 	    return((xmlNodePtr) xmlCopyNamespaceList((xmlNsPtr) node));
 
         case XML_DOCUMENT_NODE:
         case XML_HTML_DOCUMENT_NODE:
 #ifdef LIBXML_TREE_ENABLED
 	    return((xmlNodePtr) xmlCopyDoc((xmlDocPtr) node, extended));
 #endif /* LIBXML_TREE_ENABLED */
         case XML_DOCUMENT_TYPE_NODE:
         case XML_NOTATION_NODE:
         case XML_DTD_NODE:
         case XML_ELEMENT_DECL:
         case XML_ATTRIBUTE_DECL:
         case XML_ENTITY_DECL:
             return(NULL);
     }
 
     /*
      * Allocate a new node and fill the fields.
      */
     ret = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
     if (ret == NULL) {
 	xmlTreeErrMemory("copying node");
 	return(NULL);
     }
     memset(ret, 0, sizeof(xmlNode));
     ret->type = node->type;
 
     ret->doc = doc;
     ret->parent = parent;
     if (node->name == xmlStringText)
 	ret->name = xmlStringText;
     else if (node->name == xmlStringTextNoenc)
 	ret->name = xmlStringTextNoenc;
     else if (node->name == xmlStringComment)
 	ret->name = xmlStringComment;
     else if (node->name != NULL) {
         if ((doc != NULL) && (doc->dict != NULL))
 	    ret->name = xmlDictLookup(doc->dict, node->name, -1);
 	else
 	    ret->name = xmlStrdup(node->name);
     }
     if ((node->type != XML_ELEMENT_NODE) &&
 	(node->content != NULL) &&
 	(node->type != XML_ENTITY_REF_NODE) &&
 	(node->type != XML_XINCLUDE_END) &&
 	(node->type != XML_XINCLUDE_START)) {
 	ret->content = xmlStrdup(node->content);
     }else{
       if (node->type == XML_ELEMENT_NODE)
         ret->line = node->line;
     }
     if (parent != NULL) {
 	xmlNodePtr tmp;
 
 	/*
 	 * this is a tricky part for the node register thing:
 	 * in case ret does get coalesced in xmlAddChild
 	 * the deregister-node callback is called; so we register ret now already
 	 */
 	if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
 	    xmlRegisterNodeDefaultValue((xmlNodePtr)ret);
 
+        /*
+         * Note that since ret->parent is already set, xmlAddChild will
+         * return early and not actually insert the node. It will only
+         * coalesce text nodes and unnecessarily call xmlSetTreeDoc.
+         * Assuming that the subtree to be copied always has its text
+         * nodes coalesced, the somewhat confusing call to xmlAddChild
+         * could be removed.
+         */
         tmp = xmlAddChild(parent, ret);
 	/* node could have coalesced */
 	if (tmp != ret)
 	    return(tmp);
     }
 
     if (!extended)
 	goto out;
     if (((node->type == XML_ELEMENT_NODE) ||
          (node->type == XML_XINCLUDE_START)) && (node->nsDef != NULL))
         ret->nsDef = xmlCopyNamespaceList(node->nsDef);
 
     if (node->ns != NULL) {
         xmlNsPtr ns;
 
 	ns = xmlSearchNs(doc, ret, node->ns->prefix);
 	if (ns == NULL) {
 	    /*
 	     * Humm, we are copying an element whose namespace is defined
 	     * out of the new tree scope. Search it in the original tree
 	     * and add it at the top of the new tree
 	     */
 	    ns = xmlSearchNs(node->doc, node, node->ns->prefix);
 	    if (ns != NULL) {
 	        xmlNodePtr root = ret;
 
 		while (root->parent != NULL) root = root->parent;
 		ret->ns = xmlNewNs(root, ns->href, ns->prefix);
 		} else {
 			ret->ns = xmlNewReconciledNs(doc, ret, node->ns);
 	    }
 	} else {
 	    /*
 	     * reference the existing namespace definition in our own tree.
 	     */
 	    ret->ns = ns;
 	}
     }
     if (((node->type == XML_ELEMENT_NODE) ||
          (node->type == XML_XINCLUDE_START)) && (node->properties != NULL))
         ret->properties = xmlCopyPropList(ret, node->properties);
     if (node->type == XML_ENTITY_REF_NODE) {
 	if ((doc == NULL) || (node->doc != doc)) {
 	    /*
 	     * The copied node will go into a separate document, so
 	     * to avoid dangling references to the ENTITY_DECL node
 	     * we cannot keep the reference. Try to find it in the
 	     * target document.
 	     */
 	    ret->children = (xmlNodePtr) xmlGetDocEntity(doc, ret->name);
 	} else {
             ret->children = node->children;
 	}
 	ret->last = ret->children;
     } else if ((node->children != NULL) && (extended != 2)) {
         xmlNodePtr cur, insert;
 
         cur = node->children;
         insert = ret;
         while (cur != NULL) {
             xmlNodePtr copy = xmlStaticCopyNode(cur, doc, insert, 2);
             if (copy == NULL) {
                 xmlFreeNode(ret);
                 return(NULL);
             }
 
-            if (insert->last == NULL) {
-                insert->children = copy;
-            } else {
-                copy->prev = insert->last;
-                insert->last->next = copy;
+            /* Check for coalesced text nodes */
+            if (insert->last != copy) {
+                if (insert->last == NULL) {
+                    insert->children = copy;
+                } else {
+                    copy->prev = insert->last;
+                    insert->last->next = copy;
+                }
+                insert->last = copy;
             }
-            insert->last = copy;
 
             if (cur->children != NULL) {
                 cur = cur->children;
                 insert = copy;
                 continue;
             }
 
             while (1) {
                 if (cur->next != NULL) {
                     cur = cur->next;
                     break;
                 }
 
                 cur = cur->parent;
                 insert = insert->parent;
                 if (cur == node) {
                     cur = NULL;
                     break;
                 }
             }
         }
     }
diff --git a/xinclude.c b/xinclude.c
index 180e70b5..c700fb17 100644
--- a/xinclude.c
+++ b/xinclude.c
@@ -2187,101 +2187,104 @@ static int
 xmlXIncludeIncludeNode(xmlXIncludeCtxtPtr ctxt, int nr) {
     xmlNodePtr cur, end, list, tmp;
 
     if (ctxt == NULL)
 	return(-1);
     if ((nr < 0) || (nr >= ctxt->incNr))
 	return(-1);
     cur = ctxt->incTab[nr]->ref;
     if ((cur == NULL) || (cur->type == XML_NAMESPACE_DECL))
 	return(-1);
 
     list = ctxt->incTab[nr]->inc;
     ctxt->incTab[nr]->inc = NULL;
     ctxt->incTab[nr]->emptyFb = 0;
 
     /*
      * Check against the risk of generating a multi-rooted document
      */
     if ((cur->parent != NULL) &&
 	(cur->parent->type != XML_ELEMENT_NODE)) {
 	int nb_elem = 0;
 
 	tmp = list;
 	while (tmp != NULL) {
 	    if (tmp->type == XML_ELEMENT_NODE)
 		nb_elem++;
 	    tmp = tmp->next;
 	}
 	if (nb_elem > 1) {
 	    xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	                   XML_XINCLUDE_MULTIPLE_ROOT,
 		       "XInclude error: would result in multiple root nodes\n",
 			   NULL);
             xmlFreeNodeList(list);
 	    return(-1);
 	}
     }
 
     if (ctxt->parseFlags & XML_PARSE_NOXINCNODE) {
 	/*
 	 * Add the list of nodes
 	 */
 	while (list != NULL) {
 	    end = list;
 	    list = list->next;
 
 	    xmlAddPrevSibling(cur, end);
 	}
+        /*
+         * FIXME: xmlUnlinkNode doesn't coalesce text nodes.
+         */
 	xmlUnlinkNode(cur);
 	xmlFreeNode(cur);
     } else {
         xmlNodePtr child, next;
 
 	/*
 	 * Change the current node as an XInclude start one, and add an
 	 * XInclude end one
 	 */
         if (ctxt->incTab[nr]->fallback)
             xmlUnsetProp(cur, BAD_CAST "href");
 	cur->type = XML_XINCLUDE_START;
         /* Remove fallback children */
         for (child = cur->children; child != NULL; child = next) {
             next = child->next;
             xmlUnlinkNode(child);
             xmlFreeNode(child);
         }
 	end = xmlNewDocNode(cur->doc, cur->ns, cur->name, NULL);
 	if (end == NULL) {
 	    xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	                   XML_XINCLUDE_BUILD_FAILED,
 			   "failed to build node\n", NULL);
             xmlFreeNodeList(list);
 	    return(-1);
 	}
 	end->type = XML_XINCLUDE_END;
 	xmlAddNextSibling(cur, end);
 
 	/*
 	 * Add the list of nodes
 	 */
 	while (list != NULL) {
 	    cur = list;
 	    list = list->next;
 
 	    xmlAddPrevSibling(end, cur);
 	}
     }
 
 
     return(0);
 }
 
 /**
  * xmlXIncludeTestNode:
  * @ctxt: the XInclude processing context
  * @node: an XInclude node
  *
  * test if the node is an XInclude node
  *
  * Returns 1 true, 0 otherwise
  */
