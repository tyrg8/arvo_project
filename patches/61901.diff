commit b01634c896c29bb3a778daeef9e13ef115995610
Author: Reini Urban <rurban@cpan.org>
Date:   Wed Nov 1 13:08:59 2023 +0100

    llvmfuzz_standalone: improve repro output

diff --git a/examples/llvmfuzz.c b/examples/llvmfuzz.c
index c1d2bcad..58ae20bf 100644
--- a/examples/llvmfuzz.c
+++ b/examples/llvmfuzz.c
@@ -35,6 +35,9 @@
 #  include "in_dxf.h"
 #endif
 
+int out;
+int ver;
+
 extern int LLVMFuzzerTestOneInput (const unsigned char *data, size_t size);
 
 // libfuzzer limitation:
@@ -66,181 +69,154 @@ int
 LLVMFuzzerTestOneInput (const unsigned char *data, size_t size)
 {
   Dwg_Data dwg;
   Bit_Chain dat = { NULL, 0, 0, 0, 0, 0, 0, NULL, 0 };
   Bit_Chain out_dat = { NULL, 0, 0, 0, 0, 0, 0, NULL, 0 };
   int copied = 0;
   struct ly_ctx *ctx = NULL;
-  unsigned int possible_outputformats;
-  int out;
 
   static char tmp_file[256];
   dat.chain = (unsigned char *)data;
   dat.size = size;
   memset (&dwg, 0, sizeof (dwg));
 
-  possible_outputformats =
-#ifdef DISABLE_DXF
-#  ifdef DISABLE_JSON
-      1;
-#  else
-      3;
-#  endif
-#else
-      5;
-#endif
-
   // Detect the input format: DWG, DXF or JSON
   if (dat.size > 2 && dat.chain[0] == 'A' && dat.chain[1] == 'C')
     {
       if (dwg_decode (&dat, &dwg) >= DWG_ERR_CRITICAL)
         {
           dwg_free (&dwg);
           return 0;
         }
     }
 #ifndef DISABLE_JSON
   else if (dat.size > 1 && dat.chain[0] == '{')
     {
       copied = enforce_null_termination (&dat, true);
       if (dwg_read_json (&dat, &dwg) >= DWG_ERR_CRITICAL)
         {
           if (copied)
             bit_chain_free (&dat);
           dwg_free (&dwg);
           return 0;
         }
       dat.opts |= DWG_OPTS_INJSON;
       dwg.opts |= DWG_OPTS_INJSON;
     }
 #endif
 #ifndef DISABLE_DXF
   else
     {
       copied = enforce_null_termination (&dat, false);
       if (dwg_read_dxf (&dat, &dwg) >= DWG_ERR_CRITICAL)
         {
           if (copied)
             bit_chain_free (&dat);
           dwg_free (&dwg);
           return 0;
         }
     }
 #else
   else
     return 0;
 #endif
 
   memset (&out_dat, 0, sizeof (out_dat));
   bit_chain_set_version (&out_dat, &dat);
   if (copied)
     bit_chain_free (&dat);
 
 #if 0
     snprintf (tmp_file, 255, "/tmp/llvmfuzzer%d.out", getpid());
     tmp_file[255] = '\0';
 #elif defined _WIN32
   strcpy (tmp_file, "NUL");
 #else
   strcpy (tmp_file, "/dev/null");
 #endif
   out_dat.fh = fopen (tmp_file, "w");
 
-  out = rand () % possible_outputformats;
-#ifdef STANDALONE
-  if (getenv ("OUT"))
-    out = strtol (getenv ("OUT"), NULL, 10);
-  else
-    fprintf (stderr, "OUT=%d ", out);
-#endif
   switch (out)
     {
     case 0:
       {
-        int ver = rand () % 20;
-#ifdef STANDALONE
-        if (getenv ("VER"))
-          ver = strtol (getenv ("VER"), NULL, 10);
-        else
-          fprintf (stderr, "VER=%d ", ver);
-#endif
         switch (ver)
           {
           // TODO support preR13, downconverters missing
           case 0:
             out_dat.version = dwg.header.version = R_1_4;
             break;
           case 1:
             out_dat.version = dwg.header.version = R_2_0;
             break;
           case 2:
             out_dat.version = dwg.header.version = R_2_10;
             break;
           case 3:
             out_dat.version = dwg.header.version = R_2_21;
             break;
           case 4:
             out_dat.version = dwg.header.version = R_2_4;
             break;
           case 5:
             out_dat.version = dwg.header.version = R_2_6;
             break;
           case 6:
             out_dat.version = dwg.header.version = R_9;
             break;
           case 7:
             out_dat.version = dwg.header.version = R_10;
             break;
           case 8:
             out_dat.version = dwg.header.version = R_11;
             break;
           case 9:
             out_dat.version = dwg.header.version = R_12;
             break;
           case 10:
             out_dat.version = dwg.header.version = R_13;
             break;
           case 11:
             out_dat.version = dwg.header.version = R_13c3;
             break;
           case 12:
             out_dat.version = dwg.header.version = R_14;
             break;
           case 13:
             out_dat.version = dwg.header.version = R_2004;
             break;
           default: // favor this one
             out_dat.version = dwg.header.version = R_2000;
             break;
           }
         dwg_encode (&dwg, &out_dat);
         break;
       }
 #ifndef DISABLE_DXF
     case 1:
       dwg_write_dxf (&out_dat, &dwg);
       break;
     case 2: // experimental
       dwg_write_dxfb (&out_dat, &dwg);
       break;
 #  ifndef DISABLE_JSON
     case 3:
       dwg_write_json (&out_dat, &dwg);
       break;
     case 4:
       dwg_write_geojson (&out_dat, &dwg);
       break;
 #  endif
 #endif
     default:
       break;
     }
   dwg_free (&dwg);
   free (out_dat.chain);
   fclose (out_dat.fh);
   // unlink (tmp_file);
   return 0;
 }
 
 #ifdef STANDALONE
 /*
 # ifdef __GNUC__
@@ -260,59 +236,91 @@ int
 main (int argc, char *argv[])
 {
   unsigned seed;
+  const unsigned int possible_outputformats =
+#ifdef DISABLE_DXF
+#  ifdef DISABLE_JSON
+      1;
+#  else
+      3;
+#  endif
+#else
+      5;
+#endif
+
   if (argc <= 1 || !*argv[1])
     return usage ();
   if (getenv ("SEED"))
     seed = (unsigned)strtol (getenv ("SEED"), NULL, 10);
   else
-    seed = (unsigned)time (NULL);
+    {
+      seed = (unsigned)time (NULL);
+      fprintf (stderr, "SEED=%u ", seed);
+    }
   srand (seed);
   /* works only on linux
   if (LLVMFuzzerInitialize)
     LLVMFuzzerInitialize (&argc, &argv);
   */
   for (int i = 1; i < argc; i++)
     {
       unsigned char *buf;
       FILE *f = fopen (argv[i], "rb");
       struct stat attrib;
       long len;
       size_t n_read;
       int fd;
       if (!f)
         {
           fprintf (stderr, "Illegal file argument %s\n", argv[i]);
           continue;
         }
       fd = fileno (f);
       if (fd < 0 || fstat (fd, &attrib)
           || !(S_ISREG (attrib.st_mode)
 #  ifndef _WIN32
                || S_ISLNK (attrib.st_mode)
 #  endif
-               ))
+                   ))
         {
           fprintf (stderr, "Illegal input file \"%s\"\n", argv[i]);
           continue;
         }
       // libFuzzer design bug, not zero-terminating its text buffer
       fseek (f, 0, SEEK_END);
       len = ftell (f);
       fseek (f, 0, SEEK_SET);
       if (len <= 0)
         continue;
       buf = (unsigned char *)malloc (len);
       n_read = fread (buf, 1, len, f);
       fclose (f);
       assert ((long)n_read == len);
-      fprintf (stderr, "llvmfuzz_standalone %s [%" PRIuSIZE "]\n", argv[i],
-               len);
+
+      out = rand () % possible_outputformats;
+#ifdef STANDALONE
+      if (getenv ("OUT"))
+        out = strtol (getenv ("OUT"), NULL, 10);
+      else
+        fprintf (stderr, "OUT=%d ", out);
+#endif
+      if (out == 0)
+        {
+          ver = rand () % 20;
+#ifdef STANDALONE
+          if (getenv ("VER"))
+            ver = strtol (getenv ("VER"), NULL, 10);
+          else
+            fprintf (stderr, "VER=%d ", ver);
+#endif
+        }
+      fprintf (stderr, "examples/llvmfuzz_standalone %s [%" PRIuSIZE "]\n",
+               argv[i], len);
       LLVMFuzzerTestOneInput (buf, len);
       free (buf);
       // Bit_Chain dat = { 0 };
       // dat_read_file (&dat, fp, argv[i]);
       // LLVMFuzzerTestOneInput (dat.chain, dat.size);
       // bit_free_chain (&dat);
     }
 }
 #endif
