commit 39acb9583128ede53d0562a8055786cec0e5ab40
Author: James Bonfield <jkb@sanger.ac.uk>
Date:   Mon Feb 3 11:52:52 2020 +0000

    Fixed nuances between gzip vs bgzf compressed files.
    
    Credit to OSS-Fuzz
    Fixes oss-fuzz 20473
    
    This also fixes the indexing tests forbidding samtools index on
    gzipped or naked SAM and BAMs.  Previously the index command did not
    fail, but gave broken indices.
    
    Ironically with 1.10 samtools index on a totally raw uncompressed BAM
    did actually start working (but not gzipped BAM or raw/gzipped SAM).
    This was not by design and the indices produced couldn't be used by
    1.9 and prior so it's safest to forbid this case too.
    
    Also added documentation on the ambiguous "is_bgzf" field given this
    is set for BAM files, even if ungzipped.  It's purely a flag on usage
    of the bgzf_open/read functions, which can read uncompressed data, and
    has nothing to do with the file format actually being BGZF.

diff --git a/htslib/hts.h b/htslib/hts.h
index 74ee299e..944a398f 100644
--- a/htslib/hts.h
+++ b/htslib/hts.h
@@ -227,10 +227,13 @@ typedef struct __hts_idx_t hts_idx_t;
 // Maintainers note htsFile cannot be an opaque structure because some of its
 // fields are part of libhts.so's ABI (hence these fields must not be moved):
 //  - fp is used in the public sam_itr_next()/etc macros
 //  - is_bin is used directly in samtools <= 1.1 and bcftools <= 1.1
 //  - is_write and is_cram are used directly in samtools <= 1.1
 //  - fp is used directly in samtools (up to and including current develop)
 //  - line is used directly in bcftools (up to and including current develop)
+//  - is_bgzf and is_cram flags indicate which fp union member to use.
+//    Note is_bgzf being set does not indicate the flag is BGZF compressed,
+//    nor even whether it is compressed at all (eg on naked BAMs).
 typedef struct {
     uint32_t is_bin:1, is_write:1, is_be:1, is_cram:1, is_bgzf:1, dummy:27;
     int64_t lineno;
diff --git a/sam.c b/sam.c
index 0c017c27..ea66d25c 100644
--- a/sam.c
+++ b/sam.c
@@ -833,41 +833,41 @@ err:
 int sam_index_build3(const char *fn, const char *fnidx, int min_shift, int nthreads)
 {
     hts_idx_t *idx;
     htsFile *fp;
     int ret = 0;
 
     if ((fp = hts_open(fn, "r")) == 0) return -2;
     if (nthreads)
         hts_set_threads(fp, nthreads);
 
     switch (fp->format.format) {
     case cram:
 
         ret = cram_index_build(fp->fp.cram, fn, fnidx);
         break;
 
     case bam:
     case sam:
-        if (!fp->is_bgzf) {
+        if (fp->format.compression != bgzf) {
             hts_log_error("%s file \"%s\" not BGZF compressed",
                           fp->format.format == bam ? "BAM" : "SAM", fn);
             ret = -1;
             break;
         }
         idx = sam_index(fp, min_shift);
         if (idx) {
             ret = hts_idx_save_as(idx, fn, fnidx, (min_shift > 0)? HTS_FMT_CSI : HTS_FMT_BAI);
             if (ret < 0) ret = -4;
             hts_idx_destroy(idx);
         }
         else ret = -1;
         break;
 
     default:
         ret = -3;
         break;
     }
     hts_close(fp);
 
     return ret;
 }
@@ -1315,225 +1315,225 @@ static sam_hdr_t *sam_hdr_sanitise(sam_hdr_t *h) {
 static sam_hdr_t *sam_hdr_create(htsFile* fp) {
     kstring_t str = { 0, 0, NULL };
     khint_t k;
     sam_hdr_t* h = sam_hdr_init();
     const char *q, *r;
     char* sn = NULL;
     khash_t(s2i) *d = kh_init(s2i);
     khash_t(s2i) *long_refs = NULL;
     if (!h || !d)
         goto error;
 
     int ret, has_SQ = 0;
     int next_c = '@';
     while (next_c == '@' && (ret = hts_getline(fp, KS_SEP_LINE, &fp->line)) >= 0) {
         if (fp->line.s[0] != '@')
             break;
 
         if (fp->line.l > 3 && strncmp(fp->line.s, "@SQ", 3) == 0) {
             has_SQ = 1;
             hts_pos_t ln = -1;
             for (q = fp->line.s + 4;; ++q) {
                 if (strncmp(q, "SN:", 3) == 0) {
                     q += 3;
                     for (r = q;*r != '\t' && *r != '\n' && *r != '\0';++r);
 
                     if (sn) {
                         hts_log_warning("SQ header line has more than one SN: tag");
                         free(sn);
                     }
                     sn = (char*)calloc(r - q + 1, 1);
                     if (!sn)
                     goto error;
 
                     strncpy(sn, q, r - q);
                     q = r;
                 } else {
                     if (strncmp(q, "LN:", 3) == 0)
                         ln = strtoll(q + 3, (char**)&q, 10);
                 }
 
                 while (*q != '\t' && *q != '\n' && *q != '\0')
                     ++q;
                 if (*q == '\0' || *q == '\n')
                     break;
             }
             if (sn) {
                 if (ln >= 0) {
                     int absent;
                     k = kh_put(s2i, d, sn, &absent);
                     if (absent < 0)
                         goto error;
 
                     if (!absent) {
                         hts_log_warning("Duplicated sequence '%s'", sn);
                         free(sn);
                     } else {
                         if (ln >= UINT32_MAX) {
                             // Stash away ref length that
                             // doesn't fit in target_len array
                             int k2;
                             if (!long_refs) {
                                 long_refs = kh_init(s2i);
                                 if (!long_refs)
                                     goto error;
                             }
                             k2 = kh_put(s2i, long_refs, sn, &absent);
                             if (absent < 0)
                                 goto error;
                             kh_val(long_refs, k2) = ln;
                             kh_val(d, k) = ((int64_t) (kh_size(d) - 1) << 32
                                             | UINT32_MAX);
                         } else {
                             kh_val(d, k) = (int64_t) (kh_size(d) - 1) << 32 | ln;
                         }
                     }
                 } else {
                     hts_log_warning("Ignored @SQ SN:%s : bad or missing LN tag", sn);
                     free(sn);
                 }
             } else {
                 hts_log_warning("Ignored @SQ line with missing SN: tag");
             }
             sn = NULL;
         }
         if (kputsn(fp->line.s, fp->line.l, &str) < 0)
             goto error;
 
         if (kputc('\n', &str) < 0)
             goto error;
 
-        if (fp->format.compression == bgzf) {
+        if (fp->is_bgzf) {
             next_c = bgzf_peek(fp->fp.bgzf);
         } else {
             unsigned char nc;
             ssize_t pret = hpeek(fp->fp.hfile, &nc, 1);
             next_c = pret > 0 ? nc : pret - 1;
         }
         if (next_c < -1)
             goto error;
     }
     if (next_c != '@')
         fp->line.l = 0;
 
     if (ret < -1)
         goto error;
 
     if (!has_SQ && fp->fn_aux) {
         kstring_t line = { 0, 0, NULL };
 
         /* The reference index (.fai) is actually needed here */
         char *fai_fn = fp->fn_aux;
         char *fn_delim = strstr(fp->fn_aux, HTS_IDX_DELIM);
         if (fn_delim)
             fai_fn = fn_delim + strlen(HTS_IDX_DELIM);
 
         hFILE* f = hopen(fai_fn, "r");
         int e = 0, absent;
         if (f == NULL)
             goto error;
 
         while (line.l = 0, kgetline(&line, (kgets_func*) hgets, f) >= 0) {
             char* tab = strchr(line.s, '\t');
             hts_pos_t ln;
 
             if (tab == NULL)
                 continue;
 
             sn = (char*)calloc(tab-line.s+1, 1);
             if (!sn)
                 break;
             memcpy(sn, line.s, tab-line.s);
             k = kh_put(s2i, d, sn, &absent);
             if (absent < 0)
                 break;
 
             ln = strtoll(tab, NULL, 10);
 
             if (!absent) {
                 hts_log_warning("Duplicated sequence '%s'", sn);
                 free(sn);
             } else {
                 if (ln >= UINT32_MAX) {
                     // Stash away ref length that
                     // doesn't fit in target_len array
                     khint_t k2;
                     int absent = -1;
                     if (!long_refs) {
                         long_refs = kh_init(s2i);
                         if (!long_refs)
                             goto error;
                     }
                     k2 = kh_put(s2i, long_refs, sn, &absent);
                     if (absent < 0)
                         goto error;
                     kh_val(long_refs, k2) = ln;
                     kh_val(d, k) = ((int64_t) (kh_size(d) - 1) << 32
                                     | UINT32_MAX);
                 } else {
                     kh_val(d, k) = (int64_t) (kh_size(d) - 1) << 32 | ln;
                 }
                 has_SQ = 1;
             }
 
             e |= kputs("@SQ\tSN:", &str) < 0;
             e |= kputsn(line.s, tab - line.s, &str) < 0;
             e |= kputs("\tLN:", &str) < 0;
             e |= kputll(ln, &str) < 0;
             e |= kputc('\n', &str) < 0;
             if (e)
                 break;
         }
 
         ks_free(&line);
         if (hclose(f) != 0) {
             hts_log_error("Error on closing %s", fai_fn);
             e = 1;
         }
         if (e)
             goto error;
     }
 
     if (has_SQ) {
         // Populate the targets array
         h->n_targets = kh_size(d);
 
         h->target_name = (char**) malloc(sizeof(char*) * h->n_targets);
         if (!h->target_name)
             goto error;
 
         h->target_len = (uint32_t*) malloc(sizeof(uint32_t) * h->n_targets);
         if (!h->target_len)
             goto error;
 
         for (k = kh_begin(d); k != kh_end(d); ++k) {
             if (!kh_exist(d, k))
                 continue;
 
             h->target_name[kh_val(d, k) >> 32] = (char*) kh_key(d, k);
             h->target_len[kh_val(d, k) >> 32] = kh_val(d, k) & 0xffffffffUL;
             kh_val(d, k) >>= 32;
         }
     }
 
     // Repurpose sdict to hold any references longer than UINT32_MAX
     h->sdict = long_refs;
 
     kh_destroy(s2i, d);
 
     if (str.l == 0)
         kputsn("", 0, &str);
     h->l_text = str.l;
     h->text = ks_release(&str);
     fp->bam_header = sam_hdr_sanitise(h);
     fp->bam_header->ref_count = 1;
 
     return fp->bam_header;
 
  error:
     sam_hdr_destroy(h);
     ks_free(&str);
     kh_destroy(s2i, d);
     kh_destroy(s2i, long_refs);
     if (sn) free(sn);
     return NULL;
 }
@@ -1568,99 +1568,99 @@ sam_hdr_t *sam_hdr_read(htsFile *fp)
 int sam_hdr_write(htsFile *fp, const sam_hdr_t *h)
 {
     if (!fp || !h) {
         errno = EINVAL;
         return -1;
     }
 
     if (!h->hrecs && !h->text)
         return 0;
 
     switch (fp->format.format) {
     case binary_format:
         fp->format.category = sequence_data;
         fp->format.format = bam;
         /* fall-through */
     case bam:
         if (bam_hdr_write(fp->fp.bgzf, h) < 0) return -1;
         break;
 
     case cram: {
         cram_fd *fd = fp->fp.cram;
         if (cram_set_header2(fd, h) < 0) return -1;
         if (fp->fn_aux)
             cram_load_reference(fd, fp->fn_aux);
         if (cram_write_SAM_hdr(fd, fd->header) < 0) return -1;
         }
         break;
 
     case text_format:
         fp->format.category = sequence_data;
         fp->format.format = sam;
         /* fall-through */
     case sam: {
         char *text;
         kstring_t hdr_ks = { 0, 0, NULL };
         size_t l_text;
         ssize_t bytes;
         int r = 0, no_sq = 0;
 
         if (h->hrecs) {
             if (sam_hrecs_rebuild_text(h->hrecs, &hdr_ks) != 0)
                 return -1;
             text = hdr_ks.s;
             l_text = hdr_ks.l;
         } else {
             const char *p = NULL;
             do {
                 const char *q = p == NULL ? h->text : p + 4;
                 p = strstr(q, "@SQ\t");
             } while (!(p == NULL || p == h->text || *(p - 1) == '\n'));
             no_sq = p == NULL;
             text = h->text;
             l_text = h->l_text;
         }
 
-        if (fp->format.compression == bgzf) {
+        if (fp->is_bgzf) {
             bytes = bgzf_write(fp->fp.bgzf, text, l_text);
         } else {
             bytes = hwrite(fp->fp.hfile, text, l_text);
         }
         free(hdr_ks.s);
         if (bytes != l_text)
             return -1;
 
         if (no_sq) {
             int i;
             for (i = 0; i < h->n_targets; ++i) {
                 fp->line.l = 0;
                 r |= kputsn("@SQ\tSN:", 7, &fp->line) < 0;
                 r |= kputs(h->target_name[i], &fp->line) < 0;
                 r |= kputsn("\tLN:", 4, &fp->line) < 0;
                 r |= kputw(h->target_len[i], &fp->line) < 0;
                 r |= kputc('\n', &fp->line) < 0;
                 if (r != 0)
                     return -1;
 
-                if (fp->format.compression == bgzf) {
+                if (fp->is_bgzf) {
                     bytes = bgzf_write(fp->fp.bgzf, fp->line.s, fp->line.l);
                 } else {
                     bytes = hwrite(fp->fp.hfile, fp->line.s, fp->line.l);
                 }
                 if (bytes != fp->line.l)
                     return -1;
             }
         }
-        if (fp->format.compression == bgzf) {
+        if (fp->is_bgzf) {
             if (bgzf_flush(fp->fp.bgzf) != 0) return -1;
         } else {
             if (hflush(fp->fp.hfile) != 0) return -1;
         }
         }
         break;
 
     default:
         errno = EBADF;
         return -1;
     }
     return 0;
 }
@@ -2669,96 +2669,96 @@ static void *sam_dispatcher_read(void *vp) {
 // Runs in its own thread.
 // Takes encoded blocks of SAM off the thread results queue and writes them
 // to our output stream.
 static void *sam_dispatcher_write(void *vp) {
     htsFile *fp = vp;
     SAM_state *fd = fp->state;
     hts_tpool_result *r;
 
     // Iterates until result queue is shutdown, where it returns NULL.
     while ((r = hts_tpool_next_result_wait(fd->q))) {
         sp_lines *gl = (sp_lines *)hts_tpool_result_data(r);
         if (!gl) {
             sam_state_err(fd, ENOMEM);
             goto err;
         }
 
         if (fp->idx) {
             sp_bams *gb = gl->bams;
             int i = 0, count = 0;
             while (i < gl->data_size) {
                 int j = i;
                 while (i < gl->data_size && gl->data[i] != '\n')
                     i++;
                 if (i < gl->data_size)
                     i++;
 
-                if (fp->format.compression == bgzf) {
+                if (fp->is_bgzf) {
                     if (bgzf_write(fp->fp.bgzf, &gl->data[j], i-j) != i-j)
                         goto err;
                 } else {
                     if (hwrite(fp->fp.hfile, &gl->data[j], i-j) != i-j)
                         goto err;
                 }
 
                 bam1_t *b = &gb->bams[count++];
                 if (fp->format.compression == bgzf) {
                     if (bgzf_idx_push(fp->fp.bgzf, fp->idx,
                                       b->core.tid, b->core.pos, bam_endpos(b),
                                       bgzf_tell(fp->fp.bgzf),
                                       !(b->core.flag&BAM_FUNMAP)) < 0) {
                         sam_state_err(fd, errno ? errno : ENOMEM);
                         hts_log_error("Read '%s' with ref_name='%s', ref_length=%"PRIhts_pos", flags=%d, pos=%"PRIhts_pos" cannot be indexed",
                                 bam_get_qname(b), sam_hdr_tid2name(fd->h, b->core.tid), sam_hdr_tid2len(fd->h, b->core.tid), b->core.flag, b->core.pos+1);
                         goto err;
                     }
                 } else {
                     if (hts_idx_push(fp->idx, b->core.tid, b->core.pos, bam_endpos(b),
                                      bgzf_tell(fp->fp.bgzf), !(b->core.flag&BAM_FUNMAP)) < 0) {
                         sam_state_err(fd, errno ? errno : ENOMEM);
                         hts_log_error("Read '%s' with ref_name='%s', ref_length=%"PRIhts_pos", flags=%d, pos=%"PRIhts_pos" cannot be indexed",
                                 bam_get_qname(b), sam_hdr_tid2name(fd->h, b->core.tid), sam_hdr_tid2len(fd->h, b->core.tid), b->core.flag, b->core.pos+1);
                         goto err;
                     }
                 }
             }
 
             assert(count == gb->nbams);
 
             // Add bam array to free-list
             pthread_mutex_lock(&fd->lines_m);
             gb->next = fd->bams;
             fd->bams = gl->bams;
             gl->bams = NULL;
             pthread_mutex_unlock(&fd->lines_m);
         } else {
-            if (fp->format.compression == bgzf) {
+            if (fp->is_bgzf) {
                 if (bgzf_write(fp->fp.bgzf, gl->data, gl->data_size) != gl->data_size)
                     goto err;
             } else {
                 if (hwrite(fp->fp.hfile, gl->data, gl->data_size) != gl->data_size)
                     goto err;
             }
         }
 
         hts_tpool_delete_result(r, 0);
 
         // Also updated by main thread
         pthread_mutex_lock(&fd->lines_m);
         gl->next = fd->lines;
         fd->lines = gl;
         pthread_mutex_unlock(&fd->lines_m);
     }
 
     sam_state_err(fd, 0); // success
     hts_tpool_process_destroy(fd->q);
     fd->q = NULL;
     return NULL;
 
  err:
     sam_state_err(fd, EIO);
     return (void *)-1;
 }
 
 // Run from one of the worker threads.
 // Convert a passed in array of BAMs (sp_bams) and converts to a block
 // of text SAM records (sp_lines).
@@ -3188,136 +3188,136 @@ int sam_format1(const bam_hdr_t *h, const bam1_t *b, kstring_t *str)
 // Sadly we need to be able to modify the bam_hdr here so we can
 // reference count the structure.
 int sam_write1(htsFile *fp, const sam_hdr_t *h, const bam1_t *b)
 {
     switch (fp->format.format) {
     case binary_format:
         fp->format.category = sequence_data;
         fp->format.format = bam;
         /* fall-through */
     case bam:
         return bam_write_idx1(fp, h, b);
 
     case cram:
         return cram_put_bam_seq(fp->fp.cram, (bam1_t *)b);
 
     case text_format:
         fp->format.category = sequence_data;
         fp->format.format = sam;
         /* fall-through */
     case sam:
         if (fp->state) {
             SAM_state *fd = (SAM_state *)fp->state;
 
             // Threaded output
             if (!fd->h) {
                 // NB: discard const.  We don't actually modify sam_hdr_t here,
                 // just data pointed to by it (which is a bit weasely still),
                 // but out cached pointer must be non-const as we want to
                 // destroy it later on and sam_hdr_destroy takes non-const.
                 //
                 // We do this because some tools do sam_hdr_destroy; sam_close
                 // while others do sam_close; sam_hdr_destroy.  The former is an
                 // issue as we need the header still when flushing.
                 fd->h = (sam_hdr_t *)h;
                 fd->h->ref_count++;
 
                 if (pthread_create(&fd->dispatcher, NULL, sam_dispatcher_write, fp) != 0)
                     return -2;
             }
 
             if (fd->h != h) {
                 hts_log_error("SAM multi-threaded decoding does not support changing header");
                 return -2;
             }
 
             // Find a suitable BAM array to copy to
             sp_bams *gb = fd->curr_bam;
             if (!gb) {
                 pthread_mutex_lock(&fd->lines_m);
                 if (fd->bams) {
                     fd->curr_bam = gb = fd->bams;
                     fd->bams = gb->next;
                     gb->next = NULL;
                     gb->nbams = 0;
                     pthread_mutex_unlock(&fd->lines_m);
                 } else {
                     pthread_mutex_unlock(&fd->lines_m);
                     if (!(gb = calloc(1, sizeof(*gb)))) return -1;
                     if (!(gb->bams = calloc(NB, sizeof(*gb->bams)))) {
                         free(gb);
                         return -1;
                     }
                     gb->nbams = 0;
                     gb->abams = NB;
                     gb->fd = fd;
                     fd->curr_idx = 0;
                     fd->curr_bam = gb;
                 }
             }
 
             if (!bam_copy1(&gb->bams[gb->nbams++], b))
                 return -2;
 
             // Dispatch if full
             if (gb->nbams == NB) {
                 gb->serial = fd->serial++;
                 //fprintf(stderr, "Dispatch another %d bams\n", NB);
                 pthread_mutex_lock(&fd->command_m);
                 if (fd->errcode != 0) {
                     pthread_mutex_unlock(&fd->command_m);
                     return -fd->errcode;
                 }
                 if (hts_tpool_dispatch3(fd->p, fd->q, sam_format_worker, gb,
                                         cleanup_sp_bams,
                                         cleanup_sp_lines, 0) < 0) {
                     pthread_mutex_unlock(&fd->command_m);
                     return -1;
                 }
                 pthread_mutex_unlock(&fd->command_m);
                 fd->curr_bam = NULL;
             }
 
             // Dummy value as we don't know how long it really is.
             // We could track file sizes via a SAM_state field, but I don't think
             // it is necessary.
             return 1;
         } else {
             if (sam_format1(h, b, &fp->line) < 0) return -1;
             kputc('\n', &fp->line);
-            if (fp->format.compression == bgzf) {
+            if (fp->is_bgzf) {
                 if ( bgzf_write(fp->fp.bgzf, fp->line.s, fp->line.l) != fp->line.l ) return -1;
             } else {
                 if ( hwrite(fp->fp.hfile, fp->line.s, fp->line.l) != fp->line.l ) return -1;
             }
 
             if (fp->idx) {
                 if (fp->format.compression == bgzf) {
                     if (bgzf_idx_push(fp->fp.bgzf, fp->idx, b->core.tid, b->core.pos, bam_endpos(b),
                                       bgzf_tell(fp->fp.bgzf), !(b->core.flag&BAM_FUNMAP)) < 0) {
                         hts_log_error("Read '%s' with ref_name='%s', ref_length=%"PRIhts_pos", flags=%d, pos=%"PRIhts_pos" cannot be indexed",
                                 bam_get_qname(b), sam_hdr_tid2name(h, b->core.tid), sam_hdr_tid2len(h, b->core.tid), b->core.flag, b->core.pos+1);
                         return -1;
                     }
                 } else {
                     if (hts_idx_push(fp->idx, b->core.tid, b->core.pos, bam_endpos(b),
                                      bgzf_tell(fp->fp.bgzf), !(b->core.flag&BAM_FUNMAP)) < 0) {
                         hts_log_error("Read '%s' with ref_name='%s', ref_length=%"PRIhts_pos", flags=%d, pos=%"PRIhts_pos" cannot be indexed",
                                 bam_get_qname(b), sam_hdr_tid2name(h, b->core.tid), sam_hdr_tid2len(h, b->core.tid), b->core.flag, b->core.pos+1);
                         return -1;
                     }
                 }
             }
 
             return fp->line.l;
         }
 
     default:
         errno = EBADF;
         return -1;
     }
 }
 
 /************************
  *** Auxiliary fields ***
  ************************/
 #ifndef HTS_LITTLE_ENDIAN
