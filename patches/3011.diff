commit d2052278f24b3279503d5fa215a7834c2d21f91c
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Fri Aug 11 15:12:25 2017 -0700

    [util] Add --verify to hb-shape / hb-view that verifies shape results
    
    Right now it checks for monotone cluster values.  Other checks to be added.

diff --git a/util/hb-shape.cc b/util/hb-shape.cc
index 6adfbadd7..cab0eb213 100644
--- a/util/hb-shape.cc
+++ b/util/hb-shape.cc
@@ -31,129 +31,126 @@
 struct output_buffer_t
 {
   output_buffer_t (option_parser_t *parser)
 		  : options (parser, hb_buffer_serialize_list_formats ()),
 		    format (parser),
 		    gs (NULL),
 		    line_no (0),
 		    font (NULL),
 		    output_format (HB_BUFFER_SERIALIZE_FORMAT_INVALID),
 		    format_flags (HB_BUFFER_SERIALIZE_FLAG_DEFAULT) {}
 
   void init (hb_buffer_t *buffer, const font_options_t *font_opts)
   {
     options.get_file_handle ();
     gs = g_string_new (NULL);
     line_no = 0;
     font = hb_font_reference (font_opts->get_font ());
 
     if (!options.output_format)
       output_format = HB_BUFFER_SERIALIZE_FORMAT_TEXT;
     else
       output_format = hb_buffer_serialize_format_from_string (options.output_format, -1);
     /* An empty "output_format" parameter basically skips output generating.
      * Useful for benchmarking. */
     if ((!options.output_format || *options.output_format) &&
 	!hb_buffer_serialize_format_to_string (output_format))
     {
       if (options.explicit_output_format)
 	fail (false, "Unknown output format `%s'; supported formats are: %s",
 	      options.output_format,
 	      g_strjoinv ("/", const_cast<char**> (options.supported_formats)));
       else
 	/* Just default to TEXT if not explicitly requested and the
 	 * file extension is not recognized. */
 	output_format = HB_BUFFER_SERIALIZE_FORMAT_TEXT;
     }
 
     unsigned int flags = HB_BUFFER_SERIALIZE_FLAG_DEFAULT;
     if (!format.show_glyph_names)
       flags |= HB_BUFFER_SERIALIZE_FLAG_NO_GLYPH_NAMES;
     if (!format.show_clusters)
       flags |= HB_BUFFER_SERIALIZE_FLAG_NO_CLUSTERS;
     if (!format.show_positions)
       flags |= HB_BUFFER_SERIALIZE_FLAG_NO_POSITIONS;
     if (format.show_extents)
       flags |= HB_BUFFER_SERIALIZE_FLAG_GLYPH_EXTENTS;
     if (format.show_flags)
       flags |= HB_BUFFER_SERIALIZE_FLAG_GLYPH_FLAGS;
     format_flags = (hb_buffer_serialize_flags_t) flags;
 
     if (format.trace)
       hb_buffer_set_message_func (buffer, message_func, this, NULL);
   }
   void new_line (void)
   {
     line_no++;
   }
   void consume_text (hb_buffer_t  *buffer,
 		     const char   *text,
 		     unsigned int  text_len,
 		     hb_bool_t     utf8_clusters)
   {
     g_string_set_size (gs, 0);
     format.serialize_buffer_of_text (buffer, line_no, text, text_len, font, gs);
     fprintf (options.fp, "%s", gs->str);
   }
-  void shape_failed (hb_buffer_t  *buffer,
-		     const char   *text,
-		     unsigned int  text_len,
-		     hb_bool_t     utf8_clusters)
+  void error (const char *message)
   {
     g_string_set_size (gs, 0);
-    format.serialize_message (line_no, "msg: all shapers failed", gs);
+    format.serialize_message (line_no, message, gs);
     fprintf (options.fp, "%s", gs->str);
   }
   void consume_glyphs (hb_buffer_t  *buffer,
 		       const char   *text,
 		       unsigned int  text_len,
 		       hb_bool_t     utf8_clusters)
   {
     g_string_set_size (gs, 0);
     format.serialize_buffer_of_glyphs (buffer, line_no, text, text_len, font,
 				       output_format, format_flags, gs);
     fprintf (options.fp, "%s", gs->str);
   }
   void finish (hb_buffer_t *buffer, const font_options_t *font_opts)
   {
     hb_buffer_set_message_func (buffer, NULL, NULL, NULL);
     hb_font_destroy (font);
     g_string_free (gs, true);
     gs = NULL;
     font = NULL;
   }
 
   static hb_bool_t
   message_func (hb_buffer_t *buffer,
 		hb_font_t *font,
 		const char *message,
 		void *user_data)
   {
     output_buffer_t *that = (output_buffer_t *) user_data;
     that->message (buffer, font, message);
     return true;
   }
 
   void
   message (hb_buffer_t *buffer,
 	   hb_font_t *font,
 	   const char *message)
   {
     g_string_set_size (gs, 0);
     format.serialize_line_no (line_no, gs);
     g_string_append_printf (gs, "HB: %s	buffer: ", message);
     format.serialize_glyphs (buffer, font, output_format, format_flags, gs);
     g_string_append_c (gs, '\n');
     fprintf (options.fp, "%s", gs->str);
   }
 
 
   protected:
   output_options_t options;
   format_options_t format;
 
   GString *gs;
   unsigned int line_no;
   hb_font_t *font;
   hb_buffer_serialize_format_t output_format;
   hb_buffer_serialize_flags_t format_flags;
 };
diff --git a/util/options.cc b/util/options.cc
index 2aba6d405..1269ba657 100644
--- a/util/options.cc
+++ b/util/options.cc
@@ -323,74 +323,75 @@ void
 shape_options_t::add_options (option_parser_t *parser)
 {
   GOptionEntry entries[] =
   {
     {"list-shapers",	0, G_OPTION_FLAG_NO_ARG,
 			      G_OPTION_ARG_CALLBACK,	(gpointer) &list_shapers,	"List available shapers and quit",	NULL},
     {"shaper",		0, G_OPTION_FLAG_HIDDEN,
 			      G_OPTION_ARG_CALLBACK,	(gpointer) &parse_shapers,	"Hidden duplicate of --shapers",	NULL},
     {"shapers",		0, 0, G_OPTION_ARG_CALLBACK,	(gpointer) &parse_shapers,	"Set comma-separated list of shapers to try","list"},
     {"direction",	0, 0, G_OPTION_ARG_STRING,	&this->direction,		"Set text direction (default: auto)",	"ltr/rtl/ttb/btt"},
     {"language",	0, 0, G_OPTION_ARG_STRING,	&this->language,		"Set text language (default: $LANG)",	"langstr"},
     {"script",		0, 0, G_OPTION_ARG_STRING,	&this->script,			"Set text script (default: auto)",	"ISO-15924 tag"},
     {"bot",		0, 0, G_OPTION_ARG_NONE,	&this->bot,			"Treat text as beginning-of-paragraph",	NULL},
     {"eot",		0, 0, G_OPTION_ARG_NONE,	&this->eot,			"Treat text as end-of-paragraph",	NULL},
     {"preserve-default-ignorables",0, 0, G_OPTION_ARG_NONE,	&this->preserve_default_ignorables,	"Preserve Default-Ignorable characters",	NULL},
     {"utf8-clusters",	0, 0, G_OPTION_ARG_NONE,	&this->utf8_clusters,		"Use UTF8 byte indices, not char indices",	NULL},
     {"cluster-level",	0, 0, G_OPTION_ARG_INT,		&this->cluster_level,		"Cluster merging level (default: 0)",	"0/1/2"},
     {"normalize-glyphs",0, 0, G_OPTION_ARG_NONE,	&this->normalize_glyphs,	"Rearrange glyph clusters in nominal order",	NULL},
+    {"verify",		0, 0, G_OPTION_ARG_NONE,	&this->verify,			"Perform sanity checks on shaping results",	NULL},
     {"num-iterations",	0, 0, G_OPTION_ARG_INT,		&this->num_iterations,		"Run shaper N times (default: 1)",	"N"},
     {NULL}
   };
   parser->add_group (entries,
 		     "shape",
 		     "Shape options:",
 		     "Options for the shaping process",
 		     this);
 
   const gchar *features_help = "Comma-separated list of font features\n"
     "\n"
     "    Features can be enabled or disabled, either globally or limited to\n"
     "    specific character ranges.  The format for specifying feature settings\n"
     "    follows.  All valid CSS font-feature-settings values other than 'normal'\n"
     "    and 'inherited' are also accepted, though, not documented below.\n"
     "\n"
     "    The range indices refer to the positions between Unicode characters,\n"
     "    unless the --utf8-clusters is provided, in which case range indices\n"
     "    refer to UTF-8 byte indices. The position before the first character\n"
     "    is always 0.\n"
     "\n"
     "    The format is Python-esque.  Here is how it all works:\n"
     "\n"
     "      Syntax:       Value:    Start:    End:\n"
     "\n"
     "    Setting value:\n"
     "      \"kern\"        1         0         ∞         # Turn feature on\n"
     "      \"+kern\"       1         0         ∞         # Turn feature on\n"
     "      \"-kern\"       0         0         ∞         # Turn feature off\n"
     "      \"kern=0\"      0         0         ∞         # Turn feature off\n"
     "      \"kern=1\"      1         0         ∞         # Turn feature on\n"
     "      \"aalt=2\"      2         0         ∞         # Choose 2nd alternate\n"
     "\n"
     "    Setting index:\n"
     "      \"kern[]\"      1         0         ∞         # Turn feature on\n"
     "      \"kern[:]\"     1         0         ∞         # Turn feature on\n"
     "      \"kern[5:]\"    1         5         ∞         # Turn feature on, partial\n"
     "      \"kern[:5]\"    1         0         5         # Turn feature on, partial\n"
     "      \"kern[3:5]\"   1         3         5         # Turn feature on, range\n"
     "      \"kern[3]\"     1         3         3+1       # Turn feature on, single char\n"
     "\n"
     "    Mixing it all:\n"
     "\n"
     "      \"aalt[3:5]=2\" 2         3         5         # Turn 2nd alternate on for range";
 
   GOptionEntry entries2[] =
   {
     {"features",	0, 0, G_OPTION_ARG_CALLBACK,	(gpointer) &parse_features,	features_help,	"list"},
     {NULL}
   };
   parser->add_group (entries2,
 		     "features",
 		     "Features options:",
 		     "Options for font features used",
 		     this);
 }
@@ -872,8 +873,9 @@ void
 format_options_t::serialize_message (unsigned int  line_no,
 				     const char   *msg,
 				     GString      *gs)
 {
   serialize_line_no (line_no, gs);
+  g_string_append_printf (gs, "message: ");
   g_string_append_printf (gs, "%s", msg);
   g_string_append_c (gs, '\n');
 }
diff --git a/util/options.hh b/util/options.hh
index 521263d5d..fedd12172 100644
--- a/util/options.hh
+++ b/util/options.hh
@@ -178,105 +178,141 @@ struct view_options_t : option_group_t
 struct shape_options_t : option_group_t
 {
   shape_options_t (option_parser_t *parser)
   {
     direction = language = script = NULL;
     bot = eot = preserve_default_ignorables = false;
     features = NULL;
     num_features = 0;
     shapers = NULL;
     utf8_clusters = false;
     cluster_level = HB_BUFFER_CLUSTER_LEVEL_DEFAULT;
     normalize_glyphs = false;
+    verify = false;
     num_iterations = 1;
 
     add_options (parser);
   }
   ~shape_options_t (void)
   {
     g_free (direction);
     g_free (language);
     g_free (script);
     free (features);
     g_strfreev (shapers);
   }
 
   void add_options (option_parser_t *parser);
 
   void setup_buffer (hb_buffer_t *buffer)
   {
     hb_buffer_set_direction (buffer, hb_direction_from_string (direction, -1));
     hb_buffer_set_script (buffer, hb_script_from_string (script, -1));
     hb_buffer_set_language (buffer, hb_language_from_string (language, -1));
     hb_buffer_set_flags (buffer, (hb_buffer_flags_t) (HB_BUFFER_FLAG_DEFAULT |
 			 (bot ? HB_BUFFER_FLAG_BOT : 0) |
 			 (eot ? HB_BUFFER_FLAG_EOT : 0) |
 			 (preserve_default_ignorables ? HB_BUFFER_FLAG_PRESERVE_DEFAULT_IGNORABLES : 0)));
     hb_buffer_set_cluster_level (buffer, cluster_level);
     hb_buffer_guess_segment_properties (buffer);
   }
 
   void populate_buffer (hb_buffer_t *buffer, const char *text, int text_len,
 			const char *text_before, const char *text_after)
   {
     hb_buffer_clear_contents (buffer);
     if (text_before) {
       unsigned int len = strlen (text_before);
       hb_buffer_add_utf8 (buffer, text_before, len, len, 0);
     }
     hb_buffer_add_utf8 (buffer, text, text_len, 0, text_len);
     if (text_after) {
       hb_buffer_add_utf8 (buffer, text_after, -1, 0, 0);
     }
 
     if (!utf8_clusters) {
       /* Reset cluster values to refer to Unicode character index
        * instead of UTF-8 index. */
       unsigned int num_glyphs = hb_buffer_get_length (buffer);
       hb_glyph_info_t *info = hb_buffer_get_glyph_infos (buffer, NULL);
       for (unsigned int i = 0; i < num_glyphs; i++)
       {
 	info->cluster = i;
 	info++;
       }
     }
 
     setup_buffer (buffer);
   }
 
-  hb_bool_t shape (hb_font_t *font, hb_buffer_t *buffer)
+  hb_bool_t shape (hb_font_t *font, hb_buffer_t *buffer, const char **error=NULL)
   {
-    hb_bool_t res = hb_shape_full (font, buffer, features, num_features, shapers);
+    if (!hb_shape_full (font, buffer, features, num_features, shapers))
+    {
+      if (error)
+        *error = "all shapers failed.";
+      return false;
+    }
+
     if (normalize_glyphs)
       hb_buffer_normalize_glyphs (buffer);
-    return res;
+
+    if (verify && !verify_buffer (buffer, error))
+      return false;
+
+    return true;
+  }
+
+  bool verify_buffer (hb_buffer_t *buffer, const char **error=NULL)
+  {
+    /* Check that clusters are monotone. */
+    if (cluster_level == HB_BUFFER_CLUSTER_LEVEL_MONOTONE_GRAPHEMES ||
+	cluster_level == HB_BUFFER_CLUSTER_LEVEL_MONOTONE_CHARACTERS)
+    {
+      bool is_forward = HB_DIRECTION_IS_FORWARD (hb_buffer_get_direction (buffer));
+
+      unsigned int num_glyphs;
+      hb_glyph_info_t *info = hb_buffer_get_glyph_infos (buffer, &num_glyphs);
+
+      for (unsigned int i = 1; i < num_glyphs; i++)
+	if (info[i-1].cluster != info[i].cluster &&
+	    (info[i-1].cluster < info[i].cluster) != is_forward)
+	{
+	  if (error)
+	    *error = "clusters are not monotone.";
+	  return false;
+	}
+    }
+
+    return true;
   }
 
   void shape_closure (const char *text, int text_len,
 		      hb_font_t *font, hb_buffer_t *buffer,
 		      hb_set_t *glyphs)
   {
     hb_buffer_reset (buffer);
     hb_buffer_add_utf8 (buffer, text, text_len, 0, text_len);
     setup_buffer (buffer);
     hb_ot_shape_glyphs_closure (font, buffer, features, num_features, glyphs);
   }
 
   /* Buffer properties */
   char *direction;
   char *language;
   char *script;
 
   /* Buffer flags */
   hb_bool_t bot;
   hb_bool_t eot;
   hb_bool_t preserve_default_ignorables;
 
   hb_feature_t *features;
   unsigned int num_features;
   char **shapers;
   hb_bool_t utf8_clusters;
   hb_buffer_cluster_level_t cluster_level;
   hb_bool_t normalize_glyphs;
+  hb_bool_t verify;
   unsigned int num_iterations;
 };
 
diff --git a/util/shape-consumer.hh b/util/shape-consumer.hh
index cfab4497f..0a09053ee 100644
--- a/util/shape-consumer.hh
+++ b/util/shape-consumer.hh
@@ -34,63 +34,67 @@ template <typename output_t>
 struct shape_consumer_t
 {
   shape_consumer_t (option_parser_t *parser)
 		  : failed (false),
 		    shaper (parser),
 		    output (parser),
 		    font (NULL),
 		    buffer (NULL) {}
 
   void init (hb_buffer_t  *buffer_,
 	     const font_options_t *font_opts)
   {
     font = hb_font_reference (font_opts->get_font ());
     failed = false;
     buffer = hb_buffer_reference (buffer_);
 
     output.init (buffer, font_opts);
   }
   void consume_line (const char   *text,
 		     unsigned int  text_len,
 		     const char   *text_before,
 		     const char   *text_after)
   {
     output.new_line ();
 
     for (unsigned int n = shaper.num_iterations; n; n--)
     {
+      const char *error = NULL;
+
       shaper.populate_buffer (buffer, text, text_len, text_before, text_after);
       if (n == 1)
 	output.consume_text (buffer, text, text_len, shaper.utf8_clusters);
-      if (!shaper.shape (font, buffer))
+      if (!shaper.shape (font, buffer, &error))
       {
 	failed = true;
-	hb_buffer_set_length (buffer, 0);
-	output.shape_failed (buffer, text, text_len, shaper.utf8_clusters);
-	return;
+	output.error (error);
+	if (hb_buffer_get_content_type (buffer) == HB_BUFFER_CONTENT_TYPE_GLYPHS)
+	  break;
+	else
+	  return;
       }
     }
 
     output.consume_glyphs (buffer, text, text_len, shaper.utf8_clusters);
   }
   void finish (const font_options_t *font_opts)
   {
     output.finish (buffer, font_opts);
     hb_font_destroy (font);
     font = NULL;
     hb_buffer_destroy (buffer);
     buffer = NULL;
   }
 
   public:
   bool failed;
 
   protected:
   shape_options_t shaper;
   output_t output;
 
   hb_font_t *font;
   hb_buffer_t *buffer;
 };
 
 
 #endif
diff --git a/util/view-cairo.hh b/util/view-cairo.hh
index ef229ff79..d3e59afa5 100644
--- a/util/view-cairo.hh
+++ b/util/view-cairo.hh
@@ -34,71 +34,68 @@
 struct view_cairo_t
 {
   view_cairo_t (option_parser_t *parser)
 	       : output_options (parser, helper_cairo_supported_formats),
 		 view_options (parser),
 		 direction (HB_DIRECTION_INVALID),
 		 lines (0), scale_bits (0) {}
   ~view_cairo_t (void) {
     if (debug)
       cairo_debug_reset_static_data ();
   }
 
   void init (hb_buffer_t *buffer, const font_options_t *font_opts)
   {
     lines = g_array_new (false, false, sizeof (helper_cairo_line_t));
     scale_bits = -font_opts->subpixel_bits;
   }
   void new_line (void)
   {
   }
   void consume_text (hb_buffer_t  *buffer,
 		     const char   *text,
 		     unsigned int  text_len,
 		     hb_bool_t     utf8_clusters)
   {
   }
-  void shape_failed (hb_buffer_t  *buffer,
-		     const char   *text,
-		     unsigned int  text_len,
-		     hb_bool_t     utf8_clusters)
+  void error (const char *message)
   {
-    fail (false, "all shapers failed");
+    fail (false, "%s", message);
   }
   void consume_glyphs (hb_buffer_t  *buffer,
 		       const char   *text,
 		       unsigned int  text_len,
 		       hb_bool_t     utf8_clusters)
   {
     direction = hb_buffer_get_direction (buffer);
     helper_cairo_line_t l;
     helper_cairo_line_from_buffer (&l, buffer, text, text_len, scale_bits, utf8_clusters);
     g_array_append_val (lines, l);
   }
   void finish (hb_buffer_t *buffer, const font_options_t *font_opts)
   {
     render (font_opts);
 
     for (unsigned int i = 0; i < lines->len; i++) {
       helper_cairo_line_t &line = g_array_index (lines, helper_cairo_line_t, i);
       line.finish ();
     }
 #if GLIB_CHECK_VERSION (2, 22, 0)
     g_array_unref (lines);
 #else
     g_array_free (lines, TRUE);
 #endif
   }
 
   protected:
 
   output_options_t output_options;
   view_options_t view_options;
 
   void render (const font_options_t *font_opts);
 
   hb_direction_t direction; // Remove this, make segment_properties accessible
   GArray *lines;
   int scale_bits;
 };
 
 #endif
