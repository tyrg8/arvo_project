commit 833dc8c9ffde58f001308b303c8d7956107633a1
Author: Robin Watts <Robin.Watts@artifex.com>
Date:   Fri Feb 12 03:39:30 2021 -0800

    Fix build failure with HAVE_VALGRIND and not PACIFY_VALGRIND

diff --git a/base/gxifast.c b/base/gxifast.c
index 971882309..12ff4a744 100644
--- a/base/gxifast.c
+++ b/base/gxifast.c
@@ -398,116 +398,120 @@ image_simple_expand(byte * line, int line_x, uint raster,
         /* Scan a run of zeros. */
         data ^= 0xff;		/* invert */
         while (data & sbit) {
             dda_next(xl);
             sbit >>= 1;
             INCS(lbit0);
         }
         if (!sbit) {		/* Scan a run of zero bytes. */
 sw:	    if ((data = psrc[1]) != 0) {
                 psrc++;
                 INCS(byte00);
             } else if ((data = psrc[2]) != 0) {
                 dda_state_next(xl.state, dxx8);
                 psrc += 2;
                 INCS(byte01);
             } else if ((data = psrc[3]) != 0) {
                 dda_state_next(xl.state, dxx16);
                 psrc += 3;
                 INCS(byte02);
             } else if ((data = psrc[4]) != 0) {
                 dda_state_next(xl.state, dxx24);
                 psrc += 4;
                 INCS(byte03);
             } else {
                 dda_state_next(xl.state, dxx32);
                 psrc += 4;
                 INCS(byte04);
                 goto sw;
             }
             if (data > 0xf)
                 sbit = 0x80;
             else {
                 sbit = 0x08;
                 dda_state_next(xl.state, dxx4);
             }
             data ^= 0xff;	/* invert */
             while (data & sbit) {
                 dda_next(xl);
                 sbit >>= 1;
                 INCS(rbit0);
             }
         }
         x0 = dda_current_fixed2int(xl);
         if (psrc >= stop && sbit == stopbit) {
             /*
              * We've scanned the last run of 0s.
              * Prepare to fill the final run of 1s.
              * Use int64_t to avoid overflow.
              */
             n = fixed2int((int64_t)xl0 + (int64_t)x_extent) - x0;
         } else {		/* Scan a run of ones. */
             /* We know the current bit is a one. */
             data ^= 0xff;	/* un-invert */
             do {
                 dda_next(xl);
                 sbit >>= 1;
                 INCS(lbit1);
             }
             while (data & sbit);
             if (!sbit) {	/* Scan a run of 0xff bytes. */
                 while ((data = *++psrc) == 0xff) {
                     dda_state_next(xl.state, dxx8);
                     INCS(byte1);
                 }
                 if (data < 0xf0)
                     sbit = 0x80;
                 else {
                     sbit = 0x08;
                     dda_state_next(xl.state, dxx4);
                 }
                 while (data & sbit) {
                     dda_next(xl);
                     sbit >>= 1;
                     INCS(rbit1);
                 }
             }
             n = dda_current_fixed2int(xl) - x0;
         }
 
         /* Fill the run in the scan line. */
         if (n < 0)
             x0 += n, n = -n;
         bp = line + (x0 >> 3);
         bit = x0 & 7;
         if ((n += bit) <= 8) {
             *bp ^= lmasks[bit] - lmasks[n];
             INCS(thin);
         } else if ((n -= 8) <= 8) {
             *bp ^= lmasks[bit];
             bp[1] ^= rmasks[n];
             INCS(thin2);
         } else {
             *bp++ ^= lmasks[bit];
             if (n >= 56) {
                 int nb = n >> 3;
 
                 memset(bp, one, nb);
                 bp += nb;
                 INCS(nwide);
                 ADDS(bwide, nb);
             } else {
                 ADDS(bfill, n >> 3);
                 while ((n -= 8) >= 0)
                     *bp++ = one;
                 INCS(nfill);
             }
             *bp ^= rmasks[n & 7];
         }
         if (psrc >= stop && sbit == stopbit)
             break;
     }
  end:
+    {
+#ifdef PACIFY_VALGRIND
     VALGRIND_SET_VBITS(stop,&vbits,1);
+#endif
+    }
 }
 
 /* Copy one rendered scan line to the device. */
