commit ba9672456064ecc4166c6293bc36a1b126f3421a
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Thu Dec 1 09:58:26 2022 +0000

    oss-fuzz 53903: don't allow memory devices to change media sizes
    
    or resolutions. Or anything that would affect the size of the raster memory
    allocation

diff --git a/base/gdevmem.c b/base/gdevmem.c
index efaa09811..7d5746165 100644
--- a/base/gdevmem.c
+++ b/base/gdevmem.c
@@ -634,22 +634,43 @@ int
 mem_close(gx_device * dev)
 {
     gx_device_memory * const mdev = (gx_device_memory *)dev;
 
     if (mdev->bitmap_memory != 0) {
         gs_free_object(mdev->bitmap_memory, mdev->base, "mem_close");
         /*
          * The following assignment is strictly for the benefit of one
          * client that is sloppy about using is_open properly.
          */
         mdev->base = 0;
     } else if (mdev->line_pointer_memory != 0) {
         gs_free_object(mdev->line_pointer_memory, mdev->line_ptrs,
                        "mem_close");
         mdev->line_ptrs = 0;	/* ibid. */
     }
     return 0;
 }
 
+/* Memory devices shouldn't allow their dimensions to change */
+static int
+mem_put_params(gx_device * dev, gs_param_list * plist)
+{
+    int code;
+    int width = dev->width, height = dev->height;
+    float xres = dev->HWResolution[0], yres = dev->HWResolution[1];
+    float medw = dev->MediaSize[0], medh = dev->MediaSize[1];
+
+    code = gx_default_put_params(dev, plist);
+
+    dev->width = width;
+    dev->height = height;
+    dev->HWResolution[0] = xres;
+    dev->HWResolution[1] = yres;
+    dev->MediaSize[0] = medw;
+    dev->MediaSize[1] = medh;
+
+    return code;
+}
+
 /* Copy bits to a client. */
 #undef chunk
 #define chunk byte
@@ -891,31 +912,31 @@ mem_draw_thin_line(gx_device *dev, fixed fx0, fixed fy0, fixed fx1, fixed fy1,
 void mem_initialize_device_procs(gx_device *dev)
 {
     set_dev_proc(dev, get_initial_matrix, mem_get_initial_matrix);
     set_dev_proc(dev, sync_output, gx_default_sync_output);
     set_dev_proc(dev, output_page, gx_default_output_page);
     set_dev_proc(dev, close_device, mem_close);
     set_dev_proc(dev, get_params, gx_default_get_params);
-    set_dev_proc(dev, put_params, gx_default_put_params);
+    set_dev_proc(dev, put_params, mem_put_params);
     set_dev_proc(dev, get_page_device, gx_forward_get_page_device);
     set_dev_proc(dev, get_alpha_bits, gx_default_get_alpha_bits);
     set_dev_proc(dev, fill_path, gx_default_fill_path);
     set_dev_proc(dev, stroke_path, gx_default_stroke_path);
     set_dev_proc(dev, fill_mask, gx_default_fill_mask);
     set_dev_proc(dev, fill_trapezoid, gx_default_fill_trapezoid);
     set_dev_proc(dev, fill_parallelogram, gx_default_fill_parallelogram);
     set_dev_proc(dev, fill_triangle, gx_default_fill_triangle);
     set_dev_proc(dev, draw_thin_line, mem_draw_thin_line);
     set_dev_proc(dev, get_clipping_box, gx_default_get_clipping_box);
     set_dev_proc(dev, begin_typed_image, gx_default_begin_typed_image);
     set_dev_proc(dev, composite, gx_default_composite);
     set_dev_proc(dev, get_hardware_params, gx_default_get_hardware_params);
     set_dev_proc(dev, text_begin, gx_default_text_begin);
     set_dev_proc(dev, transform_pixel_region, mem_transform_pixel_region);
 
     /* Defaults that may well get overridden. */
     set_dev_proc(dev, open_device, mem_open);
     set_dev_proc(dev, copy_alpha, gx_default_copy_alpha);
     set_dev_proc(dev, map_cmyk_color, gx_default_map_cmyk_color);
     set_dev_proc(dev, strip_tile_rectangle, gx_default_strip_tile_rectangle);
     set_dev_proc(dev, get_bits_rectangle, mem_get_bits_rectangle);
 }
