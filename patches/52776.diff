commit 2c7708a03edf0495fb83fe5fcf1c16bfbae25a6e
Author: Nikita Taranov <nikita.taranov@clickhouse.com>
Date:   Fri Nov 4 22:12:36 2022 +0100

    Add bound check to lz4 decompression (#42868)
    
    * impl
    
    * add test
    
    * fix bullshit tidy error

diff --git a/src/Compression/LZ4_decompress_faster.cpp b/src/Compression/LZ4_decompress_faster.cpp
index f2084f34274..34bb440c19c 100644
--- a/src/Compression/LZ4_decompress_faster.cpp
+++ b/src/Compression/LZ4_decompress_faster.cpp
@@ -1,25 +1,25 @@
 #include "LZ4_decompress_faster.h"
 
 #include <cstring>
 #include <iostream>
 #include <Core/Defines.h>
-#include <Common/Stopwatch.h>
-#include <Common/TargetSpecific.h>
 #include <base/types.h>
 #include <base/unaligned.h>
+#include <Common/Stopwatch.h>
+#include <Common/TargetSpecific.h>
 
 #ifdef __SSE2__
 #include <emmintrin.h>
 #endif
 
 #ifdef __SSSE3__
 #include <tmmintrin.h>
 #endif
 
 #if USE_MULTITARGET_CODE
 #include <immintrin.h>
 #endif
 
 #ifdef __aarch64__
 #include <arm_neon.h>
 #endif
@@ -481,161 +481,164 @@ template <size_t copy_amount, bool use_shuffle>
 bool NO_INLINE decompressImpl(const char * const source, char * const dest, size_t source_size, size_t dest_size)
 {
     const UInt8 * ip = reinterpret_cast<const UInt8 *>(source);
     UInt8 * op = reinterpret_cast<UInt8 *>(dest);
     const UInt8 * const input_end = ip + source_size;
     UInt8 * const output_begin = op;
     UInt8 * const output_end = op + dest_size;
 
     /// Unrolling with clang is doing >10% performance degrade.
 #if defined(__clang__)
     #pragma nounroll
 #endif
     while (true)
     {
         size_t length;
 
         auto continue_read_length = [&]
         {
             unsigned s;
             do
             {
                 s = *ip++;
                 length += s;
             } while (unlikely(s == 255 && ip < input_end));
         };
 
         /// Get literal length.
 
         if (unlikely(ip >= input_end))
             return false;
 
         const unsigned token = *ip++;
         length = token >> 4;
 
         UInt8 * copy_end;
         size_t real_length;
 
         /// It might be true fairly often for well-compressed columns.
         /// ATST it may hurt performance in other cases because this condition is hard to predict (especially if the number of zeros is ~50%).
         /// In such cases this `if` will significantly increase number of mispredicted instructions. But seems like it results in a
         /// noticeable slowdown only for implementations with `copy_amount` > 8. Probably because they use havier instructions.
         if constexpr (copy_amount == 8)
             if (length == 0)
                 goto decompress_match;
 
         if (length == 0x0F)
         {
             if (unlikely(ip + 1 >= input_end))
                 return false;
             continue_read_length();
         }
 
         /// Copy literals.
 
         copy_end = op + length;
 
         /// input: Hello, world
         ///        ^-ip
         /// output: xyz
         ///            ^-op  ^-copy_end
         /// output: xyzHello, w
         ///                   ^- excessive copied bytes due to "wildCopy"
         /// input: Hello, world
         ///              ^-ip
         /// output: xyzHello, w
         ///                  ^-op (we will overwrite excessive bytes on next iteration)
 
         if (unlikely(copy_end > output_end))
             return false;
 
         // Due to implementation specifics the copy length is always a multiple of copy_amount
         real_length = 0;
 
         static_assert(copy_amount == 8 || copy_amount == 16 || copy_amount == 32);
         if constexpr (copy_amount == 8)
             real_length = (((length >> 3) + 1) * 8);
         else if constexpr (copy_amount == 16)
             real_length = (((length >> 4) + 1) * 16);
         else if constexpr (copy_amount == 32)
             real_length = (((length >> 5) + 1) * 32);
 
         if (unlikely(ip + real_length >= input_end + ADDITIONAL_BYTES_AT_END_OF_BUFFER))
             return false;
 
         wildCopy<copy_amount>(op, ip, copy_end); /// Here we can write up to copy_amount - 1 bytes after buffer.
 
         if (copy_end == output_end)
             return true;
 
         ip += length;
         op = copy_end;
 
     decompress_match:
 
         if (unlikely(ip + 1 >= input_end))
             return false;
 
         /// Get match offset.
 
         size_t offset = LZ4_readLE16(ip);
         ip += 2;
         const UInt8 * match = op - offset;
 
         if (unlikely(match < output_begin))
             return false;
 
         /// Get match length.
 
         length = token & 0x0F;
         if (length == 0x0F)
         {
             if (unlikely(ip + 1 >= input_end))
                 return false;
             continue_read_length();
         }
         length += 4;
 
         /// Copy match within block, that produce overlapping pattern. Match may replicate itself.
 
         copy_end = op + length;
 
+        if (unlikely(copy_end > output_end))
+            return false;
+
         /** Here we can write up to copy_amount - 1 - 4 * 2 bytes after buffer.
           * The worst case when offset = 1 and length = 4
           */
 
         if (unlikely(offset < copy_amount))
         {
             /// output: Hello
             ///              ^-op
             ///         ^-match; offset = 5
             ///
             /// output: Hello
             ///         [------] - copy_amount bytes
             ///              [------] - copy them here
             ///
             /// output: HelloHelloHel
             ///            ^-match   ^-op
 
             copyOverlap<copy_amount, use_shuffle>(op, match, offset);
         }
         else
         {
             copy<copy_amount>(op, match);
             match += copy_amount;
         }
 
         op += copy_amount;
 
         copy<copy_amount>(op, match);   /// copy_amount + copy_amount - 1 - 4 * 2 bytes after buffer.
         if (length > copy_amount * 2)
         {
             if (unlikely(copy_end > output_end))
                 return false;
             wildCopy<copy_amount>(op + copy_amount, match + copy_amount, copy_end);
         }
 
         op = copy_end;
     }
 }
 
 }
diff --git a/src/Compression/tests/gtest_compressionCodec.cpp b/src/Compression/tests/gtest_compressionCodec.cpp
index 9b44c60cd81..4765aeb45ed 100644
--- a/src/Compression/tests/gtest_compressionCodec.cpp
+++ b/src/Compression/tests/gtest_compressionCodec.cpp
@@ -1,34 +1,37 @@
 #include <Compression/CompressionFactory.h>
 
-#include <Common/PODArray.h>
-#include <Common/Stopwatch.h>
-#include <base/types.h>
 #include <DataTypes/DataTypesNumber.h>
 #include <DataTypes/IDataType.h>
 #include <IO/ReadBufferFromMemory.h>
 #include <IO/WriteHelpers.h>
 #include <Parsers/ExpressionElementParsers.h>
 #include <Parsers/IParser.h>
 #include <Parsers/TokenIterator.h>
+#include <base/types.h>
+#include <Common/PODArray.h>
+#include <Common/Stopwatch.h>
+
+#include <Compression/LZ4_decompress_faster.h>
+#include <IO/BufferWithOwnMemory.h>
 
 #include <random>
 #include <bitset>
 #include <cmath>
 #include <initializer_list>
 #include <iomanip>
 #include <iostream>
 #include <iterator>
 #include <memory>
 #include <typeinfo>
 #include <vector>
 
 #include <cstring>
 
 /// For the expansion of gtest macros.
 #if defined(__clang__)
     #pragma clang diagnostic ignored "-Wdeprecated"
 #elif defined (__GNUC__) && __GNUC__ >= 9
     #pragma GCC diagnostic ignored "-Wdeprecated-copy"
 #endif
 
 #include <gtest/gtest.h>
@@ -1226,97 +1229,127 @@ auto GCompatibilityTestSequence()
 INSTANTIATE_TEST_SUITE_P(Gorilla,
     CodecTestCompatibility,
     ::testing::Combine(
         ::testing::Values(Codec("Gorilla")),
         ::testing::ValuesIn(std::initializer_list<std::tuple<CodecTestSequence, std::string>>{
             {
                 GCompatibilityTestSequence<Int8>(),
                 BIN_STR("\x95\x35\x00\x00\x00\x2a\x00\x00\x00\x01\x00\x2a\x00\x00\x00\x14\xe1\xdd\x25\xe5\x7b\x29\x86\xee\x2a\x16\x5a\xc5\x0b\x23\x75\x1b\x3c\xb1\x97\x8b\x5f\xcb\x43\xd9\xc5\x48\xab\x23\xaf\x62\x93\x71\x4a\x73\x0f\xc6\x0a")
             },
             {
                 GCompatibilityTestSequence<UInt8>(),
                 BIN_STR("\x95\x35\x00\x00\x00\x2a\x00\x00\x00\x01\x00\x2a\x00\x00\x00\x14\xe1\xdd\x25\xe5\x7b\x29\x86\xee\x2a\x16\x5a\xc5\x0b\x23\x75\x1b\x3c\xb1\x97\x8b\x5f\xcb\x43\xd9\xc5\x48\xab\x23\xaf\x62\x93\x71\x4a\x73\x0f\xc6\x0a")
             },
             {
                 GCompatibilityTestSequence<Int16>(),
                 BIN_STR("\x95\x52\x00\x00\x00\x54\x00\x00\x00\x02\x00\x2a\x00\x00\x00\xc8\x00\xdc\xfe\x66\xdb\x1f\x4e\xa7\xde\xdc\xd5\xec\x6e\xf7\x37\x3a\x23\xe7\x63\xf5\x6a\x8e\x99\x37\x34\xf9\xf8\x2e\x76\x35\x2d\x51\xbb\x3b\xc3\x6d\x13\xbf\x86\x53\x9e\x25\xe4\xaf\xaf\x63\xd5\x6a\x6e\x76\x35\x3a\x27\xd3\x0f\x91\xae\x6b\x33\x57\x6e\x64\xcc\x55\x81\xe4")
             },
             {
                 GCompatibilityTestSequence<UInt16>(),
                 BIN_STR("\x95\x52\x00\x00\x00\x54\x00\x00\x00\x02\x00\x2a\x00\x00\x00\xc8\x00\xdc\xfe\x66\xdb\x1f\x4e\xa7\xde\xdc\xd5\xec\x6e\xf7\x37\x3a\x23\xe7\x63\xf5\x6a\x8e\x99\x37\x34\xf9\xf8\x2e\x76\x35\x2d\x51\xbb\x3b\xc3\x6d\x13\xbf\x86\x53\x9e\x25\xe4\xaf\xaf\x63\xd5\x6a\x6e\x76\x35\x3a\x27\xd3\x0f\x91\xae\x6b\x33\x57\x6e\x64\xcc\x55\x81\xe4")
             },
             {
                 GCompatibilityTestSequence<Int32>(),
                 BIN_STR("\x95\x65\x00\x00\x00\xa8\x00\x00\x00\x04\x00\x2a\x00\x00\x00\x20\x4e\x00\x00\xe4\x57\x63\xc0\xbb\x67\xbc\xce\x91\x97\x99\x15\x9e\xe3\x36\x3f\x89\x5f\x8e\xf2\xec\x8e\xd3\xbf\x75\x43\x58\xc4\x7e\xcf\x93\x43\x38\xc6\x91\x36\x1f\xe7\xb6\x11\x6f\x02\x73\x46\xef\xe0\xec\x50\xfb\x79\xcb\x9c\x14\xfa\x13\xea\x8d\x66\x43\x48\xa0\xde\x3a\xcf\xff\x26\xe0\x5f\x93\xde\x5e\x7f\x6e\x36\x5e\xe6\xb4\x66\x5d\xb0\x0e\xc4")
             },
             {
                 GCompatibilityTestSequence<UInt32>(),
                 BIN_STR("\x95\x65\x00\x00\x00\xa8\x00\x00\x00\x04\x00\x2a\x00\x00\x00\x20\x4e\x00\x00\xe4\x57\x63\xc0\xbb\x67\xbc\xce\x91\x97\x99\x15\x9e\xe3\x36\x3f\x89\x5f\x8e\xf2\xec\x8e\xd3\xbf\x75\x43\x58\xc4\x7e\xcf\x93\x43\x38\xc6\x91\x36\x1f\xe7\xb6\x11\x6f\x02\x73\x46\xef\xe0\xec\x50\xfb\x79\xcb\x9c\x14\xfa\x13\xea\x8d\x66\x43\x48\xa0\xde\x3a\xcf\xff\x26\xe0\x5f\x93\xde\x5e\x7f\x6e\x36\x5e\xe6\xb4\x66\x5d\xb0\x0e\xc4")
             },
             {
                 GCompatibilityTestSequence<Int64>(),
                 BIN_STR("\x95\x91\x00\x00\x00\x50\x01\x00\x00\x08\x00\x2a\x00\x00\x00\x00\xc2\xeb\x0b\x00\x00\x00\x00\xe3\x2b\xa0\xa6\x19\x85\x98\xdc\x45\x74\x74\x43\xc2\x57\x41\x4c\x6e\x42\x79\xd9\x8f\x88\xa5\x05\xf3\xf1\x94\xa3\x62\x1e\x02\xdf\x05\x10\xf1\x15\x97\x35\x2a\x50\x71\x0f\x09\x6c\x89\xf7\x65\x1d\x11\xb7\xcc\x7d\x0b\x70\xc1\x86\x88\x48\x47\x87\xb6\x32\x26\xa7\x86\x87\x88\xd3\x93\x3d\xfc\x28\x68\x85\x05\x0b\x13\xc6\x5f\xd4\x70\xe1\x5e\x76\xf1\x9f\xf3\x33\x2a\x14\x14\x5e\x40\xc1\x5c\x28\x3f\xec\x43\x03\x05\x11\x91\xe8\xeb\x8e\x0a\x0e\x27\x21\x55\xcb\x39\xbc\x6a\xff\x11\x5d\x81\xa0\xa6\x10")
             },
             {
                 GCompatibilityTestSequence<UInt64>(),
                 BIN_STR("\x95\x91\x00\x00\x00\x50\x01\x00\x00\x08\x00\x2a\x00\x00\x00\x00\xc2\xeb\x0b\x00\x00\x00\x00\xe3\x2b\xa0\xa6\x19\x85\x98\xdc\x45\x74\x74\x43\xc2\x57\x41\x4c\x6e\x42\x79\xd9\x8f\x88\xa5\x05\xf3\xf1\x94\xa3\x62\x1e\x02\xdf\x05\x10\xf1\x15\x97\x35\x2a\x50\x71\x0f\x09\x6c\x89\xf7\x65\x1d\x11\xb7\xcc\x7d\x0b\x70\xc1\x86\x88\x48\x47\x87\xb6\x32\x26\xa7\x86\x87\x88\xd3\x93\x3d\xfc\x28\x68\x85\x05\x0b\x13\xc6\x5f\xd4\x70\xe1\x5e\x76\xf1\x9f\xf3\x33\x2a\x14\x14\x5e\x40\xc1\x5c\x28\x3f\xec\x43\x03\x05\x11\x91\xe8\xeb\x8e\x0a\x0e\x27\x21\x55\xcb\x39\xbc\x6a\xff\x11\x5d\x81\xa0\xa6\x10")
             },
         })
     )
 );
 
 // These 'tests' try to measure performance of encoding and decoding and hence only make sense to be run locally,
 // also they require pretty big data to run against and generating this data slows down startup of unit test process.
 // So un-comment only at your discretion.
 
 // Just as if all sequences from generatePyramidOfSequences were appended to one-by-one to the first one.
 //template <typename T, typename Generator>
 //CodecTestSequence generatePyramidSequence(const size_t sequences_count, Generator && generator, const char* generator_name)
 //{
 //    CodecTestSequence sequence;
 //    sequence.data_type = makeDataType<T>();
 //    sequence.serialized_data.reserve(sequences_count * sequences_count * sizeof(T));
 //
 //    for (size_t i = 1; i < sequences_count; ++i)
 //    {
 //        std::string name = generator_name + std::string(" from 0 to ") + std::to_string(i);
 //        sequence.append(generateSeq<T>(std::forward<decltype(generator)>(generator), name.c_str(), 0, i));
 //    }
 //
 //    return sequence;
 //};
 
 //INSTANTIATE_TEST_SUITE_P(DoubleDelta,
 //    CodecTestPerformance,
 //    ::testing::Combine(
 //        ::testing::Values(Codec("DoubleDelta")),
 //        ::testing::Values(
 //            DDperformanceTestSequence<Int8 >(),
 //            DDperformanceTestSequence<UInt8 >(),
 //            DDperformanceTestSequence<Int16 >(),
 //            DDperformanceTestSequence<UInt16>(),
 //            DDperformanceTestSequence<Int32 >(),
 //            DDperformanceTestSequence<UInt32>(),
 //            DDperformanceTestSequence<Int64 >(),
 //            DDperformanceTestSequence<UInt64>()
 //        )
 //    ),
 //);
 
 //INSTANTIATE_TEST_SUITE_P(Gorilla,
 //    CodecTestPerformance,
 //    ::testing::Combine(
 //        ::testing::Values(Codec("Gorilla")),
 //        ::testing::Values(
 //            generatePyramidSequence<Int8 >(42, G(PrimesWithMultiplierGenerator())) * 6'000,
 //            generatePyramidSequence<UInt8 >(42, G(PrimesWithMultiplierGenerator())) * 6'000,
 //            generatePyramidSequence<Int16 >(42, G(PrimesWithMultiplierGenerator())) * 6'000,
 //            generatePyramidSequence<UInt16>(42, G(PrimesWithMultiplierGenerator())) * 6'000,
 //            generatePyramidSequence<Int32 >(42, G(PrimesWithMultiplierGenerator())) * 6'000,
 //            generatePyramidSequence<UInt32>(42, G(PrimesWithMultiplierGenerator())) * 6'000,
 //            generatePyramidSequence<Int64 >(42, G(PrimesWithMultiplierGenerator())) * 6'000,
 //            generatePyramidSequence<UInt64>(42, G(PrimesWithMultiplierGenerator())) * 6'000
 //        )
 //    ),
 //);
 
+TEST(LZ4Test, DecompressMalformedInput)
+{
+    /// This malformed input was initially found by lz4_decompress_fuzzer and causes failure under UBSAN.
+    constexpr unsigned char data[]
+        = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
+           0x00, 0x20, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0xff, 0xff, 0xff, 0x17, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
+           0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
+           0xfe, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
+
+    const char * const source = reinterpret_cast<const char * const>(data);
+    const uint32_t source_size = std::size(data);
+    constexpr uint32_t uncompressed_size = 80;
+
+    DB::Memory<> memory;
+    memory.resize(ICompressionCodec::getHeaderSize() + uncompressed_size + LZ4::ADDITIONAL_BYTES_AT_END_OF_BUFFER);
+    unalignedStoreLE<uint8_t>(memory.data(), static_cast<uint8_t>(CompressionMethodByte::LZ4));
+    unalignedStoreLE<uint32_t>(&memory[1], source_size);
+    unalignedStoreLE<uint32_t>(&memory[5], uncompressed_size);
+
+    auto codec = CompressionCodecFactory::instance().get("LZ4", {});
+    ASSERT_THROW(codec->decompress(source, source_size, memory.data()), Exception);
+}
+
 }
