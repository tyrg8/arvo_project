commit 34f458c8cc7041c5d5231cc6c04a17aee43134fe
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Sun May 14 21:48:42 2017 +0000

    Remove function type casts that apparently do not please UBSAN. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1582. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@38355 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/ogr/ogr_geometry.h b/gdal/ogr/ogr_geometry.h
index 04428fbee8..d297e872be 100644
--- a/gdal/ogr/ogr_geometry.h
+++ b/gdal/ogr/ogr_geometry.h
@@ -622,130 +622,134 @@ class CPL_DLL OGRSimpleCurve: public OGRCurve
 
 class CPL_DLL OGRLineString : public OGRSimpleCurve
 {
+    static OGRLinearRing*          CasterToLinearRing(OGRCurve* poCurve);
+
   protected:
 //! @cond Doxygen_Suppress
     static OGRLineString* TransferMembersAndDestroy(
                                             OGRLineString* poSrc,
                                             OGRLineString* poDst);
 
     virtual OGRCurveCasterToLineString GetCasterToLineString()
         const CPL_OVERRIDE;
     virtual OGRCurveCasterToLinearRing GetCasterToLinearRing()
         const CPL_OVERRIDE;
 
     virtual double get_AreaOfCurveSegments() const CPL_OVERRIDE;
 //! @endcond
 
     static OGRLinearRing* CastToLinearRing( OGRLineString* poLS );
 
   public:
                 OGRLineString();
                 OGRLineString( const OGRLineString& other );
     virtual    ~OGRLineString();
 
     OGRLineString& operator=(const OGRLineString& other);
 
     virtual OGRLineString* CurveToLine( double dfMaxAngleStepSizeDegrees = 0,
                                         const char* const* papszOptions = NULL )
         const CPL_OVERRIDE;
     virtual OGRGeometry* getCurveGeometry(
         const char* const* papszOptions = NULL ) const CPL_OVERRIDE;
     virtual double get_Area() const CPL_OVERRIDE;
 
     // Non-standard from OGRGeometry.
     virtual OGRwkbGeometryType getGeometryType() const CPL_OVERRIDE;
     virtual const char *getGeometryName() const CPL_OVERRIDE;
 };
 
 /************************************************************************/
 /*                            OGRLinearRing                             */
 /************************************************************************/
 
 /**
  * Concrete representation of a closed ring.
  *
  * This class is functionally equivalent to an OGRLineString, but has a
  * separate identity to maintain alignment with the OpenGIS simple feature
  * data model.  It exists to serve as a component of an OGRPolygon.
  *
  * The OGRLinearRing has no corresponding free standing well known binary
  * representation, so importFromWkb() and exportToWkb() will not actually
  * work.  There is a non-standard GDAL WKT representation though.
  *
  * Because OGRLinearRing is not a "proper" free standing simple features
  * object, it cannot be directly used on a feature via SetGeometry(), and
  * cannot generally be used with GEOS for operations like Intersects().
  * Instead the polygon should be used, or the OGRLinearRing should be
  * converted to an OGRLineString for such operations.
  *
  * Note: this class exists in SFSQL 1.2, but not in ISO SQL/MM Part 3.
  */
 
 class CPL_DLL OGRLinearRing : public OGRLineString
 {
+    static OGRLineString*       CasterToLineString( OGRCurve* poCurve );
+
   protected:
 //! @cond Doxygen_Suppress
     friend class OGRPolygon;
     friend class OGRTriangle;
 
     // These are not IWks compatible ... just a convenience for OGRPolygon.
     virtual int _WkbSize( int _flags ) const;
     virtual OGRErr _importFromWkb( OGRwkbByteOrder, int _flags,
                                    unsigned char *, int=-1 );
     virtual OGRErr _exportToWkb( OGRwkbByteOrder, int _flags,
                                  unsigned char * ) const;
 
     virtual OGRCurveCasterToLineString GetCasterToLineString()
         const CPL_OVERRIDE;
     virtual OGRCurveCasterToLinearRing GetCasterToLinearRing()
         const CPL_OVERRIDE;
 //! @endcond
 
     static OGRLineString* CastToLineString( OGRLinearRing* poLR );
 
   public:
                         OGRLinearRing();
                         OGRLinearRing( const OGRLinearRing& other );
                explicit OGRLinearRing( OGRLinearRing * );
     virtual            ~OGRLinearRing();
 
     OGRLinearRing& operator=( const OGRLinearRing& other );
 
     // Non standard.
     virtual const char *getGeometryName() const CPL_OVERRIDE;
     virtual OGRGeometry *clone() const CPL_OVERRIDE;
     virtual int isClockwise() const;
     virtual void reverseWindingOrder();
     virtual void closeRings() CPL_OVERRIDE;
     OGRBoolean isPointInRing( const OGRPoint* pt,
                               int bTestEnvelope = TRUE ) const;
     OGRBoolean isPointOnRingBoundary( const OGRPoint* pt,
                                       int bTestEnvelope = TRUE ) const;
     virtual OGRErr  transform( OGRCoordinateTransformation *poCT ) CPL_OVERRIDE;
 
     // IWks Interface - Note this isn't really a first class object
     // for the purposes of WKB form.  These methods always fail since this
     // object can't be serialized on its own.
     virtual int WkbSize() const CPL_OVERRIDE;
     virtual OGRErr importFromWkb( unsigned char *, int=-1,
                                   OGRwkbVariant=wkbVariantOldOgc ) CPL_OVERRIDE;
     virtual OGRErr exportToWkb( OGRwkbByteOrder, unsigned char *,
                                 OGRwkbVariant=wkbVariantOldOgc )
         const CPL_OVERRIDE;
 };
 
 /************************************************************************/
 /*                         OGRCircularString                            */
 /************************************************************************/
 
 /**
  * Concrete representation of a circular string, that is to say a curve made
  * of one or several arc circles.
  *
  * Note: for implementation convenience, we make it inherit from OGRSimpleCurve
  * whereas SQL/MM only makes it inherits from OGRCurve.
  *
  * Compatibility: ISO SQL/MM Part 3.
  *
  * @since GDAL 2.0
  */
@@ -906,107 +910,109 @@ class CPL_DLL OGRCurveCollection
 class CPL_DLL OGRCompoundCurve : public OGRCurve
 {
   private:
     OGRCurveCollection oCC;
 
     OGRErr      addCurveDirectlyInternal( OGRCurve* poCurve,
                                           double dfToleranceEps,
                                           int bNeedRealloc );
     static OGRErr addCurveDirectlyFromWkt( OGRGeometry* poSelf,
                                            OGRCurve* poCurve );
     static OGRErr addCurveDirectlyFromWkb( OGRGeometry* poSelf,
                                            OGRCurve* poCurve );
     OGRLineString* CurveToLineInternal( double dfMaxAngleStepSizeDegrees,
                                         const char* const* papszOptions,
                                         int bIsLinearRing ) const;
+    static OGRLineString* CasterToLineString( OGRCurve* poCurve );
+    static OGRLinearRing* CasterToLinearRing( OGRCurve* poCurve );
 
   protected:
 //! @cond Doxygen_Suppress
     static OGRLineString* CastToLineString( OGRCompoundCurve* poCC );
     static OGRLinearRing* CastToLinearRing( OGRCompoundCurve* poCC );
 
     virtual OGRCurveCasterToLineString GetCasterToLineString()
         const CPL_OVERRIDE;
     virtual OGRCurveCasterToLinearRing GetCasterToLinearRing()
         const CPL_OVERRIDE;
 //! @endcond
 
   public:
                 OGRCompoundCurve();
                 OGRCompoundCurve( const OGRCompoundCurve& other );
     virtual     ~OGRCompoundCurve();
 
     OGRCompoundCurve& operator=( const OGRCompoundCurve& other );
 
     // IWks Interface
     virtual int WkbSize() const CPL_OVERRIDE;
     virtual OGRErr importFromWkb( unsigned char *, int = -1,
                                   OGRwkbVariant=wkbVariantOldOgc ) CPL_OVERRIDE;
     virtual OGRErr exportToWkb( OGRwkbByteOrder, unsigned char *,
                                 OGRwkbVariant=wkbVariantOldOgc )
         const CPL_OVERRIDE;
     virtual OGRErr importFromWkt( char ** ) CPL_OVERRIDE;
     virtual OGRErr exportToWkt( char ** ppszDstText,
                                 OGRwkbVariant=wkbVariantOldOgc )
         const CPL_OVERRIDE;
 
     // IGeometry interface.
     virtual OGRGeometry *clone() const CPL_OVERRIDE;
     virtual void empty() CPL_OVERRIDE;
     virtual void getEnvelope( OGREnvelope * psEnvelope ) const CPL_OVERRIDE;
     virtual void getEnvelope( OGREnvelope3D * psEnvelope ) const CPL_OVERRIDE;
     virtual OGRBoolean  IsEmpty() const CPL_OVERRIDE;
 
     // ICurve methods.
     virtual double get_Length() const CPL_OVERRIDE;
     virtual void StartPoint( OGRPoint * ) const CPL_OVERRIDE;
     virtual void EndPoint( OGRPoint * ) const CPL_OVERRIDE;
     virtual void Value( double, OGRPoint * ) const CPL_OVERRIDE;
     virtual OGRLineString* CurveToLine( double dfMaxAngleStepSizeDegrees = 0,
                                         const char* const* papszOptions = NULL )
         const CPL_OVERRIDE;
 
     virtual int getNumPoints() const CPL_OVERRIDE;
     virtual double get_AreaOfCurveSegments() const CPL_OVERRIDE;
     virtual double get_Area() const CPL_OVERRIDE;
 
     // ISpatialRelation.
     virtual OGRBoolean  Equals( OGRGeometry * ) const CPL_OVERRIDE;
 
     // ICompoundCurve method.
     int             getNumCurves() const;
     OGRCurve       *getCurve( int );
     const OGRCurve *getCurve( int ) const;
 
     // Non-standard.
     virtual void setCoordinateDimension( int nDimension ) CPL_OVERRIDE;
     virtual void set3D( OGRBoolean bIs3D ) CPL_OVERRIDE;
     virtual void setMeasured( OGRBoolean bIsMeasured ) CPL_OVERRIDE;
 
     OGRErr         addCurve( OGRCurve*, double dfToleranceEps = 1e-14  );
     OGRErr         addCurveDirectly( OGRCurve*, double dfToleranceEps = 1e-14 );
     OGRCurve      *stealCurve( int );
     virtual OGRPointIterator* getPointIterator() const CPL_OVERRIDE;
 
     // Non-standard from OGRGeometry.
     virtual OGRwkbGeometryType getGeometryType() const CPL_OVERRIDE;
     virtual const char *getGeometryName() const CPL_OVERRIDE;
     virtual OGRErr  transform( OGRCoordinateTransformation *poCT ) CPL_OVERRIDE;
     virtual void flattenTo2D() CPL_OVERRIDE;
     virtual void segmentize(double dfMaxLength) CPL_OVERRIDE;
     virtual OGRBoolean hasCurveGeometry(int bLookForNonLinear = FALSE)
         const CPL_OVERRIDE;
     virtual OGRGeometry* getLinearGeometry(
         double dfMaxAngleStepSizeDegrees = 0,
         const char* const* papszOptions = NULL) const CPL_OVERRIDE;
 
     virtual void        swapXY() CPL_OVERRIDE;
 };
 
 /************************************************************************/
 /*                              OGRSurface                              */
 /************************************************************************/
 
 /**
  * Abstract base class for 2 dimensional objects like polygons or curve
  * polygons.
  */
diff --git a/gdal/ogr/ogrcircularstring.cpp b/gdal/ogr/ogrcircularstring.cpp
index f35d3bdc52..b0ec08bae3 100644
--- a/gdal/ogr/ogrcircularstring.cpp
+++ b/gdal/ogr/ogrcircularstring.cpp
@@ -693,19 +693,35 @@ OGRCircularString::getLinearGeometry( double dfMaxAngleStepSizeDegrees,
 /*                     GetCasterToLineString()                          */
 /************************************************************************/
 
+static OGRLineString* CasterToLineString(OGRCurve* poGeom)
+{
+    CPLError(CE_Failure, CPLE_AppDefined,
+             "%s found. Conversion impossible", poGeom->getGeometryName());
+    delete poGeom;
+    return NULL;
+}
+
 OGRCurveCasterToLineString OGRCircularString::GetCasterToLineString() const {
-    return (OGRCurveCasterToLineString) OGRGeometry::CastToError;
+    return ::CasterToLineString;
 }
 
 /************************************************************************/
 /*                        GetCasterToLinearRing()                       */
 /************************************************************************/
 
+static OGRLinearRing* CasterToLinearRing(OGRCurve* poGeom)
+{
+    CPLError(CE_Failure, CPLE_AppDefined,
+             "%s found. Conversion impossible", poGeom->getGeometryName());
+    delete poGeom;
+    return NULL;
+}
+
 OGRCurveCasterToLinearRing OGRCircularString::GetCasterToLinearRing() const {
-    return (OGRCurveCasterToLinearRing) OGRGeometry::CastToError;
+    return ::CasterToLinearRing;
 }
 //! @endcond
 
 /************************************************************************/
 /*                            IsFullCircle()                            */
 /************************************************************************/
diff --git a/gdal/ogr/ogrcompoundcurve.cpp b/gdal/ogr/ogrcompoundcurve.cpp
index 9765b9104a..cb30c9dc8c 100644
--- a/gdal/ogr/ogrcompoundcurve.cpp
+++ b/gdal/ogr/ogrcompoundcurve.cpp
@@ -810,19 +810,33 @@ OGRLinearRing* OGRCompoundCurve::CastToLinearRing( OGRCompoundCurve* poCC )
 /*                     GetCasterToLineString()                          */
 /************************************************************************/
 
+OGRLineString* OGRCompoundCurve::CasterToLineString( OGRCurve* poCurve )
+{
+    OGRCompoundCurve* poCC = dynamic_cast<OGRCompoundCurve*>(poCurve);
+    CPLAssert(poCC);
+    return OGRCompoundCurve::CastToLineString(poCC);
+}
+
 OGRCurveCasterToLineString OGRCompoundCurve::GetCasterToLineString() const {
-    return (OGRCurveCasterToLineString) OGRCompoundCurve::CastToLineString;
+    return OGRCompoundCurve::CasterToLineString;
 }
 
 /************************************************************************/
 /*                        GetCasterToLinearRing()                       */
 /************************************************************************/
 
+OGRLinearRing* OGRCompoundCurve::CasterToLinearRing( OGRCurve* poCurve )
+{
+    OGRCompoundCurve* poCC = dynamic_cast<OGRCompoundCurve*>(poCurve);
+    CPLAssert(poCC);
+    return OGRCompoundCurve::CastToLinearRing(poCC);
+}
+
 OGRCurveCasterToLinearRing OGRCompoundCurve::GetCasterToLinearRing() const {
-    return (OGRCurveCasterToLinearRing) OGRCompoundCurve::CastToLinearRing;
+    return OGRCompoundCurve::CasterToLinearRing;
 }
 //! @endcond
 
 /************************************************************************/
 /*                           get_Area()                                 */
 /************************************************************************/
diff --git a/gdal/ogr/ogrlinearring.cpp b/gdal/ogr/ogrlinearring.cpp
index b6ba68512e..23bfa08c61 100644
--- a/gdal/ogr/ogrlinearring.cpp
+++ b/gdal/ogr/ogrlinearring.cpp
@@ -777,17 +777,31 @@ OGRLineString* OGRLinearRing::CastToLineString( OGRLinearRing* poLR )
 /*                     GetCasterToLineString()                          */
 /************************************************************************/
 
+OGRLineString* OGRLinearRing::CasterToLineString( OGRCurve* poCurve )
+{
+    OGRLinearRing* poLR = dynamic_cast<OGRLinearRing*>(poCurve);
+    CPLAssert(poLR);
+    return OGRLinearRing::CastToLinearRing(poLR);
+}
+
 OGRCurveCasterToLineString OGRLinearRing::GetCasterToLineString() const
 {
-    return (OGRCurveCasterToLineString) OGRLinearRing::CastToLineString;
+    return OGRLinearRing::CasterToLineString;
 }
 
 /************************************************************************/
 /*                        GetCasterToLinearRing()                       */
 /************************************************************************/
 
+static OGRLinearRing* CasterToLinearRing(OGRCurve* poCurve)
+{
+    OGRLinearRing* poLR = dynamic_cast<OGRLinearRing*>(poCurve);
+    CPLAssert(poLR);
+    return poLR;
+}
+
 OGRCurveCasterToLinearRing OGRLinearRing::GetCasterToLinearRing() const
 {
-    return (OGRCurveCasterToLinearRing) OGRGeometry::CastToIdentity;
+    return ::CasterToLinearRing;
 }
 //! @endcond
diff --git a/gdal/ogr/ogrlinestring.cpp b/gdal/ogr/ogrlinestring.cpp
index caefcb3658..aaffb5f085 100644
--- a/gdal/ogr/ogrlinestring.cpp
+++ b/gdal/ogr/ogrlinestring.cpp
@@ -2811,20 +2811,34 @@ OGRLinearRing* OGRLineString::CastToLinearRing( OGRLineString* poLS )
 /*                     GetCasterToLineString()                          */
 /************************************************************************/
 
+static OGRLineString* CasterToLineString(OGRCurve* poCurve)
+{
+    OGRLineString* poLS = dynamic_cast<OGRLineString*>(poCurve);
+    CPLAssert(poLS);
+    return poLS;
+}
+
 OGRCurveCasterToLineString OGRLineString::GetCasterToLineString() const
 {
-    return (OGRCurveCasterToLineString) OGRGeometry::CastToIdentity;
+    return ::CasterToLineString;
 }
 
 /************************************************************************/
 /*                        GetCasterToLinearRing()                       */
 /************************************************************************/
 
+OGRLinearRing* OGRLineString::CasterToLinearRing(OGRCurve* poCurve)
+{
+    OGRLineString* poLS = dynamic_cast<OGRLineString*>(poCurve);
+    CPLAssert(poLS);
+    return OGRLineString::CastToLinearRing(poLS);
+}
+
 OGRCurveCasterToLinearRing OGRLineString::GetCasterToLinearRing() const
 {
-    return (OGRCurveCasterToLinearRing) OGRLineString::CastToLinearRing;
+    return OGRLineString::CasterToLinearRing;
 }
 
 /************************************************************************/
 /*                            get_Area()                                */
 /************************************************************************/
