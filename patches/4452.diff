commit 0b5389f22c17082864de100a6efedbaa4b0d894f
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Sat Dec 2 20:04:38 2017 +0300

    LJpegDecompressor: make sure that slice has enough pixels to output to.

diff --git a/src/librawspeed/decompressors/LJpegDecompressor.cpp b/src/librawspeed/decompressors/LJpegDecompressor.cpp
index 78deff86..aa06d6fa 100644
--- a/src/librawspeed/decompressors/LJpegDecompressor.cpp
+++ b/src/librawspeed/decompressors/LJpegDecompressor.cpp
@@ -68,25 +68,28 @@ void LJpegDecompressor::decode(uint32 offsetX, uint32 offsetY, bool fixDng16Bug_
 void LJpegDecompressor::decodeScan()
 {
   if (predictorMode != 1)
     ThrowRDE("Unsupported predictor mode: %u", predictorMode);
 
   for (uint32 i = 0; i < frame.cps;  i++)
     if (frame.compInfo[i].superH != 1 || frame.compInfo[i].superV != 1)
       ThrowRDE("Unsupported subsampling");
 
+  if((mRaw->getCpp() * (mRaw->dim.x - offX)) < frame.cps)
+    ThrowRDE("Got less pixels than the components per sample");
+
   switch (frame.cps) {
   case 2:
     decodeN<2>();
     break;
   case 3:
     decodeN<3>();
     break;
   case 4:
     decodeN<4>();
     break;
   default:
     ThrowRDE("Unsupported number of components: %u", frame.cps);
   }
 }
 
 // N_COMP == number of components (2, 3 or 4)
@@ -95,50 +98,51 @@ template <int N_COMP>
 void LJpegDecompressor::decodeN()
 {
   assert(mRaw->getCpp() > 0);
   assert(N_COMP > 0);
   assert(N_COMP >= mRaw->getCpp());
   assert((N_COMP / mRaw->getCpp()) > 0);
 
   assert(mRaw->dim.x >= N_COMP);
+  assert((mRaw->getCpp() * (mRaw->dim.x - offX)) >= N_COMP);
 
   auto ht = getHuffmanTables<N_COMP>();
   auto pred = getInitialPredictors<N_COMP>();
   auto predNext = pred.data();
 
   BitPumpJPEG bitStream(input);
 
   for (unsigned y = 0; y < frame.h; ++y) {
     auto destY = offY + y;
     // A recoded DNG might be split up into tiles of self contained LJpeg
     // blobs. The tiles at the bottom and the right may extend beyond the
     // dimension of the raw image buffer. The excessive content has to be
     // ignored. For y, we can simply stop decoding when we reached the border.
     if (destY >= static_cast<unsigned>(mRaw->dim.y))
       break;
 
     auto dest =
         reinterpret_cast<ushort16*>(mRaw->getDataUncropped(offX, destY));
 
     copy_n(predNext, N_COMP, pred.data());
     // the predictor for the next line is the start of this line
     predNext = dest;
 
     unsigned width = min(frame.w,
                          (mRaw->dim.x - offX) / (N_COMP / mRaw->getCpp()));
 
     // For x, we first process all pixels within the image buffer ...
     for (unsigned x = 0; x < width; ++x) {
       unroll_loop<N_COMP>([&](int i) {
         *dest++ = pred[i] += ht[i]->decodeNext(bitStream);
       });
     }
     // ... and discard the rest.
     for (unsigned x = width; x < frame.w; ++x) {
       unroll_loop<N_COMP>([&](int i) {
         ht[i]->decodeNext(bitStream);
       });
     }
   }
 }
 
 } // namespace rawspeed
