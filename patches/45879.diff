commit af7ef37d6f0c61a79a8bd66f603273245198e069
Author: David Korczynski <david@adalogics.com>
Date:   Sat Mar 19 21:25:10 2022 +0000

    tests: internal: fuzzers: fix malloc denial
    
    Ensure all fuzzers set flb_malloc_p to 0 and decrease the chance of a
    malloc failing. We need to do this as otherwise the impact of denying
    malloc is too large.
    
    Signed-off-by: David Korczynski <david@adalogics.com>

diff --git a/include/fluent-bit/flb_mem.h b/include/fluent-bit/flb_mem.h
index f7cae99a4..4e31d61d8 100644
--- a/include/fluent-bit/flb_mem.h
+++ b/include/fluent-bit/flb_mem.h
@@ -54,10 +54,10 @@ int flb_malloc_p;
 
 static inline int flb_fuzz_get_probability(int val) {
   flb_malloc_p += 1;
-  flb_malloc_p = flb_malloc_p % 100;
+  flb_malloc_p = flb_malloc_p % 1000;
   if (val > flb_malloc_p) {
     return 1;
   }
   return 0;
 }
 #endif
diff --git a/tests/internal/fuzzers/config_fuzzer.c b/tests/internal/fuzzers/config_fuzzer.c
index 3b8353901..dbf02c1db 100644
--- a/tests/internal/fuzzers/config_fuzzer.c
+++ b/tests/internal/fuzzers/config_fuzzer.c
@@ -320,94 +320,95 @@ char conf_file[] = "# Parser: no_year\n"
 
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
+    flb_malloc_p = 0;
     /* Limit the size of the config files to 32KB. */
     if (size > 32768) {
         return 0;
     }
 
     /* Write the config file to a location we know OSS-Fuzz has */
     char filename[256];
     sprintf(filename, "/tmp/libfuzzer.%d", getpid());
     FILE *fp = fopen(filename, "wb");
     if (!fp) {
         return 0;
     }
     fwrite(conf_file, strlen(conf_file), 1, fp);
     fclose(fp);
 
 
     /* Now parse random data based on the config files */
     struct flb_config *config = NULL;
     config = flb_config_init();
     int ret = flb_parser_conf_file(filename, config);
     if (ret == 0) {
         struct mk_list *head = NULL;
         mk_list_foreach(head, &config->parsers) {
             size_t out_size;
             char *out_buf = NULL;
             struct flb_parser *parser = NULL;
             struct flb_time out_time;
             parser = mk_list_entry(head, struct flb_parser, _head);
             flb_parser_do(parser, (const char*)data, size, (void **)&out_buf,
                           &out_size, &out_time);
             if (out_buf != NULL) {
                 free(out_buf);
             }
         }
     }
     flb_parser_exit(config);
     flb_config_exit(config);
 
     if (size > 100) {
         /* Now let's do a second run where we also call flb_config_set_property */
         config = flb_config_init();
         ret = flb_parser_conf_file(filename, config);
         char *key_1 = get_null_terminated(15, &data, &size);
         char *val_1 = get_null_terminated(15, &data, &size);
         char *key_2 = get_null_terminated(15, &data, &size);
         char *val_2 = get_null_terminated(15, &data, &size);
         char *progname = get_null_terminated(15, &data, &size);
 
         flb_config_set_property(config, key_1, val_1);
         flb_config_set_property(config, key_2, val_2);
         flb_config_set_program_name(config, progname);
         set_log_level_from_env(config);
 
         struct mk_list prop;
         flb_kv_init(&prop);
         flb_kv_item_create(&prop, key_1, val_1);
         flb_config_prop_get(progname, &prop);
         flb_slist_entry_get(&prop, (int)data[0]);
         flb_slist_dump(&prop);
         
         if (ret == 0) {
             struct mk_list *head = NULL;
             mk_list_foreach(head, &config->parsers) {
                 size_t out_size;
                 char *out_buf = NULL;
                 struct flb_parser *parser = NULL;
                 struct flb_time out_time;
                 
                 parser = mk_list_entry(head, struct flb_parser, _head);
                 flb_parser_do(parser, (const char*)data, size, (void **)&out_buf,
                               &out_size, &out_time);
                 if (out_buf != NULL) {
                     free(out_buf);
                 }
             }
         }
         flb_parser_exit(config);
         flb_config_exit(config);
         flb_free(key_1);
         flb_free(val_1);
         flb_free(key_2);
         flb_free(val_2);
         flb_free(progname);
         flb_kv_release(&prop);
     }
 
     /* clean up the file */
     unlink(filename);
 
     return 0;
 }
diff --git a/tests/internal/fuzzers/config_map_fuzzer.c b/tests/internal/fuzzers/config_map_fuzzer.c
index 5db8d7d0f..1e5425c3e 100644
--- a/tests/internal/fuzzers/config_map_fuzzer.c
+++ b/tests/internal/fuzzers/config_map_fuzzer.c
@@ -155,40 +155,41 @@ struct flb_config_map *configs[] = {config_map_mult, config_map};
 
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
+    flb_malloc_p = 0;
     if (size < 40) {
         return 0;
     }
 
     struct context ctx;
     struct mk_list *map;
     struct mk_list prop;
     struct flb_config *config;
 
     char *null_terminated1 = get_null_terminated(15, &data, &size);
     char *null_terminated2 = get_null_terminated(15, &data, &size);
     char *null_terminated3 = get_null_terminated(size, &data, &size);
 
     for (int i = 0; i < 2; i++) {
         config = flb_config_init();
         if (!config) {
             return 0;
         }
         memset(&ctx, '\0', sizeof(struct context));
 
         flb_kv_init(&prop);
         flb_kv_item_create(&prop, null_terminated1, null_terminated2);
 
         /* Assign one of the config maps */
         map = flb_config_map_create(config, configs[i]);
         flb_config_map_set(&prop, map,&ctx);
         flb_config_map_properties_check(null_terminated3, &prop, map);
         flb_config_map_destroy(map);
         flb_kv_release(&prop);
         flb_config_exit(config);
     }
 
     flb_free(null_terminated1);
     flb_free(null_terminated2);
     flb_free(null_terminated3);
     return 0;
 }
diff --git a/tests/internal/fuzzers/config_random_fuzzer.c b/tests/internal/fuzzers/config_random_fuzzer.c
index df635b6bf..48c4aa677 100644
--- a/tests/internal/fuzzers/config_random_fuzzer.c
+++ b/tests/internal/fuzzers/config_random_fuzzer.c
@@ -24,30 +24,32 @@
 
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
+    flb_malloc_p = 0;
+
     /* Limit the size of the config files to 32KB. */
     if (size > 32768) {
         return 0;
     }
 
     /* Write the config file to a location we know OSS-Fuzz has */
     char filename[256];
     sprintf(filename, "/tmp/libfuzzer.%d", getpid());
     FILE *fp = fopen(filename, "wb");
     if (!fp) {
         return 0;
     }
     fwrite(data, size, 1, fp);
     fclose(fp);
 
     /* Now parse a random config file */
     struct flb_config *config = NULL;
     config = flb_config_init();
     flb_parser_conf_file(filename, config);
     flb_parser_exit(config);
     flb_config_exit(config);
 
     /* Cleanup written config file */
     unlink(filename);
 
     return 0;
 }
diff --git a/tests/internal/fuzzers/engine_fuzzer.c b/tests/internal/fuzzers/engine_fuzzer.c
index 9c16072b7..ea286d564 100644
--- a/tests/internal/fuzzers/engine_fuzzer.c
+++ b/tests/internal/fuzzers/engine_fuzzer.c
@@ -121,44 +121,44 @@ struct flb_lib_out_cb cb;
 
 
 int LLVMFuzzerInitialize(int *argc, char ***argv) {
-
+    flb_malloc_p = 0;
     ctx = flb_create();
     flb_service_set(ctx, "Flush", "0", "Grace", 
                     "0", "Log_Level", "debug", NULL);
 
     in_ffd = flb_input(ctx, (char *) "lib", NULL);
     flb_input_set(ctx, in_ffd, (char *) "test", NULL);
     flb_input_set(ctx, in_ffd, (char *) "BBBB", NULL);
     flb_input_set(ctx, in_ffd, (char *) "AAAA", NULL);
     flb_input_set(ctx, in_ffd, (char *) "AAAAA", NULL);
     flb_input_set(ctx, in_ffd, (char *) "CC", NULL);
     flb_input_set(ctx, in_ffd, (char *) "A", NULL);
 
     parser = flb_parser_create("timestamp", "regex", "^(?<time>.*)$", FLB_TRUE,
                                 "%s.%L", "time", NULL, MK_FALSE, 0,
                                NULL, 0, NULL, ctx->config);
     filter_ffd = flb_filter(ctx, (char *) "parser", NULL);
     int ret;
     ret = flb_filter_set(ctx, filter_ffd, "Match", "test",
                          "Key_Name", "@timestamp",
                          "Parser", "timestamp",
                          "Reserve_Data", "On",
                          NULL);
 
     cb.cb   = callback_test;
     cb.data = NULL;
     out_ffd = flb_output(ctx, (char *) "lib", &cb);
     flb_output_set(ctx, out_ffd, "Match", "*",
                    "format", "json", NULL);
 
     flb_output_set(ctx, out_ffd,"match", "test", NULL);
     flb_output_set(ctx, out_ffd,"region", "us-west-2", NULL);
     flb_output_set(ctx, out_ffd,"log_group_name", "fluent", NULL);
     flb_output_set(ctx, out_ffd,"log_stream_prefix", "from-fluent-", NULL);
     flb_output_set(ctx, out_ffd,"auto_create_group", "On", NULL);
     flb_output_set(ctx, out_ffd,"net.keepalive", "Off", NULL);
     flb_output_set(ctx, out_ffd,"Retry_Limit", "1", NULL);
 
     /* start the engine */
     flb_start(ctx);
 }
diff --git a/tests/internal/fuzzers/filter_stdout_fuzzer.c b/tests/internal/fuzzers/filter_stdout_fuzzer.c
index a882e52dd..bd526b32f 100644
--- a/tests/internal/fuzzers/filter_stdout_fuzzer.c
+++ b/tests/internal/fuzzers/filter_stdout_fuzzer.c
@@ -24,34 +24,34 @@
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
     int ret;
     flb_ctx_t *ctx;
     int in_ffd;
     int out_ffd;
-
+    flb_malloc_p = 0;
     ctx = flb_create();
     flb_service_set(ctx, "Flush", "1", "Grace", "1", "Log_Level", "error", NULL);
     in_ffd = flb_input(ctx, (char *) "lib", NULL);
     if (in_ffd >= 0) {
         flb_input_set(ctx, in_ffd, "tag", "test", NULL);
 
         out_ffd = flb_output(ctx, (char *) "stdout", NULL);
         if (out_ffd >= 0) {
             flb_output_set(ctx, out_ffd, "match", "test", NULL);
 
             ret = flb_start(ctx);
             if (ret == 0) {
                 char *p = get_null_terminated(size, &data, &size);
                 for (int i = 0; i < strlen(p); i++) {
                     flb_lib_push(ctx, in_ffd, p+i, 1);
                 }
                 free(p);
 
                 sleep(1); /* waiting flush */
             }
         }
     }
     flb_stop(ctx);
     flb_destroy(ctx);
 
     return 0;
 }
diff --git a/tests/internal/fuzzers/flb_json_fuzzer.c b/tests/internal/fuzzers/flb_json_fuzzer.c
index 597b2dfdb..d560e9087 100644
--- a/tests/internal/fuzzers/flb_json_fuzzer.c
+++ b/tests/internal/fuzzers/flb_json_fuzzer.c
@@ -24,56 +24,56 @@
 int LLVMFuzzerTestOneInput(unsigned char *data, size_t size)
 {
     TIMEOUT_GUARD
-
+    flb_malloc_p = 0;
     if (size < 1) {
         return 0;
     }
     unsigned char decider = *data;
     data++;
     size--;
 
     /* json packer */
     char *out_buf = NULL;
     size_t out_size;
     int root_type;
     int ret = flb_pack_json((char*)data, size, &out_buf, &out_size, &root_type);
 
     if (ret == 0) {
         size_t off = 0;
         msgpack_unpacked result;
         msgpack_unpacked_init(&result);
         int ret2 = msgpack_unpack_next(&result, out_buf, out_size, &off);
         if (ret2 == MSGPACK_UNPACK_SUCCESS) {
             msgpack_object root = result.data;
             char *tmp = NULL;
             tmp = flb_msgpack_to_json_str(0, &root);
             if (tmp != NULL) {
                 flb_free(tmp);
             }
         }
         msgpack_unpacked_destroy(&result);
         flb_sds_t d;
         d = flb_sds_create("date");
         if (decider < 0x30) {
             flb_sds_t ret_s = flb_pack_msgpack_to_json_format(out_buf, out_size,
                     FLB_PACK_JSON_FORMAT_LINES,
                     (int)decider, d);
             free(out_buf);
             if (ret_s != NULL) {
                 flb_sds_destroy(ret_s);
             }
         }
         else {
             flb_sds_t ret_s = flb_pack_msgpack_to_json_format(out_buf, out_size,
                     FLB_PACK_JSON_FORMAT_LINES,
                     FLB_PACK_JSON_DATE_EPOCH, NULL);
             free(out_buf);
             if (ret_s != NULL) {
                 flb_sds_destroy(ret_s);
             }
         }
         flb_sds_destroy(d);
     }
 
     return 0;
 }
diff --git a/tests/internal/fuzzers/http_fuzzer.c b/tests/internal/fuzzers/http_fuzzer.c
index ca056ddf9..c331d4111 100644
--- a/tests/internal/fuzzers/http_fuzzer.c
+++ b/tests/internal/fuzzers/http_fuzzer.c
@@ -14,91 +14,92 @@ extern int fuzz_check_connection(struct flb_http_client *c);
 
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
+    flb_malloc_p = 0;
     struct flb_upstream *u;
     struct flb_upstream_conn *u_conn = NULL;
     struct flb_http_client *c;
     struct flb_config *config;
     char *uri = NULL;
 
     if (size < 160) {
         return 0;
     }
 
     config = flb_config_init();
     if (config == NULL) {
         return 0;
     }
 
     u = flb_upstream_create(config, "127.0.0.1", 8001, 0, NULL);
     u_conn = flb_malloc(sizeof(struct flb_upstream_conn));
     if (u_conn == NULL)
         return 0;
     u_conn->u = u;
 
     char *proxy = NULL;
     if (GET_MOD_EQ(2,1)) {
         proxy = get_null_terminated(50, &data, &size);
     }
 
     uri = get_null_terminated(20, &data, &size);
 
     int method = (int)data[0];
     c = flb_http_client(u_conn, method, uri, NULL, 0,
                     "127.0.0.1", 8001, proxy, 0);
     if (c != NULL) {
         char *null_terminated = get_null_terminated(30, &data, &size);
 
         /* Perform a set of operations on the http_client */
         flb_http_basic_auth(c, null_terminated, null_terminated);
         flb_http_set_content_encoding_gzip(c);
         flb_http_set_keepalive(c);
         flb_http_strip_port_from_host(c);
         flb_http_allow_duplicated_headers(c, 0);
 
         flb_http_buffer_size(c, (*(size_t *)data) & 0xfff);
         MOVE_INPUT(4)
         flb_http_add_header(c, "User-Agent", 10, "Fluent-Bit", 10);
         flb_http_add_header(c, (char*)data, size, "Fluent-Bit", 10);
         flb_http_buffer_size(c, (int)data[0]);
         MOVE_INPUT(1)
         flb_http_buffer_available(c);
 
         size_t b_sent;
         flb_http_do(c, &b_sent);
 
         size_t out_size = 0;
         flb_http_buffer_increase(c, (*(size_t *)data) & 0xfff, &out_size);
         MOVE_INPUT(4)
 
         /* Now we need to simulate the reading of data */
         c->resp.status = 200;
 
         if (c->resp.data != NULL) {
            flb_free(c->resp.data);
         }
 
         char *new_nulltm = get_null_terminated(30, &data, &size);
         c->resp.data_len = 30;
         c->resp.data = new_nulltm;
         fuzz_process_data(c);
         fuzz_check_connection(c);
 
         flb_http_client_destroy(c);
         flb_free(null_terminated);
     }
 
     /* Now try the http_client_proxy_connect function. */
     flb_http_client_proxy_connect(u_conn);
 
     flb_free(u_conn);
     flb_upstream_destroy(u);
     flb_config_exit(config);
     if (uri != NULL) {
         flb_free(uri);
     }
     if (proxy != NULL) {
         flb_free(proxy);
     }
 
     return 0;
 }
diff --git a/tests/internal/fuzzers/msgpack_parse_fuzzer.c b/tests/internal/fuzzers/msgpack_parse_fuzzer.c
index b43f70e79..86e14e648 100644
--- a/tests/internal/fuzzers/msgpack_parse_fuzzer.c
+++ b/tests/internal/fuzzers/msgpack_parse_fuzzer.c
@@ -4,13 +4,14 @@
 #include <fluent-bit/flb_pack.h>
 
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size){
+    flb_malloc_p = 0;
     if (size != 512)
         return 0;
 
     /* target the conversion of raw msgpack to json */
     flb_sds_t record;
     record = flb_msgpack_raw_to_json_sds(data, size);
     flb_sds_destroy(record);
 
     return 0;
 }
diff --git a/tests/internal/fuzzers/msgpack_to_gelf_fuzzer.c b/tests/internal/fuzzers/msgpack_to_gelf_fuzzer.c
index a5158c93c..e99ad14e5 100644
--- a/tests/internal/fuzzers/msgpack_to_gelf_fuzzer.c
+++ b/tests/internal/fuzzers/msgpack_to_gelf_fuzzer.c
@@ -4,19 +4,20 @@
 #include <fluent-bit/flb_pack.h>
 
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size){
+    flb_malloc_p = 0;
     if (size != 512)
         return 0;
 
     /* Target the conversion of raw msgpack to gelf */
     flb_sds_t record;
     struct flb_time tm = {0};
     struct flb_gelf_fields fields = {0};
     fields.short_message_key = flb_sds_create("AAAAAAAAAA");
     record = flb_msgpack_raw_to_gelf((char*)data, size, &tm, &fields);
 
     /* cleanup */
     flb_sds_destroy(record);
     flb_sds_destroy(fields.short_message_key);
 
     return 0;
 }
diff --git a/tests/internal/fuzzers/multiline_fuzzer.c b/tests/internal/fuzzers/multiline_fuzzer.c
index 643ac1cd8..090364899 100644
--- a/tests/internal/fuzzers/multiline_fuzzer.c
+++ b/tests/internal/fuzzers/multiline_fuzzer.c
@@ -132,50 +132,50 @@ void test_multiline_parser(msgpack_object *root2, int rand_val) {
 
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
     TIMEOUT_GUARD
-
+    flb_malloc_p = 0;
     /* Ensure there's enough data */
     if (size < 250) {
         return 0;
     }
 
     int rand_val = *(int *)data;
     data += 4;
     size -= 4;
     for (int i = 0; i < 4; i++) {
         random_strings[i] = NULL;
     }
 
     random_strings[0] = get_null_terminated(40, &data, &size);
     random_strings[1] = get_null_terminated(40, &data, &size);
     random_strings[2] = get_null_terminated(40, &data, &size);
     random_strings[3] = get_null_terminated(40, &data, &size);
 
     char *out_buf = NULL;
     size_t out_size;
     int root_type;
     int ret =
         flb_pack_json((char *)data, size, &out_buf, &out_size, &root_type);
     if (ret == 0) {
         size_t off = 0;
         msgpack_unpacked result;
         msgpack_unpacked_init(&result);
         int ret2 = msgpack_unpack_next(&result, out_buf, out_size, &off);
         if (ret2 == MSGPACK_UNPACK_SUCCESS) {
             msgpack_object root = result.data;
 
             /* Pass fuzz data into the multiline parser code */
             test_multiline_parser(&root, rand_val);
         }
         msgpack_unpacked_destroy(&result);
         free(out_buf);
     } else {
         test_multiline_parser(NULL, rand_val);
     }
 
     for (int i = 0; i < 4; i++) {
         if (random_strings[i] != NULL) {
             free(random_strings[i]);
         }
     }
     return 0;
 }
diff --git a/tests/internal/fuzzers/pack_json_state_fuzzer.c b/tests/internal/fuzzers/pack_json_state_fuzzer.c
index b834e72bf..1df7bb8e8 100644
--- a/tests/internal/fuzzers/pack_json_state_fuzzer.c
+++ b/tests/internal/fuzzers/pack_json_state_fuzzer.c
@@ -5,14 +5,15 @@
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size){
     int out_size= 0;
     char *out_buf = NULL;
     struct flb_pack_state state;
+    flb_malloc_p = 0;
 
     /* Target json packer */
     flb_pack_state_init(&state);
     flb_pack_json_state(data, size, &out_buf, &out_size, &state);
     flb_pack_state_reset(&state);
     if (out_buf != NULL)
         flb_free(out_buf);
 
     return 0;
 }
diff --git a/tests/internal/fuzzers/parse_json_fuzzer.c b/tests/internal/fuzzers/parse_json_fuzzer.c
index a0b9ffb58..2aac37bd4 100644
--- a/tests/internal/fuzzers/parse_json_fuzzer.c
+++ b/tests/internal/fuzzers/parse_json_fuzzer.c
@@ -24,27 +24,27 @@
 
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size){
     TIMEOUT_GUARD
-
     void *out_buf = NULL;
     size_t out_size = 0;
     struct flb_time out_time;
     struct flb_config *fuzz_config;
     struct flb_parser *fuzz_parser;
+    flb_malloc_p = 0;
 
     /* json parser */
     fuzz_config = flb_config_init();
     fuzz_parser = flb_parser_create("fuzzer", "json", NULL, FLB_TRUE, NULL,
                                     NULL, NULL, MK_FALSE, MK_TRUE,
                                     NULL, 0, NULL, fuzz_config);
     flb_parser_do(fuzz_parser, (char*)data, size, 
                   &out_buf, &out_size, &out_time);
 
     if (out_buf != NULL) {
         free(out_buf);
     }
 
     flb_parser_destroy(fuzz_parser);
     flb_config_exit(fuzz_config);
 
     return 0;
 }
diff --git a/tests/internal/fuzzers/parse_logfmt_fuzzer.c b/tests/internal/fuzzers/parse_logfmt_fuzzer.c
index ee0eaf417..2a2218cab 100644
--- a/tests/internal/fuzzers/parse_logfmt_fuzzer.c
+++ b/tests/internal/fuzzers/parse_logfmt_fuzzer.c
@@ -7,24 +7,26 @@
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size){
     void *out_buf = NULL;
     size_t out_size = 0;
     struct flb_time out_time;
     struct flb_config *fuzz_config;
     struct flb_parser *fuzz_parser;
 
+    flb_malloc_p = 0;
+
     /* logfmt parser */
     fuzz_config = flb_config_init();
     fuzz_parser = flb_parser_create("fuzzer", "logfmt", NULL, FLB_TRUE,
                                     NULL, NULL, NULL, MK_FALSE,
                                     MK_TRUE, NULL, 0, NULL, fuzz_config);
     flb_parser_do(fuzz_parser, (char*)data, size,
                   &out_buf, &out_size, &out_time);
 
     if (out_buf != NULL) {
         free(out_buf);
     }
 
     flb_parser_destroy(fuzz_parser);
     flb_config_exit(fuzz_config);
 
     return 0;
 }
diff --git a/tests/internal/fuzzers/parse_ltsv_fuzzer.c b/tests/internal/fuzzers/parse_ltsv_fuzzer.c
index e1fe581a8..b9eb754bb 100644
--- a/tests/internal/fuzzers/parse_ltsv_fuzzer.c
+++ b/tests/internal/fuzzers/parse_ltsv_fuzzer.c
@@ -7,25 +7,27 @@
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size){
     void *out_buf = NULL;
     size_t out_size = 0;
     struct flb_time out_time;
     struct flb_config *fuzz_config;
     struct flb_parser *fuzz_parser;
 
+    flb_malloc_p = 0;
+
     /* ltsvc parser */
     fuzz_config = flb_config_init();
     fuzz_parser = flb_parser_create("fuzzer", "ltsv", NULL, FLB_TRUE,
                                     NULL, NULL, NULL, MK_FALSE, 
                                     MK_TRUE, NULL, 0, NULL,
                                     fuzz_config);
     flb_parser_do(fuzz_parser, (char*)data, size,
                   &out_buf, &out_size, &out_time);
 
     if (out_buf != NULL) {
         free(out_buf);
     }
 
     flb_parser_destroy(fuzz_parser);
     flb_config_exit(fuzz_config);
 
     return 0;
 }
diff --git a/tests/internal/fuzzers/parser_fuzzer.c b/tests/internal/fuzzers/parser_fuzzer.c
index c33329639..8216bb59b 100644
--- a/tests/internal/fuzzers/parser_fuzzer.c
+++ b/tests/internal/fuzzers/parser_fuzzer.c
@@ -30,170 +30,172 @@
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
     TIMEOUT_GUARD
 
     char *format      = NULL;
     char *time_fmt    = NULL;
     char *time_key    = NULL;
     char *time_offset = NULL;
     char *pregex      = NULL;
     struct flb_parser_types *types = NULL;
     struct flb_config *fuzz_config = NULL;
     struct flb_parser *fuzz_parser = NULL;
     int time_keep = 0;
     int types_len = 0;
 
+    flb_malloc_p = 0;
+
     if (size < 100) {
         return 0;
     }
 
     /* json parser */
     fuzz_config = flb_config_init();
 
     /* format + pregex */
     if (GET_MOD_EQ(4,0)) {
         format = "json";
     }
     else if (GET_MOD_EQ(4,1)) {
         format = "regex";
 #ifdef PREG_FUZZ
         pregex = malloc(30);
         pregex[29] = '\0';
         memcpy(pregex, data, 29);
         data += 29;
         size -= 29;
 #else
         pregex = "^(?<INT>[^ ]+) (?<FLOAT>[^ ]+) (?<BOOL>[^ ]+) (?<STRING>.+)$";
 #endif
     }
     else if (GET_MOD_EQ(4,2)) {
         format = "ltsv";
     }
     else {
         format = "logfmt";
     }
     MOVE_INPUT(1);
 
     /* time_fmt */
     if (GET_MOD_EQ(2,1)) {
         time_fmt = get_null_terminated(15, &data, &size);
     }
     MOVE_INPUT(1);
 
     /* time_key */
     if (GET_MOD_EQ(2,1)) {
         time_key = get_null_terminated(15, &data, &size);
     }
     MOVE_INPUT(1);
 
     /* time_offset */
     if (GET_MOD_EQ(2,1)) {
         time_offset = get_null_terminated(15, &data, &size);
     }
     MOVE_INPUT(1);
 
     /* time_keep */
     time_keep = (GET_MOD_EQ(2,1)) ? MK_TRUE : MK_FALSE;
     MOVE_INPUT(1);
 
     /* types_str */
     if (GET_MOD_EQ(2,1)) {
         types =  flb_malloc(sizeof(struct flb_parser_types) * TYPES_LEN);
         char *parser_type_keys[5] = {"AAA", "BBB", "CCC", "DDD", "EEE" };
         int parser_types[5] = {FLB_PARSER_TYPE_INT, FLB_PARSER_TYPE_FLOAT,
                                FLB_PARSER_TYPE_BOOL, FLB_PARSER_TYPE_STRING,
                                FLB_PARSER_TYPE_HEX};
         for (int i = 0; i < TYPES_LEN; i++) {
             types[i].key     = strdup(parser_type_keys[i]);
             types[i].key_len = strlen(parser_type_keys[i]);
             types[i].type    = parser_types[i];
         }
         types_len = TYPES_LEN;
     }
     MOVE_INPUT(1);
 
     /* decoders */
     struct mk_list *list = NULL;
     if (GET_MOD_EQ(2,1)) {
         MOVE_INPUT(1);
         list = flb_malloc(sizeof(struct mk_list));
         mk_list_init(list);
 
         struct flb_parser_dec *dec = malloc(sizeof(struct flb_parser_dec));
         dec->key            = flb_sds_create_len("AAA", 3);
         dec->buffer         = flb_sds_create_size(FLB_PARSER_DEC_BUF_SIZE);
         dec->add_extra_keys = FLB_TRUE;
         mk_list_init(&dec->rules);
         mk_list_add(&dec->_head, list);
 
         struct flb_parser_dec_rule *dec_rule = malloc(sizeof(struct flb_parser_dec_rule));
         dec_rule->type = (int)(data[0] % 0x02);
         MOVE_INPUT(1);
         dec_rule->backend = (int)(data[0] % 0x04);
         MOVE_INPUT(1);
         dec_rule->action = (int)data[0] % 0x03;
         mk_list_add(&dec_rule->_head, &dec->rules);
 
         if (GET_MOD_EQ(2,1)) {
             struct flb_parser_dec_rule *dec_rule2 = malloc(sizeof(struct flb_parser_dec_rule));
             dec_rule2->type = (int)(data[0] % 0x02);
             MOVE_INPUT(1);
             dec_rule2->backend = (int)(data[0] % 0x04);
             MOVE_INPUT(1);
             dec_rule->action = (int)data[0] % 0x03;
             mk_list_add(&dec_rule2->_head, &dec->rules);
         }
     }
     MOVE_INPUT(1);
     /* print our config struct */
     flb_utils_print_setup(fuzz_config);
 
     /* now call into the parser */
     fuzz_parser = flb_parser_create("fuzzer", format, pregex, FLB_TRUE,
             time_fmt, time_key, time_offset, time_keep, 0,
             types, types_len, list, fuzz_config);
 
     /* Second step is to use the random parser to parse random input */
     if (fuzz_parser != NULL) {
         void *out_buf = NULL;
         size_t out_size = 0;
         struct flb_time out_time;
         flb_parser_do(fuzz_parser, (char*)data, size,
                       &out_buf, &out_size, &out_time);
         if (out_buf != NULL) {
             free(out_buf);
         }
         flb_parser_destroy(fuzz_parser);
     }
     else {
         /* Parser creation failed but we still need to clean
          * up types and decoders */
         if (types != NULL) {
             for (int i=0; i< TYPES_LEN; i++){
                 flb_free(types[i].key);
             }
             flb_free(types);
         }
         if (list != NULL) {
             flb_parser_decoder_list_destroy(list);
         }
     }
 
     /* Cleanup everything but the parser */
     flb_config_exit(fuzz_config);
     if (time_fmt != NULL) {
       flb_free(time_fmt);
     }
     if (time_key != NULL) {
         flb_free(time_key);
     }
     if (time_offset != NULL) {
         flb_free(time_offset);
     }
 #ifdef PREG_FUZZ
     if (pregex != NULL) {
         flb_free(pregex);
     }
 #endif
 
     return 0;
 }
diff --git a/tests/internal/fuzzers/record_ac_fuzzer.c b/tests/internal/fuzzers/record_ac_fuzzer.c
index 48616e206..9ba3bce81 100644
--- a/tests/internal/fuzzers/record_ac_fuzzer.c
+++ b/tests/internal/fuzzers/record_ac_fuzzer.c
@@ -11,76 +11,78 @@
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
     /* Limit size to 32KB */
     if (size > 32768) {
         return 0;
     }
 
     char *outbuf = NULL;
     size_t outsize;
     int type;
     int len;
     size_t off = 0;
     msgpack_object map;
 
+    flb_malloc_p = 0;
+
     if (size < 100) {
        return 0;
     }
 
     struct flb_record_accessor *ra = NULL;
     
     /* Sample JSON message */
     len = 60;
     char *json_raw = get_null_terminated(len, &data, &size);
 
     /* Convert to msgpack */
     int ret = flb_pack_json(json_raw, len, &outbuf, &outsize, &type);
     if (ret == -1) {
         flb_free(json_raw);
         return 0;
     }
     flb_free(json_raw);
 
     char *null_terminated = get_null_terminated(size, &data, &size);
 
     char *ra_str = flb_sds_create(null_terminated);
     ra = flb_ra_create(ra_str, FLB_FALSE);
     if (!ra) {
         flb_sds_destroy(ra_str);
         flb_free(null_terminated);
         flb_free(outbuf);
         return 0;
     }
 
     flb_ra_is_static(ra);
 
     msgpack_unpacked result;
     msgpack_unpacked_init(&result);
     msgpack_unpack_next(&result, outbuf, outsize, &off);
     map = result.data;
 
     flb_sds_t str = flb_ra_translate(ra, NULL, -1, map, NULL);
     if (!str) {
         flb_ra_destroy(ra);
         flb_sds_destroy(ra_str);
         msgpack_unpacked_destroy(&result);
 
         /* General cleanup */
         flb_free(null_terminated);
         flb_free(outbuf);
         return 0;
     }
     flb_ra_dump(ra);
 
     if (outbuf != NULL) {
         flb_free(outbuf);
     }
 
     flb_sds_destroy(str);
     flb_ra_destroy(ra);
     flb_sds_destroy(ra_str);
     msgpack_unpacked_destroy(&result);
 
     /* General cleanup */
     flb_free(null_terminated);
     return 0;
 }
diff --git a/tests/internal/fuzzers/signv4_fuzzer.c b/tests/internal/fuzzers/signv4_fuzzer.c
index cba5e96e7..e5089e663 100644
--- a/tests/internal/fuzzers/signv4_fuzzer.c
+++ b/tests/internal/fuzzers/signv4_fuzzer.c
@@ -16,84 +16,86 @@
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
     if (size < 55) { 
         return 0;
     }
 
+    flb_malloc_p = 0;
+
     char s3_mode = data[0];
     MOVE_INPUT(1)
     int method = (int)data[0];
 
     /* Prepare a general null-terminated string */
     char *uri             = get_null_terminated(50, &data, &size);
     char *null_terminated = get_null_terminated(size, &data, &size);
 
     /* Now begin the core work of the fuzzer */
     struct flb_config *config;
     struct mk_list *tests;
     struct flb_aws_provider *provider;
     config = flb_calloc(1, sizeof(struct flb_config));
     if (!config) {
         flb_free(uri);
         flb_free(null_terminated);
         return 0;
     }
     mk_list_init(&config->upstreams);
     provider = flb_aws_env_provider_create();
 
     /* Create the necessary http context */
     struct flb_upstream *http_u;
     struct flb_upstream_conn *http_u_conn = NULL;
     struct flb_http_client *http_c;
     struct flb_config *http_config;
 
     http_config = flb_config_init();
     if (http_config == NULL) {
         flb_aws_provider_destroy(provider);
         flb_free(uri);
         flb_free(null_terminated);
         flb_free(config);
         return 0;
     }
 
     http_u = flb_upstream_create(http_config, "127.0.0.1", 8001, 0, NULL);
     http_u_conn = flb_malloc(sizeof(struct flb_upstream_conn));
     if (http_u_conn == NULL) {
         flb_free(config);
         return 0;
     }
     http_u_conn->u = http_u;
 
     http_c = flb_http_client(http_u_conn, method, uri, 
                  null_terminated, size, "127.0.0.1", 8001, NULL, 0);
 
     /* Call into the main target flb_signv4_do*/
     time_t t = 1440938160;
     char *region = "us-east-1";
     char *access_key = "AKIDEXAMPLE";
     char *service = "service";
     char *secret_key = "wJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY";	
     int ret = setenv(AWS_ACCESS_KEY_ID, access_key, 1);
     if (ret >= 0) {
         ret = setenv(AWS_SECRET_ACCESS_KEY, secret_key, 1);
         if (ret >= 0) {
             flb_sds_t signature = flb_signv4_do(http_c, FLB_TRUE, FLB_FALSE, t,
                         region, service, s3_mode, provider);
             if (signature) {
               flb_sds_destroy(signature);
             }
         }
     }
 
     /* Cleanup */
     flb_http_client_destroy(http_c);
     flb_upstream_destroy(http_u);
     flb_config_exit(http_config);
     flb_aws_provider_destroy(provider);
     flb_free(config);
 
     flb_free(null_terminated);
     flb_free(http_u_conn);
     flb_free(uri);
 
     return 0;
 }
diff --git a/tests/internal/fuzzers/strp_fuzzer.c b/tests/internal/fuzzers/strp_fuzzer.c
index a23ef679d..69596255e 100644
--- a/tests/internal/fuzzers/strp_fuzzer.c
+++ b/tests/internal/fuzzers/strp_fuzzer.c
@@ -16,16 +16,18 @@
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
     if (size < 40) {
         return 0;
     }
 
+    flb_malloc_p = 0;
+
     char *fmt = get_null_terminated(size - 30, &data, &size);
     char *buf = get_null_terminated(size, &data, &size);
 
     struct tm tt;
     flb_strptime(buf, fmt, &tt);
 
     flb_free(buf);
     flb_free(fmt);
     return 0;
 }
