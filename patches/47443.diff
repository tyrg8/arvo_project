commit 05f55eeb219ff43373eebe904819c55276b3e393
Author: Patrick Soquet <ps@moddable.tech>
Date:   Mon Jun 6 08:46:09 2022 +0200

    XS: clusterfuzz 2

diff --git a/xs/sources/xsLexical.c b/xs/sources/xsLexical.c
index a6a587b54..172bd3f6b 100644
--- a/xs/sources/xsLexical.c
+++ b/xs/sources/xsLexical.c
@@ -861,550 +861,548 @@ void fxGetNextToken2(txParser* parser)
 void fxGetNextTokenAux(txParser* parser)
 {
 	int c;
 	txString p;
 	txString q;
 	txU4 t = 0;
 	parser->crlf2 = 0;
 	parser->escaped2 = 0;
 	parser->bigint2.data = C_NULL;
 	parser->bigint2.size = 0;
 	parser->bigint2.sign = 0;
 	parser->integer2 = 0;
 	parser->modifierLength2 = 0;
 	parser->modifier2 = parser->emptyString;
 	parser->number2 = 0;
 	parser->rawLength2 = 0;
 	parser->raw2 = parser->emptyString;
 	parser->stringLength2 = 0;
 	parser->string2 = parser->emptyString;
 	parser->symbol2 = C_NULL;
 	parser->token2 = XS_NO_TOKEN;
 	while (parser->token2 == XS_NO_TOKEN) {
 		switch (parser->character) {
 		case C_EOF:
 			parser->token2 = XS_TOKEN_EOF;
 			break;
 		case 10:	
 		case 0x2028: // <LS>
 		case 0x2029: // <PS>	
 			parser->line2++;
 			fxGetNextCharacter(parser);
 			parser->crlf2 = 1;
 			break;
 		case 13:	
 			parser->line2++;
 			fxGetNextCharacter(parser);
 			if (parser->character == 10)
 				fxGetNextCharacter(parser);
 			parser->crlf2 = 1;
 			break;
 			
 		case '\t':
 		case 11:
 		case 12:
  		case ' ':
 		case 0x00A0:
 		case 0x1680:
 		case 0x2000:
 		case 0x2001:
 		case 0x2002:
 		case 0x2003:
 		case 0x2004:
 		case 0x2005:
 		case 0x2006:
 		case 0x2007:
 		case 0x2008:
 		case 0x2009:
 		case 0x200A:
 		case 0x202F:
 		case 0x205F:
 		case 0x3000:
 		case 0xFEFF:
 			fxGetNextCharacter(parser);
 			break;
 			
 		case '0':
 			fxGetNextCharacter(parser);
 			c = parser->character;
 			if (c == '.') {
 				fxGetNextCharacter(parser);
 				c = parser->character;
 				if ((('0' <= c) && (c <= '9')) || (c == 'e') || (c == 'E'))
 					fxGetNextNumberE(parser, 1);
 				else {
 					parser->number2 = 0;
 					parser->token2 = XS_TOKEN_NUMBER;
 				}
 			}
 			else if ((c == 'b') || (c == 'B')) {
 				fxGetNextNumberB(parser);
 			}
             else if ((c == 'e') || (c == 'E')) {
                 fxGetNextNumberE(parser, 0);
             }
             else if (c == 'n') {
                 fxGetNextNumberE(parser, 0);
             }
 			else if ((c == 'o') || (c == 'O')) {
 				fxGetNextNumberO(parser, '0', 0);
 			}
 			else if ((c == 'x') || (c == 'X')) {
 				fxGetNextNumberX(parser);
 			}
 			else if (('0' <= c) && (c <= '9')) {
 				if ((parser->flags & mxStrictFlag))
 					fxReportParserError(parser, parser->line, "octal number (strict mode)");			
 				fxGetNextNumberO(parser, c, 1);
 			}
 			else {
 				parser->integer2 = 0;
 				parser->token2 = XS_TOKEN_INTEGER;
 			}
 			break;
 		case '1':
 		case '2':
 		case '3':
 		case '4':
 		case '5':
 		case '6':
 		case '7':
 		case '8':
 		case '9':
 			fxGetNextNumberE(parser, 0);
 			break;
 		case '.':
 			fxGetNextCharacter(parser);
 			c = parser->character;
 			if (c == '.') {	
 				fxGetNextCharacter(parser);
 				if (parser->character == '.') {	
 					parser->token2 = XS_TOKEN_SPREAD;
 					fxGetNextCharacter(parser);
 				}
 				else {
 					fxReportParserError(parser, parser->line, "invalid character %d", parser->character);
 				}		
 			}		
 			else if (('0' <= c) && (c <= '9'))
 				fxGetNextNumberE(parser, 1);
 			else
 				parser->token2 = XS_TOKEN_DOT;
 			break;	
 		case ',':
 			parser->token2 = XS_TOKEN_COMMA;
 			fxGetNextCharacter(parser);
 			break;	
 		case ';':
 			parser->token2 = XS_TOKEN_SEMICOLON;
 			fxGetNextCharacter(parser);
 			break;	
 		case ':':
 			parser->token2 = XS_TOKEN_COLON;
 			fxGetNextCharacter(parser);
 			break;	
 		case '?':
 			fxGetNextCharacter(parser);
 			if (parser->character == '.') {	
 				if ((parser->lookahead < '0') || ('9' < parser->lookahead)) {
 					parser->token2 = XS_TOKEN_CHAIN;
 					fxGetNextCharacter(parser);
 				}
 				else
 					parser->token2 = XS_TOKEN_QUESTION_MARK;
 			}
 			else if (parser->character == '?') {		
 				parser->token2 = XS_TOKEN_COALESCE;
 				fxGetNextCharacter(parser);
 				if (parser->character == '=') {	
 					parser->token2 = XS_TOKEN_COALESCE_ASSIGN;
 					fxGetNextCharacter(parser);
 				}
 			}
 			else	
 				parser->token2 = XS_TOKEN_QUESTION_MARK;
 			break;	
 		case '(':
 			parser->token2 = XS_TOKEN_LEFT_PARENTHESIS;
 			fxGetNextCharacter(parser);
 			break;	
 		case ')':
 			parser->token2 = XS_TOKEN_RIGHT_PARENTHESIS;
 			fxGetNextCharacter(parser);
 			break;	
 		case '[':
 			parser->token2 = XS_TOKEN_LEFT_BRACKET;
 			fxGetNextCharacter(parser);
 			break;	
 		case ']':
 			parser->token2 = XS_TOKEN_RIGHT_BRACKET;
 			fxGetNextCharacter(parser);
 			break;	
 		case '{':
 			parser->token2 = XS_TOKEN_LEFT_BRACE;
 			fxGetNextCharacter(parser);
 			break;	
 		case '}':
 			parser->token2 = XS_TOKEN_RIGHT_BRACE;
 			fxGetNextCharacter(parser);
 			break;	
 		case '=':
 			fxGetNextCharacter(parser);
 			if (parser->character == '=') {			
 				fxGetNextCharacter(parser);
 				if (parser->character == '=') {
 					parser->token2 = XS_TOKEN_STRICT_EQUAL;
 					fxGetNextCharacter(parser);
 				}
 				else
 					parser->token2 = XS_TOKEN_EQUAL;
 			}
 			else if (parser->character == '>') {	
 				parser->token2 = XS_TOKEN_ARROW;
 				fxGetNextCharacter(parser);
 			}
 			else	
 				parser->token2 = XS_TOKEN_ASSIGN;
 			break;
 		case '<':
 			fxGetNextCharacter(parser);
 			if (parser->character == '<') {
 				fxGetNextCharacter(parser);
 				if (parser->character == '=') {
 					parser->token2 = XS_TOKEN_LEFT_SHIFT_ASSIGN;
 					fxGetNextCharacter(parser);
 				}
 				else
 					parser->token2 = XS_TOKEN_LEFT_SHIFT;
 			}
 			else  if (parser->character == '=') {
 				parser->token2 = XS_TOKEN_LESS_EQUAL;
 				fxGetNextCharacter(parser);
 			}
 			else
 				parser->token2 = XS_TOKEN_LESS;
 			break;	
 		case '>':
 			fxGetNextCharacter(parser);
 			if (parser->character == '>') {			
 				fxGetNextCharacter(parser);
 				if (parser->character == '>') {			
 					fxGetNextCharacter(parser);
 					if (parser->character == '=') {
 						parser->token2 = XS_TOKEN_UNSIGNED_RIGHT_SHIFT_ASSIGN;
 						fxGetNextCharacter(parser);
 					}
 					else
 						parser->token2 = XS_TOKEN_UNSIGNED_RIGHT_SHIFT;
 				}
 				else if (parser->character == '=') {
 					parser->token2 = XS_TOKEN_SIGNED_RIGHT_SHIFT_ASSIGN;
 					fxGetNextCharacter(parser);
 				}
 				else
 					parser->token2 = XS_TOKEN_SIGNED_RIGHT_SHIFT;
 			}
 			else if (parser->character == '=') {
 				parser->token2 = XS_TOKEN_MORE_EQUAL;
 				fxGetNextCharacter(parser);
 			}
 			else
 				parser->token2 = XS_TOKEN_MORE;
 			break;	
 		case '!':
 			fxGetNextCharacter(parser);
 			if (parser->character == '=') {			
 				fxGetNextCharacter(parser);
 				if (parser->character == '=') {
 					parser->token2 = XS_TOKEN_STRICT_NOT_EQUAL;
 					fxGetNextCharacter(parser);
 				}
 				else
 					parser->token2 = XS_TOKEN_NOT_EQUAL;
 			}
 			else
 				parser->token2 = XS_TOKEN_NOT;
 			break;
 		case '~':
 			parser->token2 = XS_TOKEN_BIT_NOT;
 			fxGetNextCharacter(parser);
 			break;
 		case '&':
 			fxGetNextCharacter(parser);
 			if (parser->character == '=') {	
 				parser->token2 = XS_TOKEN_BIT_AND_ASSIGN;
 				fxGetNextCharacter(parser);
 			}
 			else if (parser->character == '&') {
 				parser->token2 = XS_TOKEN_AND;
 				fxGetNextCharacter(parser);
 				if (parser->character == '=') {	
 					parser->token2 = XS_TOKEN_AND_ASSIGN;
 					fxGetNextCharacter(parser);
 				}
 			}
 			else
 				parser->token2 = XS_TOKEN_BIT_AND;
 			break;
 		case '|':
 			fxGetNextCharacter(parser);
 			if (parser->character == '=') {
 				parser->token2 = XS_TOKEN_BIT_OR_ASSIGN;
 				fxGetNextCharacter(parser);
 			}
 			else if (parser->character == '|') {
 				parser->token2 = XS_TOKEN_OR;
 				fxGetNextCharacter(parser);
 				if (parser->character == '=') {	
 					parser->token2 = XS_TOKEN_OR_ASSIGN;
 					fxGetNextCharacter(parser);
 				}
 			}
 			else
 				parser->token2 = XS_TOKEN_BIT_OR;
 			break;
 		case '^':
 			fxGetNextCharacter(parser);
 			if (parser->character == '=') {
 				parser->token2 = XS_TOKEN_BIT_XOR_ASSIGN;
 				fxGetNextCharacter(parser);
 			}
 			else
 				parser->token2 = XS_TOKEN_BIT_XOR;
 			break;
 		case '+':	
 			fxGetNextCharacter(parser);
 			if (parser->character == '=') {
 				parser->token2 = XS_TOKEN_ADD_ASSIGN;
 				fxGetNextCharacter(parser);
 			}
 			else if (parser->character == '+') {
 				parser->token2 = XS_TOKEN_INCREMENT;
 				fxGetNextCharacter(parser);
 			}
 			else
 				parser->token2 = XS_TOKEN_ADD;
 			break;
 		case '-':	
 			fxGetNextCharacter(parser);
 			if (parser->character == '=') {
 				parser->token2 = XS_TOKEN_SUBTRACT_ASSIGN;
 				fxGetNextCharacter(parser);
 			}
 			else if (parser->character == '-') {
 				parser->token2 = XS_TOKEN_DECREMENT;
 				fxGetNextCharacter(parser);
 			}
 			else
 				parser->token2 = XS_TOKEN_SUBTRACT;
 			break;
 		case '*':	
 			fxGetNextCharacter(parser);
 			if (parser->character == '=') {
 				parser->token2 = XS_TOKEN_MULTIPLY_ASSIGN;
 				fxGetNextCharacter(parser);
 			}
 			else if (parser->character == '*') {
 				fxGetNextCharacter(parser);
 				if (parser->character == '=') {
 					parser->token2 = XS_TOKEN_EXPONENTIATION_ASSIGN;
 					fxGetNextCharacter(parser);
 				}
 				else
 					parser->token2 = XS_TOKEN_EXPONENTIATION;
 			}
 			else
 				parser->token2 = XS_TOKEN_MULTIPLY;
 			break;
 		case '/':
 			fxGetNextCharacter(parser);
 			if (parser->character == '*') {
 				fxGetNextCharacter(parser);
 				for (;;) {
 					if (parser->character == (txU4)C_EOF) {
 						fxReportParserError(parser, parser->line, "end of file in comment");			
 						break;
 					}
 					else if ((parser->character == 10) || (parser->character == 0x2028) || (parser->character == 0x2029)) {
 						parser->line2++;
 						fxGetNextCharacter(parser);
 						parser->crlf2 = 1;
 					}
 					else if (parser->character == 13) {
 						parser->line2++;
 						fxGetNextCharacter(parser);
 						if (parser->character == 10)
 							fxGetNextCharacter(parser);
 						parser->crlf2 = 1;
 					}
 					else if (parser->character == '*') {
 						fxGetNextCharacter(parser);
 						if (parser->character == '/') {
 							fxGetNextCharacter(parser);
 							break;
 						}
 					}
 					else
 						fxGetNextCharacter(parser);
 				}
 			}
 			else if (parser->character == '/') {
 				fxGetNextCharacter(parser);
 				p = parser->buffer;
 				q = p + parser->bufferSize - 1;
 				while ((parser->character != (txU4)C_EOF) && (parser->character != 10) && (parser->character != 13) && (parser->character != 0x2028) && (parser->character != 0x2029)) {
 					if (p < q)
 						*p++ = (char)parser->character;
 					fxGetNextCharacter(parser);
 				}	
 				*p = 0;
 				p = parser->buffer;
 				if ((*p == '#') || (*p == '@')) {
 					if (!c_strncmp(p, "@line ", 6)) {
 						p += 6;
 						t = 0;
 						c = *p++;
 						while (('0' <= c) && (c <= '9')) {
 							t = (t * 10) + (c - '0');
 							c = *p++;
 						}
 						if (!t) goto bail;
 						if (c == ' ') {
 							c = *p++;
 							if (c != '"') goto bail;
 							q = p;
 							c = *q++;
 							while ((c != 0) && (c != 10) && (c != 13) && (c != '"'))
 								c = *q++;
 							if (c != '"') goto bail;
 							*(--q) = 0;
 							parser->path = fxNewParserSymbol(parser, p);
 						}
 						parser->line2 = t - 1;
 					}
 					else if (!c_strncmp(p, "# sourceMappingURL=", 19) || !c_strncmp(p, "@ sourceMappingURL=", 19)) {
 						p += 19;
 						q = p;
-						c = *q++;
-						while ((c != 0) && (c != 10) && (c != 13))
-							c = *q++;
+						while (((c = *q)) && (c != 10) && (c != 13))
+							q++;
 						*q = 0;
 						parser->name = fxNewParserString(parser, p, mxPtrDiff(q - p));
 					}
 					else if (!c_strncmp(p, "# sourceURL=", 12) || !c_strncmp(p, "@ sourceURL=", 12)) {
 						p += 12;
 						q = p;
-						c = *q++;
-						while ((c != 0) && (c != 10) && (c != 13))
-							c = *q++;
+						while (((c = *q)) && (c != 10) && (c != 13))
+							q++;
 						*q = 0;
 						parser->source = fxNewParserSymbol(parser, p);
 					}
 			}
 			bail:
 				;
 			}
 			else if (parser->character == '=') {
 				parser->token2 = XS_TOKEN_DIVIDE_ASSIGN;
 				fxGetNextCharacter(parser);
 			}
 			else 
 				parser->token2 = XS_TOKEN_DIVIDE;
 			break;
 		case '%':	
 			fxGetNextCharacter(parser);
 			if (parser->character == '=') {
 				parser->token2 = XS_TOKEN_MODULO_ASSIGN;
 				fxGetNextCharacter(parser);
 			}
 			else
 				parser->token2 = XS_TOKEN_MODULO;
 			break;
 		
 		case '"':
 		case '\'':
 			c = parser->character;
 			fxGetNextCharacter(parser);
 			fxGetNextString(parser, c);
 			parser->token2 = XS_TOKEN_STRING;
 			fxGetNextCharacter(parser);
 			break;
 			
 		case '`':
 			fxGetNextCharacter(parser);
 			fxGetNextString(parser, '`');
 			if (parser->character == '{')
 				parser->token2 = XS_TOKEN_TEMPLATE_HEAD;
 			else
 				parser->token2 = XS_TOKEN_TEMPLATE;
 			fxGetNextCharacter(parser);
 			break;
 			
 		case '@':
 			if (parser->flags & mxCFlag)
 				parser->token2 = XS_TOKEN_HOST;
             else
                 fxReportParserError(parser, parser->line, "invalid character @");
             fxGetNextCharacter(parser);
 			break;
 			
 		default:
 			p = parser->buffer;
 			q = p + parser->bufferSize - 1;
 			if (parser->character == '#') {
 				*p++ = '#';
 				fxGetNextCharacter(parser);
 			}
 			if (fxIsIdentifierFirst(parser->character)) {
 				p = fxUTF8Buffer(parser, parser->character, p, q);				
 				fxGetNextCharacter(parser);
 			}
 			else if (parser->character == '\\') {
 				parser->escaped2 = 1;
 				t = 0;
 				if (fxGetNextIdentiferX(parser, &t) && fxIsIdentifierFirst(t))
 					p = fxUTF8Buffer(parser, t, p, q);				
 				else
 					p = C_NULL;
 			}
 			else
 				p = C_NULL;
 			if (p) {
 				for (;;) {
 					if (p == q) {
 						fxReportMemoryError(parser, parser->line, "identifier overflow");
 					}
 					if (fxIsIdentifierNext(parser->character)) {
 						p = fxUTF8Buffer(parser, parser->character, p, q);				
 						fxGetNextCharacter(parser);
 					}
 					else if (parser->character == '\\') {
 						parser->escaped2 = 1;
 						t = 0;
 						if (fxGetNextIdentiferX(parser, &t) && fxIsIdentifierNext(t))
 							p = fxUTF8Buffer(parser, t, p, q);				
 						else {
 							p = C_NULL;
 							break;
 						}
 					}
 					else {
 						*p = 0;
 						if (parser->buffer[0] == '#') {
 							parser->symbol2 = fxNewParserSymbol(parser, parser->buffer);
 							parser->token2 = XS_TOKEN_PRIVATE_IDENTIFIER;
 						}
 						else {
 							fxGetNextKeyword(parser);
 						}
 						break;
 					}
 				}
 			}
 			if (!p) {
 				fxReportParserError(parser, parser->line, "invalid character %d", parser->character);
 				fxGetNextCharacter(parser);
 			}
 			break;
 		}
 	}
 }
