commit ba6db26b65c6ce00755def84691e117249b857ff
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Thu Jul 22 11:37:39 2021 -0700

    Tolerate unsorted OT table entries for small number of entries
    
    See comment.
    
    Fixes https://github.com/harfbuzz/harfbuzz/issues/3065

diff --git a/src/hb-open-file.hh b/src/hb-open-file.hh
index fc94836a2..c2d65eb1d 100644
--- a/src/hb-open-file.hh
+++ b/src/hb-open-file.hh
@@ -81,128 +81,134 @@ typedef struct TableRecord
 typedef struct OpenTypeOffsetTable
 {
   friend struct OpenTypeFontFile;
 
   unsigned int get_table_count () const { return tables.len; }
   const TableRecord& get_table (unsigned int i) const
   { return tables[i]; }
   unsigned int get_table_tags (unsigned int  start_offset,
 			       unsigned int *table_count, /* IN/OUT */
 			       hb_tag_t     *table_tags /* OUT */) const
   {
     if (table_count)
     {
       + tables.sub_array (start_offset, table_count)
       | hb_map (&TableRecord::tag)
       | hb_sink (hb_array (table_tags, *table_count))
       ;
     }
     return tables.len;
   }
   bool find_table_index (hb_tag_t tag, unsigned int *table_index) const
   {
     Tag t;
     t = tag;
-    return tables.bfind (t, table_index, HB_NOT_FOUND_STORE, Index::NOT_FOUND_INDEX);
+    /* Use lfind for small fonts; there are fonts that have unsorted table entries;
+     * those tend to work in other tools, so tolerate them.
+     * https://github.com/harfbuzz/harfbuzz/issues/3065 */
+    if (tables.len < 16)
+      return tables.lfind (t, table_index, HB_NOT_FOUND_STORE, Index::NOT_FOUND_INDEX);
+    else
+      return tables.bfind (t, table_index, HB_NOT_FOUND_STORE, Index::NOT_FOUND_INDEX);
   }
   const TableRecord& get_table_by_tag (hb_tag_t tag) const
   {
     unsigned int table_index;
     find_table_index (tag, &table_index);
     return get_table (table_index);
   }
 
   public:
 
   template <typename item_t>
   bool serialize (hb_serialize_context_t *c,
 		  hb_tag_t sfnt_tag,
 		  hb_array_t<item_t> items)
   {
     TRACE_SERIALIZE (this);
     /* Alloc 12 for the OTHeader. */
     if (unlikely (!c->extend_min (*this))) return_trace (false);
     /* Write sfntVersion (bytes 0..3). */
     sfnt_version = sfnt_tag;
     /* Take space for numTables, searchRange, entrySelector, RangeShift
      * and the TableRecords themselves.  */
     if (unlikely (!tables.serialize (c, items.length))) return_trace (false);
 
     const char *dir_end = (const char *) c->head;
     HBUINT32 *checksum_adjustment = nullptr;
 
     /* Write OffsetTables, alloc for and write actual table blobs. */
     for (unsigned int i = 0; i < tables.len; i++)
     {
       hb_blob_t *blob = items[i].blob;
       unsigned len = blob->length;
 
       /* Allocate room for the table and copy it. */
       char *start = (char *) c->allocate_size<void> (len);
       if (unlikely (!start)) return false;
 
       TableRecord &rec = tables.arrayZ[i];
       rec.tag = items[i].tag;
       rec.length = len;
       rec.offset = 0;
       if (unlikely (!c->check_assign (rec.offset,
 				      (unsigned) ((char *) start - (char *) this),
 				      HB_SERIALIZE_ERROR_OFFSET_OVERFLOW)))
         return_trace (false);
 
       if (likely (len))
 	memcpy (start, blob->data, len);
 
       /* 4-byte alignment. */
       c->align (4);
       const char *end = (const char *) c->head;
 
       if (items[i].tag == HB_OT_TAG_head &&
 	  (unsigned) (end - start) >= head::static_size)
       {
 	head *h = (head *) start;
 	checksum_adjustment = &h->checkSumAdjustment;
 	*checksum_adjustment = 0;
       }
 
       rec.checkSum.set_for_data (start, end - start);
     }
 
     tables.qsort ();
 
     if (checksum_adjustment)
     {
       CheckSum checksum;
 
       /* The following line is a slower version of the following block. */
       //checksum.set_for_data (this, (const char *) c->head - (const char *) this);
       checksum.set_for_data (this, dir_end - (const char *) this);
       for (unsigned int i = 0; i < items.length; i++)
       {
 	TableRecord &rec = tables.arrayZ[i];
 	checksum = checksum + rec.checkSum;
       }
 
       *checksum_adjustment = 0xB1B0AFBAu - checksum;
     }
 
     return_trace (true);
   }
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (c->check_struct (this) && tables.sanitize (c));
   }
 
   protected:
   Tag		sfnt_version;	/* '\0\001\0\00' if TrueType / 'OTTO' if CFF */
   BinSearchArrayOf<TableRecord>
 		tables;
   public:
   DEFINE_SIZE_ARRAY (12, tables);
 } OpenTypeFontFace;
 
 
 /*
  * TrueType Collections
  */
