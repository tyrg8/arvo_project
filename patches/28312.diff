commit 62a3f76020c96129edff3369614b704d8f6f9fa3
Author: Evan Miller <emmiller@gmail.com>
Date:   Sat Dec 5 07:13:07 2020 -0500

    SAS7BDAT reader: Improved bounds checking
    
    Fixes OSS-Fuzz/28312

diff --git a/src/sas/readstat_sas7bdat_read.c b/src/sas/readstat_sas7bdat_read.c
index 259edd1..b7ff18c 100644
--- a/src/sas/readstat_sas7bdat_read.c
+++ b/src/sas/readstat_sas7bdat_read.c
@@ -898,96 +898,96 @@ cleanup:
 static readstat_error_t sas7bdat_parse_page_pass2(const char *page, size_t page_size, sas7bdat_ctx_t *ctx) {
     uint16_t page_type;
 
     readstat_error_t retval = READSTAT_OK;
 
     page_type = sas_read2(&page[ctx->page_header_size-8], ctx->bswap);
 
     const char *data = NULL;
 
     if ((page_type & SAS_PAGE_TYPE_MASK) == SAS_PAGE_TYPE_DATA) {
         ctx->page_row_count = sas_read2(&page[ctx->page_header_size-6], ctx->bswap);
         data = &page[ctx->page_header_size];
     } else if (!(page_type & SAS_PAGE_TYPE_COMP)) {
         uint16_t subheader_count = sas_read2(&page[ctx->page_header_size-4], ctx->bswap);
 
         int i;
         const char *shp = &page[ctx->page_header_size];
         int lshp = ctx->subheader_pointer_size;
 
         if (ctx->page_header_size + subheader_count*lshp > page_size) {
             retval = READSTAT_ERROR_PARSE;
             goto cleanup;
         }
 
         for (i=0; i<subheader_count; i++) {
             subheader_pointer_t shp_info = { 0 };
             uint32_t signature = 0;
             if ((retval = sas7bdat_parse_subheader_pointer(shp, page + page_size - shp, &shp_info, ctx)) != READSTAT_OK) {
                 goto cleanup;
             }
             if (shp_info.len > 0 && shp_info.compression != SAS_COMPRESSION_TRUNC) {
                 if ((retval = sas7bdat_validate_subheader_pointer(&shp_info, page_size, subheader_count, ctx)) != READSTAT_OK) {
                     goto cleanup;
                 }
                 if (shp_info.compression == SAS_COMPRESSION_NONE) {
                     signature = sas_read4(page + shp_info.offset, ctx->bswap);
                     if (!ctx->little_endian && signature == -1 && ctx->u64) {
                         signature = sas_read4(page + shp_info.offset + 4, ctx->bswap);
                     }
                     if (shp_info.is_compressed_data && !sas7bdat_signature_is_recognized(signature)) {
                         if (shp_info.len != ctx->row_length) {
                             retval = READSTAT_ERROR_ROW_WIDTH_MISMATCH;
                             goto cleanup;
                         }
                         if ((retval = sas7bdat_submit_columns_if_needed(ctx, 1)) != READSTAT_OK) {
                             goto cleanup;
                         }
                         if ((retval = sas7bdat_parse_single_row(page + shp_info.offset, ctx)) != READSTAT_OK) {
                             goto cleanup;
                         }
                     } else {
                         if (signature != SAS_SUBHEADER_SIGNATURE_COLUMN_TEXT) {
                             if ((retval = sas7bdat_parse_subheader(signature, page + shp_info.offset, shp_info.len, ctx)) != READSTAT_OK) {
                                 goto cleanup;
                             }
                         }
                     }
                 } else if (shp_info.compression == SAS_COMPRESSION_ROW) {
                     if ((retval = sas7bdat_submit_columns_if_needed(ctx, 1)) != READSTAT_OK) {
                         goto cleanup;
                     }
                     if ((retval = sas7bdat_parse_subheader_compressed(page + shp_info.offset, shp_info.len, ctx)) != READSTAT_OK) {
                         goto cleanup;
                     }
                 } else {
                     retval = READSTAT_ERROR_UNSUPPORTED_COMPRESSION;
                     goto cleanup;
                 }
             }
 
             shp += lshp;
         }
 
         if ((page_type & SAS_PAGE_TYPE_MASK) == SAS_PAGE_TYPE_MIX) {
             /* HACK - this is supposed to obey 8-byte boundaries but
              * some files created by Stat/Transfer don't. So verify that the
              * padding is { 0, 0, 0, 0 } or { ' ', ' ', ' ', ' ' } (or that
              * the file is not from Stat/Transfer) before skipping it */
-            if ((shp-page)%8 == 4 && 
+            if ((shp-page)%8 == 4 && shp + 4 <= page + page_size &&
                     (*(uint32_t *)shp == 0x00000000 ||
                      *(uint32_t *)shp == 0x20202020 ||
                      ctx->vendor != READSTAT_VENDOR_STAT_TRANSFER)) {
                 data = shp + 4;
             } else {
                 data = shp;
             }
         }
     }
     if (data) {
         if ((retval = sas7bdat_submit_columns_if_needed(ctx, 0)) != READSTAT_OK) {
             goto cleanup;
         }
         if (ctx->handle.value) {
             retval = sas7bdat_parse_rows(data, page + page_size - data, ctx);
         }
     } 
