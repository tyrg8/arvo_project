commit 4b8ab2550d3a8efa9f237d3e3a5a699da95ec023
Merge: a24a1c853 44ca98f5b
Author: David Garske <david@wolfssl.com>
Date:   Mon Jan 23 15:09:30 2023 -0800

    Merge pull request #6004 from jpbland1/hpke-disable-harden
    
    update hpke to not use rng with ecc when hardening is off

diff --git a/wolfcrypt/src/hpke.c b/wolfcrypt/src/hpke.c
index 25d30afba..604f9fb0b 100644
--- a/wolfcrypt/src/hpke.c
+++ b/wolfcrypt/src/hpke.c
@@ -734,91 +734,103 @@ static int wc_HpkeKeyScheduleBase(Hpke* hpke, HpkeBaseContext* context,
 /* compute the shared secret from the ephemeral and receiver kem keys */
 static int wc_HpkeEncap(Hpke* hpke, void* ephemeralKey, void* receiverKey,
     byte* sharedSecret)
 {
     int ret;
+#ifdef ECC_TIMING_RESISTANT
+    WC_RNG* rng;
+#endif
     word32 dh_len;
     word16 receiverPubKeySz;
     word16 ephemeralPubKeySz;
 #ifndef WOLFSSL_SMALL_STACK
     byte dh[HPKE_Ndh_MAX];
     byte kemContext[HPKE_Npk_MAX * 2];
 #else
     byte* dh = NULL;
     byte* kemContext = NULL;
 #endif
 
     if (hpke == NULL || ephemeralKey == NULL || receiverKey == NULL ||
         sharedSecret == NULL) {
         return BAD_FUNC_ARG;
     }
 
     receiverPubKeySz = hpke->Npk;
     ephemeralPubKeySz = hpke->Npk;
 
 #ifdef WOLFSSL_SMALL_STACK
     dh = (byte*)XMALLOC(hpke->Ndh, hpke->heap, DYNAMIC_TYPE_TMP_BUFFER);
     kemContext = (byte*)XMALLOC(hpke->Npk * 2, hpke->heap,
         DYNAMIC_TYPE_TMP_BUFFER);
     if (dh == NULL || kemContext == NULL) {
         XFREE(dh, hpke->heap, DYNAMIC_TYPE_TMP_BUFFER);
         XFREE(kemContext, hpke->heap, DYNAMIC_TYPE_TMP_BUFFER);
         return MEMORY_E;
     }
 #endif
 
     /* generate dh */
     dh_len = hpke->Ndh;
 
     switch (hpke->kem)
     {
 #if defined(HAVE_ECC)
         case DHKEM_P256_HKDF_SHA256:
         case DHKEM_P384_HKDF_SHA384:
         case DHKEM_P521_HKDF_SHA512:
-            ((ecc_key*)ephemeralKey)->rng = wc_rng_new(NULL, 0, hpke->heap);
+#ifdef ECC_TIMING_RESISTANT
+            rng = wc_rng_new(NULL, 0, hpke->heap);
+
+            if (rng == NULL)
+                return RNG_FAILURE_E;
+
+            wc_ecc_set_rng((ecc_key*)ephemeralKey, rng);
+#endif
 
             ret = wc_ecc_shared_secret((ecc_key*)ephemeralKey,
                 (ecc_key*)receiverKey, dh, &dh_len);
 
-            wc_rng_free(((ecc_key*)ephemeralKey)->rng);
+#ifdef ECC_TIMING_RESISTANT
+            wc_rng_free(rng);
+#endif
             break;
 #endif
 #if defined(HAVE_CURVE25519)
         case DHKEM_X25519_HKDF_SHA256:
             ret = wc_curve25519_shared_secret_ex((curve25519_key*)ephemeralKey,
                 (curve25519_key*)receiverKey, dh, &dh_len,
                 EC25519_LITTLE_ENDIAN);
             break;
 #endif
         case DHKEM_X448_HKDF_SHA512:
             /* TODO: Add X448 */
         default:
             ret = -1;
             break;
     }
 
     if (ret == 0) {
         /* serialize ephemeralKey into kemContext */
         ret = wc_HpkeSerializePublicKey(hpke, ephemeralKey,
             kemContext, &ephemeralPubKeySz);
     }
     if (ret == 0) {
         /* serialize pkR into kemContext */
         ret = wc_HpkeSerializePublicKey(hpke, receiverKey,
             kemContext + ephemeralPubKeySz, &receiverPubKeySz);
     }
     if (ret == 0) {
         /* compute the shared secret */
         ret = wc_HpkeExtractAndExpand(hpke, dh, dh_len, kemContext,
             hpke->Npk * 2, sharedSecret);
     }
 
 #ifdef WOLFSSL_SMALL_STACK
     XFREE(dh, hpke->heap, DYNAMIC_TYPE_TMP_BUFFER);
     XFREE(kemContext, hpke->heap, DYNAMIC_TYPE_TMP_BUFFER);
 #endif
 
     return ret;
 }
 
 /* setup the sender context with shared key, nonce and exporter secret */
@@ -949,95 +961,107 @@ int wc_HpkeSealBase(Hpke* hpke, void* ephemeralKey, void* receiverKey,
 /* compute the shared secret from the ephemeral and receiver kem keys */
 static int wc_HpkeDecap(Hpke* hpke, void* receiverKey, const byte* pubKey,
     word16 pubKeySz, byte* sharedSecret)
 {
     int ret;
+#ifdef ECC_TIMING_RESISTANT
+    WC_RNG* rng;
+#endif
     word32 dh_len;
     word16 receiverPubKeySz;
     void* ephemeralKey = NULL;
 #ifndef WOLFSSL_SMALL_STACK
     byte dh[HPKE_Ndh_MAX];
     byte kemContext[HPKE_Npk_MAX * 2];
 #else
     byte* dh = NULL;
     byte* kemContext = NULL;
 #endif
 
     if (hpke == NULL || receiverKey == NULL) {
         return BAD_FUNC_ARG;
     }
 
     receiverPubKeySz = hpke->Npk;
 
 #ifdef WOLFSSL_SMALL_STACK
     dh = (byte*)XMALLOC(hpke->Ndh, hpke->heap, DYNAMIC_TYPE_TMP_BUFFER);
     kemContext = (byte*)XMALLOC(hpke->Npk * 2, hpke->heap,
         DYNAMIC_TYPE_TMP_BUFFER);
     if (dh == NULL || kemContext == NULL) {
         XFREE(dh, hpke->heap, DYNAMIC_TYPE_TMP_BUFFER);
         XFREE(kemContext, hpke->heap, DYNAMIC_TYPE_TMP_BUFFER);
         return MEMORY_E;
     }
 #endif
 
     /* deserialize ephemeralKey from pubKey */
     ret = wc_HpkeDeserializePublicKey(hpke, &ephemeralKey, pubKey, pubKeySz);
 
     /* generate dh */
     dh_len = hpke->Ndh;
 
     if (ret == 0)
         switch (hpke->kem)
         {
 #if defined(HAVE_ECC)
             case DHKEM_P256_HKDF_SHA256:
             case DHKEM_P384_HKDF_SHA384:
             case DHKEM_P521_HKDF_SHA512:
-                ((ecc_key*)receiverKey)->rng = wc_rng_new(NULL, 0, hpke->heap);
+#ifdef ECC_TIMING_RESISTANT
+                rng = wc_rng_new(NULL, 0, hpke->heap);
+
+                if (rng == NULL)
+                    return RNG_FAILURE_E;
+
+                wc_ecc_set_rng((ecc_key*)receiverKey, rng);
+#endif
 
                 ret = wc_ecc_shared_secret((ecc_key*)receiverKey,
                     (ecc_key*)ephemeralKey, dh, &dh_len);
 
-                wc_rng_free(((ecc_key*)receiverKey)->rng);
+#ifdef ECC_TIMING_RESISTANT
+                wc_rng_free(rng);
+#endif
                 break;
 #endif
 #if defined(HAVE_CURVE25519)
             case DHKEM_X25519_HKDF_SHA256:
                 ret = wc_curve25519_shared_secret_ex(
                     (curve25519_key*)receiverKey, (curve25519_key*)ephemeralKey,
                     dh, &dh_len, EC25519_LITTLE_ENDIAN);
                 break;
 #endif
             case DHKEM_X448_HKDF_SHA512:
                 /* TODO: Add X448 */
             default:
                 ret = -1;
                 break;
         }
 
     if (ephemeralKey != NULL)
         wc_HpkeFreeKey(hpke, hpke->kem, ephemeralKey, hpke->heap);
 
     if (ret == 0) {
         /* copy pubKey into kemContext */
         XMEMCPY(kemContext, pubKey, hpke->Npk);
 
         /* serialize pkR into kemContext */
         ret = wc_HpkeSerializePublicKey(hpke, receiverKey,
             kemContext + hpke->Npk, &receiverPubKeySz);
     }
 
     /* compute the shared secret */
     if (ret == 0) {
         ret = wc_HpkeExtractAndExpand(hpke, dh, dh_len, kemContext,
             hpke->Npk * 2, sharedSecret);
     }
 
 #ifdef WOLFSSL_SMALL_STACK
     XFREE(dh, hpke->heap, DYNAMIC_TYPE_TMP_BUFFER);
     XFREE(kemContext, hpke->heap, DYNAMIC_TYPE_TMP_BUFFER);
 #endif
 
     return ret;
 }
 
 /* setup an hpke base context for decrypting messages, return 0 or error */
