commit b3d5f9748a1130f875241a4155bc88963a795346
Author: Tim Ledbetter <timledbetter@gmail.com>
Date:   Mon Nov 6 17:52:13 2023 +0000

    LibVideo/VP9: Ensure range decoder size is within expected range

diff --git a/Userland/Libraries/LibVideo/VP9/Context.h b/Userland/Libraries/LibVideo/VP9/Context.h
index 051099534f..bc2e6b8606 100644
--- a/Userland/Libraries/LibVideo/VP9/Context.h
+++ b/Userland/Libraries/LibVideo/VP9/Context.h
@@ -44,134 +44,137 @@ struct FrameContext {
 public:
     static ErrorOr<FrameContext> create(ReadonlyBytes data,
         Vector2D<FrameBlockContext>& contexts)
     {
         return FrameContext(
             data,
             TRY(try_make<FixedMemoryStream>(data)),
             TRY(try_make<SyntaxElementCounter>()),
             contexts);
     }
 
     FrameContext(FrameContext const&) = delete;
     FrameContext(FrameContext&&) = default;
 
     ReadonlyBytes stream_data;
     NonnullOwnPtr<FixedMemoryStream> stream;
     BigEndianInputBitStream bit_stream;
 
     DecoderErrorOr<BooleanDecoder> create_range_decoder(size_t size)
     {
+        if (size > stream->remaining())
+            return DecoderError::corrupted("Range decoder size invalid"sv);
+
         auto compressed_header_data = ReadonlyBytes(stream_data.data() + stream->offset(), size);
 
         // 9.2.1: The Boolean decoding process specified in section 9.2.2 is invoked to read a marker syntax element from the
         //        bitstream. It is a requirement of bitstream conformance that the value read is equal to 0.
         auto decoder = DECODER_TRY(DecoderErrorCategory::Corrupted, BooleanDecoder::initialize(compressed_header_data));
         if (decoder.read_bool(128))
             return DecoderError::corrupted("Range decoder marker was non-zero"sv);
 
         DECODER_TRY(DecoderErrorCategory::Corrupted, bit_stream.discard(size));
         return decoder;
     }
 
     NonnullOwnPtr<SyntaxElementCounter> counter;
 
     u8 profile { 0 };
 
     FrameType type { FrameType::KeyFrame };
     bool is_inter_predicted() const { return type == FrameType::InterFrame; }
 
     bool error_resilient_mode { false };
     bool parallel_decoding_mode { false };
     bool should_replace_probability_context { false };
 
     bool shows_a_frame() const { return m_frame_show_mode != FrameShowMode::DoNotShowFrame; }
     bool shows_a_new_frame() const { return m_frame_show_mode == FrameShowMode::CreateAndShowNewFrame; }
     bool shows_existing_frame() const { return m_frame_show_mode == FrameShowMode::ShowExistingFrame; }
     void set_frame_hidden() { m_frame_show_mode = FrameShowMode::DoNotShowFrame; }
     void set_existing_frame_to_show(u8 index)
     {
         m_frame_show_mode = FrameShowMode::ShowExistingFrame;
         m_existing_frame_index = index;
     }
     u8 existing_frame_index() const { return m_existing_frame_index; }
 
     bool use_previous_frame_motion_vectors { false };
 
     ColorConfig color_config {};
 
     u8 reference_frames_to_update_flags { 0 };
     bool should_update_reference_frame_at_index(u8 index) const { return (reference_frames_to_update_flags & (1 << index)) != 0; }
 
     u8 probability_context_index { 0 };
 
     Gfx::Size<u32> size() const { return m_size; }
     ErrorOr<void> set_size(Gfx::Size<u32> size)
     {
         m_size = size;
 
         // From spec, compute_image_size( )
         m_rows = pixels_to_blocks(size.height() + 7u);
         m_columns = pixels_to_blocks(size.width() + 7u);
         return m_block_contexts.try_resize(m_rows, m_columns);
     }
     u32 rows() const { return m_rows; }
     u32 columns() const { return m_columns; }
     u32 superblock_rows() const { return blocks_ceiled_to_superblocks(rows()); }
     u32 superblock_columns() const { return blocks_ceiled_to_superblocks(columns()); }
     // Calculates the output size for each plane in the frame.
     Gfx::Size<u32> decoded_size(bool uv) const
     {
         if (uv) {
             return {
                 y_size_to_uv_size(color_config.subsampling_y, blocks_to_pixels(columns())),
                 y_size_to_uv_size(color_config.subsampling_y, blocks_to_pixels(rows())),
             };
         }
         return {
             blocks_to_pixels(columns()),
             blocks_to_pixels(rows()),
         };
     }
 
     Vector2D<FrameBlockContext> const& block_contexts() const { return m_block_contexts; }
 
     Gfx::Size<u32> render_size { 0, 0 };
     Gfx::Size<u16> log2_of_tile_counts { 0, 0 };
 
     // This group of fields is only needed for inter-predicted frames.
     Array<u8, 3> reference_frame_indices;
     Array<bool, ReferenceFrameType::LastFrame + 3> reference_frame_sign_biases;
     bool high_precision_motion_vectors_allowed { false };
     InterpolationFilter interpolation_filter { InterpolationFilter::Switchable };
 
     u8 loop_filter_level { 0 };
     u8 loop_filter_sharpness { 0 };
     bool loop_filter_delta_enabled { false };
     Array<i8, MAX_REF_FRAMES> loop_filter_reference_deltas;
     Array<i8, 2> loop_filter_mode_deltas;
 
     // Set based on quantization_params( ) in the spec.
     bool lossless { false };
     Array<Quantizers, MAX_SEGMENTS> segment_quantizers;
 
     bool segmentation_enabled { false };
     // Note: We can use Optional<Array<...>> for these tree probabilities, but unfortunately it seems to have measurable performance overhead.
     bool use_full_segment_id_tree { false };
     Array<u8, 7> full_segment_id_tree_probabilities;
     bool use_predicted_segment_id_tree { false };
     Array<u8, 3> predicted_segment_id_tree_probabilities;
     bool should_use_absolute_segment_base_quantizer { false };
     SegmentationFeatures segmentation_features;
     SegmentFeatureStatus get_segment_feature(u8 segment_id, SegmentFeature feature) const
     {
         return segmentation_features[segment_id][to_underlying(feature)];
     }
 
     u16 header_size_in_bytes { 0 };
 
     TransformMode transform_mode;
 
     // This group also is only needed for inter-predicted frames.
     ReferenceMode reference_mode;
     ReferenceFrameType fixed_reference_type;
     ReferenceFramePair variable_reference_types;
