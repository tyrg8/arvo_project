commit 537c2ca0244889634ced3c3e0724431862d3ced5
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Thu Nov 22 08:03:43 2018 -0500

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=11444

diff --git a/MagickCore/token.c b/MagickCore/token.c
index 6ce4ed198..9cafcc2d3 100644
--- a/MagickCore/token.c
+++ b/MagickCore/token.c
@@ -130,213 +130,217 @@ MagickExport TokenInfo *DestroyTokenInfo(TokenInfo *token_info)
 {
   (void) LogMagickEvent(TraceEvent,GetMagickModule(),"...");
   assert(token_info != (TokenInfo *) NULL);
   assert(token_info->signature == MagickCoreSignature);
   token_info->signature=(~MagickCoreSignature);
   token_info=(TokenInfo *) RelinquishMagickMemory(token_info);
   return(token_info);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +   G e t N e x t T o k e n                                                   %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  GetNextToken() gets a token from the token stream.  A token is defined as
 %  a sequence of characters delimited by whitespace (e.g. clip-path), a
 %  sequence delimited with quotes (.e.g "Quote me"), or a sequence enclosed in
 %  parenthesis (e.g. rgb(0,0,0)).  GetNextToken() also recognizes these
 %  separator characters: ':', '=', ',', and ';'.
 %
 %  The format of the GetNextToken method is:
 %
 %      void GetNextToken(const char *start,const char **end,
 %        const size_t extent,char *token)
 %
 %  A description of each parameter follows:
 %
 %    o start: the start of the token sequence.
 %
 %    o end: point to the end of the token sequence.
 %
 %    o extent: maximum extent of the token.
 %
 %    o token: copy the token to this buffer.
 %
 */
 MagickExport void GetNextToken(const char *start,const char **end,
   const size_t extent,char *token)
 {
   double
     value;
 
   register char
     *q;
 
   register const char
     *p;
 
   register ssize_t
     i;
 
   assert(start != (const char *) NULL);
   assert(token != (char *) NULL);
   i=0;
   p=start;
   while ((isspace((int) ((unsigned char) *p)) != 0) && (*p != '\0'))
     p++;
   switch (*p)
   {
     case '\0':
       break;
     case '"':
     case '\'':
     case '`':
     case '{':
     {
       register char
         escape;
 
       switch (*p)
       {
         case '"': escape='"'; break;
         case '\'': escape='\''; break;
         case '`': escape='\''; break;
         case '{': escape='}'; break;
         default: escape=(*p); break;
       }
       for (p++; *p != '\0'; p++)
       {
         if ((*p == '\\') && ((*(p+1) == escape) || (*(p+1) == '\\')))
           p++;
         else
           if (*p == escape)
             {
               p++;
               break;
             }
         if (i < (ssize_t) (extent-1))
           token[i++]=(*p);
         if ((size_t) (p-start) >= (extent-1))
           break;
       }
       break;
     }
     case '/':
     {
       if (i < (ssize_t) (extent-1))
         token[i++]=(*p);
       p++;
       if ((*p == '>') || (*p == '/'))
         {
           if (i < (ssize_t) (extent-1))
             token[i++]=(*p);
           p++;
         }
       break;
     }
     default:
     {
       char
         *q;
 
       value=StringToDouble(p,&q);
       (void) value;
       if ((p != q) && (*p != ','))
         {
           for ( ; (p < q) && (*p != ','); p++)
           {
             if (i < (ssize_t) (extent-1))
               token[i++]=(*p);
             if ((size_t) (p-start) >= (extent-1))
               break;
           }
           if (*p == '%')
             {
               if (i < (ssize_t) (extent-1))
                 token[i++]=(*p);
               p++;
             }
           break;
         }
       if ((*p != '\0') && (isalpha((int) ((unsigned char) *p)) == 0) &&
           (*p != *DirectorySeparator) && (*p != '#') && (*p != '<'))
         {
           if (i < (ssize_t) (extent-1))
             token[i++]=(*p);
           p++;
           break;
         }
       for ( ; *p != '\0'; p++)
       {
         if (((isspace((int) ((unsigned char) *p)) != 0) || (*p == '=') ||
             (*p == ',') || (*p == ':') || (*p == ';')) && (*(p-1) != '\\'))
           break;
         if ((i > 0) && (*p == '<'))
           break;
         if (i < (ssize_t) (extent-1))
           token[i++]=(*p);
         if (*p == '>')
           break;
         if (*p == '(')
-          for (p++; *p != '\0'; p++)
           {
-            if (i < (ssize_t) (extent-1))
-              token[i++]=(*p);
-            if ((*p == ')') && (*(p-1) != '\\'))
-              break;
-            if ((size_t) (p-start) >= (extent-1))
+            for (p++; *p != '\0'; p++)
+            {
+              if (i < (ssize_t) (extent-1))
+                token[i++]=(*p);
+              if ((*p == ')') && (*(p-1) != '\\'))
+                break;
+              if ((size_t) (p-start) >= (extent-1))
+                break;
+            }
+            if (*p == '\0')
               break;
           }
         if ((size_t) (p-start) >= (extent-1))
           break;
       }
       break;
     }
   }
   token[i]='\0';
   q=strrchr(token,')');
   if ((LocaleNCompare(token,"url(#",5) == 0) && (q != (char *) NULL))
     {
       *q='\0';
       (void) memmove(token,token+5,(size_t) (q-token-4));
     }
   while (isspace((int) ((unsigned char) *p)) != 0)
     p++;
   if (end != (const char **) NULL)
     *end=(const char *) p;
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   G l o b E x p r e s s i o n                                               %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  GlobExpression() returns MagickTrue if the expression matches the pattern.
 %
 %  The format of the GlobExpression function is:
 %
 %      MagickBooleanType GlobExpression(const char *expression,
 %        const char *pattern,const MagickBooleanType case_insensitive)
 %
 %  A description of each parameter follows:
 %
 %    o expression: Specifies a pointer to a text string containing a file name.
 %
 %    o pattern: Specifies a pointer to a text string containing a pattern.
 %
 %    o case_insensitive: set to MagickTrue to ignore the case when matching
 %      an expression.
 %
 */
