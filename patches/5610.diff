commit 862245679f67ff35d9868bad5b7ede1c7b1c0873
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Sat Feb 3 20:04:24 2018 +0100

    Bug 698988: Handle out of range predictors in filter.
    
    Thanks to oss-fuzz for reporting.

diff --git a/source/fitz/filter-predict.c b/source/fitz/filter-predict.c
index d0b2717cf..24007bfef 100644
--- a/source/fitz/filter-predict.c
+++ b/source/fitz/filter-predict.c
@@ -98,63 +98,66 @@ fz_predict_tiff(fz_predict *state, unsigned char *out, unsigned char *in)
 }
 
 static void
-fz_predict_png(fz_predict *state, unsigned char *out, unsigned char *in, size_t len, int predictor)
+fz_predict_png(fz_context *ctx, fz_predict *state, unsigned char *out, unsigned char *in, size_t len, int predictor)
 {
 	int bpp = state->bpp;
 	size_t i;
 	unsigned char *ref = state->ref;
 
 	if ((size_t)bpp > len)
 		bpp = (int)len;
 
 	switch (predictor)
 	{
+	default:
+		fz_warn(ctx, "unknown png predictor %d, treating as none", predictor);
+		/* fallthrough */
 	case 0:
 		memcpy(out, in, len);
 		break;
 	case 1:
 		for (i = bpp; i > 0; i--)
 		{
 			*out++ = *in++;
 		}
 		for (i = len - bpp; i > 0; i--)
 		{
 			*out = *in++ + out[-bpp];
 			out++;
 		}
 		break;
 	case 2:
 		for (i = bpp; i > 0; i--)
 		{
 			*out++ = *in++ + *ref++;
 		}
 		for (i = len - bpp; i > 0; i--)
 		{
 			*out++ = *in++ + *ref++;
 		}
 		break;
 	case 3:
 		for (i = bpp; i > 0; i--)
 		{
 			*out++ = *in++ + (*ref++) / 2;
 		}
 		for (i = len - bpp; i > 0; i--)
 		{
 			*out = *in++ + (out[-bpp] + *ref++) / 2;
 			out++;
 		}
 		break;
 	case 4:
 		for (i = bpp; i > 0; i--)
 		{
 			*out++ = *in++ + paeth(0, *ref++, 0);
 		}
 		for (i = len - bpp; i > 0; i --)
 		{
 			*out = *in++ + paeth(out[-bpp], *ref, ref[-bpp]);
 			ref++;
 			out++;
 		}
 		break;
 	}
 }
@@ -163,47 +166,47 @@ static int
 next_predict(fz_context *ctx, fz_stream *stm, size_t len)
 {
 	fz_predict *state = stm->state;
 	unsigned char *buf = state->buffer;
 	unsigned char *p = buf;
 	unsigned char *ep;
 	int ispng = state->predictor >= 10;
 	size_t n;
 
 	if (len >= sizeof(state->buffer))
 		len = sizeof(state->buffer);
 	ep = buf + len;
 
 	while (state->rp < state->wp && p < ep)
 		*p++ = *state->rp++;
 
 	while (p < ep)
 	{
 		n = fz_read(ctx, state->chain, state->in, state->stride + ispng);
 		if (n == 0)
 			break;
 
 		if (state->predictor == 1)
 			memcpy(state->out, state->in, n);
 		else if (state->predictor == 2)
 			fz_predict_tiff(state, state->out, state->in);
 		else
 		{
-			fz_predict_png(state, state->out, state->in + 1, n - 1, state->in[0]);
+			fz_predict_png(ctx, state, state->out, state->in + 1, n - 1, state->in[0]);
 			memcpy(state->ref, state->out, state->stride);
 		}
 
 		state->rp = state->out;
 		state->wp = state->out + n - ispng;
 
 		while (state->rp < state->wp && p < ep)
 			*p++ = *state->rp++;
 	}
 
 	stm->rp = buf;
 	stm->wp = p;
 	if (stm->rp == stm->wp)
 		return EOF;
 	stm->pos += p - buf;
 
 	return *stm->rp++;
 }
