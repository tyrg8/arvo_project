commit 7e08e1f1fd8d220f16d347e5c351ddeb56ef5524
Author: Leandro Pereira <leandro@hardinfo.org>
Date:   Tue Apr 16 21:50:24 2019 -0700

    Do not advance pointer past end of buffer when parsing header
    
    Define an HEADER_LENGTH() macro that returns the string length of a
    string literal/header name, only if it's within the request buffer
    bounds.
    
    Credit to OSS-Fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=14232

diff --git a/fuzz/clusterfuzz-testcase-minimized-request_fuzzer-5717480481226752 b/fuzz/clusterfuzz-testcase-minimized-request_fuzzer-5717480481226752
new file mode 100644
index 00000000..a8fdd149
Binary files /dev/null and b/fuzz/clusterfuzz-testcase-minimized-request_fuzzer-5717480481226752 differ
diff --git a/src/lib/lwan-request.c b/src/lib/lwan-request.c
index 3c9fc9fe..3bcd00d4 100644
--- a/src/lib/lwan-request.c
+++ b/src/lib/lwan-request.c
@@ -463,55 +463,60 @@ static char *
 identify_http_path(struct lwan_request *request, char *buffer)
 {
     struct lwan_request_parser_helper *helper = request->helper;
     static const size_t minimal_request_line_len = sizeof("/ HTTP/1.0") - 1;
     char *space, *end_of_line;
     ptrdiff_t end_len;
 
     if (UNLIKELY(*buffer != '/'))
         return NULL;
 
     end_len = buffer - helper->buffer->value;
     if (UNLIKELY((size_t)end_len >= helper->buffer->len))
         return NULL;
 
     end_of_line = memchr(buffer, '\r', helper->buffer->len - (size_t)end_len);
     if (UNLIKELY(!end_of_line))
         return NULL;
     if (UNLIKELY((size_t)(end_of_line - buffer) < minimal_request_line_len))
         return NULL;
     *end_of_line = '\0';
 
     space = end_of_line - sizeof("HTTP/X.X");
 
     request->url.value = buffer;
     request->url.len = (size_t)(space - buffer);
     parse_fragment_and_query(request, space);
     request->original_url = request->url;
 
     *space++ = '\0';
 
     STRING_SWITCH_LARGE(space) {
     case MULTICHAR_CONSTANT_LARGE('H','T','T','P','/','1','.','0'):
         request->flags |= REQUEST_IS_HTTP_1_0;
         break;
     case MULTICHAR_CONSTANT_LARGE('H','T','T','P','/','1','.','1'):
         break;
     default:
         return NULL;
     }
 
     return end_of_line + 1;
 }
 
-#define HEADER(hdr)                                                            \
+#define HEADER_LENGTH(hdr)                                                     \
     ({                                                                         \
         if (UNLIKELY(end - sizeof(hdr) + 1 < p))                               \
             continue;                                                          \
-        p += sizeof(hdr) - 1;                                                  \
+        sizeof(hdr) - 1;                                                       \
+    })
+
+#define HEADER(hdr)                                                            \
+    ({                                                                         \
+        p += HEADER_LENGTH(hdr);                                               \
         if (UNLIKELY(string_as_int16(p) !=                                     \
                      MULTICHAR_CONSTANT_SMALL(':', ' ')))                      \
             continue;                                                          \
         *end = '\0';                                                           \
         char *value = p + sizeof(": ") - 1;                                    \
         (struct lwan_value){.value = value, .len = (size_t)(end - value)};     \
     })
@@ -546,53 +551,53 @@ static bool parse_headers(struct lwan_request_parser_helper *helper,
 process:
     ret = true;
 
     for (size_t i = 0; i < n_headers; i += 2) {
         char *end = header_start[i + 1];
 
         p = header_start[i];
 
         STRING_SWITCH_L(p) {
         case MULTICHAR_CONSTANT_L('A','c','c','e'):
-            p += sizeof("Accept") - 1;
+            p += HEADER_LENGTH("Accept");
 
             STRING_SWITCH_L(p) {
             case MULTICHAR_CONSTANT_L('-','E','n','c'):
                 helper->accept_encoding = HEADER("-Encoding");
                 break;
             }
             break;
         case MULTICHAR_CONSTANT_L('A','u','t','h'):
             helper->authorization = HEADER("Authorization");
             break;
         case MULTICHAR_CONSTANT_L('C','o','n','n'):
             helper->connection = HEADER("Connection");
             break;
         case MULTICHAR_CONSTANT_L('C','o','n','t'):
-            p += sizeof("Content") - 1;
+            p += HEADER_LENGTH("Content");
 
             STRING_SWITCH_L(p) {
             case MULTICHAR_CONSTANT_L('-','T','y','p'):
                 helper->content_type = HEADER("-Type");
                 break;
             case MULTICHAR_CONSTANT_L('-','L','e','n'):
                 helper->content_length = HEADER("-Length");
                 break;
             }
             break;
         case MULTICHAR_CONSTANT_L('C','o','o','k'):
             helper->cookie = HEADER("Cookie");
             break;
         case MULTICHAR_CONSTANT_L('I','f','-','M'):
             helper->if_modified_since.raw = HEADER("If-Modified-Since");
             break;
         case MULTICHAR_CONSTANT_L('R','a','n','g'):
             helper->range.raw = HEADER("Range");
             break;
         }
     }
 
     STRING_SWITCH_SMALL(p) {
     case MULTICHAR_CONSTANT_SMALL('\r', '\n'):
         if (p[2] != '\0')
             helper->next_request = p + sizeof("\r\n") - 1;
     }
@@ -600,9 +605,9 @@ process:
 out:
     helper->n_header_start = n_headers;
     return ret;
 }
 
-#undef HEADER_RAW
+#undef HEADER_LENGTH
 #undef HEADER
 
 static void
