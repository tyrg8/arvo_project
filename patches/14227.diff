commit 12cf258193dc2b92c19fafefde28265f1201f578
Author: Herb Derby <herb@google.com>
Date:   Sat Apr 13 23:41:36 2019 +0000

    Revert "Convert the CPU mask case to use prepareForDrawing"
    
    This reverts commit c48879ed404c619adb59d5a1f10855042bf754b3.
    
    Reason for revert: Regresses on fuzzer because it doesn't handle glyphs wider than 32K correctly
    
    Original change's description:
    > Convert the CPU mask case to use prepareForDrawing
    >
    > Change-Id: I3a36084544e12730f4815dbf5b6c78a1cd719f1b
    > Reviewed-on: https://skia-review.googlesource.com/c/skia/+/207761
    > Reviewed-by: Ben Wagner <bungeman@google.com>
    > Commit-Queue: Herb Derby <herb@google.com>
    
    TBR=bungeman@google.com,herb@google.com
    
    Change-Id: I046f24fd541dd121b8fa65ff5811c3055a28215d
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/208041
    Commit-Queue: Herb Derby <herb@google.com>
    Reviewed-by: Herb Derby <herb@google.com>

diff --git a/src/core/SkGlyphRunPainter.cpp b/src/core/SkGlyphRunPainter.cpp
index 4dc8d8f047..0d901cfbe0 100644
--- a/src/core/SkGlyphRunPainter.cpp
+++ b/src/core/SkGlyphRunPainter.cpp
@@ -138,140 +138,152 @@ static bool check_glyph_position(SkPoint position) {
              lt(position.fY, INT_MIN - (INT16_MIN + 0 /*UINT16_MIN*/)));
 }
 
+static SkMask create_mask(const SkGlyph& glyph, SkPoint position, const void* image) {
+    SkMask mask;
+    int left = SkScalarFloorToInt(position.fX);
+    int top  = SkScalarFloorToInt(position.fY);
+
+    left += glyph.fLeft;
+    top  += glyph.fTop;
+
+    int right   = left + glyph.fWidth;
+    int bottom  = top  + glyph.fHeight;
+
+    mask.fBounds.set(left, top, right, bottom);
+    SkASSERT(!mask.fBounds.isEmpty());
+
+    mask.fImage    = (uint8_t*)image;
+    mask.fRowBytes = glyph.rowBytes();
+    mask.fFormat   = static_cast<SkMask::Format>(glyph.fMaskFormat);
+
+    return mask;
+}
+
 void SkGlyphRunListPainter::drawForBitmapDevice(
         const SkGlyphRunList& glyphRunList, const SkMatrix& deviceMatrix,
         const BitmapDevicePainter* bitmapDevice) {
     ScopedBuffers _ = this->ensureBuffers(glyphRunList);
 
     const SkPaint& runPaint = glyphRunList.paint();
     // The bitmap blitters can only draw lcd text to a N32 bitmap in srcOver. Otherwise,
     // convert the lcd text into A8 text. The props communicates this to the scaler.
     auto& props = (kN32_SkColorType == fColorType && runPaint.isSrcOver())
                   ? fDeviceProps
                   : fBitmapFallbackProps;
 
     SkPoint origin = glyphRunList.origin();
     for (auto& glyphRun : glyphRunList) {
         const SkFont& runFont = glyphRun.font();
         auto runSize = glyphRun.runSize();
 
         if (ShouldDrawAsPath(runPaint, runFont, deviceMatrix)) {
             SkMatrix::MakeTrans(origin.x(), origin.y()).mapPoints(
                     fPositions, glyphRun.positions().data(), runSize);
             // setup our std pathPaint, in hopes of getting hits in the cache
             SkPaint pathPaint(runPaint);
             SkFont  pathFont{runFont};
             SkScalar textScale = pathFont.setupForAsPaths(&pathPaint);
 
             // The sub-pixel position will always happen when transforming to the screen.
             pathFont.setSubpixel(false);
 
             SkAutoDescriptor ad;
             SkScalerContextEffects effects;
             SkScalerContext::CreateDescriptorAndEffectsUsingPaint(pathFont,
                                                                   pathPaint,
                                                                   props,
                                                                   fScalerContextFlags,
                                                                   SkMatrix::I(),
                                                                   &ad,
                                                                   &effects);
 
             SkScopedStrike strike =
                     fStrikeCache->findOrCreateScopedStrike(
                             *ad.getDesc(), effects,*pathFont.getTypefaceOrDefault());
 
             auto glyphPosSpan = strike->prepareForDrawing(
                     glyphRun.glyphsIDs().data(), fPositions, glyphRun.runSize(), 0, fGlyphPos);
 
             SkTDArray<SkPathPos> pathsAndPositions;
             pathsAndPositions.setReserve(glyphPosSpan.size());
             for (const SkGlyphPos& glyphPos : glyphPosSpan) {
                 const SkGlyph& glyph = *glyphPos.glyph;
                 SkPoint position = glyphPos.position;
                 if (check_glyph_position(position)
                     && !glyph.isEmpty()
                     && glyph.fMaskFormat != SkMask::kARGB32_Format
                     && strike->decideCouldDrawFromPath(glyph))
                 {
                     // Only draw a path if it exists, and this is not a color glyph.
                     pathsAndPositions.push_back(SkPathPos{glyph.path(), position});
                 } else {
                     // TODO: this is here to have chrome layout tests pass. Remove this when
                     //  fallback for CPU works.
                     if (check_glyph_position(position)
                         && !glyph.isEmpty()
                         && strike->decideCouldDrawFromPath(glyph))
                     {
                         pathsAndPositions.push_back(SkPathPos{glyph.path(), position});
                     }
                 }
             }
 
             // The paint we draw paths with must have the same anti-aliasing state as the runFont
             // allowing the paths to have the same edging as the glyph masks.
             pathPaint = runPaint;
             pathPaint.setAntiAlias(runFont.hasSomeAntiAliasing());
 
             bitmapDevice->paintPaths(
                     SkSpan<const SkPathPos>{pathsAndPositions.begin(), pathsAndPositions.size()},
                     textScale, pathPaint);
         } else {
-            SkAutoDescriptor ad;
-            SkScalerContextEffects effects;
-
-            SkScalerContext::CreateDescriptorAndEffectsUsingPaint(
-                    runFont, runPaint, props, fScalerContextFlags, deviceMatrix, &ad,
-                    &effects);
-
-            SkTypeface* typeface = runFont.getTypefaceOrDefault();
-            SkScopedStrike strike =
-                    fStrikeCache->findOrCreateScopedStrike(*ad.getDesc(), effects, *typeface);
+            auto cache = SkStrikeCache::FindOrCreateStrikeExclusive(
+                                        runFont, runPaint, props,
+                                        fScalerContextFlags, deviceMatrix);
 
             // Add rounding and origin.
             SkMatrix matrix = deviceMatrix;
             matrix.preTranslate(origin.x(), origin.y());
-            SkPoint rounding = strike->rounding();
+            SkPoint rounding = cache->rounding();
             matrix.postTranslate(rounding.x(), rounding.y());
             matrix.mapPoints(fPositions, glyphRun.positions().data(), runSize);
 
-            SkSpan<const SkGlyphPos> glyphPosSpan = strike->prepareForDrawing(
-                    glyphRun.glyphsIDs().data(), fPositions, glyphRun.runSize(),
-                    std::numeric_limits<int>::max(), fGlyphPos);
-
             SkTDArray<SkMask> masks;
-            masks.setReserve(glyphPosSpan.size());
-
-            for (const SkGlyphPos& glyphPos : glyphPosSpan) {
-                const SkGlyph& glyph = *glyphPos.glyph;
-                SkPoint position = glyphPos.position;
-                if (check_glyph_position(position) && !glyph.isEmpty()) {
-                    masks.push_back(glyph.mask(position));
+            masks.setReserve(runSize);
+            const SkPoint* positionCursor = fPositions;
+            for (auto glyphID : glyphRun.glyphsIDs()) {
+                auto position = *positionCursor++;
+                if (check_glyph_position(position)) {
+                    const SkGlyph& glyph = cache->getGlyphMetrics(glyphID, position);
+                    const void* image;
+                    if (!glyph.isEmpty() && (image = cache->findImage(glyph))) {
+                        masks.push_back(create_mask(glyph, position, image));
+                    }
                 }
             }
-
             bitmapDevice->paintMasks(SkSpan<const SkMask>{masks.begin(), masks.size()}, runPaint);
         }
     }
 }
 
 // Getting glyphs to the screen in a fallback situation can be complex. Here is the set of
 // transformations that have to happen. Normally, they would all be accommodated by the font
 // scaler, but the atlas has an upper limit to the glyphs it can handle. So the GPU is used to
 // make up the difference from the smaller atlas size to the larger size needed by the final
 // transform. Here are the transformations that are applied.
 //
 // final transform = [view matrix] * [text scale] * [text size]
 //
 // There are three cases:
 // * Go Fast - view matrix is scale and translate, and all the glyphs are small enough
 //   Just scale the positions, and have the glyph cache handle the view matrix transformation.
 //   The text scale is 1.
 // * It's complicated - view matrix is not scale and translate, and the glyphs are small enough
 //   The glyph cache does not handle the view matrix, but stores the glyphs at the text size
 //   specified by the run paint. The GPU handles the rotation, etc. specified by the view matrix.
 //   The text scale is 1.
 // * Too big - The glyphs are too big to fit in the atlas
 //   Reduce the text size so the glyphs will fit in the atlas, but don't apply any
 //   transformations from the view matrix. Calculate a text scale based on that reduction. This
 //   scale factor is used to increase the size of the destination rectangles. The destination
 //   rectangles are then scaled, rotated, etc. by the GPU using the view matrix.
