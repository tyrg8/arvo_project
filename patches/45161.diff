commit 7ed3cc413635b51ea34006cd6094a8cd8455b526
Author: Victor M. Alvarez <vmalvarez@virustotal.com>
Date:   Wed Mar 2 16:39:56 2022 +0100

    Fix buffer overrun in dotnet module.

diff --git a/libyara/modules/dotnet/dotnet.c b/libyara/modules/dotnet/dotnet.c
index f9474b61..112e6fb0 100644
--- a/libyara/modules/dotnet/dotnet.c
+++ b/libyara/modules/dotnet/dotnet.c
@@ -343,1114 +343,1113 @@ STREAMS dotnet_parse_stream_headers(
 void dotnet_parse_tilde_2(
     PE* pe,
     PTILDE_HEADER tilde_header,
     int64_t resource_base,
     int64_t metadata_root,
     ROWS rows,
     INDEX_SIZES index_sizes,
     PSTREAMS streams)
 {
   PMODULE_TABLE module_table;
   PASSEMBLY_TABLE assembly_table;
   PASSEMBLYREF_TABLE assemblyref_table;
   PFIELDRVA_TABLE fieldrva_table;
   PMANIFESTRESOURCE_TABLE manifestresource_table;
   PMODULEREF_TABLE moduleref_table;
   PCUSTOMATTRIBUTE_TABLE customattribute_table;
   PCONSTANT_TABLE constant_table;
   DWORD resource_size, implementation;
 
   char* name;
   char typelib[MAX_TYPELIB_SIZE + 1];
   unsigned int i;
   int bit_check;
   int matched_bits = 0;
 
   int64_t resource_offset, field_offset;
   uint32_t row_size, row_count, counter;
 
   const uint8_t* string_offset;
   const uint8_t* blob_offset;
 
   uint32_t num_rows = 0;
   uint32_t valid_rows = 0;
   uint32_t* row_offset = NULL;
   uint8_t* table_offset = NULL;
   uint8_t* row_ptr = NULL;
 
   // These are pointers and row sizes for tables of interest to us for special
   // parsing. For example, we are interested in pulling out any CustomAttributes
   // that are GUIDs so we need to be able to walk these tables. To find GUID
   // CustomAttributes you need to walk the CustomAttribute table and look for
   // any row with a Parent that indexes into the Assembly table and Type indexes
   // into the MemberRef table. Then you follow the index into the MemberRef
   // table and check the Class to make sure it indexes into TypeRef table. If it
   // does you follow that index and make sure the Name is "GuidAttribute". If
   // all that is valid then you can take the Value from the CustomAttribute
   // table to find out the index into the Blob stream and parse that.
   //
   // Luckily we can abuse the fact that the order of the tables is guaranteed
   // consistent (though some may not exist, but if they do exist they must exist
   // in a certain order). The order is defined by their position in the Valid
   // member of the tilde_header structure. By the time we are parsing the
   // CustomAttribute table we have already recorded the location of the TypeRef
   // and MemberRef tables, so we can follow the chain back up from
   // CustomAttribute through MemberRef to TypeRef.
 
   uint8_t* typeref_ptr = NULL;
   uint8_t* memberref_ptr = NULL;
   uint32_t typeref_row_size = 0;
   uint32_t memberref_row_size = 0;
   uint8_t* typeref_row = NULL;
   uint8_t* memberref_row = NULL;
 
   DWORD type_index;
   DWORD class_index;
   BLOB_PARSE_RESULT blob_result;
   DWORD blob_index;
   DWORD blob_length;
 
   // These are used to determine the size of coded indexes, which are the
   // dynamically sized columns for some tables. The coded indexes are
   // documented in ECMA-335 Section II.24.2.6.
   uint8_t index_size, index_size2;
 
   // Number of rows is the number of bits set to 1 in Valid.
   // Should use this technique:
   // http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan
   for (i = 0; i < 64; i++)
     valid_rows += ((yr_le64toh(tilde_header->Valid) >> i) & 0x01);
 
   row_offset = (uint32_t*) (tilde_header + 1);
   table_offset = (uint8_t*) row_offset;
   table_offset += sizeof(uint32_t) * valid_rows;
 
 #define DOTNET_STRING_INDEX(Name)                       \
   index_sizes.string == 2 ? yr_le16toh(Name.Name_Short) \
                           : yr_le32toh(Name.Name_Long)
 
   string_offset = pe->data + metadata_root +
                   yr_le32toh(streams->string->Offset);
 
   // Now walk again this time parsing out what we care about.
   for (bit_check = 0; bit_check < 64; bit_check++)
   {
     // If the Valid bit is not set for this table, skip it...
     if (!((yr_le64toh(tilde_header->Valid) >> bit_check) & 0x01))
       continue;
 
+    if (!fits_in_pe(pe, row_offset + matched_bits, sizeof(uint32_t)))
+      return;
+
     num_rows = yr_le32toh(*(row_offset + matched_bits));
 
     // Make sure that num_rows has a reasonable value. For example
     // edc05e49dd3810be67942b983455fd43 sets a large value for number of
     // rows for the BIT_MODULE section.
     if (num_rows > 10000)
       return;
 
-    // Make sure that table_offset is within the bounds of the PE.
-    if (!fits_in_pe(pe, table_offset, 1))
-      return;
-
     // Those tables which exist, but that we don't care about must be
     // skipped.
     //
     // Sadly, given the dynamic sizes of some columns we can not have well
     // defined structures for all tables and use them accordingly. To deal
     // with this manually move the table_offset pointer by the appropriate
     // number of bytes as described in the documentation for each table.
     //
     // The table structures are documented in ECMA-335 Section II.22.
 
     switch (bit_check)
     {
     case BIT_MODULE:
       module_table = (PMODULE_TABLE) table_offset;
 
       if (!struct_fits_in_pe(pe, module_table, MODULE_TABLE))
         break;
 
       name = pe_get_dotnet_string(
           pe, string_offset, DOTNET_STRING_INDEX(module_table->Name));
 
       if (name != NULL)
         set_string(name, pe->object, "module_name");
 
       table_offset += (2 + index_sizes.string + (index_sizes.guid * 3)) *
                       num_rows;
       break;
 
     case BIT_TYPEREF:
       row_count = max_rows(
           4,
           yr_le32toh(rows.module),
           yr_le32toh(rows.moduleref),
           yr_le32toh(rows.assemblyref),
           yr_le32toh(rows.typeref));
 
       if (row_count > (0xFFFF >> 0x02))
         index_size = 4;
       else
         index_size = 2;
 
       row_size = (index_size + (index_sizes.string * 2));
       typeref_row_size = row_size;
       typeref_ptr = table_offset;
       table_offset += row_size * num_rows;
       break;
 
     case BIT_TYPEDEF:
       row_count = max_rows(
           3,
           yr_le32toh(rows.typedef_),
           yr_le32toh(rows.typeref),
           yr_le32toh(rows.typespec));
 
       if (row_count > (0xFFFF >> 0x02))
         index_size = 4;
       else
         index_size = 2;
 
       table_offset += (4 + (index_sizes.string * 2) + index_size +
                        index_sizes.field + index_sizes.methoddef) *
                       num_rows;
       break;
 
     case BIT_FIELDPTR:
       // This one is not documented in ECMA-335.
       table_offset += (index_sizes.field) * num_rows;
       break;
 
     case BIT_FIELD:
       table_offset += (2 + (index_sizes.string) + index_sizes.blob) * num_rows;
       break;
 
     case BIT_METHODDEFPTR:
       // This one is not documented in ECMA-335.
       table_offset += (index_sizes.methoddef) * num_rows;
       break;
 
     case BIT_METHODDEF:
       table_offset += (4 + 2 + 2 + index_sizes.string + index_sizes.blob +
                        index_sizes.param) *
                       num_rows;
       break;
 
     case BIT_PARAM:
       table_offset += (2 + 2 + index_sizes.string) * num_rows;
       break;
 
     case BIT_INTERFACEIMPL:
       row_count = max_rows(
           3,
           yr_le32toh(rows.typedef_),
           yr_le32toh(rows.typeref),
           yr_le32toh(rows.typespec));
 
       if (row_count > (0xFFFF >> 0x02))
         index_size = 4;
       else
         index_size = 2;
 
       table_offset += (index_sizes.typedef_ + index_size) * num_rows;
       break;
 
     case BIT_MEMBERREF:
       row_count = max_rows(
           4,
           yr_le32toh(rows.methoddef),
           yr_le32toh(rows.moduleref),
           yr_le32toh(rows.typeref),
           yr_le32toh(rows.typespec));
 
       if (row_count > (0xFFFF >> 0x03))
         index_size = 4;
       else
         index_size = 2;
 
       row_size = (index_size + index_sizes.string + index_sizes.blob);
       memberref_row_size = row_size;
       memberref_ptr = table_offset;
       table_offset += row_size * num_rows;
       break;
 
     case BIT_CONSTANT:
       row_count = max_rows(
           3,
           yr_le32toh(rows.param),
           yr_le32toh(rows.field),
           yr_le32toh(rows.property));
 
       if (row_count > (0xFFFF >> 0x02))
         index_size = 4;
       else
         index_size = 2;
 
       // Using 'i' is insufficent since we may skip certain constants and
       // it would give an inaccurate count in that case.
       counter = 0;
       row_size = (1 + 1 + index_size + index_sizes.blob);
       row_ptr = table_offset;
 
       for (i = 0; i < num_rows; i++)
       {
         if (!fits_in_pe(pe, row_ptr, row_size))
           break;
 
         constant_table = (PCONSTANT_TABLE) row_ptr;
 
         // Only look for constants of type string.
         if (yr_le32toh(constant_table->Type) != ELEMENT_TYPE_STRING)
         {
           row_ptr += row_size;
           continue;
         }
 
         // Get the blob offset and pull it out of the blob table.
         blob_offset = ((uint8_t*) constant_table) + 2 + index_size;
 
         if (index_sizes.blob == 4)
           blob_index = *(DWORD*) blob_offset;
         else
           // Cast the value (index into blob table) to a 32bit value.
           blob_index = (DWORD) (*(WORD*) blob_offset);
 
         // Everything checks out. Make sure the index into the blob field
         // is valid (non-null and within range).
         blob_offset = pe->data + metadata_root +
                       yr_le32toh(streams->blob->Offset) + blob_index;
 
         blob_result = dotnet_parse_blob_entry(pe, blob_offset);
 
         if (blob_result.size == 0)
         {
           row_ptr += row_size;
           continue;
         }
 
         blob_length = blob_result.length;
         blob_offset += blob_result.size;
 
         // Quick sanity check to make sure the blob entry is within bounds.
         if (blob_offset + blob_length >= pe->data + pe->data_size)
         {
           row_ptr += row_size;
           continue;
         }
 
         set_sized_string(
             (char*) blob_offset,
             blob_result.length,
             pe->object,
             "constants[%i]",
             counter);
 
         counter++;
         row_ptr += row_size;
       }
 
       set_integer(counter, pe->object, "number_of_constants");
       table_offset += row_size * num_rows;
       break;
 
     case BIT_CUSTOMATTRIBUTE:
       // index_size is size of the parent column.
       row_count = max_rows(
           21,
           yr_le32toh(rows.methoddef),
           yr_le32toh(rows.field),
           yr_le32toh(rows.typeref),
           yr_le32toh(rows.typedef_),
           yr_le32toh(rows.param),
           yr_le32toh(rows.interfaceimpl),
           yr_le32toh(rows.memberref),
           yr_le32toh(rows.module),
           yr_le32toh(rows.property),
           yr_le32toh(rows.event),
           yr_le32toh(rows.standalonesig),
           yr_le32toh(rows.moduleref),
           yr_le32toh(rows.typespec),
           yr_le32toh(rows.assembly),
           yr_le32toh(rows.assemblyref),
           yr_le32toh(rows.file),
           yr_le32toh(rows.exportedtype),
           yr_le32toh(rows.manifestresource),
           yr_le32toh(rows.genericparam),
           yr_le32toh(rows.genericparamconstraint),
           yr_le32toh(rows.methodspec));
 
       if (row_count > (0xFFFF >> 0x05))
         index_size = 4;
       else
         index_size = 2;
 
       // index_size2 is size of the type column.
       row_count = max_rows(
           2, yr_le32toh(rows.methoddef), yr_le32toh(rows.memberref));
 
       if (row_count > (0xFFFF >> 0x03))
         index_size2 = 4;
       else
         index_size2 = 2;
 
       row_size = (index_size + index_size2 + index_sizes.blob);
 
       if (typeref_ptr != NULL && memberref_ptr != NULL)
       {
         row_ptr = table_offset;
 
         for (i = 0; i < num_rows; i++)
         {
           if (!fits_in_pe(pe, row_ptr, row_size))
             break;
 
           // Check the Parent field.
           customattribute_table = (PCUSTOMATTRIBUTE_TABLE) row_ptr;
 
           if (index_size == 4)
           {
             // Low 5 bits tell us what this is an index into. Remaining bits
             // tell us the index value.
             // Parent must be an index into the Assembly (0x0E) table.
             if ((*(DWORD*) customattribute_table & 0x1F) != 0x0E)
             {
               row_ptr += row_size;
               continue;
             }
           }
           else
           {
             // Low 5 bits tell us what this is an index into. Remaining bits
             // tell us the index value.
             // Parent must be an index into the Assembly (0x0E) table.
             if ((*(WORD*) customattribute_table & 0x1F) != 0x0E)
             {
               row_ptr += row_size;
               continue;
             }
           }
 
           // Check the Type field.
           customattribute_table =
               (PCUSTOMATTRIBUTE_TABLE) (row_ptr + index_size);
 
           if (index_size2 == 4)
           {
             // Low 3 bits tell us what this is an index into. Remaining bits
             // tell us the index value. Only values 2 and 3 are defined.
             // Type must be an index into the MemberRef table.
             if ((*(DWORD*) customattribute_table & 0x07) != 0x03)
             {
               row_ptr += row_size;
               continue;
             }
 
             type_index = *(DWORD*) customattribute_table >> 3;
           }
           else
           {
             // Low 3 bits tell us what this is an index into. Remaining bits
             // tell us the index value. Only values 2 and 3 are defined.
             // Type must be an index into the MemberRef table.
             if ((*(WORD*) customattribute_table & 0x07) != 0x03)
             {
               row_ptr += row_size;
               continue;
             }
 
             // Cast the index to a 32bit value.
             type_index = (DWORD) ((*(WORD*) customattribute_table >> 3));
           }
 
           if (type_index > 0)
             type_index--;
 
           // Now follow the Type index into the MemberRef table.
           memberref_row = memberref_ptr + (memberref_row_size * type_index);
 
           if (!fits_in_pe(pe, memberref_row, memberref_row_size))
             break;
 
           if (index_sizes.memberref == 4)
           {
             // Low 3 bits tell us what this is an index into. Remaining bits
             // tell us the index value. Class must be an index into the
             // TypeRef table.
             if ((*(DWORD*) memberref_row & 0x07) != 0x01)
             {
               row_ptr += row_size;
               continue;
             }
 
             class_index = *(DWORD*) memberref_row >> 3;
           }
           else
           {
             // Low 3 bits tell us what this is an index into. Remaining bits
             // tell us the index value. Class must be an index into the
             // TypeRef table.
             if ((*(WORD*) memberref_row & 0x07) != 0x01)
             {
               row_ptr += row_size;
               continue;
             }
 
             // Cast the index to a 32bit value.
             class_index = (DWORD) (*(WORD*) memberref_row >> 3);
           }
 
           if (class_index > 0)
             class_index--;
 
           // Now follow the Class index into the TypeRef table.
           typeref_row = typeref_ptr + (typeref_row_size * class_index);
 
           if (!fits_in_pe(pe, typeref_row, typeref_row_size))
             break;
 
           // Skip over the ResolutionScope and check the Name field,
           // which is an index into the Strings heap.
           row_count = max_rows(
               4,
               yr_le32toh(rows.module),
               yr_le32toh(rows.moduleref),
               yr_le32toh(rows.assemblyref),
               yr_le32toh(rows.typeref));
 
           if (row_count > (0xFFFF >> 0x02))
             typeref_row += 4;
           else
             typeref_row += 2;
 
           if (index_sizes.string == 4)
           {
             name = pe_get_dotnet_string(
                 pe, string_offset, *(DWORD*) typeref_row);
           }
           else
           {
             name = pe_get_dotnet_string(
                 pe, string_offset, *(WORD*) typeref_row);
           }
 
           if (name != NULL && strncmp(name, "GuidAttribute", 13) != 0)
           {
             row_ptr += row_size;
             continue;
           }
 
           // Get the Value field.
           customattribute_table =
               (PCUSTOMATTRIBUTE_TABLE) (row_ptr + index_size + index_size2);
 
           if (index_sizes.blob == 4)
             blob_index = *(DWORD*) customattribute_table;
           else
             // Cast the value (index into blob table) to a 32bit value.
             blob_index = (DWORD) (*(WORD*) customattribute_table);
 
           // Everything checks out. Make sure the index into the blob field
           // is valid (non-null and within range).
           blob_offset = pe->data + metadata_root +
                         yr_le32toh(streams->blob->Offset) + blob_index;
 
           // If index into blob is 0 or past the end of the blob stream, skip
           // it. We don't know the size of the blob entry yet because that is
           // encoded in the start.
           if (blob_index == 0x00 || blob_offset >= pe->data + pe->data_size)
           {
             row_ptr += row_size;
             continue;
           }
 
           blob_result = dotnet_parse_blob_entry(pe, blob_offset);
 
           if (blob_result.size == 0)
           {
             row_ptr += row_size;
             continue;
           }
 
           blob_length = blob_result.length;
           blob_offset += blob_result.size;
 
           // Quick sanity check to make sure the blob entry is within bounds
           // and its length is at least 3 (2 bytes for the 16 bits prolog and
           // 1 byte for the string length)
           if (blob_length < 3 ||
               blob_offset + blob_length >= pe->data + pe->data_size)
           {
             row_ptr += row_size;
             continue;
           }
 
           // Custom attributes MUST have a 16 bit prolog of 0x0001
           if (*(WORD*) blob_offset != 0x0001)
           {
             row_ptr += row_size;
             continue;
           }
 
           // The next byte after the 16 bit prolog is the length of the string.
           blob_offset += 2;
           uint8_t str_len = *blob_offset;
 
           // Increment blob_offset so that it points to the first byte of the
           // string.
           blob_offset += 1;
 
           if (blob_offset + str_len > pe->data + pe->data_size)
           {
             row_ptr += row_size;
             continue;
           }
 
           if (*blob_offset == 0xFF || *blob_offset == 0x00)
           {
             typelib[0] = '\0';
           }
           else
           {
             strncpy(typelib, (char*) blob_offset, str_len);
             typelib[str_len] = '\0';
           }
 
           set_string(typelib, pe->object, "typelib");
 
           row_ptr += row_size;
         }
       }
 
       table_offset += row_size * num_rows;
       break;
 
     case BIT_FIELDMARSHAL:
       row_count = max_rows(2, yr_le32toh(rows.field), yr_le32toh(rows.param));
 
       if (row_count > (0xFFFF >> 0x01))
         index_size = 4;
       else
         index_size = 2;
 
       table_offset += (index_size + index_sizes.blob) * num_rows;
       break;
 
     case BIT_DECLSECURITY:
       row_count = max_rows(
           3,
           yr_le32toh(rows.typedef_),
           yr_le32toh(rows.methoddef),
           yr_le32toh(rows.assembly));
 
       if (row_count > (0xFFFF >> 0x02))
         index_size = 4;
       else
         index_size = 2;
 
       table_offset += (2 + index_size + index_sizes.blob) * num_rows;
       break;
 
     case BIT_CLASSLAYOUT:
       table_offset += (2 + 4 + index_sizes.typedef_) * num_rows;
       break;
 
     case BIT_FIELDLAYOUT:
       table_offset += (4 + index_sizes.field) * num_rows;
       break;
 
     case BIT_STANDALONESIG:
       table_offset += (index_sizes.blob) * num_rows;
       break;
 
     case BIT_EVENTMAP:
       table_offset += (index_sizes.typedef_ + index_sizes.event) * num_rows;
       break;
 
     case BIT_EVENTPTR:
       // This one is not documented in ECMA-335.
       table_offset += (index_sizes.event) * num_rows;
       break;
 
     case BIT_EVENT:
       row_count = max_rows(
           3,
           yr_le32toh(rows.typedef_),
           yr_le32toh(rows.typeref),
           yr_le32toh(rows.typespec));
 
       if (row_count > (0xFFFF >> 0x02))
         index_size = 4;
       else
         index_size = 2;
 
       table_offset += (2 + index_sizes.string + index_size) * num_rows;
       break;
 
     case BIT_PROPERTYMAP:
       table_offset += (index_sizes.typedef_ + index_sizes.property) * num_rows;
       break;
 
     case BIT_PROPERTYPTR:
       // This one is not documented in ECMA-335.
       table_offset += (index_sizes.property) * num_rows;
       break;
 
     case BIT_PROPERTY:
       table_offset += (2 + index_sizes.string + index_sizes.blob) * num_rows;
       break;
 
     case BIT_METHODSEMANTICS:
       row_count = max_rows(
           2, yr_le32toh(rows.event), yr_le32toh(rows.property));
 
       if (row_count > (0xFFFF >> 0x01))
         index_size = 4;
       else
         index_size = 2;
 
       table_offset += (2 + index_sizes.methoddef + index_size) * num_rows;
       break;
 
     case BIT_METHODIMPL:
       row_count = max_rows(
           2, yr_le32toh(rows.methoddef), yr_le32toh(rows.memberref));
 
       if (row_count > (0xFFFF >> 0x01))
         index_size = 4;
       else
         index_size = 2;
 
       table_offset += (index_sizes.typedef_ + (index_size * 2)) * num_rows;
       break;
 
     case BIT_MODULEREF:
       row_ptr = table_offset;
 
       // Can't use 'i' here because we only set the string if it is not
       // NULL. Instead use 'counter'.
       counter = 0;
 
       for (i = 0; i < num_rows; i++)
       {
         moduleref_table = (PMODULEREF_TABLE) row_ptr;
 
         if (!struct_fits_in_pe(pe, moduleref_table, MODULEREF_TABLE))
           break;
 
         name = pe_get_dotnet_string(
             pe, string_offset, DOTNET_STRING_INDEX(moduleref_table->Name));
 
         if (name != NULL)
         {
           set_string(name, pe->object, "modulerefs[%i]", counter);
           counter++;
         }
 
         row_ptr += index_sizes.string;
       }
 
       set_integer(counter, pe->object, "number_of_modulerefs");
 
       table_offset += (index_sizes.string) * num_rows;
       break;
 
     case BIT_TYPESPEC:
       table_offset += (index_sizes.blob) * num_rows;
       break;
 
     case BIT_IMPLMAP:
       row_count = max_rows(
           2, yr_le32toh(rows.field), yr_le32toh(rows.methoddef));
 
       if (row_count > (0xFFFF >> 0x01))
         index_size = 4;
       else
         index_size = 2;
 
       table_offset += (2 + index_size + index_sizes.string +
                        index_sizes.moduleref) *
                       num_rows;
       break;
 
     case BIT_FIELDRVA:
       row_size = 4 + index_sizes.field;
       row_ptr = table_offset;
 
       // Can't use 'i' here because we only set the field offset if it is
       // valid. Instead use 'counter'.
       counter = 0;
 
       for (i = 0; i < num_rows; i++)
       {
         fieldrva_table = (PFIELDRVA_TABLE) row_ptr;
 
         if (!struct_fits_in_pe(pe, fieldrva_table, FIELDRVA_TABLE))
           break;
 
         field_offset = pe_rva_to_offset(pe, fieldrva_table->RVA);
 
         if (field_offset >= 0)
         {
           set_integer(field_offset, pe->object, "field_offsets[%i]", counter);
           counter++;
         }
 
         row_ptr += row_size;
       }
 
       set_integer(counter, pe->object, "number_of_field_offsets");
 
       table_offset += row_size * num_rows;
       break;
 
     case BIT_ENCLOG:
       table_offset += (4 + 4) * num_rows;
       break;
 
     case BIT_ENCMAP:
       table_offset += (4) * num_rows;
       break;
 
     case BIT_ASSEMBLY:
       row_size =
           (4 + 2 + 2 + 2 + 2 + 4 + index_sizes.blob + (index_sizes.string * 2));
 
       if (!fits_in_pe(pe, table_offset, row_size))
         break;
 
       row_ptr = table_offset;
       assembly_table = (PASSEMBLY_TABLE) table_offset;
 
       set_integer(
           yr_le16toh(assembly_table->MajorVersion),
           pe->object,
           "assembly.version.major");
       set_integer(
           yr_le16toh(assembly_table->MinorVersion),
           pe->object,
           "assembly.version.minor");
       set_integer(
           yr_le16toh(assembly_table->BuildNumber),
           pe->object,
           "assembly.version.build_number");
       set_integer(
           yr_le16toh(assembly_table->RevisionNumber),
           pe->object,
           "assembly.version.revision_number");
 
       // Can't use assembly_table here because the PublicKey comes before
       // Name and is a variable length field.
 
       if (index_sizes.string == 4)
         name = pe_get_dotnet_string(
             pe,
             string_offset,
             yr_le32toh(*(
                 DWORD*) (row_ptr + 4 + 2 + 2 + 2 + 2 + 4 + index_sizes.blob)));
       else
         name = pe_get_dotnet_string(
             pe,
             string_offset,
             yr_le16toh(
                 *(WORD*) (row_ptr + 4 + 2 + 2 + 2 + 2 + 4 + index_sizes.blob)));
 
       if (name != NULL)
         set_string(name, pe->object, "assembly.name");
 
       // Culture comes after Name.
       if (index_sizes.string == 4)
       {
         name = pe_get_dotnet_string(
               pe,
               string_offset,
               yr_le32toh(*(DWORD*) (
                   row_ptr + 4 + 2 + 2 + 2 + 2 + 4 +
                   index_sizes.blob +
                   index_sizes.string)));
       }
       else
       {
         name = pe_get_dotnet_string(
               pe,
               string_offset,
               yr_le16toh(*(WORD*) (
                   row_ptr + 4 + 2 + 2 + 2 + 2 + 4 +
                   index_sizes.blob +
                   index_sizes.string)));
       }
 
       // Sometimes it will be a zero length string. This is technically
       // against the specification but happens from time to time.
       if (name != NULL && strlen(name) > 0)
         set_string(name, pe->object, "assembly.culture");
 
       table_offset += row_size * num_rows;
       break;
 
     case BIT_ASSEMBLYPROCESSOR:
       table_offset += (4) * num_rows;
       break;
 
     case BIT_ASSEMBLYOS:
       table_offset += (4 + 4 + 4) * num_rows;
       break;
 
     case BIT_ASSEMBLYREF:
       row_size =
           (2 + 2 + 2 + 2 + 4 + (index_sizes.blob * 2) +
            (index_sizes.string * 2));
 
       row_ptr = table_offset;
 
       for (i = 0; i < num_rows; i++)
       {
         if (!fits_in_pe(pe, row_ptr, row_size))
           break;
 
         assemblyref_table = (PASSEMBLYREF_TABLE) row_ptr;
 
         set_integer(
             yr_le16toh(assemblyref_table->MajorVersion),
             pe->object,
             "assembly_refs[%i].version.major",
             i);
         set_integer(
             yr_le16toh(assemblyref_table->MinorVersion),
             pe->object,
             "assembly_refs[%i].version.minor",
             i);
         set_integer(
             yr_le16toh(assemblyref_table->BuildNumber),
             pe->object,
             "assembly_refs[%i].version.build_number",
             i);
         set_integer(
             yr_le16toh(assemblyref_table->RevisionNumber),
             pe->object,
             "assembly_refs[%i].version.revision_number",
             i);
 
         blob_offset = pe->data + metadata_root +
                       yr_le32toh(streams->blob->Offset);
 
         if (index_sizes.blob == 4)
           blob_offset += yr_le32toh(
               assemblyref_table->PublicKeyOrToken.PublicKeyOrToken_Long);
         else
           blob_offset += yr_le16toh(
               assemblyref_table->PublicKeyOrToken.PublicKeyOrToken_Short);
 
         blob_result = dotnet_parse_blob_entry(pe, blob_offset);
         blob_offset += blob_result.size;
 
         if (blob_result.size == 0 ||
             !fits_in_pe(pe, blob_offset, blob_result.length))
         {
           row_ptr += row_size;
           continue;
         }
 
         // Avoid empty strings.
         if (blob_result.length > 0)
         {
           set_sized_string(
               (char*) blob_offset,
               blob_result.length,
               pe->object,
               "assembly_refs[%i].public_key_or_token",
               i);
         }
 
         // Can't use assemblyref_table here because the PublicKey comes before
         // Name and is a variable length field.
 
         if (index_sizes.string == 4)
           name = pe_get_dotnet_string(
               pe,
               string_offset,
               yr_le32toh(
                   *(DWORD*) (row_ptr + 2 + 2 + 2 + 2 + 4 + index_sizes.blob)));
         else
           name = pe_get_dotnet_string(
               pe,
               string_offset,
               yr_le16toh(
                   *(WORD*) (row_ptr + 2 + 2 + 2 + 2 + 4 + index_sizes.blob)));
 
         if (name != NULL)
           set_string(name, pe->object, "assembly_refs[%i].name", i);
 
         row_ptr += row_size;
       }
 
       set_integer(i, pe->object, "number_of_assembly_refs");
       table_offset += row_size * num_rows;
       break;
 
     case BIT_ASSEMBLYREFPROCESSOR:
       table_offset += (4 + index_sizes.assemblyrefprocessor) * num_rows;
       break;
 
     case BIT_ASSEMBLYREFOS:
       table_offset += (4 + 4 + 4 + index_sizes.assemblyref) * num_rows;
       break;
 
     case BIT_FILE:
       table_offset += (4 + index_sizes.string + index_sizes.blob) * num_rows;
       break;
 
     case BIT_EXPORTEDTYPE:
       row_count = max_rows(
           3,
           yr_le32toh(rows.file),
           yr_le32toh(rows.assemblyref),
           yr_le32toh(rows.exportedtype));
 
       if (row_count > (0xFFFF >> 0x02))
         index_size = 4;
       else
         index_size = 2;
 
       table_offset += (4 + 4 + (index_sizes.string * 2) + index_size) *
                       num_rows;
       break;
 
     case BIT_MANIFESTRESOURCE:
       // This is an Implementation coded index with no 3rd bit specified.
       row_count = max_rows(
           2, yr_le32toh(rows.file), yr_le32toh(rows.assemblyref));
 
       if (row_count > (0xFFFF >> 0x02))
         index_size = 4;
       else
         index_size = 2;
 
       row_size = (4 + 4 + index_sizes.string + index_size);
 
       // Using 'i' is insufficent since we may skip certain resources and
       // it would give an inaccurate count in that case.
       counter = 0;
       row_ptr = table_offset;
 
       // First DWORD is the offset.
       for (i = 0; i < num_rows; i++)
       {
         if (!fits_in_pe(pe, row_ptr, row_size))
           break;
 
         manifestresource_table = (PMANIFESTRESOURCE_TABLE) row_ptr;
         resource_offset = yr_le32toh(manifestresource_table->Offset);
 
         // Only set offset if it is in this file (implementation != 0).
         // Can't use manifestresource_table here because the Name and
         // Implementation fields are variable size.
         if (index_size == 4)
           implementation = yr_le32toh(
               *(DWORD*) (row_ptr + 4 + 4 + index_sizes.string));
         else
           implementation = yr_le16toh(
               *(WORD*) (row_ptr + 4 + 4 + index_sizes.string));
 
         if (implementation != 0)
         {
           row_ptr += row_size;
           continue;
         }
 
         if (!fits_in_pe(
                 pe, pe->data + resource_base + resource_offset, sizeof(DWORD)))
         {
           row_ptr += row_size;
           continue;
         }
 
         resource_size = yr_le32toh(
             *(DWORD*) (pe->data + resource_base + resource_offset));
 
         if (!fits_in_pe(
                 pe, pe->data + resource_base + resource_offset, resource_size))
         {
           row_ptr += row_size;
           continue;
         }
 
         // Add 4 to skip the size.
         set_integer(
             resource_base + resource_offset + 4,
             pe->object,
             "resources[%i].offset",
             counter);
 
         set_integer(resource_size, pe->object, "resources[%i].length", counter);
 
         name = pe_get_dotnet_string(
             pe,
             string_offset,
             DOTNET_STRING_INDEX(manifestresource_table->Name));
 
         if (name != NULL)
           set_string(name, pe->object, "resources[%i].name", counter);
 
         row_ptr += row_size;
         counter++;
       }
 
       set_integer(counter, pe->object, "number_of_resources");
 
       table_offset += row_size * num_rows;
       break;
 
     case BIT_NESTEDCLASS:
       table_offset += (index_sizes.typedef_ * 2) * num_rows;
       break;
 
     case BIT_GENERICPARAM:
       row_count = max_rows(
           2, yr_le32toh(rows.typedef_), yr_le32toh(rows.methoddef));
 
       if (row_count > (0xFFFF >> 0x01))
         index_size = 4;
       else
         index_size = 2;
 
       table_offset += (2 + 2 + index_size + index_sizes.string) * num_rows;
       break;
 
     case BIT_METHODSPEC:
       row_count = max_rows(
           2, yr_le32toh(rows.methoddef), yr_le32toh(rows.memberref));
 
       if (row_count > (0xFFFF >> 0x01))
         index_size = 4;
       else
         index_size = 2;
 
       table_offset += (index_size + index_sizes.blob) * num_rows;
       break;
 
     case BIT_GENERICPARAMCONSTRAINT:
       row_count = max_rows(
           3,
           yr_le32toh(rows.typedef_),
           yr_le32toh(rows.typeref),
           yr_le32toh(rows.typespec));
 
       if (row_count > (0xFFFF >> 0x02))
         index_size = 4;
       else
         index_size = 2;
 
       table_offset += (index_sizes.genericparam + index_size) * num_rows;
       break;
 
     default:
       // printf("Unknown bit: %i\n", bit_check);
       return;
     }
 
     matched_bits++;
   }
 }
 
 // Parsing the #~ stream is done in two parts. The first part (this function)
 // parses enough of the Stream to provide context for the second pass. In
 // particular it is collecting the number of rows for each of the tables. The
 // second part parses the actual tables of interest.
