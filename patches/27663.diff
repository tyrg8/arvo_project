commit 21a59d650dc8d2171cb779184af2c3a1c420c9ba
Author: John Stiles <johnstiles@google.com>
Date:   Fri Nov 20 13:27:04 2020 -0500

    Fix double-negation of constant-value construcors.
    
    Previously, the code which calculated Constructor constant values
    assumed that a constant-value PrefixExpression would always have an
    operand of Constructor. It turns out that another valid case is multiple
    PrefixExpressions nested within each other (representing repeated
    negation). Updated the code to work regardless of the type of the prefix
    operand.
    
    Change-Id: Ic9bf54725ae59330ac817bc4ec7a64def384ab54
    Bug: oss-fuzz:27663
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/337177
    Auto-Submit: John Stiles <johnstiles@google.com>
    Commit-Queue: Brian Osman <brianosman@google.com>
    Reviewed-by: Brian Osman <brianosman@google.com>

diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index be938f12cb..4112a3f04f 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -71,82 +71,83 @@ sksl_fp_tests = [
 sksl_error_tests = [
   "$_tests/sksl/errors/ArgumentCountMismatch.sksl",
   "$_tests/sksl/errors/ArgumentMismatch.sksl",
   "$_tests/sksl/errors/ArgumentModifiers.sksl",
   "$_tests/sksl/errors/ArrayTooManyDimensions.sksl",
   "$_tests/sksl/errors/ArrayUnspecifiedDimensions.sksl",
   "$_tests/sksl/errors/AssignmentTypeMismatch.sksl",
   "$_tests/sksl/errors/BadCaps.sksl",
   "$_tests/sksl/errors/BadFieldAccess.sksl",
   "$_tests/sksl/errors/BadIndex.sksl",
   "$_tests/sksl/errors/BadModifiers.sksl",
   "$_tests/sksl/errors/BinaryTypeCoercion.sksl",
   "$_tests/sksl/errors/BinaryTypeMismatch.sksl",
   "$_tests/sksl/errors/BitShiftFloat.sksl",
   "$_tests/sksl/errors/BitShiftFloatMatrix.sksl",
   "$_tests/sksl/errors/BitShiftFloatVector.sksl",
   "$_tests/sksl/errors/BreakOutsideLoop.sksl",
   "$_tests/sksl/errors/CallNonFunction.sksl",
   "$_tests/sksl/errors/CanExitWithoutReturningValue.sksl",
   "$_tests/sksl/errors/ConstructorArgumentCount.sksl",
   "$_tests/sksl/errors/ConstructorTypeMismatch.sksl",
   "$_tests/sksl/errors/ContinueOutsideLoop.sksl",
   "$_tests/sksl/errors/DivideByZero.sksl",
   "$_tests/sksl/errors/DoTypeMismatch.sksl",
   "$_tests/sksl/errors/DuplicateFunction.sksl",
   "$_tests/sksl/errors/DuplicateOutput.sksl",
   "$_tests/sksl/errors/DuplicateSymbol.sksl",
   "$_tests/sksl/errors/EnumValueMustBeConstInt.sksl",
   "$_tests/sksl/errors/ErrorsInDeadCode.sksl",
   "$_tests/sksl/errors/FieldAfterRuntimeArray.sksl",
   "$_tests/sksl/errors/ForTypeMismatch.sksl",
   "$_tests/sksl/errors/GenericArgumentMismatch.sksl",
   "$_tests/sksl/errors/IfTypeMismatch.sksl",
   "$_tests/sksl/errors/InVarWithInitializerExpression.sksl",
   "$_tests/sksl/errors/InterfaceBlockScope.sksl",
   "$_tests/sksl/errors/InterfaceBlockStorageModifiers.sksl",
   "$_tests/sksl/errors/InterfaceBlockWithNoMembers.sksl",
   "$_tests/sksl/errors/InvalidAssignment.sksl",
   "$_tests/sksl/errors/InvalidOutParams.sksl",
   "$_tests/sksl/errors/InvalidUnary.sksl",
   "$_tests/sksl/errors/ModifiersInStruct.sksl",
   "$_tests/sksl/errors/OpaqueTypeInInterfaceBlock.sksl",
   "$_tests/sksl/errors/OpaqueTypeInStruct.sksl",
   "$_tests/sksl/errors/OpenArray.sksl",
   "$_tests/sksl/errors/Ossfuzz26700.sksl",
   "$_tests/sksl/errors/Ossfuzz26759.sksl",
   "$_tests/sksl/errors/Ossfuzz27650.sksl",
+  "$_tests/sksl/errors/Ossfuzz27663.sksl",
   "$_tests/sksl/errors/OverflowIntLiteral.sksl",
   "$_tests/sksl/errors/OverflowUintLiteral.sksl",
   "$_tests/sksl/errors/PrivateTypes.sksl",
   "$_tests/sksl/errors/ReturnDifferentType.sksl",
   "$_tests/sksl/errors/ReturnFromVoid.sksl",
   "$_tests/sksl/errors/ReturnMissingValue.sksl",
   "$_tests/sksl/errors/ReturnTypeMismatch.sksl",
   "$_tests/sksl/errors/SelfReferentialInitializerExpression.sksl",
   "$_tests/sksl/errors/SpuriousFloat.sksl",
   "$_tests/sksl/errors/StaticIfTest.sksl",
   "$_tests/sksl/errors/StaticSwitchConditionalBreak.sksl",
   "$_tests/sksl/errors/StaticSwitchTest.sksl",
   "$_tests/sksl/errors/StructTooDeeplyNested.sksl",
   "$_tests/sksl/errors/SwitchDuplicateCase.sksl",
   "$_tests/sksl/errors/SwitchTypes.sksl",
   "$_tests/sksl/errors/SwizzleConstantOutput.sksl",
   "$_tests/sksl/errors/SwizzleMatrix.sksl",
   "$_tests/sksl/errors/SwizzleOnlyLiterals.sksl",
   "$_tests/sksl/errors/SwizzleOutOfBounds.sksl",
   "$_tests/sksl/errors/SwizzleTooManyComponents.sksl",
   "$_tests/sksl/errors/TernaryMismatch.sksl",
   "$_tests/sksl/errors/UndeclaredFunction.sksl",
   "$_tests/sksl/errors/UndefinedFunction.sksl",
   "$_tests/sksl/errors/UndefinedSymbol.sksl",
   "$_tests/sksl/errors/Unreachable.sksl",
   "$_tests/sksl/errors/UnsupportedGLSLIdentifiers.sksl",
   "$_tests/sksl/errors/UseWithoutInitializeArrayIndex.sksl",
   "$_tests/sksl/errors/UseWithoutInitializeBinaryExpr.sksl",
   "$_tests/sksl/errors/UseWithoutInitializeDeadIf.sksl",
   "$_tests/sksl/errors/UseWithoutInitializeDeadSwitch.sksl",
   "$_tests/sksl/errors/UseWithoutInitializeReturnValue.sksl",
   "$_tests/sksl/errors/UseWithoutInitializeVarDecl.sksl",
   "$_tests/sksl/errors/UsingInvalidValue.sksl",
   "$_tests/sksl/errors/WhileTypeMismatch.sksl",
 ]
diff --git a/src/sksl/ir/SkSLConstructor.cpp b/src/sksl/ir/SkSLConstructor.cpp
index a57fe4c06a..53f7fd2ee3 100644
--- a/src/sksl/ir/SkSLConstructor.cpp
+++ b/src/sksl/ir/SkSLConstructor.cpp
@@ -63,85 +63,83 @@ bool Constructor::compareConstant(const Context& context, const Expression& othe
     return true;
 }
 
-template <typename resultType>
-resultType Constructor::getVecComponent(int index) const {
+template <typename ResultType>
+ResultType Constructor::getVecComponent(int index) const {
     SkASSERT(this->type().typeKind() == Type::TypeKind::kVector);
     if (this->arguments().size() == 1 &&
         this->arguments()[0]->type().typeKind() == Type::TypeKind::kScalar) {
         // This constructor just wraps a scalar. Propagate out the value.
-        if (std::is_floating_point<resultType>::value) {
+        if (std::is_floating_point<ResultType>::value) {
             return this->arguments()[0]->getConstantFloat();
         } else {
             return this->arguments()[0]->getConstantInt();
         }
     }
 
     // Walk through all the constructor arguments until we reach the index we're searching for.
     int current = 0;
     for (const std::unique_ptr<Expression>& arg : this->arguments()) {
         if (current > index) {
             // Somehow, we went past the argument we're looking for. Bail.
             break;
         }
 
         if (arg->type().typeKind() == Type::TypeKind::kScalar) {
             if (index == current) {
                 // We're on the proper argument, and it's a scalar; fetch it.
-                if (std::is_floating_point<resultType>::value) {
+                if (std::is_floating_point<ResultType>::value) {
                     return arg->getConstantFloat();
                 } else {
                     return arg->getConstantInt();
                 }
             }
             current++;
             continue;
         }
 
         switch (arg->kind()) {
             case Kind::kConstructor: {
                 const Constructor& constructor = arg->as<Constructor>();
                 if (current + constructor.type().columns() > index) {
                     // We've found a constructor that overlaps the proper argument. Descend into
                     // it, honoring the type.
-                    if (constructor.type().componentType().isFloat()) {
-                        return resultType(constructor.getVecComponent<SKSL_FLOAT>(index - current));
-                    } else {
-                        return resultType(constructor.getVecComponent<SKSL_INT>(index - current));
-                    }
+                    return constructor.type().componentType().isFloat()
+                              ? ResultType(constructor.getVecComponent<SKSL_FLOAT>(index - current))
+                              : ResultType(constructor.getVecComponent<SKSL_INT>(index - current));
                 }
                 break;
             }
             case Kind::kPrefix: {
                 const PrefixExpression& prefix = arg->as<PrefixExpression>();
                 if (current + prefix.type().columns() > index) {
                     // We found a prefix operator that contains the proper argument. Descend
                     // into it. We only support for constant propagation of the unary minus, so
                     // we shouldn't see any other tokens here.
                     SkASSERT(prefix.getOperator() == Token::Kind::TK_MINUS);
 
-                    // We expect the - prefix to always be attached to a constructor.
-                    const Constructor& constructor = prefix.operand()->as<Constructor>();
-
-                    // Descend into this constructor, honoring the type.
-                    if (constructor.type().componentType().isFloat()) {
-                        return -resultType(constructor.getVecComponent<SKSL_FLOAT>(index -
-                                                                                   current));
+                    const Expression& operand = *prefix.operand();
+                    if (operand.type().typeKind() == Type::TypeKind::kVector) {
+                        return operand.type().componentType().isFloat()
+                                ? -ResultType(operand.getVecComponent<SKSL_FLOAT>(index - current))
+                                : -ResultType(operand.getVecComponent<SKSL_INT>(index - current));
                     } else {
-                        return -resultType(constructor.getVecComponent<SKSL_INT>(index - current));
+                        return operand.type().isFloat()
+                                ? -ResultType(operand.getConstantFloat())
+                                : -ResultType(operand.getConstantInt());
                     }
                 }
                 break;
             }
             default: {
                 SkDEBUGFAILF("unexpected component %d { %s } in %s\n",
                              index, arg->description().c_str(), description().c_str());
                 break;
             }
         }
 
         current += arg->type().columns();
     }
 
     SkDEBUGFAILF("failed to find vector component %d in %s\n", index, description().c_str());
     return -1;
 }
diff --git a/src/sksl/ir/SkSLPrefixExpression.h b/src/sksl/ir/SkSLPrefixExpression.h
index 65631138e6..119a21b5d2 100644
--- a/src/sksl/ir/SkSLPrefixExpression.h
+++ b/src/sksl/ir/SkSLPrefixExpression.h
@@ -23,74 +23,84 @@ class PrefixExpression final : public Expression {
 public:
     static constexpr Kind kExpressionKind = Kind::kPrefix;
 
     PrefixExpression(Token::Kind op, std::unique_ptr<Expression> operand)
         : INHERITED(operand->fOffset, kExpressionKind, &operand->type())
         , fOperator(op)
         , fOperand(std::move(operand)) {}
 
     Token::Kind getOperator() const {
         return fOperator;
     }
 
     std::unique_ptr<Expression>& operand() {
         return fOperand;
     }
 
     const std::unique_ptr<Expression>& operand() const {
         return fOperand;
     }
 
     bool isNegationOfCompileTimeConstant() const {
         return this->getOperator() == Token::Kind::TK_MINUS &&
                this->operand()->isCompileTimeConstant();
     }
 
     bool isCompileTimeConstant() const override {
         return this->isNegationOfCompileTimeConstant();
     }
 
     bool hasProperty(Property property) const override {
         if (property == Property::kSideEffects &&
             (this->getOperator() == Token::Kind::TK_PLUSPLUS ||
              this->getOperator() == Token::Kind::TK_MINUSMINUS)) {
             return true;
         }
         return this->operand()->hasProperty(property);
     }
 
     std::unique_ptr<Expression> constantPropagate(const IRGenerator& irGenerator,
                                                   const DefinitionMap& definitions) override;
 
     SKSL_FLOAT getFVecComponent(int index) const override {
         SkASSERT(this->getOperator() == Token::Kind::TK_MINUS);
         return -this->operand()->getFVecComponent(index);
     }
 
     SKSL_INT getIVecComponent(int index) const override {
         SkASSERT(this->getOperator() == Token::Kind::TK_MINUS);
         return -this->operand()->getIVecComponent(index);
     }
 
     SKSL_FLOAT getMatComponent(int col, int row) const override {
         SkASSERT(this->getOperator() == Token::Kind::TK_MINUS);
         return -this->operand()->getMatComponent(col, row);
     }
 
     std::unique_ptr<Expression> clone() const override {
         return std::unique_ptr<Expression>(new PrefixExpression(this->getOperator(),
                                                                 this->operand()->clone()));
     }
 
     String description() const override {
         return Compiler::OperatorName(this->getOperator()) + this->operand()->description();
     }
 
+    int64_t getConstantInt() const override {
+        SkASSERT(this->isNegationOfCompileTimeConstant());
+        return -this->operand()->getConstantInt();
+    }
+
+    SKSL_FLOAT getConstantFloat() const override {
+        SkASSERT(this->isNegationOfCompileTimeConstant());
+        return -this->operand()->getConstantFloat();
+    }
+
     bool compareConstant(const Context& context, const Expression& other) const override {
         // This expression and the other expression must be of the same kind. Since the only
         // compile-time PrefixExpression we optimize for is negation, that means we're comparing
         // -X == -Y. The negatives should cancel out, so we can just constant-compare the inner
         // expressions.
         SkASSERT(this->isNegationOfCompileTimeConstant());
         SkASSERT(other.as<PrefixExpression>().isNegationOfCompileTimeConstant());
         return this->operand()->compareConstant(context, *other.as<PrefixExpression>().operand());
     }
diff --git a/tests/sksl/errors/Ossfuzz27663.sksl b/tests/sksl/errors/Ossfuzz27663.sksl
new file mode 100644
index 0000000000..432f8639b4
--- /dev/null
+++ b/tests/sksl/errors/Ossfuzz27663.sksl
@@ -0,0 +1 @@
+void main() { sk_FragColor = float4(1) / - -half4(0); }
diff --git a/tests/sksl/errors/golden/Ossfuzz27663.glsl b/tests/sksl/errors/golden/Ossfuzz27663.glsl
new file mode 100644
index 0000000000..8cffafe221
--- /dev/null
+++ b/tests/sksl/errors/golden/Ossfuzz27663.glsl
@@ -0,0 +1,5 @@
+### Compilation failed:
+
+error: 1: division by zero
+error: 1: type mismatch: '=' cannot operate on 'half4', 'float4'
+2 errors
