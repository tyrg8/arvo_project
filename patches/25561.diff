commit b1d642078f1278f8a1be20ff1f9206415fd34100
Author: evpobr <evpobr@gmail.com>
Date:   Thu Mar 18 10:28:48 2021 +0500

    sndfile: Improve SF_INFO correctness check
    
    Limit maximum `samplerate` and `channels` values.
    
    Update API documentation to reflect changes.
    
    This should also fix some possible integer overflows as:
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28441
    
    Credit to OSS-Fuzz.

diff --git a/docs/api.md b/docs/api.md
index f009b74d..ac21299d 100644
--- a/docs/api.md
+++ b/docs/api.md
@@ -97,6 +97,11 @@ calling **sf_open**(). The only exception to this is the case of RAW files where
 the caller has to set the **samplerate**, **channels** and **format** fields to
 valid values. All other fields of the structure are filled in by the library.
 
+**Note:** The libsndfile library will reject values ​​for **samplerate** field
+that are greater than `655350` and values ​​for field **channels** that are
+greater than `1024`. These values ​​represent the maximum theoretical limit and
+may be less for specific formats.
+
 When opening a file for write, the caller must fill in structure members
 **samplerate**, **channels**, and **format**.
 
diff --git a/src/common.h b/src/common.h
index 8be6f0eb..cb82579e 100644
--- a/src/common.h
+++ b/src/common.h
@@ -1,147 +1,149 @@
 /*
 ** Copyright (C) 1999-2018 Erik de Castro Lopo <erikd@mega-nerd.com>
 **
 ** This program is free software; you can redistribute it and/or modify
 ** it under the terms of the GNU Lesser General Public License as published by
 ** the Free Software Foundation; either version 2.1 of the License, or
 ** (at your option) any later version.
 **
 ** This program is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU Lesser General Public License for more details.
 **
 ** You should have received a copy of the GNU Lesser General Public License
 ** along with this program; if not, write to the Free Software
 ** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
 
 #ifndef SNDFILE_COMMON_H
 #define SNDFILE_COMMON_H
 
 #include "sfconfig.h"
 
 #include <stdlib.h>
 #include <string.h>
 
 #if HAVE_INTTYPES_H
 #include <inttypes.h>
 #elif HAVE_STDINT_H
 #include <stdint.h>
 #endif
 #if HAVE_SYS_TYPES_H
 #include <sys/types.h>
 #endif
 
 #ifndef SNDFILE_H
 #include "sndfile.h"
 #endif
 
 #include <math.h>
 
 #ifdef USE_SSE2
 #include <immintrin.h>
 #endif
 
 #ifdef __cplusplus
 #error "This code is not designed to be compiled with a C++ compiler."
 #endif
 
 #ifdef INT64_C
 #	define	SF_PLATFORM_S64(x)		INT64_C (x)
 #elif (SIZEOF_LONG == 8)
 #	define	SF_PLATFORM_S64(x)		x##l
 #elif (SIZEOF_LONG_LONG == 8)
 #	define	SF_PLATFORM_S64(x)		x##ll
 #elif COMPILER_IS_GCC
 #	define	SF_PLATFORM_S64(x)		x##ll
 #elif OS_IS_WIN32
 #	define	SF_PLATFORM_S64(x)		x##I64
 #else
 #	error "Don't know how to define a 64 bit integer constant."
 #endif
 
 
 
 /*
 ** Inspiration : http://sourcefrog.net/weblog/software/languages/C/unused.html
 */
 #ifdef UNUSED
 #elif defined (__GNUC__)
 #	define UNUSED(x) UNUSED_ ## x __attribute__ ((unused))
 #elif defined (__LCLINT__)
 #	define UNUSED(x) /*@unused@*/ x
 #else
 #	define UNUSED(x) x
 #endif
 
 #ifdef __GNUC__
 #	define WARN_UNUSED	__attribute__ ((warn_unused_result))
 #else
 #	define WARN_UNUSED
 #endif
 
 #define	SF_BUFFER_LEN			(8192)
 #define	SF_FILENAME_LEN			(1024)
 #define SF_SYSERR_LEN			(256)
 #define SF_MAX_STRINGS			(32)
 #define	SF_PARSELOG_LEN			(2048)
 
 #define	PSF_SEEK_ERROR			((sf_count_t) -1)
 
 #define	BITWIDTH2BYTES(x)	(((x) + 7) / 8)
 
 /*	For some reason sizeof returns an unsigned  value which causes
 **	a warning when that value is added or subtracted from a signed
 **	value. Use SIGNED_SIZEOF instead.
 */
 #define		SIGNED_SIZEOF(x)	((int) sizeof (x))
 
 #define		ARRAY_LEN(x)	((int) (sizeof (x) / sizeof ((x) [0])))
 
 #define		NOT(x)			(! (x))
 
 #define		SF_MAX(a, b)	((a) > (b) ? (a) : (b))
 #define		SF_MIN(a, b)	((a) < (b) ? (a) : (b))
 
 
 #define		COMPILE_TIME_ASSERT(e)	(sizeof (struct { int : - !! (e) ; }))
 
 
 #define		SF_MAX_CHANNELS		1024
+/* Max FLAC sample rate : https://xiph.org/flac/format.html */
+#define		SF_MAX_SAMPLERATE	655350
 
 
 /*
 *	Macros for spliting the format file of SF_INFO into container type,
 **	codec type and endian-ness.
 */
 #define SF_CONTAINER(x)		((x) & SF_FORMAT_TYPEMASK)
 #define SF_CODEC(x)			((x) & SF_FORMAT_SUBMASK)
 #define SF_ENDIAN(x)		((x) & SF_FORMAT_ENDMASK)
 
 /*
 **	Binheader cast macros.
 */
 
 #define BHW1(x) ((uint8_t) (x))
 #define BHW2(x) ((uint16_t) (x))
 #define BHW3(x) ((uint32_t) (x))
 #define BHW4(x) ((uint32_t) (x))
 #define BHW8(x) ((uint64_t) (x))
 
 #define BHWm(x) ((uint32_t) (x))
 #define BHWS(x) ((char *) (x))
 
 #define BHWf(x) ((double) (x))
 #define BHWd(x) ((double) (x))
 
 #define BHWh(x) ((void *) (x))
 #define BHWj(x) ((size_t) (x))
 #define BHWp(x) ((char *) (x))
 #define BHWo(x) ((size_t) (x))
 #define BHWs(x) ((char *) (x))
 #define BHWv(x) ((const void *) (x))
 #define BHWz(x) ((size_t) (x))
 
 /*------------------------------------------------------------------------------
 */
diff --git a/src/sndfile.c b/src/sndfile.c
index f2b49f63..71f060f1 100644
--- a/src/sndfile.c
+++ b/src/sndfile.c
@@ -2881,17 +2881,17 @@ retry:
 
 static int
 validate_sfinfo (SF_INFO *sfinfo)
-{	if (sfinfo->samplerate < 1)
+{	if ((sfinfo->samplerate < 1) || (sfinfo->samplerate > SF_MAX_SAMPLERATE))
 		return 0 ;
 	if (sfinfo->frames < 0)
 		return 0 ;
-	if (sfinfo->channels < 1)
+	if ((sfinfo->channels < 1) || (sfinfo->channels > SF_MAX_CHANNELS))
 		return 0 ;
 	if ((SF_CONTAINER (sfinfo->format)) == 0)
 		return 0 ;
 	if ((SF_CODEC (sfinfo->format)) == 0)
 		return 0 ;
 	if (sfinfo->sections < 1)
 		return 0 ;
 	return 1 ;
 } /* validate_sfinfo */
