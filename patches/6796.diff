commit 98d3ec824f0b4e498b175fb937b4217319d01450
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Sat Mar 10 02:44:05 2018 +0300

    LJpegDecompressor::decodeN(): and actually properly(C) sanitize the frame size

diff --git a/src/librawspeed/decompressors/LJpegDecompressor.cpp b/src/librawspeed/decompressors/LJpegDecompressor.cpp
index 30e0d358..f1855876 100644
--- a/src/librawspeed/decompressors/LJpegDecompressor.cpp
+++ b/src/librawspeed/decompressors/LJpegDecompressor.cpp
@@ -72,35 +72,36 @@ void LJpegDecompressor::decode(uint32 offsetX, uint32 offsetY, uint32 width,
 void LJpegDecompressor::decodeScan()
 {
   if (predictorMode != 1)
     ThrowRDE("Unsupported predictor mode: %u", predictorMode);
 
   for (uint32 i = 0; i < frame.cps;  i++)
     if (frame.compInfo[i].superH != 1 || frame.compInfo[i].superV != 1)
       ThrowRDE("Unsupported subsampling");
 
   assert(static_cast<unsigned>(mRaw->dim.x) > offX);
   if ((mRaw->getCpp() * (mRaw->dim.x - offX)) < frame.cps)
     ThrowRDE("Got less pixels than the components per sample");
 
-  const auto frameWidth = frame.cps * frame.w;
-  if (frameWidth < w || frame.h < h) {
+  assert((mRaw->getCpp() * w) % frame.cps == 0);
+  wBlocks = (mRaw->getCpp() * w) / frame.cps;
+  if (frame.w < wBlocks || frame.h < h) {
     ThrowRDE("LJpeg frame (%u, %u) is smaller than expected (%u, %u)",
-             frameWidth, frame.h, w, h);
+             frame.cps * frame.w, frame.h, w, h);
   }
 
   switch (frame.cps) {
   case 2:
     decodeN<2>();
     break;
   case 3:
     decodeN<3>();
     break;
   case 4:
     decodeN<4>();
     break;
   default:
     ThrowRDE("Unsupported number of components: %u", frame.cps);
   }
 }
 
 // N_COMP == number of components (2, 3 or 4)
@@ -109,54 +110,49 @@ template <int N_COMP>
 void LJpegDecompressor::decodeN()
 {
   assert(mRaw->getCpp() > 0);
   assert(N_COMP > 0);
   assert(N_COMP >= mRaw->getCpp());
   assert((N_COMP / mRaw->getCpp()) > 0);
 
   assert(mRaw->dim.x >= N_COMP);
   assert((mRaw->getCpp() * (mRaw->dim.x - offX)) >= N_COMP);
 
-  assert((mRaw->getCpp() * w) % N_COMP == 0);
-
   auto ht = getHuffmanTables<N_COMP>();
   auto pred = getInitialPredictors<N_COMP>();
   auto predNext = pred.data();
 
   BitPumpJPEG bitStream(input);
 
   // A recoded DNG might be split up into tiles of self contained LJpeg blobs.
   // The tiles at the bottom and the right may extend beyond the dimension of
   // the raw image buffer. The excessive content has to be ignored.
 
-  const auto height = std::min(frame.h, h);
-  assert(height == h);
-  const auto wBlocks = (mRaw->getCpp() * w) / N_COMP;
-  const auto width = std::min(frame.w, wBlocks);
-  assert(width == wBlocks);
+  assert(frame.h >= h);
+  assert(frame.cps * frame.w >= mRaw->getCpp() * w);
 
   // For y, we can simply stop decoding when we reached the border.
-  for (unsigned y = 0; y < height; ++y) {
+  for (unsigned y = 0; y < h; ++y) {
     auto destY = offY + y;
     auto dest =
         reinterpret_cast<ushort16*>(mRaw->getDataUncropped(offX, destY));
 
     copy_n(predNext, N_COMP, pred.data());
     // the predictor for the next line is the start of this line
     predNext = dest;
 
     // For x, we first process all pixels within the image buffer ...
-    for (unsigned x = 0; x < width; ++x) {
+    for (unsigned x = 0; x < wBlocks; ++x) {
       unroll_loop<N_COMP>([&](int i) {
         *dest++ = pred[i] += ht[i]->decodeNext(bitStream);
       });
     }
     // ... and discard the rest.
-    for (unsigned x = width; x < frame.w; ++x) {
+    for (unsigned x = wBlocks; x < frame.w; ++x) {
       unroll_loop<N_COMP>([&](int i) {
         ht[i]->decodeNext(bitStream);
       });
     }
   }
 }
 
 } // namespace rawspeed
diff --git a/src/librawspeed/decompressors/LJpegDecompressor.h b/src/librawspeed/decompressors/LJpegDecompressor.h
index 8183067b..41e51c1e 100644
--- a/src/librawspeed/decompressors/LJpegDecompressor.h
+++ b/src/librawspeed/decompressors/LJpegDecompressor.h
@@ -41,6 +41,8 @@ class LJpegDecompressor final : public AbstractLJpegDecompressor
   uint32 w = 0;
   uint32 h = 0;
 
+  uint32 wBlocks = 0;
+
 public:
   LJpegDecompressor(const ByteStream& bs, const RawImage& img);
 
