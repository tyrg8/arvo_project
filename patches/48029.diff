commit 746d1f5e8498f501238894899c301e70ea57e2aa
Author: Evgenii Kliuchnikov <eustas@google.com>
Date:   Wed Jun 29 14:41:22 2022 +0000

    Fix lookahead in ParseBoxHeader

diff --git a/lib/jxl/decode.cc b/lib/jxl/decode.cc
index 8a5d60fd..052e8c6d 100644
--- a/lib/jxl/decode.cc
+++ b/lib/jxl/decode.cc
@@ -313,319 +313,320 @@ typedef struct JxlDecoderFrameIndexBoxStruct {
 // NOLINTNEXTLINE(clang-analyzer-optin.performance.Padding)
 struct JxlDecoderStruct {
   JxlDecoderStruct() = default;
 
   JxlMemoryManager memory_manager;
   std::unique_ptr<jxl::ThreadPool> thread_pool;
 
   DecoderStage stage;
 
   // Status of progression, internal.
   bool got_signature;
   // Indicates we know that we've seen the last codestream box: either this
   // was a jxlc box, or a jxlp box that has its index indicated as last by
   // having its most significant bit set, or no boxes are used at all. This
   // does not indicate the full codestream has already been seen, only the
   // last box of it has been initiated.
   bool last_codestream_seen;
   bool got_codestream_signature;
   bool got_basic_info;
   bool got_transform_data;            // To skip everything before ICC.
   bool got_all_headers;               // Codestream metadata headers.
   bool post_headers;                  // Already decoding pixels.
   jxl::ICCReader icc_reader;
   jxl::JxlDecoderFrameIndexBox frame_index_box;
   // This means either we actually got the preview image, or determined we
   // cannot get it or there is none.
   bool got_preview_image;
   bool preview_frame;
 
   // Position of next_in in the original file including box format if present
   // (as opposed to position in the codestream)
   size_t file_pos;
 
   size_t box_contents_begin;
   size_t box_contents_end;
   size_t box_contents_size;
   size_t box_size;
   size_t header_size;
   // Either a final box that runs until EOF, or the case of no container format
   // at all.
   bool box_contents_unbounded;
 
   JxlBoxType box_type;
   JxlBoxType box_decoded_type;  // Underlying type for brob boxes
   // Set to true right after a JXL_DEC_BOX event only.
   bool box_event;
   bool decompress_boxes;
 
   bool box_out_buffer_set;
   // Whether the out buffer is set for the current box, if the user did not yet
   // release the buffer while the next box is encountered, this will be set to
   // false. If this is false, no JXL_DEC_NEED_MORE_INPUT is emitted
   // (irrespective of the value of box_out_buffer_set), because not setting
   // output indicates the user does not wish the data of this box.
   bool box_out_buffer_set_current_box;
   uint8_t* box_out_buffer;
   size_t box_out_buffer_size;
   // which byte of the full box content the start of the out buffer points to
   size_t box_out_buffer_begin;
   // which byte of box_out_buffer to write to next
   size_t box_out_buffer_pos;
 
   // Settings
   bool keep_orientation;
   bool render_spotcolors;
   bool coalescing;
   float desired_intensity_target;
 
   // Bitfield, for which informative events (JXL_DEC_BASIC_INFO, etc...) the
   // decoder returns a status. By default, do not return for any of the events,
   // only return when the decoder cannot continue because it needs more input or
   // output data.
   int events_wanted;
   int orig_events_wanted;
 
   // Fields for reading the basic info from the header.
   size_t basic_info_size_hint;
   bool have_container;
   size_t box_count;
 
   // The level of progressive detail in frame decoding.
   JxlProgressiveDetail prog_detail = kDC;
   // The progressive detail of the current frame.
   JxlProgressiveDetail frame_prog_detail;
   // The intended downsampling ratio for the current progression step.
   size_t downsampling_target;
 
   // Whether the preview out buffer was set. It is possible for the buffer to
   // be nullptr and buffer_set to be true, indicating it was deliberately
   // set to nullptr.
   bool preview_out_buffer_set;
   // Idem for the image buffer.
   // Set to true if either an image out buffer or an image out callback was set.
   bool image_out_buffer_set;
 
   // Owned by the caller, buffers for DC image and full resolution images
   void* preview_out_buffer;
   void* image_out_buffer;
   JxlImageOutInitCallback image_out_init_callback;
   JxlImageOutRunCallback image_out_run_callback;
   JxlImageOutDestroyCallback image_out_destroy_callback;
   void* image_out_init_opaque;
   struct SimpleImageOutCallback {
     JxlImageOutCallback callback;
     void* opaque;
   };
   SimpleImageOutCallback simple_image_out_callback;
 
   size_t preview_out_size;
   size_t image_out_size;
 
   JxlPixelFormat preview_out_format;
   JxlPixelFormat image_out_format;
 
   // For extra channels. Empty if no extra channels are requested, and they are
   // reset each frame
   std::vector<ExtraChannelOutput> extra_channel_output;
 
   jxl::CodecMetadata metadata;
   std::unique_ptr<jxl::ImageBundle> ib;
 
   std::unique_ptr<jxl::PassesDecoderState> passes_state;
   std::unique_ptr<jxl::FrameDecoder> frame_dec;
   size_t next_section;
   std::vector<char> section_processed;
   // The FrameDecoder is initialized, and not yet finalized
   bool frame_dec_in_progress;
 
   // headers and TOC for the current frame. When got_toc is true, this is
   // always the frame header of the last frame of the current still series,
   // that is, the displayed frame.
   std::unique_ptr<jxl::FrameHeader> frame_header;
 
   size_t remaining_frame_size;
   FrameStage frame_stage;
   bool dc_frame_progression_done;
   // The currently processed frame is the last of the current composite still,
   // and so must be returned as pixels
   bool is_last_of_still;
   // The currently processed frame is the last of the codestream
   bool is_last_total;
   // How many frames to skip.
   size_t skip_frames;
   // Skipping the current frame. May be false if skip_frames was just set to
   // a positive value while already processing a current frame, then
   // skipping_frame will be enabled only for the next frame.
   bool skipping_frame;
 
   // Amount of internal frames and external frames started. External frames are
   // user-visible frames, internal frames includes all external frames and
   // also invisible frames such as patches, blending-only and dc_level frames.
   size_t internal_frames;
   size_t external_frames;
 
   // For each internal frame, which storage locations it references, and which
   // storage locations it is stored in, using the bit mask as defined in
   // FrameDecoder::References and FrameDecoder::SaveAs.
   std::vector<int> frame_references;
   std::vector<int> frame_saved_as;
 
   // Translates external frame index to internal frame index. The external
   // index is the index of user-visible frames. The internal index can be larger
   // since non-visible frames (such as frames with patches, ...) are included.
   std::vector<size_t> frame_external_to_internal;
 
   // Whether the frame with internal index is required to decode the frame
   // being skipped to or any frames after that. If no skipping is active,
   // this vector is ignored. If the current internal frame index is beyond this
   // vector, it must be treated as a required frame.
   std::vector<char> frame_required;
 
   // Codestream input data is copied here temporarily when the decoder needs
   // more input bytes to process the next part of the stream. We copy the input
   // data in order to be able to release it all through the API it when
   // returning JXL_DEC_NEED_MORE_INPUT.
   std::vector<uint8_t> codestream_copy;
   // Number of bytes at the end of codestream_copy that were not yet consumed
   // by calling AdvanceInput().
   size_t codestream_unconsumed;
   // Position in the codestream_copy vector that the decoder already finished
   // processing. It can be greater than the current size of codestream_copy in
   // case where the decoder skips some parts of the frame that were not yet
   // provided.
   size_t codestream_pos;
   // Number of bits after codestream_pos that were already processed.
   size_t codestream_bits_ahead;
 
   BoxStage box_stage;
 
   jxl::JxlToJpegDecoder jpeg_decoder;
   jxl::JxlBoxContentDecoder box_content_decoder;
   // Decodes Exif or XMP metadata for JPEG reconstruction
   jxl::JxlBoxContentDecoder metadata_decoder;
   std::vector<uint8_t> exif_metadata;
   std::vector<uint8_t> xmp_metadata;
   // must store JPEG reconstruction metadata from the current box
   // 0 = not stored, 1 = currently storing, 2 = finished
   int store_exif;
   int store_xmp;
   size_t recon_out_buffer_pos;
   size_t recon_exif_size;  // Expected exif size as read from the jbrd box
   size_t recon_xmp_size;   // Expected exif size as read from the jbrd box
   JpegReconStage recon_output_jpeg;
 
   bool JbrdNeedMoreBoxes() const {
     // jbrd box wants exif but exif box not yet seen
     if (store_exif < 2 && recon_exif_size > 0) return true;
     // jbrd box wants xmp but xmp box not yet seen
     if (store_xmp < 2 && recon_xmp_size > 0) return true;
     return false;
   }
 
   // Statistics which CodecInOut can keep
   uint64_t dec_pixels;
 
   const uint8_t* next_in;
   size_t avail_in;
   bool input_closed;
 
   void AdvanceInput(size_t size) {
+    JXL_DASSERT(avail_in >= size);
     next_in += size;
     avail_in -= size;
     file_pos += size;
   }
 
   size_t AvailableCodestream() const {
     size_t avail_codestream = avail_in;
     if (!box_contents_unbounded) {
       avail_codestream =
           std::min<size_t>(avail_codestream, box_contents_end - file_pos);
     }
     return avail_codestream;
   }
 
   void AdvanceCodestream(size_t size) {
     size_t avail_codestream = AvailableCodestream();
     if (codestream_copy.empty()) {
       if (size <= avail_codestream) {
         AdvanceInput(size);
       } else {
         codestream_pos = size - avail_codestream;
         AdvanceInput(avail_codestream);
       }
     } else {
       codestream_pos += size;
       if (codestream_pos + codestream_unconsumed >= codestream_copy.size()) {
         size_t advance = std::min(
             codestream_unconsumed,
             codestream_unconsumed + codestream_pos - codestream_copy.size());
         AdvanceInput(advance);
         codestream_pos -= std::min(codestream_pos, codestream_copy.size());
         codestream_unconsumed = 0;
         codestream_copy.clear();
       }
     }
   }
 
   JxlDecoderStatus RequestMoreInput() {
     if (codestream_copy.empty()) {
       size_t avail_codestream = AvailableCodestream();
       codestream_copy.insert(codestream_copy.end(), next_in,
                              next_in + avail_codestream);
       AdvanceInput(avail_codestream);
     } else {
       AdvanceInput(codestream_unconsumed);
       codestream_unconsumed = 0;
     }
     return JXL_DEC_NEED_MORE_INPUT;
   }
 
   JxlDecoderStatus GetCodestreamInput(jxl::Span<const uint8_t>* span) {
     if (codestream_copy.empty() && codestream_pos > 0) {
       size_t avail_codestream = AvailableCodestream();
       size_t skip = std::min<size_t>(codestream_pos, avail_codestream);
       AdvanceInput(skip);
       codestream_pos -= skip;
       if (codestream_pos > 0) {
         return RequestMoreInput();
       }
     }
     JXL_ASSERT(codestream_pos <= codestream_copy.size());
     JXL_ASSERT(codestream_unconsumed <= codestream_copy.size());
     size_t avail_codestream = AvailableCodestream();
     if (codestream_copy.empty()) {
       if (avail_codestream == 0) {
         return RequestMoreInput();
       }
       *span = jxl::Span<const uint8_t>(next_in, avail_codestream);
       return JXL_DEC_SUCCESS;
     } else {
       codestream_copy.insert(codestream_copy.end(),
                              next_in + codestream_unconsumed,
                              next_in + avail_codestream);
       codestream_unconsumed = avail_codestream;
       *span = jxl::Span<const uint8_t>(codestream_copy.data() + codestream_pos,
                                        codestream_copy.size() - codestream_pos);
       return JXL_DEC_SUCCESS;
     }
   }
 
   // Whether the decoder can use more codestream input for a purpose it needs.
   // This returns false if the user didn't subscribe to any events that
   // require the codestream (e.g. only subscribed to metadata boxes), or all
   // parts of the codestream that are subscribed to (e.g. only basic info) have
   // already occured.
   bool CanUseMoreCodestreamInput() const {
     // The decoder can set this to finished early if all relevant events were
     // processed, so this check works.
     return stage != DecoderStage::kCodestreamFinished;
   }
 
   // If set then some operations will fail, if those would require
   // allocating large objects. Actual memory usage might be two orders of
   // magnitude bigger.
   // TODO(eustas): remove once there is working API for memory / CPU limit.
   size_t memory_limit_base = 0;
   size_t cpu_limit_base = 0;
   size_t used_cpu_base = 0;
 };
@@ -1657,47 +1658,47 @@ size_t JxlDecoderReleaseJPEGBuffer(JxlDecoder* dec) {
 // Parses the header of the box, outputting the 4-character type and the box
 // size, including header size, as stored in the box header.
 // @param in current input bytes.
 // @param size available input size.
 // @param pos position in the input, must begin at the header of the box.
 // @param file_pos position of pos since the start of the JXL file, rather than
 // the current input, used for integer overflow checking.
 // @param type the output box type.
 // @param box_size output the total box size, including header, in bytes, or 0
 // if it's a final unbounded box.
 // @param header_size output size of the box header.
 // @return JXL_DEC_SUCCESS if the box header was fully parsed. In that case the
 // parsing position must be incremented by header_size bytes.
 // JXL_DEC_NEED_MORE_INPUT if not enough input bytes available, in that case
 // header_size indicates a lower bound for the known size the header has to be
 // at least. JXL_DEC_ERROR if the box header is invalid.
 static JxlDecoderStatus ParseBoxHeader(const uint8_t* in, size_t size,
                                        size_t pos, size_t file_pos,
                                        JxlBoxType type, uint64_t* box_size,
                                        uint64_t* header_size) {
   if (OutOfBounds(pos, 8, size)) {
     *header_size = 8;
     return JXL_DEC_NEED_MORE_INPUT;
   }
   size_t box_start = pos;
   // Box size, including this header itself.
   *box_size = LoadBE32(in + pos);
   pos += 4;
   if (*box_size == 1) {
     *header_size = 16;
-    if (OutOfBounds(pos, 8, size)) return JXL_DEC_NEED_MORE_INPUT;
+    if (OutOfBounds(pos, 12, size)) return JXL_DEC_NEED_MORE_INPUT;
     *box_size = LoadBE64(in + pos);
     pos += 8;
   }
   memcpy(type, in + pos, 4);
   pos += 4;
   *header_size = pos - box_start;
   if (*box_size > 0 && *box_size < *header_size) {
     return JXL_API_ERROR("invalid box size");
   }
   if (SumOverflows(file_pos, pos, *box_size)) {
     return JXL_API_ERROR("Box size overflow");
   }
   return JXL_DEC_SUCCESS;
 }
 
 // This includes handling the codestream if it is not a box-based jxl file.
