commit 55b420a23ab58bb7dc62fb582f205e65d6445270
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Sun Sep 24 16:20:17 2017 +0300

    NikonDecompressor: width should be a multiple of 2

diff --git a/src/librawspeed/decoders/NefDecoder.cpp b/src/librawspeed/decoders/NefDecoder.cpp
index 8b067bff..853c5e47 100644
--- a/src/librawspeed/decoders/NefDecoder.cpp
+++ b/src/librawspeed/decoders/NefDecoder.cpp
@@ -65,81 +65,82 @@ bool NefDecoder::isAppropriateDecoder(const TiffRootIFD* rootIFD,
 RawImage NefDecoder::decodeRawInternal() {
   auto raw = mRootIFD->getIFDWithTag(CFAPATTERN);
   int compression = raw->getEntry(COMPRESSION)->getU32();
 
   TiffEntry *offsets = raw->getEntry(STRIPOFFSETS);
   TiffEntry *counts = raw->getEntry(STRIPBYTECOUNTS);
 
   if (mRootIFD->getEntryRecursive(MODEL)->getString() == "NIKON D100 ") { /**Sigh**/
     if (!mFile->isValid(offsets->getU32()))
       ThrowRDE("Image data outside of file.");
     if (!D100IsCompressed(offsets->getU32())) {
       DecodeD100Uncompressed();
       return mRaw;
     }
   }
 
   if (compression == 1 || (hints.has("force_uncompressed")) ||
       NEFIsUncompressed(raw)) {
     DecodeUncompressed();
     return mRaw;
   }
 
   if (NEFIsUncompressedRGB(raw)) {
     DecodeSNefUncompressed();
     return mRaw;
   }
 
   if (offsets->count != 1) {
     ThrowRDE("Multiple Strips found: %u", offsets->count);
   }
   if (counts->count != offsets->count) {
     ThrowRDE(
         "Byte count number does not match strip size: count:%u, strips:%u ",
         counts->count, offsets->count);
   }
   if (!mFile->isValid(offsets->getU32(), counts->getU32()))
     ThrowRDE("Invalid strip byte count. File probably truncated.");
 
   if (34713 != compression)
     ThrowRDE("Unsupported compression");
 
   uint32 width = raw->getEntry(IMAGEWIDTH)->getU32();
   uint32 height = raw->getEntry(IMAGELENGTH)->getU32();
   uint32 bitPerPixel = raw->getEntry(BITSPERSAMPLE)->getU32();
 
-  if (width == 0 || height == 0 || width > 8288 || height > 5520)
+  if (width == 0 || height == 0 || width % 2 != 0 || width > 8288 ||
+      height > 5520)
     ThrowRDE("Unexpected image dimensions found: (%u; %u)", width, height);
 
   switch (bitPerPixel) {
   case 12:
   case 14:
     break;
   default:
     ThrowRDE("Invalid bpp found: %u", bitPerPixel);
   }
 
   mRaw->dim = iPoint2D(width, height);
   mRaw->createData();
 
   raw = mRootIFD->getIFDWithTag(static_cast<TiffTag>(0x8c));
 
   TiffEntry *meta;
   if (raw->hasEntry(static_cast<TiffTag>(0x96))) {
     meta = raw->getEntry(static_cast<TiffTag>(0x96));
   } else {
     meta = raw->getEntry(static_cast<TiffTag>(0x8c)); // Fall back
   }
 
   try {
     NikonDecompressor::decompress(
         &mRaw, ByteStream(mFile, offsets->getU32(), counts->getU32()),
         meta->getData(), mRaw->dim, bitPerPixel, uncorrectedRawValues);
   } catch (IOException &e) {
     mRaw->setError(e.what());
     // Let's ignore it, it may have delivered somewhat useful data.
   }
 
   return mRaw;
 }
 
 /*
diff --git a/src/librawspeed/decompressors/NikonDecompressor.cpp b/src/librawspeed/decompressors/NikonDecompressor.cpp
index 859c8773..0d450c4f 100644
--- a/src/librawspeed/decompressors/NikonDecompressor.cpp
+++ b/src/librawspeed/decompressors/NikonDecompressor.cpp
@@ -114,75 +114,77 @@ HuffmanTable NikonDecompressor::createHuffmanTable(uint32 huffSelect) {
 void NikonDecompressor::decompress(RawImage* mRaw, ByteStream&& data,
                                    ByteStream metadata, const iPoint2D& size,
                                    uint32 bitsPS, bool uncorrectedRawValues) {
   assert(bitsPS > 0);
 
   uint32 v0 = metadata.getByte();
   uint32 v1 = metadata.getByte();
   uint32 huffSelect = 0;
   uint32 split = 0;
   int pUp1[2];
   int pUp2[2];
 
   writeLog(DEBUG_PRIO_EXTRA, "Nef version v0:%u, v1:%u", v0, v1);
 
   if (v0 == 73 || v1 == 88)
     metadata.skipBytes(2110);
 
   if (v0 == 70)
     huffSelect = 2;
   if (bitsPS == 14)
     huffSelect += 3;
 
   pUp1[0] = metadata.getU16();
   pUp1[1] = metadata.getU16();
   pUp2[0] = metadata.getU16();
   pUp2[1] = metadata.getU16();
 
   HuffmanTable ht = createHuffmanTable(huffSelect);
 
   auto curve = createCurve(&metadata, bitsPS, v0, v1, &split);
   RawImageCurveGuard curveHandler(mRaw, curve, uncorrectedRawValues);
 
   BitPumpMSB bits(data);
   uchar8* draw = mRaw->get()->getData();
   uint32 pitch = mRaw->get()->pitch;
 
   int pLeft1 = 0;
   int pLeft2 = 0;
-  uint32 cw = size.x / 2;
   uint32 random = bits.peekBits(24);
   //allow gcc to devirtualize the calls below
   auto* rawdata = reinterpret_cast<RawImageDataU16*>(mRaw->get());
+
+  assert(size.x % 2 == 0);
+  assert(size.x >= 2);
   for (uint32 y = 0; y < static_cast<unsigned>(size.y); y++) {
     if (split && y == split) {
       ht = createHuffmanTable(huffSelect + 1);
     }
     auto* dest =
         reinterpret_cast<ushort16*>(&draw[y * pitch]); // Adjust destination
     pUp1[y&1] += ht.decodeNext(bits);
     pUp2[y&1] += ht.decodeNext(bits);
     pLeft1 = pUp1[y&1];
     pLeft2 = pUp2[y&1];
 
     rawdata->setWithLookUp(clampBits(pLeft1, 15),
                            reinterpret_cast<uchar8*>(dest + 0), &random);
     rawdata->setWithLookUp(clampBits(pLeft2, 15),
                            reinterpret_cast<uchar8*>(dest + 1), &random);
 
     dest += 2;
 
-    for (uint32 x = 1; x < cw; x++) {
+    for (uint32 x = 2; x < static_cast<uint32>(size.x); x += 2) {
       pLeft1 += ht.decodeNext(bits);
       pLeft2 += ht.decodeNext(bits);
 
       rawdata->setWithLookUp(clampBits(pLeft1, 15),
                              reinterpret_cast<uchar8*>(dest + 0), &random);
       rawdata->setWithLookUp(clampBits(pLeft2, 15),
                              reinterpret_cast<uchar8*>(dest + 1), &random);
 
       dest += 2;
     }
   }
 }
 
 } // namespace rawspeed
