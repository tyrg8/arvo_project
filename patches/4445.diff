commit 9da51c9d1ed6fab63e5dce97ec79e02df27a1e28
Author: Alan Thomas <athomas@thinkspatial.com.au>
Date:   Tue Nov 28 05:36:06 2017 +0000

    DXF: Fix buffer overrun and null pointer dereference. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4445 and https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4447. Credit to OSS-Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@40865 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/ogr/ogrsf_frmts/dxf/ogr_autocad_services.cpp b/gdal/ogr/ogrsf_frmts/dxf/ogr_autocad_services.cpp
index e62e558e5e..5bbfd2b73c 100644
--- a/gdal/ogr/ogrsf_frmts/dxf/ogr_autocad_services.cpp
+++ b/gdal/ogr/ogrsf_frmts/dxf/ogr_autocad_services.cpp
@@ -43,183 +43,185 @@ CPL_CVSID("$Id$")
 CPLString ACTextUnescape( const char *pszRawInput, const char *pszEncoding,
     bool bIsMText )
 
 {
     CPLString osResult;
     CPLString osInput = pszRawInput;
 
 /* -------------------------------------------------------------------- */
 /*      Translate text from Win-1252 to UTF8.  We approximate this      */
 /*      by treating Win-1252 as Latin-1.  Note that we likely ought     */
 /*      to be consulting the $DWGCODEPAGE header variable which         */
 /*      defaults to ANSI_1252 if not set.                               */
 /* -------------------------------------------------------------------- */
     osInput.Recode( pszEncoding, CPL_ENC_UTF8 );
 
     const char *pszInput = osInput.c_str();
 
 /* -------------------------------------------------------------------- */
 /*      Now translate low-level escape sequences.  They are all plain   */
 /*      ASCII characters and won't have been affected by the UTF8       */
 /*      recoding.                                                       */
 /* -------------------------------------------------------------------- */
     while( *pszInput != '\0' )
     {
         if( pszInput[0] == '^' && pszInput[1] != '\0' )
         {
             if( pszInput[1] == ' ' )
                 osResult += '^';
             else
                 osResult += static_cast<char>( toupper(pszInput[1]) ) ^ 0x40;
             pszInput++;
         }
         else if( STARTS_WITH_CI(pszInput, "%%c")
             || STARTS_WITH_CI(pszInput, "%%d")
             || STARTS_WITH_CI(pszInput, "%%p") )
         {
             wchar_t anWCharString[2];
 
             anWCharString[1] = 0;
 
             // These are special symbol representations for AutoCAD.
             if( STARTS_WITH_CI(pszInput, "%%c") )
                 anWCharString[0] = 0x2300; // diameter (0x00F8 is a good approx)
             else if( STARTS_WITH_CI(pszInput, "%%d") )
                 anWCharString[0] = 0x00B0; // degree
             else if( STARTS_WITH_CI(pszInput, "%%p") )
                 anWCharString[0] = 0x00B1; // plus/minus
 
             char *pszUTF8Char = CPLRecodeFromWChar( anWCharString,
                 CPL_ENC_UCS2,
                 CPL_ENC_UTF8 );
 
             osResult += pszUTF8Char;
             CPLFree( pszUTF8Char );
 
             pszInput += 2;
         }
         else if( !bIsMText && ( STARTS_WITH_CI(pszInput, "%%u")
             || STARTS_WITH_CI(pszInput, "%%o") ) )
         {
             // Underline and overline markers. These have no effect in MTEXT
             pszInput += 2;
         }
         else
         {
             osResult += pszInput[0];
         }
 
         pszInput++;
     }
 
     if( !bIsMText )
         return osResult;
 
 /* -------------------------------------------------------------------- */
 /*      If this is MTEXT, or something similar (e.g. DIMENSION text),   */
 /*      do a second pass to strip additional MTEXT format codes.        */
 /* -------------------------------------------------------------------- */
     pszInput = osResult.c_str();
     CPLString osMtextResult;
 
     while( *pszInput != '\0' )
     {
         if( pszInput[0] == '\\' && pszInput[1] == 'P' )
         {
             osMtextResult += '\n';
             pszInput++;
         }
         else if( pszInput[0] == '\\' && pszInput[1] == '~' )
         {
             osMtextResult += ' ';
             pszInput++;
         }
         else if( pszInput[0] == '\\' && pszInput[1] == 'U'
                  && pszInput[2] == '+' && CPLStrnlen(pszInput, 7) >= 7 )
         {
             CPLString osHex;
             unsigned int iChar = 0;
 
             osHex.assign( pszInput+3, 4 );
             sscanf( osHex.c_str(), "%x", &iChar );
 
             wchar_t anWCharString[2];
             anWCharString[0] = (wchar_t) iChar;
             anWCharString[1] = 0;
 
             char *pszUTF8Char = CPLRecodeFromWChar( anWCharString,
                                                     CPL_ENC_UCS2,
                                                     CPL_ENC_UTF8 );
 
             osMtextResult += pszUTF8Char;
             CPLFree( pszUTF8Char );
 
             pszInput += 6;
         }
         else if( pszInput[0] == '{' || pszInput[0] == '}' )
         {
             // Skip braces, which are used for grouping
         }
         else if( pszInput[0] == '\\'
                  && strchr( "WTAHFfCcQp", pszInput[1] ) != NULL )
         {
             // eg. \W1.073172x;\T1.099;Bonneuil de Verrines
             // See data/dwg/EP/42002.dwg
             // These are all inline formatting codes which take an argument
             // up to the first semicolon (\W for width, \f for font, etc)
 
             while( *pszInput != ';' && *pszInput != '\0' )
                 pszInput++;
             if( *pszInput == '\0' )
                 break;
         }
         else if( pszInput[0] == '\\'
                 && strchr( "KkLlOo", pszInput[1] ) != NULL )
         {
             // Inline formatting codes that don't take an argument
 
             pszInput++;
         }
         else if( pszInput[0] == '\\' && pszInput[1] == 'S' )
         {
             // Stacked text. Normal escapes don't work inside a stack
 
             pszInput += 2;
             while( *pszInput != ';' && *pszInput != '\0' )
             {
                 if( pszInput[0] == '\\' &&
                     strchr( "^/#~", pszInput[1] ) != NULL )
                 {
                     osMtextResult += pszInput[1];
                     pszInput++;
                 }
                 else if( strchr( "^/#~", pszInput[0] ) == NULL )
                 {
                     osMtextResult += pszInput[0];
                 }
                 pszInput++;
             }
             if( pszInput[0] == ';' )
                 pszInput++;
+            if( pszInput[0] == '\0' )
+                break;
         }
         else if( pszInput[0] == '\\'
                  && strchr( "\\{}", pszInput[1] ) != NULL )
         {
             // MTEXT character escapes
 
             osMtextResult += pszInput[1];
             pszInput++;
         }
         else
         {
             osMtextResult += *pszInput;
         }
 
         pszInput++;
     }
 
     return osMtextResult;
 }
 
 /************************************************************************/
 /*                          ACGetColorTable()                           */
 /************************************************************************/
diff --git a/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp b/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp
index 0471900e1f..5901c9106a 100644
--- a/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp
+++ b/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp
@@ -274,664 +274,664 @@ struct DXFMLEADERLeader {
 OGRDXFFeature *OGRDXFLayer::TranslateMLEADER()
 
 {
     char szLineBuf[257];
     int nCode = 0;
 
     // This is a dummy feature object used to store style properties
     // and the like. We end up deleting it without returning it
     OGRDXFFeature *poOverallFeature = new OGRDXFFeature( poFeatureDefn );
 
     DXFMLEADERLeader oLeader;
     std::vector<DXFMLEADERLeader> aoLeaders;
 
     OGRLineString *poLine = NULL;
     bool bHaveX = false;
     bool bHaveY = false;
     double dfCurrentX = 0.0;
     double dfCurrentY = 0.0;
 
     double dfScale = 1.0;
     int nLeaderLineType = 1; // 0 = none, 1 = straight, 2 = spline
     bool bHasDogleg = true;
     CPLString osLeaderColor = "0";
 
     CPLString osText;
     CPLString osTextStyleHandle;
     double dfTextX = 0.0;
     double dfTextY = 0.0;
     int iTextAlignment = 1; // 1 = left, 2 = center, 3 = right
     double dfTextAngle = 0.0;
     double dfTextHeight = 4.0;
 
     CPLString osBlockHandle;
     OGRDXFInsertTransformer oBlockTransformer;
     CPLString osBlockAttributeHandle;
     // Map of ATTDEF handles to attribute text
     std::map<CPLString, CPLString> oBlockAttributes;
 
     CPLString osArrowheadBlockHandle;
     double dfArrowheadSize = 4.0;
 
     // Group codes mean different things in different sections of the
     // MLEADER entity. We need to keep track of the section we are in.
     const int MLS_COMMON = 0;
     const int MLS_CONTEXT_DATA = 1;
     const int MLS_LEADER = 2;
     const int MLS_LEADER_LINE = 3;
     int nSection = MLS_COMMON;
 
     // The way the 30x group codes work is missing from the DXF docs.
     // We assume that the sections are always nested as follows:
 
     // ... [this part is identified as MLS_COMMON]
     // 300 CONTEXT_DATA{
     //   ...
     //   302 LEADER{
     //     ...
     //     304 LEADER_LINE{
     //       ...
     //     305 }
     //     304 LEADER_LINE{
     //       ...
     //     305 }
     //     ...
     //   303 }
     //   302 LEADER{
     //     ...
     //   303 }
     //   ...
     // 301 }
     // ... [MLS_COMMON]
 
     while( (nCode = poDS->ReadValue(szLineBuf,sizeof(szLineBuf))) > 0 )
     {
         switch( nSection )
         {
           case MLS_COMMON:
             switch( nCode )
             {
               case 300:
                 nSection = MLS_CONTEXT_DATA;
                 break;
 
               case 342:
                 // 342 is the entity handle of the BLOCK_RECORD table entry that
                 // corresponds to the arrowhead block.
                 osArrowheadBlockHandle = szLineBuf;
                 break;
 
               case 42:
                 // TODO figure out difference between 42 and 140 for arrowheadsize
                 dfArrowheadSize = CPLAtof( szLineBuf );
                 break;
 
               case 330:
                 osBlockAttributeHandle = szLineBuf;
                 break;
 
               case 302:
                 if( osBlockAttributeHandle != "" )
                 {
                     oBlockAttributes[osBlockAttributeHandle] = szLineBuf;
                     osBlockAttributeHandle = "";
                 }
                 break;
 
               case 91:
                 osLeaderColor = szLineBuf;
                 break;
 
               case 170:
                 nLeaderLineType = atoi(szLineBuf);
                 break;
 
               case 291:
                 bHasDogleg = atoi(szLineBuf) != 0;
                 break;
 
               default:
                 TranslateGenericProperty( poOverallFeature, nCode, szLineBuf );
                 break;
             }
             break;
 
           case MLS_CONTEXT_DATA:
             switch( nCode )
             {
               case 301:
                 nSection = MLS_COMMON;
                 break;
 
               case 302:
                 nSection = MLS_LEADER;
                 break;
 
               case 304:
                 osText = TextUnescape(szLineBuf, true);
                 break;
 
               case 40:
                 dfScale = CPLAtof( szLineBuf );
                 break;
 
               case 340:
                 // 340 is the entity handle of the STYLE table entry that
                 // corresponds to the text style.
                 osTextStyleHandle = szLineBuf;
                 break;
 
               case 12:
                 dfTextX = CPLAtof( szLineBuf );
                 break;
 
               case 22:
                 dfTextY = CPLAtof( szLineBuf );
                 break;
 
               case 41:
                 dfTextHeight = CPLAtof( szLineBuf );
                 break;
 
               case 42:
                 dfTextAngle = CPLAtof( szLineBuf ) * 180 / M_PI;
                 break;
 
               case 171:
                 iTextAlignment = atoi( szLineBuf );
                 break;
 
               case 341:
                 // 341 is the entity handle of the BLOCK_RECORD table entry that
                 // corresponds to the block content of this MLEADER.
                 osBlockHandle = szLineBuf;
                 break;
 
               case 15:
                 oBlockTransformer.dfXOffset = CPLAtof( szLineBuf );
                 break;
 
               case 25:
                 oBlockTransformer.dfYOffset = CPLAtof( szLineBuf );
                 break;
 
               case 16:
                 oBlockTransformer.dfXScale = CPLAtof( szLineBuf );
                 break;
 
               case 26:
                 oBlockTransformer.dfYScale = CPLAtof( szLineBuf );
                 break;
 
               case 46:
                 oBlockTransformer.dfAngle = CPLAtof( szLineBuf );
                 break;
             }
             break;
 
           case MLS_LEADER:
             switch( nCode )
             {
               case 303:
                 nSection = MLS_CONTEXT_DATA;
                 aoLeaders.push_back( oLeader );
                 oLeader = DXFMLEADERLeader();
                 break;
 
               case 304:
                 nSection = MLS_LEADER_LINE;
                 poLine = new OGRLineString();
                 break;
 
               case 10:
                 oLeader.dfLandingX = CPLAtof(szLineBuf);
                 break;
 
               case 20:
                 oLeader.dfLandingY = CPLAtof(szLineBuf);
                 break;
 
               case 11:
                 oLeader.dfDoglegVectorX = CPLAtof(szLineBuf);
                 break;
 
               case 21:
                 oLeader.dfDoglegVectorY = CPLAtof(szLineBuf);
                 break;
 
               case 40:
                 oLeader.dfDoglegLength = CPLAtof(szLineBuf);
                 break;
             }
             break;
 
           case MLS_LEADER_LINE:
             switch( nCode )
             {
               case 305:
                 nSection = MLS_LEADER;
                 if( bHaveX && bHaveY && poLine )
                 {
                     poLine->addPoint( dfCurrentX, dfCurrentY );
                     bHaveX = bHaveY = false;
                 }
                 oLeader.apoLeaderLines.push_back( poLine );
                 poLine = NULL;
                 break;
 
               case 10:
                 // add the previous point onto the linestring
                 if( bHaveX && bHaveY )
                 {
                     poLine->addPoint( dfCurrentX, dfCurrentY );
                     bHaveY = false;
                 }
                 dfCurrentX = CPLAtof(szLineBuf);
                 bHaveX = true;
                 break;
 
               case 20:
                 // add the previous point onto the linestring
                 if( bHaveX && bHaveY )
                 {
                     poLine->addPoint( dfCurrentX, dfCurrentY );
                     bHaveX = false;
                 }
                 dfCurrentY = CPLAtof(szLineBuf);
                 bHaveY = true;
                 break;
             }
             break;
         }
     }
 
     if( poLine )
     {
         delete poLine;
         poLine = NULL;
     }
 
     // delete any lines left in a stray, unclosed LEADER{...} group
     while( !oLeader.apoLeaderLines.empty() )
     {
         delete oLeader.apoLeaderLines.back();
         oLeader.apoLeaderLines.pop_back();
     }
 
     // if we don't need any leaders, delete them
     if( nCode < 0 || nLeaderLineType == 0 )
     {
         while( !aoLeaders.empty() )
         {
             std::vector<OGRLineString *>& apoLeaderLines =
                 aoLeaders.back().apoLeaderLines;
             while( !apoLeaderLines.empty() )
             {
                 delete apoLeaderLines.back();
                 apoLeaderLines.pop_back();
             }
             aoLeaders.pop_back();
         }
     }
 
     if( nCode < 0 )
     {
         DXF_LAYER_READER_ERROR();
         delete poOverallFeature;
         return NULL;
     }
     if( nCode == 0 )
         poDS->UnreadValue();
 
 /* -------------------------------------------------------------------- */
 /*      Add the landing and arrowhead onto each leader line, and add    */
 /*      the dogleg, if present, onto the leader.                        */
 /* -------------------------------------------------------------------- */
     OGRDXFFeature* poLeaderFeature = poOverallFeature->CloneDXFFeature();
     poLeaderFeature->oStyleProperties["Color"] = osLeaderColor;
 
     OGRMultiLineString *poMLS = new OGRMultiLineString();
 
     // Arrowheads should be the same color as the leader line. If the leader
     // line is ByBlock or ByLayer then the arrowhead should be "owned" by the
     // overall feature for styling purposes.
     OGRDXFFeature* poArrowheadOwningFeature = poLeaderFeature;
     if( ( atoi(osLeaderColor) & 0xC2000000 ) == 0xC0000000 )
         poArrowheadOwningFeature = poOverallFeature;
 
     for( std::vector<DXFMLEADERLeader>::iterator oIt = aoLeaders.begin();
          nLeaderLineType != 0 && oIt != aoLeaders.end();
          ++oIt )
     {
         const bool bLeaderHasDogleg = bHasDogleg &&
             oIt->dfDoglegLength != 0.0 &&
             ( oIt->dfDoglegVectorX != 0.0 || oIt->dfDoglegVectorY != 0.0 );
 
         // We assume that the dogleg vector in the DXF is a unit vector.
         // Safe assumption? Who knows. The documentation is so bad.
         const double dfDoglegX = oIt->dfLandingX +
             oIt->dfDoglegVectorX * oIt->dfDoglegLength;
         const double dfDoglegY = oIt->dfLandingY +
             oIt->dfDoglegVectorY * oIt->dfDoglegLength;
 
         // When the dogleg is turned off, it seems that the dogleg and landing
         // data are still present in the DXF file, but they are not supposed
         // to be drawn.
         if( !bHasDogleg )
         {
             oIt->dfLandingX = dfDoglegX;
             oIt->dfLandingY = dfDoglegY;
         }
 
         // If there is only one leader line, add the dogleg directly onto it
         if( oIt->apoLeaderLines.size() == 1 )
         {
             OGRLineString *poLeaderLine = oIt->apoLeaderLines.front();
 
             poLeaderLine->addPoint( oIt->dfLandingX, oIt->dfLandingY );
             if( bLeaderHasDogleg )
                 poLeaderLine->addPoint( dfDoglegX, dfDoglegY );
 
             poMLS->addGeometryDirectly( poLeaderLine );
         }
         // Otherwise, add the dogleg as a separate line in the MLS
         else
         {
             for( std::vector<OGRLineString *>::iterator oLineIt =
                      oIt->apoLeaderLines.begin();
                  oLineIt != oIt->apoLeaderLines.end();
                  ++oLineIt )
             {
                 OGRLineString *poLeaderLine = *oLineIt;
                 poLeaderLine->addPoint( oIt->dfLandingX, oIt->dfLandingY );
                 poMLS->addGeometryDirectly( poLeaderLine );
             }
 
             if( bLeaderHasDogleg )
             {
                 OGRLineString *poDoglegLine = new OGRLineString();
                 poDoglegLine->addPoint( oIt->dfLandingX, oIt->dfLandingY );
                 poDoglegLine->addPoint( dfDoglegX, dfDoglegY );
                 poMLS->addGeometryDirectly( poDoglegLine );
             }
         }
 
         // Add arrowheads where required
         for( std::vector<OGRLineString *>::iterator oLineIt =
                  oIt->apoLeaderLines.begin();
              oLineIt != oIt->apoLeaderLines.end();
              ++oLineIt )
         {
             OGRLineString *poLeaderLine = *oLineIt;
 
             if( poLeaderLine->getNumPoints() >= 2 )
             {
                 OGRPoint oPoint1, oPoint2;
                 poLeaderLine->getPoint( 0, &oPoint1 );
                 poLeaderLine->getPoint( 1, &oPoint2 );
 
                 InsertArrowhead( poArrowheadOwningFeature,
                     osArrowheadBlockHandle, oPoint1, oPoint2,
                     dfArrowheadSize * dfScale );
             }
         }
     }
 
     poLeaderFeature->SetGeometryDirectly( poMLS );
 
     PrepareLineStyle( poLeaderFeature, poOverallFeature );
 
 /* -------------------------------------------------------------------- */
 /*      If we have block content, insert that block.                    */
 /* -------------------------------------------------------------------- */
 
     // Convert the block handle to a block name.
     CPLString osBlockName;
 
     if( osBlockHandle != "" )
         osBlockName = poDS->GetBlockNameByRecordHandle( osBlockHandle );
 
     if( osBlockName != "" )
     {
         oBlockTransformer.dfXScale *= dfScale;
         oBlockTransformer.dfYScale *= dfScale;
 
+        DXFBlockDefinition *poBlock = poDS->LookupBlock( osBlockName );
+
         std::map<OGRDXFFeature *, CPLString> oBlockAttributeValues;
 
         // If we have block attributes and will need to output them,
         // go through all the features on this block, looking for
         // ATTDEFs whose handle is in our list of attribute handles
-        if( !oBlockAttributes.empty() &&
+        if( poBlock && !oBlockAttributes.empty() &&
             ( poDS->InlineBlocks() ||
             poOverallFeature->GetFieldIndex( "BlockAttributes" ) != -1 ) )
         {
-            DXFBlockDefinition *poBlock = poDS->LookupBlock( osBlockName );
-
             for( std::vector<OGRDXFFeature *>::iterator oIt =
                 poBlock->apoFeatures.begin();
                 oIt != poBlock->apoFeatures.end();
                 ++oIt )
             {
                 const char* pszHandle =
                     (*oIt)->GetFieldAsString( "EntityHandle" );
 
                 if( pszHandle && oBlockAttributes.count( pszHandle ) > 0 )
                     oBlockAttributeValues[*oIt] = oBlockAttributes[pszHandle];
             }
         }
 
         OGRDXFFeature *poBlockFeature = poOverallFeature->CloneDXFFeature();
 
         // If not inlining the block, insert a reference and add attributes
         // to this feature.
         if( !poDS->InlineBlocks() )
         {
             poBlockFeature = InsertBlockReference( osBlockName,
                 oBlockTransformer, poBlockFeature );
 
             if( !oBlockAttributes.empty() && 
                 poOverallFeature->GetFieldIndex( "BlockAttributes" ) != -1 )
             {
                 std::vector<char *> apszAttribs;
 
                 for( std::map<OGRDXFFeature *, CPLString>::iterator oIt =
                     oBlockAttributeValues.begin();
                     oIt != oBlockAttributeValues.end();
                     ++oIt )
                 {
                     // Store the attribute tag and the text value as
                     // a space-separated entry in the BlockAttributes field
                     CPLString osAttribString = oIt->first->osAttributeTag;
                     osAttribString += " ";
                     osAttribString += oIt->second;
 
                     apszAttribs.push_back(
                         new char[osAttribString.length() + 1] );
                     CPLStrlcpy( apszAttribs.back(), osAttribString.c_str(),
                         osAttribString.length() + 1 );
                 }
 
                 apszAttribs.push_back( NULL );
 
                 poBlockFeature->SetField( "BlockAttributes", &apszAttribs[0] );
             }
 
             apoPendingFeatures.push( poBlockFeature );
         }
         else
         {
             // Insert the block inline.
             std::queue<OGRDXFFeature *> apoExtraFeatures;
             try
             {
                 poBlockFeature = InsertBlockInline( osBlockName,
                     oBlockTransformer, poBlockFeature, apoExtraFeatures,
                     true, poDS->ShouldMergeBlockGeometries() );
             }
             catch( const std::invalid_argument& )
             {
                 // Block doesn't exist
                 delete poBlockFeature;
                 poBlockFeature = NULL;
             }
 
             // Add the block geometries to the pending feature stack.
             if( poBlockFeature )
             {
                 apoPendingFeatures.push( poBlockFeature );
             }
             while( !apoExtraFeatures.empty() )
             {
                 apoPendingFeatures.push( apoExtraFeatures.front() );
                 apoExtraFeatures.pop();
             }
 
             // Also add any attributes to the pending feature stack.
             for( std::map<OGRDXFFeature *, CPLString>::iterator oIt =
                      oBlockAttributeValues.begin();
                  oIt != oBlockAttributeValues.end();
                  ++oIt )
             {
                 OGRDXFFeature *poAttribFeature = oIt->first->CloneDXFFeature();
 
                 poAttribFeature->SetField( "Text", oIt->second );
 
                 // Replace text in the style string
                 CPLString osNewStyle = poAttribFeature->GetStyleString();
                 const size_t nTextStartPos = osNewStyle.rfind( ",t:\"" );
                 if( nTextStartPos != std::string::npos )
                 {
                     size_t nTextEndPos = nTextStartPos + 4;
                     while( nTextEndPos < osNewStyle.size() &&
                         osNewStyle[nTextEndPos] != '\"' )
                     {
                         nTextEndPos++;
                         if( osNewStyle[nTextEndPos] == '\\' )
                             nTextEndPos++;
                     }
 
                     if( nTextEndPos < osNewStyle.size() )
                     {
                         osNewStyle.replace( nTextStartPos + 4,
                             nTextEndPos - ( nTextStartPos + 4 ), oIt->second );
                         poAttribFeature->SetStyleString( osNewStyle );
                     }
                 }
 
                 // The following bits are copied from
                 // OGRDXFLayer::InsertBlockInline
                 poAttribFeature->GetGeometryRef()->transform(
                     &oBlockTransformer );
 
                 if( EQUAL( poAttribFeature->GetFieldAsString( "Layer" ), "0" ) &&
                     !EQUAL( poOverallFeature->GetFieldAsString( "Layer" ), "" ) )
                 {
                     poAttribFeature->SetField( "Layer",
                         poOverallFeature->GetFieldAsString( "Layer" ) );
                 }
 
                 PrepareFeatureStyle( poAttribFeature, poOverallFeature );
 
                 ACAdjustText( oBlockTransformer.dfAngle * 180 / M_PI,
                     oBlockTransformer.dfXScale, oBlockTransformer.dfYScale,
                     poAttribFeature );
 
                 if ( !EQUAL( poOverallFeature->GetFieldAsString(
                     "EntityHandle" ), "" ) )
                 {
                     poAttribFeature->SetField( "EntityHandle",
                         poOverallFeature->GetFieldAsString( "EntityHandle" ) );
                 }
 
                 apoPendingFeatures.push( poAttribFeature );
             }
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*      Prepare a new feature to serve as the leader text label         */
 /*      refeature.  We will push it onto the layer as a pending           */
 /*      feature for the next feature read.                              */
 /* -------------------------------------------------------------------- */
 
     if( osText.empty() || osText == " " )
     {
         delete poOverallFeature;
         return poLeaderFeature;
     }
 
     OGRDXFFeature *poLabelFeature = poOverallFeature->CloneDXFFeature();
 
     poLabelFeature->SetField( "Text", osText );
     poLabelFeature->SetGeometryDirectly( new OGRPoint( dfTextX, dfTextY ) );
 
     CPLString osStyle;
     char szBuffer[64];
 
     const CPLString osStyleName =
         poDS->GetTextStyleNameByHandle( osTextStyleHandle );
 
     // Font name
     osStyle.Printf("LABEL(f:\"");
 
     // Preserve legacy behaviour of specifying "Arial" as a default font name.
     osStyle += poDS->LookupTextStyleProperty( osStyleName, "Font", "Arial" );
 
     osStyle += "\"";
 
     // Bold, italic
     if( EQUAL( poDS->LookupTextStyleProperty( osStyleName,
         "Bold", "0" ), "1" ) )
     {
         osStyle += ",bo:1";
     }
     if( EQUAL( poDS->LookupTextStyleProperty( osStyleName,
         "Italic", "0" ), "1" ) )
     {
         osStyle += ",it:1";
     }
 
     osStyle += CPLString().Printf(",t:\"%s\",p:%d", osText.c_str(),
         iTextAlignment + 6); // 7,8,9: vertical align top
 
     if( dfTextAngle != 0.0 )
     {
         CPLsnprintf(szBuffer, sizeof(szBuffer), "%.3g", dfTextAngle);
         osStyle += CPLString().Printf(",a:%s", szBuffer);
     }
 
     if( dfTextHeight != 0.0 )
     {
         CPLsnprintf(szBuffer, sizeof(szBuffer), "%.3g", dfTextHeight);
         osStyle += CPLString().Printf(",s:%sg", szBuffer);
     }
 
     const char *pszWidthFactor = poDS->LookupTextStyleProperty( osStyleName,
         "Width", "1" );
     if( pszWidthFactor && CPLAtof( pszWidthFactor ) != 1.0 )
     {
         CPLsnprintf(szBuffer, sizeof(szBuffer), "%.4g",
             CPLAtof( pszWidthFactor ) * 100.0);
         osStyle += CPLString().Printf(",w:%s", szBuffer);
     }
 
     // Color
     osStyle += ",c:";
     osStyle += poLabelFeature->GetColor( poDS );
 
     osStyle += ")";
 
     poLabelFeature->SetStyleString( osStyle );
 
     apoPendingFeatures.push( poLabelFeature );
 
     delete poOverallFeature;
     return poLeaderFeature;
 }
 
 /************************************************************************/
 /*                     GenerateDefaultArrowhead()                       */
 /*                                                                      */
 /*      Generates the default DWG/DXF arrowhead (a filled triangle      */
 /*      with a 3:1 aspect ratio) on the end of the line segment         */
 /*      defined by the two points.                                      */
 /************************************************************************/
