commit e75d7796000df64e0adc308ef851ac4fccffa4bd
Author: Reini Urban <rurban@cpan.org>
Date:   Thu Nov 9 15:12:13 2023 +0100

    spec: fixed PROXY.data size hack
    
    fixes overflow with ossfuzz 63814

diff --git a/src/dwg.spec b/src/dwg.spec
index ab5fcae6..5dcf9447 100644
--- a/src/dwg.spec
+++ b/src/dwg.spec
@@ -5869,101 +5869,96 @@ DWG_ENTITY_END
 //(498) pg.149 r2000+
 // ACAD_PROXY_ENTITY really
 DWG_ENTITY (PROXY_ENTITY)
 
   //HANDLE_UNKNOWN_BITS;
   SUBCLASS (AcDbProxyEntity)
   UNTIL (R_14) {
     FIELD_BL (class_id, 90);
   }
   LATER_VERSIONS {
     FIELD_BL (class_id, 91);
   }
   PRE (R_2018)
   {
     int dxf = dat->version <= R_14 ? 91: 95;
     FIELD_BL (version, dxf); // i.e. version << 8 + maint_version
   }
   SINCE (R_2018)
   { // if encode from earlier: maint_version = version<<16 + acad version
     FIELD_BL (version, 71);
     FIELD_BL (maint_version, 97);
   }
   SINCE (R_2000)
   {
     FIELD_B (from_dxf, 70); // Original Data Format: 0 dwg, 1 dxf
   }
 
   DECODER {
-    unsigned char opts = dat->opts;
     _obj->data_numbits = ((dat->size * 8) - bit_position (dat)) & 0xFFFFFFFF;
     _obj->data_size = (dat->size - dat->byte) & 0xFFFFFFFF;
     if (dat->size > obj->size)
       {
         LOG_TRACE ("dat not restricted, dat->size %" PRIuSIZE
                    " > obj->size " FORMAT_RL "\n",
                    dat->size, obj->size);
         _obj->data_numbits
             = (((obj->address * 8) + obj->bitsize) - bit_position (dat))
               & 0xFFFFFFFF;
         _obj->data_size = _obj->data_numbits % 8;
         if (_obj->data_numbits)
           _obj->data_size++;
       }
     LOG_TRACE ("data_numbits: " FORMAT_BL "\n", _obj->data_numbits);
     LOG_TRACE ("data_size: " FORMAT_BL "\n", _obj->data_size);
-    dat->opts &= 0xf0;
-    dat->size++;
     FIELD_TF (data, _obj->data_size, 310);
-    dat->size--;
-    dat->opts = opts;
   }
   ENCODER {
     // write is always aligned
     if (!_obj->data_numbits)
       _obj->data_numbits = 8 * _obj->data_size;
     LOG_TRACE ("data_numbits: " FORMAT_BL "\n", _obj->data_numbits);
     LOG_TRACE ("data_size: " FORMAT_BL "\n", _obj->data_size);
   }
   JSON {
     FIELD_BL (data_numbits, 0);
   }
   DXF_OR_PRINT {
     // preview 92/310 is also proxy data
     FIELD_BL (data_size, 93);
   }
 #ifndef IS_DECODER
   FIELD_BINARY (data, FIELD_VALUE (data_size), 310);
 #endif
 #if defined IS_DECODER || defined IS_ENCODER
   {
     int bits = _obj->data_numbits - (_obj->data_size * 8);
     if (!(bits > -8 && bits <= 0))
       LOG_ERROR ("Invalid data_numbits %u - (_obj->data_size %u * 8): %d",
                  _obj->data_numbits, _obj->data_size, bits);
     assert (bits > -8 && bits <= 0);
     if (bits < 0)
       // back off a few bits, we wrote too much
       bit_advance_position (dat, bits);
   }
 #endif
 
   COMMON_ENTITY_HANDLE_DATA;
 #ifdef IS_DECODER
   {
     size_t pos = bit_position (hdl_dat);
     unsigned char opts = dat->opts;
     dat->opts &= 0xf0;
     _obj->num_objids = 0;
     while (hdl_dat->byte < hdl_dat->size)
       {
         Dwg_Handle hdl;
         if (bit_read_H (hdl_dat, &hdl))
           break;
         else
           _obj->num_objids++;
       }
     dat->opts = opts;
     bit_set_position (hdl_dat, pos);
   }
 #endif
   HANDLE_VECTOR (objids, num_objids, ANYCODE, 340); // code 3 or 4
@@ -5973,106 +5968,108 @@ DWG_ENTITY_END
 //(499) pg.149 r2000+
 // ACAD_PROXY_OBJECT really
 DWG_OBJECT (PROXY_OBJECT)
 
   //HANDLE_UNKNOWN_BITS;
   SUBCLASS (AcDbProxyObject)
   FIELD_BL (class_id, 91);
   PRE (R_2018)
   {
     FIELD_BL (version, 95);
   }
   SINCE (R_2018)
   { // if encode from earlier: maint_version = version<<16 + acad version
     FIELD_BL (version, 71);
     FIELD_BL (maint_version, 97);
   }
   SINCE (R_2000)
   {
     FIELD_B (from_dxf, 70); // Original Data Format: 0 dwg, 1 dxf
   }
 
   DECODER {
-    unsigned char opts = dat->opts;
     _obj->data_numbits = ((dat->size * 8) - bit_position (dat)) & 0xFFFFFFFF;
     _obj->data_size = (dat->size - dat->byte) & 0xFFFFFFFF;
     if (dat->size > obj->size)
       {
         LOG_TRACE ("dat not restricted, dat->size %" PRIuSIZE
                    " > obj->size %u\n",
                    dat->size, obj->size);
         _obj->data_numbits
             = (((obj->address * 8) + obj->bitsize) - bit_position (dat))
               & 0xFFFFFFFF;
         _obj->data_size = _obj->data_numbits / 8;
         if (_obj->data_numbits % 8)
           _obj->data_size++;
       }
     else
       if (!_obj->data_size) {
         _obj->data_size = _obj->data_numbits / 8;
         if (_obj->data_numbits % 8)
           _obj->data_size++;
+        if (!_obj->data_size)
+          _obj->data_numbits = 0;
       }
     LOG_TRACE ("data_numbits => " FORMAT_BL "\n", _obj->data_numbits);
     LOG_TRACE ("data_size => " FORMAT_BL "\n", _obj->data_size);
     FIELD_VALUE (num_objids) = 0;
-    dat->opts &= 0xf0;
-    dat->size++;
-    FIELD_TF (data, _obj->data_size, 310);
-    dat->size--;
-    dat->opts = opts;
+    _obj->data = bit_read_bits (dat, _obj->data_numbits);
+    LOG_TRACE_TF (_obj->data, _obj->data_size);
+    // FIELD_TF (data, _obj->data_size, 310); // may overshoot
   }
   ENCODER {
     // write is always aligned
     if (!_obj->data_numbits)
       _obj->data_numbits = 8 * _obj->data_size;
     LOG_TRACE ("data_numbits => " FORMAT_BL "\n", _obj->data_numbits);
     LOG_TRACE ("data_size => " FORMAT_BL "\n", _obj->data_size);
   }
   JSON {
     FIELD_BL (data_numbits, 0);
   }
   DXF_OR_PRINT {
     // preview 92/310 is also proxy data
     FIELD_BL (data_size, 93);
   }
 #ifndef IS_DECODER
   FIELD_BINARY (data, FIELD_VALUE (data_size), 310);
 #endif
 #if defined IS_DECODER || defined IS_ENCODER
   {
     int bits;
     if (!_obj->data_size)
       _obj->data_size = _obj->data_numbits / 8;
-    bits = _obj->data_numbits - (int)(_obj->data_size * 8);
-    if (!(bits > -8 && bits <= 0))
-      LOG_ERROR ("Invalid data_numbits %u - (_obj->data_size %u * 8): %d",
-                 _obj->data_numbits, _obj->data_size, bits);
-    assert (bits > -8 && bits <= 0);
-    if (bits < 0)
-      // back off a few bits, we wrote too much
-      bit_advance_position (dat, bits);
+    if (_obj->data_size)
+      {
+        bits = _obj->data_numbits - (int)(_obj->data_size * 8);
+        if (!(bits > -8 && bits <= 0))
+          LOG_ERROR ("Invalid data_numbits %u - (_obj->data_size %u * 8): %d",
+                     _obj->data_numbits, _obj->data_size, bits);
+        assert (bits > -8 && bits <= 0);
+        if (bits < 0)
+          // back off a few bits, we wrote too much
+          bit_advance_position (dat, bits);
+      }
   }
 #endif
 
   START_OBJECT_HANDLE_STREAM;
 #ifdef IS_DECODER
   {
     size_t pos = bit_position (hdl_dat);
     unsigned char opts = dat->opts;
     dat->opts &= 0xf0;
     _obj->num_objids = 0;
     while (hdl_dat->byte < hdl_dat->size)
       {
         Dwg_Handle hdl;
         if (bit_read_H (hdl_dat, &hdl))
           break; // error
         else
           _obj->num_objids++;
       }
     LOG_TRACE ("num_objids: " FORMAT_BL "\n", _obj->num_objids);
     dat->opts = opts;
     bit_set_position (hdl_dat, pos);
   }
 #endif
   HANDLE_VECTOR (objids, num_objids, ANYCODE, 340); // code 3 or 4
