commit 66efe2fa6abc233011a58965d6de2bb0f91328bd
Author: Christos Zoulas <christos@zoulas.com>
Date:   Tue Sep 20 21:00:57 2022 +0000

    don't print the raw svalue
    don't increment past the EOS (clusterfuzz) in OP_NONE

diff --git a/src/apprentice.c b/src/apprentice.c
index e2a07963..a959b151 100644
--- a/src/apprentice.c
+++ b/src/apprentice.c
@@ -32,57 +32,57 @@
 #include "file.h"
 
 #ifndef	lint
-FILE_RCSID("@(#)$File: apprentice.c,v 1.329 2022/09/20 20:25:46 christos Exp $")
+FILE_RCSID("@(#)$File: apprentice.c,v 1.330 2022/09/20 21:00:57 christos Exp $")
 #endif	/* lint */
 
 #include "magic.h"
 #include <stdlib.h>
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif
 #include <stddef.h>
 #include <string.h>
 #include <assert.h>
 #include <ctype.h>
 #include <fcntl.h>
 #ifdef QUICK
 #include <sys/mman.h>
 #endif
 #include <dirent.h>
 #include <limits.h>
 #ifdef HAVE_BYTESWAP_H
 #include <byteswap.h>
 #endif
 #ifdef HAVE_SYS_BSWAP_H
 #include <sys/bswap.h>
 #endif
 
 
 #define	EATAB {while (isascii(CAST(unsigned char, *l)) && \
 		      isspace(CAST(unsigned char, *l)))  ++l;}
 #define LOWCASE(l) (isupper(CAST(unsigned char, l)) ? \
 			tolower(CAST(unsigned char, l)) : (l))
 /*
  * Work around a bug in headers on Digital Unix.
  * At least confirmed for: OSF1 V4.0 878
  */
 #if defined(__osf__) && defined(__DECC)
 #ifdef MAP_FAILED
 #undef MAP_FAILED
 #endif
 #endif
 
 #ifndef MAP_FAILED
 #define MAP_FAILED (void *) -1
 #endif
 
 #ifndef MAP_FILE
 #define MAP_FILE 0
 #endif
 
 #define ALLOC_CHUNK	CAST(size_t, 10)
 #define ALLOC_INCR	CAST(size_t, 200)
 
 #define MAP_TYPE_USER	0
 #define MAP_TYPE_MALLOC	1
 #define MAP_TYPE_MMAP	2
@@ -2431,49 +2431,53 @@ private int
 parse_strength(struct magic_set *ms, struct magic_entry *me, const char *line,
     size_t len __attribute__((__unused__)))
 {
 	const char *l = line;
 	char *el;
 	unsigned long factor;
+	char sbuf[512];
 	struct magic *m = &me->mp[0];
 
 	if (m->factor_op != FILE_FACTOR_OP_NONE) {
 		file_magwarn(ms,
 		    "Current entry already has a strength type: %c %d",
 		    m->factor_op, m->factor);
 		return -1;
 	}
 	if (m->type == FILE_NAME) {
 		file_magwarn(ms, "%s: Strength setting is not supported in "
-		    "\"name\" magic entries", m->value.s);
+		    "\"name\" magic entries",
+		    file_printable(ms, sbuf, sizeof(sbuf), m->value.s,
+		    sizeof(m->value.s)));
 		return -1;
 	}
 	EATAB;
 	switch (*l) {
 	case FILE_FACTOR_OP_NONE:
+		break;
 	case FILE_FACTOR_OP_PLUS:
 	case FILE_FACTOR_OP_MINUS:
 	case FILE_FACTOR_OP_TIMES:
 	case FILE_FACTOR_OP_DIV:
 		m->factor_op = *l++;
 		break;
 	default:
 		file_magwarn(ms, "Unknown factor op `%c'", *l);
 		return -1;
 	}
 	EATAB;
 	factor = strtoul(l, &el, 0);
 	if (factor > 255) {
 		file_magwarn(ms, "Too large factor `%lu'", factor);
 		goto out;
 	}
 	if (*el && !isspace(CAST(unsigned char, *el))) {
 		file_magwarn(ms, "Bad factor `%s'", l);
 		goto out;
 	}
 	m->factor = CAST(uint8_t, factor);
 	if (m->factor == 0 && m->factor_op == FILE_FACTOR_OP_DIV) {
 		file_magwarn(ms, "Cannot have factor op `%c' and factor %u",
 		    m->factor_op, m->factor);
 		goto out;
 	}
 	return 0;
