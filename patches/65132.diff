commit a8a8a80c5fb02befe37bfd92d3089d62612c8f2e
Author: Mallikarjun Kamble <Mallikarjun.Kamble@ittiam.com>
Date:   Mon Dec 11 11:35:37 2023 +0530

    Added compliance fixes

diff --git a/decoder/svc/isvcd_api.c b/decoder/svc/isvcd_api.c
index 5adfbb1..38d876d 100644
--- a/decoder/svc/isvcd_api.c
+++ b/decoder/svc/isvcd_api.c
@@ -2458,447 +2458,447 @@ WORD32 isvcd_mode_mv_resample_ctxt_create(svc_dec_ctxt_t *ps_svcd_ctxt, void *pv
     for(u1_layer_id = 0; u1_layer_id < MAX_NUM_RES_LYRS; u1_layer_id++)
     {
         ps_svc_lyr_dec = &ps_svcd_ctxt->ps_svc_dec_lyr[u1_layer_id];
         ps_svc_lyr_dec->pv_mode_mv_sample_ctxt = ps_svcd_ctxt->pv_mode_mv_sample_ctxt;
         ps_svc_lyr_dec->pv_ref_lyr_offset = ps_svcd_ctxt->pv_ref_lyr_offset;
     }
     return IV_SUCCESS;
 }
 /*****************************************************************************/
 /*                                                                           */
 /*  Function Name : isvcd_allocate_static_bufs                               */
 /*                                                                           */
 /*  Description   : allocates static buffers                                 */
 /*                                                                           */
 /*  Inputs        :iv_obj_t decoder handle                                   */
 /*                :pv_api_ip pointer to input structure                      */
 /*                :pv_api_op pointer to output structure                     */
 /*  Outputs       :                                                          */
 /*  Returns       : void                                                     */
 /*                                                                           */
 /*  Issues        : none                                                     */
 /*                                                                           */
 /*  Revision History:                                                        */
 /*                                                                           */
 /*         DD MM YYYY   Author(s)       Changes (Describe the changes made)  */
 /*         06 09 2021   Kishore         Draft                                */
 /*                                                                           */
 /*****************************************************************************/
 WORD32 isvcd_allocate_static_bufs(iv_obj_t **dec_hdl, void *pv_api_ip, void *pv_api_op)
 {
     isvcd_create_ip_t *ps_create_ip;
     isvcd_create_op_t *ps_create_op;
     void *pv_buf;
     UWORD8 *pu1_buf;
     dec_struct_t *ps_dec;
     svc_dec_lyr_struct_t *ps_svc_lyr_dec;
     svc_dec_ctxt_t *ps_svcd_ctxt;
     void *(*pf_aligned_alloc)(void *pv_mem_ctxt, WORD32 alignment, WORD32 size);
     void (*pf_aligned_free)(void *pv_mem_ctxt, void *pv_buf);
     void *pv_mem_ctxt;
     WORD32 size;
     UWORD8 u1_layer_id, u1_sps_ctr;
     UWORD8 u1_chroma_format;
     WORD32 ret;
 
     ps_create_ip = (isvcd_create_ip_t *) pv_api_ip;
     ps_create_op = (isvcd_create_op_t *) pv_api_op;
 
     ps_create_op->s_ivd_create_op_t.u4_error_code = 0;
     pf_aligned_alloc = ps_create_ip->s_ivd_create_ip_t.pf_aligned_alloc;
     pf_aligned_free = ps_create_ip->s_ivd_create_ip_t.pf_aligned_free;
     pv_mem_ctxt = ps_create_ip->s_ivd_create_ip_t.pv_mem_ctxt;
     u1_chroma_format = (UWORD8) (ps_create_ip->s_ivd_create_ip_t.e_output_format);
 
     if((u1_chroma_format != IV_YUV_420P) && (u1_chroma_format != IV_YUV_420SP_UV) &&
        (u1_chroma_format != IV_YUV_420SP_VU))
     {
         ps_create_op->s_ivd_create_op_t.pv_handle = NULL;
 
         return IV_FAIL;
     }
 
     /* Initialize return handle to NULL */
     ps_create_op->s_ivd_create_op_t.pv_handle = NULL;
     pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, sizeof(iv_obj_t));
     RETURN_IF((NULL == pv_buf), IV_FAIL);
     memset(pv_buf, 0, sizeof(iv_obj_t));
     *dec_hdl = (iv_obj_t *) pv_buf;
     ps_create_op->s_ivd_create_op_t.pv_handle = *dec_hdl;
 
     (*dec_hdl)->pv_codec_handle = NULL;
     pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, sizeof(svc_dec_ctxt_t));
     RETURN_IF((NULL == pv_buf), IV_FAIL);
     (*dec_hdl)->pv_codec_handle = (svc_dec_ctxt_t *) pv_buf;
     ps_svcd_ctxt = (svc_dec_ctxt_t *) pv_buf;
 
     memset(ps_svcd_ctxt, 0, sizeof(svc_dec_ctxt_t));
 
     ps_svcd_ctxt->u1_prev_num_res_layers = UINT8_MAX;
     ps_svcd_ctxt->u1_pre_parse_in_flush = 1;
     /* set default to maximum values supported */
     ps_svcd_ctxt->u1_tgt_dep_id = MAX_DEPENDENCY_ID;
     ps_svcd_ctxt->u1_tgt_quality_id = MAX_QUALITY_ID;
     ps_svcd_ctxt->u1_tgt_temp_id = MAX_TEMPORAL_ID;
     ps_svcd_ctxt->u1_tgt_priority_id = MAX_PRIORITY_ID;
 
     /* two sets of MAX_NUM_SEQ_PARAMS are created one for sps-base layer;  one for
      * subset_sps- enhancement*/
     size = ((sizeof(dec_seq_params_t)) * MAX_NUM_SEQ_PARAMS * 2);
     pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
     RETURN_IF((NULL == pv_buf), IV_FAIL);
     memset(pv_buf, 0, size);
     ps_svcd_ctxt->ps_sps = pv_buf;
 
     /* two sets of MAX_NUM_SEQ_PARAMS are created one for sps-base layer;  one for
      * subset_sps- enhancement*/
     size = ((sizeof(dec_svc_seq_params_t)) * MAX_NUM_SEQ_PARAMS * 2);
     pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
     RETURN_IF((NULL == pv_buf), IV_FAIL);
     memset(pv_buf, 0, size);
     ps_svcd_ctxt->ps_subset_sps = pv_buf;
 
     for(u1_sps_ctr = 0; u1_sps_ctr < (2 * MAX_NUM_SEQ_PARAMS); u1_sps_ctr++)
     {
         ps_svcd_ctxt->ps_subset_sps[u1_sps_ctr].ps_seq = &ps_svcd_ctxt->ps_sps[u1_sps_ctr];
     }
 
     size = sizeof(sei);
     pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
     RETURN_IF((NULL == pv_buf), IV_FAIL);
     memset(pv_buf, 0, size);
     ps_svcd_ctxt->ps_sei = (sei *) pv_buf;
 
     size = sizeof(sei);
     pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
     RETURN_IF((NULL == pv_buf), IV_FAIL);
     memset(pv_buf, 0, size);
     ps_svcd_ctxt->ps_sei_parse = (sei *) pv_buf;
 
     size = (sizeof(dec_pic_params_t)) * MAX_NUM_PIC_PARAMS;
     pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
     RETURN_IF((NULL == pv_buf), IV_FAIL);
     memset(pv_buf, 0, size);
     ps_svcd_ctxt->ps_pps = pv_buf;
 
     size = (sizeof(svc_dec_lyr_struct_t)) * MAX_NUM_RES_LYRS;
     pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
     RETURN_IF((NULL == pv_buf), IV_FAIL);
     memset(pv_buf, 0, size);
     ps_svcd_ctxt->ps_svc_dec_lyr = pv_buf;
     ps_svcd_ctxt->u1_target_layer_id = 0;
     ps_svcd_ctxt->u1_cur_layer_id = 0;
     ps_svcd_ctxt->i4_eos_flag = 0;
 
     ret = isvcd_mode_mv_resample_ctxt_create(ps_svcd_ctxt, pv_api_ip, pv_api_op);
     if(ret != IV_SUCCESS)
     {
         return ret;
     }
     ret = isvcd_intra_resample_ctxt_create(ps_svcd_ctxt, pv_api_ip, pv_api_op);
     if(ret != IV_SUCCESS)
     {
         return ret;
     }
     ret = isvcd_residual_resample_ctxt_create(ps_svcd_ctxt, pv_api_ip, pv_api_op);
     if(ret != IV_SUCCESS)
     {
         return ret;
     }
     ret = isvcd_nal_parse_ctxt_create(ps_svcd_ctxt, pv_api_ip, pv_api_op);
     if(ret != IV_SUCCESS)
     {
         return ret;
     }
     for(u1_layer_id = 0; u1_layer_id < MAX_NUM_RES_LYRS; u1_layer_id++)
     {
         ps_svc_lyr_dec = &ps_svcd_ctxt->ps_svc_dec_lyr[u1_layer_id];
         ps_dec = &ps_svc_lyr_dec->s_dec;
 
         ps_svc_lyr_dec->ps_svcd_ctxt = ps_svcd_ctxt;
         ps_svc_lyr_dec->u1_layer_id = u1_layer_id;
         ps_svc_lyr_dec->u1_dyadic_flag = 1;
         ps_svc_lyr_dec->u1_restricted_res_change_flag = 1;
         ps_svc_lyr_dec->u1_base_res_flag = 1;
-        ps_svc_lyr_dec->u1_ref_layer_id = 0;
+        ps_svc_lyr_dec->u1_ref_layer_id = u1_layer_id - 1;
         ps_svc_lyr_dec->ps_dec_svc_ref_layer =
             &ps_svcd_ctxt->ps_svc_dec_lyr[ps_svc_lyr_dec->u1_ref_layer_id];
         ps_svc_lyr_dec->u4_pps_id_for_layer = UINT32_MAX;
 
 #ifndef LOGO_EN
         ps_dec->u4_share_disp_buf = ps_create_ip->s_ivd_create_ip_t.u4_share_disp_buf;
 #else
         ps_dec->u4_share_disp_buf = 0;
 #endif
 
         ps_dec->u1_chroma_format = (UWORD8) (ps_create_ip->s_ivd_create_ip_t.e_output_format);
 
         if((ps_dec->u1_chroma_format != IV_YUV_420P) &&
            (ps_dec->u1_chroma_format != IV_YUV_420SP_UV) &&
            (ps_dec->u1_chroma_format != IV_YUV_420SP_VU))
         {
             ps_dec->u4_share_disp_buf = 0;
         }
 
         ps_dec->u1_enable_mb_info = ps_create_ip->u4_enable_frame_info;
         ps_dec->pf_aligned_alloc = pf_aligned_alloc;
         ps_dec->pf_aligned_free = pf_aligned_free;
         ps_dec->pv_mem_ctxt = pv_mem_ctxt;
 
         ps_dec->ps_sps = ps_svcd_ctxt->ps_sps;
         ps_svc_lyr_dec->ps_subset_sps = ps_svcd_ctxt->ps_subset_sps;
         ps_dec->ps_pps = ps_svcd_ctxt->ps_pps;
         ps_dec->ps_sei = ps_svcd_ctxt->ps_sei;
         ps_dec->ps_sei_parse = ps_svcd_ctxt->ps_sei_parse;
 
         size = ithread_get_handle_size();
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->pv_dec_thread_handle = pv_buf;
 
         size = ithread_get_handle_size();
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->pv_bs_deblk_thread_handle = pv_buf;
 
 #ifdef KEEP_THREADS_ACTIVE
         {
             UWORD32 i;
             /* Request memory to hold mutex (start/done) for both threads */
             size = ithread_get_mutex_lock_size() << 2;
             pv_buf = pf_aligned_alloc(pv_mem_ctxt, 8, size);
             RETURN_IF((NULL == pv_buf), IV_FAIL);
             memset(pv_buf, 0, size);
 
             // init mutex variable for both the threads
             // 1. ih264d_decode_picture_thread
             // 2. ih264d_recon_deblk_thread
             for(i = 0; i < 2; i++)
             {
                 WORD32 ret;
                 WORD32 mutex_size = ithread_get_mutex_lock_size();
 
                 ps_dec->apv_proc_start_mutex[i] = (UWORD8 *) pv_buf + (2 * i * mutex_size);
                 ps_dec->apv_proc_done_mutex[i] = (UWORD8 *) pv_buf + ((2 * i + 1) * mutex_size);
 
                 ret = ithread_mutex_init(ps_dec->apv_proc_start_mutex[0]);
                 RETURN_IF((ret != IV_SUCCESS), ret);
 
                 ret = ithread_mutex_init(ps_dec->apv_proc_done_mutex[i]);
                 RETURN_IF((ret != IV_SUCCESS), ret);
             }
 
             size = ithread_get_cond_struct_size() << 2;
             pv_buf = pf_aligned_alloc(pv_mem_ctxt, 8, size);
             RETURN_IF((NULL == pv_buf), IV_FAIL);
             memset(pv_buf, 0, size);
 
             // init condition variable for both the threads
             for(i = 0; i < 2; i++)
             {
                 WORD32 ret;
                 WORD32 cond_size = ithread_get_cond_struct_size();
                 ps_dec->apv_proc_start_condition[i] = (UWORD8 *) pv_buf + (2 * i * cond_size);
                 ps_dec->apv_proc_done_condition[i] = (UWORD8 *) pv_buf + ((2 * i + 1) * cond_size);
 
                 ret = ithread_cond_init(ps_dec->apv_proc_start_condition[i]);
                 RETURN_IF((ret != IV_SUCCESS), ret);
 
                 ret = ithread_cond_init(ps_dec->apv_proc_done_condition[i]);
                 RETURN_IF((ret != IV_SUCCESS), ret);
             }
         }
 #endif
         size = sizeof(dpb_manager_t);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->ps_dpb_mgr = pv_buf;
 
         size = sizeof(pred_info_t) * 2 * 32;
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->ps_pred = pv_buf;
 
         size = sizeof(disp_mgr_t);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->pv_disp_buf_mgr = pv_buf;
 
         size = ih264_buf_mgr_size();
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->pv_pic_buf_mgr = pv_buf;
 
         size = sizeof(struct pic_buffer_t) * (H264_MAX_REF_PICS * 2);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->ps_pic_buf_base = pv_buf;
 
         size = sizeof(dec_err_status_t);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->ps_dec_err_status = (dec_err_status_t *) pv_buf;
 
         size = sizeof(dpb_commands_t);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->ps_dpb_cmds = (dpb_commands_t *) pv_buf;
 
         size = sizeof(dec_bit_stream_t);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->ps_bitstrm = (dec_bit_stream_t *) pv_buf;
 
         size = sizeof(dec_nal_unit_svc_ext_params_t);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_svc_lyr_dec->ps_nal_svc_ext = (dec_nal_unit_svc_ext_params_t *) pv_buf;
 
         size = sizeof(dec_slice_params_t);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->ps_cur_slice = (dec_slice_params_t *) pv_buf;
 
         size = MAX(sizeof(dec_seq_params_t), sizeof(dec_pic_params_t));
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->pv_scratch_sps_pps = pv_buf;
 
         size = sizeof(dec_svc_seq_params_t);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_svc_lyr_dec->pv_scratch_subset_sps = pv_buf;
 
         ps_dec->u4_static_bits_buf_size = 256000;
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, ps_dec->u4_static_bits_buf_size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, ps_dec->u4_static_bits_buf_size);
         ps_dec->pu1_bits_buf_static = pv_buf;
 
         size = ((TOTAL_LIST_ENTRIES + PAD_MAP_IDX_POC) * sizeof(void *));
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         ps_dec->ppv_map_ref_idx_to_poc_base = pv_buf;
         memset(ps_dec->ppv_map_ref_idx_to_poc_base, 0, size);
 
         ps_dec->ppv_map_ref_idx_to_poc = ps_dec->ppv_map_ref_idx_to_poc_base + OFFSET_MAP_IDX_POC;
 
         size = (sizeof(bin_ctxt_model_t) * NUM_CABAC_CTXTS_SVC);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->p_cabac_ctxt_table_t = pv_buf;
 
         size = sizeof(ctxt_inc_mb_info_t);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->ps_left_mb_ctxt_info = pv_buf;
 
         size = MAX_REF_BUF_SIZE * 2;
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->pu1_ref_buff_base = pv_buf;
         ps_dec->pu1_ref_buff = ps_dec->pu1_ref_buff_base + MAX_REF_BUF_SIZE;
 
         size = ((sizeof(WORD16)) * PRED_BUFFER_WIDTH * PRED_BUFFER_HEIGHT * 2);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->pi2_pred1 = pv_buf;
 
         size = sizeof(UWORD8) * (MB_LUM_SIZE);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->pu1_temp_mc_buffer = pv_buf;
 
         size = 8 * MAX_REF_BUFS * sizeof(struct pic_buffer_t);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
 
         ps_dec->pu1_init_dpb_base = pv_buf;
         pu1_buf = pv_buf;
         ps_dec->ps_dpb_mgr->ps_init_dpb[0][0] = (struct pic_buffer_t *) pu1_buf;
 
         pu1_buf += size / 2;
         ps_dec->ps_dpb_mgr->ps_init_dpb[1][0] = (struct pic_buffer_t *) pu1_buf;
 
         size = (sizeof(UWORD32) * 2 * 3 * ((MAX_FRAMES << 1) * (MAX_FRAMES << 1)) * 2);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->pu4_mbaff_wt_mat = pv_buf;
 
         size = sizeof(UWORD32) * 2 * 3 * ((MAX_FRAMES << 1) * (MAX_FRAMES << 1));
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->pu4_wts_ofsts_mat = pv_buf;
 
         size = (sizeof(neighbouradd_t) << 2);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->ps_left_mvpred_addr = pv_buf;
 
         size = ih264_buf_mgr_size();
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         memset(pv_buf, 0, size);
         ps_dec->pv_mv_buf_mgr = pv_buf;
 
         size = sizeof(col_mv_buf_t) * (H264_MAX_REF_PICS * 2);
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         ps_dec->ps_col_mv_base = pv_buf;
         memset(ps_dec->ps_col_mv_base, 0, size);
 
         size = ((MB_SIZE * MB_SIZE * 3) >> 1) + MB_SIZE;
         pv_buf = pf_aligned_alloc(pv_mem_ctxt, 128, size);
         RETURN_IF((NULL == pv_buf), IV_FAIL);
         ps_svc_lyr_dec->pu1_ii_resamp_buffer_luma = pv_buf;
         ps_svc_lyr_dec->pu1_ii_resamp_buffer_chroma =
             ps_svc_lyr_dec->pu1_ii_resamp_buffer_luma + (MB_SIZE * MB_SIZE);
         memset(ps_svc_lyr_dec->pu1_ii_resamp_buffer_luma, 0, size);
 
         isvcd_init_decoder(ps_svc_lyr_dec);
     }
     return IV_SUCCESS;
 }
 
 /*****************************************************************************/
 /*                                                                           */
 /*  Function Name : isvcd_create                                             */
 /*                                                                           */
 /*  Description   : creates decoder                                          */
 /*                                                                           */
 /*  Inputs        :iv_obj_t decoder handle                                   */
 /*                :pv_api_ip pointer to input structure                      */
 /*                :pv_api_op pointer to output structure                     */
 /*  Outputs       :                                                          */
 /*  Returns       : void                                                     */
 /*                                                                           */
 /*  Issues        : none                                                     */
 /*                                                                           */
 /*  Revision History:                                                        */
 /*                                                                           */
 /*         DD MM YYYY   Author(s)       Changes (Describe the changes made)  */
 /*         06 09 2021   Kishore                                              */
 /*                                                                           */
 /*****************************************************************************/
diff --git a/decoder/svc/isvcd_parse_slice.c b/decoder/svc/isvcd_parse_slice.c
index 0ebe265..05d89ef 100644
--- a/decoder/svc/isvcd_parse_slice.c
+++ b/decoder/svc/isvcd_parse_slice.c
@@ -1610,283 +1610,286 @@ WORD32 isvcd_set_default_slice_header_ext(svc_dec_lyr_struct_t *ps_svc_lyr_dec)
 /*!
 **************************************************************************
 * \if Function name : isvcd_parse_slice_header \endif
 *
 * \brief
 *    parses the svc slice header attr
 *
 * \return
 *    0 on Success and Error code otherwise
 **************************************************************************
 */
 WORD32 isvcd_parse_slice_header(svc_dec_lyr_struct_t *ps_svc_lyr_dec)
 {
     dec_struct_t *ps_dec = &ps_svc_lyr_dec->s_dec;
     dec_pic_params_t *ps_pps = ps_dec->ps_cur_pps;
     dec_bit_stream_t *ps_bitstrm = ps_dec->ps_bitstrm;
     dec_seq_params_t *ps_seq;
     dec_svc_seq_params_t *ps_subset_seq;
     dec_slice_svc_ext_params_t *ps_svc_slice_params = NULL;
     dec_subset_seq_params_t *ps_sps_svc_ext = NULL;
     svc_dec_ctxt_t *ps_svcd_ctxt;
     UWORD32 *pu4_bitstrm_buf = ps_dec->ps_bitstrm->pu4_buffer;
     UWORD32 *pu4_bitstrm_ofst = &ps_dec->ps_bitstrm->u4_ofst;
     ps_svcd_ctxt = ps_svc_lyr_dec->ps_svcd_ctxt;
     ps_seq = ps_pps->ps_sps;
     ps_seq += MAX_NUM_SEQ_PARAMS;
     ps_subset_seq =
         &ps_svc_lyr_dec->ps_subset_sps[MAX_NUM_SEQ_PARAMS + ps_seq->u1_seq_parameter_set_id];
     ps_sps_svc_ext = &ps_subset_seq->s_sps_svc_ext;
     ps_svc_slice_params = &ps_svc_lyr_dec->s_svc_slice_params;
 
     if(!ps_svc_lyr_dec->ps_nal_svc_ext->u1_no_inter_layer_pred_flag &&
        (0 == ps_svc_lyr_dec->ps_nal_svc_ext->u1_quality_id))
     {
         ps_svc_slice_params->u4_ref_layer_dq_id = ih264d_uev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
         COPYTHECONTEXT("Slice Header SVC ext: u4_ref_layer_dq_id",
                        ps_svc_slice_params->u4_ref_layer_dq_id);
         if(ps_svc_slice_params->u4_ref_layer_dq_id > MAX_REF_DEP_ID)
         {
             return ERROR_INV_SLICE_HDR_T;
         }
+        /* Reference layer id update is taken care during resolution init */
+        /*
         ps_svc_lyr_dec->u1_ref_layer_id = ps_svc_slice_params->u4_ref_layer_dq_id >> 4;
         if(ps_svc_lyr_dec->u1_ref_layer_id >= ps_svc_lyr_dec->u1_layer_id)
         {
             return ERROR_INV_SLICE_HDR_T;
         }
+        */
         ps_svc_lyr_dec->ps_dec_svc_ref_layer =
             &ps_svcd_ctxt->ps_svc_dec_lyr[ps_svc_lyr_dec->u1_ref_layer_id];
 
         if(ps_sps_svc_ext->u1_inter_layer_deblocking_filter_control_present_flag)
         {
             ps_svc_slice_params->u4_disable_inter_layer_deblk_filter_idc =
                 ih264d_uev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
             COPYTHECONTEXT("Slice Header SVC ext: u4_disable_inter_layer_deblk_filter_idc",
                            ps_svc_slice_params->u4_disable_inter_layer_deblk_filter_idc);
 
             if(ps_svc_slice_params->u4_disable_inter_layer_deblk_filter_idc > 6)
             {
                 return ERROR_INV_SLICE_HDR_T;
             }
 
             if(1 != ps_svc_slice_params->u4_disable_inter_layer_deblk_filter_idc)
             {
                 ps_svc_slice_params->i4_inter_layer_slice_alpha_c0_offset_div2 =
                     ih264d_sev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
                 COPYTHECONTEXT("Slice Header SVC ext: i4_inter_layer_slice_alpha_c0_offset_div2",
                                ps_svc_slice_params->i4_inter_layer_slice_alpha_c0_offset_div2);
 
                 if(ps_svc_slice_params->i4_inter_layer_slice_alpha_c0_offset_div2 > 6 ||
                    ps_svc_slice_params->i4_inter_layer_slice_alpha_c0_offset_div2 < -6)
                 {
                     return ERROR_INV_SLICE_HDR_T;
                 }
 
                 ps_svc_slice_params->i4_inter_layer_slice_beta_offset_div2 =
                     ih264d_sev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
                 COPYTHECONTEXT("Slice Header SVC ext: i4_inter_layer_slice_beta_offset_div2",
                                ps_svc_slice_params->i4_inter_layer_slice_beta_offset_div2);
 
                 if(ps_svc_slice_params->i4_inter_layer_slice_beta_offset_div2 > 6 ||
                    ps_svc_slice_params->i4_inter_layer_slice_beta_offset_div2 < -6)
                 {
                     return ERROR_INV_SLICE_HDR_T;
                 }
             }
         }
 
         ps_svc_slice_params->u1_constrained_intra_resampling_flag = ih264d_get_bit_h264(ps_bitstrm);
         COPYTHECONTEXT("Slice Header SVC ext: u1_constrained_intra_resampling_flag",
                        ps_svc_slice_params->u1_constrained_intra_resampling_flag);
         if(2 == ps_sps_svc_ext->u1_extended_spatial_scalability_idc)
         {
             /* ChromaArrayType = i4_chroma_format_idc  if  separate_colour_plane_flag
              * = 0 for all chroma format except 4:4:4 */
             if(ps_dec->ps_cur_sps->i4_chroma_format_idc >= 0)
             {
                 ps_svc_slice_params->u1_ref_layer_chroma_phase_x_plus1_flag =
                     ih264d_get_bit_h264(ps_bitstrm);
                 COPYTHECONTEXT("Slice Header SVC ext: u1_ref_layer_chroma_phase_x_plus1_flag",
                                ps_svc_slice_params->u1_ref_layer_chroma_phase_x_plus1_flag);
 
                 ps_svc_slice_params->u1_ref_layer_chroma_phase_y_plus1 =
                     ih264d_get_bits_h264(ps_bitstrm, 2);
                 COPYTHECONTEXT("Slice Header SVC ext: u1_ref_layer_chroma_phase_y_plus1",
                                ps_svc_slice_params->u1_ref_layer_chroma_phase_y_plus1);
 
                 if(ps_svc_slice_params->u1_ref_layer_chroma_phase_y_plus1 > 2)
                 {
                     return ERROR_INV_SLICE_HDR_T;
                 }
             }
             else
             {
                 if(0 == ps_svc_lyr_dec->ps_nal_svc_ext->u1_quality_id)
                 {
                     ps_svc_slice_params->u1_ref_layer_chroma_phase_y_plus1 =
                         ps_sps_svc_ext->u1_seq_ref_layer_chroma_phase_y_plus1;
                 }
             }
 
             ps_svc_slice_params->i4_scaled_ref_layer_left_offset =
                 ih264d_sev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
             COPYTHECONTEXT("Slice Header SVC ext: i4_scaled_ref_layer_left_offset",
                            ps_svc_slice_params->i4_scaled_ref_layer_left_offset);
 
             if(ps_svc_slice_params->i4_scaled_ref_layer_left_offset != 0)
             {
                 return ERROR_INV_SLICE_HDR_T;
             }
 
             if(ps_svc_slice_params->i4_scaled_ref_layer_left_offset >= MAX_SCLD_REF_LAYER_OFFSET ||
                ps_svc_slice_params->i4_scaled_ref_layer_left_offset < MIN_SCLD_REF_LAYER_OFFSET)
             {
                 return ERROR_INV_SLICE_HDR_T;
             }
 
             ps_svc_slice_params->i4_scaled_ref_layer_top_offset =
                 ih264d_sev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
             COPYTHECONTEXT("Slice Header SVC ext: i4_scaled_ref_layer_top_offset",
                            ps_svc_slice_params->i4_scaled_ref_layer_top_offset);
 
             if(ps_svc_slice_params->i4_scaled_ref_layer_top_offset != 0)
             {
                 return ERROR_INV_SLICE_HDR_T;
             }
 
             if(ps_svc_slice_params->i4_scaled_ref_layer_top_offset >= MAX_SCLD_REF_LAYER_OFFSET ||
                ps_svc_slice_params->i4_scaled_ref_layer_top_offset < MIN_SCLD_REF_LAYER_OFFSET)
             {
                 return ERROR_INV_SLICE_HDR_T;
             }
 
             ps_svc_slice_params->i4_scaled_ref_layer_right_offset =
                 ih264d_sev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
             COPYTHECONTEXT("Slice Header SVC ext: i4_scaled_ref_layer_right_offset",
                            ps_svc_slice_params->i4_scaled_ref_layer_right_offset);
 
             if(ps_svc_slice_params->i4_scaled_ref_layer_right_offset >= MAX_SCLD_REF_LAYER_OFFSET ||
                ps_svc_slice_params->i4_scaled_ref_layer_right_offset < MIN_SCLD_REF_LAYER_OFFSET)
             {
                 return ERROR_INV_SLICE_HDR_T;
             }
 
             ps_svc_slice_params->i4_scaled_ref_layer_bottom_offset =
                 ih264d_sev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
             COPYTHECONTEXT("Slice Header SVC ext: i4_scaled_ref_layer_bottom_offset",
                            ps_svc_slice_params->i4_scaled_ref_layer_bottom_offset);
 
             if(ps_svc_slice_params->i4_scaled_ref_layer_bottom_offset >=
                    MAX_SCLD_REF_LAYER_OFFSET ||
                ps_svc_slice_params->i4_scaled_ref_layer_bottom_offset < MIN_SCLD_REF_LAYER_OFFSET)
             {
                 return ERROR_INV_SLICE_HDR_T;
             }
         }
         else
         {
             ps_svc_slice_params->i4_scaled_ref_layer_left_offset =
                 ps_sps_svc_ext->i4_seq_scaled_ref_layer_left_offset;
             ps_svc_slice_params->i4_scaled_ref_layer_top_offset =
                 ps_sps_svc_ext->i4_seq_scaled_ref_layer_top_offset;
             ps_svc_slice_params->i4_scaled_ref_layer_right_offset =
                 ps_sps_svc_ext->i4_seq_scaled_ref_layer_right_offset;
             ps_svc_slice_params->i4_scaled_ref_layer_bottom_offset =
                 ps_sps_svc_ext->i4_seq_scaled_ref_layer_bottom_offset;
         }
     }
 
     if(!ps_svc_lyr_dec->ps_nal_svc_ext->u1_no_inter_layer_pred_flag)
     {
         ps_svc_slice_params->u1_slice_skip_flag = ih264d_get_bit_h264(ps_bitstrm);
         COPYTHECONTEXT("Slice Header SVC ext: u1_slice_skip_flag",
                        ps_svc_slice_params->u1_slice_skip_flag);
 
         if(ps_svc_slice_params->u1_slice_skip_flag)
         {
             ps_svc_slice_params->u4_num_mbs_in_slice_minus1 =
                 ih264d_uev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
             COPYTHECONTEXT("Slice Header SVC ext: u4_num_mbs_in_slice_minus1",
                            ps_svc_slice_params->u4_num_mbs_in_slice_minus1);
         }
         else
         {
             ps_svc_slice_params->u1_adaptive_base_mode_flag = ih264d_get_bit_h264(ps_bitstrm);
             COPYTHECONTEXT("Slice Header SVC ext: u1_adaptive_base_mode_flag",
                            ps_svc_slice_params->u1_adaptive_base_mode_flag);
 
             if(!ps_svc_slice_params->u1_adaptive_base_mode_flag)
             {
                 ps_svc_slice_params->u1_default_base_mode_flag = ih264d_get_bit_h264(ps_bitstrm);
                 COPYTHECONTEXT("Slice Header SVC ext: u1_default_base_mode_flag",
                                ps_svc_slice_params->u1_default_base_mode_flag);
             }
             if(!ps_svc_slice_params->u1_default_base_mode_flag)
             {
                 ps_svc_slice_params->u1_adaptive_motion_prediction_flag =
                     ih264d_get_bit_h264(ps_bitstrm);
                 COPYTHECONTEXT("Slice Header SVC ext: u1_adaptive_motion_prediction_flag",
                                ps_svc_slice_params->u1_adaptive_motion_prediction_flag);
 
                 if(!ps_svc_slice_params->u1_adaptive_motion_prediction_flag)
                 {
                     ps_svc_slice_params->u1_default_motion_prediction_flag =
                         ih264d_get_bit_h264(ps_bitstrm);
                     COPYTHECONTEXT("Slice Header SVC ext: u1_default_motion_prediction_flag",
                                    ps_svc_slice_params->u1_default_motion_prediction_flag);
                 }
             }
             ps_svc_slice_params->u1_adaptive_residual_prediction_flag =
                 ih264d_get_bit_h264(ps_bitstrm);
             COPYTHECONTEXT("Slice Header SVC ext: u1_adaptive_residual_prediction_flag",
                            ps_svc_slice_params->u1_adaptive_residual_prediction_flag);
 
             if(!ps_svc_slice_params->u1_adaptive_residual_prediction_flag)
             {
                 ps_svc_slice_params->u1_default_residual_prediction_flag =
                     ih264d_get_bit_h264(ps_bitstrm);
                 COPYTHECONTEXT("Slice Header SVC ext: u1_default_residual_prediction_flag",
                                ps_svc_slice_params->u1_default_residual_prediction_flag);
             }
         }
 
         if(ps_sps_svc_ext->u1_adaptive_tcoeff_level_prediction_flag)
         {
             ps_svc_slice_params->u1_tcoeff_level_prediction_flag = ih264d_get_bit_h264(ps_bitstrm);
             COPYTHECONTEXT("Slice Header SVC ext: u1_tcoeff_level_prediction_flag",
                            ps_svc_slice_params->u1_tcoeff_level_prediction_flag);
 
             if(ps_svc_slice_params->u1_tcoeff_level_prediction_flag != 0)
             {
                 return ERROR_INV_SPS_PPS_T;
             }
         }
     }
 
     if(!ps_sps_svc_ext->u1_slice_header_restriction_flag &&
        !ps_svc_slice_params->u1_slice_skip_flag)
     {
         ps_svc_slice_params->u1_scan_idx_start = ih264d_get_bits_h264(ps_bitstrm, 4);
         COPYTHECONTEXT("Slice Header SVC ext: u1_scan_idx_start",
                        ps_svc_slice_params->u1_scan_idx_start);
         ps_svc_slice_params->u1_scan_idx_end = ih264d_get_bits_h264(ps_bitstrm, 4);
         COPYTHECONTEXT("Slice Header SVC ext: u1_scan_idx_end",
                        ps_svc_slice_params->u1_scan_idx_end);
 
         if(0 != ps_svc_slice_params->u1_scan_idx_start &&
            15 != ps_svc_slice_params->u1_scan_idx_end)
             return ERROR_SVC_INV_SCAN_IDX;
     }
     return OK;
 }
 
 /*!
 **************************************************************************
 * \if Function name : DecodeSlice \endif
 *
 * \brief
 *    Parses a slice
 *
 * \return
 *    0 on Success and Error code otherwise
 **************************************************************************
 */
