commit 8e96410e1b8360b6544b74836f3d6971e8ab2fc1
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Tue Nov 30 20:03:22 2021 +0100

    avcodec/speexdec: Avoid violating the vector_fmul_scalar() API
    
    Fixes: out of array access
    Fixes: 40054/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_SPEEX_fuzzer-6713285764841472
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/speexdec.c b/libavcodec/speexdec.c
index e263d4c48c..1c33607db2 100644
--- a/libavcodec/speexdec.c
+++ b/libavcodec/speexdec.c
@@ -1533,35 +1533,36 @@ static void speex_decode_stereo(float *data, int frame_size, StereoState *stereo
 static int speex_decode_frame(AVCodecContext *avctx, void *data,
                               int *got_frame_ptr, AVPacket *avpkt)
 {
     SpeexContext *s = avctx->priv_data;
     AVFrame *frame = data;
     const float scale = 1.f / 32768.f;
     int buf_size = avpkt->size;
     float *dst;
     int ret;
 
     if (s->pkt_size && avpkt->size == 62)
         buf_size = s->pkt_size;
     if ((ret = init_get_bits8(&s->gb, avpkt->data, buf_size)) < 0)
         return ret;
 
-    frame->nb_samples = s->frame_size * s->frames_per_packet;
+    frame->nb_samples = FFALIGN(s->frame_size * s->frames_per_packet, 4);
     if ((ret = ff_get_buffer(avctx, frame, 0)) < 0)
         return ret;
 
     dst = (float *)frame->extended_data[0];
     for (int i = 0; i < s->frames_per_packet; i++) {
         ret = speex_modes[s->mode].decode(avctx, &s->st[s->mode], &s->gb, dst + i * s->frame_size);
         if (ret < 0)
             return ret;
         if (avctx->channels == 2)
             speex_decode_stereo(dst + i * s->frame_size, s->frame_size, &s->stereo);
     }
 
     dst = (float *)frame->extended_data[0];
     s->fdsp->vector_fmul_scalar(dst, dst, scale, frame->nb_samples * frame->channels);
+    frame->nb_samples = s->frame_size * s->frames_per_packet;
 
     *got_frame_ptr = 1;
 
     return buf_size;
 }
