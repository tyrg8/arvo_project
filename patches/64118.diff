commit 774894c13e511318215a888eb483d76282a18ed1
Author: Reini Urban <rurban@cpan.org>
Date:   Mon Nov 13 12:27:47 2023 +0100

    decode_r11: fix dat->byte wraparound heap-buffer-overflow
    
    Fixes ossfuzz 64118

diff --git a/src/bits.c b/src/bits.c
index 38bae231..a5dad6e9 100644
--- a/src/bits.c
+++ b/src/bits.c
@@ -62,28 +62,28 @@ void
 bit_advance_position (Bit_Chain *dat, long advance)
 {
   const size_t pos = bit_position (dat);
   const size_t endpos = dat->size * 8;
   long bits = (long)dat->bit + advance;
-  if (pos + advance > endpos)
+  if (dat->byte >= MAX_MEM_ALLOC || pos + advance > endpos)
     {
       loglevel = dat->opts & DWG_OPTS_LOGLEVEL;
       LOG_ERROR ("%s buffer overflow at pos %" PRIuSIZE ".%u, size %" PRIuSIZE
                  ", advance by %ld",
                  __FUNCTION__, dat->byte, dat->bit, dat->size, advance);
     }
   else if ((long)pos + advance < 0)
     {
       loglevel = dat->opts & DWG_OPTS_LOGLEVEL;
       LOG_ERROR ("buffer underflow at pos %" PRIuSIZE ".%u, size %" PRIuSIZE
                  ", advance by %ld",
                  dat->byte, dat->bit, dat->size, advance)
       dat->byte = 0;
       dat->bit = 0;
       return;
     }
   dat->byte += (bits >> 3);
   dat->bit = bits & 7;
 }
 
 /* Absolute get in bits
  */
@@ -113,46 +113,49 @@ void
 bit_reset_chain (Bit_Chain *dat)
 {
   size_t pos = dat->byte;
   dat->byte = 0;
   if (pos < dat->size) // not already overflowed
     dat->chain += pos;
   if (dat->size > 0)
     dat->size -= pos;
 }
 
 #ifdef DWG_ABORT
 #  define CHK_OVERFLOW(func, retval)                                          \
-    if (dat->bit ? ((dat->byte * 8) + dat->bit >= dat->size * 8)              \
-                 : (dat->byte >= dat->size))                                  \
+    if (dat->byte >= MAX_MEM_ALLOC                                            \
+        || (dat->bit ? ((dat->byte * 8) + dat->bit >= dat->size * 8)          \
+                     : (dat->byte >= dat->size)))                             \
       {                                                                       \
         loglevel = dat->opts & DWG_OPTS_LOGLEVEL;                             \
         LOG_ERROR ("%s buffer overflow at %" PRIuSIZE ".%u >= %" PRIuSIZE,    \
                    func, dat->byte, dat->bit, dat->size)                      \
         if (++errors > DWG_ABORT_LIMIT)                                       \
           abort ();                                                           \
         return retval;                                                        \
       }
 #else
 #  define CHK_OVERFLOW(func, retval)                                          \
-    if (dat->bit ? ((dat->byte * 8) + dat->bit >= dat->size * 8)              \
-                 : (dat->byte >= dat->size))                                  \
+    if (dat->byte >= MAX_MEM_ALLOC                                            \
+        || (dat->bit ? ((dat->byte * 8) + dat->bit >= dat->size * 8)          \
+                     : (dat->byte >= dat->size)))                             \
       {                                                                       \
         loglevel = dat->opts & DWG_OPTS_LOGLEVEL;                             \
         LOG_ERROR ("%s buffer overflow at %" PRIuSIZE ".%u >= %" PRIuSIZE,    \
                    func, dat->byte, dat->bit, dat->size)                      \
         return retval;                                                        \
       }
 #endif
 
 #define CHK_OVERFLOW_PLUS(plus, func, retval)                                 \
-  if (dat->bit ? (((dat->byte + plus) * 8) + dat->bit > dat->size * 8)        \
-               : (dat->byte + plus > dat->size))                              \
+  if (dat->byte >= MAX_MEM_ALLOC                                              \
+      || (dat->bit ? (((dat->byte + plus) * 8) + dat->bit > dat->size * 8)    \
+                   : (dat->byte + plus > dat->size)))                         \
     {                                                                         \
       loglevel = dat->opts & DWG_OPTS_LOGLEVEL;                               \
       LOG_ERROR ("%s buffer overflow at %" PRIuSIZE ".%u + %d > %" PRIuSIZE,  \
                  func, dat->byte, dat->bit, (int)(plus), dat->size)           \
       return retval;                                                          \
     }
 
 /** Read 1 bit.
  */
@@ -1578,32 +1581,33 @@ int
 bit_read_fixed (Bit_Chain *restrict dat, BITCODE_RC *restrict dest,
                 size_t length)
 {
-  if (dat->bit ? (((dat->byte + length) * 8) + dat->bit > dat->size * 8)
-               : (dat->byte + length > dat->size))
+  if (dat->byte >= MAX_MEM_ALLOC ||
+      (dat->bit ? (((dat->byte + length) * 8) + dat->bit > dat->size * 8)
+       : (dat->byte + length > dat->size)))
     {
       loglevel = dat->opts & DWG_OPTS_LOGLEVEL;
-      LOG_ERROR ("%s buffer overflow at pos %" PRIuSIZE ", size %" PRIuSIZE,
-                 __FUNCTION__, dat->byte, dat->size)
+      LOG_ERROR ("%s buffer overflow at pos %" PRIuSIZE " > size %" PRIuSIZE,
+                 __FUNCTION__, dat->byte + length, dat->size)
       memset (dest, 0, length);
       return 1;
     }
   if (dat->bit == 0)
     {
       assert (dat->byte + length <= dat->size);
       memcpy (dest, &dat->chain[dat->byte], length);
       dat->byte += length;
     }
   else
     {
       for (size_t i = 0; i < length; i++)
         {
           dest[i] = bit_read_RC (dat);
         }
     }
   return 0;
 }
 
 /** Read fixed text with zero-termination.
  *  After usage, the allocated memory must be properly freed.
  *  preR11
  */
diff --git a/src/decode.c b/src/decode.c
index 19f442c8..5be10251 100644
--- a/src/decode.c
+++ b/src/decode.c
@@ -6274,38 +6274,45 @@ int
 decode_preR13_sentinel (const Dwg_Sentinel sentinel,
                         const char *restrict sentinel_name,
                         Bit_Chain *restrict dat, Dwg_Data *restrict dwg)
 {
   int error = 0;
   const unsigned char *const wanted = dwg_sentinel (sentinel);
-  BITCODE_TF r11_sentinel = bit_read_TF (dat, 16);
+  BITCODE_TF r11_sentinel;
 
+  if (dat->byte + 16 > dat->size)
+    {
+      LOG_ERROR ("%s buffer overflow at pos %" PRIuSIZE " > size %" PRIuSIZE,
+                 __FUNCTION__, dat->byte + 16, dat->size)
+      return DWG_ERR_INVALIDDWG;
+    }
+  r11_sentinel = bit_read_TF (dat, 16U);
   if (!r11_sentinel)
     return DWG_ERR_INVALIDDWG;
   LOG_TRACE ("%s: ", sentinel_name);
   LOG_RPOS
   LOG_TRACE_TF (r11_sentinel, 16)
   if (memcmp (r11_sentinel, wanted, 16))
     {
       size_t pos = MAX (dat->byte, 200) - 200;
       size_t len = MIN (dat->size - dat->byte, 400);
       // search +- 1000 bytes around
       char *found = (char *)memmem (&dat->chain[pos], len, wanted, 16);
       if (!found)
         {
           LOG_ERROR ("%s not found at %" PRIuSIZE, sentinel_name,
                      dat->byte - 16);
           error = DWG_ERR_SECTIONNOTFOUND;
         }
       else
         {
           pos = (ptrdiff_t)found - (ptrdiff_t)&dat->chain[0];
           LOG_WARN ("%s not found at %" PRIuSIZE ", but at %" PRIuSIZE,
                     sentinel_name, dat->byte - 16, pos);
           dat->byte = pos + 16;
           error = DWG_ERR_WRONGCRC;
         }
     }
   free (r11_sentinel);
 
   return error;
 }
