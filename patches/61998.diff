commit 62c8372f6b2506bf96f962f09497f88491d0d96e
Author: Akshay Ragir <akshay.ragir@ittiam.com>
Date:   Fri Sep 8 16:16:18 2023 +0530

    Fix for the Global-buffer-overflow READ 4 in iusace_estimate_scfs_chan
    
    These changes handle the runtime error reported when the
    value of scalefactor band form factor becomes zero. This
    is resolved by adding bound checks for the gain value.
    The issue is reported with USAC and the changes are
    extended to AAC.
    
    Bug: ossFuzz:61998
    Test: poc in bug

diff --git a/encoder/iusace_fd_qc_adjthr.h b/encoder/iusace_fd_qc_adjthr.h
index dd90b72..b7310dc 100644
--- a/encoder/iusace_fd_qc_adjthr.h
+++ b/encoder/iusace_fd_qc_adjthr.h
@@ -46,6 +46,11 @@
 #define BITS_SPEND_RATIO_LONG (MIN_TO_MAX_SPEND_BITS_LONG / CLIP_SPEND_LO_TO_HI_LONG)
 #define BITS_SPEND_RATIO_SHORT (MIN_TO_MAX_SPEND_BITS_SHORT / CLIP_SPEND_LO_TO_HI_SHORT)
 
+#define MAX_GAIN_INDEX (128)
+#define MIN_GAIN_INDEX (-128)
+#define SCF_COUNT_LIMIT_ONE (1)
+#define SCF_COUNT_LIMIT_THREE (3)
+
 typedef struct {
   FLOAT32 *sfb_ld_energy;
   FLOAT32 *sfb_lines;
diff --git a/encoder/ixheaace_fd_qc_adjthr.c b/encoder/ixheaace_fd_qc_adjthr.c
index 320c32a..d66a765 100644
--- a/encoder/ixheaace_fd_qc_adjthr.c
+++ b/encoder/ixheaace_fd_qc_adjthr.c
@@ -1158,82 +1158,83 @@ FLOAT32 iusace_calc_sfb_dist(const FLOAT32 *ptr_spec, const FLOAT32 *ptr_exp_spe
 static WORD16 iusace_improve_scf(FLOAT32 *ptr_spec, FLOAT32 *ptr_exp_spec, WORD16 *ptr_quant_spec,
                                  WORD16 *ptr_quant_spec_temp, WORD32 sfb_width, FLOAT32 threshold,
                                  WORD16 scf, WORD16 min_scf, FLOAT32 *dist,
                                  WORD16 *ptr_min_calc_scf) {
   FLOAT32 sfb_dist;
   WORD16 best_scf = scf;
   WORD32 j;
 
   sfb_dist = iusace_calc_sfb_dist(ptr_spec, ptr_exp_spec, ptr_quant_spec, sfb_width, scf);
 
   *ptr_min_calc_scf = scf;
 
   if (sfb_dist > (1.25 * threshold)) {
     WORD16 estimated_scf = scf;
     FLOAT32 best_sfb_dist = sfb_dist;
     WORD32 count;
 
     count = 0;
 
-    while ((sfb_dist > (1.25 * threshold)) && (count++ < 3)) {
+    while ((sfb_dist > (1.25 * threshold)) && (count++ < SCF_COUNT_LIMIT_THREE)) {
       scf++;
 
       sfb_dist =
           iusace_calc_sfb_dist(ptr_spec, ptr_exp_spec, ptr_quant_spec_temp, sfb_width, scf);
 
       if (sfb_dist < best_sfb_dist) {
         best_scf = scf;
         best_sfb_dist = sfb_dist;
 
         memcpy(ptr_quant_spec, ptr_quant_spec_temp, sfb_width * sizeof(WORD16));
       }
     }
 
     count = 0;
     scf = estimated_scf;
     sfb_dist = best_sfb_dist;
 
-    while ((sfb_dist > (1.25 * threshold)) && (count++ < 1) && (scf > min_scf)) {
+    while ((sfb_dist > (1.25 * threshold)) && (count++ < SCF_COUNT_LIMIT_ONE) &&
+      (scf > min_scf)) {
       scf--;
 
       sfb_dist =
           iusace_calc_sfb_dist(ptr_spec, ptr_exp_spec, ptr_quant_spec_temp, sfb_width, scf);
 
       if (sfb_dist < best_sfb_dist) {
         best_scf = scf;
         best_sfb_dist = sfb_dist;
 
         memcpy(ptr_quant_spec, ptr_quant_spec_temp, sfb_width * sizeof(WORD16));
       }
       *ptr_min_calc_scf = scf;
     }
     *dist = best_sfb_dist;
   } else {
     FLOAT32 best_sfb_dist = sfb_dist;
     FLOAT32 allowed_sfb_dist = MIN(sfb_dist * 1.25f, threshold);
     WORD32 count;
 
-    for (count = 0; count < 3; count++) {
+    for (count = 0; count < SCF_COUNT_LIMIT_THREE; count++) {
       scf++;
 
       sfb_dist =
           iusace_calc_sfb_dist(ptr_spec, ptr_exp_spec, ptr_quant_spec_temp, sfb_width, scf);
 
       if (sfb_dist < allowed_sfb_dist) {
         *ptr_min_calc_scf = best_scf + 1;
 
         best_scf = scf;
         best_sfb_dist = sfb_dist;
         memcpy(ptr_quant_spec, ptr_quant_spec_temp, sfb_width * sizeof(WORD16));
       }
     }
     *dist = best_sfb_dist;
   }
 
   for (j = 0; j < sfb_width; j++) {
     if (ptr_spec[j] < 0) {
       ptr_quant_spec[j] = -ptr_quant_spec[j];
     }
   }
 
   return best_scf;
 }
@@ -1550,156 +1551,157 @@ static VOID iusace_assimilate_multiple_scf(ia_psy_mod_out_data_struct *pstr_psy_
 VOID iusace_estimate_scfs_chan(ia_psy_mod_out_data_struct *pstr_psy_out,
                                ia_qc_out_chan_struct *str_qc_out_chan, WORD32 num_channels,
                                WORD32 chn, iusace_scratch_mem *pstr_scratch) {
   WORD16 *ptr_scalefactor;
   WORD32 *global_gain;
   FLOAT32 *p_sfb_form_factor;
   FLOAT32 *p_sfb_num_relevant_lines;
   WORD16 *ptr_quant_spec;
   WORD32 i, ch, j, idx = 0;
   FLOAT32 thresh, energy, energy_part, thr_part;
   FLOAT32 scf_float;
   WORD16 scf_int = 0, min_scf = 0, max_scf = 0;
   FLOAT64 max_spec = 0.0f;
   WORD16 min_sf_max_quant[MAX_NUM_GROUPED_SFB] = {0};
   pUWORD8 ptr_scratch = pstr_scratch->ptr_fd_scratch;
   FLOAT32 *ptr_sfb_dist = (FLOAT32 *)ptr_scratch;
   ptr_scratch += MAX_NUM_GROUPED_SFB * sizeof(ptr_sfb_dist[0]);
   WORD16 min_calc_scf[MAX_NUM_GROUPED_SFB] = {0};
 
   WORD16 *ptr_quant_spec_temp = pstr_scratch->p_adjthr_quant_spec_temp;
   FLOAT32 *ptr_exp_spec = pstr_scratch->p_adjthr_ptr_exp_spec;
   FLOAT32 *ptr_mdct_spec_float = pstr_scratch->p_adjthr_mdct_spec_float;
   FLOAT32 *sfb_const_pe_part = (FLOAT32 *)ptr_scratch;
 
   FLOAT32 **ptr_sfb_form_factor = &pstr_scratch->ptr_sfb_form_fac[0];
   FLOAT32 **ptr_sfb_num_relevant_lines = &pstr_scratch->ptr_sfb_num_relevant_lines[0];
 
   ptr_scratch += MAX_NUM_GROUPED_SFB * sizeof(sfb_const_pe_part[0]);
 
   memset(ptr_quant_spec_temp, 0, FRAME_LEN_LONG * sizeof(WORD16));
   memset(ptr_mdct_spec_float, 0, FRAME_LEN_LONG * sizeof(FLOAT32));
   memset(ptr_exp_spec, 0, FRAME_LEN_LONG * sizeof(FLOAT32));
   memset(ptr_sfb_dist, 0, MAX_NUM_GROUPED_SFB * sizeof(FLOAT32));
   for (ch = chn; ch < chn + num_channels; ch++) {
     ia_psy_mod_out_data_struct *ptr_psy_out = &pstr_psy_out[ch];
     str_qc_out_chan[idx].global_gain = 0;
 
     memset(str_qc_out_chan[idx].scalefactor, 0,
            sizeof(str_qc_out_chan[idx].scalefactor[0]) * pstr_psy_out[ch].sfb_count);
     memset(str_qc_out_chan[idx].quant_spec, 0,
            sizeof(str_qc_out_chan[idx].quant_spec[0]) * FRAME_LEN_LONG);
 
     ptr_scalefactor = str_qc_out_chan[idx].scalefactor;
     global_gain = &str_qc_out_chan[idx].global_gain;
     p_sfb_form_factor = &ptr_sfb_form_factor[idx][0];
     p_sfb_num_relevant_lines = &ptr_sfb_num_relevant_lines[idx][0];
     ptr_quant_spec = str_qc_out_chan[idx].quant_spec;
     for (i = 0; i < ptr_psy_out->sfb_count; i++) {
       thresh = ptr_psy_out->ptr_sfb_thr[i];
       energy = ptr_psy_out->ptr_sfb_energy[i];
       max_spec = 0.0;
 
       for (j = ptr_psy_out->sfb_offsets[i]; j < ptr_psy_out->sfb_offsets[i + 1]; j++) {
         max_spec = MAX(max_spec, fabs(ptr_psy_out->ptr_spec_coeffs[j]));
       }
 
       ptr_scalefactor[i] = MIN_SHRT_VAL;
       min_sf_max_quant[i] = MIN_SHRT_VAL;
 
       if ((max_spec > 0.0) && (energy > thresh) && (p_sfb_form_factor[i] != MIN_FLT_VAL)) {
         energy_part = (FLOAT32)log10(p_sfb_form_factor[i] + FLT_EPSILON);
 
         thr_part = (FLOAT32)log10(6.75 * thresh + MIN_FLT_VAL);
         scf_float = 8.8585f * (thr_part - energy_part);
         scf_int = (WORD16)floor(scf_float);
         min_sf_max_quant[i] = (WORD16)ceil(C1_SF + C2_SF * log(max_spec));
         scf_int = MAX(scf_int, min_sf_max_quant[i]);
-
+        scf_int = MAX(scf_int, MIN_GAIN_INDEX);
+        scf_int = MIN(scf_int, (MAX_GAIN_INDEX - SCF_COUNT_LIMIT_THREE));
         for (j = 0; j < ptr_psy_out->sfb_offsets[i + 1] - ptr_psy_out->sfb_offsets[i]; j++) {
           ptr_exp_spec[ptr_psy_out->sfb_offsets[i] + j] =
               (FLOAT32)(ptr_psy_out->ptr_spec_coeffs[ptr_psy_out->sfb_offsets[i] + j]);
           ptr_mdct_spec_float[ptr_psy_out->sfb_offsets[i] + j] =
               (FLOAT32)(ptr_psy_out->ptr_spec_coeffs[ptr_psy_out->sfb_offsets[i] + j]);
         }
 
         iusace_calculate_exp_spec(ptr_psy_out->sfb_offsets[i + 1] - ptr_psy_out->sfb_offsets[i],
                                   ptr_exp_spec + ptr_psy_out->sfb_offsets[i],
                                   ptr_mdct_spec_float + ptr_psy_out->sfb_offsets[i]);
 
         scf_int = iusace_improve_scf(
             ptr_mdct_spec_float + ptr_psy_out->sfb_offsets[i],
             ptr_exp_spec + ptr_psy_out->sfb_offsets[i],
             ptr_quant_spec + ptr_psy_out->sfb_offsets[i],
             ptr_quant_spec_temp + ptr_psy_out->sfb_offsets[i],
             ptr_psy_out->sfb_offsets[i + 1] - ptr_psy_out->sfb_offsets[i], thresh, scf_int,
             min_sf_max_quant[i], &ptr_sfb_dist[i], &min_calc_scf[i]);
 
         ptr_scalefactor[i] = scf_int;
       }
     }
 
     for (i = 0; i < ptr_psy_out->sfb_count; i++) {
       sfb_const_pe_part[i] = MIN_FLT_VAL;
     }
 
     iusace_assimilate_single_scf(ptr_psy_out, ptr_exp_spec, ptr_quant_spec, ptr_quant_spec_temp,
                                  ptr_scalefactor, min_sf_max_quant, ptr_sfb_dist,
                                  sfb_const_pe_part, p_sfb_form_factor, p_sfb_num_relevant_lines,
                                  min_calc_scf, ptr_mdct_spec_float);
 
     iusace_assimilate_multiple_scf(ptr_psy_out, ptr_exp_spec, ptr_quant_spec, ptr_quant_spec_temp,
                                    ptr_scalefactor, min_sf_max_quant, ptr_sfb_dist,
                                    sfb_const_pe_part, p_sfb_form_factor, p_sfb_num_relevant_lines,
                                    ptr_mdct_spec_float, ptr_scratch);
 
     max_scf = MIN_SHRT_VAL;
     min_scf = MAX_SHRT_VAL;
     for (i = 0; i < ptr_psy_out->sfb_count; i++) {
       if (max_scf < ptr_scalefactor[i]) {
         max_scf = ptr_scalefactor[i];
       }
       if ((ptr_scalefactor[i] != MIN_SHRT_VAL) && (min_scf > ptr_scalefactor[i])) {
         min_scf = ptr_scalefactor[i];
       }
     }
 
     for (i = 0; i < pstr_psy_out[ch].sfb_count; i++) {
       if ((ptr_scalefactor[i] != MIN_SHRT_VAL) &&
           (min_scf + MAX_SCF_DELTA) < ptr_scalefactor[i]) {
         ptr_scalefactor[i] = min_scf + MAX_SCF_DELTA;
 
         iusace_calc_sfb_dist(ptr_mdct_spec_float + ptr_psy_out->sfb_offsets[i],
                              ptr_exp_spec + ptr_psy_out->sfb_offsets[i],
                              ptr_quant_spec + ptr_psy_out->sfb_offsets[i],
                              ptr_psy_out->sfb_offsets[i + 1] - ptr_psy_out->sfb_offsets[i],
                              ptr_scalefactor[i]);
       }
     }
 
     max_scf = MIN((min_scf + MAX_SCF_DELTA), max_scf);
 
     if (max_scf > MIN_SHRT_VAL) {
       *global_gain = max_scf;
       for (i = 0; i < ptr_psy_out->sfb_count; i++) {
         if (ptr_scalefactor[i] == MIN_SHRT_VAL) {
           ptr_scalefactor[i] = 0;
           memset(
               &ptr_psy_out->ptr_spec_coeffs[ptr_psy_out->sfb_offsets[i]], 0,
               (ptr_psy_out->sfb_offsets[i + 1] - ptr_psy_out->sfb_offsets[i]) * sizeof(FLOAT64));
         } else {
           ptr_scalefactor[i] = max_scf - ptr_scalefactor[i];
         }
       }
     } else {
       *global_gain = 0;
       for (i = 0; i < ptr_psy_out->sfb_count; i++) {
         ptr_scalefactor[i] = 0;
         memset(&ptr_psy_out->ptr_spec_coeffs[ptr_psy_out->sfb_offsets[i]], 0,
                (ptr_psy_out->sfb_offsets[i + 1] - ptr_psy_out->sfb_offsets[i]) * sizeof(FLOAT64));
       }
     }
     idx++;
   }
 
   return;
 }
diff --git a/encoder/ixheaace_qc_data.h b/encoder/ixheaace_qc_data.h
index 02979c4..4f099a3 100644
--- a/encoder/ixheaace_qc_data.h
+++ b/encoder/ixheaace_qc_data.h
@@ -83,6 +83,10 @@ typedef struct {
 
 #define TRANSPORT_BITS (208)
 
+#define MAX_GAIN_INDEX_AAC (128)
+#define MIN_GAIN_INDEX_AAC (-128)
+#define SCF_COUNT_LIMIT_AAC (1)
+
 typedef struct {
   WORD16 *quant_spec;
   UWORD16 *max_val_in_sfb;
diff --git a/encoder/ixheaace_sf_estimation.c b/encoder/ixheaace_sf_estimation.c
index 89435d5..cbd67d0 100644
--- a/encoder/ixheaace_sf_estimation.c
+++ b/encoder/ixheaace_sf_estimation.c
@@ -250,64 +250,64 @@ static FLOAT32 iaace_calc_sfb_dist(const FLOAT32 *ptr_spec, const FLOAT32 *ptr_e
 static WORD16 iaace_improve_scf(FLOAT32 *ptr_spec, FLOAT32 *ptr_exp_spec, WORD16 *ptr_quant_spec,
                                 WORD16 *ptr_quant_spec_temp, WORD32 sfb_width, FLOAT32 threshold,
                                 WORD16 scf, WORD16 min_scf, FLOAT32 *dist,
                                 WORD16 *ptr_min_calc_scf) {
   FLOAT32 sfb_dist;
   WORD16 best_scf = scf;
   WORD32 j;
 
   sfb_dist = iaace_calc_sfb_dist(ptr_spec, ptr_exp_spec, ptr_quant_spec, sfb_width, scf);
 
   *ptr_min_calc_scf = scf;
 
   if (sfb_dist > (1.25 * threshold)) {
     FLOAT32 best_sfb_dist = sfb_dist;
 
     if (scf > min_scf) {
       scf--;
 
       sfb_dist = iaace_calc_sfb_dist(ptr_spec, ptr_exp_spec, ptr_quant_spec_temp, sfb_width, scf);
 
       if (sfb_dist < best_sfb_dist) {
         best_scf = scf;
         best_sfb_dist = sfb_dist;
 
         for (j = 0; j < sfb_width; j++) {
           ptr_quant_spec[j] = ptr_quant_spec_temp[j];
         }
       }
 
       *ptr_min_calc_scf = scf;
     }
     *dist = best_sfb_dist;
   } else {
     FLOAT32 best_sfb_dist = sfb_dist;
     FLOAT32 allowed_sfb_dist = MIN(sfb_dist * 1.25f, threshold);
     WORD32 count;
 
-    for (count = 1; count >= 0; count--) {
+    for (count = SCF_COUNT_LIMIT_AAC; count >= 0; count--) {
       scf++;
 
       sfb_dist = iaace_calc_sfb_dist(ptr_spec, ptr_exp_spec, ptr_quant_spec_temp, sfb_width, scf);
 
       if (sfb_dist < allowed_sfb_dist) {
         *ptr_min_calc_scf = best_scf + 1;
 
         best_scf = scf;
         best_sfb_dist = sfb_dist;
 
         for (j = 0; j < sfb_width; j++) {
           ptr_quant_spec[j] = ptr_quant_spec_temp[j];
         }
       }
     }
     *dist = best_sfb_dist;
   }
 
   for (j = 0; j < sfb_width; j++) {
     if (ptr_spec[j] < 0) {
       ptr_quant_spec[j] = -ptr_quant_spec[j];
     }
   }
 
   return best_scf;
 }
@@ -623,159 +623,160 @@ static VOID iaace_assimilate_multiple_scf(ixheaace_psy_out_channel *pstr_psy_out
 VOID iaace_estimate_scfs_chan(
     ixheaace_psy_out_channel pstr_psy_out[IXHEAACE_MAX_CH_IN_BS_ELE],
     ixheaace_qc_out_channel pstr_qc_out_chan[IXHEAACE_MAX_CH_IN_BS_ELE],
     FLOAT32 sfb_form_factor_ch[IXHEAACE_MAX_CH_IN_BS_ELE][MAXIMUM_GROUPED_SCALE_FACTOR_BAND],
     FLOAT32 sfb_num_relevant_lines_ch[][MAXIMUM_GROUPED_SCALE_FACTOR_BAND], WORD32 num_channels,
     WORD32 chn, WORD32 frame_len_long) {
   WORD16 *ptr_scalefactor;
   WORD32 *global_gain;
   FLOAT32 *ptr_sfb_form_factor;
   FLOAT32 *ptr_sfb_num_relevant_lines_ch;
   WORD16 *ptr_quant_spec;
   WORD32 i, ch, j;
   FLOAT32 thresh, energy, energy_part, thr_part;
   FLOAT32 scf_float;
   WORD16 scf_int = 0, min_scf = 0, max_scf = 0;
   FLOAT32 max_spec = 0.0f;
   WORD16 min_sf_max_quant[MAXIMUM_GROUPED_SCALE_FACTOR_BAND] = {0};
   FLOAT32 sfb_dist[MAXIMUM_GROUPED_SCALE_FACTOR_BAND] = {0};
   WORD16 min_calc_scf[MAXIMUM_GROUPED_SCALE_FACTOR_BAND] = {0};
   WORD16 quant_spec_temp[FRAME_LEN_1024];
   FLOAT32 ptr_exp_spec[FRAME_LEN_1024];
   FLOAT32 ptr_mdct_spec[FRAME_LEN_1024];
 
   memset(quant_spec_temp, 0, frame_len_long * sizeof(quant_spec_temp[0]));
   memset(ptr_mdct_spec, 0, frame_len_long * sizeof(ptr_mdct_spec[0]));
   memset(ptr_exp_spec, 0, frame_len_long * sizeof(ptr_exp_spec[0]));
 
   for (ch = chn; ch < chn + num_channels; ch++) {
     ixheaace_psy_out_channel *pstr_psy_out_chan = &pstr_psy_out[ch];
     pstr_qc_out_chan[ch].global_gain = 0;
 
     memset(pstr_qc_out_chan[ch].scalefactor, 0,
            sizeof(*pstr_qc_out_chan[ch].scalefactor) * pstr_psy_out[ch].sfb_count);
     memset(pstr_qc_out_chan[ch].quant_spec, 0,
            sizeof(*pstr_qc_out_chan[ch].quant_spec) * frame_len_long);
 
     ptr_scalefactor = pstr_qc_out_chan[ch].scalefactor;
     global_gain = &pstr_qc_out_chan[ch].global_gain;
     ptr_sfb_form_factor = &sfb_form_factor_ch[ch][0];
     ptr_sfb_num_relevant_lines_ch = &sfb_num_relevant_lines_ch[ch][0];
     ptr_quant_spec = pstr_qc_out_chan[ch].quant_spec;
 
     for (i = 0; i < pstr_psy_out_chan->sfb_count; i++) {
       thresh = pstr_psy_out_chan->ptr_sfb_thr[i];
       energy = pstr_psy_out_chan->ptr_sfb_energy[i];
       max_spec = 0.0f;
 
       for (j = pstr_psy_out_chan->sfb_offsets[i]; j < pstr_psy_out_chan->sfb_offsets[i + 1];
            j++) {
         max_spec = (FLOAT32)MAX(max_spec, fabsf(pstr_psy_out_chan->ptr_spec_coeffs[j]));
       }
 
       ptr_scalefactor[i] = MIN_SHRT_VAL;
       min_sf_max_quant[i] = MIN_SHRT_VAL;
 
       if ((max_spec > 0.0) && (energy > thresh) && (ptr_sfb_form_factor[i] != MIN_FLT_VAL)) {
         energy_part = (FLOAT32)log10(ptr_sfb_form_factor[i]);
 
         thr_part = (FLOAT32)log10(6.75 * thresh + MIN_FLT_VAL);
         scf_float = 8.8585f * (thr_part - energy_part);
         scf_int = (WORD16)floor(scf_float);
         min_sf_max_quant[i] = (WORD16)floor(C1_SF + C2_SF * log(max_spec));
         scf_int = MAX(scf_int, min_sf_max_quant[i]);
-
+        scf_int = MAX(scf_int, MIN_GAIN_INDEX_AAC);
+        scf_int = MIN(scf_int, (MAX_GAIN_INDEX_AAC - SCF_COUNT_LIMIT_AAC));
         for (j = 0; j < pstr_psy_out_chan->sfb_offsets[i + 1] - pstr_psy_out_chan->sfb_offsets[i];
              j++) {
           ptr_exp_spec[pstr_psy_out_chan->sfb_offsets[i] + j] = (FLOAT32)(
               pstr_psy_out_chan->ptr_spec_coeffs[pstr_psy_out_chan->sfb_offsets[i] + j]);
           ptr_mdct_spec[pstr_psy_out_chan->sfb_offsets[i] + j] = (FLOAT32)(
               pstr_psy_out_chan->ptr_spec_coeffs[pstr_psy_out_chan->sfb_offsets[i] + j]);
         }
 
         iaace_calculate_exp_spec(
             pstr_psy_out_chan->sfb_offsets[i + 1] - pstr_psy_out_chan->sfb_offsets[i],
             ptr_exp_spec + pstr_psy_out_chan->sfb_offsets[i],
             ptr_mdct_spec + pstr_psy_out_chan->sfb_offsets[i]);
 
         scf_int = iaace_improve_scf(
             ptr_mdct_spec + pstr_psy_out_chan->sfb_offsets[i],
             ptr_exp_spec + pstr_psy_out_chan->sfb_offsets[i],
             ptr_quant_spec + pstr_psy_out_chan->sfb_offsets[i],
             quant_spec_temp + pstr_psy_out_chan->sfb_offsets[i],
             pstr_psy_out_chan->sfb_offsets[i + 1] - pstr_psy_out_chan->sfb_offsets[i], thresh,
             scf_int, min_sf_max_quant[i], &sfb_dist[i], &min_calc_scf[i]);
 
         ptr_scalefactor[i] = scf_int;
       }
     }
 
     {
       FLOAT32 sfb_const_pe_part[MAXIMUM_GROUPED_SCALE_FACTOR_BAND];
 
       for (i = 0; i < pstr_psy_out_chan->sfb_count; i++) {
         sfb_const_pe_part[i] = MIN_FLT_VAL;
       }
 
       iaace_assimilate_single_scf(pstr_psy_out_chan, ptr_exp_spec, ptr_quant_spec,
                                   quant_spec_temp, ptr_scalefactor, min_sf_max_quant, sfb_dist,
                                   sfb_const_pe_part, ptr_sfb_form_factor,
                                   ptr_sfb_num_relevant_lines_ch, min_calc_scf, ptr_mdct_spec);
 
       iaace_assimilate_multiple_scf(pstr_psy_out_chan, ptr_exp_spec, ptr_quant_spec,
                                     quant_spec_temp, ptr_scalefactor, min_sf_max_quant, sfb_dist,
                                     sfb_const_pe_part, ptr_sfb_form_factor,
                                     ptr_sfb_num_relevant_lines_ch, ptr_mdct_spec);
     }
 
     max_scf = MIN_SHRT_VAL;
     min_scf = MAX_SHRT_VAL;
     for (i = 0; i < pstr_psy_out_chan->sfb_count; i++) {
       if (max_scf < ptr_scalefactor[i]) {
         max_scf = ptr_scalefactor[i];
       }
       if ((ptr_scalefactor[i] != MIN_SHRT_VAL) && (min_scf > ptr_scalefactor[i])) {
         min_scf = ptr_scalefactor[i];
       }
     }
 
     for (i = 0; i < pstr_psy_out[ch].sfb_count; i++) {
       if ((ptr_scalefactor[i] != MIN_SHRT_VAL) &&
           (min_scf + MAX_SCF_DELTA) < ptr_scalefactor[i]) {
         ptr_scalefactor[i] = min_scf + MAX_SCF_DELTA;
 
         iaace_calc_sfb_dist(
             ptr_mdct_spec + pstr_psy_out_chan->sfb_offsets[i],
             ptr_exp_spec + pstr_psy_out_chan->sfb_offsets[i],
             ptr_quant_spec + pstr_psy_out_chan->sfb_offsets[i],
             pstr_psy_out_chan->sfb_offsets[i + 1] - pstr_psy_out_chan->sfb_offsets[i],
             ptr_scalefactor[i]);
       }
     }
 
     max_scf = MIN((min_scf + MAX_SCF_DELTA), max_scf);
 
     if (max_scf > MIN_SHRT_VAL) {
       *global_gain = max_scf;
       for (i = 0; i < pstr_psy_out_chan->sfb_count; i++) {
         if (ptr_scalefactor[i] == MIN_SHRT_VAL) {
           ptr_scalefactor[i] = 0;
           for (j = pstr_psy_out_chan->sfb_offsets[i]; j < pstr_psy_out_chan->sfb_offsets[i + 1];
                j++) {
             pstr_psy_out_chan->ptr_spec_coeffs[j] = 0.0f;
           }
         } else {
           ptr_scalefactor[i] = max_scf - ptr_scalefactor[i];
         }
       }
     } else {
       *global_gain = 0;
       for (i = 0; i < pstr_psy_out_chan->sfb_count; i++) {
         ptr_scalefactor[i] = 0;
         for (j = pstr_psy_out_chan->sfb_offsets[i]; j < pstr_psy_out_chan->sfb_offsets[i + 1];
              j++) {
           pstr_psy_out_chan->ptr_spec_coeffs[j] = 0.0f;
         }
       }
     }
   }
 }
