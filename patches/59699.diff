commit c5b909630bb566cdbf68fae4091f049f3b22ff11
Author: David Anderson <davea42@linuxmail.org>
Date:   Sat Jun 10 12:19:18 2023 -0700

    Added a comment where we call _dwarf_read_cie_fde_prefix()
            modified:   src/lib/libdwarf/dwarf_frame.c
    
    DW202306-008 ossfuzz id: 59699
    Check a byte pointer before we dereference it
    in _dwarf_read_cie_fde_prefix().
            modified:   src/lib/libdwarf/dwarf_frame2.c

diff --git a/src/lib/libdwarf/dwarf_frame.c b/src/lib/libdwarf/dwarf_frame.c
index 63c260b5..57689acd 100644
--- a/src/lib/libdwarf/dwarf_frame.c
+++ b/src/lib/libdwarf/dwarf_frame.c
@@ -2044,153 +2044,155 @@ int
 dwarf_get_fde_for_die(Dwarf_Debug dbg,
     Dwarf_Die die,
     Dwarf_Fde * ret_fde, Dwarf_Error * error)
 {
     Dwarf_Attribute attr;
     Dwarf_Unsigned fde_offset = 0;
     Dwarf_Signed signdval = 0;
     Dwarf_Fde new_fde = 0;
     unsigned char *fde_ptr = 0;
     unsigned char *fde_start_ptr = 0;
     unsigned char *fde_end_ptr = 0;
     unsigned char *cie_ptr = 0;
     Dwarf_Unsigned cie_id = 0;
     Dwarf_Half     address_size = 0;
 
     /* Fields for the current Cie being read. */
     int res = 0;
     int resattr = 0;
     int sdatares = 0;
 
     struct cie_fde_prefix_s prefix;
     struct cie_fde_prefix_s prefix_c;
 
     if (!dbg || dbg->de_magic != DBG_IS_VALID) {
         _dwarf_error_string(NULL, error, DW_DLE_DBG_NULL,
             "DW_DLE_DBG_NULL: in dwarf_get_fde_for_die(): "
             "Either null or it contains"
             "a stale Dwarf_Debug pointer");
         return DW_DLV_ERROR;
     }
     if (!die ) {
         _dwarf_error_string(NULL, error, DW_DLE_DIE_NULL,
             "DW_DLE_DIE_NUL: in dwarf_get_fde_for_die(): "
             "Called with Dwarf_Die argument null");
         return DW_DLV_ERROR;
     }
     resattr = dwarf_attr(die, DW_AT_MIPS_fde, &attr, error);
     if (resattr != DW_DLV_OK) {
         return resattr;
     }
     /* why is this formsdata? FIX */
     sdatares = dwarf_formsdata(attr, &signdval, error);
     if (sdatares != DW_DLV_OK) {
         dwarf_dealloc_attribute(attr);
         return sdatares;
     }
     res = dwarf_get_die_address_size(die,&address_size,error);
     if (res != DW_DLV_OK) {
         dwarf_dealloc_attribute(attr);
         return res;
     }
     dwarf_dealloc_attribute(attr);
     res = _dwarf_load_section(dbg, &dbg->de_debug_frame,error);
     if (res != DW_DLV_OK) {
         return res;
     }
     fde_offset = signdval;
     fde_start_ptr = dbg->de_debug_frame.dss_data;
     fde_ptr = fde_start_ptr + fde_offset;
     fde_end_ptr = fde_start_ptr + dbg->de_debug_frame.dss_size;
     res = _dwarf_validate_register_numbers(dbg,error);
     if (res == DW_DLV_ERROR) {
         return res;
     }
 
     /*  First read in the 'common prefix' to figure out
         what we are to do with this entry. */
     memset(&prefix_c, 0, sizeof(prefix_c));
     memset(&prefix, 0, sizeof(prefix));
     res = _dwarf_read_cie_fde_prefix(dbg, fde_ptr,
         dbg->de_debug_frame.dss_data,
         dbg->de_debug_frame.dss_index,
         dbg->de_debug_frame.dss_size,
         &prefix,
         error);
     if (res == DW_DLV_ERROR) {
         return res;
     }
     if (res == DW_DLV_NO_ENTRY) {
         return res;
     }
     fde_ptr = prefix.cf_addr_after_prefix;
     cie_id = prefix.cf_cie_id;
     /*  Pass NULL, not section pointer, for 3rd argument.
         de_debug_frame.dss_data has no eh_frame relevance. */
     res = _dwarf_create_fde_from_after_start(dbg, &prefix,
         fde_start_ptr,
         fde_ptr,
         fde_end_ptr,
         /* use_gnu_cie_calc= */ 0,
 
         /* Dwarf_Cie = */ 0,
         address_size,
         &new_fde, error);
     if (res == DW_DLV_ERROR) {
         return res;
     }
     if (res == DW_DLV_NO_ENTRY) {
         return res;
     }
     /* DW_DLV_OK */
 
     /*  This is the only situation this is set. */
     new_fde->fd_fde_owns_cie = TRUE;
-    /* now read the cie corresponding to the fde */
+    /*  Now read the cie corresponding to the fde,
+        _dwarf_read_cie_fde_prefix checks 
+        cie_ptr for being within the section. */
     cie_ptr = new_fde->fd_section_ptr + cie_id;
     res = _dwarf_read_cie_fde_prefix(dbg, cie_ptr,
         dbg->de_debug_frame.dss_data,
         dbg->de_debug_frame.dss_index,
         dbg->de_debug_frame.dss_size,
         &prefix_c, error);
     if (res == DW_DLV_ERROR) {
         dwarf_dealloc(dbg,new_fde,DW_DLA_FDE);
         new_fde = 0;
         return res;
     }
     if (res == DW_DLV_NO_ENTRY) {
         dwarf_dealloc(dbg,new_fde,DW_DLA_FDE);
         new_fde = 0;
         return res;
     }
 
     cie_ptr = prefix_c.cf_addr_after_prefix;
     cie_id = prefix_c.cf_cie_id;
 
     if (cie_id == (Dwarf_Unsigned)DW_CIE_ID) {
         int res2 = 0;
         Dwarf_Cie new_cie = 0;
 
         /*  Pass NULL, not section pointer, for 3rd argument.
             de_debug_frame.dss_data has no eh_frame relevance. */
         res2 = _dwarf_create_cie_from_after_start(dbg,
             &prefix_c,
             fde_start_ptr,
             cie_ptr,
             fde_end_ptr,
             /* cie_count= */ 0,
             /* use_gnu_cie_calc= */
             0, &new_cie, error);
         if (res2 != DW_DLV_OK) {
             dwarf_dealloc(dbg, new_fde, DW_DLA_FDE);
             return res;
         }
         new_fde->fd_cie = new_cie;
     } else {
         dwarf_dealloc(dbg,new_fde,DW_DLA_FDE);
         new_fde = 0;
         _dwarf_error(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
         return DW_DLV_ERROR;
     }
     *ret_fde = new_fde;
     return DW_DLV_OK;
 }
diff --git a/src/lib/libdwarf/dwarf_frame2.c b/src/lib/libdwarf/dwarf_frame2.c
index db412312..b44e984c 100644
--- a/src/lib/libdwarf/dwarf_frame2.c
+++ b/src/lib/libdwarf/dwarf_frame2.c
@@ -1281,95 +1281,103 @@ int
 _dwarf_read_cie_fde_prefix(Dwarf_Debug dbg,
     Dwarf_Small * frame_ptr_in,
     Dwarf_Small * section_ptr_in,
     Dwarf_Unsigned section_index_in,
     Dwarf_Unsigned section_length_in,
     struct cie_fde_prefix_s *data_out,
     Dwarf_Error * error)
 {
     Dwarf_Unsigned length = 0;
     int local_length_size = 0;
     int local_extension_size = 0;
     Dwarf_Small *frame_ptr = frame_ptr_in;
     Dwarf_Small *cie_ptr_addr = 0;
     Dwarf_Unsigned cie_id = 0;
     Dwarf_Small *section_end = section_ptr_in + section_length_in;
 
+    if (frame_ptr_in < section_ptr_in ||
+        frame_ptr_in >= section_end) {
+        _dwarf_error_string(dbg,error,DW_DLE_DEBUG_FRAME_LENGTH_BAD,
+            "DW_DLE_DEBUG_FRAME_LENGTH_BAD: "
+            "The frame point given _dwarf_read_cie_fde_prefix() "
+            "is invalid"); 
+        return DW_DLV_ERROR;
+    }
     if (section_end < (frame_ptr +4)) {
         dwarfstring m;
         Dwarf_Unsigned u =
             (Dwarf_Unsigned)(uintptr_t)(frame_ptr+4) -
             (Dwarf_Unsigned)(uintptr_t)section_end;
 
         dwarfstring_constructor(&m);
         dwarfstring_append_printf_u(&m,
             "DW_DLE_DEBUG_FRAME_LENGTH_BAD: "
             "Reading the cie/fde prefix would "
             "put us %u bytes past the end of the "
             "frame section.  Corrupt Dwarf.",u);
         _dwarf_error_string(dbg,error,DW_DLE_DEBUG_FRAME_LENGTH_BAD,
             dwarfstring_string(&m));
         dwarfstring_destructor(&m);
         return DW_DLV_ERROR;
     }
     /* READ_AREA_LENGTH updates frame_ptr for consumed bytes */
     READ_AREA_LENGTH_CK(dbg, length, Dwarf_Unsigned,
         frame_ptr, local_length_size,
         local_extension_size,error,
         section_length_in,section_end);
     if (length == 0) {
         /*  nul bytes at end of section, seen at end of egcs eh_frame
             sections (in a.out). Take this as meaning no more CIE/FDE
             data. We should be very close to end of section. */
         return DW_DLV_NO_ENTRY;
     }
     if (length > section_length_in ||
         (length +local_length_size + local_extension_size) >
         section_length_in) {
         _dwarf_error(dbg,error,DW_DLE_DEBUG_FRAME_LENGTH_BAD);
         return DW_DLV_ERROR;
     }
     if ((frame_ptr + local_length_size) >= section_end) {
         _dwarf_error(dbg,error,DW_DLE_DEBUG_FRAME_LENGTH_BAD);
         return DW_DLV_ERROR;
     }
 
     cie_ptr_addr = frame_ptr;
     READ_UNALIGNED_CK(dbg, cie_id, Dwarf_Unsigned,
         frame_ptr, local_length_size,error,section_end);
     SIGN_EXTEND(cie_id, local_length_size);
     frame_ptr += local_length_size;
 
     data_out->cf_start_addr = frame_ptr_in;
     data_out->cf_addr_after_prefix = frame_ptr;
 
     data_out->cf_length = length;
     if (length > section_length_in) {
         _dwarf_error(dbg,error,DW_DLE_DEBUG_FRAME_LENGTH_BAD);
         return DW_DLV_ERROR;
     }
     if (cie_ptr_addr+length > section_end) {
         _dwarf_error(dbg,error,DW_DLE_DEBUG_FRAME_LENGTH_BAD);
         return DW_DLV_ERROR;
     }
     data_out->cf_local_length_size = local_length_size;
     data_out->cf_local_extension_size = local_extension_size;
 
     /*  We do not know if it is a CIE or FDE id yet.
         How we check and what it means
         depends whether it is .debug_frame
         or .eh_frame. */
     data_out->cf_cie_id = cie_id;
 
     /*  The address of the CIE_id  or FDE_id value in memory.  */
     data_out->cf_cie_id_addr = cie_ptr_addr;
 
     data_out->cf_section_ptr = section_ptr_in;
     data_out->cf_section_index = section_index_in;
     data_out->cf_section_length = section_length_in;
     return DW_DLV_OK;
 }
 
 /*  On various errors previously-allocated CIEs and FDEs
     must be cleaned up.
     This helps avoid leaks in case of errors.
 */
