commit b3a1badecf7155a795de5239a6ba19b70ec0c6a9
Author: Andras Fekete <andras@wolfssl.com>
Date:   Mon Aug 14 17:02:59 2023 -0400

    Check the return value

diff --git a/wolfcrypt/src/asn.c b/wolfcrypt/src/asn.c
index 336934f9b..eda4ac94a 100644
--- a/wolfcrypt/src/asn.c
+++ b/wolfcrypt/src/asn.c
@@ -31646,66 +31646,69 @@ enum {
 /* Der Encode r & s ints into out, outLen is (in/out) size */
 int StoreECC_DSA_Sig(byte* out, word32* outLen, mp_int* r, mp_int* s)
 {
 #ifndef WOLFSSL_ASN_TEMPLATE
     word32 idx = 0;
     int    rSz;                           /* encoding size */
     int    sSz;
     int    headerSz = 4;   /* 2*ASN_TAG + 2*LEN(ENUM) */
 
     /* If the leading bit on the INTEGER is a 1, add a leading zero */
     int rLeadingZero = mp_leading_bit(r);
     int sLeadingZero = mp_leading_bit(s);
     int rLen = mp_unsigned_bin_size(r);   /* big int size */
     int sLen = mp_unsigned_bin_size(s);
 
     if (*outLen < (word32)((rLen + rLeadingZero + sLen + sLeadingZero +
             headerSz + 2)))  /* SEQ_TAG + LEN(ENUM) */
         return BUFFER_E;
 
     idx = SetSequence((word32)(rLen + rLeadingZero + sLen + sLeadingZero +
         headerSz), out);
 
     /* store r */
     rSz = SetASNIntMP(r, (int)(*outLen - idx), &out[idx]);
     if (rSz < 0)
         return rSz;
     idx += (word32)rSz;
 
     /* store s */
     sSz = SetASNIntMP(s, (int)(*outLen - idx), &out[idx]);
     if (sSz < 0)
         return sSz;
     idx += (word32)sSz;
 
     *outLen = idx;
 
     return 0;
 #else
     ASNSetData dataASN[dsaSigASN_Length];
     int ret;
     int sz;
 
     /* Clear dynamic data and set mp_ints r and s */
     XMEMSET(dataASN, 0, sizeof(dataASN));
     SetASN_MP(&dataASN[DSASIGASN_IDX_R], r);
     SetASN_MP(&dataASN[DSASIGASN_IDX_S], s);
 
     /* Calculate size of encoding. */
     ret = SizeASN_Items(dsaSigASN, dataASN, dsaSigASN_Length, &sz);
     /* Check buffer is big enough for encoding. */
     if ((ret == 0) && ((int)*outLen < sz)) {
        ret = BUFFER_E;
     }
     if (ret == 0) {
         /* Encode DSA signature into buffer. */
-        SetASN_Items(dsaSigASN, dataASN, dsaSigASN_Length, out);
-        /* Set the actual encoding size. */
-        *outLen = (word32)sz;
+        ret = SetASN_Items(dsaSigASN, dataASN, dsaSigASN_Length, out);
+        if ((ret >= 0) && (ret == sz)) {
+            /* Set the actual encoding size. */
+            *outLen = (word32)sz;
+            ret = 0;
+        }
     }
 
     return ret;
 #endif /* WOLFSSL_ASN_TEMPLATE */
 }
 
 #ifndef WOLFSSL_ASN_TEMPLATE
 /* determine if leading bit is set */
