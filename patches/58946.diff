commit 938a48d9b179264ba7c610a750419ce3f830357d
Author: JacobBarthelmeh <jacob@wolfssl.com>
Date:   Thu Jun 8 02:37:21 2023 -0600

    sanity check on socket return value for timeout with DTLS13

diff --git a/src/internal.c b/src/internal.c
index b675390a1..45124fd64 100644
--- a/src/internal.c
+++ b/src/internal.c
@@ -10381,90 +10381,93 @@ static int GetDtls13RecordHeader(WOLFSSL* ssl, word32* inOutIdx,
 #ifdef WOLFSSL_DTLS
 static int GetDtlsRecordHeader(WOLFSSL* ssl, word32* inOutIdx,
     RecordLayerHeader* rh, word16* size)
 {
 
 #ifdef HAVE_FUZZER
     if (ssl->fuzzerCb)
         ssl->fuzzerCb(ssl, ssl->buffers.inputBuffer.buffer + *inOutIdx,
                       DTLS_RECORD_HEADER_SZ, FUZZ_HEAD, ssl->fuzzerCtx);
 #endif
 
 #ifdef WOLFSSL_DTLS13
     int ret;
 
     if (Dtls13IsUnifiedHeader(*(ssl->buffers.inputBuffer.buffer + *inOutIdx))) {
 
         /* version 1.3 already negotiated */
         if (ssl->options.tls1_3) {
             ret = GetDtls13RecordHeader(ssl, inOutIdx, rh, size);
             if (ret == 0 || ret != SEQUENCE_ERROR || ret != DTLS_CID_ERROR)
                 return ret;
         }
 
 #ifndef NO_WOLFSSL_CLIENT
         if (ssl->options.side == WOLFSSL_CLIENT_END
             && ssl->options.serverState < SERVER_HELLO_COMPLETE
             && IsAtLeastTLSv1_3(ssl->version)
             && !ssl->options.handShakeDone) {
             /* we may have lost ServerHello. Try to send a empty ACK to shortcut
                Server retransmission timer */
             ssl->dtls13Rtx.sendAcks = 1;
         }
 #endif
         return SEQUENCE_ERROR;
     }
 
     /* not a unified header, check that we have at least
      * DTLS_RECORD_HEADER_SZ */
     if (ssl->buffers.inputBuffer.length - *inOutIdx < DTLS_RECORD_HEADER_SZ) {
         ret = GetInputData(ssl, DTLS_RECORD_HEADER_SZ);
+        /* Check if Dtls13RtxTimeout(ssl) returned socket error */
+        if (ret == SOCKET_ERROR_E)
+            return ret;
         if (ret != 0)
             return LENGTH_ERROR;
     }
 #endif /* WOLFSSL_DTLS13 */
 
     /* type and version in same spot */
     XMEMCPY(rh, ssl->buffers.inputBuffer.buffer + *inOutIdx,
             ENUM_LEN + VERSION_SZ);
     *inOutIdx += ENUM_LEN + VERSION_SZ;
     ato16(ssl->buffers.inputBuffer.buffer + *inOutIdx, &ssl->keys.curEpoch);
 
 #ifdef WOLFSSL_DTLS13
     /* only non protected message can use the DTLSPlaintext record header */
     if (IsAtLeastTLSv1_3(ssl->version)) {
         if (ssl->keys.curEpoch != 0)
             return SEQUENCE_ERROR;
 
         w64Zero(&ssl->keys.curEpoch64);
         if (!w64IsZero(ssl->dtls13DecryptEpoch->epochNumber))
             Dtls13SetEpochKeys(ssl, ssl->keys.curEpoch64, DECRYPT_SIDE_ONLY);
     }
 #endif /* WOLFSSL_DTLS13 */
 
     *inOutIdx += OPAQUE16_LEN;
     if (ssl->options.haveMcast) {
     #ifdef WOLFSSL_MULTICAST
         ssl->keys.curPeerId = ssl->buffers.inputBuffer.buffer[*inOutIdx];
         ssl->keys.curSeq_hi = ssl->buffers.inputBuffer.buffer[*inOutIdx+1];
     #endif
     }
     else
         ato16(ssl->buffers.inputBuffer.buffer + *inOutIdx, &ssl->keys.curSeq_hi);
     *inOutIdx += OPAQUE16_LEN;
     ato32(ssl->buffers.inputBuffer.buffer + *inOutIdx, &ssl->keys.curSeq_lo);
     *inOutIdx += OPAQUE32_LEN;  /* advance past rest of seq */
 
 #ifdef WOLFSSL_DTLS13
     /* DTLSv1.3 PlainText records use DTLSv1.2 sequence number encoding. Update
        the DTLv1.3 word64 version as well */
     ssl->keys.curSeq = w64From32(ssl->keys.curSeq_hi, ssl->keys.curSeq_lo);
 #endif /* WOLFSSL_DTLS13 */
 
     ato16(ssl->buffers.inputBuffer.buffer + *inOutIdx, size);
     *inOutIdx += LENGTH_SZ;
 
     return 0;
 }
 #endif /* WOLFSSL_DTLS */
 
 /* do all verify and sanity checks on record header */
