commit 868f86c106b10a50be57fd174f4bc1fc708b4ef0
Author: Dirk Farin <dirk.farin@gmail.com>
Date:   Fri Jan 27 21:00:22 2023 +0100

    deprecate heif_context_get_encoder_descriptors()

diff --git a/examples/heif_enc.cc b/examples/heif_enc.cc
index 6572a0f..8c1f631 100644
--- a/examples/heif_enc.cc
+++ b/examples/heif_enc.cc
@@ -1160,31 +1160,30 @@ static void show_list_of_encoders(const heif_encoder_descriptor* const* encoder_
 }
 
 
-static void show_list_of_all_encoders(heif_context* context)
+static void show_list_of_all_encoders()
 {
   for (auto compression_format : {heif_compression_HEVC, heif_compression_AV1}) {
 
     switch (compression_format) {
       case heif_compression_AV1:
         std::cout << "AVIF";
         break;
       case heif_compression_HEVC:
         std::cout << "HEIC";
         break;
       default:
         assert(false);
     }
 
     std::cout << " encoders:\n";
 
 #define MAX_ENCODERS 10
     const heif_encoder_descriptor* encoder_descriptors[MAX_ENCODERS];
-    int count = heif_context_get_encoder_descriptors(context,
-                                                     compression_format,
-                                                     nullptr,
-                                                     encoder_descriptors, MAX_ENCODERS);
+    int count = heif_get_encoder_descriptors(compression_format,
+                                             nullptr,
+                                             encoder_descriptors, MAX_ENCODERS);
 #undef MAX_ENCODERS
 
     show_list_of_encoders(encoder_descriptors, count);
   }
 }
@@ -1230,418 +1229,417 @@ public:
 int main(int argc, char** argv)
 {
   // This takes care of initializing libheif and also deinitializing it at the end to free all resources.
   LibHeifInitializer initializer;
 
   int quality = 50;
   bool lossless = false;
   std::string output_filename;
   int logging_level = 0;
   bool option_show_parameters = false;
   int thumbnail_bbox_size = 0;
   int output_bit_depth = 10;
   bool force_enc_av1f = false;
   bool crop_to_even_size = false;
 
   std::vector<std::string> raw_params;
 
 
   while (true) {
     int option_index = 0;
     int c = getopt_long(argc, argv, "hq:Lo:vPp:t:b:AEe:", long_options, &option_index);
     if (c == -1)
       break;
 
     switch (c) {
       case 'h':
         show_help(argv[0]);
         return 0;
       case 'q':
         quality = atoi(optarg);
         break;
       case 'L':
         lossless = true;
         break;
       case 'o':
         output_filename = optarg;
         break;
       case 'v':
         logging_level++;
         break;
       case 'P':
         option_show_parameters = true;
         break;
       case 'p':
         raw_params.push_back(optarg);
         break;
       case 't':
         thumbnail_bbox_size = atoi(optarg);
         break;
       case 'b':
         output_bit_depth = atoi(optarg);
         break;
       case 'A':
         force_enc_av1f = true;
         break;
       case 'E':
         crop_to_even_size = true;
         break;
       case 'e':
         encoderId = optarg;
         break;
       case OPTION_NCLX_MATRIX_COEFFICIENTS:
         nclx_matrix_coefficients = (uint16_t)strtoul(optarg, nullptr, 0);
         break;
       case OPTION_NCLX_COLOUR_PRIMARIES:
         nclx_colour_primaries = (uint16_t)strtoul(optarg, nullptr, 0);
         break;
       case OPTION_NCLX_TRANSFER_CHARACTERISTIC:
         nclx_transfer_characteristic = (uint16_t)strtoul(optarg, nullptr, 0);
         break;
       case OPTION_NCLX_FULL_RANGE_FLAG:
         nclx_full_range = atoi(optarg);
         break;
       case OPTION_PLUGIN_DIRECTORY: {
         int nPlugins;
         heif_error error = heif_load_plugins(optarg, nullptr, &nPlugins, 0);
         if (error.code) {
           std::cerr << "Error loading libheif plugins.\n";
           return 1;
         }
 
         // Note: since we process the option within the loop, we can only consider the '-v' flags coming before the plugin loading option.
         if (logging_level>0) {
           std::cout << nPlugins << " plugins loaded from directory " << optarg << "\n";
         }
         break;
       }
     }
   }
 
   if (quality < 0 || quality > 100) {
     std::cerr << "Invalid quality factor. Must be between 0 and 100.\n";
     return 5;
   }
 
   if (logging_level > 0) {
     logging_level += 2;
 
     if (logging_level > 4) {
       logging_level = 4;
     }
   }
 
 
   // ==============================================================================
 
-  std::shared_ptr<heif_context> context(heif_context_alloc(),
-                                        [](heif_context* c) { heif_context_free(c); });
-  if (!context) {
-    std::cerr << "Could not create context object\n";
-    return 1;
-  }
-
-
   struct heif_encoder* encoder = nullptr;
 
   if (list_encoders) {
-    show_list_of_all_encoders(context.get());
+    show_list_of_all_encoders();
     return 0;
   }
 
   if (optind > argc - 1) {
     show_help(argv[0]);
     return 0;
   }
 
 
   // --- determine output compression format (from output filename or command line parameter)
 
   heif_compression_format compressionFormat;
 
   if (force_enc_av1f) {
     compressionFormat = heif_compression_AV1;
   }
   else {
     compressionFormat = guess_compression_format_from_filename(output_filename);
   }
 
   if (compressionFormat == heif_compression_undefined) {
     compressionFormat = heif_compression_HEVC;
   }
 
 
   // --- select encoder
 
+  std::shared_ptr<heif_context> context(heif_context_alloc(),
+                                        [](heif_context* c) { heif_context_free(c); });
+  if (!context) {
+    std::cerr << "Could not create context object\n";
+    return 1;
+  }
+
+
 #define MAX_ENCODERS 10
   const heif_encoder_descriptor* encoder_descriptors[MAX_ENCODERS];
-  int count = heif_context_get_encoder_descriptors(context.get(),
-                                                   compressionFormat,
-                                                   nullptr,
-                                                   encoder_descriptors, MAX_ENCODERS);
+  int count = heif_get_encoder_descriptors(compressionFormat,
+                                           nullptr,
+                                           encoder_descriptors, MAX_ENCODERS);
 #undef MAX_ENCODERS
 
   const heif_encoder_descriptor* active_encoder_descriptor = nullptr;
   if (count > 0) {
     int idx = 0;
     if (encoderId != nullptr) {
       for (int i = 0; i <= count; i++) {
         if (i == count) {
           std::cerr << "Unknown encoder ID. Choose one from the list below.\n";
           show_list_of_encoders(encoder_descriptors, count);
           return 5;
         }
 
         if (strcmp(encoderId, heif_encoder_descriptor_get_id_name(encoder_descriptors[i])) == 0) {
           idx = i;
           break;
         }
       }
     }
 
     heif_error error = heif_context_get_encoder(context.get(), encoder_descriptors[idx], &encoder);
     if (error.code) {
       std::cerr << error.message << "\n";
       return 5;
     }
 
     active_encoder_descriptor = encoder_descriptors[idx];
   }
   else {
     std::cerr << "No " << (compressionFormat==heif_compression_AV1 ? "AV1" : "HEVC") << " encoder available.\n";
     return 5;
   }
 
   if (option_show_parameters) {
     list_encoder_parameters(encoder);
     return 0;
   }
 
 
   struct heif_error error;
 
   std::shared_ptr<heif_image> primary_image;
 
   for (; optind < argc; optind++) {
     std::string input_filename = argv[optind];
 
     if (output_filename.empty()) {
       std::string filename_without_suffix;
       std::string::size_type dot_position = input_filename.find_last_of('.');
       if (dot_position != std::string::npos) {
         filename_without_suffix = input_filename.substr(0, dot_position);
       }
       else {
         filename_without_suffix = input_filename;
       }
 
       output_filename = filename_without_suffix + (compressionFormat==heif_compression_AV1 ? ".avif" : ".heic");
     }
 
 
     // ==============================================================================
 
     // get file type from file name
 
     std::string suffix;
     auto suffix_pos = input_filename.find_last_of('.');
     if (suffix_pos != std::string::npos) {
       suffix = input_filename.substr(suffix_pos + 1);
       std::transform(suffix.begin(), suffix.end(), suffix.begin(), ::tolower);
     }
 
     enum
     {
       PNG, JPEG, Y4M
     } filetype = JPEG;
     if (suffix == "png") {
       filetype = PNG;
     }
     else if (suffix == "y4m") {
       filetype = Y4M;
     }
 
     InputImage input_image;
     if (filetype == PNG) {
       input_image = loadPNG(input_filename.c_str(), output_bit_depth);
     }
     else if (filetype == Y4M) {
       input_image.image = loadY4M(input_filename.c_str());
     }
     else {
       input_image = loadJPEG(input_filename.c_str());
     }
 
     std::shared_ptr<heif_image> image = input_image.image;
 
     if (!primary_image) {
       primary_image = image;
     }
 
 #if HAVE_GETTIMEOFDAY
     if (run_benchmark) {
       gettimeofday(&time_encoding_start, nullptr);
     }
 #endif
 
     heif_color_profile_nclx nclx;
     error = heif_nclx_color_profile_set_matrix_coefficients(&nclx, nclx_matrix_coefficients);
     if (error.code) {
       std::cerr << "Invalid matrix coefficients specified.\n";
       exit(5);
     }
     error = heif_nclx_color_profile_set_transfer_characteristics(&nclx, nclx_transfer_characteristic);
     if (error.code) {
       std::cerr << "Invalid transfer characteristics specified.\n";
       exit(5);
     }
     error = heif_nclx_color_profile_set_color_primaries(&nclx, nclx_colour_primaries);
     if (error.code) {
       std::cerr << "Invalid color primaries specified.\n";
       exit(5);
     }
     nclx.full_range_flag = (uint8_t) nclx_full_range;
 
     //heif_image_set_nclx_color_profile(image.get(), &nclx);
 
     if (lossless) {
       if (heif_encoder_descriptor_supports_lossless_compression(active_encoder_descriptor)) {
         heif_encoder_set_lossless(encoder, lossless);
       }
       else {
         std::cerr << "Warning: the selected encoder does not support lossless encoding. Encoding in lossy mode.\n";
       }
     }
 
     heif_encoder_set_lossy_quality(encoder, quality);
     heif_encoder_set_logging_level(encoder, logging_level);
 
     set_params(encoder, raw_params);
     struct heif_encoding_options* options = heif_encoding_options_alloc();
     options->save_alpha_channel = (uint8_t) master_alpha;
     options->save_two_colr_boxes_when_ICC_and_nclx_available = (uint8_t)two_colr_boxes;
     options->output_nclx_profile = &nclx;
     options->image_orientation = input_image.orientation;
 
     if (crop_to_even_size) {
       if (heif_image_get_primary_width(image.get()) == 1 ||
           heif_image_get_primary_height(image.get()) == 1) {
         std::cerr << "Image only has a size of 1 pixel width or height. Cannot crop to even size.\n";
         return 1;
       }
 
       std::cerr << "Warning: option --even-size/-E is deprecated as it is not needed anymore.\n";
 
       int right = heif_image_get_primary_width(image.get()) % 2;
       int bottom = heif_image_get_primary_height(image.get()) % 2;
 
       error = heif_image_crop(image.get(), 0, right, 0, bottom);
       if (error.code != 0) {
         heif_encoding_options_free(options);
         std::cerr << "Could not crop image: " << error.message << "\n";
         return 1;
       }
     }
 
     if (premultiplied_alpha) {
       heif_image_set_premultiplied_alpha(image.get(), premultiplied_alpha);
     }
 
 
     struct heif_image_handle* handle;
     error = heif_context_encode_image(context.get(),
                                       image.get(),
                                       encoder,
                                       options,
                                       &handle);
     if (error.code != 0) {
       heif_encoding_options_free(options);
       std::cerr << "Could not encode HEIF/AVIF file: " << error.message << "\n";
       return 1;
     }
 
     // write EXIF to HEIC
     if (!input_image.exif.empty()) {
       // Note: we do not modify the EXIF Orientation here because we want it to match the HEIF transforms.
       // TODO: is this a good choice? Or should we set it to 1 (normal) so that other, faulty software will not transform it once more?
 
       error = heif_context_add_exif_metadata(context.get(), handle,
                                              input_image.exif.data(), (int) input_image.exif.size());
       if (error.code != 0) {
         heif_encoding_options_free(options);
         std::cerr << "Could not write EXIF metadata: " << error.message << "\n";
         return 1;
       }
     }
 
     // write XMP to HEIC
     if (!input_image.xmp.empty()) {
       error = heif_context_add_XMP_metadata2(context.get(), handle,
                                      input_image.xmp.data(), (int) input_image.xmp.size(),
                                      metadata_compression ? heif_metadata_compression_deflate : heif_metadata_compression_off);
       if (error.code != 0) {
         heif_encoding_options_free(options);
         std::cerr << "Could not write XMP metadata: " << error.message << "\n";
         return 1;
       }
     }
 
     if (thumbnail_bbox_size > 0) {
       // encode thumbnail
 
       struct heif_image_handle* thumbnail_handle;
 
       options->save_alpha_channel = master_alpha && thumb_alpha;
 
       error = heif_context_encode_thumbnail(context.get(),
                                             image.get(),
                                             handle,
                                             encoder,
                                             options,
                                             thumbnail_bbox_size,
                                             &thumbnail_handle);
       if (error.code) {
         heif_encoding_options_free(options);
         std::cerr << "Could not generate thumbnail: " << error.message << "\n";
         return 5;
       }
 
       if (thumbnail_handle) {
         heif_image_handle_release(thumbnail_handle);
       }
     }
 
 #if HAVE_GETTIMEOFDAY
     if (run_benchmark) {
       gettimeofday(&time_encoding_end, nullptr);
     }
 #endif
 
     heif_image_handle_release(handle);
     heif_encoding_options_free(options);
   }
 
   heif_encoder_release(encoder);
 
   error = heif_context_write_to_file(context.get(), output_filename.c_str());
   if (error.code) {
     std::cerr << error.message << "\n";
     return 5;
   }
 
   if (run_benchmark) {
     double psnr = compute_psnr(primary_image.get(), output_filename);
     std::cout << "PSNR: " << std::setprecision(2) << std::fixed << psnr << " ";
 
 #if HAVE_GETTIMEOFDAY
     double t = (double)(time_encoding_end.tv_sec - time_encoding_start.tv_sec) + (double)(time_encoding_end.tv_usec - time_encoding_start.tv_usec)/1000000.0;
     std::cout << "time: " << std::setprecision(1) << std::fixed << t << " ";
 #endif
 
     std::ifstream istr(output_filename.c_str());
     istr.seekg(0, std::ios_base::end);
     std::streamoff size = istr.tellg();
     std::cout << "size: " << size << "\n";
   }
 
   return 0;
 }
diff --git a/libheif/encoder_fuzzer.cc b/libheif/encoder_fuzzer.cc
index f516ac7..7b767c4 100644
--- a/libheif/encoder_fuzzer.cc
+++ b/libheif/encoder_fuzzer.cc
@@ -135,66 +135,65 @@ static struct heif_error writer_write(struct heif_context* ctx, const void* data
 extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)
 {
   struct heif_error err;
   std::shared_ptr<heif_context> context(heif_context_alloc(),
                                         [](heif_context* c) { heif_context_free(c); });
   assert(context);
 
   if (size < 2) {
     return 0;
   }
 
   int quality = (data[0] & 0x7F) % 101;
   bool lossless = (data[1] & 0x80);
   bool use_avif = (data[1] & 0x40);
   data += 2;
   size -= 2;
 
   static const size_t kMaxEncoders = 5;
   const heif_encoder_descriptor* encoder_descriptors[kMaxEncoders];
-  int count = heif_context_get_encoder_descriptors(context.get(),
-                                                   use_avif ? heif_compression_AV1 : heif_compression_HEVC,
-                                                   nullptr,
-                                                   encoder_descriptors, kMaxEncoders);
+  int count = heif_get_encoder_descriptors(use_avif ? heif_compression_AV1 : heif_compression_HEVC,
+                                           nullptr,
+                                           encoder_descriptors, kMaxEncoders);
   assert(count >= 0);
   if (count == 0) {
     return 0;
   }
 
   heif_encoder* encoder;
   err = heif_context_get_encoder(context.get(), encoder_descriptors[0], &encoder);
   if (err.code != heif_error_Ok) {
     return 0;
   }
 
   heif_encoder_set_lossy_quality(encoder, quality);
   heif_encoder_set_lossless(encoder, lossless);
 
   struct heif_image* image = nullptr;
   size_t read = create_image(data, size, &image);
   assert(read <= size);
   if (!read) {
     heif_image_release(image);
     heif_encoder_release(encoder);
     return 0;
   }
 
   data += read;
   size -= read;
 
   struct heif_image_handle* img;
   err = heif_context_encode_image(context.get(), image, encoder, nullptr, &img);
   heif_image_release(image);
   heif_encoder_release(encoder);
   heif_image_handle_release(img);
   if (err.code != heif_error_Ok) {
     return 0;
   }
 
   MemoryWriter writer;
   struct heif_writer w;
   w.writer_api_version = 1;
   w.write = writer_write;
   heif_context_write(context.get(), &w, &writer);
   assert(writer.size() > 0);
   return 0;
 }
diff --git a/libheif/heif.cc b/libheif/heif.cc
index 2cead4a..155e459 100644
--- a/libheif/heif.cc
+++ b/libheif/heif.cc
@@ -1737,20 +1737,29 @@ struct heif_error heif_context_write(struct heif_context* ctx,
 int heif_context_get_encoder_descriptors(struct heif_context* ctx,
                                          enum heif_compression_format format,
                                          const char* name,
                                          const struct heif_encoder_descriptor** out_encoder_descriptors,
                                          int count)
+{
+  return heif_get_encoder_descriptors(format, name, out_encoder_descriptors, count);
+}
+
+
+int heif_get_encoder_descriptors(enum heif_compression_format format,
+                                 const char* name,
+                                 const struct heif_encoder_descriptor** out_encoder_descriptors,
+                                 int count)
 {
   if (out_encoder_descriptors == nullptr || count <= 0) {
     return 0;
   }
 
   std::vector<const struct heif_encoder_descriptor*> descriptors;
   descriptors = get_filtered_encoder_descriptors(format, name);
 
   int i;
   for (i = 0; i < count && static_cast<size_t>(i) < descriptors.size(); i++) {
     out_encoder_descriptors[i] = descriptors[i];
   }
 
   return i;
 }
diff --git a/libheif/heif.h b/libheif/heif.h
index d200e54..2de78e3 100644
--- a/libheif/heif.h
+++ b/libheif/heif.h
@@ -1231,7 +1231,8 @@ const char* heif_decoder_descriptor_get_name(const struct heif_decoder_descripto
 LIBHEIF_API
 const char* heif_decoder_descriptor_get_id_name(const struct heif_decoder_descriptor*);
 
+// DEPRECATED: use heif_get_encoder_descriptors() instead.
 // Get a list of available encoders. You can filter the encoders by compression format and name.
 // Use format_filter==heif_compression_undefined and name_filter==NULL as wildcards.
 // The returned list of encoders is sorted by their priority (which is a plugin property).
 // Note: to get the actual encoder from the descriptors returned here, use heif_context_get_encoder().
@@ -1239,9 +1240,19 @@ LIBHEIF_API
 int heif_context_get_encoder_descriptors(struct heif_context*, // TODO: why do we need this parameter?
                                          enum heif_compression_format format_filter,
                                          const char* name_filter,
                                          const struct heif_encoder_descriptor** out_encoders,
                                          int count);
 
+// Get a list of available encoders. You can filter the encoders by compression format and name.
+// Use format_filter==heif_compression_undefined and name_filter==NULL as wildcards.
+// The returned list of encoders is sorted by their priority (which is a plugin property).
+// Note: to get the actual encoder from the descriptors returned here, use heif_context_get_encoder().
+LIBHEIF_API
+int heif_get_encoder_descriptors(enum heif_compression_format format_filter,
+                                 const char* name_filter,
+                                 const struct heif_encoder_descriptor** out_encoders,
+                                 int count);
+
 // Return a long, descriptive name of the encoder (including version information).
 LIBHEIF_API
 const char* heif_encoder_descriptor_get_name(const struct heif_encoder_descriptor*);
