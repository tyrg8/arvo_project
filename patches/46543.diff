commit c2ac57f6c970ab6129507bb04bcea47a693ab17f
Author: Matthew Waters <matthew@centricular.com>
Date:   Sun Apr 10 10:55:02 2022 +1000

    subparse: don't try to index string with -1
    
    If the len of the string turns out to be 0, str[len - 1] resolved to
    str[-1] which is not a good idea.
    
    Fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=46543
    Part-of: <https://gitlab.freedesktop.org/gstreamer/gstreamer/-/merge_requests/2147>

diff --git a/subprojects/gst-plugins-base/gst/subparse/gstsubparseelement.c b/subprojects/gst-plugins-base/gst/subparse/gstsubparseelement.c
index 7b40fd503a..72af499470 100644
--- a/subprojects/gst-plugins-base/gst/subparse/gstsubparseelement.c
+++ b/subprojects/gst-plugins-base/gst/subparse/gstsubparseelement.c
@@ -97,111 +97,111 @@ GstSubParseFormat
 gst_sub_parse_data_format_autodetect (gchar * match_str)
 {
   guint n1, n2, n3;
 
   static GOnce mdvd_rx_once = G_ONCE_INIT;
   static GOnce subrip_rx_once = G_ONCE_INIT;
   static GOnce dks_rx_once = G_ONCE_INIT;
   static GOnce vtt_rx_once = G_ONCE_INIT;
 
   GRegex *mdvd_grx;
   GRegex *subrip_grx;
   GRegex *dks_grx;
   GRegex *vtt_grx;
 
   g_once (&mdvd_rx_once,
       (GThreadFunc) gst_sub_parse_data_format_autodetect_regex_once,
       (gpointer) GST_SUB_PARSE_REGEX_MDVDSUB);
   g_once (&subrip_rx_once,
       (GThreadFunc) gst_sub_parse_data_format_autodetect_regex_once,
       (gpointer) GST_SUB_PARSE_REGEX_SUBRIP);
   g_once (&dks_rx_once,
       (GThreadFunc) gst_sub_parse_data_format_autodetect_regex_once,
       (gpointer) GST_SUB_PARSE_REGEX_DKS);
   g_once (&vtt_rx_once,
       (GThreadFunc) gst_sub_parse_data_format_autodetect_regex_once,
       (gpointer) GST_SUB_PARSE_REGEX_VTT);
 
   mdvd_grx = (GRegex *) mdvd_rx_once.retval;
   subrip_grx = (GRegex *) subrip_rx_once.retval;
   dks_grx = (GRegex *) dks_rx_once.retval;
   vtt_grx = (GRegex *) vtt_rx_once.retval;
 
   if (g_regex_match (mdvd_grx, match_str, 0, NULL)) {
     GST_LOG ("MicroDVD (frame based) format detected");
     return GST_SUB_PARSE_FORMAT_MDVDSUB;
   }
   if (g_regex_match (subrip_grx, match_str, 0, NULL)) {
     GST_LOG ("SubRip (time based) format detected");
     return GST_SUB_PARSE_FORMAT_SUBRIP;
   }
   if (g_regex_match (dks_grx, match_str, 0, NULL)) {
     GST_LOG ("DKS (time based) format detected");
     return GST_SUB_PARSE_FORMAT_DKS;
   }
   if (g_regex_match (vtt_grx, match_str, 0, NULL) == TRUE) {
     GST_LOG ("WebVTT (time based) format detected");
     return GST_SUB_PARSE_FORMAT_VTT;
   }
 
   if (!strncmp (match_str, "FORMAT=TIME", 11)) {
     GST_LOG ("MPSub (time based) format detected");
     return GST_SUB_PARSE_FORMAT_MPSUB;
   }
   if (strstr (match_str, "<SAMI>") != NULL ||
       strstr (match_str, "<sami>") != NULL) {
     GST_LOG ("SAMI (time based) format detected");
     return GST_SUB_PARSE_FORMAT_SAMI;
   }
   /* we're boldly assuming the first subtitle appears within the first hour */
   if (sscanf (match_str, "0:%02u:%02u:", &n1, &n2) == 2 ||
       sscanf (match_str, "0:%02u:%02u=", &n1, &n2) == 2 ||
       sscanf (match_str, "00:%02u:%02u:", &n1, &n2) == 2 ||
       sscanf (match_str, "00:%02u:%02u=", &n1, &n2) == 2 ||
       sscanf (match_str, "00:%02u:%02u,%u=", &n1, &n2, &n3) == 3) {
     GST_LOG ("TMPlayer (time based) format detected");
     return GST_SUB_PARSE_FORMAT_TMPLAYER;
   }
   if (sscanf (match_str, "[%u][%u]", &n1, &n2) == 2) {
     GST_LOG ("MPL2 (time based) format detected");
     return GST_SUB_PARSE_FORMAT_MPL2;
   }
   if (strstr (match_str, "[INFORMATION]") != NULL) {
     GST_LOG ("SubViewer (time based) format detected");
     return GST_SUB_PARSE_FORMAT_SUBVIEWER;
   }
   if (strstr (match_str, "{QTtext}") != NULL) {
     GST_LOG ("QTtext (time based) format detected");
     return GST_SUB_PARSE_FORMAT_QTTEXT;
   }
   /* We assume the LRC file starts immediately */
   if (match_str[0] == '[') {
     gboolean all_lines_good = TRUE;
     gchar **split;
     gchar **ptr;
 
     ptr = split = g_strsplit (match_str, "\n", -1);
     while (*ptr && *(ptr + 1)) {
       gchar *str = *ptr;
       gint len = strlen (str);
 
       if (sscanf (str, "[%u:%02u.%02u]", &n1, &n2, &n3) == 3 ||
           sscanf (str, "[%u:%02u.%03u]", &n1, &n2, &n3) == 3) {
         all_lines_good = TRUE;
-      } else if (str[len - 1] == ']' && strchr (str, ':') != NULL) {
+      } else if (len > 0 && str[len - 1] == ']' && strchr (str, ':') != NULL) {
         all_lines_good = TRUE;
       } else {
         all_lines_good = FALSE;
         break;
       }
 
       ptr++;
     }
     g_strfreev (split);
 
     if (all_lines_good)
       return GST_SUB_PARSE_FORMAT_LRC;
   }
 
   GST_DEBUG ("no subtitle format detected");
   return GST_SUB_PARSE_FORMAT_UNKNOWN;
 }
