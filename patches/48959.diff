commit 608688b3088bb10186700a38b459443d649d6325
Author: Andy Green <andy@warmcat.com>
Date:   Mon Jul 11 17:51:19 2022 +0100

    upng-gzip: fuzz: size temp arrays to worst huff size
    
    https://oss-fuzz.com/testcase-detail/5964400971874304
    
    The original upng code this is based on just sizes the temp buffers for 15,
    but the trees can come in 19, 32, or 288 lengths.  Set the buffer sizes for
    the worst case.
    
    Add some asserts to help catch any further problems more directly.

diff --git a/lib/misc/upng-gzip.c b/lib/misc/upng-gzip.c
index 722fa3a0..a59998a5 100644
--- a/lib/misc/upng-gzip.c
+++ b/lib/misc/upng-gzip.c
@@ -242,54 +242,67 @@ huffman_tree_init(htree_t *tree, huff_t *buffer, uint16_t numcodes,
 static lws_stateful_ret_t
 huffman_tree_create_lengths(htree_t *tree, const unsigned *bitlen)
 {
-	unsigned int tree1d[MAX_SYMBOLS], blcount[MAX_BIT_LENGTH],
-		     nextcode[MAX_BIT_LENGTH + 1];
-	unsigned int bits, n, i, nodefilled = 0, treepos = 0;
+	unsigned int tree1d[NUM_DEFLATE_CODE_SYMBOLS], /* sized to worst */
+		     blcount[NUM_DEFLATE_CODE_SYMBOLS], /* sized to worst */
+		     nextcode[MAX_BIT_LENGTH + 1], bits, n, i,
+		     nodefilled = 0, treepos = 0;
 
 	memset(blcount, 0, sizeof(blcount));
 	memset(nextcode, 0, sizeof(nextcode));
 
-	for (bits = 0; bits < tree->numcodes; bits++)
+	assert(tree->numcodes <= LWS_ARRAY_SIZE(blcount));
+
+	for (bits = 0; bits < tree->numcodes; bits++) {
+		/* any counts exceeding our private buffer length are fatal */
+		if (bitlen[bits] >= LWS_ARRAY_SIZE(blcount))
+			return LWS_SRET_FATAL + 1;
+
 		blcount[bitlen[bits]]++;
+	}
+
+	assert(tree->maxbitlen && tree->maxbitlen - 1u <= LWS_ARRAY_SIZE(blcount));
+	assert(tree->maxbitlen - 1u <= LWS_ARRAY_SIZE(nextcode));
 
 	for (bits = 1; bits <= (unsigned int)tree->maxbitlen; bits++)
 		nextcode[bits] = (nextcode[bits - 1] + blcount[bits - 1]) << 1;
 
+	assert(tree->numcodes <= LWS_ARRAY_SIZE(tree1d));
+
 	for (n = 0; n < tree->numcodes; n++)
 		if (bitlen[n])
 			tree1d[n] = nextcode[bitlen[n]]++;
 
 	for (n = 0; n < (unsigned int)tree->numcodes * 2u; n++)
 		tree->tree2d[n] = EMPTY;
 
 	for (n = 0; n < tree->numcodes; n++) {	/* the codes */
 		for (i = 0; i < bitlen[n]; i++) { /* the bits for this code */
 			uint8_t bit = (uint8_t)((tree1d[n] >>
 						(bitlen[n] - i - 1)) & 1);
 
 			/* check if oversubscribed */
 			if (treepos > tree->numcodes - 2u)
 				return LWS_SRET_FATAL + 1;
 
 			if (tree->tree2d[2 * treepos + bit] == EMPTY) {
 				if (i + 1 == bitlen[n]) { /* ... last bit */
 					tree->tree2d[2 * treepos + bit] = (huff_t)n;
 					treepos = 0;
 				} else {
 					nodefilled++;
 					tree->tree2d[2 * treepos + bit] =
 					  (huff_t)(nodefilled + tree->numcodes);
 					treepos = nodefilled;
 				}
 			} else
 				treepos = (unsigned int)(tree->tree2d[2 * treepos + bit] -
 						tree->numcodes);
 		}
 	}
 
 	for (n = 0; n < tree->numcodes * 2u; n++)
 		if (tree->tree2d[n] == EMPTY)
 			tree->tree2d[n] = 0;
 
 	return LWS_SRET_OK;
 }
