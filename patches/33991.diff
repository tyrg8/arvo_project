commit c7baae72b36acdc24f56ad48d3e859850fdbdc2b
Author: Gábor Csárdi <csardi.gabor@gmail.com>
Date:   Sat Feb 17 21:23:14 2024 +0100

    Fix a buffer overflow (#311)
    
    It happens if raw_str_used underflows and ends up a very large number,
    which is then used as the size of a string.
    
    Closes #285.

diff --git a/src/spss/readstat_sav_read.c b/src/spss/readstat_sav_read.c
index 7f49490..460bf07 100644
--- a/src/spss/readstat_sav_read.c
+++ b/src/spss/readstat_sav_read.c
@@ -682,80 +682,80 @@ static readstat_error_t sav_read_dictionary_termination_record(sav_ctx_t *ctx) {
 static readstat_error_t sav_process_row(unsigned char *buffer, size_t buffer_len, sav_ctx_t *ctx) {
     if (ctx->row_offset) {
         ctx->row_offset--;
         return READSTAT_OK;
     }
 
     readstat_error_t retval = READSTAT_OK;
     double fp_value;
     int offset = 0;
     readstat_off_t data_offset = 0;
     size_t raw_str_used = 0;
     int segment_offset = 0;
     int var_index = 0, col = 0;
     int raw_str_is_utf8 = ctx->input_encoding && !strcmp(ctx->input_encoding, "UTF-8");
 
     while (data_offset < buffer_len && col < ctx->var_index && var_index < ctx->var_index) {
         spss_varinfo_t *col_info = ctx->varinfo[col];
         spss_varinfo_t *var_info = ctx->varinfo[var_index];
         readstat_value_t value = { .type = var_info->type };
         if (offset > 31) {
             retval = READSTAT_ERROR_PARSE;
             goto done;
         }
         if (var_info->type == READSTAT_TYPE_STRING) {
             if (raw_str_used + 8 <= ctx->raw_string_len) {
                 if (raw_str_is_utf8) {
                     /* Skip null bytes, see https://github.com/tidyverse/haven/issues/560  */
                     char c;
                     for (int i=0; i<8; i++)
                         if ((c = buffer[data_offset+i]))
                             ctx->raw_string[raw_str_used++] = c;
                 } else {
                     memcpy(ctx->raw_string + raw_str_used, &buffer[data_offset], 8);
                     raw_str_used += 8;
                 }
             }
             if (++offset == col_info->width) {
                 if (++segment_offset < var_info->n_segments) {
-                    raw_str_used--;
+                    if (raw_str_used > 0) raw_str_used--;
                 }
                 offset = 0;
                 col++;
             }
             if (segment_offset == var_info->n_segments) {
                 if (!ctx->variables[var_info->index]->skip) {
                     retval = readstat_convert(ctx->utf8_string, ctx->utf8_string_len, 
                             ctx->raw_string, raw_str_used, ctx->converter);
                     if (retval != READSTAT_OK)
                         goto done;
                     value.v.string_value = ctx->utf8_string;
                     if (ctx->handle.value(ctx->current_row, ctx->variables[var_info->index],
                                 value, ctx->user_ctx) != READSTAT_HANDLER_OK) {
                         retval = READSTAT_ERROR_USER_ABORT;
                         goto done;
                     }
                 }
                 raw_str_used = 0;
                 segment_offset = 0;
                 var_index += var_info->n_segments;
             }
         } else if (var_info->type == READSTAT_TYPE_DOUBLE) {
             if (!ctx->variables[var_info->index]->skip) {
                 memcpy(&fp_value, &buffer[data_offset], 8);
                 if (ctx->bswap) {
                     fp_value = byteswap_double(fp_value);
                 }
                 value.v.double_value = fp_value;
                 sav_tag_missing_double(&value, ctx);
                 if (ctx->handle.value(ctx->current_row, ctx->variables[var_info->index],
                             value, ctx->user_ctx) != READSTAT_HANDLER_OK) {
                     retval = READSTAT_ERROR_USER_ABORT;
                     goto done;
                 }
             }
             var_index += var_info->n_segments;
             col++;
         }
         data_offset += 8;
     }
     ctx->current_row++;
