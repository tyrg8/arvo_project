commit 3e723ec1776d3734b30d0b5bf6daad86ba908a0a
Author: Luke Wilde <lukew@serenityos.org>
Date:   Sun Feb 7 21:10:42 2021 +0000

    LibTTF: Check if the given offset plus offset table size would overflow
    
    If it does overflow, it would think there was enough data to read in
    table information, when there isn't. This would cause read buffer
    overflows when reading in the table information.
    
    Found by: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=29338&sort=-opened&can=1&q=proj%3Aserenity

diff --git a/Userland/Libraries/LibTTF/Font.cpp b/Userland/Libraries/LibTTF/Font.cpp
index e4236c44e9..39ef6754a2 100644
--- a/Userland/Libraries/LibTTF/Font.cpp
+++ b/Userland/Libraries/LibTTF/Font.cpp
@@ -241,128 +241,133 @@ RefPtr<Font> Font::load_from_memory(ByteBuffer& buffer, unsigned index)
 // FIXME: "loca" and "glyf" are not available for CFF fonts.
 RefPtr<Font> Font::load_from_offset(ByteBuffer&& buffer, u32 offset)
 {
+    if (Checked<u32>::addition_would_overflow(offset, (u32)Sizes::OffsetTable)) {
+        dbgln("Invalid offset in font header");
+        return nullptr;
+    }
+
     if (buffer.size() < offset + (u32)Sizes::OffsetTable) {
         dbgln("Font file too small");
         return nullptr;
     }
 
     Optional<ReadonlyBytes> opt_head_slice = {};
     Optional<ReadonlyBytes> opt_hhea_slice = {};
     Optional<ReadonlyBytes> opt_maxp_slice = {};
     Optional<ReadonlyBytes> opt_hmtx_slice = {};
     Optional<ReadonlyBytes> opt_cmap_slice = {};
     Optional<ReadonlyBytes> opt_loca_slice = {};
     Optional<ReadonlyBytes> opt_glyf_slice = {};
 
     Optional<Head> opt_head = {};
     Optional<Hhea> opt_hhea = {};
     Optional<Maxp> opt_maxp = {};
     Optional<Hmtx> opt_hmtx = {};
     Optional<Cmap> opt_cmap = {};
     Optional<Loca> opt_loca = {};
 
     auto num_tables = be_u16(buffer.offset_pointer(offset + (u32)Offsets::NumTables));
     if (buffer.size() < offset + (u32)Sizes::OffsetTable + num_tables * (u32)Sizes::TableRecord) {
         dbgln("Font file too small");
         return nullptr;
     }
 
     for (auto i = 0; i < num_tables; i++) {
         u32 record_offset = offset + (u32)Sizes::OffsetTable + i * (u32)Sizes::TableRecord;
         u32 tag = be_u32(buffer.offset_pointer(record_offset));
         u32 table_offset = be_u32(buffer.offset_pointer(record_offset + (u32)Offsets::TableRecord_Offset));
         u32 table_length = be_u32(buffer.offset_pointer(record_offset + (u32)Offsets::TableRecord_Length));
 
         if (Checked<u32>::addition_would_overflow(table_offset, table_length)) {
             dbgln("Invalid table offset/length in font.");
             return nullptr;
         }
 
         if (buffer.size() < table_offset + table_length) {
             dbgln("Font file too small");
             return nullptr;
         }
         auto buffer_here = ReadonlyBytes(buffer.offset_pointer(table_offset), table_length);
 
         // Get the table offsets we need.
         if (tag == tag_from_str("head")) {
             opt_head_slice = buffer_here;
         } else if (tag == tag_from_str("hhea")) {
             opt_hhea_slice = buffer_here;
         } else if (tag == tag_from_str("maxp")) {
             opt_maxp_slice = buffer_here;
         } else if (tag == tag_from_str("hmtx")) {
             opt_hmtx_slice = buffer_here;
         } else if (tag == tag_from_str("cmap")) {
             opt_cmap_slice = buffer_here;
         } else if (tag == tag_from_str("loca")) {
             opt_loca_slice = buffer_here;
         } else if (tag == tag_from_str("glyf")) {
             opt_glyf_slice = buffer_here;
         }
     }
 
     if (!opt_head_slice.has_value() || !(opt_head = Head::from_slice(opt_head_slice.value())).has_value()) {
         dbgln("Could not load Head");
         return nullptr;
     }
     auto head = opt_head.value();
 
     if (!opt_hhea_slice.has_value() || !(opt_hhea = Hhea::from_slice(opt_hhea_slice.value())).has_value()) {
         dbgln("Could not load Hhea");
         return nullptr;
     }
     auto hhea = opt_hhea.value();
 
     if (!opt_maxp_slice.has_value() || !(opt_maxp = Maxp::from_slice(opt_maxp_slice.value())).has_value()) {
         dbgln("Could not load Maxp");
         return nullptr;
     }
     auto maxp = opt_maxp.value();
 
     if (!opt_hmtx_slice.has_value() || !(opt_hmtx = Hmtx::from_slice(opt_hmtx_slice.value(), maxp.num_glyphs(), hhea.number_of_h_metrics())).has_value()) {
         dbgln("Could not load Hmtx");
         return nullptr;
     }
     auto hmtx = opt_hmtx.value();
 
     if (!opt_cmap_slice.has_value() || !(opt_cmap = Cmap::from_slice(opt_cmap_slice.value())).has_value()) {
         dbgln("Could not load Cmap");
         return nullptr;
     }
     auto cmap = opt_cmap.value();
 
     if (!opt_loca_slice.has_value() || !(opt_loca = Loca::from_slice(opt_loca_slice.value(), maxp.num_glyphs(), head.index_to_loc_format())).has_value()) {
         dbgln("Could not load Loca");
         return nullptr;
     }
     auto loca = opt_loca.value();
 
     if (!opt_glyf_slice.has_value()) {
         dbgln("Could not load Glyf");
         return nullptr;
     }
     auto glyf = Glyf(opt_glyf_slice.value());
 
     // Select cmap table. FIXME: Do this better. Right now, just looks for platform "Windows"
     // and corresponding encoding "Unicode full repertoire", or failing that, "Unicode BMP"
     for (u32 i = 0; i < cmap.num_subtables(); i++) {
         auto opt_subtable = cmap.subtable(i);
         if (!opt_subtable.has_value()) {
             continue;
         }
         auto subtable = opt_subtable.value();
         if (subtable.platform_id() == Cmap::Subtable::Platform::Windows) {
             if (subtable.encoding_id() == (u16)Cmap::Subtable::WindowsEncoding::UnicodeFullRepertoire) {
                 cmap.set_active_index(i);
                 break;
             }
             if (subtable.encoding_id() == (u16)Cmap::Subtable::WindowsEncoding::UnicodeBMP) {
                 cmap.set_active_index(i);
                 break;
             }
         }
     }
 
     return adopt(*new Font(move(buffer), move(head), move(hhea), move(maxp), move(hmtx), move(cmap), move(loca), move(glyf)));
 }
