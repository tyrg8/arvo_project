commit 97f2d9cf5cdaee655e5a5527c78f42715b61ad51
Author: Riccardo Schirone <ret2libc@users.noreply.github.com>
Date:   Mon Jun 8 13:26:49 2020 +0200

    Fix elf reloc crash (#17004)
    
    * Fix wrong computation in get_next_not_analysed_offset
    
    * Uses virtual address in read_reloc and use elf_v2p to convert it to
      the right offset in the file, instead of relying on base->baddr
      directly. Dynamic info contain virtual address, not offsets.
    * get_next_not_analyzed_offset should return the offset starting from
      section_vaddr, to ensure the offset can never be decremented.
    
    * use num_relocs to possibly limit the number of stored relocations
    
    Using num_relocs works both as a defensive measure in case the initial
    size computed by get_num_relocs_approx is wrong and as a way to limit
    the number of relocation entries read by the parser, in case the
    relocation section is so big that we can't allocate enough memory
    (probably a fake section).
    
    * Add support for AARCH64 reloc entries

diff --git a/libr/bin/format/elf/elf.c b/libr/bin/format/elf/elf.c
index f116704b8e..61e259a7bb 100644
--- a/libr/bin/format/elf/elf.c
+++ b/libr/bin/format/elf/elf.c
@@ -2562,31 +2562,36 @@ static void fix_rva_and_offset(ELFOBJ *bin, RBinElfReloc *r, size_t pos) {
 	}
 }
 
-static bool read_reloc(ELFOBJ *bin, RBinElfReloc *r, Elf_(Xword) rel_mode, ut64 offset) {
+static bool read_reloc(ELFOBJ *bin, RBinElfReloc *r, Elf_(Xword) rel_mode, ut64 vaddr) {
+	ut64 offset = Elf_(r_bin_elf_v2p_new) (bin, vaddr);
+	if (offset == UT64_MAX) {
+		return false;
+	}
+
 	size_t size_struct = get_size_rel_mode (rel_mode);
 
 	ut8 buf[sizeof (Elf_(Rela))] = { 0 };
 	int res = r_buf_read_at (bin->b, offset, buf, size_struct);
 	if (res != size_struct) {
 		return false;
 	}
 
 	size_t i = 0;
 	Elf_(Rela) reloc_info;
 
 	reloc_info.r_offset = READWORD (buf, i);
 	reloc_info.r_info = READWORD (buf, i);
 
 	if (rel_mode == DT_RELA) {
 		reloc_info.r_addend = READWORD (buf, i);
 		r->addend = reloc_info.r_addend;
 	}
 
 	r->rel_mode = rel_mode;
 	r->last = 0;
 	r->offset = reloc_info.r_offset;
 	r->sym = ELF_R_SYM (reloc_info.r_info);
 	r->type = ELF_R_TYPE (reloc_info.r_info);
 
 	return true;
 }
@@ -2650,85 +2655,84 @@ static size_t get_num_relocs_approx(ELFOBJ *bin) {
 	return get_num_relocs_dynamic (bin) + get_num_relocs_sections (bin);
 }
 
-static size_t populate_relocs_record_from_dynamic(ELFOBJ *bin, RBinElfReloc *relocs, size_t pos) {
+static size_t populate_relocs_record_from_dynamic(ELFOBJ *bin, RBinElfReloc *relocs, size_t pos, size_t num_relocs) {
 	size_t offset;
-	size_t i = 0;
 	size_t size = get_size_rel_mode (bin->dyn_info.dt_pltrel);
 
-	for (offset = 0; offset < bin->dyn_info.dt_pltrelsz; offset += size) {
-		read_reloc (bin, relocs + pos, bin->dyn_info.dt_pltrel,
-				bin->dyn_info.dt_jmprel + offset - bin->baddr);
+	for (offset = 0; offset < bin->dyn_info.dt_pltrelsz && pos < num_relocs; offset += size, pos++) {
+		if (!read_reloc (bin, relocs + pos, bin->dyn_info.dt_pltrel, bin->dyn_info.dt_jmprel + offset)) {
+			break;
+		}
 		fix_rva_and_offset_exec_file (bin, relocs + pos);
-		pos++;
-		++i;
 	}
 
-	for (offset = 0; offset < bin->dyn_info.dt_relasz; offset += bin->dyn_info.dt_relaent) {
-		read_reloc (bin, relocs + pos, DT_RELA, bin->dyn_info.dt_rela + offset - bin->baddr);
+	for (offset = 0; offset < bin->dyn_info.dt_relasz && pos < num_relocs; offset += bin->dyn_info.dt_relaent, pos++) {
+		if (!read_reloc (bin, relocs + pos, DT_RELA, bin->dyn_info.dt_rela + offset)) {
+			break;
+		}
 		fix_rva_and_offset_exec_file (bin, relocs + pos);
-		pos++;
 	}
 
-	for (offset = 0; offset < bin->dyn_info.dt_relsz; offset += bin->dyn_info.dt_relent) {
-		read_reloc (bin, relocs + pos, DT_REL, bin->dyn_info.dt_rel + offset - bin->baddr);
+	for (offset = 0; offset < bin->dyn_info.dt_relsz && pos < num_relocs; offset += bin->dyn_info.dt_relent, pos++) {
+		if (!read_reloc (bin, relocs + pos, DT_REL, bin->dyn_info.dt_rel + offset)) {
+			break;
+		}
 		fix_rva_and_offset_exec_file (bin, relocs + pos);
-		pos++;
 	}
 
 	return pos;
 }
 
-static size_t get_next_not_analysed_offset(ELFOBJ *bin, size_t section_offset, size_t offset, size_t base_addr) {
+static size_t get_next_not_analysed_offset(ELFOBJ *bin, size_t section_vaddr, size_t offset) {
+	size_t gvaddr = section_vaddr + offset;
 
-	size_t g_offset = section_offset + offset;
-
-	if (bin->dyn_info.dt_rela != ELF_ADDR_MAX && bin->dyn_info.dt_rela - base_addr <= g_offset
-		&& g_offset < bin->dyn_info.dt_rela + bin->dyn_info.dt_relasz - base_addr) {
-		return bin->dyn_info.dt_rela + bin->dyn_info.dt_relasz - g_offset - base_addr;
+	if (bin->dyn_info.dt_rela != ELF_ADDR_MAX && bin->dyn_info.dt_rela <= gvaddr
+		&& gvaddr < bin->dyn_info.dt_rela + bin->dyn_info.dt_relasz) {
+		return bin->dyn_info.dt_rela + bin->dyn_info.dt_relasz - section_vaddr;
 	}
 
-	if (bin->dyn_info.dt_rel != ELF_ADDR_MAX && bin->dyn_info.dt_rel - base_addr <= g_offset
-		&& g_offset < bin->dyn_info.dt_rel + bin->dyn_info.dt_relsz - base_addr) {
-		return bin->dyn_info.dt_rel + bin->dyn_info.dt_relsz - g_offset - base_addr;
+	if (bin->dyn_info.dt_rel != ELF_ADDR_MAX && bin->dyn_info.dt_rel <= gvaddr
+		&& gvaddr < bin->dyn_info.dt_rel + bin->dyn_info.dt_relsz) {
+		return bin->dyn_info.dt_rel + bin->dyn_info.dt_relsz - section_vaddr;
 	}
 
-	if (bin->dyn_info.dt_jmprel != ELF_ADDR_MAX && bin->dyn_info.dt_jmprel - base_addr <= g_offset
-		&& g_offset < bin->dyn_info.dt_jmprel + bin->dyn_info.dt_pltrelsz - base_addr) {
-		return bin->dyn_info.dt_jmprel + bin->dyn_info.dt_pltrelsz - g_offset - base_addr;
+	if (bin->dyn_info.dt_jmprel != ELF_ADDR_MAX && bin->dyn_info.dt_jmprel <= gvaddr
+		&& gvaddr < bin->dyn_info.dt_jmprel + bin->dyn_info.dt_pltrelsz) {
+		return bin->dyn_info.dt_jmprel + bin->dyn_info.dt_pltrelsz - section_vaddr;
 	}
 
 	return offset;
 }
 
-static size_t populate_relocs_record_from_section(ELFOBJ *bin, RBinElfReloc *relocs, size_t pos) {
+static size_t populate_relocs_record_from_section(ELFOBJ *bin, RBinElfReloc *relocs, size_t pos, size_t num_relocs) {
 	size_t size, i, j;
 	Elf_(Xword) rel_mode;
 
 	if (!bin->g_sections) {
 		return pos;
 	}
 
 	for (i = 0; !bin->g_sections[i].last; i++) {
 		rel_mode = get_section_mode (bin, i);
 
 		if (!is_reloc_section (rel_mode) || bin->g_sections[i].size > bin->size || bin->g_sections[i].offset > bin->size) {
 			continue;
 		}
 
 		size = get_size_rel_mode (rel_mode);
 
-		for (j = get_next_not_analysed_offset (bin, bin->g_sections[i].offset, 0, bin->baddr);
-			j < bin->g_sections[i].size;
-			j = get_next_not_analysed_offset (bin, bin->g_sections[i].offset, j + size, bin->baddr)) {
+		for (j = get_next_not_analysed_offset (bin, bin->g_sections[i].rva, 0);
+			j < bin->g_sections[i].size && pos < num_relocs;
+			j = get_next_not_analysed_offset (bin, bin->g_sections[i].rva, j + size)) {
 
-			if (!read_reloc (bin, relocs + pos, rel_mode, bin->g_sections[i].offset + j)) {
+			if (!read_reloc (bin, relocs + pos, rel_mode, bin->g_sections[i].rva + j)) {
 				break;
 			}
 
 			fix_rva_and_offset (bin, relocs + pos, i);
 			pos++;
 		}
 	}
 
 	return pos;
 }
@@ -2736,14 +2740,23 @@ static size_t populate_relocs_record_from_section(ELFOBJ *bin, RBinElfReloc *rel
 static RBinElfReloc *populate_relocs_record(ELFOBJ *bin) {
 	size_t i = 0;
 	size_t num_relocs = get_num_relocs_approx (bin);
-	RBinElfReloc *relocs = calloc (num_relocs + 1, sizeof (RBinElfReloc));
+	RBinElfReloc *relocs = R_NEWS0 (RBinElfReloc, num_relocs + 1);
+	if (!relocs) {
+		// In case we can't allocate enough memory for all the claimed
+		// relocation entries, try to parse only the ones specified in
+		// the dynamic segment.
+		num_relocs = get_num_relocs_dynamic (bin);
+		relocs = R_NEWS0 (RBinElfReloc, num_relocs + 1);
+		if (!relocs) {
+			return NULL;
+		}
+	}
 
-	i = populate_relocs_record_from_dynamic (bin, relocs, i);
-	i = populate_relocs_record_from_section (bin, relocs, i);
+	i = populate_relocs_record_from_dynamic (bin, relocs, i, num_relocs);
+	i = populate_relocs_record_from_section (bin, relocs, i, num_relocs);
 	relocs[i].last = 1;
 
 	bin->g_reloc_num = i;
-
 	return relocs;
 }
 
diff --git a/libr/bin/p/bin_elf.inc b/libr/bin/p/bin_elf.inc
index 64ff8b20e6..b90529ee54 100644
--- a/libr/bin/p/bin_elf.inc
+++ b/libr/bin/p/bin_elf.inc
@@ -570,90 +570,100 @@ static RList* libs(RBinFile *bf) {
 static RBinReloc *reloc_convert(struct Elf_(r_bin_elf_obj_t) *bin, RBinElfReloc *rel, ut64 GOT) {
 	r_return_val_if_fail (bin && rel, NULL);
 
 	ut64 B = bin->baddr;
 	ut64 P = rel->rva; // rva has taken baddr into account
 	RBinReloc *r = R_NEW0 (RBinReloc);
 	if (!r) {
 		return r;
 	}
 	r->import = NULL;
 	r->symbol = NULL;
 	r->is_ifunc = false;
 	r->addend = rel->addend;
 	if (rel->sym) {
 		if (rel->sym < bin->imports_by_ord_size && bin->imports_by_ord[rel->sym]) {
 			r->import = bin->imports_by_ord[rel->sym];
 		} else if (rel->sym < bin->symbols_by_ord_size && bin->symbols_by_ord[rel->sym]) {
 			r->symbol = bin->symbols_by_ord[rel->sym];
 		}
 	}
 	r->vaddr = rel->rva;
 	r->paddr = rel->offset;
 
 	#define SET(T) r->type = R_BIN_RELOC_ ## T; r->additive = 0; return r
 	#define ADD(T, A) r->type = R_BIN_RELOC_ ## T; r->addend += A; r->additive = rel->rel_mode == DT_RELA; return r
 
 	switch (bin->ehdr.e_machine) {
 	case EM_386: switch (rel->type) {
 		case R_386_NONE:     break; // malloc then free. meh. then again, there's no real world use for _NONE.
 		case R_386_32:       ADD(32, 0);
 		case R_386_PC32:     ADD(32,-P);
 		case R_386_GLOB_DAT: SET(32);
 		case R_386_JMP_SLOT: SET(32);
 		case R_386_RELATIVE: ADD(32, B);
 		case R_386_GOTOFF:   ADD(32,-GOT);
 		case R_386_GOTPC:    ADD(32, GOT-P);
 		case R_386_16:       ADD(16, 0);
 		case R_386_PC16:     ADD(16,-P);
 		case R_386_8:        ADD(8,  0);
 		case R_386_PC8:      ADD(8, -P);
 		case R_386_COPY:     ADD(64, 0); // XXX: copy symbol at runtime
 		case R_386_IRELATIVE: r->is_ifunc = true; SET(32);
 		default: break; //eprintf("TODO(eddyb): uninmplemented ELF/x86 reloc type %i\n", rel->type);
 		}
 		break;
 	case EM_X86_64: switch (rel->type) {
 		case R_X86_64_NONE:	break; // malloc then free. meh. then again, there's no real world use for _NONE.
 		case R_X86_64_64:	ADD(64, 0);
 		case R_X86_64_PLT32:	ADD(32,-P /* +L */);
 		case R_X86_64_GOT32:	ADD(32, GOT);
 		case R_X86_64_PC32:	ADD(32,-P);
 		case R_X86_64_GLOB_DAT: r->vaddr -= rel->sto; SET(64);
 		case R_X86_64_JUMP_SLOT: r->vaddr -= rel->sto; SET(64);
 		case R_X86_64_RELATIVE:	ADD(64, B);
 		case R_X86_64_32:	ADD(32, 0);
 		case R_X86_64_32S:	ADD(32, 0);
 		case R_X86_64_16:	ADD(16, 0);
 		case R_X86_64_PC16:	ADD(16,-P);
 		case R_X86_64_8:	ADD(8,  0);
 		case R_X86_64_PC8:	ADD(8, -P);
 		case R_X86_64_GOTPCREL:	ADD(64, GOT-P);
 		case R_X86_64_COPY:	ADD(64, 0); // XXX: copy symbol at runtime
 		case R_X86_64_IRELATIVE: r->is_ifunc = true; SET(64);
 		default: break; ////eprintf("TODO(eddyb): uninmplemented ELF/x64 reloc type %i\n", rel->type);
 		}
 		break;
 	case EM_ARM: switch (rel->type) {
 		case R_ARM_NONE:	break; // malloc then free. meh. then again, there's no real world use for _NONE.
 		case R_ARM_ABS32:	ADD(32, 0);
 		case R_ARM_REL32:	ADD(32,-P);
 		case R_ARM_ABS16:	ADD(16, 0);
 		case R_ARM_ABS8:	ADD(8,  0);
 		case R_ARM_SBREL32:	ADD(32, -B);
 		case R_ARM_GLOB_DAT:	ADD(32, 0);
 		case R_ARM_JUMP_SLOT:	ADD(32, 0);
 		case R_ARM_RELATIVE:	ADD(32, B);
 		case R_ARM_GOTOFF:	ADD(32,-GOT);
 		default: ADD(32,GOT); break; // reg relocations
 		 ////eprintf("TODO(eddyb): uninmplemented ELF/ARM reloc type %i\n", rel->type);
 		}
 		break;
+	case EM_AARCH64: switch (rel->type) {
+		case R_AARCH64_NONE: break;
+		case R_AARCH64_ABS32: ADD (32, 0);
+		case R_AARCH64_ABS16: ADD (16, 0);
+		case R_AARCH64_GLOB_DAT: SET (64);
+		case R_AARCH64_JUMP_SLOT: SET (64);
+		case R_AARCH64_RELATIVE: ADD (64, B);
+		default: break; // reg relocations
+		}
+		break;
 	default: break;
 	}
 
 	#undef SET
 	#undef ADD
 
 	free (r);
 	return 0;
 }
diff --git a/test/db/formats/elf/elf-relro b/test/db/formats/elf/elf-relro
index 947ab72962..1c9b2c961d 100644
--- a/test/db/formats/elf/elf-relro
+++ b/test/db/formats/elf/elf-relro
@@ -1,3 +1,68 @@
+NAME=ELF: arm64 relocs crashing
+FILE=-
+CMDS=!!rabin2 -qzz bins/elf/librsjni_androix.so~?
+EXPECT=<<EOF
+549
+EOF
+RUN
+
+NAME=ELF: arm64 relocs crashing
+FILE=bins/elf/librsjni_androix.so
+CMDS=ir
+EXPECT=<<EOF
+[Relocations]
+
+vaddr      paddr      type   name
+---------------------------------
+0x0000e210 0x0000e210 SET_64 __cxa_finalize
+0x0000e218 0x0000e218 SET_64 __stack_chk_fail
+0x0000e220 0x0000e220 SET_64 dlopen
+0x0000e228 0x0000e228 SET_64 loadSymbols(void*, dispatchTable&, int)
+0x0000e230 0x0000e230 SET_64 dlerror
+0x0000e238 0x0000e238 SET_64 __android_log_print
+0x0000e240 0x0000e240 SET_64 dlclose
+0x0000e248 0x0000e248 SET_64 loadIOSuppSyms(void*, ioSuppDT&)
+0x0000e250 0x0000e250 SET_64 malloc
+0x0000e258 0x0000e258 SET_64 calloc
+0x0000e260 0x0000e260 SET_64 free
+0x0000e268 0x0000e268 SET_64 AndroidBitmap_lockPixels
+0x0000e270 0x0000e270 SET_64 AndroidBitmap_getInfo
+0x0000e278 0x0000e278 SET_64 AndroidBitmap_unlockPixels
+0x0000e280 0x0000e280 SET_64 memcpy
+0x0000e288 0x0000e288 SET_64 memset
+0x0000e290 0x0000e290 SET_64 dlsym
+
+
+17 relocations
+EOF
+RUN
+
+NAME=ELF: arm64 imports crashing
+FILE=bins/elf/librsjni_androix.so
+CMDS=ii
+EXPECT=<<EOF
+[Imports]
+nth vaddr      bind   type lib name
+-----------------------------------
+1   0x0000b7c0 GLOBAL FUNC     __cxa_finalize
+2   0x0000b880 GLOBAL FUNC     AndroidBitmap_getInfo
+3   0x0000b870 GLOBAL FUNC     AndroidBitmap_lockPixels
+4   0x0000b890 GLOBAL FUNC     AndroidBitmap_unlockPixels
+5   0x0000b810 GLOBAL FUNC     __android_log_print
+6   0x0000b7d0 GLOBAL FUNC     __stack_chk_fail
+7   0x0000b850 GLOBAL FUNC     calloc
+8   0x0000b820 GLOBAL FUNC     dlclose
+9   0x0000b800 GLOBAL FUNC     dlerror
+10  0x0000b7e0 GLOBAL FUNC     dlopen
+11  0x0000b8c0 GLOBAL FUNC     dlsym
+12  0x0000b860 GLOBAL FUNC     free
+13  0x0000b840 GLOBAL FUNC     malloc
+14  0x0000b8a0 GLOBAL FUNC     memcpy
+15  0x0000b8b0 GLOBAL FUNC     memset
+
+EOF
+RUN
+
 NAME=ELF: corkami elf-relro - sections
 FILE=bins/elf/analysis/elf-relro
 CMDS=iS~rel
