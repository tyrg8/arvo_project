commit b81e313c5177b4abcd049192f857caed8d804b18
Author: Greg Landrum <greg.landrum@gmail.com>
Date:   Sat Dec 12 05:50:29 2020 +0100

    Fix #3631 (#3632)
    
    * Fixes #3631
    
    Still worth investigating *why* this happened.
    
    * a bit of simplification/refactoring

diff --git a/Code/GraphMol/Chirality.cpp b/Code/GraphMol/Chirality.cpp
index 8e021c2e5..938814f5b 100644
--- a/Code/GraphMol/Chirality.cpp
+++ b/Code/GraphMol/Chirality.cpp
@@ -884,166 +884,166 @@ void buildCIPInvariants(const ROMol &mol, DOUBLE_VECT &res) {
 void iterateCIPRanks(const ROMol &mol, const DOUBLE_VECT &invars,
                      UINT_VECT &ranks, bool seedWithInvars) {
   PRECONDITION(invars.size() == mol.getNumAtoms(), "bad invars size");
   PRECONDITION(ranks.size() >= mol.getNumAtoms(), "bad ranks size");
 
   unsigned int numAtoms = mol.getNumAtoms();
   CIP_ENTRY_VECT cipEntries(numAtoms);
-  for (auto& vec : cipEntries) {
+  for (auto &vec : cipEntries) {
     vec.reserve(16);
   }
 #ifdef VERBOSE_CANON
   BOOST_LOG(rdDebugLog) << "invariants:" << std::endl;
   for (unsigned int i = 0; i < numAtoms; i++) {
     BOOST_LOG(rdDebugLog) << i << ": " << invars[i] << std::endl;
   }
 #endif
 
   // rank those:
   Rankers::rankVect(invars, ranks);
 #ifdef VERBOSE_CANON
   BOOST_LOG(rdDebugLog) << "initial ranks:" << std::endl;
   for (unsigned int i = 0; i < numAtoms; ++i) {
     BOOST_LOG(rdDebugLog) << i << ": " << ranks[i] << std::endl;
   }
 #endif
   // Start each atom's rank vector with its atomic number:
   //  Note: in general one should avoid the temptation to
   //  use invariants here, those lead to incorrect answers
   for (unsigned int i = 0; i < numAtoms; i++) {
     if (seedWithInvars) {
       cipEntries[i].push_back(static_cast<int>(invars[i]));
     } else {
       cipEntries[i].push_back(mol[i]->getAtomicNum());
       cipEntries[i].push_back(static_cast<int>(ranks[i]));
     }
   }
 
   // Loop until either:
   //   1) all classes are uniquified
   //   2) the number of ranks doesn't change from one iteration to
   //      the next
   //   3) we've gone through maxIts times
   //      maxIts is calculated by dividing the number of atoms
   //      by 2. That's a pessimal version of the
   //      maximum number of steps required for two atoms to
   //      "feel" each other (each influences one additional
   //      neighbor shell per iteration).
   unsigned int maxIts = numAtoms / 2 + 1;
   unsigned int numIts = 0;
   int lastNumRanks = -1;
   unsigned int numRanks = *std::max_element(ranks.begin(), ranks.end()) + 1;
   std::vector<unsigned int> counts(ranks.size());
   std::vector<unsigned int> updatedNbrIdxs;
   updatedNbrIdxs.reserve(8);
   while (numRanks < numAtoms && numIts < maxIts &&
          (lastNumRanks < 0 ||
           static_cast<unsigned int>(lastNumRanks) < numRanks)) {
     unsigned int longestEntry = 0;
     // ----------------------------------------------------
     //
     // for each atom, get a sorted list of its neighbors' ranks:
     //
     for (unsigned int index = 0; index < numAtoms; ++index) {
       // Note: counts is cleaned up when we drain into cipEntries.
       updatedNbrIdxs.clear();
 
       // start by pushing on our neighbors' ranks:
       ROMol::OEDGE_ITER beg, end;
       boost::tie(beg, end) = mol.getAtomBonds(mol[index]);
       while (beg != end) {
         const Bond *bond = mol[*beg];
         ++beg;
         unsigned int nbrIdx = bond->getOtherAtomIdx(index);
         updatedNbrIdxs.push_back(nbrIdx);
 
         // put the neighbor in 2N times where N is the bond order as a double.
         // this is to treat aromatic linkages on fair footing. i.e. at least in
         // the first iteration --c(:c):c and --C(=C)-C should look the same.
         // this was part of issue 3009911
 
         // a special case for chiral phosphorus compounds
         // (this was leading to incorrect assignment of R/S labels ):
         bool isChiralPhosphorusSpecialCase = false;
         if (bond->getBondType() == Bond::DOUBLE) {
           const Atom *nbr = mol[nbrIdx];
           if (nbr->getAtomicNum() == 15) {
             unsigned int nbrDeg = nbr->getDegree();
             isChiralPhosphorusSpecialCase = nbrDeg == 3 || nbrDeg == 4;
           }
         };
 
         // general justification of this is:
         // Paragraph 2.2. in the 1966 article is "Valence-Bond Conventions:
         // Multiple-Bond Unsaturation and Aromaticity". It contains several
         // conventions of which convention (b) is the one applying here:
         // "(b) Contributions by d orbitals to bonds of quadriligant atoms are
         // neglected."
         // FIX: this applies to more than just P
         if (isChiralPhosphorusSpecialCase) {
           counts[nbrIdx] += 1;
         } else {
           counts[nbrIdx] += getTwiceBondType(*bond);
         }
       }
 
       // For each of our neighbors' ranks weighted by bond type, copy it N times
       // to our cipEntry in reverse rank order, where N is the weight.
       if (updatedNbrIdxs.size() > 1) {  // compare vs 1 for performance.
         std::sort(std::begin(updatedNbrIdxs), std::end(updatedNbrIdxs),
                   [&ranks](unsigned int idx1, unsigned int idx2) {
                     return ranks[idx1] > ranks[idx2];
                   });
       }
-      auto& cipEntry = cipEntries[index];
+      auto &cipEntry = cipEntries[index];
       for (auto nbrIdx : updatedNbrIdxs) {
         unsigned int count = counts[nbrIdx];
         cipEntry.insert(cipEntry.end(), count, ranks[nbrIdx] + 1);
         counts[nbrIdx] = 0;
       }
       // add a zero for each coordinated H as long as we're not a query atom
       if (!mol[index]->hasQuery()) {
         cipEntry.insert(cipEntry.end(), mol[index]->getTotalNumHs(), 0);
       }
 
       if (cipEntry.size() > longestEntry) {
         longestEntry = rdcast<unsigned int>(cipEntry.size());
       }
     }
     // ----------------------------------------------------
     //
     // pad the entries so that we compare rounds to themselves:
     //
     for (unsigned int index = 0; index < numAtoms; ++index) {
       auto sz = rdcast<unsigned int>(cipEntries[index].size());
       if (sz < longestEntry) {
         cipEntries[index].insert(cipEntries[index].end(), longestEntry - sz,
                                  -1);
       }
     }
     // ----------------------------------------------------
     //
     // sort the new ranks and update the list of active indices:
     //
     lastNumRanks = numRanks;
 
     Rankers::rankVect(cipEntries, ranks);
     numRanks = *std::max_element(ranks.begin(), ranks.end()) + 1;
 
     // now truncate each vector and stick the rank at the end
     for (unsigned int i = 0; i < numAtoms; ++i) {
       cipEntries[i][numIts + 1] = ranks[i];
       cipEntries[i].erase(cipEntries[i].begin() + numIts + 2,
                           cipEntries[i].end());
     }
 
     ++numIts;
 #ifdef VERBOSE_CANON
     BOOST_LOG(rdDebugLog) << "strings and ranks:" << std::endl;
     for (unsigned int i = 0; i < numAtoms; i++) {
       BOOST_LOG(rdDebugLog) << i << ": " << ranks[i] << " > ";
       debugVect(cipEntries[i]);
     }
 #endif
   }
 }
 // Figure out the CIP ranks for the atoms of a molecule
@@ -1178,70 +1178,75 @@ void findAtomNeighborsHelper(const ROMol &mol, const Atom *atom,
 // conditions for an atom to be a candidate for ring stereochem:
 //   1) two non-ring neighbors that have different ranks
 //   2) one non-ring neighbor and two ring neighbors (the ring neighbors will
 //      have the same rank)
 //   3) four ring neighbors with three different ranks
 //   4) three ring neighbors with two different ranks
 //     example for this last one: C[C@H]1CC2CCCC3CCCC(C1)[C@@H]23
+// Note that N atoms are only candidates if they are in a 3-ring
 bool atomIsCandidateForRingStereochem(const ROMol &mol, const Atom *atom) {
   PRECONDITION(atom, "bad atom");
   bool res = false;
   std::set<unsigned int> nbrRanks;
   if (!atom->getPropIfPresent(common_properties::_ringStereochemCand, res)) {
     const RingInfo *ringInfo = mol.getRingInfo();
     if (ringInfo->isInitialized() && ringInfo->numAtomRings(atom->getIdx())) {
+      if (atom->getAtomicNum() == 7 &&
+          !ringInfo->isAtomInRingOfSize(atom->getIdx(), 3)) {
+        return false;
+      }
       ROMol::OEDGE_ITER beg, end;
       boost::tie(beg, end) = mol.getAtomBonds(atom);
       std::vector<const Atom *> nonRingNbrs;
       std::vector<const Atom *> ringNbrs;
       while (beg != end) {
         const Bond *bond = mol[*beg];
         if (!ringInfo->numBondRings(bond->getIdx())) {
           nonRingNbrs.push_back(bond->getOtherAtom(atom));
         } else {
           const Atom *nbr = bond->getOtherAtom(atom);
           ringNbrs.push_back(nbr);
           unsigned int rnk = 0;
           nbr->getPropIfPresent(common_properties::_CIPRank, rnk);
           nbrRanks.insert(rnk);
         }
         ++beg;
       }
       unsigned int rank1 = 0, rank2 = 0;
       switch (nonRingNbrs.size()) {
         case 2:
           if (nonRingNbrs[0]->getPropIfPresent(common_properties::_CIPRank,
                                                rank1) &&
               nonRingNbrs[1]->getPropIfPresent(common_properties::_CIPRank,
                                                rank2)) {
             if (rank1 == rank2) {
               res = false;
             } else {
               res = true;
             }
           }
           break;
         case 1:
           if (ringNbrs.size() >= 2) {
             res = true;
           }
           break;
         case 0:
           if (ringNbrs.size() == 4 && nbrRanks.size() == 3) {
             res = true;
           } else if (ringNbrs.size() == 3 && nbrRanks.size() == 2) {
             res = true;
           } else {
             res = false;
           }
           break;
         default:
           res = false;
       }
     }
     atom->setProp(common_properties::_ringStereochemCand, res, 1);
   }
   return res;
 }
 
 // finds all possible chiral special cases.
 // at the moment this is just candidates for ring stereochemistry
@@ -1384,160 +1389,161 @@ void findChiralAtomSpecialCases(ROMol &mol,
 std::pair<bool, bool> isAtomPotentialChiralCenter(
     const Atom *atom, const ROMol &mol, const UINT_VECT &ranks,
     Chirality::INT_PAIR_VECT &nbrs) {
   // loop over all neighbors and form a decorated list of their
   // ranks:
   bool legalCenter = true;
   bool hasDupes = false;
 
   if (atom->getTotalDegree() > 4) {
     // we only know tetrahedral chirality
     legalCenter = false;
   } else {
-    boost::dynamic_bitset<> codesSeen(mol.getNumAtoms());
-    ROMol::OEDGE_ITER beg, end;
-    boost::tie(beg, end) = mol.getAtomBonds(atom);
-    while (beg != end) {
-      unsigned int otherIdx = mol[*beg]->getOtherAtom(atom)->getIdx();
-      CHECK_INVARIANT(ranks[otherIdx] < mol.getNumAtoms(),
-                      "CIP rank higher than the number of atoms.");
-      // watch for neighbors with duplicate ranks, which would mean
-      // that we cannot be chiral:
-      if (codesSeen[ranks[otherIdx]]) {
-        // we've already seen this code, it's a dupe
-        hasDupes = true;
-        break;
-      }
-      codesSeen[ranks[otherIdx]] = 1;
-      nbrs.push_back(std::make_pair(ranks[otherIdx], mol[*beg]->getIdx()));
-      ++beg;
-    }
-
-    // figure out if this is a legal chiral center or not:
-    if (!hasDupes) {
-      if (nbrs.size() < 3 &&
-          (atom->getAtomicNum() != 15 && atom->getAtomicNum() != 33)) {
-        // less than three neighbors is never stereogenic
-        // unless it is a phosphine/arsine with implicit H
-        legalCenter = false;
+    // cases we can exclude immediately without having to look at neighbors
+    // ranks:
+    if (atom->getTotalDegree() < 3) {
+      legalCenter = false;
+    } else if (atom->getDegree() < 3 &&
+               (atom->getAtomicNum() != 15 && atom->getAtomicNum() != 33)) {
+      // less than three neighbors is never stereogenic
+      // unless it is a phosphine/arsine with implicit H (this is from InChI)
+      legalCenter = false;
+    } else if (atom->getDegree() == 3 && atom->getTotalNumHs() != 1) {
+      // assume something that's really three coordinate isn't potentially
+      // chiral, then look for exceptions
+      legalCenter = false;
+      if (atom->getAtomicNum() == 7) {
+        if (mol.getRingInfo()->isAtomInRingOfSize(atom->getIdx(), 3)) {
+          // three-coordinate N is only stereogenic if it's in a 3-ring (this is
+          // from InChI)
+          legalCenter = true;
+        }
       } else if (atom->getAtomicNum() == 15 || atom->getAtomicNum() == 33) {
-        // from logical flow: nbrs.size is 3 or 4, or 2 (implicit H)
-        // Since InChI Software v. 1.02-standard (2009), phosphines and arsines
+        // three-coordinate phosphines and arsines
         // are always treated as stereogenic even with H atom neighbors.
-        // Accept automatically.
+        // (this is from InChI)
         legalCenter = true;
-      } else if (nbrs.size() == 3) {
-        // three-coordinate with a single H we'll accept automatically:
-        if (atom->getTotalNumHs() != 1) {
-          // otherwise we default to not being a legal center
-          legalCenter = false;
-          // but there are a few special cases we'll accept
-          // sulfur or selenium with either a positive charge or a double
-          // bond:
-          if ((atom->getAtomicNum() == 16 || atom->getAtomicNum() == 34) &&
-              (atom->getExplicitValence() == 4 ||
-               (atom->getExplicitValence() == 3 &&
-                atom->getFormalCharge() == 1))) {
-            legalCenter = true;
-          } else if (atom->getAtomicNum() == 7 &&
-                     mol.getRingInfo()->isAtomInRingOfSize(atom->getIdx(), 3)) {
-            // N in a three-membered ring is another one of the InChI special
-            // cases
-            legalCenter = true;
-          }
+      } else if (atom->getAtomicNum() == 16 || atom->getAtomicNum() == 34) {
+        if (atom->getExplicitValence() == 4 ||
+            (atom->getExplicitValence() == 3 && atom->getFormalCharge() == 1)) {
+          // we also accept sulfur or selenium with either a positive charge
+          // or a double bond:
+          legalCenter = true;
         }
       }
     }
+
+    if (legalCenter) {
+      boost::dynamic_bitset<> codesSeen(mol.getNumAtoms());
+      ROMol::OEDGE_ITER beg, end;
+      boost::tie(beg, end) = mol.getAtomBonds(atom);
+      while (beg != end) {
+        unsigned int otherIdx = mol[*beg]->getOtherAtom(atom)->getIdx();
+        CHECK_INVARIANT(ranks[otherIdx] < mol.getNumAtoms(),
+                        "CIP rank higher than the number of atoms.");
+        // watch for neighbors with duplicate ranks, which would mean
+        // that we cannot be chiral:
+        if (codesSeen[ranks[otherIdx]]) {
+          // we've already seen this code, it's a dupe
+          hasDupes = true;
+          break;
+        }
+        codesSeen[ranks[otherIdx]] = 1;
+        nbrs.push_back(std::make_pair(ranks[otherIdx], mol[*beg]->getIdx()));
+        ++beg;
+      }
+    }
   }
   return std::make_pair(legalCenter, hasDupes);
 }
 
 // returns a pair:
 //   1) are there unassigned stereoatoms
 //   2) did we assign any?
 std::pair<bool, bool> assignAtomChiralCodes(ROMol &mol, UINT_VECT &ranks,
                                             bool flagPossibleStereoCenters) {
   PRECONDITION((!ranks.size() || ranks.size() == mol.getNumAtoms()),
                "bad rank vector size");
   bool atomChanged = false;
   unsigned int unassignedAtoms = 0;
 
   // ------------------
   // now loop over each atom and, if it's marked as chiral,
   //  figure out the appropriate CIP label:
   for (ROMol::AtomIterator atIt = mol.beginAtoms(); atIt != mol.endAtoms();
        ++atIt) {
     Atom *atom = *atIt;
     Atom::ChiralType tag = atom->getChiralTag();
 
     // only worry about this atom if it has a marked chirality
     // we understand:
     if (flagPossibleStereoCenters ||
         (tag != Atom::CHI_UNSPECIFIED && tag != Atom::CHI_OTHER)) {
       if (atom->hasProp(common_properties::_CIPCode)) {
         continue;
       }
 
       if (!ranks.size()) {
         //  if we need to, get the "CIP" ranking of each atom:
         assignAtomCIPRanks(mol, ranks);
       }
       Chirality::INT_PAIR_VECT nbrs;
       bool legalCenter, hasDupes;
+      // note that hasDupes is only evaluated if legalCenter==true
       boost::tie(legalCenter, hasDupes) =
           isAtomPotentialChiralCenter(atom, mol, ranks, nbrs);
       if (legalCenter) {
         ++unassignedAtoms;
       }
       if (legalCenter && !hasDupes && flagPossibleStereoCenters) {
         atom->setProp(common_properties::_ChiralityPossible, 1);
       }
 
       if (legalCenter && !hasDupes && tag != Atom::CHI_UNSPECIFIED &&
           tag != Atom::CHI_OTHER) {
         // stereochem is possible and we have no duplicate neighbors, assign
         // a CIP code:
         atomChanged = true;
         --unassignedAtoms;
 
         // sort the list of neighbors by their CIP ranks:
         std::sort(nbrs.begin(), nbrs.end(), Rankers::pairLess<int, int>());
 
         // collect the list of neighbor indices:
         std::list<int> nbrIndices;
         for (Chirality::INT_PAIR_VECT_CI nbrIt = nbrs.begin();
              nbrIt != nbrs.end(); ++nbrIt) {
           nbrIndices.push_back((*nbrIt).second);
         }
         // ask the atom how many swaps we have to make:
         int nSwaps = atom->getPerturbationOrder(nbrIndices);
 
         // if the atom has 3 neighbors and a hydrogen, add a swap:
         if (nbrIndices.size() == 3 && atom->getTotalNumHs() == 1) {
           ++nSwaps;
         }
 
         // if that number is odd, we'll change our chirality:
         if (nSwaps % 2) {
           if (tag == Atom::CHI_TETRAHEDRAL_CCW) {
             tag = Atom::CHI_TETRAHEDRAL_CW;
           } else {
             tag = Atom::CHI_TETRAHEDRAL_CCW;
           }
         }
         // now assign the CIP code:
         std::string cipCode;
         if (tag == Atom::CHI_TETRAHEDRAL_CCW) {
           cipCode = "S";
         } else {
           cipCode = "R";
         }
         atom->setProp(common_properties::_CIPCode, cipCode);
       }
     }
   }
   return std::make_pair((unassignedAtoms > 0), atomChanged);
 }
 
 // returns a pair:
 //   1) are there unassigned stereo bonds?
 //   2) did we assign any?
diff --git a/Code/GraphMol/SmilesParse/test.cpp b/Code/GraphMol/SmilesParse/test.cpp
index 25edf98c7..4a69cda45 100644
--- a/Code/GraphMol/SmilesParse/test.cpp
+++ b/Code/GraphMol/SmilesParse/test.cpp
@@ -4273,29 +4273,34 @@ void testGithub2556() {
 void testGithub1028() {
   BOOST_LOG(rdInfoLog) << "-------------------------------------" << std::endl;
   BOOST_LOG(rdInfoLog) << "Testing github issue #1028: Alternating canonical "
                           "SMILES for ring with chiral N"
                        << std::endl;
-
+  // note that due to the changes made for #3631, the N's originally used in
+  // these tests are no longer considered to be chiral. I switched to using P
+  // (and verified that P was also a problem before #1028 was fixed)
   {
-    const std::string smi = "O[C@H]1CC2CCC(C1)[N@@]2C";
-    const std::string ref = "C[N@]1C2CCC1C[C@H](O)C2";
+    std::string smi = "O[C@H]1CC2CCC(C1)[P@@]2C";
+    const std::string ref = "C[P@]1C2CCC1C[C@H](O)C2";
     for (int i = 0; i < 3; ++i) {
       const auto mol = std::unique_ptr<ROMol>(SmilesToMol(smi));
       TEST_ASSERT(mol);
       const std::string out = MolToSmiles(*mol);
       TEST_ASSERT(out == ref);
+      smi = out;
     }
 
     {
-      const std::string smi = "C[N@]1C[C@@H](O)C1";
+      std::string smi = "C[P@]1C[C@@H](O)C1";
+      const std::string ref = smi;
       for (int i = 0; i < 3; ++i) {
         const auto mol = std::unique_ptr<ROMol>(SmilesToMol(smi));
         TEST_ASSERT(mol);
         const std::string out = MolToSmiles(*mol);
-        TEST_ASSERT(out == smi);
+        TEST_ASSERT(out == ref);
+        smi = out;
       }
     }
   }
 
   BOOST_LOG(rdInfoLog) << "done" << std::endl;
 }
diff --git a/Code/GraphMol/catch_chirality.cpp b/Code/GraphMol/catch_chirality.cpp
index e44548635..5ee88a971 100644
--- a/Code/GraphMol/catch_chirality.cpp
+++ b/Code/GraphMol/catch_chirality.cpp
@@ -1200,3 +1200,87 @@ TEST_CASE("ring stereo finding is overly aggressive", "[chirality][bug]") {
     CHECK(stereoInfo.size() == 2);
   }
 }
+
+TEST_CASE(
+    "github #3631: Ring stereochemistry not properly removed from N atoms",
+    "[chirality][bug]") {
+  SECTION("basics") {
+    SmilesParserParams ps;
+    ps.sanitize = false;
+    ps.removeHs = false;
+    std::unique_ptr<RWMol> mol{SmilesToMol("C[N@]1C[C@@](F)(Cl)C1", ps)};
+    REQUIRE(mol);
+    MolOps::sanitizeMol(*mol);
+
+    CHECK(mol->getAtomWithIdx(1)->getChiralTag() !=
+          Atom::ChiralType::CHI_UNSPECIFIED);
+    CHECK(mol->getAtomWithIdx(3)->getChiralTag() !=
+          Atom::ChiralType::CHI_UNSPECIFIED);
+    bool cleanIt = true;
+    bool flagPossible = true;
+    bool force = true;
+    {
+      RWMol mol2(*mol);
+      auto stereoInfo =
+          Chirality::findPotentialStereo(mol2, cleanIt, flagPossible);
+      CHECK(stereoInfo.size() == 0);
+    }
+    {
+      RWMol mol2(*mol);
+      MolOps::assignStereochemistry(mol2, cleanIt, force, flagPossible);
+      CHECK(mol2.getAtomWithIdx(1)->getChiralTag() ==
+            Atom::ChiralType::CHI_UNSPECIFIED);
+      CHECK(mol2.getAtomWithIdx(3)->getChiralTag() ==
+            Atom::ChiralType::CHI_UNSPECIFIED);
+    }
+  }
+  SECTION("default behavior") {
+    auto mol = "C[N@]1C[C@@](F)(Cl)C1"_smiles;
+    REQUIRE(mol);
+    auto smiles = MolToSmiles(*mol);
+    CHECK(smiles == "CN1CC(F)(Cl)C1");
+    bool cleanIt = true;
+    bool flagPossible = true;
+    bool force = true;
+    CHECK(mol->getAtomWithIdx(1)->getChiralTag() ==
+          Atom::ChiralType::CHI_UNSPECIFIED);
+    CHECK(mol->getAtomWithIdx(3)->getChiralTag() ==
+          Atom::ChiralType::CHI_UNSPECIFIED);
+    {
+      RWMol mol2(*mol);
+      auto stereoInfo =
+          Chirality::findPotentialStereo(mol2, cleanIt, flagPossible);
+      CHECK(stereoInfo.size() == 0);
+    }
+    {
+      RWMol mol2(*mol);
+      MolOps::assignStereochemistry(mol2, cleanIt, force, flagPossible);
+      CHECK(mol2.getAtomWithIdx(1)->getChiralTag() ==
+            Atom::ChiralType::CHI_UNSPECIFIED);
+      CHECK(mol2.getAtomWithIdx(3)->getChiralTag() ==
+            Atom::ChiralType::CHI_UNSPECIFIED);
+    }
+  }
+  SECTION("don't overcorrect") {
+    auto mol = "C[N@]1O[C@@](F)(Cl)C1"_smiles;
+    REQUIRE(mol);
+    bool cleanIt = true;
+    bool flagPossible = true;
+    bool force = true;
+    {
+      RWMol mol2(*mol);
+      auto stereoInfo =
+          Chirality::findPotentialStereo(mol2, cleanIt, flagPossible);
+      CHECK(stereoInfo.size() == 1);
+      CHECK(stereoInfo[0].centeredOn == 3);
+    }
+    {
+      RWMol mol2(*mol);
+      MolOps::assignStereochemistry(mol2, cleanIt, force, flagPossible);
+      CHECK(mol2.getAtomWithIdx(1)->getChiralTag() ==
+            Atom::ChiralType::CHI_UNSPECIFIED);
+      CHECK(mol2.getAtomWithIdx(3)->getChiralTag() !=
+            Atom::ChiralType::CHI_UNSPECIFIED);
+    }
+  }
+}
diff --git a/Code/GraphMol/molopstest.cpp b/Code/GraphMol/molopstest.cpp
index d66eca70d..0df8dfd29 100644
--- a/Code/GraphMol/molopstest.cpp
+++ b/Code/GraphMol/molopstest.cpp
@@ -2490,59 +2490,60 @@ void testSFIssue1694023() {
 void testSFIssue1719053() {
   BOOST_LOG(rdInfoLog) << "-----------------------\n Testing sf.net issue "
                           "1719053 (Ring stereochemistry incorrectly removed) "
                        << std::endl;
   ROMol *m;
 
   std::string smi;
 
   smi = "C[C@@H]1CCCCC1";
   m = SmilesToMol(smi);
   TEST_ASSERT(m);
   TEST_ASSERT(m->getAtomWithIdx(1)->getChiralTag() == Atom::CHI_UNSPECIFIED);
 
   delete m;
   smi = "C[C@@H]1CC[C@@H](C)CC1";
   m = SmilesToMol(smi);
   TEST_ASSERT(m);
   TEST_ASSERT(m->getAtomWithIdx(1)->getChiralTag() != Atom::CHI_UNSPECIFIED);
   TEST_ASSERT(m->getAtomWithIdx(4)->getChiralTag() != Atom::CHI_UNSPECIFIED);
 
   delete m;
   smi = "C[C@@H]1C(C)CCCC1C";
   m = SmilesToMol(smi);
   TEST_ASSERT(m);
   TEST_ASSERT(m->getAtomWithIdx(1)->getChiralTag() == Atom::CHI_UNSPECIFIED);
 
   delete m;
   smi = "C[C@@H]1[C@H](C)CCC[C@H]1C";
   m = SmilesToMol(smi);
   TEST_ASSERT(m);
   // this is a truly symmetric case, so the stereochem should be removed:
   TEST_ASSERT(m->getAtomWithIdx(1)->getChiralTag() == Atom::CHI_UNSPECIFIED);
   TEST_ASSERT(m->getAtomWithIdx(2)->getChiralTag() != Atom::CHI_UNSPECIFIED);
   TEST_ASSERT(m->getAtomWithIdx(7)->getChiralTag() != Atom::CHI_UNSPECIFIED);
 
   delete m;
   smi = "C[C@@H]1C=C[C@@H](C)C=C1";
   m = SmilesToMol(smi);
   TEST_ASSERT(m);
   TEST_ASSERT(m->getAtomWithIdx(1)->getChiralTag() != Atom::CHI_UNSPECIFIED);
   TEST_ASSERT(m->getAtomWithIdx(4)->getChiralTag() != Atom::CHI_UNSPECIFIED);
 
   delete m;
   smi = "C[N@@]1C=C[C@@H](C)C=C1";
   m = SmilesToMol(smi);
   TEST_ASSERT(m);
   TEST_ASSERT(m->getAtomWithIdx(1)->getChiralTag() == Atom::CHI_UNSPECIFIED);
   TEST_ASSERT(m->getAtomWithIdx(4)->getChiralTag() == Atom::CHI_UNSPECIFIED);
 
+  // N in rings that aren't 3 rings is not chiral
   delete m;
   smi = "C[N@@]1CC[C@@H](C)CC1";
   m = SmilesToMol(smi);
   TEST_ASSERT(m);
-  TEST_ASSERT(m->getAtomWithIdx(1)->getChiralTag() != Atom::CHI_UNSPECIFIED);
-  TEST_ASSERT(m->getAtomWithIdx(4)->getChiralTag() != Atom::CHI_UNSPECIFIED);
+  TEST_ASSERT(m->getAtomWithIdx(1)->getChiralTag() == Atom::CHI_UNSPECIFIED);
+  TEST_ASSERT(m->getAtomWithIdx(4)->getChiralTag() == Atom::CHI_UNSPECIFIED);
 
   delete m;
   BOOST_LOG(rdInfoLog) << "Finished" << std::endl;
 }
