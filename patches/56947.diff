commit 483793940c476483eb7ca1873100bf58a2441478
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Mon Mar 13 17:11:27 2023 +0100

    malloc-fail: Stop using XPath stack frames
    
    There's too much code which assumes that if ctxt->value is non-null,
    a value can be successfully popped off the stack. This assumption can
    break with stack frames when malloc fails.
    
    Instead of trying to fix all call sites, remove the stack frame logic.
    It only offered very little protection against misbehaving extension
    functions. We already check the stack size after a function call which
    should be enough.
    
    Found by OSS-Fuzz.

diff --git a/include/libxml/xpath.h b/include/libxml/xpath.h
index 8a70ddc2..b57985a2 100644
--- a/include/libxml/xpath.h
+++ b/include/libxml/xpath.h
@@ -381,34 +381,34 @@ typedef xmlXPathCompExpr *xmlXPathCompExprPtr;
 /**
  * xmlXPathParserContext:
  *
  * An XPath parser context. It contains pure parsing information,
  * an xmlXPathContext, and the stack of objects.
  */
 struct _xmlXPathParserContext {
     const xmlChar *cur;			/* the current char being parsed */
     const xmlChar *base;			/* the full expression */
 
     int error;				/* error code */
 
     xmlXPathContextPtr  context;	/* the evaluation context */
     xmlXPathObjectPtr     value;	/* the current value */
     int                 valueNr;	/* number of values stacked */
     int                valueMax;	/* max number of values stacked */
     xmlXPathObjectPtr *valueTab;	/* stack of values */
 
     xmlXPathCompExprPtr comp;		/* the precompiled expression */
     int xptr;				/* it this an XPointer expression */
     xmlNodePtr         ancestor;	/* used for walking preceding axis */
 
-    int              valueFrame;        /* used to limit Pop on the stack */
+    int              valueFrame;        /* unused */
 };
 
 /************************************************************************
  *									*
  *			Public API					*
  *									*
  ************************************************************************/
 
 /**
  * Objects and Nodesets handling
  */
diff --git a/xpath.c b/xpath.c
index bf18d4ec..27628586 100644
--- a/xpath.c
+++ b/xpath.c
@@ -2818,62 +2818,26 @@ static xmlXPathObjectPtr
 xmlXPathCacheConvertNumber(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val) {
     xmlXPathObjectPtr ret;
 
     if (val == NULL)
 	return(xmlXPathCacheNewFloat(ctxt, 0.0));
     if (val->type == XPATH_NUMBER)
 	return(val);
     ret = xmlXPathCacheNewFloat(ctxt, xmlXPathCastToNumber(val));
     xmlXPathReleaseObject(ctxt, val);
     return(ret);
 }
 
 /************************************************************************
  *									*
  *		Parser stacks related functions and macros		*
  *									*
  ************************************************************************/
 
-/**
- * xmlXPathSetFrame:
- * @ctxt: an XPath parser context
- *
- * Set the callee evaluation frame
- *
- * Returns the previous frame value to be restored once done
- */
-static int
-xmlXPathSetFrame(xmlXPathParserContextPtr ctxt) {
-    int ret;
-
-    if (ctxt == NULL)
-        return(0);
-    ret = ctxt->valueFrame;
-    ctxt->valueFrame = ctxt->valueNr;
-    return(ret);
-}
-
-/**
- * xmlXPathPopFrame:
- * @ctxt: an XPath parser context
- * @frame: the previous frame value
- *
- * Remove the callee evaluation frame
- */
-static void
-xmlXPathPopFrame(xmlXPathParserContextPtr ctxt, int frame) {
-    if (ctxt == NULL)
-        return;
-    if (ctxt->valueNr < ctxt->valueFrame) {
-        xmlXPatherror(ctxt, __FILE__, __LINE__, XPATH_STACK_ERROR);
-    }
-    ctxt->valueFrame = frame;
-}
-
 /**
  * valuePop:
  * @ctxt: an XPath evaluation context
  *
  * Pops the top XPath object from the value stack
  *
  * Returns the XPath object just removed
  */
@@ -2881,33 +2845,28 @@ xmlXPathObjectPtr
 valuePop(xmlXPathParserContextPtr ctxt)
 {
     xmlXPathObjectPtr ret;
 
     if ((ctxt == NULL) || (ctxt->valueNr <= 0))
         return (NULL);
 
-    if (ctxt->valueNr <= ctxt->valueFrame) {
-        xmlXPatherror(ctxt, __FILE__, __LINE__, XPATH_STACK_ERROR);
-        return (NULL);
-    }
-
     ctxt->valueNr--;
     if (ctxt->valueNr > 0)
         ctxt->value = ctxt->valueTab[ctxt->valueNr - 1];
     else
         ctxt->value = NULL;
     ret = ctxt->valueTab[ctxt->valueNr];
     ctxt->valueTab[ctxt->valueNr] = NULL;
     return (ret);
 }
 /**
  * valuePush:
  * @ctxt:  an XPath evaluation context
  * @value:  the XPath object
  *
  * Pushes a new XPath object on top of the value stack. If value is NULL,
  * a memory error is recorded in the parser context.
  *
  * Returns the number of items on the value stack, or -1 in case of error.
  *
  * The object is destroyed in case of error.
  */
@@ -6307,35 +6266,34 @@ static xmlXPathParserContextPtr
 xmlXPathCompParserContext(xmlXPathCompExprPtr comp, xmlXPathContextPtr ctxt) {
     xmlXPathParserContextPtr ret;
 
     ret = (xmlXPathParserContextPtr) xmlMalloc(sizeof(xmlXPathParserContext));
     if (ret == NULL) {
         xmlXPathErrMemory(ctxt, "creating evaluation context\n");
 	return(NULL);
     }
     memset(ret, 0 , sizeof(xmlXPathParserContext));
 
     /* Allocate the value stack */
     ret->valueTab = (xmlXPathObjectPtr *)
                      xmlMalloc(10 * sizeof(xmlXPathObjectPtr));
     if (ret->valueTab == NULL) {
 	xmlFree(ret);
 	xmlXPathErrMemory(ctxt, "creating evaluation context\n");
 	return(NULL);
     }
     ret->valueNr = 0;
     ret->valueMax = 10;
     ret->value = NULL;
-    ret->valueFrame = 0;
 
     ret->context = ctxt;
     ret->comp = comp;
 
     return(ret);
 }
 
 /**
  * xmlXPathFreeParserContext:
  * @ctxt:  the context to free
  *
  * Free up an xmlXPathParserContext
  */
@@ -13006,576 +12964,570 @@ static int
 xmlXPathCompOpEval(xmlXPathParserContextPtr ctxt, xmlXPathStepOpPtr op)
 {
     int total = 0;
     int equal, ret;
     xmlXPathCompExprPtr comp;
     xmlXPathObjectPtr arg1, arg2;
 
     CHECK_ERROR0;
     if (OP_LIMIT_EXCEEDED(ctxt, 1))
         return(0);
     if (ctxt->context->depth >= XPATH_MAX_RECURSION_DEPTH)
         XP_ERROR0(XPATH_RECURSION_LIMIT_EXCEEDED);
     ctxt->context->depth += 1;
     comp = ctxt->comp;
     switch (op->op) {
         case XPATH_OP_END:
             break;
         case XPATH_OP_AND:
             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
 	    CHECK_ERROR0;
             xmlXPathBooleanFunction(ctxt, 1);
             if ((ctxt->value == NULL) || (ctxt->value->boolval == 0))
                 break;
             arg2 = valuePop(ctxt);
             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);
 	    if (ctxt->error) {
 		xmlXPathFreeObject(arg2);
 		break;
 	    }
             xmlXPathBooleanFunction(ctxt, 1);
             if (ctxt->value != NULL)
                 ctxt->value->boolval &= arg2->boolval;
 	    xmlXPathReleaseObject(ctxt->context, arg2);
             break;
         case XPATH_OP_OR:
             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
 	    CHECK_ERROR0;
             xmlXPathBooleanFunction(ctxt, 1);
             if ((ctxt->value == NULL) || (ctxt->value->boolval == 1))
                 break;
             arg2 = valuePop(ctxt);
             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);
 	    if (ctxt->error) {
 		xmlXPathFreeObject(arg2);
 		break;
 	    }
             xmlXPathBooleanFunction(ctxt, 1);
             if (ctxt->value != NULL)
                 ctxt->value->boolval |= arg2->boolval;
 	    xmlXPathReleaseObject(ctxt->context, arg2);
             break;
         case XPATH_OP_EQUAL:
             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
 	    CHECK_ERROR0;
             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);
 	    CHECK_ERROR0;
 	    if (op->value)
 		equal = xmlXPathEqualValues(ctxt);
 	    else
 		equal = xmlXPathNotEqualValues(ctxt);
 	    valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, equal));
             break;
         case XPATH_OP_CMP:
             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
 	    CHECK_ERROR0;
             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);
 	    CHECK_ERROR0;
             ret = xmlXPathCompareValues(ctxt, op->value, op->value2);
 	    valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, ret));
             break;
         case XPATH_OP_PLUS:
             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
 	    CHECK_ERROR0;
             if (op->ch2 != -1) {
                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);
 	    }
 	    CHECK_ERROR0;
             if (op->value == 0)
                 xmlXPathSubValues(ctxt);
             else if (op->value == 1)
                 xmlXPathAddValues(ctxt);
             else if (op->value == 2)
                 xmlXPathValueFlipSign(ctxt);
             else if (op->value == 3) {
                 CAST_TO_NUMBER;
                 CHECK_TYPE0(XPATH_NUMBER);
             }
             break;
         case XPATH_OP_MULT:
             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
 	    CHECK_ERROR0;
             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);
 	    CHECK_ERROR0;
             if (op->value == 0)
                 xmlXPathMultValues(ctxt);
             else if (op->value == 1)
                 xmlXPathDivValues(ctxt);
             else if (op->value == 2)
                 xmlXPathModValues(ctxt);
             break;
         case XPATH_OP_UNION:
             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
 	    CHECK_ERROR0;
             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);
 	    CHECK_ERROR0;
 
             arg2 = valuePop(ctxt);
             arg1 = valuePop(ctxt);
             if ((arg1 == NULL) || (arg1->type != XPATH_NODESET) ||
                 (arg2 == NULL) || (arg2->type != XPATH_NODESET)) {
 	        xmlXPathReleaseObject(ctxt->context, arg1);
 	        xmlXPathReleaseObject(ctxt->context, arg2);
                 XP_ERROR0(XPATH_INVALID_TYPE);
             }
             if ((ctxt->context->opLimit != 0) &&
                 (((arg1->nodesetval != NULL) &&
                   (xmlXPathCheckOpLimit(ctxt,
                                         arg1->nodesetval->nodeNr) < 0)) ||
                  ((arg2->nodesetval != NULL) &&
                   (xmlXPathCheckOpLimit(ctxt,
                                         arg2->nodesetval->nodeNr) < 0)))) {
 	        xmlXPathReleaseObject(ctxt->context, arg1);
 	        xmlXPathReleaseObject(ctxt->context, arg2);
                 break;
             }
 
 	    if ((arg1->nodesetval == NULL) ||
 		((arg2->nodesetval != NULL) &&
 		 (arg2->nodesetval->nodeNr != 0)))
 	    {
                 /* TODO: Check memory error. */
 		arg1->nodesetval = xmlXPathNodeSetMerge(arg1->nodesetval,
 							arg2->nodesetval);
 	    }
 
             valuePush(ctxt, arg1);
 	    xmlXPathReleaseObject(ctxt->context, arg2);
             break;
         case XPATH_OP_ROOT:
             xmlXPathRoot(ctxt);
             break;
         case XPATH_OP_NODE:
             if (op->ch1 != -1)
                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
 	    CHECK_ERROR0;
             if (op->ch2 != -1)
                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);
 	    CHECK_ERROR0;
 	    valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,
 		ctxt->context->node));
             break;
         case XPATH_OP_COLLECT:{
                 if (op->ch1 == -1)
                     break;
 
                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
 		CHECK_ERROR0;
 
                 total += xmlXPathNodeCollectAndTest(ctxt, op, NULL, NULL, 0);
                 break;
             }
         case XPATH_OP_VALUE:
             valuePush(ctxt,
                       xmlXPathCacheObjectCopy(ctxt->context,
 			(xmlXPathObjectPtr) op->value4));
             break;
         case XPATH_OP_VARIABLE:{
 		xmlXPathObjectPtr val;
 
                 if (op->ch1 != -1)
                     total +=
                         xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
                 if (op->value5 == NULL) {
 		    val = xmlXPathVariableLookup(ctxt->context, op->value4);
 		    if (val == NULL)
 			XP_ERROR0(XPATH_UNDEF_VARIABLE_ERROR);
                     valuePush(ctxt, val);
 		} else {
                     const xmlChar *URI;
 
                     URI = xmlXPathNsLookup(ctxt->context, op->value5);
                     if (URI == NULL) {
                         xmlGenericError(xmlGenericErrorContext,
             "xmlXPathCompOpEval: variable %s bound to undefined prefix %s\n",
                                     (char *) op->value4, (char *)op->value5);
                         ctxt->error = XPATH_UNDEF_PREFIX_ERROR;
                         break;
                     }
 		    val = xmlXPathVariableLookupNS(ctxt->context,
                                                        op->value4, URI);
 		    if (val == NULL)
 			XP_ERROR0(XPATH_UNDEF_VARIABLE_ERROR);
                     valuePush(ctxt, val);
                 }
                 break;
             }
         case XPATH_OP_FUNCTION:{
                 xmlXPathFunction func;
                 const xmlChar *oldFunc, *oldFuncURI;
 		int i;
                 int frame;
 
-                frame = xmlXPathSetFrame(ctxt);
+                frame = ctxt->valueNr;
                 if (op->ch1 != -1) {
                     total +=
                         xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
-                    if (ctxt->error != XPATH_EXPRESSION_OK) {
-                        xmlXPathPopFrame(ctxt, frame);
+                    if (ctxt->error != XPATH_EXPRESSION_OK)
                         break;
-                    }
                 }
-		if (ctxt->valueNr < ctxt->valueFrame + op->value) {
+		if (ctxt->valueNr < frame + op->value) {
 		    xmlGenericError(xmlGenericErrorContext,
 			    "xmlXPathCompOpEval: parameter error\n");
 		    ctxt->error = XPATH_INVALID_OPERAND;
-                    xmlXPathPopFrame(ctxt, frame);
 		    break;
 		}
 		for (i = 0; i < op->value; i++) {
 		    if (ctxt->valueTab[(ctxt->valueNr - 1) - i] == NULL) {
 			xmlGenericError(xmlGenericErrorContext,
 				"xmlXPathCompOpEval: parameter error\n");
 			ctxt->error = XPATH_INVALID_OPERAND;
-                        xmlXPathPopFrame(ctxt, frame);
 			break;
 		    }
                 }
                 if (op->cache != NULL)
                     func = op->cache;
                 else {
                     const xmlChar *URI = NULL;
 
                     if (op->value5 == NULL)
                         func =
                             xmlXPathFunctionLookup(ctxt->context,
                                                    op->value4);
                     else {
                         URI = xmlXPathNsLookup(ctxt->context, op->value5);
                         if (URI == NULL) {
                             xmlGenericError(xmlGenericErrorContext,
             "xmlXPathCompOpEval: function %s bound to undefined prefix %s\n",
                                     (char *)op->value4, (char *)op->value5);
-                            xmlXPathPopFrame(ctxt, frame);
                             ctxt->error = XPATH_UNDEF_PREFIX_ERROR;
                             break;
                         }
                         func = xmlXPathFunctionLookupNS(ctxt->context,
                                                         op->value4, URI);
                     }
                     if (func == NULL) {
                         xmlGenericError(xmlGenericErrorContext,
                                 "xmlXPathCompOpEval: function %s not found\n",
                                         (char *)op->value4);
                         XP_ERROR0(XPATH_UNKNOWN_FUNC_ERROR);
                     }
                     op->cache = func;
                     op->cacheURI = (void *) URI;
                 }
                 oldFunc = ctxt->context->function;
                 oldFuncURI = ctxt->context->functionURI;
                 ctxt->context->function = op->value4;
                 ctxt->context->functionURI = op->cacheURI;
                 func(ctxt, op->value);
                 ctxt->context->function = oldFunc;
                 ctxt->context->functionURI = oldFuncURI;
                 if ((ctxt->error == XPATH_EXPRESSION_OK) &&
-                    (ctxt->valueNr != ctxt->valueFrame + 1))
+                    (ctxt->valueNr != frame + 1))
                     XP_ERROR0(XPATH_STACK_ERROR);
-                xmlXPathPopFrame(ctxt, frame);
                 break;
             }
         case XPATH_OP_ARG:
             if (op->ch1 != -1) {
                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
 	        CHECK_ERROR0;
             }
             if (op->ch2 != -1) {
                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);
 	        CHECK_ERROR0;
 	    }
             break;
         case XPATH_OP_PREDICATE:
         case XPATH_OP_FILTER:{
                 xmlXPathObjectPtr obj;
                 xmlNodeSetPtr set;
 
                 /*
                  * Optimization for ()[1] selection i.e. the first elem
                  */
                 if ((op->ch1 != -1) && (op->ch2 != -1) &&
 #ifdef XP_OPTIMIZED_FILTER_FIRST
 		    /*
 		    * FILTER TODO: Can we assume that the inner processing
 		    *  will result in an ordered list if we have an
 		    *  XPATH_OP_FILTER?
 		    *  What about an additional field or flag on
 		    *  xmlXPathObject like @sorted ? This way we wouldn't need
 		    *  to assume anything, so it would be more robust and
 		    *  easier to optimize.
 		    */
                     ((comp->steps[op->ch1].op == XPATH_OP_SORT) || /* 18 */
 		     (comp->steps[op->ch1].op == XPATH_OP_FILTER)) && /* 17 */
 #else
 		    (comp->steps[op->ch1].op == XPATH_OP_SORT) &&
 #endif
                     (comp->steps[op->ch2].op == XPATH_OP_VALUE)) { /* 12 */
                     xmlXPathObjectPtr val;
 
                     val = comp->steps[op->ch2].value4;
                     if ((val != NULL) && (val->type == XPATH_NUMBER) &&
                         (val->floatval == 1.0)) {
                         xmlNodePtr first = NULL;
 
                         total +=
                             xmlXPathCompOpEvalFirst(ctxt,
                                                     &comp->steps[op->ch1],
                                                     &first);
 			CHECK_ERROR0;
                         /*
                          * The nodeset should be in document order,
                          * Keep only the first value
                          */
                         if ((ctxt->value != NULL) &&
                             (ctxt->value->type == XPATH_NODESET) &&
                             (ctxt->value->nodesetval != NULL) &&
                             (ctxt->value->nodesetval->nodeNr > 1))
                             xmlXPathNodeSetClearFromPos(ctxt->value->nodesetval,
                                                         1, 1);
                         break;
                     }
                 }
                 /*
                  * Optimization for ()[last()] selection i.e. the last elem
                  */
                 if ((op->ch1 != -1) && (op->ch2 != -1) &&
                     (comp->steps[op->ch1].op == XPATH_OP_SORT) &&
                     (comp->steps[op->ch2].op == XPATH_OP_SORT)) {
                     int f = comp->steps[op->ch2].ch1;
 
                     if ((f != -1) &&
                         (comp->steps[f].op == XPATH_OP_FUNCTION) &&
                         (comp->steps[f].value5 == NULL) &&
                         (comp->steps[f].value == 0) &&
                         (comp->steps[f].value4 != NULL) &&
                         (xmlStrEqual
                          (comp->steps[f].value4, BAD_CAST "last"))) {
                         xmlNodePtr last = NULL;
 
                         total +=
                             xmlXPathCompOpEvalLast(ctxt,
                                                    &comp->steps[op->ch1],
                                                    &last);
 			CHECK_ERROR0;
                         /*
                          * The nodeset should be in document order,
                          * Keep only the last value
                          */
                         if ((ctxt->value != NULL) &&
                             (ctxt->value->type == XPATH_NODESET) &&
                             (ctxt->value->nodesetval != NULL) &&
                             (ctxt->value->nodesetval->nodeTab != NULL) &&
                             (ctxt->value->nodesetval->nodeNr > 1))
                             xmlXPathNodeSetKeepLast(ctxt->value->nodesetval);
                         break;
                     }
                 }
 		/*
 		* Process inner predicates first.
 		* Example "index[parent::book][1]":
 		* ...
 		*   PREDICATE   <-- we are here "[1]"
 		*     PREDICATE <-- process "[parent::book]" first
 		*       SORT
 		*         COLLECT  'parent' 'name' 'node' book
 		*           NODE
 		*     ELEM Object is a number : 1
 		*/
                 if (op->ch1 != -1)
                     total +=
                         xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
 		CHECK_ERROR0;
                 if (op->ch2 == -1)
                     break;
                 if (ctxt->value == NULL)
                     break;
 
 #ifdef LIBXML_XPTR_LOCS_ENABLED
                 /*
                  * Hum are we filtering the result of an XPointer expression
                  */
                 if (ctxt->value->type == XPATH_LOCATIONSET) {
                     xmlLocationSetPtr locset = ctxt->value->user;
                     xmlXPathLocationSetFilter(ctxt, locset, op->ch2,
                                               1, locset->locNr);
                     break;
                 }
 #endif /* LIBXML_XPTR_LOCS_ENABLED */
 
                 /*
                  * In case of errors, xmlXPathNodeSetFilter can pop additional
                  * nodes from the stack. We have to temporarily remove the
                  * nodeset object from the stack to avoid freeing it
                  * prematurely.
                  */
                 CHECK_TYPE0(XPATH_NODESET);
                 obj = valuePop(ctxt);
                 set = obj->nodesetval;
                 if (set != NULL)
                     xmlXPathNodeSetFilter(ctxt, set, op->ch2,
                                           1, set->nodeNr, 1);
                 valuePush(ctxt, obj);
                 break;
             }
         case XPATH_OP_SORT:
             if (op->ch1 != -1)
                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
 	    CHECK_ERROR0;
             if ((ctxt->value != NULL) &&
                 (ctxt->value->type == XPATH_NODESET) &&
                 (ctxt->value->nodesetval != NULL) &&
 		(ctxt->value->nodesetval->nodeNr > 1))
 	    {
                 xmlXPathNodeSetSort(ctxt->value->nodesetval);
 	    }
             break;
 #ifdef LIBXML_XPTR_LOCS_ENABLED
         case XPATH_OP_RANGETO:{
                 xmlXPathObjectPtr range;
                 xmlXPathObjectPtr res, obj;
                 xmlXPathObjectPtr tmp;
                 xmlLocationSetPtr newlocset = NULL;
 		    xmlLocationSetPtr oldlocset;
                 xmlNodeSetPtr oldset;
                 xmlNodePtr oldnode = ctxt->context->node;
                 int oldcs = ctxt->context->contextSize;
                 int oldpp = ctxt->context->proximityPosition;
                 int i, j;
 
                 if (op->ch1 != -1) {
                     total +=
                         xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
                     CHECK_ERROR0;
                 }
                 if (ctxt->value == NULL) {
                     XP_ERROR0(XPATH_INVALID_OPERAND);
                 }
                 if (op->ch2 == -1)
                     break;
 
                 if (ctxt->value->type == XPATH_LOCATIONSET) {
                     /*
                      * Extract the old locset, and then evaluate the result of the
                      * expression for all the element in the locset. use it to grow
                      * up a new locset.
                      */
                     CHECK_TYPE0(XPATH_LOCATIONSET);
 
                     if ((ctxt->value->user == NULL) ||
                         (((xmlLocationSetPtr) ctxt->value->user)->locNr == 0))
                         break;
 
                     obj = valuePop(ctxt);
                     oldlocset = obj->user;
 
                     newlocset = xmlXPtrLocationSetCreate(NULL);
 
                     for (i = 0; i < oldlocset->locNr; i++) {
                         /*
                          * Run the evaluation with a node list made of a
                          * single item in the nodelocset.
                          */
                         ctxt->context->node = oldlocset->locTab[i]->user;
                         ctxt->context->contextSize = oldlocset->locNr;
                         ctxt->context->proximityPosition = i + 1;
 			tmp = xmlXPathCacheNewNodeSet(ctxt->context,
 			    ctxt->context->node);
                         valuePush(ctxt, tmp);
 
                         if (op->ch2 != -1)
                             total +=
                                 xmlXPathCompOpEval(ctxt,
                                                    &comp->steps[op->ch2]);
 			if (ctxt->error != XPATH_EXPRESSION_OK) {
                             xmlXPtrFreeLocationSet(newlocset);
                             goto rangeto_error;
 			}
 
                         res = valuePop(ctxt);
 			if (res->type == XPATH_LOCATIONSET) {
 			    xmlLocationSetPtr rloc =
 			        (xmlLocationSetPtr)res->user;
 			    for (j=0; j<rloc->locNr; j++) {
 			        range = xmlXPtrNewRange(
 				  oldlocset->locTab[i]->user,
 				  oldlocset->locTab[i]->index,
 				  rloc->locTab[j]->user2,
 				  rloc->locTab[j]->index2);
 				if (range != NULL) {
 				    xmlXPtrLocationSetAdd(newlocset, range);
 				}
 			    }
 			} else {
 			    range = xmlXPtrNewRangeNodeObject(
 				(xmlNodePtr)oldlocset->locTab[i]->user, res);
                             if (range != NULL) {
                                 xmlXPtrLocationSetAdd(newlocset,range);
 			    }
                         }
 
                         /*
                          * Cleanup
                          */
                         if (res != NULL) {
 			    xmlXPathReleaseObject(ctxt->context, res);
 			}
                         if (ctxt->value == tmp) {
                             res = valuePop(ctxt);
 			    xmlXPathReleaseObject(ctxt->context, res);
                         }
                     }
 		} else {	/* Not a location set */
                     CHECK_TYPE0(XPATH_NODESET);
                     obj = valuePop(ctxt);
                     oldset = obj->nodesetval;
 
                     newlocset = xmlXPtrLocationSetCreate(NULL);
 
                     if (oldset != NULL) {
                         for (i = 0; i < oldset->nodeNr; i++) {
                             /*
                              * Run the evaluation with a node list made of a single item
                              * in the nodeset.
                              */
                             ctxt->context->node = oldset->nodeTab[i];
 			    /*
 			    * OPTIMIZE TODO: Avoid recreation for every iteration.
 			    */
 			    tmp = xmlXPathCacheNewNodeSet(ctxt->context,
 				ctxt->context->node);
                             valuePush(ctxt, tmp);
 
                             if (op->ch2 != -1)
                                 total +=
                                     xmlXPathCompOpEval(ctxt,
                                                    &comp->steps[op->ch2]);
 			    if (ctxt->error != XPATH_EXPRESSION_OK) {
                                 xmlXPtrFreeLocationSet(newlocset);
                                 goto rangeto_error;
 			    }
 
                             res = valuePop(ctxt);
                             range =
                                 xmlXPtrNewRangeNodeObject(oldset->nodeTab[i],
                                                       res);
                             if (range != NULL) {
                                 xmlXPtrLocationSetAdd(newlocset, range);
                             }
 
                             /*
                              * Cleanup
                              */
                             if (res != NULL) {
 				xmlXPathReleaseObject(ctxt->context, res);
 			    }
                             if (ctxt->value == tmp) {
                                 res = valuePop(ctxt);
 				xmlXPathReleaseObject(ctxt->context, res);
                             }
                         }
                     }
                 }
 
                 /*
                  * The result is used as the new evaluation set.
                  */
                 valuePush(ctxt, xmlXPtrWrapLocationSet(newlocset));
@@ -13936,94 +13888,93 @@ static int
 xmlXPathRunEval(xmlXPathParserContextPtr ctxt, int toBool)
 {
     xmlXPathCompExprPtr comp;
     int oldDepth;
 
     if ((ctxt == NULL) || (ctxt->comp == NULL))
 	return(-1);
 
     if (ctxt->valueTab == NULL) {
 	/* Allocate the value stack */
 	ctxt->valueTab = (xmlXPathObjectPtr *)
 			 xmlMalloc(10 * sizeof(xmlXPathObjectPtr));
 	if (ctxt->valueTab == NULL) {
 	    xmlXPathPErrMemory(ctxt, "creating evaluation context\n");
 	    return(-1);
 	}
 	ctxt->valueNr = 0;
 	ctxt->valueMax = 10;
 	ctxt->value = NULL;
-        ctxt->valueFrame = 0;
     }
 #ifdef XPATH_STREAMING
     if (ctxt->comp->stream) {
 	int res;
 
 	if (toBool) {
 	    /*
 	    * Evaluation to boolean result.
 	    */
 	    res = xmlXPathRunStreamEval(ctxt->context,
 		ctxt->comp->stream, NULL, 1);
 	    if (res != -1)
 		return(res);
 	} else {
 	    xmlXPathObjectPtr resObj = NULL;
 
 	    /*
 	    * Evaluation to a sequence.
 	    */
 	    res = xmlXPathRunStreamEval(ctxt->context,
 		ctxt->comp->stream, &resObj, 0);
 
 	    if ((res != -1) && (resObj != NULL)) {
 		valuePush(ctxt, resObj);
 		return(0);
 	    }
 	    if (resObj != NULL)
 		xmlXPathReleaseObject(ctxt->context, resObj);
 	}
 	/*
 	* QUESTION TODO: This falls back to normal XPath evaluation
 	* if res == -1. Is this intended?
 	*/
     }
 #endif
     comp = ctxt->comp;
     if (comp->last < 0) {
 	xmlGenericError(xmlGenericErrorContext,
 	    "xmlXPathRunEval: last is less than zero\n");
 	return(-1);
     }
     oldDepth = ctxt->context->depth;
     if (toBool)
 	return(xmlXPathCompOpEvalToBoolean(ctxt,
 	    &comp->steps[comp->last], 0));
     else
 	xmlXPathCompOpEval(ctxt, &comp->steps[comp->last]);
     ctxt->context->depth = oldDepth;
 
     return(0);
 }
 
 /************************************************************************
  *									*
  *			Public interfaces				*
  *									*
  ************************************************************************/
 
 /**
  * xmlXPathEvalPredicate:
  * @ctxt:  the XPath context
  * @res:  the Predicate Expression evaluation result
  *
  * Evaluate a predicate result for the current node.
  * A PredicateExpr is evaluated by evaluating the Expr and converting
  * the result to a boolean. If the result is a number, the result will
  * be converted to true if the number is equal to the position of the
  * context node in the context node list (as returned by the position
  * function) and will be converted to false otherwise; if the result
  * is not a number, then the result will be converted as if by a call
  * to the boolean function.
  *
  * Returns 1 if predicate is true, 0 otherwise
  */
