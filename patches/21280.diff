commit 26615bd08a7ed2fbd3400df30f7095a74703ebfe
Author: Victor M. Alvarez <vmalvarez@virustotal.com>
Date:   Tue Mar 17 18:37:08 2020 +0100

    Expose profiling API so that dependencies are met even if YARA is compiled without YR_PROFILING_ENABLED.

diff --git a/libyara/include/yara/types.h b/libyara/include/yara/types.h
index 0524546c..83d10a24 100644
--- a/libyara/include/yara/types.h
+++ b/libyara/include/yara/types.h
@@ -594,42 +594,40 @@ struct YR_RULES
 struct YR_RULES_STATS
 {
   // Total number of rules
   uint32_t num_rules;
 
   // Total number of strings across all rules.
   uint32_t num_strings;
 
   // Total number of Aho-Corasick matches. Each node in the  Aho-Corasick
   // automaton has a list of YR_AC_MATCH_LIST_ENTRY structures (match list) pointing to
   // strings that are potential matches. This field holds the total number of
   // those structures across all nodes in the automaton.
   uint32_t ac_matches;
 
   // Length of the match list for the root node in the Aho-Corasick automaton.
   uint32_t ac_root_match_list_length;
 
   // Average number of matches per match list.
   float ac_average_match_list_length;
 
   // Top 10 longest match lists.
   uint32_t top_ac_match_list_lengths[100];
 
   // Percentiles of match lists' lengths. If the i-th value in the array is N
   // then i percent of the match lists have N or less items.
   uint32_t ac_match_list_length_pctls[101];
 
   // Size of Aho-Corasick transition & match tables.
   uint32_t ac_tables_size;
 };
 
 
-#ifdef YR_PROFILING_ENABLED
 struct YR_PROFILING_INFO
 {
   YR_RULE* rule;
   uint64_t cost;
 };
-#endif
 
 
 typedef const uint8_t* (*YR_MEMORY_BLOCK_FETCH_DATA_FUNC)(
@@ -670,79 +668,78 @@ typedef int (*YR_CALLBACK_FUNC)(
 struct YR_SCAN_CONTEXT
 {
   // File size of the file being scanned.
   uint64_t file_size;
 
   // Entry point of the file being scanned, if the file is PE or ELF.
   uint64_t entry_point;
 
   // Scanning flags.
   int flags;
 
   // Canary value used for preventing hand-crafted objects from being embedded
   // in compiled rules and used to exploit YARA. The canary value is initialized
   // to a random value and is subsequently set to all objects created by
   // yr_object_create. The canary is verified when objects are used by
   // yr_execute_code.
   int canary;
 
   // Scan timeout in nanoseconds.
   uint64_t timeout;
 
   // Pointer to user-provided data passed to the callback function.
   void* user_data;
 
   // Pointer to the user-provided callback function that is called when an
   // event occurs during the scan (a rule matching, a module being loaded, etc)
   YR_CALLBACK_FUNC callback;
 
   // Pointer to the YR_RULES object associated to this scan context.
   YR_RULES* rules;
 
   // Pointer to the YR_STRING causing the most recent scan error.
   YR_STRING* last_error_string;
 
   // Pointer to the iterator used for scanning
   YR_MEMORY_BLOCK_ITERATOR* iterator;
 
   // Pointer to a table mapping identifiers to YR_OBJECT structures. This table
   // contains entries for external variables and modules.
   YR_HASH_TABLE* objects_table;
 
   // Notebook used for storing YR_MATCH structures associated to the matches
   // found.
   YR_NOTEBOOK * matches_notebook;
 
   // Stopwatch used for measuring the time elapsed during the scan.
   YR_STOPWATCH stopwatch;
 
   // Fiber pool used by yr_re_exec.
   RE_FIBER_POOL re_fiber_pool;
 
   // A bitmap with one bit per rule, bit N is set when the rule with index N
   // has matched.
   YR_BITMASK* rule_matches_flags;
 
   // A bitmap with one bit per namespace, bit N is set if the namespace with
   // index N has some global rule that is not satisfied.
   YR_BITMASK* ns_unsatisfied_flags;
 
   // Array with pointers to lists of matches. Item N in the array has the
   // list of matches for string with index N.
   YR_MATCHES* matches;
 
   // "unconfirmed_matches" is like "matches" but for strings that are part of
   // a chain. Let's suppose that the string S is split in two chained strings
   // S1 <- S2. When a match is found for S1, we can't be sure that S matches
   // until a match for S2 is found (within the range defined by chain_gap_min
   // and chain_gap_max), so the matches for S1 are put in "unconfirmed_matches"
   // until they can be confirmed or discarded.
   YR_MATCHES* unconfirmed_matches;
 
   // rule_cost is a pointer to an array of 64-bit integers with one entry per
-  // rule. Entry N has the time cost for rule with index N.
-  #ifdef YR_PROFILING_ENABLED
+  // rule. Entry N has the time cost for rule with index N. If YARA is not
+  // built with YR_PROFILING_ENABLED this pointer is NULL.
   uint64_t* time_cost;
-  #endif
 };
 
 
diff --git a/libyara/scanner.c b/libyara/scanner.c
index 4afe8c12..bd25ff31 100644
--- a/libyara/scanner.c
+++ b/libyara/scanner.c
@@ -163,71 +163,79 @@ static void _yr_scanner_clean_matches(
 YR_API int yr_scanner_create(
     YR_RULES* rules,
     YR_SCANNER** scanner)
 {
   YR_EXTERNAL_VARIABLE* external;
   YR_SCANNER* new_scanner;
 
   new_scanner = (YR_SCANNER*) yr_calloc(1, sizeof(YR_SCANNER));
 
   if (new_scanner == NULL)
     return ERROR_INSUFFICIENT_MEMORY;
 
   FAIL_ON_ERROR_WITH_CLEANUP(
       yr_hash_table_create(64, &new_scanner->objects_table),
-      yr_scanner_destroy(new_scanner));
+      yr_free(new_scanner));
 
   new_scanner->rules = rules;
   new_scanner->entry_point = YR_UNDEFINED;
   new_scanner->canary = rand();
 
   // By default report both matching and non-matching rules.
   new_scanner->flags = \
       SCAN_FLAGS_REPORT_RULES_MATCHING |
       SCAN_FLAGS_REPORT_RULES_NOT_MATCHING;
 
   new_scanner->rule_matches_flags = (YR_BITMASK*) yr_calloc(
       sizeof(YR_BITMASK), YR_BITMASK_SIZE(rules->num_rules));
 
   new_scanner->ns_unsatisfied_flags = (YR_BITMASK*) yr_calloc(
       sizeof(YR_BITMASK), YR_BITMASK_SIZE(rules->num_namespaces));
 
   new_scanner->matches = (YR_MATCHES*) yr_calloc(
       rules->num_strings, sizeof(YR_MATCHES));
 
   new_scanner->unconfirmed_matches = (YR_MATCHES*) yr_calloc(
       rules->num_strings, sizeof(YR_MATCHES));
 
   #ifdef YR_PROFILING_ENABLED
   new_scanner->time_cost = (uint64_t*) yr_calloc(
       rules->num_rules, sizeof(uint64_t));
+
+  if (new_scanner->time_cost == NULL)
+  {
+    yr_scanner_destroy(new_scanner);
+    return ERROR_INSUFFICIENT_MEMORY;
+  }
+  #else
+  new_scanner->time_cost = NULL;
   #endif
 
   external = rules->externals_list_head;
 
   while (!EXTERNAL_VARIABLE_IS_NULL(external))
   {
     YR_OBJECT* object;
 
     FAIL_ON_ERROR_WITH_CLEANUP(
         yr_object_from_external_variable(external, &object),
         // cleanup
         yr_scanner_destroy(new_scanner));
 
     FAIL_ON_ERROR_WITH_CLEANUP(
         yr_hash_table_add(
             new_scanner->objects_table,
             external->identifier,
             NULL,
             (void*) object),
         // cleanup
         yr_object_destroy(object);
         yr_scanner_destroy(new_scanner));
 
     yr_object_set_canary(object, new_scanner->canary);
     external++;
   }
 
   *scanner = new_scanner;
 
   return ERROR_SUCCESS;
 }
@@ -631,14 +639,13 @@ YR_API YR_STRING* yr_scanner_last_error_string(
 YR_API YR_RULE* yr_scanner_last_error_rule(
     YR_SCANNER* scanner)
 {
   if (scanner->last_error_string == NULL)
     return NULL;
 
   return &scanner->rules->rules_list_head[scanner->last_error_string->rule_idx];
 }
 
 
-#ifdef YR_PROFILING_ENABLED
 static int sort_by_cost_desc(
     const struct YR_PROFILING_INFO* r1,
     const struct YR_PROFILING_INFO* r2)
@@ -692,31 +699,30 @@ YR_API YR_PROFILING_INFO* yr_scanner_get_profiling_info(
 YR_API int yr_scanner_print_profiling_info(
     YR_SCANNER* scanner)
 {
   printf("\n===== PROFILING INFORMATION =====\n\n");
 
   YR_PROFILING_INFO* profiling_info = yr_scanner_get_profiling_info(scanner);
 
   if (profiling_info == NULL)
     return ERROR_INSUFFICIENT_MEMORY;
 
 
   YR_PROFILING_INFO* pi = profiling_info;
 
   while (pi->rule != NULL)
   {
     printf(
         "%s:%s: %" PRIu64 "\n",
         pi->rule->ns->name,
         pi->rule->identifier,
         pi->cost);
 
     pi++;
   }
 
   printf("\n=================================\n");
 
   yr_free(profiling_info);
 
   return ERROR_SUCCESS;
 }
-#endif
