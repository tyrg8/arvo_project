commit f29cab3bbe2dc1cf2661e74b6a85214bd23194cb
Author: Kostya Serebryany <kcc@google.com>
Date:   Wed Sep 7 17:05:50 2022 -0700

    introduce the Stats struct; the actual use will follow.
    
    PiperOrigin-RevId: 472850149

diff --git a/BUILD b/BUILD
index cd41a55..44d0246 100644
--- a/BUILD
+++ b/BUILD
@@ -102,6 +102,17 @@ cc_library(
     ],
 )
 
+cc_library(
+    name = "stats",
+    srcs = ["stats.cc"],
+    hdrs = ["stats.h"],
+    deps = [
+        ":environment",
+        "@centipede//:logging",
+        "@com_google_absl//absl/types:span",
+    ],
+)
+
 cc_library(
     name = "blob_file",
     srcs = ["blob_file.cc"],
@@ -477,6 +488,17 @@ cc_test(
     ],
 )
 
+cc_test(
+    name = "stats_test",
+    srcs = ["stats_test.cc"],
+    deps = [
+        ":stats",
+        "@centipede//:logging",
+        "@com_google_absl//absl/types:span",
+        "@com_google_googletest//:gtest_main",
+    ],
+)
+
 cc_test(
     name = "blob_file_test",
     srcs = ["blob_file_test.cc"],
diff --git a/stats.cc b/stats.cc
new file mode 100644
index 0000000..4601fb1
--- /dev/null
+++ b/stats.cc
@@ -0,0 +1,85 @@
+// Copyright 2022 The Centipede Authors.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      https://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#include "./stats.h"
+
+#include <algorithm>
+#include <map>
+#include <numeric>
+#include <string>
+
+#include "absl/types/span.h"
+#include "./environment.h"
+#include "./logging.h"
+
+namespace centipede {
+
+namespace {
+// Helper for PrintExperimentStats().
+// Prints the experiment summary for the `field`.
+void PrintExperimentStatsForOneStatValue(absl::Span<const Stats> stats_vec,
+                                         absl::Span<const Environment> env_vec,
+                                         std::ostream &os,
+                                         std::atomic<uint64_t> Stats::*field) {
+  CHECK_EQ(stats_vec.size(), env_vec.size());
+  // Maps expriment names to indicies in env_vec/stats_vec.
+  // We use std::map because we want lexicographic order of experiment names.
+  std::map<std::string_view, std::vector<size_t>> experiment_to_indices;
+  for (size_t i = 0; i < env_vec.size(); ++i) {
+    experiment_to_indices[env_vec[i].experiment_name].push_back(i);
+  }
+
+  // Iterate over every experiment_name.
+  for (const auto &[experiment_name, experiment_indices] :
+       experiment_to_indices) {
+    os << experiment_name << ": ";
+    std::vector<uint64_t> stat_values;
+    CHECK_NE(experiment_indices.size(), 0);
+    // Get the required stat fields into a vector `stat_values`.
+    stat_values.reserve(experiment_indices.size());
+    for (const auto idx : experiment_indices) {
+      // stat_values.push_back(extract_value(stats_vec[idx]));
+      stat_values.push_back((stats_vec[idx].*field));
+    }
+    // Print min/max/avg and the full sorted contents of `stat_values`.
+    std::sort(stat_values.begin(), stat_values.end());
+    os << "min:\t" << stat_values.front() << "\t";
+    os << "max:\t" << stat_values.back() << "\t";
+    os << "avg:\t"
+       << (std::accumulate(stat_values.begin(), stat_values.end(), 0.) /
+           stat_values.size())
+       << "\t";
+    os << "--";
+    for (const auto value : stat_values) {
+      os << "\t" << value;
+    }
+    os << std::endl;
+  }
+}
+
+}  // namespace
+
+void PrintExperimentStats(absl::Span<const Stats> stats_vec,
+                          absl::Span<const Environment> env_vec,
+                          std::ostream &os) {
+  os << "Coverage:\n";
+  PrintExperimentStatsForOneStatValue(stats_vec, env_vec, os,
+                                      &Stats::num_covered_pcs);
+
+  os << "Corpus size:\n";
+  PrintExperimentStatsForOneStatValue(stats_vec, env_vec, os,
+                                      &Stats::corpus_size);
+}
+
+}  // namespace centipede
diff --git a/stats.h b/stats.h
new file mode 100644
index 0000000..3bf44e6
--- /dev/null
+++ b/stats.h
@@ -0,0 +1,46 @@
+// Copyright 2022 The Centipede Authors.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      https://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#ifndef THIRD_PARTY_CENTIPEDE_STATS_H_
+#define THIRD_PARTY_CENTIPEDE_STATS_H_
+
+#include <atomic>
+#include <cstddef>
+#include <ostream>
+
+#include "absl/types/span.h"
+#include "./environment.h"
+
+namespace centipede {
+
+// A set of statistics about the fuzzing progress.
+// Each worker thread has its own Stats object and updates it periodically.
+// The updates must not be frequent for performance reasons.
+// All such objects may be read synchronously by another thread,
+// hence the use of atomics.
+// These objects may also be accessed after all worker threads have joined.
+struct Stats {
+  std::atomic<uint64_t> num_covered_pcs;
+  std::atomic<uint64_t> corpus_size;
+};
+
+// Takes a span of Stats objects `stats_vec` and the corresponding span of
+// Environment objects `env_vec`. If the environments indicate the use of
+// --experiment flag, prints the experiment summary to `os`. Otherwise no-op.
+void PrintExperimentStats(absl::Span<const Stats> stats_vec,
+                          absl::Span<const Environment> env_vec,
+                          std::ostream& os);
+
+}  // namespace centipede
+#endif  // THIRD_PARTY_CENTIPEDE_STATS_H_
diff --git a/stats_test.cc b/stats_test.cc
new file mode 100644
index 0000000..dbf49c0
--- /dev/null
+++ b/stats_test.cc
@@ -0,0 +1,57 @@
+// Copyright 2022 The Centipede Authors.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//      https://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#include "./stats.h"
+
+#include <sstream>
+
+#include "googlemock/include/gmock/gmock.h"
+#include "googletest/include/gtest/gtest.h"
+#include "./logging.h"
+
+namespace centipede {
+
+TEST(Stats, PrintExperimentStats) {
+  std::stringstream ss;
+  std::vector<Stats> stats_vec(4);
+  stats_vec[0].num_covered_pcs = 10;
+  stats_vec[1].num_covered_pcs = 15;
+  stats_vec[2].num_covered_pcs = 25;
+  stats_vec[3].num_covered_pcs = 40;
+
+  stats_vec[0].corpus_size = 1000;
+  stats_vec[1].corpus_size = 2000;
+  stats_vec[2].corpus_size = 3000;
+  stats_vec[3].corpus_size = 4000;
+
+  std::vector<Environment> env_vec(4);
+  env_vec[0].experiment_name = "Experiment A";
+  env_vec[1].experiment_name = "Experiment B";
+  env_vec[2].experiment_name = "Experiment A";
+  env_vec[3].experiment_name = "Experiment B";
+
+  PrintExperimentStats(stats_vec, env_vec, ss);
+  LOG(INFO) << "\n" << ss.str();
+  const char *expected =
+      "Coverage:\n"
+      "Experiment A: min:\t10\tmax:\t25\tavg:\t17.5\t--\t10\t25\n"
+      "Experiment B: min:\t15\tmax:\t40\tavg:\t27.5\t--\t15\t40\n"
+      "Corpus size:\n"
+      "Experiment A: min:\t1000\tmax:\t3000\tavg:\t2000\t--\t1000\t3000\n"
+      "Experiment B: min:\t2000\tmax:\t4000\tavg:\t3000\t--\t2000\t4000\n";
+
+  EXPECT_THAT(ss.str(), testing::StrEq(expected));
+}
+
+}  // namespace centipede
