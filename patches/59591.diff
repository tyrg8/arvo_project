commit 6fc018e9e593a3235dbf7026726ba4665373b741
Author: Alan Modra <amodra@gmail.com>
Date:   Mon Jun 5 16:21:25 2023 +0930

    Yet another ecoff fuzzed object fix
    
            * ecoff.c (_bfd_ecoff_slurp_symbol_table): Sanity check fdr_ptr
            csym against remaining space for symbols.  Error on out of bounds
            fdr_ptr fields.

diff --git a/bfd/ecoff.c b/bfd/ecoff.c
index c4c2e530be0..573f52d0299 100644
--- a/bfd/ecoff.c
+++ b/bfd/ecoff.c
@@ -869,147 +869,153 @@ bool
 _bfd_ecoff_slurp_symbol_table (bfd *abfd)
 {
   const struct ecoff_backend_data * const backend = ecoff_backend (abfd);
   const bfd_size_type external_ext_size
     = backend->debug_swap.external_ext_size;
   const bfd_size_type external_sym_size
     = backend->debug_swap.external_sym_size;
   void (* const swap_ext_in) (bfd *, void *, EXTR *)
     = backend->debug_swap.swap_ext_in;
   void (* const swap_sym_in) (bfd *, void *, SYMR *)
     = backend->debug_swap.swap_sym_in;
   ecoff_symbol_type *internal;
   ecoff_symbol_type *internal_ptr;
   char *eraw_src;
   char *eraw_end;
   FDR *fdr_ptr;
   FDR *fdr_end;
   size_t amt;
 
   /* If we've already read in the symbol table, do nothing.  */
   if (ecoff_data (abfd)->canonical_symbols != NULL)
     return true;
 
   /* Get the symbolic information.  */
   if (! _bfd_ecoff_slurp_symbolic_info (abfd, NULL,
 					&ecoff_data (abfd)->debug_info))
     return false;
   if (bfd_get_symcount (abfd) == 0)
     return true;
 
   if (_bfd_mul_overflow (bfd_get_symcount (abfd),
 			 sizeof (ecoff_symbol_type), &amt))
     {
       bfd_set_error (bfd_error_file_too_big);
       return false;
     }
   internal = (ecoff_symbol_type *) bfd_alloc (abfd, amt);
   if (internal == NULL)
     return false;
 
   internal_ptr = internal;
   eraw_src = (char *) ecoff_data (abfd)->debug_info.external_ext;
   eraw_end = (eraw_src
 	      + (ecoff_data (abfd)->debug_info.symbolic_header.iextMax
 		 * external_ext_size));
   for (; eraw_src < eraw_end; eraw_src += external_ext_size, internal_ptr++)
     {
       EXTR internal_esym;
 
       (*swap_ext_in) (abfd, (void *) eraw_src, &internal_esym);
 
       /* PR 17512: file: 3372-1000-0.004.  */
       HDRR *symhdr = &ecoff_data (abfd)->debug_info.symbolic_header;
       if (internal_esym.asym.iss >= symhdr->issExtMax
 	  || internal_esym.asym.iss < 0)
 	{
 	  bfd_set_error (bfd_error_bad_value);
 	  return false;
 	}
 
       internal_ptr->symbol.name = (ecoff_data (abfd)->debug_info.ssext
 				   + internal_esym.asym.iss);
 
       if (!ecoff_set_symbol_info (abfd, &internal_esym.asym,
 				  &internal_ptr->symbol, 1,
 				  internal_esym.weakext))
 	return false;
 
       /* The alpha uses a negative ifd field for section symbols.  */
       /* PR 17512: file: 3372-1983-0.004.  */
       if (internal_esym.ifd >= symhdr->ifdMax
 	  || internal_esym.ifd < 0)
 	internal_ptr->fdr = NULL;
       else
 	internal_ptr->fdr = (ecoff_data (abfd)->debug_info.fdr
 			     + internal_esym.ifd);
       internal_ptr->local = false;
       internal_ptr->native = (void *) eraw_src;
     }
 
   /* The local symbols must be accessed via the fdr's, because the
      string and aux indices are relative to the fdr information.  */
   fdr_ptr = ecoff_data (abfd)->debug_info.fdr;
   fdr_end = fdr_ptr + ecoff_data (abfd)->debug_info.symbolic_header.ifdMax;
   for (; fdr_ptr < fdr_end; fdr_ptr++)
     {
       char *lraw_src;
       char *lraw_end;
       HDRR *symhdr = &ecoff_data (abfd)->debug_info.symbolic_header;
 
+      if (fdr_ptr->csym == 0)
+	continue;
       if (fdr_ptr->isymBase < 0
 	  || fdr_ptr->isymBase > symhdr->isymMax
-	  || fdr_ptr->csym <= 0
-	  || fdr_ptr->csym > symhdr->isymMax - fdr_ptr->isymBase
+	  || fdr_ptr->csym < 0
+	  || fdr_ptr->csym > ((long) bfd_get_symcount (abfd)
+			      - (internal_ptr - internal))
 	  || fdr_ptr->issBase < 0
 	  || fdr_ptr->issBase > symhdr->issMax)
-	continue;
+	{
+	  bfd_set_error (bfd_error_bad_value);
+	  return false;
+	}
       lraw_src = ((char *) ecoff_data (abfd)->debug_info.external_sym
 		  + fdr_ptr->isymBase * external_sym_size);
       lraw_end = lraw_src + fdr_ptr->csym * external_sym_size;
       for (;
 	   lraw_src < lraw_end;
 	   lraw_src += external_sym_size, internal_ptr++)
 	{
 	  SYMR internal_sym;
 
 	  (*swap_sym_in) (abfd, (void *) lraw_src, &internal_sym);
 
 	  if (internal_sym.iss >= symhdr->issMax - fdr_ptr->issBase
 	      || internal_sym.iss < 0)
 	    {
 	      bfd_set_error (bfd_error_bad_value);
 	      return false;
 	    }
 	  internal_ptr->symbol.name = (ecoff_data (abfd)->debug_info.ss
 				       + fdr_ptr->issBase
 				       + internal_sym.iss);
 	  if (!ecoff_set_symbol_info (abfd, &internal_sym,
 				      &internal_ptr->symbol, 0, 0))
 	    return false;
 	  internal_ptr->fdr = fdr_ptr;
 	  internal_ptr->local = true;
 	  internal_ptr->native = (void *) lraw_src;
 	}
     }
 
   /* PR 17512: file: 3372-3080-0.004.
      A discrepancy between ecoff_data (abfd)->debug_info.symbolic_header.isymMax
      and ecoff_data (abfd)->debug_info.symbolic_header.ifdMax can mean that
      we have fewer symbols than we were expecting.  Allow for this by updating
      the symbol count and warning the user.  */
   if (internal_ptr - internal < (ptrdiff_t) bfd_get_symcount (abfd))
     {
       abfd->symcount = internal_ptr - internal;
       _bfd_error_handler
 	/* xgettext:c-format */
 	(_("%pB: warning: isymMax (%ld) is greater than ifdMax (%ld)"),
 	 abfd, ecoff_data (abfd)->debug_info.symbolic_header.isymMax,
 	 ecoff_data (abfd)->debug_info.symbolic_header.ifdMax);
     }
 
   ecoff_data (abfd)->canonical_symbols = internal;
 
   return true;
 }
 
 /* Return the amount of space needed for the canonical symbols.  */
