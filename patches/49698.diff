commit 043a50807eb19af844dd34281900b2ad8571325f
Author: Kimball Thurston <kdt3rd@gmail.com>
Date:   Tue Oct 25 12:51:17 2022 +1300

    fix huf memory boundary checks (#1290)
    
    Fixes OSS-Fuzz 49698
    
    Signed-off-by: Kimball Thurston <kdt3rd@gmail.com>
    
    Signed-off-by: Kimball Thurston <kdt3rd@gmail.com>

diff --git a/src/lib/OpenEXRCore/internal_huf.c b/src/lib/OpenEXRCore/internal_huf.c
index 544ad5ee..796b1770 100644
--- a/src/lib/OpenEXRCore/internal_huf.c
+++ b/src/lib/OpenEXRCore/internal_huf.c
@@ -1746,79 +1746,81 @@ exr_result_t
 internal_huf_decompress (
     exr_decode_pipeline_t* decode,
     const uint8_t*         compressed,
     uint64_t               nCompressed,
     uint16_t*              raw,
     uint64_t               nRaw,
     void*                  spare,
     uint64_t               sparebytes)
 {
     uint32_t                            im, iM, nBits;
     uint64_t                            nBytes;
     const uint8_t*                      ptr;
     exr_result_t                        rv;
     const struct _internal_exr_context* pctxt = NULL;
+    const uint64_t hufInfoBlockSize           = 5 * sizeof (uint32_t);
 
     if (decode) pctxt = EXR_CCTXT (decode->context);
     //
     // need at least 20 bytes for header
     //
     if (nCompressed < 20)
     {
         if (nRaw != 0) return EXR_ERR_INVALID_ARGUMENT;
         return EXR_ERR_SUCCESS;
     }
 
     if (sparebytes != internal_exr_huf_decompress_spare_bytes ())
         return EXR_ERR_INVALID_ARGUMENT;
 
     im = readUInt (compressed);
     iM = readUInt (compressed + 4);
     // uint32_t tableLength = readUInt (compressed + 8);
     nBits = readUInt (compressed + 12);
     // uint32_t future = readUInt (compressed + 16);
 
     if (im >= HUF_ENCSIZE || iM >= HUF_ENCSIZE) return EXR_ERR_CORRUPT_CHUNK;
 
-    ptr = compressed + 20;
+    ptr = compressed + hufInfoBlockSize;
 
     nBytes = (((uint64_t) (nBits) + 7)) / 8;
-    if (ptr + nBytes > compressed + nCompressed) return EXR_ERR_OUT_OF_MEMORY;
+
+    // must be nBytes remaining in buffer
+    if (hufInfoBlockSize + nBytes > nCompressed) return EXR_ERR_OUT_OF_MEMORY;
 
     //
     // Fast decoder needs at least 2x64-bits of compressed data, and
     // needs to be run-able on this platform. Otherwise, fall back
     // to the original decoder
     //
     if (fasthuf_decode_enabled () && nBits > 128)
     {
         FastHufDecoder* fhd = (FastHufDecoder*) spare;
 
-        // must be nBytes remaining in buffer
-        if (ptr - compressed + nBytes > (uint64_t) nCompressed)
-            return EXR_ERR_OUT_OF_MEMORY;
-
-        rv = fasthuf_initialize (
-            pctxt, fhd, &ptr, nCompressed - (ptr - compressed), im, iM, iM);
+        rv = fasthuf_initialize (pctxt, fhd, &ptr, nCompressed - hufInfoBlockSize, im, iM, iM);
         if (rv == EXR_ERR_SUCCESS)
+        {
+            if ( (uint64_t)(ptr - compressed) + nBytes > nCompressed )
+                return EXR_ERR_OUT_OF_MEMORY;
             rv = fasthuf_decode (pctxt, fhd, ptr, nBits, raw, nRaw);
+        }
     }
     else
     {
         uint64_t* freq     = (uint64_t*) spare;
         HufDec*   hdec     = (HufDec*) (freq + HUF_ENCSIZE);
         uint64_t  nLeft    = nCompressed - 20;
         uint64_t  nTableSz = 0;
 
         hufClearDecTable (hdec);
         hufUnpackEncTable (&ptr, &nLeft, im, iM, freq);
 
         if (nBits > 8 * nLeft) return EXR_ERR_CORRUPT_CHUNK;
 
         rv = hufBuildDecTable (freq, im, iM, hdec);
         if (rv == EXR_ERR_SUCCESS)
             rv = hufDecode (freq, hdec, ptr, nBits, iM, nRaw, raw);
 
         hufFreeDecTable (hdec);
     }
     return rv;
 }
