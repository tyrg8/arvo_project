commit b7484d2ed35338970b727e55adb509f2200b0e40
Author: Dirk Farin <dirk.farin@gmail.com>
Date:   Fri Aug 14 13:05:04 2020 +0200

    check color conversion input for correct size of alpha plane (oss-fuzz 22094)

diff --git a/libheif/heif_colorconversion.cc b/libheif/heif_colorconversion.cc
index 33fb746..54771fd 100644
--- a/libheif/heif_colorconversion.cc
+++ b/libheif/heif_colorconversion.cc
@@ -2921,63 +2921,80 @@ std::shared_ptr<HeifPixelImage> ColorConversionPipeline::convert_image(const std
 std::shared_ptr<HeifPixelImage> heif::convert_colorspace(const std::shared_ptr<HeifPixelImage>& input,
                                                          heif_colorspace target_colorspace,
                                                          heif_chroma target_chroma,
                                                          std::shared_ptr<const color_profile_nclx> target_profile,
                                                          int output_bpp)
 {
+  // --- check that input image is valid
+
+  int width = input->get_width();
+  int height = input->get_width();
+
+  // alpha image should have full image resolution
+
+  if (input->has_channel(heif_channel_Alpha)) {
+    if (input->get_width(heif_channel_Alpha) != width ||
+        input->get_height(heif_channel_Alpha) != height) {
+      return nullptr;
+    }
+  }
+
+
+  // --- prepare conversion
+
   ColorState input_state;
   input_state.colorspace = input->get_colorspace();
   input_state.chroma = input->get_chroma_format();
   input_state.has_alpha = input->has_channel(heif_channel_Alpha) || is_chroma_with_alpha(input->get_chroma_format());
   input_state.nclx_profile = std::dynamic_pointer_cast<const color_profile_nclx>(input->get_color_profile());
 
   std::set<enum heif_channel> channels = input->get_channel_set();
   assert(!channels.empty());
   input_state.bits_per_pixel = input->get_bits_per_pixel(*(channels.begin()));
 
   ColorState output_state = input_state;
   output_state.colorspace = target_colorspace;
   output_state.chroma = target_chroma;
   output_state.nclx_profile = target_profile;
 
   // If we convert to an interleaved format, we want alpha only if present in the
   // interleaved output format.
   // For planar formats, we include an alpha plane when included in the input.
 
   if (num_interleaved_pixels_per_plane(target_chroma) > 1) {
     output_state.has_alpha = is_chroma_with_alpha(target_chroma);
   }
   else {
     output_state.has_alpha = input_state.has_alpha;
   }
 
   if (output_bpp) {
     output_state.bits_per_pixel = output_bpp;
   }
 
 
   // interleaved RGB formats always have to be 8-bit
 
   if (target_chroma == heif_chroma_interleaved_RGB ||
       target_chroma == heif_chroma_interleaved_RGBA) {
     output_state.bits_per_pixel = 8;
   }
 
   // interleaved RRGGBB formats have to be >8-bit.
   // If we don't know a target bit-depth, use 10 bit.
 
   if ((target_chroma == heif_chroma_interleaved_RRGGBB_LE ||
        target_chroma == heif_chroma_interleaved_RRGGBB_BE ||
        target_chroma == heif_chroma_interleaved_RRGGBBAA_LE ||
        target_chroma == heif_chroma_interleaved_RRGGBBAA_BE) &&
       output_state.bits_per_pixel <= 8) {
     output_state.bits_per_pixel = 10;
   }
 
   ColorConversionPipeline pipeline;
   bool success = pipeline.construct_pipeline(input_state, output_state);
   if (!success) {
     return nullptr;
   }
 
   return pipeline.convert_image(input);
 }
