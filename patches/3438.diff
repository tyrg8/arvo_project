commit ea2ce48df48c754e0e1fd459101085b344c70eaf
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Sun Sep 24 17:05:54 2017 +0300

    UncompressedDecompressor::sanityCheck(): always throw if not enough data.
    
    FIXME: need to come up with some common variable to allow
    better handling of such [truncated] cases.

diff --git a/src/librawspeed/decompressors/UncompressedDecompressor.cpp b/src/librawspeed/decompressors/UncompressedDecompressor.cpp
index 2303274e..744a2697 100644
--- a/src/librawspeed/decompressors/UncompressedDecompressor.cpp
+++ b/src/librawspeed/decompressors/UncompressedDecompressor.cpp
@@ -38,37 +38,40 @@ using std::min;
 
 namespace rawspeed {
 
-void UncompressedDecompressor::sanityCheck(uint32* h, int bpl) {
+void UncompressedDecompressor::sanityCheck(const uint32* h, int bpl) {
   assert(h != nullptr);
   assert(*h > 0);
   assert(bpl > 0);
   assert(input.getSize() > 0);
 
   if (input.getRemainSize() >= bpl * *h)
     return; // all good!
 
   if (static_cast<int>(input.getRemainSize()) < bpl)
     ThrowIOE("Not enough data to decode a single line. Image file truncated.");
 
   mRaw->setError("Image truncated (file is too short)");
 
   assert(((int)input.getRemainSize() >= bpl) &&
          (input.getRemainSize() < bpl * *h));
 
   const auto min_h = input.getRemainSize() / bpl;
   assert(min_h < *h);
   assert(input.getRemainSize() >= bpl * min_h);
 
-  *h = min_h;
+  ThrowIOE("Image truncated, only %u of %u lines found", min_h, *h);
+  // FIXME: need to come up with some common variable to allow proceeding here
+
+  // *h = min_h;
 }
 
-void UncompressedDecompressor::sanityCheck(uint32 w, uint32* h, int bpp) {
+void UncompressedDecompressor::sanityCheck(uint32 w, const uint32* h, int bpp) {
   assert(w > 0);
   assert(bpp > 0);
 
   // bytes per line
   const auto bpl = bpp * w;
   assert(bpl > 0);
 
   sanityCheck(h, bpl);
 }
diff --git a/src/librawspeed/decompressors/UncompressedDecompressor.h b/src/librawspeed/decompressors/UncompressedDecompressor.h
index fada8c8d..8d4a524b 100644
--- a/src/librawspeed/decompressors/UncompressedDecompressor.h
+++ b/src/librawspeed/decompressors/UncompressedDecompressor.h
@@ -37,12 +37,12 @@ class iPoint2D;
 class UncompressedDecompressor final : public AbstractDecompressor {
   ByteStream input;
   RawImage mRaw;
 
   // check buffer size, throw, or compute minimal height that can be decoded
-  void sanityCheck(uint32* h, int bpl);
+  void sanityCheck(const uint32* h, int bpl);
 
   // check buffer size, throw, or compute minimal height that can be decoded
-  void sanityCheck(uint32 w, uint32* h, int bpp);
+  void sanityCheck(uint32 w, const uint32* h, int bpp);
 
   // for special packed formats
   int bytesPerLine(int w, bool skips);
