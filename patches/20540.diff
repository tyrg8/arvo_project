commit 90e08b3568d8963a459cf06c4e67ff6fc99298e3
Author: Luca Deri <deri@ntop.org>
Date:   Wed Feb 19 23:38:33 2020 +0100

    Fixes #845

diff --git a/src/lib/third_party/src/ahocorasick.c b/src/lib/third_party/src/ahocorasick.c
index 27134c0c..c2b958bb 100644
--- a/src/lib/third_party/src/ahocorasick.c
+++ b/src/lib/third_party/src/ahocorasick.c
@@ -65,61 +65,69 @@ AC_AUTOMATA_t * ac_automata_init (MATCH_CALLBACK_f mc)
 /******************************************************************************
  * FUNCTION: ac_automata_add
  * Adds pattern to the automata.
  * PARAMS:
  * AC_AUTOMATA_t * thiz: the pointer to the automata
  * AC_PATTERN_t * patt: the pointer to added pattern
  * RETUERN VALUE: AC_ERROR_t
  * the return value indicates the success or failure of adding action
  ******************************************************************************/
 AC_ERROR_t ac_automata_add (AC_AUTOMATA_t * thiz, AC_PATTERN_t * patt)
 {
   unsigned int i;
   AC_NODE_t * n = thiz->root;
   AC_NODE_t * next;
   AC_ALPHABET_t alpha;
 
   if(!thiz->automata_open)
     return ACERR_AUTOMATA_CLOSED;
 
   if (!patt->length)
     return ACERR_ZERO_PATTERN;
 
   if (patt->length > AC_PATTRN_MAX_LENGTH)
     return ACERR_LONG_PATTERN;
 
   for (i=0; i<patt->length; i++)
   {
     alpha = patt->astring[i];
     if ((next = node_find_next(n, alpha)))
     {
       n = next;
       continue;
     }
     else
     {
       next = node_create_next(n, alpha);
       next->depth = n->depth + 1;
       n = next;
       ac_automata_register_nodeptr(thiz, n);
     }
   }
 
-  if(n->final)
+  if(n->final) {
+#if 0
+    /* Original code */
     return ACERR_DUPLICATE_PATTERN;
-
+#else
+    /* ntop */
+    memcpy(&n->matched_patterns->rep, &patt->rep, sizeof(AC_REP_t));
+    return ACERR_SUCCESS;
+#endif
+  }
+      
   n->final = 1;
   node_register_matchstr(n, patt, 0);
   thiz->total_patterns++;
 
   return ACERR_SUCCESS;
 }
 
 /******************************************************************************
  * FUNCTION: ac_automata_finalize
  * Locate the failure node for all nodes and collect all matched pattern for
  * every node. it also sorts outgoing edges of node, so binary search could be
  * performed on them. after calling this function the automate literally will
  * be finalized and you can not add new patterns to the automate.
  * PARAMS:
  * AC_AUTOMATA_t * thiz: the pointer to the automata
  ******************************************************************************/
