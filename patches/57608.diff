commit ff2de50aa4bf086880ab8cd1c2aee7e998c2c22a
Author: Andrew Bartlett <abartlet@samba.org>
Date:   Mon May 1 14:13:15 2023 +1200

    librpc: Fix talloc hierarchy for ndr_compression_state
    
    The complexity of generic_mszip_free() is not needed, nor is a talloc
    destructor required if the memory is correctly created in a tree.
    
    Credit to OSS-Fuzz for showing the use-after-free
    
    REF: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=57608
    
    BUG: https://bugzilla.samba.org/show_bug.cgi?id=15349
    
    Signed-off-by: Andrew Bartlett <abartlet@samba.org>
    Reviewed-by: Joseph Sutton <josephsutton@catalyst.net.nz>

diff --git a/librpc/ndr/ndr_cab.c b/librpc/ndr/ndr_cab.c
index ac8565fd1e0..322412fdac3 100644
--- a/librpc/ndr/ndr_cab.c
+++ b/librpc/ndr/ndr_cab.c
@@ -298,79 +298,78 @@ _PUBLIC_ enum ndr_err_code ndr_push_cab_file(struct ndr_push *ndr, int ndr_flags
 /* Pull all CFDATA of a folder.
  *
  * This works on a folder level because compression type is set per
  * folder, and a compression state can be shared between CFDATA of the
  * same folder.
  *
  * This is not a regular NDR func as we pass the compression type and
  * the number of CFDATA as extra arguments
  */
 static enum ndr_err_code ndr_pull_folder_cfdata(struct ndr_pull *ndr,
 						struct CFDATA *r,
 						enum cf_compress_type cab_ctype,
 						size_t num_cfdata)
 {
 	size_t i;
 	enum ndr_compression_alg ndr_ctype = 0;
 
 	if (cab_ctype == CF_COMPRESS_MSZIP) {
 		ndr_ctype = NDR_COMPRESSION_MSZIP_CAB;
 		NDR_CHECK(ndr_pull_compression_state_init(ndr, NDR_COMPRESSION_MSZIP_CAB, &ndr->cstate));
 	}
 
 	for (i = 0; i < num_cfdata; i++, r++) {
 		NDR_CHECK(ndr_pull_uint32(ndr, NDR_SCALARS, &r->csum));
 		NDR_CHECK(ndr_pull_uint16(ndr, NDR_SCALARS, &r->cbData));
 		NDR_CHECK(ndr_pull_uint16(ndr, NDR_SCALARS, &r->cbUncomp));
 
 		switch (cab_ctype) {
 		case CF_COMPRESS_NONE:
 			/* just copy the data */
 			NDR_PULL_NEED_BYTES(ndr, r->cbUncomp);
 			r->ab = data_blob_talloc(ndr->current_mem_ctx,
 						 ndr->data+ndr->offset,
 						 r->cbUncomp);
 			if (r->ab.data == NULL) {
 				return ndr_pull_error(ndr, NDR_ERR_ALLOC,
 						      "failed to allocate buffer for uncompressed CFDATA block");
 			}
 			ndr->offset += r->cbUncomp;
 			break;
 
 		case CF_COMPRESS_LZX:
 			/* just copy the data (LZX decompression not implemented yet) */
 			NDR_PULL_NEED_BYTES(ndr, r->cbData);
 			r->ab = data_blob_talloc(ndr->current_mem_ctx,
 						 ndr->data+ndr->offset,
 						 r->cbData);
 			if (r->ab.data == NULL) {
 				return ndr_pull_error(ndr, NDR_ERR_ALLOC,
 						      "failed to allocate buffer for LZX-compressed CFDATA block");
 			}
 			ndr->offset += r->cbData;
 			break;
 
 		case CF_COMPRESS_MSZIP: {
 			struct ndr_pull *pull_sub, *pull_compress;
 			NDR_PULL_NEED_BYTES(ndr, r->cbData);
 			/* decompress via subcontext */
 			NDR_CHECK(ndr_pull_subcontext_start(ndr, &pull_sub, 0, r->cbData));
 			pull_sub->cstate = ndr->cstate;
 			NDR_CHECK(ndr_pull_compression_start(pull_sub, &pull_compress,
 							     ndr_ctype, r->cbUncomp, r->cbData));
 			ndr_set_flags(&pull_compress->flags, LIBNDR_FLAG_REMAINING);
 			NDR_CHECK(ndr_pull_DATA_BLOB(pull_compress, NDR_SCALARS, &r->ab));
 			NDR_CHECK(ndr_pull_compression_end(pull_sub, pull_compress, ndr_ctype, r->cbUncomp));
 			NDR_CHECK(ndr_pull_subcontext_end(ndr, pull_sub, 0, r->cbData));
 
 			break;
 		}
 		default:
 			return NDR_ERR_BAD_SWITCH;
 		}
 	}
 
-	ndr_pull_compression_state_free(ndr->cstate);
-	ndr->cstate = NULL;
+	TALLOC_FREE(ndr->cstate);
 
 	return NDR_ERR_SUCCESS;
 }
diff --git a/librpc/ndr/ndr_compression.c b/librpc/ndr/ndr_compression.c
index 1133d5216db..54f91f9efbf 100644
--- a/librpc/ndr/ndr_compression.c
+++ b/librpc/ndr/ndr_compression.c
@@ -977,162 +977,111 @@ enum ndr_err_code ndr_push_compression_end(struct ndr_push *subndr,
 	return NDR_ERR_SUCCESS;
 }
 
-static enum ndr_err_code generic_mszip_init(TALLOC_CTX *mem_ctx,
-					    struct ndr_compression_state *state)
+static enum ndr_err_code generic_mszip_init(struct ndr_compression_state *state)
 {
-	z_stream *z = talloc_zero(mem_ctx, z_stream);
+	z_stream *z = talloc_zero(state, z_stream);
 	NDR_ERR_HAVE_NO_MEMORY(z);
 
 	z->zalloc = ndr_zlib_alloc;
 	z->zfree  = ndr_zlib_free;
-	z->opaque = mem_ctx;
+	z->opaque = state;
 
 	state->alg.mszip.z = z;
 	state->alg.mszip.dict_size = 0;
 	/* pre-alloc dictionary */
-	state->alg.mszip.dict = talloc_array(mem_ctx, uint8_t, 0x8000);
+	state->alg.mszip.dict = talloc_array(state, uint8_t, 0x8000);
 	NDR_ERR_HAVE_NO_MEMORY(state->alg.mszip.dict);
 
 	return NDR_ERR_SUCCESS;
 }
 
-static void generic_mszip_free(struct ndr_compression_state *state)
-{
-	if (state == NULL) {
-		return;
-	}
-
-	TALLOC_FREE(state->alg.mszip.z);
-	TALLOC_FREE(state->alg.mszip.dict);
-}
-
-
 enum ndr_err_code ndr_pull_compression_state_init(struct ndr_pull *ndr,
 						  enum ndr_compression_alg compression_alg,
 						  struct ndr_compression_state **state)
 {
 	struct ndr_compression_state *s;
 	int z_ret;
 
 	s = talloc_zero(ndr, struct ndr_compression_state);
 	NDR_ERR_HAVE_NO_MEMORY(s);
 	s->type = compression_alg;
 
 	switch (compression_alg) {
 	case NDR_COMPRESSION_NONE:
 	case NDR_COMPRESSION_MSZIP:
 	case NDR_COMPRESSION_XPRESS:
 	case NDR_COMPRESSION_XPRESS_HUFF_RAW:
 		break;
 	case NDR_COMPRESSION_MSZIP_CAB:
-		NDR_CHECK(generic_mszip_init(ndr, s));
+		NDR_CHECK(generic_mszip_init(s));
 		z_ret = inflateInit2(s->alg.mszip.z, -MAX_WBITS);
 		if (z_ret != Z_OK) {
 			return ndr_pull_error(ndr, NDR_ERR_COMPRESSION,
 					      "zlib inflateinit2 error %s (%d) %s (PULL)",
 					      zError(z_ret), z_ret, s->alg.mszip.z->msg);
 		}
 		break;
 	default:
 		return ndr_pull_error(ndr, NDR_ERR_COMPRESSION,
 				      "Bad compression algorithm %d (PULL)",
 				      compression_alg);
 		break;
 	}
 
 	*state = s;
 
 	return NDR_ERR_SUCCESS;
 }
 
-void ndr_pull_compression_state_free(struct ndr_compression_state *state)
-{
-	if (state == NULL) {
-		return;
-	}
-
-	switch (state->type) {
-	case NDR_COMPRESSION_NONE:
-	case NDR_COMPRESSION_MSZIP:
-	case NDR_COMPRESSION_XPRESS:
-	case NDR_COMPRESSION_XPRESS_HUFF_RAW:
-		break;
-	case NDR_COMPRESSION_MSZIP_CAB:
-		generic_mszip_free(state);
-		break;
-	default:
-		break;
-	}
-	TALLOC_FREE(state);
-}
-
-static int ndr_push_compression_state_free(struct ndr_compression_state *state)
-{
-	switch (state->type) {
-	case NDR_COMPRESSION_NONE:
-	case NDR_COMPRESSION_MSZIP:
-	case NDR_COMPRESSION_XPRESS:
-	case NDR_COMPRESSION_XPRESS_HUFF_RAW:
-		break;
-	case NDR_COMPRESSION_MSZIP_CAB:
-		generic_mszip_free(state);
-		break;
-	default:
-		break;
-	}
-	return 0;
-}
-
 enum ndr_err_code ndr_push_compression_state_init(struct ndr_push *ndr,
 						  enum ndr_compression_alg compression_alg,
 						  struct ndr_compression_state **state)
 {
 	struct ndr_compression_state *s;
 	int z_ret;
 
 	s = talloc_zero(ndr, struct ndr_compression_state);
 	NDR_ERR_HAVE_NO_MEMORY(s);
 	s->type = compression_alg;
 
 	switch (compression_alg) {
 	case NDR_COMPRESSION_NONE:
 	case NDR_COMPRESSION_XPRESS:
 		break;
 
 	case NDR_COMPRESSION_XPRESS_HUFF_RAW:
 		s->alg.lzxpress_huffman.mem = talloc(s, struct lzxhuff_compressor_mem);
 		if (s->alg.lzxpress_huffman.mem == NULL) {
 			return NDR_ERR_ALLOC;
 		}
 		break;
 
 	case NDR_COMPRESSION_MSZIP:
 		break;
 	case NDR_COMPRESSION_MSZIP_CAB:
-		NDR_CHECK(generic_mszip_init(ndr, s));
+		NDR_CHECK(generic_mszip_init(s));
 		z_ret = deflateInit2(s->alg.mszip.z,
 				     Z_DEFAULT_COMPRESSION,
 				     Z_DEFLATED,
 				     -MAX_WBITS,
 				     8, /* memLevel */
 				     Z_DEFAULT_STRATEGY);
 		if (z_ret != Z_OK) {
 			return ndr_push_error(ndr, NDR_ERR_COMPRESSION,
 					      "zlib inflateinit2 error %s (%d) %s (PUSH)",
 					      zError(z_ret), z_ret, s->alg.mszip.z->msg);
 		}
 		break;
 	default:
 		return ndr_push_error(ndr, NDR_ERR_COMPRESSION,
 				      "Bad compression algorithm %d (PUSH)",
 				      compression_alg);
 		break;
 	}
 
-	talloc_set_destructor(s, ndr_push_compression_state_free);
 
 	*state = s;
 
 	return NDR_ERR_SUCCESS;
 }
 
