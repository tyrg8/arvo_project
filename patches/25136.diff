commit 5b0956c38198652c3ab41d325e93cd89a076635f
Author: Luca Boccassi <bluca@debian.org>
Date:   Fri Aug 21 18:07:00 2020 +0100

    Problem: test_socket_options_fuzzer does not work
    
    Solution: fix it

diff --git a/tests/test_socket_options_fuzzer.cpp b/tests/test_socket_options_fuzzer.cpp
index dd9ee8f7..adbac6c4 100644
--- a/tests/test_socket_options_fuzzer.cpp
+++ b/tests/test_socket_options_fuzzer.cpp
@@ -1,82 +1,87 @@
 /*
     Copyright (c) 2020 Contributors as noted in the AUTHORS file
 
     This file is part of libzmq, the ZeroMQ core engine in C++.
 
     libzmq is free software; you can redistribute it and/or modify it under
     the terms of the GNU Lesser General Public License (LGPL) as published
     by the Free Software Foundation; either version 3 of the License, or
     (at your option) any later version.
 
     As a special exception, the Contributors give you permission to link
     this library with independent modules to produce an executable,
     regardless of the license terms of these independent modules, and to
     copy and distribute the resulting executable under terms of your choice,
     provided that you also meet, for each linked independent module, the
     terms and conditions of the license of that module. An independent
     module is a module which is not derived from or based on this library.
     If you modify this library, you must extend this exception to your
     version of the library.
 
     libzmq is distributed in the hope that it will be useful, but WITHOUT
     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
     License for more details.
 
     You should have received a copy of the GNU Lesser General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifdef ZMQ_USE_FUZZING_ENGINE
 #include <fuzzer/FuzzedDataProvider.h>
 #endif
 
-#include <string>
-#include <stdlib.h>
-
 #include "testutil.hpp"
 #include "testutil_unity.hpp"
 
+#ifdef ZMQ_DISCONNECT_MSG
+#define LAST_OPTION ZMQ_DISCONNECT_MSG
+#else
+#define LAST_OPTION ZMQ_BINDTODEVICE
+#endif
+
 extern "C" int LLVMFuzzerTestOneInput (const uint8_t *data, size_t size)
 {
-    setup_test_context ();
-    void *s = test_context_socket (ZMQ_XPUB);
     int option;
+    void *ctx = zmq_ctx_new ();
+    TEST_ASSERT_NOT_NULL (ctx);
+    void *server = zmq_socket (ctx, ZMQ_XPUB);
+    TEST_ASSERT_NOT_NULL (server);
 
-    //  A lot of options expect a well-formatted string
-    ((uint8_t *)data)[size - 1] = 0;
+    if (!size)
+        return 0;
 
-    for (option = ZMQ_AFFINITY; option < ZMQ_BINDTODEVICE + 1; ++option) {
-        uint8_t out[512];
-        size_t out_size = 512;
+    for (option = ZMQ_AFFINITY; option <= LAST_OPTION; ++option) {
+        uint8_t out[8192];
+        size_t out_size = 8192;
 
-        zmq_setsockopt(s, option, data, size);
-        zmq_getsockopt(s, option, out, &out_size);
+        zmq_setsockopt (server, option, data, size);
+        zmq_getsockopt (server, option, out, &out_size);
     }
 
-    test_context_socket_close_zero_linger (s);
-    teardown_test_context ();
+    zmq_close (server);
+    zmq_ctx_term (ctx);
 
     return 0;
 }
 
 #ifndef ZMQ_USE_FUZZING_ENGINE
 void test_socket_options_fuzzer ()
 {
     uint8_t **data;
     size_t *len, num_cases = 0;
     if (fuzzer_corpus_encode (
-          "tests/libzmq-fuzz-corpora/test_socket_options_fuzzer_seed_corpus", &data,
-          &len, &num_cases)
+          "tests/libzmq-fuzz-corpora/test_socket_options_fuzzer_seed_corpus",
+          &data, &len, &num_cases)
         != 0)
         exit (77);
 
     while (num_cases-- > 0) {
         TEST_ASSERT_SUCCESS_ERRNO (
           LLVMFuzzerTestOneInput (data[num_cases], len[num_cases]));
         free (data[num_cases]);
     }
 
     free (data);
     free (len);
 }
