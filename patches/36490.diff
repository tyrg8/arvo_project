commit 48e2a0ba25a7bac9ec510c48e322e5199de0583e
Author: Alex Deymo <deymo@google.com>
Date:   Fri Jul 23 16:50:28 2021 +0200

    Fuzz: Fix ModularImageToDecodedRect crop and add checks (#348)
    
    See #347.

diff --git a/lib/jxl/dec_modular.cc b/lib/jxl/dec_modular.cc
index 244f705c..4abc3d68 100644
--- a/lib/jxl/dec_modular.cc
+++ b/lib/jxl/dec_modular.cc
@@ -50,41 +50,43 @@ void MultiplySum(const size_t xsize,
 void RgbFromSingle(const size_t xsize,
                    const pixel_type* const JXL_RESTRICT row_in,
                    const float factor, Image3F* decoded, size_t /*c*/, size_t y,
                    Rect& rect) {
+  JXL_DASSERT(xsize <= rect.xsize());
   const HWY_FULL(float) df;
   const Rebind<pixel_type, HWY_FULL(float)> di;  // assumes pixel_type <= float
 
   float* const JXL_RESTRICT row_out_r = rect.PlaneRow(decoded, 0, y);
   float* const JXL_RESTRICT row_out_g = rect.PlaneRow(decoded, 1, y);
   float* const JXL_RESTRICT row_out_b = rect.PlaneRow(decoded, 2, y);
 
   const auto factor_v = Set(df, factor);
   for (size_t x = 0; x < xsize; x += Lanes(di)) {
     const auto in = Load(di, row_in + x);
     const auto out = ConvertTo(df, in) * factor_v;
     Store(out, df, row_out_r + x);
     Store(out, df, row_out_g + x);
     Store(out, df, row_out_b + x);
   }
 }
 
 // Same signature as RgbFromSingle so we can assign to the same pointer.
 void SingleFromSingle(const size_t xsize,
                       const pixel_type* const JXL_RESTRICT row_in,
                       const float factor, Image3F* decoded, size_t c, size_t y,
                       Rect& rect) {
+  JXL_DASSERT(xsize <= rect.xsize());
   const HWY_FULL(float) df;
   const Rebind<pixel_type, HWY_FULL(float)> di;  // assumes pixel_type <= float
 
   float* const JXL_RESTRICT row_out = rect.PlaneRow(decoded, c, y);
 
   const auto factor_v = Set(df, factor);
   for (size_t x = 0; x < xsize; x += Lanes(di)) {
     const auto in = Load(di, row_in + x);
     const auto out = ConvertTo(df, in) * factor_v;
     Store(out, df, row_out + x);
   }
 }
 // NOLINTNEXTLINE(google-readability-namespace-comments)
 }  // namespace HWY_NAMESPACE
 }  // namespace jxl
@@ -249,85 +251,85 @@ void ModularFrameDecoder::MaybeDropFullImage() {
 Status ModularFrameDecoder::DecodeGroup(const Rect& rect, BitReader* reader,
                                         int minShift, int maxShift,
                                         const ModularStreamId& stream,
                                         bool zerofill,
                                         PassesDecoderState* dec_state,
                                         ImageBundle* output) {
   JXL_DASSERT(stream.kind == ModularStreamId::kModularDC ||
               stream.kind == ModularStreamId::kModularAC);
   const size_t xsize = rect.xsize();
   const size_t ysize = rect.ysize();
   Image gi(xsize, ysize, full_image.bitdepth, 0);
   // start at the first bigger-than-groupsize non-metachannel
   size_t c = full_image.nb_meta_channels;
   for (; c < full_image.channel.size(); c++) {
     Channel& fc = full_image.channel[c];
     if (fc.w > frame_dim.group_dim || fc.h > frame_dim.group_dim) break;
   }
   size_t beginc = c;
   for (; c < full_image.channel.size(); c++) {
     Channel& fc = full_image.channel[c];
     int shift = std::min(fc.hshift, fc.vshift);
     if (shift > maxShift) continue;
     if (shift < minShift) continue;
     Rect r(rect.x0() >> fc.hshift, rect.y0() >> fc.vshift,
            rect.xsize() >> fc.hshift, rect.ysize() >> fc.vshift, fc.w, fc.h);
     if (r.xsize() == 0 || r.ysize() == 0) continue;
     Channel gc(r.xsize(), r.ysize());
     gc.hshift = fc.hshift;
     gc.vshift = fc.vshift;
     gi.channel.emplace_back(std::move(gc));
   }
   if (zerofill) {
     int gic = 0;
     for (c = beginc; c < full_image.channel.size(); c++) {
       Channel& fc = full_image.channel[c];
       int shift = std::min(fc.hshift, fc.vshift);
       if (shift > maxShift) continue;
       if (shift < minShift) continue;
       Rect r(rect.x0() >> fc.hshift, rect.y0() >> fc.vshift,
              rect.xsize() >> fc.hshift, rect.ysize() >> fc.vshift, fc.w, fc.h);
       if (r.xsize() == 0 || r.ysize() == 0) continue;
       for (size_t y = 0; y < r.ysize(); ++y) {
         pixel_type* const JXL_RESTRICT row_out = r.Row(&fc.plane, y);
         memset(row_out, 0, r.xsize() * sizeof(*row_out));
       }
       gic++;
     }
     return true;
   }
   ModularOptions options;
   if (!ModularGenericDecompress(
           reader, gi, /*header=*/nullptr, stream.ID(frame_dim), &options,
           /*undo_transforms=*/-1, &tree, &code, &context_map))
     return JXL_FAILURE("Failed to decode modular group");
   if (minShift == 0) {
     // Undo global transforms that have been pushed to the group level
     for (auto t : global_transform) {
       JXL_RETURN_IF_ERROR(t.Inverse(gi, global_header.wp_header));
     }
     if (!use_full_image) {
       JXL_RETURN_IF_ERROR(ModularImageToDecodedRect(
-          gi, dec_state, nullptr, output, rect.Crop(*output)));
+          gi, dec_state, nullptr, output, rect.Crop(dec_state->decoded)));
       return true;
     }
   }
   int gic = 0;
   for (c = beginc; c < full_image.channel.size(); c++) {
     Channel& fc = full_image.channel[c];
     int shift = std::min(fc.hshift, fc.vshift);
     if (shift > maxShift) continue;
     if (shift < minShift) continue;
     Rect r(rect.x0() >> fc.hshift, rect.y0() >> fc.vshift,
            rect.xsize() >> fc.hshift, rect.ysize() >> fc.vshift, fc.w, fc.h);
     if (r.xsize() == 0 || r.ysize() == 0) continue;
     for (size_t y = 0; y < r.ysize(); ++y) {
       pixel_type* const JXL_RESTRICT row_out = r.Row(&fc.plane, y);
       const pixel_type* const JXL_RESTRICT row_in = gi.channel[gic].Row(y);
       for (size_t x = 0; x < r.xsize(); ++x) {
         row_out[x] = row_in[x];
       }
     }
     gic++;
   }
   return true;
 }
@@ -454,124 +456,128 @@ Status ModularFrameDecoder::DecodeAcMetadata(size_t group_id, BitReader* reader,
 Status ModularFrameDecoder::ModularImageToDecodedRect(
     Image& gi, PassesDecoderState* dec_state, jxl::ThreadPool* pool,
     ImageBundle* output, Rect rect) {
   auto& decoded = dec_state->decoded;
   const auto& frame_header = dec_state->shared->frame_header;
   const auto* metadata = frame_header.nonserialized_metadata;
   size_t xsize = rect.xsize();
   size_t ysize = rect.ysize();
+  if (!xsize || !ysize) {
+    return true;
+  }
+  JXL_DASSERT(rect.IsInside(decoded));
 
   int c = 0;
   if (do_color) {
     const bool rgb_from_gray =
         metadata->m.color_encoding.IsGray() &&
         frame_header.color_transform == ColorTransform::kNone;
     const bool fp = metadata->m.bit_depth.floating_point_sample;
 
     for (; c < 3; c++) {
       float factor = full_image.bitdepth < 32
                          ? 1.f / ((1u << full_image.bitdepth) - 1)
                          : 0;
       int c_in = c;
       if (frame_header.color_transform == ColorTransform::kXYB) {
         factor = dec_state->shared->matrices.DCQuants()[c];
         // XYB is encoded as YX(B-Y)
         if (c < 2) c_in = 1 - c;
       } else if (rgb_from_gray) {
         c_in = 0;
       }
       Channel& ch_in = gi.channel[c_in];
       // TODO(eustas): could we detect it on earlier stage?
       if (ch_in.w == 0 || ch_in.h == 0) {
         return JXL_FAILURE("Empty image");
       }
       size_t xsize_shifted = DivCeil(xsize, 1 << ch_in.hshift);
       size_t ysize_shifted = DivCeil(ysize, 1 << ch_in.vshift);
       Rect r(rect.x0() >> ch_in.hshift, rect.y0() >> ch_in.vshift,
              rect.xsize() >> ch_in.hshift, rect.ysize() >> ch_in.vshift,
              DivCeil(decoded.xsize(), 1 << ch_in.hshift),
              DivCeil(decoded.ysize(), 1 << ch_in.vshift));
       if (r.ysize() != ch_in.h || r.xsize() != ch_in.w) {
         return JXL_FAILURE(
             "Dimension mismatch: trying to fit a %zux%zu modular channel into "
             "a %zux%zu rect",
             ch_in.w, ch_in.h, r.xsize(), r.ysize());
       }
       if (frame_header.color_transform == ColorTransform::kXYB && c == 2) {
         JXL_ASSERT(!fp);
         RunOnPool(
             pool, 0, ysize_shifted, jxl::ThreadPool::SkipInit(),
             [&](const int task, const int thread) {
               const size_t y = task;
               const pixel_type* const JXL_RESTRICT row_in = ch_in.Row(y);
               const pixel_type* const JXL_RESTRICT row_in_Y =
                   gi.channel[0].Row(y);
               float* const JXL_RESTRICT row_out = r.PlaneRow(&decoded, c, y);
               HWY_DYNAMIC_DISPATCH(MultiplySum)
               (xsize_shifted, row_in, row_in_Y, factor, row_out);
             },
             "ModularIntToFloat");
       } else if (fp) {
         int bits = metadata->m.bit_depth.bits_per_sample;
         int exp_bits = metadata->m.bit_depth.exponent_bits_per_sample;
         RunOnPool(
             pool, 0, ysize_shifted, jxl::ThreadPool::SkipInit(),
             [&](const int task, const int thread) {
               const size_t y = task;
               const pixel_type* const JXL_RESTRICT row_in = ch_in.Row(y);
               float* const JXL_RESTRICT row_out = r.PlaneRow(&decoded, c, y);
               int_to_float(row_in, row_out, xsize_shifted, bits, exp_bits);
             },
             "ModularIntToFloat_losslessfloat");
       } else {
         RunOnPool(
             pool, 0, ysize_shifted, jxl::ThreadPool::SkipInit(),
             [&](const int task, const int thread) {
               const size_t y = task;
               const pixel_type* const JXL_RESTRICT row_in = ch_in.Row(y);
               if (rgb_from_gray) {
                 HWY_DYNAMIC_DISPATCH(RgbFromSingle)
                 (xsize_shifted, row_in, factor, &decoded, c, y, r);
               } else {
                 HWY_DYNAMIC_DISPATCH(SingleFromSingle)
                 (xsize_shifted, row_in, factor, &decoded, c, y, r);
               }
             },
             "ModularIntToFloat");
       }
       if (rgb_from_gray) {
         break;
       }
     }
     if (rgb_from_gray) {
       c = 1;
     }
   }
   for (size_t ec = 0; ec < dec_state->extra_channels.size(); ec++, c++) {
     const ExtraChannelInfo& eci = output->metadata()->extra_channel_info[ec];
     int bits = eci.bit_depth.bits_per_sample;
     int exp_bits = eci.bit_depth.exponent_bits_per_sample;
     bool fp = eci.bit_depth.floating_point_sample;
     JXL_ASSERT(fp || bits < 32);
     const float mul = fp ? 0 : (1.0f / ((1u << bits) - 1));
     size_t ecups = frame_header.extra_channel_upsampling[ec];
     const size_t ec_xsize = DivCeil(frame_dim.xsize_upsampled, ecups);
     const size_t ec_ysize = DivCeil(frame_dim.ysize_upsampled, ecups);
     Channel& ch_in = gi.channel[c];
     Rect r(rect.x0() >> ch_in.hshift, rect.y0() >> ch_in.vshift,
            rect.xsize() >> ch_in.hshift, rect.ysize() >> ch_in.vshift, ec_xsize,
            ec_ysize);
     for (size_t y = 0; y < r.ysize(); ++y) {
       float* const JXL_RESTRICT row_out =
           r.Row(&dec_state->extra_channels[ec], y);
       const pixel_type* const JXL_RESTRICT row_in = ch_in.Row(y);
       if (fp) {
         int_to_float(row_in, row_out, r.xsize(), bits, exp_bits);
       } else {
         for (size_t x = 0; x < r.xsize(); ++x) {
           row_out[x] = row_in[x] * mul;
         }
       }
     }
   }
   return true;
 }
