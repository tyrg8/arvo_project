commit b0855fa22cd6ba447482ee2ae1c5e091428c4bc0
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Mon Dec 27 13:55:45 2021 +0000

    OSS-fuzz #32927 and #42980 - limit section values to sane numbers
    
    When reading an xref section don't permit a negative starting number
    and make sure the size is at least 1.

diff --git a/pdf/pdf_xref.c b/pdf/pdf_xref.c
index 5eea2c5e1..5ccb68893 100644
--- a/pdf/pdf_xref.c
+++ b/pdf/pdf_xref.c
@@ -146,259 +146,259 @@ static int pdfi_read_xref_stream_dict(pdf_context *ctx, pdf_c_stream *s);
 static int pdfi_process_xref_stream(pdf_context *ctx, pdf_stream *stream_obj, pdf_c_stream *s)
 {
     pdf_c_stream *XRefStrm;
     int code, i;
     pdf_dict *sdict = NULL;
     pdf_name *n;
     pdf_array *a;
     int64_t size;
     int64_t num;
     int64_t W[3];
     bool known = false;
 
     if (stream_obj->type != PDF_STREAM)
         return_error(gs_error_typecheck);
 
     code = pdfi_dict_from_obj(ctx, (pdf_obj *)stream_obj, &sdict);
     if (code < 0)
         return code;
 
     code = pdfi_dict_get_type(ctx, sdict, "Type", PDF_NAME, (pdf_obj **)&n);
     if (code < 0)
         return code;
 
     if (n->length != 4 || memcmp(n->data, "XRef", 4) != 0) {
         pdfi_countdown(n);
         return_error(gs_error_syntaxerror);
     }
     pdfi_countdown(n);
 
     code = pdfi_dict_get_int(ctx, sdict, "Size", &size);
     if (code < 0)
         return code;
 
     if (size < 0 || size > floor((double)ARCH_MAX_SIZE_T / (double)sizeof(xref_entry)))
         return_error(gs_error_rangecheck);
 
     /* If this is the first xref stream then allocate the xref table and store the trailer */
     if (ctx->xref_table == NULL) {
         ctx->xref_table = (xref_table_t *)gs_alloc_bytes(ctx->memory, sizeof(xref_table_t), "read_xref_stream allocate xref table");
         if (ctx->xref_table == NULL) {
             return_error(gs_error_VMerror);
         }
         memset(ctx->xref_table, 0x00, sizeof(xref_table_t));
         ctx->xref_table->xref = (xref_entry *)gs_alloc_bytes(ctx->memory, size * sizeof(xref_entry), "read_xref_stream allocate xref table entries");
         if (ctx->xref_table->xref == NULL){
             gs_free_object(ctx->memory, ctx->xref_table, "failed to allocate xref table entries");
             ctx->xref_table = NULL;
             return_error(gs_error_VMerror);
         }
         memset(ctx->xref_table->xref, 0x00, size * sizeof(xref_entry));
         ctx->xref_table->ctx = ctx;
         ctx->xref_table->type = PDF_XREF_TABLE;
         ctx->xref_table->xref_size = size;
 #if REFCNT_DEBUG
         ctx->xref_table->UID = ctx->ref_UID++;
         dmprintf1(ctx->memory, "Allocated xref table with UID %"PRIi64"\n", ctx->xref_table->UID);
 #endif
         pdfi_countup(ctx->xref_table);
 
         ctx->Trailer = sdict;
         pdfi_countup(sdict);
     } else {
         code = pdfi_merge_dicts(ctx, ctx->Trailer, sdict);
         if (code < 0) {
             if (code == gs_error_VMerror || ctx->args.pdfstoponerror)
                 return code;
         }
     }
 
     pdfi_seek(ctx, ctx->main_stream, pdfi_stream_offset(ctx, stream_obj), SEEK_SET);
 
     /* Bug #691220 has a PDF file with a compressed XRef, the stream dictionary has
      * a /DecodeParms entry for the stream, which has a /Colors value of 5, which makes
      * *no* sense whatever. If we try to apply a Predictor then we end up in a loop trying
      * to read 5 colour samples. Rather than meddles with more parameters to the filter
      * code, we'll just remove the Colors entry from the DecodeParms dictionary,
      * because it is nonsense. This means we'll get the (sensible) default value of 1.
      */
     code = pdfi_dict_known(ctx, sdict, "DecodeParms", &known);
     if (code < 0)
         return code;
 
     if (known) {
         pdf_dict *DP;
         double f;
         pdf_obj *name;
 
         code = pdfi_dict_get_type(ctx, sdict, "DecodeParms", PDF_DICT, (pdf_obj **)&DP);
         if (code < 0)
             return code;
 
         code = pdfi_dict_knownget_number(ctx, DP, "Colors", &f);
         if (code < 0) {
             pdfi_countdown(DP);
             return code;
         }
         if (code > 0 && f != (double)1)
         {
             code = pdfi_name_alloc(ctx, (byte *)"Colors", 6, &name);
             if (code < 0) {
                 pdfi_countdown(DP);
                 return code;
             }
             pdfi_countup(name);
 
             code = pdfi_dict_delete_pair(ctx, DP, (pdf_name *)name);
             pdfi_countdown(name);
             if (code < 0) {
                 pdfi_countdown(DP);
                 return code;
             }
         }
         pdfi_countdown(DP);
     }
 
     code = pdfi_filter_no_decryption(ctx, stream_obj, s, &XRefStrm, false);
     if (code < 0) {
         pdfi_countdown(ctx->xref_table);
         ctx->xref_table = NULL;
         return code;
     }
 
     code = pdfi_dict_get_type(ctx, sdict, "W", PDF_ARRAY, (pdf_obj **)&a);
     if (code < 0) {
         pdfi_close_file(ctx, XRefStrm);
         pdfi_countdown(ctx->xref_table);
         ctx->xref_table = NULL;
         return code;
     }
 
     if (pdfi_array_size(a) != 3) {
         pdfi_countdown(a);
         pdfi_close_file(ctx, XRefStrm);
         pdfi_countdown(ctx->xref_table);
         ctx->xref_table = NULL;
         return_error(gs_error_rangecheck);
     }
     for (i=0;i<3;i++) {
         code = pdfi_array_get_int(ctx, a, (uint64_t)i, (int64_t *)&W[i]);
         if (code < 0) {
             pdfi_countdown(a);
             pdfi_close_file(ctx, XRefStrm);
             pdfi_countdown(ctx->xref_table);
             ctx->xref_table = NULL;
             return code;
         }
     }
     pdfi_countdown(a);
 
     code = pdfi_dict_get_type(ctx, sdict, "Index", PDF_ARRAY, (pdf_obj **)&a);
     if (code == gs_error_undefined) {
         code = read_xref_stream_entries(ctx, XRefStrm, 0, size - 1, (uint64_t *)W);
         if (code < 0) {
             pdfi_close_file(ctx, XRefStrm);
             pdfi_countdown(ctx->xref_table);
             ctx->xref_table = NULL;
             return code;
         }
     } else {
         int64_t start, end;
 
         if (code < 0) {
             pdfi_close_file(ctx, XRefStrm);
             pdfi_countdown(ctx->xref_table);
             ctx->xref_table = NULL;
             return code;
         }
 
         if (pdfi_array_size(a) & 1) {
             pdfi_countdown(a);
             pdfi_close_file(ctx, XRefStrm);
             pdfi_countdown(ctx->xref_table);
             ctx->xref_table = NULL;
             return_error(gs_error_rangecheck);
         }
 
         for (i=0;i < pdfi_array_size(a);i+=2){
             code = pdfi_array_get_int(ctx, a, (uint64_t)i, &start);
-            if (code < 0) {
+            if (code < 0 || start < 0) {
                 pdfi_countdown(a);
                 pdfi_close_file(ctx, XRefStrm);
                 pdfi_countdown(ctx->xref_table);
                 ctx->xref_table = NULL;
                 return code;
             }
 
             code = pdfi_array_get_int(ctx, a, (uint64_t)i+1, &end);
             if (code < 0) {
                 pdfi_countdown(a);
                 pdfi_countdown(start);
                 pdfi_close_file(ctx, XRefStrm);
                 pdfi_countdown(ctx->xref_table);
                 ctx->xref_table = NULL;
                 return code;
             }
 
             if (start + end >= ctx->xref_table->xref_size) {
                 code = resize_xref(ctx, start + end);
                 if (code < 0) {
                     pdfi_countdown(a);
                     pdfi_close_file(ctx, XRefStrm);
                     pdfi_countdown(ctx->xref_table);
                     ctx->xref_table = NULL;
                     return code;
                 }
             }
 
             code = read_xref_stream_entries(ctx, XRefStrm, start, start + end - 1, (uint64_t *)W);
             if (code < 0) {
                 pdfi_countdown(a);
                 pdfi_close_file(ctx, XRefStrm);
                 pdfi_countdown(ctx->xref_table);
                 ctx->xref_table = NULL;
                 return code;
             }
         }
     }
     pdfi_countdown(a);
 
     pdfi_close_file(ctx, XRefStrm);
 
     code = pdfi_dict_get_int(ctx, sdict, "Prev", &num);
     if (code == gs_error_undefined)
         return 0;
 
     if (code < 0)
         return code;
 
     if (num < 0 || num > ctx->main_stream_length)
         return_error(gs_error_rangecheck);
 
     if (pdfi_loop_detector_check_object(ctx, num) == true)
         return_error(gs_error_circular_reference);
     else {
         code = pdfi_loop_detector_add_object(ctx, num);
         if (code < 0)
             return code;
     }
 
     if(ctx->args.pdfdebug)
         dmprintf(ctx->memory, "%% Reading /Prev xref\n");
 
     pdfi_seek(ctx, s, num, SEEK_SET);
 
     code = pdfi_read_token(ctx, ctx->main_stream, 0, 0);
     if (code < 0)
         return code;
     if (code == 0)
         return_error(gs_error_syntaxerror);
 
     if (((pdf_obj *)ctx->stack_top[-1])->type == PDF_KEYWORD && ((pdf_keyword *)ctx->stack_top[-1])->key == TOKEN_XREF) {
         /* Read old-style xref table */
         pdfi_pop(ctx, 1);
         return(read_xref(ctx, ctx->main_stream));
     } else
         code = pdfi_read_xref_stream_dict(ctx, s);
 
     return code;
 }
@@ -660,137 +660,148 @@ static int write_offset(byte *B, gs_offset_t o, unsigned int g, unsigned char fr
 static int read_xref_section(pdf_context *ctx, pdf_c_stream *s, uint64_t *section_start, uint64_t *section_size)
 {
     int code = 0, i, j;
     pdf_obj *o = NULL;
     uint64_t start = 0, size = 0;
     int64_t bytes = 0;
     char Buffer[21];
 
     *section_start = *section_size = 0;
 
     if (ctx->args.pdfdebug)
         dmprintf(ctx->memory, "\n%% Reading xref section\n");
 
     code = pdfi_read_token(ctx, ctx->main_stream, 0, 0);
 
     if (code < 0)
         return code;
 
     if (pdfi_count_stack(ctx) < 1)
         return_error(gs_error_stackunderflow);
 
     o = ctx->stack_top[-1];
     if (o->type == PDF_KEYWORD)
         return 0;
 
     if (o->type != PDF_INT) {
         /* element is not an integer, not a valid xref */
         pdfi_pop(ctx, 1);
         return_error(gs_error_typecheck);
     }
 
+    if (((pdf_num *)o)->value.i < 0) {
+        pdfi_pop(ctx, 1);
+        return_error(gs_error_rangecheck);
+    }
+
     *section_start = start = ((pdf_num *)o)->value.i;
 
     code = pdfi_read_token(ctx, ctx->main_stream, 0, 0);
     if (code < 0) {
         pdfi_pop(ctx, 1);
         return code;
     }
     if (code == 0) {
         pdfi_pop(ctx, 1);
         return_error(gs_error_syntaxerror);
     }
 
     o = ctx->stack_top[-1];
     if (o->type != PDF_INT) {
         /* element is not an integer, not a valid xref */
         pdfi_pop(ctx, 2);
         return_error(gs_error_typecheck);
     }
+
+    if (((pdf_num *)o)->value.i < 1) {
+        pdfi_pop(ctx, 2);
+        return_error(gs_error_rangecheck);
+    }
+
     *section_size = size = ((pdf_num *)o)->value.i;
     pdfi_pop(ctx, 2);
 
     if (ctx->args.pdfdebug)
         dmprintf2(ctx->memory, "\n%% Section starts at %d and has %d entries\n", (unsigned int) start, (unsigned int)size);
 
     if (size > 0) {
         if (ctx->xref_table == NULL) {
             ctx->xref_table = (xref_table_t *)gs_alloc_bytes(ctx->memory, sizeof(xref_table_t), "read_xref_stream allocate xref table");
             if (ctx->xref_table == NULL)
                 return_error(gs_error_VMerror);
             memset(ctx->xref_table, 0x00, sizeof(xref_table_t));
 
             ctx->xref_table->xref = (xref_entry *)gs_alloc_bytes(ctx->memory, (start + size) * sizeof(xref_entry), "read_xref_stream allocate xref table entries");
             if (ctx->xref_table->xref == NULL){
                 gs_free_object(ctx->memory, ctx->xref_table, "free xref table on error allocating entries");
                 ctx->xref_table = NULL;
                 return_error(gs_error_VMerror);
             }
 #if REFCNT_DEBUG
             ctx->xref_table->UID = ctx->ref_UID++;
             dmprintf1(ctx->memory, "Allocated xref table with UID %"PRIi64"\n", ctx->xref_table->UID);
 #endif
 
             memset(ctx->xref_table->xref, 0x00, (start + size) * sizeof(xref_entry));
             ctx->xref_table->ctx = ctx;
             ctx->xref_table->type = PDF_XREF_TABLE;
             ctx->xref_table->xref_size = start + size;
             pdfi_countup(ctx->xref_table);
         } else {
             if (start + size > ctx->xref_table->xref_size) {
                 code = resize_xref(ctx, start + size);
                 if (code < 0)
                     return code;
             }
         }
     }
 
     pdfi_skip_white(ctx, s);
     for (i=0;i< size;i++){
         xref_entry *entry = &ctx->xref_table->xref[i + start];
         unsigned char free;
         gs_offset_t off;
         unsigned int gen;
 
         bytes = pdfi_read_bytes(ctx, (byte *)Buffer, 1, 20, s);
         if (bytes < 20)
             return_error(gs_error_ioerror);
         j = 19;
         while (Buffer[j] != 0x0D && Buffer[j] != 0x0A) {
             pdfi_unread(ctx, s, (byte *)&Buffer[j], 1);
             if (--j < 0) {
                 dmprintf(ctx->memory, "Invalid xref entry, line terminator missing.\n");
                 code = read_xref_entry_slow(ctx, s, &off, &gen, &free);
                 if (code < 0)
                     return code;
                 code = write_offset((byte *)Buffer, off, gen, free);
                 if (code < 0)
                     return code;
                 j = 19;
                 break;
             }
         }
         Buffer[j] = 0x00;
         if (entry->object_num != 0)
             continue;
 
         if (sscanf(Buffer, "%"PRIdOFFSET" %d %c", &entry->u.uncompressed.offset, &entry->u.uncompressed.generation_num, &free) != 3) {
             dmprintf(ctx->memory, "Invalid xref entry, incorrect format.\n");
             pdfi_unread(ctx, s, (byte *)Buffer, 20);
             code = read_xref_entry_slow(ctx, s, &off, &gen, &free);
             if (code < 0)
                 return code;
             code = write_offset((byte *)Buffer, off, gen, free);
             if (code < 0)
                 return code;
         }
 
         entry->compressed = false;
         entry->object_num = i + start;
         if (free == 'f')
             entry->free = true;
         if(free == 'n')
             entry->free = false;
     }
 
     return 0;
 }
