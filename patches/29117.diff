commit c3b2f15c4316b1d76243df6588c86a1bfa6f54fe
Author: Dan Bloomberg <dan.bloomberg@gmail.com>
Date:   Wed Jan 6 21:24:21 2021 -0800

    Oss-fuzz issue 29117: finditalic_fuzzer: heap overflow
    * substituteObjectNumbers() was not checking array bounds
    * also fixed enhance_fuzzer.cc
    * also fixed documentation in enhance.c

diff --git a/prog/fuzzing/enhance_fuzzer.cc b/prog/fuzzing/enhance_fuzzer.cc
index 6dd9077..ba9e78e 100644
--- a/prog/fuzzing/enhance_fuzzer.cc
+++ b/prog/fuzzing/enhance_fuzzer.cc
@@ -4,99 +4,97 @@ extern "C" int
 LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) { 
 	if (size<3) return 0;
  
 	leptSetStdNullHandler();
 
 	PIX *pixs_payload = pixReadMemSpix(data, size);
 	if (pixs_payload == NULL) return 0;
 
 	PIX *pix_pointer_payload, *return_pix, *pix2;
 	L_KERNEL *kel;
 	NUMA *na1, *na2, *na3;
 
 	pix_pointer_payload = pixCopy(NULL, pixs_payload);
 	return_pix = pixContrastTRCMasked(NULL, pix_pointer_payload, NULL, 0.5);
 	pixDestroy(&pix_pointer_payload);
 	pixDestroy(&return_pix);
 
 	pix_pointer_payload = pixCopy(NULL, pixs_payload);
 	return_pix = pixDarkenGray(NULL, pix_pointer_payload, 220, 10);
 	pixDestroy(&pix_pointer_payload);
 	pixDestroy(&return_pix);
 
 	pix_pointer_payload = pixCopy(NULL, pixs_payload);
 	return_pix = pixEqualizeTRC(NULL, pix_pointer_payload, 220, 10);
 	pixDestroy(&pix_pointer_payload);
 	pixDestroy(&return_pix);
 
 	pix_pointer_payload = pixCopy(NULL, pixs_payload);
 	return_pix = pixGammaTRCMasked(NULL, pix_pointer_payload, NULL,
                                        1.0, 100, 175);
 	pixDestroy(&pix_pointer_payload);
 	pixDestroy(&return_pix);
 
 	pix_pointer_payload = pixCopy(NULL, pixs_payload);
 	return_pix = pixGammaTRCWithAlpha(NULL, pix_pointer_payload,
                                           0.5, 1.0, 100);
 	pixDestroy(&pix_pointer_payload);
 	pixDestroy(&return_pix);
 
 	pix_pointer_payload = pixCopy(NULL, pixs_payload);
 	return_pix = pixHalfEdgeByBandpass(pix_pointer_payload, 2, 2, 4, 4);
 	pixDestroy(&pix_pointer_payload);
 	pixDestroy(&return_pix);
 
 	l_float32 sat;
 	pix_pointer_payload = pixCopy(NULL, pixs_payload);
 	pixMeasureSaturation(pix_pointer_payload, 1, &sat);
 	pixDestroy(&pix_pointer_payload);
 
 	pix_pointer_payload = pixCopy(NULL, pixs_payload);
 	return_pix = pixModifyBrightness(NULL, pix_pointer_payload, 0.5);
 	pixDestroy(&pix_pointer_payload);
 	pixDestroy(&return_pix);
 
 	pix_pointer_payload = pixCopy(NULL, pixs_payload);
 	return_pix = pixModifyHue(NULL, pix_pointer_payload, 0.01 + 0.05 * 1);
 	pixDestroy(&pix_pointer_payload);
 	pixDestroy(&return_pix);
 
 	pix_pointer_payload = pixCopy(NULL, pixs_payload);
 	return_pix = pixModifySaturation(NULL, pix_pointer_payload,
                                          -0.9 + 0.1 * 1);
 	pixDestroy(&pix_pointer_payload);
 	pixDestroy(&return_pix);
 
 	pix_pointer_payload = pixCopy(NULL, pixs_payload);
 	return_pix = pixMosaicColorShiftRGB(pix_pointer_payload,
                                             -0.1, 0.0, 0.0, 0.0999, 1);
 	pixDestroy(&pix_pointer_payload);
 	pixDestroy(&return_pix);
 
 	pix_pointer_payload = pixCopy(NULL, pixs_payload);
 	return_pix = pixMultConstantColor(pix_pointer_payload, 0.7, 0.4, 1.3);
 	pixDestroy(&pix_pointer_payload);
 	pixDestroy(&return_pix);
 
 	kel = kernelCreate(3, 3);
 	pix_pointer_payload = pixCopy(NULL, pixs_payload);
 	pixMultMatrixColor( pix_pointer_payload, kel);
 	pixDestroy(&pix_pointer_payload);
-	pixDestroy(&return_pix);
 	kernelDestroy(&kel);
 
 	na1 = numaGammaTRC(1.0, 0, 255);
 	na2 = numaGammaTRC(1.0, 0, 255);
 	na3 = numaGammaTRC(1.0, 0, 255);
 	pix_pointer_payload = pixCopy(NULL, pixs_payload);
 	pix2 = pixMakeSymmetricMask(10, 10, 0.5, 0.5, L_USE_INNER);
-	return_pix = pixTRCMapGeneral(pix_pointer_payload, pix2, na1, na2, na3);
-	pixDestroy(&return_pix);
+	pixTRCMapGeneral(pix_pointer_payload, pix2, na1, na2, na3);
 	numaDestroy(&na1);
 	numaDestroy(&na2);
 	numaDestroy(&na3);
 	pixDestroy(&pix_pointer_payload);
 	pixDestroy(&pix2);
 
 	pixDestroy(&pixs_payload);
 	return 0;
 }
diff --git a/src/enhance.c b/src/enhance.c
index 32813c4..9d4bf00 100644
--- a/src/enhance.c
+++ b/src/enhance.c
@@ -1,126 +1,126 @@
 /*====================================================================*
  -  Copyright (C) 2001 Leptonica.  All rights reserved.
  -
  -  Redistribution and use in source and binary forms, with or without
  -  modification, are permitted provided that the following conditions
  -  are met:
  -  1. Redistributions of source code must retain the above copyright
  -     notice, this list of conditions and the following disclaimer.
  -  2. Redistributions in binary form must reproduce the above
  -     copyright notice, this list of conditions and the following
  -     disclaimer in the documentation and/or other materials
  -     provided with the distribution.
  -
  -  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  -  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  -  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  -  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL ANY
  -  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  -  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  -  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  -  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
  -  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  -  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  -  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *====================================================================*/
 
 /*!
  * \file enhance.c
  * <pre>
  *
  *      Gamma TRC (tone reproduction curve) mapping
  *           PIX     *pixGammaTRC()
  *           PIX     *pixGammaTRCMasked()
  *           PIX     *pixGammaTRCWithAlpha()
  *           NUMA    *numaGammaTRC()
  *
  *      Contrast enhancement
  *           PIX     *pixContrastTRC()
  *           PIX     *pixContrastTRCMasked()
  *           NUMA    *numaContrastTRC()
  *
  *      Histogram equalization
  *           PIX     *pixEqualizeTRC()
  *           NUMA    *numaEqualizeTRC()
  *
  *      Generic TRC mapper
- *           PIX     *pixTRCMap()
- *           PIX     *pixTRCMapGeneral()
+ *           l_int32  pixTRCMap()
+ *           l_int32  pixTRCMapGeneral()
  *
  *      Unsharp-masking
  *           PIX     *pixUnsharpMasking()
  *           PIX     *pixUnsharpMaskingGray()
  *           PIX     *pixUnsharpMaskingFast()
  *           PIX     *pixUnsharpMaskingGrayFast()
  *           PIX     *pixUnsharpMaskingGray1D()
  *           PIX     *pixUnsharpMaskingGray2D()
  *
  *      Hue and saturation modification
  *           PIX     *pixModifyHue()
  *           PIX     *pixModifySaturation()
  *           l_int32  pixMeasureSaturation()
  *           PIX     *pixModifyBrightness()
  *
  *      Color shifting
  *           PIX     *pixMosaicColorShiftRGB()
  *           PIX     *pixColorShiftRGB()
  *
  *      Darken gray (unsaturated) pixels
  *           PIX     *pixDarkenGray()
  *
  *      General multiplicative constant color transform
  *           PIX     *pixMultConstantColor()
  *           PIX     *pixMultMatrixColor()
  *
  *      Edge by bandpass
  *           PIX     *pixHalfEdgeByBandpass()
  *
  *      Gamma correction, contrast enhancement and histogram equalization
  *      apply a simple mapping function to each pixel (or, for color
  *      images, to each sample (i.e., r,g,b) of the pixel).
  *
  *       ~ Gamma correction either lightens the image or darkens
  *         it, depending on whether the gamma factor is greater
  *         or less than 1.0, respectively.
  *
  *       ~ Contrast enhancement darkens the pixels that are already
  *         darker than the middle of the dynamic range (128)
  *         and lightens pixels that are lighter than 128.
  *
  *       ~ Histogram equalization remaps to have the same number
  *         of image pixels at each of 256 intensity values.  This is
  *         a quick and dirty method of adjusting contrast and brightness
  *         to bring out details in both light and dark regions.
  *
  *      Unsharp masking is a more complicated enhancement.
  *      A "high frequency" image, generated by subtracting
  *      the smoothed ("low frequency") part of the image from
  *      itself, has all the energy at the edges.  This "edge image"
  *      has 0 average value.  A fraction of the edge image is
  *      then added to the original, enhancing the differences
  *      between pixel values at edges.  Because we represent
  *      images as l_uint8 arrays, we preserve dynamic range and
  *      handle negative values by doing all the arithmetic on
  *      shifted l_uint16 arrays; the l_uint8 values are recovered
  *      at the end.
  *
  *      Hue and saturation modification work in HSV space.  Because
  *      this is too large for efficient table lookup, each pixel value
  *      is transformed to HSV, modified, and transformed back.
  *      It's not the fastest way to do this, but the method is
  *      easily understood.
  *
  *      Unsharp masking is never in-place, and returns a clone if no
  *      operation is to be performed.
  * </pre>
  */
 
 #ifdef HAVE_CONFIG_H
 #include <config_auto.h>
 #endif  /* HAVE_CONFIG_H */
 
 #include <math.h>
 #include "allheaders.h"
 
     /* Scales contrast enhancement factor to have a useful range
      * between 0.0 and 1.0 */
@@ -723,60 +723,60 @@ l_float32  val, sum;
 NUMA      *nah, *nasum, *nad;
 
     PROCNAME("numaEqualizeTRC");
 
     if (!pix)
         return (NUMA *)ERROR_PTR("pix not defined", procName, NULL);
     if (pixGetDepth(pix) != 8)
         return (NUMA *)ERROR_PTR("pix not 8 bpp", procName, NULL);
     if (fract < 0.0 || fract > 1.0)
         return (NUMA *)ERROR_PTR("fract not in [0.0 ... 1.0]", procName, NULL);
     if (factor < 1)
         return (NUMA *)ERROR_PTR("sampling factor < 1", procName, NULL);
 
     if (fract == 0.0)
         L_WARNING("fract = 0.0; no equalization requested\n", procName);
 
     if ((nah = pixGetGrayHistogram(pix, factor)) == NULL)
         return (NUMA *)ERROR_PTR("histogram not made", procName, NULL);
     numaGetSum(nah, &sum);
     nasum = numaGetPartialSums(nah);
 
     nad = numaCreate(256);
     for (iin = 0; iin < 256; iin++) {
         numaGetFValue(nasum, iin, &val);
         itarg = (l_int32)(255. * val / sum + 0.5);
         iout = iin + (l_int32)(fract * (itarg - iin));
         iout = L_MIN(iout, 255);  /* to be safe */
         numaAddNumber(nad, iout);
     }
 
     numaDestroy(&nah);
     numaDestroy(&nasum);
     return nad;
 }
 
 
 /*-------------------------------------------------------------*
  *                       Generic TRC mapping                   *
  *-------------------------------------------------------------*/
 /*!
  * \brief   pixTRCMap()
  *
  * \param[in]    pixs    8 grayscale or 32 bpp rgb; not colormapped
  * \param[in]    pixm    [optional] 1 bpp mask
  * \param[in]    na      mapping array
- * \return  pixd, or NULL on error
+ * \return  0 if OK, 1 on error
  *
  * <pre>
  * Notes:
  *      (1) This operation is in-place on pixs.
  *      (2) For 32 bpp, this applies the same map to each of the r,g,b
  *          components.
  *      (3) The mapping array is of size 256, and it maps the input
  *          index into values in the range [0, 255].
  *      (4) If defined, the optional 1 bpp mask pixm has its origin
  *          aligned with pixs, and the map function is applied only
  *          to pixels in pixs under the fg of pixm.
  *      (5) For 32 bpp, this does not save the alpha channel.
  * </pre>
  */
@@ -790,115 +790,115 @@ l_uint32   sval32, dval32;
 l_uint32  *data, *datam, *line, *linem, *tab;
 
     PROCNAME("pixTRCMap");
 
     if (!pixs)
         return ERROR_INT("pixs not defined", procName, 1);
     if (pixGetColormap(pixs))
         return ERROR_INT("pixs is colormapped", procName, 1);
     if (!na)
         return ERROR_INT("na not defined", procName, 1);
     if (numaGetCount(na) != 256)
         return ERROR_INT("na not of size 256", procName, 1);
     pixGetDimensions(pixs, &w, &h, &d);
     if (d != 8 && d != 32)
         return ERROR_INT("pixs not 8 or 32 bpp", procName, 1);
     if (pixm) {
         if (pixGetDepth(pixm) != 1)
             return ERROR_INT("pixm not 1 bpp", procName, 1);
     }
 
     tab = (l_uint32 *)numaGetIArray(na);  /* get the array for efficiency */
     wpl = pixGetWpl(pixs);
     data = pixGetData(pixs);
     if (!pixm) {
         if (d == 8) {
             for (i = 0; i < h; i++) {
                 line = data + i * wpl;
                 for (j = 0; j < w; j++) {
                     sval8 = GET_DATA_BYTE(line, j);
                     dval8 = tab[sval8];
                     SET_DATA_BYTE(line, j, dval8);
                 }
             }
         } else {  /* d == 32 */
             for (i = 0; i < h; i++) {
                 line = data + i * wpl;
                 for (j = 0; j < w; j++) {
                     sval32 = *(line + j);
                     dval32 =
                         tab[(sval32 >> L_RED_SHIFT) & 0xff] << L_RED_SHIFT |
                         tab[(sval32 >> L_GREEN_SHIFT) & 0xff] << L_GREEN_SHIFT |
                         tab[(sval32 >> L_BLUE_SHIFT) & 0xff] << L_BLUE_SHIFT;
                     *(line + j) = dval32;
                 }
             }
         }
     } else {
         datam = pixGetData(pixm);
         wplm = pixGetWpl(pixm);
         pixGetDimensions(pixm, &wm, &hm, NULL);
         if (d == 8) {
             for (i = 0; i < h; i++) {
                 if (i >= hm)
                     break;
                 line = data + i * wpl;
                 linem = datam + i * wplm;
                 for (j = 0; j < w; j++) {
                     if (j >= wm)
                         break;
                     if (GET_DATA_BIT(linem, j) == 0)
                         continue;
                     sval8 = GET_DATA_BYTE(line, j);
                     dval8 = tab[sval8];
                     SET_DATA_BYTE(line, j, dval8);
                 }
             }
         } else {  /* d == 32 */
             for (i = 0; i < h; i++) {
                 if (i >= hm)
                     break;
                 line = data + i * wpl;
                 linem = datam + i * wplm;
                 for (j = 0; j < w; j++) {
                     if (j >= wm)
                         break;
                     if (GET_DATA_BIT(linem, j) == 0)
                         continue;
                     sval32 = *(line + j);
                     dval32 =
                         tab[(sval32 >> L_RED_SHIFT) & 0xff] << L_RED_SHIFT |
                         tab[(sval32 >> L_GREEN_SHIFT) & 0xff] << L_GREEN_SHIFT |
                         tab[(sval32 >> L_BLUE_SHIFT) & 0xff] << L_BLUE_SHIFT;
                     *(line + j) = dval32;
                 }
             }
         }
     }
 
     LEPT_FREE(tab);
     return 0;
 }
 
 
 /*!
  * \brief   pixTRCMapGeneral()
  *
  * \param[in]    pixs             32 bpp rgb; not colormapped
  * \param[in]    pixm             [optional] 1 bpp mask
  * \param[in]    nar, nag, nab    mapping arrays
- * \return  pixd, or NULL on error
+ * \return  0 if OK, 1 on error
  *
  * <pre>
  * Notes:
  *      (1) This operation is in-place on %pixs.
  *      (2) Each of the r,g,b mapping arrays is of size 256. They map the
  *          input value for that color component into values in the
  *          range [0, 255].
  *      (3) In the special case where the r, g and b mapping arrays are
  *          all the same, call pixTRCMap() instead.
  *      (4) If defined, the optional 1 bpp mask %pixm has its origin
  *          aligned with %pixs, and the map function is applied only
  *          to pixels in %pixs under the fg of pixm.
  *      (5) The alpha channel is not saved.
  * </pre>
  */
diff --git a/src/finditalic.c b/src/finditalic.c
index be7e4c5..adcd0e7 100644
--- a/src/finditalic.c
+++ b/src/finditalic.c
@@ -126,115 +126,116 @@ PIX     *pixsd, *pixm, *pixd;
 SEL     *sel_ital1, *sel_ital2, *sel_ital3;
 
     PROCNAME("pixItalicWords");
 
-    if (!pixs)
-        return ERROR_INT("pixs not defined", procName, 1);
     if (!pboxa)
         return ERROR_INT("&boxa not defined", procName, 1);
+    *pboxa = NULL;
+    if (!pixs)
+        return ERROR_INT("pixs not defined", procName, 1);
     if (boxaw && pixw)
         return ERROR_INT("both boxaw and pixw are defined", procName, 1);
 
     sel_ital1 = selCreateFromString(str_ital1, 13, 6, NULL);
     sel_ital2 = selCreateFromString(str_ital2, 10, 6, NULL);
     sel_ital3 = selCreateFromString(str_ital3, 4, 2, NULL);
 
         /* Make the italic seed: extract with HMT; remove noise.
          * The noise removal close/open is important to exclude
          * situations where a small slanted line accidentally
          * matches sel_ital1. */
     pixsd = pixHMT(NULL, pixs, sel_ital1);
     pixClose(pixsd, pixsd, sel_ital3);
     pixOpen(pixsd, pixsd, sel_ital3);
 
         /* Make the word mask.  Use input boxes or mask if given. */
     size = 0;  /* init */
     if (boxaw) {
         pixm = pixCreateTemplate(pixs);
         pixMaskBoxa(pixm, pixm, boxaw, L_SET_PIXELS);
     } else if (pixw) {
         pixm = pixClone(pixw);
     } else {
         pixWordMaskByDilation(pixs, NULL, &size, NULL);
         L_INFO("dilation size = %d\n", procName, size);
         snprintf(opstring, sizeof(opstring), "d1.5 + c%d.1", size);
         pixm = pixMorphSequence(pixs, opstring, 0);
     }
 
         /* Binary reconstruction to fill in those word mask
          * components for which there is at least one seed pixel. */
     pixd = pixSeedfillBinary(NULL, pixsd, pixm, 8);
     boxa = pixConnComp(pixd, NULL, 8);
     *pboxa = boxa;
 
     if (debugflag) {
             /* Save results at at 2x reduction */
         l_int32  res, upper;
         lept_mkdir("lept/ital");
         BOXA  *boxat;
         GPLOT *gplot;
         NUMA  *na;
         PIXA  *pixa1;
         PIX   *pix1, *pix2, *pix3;
         pixa1 = pixaCreate(0);
         boxat = pixConnComp(pixm, NULL, 8);
         boxaWriteDebug("/tmp/lept/ital/ital.ba", boxat);
         pixaAddPix(pixa1, pixs, L_COPY);  /* orig */
         pixaAddPix(pixa1, pixsd, L_COPY);  /* seed */
         pix1 = pixConvertTo32(pixm);
         pixRenderBoxaArb(pix1, boxat, 3, 255, 0, 0);
         pixaAddPix(pixa1, pix1, L_INSERT);  /* mask + outline */
         pixaAddPix(pixa1, pixd, L_COPY);  /* ital mask */
         pix1 = pixConvertTo32(pixs);
         pixRenderBoxaArb(pix1, boxa, 3, 255, 0, 0);
         pixaAddPix(pixa1, pix1, L_INSERT);  /* orig + outline */
         pix1 = pixCreateTemplate(pixs);
         pix2 = pixSetBlackOrWhiteBoxa(pix1, boxa, L_SET_BLACK);
         pixCopy(pix1, pixs);
         pix3 = pixDilateBrick(NULL, pixs, 3, 3);
         pixCombineMasked(pix1, pix3, pix2);
         pixaAddPix(pixa1, pix1, L_INSERT);  /* ital bolded */
         pixDestroy(&pix2);
         pixDestroy(&pix3);
         pix2 = pixaDisplayTiledInColumns(pixa1, 1, 0.5, 20, 2);
         pixWriteDebug("/tmp/lept/ital/ital.png", pix2, IFF_PNG);
         pixDestroy(&pix2);
 
             /* Assuming the image represents 6 inches of actual page width,
              * the pixs resolution is approximately
              *    (width of pixs in pixels) / 6
              * and the images have been saved at half this resolution.   */
         res = pixGetWidth(pixs) / 12;
         L_INFO("resolution = %d\n", procName, res);
         l_pdfSetDateAndVersion(0);
         pixaConvertToPdf(pixa1, res, 1.0, L_FLATE_ENCODE, 75, "Italic Finder",
                          "/tmp/lept/ital/ital.pdf");
         l_pdfSetDateAndVersion(1);
         pixaDestroy(&pixa1);
         boxaDestroy(&boxat);
 
             /* Plot histogram of horizontal white run sizes.  A small
              * initial vertical dilation removes most runs that are neither
              * inter-character nor inter-word.  The larger first peak is
              * from inter-character runs, and the smaller second peak is
              * from inter-word runs. */
         pix1 = pixDilateBrick(NULL, pixs, 1, 15);
         upper = L_MAX(30, 3 * size);
         na = pixRunHistogramMorph(pix1, L_RUN_OFF, L_HORIZ, upper);
         pixDestroy(&pix1);
         gplot = gplotCreate("/tmp/lept/ital/runhisto", GPLOT_PNG,
                 "Histogram of horizontal runs of white pixels, vs length",
                 "run length", "number of runs");
         gplotAddPlot(gplot, NULL, na, GPLOT_LINES, "plot1");
         gplotMakeOutput(gplot);
         gplotDestroy(&gplot);
         numaDestroy(&na);
     }
 
     selDestroy(&sel_ital1);
     selDestroy(&sel_ital2);
     selDestroy(&sel_ital3);
     pixDestroy(&pixsd);
     pixDestroy(&pixm);
     pixDestroy(&pixd);
     return 0;
 }
diff --git a/src/pdfio2.c b/src/pdfio2.c
index 9ee4126..2f8629d 100644
--- a/src/pdfio2.c
+++ b/src/pdfio2.c
@@ -2412,57 +2412,76 @@ substituteObjectNumbers(L_BYTEA  *bas,
 l_uint8   space = ' ';
 l_uint8  *datas;
 l_uint8   buf[32];  /* only needs to hold one integer in ascii format */
-l_int32   start, nrepl, i, j, objin, objout, found;
+l_int32   start, nrepl, i, j, nobjs, objin, objout, found;
 l_int32  *objs, *matches;
 size_t    size;
 L_BYTEA  *bad;
 L_DNA    *da_match;
 
+    PROCNAME("substituteObjectNumbers");
+    if (!bas)
+        return (L_BYTEA *)ERROR_PTR("bas not defined", procName, NULL);
+    if (!na_objs)
+        return (L_BYTEA *)ERROR_PTR("na_objs not defined", procName, NULL);
+
     datas = l_byteaGetData(bas, &size);
     bad = l_byteaCreate(100);
     objs = numaGetIArray(na_objs);  /* object number mapper */
+    nobjs = numaGetCount(na_objs);  /* use for sanity checking */
 
         /* Substitute the object number on the first line */
     sscanf((char *)datas, "%d", &objin);
+    if (objin < 0 || objin >= nobjs) {
+        L_ERROR("index %d into array of size %d\n", procName, objin, nobjs);
+        LEPT_FREE(objs);
+        return bad;
+    }
     objout = objs[objin];
     snprintf((char *)buf, 32, "%d", objout);
     l_byteaAppendString(bad, (char *)buf);
 
         /* Find the set of matching locations for object references */
     arrayFindSequence(datas, size, &space, 1, &start, &found);
     da_match = arrayFindEachSequence(datas, size, (l_uint8 *)" 0 R", 4);
     if (!da_match) {
         l_byteaAppendData(bad, datas + start, size - start);
         LEPT_FREE(objs);
         return bad;
     }
 
         /* Substitute all the object reference numbers */
     nrepl = l_dnaGetCount(da_match);
     matches = l_dnaGetIArray(da_match);
     for (i = 0; i < nrepl; i++) {
             /* Find the first space before the object number */
         for (j = matches[i] - 1; j > 0; j--) {
             if (datas[j] == space)
                 break;
         }
             /* Copy bytes from 'start' up to the object number */
         l_byteaAppendData(bad, datas + start, j - start + 1);
         sscanf((char *)(datas + j + 1), "%d", &objin);
+        if (objin < 0 || objin >= nobjs) {
+            L_ERROR("index %d into array of size %d\n", procName, objin, nobjs);
+            LEPT_FREE(objs);
+            LEPT_FREE(matches);
+            l_dnaDestroy(&da_match);
+            return bad;
+        }
         objout = objs[objin];
         snprintf((char *)buf, 32, "%d", objout);
         l_byteaAppendString(bad, (char *)buf);
         start = matches[i];
     }
     l_byteaAppendData(bad, datas + start, size - start);
 
     LEPT_FREE(objs);
     LEPT_FREE(matches);
     l_dnaDestroy(&da_match);
     return bad;
 }
 
 
 /*---------------------------------------------------------------------*
  *                     Create/destroy/access pdf data                  *
  *---------------------------------------------------------------------*/
