commit 43006e3eaf712f9e5f39e9cd11cf0fcec0ba0237
Author: Nickolay Olshevsky <o.nickolay@gmail.com>
Date:   Mon Aug 31 13:03:40 2020 +0300

    Fix issue 25292 in oss-fuzz: rnp:fuzz_keyring: Stack-buffer-overflow in stream_write_key

diff --git a/src/librepgp/stream-packet.cpp b/src/librepgp/stream-packet.cpp
index 19e7abaf..168a1912 100644
--- a/src/librepgp/stream-packet.cpp
+++ b/src/librepgp/stream-packet.cpp
@@ -381,41 +381,43 @@ static bool
 add_packet_body_s2k(pgp_packet_body_t *body, const pgp_s2k_t *s2k)
 {
     if (!add_packet_body_byte(body, s2k->specifier) ||
         !add_packet_body_byte(body, s2k->hash_alg)) {
         return false;
     }
 
     switch (s2k->specifier) {
     case PGP_S2KS_SIMPLE:
         return true;
     case PGP_S2KS_SALTED:
         return add_packet_body(body, s2k->salt, PGP_SALT_SIZE);
     case PGP_S2KS_ITERATED_AND_SALTED: {
         uint8_t iter = s2k->iterations;
         if (s2k->iterations > 255) {
             iter = pgp_s2k_encode_iterations(s2k->iterations);
         }
         return add_packet_body(body, s2k->salt, PGP_SALT_SIZE) &&
                add_packet_body_byte(body, iter);
     }
     case PGP_S2KS_EXPERIMENTAL: {
         if ((s2k->gpg_ext_num != PGP_S2K_GPG_NO_SECRET) &&
             (s2k->gpg_ext_num != PGP_S2K_GPG_SMARTCARD)) {
             RNP_LOG("Unknown experimental s2k.");
             return false;
         }
         if (!add_packet_body(body, "GNU", 3) ||
             !add_packet_body_byte(body, s2k->gpg_ext_num)) {
             return false;
         }
         if (s2k->gpg_ext_num == PGP_S2K_GPG_SMARTCARD) {
+            static_assert(sizeof(s2k->gpg_serial) == 16, "invalid gpg serial length");
+            size_t slen = s2k->gpg_serial_len > 16 ? 16 : s2k->gpg_serial_len;
             return add_packet_body_byte(body, s2k->gpg_serial_len) &&
-                   add_packet_body(body, s2k->gpg_serial, s2k->gpg_serial_len);
+                   add_packet_body(body, s2k->gpg_serial, slen);
         }
         return true;
     }
     default:
         RNP_LOG("unknown s2k specifier");
         return false;
     }
 }
diff --git a/src/tests/data/test_fuzz_keyring/crash-8619144979e56d07ab4890bf564b90271ae9b1c9 b/src/tests/data/test_fuzz_keyring/crash-8619144979e56d07ab4890bf564b90271ae9b1c9
new file mode 100644
index 00000000..dada7b93
Binary files /dev/null and b/src/tests/data/test_fuzz_keyring/crash-8619144979e56d07ab4890bf564b90271ae9b1c9 differ
diff --git a/src/tests/fuzz_keyring.cpp b/src/tests/fuzz_keyring.cpp
index 3d43f6a7..92b61c81 100644
--- a/src/tests/fuzz_keyring.cpp
+++ b/src/tests/fuzz_keyring.cpp
@@ -35,9 +35,13 @@ extern "C" int keyring_LLVMFuzzerTestOneInput(const uint8_t *data, size_t size);
 TEST_F(rnp_tests, test_fuzz_keyring)
 {
     auto data = file_to_vec(DATA_PATH "leak-542d4e51506e3e9d34c9b243e608a964dabfdb21");
     assert_int_equal(data.size(), 540);
     assert_int_equal(keyring_LLVMFuzzerTestOneInput(data.data(), data.size()), 0);
 
     data = file_to_vec(DATA_PATH "crash-7ff10f10a95b78461d6f3578f5f99e870c792b9f");
     assert_int_equal(keyring_LLVMFuzzerTestOneInput(data.data(), data.size()), 0);
+
+    /* Issue 25292 in oss-fuzz: rnp:fuzz_keyring: Stack-buffer-overflow in stream_write_key */
+    data = file_to_vec(DATA_PATH "crash-8619144979e56d07ab4890bf564b90271ae9b1c9");
+    assert_int_equal(keyring_LLVMFuzzerTestOneInput(data.data(), data.size()), 0);
 }
