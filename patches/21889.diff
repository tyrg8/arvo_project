commit ec9cb53d9ae4d11c45a34d2acd4fb980c3227b17
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Sun Apr 26 17:30:09 2020 +0200

    Doc: fix a few links and rework redirect generation to be only done for gdal.org generation [skip travis] [skip appveyor]

diff --git a/gdal/doc/.azure-pipelines.yml b/gdal/doc/.azure-pipelines.yml
index 7ad4fd4998..0bd120b535 100644
--- a/gdal/doc/.azure-pipelines.yml
+++ b/gdal/doc/.azure-pipelines.yml
@@ -19,62 +19,62 @@ variables:
 jobs:
   - job: 'Documentation'
     pool:
       vmImage: 'ubuntu-16.04'
     container:
       image: osgeo/proj-docs
       options: --privileged
     steps:
       - script: |
           set -e
           python3 --version
           sphinx-build --version
         displayName: 'Sphinx version'
       - script: |
           set -e
           cd gdal/doc
           if find . -name '*.rst' | xargs grep -P '\t'; then echo 'Tabs are bad, please use four spaces in .rst files.'; false; fi
         displayName: 'Lint .rst files'
       - script: |
           set -e
           cd gdal/doc
-          make html
+          make html O="-D enable_redirects=1"
         displayName: 'Make html'
       - script: |
           set -e
           cd gdal/doc
           make latexpdf
         displayName: 'Make pdf'
       - task: DownloadSecureFile@1
         inputs:
           secureFile: 'pdal-docs-ssh-key'
         displayName: 'Get the deploy key'
         condition: notin(variables['Build.Reason'], 'PullRequest')
       - script: |
           set -e
           mkdir ~/.ssh && mv $DOWNLOADSECUREFILE_SECUREFILEPATH ~/.ssh/id_rsa
           chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa
           ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
         displayName: 'Deploy the key'
         condition: notin(variables['Build.Reason'], 'PullRequest')
       - script: |
           set -e
           mv gdal/doc/build/html gdal-docs
           rm gdal-docs/gdal.pdf
           cp gdal/doc/build/latex/gdal.pdf gdal-docs
           cp gdal/data/gdalicon.png gdal-docs # For GDAL autotest...
           cd gdal-docs
           wget https://download.osgeo.org/gdal/for_doc/javadoc.zip -O /tmp/javadoc.zip
           wget https://download.osgeo.org/gdal/for_doc/python-doc.tar.gz -O /tmp/python-doc.tar.gz
           unzip -q /tmp/javadoc.zip
           tar xzf /tmp/python-doc.tar.gz
           git init
           git config user.email "proj4bot@proj4.bot"
           git config user.name "GDAL Bot"
           git remote add origin git@github.com:OSGeo/gdal-docs.git
           echo "gdal.org" > CNAME
           touch .nojekyll
           git add -A
           git commit -m "Update with https://github.com/OSGeo/gdal/commit/$BUILD_SOURCEVERSION"
           git push -f origin master
         displayName: 'Deploy the docs'
         condition: notin(variables['Build.Reason'], 'PullRequest')
diff --git a/gdal/doc/Makefile b/gdal/doc/Makefile
index 4ee260835e..2e00d3156a 100644
--- a/gdal/doc/Makefile
+++ b/gdal/doc/Makefile
@@ -7,6 +7,8 @@ SPHINXBUILD   = sphinx-build
 SOURCEDIR     = source
 BUILDDIR      = build
 
+# Use O="-D enable_redirects=1" with "make html" to create redirects
+
 # Put it first so that "make" without argument is like "make help".
 help:
 	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
diff --git a/gdal/doc/source/_extensions/redirects.py b/gdal/doc/source/_extensions/redirects.py
index 02e564d9df..eb2cda21db 100644
--- a/gdal/doc/source/_extensions/redirects.py
+++ b/gdal/doc/source/_extensions/redirects.py
@@ -13,107 +13,116 @@ template="""<html>
 </html>"""
 
 
-def gather_redirects():
+def gather_redirects(src_dir):
     output = {}
 
     def fetch(path, d, prefix):
-        files = os.listdir(path)
+        files = os.listdir(os.path.join(src_dir, path))
         for f in files:
             driver = f.split('.')[0]
             if driver not in 'gpkg':
                 entry = {'%s_%s.html'% (prefix,driver) : os.path.join(path,driver)+'.html' }
                 d.update(entry)
+                if prefix == 'drv':
+                    entry = {'ogr/%s_%s.html'% (prefix,driver) : os.path.join('..', path,driver)+'.html' }
+                    d.update(entry)
 
     fetch('./drivers/raster', output, 'frmt')
     fetch('./drivers/vector', output, 'drv')
 
     output.update({ 'drv_geopackage.html' : os.path.join('./drivers/vector', 'gpkg') + '.html' })
-    output.update({ 'geopackage_aspatial.html' : os.path.join('./driver/vector', 'aspatial') + '.html' })
+    output.update({ 'geopackage_aspatial.html' : os.path.join('./drivers/vector', 'geopackage_aspatial') + '.html' })
     output.update({ 'drv_geopackage_raster.html' : os.path.join('./drivers/raster', 'gpkg') + '.html' })
     output.update({ 'ogr_feature_style.html' : os.path.join('./user', 'ogr_feature_style') + '.html' })
     output.update({ 'gdal_virtual_file_systems.html' : os.path.join('./user', 'virtual_file_systems') + '.html' })
     output.update({ 'ogr_formats.html' : os.path.join('./drivers/vector', 'index') + '.html' })
     output.update({ 'formats_list.html' : os.path.join('./drivers/raster', 'index') + '.html' })
     output.update({ 'frmt_various.html' : os.path.join('./drivers/raster', 'index') + '.html' })
     output.update({ 'gdal_vrttut.html' : os.path.join('./drivers/raster', 'vrt') + '.html' })
+    output.update({ 'ogr/ogr_apitut.html' : os.path.join('../tutorials', 'vector_api_tut') + '.html' })
+    output.update({ 'ogr_apitut.html' : os.path.join('./tutorials', 'vector_api_tut') + '.html' })
+    output.update({ 'ogr/ogr_arch.html' : os.path.join('../user', 'vector_data_model') + '.html' })
+    output.update({ 'ogr_arch.html' : os.path.join('./user', 'vector_data_model') + '.html' })
 
     # Legacy WFS3 renamed as OAPIF
     output.update({ 'drv_wfs3.html' : os.path.join('./drivers/vector', 'oapif') + '.html' })
     output.update({ os.path.join('./drivers/vector', 'wfs3') + '.html' : 'oapif.html' })
 
     raster_tools = [
         'gdal2tiles',
         'gdaladdo',
         'gdalbuildvrt',
         'gdal_calc',
         'gdalcompare',
         'gdal-config',
         'gdal_contour',
         'gdaldem',
         'gdal_edit',
         'gdal_fillnodata',
         'gdal_grid',
         'gdalinfo',
         'gdallocationinfo',
         'gdalmanage',
         'gdal_merge',
         'gdalmove',
         'gdal_pansharpen',
         'gdal_polygonize',
         'gdal_proximity',
         'gdal_rasterize',
         'gdal_retile',
         'gdal_sieve',
         'gdalsrsinfo',
         'gdaltindex',
         'gdaltransform',
         'gdal_translate',
         'gdalwarp',
         'nearblack',
         'rgb2pct',
         'pct2rgb',
     ]
     for utility in raster_tools:
         output.update({ utility + '.html' : os.path.join('./programs/', utility) + '.html' })
 
     vector_tools = [
         'ogr2ogr',
         'ogrinfo',
         'ogrlineref',
         'ogrmerge',
         'ogrtindex',
     ]
     for utility in vector_tools:
         output.update({ utility + '.html' : os.path.join('./programs/', utility) + '.html' })
 
     gnm_tools = [
         'gnmanalyse',
         'gnmmanage',
     ]
     for utility in gnm_tools:
         output.update({ utility + '.html' : os.path.join('./programs/', utility) + '.html' })
 
 
     return output
 
 
-
-
-from shutil import copyfile
 # copy legacy redirects
 def copy_legacy_redirects(app, docname): # Sphinx expects two arguments
-    if app.builder.name == 'html':
-        for key in app.config.redirect_files:
+    if app.config.enable_redirects and app.builder.name == 'html':
+        redirect_files = gather_redirects(app.srcdir)
+        for key in redirect_files:
             src = key
-            tgt = app.config.redirect_files[key]
+            tgt = redirect_files[key]
             html = template % (tgt, tgt)
-            with open(os.path.join(app.outdir, src), 'wb') as f:
+            outfilename = os.path.join(app.outdir, src)
+            dirname = os.path.dirname(outfilename)
+            if not os.path.exists(dirname):
+                os.makedirs(dirname)
+            with open(outfilename, 'wb') as f:
                 f.write(html.encode('utf-8'))
                 f.close()
 
 
 
 def setup(app):
-    app.add_config_value('redirect_files', {}, 'html')
+    app.add_config_value('enable_redirects', False, 'html')
     app.connect('build-finished', copy_legacy_redirects)
     return { 'parallel_read_safe': False, 'parallel_write_safe': True }
diff --git a/gdal/doc/source/conf.py b/gdal/doc/source/conf.py
index 81f71801cd..34e52a513d 100644
--- a/gdal/doc/source/conf.py
+++ b/gdal/doc/source/conf.py
@@ -22,9 +22,8 @@ project = 'GDAL'
 copyright = '1998-' + str(datetime.date.today().year)
 author = 'Frank Warmerdam, Even Rouault, and others'
 
-
 # -- General configuration ---------------------------------------------------
 
 # Add any Sphinx extension module names here, as strings. They can be
 # extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
 # ones.
@@ -410,7 +409,6 @@ breathe_default_project = "api"
 # Tell sphinx what the primary language being documented is.
 primary_domain = 'cpp'
 
-import redirects
-redirect_files = redirects.gather_redirects()
-
+# -- Redirects --------------------------------------------------
 
+enable_redirects = False
diff --git a/gdal/doc/source/development/rfc/rfc18_ogr_styles_c_api.rst b/gdal/doc/source/development/rfc/rfc18_ogr_styles_c_api.rst
index b55b33b311..46bf6cd717 100644
--- a/gdal/doc/source/development/rfc/rfc18_ogr_styles_c_api.rst
+++ b/gdal/doc/source/development/rfc/rfc18_ogr_styles_c_api.rst
@@ -15,9 +15,7 @@ Summary
 
 OGR has a number of C++ classes that deal with the encoding of style
 information and attaching that to features. More information is
-available in the
-`http://www.gdal.org/ogr/ogr_feature_style.html <http://www.gdal.org/ogr/ogr_feature_style.html>`__
-document.
+available in the :ref:`ogr_feature_style` document.
 
 With GDAL/OGR version 1.4.x and older, it was not possible to deal with
 style information using the C API. This RFC proposes the addition of
diff --git a/gdal/doc/source/development/rfc/rfc32_gdallocationinfo.rst b/gdal/doc/source/development/rfc/rfc32_gdallocationinfo.rst
index 4cf7bd1793..16d7b9aa9a 100644
--- a/gdal/doc/source/development/rfc/rfc32_gdallocationinfo.rst
+++ b/gdal/doc/source/development/rfc/rfc32_gdallocationinfo.rst
@@ -35,11 +35,10 @@ requests, and hopefully in a way that will have some general value as a
 gdallocationinfo
 ----------------
 
-Full docs are available at:
-`http://www.gdal.org/gdallocationinfo.html <http://www.gdal.org/gdallocationinfo.html>`__
+Full docs are available at :ref:`gdallocationinfo`
 
 ::
 
    Usage: gdallocationinfo [--help-general] [-xml] [-lifonly] [-valonlyl]
                            [-b band]* [-l_srs srs_def] [-geoloc] [-wgs84]
                            srcfile x y
diff --git a/gdal/doc/source/development/rfc/rfc34_license_policy.rst b/gdal/doc/source/development/rfc/rfc34_license_policy.rst
index 40761ea11a..14d21ab701 100644
--- a/gdal/doc/source/development/rfc/rfc34_license_policy.rst
+++ b/gdal/doc/source/development/rfc/rfc34_license_policy.rst
@@ -196,13 +196,12 @@ I believe the following drivers should be marked as "RECIPROCAL":
 Unresolved:
 
 -  The OGR SOSI driver should probably be marked as proprietary
    currently as it relies on linking with binary objects with unknown
    licencing terms, even if apparently the ultimate goal seems to open
    source them.
--  I'm a bit confused by
-   `http://gdal.org/frmt_msg.html <http://gdal.org/frmt_msg.html>`__.
+-  I'm a bit confused by :ref:`raster.msg`.
    Seems that it relies on third party stuff with both proprietary and
    GPL code.
 -  I am unsure about the ODBC based drivers. I suppose PGEO and
    MSSQLSPATIAL drivers ought to be marked proprietary too? Might it
    depend on the actual license terms of the odbc library?
diff --git a/gdal/doc/source/development/rfc/rfc41_multiple_geometry_fields.rst b/gdal/doc/source/development/rfc/rfc41_multiple_geometry_fields.rst
index b1311f385e..0ea6686dde 100644
--- a/gdal/doc/source/development/rfc/rfc41_multiple_geometry_fields.rst
+++ b/gdal/doc/source/development/rfc/rfc41_multiple_geometry_fields.rst
@@ -615,9 +615,7 @@ Documentation
 -------------
 
 In addition to function level documentation, the new capability will be
-documented in the `OGR
-Architecture <http://gdal.org/ogr/ogr_arch.html>`__ and `OGR API
-tutorial <http://gdal.org/ogr/ogr_apitut.html>`__ documents.
+documented in the :ref:`vector_data_model` and :ref:`vector_api_tut` documents.
 
 Python and other language bindings
 ----------------------------------
diff --git a/gdal/doc/source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst b/gdal/doc/source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst
index aeb25bb02e..4cee541903 100644
--- a/gdal/doc/source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst
+++ b/gdal/doc/source/development/rfc/rfc64_triangle_polyhedralsurface_tin.rst
@@ -15,8 +15,7 @@ Implementation version: GDAL 2.2
 Summary
 -------
 
-As of now, the OGRGeometry class (found at
-[http://www.gdal.org/classOGRGeometry.html]) (the base class from which
+As of now, the :cpp:class:`OGRGeometry` class (the base class from which
 all the subtypes are derived) is limited to OGRCompoundCurve,
 OGRCircularString, OGRLinearRing, OGRMultiLineString, OGRMultiPoint,
 OGRMultiPolygon, OGRMultiCurve, OGRSimpleCurve, OGRCurvePolygon and
diff --git a/gdal/doc/source/development/rfc/rfc66_randomlayerreadwrite.rst b/gdal/doc/source/development/rfc/rfc66_randomlayerreadwrite.rst
index 2580b37c4d..cb59911fdd 100644
--- a/gdal/doc/source/development/rfc/rfc66_randomlayerreadwrite.rst
+++ b/gdal/doc/source/development/rfc/rfc66_randomlayerreadwrite.rst
@@ -30,8 +30,7 @@ rather inefficient (this requires for each layer to read the whole
 file). One example of such drivers is the OSM driver. For this driver, a
 hack had been developed in the past to be able to use the
 OGRLayer::GetNextFeature() method, but with a really particular
-semantics. See "Interleaved reading" paragraph of
-`http://gdal.org/drv_osm.html <http://gdal.org/drv_osm.html>`__ for more
+semantics. See "Interleaved reading" paragraph of :ref:`vector.osm` for more
 details. A similar need arises with the development of a new driver,
 GMLAS (for GML Application Schemas), that reads GML files with arbitrary
 element nesting, and thus can return them in a apparent random order,
diff --git a/gdal/doc/source/drivers/raster/mg4lidar_view_point_cloud.rst b/gdal/doc/source/drivers/raster/mg4lidar_view_point_cloud.rst
index 20d8217a09..3bc963ea80 100644
--- a/gdal/doc/source/drivers/raster/mg4lidar_view_point_cloud.rst
+++ b/gdal/doc/source/drivers/raster/mg4lidar_view_point_cloud.rst
@@ -269,8 +269,8 @@ Attributes:  (none)
 
 Notes
 
-- Each of the interpolation methods (MovingAverage, etc.) is an element whose content is a text string corresponding to the parameter(s) for that method.  See http://www.gdal.org/grid_tutorial.html for a description of the methods and their parameter strings.
+- Each of the interpolation methods (MovingAverage, etc.) is an element whose content is a text string corresponding to the parameter(s) for that method.  See :ref:`gdal_grid_tut` for a description of the methods and their parameter strings.
 - In the parameter descriptions, MAX is used to indicate the value defined by libc which is the largest supportable value for the output datatype.  If you choose to override this default be sure that the number you specify will fit in the datatype you specify.
 - If this element is omitted, the band shall have the "None" interpolation method applied.
 - If this element is a child of the PointCloudView element, it applies to all bands (unless overridden for a specific band)
 - If this element is a child of a Band element, it applies to this band only and overrides any other setting
diff --git a/gdal/doc/source/drivers/vector/aspatial.rst b/gdal/doc/source/drivers/vector/geopackage_aspatial.rst
similarity index 99%
rename from gdal/doc/source/drivers/vector/aspatial.rst
rename to gdal/doc/source/drivers/vector/geopackage_aspatial.rst
index 0d33e28477..6371bd56d3 100644
--- a/gdal/doc/source/drivers/vector/aspatial.rst
+++ b/gdal/doc/source/drivers/vector/geopackage_aspatial.rst
@@ -1,4 +1,4 @@
-.. _vector.aspatial:
+.. _vector.geopackage_aspatial:
 
 GeoPackage aspatial extension
 =============================
diff --git a/gdal/doc/source/drivers/vector/gpkg.rst b/gdal/doc/source/drivers/vector/gpkg.rst
index 13c0ef3ba8..b5f6eb765b 100644
--- a/gdal/doc/source/drivers/vector/gpkg.rst
+++ b/gdal/doc/source/drivers/vector/gpkg.rst
@@ -261,7 +261,7 @@ support non-spatial tables. This was added in GeoPackage 1.2 as the
 "attributes" data type.
 
 Starting with GDAL 2.0, the driver allows creating and reading
-non-spatial tables with the :ref:`vector.aspatial`.
+non-spatial tables with the :ref:`vector.geopackage_aspatial`.
 
 Starting with GDAL 2.2, the driver will also, by default, list non
 spatial tables that are not registered through the gdal_aspatial
@@ -302,30 +302,30 @@ example with "ogrinfo --format GPKG")
 Level of support of GeoPackage Extensions
 -----------------------------------------
 
 (Restricted to those have a vector scope)
 
 .. list-table:: Extensions
    :header-rows: 1
 
    * - Extension name
      - OGC adopted extension ?
      - Supported by GDAL?
    * - `Non-Linear Geometry Types <http://www.geopackage.org/guidance/extensions/nonlinear_geometry_types.html>`__
      - Yes
      - Yes, since GDAL 2.1
    * - `RTree Spatial Indexes <http://www.geopackage.org/guidance/extensions/rtree_spatial_indexes.html>`__
      - Yes
      - Yes, since GDAL 2.0
    * - `Metadata <http://www.geopackage.org/guidance/extensions/metadata.html>`__
      - Yes
      - Yes, since GDAL 1.11
    * - `Schema <http://www.geopackage.org/guidance/extensions/schema.html>`__
      - Yes
      - No
    * - `WKT for Coordinate Reference Systems <http://www.geopackage.org/guidance/extensions/wkt_for_crs.md>`__ (WKT v2)
      - Yes
      -  Partially, since GDAL 2.2. GDAL can read databases using this extension, but cannot interpret a SRS entry that has only a WKT v2 entry.
-   * - :ref:`vector.aspatial`
+   * - :ref:`vector.geopackage_aspatial`
      - No
      - Yes, since GDAL 2.0. Deprecated in GDAL 2.2 for the *attributes* official data_type
 
@@ -361,17 +361,17 @@ Examples
 See Also
 --------
 
 -  :ref:`GeoPackage raster <raster.gpkg>` documentation page
 -  `Getting Started With
    GeoPackage <http://www.geopackage.org/guidance/getting-started.html>`__
 -  `OGC GeoPackage format standard <http://www.geopackage.org/spec/>`__
    specification, HTML format (current/development version of the
    standard)
 -  `OGC GeoPackage Encoding
    Standard <http://www.opengeospatial.org/standards/geopackage>`__ page
 -  `SQLite <http://sqlite.org/>`__
 
 .. toctree::
    :hidden:
 
-   aspatial
+   geopackage_aspatial
