commit 5f7b9d802498215f5769a8bfa39d92356da2cfdd
Author: Darryl Sokoloski <darryl@sokoloski.ca>
Date:   Thu Jan 7 04:58:48 2021 -0500

    Increase SNI hostname buffer length to 256. (#1111)
    
    According to RFC 4366, SNI host names can be up to 255 bytes.
    Previous size of 64 resulted in failed application matches due to truncation.
    
    For example:
     0976e041e65b1aece3e720df36ac6bd7.safeframe.googlesyndication.co|m
    
    Signed-off-by: Darryl Sokoloski <darryl@sokoloski.ca>

diff --git a/src/include/ndpi_typedefs.h b/src/include/ndpi_typedefs.h
index 16587ef9..69cb8085 100644
--- a/src/include/ndpi_typedefs.h
+++ b/src/include/ndpi_typedefs.h
@@ -1167,235 +1167,235 @@ typedef enum {
 /*
   NOTE
   When the struct below is modified don't forget to update
   - ndpi_flow_struct (in python/ndpi.py)
  */
 struct ndpi_flow_struct {
   u_int16_t detected_protocol_stack[NDPI_PROTOCOL_SIZE];
   u_int16_t protocol_stack_info;
 
   /* init parameter, internal used to set up timestamp,... */
   u_int16_t guessed_protocol_id, guessed_host_protocol_id, guessed_category, guessed_header_category;
   u_int8_t l4_proto, protocol_id_already_guessed:1, host_already_guessed:1, fail_with_unknown:1,
     init_finished:1, setup_packet_direction:1, packet_direction:1, check_extra_packets:1;
 
   /*
     if ndpi_struct->direction_detect_disable == 1
     tcp sequence number connection tracking
   */
   u_int32_t next_tcp_seq_nr[2];
 
   u_int8_t max_extra_packets_to_check;
   u_int8_t num_extra_packets_checked;
   u_int8_t num_processed_pkts; /* <= WARNING it can wrap but we do expect people to giveup earlier */
 
   int (*extra_packets_func) (struct ndpi_detection_module_struct *, struct ndpi_flow_struct *flow);
 
   /*
     the tcp / udp / other l4 value union
     used to reduce the number of bytes for tcp or udp protocol states
   */
   union {
     struct ndpi_flow_tcp_struct tcp;
     struct ndpi_flow_udp_struct udp;
   } l4;
 
   /* Place textual flow info here */
   char flow_extra_info[16];
   
   /*
     Pointer to src or dst that identifies the
     server of this connection
   */
   struct ndpi_id_struct *server_id;
   /* HTTP host or DNS query */
   u_char host_server_name[240];
   u_int8_t initial_binary_bytes[8], initial_binary_bytes_len;
   u_int8_t risk_checked;
   ndpi_risk risk; /* Issues found with this flow [bitmask of ndpi_risk] */
   
   /*
     This structure below will not not stay inside the protos
     structure below as HTTP is used by many subprotocols
     such as FaceBook, Google... so it is hard to know
     when to use it or not. Thus we leave it outside for the
     time being.
   */
   struct {
     ndpi_http_method method;
     char *url, *content_type /* response */, *request_content_type /* e.g. for POST */, *user_agent;
     u_int8_t num_request_headers, num_response_headers;
     u_int8_t request_version; /* 0=1.0 and 1=1.1. Create an enum for this? */
     u_int16_t response_status_code; /* 200, 404, etc. */
   } http;
 
   /* 
      Put outside of the union to avoid issues in case the protocol
      is remapped to somethign pther than Kerberos due to a faulty
      dissector
   */
   struct {    
     char *pktbuf;
     u_int16_t pktbuf_maxlen, pktbuf_currlen;
   } kerberos_buf;
 
   union {
     /* the only fields useful for nDPI and ntopng */
     struct {
       u_int8_t num_queries, num_answers, reply_code, is_query;
       u_int16_t query_type, query_class, rsp_type;
       ndpi_ip_addr_t rsp_addr; /* The first address in a DNS response packet */
     } dns;
 
     struct {
       u_int8_t request_code;
       u_int8_t version;
     } ntp;
 
     struct {
       char hostname[48], domain[48], username[48];
     } kerberos;
 
     struct {
       struct {
         char ssl_version_str[12];
 	u_int16_t ssl_version, server_names_len;
-	char client_requested_server_name[64], *server_names,
-	  *alpn, *tls_supported_versions, *issuerDN, *subjectDN;
+	char client_requested_server_name[256], /* SNI hostname length: RFC 4366 */
+	  *server_names, *alpn, *tls_supported_versions, *issuerDN, *subjectDN;
 	u_int32_t notBefore, notAfter;
 	char ja3_client[33], ja3_server[33];
 	u_int16_t server_cipher;
 
 	struct {
 	  u_int16_t cipher_suite;
 	  char *esni;
 	} encrypted_sni;
 	ndpi_cipher_weakness server_unsafe_cipher;
       } ssl;
 
       struct {
 	u_int8_t num_udp_pkts, num_processed_pkts, num_binding_requests;
       } stun;
 
       /* We can have STUN over SSL/TLS thus they need to live together */
     } stun_ssl;
 
     struct {
       char client_signature[48], server_signature[48];
       char hassh_client[33], hassh_server[33];
     } ssh;
 
     struct {
       u_int8_t last_one_byte_pkt, last_byte;
     } imo;
     
     struct {
       u_int8_t username_detected:1, username_found:1,
 	password_detected:1, password_found:1,
 	_pad:4;
       u_int8_t character_id;
       char username[32], password[32];
     } telnet;
     
     struct {
       char version[32];
     } ubntac2;
 
     struct {
       /* Via HTTP User-Agent */
       u_char detected_os[32];
       /* Via HTTP X-Forwarded-For */
       u_char nat_ip[24];
     } http;
 
     struct {
       u_int8_t auth_found:1, auth_failed:1, _pad:5;
       char username[16], password[16];
     } ftp_imap_pop_smtp;
   
     struct {
       /* Bittorrent hash */
       u_char hash[20];
     } bittorrent;
 
     struct {
       char fingerprint[48];
       char class_ident[48];
     } dhcp;
   } protos;
 
   /*** ALL protocol specific 64 bit variables here ***/
 
   /* protocols which have marked a connection as this connection cannot be protocol XXX, multiple u_int64_t */
   NDPI_PROTOCOL_BITMASK excluded_protocol_bitmask;
 
   ndpi_protocol_category_t category;
 
   /* NDPI_PROTOCOL_REDIS */
   u_int8_t redis_s2d_first_char, redis_d2s_first_char;
 
   u_int16_t packet_counter;		      // can be 0 - 65000
   u_int16_t packet_direction_counter[2];
   u_int16_t byte_counter[2];
   /* NDPI_PROTOCOL_BITTORRENT */
   u_int8_t bittorrent_stage;		      // can be 0 - 255
 
   /* NDPI_PROTOCOL_DIRECTCONNECT */
   u_int8_t directconnect_stage:2;	      // 0 - 1
 
   /* NDPI_PROTOCOL_HTTP */
   u_int8_t http_detected:1;
 
   /* NDPI_PROTOCOL_RTSP */
   u_int8_t rtsprdt_stage:2, rtsp_control_flow:1;
 
   /* NDPI_PROTOCOL_YAHOO */
   u_int8_t yahoo_detection_finished:2;
 
   /* NDPI_PROTOCOL_ZATTOO */
   u_int8_t zattoo_stage:3;
 
   /* NDPI_PROTOCOL_QQ */
   u_int8_t qq_stage:3;
 
   /* NDPI_PROTOCOL_THUNDER */
   u_int8_t thunder_stage:2;		        // 0 - 3
 
   /* NDPI_PROTOCOL_FLORENSIA */
   u_int8_t florensia_stage:1;
 
   /* NDPI_PROTOCOL_SOCKS */
   u_int8_t socks5_stage:2, socks4_stage:2;      // 0 - 3
 
   /* NDPI_PROTOCOL_EDONKEY */
   u_int8_t edonkey_stage:2;	                // 0 - 3
 
   /* NDPI_PROTOCOL_FTP_CONTROL */
   u_int8_t ftp_control_stage:2;
 
   /* NDPI_PROTOCOL_RTMP */
   u_int8_t rtmp_stage:2;
 
   /* NDPI_PROTOCOL_STEAM */
   u_int16_t steam_stage:3, steam_stage1:3, steam_stage2:2, steam_stage3:2;
 
   /* NDPI_PROTOCOL_STARCRAFT */
   u_int8_t starcraft_udp_stage : 3;	// 0-7
 
   /* NDPI_PROTOCOL_OPENVPN */
   u_int8_t ovpn_session_id[8];
   u_int8_t ovpn_counter;
 
   /* NDPI_PROTOCOL_TINC */
   u_int8_t tinc_state;
   struct tinc_cache_entry tinc_cache_entry;
 
   /* NDPI_PROTOCOL_CSGO */
   u_int8_t csgo_strid[18],csgo_state,csgo_s2;
   u_int32_t csgo_id2;
   
   /* internal structures to save functions calls */
   struct ndpi_packet_struct packet;
   struct ndpi_flow_struct *flow;
   struct ndpi_id_struct *src;
   struct ndpi_id_struct *dst;
 };
