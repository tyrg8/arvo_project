commit 31f4d5aa4e1f174cef8163e4af40f7bea728cd0c
Author: jhendersonHDF <jhenderson@hdfgroup.org>
Date:   Fri Aug 18 16:00:10 2023 -0500

    Fix valgrind warning about write of uninitialized bytes (#3389)

diff --git a/src/H5FScache.c b/src/H5FScache.c
index 28fe2a4b45..420582e2a4 100644
--- a/src/H5FScache.c
+++ b/src/H5FScache.c
@@ -1185,58 +1185,69 @@ done:
 static herr_t
 H5FS__cache_sinfo_serialize(const H5F_t *f, void *_image, size_t len, void *_thing)
 {
-    H5FS_sinfo_t  *sinfo = (H5FS_sinfo_t *)_thing;   /* Pointer to the object */
-    H5FS_iter_ud_t udata;                            /* User data for callbacks */
+    H5FS_sinfo_t  *sinfo = (H5FS_sinfo_t *)_thing; /* Pointer to the object */
+    H5FS_iter_ud_t udata;                          /* User data for callbacks */
+    ptrdiff_t      gap_size;
     uint8_t       *image        = (uint8_t *)_image; /* Pointer into raw data buffer */
     uint8_t       *chksum_image = NULL;              /* Points to chksum location */
     uint32_t       metadata_chksum;                  /* Computed metadata checksum value */
     unsigned       bin;                              /* Current bin we are on */
     herr_t         ret_value = SUCCEED;              /* Return value */
 
     FUNC_ENTER_PACKAGE
 
     /* Sanity checks */
     assert(f);
     assert(image);
     assert(sinfo);
     assert(sinfo->cache_info.type == H5AC_FSPACE_SINFO);
     assert(sinfo->fspace->cache_info.type == H5AC_FSPACE_HDR);
     assert(sinfo->fspace->cache_info.is_pinned);
     assert(sinfo->fspace->sect_size == len);
     assert(sinfo->fspace->sect_cls);
 
     /* Magic number */
     H5MM_memcpy(image, H5FS_SINFO_MAGIC, (size_t)H5_SIZEOF_MAGIC);
     image += H5_SIZEOF_MAGIC;
 
     /* Version # */
     *image++ = H5FS_SINFO_VERSION;
 
     /* Address of free space header for these sections */
     H5F_addr_encode(f, &image, sinfo->fspace->addr);
 
     /* Set up user data for iterator */
     udata.sinfo         = sinfo;
     udata.image         = &image;
     udata.sect_cnt_size = H5VM_limit_enc_size((uint64_t)sinfo->fspace->serial_sect_count);
 
     /* Iterate over all the bins */
     for (bin = 0; bin < sinfo->nbins; bin++)
         /* Check if there are any sections in this bin */
         if (sinfo->bins[bin].bin_list)
             /* Iterate over list of section size nodes for bin */
             if (H5SL_iterate(sinfo->bins[bin].bin_list, H5FS__sinfo_serialize_node_cb, &udata) < 0)
                 HGOTO_ERROR(H5E_FSPACE, H5E_BADITER, FAIL, "can't iterate over section size nodes");
 
     /* Compute checksum */
 
     /* There may be empty space between entries and chksum */
-    chksum_image    = (uint8_t *)(_image) + len - H5FS_SIZEOF_CHKSUM;
+    chksum_image = (uint8_t *)(_image) + len - H5FS_SIZEOF_CHKSUM;
+
+    /*
+     * If there is any empty space between the entries and
+     * checksum, make sure that the space is initialized
+     * before serializing it
+     */
+    gap_size = chksum_image - image;
+    if (gap_size > 0)
+        memset(image, 0, (size_t)gap_size);
+
     metadata_chksum = H5_checksum_metadata(_image, (size_t)(chksum_image - (uint8_t *)_image), 0);
     /* Metadata checksum */
     UINT32ENCODE(chksum_image, metadata_chksum);
 
     /* Sanity check */
     assert((chksum_image == image) ||
            ((size_t)((image - (uint8_t *)_image) + (chksum_image - image)) == sinfo->fspace->sect_size));
     assert(sinfo->fspace->sect_size <= sinfo->fspace->alloc_sect_size);
