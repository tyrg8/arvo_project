commit 8ea407a6e4d57ac71499cf8fa1b7c5be4cf66dd3
Author: Francesc Alted <francesc@blosc.org>
Date:   Sat May 7 12:29:04 2022 +0200

    Fix some compiler warnings in ndlz.

diff --git a/plugins/codecs/ndlz/ndlz8x8.c b/plugins/codecs/ndlz/ndlz8x8.c
index fc760a52..8714fc56 100644
--- a/plugins/codecs/ndlz/ndlz8x8.c
+++ b/plugins/codecs/ndlz/ndlz8x8.c
@@ -429,150 +429,150 @@ static unsigned char* copy_match_16(unsigned char *op, const unsigned char *matc
 int ndlz8_decompress(const uint8_t *input, int32_t input_len, uint8_t *output, int32_t output_len,
                      uint8_t meta, blosc2_dparams *dparams) {
   BLOSC_UNUSED_PARAM(meta);
   BLOSC_UNUSED_PARAM(dparams);
 
   const int cell_shape = 8;
   const int cell_size = 64;
   uint8_t* ip = (uint8_t*)input;
   uint8_t* ip_limit = ip + input_len;
   uint8_t* op = (uint8_t*)output;
   uint8_t ndim;
-  uint32_t blockshape[2];
-  uint32_t eshape[2];
+  int32_t blockshape[2];
+  int32_t eshape[2];
   uint8_t* buffercpy;
   uint8_t token;
   if (NDLZ_UNEXPECT_CONDITIONAL(input_len < 8)) {
     return 0;
   }
 
   /* we start with literal copy */
   ndim = *ip;
   ip ++;
   if (ndim != 2) {
     fprintf(stderr, "This codec only works for ndim = 2");
     return -1;
   }
   memcpy(&blockshape[0], ip, 4);
   ip += 4;
   memcpy(&blockshape[1], ip, 4);
   ip += 4;
   eshape[0] = ((blockshape[0] + 7) / cell_shape) * cell_shape;
   eshape[1] = ((blockshape[1] + 7) / cell_shape) * cell_shape;
 
   if (NDLZ_UNEXPECT_CONDITIONAL(output_len < blockshape[0] * blockshape[1])) {
     return 0;
   }
   memset(op, 0, blockshape[0] * blockshape[1]);
 
-  uint32_t i_stop[2];
+  int32_t i_stop[2];
   for (int i = 0; i < 2; ++i) {
     i_stop[i] = eshape[i] / cell_shape;
   }
 
 
   /* main loop */
-  uint32_t ii[2];
-  uint32_t padding[2];
-  uint32_t ind = 0;
+  int32_t ii[2];
+  int32_t padding[2];
+  int32_t ind = 0;
   uint8_t* local_buffer = malloc(cell_size);
   uint8_t* cell_aux = malloc(cell_size);
   for (ii[0] = 0; ii[0] < i_stop[0]; ++ii[0]) {
     for (ii[1] = 0; ii[1] < i_stop[1]; ++ii[1]) {      // for each cell
       if (NDLZ_UNEXPECT_CONDITIONAL(ip > ip_limit)) {
         printf("Literal copy \n");
         free(local_buffer);
         free(cell_aux);
         return 0;
       }
       if (ii[0] == i_stop[0] - 1) {
         padding[0] = (blockshape[0] % cell_shape == 0) ? cell_shape : blockshape[0] % cell_shape;
       } else {
         padding[0] = cell_shape;
       }
       if (ii[1] == i_stop[1] - 1) {
         padding[1] = (blockshape[1] % cell_shape == 0) ? cell_shape : blockshape[1] % cell_shape;
       } else {
         padding[1] = cell_shape;
       }
       token = *ip++;
       uint8_t match_type = (token >> 3U);
       if (token == 0){    // no match
         buffercpy = ip;
         ip += padding[0] * padding[1];
       } else if (token == (uint8_t)((1U << 7U) | (1U << 6U))) {  // cell match
         uint16_t offset = *((uint16_t*) ip);
         buffercpy = ip - offset - 1;
         ip += 2;
       } else if (token == (uint8_t)(1U << 6U)) { // whole cell of same element
         buffercpy = cell_aux;
         memset(buffercpy, *ip, cell_size);
         ip++;
       } else if (match_type == 21) {    // triple match
         buffercpy = local_buffer;
         int row = (int) (token & 7);
         uint16_t offset = *((uint16_t*) ip);
         ip += 2;
         for (int l = 0; l < 3; l++) {
           memcpy(&buffercpy[(row + l) * cell_shape],
                  ip - sizeof(token) - sizeof(offset) - offset + l * cell_shape, cell_shape);
         }
         for (int l = 0; l < cell_shape; l++) {
           if ((l < row) || (l > row + 2)) {
             memcpy(&buffercpy[l * cell_shape], ip, cell_shape);
             ip += cell_shape;
           }
         }
       } else if (match_type == 17) {    // pair match
         buffercpy = local_buffer;
         int row = (int) (token & 7);
         uint16_t offset = *((uint16_t*) ip);
         ip += 2;
         for (int l = 0; l < 2; l++) {
           memcpy(&buffercpy[(row + l) * cell_shape],
                  ip - sizeof(token) - sizeof(offset) - offset + l * cell_shape, cell_shape);
         }
         for (int l = 0; l < cell_shape; l++) {
           if ((l < row) || (l > row + 1)) {
             memcpy(&buffercpy[l * cell_shape], ip, cell_shape);
             ip += cell_shape;
           }
         }
       } else {
         printf("Invalid token: %u at cell [%d, %d]\n", token, ii[0], ii[1]);
         free(local_buffer);
         free(cell_aux);
         return 0;
       }
 
       uint32_t orig = ii[0] * cell_shape * blockshape[1] + ii[1] * cell_shape;
-      for (uint32_t i = 0; i < (uint32_t) cell_shape; i++) {
+      for (int32_t i = 0; i < (int32_t) cell_shape; i++) {
         if (i < padding[0]) {
           ind = orig + i * blockshape[1];
           memcpy(&op[ind], buffercpy, padding[1]);
         }
         buffercpy += padding[1];
       }
-      if (ind > (uint32_t) output_len) {
+      if (ind > output_len) {
         printf("Output size is bigger than max \n");
         free(local_buffer);
         free(cell_aux);
         return 0;
       }
     }
   }
   ind += padding[1];
 
   free(cell_aux);
   free(local_buffer);
 
   if (ind != (blockshape[0] * blockshape[1])) {
     printf("Output size is not compatible with embedded blockshape \n");
     return 0;
   }
-  if (ind > (uint32_t) output_len) {
+  if (ind > output_len) {
     printf("Output size is bigger than max \n");
     return 0;
   }
 
   return (int)ind;
 }
