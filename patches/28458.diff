commit b4c2e4d553099a85f75edf8fe9c64028e7302766
Author: Philip Withnall <pwithnall@endlessos.org>
Date:   Wed Dec 9 12:07:41 2020 +0000

    gdate: Validate input as UTF-8 before parsing
    
    Dates have to be valid UTF-8.
    
    oss-fuzz#28458
    
    Signed-off-by: Philip Withnall <pwithnall@endlessos.org>

diff --git a/glib/gdate.c b/glib/gdate.c
index c896c224e..391b142a8 100644
--- a/glib/gdate.c
+++ b/glib/gdate.c
@@ -1227,172 +1227,176 @@ void
 g_date_set_parse (GDate       *d, 
                   const gchar *str)
 {
   GDateParseTokens pt;
   guint m = G_DATE_BAD_MONTH, day = G_DATE_BAD_DAY, y = G_DATE_BAD_YEAR;
   
   g_return_if_fail (d != NULL);
   
   /* set invalid */
   g_date_clear (d, 1);
-  
+
+  /* The input has to be valid UTF-8. */
+  if (!g_utf8_validate (str, -1, NULL))
+    return;
+
   G_LOCK (g_date_global);
 
   g_date_prepare_to_parse (str, &pt);
   
   DEBUG_MSG (("Found %d ints, '%d' '%d' '%d' and written out month %d",
 	      pt.num_ints, pt.n[0], pt.n[1], pt.n[2], pt.month));
   
   
   if (pt.num_ints == 4) 
     {
       G_UNLOCK (g_date_global);
       return; /* presumably a typo; bail out. */
     }
   
   if (pt.num_ints > 1)
     {
       int i = 0;
       int j = 0;
       
       g_assert (pt.num_ints < 4); /* i.e., it is 2 or 3 */
       
       while (i < pt.num_ints && j < 3) 
         {
           switch (dmy_order[j])
             {
             case G_DATE_MONTH:
 	    {
 	      if (pt.num_ints == 2 && pt.month != G_DATE_BAD_MONTH)
 		{
 		  m = pt.month;
 		  ++j;      /* skip months, but don't skip this number */
 		  continue;
 		}
 	      else 
 		m = pt.n[i];
 	    }
 	    break;
             case G_DATE_DAY:
 	    {
 	      if (pt.num_ints == 2 && pt.month == G_DATE_BAD_MONTH)
 		{
 		  day = 1;
 		  ++j;      /* skip days, since we may have month/year */
 		  continue;
 		}
 	      day = pt.n[i];
 	    }
 	    break;
             case G_DATE_YEAR:
 	    {
 	      y  = pt.n[i];
 	      
 	      if (locale_era_adjust != 0)
 	        {
 		  y += locale_era_adjust;
 	        }
 	      else if (using_twodigit_years && y < 100)
 		{
 		  guint two     =  twodigit_start_year % 100;
 		  guint century = (twodigit_start_year / 100) * 100;
 		  
 		  if (y < two)
 		    century += 100;
 		  
 		  y += century;
 		}
 	    }
 	    break;
             default:
               break;
             }
 	  
           ++i;
           ++j;
         }
       
       
       if (pt.num_ints == 3 && !g_date_valid_dmy (day, m, y))
         {
           /* Try YYYY MM DD */
           y   = pt.n[0];
           m   = pt.n[1];
           day = pt.n[2];
           
           if (using_twodigit_years && y < 100) 
             y = G_DATE_BAD_YEAR; /* avoids ambiguity */
         }
       else if (pt.num_ints == 2)
 	{
 	  if (m == G_DATE_BAD_MONTH && pt.month != G_DATE_BAD_MONTH)
 	    m = pt.month;
 	}
     }
   else if (pt.num_ints == 1) 
     {
       if (pt.month != G_DATE_BAD_MONTH)
         {
           /* Month name and year? */
           m    = pt.month;
           day  = 1;
           y = pt.n[0];
         }
       else
         {
           /* Try yyyymmdd and yymmdd */
 	  
           m   = (pt.n[0]/100) % 100;
           day = pt.n[0] % 100;
           y   = pt.n[0]/10000;
 	  
           /* FIXME move this into a separate function */
           if (using_twodigit_years && y < 100)
             {
               guint two     =  twodigit_start_year % 100;
               guint century = (twodigit_start_year / 100) * 100;
               
               if (y < two)
                 century += 100;
               
               y += century;
             }
         }
     }
   
   /* See if we got anything valid out of all this. */
   /* y < 8000 is to catch 19998 style typos; the library is OK up to 65535 or so */
   if (y < 8000 && g_date_valid_dmy (day, m, y)) 
     {
       d->month = m;
       d->day   = day;
       d->year  = y;
       d->dmy   = TRUE;
     }
 #ifdef G_ENABLE_DEBUG
   else 
     {
       DEBUG_MSG (("Rejected DMY %u %u %u", day, m, y));
     }
 #endif
   G_UNLOCK (g_date_global);
 }
 
 /**
  * g_date_set_time_t:
  * @date: a #GDate 
  * @timet: time_t value to set
  *
  * Sets the value of a date to the date corresponding to a time 
  * specified as a time_t. The time to date conversion is done using 
  * the user's current timezone.
  *
  * To set the value of a date to the current day, you could write:
  * |[<!-- language="C" -->
  *  time_t now = time (NULL);
  *  if (now == (time_t) -1)
  *    // handle the error
  *  g_date_set_time_t (date, now);
  * ]|
  *
  * Since: 2.10
  */
diff --git a/glib/tests/date.c b/glib/tests/date.c
index e49ec3419..38de1d9be 100644
--- a/glib/tests/date.c
+++ b/glib/tests/date.c
@@ -184,6 +184,29 @@ test_parse (void)
   g_date_free (d);
 }
 
+static void
+test_parse_invalid (void)
+{
+  const gchar * const strs[] =
+    {
+      /* Incomplete UTF-8 sequence */
+      "\xfd",
+    };
+  gsize i;
+
+  for (i = 0; i < G_N_ELEMENTS (strs); i++)
+    {
+      GDate *d = g_date_new ();
+
+      g_test_message ("Test %" G_GSIZE_FORMAT, i);
+      g_date_set_parse (d, strs[i]);
+
+      g_assert_false (g_date_valid (d));
+
+      g_date_free (d);
+    }
+}
+
 static void
 test_parse_locale_change (void)
 {
@@ -737,52 +760,53 @@ int
 main (int argc, char** argv)
 {
   gchar *path;
   gsize i;
 
   /* Try to get all the leap year cases. */
   int check_years[] = {
     1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
     11, 12, 13, 14, 98, 99, 100, 101, 102, 103, 397,
     398, 399, 400, 401, 402, 403, 404, 405, 406,
     1598, 1599, 1600, 1601, 1602, 1650, 1651,
     1897, 1898, 1899, 1900, 1901, 1902, 1903,
     1961, 1962, 1963, 1964, 1965, 1967,
     1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
     1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
     1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,
     1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
     2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
     3000, 3001, 3002, 3998, 3999, 4000, 4001, 4002, 4003
   };
 
   g_setenv ("LC_ALL", "en_US.utf-8", TRUE);
   setlocale (LC_ALL, "");
 #ifdef G_OS_WIN32
   SetThreadLocale (MAKELCID (MAKELANGID (LANG_ENGLISH, SUBLANG_ENGLISH_US), SORT_DEFAULT));
 #endif
 
   g_test_init (&argc, &argv, NULL);
   g_test_bug_base ("http://bugzilla.gnome.org/");
 
   g_test_add_func ("/date/basic", test_basic);
   g_test_add_func ("/date/empty", test_empty_constructor);
   g_test_add_func ("/date/dmy", test_dmy_constructor);
   g_test_add_func ("/date/julian", test_julian_constructor);
   g_test_add_func ("/date/dates", test_dates);
   g_test_add_func ("/date/parse", test_parse);
+  g_test_add_func ("/date/parse/invalid", test_parse_invalid);
   g_test_add_func ("/date/parse_locale_change", test_parse_locale_change);
   g_test_add_func ("/date/month_substring", test_month_substring);
   g_test_add_func ("/date/month_names", test_month_names);
   g_test_add_func ("/date/clamp", test_clamp);
   g_test_add_func ("/date/order", test_order);
   for (i = 0; i < G_N_ELEMENTS (check_years); i++)
     {
       path = g_strdup_printf ("/date/year/%d", check_years[i]);
       g_test_add_data_func (path, GINT_TO_POINTER(check_years[i]), test_year);
       g_free (path);
     }
   g_test_add_func ("/date/copy", test_copy);
   g_test_add_func ("/date/valid-dmy", test_valid_dmy);
 
   return g_test_run ();
 }
