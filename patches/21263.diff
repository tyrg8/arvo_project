commit c6acf97bfbe5ad26db3c2f5dd4d379ac674d6fb3
Author: Philippe Antoine <contact@catenacyber.fr>
Date:   Thu Mar 19 16:54:31 2020 +0100

    Adds different checks against overflows

diff --git a/src/lib/protocols/dns.c b/src/lib/protocols/dns.c
index 8290ca9d..460117c9 100644
--- a/src/lib/protocols/dns.c
+++ b/src/lib/protocols/dns.c
@@ -83,142 +83,142 @@ static uint32_t dns_validchar[8] =
 static int search_valid_dns(struct ndpi_detection_module_struct *ndpi_struct,
 			    struct ndpi_flow_struct *flow,
 			    struct ndpi_dns_packet_header *dns_header,
 			    int payload_offset, u_int8_t *is_query) {
   int x = payload_offset;
 
   memcpy(dns_header, (struct ndpi_dns_packet_header*)&flow->packet.payload[x],
 	 sizeof(struct ndpi_dns_packet_header));
 
   dns_header->tr_id = ntohs(dns_header->tr_id);
   dns_header->flags = ntohs(dns_header->flags);
   dns_header->num_queries = ntohs(dns_header->num_queries);
   dns_header->num_answers = ntohs(dns_header->num_answers);
   dns_header->authority_rrs = ntohs(dns_header->authority_rrs);
   dns_header->additional_rrs = ntohs(dns_header->additional_rrs);
 
   x += sizeof(struct ndpi_dns_packet_header);
 
   /* 0x0000 QUERY */
   if((dns_header->flags & FLAGS_MASK) == 0x0000)
     *is_query = 1;
   /* 0x8000 RESPONSE */
   else if((dns_header->flags & FLAGS_MASK) == 0x8000)
     *is_query = 0;
   else
     return(1 /* invalid */);
 
   if(*is_query) {
     /* DNS Request */
     if((dns_header->num_queries > 0) && (dns_header->num_queries <= NDPI_MAX_DNS_REQUESTS)
        && (((dns_header->flags & 0x2800) == 0x2800 /* Dynamic DNS Update */)
 	   || ((dns_header->num_answers == 0) && (dns_header->authority_rrs == 0)))) {
       /* This is a good query */
       while(x+2 < flow->packet.payload_packet_len) {
         if(flow->packet.payload[x] == '\0') {
           x++;
           flow->protos.dns.query_type = get16(&x, flow->packet.payload);
 #ifdef DNS_DEBUG
           NDPI_LOG_DBG2(ndpi_struct, "query_type=%2d\n", flow->protos.dns.query_type);
 	  printf("[DNS] query_type=%d\n", flow->protos.dns.query_type);
 #endif
 	  break;
 	} else
 	  x++;
       }
     } else
       return(1 /* invalid */);
   } else {
     /* DNS Reply */
     flow->protos.dns.reply_code = dns_header->flags & 0x0F;
 
     if((dns_header->num_queries > 0) && (dns_header->num_queries <= NDPI_MAX_DNS_REQUESTS) /* Don't assume that num_queries must be zero */
        && (((dns_header->num_answers > 0) && (dns_header->num_answers <= NDPI_MAX_DNS_REQUESTS))
 	   || ((dns_header->authority_rrs > 0) && (dns_header->authority_rrs <= NDPI_MAX_DNS_REQUESTS))
 	   || ((dns_header->additional_rrs > 0) && (dns_header->additional_rrs <= NDPI_MAX_DNS_REQUESTS)))
        ) {
       /* This is a good reply: we dissect it both for request and response */
 
       /* Leave the statement below commented necessary in case of call to ndpi_get_partial_detection() */
       x++;
 
-      if(flow->packet.payload[x] != '\0') {
+      if(x < flow->packet.payload_packet_len && flow->packet.payload[x] != '\0') {
 	while((x < flow->packet.payload_packet_len)
 	      && (flow->packet.payload[x] != '\0')) {
 	  x++;
 	}
 
 	x++;
       }
 
       x += 4;
 
       if(dns_header->num_answers > 0) {
 	u_int16_t rsp_type;
 	u_int16_t num;
 
 	for(num = 0; num < dns_header->num_answers; num++) {
 	  u_int16_t data_len;
 
 	  if((x+6) >= flow->packet.payload_packet_len) {
 	    break;
 	  }
 
 	  if((data_len = getNameLength(x, flow->packet.payload, flow->packet.payload_packet_len)) == 0) {
 	    break;
 	  } else
 	    x += data_len;
 
 	  if((x+2) >= flow->packet.payload_packet_len) {
 	    break;
 	  }
 	  rsp_type = get16(&x, flow->packet.payload);
 	  flow->protos.dns.rsp_type = rsp_type;
 
 	  /* here x points to the response "class" field */
 	  if((x+12) <= flow->packet.payload_packet_len) {
 	    x += 6;
 	    data_len = get16(&x, flow->packet.payload);
 	    
 	    if((x + data_len) <= flow->packet.payload_packet_len) {
 	      // printf("[rsp_type: %u][data_len: %u]\n", rsp_type, data_len);
 
 	      if(rsp_type == 0x05 /* CNAME */) {
 		x += data_len;
 		continue; /* Skip CNAME */
 	      }
 	      
 	      if((((rsp_type == 0x1) && (data_len == 4)) /* A */
 #ifdef NDPI_DETECTION_SUPPORT_IPV6
 		  || ((rsp_type == 0x1c) && (data_len == 16)) /* AAAA */
 #endif
 		  )) {
 		memcpy(&flow->protos.dns.rsp_addr, flow->packet.payload + x, data_len);
 	      }
 	    }
 	  }
 	  
 	  break;
 	}
       }
      
       if((flow->packet.detected_protocol_stack[0] == NDPI_PROTOCOL_DNS)
 	 || (flow->packet.detected_protocol_stack[1] == NDPI_PROTOCOL_DNS)) {
 	/* Request already set the protocol */
 	// flow->extra_packets_func = NULL; /* Removed so the caller can keep dissecting DNS flows */
       } else {
 	/* We missed the request */
 	u_int16_t s_port = flow->packet.udp ? ntohs(flow->packet.udp->source) : ntohs(flow->packet.tcp->source);
 	
 	ndpi_set_detected_protocol(ndpi_struct, flow,
 				   (s_port == 5355) ? NDPI_PROTOCOL_LLMNR : NDPI_PROTOCOL_DNS,
 				   NDPI_PROTOCOL_UNKNOWN);
       }
     } else
       return(1 /* invalid */);
   }
 
   /* Valid */
   return(0);
 }
 
 /* *********************************************** */
diff --git a/src/lib/protocols/fix.c b/src/lib/protocols/fix.c
index c1f4d270..35cb1529 100644
--- a/src/lib/protocols/fix.c
+++ b/src/lib/protocols/fix.c
@@ -31,33 +31,33 @@
 void ndpi_search_fix(struct ndpi_detection_module_struct *ndpi_struct, struct ndpi_flow_struct *flow)
 {
   struct ndpi_packet_struct *packet = &flow->packet;
 
   NDPI_LOG_DBG(ndpi_struct, "search FIX\n");
-  if(packet->tcp) {
+  if(packet->tcp && packet->payload_packet_len > 5) {
     // 8=
     if(packet->payload[0] == 0x38 && packet->payload[1] == 0x3d) {
       // FIX.
       if(packet->payload[2] == 0x46 &&
 	 packet->payload[3] == 0x49 &&
 	 packet->payload[4] == 0x58 &&
 	 packet->payload[5] == 0x2e) {
 	
 	NDPI_LOG_INFO(ndpi_struct, "found FIX\n");
 	ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_FIX, NDPI_PROTOCOL_UNKNOWN);
 	return;
       }
       // 0. 9=
       if(packet->payload[2] == 0x4f &&
 	 packet->payload[3] == 0x01 &&
 	 packet->payload[4] == 0x39 &&
 	 packet->payload[5] == 0x3d) {
 
 	NDPI_LOG_INFO(ndpi_struct, "found FIX\n");
 	ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_FIX, NDPI_PROTOCOL_UNKNOWN);
 	return;
       }
     }
   }
 
   NDPI_EXCLUDE_PROTO(ndpi_struct, flow);
 }
diff --git a/src/lib/protocols/ssh.c b/src/lib/protocols/ssh.c
index f3b50b60..959b9c09 100644
--- a/src/lib/protocols/ssh.c
+++ b/src/lib/protocols/ssh.c
@@ -96,122 +96,124 @@ static void ndpi_int_ssh_add_connection(struct ndpi_detection_module_struct
 static u_int16_t concat_hash_string(struct ndpi_packet_struct *packet,
 				   char *buf, u_int8_t client_hash) {
   u_int16_t offset = 22, buf_out_len = 0;
+  if(offset+sizeof(u_int32_t) >= packet->payload_packet_len)
+    goto invalid_payload;
   u_int32_t len = ntohl(*(u_int32_t*)&packet->payload[offset]);
   offset += 4;
 
   /* -1 for ';' */
   if((offset >= packet->payload_packet_len) || (len >= packet->payload_packet_len-offset-1))
     goto invalid_payload;
 
   /* ssh.kex_algorithms [C/S] */
   strncpy(buf, (const char *)&packet->payload[offset], buf_out_len = len);
   buf[buf_out_len++] = ';';
   offset += len;
 
   /* ssh.server_host_key_algorithms [None] */
   len = ntohl(*(u_int32_t*)&packet->payload[offset]);
   offset += 4 + len;
 
   /* ssh.encryption_algorithms_client_to_server [C] */
   len = ntohl(*(u_int32_t*)&packet->payload[offset]);
 
   if(client_hash) {
     offset += 4;
 
     if((offset >= packet->payload_packet_len) || (len >= packet->payload_packet_len-offset-1))
       goto invalid_payload;
 
     strncpy(&buf[buf_out_len], (const char *)&packet->payload[offset], len);
     buf_out_len += len;
     buf[buf_out_len++] = ';';
     offset += len;
   } else
     offset += 4 + len;
 
   /* ssh.encryption_algorithms_server_to_client [S] */
   len = ntohl(*(u_int32_t*)&packet->payload[offset]);
 
   if(!client_hash) {
     offset += 4;
 
     if((offset >= packet->payload_packet_len) || (len >= packet->payload_packet_len-offset-1))
       goto invalid_payload;
 
     strncpy(&buf[buf_out_len], (const char *)&packet->payload[offset], len);
     buf_out_len += len;
     buf[buf_out_len++] = ';';
     offset += len;
   } else
     offset += 4 + len;
 
   /* ssh.mac_algorithms_client_to_server [C] */
   len = ntohl(*(u_int32_t*)&packet->payload[offset]);
 
   if(client_hash) {
     offset += 4;
 
     if((offset >= packet->payload_packet_len) || (len >= packet->payload_packet_len-offset-1))
       goto invalid_payload;
 
     strncpy(&buf[buf_out_len], (const char *)&packet->payload[offset], len);
     buf_out_len += len;
     buf[buf_out_len++] = ';';
     offset += len;
   } else
     offset += 4 + len;
 
   /* ssh.mac_algorithms_server_to_client [S] */
   len = ntohl(*(u_int32_t*)&packet->payload[offset]);
 
   if(!client_hash) {
     offset += 4;
 
     if((offset >= packet->payload_packet_len) || (len >= packet->payload_packet_len-offset-1))
       goto invalid_payload;
 
     strncpy(&buf[buf_out_len], (const char *)&packet->payload[offset], len);
     buf_out_len += len;
     buf[buf_out_len++] = ';';
     offset += len;
   } else
     offset += 4 + len;
 
   /* ssh.compression_algorithms_client_to_server [C] */
   len = ntohl(*(u_int32_t*)&packet->payload[offset]);
 
   if(client_hash) {
     offset += 4;
 
     if((offset >= packet->payload_packet_len) || (len >= packet->payload_packet_len-offset-1))
       goto invalid_payload;
 
     strncpy(&buf[buf_out_len], (const char *)&packet->payload[offset], len);
     buf_out_len += len;
     offset += len;
   } else
     offset += 4 + len;
 
   /* ssh.compression_algorithms_server_to_client [S] */
   len = ntohl(*(u_int32_t*)&packet->payload[offset]);
 
   if(!client_hash) {
     offset += 4;
 
     if((offset >= packet->payload_packet_len) || (len >= packet->payload_packet_len-offset-1))
       goto invalid_payload;
 
     strncpy(&buf[buf_out_len], (const char *)&packet->payload[offset], len);
     buf_out_len += len;
     offset += len;
   } else
     offset += 4 + len;
 
   /* ssh.languages_client_to_server [None] */
 
   /* ssh.languages_server_to_client [None] */
 
 #ifdef SSH_DEBUG
   printf("[SSH] %s\n", buf);
 #endif
 
   return(buf_out_len);
diff --git a/src/lib/protocols/yahoo.c b/src/lib/protocols/yahoo.c
index bd7f3ef6..d80e9cae 100644
--- a/src/lib/protocols/yahoo.c
+++ b/src/lib/protocols/yahoo.c
@@ -62,26 +62,29 @@ __forceinline static
 #endif
 u_int8_t check_ymsg(const u_int8_t * payload, u_int16_t payload_packet_len)
 {
   if (payload_packet_len < sizeof(struct ndpi_yahoo_header)) {
     return 0;
   }
   const struct ndpi_yahoo_header *yahoo = (struct ndpi_yahoo_header *) payload;
   
   u_int16_t yahoo_len_parsed = 0;
   do {
     u_int16_t ylen = ntohs(yahoo->len);
     
     yahoo_len_parsed += 20 + ylen;	/* possible overflow here: 20 + ylen = 0x10000 --> 0 --> infinite loop */
 
     if(ylen >= payload_packet_len || yahoo_len_parsed >= payload_packet_len)
       break;
 
+    if (payload_packet_len < yahoo_len_parsed + sizeof(struct ndpi_yahoo_header)) {
+      return 0;
+    }
     yahoo = (struct ndpi_yahoo_header *) (payload + yahoo_len_parsed);
   }
   while(memcmp(yahoo->YMSG_str, "YMSG", 4) == 0);
 
   if(yahoo_len_parsed == payload_packet_len)
     return 1;
   
   return 0;
 }
