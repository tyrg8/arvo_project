commit dbac50e667c70419625ce52eebb8b928f1ee6dfa
Author: Alan T. DeKok <aland@freeradius.org>
Date:   Fri Feb 9 09:49:50 2024 -0500

    check for fragment with insufficient room for header

diff --git a/src/protocols/radius/decode.c b/src/protocols/radius/decode.c
index 8ef039f386..d7faf79657 100644
--- a/src/protocols/radius/decode.c
+++ b/src/protocols/radius/decode.c
@@ -836,117 +836,117 @@ static ssize_t decode_vsa_internal(TALLOC_CTX *ctx, fr_pair_list_t *out,
 /** Convert a fragmented extended attr to a VP
  *
  * Format is:
  *
  * attr
  * length
  * extended-attr
  * flag
  * data...
  *
  * But for the first fragment, we get passed a pointer to the "extended-attr"
  */
 static ssize_t decode_extended_fragments(TALLOC_CTX *ctx, fr_pair_list_t *out,
 					 fr_dict_attr_t const *parent,
 					 uint8_t const *data, size_t attr_len,
 					 fr_radius_decode_ctx_t *packet_ctx)
 {
 	ssize_t		ret;
 	size_t		fraglen;
 	uint8_t		*head, *tail;
 	uint8_t const	*frag, *end;
 	uint8_t const	*attr;
 	int		fragments;
 	bool		last_frag;
 
 	/*
 	 *	data = Ext-Attr Flag ...
 	 */
 
 	if (attr_len < 3) return -1;
 
 	/*
 	 *	No continuation, just decode the attribute in place.
 	 */
 	if ((data[1] & 0x80) == 0) {
 		ret = fr_radius_decode_pair_value(ctx, out,
 						  parent, data + 2, attr_len - 2, packet_ctx);
 		if (ret < 0) return -1;
 		return attr_len;
 	}
 
 	/*
 	 *	Calculate the length of all of the fragments.  For
 	 *	now, they MUST be contiguous in the packet, and they
 	 *	MUST be all of the same TYPE and EXTENDED-TYPE
 	 */
 	attr = data - 2;
 	fraglen = attr_len - 2;
 	frag = data + attr_len;
 	end = packet_ctx->end;
 	fragments = 1;
 	last_frag = false;
 
 	while (frag < end) {
-		if (last_frag ||
+		if (last_frag || ((end - frag) < 2) ||
 		    (frag[0] != attr[0]) ||
 		    (frag[1] < 4) ||		       /* too short for long-extended */
 		    (frag[2] != attr[2]) ||
 		    ((frag + frag[1]) > end)) {		/* overflow */
 			end = frag;
 			break;
 		}
 
 		last_frag = ((frag[3] & 0x80) == 0);
 
 		fraglen += frag[1] - 4;
 		frag += frag[1];
 		fragments++;
 	}
 
 	head = tail = talloc_array(ctx, uint8_t, fraglen);
 	if (!head) return -1;
 
 	FR_PROTO_TRACE("Fragments %d, total length %d", fragments, (int) fraglen);
 
 	/*
 	 *	And again, but faster and looser.
 	 *
 	 *	We copy the first fragment, followed by the rest of
 	 *	the fragments.
 	 */
 	frag = attr;
 
 	while (fragments >  0) {
 		if (frag[1] > 4) memcpy_bounded(tail, frag + 4, frag[1] - 4, end);
 		tail += frag[1] - 4;
 		frag += frag[1];
 		fragments--;
 	}
 
 	FR_PROTO_HEX_DUMP(head, fraglen, "long-extended fragments");
 
 	/*
 	 *	Reset the "end" pointer, because we're not passing in
 	 *	the real data.
 	 */
 	{
 		uint8_t const *tmp = packet_ctx->end;
 		packet_ctx->end = head + fraglen;
 
 		ret = fr_radius_decode_pair_value(ctx, out,
 						  parent, head, fraglen, packet_ctx);
 
 		packet_ctx->end = tmp;
 	}
 
 	talloc_free(head);
 	if (ret < 0) return ret;
 
 	return end - data;
 }
 
 /** Fast path for most extended attributes.
  *
  *  data_len has already been checked by the caller, so we don't care
  *  about it here.
  */
