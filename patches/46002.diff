commit 089cedc7520fbb9e0e4a912c4c3866a1aa429de6
Author: Veronika Hanulikova <vhanulik@redhat.com>
Date:   Mon Mar 28 16:56:17 2022 +0200

    Check file value length
    
    Thank oss-fuzz
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=46002

diff --git a/src/pkcs15init/pkcs15-epass2003.c b/src/pkcs15init/pkcs15-epass2003.c
index 74d8ba26..b845b95a 100644
--- a/src/pkcs15init/pkcs15-epass2003.c
+++ b/src/pkcs15init/pkcs15-epass2003.c
@@ -307,86 +307,91 @@ static int
 cosm_new_file(struct sc_profile *profile, struct sc_card *card,
 	      unsigned int type, unsigned int num, struct sc_file **out)
 {
-	struct sc_file *file;
+	struct sc_file *file = NULL;
 	const char *_template = NULL, *desc = NULL;
 	unsigned int structure = 0xFFFFFFFF;
 
 	SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);
 	sc_log(card->ctx,  "type %X; num %i\n", type,
 		 num);
 	while (1) {
 		switch (type) {
 		case SC_PKCS15_TYPE_PRKEY_EC:
-			desc = "RSA private key";
+			desc = "EC private key";
 			_template = "private-key";
 			structure = SC_CARDCTL_OBERTHUR_KEY_EC_CRT;
 			break;
 		case SC_PKCS15_TYPE_PUBKEY_EC:
-			desc = "RSA public key";
+			desc = "EC public key";
 			_template = "public-key";
 			structure = SC_CARDCTL_OBERTHUR_KEY_EC_PUBLIC;
 			break;
 		case SC_PKCS15_TYPE_PRKEY_RSA:
 			desc = "RSA private key";
 			_template = "private-key";
 			structure = SC_CARDCTL_OBERTHUR_KEY_RSA_CRT;
 			break;
 		case SC_PKCS15_TYPE_PUBKEY_RSA:
 			desc = "RSA public key";
 			_template = "public-key";
 			structure = SC_CARDCTL_OBERTHUR_KEY_RSA_PUBLIC;
 			break;
 		case SC_PKCS15_TYPE_PRKEY:
 			desc = "extractable private key";
 			_template = "extractable-key";
 			break;
 		case SC_PKCS15_TYPE_CERT:
 			desc = "certificate";
 			_template = "certificate";
 			break;
 		case SC_PKCS15_TYPE_DATA_OBJECT:
 			desc = "data object";
 			_template = "data";
 			break;
 		}
 		if (_template)
 			break;
 		/* If this is a specific type such as
 		 * SC_PKCS15_TYPE_CERT_FOOBAR, fall back to
 		 * the generic class (SC_PKCS15_TYPE_CERT)
 		 */
 		if (!(type & ~SC_PKCS15_TYPE_CLASS_MASK)) {
 			sc_log(card->ctx, 
 				 "File type %X not supported by card driver",
 				 type);
 			return SC_ERROR_INVALID_ARGUMENTS;
 		}
 		type &= SC_PKCS15_TYPE_CLASS_MASK;
 	}
 
 	sc_log(card->ctx,  "template %s; num %i\n",
 		 _template, num);
 	if (sc_profile_get_file(profile, _template, &file) < 0) {
 		sc_log(card->ctx, 
 			 "Profile doesn't define %s template '%s'\n", desc,
 			 _template);
 		return SC_ERROR_NOT_SUPPORTED;
 	}
 
+	if (file->path.len < 1) {
+		sc_file_free(file);
+		return SC_ERROR_INTERNAL;
+	}
+
 	file->id &= 0xFF00;
 	file->id |= (num & 0x00FF);
 
 	file->path.value[file->path.len - 1] = (num & 0xFF);
 	file->type = SC_FILE_TYPE_INTERNAL_EF;
 	file->ef_structure = structure;
 
 	sc_log(card->ctx, 
 		 "file size %"SC_FORMAT_LEN_SIZE_T"u; ef type %i/%i; id %04X, path_len %"SC_FORMAT_LEN_SIZE_T"u\n",
 		 file->size, file->type, file->ef_structure, file->id,
 		 file->path.len);
 	sc_log(card->ctx,  "file path: %s",
 		 sc_print_path(&(file->path)));
 	*out = file;
 
 	SC_FUNC_RETURN(card->ctx, SC_LOG_DEBUG_VERBOSE, SC_SUCCESS);
 }
