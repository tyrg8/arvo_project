commit bcefc6be9754d45fb9391993e6daaf01a68d9bd5
Author: Alan Modra <amodra@gmail.com>
Date:   Wed Mar 22 10:13:46 2023 +1030

    coff_get_normalized_symtab bfd_release
    
    We can't free "internal" on errors, since bfd_coff_swap_sym_in may
    call bfd_alloc.  For example, _bfd_XXi_swap_sym_in may even create new
    sections, which use bfd_alloc'd memory.  If "internal" is freed, all
    more recently bfd_alloc'd memory is also freed.
    
            * coffgen.c (coff_get_normalized_symtab): Don't bfd_release on
            error.

diff --git a/bfd/coffgen.c b/bfd/coffgen.c
index 774edf76f24..0b764b0c45f 100644
--- a/bfd/coffgen.c
+++ b/bfd/coffgen.c
@@ -1703,245 +1703,242 @@ combined_entry_type *
 coff_get_normalized_symtab (bfd *abfd)
 {
   combined_entry_type *internal;
   combined_entry_type *internal_ptr;
   combined_entry_type *symbol_ptr;
   combined_entry_type *internal_end;
   size_t symesz;
   char *raw_src;
   char *raw_end;
   const char *string_table = NULL;
   asection * debug_sec = NULL;
   char *debug_sec_data = NULL;
   bfd_size_type size;
 
   if (obj_raw_syments (abfd) != NULL)
     return obj_raw_syments (abfd);
 
   if (! _bfd_coff_get_external_symbols (abfd))
     return NULL;
 
   size = obj_raw_syment_count (abfd);
   /* Check for integer overflow.  */
   if (size > (bfd_size_type) -1 / sizeof (combined_entry_type))
     return NULL;
   size *= sizeof (combined_entry_type);
   internal = (combined_entry_type *) bfd_zalloc (abfd, size);
   if (internal == NULL && size != 0)
     return NULL;
   internal_end = internal + obj_raw_syment_count (abfd);
 
   raw_src = (char *) obj_coff_external_syms (abfd);
 
   /* Mark the end of the symbols.  */
   symesz = bfd_coff_symesz (abfd);
   raw_end = PTR_ADD (raw_src, obj_raw_syment_count (abfd) * symesz);
 
   /* FIXME SOMEDAY.  A string table size of zero is very weird, but
      probably possible.  If one shows up, it will probably kill us.  */
 
   /* Swap all the raw entries.  */
   for (internal_ptr = internal;
        raw_src < raw_end;
        raw_src += symesz, internal_ptr++)
     {
       unsigned int i;
 
       bfd_coff_swap_sym_in (abfd, (void *) raw_src,
 			    (void *) & internal_ptr->u.syment);
       symbol_ptr = internal_ptr;
       internal_ptr->is_sym = true;
 
       /* PR 17512: Prevent buffer overrun.  */
       if (symbol_ptr->u.syment.n_numaux > ((raw_end - 1) - raw_src) / symesz)
-	{
-	  bfd_release (abfd, internal);
-	  return NULL;
-	}
+	return NULL;
 
       for (i = 0;
 	   i < symbol_ptr->u.syment.n_numaux;
 	   i++)
 	{
 	  internal_ptr++;
 	  raw_src += symesz;
 
 	  bfd_coff_swap_aux_in (abfd, (void *) raw_src,
 				symbol_ptr->u.syment.n_type,
 				symbol_ptr->u.syment.n_sclass,
 				(int) i, symbol_ptr->u.syment.n_numaux,
 				&(internal_ptr->u.auxent));
 
 	  internal_ptr->is_sym = false;
 	  coff_pointerize_aux (abfd, internal, symbol_ptr, i,
 			       internal_ptr, internal_end);
 	}
     }
 
   /* Free the raw symbols.  */
   if (obj_coff_external_syms (abfd) != NULL
       && ! obj_coff_keep_syms (abfd))
     {
       free (obj_coff_external_syms (abfd));
       obj_coff_external_syms (abfd) = NULL;
     }
 
   for (internal_ptr = internal; internal_ptr < internal_end;
        internal_ptr++)
     {
       BFD_ASSERT (internal_ptr->is_sym);
 
       if (internal_ptr->u.syment.n_sclass == C_FILE
 	  && internal_ptr->u.syment.n_numaux > 0)
 	{
 	  combined_entry_type * aux = internal_ptr + 1;
 
 	  /* Make a file symbol point to the name in the auxent, since
 	     the text ".file" is redundant.  */
 	  BFD_ASSERT (! aux->is_sym);
 
 	  if (aux->u.auxent.x_file.x_n.x_n.x_zeroes == 0)
 	    {
 	      /* The filename is a long one, point into the string table.  */
 	      if (string_table == NULL)
 		{
 		  string_table = _bfd_coff_read_string_table (abfd);
 		  if (string_table == NULL)
 		    return NULL;
 		}
 
 	      if ((bfd_size_type)(aux->u.auxent.x_file.x_n.x_n.x_offset)
 		  >= obj_coff_strings_len (abfd))
 		internal_ptr->u.syment._n._n_n._n_offset =
 		  (uintptr_t) _("<corrupt>");
 	      else
 		internal_ptr->u.syment._n._n_n._n_offset =
 		  (uintptr_t) (string_table
 			       + aux->u.auxent.x_file.x_n.x_n.x_offset);
 	    }
 	  else
 	    {
 	      /* Ordinary short filename, put into memory anyway.  The
 		 Microsoft PE tools sometimes store a filename in
 		 multiple AUX entries.  */
 	      if (internal_ptr->u.syment.n_numaux > 1 && obj_pe (abfd))
 		internal_ptr->u.syment._n._n_n._n_offset =
 		  ((uintptr_t)
 		   copy_name (abfd,
 			      aux->u.auxent.x_file.x_n.x_fname,
 			      internal_ptr->u.syment.n_numaux * symesz));
 	      else
 		internal_ptr->u.syment._n._n_n._n_offset =
 		  ((uintptr_t)
 		   copy_name (abfd,
 			      aux->u.auxent.x_file.x_n.x_fname,
 			      (size_t) bfd_coff_filnmlen (abfd)));
 	    }
 
 	  /* Normalize other strings available in C_FILE aux entries.  */
 	  if (!obj_pe (abfd))
 	    for (int numaux = 1; numaux < internal_ptr->u.syment.n_numaux; numaux++)
 	      {
 		aux = internal_ptr + numaux + 1;
 		BFD_ASSERT (! aux->is_sym);
 
 		if (aux->u.auxent.x_file.x_n.x_n.x_zeroes == 0)
 		  {
 		    /* The string information is a long one, point into the string table.  */
 		    if (string_table == NULL)
 		      {
 			string_table = _bfd_coff_read_string_table (abfd);
 			if (string_table == NULL)
 			  return NULL;
 		      }
 
 		    if ((bfd_size_type)(aux->u.auxent.x_file.x_n.x_n.x_offset)
 			>= obj_coff_strings_len (abfd))
 		      aux->u.auxent.x_file.x_n.x_n.x_offset =
 			(uintptr_t) _("<corrupt>");
 		    else
 		      aux->u.auxent.x_file.x_n.x_n.x_offset =
 			(uintptr_t) (string_table
 				     + (aux->u.auxent.x_file.x_n.x_n.x_offset));
 		  }
 		else
 		  aux->u.auxent.x_file.x_n.x_n.x_offset =
 		    ((uintptr_t)
 		     copy_name (abfd,
 				aux->u.auxent.x_file.x_n.x_fname,
 				(size_t) bfd_coff_filnmlen (abfd)));
 	      }
 
 	}
       else
 	{
 	  if (internal_ptr->u.syment._n._n_n._n_zeroes != 0)
 	    {
 	      /* This is a "short" name.  Make it long.  */
 	      size_t i;
 	      char *newstring;
 
 	      /* Find the length of this string without walking into memory
 		 that isn't ours.  */
 	      for (i = 0; i < 8; ++i)
 		if (internal_ptr->u.syment._n._n_name[i] == '\0')
 		  break;
 
 	      newstring = (char *) bfd_zalloc (abfd, (bfd_size_type) (i + 1));
 	      if (newstring == NULL)
 		return NULL;
 	      strncpy (newstring, internal_ptr->u.syment._n._n_name, i);
 	      internal_ptr->u.syment._n._n_n._n_offset = (uintptr_t) newstring;
 	      internal_ptr->u.syment._n._n_n._n_zeroes = 0;
 	    }
 	  else if (internal_ptr->u.syment._n._n_n._n_offset == 0)
 	    internal_ptr->u.syment._n._n_n._n_offset = (uintptr_t) "";
 	  else if (!bfd_coff_symname_in_debug (abfd, &internal_ptr->u.syment))
 	    {
 	      /* Long name already.  Point symbol at the string in the
 		 table.  */
 	      if (string_table == NULL)
 		{
 		  string_table = _bfd_coff_read_string_table (abfd);
 		  if (string_table == NULL)
 		    return NULL;
 		}
 	      if (internal_ptr->u.syment._n._n_n._n_offset >= obj_coff_strings_len (abfd)
 		  || string_table + internal_ptr->u.syment._n._n_n._n_offset < string_table)
 		internal_ptr->u.syment._n._n_n._n_offset =
 		  (uintptr_t) _("<corrupt>");
 	      else
 		internal_ptr->u.syment._n._n_n._n_offset =
 		  ((uintptr_t) (string_table
 				+ internal_ptr->u.syment._n._n_n._n_offset));
 	    }
 	  else
 	    {
 	      /* Long name in debug section.  Very similar.  */
 	      if (debug_sec_data == NULL)
 		debug_sec_data = build_debug_section (abfd, & debug_sec);
 	      if (debug_sec_data != NULL)
 		{
 		  BFD_ASSERT (debug_sec != NULL);
 		  /* PR binutils/17512: Catch out of range offsets into the debug data.  */
 		  if (internal_ptr->u.syment._n._n_n._n_offset > debug_sec->size
 		      || debug_sec_data + internal_ptr->u.syment._n._n_n._n_offset < debug_sec_data)
 		    internal_ptr->u.syment._n._n_n._n_offset =
 		      (uintptr_t) _("<corrupt>");
 		  else
 		    internal_ptr->u.syment._n._n_n._n_offset =
 		      (uintptr_t) (debug_sec_data
 				   + internal_ptr->u.syment._n._n_n._n_offset);
 		}
 	      else
 		internal_ptr->u.syment._n._n_n._n_offset = (uintptr_t) "";
 	    }
 	}
       internal_ptr += internal_ptr->u.syment.n_numaux;
     }
 
   obj_raw_syments (abfd) = internal;
   BFD_ASSERT (obj_raw_syment_count (abfd)
 	      == (unsigned int) (internal_ptr - internal));
 
   return internal;
 }
