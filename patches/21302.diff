commit af1cb4cb719dcb94314bbefc78b59ac426b8fed2
Author: Albert Astals Cid <aacid@kde.org>
Date:   Wed Apr 8 23:52:43 2020 +0200

    Fix uninitialized memory read on malformed documents

diff --git a/libspectre/ps.c b/libspectre/ps.c
index 4374272..0883670 100644
--- a/libspectre/ps.c
+++ b/libspectre/ps.c
@@ -1031,212 +1031,214 @@ newpage:
 	}
 	memset(&(doc->pages[doc->numpages]), 0, sizeof(struct page));
 	page_bb_set = NONE;
 	doc->pages[doc->numpages].label = label;
 	if (beginsection) {
 	    doc->pages[doc->numpages].begin = beginsection;
 	    beginsection = 0;
 	} else {
 	    doc->pages[doc->numpages].begin = position;
 	    section_len = line_len;
 	}
 continuepage:
 	while (readline(fd, enddoseps, &line, &position, &line_len) &&
 	       !(DSCcomment(line) &&
 	         (iscomment(line+2, "Page:") ||
 	          iscomment(line+2, "Trailer") ||
 	          (respect_eof && iscomment(line+2, "EOF"))))) {
 	    section_len += line_len;
 	    if (!DSCcomment(line)) {
 		/* Do nothing */
 	    } else if (doc->pages[doc->numpages].orientation == NONE &&
 		iscomment(line+2, "PageOrientation:")) {
-		sscanf(line+length("%%PageOrientation:"), "%256s", text);
-		if (strcmp(text, "Portrait") == 0) {
-		    doc->pages[doc->numpages].orientation = PORTRAIT;
-		} else if (strcmp(text, "Landscape") == 0) {
-		    doc->pages[doc->numpages].orientation = LANDSCAPE;
-		} else if (strcmp(text, "Seascape") == 0) {
-		    doc->pages[doc->numpages].orientation = SEASCAPE;
-		} else if (strcmp(text, "UpsideDown") == 0) {
-		    doc->pages[doc->numpages].orientation = UPSIDEDOWN;
+		const int res = sscanf(line+length("%%PageOrientation:"), "%256s", text);
+		if (res != EOF) {
+		    if (strcmp(text, "Portrait") == 0) {
+			doc->pages[doc->numpages].orientation = PORTRAIT;
+		    } else if (strcmp(text, "Landscape") == 0) {
+			doc->pages[doc->numpages].orientation = LANDSCAPE;
+		    } else if (strcmp(text, "Seascape") == 0) {
+			doc->pages[doc->numpages].orientation = SEASCAPE;
+		    } else if (strcmp(text, "UpsideDown") == 0) {
+			doc->pages[doc->numpages].orientation = UPSIDEDOWN;
+		    }
 		}
 	    } else if (doc->pages[doc->numpages].media == NULL &&
 		       iscomment(line+2, "PageMedia:")) {
 		cp = ps_gettext(line+length("%%PageMedia:"), NULL);
 		for (dmp = doc->media, i=0; i<doc->nummedia; i++, dmp++) {
 		    if (cp && strcmp(cp, dmp->name) == 0) {
 			doc->pages[doc->numpages].media = dmp;
 			break;
 		    }
 		}
 		PS_free(cp);
 	    } else if (doc->pages[doc->numpages].media == NULL &&
 		       iscomment(line+2, "PaperSize:")) {
 		cp = ps_gettext(line+length("%%PaperSize:"), NULL);
 		for (dmp = doc->media, i=0; i<doc->nummedia; i++, dmp++) {
 		    /* Note: Paper size comment uses down cased paper size
 		     * name.  Case insensitive compares are only used for
 		     * PaperSize comments.
 		     */
 		    if (cp && _spectre_strcasecmp(cp, dmp->name) == 0) {
 			doc->pages[doc->numpages].media = dmp;
 			break;
 		    }
 		}
 		PS_free(cp);
 	    } else if ((page_bb_set == NONE || page_bb_set == ATEND) &&
 		       iscomment(line+2, "PageBoundingBox:")) {
-		sscanf(line+length("%%PageBoundingBox:"), "%256s", text);
-		if (strcmp(text, "(atend)") == 0 || strcmp(text, "atend") == 0) {
+		const int res = sscanf(line+length("%%PageBoundingBox:"), "%256s", text);
+		if ((res != EOF) && (strcmp(text, "(atend)") == 0 || strcmp(text, "atend") == 0)) {
 		    page_bb_set = ATEND;
 		} else {
 		    if (scan_boundingbox(doc->pages[doc->numpages].boundingbox,
 				line+length("%%PageBoundingBox:")))
 			if(page_bb_set == NONE)
 			    page_bb_set = 1;
 		}
 	    }
 	}
 	section_len += line_len;
 	doc->pages[doc->numpages].end = position;
 	doc->pages[doc->numpages].len = section_len - line_len;
 	doc->numpages++;
     }
 
     /* Document Trailer */
 
     if (beginsection) {
 	doc->begintrailer = beginsection;
 	beginsection = 0;
     } else {
 	doc->begintrailer = position;
 	section_len = line_len;
     }
 
     preread = 1;
     while ((preread ||
 	    readline(fd, enddoseps, &line, &position, &line_len)) &&
  	   !(respect_eof && DSCcomment(line) && iscomment(line+2, "EOF"))) {
 	if (!preread) section_len += line_len;
 	preread = 0;
 	if (!DSCcomment(line)) {
 	    /* Do nothing */
 	} else if (iscomment(line+2, "Page:")) {
 	    PS_free(ps_gettext(line+length("%%Page:"), &next_char));
 	    if (sscanf(next_char, "%u", &thispage) != 1) thispage = 0;
 	    if (!ignore && thispage == nextpage) {
 		if (doc->numpages > 0) {
 		    doc->pages[doc->numpages-1].end = position;
 		    doc->pages[doc->numpages-1].len += section_len - line_len;
 		} else {
 		    if (doc->endsetup) {
 			doc->endsetup = position;
 			doc->endsetup += section_len - line_len;
 		    } else if (doc->endprolog) {
 			doc->endprolog = position;
 			doc->endprolog += section_len - line_len;
 		    }
 		}
 		goto newpage;
 	    }
 	} else if (!respect_eof && iscomment(line+2, "Trailer")) {
 	    /* What we thought was the start of the trailer was really */
 	    /* the trailer of an EPS on the page. */
 	    /* Set the end of the page to this trailer and keep scanning. */
 	    if (doc->numpages > 0) {
 		doc->pages[ doc->numpages-1 ].end = position;
 		doc->pages[ doc->numpages-1 ].len += section_len - line_len;
 	    }
 	    doc->begintrailer = position;
 	    section_len = line_len;
 	} else if (bb_set == ATEND && iscomment(line+2, "BoundingBox:")) {
 	    scan_boundingbox(doc->boundingbox, line + length("%%BoundingBox:"));
 	} else if (orientation_set == ATEND &&
 		   iscomment(line+2, "Orientation:")) {
 	    sscanf(line+length("%%Orientation:"), "%256s", text);
 	    if (strcmp(text, "Portrait") == 0) {
 		doc->orientation = PORTRAIT;
 	    } else if (strcmp(text, "Landscape") == 0) {
 		doc->orientation = LANDSCAPE;
 	    } else if (strcmp(text, "Seascape") == 0) {
 	        doc->orientation = SEASCAPE;
 	    } else if (strcmp(text, "UpsideDown") == 0) {
 	        doc->orientation = UPSIDEDOWN;
 	    }
 	} else if (page_order_set == ATEND && iscomment(line+2, "PageOrder:")) {
 	    sscanf(line+length("%%PageOrder:"), "%256s", text);
 	    if (strcmp(text, "Ascend") == 0) {
 		doc->pageorder = ASCEND;
 	    } else if (strcmp(text, "Descend") == 0) {
 		doc->pageorder = DESCEND;
 	    } else if (strcmp(text, "Special") == 0) {
 		doc->pageorder = SPECIAL;
 	    }
 	} else if (pages_set == ATEND && iscomment(line+2, "Pages:")) {
 	    int page_order;
 	    if (sscanf(line+length("%%Pages:"), "%*u %d", &page_order) == 1) {
 		if (page_order_set == NONE) {
 		    if (page_order == -1) doc->pageorder = DESCEND;
 		    else if (page_order == 0) doc->pageorder = SPECIAL;
 		    else if (page_order == 1) doc->pageorder = ASCEND;
 		}
 	    }
 	}
     }
     section_len += line_len;
     if (DSCcomment(line) && iscomment(line+2, "EOF")) {
         readline(fd, enddoseps, &line, &position, &line_len);
 	section_len += line_len;
     } else if (doc->doseps) {
         /* No EOF, make sure endtrailer <= ps_end */
         long ps_end = doc->doseps->ps_begin + doc->doseps->ps_length;
         if (position > ps_end) {
             position = ps_end;
 	    section_len = position - doc->begintrailer;
 	    line_len = 0;
 	}
     }
     doc->endtrailer = position;
     doc->lentrailer = section_len - line_len;
 
 #if 0
     section_len = line_len;
     preread = 1;
     while (preread ||
 	   readline(fd, enddoseps, &line, &position, &line_len)) {
 	if (!preread) section_len += line_len;
 	preread = 0;
 	if (DSCcomment(line) && iscomment(line+2, "Page:")) {
 	    PS_free(ps_gettext(line+length("%%Page:"), &next_char));
 	    if (sscanf(next_char, "%d", &thispage) != 1) thispage = 0;
 	    if (!ignore && thispage == nextpage) {
 		if (doc->numpages > 0) {
 		    doc->pages[doc->numpages-1].end = position;
 		    doc->pages[doc->numpages-1].len += doc->lentrailer +
 						       section_len - line_len;
 		} else {
 		    if (doc->endsetup) {
 			doc->endsetup = position;
 			doc->endsetup += doc->lentrailer +
 					 section_len - line_len;
 		    } else if (doc->endprolog) {
 			doc->endprolog = position;
 			doc->endprolog += doc->lentrailer +
 					  section_len - line_len;
 		    }
 		}
 		goto newpage;
 	    }
 	}
     }
 #endif
     ENDMESSAGE(psscan)
     ps_io_exit(fd);
     return doc;
 }
 
 /*###########################################################*/
 /*
  *	psfree -- free dynamic storage associated with document structure.
  */
 /*###########################################################*/
