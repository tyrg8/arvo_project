commit da6320ca11a91d12eb4794f8baaa655b02900a92
Author: Ethan Nicholas <ethannicholas@google.com>
Date:   Wed Sep 2 14:08:23 2020 -0400

    Disallow a bare ';' at the top level of SkSL files
    
    It turns out the parser was accepting empty declarations, turning them
    into an empty modifiers declaration. This was causing problems with a
    CL that was going to disallow declarations in contexts where they
    weren't allowed. Since this was never the intended behavior, we now
    disallow it.
    
    Change-Id: Iea56529c76a946e8002ce1e929790aec488fd4f5
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/314879
    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>
    Auto-Submit: Ethan Nicholas <ethannicholas@google.com>
    Reviewed-by: John Stiles <johnstiles@google.com>

diff --git a/src/gpu/effects/GrCircleBlurFragmentProcessor.fp b/src/gpu/effects/GrCircleBlurFragmentProcessor.fp
index 7f1dba9743..1e59d864d3 100644
--- a/src/gpu/effects/GrCircleBlurFragmentProcessor.fp
+++ b/src/gpu/effects/GrCircleBlurFragmentProcessor.fp
@@ -12,10 +12,10 @@ in half textureRadius;
 in fragmentProcessor blurProfile;
 
 @header {
     #include "src/gpu/effects/GrTextureEffect.h"
-};
+}
 
 // The data is formatted as:
 // x, y - the center of the circle
 // z    - inner radius that should map to 0th entry in the texture.
 // w    - the inverse of the distance over which the texture is stretched.
diff --git a/src/gpu/effects/generated/GrCircleBlurFragmentProcessor.cpp b/src/gpu/effects/generated/GrCircleBlurFragmentProcessor.cpp
index 46467215c6..8c10cdc4f3 100644
--- a/src/gpu/effects/generated/GrCircleBlurFragmentProcessor.cpp
+++ b/src/gpu/effects/generated/GrCircleBlurFragmentProcessor.cpp
@@ -284,38 +284,37 @@ class GrGLSLCircleBlurFragmentProcessor : public GrGLSLFragmentProcessor {
 public:
     GrGLSLCircleBlurFragmentProcessor() {}
     void emitCode(EmitArgs& args) override {
         GrGLSLFPFragmentBuilder* fragBuilder = args.fFragBuilder;
         const GrCircleBlurFragmentProcessor& _outer =
                 args.fFp.cast<GrCircleBlurFragmentProcessor>();
         (void)_outer;
         auto circleRect = _outer.circleRect;
         (void)circleRect;
         auto solidRadius = _outer.solidRadius;
         (void)solidRadius;
         auto textureRadius = _outer.textureRadius;
         (void)textureRadius;
         circleDataVar = args.fUniformHandler->addUniform(&_outer, kFragment_GrShaderFlag,
                                                          kHalf4_GrSLType, "circleData");
         fragBuilder->codeAppendf(
-                R"SkSL(;
-half2 vec = half2((sk_FragCoord.xy - float2(%s.xy)) * float(%s.w));
+                R"SkSL(half2 vec = half2((sk_FragCoord.xy - float2(%s.xy)) * float(%s.w));
 half dist = length(vec) + (0.5 - %s.z) * %s.w;)SkSL",
                 args.fUniformHandler->getUniformCStr(circleDataVar),
                 args.fUniformHandler->getUniformCStr(circleDataVar),
                 args.fUniformHandler->getUniformCStr(circleDataVar),
                 args.fUniformHandler->getUniformCStr(circleDataVar));
-        SkString _sample13902 = this->invokeChild(0, args);
+        SkString _sample13901 = this->invokeChild(0, args);
         fragBuilder->codeAppendf(
                 R"SkSL(
 half4 inputColor = %s;)SkSL",
-                _sample13902.c_str());
-        SkString _coords13950("float2(half2(dist, 0.5))");
-        SkString _sample13950 = this->invokeChild(1, args, _coords13950.c_str());
+                _sample13901.c_str());
+        SkString _coords13949("float2(half2(dist, 0.5))");
+        SkString _sample13949 = this->invokeChild(1, args, _coords13949.c_str());
         fragBuilder->codeAppendf(
                 R"SkSL(
 %s = inputColor * %s.w;
 )SkSL",
-                args.fOutputColor, _sample13950.c_str());
+                args.fOutputColor, _sample13949.c_str());
     }
 
 private:
diff --git a/src/sksl/SkSLParser.cpp b/src/sksl/SkSLParser.cpp
index 6137a6909e..5fc19e5bb9 100644
--- a/src/sksl/SkSLParser.cpp
+++ b/src/sksl/SkSLParser.cpp
@@ -400,68 +400,74 @@ ASTNode::ID Parser::enumDeclaration() {
 /* enumDeclaration | modifiers (structVarDeclaration | type IDENTIFIER ((LPAREN parameter
    (COMMA parameter)* RPAREN (block | SEMICOLON)) | SEMICOLON) | interfaceBlock) */
 ASTNode::ID Parser::declaration() {
     Token lookahead = this->peek();
-    if (lookahead.fKind == Token::Kind::TK_ENUM) {
-        return this->enumDeclaration();
+    switch (lookahead.fKind) {
+        case Token::Kind::TK_ENUM:
+            return this->enumDeclaration();
+        case Token::Kind::TK_SEMICOLON:
+            this->error(lookahead.fOffset, "expected a declaration, but found ';'");
+            return ASTNode::ID::Invalid();
+        default:
+            break;
     }
     Modifiers modifiers = this->modifiers();
     lookahead = this->peek();
     if (lookahead.fKind == Token::Kind::TK_IDENTIFIER && !this->isType(this->text(lookahead))) {
         // we have an identifier that's not a type, could be the start of an interface block
         return this->interfaceBlock(modifiers);
     }
     if (lookahead.fKind == Token::Kind::TK_STRUCT) {
         return this->structVarDeclaration(modifiers);
     }
     if (lookahead.fKind == Token::Kind::TK_SEMICOLON) {
         this->nextToken();
         RETURN_NODE(lookahead.fOffset, ASTNode::Kind::kModifiers, modifiers);
     }
     ASTNode::ID type = this->type();
     if (!type) {
         return ASTNode::ID::Invalid();
     }
     if (getNode(type).getTypeData().fIsStructDeclaration &&
         this->checkNext(Token::Kind::TK_SEMICOLON)) {
         return ASTNode::ID::Invalid();
     }
     Token name;
     if (!this->expect(Token::Kind::TK_IDENTIFIER, "an identifier", &name)) {
         return ASTNode::ID::Invalid();
     }
     if (this->checkNext(Token::Kind::TK_LPAREN)) {
         CREATE_NODE(result, name.fOffset, ASTNode::Kind::kFunction);
         ASTNode::FunctionData fd(modifiers, this->text(name), 0);
         getNode(result).addChild(type);
         if (this->peek().fKind != Token::Kind::TK_RPAREN) {
             for (;;) {
                 ASTNode::ID parameter = this->parameter();
                 if (!parameter) {
                     return ASTNode::ID::Invalid();
                 }
                 ++fd.fParameterCount;
                 getNode(result).addChild(parameter);
                 if (!this->checkNext(Token::Kind::TK_COMMA)) {
                     break;
                 }
             }
         }
         getNode(result).setFunctionData(fd);
         if (!this->expect(Token::Kind::TK_RPAREN, "')'")) {
             return ASTNode::ID::Invalid();
         }
         ASTNode::ID body;
         if (!this->checkNext(Token::Kind::TK_SEMICOLON)) {
             body = this->block();
             if (!body) {
                 return ASTNode::ID::Invalid();
             }
             getNode(result).addChild(body);
         }
         return result;
     } else {
         return this->varDeclarationEnd(modifiers, type, this->text(name));
     }
 }
 
 /* modifiers type IDENTIFIER varDeclarationEnd */
diff --git a/tests/SkSLErrorTest.cpp b/tests/SkSLErrorTest.cpp
index b310975fd2..5f89bd945e 100644
--- a/tests/SkSLErrorTest.cpp
+++ b/tests/SkSLErrorTest.cpp
@@ -469,10 +469,10 @@ DEF_TEST(SkSLDivByZero, r) {
 
 DEF_TEST(SkSLUnsupportedGLSLIdentifiers, r) {
     test_failure(r,
-                 "void main() { float x = gl_FragCoord.x; };",
+                 "void main() { float x = gl_FragCoord.x; }",
                  "error: 1: unknown identifier 'gl_FragCoord'\n1 error\n");
     test_failure(r,
-                 "void main() { float r = gl_FragColor.r; };",
+                 "void main() { float r = gl_FragColor.r; }",
                  "error: 1: unknown identifier 'gl_FragColor'\n1 error\n");
 }
 
