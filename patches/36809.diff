commit 0016f63547f70f969eeb6030d8d7433b05cae934
Author: Daniel Bertalan <dani@danielbertalan.dev>
Date:   Tue Mar 28 14:07:25 2023 +0200

    AK: Fix Clang 16 UBSan issue with zero-length `Array`
    
    The current implementation of `Array<T, 0>` has a zero-length C array as
    its storage type. While this is accepted as a GNU extension, when
    compiling with Clang 16, an UBSan error is raised every time an object
    is accessed whose only field is a zero-length array.
    
    This is likely a bug in Clang 16's implementation of UBSan, which has
    been reported here: https://github.com/llvm/llvm-project/issues/61775

diff --git a/AK/Array.h b/AK/Array.h
index 26c0a225b5..3bb11998a3 100644
--- a/AK/Array.h
+++ b/AK/Array.h
@@ -13,103 +13,113 @@
 
 namespace AK {
 
+namespace Detail {
+// This type serves as the storage of 0-sized `AK::Array`s. While zero-length `T[0]`
+// is accepted as a GNU extension, it causes problems with UBSan in Clang 16.
+template<typename T>
+struct EmptyArrayStorage {
+    T& operator[](size_t) const { VERIFY_NOT_REACHED(); }
+    constexpr operator T*() const { return nullptr; }
+};
+}
+
 template<typename T, size_t Size>
 struct Array {
     using ValueType = T;
 
     // This is a static function because constructors mess up Array's POD-ness.
     static Array from_span(Span<T> span)
     {
         Array array;
         VERIFY(span.size() == Size);
         TypedTransfer<T>::copy(array.data(), span.data(), Size);
         return array;
     }
 
     [[nodiscard]] constexpr T const* data() const { return __data; }
     [[nodiscard]] constexpr T* data() { return __data; }
 
     [[nodiscard]] constexpr size_t size() const { return Size; }
 
     [[nodiscard]] constexpr ReadonlySpan<T> span() const { return { __data, Size }; }
     [[nodiscard]] constexpr Span<T> span() { return { __data, Size }; }
 
     [[nodiscard]] constexpr T const& at(size_t index) const
     {
         VERIFY(index < size());
         return __data[index];
     }
     [[nodiscard]] constexpr T& at(size_t index)
     {
         VERIFY(index < size());
         return __data[index];
     }
 
     [[nodiscard]] constexpr T const& first() const { return at(0); }
     [[nodiscard]] constexpr T& first() { return at(0); }
 
     [[nodiscard]] constexpr T const& last() const
     requires(Size > 0)
     {
         return at(Size - 1);
     }
     [[nodiscard]] constexpr T& last()
     requires(Size > 0)
     {
         return at(Size - 1);
     }
 
     [[nodiscard]] constexpr bool is_empty() const { return size() == 0; }
 
     [[nodiscard]] constexpr T const& operator[](size_t index) const { return at(index); }
     [[nodiscard]] constexpr T& operator[](size_t index) { return at(index); }
 
     template<typename T2, size_t Size2>
     [[nodiscard]] constexpr bool operator==(Array<T2, Size2> const& other) const { return span() == other.span(); }
 
     using ConstIterator = SimpleIterator<Array const, T const>;
     using Iterator = SimpleIterator<Array, T>;
 
     [[nodiscard]] constexpr ConstIterator begin() const { return ConstIterator::begin(*this); }
     [[nodiscard]] constexpr Iterator begin() { return Iterator::begin(*this); }
 
     [[nodiscard]] constexpr ConstIterator end() const { return ConstIterator::end(*this); }
     [[nodiscard]] constexpr Iterator end() { return Iterator::end(*this); }
 
     [[nodiscard]] constexpr operator ReadonlySpan<T>() const { return span(); }
     [[nodiscard]] constexpr operator Span<T>() { return span(); }
 
     constexpr size_t fill(T const& value)
     {
         for (size_t idx = 0; idx < Size; ++idx)
             __data[idx] = value;
 
         return Size;
     }
 
     [[nodiscard]] constexpr T max() const
     requires(requires(T x, T y) { x < y; })
     {
         static_assert(Size > 0, "No values to max() over");
 
         T value = __data[0];
         for (size_t i = 1; i < Size; ++i)
             value = AK::max(__data[i], value);
         return value;
     }
 
     [[nodiscard]] constexpr T min() const
     requires(requires(T x, T y) { x > y; })
     {
         static_assert(Size > 0, "No values to min() over");
 
         T value = __data[0];
         for (size_t i = 1; i < Size; ++i)
             value = AK::min(__data[i], value);
         return value;
     }
 
-    T __data[Size];
+    Conditional<Size == 0, Detail::EmptyArrayStorage<T>, T[Size]> __data;
 };
 
 template<typename T, typename... Types>
