commit 4cb11c66de6cc759e57508d38df4956fe4bb3311
Author: David Bryant <david@wavpack.com>
Date:   Thu Jan 9 16:54:05 2020 -0800

    more fixes for uninitialized memory access (and remove some tabs)

diff --git a/src/unpack_seek.c b/src/unpack_seek.c
index 20592e7..6c24955 100644
--- a/src/unpack_seek.c
+++ b/src/unpack_seek.c
@@ -38,222 +38,222 @@ int WavpackSeekSample (WavpackContext *wpc, uint32_t sample)
 int WavpackSeekSample64 (WavpackContext *wpc, int64_t sample)
 {
     WavpackStream *wps = wpc->streams ? wpc->streams [wpc->current_stream = 0] : NULL;
     uint32_t bcount, samples_to_skip, samples_to_decode = 0;
     int32_t *buffer;
 
     if (wpc->total_samples == -1 || sample >= wpc->total_samples ||
         !wpc->reader->can_seek (wpc->wv_in) || (wpc->open_flags & OPEN_STREAMING) ||
         (wpc->wvc_flag && !wpc->reader->can_seek (wpc->wvc_in)))
             return FALSE;
 
 #ifdef ENABLE_LEGACY
     if (wpc->stream3)
         return seek_sample3 (wpc, (uint32_t) sample);
 #endif
 
 #ifdef ENABLE_DSD
     if (wpc->decimation_context) {      // the decimation code needs some context to be sample accurate
         if (sample < 16) {
             samples_to_decode = (uint32_t) sample;
             sample = 0;
         }
         else {
             samples_to_decode = 16;
             sample -= 16;
         }
     }
 #endif
 
     if (!wps->wphdr.block_samples || !(wps->wphdr.flags & INITIAL_BLOCK) || sample < GET_BLOCK_INDEX (wps->wphdr) ||
         sample >= GET_BLOCK_INDEX (wps->wphdr) + wps->wphdr.block_samples) {
 
             free_streams (wpc);
             wpc->filepos = find_sample (wpc, wpc->wv_in, wpc->filepos, sample);
 
             if (wpc->filepos == -1)
                 return FALSE;
 
             if (wpc->wvc_flag) {
                 wpc->file2pos = find_sample (wpc, wpc->wvc_in, 0, sample);
 
                 if (wpc->file2pos == -1)
                     return FALSE;
             }
     }
 
     if (!wps->blockbuff) {
         wpc->reader->set_pos_abs (wpc->wv_in, wpc->filepos);
         wpc->reader->read_bytes (wpc->wv_in, &wps->wphdr, sizeof (WavpackHeader));
         WavpackLittleEndianToNative (&wps->wphdr, WavpackHeaderFormat);
 
         if ((wps->wphdr.ckSize & 1) || wps->wphdr.ckSize < 24 || wps->wphdr.ckSize >= 1024 * 1024) {
             free_streams (wpc);
             return FALSE;
         }
 
         wps->blockbuff = (unsigned char *)malloc (wps->wphdr.ckSize + 8);
         memcpy (wps->blockbuff, &wps->wphdr, sizeof (WavpackHeader));
 
         if (wpc->reader->read_bytes (wpc->wv_in, wps->blockbuff + sizeof (WavpackHeader), wps->wphdr.ckSize - 24) !=
             wps->wphdr.ckSize - 24) {
                 free_streams (wpc);
                 return FALSE;
         }
 
         // render corrupt blocks harmless
         if (!WavpackVerifySingleBlock (wps->blockbuff, !(wpc->open_flags & OPEN_NO_CHECKSUM))) {
             wps->wphdr.ckSize = sizeof (WavpackHeader) - 8;
             wps->wphdr.block_samples = 0;
             memcpy (wps->blockbuff, &wps->wphdr, 32);
         }
 
         SET_BLOCK_INDEX (wps->wphdr, GET_BLOCK_INDEX (wps->wphdr) - wpc->initial_index);
         memcpy (wps->blockbuff, &wps->wphdr, sizeof (WavpackHeader));
         wps->init_done = FALSE;
 
         if (wpc->wvc_flag) {
             wpc->reader->set_pos_abs (wpc->wvc_in, wpc->file2pos);
             wpc->reader->read_bytes (wpc->wvc_in, &wps->wphdr, sizeof (WavpackHeader));
             WavpackLittleEndianToNative (&wps->wphdr, WavpackHeaderFormat);
 
             if ((wps->wphdr.ckSize & 1) || wps->wphdr.ckSize < 24 || wps->wphdr.ckSize >= 1024 * 1024) {
                 free_streams (wpc);
                 return FALSE;
             }
 
             wps->block2buff = (unsigned char *)malloc (wps->wphdr.ckSize + 8);
             memcpy (wps->block2buff, &wps->wphdr, sizeof (WavpackHeader));
 
             if (wpc->reader->read_bytes (wpc->wvc_in, wps->block2buff + sizeof (WavpackHeader), wps->wphdr.ckSize - 24) !=
                 wps->wphdr.ckSize - 24) {
                     free_streams (wpc);
                     return FALSE;
             }
 
             // render corrupt blocks harmless
             if (!WavpackVerifySingleBlock (wps->block2buff, !(wpc->open_flags & OPEN_NO_CHECKSUM))) {
                 wps->wphdr.ckSize = sizeof (WavpackHeader) - 8;
                 wps->wphdr.block_samples = 0;
                 memcpy (wps->block2buff, &wps->wphdr, 32);
             }
 
             SET_BLOCK_INDEX (wps->wphdr, GET_BLOCK_INDEX (wps->wphdr) - wpc->initial_index);
             memcpy (wps->block2buff, &wps->wphdr, sizeof (WavpackHeader));
         }
 
         if (!wps->init_done && !unpack_init (wpc)) {
             free_streams (wpc);
             return FALSE;
         }
 
         wps->init_done = TRUE;
     }
 
     while (!wpc->reduced_channels && !(wps->wphdr.flags & FINAL_BLOCK)) {
         if (++wpc->current_stream == wpc->num_streams) {
 
             if (wpc->num_streams == wpc->max_streams) {
                 free_streams (wpc);
                 return FALSE;
             }
 
             wpc->streams = (WavpackStream **)realloc (wpc->streams, (wpc->num_streams + 1) * sizeof (wpc->streams [0]));
             wps = wpc->streams [wpc->num_streams++] = (WavpackStream *)malloc (sizeof (WavpackStream));
             CLEAR (*wps);
             bcount = read_next_header (wpc->reader, wpc->wv_in, &wps->wphdr);
 
             if (bcount == (uint32_t) -1) {
                 free_streams (wpc);
                 return FALSE;
             }
 
             wps->blockbuff = (unsigned char *)malloc (wps->wphdr.ckSize + 8);
             memcpy (wps->blockbuff, &wps->wphdr, 32);
 
             if (wpc->reader->read_bytes (wpc->wv_in, wps->blockbuff + 32, wps->wphdr.ckSize - 24) !=
                 wps->wphdr.ckSize - 24) {
                     free_streams (wpc);
                     return FALSE;
             }
 
             // render corrupt blocks harmless
             if (!WavpackVerifySingleBlock (wps->blockbuff, !(wpc->open_flags & OPEN_NO_CHECKSUM))) {
                 wps->wphdr.ckSize = sizeof (WavpackHeader) - 8;
                 wps->wphdr.block_samples = 0;
                 memcpy (wps->blockbuff, &wps->wphdr, 32);
             }
 
             wps->init_done = FALSE;
 
             if (wpc->wvc_flag && !read_wvc_block (wpc)) {
                 free_streams (wpc);
                 return FALSE;
             }
 
             if (!wps->init_done && !unpack_init (wpc)) {
                 free_streams (wpc);
                 return FALSE;
             }
 
             wps->init_done = TRUE;
         }
         else
             wps = wpc->streams [wpc->current_stream];
     }
 
     if (sample < wps->sample_index) {
         for (wpc->current_stream = 0; wpc->current_stream < wpc->num_streams; wpc->current_stream++)
             if (!unpack_init (wpc))
                 return FALSE;
             else
                 wpc->streams [wpc->current_stream]->init_done = TRUE;
     }
 
     samples_to_skip = (uint32_t) (sample - wps->sample_index);
 
     if (samples_to_skip > 131072) {
         free_streams (wpc);
         return FALSE;
     }
 
     if (samples_to_skip) {
         buffer = (int32_t *)malloc (samples_to_skip * 8);
 
         for (wpc->current_stream = 0; wpc->current_stream < wpc->num_streams; wpc->current_stream++)
 #ifdef ENABLE_DSD
             if (wpc->streams [wpc->current_stream]->wphdr.flags & DSD_FLAG)
                 unpack_dsd_samples (wpc, buffer, samples_to_skip);
             else
 #endif
                 unpack_samples (wpc, buffer, samples_to_skip);
 
         free (buffer);
     }
 
     wpc->current_stream = 0;
 
 #ifdef ENABLE_DSD
     if (wpc->decimation_context)
         decimate_dsd_reset (wpc->decimation_context);
 
     if (samples_to_decode) {
-        buffer = (int32_t *)malloc (samples_to_decode * wpc->config.num_channels * 4);
+        buffer = (int32_t *)calloc (1, samples_to_decode * wpc->config.num_channels * 4);
 
         if (buffer) {
             WavpackUnpackSamples (wpc, buffer, samples_to_decode);
             free (buffer);
         }
     }
 #endif
 
     return TRUE;
 }
 
 // Find a valid WavPack header, searching either from the current file position
 // (or from the specified position if not -1) and store it (endian corrected)
 // at the specified pointer. The return value is the exact file position of the
 // header, although we may have actually read past it. Because this function
 // is used for seeking to a specific audio sample, it only considers blocks
 // that contain audio samples for the initial stream to be valid.
 
 #define BUFSIZE 4096
diff --git a/src/unpack_utils.c b/src/unpack_utils.c
index ce7d7da..13c645e 100644
--- a/src/unpack_utils.c
+++ b/src/unpack_utils.c
@@ -37,375 +37,375 @@
 uint32_t WavpackUnpackSamples (WavpackContext *wpc, int32_t *buffer, uint32_t samples)
 {
     WavpackStream *wps = wpc->streams ? wpc->streams [wpc->current_stream = 0] : NULL;
     int num_channels = wpc->config.num_channels, file_done = FALSE;
     uint32_t bcount, samples_unpacked = 0, samples_to_unpack;
     int32_t *bptr = buffer;
 
 #ifdef ENABLE_LEGACY
     if (wpc->stream3)
         return unpack_samples3 (wpc, buffer, samples);
 #endif
 
     while (samples) {
 
         // if the current block has no audio, or it's not the first block of a multichannel
         // sequence, or the sample we're on is past the last sample in this block...we need
         // to free up the streams and read the next block
 
         if (!wps->wphdr.block_samples || !(wps->wphdr.flags & INITIAL_BLOCK) ||
             wps->sample_index >= GET_BLOCK_INDEX (wps->wphdr) + wps->wphdr.block_samples) {
 
                 int64_t nexthdrpos;
 
                 if (wpc->wrapper_bytes >= MAX_WRAPPER_BYTES)
                     break;
 
                 free_streams (wpc);
                 nexthdrpos = wpc->reader->get_pos (wpc->wv_in);
                 bcount = read_next_header (wpc->reader, wpc->wv_in, &wps->wphdr);
 
                 if (bcount == (uint32_t) -1)
                     break;
 
                 wpc->filepos = nexthdrpos + bcount;
 
                 // allocate the memory for the entire raw block and read it in
 
                 wps->blockbuff = (unsigned char *)malloc (wps->wphdr.ckSize + 8);
 
                 if (!wps->blockbuff)
                     break;
 
                 memcpy (wps->blockbuff, &wps->wphdr, 32);
 
                 if (wpc->reader->read_bytes (wpc->wv_in, wps->blockbuff + 32, wps->wphdr.ckSize - 24) !=
                     wps->wphdr.ckSize - 24) {
                         strcpy (wpc->error_message, "can't read all of last block!");
                         wps->wphdr.block_samples = 0;
                         wps->wphdr.ckSize = 24;
                         break;
                 }
 
                 // render corrupt blocks harmless
                 if (!WavpackVerifySingleBlock (wps->blockbuff, !(wpc->open_flags & OPEN_NO_CHECKSUM))) {
                     wps->wphdr.ckSize = sizeof (WavpackHeader) - 8;
                     wps->wphdr.block_samples = 0;
                     memcpy (wps->blockbuff, &wps->wphdr, 32);
                 }
 
                 // potentially adjusting block_index must be done AFTER verifying block
 
                 if (wpc->open_flags & OPEN_STREAMING)
                     SET_BLOCK_INDEX (wps->wphdr, wps->sample_index = 0);
                 else
                     SET_BLOCK_INDEX (wps->wphdr, GET_BLOCK_INDEX (wps->wphdr) - wpc->initial_index);
 
                 memcpy (wps->blockbuff, &wps->wphdr, 32);
                 wps->init_done = FALSE;     // we have not yet called unpack_init() for this block
 
                 // if this block has audio, but not the sample index we were expecting, flag an error
 
                 if (wps->wphdr.block_samples && wps->sample_index != GET_BLOCK_INDEX (wps->wphdr))
                     wpc->crc_errors++;
 
                 // if this block has audio, and we're in hybrid lossless mode, read the matching wvc block
 
                 if (wps->wphdr.block_samples && wpc->wvc_flag)
                     read_wvc_block (wpc);
 
                 // if the block does NOT have any audio, call unpack_init() to process non-audio stuff
 
                 if (!wps->wphdr.block_samples) {
                     if (!wps->init_done && !unpack_init (wpc))
                         wpc->crc_errors++;
 
                     wps->init_done = TRUE;
                 }
         }
 
         // if the current block has no audio, or it's not the first block of a multichannel
         // sequence, or the sample we're on is past the last sample in this block...we need
         // to loop back and read the next block
 
         if (!wps->wphdr.block_samples || !(wps->wphdr.flags & INITIAL_BLOCK) ||
             wps->sample_index >= GET_BLOCK_INDEX (wps->wphdr) + wps->wphdr.block_samples)
                 continue;
 
         // There seems to be some missing data, like a block was corrupted or something.
         // If it's not too much data, just fill in with silence here and loop back.
 
         if (wps->sample_index < GET_BLOCK_INDEX (wps->wphdr)) {
             int32_t zvalue = (wps->wphdr.flags & DSD_FLAG) ? 0x55 : 0;
 
             samples_to_unpack = (uint32_t) (GET_BLOCK_INDEX (wps->wphdr) - wps->sample_index);
 
             if (!samples_to_unpack || samples_to_unpack > 262144) {
                 strcpy (wpc->error_message, "discontinuity found, aborting file!");
                 wps->wphdr.block_samples = 0;
                 wps->wphdr.ckSize = 24;
                 break;
             }
 
             if (samples_to_unpack > samples)
                 samples_to_unpack = samples;
 
             wps->sample_index += samples_to_unpack;
             samples_unpacked += samples_to_unpack;
             samples -= samples_to_unpack;
 
             samples_to_unpack *= (wpc->reduced_channels ? wpc->reduced_channels : num_channels);
 
             while (samples_to_unpack--)
                 *bptr++ = zvalue;
 
             continue;
         }
 
         // calculate number of samples to process from this block, then initialize the decoder for
         // this block if we haven't already
 
         samples_to_unpack = (uint32_t) (GET_BLOCK_INDEX (wps->wphdr) + wps->wphdr.block_samples - wps->sample_index);
 
         if (samples_to_unpack > samples)
             samples_to_unpack = samples;
 
         if (!wps->init_done && !unpack_init (wpc))
             wpc->crc_errors++;
 
         wps->init_done = TRUE;
 
         // if this block is not the final block of a multichannel sequence (and we're not truncating
         // to stereo), then enter this conditional block...otherwise we just unpack the samples directly
 
         if (!wpc->reduced_channels && !(wps->wphdr.flags & FINAL_BLOCK)) {
-            int32_t *temp_buffer = (int32_t *)malloc (samples_to_unpack * 8), *src, *dst;
+            int32_t *temp_buffer = (int32_t *)calloc (1, samples_to_unpack * 8), *src, *dst;
             int offset = 0;     // offset to next channel in sequence (0 to num_channels - 1)
             uint32_t samcnt;
 
             // since we are getting samples from multiple bocks in a multichannel sequence, we must
             // allocate a temporary buffer to unpack to so that we can re-interleave the samples
 
-	    if (!temp_buffer)
-		break;
+            if (!temp_buffer)
+                break;
 
             // loop through all the streams...
 
             while (1) {
 
                 // if the stream has not been allocated and corresponding block read, do that here...
 
                 if (wpc->current_stream == wpc->num_streams) {
                     wpc->streams = (WavpackStream **)realloc (wpc->streams, (wpc->num_streams + 1) * sizeof (wpc->streams [0]));
 
                     if (!wpc->streams)
-			break;
+                        break;
 
                     wps = wpc->streams [wpc->num_streams++] = (WavpackStream *)malloc (sizeof (WavpackStream));
 
                     if (!wps)
-			break;
+                        break;
 
                     CLEAR (*wps);
                     bcount = read_next_header (wpc->reader, wpc->wv_in, &wps->wphdr);
 
                     if (bcount == (uint32_t) -1) {
                         wpc->streams [0]->wphdr.block_samples = 0;
                         wpc->streams [0]->wphdr.ckSize = 24;
                         file_done = TRUE;
                         break;
                     }
 
                     wps->blockbuff = (unsigned char *)malloc (wps->wphdr.ckSize + 8);
 
                     if (!wps->blockbuff)
-		        break;
+                        break;
 
                     memcpy (wps->blockbuff, &wps->wphdr, 32);
 
                     if (wpc->reader->read_bytes (wpc->wv_in, wps->blockbuff + 32, wps->wphdr.ckSize - 24) !=
                         wps->wphdr.ckSize - 24) {
                             wpc->streams [0]->wphdr.block_samples = 0;
                             wpc->streams [0]->wphdr.ckSize = 24;
                             file_done = TRUE;
                             break;
                     }
 
                     // render corrupt blocks harmless
                     if (!WavpackVerifySingleBlock (wps->blockbuff, !(wpc->open_flags & OPEN_NO_CHECKSUM))) {
                         wps->wphdr.ckSize = sizeof (WavpackHeader) - 8;
                         wps->wphdr.block_samples = 0;
                         memcpy (wps->blockbuff, &wps->wphdr, 32);
                     }
 
                     // potentially adjusting block_index must be done AFTER verifying block
 
                     if (wpc->open_flags & OPEN_STREAMING)
                         SET_BLOCK_INDEX (wps->wphdr, wps->sample_index = 0);
                     else
                         SET_BLOCK_INDEX (wps->wphdr, GET_BLOCK_INDEX (wps->wphdr) - wpc->initial_index);
 
                     memcpy (wps->blockbuff, &wps->wphdr, 32);
 
                     // if this block has audio, and we're in hybrid lossless mode, read the matching wvc block
 
                     if (wpc->wvc_flag)
                         read_wvc_block (wpc);
 
                     // initialize the unpacker for this block
 
                     if (!unpack_init (wpc))
                         wpc->crc_errors++;
 
                     wps->init_done = TRUE;
                 }
                 else
                     wps = wpc->streams [wpc->current_stream];
 
                 // unpack the correct number of samples (either mono or stereo) into the temp buffer
 
 #ifdef ENABLE_DSD
                 if (wps->wphdr.flags & DSD_FLAG)
                     unpack_dsd_samples (wpc, src = temp_buffer, samples_to_unpack);
                 else
 #endif
                     unpack_samples (wpc, src = temp_buffer, samples_to_unpack);
 
                 samcnt = samples_to_unpack;
                 dst = bptr + offset;
 
                 // if the block is mono, copy the samples from the single channel into the destination
                 // using num_channels as the stride
 
                 if (wps->wphdr.flags & MONO_FLAG) {
                     while (samcnt--) {
                         dst [0] = *src++;
                         dst += num_channels;
                     }
 
                     offset++;
                 }
 
                 // if the block is stereo, and we don't have room for two more channels, just copy one
                 // and flag an error
 
                 else if (offset == num_channels - 1) {
                     while (samcnt--) {
                         dst [0] = src [0];
                         dst += num_channels;
                         src += 2;
                     }
 
                     wpc->crc_errors++;
                     offset++;
                 }
 
                 // otherwise copy the stereo samples into the destination
 
                 else {
                     while (samcnt--) {
                         dst [0] = *src++;
                         dst [1] = *src++;
                         dst += num_channels;
                     }
 
                     offset += 2;
                 }
 
                 // check several clues that we're done with this set of blocks and exit if we are; else do next stream
 
                 if ((wps->wphdr.flags & FINAL_BLOCK) || wpc->current_stream == wpc->max_streams - 1 || offset == num_channels)
                     break;
                 else
                     wpc->current_stream++;
             }
 
             // if we didn't get all the channels we expected, mute the buffer and flag an error
 
             if (offset != num_channels) {
                 if (wps->wphdr.flags & DSD_FLAG) {
                     int samples_to_zero = samples_to_unpack * num_channels;
                     int32_t *zptr = bptr;
 
                     while (samples_to_zero--)
                         *zptr++ = 0x55;
                 }
                 else
                     memset (bptr, 0, samples_to_unpack * num_channels * 4);
 
                 wpc->crc_errors++;
             }
 
             // go back to the first stream (we're going to leave them all loaded for now because they might have more samples)
             // and free the temp buffer
 
             wps = wpc->streams [wpc->current_stream = 0];
             free (temp_buffer);
         }
         // catch the error situation where we have only one channel but run into a stereo block
         // (this avoids overwriting the caller's buffer)
         else if (!(wps->wphdr.flags & MONO_FLAG) && (num_channels == 1 || wpc->reduced_channels == 1)) {
             memset (bptr, 0, samples_to_unpack * sizeof (*bptr));
             wps->sample_index += samples_to_unpack;
             wpc->crc_errors++;
         }
 #ifdef ENABLE_DSD
         else if (wps->wphdr.flags & DSD_FLAG)
             unpack_dsd_samples (wpc, bptr, samples_to_unpack);
 #endif
         else
             unpack_samples (wpc, bptr, samples_to_unpack);
 
         if (file_done) {
             strcpy (wpc->error_message, "can't read all of last block!");
             break;
         }
 
         if (wpc->reduced_channels)
             bptr += samples_to_unpack * wpc->reduced_channels;
         else
             bptr += samples_to_unpack * num_channels;
 
         samples_unpacked += samples_to_unpack;
         samples -= samples_to_unpack;
 
         // if we just finished a block, check for a calculated crc error
         // (and back up the streams a little if possible in case we passed a header)
 
         if (wps->sample_index == GET_BLOCK_INDEX (wps->wphdr) + wps->wphdr.block_samples) {
             if (check_crc_error (wpc)) {
                 int32_t *zptr = bptr, zvalue = (wps->wphdr.flags & DSD_FLAG) ? 0x55 : 0;
                 uint32_t samples_to_zero = wps->wphdr.block_samples;
 
                 if (samples_to_zero > samples_to_unpack)
                     samples_to_zero = samples_to_unpack;
 
                 samples_to_zero *= (wpc->reduced_channels ? wpc->reduced_channels : num_channels);
 
                 while (samples_to_zero--)
                     *--zptr = zvalue;
 
                 if (wps->blockbuff && wpc->reader->can_seek (wpc->wv_in)) {
                     int32_t rseek = ((WavpackHeader *) wps->blockbuff)->ckSize / 3;
                     wpc->reader->set_pos_rel (wpc->wv_in, (rseek > 16384) ? -16384 : -rseek, SEEK_CUR);
                 }
 
                 if (wpc->wvc_flag && wps->block2buff && wpc->reader->can_seek (wpc->wvc_in)) {
                     int32_t rseek = ((WavpackHeader *) wps->block2buff)->ckSize / 3;
                     wpc->reader->set_pos_rel (wpc->wvc_in, (rseek > 16384) ? -16384 : -rseek, SEEK_CUR);
                 }
 
                 wpc->crc_errors++;
             }
         }
 
         if (wpc->total_samples != -1 && wps->sample_index == wpc->total_samples)
             break;
     }
 
 #ifdef ENABLE_DSD
     if (wpc->decimation_context)
         decimate_dsd_run (wpc->decimation_context, buffer, samples_unpacked);
 #endif
 
     return samples_unpacked;
 }
