commit 866ad2e95262606b194cb2e79ce8a7e63c32ce06
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Fri Oct 15 00:01:06 2021 +0200

    avcodec/speexdec: Check frames_per_packet more completely
    
    Fixes: signed integer overflow: 2105344 * 539033345 cannot be represented in type 'int'
    Fixes: out of array write
    Fixes: 39956/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_SPEEX_fuzzer-4766419250708480
    Fixes: 40293/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_SPEEX_fuzzer-5219910217760768
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/speexdec.c b/libavcodec/speexdec.c
index 90e95f0785..e263d4c48c 100644
--- a/libavcodec/speexdec.c
+++ b/libavcodec/speexdec.c
@@ -1395,37 +1395,39 @@ static int decoder_init(SpeexContext *s, DecoderState *st, const SpeexMode *mode
 static int parse_speex_extradata(AVCodecContext *avctx,
     const uint8_t *extradata, int extradata_size)
 {
     SpeexContext *s = avctx->priv_data;
     const uint8_t *buf = extradata;
 
     if (memcmp(buf, "Speex   ", 8))
         return AVERROR_INVALIDDATA;
 
     buf += 28;
 
     s->version_id = bytestream_get_le32(&buf);
     buf += 4;
     s->rate = bytestream_get_le32(&buf);
     if (s->rate <= 0)
         return AVERROR_INVALIDDATA;
     s->mode = bytestream_get_le32(&buf);
     if (s->mode < 0 || s->mode >= SPEEX_NB_MODES)
         return AVERROR_INVALIDDATA;
     s->bitstream_version = bytestream_get_le32(&buf);
     if (s->bitstream_version != 4)
         return AVERROR_INVALIDDATA;
     s->nb_channels = bytestream_get_le32(&buf);
     if (s->nb_channels <= 0 || s->nb_channels > 2)
         return AVERROR_INVALIDDATA;
     s->bitrate = bytestream_get_le32(&buf);
     s->frame_size = bytestream_get_le32(&buf);
     if (s->frame_size < NB_FRAME_SIZE)
         return AVERROR_INVALIDDATA;
     s->vbr = bytestream_get_le32(&buf);
     s->frames_per_packet = bytestream_get_le32(&buf);
-    if (s->frames_per_packet <= 0)
+    if (s->frames_per_packet <= 0 ||
+        s->frames_per_packet > 64 ||
+        s->frames_per_packet >= INT32_MAX / s->nb_channels / s->frame_size)
         return AVERROR_INVALIDDATA;
     s->extra_headers = bytestream_get_le32(&buf);
 
     return 0;
 }
