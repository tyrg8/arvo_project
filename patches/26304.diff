commit 72b62d2270edda9a0281ff8a6c3903d99e1892c9
Author: hsmatulisgoogle <69014250+hsmatulisgoogle@users.noreply.github.com>
Date:   Thu Nov 5 18:01:57 2020 -0500

    io: fix flb_io_net_connect only opening sync connections (#2750)
    
    Sockets were always initialized to synchronous mode in flb_io_net_connect.
    This caused a large performance cost when using http_do in async mode.
    
    Signed-off-by: Henrique S Matulis <69014250+hsmatulisgoogle@users.noreply.github.com>

diff --git a/src/flb_io.c b/src/flb_io.c
index 8aa82cd08..4cdbbd65c 100644
--- a/src/flb_io.c
+++ b/src/flb_io.c
@@ -245,128 +245,128 @@ static int net_io_connect_async(struct flb_upstream *u,
 FLB_INLINE int flb_io_net_connect(struct flb_upstream_conn *u_conn,
                                   struct flb_thread *th)
 {
     int ret;
     int async = FLB_FALSE;
     flb_sockfd_t fd = -1;
     struct flb_upstream *u = u_conn->u;
     struct sockaddr_storage addr;
     struct addrinfo hint;
     struct addrinfo *res = NULL;
 
     if (u_conn->fd > 0) {
         flb_socket_close(u_conn->fd);
     }
 
+    /* Check which connection mode must be done */
+    if (th) {
+        async = flb_upstream_is_async(u);
+    }
+    else {
+        async = FLB_FALSE;
+    }
+
     /*
      * If the net.source_address was set, we need to determinate the address
      * type (for socket type creation) and bind it.
      *
      * Note that this routine overrides the behavior of the 'ipv6' configuration
      * property.
      */
     if (u->net.source_address) {
         memset(&hint, '\0', sizeof hint);
 
         hint.ai_family = PF_UNSPEC;
         hint.ai_flags = AI_NUMERICHOST | AI_NUMERICSERV | AI_PASSIVE;
 
         ret = getaddrinfo(u->net.source_address, NULL, &hint, &res);
         if (ret == -1) {
             flb_errno();
             flb_error("[io] cannot parse source_address=%s",
                       u->net.source_address);
             return -1;
         }
 
         if (res->ai_family == AF_INET) {
-            fd = flb_net_socket_create(AF_INET, FLB_FALSE);
+            fd = flb_net_socket_create(AF_INET, async);
         }
         else if (res->ai_family == AF_INET6) {
-            fd = flb_net_socket_create(AF_INET6, FLB_FALSE);
+            fd = flb_net_socket_create(AF_INET6, async);
         }
         else {
             flb_error("[io] could not create socket for "
                       "source_address=%s, unknown ai_family",
                       u->net.source_address);
             freeaddrinfo(res);
             return -1;
         }
 
         if (fd == -1) {
             flb_error("[io] could not create an %s socket for "
                       "source_address=%s",
                       res->ai_family == AF_INET ? "IPv4": "IPv6",
                       u->net.source_address);
             freeaddrinfo(res);
             return -1;
         }
 
         /* Bind the address */
         memcpy(&addr, res->ai_addr, res->ai_addrlen);
         freeaddrinfo(res);
         ret = bind(fd, (struct sockaddr *) &addr, sizeof(addr));
         if (ret == -1) {
             flb_errno();
             flb_socket_close(fd);
             flb_error("[io] could not bind source_address=%s",
                       u->net.source_address);
             return -1;
         }
     }
     else {
         /* Create the socket */
         if (u_conn->u->flags & FLB_IO_IPV6) {
-            fd = flb_net_socket_create(AF_INET6, FLB_FALSE);
+            fd = flb_net_socket_create(AF_INET6, async);
         }
         else {
-            fd = flb_net_socket_create(AF_INET, FLB_FALSE);
+            fd = flb_net_socket_create(AF_INET, async);
         }
         if (fd == -1) {
             flb_error("[io] could not create socket");
             return -1;
         }
     }
 
     u_conn->fd = fd;
     u_conn->event.fd = fd;
 
     /* Disable Nagle's algorithm */
     flb_net_socket_tcp_nodelay(fd);
 
-    /* Check which connection mode must be done */
-    if (th) {
-        async = flb_upstream_is_async(u);
-    }
-    else {
-        async = FLB_FALSE;
-    }
-
     /* Connect */
     if (async == FLB_TRUE) {
         ret = net_io_connect_async(u, u_conn, th);
     }
     else {
         ret = net_io_connect_sync(u, u_conn);
     }
 
     /* Connection failure ? */
     if (ret == -1) {
         flb_socket_close(u_conn->fd);
         return -1;
     }
 
 #ifdef FLB_HAVE_TLS
     /* Check if TLS was enabled, if so perform the handshake */
     if (u_conn->u->flags & FLB_IO_TLS) {
         ret = net_io_tls_handshake(u_conn, th);
         if (ret != 0) {
             flb_socket_close(fd);
             return -1;
         }
     }
 #endif
 
     flb_trace("[io] connection OK");
 
     return 0;
 }
