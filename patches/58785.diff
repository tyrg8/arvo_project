commit 200f3b2b1ce4012433495d4f7281cbbb740b7004
Author: TCMalloc Team <tcmalloc-eng@google.com>
Date:   Thu May 11 17:57:14 2023 -0700

    Improve overflow check in arithmetic addition.
    
    We have checked that nhdr->n_namesz + align and nhdr->n_descsz + align
    don't overflow.
    Check that the computation of desc_start and size don't overflow, then check
    that `size` is not too large.
    
    PiperOrigin-RevId: 531356262
    Change-Id: I3436dc01473efcbd393a6666ead9751273a7bee7

diff --git a/tcmalloc/internal/profile_builder.cc b/tcmalloc/internal/profile_builder.cc
index db9066b..f379b8e 100644
--- a/tcmalloc/internal/profile_builder.cc
+++ b/tcmalloc/internal/profile_builder.cc
@@ -168,63 +168,64 @@ SampleMergedMap MergeProfileSamplesAndMaybeGetResidencyInfo(
 #if defined(__linux__)
 // Extracts the linker provided build ID from the PT_NOTE segment found in info.
 //
 // On failure, returns an empty string.
 std::string GetBuildId(const dl_phdr_info* const info) {
   std::string result;
 
   // pt_note contains entries (of type ElfW(Nhdr)) starting at
   //   info->dlpi_addr + pt_note->p_vaddr
   // with length
   //   pt_note->p_memsz
   //
   // The length of each entry is given by
   //   Align(sizeof(ElfW(Nhdr)) + nhdr->n_namesz) + Align(nhdr->n_descsz)
   for (int i = 0; i < info->dlpi_phnum; ++i) {
     const ElfW(Phdr)* pt_note = &info->dlpi_phdr[i];
     if (pt_note->p_type != PT_NOTE) continue;
 
     const char* note =
         reinterpret_cast<char*>(info->dlpi_addr + pt_note->p_vaddr);
     const char* const last = note + pt_note->p_filesz;
     const ElfW(Word) align = pt_note->p_align;
     while (note < last) {
       const ElfW(Nhdr)* const nhdr = reinterpret_cast<const ElfW(Nhdr)*>(note);
       if (note + sizeof(*nhdr) > last) {
         // Corrupt PT_NOTE
         break;
       }
 
       // Both the start and end of the descriptor are aligned by sh_addralign
       // (= p_align).
       const ElfW(Word) desc_start =
           (sizeof(*nhdr) + nhdr->n_namesz + align - 1) & -align;
       const ElfW(Word) size =
           desc_start + ((nhdr->n_descsz + align - 1) & -align);
 
-      // Beware of overflows / wrap-around.
+      // Beware of wrap-around.
       if (nhdr->n_namesz >= static_cast<ElfW(Word)>(-align) ||
           nhdr->n_descsz >= static_cast<ElfW(Word)>(-align) ||
-          size < sizeof(*nhdr) || note + size > last) {
+          desc_start < sizeof(*nhdr) || size < desc_start ||
+          size > last - note) {
         // Corrupt PT_NOTE
         break;
       }
 
       if (nhdr->n_type == NT_GNU_BUILD_ID) {
         const char* const note_name = note + sizeof(*nhdr);
         // n_namesz is the length of note_name.
         if (nhdr->n_namesz == 4 && memcmp(note_name, "GNU\0", 4) == 0) {
           if (!result.empty()) {
             // Repeated build-ids.  Ignore them.
             return "";
           }
           result = absl::BytesToHexString(
               absl::string_view(note + desc_start, nhdr->n_descsz));
         }
       }
       note += size;
     }
   }
 
   return result;
 }
 #endif  // defined(__linux__)
diff --git a/tcmalloc/internal/testdata/profile_builder_fuzz/clusterfuzz-testcase-minimized-profile_builder_fuzz-5915530833559552 b/tcmalloc/internal/testdata/profile_builder_fuzz/clusterfuzz-testcase-minimized-profile_builder_fuzz-5915530833559552
new file mode 100644
index 0000000..8ef030e
Binary files /dev/null and b/tcmalloc/internal/testdata/profile_builder_fuzz/clusterfuzz-testcase-minimized-profile_builder_fuzz-5915530833559552 differ
