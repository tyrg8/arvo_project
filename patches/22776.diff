commit 0e041baeaa47668a0075fcb49faad24c2bdbf034
Author: John Stiles <johnstiles@google.com>
Date:   Wed Aug 5 11:14:33 2020 -0400

    Fix out-of-bounds array access discovered by fuzzer.
    
    The root cause of this error is that Metal does not support upcasting
    a small matrix into a larger matrix (I was unfamiliar with this GLSL
    ability). Proper support in Metal for that type of cast will be added in
    a followup CL. For now, this CL adds defensive bounds-checking to
    placate ASAN.
    
    Change-Id: Ieb0d6b14f9bc7ecc9ef6223364c606612dc79e43
    Bug: oss-fuzz:22776
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/308182
    Commit-Queue: John Stiles <johnstiles@google.com>
    Commit-Queue: Jim Van Verth <jvanverth@google.com>
    Auto-Submit: John Stiles <johnstiles@google.com>
    Reviewed-by: Jim Van Verth <jvanverth@google.com>
    Reviewed-by: Brian Osman <brianosman@google.com>

diff --git a/src/sksl/SkSLMetalCodeGenerator.cpp b/src/sksl/SkSLMetalCodeGenerator.cpp
index ad2ca45dd9..026c85ed15 100644
--- a/src/sksl/SkSLMetalCodeGenerator.cpp
+++ b/src/sksl/SkSLMetalCodeGenerator.cpp
@@ -391,90 +391,95 @@ void MetalCodeGenerator::writeSpecialIntrinsic(const FunctionCall & c, SpecialIn
 // Generates a constructor for 'matrix' which reorganizes the input arguments into the proper shape.
 // Keeps track of previously generated constructors so that we won't generate more than one
 // constructor for any given permutation of input argument types. Returns the name of the
 // generated constructor method.
 String MetalCodeGenerator::getMatrixConstructHelper(const Constructor& c) {
     const Type& matrix = c.fType;
     int columns = matrix.columns();
     int rows = matrix.rows();
     const std::vector<std::unique_ptr<Expression>>& args = c.fArguments;
 
     // Create the helper-method name and use it as our lookup key.
     String name;
     name.appendf("float%dx%d_from", columns, rows);
     for (const std::unique_ptr<Expression>& expr : args) {
         name.appendf("_%s", expr->fType.displayName().c_str());
     }
 
     // If a helper-method has already been synthesized, we don't need to synthesize it again.
     auto [iter, newlyCreated] = fHelpers.insert(name);
     if (!newlyCreated) {
         return name;
     }
 
     // Unlike GLSL, Metal requires that matrices are initialized with exactly R vectors of C
     // components apiece. (In Metal 2.0, you can also supply R*C scalars, but you still cannot
     // supply a mixture of scalars and vectors.)
     fExtraFunctions.printf("float%dx%d %s(", columns, rows, name.c_str());
 
     size_t argIndex = 0;
     const char* argSeparator = "";
     for (const std::unique_ptr<Expression>& expr : c.fArguments) {
         fExtraFunctions.printf("%s%s x%zu", argSeparator,
                                expr->fType.displayName().c_str(), argIndex++);
         argSeparator = ", ";
     }
 
     fExtraFunctions.printf(") {\n    return float%dx%d(", columns, rows);
 
     argIndex = 0;
     int argPosition = 0;
 
     const char* columnSeparator = "";
     for (int c = 0; c < columns; ++c) {
         fExtraFunctions.printf("%sfloat%d(", columnSeparator, rows);
         columnSeparator = "), ";
 
         const char* rowSeparator = "";
         for (int r = 0; r < rows; ++r) {
             fExtraFunctions.printf("%s", rowSeparator);
             rowSeparator = ", ";
 
-            const Type& argType = args[argIndex]->fType;
-            switch (argType.kind()) {
-                case Type::kScalar_Kind: {
-                    fExtraFunctions.printf("x%zu", argIndex);
-                    break;
-                }
-                case Type::kVector_Kind: {
-                    fExtraFunctions.printf("x%zu[%d]", argIndex, argPosition);
-                    break;
-                }
-                case Type::kMatrix_Kind: {
-                    fExtraFunctions.printf("x%zu[%d][%d]", argIndex,
-                                           argPosition / argType.rows(),
-                                           argPosition % argType.rows());
-                    break;
-                }
-                default: {
-                    SkDEBUGFAIL("incorrect type of argument for matrix constructor");
-                    fExtraFunctions.printf("<error>");
-                    break;
+            if (argIndex < args.size()) {
+                const Type& argType = args[argIndex]->fType;
+                switch (argType.kind()) {
+                    case Type::kScalar_Kind: {
+                        fExtraFunctions.printf("x%zu", argIndex);
+                        break;
+                    }
+                    case Type::kVector_Kind: {
+                        fExtraFunctions.printf("x%zu[%d]", argIndex, argPosition);
+                        break;
+                    }
+                    case Type::kMatrix_Kind: {
+                        fExtraFunctions.printf("x%zu[%d][%d]", argIndex,
+                                               argPosition / argType.rows(),
+                                               argPosition % argType.rows());
+                        break;
+                    }
+                    default: {
+                        SkDEBUGFAIL("incorrect type of argument for matrix constructor");
+                        fExtraFunctions.printf("<error>");
+                        break;
+                    }
                 }
-            }
 
-            ++argPosition;
-            if (argPosition >= argType.columns() * argType.rows()) {
-                ++argIndex;
-                argPosition = 0;
+                ++argPosition;
+                if (argPosition >= argType.columns() * argType.rows()) {
+                    ++argIndex;
+                    argPosition = 0;
+                }
+            } else {
+                SkDEBUGFAIL("not enough arguments for matrix constructor");
+                fExtraFunctions.printf("<error>");
             }
         }
     }
 
     if (argPosition != 0 || argIndex != args.size()) {
         SkDEBUGFAIL("incorrect number of arguments for matrix constructor");
         name = "<error>";
     }
 
     fExtraFunctions.printf("));\n}\n");
     return name;
 }
