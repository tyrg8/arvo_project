commit 62aca4b8148bcfb85d798e2a70612e0ce833551b
Author: Marti Maria <marti.maria@littlecms.com>
Date:   Wed Aug 31 23:49:31 2022 +0200

    Allow transform templates to be executed directly (it does nothing, though)
    
    You may create transforms with formatters 0, that means the format is to be specified latter on. So, you were not supposed to call this template with cmsDoTransform before setting the format, but fuzzer did. So I am putting code to prevent this... without including a condition that  would ruin all cache and instruction branch guessing.

diff --git a/src/cmsxform.c b/src/cmsxform.c
index b790388..0b709b5 100644
--- a/src/cmsxform.c
+++ b/src/cmsxform.c
@@ -807,161 +807,193 @@ static
 void ParalellizeIfSuitable(_cmsTRANSFORM* p)
 {
     _cmsParallelizationPluginChunkType* ctx = (_cmsParallelizationPluginChunkType*)_cmsContextGetClientChunk(p->ContextID, ParallelizationPlugin);
 
     _cmsAssert(p != NULL);
     if (ctx != NULL && ctx->SchedulerFn != NULL) {
 
         p->Worker = p->xform;
         p->xform = ctx->SchedulerFn;
         p->MaxWorkers = ctx->MaxWorkers;
         p->WorkerFlags = ctx->WorkerFlags;
     }
 }
 
+
+/**
+* An empty unroll to avoid a check with NULL on cmsDoTransform()
+*/
+static
+cmsUInt8Number* UnrollNothing(CMSREGISTER _cmsTRANSFORM* info,
+                              CMSREGISTER cmsUInt16Number wIn[],
+                              CMSREGISTER cmsUInt8Number* accum,
+                              CMSREGISTER cmsUInt32Number Stride)
+{    
+    return accum;
+
+    cmsUNUSED_PARAMETER(info);
+    cmsUNUSED_PARAMETER(wIn);
+    cmsUNUSED_PARAMETER(Stride);
+}
+
+static
+cmsUInt8Number* PackNothing(CMSREGISTER _cmsTRANSFORM* info,
+                           CMSREGISTER cmsUInt16Number wOut[],
+                           CMSREGISTER cmsUInt8Number* output,
+                           CMSREGISTER cmsUInt32Number Stride)
+{
+    return output;
+
+    cmsUNUSED_PARAMETER(info);
+    cmsUNUSED_PARAMETER(wOut);
+    cmsUNUSED_PARAMETER(Stride);
+}
+
 // Allocate transform struct and set it to defaults. Ask the optimization plug-in about if those formats are proper
 // for separated transforms. If this is the case,
 static
 _cmsTRANSFORM* AllocEmptyTransform(cmsContext ContextID, cmsPipeline* lut,
                                                cmsUInt32Number Intent, cmsUInt32Number* InputFormat, cmsUInt32Number* OutputFormat, cmsUInt32Number* dwFlags)
 {
      _cmsTransformPluginChunkType* ctx = ( _cmsTransformPluginChunkType*) _cmsContextGetClientChunk(ContextID, TransformPlugin);
      _cmsTransformCollection* Plugin;
 
        // Allocate needed memory
        _cmsTRANSFORM* p = (_cmsTRANSFORM*)_cmsMallocZero(ContextID, sizeof(_cmsTRANSFORM));
        if (!p) {
               cmsPipelineFree(lut);
               return NULL;
        }
 
        // Store the proposed pipeline
        p->Lut = lut;
 
        // Let's see if any plug-in want to do the transform by itself
        if (p->Lut != NULL) {
 
            if (!(*dwFlags & cmsFLAGS_NOOPTIMIZE))
            {
                for (Plugin = ctx->TransformCollection;
                    Plugin != NULL;
                    Plugin = Plugin->Next) {
 
                    if (Plugin->Factory(&p->xform, &p->UserData, &p->FreeUserData, &p->Lut, InputFormat, OutputFormat, dwFlags)) {
 
                        // Last plugin in the declaration order takes control. We just keep
                        // the original parameters as a logging. 
                        // Note that cmsFLAGS_CAN_CHANGE_FORMATTER is not set, so by default 
                        // an optimized transform is not reusable. The plug-in can, however, change
                        // the flags and make it suitable.
 
                        p->ContextID = ContextID;
                        p->InputFormat = *InputFormat;
                        p->OutputFormat = *OutputFormat;
                        p->dwOriginalFlags = *dwFlags;
 
                        // Fill the formatters just in case the optimized routine is interested.
                        // No error is thrown if the formatter doesn't exist. It is up to the optimization 
                        // factory to decide what to do in those cases.
                        p->FromInput = _cmsGetFormatter(ContextID, *InputFormat, cmsFormatterInput, CMS_PACK_FLAGS_16BITS).Fmt16;
                        p->ToOutput = _cmsGetFormatter(ContextID, *OutputFormat, cmsFormatterOutput, CMS_PACK_FLAGS_16BITS).Fmt16;
                        p->FromInputFloat = _cmsGetFormatter(ContextID, *InputFormat, cmsFormatterInput, CMS_PACK_FLAGS_FLOAT).FmtFloat;
                        p->ToOutputFloat = _cmsGetFormatter(ContextID, *OutputFormat, cmsFormatterOutput, CMS_PACK_FLAGS_FLOAT).FmtFloat;
 
                        // Save the day? (Ignore the warning)
                        if (Plugin->OldXform) {
                            p->OldXform = (_cmsTransformFn)(void*)p->xform;
                            p->xform = _cmsTransform2toTransformAdaptor;
                        }
 
                        ParalellizeIfSuitable(p);
                        return p;
                    }
                }
            }
 
            // Not suitable for the transform plug-in, let's check  the pipeline plug-in
            _cmsOptimizePipeline(ContextID, &p->Lut, Intent, InputFormat, OutputFormat, dwFlags);
        }
 
     // Check whatever this is a true floating point transform
     if (_cmsFormatterIsFloat(*OutputFormat)) {
 
         // Get formatter function always return a valid union, but the contents of this union may be NULL.
         p ->FromInputFloat = _cmsGetFormatter(ContextID, *InputFormat,  cmsFormatterInput, CMS_PACK_FLAGS_FLOAT).FmtFloat;
         p ->ToOutputFloat  = _cmsGetFormatter(ContextID, *OutputFormat, cmsFormatterOutput, CMS_PACK_FLAGS_FLOAT).FmtFloat;
         *dwFlags |= cmsFLAGS_CAN_CHANGE_FORMATTER;
 
         if (p ->FromInputFloat == NULL || p ->ToOutputFloat == NULL) {
 
             cmsSignalError(ContextID, cmsERROR_UNKNOWN_EXTENSION, "Unsupported raster format");
             cmsDeleteTransform(p);
             return NULL;
         }
 
         if (*dwFlags & cmsFLAGS_NULLTRANSFORM) {
 
             p ->xform = NullFloatXFORM;
         }
         else {
             // Float transforms don't use cache, always are non-NULL
             p ->xform = FloatXFORM;
         }
 
     }
     else {
 
+        // Formats are intended to be changed before use
         if (*InputFormat == 0 && *OutputFormat == 0) {
-            p ->FromInput = p ->ToOutput = NULL;
+            p->FromInput = UnrollNothing;
+            p->ToOutput = PackNothing;
             *dwFlags |= cmsFLAGS_CAN_CHANGE_FORMATTER;
         }
         else {
 
             cmsUInt32Number BytesPerPixelInput;
 
             p ->FromInput = _cmsGetFormatter(ContextID, *InputFormat,  cmsFormatterInput, CMS_PACK_FLAGS_16BITS).Fmt16;
             p ->ToOutput  = _cmsGetFormatter(ContextID, *OutputFormat, cmsFormatterOutput, CMS_PACK_FLAGS_16BITS).Fmt16;
 
             if (p ->FromInput == NULL || p ->ToOutput == NULL) {
 
                 cmsSignalError(ContextID, cmsERROR_UNKNOWN_EXTENSION, "Unsupported raster format");
                 cmsDeleteTransform(p);
                 return NULL;
             }
 
             BytesPerPixelInput = T_BYTES(p ->InputFormat);
             if (BytesPerPixelInput == 0 || BytesPerPixelInput >= 2)
                    *dwFlags |= cmsFLAGS_CAN_CHANGE_FORMATTER;
 
         }
 
         if (*dwFlags & cmsFLAGS_NULLTRANSFORM) {
 
             p ->xform = NullXFORM;
         }
         else {
             if (*dwFlags & cmsFLAGS_NOCACHE) {
 
                 if (*dwFlags & cmsFLAGS_GAMUTCHECK)
                     p ->xform = PrecalculatedXFORMGamutCheck;  // Gamut check, no cache
                 else
                     p ->xform = PrecalculatedXFORM;  // No cache, no gamut check
             }
             else {
 
                 if (*dwFlags & cmsFLAGS_GAMUTCHECK)
                     p ->xform = CachedXFORMGamutCheck;    // Gamut check, cache
                 else
                     p ->xform = CachedXFORM;  // No gamut check, cache
 
             }
         }
     }
 
     p ->InputFormat     = *InputFormat;
     p ->OutputFormat    = *OutputFormat;
     p ->dwOriginalFlags = *dwFlags;
     p ->ContextID       = ContextID;
     p ->UserData        = NULL;
     ParalellizeIfSuitable(p);
     return p;
 }
diff --git a/testbed/testcms2.c b/testbed/testcms2.c
index 0513e09..ea398be 100644
--- a/testbed/testcms2.c
+++ b/testbed/testcms2.c
@@ -9223,297 +9223,297 @@ void PrintSupportedIntents(void)
 int main(int argc, char* argv[])
 {
     cmsInt32Number Exhaustive = 0;
     cmsInt32Number DoSpeedTests = 1;
     cmsInt32Number DoCheckTests = 1;
     cmsInt32Number DoPluginTests = 1;
     cmsInt32Number DoZooTests = 0;
 
 #ifdef _MSC_VER
     _CrtSetDbgFlag ( _CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF );
 #endif
 
     // First of all, check for the right header
     if (cmsGetEncodedCMMversion() != LCMS_VERSION) {
         Die("Oops, you are mixing header and shared lib!\nHeader version reports to be '%d' and shared lib '%d'\n", LCMS_VERSION, cmsGetEncodedCMMversion());
     }
 
     printf("LittleCMS %2.2f test bed %s %s\n\n", cmsGetEncodedCMMversion() / 1000.0, __DATE__, __TIME__);
 
     if ((argc == 2) && strcmp(argv[1], "--exhaustive") == 0) {
 
         Exhaustive = 1;
         printf("Running exhaustive tests (will take a while...)\n\n");
     }
     else
         if ((argc == 3) && strcmp(argv[1], "--chdir") == 0) {
             CHDIR(argv[2]);
         }
 
 #ifdef LCMS_FAST_EXTENSIONS
    printf("Installing fast float extension ...");   
    cmsPlugin(cmsFastFloatExtensions());
    printf("done.\n");
 #endif
 
 
     printf("Installing debug memory plug-in ... ");
     cmsPlugin(&DebugMemHandler);
     printf("done.\n");
 
     printf("Installing error logger ... ");
     cmsSetLogErrorHandler(FatalErrorQuit);
     printf("done.\n");
-             
+         
     PrintSupportedIntents();
     
     Check("Base types", CheckBaseTypes);
     Check("endianness", CheckEndianness);
     Check("quick floor", CheckQuickFloor);
     Check("quick floor word", CheckQuickFloorWord);
     Check("Fixed point 15.16 representation", CheckFixedPoint15_16);
     Check("Fixed point 8.8 representation", CheckFixedPoint8_8);
     Check("D50 roundtrip", CheckD50Roundtrip);
 
     // Create utility profiles
     if (DoCheckTests || DoSpeedTests)
         Check("Creation of test profiles", CreateTestProfiles);
 
     if (DoCheckTests) {
    
     // Forward 1D interpolation
     Check("1D interpolation in 2pt tables", Check1DLERP2);
     Check("1D interpolation in 3pt tables", Check1DLERP3);
     Check("1D interpolation in 4pt tables", Check1DLERP4);
     Check("1D interpolation in 6pt tables", Check1DLERP6);
     Check("1D interpolation in 18pt tables", Check1DLERP18);
     Check("1D interpolation in descending 2pt tables", Check1DLERP2Down);
     Check("1D interpolation in descending 3pt tables", Check1DLERP3Down);
     Check("1D interpolation in descending 6pt tables", Check1DLERP6Down);
     Check("1D interpolation in descending 18pt tables", Check1DLERP18Down);
 
     if (Exhaustive) {
 
         Check("1D interpolation in n tables", ExhaustiveCheck1DLERP);
         Check("1D interpolation in descending tables", ExhaustiveCheck1DLERPDown);
     }
 
     // Forward 3D interpolation
     Check("3D interpolation Tetrahedral (float) ", Check3DinterpolationFloatTetrahedral);
     Check("3D interpolation Trilinear (float) ", Check3DinterpolationFloatTrilinear);
     Check("3D interpolation Tetrahedral (16) ", Check3DinterpolationTetrahedral16);
     Check("3D interpolation Trilinear (16) ", Check3DinterpolationTrilinear16);
 
     if (Exhaustive) {
 
         Check("Exhaustive 3D interpolation Tetrahedral (float) ", ExaustiveCheck3DinterpolationFloatTetrahedral);
         Check("Exhaustive 3D interpolation Trilinear  (float) ", ExaustiveCheck3DinterpolationFloatTrilinear);
         Check("Exhaustive 3D interpolation Tetrahedral (16) ", ExhaustiveCheck3DinterpolationTetrahedral16);
         Check("Exhaustive 3D interpolation Trilinear (16) ", ExhaustiveCheck3DinterpolationTrilinear16);
     }
 
     Check("Reverse interpolation 3 -> 3", CheckReverseInterpolation3x3);
     Check("Reverse interpolation 4 -> 3", CheckReverseInterpolation4x3);
 
 
     // High dimensionality interpolation
 
     Check("3D interpolation", Check3Dinterp);
     Check("3D interpolation with granularity", Check3DinterpGranular);
     Check("4D interpolation", Check4Dinterp);
     Check("4D interpolation with granularity", Check4DinterpGranular);
     Check("5D interpolation with granularity", Check5DinterpGranular);
     Check("6D interpolation with granularity", Check6DinterpGranular);
     Check("7D interpolation with granularity", Check7DinterpGranular);
     Check("8D interpolation with granularity", Check8DinterpGranular);
 
     // Encoding of colorspaces
     Check("Lab to LCh and back (float only) ", CheckLab2LCh);
     Check("Lab to XYZ and back (float only) ", CheckLab2XYZ);
     Check("Lab to xyY and back (float only) ", CheckLab2xyY);
     Check("Lab V2 encoding", CheckLabV2encoding);
     Check("Lab V4 encoding", CheckLabV4encoding);
 
     // BlackBody
     Check("Blackbody radiator", CheckTemp2CHRM);
 
     // Tone curves
     Check("Linear gamma curves (16 bits)", CheckGammaCreation16);
     Check("Linear gamma curves (float)", CheckGammaCreationFlt);
 
     Check("Curve 1.8 (float)", CheckGamma18);
     Check("Curve 2.2 (float)", CheckGamma22);
     Check("Curve 3.0 (float)", CheckGamma30);
 
     Check("Curve 1.8 (table)", CheckGamma18Table);
     Check("Curve 2.2 (table)", CheckGamma22Table);
     Check("Curve 3.0 (table)", CheckGamma30Table);
 
     Check("Curve 1.8 (word table)", CheckGamma18TableWord);
     Check("Curve 2.2 (word table)", CheckGamma22TableWord);
     Check("Curve 3.0 (word table)", CheckGamma30TableWord);
 
     Check("Parametric curves", CheckParametricToneCurves);
 
     Check("Join curves", CheckJointCurves);
     Check("Join curves descending", CheckJointCurvesDescending);
     Check("Join curves degenerated", CheckReverseDegenerated);
     Check("Join curves sRGB (Float)", CheckJointFloatCurves_sRGB);
     Check("Join curves sRGB (16 bits)", CheckJoint16Curves_sRGB);
     Check("Join curves sigmoidal", CheckJointCurvesSShaped);
 
     // LUT basics
     Check("LUT creation & dup", CheckLUTcreation);
     Check("1 Stage LUT ", Check1StageLUT);
     Check("2 Stage LUT ", Check2StageLUT);
     Check("2 Stage LUT (16 bits)", Check2Stage16LUT);
     Check("3 Stage LUT ", Check3StageLUT);
     Check("3 Stage LUT (16 bits)", Check3Stage16LUT);
     Check("4 Stage LUT ", Check4StageLUT);
     Check("4 Stage LUT (16 bits)", Check4Stage16LUT);
     Check("5 Stage LUT ", Check5StageLUT);
     Check("5 Stage LUT (16 bits) ", Check5Stage16LUT);
     Check("6 Stage LUT ", Check6StageLUT);
     Check("6 Stage LUT (16 bits) ", Check6Stage16LUT);
 
     // LUT operation
     Check("Lab to Lab LUT (float only) ", CheckLab2LabLUT);
     Check("XYZ to XYZ LUT (float only) ", CheckXYZ2XYZLUT);
     Check("Lab to Lab MAT LUT (float only) ", CheckLab2LabMatLUT);
     Check("Named Color LUT", CheckNamedColorLUT);
     Check("Usual formatters", CheckFormatters16);
     Check("Floating point formatters", CheckFormattersFloat);
 
 #ifndef CMS_NO_HALF_SUPPORT 
     Check("HALF formatters", CheckFormattersHalf);
 #endif
     // ChangeBuffersFormat
     Check("ChangeBuffersFormat", CheckChangeBufferFormat);
 
     // MLU
     Check("Multilocalized Unicode", CheckMLU);
 
     // Named color
     Check("Named color lists", CheckNamedColorList);
     Check("Create named color profile", CreateNamedColorProfile);
 
 
     // Profile I/O (this one is huge!)
     Check("Profile creation", CheckProfileCreation);
     Check("Header version", CheckVersionHeaderWriting);
     Check("Multilocalized profile", CheckMultilocalizedProfile);
 
     // Error reporting
     Check("Error reporting on bad profiles", CheckErrReportingOnBadProfiles);
     Check("Error reporting on bad transforms", CheckErrReportingOnBadTransforms);
 
     // Transforms
     Check("Curves only transforms", CheckCurvesOnlyTransforms);
     Check("Float Lab->Lab transforms", CheckFloatLabTransforms);
     Check("Encoded Lab->Lab transforms", CheckEncodedLabTransforms);
     Check("Stored identities", CheckStoredIdentities);
 
     Check("Matrix-shaper transform (float)",   CheckMatrixShaperXFORMFloat);
     Check("Matrix-shaper transform (16 bits)", CheckMatrixShaperXFORM16);
     Check("Matrix-shaper transform (8 bits)",  CheckMatrixShaperXFORM8);
 
     Check("Primaries of sRGB", CheckRGBPrimaries);
 
     // Known values
     Check("Known values across matrix-shaper", Chack_sRGB_Float);
     Check("Gray input profile", CheckInputGray);
     Check("Gray Lab input profile", CheckLabInputGray);
     Check("Gray output profile", CheckOutputGray);
     Check("Gray Lab output profile", CheckLabOutputGray);
 
     Check("Matrix-shaper proofing transform (float)",   CheckProofingXFORMFloat);
     Check("Matrix-shaper proofing transform (16 bits)",  CheckProofingXFORM16);
 
     Check("Gamut check", CheckGamutCheck);
 
     Check("CMYK roundtrip on perceptual transform",   CheckCMYKRoundtrip);
 
     Check("CMYK perceptual transform",   CheckCMYKPerceptual);
     // Check("CMYK rel.col. transform",   CheckCMYKRelCol);
 
     Check("Black ink only preservation", CheckKOnlyBlackPreserving);
     Check("Black plane preservation", CheckKPlaneBlackPreserving);
 
 
     Check("Deciding curve types", CheckV4gamma);
 
     Check("Black point detection", CheckBlackPoint);
     Check("TAC detection", CheckTAC);
 
     Check("CGATS parser", CheckCGATS);
     Check("CGATS parser on junk", CheckCGATS2);
     Check("CGATS parser on overflow", CheckCGATS_Overflow);
     Check("PostScript generator", CheckPostScript);
     Check("Segment maxima GBD", CheckGBD);
     Check("MD5 digest", CheckMD5);
     Check("Linking", CheckLinking);
     Check("floating point tags on XYZ", CheckFloatXYZ);
     Check("RGB->Lab->RGB with alpha on FLT", ChecksRGB2LabFLT);
     Check("Parametric curve on Rec709", CheckParametricRec709);
     Check("Floating Point sampled curve with non-zero start", CheckFloatSamples);
     Check("Floating Point segmented curve with short sampled segment", CheckFloatSegments);
     Check("Read RAW tags", CheckReadRAW);
     Check("Check MetaTag", CheckMeta);
     Check("Null transform on floats", CheckFloatNULLxform);
     Check("Set free a tag", CheckRemoveTag);
     Check("Matrix simplification", CheckMatrixSimplify);
     Check("Planar 8 optimization", CheckPlanar8opt);
     Check("Swap endian feature", CheckSE);
     Check("Transform line stride RGB", CheckTransformLineStride);
     Check("Forged MPE profile", CheckForgedMPE);
     Check("Proofing intersection", CheckProofingIntersection);
     Check("Empty MLUC", CheckEmptyMLUC);
     Check("sRGB round-trips", Check_sRGB_Rountrips);
     Check("Gamma space detection", CheckGammaSpaceDetection);
     Check("Unbounded mode w/ integer output", CheckIntToFloatTransform);
     Check("Corrupted built-in by using cmsWriteRawTag", CheckInducedCorruption);
     }
 
     if (DoPluginTests)
     {
 
         Check("Context memory handling", CheckAllocContext);
         Check("Simple context functionality", CheckSimpleContext);
         Check("Alarm codes context", CheckAlarmColorsContext);
         Check("Adaptation state context", CheckAdaptationStateContext);
         Check("1D interpolation plugin", CheckInterp1DPlugin); 
         Check("3D interpolation plugin", CheckInterp3DPlugin); 
         Check("Parametric curve plugin", CheckParametricCurvePlugin);        
         Check("Formatters plugin",       CheckFormattersPlugin);        
         Check("Tag type plugin",         CheckTagTypePlugin);
         Check("MPE type plugin",         CheckMPEPlugin);       
         Check("Optimization plugin",     CheckOptimizationPlugin); 
         Check("Rendering intent plugin", CheckIntentPlugin);
         Check("Full transform plugin",   CheckTransformPlugin);
         Check("Mutex plugin",            CheckMutexPlugin);
        
     }
 
 
     if (DoSpeedTests)
         SpeedTest();
 
 
 #ifdef CMS_IS_WINDOWS_
     if (DoZooTests) 
          CheckProfileZOO();
 #endif
 
     DebugMemPrintTotals();
 
     cmsUnregisterPlugins();
 
     // Cleanup
     if (DoCheckTests || DoSpeedTests)
         RemoveTestProfiles();
 
    return TotalFail;
 }
 
 
 
 
