commit 35d9a658b48f73faee44fc45ce3e11b0d10bfeb1
Author: Arran Cudbard-Bell <a.cudbardb@freeradius.org>
Date:   Sun Oct 31 02:24:48 2021 -0400

    Fix fr_unix_time_from_t crash from clusterfuzz
    
    For some reason maximum month value was set to 13, which created a buffer overrun.

diff --git a/src/lib/util/time.c b/src/lib/util/time.c
index 444aebc726..df36cc9de4 100644
--- a/src/lib/util/time.c
+++ b/src/lib/util/time.c
@@ -636,44 +636,49 @@ void fr_time_elapsed_fprint(FILE *fp, fr_time_elapsed_t const *elapsed, char con
 /*
  *	Based on https://blog.reverberate.org/2020/05/12/optimizing-date-algorithms.html
  */
 fr_unix_time_t fr_unix_time_from_tm(struct tm *tm)
 {
 	static const uint16_t month_yday[12] = {0,   31,  59,  90,  120, 151,
 						181, 212, 243, 273, 304, 334};
 
 	uint32_t year_adj = tm->tm_year + 4800 + 1900;  /* Ensure positive year, multiple of 400. */
 	uint32_t febs = year_adj - (tm->tm_mon <= 2 ? 1 : 0);  /* Februaries since base. */
 	uint32_t leap_days = 1 + (febs / 4) - (febs / 100) + (febs / 400);
-	uint32_t days = 365 * year_adj + leap_days + month_yday[tm->tm_mon] + tm->tm_mday - 1;
+	uint32_t days;
+
+	/* Prevent crash if tm->tm_mon is invalid - seen in clusterfuzz */
+	if (unlikely(tm->tm_mon > (__typeof__(tm->tm_mon))NUM_ELEMENTS(month_yday))) return fr_unix_time_min();
+
+	days = 365 * year_adj + leap_days + month_yday[tm->tm_mon] + tm->tm_mday - 1;
 
 #define CHECK(_x, _max) if ((tm->tm_ ## _x < 0) || (tm->tm_ ## _x >= _max)) tm->tm_ ## _x = _max - 1
 
 	CHECK(sec, 60);
 	CHECK(min, 60);
 	CHECK(hour, 24);
 	CHECK(mday, 32);
 	CHECK(mon, 12);
 	CHECK(year, 3000);
 	CHECK(wday, 7);
 	CHECK(mon, 12);
 	CHECK(yday, 366);
 	/* don't check gmtoff, it can be negative */
 
 	/*
 	 *	2472692 adjusts the days for Unix epoch.  It is calculated as
 	 *	(365.2425 * (4800 + 1970))
 	 */
 	return fr_unix_time_from_sec((days - 2472692) * 86400 + (tm->tm_hour * 3600) + (tm->tm_min * 60) + tm->tm_sec + tm->tm_gmtoff);
 }
 
 /** Scale an input time to NSEC, clamping it at max / min.
  *
  * @param t	input time / time delta
  * @param hint	time resolution hint
  * @return
  *	- INT64_MIN on underflow
  *	- 0 on invalid hint
  *	- INT64_MAX on overflow
  *	- otherwise a valid number, multiplied by the relevant scale,
  *	  so that the result is in nanoseconds.
  */
@@ -782,306 +787,306 @@ static char const *months[] = {
 /** Convert string in various formats to a fr_unix_time_t
  *
  * @param date_str input date string.
  * @param date time_t to write result to.
  * @param[in] hint	scale for the parsing.  Default is "seconds"
  * @return
  *	- 0 on success.
  *	- -1 on failure.
  */
 int fr_unix_time_from_str(fr_unix_time_t *date, char const *date_str, fr_time_res_t hint)
 {
 	int		i;
 	int64_t		tmp;
 	struct tm	*tm, s_tm;
 	char		buf[64];
 	char		*p;
 	char		*f[4];
 	char		*tail = NULL;
 	fr_time_delta_t	gmt_delta = fr_time_delta_wrap(0);
 
 	/*
 	 *	Test for unix timestamp, which is just a number and
 	 *	nothing else.
 	 */
 	tmp = strtoul(date_str, &tail, 10);
 	if (*tail == '\0') {
 		*date = fr_unix_time_from_nsec(fr_time_scale(tmp, hint));
 		return 0;
 	}
 
 	tm = &s_tm;
 	memset(tm, 0, sizeof(*tm));
 	tm->tm_isdst = -1;	/* don't know, and don't care about DST */
 
 	/*
 	 *	Check for RFC 3339 dates.  Note that we only support
 	 *	dates in a ~1000 year period.  If the server is being
 	 *	used after 3000AD, someone can patch it then.
 	 *
 	 *	%Y-%m-%dT%H:%M:%S
 	 *	[.%d] sub-seconds
 	 *	Z | (+/-)%H:%M time zone offset
 	 *
 	 */
 	if ((tmp > 1900) && (tmp < 3000) && *tail == '-') {
 		unsigned long subseconds;
 		int tz, tz_hour, tz_min;
 
 		p = tail + 1;
 		s_tm.tm_year = tmp - 1900; /* 'struct tm' starts years in 1900 */
 
-		if (get_part(&p, &s_tm.tm_mon, 1, 13, '-', "month") < 0) return -1;
+		if (get_part(&p, &s_tm.tm_mon, 1, 12, '-', "month") < 0) return -1;
 		s_tm.tm_mon--;	/* ISO is 1..12, where 'struct tm' is 0..11 */
 
 		if (get_part(&p, &s_tm.tm_mday, 1, 31, 'T', "day") < 0) return -1;
 		if (get_part(&p, &s_tm.tm_hour, 0, 23, ':', "hour") < 0) return -1;
 		if (get_part(&p, &s_tm.tm_min, 0, 59, ':', "minute") < 0) return -1;
 		if (get_part(&p, &s_tm.tm_sec, 0, 60, '\0', "seconds") < 0) return -1;
 
 		if (*p == '.') {
 			p++;
 			subseconds = strtoul(p, &tail, 10);
 			if (subseconds > NSEC) {
 				fr_strerror_const("Invalid nanosecond specifier");
 				return -1;
 			}
 
 			/*
 			 *	Scale subseconds to nanoseconds by how
 			 *	many digits were parsed/
 			 */
 			if ((tail - p) < 9) {
 				for (i = 0; i < 9 - (tail -p); i++) {
 					subseconds *= 10;
 				}
 			}
 
 			p = tail;
 		} else {
 			subseconds = 0;
 		}
 
 		/*
 		 *	Time zone is GMT.  Leave well enough
 		 *	alone.
 		 */
 		if (*p == 'Z') {
 			if (p[1] != '\0') {
 				fr_strerror_printf("Unexpected text '%c' after time zone", p[1]);
 				return -1;
 			}
 			tz = 0;
 			goto done;
 		}
 
 		if ((*p != '+') && (*p != '-')) {
 			fr_strerror_printf("Invalid time zone specifier '%c'", *p);
 			return -1;
 		}
 		tail = p;	/* remember sign for later */
 		p++;
 
 		if (get_part(&p, &tz_hour, 0, 23, ':', "hour in time zone") < 0) return -1;
 		if (get_part(&p, &tz_min, 0, 59, '\0', "minute in time zone") < 0) return -1;
 
 		if (*p != '\0') {
 			fr_strerror_printf("Unexpected text '%c' after time zone", *p);
 			return -1;
 		}
 
 		/*
 		 *	We set the time zone, but the timegm()
 		 *	function ignores it.  Note also that mktime()
 		 *	ignores it too, and treats the time zone as
 		 *	local.
 		 *
 		 *	We can't store this value in s_tm.gtmoff,
 		 *	because the timegm() function helpfully zeros
 		 *	it out.
 		 *
 		 *	So insyead of using stupid C library
 		 *	functions, we just roll our own.
 		 */
 		tz = tz_hour * 3600 + tz_min;
 		if (*tail == '-') tz *= -1;
 
 	done:
 		tm->tm_gmtoff = tz;
 		*date = fr_unix_time_add(fr_unix_time_from_tm(tm), fr_time_delta_wrap(subseconds));
 		return 0;
 	}
 
 	/*
 	 *	Try to parse dates via locale-specific names,
 	 *	using the same format string as strftime().
 	 *
 	 *	If that fails, then we fall back to our parsing
 	 *	routine, which is much more forgiving.
 	 */
 
 #ifdef __APPLE__
 	/*
 	 *	OSX "man strptime" says it only accepts the local time zone, and GMT.
 	 *
 	 *	However, when printing dates via strftime(), it prints
 	 *	"UTC" instead of "GMT".  So... we have to fix it up
 	 *	for stupid nonsense.
 	 */
 	{
 		char const *tz = strstr(date_str, "UTC");
 		if (tz) {
 			char *my_str;
 
 			my_str = talloc_strdup(NULL, date_str);
 			if (my_str) {
 				p = my_str + (tz - date_str);
 				memcpy(p, "GMT", 3);
 
 				p = strptime(my_str, "%b %e %Y %H:%M:%S %Z", tm);
 				if (p && (*p == '\0')) {
 					talloc_free(my_str);
 					*date = fr_unix_time_from_tm(tm);
 					return 0;
 				}
 				talloc_free(my_str);
 			}
 		}
 	}
 #endif
 
 	p = strptime(date_str, "%b %e %Y %H:%M:%S %Z", tm);
 	if (p && (*p == '\0')) {
 		*date = fr_unix_time_from_tm(tm);
 		return 0;
 	}
 
 	strlcpy(buf, date_str, sizeof(buf));
 
 	p = buf;
 	f[0] = mystrtok(&p, " \t");
 	f[1] = mystrtok(&p, " \t");
 	f[2] = mystrtok(&p, " \t");
 	f[3] = mystrtok(&p, " \t"); /* may, or may not, be present */
 	if (!f[0] || !f[1] || !f[2]) {
 		fr_strerror_const("Too few fields");
 		return -1;
 	}
 
 	/*
 	 *	Try to parse the time zone.  If it's GMT / UTC or a
 	 *	local time zone we're OK.
 	 *
 	 *	Otherwise, ignore errors and assume GMT.
 	 */
 	if (*p != '\0') {
 		fr_skip_whitespace(p);
 		(void) fr_time_delta_from_time_zone(p, &gmt_delta);
 	}
 
 	/*
 	 *	The time has a colon, where nothing else does.
 	 *	So if we find it, bubble it to the back of the list.
 	 */
 	if (f[3]) {
 		for (i = 0; i < 3; i++) {
 			if (strchr(f[i], ':')) {
 				p = f[3];
 				f[3] = f[i];
 				f[i] = p;
 				break;
 			}
 		}
 	}
 
 	/*
 	 *  The month is text, which allows us to find it easily.
 	 */
 	tm->tm_mon = 12;
 	for (i = 0; i < 3; i++) {
 		if (isalpha((int) *f[i])) {
 			int j;
 
 			/*
 			 *  Bubble the month to the front of the list
 			 */
 			p = f[0];
 			f[0] = f[i];
 			f[i] = p;
 
 			for (j = 0; j < 12; j++) {
 				if (strncasecmp(months[j], f[0], 3) == 0) {
 					tm->tm_mon = j;
 					break;
 				}
 			}
 		}
 	}
 
 	/* month not found? */
 	if (tm->tm_mon == 12) {
 		fr_strerror_const("No month found");
 		return -1;
 	}
 
 	/*
 	 *  The year may be in f[1], or in f[2]
 	 */
 	tm->tm_year = atoi(f[1]);
 	tm->tm_mday = atoi(f[2]);
 
 	if (tm->tm_year >= 1900) {
 		tm->tm_year -= 1900;
 
 	} else {
 		/*
 		 *  We can't use 2-digit years any more, they make it
 		 *  impossible to tell what's the day, and what's the year.
 		 */
 		if (tm->tm_mday < 1900) {
 			fr_strerror_const("Invalid year < 1900");
 			return -1;
 		}
 
 		/*
 		 *  Swap the year and the day.
 		 */
 		i = tm->tm_year;
 		tm->tm_year = tm->tm_mday - 1900;
 		tm->tm_mday = i;
 	}
 
 	/*
 	 *  If the day is out of range, die.
 	 */
 	if ((tm->tm_mday < 1) || (tm->tm_mday > 31)) {
 		fr_strerror_const("Invalid day of month");
 		return -1;
 	}
 
 	/*
 	 *	There may be %H:%M:%S.  Parse it in a hacky way.
 	 */
 	if (f[3]) {
 		f[0] = f[3];	/* HH */
 		f[1] = strchr(f[0], ':'); /* find : separator */
 		if (!f[1]) {
 			fr_strerror_const("No ':' after hour");
 			return -1;
 		}
 
 		*(f[1]++) = '\0'; /* nuke it, and point to MM:SS */
 
 		f[2] = strchr(f[1], ':'); /* find : separator */
 		if (f[2]) {
 			*(f[2]++) = '\0';	/* nuke it, and point to SS */
 			tm->tm_sec = atoi(f[2]);
 		}			/* else leave it as zero */
 
 		tm->tm_hour = atoi(f[0]);
 		tm->tm_min = atoi(f[1]);
 	}
 
 	*date = fr_unix_time_add(fr_unix_time_from_tm(tm), gmt_delta);
 
 	return 0;
 }
