commit 4391214fa1168f8f7b12a1eca115d76fa07466c3
Author: Eduardo Silva <eduardo@treasure-data.com>
Date:   Mon May 11 15:38:09 2020 -0600

    filter: pass null terminated tag to filter callback (#1343)
    
    Signed-off-by: Eduardo Silva <eduardo@treasure-data.com>

diff --git a/src/flb_filter.c b/src/flb_filter.c
index 0e3cf95de..750a152f4 100644
--- a/src/flb_filter.c
+++ b/src/flb_filter.c
@@ -56,135 +56,134 @@ static inline int prop_key_check(const char *key, const char *kv, int k_len)
 void flb_filter_do(struct flb_input_chunk *ic,
                    const void *data, size_t bytes,
                    const char *tag, int tag_len,
                    struct flb_config *config)
 {
     int ret;
 #ifdef FLB_HAVE_METRICS
     int in_records = 0;
     int out_records = 0;
     int diff = 0;
     int pre_records = 0;
 #endif
     char *ntag;
     const char *work_data;
     size_t work_size;
     void *out_buf;
     size_t cur_size;
     size_t out_size;
     ssize_t content_size;
     ssize_t write_at;
     struct mk_list *head;
     struct flb_filter_instance *f_ins;
 
     /* For the incoming Tag make sure to create a NULL terminated reference */
     ntag = flb_malloc(tag_len + 1);
     if (!ntag) {
         flb_errno();
         flb_error("[filter] could not filter record due to memory problems");
         return;
     }
     memcpy(ntag, tag, tag_len);
     ntag[tag_len] = '\0';
 
-
     work_data = (const char *) data;
     work_size = bytes;
 
 #ifdef FLB_HAVE_METRICS
     /* Count number of incoming records */
     in_records = ic->added_records;
     pre_records = ic->total_records - in_records;
 #endif
 
     /* Iterate filters */
     mk_list_foreach(head, &config->filters) {
         f_ins = mk_list_entry(head, struct flb_filter_instance, _head);
         if (flb_router_match(ntag, tag_len, f_ins->match
 #ifdef FLB_HAVE_REGEX
         , f_ins->match_regex
 #else
         , NULL
 #endif
            )) {
             /* Reset filtered buffer */
             out_buf = NULL;
             out_size = 0;
 
             content_size = cio_chunk_get_content_size(ic->chunk);
 
             /* where to position the new content if modified ? */
             write_at = (content_size - work_size);
 
             /* Invoke the filter callback */
             ret = f_ins->p->cb_filter(work_data,      /* msgpack buffer   */
                                       work_size,      /* msgpack size     */
-                                      tag, tag_len,   /* input tag        */
+                                      ntag, tag_len,  /* input tag        */
                                       &out_buf,       /* new data         */
                                       &out_size,      /* new data size    */
                                       f_ins,          /* filter instance  */
                                       f_ins->context, /* filter priv data */
                                       config);
 
             /* Override buffer just if it was modified */
             if (ret == FLB_FILTER_MODIFIED) {
                 /* all records removed, no data to continue processing */
                 if (out_size == 0) {
                     /* reset data content length */
                     flb_input_chunk_write_at(ic, write_at, "", 0);
 
 #ifdef FLB_HAVE_METRICS
                     ic->total_records = pre_records;
 
                     /* Summarize all records removed */
                     flb_metrics_sum(FLB_METRIC_N_DROPPED,
                                     in_records, f_ins->metrics);
 #endif
                     break;
                 }
                 else {
 #ifdef FLB_HAVE_METRICS
                     out_records = flb_mp_count(out_buf, out_size);
                     if (out_records > in_records) {
                         diff = (out_records - in_records);
                         /* Summarize new records */
                         flb_metrics_sum(FLB_METRIC_N_ADDED,
                                         diff, f_ins->metrics);
                     }
                     else if (out_records < in_records) {
                         diff = (in_records - out_records);
                         /* Summarize dropped records */
                         flb_metrics_sum(FLB_METRIC_N_DROPPED,
                                         diff, f_ins->metrics);
                     }
 
                     /* set number of records in new chunk */
                     in_records = out_records;
                     ic->total_records = pre_records + in_records;
 #endif
                 }
                 ret = flb_input_chunk_write_at(ic, write_at,
                                                out_buf, out_size);
                 if (ret == -1) {
                     flb_error("[filter] could not write data to storage. "
                               "Skipping filtering.");
                     flb_free(out_buf);
                     continue;
                 }
 
                 /* Point back the 'data' pointer to the new address */
                 ret = cio_chunk_get_content(ic->chunk,
                                             (char **) &work_data, &cur_size);
                 if (ret != CIO_OK) {
                     flb_error("[filter] error retrieving data chunk");
                 }
                 else {
                     work_data += (cur_size - out_size);
                     work_size = out_size;
                 }
                 flb_free(out_buf);
             }
         }
     }
 
     flb_free(ntag);
 }
