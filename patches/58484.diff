commit c17cff72654ec46b1be6d3c03869bd4bd91f240a
Merge: a474179cd f1ad37919
Author: JacobBarthelmeh <jacob@wolfssl.com>
Date:   Fri May 12 16:37:17 2023 -0600

    Merge pull request #6403 from kareem-wolfssl/gh6387
    
    Fix wolfssl_asn1_time_to_tm setting unexpected fields in tm struct.

diff --git a/src/ssl_asn1.c b/src/ssl_asn1.c
index 5a09e2742..20dbe6758 100644
--- a/src/ssl_asn1.c
+++ b/src/ssl_asn1.c
@@ -3641,84 +3641,92 @@ static int wolfssl_gentime_year(const unsigned char* str, int len, int* year)
 /* Convert an ASN.1 TIME to a struct tm.
  *
  * @param [in] asnTime  ASN.1 TIME object.
  * @param [in] tm       Broken-down time. Must be non-NULL.
  * @return  1 on success.
  * @return  0 when string format is invalid.
  */
 static int wolfssl_asn1_time_to_tm(const WOLFSSL_ASN1_TIME* asnTime,
     struct tm* tm)
 {
     int ret = 1;
     const unsigned char* asn1TimeBuf;
     int asn1TimeBufLen;
     int i = 0;
+#ifdef XMKTIME
+    struct tm localTm = {0};
+#endif
 
     /* Get the string buffer - fixed array, can't fail. */
     asn1TimeBuf = wolfSSL_ASN1_TIME_get_data(asnTime);
     /* Get the length of the string. */
     asn1TimeBufLen = wolfSSL_ASN1_TIME_get_length(asnTime);
     if (asn1TimeBufLen <= 0) {
         WOLFSSL_MSG("Failed to get WOLFSSL_ASN1_TIME buffer length.");
         ret = 0;
     }
     if (ret == 1) {
         /* Zero out values in broken-down time. */
         XMEMSET(tm, 0, sizeof(struct tm));
 
         if (asnTime->type == V_ASN1_UTCTIME) {
             /* Get year from UTC TIME string. */
             int tm_year;
             if ((ret = wolfssl_utctime_year(asn1TimeBuf, asn1TimeBufLen,
                     &tm_year)) == 1) {
                 tm->tm_year = tm_year;
                 /* Month starts after year - 2 characters. */
                 i = 2;
             }
         }
         else if (asnTime->type == V_ASN1_GENERALIZEDTIME) {
             /* Get year from GENERALIZED TIME string. */
             int tm_year;
             if ((ret = wolfssl_gentime_year(asn1TimeBuf, asn1TimeBufLen,
                     &tm_year)) == 1) {
                 tm->tm_year = tm_year;
                 /* Month starts after year - 4 characters. */
                 i = 4;
             }
         }
         else {
             /* No other time formats known. */
             WOLFSSL_MSG("asnTime->type is invalid.");
             ret = 0;
         }
      }
      if (ret == 1) {
         /* Fill in rest of broken-down time from string. */
         /* January is 0 not 1 */
         tm->tm_mon   = (asn1TimeBuf[i] - '0') * 10; i++;
         tm->tm_mon  += (asn1TimeBuf[i] - '0') - 1;  i++;
         tm->tm_mday  = (asn1TimeBuf[i] - '0') * 10; i++;
         tm->tm_mday += (asn1TimeBuf[i] - '0');      i++;
         tm->tm_hour  = (asn1TimeBuf[i] - '0') * 10; i++;
         tm->tm_hour += (asn1TimeBuf[i] - '0');      i++;
         tm->tm_min   = (asn1TimeBuf[i] - '0') * 10; i++;
         tm->tm_min  += (asn1TimeBuf[i] - '0');      i++;
         tm->tm_sec   = (asn1TimeBuf[i] - '0') * 10; i++;
         tm->tm_sec  += (asn1TimeBuf[i] - '0');
 
     #ifdef XMKTIME
-        /* Call XMKTIME on tm to get tm_wday and tm_yday fields populated. */
-        XMKTIME(tm);
+        XMEMCPY(&localTm, tm, sizeof(struct tm));
+        /* Call XMKTIME on tm to get tm_wday and tm_yday fields populated.
+           Note that localTm is used here to avoid modifying other fields,
+           such as tm_isdst/tm_gmtoff. */
+        XMKTIME(&localTm);
+        tm->tm_wday = localTm.tm_wday;
+        tm->tm_yday = localTm.tm_yday;
     #endif
     }
 
     return ret;
 }
 
 /* Get the current time into a broken-down time.
  *
  * @param [out] tm  Broken-time time.
  * @return  1 on success.
  * @return  0 when tm is NULL.
  * @return  0 when get current time fails.
  * @return  0 when converting Unix time to broken-down time fails.
  */
diff --git a/tests/api.c b/tests/api.c
index 97268fed1..f337a47b4 100644
--- a/tests/api.c
+++ b/tests/api.c
@@ -33138,57 +33138,74 @@ static int test_wolfSSL_ASN1_TIME_adj(void)
 static int test_wolfSSL_ASN1_TIME_to_tm(void)
 {
     int res = TEST_SKIPPED;
 #if (defined(WOLFSSL_MYSQL_COMPATIBLE) || defined(WOLFSSL_NGINX) || \
       defined(WOLFSSL_HAPROXY) || defined(OPENSSL_EXTRA) || \
       defined(OPENSSL_ALL)) && !defined(NO_ASN_TIME)
     ASN1_TIME asnTime;
     struct tm tm;
+    time_t testTime = 1683926567; /* Fri May 12 09:22:47 PM UTC 2023 */
 
     XMEMSET(&asnTime, 0, sizeof(ASN1_TIME));
     AssertIntEQ(ASN1_TIME_set_string(&asnTime, "000222211515Z"), 1);
     AssertIntEQ(ASN1_TIME_to_tm(&asnTime, NULL), 1);
     AssertIntEQ(ASN1_TIME_to_tm(&asnTime, &tm), 1);
 
     AssertIntEQ(tm.tm_sec, 15);
     AssertIntEQ(tm.tm_min, 15);
     AssertIntEQ(tm.tm_hour, 21);
     AssertIntEQ(tm.tm_mday, 22);
     AssertIntEQ(tm.tm_mon, 1);
     AssertIntEQ(tm.tm_year, 100);
     AssertIntEQ(tm.tm_isdst, 0);
 #ifdef XMKTIME
     AssertIntEQ(tm.tm_wday, 2);
     AssertIntEQ(tm.tm_yday, 52);
 #endif
 
     AssertIntEQ(ASN1_TIME_set_string(&asnTime, "500222211515Z"), 1);
     AssertIntEQ(ASN1_TIME_to_tm(&asnTime, &tm), 1);
     AssertIntEQ(tm.tm_year, 50);
 
     /* Get current time. */
     AssertIntEQ(ASN1_TIME_to_tm(NULL, NULL), 0);
     AssertIntEQ(ASN1_TIME_to_tm(NULL, &tm), 1);
 
     XMEMSET(&asnTime, 0, sizeof(ASN1_TIME));
     /* 0 length. */
     AssertIntEQ(ASN1_TIME_to_tm(&asnTime, &tm), 0);
     /* No type. */
     asnTime.length = 1;
     AssertIntEQ(ASN1_TIME_to_tm(&asnTime, &tm), 0);
     /* Not UTCTIME length. */
     asnTime.type = V_ASN1_UTCTIME;
     AssertIntEQ(ASN1_TIME_to_tm(&asnTime, &tm), 0);
     /* Not GENERALIZEDTIME length. */
     asnTime.type = V_ASN1_GENERALIZEDTIME;
     AssertIntEQ(ASN1_TIME_to_tm(&asnTime, &tm), 0);
 
     /* Not Zulu timezone. */
     AssertIntEQ(ASN1_TIME_set_string(&asnTime, "000222211515U"), 1);
     AssertIntEQ(ASN1_TIME_to_tm(&asnTime, &tm), 0);
     AssertIntEQ(ASN1_TIME_set_string(&asnTime, "20000222211515U"), 1);
     AssertIntEQ(ASN1_TIME_to_tm(&asnTime, &tm), 0);
 
+#ifdef XMKTIME
+    AssertNotNull(ASN1_TIME_adj(&asnTime, testTime, 0, 0));
+    AssertIntEQ(ASN1_TIME_to_tm(&asnTime, &tm), 1);
+    AssertIntEQ(tm.tm_sec, 47);
+    AssertIntEQ(tm.tm_min, 22);
+    AssertIntEQ(tm.tm_hour, 21);
+    AssertIntEQ(tm.tm_mday, 12);
+    AssertIntEQ(tm.tm_mon, 4);
+    AssertIntEQ(tm.tm_year, 123);
+    AssertIntEQ(tm.tm_wday, 5);
+    AssertIntEQ(tm.tm_yday, 131);
+    /* Confirm that when used with a tm struct from ASN1_TIME_adj, all other
+       fields are zeroed out as expected. */
+    AssertIntEQ(tm.tm_isdst, 0);
+#endif
+
     res = TEST_RES_CHECK(1);
 #endif
     return res;
 }
