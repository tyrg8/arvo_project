commit 933b6b90a583b593efd8acb644603ab189226309
Author: James Zern <jzern@google.com>
Date:   Wed Jul 6 15:06:51 2022 -0700

    Revert "Fix bug with smaller width bigger size"
    
    This reverts commit 5b530fc962bcb8a51bbf03f5fbc2912f21b86e70.
    
    This fixes memory related fuzzer failures in the decoder.
    
    Bug: webm:1642
    Bug: oss-fuzz:48609
    Bug: oss-fuzz:48629
    Bug: oss-fuzz:48632
    Bug: oss-fuzz:48638
    Bug: oss-fuzz:48639
    Bug: oss-fuzz:48651
    Bug: oss-fuzz:48657
    Bug: oss-fuzz:48659
    Bug: oss-fuzz:48660
    Bug: oss-fuzz:48661
    Bug: oss-fuzz:48680
    Bug: oss-fuzz:48686
    Bug: oss-fuzz:48697
    Bug: oss-fuzz:48706
    Bug: oss-fuzz:48712
    Bug: oss-fuzz:48717
    Bug: oss-fuzz:48728
    Bug: oss-fuzz:48732
    Bug: oss-fuzz:48780
    Bug: oss-fuzz:48781
    Bug: oss-fuzz:48782
    Bug: oss-fuzz:48785
    Change-Id: I67a8539a3083f00eec1164fef5c6a8bc209f91fc

diff --git a/test/resize_test.cc b/test/resize_test.cc
index 1e5e166f7..212ff4697 100644
--- a/test/resize_test.cc
+++ b/test/resize_test.cc
@@ -94,162 +94,165 @@ struct FrameInfo {
 void ScaleForFrameNumber(unsigned int frame, unsigned int initial_w,
                          unsigned int initial_h, unsigned int *w,
                          unsigned int *h, bool flag_codec,
                          bool smaller_width_larger_size_) {
   if (smaller_width_larger_size_) {
     if (frame < 30) {
       *w = initial_w;
       *h = initial_h;
       return;
     }
-    *w = initial_w * 7 / 10;
-    *h = initial_h * 16 / 10;
+    if (frame < 100) {
+      *w = initial_w * 7 / 10;
+      *h = initial_h * 16 / 10;
+      return;
+    }
     return;
   }
   if (frame < 10) {
     *w = initial_w;
     *h = initial_h;
     return;
   }
   if (frame < 20) {
     *w = initial_w * 3 / 4;
     *h = initial_h * 3 / 4;
     return;
   }
   if (frame < 30) {
     *w = initial_w / 2;
     *h = initial_h / 2;
     return;
   }
   if (frame < 40) {
     *w = initial_w;
     *h = initial_h;
     return;
   }
   if (frame < 50) {
     *w = initial_w * 3 / 4;
     *h = initial_h * 3 / 4;
     return;
   }
   if (frame < 60) {
     *w = initial_w / 2;
     *h = initial_h / 2;
     return;
   }
   if (frame < 70) {
     *w = initial_w;
     *h = initial_h;
     return;
   }
   if (frame < 80) {
     *w = initial_w * 3 / 4;
     *h = initial_h * 3 / 4;
     return;
   }
   if (frame < 90) {
     *w = initial_w / 2;
     *h = initial_h / 2;
     return;
   }
   if (frame < 100) {
     *w = initial_w * 3 / 4;
     *h = initial_h * 3 / 4;
     return;
   }
   if (frame < 110) {
     *w = initial_w;
     *h = initial_h;
     return;
   }
   if (frame < 120) {
     *w = initial_w * 3 / 4;
     *h = initial_h * 3 / 4;
     return;
   }
   if (frame < 130) {
     *w = initial_w / 2;
     *h = initial_h / 2;
     return;
   }
   if (frame < 140) {
     *w = initial_w * 3 / 4;
     *h = initial_h * 3 / 4;
     return;
   }
   if (frame < 150) {
     *w = initial_w;
     *h = initial_h;
     return;
   }
   if (frame < 160) {
     *w = initial_w * 3 / 4;
     *h = initial_h * 3 / 4;
     return;
   }
   if (frame < 170) {
     *w = initial_w / 2;
     *h = initial_h / 2;
     return;
   }
   if (frame < 180) {
     *w = initial_w * 3 / 4;
     *h = initial_h * 3 / 4;
     return;
   }
   if (frame < 190) {
     *w = initial_w;
     *h = initial_h;
     return;
   }
   if (frame < 200) {
     *w = initial_w * 3 / 4;
     *h = initial_h * 3 / 4;
     return;
   }
   if (frame < 210) {
     *w = initial_w / 2;
     *h = initial_h / 2;
     return;
   }
   if (frame < 220) {
     *w = initial_w * 3 / 4;
     *h = initial_h * 3 / 4;
     return;
   }
   if (frame < 230) {
     *w = initial_w;
     *h = initial_h;
     return;
   }
   if (frame < 240) {
     *w = initial_w * 3 / 4;
     *h = initial_h * 3 / 4;
     return;
   }
   if (frame < 250) {
     *w = initial_w / 2;
     *h = initial_h / 2;
     return;
   }
   if (frame < 260) {
     *w = initial_w;
     *h = initial_h;
     return;
   }
   // Go down very low.
   if (frame < 270) {
     *w = initial_w / 4;
     *h = initial_h / 4;
     return;
   }
   if (flag_codec == 1) {
     // Cases that only works for VP9.
     // For VP9: Swap width and height of original.
     if (frame < 320) {
       *w = initial_h;
       *h = initial_w;
       return;
     }
   }
   *w = initial_w;
   *h = initial_h;
 }
@@ -575,34 +578,36 @@ TEST_P(ResizeRealtimeTest, TestExternalResizeWorks) {
   }
 }
 
-TEST_P(ResizeRealtimeTest, TestExternalResizeSmallerWidthBiggerSize) {
+// TODO(https://crbug.com/webm/1642): This causes a segfault in
+// init_encode_frame_mb_context().
+TEST_P(ResizeRealtimeTest, DISABLED_TestExternalResizeSmallerWidthBiggerSize) {
   ResizingVideoSource video;
   video.flag_codec_ = true;
   video.smaller_width_larger_size_ = true;
   DefaultConfig();
   // Disable internal resize for this test.
   cfg_.rc_resize_allowed = 0;
   change_bitrate_ = false;
   mismatch_psnr_ = 0.0;
   mismatch_nframes_ = 0;
   ASSERT_NO_FATAL_FAILURE(RunLoop(&video));
 
   for (std::vector<FrameInfo>::const_iterator info = frame_info_list_.begin();
        info != frame_info_list_.end(); ++info) {
     const unsigned int frame = static_cast<unsigned>(info->pts);
     unsigned int expected_w;
     unsigned int expected_h;
     ScaleForFrameNumber(frame, kInitialWidth, kInitialHeight, &expected_w,
                         &expected_h, video.flag_codec_,
                         video.smaller_width_larger_size_);
     EXPECT_EQ(expected_w, info->w)
         << "Frame " << frame << " had unexpected width";
     EXPECT_EQ(expected_h, info->h)
         << "Frame " << frame << " had unexpected height";
     EXPECT_EQ(static_cast<unsigned int>(0), GetMismatchFrames());
   }
 }
 
 // Verify the dynamic resizer behavior for real time, 1 pass CBR mode.
 // Run at low bitrate, with resize_allowed = 1, and verify that we get
 // one resize down event.
diff --git a/vp9/common/vp9_alloccommon.c b/vp9/common/vp9_alloccommon.c
index c27fe6477..faad657a0 100644
--- a/vp9/common/vp9_alloccommon.c
+++ b/vp9/common/vp9_alloccommon.c
@@ -127,30 +127,33 @@ int vp9_alloc_loop_filter(VP9_COMMON *cm) {
 int vp9_alloc_context_buffers(VP9_COMMON *cm, int width, int height) {
   int new_mi_size;
 
   vp9_set_mb_mi(cm, width, height);
   new_mi_size = cm->mi_stride * calc_mi_size(cm->mi_rows);
   if (cm->mi_alloc_size < new_mi_size) {
     cm->free_mi(cm);
     if (cm->alloc_mi(cm, new_mi_size)) goto fail;
+  }
+
+  if (cm->seg_map_alloc_size < cm->mi_rows * cm->mi_cols) {
+    // Create the segmentation map structure and set to 0.
+    free_seg_map(cm);
+    if (alloc_seg_map(cm, cm->mi_rows * cm->mi_cols)) goto fail;
+  }
+
+  if (cm->above_context_alloc_cols < cm->mi_cols) {
     vpx_free(cm->above_context);
     cm->above_context = (ENTROPY_CONTEXT *)vpx_calloc(
         2 * mi_cols_aligned_to_sb(cm->mi_cols) * MAX_MB_PLANE,
         sizeof(*cm->above_context));
     if (!cm->above_context) goto fail;
 
     vpx_free(cm->above_seg_context);
     cm->above_seg_context = (PARTITION_CONTEXT *)vpx_calloc(
         mi_cols_aligned_to_sb(cm->mi_cols), sizeof(*cm->above_seg_context));
     if (!cm->above_seg_context) goto fail;
     cm->above_context_alloc_cols = cm->mi_cols;
   }
 
-  if (cm->seg_map_alloc_size < cm->mi_rows * cm->mi_cols) {
-    // Create the segmentation map structure and set to 0.
-    free_seg_map(cm);
-    if (alloc_seg_map(cm, cm->mi_rows * cm->mi_cols)) goto fail;
-  }
-
   if (vp9_alloc_loop_filter(cm)) goto fail;
 
   return 0;
diff --git a/vp9/encoder/vp9_encoder.c b/vp9/encoder/vp9_encoder.c
index d58e8a312..371779e77 100644
--- a/vp9/encoder/vp9_encoder.c
+++ b/vp9/encoder/vp9_encoder.c
@@ -1972,186 +1972,163 @@ static void alloc_copy_partition_data(VP9_COMP *cpi) {
   }
 }
 
-static void free_copy_partition_data(VP9_COMP *cpi) {
-  vpx_free(cpi->prev_partition);
-  cpi->prev_partition = NULL;
-  vpx_free(cpi->prev_segment_id);
-  cpi->prev_segment_id = NULL;
-  vpx_free(cpi->prev_variance_low);
-  cpi->prev_variance_low = NULL;
-  vpx_free(cpi->copied_frame_cnt);
-  cpi->copied_frame_cnt = NULL;
-}
-
 void vp9_change_config(struct VP9_COMP *cpi, const VP9EncoderConfig *oxcf) {
   VP9_COMMON *const cm = &cpi->common;
   RATE_CONTROL *const rc = &cpi->rc;
   int last_w = cpi->oxcf.width;
   int last_h = cpi->oxcf.height;
 
   vp9_init_quantizer(cpi);
   if (cm->profile != oxcf->profile) cm->profile = oxcf->profile;
   cm->bit_depth = oxcf->bit_depth;
   cm->color_space = oxcf->color_space;
   cm->color_range = oxcf->color_range;
 
   cpi->target_level = oxcf->target_level;
   cpi->keep_level_stats = oxcf->target_level != LEVEL_MAX;
   set_level_constraint(&cpi->level_constraint,
                        get_level_index(cpi->target_level));
 
   if (cm->profile <= PROFILE_1)
     assert(cm->bit_depth == VPX_BITS_8);
   else
     assert(cm->bit_depth > VPX_BITS_8);
 
   cpi->oxcf = *oxcf;
 #if CONFIG_VP9_HIGHBITDEPTH
   cpi->td.mb.e_mbd.bd = (int)cm->bit_depth;
 #endif  // CONFIG_VP9_HIGHBITDEPTH
 
   if ((oxcf->pass == 0) && (oxcf->rc_mode == VPX_Q)) {
     rc->baseline_gf_interval = FIXED_GF_INTERVAL;
   } else {
     rc->baseline_gf_interval = (MIN_GF_INTERVAL + MAX_GF_INTERVAL) / 2;
   }
 
   cpi->refresh_golden_frame = 0;
   cpi->refresh_last_frame = 1;
   cm->refresh_frame_context = 1;
   cm->reset_frame_context = 0;
 
   vp9_reset_segment_features(&cm->seg);
   vp9_set_high_precision_mv(cpi, 0);
 
   {
     int i;
 
     for (i = 0; i < MAX_SEGMENTS; i++)
       cpi->segment_encode_breakout[i] = cpi->oxcf.encode_breakout;
   }
   cpi->encode_breakout = cpi->oxcf.encode_breakout;
 
   vp9_set_rc_buffer_sizes(cpi);
 
   // Set up frame rate and related parameters rate control values.
   vp9_new_framerate(cpi, cpi->framerate);
 
   // Set absolute upper and lower quality limits
   rc->worst_quality = cpi->oxcf.worst_allowed_q;
   rc->best_quality = cpi->oxcf.best_allowed_q;
 
   cm->interp_filter = cpi->sf.default_interp_filter;
 
   if (cpi->oxcf.render_width > 0 && cpi->oxcf.render_height > 0) {
     cm->render_width = cpi->oxcf.render_width;
     cm->render_height = cpi->oxcf.render_height;
   } else {
     cm->render_width = cpi->oxcf.width;
     cm->render_height = cpi->oxcf.height;
   }
   if (last_w != cpi->oxcf.width || last_h != cpi->oxcf.height) {
     cm->width = cpi->oxcf.width;
     cm->height = cpi->oxcf.height;
     cpi->external_resize = 1;
   }
 
   if (cpi->initial_width) {
     int new_mi_size = 0;
     vp9_set_mb_mi(cm, cm->width, cm->height);
     new_mi_size = cm->mi_stride * calc_mi_size(cm->mi_rows);
     if (cm->mi_alloc_size < new_mi_size) {
       vp9_free_context_buffers(cm);
-      vp9_free_pc_tree(&cpi->td);
-      vpx_free(cpi->mbmi_ext_base);
       alloc_compressor_data(cpi);
       realloc_segmentation_maps(cpi);
       cpi->initial_width = cpi->initial_height = 0;
       cpi->external_resize = 0;
     } else if (cm->mi_alloc_size == new_mi_size &&
                (cpi->oxcf.width > last_w || cpi->oxcf.height > last_h)) {
       if (vp9_alloc_loop_filter(cm)) {
         vpx_internal_error(&cm->error, VPX_CODEC_MEM_ERROR,
                            "Failed to allocate loop filter data");
       }
     }
   }
 
   if (cm->current_video_frame == 0 || last_w != cpi->oxcf.width ||
       last_h != cpi->oxcf.height)
     update_frame_size(cpi);
 
   if (last_w != cpi->oxcf.width || last_h != cpi->oxcf.height) {
-    vpx_free(cpi->consec_zero_mv);
-    CHECK_MEM_ERROR(
-        cm, cpi->consec_zero_mv,
-        vpx_calloc(cm->mi_rows * cm->mi_cols, sizeof(*cpi->consec_zero_mv)));
-
-    vpx_free(cpi->skin_map);
-    CHECK_MEM_ERROR(
-        cm, cpi->skin_map,
-        vpx_calloc(cm->mi_rows * cm->mi_cols, sizeof(cpi->skin_map[0])));
-
-    free_copy_partition_data(cpi);
-    alloc_copy_partition_data(cpi);
+    memset(cpi->consec_zero_mv, 0,
+           cm->mi_rows * cm->mi_cols * sizeof(*cpi->consec_zero_mv));
     if (cpi->oxcf.aq_mode == CYCLIC_REFRESH_AQ)
       vp9_cyclic_refresh_reset_resize(cpi);
     rc->rc_1_frame = 0;
     rc->rc_2_frame = 0;
   }
 
   if ((cpi->svc.number_temporal_layers > 1 && cpi->oxcf.rc_mode == VPX_CBR) ||
       ((cpi->svc.number_temporal_layers > 1 ||
         cpi->svc.number_spatial_layers > 1) &&
        cpi->oxcf.pass != 1)) {
     vp9_update_layer_context_change_config(cpi,
                                            (int)cpi->oxcf.target_bandwidth);
   }
 
   vp9_check_reset_rc_flag(cpi);
 
   cpi->alt_ref_source = NULL;
   rc->is_src_frame_alt_ref = 0;
 
 #if 0
   // Experimental RD Code
   cpi->frame_distortion = 0;
   cpi->last_frame_distortion = 0;
 #endif
 
   set_tile_limits(cpi);
 
   cpi->ext_refresh_frame_flags_pending = 0;
   cpi->ext_refresh_frame_context_pending = 0;
 
 #if CONFIG_VP9_HIGHBITDEPTH
   highbd_set_var_fns(cpi);
 #endif
 
   vp9_set_row_mt(cpi);
 }
 
 #ifndef M_LOG2_E
 #define M_LOG2_E 0.693147180559945309417
 #endif
 #define log2f(x) (log(x) / (float)M_LOG2_E)
 
 /***********************************************************************
  * Read before modifying 'cal_nmvjointsadcost' or 'cal_nmvsadcosts'    *
  ***********************************************************************
  * The following 2 functions ('cal_nmvjointsadcost' and                *
  * 'cal_nmvsadcosts') are used to calculate cost lookup tables         *
  * used by 'vp9_diamond_search_sad'. The C implementation of the       *
  * function is generic, but the AVX intrinsics optimised version       *
  * relies on the following properties of the computed tables:          *
  * For cal_nmvjointsadcost:                                            *
  *   - mvjointsadcost[1] == mvjointsadcost[2] == mvjointsadcost[3]     *
  * For cal_nmvsadcosts:                                                *
  *   - For all i: mvsadcost[0][i] == mvsadcost[1][i]                   *
  *         (Equal costs for both components)                           *
  *   - For all i: mvsadcost[0][i] == mvsadcost[0][-i]                  *
  *         (Cost function is even)                                     *
  * If these do not hold, then the AVX optimised version of the         *
  * 'vp9_diamond_search_sad' function cannot be used as it is, in which *
  * case you can revert to using the C function instead.                *
  ***********************************************************************/
