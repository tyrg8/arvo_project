commit 6b89433d4ad1808b386659f3afe491b19bb0acf6
Merge: 16626dc45 717d55410
Author: Ryan Savitski <rsavitski@google.com>
Date:   Mon Mar 18 13:56:43 2019 +0000

    Merge "ParseTypedFtraceToRaw: skip invalid proto field ids when decoding args"

diff --git a/src/trace_processor/proto_trace_parser.cc b/src/trace_processor/proto_trace_parser.cc
index 108c34c5a..7fbeb93a6 100644
--- a/src/trace_processor/proto_trace_parser.cc
+++ b/src/trace_processor/proto_trace_parser.cc
@@ -1,38 +1,39 @@
 /*
  * Copyright (C) 2018 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 #include "src/trace_processor/proto_trace_parser.h"
 
+#include <inttypes.h>
 #include <string.h>
 
 #include <string>
 
 #include "perfetto/base/logging.h"
 #include "perfetto/base/optional.h"
 #include "perfetto/base/string_view.h"
 #include "perfetto/base/utils.h"
 #include "perfetto/protozero/proto_decoder.h"
 #include "perfetto/traced/sys_stats_counters.h"
 #include "src/trace_processor/args_tracker.h"
 #include "src/trace_processor/clock_tracker.h"
 #include "src/trace_processor/event_tracker.h"
 #include "src/trace_processor/ftrace_descriptors.h"
 #include "src/trace_processor/process_tracker.h"
 #include "src/trace_processor/slice_tracker.h"
 #include "src/trace_processor/trace_processor_context.h"
 
 #include "perfetto/trace/trace.pb.h"
 #include "perfetto/trace/trace_packet.pb.h"
@@ -1369,59 +1370,65 @@ void ProtoTraceParser::ParseGenericFtraceField(RowId generic_row_id,
 void ProtoTraceParser::ParseTypedFtraceToRaw(uint32_t ftrace_id,
                                              int64_t timestamp,
                                              uint32_t cpu,
                                              uint32_t tid,
                                              TraceBlobView view) {
   ProtoDecoder decoder(view.data(), view.length());
   if (ftrace_id >= GetDescriptorsSize()) {
     PERFETTO_DLOG("Event with id: %d does not exist and cannot be parsed.",
                   ftrace_id);
     return;
   }
 
   MessageDescriptor* m = GetMessageDescriptorForId(ftrace_id);
   const auto& message_strings = ftrace_message_strings_[ftrace_id];
   UniqueTid utid = context_->process_tracker->UpdateThread(timestamp, tid, 0);
   RowId raw_event_id = context_->storage->mutable_raw_events()->AddRawEvent(
       timestamp, message_strings.message_name_id, cpu, utid);
   for (auto fld = decoder.ReadField(); fld.id != 0; fld = decoder.ReadField()) {
+    if (PERFETTO_UNLIKELY(fld.id >= kFtraceMaxFieldCount)) {
+      PERFETTO_DLOG(
+          "Skipping ftrace arg - proto field id is too large (%" PRIu32 ")",
+          fld.id);
+      continue;
+    }
     ProtoSchemaType type = m->fields[fld.id].type;
     StringId name_id = message_strings.field_name_ids[fld.id];
     switch (type) {
       case ProtoSchemaType::kUint32:
       case ProtoSchemaType::kInt32:
       case ProtoSchemaType::kUint64:
       case ProtoSchemaType::kInt64:
       case ProtoSchemaType::kFixed64:
       case ProtoSchemaType::kFixed32:
       case ProtoSchemaType::kSfixed32:
       case ProtoSchemaType::kSfixed64:
       case ProtoSchemaType::kSint32:
       case ProtoSchemaType::kSint64:
       case ProtoSchemaType::kBool:
       case ProtoSchemaType::kEnum: {
         context_->args_tracker->AddArg(raw_event_id, name_id, name_id,
                                        Variadic::Integer(fld.as_integer()));
         break;
       }
       case ProtoSchemaType::kString:
       case ProtoSchemaType::kBytes: {
         StringId value = context_->storage->InternString(fld.as_string());
         context_->args_tracker->AddArg(raw_event_id, name_id, name_id,
                                        Variadic::String(value));
         break;
       }
       case ProtoSchemaType::kDouble:
       case ProtoSchemaType::kFloat: {
         context_->args_tracker->AddArg(raw_event_id, name_id, name_id,
                                        Variadic::Real(fld.as_real()));
         break;
       }
       case ProtoSchemaType::kUnknown:
       case ProtoSchemaType::kGroup:
       case ProtoSchemaType::kMessage:
         PERFETTO_DLOG("Could not store %s as a field in args table.",
                       ProtoSchemaToString(type));
         break;
     }
   }
 }
