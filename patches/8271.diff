commit d711149fe912008ea19b1017171902d22e73344e
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Mon May 14 19:43:26 2018 -0400

    Restore set alpha behavior

diff --git a/MagickCore/image.c b/MagickCore/image.c
index 27461c490..a021e9938 100644
--- a/MagickCore/image.c
+++ b/MagickCore/image.c
@@ -2266,128 +2266,124 @@ MagickExport MagickBooleanType ResetImagePixels(Image *image,
     if (status == MagickFalse)
       continue;
     q=QueueCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);
     if (q == (Quantum *) NULL)
       {
         status=MagickFalse;
         continue;
       }
     for (x=0; x < (ssize_t) image->columns; x++)
     {
       (void) memset(q,0,GetPixelChannels(image)*sizeof(Quantum));
       q+=GetPixelChannels(image);
     }
     if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)
       status=MagickFalse;
   }
   image_view=DestroyCacheView(image_view);
   return(status);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %     S e t I m a g e A l p h a                                               %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  SetImageAlpha() sets the alpha levels of the image.
 %
 %  The format of the SetImageAlpha method is:
 %
 %      MagickBooleanType SetImageAlpha(Image *image,const Quantum alpha,
 %        ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image: the image.
 %
 %    o Alpha: the level of transparency: 0 is fully transparent and QuantumRange
 %      is fully opaque.
 %
 */
 MagickExport MagickBooleanType SetImageAlpha(Image *image,const Quantum alpha,
   ExceptionInfo *exception)
 {
   CacheView
     *image_view;
 
   MagickBooleanType
-    set_opaque,
     status;
 
   ssize_t
     y;
 
   assert(image != (Image *) NULL);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"...");
   assert(image->signature == MagickCoreSignature);
-  set_opaque=(image->alpha_trait == UndefinedPixelTrait) ? MagickTrue :
-    MagickFalse;
   image->alpha_trait=BlendPixelTrait;
   status=MagickTrue;
   image_view=AcquireAuthenticCacheView(image,exception);
 #if defined(MAGICKCORE_OPENMP_SUPPORT)
   #pragma omp parallel for schedule(static) shared(status) \
     magick_number_threads(image,image,image->rows,1)
 #endif
   for (y=0; y < (ssize_t) image->rows; y++)
   {
     register Quantum
       *magick_restrict q;
 
     register ssize_t
       x;
 
     if (status == MagickFalse)
       continue;
     q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);
     if (q == (Quantum *) NULL)
       {
         status=MagickFalse;
         continue;
       }
     for (x=0; x < (ssize_t) image->columns; x++)
     {
-      if (set_opaque != MagickFalse)
-        SetPixelAlpha(image,OpaqueAlpha,q);
+      SetPixelAlpha(image,alpha,q);
       q+=GetPixelChannels(image);
     }
     if (SyncCacheViewAuthenticPixels(image_view,exception) == MagickFalse)
       status=MagickFalse;
   }
   image_view=DestroyCacheView(image_view);
   return(status);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   S e t I m a g e B a c k g r o u n d C o l o r                             %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  SetImageBackgroundColor() initializes the image pixels to the image
 %  background color.  The background color is defined by the background_color
 %  member of the image structure.
 %
 %  The format of the SetImage method is:
 %
 %      MagickBooleanType SetImageBackgroundColor(Image *image,
 %        ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image: the image.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
