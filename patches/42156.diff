commit da684582d74a2c4016f5d9ccad78ce587fcd0b83
Author: George Peter Banyard <girgias@php.net>
Date:   Thu Dec 9 17:15:59 2021 +0000

    ZEND_INIT_FCALL is only produced when function exists at compile time (#7728)

diff --git a/UPGRADING.INTERNALS b/UPGRADING.INTERNALS
index 7feaee74ef..7175f0b54b 100644
--- a/UPGRADING.INTERNALS
+++ b/UPGRADING.INTERNALS
@@ -1,26 +1,39 @@
 PHP 8.2 INTERNALS UPGRADE NOTES
 
 1. Internal API changes
 
 2. Build system changes
 
 3. Module changes
 
+4. OpCode changes
+
 ========================
 1. Internal API changes
 ========================
 
 * Removed zend_binary_zval_str(n)casecmp() APIs. These were thin wrappers
   around zend_binary_str(n)casecmp_l() -- rather than
   zend_binary_str(n)casecmp() as one would expect. Call the appropriate
   wrapped function directly instead.
 * Removed the (ZEND_)WRONG_PARAM_COUNT_WITH_RETVAL() macros.
 
 ========================
 2. Build system changes
 ========================
 
 ========================
 3. Module changes
 ========================
 
+========================
+4. OpCode changes
+========================
+
+* The ZEND_INIT_FCALL opcode now asserts that the function exists in the symbol
+  table as the function's existence is checked at compile time.
+  For extensions modifying the function symbol table, setting
+  CG(compiler_options) |= ZEND_COMPILE_IGNORE_USER_FUNCTIONS | ZEND_COMPILE_IGNORE_INTERNAL_FUNCTIONS;
+  will produce ZEND_INIT_FCALL_BY_NAME opcodes instead which check for the
+  existence of the function at runtime.
+
diff --git a/Zend/zend_vm_def.h b/Zend/zend_vm_def.h
index 68e08162ca..934860c330 100644
--- a/Zend/zend_vm_def.h
+++ b/Zend/zend_vm_def.h
@@ -3921,30 +3921,28 @@ ZEND_VM_HOT_HANDLER(69, ZEND_INIT_NS_FCALL_BY_NAME, ANY, CONST, NUM|CACHE_SLOT)
 ZEND_VM_HOT_HANDLER(61, ZEND_INIT_FCALL, NUM, CONST, NUM|CACHE_SLOT)
 {
 	USE_OPLINE
 	zval *fname;
 	zval *func;
 	zend_function *fbc;
 	zend_execute_data *call;
 
 	fbc = CACHED_PTR(opline->result.num);
 	if (UNEXPECTED(fbc == NULL)) {
 		fname = (zval*)RT_CONSTANT(opline, opline->op2);
 		func = zend_hash_find_known_hash(EG(function_table), Z_STR_P(fname));
-		if (UNEXPECTED(func == NULL)) {
-			ZEND_VM_DISPATCH_TO_HELPER(zend_undefined_function_helper);
-		}
+		ZEND_ASSERT(func != NULL && "Function existence must be checked at compile time");
 		fbc = Z_FUNC_P(func);
 		if (EXPECTED(fbc->type == ZEND_USER_FUNCTION) && UNEXPECTED(!RUN_TIME_CACHE(&fbc->op_array))) {
 			init_func_run_time_cache(&fbc->op_array);
 		}
 		CACHE_PTR(opline->result.num, fbc);
 	}
 
 	call = _zend_vm_stack_push_call_frame_ex(
 		opline->op1.num, ZEND_CALL_NESTED_FUNCTION,
 		fbc, opline->extended_value, NULL);
 	call->prev_execute_data = EX(call);
 	EX(call) = call;
 
 	ZEND_VM_NEXT_OPCODE();
 }
diff --git a/Zend/zend_vm_execute.h b/Zend/zend_vm_execute.h
index 32b9232d90..37c2d1ee65 100644
Binary files a/Zend/zend_vm_execute.h and b/Zend/zend_vm_execute.h differ
