commit 25a32ed681cd3fc48eabd6b8efa5683b1d32ffd0
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Tue Jul 26 15:06:06 2022 +0900

    bigint.c (ulshift,urshift): check uzero before actual shifting.
    
    Bit-shifting zero always result in zero.

diff --git a/mrbgems/mruby-bigint/core/bigint.c b/mrbgems/mruby-bigint/core/bigint.c
index dd6674e1f..eaf10abde 100644
--- a/mrbgems/mruby-bigint/core/bigint.c
+++ b/mrbgems/mruby-bigint/core/bigint.c
@@ -360,54 +360,60 @@ static void
 urshift(mrb_state *mrb, mpz_t *c1, mpz_t *a, size_t n)
 {
   mrb_assert(n < DIG_SIZE);
 
   if (n == 0)
     mpz_set(mrb, c1, a);
+  else if (uzero(a)) {
+    mpz_set_int(mrb, c1, 0);
+  }
   else {
     mpz_t c;
     mp_limb cc = 0;
     mp_limb2 rm = (((mp_limb2)1<<n) - 1);
 
     mpz_init(mrb, &c);
     mpz_realloc(mrb, &c, a->sz);
     for (size_t i=a->sz-1;; i--) {
       c.p[i] = ((a->p[i] >> n) | cc) & DIG_MASK;
       cc = (a->p[i] & rm) << (DIG_SIZE - n);
       if (i == 0) break;
     }
     trim(&c);
     mpz_set(mrb, c1, &c);
     mpz_clear(mrb, &c);
   }
 }
 
 /* c1 = a<<n */
 /* n must be < DIG_SIZE */
 static void
 ulshift(mrb_state *mrb, mpz_t *c1, mpz_t *a, size_t n)
 {
-  mp_limb cc = 0;
   mrb_assert(n < DIG_SIZE);
   if (n == 0)
     mpz_set(mrb, c1, a);
+  else if (uzero(a)) {
+    mpz_set_int(mrb, c1, 0);
+  }
   else {
+    mp_limb cc = 0;
     mpz_t c;
     mp_limb rm = (((mp_limb2)1<<n) - 1) << (DIG_SIZE-n);
 
     mpz_init(mrb, &c);
     mpz_realloc(mrb, &c, a->sz+1);
 
     size_t i;
     for (i=0; i<a->sz; i++) {
       c.p[i] = ((a->p[i] << n) | cc) & DIG_MASK;
       cc = (a->p[i] & rm) >> (DIG_SIZE-n);
     }
     c.p[i] = cc;
     trim(&c);
     mpz_set(mrb, c1, &c);
     mpz_clear(mrb, &c);
   }
 }
 
 /* internal routine to compute x/y and x%y ignoring signs */
 /* qq = xx/yy; rr = xx%yy */
