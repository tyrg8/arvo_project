commit 3970faeb7fc8cee60cc5260ab4102433c37d5d63
Author: bobsayshilol <bobsayshilol@live.co.uk>
Date:   Sun Feb 14 13:09:18 2021 +0000

    Make sure that there's enough space to store decoded nibbles in when reading IMA ADPCM data
    
    The loop in wavlike_ima_decode_block() that pulls apart the nibbles
    assumes that there's 8 nibbles worth of data for every channel, so
    rather than adding a branch in the hot path I've opted for allocating
    slightly more than we might need.
    
    This was a blocker caught by fuzzing locally.
    
    This also appears to be the same crash as
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=25530.

diff --git a/src/ima_adpcm.c b/src/ima_adpcm.c
index 8c9bbff3..28c20ca3 100644
--- a/src/ima_adpcm.c
+++ b/src/ima_adpcm.c
@@ -178,75 +178,80 @@ static int
 ima_reader_init (SF_PRIVATE *psf, int blockalign, int samplesperblock)
 {	IMA_ADPCM_PRIVATE	*pima ;
 	int		pimasize, count ;
 
 	if (psf->file.mode != SFM_READ)
 		return SFE_BAD_MODE_RW ;
 
-	pimasize = sizeof (IMA_ADPCM_PRIVATE) + blockalign * psf->sf.channels + 3 * psf->sf.channels * samplesperblock ;
+	/*
+	**	Allocate enough space for 1 more than a multiple of 8 samples
+	**	to avoid having to branch when pulling apart the nibbles.
+	*/
+	count = ((samplesperblock - 2) | 7) + 2 ;
+	pimasize = sizeof (IMA_ADPCM_PRIVATE) + psf->sf.channels * (blockalign + samplesperblock + sizeof(short) * count) ;
 
 	if (! (pima = calloc (1, pimasize)))
 		return SFE_MALLOC_FAILED ;
 
 	psf->codec_data = (void*) pima ;
 
 	pima->samples	= pima->data ;
 	pima->block		= (unsigned char*) (pima->data + samplesperblock * psf->sf.channels) ;
 
 	pima->channels			= psf->sf.channels ;
 	pima->blocksize			= blockalign ;
 	pima->samplesperblock	= samplesperblock ;
 
 	psf->filelength = psf_get_filelen (psf) ;
 	psf->datalength = (psf->dataend) ? psf->dataend - psf->dataoffset :
 							psf->filelength - psf->dataoffset ;
 
 	if (pima->blocksize <= 0)
 	{	psf_log_printf (psf, "*** Error : pima->blocksize should be > 0.\n") ;
 		return SFE_INTERNAL ;
 		} ;
 
 	if (pima->samplesperblock <= 0)
 	{	psf_log_printf (psf, "*** Error : pima->samplesperblock should be > 0.\n") ;
 		return SFE_INTERNAL ;
 		} ;
 
 	if (psf->datalength % pima->blocksize)
 		pima->blocks = psf->datalength / pima->blocksize + 1 ;
 	else
 		pima->blocks = psf->datalength / pima->blocksize ;
 
 	switch (SF_CONTAINER (psf->sf.format))
 	{	case SF_FORMAT_WAV :
 		case SF_FORMAT_W64 :
 				count = 2 * (pima->blocksize - 4 * pima->channels) / pima->channels + 1 ;
 
 				if (pima->samplesperblock != count)
 				{	psf_log_printf (psf, "*** Error : samplesperblock should be %d.\n", count) ;
 					return SFE_INTERNAL ;
 					} ;
 
 				pima->decode_block = wavlike_ima_decode_block ;
 
 				psf->sf.frames = pima->samplesperblock * pima->blocks ;
 				break ;
 
 		case SF_FORMAT_AIFF :
 				psf_log_printf (psf, "still need to check block count\n") ;
 				pima->decode_block = aiff_ima_decode_block ;
 				psf->sf.frames = pima->samplesperblock * pima->blocks / pima->channels ;
 				break ;
 
 		default :
 				psf_log_printf (psf, "ima_reader_init: bad psf->sf.format\n") ;
 				return SFE_INTERNAL ;
 		} ;
 
 	pima->decode_block (psf, pima) ;	/* Read first block. */
 
 	psf->read_short		= ima_read_s ;
 	psf->read_int		= ima_read_i ;
 	psf->read_float		= ima_read_f ;
 	psf->read_double	= ima_read_d ;
 
 	return 0 ;
 } /* ima_reader_init */
