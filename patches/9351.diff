commit 361363f724e59bc2da002cd9cdec05578e1c163b
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Sun Jul 8 10:16:23 2018 +0200

    BitStuffer2::Decode(): prevent index out of bound access. Fixes https://oss-fuzz.com/v2/testcase-detail/5696299335680000. Credit to OSS Fuzz

diff --git a/gdal/third_party/LercLib/BitStuffer2.cpp b/gdal/third_party/LercLib/BitStuffer2.cpp
index aad5265823..9f4e898cc9 100644
--- a/gdal/third_party/LercLib/BitStuffer2.cpp
+++ b/gdal/third_party/LercLib/BitStuffer2.cpp
@@ -158,87 +158,93 @@ bool BitStuffer2::EncodeLut(Byte** ppByte, const vector<pair<unsigned int, unsig
 bool BitStuffer2::Decode(const Byte** ppByte, size_t& nBytesRemaining, vector<unsigned int>& dataVec, int lerc2Version) const
 {
   if (!ppByte || nBytesRemaining < 1)
     return false;
 
   Byte numBitsByte = **ppByte;
   (*ppByte)++;
   nBytesRemaining--;
 
   int bits67 = numBitsByte >> 6;
   int nb = (bits67 == 0) ? 4 : 3 - bits67;
 
   bool doLut = (numBitsByte & (1 << 5)) ? true : false;    // bit 5
   numBitsByte &= 31;    // bits 0-4;
   int numBits = numBitsByte;
 
   unsigned int numElements = 0;
   if (!DecodeUInt(ppByte, nBytesRemaining, numElements, nb))
     return false;
 
   if (!doLut)
   {
     if (numBits > 0)    // numBits can be 0
     {
       if (lerc2Version >= 3)
       {
         if (!BitUnStuff(ppByte, nBytesRemaining, dataVec, numElements, numBits))
           return false;
       }
       else
       {
         if (!BitUnStuff_Before_Lerc2v3(ppByte, nBytesRemaining, dataVec, numElements, numBits))
           return false;
       }
     }
   }
   else
   {
     if (numBits == 0)
       return false;
     if (nBytesRemaining < 1)
       return false;
 
     Byte nLutByte = **ppByte;
     (*ppByte)++;
     nBytesRemaining--;
 
     int nLut = nLutByte - 1;
 
     // unstuff lut w/o the 0
     if (lerc2Version >= 3)
     {
       if (!BitUnStuff(ppByte, nBytesRemaining, m_tmpLutVec, nLut, numBits))
         return false;
     }
     else
     {
       if (!BitUnStuff_Before_Lerc2v3(ppByte, nBytesRemaining, m_tmpLutVec, nLut, numBits))
         return false;
     }
 
     int nBitsLut = 0;
     while (nLut >> nBitsLut)
       nBitsLut++;
 
     // unstuff indexes
     if (lerc2Version >= 3)
     {
       if (!BitUnStuff(ppByte, nBytesRemaining, dataVec, numElements, nBitsLut))
         return false;
     }
     else
     {
       if (!BitUnStuff_Before_Lerc2v3(ppByte, nBytesRemaining, dataVec, numElements, nBitsLut))
         return false;
     }
 
     // replace indexes by values
     m_tmpLutVec.insert(m_tmpLutVec.begin(), 0);    // put back in the 0
     for (unsigned int i = 0; i < numElements; i++)
+    {
+      if( dataVec[i] >= m_tmpLutVec.size() )
+      {
+        return false;
+      }
       dataVec[i] = m_tmpLutVec[dataVec[i]];
+    }
   }
 
   return true;
 }
 
 // -------------------------------------------------------------------------- ;
