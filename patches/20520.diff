commit d589916ebc418acad24c576fd12d21d798d82508
Author: Florin Malita <fmalita@chromium.org>
Date:   Tue Feb 4 10:06:24 2020 -0500

    Potentially-uninitialized Sk3LookAt result
    
    Bug: oss-fuzz:20520
    Change-Id: I383881571fa156c6faa5e798a1e126bb9e5e8dd0
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/268621
    Commit-Queue: Florin Malita <fmalita@chromium.org>
    Reviewed-by: Mike Reed <reed@google.com>

diff --git a/gm/3d.cpp b/gm/3d.cpp
index c1b7c11cd9..cbc664f51c 100644
--- a/gm/3d.cpp
+++ b/gm/3d.cpp
@@ -19,8 +19,10 @@ struct Info {
 };
 
 static SkM44 inv(const SkM44& m) {
-    SkM44 inverse;
-    m.invert(&inverse);
+    SkM44 inverse(SkM44::kUninitialized_Constructor);
+    if (!m.invert(&inverse)) {
+        inverse.setIdentity();
+    }
     return inverse;
 }
 
diff --git a/include/private/SkM44.h b/include/private/SkM44.h
index 3c654e7906..1623e6f79d 100644
--- a/include/private/SkM44.h
+++ b/include/private/SkM44.h
@@ -82,256 +82,256 @@ class SkM44 {
 public:
     SkM44(const SkM44& src) = default;
     SkM44& operator=(const SkM44& src) = default;
 
     constexpr SkM44()
         : fMat{1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1}
         {}
 
     SkM44(const SkM44& a, const SkM44& b) {
         this->setConcat(a, b);
     }
 
     enum Uninitialized_Constructor {
         kUninitialized_Constructor
     };
     SkM44(Uninitialized_Constructor) {}
 
     enum NaN_Constructor {
         kNaN_Constructor
     };
     SkM44(NaN_Constructor)
         : fMat{SK_ScalarNaN, SK_ScalarNaN, SK_ScalarNaN, SK_ScalarNaN,
                SK_ScalarNaN, SK_ScalarNaN, SK_ScalarNaN, SK_ScalarNaN,
                SK_ScalarNaN, SK_ScalarNaN, SK_ScalarNaN, SK_ScalarNaN,
                SK_ScalarNaN, SK_ScalarNaN, SK_ScalarNaN, SK_ScalarNaN}
     {}
 
     /**
      *  Parameters are treated as row-major.
      */
     SkM44(SkScalar m0, SkScalar m4, SkScalar m8,  SkScalar m12,
           SkScalar m1, SkScalar m5, SkScalar m9,  SkScalar m13,
           SkScalar m2, SkScalar m6, SkScalar m10, SkScalar m14,
           SkScalar m3, SkScalar m7, SkScalar m11, SkScalar m15)
     {
         this->set44(m0, m4, m8,  m12,
                     m1, m5, m9,  m13,
                     m2, m6, m10, m14,
                     m3, m7, m11, m15);
     }
 
     static SkM44 Rows(const SkV4& r0, const SkV4& r1, const SkV4& r2, const SkV4& r3) {
         SkM44 m(kUninitialized_Constructor);
         m.setRow(0, r0);
         m.setRow(1, r1);
         m.setRow(2, r2);
         m.setRow(3, r3);
         return m;
     }
     static SkM44 Cols(const SkV4& c0, const SkV4& c1, const SkV4& c2, const SkV4& c3) {
         SkM44 m(kUninitialized_Constructor);
         m.setCol(0, c0);
         m.setCol(1, c1);
         m.setCol(2, c2);
         m.setCol(3, c3);
         return m;
     }
 
     static SkM44 Translate(SkScalar x, SkScalar y, SkScalar z = 0) {
         return SkM44(1, 0, 0, x,
                      0, 1, 0, y,
                      0, 0, 1, z,
                      0, 0, 0, 1);
     }
 
     static SkM44 Scale(SkScalar x, SkScalar y, SkScalar z = 1) {
         return SkM44(x, 0, 0, 0,
                      0, y, 0, 0,
                      0, 0, z, 0,
                      0, 0, 0, 1);
     }
 
     static SkM44 Rotate(SkV3 axis, SkScalar radians) {
         SkM44 m(kUninitialized_Constructor);
         m.setRotate(axis, radians);
         return m;
     }
 
     bool operator==(const SkM44& other) const;
     bool operator!=(const SkM44& other) const {
         return !(other == *this);
     }
 
     void getColMajor(SkScalar v[]) const {
         memcpy(v, fMat, sizeof(fMat));
     }
     void getRowMajor(SkScalar v[]) const;
 
     SkM44& setColMajor(const SkScalar v[]) {
         memcpy(fMat, v, sizeof(fMat));
         return *this;
     }
     SkM44& setRowMajor(const SkScalar v[]);
 
     /* Parameters in same order as constructor.
      */
     SkM44& set44(SkScalar m0, SkScalar m4, SkScalar m8,  SkScalar m12,
                  SkScalar m1, SkScalar m5, SkScalar m9,  SkScalar m13,
                  SkScalar m2, SkScalar m6, SkScalar m10, SkScalar m14,
                  SkScalar m3, SkScalar m7, SkScalar m11, SkScalar m15) {
         fMat[0] = m0; fMat[4] = m4; fMat[8]  = m8;  fMat[12] = m12;
         fMat[1] = m1; fMat[5] = m5; fMat[9]  = m9;  fMat[13] = m13;
         fMat[2] = m2; fMat[6] = m6; fMat[10] = m10; fMat[14] = m14;
         fMat[3] = m3; fMat[7] = m7; fMat[11] = m11; fMat[15] = m15;
         return *this;
     }
 
     SkScalar rc(int r, int c) const {
         SkASSERT(r >= 0 && r <= 3);
         SkASSERT(c >= 0 && c <= 3);
         return fMat[c*4 + r];
     }
     void setRC(int r, int c, SkScalar value) {
         SkASSERT(r >= 0 && r <= 3);
         SkASSERT(c >= 0 && c <= 3);
         fMat[c*4 + r] = value;
     }
 
     SkV4 row(int i) const {
         SkASSERT(i >= 0 && i <= 3);
         return {fMat[i + 0], fMat[i + 4], fMat[i + 8], fMat[i + 12]};
     }
     SkV4 col(int i) const {
         SkASSERT(i >= 0 && i <= 3);
         return {fMat[i*4 + 0], fMat[i*4 + 1], fMat[i*4 + 2], fMat[i*4 + 3]};
     }
 
     void setRow(int i, const SkV4& v) {
         SkASSERT(i >= 0 && i <= 3);
         fMat[i + 0]  = v.x;
         fMat[i + 4]  = v.y;
         fMat[i + 8]  = v.z;
         fMat[i + 12] = v.w;
     }
     void setCol(int i, const SkV4& v) {
         SkASSERT(i >= 0 && i <= 3);
         memcpy(&fMat[i*4], v.ptr(), sizeof(v));
     }
 
     SkM44& setIdentity() {
         return this->set44(1, 0, 0, 0,
                            0, 1, 0, 0,
                            0, 0, 1, 0,
                            0, 0, 0, 1);
     }
 
     SkM44& setTranslate(SkScalar x, SkScalar y, SkScalar z = 0) {
         return this->set44(1, 0, 0, x,
                            0, 1, 0, y,
                            0, 0, 1, z,
                            0, 0, 0, 1);
     }
 
     SkM44& setScale(SkScalar x, SkScalar y, SkScalar z = 1) {
         return this->set44(x, 0, 0, 0,
                            0, y, 0, 0,
                            0, 0, z, 0,
                            0, 0, 0, 1);
     }
 
     /**
      *  Set this matrix to rotate about the specified unit-length axis vector,
      *  by an angle specified by its sin() and cos().
      *
      *  This does not attempt to verify that axis.length() == 1 or that the sin,cos values
      *  are correct.
      */
     SkM44& setRotateUnitSinCos(SkV3 axis, SkScalar sinAngle, SkScalar cosAngle);
 
     /**
      *  Set this matrix to rotate about the specified unit-length axis vector,
      *  by an angle specified in radians.
      *
      *  This does not attempt to verify that axis.length() == 1.
      */
     SkM44& setRotateUnit(SkV3 axis, SkScalar radians) {
         return this->setRotateUnitSinCos(axis, SkScalarSin(radians), SkScalarCos(radians));
     }
 
     /**
      *  Set this matrix to rotate about the specified axis vector,
      *  by an angle specified in radians.
      *
      *  Note: axis is not assumed to be unit-length, so it will be normalized internally.
      *        If axis is already unit-length, call setRotateAboutUnitRadians() instead.
      */
     SkM44& setRotate(SkV3 axis, SkScalar radians);
 
     SkM44& setConcat16(const SkM44& a, const SkScalar colMajor[16]);
 
     SkM44& setConcat(const SkM44& a, const SkM44& b) {
         return this->setConcat16(a, b.fMat);
     }
 
     friend SkM44 operator*(const SkM44& a, const SkM44& b) {
         return SkM44(a, b);
     }
 
     SkM44& preConcat16(const SkScalar colMajor[16]) {
         return this->setConcat16(*this, colMajor);
     }
 
     /** If this is invertible, return that in inverse and return true. If it is
      *  not invertible, return false and leave the inverse parameter unchanged.
      */
-    bool invert(SkM44* inverse) const;
+    bool SK_WARN_UNUSED_RESULT invert(SkM44* inverse) const;
 
     SkM44 transpose() const;
 
     void dump() const;
 
     ////////////
 
     SkV4 map(float x, float y, float z, float w) const;
     SkV4 operator*(const SkV4& v) const {
         return this->map(v.x, v.y, v.z, v.w);
     }
     SkV3 operator*(SkV3 v) const {
         auto v4 = this->map(v.x, v.y, v.z, 0);
         return {v4.x, v4.y, v4.z};
     }
 
     ////////////////////// Converting to/from SkMatrix
 
     /* When converting from SkM44 to SkMatrix, the third row and
      * column is dropped.  When converting from SkMatrix to SkM44
      * the third row and column remain as identity:
      * [ a b c ]      [ a b 0 c ]
      * [ d e f ]  ->  [ d e 0 f ]
      * [ g h i ]      [ 0 0 1 0 ]
      *                [ g h 0 i ]
      */
     SkMatrix asM33() const {
         return SkMatrix::MakeAll(fMat[0], fMat[4], fMat[12],
                                  fMat[1], fMat[5], fMat[13],
                                  fMat[3], fMat[7], fMat[15]);
     }
 
     SkM44(const SkMatrix& src)
     : SkM44(src[SkMatrix::kMScaleX], src[SkMatrix::kMSkewX],  0, src[SkMatrix::kMTransX],
             src[SkMatrix::kMSkewY],  src[SkMatrix::kMScaleY], 0, src[SkMatrix::kMTransY],
             0,                       0,                       1, 0,
             src[SkMatrix::kMPersp0], src[SkMatrix::kMPersp1], 0, src[SkMatrix::kMPersp2])
     {}
 
     SkM44& operator=(const SkMatrix& src) {
         *this = SkM44(src);
         return *this;
     }
 
     SkM44& preTranslate(SkScalar x, SkScalar y);
     SkM44& preScale(SkScalar x, SkScalar y);
     SkM44& preConcat(const SkMatrix&);
diff --git a/samplecode/Sample3D.cpp b/samplecode/Sample3D.cpp
index 6e6305b0b4..5bee8c2b4e 100644
--- a/samplecode/Sample3D.cpp
+++ b/samplecode/Sample3D.cpp
@@ -183,13 +183,15 @@ struct Face {
 };
 
 static bool front(const SkM44& m) {
-    SkM44 m2;
-    m.invert(&m2);
+    SkM44 m2(SkM44::kUninitialized_Constructor);
+    if (!m.invert(&m2)) {
+        m2.setIdentity();
+    }
     /*
      *  Classically we want to dot the transpose(inverse(ctm)) with our surface normal.
      *  In this case, the normal is known to be {0, 0, 1}, so we only actually need to look
      *  at the z-scale of the inverse (the transpose doesn't change the main diagonal, so
      *  no need to actually transpose).
      */
     return m2.rc(2,2) > 0;
 }
diff --git a/src/core/SkM44.cpp b/src/core/SkM44.cpp
index 2c82a0abd7..d0a697424a 100644
--- a/src/core/SkM44.cpp
+++ b/src/core/SkM44.cpp
@@ -293,10 +293,12 @@ static SkV4 v4(SkV3 v, SkScalar w) { return {v.x, v.y, v.z, w}; }
 SkM44 Sk3LookAt(const SkV3& eye, const SkV3& center, const SkV3& up) {
     SkV3 f = normalize(center - eye);
     SkV3 u = normalize(up);
     SkV3 s = normalize(f.cross(u));
 
     SkM44 m(SkM44::kUninitialized_Constructor);
-    (void)SkM44::Cols(v4(s, 0), v4(s.cross(f), 0), v4(-f, 0), v4(eye, 1)).invert(&m);
+    if (!SkM44::Cols(v4(s, 0), v4(s.cross(f), 0), v4(-f, 0), v4(eye, 1)).invert(&m)) {
+        m.setIdentity();
+    }
     return m;
 }
 
