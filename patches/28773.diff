commit 1b96ef4b0dca65c3a0dd65eea26d0e9d8fb3c2db
Author: Evan Miller <emmiller@gmail.com>
Date:   Sat Dec 19 08:24:32 2020 -0500

    Clarify mdb_unicode2ascii API and fix buffer overrun (#220)
    
    There was some confusion as to whether the destination buffer length
    should include space for the null terminator. Some callers of the
    function assumed that a terminator would be added beyond the end
    of the stated buffer size, while others did not. Make everything
    consistent and also fix an overrun when there was insufficient
    space for the output in the non-iconv implementation.
    
    As stated in a code comment, a better solution would follow the lead
    of libxls and use wcstombs and friends when iconv is not available.
    But this gets into the weeds with conversion functions named differently
    across platforms. The goal here is to fix the buffer overrun.
    
    See oss-fuzz/28773

diff --git a/src/libmdb/iconv.c b/src/libmdb/iconv.c
index e212231..84cffb4 100644
--- a/src/libmdb/iconv.c
+++ b/src/libmdb/iconv.c
@@ -1,112 +1,120 @@
 /* MDB Tools - A library for reading MS Access database files
  * Copyright (C) 2000 Brian Bruns
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
  *
  * This library is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  * Library General Public License for more details.
  *
  * You should have received a copy of the GNU Library General Public
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
 #include <errno.h>
 #include "mdbtools.h"
 
 #ifndef MIN
 #define MIN(a,b) (a>b ? b : a)
 #endif
 
 /*
  * This function is used in reading text data from an MDB table.
+ * 'dest' will receive a converted, null-terminated string.
+ * dlen is the available size of the destination buffer.
+ * Returns the length of the converted string, not including the terminator.
  */
 int
 mdb_unicode2ascii(MdbHandle *mdb, const char *src, size_t slen, char *dest, size_t dlen)
 {
 	char *tmp = NULL;
 	size_t tlen = 0;
 	size_t len_in, len_out;
 	const char *in_ptr = NULL;
 	char *out_ptr = NULL;
 
 	if ((!src) || (!dest) || (!dlen))
 		return 0;
 
 	/* Uncompress 'Unicode Compressed' string into tmp */
 	if (!IS_JET3(mdb) && (slen>=2)
 	 && ((src[0]&0xff)==0xff) && ((src[1]&0xff)==0xfe)) {
 		unsigned int compress=1;
 		src += 2;
 		slen -= 2;
 		tmp = (char *)g_malloc(slen*2);
 		while (slen) {
 			if (*src == 0) {
 				compress = (compress) ? 0 : 1;
 				src++;
 				slen--;
 			} else if (compress) {
 				tmp[tlen++] = *src++;
 				tmp[tlen++] = 0;
 				slen--;
 			} else if (slen >= 2){
 				tmp[tlen++] = *src++;
 				tmp[tlen++] = *src++;
 				slen-=2;
+			} else { // Odd # of bytes
+				break;
 			}
 		}
 	}
 
 	in_ptr = (tmp) ? tmp : src;
 	out_ptr = dest;
 	len_in = (tmp) ? tlen : slen;
-	len_out = dlen;
+	len_out = dlen - 1;
 
 #if HAVE_ICONV
 	//printf("1 len_in %d len_out %d\n",len_in, len_out);
 	while (1) {
 		iconv(mdb->iconv_in, (ICONV_CONST char **)&in_ptr, &len_in, &out_ptr, &len_out);
 		/* 
 		 * Have seen database with odd number of bytes in UCS-2, shouldn't happen but protect against it
 		 */
 		if (!IS_JET3(mdb) && len_in<=1) {
 			//fprintf(stderr, "Detected invalid number of UCS-2 bytes\n");
 			break;
 		}
 		if ((!len_in) || (errno == E2BIG)) break;
 		/* Don't bail if impossible conversion is encountered */
 		in_ptr += (IS_JET3(mdb)) ? 1 : 2;
 		len_in -= (IS_JET3(mdb)) ? 1 : 2;
 		*out_ptr++ = '?';
 		len_out--;
 	}
 	//printf("2 len_in %d len_out %d\n",len_in, len_out);
-	dlen -= len_out;
+	dlen -= len_out + 1;
+	dest[dlen] = '\0';
 #else
 	if (IS_JET3(mdb)) {
-		dlen = MIN(len_in, len_out);
-		strncpy(out_ptr, in_ptr, dlen);
+		int count = 0;
+		snprintf(out_ptr, dlen, "%.*s%n", (int)len_in, src, &count);
+		dlen = count;
 	} else {
 		/* rough UCS-2LE to ISO-8859-1 conversion */
+		/* wcstombs would be better; see libxls implementation for 
+		 * a multi-platform solution */
 		unsigned int i;
-		for (i=0; i<len_in; i+=2)
-			dest[i/2] = (in_ptr[i+1] == 0) ? in_ptr[i] : '?';
-		dlen = len_in/2;
+		for (i=0; 2*i+1<len_in && i<dlen-1; i++)
+			dest[i] = (in_ptr[2*i+1] == 0) ? in_ptr[2*i] : '?';
+		dest[(dlen=i)] = '\0';
 	}
 #endif
 
 	if (tmp) g_free(tmp);
-	dest[dlen]='\0';
 	//printf("dest %s\n",dest);
 	return dlen;
 }
 
 /*
  * This function is used in writing text data to an MDB table.
  * If slen is 0, strlen will be used to calculate src's length.
  */
diff --git a/src/libmdb/props.c b/src/libmdb/props.c
index aabe9ec..cef3ea5 100644
--- a/src/libmdb/props.c
+++ b/src/libmdb/props.c
@@ -22,31 +22,31 @@ static GPtrArray *
 mdb_read_props_list(MdbHandle *mdb, gchar *kkd, int len)
 {
 	guint32 record_len;
 	int pos = 0;
 	gchar *name;
 	GPtrArray *names = NULL;
 	int i=0;
 
 	names = g_ptr_array_new();
 #if MDB_DEBUG
 	mdb_buffer_dump(kkd, 0, len);
 #endif
 	pos = 0;
 	while (pos < len) {
 		record_len = mdb_get_int16(kkd, pos);
 		pos += 2;
 		if (mdb_get_option(MDB_DEBUG_PROPS)) {
 			fprintf(stderr, "%02d ",i++);
 			mdb_buffer_dump(kkd, pos - 2, record_len + 2);
 		}
 		name = g_malloc(3*record_len + 1); /* worst case scenario is 3 bytes out per byte in */
-		mdb_unicode2ascii(mdb, &kkd[pos], record_len, name, 3*record_len);
+		mdb_unicode2ascii(mdb, &kkd[pos], record_len, name, 3*record_len + 1);
 
 		pos += record_len;
 		g_ptr_array_add(names, name);
 #if MDB_DEBUG
 		printf("new len = %d\n", names->len);
 #endif
 	}
 	return names;
 }
@@ -88,64 +88,64 @@ static MdbProperties *
 mdb_read_props(MdbHandle *mdb, GPtrArray *names, gchar *kkd, int len)
 {
 	guint32 record_len, name_len;
 	int pos = 0;
 	guint elem;
 	int dtype, dsize;
 	gchar *name, *value;
 	MdbProperties *props;
 	int i=0;
 
 #if MDB_DEBUG
 	mdb_buffer_dump(kkd, 0, len);
 #endif
 	pos = 0;
 
 	record_len = mdb_get_int16(kkd, pos);
 	pos += 4;
 	name_len = mdb_get_int16(kkd, pos);
 	pos += 2;
 	props = mdb_alloc_props();
 	if (name_len) {
 		props->name = g_malloc(3*name_len + 1);
-		mdb_unicode2ascii(mdb, kkd+pos, name_len, props->name, 3*name_len);
+		mdb_unicode2ascii(mdb, kkd+pos, name_len, props->name, 3*name_len + 1);
 		mdb_debug(MDB_DEBUG_PROPS,"prop block named: %s", props->name);
 	}
 	pos += name_len;
 
 	props->hash = g_hash_table_new(g_str_hash, g_str_equal);
 
 	while (pos < len) {
 		record_len = mdb_get_int16(kkd, pos);
 		dtype = kkd[pos + 3];
 		elem = mdb_get_int16(kkd, pos + 4);
 		if (elem < 0 || elem >= names->len)
 			break;
 		dsize = mdb_get_int16(kkd, pos + 6);
 		if (dsize < 0 || pos + 8 + dsize > len)
 			break;
 		value = g_malloc(dsize + 1);
 		strncpy(value, &kkd[pos + 8], dsize);
 		value[dsize] = '\0';
 		name = g_ptr_array_index(names,elem);
 		if (mdb_get_option(MDB_DEBUG_PROPS)) {
 			fprintf(stderr, "%02d ",i++);
 			mdb_debug(MDB_DEBUG_PROPS,"elem %d (%s) dsize %d dtype %d", elem, name, dsize, dtype);
 			mdb_buffer_dump(value, 0, dsize);
 		}
 		if (dtype == MDB_MEMO) dtype = MDB_TEXT;
 		if (dtype == MDB_BOOL) {
 			g_hash_table_insert(props->hash, g_strdup(name),
 				g_strdup(kkd[pos + 8] ? "yes" : "no"));
         } else if (dtype == MDB_BINARY && dsize == 16 && strcmp(name, "GUID") == 0) {
             gchar *guid = mdb_uuid_to_string(kkd, pos+8);
 			g_hash_table_insert(props->hash, g_strdup(name), guid);
 		} else {
 			g_hash_table_insert(props->hash, g_strdup(name),
 			  mdb_col_to_string(mdb, kkd, pos + 8, dtype, dsize));
 		}
 		g_free(value);
 		pos += record_len;
 	}
 	return props;
 	
 }
diff --git a/src/libmdb/sargs.c b/src/libmdb/sargs.c
index 656d5bb..bc53e07 100644
--- a/src/libmdb/sargs.c
+++ b/src/libmdb/sargs.c
@@ -210,48 +210,48 @@ int
 mdb_test_sarg(MdbHandle *mdb, MdbColumn *col, MdbSargNode *node, MdbField *field)
 {
 	char tmpbuf[256];
 	char* val;
 	int ret = 1;
 
 	if (node->op == MDB_ISNULL)
 		ret = field->is_null;
 	else if (node->op == MDB_NOTNULL)
 		ret = !field->is_null;
 	switch (col->col_type) {
 		case MDB_BOOL:
 			ret = mdb_test_int(node, !field->is_null);
 			break;
 		case MDB_BYTE:
 			ret = mdb_test_int(node, (gint32)((char *)field->value)[0]);
 			break;
 		case MDB_INT:
 			ret = mdb_test_int(node, (gint32)mdb_get_int16(field->value, 0));
 			break;
 		case MDB_LONGINT:
 			ret = mdb_test_int(node, (gint32)mdb_get_int32(field->value, 0));
 			break;
 		case MDB_FLOAT:
 			ret = mdb_test_double(node->op, node->value.d, mdb_get_single(field->value, 0));
 			break;
 		case MDB_DOUBLE:
 			ret = mdb_test_double(node->op, node->value.d, mdb_get_double(field->value, 0));
 			break;
 		case MDB_TEXT:
-			mdb_unicode2ascii(mdb, field->value, field->siz, tmpbuf, 256);
+			mdb_unicode2ascii(mdb, field->value, field->siz, tmpbuf, sizeof(tmpbuf));
 			ret = mdb_test_string(node, tmpbuf);
 			break;
 		case MDB_MEMO:
 			val = mdb_col_to_string(mdb, mdb->pg_buf, field->start, col->col_type, (gint32)mdb_get_int32(field->value, 0));
 			//printf("%s\n",val);
 			ret = mdb_test_string(node, val);
 			g_free(val);
 			break;
 		case MDB_DATETIME:
 			ret = mdb_test_double(node->op, poor_mans_trunc(node->value.d), poor_mans_trunc(mdb_get_double(field->value, 0)));
 			break;
 		default:
 			fprintf(stderr, "Calling mdb_test_sarg on unknown type.  Add code to mdb_test_sarg() for type %d\n",col->col_type);
 			break;
 	}
 	return ret;
 }
diff --git a/src/libmdb/table.c b/src/libmdb/table.c
index bf9c2f1..651109f 100644
--- a/src/libmdb/table.c
+++ b/src/libmdb/table.c
@@ -207,125 +207,125 @@ void mdb_free_columns(GPtrArray *columns)
 	if (!columns) return;
 	for (i=0; i<columns->len; i++) {
 		col = (MdbColumn *) g_ptr_array_index(columns, i);
 		if (col->sargs) {
 			for (j=0; j<col->sargs->len; j++) {
 				g_free( g_ptr_array_index(col->sargs, j));
 			}
 			g_ptr_array_free(col->sargs, TRUE);
 		}
 		g_free(col);
 	}
 	g_ptr_array_free(columns, TRUE);
 }
 GPtrArray *mdb_read_columns(MdbTableDef *table)
 {
 	MdbHandle *mdb = table->entry->mdb;
 	MdbFormatConstants *fmt = mdb->fmt;
 	MdbColumn *pcol;
 	unsigned char *col;
 	unsigned int i;
 	guint j;
 	int cur_pos;
 	size_t name_sz;
 	GPtrArray *allprops;
 	
 	table->columns = g_ptr_array_new();
 
 	col = (unsigned char *) g_malloc(fmt->tab_col_entry_size);
 
 	cur_pos = fmt->tab_cols_start_offset + 
 		(table->num_real_idxs * fmt->tab_ridx_entry_size);
 
 	/* new code based on patch submitted by Tim Nelson 2000.09.27 */
 
 	/* 
 	** column attributes 
 	*/
 	for (i=0;i<table->num_cols;i++) {
 #ifdef MDB_DEBUG
 	/* printf("column %d\n", i);
 	mdb_buffer_dump(mdb->pg_buf, cur_pos, fmt->tab_col_entry_size); */
 #endif
 		read_pg_if_n(mdb, col, &cur_pos, fmt->tab_col_entry_size);
 		pcol = (MdbColumn *) g_malloc0(sizeof(MdbColumn));
 
 		pcol->table = table;
 
 		pcol->col_type = col[0];
 
 		// col_num_offset == 1 or 5
 		pcol->col_num = col[fmt->col_num_offset];
 
 		//fprintf(stdout,"----- column %d -----\n",pcol->col_num);
 		// col_var == 3 or 7
 		pcol->var_col_num = mdb_get_int16(col, fmt->tab_col_offset_var);
 		//fprintf(stdout,"var column pos %d\n",pcol->var_col_num);
 
 		// col_var == 5 or 9
 		pcol->row_col_num = mdb_get_int16(col, fmt->tab_row_col_num_offset);
 		//fprintf(stdout,"row column num %d\n",pcol->row_col_num);
 
 		/* FIXME: can this be right in Jet3 and Jet4? */
 		if (pcol->col_type == MDB_NUMERIC) {
 			pcol->col_scale = col[11];
 			pcol->col_prec = col[12];
 		}
 
 		// col_flags_offset == 13 or 15
 		pcol->is_fixed = col[fmt->col_flags_offset] & 0x01 ? 1 : 0;
 		pcol->is_long_auto = col[fmt->col_flags_offset] & 0x04 ? 1 : 0;
 		pcol->is_uuid_auto = col[fmt->col_flags_offset] & 0x40 ? 1 : 0;
 
 		// tab_col_offset_fixed == 14 or 21
 		pcol->fixed_offset = mdb_get_int16(col, fmt->tab_col_offset_fixed);
 		//fprintf(stdout,"fixed column offset %d\n",pcol->fixed_offset);
 		//fprintf(stdout,"col type %s\n",pcol->is_fixed ? "fixed" : "variable");
 
 		if (pcol->col_type != MDB_BOOL) {
 			// col_size_offset == 16 or 23
 			pcol->col_size = mdb_get_int16(col, fmt->col_size_offset);
 		} else {
 			pcol->col_size=0;
 		}
 		
 		g_ptr_array_add(table->columns, pcol);
 	}
 
 	g_free (col);
 
 	/* 
 	** column names - ordered the same as the column attributes table
 	*/
 	for (i=0;i<table->num_cols;i++) {
 		char *tmp_buf;
 		pcol = g_ptr_array_index(table->columns, i);
 
 		if (IS_JET3(mdb))
 			name_sz = read_pg_if_8(mdb, &cur_pos);
 		else
 			name_sz = read_pg_if_16(mdb, &cur_pos);
 		tmp_buf = (char *) g_malloc(name_sz);
 		read_pg_if_n(mdb, tmp_buf, &cur_pos, name_sz);
-		mdb_unicode2ascii(mdb, tmp_buf, name_sz, pcol->name, MDB_MAX_OBJ_NAME);
+		mdb_unicode2ascii(mdb, tmp_buf, name_sz, pcol->name, sizeof(pcol->name));
 		g_free(tmp_buf);
 	}
 
 	/* Sort the columns by col_num */
 	g_ptr_array_sort(table->columns, (GCompareFunc)mdb_col_comparer);
 
 	allprops = table->entry->props;
 	if (allprops)
 		for (i=0;i<table->num_cols;i++) {
 			pcol = g_ptr_array_index(table->columns, i);
 			for (j=0; j<allprops->len; ++j) {
 				MdbProperties *props = g_ptr_array_index(allprops, j);
 				if (props->name && !strcmp(props->name, pcol->name)) {
 					pcol->props = props;
 					break;
 				}
 
 			}
 		}
 	table->index_start = cur_pos;
 	return table->columns;
 }
