commit 0974bb6283fc09841888bcd8fc9f1c870be2b6ef
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Wed Jun 20 11:36:35 2018 +0200

    RMF: prevent crash on invalid JPEG codestream. master only. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=8974. Credit to OSS Fuzz

diff --git a/gdal/frmts/rmf/rmfjpeg.cpp b/gdal/frmts/rmf/rmfjpeg.cpp
index 64a64b9785..c4ebf5b637 100644
--- a/gdal/frmts/rmf/rmfjpeg.cpp
+++ b/gdal/frmts/rmf/rmfjpeg.cpp
@@ -35,6 +35,7 @@
 #include <setjmp.h>
 CPL_C_START
 #include <jpeglib.h>
+#include <jerror.h>
 CPL_C_END
 
 
@@ -71,7 +72,22 @@ static void RMFJPEGError(j_common_ptr poInfo)
 static void RMFJPEGNoop(j_decompress_ptr)
 {
 }
 
+
+/**
+*\brief: This function is supposed to do refilling of the input buffer,
+* but as we provided everything at the beginning, if it is called, then
+* we have an error.
+*/
+static boolean RMFJPEG_fill_input_buffer_dec(j_decompress_ptr cinfo)
+{
+    CPLError(CE_Failure, CPLE_AppDefined, "Invalid JPEG stream");
+    cinfo->err->msg_code = JERR_INPUT_EMPTY;
+    cinfo->err->error_exit((j_common_ptr)(cinfo));
+    return FALSE;
+}
+
+
 /************************************************************************/
 /*                          JPEGDecompress()                            */
 /************************************************************************/
@@ -79,114 +95,115 @@ static void RMFJPEGNoop(j_decompress_ptr)
 int RMFDataset::JPEGDecompress(const GByte* pabyIn, GUInt32 nSizeIn,
                                GByte* pabyOut, GUInt32 nSizeOut,
                                GUInt32 nRawXSize, GUInt32 nRawYSize)
 {
     if(pabyIn == nullptr ||
        pabyOut == nullptr ||
        nSizeOut < nSizeIn ||
        nSizeIn < 2)
        return 0;
 
     jpeg_decompress_struct  oJpegInfo;
     jpeg_source_mgr         oSrc;
     jpeg_error_mgr          oJpegErr;
     jmp_buf                 oJmpBuf;
 
     oJpegInfo.err = jpeg_std_error(&oJpegErr);
     oJpegErr.error_exit = RMFJPEGError;
     oJpegErr.emit_message = RMFJPEGMessage;
     oJpegInfo.client_data = reinterpret_cast<void*>(&oJmpBuf);
 
     memset(&oSrc, 0, sizeof(jpeg_source_mgr));
 
     oSrc.next_input_byte = (JOCTET *)pabyIn;
     oSrc.bytes_in_buffer = (size_t)nSizeIn;
     oSrc.term_source = RMFJPEGNoop;
     oSrc.init_source = RMFJPEGNoop;
+    oSrc.fill_input_buffer = RMFJPEG_fill_input_buffer_dec;
 
     jpeg_create_decompress(&oJpegInfo);
 
     memset(&oJmpBuf, 0, sizeof(jmp_buf));
 
     if(setjmp(oJmpBuf))
     {
         CPLError(CE_Failure, CPLE_AppDefined,
                  "RMF JPEG: Error decompress JPEG tile");
         jpeg_destroy_decompress(&oJpegInfo);
         return 0;
     }
 
     oJpegInfo.src = &oSrc;
     jpeg_read_header(&oJpegInfo, TRUE);
 
     if(oJpegInfo.num_components != RMF_JPEG_BAND_COUNT)
     {
         CPLError(CE_Failure, CPLE_AppDefined,
                  "RMF JPEG: Invalid num_components %d in tile, must be %d",
                  (int)oJpegInfo.num_components, (int)RMF_JPEG_BAND_COUNT);
         jpeg_destroy_decompress(&oJpegInfo);
         return 0;
     }
 
     oJpegInfo.dct_method = JDCT_FLOAT;
     oJpegInfo.out_color_space = JCS_RGB;
 
     jpeg_start_decompress(&oJpegInfo);
 
     JDIMENSION  nImageHeight = std::min(oJpegInfo.image_height,
                                         (JDIMENSION)nRawYSize);
     int         nRawScanLineSize = nRawXSize *
                                    oJpegInfo.num_components;
     GByte*      pabyScanline = nullptr;
 
     if((JDIMENSION)nRawXSize < oJpegInfo.image_width)
     {
         pabyScanline = reinterpret_cast<GByte *>(
                 VSIMalloc(oJpegInfo.num_components*
                           oJpegInfo.image_width));
         if(!pabyScanline)
         {
             CPLError( CE_Failure, CPLE_OutOfMemory,
                       "Can't allocate scanline buffer %d.",
                       (int)oJpegInfo.num_components*
                       oJpegInfo.image_width);
             jpeg_destroy_decompress(&oJpegInfo);
             return 0;
         }
     }
 
     while(oJpegInfo.output_scanline < nImageHeight)
     {
         JSAMPROW    pabyBuffer[1];
 
         if(pabyScanline)
         {
             pabyBuffer[0] = (JSAMPROW)pabyScanline;
         }
         else
         {
             pabyBuffer[0] = (JSAMPROW)pabyOut +
                             nRawScanLineSize*oJpegInfo.output_scanline;
         }
 
         if(jpeg_read_scanlines(&oJpegInfo, pabyBuffer, 1) == 0)
         {
             jpeg_destroy_decompress(&oJpegInfo);
             VSIFree(pabyScanline);
             return 0;
         }
 
         if(pabyScanline)
         {
             memcpy(pabyOut + nRawScanLineSize*(oJpegInfo.output_scanline - 1),
                    pabyScanline, nRawScanLineSize);
         }
     }
 
     VSIFree(pabyScanline);
     jpeg_finish_decompress(&oJpegInfo);
     jpeg_destroy_decompress(&oJpegInfo);
 
     return oJpegInfo.output_scanline*nRawScanLineSize;
 }
 
 #endif //HAVE_LIBJPEG
