commit a7f2474c5aaac7a75a4119478c77d2cafcf45b85
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Tue Dec 14 14:14:15 2021 +0000

    oss-fuzz 42329: Bounds check a buffer before copying into it.
    
    for a debug message.

diff --git a/pdf/pdf_annot.c b/pdf/pdf_annot.c
index 2044d1b71..3f458674c 100644
--- a/pdf/pdf_annot.c
+++ b/pdf/pdf_annot.c
@@ -3848,58 +3848,58 @@ static bool pdfi_annot_preserve_type(pdf_context *ctx, pdf_name *subtype)
 static int pdfi_annot_draw(pdf_context *ctx, pdf_dict *annot, pdf_name *subtype)
 {
     pdf_obj *NormAP = NULL;
     int code = 0;
     annot_dispatch_t *dispatch_ptr;
     bool render_done = true;
 
     /* See if annotation is visible */
     if (!pdfi_annot_visible(ctx, annot, subtype))
         goto exit;
 
     /* See if we are rendering this type of annotation */
     if (!pdfi_annot_check_type(ctx, subtype))
         goto exit;
 
     /* Get the Normal AP, if it exists */
     code = pdfi_annot_get_NormAP(ctx, annot, &NormAP);
     if (code < 0) goto exit;
 
     code = pdfi_gsave(ctx);
     if (code < 0) goto exit;
 
     /* Draw the annotation */
     for (dispatch_ptr = annot_dispatch; dispatch_ptr->subtype; dispatch_ptr ++) {
         if (pdfi_name_is(subtype, dispatch_ptr->subtype)) {
             if (NormAP && dispatch_ptr->simpleAP)
                 render_done = false;
             else
                 code = dispatch_ptr->func(ctx, annot, NormAP, &render_done);
             break;
         }
     }
     if (!dispatch_ptr->subtype) {
         char str[100];
-        memcpy(str, (const char *)subtype->data, subtype->length);
-        str[subtype->length] = '\0';
+        memcpy(str, (const char *)subtype->data, subtype->length < 100 ? subtype->length : 99);
+        str[subtype->length < 100 ? subtype->length : 99] = '\0';
         dbgmprintf1(ctx->memory, "ANNOT: No handler for subtype %s\n", str);
 
         /* Not necessarily an error? We can just render the AP if there is one */
         render_done = false;
     }
 
     if (!render_done)
         code = pdfi_annot_draw_AP(ctx, annot, NormAP);
 
     (void)pdfi_grestore(ctx);
 
  exit:
     pdfi_countdown(NormAP);
     return code;
 }
 
 /* Create a string containing form label
  * I don't think the format actually matters, though it probably needs to be unique
  * Just use a counter to ensure uniqueness
  *
  * Format: {FormName%d}
  */
