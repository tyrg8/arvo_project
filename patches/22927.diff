commit 920a25803c6872b2b11b776b4fdefd5043ab40f1
Author: Ingo Berg <github_contact@beltoforion.de>
Date:   Mon Jun 8 22:03:32 2020 +0200

    fixed bugs found by oss-fuzz

diff --git a/Changes.txt b/Changes.txt
index 6a8e082..5cf4e46 100644
--- a/Changes.txt
+++ b/Changes.txt
@@ -14,16 +14,18 @@
 History:
 --------
 
-Rev 2.2.7: xx.xx.2020
+Rev 2.2.7: 08.06.2020
 ---------------------
   Changes:
    * using OpenMP is now the default settings for cmake based builds
    * introduced a maximum length for expressions (5000 Character)
    * introduced a maximum length for identifiers (100 Characters)
+   * removed the MUP_MATH_EXCEPTION macro and related functionality. (No more C++ exceptions for divide by zero or sqrt of a negative number)
 
   Bugfixes:
    * Fixed an issue where the bulk mode could hang on GCC/CLANG builds due to OpenMP chunksize dropping below 1.
    * Added additional runtime checks for release builds to prevent segmentation faults for invalid expressions
+   * Prevented access violation for malformed expressions with if then else and function taking multiple arguments "sum(0?1,2,3,4:5)"
 
 Rev 2.2.5: 27.04.2015
 ---------------------
diff --git a/include/muParserBase.h b/include/muParserBase.h
index fcfdef2..4c1fb2f 100644
--- a/include/muParserBase.h
+++ b/include/muParserBase.h
@@ -48,272 +48,272 @@
 namespace mu
 {
 	/** \file
 		\brief This file contains the class definition of the muparser engine.
 	*/
 
 	//--------------------------------------------------------------------------------------------------
 	/** \brief Mathematical expressions parser (base parser engine).
 		\author (C) 2013 Ingo Berg
 
 	  This is the implementation of a bytecode based mathematical expressions parser.
 	  The formula will be parsed from string and converted into a bytecode.
 	  Future calculations will be done with the bytecode instead the formula string
 	  resulting in a significant performance increase.
 	  Complementary to a set of internally implemented functions the parser is able to handle
 	  user defined functions and variables.
 	*/
 	class API_EXPORT_CXX ParserBase
 	{
 		friend class ParserTokenReader;
 
 	private:
 
 		/** \brief Typedef for the parse functions.
 
 		  The parse function do the actual work. The parser exchanges
 		  the function pointer to the parser function depending on
 		  which state it is in. (i.e. bytecode parser vs. string parser)
 		*/
 		typedef value_type(ParserBase::* ParseFunction)() const;
 
 		/** \brief Type used for storing an array of values. */
 		typedef std::vector<value_type> valbuf_type;
 
 		/** \brief Type for a vector of strings. */
 		typedef std::vector<string_type> stringbuf_type;
 
 		/** \brief Typedef for the token reader. */
 		typedef ParserTokenReader token_reader_type;
 
 		/** \brief Type used for parser tokens. */
 		typedef ParserToken<value_type, string_type> token_type;
 
 		/** \brief Maximum number of threads spawned by OpenMP when using the bulk mode. */
 		static const int s_MaxNumOpenMPThreads;
 
 	public:
 
 		/** \brief Type of the error class.
 
 		  Included for backwards compatibility.
 		*/
 		typedef ParserError exception_type;
 
 		static void EnableDebugDump(bool bDumpCmd, bool bDumpStack);
 
 		ParserBase();
 		ParserBase(const ParserBase& a_Parser);
 		ParserBase& operator=(const ParserBase& a_Parser);
 
 		virtual ~ParserBase();
 
 		value_type  Eval() const;
 		value_type* Eval(int& nStackSize) const;
 		void Eval(value_type* results, int nBulkSize);
 
 		int GetNumResults() const;
 
 		void SetExpr(const string_type& a_sExpr);
-		void SetVarFactory(facfun_type a_pFactory, void* pUserData = NULL);
+		void SetVarFactory(facfun_type a_pFactory, void* pUserData = nullptr);
 
 		void SetDecSep(char_type cDecSep);
 		void SetThousandsSep(char_type cThousandsSep = 0);
 		void ResetLocale();
 
 		void EnableOptimizer(bool a_bIsOn = true);
 		void EnableBuiltInOprt(bool a_bIsOn = true);
 
 		bool HasBuiltInOprt() const;
 		void AddValIdent(identfun_type a_pCallback);
 
 		/** \fn void mu::ParserBase::DefineFun(const string_type &a_strName, fun_type0 a_pFun, bool a_bAllowOpt = true)
 			\brief Define a parser function without arguments.
 			\param a_strName Name of the function
 			\param a_pFun Pointer to the callback function
 			\param a_bAllowOpt A flag indicating this function may be optimized
 		*/
 		template<typename T>
 		void DefineFun(const string_type& a_strName, T a_pFun, bool a_bAllowOpt = true)
 		{
 			AddCallback(a_strName, ParserCallback(a_pFun, a_bAllowOpt), m_FunDef, ValidNameChars());
 		}
 
 		void DefineOprt(const string_type& a_strName,
 			fun_type2 a_pFun,
 			unsigned a_iPri = 0,
 			EOprtAssociativity a_eAssociativity = oaLEFT,
 			bool a_bAllowOpt = false);
 		void DefineConst(const string_type& a_sName, value_type a_fVal);
 		void DefineStrConst(const string_type& a_sName, const string_type& a_strVal);
 		void DefineVar(const string_type& a_sName, value_type* a_fVar);
 		void DefinePostfixOprt(const string_type& a_strFun, fun_type1 a_pOprt, bool a_bAllowOpt = true);
 		void DefineInfixOprt(const string_type& a_strName, fun_type1 a_pOprt, int a_iPrec = prINFIX, bool a_bAllowOpt = true);
 
 		// Clear user defined variables, constants or functions
 		void ClearVar();
 		void ClearFun();
 		void ClearConst();
 		void ClearInfixOprt();
 		void ClearPostfixOprt();
 		void ClearOprt();
 
 		void RemoveVar(const string_type& a_strVarName);
 		const varmap_type& GetUsedVar() const;
 		const varmap_type& GetVar() const;
 		const valmap_type& GetConst() const;
 		const string_type& GetExpr() const;
 		const funmap_type& GetFunDef() const;
 		string_type GetVersion(EParserVersionInfo eInfo = pviFULL) const;
 
 		const char_type** GetOprtDef() const;
 		void DefineNameChars(const char_type* a_szCharset);
 		void DefineOprtChars(const char_type* a_szCharset);
 		void DefineInfixOprtChars(const char_type* a_szCharset);
 
 		const char_type* ValidNameChars() const;
 		const char_type* ValidOprtChars() const;
 		const char_type* ValidInfixOprtChars() const;
 
 		void SetArgSep(char_type cArgSep);
 		char_type GetArgSep() const;
 
 		void  Error(EErrorCodes a_iErrc,
 			int a_iPos = (int)mu::string_type::npos,
 			const string_type& a_strTok = string_type()) const;
 
 	protected:
 
 		void Init();
 
 		virtual void InitCharSets() = 0;
 		virtual void InitFun() = 0;
 		virtual void InitConst() = 0;
 		virtual void InitOprt() = 0;
 
 		virtual void OnDetectVar(string_type* pExpr, int& nStart, int& nEnd);
 
 		static const char_type* c_DefaultOprt[];
 		static std::locale s_locale;  ///< The locale used by the parser
 		static bool g_DbgDumpCmdCode;
 		static bool g_DbgDumpStack;
 
 		/** \brief A facet class used to change decimal and thousands separator. */
 		template<class TChar>
 		class change_dec_sep : public std::numpunct<TChar>
 		{
 		public:
 
 			explicit change_dec_sep(char_type cDecSep, char_type cThousandsSep = 0, int nGroup = 3)
 				:std::numpunct<TChar>()
 				, m_nGroup(nGroup)
 				, m_cDecPoint(cDecSep)
 				, m_cThousandsSep(cThousandsSep)
 			{}
 
 		protected:
 
 			virtual char_type do_decimal_point() const
 			{
 				return m_cDecPoint;
 			}
 
 			virtual char_type do_thousands_sep() const
 			{
 				return m_cThousandsSep;
 			}
 
 			virtual std::string do_grouping() const
 			{
 				// fix for issue 4: https://code.google.com/p/muparser/issues/detail?id=4
 				// courtesy of Jens Bartsch
 				// original code:
 				//        return std::string(1, (char)m_nGroup); 
 				// new code:
 				return std::string(1, (char)(m_cThousandsSep > 0 ? m_nGroup : CHAR_MAX));
 			}
 
 		private:
 
 			int m_nGroup;
 			char_type m_cDecPoint;
 			char_type m_cThousandsSep;
 		};
 
 	private:
 
 		void Assign(const ParserBase& a_Parser);
 		void InitTokenReader();
 		void ReInit() const;
 
 		void AddCallback(const string_type& a_strName,
 			const ParserCallback& a_Callback,
 			funmap_type& a_Storage,
 			const char_type* a_szCharSet);
 
 		void ApplyRemainingOprt(ParserStack<token_type>& a_stOpt,
 			ParserStack<token_type>& a_stVal) const;
 		void ApplyBinOprt(ParserStack<token_type>& a_stOpt,
 			ParserStack<token_type>& a_stVal) const;
 
 		void ApplyIfElse(ParserStack<token_type>& a_stOpt,
 			ParserStack<token_type>& a_stVal) const;
 
 		void ApplyFunc(ParserStack<token_type>& a_stOpt,
 			ParserStack<token_type>& a_stVal,
 			int iArgCount) const;
 
 		token_type ApplyStrFunc(const token_type& a_FunTok,
 			const std::vector<token_type>& a_vArg) const;
 
 		int GetOprtPrecedence(const token_type& a_Tok) const;
 		EOprtAssociativity GetOprtAssociativity(const token_type& a_Tok) const;
 
 		void CreateRPN() const;
 
 		value_type ParseString() const;
 		value_type ParseCmdCode() const;
 		value_type ParseCmdCodeBulk(int nOffset, int nThreadID) const;
 
 		void  CheckName(const string_type& a_strName, const string_type& a_CharSet) const;
 		void  CheckOprt(const string_type& a_sName,
 			const ParserCallback& a_Callback,
 			const string_type& a_szCharSet) const;
 
 		void StackDump(const ParserStack<token_type >& a_stVal,
 			const ParserStack<token_type >& a_stOprt) const;
 
 		/** \brief Pointer to the parser function.
 
 		  Eval() calls the function whose address is stored there.
 		*/
 		mutable ParseFunction  m_pParseFormula;
 		mutable ParserByteCode m_vRPN;        ///< The Bytecode class.
 		mutable stringbuf_type  m_vStringBuf; ///< String buffer, used for storing string function arguments
 		stringbuf_type  m_vStringVarBuf;
 
 		std::unique_ptr<token_reader_type> m_pTokenReader; ///< Managed pointer to the token reader object.
 
 		funmap_type  m_FunDef;         ///< Map of function names and pointers.
 		funmap_type  m_PostOprtDef;    ///< Postfix operator callbacks
 		funmap_type  m_InfixOprtDef;   ///< unary infix operator.
 		funmap_type  m_OprtDef;        ///< Binary operator callbacks
 		valmap_type  m_ConstDef;       ///< user constants.
 		strmap_type  m_StrVarDef;      ///< user defined string constants
 		varmap_type  m_VarDef;         ///< user defind variables.
 
 		bool m_bBuiltInOp;             ///< Flag that can be used for switching built in operators on and off
 
 		string_type m_sNameChars;      ///< Charset for names
 		string_type m_sOprtChars;      ///< Charset for postfix/ binary operator tokens
 		string_type m_sInfixOprtChars; ///< Charset for infix operator tokens
 
 		mutable int m_nIfElseCounter;  ///< Internal counter for keeping track of nested if-then-else clauses
 
 		// items merely used for caching state information
 		mutable valbuf_type m_vStackBuffer; ///< This is merely a buffer used for the stack in the cmd parsing routine
 		mutable int m_nFinalResultIdx;
 	};
 
 } // namespace mu
 
 #endif
diff --git a/include/muParserDef.h b/include/muParserDef.h
index 08ca28a..3ea718e 100644
--- a/include/muParserDef.h
+++ b/include/muParserDef.h
@@ -1,100 +1,98 @@
 /*
 				 __________
 	_____   __ __\______   \_____  _______  ______  ____ _______
    /     \ |  |  \|     ___/\__  \ \_  __ \/  ___/_/ __ \\_  __ \
   |  Y Y  \|  |  /|    |     / __ \_|  | \/\___ \ \  ___/ |  | \/
   |__|_|  /|____/ |____|    (____  /|__|  /____  > \___  >|__|
 		\/                       \/            \/      \/
   Copyright (C) 2004 - 2020 Ingo Berg
 
 	Redistribution and use in source and binary forms, with or without modification, are permitted
 	provided that the following conditions are met:
 
 	  * Redistributions of source code must retain the above copyright notice, this list of
 		conditions and the following disclaimer.
 	  * Redistributions in binary form must reproduce the above copyright notice, this list of
 		conditions and the following disclaimer in the documentation and/or other materials provided
 		with the distribution.
 
 	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
 	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 	DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 	DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 	IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 	OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 #ifndef MUP_DEF_H
 #define MUP_DEF_H
 
 #include <iostream>
 #include <string>
 #include <sstream>
 #include <map>
 
 #include "muParserFixes.h"
 
 /** \file
 	\brief This file contains standard definitions used by the parser.
 */
 
 #define MUP_VERSION _T("2.2.7 (Dev)")
 #define MUP_VERSION_DATE _T("20200602")
 
-#define MUP_CHARS _T("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
-
 /** \brief Define the base datatype for values.
 
   This datatype must be a built in value type. You can not use custom classes.
   It should be working with all types except "int"!
 */
 #define MUP_BASETYPE double
 
 /** \brief Activate this option in order to compile with OpenMP support.
 
   OpenMP is used only in the bulk mode it may increase the performance a bit.
 
-  !!! DO NOT ACTIVATE THIS MACRO HERE IS YOU USE CMAKE FOR BUILDING !!!
+  !!! DO NOT ACTIVATE THIS MACRO HERE IF YOU USE CMAKE FOR BUILDING !!!
 
   use the cmake option instead!
 */
 //#define MUP_USE_OPENMP
 
 #if defined(_UNICODE)
 	/** \brief Definition of the basic parser string type. */
 	#define MUP_STRING_TYPE std::wstring
 
 	#if !defined(_T)
 		#define _T(x) L##x
 	#endif // not defined _T
 #else
 	#ifndef _T
 		#define _T(x) x
 	#endif
 
 	/** \brief Definition of the basic parser string type. */
 	#define MUP_STRING_TYPE std::string
 #endif
 
 #if defined(_DEBUG)
 	/** \brief Debug macro to force an abortion of the programm with a certain message. */
 	#define MUP_FAIL(MSG)		\
 			  {                 \
 				bool MSG=false; \
 				assert(MSG);    \
 			  }
 #else
 	#define MUP_FAIL(MSG)
 #endif
 
 /** \brief An assertion that does not kill the program. */
 #define MUP_ASSERT(COND)											\
             if (!(COND))											\
             {														\
               stringstream_type ss;									\
               ss << _T("Assertion \"") _T(#COND) _T("\" failed: ")	\
                  << __FILE__ << _T(" line ")						\
                  << __LINE__ << _T(".");							\
               throw ParserError( ecINTERNAL_ERROR, -1, ss.str());   \
             }
@@ -103,278 +101,277 @@
 namespace mu
 {
 #if defined(_UNICODE)
 
 	//------------------------------------------------------------------------------
 	/** \brief Encapsulate wcout. */
 	inline std::wostream& console()
 	{
 		return std::wcout;
 	}
 
 	/** \brief Encapsulate cin. */
 	inline std::wistream& console_in()
 	{
 		return std::wcin;
 	}
 
 #else
 
 	/** \brief Encapsulate cout.
 
 	  Used for supporting UNICODE more easily.
 	*/
 	inline std::ostream& console()
 	{
 		return std::cout;
 	}
 
 	/** \brief Encapsulate cin.
 
 	  Used for supporting UNICODE more easily.
 	*/
 	inline std::istream& console_in()
 	{
 		return std::cin;
 	}
 
 #endif
 
 	//------------------------------------------------------------------------------
 	class ParserSetup
 	{
 	public:
 		static const int MaxLenExpression = 5000;
 		static const int MaxLenIdentifier = 100;
 	};
 
 	//------------------------------------------------------------------------------
 	/** \brief Bytecode values.
 
 		\attention The order of the operator entries must match the order in ParserBase::c_DefaultOprt!
 	*/
 	enum ECmdCode
 	{
 		// The following are codes for built in binary operators
 		// apart from built in operators the user has the opportunity to
 		// add user defined operators.
-		cmLE = 0,   ///< Operator item:  less or equal
-		cmGE = 1,   ///< Operator item:  greater or equal
-		cmNEQ = 2,   ///< Operator item:  not equal
-		cmEQ = 3,   ///< Operator item:  equals
-		cmLT = 4,   ///< Operator item:  less than
-		cmGT = 5,   ///< Operator item:  greater than
-		cmADD = 6,   ///< Operator item:  add
-		cmSUB = 7,   ///< Operator item:  subtract
-		cmMUL = 8,   ///< Operator item:  multiply
-		cmDIV = 9,   ///< Operator item:  division
-		cmPOW = 10,  ///< Operator item:  y to the power of ...
+		cmLE = 0,			///< Operator item:  less or equal
+		cmGE = 1,			///< Operator item:  greater or equal
+		cmNEQ = 2,			///< Operator item:  not equal
+		cmEQ = 3,			///< Operator item:  equals
+		cmLT = 4,			///< Operator item:  less than
+		cmGT = 5,			///< Operator item:  greater than
+		cmADD = 6,			///< Operator item:  add
+		cmSUB = 7,			///< Operator item:  subtract
+		cmMUL = 8,			///< Operator item:  multiply
+		cmDIV = 9,			///< Operator item:  division
+		cmPOW = 10,			///< Operator item:  y to the power of ...
 		cmLAND = 11,
 		cmLOR = 12,
-		cmASSIGN = 13,  ///< Operator item:  Assignment operator
-		cmBO = 14,  ///< Operator item:  opening bracket
-		cmBC = 15,  ///< Operator item:  closing bracket
-		cmIF = 16,  ///< For use in the ternary if-then-else operator
-		cmELSE = 17,  ///< For use in the ternary if-then-else operator
-		cmENDIF = 18,  ///< For use in the ternary if-then-else operator
-		cmARG_SEP = 19,  ///< function argument separator
-		cmVAR = 20,  ///< variable item
-		cmVAL = 21,  ///< value item
+		cmASSIGN = 13,		///< Operator item:  Assignment operator
+		cmBO = 14,			///< Operator item:  opening bracket
+		cmBC = 15,			///< Operator item:  closing bracket
+		cmIF = 16,			///< For use in the ternary if-then-else operator
+		cmELSE = 17,		///< For use in the ternary if-then-else operator
+		cmENDIF = 18,		///< For use in the ternary if-then-else operator
+		cmARG_SEP = 19,		///< function argument separator
+		cmVAR = 20,			///< variable item
+		cmVAL = 21,			///< value item
 
 		// For optimization purposes
-		cmVARPOW2,
-		cmVARPOW3,
-		cmVARPOW4,
-		cmVARMUL,
-		cmPOW2,
+		cmVARPOW2 = 22,
+		cmVARPOW3 = 23,
+		cmVARPOW4 = 24,
+		cmVARMUL = 25,
+		cmPOW2 = 26,
 
 		// operators and functions
-		cmFUNC,                ///< Code for a generic function item
-		cmFUNC_STR,            ///< Code for a function with a string parameter
-		cmFUNC_BULK,           ///< Special callbacks for Bulk mode with an additional parameter for the bulk index 
-		cmSTRING,              ///< Code for a string token
-		cmOPRT_BIN,            ///< user defined binary operator
-		cmOPRT_POSTFIX,        ///< code for postfix operators
-		cmOPRT_INFIX,          ///< code for infix operators
-		cmEND,                 ///< end of formula
-		cmUNKNOWN              ///< uninitialized item
+		cmFUNC = 27,		///< Code for a generic function item
+		cmFUNC_STR,			///< Code for a function with a string parameter
+		cmFUNC_BULK,		///< Special callbacks for Bulk mode with an additional parameter for the bulk index 
+		cmSTRING,			///< Code for a string token
+		cmOPRT_BIN,			///< user defined binary operator
+		cmOPRT_POSTFIX,		///< code for postfix operators
+		cmOPRT_INFIX,		///< code for infix operators
+		cmEND,				///< end of formula
+		cmUNKNOWN			///< uninitialized item
 	};
 
 	//------------------------------------------------------------------------------
 	/** \brief Types internally used by the parser.
 	*/
 	enum ETypeCode
 	{
 		tpSTR = 0,     ///< String type (Function arguments and constants only, no string variables)
 		tpDBL = 1,     ///< Floating point variables
 		tpVOID = 2      ///< Undefined type.
 	};
 
 	//------------------------------------------------------------------------------
 	enum EParserVersionInfo
 	{
 		pviBRIEF,
 		pviFULL
 	};
 
 	//------------------------------------------------------------------------------
 	/** \brief Parser operator precedence values. */
 	enum EOprtAssociativity
 	{
 		oaLEFT = 0,
 		oaRIGHT = 1,
 		oaNONE = 2
 	};
 
 	//------------------------------------------------------------------------------
 	/** \brief Parser operator precedence values. */
 	enum EOprtPrecedence
 	{
 		// binary operators
 		prLOR = 1,
 		prLAND = 2,
-		prLOGIC = 3,  ///< logic operators
-		prCMP = 4,  ///< comparsion operators
-		prADD_SUB = 5,  ///< addition
-		prMUL_DIV = 6,  ///< multiplication/division
-		prPOW = 7,  ///< power operator priority (highest)
+		prLOGIC = 3,	///< logic operators
+		prCMP = 4,		///< comparsion operators
+		prADD_SUB = 5,	///< addition
+		prMUL_DIV = 6,	///< multiplication/division
+		prPOW = 7,		///< power operator priority (highest)
 
 		// infix operators
-		prINFIX = 6, ///< Signs have a higher priority than ADD_SUB, but lower than power operator
-		prPOSTFIX = 6  ///< Postfix operator priority (currently unused)
+		prINFIX = 6,	///< Signs have a higher priority than ADD_SUB, but lower than power operator
+		prPOSTFIX = 6	///< Postfix operator priority (currently unused)
 	};
 
 	//------------------------------------------------------------------------------
-	// basic types
+	// Basic Types
+	//------------------------------------------------------------------------------
 
 	/** \brief The numeric datatype used by the parser.
 
 	  Normally this is a floating point type either single or double precision.
 	*/
 	typedef MUP_BASETYPE value_type;
 
 	/** \brief The stringtype used by the parser.
 
 	  Depends on whether UNICODE is used or not.
 	*/
 	typedef MUP_STRING_TYPE string_type;
 
 	/** \brief The character type used by the parser.
 
 	  Depends on whether UNICODE is used or not.
 	*/
 	typedef string_type::value_type char_type;
 
 	/** \brief Typedef for easily using stringstream that respect the parser stringtype. */
-	typedef std::basic_stringstream<char_type,
-		std::char_traits<char_type>,
-		std::allocator<char_type> > stringstream_type;
+	typedef std::basic_stringstream<char_type, std::char_traits<char_type>, std::allocator<char_type> > stringstream_type;
 
 	// Data container types
 
 	/** \brief Type used for storing variables. */
 	typedef std::map<string_type, value_type*> varmap_type;
 
 	/** \brief Type used for storing constants. */
 	typedef std::map<string_type, value_type> valmap_type;
 
 	/** \brief Type for assigning a string name to an index in the internal string table. */
 	typedef std::map<string_type, std::size_t> strmap_type;
 
 	// Parser callbacks
 
 	/** \brief Callback type used for functions without arguments. */
 	typedef value_type(*generic_fun_type)();
 
 	/** \brief Callback type used for functions without arguments. */
 	typedef value_type(*fun_type0)();
 
 	/** \brief Callback type used for functions with a single arguments. */
 	typedef value_type(*fun_type1)(value_type);
 
 	/** \brief Callback type used for functions with two arguments. */
 	typedef value_type(*fun_type2)(value_type, value_type);
 
 	/** \brief Callback type used for functions with three arguments. */
 	typedef value_type(*fun_type3)(value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with four arguments. */
 	typedef value_type(*fun_type4)(value_type, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with five arguments. */
 	typedef value_type(*fun_type5)(value_type, value_type, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with six arguments. */
 	typedef value_type(*fun_type6)(value_type, value_type, value_type, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with seven arguments. */
 	typedef value_type(*fun_type7)(value_type, value_type, value_type, value_type, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with eight arguments. */
 	typedef value_type(*fun_type8)(value_type, value_type, value_type, value_type, value_type, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with nine arguments. */
 	typedef value_type(*fun_type9)(value_type, value_type, value_type, value_type, value_type, value_type, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with ten arguments. */
 	typedef value_type(*fun_type10)(value_type, value_type, value_type, value_type, value_type, value_type, value_type, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions without arguments. */
 	typedef value_type(*bulkfun_type0)(int, int);
 
 	/** \brief Callback type used for functions with a single arguments. */
 	typedef value_type(*bulkfun_type1)(int, int, value_type);
 
 	/** \brief Callback type used for functions with two arguments. */
 	typedef value_type(*bulkfun_type2)(int, int, value_type, value_type);
 
 	/** \brief Callback type used for functions with three arguments. */
 	typedef value_type(*bulkfun_type3)(int, int, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with four arguments. */
 	typedef value_type(*bulkfun_type4)(int, int, value_type, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with five arguments. */
 	typedef value_type(*bulkfun_type5)(int, int, value_type, value_type, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with six arguments. */
 	typedef value_type(*bulkfun_type6)(int, int, value_type, value_type, value_type, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with seven arguments. */
 	typedef value_type(*bulkfun_type7)(int, int, value_type, value_type, value_type, value_type, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with eight arguments. */
 	typedef value_type(*bulkfun_type8)(int, int, value_type, value_type, value_type, value_type, value_type, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with nine arguments. */
 	typedef value_type(*bulkfun_type9)(int, int, value_type, value_type, value_type, value_type, value_type, value_type, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with ten arguments. */
 	typedef value_type(*bulkfun_type10)(int, int, value_type, value_type, value_type, value_type, value_type, value_type, value_type, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions with a variable argument list. */
 	typedef value_type(*multfun_type)(const value_type*, int);
 
 	/** \brief Callback type used for functions taking a string as an argument. */
 	typedef value_type(*strfun_type1)(const char_type*);
 
 	/** \brief Callback type used for functions taking a string and a value as arguments. */
 	typedef value_type(*strfun_type2)(const char_type*, value_type);
 
 	/** \brief Callback type used for functions taking a string and two values as arguments. */
 	typedef value_type(*strfun_type3)(const char_type*, value_type, value_type);
 
 	/** \brief Callback type used for functions taking a string and a value as arguments. */
 	typedef value_type(*strfun_type4)(const char_type*, value_type, value_type, value_type);
 
 	/** \brief Callback type used for functions taking a string and two values as arguments. */
 	typedef value_type(*strfun_type5)(const char_type*, value_type, value_type, value_type, value_type);
 
 	/** \brief Callback used for functions that identify values in a string. */
 	typedef int (*identfun_type)(const char_type* sExpr, int* nPos, value_type* fVal);
 
 	/** \brief Callback used for variable creation factory functions. */
 	typedef value_type* (*facfun_type)(const char_type*, void*);
 } // end of namespace
 
 #endif
 
diff --git a/include/muParserStack.h b/include/muParserStack.h
index 3c54bc1..e248b16 100644
--- a/include/muParserStack.h
+++ b/include/muParserStack.h
@@ -44,85 +44,85 @@
 namespace mu
 {
 
 	/** \brief Parser stack implementation.
 
 		Stack implementation based on a std::stack. The behaviour of pop() had been
 		slightly changed in order to get an error code if the stack is empty.
 		The stack is used within the Parser both as a value stack and as an operator stack.
 
-		\author (C) 2004-2011 Ingo Berg
+		\author (C) 2004-2020 Ingo Berg
 	*/
 	template <typename TValueType>
 	class ParserStack
 	{
 	private:
 
 		/** \brief Type of the underlying stack implementation. */
 		typedef std::stack<TValueType, std::vector<TValueType> > impl_type;
 
 		impl_type m_Stack;  ///< This is the actual stack.
 
 	public:
 
 		//---------------------------------------------------------------------------
 		ParserStack()
 			:m_Stack()
 		{}
 
 		//---------------------------------------------------------------------------
 		virtual ~ParserStack()
 		{}
 
 		//---------------------------------------------------------------------------
 		/** \brief Pop a value from the stack.
 
 		  Unlike the standard implementation this function will return the value that
 		  is going to be taken from the stack.
 
 		  \throw ParserException in case the stack is empty.
 		  \sa pop(int &a_iErrc)
 		*/
 		TValueType pop()
 		{
 			if (empty())
 				throw ParserError(_T("stack is empty."));
 
 			TValueType el = top();
 			m_Stack.pop();
 			return el;
 		}
 
 		/** \brief Push an object into the stack.
 
 			\param a_Val object to push into the stack.
 			\throw nothrow
 		*/
 		void push(const TValueType& a_Val)
 		{
 			m_Stack.push(a_Val);
 		}
 
 		/** \brief Return the number of stored elements. */
 		unsigned size() const
 		{
 			return (unsigned)m_Stack.size();
 		}
 
 		/** \brief Returns true if stack is empty false otherwise. */
 		bool empty() const
 		{
 			return m_Stack.empty();
 		}
 
 		/** \brief Return reference to the top object in the stack.
 
 			The top object is the one pushed most recently.
 		*/
 		TValueType& top()
 		{
 			return m_Stack.top();
 		}
 	};
 } // namespace MathUtils
 
 #endif
diff --git a/include/muParserTemplateMagic.h b/include/muParserTemplateMagic.h
index d94b634..30f550d 100644
--- a/include/muParserTemplateMagic.h
+++ b/include/muParserTemplateMagic.h
@@ -36,106 +36,116 @@
 namespace mu
 {
 	//-----------------------------------------------------------------------------------------------
 	//
 	// Compile time type detection
 	//
 	//-----------------------------------------------------------------------------------------------
 
 	/** \brief A class singling out integer types at compile time using
 			   template meta programming.
 	*/
 	template<typename T>
 	struct TypeInfo
 	{
 		static bool IsInteger() { return false; }
 	};
 
 	template<>
 	struct TypeInfo<char>
 	{
 		static bool IsInteger() { return true; }
 	};
 
 	template<>
 	struct TypeInfo<short>
 	{
 		static bool IsInteger() { return true; }
 	};
 
 	template<>
 	struct TypeInfo<int>
 	{
 		static bool IsInteger() { return true; }
 	};
 
 	template<>
 	struct TypeInfo<long>
 	{
 		static bool IsInteger() { return true; }
 	};
 
 	template<>
 	struct TypeInfo<unsigned char>
 	{
 		static bool IsInteger() { return true; }
 	};
 
 	template<>
 	struct TypeInfo<unsigned short>
 	{
 		static bool IsInteger() { return true; }
 	};
 
 	template<>
 	struct TypeInfo<unsigned int>
 	{
 		static bool IsInteger() { return true; }
 	};
 
 	template<>
 	struct TypeInfo<unsigned long>
 	{
 		static bool IsInteger() { return true; }
 	};
 
 
 	//-----------------------------------------------------------------------------------------------
 	//
 	// Standard math functions with dummy overload for integer types
 	//
 	//-----------------------------------------------------------------------------------------------
 
 	/** \brief A template class for providing wrappers for essential math functions.
 
 	  This template is spezialized for several types in order to provide a unified interface
 	  for parser internal math function calls regardless of the data type.
 	*/
 	template<typename T>
 	struct MathImpl
 	{
 		static T Sin(T v) { return sin(v); }
 		static T Cos(T v) { return cos(v); }
 		static T Tan(T v) { return tan(v); }
 		static T ASin(T v) { return asin(v); }
 		static T ACos(T v) { return acos(v); }
 		static T ATan(T v) { return atan(v); }
 		static T ATan2(T v1, T v2) { return atan2(v1, v2); }
 		static T Sinh(T v) { return sinh(v); }
 		static T Cosh(T v) { return cosh(v); }
 		static T Tanh(T v) { return tanh(v); }
 		static T ASinh(T v) { return log(v + sqrt(v * v + 1)); }
 		static T ACosh(T v) { return log(v + sqrt(v * v - 1)); }
 		static T ATanh(T v) { return ((T)0.5 * log((1 + v) / (1 - v))); }
 		static T Log(T v) { return log(v); }
 		static T Log2(T v) { return log(v) / log((T)2); } // Logarithm base 2
 		static T Log10(T v) { return log10(v); }         // Logarithm base 10
 		static T Exp(T v) { return exp(v); }
 		static T Abs(T v) { return (v >= 0) ? v : -v; }
 		static T Sqrt(T v) { return sqrt(v); }
 		static T Rint(T v) { return floor(v + (T)0.5); }
 		static T Sign(T v) { return (T)((v < 0) ? -1 : (v > 0) ? 1 : 0); }
 		static T Pow(T v1, T v2) { return std::pow(v1, v2); }
+
+#if defined (__GNUG__)
+		// Bei zu genauer definition von pi kann die Berechnung von
+		// sin(pi*a) mit a=1 10 x langsamer sein! 
+		static constexpr T CONST_PI = (T)3.141592653589;
+#else
+		static constexpr T CONST_PI = (T)3.141592653589793238462643;
+#endif
+
+		static constexpr T CONST_E = (T)2.718281828459045235360287;
 	};
 }
 
 #endif
diff --git a/include/muParserToken.h b/include/muParserToken.h
index 9476daa..78e42f0 100644
--- a/include/muParserToken.h
+++ b/include/muParserToken.h
@@ -45,360 +45,360 @@
 namespace mu
 {
 	/** \brief Encapsulation of the data for a single formula token.
 
 	  Formula token implementation. Part of the Math Parser Package.
 	  Formula tokens can be either one of the following:
 	  <ul>
 		<li>value</li>
 		<li>variable</li>
 		<li>function with numerical arguments</li>
 		<li>functions with a string as argument</li>
 		<li>prefix operators</li>
 		<li>infix operators</li>
 		  <li>binary operator</li>
 	  </ul>
 
 	 \author (C) 2004-2013 Ingo Berg
 	*/
 	template<typename TBase, typename TString>
 	class ParserToken
 	{
 	private:
 
 		ECmdCode  m_iCode;  ///< Type of the token; The token type is a constant of type #ECmdCode.
 		ETypeCode m_iType;
 		void* m_pTok;      ///< Stores Token pointer; not applicable for all tokens
 		int  m_iIdx;        ///< An otional index to an external buffer storing the token data
 		TString m_strTok;   ///< Token string
 		TString m_strVal;   ///< Value for string variables
 		value_type m_fVal;  ///< the value 
 		std::unique_ptr<ParserCallback> m_pCallback;
 
 	public:
 
 		//---------------------------------------------------------------------------
 		/** \brief Constructor (default).
 
 			Sets token to an neutral state of type cmUNKNOWN.
 			\throw nothrow
 			\sa ECmdCode
 		*/
 		ParserToken()
 			:m_iCode(cmUNKNOWN)
 			, m_iType(tpVOID)
 			, m_pTok(0)
 			, m_iIdx(-1)
 			, m_strTok()
 			, m_strVal()
 			, m_fVal(0)
 			, m_pCallback()
 		{}
 
 		//------------------------------------------------------------------------------
 		/** \brief Create token from another one.
 
 			Implemented by calling Assign(...)
 			\throw nothrow
 			\post m_iType==cmUNKNOWN
 			\sa #Assign
 		*/
 		ParserToken(const ParserToken& a_Tok)
 		{
 			Assign(a_Tok);
 		}
 
 		//------------------------------------------------------------------------------
 		/** \brief Assignment operator.
 
 			Copy token state from another token and return this.
 			Implemented by calling Assign(...).
 			\throw nothrow
 		*/
 		ParserToken& operator=(const ParserToken& a_Tok)
 		{
 			Assign(a_Tok);
 			return *this;
 		}
 
 		//------------------------------------------------------------------------------
 		/** \brief Copy token information from argument.
 
 			\throw nothrow
 		*/
 		void Assign(const ParserToken& a_Tok)
 		{
 			m_iCode = a_Tok.m_iCode;
 			m_pTok = a_Tok.m_pTok;
 			m_strTok = a_Tok.m_strTok;
 			m_iIdx = a_Tok.m_iIdx;
 			m_strVal = a_Tok.m_strVal;
 			m_iType = a_Tok.m_iType;
 			m_fVal = a_Tok.m_fVal;
 			// create new callback object if a_Tok has one 
 			m_pCallback.reset(a_Tok.m_pCallback.get() ? a_Tok.m_pCallback->Clone() : 0);
 		}
 
 		//------------------------------------------------------------------------------
 		/** \brief Assign a token type.
 
 		  Token may not be of type value, variable or function. Those have separate set functions.
 
 		  \pre [assert] a_iType!=cmVAR
 		  \pre [assert] a_iType!=cmVAL
 		  \pre [assert] a_iType!=cmFUNC
 		  \post m_fVal = 0
 		  \post m_pTok = 0
 		*/
 		ParserToken& Set(ECmdCode a_iType, const TString& a_strTok = TString())
 		{
 			// The following types can't be set this way, they have special Set functions
 			assert(a_iType != cmVAR);
 			assert(a_iType != cmVAL);
 			assert(a_iType != cmFUNC);
 
 			m_iCode = a_iType;
 			m_iType = tpVOID;
 			m_pTok = 0;
 			m_strTok = a_strTok;
 			m_iIdx = -1;
 
 			return *this;
 		}
 
 		//------------------------------------------------------------------------------
 		/** \brief Set Callback type. */
 		ParserToken& Set(const ParserCallback& a_pCallback, const TString& a_sTok)
 		{
 			assert(a_pCallback.GetAddr());
 
 			m_iCode = a_pCallback.GetCode();
 			m_iType = tpVOID;
 			m_strTok = a_sTok;
 			m_pCallback.reset(new ParserCallback(a_pCallback));
 
 			m_pTok = 0;
 			m_iIdx = -1;
 
 			return *this;
 		}
 
 		//------------------------------------------------------------------------------
 		/** \brief Make this token a value token.
 
 			Member variables not necessary for value tokens will be invalidated.
 			\throw nothrow
 		*/
 		ParserToken& SetVal(TBase a_fVal, const TString& a_strTok = TString())
 		{
 			m_iCode = cmVAL;
 			m_iType = tpDBL;
 			m_fVal = a_fVal;
 			m_strTok = a_strTok;
 			m_iIdx = -1;
 
 			m_pTok = 0;
 			m_pCallback.reset(0);
 
 			return *this;
 		}
 
 		//------------------------------------------------------------------------------
 		/** \brief make this token a variable token.
 
 			Member variables not necessary for variable tokens will be invalidated.
 			\throw nothrow
 		*/
 		ParserToken& SetVar(TBase* a_pVar, const TString& a_strTok)
 		{
 			m_iCode = cmVAR;
 			m_iType = tpDBL;
 			m_strTok = a_strTok;
 			m_iIdx = -1;
 			m_pTok = (void*)a_pVar;
 			m_pCallback.reset(0);
 			return *this;
 		}
 
 		//------------------------------------------------------------------------------
 		/** \brief Make this token a variable token.
 
 			Member variables not necessary for variable tokens will be invalidated.
 			\throw nothrow
 		*/
 		ParserToken& SetString(const TString& a_strTok, std::size_t a_iSize)
 		{
 			m_iCode = cmSTRING;
 			m_iType = tpSTR;
 			m_strTok = a_strTok;
 			m_iIdx = static_cast<int>(a_iSize);
 
 			m_pTok = 0;
 			m_pCallback.reset(0);
 			return *this;
 		}
 
 		//------------------------------------------------------------------------------
 		/** \brief Set an index associated with the token related data.
 
 			In cmSTRFUNC - This is the index to a string table in the main parser.
 			\param a_iIdx The index the string function result will take in the bytecode parser.
 			\throw exception_type if #a_iIdx<0 or #m_iType!=cmSTRING
 		*/
 		void SetIdx(int a_iIdx)
 		{
 			if (m_iCode != cmSTRING || a_iIdx < 0)
 				throw ParserError(ecINTERNAL_ERROR);
 
 			m_iIdx = a_iIdx;
 		}
 
 		//------------------------------------------------------------------------------
 		/** \brief Return Index associated with the token related data.
 
 			In cmSTRFUNC - This is the index to a string table in the main parser.
 
 			\throw exception_type if #m_iIdx<0 or #m_iType!=cmSTRING
 			\return The index the result will take in the Bytecode calculatin array (#m_iIdx).
 		*/
 		int GetIdx() const
 		{
 			if (m_iIdx < 0 || m_iCode != cmSTRING)
 				throw ParserError(ecINTERNAL_ERROR);
 
 			return m_iIdx;
 		}
 
 		//------------------------------------------------------------------------------
 		/** \brief Return the token type.
 
 			\return #m_iType
 			\throw nothrow
 		*/
 		ECmdCode GetCode() const
 		{
 			if (m_pCallback.get())
 			{
 				return m_pCallback->GetCode();
 			}
 			else
 			{
 				return m_iCode;
 			}
 		}
 
 		//------------------------------------------------------------------------------
 		ETypeCode GetType() const
 		{
 			if (m_pCallback.get())
 			{
 				return m_pCallback->GetType();
 			}
 			else
 			{
 				return m_iType;
 			}
 		}
 
 		//------------------------------------------------------------------------------
 		int GetPri() const
 		{
 			if (!m_pCallback.get())
 				throw ParserError(ecINTERNAL_ERROR);
 
 			if (m_pCallback->GetCode() != cmOPRT_BIN && m_pCallback->GetCode() != cmOPRT_INFIX)
 				throw ParserError(ecINTERNAL_ERROR);
 
 			return m_pCallback->GetPri();
 		}
 
 		//------------------------------------------------------------------------------
 		EOprtAssociativity GetAssociativity() const
 		{
-			if (m_pCallback.get() == NULL || m_pCallback->GetCode() != cmOPRT_BIN)
+			if (m_pCallback.get() == nullptr || m_pCallback->GetCode() != cmOPRT_BIN)
 				throw ParserError(ecINTERNAL_ERROR);
 
 			return m_pCallback->GetAssociativity();
 		}
 
 		//------------------------------------------------------------------------------
 		/** \brief Return the address of the callback function assoziated with
 				   function and operator tokens.
 
 			\return The pointer stored in #m_pTok.
 			\throw exception_type if token type is non of:
 				   <ul>
 					 <li>cmFUNC</li>
 					 <li>cmSTRFUNC</li>
 					 <li>cmPOSTOP</li>
 					 <li>cmINFIXOP</li>
 					 <li>cmOPRT_BIN</li>
 				   </ul>
 			\sa ECmdCode
 		*/
 		generic_fun_type GetFuncAddr() const
 		{
 			return (m_pCallback.get()) ? (generic_fun_type)m_pCallback->GetAddr() : 0;
 		}
 
 		//------------------------------------------------------------------------------
 		/** \biref Get value of the token.
 
 			Only applicable to variable and value tokens.
 			\throw exception_type if token is no value/variable token.
 		*/
 		TBase GetVal() const
 		{
 			switch (m_iCode)
 			{
 			case cmVAL:  return m_fVal;
 			case cmVAR:  return *((TBase*)m_pTok);
 			default:     throw ParserError(ecVAL_EXPECTED);
 			}
 		}
 
 		//------------------------------------------------------------------------------
 		/** \brief Get address of a variable token.
 
 		  Valid only if m_iType==CmdVar.
 		  \throw exception_type if token is no variable token.
 		*/
 		TBase* GetVar() const
 		{
 			if (m_iCode != cmVAR)
 				throw ParserError(ecINTERNAL_ERROR);
 
 			return (TBase*)m_pTok;
 		}
 
 		//------------------------------------------------------------------------------
 		/** \brief Return the number of function arguments.
 
 		  Valid only if m_iType==CmdFUNC.
 		*/
 		int GetArgCount() const
 		{
 			assert(m_pCallback.get());
 
 			if (!m_pCallback->GetAddr())
 				throw ParserError(ecINTERNAL_ERROR);
 
 			return m_pCallback->GetArgc();
 		}
 
 		//------------------------------------------------------------------------------
 		/** \brief Return the token identifier.
 
 			If #m_iType is cmSTRING the token identifier is the value of the string argument
 			for a string function.
 			\return #m_strTok
 			\throw nothrow
 			\sa m_strTok
 		*/
 		const TString& GetAsString() const
 		{
 			return m_strTok;
 		}
 	};
 } // namespace mu
 
 #endif
diff --git a/include/muParserTokenReader.h b/include/muParserTokenReader.h
index 0303db9..68c2a3e 100644
--- a/include/muParserTokenReader.h
+++ b/include/muParserTokenReader.h
@@ -49,116 +49,115 @@
 namespace mu
 {
 	// Forward declaration
 	class ParserBase;
 
 	/** \brief Token reader for the ParserBase class.
 
 	*/
 	class ParserTokenReader
 	{
 	private:
 
 		typedef ParserToken<value_type, string_type> token_type;
 
 	public:
 
 		ParserTokenReader(ParserBase* a_pParent);
 		ParserTokenReader* Clone(ParserBase* a_pParent) const;
 
 		void AddValIdent(identfun_type a_pCallback);
 		void SetVarCreator(facfun_type a_pFactory, void* pUserData);
 		void SetFormula(const string_type& a_strFormula);
 		void SetArgSep(char_type cArgSep);
 
 		int GetPos() const;
 		const string_type& GetExpr() const;
 		varmap_type& GetUsedVar();
 		char_type GetArgSep() const;
 
 		void IgnoreUndefVar(bool bIgnore);
 		void ReInit();
 		token_type ReadNextToken();
 
 	private:
 
 		/** \brief Syntax codes.
 
-			  The syntax codes control the syntax check done during the first time parsing of
+			The syntax codes control the syntax check done during the first time parsing of
 			the expression string. They are flags that indicate which tokens are allowed next
 			if certain tokens are identified.
 		*/
 		enum ESynCodes
 		{
-			noBO = 1 << 0,  ///< to avoid i.e. "cos(7)(" 
-			noBC = 1 << 1,  ///< to avoid i.e. "sin)" or "()"
-			noVAL = 1 << 2,  ///< to avoid i.e. "tan 2" or "sin(8)3.14"
-			noVAR = 1 << 3,  ///< to avoid i.e. "sin a" or "sin(8)a"
-			noARG_SEP = 1 << 4,  ///< to avoid i.e. ",," or "+," ...
-			noFUN = 1 << 5,  ///< to avoid i.e. "sqrt cos" or "(1)sin"	
-			noOPT = 1 << 6,  ///< to avoid i.e. "(+)"
-			noPOSTOP = 1 << 7,  ///< to avoid i.e. "(5!!)" "sin!"
-			noINFIXOP = 1 << 8,  ///< to avoid i.e. "++4" "!!4"
-			noEND = 1 << 9,  ///< to avoid unexpected end of formula
-			noSTR = 1 << 10, ///< to block numeric arguments on string functions
-			noASSIGN = 1 << 11, ///< to block assignment to constant i.e. "4=7"
+			noBO = 1 << 0,			///< to avoid i.e. "cos(7)(" 
+			noBC = 1 << 1,			///< to avoid i.e. "sin)" or "()"
+			noVAL = 1 << 2,			///< to avoid i.e. "tan 2" or "sin(8)3.14"
+			noVAR = 1 << 3,			///< to avoid i.e. "sin a" or "sin(8)a"
+			noARG_SEP = 1 << 4,		///< to avoid i.e. ",," or "+," ...
+			noFUN = 1 << 5,			///< to avoid i.e. "sqrt cos" or "(1)sin"	
+			noOPT = 1 << 6,			///< to avoid i.e. "(+)"
+			noPOSTOP = 1 << 7,		///< to avoid i.e. "(5!!)" "sin!"
+			noINFIXOP = 1 << 8,		///< to avoid i.e. "++4" "!!4"
+			noEND = 1 << 9,			///< to avoid unexpected end of formula
+			noSTR = 1 << 10,		///< to block numeric arguments on string functions
+			noASSIGN = 1 << 11,		///< to block assignment to constant i.e. "4=7"
 			noIF = 1 << 12,
 			noELSE = 1 << 13,
 			sfSTART_OF_LINE = noOPT | noBC | noPOSTOP | noASSIGN | noIF | noELSE | noARG_SEP,
-			noANY = ~0       ///< All of he above flags set
+			noANY = ~0				///< All of he above flags set
 		};
 
 		ParserTokenReader(const ParserTokenReader& a_Reader);
 		ParserTokenReader& operator=(const ParserTokenReader& a_Reader);
 		void Assign(const ParserTokenReader& a_Reader);
 
 		void SetParent(ParserBase* a_pParent);
-		int ExtractToken(const char_type* a_szCharSet,
-			string_type& a_strTok,
-			int a_iPos) const;
+		int ExtractToken(const char_type* a_szCharSet, string_type& a_strTok, int a_iPos) const;
 		int ExtractOperatorToken(string_type& a_sTok, int a_iPos) const;
 
 		bool IsBuiltIn(token_type& a_Tok);
 		bool IsArgSep(token_type& a_Tok);
 		bool IsEOF(token_type& a_Tok);
 		bool IsInfixOpTok(token_type& a_Tok);
 		bool IsFunTok(token_type& a_Tok);
 		bool IsPostOpTok(token_type& a_Tok);
 		bool IsOprt(token_type& a_Tok);
 		bool IsValTok(token_type& a_Tok);
 		bool IsVarTok(token_type& a_Tok);
 		bool IsStrVarTok(token_type& a_Tok);
 		bool IsUndefVarTok(token_type& a_Tok);
 		bool IsString(token_type& a_Tok);
-		void Error(EErrorCodes a_iErrc,
-			int a_iPos = -1,
-			const string_type& a_sTok = string_type()) const;
+		void Error(EErrorCodes a_iErrc, int a_iPos = -1, const string_type& a_sTok = string_type()) const;
 
 		token_type& SaveBeforeReturn(const token_type& tok);
 
 		ParserBase* m_pParser;
 		string_type m_strFormula;
 		int  m_iPos;
 		int  m_iSynFlags;
 		bool m_bIgnoreUndefVar;
 
 		const funmap_type* m_pFunDef;
 		const funmap_type* m_pPostOprtDef;
 		const funmap_type* m_pInfixOprtDef;
 		const funmap_type* m_pOprtDef;
 		const valmap_type* m_pConstDef;
 		const strmap_type* m_pStrVarDef;
+
 		varmap_type* m_pVarDef;  ///< The only non const pointer to parser internals
 		facfun_type m_pFactory;
 		void* m_pFactoryData;
 		std::list<identfun_type> m_vIdentFun; ///< Value token identification function
 		varmap_type m_UsedVar;
 		value_type m_fZero;      ///< Dummy value of zero, referenced by undefined variables
-		int m_iBrackets;
+		
+		std::stack<int> m_bracketStack;
+
 		token_type m_lastTok;
 		char_type m_cArgSep;     ///< The character used for separating function arguments
 	};
 } // namespace mu
 
 #endif
 
 
diff --git a/samples/example1/example1.cpp b/samples/example1/example1.cpp
index d00336e..f8e34b9 100644
--- a/samples/example1/example1.cpp
+++ b/samples/example1/example1.cpp
@@ -367,79 +367,79 @@ static void ListExprVar(const mu::ParserBase& parser)
 //---------------------------------------------------------------------------
 /** \brief Check for external keywords.
 */
 static int CheckKeywords(const mu::char_type* a_szLine, mu::Parser& a_Parser)
 {
 	string_type sLine(a_szLine);
 
 	if (sLine == _T("quit"))
 	{
 		return -1;
 	}
 	else if (sLine == _T("list var"))
 	{
 		ListVar(a_Parser);
 		return 1;
 	}
 	else if (sLine == _T("opt on"))
 	{
 		a_Parser.EnableOptimizer(true);
 		mu::console() << _T("Optimizer enabled\n");
 		return 1;
 	}
 	else if (sLine == _T("opt off"))
 	{
 		a_Parser.EnableOptimizer(false);
 		mu::console() << _T("Optimizer disabled\n");
 		return 1;
 	}
 	else if (sLine == _T("list const"))
 	{
 		ListConst(a_Parser);
 		return 1;
 	}
 	else if (sLine == _T("list exprvar"))
 	{
 		ListExprVar(a_Parser);
 		return 1;
 	}
 	else if (sLine == _T("locale de"))
 	{
 		mu::console() << _T("Setting german locale: ArgSep=';' DecSep=',' ThousandsSep='.'\n");
 		a_Parser.SetArgSep(';');
 		a_Parser.SetDecSep(',');
 		a_Parser.SetThousandsSep('.');
 		return 1;
 	}
 	else if (sLine == _T("locale en"))
 	{
 		mu::console() << _T("Setting english locale: ArgSep=',' DecSep='.' ThousandsSep=''\n");
 		a_Parser.SetArgSep(',');
 		a_Parser.SetDecSep('.');
 		a_Parser.SetThousandsSep();
 		return 1;
 	}
 	else if (sLine == _T("locale reset"))
 	{
 		mu::console() << _T("Resetting locale\n");
 		a_Parser.ResetLocale();
 		return 1;
 	}
 	else if (sLine == _T("test bulk"))
 	{
 		mu::console() << _T("Testing bulk mode\n");
 		CalcBulk();
 		return 1;
 	}
 	else if (sLine == _T("dbg"))
 	{
-		std::string dbg = "1 ? (2:3)";
+		std::string dbg = "sum(0?1,0,0:3)";
 		a_Parser.SetExpr(dbg);
 		mu::console() << dbg;
 		double v =  a_Parser.Eval();
 		return 1;
 	}
 
 	return 0;
 }
 
 //---------------------------------------------------------------------------
diff --git a/src/muParser.cpp b/src/muParser.cpp
index 1ea495c..c1778bc 100644
--- a/src/muParser.cpp
+++ b/src/muParser.cpp
@@ -1,44 +1,38 @@
 /*
 				 __________
 	_____   __ __\______   \_____  _______  ______  ____ _______
    /     \ |  |  \|     ___/\__  \ \_  __ \/  ___/_/ __ \\_  __ \
   |  Y Y  \|  |  /|    |     / __ \_|  | \/\___ \ \  ___/ |  | \/
   |__|_|  /|____/ |____|    (____  /|__|  /____  > \___  >|__|
 		\/                       \/            \/      \/
   Copyright (C) 2004 - 2020 Ingo Berg
 
 	Redistribution and use in source and binary forms, with or without modification, are permitted
 	provided that the following conditions are met:
 
 	  * Redistributions of source code must retain the above copyright notice, this list of
 		conditions and the following disclaimer.
 	  * Redistributions in binary form must reproduce the above copyright notice, this list of
 		conditions and the following disclaimer in the documentation and/or other materials provided
 		with the distribution.
 
 	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
 	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 	DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 	DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 	IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 	OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 #include "muParser.h"
 #include "muParserTemplateMagic.h"
 
 //--- Standard includes ------------------------------------------------------------------------
 #include <cmath>
 #include <algorithm>
 #include <numeric>
 
-/** \brief Pi (what else?). */
-#define PARSER_CONST_PI  3.141592653589793238462643
-
-/** \brief The Eulerian number. */
-#define PARSER_CONST_E   2.718281828459045235360287
-
 using namespace std;
 
 /** \file
@@ -50,312 +44,310 @@ using namespace std;
 /** \brief Namespace for mathematical applications. */
 namespace mu
 {
 
 
 	//---------------------------------------------------------------------------
 	// Trigonometric function
 	value_type Parser::Sin(value_type v) { return MathImpl<value_type>::Sin(v); }
 	value_type Parser::Cos(value_type v) { return MathImpl<value_type>::Cos(v); }
 	value_type Parser::Tan(value_type v) { return MathImpl<value_type>::Tan(v); }
 	value_type Parser::ASin(value_type v) { return MathImpl<value_type>::ASin(v); }
 	value_type Parser::ACos(value_type v) { return MathImpl<value_type>::ACos(v); }
 	value_type Parser::ATan(value_type v) { return MathImpl<value_type>::ATan(v); }
 	value_type Parser::ATan2(value_type v1, value_type v2) { return MathImpl<value_type>::ATan2(v1, v2); }
 	value_type Parser::Sinh(value_type v) { return MathImpl<value_type>::Sinh(v); }
 	value_type Parser::Cosh(value_type v) { return MathImpl<value_type>::Cosh(v); }
 	value_type Parser::Tanh(value_type v) { return MathImpl<value_type>::Tanh(v); }
 	value_type Parser::ASinh(value_type v) { return MathImpl<value_type>::ASinh(v); }
 	value_type Parser::ACosh(value_type v) { return MathImpl<value_type>::ACosh(v); }
 	value_type Parser::ATanh(value_type v) { return MathImpl<value_type>::ATanh(v); }
 
 	//---------------------------------------------------------------------------
 	// Logarithm functions
 	value_type Parser::Log2(value_type v) { return MathImpl<value_type>::Log2(v); }
 	value_type Parser::Log10(value_type v) { return MathImpl<value_type>::Log10(v); }
 	value_type Parser::Ln(value_type v)	{ return MathImpl<value_type>::Log(v); }
 
 	//---------------------------------------------------------------------------
 	//  misc
 	value_type Parser::Exp(value_type v) { return MathImpl<value_type>::Exp(v); }
 	value_type Parser::Abs(value_type v) { return MathImpl<value_type>::Abs(v); }
 	value_type Parser::Sqrt(value_type v) { return MathImpl<value_type>::Sqrt(v); }
 	value_type Parser::Rint(value_type v) { return MathImpl<value_type>::Rint(v); }
 	value_type Parser::Sign(value_type v) { return MathImpl<value_type>::Sign(v); }
 
 	//---------------------------------------------------------------------------
 	/** \brief Callback for the unary minus operator.
 		\param v The value to negate
 		\return -v
 	*/
 	value_type Parser::UnaryMinus(value_type v)
 	{
 		return -v;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Callback for the unary minus operator.
 		\param v The value to negate
 		\return -v
 	*/
 	value_type Parser::UnaryPlus(value_type v)
 	{
 		return v;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Callback for adding multiple values.
 		\param [in] a_afArg Vector with the function arguments
 		\param [in] a_iArgc The size of a_afArg
 	*/
 	value_type Parser::Sum(const value_type* a_afArg, int a_iArgc)
 	{
 		if (!a_iArgc)
 			throw exception_type(_T("too few arguments for function sum."));
 
 		value_type fRes = 0;
 		for (int i = 0; i < a_iArgc; ++i) fRes += a_afArg[i];
 		return fRes;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Callback for averaging multiple values.
 		\param [in] a_afArg Vector with the function arguments
 		\param [in] a_iArgc The size of a_afArg
 	*/
 	value_type Parser::Avg(const value_type* a_afArg, int a_iArgc)
 	{
 		if (!a_iArgc)
 			throw exception_type(_T("too few arguments for function sum."));
 
 		value_type fRes = 0;
 		for (int i = 0; i < a_iArgc; ++i) fRes += a_afArg[i];
 		return fRes / (value_type)a_iArgc;
 	}
 
 
 	//---------------------------------------------------------------------------
 	/** \brief Callback for determining the minimum value out of a vector.
 		\param [in] a_afArg Vector with the function arguments
 		\param [in] a_iArgc The size of a_afArg
 	*/
 	value_type Parser::Min(const value_type* a_afArg, int a_iArgc)
 	{
 		if (!a_iArgc)
 			throw exception_type(_T("too few arguments for function min."));
 
 		value_type fRes = a_afArg[0];
 		for (int i = 0; i < a_iArgc; ++i)
 			fRes = std::min(fRes, a_afArg[i]);
 
 		return fRes;
 	}
 
 
 	//---------------------------------------------------------------------------
 	/** \brief Callback for determining the maximum value out of a vector.
 		\param [in] a_afArg Vector with the function arguments
 		\param [in] a_iArgc The size of a_afArg
 	*/
 	value_type Parser::Max(const value_type* a_afArg, int a_iArgc)
 	{
 		if (!a_iArgc)
 			throw exception_type(_T("too few arguments for function min."));
 
 		value_type fRes = a_afArg[0];
 		for (int i = 0; i < a_iArgc; ++i) fRes = std::max(fRes, a_afArg[i]);
 
 		return fRes;
 	}
 
 
 	//---------------------------------------------------------------------------
 	/** \brief Default value recognition callback.
 		\param [in] a_szExpr Pointer to the expression
 		\param [in, out] a_iPos Pointer to an index storing the current position within the expression
 		\param [out] a_fVal Pointer where the value should be stored in case one is found.
 		\return 1 if a value was found 0 otherwise.
 	*/
 	int Parser::IsVal(const char_type* a_szExpr, int* a_iPos, value_type* a_fVal)
 	{
 		value_type fVal(0);
 
 		stringstream_type stream(a_szExpr);
 		stream.seekg(0);        // todo:  check if this really is necessary
 		stream.imbue(Parser::s_locale);
 		stream >> fVal;
 		stringstream_type::pos_type iEnd = stream.tellg(); // Position after reading
 
 		if (iEnd == (stringstream_type::pos_type) - 1)
 			return 0;
 
 		*a_iPos += (int)iEnd;
 		*a_fVal = fVal;
 		return 1;
 	}
 
 
 	//---------------------------------------------------------------------------
 	/** \brief Constructor.
 
 	  Call ParserBase class constructor and trigger Function, Operator and Constant initialization.
 	*/
 	Parser::Parser()
 		:ParserBase()
 	{
 		AddValIdent(IsVal);
 
 		InitCharSets();
 		InitFun();
 		InitConst();
 		InitOprt();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Define the character sets.
 		\sa DefineNameChars, DefineOprtChars, DefineInfixOprtChars
 
 	  This function is used for initializing the default character sets that define
 	  the characters to be useable in function and variable names and operators.
 	*/
 	void Parser::InitCharSets()
 	{
 		DefineNameChars(_T("0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"));
 		DefineOprtChars(_T("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+-*^/?<>=#!$%&|~'_{}"));
 		DefineInfixOprtChars(_T("/+-*^?<>=#!$%&|~'_"));
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Initialize the default functions. */
 	void Parser::InitFun()
 	{
 		if (mu::TypeInfo<mu::value_type>::IsInteger())
 		{
 			// When setting MUP_BASETYPE to an integer type
 			// Place functions for dealing with integer values here
 			// ...
 			// ...
 			// ...
 		}
 		else
 		{
 			// trigonometric functions
 			DefineFun(_T("sin"), Sin);
 			DefineFun(_T("cos"), Cos);
 			DefineFun(_T("tan"), Tan);
 			// arcus functions
 			DefineFun(_T("asin"), ASin);
 			DefineFun(_T("acos"), ACos);
 			DefineFun(_T("atan"), ATan);
 			DefineFun(_T("atan2"), ATan2);
 			// hyperbolic functions
 			DefineFun(_T("sinh"), Sinh);
 			DefineFun(_T("cosh"), Cosh);
 			DefineFun(_T("tanh"), Tanh);
 			// arcus hyperbolic functions
 			DefineFun(_T("asinh"), ASinh);
 			DefineFun(_T("acosh"), ACosh);
 			DefineFun(_T("atanh"), ATanh);
 			// Logarithm functions
 			DefineFun(_T("log2"), Log2);
 			DefineFun(_T("log10"), Log10);
 			DefineFun(_T("log"), Ln);
 			DefineFun(_T("ln"), Ln);
 			// misc
 			DefineFun(_T("exp"), Exp);
 			DefineFun(_T("sqrt"), Sqrt);
 			DefineFun(_T("sign"), Sign);
 			DefineFun(_T("rint"), Rint);
 			DefineFun(_T("abs"), Abs);
 			// Functions with variable number of arguments
 			DefineFun(_T("sum"), Sum);
 			DefineFun(_T("avg"), Avg);
 			DefineFun(_T("min"), Min);
 			DefineFun(_T("max"), Max);
 		}
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Initialize constants.
 
 	  By default the parser recognizes two constants. Pi ("pi") and the Eulerian
 	  number ("_e").
 	*/
 	void Parser::InitConst()
 	{
-		DefineConst(_T("_pi"), (value_type)PARSER_CONST_PI);
-		DefineConst(_T("_e"), (value_type)PARSER_CONST_E);
+		DefineConst(_T("_pi"), MathImpl<value_type>::CONST_PI);
+		DefineConst(_T("_e"), MathImpl<value_type>::CONST_E);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Initialize operators.
 
 	  By default only the unary minus operator is added.
 	*/
 	void Parser::InitOprt()
 	{
 		DefineInfixOprt(_T("-"), UnaryMinus);
 		DefineInfixOprt(_T("+"), UnaryPlus);
 	}
 
 	//---------------------------------------------------------------------------
 	void Parser::OnDetectVar(string_type* /*pExpr*/, int& /*nStart*/, int& /*nEnd*/)
 	{
 		// this is just sample code to illustrate modifying variable names on the fly.
 		// I'm not sure anyone really needs such a feature...
 		/*
 
 
 		string sVar(pExpr->begin()+nStart, pExpr->begin()+nEnd);
 		string sRepl = std::string("_") + sVar + "_";
 
 		int nOrigVarEnd = nEnd;
 		cout << "variable detected!\n";
 		cout << "  Expr: " << *pExpr << "\n";
 		cout << "  Start: " << nStart << "\n";
 		cout << "  End: " << nEnd << "\n";
 		cout << "  Var: \"" << sVar << "\"\n";
 		cout << "  Repl: \"" << sRepl << "\"\n";
 		nEnd = nStart + sRepl.length();
 		cout << "  End: " << nEnd << "\n";
 		pExpr->replace(pExpr->begin()+nStart, pExpr->begin()+nOrigVarEnd, sRepl);
 		cout << "  New expr: " << *pExpr << "\n";
 		*/
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Numerically differentiate with regard to a variable.
 		\param [in] a_Var Pointer to the differentiation variable.
 		\param [in] a_fPos Position at which the differentiation should take place.
 		\param [in] a_fEpsilon Epsilon used for the numerical differentiation.
 
 	  Numerical differentiation uses a 5 point operator yielding a 4th order
 	  formula. The default value for epsilon is 0.00074 which is
 	  numeric_limits<double>::epsilon() ^ (1/5) as suggested in the muparser
 	  forum:
 
 	  http://sourceforge.net/forum/forum.php?thread_id=1994611&forum_id=462843
 	*/
-	value_type Parser::Diff(value_type* a_Var,
-		value_type  a_fPos,
-		value_type  a_fEpsilon) const
+	value_type Parser::Diff(value_type* a_Var, value_type  a_fPos, value_type  a_fEpsilon) const
 	{
 		value_type fRes(0),
 			fBuf(*a_Var),
 			f[4] = { 0,0,0,0 },
 			fEpsilon(a_fEpsilon);
 
 		// Backwards compatible calculation of epsilon inc case the user doesn't provide
 		// his own epsilon
 		if (fEpsilon == 0)
 			fEpsilon = (a_fPos == 0) ? (value_type)1e-10 : (value_type)1e-7 * a_fPos;
 
 		*a_Var = a_fPos + 2 * fEpsilon;  f[0] = Eval();
 		*a_Var = a_fPos + 1 * fEpsilon;  f[1] = Eval();
 		*a_Var = a_fPos - 1 * fEpsilon;  f[2] = Eval();
 		*a_Var = a_fPos - 2 * fEpsilon;  f[3] = Eval();
 		*a_Var = fBuf; // restore variable
 
 		fRes = (-f[0] + 8 * f[1] - 8 * f[2] + f[3]) / (12 * fEpsilon);
 		return fRes;
 	}
 } // namespace mu
diff --git a/src/muParserBase.cpp b/src/muParserBase.cpp
index 0908d47..f9678af 100644
--- a/src/muParserBase.cpp
+++ b/src/muParserBase.cpp
@@ -52,1724 +52,1711 @@ using namespace std;
 namespace mu
 {
 	std::locale ParserBase::s_locale = std::locale(std::locale::classic(), new change_dec_sep<char_type>('.'));
 
 	bool ParserBase::g_DbgDumpCmdCode = false;
 	bool ParserBase::g_DbgDumpStack = false;
 
 	//------------------------------------------------------------------------------
 	/** \brief Identifiers for built in binary operators.
 
 		When defining custom binary operators with #AddOprt(...) make sure not to choose
 		names conflicting with these definitions.
 	*/
 	const char_type* ParserBase::c_DefaultOprt[] =
 	{
 	  _T("<="), _T(">="),  _T("!="),
 	  _T("=="), _T("<"),   _T(">"),
 	  _T("+"),  _T("-"),   _T("*"),
 	  _T("/"),  _T("^"),   _T("&&"),
 	  _T("||"), _T("="),   _T("("),
 	  _T(")"),   _T("?"),  _T(":"), 0
 	};
 
 	const int ParserBase::s_MaxNumOpenMPThreads = 16;
 
 	//------------------------------------------------------------------------------
 	/** \brief Constructor.
 		\param a_szFormula the formula to interpret.
-		\throw ParserException if a_szFormula is null.
+		\throw ParserException if a_szFormula is nullptr.
 	*/
 	ParserBase::ParserBase()
 		:m_pParseFormula(&ParserBase::ParseString)
 		, m_vRPN()
 		, m_vStringBuf()
 		, m_pTokenReader()
 		, m_FunDef()
 		, m_PostOprtDef()
 		, m_InfixOprtDef()
 		, m_OprtDef()
 		, m_ConstDef()
 		, m_StrVarDef()
 		, m_VarDef()
 		, m_bBuiltInOp(true)
 		, m_sNameChars()
 		, m_sOprtChars()
 		, m_sInfixOprtChars()
 		, m_nIfElseCounter(0)
 		, m_vStackBuffer()
 		, m_nFinalResultIdx(0)
 	{
 		InitTokenReader();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Copy constructor.
 
 	  The parser can be safely copy constructed but the bytecode is reset during
 	  copy construction.
 	*/
 	ParserBase::ParserBase(const ParserBase& a_Parser)
 		:m_pParseFormula(&ParserBase::ParseString)
 		, m_vRPN()
 		, m_vStringBuf()
 		, m_pTokenReader()
 		, m_FunDef()
 		, m_PostOprtDef()
 		, m_InfixOprtDef()
 		, m_OprtDef()
 		, m_ConstDef()
 		, m_StrVarDef()
 		, m_VarDef()
 		, m_bBuiltInOp(true)
 		, m_sNameChars()
 		, m_sOprtChars()
 		, m_sInfixOprtChars()
 		, m_nIfElseCounter(0)
 	{
 		m_pTokenReader.reset(new token_reader_type(this));
 		Assign(a_Parser);
 	}
 
 	//---------------------------------------------------------------------------
 	ParserBase::~ParserBase()
 	{}
 
 	//---------------------------------------------------------------------------
 	/** \brief Assignment operator.
 
 	  Implemented by calling Assign(a_Parser). Self assignment is suppressed.
 	  \param a_Parser Object to copy to this.
 	  \return *this
 	  \throw nothrow
 	*/
 	ParserBase& ParserBase::operator=(const ParserBase& a_Parser)
 	{
 		Assign(a_Parser);
 		return *this;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Copy state of a parser object to this.
 
 	  Clears Variables and Functions of this parser.
 	  Copies the states of all internal variables.
 	  Resets parse function to string parse mode.
 
 	  \param a_Parser the source object.
 	*/
 	void ParserBase::Assign(const ParserBase& a_Parser)
 	{
 		if (&a_Parser == this)
 			return;
 
 		// Don't copy bytecode instead cause the parser to create new bytecode
 		// by resetting the parse function.
 		ReInit();
 
 		m_ConstDef = a_Parser.m_ConstDef;         // Copy user define constants
 		m_VarDef = a_Parser.m_VarDef;           // Copy user defined variables
 		m_bBuiltInOp = a_Parser.m_bBuiltInOp;
 		m_vStringBuf = a_Parser.m_vStringBuf;
 		m_vStackBuffer = a_Parser.m_vStackBuffer;
 		m_nFinalResultIdx = a_Parser.m_nFinalResultIdx;
 		m_StrVarDef = a_Parser.m_StrVarDef;
 		m_vStringVarBuf = a_Parser.m_vStringVarBuf;
 		m_nIfElseCounter = a_Parser.m_nIfElseCounter;
 		m_pTokenReader.reset(a_Parser.m_pTokenReader->Clone(this));
 
 		// Copy function and operator callbacks
 		m_FunDef = a_Parser.m_FunDef;             // Copy function definitions
 		m_PostOprtDef = a_Parser.m_PostOprtDef;   // post value unary operators
 		m_InfixOprtDef = a_Parser.m_InfixOprtDef; // unary operators for infix notation
 		m_OprtDef = a_Parser.m_OprtDef;           // binary operators
 
 		m_sNameChars = a_Parser.m_sNameChars;
 		m_sOprtChars = a_Parser.m_sOprtChars;
 		m_sInfixOprtChars = a_Parser.m_sInfixOprtChars;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Set the decimal separator.
 		\param cDecSep Decimal separator as a character value.
 		\sa SetThousandsSep
 
 		By default muparser uses the "C" locale. The decimal separator of this
 		locale is overwritten by the one provided here.
 	*/
 	void ParserBase::SetDecSep(char_type cDecSep)
 	{
 		char_type cThousandsSep = std::use_facet< change_dec_sep<char_type> >(s_locale).thousands_sep();
 		s_locale = std::locale(std::locale("C"), new change_dec_sep<char_type>(cDecSep, cThousandsSep));
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Sets the thousands operator.
 		\param cThousandsSep The thousands separator as a character
 		\sa SetDecSep
 
 		By default muparser uses the "C" locale. The thousands separator of this
 		locale is overwritten by the one provided here.
 	*/
 	void ParserBase::SetThousandsSep(char_type cThousandsSep)
 	{
 		char_type cDecSep = std::use_facet< change_dec_sep<char_type> >(s_locale).decimal_point();
 		s_locale = std::locale(std::locale("C"), new change_dec_sep<char_type>(cDecSep, cThousandsSep));
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Resets the locale.
 
 	  The default locale used "." as decimal separator, no thousands separator and
 	  "," as function argument separator.
 	*/
 	void ParserBase::ResetLocale()
 	{
 		s_locale = std::locale(std::locale("C"), new change_dec_sep<char_type>('.'));
 		SetArgSep(',');
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Initialize the token reader.
 
 	  Create new token reader object and submit pointers to function, operator,
 	  constant and variable definitions.
 
 	  \post m_pTokenReader.get()!=0
 	  \throw nothrow
 	*/
 	void ParserBase::InitTokenReader()
 	{
 		m_pTokenReader.reset(new token_reader_type(this));
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Reset parser to string parsing mode and clear internal buffers.
 
 		Clear bytecode, reset the token reader.
 		\throw nothrow
 	*/
 	void ParserBase::ReInit() const
 	{
 		m_pParseFormula = &ParserBase::ParseString;
 		m_vStringBuf.clear();
 		m_vRPN.clear();
 		m_pTokenReader->ReInit();
 		m_nIfElseCounter = 0;
 	}
 
 	//---------------------------------------------------------------------------
 	void ParserBase::OnDetectVar(string_type* /*pExpr*/, int& /*nStart*/, int& /*nEnd*/)
 	{}
 
 	//---------------------------------------------------------------------------
 	/** \brief Returns the version of muparser.
 		\param eInfo A flag indicating whether the full version info should be
 					 returned or not.
 
 	  Format is as follows: "MAJOR.MINOR (COMPILER_FLAGS)" The COMPILER_FLAGS
 	  are returned only if eInfo==pviFULL.
 	*/
 	string_type ParserBase::GetVersion(EParserVersionInfo eInfo) const
 	{
 		stringstream_type ss;
 
 		ss << MUP_VERSION;
 
 		if (eInfo == pviFULL)
 		{
 			ss << _T(" (") << MUP_VERSION_DATE;
 			ss << std::dec << _T("; ") << sizeof(void*) * 8 << _T("BIT");
 
 #ifdef _DEBUG
 			ss << _T("; DEBUG");
 #else 
 			ss << _T("; RELEASE");
 #endif
 
 #ifdef _UNICODE
 			ss << _T("; UNICODE");
 #else
 #ifdef _MBCS
 			ss << _T("; MBCS");
 #else
 			ss << _T("; ASCII");
 #endif
 #endif
 
 #ifdef MUP_USE_OPENMP
 			ss << _T("; OPENMP");
 #endif
 
 			ss << _T(")");
 		}
 
 		return ss.str();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Add a value parsing function.
 
 		When parsing an expression muParser tries to detect values in the expression
 		string using different valident callbacks. Thus it's possible to parse
 		for hex values, binary values and floating point values.
 	*/
 	void ParserBase::AddValIdent(identfun_type a_pCallback)
 	{
 		m_pTokenReader->AddValIdent(a_pCallback);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Set a function that can create variable pointer for unknown expression variables.
 		\param a_pFactory A pointer to the variable factory.
 		\param pUserData A user defined context pointer.
 	*/
 	void ParserBase::SetVarFactory(facfun_type a_pFactory, void* pUserData)
 	{
 		m_pTokenReader->SetVarCreator(a_pFactory, pUserData);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Add a function or operator callback to the parser. */
 	void ParserBase::AddCallback(const string_type& a_strName,
 		const ParserCallback& a_Callback,
 		funmap_type& a_Storage,
 		const char_type* a_szCharSet)
 	{
 		if (a_Callback.GetAddr() == 0)
 			Error(ecINVALID_FUN_PTR);
 
 		const funmap_type* pFunMap = &a_Storage;
 
 		// Check for conflicting operator or function names
 		if (pFunMap != &m_FunDef && m_FunDef.find(a_strName) != m_FunDef.end())
 			Error(ecNAME_CONFLICT, -1, a_strName);
 
 		if (pFunMap != &m_PostOprtDef && m_PostOprtDef.find(a_strName) != m_PostOprtDef.end())
 			Error(ecNAME_CONFLICT, -1, a_strName);
 
 		if (pFunMap != &m_InfixOprtDef && pFunMap != &m_OprtDef && m_InfixOprtDef.find(a_strName) != m_InfixOprtDef.end())
 			Error(ecNAME_CONFLICT, -1, a_strName);
 
 		if (pFunMap != &m_InfixOprtDef && pFunMap != &m_OprtDef && m_OprtDef.find(a_strName) != m_OprtDef.end())
 			Error(ecNAME_CONFLICT, -1, a_strName);
 
 		CheckOprt(a_strName, a_Callback, a_szCharSet);
 		a_Storage[a_strName] = a_Callback;
 		ReInit();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Check if a name contains invalid characters.
 
 		\throw ParserException if the name contains invalid characters.
 	*/
 	void ParserBase::CheckOprt(const string_type& a_sName,
 		const ParserCallback& a_Callback,
 		const string_type& a_szCharSet) const
 	{
 		if (!a_sName.length() ||
 			(a_sName.find_first_not_of(a_szCharSet) != string_type::npos) ||
 			(a_sName[0] >= '0' && a_sName[0] <= '9'))
 		{
 			switch (a_Callback.GetCode())
 			{
 			case cmOPRT_POSTFIX: Error(ecINVALID_POSTFIX_IDENT, -1, a_sName); break;
 			case cmOPRT_INFIX:   Error(ecINVALID_INFIX_IDENT, -1, a_sName); break;
 			default:             Error(ecINVALID_NAME, -1, a_sName);
 			}
 		}
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Check if a name contains invalid characters.
 
 		\throw ParserException if the name contains invalid characters.
 	*/
 	void ParserBase::CheckName(const string_type& a_sName,
 		const string_type& a_szCharSet) const
 	{
 		if (!a_sName.length() ||
 			(a_sName.find_first_not_of(a_szCharSet) != string_type::npos) ||
 			(a_sName[0] >= '0' && a_sName[0] <= '9'))
 		{
 			Error(ecINVALID_NAME);
 		}
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Set the formula.
 		\param a_strFormula Formula as string_type
 		\throw ParserException in case of syntax errors.
 
 		Triggers first time calculation thus the creation of the bytecode and
 		scanning of used variables.
 	*/
 	void ParserBase::SetExpr(const string_type& a_sExpr)
 	{
 		// Check locale compatibility
 		if (m_pTokenReader->GetArgSep() == std::use_facet<numpunct<char_type> >(s_locale).decimal_point())
 			Error(ecLOCALE);
 
-		// Check maximum allowed expression length. This is just a safety measure to prevent attacks on the engine.
-		// (oss-fuzz.com will throw very long expressions at muparser) 
+		// Check maximum allowed expression length. An arbitrary value small enough so i can debug expressions sent to me
 		if (a_sExpr.length() >= ParserSetup::MaxLenExpression)
 			Error(ecExpressionTooLong, 0, a_sExpr);
 
-		// <ibg> 20060222: Bugfix for Borland-Kylix:
-		// adding a space to the expression will keep Borlands KYLIX from going wild
-		// when calling tellg on a stringstream created from the expression after 
-		// reading a value at the end of an expression. (mu::Parser::IsVal function)
-		// (tellg returns -1 otherwise causing the parser to ignore the value)
-		string_type sBuf(a_sExpr + _T(" "));
-		m_pTokenReader->SetFormula(sBuf);
+		m_pTokenReader->SetFormula(a_sExpr + _T(" "));
 		ReInit();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Get the default symbols used for the built in operators.
 		\sa c_DefaultOprt
 	*/
 	const char_type** ParserBase::GetOprtDef() const
 	{
 		return (const char_type**)(&c_DefaultOprt[0]);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Define the set of valid characters to be used in names of
 			   functions, variables, constants.
 	*/
 	void ParserBase::DefineNameChars(const char_type* a_szCharset)
 	{
 		m_sNameChars = a_szCharset;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Define the set of valid characters to be used in names of
 			   binary operators and postfix operators.
 	*/
 	void ParserBase::DefineOprtChars(const char_type* a_szCharset)
 	{
 		m_sOprtChars = a_szCharset;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Define the set of valid characters to be used in names of
 			   infix operators.
 	*/
 	void ParserBase::DefineInfixOprtChars(const char_type* a_szCharset)
 	{
 		m_sInfixOprtChars = a_szCharset;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Virtual function that defines the characters allowed in name identifiers.
 		\sa #ValidOprtChars, #ValidPrefixOprtChars
 	*/
 	const char_type* ParserBase::ValidNameChars() const
 	{
 		assert(m_sNameChars.size());
 		return m_sNameChars.c_str();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Virtual function that defines the characters allowed in operator definitions.
 		\sa #ValidNameChars, #ValidPrefixOprtChars
 	*/
 	const char_type* ParserBase::ValidOprtChars() const
 	{
 		assert(m_sOprtChars.size());
 		return m_sOprtChars.c_str();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Virtual function that defines the characters allowed in infix operator definitions.
 		\sa #ValidNameChars, #ValidOprtChars
 	*/
 	const char_type* ParserBase::ValidInfixOprtChars() const
 	{
 		assert(m_sInfixOprtChars.size());
 		return m_sInfixOprtChars.c_str();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Add a user defined operator.
 		\post Will reset the Parser to string parsing mode.
 	*/
 	void ParserBase::DefinePostfixOprt(const string_type& a_sName, fun_type1 a_pFun, bool a_bAllowOpt)
 	{
 		if (a_sName.length() > ParserSetup::MaxLenIdentifier)
 			Error(ecIdentifierTooLong);
 
 		AddCallback(a_sName, ParserCallback(a_pFun, a_bAllowOpt, prPOSTFIX, cmOPRT_POSTFIX), m_PostOprtDef, ValidOprtChars());
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Initialize user defined functions.
 
 	  Calls the virtual functions InitFun(), InitConst() and InitOprt().
 	*/
 	void ParserBase::Init()
 	{
 		InitCharSets();
 		InitFun();
 		InitConst();
 		InitOprt();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Add a user defined operator.
 		\post Will reset the Parser to string parsing mode.
 		\param [in] a_sName  operator Identifier
 		\param [in] a_pFun  Operator callback function
 		\param [in] a_iPrec  Operator Precedence (default=prSIGN)
 		\param [in] a_bAllowOpt  True if operator is volatile (default=false)
 		\sa EPrec
 	*/
 	void ParserBase::DefineInfixOprt(const string_type& a_sName, fun_type1 a_pFun, int a_iPrec,	bool a_bAllowOpt)
 	{
 		if (a_sName.length() > ParserSetup::MaxLenIdentifier)
 			Error(ecIdentifierTooLong);
 
 		AddCallback(a_sName, ParserCallback(a_pFun, a_bAllowOpt, a_iPrec, cmOPRT_INFIX), m_InfixOprtDef, ValidInfixOprtChars());
 	}
 
 
 	//---------------------------------------------------------------------------
 	/** \brief Define a binary operator.
 		\param [in] a_sName The identifier of the operator.
 		\param [in] a_pFun Pointer to the callback function.
 		\param [in] a_iPrec Precedence of the operator.
 		\param [in] a_eAssociativity The associativity of the operator.
 		\param [in] a_bAllowOpt If this is true the operator may be optimized away.
 
 		Adds a new Binary operator the the parser instance.
 	*/
 	void ParserBase::DefineOprt(const string_type& a_sName,	fun_type2 a_pFun, unsigned a_iPrec,	EOprtAssociativity a_eAssociativity, bool a_bAllowOpt)
 	{
 		if (a_sName.length() > ParserSetup::MaxLenIdentifier)
 			Error(ecIdentifierTooLong);
 
 		// Check for conflicts with built in operator names
 		for (int i = 0; m_bBuiltInOp && i < cmENDIF; ++i)
 		{
 			if (a_sName == string_type(c_DefaultOprt[i]))
 			{
 				Error(ecBUILTIN_OVERLOAD, -1, a_sName);
 			}
 		}
 
 		AddCallback(a_sName, ParserCallback(a_pFun, a_bAllowOpt, a_iPrec, a_eAssociativity), m_OprtDef,	ValidOprtChars());
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Define a new string constant.
 		\param [in] a_strName The name of the constant.
 		\param [in] a_strVal the value of the constant.
 	*/
 	void ParserBase::DefineStrConst(const string_type& a_strName, const string_type& a_strVal)
 	{
 		// Test if a constant with that names already exists
 		if (m_StrVarDef.find(a_strName) != m_StrVarDef.end())
 			Error(ecNAME_CONFLICT);
 
 		CheckName(a_strName, ValidNameChars());
 
 		m_vStringVarBuf.push_back(a_strVal);                // Store variable string in internal buffer
 		m_StrVarDef[a_strName] = m_vStringVarBuf.size() - 1;  // bind buffer index to variable name
 
 		ReInit();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Add a user defined variable.
 		\param [in] a_sName the variable name
 		\param [in] a_pVar A pointer to the variable value.
 		\post Will reset the Parser to string parsing mode.
-		\throw ParserException in case the name contains invalid signs or a_pVar is NULL.
+		\throw ParserException in case the name contains invalid signs or a_pVar is nullptr.
 	*/
 	void ParserBase::DefineVar(const string_type& a_sName, value_type* a_pVar)
 	{
 		if (a_pVar == 0)
 			Error(ecINVALID_VAR_PTR);
 
 		if (a_sName.length() > ParserSetup::MaxLenIdentifier)
 			Error(ecIdentifierTooLong);
 
 		// Test if a constant with that names already exists
 		if (m_ConstDef.find(a_sName) != m_ConstDef.end())
 			Error(ecNAME_CONFLICT);
 
 		CheckName(a_sName, ValidNameChars());
 		m_VarDef[a_sName] = a_pVar;
 		ReInit();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Add a user defined constant.
 		\param [in] a_sName The name of the constant.
 		\param [in] a_fVal the value of the constant.
 		\post Will reset the Parser to string parsing mode.
 		\throw ParserException in case the name contains invalid signs.
 	*/
 	void ParserBase::DefineConst(const string_type& a_sName, value_type a_fVal)
 	{
 		if (a_sName.length() > ParserSetup::MaxLenIdentifier)
 			Error(ecIdentifierTooLong);
 
 		CheckName(a_sName, ValidNameChars());
 		m_ConstDef[a_sName] = a_fVal;
 		ReInit();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Get operator priority.
 		\throw ParserException if a_Oprt is no operator code
 	*/
 	int ParserBase::GetOprtPrecedence(const token_type& a_Tok) const
 	{
 		switch (a_Tok.GetCode())
 		{
 			// built in operators
 		case cmEND:      return -5;
 		case cmARG_SEP:  return -4;
 		case cmASSIGN:   return -1;
 		case cmELSE:
 		case cmIF:       return  0;
 		case cmLAND:     return  prLAND;
 		case cmLOR:      return  prLOR;
 		case cmLT:
 		case cmGT:
 		case cmLE:
 		case cmGE:
 		case cmNEQ:
 		case cmEQ:       return  prCMP;
 		case cmADD:
 		case cmSUB:      return  prADD_SUB;
 		case cmMUL:
 		case cmDIV:      return  prMUL_DIV;
 		case cmPOW:      return  prPOW;
 
 			// user defined binary operators
 		case cmOPRT_INFIX:
 		case cmOPRT_BIN: return a_Tok.GetPri();
 		default:  Error(ecINTERNAL_ERROR, 5);
 			return 999;
 		}
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Get operator priority.
 		\throw ParserException if a_Oprt is no operator code
 	*/
 	EOprtAssociativity ParserBase::GetOprtAssociativity(const token_type& a_Tok) const
 	{
 		switch (a_Tok.GetCode())
 		{
 		case cmASSIGN:
 		case cmLAND:
 		case cmLOR:
 		case cmLT:
 		case cmGT:
 		case cmLE:
 		case cmGE:
 		case cmNEQ:
 		case cmEQ:
 		case cmADD:
 		case cmSUB:
 		case cmMUL:
 		case cmDIV:      return oaLEFT;
 		case cmPOW:      return oaRIGHT;
 		case cmOPRT_BIN: return a_Tok.GetAssociativity();
 		default:         return oaNONE;
 		}
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Return a map containing the used variables only. */
 	const varmap_type& ParserBase::GetUsedVar() const
 	{
 		try
 		{
 			m_pTokenReader->IgnoreUndefVar(true);
 			CreateRPN(); // try to create bytecode, but don't use it for any further calculations since it
 						 // may contain references to nonexisting variables.
 			m_pParseFormula = &ParserBase::ParseString;
 			m_pTokenReader->IgnoreUndefVar(false);
 		}
 		catch (exception_type& /*e*/)
 		{
 			// Make sure to stay in string parse mode, don't call ReInit()
 			// because it deletes the array with the used variables
 			m_pParseFormula = &ParserBase::ParseString;
 			m_pTokenReader->IgnoreUndefVar(false);
 			throw;
 		}
 
 		return m_pTokenReader->GetUsedVar();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Return a map containing the used variables only. */
 	const varmap_type& ParserBase::GetVar() const
 	{
 		return m_VarDef;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Return a map containing all parser constants. */
 	const valmap_type& ParserBase::GetConst() const
 	{
 		return m_ConstDef;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Return prototypes of all parser functions.
 		\return #m_FunDef
 		\sa FunProt
 		\throw nothrow
 
 		The return type is a map of the public type #funmap_type containing the prototype
 		definitions for all numerical parser functions. String functions are not part of
 		this map. The Prototype definition is encapsulated in objects of the class FunProt
 		one per parser function each associated with function names via a map construct.
 	*/
 	const funmap_type& ParserBase::GetFunDef() const
 	{
 		return m_FunDef;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Retrieve the formula. */
 	const string_type& ParserBase::GetExpr() const
 	{
 		return m_pTokenReader->GetExpr();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Execute a function that takes a single string argument.
 		\param a_FunTok Function token.
 		\throw exception_type If the function token is not a string function
 	*/
 	ParserBase::token_type ParserBase::ApplyStrFunc(const token_type& a_FunTok,
 		const std::vector<token_type>& a_vArg) const
 	{
 		if (a_vArg.back().GetCode() != cmSTRING)
 			Error(ecSTRING_EXPECTED, m_pTokenReader->GetPos(), a_FunTok.GetAsString());
 
 		token_type  valTok;
 		generic_fun_type pFunc = a_FunTok.GetFuncAddr();
 		assert(pFunc);
 
 		try
 		{
 			// Check function arguments; write dummy value into valtok to represent the result
 			switch (a_FunTok.GetArgCount())
 			{
 			case 0: valTok.SetVal(1); a_vArg[0].GetAsString();  break;
 			case 1: valTok.SetVal(1); a_vArg[1].GetAsString();  a_vArg[0].GetVal();  break;
 			case 2: valTok.SetVal(1); a_vArg[2].GetAsString();  a_vArg[1].GetVal();  a_vArg[0].GetVal();  break;
 			case 3: valTok.SetVal(1); a_vArg[3].GetAsString();  a_vArg[2].GetVal();  a_vArg[1].GetVal();  a_vArg[0].GetVal();  break;
 			case 4: valTok.SetVal(1); a_vArg[4].GetAsString();  a_vArg[3].GetVal();  a_vArg[2].GetVal();  a_vArg[1].GetVal();  a_vArg[0].GetVal();  break;
 			default: Error(ecINTERNAL_ERROR);
 			}
 		}
 		catch (ParserError&)
 		{
 			Error(ecVAL_EXPECTED, m_pTokenReader->GetPos(), a_FunTok.GetAsString());
 		}
 
 		// string functions won't be optimized
 		m_vRPN.AddStrFun(pFunc, a_FunTok.GetArgCount(), a_vArg.back().GetIdx());
 
 		// Push dummy value representing the function result to the stack
 		return valTok;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Apply a function token.
 		\param iArgCount Number of Arguments actually gathered used only for multiarg functions.
 		\post The result is pushed to the value stack
 		\post The function token is removed from the stack
 		\throw exception_type if Argument count does not match function requirements.
 	*/
-	void ParserBase::ApplyFunc(ParserStack<token_type>& a_stOpt,
-		ParserStack<token_type>& a_stVal,
-		int a_iArgCount) const
+	void ParserBase::ApplyFunc(ParserStack<token_type>& a_stOpt, ParserStack<token_type>& a_stVal, int a_iArgCount) const
 	{
 		assert(m_pTokenReader.get());
 
 		// Operator stack empty or does not contain tokens with callback functions
 		if (a_stOpt.empty() || a_stOpt.top().GetFuncAddr() == 0)
 			return;
 
 		token_type funTok = a_stOpt.pop();
 		assert(funTok.GetFuncAddr());
 
 		// Binary operators must rely on their internal operator number
 		// since counting of operators relies on commas for function arguments
 		// binary operators do not have commas in their expression
 		int iArgCount = (funTok.GetCode() == cmOPRT_BIN) ? funTok.GetArgCount() : a_iArgCount;
 
 		// determine how many parameters the function needs. To remember iArgCount includes the 
 		// string parameter whilst GetArgCount() counts only numeric parameters.
 		int iArgRequired = funTok.GetArgCount() + ((funTok.GetType() == tpSTR) ? 1 : 0);
 
 		// That's the number of numerical parameters
 		int iArgNumerical = iArgCount - ((funTok.GetType() == tpSTR) ? 1 : 0);
 
 		if (funTok.GetCode() == cmFUNC_STR && iArgCount - iArgNumerical > 1)
 			Error(ecINTERNAL_ERROR);
 
 		if (funTok.GetArgCount() >= 0 && iArgCount > iArgRequired)
 			Error(ecTOO_MANY_PARAMS, m_pTokenReader->GetPos() - 1, funTok.GetAsString());
 
 		if (funTok.GetCode() != cmOPRT_BIN && iArgCount < iArgRequired)
 			Error(ecTOO_FEW_PARAMS, m_pTokenReader->GetPos() - 1, funTok.GetAsString());
 
 		if (funTok.GetCode() == cmFUNC_STR && iArgCount > iArgRequired)
 			Error(ecTOO_MANY_PARAMS, m_pTokenReader->GetPos() - 1, funTok.GetAsString());
 
 		// Collect the numeric function arguments from the value stack and store them
 		// in a vector
 		std::vector<token_type> stArg;
 		for (int i = 0; i < iArgNumerical; ++i)
 		{
+			if (a_stVal.empty())
+				Error(ecINTERNAL_ERROR, m_pTokenReader->GetPos(), funTok.GetAsString());
+
 			stArg.push_back(a_stVal.pop());
 			if (stArg.back().GetType() == tpSTR && funTok.GetType() != tpSTR)
 				Error(ecVAL_EXPECTED, m_pTokenReader->GetPos(), funTok.GetAsString());
 		}
 
 		switch (funTok.GetCode())
 		{
 		case  cmFUNC_STR:
+			if (a_stVal.empty())
+				Error(ecINTERNAL_ERROR, m_pTokenReader->GetPos(), funTok.GetAsString());
+
 			stArg.push_back(a_stVal.pop());
 
 			if (stArg.back().GetType() == tpSTR && funTok.GetType() != tpSTR)
 				Error(ecVAL_EXPECTED, m_pTokenReader->GetPos(), funTok.GetAsString());
 
 			ApplyStrFunc(funTok, stArg);
 			break;
 
 		case  cmFUNC_BULK:
 			m_vRPN.AddBulkFun(funTok.GetFuncAddr(), (int)stArg.size());
 			break;
 
 		case  cmOPRT_BIN:
 		case  cmOPRT_POSTFIX:
 		case  cmOPRT_INFIX:
 		case  cmFUNC:
 			if (funTok.GetArgCount() == -1 && iArgCount == 0)
 				Error(ecTOO_FEW_PARAMS, m_pTokenReader->GetPos(), funTok.GetAsString());
 
 			m_vRPN.AddFun(funTok.GetFuncAddr(), (funTok.GetArgCount() == -1) ? -iArgNumerical : iArgNumerical);
 			break;
 		default:
 			break;
 		}
 
 		// Push dummy value representing the function result to the stack
 		token_type token;
 		token.SetVal(1);
 		a_stVal.push(token);
 	}
 
 	//---------------------------------------------------------------------------
 	void ParserBase::ApplyIfElse(ParserStack<token_type>& a_stOpt, ParserStack<token_type>& a_stVal) const
 	{
 		// Check if there is an if Else clause to be calculated
 		while (a_stOpt.size() && a_stOpt.top().GetCode() == cmELSE)
 		{
 			token_type opElse = a_stOpt.pop();
 			MUP_ASSERT(!a_stOpt.empty())
 
 			// Take the value associated with the else branch from the value stack
 			token_type vVal2 = a_stVal.pop();
 			MUP_ASSERT(a_stVal.size() >= 2);
 
 			// it then else is a ternary operator Pop all three values from the value s
 			// tack and just return the right value
 			token_type vVal1 = a_stVal.pop();
 			token_type vExpr = a_stVal.pop();
 
 			a_stVal.push((vExpr.GetVal() != 0) ? vVal1 : vVal2);
 
 			token_type opIf = a_stOpt.pop();
 			MUP_ASSERT(opElse.GetCode() == cmELSE);
 
 			if (opIf.GetCode() != cmIF)
 				Error(ecMISPLACED_COLON, m_pTokenReader->GetPos());
 
 			m_vRPN.AddIfElse(cmENDIF);
 		} // while pending if-else-clause found
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Performs the necessary steps to write code for
 			   the execution of binary operators into the bytecode.
 	*/
 	void ParserBase::ApplyBinOprt(ParserStack<token_type>& a_stOpt, ParserStack<token_type>& a_stVal) const
 	{
 		// is it a user defined binary operator?
 		if (a_stOpt.top().GetCode() == cmOPRT_BIN)
 		{
 			ApplyFunc(a_stOpt, a_stVal, 2);
 		}
 		else
 		{
 			if (a_stVal.size() < 2)
 				Error(ecINTERNAL_ERROR, m_pTokenReader->GetPos(), _T("ApplyBinOprt: not enough values in value stack!"));
 
 			token_type valTok1 = a_stVal.pop();
 			token_type valTok2 = a_stVal.pop();
 			token_type optTok = a_stOpt.pop();
 			token_type resTok;
 
 			if (valTok1.GetType() != valTok2.GetType() ||
 				(valTok1.GetType() == tpSTR && valTok2.GetType() == tpSTR))
 				Error(ecOPRT_TYPE_CONFLICT, m_pTokenReader->GetPos(), optTok.GetAsString());
 
 			if (optTok.GetCode() == cmASSIGN)
 			{
 				if (valTok2.GetCode() != cmVAR)
 					Error(ecUNEXPECTED_OPERATOR, -1, _T("="));
 
 				m_vRPN.AddAssignOp(valTok2.GetVar());
 			}
 			else
 				m_vRPN.AddOp(optTok.GetCode());
 
 			resTok.SetVal(1);
 			a_stVal.push(resTok);
 		}
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Apply a binary operator.
 		\param a_stOpt The operator stack
 		\param a_stVal The value stack
 	*/
 	void ParserBase::ApplyRemainingOprt(ParserStack<token_type>& stOpt, ParserStack<token_type>& stVal) const
 	{
 		while (	stOpt.size() && 
 				stOpt.top().GetCode() != cmBO && 
 				stOpt.top().GetCode() != cmIF)
 		{
 			token_type tok = stOpt.top();
 			switch (tok.GetCode())
 			{
 			case cmOPRT_INFIX:
 			case cmOPRT_BIN:
 			case cmLE:
 			case cmGE:
 			case cmNEQ:
 			case cmEQ:
 			case cmLT:
 			case cmGT:
 			case cmADD:
 			case cmSUB:
 			case cmMUL:
 			case cmDIV:
 			case cmPOW:
 			case cmLAND:
 			case cmLOR:
 			case cmASSIGN:
 				if (stOpt.top().GetCode() == cmOPRT_INFIX)
 					ApplyFunc(stOpt, stVal, 1);
 				else
 					ApplyBinOprt(stOpt, stVal);
 				break;
 
 			case cmELSE:
 				ApplyIfElse(stOpt, stVal);
 				break;
 
 			default:
 				Error(ecINTERNAL_ERROR);
 			}
 		}
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Parse the command code.
 		\sa ParseString(...)
 
 		Command code contains precalculated stack positions of the values and the
 		associated operators. The Stack is filled beginning from index one the
 		value at index zero is not used at all.
 	*/
 	value_type ParserBase::ParseCmdCode() const
 	{
 		return ParseCmdCodeBulk(0, 0);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Evaluate the RPN.
 		\param nOffset The offset added to variable addresses (for bulk mode)
 		\param nThreadID OpenMP Thread id of the calling thread
 	*/
 	value_type ParserBase::ParseCmdCodeBulk(int nOffset, int nThreadID) const
 	{
 		assert(nThreadID <= s_MaxNumOpenMPThreads);
 
 		// Note: The check for nOffset==0 and nThreadID here is not necessary but 
 		//       brings a minor performance gain when not in bulk mode.
 		value_type* Stack = ((nOffset == 0) && (nThreadID == 0)) ? &m_vStackBuffer[0] : &m_vStackBuffer[nThreadID * (m_vStackBuffer.size() / s_MaxNumOpenMPThreads)];
 		value_type buf;
 		int sidx(0);
 		for (const SToken* pTok = m_vRPN.GetBase(); pTok->Cmd != cmEND; ++pTok)
 		{
 			switch (pTok->Cmd)
 			{
 				// built in binary operators
 			case  cmLE:   --sidx; Stack[sidx] = Stack[sidx] <= Stack[sidx + 1]; continue;
 			case  cmGE:   --sidx; Stack[sidx] = Stack[sidx] >= Stack[sidx + 1]; continue;
 			case  cmNEQ:  --sidx; Stack[sidx] = Stack[sidx] != Stack[sidx + 1]; continue;
 			case  cmEQ:   --sidx; Stack[sidx] = Stack[sidx] == Stack[sidx + 1]; continue;
 			case  cmLT:   --sidx; Stack[sidx] = Stack[sidx] < Stack[sidx + 1];  continue;
 			case  cmGT:   --sidx; Stack[sidx] = Stack[sidx] > Stack[sidx + 1];  continue;
 			case  cmADD:  --sidx; Stack[sidx] += Stack[1 + sidx]; continue;
 			case  cmSUB:  --sidx; Stack[sidx] -= Stack[1 + sidx]; continue;
 			case  cmMUL:  --sidx; Stack[sidx] *= Stack[1 + sidx]; continue;
 			case  cmDIV:  --sidx;
 				Stack[sidx] /= Stack[1 + sidx];
 				continue;
 
 			case  cmPOW:
 				--sidx; Stack[sidx] = MathImpl<value_type>::Pow(Stack[sidx], Stack[1 + sidx]);
 				continue;
 
 			case  cmLAND: --sidx; Stack[sidx] = Stack[sidx] && Stack[sidx + 1]; continue;
 			case  cmLOR:  --sidx; Stack[sidx] = Stack[sidx] || Stack[sidx + 1]; continue;
 
 			case  cmASSIGN:
 				// Bugfix for Bulkmode:
 				// for details see:
 				//    https://groups.google.com/forum/embed/?place=forum/muparser-dev&showsearch=true&showpopout=true&showtabs=false&parenturl=http://muparser.beltoforion.de/mup_forum.html&afterlogin&pli=1#!topic/muparser-dev/szgatgoHTws
 				--sidx; Stack[sidx] = *(pTok->Oprt.ptr + nOffset) = Stack[sidx + 1]; continue;
 				// original code:
 				//--sidx; Stack[sidx] = *pTok->Oprt.ptr = Stack[sidx+1]; continue;
 
 			case  cmIF:
 				if (Stack[sidx--] == 0)
 					pTok += pTok->Oprt.offset;
 				continue;
 
 			case  cmELSE:
 				pTok += pTok->Oprt.offset;
 				continue;
 
 			case  cmENDIF:
 				continue;
 
-				//case  cmARG_SEP:
-				//      MUP_FAIL(INVALID_CODE_IN_BYTECODE);
-				//      continue;
-
-				// value and variable tokens
+			// value and variable tokens
 			case  cmVAR:    Stack[++sidx] = *(pTok->Val.ptr + nOffset);  continue;
 			case  cmVAL:    Stack[++sidx] = pTok->Val.data2;  continue;
 
 			case  cmVARPOW2: buf = *(pTok->Val.ptr + nOffset);
 				Stack[++sidx] = buf * buf;
 				continue;
 
 			case  cmVARPOW3: buf = *(pTok->Val.ptr + nOffset);
 				Stack[++sidx] = buf * buf * buf;
 				continue;
 
 			case  cmVARPOW4: buf = *(pTok->Val.ptr + nOffset);
 				Stack[++sidx] = buf * buf * buf * buf;
 				continue;
 
 			case  cmVARMUL:  Stack[++sidx] = *(pTok->Val.ptr + nOffset) * pTok->Val.data + pTok->Val.data2;
 				continue;
 
 				// Next is treatment of numeric functions
 			case  cmFUNC:
 			{
 				int iArgCount = pTok->Fun.argc;
 
 				// switch according to argument count
 				switch (iArgCount)
 				{
 				case 0: sidx += 1; Stack[sidx] = (*(fun_type0)pTok->Fun.ptr)(); continue;
 				case 1:            Stack[sidx] = (*(fun_type1)pTok->Fun.ptr)(Stack[sidx]);   continue;
 				case 2: sidx -= 1; Stack[sidx] = (*(fun_type2)pTok->Fun.ptr)(Stack[sidx], Stack[sidx + 1]); continue;
 				case 3: sidx -= 2; Stack[sidx] = (*(fun_type3)pTok->Fun.ptr)(Stack[sidx], Stack[sidx + 1], Stack[sidx + 2]); continue;
 				case 4: sidx -= 3; Stack[sidx] = (*(fun_type4)pTok->Fun.ptr)(Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3]); continue;
 				case 5: sidx -= 4; Stack[sidx] = (*(fun_type5)pTok->Fun.ptr)(Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3], Stack[sidx + 4]); continue;
 				case 6: sidx -= 5; Stack[sidx] = (*(fun_type6)pTok->Fun.ptr)(Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3], Stack[sidx + 4], Stack[sidx + 5]); continue;
 				case 7: sidx -= 6; Stack[sidx] = (*(fun_type7)pTok->Fun.ptr)(Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3], Stack[sidx + 4], Stack[sidx + 5], Stack[sidx + 6]); continue;
 				case 8: sidx -= 7; Stack[sidx] = (*(fun_type8)pTok->Fun.ptr)(Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3], Stack[sidx + 4], Stack[sidx + 5], Stack[sidx + 6], Stack[sidx + 7]); continue;
 				case 9: sidx -= 8; Stack[sidx] = (*(fun_type9)pTok->Fun.ptr)(Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3], Stack[sidx + 4], Stack[sidx + 5], Stack[sidx + 6], Stack[sidx + 7], Stack[sidx + 8]); continue;
 				case 10:sidx -= 9; Stack[sidx] = (*(fun_type10)pTok->Fun.ptr)(Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3], Stack[sidx + 4], Stack[sidx + 5], Stack[sidx + 6], Stack[sidx + 7], Stack[sidx + 8], Stack[sidx + 9]); continue;
 				default:
 					if (iArgCount > 0) // function with variable arguments store the number as a negative value
 						Error(ecINTERNAL_ERROR, 1);
 
 					sidx -= -iArgCount - 1;
+					if (sidx < 0)
+						Error(ecINTERNAL_ERROR, 2);
+
 					Stack[sidx] = (*(multfun_type)pTok->Fun.ptr)(&Stack[sidx], -iArgCount);
 					continue;
 				}
 			}
 
 			// Next is treatment of string functions
 			case  cmFUNC_STR:
 			{
 				sidx -= pTok->Fun.argc - 1;
 
 				// The index of the string argument in the string table
 				int iIdxStack = pTok->Fun.idx;
 				if (iIdxStack < 0 || iIdxStack >= m_vStringBuf.size())
 					Error(ecINTERNAL_ERROR, m_pTokenReader->GetPos());
 
 				switch (pTok->Fun.argc)  // switch according to argument count
 				{
 				case 0: Stack[sidx] = (*(strfun_type1)pTok->Fun.ptr)(m_vStringBuf[iIdxStack].c_str()); continue;
 				case 1: Stack[sidx] = (*(strfun_type2)pTok->Fun.ptr)(m_vStringBuf[iIdxStack].c_str(), Stack[sidx]); continue;
 				case 2: Stack[sidx] = (*(strfun_type3)pTok->Fun.ptr)(m_vStringBuf[iIdxStack].c_str(), Stack[sidx], Stack[sidx + 1]); continue;
 				case 3: Stack[sidx] = (*(strfun_type4)pTok->Fun.ptr)(m_vStringBuf[iIdxStack].c_str(), Stack[sidx], Stack[sidx + 1], Stack[sidx + 2]); continue;
 				case 4: Stack[sidx] = (*(strfun_type5)pTok->Fun.ptr)(m_vStringBuf[iIdxStack].c_str(), Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3]); continue;
 				}
 
 				continue;
 			}
 
 			case  cmFUNC_BULK:
 			{
 				int iArgCount = pTok->Fun.argc;
 
 				// switch according to argument count
 				switch (iArgCount)
 				{
 				case 0: sidx += 1; Stack[sidx] = (*(bulkfun_type0)pTok->Fun.ptr)(nOffset, nThreadID); continue;
 				case 1:            Stack[sidx] = (*(bulkfun_type1)pTok->Fun.ptr)(nOffset, nThreadID, Stack[sidx]); continue;
 				case 2: sidx -= 1; Stack[sidx] = (*(bulkfun_type2)pTok->Fun.ptr)(nOffset, nThreadID, Stack[sidx], Stack[sidx + 1]); continue;
 				case 3: sidx -= 2; Stack[sidx] = (*(bulkfun_type3)pTok->Fun.ptr)(nOffset, nThreadID, Stack[sidx], Stack[sidx + 1], Stack[sidx + 2]); continue;
 				case 4: sidx -= 3; Stack[sidx] = (*(bulkfun_type4)pTok->Fun.ptr)(nOffset, nThreadID, Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3]); continue;
 				case 5: sidx -= 4; Stack[sidx] = (*(bulkfun_type5)pTok->Fun.ptr)(nOffset, nThreadID, Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3], Stack[sidx + 4]); continue;
 				case 6: sidx -= 5; Stack[sidx] = (*(bulkfun_type6)pTok->Fun.ptr)(nOffset, nThreadID, Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3], Stack[sidx + 4], Stack[sidx + 5]); continue;
 				case 7: sidx -= 6; Stack[sidx] = (*(bulkfun_type7)pTok->Fun.ptr)(nOffset, nThreadID, Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3], Stack[sidx + 4], Stack[sidx + 5], Stack[sidx + 6]); continue;
 				case 8: sidx -= 7; Stack[sidx] = (*(bulkfun_type8)pTok->Fun.ptr)(nOffset, nThreadID, Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3], Stack[sidx + 4], Stack[sidx + 5], Stack[sidx + 6], Stack[sidx + 7]); continue;
 				case 9: sidx -= 8; Stack[sidx] = (*(bulkfun_type9)pTok->Fun.ptr)(nOffset, nThreadID, Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3], Stack[sidx + 4], Stack[sidx + 5], Stack[sidx + 6], Stack[sidx + 7], Stack[sidx + 8]); continue;
 				case 10:sidx -= 9; Stack[sidx] = (*(bulkfun_type10)pTok->Fun.ptr)(nOffset, nThreadID, Stack[sidx], Stack[sidx + 1], Stack[sidx + 2], Stack[sidx + 3], Stack[sidx + 4], Stack[sidx + 5], Stack[sidx + 6], Stack[sidx + 7], Stack[sidx + 8], Stack[sidx + 9]); continue;
 				default:
 					Error(ecINTERNAL_ERROR, 2);
 					continue;
 				}
 			}
 
 			default:
 				Error(ecINTERNAL_ERROR, 3);
 				return 0;
 			} // switch CmdCode
 		} // for all bytecode tokens
 
 		return Stack[m_nFinalResultIdx];
 	}
 
 	//---------------------------------------------------------------------------
 	void ParserBase::CreateRPN() const
 	{
 		if (!m_pTokenReader->GetExpr().length())
 			Error(ecUNEXPECTED_EOF, 0);
 
 		ParserStack<token_type> stOpt, stVal;
 		ParserStack<int> stArgCount;
 		token_type opta, opt;  // for storing operators
 		token_type val, tval;  // for storing value
 
 		ReInit();
 
 		// The outermost counter counts the number of separated items
 		// such as in "a=10,b=20,c=c+a"
 		stArgCount.push(1);
 
 		for (;;)
 		{
 			opt = m_pTokenReader->ReadNextToken();
 
 			switch (opt.GetCode())
 			{
 				//
 				// Next three are different kind of value entries
 				//
 			case cmSTRING:
 				opt.SetIdx((int)m_vStringBuf.size());      // Assign buffer index to token 
 				stVal.push(opt);
 				m_vStringBuf.push_back(opt.GetAsString()); // Store string in internal buffer
 				break;
 
 			case cmVAR:
 				stVal.push(opt);
 				m_vRPN.AddVar(static_cast<value_type*>(opt.GetVar()));
 				break;
 
 			case cmVAL:
 				stVal.push(opt);
 				m_vRPN.AddVal(opt.GetVal());
 				break;
 
 			case cmELSE:
 				m_nIfElseCounter--;
 				if (m_nIfElseCounter < 0)
 					Error(ecMISPLACED_COLON, m_pTokenReader->GetPos());
 
 				ApplyRemainingOprt(stOpt, stVal);
 				m_vRPN.AddIfElse(cmELSE);
 				stOpt.push(opt);
 				break;
 
 
 			case cmARG_SEP:
 				if (stArgCount.empty())
 					Error(ecUNEXPECTED_ARG_SEP, m_pTokenReader->GetPos());
 
 				++stArgCount.top();
 				// Falls through.
 				// intentional (no break!)
 
 			case cmEND:
 				ApplyRemainingOprt(stOpt, stVal);
 				break;
 
 			case cmBC:
 			{
 				// The argument count for parameterless functions is zero
 				// by default an opening bracket sets parameter count to 1
 				// in preparation of arguments to come. If the last token
 				// was an opening bracket we know better...
 				if (opta.GetCode() == cmBO)
 					--stArgCount.top();
 
 				ApplyRemainingOprt(stOpt, stVal);
 
 				// Check if the bracket content has been evaluated completely
 				if (stOpt.size() && stOpt.top().GetCode() == cmBO)
 				{
 					// if opt is ")" and opta is "(" the bracket has been evaluated, now its time to check
 					// if there is either a function or a sign pending
 					// neither the opening nor the closing bracket will be pushed back to
 					// the operator stack
 					// Check if a function is standing in front of the opening bracket, 
 					// if yes evaluate it afterwards check for infix operators
 					assert(stArgCount.size());
 					int iArgCount = stArgCount.pop();
 
 					stOpt.pop(); // Take opening bracket from stack
 
 					if (iArgCount > 1 && (stOpt.size() == 0 ||
 						(stOpt.top().GetCode() != cmFUNC &&
 							stOpt.top().GetCode() != cmFUNC_BULK &&
 							stOpt.top().GetCode() != cmFUNC_STR)))
 						Error(ecUNEXPECTED_ARG, m_pTokenReader->GetPos());
 
 					// The opening bracket was popped from the stack now check if there
 					// was a function before this bracket
 					if (stOpt.size() &&
 						stOpt.top().GetCode() != cmOPRT_INFIX &&
 						stOpt.top().GetCode() != cmOPRT_BIN &&
 						stOpt.top().GetFuncAddr() != 0)
 					{
 						ApplyFunc(stOpt, stVal, iArgCount);
 					}
 				}
 			} // if bracket content is evaluated
 			break;
 
 			//
 			// Next are the binary operator entries
 			//
 			case cmIF:
 				m_nIfElseCounter++;
 				// Falls through.
 				// intentional (no break!)
 
 			case cmLAND:
 			case cmLOR:
 			case cmLT:
 			case cmGT:
 			case cmLE:
 			case cmGE:
 			case cmNEQ:
 			case cmEQ:
 			case cmADD:
 			case cmSUB:
 			case cmMUL:
 			case cmDIV:
 			case cmPOW:
 			case cmASSIGN:
 			case cmOPRT_BIN:
 
 				// A binary operator (user defined or built in) has been found. 
-				while (stOpt.size() &&
+				while (
+					stOpt.size() &&
 					stOpt.top().GetCode() != cmBO &&
 					stOpt.top().GetCode() != cmELSE &&
 					stOpt.top().GetCode() != cmIF)
 				{
 					int nPrec1 = GetOprtPrecedence(stOpt.top()),
 						nPrec2 = GetOprtPrecedence(opt);
 
 					if (stOpt.top().GetCode() == opt.GetCode())
 					{
 
 						// Deal with operator associativity
 						EOprtAssociativity eOprtAsct = GetOprtAssociativity(opt);
 						if ((eOprtAsct == oaRIGHT && (nPrec1 <= nPrec2)) ||
 							(eOprtAsct == oaLEFT && (nPrec1 < nPrec2)))
 						{
 							break;
 						}
 					}
 					else if (nPrec1 < nPrec2)
 					{
 						// In case the operators are not equal the precedence decides alone...
 						break;
 					}
 
 					if (stOpt.top().GetCode() == cmOPRT_INFIX)
 						ApplyFunc(stOpt, stVal, 1);
 					else
 						ApplyBinOprt(stOpt, stVal);
 				} // while ( ... )
 
 				if (opt.GetCode() == cmIF)
 					m_vRPN.AddIfElse(opt.GetCode());
 
 				// The operator can't be evaluated right now, push back to the operator stack
 				stOpt.push(opt);
 				break;
 
 				//
 				// Last section contains functions and operators implicitly mapped to functions
 				//
 			case cmBO:
 				stArgCount.push(1);
 				stOpt.push(opt);
 				break;
 
 			case cmOPRT_INFIX:
 			case cmFUNC:
 			case cmFUNC_BULK:
 			case cmFUNC_STR:
 				stOpt.push(opt);
 				break;
 
 			case cmOPRT_POSTFIX:
 				stOpt.push(opt);
 				ApplyFunc(stOpt, stVal, 1);  // this is the postfix operator
 				break;
 
 			default:  Error(ecINTERNAL_ERROR, 3);
 			} // end of switch operator-token
 
 			opta = opt;
 
 			if (opt.GetCode() == cmEND)
 			{
 				m_vRPN.Finalize();
 				break;
 			}
 
 			if (ParserBase::g_DbgDumpStack)
 			{
 				StackDump(stVal, stOpt);
 				m_vRPN.AsciiDump();
 			}
 		} // while (true)
 
 		if (ParserBase::g_DbgDumpCmdCode)
 			m_vRPN.AsciiDump();
 
 		if (m_nIfElseCounter > 0)
 			Error(ecMISSING_ELSE_CLAUSE);
 
 		// get the last value (= final result) from the stack
 		MUP_ASSERT(stArgCount.size() == 1);
 		m_nFinalResultIdx = stArgCount.top();
 		if (m_nFinalResultIdx == 0)
 			Error(ecINTERNAL_ERROR, 9);
 
 		if (stVal.size() == 0)
 			Error(ecEMPTY_EXPRESSION);
 
 		if (stVal.top().GetType() != tpDBL)
 			Error(ecSTR_RESULT);
 
 		m_vStackBuffer.resize(m_vRPN.GetMaxStackSize() * s_MaxNumOpenMPThreads);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief One of the two main parse functions.
 		\sa ParseCmdCode(...)
 
 	  Parse expression from input string. Perform syntax checking and create
 	  bytecode. After parsing the string and creating the bytecode the function
 	  pointer #m_pParseFormula will be changed to the second parse routine the
 	  uses bytecode instead of string parsing.
 	*/
 	value_type ParserBase::ParseString() const
 	{
 		try
 		{
 			CreateRPN();
 			m_pParseFormula = &ParserBase::ParseCmdCode;
 			return (this->*m_pParseFormula)();
 		}
 		catch (ParserError& exc)
 		{
 			exc.SetFormula(m_pTokenReader->GetExpr());
 			throw;
 		}
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Create an error containing the parse error position.
 
 	  This function will create an Parser Exception object containing the error text and
 	  its position.
 
 	  \param a_iErrc [in] The error code of type #EErrorCodes.
 	  \param a_iPos [in] The position where the error was detected.
 	  \param a_strTok [in] The token string representation associated with the error.
 	  \throw ParserException always throws that's the only purpose of this function.
 	*/
 	void  ParserBase::Error(EErrorCodes a_iErrc, int a_iPos, const string_type& a_sTok) const
 	{
 		throw exception_type(a_iErrc, a_sTok, m_pTokenReader->GetExpr(), a_iPos);
 	}
 
 	//------------------------------------------------------------------------------
 	/** \brief Clear all user defined variables.
 		\throw nothrow
 
 		Resets the parser to string parsing mode by calling #ReInit.
 	*/
 	void ParserBase::ClearVar()
 	{
 		m_VarDef.clear();
 		ReInit();
 	}
 
 	//------------------------------------------------------------------------------
 	/** \brief Remove a variable from internal storage.
 		\throw nothrow
 
 		Removes a variable if it exists. If the Variable does not exist nothing will be done.
 	*/
 	void ParserBase::RemoveVar(const string_type& a_strVarName)
 	{
 		varmap_type::iterator item = m_VarDef.find(a_strVarName);
 		if (item != m_VarDef.end())
 		{
 			m_VarDef.erase(item);
 			ReInit();
 		}
 	}
 
 	//------------------------------------------------------------------------------
 	/** \brief Clear all functions.
 		\post Resets the parser to string parsing mode.
 		\throw nothrow
 	*/
 	void ParserBase::ClearFun()
 	{
 		m_FunDef.clear();
 		ReInit();
 	}
 
 	//------------------------------------------------------------------------------
 	/** \brief Clear all user defined constants.
 
 		Both numeric and string constants will be removed from the internal storage.
 		\post Resets the parser to string parsing mode.
 		\throw nothrow
 	*/
 	void ParserBase::ClearConst()
 	{
 		m_ConstDef.clear();
 		m_StrVarDef.clear();
 		ReInit();
 	}
 
 	//------------------------------------------------------------------------------
 	/** \brief Clear all user defined postfix operators.
 		\post Resets the parser to string parsing mode.
 		\throw nothrow
 	*/
 	void ParserBase::ClearPostfixOprt()
 	{
 		m_PostOprtDef.clear();
 		ReInit();
 	}
 
 	//------------------------------------------------------------------------------
 	/** \brief Clear all user defined binary operators.
 		\post Resets the parser to string parsing mode.
 		\throw nothrow
 	*/
 	void ParserBase::ClearOprt()
 	{
 		m_OprtDef.clear();
 		ReInit();
 	}
 
 	//------------------------------------------------------------------------------
 	/** \brief Clear the user defined Prefix operators.
 		\post Resets the parser to string parser mode.
 		\throw nothrow
 	*/
 	void ParserBase::ClearInfixOprt()
 	{
 		m_InfixOprtDef.clear();
 		ReInit();
 	}
 
 	//------------------------------------------------------------------------------
 	/** \brief Enable or disable the formula optimization feature.
 		\post Resets the parser to string parser mode.
 		\throw nothrow
 	*/
 	void ParserBase::EnableOptimizer(bool a_bIsOn)
 	{
 		m_vRPN.EnableOptimizer(a_bIsOn);
 		ReInit();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Enable the dumping of bytecode and stack content on the console.
 		\param bDumpCmd Flag to enable dumping of the current bytecode to the console.
 		\param bDumpStack Flag to enable dumping of the stack content is written to the console.
 
 	   This function is for debug purposes only!
 	*/
 	void ParserBase::EnableDebugDump(bool bDumpCmd, bool bDumpStack)
 	{
 		ParserBase::g_DbgDumpCmdCode = bDumpCmd;
 		ParserBase::g_DbgDumpStack = bDumpStack;
 	}
 
 	//------------------------------------------------------------------------------
 	/** \brief Enable or disable the built in binary operators.
 		\throw nothrow
 		\sa m_bBuiltInOp, ReInit()
 
 	  If you disable the built in binary operators there will be no binary operators
 	  defined. Thus you must add them manually one by one. It is not possible to
 	  disable built in operators selectively. This function will Reinitialize the
 	  parser by calling ReInit().
 	*/
 	void ParserBase::EnableBuiltInOprt(bool a_bIsOn)
 	{
 		m_bBuiltInOp = a_bIsOn;
 		ReInit();
 	}
 
 	//------------------------------------------------------------------------------
 	/** \brief Query status of built in variables.
 		\return #m_bBuiltInOp; true if built in operators are enabled.
 		\throw nothrow
 	*/
 	bool ParserBase::HasBuiltInOprt() const
 	{
 		return m_bBuiltInOp;
 	}
 
 	//------------------------------------------------------------------------------
 	/** \brief Get the argument separator character.
 	*/
 	char_type ParserBase::GetArgSep() const
 	{
 		return m_pTokenReader->GetArgSep();
 	}
 
 	//------------------------------------------------------------------------------
 	/** \brief Set argument separator.
 		\param cArgSep the argument separator character.
 	*/
 	void ParserBase::SetArgSep(char_type cArgSep)
 	{
 		m_pTokenReader->SetArgSep(cArgSep);
 	}
 
 	//------------------------------------------------------------------------------
 	/** \brief Dump stack content.
 
 		This function is used for debugging only.
 	*/
 	void ParserBase::StackDump(const ParserStack<token_type>& a_stVal,
 		const ParserStack<token_type>& a_stOprt) const
 	{
 		ParserStack<token_type> stOprt(a_stOprt),
 			stVal(a_stVal);
 
 		mu::console() << _T("\nValue stack:\n");
 		while (!stVal.empty())
 		{
 			token_type val = stVal.pop();
 			if (val.GetType() == tpSTR)
 				mu::console() << _T(" \"") << val.GetAsString() << _T("\" ");
 			else
 				mu::console() << _T(" ") << val.GetVal() << _T(" ");
 		}
 		mu::console() << "\nOperator stack:\n";
 
 		while (!stOprt.empty())
 		{
 			if (stOprt.top().GetCode() <= cmASSIGN)
 			{
 				mu::console() << _T("OPRT_INTRNL \"")
 					<< ParserBase::c_DefaultOprt[stOprt.top().GetCode()]
 					<< _T("\" \n");
 			}
 			else
 			{
 				switch (stOprt.top().GetCode())
 				{
 				case cmVAR:   mu::console() << _T("VAR\n");  break;
 				case cmVAL:   mu::console() << _T("VAL\n");  break;
 				case cmFUNC:  mu::console() << _T("FUNC \"")
 					<< stOprt.top().GetAsString()
 					<< _T("\"\n");   break;
 				case cmFUNC_BULK:  mu::console() << _T("FUNC_BULK \"")
 					<< stOprt.top().GetAsString()
 					<< _T("\"\n");   break;
 				case cmOPRT_INFIX: mu::console() << _T("OPRT_INFIX \"")
 					<< stOprt.top().GetAsString()
 					<< _T("\"\n");      break;
 				case cmOPRT_BIN:   mu::console() << _T("OPRT_BIN \"")
 					<< stOprt.top().GetAsString()
 					<< _T("\"\n");           break;
 				case cmFUNC_STR: mu::console() << _T("FUNC_STR\n");       break;
 				case cmEND:      mu::console() << _T("END\n");            break;
 				case cmUNKNOWN:  mu::console() << _T("UNKNOWN\n");        break;
 				case cmBO:       mu::console() << _T("BRACKET \"(\"\n");  break;
 				case cmBC:       mu::console() << _T("BRACKET \")\"\n");  break;
 				case cmIF:       mu::console() << _T("IF\n");  break;
 				case cmELSE:     mu::console() << _T("ELSE\n");  break;
 				case cmENDIF:    mu::console() << _T("ENDIF\n");  break;
 				default:         mu::console() << stOprt.top().GetCode() << _T(" ");  break;
 				}
 			}
 			stOprt.pop();
 		}
 
 		mu::console() << dec << endl;
 	}
 
 	//------------------------------------------------------------------------------
 	/** \brief Evaluate an expression containing comma separated subexpressions
 		\param [out] nStackSize The total number of results available
 		\return Pointer to the array containing all expression results
 
 		This member function can be used to retrieve all results of an expression
 		made up of multiple comma separated subexpressions (i.e. "x+y,sin(x),cos(y)")
 	*/
 	value_type* ParserBase::Eval(int& nStackSize) const
 	{
 		(this->*m_pParseFormula)();
 		nStackSize = m_nFinalResultIdx;
 
 		// (for historic reasons the stack starts at position 1)
 		return &m_vStackBuffer[1];
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Return the number of results on the calculation stack.
 
 	  If the expression contains comma separated subexpressions (i.e. "sin(y), x+y").
 	  There may be more than one return value. This function returns the number of
 	  available results.
 	*/
 	int ParserBase::GetNumResults() const
 	{
 		return m_nFinalResultIdx;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Calculate the result.
 
 	  A note on const correctness:
 	  I consider it important that Calc is a const function.
 	  Due to caching operations Calc changes only the state of internal variables with one exception
 	  m_UsedVar this is reset during string parsing and accessible from the outside. Instead of making
 	  Calc non const GetUsedVar is non const because it explicitly calls Eval() forcing this update.
 
 	  \pre A formula must be set.
 	  \pre Variables must have been set (if needed)
 
 	  \sa #m_pParseFormula
 	  \return The evaluation result
 	  \throw ParseException if no Formula is set or in case of any other error related to the formula.
 	*/
 	value_type ParserBase::Eval() const
 	{
 		return (this->*m_pParseFormula)();
 	}
 
 	//---------------------------------------------------------------------------
 	void ParserBase::Eval(value_type* results, int nBulkSize)
 	{
-		/* <ibg 2014-09-24/> Commented because it is making a unit test impossible
-
-			// Parallelization does not make sense for fewer than 10000 computations
-			// due to thread creation overhead. If the bulk size is below 2000
-			// computation is refused.
-			if (nBulkSize<2000)
-			{
-			  throw ParserError(ecUNREASONABLE_NUMBER_OF_COMPUTATIONS);
-			}
-		*/
 		CreateRPN();
 
 		int i = 0;
 
 #ifdef MUP_USE_OPENMP
 		//#define DEBUG_OMP_STUFF
-#ifdef DEBUG_OMP_STUFF
+		#ifdef DEBUG_OMP_STUFF
 		int* pThread = new int[nBulkSize];
 		int* pIdx = new int[nBulkSize];
-#endif
+		#endif
 
 		int nMaxThreads = std::min(omp_get_max_threads(), s_MaxNumOpenMPThreads);
 		int nThreadID = 0, ct = 0;
 		omp_set_num_threads(nMaxThreads);
 
 #pragma omp parallel for schedule(static, std::max(nBulkSize/nMaxThreads, 1)) private(nThreadID)
 		for (i = 0; i < nBulkSize; ++i)
 		{
 			nThreadID = omp_get_thread_num();
 			results[i] = ParseCmdCodeBulk(i, nThreadID);
 
 #ifdef DEBUG_OMP_STUFF
 #pragma omp critical
 			{
 				pThread[ct] = nThreadID;
 				pIdx[ct] = i;
 				ct++;
 			}
 #endif
 		}
 
 #ifdef DEBUG_OMP_STUFF
 		FILE* pFile = fopen("bulk_dbg.txt", "w");
 		for (i = 0; i < nBulkSize; ++i)
 		{
 			fprintf(pFile, "idx: %d  thread: %d \n", pIdx[i], pThread[i]);
 		}
 
 		delete[] pIdx;
 		delete[] pThread;
 
 		fclose(pFile);
 #endif
 
 #else
 		for (i = 0; i < nBulkSize; ++i)
 		{
 			results[i] = ParseCmdCodeBulk(i, 0);
 		}
 #endif
 
 	}
 } // namespace mu
diff --git a/src/muParserBytecode.cpp b/src/muParserBytecode.cpp
index d6d5df9..a887c0d 100644
--- a/src/muParserBytecode.cpp
+++ b/src/muParserBytecode.cpp
@@ -1,42 +1,41 @@
 /*
 				 __________
 	_____   __ __\______   \_____  _______  ______  ____ _______
    /     \ |  |  \|     ___/\__  \ \_  __ \/  ___/_/ __ \\_  __ \
   |  Y Y  \|  |  /|    |     / __ \_|  | \/\___ \ \  ___/ |  | \/
   |__|_|  /|____/ |____|    (____  /|__|  /____  > \___  >|__|
 		\/                       \/            \/      \/
   Copyright (C) 2004 - 2020 Ingo Berg
 
 	Redistribution and use in source and binary forms, with or without modification, are permitted
 	provided that the following conditions are met:
 
 	  * Redistributions of source code must retain the above copyright notice, this list of
 		conditions and the following disclaimer.
 	  * Redistributions in binary form must reproduce the above copyright notice, this list of
 		conditions and the following disclaimer in the documentation and/or other materials provided
 		with the distribution.
 
 	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
 	IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 	FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 	CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 	DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 	DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 	IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 	OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 #include "muParserBytecode.h"
 
 #include <algorithm>
-#include <cassert>
 #include <string>
 #include <stack>
 #include <vector>
 #include <iostream>
 
 #include "muParserDef.h"
 #include "muParserError.h"
 #include "muParserToken.h"
 #include "muParserStack.h"
 #include "muParserTemplateMagic.h"
@@ -45,544 +44,547 @@
 namespace mu
 {
 	//---------------------------------------------------------------------------
 	/** \brief Bytecode default constructor. */
 	ParserByteCode::ParserByteCode()
 		:m_iStackPos(0)
 		, m_iMaxStackSize(0)
 		, m_vRPN()
 		, m_bEnableOptimizer(true)
 	{
 		m_vRPN.reserve(50);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Copy constructor.
 
 		Implemented in Terms of Assign(const ParserByteCode &a_ByteCode)
 	*/
 	ParserByteCode::ParserByteCode(const ParserByteCode& a_ByteCode)
 	{
 		Assign(a_ByteCode);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Assignment operator.
 
 		Implemented in Terms of Assign(const ParserByteCode &a_ByteCode)
 	*/
 	ParserByteCode& ParserByteCode::operator=(const ParserByteCode& a_ByteCode)
 	{
 		Assign(a_ByteCode);
 		return *this;
 	}
 
 	//---------------------------------------------------------------------------
 	void ParserByteCode::EnableOptimizer(bool bStat)
 	{
 		m_bEnableOptimizer = bStat;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Copy state of another object to this.
 
 		\throw nowthrow
 	*/
 	void ParserByteCode::Assign(const ParserByteCode& a_ByteCode)
 	{
 		if (this == &a_ByteCode)
 			return;
 
 		m_iStackPos = a_ByteCode.m_iStackPos;
 		m_vRPN = a_ByteCode.m_vRPN;
 		m_iMaxStackSize = a_ByteCode.m_iMaxStackSize;
 		m_bEnableOptimizer = a_ByteCode.m_bEnableOptimizer;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Add a Variable pointer to bytecode.
 		\param a_pVar Pointer to be added.
 		\throw nothrow
 	*/
 	void ParserByteCode::AddVar(value_type* a_pVar)
 	{
 		++m_iStackPos;
 		m_iMaxStackSize = std::max(m_iMaxStackSize, (size_t)m_iStackPos);
 
 		// optimization does not apply
 		SToken tok;
 		tok.Cmd = cmVAR;
 		tok.Val.ptr = a_pVar;
 		tok.Val.data = 1;
 		tok.Val.data2 = 0;
 		m_vRPN.push_back(tok);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Add a Variable pointer to bytecode.
 
 		Value entries in byte code consist of:
 		<ul>
 		  <li>value array position of the value</li>
 		  <li>the operator code according to ParserToken::cmVAL</li>
 		  <li>the value stored in #mc_iSizeVal number of bytecode entries.</li>
 		</ul>
 
 		\param a_pVal Value to be added.
 		\throw nothrow
 	*/
 	void ParserByteCode::AddVal(value_type a_fVal)
 	{
 		++m_iStackPos;
 		m_iMaxStackSize = std::max(m_iMaxStackSize, (size_t)m_iStackPos);
 
 		// If optimization does not apply
 		SToken tok;
 		tok.Cmd = cmVAL;
-		tok.Val.ptr = NULL;
+		tok.Val.ptr = nullptr;
 		tok.Val.data = 0;
 		tok.Val.data2 = a_fVal;
 		m_vRPN.push_back(tok);
 	}
 
 	//---------------------------------------------------------------------------
 	void ParserByteCode::ConstantFolding(ECmdCode a_Oprt)
 	{
 		std::size_t sz = m_vRPN.size();
 		value_type& x = m_vRPN[sz - 2].Val.data2;
 		value_type& y = m_vRPN[sz - 1].Val.data2;
 
 		switch (a_Oprt)
 		{
 		case cmLAND: x = (int)x && (int)y; m_vRPN.pop_back(); break;
 		case cmLOR:  x = (int)x || (int)y; m_vRPN.pop_back(); break;
 		case cmLT:   x = x < y;  m_vRPN.pop_back();  break;
 		case cmGT:   x = x > y;  m_vRPN.pop_back();  break;
 		case cmLE:   x = x <= y; m_vRPN.pop_back();  break;
 		case cmGE:   x = x >= y; m_vRPN.pop_back();  break;
 		case cmNEQ:  x = x != y; m_vRPN.pop_back();  break;
 		case cmEQ:   x = x == y; m_vRPN.pop_back();  break;
 		case cmADD:  x = x + y;  m_vRPN.pop_back();  break;
 		case cmSUB:  x = x - y;  m_vRPN.pop_back();  break;
 		case cmMUL:  x = x * y;  m_vRPN.pop_back();  break;
 		case cmDIV:
 			x = x / y;
 			m_vRPN.pop_back();
 			break;
 
 		case cmPOW: x = MathImpl<value_type>::Pow(x, y);
 			m_vRPN.pop_back();
 			break;
 
 		default:
 			break;
 		} // switch opcode
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Add an operator identifier to bytecode.
 
 		Operator entries in byte code consist of:
 		<ul>
 		  <li>value array position of the result</li>
 		  <li>the operator code according to ParserToken::ECmdCode</li>
 		</ul>
 
 		\sa  ParserToken::ECmdCode
 	*/
 	void ParserByteCode::AddOp(ECmdCode a_Oprt)
 	{
 		bool bOptimized = false;
 
 		if (m_bEnableOptimizer)
 		{
 			std::size_t sz = m_vRPN.size();
 
 			// Check for foldable constants like:
 			//   cmVAL cmVAL cmADD 
 			// where cmADD can stand fopr any binary operator applied to
 			// two constant values.
 			if (sz >= 2 && m_vRPN[sz - 2].Cmd == cmVAL && m_vRPN[sz - 1].Cmd == cmVAL)
 			{
 				ConstantFolding(a_Oprt);
 				bOptimized = true;
 			}
 			else
 			{
 				switch (a_Oprt)
 				{
 				case  cmPOW:
 					// Optimization for polynomials of low order
 					if (m_vRPN[sz - 2].Cmd == cmVAR && m_vRPN[sz - 1].Cmd == cmVAL)
 					{
 						if (m_vRPN[sz - 1].Val.data2 == 2)
 							m_vRPN[sz - 2].Cmd = cmVARPOW2;
 						else if (m_vRPN[sz - 1].Val.data2 == 3)
 							m_vRPN[sz - 2].Cmd = cmVARPOW3;
 						else if (m_vRPN[sz - 1].Val.data2 == 4)
 							m_vRPN[sz - 2].Cmd = cmVARPOW4;
 						else
 							break;
 
 						m_vRPN.pop_back();
 						bOptimized = true;
 					}
 					break;
 
 				case  cmSUB:
 				case  cmADD:
 					// Simple optimization based on pattern recognition for a shitload of different
 					// bytecode combinations of addition/subtraction
 					if ((m_vRPN[sz - 1].Cmd == cmVAR && m_vRPN[sz - 2].Cmd == cmVAL) ||
 						(m_vRPN[sz - 1].Cmd == cmVAL && m_vRPN[sz - 2].Cmd == cmVAR) ||
 						(m_vRPN[sz - 1].Cmd == cmVAL && m_vRPN[sz - 2].Cmd == cmVARMUL) ||
 						(m_vRPN[sz - 1].Cmd == cmVARMUL && m_vRPN[sz - 2].Cmd == cmVAL) ||
 						(m_vRPN[sz - 1].Cmd == cmVAR && m_vRPN[sz - 2].Cmd == cmVAR && m_vRPN[sz - 2].Val.ptr == m_vRPN[sz - 1].Val.ptr) ||
 						(m_vRPN[sz - 1].Cmd == cmVAR && m_vRPN[sz - 2].Cmd == cmVARMUL && m_vRPN[sz - 2].Val.ptr == m_vRPN[sz - 1].Val.ptr) ||
 						(m_vRPN[sz - 1].Cmd == cmVARMUL && m_vRPN[sz - 2].Cmd == cmVAR && m_vRPN[sz - 2].Val.ptr == m_vRPN[sz - 1].Val.ptr) ||
 						(m_vRPN[sz - 1].Cmd == cmVARMUL && m_vRPN[sz - 2].Cmd == cmVARMUL && m_vRPN[sz - 2].Val.ptr == m_vRPN[sz - 1].Val.ptr))
 					{
-						assert((m_vRPN[sz - 2].Val.ptr == NULL && m_vRPN[sz - 1].Val.ptr != NULL) ||
-							(m_vRPN[sz - 2].Val.ptr != NULL && m_vRPN[sz - 1].Val.ptr == NULL) ||
+						MUP_ASSERT((m_vRPN[sz - 2].Val.ptr == nullptr && m_vRPN[sz - 1].Val.ptr != nullptr) ||
+							(m_vRPN[sz - 2].Val.ptr != nullptr && m_vRPN[sz - 1].Val.ptr == nullptr) ||
 							(m_vRPN[sz - 2].Val.ptr == m_vRPN[sz - 1].Val.ptr));
 
 						m_vRPN[sz - 2].Cmd = cmVARMUL;
 						m_vRPN[sz - 2].Val.ptr = (value_type*)((long long)(m_vRPN[sz - 2].Val.ptr) | (long long)(m_vRPN[sz - 1].Val.ptr));    // variable
 						m_vRPN[sz - 2].Val.data2 += ((a_Oprt == cmSUB) ? -1 : 1) * m_vRPN[sz - 1].Val.data2;  // offset
 						m_vRPN[sz - 2].Val.data += ((a_Oprt == cmSUB) ? -1 : 1) * m_vRPN[sz - 1].Val.data;   // multiplicand
 						m_vRPN.pop_back();
 						bOptimized = true;
 					}
 					break;
 
 				case  cmMUL:
 					if ((m_vRPN[sz - 1].Cmd == cmVAR && m_vRPN[sz - 2].Cmd == cmVAL) ||
 						(m_vRPN[sz - 1].Cmd == cmVAL && m_vRPN[sz - 2].Cmd == cmVAR))
 					{
 						m_vRPN[sz - 2].Cmd = cmVARMUL;
 						m_vRPN[sz - 2].Val.ptr = (value_type*)((long long)(m_vRPN[sz - 2].Val.ptr) | (long long)(m_vRPN[sz - 1].Val.ptr));
 						m_vRPN[sz - 2].Val.data = m_vRPN[sz - 2].Val.data2 + m_vRPN[sz - 1].Val.data2;
 						m_vRPN[sz - 2].Val.data2 = 0;
 						m_vRPN.pop_back();
 						bOptimized = true;
 					}
-					else if ((m_vRPN[sz - 1].Cmd == cmVAL && m_vRPN[sz - 2].Cmd == cmVARMUL) ||
+					else if (
+						(m_vRPN[sz - 1].Cmd == cmVAL && m_vRPN[sz - 2].Cmd == cmVARMUL) ||
 						(m_vRPN[sz - 1].Cmd == cmVARMUL && m_vRPN[sz - 2].Cmd == cmVAL))
 					{
 						// Optimization: 2*(3*b+1) or (3*b+1)*2 -> 6*b+2
 						m_vRPN[sz - 2].Cmd = cmVARMUL;
 						m_vRPN[sz - 2].Val.ptr = (value_type*)((long long)(m_vRPN[sz - 2].Val.ptr) | (long long)(m_vRPN[sz - 1].Val.ptr));
 						if (m_vRPN[sz - 1].Cmd == cmVAL)
 						{
 							m_vRPN[sz - 2].Val.data *= m_vRPN[sz - 1].Val.data2;
 							m_vRPN[sz - 2].Val.data2 *= m_vRPN[sz - 1].Val.data2;
 						}
 						else
 						{
 							m_vRPN[sz - 2].Val.data = m_vRPN[sz - 1].Val.data * m_vRPN[sz - 2].Val.data2;
 							m_vRPN[sz - 2].Val.data2 = m_vRPN[sz - 1].Val.data2 * m_vRPN[sz - 2].Val.data2;
 						}
 						m_vRPN.pop_back();
 						bOptimized = true;
 					}
-					else if (m_vRPN[sz - 1].Cmd == cmVAR && m_vRPN[sz - 2].Cmd == cmVAR &&
+					else if (
+						m_vRPN[sz - 1].Cmd == cmVAR && m_vRPN[sz - 2].Cmd == cmVAR &&
 						m_vRPN[sz - 1].Val.ptr == m_vRPN[sz - 2].Val.ptr)
 					{
 						// Optimization: a*a -> a^2
 						m_vRPN[sz - 2].Cmd = cmVARPOW2;
 						m_vRPN.pop_back();
 						bOptimized = true;
 					}
 					break;
 
 				case cmDIV:
 					if (m_vRPN[sz - 1].Cmd == cmVAL && m_vRPN[sz - 2].Cmd == cmVARMUL && m_vRPN[sz - 1].Val.data2 != 0)
 					{
 						// Optimization: 4*a/2 -> 2*a
 						m_vRPN[sz - 2].Val.data /= m_vRPN[sz - 1].Val.data2;
 						m_vRPN[sz - 2].Val.data2 /= m_vRPN[sz - 1].Val.data2;
 						m_vRPN.pop_back();
 						bOptimized = true;
 					}
 					break;
+
+				// no optimization for other opcodes
 				default:
-					// no optimization for other opcodes
 					break;
 				} // switch a_Oprt
 			}
 		}
 
 		// If optimization can't be applied just write the value
 		if (!bOptimized)
 		{
 			--m_iStackPos;
 			SToken tok;
 			tok.Cmd = a_Oprt;
 			m_vRPN.push_back(tok);
 		}
 	}
 
 	//---------------------------------------------------------------------------
 	void ParserByteCode::AddIfElse(ECmdCode a_Oprt)
 	{
 		SToken tok;
 		tok.Cmd = a_Oprt;
 		m_vRPN.push_back(tok);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Add an assignment operator
 
 		Operator entries in byte code consist of:
 		<ul>
 		  <li>cmASSIGN code</li>
 		  <li>the pointer of the destination variable</li>
 		</ul>
 
 		\sa  ParserToken::ECmdCode
 	*/
 	void ParserByteCode::AddAssignOp(value_type* a_pVar)
 	{
 		--m_iStackPos;
 
 		SToken tok;
 		tok.Cmd = cmASSIGN;
 		tok.Oprt.ptr = a_pVar;
 		m_vRPN.push_back(tok);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Add function to bytecode.
 
 		\param a_iArgc Number of arguments, negative numbers indicate multiarg functions.
 		\param a_pFun Pointer to function callback.
 	*/
 	void ParserByteCode::AddFun(generic_fun_type a_pFun, int a_iArgc)
 	{
 		if (a_iArgc >= 0)
 		{
 			m_iStackPos = m_iStackPos - a_iArgc + 1;
 		}
 		else
 		{
 			// function with unlimited number of arguments
 			m_iStackPos = m_iStackPos + a_iArgc + 1;
 		}
 		m_iMaxStackSize = std::max(m_iMaxStackSize, (size_t)m_iStackPos);
 
 		SToken tok;
 		tok.Cmd = cmFUNC;
 		tok.Fun.argc = a_iArgc;
 		tok.Fun.ptr = a_pFun;
 		m_vRPN.push_back(tok);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Add a bulk function to bytecode.
 
 		\param a_iArgc Number of arguments, negative numbers indicate multiarg functions.
 		\param a_pFun Pointer to function callback.
 	*/
 	void ParserByteCode::AddBulkFun(generic_fun_type a_pFun, int a_iArgc)
 	{
 		m_iStackPos = m_iStackPos - a_iArgc + 1;
 		m_iMaxStackSize = std::max(m_iMaxStackSize, (size_t)m_iStackPos);
 
 		SToken tok;
 		tok.Cmd = cmFUNC_BULK;
 		tok.Fun.argc = a_iArgc;
 		tok.Fun.ptr = a_pFun;
 		m_vRPN.push_back(tok);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Add Strung function entry to the parser bytecode.
 		\throw nothrow
 
 		A string function entry consists of the stack position of the return value,
 		followed by a cmSTRFUNC code, the function pointer and an index into the
 		string buffer maintained by the parser.
 	*/
 	void ParserByteCode::AddStrFun(generic_fun_type a_pFun, int a_iArgc, int a_iIdx)
 	{
 		m_iStackPos = m_iStackPos - a_iArgc + 1;
 
 		SToken tok;
 		tok.Cmd = cmFUNC_STR;
 		tok.Fun.argc = a_iArgc;
 		tok.Fun.idx = a_iIdx;
 		tok.Fun.ptr = a_pFun;
 		m_vRPN.push_back(tok);
 
 		m_iMaxStackSize = std::max(m_iMaxStackSize, (size_t)m_iStackPos);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Add end marker to bytecode.
 
 		\throw nothrow
 	*/
 	void ParserByteCode::Finalize()
 	{
 		SToken tok;
 		tok.Cmd = cmEND;
 		m_vRPN.push_back(tok);
 		rpn_type(m_vRPN).swap(m_vRPN);     // shrink bytecode vector to fit
 
 		// Determine the if-then-else jump offsets
 		ParserStack<int> stIf, stElse;
 		int idx;
 		for (int i = 0; i < (int)m_vRPN.size(); ++i)
 		{
 			switch (m_vRPN[i].Cmd)
 			{
 			case cmIF:
 				stIf.push(i);
 				break;
 
 			case  cmELSE:
 				stElse.push(i);
 				idx = stIf.pop();
 				m_vRPN[idx].Oprt.offset = i - idx;
 				break;
 
 			case cmENDIF:
 				idx = stElse.pop();
 				m_vRPN[idx].Oprt.offset = i - idx;
 				break;
 
 			default:
 				break;
 			}
 		}
 	}
 
 	//---------------------------------------------------------------------------
 	const SToken* ParserByteCode::GetBase() const
 	{
 		if (m_vRPN.size() == 0)
 			throw ParserError(ecINTERNAL_ERROR);
 		else
 			return &m_vRPN[0];
 	}
 
 	//---------------------------------------------------------------------------
 	std::size_t ParserByteCode::GetMaxStackSize() const
 	{
 		return m_iMaxStackSize + 1;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Returns the number of entries in the bytecode. */
 	std::size_t ParserByteCode::GetSize() const
 	{
 		return m_vRPN.size();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Delete the bytecode.
 
 		\throw nothrow
 
 		The name of this function is a violation of my own coding guidelines
 		but this way it's more in line with the STL functions thus more
 		intuitive.
 	*/
 	void ParserByteCode::clear()
 	{
 		m_vRPN.clear();
 		m_iStackPos = 0;
 		m_iMaxStackSize = 0;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Dump bytecode (for debugging only!). */
 	void ParserByteCode::AsciiDump()
 	{
 		if (!m_vRPN.size())
 		{
 			mu::console() << _T("No bytecode available\n");
 			return;
 		}
 
 		mu::console() << _T("Number of RPN tokens:") << (int)m_vRPN.size() << _T("\n");
 		for (std::size_t i = 0; i < m_vRPN.size() && m_vRPN[i].Cmd != cmEND; ++i)
 		{
 			mu::console() << std::dec << i << _T(" : \t");
 			switch (m_vRPN[i].Cmd)
 			{
 			case cmVAL:   mu::console() << _T("VAL \t");
 				mu::console() << _T("[") << m_vRPN[i].Val.data2 << _T("]\n");
 				break;
 
 			case cmVAR:   mu::console() << _T("VAR \t");
 				mu::console() << _T("[ADDR: 0x") << std::hex << m_vRPN[i].Val.ptr << _T("]\n");
 				break;
 
 			case cmVARPOW2: mu::console() << _T("VARPOW2 \t");
 				mu::console() << _T("[ADDR: 0x") << std::hex << m_vRPN[i].Val.ptr << _T("]\n");
 				break;
 
 			case cmVARPOW3: mu::console() << _T("VARPOW3 \t");
 				mu::console() << _T("[ADDR: 0x") << std::hex << m_vRPN[i].Val.ptr << _T("]\n");
 				break;
 
 			case cmVARPOW4: mu::console() << _T("VARPOW4 \t");
 				mu::console() << _T("[ADDR: 0x") << std::hex << m_vRPN[i].Val.ptr << _T("]\n");
 				break;
 
 			case cmVARMUL:  mu::console() << _T("VARMUL \t");
 				mu::console() << _T("[ADDR: 0x") << std::hex << m_vRPN[i].Val.ptr << _T("]");
 				mu::console() << _T(" * [") << m_vRPN[i].Val.data << _T("]");
 				mu::console() << _T(" + [") << m_vRPN[i].Val.data2 << _T("]\n");
 				break;
 
 			case cmFUNC:  mu::console() << _T("CALL\t");
 				mu::console() << _T("[ARG:") << std::dec << m_vRPN[i].Fun.argc << _T("]");
 				mu::console() << _T("[ADDR: 0x") << std::hex << m_vRPN[i].Fun.ptr << _T("]");
 				mu::console() << _T("\n");
 				break;
 
 			case cmFUNC_STR:
 				mu::console() << _T("CALL STRFUNC\t");
 				mu::console() << _T("[ARG:") << std::dec << m_vRPN[i].Fun.argc << _T("]");
 				mu::console() << _T("[IDX:") << std::dec << m_vRPN[i].Fun.idx << _T("]");
 				mu::console() << _T("[ADDR: 0x") << m_vRPN[i].Fun.ptr << _T("]\n");
 				break;
 
 			case cmLT:    mu::console() << _T("LT\n");  break;
 			case cmGT:    mu::console() << _T("GT\n");  break;
 			case cmLE:    mu::console() << _T("LE\n");  break;
 			case cmGE:    mu::console() << _T("GE\n");  break;
 			case cmEQ:    mu::console() << _T("EQ\n");  break;
 			case cmNEQ:   mu::console() << _T("NEQ\n"); break;
 			case cmADD:   mu::console() << _T("ADD\n"); break;
 			case cmLAND:  mu::console() << _T("&&\n"); break;
 			case cmLOR:   mu::console() << _T("||\n"); break;
 			case cmSUB:   mu::console() << _T("SUB\n"); break;
 			case cmMUL:   mu::console() << _T("MUL\n"); break;
 			case cmDIV:   mu::console() << _T("DIV\n"); break;
 			case cmPOW:   mu::console() << _T("POW\n"); break;
 
 			case cmIF:    mu::console() << _T("IF\t");
 				mu::console() << _T("[OFFSET:") << std::dec << m_vRPN[i].Oprt.offset << _T("]\n");
 				break;
 
 			case cmELSE:  mu::console() << _T("ELSE\t");
 				mu::console() << _T("[OFFSET:") << std::dec << m_vRPN[i].Oprt.offset << _T("]\n");
 				break;
 
 			case cmENDIF: mu::console() << _T("ENDIF\n"); break;
 
 			case cmASSIGN:
 				mu::console() << _T("ASSIGN\t");
 				mu::console() << _T("[ADDR: 0x") << m_vRPN[i].Oprt.ptr << _T("]\n");
 				break;
 
 			default:      mu::console() << _T("(unknown code: ") << m_vRPN[i].Cmd << _T(")\n");
 				break;
 			} // switch cmdCode
 		} // while bytecode
 
 		mu::console() << _T("END") << std::endl;
 	}
 } // namespace mu
diff --git a/src/muParserDLL.cpp b/src/muParserDLL.cpp
index 9b26e5d..74584b4 100644
--- a/src/muParserDLL.cpp
+++ b/src/muParserDLL.cpp
@@ -77,20 +77,21 @@ class ParserTag
 {
 public:
 	ParserTag(int nType)
-		:pParser((nType == muBASETYPE_FLOAT) ? (mu::ParserBase*)new mu::Parser() :
-			(nType == muBASETYPE_INT) ? (mu::ParserBase*)new mu::ParserInt() : NULL)
+		:pParser((nType == muBASETYPE_FLOAT) 
+			? (mu::ParserBase*)new mu::Parser() 
+			: (nType == muBASETYPE_INT) ? (mu::ParserBase*)new mu::ParserInt() : nullptr)
 		, exc()
-		, errHandler(NULL)
+		, errHandler(nullptr)
 		, bError(false)
 		, m_nParserType(nType)
 	{}
 
 	~ParserTag()
 	{
 		delete pParser;
 	}
 
 	mu::ParserBase* pParser;
 	mu::ParserBase::exception_type exc;
 	muErrorHandler_t errHandler;
 	bool bError;
@@ -167,16 +168,16 @@ API_EXPORT(void) mupSetVarFactory(muParserHandle_t a_hParser, muFacFun_t a_pFact
 //---------------------------------------------------------------------------
 /** \brief Create a new Parser instance and return its handle.
 */
 API_EXPORT(muParserHandle_t) mupCreate(int nBaseType)
 {
 	switch (nBaseType)
 	{
 	case  muBASETYPE_FLOAT:   return (void*)(new ParserTag(muBASETYPE_FLOAT));
 	case  muBASETYPE_INT:     return (void*)(new ParserTag(muBASETYPE_INT));
-	default:                  return NULL;
+	default:                  return nullptr;
 	}
 }
 
 //---------------------------------------------------------------------------
 /** \brief Release the parser instance related with a parser handle.
 */
@@ -222,23 +223,22 @@ API_EXPORT(muFloat_t) mupEval(muParserHandle_t a_hParser)
 //---------------------------------------------------------------------------
 API_EXPORT(muFloat_t*) mupEvalMulti(muParserHandle_t a_hParser, int* nNum)
 {
 	MU_TRY
-		assert(nNum != NULL);
-
-	muParser_t* const p(AsParser(a_hParser));
-	return p->Eval(*nNum);
+		assert(nNum != nullptr);
+		muParser_t* const p(AsParser(a_hParser));
+		return p->Eval(*nNum);
 	MU_CATCH
 
-		return 0;
+	return 0;
 }
 
 //---------------------------------------------------------------------------
 API_EXPORT(void) mupEvalBulk(muParserHandle_t a_hParser, muFloat_t* a_res, int nSize)
 {
 	MU_TRY
 		muParser_t* p(AsParser(a_hParser));
-	p->Eval(a_res, nSize);
+		p->Eval(a_res, nSize);
 	MU_CATCH
 }
 
 //---------------------------------------------------------------------------
diff --git a/src/muParserInt.cpp b/src/muParserInt.cpp
index 2c4e0fa..ba7292a 100644
--- a/src/muParserInt.cpp
+++ b/src/muParserInt.cpp
@@ -38,245 +38,241 @@ using namespace std;
 /** \brief Namespace for mathematical applications. */
 namespace mu
 {
 	value_type ParserInt::Abs(value_type v) { return (value_type)Round(fabs((double)v)); }
 	value_type ParserInt::Sign(value_type v) { return (Round(v) < 0) ? -1 : (Round(v) > 0) ? 1 : 0; }
-	value_type ParserInt::Ite(value_type v1,
-		value_type v2,
-		value_type v3) {
-		return (Round(v1) == 1) ? Round(v2) : Round(v3);
-	}
+	value_type ParserInt::Ite(value_type v1, value_type v2,	value_type v3) { return (Round(v1) == 1) ? Round(v2) : Round(v3); }
 	value_type ParserInt::Add(value_type v1, value_type v2) { return Round(v1) + Round(v2); }
 	value_type ParserInt::Sub(value_type v1, value_type v2) { return Round(v1) - Round(v2); }
 	value_type ParserInt::Mul(value_type v1, value_type v2) { return Round(v1) * Round(v2); }
 	value_type ParserInt::Div(value_type v1, value_type v2) { return Round(v1) / Round(v2); }
 	value_type ParserInt::Mod(value_type v1, value_type v2) { return Round(v1) % Round(v2); }
 	value_type ParserInt::Shr(value_type v1, value_type v2) { return Round(v1) >> Round(v2); }
 	value_type ParserInt::Shl(value_type v1, value_type v2) { return Round(v1) << Round(v2); }
 	value_type ParserInt::LogAnd(value_type v1, value_type v2) { return Round(v1) & Round(v2); }
 	value_type ParserInt::LogOr(value_type v1, value_type v2) { return Round(v1) | Round(v2); }
 	value_type ParserInt::And(value_type v1, value_type v2) { return Round(v1) && Round(v2); }
 	value_type ParserInt::Or(value_type v1, value_type v2) { return Round(v1) || Round(v2); }
 	value_type ParserInt::Less(value_type v1, value_type v2) { return Round(v1) < Round(v2); }
 	value_type ParserInt::Greater(value_type v1, value_type v2) { return Round(v1) > Round(v2); }
 	value_type ParserInt::LessEq(value_type v1, value_type v2) { return Round(v1) <= Round(v2); }
 	value_type ParserInt::GreaterEq(value_type v1, value_type v2) { return Round(v1) >= Round(v2); }
 	value_type ParserInt::Equal(value_type v1, value_type v2) { return Round(v1) == Round(v2); }
 	value_type ParserInt::NotEqual(value_type v1, value_type v2) { return Round(v1) != Round(v2); }
 	value_type ParserInt::Not(value_type v) { return !Round(v); }
 
 	value_type ParserInt::Pow(value_type v1, value_type v2)
 	{
 		return std::pow((double)Round(v1), (double)Round(v2));
 	}
 
 	//---------------------------------------------------------------------------
 	// Unary operator Callbacks: Infix operators
 	value_type ParserInt::UnaryMinus(value_type v)
 	{
 		return -Round(v);
 	}
 
 	//---------------------------------------------------------------------------
 	value_type ParserInt::Sum(const value_type* a_afArg, int a_iArgc)
 	{
 		if (!a_iArgc)
 			throw ParserError(_T("too few arguments for function sum."));
 
 		value_type fRes = 0;
 		for (int i = 0; i < a_iArgc; ++i)
 			fRes += a_afArg[i];
 
 		return fRes;
 	}
 
 	//---------------------------------------------------------------------------
 	value_type ParserInt::Min(const value_type* a_afArg, int a_iArgc)
 	{
 		if (!a_iArgc)
 			throw ParserError(_T("too few arguments for function min."));
 
 		value_type fRes = a_afArg[0];
 		for (int i = 0; i < a_iArgc; ++i)
 			fRes = std::min(fRes, a_afArg[i]);
 
 		return fRes;
 	}
 
 	//---------------------------------------------------------------------------
 	value_type ParserInt::Max(const value_type* a_afArg, int a_iArgc)
 	{
 		if (!a_iArgc)
 			throw ParserError(_T("too few arguments for function min."));
 
 		value_type fRes = a_afArg[0];
 		for (int i = 0; i < a_iArgc; ++i)
 			fRes = std::max(fRes, a_afArg[i]);
 
 		return fRes;
 	}
 
 	//---------------------------------------------------------------------------
 	// Default value recognition callback
 	int ParserInt::IsVal(const char_type* a_szExpr, int* a_iPos, value_type* a_fVal)
 	{
 		string_type buf(a_szExpr);
 		std::size_t pos = buf.find_first_not_of(_T("0123456789"));
 
 		if (pos == std::string::npos)
 			return 0;
 
 		stringstream_type stream(buf.substr(0, pos));
 		int iVal(0);
 
 		stream >> iVal;
 		if (stream.fail())
 			return 0;
 
 		stringstream_type::pos_type iEnd = stream.tellg();   // Position after reading
 		if (stream.fail())
 			iEnd = stream.str().length();
 
 		if (iEnd == (stringstream_type::pos_type) - 1)
 			return 0;
 
 		*a_iPos += (int)iEnd;
 		*a_fVal = (value_type)iVal;
 		return 1;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Check a given position in the expression for the presence of
 			   a hex value.
 		\param a_szExpr Pointer to the expression string
 		\param [in/out] a_iPos Pointer to an integer value holding the current parsing
 			   position in the expression.
 		\param [out] a_fVal Pointer to the position where the detected value shall be stored.
 
 	  Hey values must be prefixed with "0x" in order to be detected properly.
 	*/
 	int ParserInt::IsHexVal(const char_type* a_szExpr, int* a_iPos, value_type* a_fVal)
 	{
 		if (a_szExpr[1] == 0 || (a_szExpr[0] != '0' || a_szExpr[1] != 'x'))
 			return 0;
 
 		unsigned iVal(0);
 
 		// New code based on streams for UNICODE compliance:
 		stringstream_type::pos_type nPos(0);
 		stringstream_type ss(a_szExpr + 2);
 		ss >> std::hex >> iVal;
 		nPos = ss.tellg();
 
 		if (nPos == (stringstream_type::pos_type)0)
 			return 1;
 
 		*a_iPos += (int)(2 + nPos);
 		*a_fVal = (value_type)iVal;
 		return 1;
 	}
 
 	//---------------------------------------------------------------------------
 	int ParserInt::IsBinVal(const char_type* a_szExpr, int* a_iPos, value_type* a_fVal)
 	{
 		if (a_szExpr[0] != '#')
 			return 0;
 
 		unsigned iVal(0),
 			iBits(sizeof(iVal) * 8),
 			i(0);
 
 		for (i = 0; (a_szExpr[i + 1] == '0' || a_szExpr[i + 1] == '1') && i < iBits; ++i)
 			iVal |= (int)(a_szExpr[i + 1] == '1') << ((iBits - 1) - i);
 
 		if (i == 0)
 			return 0;
 
 		if (i == iBits)
 			throw exception_type(_T("Binary to integer conversion error (overflow)."));
 
 		*a_fVal = (unsigned)(iVal >> (iBits - i));
 		*a_iPos += i + 1;
 
 		return 1;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Constructor.
 
 	  Call ParserBase class constructor and trigger Function, Operator and Constant initialization.
 	*/
 	ParserInt::ParserInt()
 		:ParserBase()
 	{
 		AddValIdent(IsVal);    // lowest priority
 		AddValIdent(IsBinVal);
 		AddValIdent(IsHexVal); // highest priority
 
 		InitCharSets();
 		InitFun();
 		InitOprt();
 	}
 
 	//---------------------------------------------------------------------------
 	void ParserInt::InitConst()
 	{
 	}
 
 	//---------------------------------------------------------------------------
 	void ParserInt::InitCharSets()
 	{
 		DefineNameChars(_T("0123456789_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"));
 		DefineOprtChars(_T("+-*^/?<>=!%&|~'_"));
 		DefineInfixOprtChars(_T("/+-*^?<>=!%&|~'_"));
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Initialize the default functions. */
 	void ParserInt::InitFun()
 	{
 		DefineFun(_T("sign"), Sign);
 		DefineFun(_T("abs"), Abs);
 		DefineFun(_T("if"), Ite);
 		DefineFun(_T("sum"), Sum);
 		DefineFun(_T("min"), Min);
 		DefineFun(_T("max"), Max);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Initialize operators. */
 	void ParserInt::InitOprt()
 	{
 		// disable all built in operators, not all of them useful for integer numbers
 		// (they don't do rounding of values)
 		EnableBuiltInOprt(false);
 
 		// Disable all built in operators, they won't work with integer numbers
 		// since they are designed for floating point numbers
 		DefineInfixOprt(_T("-"), UnaryMinus);
 		DefineInfixOprt(_T("!"), Not);
 
 		DefineOprt(_T("&"), LogAnd, prLOGIC);
 		DefineOprt(_T("|"), LogOr, prLOGIC);
 		DefineOprt(_T("&&"), And, prLOGIC);
 		DefineOprt(_T("||"), Or, prLOGIC);
 
 		DefineOprt(_T("<"), Less, prCMP);
 		DefineOprt(_T(">"), Greater, prCMP);
 		DefineOprt(_T("<="), LessEq, prCMP);
 		DefineOprt(_T(">="), GreaterEq, prCMP);
 		DefineOprt(_T("=="), Equal, prCMP);
 		DefineOprt(_T("!="), NotEqual, prCMP);
 
 		DefineOprt(_T("+"), Add, prADD_SUB);
 		DefineOprt(_T("-"), Sub, prADD_SUB);
 
 		DefineOprt(_T("*"), Mul, prMUL_DIV);
 		DefineOprt(_T("/"), Div, prMUL_DIV);
 		DefineOprt(_T("%"), Mod, prMUL_DIV);
 
 		DefineOprt(_T("^"), Pow, prPOW, oaRIGHT);
 		DefineOprt(_T(">>"), Shr, prMUL_DIV + 1);
 		DefineOprt(_T("<<"), Shl, prMUL_DIV + 1);
 	}
 
 } // namespace mu
diff --git a/src/muParserTest.cpp b/src/muParserTest.cpp
index 9ca39a5..4c63da2 100644
--- a/src/muParserTest.cpp
+++ b/src/muParserTest.cpp
@@ -1,38 +1,35 @@
 /*
 				 __________
 	_____   __ __\______   \_____  _______  ______  ____ _______
    /     \ |  |  \|     ___/\__  \ \_  __ \/  ___/_/ __ \\_  __ \
   |  Y Y  \|  |  /|    |     / __ \_|  | \/\___ \ \  ___/ |  | \/
   |__|_|  /|____/ |____|    (____  /|__|  /____  > \___  >|__|
 		\/                       \/            \/      \/
   Copyright (C) 2013 Ingo Berg
 
   Permission is hereby granted, free of charge, to any person obtaining a copy of this
   software and associated documentation files (the "Software"), to deal in the Software
   without restriction, including without limitation the rights to use, copy, modify,
   merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to the following conditions:
 
   The above copyright notice and this permission notice shall be included in all copies or
   substantial portions of the Software.
 
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
   NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
   DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
 
 #include "muParserTest.h"
 
 #include <cstdio>
 #include <cmath>
 #include <iostream>
 #include <limits>
 
-#define PARSER_CONST_PI  3.141592653589793238462643
-#define PARSER_CONST_E   2.718281828459045235360287
-
 using namespace std;
 
 /** \file
@@ -42,1554 +39,1524 @@ using namespace std;
 namespace mu
 {
 	namespace Test
 	{
 		int ParserTester::c_iCount = 0;
 
 		//---------------------------------------------------------------------------------------------
 		ParserTester::ParserTester()
 			:m_vTestFun()
 		{
 			AddTest(&ParserTester::TestNames);
 			AddTest(&ParserTester::TestSyntax);
 			AddTest(&ParserTester::TestPostFix);
 			AddTest(&ParserTester::TestInfixOprt);
 			AddTest(&ParserTester::TestVarConst);
 			AddTest(&ParserTester::TestMultiArg);
 			AddTest(&ParserTester::TestExpression);
 			AddTest(&ParserTester::TestIfThenElse);
 			AddTest(&ParserTester::TestInterface);
 			AddTest(&ParserTester::TestBinOprt);
 			AddTest(&ParserTester::TestException);
 			AddTest(&ParserTester::TestStrArg);
 			AddTest(&ParserTester::TestBulkMode);
-			AddTest(&ParserTester::TestOssFuzzTestCases);
 
 			ParserTester::c_iCount = 0;
 		}
 
 		//---------------------------------------------------------------------------------------------
 		int ParserTester::IsHexVal(const char_type* a_szExpr, int* a_iPos, value_type* a_fVal)
 		{
 			if (a_szExpr[1] == 0 || (a_szExpr[0] != '0' || a_szExpr[1] != 'x'))
 				return 0;
 
 			unsigned iVal(0);
 
 			// New code based on streams for UNICODE compliance:
 			stringstream_type::pos_type nPos(0);
 			stringstream_type ss(a_szExpr + 2);
 			ss >> std::hex >> iVal;
 			nPos = ss.tellg();
 
 			if (nPos == (stringstream_type::pos_type)0)
 				return 1;
 
 			*a_iPos += (int)(2 + nPos);
 			*a_fVal = (value_type)iVal;
 			return 1;
 		}
 
 		//---------------------------------------------------------------------------------------------
 		int ParserTester::TestInterface()
 		{
 			int iStat = 0;
 			mu::console() << _T("testing member functions...");
 
 			// Test RemoveVar
 			value_type afVal[3] = { 1,2,3 };
 			Parser p;
 
 			try
 			{
 				p.DefineVar(_T("a"), &afVal[0]);
 				p.DefineVar(_T("b"), &afVal[1]);
 				p.DefineVar(_T("c"), &afVal[2]);
 				p.SetExpr(_T("a+b+c"));
 				p.Eval();
 			}
 			catch (...)
 			{
 				iStat += 1;  // this is not supposed to happen 
 			}
 
 			try
 			{
 				p.RemoveVar(_T("c"));
 				p.Eval();
 				iStat += 1;  // not supposed to reach this, nonexisting variable "c" deleted...
 			}
 			catch (...)
 			{
 				// failure is expected...
 			}
 
 			if (iStat == 0)
 				mu::console() << _T("passed") << endl;
 			else
 				mu::console() << _T("\n  failed with ") << iStat << _T(" errors") << endl;
 
 			return iStat;
 		}
 
 		//---------------------------------------------------------------------------------------------
 		int ParserTester::TestStrArg()
 		{
 			int iStat = 0;
 			mu::console() << _T("testing string arguments...");
 
 			iStat += EqnTest(_T("valueof(\"\")"), 123, true);   // empty string arguments caused a crash
 			iStat += EqnTest(_T("valueof(\"aaa\")+valueof(\"bbb\")  "), 246, true);
 			iStat += EqnTest(_T("2*(valueof(\"aaa\")-23)+valueof(\"bbb\")"), 323, true);
 			// use in expressions with variables
 			iStat += EqnTest(_T("a*(atof(\"10\")-b)"), 8, true);
 			iStat += EqnTest(_T("a-(atof(\"10\")*b)"), -19, true);
 			// string + numeric arguments
 			iStat += EqnTest(_T("strfun1(\"100\")"), 100, true);
 			iStat += EqnTest(_T("strfun2(\"100\",1)"), 101, true);
 			iStat += EqnTest(_T("strfun3(\"99\",1,2)"), 102, true);
 			iStat += EqnTest(_T("strfun4(\"99\",1,2,3)"), 105, true);
 			iStat += EqnTest(_T("strfun5(\"99\",1,2,3,4)"), 109, true);
 			// string constants
 			iStat += EqnTest(_T("atof(str1)+atof(str2)"), 3.33, true);
 
 			if (iStat == 0)
 				mu::console() << _T("passed") << endl;
 			else
 				mu::console() << _T("\n  failed with ") << iStat << _T(" errors") << endl;
 
 			return iStat;
 		}
 
-		//---------------------------------------------------------------------------------------------
-		int ParserTester::TestOssFuzzTestCases()
-		{
-			int iStat = 0;
-			mu::console() << _T("testing cases reported from oss-fuzz.com");
-
-/*
-			// https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22947
-			// Divide-by-zero; https://oss-fuzz.com/testcase-detail/5092079045967872
-			iStat += EqnTest(_T("atanh(1)"), std::numeric_limits<double>::infinity(), true);
-			
-			// https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22928#c3
-			iStat += EqnTest(_T("4/0+"), 3.33, true);
-
-			// https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22938
-			iStat += EqnTest(_T("sum(0 ? 1, 0, 0 : 3)"), 3.33, true);
-			
-			// Timeout: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22931
-			// Not testable, prevented by adding restrictions on the length of variables and expressions
-
-			// UNKNOWN READ: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22922#c1
-			iStat += EqnTest(_T("1?2:0?(7:1)"), 3.33, true);
-
-			// Heap-buffer-overflow READ 8: https://oss-fuzz.com/testcase-detail/5670338645196800
-			iStat += EqnTest(_T("sum(2>3?2,4,2:4)"), 3.33, true);
-
-			// Divide by zero: https://oss-fuzz.com/testcase-detail/5750723253108736
-			iStat += EqnTest(_T("2/+0"), 3.33, true);
-			
-*/
-			if (iStat == 0)
-				mu::console() << _T("passed") << endl;
-			else
-				mu::console() << _T("\n  failed with ") << iStat << _T(" errors") << endl;
-
-			return iStat;
-		}
-
 		//---------------------------------------------------------------------------------------------
 		int ParserTester::TestBulkMode()
 		{
 			int iStat = 0;
 			mu::console() << _T("testing bulkmode...");
 
 #define EQN_TEST_BULK(EXPR, R1, R2, R3, R4, PASS) \
 			{ \
 			  double res[] = { R1, R2, R3, R4 }; \
 			  iStat += EqnTestBulk(_T(EXPR), res, (PASS)); \
 			}
 
 			// Bulk Variables for the test:
 			// a: 1,2,3,4
 			// b: 2,2,2,2
 			// c: 3,3,3,3
 			// d: 5,4,3,2
 			EQN_TEST_BULK("a", 1, 1, 1, 1, false)
 			EQN_TEST_BULK("a", 1, 2, 3, 4, true)
 			EQN_TEST_BULK("b=a", 1, 2, 3, 4, true)
 			EQN_TEST_BULK("b=a, b*10", 10, 20, 30, 40, true)
 			EQN_TEST_BULK("b=a, b*10, a", 1, 2, 3, 4, true)
 			EQN_TEST_BULK("a+b", 3, 4, 5, 6, true)
 			EQN_TEST_BULK("c*(a+b)", 9, 12, 15, 18, true)
 #undef EQN_TEST_BULK
 
 			if (iStat == 0)
 				mu::console() << _T("passed") << endl;
 			else
 				mu::console() << _T("\n  failed with ") << iStat << _T(" errors") << endl;
 
 			return iStat;
 		}
 
 		//---------------------------------------------------------------------------------------------
 		int ParserTester::TestBinOprt()
 		{
 			int iStat = 0;
 			mu::console() << _T("testing binary operators...");
 
 			// built in operators
 			// xor operator
 
 			iStat += EqnTest(_T("a++b"), 3, true);
 			iStat += EqnTest(_T("a ++ b"), 3, true);
 			iStat += EqnTest(_T("1++2"), 3, true);
 			iStat += EqnTest(_T("1 ++ 2"), 3, true);
 			iStat += EqnTest(_T("a add b"), 3, true);
 			iStat += EqnTest(_T("1 add 2"), 3, true);
 			iStat += EqnTest(_T("a<b"), 1, true);
 			iStat += EqnTest(_T("b>a"), 1, true);
 			iStat += EqnTest(_T("a>a"), 0, true);
 			iStat += EqnTest(_T("a<a"), 0, true);
 			iStat += EqnTest(_T("a>a"), 0, true);
 			iStat += EqnTest(_T("a<=a"), 1, true);
 			iStat += EqnTest(_T("a<=b"), 1, true);
 			iStat += EqnTest(_T("b<=a"), 0, true);
 			iStat += EqnTest(_T("a>=a"), 1, true);
 			iStat += EqnTest(_T("b>=a"), 1, true);
 			iStat += EqnTest(_T("a>=b"), 0, true);
 
 			// Test logical operators, especially if user defined "&" and the internal "&&" collide
 			iStat += EqnTest(_T("1 && 1"), 1, true);
 			iStat += EqnTest(_T("1 && 0"), 0, true);
 			iStat += EqnTest(_T("(a<b) && (b>a)"), 1, true);
 			iStat += EqnTest(_T("(a<b) && (a>b)"), 0, true);
 			//iStat += EqnTest(_T("12 and 255"), 12, true); 
 			//iStat += EqnTest(_T("12 and 0"), 0, true); 
 			iStat += EqnTest(_T("12 & 255"), 12, true);
 			iStat += EqnTest(_T("12 & 0"), 0, true);
 			iStat += EqnTest(_T("12&255"), 12, true);
 			iStat += EqnTest(_T("12&0"), 0, true);
 
 			// Assignment operator
 			iStat += EqnTest(_T("a = b"), 2, true);
 			iStat += EqnTest(_T("a = sin(b)"), 0.909297, true);
 			iStat += EqnTest(_T("a = 1+sin(b)"), 1.909297, true);
 			iStat += EqnTest(_T("(a=b)*2"), 4, true);
 			iStat += EqnTest(_T("2*(a=b)"), 4, true);
 			iStat += EqnTest(_T("2*(a=b+1)"), 6, true);
 			iStat += EqnTest(_T("(a=b+1)*2"), 6, true);
 			iStat += EqnTest(_T("a=c, a*10"), 30, true);
 
 			iStat += EqnTest(_T("2^2^3"), 256, true);
 			iStat += EqnTest(_T("1/2/3"), 1.0 / 6.0, true);
 
 			// reference: http://www.wolframalpha.com/input/?i=3%2B4*2%2F%281-5%29^2^3
 			iStat += EqnTest(_T("3+4*2/(1-5)^2^3"), 3.0001220703125, true);
 
 			// Test user defined binary operators
 			iStat += EqnTestInt(_T("1 | 2"), 3, true);
 			iStat += EqnTestInt(_T("1 || 2"), 1, true);
 			iStat += EqnTestInt(_T("123 & 456"), 72, true);
 			iStat += EqnTestInt(_T("(123 & 456) % 10"), 2, true);
 			iStat += EqnTestInt(_T("1 && 0"), 0, true);
 			iStat += EqnTestInt(_T("123 && 456"), 1, true);
 			iStat += EqnTestInt(_T("1 << 3"), 8, true);
 			iStat += EqnTestInt(_T("8 >> 3"), 1, true);
 			iStat += EqnTestInt(_T("9 / 4"), 2, true);
 			iStat += EqnTestInt(_T("9 % 4"), 1, true);
 			iStat += EqnTestInt(_T("if(5%2,1,0)"), 1, true);
 			iStat += EqnTestInt(_T("if(4%2,1,0)"), 0, true);
 			iStat += EqnTestInt(_T("-10+1"), -9, true);
 			iStat += EqnTestInt(_T("1+2*3"), 7, true);
 			iStat += EqnTestInt(_T("const1 != const2"), 1, true);
 			iStat += EqnTestInt(_T("const1 != const2"), 0, false);
 			iStat += EqnTestInt(_T("const1 == const2"), 0, true);
 			iStat += EqnTestInt(_T("const1 == 1"), 1, true);
 			iStat += EqnTestInt(_T("10*(const1 == 1)"), 10, true);
 			iStat += EqnTestInt(_T("2*(const1 | const2)"), 6, true);
 			iStat += EqnTestInt(_T("2*(const1 | const2)"), 7, false);
 			iStat += EqnTestInt(_T("const1 < const2"), 1, true);
 			iStat += EqnTestInt(_T("const2 > const1"), 1, true);
 			iStat += EqnTestInt(_T("const1 <= 1"), 1, true);
 			iStat += EqnTestInt(_T("const2 >= 2"), 1, true);
 			iStat += EqnTestInt(_T("2*(const1 + const2)"), 6, true);
 			iStat += EqnTestInt(_T("2*(const1 - const2)"), -2, true);
 			iStat += EqnTestInt(_T("a != b"), 1, true);
 			iStat += EqnTestInt(_T("a != b"), 0, false);
 			iStat += EqnTestInt(_T("a == b"), 0, true);
 			iStat += EqnTestInt(_T("a == 1"), 1, true);
 			iStat += EqnTestInt(_T("10*(a == 1)"), 10, true);
 			iStat += EqnTestInt(_T("2*(a | b)"), 6, true);
 			iStat += EqnTestInt(_T("2*(a | b)"), 7, false);
 			iStat += EqnTestInt(_T("a < b"), 1, true);
 			iStat += EqnTestInt(_T("b > a"), 1, true);
 			iStat += EqnTestInt(_T("a <= 1"), 1, true);
 			iStat += EqnTestInt(_T("b >= 2"), 1, true);
 			iStat += EqnTestInt(_T("2*(a + b)"), 6, true);
 			iStat += EqnTestInt(_T("2*(a - b)"), -2, true);
 			iStat += EqnTestInt(_T("a + (a << b)"), 5, true);
 			iStat += EqnTestInt(_T("-2^2"), -4, true);
 			iStat += EqnTestInt(_T("3--a"), 4, true);
 			iStat += EqnTestInt(_T("3+-3^2"), -6, true);
 
 			// Test reading of hex values:
 			iStat += EqnTestInt(_T("0xff"), 255, true);
 			iStat += EqnTestInt(_T("10+0xff"), 265, true);
 			iStat += EqnTestInt(_T("0xff+10"), 265, true);
 			iStat += EqnTestInt(_T("10*0xff"), 2550, true);
 			iStat += EqnTestInt(_T("0xff*10"), 2550, true);
 			iStat += EqnTestInt(_T("10+0xff+1"), 266, true);
 			iStat += EqnTestInt(_T("1+0xff+10"), 266, true);
 
 			// incorrect: '^' is yor here, not power
 			//    iStat += EqnTestInt("-(1+2)^2", -9, true);
 			//    iStat += EqnTestInt("-1^3", -1, true);          
 
 				  // Test precedence
 				  // a=1, b=2, c=3
 			iStat += EqnTestInt(_T("a + b * c"), 7, true);
 			iStat += EqnTestInt(_T("a * b + c"), 5, true);
 			iStat += EqnTestInt(_T("a<b && b>10"), 0, true);
 			iStat += EqnTestInt(_T("a<b && b<10"), 1, true);
 
 			iStat += EqnTestInt(_T("a + b << c"), 17, true);
 			iStat += EqnTestInt(_T("a << b + c"), 7, true);
 			iStat += EqnTestInt(_T("c * b < a"), 0, true);
 			iStat += EqnTestInt(_T("c * b == 6 * a"), 1, true);
 			iStat += EqnTestInt(_T("2^2^3"), 256, true);
 
 
 			if (iStat == 0)
 				mu::console() << _T("passed") << endl;
 			else
 				mu::console() << _T("\n  failed with ") << iStat << _T(" errors") << endl;
 
 			return iStat;
 		}
 
 		//---------------------------------------------------------------------------------------------
 		/** \brief Check muParser name restriction enforcement. */
 		int ParserTester::TestNames()
 		{
 			int  iStat = 0,
 				iErr = 0;
 
 			mu::console() << "testing name restriction enforcement...";
 
 			Parser p;
 
 #define PARSER_THROWCHECK(DOMAIN, FAIL, EXPR, ARG)	\
 			iErr = 0;										\
 			ParserTester::c_iCount++;						\
 			try												\
 			{												\
 				p.Define##DOMAIN(EXPR, ARG);                \
 				iErr = (FAIL) ? 0 : 1;						\
 			}												\
 			catch(...)										\
 			{												\
 				iErr = (!FAIL) ? 0 : 1;						\
 			}												\
 			iStat += iErr;      
 
 			// constant names
 			PARSER_THROWCHECK(Const, false, _T("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), 1)
 			PARSER_THROWCHECK(Const, false, _T("0a"), 1)
 			PARSER_THROWCHECK(Const, false, _T("9a"), 1)
 			PARSER_THROWCHECK(Const, false, _T("+a"), 1)
 			PARSER_THROWCHECK(Const, false, _T("-a"), 1)
 			PARSER_THROWCHECK(Const, false, _T("a-"), 1)
 			PARSER_THROWCHECK(Const, false, _T("a*"), 1)
 			PARSER_THROWCHECK(Const, false, _T("a?"), 1)
 			PARSER_THROWCHECK(Const, true, _T("a"), 1)
 			PARSER_THROWCHECK(Const, true, _T("a_min"), 1)
 			PARSER_THROWCHECK(Const, true, _T("a_min0"), 1)
 			PARSER_THROWCHECK(Const, true, _T("a_min9"), 1)
 
 			// variable names
 			value_type a;
 			p.ClearConst();
 			PARSER_THROWCHECK(Var, false, _T("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), &a);
 			PARSER_THROWCHECK(Var, false, _T("123abc"), &a)
 			PARSER_THROWCHECK(Var, false, _T("9a"), &a)
 			PARSER_THROWCHECK(Var, false, _T("0a"), &a)
 			PARSER_THROWCHECK(Var, false, _T("+a"), &a)
 			PARSER_THROWCHECK(Var, false, _T("-a"), &a)
 			PARSER_THROWCHECK(Var, false, _T("?a"), &a)
 			PARSER_THROWCHECK(Var, false, _T("!a"), &a)
 			PARSER_THROWCHECK(Var, false, _T("a+"), &a)
 			PARSER_THROWCHECK(Var, false, _T("a-"), &a)
 			PARSER_THROWCHECK(Var, false, _T("a*"), &a)
 			PARSER_THROWCHECK(Var, false, _T("a?"), &a)
 			PARSER_THROWCHECK(Var, true, _T("a"), &a)
 			PARSER_THROWCHECK(Var, true, _T("a_min"), &a)
 			PARSER_THROWCHECK(Var, true, _T("a_min0"), &a)
 			PARSER_THROWCHECK(Var, true, _T("a_min9"), &a)
 			PARSER_THROWCHECK(Var, false, _T("a_min9"), 0)
 
 			// Postfix operators
 			// fail
 			PARSER_THROWCHECK(PostfixOprt, false, _T("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), f1of1);
 			PARSER_THROWCHECK(PostfixOprt, false, _T("(k"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, false, _T("9+"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, false, _T("+"), 0)
 			// pass
 			PARSER_THROWCHECK(PostfixOprt, true, _T("-a"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("?a"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("_"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("#"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("&&"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("||"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("&"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("|"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("++"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("--"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("?>"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("?<"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("**"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("xor"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("and"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("or"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("not"), f1of1)
 			PARSER_THROWCHECK(PostfixOprt, true, _T("!"), f1of1)
 
 			// Binary operator
 			// The following must fail with builtin operators activated
 			// p.EnableBuiltInOp(true); -> this is the default
 			p.ClearPostfixOprt();
 			PARSER_THROWCHECK(Oprt, false, _T("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), f1of2);
 			PARSER_THROWCHECK(Oprt, false, _T("+"), f1of2)
 			PARSER_THROWCHECK(Oprt, false, _T("-"), f1of2)
 			PARSER_THROWCHECK(Oprt, false, _T("*"), f1of2)
 			PARSER_THROWCHECK(Oprt, false, _T("/"), f1of2)
 			PARSER_THROWCHECK(Oprt, false, _T("^"), f1of2)
 			PARSER_THROWCHECK(Oprt, false, _T("&&"), f1of2)
 			PARSER_THROWCHECK(Oprt, false, _T("||"), f1of2)
 
 			// without activated built in operators it should work
 			p.EnableBuiltInOprt(false);
 			PARSER_THROWCHECK(Oprt, true, _T("+"), f1of2)
 			PARSER_THROWCHECK(Oprt, true, _T("-"), f1of2)
 			PARSER_THROWCHECK(Oprt, true, _T("*"), f1of2)
 			PARSER_THROWCHECK(Oprt, true, _T("/"), f1of2)
 			PARSER_THROWCHECK(Oprt, true, _T("^"), f1of2)
 			PARSER_THROWCHECK(Oprt, true, _T("&&"), f1of2)
 			PARSER_THROWCHECK(Oprt, true, _T("||"), f1of2)
 #undef PARSER_THROWCHECK
 
 			if (iStat == 0)
 				mu::console() << _T("passed") << endl;
 			else
 				mu::console() << _T("\n  failed with ") << iStat << _T(" errors") << endl;
 
 			return iStat;
 		}
 
 		//---------------------------------------------------------------------------
 		int ParserTester::TestSyntax()
 		{
 			int iStat = 0;
 			mu::console() << _T("testing syntax engine...");
 
 			iStat += ThrowTest(_T("1,"), ecUNEXPECTED_EOF);  // incomplete hex definition
 			iStat += ThrowTest(_T("a,"), ecUNEXPECTED_EOF);  // incomplete hex definition
 			iStat += ThrowTest(_T("sin(8),"), ecUNEXPECTED_EOF);  // incomplete hex definition
 			iStat += ThrowTest(_T("(sin(8)),"), ecUNEXPECTED_EOF);  // incomplete hex definition
 			iStat += ThrowTest(_T("a{m},"), ecUNEXPECTED_EOF);  // incomplete hex definition
 
 			iStat += EqnTest(_T("(1+ 2*a)"), 3, true);   // Spaces within formula
 			iStat += EqnTest(_T("sqrt((4))"), 2, true);  // Multiple brackets
 			iStat += EqnTest(_T("sqrt((2)+2)"), 2, true);// Multiple brackets
 			iStat += EqnTest(_T("sqrt(2+(2))"), 2, true);// Multiple brackets
 			iStat += EqnTest(_T("sqrt(a+(3))"), 2, true);// Multiple brackets
 			iStat += EqnTest(_T("sqrt((3)+a)"), 2, true);// Multiple brackets
 			iStat += EqnTest(_T("order(1,2)"), 1, true); // May not cause name collision with operator "or"
 			iStat += EqnTest(_T("(2+"), 0, false);       // missing closing bracket 
 			iStat += EqnTest(_T("2++4"), 0, false);      // unexpected operator
 			iStat += EqnTest(_T("2+-4"), 0, false);      // unexpected operator
 			iStat += EqnTest(_T("(2+)"), 0, false);      // unexpected closing bracket
 			iStat += EqnTest(_T("--2"), 0, false);       // double sign
 			iStat += EqnTest(_T("ksdfj"), 0, false);     // unknown token
 			iStat += EqnTest(_T("()"), 0, false);        // empty bracket without a function
 			iStat += EqnTest(_T("5+()"), 0, false);      // empty bracket without a function
 			iStat += EqnTest(_T("sin(cos)"), 0, false);  // unexpected function
 			iStat += EqnTest(_T("5t6"), 0, false);       // unknown token
 			iStat += EqnTest(_T("5 t 6"), 0, false);     // unknown token
 			iStat += EqnTest(_T("8*"), 0, false);        // unexpected end of formula
 			iStat += EqnTest(_T(",3"), 0, false);        // unexpected comma
 			iStat += EqnTest(_T("3,5"), 0, false);       // unexpected comma
 			iStat += EqnTest(_T("sin(8,8)"), 0, false);  // too many function args
 			iStat += EqnTest(_T("(7,8)"), 0, false);     // too many function args
 			iStat += EqnTest(_T("sin)"), 0, false);      // unexpected closing bracket
 			iStat += EqnTest(_T("a)"), 0, false);        // unexpected closing bracket
 			iStat += EqnTest(_T("pi)"), 0, false);       // unexpected closing bracket
 			iStat += EqnTest(_T("sin(())"), 0, false);   // unexpected closing bracket
 			iStat += EqnTest(_T("sin()"), 0, false);     // unexpected closing bracket
 
 			if (iStat == 0)
 				mu::console() << _T("passed") << endl;
 			else
 				mu::console() << _T("\n  failed with ") << iStat << _T(" errors") << endl;
 
 			return iStat;
 		}
 
 		//---------------------------------------------------------------------------
 		int ParserTester::TestVarConst()
 		{
 			int iStat = 0;
 			mu::console() << _T("testing variable/constant detection...");
 
 			// Test if the result changes when a variable changes
 			iStat += EqnTestWithVarChange(_T("a"), 1, 1, 2, 2);
 			iStat += EqnTestWithVarChange(_T("2*a"), 2, 4, 3, 6);
 
 			// distinguish constants with same basename
 			iStat += EqnTest(_T("const"), 1, true);
 			iStat += EqnTest(_T("const1"), 2, true);
 			iStat += EqnTest(_T("const2"), 3, true);
 			iStat += EqnTest(_T("2*const"), 2, true);
 			iStat += EqnTest(_T("2*const1"), 4, true);
 			iStat += EqnTest(_T("2*const2"), 6, true);
 			iStat += EqnTest(_T("2*const+1"), 3, true);
 			iStat += EqnTest(_T("2*const1+1"), 5, true);
 			iStat += EqnTest(_T("2*const2+1"), 7, true);
 			iStat += EqnTest(_T("const"), 0, false);
 			iStat += EqnTest(_T("const1"), 0, false);
 			iStat += EqnTest(_T("const2"), 0, false);
 
 			// distinguish variables with same basename
 			iStat += EqnTest(_T("a"), 1, true);
 			iStat += EqnTest(_T("aa"), 2, true);
 			iStat += EqnTest(_T("2*a"), 2, true);
 			iStat += EqnTest(_T("2*aa"), 4, true);
 			iStat += EqnTest(_T("2*a-1"), 1, true);
 			iStat += EqnTest(_T("2*aa-1"), 3, true);
 
 			// custom value recognition
 			iStat += EqnTest(_T("0xff"), 255, true);
 			iStat += EqnTest(_T("0x97 + 0xff"), 406, true);
 
 			// Finally test querying of used variables
 			try
 			{
 				int idx;
 				mu::Parser p;
 				mu::value_type vVarVal[] = { 1, 2, 3, 4, 5 };
 				p.DefineVar(_T("a"), &vVarVal[0]);
 				p.DefineVar(_T("b"), &vVarVal[1]);
 				p.DefineVar(_T("c"), &vVarVal[2]);
 				p.DefineVar(_T("d"), &vVarVal[3]);
 				p.DefineVar(_T("e"), &vVarVal[4]);
 
 				// Test lookup of defined variables
 				// 4 used variables
 				p.SetExpr(_T("a+b+c+d"));
 				mu::varmap_type UsedVar = p.GetUsedVar();
 				int iCount = (int)UsedVar.size();
 				if (iCount != 4)
 					throw false;
 
 				// the next check will fail if the parser 
 				// erroneously creates new variables internally
 				if (p.GetVar().size() != 5)
 					throw false;
 
 				mu::varmap_type::const_iterator item = UsedVar.begin();
 				for (idx = 0; item != UsedVar.end(); ++item)
 				{
 					if (&vVarVal[idx++] != item->second)
 						throw false;
 				}
 
 				// Test lookup of undefined variables
 				p.SetExpr(_T("undef1+undef2+undef3"));
 				UsedVar = p.GetUsedVar();
 				iCount = (int)UsedVar.size();
 				if (iCount != 3)
 					throw false;
 
 				// the next check will fail if the parser 
 				// erroneously creates new variables internally
 				if (p.GetVar().size() != 5)
 					throw false;
 
 				for (item = UsedVar.begin(); item != UsedVar.end(); ++item)
 				{
 					if (item->second != 0)
 						throw false; // all pointers to undefined variables must be null
 				}
 
 				// 1 used variables
 				p.SetExpr(_T("a+b"));
 				UsedVar = p.GetUsedVar();
 				iCount = (int)UsedVar.size();
 				if (iCount != 2) throw false;
 				item = UsedVar.begin();
 				for (idx = 0; item != UsedVar.end(); ++item)
 					if (&vVarVal[idx++] != item->second) throw false;
 
 			}
 			catch (...)
 			{
 				iStat += 1;
 			}
 
 			if (iStat == 0)
 				mu::console() << _T("passed") << endl;
 			else
 				mu::console() << _T("\n  failed with ") << iStat << _T(" errors") << endl;
 
 			return iStat;
 		}
 
 		//---------------------------------------------------------------------------
 		int ParserTester::TestMultiArg()
 		{
 			int iStat = 0;
 			mu::console() << _T("testing multiarg functions...");
 
 			// Compound expressions
 			iStat += EqnTest(_T("1,2,3"), 3, true);
 			iStat += EqnTest(_T("a,b,c"), 3, true);
 			iStat += EqnTest(_T("a=10,b=20,c=a*b"), 200, true);
 			iStat += EqnTest(_T("1,\n2,\n3"), 3, true);
 			iStat += EqnTest(_T("a,\nb,\nc"), 3, true);
 			iStat += EqnTest(_T("a=10,\nb=20,\nc=a*b"), 200, true);
 			iStat += EqnTest(_T("1,\r\n2,\r\n3"), 3, true);
 			iStat += EqnTest(_T("a,\r\nb,\r\nc"), 3, true);
 			iStat += EqnTest(_T("a=10,\r\nb=20,\r\nc=a*b"), 200, true);
 
 			// picking the right argument
 			iStat += EqnTest(_T("f1of1(1)"), 1, true);
 			iStat += EqnTest(_T("f1of2(1, 2)"), 1, true);
 			iStat += EqnTest(_T("f2of2(1, 2)"), 2, true);
 			iStat += EqnTest(_T("f1of3(1, 2, 3)"), 1, true);
 			iStat += EqnTest(_T("f2of3(1, 2, 3)"), 2, true);
 			iStat += EqnTest(_T("f3of3(1, 2, 3)"), 3, true);
 			iStat += EqnTest(_T("f1of4(1, 2, 3, 4)"), 1, true);
 			iStat += EqnTest(_T("f2of4(1, 2, 3, 4)"), 2, true);
 			iStat += EqnTest(_T("f3of4(1, 2, 3, 4)"), 3, true);
 			iStat += EqnTest(_T("f4of4(1, 2, 3, 4)"), 4, true);
 			iStat += EqnTest(_T("f1of5(1, 2, 3, 4, 5)"), 1, true);
 			iStat += EqnTest(_T("f2of5(1, 2, 3, 4, 5)"), 2, true);
 			iStat += EqnTest(_T("f3of5(1, 2, 3, 4, 5)"), 3, true);
 			iStat += EqnTest(_T("f4of5(1, 2, 3, 4, 5)"), 4, true);
 			iStat += EqnTest(_T("f5of5(1, 2, 3, 4, 5)"), 5, true);
 			// Too few arguments / Too many arguments
 			iStat += EqnTest(_T("1+ping()"), 11, true);
 			iStat += EqnTest(_T("ping()+1"), 11, true);
 			iStat += EqnTest(_T("2*ping()"), 20, true);
 			iStat += EqnTest(_T("ping()*2"), 20, true);
 			iStat += EqnTest(_T("ping(1,2)"), 0, false);
 			iStat += EqnTest(_T("1+ping(1,2)"), 0, false);
 			iStat += EqnTest(_T("f1of1(1,2)"), 0, false);
 			iStat += EqnTest(_T("f1of1()"), 0, false);
 			iStat += EqnTest(_T("f1of2(1, 2, 3)"), 0, false);
 			iStat += EqnTest(_T("f1of2(1)"), 0, false);
 			iStat += EqnTest(_T("f1of3(1, 2, 3, 4)"), 0, false);
 			iStat += EqnTest(_T("f1of3(1)"), 0, false);
 			iStat += EqnTest(_T("f1of4(1, 2, 3, 4, 5)"), 0, false);
 			iStat += EqnTest(_T("f1of4(1)"), 0, false);
 			iStat += EqnTest(_T("(1,2,3)"), 0, false);
 			iStat += EqnTest(_T("1,2,3"), 0, false);
 			iStat += EqnTest(_T("(1*a,2,3)"), 0, false);
 			iStat += EqnTest(_T("1,2*a,3"), 0, false);
 
 			// correct calculation of arguments
 			iStat += EqnTest(_T("min(a, 1)"), 1, true);
 			iStat += EqnTest(_T("min(3*2, 1)"), 1, true);
 			iStat += EqnTest(_T("min(3*2, 1)"), 6, false);
 			iStat += EqnTest(_T("firstArg(2,3,4)"), 2, true);
 			iStat += EqnTest(_T("lastArg(2,3,4)"), 4, true);
 			iStat += EqnTest(_T("min(3*a+1, 1)"), 1, true);
 			iStat += EqnTest(_T("max(3*a+1, 1)"), 4, true);
 			iStat += EqnTest(_T("max(3*a+1, 1)*2"), 8, true);
 			iStat += EqnTest(_T("2*max(3*a+1, 1)+2"), 10, true);
 
 			// functions with Variable argument count
 			iStat += EqnTest(_T("sum(a)"), 1, true);
 			iStat += EqnTest(_T("sum(1,2,3)"), 6, true);
 			iStat += EqnTest(_T("sum(a,b,c)"), 6, true);
 			iStat += EqnTest(_T("sum(1,-max(1,2),3)*2"), 4, true);
 			iStat += EqnTest(_T("2*sum(1,2,3)"), 12, true);
 			iStat += EqnTest(_T("2*sum(1,2,3)+2"), 14, true);
 			iStat += EqnTest(_T("2*sum(-1,2,3)+2"), 10, true);
 			iStat += EqnTest(_T("2*sum(-1,2,-(-a))+2"), 6, true);
 			iStat += EqnTest(_T("2*sum(-1,10,-a)+2"), 18, true);
 			iStat += EqnTest(_T("2*sum(1,2,3)*2"), 24, true);
 			iStat += EqnTest(_T("sum(1,-max(1,2),3)*2"), 4, true);
 			iStat += EqnTest(_T("sum(1*3, 4, a+2)"), 10, true);
 			iStat += EqnTest(_T("sum(1*3, 2*sum(1,2,2), a+2)"), 16, true);
 			iStat += EqnTest(_T("sum(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2)"), 24, true);
 
 			// some failures
 			iStat += EqnTest(_T("sum()"), 0, false);
 			iStat += EqnTest(_T("sum(,)"), 0, false);
 			iStat += EqnTest(_T("sum(1,2,)"), 0, false);
 			iStat += EqnTest(_T("sum(,1,2)"), 0, false);
 
 			if (iStat == 0)
 				mu::console() << _T("passed") << endl;
 			else
 				mu::console() << _T("\n  failed with ") << iStat << _T(" errors") << endl;
 
 			return iStat;
 		}
 
 
 		//---------------------------------------------------------------------------
 		int ParserTester::TestInfixOprt()
 		{
 			int iStat(0);
 			mu::console() << "testing infix operators...";
 
 			iStat += EqnTest(_T("+1"), +1, true);
 			iStat += EqnTest(_T("-(+1)"), -1, true);
 			iStat += EqnTest(_T("-(+1)*2"), -2, true);
 			iStat += EqnTest(_T("-(+2)*sqrt(4)"), -4, true);
 			iStat += EqnTest(_T("3-+a"), 2, true);
 			iStat += EqnTest(_T("+1*3"), 3, true);
 
 			iStat += EqnTest(_T("-1"), -1, true);
 			iStat += EqnTest(_T("-(-1)"), 1, true);
 			iStat += EqnTest(_T("-(-1)*2"), 2, true);
 			iStat += EqnTest(_T("-(-2)*sqrt(4)"), 4, true);
-			iStat += EqnTest(_T("-_pi"), -PARSER_CONST_PI, true);
+			iStat += EqnTest(_T("-_pi"), -MathImpl<double>::CONST_PI, true);
 			iStat += EqnTest(_T("-a"), -1, true);
 			iStat += EqnTest(_T("-(a)"), -1, true);
 			iStat += EqnTest(_T("-(-a)"), 1, true);
 			iStat += EqnTest(_T("-(-a)*2"), 2, true);
 			iStat += EqnTest(_T("-(8)"), -8, true);
 			iStat += EqnTest(_T("-8"), -8, true);
 			iStat += EqnTest(_T("-(2+1)"), -3, true);
 			iStat += EqnTest(_T("-(f1of1(1+2*3)+1*2)"), -9, true);
 			iStat += EqnTest(_T("-(-f1of1(1+2*3)+1*2)"), 5, true);
 			iStat += EqnTest(_T("-sin(8)"), -0.989358, true);
 			iStat += EqnTest(_T("3-(-a)"), 4, true);
 			iStat += EqnTest(_T("3--a"), 4, true);
 			iStat += EqnTest(_T("-1*3"), -3, true);
 
 			// Postfix / infix priorities
 			iStat += EqnTest(_T("~2#"), 8, true);
 			iStat += EqnTest(_T("~f1of1(2)#"), 8, true);
 			iStat += EqnTest(_T("~(b)#"), 8, true);
 			iStat += EqnTest(_T("(~b)#"), 12, true);
 			iStat += EqnTest(_T("~(2#)"), 8, true);
 			iStat += EqnTest(_T("~(f1of1(2)#)"), 8, true);
 			//
 			iStat += EqnTest(_T("-2^2"), -4, true);
 			iStat += EqnTest(_T("-(a+b)^2"), -9, true);
 			iStat += EqnTest(_T("(-3)^2"), 9, true);
 			iStat += EqnTest(_T("-(-2^2)"), 4, true);
 			iStat += EqnTest(_T("3+-3^2"), -6, true);
 			// The following assumes use of sqr as postfix operator together
 			// with a sign operator of low priority:
 			iStat += EqnTest(_T("-2'"), -4, true);
 			iStat += EqnTest(_T("-(1+1)'"), -4, true);
 			iStat += EqnTest(_T("2+-(1+1)'"), -2, true);
 			iStat += EqnTest(_T("2+-2'"), -2, true);
 			// This is the classic behaviour of the infix sign operator (here: "$") which is
 			// now deprecated:
 			iStat += EqnTest(_T("$2^2"), 4, true);
 			iStat += EqnTest(_T("$(a+b)^2"), 9, true);
 			iStat += EqnTest(_T("($3)^2"), 9, true);
 			iStat += EqnTest(_T("$($2^2)"), -4, true);
 			iStat += EqnTest(_T("3+$3^2"), 12, true);
 
 			// infix operators sharing the first few characters
 			iStat += EqnTest(_T("~ 123"), 123 + 2, true);
 			iStat += EqnTest(_T("~~ 123"), 123 + 2, true);
 
 			if (iStat == 0)
 				mu::console() << _T("passed") << endl;
 			else
 				mu::console() << _T("\n  failed with ") << iStat << _T(" errors") << endl;
 
 			return iStat;
 		}
 
 
 		//---------------------------------------------------------------------------
 		int ParserTester::TestPostFix()
 		{
 			int iStat = 0;
 			mu::console() << _T("testing postfix operators...");
 
 			// application
 			iStat += EqnTest(_T("3{m}+5"), 5.003, true);
 			iStat += EqnTest(_T("1000{m}"), 1, true);
 			iStat += EqnTest(_T("1000 {m}"), 1, true);
 			iStat += EqnTest(_T("(a){m}"), 1e-3, true);
 			iStat += EqnTest(_T("a{m}"), 1e-3, true);
 			iStat += EqnTest(_T("a {m}"), 1e-3, true);
 			iStat += EqnTest(_T("-(a){m}"), -1e-3, true);
 			iStat += EqnTest(_T("-2{m}"), -2e-3, true);
 			iStat += EqnTest(_T("-2 {m}"), -2e-3, true);
 			iStat += EqnTest(_T("f1of1(1000){m}"), 1, true);
 			iStat += EqnTest(_T("-f1of1(1000){m}"), -1, true);
 			iStat += EqnTest(_T("-f1of1(-1000){m}"), 1, true);
 			iStat += EqnTest(_T("f4of4(0,0,0,1000){m}"), 1, true);
 			iStat += EqnTest(_T("2+(a*1000){m}"), 3, true);
 
 			// can postfix operators "m" und "meg" be told apart properly?
 			iStat += EqnTest(_T("2*3000meg+2"), 2 * 3e9 + 2, true);
 
 			// some incorrect results
 			iStat += EqnTest(_T("1000{m}"), 0.1, false);
 			iStat += EqnTest(_T("(a){m}"), 2, false);
 			// failure due to syntax checking
 			iStat += ThrowTest(_T("0x"), ecUNASSIGNABLE_TOKEN);  // incomplete hex definition
 			iStat += ThrowTest(_T("3+"), ecUNEXPECTED_EOF);
 			iStat += ThrowTest(_T("4 + {m}"), ecUNASSIGNABLE_TOKEN);
 			iStat += ThrowTest(_T("{m}4"), ecUNASSIGNABLE_TOKEN);
 			iStat += ThrowTest(_T("sin({m})"), ecUNASSIGNABLE_TOKEN);
 			iStat += ThrowTest(_T("{m} {m}"), ecUNASSIGNABLE_TOKEN);
 			iStat += ThrowTest(_T("{m}(8)"), ecUNASSIGNABLE_TOKEN);
 			iStat += ThrowTest(_T("4,{m}"), ecUNASSIGNABLE_TOKEN);
 			iStat += ThrowTest(_T("-{m}"), ecUNASSIGNABLE_TOKEN);
 			iStat += ThrowTest(_T("2(-{m})"), ecUNEXPECTED_PARENS);
 			iStat += ThrowTest(_T("2({m})"), ecUNEXPECTED_PARENS);
 
 			iStat += ThrowTest(_T("multi*1.0"), ecUNASSIGNABLE_TOKEN);
 
 			if (iStat == 0)
 				mu::console() << _T("passed") << endl;
 			else
 				mu::console() << _T("\n  failed with ") << iStat << _T(" errors") << endl;
 
 			return iStat;
 		}
 
 		//---------------------------------------------------------------------------
 		int ParserTester::TestExpression()
 		{
 			int iStat = 0;
 			mu::console() << _T("testing expression samples...");
 
 			value_type b = 2;
 
 			// Optimization
 			iStat += EqnTest(_T("2*b*5"), 20, true);
 			iStat += EqnTest(_T("2*b*5 + 4*b"), 28, true);
 			iStat += EqnTest(_T("2*a/3"), 2.0 / 3.0, true);
 
 			// Addition auf cmVARMUL 
 			iStat += EqnTest(_T("3+b"), b + 3, true);
 			iStat += EqnTest(_T("b+3"), b + 3, true);
 			iStat += EqnTest(_T("b*3+2"), b * 3 + 2, true);
 			iStat += EqnTest(_T("3*b+2"), b * 3 + 2, true);
 			iStat += EqnTest(_T("2+b*3"), b * 3 + 2, true);
 			iStat += EqnTest(_T("2+3*b"), b * 3 + 2, true);
 			iStat += EqnTest(_T("b+3*b"), b + 3 * b, true);
 			iStat += EqnTest(_T("3*b+b"), b + 3 * b, true);
 
 			iStat += EqnTest(_T("2+b*3+b"), 2 + b * 3 + b, true);
 			iStat += EqnTest(_T("b+2+b*3"), b + 2 + b * 3, true);
 
 			iStat += EqnTest(_T("(2*b+1)*4"), (2 * b + 1) * 4, true);
 			iStat += EqnTest(_T("4*(2*b+1)"), (2 * b + 1) * 4, true);
 
 			// operator precedences
 			iStat += EqnTest(_T("1+2-3*4/5^6"), 2.99923, true);
 			iStat += EqnTest(_T("1^2/3*4-5+6"), 2.33333333, true);
 			iStat += EqnTest(_T("1+2*3"), 7, true);
 			iStat += EqnTest(_T("1+2*3"), 7, true);
 			iStat += EqnTest(_T("(1+2)*3"), 9, true);
 			iStat += EqnTest(_T("(1+2)*(-3)"), -9, true);
 			iStat += EqnTest(_T("2/4"), 0.5, true);
 
 			iStat += EqnTest(_T("exp(ln(7))"), 7, true);
 			iStat += EqnTest(_T("e^ln(7)"), 7, true);
 			iStat += EqnTest(_T("e^(ln(7))"), 7, true);
 			iStat += EqnTest(_T("(e^(ln(7)))"), 7, true);
 			iStat += EqnTest(_T("1-(e^(ln(7)))"), -6, true);
 			iStat += EqnTest(_T("2*(e^(ln(7)))"), 14, true);
 			iStat += EqnTest(_T("10^log(5)"), pow(10.0, log(5.0)), true);
 			iStat += EqnTest(_T("10^log10(5)"), 5, true);
 			iStat += EqnTest(_T("2^log2(4)"), 4, true);
 			iStat += EqnTest(_T("-(sin(0)+1)"), -1, true);
 			iStat += EqnTest(_T("-(2^1.1)"), -2.14354692, true);
 
 			iStat += EqnTest(_T("(cos(2.41)/b)"), -0.372056, true);
 			iStat += EqnTest(_T("(1*(2*(3*(4*(5*(6*(a+b)))))))"), 2160, true);
 			iStat += EqnTest(_T("(1*(2*(3*(4*(5*(6*(7*(a+b))))))))"), 15120, true);
 			iStat += EqnTest(_T("(a/((((b+(((e*(((((pi*((((3.45*((pi+a)+pi))+b)+b)*a))+0.68)+e)+a)/a))+a)+b))+b)*a)-pi))"), 0.00377999, true);
 
 			// long formula (Reference: Matlab)
 			iStat += EqnTest(
 				_T("(((-9))-e/(((((((pi-(((-7)+(-3)/4/e))))/(((-5))-2)-((pi+(-0))*(sqrt((e+e))*(-8))*(((-pi)+(-pi)-(-9)*(6*5))")
 				_T("/(-e)-e))/2)/((((sqrt(2/(-e)+6)-(4-2))+((5/(-2))/(1*(-pi)+3))/8)*pi*((pi/((-2)/(-6)*1*(-1))*(-6)+(-e)))))/")
 				_T("((e+(-2)+(-e)*((((-3)*9+(-e)))+(-9)))))))-((((e-7+(((5/pi-(3/1+pi)))))/e)/(-5))/(sqrt((((((1+(-7))))+((((-")
 				_T("e)*(-e)))-8))*(-5)/((-e)))*(-6)-((((((-2)-(-9)-(-e)-1)/3))))/(sqrt((8+(e-((-6))+(9*(-9))))*(((3+2-8))*(7+6")
 				_T("+(-5))+((0/(-e)*(-pi))+7)))+(((((-e)/e/e)+((-6)*5)*e+(3+(-5)/pi))))+pi))/sqrt((((9))+((((pi))-8+2))+pi))/e")
 				_T("*4)*((-5)/(((-pi))*(sqrt(e)))))-(((((((-e)*(e)-pi))/4+(pi)*(-9)))))))+(-pi)"), -12.23016549, true);
 
 			// long formula (Reference: Matlab)
 			iStat += EqnTest(
 				_T("(atan(sin((((((((((((((((pi/cos((a/((((0.53-b)-pi)*e)/b))))+2.51)+a)-0.54)/0.98)+b)*b)+e)/a)+b)+a)+b)+pi)/e")
 				_T(")+a)))*2.77)"), -2.16995656, true);
 
 			// long formula (Reference: Matlab)
 			iStat += EqnTest(_T("1+2-3*4/5^6*(2*(1-5+(3*7^9)*(4+6*7-3)))+12"), -7995810.09926, true);
 
 			if (iStat == 0)
 				mu::console() << _T("passed") << endl;
 			else
 				mu::console() << _T("\n  failed with ") << iStat << _T(" errors") << endl;
 
 			return iStat;
 		}
 
 
 
 		//---------------------------------------------------------------------------
 		int ParserTester::TestIfThenElse()
 		{
 			int iStat = 0;
 			mu::console() << _T("testing if-then-else operator...");
 
 			// Test error detection
 			iStat += ThrowTest(_T(":3"), ecUNEXPECTED_CONDITIONAL);
 			iStat += ThrowTest(_T("? 1 : 2"), ecUNEXPECTED_CONDITIONAL);
 			iStat += ThrowTest(_T("(a<b) ? (b<c) ? 1 : 2"), ecMISSING_ELSE_CLAUSE);
 			iStat += ThrowTest(_T("(a<b) ? 1"), ecMISSING_ELSE_CLAUSE);
 			iStat += ThrowTest(_T("(a<b) ? a"), ecMISSING_ELSE_CLAUSE);
 			iStat += ThrowTest(_T("(a<b) ? a+b"), ecMISSING_ELSE_CLAUSE);
 			iStat += ThrowTest(_T("a : b"), ecMISPLACED_COLON);
 			iStat += ThrowTest(_T("1 : 2"), ecMISPLACED_COLON);
 			iStat += ThrowTest(_T("(1) ? 1 : 2 : 3"), ecMISPLACED_COLON);
 			iStat += ThrowTest(_T("(true) ? 1 : 2 : 3"), ecUNASSIGNABLE_TOKEN);
-			iStat += ThrowTest(_T("1 ? 2 : 0 ? (7:1)"), ecMISPLACED_COLON);
+
+			// from oss-fzz.com: UNKNOWN READ; https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22922#c1
+			iStat += ThrowTest(_T("1?2:0?(7:1)"), ecMISPLACED_COLON);
+
+			// from oss-fuzz.com: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=22938
+			iStat += ThrowTest(_T("sum(0?1,0,0:3)"), ecMISPLACED_COLON);
+			iStat += ThrowTest(_T("sum(0?(1,0,0):3)"), ecMISPLACED_COLON);
+			iStat += ThrowTest(_T("sum(2>3?2,4,2:4)"), ecMISPLACED_COLON);
+			iStat += ThrowTest(_T("sum(2>3?2,4,sin(2):4)"), ecMISPLACED_COLON);
+			iStat += ThrowTest(_T("sum(2>3?sin(2),4,2:4)"), ecMISPLACED_COLON);
 
 			iStat += EqnTest(_T("1 ? 128 : 255"), 128, true);
 			iStat += EqnTest(_T("1<2 ? 128 : 255"), 128, true);
 			iStat += EqnTest(_T("a<b ? 128 : 255"), 128, true);
 			iStat += EqnTest(_T("(a<b) ? 128 : 255"), 128, true);
 			iStat += EqnTest(_T("(1) ? 10 : 11"), 10, true);
 			iStat += EqnTest(_T("(0) ? 10 : 11"), 11, true);
 			iStat += EqnTest(_T("(1) ? a+b : c+d"), 3, true);
 			iStat += EqnTest(_T("(0) ? a+b : c+d"), 1, true);
 			iStat += EqnTest(_T("(1) ? 0 : 1"), 0, true);
 			iStat += EqnTest(_T("(0) ? 0 : 1"), 1, true);
 			iStat += EqnTest(_T("(a<b) ? 10 : 11"), 10, true);
 			iStat += EqnTest(_T("(a>b) ? 10 : 11"), 11, true);
 			iStat += EqnTest(_T("(a<b) ? c : d"), 3, true);
 			iStat += EqnTest(_T("(a>b) ? c : d"), -2, true);
 
 			iStat += EqnTest(_T("(a>b) ? 1 : 0"), 0, true);
 			iStat += EqnTest(_T("((a>b) ? 1 : 0) ? 1 : 2"), 2, true);
 			iStat += EqnTest(_T("((a>b) ? 1 : 0) ? 1 : sum((a>b) ? 1 : 2)"), 2, true);
 			iStat += EqnTest(_T("((a>b) ? 0 : 1) ? 1 : sum((a>b) ? 1 : 2)"), 1, true);
 
 			iStat += EqnTest(_T("sum((a>b) ? 1 : 2)"), 2, true);
 			iStat += EqnTest(_T("sum((1) ? 1 : 2)"), 1, true);
 			iStat += EqnTest(_T("sum((a>b) ? 1 : 2, 100)"), 102, true);
 			iStat += EqnTest(_T("sum((1) ? 1 : 2, 100)"), 101, true);
 			iStat += EqnTest(_T("sum(3, (a>b) ? 3 : 10)"), 13, true);
 			iStat += EqnTest(_T("sum(3, (a<b) ? 3 : 10)"), 6, true);
 			iStat += EqnTest(_T("10*sum(3, (a>b) ? 3 : 10)"), 130, true);
 			iStat += EqnTest(_T("10*sum(3, (a<b) ? 3 : 10)"), 60, true);
 			iStat += EqnTest(_T("sum(3, (a>b) ? 3 : 10)*10"), 130, true);
 			iStat += EqnTest(_T("sum(3, (a<b) ? 3 : 10)*10"), 60, true);
 			iStat += EqnTest(_T("(a<b) ? sum(3, (a<b) ? 3 : 10)*10 : 99"), 60, true);
 			iStat += EqnTest(_T("(a>b) ? sum(3, (a<b) ? 3 : 10)*10 : 99"), 99, true);
 			iStat += EqnTest(_T("(a<b) ? sum(3, (a<b) ? 3 : 10,10,20)*10 : 99"), 360, true);
 			iStat += EqnTest(_T("(a>b) ? sum(3, (a<b) ? 3 : 10,10,20)*10 : 99"), 99, true);
 			iStat += EqnTest(_T("(a>b) ? sum(3, (a<b) ? 3 : 10,10,20)*10 : sum(3, (a<b) ? 3 : 10)*10"), 60, true);
 
 			// todo: also add for muParserX!
 			iStat += EqnTest(_T("(a<b)&&(a<b) ? 128 : 255"), 128, true);
 			iStat += EqnTest(_T("(a>b)&&(a<b) ? 128 : 255"), 255, true);
 			iStat += EqnTest(_T("(1<2)&&(1<2) ? 128 : 255"), 128, true);
 			iStat += EqnTest(_T("(1>2)&&(1<2) ? 128 : 255"), 255, true);
 			iStat += EqnTest(_T("((1<2)&&(1<2)) ? 128 : 255"), 128, true);
 			iStat += EqnTest(_T("((1>2)&&(1<2)) ? 128 : 255"), 255, true);
 			iStat += EqnTest(_T("((a<b)&&(a<b)) ? 128 : 255"), 128, true);
 			iStat += EqnTest(_T("((a>b)&&(a<b)) ? 128 : 255"), 255, true);
 
 			iStat += EqnTest(_T("1>0 ? 1>2 ? 128 : 255 : 1>0 ? 32 : 64"), 255, true);
 			iStat += EqnTest(_T("1>0 ? 1>2 ? 128 : 255 :(1>0 ? 32 : 64)"), 255, true);
 			iStat += EqnTest(_T("1>0 ? 1>0 ? 128 : 255 : 1>2 ? 32 : 64"), 128, true);
 			iStat += EqnTest(_T("1>0 ? 1>0 ? 128 : 255 :(1>2 ? 32 : 64)"), 128, true);
 			iStat += EqnTest(_T("1>2 ? 1>2 ? 128 : 255 : 1>0 ? 32 : 64"), 32, true);
 			iStat += EqnTest(_T("1>2 ? 1>0 ? 128 : 255 : 1>2 ? 32 : 64"), 64, true);
 			iStat += EqnTest(_T("1>0 ? 50 :  1>0 ? 128 : 255"), 50, true);
 			iStat += EqnTest(_T("1>0 ? 50 : (1>0 ? 128 : 255)"), 50, true);
 			iStat += EqnTest(_T("1>0 ? 1>0 ? 128 : 255 : 50"), 128, true);
 			iStat += EqnTest(_T("1>2 ? 1>2 ? 128 : 255 : 1>0 ? 32 : 1>2 ? 64 : 16"), 32, true);
 			iStat += EqnTest(_T("1>2 ? 1>2 ? 128 : 255 : 1>0 ? 32 :(1>2 ? 64 : 16)"), 32, true);
 			iStat += EqnTest(_T("1>0 ? 1>2 ? 128 : 255 :  1>0 ? 32 :1>2 ? 64 : 16"), 255, true);
 			iStat += EqnTest(_T("1>0 ? 1>2 ? 128 : 255 : (1>0 ? 32 :1>2 ? 64 : 16)"), 255, true);
 			iStat += EqnTest(_T("1 ? 0 ? 128 : 255 : 1 ? 32 : 64"), 255, true);
 
 			// assignment operators
 			iStat += EqnTest(_T("a= 0 ? 128 : 255, a"), 255, true);
 			iStat += EqnTest(_T("a=((a>b)&&(a<b)) ? 128 : 255, a"), 255, true);
 			iStat += EqnTest(_T("c=(a<b)&&(a<b) ? 128 : 255, c"), 128, true);
 			iStat += EqnTest(_T("0 ? a=a+1 : 666, a"), 1, true);
 			iStat += EqnTest(_T("1?a=10:a=20, a"), 10, true);
 			iStat += EqnTest(_T("0?a=10:a=20, a"), 20, true);
 			iStat += EqnTest(_T("0?a=sum(3,4):10, a"), 1, true);  // a should not change its value due to lazy calculation
 
 			iStat += EqnTest(_T("a=1?b=1?3:4:5, a"), 3, true);
 			iStat += EqnTest(_T("a=1?b=1?3:4:5, b"), 3, true);
 			iStat += EqnTest(_T("a=0?b=1?3:4:5, a"), 5, true);
 			iStat += EqnTest(_T("a=0?b=1?3:4:5, b"), 2, true);
 
 			iStat += EqnTest(_T("a=1?5:b=1?3:4, a"), 5, true);
 			iStat += EqnTest(_T("a=1?5:b=1?3:4, b"), 2, true);
 			iStat += EqnTest(_T("a=0?5:b=1?3:4, a"), 3, true);
 			iStat += EqnTest(_T("a=0?5:b=1?3:4, b"), 3, true);
 
 			if (iStat == 0)
 				mu::console() << _T("passed") << endl;
 			else
 				mu::console() << _T("\n  failed with ") << iStat << _T(" errors") << endl;
 
 			return iStat;
 		}
 
 		//---------------------------------------------------------------------------
 		int ParserTester::TestException()
 		{
 			int  iStat = 0;
 			mu::console() << _T("testing error codes...");
 
 			iStat += ThrowTest(_T("3+"), ecUNEXPECTED_EOF);
 			iStat += ThrowTest(_T("3+)"), ecUNEXPECTED_PARENS);
 			iStat += ThrowTest(_T("()"), ecUNEXPECTED_PARENS);
 			iStat += ThrowTest(_T("3+()"), ecUNEXPECTED_PARENS);
 			iStat += ThrowTest(_T("sin(3,4)"), ecTOO_MANY_PARAMS);
 			iStat += ThrowTest(_T("sin()"), ecTOO_FEW_PARAMS);
 			iStat += ThrowTest(_T("(1+2"), ecMISSING_PARENS);
 			iStat += ThrowTest(_T("sin(3)3"), ecUNEXPECTED_VAL);
 			iStat += ThrowTest(_T("sin(3)xyz"), ecUNASSIGNABLE_TOKEN);
 			iStat += ThrowTest(_T("sin(3)cos(3)"), ecUNEXPECTED_FUN);
 			iStat += ThrowTest(_T("a+b+c=10"), ecUNEXPECTED_OPERATOR);
 			iStat += ThrowTest(_T("a=b=3"), ecUNEXPECTED_OPERATOR);
 
 			// functions without parameter
 			iStat += ThrowTest(_T("3+ping(2)"), ecTOO_MANY_PARAMS);
 			iStat += ThrowTest(_T("3+ping(a+2)"), ecTOO_MANY_PARAMS);
 			iStat += ThrowTest(_T("3+ping(sin(a)+2)"), ecTOO_MANY_PARAMS);
 			iStat += ThrowTest(_T("3+ping(1+sin(a))"), ecTOO_MANY_PARAMS);
 
 			// String function related
 			iStat += ThrowTest(_T("valueof(\"xxx\")"), 999, false);
 			iStat += ThrowTest(_T("valueof()"), ecUNEXPECTED_PARENS);
 			iStat += ThrowTest(_T("1+valueof(\"abc\""), ecMISSING_PARENS);
 			iStat += ThrowTest(_T("valueof(\"abc\""), ecMISSING_PARENS);
 			iStat += ThrowTest(_T("valueof(\"abc"), ecUNTERMINATED_STRING);
 			iStat += ThrowTest(_T("valueof(\"abc\",3)"), ecTOO_MANY_PARAMS);
 			iStat += ThrowTest(_T("valueof(3)"), ecSTRING_EXPECTED);
 			iStat += ThrowTest(_T("sin(\"abc\")"), ecVAL_EXPECTED);
 			iStat += ThrowTest(_T("valueof(\"\\\"abc\\\"\")"), 999, false);
 			iStat += ThrowTest(_T("\"hello world\""), ecSTR_RESULT);
 			iStat += ThrowTest(_T("(\"hello world\")"), ecSTR_RESULT);
 			iStat += ThrowTest(_T("\"abcd\"+100"), ecOPRT_TYPE_CONFLICT);
 			iStat += ThrowTest(_T("\"a\"+\"b\""), ecOPRT_TYPE_CONFLICT);
 			iStat += ThrowTest(_T("strfun1(\"100\",3)"), ecTOO_MANY_PARAMS);
 			iStat += ThrowTest(_T("strfun2(\"100\",3,5)"), ecTOO_MANY_PARAMS);
 			iStat += ThrowTest(_T("strfun3(\"100\",3,5,6)"), ecTOO_MANY_PARAMS);
 			iStat += ThrowTest(_T("strfun2(\"100\")"), ecTOO_FEW_PARAMS);
 			iStat += ThrowTest(_T("strfun3(\"100\",6)"), ecTOO_FEW_PARAMS);
 			iStat += ThrowTest(_T("strfun2(1,1)"), ecSTRING_EXPECTED);
 			iStat += ThrowTest(_T("strfun2(a,1)"), ecSTRING_EXPECTED);
 			iStat += ThrowTest(_T("strfun2(1,1,1)"), ecTOO_MANY_PARAMS);
 			iStat += ThrowTest(_T("strfun2(a,1,1)"), ecTOO_MANY_PARAMS);
 			iStat += ThrowTest(_T("strfun3(1,2,3)"), ecSTRING_EXPECTED);
 			iStat += ThrowTest(_T("strfun3(1, \"100\",3)"), ecSTRING_EXPECTED);
 			iStat += ThrowTest(_T("strfun3(\"1\", \"100\",3)"), ecVAL_EXPECTED);
 			iStat += ThrowTest(_T("strfun3(\"1\", 3, \"100\")"), ecVAL_EXPECTED);
 			iStat += ThrowTest(_T("strfun3(\"1\", \"100\", \"100\", \"100\")"), ecTOO_MANY_PARAMS);
 
 			// assignment operator
 			iStat += ThrowTest(_T("3=4"), ecUNEXPECTED_OPERATOR);
 			iStat += ThrowTest(_T("sin(8)=4"), ecUNEXPECTED_OPERATOR);
 			iStat += ThrowTest(_T("\"test\"=a"), ecUNEXPECTED_OPERATOR);
 
 			// <ibg 20090529>
 			// this is now legal, for reference see:
 			// https://sourceforge.net/forum/message.php?msg_id=7411373
 			//      iStat += ThrowTest( _T("sin=9"), ecUNEXPECTED_OPERATOR);    
 			// </ibg>
 
 			iStat += ThrowTest(_T("(8)=5"), ecUNEXPECTED_OPERATOR);
 			iStat += ThrowTest(_T("(a)=5"), ecUNEXPECTED_OPERATOR);
 			iStat += ThrowTest(_T("a=\"tttt\""), ecOPRT_TYPE_CONFLICT);
 
 			if (iStat == 0)
 				mu::console() << _T("passed") << endl;
 			else
 				mu::console() << _T("\n  failed with ") << iStat << _T(" errors") << endl;
 
 			return iStat;
 		}
 
 
 		//---------------------------------------------------------------------------
 		void ParserTester::AddTest(testfun_type a_pFun)
 		{
 			m_vTestFun.push_back(a_pFun);
 		}
 
 		//---------------------------------------------------------------------------
 		int ParserTester::Run()
 		{
 			int iStat = 0;
 			try
 			{
 				for (int i = 0; i < (int)m_vTestFun.size(); ++i)
 					iStat += (this->*m_vTestFun[i])();
 			}
 			catch (Parser::exception_type& e)
 			{
 				mu::console() << "\n" << e.GetMsg() << endl;
 				mu::console() << e.GetToken() << endl;
 				Abort();
 			}
 			catch (std::exception& e)
 			{
 				mu::console() << e.what() << endl;
 				Abort();
 			}
 			catch (...)
 			{
 				mu::console() << "Internal error";
 				Abort();
 			}
 
 			if (iStat == 0)
 			{
 				mu::console() << "Test passed (" << ParserTester::c_iCount << " expressions)" << endl;
 			}
 			else
 			{
 				mu::console() << "Test failed with " << iStat
 					<< " errors (" << ParserTester::c_iCount
 					<< " expressions)" << endl;
 			}
 			ParserTester::c_iCount = 0;
 			return iStat;
 		}
 
 
 		//---------------------------------------------------------------------------
 		int ParserTester::ThrowTest(const string_type& a_str, int a_iErrc, bool a_bFail)
 		{
 			ParserTester::c_iCount++;
 
 			try
 			{
 				value_type fVal[] = { 1,1,1 };
 				Parser p;
 
 				p.DefineVar(_T("a"), &fVal[0]);
 				p.DefineVar(_T("b"), &fVal[1]);
 				p.DefineVar(_T("c"), &fVal[2]);
 				p.DefinePostfixOprt(_T("{m}"), Milli);
 				p.DefinePostfixOprt(_T("m"), Milli);
 				p.DefineFun(_T("ping"), Ping);
 				p.DefineFun(_T("valueof"), ValueOf);
 				p.DefineFun(_T("strfun1"), StrFun1);
 				p.DefineFun(_T("strfun2"), StrFun2);
 				p.DefineFun(_T("strfun3"), StrFun3);
 				p.DefineFun(_T("strfun4"), StrFun4);
 				p.DefineFun(_T("strfun5"), StrFun5);
 				p.SetExpr(a_str);
 				p.Eval();
 			}
 			catch (ParserError& e)
 			{
 				// output the formula in case of an failed test
 				if (a_bFail == false || (a_bFail == true && a_iErrc != e.GetCode()))
 				{
 					mu::console() << _T("\n  ")
 						<< _T("Expression: ") << a_str
 						<< _T("  Code:") << e.GetCode() << _T("(") << e.GetMsg() << _T(")")
 						<< _T("  Expected:") << a_iErrc;
 				}
 
 				return (a_iErrc == e.GetCode()) ? 0 : 1;
 			}
 
 			// if a_bFail==false no exception is expected
 			bool bRet((a_bFail == false) ? 0 : 1);
 			if (bRet == 1)
 			{
 				mu::console() << _T("\n  ")
 					<< _T("Expression: ") << a_str
 					<< _T("  did evaluate; Expected error:") << a_iErrc;
 			}
 
 			return bRet;
 		}
 
 		//---------------------------------------------------------------------------
 		/** \brief Evaluate a tet expression.
 
 			\return 1 in case of a failure, 0 otherwise.
 		*/
 		int ParserTester::EqnTestWithVarChange(const string_type& a_str,
 			double a_fVar1,
 			double a_fRes1,
 			double a_fVar2,
 			double a_fRes2)
 		{
 			ParserTester::c_iCount++;
 
 			try
 			{
 				value_type fVal[2] = { -999, -999 }; // should be equal
 
 				Parser  p;
 				value_type var = 0;
 
 				// variable
 				p.DefineVar(_T("a"), &var);
 				p.SetExpr(a_str);
 
 				var = a_fVar1;
 				fVal[0] = p.Eval();
 
 				var = a_fVar2;
 				fVal[1] = p.Eval();
 
 				if (fabs(a_fRes1 - fVal[0]) > 0.0000000001)
 					throw std::runtime_error("incorrect result (first pass)");
 
 				if (fabs(a_fRes2 - fVal[1]) > 0.0000000001)
 					throw std::runtime_error("incorrect result (second pass)");
 			}
 			catch (Parser::exception_type& e)
 			{
 				mu::console() << _T("\n  fail: ") << a_str.c_str() << _T(" (") << e.GetMsg() << _T(")");
 				return 1;
 			}
 			catch (std::exception& e)
 			{
 				mu::console() << _T("\n  fail: ") << a_str.c_str() << _T(" (") << e.what() << _T(")");
 				return 1;  // always return a failure since this exception is not expected
 			}
 			catch (...)
 			{
 				mu::console() << _T("\n  fail: ") << a_str.c_str() << _T(" (unexpected exception)");
 				return 1;  // exceptions other than ParserException are not allowed
 			}
 
 			return 0;
 		}
 
 		//---------------------------------------------------------------------------
 		/** \brief Evaluate a tet expression.
 
 			\return 1 in case of a failure, 0 otherwise.
 		*/
 		int ParserTester::EqnTest(const string_type& a_str, double a_fRes, bool a_fPass)
 		{
 			ParserTester::c_iCount++;
 			int iRet(0);
 			value_type fVal[5] = { -999, -998, -997, -996, -995 }; // initially should be different
 
 			try
 			{
 				std::unique_ptr<Parser> p1;
 				Parser  p2, p3;   // three parser objects
 								  // they will be used for testing copy and assignment operators
 				// p1 is a pointer since i'm going to delete it in order to test if
 				// parsers after copy construction still refer to members of it.
 				// !! If this is the case this function will crash !!
 
 				p1.reset(new mu::Parser());
 				// Add constants
-				p1->DefineConst(_T("pi"), (value_type)PARSER_CONST_PI);
-				p1->DefineConst(_T("e"), (value_type)PARSER_CONST_E);
+				p1->DefineConst(_T("pi"), MathImpl<value_type>::CONST_PI);
+				p1->DefineConst(_T("e"), MathImpl<value_type>::CONST_E);
 				p1->DefineConst(_T("const"), 1);
 				p1->DefineConst(_T("const1"), 2);
 				p1->DefineConst(_T("const2"), 3);
 				// string constants
 				p1->DefineStrConst(_T("str1"), _T("1.11"));
 				p1->DefineStrConst(_T("str2"), _T("2.22"));
 				// variables
 				value_type vVarVal[] = { 1, 2, 3, -2 };
 				p1->DefineVar(_T("a"), &vVarVal[0]);
 				p1->DefineVar(_T("aa"), &vVarVal[1]);
 				p1->DefineVar(_T("b"), &vVarVal[1]);
 				p1->DefineVar(_T("c"), &vVarVal[2]);
 				p1->DefineVar(_T("d"), &vVarVal[3]);
 
 				// custom value ident functions
 				p1->AddValIdent(&ParserTester::IsHexVal);
 
 				// functions
 				p1->DefineFun(_T("ping"), Ping);
 				p1->DefineFun(_T("f1of1"), f1of1);  // one parameter
 				p1->DefineFun(_T("f1of2"), f1of2);  // two parameter
 				p1->DefineFun(_T("f2of2"), f2of2);
 				p1->DefineFun(_T("f1of3"), f1of3);  // three parameter
 				p1->DefineFun(_T("f2of3"), f2of3);
 				p1->DefineFun(_T("f3of3"), f3of3);
 				p1->DefineFun(_T("f1of4"), f1of4);  // four parameter
 				p1->DefineFun(_T("f2of4"), f2of4);
 				p1->DefineFun(_T("f3of4"), f3of4);
 				p1->DefineFun(_T("f4of4"), f4of4);
 				p1->DefineFun(_T("f1of5"), f1of5);  // five parameter
 				p1->DefineFun(_T("f2of5"), f2of5);
 				p1->DefineFun(_T("f3of5"), f3of5);
 				p1->DefineFun(_T("f4of5"), f4of5);
 				p1->DefineFun(_T("f5of5"), f5of5);
 
 				// binary operators
 				p1->DefineOprt(_T("add"), add, 0);
 				p1->DefineOprt(_T("++"), add, 0);
 				p1->DefineOprt(_T("&"), land, prLAND);
 
 				// sample functions
 				p1->DefineFun(_T("min"), Min);
 				p1->DefineFun(_T("max"), Max);
 				p1->DefineFun(_T("sum"), Sum);
 				p1->DefineFun(_T("valueof"), ValueOf);
 				p1->DefineFun(_T("atof"), StrToFloat);
 				p1->DefineFun(_T("strfun1"), StrFun1);
 				p1->DefineFun(_T("strfun2"), StrFun2);
 				p1->DefineFun(_T("strfun3"), StrFun3);
 				p1->DefineFun(_T("strfun4"), StrFun4);
 				p1->DefineFun(_T("strfun5"), StrFun5);
 				p1->DefineFun(_T("lastArg"), LastArg);
 				p1->DefineFun(_T("firstArg"), FirstArg);
 				p1->DefineFun(_T("order"), FirstArg);
 
 				// infix / postfix operator
 				// Note: Identifiers used here do not have any meaning 
 				//       they are mere placeholders to test certain features.
 				p1->DefineInfixOprt(_T("$"), sign, prPOW + 1);  // sign with high priority
 				p1->DefineInfixOprt(_T("~"), plus2);          // high priority
 				p1->DefineInfixOprt(_T("~~"), plus2);
 				p1->DefinePostfixOprt(_T("{m}"), Milli);
 				p1->DefinePostfixOprt(_T("{M}"), Mega);
 				p1->DefinePostfixOprt(_T("m"), Milli);
 				p1->DefinePostfixOprt(_T("meg"), Mega);
 				p1->DefinePostfixOprt(_T("#"), times3);
 				p1->DefinePostfixOprt(_T("'"), sqr);
 				p1->SetExpr(a_str);
 
 				// Test bytecode integrity
 				// String parsing and bytecode parsing must yield the same result
 				fVal[0] = p1->Eval(); // result from stringparsing
 				fVal[1] = p1->Eval(); // result from bytecode
 				if (fVal[0] != fVal[1])
 					throw Parser::exception_type(_T("Bytecode / string parsing mismatch."));
 
 				// Test copy and assignment operators
 				try
 				{
 					// Test copy constructor
 					std::vector<mu::Parser> vParser;
 					vParser.push_back(*(p1.get()));
 					mu::Parser p4 = vParser[0];   // take parser from vector
 
 					// destroy the originals from p2
 					vParser.clear();              // delete the vector
 					p1.reset(0);
 
 					fVal[2] = p4.Eval();
 
 					// Test assignment operator
 					// additionally  disable Optimizer this time
 					mu::Parser p5;
 					p5 = p4;
 					p5.EnableOptimizer(false);
 					fVal[3] = p5.Eval();
 
 					// Test Eval function for multiple return values
 					// use p2 since it has the optimizer enabled!
 					int nNum;
 					value_type* v = p4.Eval(nNum);
 					fVal[4] = v[nNum - 1];
 				}
 				catch (std::exception& e)
 				{
 					mu::console() << _T("\n  ") << e.what() << _T("\n");
 				}
 
 				// limited floating point accuracy requires the following test
 				bool bCloseEnough(true);
 				for (unsigned i = 0; i < sizeof(fVal) / sizeof(value_type); ++i)
 				{
 					bCloseEnough &= (fabs(a_fRes - fVal[i]) <= fabs(fVal[i] * 0.00001));
 
 					// The tests equations never result in infinity, if they do thats a bug.
 					// reference:
 					// http://sourceforge.net/projects/muparser/forums/forum/462843/topic/5037825
 #ifdef _MSC_VER
 #pragma warning(push)
 #pragma warning(disable:4127)
 #endif
 					if (std::numeric_limits<value_type>::has_infinity)
 #ifdef _MSC_VER
 #pragma warning(pop)
 #endif
 					{
 						bCloseEnough &= (fabs(fVal[i]) != numeric_limits<value_type>::infinity());
 					}
 				}
 
 				iRet = ((bCloseEnough && a_fPass) || (!bCloseEnough && !a_fPass)) ? 0 : 1;
 
 
 				if (iRet == 1)
 				{
 					mu::console() << _T("\n  fail: ") << a_str.c_str()
 						<< _T(" (incorrect result; expected: ") << a_fRes
 						<< _T(" ;calculated: ") << fVal[0] << _T(",")
 						<< fVal[1] << _T(",")
 						<< fVal[2] << _T(",")
 						<< fVal[3] << _T(",")
 						<< fVal[4] << _T(").");
 				}
 			}
 			catch (Parser::exception_type& e)
 			{
 				if (a_fPass)
 				{
 					if (fVal[0] != fVal[2] && fVal[0] != -999 && fVal[1] != -998)
 						mu::console() << _T("\n  fail: ") << a_str.c_str() << _T(" (copy construction)");
 					else
 						mu::console() << _T("\n  fail: ") << a_str.c_str() << _T(" (") << e.GetMsg() << _T(")");
 					return 1;
 				}
 			}
 			catch (std::exception& e)
 			{
 				mu::console() << _T("\n  fail: ") << a_str.c_str() << _T(" (") << e.what() << _T(")");
 				return 1;  // always return a failure since this exception is not expected
 			}
 			catch (...)
 			{
 				mu::console() << _T("\n  fail: ") << a_str.c_str() << _T(" (unexpected exception)");
 				return 1;  // exceptions other than ParserException are not allowed
 			}
 
 			return iRet;
 		}
 
 		//---------------------------------------------------------------------------
 		int ParserTester::EqnTestInt(const string_type& a_str, double a_fRes, bool a_fPass)
 		{
 			ParserTester::c_iCount++;
 
 			value_type vVarVal[] = { 1, 2, 3 };   // variable values
 			int iRet(0);
 
 			try
 			{
 				value_type fVal[2] = { -99, -999 };   // results: initially should be different
 				ParserInt p;
 				p.DefineConst(_T("const1"), 1);
 				p.DefineConst(_T("const2"), 2);
 				p.DefineVar(_T("a"), &vVarVal[0]);
 				p.DefineVar(_T("b"), &vVarVal[1]);
 				p.DefineVar(_T("c"), &vVarVal[2]);
 
 				p.SetExpr(a_str);
 				fVal[0] = p.Eval(); // result from stringparsing
 				fVal[1] = p.Eval(); // result from bytecode
 
 				if (fVal[0] != fVal[1])
 					throw Parser::exception_type(_T("Bytecode corrupt."));
 
 				iRet = ((a_fRes == fVal[0] && a_fPass) ||
 					(a_fRes != fVal[0] && !a_fPass)) ? 0 : 1;
 				if (iRet == 1)
 				{
 					mu::console() << _T("\n  fail: ") << a_str.c_str()
 						<< _T(" (incorrect result; expected: ") << a_fRes
 						<< _T(" ;calculated: ") << fVal[0] << _T(").");
 				}
 			}
 			catch (Parser::exception_type& e)
 			{
 				if (a_fPass)
 				{
 					mu::console() << _T("\n  fail: ") << e.GetExpr() << _T(" : ") << e.GetMsg();
 					iRet = 1;
 				}
 			}
 			catch (...)
 			{
 				mu::console() << _T("\n  fail: ") << a_str.c_str() << _T(" (unexpected exception)");
 				iRet = 1;  // exceptions other than ParserException are not allowed
 			}
 
 			return iRet;
 		}
 
 		//---------------------------------------------------------------------------
 		/** \brief Test an expression in Bulk Mode. */
 		int ParserTester::EqnTestBulk(const string_type& a_str, double a_fRes[4], bool a_fPass)
 		{
 			ParserTester::c_iCount++;
 
 			// Define Bulk Variables
 			int nBulkSize = 4;
 			value_type vVariableA[] = { 1, 2, 3, 4 };   // variable values
 			value_type vVariableB[] = { 2, 2, 2, 2 };   // variable values
 			value_type vVariableC[] = { 3, 3, 3, 3 };   // variable values
 			value_type vResults[] = { 0, 0, 0, 0 };   // variable values
 			int iRet(0);
 
 			try
 			{
 				Parser p;
 				p.DefineConst(_T("const1"), 1);
 				p.DefineConst(_T("const2"), 2);
 				p.DefineVar(_T("a"), vVariableA);
 				p.DefineVar(_T("b"), vVariableB);
 				p.DefineVar(_T("c"), vVariableC);
 
 				p.SetExpr(a_str);
 				p.Eval(vResults, nBulkSize);
 
 				bool bCloseEnough(true);
 				for (int i = 0; i < nBulkSize; ++i)
 				{
 					bCloseEnough &= (fabs(a_fRes[i] - vResults[i]) <= fabs(a_fRes[i] * 0.00001));
 				}
 
 				iRet = ((bCloseEnough && a_fPass) || (!bCloseEnough && !a_fPass)) ? 0 : 1;
 				if (iRet == 1)
 				{
 					mu::console() << _T("\n  fail: ") << a_str.c_str()
 						<< _T(" (incorrect result; expected: {") << a_fRes[0] << _T(",") << a_fRes[1] << _T(",") << a_fRes[2] << _T(",") << a_fRes[3] << _T("}")
 						<< _T(" ;calculated: ") << vResults[0] << _T(",") << vResults[1] << _T(",") << vResults[2] << _T(",") << vResults[3] << _T("}");
 				}
 			}
 			catch (Parser::exception_type& e)
 			{
 				if (a_fPass)
 				{
 					mu::console() << _T("\n  fail: ") << e.GetExpr() << _T(" : ") << e.GetMsg();
 					iRet = 1;
 				}
 			}
 			catch (...)
 			{
 				mu::console() << _T("\n  fail: ") << a_str.c_str() << _T(" (unexpected exception)");
 				iRet = 1;  // exceptions other than ParserException are not allowed
 			}
 
 			return iRet;
 		}
 
 		//---------------------------------------------------------------------------
 		/** \brief Internal error in test class Test is going to be aborted. */
 		void ParserTester::Abort() const
 		{
 			mu::console() << _T("Test failed (internal error in test class)") << endl;
 			while (!getchar());
 			exit(-1);
 		}
 	} // namespace test
 } // namespace mu
diff --git a/src/muParserTokenReader.cpp b/src/muParserTokenReader.cpp
index ed6d55b..f4f2d50 100644
--- a/src/muParserTokenReader.cpp
+++ b/src/muParserTokenReader.cpp
@@ -43,948 +43,949 @@
 namespace mu
 {
 
 	// Forward declaration
 	class ParserBase;
 
 	//---------------------------------------------------------------------------
 	/** \brief Copy constructor.
 
 		\sa Assign
 		\throw nothrow
 	*/
 	ParserTokenReader::ParserTokenReader(const ParserTokenReader& a_Reader)
 	{
 		Assign(a_Reader);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Assignment operator.
 
 		Self assignment will be suppressed otherwise #Assign is called.
 
 		\param a_Reader Object to copy to this token reader.
 		\throw nothrow
 	*/
 	ParserTokenReader& ParserTokenReader::operator=(const ParserTokenReader& a_Reader)
 	{
 		if (&a_Reader != this)
 			Assign(a_Reader);
 
 		return *this;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Assign state of a token reader to this token reader.
 
 		\param a_Reader Object from which the state should be copied.
 		\throw nothrow
 	*/
 	void ParserTokenReader::Assign(const ParserTokenReader& a_Reader)
 	{
 		m_pParser = a_Reader.m_pParser;
 		m_strFormula = a_Reader.m_strFormula;
 		m_iPos = a_Reader.m_iPos;
 		m_iSynFlags = a_Reader.m_iSynFlags;
 
 		m_UsedVar = a_Reader.m_UsedVar;
 		m_pFunDef = a_Reader.m_pFunDef;
 		m_pConstDef = a_Reader.m_pConstDef;
 		m_pVarDef = a_Reader.m_pVarDef;
 		m_pStrVarDef = a_Reader.m_pStrVarDef;
 		m_pPostOprtDef = a_Reader.m_pPostOprtDef;
 		m_pInfixOprtDef = a_Reader.m_pInfixOprtDef;
 		m_pOprtDef = a_Reader.m_pOprtDef;
 		m_bIgnoreUndefVar = a_Reader.m_bIgnoreUndefVar;
 		m_vIdentFun = a_Reader.m_vIdentFun;
 		m_pFactory = a_Reader.m_pFactory;
 		m_pFactoryData = a_Reader.m_pFactoryData;
-		m_iBrackets = a_Reader.m_iBrackets;
+		m_bracketStack = a_Reader.m_bracketStack;
 		m_cArgSep = a_Reader.m_cArgSep;
 		m_fZero = a_Reader.m_fZero;
 		m_lastTok = a_Reader.m_lastTok;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Constructor.
 
 		Create a Token reader and bind it to a parser object.
 
 		\pre [assert] a_pParser may not be NULL
 		\post #m_pParser==a_pParser
 		\param a_pParent Parent parser object of the token reader.
 	*/
 	ParserTokenReader::ParserTokenReader(ParserBase* a_pParent)
 		:m_pParser(a_pParent)
 		, m_strFormula()
 		, m_iPos(0)
 		, m_iSynFlags(0)
 		, m_bIgnoreUndefVar(false)
-		, m_pFunDef(NULL)
-		, m_pPostOprtDef(NULL)
-		, m_pInfixOprtDef(NULL)
-		, m_pOprtDef(NULL)
-		, m_pConstDef(NULL)
-		, m_pStrVarDef(NULL)
-		, m_pVarDef(NULL)
-		, m_pFactory(NULL)
-		, m_pFactoryData(NULL)
+		, m_pFunDef(nullptr)
+		, m_pPostOprtDef(nullptr)
+		, m_pInfixOprtDef(nullptr)
+		, m_pOprtDef(nullptr)
+		, m_pConstDef(nullptr)
+		, m_pStrVarDef(nullptr)
+		, m_pVarDef(nullptr)
+		, m_pFactory(nullptr)
+		, m_pFactoryData(nullptr)
 		, m_vIdentFun()
 		, m_UsedVar()
 		, m_fZero(0)
-		, m_iBrackets(0)
+		, m_bracketStack()
 		, m_lastTok()
 		, m_cArgSep(',')
 	{
 		assert(m_pParser);
 		SetParent(m_pParser);
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Create instance of a ParserTokenReader identical with this
 				and return its pointer.
 
 		This is a factory method the calling function must take care of the object destruction.
 
 		\return A new ParserTokenReader object.
 		\throw nothrow
 	*/
 	ParserTokenReader* ParserTokenReader::Clone(ParserBase* a_pParent) const
 	{
 		std::unique_ptr<ParserTokenReader> ptr(new ParserTokenReader(*this));
 		ptr->SetParent(a_pParent);
 		return ptr.release();
 	}
 
 	//---------------------------------------------------------------------------
 	ParserTokenReader::token_type& ParserTokenReader::SaveBeforeReturn(const token_type& tok)
 	{
 		m_lastTok = tok;
 		return m_lastTok;
 	}
 
 	//---------------------------------------------------------------------------
 	void ParserTokenReader::AddValIdent(identfun_type a_pCallback)
 	{
 		// Use push_front is used to give user defined callbacks a higher priority than
 		// the built in ones. Otherwise reading hex numbers would not work
 		// since the "0" in "0xff" would always be read first making parsing of 
 		// the rest impossible.
 		// reference:
 		// http://sourceforge.net/projects/muparser/forums/forum/462843/topic/4824956
 		m_vIdentFun.push_front(a_pCallback);
 	}
 
 	//---------------------------------------------------------------------------
 	void ParserTokenReader::SetVarCreator(facfun_type a_pFactory, void* pUserData)
 	{
 		m_pFactory = a_pFactory;
 		m_pFactoryData = pUserData;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Return the current position of the token reader in the formula string.
 
 		\return #m_iPos
 		\throw nothrow
 	*/
 	int ParserTokenReader::GetPos() const
 	{
 		return m_iPos;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Return a reference to the formula.
 
 		\return #m_strFormula
 		\throw nothrow
 	*/
 	const string_type& ParserTokenReader::GetExpr() const
 	{
 		return m_strFormula;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Return a map containing the used variables only. */
 	varmap_type& ParserTokenReader::GetUsedVar()
 	{
 		return m_UsedVar;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Initialize the token Reader.
 
 		Sets the formula position index to zero and set Syntax flags to default for initial formula parsing.
 		\pre [assert] triggered if a_szFormula==0
 	*/
 	void ParserTokenReader::SetFormula(const string_type& a_strFormula)
 	{
 		m_strFormula = a_strFormula;
 		ReInit();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Set Flag that controls behaviour in case of undefined variables being found.
 
 	  If true, the parser does not throw an exception if an undefined variable is found.
 	  otherwise it does. This variable is used internally only!
 	  It suppresses a "undefined variable" exception in GetUsedVar().
 	  Those function should return a complete list of variables including
 	  those the are not defined by the time of it's call.
 	*/
 	void ParserTokenReader::IgnoreUndefVar(bool bIgnore)
 	{
 		m_bIgnoreUndefVar = bIgnore;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Reset the token reader to the start of the formula.
 
 		The syntax flags will be reset to a value appropriate for the
 		start of a formula.
 		\post #m_iPos==0, #m_iSynFlags = noOPT | noBC | noPOSTOP | noSTR
 		\throw nothrow
 		\sa ESynCodes
 	*/
 	void ParserTokenReader::ReInit()
 	{
 		m_iPos = 0;
 		m_iSynFlags = sfSTART_OF_LINE;
-		m_iBrackets = 0;
+		m_bracketStack = std::stack<int>();
 		m_UsedVar.clear();
 		m_lastTok = token_type();
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Read the next token from the string. */
 	ParserTokenReader::token_type ParserTokenReader::ReadNextToken()
 	{
 		assert(m_pParser);
 
 		const char_type* szFormula = m_strFormula.c_str();
 		token_type tok;
 
 		// Ignore all non printable characters when reading the expression
 		while (szFormula[m_iPos] > 0 && szFormula[m_iPos] <= 0x20)
 			++m_iPos;
 
 		// Check for end of formula
-		if (IsEOF(tok))        
-			return SaveBeforeReturn(tok); 
-		
+		if (IsEOF(tok))
+			return SaveBeforeReturn(tok);
+
 		// Check for user defined binary operator
-		if (IsOprt(tok))       
-			return SaveBeforeReturn(tok); 
-		
+		if (IsOprt(tok))
+			return SaveBeforeReturn(tok);
+
 		// Check for function token
-		if (IsFunTok(tok))     
-			return SaveBeforeReturn(tok); 
-		
+		if (IsFunTok(tok))
+			return SaveBeforeReturn(tok);
+
 		// Check built in operators / tokens
-		if (IsBuiltIn(tok))    
-			return SaveBeforeReturn(tok); 
+		if (IsBuiltIn(tok))
+			return SaveBeforeReturn(tok);
 
 		// Check for function argument separators
-		if (IsArgSep(tok))     
-			return SaveBeforeReturn(tok); 
+		if (IsArgSep(tok))
+			return SaveBeforeReturn(tok);
 
 		// Check for values / constant tokens
-		if (IsValTok(tok))     
-			return SaveBeforeReturn(tok); 
+		if (IsValTok(tok))
+			return SaveBeforeReturn(tok);
 
 		// Check for variable tokens
-		if (IsVarTok(tok))     
-			return SaveBeforeReturn(tok); 
+		if (IsVarTok(tok))
+			return SaveBeforeReturn(tok);
 
 		// Check for string variables
-		if (IsStrVarTok(tok))  
-			return SaveBeforeReturn(tok); 
-		
+		if (IsStrVarTok(tok))
+			return SaveBeforeReturn(tok);
+
 		// Check for String tokens
-		if (IsString(tok))     
-			return SaveBeforeReturn(tok); 
+		if (IsString(tok))
+			return SaveBeforeReturn(tok);
 
 		// Check for unary operators
-		if (IsInfixOpTok(tok)) 
-			return SaveBeforeReturn(tok); 
-		
+		if (IsInfixOpTok(tok))
+			return SaveBeforeReturn(tok);
+
 		// Check for unary operators
-		if (IsPostOpTok(tok))  
-			return SaveBeforeReturn(tok); 
+		if (IsPostOpTok(tok))
+			return SaveBeforeReturn(tok);
 
 		// Check String for undefined variable token. Done only if a 
 		// flag is set indicating to ignore undefined variables.
 		// This is a way to conditionally avoid an error if 
 		// undefined variables occur. 
 		// (The GetUsedVar function must suppress the error for
 		// undefined variables in order to collect all variable 
 		// names including the undefined ones.)
 		if ((m_bIgnoreUndefVar || m_pFactory) && IsUndefVarTok(tok))
 			return SaveBeforeReturn(tok);
 
 		// Check for unknown token
 		// 
 		// !!! From this point on there is no exit without an exception possible...
 		// 
 		string_type strTok;
 		int iEnd = ExtractToken(m_pParser->ValidNameChars(), strTok, m_iPos);
 		if (iEnd != m_iPos)
 			Error(ecUNASSIGNABLE_TOKEN, m_iPos, strTok);
 
 		Error(ecUNASSIGNABLE_TOKEN, m_iPos, m_strFormula.substr(m_iPos));
 		return token_type(); // never reached
 	}
 
 	//---------------------------------------------------------------------------
 	void ParserTokenReader::SetParent(ParserBase* a_pParent)
 	{
 		m_pParser = a_pParent;
 		m_pFunDef = &a_pParent->m_FunDef;
 		m_pOprtDef = &a_pParent->m_OprtDef;
 		m_pInfixOprtDef = &a_pParent->m_InfixOprtDef;
 		m_pPostOprtDef = &a_pParent->m_PostOprtDef;
 		m_pVarDef = &a_pParent->m_VarDef;
 		m_pStrVarDef = &a_pParent->m_StrVarDef;
 		m_pConstDef = &a_pParent->m_ConstDef;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Extract all characters that belong to a certain charset.
 
 	  \param a_szCharSet [in] Const char array of the characters allowed in the token.
 	  \param a_strTok [out]  The string that consists entirely of characters listed in a_szCharSet.
 	  \param a_iPos [in] Position in the string from where to start reading.
 	  \return The Position of the first character not listed in a_szCharSet.
 	  \throw nothrow
 	*/
 	int ParserTokenReader::ExtractToken(const char_type* a_szCharSet,
 		string_type& a_sTok,
 		int a_iPos) const
 	{
 		int iEnd = (int)m_strFormula.find_first_not_of(a_szCharSet, a_iPos);
 
 		if (iEnd == (int)string_type::npos)
 			iEnd = (int)m_strFormula.length();
 
 		// Assign token string if there was something found
 		if (a_iPos != iEnd)
 			a_sTok = string_type(m_strFormula.begin() + a_iPos, m_strFormula.begin() + iEnd);
 
 		return iEnd;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Check Expression for the presence of a binary operator token.
 
 	  Userdefined binary operator "++" gives inconsistent parsing result for
 	  the equations "a++b" and "a ++ b" if alphabetic characters are allowed
 	  in operator tokens. To avoid this this function checks specifically
 	  for operator tokens.
 	*/
-	int ParserTokenReader::ExtractOperatorToken(string_type& a_sTok,
-		int a_iPos) const
+	int ParserTokenReader::ExtractOperatorToken(string_type& a_sTok, int a_iPos) const
 	{
 		// Changed as per Issue 6: https://code.google.com/p/muparser/issues/detail?id=6
 		int iEnd = (int)m_strFormula.find_first_not_of(m_pParser->ValidOprtChars(), a_iPos);
 		if (iEnd == (int)string_type::npos)
 			iEnd = (int)m_strFormula.length();
 
 		// Assign token string if there was something found
 		if (a_iPos != iEnd)
 		{
 			a_sTok = string_type(m_strFormula.begin() + a_iPos, m_strFormula.begin() + iEnd);
 			return iEnd;
 		}
 		else
 		{
 			// There is still the chance of having to deal with an operator consisting exclusively
 			// of alphabetic characters.
-			return ExtractToken(MUP_CHARS, a_sTok, a_iPos);
+			return ExtractToken("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", a_sTok, a_iPos);
 		}
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Check if a built in operator or other token can be found
 		\param a_Tok  [out] Operator token if one is found. This can either be a binary operator or an infix operator token.
 		\return true if an operator token has been found.
 	*/
 	bool ParserTokenReader::IsBuiltIn(token_type& a_Tok)
 	{
 		const char_type** const pOprtDef = m_pParser->GetOprtDef(),
 			* const szFormula = m_strFormula.c_str();
 
 		// Compare token with function and operator strings
 		// check string for operator/function
 		for (int i = 0; pOprtDef[i]; i++)
 		{
 			std::size_t len(std::char_traits<char_type>::length(pOprtDef[i]));
 			if (string_type(pOprtDef[i]) == string_type(szFormula + m_iPos, szFormula + m_iPos + len))
 			{
 				switch (i)
 				{
 				case cmLAND:
 				case cmLOR:
 				case cmLT:
 				case cmGT:
 				case cmLE:
 				case cmGE:
 				case cmNEQ:
 				case cmEQ:
 				case cmADD:
 				case cmSUB:
 				case cmMUL:
 				case cmDIV:
 				case cmPOW:
 				case cmASSIGN:
 					//if (len!=sTok.length())
 					//  continue;
 
 					// The assignment operator need special treatment
 					if (i == cmASSIGN && m_iSynFlags & noASSIGN)
 						Error(ecUNEXPECTED_OPERATOR, m_iPos, pOprtDef[i]);
 
 					if (!m_pParser->HasBuiltInOprt()) continue;
 					if (m_iSynFlags & noOPT)
 					{
 						// Maybe its an infix operator not an operator
 						// Both operator types can share characters in 
 						// their identifiers
 						if (IsInfixOpTok(a_Tok))
 							return true;
 
 						Error(ecUNEXPECTED_OPERATOR, m_iPos, pOprtDef[i]);
 					}
 
 					m_iSynFlags = noBC | noOPT | noARG_SEP | noPOSTOP | noASSIGN | noIF | noELSE | noEND;
 					break;
 
 				case cmBO:
 					if (m_iSynFlags & noBO)
 						Error(ecUNEXPECTED_PARENS, m_iPos, pOprtDef[i]);
 
 					if (m_lastTok.GetCode() == cmFUNC)
 						m_iSynFlags = noOPT | noEND | noARG_SEP | noPOSTOP | noASSIGN | noIF | noELSE;
 					else
 						m_iSynFlags = noBC | noOPT | noEND | noARG_SEP | noPOSTOP | noASSIGN | noIF | noELSE;
 
-					++m_iBrackets;
+					m_bracketStack.push(cmBO);
 					break;
 
 				case cmBC:
 					if (m_iSynFlags & noBC)
 						Error(ecUNEXPECTED_PARENS, m_iPos, pOprtDef[i]);
 
 					m_iSynFlags = noBO | noVAR | noVAL | noFUN | noINFIXOP | noSTR | noASSIGN;
 
-					if (--m_iBrackets < 0)
+					if (!m_bracketStack.empty())
+						m_bracketStack.pop();
+					else
 						Error(ecUNEXPECTED_PARENS, m_iPos, pOprtDef[i]);
 					break;
 
 				case cmELSE:
 					if (m_iSynFlags & noELSE)
 						Error(ecUNEXPECTED_CONDITIONAL, m_iPos, pOprtDef[i]);
 
 					m_iSynFlags = noBC | noPOSTOP | noEND | noOPT | noIF | noELSE;
 					break;
 
 				case cmIF:
 					if (m_iSynFlags & noIF)
 						Error(ecUNEXPECTED_CONDITIONAL, m_iPos, pOprtDef[i]);
 
 					m_iSynFlags = noBC | noPOSTOP | noEND | noOPT | noIF | noELSE;
 					break;
 
 				default:      // The operator is listed in c_DefaultOprt, but not here. This is a bad thing...
 					Error(ecINTERNAL_ERROR);
 				} // switch operator id
 
 				m_iPos += (int)len;
 				a_Tok.Set((ECmdCode)i, pOprtDef[i]);
 				return true;
 			} // if operator string found
 		} // end of for all operator strings
 
 		return false;
 	}
 
 	//---------------------------------------------------------------------------
 	bool ParserTokenReader::IsArgSep(token_type& a_Tok)
 	{
 		const char_type* szFormula = m_strFormula.c_str();
 
 		if (szFormula[m_iPos] == m_cArgSep)
 		{
 			// copy the separator into null terminated string
 			char_type szSep[2];
 			szSep[0] = m_cArgSep;
 			szSep[1] = 0;
 
 			if (m_iSynFlags & noARG_SEP)
 				Error(ecUNEXPECTED_ARG_SEP, m_iPos, szSep);
 
 			m_iSynFlags = noBC | noOPT | noEND | noARG_SEP | noPOSTOP | noASSIGN;
 			m_iPos++;
 			a_Tok.Set(cmARG_SEP, szSep);
 			return true;
 		}
 
 		return false;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Check for End of Formula.
 
 		\return true if an end of formula is found false otherwise.
 		\param a_Tok [out] If an eof is found the corresponding token will be stored there.
 		\throw nothrow
 		\sa IsOprt, IsFunTok, IsStrFunTok, IsValTok, IsVarTok, IsString, IsInfixOpTok, IsPostOpTok
 	*/
 	bool ParserTokenReader::IsEOF(token_type& a_Tok)
 	{
 		const char_type* szFormula = m_strFormula.c_str();
 
 		// check for EOF
 		if (!szFormula[m_iPos] /*|| szFormula[m_iPos] == '\n'*/)
 		{
 			if (m_iSynFlags & noEND)
 				Error(ecUNEXPECTED_EOF, m_iPos);
 
-			if (m_iBrackets > 0)
+			if (!m_bracketStack.empty())
 				Error(ecMISSING_PARENS, m_iPos, _T(")"));
 
 			m_iSynFlags = 0;
 			a_Tok.Set(cmEND);
 			return true;
 		}
 
 		return false;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Check if a string position contains a unary infix operator.
 		\return true if a function token has been found false otherwise.
 	*/
 	bool ParserTokenReader::IsInfixOpTok(token_type& a_Tok)
 	{
 		string_type sTok;
 		int iEnd = ExtractToken(m_pParser->ValidInfixOprtChars(), sTok, m_iPos);
 		if (iEnd == m_iPos)
 			return false;
 
 		// iterate over all postfix operator strings
 		funmap_type::const_reverse_iterator it = m_pInfixOprtDef->rbegin();
 		for (; it != m_pInfixOprtDef->rend(); ++it)
 		{
 			if (sTok.find(it->first) != 0)
 				continue;
 
 			a_Tok.Set(it->second, it->first);
 			m_iPos += (int)it->first.length();
 
 			if (m_iSynFlags & noINFIXOP)
 				Error(ecUNEXPECTED_OPERATOR, m_iPos, a_Tok.GetAsString());
 
 			m_iSynFlags = noPOSTOP | noINFIXOP | noOPT | noBC | noSTR | noASSIGN;
 			return true;
 		}
 
 		return false;
 
 		/*
 			a_Tok.Set(item->second, sTok);
 			m_iPos = (int)iEnd;
 
 			if (m_iSynFlags & noINFIXOP)
 			  Error(ecUNEXPECTED_OPERATOR, m_iPos, a_Tok.GetAsString());
 
 			m_iSynFlags = noPOSTOP | noINFIXOP | noOPT | noBC | noSTR | noASSIGN;
 			return true;
 		*/
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Check whether the token at a given position is a function token.
 		\param a_Tok [out] If a value token is found it will be placed here.
 		\throw ParserException if Syntaxflags do not allow a function at a_iPos
 		\return true if a function token has been found false otherwise.
 		\pre [assert] m_pParser!=0
 	*/
 	bool ParserTokenReader::IsFunTok(token_type& a_Tok)
 	{
 		string_type strTok;
 		int iEnd = ExtractToken(m_pParser->ValidNameChars(), strTok, m_iPos);
 		if (iEnd == m_iPos)
 			return false;
 
 		funmap_type::const_iterator item = m_pFunDef->find(strTok);
 		if (item == m_pFunDef->end())
 			return false;
 
 		// Check if the next sign is an opening bracket
 		const char_type* szFormula = m_strFormula.c_str();
 		if (szFormula[iEnd] != '(')
 			return false;
 
 		a_Tok.Set(item->second, strTok);
 
 		m_iPos = (int)iEnd;
 		if (m_iSynFlags & noFUN)
 			Error(ecUNEXPECTED_FUN, m_iPos - (int)a_Tok.GetAsString().length(), a_Tok.GetAsString());
 
 		m_iSynFlags = noANY ^ noBO;
 		return true;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Check if a string position contains a binary operator.
 		\param a_Tok  [out] Operator token if one is found. This can either be a binary operator or an infix operator token.
 		\return true if an operator token has been found.
 	*/
 	bool ParserTokenReader::IsOprt(token_type& a_Tok)
 	{
 		const char_type* const szExpr = m_strFormula.c_str();
 		string_type strTok;
 
 		int iEnd = ExtractOperatorToken(strTok, m_iPos);
 		if (iEnd == m_iPos)
 			return false;
 
 		// Check if the operator is a built in operator, if so ignore it here
 		const char_type** const pOprtDef = m_pParser->GetOprtDef();
 		for (int i = 0; m_pParser->HasBuiltInOprt() && pOprtDef[i]; ++i)
 		{
 			if (string_type(pOprtDef[i]) == strTok)
 				return false;
 		}
 
 		// Note:
 		// All tokens in oprt_bin_maptype are have been sorted by their length
 		// Long operators must come first! Otherwise short names (like: "add") that
 		// are part of long token names (like: "add123") will be found instead 
 		// of the long ones.
 		// Length sorting is done with ascending length so we use a reverse iterator here.
 		funmap_type::const_reverse_iterator it = m_pOprtDef->rbegin();
 		for (; it != m_pOprtDef->rend(); ++it)
 		{
 			const string_type& sID = it->first;
 			if (sID == string_type(szExpr + m_iPos, szExpr + m_iPos + sID.length()))
 			{
 				a_Tok.Set(it->second, strTok);
 
 				// operator was found
 				if (m_iSynFlags & noOPT)
 				{
 					// An operator was found but is not expected to occur at
 					// this position of the formula, maybe it is an infix 
 					// operator, not a binary operator. Both operator types
 					// can share characters in their identifiers.
 					if (IsInfixOpTok(a_Tok))
 						return true;
 					else
 					{
 						// nope, no infix operator
 						return false;
 						//Error(ecUNEXPECTED_OPERATOR, m_iPos, a_Tok.GetAsString()); 
 					}
 
 				}
 
 				m_iPos += (int)sID.length();
 				m_iSynFlags = noBC | noOPT | noARG_SEP | noPOSTOP | noEND | noASSIGN;
 				return true;
 			}
 		}
 
 		return false;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Check if a string position contains a unary post value operator. */
 	bool ParserTokenReader::IsPostOpTok(token_type& a_Tok)
 	{
 		// <ibg 20110629> Do not check for postfix operators if they are not allowed at
 		//                the current expression index.
 		//
 		//  This will fix the bug reported here:  
 		//
 		//  http://sourceforge.net/tracker/index.php?func=detail&aid=3343891&group_id=137191&atid=737979
 		//
 		if (m_iSynFlags & noPOSTOP)
 			return false;
 		// </ibg>
 
 		// Tricky problem with equations like "3m+5":
 		//     m is a postfix operator, + is a valid sign for postfix operators and 
 		//     for binary operators parser detects "m+" as operator string and 
 		//     finds no matching postfix operator.
 		// 
 		// This is a special case so this routine slightly differs from the other
 		// token readers.
 
 		// Test if there could be a postfix operator
 		string_type sTok;
 		int iEnd = ExtractToken(m_pParser->ValidOprtChars(), sTok, m_iPos);
 		if (iEnd == m_iPos)
 			return false;
 
 		// iterate over all postfix operator strings
 		funmap_type::const_reverse_iterator it = m_pPostOprtDef->rbegin();
 		for (; it != m_pPostOprtDef->rend(); ++it)
 		{
 			if (sTok.find(it->first) != 0)
 				continue;
 
 			a_Tok.Set(it->second, sTok);
 			m_iPos += (int)it->first.length();
 
 			m_iSynFlags = noVAL | noVAR | noFUN | noBO | noPOSTOP | noSTR | noASSIGN;
 			return true;
 		}
 
 		return false;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Check whether the token at a given position is a value token.
 
 	  Value tokens are either values or constants.
 
 	  \param a_Tok [out] If a value token is found it will be placed here.
 	  \return true if a value token has been found.
 	*/
 	bool ParserTokenReader::IsValTok(token_type& a_Tok)
 	{
 		assert(m_pConstDef);
 		assert(m_pParser);
 
 		string_type strTok;
 		value_type fVal(0);
 		int iEnd(0);
 
 		// 2.) Check for user defined constant
 		// Read everything that could be a constant name
 		iEnd = ExtractToken(m_pParser->ValidNameChars(), strTok, m_iPos);
 		if (iEnd != m_iPos)
 		{
 			valmap_type::const_iterator item = m_pConstDef->find(strTok);
 			if (item != m_pConstDef->end())
 			{
 				m_iPos = iEnd;
 				a_Tok.SetVal(item->second, strTok);
 
 				if (m_iSynFlags & noVAL)
 					Error(ecUNEXPECTED_VAL, m_iPos - (int)strTok.length(), strTok);
 
 				m_iSynFlags = noVAL | noVAR | noFUN | noBO | noINFIXOP | noSTR | noASSIGN;
 				return true;
 			}
 		}
 
 		// 3.call the value recognition functions provided by the user
 		// Call user defined value recognition functions
 		std::list<identfun_type>::const_iterator item = m_vIdentFun.begin();
 		for (item = m_vIdentFun.begin(); item != m_vIdentFun.end(); ++item)
 		{
 			int iStart = m_iPos;
 			if ((*item)(m_strFormula.c_str() + m_iPos, &m_iPos, &fVal) == 1)
 			{
 				// 2013-11-27 Issue 2:  https://code.google.com/p/muparser/issues/detail?id=2
 				strTok.assign(m_strFormula.c_str(), iStart, m_iPos - iStart);
 
 				if (m_iSynFlags & noVAL)
 					Error(ecUNEXPECTED_VAL, m_iPos - (int)strTok.length(), strTok);
 
 				a_Tok.SetVal(fVal, strTok);
 				m_iSynFlags = noVAL | noVAR | noFUN | noBO | noINFIXOP | noSTR | noASSIGN;
 				return true;
 			}
 		}
 
 		return false;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Check wheter a token at a given position is a variable token.
 		\param a_Tok [out] If a variable token has been found it will be placed here.
 		  \return true if a variable token has been found.
 	*/
 	bool ParserTokenReader::IsVarTok(token_type& a_Tok)
 	{
 		if (m_pVarDef->empty())
 			return false;
 
 		string_type strTok;
 		int iEnd = ExtractToken(m_pParser->ValidNameChars(), strTok, m_iPos);
 		if (iEnd == m_iPos)
 			return false;
 
 		varmap_type::const_iterator item = m_pVarDef->find(strTok);
 		if (item == m_pVarDef->end())
 			return false;
 
 		if (m_iSynFlags & noVAR)
 			Error(ecUNEXPECTED_VAR, m_iPos, strTok);
 
 		m_pParser->OnDetectVar(&m_strFormula, m_iPos, iEnd);
 
 		m_iPos = iEnd;
 		a_Tok.SetVar(item->second, strTok);
 		m_UsedVar[item->first] = item->second;  // Add variable to used-var-list
 
 		m_iSynFlags = noVAL | noVAR | noFUN | noBO | noINFIXOP | noSTR;
 
 		//  Zur Info hier die SynFlags von IsVal():
 		//    m_iSynFlags = noVAL | noVAR | noFUN | noBO | noINFIXOP | noSTR | noASSIGN; 
 		return true;
 	}
 
 	//---------------------------------------------------------------------------
 	bool ParserTokenReader::IsStrVarTok(token_type& a_Tok)
 	{
 		if (!m_pStrVarDef || m_pStrVarDef->empty())
 			return false;
 
 		string_type strTok;
 		int iEnd = ExtractToken(m_pParser->ValidNameChars(), strTok, m_iPos);
 		if (iEnd == m_iPos)
 			return false;
 
 		strmap_type::const_iterator item = m_pStrVarDef->find(strTok);
 		if (item == m_pStrVarDef->end())
 			return false;
 
 		if (m_iSynFlags & noSTR)
 			Error(ecUNEXPECTED_VAR, m_iPos, strTok);
 
 		m_iPos = iEnd;
 		if (!m_pParser->m_vStringVarBuf.size())
 			Error(ecINTERNAL_ERROR);
 
 		a_Tok.SetString(m_pParser->m_vStringVarBuf[item->second], m_pParser->m_vStringVarBuf.size());
 
 		m_iSynFlags = noANY ^ (noBC | noOPT | noEND | noARG_SEP);
 		return true;
 	}
 
 
 	//---------------------------------------------------------------------------
 	/** \brief Check wheter a token at a given position is an undefined variable.
 
 		\param a_Tok [out] If a variable tom_pParser->m_vStringBufken has been found it will be placed here.
 		  \return true if a variable token has been found.
 		\throw nothrow
 	*/
 	bool ParserTokenReader::IsUndefVarTok(token_type& a_Tok)
 	{
 		string_type strTok;
 		int iEnd(ExtractToken(m_pParser->ValidNameChars(), strTok, m_iPos));
 		if (iEnd == m_iPos)
 			return false;
 
 		if (m_iSynFlags & noVAR)
 		{
 			// <ibg/> 20061021 added token string strTok instead of a_Tok.GetAsString() as the 
 			//                 token identifier. 
 			// related bug report:
 			// http://sourceforge.net/tracker/index.php?func=detail&aid=1578779&group_id=137191&atid=737979
 			Error(ecUNEXPECTED_VAR, m_iPos - (int)a_Tok.GetAsString().length(), strTok);
 		}
 
 		// If a factory is available implicitely create new variables
 		if (m_pFactory)
 		{
 			value_type* fVar = m_pFactory(strTok.c_str(), m_pFactoryData);
 			a_Tok.SetVar(fVar, strTok);
 
 			// Do not use m_pParser->DefineVar( strTok, fVar );
 			// in order to define the new variable, it will clear the
 			// m_UsedVar array which will kill previously defined variables
 			// from the list
 			// This is safe because the new variable can never override an existing one
 			// because they are checked first!
 			(*m_pVarDef)[strTok] = fVar;
 			m_UsedVar[strTok] = fVar;  // Add variable to used-var-list
 		}
 		else
 		{
 			a_Tok.SetVar((value_type*)&m_fZero, strTok);
 			m_UsedVar[strTok] = 0;  // Add variable to used-var-list
 		}
 
 		m_iPos = iEnd;
 
 		// Call the variable factory in order to let it define a new parser variable
 		m_iSynFlags = noVAL | noVAR | noFUN | noBO | noPOSTOP | noINFIXOP | noSTR;
 		return true;
 	}
 
 
 	//---------------------------------------------------------------------------
 	/** \brief Check wheter a token at a given position is a string.
 		\param a_Tok [out] If a variable token has been found it will be placed here.
 		\return true if a string token has been found.
 		\sa IsOprt, IsFunTok, IsStrFunTok, IsValTok, IsVarTok, IsEOF, IsInfixOpTok, IsPostOpTok
 		\throw nothrow
 	*/
 	bool ParserTokenReader::IsString(token_type& a_Tok)
 	{
 		if (m_strFormula[m_iPos] != '"')
 			return false;
 
 		string_type strBuf(&m_strFormula[m_iPos + 1]);
 		std::size_t iEnd(0), iSkip(0);
 
 		// parser over escaped '\"' end replace them with '"'
 		for (iEnd = (int)strBuf.find(_T('\"')); iEnd != 0 && iEnd != string_type::npos; iEnd = (int)strBuf.find(_T('\"'), iEnd))
 		{
 			if (strBuf[iEnd - 1] != '\\') break;
 			strBuf.replace(iEnd - 1, 2, _T("\""));
 			iSkip++;
 		}
 
 		if (iEnd == string_type::npos)
 			Error(ecUNTERMINATED_STRING, m_iPos, _T("\""));
 
 		string_type strTok(strBuf.begin(), strBuf.begin() + iEnd);
 
 		if (m_iSynFlags & noSTR)
 			Error(ecUNEXPECTED_STR, m_iPos, strTok);
 
 		m_pParser->m_vStringBuf.push_back(strTok); // Store string in internal buffer
 		a_Tok.SetString(strTok, m_pParser->m_vStringBuf.size());
 
 		m_iPos += (int)strTok.length() + 2 + (int)iSkip;  // +2 for quotes; +iSkip for escape characters 
 		m_iSynFlags = noANY ^ (noARG_SEP | noBC | noOPT | noEND);
 
 		return true;
 	}
 
 	//---------------------------------------------------------------------------
 	/** \brief Create an error containing the parse error position.
 
 	  This function will create an Parser Exception object containing the error text and its position.
 
 	  \param a_iErrc [in] The error code of type #EErrorCodes.
 	  \param a_iPos [in] The position where the error was detected.
 	  \param a_strTok [in] The token string representation associated with the error.
 	  \throw ParserException always throws thats the only purpose of this function.
 	*/
 	void  ParserTokenReader::Error(EErrorCodes a_iErrc,
 		int a_iPos,
 		const string_type& a_sTok) const
 	{
 		m_pParser->Error(a_iErrc, a_iPos, a_sTok);
 	}
 
 	//---------------------------------------------------------------------------
 	void ParserTokenReader::SetArgSep(char_type cArgSep)
 	{
 		m_cArgSep = cArgSep;
 	}
 
 	//---------------------------------------------------------------------------
 	char_type ParserTokenReader::GetArgSep() const
 	{
 		return m_cArgSep;
 	}
 } // namespace mu
 
