commit 2ad0d512266b0077e86d7e98a29f7957768ad643
Author: John Reiser <jreiser@BitWagon.com>
Date:   Thu Jan 11 09:57:57 2024 -0800

    PeFile::rebuildImports(): Allow strlen() up to the very end of a logical block
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65650
    https://github.com/upx/upx/issues/769
            modified:   pefile.cpp

diff --git a/src/pefile.cpp b/src/pefile.cpp
index 397420a2..a1f385da 100644
--- a/src/pefile.cpp
+++ b/src/pefile.cpp
@@ -2907,119 +2907,121 @@ template <typename ht, typename LEXX, typename ord_mask_t>
 void PeFile::unpack0(OutputFile *fo, const ht &ih, ht &oh, ord_mask_t ord_mask, bool set_oft) {
     // infoHeader("[Processing %s, format %s, %d sections]", fn_basename(fi->getName()), getName(),
     // objs);
 
     handleStub(fi, fo, pe_offset);
     if (ih.filealign == 0)
         throwCantUnpack("unexpected value in the PE header");
 
     const unsigned iobjs = ih.objects;
     const unsigned overlay =
         file_size_u -
         ALIGN_UP(isection[iobjs - 1].rawdataptr + isection[iobjs - 1].size, ih.filealign);
     checkOverlay(overlay);
 
     ibuf.alloc(ph.c_len);
     obuf.allocForDecompression(ph.u_len);
     fi->seek(isection[1].rawdataptr - 64 + ph.buf_offset + ph.getPackHeaderSize(), SEEK_SET);
     fi->readx(ibuf, ibufgood = ph.c_len);
 
     // decompress
     decompress(ibuf, obuf);
     unsigned skip = get_le32(obuf + (ph.u_len - 4));
     unsigned take = sizeof(oh);
     SPAN_S_VAR(byte, extra_info, obuf);
     extra_info = obuf.subref("bad extra_info offset %#x", skip, take);
     // byte *const eistart = raw_bytes(extra_info, 0);
 
     memcpy(&oh, extra_info, take);
     extra_info += take;
     skip += take;
     unsigned objs = oh.objects;
 
     if ((int) objs <= 0 || (iobjs > 2 && isection[2].size == 0))
         throwCantUnpack("unexpected value in the PE header");
     Array(pe_section_t, osection, objs);
     take = sizeof(pe_section_t) * objs;
     extra_info = obuf.subref("bad extra section size at %#x", skip, take);
     memcpy(osection, extra_info, take);
     extra_info += take;
     skip += take;
     rvamin = osection[0].vaddr;
 
     if (iobjs > 2) {
         // read the noncompressed section
+        unsigned const size = isection[2].size;
         ibuf.dealloc();
-        ibuf.alloc(isection[2].size);
+        ibuf.alloc(size + 1);
         fi->seek(isection[2].rawdataptr, SEEK_SET);
-        fi->readx(ibuf, ibufgood = isection[2].size);
+        fi->readx(ibuf, ibufgood = size);
+        ibuf[size] = 0; // allow strlen() up to 'size'
     }
 
     // unfilter
     if (ph.filter) {
         Filter ft(ph.level);
         ft.init(ph.filter, oh.codebase - rvamin);
         ft.cto = (byte) ph.filter_cto;
         OCHECK(obuf + (oh.codebase - rvamin), oh.codesize);
         ft.unfilter(obuf + (oh.codebase - rvamin), oh.codesize);
     }
 
     // FIXME: ih.flags is checked here because of a bug in UPX 0.92
     if (ih.flags & IMAGE_FILE_RELOCS_STRIPPED) {
         oh.flags |= IMAGE_FILE_RELOCS_STRIPPED;
         ODADDR(PEDIR_BASERELOC) = 0;
         ODSIZE(PEDIR_BASERELOC) = 0;
     }
 
     rebuildImports<LEXX>(extra_info, ord_mask, set_oft);
     rebuildRelocs(extra_info, sizeof(ih.imagebase) * 8, oh.flags, oh.imagebase);
     rebuildTls();
     rebuildExports();
 
     if (iobjs > 3) {
         // read the resource section if present
         ibuf.dealloc();
         ibuf.alloc(isection[3].size);
         fi->seek(isection[3].rawdataptr, SEEK_SET);
         fi->readx(ibuf, ibufgood = isection[3].size);
     }
 
     rebuildResources(extra_info, isection[ih.objects - 1].vaddr);
 
     // FIXME: this does bad things if the relocation section got removed
     //  during compression ...
     // memset(eistart, 0, ptr_udiff_bytes(extra_info, eistart) + 4);
 
     // fill the data directory
     ODADDR(PEDIR_DEBUG) = 0;
     ODSIZE(PEDIR_DEBUG) = 0;
     ODADDR(PEDIR_IAT) = 0;
     ODSIZE(PEDIR_IAT) = 0;
     ODADDR(PEDIR_BOUND_IMPORT) = 0;
     ODSIZE(PEDIR_BOUND_IMPORT) = 0;
 
     setOhHeaderSize(osection);
     oh.chksum = 0;
 
     // write decompressed file
     if (fo) {
         unsigned ic = 0;
         while (ic < objs && osection[ic].rawdataptr == 0)
             ic++;
 
         ibuf.dealloc();
         ibuf.alloc(osection[ic].rawdataptr);
         ibuf.clear();
         infoHeader("[Writing uncompressed file]");
 
         // write header + decompressed file
         fo->write(&oh, sizeof(oh));
         fo->write(osection, objs * sizeof(pe_section_t));
         fo->write(ibuf, osection[ic].rawdataptr - fo->getBytesWritten());
         for (ic = 0; ic < objs; ic++)
             if (osection[ic].rawdataptr)
                 fo->write(obuf + (osection[ic].vaddr - rvamin),
                           ALIGN_UP(osection[ic].size, oh.filealign));
         copyOverlay(fo, overlay, obuf);
     }
     ibuf.dealloc();
 }
