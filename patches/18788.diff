commit 89aa1342b1e5a48d9c55d9af71e8a8151e101bf2
Author: Paul B Mahol <onemda@gmail.com>
Date:   Fri Nov 22 21:06:35 2019 +0100

    avfilter/af_aiir: normalize biquads only if divisor is big enough

diff --git a/libavfilter/af_aiir.c b/libavfilter/af_aiir.c
index 55828c1a82..717388f450 100644
--- a/libavfilter/af_aiir.c
+++ b/libavfilter/af_aiir.c
@@ -479,156 +479,160 @@ fail:
 static int decompose_zp2biquads(AVFilterContext *ctx, int channels)
 {
     AudioIIRContext *s = ctx->priv;
     int ch, ret;
 
     for (ch = 0; ch < channels; ch++) {
         IIRChannel *iir = &s->iir[ch];
         int nb_biquads = (FFMAX(iir->nb_ab[0], iir->nb_ab[1]) + 1) / 2;
         int current_biquad = 0;
 
         iir->biquads = av_calloc(nb_biquads, sizeof(BiquadContext));
         if (!iir->biquads)
             return AVERROR(ENOMEM);
 
         while (nb_biquads--) {
             Pair outmost_pole = { -1, -1 };
             Pair nearest_zero = { -1, -1 };
             double zeros[4] = { 0 };
             double poles[4] = { 0 };
             double b[6] = { 0 };
             double a[6] = { 0 };
             double min_distance = DBL_MAX;
             double max_mag = 0;
             double factor;
             int i;
 
             for (i = 0; i < iir->nb_ab[0]; i++) {
                 double mag;
 
                 if (isnan(iir->ab[0][2 * i]) || isnan(iir->ab[0][2 * i + 1]))
                     continue;
                 mag = hypot(iir->ab[0][2 * i], iir->ab[0][2 * i + 1]);
 
                 if (mag > max_mag) {
                     max_mag = mag;
                     outmost_pole.a = i;
                 }
             }
 
             for (i = 0; i < iir->nb_ab[0]; i++) {
                 if (isnan(iir->ab[0][2 * i]) || isnan(iir->ab[0][2 * i + 1]))
                     continue;
 
                 if (iir->ab[0][2 * i    ] ==  iir->ab[0][2 * outmost_pole.a    ] &&
                     iir->ab[0][2 * i + 1] == -iir->ab[0][2 * outmost_pole.a + 1]) {
                     outmost_pole.b = i;
                     break;
                 }
             }
 
             av_log(ctx, AV_LOG_VERBOSE, "outmost_pole is %d.%d\n", outmost_pole.a, outmost_pole.b);
 
             if (outmost_pole.a < 0 || outmost_pole.b < 0)
                 return AVERROR(EINVAL);
 
             for (i = 0; i < iir->nb_ab[1]; i++) {
                 double distance;
 
                 if (isnan(iir->ab[1][2 * i]) || isnan(iir->ab[1][2 * i + 1]))
                     continue;
                 distance = hypot(iir->ab[0][2 * outmost_pole.a    ] - iir->ab[1][2 * i    ],
                                  iir->ab[0][2 * outmost_pole.a + 1] - iir->ab[1][2 * i + 1]);
 
                 if (distance < min_distance) {
                     min_distance = distance;
                     nearest_zero.a = i;
                 }
             }
 
             for (i = 0; i < iir->nb_ab[1]; i++) {
                 if (isnan(iir->ab[1][2 * i]) || isnan(iir->ab[1][2 * i + 1]))
                     continue;
 
                 if (iir->ab[1][2 * i    ] ==  iir->ab[1][2 * nearest_zero.a    ] &&
                     iir->ab[1][2 * i + 1] == -iir->ab[1][2 * nearest_zero.a + 1]) {
                     nearest_zero.b = i;
                     break;
                 }
             }
 
             av_log(ctx, AV_LOG_VERBOSE, "nearest_zero is %d.%d\n", nearest_zero.a, nearest_zero.b);
 
             if (nearest_zero.a < 0 || nearest_zero.b < 0)
                 return AVERROR(EINVAL);
 
             poles[0] = iir->ab[0][2 * outmost_pole.a    ];
             poles[1] = iir->ab[0][2 * outmost_pole.a + 1];
 
             zeros[0] = iir->ab[1][2 * nearest_zero.a    ];
             zeros[1] = iir->ab[1][2 * nearest_zero.a + 1];
 
             if (nearest_zero.a == nearest_zero.b && outmost_pole.a == outmost_pole.b) {
                 zeros[2] = 0;
                 zeros[3] = 0;
 
                 poles[2] = 0;
                 poles[3] = 0;
             } else {
                 poles[2] = iir->ab[0][2 * outmost_pole.b    ];
                 poles[3] = iir->ab[0][2 * outmost_pole.b + 1];
 
                 zeros[2] = iir->ab[1][2 * nearest_zero.b    ];
                 zeros[3] = iir->ab[1][2 * nearest_zero.b + 1];
             }
 
             ret = expand(ctx, zeros, 2, b);
             if (ret < 0)
                 return ret;
 
             ret = expand(ctx, poles, 2, a);
             if (ret < 0)
                 return ret;
 
             iir->ab[0][2 * outmost_pole.a] = iir->ab[0][2 * outmost_pole.a + 1] = NAN;
             iir->ab[0][2 * outmost_pole.b] = iir->ab[0][2 * outmost_pole.b + 1] = NAN;
             iir->ab[1][2 * nearest_zero.a] = iir->ab[1][2 * nearest_zero.a + 1] = NAN;
             iir->ab[1][2 * nearest_zero.b] = iir->ab[1][2 * nearest_zero.b + 1] = NAN;
 
             iir->biquads[current_biquad].a[0] = 1.;
             iir->biquads[current_biquad].a[1] = a[2] / a[4];
             iir->biquads[current_biquad].a[2] = a[0] / a[4];
             iir->biquads[current_biquad].b[0] = b[4] / a[4];
             iir->biquads[current_biquad].b[1] = b[2] / a[4];
             iir->biquads[current_biquad].b[2] = b[0] / a[4];
 
-            factor = (iir->biquads[current_biquad].a[0] +
-                      iir->biquads[current_biquad].a[1] +
-                      iir->biquads[current_biquad].a[2]) /
-                     (iir->biquads[current_biquad].b[0] +
-                      iir->biquads[current_biquad].b[1] +
-                      iir->biquads[current_biquad].b[2]);
-
-            av_log(ctx, AV_LOG_VERBOSE, "factor=%f\n", factor);
-
-            iir->biquads[current_biquad].b[0] *= factor;
-            iir->biquads[current_biquad].b[1] *= factor;
-            iir->biquads[current_biquad].b[2] *= factor;
+            if (fabs(iir->biquads[current_biquad].b[0] +
+                     iir->biquads[current_biquad].b[1] +
+                     iir->biquads[current_biquad].b[2]) > 1e-6) {
+                factor = (iir->biquads[current_biquad].a[0] +
+                          iir->biquads[current_biquad].a[1] +
+                          iir->biquads[current_biquad].a[2]) /
+                         (iir->biquads[current_biquad].b[0] +
+                          iir->biquads[current_biquad].b[1] +
+                          iir->biquads[current_biquad].b[2]);
+
+                av_log(ctx, AV_LOG_VERBOSE, "factor=%f\n", factor);
+
+                iir->biquads[current_biquad].b[0] *= factor;
+                iir->biquads[current_biquad].b[1] *= factor;
+                iir->biquads[current_biquad].b[2] *= factor;
+            }
 
             iir->biquads[current_biquad].b[0] *= (current_biquad ? 1.0 : iir->g);
             iir->biquads[current_biquad].b[1] *= (current_biquad ? 1.0 : iir->g);
             iir->biquads[current_biquad].b[2] *= (current_biquad ? 1.0 : iir->g);
 
             av_log(ctx, AV_LOG_VERBOSE, "a=%f %f %f:b=%f %f %f\n",
                    iir->biquads[current_biquad].a[0],
                    iir->biquads[current_biquad].a[1],
                    iir->biquads[current_biquad].a[2],
                    iir->biquads[current_biquad].b[0],
                    iir->biquads[current_biquad].b[1],
                    iir->biquads[current_biquad].b[2]);
 
             current_biquad++;
         }
     }
 
     return 0;
 }
