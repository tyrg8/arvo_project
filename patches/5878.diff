commit 9ec07205cc17c2de80b06a8b1e181abde4fdbb1e
Author: Jonathan Hui <jonhui@nestlabs.com>
Date:   Mon Feb 5 17:06:36 2018 +0000

    [network-data] add length validation to Server TLV (#2532)
    
    Credit to OSS-Fuzz.

diff --git a/src/core/thread/network_data_leader_ftd.cpp b/src/core/thread/network_data_leader_ftd.cpp
index b6422dfe1..6f5418cf5 100644
--- a/src/core/thread/network_data_leader_ftd.cpp
+++ b/src/core/thread/network_data_leader_ftd.cpp
@@ -433,149 +433,150 @@ exit:
 otError Leader::RlocLookup(uint16_t aRloc16, bool &aIn, bool &aStable, uint8_t *aTlvs, uint8_t aTlvsLength)
 {
     otError error = OT_ERROR_NONE;
     NetworkDataTlv *cur = reinterpret_cast<NetworkDataTlv *>(aTlvs);
     NetworkDataTlv *end = reinterpret_cast<NetworkDataTlv *>(aTlvs + aTlvsLength);
     NetworkDataTlv *subCur;
     NetworkDataTlv *subEnd;
     PrefixTlv *prefix;
     BorderRouterTlv *borderRouter;
     HasRouteTlv *hasRoute;
     BorderRouterEntry *borderRouterEntry;
     HasRouteEntry *hasRouteEntry;
 #if OPENTHREAD_ENABLE_SERVICE
     ServiceTlv *service;
     ServerTlv *server;
 #endif
 
     while (cur < end)
     {
         VerifyOrExit((cur + 1) <= end && cur->GetNext() <= end, error = OT_ERROR_PARSE);
 
         switch (cur->GetType())
         {
         case NetworkDataTlv::kTypePrefix:
         {
             prefix = static_cast<PrefixTlv *>(cur);
             VerifyOrExit(prefix->IsValid(), error = OT_ERROR_PARSE);
 
             subCur = prefix->GetSubTlvs();
             subEnd = prefix->GetNext();
 
             VerifyOrExit(subEnd <= end, error = OT_ERROR_PARSE);
 
             while (subCur < subEnd)
             {
                 VerifyOrExit((subCur + 1) <= subEnd && subCur->GetNext() <= subEnd, error = OT_ERROR_PARSE);
 
                 switch (subCur->GetType())
                 {
                 case NetworkDataTlv::kTypeBorderRouter:
                     borderRouter = static_cast<BorderRouterTlv *>(subCur);
 
                     for (uint8_t i = 0; i < borderRouter->GetNumEntries(); i++)
                     {
                         borderRouterEntry = borderRouter->GetEntry(i);
 
                         if (borderRouterEntry->GetRloc() == aRloc16)
                         {
                             aIn = true;
 
                             if (borderRouter->IsStable())
                             {
                                 aStable = true;
                             }
                         }
                     }
 
                     break;
 
                 case NetworkDataTlv::kTypeHasRoute:
                     hasRoute = static_cast<HasRouteTlv *>(subCur);
 
                     for (uint8_t i = 0; i < hasRoute->GetNumEntries(); i++)
                     {
                         hasRouteEntry = hasRoute->GetEntry(i);
 
                         if (hasRouteEntry->GetRloc() == aRloc16)
                         {
                             aIn = true;
 
                             if (hasRoute->IsStable())
                             {
                                 aStable = true;
                             }
                         }
                     }
 
                     break;
 
                 default:
                     break;
                 }
 
                 if (aIn && aStable)
                 {
                     ExitNow();
                 }
 
                 subCur = subCur->GetNext();
             }
         }
         break;
 
 #if OPENTHREAD_ENABLE_SERVICE
 
         case NetworkDataTlv::kTypeService:
         {
             service = static_cast<ServiceTlv *>(cur);
             VerifyOrExit(service->IsValid(), error = OT_ERROR_PARSE);
 
             subCur = service->GetSubTlvs();
             subEnd = service->GetNext();
 
             VerifyOrExit(subEnd <= end, error = OT_ERROR_PARSE);
 
             while (subCur < subEnd)
             {
                 VerifyOrExit((subCur + 1) <= subEnd && subCur->GetNext() <= subEnd, error = OT_ERROR_PARSE);
 
                 switch (subCur->GetType())
                 {
                 case NetworkDataTlv::kTypeServer:
                     server = static_cast<ServerTlv *>(subCur);
+                    VerifyOrExit(server->IsValid(), error = OT_ERROR_PARSE);
 
                     if (server->GetServer16() == aRloc16)
                     {
                         aIn = true;
 
                         if (server->IsStable())
                         {
                             aStable = true;
                         }
                     }
 
                     break;
 
                 default:
                     break;
                 }
 
                 if (aIn && aStable)
                 {
                     ExitNow();
                 }
 
                 subCur = subCur->GetNext();
             }
 
             break;
         }
 
 #endif
 
         default:
             break;
         }
 
         cur = cur->GetNext();
     }
diff --git a/src/core/thread/network_data_tlvs.hpp b/src/core/thread/network_data_tlvs.hpp
index 94ad90eb3..20083b48c 100644
--- a/src/core/thread/network_data_tlvs.hpp
+++ b/src/core/thread/network_data_tlvs.hpp
@@ -918,52 +918,63 @@ class ServerTlv: public NetworkDataTlv
 {
 public:
     /**
      * This method initializes the TLV.
      *
      */
     void Init(void) { NetworkDataTlv::Init(); SetType(kTypeServer); SetLength(sizeof(*this) - sizeof(NetworkDataTlv)); }
 
+    /**
+     * This method indicates whether or not the TLV appears to be well-formed.
+     *
+     * @retval TRUE   If the TLV appears to be well-formed.
+     * @retval FALSE  If the TLV does not appear to be well-formed.
+     *
+     */
+    bool IsValid(void) const {
+        return GetLength() >= (sizeof(*this) - sizeof(NetworkDataTlv));
+    }
+
     /**
      * This method returns the S_server_16 value.
      *
      * @returns The S_server_16 value.
      */
     uint16_t GetServer16(void) const { return HostSwap16(mServer16); }
 
     /**
      * This method sets the S_server_16 value.
      *
      * @param[in]  aServer16  The S_server_16 value.
      *
      */
     void SetServer16(uint16_t aServer16) { mServer16 = HostSwap16(aServer16); }
 
     /**
      * This method returns a pointer to the Server Data.
      *
      * @returns A pointer to the Server Data.
      */
     const uint8_t *GetServerData(void) { return reinterpret_cast<uint8_t *>(this) + sizeof(*this); }
 
     /**
      * This method sets Server Data to the given values.
      *
      * Caller must ensure that there is enough memory allocated.
      *
      * @param aServerData       pointer to the server data to use
      * @param aServerDataLength length of the provided server data in bytes
      */
     void SetServerData(const uint8_t *aServerData, uint8_t aServerDataLength) {
         SetLength(sizeof(*this) - sizeof(NetworkDataTlv) + aServerDataLength);
         memcpy(reinterpret_cast<uint8_t *>(this) + sizeof(*this), aServerData, aServerDataLength);
     }
 
     /**
      * This method returns the Server Data length in bytes.
      *
      * @returns The Server Data length in bytes.
      *
      */
     uint8_t GetServerDataLength(void) const {
         return GetLength() - (sizeof(*this) - sizeof(NetworkDataTlv));
     }
