commit 98729e9d56bd5e8e0530de39d955dc838803cbb2
Author: Reini Urban <rurban@cpan.org>
Date:   Tue Nov 29 06:12:32 2022 +0100

    decode_r11: fix post HEADER overflow
    
    fixes ossfuzz: 53750

diff --git a/src/decode_r11.c b/src/decode_r11.c
index 6d14edc7..c72a234e 100644
--- a/src/decode_r11.c
+++ b/src/decode_r11.c
@@ -659,303 +659,308 @@ EXPORT int
 decode_preR13 (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)
 {
   BITCODE_RL entities_start = 0, entities_end = 0;
   BITCODE_RL blocks_start = 0, blocks_size = 0, blocks_end = 0;
   BITCODE_RL rl1, rl2, blocks_max = 0xFFFFFFFF, num_entities;
   BITCODE_RS rs2;
   Dwg_Object *obj = NULL;
   int tbl_id;
   int error = 0;
   int num_sections = 5;
 
   loglevel = dat->opts & DWG_OPTS_LOGLEVEL;
 #ifndef USE_WRITE
   fprintf(stderr, "Cannot create pre-R13 documents with --disable-write\n");
   return DWG_ERR_INTERNALERROR;
 #else
   {
     int i;
     Dwg_Header *_obj = (Dwg_Header *)&dwg->header;
     Bit_Chain *hdl_dat = dat;
     dat->byte = 0x06;
     // clang-format off
     #include "header.spec"
     // clang-format on
   }
   LOG_TRACE ("@0x%lx\n", dat->byte); // 0x14
 
   // setup all the new control objects
   error |= dwg_add_Document (dwg, 0);
 
   // 5 tables + header + block. VIEW = 6
   if (dwg->header.numheader_vars > 158) // r10
     num_sections += 3;
   if (dwg->header.numheader_vars > 160) // r11
     num_sections += 2;
   dwg->header.section = (Dwg_Section *)calloc (sizeof (Dwg_Section),
                                                num_sections + 2);
   if (!dwg->header.section)
     {
       LOG_ERROR ("Out of memory");
       return DWG_ERR_OUTOFMEM;
     }
   dwg->header.numsections = num_sections;
   PRE (R_2_0b) {
     bit_read_RC (dat); // the 6th zero
     LOG_TRACE ("zero[6]: 0 [RC 0]\n");
   }
   SINCE (R_2_0b) {
     entities_start = bit_read_RL (dat);
     LOG_TRACE ("entities_start: " FORMAT_RL " (" FORMAT_RLx ") [RL]\n", entities_start, entities_start);
     entities_end = bit_read_RL (dat);
     LOG_TRACE ("entities_end: " FORMAT_RL " (" FORMAT_RLx ") [RL]\n", entities_end, entities_end);
     blocks_start = bit_read_RL (dat);
     LOG_TRACE ("blocks_start: " FORMAT_RL " (" FORMAT_RLx ") [RL]\n", blocks_start, blocks_start);
     blocks_size = bit_read_RL (dat);
     if (blocks_size >= 0x40000000) {
       LOG_TRACE ("blocks_size: 0x40000000 | " FORMAT_RL " [RLx]\n", blocks_size & 0x3fffffff);
     }
     else {
       LOG_TRACE ("blocks_size: " FORMAT_RL " [RL]\n", blocks_size);
     }
     blocks_end = bit_read_RL (dat);
     LOG_TRACE ("blocks_end: " FORMAT_RL " (" FORMAT_RLx ") [RL]\n", blocks_end, blocks_end);
     blocks_max = bit_read_RL (dat); // 0x80000000
     LOG_TRACE ("blocks_max: " FORMAT_RLx " [RLx]\n", blocks_max);
     tbl_id = 0;
     dwg->header.section[0].number = 0;
     dwg->header.section[0].type = (Dwg_Section_Type)SECTION_HEADER_R11;
     strcpy (dwg->header.section[0].name, "HEADER");
 
     // The 5 tables (num_sections always 5): 3 RS + 1 RL address
     LOG_INFO ("==========================================\n")
     if (decode_preR13_section_hdr ("BLOCK", SECTION_BLOCK, dat, dwg)
         || decode_preR13_section_hdr ("LAYER", SECTION_LAYER, dat, dwg)
         || decode_preR13_section_hdr ("STYLE", SECTION_STYLE, dat, dwg)
         || decode_preR13_section_hdr ("LTYPE", SECTION_LTYPE, dat, dwg)
         || decode_preR13_section_hdr ("VIEW", SECTION_VIEW, dat, dwg))
       return DWG_ERR_INVALIDDWG;
   }
   LOG_TRACE ("@0x%lx\n", dat->byte); // 0x5e
   if (dat->size < 0x1f0) // AC1.50 0x1f9 74 vars
     {
       LOG_ERROR ("DWG too small %zu", (size_t)dat->size)
       return DWG_ERR_INVALIDDWG;
     }
 
   LOG_INFO ("==========================================\n")
   error |= decode_preR13_header_variables (dat, dwg);
   LOG_TRACE ("@0x%lx\n", dat->byte);
   if (error >= DWG_ERR_CRITICAL)
     return error;
-  SINCE (R_11)
+  if (dat->byte + 2 >= dat->size)
     {
-      // crc16 + DWG_SENTINEL_R11_HEADER_END
-      BITCODE_RS crc, crcc;
-      BITCODE_TF r11_sentinel;
-      crcc = bit_calc_CRC (0xC0C1, &dat->chain[0], dat->byte); // from 0 to now
-      crc = bit_read_RS (dat);
-      LOG_TRACE ("crc: %04X [RSx] from 0-0x%lx\n", crc, dat->byte - 2);
-      if (crc != crcc)
-        {
-          LOG_ERROR ("Header CRC mismatch %04X <=> %04X", crc, crcc);
-          error |= DWG_ERR_WRONGCRC;
-        }
-      r11_sentinel = bit_read_TF (dat, 16);
-      LOG_TRACE ("r11_sentinel: ");
-      LOG_TRACE_TF (r11_sentinel, 16) // == C46E6854F86E3330633EC1852ADC9401
-      if (memcmp (r11_sentinel, dwg_sentinel (DWG_SENTINEL_R11_HEADER_END), 16))
-        {
-          LOG_ERROR ("DWG_SENTINEL_R11_HEADER_END mismatch");
-          error |= DWG_ERR_WRONGCRC;
-        }
-      free (r11_sentinel);
+      LOG_ERROR ("post HEADER overflow")
+      return error | DWG_ERR_CRITICAL;
+    }
+  SINCE (R_11)
+  {
+    // crc16 + DWG_SENTINEL_R11_HEADER_END
+    BITCODE_RS crc, crcc;
+    BITCODE_TF r11_sentinel;
+    crcc = bit_calc_CRC (0xC0C1, &dat->chain[0], dat->byte); // from 0 to now
+    crc = bit_read_RS (dat);
+    LOG_TRACE ("crc: %04X [RSx] from 0-0x%lx\n", crc, dat->byte - 2);
+    if (crc != crcc)
+      {
+        LOG_ERROR ("Header CRC mismatch %04X <=> %04X", crc, crcc);
+        error |= DWG_ERR_WRONGCRC;
+      }
+    r11_sentinel = bit_read_TF (dat, 16);
+    LOG_TRACE ("r11_sentinel: ");
+    LOG_TRACE_TF (r11_sentinel, 16) // == C46E6854F86E3330633EC1852ADC9401
+    if (memcmp (r11_sentinel, dwg_sentinel (DWG_SENTINEL_R11_HEADER_END), 16))
+      {
+        LOG_ERROR ("DWG_SENTINEL_R11_HEADER_END mismatch");
+        error |= DWG_ERR_WRONGCRC;
+      }
+    free (r11_sentinel);
     }
 
   PRE (R_10)
     num_entities = dwg->header_vars.numentities;
   else
     num_entities = 0;
   PRE (R_2_0b) {
     entities_start = dat->byte;
     entities_end = dwg->header_vars.dwg_size;
   }
 
   // additional tables mixed-in since r10
   if (dwg->header.numheader_vars > 158) // r10
     {
       dat->byte = 0x3ef;
       LOG_TRACE ("@0x%lx\n", dat->byte);
       decode_preR13_section_hdr ("UCS", SECTION_UCS, dat, dwg);
       dat->byte = 0x500;
       LOG_TRACE ("@0x%lx\n", dat->byte);
       decode_preR13_section_hdr ("VPORT", SECTION_VPORT, dat, dwg);
       dat->byte = 0x512;
       LOG_TRACE ("@0x%lx\n", dat->byte);
       decode_preR13_section_hdr ("APPID", SECTION_APPID, dat, dwg);
       dat->byte = entities_start;
     }
   if (dwg->header.numheader_vars > 160) // r11
     {
       dat->byte = 0x522;
       LOG_TRACE ("@0x%lx\n", dat->byte);
       decode_preR13_section_hdr ("DIMSTYLE", SECTION_DIMSTYLE, dat, dwg);
       dat->byte = 0x69f;
       LOG_TRACE ("@0x%lx\n", dat->byte);
       decode_preR13_section_hdr ("VX", SECTION_VX, dat, dwg);
       dat->byte = entities_start;
     }
 
   // entities
   if (dat->byte != entities_start)
     {
       LOG_WARN ("@0x%lx => entities_start 0x%x", dat->byte, entities_start);
       if (dat->byte < entities_start)
         {
           _DEBUG_HERE (dat->byte - entities_start)
         }
       dat->byte = entities_start;
     }
   error |= decode_preR13_entities (entities_start, entities_end, num_entities,
                                    entities_end - entities_start, 0, dat, dwg);
   if (error >= DWG_ERR_CRITICAL)
     return error;
   if (dat->byte != entities_end)
     {
       LOG_WARN ("@0x%lx => entities_end 0x%x", dat->byte, entities_end);
       dat->byte = entities_end;
     }
   PRE (R_2_0b) {
     // this has usually some slack at the end.
     return error;
   }
   LOG_INFO ("==========================================\n")
   //dat->byte += 20; /* crc + sentinel? 20 byte */
   if (!dwg->next_hdl)
     dwg_set_next_hdl (dwg, 0x22);
   error |= decode_preR13_section (SECTION_BLOCK, dat, dwg);
   error |= decode_preR13_section (SECTION_LAYER, dat, dwg);
   error |= decode_preR13_section (SECTION_STYLE, dat, dwg);
   error |= decode_preR13_section (SECTION_LTYPE, dat, dwg);
   error |= decode_preR13_section (SECTION_VIEW, dat, dwg);
 #if 1
   if (num_sections > 5) // r10
     {
       error |= decode_preR13_section (SECTION_UCS, dat, dwg);
       error |= decode_preR13_section (SECTION_VPORT, dat, dwg);
       error |= decode_preR13_section (SECTION_APPID, dat, dwg);
     }
   if (num_sections > 8) // r11
     {
       error |= decode_preR13_section (SECTION_DIMSTYLE, dat, dwg);
       error |= decode_preR13_section (SECTION_VX, dat, dwg);
     }
 #endif
   if (error >= DWG_ERR_CRITICAL)
     return error;
 
   // block entities
   if (dat->byte != blocks_start)
     {
       BITCODE_TF unknown;
       int len = blocks_start - dat->byte;
       LOG_WARN ("\n@0x%lx => blocks_start 0x%x", dat->byte, blocks_start);
       if (dat->byte < blocks_start)
         {
           unknown = bit_read_TF (dat, len);
           LOG_TRACE ("unknown (%d):", len);
           LOG_TRACE_TF (unknown, len);
           free (unknown);
         }
       dat->byte = blocks_start;
     }
   num_entities = 0;
   VERSION (R_11)
     blocks_end -= 32; // ??
   error |= decode_preR13_entities (blocks_start, blocks_end,
                                    num_entities, blocks_size & 0x3FFFFFFF,
                                    blocks_max, dat, dwg);
   if (error >= DWG_ERR_CRITICAL)
     return error;
 
   PRE (R_11) {
     return error;
   }
   // only since r11 (AC1009)
   LOG_TRACE ("AUXHEADER: @0x%lx\n", dat->byte);
   // 36 byte: 9x long
   rl1 = bit_read_RL (dat);
   rl2 = bit_read_RL (dat);
   LOG_TRACE ("?2long: 0x%x 0x%x %f\n", rl1, rl2,
              (double)dat->chain[dat->byte - 8]);
   rl1 = bit_read_RL (dat);
   rl2 = bit_read_RL (dat);
   LOG_TRACE ("?2long: 0x%x 0x%x %f\n", rl1, rl2,
              (double)dat->chain[dat->byte - 8]);
   rl1 = bit_read_RL (dat);
   rl2 = bit_read_RL (dat);
   LOG_TRACE ("?2long: 0x%x 0x%x %f\n", rl1, rl2,
              (double)dat->chain[dat->byte - 8]);
   rl1 = bit_read_RL (dat);
   rl2 = bit_read_RL (dat);
   LOG_TRACE ("?2long: 0x%x 0x%x %f\n", rl1, rl2,
              (double)dat->chain[dat->byte - 8]);
   rl1 = bit_read_RL (dat);
   LOG_TRACE ("?1long: 0x%x\n", rl1);
 
   LOG_TRACE ("@0x%lx: 4 block ptrs chk\n", dat->byte);
   if ((rl1 = bit_read_RL (dat)) != entities_start)
     {
       LOG_WARN ("entities_start %x/%x", rl1, entities_start);
     }
   if ((rl1 = bit_read_RL (dat)) != entities_end)
     {
       LOG_WARN ("entities_end %x/%x", rl1, entities_end);
     }
   if ((rl1 = bit_read_RL (dat)) != blocks_start)
     {
       LOG_WARN ("blocks_start %x/%x", rl1, blocks_start);
     }
   if ((rl1 = bit_read_RL (dat)) != blocks_end)
     {
       LOG_WARN ("blocks_end %x/%x", rl1, blocks_end);
     }
   // 12 byte
   LOG_TRACE ("@0x%lx\n", dat->byte);
   rl1 = bit_read_RL (dat);
   rl2 = bit_read_RL (dat);
   LOG_TRACE ("?2long: 0x%x 0x%x\n", rl1, rl2);
   rl1 = bit_read_RL (dat);
   LOG_TRACE ("?1long: 0x%x\n", rl1);
 
   rl1 = blocks_end + 36 + 4 * 4 + 12; // ??
   DEBUG_HERE
   UNKNOWN_UNTIL (rl1);
   LOG_TRACE ("@0x%lx\n", dat->byte);
   decode_preR13_section_chk (SECTION_BLOCK, dat, dwg);
   decode_preR13_section_chk (SECTION_LAYER, dat, dwg);
   decode_preR13_section_chk (SECTION_STYLE, dat, dwg);
   decode_preR13_section_chk (SECTION_LTYPE, dat, dwg);
   decode_preR13_section_chk (SECTION_VIEW, dat, dwg);
   if (num_sections > 5) // dead code?
     {
       decode_preR13_section_chk (SECTION_UCS, dat, dwg);
       decode_preR13_section_chk (SECTION_VPORT, dat, dwg);
       decode_preR13_section_chk (SECTION_APPID, dat, dwg);
       decode_preR13_section_chk (SECTION_DIMSTYLE, dat, dwg);
       decode_preR13_section_chk (SECTION_VX, dat, dwg);
     }
   rl1 = bit_read_RL (dat);
   LOG_TRACE ("long 0x%x\n", rl1); // address
   if (dat->byte < dat->size)
     {
       int len = dat->size - dat->byte;
       BITCODE_TF unknown = bit_read_TF (dat, len);
       LOG_TRACE ("unknown (%d):", len);
       LOG_TRACE_TF (unknown, len);
       free (unknown);
     }
   if (dwg->dirty_refs)
     dwg_resolve_objectrefs_silent (dwg);
   return 0;
 #endif // USE_WRITE
 }
