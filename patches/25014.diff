commit 19cae17f5a2acfbd5554d145bb87cd6bf2de244f
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Wed Aug 19 13:07:28 2020 +0200

    Revert "Fix quadratic runtime in xi:fallback processing"
    
    This reverts commit 27119ec33c9f6b9830efa1e0da0acfa353dfa55a.
    
    Not copying fallback children didn't fix up namespaces and could lead
    to use-after-free errors.
    
    Found by OSS-Fuzz.

diff --git a/xinclude.c b/xinclude.c
index 3c810ca1..90245355 100644
--- a/xinclude.c
+++ b/xinclude.c
@@ -1960,51 +1960,52 @@ static int
 xmlXIncludeLoadFallback(xmlXIncludeCtxtPtr ctxt, xmlNodePtr fallback, int nr) {
     xmlXIncludeCtxtPtr newctxt;
     int ret = 0;
     int oldNbErrors = ctxt->nbErrors;
 
     if ((fallback == NULL) || (fallback->type == XML_NAMESPACE_DECL) ||
         (ctxt == NULL))
 	return(-1);
     if (fallback->children != NULL) {
 	/*
 	 * It's possible that the fallback also has 'includes'
 	 * (Bug 129969), so we re-process the fallback just in case
 	 */
 	newctxt = xmlXIncludeNewContext(ctxt->doc);
 	if (newctxt == NULL)
 	    return (-1);
 	newctxt->_private = ctxt->_private;
 	newctxt->base = xmlStrdup(ctxt->base);	/* Inherit the base from the existing context */
 	xmlXIncludeSetFlags(newctxt, ctxt->parseFlags);
         newctxt->incTotal = ctxt->incTotal;
         if (xmlXIncludeDoProcess(newctxt, ctxt->doc, fallback, 1) < 0)
             ret = -1;
         ctxt->incTotal = newctxt->incTotal;
 	if (ctxt->nbErrors > oldNbErrors)
 	    ret = -1;
 	xmlXIncludeFreeContext(newctxt);
 
-	ctxt->incTab[nr]->inc = fallback->children;
+	ctxt->incTab[nr]->inc = xmlDocCopyNodeList(ctxt->doc,
+	                                           fallback->children);
     } else {
         ctxt->incTab[nr]->inc = NULL;
     }
     ctxt->incTab[nr]->fallback = 1;
     return(ret);
 }
 
 /************************************************************************
  *									*
  *			XInclude Processing				*
  *									*
  ************************************************************************/
 
 /**
  * xmlXIncludePreProcessNode:
  * @ctxt: an XInclude context
  * @node: an XInclude node
  *
  * Implement the XInclude preprocessing, currently just adding the element
  * for further processing.
  *
  * Returns the result list or NULL in case of error
  */
@@ -2184,100 +2185,100 @@ static int
 xmlXIncludeIncludeNode(xmlXIncludeCtxtPtr ctxt, int nr) {
     xmlNodePtr cur, end, list, tmp;
 
     if (ctxt == NULL)
 	return(-1);
     if ((nr < 0) || (nr >= ctxt->incNr))
 	return(-1);
     cur = ctxt->incTab[nr]->ref;
     if ((cur == NULL) || (cur->type == XML_NAMESPACE_DECL))
 	return(-1);
 
     list = ctxt->incTab[nr]->inc;
     ctxt->incTab[nr]->inc = NULL;
 
     /*
      * Check against the risk of generating a multi-rooted document
      */
     if ((cur->parent != NULL) &&
 	(cur->parent->type != XML_ELEMENT_NODE)) {
 	int nb_elem = 0;
 
 	tmp = list;
 	while (tmp != NULL) {
 	    if (tmp->type == XML_ELEMENT_NODE)
 		nb_elem++;
 	    tmp = tmp->next;
 	}
 	if (nb_elem > 1) {
 	    xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	                   XML_XINCLUDE_MULTIPLE_ROOT,
 		       "XInclude error: would result in multiple root nodes\n",
 			   NULL);
             xmlFreeNodeList(list);
 	    return(-1);
 	}
     }
 
     if (ctxt->parseFlags & XML_PARSE_NOXINCNODE) {
 	/*
 	 * Add the list of nodes
 	 */
 	while (list != NULL) {
 	    end = list;
 	    list = list->next;
 
 	    xmlAddPrevSibling(cur, end);
 	}
 	xmlUnlinkNode(cur);
 	xmlFreeNode(cur);
     } else {
         xmlNodePtr child, next;
 
 	/*
 	 * Change the current node as an XInclude start one, and add an
 	 * XInclude end one
 	 */
         if (ctxt->incTab[nr]->fallback)
             xmlUnsetProp(cur, BAD_CAST "href");
 	cur->type = XML_XINCLUDE_START;
+        /* Remove fallback children */
+        for (child = cur->children; child != NULL; child = next) {
+            next = child->next;
+            xmlUnlinkNode(child);
+            xmlFreeNode(child);
+        }
 	end = xmlNewDocNode(cur->doc, cur->ns, cur->name, NULL);
 	if (end == NULL) {
 	    xmlXIncludeErr(ctxt, ctxt->incTab[nr]->ref,
 	                   XML_XINCLUDE_BUILD_FAILED,
 			   "failed to build node\n", NULL);
             xmlFreeNodeList(list);
 	    return(-1);
 	}
 	end->type = XML_XINCLUDE_END;
 	xmlAddNextSibling(cur, end);
 
 	/*
 	 * Add the list of nodes
 	 */
 	while (list != NULL) {
-	    next = list->next;
-	    xmlAddPrevSibling(end, list);
-	    list = next;
-	}
+	    cur = list;
+	    list = list->next;
 
-        /* Remove fallback node */
-        for (child = cur->children; child != NULL; child = next) {
-            next = child->next;
-            xmlUnlinkNode(child);
-            xmlFreeNode(child);
-        }
+	    xmlAddPrevSibling(end, cur);
+	}
     }
 
 
     return(0);
 }
 
 /**
  * xmlXIncludeTestNode:
  * @ctxt: the XInclude processing context
  * @node: an XInclude node
  *
  * test if the node is an XInclude node
  *
  * Returns 1 true, 0 otherwise
  */
