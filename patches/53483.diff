commit 795fccd75b2af90f402d9f903346414a1db193a1
Author: Reini Urban <rurban@cpan.org>
Date:   Wed Dec 14 10:16:55 2022 +0100

    decode: fix assert with fuzzed illegal HEADER
    
    No Section Locator Records at 0x15
    Fixes oss-fuzz #47319

diff --git a/src/decode.c b/src/decode.c
index 7849b8f5..6ddb6b7e 100644
--- a/src/decode.c
+++ b/src/decode.c
@@ -263,250 +263,255 @@ static int
 decode_R13_R2000 (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)
 {
   Dwg_Object *obj = NULL;
   unsigned int section_size = 0;
   unsigned char sgdc[2];
   unsigned int crc, crc2;
   long unsigned int size;
   long unsigned int endpos;
   long unsigned int lastmap;
   long unsigned int startpos;
   long unsigned int object_begin;
   long unsigned int object_end;
   long unsigned int pvz;
   BITCODE_BL j, k;
   int error = 0;
   const char *section_names[]
       = { "AcDb:Header", "AcDb:Classes", "AcDb:Handles",
           "2NDHEADER",   "AcDb:Template",  "AcDb:AuxHeader" };
 
   {
     int i;
     Dwg_Header *_obj = &dwg->header;
     Bit_Chain *hdl_dat = dat;
     dat->byte = 0x06;
     // clang-format off
     #include "header.spec"
     // clang-format on
   }
 
   /* Section Locator Records 0x15 */
+  if (dat->byte != 0x15)
+    {
+      LOG_ERROR ("Wrong HEADER Section Locator Records at %lu", dat->byte)
+      return DWG_ERR_INVALIDDWG;
+    }
   assert (dat->byte == 0x15);
   dwg->header.numsections = bit_read_RL (dat);
   LOG_TRACE ("\nnum_sections: " FORMAT_RL " [RL]\n", dwg->header.numsections)
   if (!dwg->header.numsections) // ODA writes zeros.
     dwg->header.numsections = 6;
   if (dwg->header.numsections < 3)
     {
       LOG_ERROR ("Not enough sections: " FORMAT_RL, dwg->header.numsections);
       return DWG_ERR_INVALIDDWG;
     }
   if (dwg->header.numsections > 10)
     {
       LOG_ERROR ("Too many sections: " FORMAT_RL, dwg->header.numsections);
       return DWG_ERR_INVALIDDWG;
     }
 
   // So far seen 3-6 sections. Most emit only 3-5 sections.
   dwg->header.section = (Dwg_Section *)calloc (
       1, sizeof (Dwg_Section) * dwg->header.numsections);
   if (!dwg->header.section)
     {
       LOG_ERROR ("Out of memory");
       return DWG_ERR_OUTOFMEM;
     }
   /* section 0: header vars
    *         1: class section
    *         2: object map
    *         3: (R13c3 and later): 2nd header (special table, no sentinels)
    *         4: optional: MEASUREMENT
    *         5: optional: AuxHeader (no sentinels, since r13c3
    */
   for (j = 0; j < dwg->header.numsections; j++)
     {
       dwg->header.section[j].number = bit_read_RC (dat);
       dwg->header.section[j].address = bit_read_RL (dat);
       dwg->header.section[j].size = bit_read_RL (dat);
       if (j < 6)
         strcpy (dwg->header.section[j].name, section_names[j]);
       LOG_TRACE ("section[%u].number:  %4d [RC] %s\n", j,
                  (int)dwg->header.section[j].number, dwg->header.section[j].name)
       LOG_TRACE ("section[%u].address: %4u [RL]\n", j,
                  (unsigned)dwg->header.section[j].address)
       LOG_TRACE ("section[%u].size:    %4u [RL]\n", j,
                  (unsigned)dwg->header.section[j].size);
       if (dwg->header.section[j].address + dwg->header.section[j].size > dat->size)
         {
           LOG_ERROR ("section[%u] address or size overflow: %lu + %u > %lu", j,
                      dwg->header.section[j].address, dwg->header.section[j].size,
                      dat->size);
           return DWG_ERR_INVALIDDWG;
         }
     }
 
   // Check CRC up to now (note: ODA has a bug here)
   crc2 = bit_calc_CRC (0xC0C1, &dat->chain[0], dat->byte); // from 0 to now
   crc = bit_read_RS (dat);
   LOG_TRACE ("crc: %04X [RSx] from 0-%lu\n", crc, dat->byte - 2);
   if (crc != crc2)
     {
       LOG_ERROR ("Header CRC mismatch %04X <=> %04X", crc, crc2);
       error |= DWG_ERR_WRONGCRC;
     }
 
   if (bit_search_sentinel (dat, dwg_sentinel (DWG_SENTINEL_HEADER_END)))
     LOG_TRACE ("         HEADER (end):    %4u\n", (unsigned)dat->byte)
 
   /*-------------------------------------------------------------------------
    * Section 5 AuxHeader
    * R2000+, mostly redundant file header information
    */
   if (dwg->header.numsections == 6 && dwg->header.version >= R_13c3)
     {
       int i;
       Dwg_AuxHeader *_obj = &dwg->auxheader;
       Bit_Chain *hdl_dat = dat;
       BITCODE_BL end_address
           = dwg->header.section[SECTION_AUXHEADER_R2000].address
             + dwg->header.section[SECTION_AUXHEADER_R2000].size;
 
       obj = NULL;
       dat->byte = dwg->header.section[SECTION_AUXHEADER_R2000].address;
       LOG_TRACE ("\n"
                  "=======> AuxHeader:       %4u\n", (unsigned)dat->byte)
       LOG_TRACE ("         AuxHeader (end): %4u\n", (unsigned)end_address)
       if (dat->size < end_address)
         {
           LOG_ERROR ("Invalid AuxHeader size: buffer overflow")
           error |= DWG_ERR_SECTIONNOTFOUND;
         }
       else
         {
           BITCODE_BL old_size = dat->size;
           BITCODE_BL vcount;
           dat->size = end_address;
           // clang-format off
           #include "auxheader.spec"
           // clang-format on
           dat->size = old_size;
         }
     }
 
   /*-------------------------------------------------------------------------
    * Picture (Pre-R13C3)
    */
 
   if (bit_search_sentinel (dat, dwg_sentinel (DWG_SENTINEL_THUMBNAIL_BEGIN)))
     {
       unsigned long int start_address;
 
       dat->bit = 0;
       start_address = dat->byte;
       LOG_TRACE ("\n=======> Thumbnail:       %4u\n", (unsigned int)start_address - 16);
       if (dwg->header.thumbnail_address
           && dwg->header.thumbnail_address != dat->byte - 16)
         LOG_WARN ("Illegal HEADER.thumbnail_address: %i != %lu",
                   dwg->header.thumbnail_address, dat->byte - 16)
       dwg->header.thumbnail_address = dat->byte - 16;
       if (bit_search_sentinel (dat, dwg_sentinel (DWG_SENTINEL_THUMBNAIL_END)))
         {
           BITCODE_RL bmpsize;
           LOG_TRACE ("         Thumbnail (end): %4u\n",
                      (unsigned int)dat->byte)
           if ((dat->byte - 16) < start_address)
             {
               LOG_ERROR ("Illegal HEADER.thumbnail_size: %lu < %lu",
                          dat->byte - 16, start_address);
             }
           else
             {
               assert ((dat->byte - 16) >= start_address);
               dwg->thumbnail.size = (dat->byte - 16) - start_address;
               dwg->thumbnail.chain
                 = (unsigned char *)calloc (dwg->thumbnail.size, 1);
               dwg->thumbnail.byte = 0;
               if (!dwg->thumbnail.chain)
                 {
                   LOG_ERROR ("Out of memory");
                   return DWG_ERR_OUTOFMEM;
                 }
               memcpy (dwg->thumbnail.chain, &dat->chain[start_address],
                       dwg->thumbnail.size);
               dat->byte += dwg->thumbnail.size;
               dwg_bmp (dwg, &bmpsize);
               if (bmpsize > dwg->thumbnail.size)
                 LOG_ERROR ("BMP size overflow: %i > %lu\n", bmpsize, dwg->thumbnail.size)
             }
         }
     }
 
   /*-------------------------------------------------------------------------
    * Header Variables, section 0
    */
 
   LOG_INFO ("\n"
             "=======> Header Variables:         %4u\n",
             (unsigned int)dwg->header.section[SECTION_HEADER_R13].address)
   LOG_INFO ("         Header Variables   (end): %4u\n",
             (unsigned int)(dwg->header.section[SECTION_HEADER_R13].address
                            + dwg->header.section[SECTION_HEADER_R13].size))
   if (dwg->header.section[SECTION_HEADER_R13].address < 58
       || dwg->header.section[SECTION_HEADER_R13].address
                  + dwg->header.section[SECTION_HEADER_R13].size
              > dat->size)
     {
       LOG_ERROR ("Invalid Header section, skipped")
       error |= DWG_ERR_SECTIONNOTFOUND;
       goto classes_section;
     }
   // after sentinel
   dat->byte = pvz = dwg->header.section[SECTION_HEADER_R13].address + 16;
   // LOG_HANDLE ("@ 0x%lx.%lu\n", bit_position (dat)/8, bit_position (dat)%8);
   dwg->header_vars.size = bit_read_RL (dat);
   LOG_TRACE ("         Length: " FORMAT_RL " [RL]\n", dwg->header_vars.size)
   dat->bit = 0;
 
   error |= dwg_decode_header_variables (dat, dat, dat, dwg);
 
   // LOG_HANDLE ("@ 0x%lx.%lu\n", bit_position (dat)/8, bit_position (dat)%8);
   // check slack
   if (dat->bit || dat->byte != pvz + dwg->header_vars.size + 4)
     {
       unsigned char r = 8 - dat->bit;
       LOG_HANDLE (" padding: %ld byte, %d bits\n",
                   pvz + dwg->header_vars.size + 4 - dat->byte, r);
     }
   // Check CRC, hardcoded to 2 before end sentinel
   LOG_HANDLE (" crc pos: %lu\n", pvz + dwg->header_vars.size + 4);
   bit_set_position (dat, (pvz + dwg->header_vars.size + 4) * 8);
   crc = bit_read_RS (dat);
   LOG_TRACE ("crc: %04X [RSx] from %lu-%lu=%ld\n", crc, pvz, dat->byte - 2,
              dat->byte - 2 - pvz);
   crc2 = 0;
   // LOG_HANDLE ("@ 0x%lx\n", bit_position (dat)/8);
   // LOG_HANDLE ("HEADER_R13.address of size 0x%lx\n", pvz);
   // LOG_HANDLE ("HEADER_R13.size %d\n",
   // dwg->header.section[SECTION_HEADER_R13].size);
   // typical sizes: 400-599
   if (dwg->header.section[SECTION_HEADER_R13].size > 34
       && dwg->header.section[SECTION_HEADER_R13].size < 0xfff
       && pvz < dat->byte
       && pvz + dwg->header.section[SECTION_HEADER_R13].size < dat->size)
     {
       // not dwg->header_vars.size, rather -4 (minus the section_size).
       // section_size + data, i.e. minus the 2x sentinel (32) + crc itself (2)
       // if we would include the crc we would always get 0000
       BITCODE_RL crc_size = dwg->header.section[SECTION_HEADER_R13].size - 34;
       LOG_HANDLE (" calc Header crc size: " FORMAT_RL "\n", crc_size);
       crc2 = bit_calc_CRC (0xC0C1, &dat->chain[pvz], crc_size);
     }
   if (crc != crc2)
     {
       LOG_WARN ("Header Section[%ld] CRC mismatch %04X <=> %04X",
                 (long)dwg->header.section[SECTION_HEADER_R13].number, crc,
                 crc2);
       error |= DWG_ERR_WRONGCRC;
     }
 
   /*-------------------------------------------------------------------------
    * Classes, section 1
    */
