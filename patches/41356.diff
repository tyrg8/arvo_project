commit ba3e2927065463a70c4c145137a24e2226316b76
Author: Daniel Baston <dbaston@gmail.com>
Date:   Wed Nov 9 12:13:03 2022 -0500

    Fix double-free when Node::add throws (#730)
    
    Fixes https://github.com/libgeos/geos/issues/606

diff --git a/include/geos/geomgraph/NodeMap.h b/include/geos/geomgraph/NodeMap.h
index 1279a6375..a35ab52e3 100644
--- a/include/geos/geomgraph/NodeMap.h
+++ b/include/geos/geomgraph/NodeMap.h
@@ -51,71 +51,80 @@ class GEOS_DLL NodeMap {
 public:
 
     typedef std::map<geom::Coordinate*, std::unique_ptr<Node>, geom::CoordinateLessThen> container;
 
     typedef container::iterator iterator;
 
     typedef container::const_iterator const_iterator;
 
     container nodeMap;
 
     const NodeFactory& nodeFact;
 
     /// \brief
     /// NodeMap will keep a reference to the NodeFactory,
     /// keep it alive for the whole NodeMap lifetime
     NodeMap(const NodeFactory& newNodeFact);
 
     virtual ~NodeMap();
 
     Node* addNode(const geom::Coordinate& coord);
 
     Node* addNode(Node* n);
 
+    /// \brief
+    /// Adds a node for the start point of this EdgeEnd
+    /// (if one does not already exist in this map).
+    /// Adds the EdgeEnd to the (possibly new) node.
+    ///
+    /// If ownership of the EdgeEnd should be transferred
+    /// to the Node, use the unique_ptr overload instead.
     void add(EdgeEnd* e);
 
+    void add(std::unique_ptr<EdgeEnd>&& e);
+
     Node* find(const geom::Coordinate& coord) const;
 
     const_iterator
     begin() const
     {
         return nodeMap.begin();
     }
 
     const_iterator
     end() const
     {
         return nodeMap.end();
     }
 
     iterator
     begin()
     {
         return nodeMap.begin();
     }
 
     iterator
     end()
     {
         return nodeMap.end();
     }
 
     void getBoundaryNodes(uint8_t geomIndex,
                           std::vector<Node*>& bdyNodes) const;
 
     std::string print() const;
 
     void
     testInvariant()
     {
 #ifndef NDEBUG
         // Each Coordinate key is a pointer inside the Node value
         for(const auto& nodeIt: nodeMap) {
             const auto* n = nodeIt.second.get();
             geom::Coordinate* c = const_cast<geom::Coordinate*>(
                                       &(n->getCoordinate())
                                   );
             assert(nodeIt.first == c);
             (void)c;
         }
 #endif
     }
diff --git a/include/geos/operation/relate/EdgeEndBuilder.h b/include/geos/operation/relate/EdgeEndBuilder.h
index 7e57d1a3a..a6c414338 100644
--- a/include/geos/operation/relate/EdgeEndBuilder.h
+++ b/include/geos/operation/relate/EdgeEndBuilder.h
@@ -1,25 +1,26 @@
 /**********************************************************************
  *
  * GEOS - Geometry Engine Open Source
  * http://geos.osgeo.org
  *
  * Copyright (C) 2006 Refractions Research Inc.
  *
  * This is free software; you can redistribute and/or modify it under
  * the terms of the GNU Lesser General Public Licence as published
  * by the Free Software Foundation.
  * See the COPYING file for more information.
  *
  **********************************************************************
  *
  * Last port: operation/relate/EdgeEndBuilder.java rev. 1.12 (JTS-1.10)
  *
  **********************************************************************/
 
 #pragma once
 
 #include <geos/export.h>
 
+#include <memory>
 #include <vector>
 
 // Forward declarations
@@ -48,22 +49,22 @@ class GEOS_DLL EdgeEndBuilder {
 public:
     EdgeEndBuilder() {}
 
-    std::vector<geomgraph::EdgeEnd*> computeEdgeEnds(std::vector<geomgraph::Edge*>* edges);
-    void computeEdgeEnds(geomgraph::Edge* edge, std::vector<geomgraph::EdgeEnd*>* l);
+    std::vector<std::unique_ptr<geomgraph::EdgeEnd>> computeEdgeEnds(std::vector<geomgraph::Edge*>* edges);
+    void computeEdgeEnds(geomgraph::Edge* edge, std::vector<std::unique_ptr<geomgraph::EdgeEnd>>& l);
 
 protected:
 
     void createEdgeEndForPrev(geomgraph::Edge* edge,
-                              std::vector<geomgraph::EdgeEnd*>* l,
+                              std::vector<std::unique_ptr<geomgraph::EdgeEnd>>& l,
                               const geomgraph::EdgeIntersection* eiCurr,
                               const geomgraph::EdgeIntersection* eiPrev);
 
     void createEdgeEndForNext(geomgraph::Edge* edge,
-                              std::vector<geomgraph::EdgeEnd*>* l,
+                              std::vector<std::unique_ptr<geomgraph::EdgeEnd>>& l,
                               const geomgraph::EdgeIntersection* eiCurr,
                               const geomgraph::EdgeIntersection* eiNext);
 };
 
 } // namespace geos:operation:relate
 } // namespace geos:operation
 } // namespace geos
diff --git a/include/geos/operation/relate/RelateComputer.h b/include/geos/operation/relate/RelateComputer.h
index dfdcbd4b8..a232534d2 100644
--- a/include/geos/operation/relate/RelateComputer.h
+++ b/include/geos/operation/relate/RelateComputer.h
@@ -82,104 +82,104 @@ public:
     std::unique_ptr<geom::IntersectionMatrix> computeIM();
 private:
 
     algorithm::LineIntersector li;
 
     algorithm::PointLocator ptLocator;
 
     /// the arg(s) of the operation
     std::vector<geomgraph::GeometryGraph*>* arg;
 
     geomgraph::NodeMap nodes;
 
     /// this intersection matrix will hold the results compute for the relate
     std::unique_ptr<geom::IntersectionMatrix> im;
 
     std::vector<geomgraph::Edge*> isolatedEdges;
 
     /// the intersection point found (if any)
     geom::Coordinate invalidPoint;
 
-    void insertEdgeEnds(std::vector<geomgraph::EdgeEnd*>* ee);
+    void insertEdgeEnds(std::vector<std::unique_ptr<geomgraph::EdgeEnd>>& ee);
 
     void computeProperIntersectionIM(
         geomgraph::index::SegmentIntersector* intersector,
         geom::IntersectionMatrix* imX);
 
     void copyNodesAndLabels(uint8_t argIndex);
     void computeIntersectionNodes(uint8_t argIndex);
     void labelIntersectionNodes(uint8_t argIndex);
 
     /**
      * If the Geometries are disjoint, we need to enter their dimension and
      * boundary dimension in the Ext rows in the IM
      */
     void computeDisjointIM(geom::IntersectionMatrix* imX,
                            const algorithm::BoundaryNodeRule& boundaryNodeRule);
 
     void labelNodeEdges();
 
     /**
      * update the IM with the sum of the IMs for each component
      */
     void updateIM(geom::IntersectionMatrix& imX);
 
     /**
      * Compute the IM entry for the intersection of the boundary
      * of a geometry with the Exterior.
      * This is the nominal dimension of the boundary
      * unless the boundary is empty, in which case it is {@link Dimension#FALSE}.
      * For linear geometries the Boundary Node Rule determines
      * whether the boundary is empty.
      *
      * @param geom the geometry providing the boundary
      * @param boundaryNodeRule  the Boundary Node Rule to use
      * @return the IM dimension entry
      */
     static int getBoundaryDim(const geom::Geometry& geom,
                               const algorithm::BoundaryNodeRule& boundaryNodeRule);
 
     /**
      * Processes isolated edges by computing their labelling and adding them
      * to the isolated edges list.
      * Isolated edges are guaranteed not to touch the boundary of the target
      * (since if they
      * did, they would have caused an intersection to be computed and hence would
      * not be isolated)
      */
     void labelIsolatedEdges(uint8_t thisIndex, uint8_t targetIndex);
 
     /**
      * Label an isolated edge of a graph with its relationship to the target
      * geometry.
      * If the target has dim 2 or 1, the edge can either be in the interior
      * or the exterior.
      * If the target has dim 0, the edge must be in the exterior
      */
     void labelIsolatedEdge(geomgraph::Edge* e, uint8_t targetIndex,
                            const geom::Geometry* target);
 
     /**
      * Isolated nodes are nodes whose labels are incomplete
      * (e.g. the location for one Geometry is null).
      * This is the case because nodes in one graph which don't intersect
      * nodes in the other are not completely labelled by the initial process
      * of adding nodes to the nodeList.
      * To complete the labelling we need to check for nodes that lie in the
      * interior of edges, and in the interior of areas.
      */
     void labelIsolatedNodes();
 
     /**
      * Label an isolated node with its relationship to the target geometry.
      */
     void labelIsolatedNode(geomgraph::Node* n, uint8_t targetIndex);
 };
 
 
 } // namespace geos:operation:relate
 } // namespace geos:operation
 } // namespace geos
 
 #ifdef _MSC_VER
 #pragma warning(pop)
 #endif
diff --git a/include/geos/operation/relate/RelateNodeGraph.h b/include/geos/operation/relate/RelateNodeGraph.h
index 257037ef4..d409d9712 100644
--- a/include/geos/operation/relate/RelateNodeGraph.h
+++ b/include/geos/operation/relate/RelateNodeGraph.h
@@ -69,19 +69,19 @@ class GEOS_DLL RelateNodeGraph {
 public:
 
     RelateNodeGraph();
 
     virtual ~RelateNodeGraph();
 
     geomgraph::NodeMap::container& getNodeMap();
 
     void build(geomgraph::GeometryGraph* geomGraph);
 
     void computeIntersectionNodes(geomgraph::GeometryGraph* geomGraph,
                                   uint8_t argIndex);
 
     void copyNodesAndLabels(geomgraph::GeometryGraph* geomGraph, uint8_t argIndex);
 
-    void insertEdgeEnds(std::vector<geomgraph::EdgeEnd*>* ee);
+    void insertEdgeEnds(std::vector<std::unique_ptr<geomgraph::EdgeEnd>>& ee);
 
 private:
 
diff --git a/src/geomgraph/Node.cpp b/src/geomgraph/Node.cpp
index cabb9b89c..211f7f96b 100644
--- a/src/geomgraph/Node.cpp
+++ b/src/geomgraph/Node.cpp
@@ -133,33 +133,32 @@ Node::isIncidentEdgeInResult() const
 }
 
 void
-Node::add(EdgeEnd* p_e)
+Node::add(EdgeEnd* e)
 {
-    std::unique_ptr<EdgeEnd> e(p_e);
     assert(e);
 #if GEOS_DEBUG
     std::cerr << "[" << this << "] Node::add(" << e->print() << ")" << std::endl;
 #endif
     // Assert: start pt of e is equal to node point
     if(! e->getCoordinate().equals2D(coord)) {
         std::stringstream ss;
         ss << "EdgeEnd with coordinate " << e->getCoordinate()
            << " invalid for node " << coord;
         throw util::IllegalArgumentException(ss.str());
     }
 
     // It seems it's legal for edges to be NULL
     // we'd not be honouring the promise of adding
     // an EdgeEnd in this case, though ...
     assert(edges);
     //if (edges==NULL) return;
 
-    edges->insert(e.release());
-    p_e->setNode(this);
+    edges->insert(e);
+    e->setNode(this);
 #if COMPUTE_Z
-    addZ(p_e->getCoordinate().z);
+    addZ(e->getCoordinate().z);
 #endif
     testInvariant();
 }
 
 /*public*/
diff --git a/src/geomgraph/NodeMap.cpp b/src/geomgraph/NodeMap.cpp
index c7a001268..331fbaa98 100644
--- a/src/geomgraph/NodeMap.cpp
+++ b/src/geomgraph/NodeMap.cpp
@@ -111,10 +111,17 @@ void
 NodeMap::add(EdgeEnd* e)
 {
     Coordinate& p = e->getCoordinate();
     Node* n = addNode(p);
     n->add(e);
 }
 
+void
+NodeMap::add(std::unique_ptr<EdgeEnd>&& e)
+{
+    add(e.get());
+    e.release();
+}
+
 /*
  * @return the node if found; null otherwise
  */
diff --git a/src/operation/relate/EdgeEndBuilder.cpp b/src/operation/relate/EdgeEndBuilder.cpp
index 586109292..d952dc103 100644
--- a/src/operation/relate/EdgeEndBuilder.cpp
+++ b/src/operation/relate/EdgeEndBuilder.cpp
@@ -1,28 +1,29 @@
 /**********************************************************************
  *
  * GEOS - Geometry Engine Open Source
  * http://geos.osgeo.org
  *
  * Copyright (C) 2001-2002 Vivid Solutions Inc.
  * Copyright (C) 2005 Refractions Research Inc.
  *
  * This is free software; you can redistribute and/or modify it under
  * the terms of the GNU Lesser General Public Licence as published
  * by the Free Software Foundation.
  * See the COPYING file for more information.
  *
  **********************************************************************
  *
  * Last port: operation/relate/EdgeEndBuilder.java rev. 1.12 (JTS-1.10)
  *
  **********************************************************************/
 
 #include <geos/operation/relate/EdgeEndBuilder.h>
 #include <geos/geom/Coordinate.h>
 #include <geos/geomgraph/Edge.h>
 #include <geos/geomgraph/EdgeEnd.h>
 #include <geos/geomgraph/EdgeIntersectionList.h>
 #include <geos/geomgraph/Label.h>
+#include <geos/util.h>
 
 #include <vector>
 
@@ -33,116 +34,117 @@ namespace geos {
 namespace operation { // geos.operation
 namespace relate { // geos.operation.relate
 
-std::vector<EdgeEnd*>
+std::vector<std::unique_ptr<EdgeEnd>>
 EdgeEndBuilder::computeEdgeEnds(std::vector<Edge*>* edges)
 {
-    std::vector<EdgeEnd*> l;
+    std::vector<std::unique_ptr<EdgeEnd>> l;
     for(Edge* e : *edges) {
-        computeEdgeEnds(e, &l);
+        computeEdgeEnds(e, l);
     }
     return l;
 }
 
 /**
  * Creates stub edges for all the intersections in this
  * Edge (if any) and inserts them into the graph.
  */
 void
-EdgeEndBuilder::computeEdgeEnds(Edge* edge, std::vector<EdgeEnd*>* l)
+EdgeEndBuilder::computeEdgeEnds(Edge* edge, std::vector<std::unique_ptr<EdgeEnd>>& l)
 {
     EdgeIntersectionList& eiList = edge->getEdgeIntersectionList();
     //Debug.print(eiList);
     // ensure that the list has entries for the first and last point of the edge
     eiList.addEndpoints();
 
     EdgeIntersectionList::const_iterator it = eiList.begin();
     // no intersections, so there is nothing to do
     if(it == eiList.end()) {
         return;
     }
 
     const EdgeIntersection* eiPrev = nullptr;
     const EdgeIntersection* eiCurr = nullptr;
 
     const EdgeIntersection* eiNext = &*it;
     ++it;
     do {
         eiPrev = eiCurr;
         eiCurr = eiNext;
         eiNext = nullptr;
         if(it != eiList.end()) {
             eiNext = &*it;
             ++it;
         }
         if(eiCurr != nullptr) {
             createEdgeEndForPrev(edge, l, eiCurr, eiPrev);
             createEdgeEndForNext(edge, l, eiCurr, eiNext);
         }
     }
     while(eiCurr != nullptr);
 }
 
 /**
  * Create a EdgeStub for the edge before the intersection eiCurr.
  * The previous intersection is provided
  * in case it is the endpoint for the stub edge.
  * Otherwise, the previous point from the parent edge will be the endpoint.
  *
  * eiCurr will always be an EdgeIntersection, but eiPrev may be null.
  */
 void
-EdgeEndBuilder::createEdgeEndForPrev(Edge* edge, std::vector<EdgeEnd*>* l,
+EdgeEndBuilder::createEdgeEndForPrev(Edge* edge, std::vector<std::unique_ptr<EdgeEnd>>& l,
                                      const EdgeIntersection* eiCurr, const EdgeIntersection* eiPrev)
 {
     auto iPrev = eiCurr->segmentIndex;
     if(eiCurr->dist == 0.0) {
         // if at the start of the edge there is no previous edge
         if(iPrev == 0) {
             return;
         }
         iPrev--;
     }
     Coordinate pPrev(edge->getCoordinate(iPrev));
     // if prev intersection is past the previous vertex, use it instead
     if(eiPrev != nullptr && eiPrev->segmentIndex >= iPrev) {
         pPrev = eiPrev->coord;
     }
     Label label(edge->getLabel());
     // since edgeStub is oriented opposite to it's parent edge, have to flip sides for edge label
     label.flip();
-    EdgeEnd* e = new EdgeEnd(edge, eiCurr->coord, pPrev, label);
+    auto e = detail::make_unique<EdgeEnd>(edge, eiCurr->coord, pPrev, label);
     //e.print(System.out);  System.out.println();
-    l->push_back(e);
+    l.push_back(std::move(e));
 }
 
 /**
  * Create a StubEdge for the edge after the intersection eiCurr.
  * The next intersection is provided
  * in case it is the endpoint for the stub edge.
  * Otherwise, the next point from the parent edge will be the endpoint.
  *
  * eiCurr will always be an EdgeIntersection, but eiNext may be null.
  */
 void
-EdgeEndBuilder::createEdgeEndForNext(Edge* edge, std::vector<EdgeEnd*>* l,
+EdgeEndBuilder::createEdgeEndForNext(Edge* edge, std::vector<std::unique_ptr<EdgeEnd>>& l,
                                      const EdgeIntersection* eiCurr, const EdgeIntersection* eiNext)
 {
     std::size_t iNext = eiCurr->segmentIndex + 1;
     // if there is no next edge there is nothing to do
     if(iNext >= edge->getNumPoints() && eiNext == nullptr) {
         return;
     }
     Coordinate pNext(edge->getCoordinate(iNext));
     // if the next intersection is in the same segment as the current, use it as the endpoint
     if(eiNext != nullptr && eiNext->segmentIndex == eiCurr->segmentIndex) {
         pNext = eiNext->coord;
     }
-    EdgeEnd* e = new EdgeEnd(edge, eiCurr->coord, pNext, edge->getLabel());
+
+    auto e = detail::make_unique<EdgeEnd>(edge, eiCurr->coord, pNext, edge->getLabel());
     //Debug.println(e);
-    l->push_back(e);
+    l.push_back(std::move(e));
 }
 
 } // namespace geos.operation.relate
 } // namespace geos.operation
 } // namespace geos
 
diff --git a/src/operation/relate/RelateComputer.cpp b/src/operation/relate/RelateComputer.cpp
index 7885c3a68..bbdd255fe 100644
--- a/src/operation/relate/RelateComputer.cpp
+++ b/src/operation/relate/RelateComputer.cpp
@@ -72,173 +72,173 @@ std::unique_ptr<IntersectionMatrix>
 RelateComputer::computeIM()
 {
     // since Geometries are finite and embedded in a 2-D space, the EE element must always be 2
     im->set(Location::EXTERIOR, Location::EXTERIOR, 2);
     // if the Geometries don't overlap there is nothing to do
     const Envelope* e1 = (*arg)[0]->getGeometry()->getEnvelopeInternal();
     const Envelope* e2 = (*arg)[1]->getGeometry()->getEnvelopeInternal();
     if(!e1->intersects(e2)) {
         computeDisjointIM(im.get(), (*arg)[0]->getBoundaryNodeRule());
         return std::move(im);
     }
 
 #if GEOS_DEBUG
     std::cerr << "RelateComputer::computeIM: "
               << "computing self nodes 1"
               << std::endl;
 #endif
 
     std::unique_ptr<SegmentIntersector> si1(
         (*arg)[0]->computeSelfNodes(&li, false)
     );
 
     GEOS_CHECK_FOR_INTERRUPTS();
 
 #if GEOS_DEBUG
     std::cerr << "RelateComputer::computeIM: "
               << "computing self nodes 2"
               << std::endl;
 #endif
 
     std::unique_ptr<SegmentIntersector> si2(
         (*arg)[1]->computeSelfNodes(&li, false)
     );
 
     GEOS_CHECK_FOR_INTERRUPTS();
 
 #if GEOS_DEBUG
     std::cerr << "RelateComputer::computeIM: "
               << "computing edge intersections"
               << std::endl;
 #endif
 
     // compute intersections between edges of the two input geometries
     std::unique_ptr< SegmentIntersector> intersector(
         (*arg)[0]->computeEdgeIntersections((*arg)[1], &li, false)
     );
 
     GEOS_CHECK_FOR_INTERRUPTS();
 
 #if GEOS_DEBUG
     std::cerr << "RelateComputer::computeIM: "
               << "copying intersection nodes"
               << std::endl;
 #endif
 
     computeIntersectionNodes(0);
     computeIntersectionNodes(1);
 
     GEOS_CHECK_FOR_INTERRUPTS();
 
 #if GEOS_DEBUG
     std::cerr << "RelateComputer::computeIM: "
               << "copying nodes and labels"
               << std::endl;
 #endif
 
     GEOS_CHECK_FOR_INTERRUPTS();
 
     /*
      * Copy the labelling for the nodes in the parent Geometries.
      * These override any labels determined by intersections
      * between the geometries.
      */
     copyNodesAndLabels(0);
     copyNodesAndLabels(1);
 
     GEOS_CHECK_FOR_INTERRUPTS();
 
     /*
      * complete the labelling for any nodes which only have a
      * label for a single geometry
      */
     //Debug.addWatch(nodes.find(new Coordinate(110, 200)));
     //Debug.printWatch();
 #if GEOS_DEBUG
     std::cerr << "RelateComputer::computeIM: "
               << "labeling isolated nodes"
               << std::endl;
 #endif
     labelIsolatedNodes();
     //Debug.printWatch();
 
 #if GEOS_DEBUG
     std::cerr << "RelateComputer::computeIM: "
               << "computing proper intersection matrix"
               << std::endl;
 #endif
 
     /*
      * If a proper intersection was found, we can set a lower bound
      * on the IM.
      */
     computeProperIntersectionIM(intersector.get(), im.get());
 
 #if GEOS_DEBUG
     std::cerr << "RelateComputer::computeIM: "
               << "computing improper intersections"
               << std::endl;
 #endif
 
     /*
      * Now process improper intersections
      * (eg where one or other of the geometrys has a vertex at the
      * intersection point)
      * We need to compute the edge graph at all nodes to determine
      * the IM.
      */
     // build EdgeEnds for all intersections
     EdgeEndBuilder eeBuilder;
-    std::vector<EdgeEnd*> ee0 = eeBuilder.computeEdgeEnds((*arg)[0]->getEdges());
-    insertEdgeEnds(&ee0);
-    std::vector<EdgeEnd*> ee1 = eeBuilder.computeEdgeEnds((*arg)[1]->getEdges());
+    auto&& ee0 = eeBuilder.computeEdgeEnds((*arg)[0]->getEdges());
+    insertEdgeEnds(ee0);
+    auto&& ee1 = eeBuilder.computeEdgeEnds((*arg)[1]->getEdges());
 
 #if GEOS_DEBUG
     std::cerr << "RelateComputer::computeIM: "
               << "inserting edge ends"
               << std::endl;
 #endif
 
-    insertEdgeEnds(&ee1);
+    insertEdgeEnds(ee1);
 
 #if GEOS_DEBUG
     std::cerr << "RelateComputer::computeIM: "
               << "labeling node edges"
               << std::endl;
 #endif
 
     labelNodeEdges();
 
     /*
      * Compute the labeling for isolated components.
      * Isolated components are components that do not touch any
      * other components in the graph.
      * They can be identified by the fact that they will
      * contain labels containing ONLY a single element, the one for
      * their parent geometry.
      * We only need to check components contained in the input graphs,
      * since isolated components will not have been replaced by new
      * components formed by intersections.
      */
 #if GEOS_DEBUG
     std::cerr << "RelateComputer::computeIM: "
               << "computing labeling for isolated components"
               << std::endl;
 #endif
     //debugPrintln("Graph A isolated edges - ");
     labelIsolatedEdges(0, 1);
     //debugPrintln("Graph B isolated edges - ");
     labelIsolatedEdges(1, 0);
     // update the IM from all components
     updateIM(*im);
     return std::move(im);
 }
 
 void
-RelateComputer::insertEdgeEnds(std::vector<EdgeEnd*>* ee)
+RelateComputer::insertEdgeEnds(std::vector<std::unique_ptr<EdgeEnd>>& ee)
 {
-    for(EdgeEnd* e: *ee) {
-        nodes.add(e);
+    for(auto& e : ee) {
+        nodes.add(std::move(e));
     }
 }
 
 /* private */
diff --git a/src/operation/relate/RelateNodeGraph.cpp b/src/operation/relate/RelateNodeGraph.cpp
index 78a6e2ce4..1ae35929c 100644
--- a/src/operation/relate/RelateNodeGraph.cpp
+++ b/src/operation/relate/RelateNodeGraph.cpp
@@ -60,29 +60,29 @@ void
 RelateNodeGraph::build(GeometryGraph* geomGraph)
 {
     // compute nodes for intersections between previously noded edges
     computeIntersectionNodes(geomGraph, 0);
 
     /*
      * Copy the labelling for the nodes in the parent Geometry.  These override
      * any labels determined by intersections.
      */
     copyNodesAndLabels(geomGraph, 0);
 
     /*
      * Build EdgeEnds for all intersections.
      */
     EdgeEndBuilder eeBuilder;
-    std::vector<EdgeEnd*> eeList = eeBuilder.computeEdgeEnds(geomGraph->getEdges());
-    insertEdgeEnds(&eeList);
+    auto&& eeList = eeBuilder.computeEdgeEnds(geomGraph->getEdges());
+    insertEdgeEnds(eeList);
 }
 
 /**
  * Insert nodes for all intersections on the edges of a Geometry.
  * Label the created nodes the same as the edge label if they do not
  * already have a label.
  * This allows nodes created by either self-intersections or
  * mutual intersections to be labelled.
  * Endpoint nodes will already be labelled from when they were inserted.
  *
  * Precondition: edge intersections have been computed.
  */
@@ -131,14 +131,14 @@ RelateNodeGraph::copyNodesAndLabels(GeometryGraph *geomGraph, uint8_t argIndex)
 }
 
 void
-RelateNodeGraph::insertEdgeEnds(std::vector<EdgeEnd*>* ee)
+RelateNodeGraph::insertEdgeEnds(std::vector<std::unique_ptr<EdgeEnd>>& ee)
 {
-    for(EdgeEnd* e: *ee) {
-        nodes->add(e);
+    for(auto& e : ee) {
+        nodes->add(std::move(e));
     }
 }
 
 } // namespace geos.operation.relate
 } // namespace geos.operation
 } // namespace geos
 
diff --git a/tests/unit/capi/GEOSUnionTest.cpp b/tests/unit/capi/GEOSUnionTest.cpp
index 2efceb22d..fa52a7d94 100644
--- a/tests/unit/capi/GEOSUnionTest.cpp
+++ b/tests/unit/capi/GEOSUnionTest.cpp
@@ -21,27 +21,46 @@ template<>
 void object::test<1>()
 {
     GEOSGeometry* a = GEOSGeomFromWKT("POINT (2 8)");
     GEOSGeometry* b = GEOSGeomFromWKT("POINT (3 9)");
 
     ensure(a);
     ensure(b);
 
     GEOSSetSRID(a, 4326);
 
     GEOSGeometry* result = GEOSUnion(a, b);
     GEOSGeometry* expected = GEOSGeomFromWKT("MULTIPOINT (2 8, 3 9)");
 
     ensure(result);
     ensure(expected);
 
     ensure_equals(GEOSEqualsExact(result, expected, 0), 1);
     ensure_equals(GEOSGetSRID(a), GEOSGetSRID(result));
 
     GEOSGeom_destroy(a);
     GEOSGeom_destroy(b);
     GEOSGeom_destroy(result);
     GEOSGeom_destroy(expected);
 }
 
+// Verify that no crash occurs in overlay with NaN coordinates
+// https://github.com/libgeos/geos/issues/606
+template<>
+template<>
+void object::test<2>()
+{
+    std::string wkb1 = "010100000000000000000000000000000000000840";
+    std::string wkb2 = "01020000000300000049544C553736090000FFFF544E494F500000000000000000FFFFFF2B2B2B2B2BFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFF";
+
+    geom1_ = GEOSGeomFromHEX_buf((unsigned char*) wkb1.c_str(), wkb1.size());
+    geom2_ = GEOSGeomFromHEX_buf((unsigned char*) wkb2.c_str(), wkb2.size());
+
+    ensure(geom1_);
+    ensure(geom2_);
+
+    GEOSGeometry* result = GEOSUnion(geom1_, geom2_);
+    (void) result; // no crash
+}
+
 } // namespace tut
 
