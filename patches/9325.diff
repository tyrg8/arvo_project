commit 09f2e173850e011e6390c49a4f761e87dd87ffba
Author: Tor Andersson <tor.andersson@artifex.com>
Date:   Tue Jul 10 12:58:57 2018 +0200

    Clean up null/range/endstream filter.
    
    Use separate functions to keep the code simpler.
    
    Use memmem to simplify and optimize search for 'endstream' token.
    
    Do not look for 'endobj' since that could cause a false positives in
    compressed object streams that have duff lengths.

diff --git a/include/mupdf/fitz/filter.h b/include/mupdf/fitz/filter.h
index bdce36e87..5dd136a16 100644
--- a/include/mupdf/fitz/filter.h
+++ b/include/mupdf/fitz/filter.h
@@ -12,12 +12,12 @@ typedef struct fz_jbig2_globals_s fz_jbig2_globals;
 typedef struct
 {
 	int64_t offset;
-	int len;
+	size_t length;
 } fz_range;
 
-fz_stream *fz_open_null_n(fz_context *ctx, fz_stream *chain, fz_range *ranges, int nranges);
-fz_stream *fz_open_null(fz_context *ctx, fz_stream *chain, int len, int64_t offset);
-fz_stream *fz_open_pdf_stream(fz_context *ctx, fz_stream *chain, int len, int64_t offset);
+fz_stream *fz_open_null_filter(fz_context *ctx, fz_stream *chain, int len, int64_t offset);
+fz_stream *fz_open_range_filter(fz_context *ctx, fz_stream *chain, fz_range *ranges, int nranges);
+fz_stream *fz_open_endstream_filter(fz_context *ctx, fz_stream *chain, int len, int64_t offset);
 fz_stream *fz_open_concat(fz_context *ctx, int max, int pad);
 void fz_concat_push_drop(fz_context *ctx, fz_stream *concat, fz_stream *chain); /* Ownership of chain is passed in */
 fz_stream *fz_open_arc4(fz_context *ctx, fz_stream *chain, unsigned char *key, unsigned keylen);
diff --git a/source/fitz/filter-basic.c b/source/fitz/filter-basic.c
index 6928ffff7..0713a62e7 100644
--- a/source/fitz/filter-basic.c
+++ b/source/fitz/filter-basic.c
@@ -1,213 +1,293 @@
 #include "mupdf/fitz.h"
 
 #include <string.h>
 
-/* Null filter copies a specified amount of data */
+/* The null filter reads a specified amount of data from the substream. */
 
 struct null_filter
+{
+	fz_stream *chain;
+	size_t remain;
+	int64_t offset;
+	unsigned char buffer[4096];
+};
+
+static int
+next_null(fz_context *ctx, fz_stream *stm, size_t max)
+{
+	struct null_filter *state = stm->state;
+	size_t n;
+
+	if (state->remain == 0)
+		return EOF;
+
+	fz_seek(ctx, state->chain, state->offset, 0);
+	n = fz_available(ctx, state->chain, max);
+	if (n == 0)
+		return EOF;
+	if (n > state->remain)
+		n = state->remain;
+	if (n > sizeof(state->buffer))
+		n = sizeof(state->buffer);
+
+	memcpy(state->buffer, state->chain->rp, n);
+	stm->rp = state->buffer;
+	stm->wp = stm->rp + n;
+	state->chain->rp += n;
+	state->remain -= n;
+	state->offset += n;
+	stm->pos += n;
+	return *stm->rp++;
+}
+
+static void
+close_null(fz_context *ctx, void *state_)
+{
+	struct null_filter *state = (struct null_filter *)state_;
+	fz_drop_stream(ctx, state->chain);
+	fz_free(ctx, state);
+}
+
+fz_stream *
+fz_open_null_filter(fz_context *ctx, fz_stream *chain, int len, int64_t offset)
+{
+	struct null_filter *state = fz_malloc_struct(ctx, struct null_filter);
+	state->chain = fz_keep_stream(ctx, chain);
+	state->remain = len;
+	state->offset = offset;
+	return fz_new_stream(ctx, state, next_null, close_null);
+}
+
+/* The range filter copies data from specified ranges of the chained stream */
+
+struct range_filter
 {
 	fz_stream *chain;
 	fz_range *ranges;
-	int look_for_endstream;
 	int nranges;
 	int next_range;
 	size_t remain;
-	unsigned int extras;
-	unsigned int size;
 	int64_t offset;
 	unsigned char buffer[4096];
 };
 
 static int
-next_null(fz_context *ctx, fz_stream *stm, size_t max)
+next_range(fz_context *ctx, fz_stream *stm, size_t max)
 {
-	struct null_filter *state = stm->state;
-	size_t n, i, nbytes_in_buffer;
-	const char *rp;
-	unsigned int size;
+	struct range_filter *state = stm->state;
+	size_t n;
 
 	while (state->remain == 0 && state->next_range < state->nranges)
 	{
 		fz_range *range = &state->ranges[state->next_range++];
-		state->remain = range->len;
+		state->remain = range->length;
 		state->offset = range->offset;
 	}
 
 	if (state->remain == 0)
-		goto maybe_ended;
+		return EOF;
 	fz_seek(ctx, state->chain, state->offset, 0);
 	n = fz_available(ctx, state->chain, max);
 	if (n > state->remain)
 		n = state->remain;
 	if (n > sizeof(state->buffer))
 		n = sizeof(state->buffer);
 	memcpy(state->buffer, state->chain->rp, n);
 	stm->rp = state->buffer;
 	stm->wp = stm->rp + n;
 	if (n == 0)
-		goto maybe_ended;
+		return EOF;
 	state->chain->rp += n;
 	state->remain -= n;
-	state->offset += (int64_t)n;
-	stm->pos += (int64_t)n;
+	state->offset += n;
+	stm->pos += n;
 	return *stm->rp++;
+}
 
-maybe_ended:
-	if (state->look_for_endstream == 0)
+static void
+close_range(fz_context *ctx, void *state_)
+{
+	struct range_filter *state = (struct range_filter *)state_;
+	fz_drop_stream(ctx, state->chain);
+	fz_free(ctx, state->ranges);
+	fz_free(ctx, state);
+}
+
+fz_stream *
+fz_open_range_filter(fz_context *ctx, fz_stream *chain, fz_range *ranges, int nranges)
+{
+	struct range_filter *state = NULL;
+
+	state = fz_malloc_struct(ctx, struct range_filter);
+	fz_try(ctx)
+	{
+		if (nranges > 0)
+		{
+			state->ranges = fz_calloc(ctx, nranges, sizeof(*ranges));
+			memcpy(state->ranges, ranges, nranges * sizeof(*ranges));
+			state->nranges = nranges;
+			state->next_range = 1;
+			state->remain = ranges[0].length;
+			state->offset = ranges[0].offset;
+		}
+		else
+		{
+			state->ranges = NULL;
+			state->nranges = 0;
+			state->next_range = 1;
+			state->remain = 0;
+			state->offset = 0;
+		}
+		state->chain = fz_keep_stream(ctx, chain);
+	}
+	fz_catch(ctx)
+	{
+		fz_free(ctx, state->ranges);
+		fz_free(ctx, state);
+		fz_rethrow(ctx);
+	}
+
+	return fz_new_stream(ctx, state, next_range, close_range);
+}
+
+/*
+ * The endstream filter reads a PDF substream, and starts to look for an 'endstream' token
+ * after the specified length.
+ */
+
+#define END_CHECK_SIZE 32
+
+struct endstream_filter
+{
+	fz_stream *chain;
+	size_t remain, extras, size;
+	int64_t offset;
+	int warned;
+	unsigned char buffer[4096];
+};
+
+static int
+next_endstream(fz_context *ctx, fz_stream *stm, size_t max)
+{
+	struct endstream_filter *state = stm->state;
+	size_t n, nbytes_in_buffer, size;
+	unsigned char *rp;
+
+	if (state->remain == 0)
+		goto look_for_endstream;
+
+	fz_seek(ctx, state->chain, state->offset, 0);
+	n = fz_available(ctx, state->chain, max);
+	if (n == 0)
 		return EOF;
+	if (n > state->remain)
+		n = state->remain;
+	if (n > sizeof(state->buffer))
+		n = sizeof(state->buffer);
+	memcpy(state->buffer, state->chain->rp, n);
+	stm->rp = state->buffer;
+	stm->wp = stm->rp + n;
+	state->chain->rp += n;
+	state->remain -= n;
+	state->offset += n;
+	stm->pos += n;
+	return *stm->rp++;
 
+look_for_endstream:
 	/* We should distrust the stream length, and check for end
 	 * marker before terminating the stream - this is to cope
 	 * with files with duff "Length" values. */
-	fz_seek(ctx, state->chain, state->offset, 0);
 
 	/* Move any data left over in our buffer down to the start.
 	 * Ordinarily, there won't be any, but this allows for the
 	 * case where we were part way through matching a stream end
 	 * marker when the buffer filled before. */
 	nbytes_in_buffer = state->extras;
 	if (nbytes_in_buffer)
 		memmove(state->buffer, stm->rp, nbytes_in_buffer);
 	stm->rp = state->buffer;
 	stm->wp = stm->rp + nbytes_in_buffer;
 
 	/* In most sane files, we'll get "\nendstream" instantly. We
 	 * should only need (say) 32 bytes to be sure. For crap files
 	 * where we overread regularly, don't harm performance by
 	 * working in small chunks. */
-	state->size *= 2;
-	if (state->size > sizeof(state->buffer))
-		state->size = sizeof(state->buffer);
-#define END_CHECK_SIZE 32
-	size = state->size;
+	size = state->size * 2;
+	if (size > sizeof(state->buffer))
+		size = sizeof(state->buffer);
+	state->size = size;
+
+	/* Read enough data into our buffer to start looking for the 'endstream' token. */
+	fz_seek(ctx, state->chain, state->offset, 0);
 	while (nbytes_in_buffer < size)
 	{
 		n = fz_available(ctx, state->chain, size - nbytes_in_buffer);
 		if (n == 0)
 			break;
 		if (n > size - nbytes_in_buffer)
 			n = size - nbytes_in_buffer;
 		memcpy(stm->wp, state->chain->rp, n);
 		stm->wp += n;
 		state->chain->rp += n;
 		nbytes_in_buffer += n;
+		state->offset += n;
 	}
 
-	*stm->wp = 0; /* Be friendly to strcmp */
-	rp = (char *)state->buffer;
-	n = 0;
-	/* If we don't have at least 11 bytes in the buffer, then we don't have
-	 * enough bytes for the worst case terminator. Also, we're dangerously
-	 * close to the end of the file. Don't risk overrunning the buffer. */
-	if (nbytes_in_buffer >= 11)
-		for (i = 0; i < nbytes_in_buffer - 11; )
-		{
-			n = i;
-			if (rp[i] == '\r')
-				i++;
-			if (rp[i] == '\n')
-				i++;
-			if (rp[i++] != 'e')
-				continue;
-			if (rp[i++] != 'n')
-				continue;
-			if (rp[i++] != 'd')
-				continue;
-			if (memcmp(&rp[i], "stream", 6) == 0 || (memcmp(&rp[i], "obj", 3) == 0))
-				break;
-			i++;
-		}
+	/* Look for the 'endstream' token. */
+	rp = fz_memmem(state->buffer, nbytes_in_buffer, "endstream", 9);
+	if (rp)
+	{
+		/* Include newline (CR|LF|CRLF) before 'endstream' token */
+		if (rp > state->buffer && rp[-1] == '\n') --rp;
+		if (rp > state->buffer && rp[-1] == '\r') --rp;
+		n = rp - state->buffer;
+		stm->eof = 1; /* We're done, don't call us again! */
+	}
+	else if (nbytes_in_buffer > 11) /* 11 covers enough data to detect "\r?\n?endstream" */
+		n = nbytes_in_buffer - 11; /* no endstream, but there is more data */
+	else
+		n = nbytes_in_buffer; /* no endstream, but at the end of the file */
 
 	/* We have at least n bytes before we hit an end marker */
-	state->offset += (int64_t)nbytes_in_buffer - state->extras;
 	state->extras = nbytes_in_buffer - n;
 	stm->wp = stm->rp + n;
 	stm->pos += n;
 
 	if (n == 0)
 		return EOF;
+
+	if (!state->warned)
+	{
+		state->warned = 1;
+		fz_warn(ctx, "PDF stream Length incorrect");
+	}
 	return *stm->rp++;
 }
 
 static void
-close_null(fz_context *ctx, void *state_)
+close_endstream(fz_context *ctx, void *state_)
 {
-	struct null_filter *state = (struct null_filter *)state_;
+	struct endstream_filter *state = (struct endstream_filter *)state_;
 	fz_drop_stream(ctx, state->chain);
-	fz_free(ctx, state->ranges);
 	fz_free(ctx, state);
 }
 
-static fz_stream *
-fz_open_null_n_terminator(fz_context *ctx, fz_stream *chain, fz_range *ranges, int nranges, int terminator)
-{
-	struct null_filter *state = NULL;
-
-	state = fz_malloc_struct(ctx, struct null_filter);
-	fz_try(ctx)
-	{
-		if (nranges > 0)
-		{
-			state->ranges = fz_calloc(ctx, nranges, sizeof(*ranges));
-			memcpy(state->ranges, ranges, nranges * sizeof(*ranges));
-			state->look_for_endstream = terminator;
-			state->nranges = nranges;
-			state->next_range = 1;
-			state->remain = ranges[0].len;
-			state->offset = ranges[0].offset;
-			state->extras = 0;
-			state->size = END_CHECK_SIZE>>1;
-		}
-		else
-		{
-			state->ranges = NULL;
-			state->nranges = 0;
-			state->next_range = 1;
-			state->remain = 0;
-			state->offset = 0;
-		}
-		state->chain = fz_keep_stream(ctx, chain);
-	}
-	fz_catch(ctx)
-	{
-		fz_free(ctx, state->ranges);
-		fz_free(ctx, state);
-		fz_rethrow(ctx);
-	}
-
-	return fz_new_stream(ctx, state, next_null, close_null);
-}
-
-fz_stream *
-fz_open_null_n(fz_context *ctx, fz_stream *chain, fz_range *ranges, int nranges)
-{
-	return fz_open_null_n_terminator(ctx, chain, ranges, nranges, 0);
-}
-
 fz_stream *
-fz_open_null(fz_context *ctx, fz_stream *chain, int len, int64_t offset)
+fz_open_endstream_filter(fz_context *ctx, fz_stream *chain, int len, int64_t offset)
 {
-	fz_range range;
+	struct endstream_filter *state;
 
 	if (len < 0)
 		len = 0;
 
-	range.offset = offset;
-	range.len = len;
-	return fz_open_null_n_terminator(ctx, chain, &range, 1, 0);
-}
-
-fz_stream *
-fz_open_pdf_stream(fz_context *ctx, fz_stream *chain, int len, int64_t offset)
-{
-	fz_range range;
-
-	if (len < 0)
-		len = 0;
+	state = fz_malloc_struct(ctx, struct endstream_filter);
+	state->chain = fz_keep_stream(ctx, chain);
+	state->remain = len;
+	state->offset = offset;
+	state->extras = 0;
+	state->size = END_CHECK_SIZE >> 1; /* size is doubled first thing when used */
 
-	range.offset = offset;
-	range.len = len;
-	return fz_open_null_n_terminator(ctx, chain, &range, 1, 1);
+	return fz_new_stream(ctx, state, next_endstream, close_endstream);
 }
 
 /* Concat filter concatenates several streams into one */
@@ -226,41 +306,41 @@ static int
 next_concat(fz_context *ctx, fz_stream *stm, size_t max)
 {
 	struct concat_filter *state = (struct concat_filter *)stm->state;
 	size_t n;
 
 	while (state->current < state->count)
 	{
 		/* Read the next block of underlying data. */
 		if (stm->wp == state->chain[state->current]->wp)
 			state->chain[state->current]->rp = stm->wp;
 		n = fz_available(ctx, state->chain[state->current], max);
 		if (n)
 		{
 			stm->rp = state->chain[state->current]->rp;
 			stm->wp = state->chain[state->current]->wp;
-			stm->pos += (int64_t)n;
+			stm->pos += n;
 			return *stm->rp++;
 		}
 		else
 		{
 			if (state->chain[state->current]->error)
 			{
 				stm->error = 1;
 				break;
 			}
 			state->current++;
 			fz_drop_stream(ctx, state->chain[state->current-1]);
 			if (state->pad)
 			{
 				stm->rp = (&state->ws_buf)+1;
 				stm->wp = stm->rp + 1;
 				stm->pos++;
 				return 32;
 			}
 		}
 	}
 
 	stm->rp = stm->wp;
 
 	return EOF;
 }
@@ -664,18 +744,18 @@ static int
 next_arc4(fz_context *ctx, fz_stream *stm, size_t max)
 {
 	fz_arc4c *state = stm->state;
 	size_t n = fz_available(ctx, state->chain, max);
 
 	if (n == 0)
 		return EOF;
 	if (n > sizeof(state->buffer))
 		n = sizeof(state->buffer);
 
 	stm->rp = state->buffer;
 	stm->wp = state->buffer + n;
 	fz_arc4_encrypt(&state->arc4, stm->rp, state->chain->rp, n);
 	state->chain->rp += n;
-	stm->pos += (int64_t)n;
+	stm->pos += n;
 
 	return *stm->rp++;
 }
diff --git a/source/fitz/untar.c b/source/fitz/untar.c
index 1588a8ac6..9aac222b5 100644
--- a/source/fitz/untar.c
+++ b/source/fitz/untar.c
@@ -110,15 +110,15 @@ static tar_entry *lookup_tar_entry(fz_context *ctx, fz_tar_archive *tar, const c
 static fz_stream *open_tar_entry(fz_context *ctx, fz_archive *arch, const char *name)
 {
 	fz_tar_archive *tar = (fz_tar_archive *) arch;
 	fz_stream *file = tar->super.file;
 	tar_entry *ent;
 
 	ent = lookup_tar_entry(ctx, tar, name);
 	if (!ent)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "cannot find named tar archive entry");
 
 	fz_seek(ctx, file, ent->offset + 512, 0);
-	return fz_open_null(ctx, file, ent->size, fz_tell(ctx, file));
+	return fz_open_null_filter(ctx, file, ent->size, fz_tell(ctx, file));
 }
 
 static fz_buffer *read_tar_entry(fz_context *ctx, fz_archive *arch, const char *name)
diff --git a/source/fitz/unzip.c b/source/fitz/unzip.c
index 4eb90ddaa..dfe4fb6b3 100644
--- a/source/fitz/unzip.c
+++ b/source/fitz/unzip.c
@@ -276,18 +276,18 @@ static zip_entry *lookup_zip_entry(fz_context *ctx, fz_zip_archive *zip, const c
 static fz_stream *open_zip_entry(fz_context *ctx, fz_archive *arch, const char *name)
 {
 	fz_zip_archive *zip = (fz_zip_archive *) arch;
 	fz_stream *file = zip->super.file;
 	int method;
 	zip_entry *ent;
 
 	ent = lookup_zip_entry(ctx, zip, name);
 	if (!ent)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "cannot find named zip archive entry");
 
 	method = read_zip_entry_header(ctx, zip, ent);
 	if (method == 0)
-		return fz_open_null(ctx, file, ent->usize, fz_tell(ctx, file));
+		return fz_open_null_filter(ctx, file, ent->usize, fz_tell(ctx, file));
 	if (method == 8)
 		return fz_open_flated(ctx, file, -15);
 	fz_throw(ctx, FZ_ERROR_GENERIC, "unknown zip method: %d", method);
 }
diff --git a/source/pdf/pdf-form.c b/source/pdf/pdf-form.c
index d6969ce72..a838b4b83 100644
--- a/source/pdf/pdf-form.c
+++ b/source/pdf/pdf-form.c
@@ -1237,17 +1237,17 @@ void pdf_choice_widget_set_value(fz_context *ctx, pdf_document *doc, pdf_widget
 int pdf_signature_widget_byte_range(fz_context *ctx, pdf_document *doc, pdf_widget *widget, fz_range *byte_range)
 {
 	pdf_annot *annot = (pdf_annot *)widget;
 	pdf_obj *br = pdf_dict_getl(ctx, annot->obj, PDF_NAME(V), PDF_NAME(ByteRange), NULL);
 	int i, n = pdf_array_len(ctx, br)/2;
 
 	if (byte_range)
 	{
 		for (i = 0; i < n; i++)
 		{
 			byte_range[i].offset = pdf_array_get_int(ctx, br, 2*i);
-			byte_range[i].len = pdf_array_get_int(ctx, br, 2*i+1);
+			byte_range[i].length = pdf_array_get_int(ctx, br, 2*i+1);
 		}
 	}
 
 	return n;
 }
@@ -1255,29 +1255,29 @@ int pdf_signature_widget_byte_range(fz_context *ctx, pdf_document *doc, pdf_widg
 fz_stream *pdf_signature_widget_hash_bytes(fz_context *ctx, pdf_document *doc, pdf_widget *widget)
 {
 	fz_range *byte_range = NULL;
 	int byte_range_len;
 	fz_stream *bytes = NULL;
 
 	fz_var(byte_range);
 	fz_try(ctx)
 	{
 		byte_range_len = pdf_signature_widget_byte_range(ctx, doc, widget, NULL);
 		if (byte_range_len)
 		{
 			byte_range = fz_calloc(ctx, byte_range_len, sizeof(*byte_range));
 			pdf_signature_widget_byte_range(ctx, doc, widget, byte_range);
 		}
 
-		bytes = fz_open_null_n(ctx, doc->file, byte_range, byte_range_len);
+		bytes = fz_open_range_filter(ctx, doc->file, byte_range, byte_range_len);
 	}
 	fz_always(ctx)
 	{
 		fz_free(ctx, byte_range);
 	}
 	fz_catch(ctx)
 	{
 		fz_rethrow(ctx);
 	}
 
 	return bytes;
 }
diff --git a/source/pdf/pdf-signature.c b/source/pdf/pdf-signature.c
index 4d62e7f1f..cb7a807b4 100644
--- a/source/pdf/pdf-signature.c
+++ b/source/pdf/pdf-signature.c
@@ -8,58 +8,58 @@
 void pdf_write_digest(fz_context *ctx, fz_output *out, pdf_obj *byte_range, int hexdigest_offset, int hexdigest_length, pdf_pkcs7_signer *signer)
 {
 	fz_stream *stm = NULL;
 	fz_stream *in = NULL;
 	fz_range *brange = NULL;
 	int brange_len = pdf_array_len(ctx, byte_range)/2;
 	unsigned char *digest = NULL;
 	int digest_len;
 
 	fz_var(stm);
 	fz_var(in);
 	fz_var(brange);
 
 	if (hexdigest_length < 4)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "Bad parameters to pdf_write_digest");
 
 	fz_try(ctx)
 	{
 		int i, res;
 
 		brange = fz_calloc(ctx, brange_len, sizeof(*brange));
 		for (i = 0; i < brange_len; i++)
 		{
 			brange[i].offset = pdf_array_get_int(ctx, byte_range, 2*i);
-			brange[i].len = pdf_array_get_int(ctx, byte_range, 2*i+1);
+			brange[i].length = pdf_array_get_int(ctx, byte_range, 2*i+1);
 		}
 
 		stm = fz_stream_from_output(ctx, out);
-		in = fz_open_null_n(ctx, stm, brange, brange_len);
+		in = fz_open_range_filter(ctx, stm, brange, brange_len);
 
 		digest_len = (hexdigest_length - 2) / 2;
 		digest = fz_malloc(ctx, digest_len);
 		res = signer->create_digest(signer, in, digest, &digest_len);
 		if (!res)
 			fz_throw(ctx, FZ_ERROR_GENERIC, "pdf_pkcs7_create_digest failed");
 
 		fz_drop_stream(ctx, in);
 		in = NULL;
 		fz_drop_stream(ctx, stm);
 		stm = NULL;
 
 		fz_seek_output(ctx, out, hexdigest_offset+1, SEEK_SET);
 
 		for (i = 0; i < digest_len; i++)
 			fz_write_printf(ctx, out, "%02x", digest[i]);
 	}
 	fz_always(ctx)
 	{
 		fz_free(ctx, digest);
 		fz_free(ctx, brange);
 		fz_drop_stream(ctx, stm);
 		fz_drop_stream(ctx, in);
 	}
 	fz_catch(ctx)
 	{
 		fz_rethrow(ctx);
 	}
 }
diff --git a/source/pdf/pdf-stream.c b/source/pdf/pdf-stream.c
index 796e2490d..54d3d5617 100644
--- a/source/pdf/pdf-stream.c
+++ b/source/pdf/pdf-stream.c
@@ -276,43 +276,43 @@ static fz_stream *
 pdf_open_raw_filter(fz_context *ctx, fz_stream *file_stm, pdf_document *doc, pdf_obj *stmobj, int num, int *orig_num, int *orig_gen, int64_t offset)
 {
 	pdf_xref_entry *x = NULL;
 	fz_stream *null_stm, *crypt_stm;
 	int hascrypt;
 	int len;
 
 	if (num > 0 && num < pdf_xref_len(ctx, doc))
 	{
 		x = pdf_get_xref_entry(ctx, doc, num);
 		*orig_num = x->num;
 		*orig_gen = x->gen;
 		if (x->stm_buf)
 			return fz_open_buffer(ctx, x->stm_buf);
 	}
 	else
 	{
 		/* We only end up here when called from pdf_open_stream_with_offset to parse new format XRef sections. */
 		/* New style XRef sections must have generation number 0. */
 		*orig_num = num;
 		*orig_gen = 0;
 	}
 
 	hascrypt = pdf_stream_has_crypt(ctx, stmobj);
 	len = pdf_dict_get_int(ctx, stmobj, PDF_NAME(Length));
-	null_stm = fz_open_pdf_stream(ctx, file_stm, len, offset);
+	null_stm = fz_open_endstream_filter(ctx, file_stm, len, offset);
 	if (doc->crypt && !hascrypt)
 	{
 		fz_try(ctx)
 			crypt_stm = pdf_open_crypt(ctx, null_stm, doc->crypt, *orig_num, *orig_gen);
 		fz_always(ctx)
 			fz_drop_stream(ctx, null_stm);
 		fz_catch(ctx)
 			fz_rethrow(ctx);
 		return crypt_stm;
 	}
 	return null_stm;
 }
 
 /*
  * Construct a filter to decode a stream, constraining
  * to stream length and decrypting.
  */
@@ -350,16 +350,16 @@ fz_stream *
 pdf_open_inline_stream(fz_context *ctx, pdf_document *doc, pdf_obj *stmobj, int length, fz_stream *file_stm, fz_compression_params *imparams)
 {
 	pdf_obj *filters = pdf_dict_geta(ctx, stmobj, PDF_NAME(Filter), PDF_NAME(F));
 	pdf_obj *params = pdf_dict_geta(ctx, stmobj, PDF_NAME(DecodeParms), PDF_NAME(DP));
 
 	if (pdf_is_name(ctx, filters))
 		return build_filter(ctx, file_stm, doc, filters, params, 0, 0, imparams);
 	else if (pdf_array_len(ctx, filters) > 0)
 		return build_filter_chain(ctx, file_stm, doc, filters, params, 0, 0, imparams);
 
 	if (imparams)
 		imparams->type = FZ_IMAGE_RAW;
-	return fz_open_null(ctx, file_stm, length, fz_tell(ctx, file_stm));
+	return fz_open_null_filter(ctx, file_stm, length, fz_tell(ctx, file_stm));
 }
 
 void
