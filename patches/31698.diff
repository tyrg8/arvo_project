commit 05d49cc0cbb66e065856fd696af044d9c8a0fea9
Author: Ben Wiederhake <BenWiederhake.GitHub@gmx.de>
Date:   Sun May 30 18:44:06 2021 +0200

    LibCrypto: Fix bound checks when reading bitmaps
    
    This only affects malformed RSA keys. Instead of accepting and
    continuing with potentially broken pointers (and in ASAN, crashing), we
    now consider bitmaps malformed, and stop parsing.
    
    Found by OSS Fuzz: #31698, long-standing-bug:
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=31698
    
    Fun fact: The "if" only exists because of OSS Fuzz.
    8cc279ed74dc0b16a187052d2454c26c8c6ecaf2

diff --git a/Userland/Libraries/LibCrypto/ASN1/DER.cpp b/Userland/Libraries/LibCrypto/ASN1/DER.cpp
index 1a411e35a3..5c443e8ec6 100644
--- a/Userland/Libraries/LibCrypto/ASN1/DER.cpp
+++ b/Userland/Libraries/LibCrypto/ASN1/DER.cpp
@@ -173,13 +173,13 @@ Result<StringView, DecodeError> Decoder::decode_printable_string(ReadonlyBytes d
 Result<const BitmapView, DecodeError> Decoder::decode_bit_string(ReadonlyBytes data)
 {
     if (data.size() < 1)
         return DecodeError::InvalidInputFormat;
 
     auto unused_bits = data[0];
-    auto total_size_in_bits = data.size() * 8;
+    auto total_size_in_bits = (data.size() - 1) * 8;
 
     if (unused_bits > total_size_in_bits)
         return DecodeError::Overflow;
 
     return BitmapView { const_cast<u8*>(data.offset_pointer(1)), total_size_in_bits - unused_bits };
 }
diff --git a/Userland/Libraries/LibCrypto/PK/RSA.h b/Userland/Libraries/LibCrypto/PK/RSA.h
index c598100da5..137f1f2f5f 100644
--- a/Userland/Libraries/LibCrypto/PK/RSA.h
+++ b/Userland/Libraries/LibCrypto/PK/RSA.h
@@ -20,27 +20,25 @@ class RSAPublicKey {
 public:
     RSAPublicKey(Integer n, Integer e)
         : m_modulus(move(n))
         , m_public_exponent(move(e))
         , m_length(m_modulus.trimmed_length() * sizeof(u32))
     {
     }
 
     RSAPublicKey()
         : m_modulus(0)
         , m_public_exponent(0)
     {
     }
 
-    //--stuff it should do
-
     const Integer& modulus() const { return m_modulus; }
     const Integer& public_exponent() const { return m_public_exponent; }
     size_t length() const { return m_length; }
     void set_length(size_t length) { m_length = length; }
 
     void set(Integer n, Integer e)
     {
         m_modulus = move(n);
         m_public_exponent = move(e);
         m_length = (m_modulus.trimmed_length() * sizeof(u32));
     }
@@ -56,27 +54,26 @@ class RSAPrivateKey {
 public:
     RSAPrivateKey(Integer n, Integer d, Integer e)
         : m_modulus(move(n))
         , m_private_exponent(move(d))
         , m_public_exponent(move(e))
         , m_length(m_modulus.trimmed_length() * sizeof(u32))
     {
     }
 
     RSAPrivateKey()
     {
     }
 
-    //--stuff it should do
     const Integer& modulus() const { return m_modulus; }
     const Integer& private_exponent() const { return m_private_exponent; }
     const Integer& public_exponent() const { return m_public_exponent; }
     size_t length() const { return m_length; }
     void set_length(size_t length) { m_length = length; }
 
     void set(Integer n, Integer d, Integer e)
     {
         m_modulus = move(n);
         m_private_exponent = move(d);
         m_public_exponent = move(e);
         m_length = m_modulus.trimmed_length() * sizeof(u32);
     }
