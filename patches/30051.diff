commit 419c8952402b5b5642a0d093aa713819f26a36e3
Author: Todd C. Miller <Todd.Miller@sudo.ws>
Date:   Fri Jan 29 09:31:27 2021 -0700

    Don't bother calling ldif_to_sudoers() if there are no roles to convert.

diff --git a/plugins/sudoers/parse_ldif.c b/plugins/sudoers/parse_ldif.c
index 53b14a281..71820fa3a 100644
--- a/plugins/sudoers/parse_ldif.c
+++ b/plugins/sudoers/parse_ldif.c
@@ -568,213 +568,214 @@ bool
 sudoers_parse_ldif(struct sudoers_parse_tree *parse_tree,
     FILE *fp, const char *sudoers_base, bool store_options)
 {
     struct sudo_role_list roles = STAILQ_HEAD_INITIALIZER(roles);
     struct sudo_role *role = NULL;
     struct rbtree *usercache, *groupcache, *hostcache;
     unsigned numroles = 0;
     bool in_role = false;
     size_t linesize = 0;
     char *attr, *name, *line = NULL, *savedline = NULL;
     ssize_t savedlen = 0;
     bool mismatch = false;
     int errors = 0;
     debug_decl(sudoers_parse_ldif, SUDOERS_DEBUG_UTIL);
 
     /* Free old contents of the parse tree (if any). */
     free_parse_tree(parse_tree);
 
     /*
      * We cache user, group and host lists to make it eay to detect when there
      * are identical lists (simple pointer compare).  This makes it possible
      * to merge multiplpe sudoRole objects into a single UserSpec and/or
      * Privilege.  The lists are sorted since LDAP order is arbitrary.
      */
     usercache = rbcreate(str_list_cmp);
     groupcache = rbcreate(str_list_cmp);
     hostcache = rbcreate(str_list_cmp);
     if (usercache == NULL || groupcache == NULL || hostcache == NULL)
 	sudo_fatalx(U_("%s: %s"), __func__, U_("unable to allocate memory"));
 
     /* Read through input, parsing into sudo_roles and global defaults. */
     for (;;) {
 	int ch;
 	ssize_t len = getdelim(&line, &linesize, '\n', fp);
 
 	/* Trim trailing return or newline. */
 	while (len > 0 && (line[len - 1] == '\r' || line[len - 1] == '\n'))
 	    line[--len] = '\0';
 
 	/* Blank line or EOF terminates an entry. */
 	if (len <= 0) {
 	    if (in_role) {
 		if (role->cn != NULL && strcasecmp(role->cn, "defaults") == 0) {
 		    ldif_store_options(parse_tree, role->options);
 		    sudo_role_free(role);
 		} else if (STAILQ_EMPTY(role->users) ||
 		    STAILQ_EMPTY(role->hosts) || STAILQ_EMPTY(role->cmnds)) {
 		    /* Incomplete role. */
 		    sudo_warnx(U_("ignoring incomplete sudoRole: cn: %s"),
 			role->cn ? role->cn : "UNKNOWN");
 		    sudo_role_free(role);
 		} else {
 		    /* Cache users, hosts, runasusers and runasgroups. */
 		    if (str_list_cache(usercache, &role->users) == -1 ||
 			str_list_cache(hostcache, &role->hosts) == -1 ||
 			str_list_cache(usercache, &role->runasusers) == -1 ||
 			str_list_cache(groupcache, &role->runasgroups) == -1) {
 			sudo_fatalx(U_("%s: %s"), __func__,
 			    U_("unable to allocate memory"));
 		    }
 
 		    /* Store finished role. */
 		    STAILQ_INSERT_TAIL(&roles, role, entries);
 		    numroles++;
 		}
 		role = NULL;
 		in_role = false;
 	    }
 	    if (len == -1) {
 		/* EOF */
 		break;
 	    }
 	    mismatch = false;
 	    continue;
 	}
 
 	if (savedline != NULL) {
 	    char *tmp;
 
 	    /* Append to saved line. */
 	    linesize = savedlen + len + 1;
 	    if ((tmp = realloc(savedline, linesize)) == NULL) {
 		sudo_fatalx(U_("%s: %s"), __func__,
 		    U_("unable to allocate memory"));
 	    }
 	    memcpy(tmp + savedlen, line, len + 1);
 	    free(line);
 	    line = tmp;
 	    savedline = NULL;
 	}
 
 	/* Check for folded line */
 	if ((ch = getc(fp)) == ' ') {
 	    /* folded line, append to the saved portion. */
 	    savedlen = len;
 	    savedline = line;
 	    line = NULL;
 	    linesize = 0;
 	    continue;
 	}
 	ungetc(ch, fp);		/* not folded, push back ch */
 
 	/* Skip comment lines or records that don't match the base. */
 	if (*line == '#' || mismatch)
 	    continue;
 
 	/* Reject invalid LDIF. */
 	if (!ldif_parse_attribute(line, &name, &attr)) {
 	    sudo_warnx(U_("invalid LDIF attribute: %s"), line);
 	    errors++;
 	    continue;
 	}
 
 	/* Parse dn and objectClass. */
 	if (strcasecmp(name, "dn") == 0) {
 	    /* Compare dn to base, if specified. */
 	    if (sudoers_base != NULL) {
 		/* Skip over cn if present. */
 		if (strncasecmp(attr, "cn=", 3) == 0) {
 		    for (attr += 3; *attr != '\0'; attr++) {
 			/* Handle escaped ',' chars. */
 			if (*attr == '\\')
 			    attr++;
 			if (*attr == ',') {
 			    attr++;
 			    break;
 			}
 		    }
 		}
 		if (strcasecmp(attr, sudoers_base) != 0) {
 		    /* Doesn't match base, skip the rest of it. */
 		    mismatch = true;
 		    continue;
 		}
 	    }
 	} else if (strcasecmp(name, "objectClass") == 0) {
 	    if (strcasecmp(attr, "sudoRole") == 0) {
 		/* Allocate new role as needed. */
 		if (role == NULL) {
 		    if ((role = sudo_role_alloc()) == NULL) {
 			sudo_fatalx(U_("%s: %s"), __func__,
 			    U_("unable to allocate memory"));
 		    }
 		}
 		in_role = true;
 	    }
 	}
 
 	/* Not in a sudoRole, keep reading. */
 	if (!in_role)
 	    continue;
 
 	/* Part of a sudoRole, parse it. */
 	if (strcasecmp(name, "cn") == 0) {
 	    free(role->cn);
 	    role->cn = unquote_cn(attr);
 	    if (role->cn == NULL) {
 		sudo_fatalx(U_("%s: %s"), __func__,
 		    U_("unable to allocate memory"));
 	    }
 	} else if (strcasecmp(name, "sudoUser") == 0) {
 	    ldif_store_string(attr, role->users, true);
 	} else if (strcasecmp(name, "sudoHost") == 0) {
 	    ldif_store_string(attr, role->hosts, true);
 	} else if (strcasecmp(name, "sudoRunAs") == 0) {
 	    ldif_store_string(attr, role->runasusers, true);
 	} else if (strcasecmp(name, "sudoRunAsUser") == 0) {
 	    ldif_store_string(attr, role->runasusers, true);
 	} else if (strcasecmp(name, "sudoRunAsGroup") == 0) {
 	    ldif_store_string(attr, role->runasgroups, true);
 	} else if (strcasecmp(name, "sudoCommand") == 0) {
 	    ldif_store_string(attr, role->cmnds, false);
 	} else if (strcasecmp(name, "sudoOption") == 0) {
 	    ldif_store_string(attr, role->options, false);
 	} else if (strcasecmp(name, "sudoOrder") == 0) {
 	    char *ep;
 	    role->order = strtod(attr, &ep);
 	    if (ep == attr || *ep != '\0') {
 		sudo_warnx(U_("invalid sudoOrder attribute: %s"), attr);
 		errors++;
 	    }
 	} else if (strcasecmp(name, "sudoNotBefore") == 0) {
 	    free(role->notbefore);
 	    role->notbefore = strdup(attr);
 	    if (role->notbefore == NULL) {
 		sudo_fatalx(U_("%s: %s"), __func__,
 		    U_("unable to allocate memory"));
 	    }
 	} else if (strcasecmp(name, "sudoNotAfter") == 0) {
 	    free(role->notafter);
 	    role->notafter = strdup(attr);
 	    if (role->notafter == NULL) {
 		sudo_fatalx(U_("%s: %s"), __func__,
 		    U_("unable to allocate memory"));
 	    }
 	}
     }
     sudo_role_free(role);
     free(line);
 
     /* Convert from roles to sudoers data structures. */
-    ldif_to_sudoers(parse_tree, &roles, numroles, store_options);
+    if (numroles > 0)
+	ldif_to_sudoers(parse_tree, &roles, numroles, store_options);
 
     /* Clean up. */
     rbdestroy(usercache, str_list_free);
     rbdestroy(groupcache, str_list_free);
     rbdestroy(hostcache, str_list_free);
 
     if (fp != stdin)
 	fclose(fp);
 
     debug_return_bool(errors == 0);
 }
