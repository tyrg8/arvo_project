commit 581b93543abbeda6c17a5da11e2cf82401824bef
Author: Veronika Hanulikova <xhanulik@fi.muni.cz>
Date:   Mon Oct 10 11:23:58 2022 +0200

    Separate function for parsing ECDSA signature from ASN.1
    
    Thanks oss-fuzz
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=50683

diff --git a/src/libopensc/asn1.c b/src/libopensc/asn1.c
index 8fb39924..df1f1c8f 100644
--- a/src/libopensc/asn1.c
+++ b/src/libopensc/asn1.c
@@ -2192,3 +2192,53 @@ err:
 
 	LOG_FUNC_RETURN(ctx, rv);
 }
+
+int sc_asn1_decode_ecdsa_signature(sc_context_t *ctx, const u8 *data, size_t datalen, size_t fieldsize, u8 **out, size_t outlen) {
+	int i, r;
+	const unsigned char *pseq, *pint, *pend;
+	unsigned int cla, tag;
+	size_t seqlen, intlen;
+
+	if (!ctx || !data || !out || !(*out)) {
+		LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_ARGUMENTS);
+	}
+	if (outlen < 2 * fieldsize) {
+		LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "Output too small for EC signature");
+	}
+
+	memset(*out, 0, outlen);
+
+	pseq = data;
+	r = sc_asn1_read_tag(&pseq, datalen, &cla, &tag, &seqlen);
+	if (pseq == NULL || r < 0 || seqlen == 0 || (cla | tag) != 0x30)
+		LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "Can not find 0x30 tag");
+
+	pint = pseq;
+	pend = pseq + seqlen;
+	for (i = 0; i < 2; i++) {
+		r = sc_asn1_read_tag(&pint, (pend - pint), &cla, &tag, &intlen);
+		if (pint == NULL || r < 0 || intlen == 0 || (cla | tag) != 0x02) {
+			r = SC_ERROR_INVALID_DATA;
+			LOG_TEST_GOTO_ERR(ctx, SC_ERROR_INVALID_DATA, "Can not find 0x02");
+		}
+
+		if (intlen == fieldsize + 1) { /* drop leading 00 if present */
+			if (*pint != 0x00) {
+				r = SC_ERROR_INVALID_DATA;
+				LOG_TEST_GOTO_ERR(ctx, SC_ERROR_INVALID_DATA, "Signature too long");
+			}
+			pint++;
+			intlen--;
+		}
+		if (intlen > fieldsize) {
+			r = SC_ERROR_INVALID_DATA;
+			LOG_TEST_GOTO_ERR(ctx, SC_ERROR_INVALID_DATA, "Signature too long");
+		}
+		memcpy(*out + fieldsize * i + fieldsize - intlen , pint, intlen);
+		pint += intlen; /* next integer */
+	}
+	r = 2 * fieldsize;
+err:
+	LOG_FUNC_RETURN(ctx, r);
+}
+
diff --git a/src/libopensc/asn1.h b/src/libopensc/asn1.h
index 3a4cb29c..4490eff1 100644
--- a/src/libopensc/asn1.h
+++ b/src/libopensc/asn1.h
@@ -124,101 +124,105 @@ int sc_asn1_sig_value_rs_to_sequence(struct sc_context *ctx,
 		unsigned char *in, size_t inlen,
                 unsigned char **buf, size_t *buflen);
 int sc_asn1_sig_value_sequence_to_rs(struct sc_context *ctx,
 		const unsigned char *in, size_t inlen,
                 unsigned char *buf, size_t buflen);
 
+/* ECDSA signature decoding*/
+int sc_asn1_decode_ecdsa_signature(sc_context_t *ctx, const u8 *data, size_t datalen,
+		size_t fieldsize, u8 **out, size_t outlen);
+
 /* long form tags use these */
 /* Same as  SC_ASN1_TAG_* shifted left by 24 bits  */
 #define SC_ASN1_CLASS_MASK		0xC0000000
 #define SC_ASN1_UNI			0x00000000 /* Universal */
 #define SC_ASN1_APP			0x40000000 /* Application */
 #define SC_ASN1_CTX			0x80000000 /* Context */
 #define SC_ASN1_PRV			0xC0000000 /* Private */
 #define SC_ASN1_CONS			0x20000000
 
 #define SC_ASN1_CLASS_CONS		0xE0000000 /* CLASS and CONS */
 #define SC_ASN1_TAG_MASK		0x00FFFFFF
 #define SC_ASN1_TAGNUM_SIZE		3
 
 #define SC_ASN1_PRESENT			0x00000001
 #define SC_ASN1_OPTIONAL		0x00000002
 #define SC_ASN1_ALLOC			0x00000004
 #define SC_ASN1_UNSIGNED		0x00000008
 #define SC_ASN1_EMPTY_ALLOWED           0x00000010
 
 #define SC_ASN1_BOOLEAN                 1
 #define SC_ASN1_INTEGER                 2
 #define SC_ASN1_BIT_STRING              3
 #define SC_ASN1_BIT_STRING_NI           128
 #define SC_ASN1_OCTET_STRING            4
 #define SC_ASN1_NULL                    5
 #define SC_ASN1_OBJECT                  6
 #define SC_ASN1_ENUMERATED              10
 #define SC_ASN1_UTF8STRING              12
 #define SC_ASN1_SEQUENCE                16
 #define SC_ASN1_SET                     17
 #define SC_ASN1_PRINTABLESTRING         19
 #define SC_ASN1_UTCTIME                 23
 #define SC_ASN1_GENERALIZEDTIME         24
 
 /* internal structures */
 #define SC_ASN1_STRUCT			129
 #define SC_ASN1_CHOICE			130
 #define SC_ASN1_BIT_FIELD		131	/* bit string as integer */
 
 /* 'complex' structures */
 #define SC_ASN1_PATH			256
 #define SC_ASN1_PKCS15_ID		257
 #define SC_ASN1_PKCS15_OBJECT		258
 #define SC_ASN1_ALGORITHM_ID		259
 #define SC_ASN1_SE_INFO			260
 
 /* use callback function */
 #define SC_ASN1_CALLBACK		384
 
 /* use with short one byte tags */
 #define SC_ASN1_TAG_CLASS		0xC0
 #define SC_ASN1_TAG_UNIVERSAL		0x00
 #define SC_ASN1_TAG_APPLICATION		0x40
 #define SC_ASN1_TAG_CONTEXT		0x80
 #define SC_ASN1_TAG_PRIVATE		0xC0
 
 #define SC_ASN1_TAG_CONSTRUCTED		0x20
 #define SC_ASN1_TAG_PRIMITIVE		0x1F
 #define SC_ASN1_TAG_CLASS_CONS		0xE0
 
 #define SC_ASN1_TAG_EOC			0
 #define SC_ASN1_TAG_BOOLEAN		1
 #define SC_ASN1_TAG_INTEGER		2
 #define SC_ASN1_TAG_BIT_STRING		3
 #define SC_ASN1_TAG_OCTET_STRING	4
 #define SC_ASN1_TAG_NULL		5
 #define SC_ASN1_TAG_OBJECT		6
 #define SC_ASN1_TAG_OBJECT_DESCRIPTOR	7
 #define SC_ASN1_TAG_EXTERNAL		8
 #define SC_ASN1_TAG_REAL		9
 #define SC_ASN1_TAG_ENUMERATED		10
 #define SC_ASN1_TAG_UTF8STRING		12
 #define SC_ASN1_TAG_SEQUENCE		16
 #define SC_ASN1_TAG_SET			17
 #define SC_ASN1_TAG_NUMERICSTRING	18
 #define SC_ASN1_TAG_PRINTABLESTRING	19
 #define SC_ASN1_TAG_T61STRING		20
 #define SC_ASN1_TAG_TELETEXSTRING	20
 #define SC_ASN1_TAG_VIDEOTEXSTRING	21
 #define SC_ASN1_TAG_IA5STRING		22
 #define SC_ASN1_TAG_UTCTIME		23
 #define SC_ASN1_TAG_GENERALIZEDTIME	24
 #define SC_ASN1_TAG_GRAPHICSTRING	25
 #define SC_ASN1_TAG_ISO64STRING		26
 #define SC_ASN1_TAG_VISIBLESTRING	26
 #define SC_ASN1_TAG_GENERALSTRING	27
 #define SC_ASN1_TAG_UNIVERSALSTRING	28
 #define SC_ASN1_TAG_BMPSTRING		30
 #define SC_ASN1_TAG_ESCAPE_MARKER	31
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif
diff --git a/src/libopensc/card-piv.c b/src/libopensc/card-piv.c
index bda37f7b..6bf74022 100644
--- a/src/libopensc/card-piv.c
+++ b/src/libopensc/card-piv.c
@@ -2434,69 +2434,35 @@ static int
 piv_compute_signature(sc_card_t *card, const u8 * data, size_t datalen,
 		u8 * out, size_t outlen)
 {
 	piv_private_data_t * priv = PIV_DATA(card);
 	int r;
-	int i;
 	size_t nLen;
 	u8 rbuf[128]; /* For EC conversions  384 will fit */
-	const unsigned char *pseq, *pint, *ptemp, *pend;
-	unsigned int cla, tag;
-	size_t seqlen;
-	size_t intlen;
-	size_t templen;
 
 	SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);
 
 	/* The PIV returns a DER SEQUENCE{INTEGER, INTEGER}
 	 * Which may have leading 00 to force a positive integer
 	 * But PKCS11 just wants 2* field_length in bytes
 	 * So we have to strip out the integers
 	 * and pad on left if too short.
 	 */
 
 	if (priv->alg_id == 0x11 || priv->alg_id == 0x14 ) {
 		nLen = (priv->key_size + 7) / 8;
 		if (outlen < 2*nLen) {
 			sc_log(card->ctx,
 			       " output too small for EC signature %"SC_FORMAT_LEN_SIZE_T"u < %"SC_FORMAT_LEN_SIZE_T"u",
 			       outlen, 2 * nLen);
 			r = SC_ERROR_INVALID_DATA;
 			goto err;
 		}
-		memset(out, 0, outlen);
 
 		r = piv_validate_general_authentication(card, data, datalen, rbuf, sizeof rbuf);
 		if (r < 0)
 			goto err;
-
-		pseq = rbuf;
-		r = sc_asn1_read_tag(&pseq, r, &cla, &tag, &seqlen);
-		if (pseq == NULL || r < 0 || seqlen == 0 || (cla|tag) != 0x30)
-			LOG_TEST_GOTO_ERR(card->ctx, SC_ERROR_INVALID_DATA, "Can't find 0x30");
-
-		pint = pseq;
-		pend = pseq + seqlen;
-		for (i = 0; i < 2; i++) {
-			r = sc_asn1_read_tag(&pint, (pend - pint), &cla, &tag, &intlen);
-			if (pint == NULL || r < 0 || intlen == 0 || (cla|tag) != 0x02)
-				LOG_TEST_GOTO_ERR(card->ctx, SC_ERROR_INVALID_DATA, "Can't find 0x02");
-			if (intlen > nLen + 1)
-				LOG_TEST_GOTO_ERR(card->ctx, SC_ERROR_INVALID_DATA,"Signature too long");
-
-			ptemp = pint;
-			templen = intlen;
-			if (intlen > nLen) { /* drop leading 00 if present */
-				if (*ptemp != 0x00) {
-					LOG_TEST_GOTO_ERR(card->ctx, SC_ERROR_INVALID_DATA,"Signature too long");
-				}
-				ptemp++;
-				templen--;
-			}
-			memcpy(out + nLen*i + nLen - templen, ptemp, templen);
-			pint += intlen; /* next integer */
-			
-		}
-		r = 2 * nLen;
+		
+		r = sc_asn1_decode_ecdsa_signature(card->ctx, rbuf, r, nLen, &out, outlen);
 	} else { /* RSA is all set */
 		r = piv_validate_general_authentication(card, data, datalen, out, outlen);
 	}
diff --git a/src/libopensc/card-sc-hsm.c b/src/libopensc/card-sc-hsm.c
index b39e88b6..6999e714 100644
--- a/src/libopensc/card-sc-hsm.c
+++ b/src/libopensc/card-sc-hsm.c
@@ -1033,68 +1033,32 @@ static int sc_hsm_set_security_env(sc_card_t *card,
 static int sc_hsm_decode_ecdsa_signature(sc_card_t *card,
 					const u8 * data, size_t datalen,
 					u8 * out, size_t outlen) {
 
-	int i, r;
+	int r;
 	size_t fieldsizebytes;
-	const u8 *body, *tag;
-	size_t bodylen, taglen;
 
 	// Determine field size from length of signature
 	if (datalen <= 58) {			// 192 bit curve = 24 * 2 + 10 byte maximum DER signature
 		fieldsizebytes = 24;
 	} else if (datalen <= 66) {		// 224 bit curve = 28 * 2 + 10 byte maximum DER signature
 		fieldsizebytes = 28;
 	} else if (datalen <= 74) {		// 256 bit curve = 32 * 2 + 10 byte maximum DER signature
 		fieldsizebytes = 32;
 	} else if (datalen <= 90) {		// 320 bit curve = 40 * 2 + 10 byte maximum DER signature
 		fieldsizebytes = 40;
 	} else if (datalen <= 106) {		// 384 bit curve = 48 * 2 + 10 byte maximum DER signature
 		fieldsizebytes = 48;
 	} else if (datalen <= 137) {		// 512 bit curve = 64 * 2 + 9 byte maximum DER signature
 		fieldsizebytes = 64;
 	} else {
 		fieldsizebytes = 66;
 	}
 
 	sc_log(card->ctx,
 	       "Field size %"SC_FORMAT_LEN_SIZE_T"u, signature buffer size %"SC_FORMAT_LEN_SIZE_T"u",
 	       fieldsizebytes, outlen);
 
-	if (outlen < (fieldsizebytes * 2)) {
-		LOG_TEST_RET(card->ctx, SC_ERROR_INVALID_DATA, "output too small for EC signature");
-	}
-	memset(out, 0, outlen);
-
-	// Copied from card-piv.c. Thanks
-	body = sc_asn1_find_tag(card->ctx, data, datalen, 0x30, &bodylen);
-
-	for (i = 0; i<2; i++) {
-		if (body) {
-			tag = sc_asn1_find_tag(card->ctx, body,  bodylen, 0x02, &taglen);
-			if (tag) {
-				bodylen -= taglen - (tag - body);
-				body = tag + taglen;
-
-				if (taglen > fieldsizebytes) { /* drop leading 00 if present */
-					if (*tag != 0x00) {
-						r = SC_ERROR_INVALID_DATA;
-						goto err;
-					}
-					tag++;
-					taglen--;
-				}
-				memcpy(out + fieldsizebytes*i + fieldsizebytes - taglen , tag, taglen);
-			} else {
-				r = SC_ERROR_INVALID_DATA;
-				goto err;
-			}
-		} else  {
-			r = SC_ERROR_INVALID_DATA;
-			goto err;
-		}
-	}
-	r = 2 * fieldsizebytes;
-err:
+	r = sc_asn1_decode_ecdsa_signature(card->ctx, data, datalen, fieldsizebytes, &out, outlen);
 	LOG_FUNC_RETURN(card->ctx, r);
 }
 
diff --git a/src/tests/unittests/Makefile.am b/src/tests/unittests/Makefile.am
index 5fe6db5c..3c168b87 100644
--- a/src/tests/unittests/Makefile.am
+++ b/src/tests/unittests/Makefile.am
@@ -6,8 +6,8 @@ include $(top_srcdir)/aminclude_static.am
 clean-local: code-coverage-clean
 distclean-local: code-coverage-dist-clean
 
-noinst_PROGRAMS = asn1 simpletlv cachedir pkcs15filter openpgp-tool hextobin
-TESTS = asn1 simpletlv cachedir pkcs15filter openpgp-tool hextobin
+noinst_PROGRAMS = asn1 simpletlv cachedir pkcs15filter openpgp-tool hextobin decode_ecdsa_signature
+TESTS = asn1 simpletlv cachedir pkcs15filter openpgp-tool hextobin decode_ecdsa_signature
 
 noinst_HEADERS = torture.h
 
@@ -27,6 +27,7 @@ cachedir_SOURCES = cachedir.c
 pkcs15filter_SOURCES = pkcs15-emulator-filter.c
 openpgp_tool_SOURCES = openpgp-tool.c $(top_builddir)/src/tools/openpgp-tool-helpers.c
 hextobin_SOURCES = hextobin.c
+decode_ecdsa_signature_SOURCES = decode_ecdsa_signature.c
 
 if ENABLE_ZLIB
 noinst_PROGRAMS += compression
diff --git a/src/tests/unittests/decode_ecdsa_signature.c b/src/tests/unittests/decode_ecdsa_signature.c
new file mode 100644
index 00000000..984970ea
--- /dev/null
+++ b/src/tests/unittests/decode_ecdsa_signature.c
@@ -0,0 +1,225 @@
+/*
+ * decode_ecdsa_signature.c: Unit tests for decode ASN.1 ECDSA signature
+ *
+ * Copyright (C) 2022 Red Hat, Inc.
+ *
+ * Author: Veronika Hanulikova <vhanulik@redhat.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "torture.h"
+#include "libopensc/log.c"
+#include "libopensc/asn1.c"
+
+static void torture_empty_rs(void **state)
+{
+	int r = 0;
+	size_t fieldsize = 24;
+	struct sc_context *ctx = NULL;
+	u8 *out = malloc(2);
+	char data[] = { 0x30, 0x04, 0x02, 0x00, 0x02, 0x00};
+
+	sc_establish_context(&ctx, "test");
+	r = sc_asn1_decode_ecdsa_signature(ctx, (u8 *) data, 6, fieldsize, (u8 ** ) &out, 2);
+	free(out);
+	assert_int_equal(r, SC_ERROR_INVALID_DATA);
+}
+
+static void torture_valid_format(void **state)
+{
+	int r = 0;
+	size_t fieldsize = 1;
+	struct sc_context *ctx = NULL;
+	u8 *out = malloc(2);
+	u8 result[2] = { 0x03, 0x04};
+	char data[] = { 0x30, 0x06, 0x02, 0x01, 0x03, 0x02, 0x01, 0x04};
+
+	if (!out)
+		return;
+
+	sc_establish_context(&ctx, "test");
+	r = sc_asn1_decode_ecdsa_signature(ctx, (u8 *) data, 8, fieldsize, (u8 **) &out, 2);
+
+	assert_int_equal(r, 2 * fieldsize);	
+	assert_memory_equal(result, out, 2);
+	free(out);
+}
+
+static void torture_valid_format_leading00(void **state)
+{
+	int r = 0;
+	size_t fieldsize = 1;
+	struct sc_context *ctx = NULL;
+	u8 *out = malloc(2);
+	u8 result[2] = { 0x03, 0x04};
+	char data[] = { 0x30, 0x07, 0x02, 0x02, 0x00, 0x03, 0x02, 0x01, 0x04};
+
+	if (!out)
+		return;
+
+	sc_establish_context(&ctx, "test");
+	r = sc_asn1_decode_ecdsa_signature(ctx, (u8 *) data, 9, fieldsize, (u8 **) &out, 2);
+
+	assert_int_equal(r, 2 * fieldsize);	
+	assert_memory_equal(result, out, 2);
+	free(out);
+}
+
+static void torture_valid_format_long_fieldsize(void **state)
+{
+	int r = 0;
+	size_t fieldsize = 3;
+	struct sc_context *ctx = NULL;
+	u8 *out = malloc(6);
+	u8 result[6] = { 0x00, 0x00, 0x03, 0x00, 0x00, 0x04};
+	char data[] = { 0x30, 0x06, 0x02, 0x01, 0x03, 0x02, 0x01, 0x04};
+
+	if (!out)
+		return;
+
+	sc_establish_context(&ctx, "test");
+	r = sc_asn1_decode_ecdsa_signature(ctx, (u8 *) data, 9, fieldsize, (u8 **) &out, 6);
+
+	assert_int_equal(r, 2 * fieldsize);	
+	assert_memory_equal(result, out, 6);
+	free(out);
+}
+
+static void torture_wrong_tag_len(void **state)
+{
+	int r = 0;
+	size_t fieldsize = 1;
+	struct sc_context *ctx = NULL;
+	u8 *out = malloc(2);
+	char data[] = { 0x30, 0x05, 0x02, 0x01, 0x03, 0x02, 0x01, 0x04};
+
+	if (!out)
+		return;
+
+	sc_establish_context(&ctx, "test");
+	r = sc_asn1_decode_ecdsa_signature(ctx, (u8 *) data, 8, fieldsize, (u8 **) &out, 2);
+
+	assert_int_equal(r, SC_ERROR_INVALID_DATA);	
+	free(out);
+}
+
+static void torture_wrong_integer_tag_len(void **state)
+{
+	int r = 0;
+	size_t fieldsize = 1;
+	struct sc_context *ctx = NULL;
+	u8 *out = malloc(2);
+	char data[] = { 0x30, 0x06, 0x02, 0x01, 0x03, 0x02, 0x02, 0x04};
+
+	if (!out)
+		return;
+
+	sc_establish_context(&ctx, "test");
+	r = sc_asn1_decode_ecdsa_signature(ctx, (u8 *) data, 8, fieldsize, (u8 **) &out, 2);
+
+	assert_int_equal(r, SC_ERROR_INVALID_DATA);	
+	free(out);
+}
+
+static void torture_small_fieldsize(void **state)
+{
+	int r = 0;
+	size_t fieldsize = 1;
+	struct sc_context *ctx = NULL;
+	u8 *out = malloc(3);
+	char data[] = { 0x30, 0x07, 0x02, 0x01, 0x03, 0x02, 0x02, 0x04, 0x05};
+
+	if (!out)
+		return;
+
+	sc_establish_context(&ctx, "test");
+	r = sc_asn1_decode_ecdsa_signature(ctx, (u8 *) data, 9, fieldsize, (u8 **) &out, 3);
+
+	assert_int_equal(r, SC_ERROR_INVALID_DATA);	
+	free(out);
+}
+
+static void torture_long_leading00(void **state)
+{
+	int r = 0;
+	size_t fieldsize = 1;
+	struct sc_context *ctx = NULL;
+	u8 *out = malloc(3);
+	char data[] = { 0x30, 0x07, 0x02, 0x03, 0x00, 0x00, 0x03, 0x02, 0x01, 0x04};
+
+	if (!out)
+		return;
+
+	sc_establish_context(&ctx, "test");
+	r = sc_asn1_decode_ecdsa_signature(ctx, (u8 *) data, 10, fieldsize, (u8 **) &out, 3);
+
+	assert_int_equal(r, SC_ERROR_INVALID_DATA);	
+	free(out);
+}
+
+static void torture_missing_tag(void **state)
+{
+	int r = 0;
+	size_t fieldsize = 1;
+	struct sc_context *ctx = NULL;
+	u8 *out = malloc(2);
+	char data[] = { 0x20, 0x07, 0x02, 0x01, 0x03, 0x02, 0x02, 0x04, 0x05};
+
+	if (!out)
+		return;
+
+	sc_establish_context(&ctx, "test");
+	r = sc_asn1_decode_ecdsa_signature(ctx, (u8 *) data, 9, fieldsize, (u8 **) &out, 2);
+
+	assert_int_equal(r, SC_ERROR_INVALID_DATA);	
+	free(out);
+}
+
+
+static void torture_missing_integer_tag(void **state)
+{
+	int r = 0;
+	size_t fieldsize = 1;
+	struct sc_context *ctx = NULL;
+	u8 *out = malloc(2);
+	char data[] = { 0x30, 0x07, 0x01, 0x01, 0x03, 0x02, 0x02, 0x04, 0x05};
+
+	if (!out)
+		return;
+
+	sc_establish_context(&ctx, "test");
+	r = sc_asn1_decode_ecdsa_signature(ctx, (u8 *) data, 9, fieldsize, (u8 **) &out, 2);
+
+	assert_int_equal(r, SC_ERROR_INVALID_DATA);	
+	free(out);
+}
+
+int main(void)
+{
+	const struct CMUnitTest tests[] = {
+		cmocka_unit_test(torture_empty_rs),
+		cmocka_unit_test(torture_valid_format),
+		cmocka_unit_test(torture_valid_format_leading00),
+		cmocka_unit_test(torture_valid_format_long_fieldsize),
+		cmocka_unit_test(torture_wrong_tag_len),
+		cmocka_unit_test(torture_wrong_integer_tag_len),
+		cmocka_unit_test(torture_small_fieldsize),
+		cmocka_unit_test(torture_long_leading00),
+		cmocka_unit_test(torture_missing_tag),
+		cmocka_unit_test(torture_missing_integer_tag),
+	};
+	return cmocka_run_group_tests(tests, NULL, NULL);
+}
+
