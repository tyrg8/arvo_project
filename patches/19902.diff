commit 2124b9b4c95e66e63b1eb26a8dab49753b82fd6c
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Wed Jan 8 10:52:24 2020 +0900

    Fix buffer overflow in `mrb_str_len_to_dbl`.
    
    Issue 19902: mruby:mruby_fuzzer: Stack-buffer-overflow in mrb_str_len_to_dbl

diff --git a/src/string.c b/src/string.c
index e61a85cff..c7b9db17a 100644
--- a/src/string.c
+++ b/src/string.c
@@ -1,23 +1,24 @@
 /*
 ** string.c - String class
 **
 ** See Copyright Notice in mruby.h
 */
 
 #ifdef _MSC_VER
 # define _CRT_NONSTDC_NO_DEPRECATE
 #endif
 
 #ifndef MRB_WITHOUT_FLOAT
 #include <float.h>
+#include <math.h>
 #endif
 #include <limits.h>
 #include <stddef.h>
 #include <stdlib.h>
 #include <string.h>
 #include <mruby.h>
 #include <mruby/array.h>
 #include <mruby/class.h>
 #include <mruby/range.h>
 #include <mruby/string.h>
 #include <mruby/numeric.h>
@@ -2491,58 +2492,71 @@ mrb_str_to_i(mrb_state *mrb, mrb_value self)
 double
 mrb_str_len_to_dbl(mrb_state *mrb, const char *s, size_t len, mrb_bool badcheck)
 {
-  char buf[DBL_DIG * 4 + 10];
-  const char *p = s;
+  char buf[DBL_DIG * 4 + 20];
+  const char *p = s, *p2;
   const char *pend = p + len;
   char *end;
   char *n;
   char prev = 0;
   double d;
+  mrb_bool dot = FALSE;
 
   if (!p) return 0.0;
   while (p<pend && ISSPACE(*p)) p++;
+  p2 = p;
 
   if (pend - p > 2 && p[0] == '0' && (p[1] == 'x' || p[1] == 'X')) {
     mrb_value x;
 
     if (!badcheck) return 0.0;
     x = mrb_str_len_to_inum(mrb, p, pend-p, 0, badcheck);
     if (mrb_fixnum_p(x))
       d = (double)mrb_fixnum(x);
     else /* if (mrb_float_p(x)) */
       d = mrb_float(x);
     return d;
   }
   while (p < pend) {
     if (!*p) {
-      if (badcheck && p < pend) {
+      if (badcheck) {
         mrb_raise(mrb, E_ARGUMENT_ERROR, "string for Float contains null byte");
         /* not reached */
       }
       pend = p;
-      p = s;
+      p = p2;
+      goto nocopy;
+    }
+    if (!badcheck && *p == ' ') {
+      pend = p;
+      p = p2;
       goto nocopy;
     }
     if (*p == '_') break;
     p++;
   }
-  p = s;
+  p = p2;
   n = buf;
   while (p < pend) {
     char c = *p++;
+    if (c == '.') dot = TRUE;
     if (c == '_') {
       /* remove an underscore between digits */
       if (n == buf || !ISDIGIT(prev) || p == pend) {
         if (badcheck) goto bad;
         break;
       }
     }
     else if (badcheck && prev == '_' && !ISDIGIT(c)) goto bad;
     else {
+      const char *bend = buf+sizeof(buf)-1;
+      if (n==bend) {            /* buffer overflow */
+        if (dot) break;         /* cut off remaining fractions */
+        return INFINITY;
+      }
       *n++ = c;
     }
     prev = c;
   }
   *n = '\0';
   p = buf;
   pend = n;
