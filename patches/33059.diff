commit bb967665384d2f2539f81d773d0c8099e6e30aa3
Author: Aleks L <93376818+sashashura@users.noreply.github.com>
Date:   Thu Jul 28 19:39:28 2022 +0100

    Fixes Segv on unknown address in dwg_free_summaryinfo
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=33059
    
    `dwg.summaryinfo.props[0].value` in `dwg_free_summaryinfo` is uninitialized pointer. It happens when `dwg_read_dxf` fails and partially initialized summary info object is created.

diff --git a/src/in_dxf.c b/src/in_dxf.c
index ae701f47..7e9a3a6d 100644
--- a/src/in_dxf.c
+++ b/src/in_dxf.c
@@ -1046,267 +1046,268 @@ static int
 dxf_header_read (Bit_Chain *restrict dat, Dwg_Data *restrict dwg)
 {
   Dwg_Header_Variables *_obj = &dwg->header_vars;
   Dwg_Object *obj = NULL;
   const int is_binary = dat->opts & DWG_OPTS_DXFB;
   // const int minimal = dwg->opts & DWG_OPTS_MINIMAL;
   int is_tu = 1;
   int i = 0;
   Dxf_Pair *pair;
 
   // defaults, not often found in a DXF
   _obj->ISOLINES = 4;
   _obj->TEXTQLTY = 50;
   _obj->FACETRES = 0.5;
 
   // here SECTION (HEADER) was already consumed
   // read the first group 9, $field pair
   pair = dxf_read_pair (dat);
   while (pair != NULL && pair->code == 9 && pair->value.s)
     {
       char field[80];
       strncpy (field, pair->value.s, 79);
       field[79] = '\0';
       i = 0;
 
       // now read the code, value pair. for points it may be multiple (index i)
       dxf_free_pair (pair);
       pair = dxf_read_pair (dat);
       if (!pair)
         {
           pair = dxf_read_pair (dat);
           if (!pair)
             return 1;
         }
       DXF_BREAK_ENDSEC;
     next_hdrvalue:
       if (is_binary && pair->code == 280 &&
           (strEQc (field, "$ENDCAPS") || strEQc (field, "$JOINSTYLE")))
         dat->byte++; // B => RS
       if (pair->code == 1 && strEQc (field, "$ACADVER")
           && pair->value.s != NULL)
         {
           int vi; // C++ quirks
           // Note: Here version is still R_INVALID, thus pair->value.s
           // is never TU.
           const char *version = pair->value.s;
           dat->from_version = dwg->header.from_version = dwg_version_hdr_type (version);
           is_tu = dat->from_version >= R_2007;
           LOG_TRACE ("HEADER.from_version = %s,\tdat->from_version = %s\n",
                      dwg_version_codes (dwg->header.from_version),
                      dwg_version_codes (dat->from_version));
           if (dat->from_version == R_INVALID)
             {
               LOG_ERROR ("Invalid HEADER: 9 %s, 1 %s", field, version)
               exit (1);
             }
           if (is_tu && dwg->num_objects
               && dwg->object[0].fixedtype == DWG_TYPE_BLOCK_HEADER)
             {
               Dwg_Object_BLOCK_HEADER *o
                 = dwg->object[0].tio.object->tio.BLOCK_HEADER;
               free (o->name);
               o->name
                 = (char *)bit_utf8_to_TU ((char *)"*Model_Space", 0);
             }
           // currently we can only encode DWGs to r13-r2000, but DXF's to almost everything.
           if (dwg->header.from_version >= R_13 && dwg->header.from_version <= R_2000)
             dwg->header.version = dat->version = dwg->header.from_version;
           LOG_TRACE ("HEADER.version = %s,\tdat->version = %s\n",
                      dwg_version_codes (dwg->header.version),
                      dwg_version_codes (dat->version));
         }
       else if (field[0] == '$')
         {
           const Dwg_DYNAPI_field *f = dwg_dynapi_header_field (&field[1]);
           if (!f)
             {
               if (pair->code == 40 && strEQc (field, "$3DDWFPREC"))
                 {
                   LOG_TRACE ("HEADER.%s [%s %d]\n", &field[1], "BD",
                              pair->code);
                   dwg->header_vars._3DDWFPREC = pair->value.d;
                 }
 
 #define SUMMARY_T(name)                                                       \
   (pair->code == 1 && strEQc (field, "$" #name) && pair->value.s != NULL)     \
   {                                                                           \
     LOG_TRACE ("SUMMARY.%s = %s [TU16 1]\n", &field[1], pair->value.s);       \
     dwg->summaryinfo.name = bit_utf8_to_TU (pair->value.s, 0);                \
   }
 
               else if
                 SUMMARY_T (TITLE)
               else if
                 SUMMARY_T (AUTHOR)
               else if
                 SUMMARY_T (SUBJECT)
               else if
                 SUMMARY_T (KEYWORDS)
               else if
                 SUMMARY_T (COMMENTS)
               else if
                 SUMMARY_T (LASTSAVEDBY)
               else if (pair->code == 1 && strEQc (field, "$CUSTOMPROPERTYTAG")
                        && pair->value.s != NULL)
                 {
                   BITCODE_BL j = dwg->summaryinfo.num_props;
                   dwg->summaryinfo.num_props++;
                   dwg->summaryinfo.props
                     = (Dwg_SummaryInfo_Property*)realloc (dwg->summaryinfo.props,
                                  (j + 1) * sizeof (Dwg_SummaryInfo_Property));
+                  memset (dwg->summaryinfo.props + j, 0, sizeof (Dwg_SummaryInfo_Property));
                   LOG_TRACE ("SUMMARY.props[%u].tag = %s [TU16 1]\n", j,
                              pair->value.s);
                   dwg->summaryinfo.props[j].tag = bit_utf8_to_TU (pair->value.s, 0);
                 }
               else if (pair->code == 1 && strEQc (field, "$CUSTOMPROPERTY")
                        && pair->value.s != NULL && dwg->summaryinfo.props
                        && dwg->summaryinfo.num_props > 0)
                 {
                   BITCODE_BL j = dwg->summaryinfo.num_props - 1;
                   LOG_TRACE ("SUMMARY.props[%u].value = %s [TU16 1]\n", j,
                              pair->value.s);
                   dwg->summaryinfo.props[j].value = bit_utf8_to_TU (pair->value.s, 0);
                 }
               else
                 LOG_ERROR ("skipping HEADER: 9 %s, unknown field with code %d",
                            field, pair->code);
             }
           else if (!matches_type (pair, f) && strNE (field, "$XCLIPFRAME")
                    && strNE (field, "$OSMODE") && strNE (field, "$TIMEZONE"))
             {
               // XCLIPFRAME is 280 RC or 290 B in dynapi.
               // TIMEZONE is BLd (signed)
               LOG_ERROR (
                   "skipping HEADER: 9 %s, wrong type code %d <=> field %s",
                   field, pair->code, f->type);
             }
           else if (pair->type == DWG_VT_POINT3D)
             {
               BITCODE_3BD pt = { 0.0, 0.0, 0.0 };
               if (i)
                 dwg_dynapi_header_value (dwg, &field[1], &pt, NULL);
               if (i == 0)
                 pt.x = pair->value.d;
               else if (i == 1)
                 pt.y = pair->value.d;
               else if (i == 2)
                 pt.z = pair->value.d;
               if (i > 2)
                 {
                   LOG_ERROR ("skipping HEADER: 9 %s, too many point elements",
                              field);
                 }
               else
                 {
                   // yes, set it 2-3 times
                   LOG_TRACE ("HEADER.%s [%s %d][%d] = %f\n", &field[1],
                              f->type, pair->code, i, pair->value.d);
                   dwg_dynapi_header_set_value (dwg, &field[1], &pt, 1);
                   i++;
                 }
             }
           else if (pair->type == DWG_VT_STRING && strEQc (f->type, "H"))
             {
               char *key, *str;
               if (pair->value.s && strlen (pair->value.s))
                 {
                   LOG_TRACE ("HEADER.%s %s [%s %d] later\n", &field[1],
                              pair->value.s, f->type, (int)pair->code);
                   // name (which table?) => handle
                   // needs to be postponed, because we don't have the tables
                   // yet.
                   header_hdls = array_push (header_hdls, &field[1],
                                             pair->value.s, pair->code);
                 }
               else
                 {
                   BITCODE_H hdl = dwg_add_handleref (dwg, 5, 0, NULL);
                   LOG_TRACE ("HEADER.%s NULL 5 [H %d]\n", &field[1],
                              pair->code);
                   dwg_dynapi_header_set_value (dwg, &field[1], &hdl, 1);
                 }
             }
           else if (strEQc (f->type, "H"))
             {
               BITCODE_H hdl;
               hdl = dwg_add_handleref (dwg, 4, pair->value.u, NULL);
               LOG_TRACE ("HEADER.%s %X [H %d]\n", &field[1], pair->value.u,
                          pair->code);
               dwg_dynapi_header_set_value (dwg, &field[1], &hdl, 1);
             }
           else if (strEQc (f->type, "CMC"))
             {
               static BITCODE_CMC color = { 0 };
               if (pair->code <= 70)
                 {
                   LOG_TRACE ("HEADER.%s.index %d [CMC %d]\n", &field[1],
                              pair->value.i, pair->code);
                   color.index = pair->value.i;
                   dwg_dynapi_header_set_value (dwg, &field[1], &color, 0);
                 }
             }
           else if (pair->type == DWG_VT_REAL && strEQc (f->type, "TIMEBLL"))
             {
               static BITCODE_TIMEBLL date = { 0, 0, 0 };
               date.value = pair->value.d;
               date.days = (BITCODE_BL)trunc (pair->value.d);
               date.ms = (BITCODE_BL) (86400000.0 * (date.value - date.days));
               LOG_TRACE ("HEADER.%s %.09f (" FORMAT_BL ", " FORMAT_BL
                          ") [TIMEBLL %d]\n",
                          &field[1], date.value, date.days, date.ms,
                          pair->code);
               dwg_dynapi_header_set_value (dwg, &field[1], &date, 0);
             }
           else if (pair->type == DWG_VT_STRING)
             {
               LOG_TRACE ("HEADER.%s [%s %d]\n", &field[1], f->type,
                          pair->code);
               dwg_dynapi_header_set_value (dwg, &field[1], &pair->value, 1);
             }
           else
             {
               LOG_TRACE ("HEADER.%s [%s %d]\n", &field[1], f->type,
                          pair->code);
               dwg_dynapi_header_set_value (dwg, &field[1], &pair->value, 1);
             }
         }
       else
         {
           LOG_ERROR ("skipping HEADER: 9 %s, missing the $", field);
         }
 
       dxf_free_pair (pair);
       pair = dxf_read_pair (dat);
       if (!pair)
         {
           pair = dxf_read_pair (dat);
           if (!pair)
             return 1;
         }
       DXF_BREAK_ENDSEC;
       if (pair->code != 9 /* && pair->code != 0 */)
         goto next_hdrvalue; // for mult. 10,20,30 values
     }
 
   SINCE (R_2000)
   {
     BITCODE_BSd celweight = dxf_revcvt_lweight (_obj->CELWEIGHT);
     // clang-format off
     _obj->FLAGS = (celweight & 0x1f)       |
           (_obj->ENDCAPS     ? 0x60   : 0) |
           (_obj->JOINSTYLE   ? 0x180  : 0) |
           (_obj->LWDISPLAY   ? 0 : 0x200)  |
           (_obj->XEDIT       ? 0 : 0x400)  |
           (_obj->EXTNAMES    ? 0x800  : 0) |
           (_obj->PSTYLEMODE  ? 0x2000 : 0) |
           (_obj->OLESTARTUP  ? 0x4000 : 0);
     // clang-format on
     LOG_TRACE ("HEADER.%s => 0x%x\n", "FLAGS", (unsigned)_obj->FLAGS);
     dwg->Template.MEASUREMENT = _obj->MEASUREMENT;
     LOG_TRACE ("TEMPLATE.MEASUREMENT = HEADER.MEASUREMENT %d\n",
                (int)_obj->MEASUREMENT);
   }
 
   dxf_free_pair (pair);
   return 0;
 }
