commit 4973513f89e0b42ee40bea3f1420a4738a15b719
Merge: 105a55a6a d8c3d5c17
Author: Hector Dearman <hjd@google.com>
Date:   Wed Aug 7 09:48:16 2019 +0000

    Merge "Parse gzip'ed traces"

diff --git a/Android.bp b/Android.bp
index 7be3725c0..a4b5fe5a2 100644
--- a/Android.bp
+++ b/Android.bp
@@ -3681,343 +3681,345 @@ cc_test {
 // GN target: //:trace_processor_shell
 cc_binary {
   name: "trace_processor_shell",
   srcs: [
     ":perfetto_protos_perfetto_common_zero_gen",
     ":perfetto_protos_perfetto_config_zero_gen",
     ":perfetto_protos_perfetto_metrics_android_zero_gen",
     ":perfetto_protos_perfetto_metrics_zero_gen",
     ":perfetto_protos_perfetto_trace_android_zero_gen",
     ":perfetto_protos_perfetto_trace_chrome_zero_gen",
     ":perfetto_protos_perfetto_trace_filesystem_zero_gen",
     ":perfetto_protos_perfetto_trace_ftrace_zero_gen",
     ":perfetto_protos_perfetto_trace_gpu_zero_gen",
     ":perfetto_protos_perfetto_trace_interned_data_zero_gen",
     ":perfetto_protos_perfetto_trace_perfetto_zero_gen",
     ":perfetto_protos_perfetto_trace_power_zero_gen",
     ":perfetto_protos_perfetto_trace_processor_metrics_impl_zero_gen",
     ":perfetto_protos_perfetto_trace_profiling_zero_gen",
     ":perfetto_protos_perfetto_trace_ps_zero_gen",
     ":perfetto_protos_perfetto_trace_sys_stats_zero_gen",
     ":perfetto_protos_perfetto_trace_track_event_zero_gen",
     ":perfetto_protos_perfetto_trace_zero_gen",
     "src/base/event_fd.cc",
     "src/base/file_utils.cc",
     "src/base/metatrace.cc",
     "src/base/paged_memory.cc",
     "src/base/pipe.cc",
     "src/base/string_splitter.cc",
     "src/base/string_utils.cc",
     "src/base/string_view.cc",
     "src/base/temp_file.cc",
     "src/base/thread_checker.cc",
     "src/base/thread_task_runner.cc",
     "src/base/time.cc",
     "src/base/unix_task_runner.cc",
     "src/base/uuid.cc",
     "src/base/virtual_destructors.cc",
     "src/base/waitable_event.cc",
     "src/base/watchdog_posix.cc",
     "src/protozero/message.cc",
     "src/protozero/message_handle.cc",
     "src/protozero/proto_decoder.cc",
     "src/protozero/scattered_heap_buffer.cc",
     "src/protozero/scattered_stream_null_delegate.cc",
     "src/protozero/scattered_stream_writer.cc",
     "src/trace_processor/android_logs_table.cc",
     "src/trace_processor/args_table.cc",
     "src/trace_processor/args_tracker.cc",
     "src/trace_processor/clock_tracker.cc",
     "src/trace_processor/counter_definitions_table.cc",
     "src/trace_processor/counter_values_table.cc",
     "src/trace_processor/event_tracker.cc",
     "src/trace_processor/filtered_row_index.cc",
+    "src/trace_processor/forwarding_trace_parser.cc",
     "src/trace_processor/ftrace_descriptors.cc",
     "src/trace_processor/ftrace_utils.cc",
     "src/trace_processor/fuchsia_provider_view.cc",
     "src/trace_processor/fuchsia_trace_parser.cc",
     "src/trace_processor/fuchsia_trace_tokenizer.cc",
     "src/trace_processor/fuchsia_trace_utils.cc",
     "src/trace_processor/gzip_trace_parser.cc",
     "src/trace_processor/heap_profile_allocation_table.cc",
     "src/trace_processor/heap_profile_callsite_table.cc",
     "src/trace_processor/heap_profile_frame_table.cc",
     "src/trace_processor/heap_profile_mapping_table.cc",
     "src/trace_processor/heap_profile_tracker.cc",
     "src/trace_processor/instants_table.cc",
     "src/trace_processor/metadata_table.cc",
     "src/trace_processor/metrics/descriptors.cc",
     "src/trace_processor/metrics/metrics.cc",
     "src/trace_processor/process_table.cc",
     "src/trace_processor/process_tracker.cc",
     "src/trace_processor/proto_trace_parser.cc",
     "src/trace_processor/proto_trace_tokenizer.cc",
     "src/trace_processor/query_constraints.cc",
     "src/trace_processor/raw_table.cc",
     "src/trace_processor/row_iterators.cc",
     "src/trace_processor/sched_slice_table.cc",
     "src/trace_processor/slice_table.cc",
     "src/trace_processor/slice_tracker.cc",
     "src/trace_processor/span_join_operator_table.cc",
     "src/trace_processor/sql_stats_table.cc",
     "src/trace_processor/sqlite3_str_split.cc",
     "src/trace_processor/sqlite_table.cc",
     "src/trace_processor/stats_table.cc",
     "src/trace_processor/storage_columns.cc",
     "src/trace_processor/storage_schema.cc",
     "src/trace_processor/storage_table.cc",
     "src/trace_processor/string_pool.cc",
     "src/trace_processor/syscall_tracker.cc",
     "src/trace_processor/systrace_parser.cc",
     "src/trace_processor/systrace_trace_parser.cc",
     "src/trace_processor/thread_table.cc",
     "src/trace_processor/trace_processor.cc",
     "src/trace_processor/trace_processor_context.cc",
     "src/trace_processor/trace_processor_impl.cc",
     "src/trace_processor/trace_processor_shell.cc",
     "src/trace_processor/trace_sorter.cc",
     "src/trace_processor/trace_storage.cc",
     "src/trace_processor/virtual_destructors.cc",
     "src/trace_processor/virtual_track_tracker.cc",
     "src/trace_processor/window_operator_table.cc",
   ],
   shared_libs: [
     "liblog",
     "libprotobuf-cpp-full",
     "libz",
   ],
   generated_headers: [
     "gen_merged_sql_metrics",
     "perfetto_protos_perfetto_common_zero_gen_headers",
     "perfetto_protos_perfetto_config_zero_gen_headers",
     "perfetto_protos_perfetto_metrics_android_zero_gen_headers",
     "perfetto_protos_perfetto_metrics_zero_gen_headers",
     "perfetto_protos_perfetto_trace_android_zero_gen_headers",
     "perfetto_protos_perfetto_trace_chrome_zero_gen_headers",
     "perfetto_protos_perfetto_trace_filesystem_zero_gen_headers",
     "perfetto_protos_perfetto_trace_ftrace_zero_gen_headers",
     "perfetto_protos_perfetto_trace_gpu_zero_gen_headers",
     "perfetto_protos_perfetto_trace_interned_data_zero_gen_headers",
     "perfetto_protos_perfetto_trace_perfetto_zero_gen_headers",
     "perfetto_protos_perfetto_trace_power_zero_gen_headers",
     "perfetto_protos_perfetto_trace_processor_metrics_impl_zero_gen_headers",
     "perfetto_protos_perfetto_trace_profiling_zero_gen_headers",
     "perfetto_protos_perfetto_trace_ps_zero_gen_headers",
     "perfetto_protos_perfetto_trace_sys_stats_zero_gen_headers",
     "perfetto_protos_perfetto_trace_track_event_zero_gen_headers",
     "perfetto_protos_perfetto_trace_zero_gen_headers",
   ],
   defaults: [
     "perfetto_defaults",
   ],
   cflags: [
     "-DGOOGLE_PROTOBUF_NO_RTTI",
     "-DGOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
     "-DHAVE_HIDDEN",
     "-DPERFETTO_BUILD_WITH_ANDROID",
   ],
   target: {
     android: {
       shared_libs: [
         "libandroidicu",
         "liblog",
         "libsqlite",
         "libutils",
       ],
     },
     host: {
       static_libs: [
         "libsqlite",
       ],
     },
   },
 }
 
 // GN target: //:trace_to_text
 cc_binary_host {
   name: "trace_to_text",
   srcs: [
     ":perfetto_protos_perfetto_common_lite_gen",
     ":perfetto_protos_perfetto_common_zero_gen",
     ":perfetto_protos_perfetto_config_lite_gen",
     ":perfetto_protos_perfetto_config_zero_gen",
     ":perfetto_protos_perfetto_metrics_android_zero_gen",
     ":perfetto_protos_perfetto_metrics_zero_gen",
     ":perfetto_protos_perfetto_trace_android_lite_gen",
     ":perfetto_protos_perfetto_trace_android_zero_gen",
     ":perfetto_protos_perfetto_trace_chrome_lite_gen",
     ":perfetto_protos_perfetto_trace_chrome_zero_gen",
     ":perfetto_protos_perfetto_trace_filesystem_lite_gen",
     ":perfetto_protos_perfetto_trace_filesystem_zero_gen",
     ":perfetto_protos_perfetto_trace_ftrace_lite_gen",
     ":perfetto_protos_perfetto_trace_ftrace_zero_gen",
     ":perfetto_protos_perfetto_trace_gpu_lite_gen",
     ":perfetto_protos_perfetto_trace_gpu_zero_gen",
     ":perfetto_protos_perfetto_trace_interned_data_lite_gen",
     ":perfetto_protos_perfetto_trace_interned_data_zero_gen",
     ":perfetto_protos_perfetto_trace_lite_gen",
     ":perfetto_protos_perfetto_trace_minimal_lite_gen",
     ":perfetto_protos_perfetto_trace_perfetto_lite_gen",
     ":perfetto_protos_perfetto_trace_perfetto_zero_gen",
     ":perfetto_protos_perfetto_trace_power_lite_gen",
     ":perfetto_protos_perfetto_trace_power_zero_gen",
     ":perfetto_protos_perfetto_trace_processor_metrics_impl_zero_gen",
     ":perfetto_protos_perfetto_trace_profiling_lite_gen",
     ":perfetto_protos_perfetto_trace_profiling_zero_gen",
     ":perfetto_protos_perfetto_trace_ps_lite_gen",
     ":perfetto_protos_perfetto_trace_ps_zero_gen",
     ":perfetto_protos_perfetto_trace_sys_stats_lite_gen",
     ":perfetto_protos_perfetto_trace_sys_stats_zero_gen",
     ":perfetto_protos_perfetto_trace_track_event_lite_gen",
     ":perfetto_protos_perfetto_trace_track_event_zero_gen",
     ":perfetto_protos_perfetto_trace_zero_gen",
     ":perfetto_protos_third_party_pprof_lite_gen",
     "src/base/event_fd.cc",
     "src/base/file_utils.cc",
     "src/base/metatrace.cc",
     "src/base/paged_memory.cc",
     "src/base/pipe.cc",
     "src/base/string_splitter.cc",
     "src/base/string_utils.cc",
     "src/base/string_view.cc",
     "src/base/temp_file.cc",
     "src/base/thread_checker.cc",
     "src/base/thread_task_runner.cc",
     "src/base/time.cc",
     "src/base/unix_task_runner.cc",
     "src/base/uuid.cc",
     "src/base/virtual_destructors.cc",
     "src/base/waitable_event.cc",
     "src/base/watchdog_posix.cc",
     "src/protozero/message.cc",
     "src/protozero/message_handle.cc",
     "src/protozero/proto_decoder.cc",
     "src/protozero/scattered_heap_buffer.cc",
     "src/protozero/scattered_stream_null_delegate.cc",
     "src/protozero/scattered_stream_writer.cc",
     "src/trace_processor/android_logs_table.cc",
     "src/trace_processor/args_table.cc",
     "src/trace_processor/args_tracker.cc",
     "src/trace_processor/clock_tracker.cc",
     "src/trace_processor/counter_definitions_table.cc",
     "src/trace_processor/counter_values_table.cc",
     "src/trace_processor/event_tracker.cc",
     "src/trace_processor/filtered_row_index.cc",
+    "src/trace_processor/forwarding_trace_parser.cc",
     "src/trace_processor/ftrace_descriptors.cc",
     "src/trace_processor/ftrace_utils.cc",
     "src/trace_processor/fuchsia_provider_view.cc",
     "src/trace_processor/fuchsia_trace_parser.cc",
     "src/trace_processor/fuchsia_trace_tokenizer.cc",
     "src/trace_processor/fuchsia_trace_utils.cc",
     "src/trace_processor/gzip_trace_parser.cc",
     "src/trace_processor/heap_profile_allocation_table.cc",
     "src/trace_processor/heap_profile_callsite_table.cc",
     "src/trace_processor/heap_profile_frame_table.cc",
     "src/trace_processor/heap_profile_mapping_table.cc",
     "src/trace_processor/heap_profile_tracker.cc",
     "src/trace_processor/instants_table.cc",
     "src/trace_processor/metadata_table.cc",
     "src/trace_processor/metrics/descriptors.cc",
     "src/trace_processor/metrics/metrics.cc",
     "src/trace_processor/process_table.cc",
     "src/trace_processor/process_tracker.cc",
     "src/trace_processor/proto_trace_parser.cc",
     "src/trace_processor/proto_trace_tokenizer.cc",
     "src/trace_processor/query_constraints.cc",
     "src/trace_processor/raw_table.cc",
     "src/trace_processor/row_iterators.cc",
     "src/trace_processor/sched_slice_table.cc",
     "src/trace_processor/slice_table.cc",
     "src/trace_processor/slice_tracker.cc",
     "src/trace_processor/span_join_operator_table.cc",
     "src/trace_processor/sql_stats_table.cc",
     "src/trace_processor/sqlite3_str_split.cc",
     "src/trace_processor/sqlite_table.cc",
     "src/trace_processor/stats_table.cc",
     "src/trace_processor/storage_columns.cc",
     "src/trace_processor/storage_schema.cc",
     "src/trace_processor/storage_table.cc",
     "src/trace_processor/string_pool.cc",
     "src/trace_processor/syscall_tracker.cc",
     "src/trace_processor/systrace_parser.cc",
     "src/trace_processor/systrace_trace_parser.cc",
     "src/trace_processor/thread_table.cc",
     "src/trace_processor/trace_processor.cc",
     "src/trace_processor/trace_processor_context.cc",
     "src/trace_processor/trace_processor_impl.cc",
     "src/trace_processor/trace_sorter.cc",
     "src/trace_processor/trace_storage.cc",
     "src/trace_processor/virtual_destructors.cc",
     "src/trace_processor/virtual_track_tracker.cc",
     "src/trace_processor/window_operator_table.cc",
     "tools/trace_to_text/local_symbolizer.cc",
     "tools/trace_to_text/main.cc",
     "tools/trace_to_text/pprof_builder.cc",
     "tools/trace_to_text/profile_visitor.cc",
     "tools/trace_to_text/proto_full_utils.cc",
     "tools/trace_to_text/symbolize_profile.cc",
     "tools/trace_to_text/symbolizer.cc",
     "tools/trace_to_text/trace_symbol_table.cc",
     "tools/trace_to_text/trace_to_profile.cc",
     "tools/trace_to_text/trace_to_systrace.cc",
     "tools/trace_to_text/trace_to_text.cc",
     "tools/trace_to_text/utils.cc",
   ],
   shared_libs: [
     "liblog",
     "libprotobuf-cpp-full",
     "libprotobuf-cpp-lite",
     "libz",
   ],
   static_libs: [
     "libsqlite",
   ],
   generated_headers: [
     "gen_merged_sql_metrics",
     "perfetto_protos_perfetto_common_lite_gen_headers",
     "perfetto_protos_perfetto_common_zero_gen_headers",
     "perfetto_protos_perfetto_config_lite_gen_headers",
     "perfetto_protos_perfetto_config_zero_gen_headers",
     "perfetto_protos_perfetto_metrics_android_zero_gen_headers",
     "perfetto_protos_perfetto_metrics_zero_gen_headers",
     "perfetto_protos_perfetto_trace_android_lite_gen_headers",
     "perfetto_protos_perfetto_trace_android_zero_gen_headers",
     "perfetto_protos_perfetto_trace_chrome_lite_gen_headers",
     "perfetto_protos_perfetto_trace_chrome_zero_gen_headers",
     "perfetto_protos_perfetto_trace_filesystem_lite_gen_headers",
     "perfetto_protos_perfetto_trace_filesystem_zero_gen_headers",
     "perfetto_protos_perfetto_trace_ftrace_lite_gen_headers",
     "perfetto_protos_perfetto_trace_ftrace_zero_gen_headers",
     "perfetto_protos_perfetto_trace_gpu_lite_gen_headers",
     "perfetto_protos_perfetto_trace_gpu_zero_gen_headers",
     "perfetto_protos_perfetto_trace_interned_data_lite_gen_headers",
     "perfetto_protos_perfetto_trace_interned_data_zero_gen_headers",
     "perfetto_protos_perfetto_trace_lite_gen_headers",
     "perfetto_protos_perfetto_trace_minimal_lite_gen_headers",
     "perfetto_protos_perfetto_trace_perfetto_lite_gen_headers",
     "perfetto_protos_perfetto_trace_perfetto_zero_gen_headers",
     "perfetto_protos_perfetto_trace_power_lite_gen_headers",
     "perfetto_protos_perfetto_trace_power_zero_gen_headers",
     "perfetto_protos_perfetto_trace_processor_metrics_impl_zero_gen_headers",
     "perfetto_protos_perfetto_trace_profiling_lite_gen_headers",
     "perfetto_protos_perfetto_trace_profiling_zero_gen_headers",
     "perfetto_protos_perfetto_trace_ps_lite_gen_headers",
     "perfetto_protos_perfetto_trace_ps_zero_gen_headers",
     "perfetto_protos_perfetto_trace_sys_stats_lite_gen_headers",
     "perfetto_protos_perfetto_trace_sys_stats_zero_gen_headers",
     "perfetto_protos_perfetto_trace_track_event_lite_gen_headers",
     "perfetto_protos_perfetto_trace_track_event_zero_gen_headers",
     "perfetto_protos_perfetto_trace_zero_gen_headers",
     "perfetto_protos_third_party_pprof_lite_gen_headers",
   ],
   defaults: [
     "perfetto_defaults",
   ],
   cflags: [
     "-DGOOGLE_PROTOBUF_NO_RTTI",
     "-DGOOGLE_PROTOBUF_NO_STATIC_INITIALIZER",
     "-DHAVE_HIDDEN",
     "-DPERFETTO_BUILD_WITH_ANDROID",
   ],
 }
 
 // GN target: //:traced
diff --git a/BUILD b/BUILD
index 144c09f48..6703ee1a0 100644
--- a/BUILD
+++ b/BUILD
@@ -256,766 +256,772 @@ cc_library(
 # GN target: //src/trace_processor:trace_processor
 cc_library(
     name = "trace_processor",
     srcs = [
         "src/base/event_fd.cc",
         "src/base/file_utils.cc",
         "src/base/metatrace.cc",
         "src/base/paged_memory.cc",
         "src/base/pipe.cc",
         "src/base/string_splitter.cc",
         "src/base/string_utils.cc",
         "src/base/string_view.cc",
         "src/base/temp_file.cc",
         "src/base/thread_checker.cc",
         "src/base/thread_task_runner.cc",
         "src/base/time.cc",
         "src/base/unix_task_runner.cc",
         "src/base/uuid.cc",
         "src/base/virtual_destructors.cc",
         "src/base/waitable_event.cc",
         "src/base/watchdog_posix.cc",
         "src/protozero/message.cc",
         "src/protozero/message_handle.cc",
         "src/protozero/proto_decoder.cc",
         "src/protozero/scattered_heap_buffer.cc",
         "src/protozero/scattered_stream_null_delegate.cc",
         "src/protozero/scattered_stream_writer.cc",
         "src/trace_processor/android_logs_table.cc",
         "src/trace_processor/android_logs_table.h",
         "src/trace_processor/args_table.cc",
         "src/trace_processor/args_table.h",
         "src/trace_processor/args_tracker.cc",
         "src/trace_processor/args_tracker.h",
         "src/trace_processor/chunked_trace_reader.h",
         "src/trace_processor/clock_tracker.cc",
         "src/trace_processor/clock_tracker.h",
         "src/trace_processor/counter_definitions_table.cc",
         "src/trace_processor/counter_definitions_table.h",
         "src/trace_processor/counter_values_table.cc",
         "src/trace_processor/counter_values_table.h",
         "src/trace_processor/event_tracker.cc",
         "src/trace_processor/event_tracker.h",
         "src/trace_processor/export_json.cc",
         "src/trace_processor/export_json.h",
         "src/trace_processor/filtered_row_index.cc",
         "src/trace_processor/filtered_row_index.h",
+        "src/trace_processor/forwarding_trace_parser.cc",
+        "src/trace_processor/forwarding_trace_parser.h",
         "src/trace_processor/ftrace_descriptors.cc",
         "src/trace_processor/ftrace_descriptors.h",
         "src/trace_processor/ftrace_utils.cc",
         "src/trace_processor/ftrace_utils.h",
         "src/trace_processor/fuchsia_provider_view.cc",
         "src/trace_processor/fuchsia_provider_view.h",
         "src/trace_processor/fuchsia_trace_parser.cc",
         "src/trace_processor/fuchsia_trace_parser.h",
         "src/trace_processor/fuchsia_trace_tokenizer.cc",
         "src/trace_processor/fuchsia_trace_tokenizer.h",
         "src/trace_processor/fuchsia_trace_utils.cc",
         "src/trace_processor/fuchsia_trace_utils.h",
         "src/trace_processor/gzip_trace_parser.cc",
         "src/trace_processor/gzip_trace_parser.h",
         "src/trace_processor/heap_profile_allocation_table.cc",
         "src/trace_processor/heap_profile_allocation_table.h",
         "src/trace_processor/heap_profile_callsite_table.cc",
         "src/trace_processor/heap_profile_callsite_table.h",
         "src/trace_processor/heap_profile_frame_table.cc",
         "src/trace_processor/heap_profile_frame_table.h",
         "src/trace_processor/heap_profile_mapping_table.cc",
         "src/trace_processor/heap_profile_mapping_table.h",
         "src/trace_processor/heap_profile_tracker.cc",
         "src/trace_processor/heap_profile_tracker.h",
         "src/trace_processor/instants_table.cc",
         "src/trace_processor/instants_table.h",
         "src/trace_processor/json_trace_parser.cc",
         "src/trace_processor/json_trace_parser.h",
         "src/trace_processor/json_trace_tokenizer.cc",
         "src/trace_processor/json_trace_tokenizer.h",
         "src/trace_processor/json_trace_utils.cc",
         "src/trace_processor/json_trace_utils.h",
         "src/trace_processor/metadata.h",
         "src/trace_processor/metadata_table.cc",
         "src/trace_processor/metadata_table.h",
         "src/trace_processor/metrics/descriptors.cc",
         "src/trace_processor/metrics/descriptors.h",
         "src/trace_processor/metrics/metrics.cc",
         "src/trace_processor/metrics/metrics.descriptor.h",
         "src/trace_processor/metrics/metrics.h",
         "src/trace_processor/metrics/sql_metrics.h",
         "src/trace_processor/null_term_string_view.h",
         "src/trace_processor/process_table.cc",
         "src/trace_processor/process_table.h",
         "src/trace_processor/process_tracker.cc",
         "src/trace_processor/process_tracker.h",
         "src/trace_processor/proto_incremental_state.h",
         "src/trace_processor/proto_trace_parser.cc",
         "src/trace_processor/proto_trace_parser.h",
         "src/trace_processor/proto_trace_tokenizer.cc",
         "src/trace_processor/proto_trace_tokenizer.h",
         "src/trace_processor/query_constraints.cc",
         "src/trace_processor/query_constraints.h",
         "src/trace_processor/raw_table.cc",
         "src/trace_processor/raw_table.h",
         "src/trace_processor/row_iterators.cc",
         "src/trace_processor/row_iterators.h",
         "src/trace_processor/sched_slice_table.cc",
         "src/trace_processor/sched_slice_table.h",
         "src/trace_processor/scoped_db.h",
         "src/trace_processor/slice_table.cc",
         "src/trace_processor/slice_table.h",
         "src/trace_processor/slice_tracker.cc",
         "src/trace_processor/slice_tracker.h",
         "src/trace_processor/span_join_operator_table.cc",
         "src/trace_processor/span_join_operator_table.h",
         "src/trace_processor/sql_stats_table.cc",
         "src/trace_processor/sql_stats_table.h",
         "src/trace_processor/sqlite.h",
         "src/trace_processor/sqlite3_str_split.cc",
         "src/trace_processor/sqlite3_str_split.h",
         "src/trace_processor/sqlite_table.cc",
         "src/trace_processor/sqlite_table.h",
         "src/trace_processor/sqlite_utils.h",
         "src/trace_processor/stats.h",
         "src/trace_processor/stats_table.cc",
         "src/trace_processor/stats_table.h",
         "src/trace_processor/storage_columns.cc",
         "src/trace_processor/storage_columns.h",
         "src/trace_processor/storage_schema.cc",
         "src/trace_processor/storage_schema.h",
         "src/trace_processor/storage_table.cc",
         "src/trace_processor/storage_table.h",
         "src/trace_processor/string_pool.cc",
         "src/trace_processor/string_pool.h",
         "src/trace_processor/syscall_tracker.cc",
         "src/trace_processor/syscall_tracker.h",
         "src/trace_processor/syscalls_aarch32.h",
         "src/trace_processor/syscalls_aarch64.h",
         "src/trace_processor/syscalls_armeabi.h",
         "src/trace_processor/syscalls_x86_64.h",
         "src/trace_processor/systrace_parser.cc",
         "src/trace_processor/systrace_parser.h",
         "src/trace_processor/systrace_trace_parser.cc",
         "src/trace_processor/systrace_trace_parser.h",
         "src/trace_processor/thread_table.cc",
         "src/trace_processor/thread_table.h",
         "src/trace_processor/trace_blob_view.h",
         "src/trace_processor/trace_parser.h",
         "src/trace_processor/trace_processor.cc",
         "src/trace_processor/trace_processor_context.cc",
         "src/trace_processor/trace_processor_context.h",
         "src/trace_processor/trace_processor_impl.cc",
         "src/trace_processor/trace_processor_impl.h",
         "src/trace_processor/trace_sorter.cc",
         "src/trace_processor/trace_sorter.h",
         "src/trace_processor/trace_storage.cc",
         "src/trace_processor/trace_storage.h",
         "src/trace_processor/variadic.h",
         "src/trace_processor/virtual_destructors.cc",
         "src/trace_processor/virtual_track_tracker.cc",
         "src/trace_processor/virtual_track_tracker.h",
         "src/trace_processor/window_operator_table.cc",
         "src/trace_processor/window_operator_table.h",
     ],
     hdrs = [
         "include/perfetto/base/build_config.h",
         "include/perfetto/base/compiler.h",
         "include/perfetto/base/copyable_ptr.h",
         "include/perfetto/base/export.h",
         "include/perfetto/base/logging.h",
         "include/perfetto/base/task_runner.h",
         "include/perfetto/ext/base/circular_queue.h",
         "include/perfetto/ext/base/container_annotations.h",
         "include/perfetto/ext/base/event_fd.h",
         "include/perfetto/ext/base/file_utils.h",
         "include/perfetto/ext/base/hash.h",
         "include/perfetto/ext/base/metatrace.h",
         "include/perfetto/ext/base/metatrace_events.h",
         "include/perfetto/ext/base/no_destructor.h",
         "include/perfetto/ext/base/optional.h",
         "include/perfetto/ext/base/paged_memory.h",
         "include/perfetto/ext/base/pipe.h",
         "include/perfetto/ext/base/scoped_file.h",
         "include/perfetto/ext/base/small_set.h",
         "include/perfetto/ext/base/string_splitter.h",
         "include/perfetto/ext/base/string_utils.h",
         "include/perfetto/ext/base/string_view.h",
         "include/perfetto/ext/base/string_writer.h",
         "include/perfetto/ext/base/temp_file.h",
         "include/perfetto/ext/base/thread_annotations.h",
         "include/perfetto/ext/base/thread_checker.h",
         "include/perfetto/ext/base/thread_task_runner.h",
         "include/perfetto/ext/base/thread_utils.h",
         "include/perfetto/ext/base/time.h",
         "include/perfetto/ext/base/unix_socket.h",
         "include/perfetto/ext/base/unix_task_runner.h",
         "include/perfetto/ext/base/utils.h",
         "include/perfetto/ext/base/uuid.h",
         "include/perfetto/ext/base/waitable_event.h",
         "include/perfetto/ext/base/watchdog.h",
         "include/perfetto/ext/base/watchdog_noop.h",
         "include/perfetto/ext/base/watchdog_posix.h",
         "include/perfetto/ext/base/weak_ptr.h",
         "include/perfetto/ext/traced/sys_stats_counters.h",
         "include/perfetto/protozero/contiguous_memory_range.h",
         "include/perfetto/protozero/field.h",
         "include/perfetto/protozero/message.h",
         "include/perfetto/protozero/message_handle.h",
         "include/perfetto/protozero/proto_decoder.h",
         "include/perfetto/protozero/proto_utils.h",
         "include/perfetto/protozero/scattered_heap_buffer.h",
         "include/perfetto/protozero/scattered_stream_null_delegate.h",
         "include/perfetto/protozero/scattered_stream_writer.h",
         "include/perfetto/trace_processor/basic_types.h",
         "include/perfetto/trace_processor/status.h",
         "include/perfetto/trace_processor/trace_processor.h",
     ],
     deps = [
         "//third_party/perfetto:gen_merged_sql_metrics",
         "//third_party/perfetto/google:jsoncpp",
         "//third_party/perfetto/protos:common_zero_cc_proto",
         "//third_party/perfetto/protos:config_zero_cc_proto",
         "//third_party/perfetto/protos:metrics_android_zero_cc_proto",
         "//third_party/perfetto/protos:metrics_zero_cc_proto",
         "//third_party/perfetto/protos:trace_android_zero_cc_proto",
         "//third_party/perfetto/protos:trace_chrome_zero_cc_proto",
         "//third_party/perfetto/protos:trace_filesystem_zero_cc_proto",
         "//third_party/perfetto/protos:trace_ftrace_zero_cc_proto",
         "//third_party/perfetto/protos:trace_gpu_zero_cc_proto",
         "//third_party/perfetto/protos:trace_interned_data_zero_cc_proto",
         "//third_party/perfetto/protos:trace_perfetto_zero_cc_proto",
         "//third_party/perfetto/protos:trace_power_zero_cc_proto",
         "//third_party/perfetto/protos:trace_processor_metrics_impl_zero_cc_proto",
         "//third_party/perfetto/protos:trace_profiling_zero_cc_proto",
         "//third_party/perfetto/protos:trace_ps_zero_cc_proto",
         "//third_party/perfetto/protos:trace_sys_stats_zero_cc_proto",
         "//third_party/perfetto/protos:trace_track_event_zero_cc_proto",
         "//third_party/perfetto/protos:trace_zero_cc_proto",
         "//third_party/sqlite",
         "//third_party/sqlite:sqlite_ext_percentile",
         "//third_party/zlib:zlibsystem",
     ],
 )
 
 # GN target: //:trace_processor_shell
 cc_binary(
     name = "trace_processor_shell",
     srcs = [
         "include/perfetto/base/build_config.h",
         "include/perfetto/base/compiler.h",
         "include/perfetto/base/copyable_ptr.h",
         "include/perfetto/base/export.h",
         "include/perfetto/base/logging.h",
         "include/perfetto/base/task_runner.h",
         "include/perfetto/ext/base/circular_queue.h",
         "include/perfetto/ext/base/container_annotations.h",
         "include/perfetto/ext/base/event_fd.h",
         "include/perfetto/ext/base/file_utils.h",
         "include/perfetto/ext/base/hash.h",
         "include/perfetto/ext/base/metatrace.h",
         "include/perfetto/ext/base/metatrace_events.h",
         "include/perfetto/ext/base/no_destructor.h",
         "include/perfetto/ext/base/optional.h",
         "include/perfetto/ext/base/paged_memory.h",
         "include/perfetto/ext/base/pipe.h",
         "include/perfetto/ext/base/scoped_file.h",
         "include/perfetto/ext/base/small_set.h",
         "include/perfetto/ext/base/string_splitter.h",
         "include/perfetto/ext/base/string_utils.h",
         "include/perfetto/ext/base/string_view.h",
         "include/perfetto/ext/base/string_writer.h",
         "include/perfetto/ext/base/temp_file.h",
         "include/perfetto/ext/base/thread_annotations.h",
         "include/perfetto/ext/base/thread_checker.h",
         "include/perfetto/ext/base/thread_task_runner.h",
         "include/perfetto/ext/base/thread_utils.h",
         "include/perfetto/ext/base/time.h",
         "include/perfetto/ext/base/unix_socket.h",
         "include/perfetto/ext/base/unix_task_runner.h",
         "include/perfetto/ext/base/utils.h",
         "include/perfetto/ext/base/uuid.h",
         "include/perfetto/ext/base/waitable_event.h",
         "include/perfetto/ext/base/watchdog.h",
         "include/perfetto/ext/base/watchdog_noop.h",
         "include/perfetto/ext/base/watchdog_posix.h",
         "include/perfetto/ext/base/weak_ptr.h",
         "include/perfetto/ext/traced/sys_stats_counters.h",
         "include/perfetto/protozero/contiguous_memory_range.h",
         "include/perfetto/protozero/field.h",
         "include/perfetto/protozero/message.h",
         "include/perfetto/protozero/message_handle.h",
         "include/perfetto/protozero/proto_decoder.h",
         "include/perfetto/protozero/proto_utils.h",
         "include/perfetto/protozero/scattered_heap_buffer.h",
         "include/perfetto/protozero/scattered_stream_null_delegate.h",
         "include/perfetto/protozero/scattered_stream_writer.h",
         "include/perfetto/trace_processor/basic_types.h",
         "include/perfetto/trace_processor/status.h",
         "include/perfetto/trace_processor/trace_processor.h",
         "src/base/event_fd.cc",
         "src/base/file_utils.cc",
         "src/base/metatrace.cc",
         "src/base/paged_memory.cc",
         "src/base/pipe.cc",
         "src/base/string_splitter.cc",
         "src/base/string_utils.cc",
         "src/base/string_view.cc",
         "src/base/temp_file.cc",
         "src/base/thread_checker.cc",
         "src/base/thread_task_runner.cc",
         "src/base/time.cc",
         "src/base/unix_task_runner.cc",
         "src/base/uuid.cc",
         "src/base/virtual_destructors.cc",
         "src/base/waitable_event.cc",
         "src/base/watchdog_posix.cc",
         "src/protozero/message.cc",
         "src/protozero/message_handle.cc",
         "src/protozero/proto_decoder.cc",
         "src/protozero/scattered_heap_buffer.cc",
         "src/protozero/scattered_stream_null_delegate.cc",
         "src/protozero/scattered_stream_writer.cc",
         "src/trace_processor/android_logs_table.cc",
         "src/trace_processor/android_logs_table.h",
         "src/trace_processor/args_table.cc",
         "src/trace_processor/args_table.h",
         "src/trace_processor/args_tracker.cc",
         "src/trace_processor/args_tracker.h",
         "src/trace_processor/chunked_trace_reader.h",
         "src/trace_processor/clock_tracker.cc",
         "src/trace_processor/clock_tracker.h",
         "src/trace_processor/counter_definitions_table.cc",
         "src/trace_processor/counter_definitions_table.h",
         "src/trace_processor/counter_values_table.cc",
         "src/trace_processor/counter_values_table.h",
         "src/trace_processor/event_tracker.cc",
         "src/trace_processor/event_tracker.h",
         "src/trace_processor/export_json.cc",
         "src/trace_processor/export_json.h",
         "src/trace_processor/filtered_row_index.cc",
         "src/trace_processor/filtered_row_index.h",
+        "src/trace_processor/forwarding_trace_parser.cc",
+        "src/trace_processor/forwarding_trace_parser.h",
         "src/trace_processor/ftrace_descriptors.cc",
         "src/trace_processor/ftrace_descriptors.h",
         "src/trace_processor/ftrace_utils.cc",
         "src/trace_processor/ftrace_utils.h",
         "src/trace_processor/fuchsia_provider_view.cc",
         "src/trace_processor/fuchsia_provider_view.h",
         "src/trace_processor/fuchsia_trace_parser.cc",
         "src/trace_processor/fuchsia_trace_parser.h",
         "src/trace_processor/fuchsia_trace_tokenizer.cc",
         "src/trace_processor/fuchsia_trace_tokenizer.h",
         "src/trace_processor/fuchsia_trace_utils.cc",
         "src/trace_processor/fuchsia_trace_utils.h",
         "src/trace_processor/gzip_trace_parser.cc",
         "src/trace_processor/gzip_trace_parser.h",
         "src/trace_processor/heap_profile_allocation_table.cc",
         "src/trace_processor/heap_profile_allocation_table.h",
         "src/trace_processor/heap_profile_callsite_table.cc",
         "src/trace_processor/heap_profile_callsite_table.h",
         "src/trace_processor/heap_profile_frame_table.cc",
         "src/trace_processor/heap_profile_frame_table.h",
         "src/trace_processor/heap_profile_mapping_table.cc",
         "src/trace_processor/heap_profile_mapping_table.h",
         "src/trace_processor/heap_profile_tracker.cc",
         "src/trace_processor/heap_profile_tracker.h",
         "src/trace_processor/instants_table.cc",
         "src/trace_processor/instants_table.h",
         "src/trace_processor/json_trace_parser.cc",
         "src/trace_processor/json_trace_parser.h",
         "src/trace_processor/json_trace_tokenizer.cc",
         "src/trace_processor/json_trace_tokenizer.h",
         "src/trace_processor/json_trace_utils.cc",
         "src/trace_processor/json_trace_utils.h",
         "src/trace_processor/metadata.h",
         "src/trace_processor/metadata_table.cc",
         "src/trace_processor/metadata_table.h",
         "src/trace_processor/metrics/descriptors.cc",
         "src/trace_processor/metrics/descriptors.h",
         "src/trace_processor/metrics/metrics.cc",
         "src/trace_processor/metrics/metrics.descriptor.h",
         "src/trace_processor/metrics/metrics.h",
         "src/trace_processor/metrics/sql_metrics.h",
         "src/trace_processor/null_term_string_view.h",
         "src/trace_processor/process_table.cc",
         "src/trace_processor/process_table.h",
         "src/trace_processor/process_tracker.cc",
         "src/trace_processor/process_tracker.h",
         "src/trace_processor/proto_incremental_state.h",
         "src/trace_processor/proto_trace_parser.cc",
         "src/trace_processor/proto_trace_parser.h",
         "src/trace_processor/proto_trace_tokenizer.cc",
         "src/trace_processor/proto_trace_tokenizer.h",
         "src/trace_processor/query_constraints.cc",
         "src/trace_processor/query_constraints.h",
         "src/trace_processor/raw_table.cc",
         "src/trace_processor/raw_table.h",
         "src/trace_processor/row_iterators.cc",
         "src/trace_processor/row_iterators.h",
         "src/trace_processor/sched_slice_table.cc",
         "src/trace_processor/sched_slice_table.h",
         "src/trace_processor/scoped_db.h",
         "src/trace_processor/slice_table.cc",
         "src/trace_processor/slice_table.h",
         "src/trace_processor/slice_tracker.cc",
         "src/trace_processor/slice_tracker.h",
         "src/trace_processor/span_join_operator_table.cc",
         "src/trace_processor/span_join_operator_table.h",
         "src/trace_processor/sql_stats_table.cc",
         "src/trace_processor/sql_stats_table.h",
         "src/trace_processor/sqlite.h",
         "src/trace_processor/sqlite3_str_split.cc",
         "src/trace_processor/sqlite3_str_split.h",
         "src/trace_processor/sqlite_table.cc",
         "src/trace_processor/sqlite_table.h",
         "src/trace_processor/sqlite_utils.h",
         "src/trace_processor/stats.h",
         "src/trace_processor/stats_table.cc",
         "src/trace_processor/stats_table.h",
         "src/trace_processor/storage_columns.cc",
         "src/trace_processor/storage_columns.h",
         "src/trace_processor/storage_schema.cc",
         "src/trace_processor/storage_schema.h",
         "src/trace_processor/storage_table.cc",
         "src/trace_processor/storage_table.h",
         "src/trace_processor/string_pool.cc",
         "src/trace_processor/string_pool.h",
         "src/trace_processor/syscall_tracker.cc",
         "src/trace_processor/syscall_tracker.h",
         "src/trace_processor/syscalls_aarch32.h",
         "src/trace_processor/syscalls_aarch64.h",
         "src/trace_processor/syscalls_armeabi.h",
         "src/trace_processor/syscalls_x86_64.h",
         "src/trace_processor/systrace_parser.cc",
         "src/trace_processor/systrace_parser.h",
         "src/trace_processor/systrace_trace_parser.cc",
         "src/trace_processor/systrace_trace_parser.h",
         "src/trace_processor/thread_table.cc",
         "src/trace_processor/thread_table.h",
         "src/trace_processor/trace_blob_view.h",
         "src/trace_processor/trace_parser.h",
         "src/trace_processor/trace_processor.cc",
         "src/trace_processor/trace_processor_context.cc",
         "src/trace_processor/trace_processor_context.h",
         "src/trace_processor/trace_processor_impl.cc",
         "src/trace_processor/trace_processor_impl.h",
         "src/trace_processor/trace_processor_shell.cc",
         "src/trace_processor/trace_sorter.cc",
         "src/trace_processor/trace_sorter.h",
         "src/trace_processor/trace_storage.cc",
         "src/trace_processor/trace_storage.h",
         "src/trace_processor/variadic.h",
         "src/trace_processor/virtual_destructors.cc",
         "src/trace_processor/virtual_track_tracker.cc",
         "src/trace_processor/virtual_track_tracker.h",
         "src/trace_processor/window_operator_table.cc",
         "src/trace_processor/window_operator_table.h",
     ],
     deps = [
         "//third_party/perfetto:gen_merged_sql_metrics",
         "//third_party/perfetto/google:jsoncpp",
         "//third_party/perfetto/google:linenoise",
         "//third_party/perfetto/google:perfetto_version",
         "//third_party/perfetto/protos:common_zero_cc_proto",
         "//third_party/perfetto/protos:config_zero_cc_proto",
         "//third_party/perfetto/protos:metrics_android_zero_cc_proto",
         "//third_party/perfetto/protos:metrics_zero_cc_proto",
         "//third_party/perfetto/protos:trace_android_zero_cc_proto",
         "//third_party/perfetto/protos:trace_chrome_zero_cc_proto",
         "//third_party/perfetto/protos:trace_filesystem_zero_cc_proto",
         "//third_party/perfetto/protos:trace_ftrace_zero_cc_proto",
         "//third_party/perfetto/protos:trace_gpu_zero_cc_proto",
         "//third_party/perfetto/protos:trace_interned_data_zero_cc_proto",
         "//third_party/perfetto/protos:trace_perfetto_zero_cc_proto",
         "//third_party/perfetto/protos:trace_power_zero_cc_proto",
         "//third_party/perfetto/protos:trace_processor_metrics_impl_zero_cc_proto",
         "//third_party/perfetto/protos:trace_profiling_zero_cc_proto",
         "//third_party/perfetto/protos:trace_ps_zero_cc_proto",
         "//third_party/perfetto/protos:trace_sys_stats_zero_cc_proto",
         "//third_party/perfetto/protos:trace_track_event_zero_cc_proto",
         "//third_party/perfetto/protos:trace_zero_cc_proto",
         "//third_party/protobuf:libprotoc_legacy",
         "//third_party/protobuf:protobuf_legacy",
         "//third_party/sqlite",
         "//third_party/sqlite:sqlite_ext_percentile",
         "//third_party/zlib:zlibsystem",
     ],
 )
 
 # GN target: //tools/trace_to_text:trace_to_text_host
 cc_binary(
     name = "trace_to_text",
     srcs = [
         "include/perfetto/base/build_config.h",
         "include/perfetto/base/compiler.h",
         "include/perfetto/base/copyable_ptr.h",
         "include/perfetto/base/export.h",
         "include/perfetto/base/logging.h",
         "include/perfetto/base/task_runner.h",
         "include/perfetto/ext/base/circular_queue.h",
         "include/perfetto/ext/base/container_annotations.h",
         "include/perfetto/ext/base/event_fd.h",
         "include/perfetto/ext/base/file_utils.h",
         "include/perfetto/ext/base/hash.h",
         "include/perfetto/ext/base/metatrace.h",
         "include/perfetto/ext/base/metatrace_events.h",
         "include/perfetto/ext/base/no_destructor.h",
         "include/perfetto/ext/base/optional.h",
         "include/perfetto/ext/base/paged_memory.h",
         "include/perfetto/ext/base/pipe.h",
         "include/perfetto/ext/base/scoped_file.h",
         "include/perfetto/ext/base/small_set.h",
         "include/perfetto/ext/base/string_splitter.h",
         "include/perfetto/ext/base/string_utils.h",
         "include/perfetto/ext/base/string_view.h",
         "include/perfetto/ext/base/string_writer.h",
         "include/perfetto/ext/base/temp_file.h",
         "include/perfetto/ext/base/thread_annotations.h",
         "include/perfetto/ext/base/thread_checker.h",
         "include/perfetto/ext/base/thread_task_runner.h",
         "include/perfetto/ext/base/thread_utils.h",
         "include/perfetto/ext/base/time.h",
         "include/perfetto/ext/base/unix_socket.h",
         "include/perfetto/ext/base/unix_task_runner.h",
         "include/perfetto/ext/base/utils.h",
         "include/perfetto/ext/base/uuid.h",
         "include/perfetto/ext/base/waitable_event.h",
         "include/perfetto/ext/base/watchdog.h",
         "include/perfetto/ext/base/watchdog_noop.h",
         "include/perfetto/ext/base/watchdog_posix.h",
         "include/perfetto/ext/base/weak_ptr.h",
         "include/perfetto/ext/traced/sys_stats_counters.h",
         "include/perfetto/protozero/contiguous_memory_range.h",
         "include/perfetto/protozero/field.h",
         "include/perfetto/protozero/message.h",
         "include/perfetto/protozero/message_handle.h",
         "include/perfetto/protozero/proto_decoder.h",
         "include/perfetto/protozero/proto_utils.h",
         "include/perfetto/protozero/scattered_heap_buffer.h",
         "include/perfetto/protozero/scattered_stream_null_delegate.h",
         "include/perfetto/protozero/scattered_stream_writer.h",
         "include/perfetto/trace_processor/basic_types.h",
         "include/perfetto/trace_processor/status.h",
         "include/perfetto/trace_processor/trace_processor.h",
         "src/base/event_fd.cc",
         "src/base/file_utils.cc",
         "src/base/metatrace.cc",
         "src/base/paged_memory.cc",
         "src/base/pipe.cc",
         "src/base/string_splitter.cc",
         "src/base/string_utils.cc",
         "src/base/string_view.cc",
         "src/base/temp_file.cc",
         "src/base/thread_checker.cc",
         "src/base/thread_task_runner.cc",
         "src/base/time.cc",
         "src/base/unix_task_runner.cc",
         "src/base/uuid.cc",
         "src/base/virtual_destructors.cc",
         "src/base/waitable_event.cc",
         "src/base/watchdog_posix.cc",
         "src/protozero/message.cc",
         "src/protozero/message_handle.cc",
         "src/protozero/proto_decoder.cc",
         "src/protozero/scattered_heap_buffer.cc",
         "src/protozero/scattered_stream_null_delegate.cc",
         "src/protozero/scattered_stream_writer.cc",
         "src/trace_processor/android_logs_table.cc",
         "src/trace_processor/android_logs_table.h",
         "src/trace_processor/args_table.cc",
         "src/trace_processor/args_table.h",
         "src/trace_processor/args_tracker.cc",
         "src/trace_processor/args_tracker.h",
         "src/trace_processor/chunked_trace_reader.h",
         "src/trace_processor/clock_tracker.cc",
         "src/trace_processor/clock_tracker.h",
         "src/trace_processor/counter_definitions_table.cc",
         "src/trace_processor/counter_definitions_table.h",
         "src/trace_processor/counter_values_table.cc",
         "src/trace_processor/counter_values_table.h",
         "src/trace_processor/event_tracker.cc",
         "src/trace_processor/event_tracker.h",
         "src/trace_processor/export_json.cc",
         "src/trace_processor/export_json.h",
         "src/trace_processor/filtered_row_index.cc",
         "src/trace_processor/filtered_row_index.h",
+        "src/trace_processor/forwarding_trace_parser.cc",
+        "src/trace_processor/forwarding_trace_parser.h",
         "src/trace_processor/ftrace_descriptors.cc",
         "src/trace_processor/ftrace_descriptors.h",
         "src/trace_processor/ftrace_utils.cc",
         "src/trace_processor/ftrace_utils.h",
         "src/trace_processor/fuchsia_provider_view.cc",
         "src/trace_processor/fuchsia_provider_view.h",
         "src/trace_processor/fuchsia_trace_parser.cc",
         "src/trace_processor/fuchsia_trace_parser.h",
         "src/trace_processor/fuchsia_trace_tokenizer.cc",
         "src/trace_processor/fuchsia_trace_tokenizer.h",
         "src/trace_processor/fuchsia_trace_utils.cc",
         "src/trace_processor/fuchsia_trace_utils.h",
         "src/trace_processor/gzip_trace_parser.cc",
         "src/trace_processor/gzip_trace_parser.h",
         "src/trace_processor/heap_profile_allocation_table.cc",
         "src/trace_processor/heap_profile_allocation_table.h",
         "src/trace_processor/heap_profile_callsite_table.cc",
         "src/trace_processor/heap_profile_callsite_table.h",
         "src/trace_processor/heap_profile_frame_table.cc",
         "src/trace_processor/heap_profile_frame_table.h",
         "src/trace_processor/heap_profile_mapping_table.cc",
         "src/trace_processor/heap_profile_mapping_table.h",
         "src/trace_processor/heap_profile_tracker.cc",
         "src/trace_processor/heap_profile_tracker.h",
         "src/trace_processor/instants_table.cc",
         "src/trace_processor/instants_table.h",
         "src/trace_processor/json_trace_parser.cc",
         "src/trace_processor/json_trace_parser.h",
         "src/trace_processor/json_trace_tokenizer.cc",
         "src/trace_processor/json_trace_tokenizer.h",
         "src/trace_processor/json_trace_utils.cc",
         "src/trace_processor/json_trace_utils.h",
         "src/trace_processor/metadata.h",
         "src/trace_processor/metadata_table.cc",
         "src/trace_processor/metadata_table.h",
         "src/trace_processor/metrics/descriptors.cc",
         "src/trace_processor/metrics/descriptors.h",
         "src/trace_processor/metrics/metrics.cc",
         "src/trace_processor/metrics/metrics.descriptor.h",
         "src/trace_processor/metrics/metrics.h",
         "src/trace_processor/metrics/sql_metrics.h",
         "src/trace_processor/null_term_string_view.h",
         "src/trace_processor/process_table.cc",
         "src/trace_processor/process_table.h",
         "src/trace_processor/process_tracker.cc",
         "src/trace_processor/process_tracker.h",
         "src/trace_processor/proto_incremental_state.h",
         "src/trace_processor/proto_trace_parser.cc",
         "src/trace_processor/proto_trace_parser.h",
         "src/trace_processor/proto_trace_tokenizer.cc",
         "src/trace_processor/proto_trace_tokenizer.h",
         "src/trace_processor/query_constraints.cc",
         "src/trace_processor/query_constraints.h",
         "src/trace_processor/raw_table.cc",
         "src/trace_processor/raw_table.h",
         "src/trace_processor/row_iterators.cc",
         "src/trace_processor/row_iterators.h",
         "src/trace_processor/sched_slice_table.cc",
         "src/trace_processor/sched_slice_table.h",
         "src/trace_processor/scoped_db.h",
         "src/trace_processor/slice_table.cc",
         "src/trace_processor/slice_table.h",
         "src/trace_processor/slice_tracker.cc",
         "src/trace_processor/slice_tracker.h",
         "src/trace_processor/span_join_operator_table.cc",
         "src/trace_processor/span_join_operator_table.h",
         "src/trace_processor/sql_stats_table.cc",
         "src/trace_processor/sql_stats_table.h",
         "src/trace_processor/sqlite.h",
         "src/trace_processor/sqlite3_str_split.cc",
         "src/trace_processor/sqlite3_str_split.h",
         "src/trace_processor/sqlite_table.cc",
         "src/trace_processor/sqlite_table.h",
         "src/trace_processor/sqlite_utils.h",
         "src/trace_processor/stats.h",
         "src/trace_processor/stats_table.cc",
         "src/trace_processor/stats_table.h",
         "src/trace_processor/storage_columns.cc",
         "src/trace_processor/storage_columns.h",
         "src/trace_processor/storage_schema.cc",
         "src/trace_processor/storage_schema.h",
         "src/trace_processor/storage_table.cc",
         "src/trace_processor/storage_table.h",
         "src/trace_processor/string_pool.cc",
         "src/trace_processor/string_pool.h",
         "src/trace_processor/syscall_tracker.cc",
         "src/trace_processor/syscall_tracker.h",
         "src/trace_processor/syscalls_aarch32.h",
         "src/trace_processor/syscalls_aarch64.h",
         "src/trace_processor/syscalls_armeabi.h",
         "src/trace_processor/syscalls_x86_64.h",
         "src/trace_processor/systrace_parser.cc",
         "src/trace_processor/systrace_parser.h",
         "src/trace_processor/systrace_trace_parser.cc",
         "src/trace_processor/systrace_trace_parser.h",
         "src/trace_processor/thread_table.cc",
         "src/trace_processor/thread_table.h",
         "src/trace_processor/trace_blob_view.h",
         "src/trace_processor/trace_parser.h",
         "src/trace_processor/trace_processor.cc",
         "src/trace_processor/trace_processor_context.cc",
         "src/trace_processor/trace_processor_context.h",
         "src/trace_processor/trace_processor_impl.cc",
         "src/trace_processor/trace_processor_impl.h",
         "src/trace_processor/trace_sorter.cc",
         "src/trace_processor/trace_sorter.h",
         "src/trace_processor/trace_storage.cc",
         "src/trace_processor/trace_storage.h",
         "src/trace_processor/variadic.h",
         "src/trace_processor/virtual_destructors.cc",
         "src/trace_processor/virtual_track_tracker.cc",
         "src/trace_processor/virtual_track_tracker.h",
         "src/trace_processor/window_operator_table.cc",
         "src/trace_processor/window_operator_table.h",
         "tools/trace_to_text/local_symbolizer.cc",
         "tools/trace_to_text/local_symbolizer.h",
         "tools/trace_to_text/main.cc",
         "tools/trace_to_text/pprof_builder.cc",
         "tools/trace_to_text/pprof_builder.h",
         "tools/trace_to_text/profile_visitor.cc",
         "tools/trace_to_text/profile_visitor.h",
         "tools/trace_to_text/proto_full_utils.cc",
         "tools/trace_to_text/proto_full_utils.h",
         "tools/trace_to_text/symbolize_profile.cc",
         "tools/trace_to_text/symbolize_profile.h",
         "tools/trace_to_text/symbolizer.cc",
         "tools/trace_to_text/symbolizer.h",
         "tools/trace_to_text/trace_symbol_table.cc",
         "tools/trace_to_text/trace_symbol_table.h",
         "tools/trace_to_text/trace_to_profile.cc",
         "tools/trace_to_text/trace_to_profile.h",
         "tools/trace_to_text/trace_to_systrace.cc",
         "tools/trace_to_text/trace_to_systrace.h",
         "tools/trace_to_text/trace_to_text.cc",
         "tools/trace_to_text/trace_to_text.h",
         "tools/trace_to_text/utils.cc",
         "tools/trace_to_text/utils.h",
     ],
     deps = [
         "//third_party/perfetto:gen_merged_sql_metrics",
         "//third_party/perfetto/google:jsoncpp",
         "//third_party/perfetto/google:perfetto_version",
         "//third_party/perfetto/protos:common_cc_proto",
         "//third_party/perfetto/protos:common_zero_cc_proto",
         "//third_party/perfetto/protos:config_cc_proto",
         "//third_party/perfetto/protos:config_zero_cc_proto",
         "//third_party/perfetto/protos:metrics_android_zero_cc_proto",
         "//third_party/perfetto/protos:metrics_zero_cc_proto",
         "//third_party/perfetto/protos:protos_third_party_pprof_cc_proto",
         "//third_party/perfetto/protos:trace_android_cc_proto",
         "//third_party/perfetto/protos:trace_android_zero_cc_proto",
         "//third_party/perfetto/protos:trace_cc_proto",
         "//third_party/perfetto/protos:trace_chrome_cc_proto",
         "//third_party/perfetto/protos:trace_chrome_zero_cc_proto",
         "//third_party/perfetto/protos:trace_filesystem_cc_proto",
         "//third_party/perfetto/protos:trace_filesystem_zero_cc_proto",
         "//third_party/perfetto/protos:trace_ftrace_cc_proto",
         "//third_party/perfetto/protos:trace_ftrace_zero_cc_proto",
         "//third_party/perfetto/protos:trace_gpu_cc_proto",
         "//third_party/perfetto/protos:trace_gpu_zero_cc_proto",
         "//third_party/perfetto/protos:trace_interned_data_cc_proto",
         "//third_party/perfetto/protos:trace_interned_data_zero_cc_proto",
         "//third_party/perfetto/protos:trace_minimal_cc_proto",
         "//third_party/perfetto/protos:trace_perfetto_cc_proto",
         "//third_party/perfetto/protos:trace_perfetto_zero_cc_proto",
         "//third_party/perfetto/protos:trace_power_cc_proto",
         "//third_party/perfetto/protos:trace_power_zero_cc_proto",
         "//third_party/perfetto/protos:trace_processor_metrics_impl_zero_cc_proto",
         "//third_party/perfetto/protos:trace_profiling_cc_proto",
         "//third_party/perfetto/protos:trace_profiling_zero_cc_proto",
         "//third_party/perfetto/protos:trace_ps_cc_proto",
         "//third_party/perfetto/protos:trace_ps_zero_cc_proto",
         "//third_party/perfetto/protos:trace_sys_stats_cc_proto",
         "//third_party/perfetto/protos:trace_sys_stats_zero_cc_proto",
         "//third_party/perfetto/protos:trace_track_event_cc_proto",
         "//third_party/perfetto/protos:trace_track_event_zero_cc_proto",
         "//third_party/perfetto/protos:trace_zero_cc_proto",
         "//third_party/protobuf:libprotoc_legacy",
         "//third_party/protobuf:protobuf_legacy",
         "//third_party/sqlite",
         "//third_party/sqlite:sqlite_ext_percentile",
         "//third_party/zlib:zlibsystem",
     ],
 )
diff --git a/src/trace_processor/BUILD.gn b/src/trace_processor/BUILD.gn
index ef0d92fc9..e7b4a9718 100644
--- a/src/trace_processor/BUILD.gn
+++ b/src/trace_processor/BUILD.gn
@@ -47,164 +47,166 @@ static_library("trace_processor") {
 source_set("lib") {
   sources = [
     "android_logs_table.cc",
     "android_logs_table.h",
     "args_table.cc",
     "args_table.h",
     "args_tracker.cc",
     "args_tracker.h",
     "chunked_trace_reader.h",
     "clock_tracker.cc",
     "clock_tracker.h",
     "counter_definitions_table.cc",
     "counter_definitions_table.h",
     "counter_values_table.cc",
     "counter_values_table.h",
     "event_tracker.cc",
     "event_tracker.h",
     "filtered_row_index.cc",
     "filtered_row_index.h",
+    "forwarding_trace_parser.cc",
+    "forwarding_trace_parser.h",
     "ftrace_descriptors.cc",
     "ftrace_descriptors.h",
     "ftrace_utils.cc",
     "ftrace_utils.h",
     "fuchsia_provider_view.cc",
     "fuchsia_provider_view.h",
     "fuchsia_trace_parser.cc",
     "fuchsia_trace_parser.h",
     "fuchsia_trace_tokenizer.cc",
     "fuchsia_trace_tokenizer.h",
     "fuchsia_trace_utils.cc",
     "fuchsia_trace_utils.h",
     "gzip_trace_parser.cc",
     "gzip_trace_parser.h",
     "heap_profile_allocation_table.cc",
     "heap_profile_allocation_table.h",
     "heap_profile_callsite_table.cc",
     "heap_profile_callsite_table.h",
     "heap_profile_frame_table.cc",
     "heap_profile_frame_table.h",
     "heap_profile_mapping_table.cc",
     "heap_profile_mapping_table.h",
     "heap_profile_tracker.cc",
     "heap_profile_tracker.h",
     "instants_table.cc",
     "instants_table.h",
     "metadata.h",
     "metadata_table.cc",
     "metadata_table.h",
     "null_term_string_view.h",
     "process_table.cc",
     "process_table.h",
     "process_tracker.cc",
     "process_tracker.h",
     "proto_incremental_state.h",
     "proto_trace_parser.cc",
     "proto_trace_parser.h",
     "proto_trace_tokenizer.cc",
     "proto_trace_tokenizer.h",
     "query_constraints.cc",
     "query_constraints.h",
     "raw_table.cc",
     "raw_table.h",
     "row_iterators.cc",
     "row_iterators.h",
     "sched_slice_table.cc",
     "sched_slice_table.h",
     "scoped_db.h",
     "slice_table.cc",
     "slice_table.h",
     "slice_tracker.cc",
     "slice_tracker.h",
     "span_join_operator_table.cc",
     "span_join_operator_table.h",
     "sql_stats_table.cc",
     "sql_stats_table.h",
     "sqlite3_str_split.cc",
     "sqlite3_str_split.h",
     "sqlite_table.cc",
     "sqlite_table.h",
     "sqlite_utils.h",
     "stats.h",
     "stats_table.cc",
     "stats_table.h",
     "storage_columns.cc",
     "storage_columns.h",
     "storage_schema.cc",
     "storage_schema.h",
     "storage_table.cc",
     "storage_table.h",
     "string_pool.cc",
     "string_pool.h",
     "syscall_tracker.cc",
     "syscall_tracker.h",
     "syscalls_aarch32.h",
     "syscalls_aarch64.h",
     "syscalls_armeabi.h",
     "syscalls_x86_64.h",
     "systrace_parser.cc",
     "systrace_parser.h",
     "systrace_trace_parser.cc",
     "systrace_trace_parser.h",
     "thread_table.cc",
     "thread_table.h",
     "trace_blob_view.h",
     "trace_parser.h",
     "trace_processor.cc",
     "trace_processor_context.cc",
     "trace_processor_context.h",
     "trace_processor_impl.cc",
     "trace_processor_impl.h",
     "trace_sorter.cc",
     "trace_sorter.h",
     "trace_storage.cc",
     "trace_storage.h",
     "variadic.h",
     "virtual_destructors.cc",
     "virtual_track_tracker.cc",
     "virtual_track_tracker.h",
     "window_operator_table.cc",
     "window_operator_table.h",
   ]
 
   deps = [
     ":sqlite",
     "../../gn:default_deps",
     "../../gn:zlib",
     "../../include/perfetto/ext/traced:sys_stats_counters",
     "../../protos/perfetto/common:zero",
     "../../protos/perfetto/config:zero",
     "../../protos/perfetto/metrics:zero",
     "../../protos/perfetto/metrics/android:zero",
     "../../protos/perfetto/trace:zero",
     "../../protos/perfetto/trace/android:zero",
     "../../protos/perfetto/trace/chrome:zero",
     "../../protos/perfetto/trace/ftrace:zero",
     "../../protos/perfetto/trace/gpu:zero",
     "../../protos/perfetto/trace/interned_data:zero",
     "../../protos/perfetto/trace/perfetto:zero",
     "../../protos/perfetto/trace/power:zero",
     "../../protos/perfetto/trace/profiling:zero",
     "../../protos/perfetto/trace/ps:zero",
     "../../protos/perfetto/trace/sys_stats:zero",
     "../../protos/perfetto/trace/track_event:zero",
     "../base",
     "../protozero",
     "metrics:lib",
   ]
   public_deps = [
     "../../include/perfetto/trace_processor",
   ]
   if (perfetto_build_standalone || build_with_chromium) {
     sources += [
       "export_json.cc",
       "export_json.h",
       "json_trace_parser.cc",
       "json_trace_parser.h",
       "json_trace_tokenizer.cc",
       "json_trace_tokenizer.h",
       "json_trace_utils.cc",
       "json_trace_utils.h",
     ]
     deps += [ "../../gn:jsoncpp" ]
   }
 }
@@ -233,56 +235,56 @@ source_set("trace_processor_shell") {
 source_set("unittests") {
   testonly = true
   sources = [
     "args_table_unittest.cc",
     "clock_tracker_unittest.cc",
     "event_tracker_unittest.cc",
     "filtered_row_index_unittest.cc",
+    "forwarding_trace_parser_unittest.cc",
     "ftrace_utils_unittest.cc",
     "fuchsia_trace_utils_unittest.cc",
     "heap_profile_tracker_unittest.cc",
     "metadata_table_unittest.cc",
     "null_term_string_view_unittest.cc",
     "process_table_unittest.cc",
     "process_tracker_unittest.cc",
     "proto_trace_parser_unittest.cc",
     "query_constraints_unittest.cc",
     "sched_slice_table_unittest.cc",
     "slice_tracker_unittest.cc",
     "span_join_operator_table_unittest.cc",
     "sqlite3_str_split_unittest.cc",
     "string_pool_unittest.cc",
     "syscall_tracker_unittest.cc",
     "systrace_parser_unittest.cc",
     "thread_table_unittest.cc",
-    "trace_processor_impl_unittest.cc",
     "trace_sorter_unittest.cc",
   ]
   deps = [
     ":lib",
     ":sqlite",
     "../../gn:default_deps",
     "../../gn:gtest_and_gmock",
     "../../protos/perfetto/common:zero",
     "../../protos/perfetto/trace:zero",
     "../../protos/perfetto/trace/android:zero",
     "../../protos/perfetto/trace/chrome:zero",
     "../../protos/perfetto/trace/ftrace:zero",
     "../../protos/perfetto/trace/gpu:zero",
     "../../protos/perfetto/trace/interned_data:zero",
     "../../protos/perfetto/trace/ps:zero",
     "../../protos/perfetto/trace/sys_stats:zero",
     "../../protos/perfetto/trace/track_event:zero",
     "../base",
     "../protozero",
   ]
   if (perfetto_build_standalone || build_with_chromium) {
     sources += [
       "export_json_unittest.cc",
       "json_trace_tokenizer_unittest.cc",
       "json_trace_utils_unittest.cc",
     ]
     deps += [ "../../gn:jsoncpp" ]
   }
 }
 
 # Indirection target to allow modifying the path to the SQLite header.
diff --git a/src/trace_processor/forwarding_trace_parser.cc b/src/trace_processor/forwarding_trace_parser.cc
new file mode 100644
index 000000000..ca657f82c
--- /dev/null
+++ b/src/trace_processor/forwarding_trace_parser.cc
@@ -0,0 +1,164 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "src/trace_processor/forwarding_trace_parser.h"
+
+#include "perfetto/base/logging.h"
+#include "perfetto/ext/base/string_utils.h"
+#include "src/trace_processor/fuchsia_trace_parser.h"
+#include "src/trace_processor/fuchsia_trace_tokenizer.h"
+#include "src/trace_processor/gzip_trace_parser.h"
+#include "src/trace_processor/proto_trace_parser.h"
+#include "src/trace_processor/proto_trace_tokenizer.h"
+#include "src/trace_processor/systrace_trace_parser.h"
+
+// JSON parsing and exporting is only supported in the standalone and
+// Chromium builds.
+#if PERFETTO_BUILDFLAG(PERFETTO_STANDALONE_BUILD) || \
+    PERFETTO_BUILD_WITH_CHROMIUM
+#include "src/trace_processor/json_trace_parser.h"
+#include "src/trace_processor/json_trace_tokenizer.h"
+#endif
+
+namespace perfetto {
+namespace trace_processor {
+namespace {
+
+std::string RemoveWhitespace(const std::string& input) {
+  std::string str(input);
+  str.erase(std::remove_if(str.begin(), str.end(), ::isspace), str.end());
+  return str;
+}
+
+// Fuchsia traces have a magic number as documented here:
+// https://fuchsia.googlesource.com/fuchsia/+/HEAD/docs/development/tracing/trace-format/README.md#magic-number-record-trace-info-type-0
+constexpr uint64_t kFuchsiaMagicNumber = 0x0016547846040010;
+
+}  // namespace
+
+ForwardingTraceParser::ForwardingTraceParser(TraceProcessorContext* context)
+    : context_(context) {}
+
+ForwardingTraceParser::~ForwardingTraceParser() {}
+
+util::Status ForwardingTraceParser::Parse(std::unique_ptr<uint8_t[]> data,
+                                          size_t size) {
+  // If this is the first Parse() call, guess the trace type and create the
+  // appropriate parser.
+
+  if (!reader_) {
+    TraceType trace_type;
+    {
+      auto scoped_trace = context_->storage->TraceExecutionTimeIntoStats(
+          stats::guess_trace_type_duration_ns);
+      trace_type = GuessTraceType(data.get(), size);
+    }
+    switch (trace_type) {
+      case kJsonTraceType: {
+        PERFETTO_DLOG("JSON trace detected");
+#if PERFETTO_BUILDFLAG(PERFETTO_STANDALONE_BUILD) || \
+    PERFETTO_BUILD_WITH_CHROMIUM
+        reader_.reset(new JsonTraceTokenizer(context_));
+        // JSON traces have no guarantees about the order of events in them.
+        int64_t window_size_ns = std::numeric_limits<int64_t>::max();
+        context_->sorter.reset(new TraceSorter(context_, window_size_ns));
+        context_->parser.reset(new JsonTraceParser(context_));
+#else
+        PERFETTO_FATAL("JSON traces not supported.");
+#endif
+        break;
+      }
+      case kProtoTraceType: {
+        PERFETTO_DLOG("Proto trace detected");
+        // This will be reduced once we read the trace config and we see flush
+        // period being set.
+        int64_t window_size_ns = std::numeric_limits<int64_t>::max();
+        reader_.reset(new ProtoTraceTokenizer(context_));
+        context_->sorter.reset(new TraceSorter(context_, window_size_ns));
+        context_->parser.reset(new ProtoTraceParser(context_));
+        break;
+      }
+      case kFuchsiaTraceType: {
+        PERFETTO_DLOG("Fuchsia trace detected");
+        // Fuschia traces can have massively out of order events.
+        int64_t window_size_ns = std::numeric_limits<int64_t>::max();
+        reader_.reset(new FuchsiaTraceTokenizer(context_));
+        context_->sorter.reset(new TraceSorter(context_, window_size_ns));
+        context_->parser.reset(new FuchsiaTraceParser(context_));
+        break;
+      }
+      case kSystraceTraceType:
+        PERFETTO_DLOG("Systrace trace detected");
+        reader_.reset(new SystraceTraceParser(context_));
+        break;
+      case kGzipTraceType:
+        PERFETTO_DLOG("gzip trace detected");
+        reader_.reset(new GzipTraceParser(context_));
+        break;
+      case kCtraceTraceType:
+        PERFETTO_DLOG("ctrace trace detected");
+        reader_.reset(new GzipTraceParser(context_));
+        break;
+      case kUnknownTraceType:
+        return util::ErrStatus("Unknown trace type provided");
+    }
+  }
+
+  return reader_->Parse(std::move(data), size);
+}
+
+TraceType GuessTraceType(const uint8_t* data, size_t size) {
+  if (size == 0)
+    return kUnknownTraceType;
+  std::string start(reinterpret_cast<const char*>(data),
+                    std::min<size_t>(size, 20));
+  std::string start_minus_white_space = RemoveWhitespace(start);
+  if (base::StartsWith(start_minus_white_space, "{\"traceEvents\":["))
+    return kJsonTraceType;
+  if (base::StartsWith(start_minus_white_space, "[{"))
+    return kJsonTraceType;
+  if (size >= 8) {
+    uint64_t first_word = *reinterpret_cast<const uint64_t*>(data);
+    if (first_word == kFuchsiaMagicNumber)
+      return kFuchsiaTraceType;
+  }
+
+  // Systrace with header but no leading HTML.
+  if (base::StartsWith(start, "# tracer"))
+    return kSystraceTraceType;
+
+  // Systrace with leading HTML.
+  if (base::StartsWith(start, "<!DOCTYPE html>") ||
+      base::StartsWith(start, "<html>"))
+    return kSystraceTraceType;
+
+  // Systrace with no header or leading HTML.
+  if (base::StartsWith(start, " "))
+    return kSystraceTraceType;
+
+  // Ctrace is deflate'ed systrace.
+  if (base::StartsWith(start, "TRACE:"))
+    return kCtraceTraceType;
+
+  // gzip'ed trace containing one of the other formats.
+  if (base::StartsWith(start, "\x1f\x8b"))
+    return kGzipTraceType;
+
+  return kProtoTraceType;
+}
+
+}  // namespace trace_processor
+}  // namespace perfetto
diff --git a/src/trace_processor/forwarding_trace_parser.h b/src/trace_processor/forwarding_trace_parser.h
new file mode 100644
index 000000000..f7216b300
--- /dev/null
+++ b/src/trace_processor/forwarding_trace_parser.h
@@ -0,0 +1,55 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef SRC_TRACE_PROCESSOR_FORWARDING_TRACE_PARSER_H_
+#define SRC_TRACE_PROCESSOR_FORWARDING_TRACE_PARSER_H_
+
+#include "src/trace_processor/chunked_trace_reader.h"
+
+#include "src/trace_processor/trace_processor_context.h"
+
+namespace perfetto {
+namespace trace_processor {
+
+enum TraceType {
+  kUnknownTraceType,
+  kProtoTraceType,
+  kJsonTraceType,
+  kFuchsiaTraceType,
+  kSystraceTraceType,
+  kGzipTraceType,
+  kCtraceTraceType,
+};
+
+TraceType GuessTraceType(const uint8_t* data, size_t size);
+
+class ForwardingTraceParser : public ChunkedTraceReader {
+ public:
+  explicit ForwardingTraceParser(TraceProcessorContext*);
+  ~ForwardingTraceParser() override;
+
+  // ChunkedTraceReader implementation
+  util::Status Parse(std::unique_ptr<uint8_t[]>, size_t) override;
+
+ private:
+  TraceProcessorContext* const context_;
+  std::unique_ptr<ChunkedTraceReader> reader_;
+};
+
+}  // namespace trace_processor
+}  // namespace perfetto
+
+#endif  // SRC_TRACE_PROCESSOR_FORWARDING_TRACE_PARSER_H_
diff --git a/src/trace_processor/trace_processor_impl_unittest.cc b/src/trace_processor/forwarding_trace_parser_unittest.cc
similarity index 97%
rename from src/trace_processor/trace_processor_impl_unittest.cc
rename to src/trace_processor/forwarding_trace_parser_unittest.cc
index 24611d030..df4c013ea 100644
--- a/src/trace_processor/trace_processor_impl_unittest.cc
+++ b/src/trace_processor/forwarding_trace_parser_unittest.cc
@@ -1,20 +1,20 @@
 /*
  * Copyright (C) 2018 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-#include "src/trace_processor/trace_processor_impl.h"
+#include "src/trace_processor/forwarding_trace_parser.h"
 
 #include <gmock/gmock.h>
 #include <gtest/gtest.h>
diff --git a/src/trace_processor/gzip_trace_parser.cc b/src/trace_processor/gzip_trace_parser.cc
index 7b93af92f..a3740191c 100644
--- a/src/trace_processor/gzip_trace_parser.cc
+++ b/src/trace_processor/gzip_trace_parser.cc
@@ -1,24 +1,25 @@
 /*
  * Copyright (C) 2019 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 #include "src/trace_processor/gzip_trace_parser.h"
 
 #include <zlib.h>
 
-#include "src/trace_processor/systrace_trace_parser.h"
+#include "perfetto/base/logging.h"
+#include "src/trace_processor/forwarding_trace_parser.h"
 
 namespace perfetto {
 namespace trace_processor {
@@ -26,9 +27,9 @@ namespace trace_processor {
 GzipTraceParser::GzipTraceParser(TraceProcessorContext* context)
     : context_(context), z_stream_(new z_stream()) {
   z_stream_->zalloc = Z_NULL;
   z_stream_->zfree = Z_NULL;
   z_stream_->opaque = Z_NULL;
-  inflateInit(z_stream_.get());
+  inflateInit2(z_stream_.get(), 32 + 15);
 }
 
 GzipTraceParser::~GzipTraceParser() {
@@ -39,51 +40,55 @@ GzipTraceParser::~GzipTraceParser() {
 util::Status GzipTraceParser::Parse(std::unique_ptr<uint8_t[]> data,
                                     size_t size) {
   uint8_t* start = data.get();
   size_t len = size;
 
-  static const char kSystraceFilerHeader[] = "TRACE:\n";
   if (!inner_) {
-    inner_.reset(new SystraceTraceParser(context_));
+    inner_.reset(new ForwardingTraceParser(context_));
 
-    // Strip the header by ignoring the associated bytes.
-    start += strlen(kSystraceFilerHeader);
-    len -= strlen(kSystraceFilerHeader);
+    // .ctrace files begin with "TRACE:" strip this if present.
+    static const char kSystraceFileHeader[] = "TRACE:\n";
+    if (size >= strlen(kSystraceFileHeader) &&
+        strncmp(reinterpret_cast<char*>(start), kSystraceFileHeader,
+                strlen(kSystraceFileHeader)) == 0) {
+      start += strlen(kSystraceFileHeader);
+      len -= strlen(kSystraceFileHeader);
+    }
   }
 
   z_stream_->next_in = start;
   z_stream_->avail_in = static_cast<uInt>(len);
 
   // Our default uncompressed buffer size is 32MB as it allows for good
   // throughput.
   constexpr size_t kUncompressedBufferSize = 32 * 1024 * 1024;
   int ret = Z_OK;
   for (; ret != Z_STREAM_END && z_stream_->avail_in != 0;) {
     std::unique_ptr<uint8_t[]> buffer(new uint8_t[kUncompressedBufferSize]);
     z_stream_->next_out = buffer.get();
     z_stream_->avail_out = static_cast<uInt>(kUncompressedBufferSize);
 
     ret = inflate(z_stream_.get(), Z_NO_FLUSH);
     switch (ret) {
       case Z_NEED_DICT:
       case Z_DATA_ERROR:
       case Z_MEM_ERROR:
         // Ignore inflateEnd error as we will error out anyway.
         inflateEnd(z_stream_.get());
         return util::ErrStatus("Error decompressing ctrace file");
     }
 
     size_t read = kUncompressedBufferSize - z_stream_->avail_out;
     util::Status status = inner_->Parse(std::move(buffer), read);
     if (!status.ok())
       return status;
   }
   if (ret == Z_STREAM_END) {
     ret = inflateEnd(z_stream_.get());
     if (ret == Z_STREAM_ERROR)
       return util::ErrStatus("Error finishing decompression");
   }
   return util::OkStatus();
 }
 
 }  // namespace trace_processor
 }  // namespace perfetto
diff --git a/src/trace_processor/trace_processor_impl.cc b/src/trace_processor/trace_processor_impl.cc
index 710c770c6..70f18d23d 100644
--- a/src/trace_processor/trace_processor_impl.cc
+++ b/src/trace_processor/trace_processor_impl.cc
@@ -1,87 +1,82 @@
 /*
  * Copyright (C) 2018 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 #include "src/trace_processor/trace_processor_impl.h"
 
 #include <inttypes.h>
 #include <algorithm>
 #include <fstream>
 #include <functional>
 
 #include "perfetto/base/logging.h"
 #include "perfetto/ext/base/string_splitter.h"
 #include "perfetto/ext/base/string_utils.h"
 #include "perfetto/ext/base/time.h"
 #include "perfetto/protozero/scattered_heap_buffer.h"
 #include "src/trace_processor/android_logs_table.h"
 #include "src/trace_processor/args_table.h"
 #include "src/trace_processor/args_tracker.h"
 #include "src/trace_processor/clock_tracker.h"
 #include "src/trace_processor/counter_definitions_table.h"
 #include "src/trace_processor/counter_values_table.h"
 #include "src/trace_processor/event_tracker.h"
-#include "src/trace_processor/fuchsia_trace_parser.h"
-#include "src/trace_processor/fuchsia_trace_tokenizer.h"
-#include "src/trace_processor/gzip_trace_parser.h"
+#include "src/trace_processor/forwarding_trace_parser.h"
 #include "src/trace_processor/heap_profile_allocation_table.h"
 #include "src/trace_processor/heap_profile_callsite_table.h"
 #include "src/trace_processor/heap_profile_frame_table.h"
 #include "src/trace_processor/heap_profile_mapping_table.h"
 #include "src/trace_processor/heap_profile_tracker.h"
 #include "src/trace_processor/instants_table.h"
 #include "src/trace_processor/metadata_table.h"
 #include "src/trace_processor/metrics/descriptors.h"
 #include "src/trace_processor/metrics/metrics.descriptor.h"
 #include "src/trace_processor/metrics/metrics.h"
 #include "src/trace_processor/metrics/sql_metrics.h"
 #include "src/trace_processor/process_table.h"
 #include "src/trace_processor/process_tracker.h"
-#include "src/trace_processor/proto_trace_parser.h"
 #include "src/trace_processor/proto_trace_tokenizer.h"
 #include "src/trace_processor/raw_table.h"
 #include "src/trace_processor/sched_slice_table.h"
 #include "src/trace_processor/slice_table.h"
 #include "src/trace_processor/slice_tracker.h"
 #include "src/trace_processor/span_join_operator_table.h"
 #include "src/trace_processor/sql_stats_table.h"
 #include "src/trace_processor/sqlite3_str_split.h"
 #include "src/trace_processor/sqlite_table.h"
 #include "src/trace_processor/stats_table.h"
 #include "src/trace_processor/syscall_tracker.h"
 #include "src/trace_processor/systrace_parser.h"
 #include "src/trace_processor/systrace_trace_parser.h"
 #include "src/trace_processor/thread_table.h"
 #include "src/trace_processor/trace_blob_view.h"
 #include "src/trace_processor/trace_sorter.h"
 #include "src/trace_processor/virtual_track_tracker.h"
 #include "src/trace_processor/window_operator_table.h"
 
 #include "perfetto/metrics/android/mem_metric.pbzero.h"
 #include "perfetto/metrics/metrics.pbzero.h"
 
 // JSON parsing and exporting is only supported in the standalone and
 // Chromium builds.
 #if PERFETTO_BUILDFLAG(PERFETTO_STANDALONE_BUILD) || \
     PERFETTO_BUILD_WITH_CHROMIUM
 #include "src/trace_processor/export_json.h"
-#include "src/trace_processor/json_trace_parser.h"
-#include "src/trace_processor/json_trace_tokenizer.h"
 #endif
 
 // In Android and Chromium tree builds, we don't have the percentile module.
 // Just don't include it.
 #if PERFETTO_BUILDFLAG(PERFETTO_STANDALONE_BUILD)
 // defined in sqlite_src/ext/misc/percentile.c
@@ -94,12 +89,6 @@ namespace perfetto {
 namespace trace_processor {
 namespace {
 
-std::string RemoveWhitespace(const std::string& input) {
-  std::string str(input);
-  str.erase(std::remove_if(str.begin(), str.end(), ::isspace), str.end());
-  return str;
-}
-
 void InitializeSqlite(sqlite3* db) {
   char* error = nullptr;
   sqlite3_exec(db, "PRAGMA temp_store=2", 0, 0, &error);
@@ -237,76 +226,36 @@ void CreateJsonExportFunction(TraceStorage* ts, sqlite3* db) {
 void SetupMetrics(TraceProcessor* tp,
                   sqlite3* db,
                   std::vector<metrics::SqlMetricFile>* sql_metrics) {
   tp->ExtendMetricsProto(kMetricsDescriptor.data(), kMetricsDescriptor.size());
 
   for (const auto& file_to_sql : metrics::sql_metrics::kFileToSql) {
     tp->RegisterMetric(file_to_sql.path, file_to_sql.sql);
   }
 
   {
     std::unique_ptr<metrics::RunMetricContext> ctx(
         new metrics::RunMetricContext());
     ctx->tp = tp;
     ctx->metrics = sql_metrics;
     auto ret = sqlite3_create_function_v2(
         db, "RUN_METRIC", -1, SQLITE_UTF8, ctx.release(), metrics::RunMetric,
         nullptr, nullptr,
         [](void* ptr) { delete static_cast<metrics::RunMetricContext*>(ptr); });
     if (ret)
       PERFETTO_ELOG("Error initializing RUN_METRIC");
   }
 
   {
     auto ret = sqlite3_create_function_v2(
         db, "RepeatedField", 1, SQLITE_UTF8, nullptr, nullptr,
         metrics::RepeatedFieldStep, metrics::RepeatedFieldFinal, nullptr);
     if (ret)
       PERFETTO_ELOG("Error initializing RepeatedField");
   }
 }
 
-// Fuchsia traces have a magic number as documented here:
-// https://fuchsia.googlesource.com/fuchsia/+/HEAD/docs/development/tracing/trace-format/README.md#magic-number-record-trace-info-type-0
-constexpr uint64_t kFuchsiaMagicNumber = 0x0016547846040010;
-
 }  // namespace
 
-TraceType GuessTraceType(const uint8_t* data, size_t size) {
-  if (size == 0)
-    return kUnknownTraceType;
-  std::string start(reinterpret_cast<const char*>(data),
-                    std::min<size_t>(size, 20));
-  std::string start_minus_white_space = RemoveWhitespace(start);
-  if (base::StartsWith(start_minus_white_space, "{\"traceEvents\":["))
-    return kJsonTraceType;
-  if (base::StartsWith(start_minus_white_space, "[{"))
-    return kJsonTraceType;
-  if (size >= 8) {
-    uint64_t first_word = *reinterpret_cast<const uint64_t*>(data);
-    if (first_word == kFuchsiaMagicNumber)
-      return kFuchsiaTraceType;
-  }
-
-  // Systrace with header but no leading HTML.
-  if (base::StartsWith(start, "# tracer"))
-    return kSystraceTraceType;
-
-  // Systrace with leading HTML.
-  if (base::StartsWith(start, "<!DOCTYPE html>") ||
-      base::StartsWith(start, "<html>"))
-    return kSystraceTraceType;
-
-  // Systrace with no header or leading HTML.
-  if (base::StartsWith(start, " "))
-    return kSystraceTraceType;
-
-  // Ctrace is GZIPed systrace with no headers.
-  if (base::StartsWith(start, "TRACE:"))
-    return kCtraceTraceType;
-
-  return kProtoTraceType;
-}
-
 TraceProcessorImpl::TraceProcessorImpl(const Config& cfg) {
   sqlite3* db = nullptr;
   PERFETTO_CHECK(sqlite3_initialize() == SQLITE_OK);
@@ -364,66 +313,16 @@ TraceProcessorImpl::~TraceProcessorImpl() {
 util::Status TraceProcessorImpl::Parse(std::unique_ptr<uint8_t[]> data,
                                        size_t size) {
   if (size == 0)
     return util::OkStatus();
   if (unrecoverable_parse_error_)
     return util::ErrStatus(
         "Failed unrecoverably while parsing in a previous Parse call");
-
-  // If this is the first Parse() call, guess the trace type and create the
-  // appropriate parser.
-  if (!context_.chunk_reader) {
-    TraceType trace_type;
-    {
-      auto scoped_trace = context_.storage->TraceExecutionTimeIntoStats(
-          stats::guess_trace_type_duration_ns);
-      trace_type = GuessTraceType(data.get(), size);
-    }
-    switch (trace_type) {
-      case kJsonTraceType: {
-        PERFETTO_DLOG("Legacy JSON trace detected");
-#if PERFETTO_BUILDFLAG(PERFETTO_STANDALONE_BUILD) || \
-    PERFETTO_BUILD_WITH_CHROMIUM
-        context_.chunk_reader.reset(new JsonTraceTokenizer(&context_));
-        // JSON traces have no guarantees about the order of events in them.
-        int64_t window_size_ns = std::numeric_limits<int64_t>::max();
-        context_.sorter.reset(new TraceSorter(&context_, window_size_ns));
-        context_.parser.reset(new JsonTraceParser(&context_));
-#else
-        PERFETTO_FATAL("JSON traces not supported.");
-#endif
-        break;
-      }
-      case kProtoTraceType: {
-        // This will be reduced once we read the trace config and we see flush
-        // period being set.
-        int64_t window_size_ns = std::numeric_limits<int64_t>::max();
-        context_.chunk_reader.reset(new ProtoTraceTokenizer(&context_));
-        context_.sorter.reset(new TraceSorter(&context_, window_size_ns));
-        context_.parser.reset(new ProtoTraceParser(&context_));
-        break;
-      }
-      case kFuchsiaTraceType: {
-        // Fuschia traces can have massively out of order events.
-        int64_t window_size_ns = std::numeric_limits<int64_t>::max();
-        context_.chunk_reader.reset(new FuchsiaTraceTokenizer(&context_));
-        context_.sorter.reset(new TraceSorter(&context_, window_size_ns));
-        context_.parser.reset(new FuchsiaTraceParser(&context_));
-        break;
-      }
-      case kSystraceTraceType:
-        context_.chunk_reader.reset(new SystraceTraceParser(&context_));
-        break;
-      case kCtraceTraceType:
-        context_.chunk_reader.reset(new GzipTraceParser(&context_));
-        break;
-      case kUnknownTraceType:
-        return util::ErrStatus("Unknown trace type provided");
-    }
-  }
+  if (!context_.chunk_reader)
+    context_.chunk_reader.reset(new ForwardingTraceParser(&context_));
 
   auto scoped_trace = context_.storage->TraceExecutionTimeIntoStats(
       stats::parse_trace_duration_ns);
   util::Status status = context_.chunk_reader->Parse(std::move(data), size);
   unrecoverable_parse_error_ |= !status.ok();
   return status;
 }
diff --git a/src/trace_processor/trace_processor_impl.h b/src/trace_processor/trace_processor_impl.h
index e9c3435df..0ef2d7ecc 100644
--- a/src/trace_processor/trace_processor_impl.h
+++ b/src/trace_processor/trace_processor_impl.h
@@ -36,17 +36,6 @@ namespace perfetto {
 
 namespace trace_processor {
 
-enum TraceType {
-  kUnknownTraceType,
-  kProtoTraceType,
-  kJsonTraceType,
-  kFuchsiaTraceType,
-  kSystraceTraceType,
-  kCtraceTraceType,
-};
-
-TraceType GuessTraceType(const uint8_t* data, size_t size);
-
 // Coordinates the loading of traces from an arbitrary source and allows
 // execution of SQL queries on the events in these traces.
 class TraceProcessorImpl : public TraceProcessor {
