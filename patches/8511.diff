commit c9650369c5dd74812db515d986ded898b9002ae4
Author: Albert Astals Cid <aacid@kde.org>
Date:   Thu May 24 18:20:12 2018 +0200

    Splash::scaleMaskYuXu: Free internal bitmap data on error
    
    this way we don't try to use it later, which will be an uninitialized memory read
    
    fixes oss-fuzz/8511

diff --git a/splash/Splash.cc b/splash/Splash.cc
index 7a772144..a95cc805 100644
--- a/splash/Splash.cc
+++ b/splash/Splash.cc
@@ -3558,81 +3558,82 @@ void Splash::scaleMaskYuXd(SplashImageMaskSource src, void *srcData,
 void Splash::scaleMaskYuXu(SplashImageMaskSource src, void *srcData,
 			   int srcWidth, int srcHeight,
 			   int scaledWidth, int scaledHeight,
 			   SplashBitmap *dest) {
   Guchar *lineBuf;
   Guint pix;
   Guchar *destPtr0, *destPtr;
   int yp, yq, xp, xq, yt, y, yStep, xt, x, xStep, xx;
   int i, j;
 
   destPtr0 = dest->data;
   if (destPtr0 == nullptr) {
     error(errInternal, -1, "dest->data is NULL in Splash::scaleMaskYuXu");
     return;
   }
 
   if (unlikely(srcWidth <= 0 || srcHeight <= 0)) {
     error(errSyntaxError, -1, "srcWidth <= 0 || srcHeight <= 0 in Splash::scaleMaskYuXu");
+    gfree(dest->takeData());
     return;
   }
 
   // Bresenham parameters for y scale
   yp = scaledHeight / srcHeight;
   yq = scaledHeight % srcHeight;
 
   // Bresenham parameters for x scale
   xp = scaledWidth / srcWidth;
   xq = scaledWidth % srcWidth;
 
   // allocate buffers
   lineBuf = (Guchar *)gmalloc(srcWidth);
 
   // init y scale Bresenham
   yt = 0;
 
   for (y = 0; y < srcHeight; ++y) {
 
     // y scale Bresenham
     if ((yt += yq) >= srcHeight) {
       yt -= srcHeight;
       yStep = yp + 1;
     } else {
       yStep = yp;
     }
 
     // read row from image
     (*src)(srcData, lineBuf);
 
     // init x scale Bresenham
     xt = 0;
 
     xx = 0;
     for (x = 0; x < srcWidth; ++x) {
 
       // x scale Bresenham
       if ((xt += xq) >= srcWidth) {
 	xt -= srcWidth;
 	xStep = xp + 1;
       } else {
 	xStep = xp;
       }
 
       // compute the final pixel
       pix = lineBuf[x] ? 255 : 0;
 
       // store the pixel
       for (i = 0; i < yStep; ++i) {
 	for (j = 0; j < xStep; ++j) {
 	  destPtr = destPtr0 + i * scaledWidth + xx + j;
 	  *destPtr++ = (Guchar)pix;
 	}
       }
 
       xx += xStep;
     }
 
     destPtr0 += yStep * scaledWidth;
   }
 
   gfree(lineBuf);
 }
