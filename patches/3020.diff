commit 37384f31bc8b854683c5a9c18b96b29e568d6ddf
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Sun Aug 13 13:24:47 2017 +0000

    OSM: avoid potential write heap buffer overflow on corrupted PBF files. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3022. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@39806 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/ogr/ogrsf_frmts/osm/osm_parser.cpp b/gdal/ogr/ogrsf_frmts/osm/osm_parser.cpp
index 8476ef40af..209e87723e 100644
--- a/gdal/ogr/ogrsf_frmts/osm/osm_parser.cpp
+++ b/gdal/ogr/ogrsf_frmts/osm/osm_parser.cpp
@@ -537,253 +537,255 @@ static
 bool ReadDenseNodes( GByte* pabyData, GByte* pabyDataLimit,
                      OSMContext* psCtxt )
 {
     GByte* pabyDataIDs = NULL;
     GByte* pabyDataIDsLimit = NULL;
     GByte* pabyDataLat = NULL;
     GByte* pabyDataLon = NULL;
     GByte* apabyData[DENSEINFO_IDX_VISIBLE] = {NULL, NULL, NULL, NULL, NULL, NULL};
     GByte* pabyDataKeyVal = NULL;
+    unsigned int nMaxTags = 0;
 
     /* printf(">ReadDenseNodes\n"); */
     while(pabyData < pabyDataLimit)
     {
         int nKey = 0;
         READ_FIELD_KEY(nKey);
 
         if( nKey == MAKE_KEY(DENSENODES_IDX_ID, WT_DATA) )
         {
             unsigned int nSize = 0;
 
             if( pabyDataIDs != NULL )
                 GOTO_END_ERROR;
             READ_SIZE(pabyData, pabyDataLimit, nSize);
 
             if( nSize > psCtxt->nNodesAllocated )
             {
                 psCtxt->nNodesAllocated = std::max(psCtxt->nNodesAllocated * 2,
                                                  nSize);
                 OSMNode* pasNodesNew = (OSMNode*) VSI_REALLOC_VERBOSE(
                     psCtxt->pasNodes, psCtxt->nNodesAllocated * sizeof(OSMNode));
                 if( pasNodesNew == NULL )
                     GOTO_END_ERROR;
                 psCtxt->pasNodes = pasNodesNew;
             }
 
             pabyDataIDs = pabyData;
             pabyDataIDsLimit = pabyData + nSize;
             pabyData += nSize;
         }
         else if( nKey == MAKE_KEY(DENSENODES_IDX_DENSEINFO, WT_DATA) )
         {
             unsigned int nSize = 0;
 
             READ_SIZE(pabyData, pabyDataLimit, nSize);
 
             /* Inline reading of DenseInfo structure */
 
             GByte* pabyDataNewLimit = pabyData + nSize;
             while(pabyData < pabyDataNewLimit)
             {
                 READ_FIELD_KEY(nKey);
 
                 const int nFieldNumber = GET_FIELDNUMBER(nKey);
                 if( GET_WIRETYPE(nKey) == WT_DATA &&
                     nFieldNumber >= DENSEINFO_IDX_VERSION &&
                     nFieldNumber <= DENSEINFO_IDX_VISIBLE )
                 {
                     if( apabyData[nFieldNumber - 1] != NULL) GOTO_END_ERROR;
                     READ_SIZE(pabyData, pabyDataNewLimit, nSize);
 
                     apabyData[nFieldNumber - 1] = pabyData;
                     pabyData += nSize;
                 }
                 else
                 {
                     SKIP_UNKNOWN_FIELD(pabyData, pabyDataNewLimit, TRUE);
                 }
             }
 
             if( pabyData != pabyDataNewLimit )
                 GOTO_END_ERROR;
         }
         else if( nKey == MAKE_KEY(DENSENODES_IDX_LAT, WT_DATA) )
         {
             if( pabyDataLat != NULL )
                 GOTO_END_ERROR;
             unsigned int nSize = 0;
             READ_SIZE(pabyData, pabyDataLimit, nSize);
             pabyDataLat = pabyData;
             pabyData += nSize;
         }
         else if( nKey == MAKE_KEY(DENSENODES_IDX_LON, WT_DATA) )
         {
             if( pabyDataLon != NULL )
                 GOTO_END_ERROR;
             unsigned int nSize = 0;
             READ_SIZE(pabyData, pabyDataLimit, nSize);
             pabyDataLon = pabyData;
             pabyData += nSize;
         }
         else if( nKey == MAKE_KEY(DENSENODES_IDX_KEYVALS, WT_DATA) )
         {
             if( pabyDataKeyVal != NULL )
                 GOTO_END_ERROR;
             unsigned int nSize = 0;
             READ_SIZE(pabyData, pabyDataLimit, nSize);
 
             pabyDataKeyVal = pabyData;
+            nMaxTags = nSize / 2;
 
-            if( nSize > psCtxt->nTagsAllocated )
+            if( nMaxTags > psCtxt->nTagsAllocated )
             {
 
                 psCtxt->nTagsAllocated = std::max(
-                    psCtxt->nTagsAllocated * 2, nSize);
+                    psCtxt->nTagsAllocated * 2, nMaxTags);
                 OSMTag* pasTagsNew = (OSMTag*) VSI_REALLOC_VERBOSE(
                     psCtxt->pasTags,
                     psCtxt->nTagsAllocated * sizeof(OSMTag));
                 if( pasTagsNew == NULL )
                     GOTO_END_ERROR;
                 psCtxt->pasTags = pasTagsNew;
             }
 
             pabyData += nSize;
         }
         else
         {
             SKIP_UNKNOWN_FIELD(pabyData, pabyDataLimit, TRUE);
         }
     }
 
     if( pabyData != pabyDataLimit )
         GOTO_END_ERROR;
 
     if( pabyDataIDs != NULL && pabyDataLat != NULL && pabyDataLon != NULL )
     {
         GByte* pabyDataVersion = apabyData[DENSEINFO_IDX_VERSION - 1];
         GByte* pabyDataTimeStamp = apabyData[DENSEINFO_IDX_TIMESTAMP - 1];
         GByte* pabyDataChangeset = apabyData[DENSEINFO_IDX_CHANGESET - 1];
         GByte* pabyDataUID = apabyData[DENSEINFO_IDX_UID - 1];
         GByte* pabyDataUserSID = apabyData[DENSEINFO_IDX_USER_SID - 1];
         /* GByte* pabyDataVisible = apabyData[DENSEINFO_IDX_VISIBLE - 1]; */
 
         GIntBig nID = 0;
         GIntBig nLat = 0;
         GIntBig nLon = 0;
         GIntBig nTimeStamp = 0;
         GIntBig nChangeset = 0;
         int nUID = 0;
         unsigned int nUserSID = 0;
         int nTags = 0;
         int nNodes = 0;
 
         const char* pszStrBuf = psCtxt->pszStrBuf;
         int* panStrOff = psCtxt->panStrOff;
         const unsigned int nStrCount = psCtxt->nStrCount;
         OSMTag* pasTags = psCtxt->pasTags;
         OSMNode* pasNodes = psCtxt->pasNodes;
 
         int nVersion = 0;
         /* int nVisible = 1; */
 
         while(pabyDataIDs < pabyDataIDsLimit)
         {
             GIntBig nDelta1, nDelta2;
             int nKVIndexStart = nTags;
 
             READ_VARSINT64_NOCHECK(pabyDataIDs, pabyDataIDsLimit, nDelta1);
             READ_VARSINT64(pabyDataLat, pabyDataLimit, nDelta2);
             nID = AddWithOverflowAccepted(nID, nDelta1);
             nLat = AddWithOverflowAccepted(nLat, nDelta2);
 
             READ_VARSINT64(pabyDataLon, pabyDataLimit, nDelta1);
             nLon = AddWithOverflowAccepted(nLon, nDelta1);
 
             if( pabyDataTimeStamp )
             {
                 READ_VARSINT64(pabyDataTimeStamp, pabyDataLimit, nDelta2);
                 nTimeStamp = AddWithOverflowAccepted(nTimeStamp, nDelta2);
             }
             if( pabyDataChangeset )
             {
                 READ_VARSINT64(pabyDataChangeset, pabyDataLimit, nDelta1);
                 nChangeset = AddWithOverflowAccepted(nChangeset, nDelta1);
             }
             if( pabyDataVersion )
             {
                 READ_VARINT32(pabyDataVersion, pabyDataLimit, nVersion);
             }
             if( pabyDataUID )
             {
                 int nDeltaUID = 0;
                 READ_VARSINT32(pabyDataUID, pabyDataLimit, nDeltaUID);
                 nUID = AddWithOverflowAccepted(nUID, nDeltaUID);
             }
             if( pabyDataUserSID )
             {
                 int nDeltaUserSID = 0;
                 READ_VARSINT32(pabyDataUserSID, pabyDataLimit, nDeltaUserSID);
                 nUserSID = AddWithOverflowAccepted(nUserSID, nDeltaUserSID);
                 if( nUserSID >= nStrCount )
                     GOTO_END_ERROR;
             }
             /* if( pabyDataVisible )
                 READ_VARINT32(pabyDataVisible, pabyDataLimit, nVisible); */
 
             if( pabyDataKeyVal != NULL && pasTags != NULL )
             {
-                while( true )
+                while( static_cast<unsigned>(nTags) < nMaxTags )
                 {
                     unsigned int nKey, nVal;
                     READ_VARUINT32(pabyDataKeyVal, pabyDataLimit, nKey);
                     if( nKey == 0 )
                         break;
                     if( nKey >= nStrCount )
                         GOTO_END_ERROR;
 
                     READ_VARUINT32(pabyDataKeyVal, pabyDataLimit, nVal);
                     if( nVal >= nStrCount )
                         GOTO_END_ERROR;
 
                     pasTags[nTags].pszK = pszStrBuf + panStrOff[nKey];
                     pasTags[nTags].pszV = pszStrBuf + panStrOff[nVal];
                     nTags ++;
 
                     /* printf("nKey = %d, nVal = %d\n", nKey, nVal); */
                 }
             }
 
             if( pasTags != NULL && nTags > nKVIndexStart )
                 pasNodes[nNodes].pasTags = pasTags + nKVIndexStart;
             else
                 pasNodes[nNodes].pasTags = NULL;
             pasNodes[nNodes].nTags = nTags - nKVIndexStart;
 
             pasNodes[nNodes].nID = nID;
             pasNodes[nNodes].dfLat = .000000001 * (psCtxt->nLatOffset + ((double)psCtxt->nGranularity * nLat));
             pasNodes[nNodes].dfLon = .000000001 * (psCtxt->nLonOffset + ((double)psCtxt->nGranularity * nLon));
             if( pasNodes[nNodes].dfLon < -180 || pasNodes[nNodes].dfLon > 180 ||
                 pasNodes[nNodes].dfLat < -90 || pasNodes[nNodes].dfLat > 90 )
                 GOTO_END_ERROR;
             pasNodes[nNodes].sInfo.bTimeStampIsStr = false;
             pasNodes[nNodes].sInfo.ts.nTimeStamp = nTimeStamp;
             pasNodes[nNodes].sInfo.nChangeset = nChangeset;
             pasNodes[nNodes].sInfo.nVersion = nVersion;
             pasNodes[nNodes].sInfo.nUID = nUID;
             if( nUserSID >= nStrCount )
                 pasNodes[nNodes].sInfo.pszUserSID = "";
             else
                 pasNodes[nNodes].sInfo.pszUserSID = pszStrBuf + panStrOff[nUserSID];
             /* pasNodes[nNodes].sInfo.nVisible = nVisible; */
             nNodes ++;
             /* printf("nLat = " CPL_FRMT_GIB "\n", nLat); printf("nLon = " CPL_FRMT_GIB "\n", nLon); */
         }
 
         psCtxt->pfnNotifyNodes(nNodes, pasNodes, psCtxt, psCtxt->user_data);
 
         if(pabyDataIDs != pabyDataIDsLimit)
             GOTO_END_ERROR;
     }
 
     /* printf("<ReadDenseNodes\n"); */
 
     return TRUE;
