commit a8b31e68c2331a1289e860ce07c8b80b855b7bf4
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Mon Nov 21 21:35:01 2022 +0100

    parser: Fix progress check when parsing character data
    
    Skip over zero bytes to guarantee progress. Short-lived regression.

diff --git a/parser.c b/parser.c
index bc3718cd..0c65ac5d 100644
--- a/parser.c
+++ b/parser.c
@@ -4598,103 +4598,103 @@ static void
 xmlParseCharDataComplex(xmlParserCtxtPtr ctxt) {
     xmlChar buf[XML_PARSER_BIG_BUFFER_SIZE + 5];
     int nbchar = 0;
     int cur, l;
     int count = 0;
 
     SHRINK;
     GROW;
     cur = CUR_CHAR(l);
     while ((cur != '<') && /* checked */
            (cur != '&') &&
 	   (IS_CHAR(cur))) /* test also done in xmlCurrentChar() */ {
 	if ((cur == ']') && (NXT(1) == ']') && (NXT(2) == '>')) {
 	    xmlFatalErr(ctxt, XML_ERR_MISPLACED_CDATA_END, NULL);
 	}
 	COPY_BUF(l,buf,nbchar,cur);
 	/* move current position before possible calling of ctxt->sax->characters */
 	NEXTL(l);
 	cur = CUR_CHAR(l);
 	if (nbchar >= XML_PARSER_BIG_BUFFER_SIZE) {
 	    buf[nbchar] = 0;
 
 	    /*
 	     * OK the segment is to be consumed as chars.
 	     */
 	    if ((ctxt->sax != NULL) && (!ctxt->disableSAX)) {
 		if (areBlanks(ctxt, buf, nbchar, 0)) {
 		    if (ctxt->sax->ignorableWhitespace != NULL)
 			ctxt->sax->ignorableWhitespace(ctxt->userData,
 			                               buf, nbchar);
 		} else {
 		    if (ctxt->sax->characters != NULL)
 			ctxt->sax->characters(ctxt->userData, buf, nbchar);
 		    if ((ctxt->sax->characters !=
 		         ctxt->sax->ignorableWhitespace) &&
 			(*ctxt->space == -1))
 			*ctxt->space = -2;
 		}
 	    }
 	    nbchar = 0;
             /* something really bad happened in the SAX callback */
             if (ctxt->instate != XML_PARSER_CONTENT)
                 return;
 	}
 	count++;
 	if (count > 50) {
 	    SHRINK;
 	    GROW;
 	    count = 0;
             if (ctxt->instate == XML_PARSER_EOF)
 		return;
 	}
     }
     if (nbchar != 0) {
         buf[nbchar] = 0;
 	/*
 	 * OK the segment is to be consumed as chars.
 	 */
 	if ((ctxt->sax != NULL) && (!ctxt->disableSAX)) {
 	    if (areBlanks(ctxt, buf, nbchar, 0)) {
 		if (ctxt->sax->ignorableWhitespace != NULL)
 		    ctxt->sax->ignorableWhitespace(ctxt->userData, buf, nbchar);
 	    } else {
 		if (ctxt->sax->characters != NULL)
 		    ctxt->sax->characters(ctxt->userData, buf, nbchar);
 		if ((ctxt->sax->characters != ctxt->sax->ignorableWhitespace) &&
 		    (*ctxt->space == -1))
 		    *ctxt->space = -2;
 	    }
 	}
     }
-    if ((CUR != 0) && (!IS_CHAR(cur))) {
+    if ((ctxt->input->cur < ctxt->input->end) && (!IS_CHAR(cur))) {
 	/* Generate the error and skip the offending character */
         xmlFatalErrMsgInt(ctxt, XML_ERR_INVALID_CHAR,
                           "PCDATA invalid Char value %d\n",
 	                  cur ? cur : CUR);
 	NEXT;
     }
 }
 
 /**
  * xmlParseExternalID:
  * @ctxt:  an XML parser context
  * @publicID:  a xmlChar** receiving PubidLiteral
  * @strict: indicate whether we should restrict parsing to only
  *          production [75], see NOTE below
  *
  * DEPRECATED: Internal function, don't use.
  *
  * Parse an External ID or a Public ID
  *
  * NOTE: Productions [75] and [83] interact badly since [75] can generate
  *       'PUBLIC' S PubidLiteral S SystemLiteral
  *
  * [75] ExternalID ::= 'SYSTEM' S SystemLiteral
  *                   | 'PUBLIC' S PubidLiteral S SystemLiteral
  *
  * [83] PublicID ::= 'PUBLIC' S PubidLiteral
  *
  * Returns the function returns SystemLiteral and in the second
  *                case publicID receives PubidLiteral, is strict is off
  *                it is possible to return NULL and have publicID set.
  */
diff --git a/parserInternals.c b/parserInternals.c
index 8af86ba5..c547a207 100644
--- a/parserInternals.c
+++ b/parserInternals.c
@@ -390,115 +390,115 @@ void
 xmlNextChar(xmlParserCtxtPtr ctxt)
 {
     if ((ctxt == NULL) || (ctxt->instate == XML_PARSER_EOF) ||
         (ctxt->input == NULL))
         return;
 
     if (!(VALID_CTXT(ctxt))) {
         xmlErrInternal(ctxt, "Parser input data memory error\n", NULL);
 	ctxt->errNo = XML_ERR_INTERNAL_ERROR;
         xmlStopParser(ctxt);
 	return;
     }
 
-    if ((*ctxt->input->cur == 0) &&
+    if ((ctxt->input->cur >= ctxt->input->end) &&
         (xmlParserInputGrow(ctxt->input, INPUT_CHUNK) <= 0)) {
         return;
     }
 
     if (ctxt->charset == XML_CHAR_ENCODING_UTF8) {
         const unsigned char *cur;
         unsigned char c;
 
         /*
          *   2.11 End-of-Line Handling
          *   the literal two-character sequence "#xD#xA" or a standalone
          *   literal #xD, an XML processor must pass to the application
          *   the single character #xA.
          */
         if (*(ctxt->input->cur) == '\n') {
             ctxt->input->line++; ctxt->input->col = 1;
         } else
             ctxt->input->col++;
 
         /*
          * We are supposed to handle UTF8, check it's valid
          * From rfc2044: encoding of the Unicode values on UTF-8:
          *
          * UCS-4 range (hex.)           UTF-8 octet sequence (binary)
          * 0000 0000-0000 007F   0xxxxxxx
          * 0000 0080-0000 07FF   110xxxxx 10xxxxxx
          * 0000 0800-0000 FFFF   1110xxxx 10xxxxxx 10xxxxxx
          *
          * Check for the 0x110000 limit too
          */
         cur = ctxt->input->cur;
 
         c = *cur;
         if (c & 0x80) {
             if (c == 0xC0)
 	        goto encoding_error;
             if (cur[1] == 0) {
                 xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
                 cur = ctxt->input->cur;
             }
             if ((cur[1] & 0xc0) != 0x80)
                 goto encoding_error;
             if ((c & 0xe0) == 0xe0) {
                 unsigned int val;
 
                 if (cur[2] == 0) {
                     xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
                     cur = ctxt->input->cur;
                 }
                 if ((cur[2] & 0xc0) != 0x80)
                     goto encoding_error;
                 if ((c & 0xf0) == 0xf0) {
                     if (cur[3] == 0) {
                         xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
                         cur = ctxt->input->cur;
                     }
                     if (((c & 0xf8) != 0xf0) ||
                         ((cur[3] & 0xc0) != 0x80))
                         goto encoding_error;
                     /* 4-byte code */
                     ctxt->input->cur += 4;
                     val = (cur[0] & 0x7) << 18;
                     val |= (cur[1] & 0x3f) << 12;
                     val |= (cur[2] & 0x3f) << 6;
                     val |= cur[3] & 0x3f;
                 } else {
                     /* 3-byte code */
                     ctxt->input->cur += 3;
                     val = (cur[0] & 0xf) << 12;
                     val |= (cur[1] & 0x3f) << 6;
                     val |= cur[2] & 0x3f;
                 }
                 if (((val > 0xd7ff) && (val < 0xe000)) ||
                     ((val > 0xfffd) && (val < 0x10000)) ||
                     (val >= 0x110000)) {
 		xmlErrEncodingInt(ctxt, XML_ERR_INVALID_CHAR,
 				  "Char 0x%X out of allowed range\n",
 				  val);
                 }
             } else
                 /* 2-byte code */
                 ctxt->input->cur += 2;
         } else
             /* 1-byte code */
             ctxt->input->cur++;
     } else {
         /*
          * Assume it's a fixed length encoding (1) with
          * a compatible encoding for the ASCII set, since
          * XML constructs only use < 128 chars
          */
 
         if (*(ctxt->input->cur) == '\n') {
             ctxt->input->line++; ctxt->input->col = 1;
         } else
             ctxt->input->col++;
         ctxt->input->cur++;
     }
     if (*ctxt->input->cur == 0)
         xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
     return;
