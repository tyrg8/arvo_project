commit 6c8fca10452e445edf52daffc69f2e9dfcdac54c
Author: Nicolas Iooss <nicolas.iooss@m4x.org>
Date:   Wed Dec 30 21:11:40 2020 +0100

    libsepol/cil: do not add a stack variable to a list
    
    OSS-Fuzz found a heap use-after-free when the CIL compiler destroys its
    database after failing to compile the following policy:
    
        (validatetrans x (eq t3 (a)))
    
    This is caused by the fact that the validatetrans AST object references
    a stack variable local to __cil_fill_constraint_leaf_expr, when parsing
    the list "(a)":
    
        struct cil_list *sub_list;
        cil_fill_list(current->next->next->cl_head, leaf_expr_flavor, &sub_list);
        cil_list_append(*leaf_expr, CIL_LIST, &sub_list);
    
    Drop the & sign to really add the list like it is supposed to be.
    
    Fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28507
    Signed-off-by: Nicolas Iooss <nicolas.iooss@m4x.org>

diff --git a/libsepol/cil/src/cil_build_ast.c b/libsepol/cil/src/cil_build_ast.c
index 67801def..d5b9977c 100644
--- a/libsepol/cil/src/cil_build_ast.c
+++ b/libsepol/cil/src/cil_build_ast.c
@@ -2664,59 +2664,59 @@ static enum cil_flavor __cil_get_constraint_operand_flavor(const char *operand)
 static int __cil_fill_constraint_leaf_expr(struct cil_tree_node *current, enum cil_flavor expr_flavor, enum cil_flavor op, struct cil_list **leaf_expr)
 {
 	int rc = SEPOL_ERR;
 	enum cil_flavor leaf_expr_flavor = CIL_NONE;
 	enum cil_flavor l_flavor = CIL_NONE;
 	enum cil_flavor r_flavor = CIL_NONE;
 
 	l_flavor = __cil_get_constraint_operand_flavor(current->next->data);
 	r_flavor = __cil_get_constraint_operand_flavor(current->next->next->data);
 
 	switch (l_flavor) {
 	case CIL_CONS_U1:
 	case CIL_CONS_U2:
 	case CIL_CONS_U3:
 		leaf_expr_flavor = CIL_USER;
 		break;
 	case CIL_CONS_R1:
 	case CIL_CONS_R2:
 	case CIL_CONS_R3:
 		leaf_expr_flavor = CIL_ROLE;
 		break;
 	case CIL_CONS_T1:
 	case CIL_CONS_T2:
 	case CIL_CONS_T3:
 		leaf_expr_flavor = CIL_TYPE;
 		break;
 	case CIL_CONS_L1:
 	case CIL_CONS_L2:
 	case CIL_CONS_H1:
 	case CIL_CONS_H2:
 		leaf_expr_flavor = CIL_LEVEL;
 		break;
 	default:
 		cil_log(CIL_ERR, "Invalid left operand (%s)\n", (char*)current->next->data);
 		goto exit;
 	}
 
 	rc = cil_verify_constraint_leaf_expr_syntax(l_flavor, r_flavor, op, expr_flavor);
 	if (rc != SEPOL_OK) {
 		goto exit;
 	}
 
 	cil_list_init(leaf_expr, leaf_expr_flavor);
 
 	cil_list_append(*leaf_expr, CIL_OP, (void *)op);
 
 	cil_list_append(*leaf_expr, CIL_CONS_OPERAND, (void *)l_flavor);
 
 	if (r_flavor == CIL_STRING) {
 		cil_list_append(*leaf_expr, CIL_STRING, current->next->next->data);
 	} else if (r_flavor == CIL_LIST) {
 		struct cil_list *sub_list;
 		cil_fill_list(current->next->next->cl_head, leaf_expr_flavor, &sub_list);
-		cil_list_append(*leaf_expr, CIL_LIST, &sub_list);
+		cil_list_append(*leaf_expr, CIL_LIST, sub_list);
 	} else {
 		cil_list_append(*leaf_expr, CIL_CONS_OPERAND, (void *)r_flavor);
 	}
 
 	return SEPOL_OK;
