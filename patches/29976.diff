commit 7f86c209450b39ab7fc898707984e746c7ef2ebb
Merge: 1a42fcd4 5a65e3d8
Author: Francesc Alted <francesc@blosc.org>
Date:   Fri Jan 29 09:18:56 2021 +0100

    Merge pull request #205 from nmoinvaz/fixes/frame-read
    
    Fixed ASAN heap-buffer-overflow when reading frame index chunk.

diff --git a/blosc/blosc2.c b/blosc/blosc2.c
index 75ce7b7e..695a7fc1 100644
--- a/blosc/blosc2.c
+++ b/blosc/blosc2.c
@@ -2676,21 +2676,26 @@ int blosc_getitem(const void* src, int start, int nitems, void* dest) {
 int blosc2_getitem_ctx(blosc2_context* context, const void* src, int32_t srcsize,
     int start, int nitems, void* dest) {
   uint8_t* _src = (uint8_t*)(src);
   int result;
 
+  if (srcsize < BLOSC_MIN_HEADER_LENGTH) {
+    /* Not enough input to parse Blosc1 header */
+    return -1;
+  }
+
   /* Minimally populate the context */
   context->typesize = _src[BLOSC2_CHUNK_TYPESIZE];
   context->blocksize = sw32_(_src + BLOSC2_CHUNK_BLOCKSIZE);
   context->header_flags = *(_src + 2);
   context->filter_flags = get_filter_flags(*(_src + 2), context->typesize);
   if (context->serial_context == NULL) {
     context->serial_context = create_thread_context(context, 0);
   }
 
   /* Call the actual getitem function */
   result = _blosc_getitem(context, src, srcsize, start, nitems, dest);
 
   return result;
 }
 
 /* execute single compression/decompression job for a single thread_context */
diff --git a/blosc/frame.c b/blosc/frame.c
index 6ba27de7..6cc6a176 100644
--- a/blosc/frame.c
+++ b/blosc/frame.c
@@ -911,59 +911,57 @@ blosc2_frame* blosc2_frame_from_sframe(uint8_t *sframe, int64_t len, bool copy)
 // Get the compressed data offsets
 uint8_t* get_coffsets(blosc2_frame *frame, int32_t header_len, int64_t cbytes, int32_t *off_cbytes) {
   if (frame->coffsets != NULL) {
     if (off_cbytes != NULL) {
       *off_cbytes = *(int32_t *) (frame->coffsets + BLOSC2_CHUNK_CBYTES);
     }
     return frame->coffsets;
   }
   if (frame->sdata != NULL) {
-    if (header_len + cbytes > frame->len) {
+    int32_t off_pos = header_len + cbytes;
+    // Check that there is enough room to read Blosc header
+    if (off_pos + BLOSC_EXTENDED_HEADER_LENGTH > frame->len) {
       BLOSC_TRACE_ERROR("Cannot read the offsets past frame boundary.");
       return NULL;
     }
     // For in-memory frames, the coffset is just one pointer away
-    uint8_t* off_start = frame->sdata + header_len + cbytes;
+    uint8_t* off_start = frame->sdata + off_pos;
     if (off_cbytes != NULL) {
-      if (header_len + cbytes + BLOSC2_CHUNK_CBYTES + (signed)sizeof(int32_t) > frame->len) {
-        BLOSC_TRACE_ERROR("Cannot read the offsets compressed size past frame boundary.");
-        return NULL;
-      }
       *off_cbytes = *(int32_t*) (off_start + BLOSC2_CHUNK_CBYTES);
     }
     return off_start;
   }
 
   int64_t trailer_offset = get_trailer_offset(frame, header_len, true);
   int32_t coffsets_cbytes;
   if (frame->eframe) {
     coffsets_cbytes = (int32_t) (trailer_offset - (header_len + 0));
   }
   else {
     coffsets_cbytes = (int32_t) (trailer_offset - (header_len + cbytes));
   }
   if (off_cbytes != NULL) {
     *off_cbytes = coffsets_cbytes;
   }
   FILE* fp = NULL;
   uint8_t* coffsets = malloc((size_t)coffsets_cbytes);
   if (frame->eframe) {
     char* eframe_name = malloc(strlen(frame->urlpath) + strlen("/chunks.b2frame") + 1);
     sprintf(eframe_name, "%s/chunks.b2frame", frame->urlpath);
     fp = fopen(eframe_name, "rb");
     free(eframe_name);
     fseek(fp, header_len + 0, SEEK_SET);
   }
   else {
     fp = fopen(frame->urlpath, "rb");
     fseek(fp, header_len + cbytes, SEEK_SET);
   }
   size_t rbytes = fread(coffsets, 1, (size_t)coffsets_cbytes, fp);
   fclose(fp);
   if (rbytes != (size_t)coffsets_cbytes) {
     BLOSC_TRACE_ERROR("Cannot read the offsets out of the fileframe.");
     free(coffsets);
     return NULL;
   }
   frame->coffsets = coffsets;
   return coffsets;
 }
