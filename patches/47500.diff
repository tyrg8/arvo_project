commit 0535bfc3b7d5cd6fc73a7d4a6749a338fc5d7703
Author: Yuan <zodf0055980@gmail.com>
Date:   Tue May 31 17:55:12 2022 +0800

    HT_DEC: Fix opj_t1_allocate_buffers malloc size error (#1426) (fixes #1413)

diff --git a/src/lib/openjp2/ht_dec.c b/src/lib/openjp2/ht_dec.c
index e2f3afd6..a803d1bb 100644
--- a/src/lib/openjp2/ht_dec.c
+++ b/src/lib/openjp2/ht_dec.c
@@ -1016,80 +1016,80 @@ OPJ_UINT32 frwd_fetch(frwd_struct_t *msp)
 //************************************************************************/
 /** @brief Allocates T1 buffers
   *
   *  @param [in, out]  t1 is codeblock cofficients storage
   *  @param [in]       w is codeblock width
   *  @param [in]       h is codeblock height
   */
 static OPJ_BOOL opj_t1_allocate_buffers(
     opj_t1_t *t1,
     OPJ_UINT32 w,
     OPJ_UINT32 h)
 {
     OPJ_UINT32 flagssize;
 
     /* No risk of overflow. Prior checks ensure those assert are met */
     /* They are per the specification */
     assert(w <= 1024);
     assert(h <= 1024);
     assert(w * h <= 4096);
 
     /* encoder uses tile buffer, so no need to allocate */
     {
         OPJ_UINT32 datasize = w * h;
 
         if (datasize > t1->datasize) {
             opj_aligned_free(t1->data);
             t1->data = (OPJ_INT32*)
                        opj_aligned_malloc(datasize * sizeof(OPJ_INT32));
             if (!t1->data) {
                 /* FIXME event manager error callback */
                 return OPJ_FALSE;
             }
             t1->datasize = datasize;
         }
         /* memset first arg is declared to never be null by gcc */
         if (t1->data != NULL) {
             memset(t1->data, 0, datasize * sizeof(OPJ_INT32));
         }
     }
 
     // We expand these buffers to multiples of 16 bytes.
     // We need 4 buffers of 129 integers each, expanded to 132 integers each
     // We also need 514 bytes of buffer, expanded to 528 bytes
     flagssize = 132U * sizeof(OPJ_UINT32) * 4U; // expanded to multiple of 16
     flagssize += 528U; // 514 expanded to multiples of 16
 
     {
         if (flagssize > t1->flagssize) {
 
             opj_aligned_free(t1->flags);
-            t1->flags = (opj_flag_t*) opj_aligned_malloc(flagssize);
+            t1->flags = (opj_flag_t*) opj_aligned_malloc(flagssize * sizeof(opj_flag_t));
             if (!t1->flags) {
                 /* FIXME event manager error callback */
                 return OPJ_FALSE;
             }
         }
         t1->flagssize = flagssize;
 
-        memset(t1->flags, 0, flagssize);
+        memset(t1->flags, 0, flagssize * sizeof(opj_flag_t));
     }
 
     t1->w = w;
     t1->h = h;
 
     return OPJ_TRUE;
 }
 
 //************************************************************************/
 /** @brief Decodes one codeblock, processing the cleanup, siginificance
   *         propagation, and magnitude refinement pass
   *
   *  @param [in, out]  t1 is codeblock cofficients storage
   *  @param [in]       cblk is codeblock properties
   *  @param [in]       orient is the subband to which the codeblock belongs (not needed)
   *  @param [in]       roishift is region of interest shift
   *  @param [in]       cblksty is codeblock style
   *  @param [in]       p_manager is events print manager
   *  @param [in]       p_manager_mutex a mutex to control access to p_manager
   *  @param [in]       check_pterm: check termination (not used)
   */
