commit ea933f17c3c6b9fa1daf8d03baa34f7bec855d6c
Author: Alan Modra <amodra@gmail.com>
Date:   Thu Jan 2 17:39:32 2020 +1030

    Release bfd_alloc memory in bfd_check_format_matches
    
    It's a little tricky.  We can release any memory back when we have a
    match failure, but after a match success which we might want to
    preserve for later use the high water mark must change to that of the
    matched bfd.
    
            * format.c (bfd_check_format_matches): Add preserve_match.
            Save initial bfd state in "preserve", matched bfd state in
            "preserve_match".  Save just the first match.  Release
            bfd_alloc memory.  Restore and finish preserved state as
            appropriate on all function exit paths.

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 8291a980f43..148de794bc4 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,72 +1,80 @@
+2020-01-04  Alan Modra  <amodra@gmail.com>
+
+	* format.c (bfd_check_format_matches): Add preserve_match.
+	Save initial bfd state in "preserve", matched bfd state in
+	"preserve_match".  Save just the first match.  Release
+	bfd_alloc memory.  Restore and finish preserved state as
+	appropriate on all function exit paths.
+
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* mmo.c (mmo_mkobject): Allocate tdata with bfd_zalloc.
 
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* coffgen.c (coff_real_object_p): Free malloc'd memory on target
 	match too.
 
 2020-01-03  Nick Clifton  <nickc@redhat.com>
 
 	PR 25307
 	(bfd_pef_parse_function_stubs): Correct the test that ensures that
 	there is enough data remaining in the code buffer before
 	attempting to read a function stub.
 
 2020-01-03  Nick Clifton  <nickc@redhat.com>
 
 	PR 25308
 	* elf-properties.c (_bfd_elf_convert_gnu_properties): Check the
 	return value from bfd_malloc.
 	* elf32-arm.c (bfd_elf32_arm_vfp11_fix_veneer_locations): Likewise.
 	(bfd_elf32_arm_stm32l4xx_fix_veneer_locations): Likewise.
 	(elf32_arm_filter_cmse_symbols): Likewise.
 	(elf32_arm_write_section): Likewise.
 	* mach-o.c (bfd_mach_o_core_fetch_environment): Likewise.
 	(bfd_mach_o_follow_dsym): Likewise.
 	* pef.c (bfd_pef_print_loader_section): Likewise.
 	(bfd_pef_scan_start_address): Likewise.
 	(bfd_pef_parse_function_stubs): Likewise.
 	(bfd_pef_parse_symbols): Likewise.
 
 2020-01-03  Sergei Trofimovich  <siarheit@google.com>
 
         * elfnn-ia64.c (elfNN_ia64_merge_private_bfd_data): don't fail
         on binary inputs ld/PR25316.
         (is_ia64_elf): new helper to filter on ia64 objects.
 
 2020-01-03  Jan Beulich  <jbeulich@suse.com>
 
 	* mach-o.c (cpusubtype, bfd_mach_o_header_p): Insert underscore
 	in parameter names.
 	(bfd_mach_o_scan): Insert underscore in two variable names.
 
 2020-01-02  Sergey Belyashov  <sergey.belyashov@gmail.com>
 
 	* Makefile.am: Add z80-elf target support.
 	* configure.ac: Likewise.
 	* targets.c: Likewise.
 	* Makefile.in: Regenerate.
 	* configure: Regenerate.
 	* config.bfd: Add z80-elf target support and new arches: ez80 and
 	z180.
 	* elf32-z80.c: New file.
 	* archures.c: Add new z80 architectures: eZ80 and Z180.
 	* coffcode.h: Likewise.
 	* cpu-z80.c: Likewise.
 	* coff-z80.c: Add new relocations for Z80 target and local label
 	check.
 	* reloc.c: Add new relocs.
 	* bfd-in2.h: Regenerate.
 	* libbfd.h: Regenerate.
 
 2020-01-02  Tamar Christina  <tamar.christina@arm.com>
 
 	PR 25210
 	PR 24753
 	* elfnn-aarch64.c (_bfd_aarch64_create_stub_section): Set ELF class.
 
 2020-01-01  Alan Modra  <amodra@gmail.com>
 
 	Update year range in copyright notice of all files.
diff --git a/bfd/format.c b/bfd/format.c
index 5c30431d7a0..e53955eb458 100644
--- a/bfd/format.c
+++ b/bfd/format.c
@@ -210,312 +210,336 @@ bfd_boolean
 bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)
 {
   extern const bfd_target binary_vec;
 #if BFD_SUPPORTS_PLUGINS
   extern const bfd_target plugin_vec;
 #endif
   const bfd_target * const *target;
   const bfd_target **matching_vector = NULL;
   const bfd_target *save_targ, *right_targ, *ar_right_targ, *match_targ;
   int match_count, best_count, best_match;
   int ar_match_index;
   unsigned int initial_section_id = _bfd_section_id;
-  struct bfd_preserve preserve;
+  struct bfd_preserve preserve, preserve_match;
 
   if (matching != NULL)
     *matching = NULL;
 
   if (!bfd_read_p (abfd)
       || (unsigned int) abfd->format >= (unsigned int) bfd_type_end)
     {
       bfd_set_error (bfd_error_invalid_operation);
       return FALSE;
     }
 
   if (abfd->format != bfd_unknown)
     return abfd->format == format;
 
   if (matching != NULL || *bfd_associated_vector != NULL)
     {
       bfd_size_type amt;
 
       amt = sizeof (*matching_vector) * 2 * _bfd_target_vector_entries;
       matching_vector = (const bfd_target **) bfd_malloc (amt);
       if (!matching_vector)
 	return FALSE;
     }
 
   /* Presume the answer is yes.  */
   abfd->format = format;
   save_targ = abfd->xvec;
-  preserve.marker = NULL;
+
+  preserve_match.marker = NULL;
+  if (!bfd_preserve_save (abfd, &preserve))
+    goto err_ret;
 
   /* If the target type was explicitly specified, just check that target.  */
   if (!abfd->target_defaulted)
     {
       if (bfd_seek (abfd, (file_ptr) 0, SEEK_SET) != 0)	/* rewind! */
 	goto err_ret;
 
       right_targ = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));
 
       if (right_targ)
 	goto ok_ret;
 
       /* For a long time the code has dropped through to check all
 	 targets if the specified target was wrong.  I don't know why,
 	 and I'm reluctant to change it.  However, in the case of an
 	 archive, it can cause problems.  If the specified target does
 	 not permit archives (e.g., the binary target), then we should
 	 not allow some other target to recognize it as an archive, but
 	 should instead allow the specified target to recognize it as an
 	 object.  When I first made this change, it broke the PE target,
 	 because the specified pei-i386 target did not recognize the
 	 actual pe-i386 archive.  Since there may be other problems of
 	 this sort, I changed this test to check only for the binary
 	 target.  */
       if (format == bfd_archive && save_targ == &binary_vec)
 	goto err_unrecog;
     }
 
   /* Since the target type was defaulted, check them all in the hope
      that one will be uniquely recognized.  */
   right_targ = NULL;
   ar_right_targ = NULL;
   match_targ = NULL;
   best_match = 256;
   best_count = 0;
   match_count = 0;
   ar_match_index = _bfd_target_vector_entries;
 
   for (target = bfd_target_vector; *target != NULL; target++)
     {
       const bfd_target *temp;
+      void **high_water;
 
       /* The binary target matches anything, so don't return it when
 	 searching.  Don't match the plugin target if we have another
 	 alternative since we want to properly set the input format
 	 before allowing a plugin to claim the file.  Also, don't
 	 check the default target twice.  */
       if (*target == &binary_vec
 #if BFD_SUPPORTS_PLUGINS
 	  || (match_count != 0 && *target == &plugin_vec)
 #endif
 	  || (!abfd->target_defaulted && *target == save_targ))
 	continue;
 
       /* If we already tried a match, the bfd is modified and may
 	 have sections attached, which will confuse the next
 	 _bfd_check_format call.  */
       bfd_reinit (abfd, initial_section_id);
+      /* Free bfd_alloc memory too.  If we have matched and preserved
+	 a target then the high water mark is that much higher.  */
+      if (preserve_match.marker)
+	high_water = &preserve_match.marker;
+      else
+	high_water = &preserve.marker;
+      bfd_release (abfd, *high_water);
+      *high_water = bfd_alloc (abfd, 1);
 
       /* Change BFD's target temporarily.  */
       abfd->xvec = *target;
 
       if (bfd_seek (abfd, (file_ptr) 0, SEEK_SET) != 0)
 	goto err_ret;
 
       /* If _bfd_check_format neglects to set bfd_error, assume
 	 bfd_error_wrong_format.  We didn't used to even pay any
 	 attention to bfd_error, so I suspect that some
 	 _bfd_check_format might have this problem.  */
       bfd_set_error (bfd_error_wrong_format);
 
       temp = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));
       if (temp)
 	{
 	  int match_priority = temp->match_priority;
 #if BFD_SUPPORTS_PLUGINS
 	  /* If this object can be handled by a plugin, give that the
 	     lowest priority; objects both handled by a plugin and
 	     with an underlying object format will be claimed
 	     separately by the plugin.  */
 	  if (*target == &plugin_vec)
 	    match_priority = (*target)->match_priority;
 #endif
 
-	  match_targ = temp;
-	  if (preserve.marker != NULL)
-	    bfd_preserve_finish (abfd, &preserve);
-
 	  if (abfd->format != bfd_archive
 	      || (bfd_has_map (abfd)
 		  && bfd_get_error () != bfd_error_wrong_object_format))
 	    {
 	      /* If this is the default target, accept it, even if
 		 other targets might match.  People who want those
 		 other targets have to set the GNUTARGET variable.  */
 	      if (temp == bfd_default_vector[0])
 		goto ok_ret;
 
 	      if (matching_vector)
 		matching_vector[match_count] = temp;
 	      match_count++;
 
 	      if (match_priority < best_match)
 		{
 		  best_match = match_priority;
 		  best_count = 0;
 		}
 	      if (match_priority <= best_match)
 		{
 		  /* This format checks out as ok!  */
 		  right_targ = temp;
 		  best_count++;
 		}
 	    }
 	  else
 	    {
 	      /* An archive with no armap or objects of the wrong
 		 type.  We want this target to match if we get no
 		 better matches.  */
 	      if (ar_right_targ != bfd_default_vector[0])
 		ar_right_targ = *target;
 	      if (matching_vector)
 		matching_vector[ar_match_index] = *target;
 	      ar_match_index++;
 	    }
 
-	  if (!bfd_preserve_save (abfd, &preserve))
-	    goto err_ret;
+	  if (preserve_match.marker == NULL)
+	    {
+	      match_targ = temp;
+	      if (!bfd_preserve_save (abfd, &preserve_match))
+		goto err_ret;
+	    }
 	}
       else if (bfd_get_error () != bfd_error_wrong_format)
 	goto err_ret;
     }
 
   if (best_count == 1)
     match_count = 1;
 
   if (match_count == 0)
     {
       /* Try partial matches.  */
       right_targ = ar_right_targ;
 
       if (right_targ == bfd_default_vector[0])
 	{
 	  match_count = 1;
 	}
       else
 	{
 	  match_count = ar_match_index - _bfd_target_vector_entries;
 
 	  if (matching_vector && match_count > 1)
 	    memcpy (matching_vector,
 		    matching_vector + _bfd_target_vector_entries,
 		    sizeof (*matching_vector) * match_count);
 	}
     }
 
   /* We have more than one equally good match.  If any of the best
      matches is a target in config.bfd targ_defvec or targ_selvecs,
      choose it.  */
   if (match_count > 1)
     {
       const bfd_target * const *assoc = bfd_associated_vector;
 
       while ((right_targ = *assoc++) != NULL)
 	{
 	  int i = match_count;
 
 	  while (--i >= 0)
 	    if (matching_vector[i] == right_targ
 		&& right_targ->match_priority <= best_match)
 	      break;
 
 	  if (i >= 0)
 	    {
 	      match_count = 1;
 	      break;
 	    }
 	}
     }
 
   /* We still have more than one equally good match, and at least some
      of the targets support match priority.  Choose the first of the
      best matches.  */
   if (matching_vector && match_count > 1 && best_count != match_count)
     {
       int i;
 
       for (i = 0; i < match_count; i++)
 	{
 	  right_targ = matching_vector[i];
 	  if (right_targ->match_priority <= best_match)
 	    break;
 	}
       match_count = 1;
     }
 
   /* There is way too much undoing of half-known state here.  We
      really shouldn't iterate on live bfd's.  Note that saving the
      whole bfd and restoring it would be even worse; the first thing
      you notice is that the cached bfd file position gets out of sync.  */
-  if (preserve.marker != NULL)
-    bfd_preserve_restore (abfd, &preserve);
+  if (preserve_match.marker != NULL)
+    bfd_preserve_restore (abfd, &preserve_match);
 
   if (match_count == 1)
     {
       abfd->xvec = right_targ;
       /* If we come out of the loop knowing that the last target that
 	 matched is the one we want, then ABFD should still be in a usable
-	 state (except possibly for XVEC).  */
+	 state (except possibly for XVEC).  This is not just an
+	 optimisation.  In the case of plugins a match against the
+	 plugin target can result in the bfd being changed such that
+	 it no longer matches the plugin target, nor will it match
+	 RIGHT_TARG again.  */
       if (match_targ != right_targ)
 	{
 	  bfd_reinit (abfd, initial_section_id);
+	  bfd_release (abfd, preserve.marker);
 	  if (bfd_seek (abfd, (file_ptr) 0, SEEK_SET) != 0)
 	    goto err_ret;
 	  match_targ = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));
 	  BFD_ASSERT (match_targ != NULL);
 	}
 
     ok_ret:
       /* If the file was opened for update, then `output_has_begun'
 	 some time ago when the file was created.  Do not recompute
 	 sections sizes or alignments in _bfd_set_section_contents.
 	 We can not set this flag until after checking the format,
 	 because it will interfere with creation of BFD sections.  */
       if (abfd->direction == both_direction)
 	abfd->output_has_begun = TRUE;
 
       if (matching_vector)
 	free (matching_vector);
+      if (preserve_match.marker != NULL)
+	bfd_preserve_finish (abfd, &preserve_match);
+      bfd_preserve_finish (abfd, &preserve);
 
       /* File position has moved, BTW.  */
       return TRUE;
     }
 
   if (match_count == 0)
     {
     err_unrecog:
       bfd_set_error (bfd_error_file_not_recognized);
     err_ret:
       abfd->xvec = save_targ;
       abfd->format = bfd_unknown;
       if (matching_vector)
 	free (matching_vector);
-      if (preserve.marker != NULL)
-	bfd_preserve_restore (abfd, &preserve);
+      if (preserve_match.marker != NULL)
+	bfd_preserve_finish (abfd, &preserve_match);
+      bfd_preserve_restore (abfd, &preserve);
       return FALSE;
     }
 
   /* Restore original target type and format.  */
   abfd->xvec = save_targ;
   abfd->format = bfd_unknown;
   bfd_set_error (bfd_error_file_ambiguously_recognized);
 
   if (matching)
     {
       *matching = (char **) matching_vector;
       matching_vector[match_count] = NULL;
       /* Return target names.  This is a little nasty.  Maybe we
 	 should do another bfd_malloc?  */
       while (--match_count >= 0)
 	{
 	  const char *name = matching_vector[match_count]->name;
 	  *(const char **) &matching_vector[match_count] = name;
 	}
     }
   else if (matching_vector)
     free (matching_vector);
+  if (preserve_match.marker != NULL)
+    bfd_preserve_finish (abfd, &preserve_match);
+  bfd_preserve_restore (abfd, &preserve);
   return FALSE;
 }
 
 /*
