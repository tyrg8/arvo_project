commit a51cbd865f922b9a39a0db421ab84b6c4108bd56
Author: Albert Astals Cid <aacid@kde.org>
Date:   Sun Feb 3 13:47:20 2019 +0100

    tga: fail gracefully if readRawData errors
    
    oss-fuzz/12818

diff --git a/src/imageformats/tga.cpp b/src/imageformats/tga.cpp
index ab05e33..cbe4089 100644
--- a/src/imageformats/tga.cpp
+++ b/src/imageformats/tga.cpp
@@ -177,156 +177,163 @@ struct TgaHeaderInfo {
 static bool LoadTGA(QDataStream &s, const TgaHeader &tga, QImage &img)
 {
     // Create image.
     img = QImage(tga.width, tga.height, QImage::Format_RGB32);
 
     TgaHeaderInfo info(tga);
 
     // Bits 0-3 are the numbers of alpha bits (can be zero!)
     const int numAlphaBits = tga.flags & 0xf;
     // However alpha exists only in the 32 bit format.
     if ((tga.pixel_size == 32) && (tga.flags & 0xf)) {
         img = QImage(tga.width, tga.height, QImage::Format_ARGB32);
 
         if (numAlphaBits > 8) {
             return false;
         }
     }
 
     uint pixel_size = (tga.pixel_size / 8);
     qint64 size = qint64(tga.width) * qint64(tga.height) * pixel_size;
 
     if (size < 1) {
 //          qDebug() << "This TGA file is broken with size " << size;
         return false;
     }
 
     // Read palette.
     char palette[768];
     if (info.pal) {
         // @todo Support palettes in other formats!
         const int size = 3 * tga.colormap_length;
         const int dataRead = s.readRawData(palette, size);
+        if (dataRead < 0) {
+            return false;
+        }
         if (dataRead < size) {
             memset(&palette[dataRead], 0, size - dataRead);
         }
     }
 
     // Allocate image.
     uchar *const image = reinterpret_cast<uchar*>(malloc(size));
     if (!image) {
         return false;
     }
 
     bool valid = true;
 
     if (info.rle) {
         // Decode image.
         char *dst = (char *)image;
         qint64 num = size;
 
         while (num > 0) {
             if (s.atEnd()) {
                 valid = false;
                 break;
             }
 
             // Get packet header.
             uchar c;
             s >> c;
 
             uint count = (c & 0x7f) + 1;
             num -= count * pixel_size;
             if (num < 0) {
                 valid = false;
                 break;
             }
 
             if (c & 0x80) {
                 // RLE pixels.
                 assert(pixel_size <= 8);
                 char pixel[8];
                 s.readRawData(pixel, pixel_size);
                 do {
                     memcpy(dst, pixel, pixel_size);
                     dst += pixel_size;
                 } while (--count);
             } else {
                 // Raw pixels.
                 count *= pixel_size;
                 s.readRawData(dst, count);
                 dst += count;
             }
         }
     } else {
         // Read raw image.
         const int dataRead = s.readRawData((char *)image, size);
+        if (dataRead < 0) {
+            free(image);
+            return false;
+        }
         if (dataRead < size) {
             memset(&image[dataRead], 0, size - dataRead);
         }
     }
 
     if (!valid) {
         free(image);
         return false;
     }
 
     // Convert image to internal format.
     int y_start, y_step, y_end;
     if (tga.flags & TGA_ORIGIN_UPPER) {
         y_start = 0;
         y_step = 1;
         y_end = tga.height;
     } else {
         y_start = tga.height - 1;
         y_step = -1;
         y_end = -1;
     }
 
     uchar *src = image;
 
     for (int y = y_start; y != y_end; y += y_step) {
         QRgb *scanline = (QRgb *) img.scanLine(y);
 
         if (info.pal) {
             // Paletted.
             for (int x = 0; x < tga.width; x++) {
                 uchar idx = *src++;
                 scanline[x] = qRgb(palette[3 * idx + 2], palette[3 * idx + 1], palette[3 * idx + 0]);
             }
         } else if (info.grey) {
             // Greyscale.
             for (int x = 0; x < tga.width; x++) {
                 scanline[x] = qRgb(*src, *src, *src);
                 src++;
             }
         } else {
             // True Color.
             if (tga.pixel_size == 16) {
                 for (int x = 0; x < tga.width; x++) {
                     Color555 c = *reinterpret_cast<Color555 *>(src);
                     scanline[x] = qRgb((c.r << 3) | (c.r >> 2), (c.g << 3) | (c.g >> 2), (c.b << 3) | (c.b >> 2));
                     src += 2;
                 }
             } else if (tga.pixel_size == 24) {
                 for (int x = 0; x < tga.width; x++) {
                     scanline[x] = qRgb(src[2], src[1], src[0]);
                     src += 3;
                 }
             } else if (tga.pixel_size == 32) {
                 for (int x = 0; x < tga.width; x++) {
                     // ### TODO: verify with images having really some alpha data
                     const uchar alpha = (src[3] << (8 - numAlphaBits));
                     scanline[x] = qRgba(src[2], src[1], src[0], alpha);
                     src += 4;
                 }
             }
         }
     }
 
     // Free image.
     free(image);
 
     return true;
 }
 
 } // namespace
