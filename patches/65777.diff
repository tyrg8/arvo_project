commit 6e3b7982dbcf8087374694253e0e248fbc6c6e3e
Author: m-holger <m-holger@kubitscheck.org>
Date:   Wed Jan 17 10:39:06 2024 +0000

    Fix incorrect handling of invalid negative object ids
    
    Fix two errors introduced in #1110 and #1112. Since
    #1110, encountering the invalid indirect reference #1110
    -2147483648 n R produces an integer underflow which, if
     undetected, immediately trigger a logic error. Since
     #1112, object -1 0 R may be incorrectly identified as
     an earlier generation of itself and deleted,
     invalidating a live iterator.

diff --git a/fuzz/CMakeLists.txt b/fuzz/CMakeLists.txt
index df1fa807..e4a8cf36 100644
--- a/fuzz/CMakeLists.txt
+++ b/fuzz/CMakeLists.txt
@@ -87,30 +87,32 @@ set(CORPUS_FROM_TEST
 # Any file that qpdf_fuzzer should be tested with can be named
 # something.fuzz and dropped into qpdf_extra. Update count for qpdf in
 # @fuzzers qtest/fuzz.test if you change this list.
 set(CORPUS_OTHER
   15316.fuzz
   15387.fuzz
   15390.fuzz
   15442.fuzz
   15445.fuzz
   15983.fuzz
   16172.fuzz
   16301.fuzz
   16953.fuzz
   18241.fuzz
   18247.fuzz
   23172.fuzz
   23599.fuzz
   23642.fuzz
   23642-mod.fuzz
   26761.fuzz
   26994.fuzz
   27393.fuzz
   28262.fuzz
   30507.fuzz
   37740.fuzz
   57639.fuzz
   65681.fuzz
+  65773.fuzz
+  65777.fuzz
 )
 
 set(CORPUS_DIR ${CMAKE_CURRENT_BINARY_DIR}/qpdf_corpus)
diff --git a/fuzz/qpdf_extra/65773.fuzz b/fuzz/qpdf_extra/65773.fuzz
new file mode 100644
index 00000000..2d0aabf5
--- /dev/null
+++ b/fuzz/qpdf_extra/65773.fuzz
@@ -0,0 +1 @@
+trailer<</Root<<[-2147483648 7 R 8 4 R]>>>>
\ No newline at end of file
diff --git a/fuzz/qpdf_extra/65777.fuzz b/fuzz/qpdf_extra/65777.fuzz
new file mode 100644
index 00000000..066c960b
Binary files /dev/null and b/fuzz/qpdf_extra/65777.fuzz differ
diff --git a/fuzz/qtest/fuzz.test b/fuzz/qtest/fuzz.test
index adce995c..7ca371fd 100644
--- a/fuzz/qtest/fuzz.test
+++ b/fuzz/qtest/fuzz.test
@@ -14,13 +14,13 @@ my $qpdf_corpus = $ENV{'QPDF_FUZZ_CORPUS'} || die "must set QPDF_FUZZ_CORPUS";
 my @fuzzers = (
     ['ascii85' => 1],
     ['dct' => 1],
     ['flate' => 1],
     ['hex' => 1],
     ['lzw' => 2],
     ['pngpredictor' => 1],
     ['runlength' => 6],
     ['tiffpredictor' => 1],
-    ['qpdf' => 54],             # increment when adding new files
+    ['qpdf' => 56],             # increment when adding new files
     );
 
 my $n_tests = 0;
diff --git a/libqpdf/QPDF.cc b/libqpdf/QPDF.cc
index 89d4a0a8..8cff3dfd 100644
--- a/libqpdf/QPDF.cc
+++ b/libqpdf/QPDF.cc
@@ -626,93 +626,94 @@ void
 QPDF::read_xref(qpdf_offset_t xref_offset)
 {
     std::map<int, int> free_table;
     std::set<qpdf_offset_t> visited;
     while (xref_offset) {
         visited.insert(xref_offset);
         char buf[7];
         memset(buf, 0, sizeof(buf));
         m->file->seek(xref_offset, SEEK_SET);
         // Some files miss the mark a little with startxref. We could do a better job of searching
         // in the neighborhood for something that looks like either an xref table or stream, but the
         // simple heuristic of skipping whitespace can help with the xref table case and is harmless
         // with the stream case.
         bool done = false;
         bool skipped_space = false;
         while (!done) {
             char ch;
             if (1 == m->file->read(&ch, 1)) {
                 if (QUtil::is_space(ch)) {
                     skipped_space = true;
                 } else {
                     m->file->unreadCh(ch);
                     done = true;
                 }
             } else {
                 QTC::TC("qpdf", "QPDF eof skipping spaces before xref", skipped_space ? 0 : 1);
                 done = true;
             }
         }
 
         m->file->read(buf, sizeof(buf) - 1);
         // The PDF spec says xref must be followed by a line terminator, but files exist in the wild
         // where it is terminated by arbitrary whitespace.
         if ((strncmp(buf, "xref", 4) == 0) && QUtil::is_space(buf[4])) {
             if (skipped_space) {
                 QTC::TC("qpdf", "QPDF xref skipped space");
                 warn(damagedPDF("", 0, "extraneous whitespace seen before xref"));
             }
             QTC::TC(
                 "qpdf",
                 "QPDF xref space",
                 ((buf[4] == '\n')       ? 0
                      : (buf[4] == '\r') ? 1
                      : (buf[4] == ' ')  ? 2
                                         : 9999));
             int skip = 4;
             // buf is null-terminated, and QUtil::is_space('\0') is false, so this won't overrun.
             while (QUtil::is_space(buf[skip])) {
                 ++skip;
             }
             xref_offset = read_xrefTable(xref_offset + skip);
         } else {
             xref_offset = read_xrefStream(xref_offset);
         }
         if (visited.count(xref_offset) != 0) {
             QTC::TC("qpdf", "QPDF xref loop");
             throw damagedPDF("", 0, "loop detected following xref tables");
         }
     }
 
     if (!m->trailer.isInitialized()) {
         throw damagedPDF("", 0, "unable to find trailer while reading xref");
     }
     int size = m->trailer.getKey("/Size").getIntValueAsInt();
     int max_obj = 0;
     if (!m->xref_table.empty()) {
         max_obj = (*(m->xref_table.rbegin())).first.getObj();
     }
     if (!m->deleted_objects.empty()) {
         max_obj = std::max(max_obj, *(m->deleted_objects.rbegin()));
     }
     if ((size < 1) || (size - 1 != max_obj)) {
         QTC::TC("qpdf", "QPDF xref size mismatch");
         warn(damagedPDF(
             "",
             0,
             ("reported number of objects (" + std::to_string(size) +
              ") is not one plus the highest object number (" + std::to_string(max_obj) + ")")));
     }
 
     // We no longer need the deleted_objects table, so go ahead and clear it out to make sure we
     // never depend on its being set.
     m->deleted_objects.clear();
 
     // Make sure we keep only the highest generation for any object.
     QPDFObjGen last_og{-1, 0};
-    for (auto const& og: m->xref_table) {
-        if (og.first.getObj() == last_og.getObj())
+    for (auto const& item: m->xref_table) {
+        auto id = item.first.getObj();
+        if (id == last_og.getObj() && id > 0)
             removeObject(last_og);
-        last_og = og.first;
+        last_og = item.first;
     }
 }
 
@@ -2387,81 +2388,81 @@ std::vector<QPDFObjGen>
 QPDF::getCompressibleObjGens()
 {
     // Return a list of objects that are allowed to be in object streams.  Walk through the objects
     // by traversing the document from the root, including a traversal of the pages tree.  This
     // makes that objects that are on the same page are more likely to be in the same object stream,
     // which is slightly more efficient, particularly with linearized files.  This is better than
     // iterating through the xref table since it avoids preserving orphaned items.
 
     // Exclude encryption dictionary, if any
     QPDFObjectHandle encryption_dict = m->trailer.getKey("/Encrypt");
     QPDFObjGen encryption_dict_og = encryption_dict.getObjGen();
 
     const size_t max_obj = getObjectCount();
     std::vector<bool> visited(max_obj, false);
     std::vector<QPDFObjectHandle> queue;
     queue.reserve(512);
     queue.push_back(m->trailer);
     std::vector<QPDFObjGen> result;
     while (!queue.empty()) {
         auto obj = queue.back();
         queue.pop_back();
-        if (obj.isIndirect()) {
+        if (obj.getObjectID() > 0) {
             QPDFObjGen og = obj.getObjGen();
             const size_t id = toS(og.getObj() - 1);
             if (id >= max_obj)
                 throw std::logic_error(
                     "unexpected object id encountered in getCompressibleObjGens");
             if (visited[id]) {
                 QTC::TC("qpdf", "QPDF loop detected traversing objects");
                 continue;
             }
 
             // Check whether this is the current object. If not, remove it (which changes it into a
             // direct null and therefore stops us from revisiting it) and move on to the next object
             // in the queue.
             auto upper = m->obj_cache.upper_bound(og);
             if (upper != m->obj_cache.end() && upper->first.getObj() == og.getObj()) {
                 removeObject(og);
                 continue;
             }
 
             visited[id] = true;
 
             if (og == encryption_dict_og) {
                 QTC::TC("qpdf", "QPDF exclude encryption dictionary");
             } else if (!(obj.isStream() ||
                          (obj.isDictionaryOfType("/Sig") && obj.hasKey("/ByteRange") &&
                           obj.hasKey("/Contents")))) {
                 result.push_back(og);
             }
         }
         if (obj.isStream()) {
             QPDFObjectHandle dict = obj.getDict();
             std::set<std::string> keys = dict.getKeys();
             for (auto iter = keys.rbegin(); iter != keys.rend(); ++iter) {
                 std::string const& key = *iter;
                 QPDFObjectHandle value = dict.getKey(key);
                 if (key == "/Length") {
                     // omit stream lengths
                     if (value.isIndirect()) {
                         QTC::TC("qpdf", "QPDF exclude indirect length");
                     }
                 } else {
                     queue.push_back(value);
                 }
             }
         } else if (obj.isDictionary()) {
             std::set<std::string> keys = obj.getKeys();
             for (auto iter = keys.rbegin(); iter != keys.rend(); ++iter) {
                 queue.push_back(obj.getKey(*iter));
             }
         } else if (obj.isArray()) {
             int n = obj.getArrayNItems();
             for (int i = 1; i <= n; ++i) {
                 queue.push_back(obj.getArrayItem(n - i));
             }
         }
     }
 
     return result;
 }
