commit 672c77d7c923402f549371e08b39ece4552cbb85
Author: Peter Hillman <peterh@wetafx.co.nz>
Date:   Mon May 16 11:52:06 2022 +1200

    Refactor ImfCheckFile and oss-fuzz tests (#1257)
    
    Signed-off-by: Peter Hillman <peterh@wetafx.co.nz>

diff --git a/src/lib/OpenEXR/ImfHeader.cpp b/src/lib/OpenEXR/ImfHeader.cpp
index f4b2ff62..30cd5831 100644
--- a/src/lib/OpenEXR/ImfHeader.cpp
+++ b/src/lib/OpenEXR/ImfHeader.cpp
@@ -1270,6 +1270,21 @@ Header::setMaxTileSize (int maxWidth, int maxHeight)
     maxTileHeight = maxHeight;
 }
 
+void
+Header::getMaxImageSize (int& maxWidth, int& maxHeight)
+{
+    maxWidth = maxImageWidth;
+    maxHeight = maxImageHeight;
+}
+
+void
+Header::getMaxTileSize (int& maxWidth, int& maxHeight)
+{
+    maxWidth = maxTileWidth;
+    maxHeight= maxTileHeight;
+}
+
+
 bool
 Header::readsNothing ()
 {
diff --git a/src/lib/OpenEXR/ImfHeader.h b/src/lib/OpenEXR/ImfHeader.h
index 4a2f4fe6..c9fd839d 100644
--- a/src/lib/OpenEXR/ImfHeader.h
+++ b/src/lib/OpenEXR/ImfHeader.h
@@ -37,436 +37,441 @@ class IMF_EXPORT_TYPE Header
 {
 public:
     //----------------------------------------------------------------
     // Default constructor -- the display window and the data window
     // are both set to Box2i (V2i (0, 0), V2i (width-1, height-1).
     //----------------------------------------------------------------
 
     IMF_EXPORT
     Header (
         int                         width            = 64,
         int                         height           = 64,
         float                       pixelAspectRatio = 1,
         const IMATH_NAMESPACE::V2f& screenWindowCenter =
             IMATH_NAMESPACE::V2f (0, 0),
         float     screenWindowWidth = 1,
         LineOrder lineOrder         = INCREASING_Y,
         Compression                 = ZIP_COMPRESSION);
 
     //--------------------------------------------------------------------
     // Constructor -- the data window is specified explicitly; the display
     // window is set to Box2i (V2i (0, 0), V2i (width-1, height-1).
     //--------------------------------------------------------------------
 
     IMF_EXPORT
     Header (
         int                           width,
         int                           height,
         const IMATH_NAMESPACE::Box2i& dataWindow,
         float                         pixelAspectRatio = 1,
         const IMATH_NAMESPACE::V2f&   screenWindowCenter =
             IMATH_NAMESPACE::V2f (0, 0),
         float     screenWindowWidth = 1,
         LineOrder lineOrder         = INCREASING_Y,
         Compression                 = ZIP_COMPRESSION);
 
     //----------------------------------------------------------
     // Constructor -- the display window and the data window are
     // both specified explicitly.
     //----------------------------------------------------------
 
     IMF_EXPORT
     Header (
         const IMATH_NAMESPACE::Box2i& displayWindow,
         const IMATH_NAMESPACE::Box2i& dataWindow,
         float                         pixelAspectRatio = 1,
         const IMATH_NAMESPACE::V2f&   screenWindowCenter =
             IMATH_NAMESPACE::V2f (0, 0),
         float     screenWindowWidth = 1,
         LineOrder lineOrder         = INCREASING_Y,
         Compression                 = ZIP_COMPRESSION);
 
     //-----------------
     // Copy constructor
     //-----------------
 
     IMF_EXPORT
     Header (const Header& other);
     IMF_EXPORT
     Header (Header&& other);
 
     //-----------
     // Destructor
     //-----------
 
     IMF_EXPORT
     ~Header ();
 
     //-----------
     // Assignment
     //-----------
 
     IMF_EXPORT
     Header& operator= (const Header& other);
     IMF_EXPORT
     Header& operator= (Header&& other);
 
     //---------------------------------------------------------------
     // Add an attribute:
     //
     // insert(n,attr)	If no attribute with name n exists, a new
     //			attribute with name n, and the same type as
     //			attr, is added, and the value of attr is
     //			copied into the new attribute.
     //
     //			If an attribute with name n exists, and its
     //			type is the same as attr, the value of attr
     //			is copied into this attribute.
     //
     //			If an attribute with name n exists, and its
     //			type is different from attr, an IEX_NAMESPACE::TypeExc
     //			is thrown.
     //
     //---------------------------------------------------------------
 
     IMF_EXPORT
     void insert (const char name[], const Attribute& attribute);
 
     IMF_EXPORT
     void insert (const std::string& name, const Attribute& attribute);
 
     //---------------------------------------------------------------
     // Remove an attribute:
     //
     // remove(n)       If an attribute with name n exists, then it
     //                 is removed from the map of present attributes.
     //
     //                 If no attribute with name n exists, then this
     //                 functions becomes a 'no-op'
     //
     //---------------------------------------------------------------
 
     IMF_EXPORT
     void erase (const char name[]);
     IMF_EXPORT
     void erase (const std::string& name);
 
     //------------------------------------------------------------------
     // Access to existing attributes:
     //
     // [n]			Returns a reference to the attribute
     //				with name n.  If no attribute with
     //				name n exists, an IEX_NAMESPACE::ArgExc is thrown.
     //
     // typedAttribute<T>(n)	Returns a reference to the attribute
     //				with name n and type T.  If no attribute
     //				with name n exists, an IEX_NAMESPACE::ArgExc is
     //				thrown.  If an attribute with name n
     //				exists, but its type is not T, an
     //				IEX_NAMESPACE::TypeExc is thrown.
     //
     // findTypedAttribute<T>(n)	Returns a pointer to the attribute with
     //				name n and type T, or 0 if no attribute
     //				with name n and type T exists.
     //
     //------------------------------------------------------------------
 
     IMF_EXPORT
     Attribute& operator[] (const char name[]);
     IMF_EXPORT
     const Attribute& operator[] (const char name[]) const;
 
     IMF_EXPORT
     Attribute& operator[] (const std::string& name);
     IMF_EXPORT
     const Attribute& operator[] (const std::string& name) const;
 
     template <class T> T&       typedAttribute (const char name[]);
     template <class T> const T& typedAttribute (const char name[]) const;
 
     template <class T> T&       typedAttribute (const std::string& name);
     template <class T> const T& typedAttribute (const std::string& name) const;
 
     template <class T> T*       findTypedAttribute (const char name[]);
     template <class T> const T* findTypedAttribute (const char name[]) const;
 
     template <class T> T* findTypedAttribute (const std::string& name);
     template <class T>
     const T* findTypedAttribute (const std::string& name) const;
 
     //---------------------------------------------
     // Iterator-style access to existing attributes
     //---------------------------------------------
 
     typedef std::map<Name, Attribute*> AttributeMap;
 
     class Iterator;
     class ConstIterator;
 
     IMF_EXPORT
     Iterator begin ();
     IMF_EXPORT
     ConstIterator begin () const;
 
     IMF_EXPORT
     Iterator end ();
     IMF_EXPORT
     ConstIterator end () const;
 
     IMF_EXPORT
     Iterator find (const char name[]);
     IMF_EXPORT
     ConstIterator find (const char name[]) const;
 
     IMF_EXPORT
     Iterator find (const std::string& name);
     IMF_EXPORT
     ConstIterator find (const std::string& name) const;
 
     //--------------------------------
     // Access to predefined attributes
     //--------------------------------
 
     IMF_EXPORT
     IMATH_NAMESPACE::Box2i& displayWindow ();
     IMF_EXPORT
     const IMATH_NAMESPACE::Box2i& displayWindow () const;
 
     IMF_EXPORT
     IMATH_NAMESPACE::Box2i& dataWindow ();
     IMF_EXPORT
     const IMATH_NAMESPACE::Box2i& dataWindow () const;
 
     IMF_EXPORT
     float& pixelAspectRatio ();
     IMF_EXPORT
     const float& pixelAspectRatio () const;
 
     IMF_EXPORT
     IMATH_NAMESPACE::V2f& screenWindowCenter ();
     IMF_EXPORT
     const IMATH_NAMESPACE::V2f& screenWindowCenter () const;
 
     IMF_EXPORT
     float& screenWindowWidth ();
     IMF_EXPORT
     const float& screenWindowWidth () const;
 
     IMF_EXPORT
     ChannelList& channels ();
     IMF_EXPORT
     const ChannelList& channels () const;
 
     IMF_EXPORT
     LineOrder& lineOrder ();
     IMF_EXPORT
     const LineOrder& lineOrder () const;
 
     IMF_EXPORT
     Compression& compression ();
     IMF_EXPORT
     const Compression& compression () const;
 
     //-----------------------------------------------------
     // The header object allows one to store a compression level to be
     // used when writing a file.
     //
     // NB: These are NOT attributes, and will not be written to the
     // file, but are instead ephemeral settings to be used for this
     // instance of the header object.
     //
     // -----------------------------------------------------
     IMF_EXPORT
     void resetDefaultCompressionLevels ();
     IMF_EXPORT
     int& zipCompressionLevel ();
     IMF_EXPORT
     int zipCompressionLevel () const;
     IMF_EXPORT
     float& dwaCompressionLevel ();
     IMF_EXPORT
     float dwaCompressionLevel () const;
 
     //-----------------------------------------------------
     // Access to required attributes for multipart files
     // They are optional to non-multipart files and mandatory
     // for multipart files.
     //-----------------------------------------------------
     IMF_EXPORT
     void setName (const string& name);
 
     IMF_EXPORT
     string& name ();
     IMF_EXPORT
     const string& name () const;
 
     IMF_EXPORT
     bool hasName () const;
 
     IMF_EXPORT
     void setType (const string& Type);
 
     IMF_EXPORT
     string& type ();
     IMF_EXPORT
     const string& type () const;
 
     IMF_EXPORT
     bool hasType () const;
 
     IMF_EXPORT
     void setVersion (const int version);
 
     IMF_EXPORT
     int& version ();
     IMF_EXPORT
     const int& version () const;
 
     IMF_EXPORT
     bool hasVersion () const;
 
     //
     // the chunkCount attribute is set automatically when a file is written.
     // There is no need to set it manually
     //
     IMF_EXPORT
     void setChunkCount (int chunks);
     IMF_EXPORT
     bool hasChunkCount () const;
     IMF_EXPORT
     const int& chunkCount () const;
     IMF_EXPORT
     int& chunkCount ();
 
     //
     // for multipart files, return whether the file has a view string attribute
     // (for the deprecated single part multiview format EXR, see ImfMultiView.h)
     //
     IMF_EXPORT
     void setView (const string& view);
     IMF_EXPORT
     bool hasView () const;
     IMF_EXPORT
     string& view ();
     IMF_EXPORT
     const string& view () const;
 
     //----------------------------------------------------------------------
     // Tile Description:
     //
     // The tile description is a TileDescriptionAttribute whose name
     // is "tiles".  The "tiles" attribute must be present in any tiled
     // image file. When present, it describes various properties of the
     // tiles that make up the file.
     //
     // Convenience functions:
     //
     // setTileDescription(td)
     //     calls insert ("tiles", TileDescriptionAttribute (td))
     //
     // tileDescription()
     //     returns typedAttribute<TileDescriptionAttribute>("tiles").value()
     //
     // hasTileDescription()
     //     return findTypedAttribute<TileDescriptionAttribute>("tiles") != 0
     //
     //----------------------------------------------------------------------
 
     IMF_EXPORT
     void setTileDescription (const TileDescription& td);
 
     IMF_EXPORT
     TileDescription& tileDescription ();
     IMF_EXPORT
     const TileDescription& tileDescription () const;
 
     IMF_EXPORT
     bool hasTileDescription () const;
 
     //----------------------------------------------------------------------
     // Preview image:
     //
     // The preview image is a PreviewImageAttribute whose name is "preview".
     // This attribute is special -- while an image file is being written,
     // the pixels of the preview image can be changed repeatedly by calling
     // OutputFile::updatePreviewImage().
     //
     // Convenience functions:
     //
     // setPreviewImage(p)
     //     calls insert ("preview", PreviewImageAttribute (p))
     //
     // previewImage()
     //     returns typedAttribute<PreviewImageAttribute>("preview").value()
     //
     // hasPreviewImage()
     //     return findTypedAttribute<PreviewImageAttribute>("preview") != 0
     //
     //----------------------------------------------------------------------
 
     IMF_EXPORT
     void setPreviewImage (const PreviewImage& p);
 
     IMF_EXPORT
     PreviewImage& previewImage ();
     IMF_EXPORT
     const PreviewImage& previewImage () const;
 
     IMF_EXPORT
     bool hasPreviewImage () const;
 
     //-------------------------------------------------------------
     // Sanity check -- examines the header, and throws an exception
     // if it finds something wrong (empty display window, negative
     // pixel aspect ratio, unknown compression sceme etc.)
     //
     // set isTiled to true if you are checking a tiled/multi-res
     // header
     //-------------------------------------------------------------
 
     IMF_EXPORT
     void sanityCheck (bool isTiled = false, bool isMultipartFile = false) const;
 
     //----------------------------------------------------------------
     // Maximum image size and maximim tile size:
     //
     // sanityCheck() will throw an exception if the width or height of
     // the data window exceeds the maximum image width or height, or
     // if the size of a tile exceeds the maximum tile width or height.
     //
     // At program startup the maximum image and tile width and height
     // are set to zero, meaning that width and height are unlimited.
     //
     // Limiting image and tile width and height limits how much memory
     // will be allocated when a file is opened.  This can help protect
     // applications from running out of memory while trying to read
     // a damaged image file.
     //----------------------------------------------------------------
 
     IMF_EXPORT
     static void setMaxImageSize (int maxWidth, int maxHeight);
     IMF_EXPORT
     static void setMaxTileSize (int maxWidth, int maxHeight);
+    IMF_EXPORT
+    static void getMaxImageSize (int& maxWidth, int& maxHeight);
+    IMF_EXPORT
+    static void getMaxTileSize (int& maxWidth, int& maxHeight);
+
 
     //
     // Check if the header reads nothing.
     //
     IMF_EXPORT
     bool readsNothing ();
 
     //------------------------------------------------------------------
     // Input and output:
     //
     // If the header contains a preview image attribute, then writeTo()
     // returns the position of that attribute in the output stream; this
     // information is used by OutputFile::updatePreviewImage().
     // If the header contains no preview image attribute, then writeTo()
     // returns 0.
     //------------------------------------------------------------------
 
     IMF_EXPORT
     uint64_t writeTo (
         OPENEXR_IMF_INTERNAL_NAMESPACE::OStream& os,
         bool                                     isTiled = false) const;
 
     IMF_EXPORT
     void readFrom (OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is, int& version);
diff --git a/src/lib/OpenEXRUtil/ImfCheckFile.cpp b/src/lib/OpenEXRUtil/ImfCheckFile.cpp
index 4823d2e4..1cf466b5 100644
--- a/src/lib/OpenEXRUtil/ImfCheckFile.cpp
+++ b/src/lib/OpenEXRUtil/ImfCheckFile.cpp
@@ -557,218 +557,213 @@ bool
 readDeepTile (T& in, bool reduceMemory, bool reduceTime)
 {
     bool threw = false;
     try
     {
         const Header& fileHeader = in.header ();
 
         Array2D<unsigned int> localSampleCount;
 
         Box2i dataWindow = fileHeader.dataWindow ();
 
-        //
-        // use uint64_t for dimensions, since dataWindow+1 could overflow int storage
-        //
-        uint64_t height = static_cast<uint64_t> (dataWindow.size ().y) + 1;
-        uint64_t width  = static_cast<uint64_t> (dataWindow.size ().x) + 1;
         int      bytesPerSample = calculateBytesPerPixel (in.header ());
 
         const TileDescription& td         = in.header ().tileDescription ();
         int                    tileWidth  = td.xSize;
         int                    tileHeight = td.ySize;
         int                    numYLevels = in.numYLevels ();
         int                    numXLevels = in.numXLevels ();
 
         localSampleCount.resizeErase (tileHeight, tileWidth);
 
         int channelCount = 0;
         for (ChannelList::ConstIterator i = fileHeader.channels ().begin ();
              i != fileHeader.channels ().end ();
              ++i, channelCount++)
             ;
 
         Array<Array2D<float*>> data (channelCount);
 
         for (int i = 0; i < channelCount; i++)
         {
             data[i].resizeErase (tileHeight, tileWidth);
         }
 
         DeepFrameBuffer frameBuffer;
 
         //
         // Use integer arithmetic instead of pointer arithmetic to compute offset into array.
         // if memOffset is larger than base, then the computed pointer is negative, which is reported as undefined behavior
         // Instead, integers are used for computation which behaves as expected an all known architectures
         //
 
         frameBuffer.insertSampleCountSlice (Slice (
             UINT,
             reinterpret_cast<char*> (&localSampleCount[0][0]),
             sizeof (unsigned int) * 1,
             sizeof (unsigned int) * tileWidth,
             1,
             1,    // x/ysampling
             0.0,  // fill
             true, // relative x
             true  // relative y
             ));
 
         int channel = 0;
         for (ChannelList::ConstIterator i = fileHeader.channels ().begin ();
              i != fileHeader.channels ().end ();
              ++i, ++channel)
         {
             int sampleSize = sizeof (float);
 
             int pointerSize = sizeof (char*);
 
             frameBuffer.insert (
                 i.name (),
                 DeepSlice (
                     FLOAT,
                     reinterpret_cast<char*> (&data[channel][0][0]),
                     pointerSize * 1,
                     pointerSize * tileWidth,
                     sampleSize,
                     1,
                     1,
                     0.0,
                     true,
                     true));
         }
 
         in.setFrameBuffer (frameBuffer);
         size_t step = 1;
 
         int  tileIndex = 0;
         bool isRipMap  = td.mode == RIPMAP_LEVELS;
 
         vector<float> pixelBuffer;
 
         //
         // read all tiles from all levels.
         //
         for (int ylevel = 0; ylevel < numYLevels; ++ylevel)
         {
             for (int xlevel = 0; xlevel < numXLevels; ++xlevel)
             {
                 for (int y = 0; y < in.numYTiles (ylevel); ++y)
                 {
                     for (int x = 0; x < in.numXTiles (xlevel); ++x)
                     {
                         if (tileIndex % step == 0)
                         {
                             try
                             {
 
                                 in.readPixelSampleCounts (
                                     x, y, x, y, xlevel, ylevel);
 
                                 size_t bufferSize = 0;
                                 size_t fileBufferSize = 0;
 
                                 for (int ty = 0; ty < tileHeight; ++ty)
                                 {
                                     for (int tx = 0; tx < tileWidth; ++tx)
                                     {
                                         fileBufferSize += channelCount *
                                                 localSampleCount[ty][tx];
 
                                         if (!reduceMemory ||
                                             localSampleCount[ty][tx] *
                                                     bytesPerSample <
                                                 gMaxBytesPerDeepScanline)
                                         {
                                             bufferSize +=
                                                 channelCount *
                                                 localSampleCount[ty][tx];
                                         }
                                     }
                                 }
 
                                 // skip reading if no data to read, or limiting memory and tile is too large
                                 if (bufferSize > 0 &&
                                     (!reduceMemory ||
                                      (fileBufferSize + bufferSize) * bytesPerSample <
                                          gMaxBytesPerDeepPixel))
                                 {
 
                                     pixelBuffer.resize (bufferSize);
                                     size_t bufferIndex = 0;
 
                                     for (int ty = 0; ty < tileHeight; ++ty)
                                     {
                                         for (int tx = 0; tx < tileWidth; ++tx)
                                         {
                                             if (!reduceMemory ||
                                                 localSampleCount[ty][tx] *
                                                         bytesPerSample <
                                                     gMaxBytesPerDeepPixel)
                                             {
                                                 for (int k = 0;
                                                      k < channelCount;
                                                      ++k)
                                                 {
                                                     data[k][ty][tx] =
                                                         &pixelBuffer
                                                             [bufferIndex];
                                                     bufferIndex +=
                                                         localSampleCount[ty]
                                                                         [tx];
                                                 }
                                             }
                                             else
                                             {
                                                 for (int k = 0;
                                                      k < channelCount;
                                                      ++k)
                                                 {
                                                     data[k][ty][tx] = nullptr;
                                                 }
                                             }
                                         }
                                     }
 
                                     in.readTile (x, y, xlevel, ylevel);
                                 }
                             }
 
                             catch (...)
                             {
                                 //
                                 // for one level and mipmapped images,
                                 // xlevel must match ylevel,
                                 // otherwise an exception is thrown
                                 // ignore that exception
                                 //
                                 if (isRipMap || xlevel == ylevel)
                                 {
                                     threw = true;
                                     //
                                     // in reduceTime mode, fail immediately - the file is corrupt
                                     //
                                     if (reduceTime) { return threw; }
                                 }
                             }
                         }
                         tileIndex++;
                     }
                 }
             }
         }
     }
     catch (...)
     {
         threw = true;
     }
     return threw;
 }
 
 //
 // EXR will read files that have out-of-range values in certain enum attributes, to allow
 // values to be added in the future. This function returns 'false' if any such enum attributes
 // have unknown values
 //
 // (implementation node: it is undefined behavior to set an enum variable to an invalid value
 //  this code circumvents that by casting the enums to integers and checking them that way)
 //
@@ -1030,172 +1025,182 @@ template <class T>
 bool
 runChecks (T& source, bool reduceMemory, bool reduceTime)
 {
+
+    //
+    // in reduceMemory/reduceTime mode, limit image size, tile size, and maximum deep samples
+    //
+
+    uint64_t oldMaxSampleCount = CompositeDeepScanLine::getMaximumSampleCount();
+
+    int maxImageWidth , maxImageHeight;
+    Header::getMaxImageSize(maxImageWidth,maxImageHeight);
+
+    int maxTileWidth , maxTileHeight;
+    Header::getMaxImageSize(maxTileWidth,maxTileHeight);
+
+
+    if( reduceMemory || reduceTime)
+    {
+        CompositeDeepScanLine::setMaximumSampleCount(1<<20);
+        Header::setMaxImageSize(2048,2048);
+        Header::setMaxTileSize(512,512);
+    }
+
+
+
+
     //
     // multipart test: also grab the type of the first part to
     // check which other tests are expected to fail
     // check the image width for the first part - significant memory
     // is required to process wide parts
     //
 
     string firstPartType;
 
     //
     // scanline images with very wide parts and tiled images with large tiles
     // take excessive memory to read.
     // Assume the first part requires excessive memory until the header of the first part is checked
     // so the single part input APIs can be skipped.
     //
     // If the MultiPartInputFile constructor throws an exception, the first part
     // will assumed to be a wide image
     //
-    bool firstPartWide = true;
     bool largeTiles    = true;
 
     bool threw = false;
     {
         try
         {
             MultiPartInputFile multi (source);
             Box2i              b          = multi.header (0).dataWindow ();
-            uint64_t           imageWidth = static_cast<uint64_t> (b.max.x) -
-                                  static_cast<uint64_t> (b.min.x) + 1ll;
-            uint64_t bytesPerPixel = calculateBytesPerPixel (multi.header (0));
-            uint64_t numLines =
-                numLinesInBuffer (multi.header (0).compression ());
-
-            // confirm first part is small enough to read without using excessive memory
-            if (imageWidth * bytesPerPixel * numLines <= gMaxBytesPerScanline)
-            {
-                firstPartWide = false;
-            }
 
             //
             // significant memory is also required to read a tiled file
             // using the scanline interface with tall tiles - the scanlineAPI
             // needs to allocate memory to store an entire row of tiles
             //
 
             firstPartType = multi.header (0).type ();
             if (isTiled (firstPartType))
             {
                 const TileDescription& tileDescription =
                     multi.header (0).tileDescription ();
-                uint64_t tilesPerScanline =
-                    (imageWidth + tileDescription.xSize - 1ll) /
-                    tileDescription.xSize;
                 uint64_t tileSize =
                     static_cast<uint64_t> (tileDescription.xSize) *
                     static_cast<uint64_t> (tileDescription.ySize);
                 int bytesPerPixel = calculateBytesPerPixel (multi.header (0));
-                if (tileSize * tilesPerScanline * bytesPerPixel >
-                    gMaxTileBytesPerScanline)
-                {
-                    firstPartWide = true;
-                }
 
                 if (tileSize * bytesPerPixel <= gMaxTileBytes)
                 {
                     largeTiles = false;
                 }
             }
             else
             {
                 // file is not tiled, so can't contain large tiles
                 // setting largeTiles false here causes the Tile and DeepTile API
                 // tests to run on non-tiled files, which should cause exceptions to be thrown
                 largeTiles = false;
             }
 
             threw = readMultiPart (multi, reduceMemory, reduceTime);
         }
         catch (...)
         {
             threw = true;
         }
     }
 
     // read using both scanline interfaces (unless the image is wide and reduce memory enabled)
-    if (!reduceMemory || !firstPartWide)
+    if (!reduceMemory)
     {
         {
             bool gotThrow = false;
             resetInput (source);
             try
             {
                 RgbaInputFile rgba (source);
                 gotThrow = readRgba (rgba, reduceMemory, reduceTime);
             }
             catch (...)
             {
                 gotThrow = true;
             }
             if (gotThrow && firstPartType != DEEPTILE) { threw = true; }
         }
         {
             bool gotThrow = false;
             resetInput (source);
             try
             {
                 InputFile rgba (source);
                 gotThrow = readScanline (rgba, reduceMemory, reduceTime);
             }
             catch (...)
             {
                 gotThrow = true;
             }
             if (gotThrow && firstPartType != DEEPTILE) { threw = true; }
         }
     }
 
     if (!reduceMemory || !largeTiles)
     {
         bool gotThrow = false;
         resetInput (source);
         try
         {
             TiledInputFile rgba (source);
             gotThrow = readTile (rgba, reduceMemory, reduceTime);
         }
         catch (...)
         {
             gotThrow = true;
         }
         if (gotThrow && firstPartType == TILEDIMAGE) { threw = true; }
     }
 
-    if (!reduceMemory || !firstPartWide)
+    if (!reduceMemory)
     {
         bool gotThrow = false;
         resetInput (source);
         try
         {
             DeepScanLineInputFile rgba (source);
             gotThrow = readDeepScanLine (rgba, reduceMemory, reduceTime);
         }
         catch (...)
         {
             gotThrow = true;
         }
         if (gotThrow && firstPartType == DEEPSCANLINE) { threw = true; }
     }
 
     if (!reduceMemory || !largeTiles)
     {
         bool gotThrow = false;
         resetInput (source);
         try
         {
             DeepTiledInputFile rgba (source);
             gotThrow = readDeepTile (rgba, reduceMemory, reduceTime);
         }
         catch (...)
         {
             gotThrow = true;
         }
         if (gotThrow && firstPartType == DEEPTILE) { threw = true; }
     }
 
+
+
+    CompositeDeepScanLine::setMaximumSampleCount(oldMaxSampleCount);
+    Header::setMaxImageSize(maxImageWidth,maxImageHeight);
+    Header::setMaxTileSize(maxTileWidth,maxTileHeight);
+
     return threw;
 }
 
 ////////////////////////////////////////
@@ -1620,56 +1625,42 @@ bool
 checkOpenEXRFile (
     const char* fileName,
     bool        reduceMemory,
     bool        reduceTime,
-    bool        enableCoreCheck)
+    bool        runCoreCheck)
 {
-    bool threw = false;
-
-    uint64_t oldMaxSampleCount = CompositeDeepScanLine::getMaximumSampleCount();
 
-    if( reduceMemory || reduceTime)
+    if (runCoreCheck)
     {
-        CompositeDeepScanLine::setMaximumSampleCount(1<<20);
+        return runCoreChecks (fileName, reduceMemory, reduceTime);
     }
-
-    if (enableCoreCheck)
+    else
     {
-        threw = runCoreChecks (fileName, reduceMemory, reduceTime);
+        return runChecks (fileName, reduceMemory, reduceTime);
     }
-    if (!threw) threw = runChecks (fileName, reduceMemory, reduceTime);
 
-    CompositeDeepScanLine::setMaximumSampleCount(oldMaxSampleCount);
-
-    return threw;
 }
 
 bool
 checkOpenEXRFile (
     const char* data,
     size_t      numBytes,
     bool        reduceMemory,
     bool        reduceTime,
-    bool        enableCoreCheck)
+    bool        runCoreCheck)
 {
-    bool threw = false;
-    uint64_t oldMaxSampleCount = CompositeDeepScanLine::getMaximumSampleCount();
 
-    if( reduceMemory || reduceTime)
-    {
-        CompositeDeepScanLine::setMaximumSampleCount(1<<20);
-    }
 
-    if (enableCoreCheck)
-        threw = runCoreChecks (data, numBytes, reduceMemory, reduceTime);
-    if (!threw)
-    {
+     if (runCoreCheck)
+     {
+        return runCoreChecks (data, numBytes, reduceMemory, reduceTime);
+     }
+     else
+     {
         PtrIStream stream (data, numBytes);
-        threw = runChecks (stream, reduceMemory, reduceTime);
+        return runChecks (stream, reduceMemory, reduceTime);
     }
 
-    CompositeDeepScanLine::setMaximumSampleCount(oldMaxSampleCount);
 
-    return threw;
 }
 
 OPENEXR_IMF_INTERNAL_NAMESPACE_SOURCE_EXIT
diff --git a/src/lib/OpenEXRUtil/ImfCheckFile.h b/src/lib/OpenEXRUtil/ImfCheckFile.h
index b8003b59..7ed6dfe1 100644
--- a/src/lib/OpenEXRUtil/ImfCheckFile.h
+++ b/src/lib/OpenEXRUtil/ImfCheckFile.h
@@ -12,27 +12,28 @@
 OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER
 
 //
 // attempt to read the given file as an OpenEXR, using various OpenEXR read paths.
 // This can be used to validate correctness of the library, when running the library
 // with a sanitizer or memory checker, as well as checking that a file is a correct OpenEXR
 //
 // returns true if the file reads correctly using expected API calls, or false
 // if an exception was thrown that indicates the file is invalid
 //
 // if reduceMemory is true, will avoid tests or inputs that are known to
 // take large amounts of memory. This may hide errors within the file or library.
 //
 // if reduceTime is true and an error is found within the file, then future tests are reduced for speed.
 // This may hide errors within the library.
 //
+// if runCoreCheck is true, only uses the OpenEXRCore (C) API, otherwise uses the OpenEXR (C++) API
 //
 
 IMFUTIL_EXPORT bool checkOpenEXRFile (
     const char* fileName,
     bool        reduceMemory    = false,
     bool        reduceTime      = false,
-    bool        enableCoreCheck = false);
+    bool        runCoreCheck = false);
 
 //
 // overloaded version of checkOpenEXRFile that takes a pointer to in-memory data
 //
@@ -40,9 +41,9 @@ IMFUTIL_EXPORT bool checkOpenEXRFile (
 IMFUTIL_EXPORT bool checkOpenEXRFile (
     const char* data,
     size_t      numBytes,
     bool        reduceMemory    = false,
     bool        reduceTime      = false,
-    bool        enableCoreCheck = false);
+    bool        runCoreCheck = false);
 
 OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_EXIT
 
diff --git a/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcheck_fuzzer.cc b/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcheck_fuzzer.cc
index 4b499997..5369adca 100644
--- a/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcheck_fuzzer.cc
+++ b/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcheck_fuzzer.cc
@@ -14,7 +14,7 @@
 using OPENEXR_IMF_NAMESPACE::checkOpenEXRFile;
 extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
-    checkOpenEXRFile ((const char*) data , size , true , true, true);
+    checkOpenEXRFile ((const char*) data , size , true , true, false);
     return 0;
 }
 
diff --git a/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcorecheck_fuzzer.cc b/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcorecheck_fuzzer.cc
new file mode 100644
index 00000000..4b499997
--- /dev/null
+++ b/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcorecheck_fuzzer.cc
@@ -0,0 +1,20 @@
+
+//
+// SPDX-License-Identifier: BSD-3-Clause
+// Copyright (c) Contributors to the OpenEXR Project.
+//
+// this file is found by the oss-fuzz project to generate a fuzzer. It is not part of
+// OpenEXR's internal OpenEXRFuzzTest suite
+//
+
+#include <ImfNamespace.h>
+#include <ImfCheckFile.h>
+#include <stdint.h>
+
+using OPENEXR_IMF_NAMESPACE::checkOpenEXRFile;
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
+{
+    checkOpenEXRFile ((const char*) data , size , true , true, true);
+    return 0;
+}
+
