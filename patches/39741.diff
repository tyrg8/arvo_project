commit 9e0d1ac7d752b44d4d37fb9da632388dc069f2d7
Author: Julius Pfrommer <julius.pfrommer@web.de>
Date:   Sun Oct 31 10:43:05 2021 +0100

    fix(core): Fix a pointer dereference in UA_order

diff --git a/src/ua_types.c b/src/ua_types.c
index 86eee2be8..b8c0a7bc4 100644
--- a/src/ua_types.c
+++ b/src/ua_types.c
@@ -1564,54 +1564,52 @@ static UA_Order
 structureOrder(const void *p1, const void *p2, const UA_DataType *type) {
     uintptr_t u1 = (uintptr_t)p1;
     uintptr_t u2 = (uintptr_t)p2;
     UA_Order o = UA_ORDER_EQ;
     for(size_t i = 0; i < type->membersSize; ++i) {
         const UA_DataTypeMember *m = &type->members[i];
         const UA_DataType *mt = m->memberType;
         u1 += m->padding;
         u2 += m->padding;
         if(!m->isOptional) {
             if(!m->isArray) {
                 o = orderJumpTable[mt->typeKind]((const void *)u1, (const void *)u2, mt);
                 u1 += mt->memSize;
                 u2 += mt->memSize;
             } else {
                 size_t size1 = *(size_t*)u1;
                 size_t size2 = *(size_t*)u2;
                 u1 += sizeof(size_t);
                 u2 += sizeof(size_t);
-                o = arrayOrder((const void*)u1, size1, (const void*)u2, size2, mt);
+                o = arrayOrder(*(void* const*)u1, size1, *(void* const*)u2, size2, mt);
                 u1 += sizeof(void*);
                 u2 += sizeof(void*);
             }
         } else {
             if(!m->isArray) {
                 const void *pp1 = *(void* const*)u1;
                 const void *pp2 = *(void* const*)u2;
                 if(pp1 == pp2) {
                     o = UA_ORDER_EQ;
                 } else if(pp1 == NULL) {
                     o = UA_ORDER_LESS;
                 } else if(pp2 == NULL) {
                     o = UA_ORDER_MORE;
                 } else {
                     o = orderJumpTable[mt->typeKind](pp1, pp2, mt);
                 }
             } else {
                 size_t sa1 = *(size_t*)u1;
                 size_t sa2 = *(size_t*)u2;
                 u1 += sizeof(size_t);
                 u2 += sizeof(size_t);
-                const void *pa1 = *(void* const*)u1;
-                const void *pa2 = *(void* const*)u2;
-                o = arrayOrder(pa1, sa1, pa2, sa2, mt);
+                o = arrayOrder(*(void* const*)u1, sa1, *(void* const*)u2, sa2, mt);
             }
             u1 += sizeof(void*);
             u2 += sizeof(void*);
         }
 
         if(o != UA_ORDER_EQ)
             break;
     }
     return o;
 }
