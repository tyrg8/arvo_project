commit ab7a25faebb9704877dae70befd7233773997328
Author: Jonathan Hui <jonhui@google.com>
Date:   Wed Feb 17 11:32:12 2021 -0800

    [srp-server] specify format string when printing names (#6179)

diff --git a/src/cli/cli_srp_server.cpp b/src/cli/cli_srp_server.cpp
index a6e3bee47..fb52f7685 100644
--- a/src/cli/cli_srp_server.cpp
+++ b/src/cli/cli_srp_server.cpp
@@ -65,14 +65,14 @@ exit:
 otError SrpServer::ProcessDomain(uint8_t aArgsLength, char *aArgs[])
 {
     otError error = OT_ERROR_NONE;
 
     if (aArgsLength > 1)
     {
         SuccessOrExit(error = otSrpServerSetDomain(mInterpreter.mInstance, aArgs[1]));
     }
     else
     {
-        mInterpreter.OutputLine(otSrpServerGetDomain(mInterpreter.mInstance));
+        mInterpreter.OutputLine("%s", otSrpServerGetDomain(mInterpreter.mInstance));
     }
 
 exit:
@@ -122,39 +122,39 @@ exit:
 otError SrpServer::ProcessHost(uint8_t aArgsLength, char *aArgs[])
 {
     OT_UNUSED_VARIABLE(aArgs);
 
     otError                error = OT_ERROR_NONE;
     const otSrpServerHost *host;
 
     VerifyOrExit(aArgsLength <= 1, error = OT_ERROR_INVALID_ARGS);
 
     host = nullptr;
     while ((host = otSrpServerGetNextHost(mInterpreter.mInstance, host)) != nullptr)
     {
         const otIp6Address *addresses;
         uint8_t             addressesNum;
         bool                isDeleted = otSrpServerHostIsDeleted(host);
 
-        mInterpreter.OutputLine(otSrpServerHostGetFullName(host));
+        mInterpreter.OutputLine("%s", otSrpServerHostGetFullName(host));
         mInterpreter.OutputLine(Interpreter::kIndentSize, "deleted: %s", isDeleted ? "true" : "false");
         if (isDeleted)
         {
             continue;
         }
 
         mInterpreter.OutputSpaces(Interpreter::kIndentSize);
         mInterpreter.OutputFormat("addresses: [");
 
         addresses = otSrpServerHostGetAddresses(host, &addressesNum);
 
         for (uint8_t i = 0; i < addressesNum; ++i)
         {
             mInterpreter.OutputIp6Address(addresses[i]);
             if (i < addressesNum - 1)
             {
                 mInterpreter.OutputFormat(", ");
             }
         }
 
         mInterpreter.OutputFormat("]\r\n");
     }
@@ -213,42 +213,42 @@ void SrpServer::OutputHostAddresses(const otSrpServerHost *aHost)
 otError SrpServer::ProcessService(uint8_t aArgsLength, char *aArgs[])
 {
     OT_UNUSED_VARIABLE(aArgs);
 
     otError                error = OT_ERROR_NONE;
     const otSrpServerHost *host;
 
     VerifyOrExit(aArgsLength <= 1, error = OT_ERROR_INVALID_ARGS);
 
     host = nullptr;
     while ((host = otSrpServerGetNextHost(mInterpreter.mInstance, host)) != nullptr)
     {
         const otSrpServerService *service = nullptr;
 
         while ((service = otSrpServerHostGetNextService(host, service)) != nullptr)
         {
             bool isDeleted = otSrpServerServiceIsDeleted(service);
 
-            mInterpreter.OutputLine(otSrpServerServiceGetFullName(service));
+            mInterpreter.OutputLine("%s", otSrpServerServiceGetFullName(service));
             mInterpreter.OutputLine(Interpreter::kIndentSize, "deleted: %s", isDeleted ? "true" : "false");
             if (isDeleted)
             {
                 continue;
             }
 
             mInterpreter.OutputLine(Interpreter::kIndentSize, "port: %hu", otSrpServerServiceGetPort(service));
             mInterpreter.OutputLine(Interpreter::kIndentSize, "priority: %hu", otSrpServerServiceGetPriority(service));
             mInterpreter.OutputLine(Interpreter::kIndentSize, "weight: %hu", otSrpServerServiceGetWeight(service));
 
             mInterpreter.OutputSpaces(Interpreter::kIndentSize);
             mInterpreter.OutputFormat("TXT: ");
             OutputServiceTxtEntries(service);
             mInterpreter.OutputFormat("\r\n");
 
             mInterpreter.OutputLine(Interpreter::kIndentSize, "host: %s", otSrpServerHostGetFullName(host));
 
             mInterpreter.OutputSpaces(Interpreter::kIndentSize);
             mInterpreter.OutputFormat("addresses: ");
             OutputHostAddresses(host);
             mInterpreter.OutputFormat("\r\n");
         }
     }
