commit 2e33c218cbd53b8d016e9230c2f600411b6146b8
Author: Jordan Bayles <jophba@chromium.org>
Date:   Fri Oct 11 15:08:42 2019 -0700

    Fix fuzzer off by one error (#1047)
    
    * Fix fuzzer off by one error
    
    Currently the fuzzer has an off by one error, as it passing a bad length
    to the CharReader::parse method, resulting in a heap buffer overflow.
    
    * Rebase master, rerun clang format

diff --git a/example/readFromString/readFromString.cpp b/example/readFromString/readFromString.cpp
index 753f9c9..ce32236 100644
--- a/example/readFromString/readFromString.cpp
+++ b/example/readFromString/readFromString.cpp
@@ -1,11 +1,11 @@
 #include "json/json.h"
 #include <iostream>
 /**
  * \brief Parse a raw string into Value object using the CharReaderBuilder
- * class, or the legacy Reader class. 
- * Example Usage: 
+ * class, or the legacy Reader class.
+ * Example Usage:
  * $g++ readFromString.cpp -ljsoncpp -std=c++11 -o readFromString
  * $./readFromString
  * colin
  * 20
  */
diff --git a/src/lib_json/json_value.cpp b/src/lib_json/json_value.cpp
index 30d9ad8..e136783 100644
--- a/src/lib_json/json_value.cpp
+++ b/src/lib_json/json_value.cpp
@@ -210,7 +210,9 @@ LogicError::LogicError(String const& msg) : Exception(msg) {}
 JSONCPP_NORETURN void throwRuntimeError(String const& msg) {
   throw RuntimeError(msg);
 }
-JSONCPP_NORETURN void throwLogicError(String const& msg) { throw LogicError(msg); }
+JSONCPP_NORETURN void throwLogicError(String const& msg) {
+  throw LogicError(msg);
+}
 #else // !JSON_USE_EXCEPTION
 JSONCPP_NORETURN void throwRuntimeError(String const& msg) { abort(); }
 JSONCPP_NORETURN void throwLogicError(String const& msg) { abort(); }
diff --git a/src/test_lib_json/fuzz.cpp b/src/test_lib_json/fuzz.cpp
index f79f19f..d6e3815 100644
--- a/src/test_lib_json/fuzz.cpp
+++ b/src/test_lib_json/fuzz.cpp
@@ -19,31 +19,32 @@ class Exception;
 extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
   Json::CharReaderBuilder builder;
 
   if (size < sizeof(uint32_t)) {
     return 0;
   }
 
   uint32_t hash_settings = *(const uint32_t*)data;
   data += sizeof(uint32_t);
+  size -= sizeof(uint32_t);
 
   builder.settings_["failIfExtra"] = hash_settings & (1 << 0);
   builder.settings_["allowComments_"] = hash_settings & (1 << 1);
   builder.settings_["strictRoot_"] = hash_settings & (1 << 2);
   builder.settings_["allowDroppedNullPlaceholders_"] = hash_settings & (1 << 3);
   builder.settings_["allowNumericKeys_"] = hash_settings & (1 << 4);
   builder.settings_["allowSingleQuotes_"] = hash_settings & (1 << 5);
   builder.settings_["failIfExtra_"] = hash_settings & (1 << 6);
   builder.settings_["rejectDupKeys_"] = hash_settings & (1 << 7);
   builder.settings_["allowSpecialFloats_"] = hash_settings & (1 << 8);
 
   std::unique_ptr<Json::CharReader> reader(builder.newCharReader());
 
   Json::Value root;
   const char* data_str = reinterpret_cast<const char*>(data);
   try {
     reader->parse(data_str, data_str + size, &root, nullptr);
   } catch (Json::Exception const&) {
   }
   // Whether it succeeded or not doesn't matter.
   return 0;
 }
