commit 55c6038fb03ce0594b2042200f1d6ec66187849e
Author: Peter Wu <peter@lekensteyn.nl>
Date:   Sun Jul 8 15:28:34 2018 +0200

    xnap: fix use-after-free of "xnap_conv->addr_a"
    
    Fix wrong memory scope to address a heap-use-after-free via:
    
        addresses_equal epan/address.h:218:10
        dissect_xnap_T_rrc_Context_01 epan/dissectors/asn1/xnap/xnap.cnf:127
    
    Change-Id: I38bb64c2c8809cb1224d2c44076255d1789c4d5e
    Fixes: v2.9.0rc0-1116-gcc5701fbb1 ("XnAP: add dissector based on v15.0.0")
    Link: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=9199
    Reviewed-on: https://code.wireshark.org/review/28658
    Petri-Dish: Peter Wu <peter@lekensteyn.nl>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Pascal Quantin <pascal.quantin@gmail.com>

diff --git a/epan/dissectors/asn1/xnap/packet-xnap-template.c b/epan/dissectors/asn1/xnap/packet-xnap-template.c
index 2645518588..b432ef6c74 100644
--- a/epan/dissectors/asn1/xnap/packet-xnap-template.c
+++ b/epan/dissectors/asn1/xnap/packet-xnap-template.c
@@ -178,28 +178,28 @@ static int
 dissect_xnap(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)
 {
   proto_item *xnap_item;
   proto_tree *xnap_tree;
   conversation_t *conversation;
   struct xnap_private_data* xnap_data;
 
   col_set_str(pinfo->cinfo, COL_PROTOCOL, "XnAP");
   col_clear_fence(pinfo->cinfo, COL_INFO);
   col_clear(pinfo->cinfo, COL_INFO);
 
   xnap_item = proto_tree_add_item(tree, proto_xnap, tvb, 0, -1, ENC_NA);
   xnap_tree = proto_item_add_subtree(xnap_item, ett_xnap);
 
   xnap_data = xnap_get_private_data(pinfo);
   conversation = find_or_create_conversation(pinfo);
   xnap_data->xnap_conv = (struct xnap_conv_info *)conversation_get_proto_data(conversation, proto_xnap);
   if (!xnap_data->xnap_conv) {
     xnap_data->xnap_conv = wmem_new0(wmem_file_scope(), struct xnap_conv_info);
-    copy_address_wmem(wmem_packet_scope(), &xnap_data->xnap_conv->addr_a, &pinfo->src);
+    copy_address_wmem(wmem_file_scope(), &xnap_data->xnap_conv->addr_a, &pinfo->src);
     xnap_data->xnap_conv->ranmode_id_a = (GlobalNG_RANNode_ID_enum)-1;
-    copy_address_wmem(wmem_packet_scope(), &xnap_data->xnap_conv->addr_b, &pinfo->dst);
+    copy_address_wmem(wmem_file_scope(), &xnap_data->xnap_conv->addr_b, &pinfo->dst);
     xnap_data->xnap_conv->ranmode_id_b = (GlobalNG_RANNode_ID_enum)-1;
     conversation_add_proto_data(conversation, proto_xnap, xnap_data->xnap_conv);
   }
 
   return dissect_XnAP_PDU_PDU(tvb, pinfo, xnap_tree, data);
 }
diff --git a/epan/dissectors/packet-xnap.c b/epan/dissectors/packet-xnap.c
index d023299bd7..9dfd8f4ea6 100644
--- a/epan/dissectors/packet-xnap.c
+++ b/epan/dissectors/packet-xnap.c
@@ -7347,28 +7347,28 @@ static int
 dissect_xnap(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)
 {
   proto_item *xnap_item;
   proto_tree *xnap_tree;
   conversation_t *conversation;
   struct xnap_private_data* xnap_data;
 
   col_set_str(pinfo->cinfo, COL_PROTOCOL, "XnAP");
   col_clear_fence(pinfo->cinfo, COL_INFO);
   col_clear(pinfo->cinfo, COL_INFO);
 
   xnap_item = proto_tree_add_item(tree, proto_xnap, tvb, 0, -1, ENC_NA);
   xnap_tree = proto_item_add_subtree(xnap_item, ett_xnap);
 
   xnap_data = xnap_get_private_data(pinfo);
   conversation = find_or_create_conversation(pinfo);
   xnap_data->xnap_conv = (struct xnap_conv_info *)conversation_get_proto_data(conversation, proto_xnap);
   if (!xnap_data->xnap_conv) {
     xnap_data->xnap_conv = wmem_new0(wmem_file_scope(), struct xnap_conv_info);
-    copy_address_wmem(wmem_packet_scope(), &xnap_data->xnap_conv->addr_a, &pinfo->src);
+    copy_address_wmem(wmem_file_scope(), &xnap_data->xnap_conv->addr_a, &pinfo->src);
     xnap_data->xnap_conv->ranmode_id_a = (GlobalNG_RANNode_ID_enum)-1;
-    copy_address_wmem(wmem_packet_scope(), &xnap_data->xnap_conv->addr_b, &pinfo->dst);
+    copy_address_wmem(wmem_file_scope(), &xnap_data->xnap_conv->addr_b, &pinfo->dst);
     xnap_data->xnap_conv->ranmode_id_b = (GlobalNG_RANNode_ID_enum)-1;
     conversation_add_proto_data(conversation, proto_xnap, xnap_data->xnap_conv);
   }
 
   return dissect_XnAP_PDU_PDU(tvb, pinfo, xnap_tree, data);
 }
