commit 397ac80850bf8d010fae23dd215db0ee2c677306
Author: Luca Boccassi <bluca@debian.org>
Date:   Thu May 7 00:19:40 2020 +0100

    Problem: ZMTP v1 static allocator is needlessly resized
    
    Solution: don't do it, resizing the shared allocator makes sense
    as it can take the message buff for zero copy, but the static allocator
    is fixed

diff --git a/src/decoder_allocators.hpp b/src/decoder_allocators.hpp
index f6b967be..2620f1b8 100644
--- a/src/decoder_allocators.hpp
+++ b/src/decoder_allocators.hpp
@@ -41,38 +41,39 @@ namespace zmq
 {
 // Static buffer policy.
 class c_single_allocator
 {
   public:
     explicit c_single_allocator (std::size_t bufsize_) :
         _buf_size (bufsize_),
         _buf (static_cast<unsigned char *> (std::malloc (_buf_size)))
     {
         alloc_assert (_buf);
     }
 
     ~c_single_allocator () { std::free (_buf); }
 
     unsigned char *allocate () { return _buf; }
 
     void deallocate () {}
 
     std::size_t size () const { return _buf_size; }
 
-    void resize (std::size_t new_size_) { _buf_size = new_size_; }
+    //  This buffer is fixed, size must not be changed
+    void resize (std::size_t new_size_) { LIBZMQ_UNUSED (new_size_); }
 
   private:
     std::size_t _buf_size;
     unsigned char *_buf;
 
     ZMQ_NON_COPYABLE_NOR_MOVABLE (c_single_allocator)
 };
 
 // This allocator allocates a reference counted buffer which is used by v2_decoder_t
 // to use zero-copy msg::init_data to create messages with memory from this buffer as
 // data storage.
 //
 // The buffer is allocated with a reference count of 1 to make sure that is is alive while
 // decoding messages. Otherwise, it is possible that e.g. the first message increases the count
 // from zero to one, gets passed to the user application, processed in the user thread and deleted
 // which would then deallocate the buffer. The drawback is that the buffer may be allocated longer
 // than necessary because it is only deleted when allocate is called the next time.
