commit 79b5d0b0bc150532888790103447fa143406f870
Author: Kazuho Oku <kazuhooku@gmail.com>
Date:   Mon Aug 2 21:50:51 2021 +0900

    `h2o_buffer_prototype_t::_initial_buf._prototype` is NULL (as a static variable cannot contain a pointer address)

diff --git a/lib/common/memory.c b/lib/common/memory.c
index ff13428f1..abff8fe98 100644
--- a/lib/common/memory.c
+++ b/lib/common/memory.c
@@ -356,81 +356,89 @@ AllocDone:
 h2o_iovec_t h2o_buffer_try_reserve(h2o_buffer_t **_inbuf, size_t min_guarantee)
 {
     h2o_buffer_t *inbuf = *_inbuf;
     h2o_iovec_t ret;
 
     if (inbuf->bytes == NULL) {
-        inbuf = buffer_allocate(inbuf->_prototype, min_guarantee, inbuf->capacity);
-        if (*_inbuf != &(*_inbuf)->_prototype->_initial_buf)
+        h2o_buffer_prototype_t *prototype;
+        size_t desired_capacity;
+        if (inbuf->_prototype == NULL) {
+            prototype = H2O_STRUCT_FROM_MEMBER(h2o_buffer_prototype_t, _initial_buf, inbuf);
+            desired_capacity = 0;
+        } else {
+            prototype = inbuf->_prototype;
+            desired_capacity = inbuf->capacity;
             h2o_buffer__do_free(*_inbuf);
+        }
+        inbuf = buffer_allocate(prototype, min_guarantee, desired_capacity);
         *_inbuf = inbuf;
     } else {
         if (min_guarantee <= inbuf->capacity - inbuf->size - (inbuf->bytes - inbuf->_buf)) {
             /* ok */
         } else if ((inbuf->size + min_guarantee) * 2 <= inbuf->capacity) {
             /* the capacity should be less than or equal to 2 times of: size + guarantee */
             memmove(inbuf->_buf, inbuf->bytes, inbuf->size);
             inbuf->bytes = inbuf->_buf;
         } else {
             size_t new_capacity = inbuf->capacity;
             do {
                 new_capacity *= 2;
             } while (new_capacity - inbuf->size < min_guarantee);
             if (inbuf->_prototype->mmap_settings != NULL && inbuf->_prototype->mmap_settings->threshold <= new_capacity) {
                 size_t new_allocsize = topagesize(new_capacity);
                 int fd;
                 h2o_buffer_t *newp;
                 if (inbuf->_fd == -1) {
                     if ((fd = h2o_file_mktemp(inbuf->_prototype->mmap_settings->fn_template)) == -1) {
                         h2o_perror("failed to create temporary file");
                         goto MapError;
                     }
                 } else {
                     fd = inbuf->_fd;
                 }
                 int fallocate_ret;
 #if USE_POSIX_FALLOCATE
                 fallocate_ret = posix_fallocate(fd, 0, new_allocsize);
                 if (fallocate_ret != 0) {
                     errno = fallocate_ret;
                 }
 #else
                 fallocate_ret = ftruncate(fd, new_allocsize);
 #endif
                 if (fallocate_ret != 0) {
                     h2o_perror("failed to resize temporary file");
                     goto MapError;
                 }
                 if ((newp = (void *)mmap(NULL, new_allocsize, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0)) == MAP_FAILED) {
                     h2o_perror("mmap failed");
                     goto MapError;
                 }
                 if (inbuf->_fd == -1) {
                     /* copy data (moving from malloc to mmap) */
                     buffer_init(newp, inbuf->size, newp->_buf, new_capacity, inbuf->_prototype, fd);
                     memcpy(newp->_buf, inbuf->bytes, inbuf->size);
                     h2o_buffer__do_free(inbuf);
                     *_inbuf = inbuf = newp;
                 } else {
                     /* munmap */
                     size_t offset = inbuf->bytes - inbuf->_buf;
                     munmap((void *)inbuf, topagesize(inbuf->capacity));
                     *_inbuf = inbuf = newp;
                     inbuf->capacity = new_capacity;
                     inbuf->bytes = newp->_buf + offset;
                 }
             } else {
                 unsigned alloc_power = buffer_size_to_power(offsetof(h2o_buffer_t, _buf) + new_capacity);
                 new_capacity = ((size_t)1 << alloc_power) - offsetof(h2o_buffer_t, _buf);
                 h2o_buffer_t *newp = h2o_mem_alloc_recycle(buffer_get_recycle(alloc_power, 0), (size_t)1 << alloc_power);
                 buffer_init(newp, inbuf->size, newp->_buf, new_capacity, inbuf->_prototype, -1);
                 memcpy(newp->_buf, inbuf->bytes, inbuf->size);
                 h2o_buffer__do_free(inbuf);
                 *_inbuf = inbuf = newp;
             }
         }
     }
 
     ret.base = inbuf->bytes + inbuf->size;
     ret.len = inbuf->_buf + inbuf->capacity - ret.base;
 
     return ret;
