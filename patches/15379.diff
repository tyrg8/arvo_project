commit b949cc3ddfbeb1b3fba571fb53b186b645e66e9c
Author: Andrew Selivanov <andrew.selivanov@gmail.com>
Date:   Tue Jun 25 02:07:12 2019 +0300

    Fix leak and crash in ares_parse_a/aaaa_reply (#264)
    
    * fix leak if naddress of particular type found
    * fix segfault when wanted ttls count lesser than count of result records
    * add fuzzer input files that trigger problems (from #263)
    
    Reported-By: David Drysdale (@daviddrysdale)
    Fix-By: Andrew Selivanov (@ki11roy)

diff --git a/ares_parse_a_reply.c b/ares_parse_a_reply.c
index 850c39c..b506f72 100644
--- a/ares_parse_a_reply.c
+++ b/ares_parse_a_reply.c
@@ -50,149 +50,153 @@
 int ares_parse_a_reply(const unsigned char *abuf, int alen,
                        struct hostent **host,
                        struct ares_addrttl *addrttls, int *naddrttls)
 {
   struct ares_addrinfo ai;
   struct ares_addrinfo_node *next;
   struct ares_addrinfo_cname *next_cname;
   char **aliases = NULL;
   char *question_hostname = NULL;
   struct hostent *hostent = NULL;
   struct in_addr *addrs = NULL;
   int naliases = 0, naddrs = 0, alias = 0, i;
   int cname_ttl = INT_MAX;
   int status;
 
   memset(&ai, 0, sizeof(ai));
 
   status = ares__parse_into_addrinfo2(abuf, alen, &question_hostname, &ai);
   if (status != ARES_SUCCESS)
     {
       ares_free(question_hostname);
 
       if (naddrttls)
         {
-          *naddrttls = naddrs;
+          *naddrttls = 0;
         }
 
       return status;
     }
 
   hostent = ares_malloc(sizeof(struct hostent));
   if (!hostent)
     {
       goto enomem;
     }
 
   next = ai.nodes;
   while (next)
     {
       ++naddrs;
       next = next->ai_next;
     }
 
   next_cname = ai.cnames;
   while (next_cname)
     {
       if(next_cname->alias)
         ++naliases;
       next_cname = next_cname->next;
     }
 
   aliases = ares_malloc((naliases + 1) * sizeof(char *));
   if (!aliases)
     {
       goto enomem;
     }
 
   if (naliases)
     {
       next_cname = ai.cnames;
       while (next_cname)
         {
           if(next_cname->alias)
             aliases[alias++] = strdup(next_cname->alias);
           if(next_cname->ttl < cname_ttl)
             cname_ttl = next_cname->ttl;
           next_cname = next_cname->next;
         }
     }
 
   aliases[alias] = NULL;
 
   hostent->h_addr_list = ares_malloc((naddrs + 1) * sizeof(char *));
   if (!hostent->h_addr_list)
     {
       goto enomem;
     }
 
   for (i = 0; i < naddrs + 1; ++i)
     {
       hostent->h_addr_list[i] = NULL;
     }
 
   if (ai.cnames)
     {
       hostent->h_name = strdup(ai.cnames->name);
       ares_free(question_hostname);
     }
   else
     {
       hostent->h_name = question_hostname;
     }
 
   hostent->h_aliases = aliases;
   hostent->h_addrtype = AF_INET;
   hostent->h_length = sizeof(struct in_addr);
 
   if (naddrs)
     {
       addrs = ares_malloc(naddrs * sizeof(struct in_addr));
       if (!addrs)
         {
           goto enomem;
         }
 
       i = 0;
       next = ai.nodes;
       while (next)
         {
           if (next->ai_family == AF_INET)
             {
               hostent->h_addr_list[i] = (char *)&addrs[i];
               memcpy(hostent->h_addr_list[i],
                      &(((struct sockaddr_in *)next->ai_addr)->sin_addr),
                      sizeof(struct in_addr));
-              if (naddrttls)
+              if (naddrttls && i < *naddrttls)
                 {
                   if (next->ai_ttl > cname_ttl)
                     addrttls[i].ttl = cname_ttl;
                   else
                     addrttls[i].ttl = next->ai_ttl;
 
                   memcpy(&addrttls[i].ipaddr,
                          &(((struct sockaddr_in *)next->ai_addr)->sin_addr),
                          sizeof(struct in_addr));
                 }
               ++i;
             }
           next = next->ai_next;
         }
+      if (i == 0)
+        {
+          ares_free(addrs);
+        }
     }
 
   if (host)
     {
       *host = hostent;
     }
   else
     {
       ares_free_hostent(hostent);
     }
 
   if (naddrttls)
     {
       *naddrttls = naddrs;
     }
 
   ares__freeaddrinfo_cnames(ai.cnames);
   ares__freeaddrinfo_nodes(ai.nodes);
   return ARES_SUCCESS;
diff --git a/ares_parse_aaaa_reply.c b/ares_parse_aaaa_reply.c
index c56279f..aca3f00 100644
--- a/ares_parse_aaaa_reply.c
+++ b/ares_parse_aaaa_reply.c
@@ -52,149 +52,154 @@
 int ares_parse_aaaa_reply(const unsigned char *abuf, int alen,
                           struct hostent **host, struct ares_addr6ttl *addrttls,
                           int *naddrttls)
 {
   struct ares_addrinfo ai;
   struct ares_addrinfo_node *next;
   struct ares_addrinfo_cname *next_cname;
   char **aliases = NULL;
   char *question_hostname = NULL;
   struct hostent *hostent = NULL;
   struct ares_in6_addr *addrs = NULL;
   int naliases = 0, naddrs = 0, alias = 0, i;
   int cname_ttl = INT_MAX;
   int status;
 
   memset(&ai, 0, sizeof(ai));
 
   status = ares__parse_into_addrinfo2(abuf, alen, &question_hostname, &ai);
   if (status != ARES_SUCCESS)
     {
       ares_free(question_hostname);
 
       if (naddrttls)
         {
-          *naddrttls = naddrs;
+          *naddrttls = 0;
         }
 
       return status;
     }
 
   hostent = ares_malloc(sizeof(struct hostent));
   if (!hostent)
     {
       goto enomem;
     }
 
   next = ai.nodes;
   while (next)
     {
       ++naddrs;
       next = next->ai_next;
     }
 
   next_cname = ai.cnames;
   while (next_cname)
     {
       if(next_cname->alias)
         ++naliases;
       next_cname = next_cname->next;
     }
 
   aliases = ares_malloc((naliases + 1) * sizeof(char *));
   if (!aliases)
     {
       goto enomem;
     }
 
   if (naliases)
     {
       next_cname = ai.cnames;
       while (next_cname)
         {
           if(next_cname->alias)
             aliases[alias++] = strdup(next_cname->alias);
           if(next_cname->ttl < cname_ttl)
             cname_ttl = next_cname->ttl;
           next_cname = next_cname->next;
         }
     }
 
   aliases[alias] = NULL;
 
   hostent->h_addr_list = ares_malloc((naddrs + 1) * sizeof(char *));
   if (!hostent->h_addr_list)
     {
       goto enomem;
     }
 
   for (i = 0; i < naddrs + 1; ++i)
     {
       hostent->h_addr_list[i] = NULL;
     }
 
   if (ai.cnames)
     {
       hostent->h_name = strdup(ai.cnames->name);
       ares_free(question_hostname);
     }
   else
     {
       hostent->h_name = question_hostname;
     }
 
   hostent->h_aliases = aliases;
   hostent->h_addrtype = AF_INET6;
   hostent->h_length = sizeof(struct ares_in6_addr);
 
   if (naddrs)
     {
       addrs = ares_malloc(naddrs * sizeof(struct ares_in6_addr));
       if (!addrs)
         {
           goto enomem;
         }
 
       i = 0;
       next = ai.nodes;
       while (next)
         {
           if(next->ai_family == AF_INET6)
             {
               hostent->h_addr_list[i] = (char*)&addrs[i];
               memcpy(hostent->h_addr_list[i],
                      &(((struct sockaddr_in6 *)next->ai_addr)->sin6_addr),
                      sizeof(struct ares_in6_addr));
-              if (naddrttls)
+              if (naddrttls && i < *naddrttls)
                 {
                     if(next->ai_ttl > cname_ttl)
                       addrttls[i].ttl = cname_ttl;
                     else
                       addrttls[i].ttl = next->ai_ttl;
 
                     memcpy(&addrttls[i].ip6addr,
                            &(((struct sockaddr_in6 *)next->ai_addr)->sin6_addr),
                            sizeof(struct ares_in6_addr));
                 }
               ++i;
             }
           next = next->ai_next;
         }
+
+      if (i == 0)
+        {
+          ares_free(addrs);
+        }
     }
 
   if (host)
     {
       *host = hostent;
     }
   else
     {
       ares_free_hostent(hostent);
     }
 
   if (naddrttls)
     {
       *naddrttls = naddrs;
     }
 
   ares__freeaddrinfo_cnames(ai.cnames);
   ares__freeaddrinfo_nodes(ai.nodes);
   return ARES_SUCCESS;
diff --git a/test/fuzzcheck.sh b/test/fuzzcheck.sh
index 4c50ff2..3a13766 100755
--- a/test/fuzzcheck.sh
+++ b/test/fuzzcheck.sh
@@ -1,4 +1,5 @@
 #!/bin/sh
+set -e
 # Check that all of the base fuzzing corpus parse without errors
 ./aresfuzz fuzzinput/*
 ./aresfuzzname fuzznames/*
diff --git a/test/fuzzinput/clusterfuzz-5650695891451904 b/test/fuzzinput/clusterfuzz-5650695891451904
new file mode 100644
index 0000000..1aba3b3
Binary files /dev/null and b/test/fuzzinput/clusterfuzz-5650695891451904 differ
diff --git a/test/fuzzinput/clusterfuzz-5651369832218624 b/test/fuzzinput/clusterfuzz-5651369832218624
new file mode 100644
index 0000000..7e5184c
Binary files /dev/null and b/test/fuzzinput/clusterfuzz-5651369832218624 differ
diff --git a/test/fuzzinput/clusterfuzz-5674462260756480 b/test/fuzzinput/clusterfuzz-5674462260756480
new file mode 100644
index 0000000..c7b7c65
Binary files /dev/null and b/test/fuzzinput/clusterfuzz-5674462260756480 differ
diff --git a/test/fuzzinput/clusterfuzz-5680630672654336 b/test/fuzzinput/clusterfuzz-5680630672654336
new file mode 100644
index 0000000..7b5f9cb
Binary files /dev/null and b/test/fuzzinput/clusterfuzz-5680630672654336 differ
diff --git a/test/fuzzinput/clusterfuzz-5683497160671232 b/test/fuzzinput/clusterfuzz-5683497160671232
new file mode 100644
index 0000000..8d70a17
Binary files /dev/null and b/test/fuzzinput/clusterfuzz-5683497160671232 differ
diff --git a/test/fuzzinput/clusterfuzz-5687310655422464 b/test/fuzzinput/clusterfuzz-5687310655422464
new file mode 100644
index 0000000..cdb7817
Binary files /dev/null and b/test/fuzzinput/clusterfuzz-5687310655422464 differ
diff --git a/test/fuzzinput/clusterfuzz-5695341573177344 b/test/fuzzinput/clusterfuzz-5695341573177344
new file mode 100644
index 0000000..b96ddd4
Binary files /dev/null and b/test/fuzzinput/clusterfuzz-5695341573177344 differ
diff --git a/test/fuzzinput/clusterfuzz-5697835103682560 b/test/fuzzinput/clusterfuzz-5697835103682560
new file mode 100644
index 0000000..f5ef00f
Binary files /dev/null and b/test/fuzzinput/clusterfuzz-5697835103682560 differ
diff --git a/test/fuzzinput/clusterfuzz-5728518081609728 b/test/fuzzinput/clusterfuzz-5728518081609728
new file mode 100644
index 0000000..31f6957
Binary files /dev/null and b/test/fuzzinput/clusterfuzz-5728518081609728 differ
diff --git a/test/fuzzinput/clusterfuzz-5732960017317888 b/test/fuzzinput/clusterfuzz-5732960017317888
new file mode 100644
index 0000000..5596018
Binary files /dev/null and b/test/fuzzinput/clusterfuzz-5732960017317888 differ
