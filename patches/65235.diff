commit 4786c169258fcf4adfeafe03e09c1f214c0d09cf
Author: jeanlf <jeanlf@gpac.io>
Date:   Wed Jan 17 13:14:30 2024 +0100

    fixed potential crash parsing broken vtt files

diff --git a/src/media_tools/webvtt.c b/src/media_tools/webvtt.c
index 1ec916098..3b7320f8d 100644
--- a/src/media_tools/webvtt.c
+++ b/src/media_tools/webvtt.c
@@ -933,220 +933,221 @@ GF_Err gf_webvtt_parser_parse_timings_settings(GF_WebVTTParser *parser, GF_WebVT
 
 GF_Err gf_webvtt_parser_parse_internal(GF_WebVTTParser *parser, GF_WebVTTCue *cue)
 {
-	char szLine[2048];
+	char szLine[2049];
 	char *sOK;
 	u32 len;
 	GF_Err e;
 	char *prevLine = NULL;
 	char *header = NULL;
 	u32 header_len = 0;
 	Bool had_marks = GF_FALSE;
 
 	if (!parser) return GF_BAD_PARAM;
 	parser->suspend = GF_FALSE;
 
 	if (parser->is_srt) {
 		parser->on_header_parsed(parser->user, "WEBVTT\n");
 	}
 
+	szLine[2048]=0;
 	while (!parser->is_eof) {
 		if (!cue && parser->suspend)
 			break;
 		sOK = gf_text_get_utf8_line(szLine, 2048, parser->vtt_in, parser->unicode_type);
 		REM_TRAIL_MARKS(szLine, "\r\n")
 		len = (u32) strlen(szLine);
 		switch (parser->state) {
 		case WEBVTT_PARSER_STATE_WAITING_SIGNATURE:
 			if (!sOK || len < 6 || strnicmp(szLine, "WEBVTT", 6) || (len > 6 && szLine[6] != ' ' && szLine[6] != '\t')) {
 				e = GF_CORRUPTED_DATA;
 				parser->report_message(parser->user, e, "Bad WEBVTT file signature %s", szLine);
 				goto exit;
 			} else {
 				if (had_marks) {
 					szLine[len] = '\n';
 					len++;
 				}
 				header = gf_strdup(szLine);
 				header_len = len;
 				parser->state = WEBVTT_PARSER_STATE_WAITING_HEADER;
 			}
 			break; /* proceed to next line */
 		case WEBVTT_PARSER_STATE_WAITING_HEADER:
 			if (prevLine) {
 				u32 prev_len = (u32) strlen(prevLine);
 				header = (char *)gf_realloc(header, header_len + prev_len + 1);
 				strcpy(header+header_len,prevLine);
 				header_len += prev_len;
 				gf_free(prevLine);
 				prevLine = NULL;
 			}
 			if (sOK && len) {
 				if (strstr(szLine, "-->")) {
 					parser->on_header_parsed(parser->user, header);
 					/* continue to the next state without breaking */
 					parser->state = WEBVTT_PARSER_STATE_WAITING_CUE_TIMESTAMP;
 					/* no break, continue to the next state*/
 				} else {
 					if (had_marks) {
 						szLine[len] = '\n';
 						len++;
 					}
 					prevLine = gf_strdup(szLine);
 					break; /* proceed to next line */
 				}
 			} else {
 				parser->on_header_parsed(parser->user, header);
 				if (header) gf_free(header);
 				header = NULL;
 				if (!sOK) {
 					/* end of file, parsing is done */
 					parser->is_eof = GF_TRUE;
 					break;
 				} else {
 					/* empty line means end of header */
 					parser->state = WEBVTT_PARSER_STATE_WAITING_CUE;
 					/* no break, continue to the next state*/
 				}
 			}
 		case WEBVTT_PARSER_STATE_WAITING_CUE:
 			if (sOK && len) {
 				if (strstr(szLine, "-->")) {
 					parser->state = WEBVTT_PARSER_STATE_WAITING_CUE_TIMESTAMP;
 					/* continue to the next state without breaking */
 				} else {
 					/* discard the previous line */
 					/* should we do something with it ? callback ?*/
 					if (prevLine && !parser->in_comment) {
 						gf_free(prevLine);
 						prevLine = NULL;
 					}
 					/* save this new line */
 					if (had_marks) {
 						szLine[len] = '\n';
 						len++;
 					}
 					if (prevLine)
 						gf_dynstrcat(&prevLine, szLine, NULL);
 					else
 						prevLine = gf_strdup(szLine);
 					if (parser->prev_line_empty && (!strncmp(prevLine, "NOTE ", 5) || !strcmp(prevLine, "NOTE\n")))
 						parser->in_comment = GF_TRUE;
 					/* stay in the same state */
 					break;
 				}
 			} else {
 				/* discard the previous line */
 				/* should we do something with it ? callback ?*/
 				if (parser->in_comment) {
 					if (!parser->comment_text) {
 						parser->comment_text = prevLine;
 						prevLine = NULL;
 					} else {
 						gf_dynstrcat(&parser->comment_text, prevLine, "\n");
 						gf_free(prevLine);
 						prevLine = NULL;
 					}
 					parser->in_comment = GF_FALSE;
 				}
 				if (prevLine) {
 					gf_free(prevLine);
 					prevLine = NULL;
 				}
 				if (!sOK) {
 					parser->is_eof = GF_TRUE;
 					break;
 				} else {
 					/* remove empty lines and stay in the same state */
 					break;
 				}
 			}
 		case WEBVTT_PARSER_STATE_WAITING_CUE_TIMESTAMP:
 			if (sOK && len) {
 				if (cue == NULL) {
 					cue   = gf_webvtt_cue_new();
 				}
 				if (prevLine) {
 					gf_webvtt_cue_add_property(cue, WEBVTT_ID, prevLine, (u32) strlen(prevLine));
 					gf_free(prevLine);
 					prevLine = NULL;
 				}
 				if (parser->comment_text) {
 					gf_webvtt_cue_add_property(cue, WEBVTT_PRECUE_TEXT, parser->comment_text, (u32) strlen(parser->comment_text));
 					gf_free(parser->comment_text);
 					parser->comment_text = NULL;
 				}
 				e = gf_webvtt_parser_parse_timings_settings(parser, cue, szLine, len);
 				if (e) {
 					if (cue) gf_webvtt_cue_del(cue);
 					cue = NULL;
 					parser->state = WEBVTT_PARSER_STATE_WAITING_CUE;
 				} else {
 //					start = (u32)gf_webvtt_timestamp_get(&cue->start);
 //					end   = (u32)gf_webvtt_timestamp_get(&cue->end);
 					parser->state = WEBVTT_PARSER_STATE_WAITING_CUE_PAYLOAD;
 				}
 			} else {
 				/* not possible */
 				gf_assert(0);
 				if (header) gf_free(header);
 				return GF_NON_COMPLIANT_BITSTREAM;
 			}
 			break;
 		case WEBVTT_PARSER_STATE_WAITING_CUE_PAYLOAD:
 			if (sOK && len) {
 				if (!strncmp(szLine, "NOTE ", 5)) {
 					if (had_marks) {
 						szLine[len] = '\n';
 						len++;
 					}
 					gf_webvtt_cue_add_property(cue, WEBVTT_POSTCUE_TEXT, szLine, len);
 					parser->in_comment = GF_TRUE;
 					len = 0;
 				} else if (parser->in_comment) {
 					parser->in_comment = GF_FALSE;
 				}
 			}
 			if (sOK && len) {
 				if (had_marks) {
 					szLine[len] = '\n';
 					len++;
 				}
 				gf_webvtt_cue_add_property(cue, parser->in_comment ? WEBVTT_POSTCUE_TEXT : WEBVTT_PAYLOAD, szLine, len);
 				/* remain in the same state as a cue payload can have multiple lines */
 				break;
 			} else {
 				/* end of the current cue */
 				gf_webvtt_add_cue_to_samples(parser, parser->samples, cue);
 				cue = NULL;
 				parser->in_comment = GF_FALSE;
 
 				if (!sOK) {
 					parser->is_eof = GF_TRUE;
 					break;
 				} else {
 					/* empty line, move to next cue */
 					parser->state = WEBVTT_PARSER_STATE_WAITING_CUE;
 					break;
 				}
 			}
 		}
 		parser->prev_line_empty = len ? GF_FALSE : GF_TRUE;
 	}
 	if (header) gf_free(header);
 	header = NULL;
 
 	if (parser->suspend)
 		return GF_OK;
 
 	/* no more cues to come, flush everything */
 	if (cue) {
 		gf_webvtt_add_cue_to_samples(parser, parser->samples, cue);
 		cue = NULL;
 	}
 	while (gf_list_count(parser->samples) > 0) {
 		GF_WebVTTSample *sample = (GF_WebVTTSample *)gf_list_get(parser->samples, 0);
 		parser->last_duration = (sample->end > sample->start) ? sample->end - sample->start : 0;
 		gf_list_rem(parser->samples, 0);
 		parser->on_sample_parsed(parser->user, sample);
 	}
 	e = GF_EOS;
