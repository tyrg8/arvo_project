commit 7503fbe7511cf9b98f9321ef27ee7d2c05401a1e
Author: Kristian Evers <kristianevers@gmail.com>
Date:   Wed Nov 1 10:16:08 2017 +0100

    Resolves several OSS-Fuzz issues: 3944, 3947, 3955.
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3944
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3947
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3955
    
    Credit to OSS-Fuzz.

diff --git a/src/pj_apply_vgridshift.c b/src/pj_apply_vgridshift.c
index 3c7cc210..6435b954 100644
--- a/src/pj_apply_vgridshift.c
+++ b/src/pj_apply_vgridshift.c
@@ -36,105 +36,105 @@
 static double pj_read_vgrid_value( PJ *defn, LP input, int *gridlist_count_p, PJ_GRIDINFO **tables, struct CTABLE *ct) {
     int  itable = 0;
     double value = HUGE_VAL;
     double grid_x, grid_y;
     int    grid_ix, grid_iy;
     int    grid_ix2, grid_iy2;
     float  *cvs;
     /* do not deal with NaN coordinates */
     if( input.phi != input.phi || input.lam != input.lam )
         itable = *gridlist_count_p;
 
     /* keep trying till we find a table that works */
     for ( ; itable < *gridlist_count_p; itable++ )
     {
         PJ_GRIDINFO *gi = tables[itable];
 
         ct = gi->ct;
 
         /* skip tables that don't match our point at all.  */
         if( ct->ll.phi > input.phi || ct->ll.lam > input.lam
             || ct->ll.phi + (ct->lim.phi-1) * ct->del.phi < input.phi
             || ct->ll.lam + (ct->lim.lam-1) * ct->del.lam < input.lam )
             continue;
 
         /* If we have child nodes, check to see if any of them apply. */
         while( gi->child != NULL )
         {
             PJ_GRIDINFO *child;
 
             for( child = gi->child; child != NULL; child = child->next )
             {
                 struct CTABLE *ct1 = child->ct;
 
                 if( ct1->ll.phi > input.phi || ct1->ll.lam > input.lam
                   || ct1->ll.phi+(ct1->lim.phi-1)*ct1->del.phi < input.phi
                   || ct1->ll.lam+(ct1->lim.lam-1)*ct1->del.lam < input.lam)
                     continue;
 
                 break;
             }
 
             /* we didn't find a more refined child node to use, so go with current grid */
             if( child == NULL )
             {
                 break;
             }
 
             /* Otherwise let's try for childrens children .. */
             gi = child;
             ct = child->ct;
         }
 
         /* load the grid shift info if we don't have it. */
         if( ct->cvs == NULL && !pj_gridinfo_load( pj_get_ctx(defn), gi ) )
         {
             pj_ctx_set_errno( defn->ctx, PJD_ERR_FAILED_TO_LOAD_GRID );
             return PJD_ERR_FAILED_TO_LOAD_GRID;
         }
 
-    }
 
-    /* Interpolation a location within the grid */
-    grid_x = (input.lam - ct->ll.lam) / ct->del.lam;
-    grid_y = (input.phi - ct->ll.phi) / ct->del.phi;
-    grid_ix = (int) floor(grid_x);
-    grid_iy = (int) floor(grid_y);
-    grid_x -= grid_ix;
-    grid_y -= grid_iy;
-
-    grid_ix2 = grid_ix + 1;
-    if( grid_ix2 >= ct->lim.lam )
-        grid_ix2 = ct->lim.lam - 1;
-    grid_iy2 = grid_iy + 1;
-    if( grid_iy2 >= ct->lim.phi )
-        grid_iy2 = ct->lim.phi - 1;
-
-    cvs = (float *) ct->cvs;
-    value = cvs[grid_ix + grid_iy * ct->lim.lam]
-        * (1.0-grid_x) * (1.0-grid_y)
-        + cvs[grid_ix2 + grid_iy * ct->lim.lam]
-        * (grid_x) * (1.0-grid_y)
-        + cvs[grid_ix + grid_iy2 * ct->lim.lam]
-        * (1.0-grid_x) * (grid_y)
-        + cvs[grid_ix2 + grid_iy2 * ct->lim.lam]
-        * (grid_x) * (grid_y);
+        /* Interpolation a location within the grid */
+        grid_x = (input.lam - ct->ll.lam) / ct->del.lam;
+        grid_y = (input.phi - ct->ll.phi) / ct->del.phi;
+        grid_ix = (int) floor(grid_x);
+        grid_iy = (int) floor(grid_y);
+        grid_x -= grid_ix;
+        grid_y -= grid_iy;
+
+        grid_ix2 = grid_ix + 1;
+        if( grid_ix2 >= ct->lim.lam )
+            grid_ix2 = ct->lim.lam - 1;
+        grid_iy2 = grid_iy + 1;
+        if( grid_iy2 >= ct->lim.phi )
+            grid_iy2 = ct->lim.phi - 1;
+
+        cvs = (float *) ct->cvs;
+        value = cvs[grid_ix + grid_iy * ct->lim.lam]
+            * (1.0-grid_x) * (1.0-grid_y)
+            + cvs[grid_ix2 + grid_iy * ct->lim.lam]
+            * (grid_x) * (1.0-grid_y)
+            + cvs[grid_ix + grid_iy2 * ct->lim.lam]
+            * (1.0-grid_x) * (grid_y)
+            + cvs[grid_ix2 + grid_iy2 * ct->lim.lam]
+            * (grid_x) * (grid_y);
 
+    }
     /* nodata?  */
     /* GTX official nodata value if  -88.88880f, but some grids also */
     /* use other  big values for nodata (e.g naptrans2008.gtx has */
     /* nodata values like -2147479936), so test them too */
     if( value > 1000 || value < -1000 || value == -88.88880f )
         value = HUGE_VAL;
 
 
     return value;
 }
 
 /************************************************************************/
 /*                        pj_apply_vgridshift()                         */
 /*                                                                      */
 /*      This implementation takes uses the gridlist from a coordinate   */
 /*      system definition.  If the gridlist has not yet been            */
 /*      populated in the coordinate system definition we set it up      */
 /*      now.                                                            */
 /************************************************************************/
