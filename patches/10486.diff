commit 07f7fa7806e94ccaa271c185213afed80e13a77d
Author: Andreas Schneider <asn@cryptomilk.org>
Date:   Wed Sep 19 10:09:44 2018 +0200

    buffer: Fix invalid memory access in ssh_buffer_unpack()
    
    Found by oss-fuzz.
    
    Signed-off-by: Andreas Schneider <asn@cryptomilk.org>

diff --git a/src/buffer.c b/src/buffer.c
index 10f00841..952065f8 100644
--- a/src/buffer.c
+++ b/src/buffer.c
@@ -1074,246 +1074,246 @@ int _ssh_buffer_pack(struct ssh_buffer_struct *buffer,
 /** @internal
  * @brief Get multiple values from a buffer on a single function call
  * @param[in] buffer    The buffer to get from
  * @param[in] format    A format string of arguments.
  * @param[in] ap        A va_list of arguments.
  * @returns             SSH_OK on success
  *                      SSH_ERROR on error
  * @see ssh_buffer_get_format() for format list values.
  */
 int ssh_buffer_unpack_va(struct ssh_buffer_struct *buffer,
                          const char *format,
                          int argc,
                          va_list ap)
 {
     int rc = SSH_ERROR;
     const char *p, *last;
     union {
         uint8_t *byte;
         uint16_t *word;
         uint32_t *dword;
         uint64_t *qword;
         ssh_string *string;
         char **cstring;
         void **data;
     } o;
     size_t len, rlen, max_len;
     va_list ap_copy;
     int count;
 
     max_len = ssh_buffer_get_len(buffer);
 
     /* copy the argument list in case a rollback is needed */
     va_copy(ap_copy, ap);
 
     for (p = format, count = 0; *p != '\0'; p++, count++) {
         /* Invalid number of arguments passed */
         if (argc != -1 && count > argc) {
             va_end(ap_copy);
             return SSH_ERROR;
         }
 
         switch (*p) {
         case 'b':
             o.byte = va_arg(ap, uint8_t *);
             rlen = ssh_buffer_get_u8(buffer, o.byte);
             rc = rlen==1 ? SSH_OK : SSH_ERROR;
             break;
         case 'w':
             o.word = va_arg(ap,  uint16_t *);
             rlen = ssh_buffer_get_data(buffer, o.word, sizeof(uint16_t));
             *o.word = ntohs(*o.word);
             rc = rlen==2 ? SSH_OK : SSH_ERROR;
             break;
         case 'd':
             o.dword = va_arg(ap, uint32_t *);
             rlen = ssh_buffer_get_u32(buffer, o.dword);
             *o.dword = ntohl(*o.dword);
             rc = rlen==4 ? SSH_OK : SSH_ERROR;
             break;
         case 'q':
             o.qword = va_arg(ap, uint64_t*);
             rlen = ssh_buffer_get_u64(buffer, o.qword);
             *o.qword = ntohll(*o.qword);
             rc = rlen==8 ? SSH_OK : SSH_ERROR;
             break;
         case 'S':
             o.string = va_arg(ap, ssh_string *);
             *o.string = ssh_buffer_get_ssh_string(buffer);
             rc = *o.string != NULL ? SSH_OK : SSH_ERROR;
             o.string = NULL;
             break;
         case 's': {
             uint32_t u32len = 0;
 
             o.cstring = va_arg(ap, char **);
             *o.cstring = NULL;
             rc = ssh_buffer_get_u32(buffer, &u32len);
             if (rc != 4){
                 rc = SSH_ERROR;
                 break;
             }
             len = ntohl(u32len);
             if (len > max_len - 1) {
                 rc = SSH_ERROR;
                 break;
             }
 
             rc = ssh_buffer_validate_length(buffer, len);
             if (rc != SSH_OK) {
                 break;
             }
 
             *o.cstring = malloc(len + 1);
             if (*o.cstring == NULL){
                 rc = SSH_ERROR;
                 break;
             }
             rlen = ssh_buffer_get_data(buffer, *o.cstring, len);
             if (rlen != len){
                 SAFE_FREE(*o.cstring);
                 rc = SSH_ERROR;
                 break;
             }
             (*o.cstring)[len] = '\0';
             o.cstring = NULL;
             rc = SSH_OK;
             break;
         }
         case 'P':
             len = va_arg(ap, size_t);
             if (len > max_len - 1) {
                 rc = SSH_ERROR;
                 break;
             }
 
             rc = ssh_buffer_validate_length(buffer, len);
             if (rc != SSH_OK) {
                 break;
             }
 
             o.data = va_arg(ap, void **);
             count++;
 
             *o.data = malloc(len);
             if(*o.data == NULL){
                 rc = SSH_ERROR;
                 break;
             }
             rlen = ssh_buffer_get_data(buffer, *o.data, len);
             if (rlen != len){
                 SAFE_FREE(*o.data);
                 rc = SSH_ERROR;
                 break;
             }
             o.data = NULL;
             rc = SSH_OK;
             break;
         default:
             SSH_LOG(SSH_LOG_WARN, "Invalid buffer format %c", *p);
             rc = SSH_ERROR;
         }
         if (rc != SSH_OK) {
             break;
         }
     }
 
     if (argc != -1 && argc != count) {
         rc = SSH_ERROR;
     }
 
     if (rc != SSH_ERROR){
         /* Check if our canary is intact, if not something really bad happened */
         uint32_t canary = va_arg(ap, uint32_t);
         if (canary != SSH_BUFFER_PACK_END){
             if (argc == -1){
                 rc = SSH_ERROR;
             } else {
                 abort();
             }
         }
     }
 
     if (rc != SSH_OK){
         /* Reset the format string and erase everything that was allocated */
         last = p;
         for(p=format;p<last;++p){
             switch(*p){
             case 'b':
+                o.byte = va_arg(ap_copy, uint8_t *);
                 if (buffer->secure) {
-                    o.byte = va_arg(ap_copy, uint8_t *);
                     explicit_bzero(o.byte, sizeof(uint8_t));
                     break;
                 }
                 break;
             case 'w':
+                o.word = va_arg(ap_copy, uint16_t *);
                 if (buffer->secure) {
-                    o.word = va_arg(ap_copy, uint16_t *);
                     explicit_bzero(o.word, sizeof(uint16_t));
                     break;
                 }
                 break;
             case 'd':
+                o.dword = va_arg(ap_copy, uint32_t *);
                 if (buffer->secure) {
-                    o.dword = va_arg(ap_copy, uint32_t *);
                     explicit_bzero(o.dword, sizeof(uint32_t));
                     break;
                 }
                 break;
             case 'q':
+                o.qword = va_arg(ap_copy, uint64_t *);
                 if (buffer->secure) {
-                    o.qword = va_arg(ap_copy, uint64_t *);
                     explicit_bzero(o.qword, sizeof(uint64_t));
                     break;
                 }
                 break;
             case 'S':
                 o.string = va_arg(ap_copy, ssh_string *);
                 if (buffer->secure) {
                     ssh_string_burn(*o.string);
                 }
                 SAFE_FREE(*o.string);
                 break;
             case 's':
                 o.cstring = va_arg(ap_copy, char **);
                 if (buffer->secure) {
                     explicit_bzero(*o.cstring, strlen(*o.cstring));
                 }
                 SAFE_FREE(*o.cstring);
                 break;
             case 'P':
                 len = va_arg(ap_copy, size_t);
                 o.data = va_arg(ap_copy, void **);
                 if (buffer->secure) {
                     explicit_bzero(*o.data, len);
                 }
                 SAFE_FREE(*o.data);
                 break;
             default:
                 (void)va_arg(ap_copy, void *);
                 break;
             }
         }
     }
     va_end(ap_copy);
 
     return rc;
 }
 
 /** @internal
  * @brief Get multiple values from a buffer on a single function call
  * @param[in] buffer    The buffer to get from
  * @param[in] format    A format string of arguments. This string contains single
  *                      letters describing the order and type of arguments:
  *                         'b': uint8_t *  (pulled in network byte order)
  *                         'w': uint16_t * (pulled in network byte order)
  *                         'd': uint32_t * (pulled in network byte order)
  *                         'q': uint64_t * (pulled in network byte order)
  *                         'S': ssh_string *
  *                         's': char ** (C string, pulled as SSH string)
  *                         'P': size_t, void ** (len of data, pointer to data)
  *                              only pulls data.
  * @returns             SSH_OK on success
  *                      SSH_ERROR on error
  * @warning             when using 'P' with a constant size (e.g. 8), do not
  *                      forget to cast to (size_t).
  */
