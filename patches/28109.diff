commit 9d9347cd5aec545ad5c0f48cc637ca3e13970808
Author: Ali Mohammad Pur <mpfard@serenityos.org>
Date:   Thu Dec 3 12:33:06 2020 +0330

    Shell: Fix bad cast to BarewordLiteral
    
    As found by oss-fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28109&q=label%3AProj-serenity

diff --git a/Shell/Parser.cpp b/Shell/Parser.cpp
index e3c43c0ed4..c6b322755c 100644
--- a/Shell/Parser.cpp
+++ b/Shell/Parser.cpp
@@ -1351,51 +1351,51 @@ RefPtr<AST::Node> Parser::parse_bareword()
 RefPtr<AST::Node> Parser::parse_glob()
 {
     auto rule_start = push_start();
     auto bareword_part = parse_bareword();
 
     if (at_end())
         return bareword_part;
 
     char ch = peek();
     if (ch == '*' || ch == '?') {
         auto saved_offset = save_offset();
         consume();
         StringBuilder textbuilder;
         if (bareword_part) {
             StringView text;
             if (bareword_part->is_bareword()) {
                 auto bareword = static_cast<AST::BarewordLiteral*>(bareword_part.ptr());
                 text = bareword->text();
             } else {
                 // FIXME: Allow composition of tilde+bareword with globs: '~/foo/bar/baz*'
                 restore_to(saved_offset.offset, saved_offset.line);
                 bareword_part->set_is_syntax_error(*create<AST::SyntaxError>(String::format("Unexpected %s inside a glob", bareword_part->class_name().characters())));
                 return bareword_part;
             }
             textbuilder.append(text);
         }
 
         textbuilder.append(ch);
 
         auto glob_after = parse_glob();
         if (glob_after) {
             if (glob_after->is_glob()) {
-                auto glob = static_cast<AST::BarewordLiteral*>(glob_after.ptr());
+                auto glob = static_cast<AST::Glob*>(glob_after.ptr());
                 textbuilder.append(glob->text());
             } else if (glob_after->is_bareword()) {
                 auto bareword = static_cast<AST::BarewordLiteral*>(glob_after.ptr());
                 textbuilder.append(bareword->text());
             } else if (glob_after->is_tilde()) {
                 auto bareword = static_cast<AST::Tilde*>(glob_after.ptr());
                 textbuilder.append("~");
                 textbuilder.append(bareword->text());
             } else {
                 return create<AST::SyntaxError>(String::formatted("Invalid node '{}' in glob position, escape shell special characters", glob_after->class_name()));
             }
         }
 
         return create<AST::Glob>(textbuilder.to_string()); // Glob
     }
 
     return bareword_part;
 }
