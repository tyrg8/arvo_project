commit 3e71b0ddc8632b8eea4424a4facb09e47ea353ba
Author: jeanlf <jeanlf@gpac.io>
Date:   Mon Jan 22 12:45:02 2024 +0100

    fixed potential crash in broken sdp parsing

diff --git a/src/filters/in_rtp_sdp.c b/src/filters/in_rtp_sdp.c
index cd311107a..c268172ae 100644
--- a/src/filters/in_rtp_sdp.c
+++ b/src/filters/in_rtp_sdp.c
@@ -314,84 +314,84 @@ static void rtpin_declare_media(GF_RTPIn *rtp, Bool force_iod)
 void rtpin_load_sdp(GF_RTPIn *rtp, char *sdp_text, u32 sdp_len, GF_RTPInStream *stream)
 {
 	GF_Err e;
 	u32 i;
 	GF_SDPInfo *sdp;
 	Bool is_isma_1;
 #if 0
 	char *iod_str = NULL;
 #endif
 	GF_X_Attribute *att;
 	Bool force_in_iod = GF_FALSE;
 
 	is_isma_1 = GF_FALSE;
 	sdp = gf_sdp_info_new();
 	e = gf_sdp_info_parse(sdp, sdp_text, sdp_len);
 
 	if (e == GF_OK) e = rtpin_setup_sdp(rtp, sdp, stream);
 
-	if (!gf_list_count(rtp->streams))
+	if (!gf_list_count(rtp->streams) && !e)
 		e = GF_NOT_SUPPORTED;
 
 	if (e != GF_OK) {
 		if (!stream) {
 			gf_filter_setup_failure(rtp->filter, e);
 		} else {
 			GF_LOG(GF_LOG_WARNING, GF_LOG_RTP, ("[RTPIn] code not tested file %s line %d !!\n", __FILE__, __LINE__));
 			gf_filter_setup_failure(rtp->filter, e);
 			stream->status = RTP_Unavailable;
 		}
 		gf_sdp_info_del(sdp);
 		return;
 	}
 
 	/*root SDP, attach service*/
 	if (!stream) {
 		/*look for IOD*/
 		i=0;
 		while ((att = (GF_X_Attribute*)gf_list_enum(sdp->Attributes, &i))) {
 #if 0
 			if (!iod_str && !strcmp(att->Name, "mpeg4-iod") ) iod_str = att->Value;
 #endif
 			if (!is_isma_1 && !strcmp(att->Name, "isma-compliance") ) {
 				if (!stricmp(att->Value, "1,1.0,1")) is_isma_1 = GF_TRUE;
 			}
 		}
 
 #if 0
 		/*force iod reconstruction with ISMA to use proper clock dependencies*/
 		if (is_isma_1) iod_str = NULL;
 
 		if (iod_str) {
 			e = rtpin_sdp_load_iod(rtp, iod_str);
 		} else
 #endif
 		{
 			GF_RTPInStream *a_stream;
 			i=0;
 			while (!force_in_iod && (a_stream = (GF_RTPInStream *)gf_list_enum(rtp->streams, &i))) {
 				if (!a_stream->depacketizer) continue;
 				if (a_stream->depacketizer->payt!=GF_RTP_PAYT_MPEG4) continue;
 				switch (a_stream->depacketizer->sl_map.StreamType) {
 				case GF_STREAM_SCENE:
 				case GF_STREAM_OD:
 					force_in_iod = GF_TRUE;
 					break;
 				default:
 					break;
 				}
 			}
 		}
 
 		/* service failed*/
 		if (e) gf_filter_setup_failure(rtp->filter, e);
 		else rtpin_declare_media(rtp, force_in_iod);
 	}
 	/*channel SDP */
 	else {
 		/*connect*/
 		rtpin_stream_setup(stream, NULL);
 	}
 	gf_sdp_info_del(sdp);
 }
 
 #endif /*GPAC_DISABLE_STREAMING*/
diff --git a/src/ietf/sdp.c b/src/ietf/sdp.c
index b771de7f6..453f13a0f 100644
--- a/src/ietf/sdp.c
+++ b/src/ietf/sdp.c
@@ -473,263 +473,266 @@ GF_EXPORT
 GF_Err gf_sdp_info_parse(GF_SDPInfo *sdp, char *sdp_text, u32 text_size)
 {
 	GF_SDPBandwidth *bw;
 	GF_SDPConnection *conn;
 	GF_SDPMedia *media;
 	GF_SDPTiming *timing;
 	u32 i;
 	s32 pos, LinePos;
 	char LineBuf[3000], comp[3000];
 
 	media = NULL;
 	timing = NULL;
 
 	if (!sdp) return GF_BAD_PARAM;
 
 #ifdef GPAC_ENABLE_COVERAGE
 	if (gf_sys_is_cov_mode()) {
 		SDP_MakeSeconds("30m");
 	}
 #endif
 
 	//Clean SDP info
 	gf_sdp_info_reset(sdp);
 
 	LinePos = 0;
 	while (1) {
 		LinePos = gf_token_get_line(sdp_text, LinePos, text_size, LineBuf, 3000);
 		if (LinePos <= 0) break;
 		if (!strcmp(LineBuf, "\r\n") || !strcmp(LineBuf, "\n") || !strcmp(LineBuf, "\r")) continue;
 
-
+		pos=0;
 		switch (LineBuf[0]) {
 		case 'v':
 			/*pos = */gf_token_get(LineBuf, 2, "\t\r\n", comp, 3000);
 			sdp->Version = atoi(comp);
 			break;
 		case 'o':
 			//only use first one
 			if (sdp->o_username) break;
 			pos = gf_token_get(LineBuf, 2, " \t\r\n", comp, 3000);
 			sdp->o_username = gf_strdup(comp);
 			pos = gf_token_get(LineBuf, pos, " \t\r\n", comp, 3000);
 			sdp->o_session_id = gf_strdup(comp);
 			pos = gf_token_get(LineBuf, pos, " \t\r\n", comp, 3000);
 			sdp->o_version = gf_strdup(comp);
 
 			pos = gf_token_get(LineBuf, pos, " \t\r\n", comp, 3000);
 			sdp->o_net_type = gf_strdup(comp);
 
 			pos = gf_token_get(LineBuf, pos, " \t\r\n", comp, 3000);
 			sdp->o_add_type = gf_strdup(comp);
 
 			/*pos = */gf_token_get(LineBuf, pos, " \t\r\n", comp, 3000);
 			sdp->o_address = gf_strdup(comp);
 			break;
 		case 's':
 			if (sdp->s_session_name) break;
 			/*pos = */gf_token_get(LineBuf, 2, "\t\r\n", comp, 3000);
 			sdp->s_session_name = gf_strdup(comp);
 			break;
 		case 'i':
 			if (sdp->i_description) break;
 			/*pos = */gf_token_get(LineBuf, 2, "\t\r\n", comp, 3000);
 			sdp->i_description = gf_strdup(comp);
 			break;
 		case 'u':
 			if (sdp->u_uri) break;
 			/*pos = */gf_token_get(LineBuf, 2, "\t\r\n", comp, 3000);
 			sdp->u_uri = gf_strdup(comp);
 			break;
 		case 'e':
 			if (sdp->e_email) break;
 			/*pos = */gf_token_get(LineBuf, 2, "\t\r\n", comp, 3000);
 			sdp->e_email = gf_strdup(comp);
 			break;
 		case 'p':
 			if (sdp->p_phone) break;
 			/*pos = */gf_token_get(LineBuf, 2, "\t\r\n", comp, 3000);
 			sdp->p_phone = gf_strdup(comp);
 			break;
 		case 'c':
 			//if at session level, only 1 is allowed for all SDP
 			if (sdp->c_connection) break;
 
 			conn = gf_sdp_conn_new();
 
 			pos = gf_token_get(LineBuf, 2, " \t\r\n", comp, 3000);
 			conn->net_type = gf_strdup(comp);
 
 			pos = gf_token_get(LineBuf, pos, " \t\r\n", comp, 3000);
 			conn->add_type = gf_strdup(comp);
 
 			pos = gf_token_get(LineBuf, pos, " /\r\n", comp, 3000);
 			conn->host = gf_strdup(comp);
 			if (gf_sk_is_multicast_address(conn->host)) {
 				//a valid SDP will have TTL if address is multicast
 				pos = gf_token_get(LineBuf, pos, "/\r\n", comp, 3000);
 				if (pos > 0) {
 					conn->TTL = atoi(comp);
 					//multiple address indication is only valid for media
 					pos = gf_token_get(LineBuf, pos, "/\r\n", comp, 3000);
 				}
 				if (pos > 0) {
 					if (!media) {
 						gf_sdp_conn_del(conn);
 						break;
 					}
 					conn->add_count = atoi(comp);
 				}
 			}
 			if (!media)
 				sdp->c_connection = conn;
 			else
 				gf_list_add(media->Connections, conn);
 
 			break;
 		case 'b':
 			pos = gf_token_get(LineBuf, 2, ":\r\n", comp, 3000);
 			if (strcmp(comp, "CT") && strcmp(comp, "AS") && (comp[0] != 'X')) break;
 
 			GF_SAFEALLOC(bw, GF_SDPBandwidth);
 			if (!bw) return GF_OUT_OF_MEM;
 			bw->name = gf_strdup(comp);
 			/*pos = */gf_token_get(LineBuf, pos, ":\r\n", comp, 3000);
 			bw->value = atoi(comp);
 			if (media) {
 				gf_list_add(media->Bandwidths, bw);
 			} else {
 				gf_list_add(sdp->b_bandwidth, bw);
 			}
 			break;
 
 		case 't':
 			if (media) break;
 			//create a new time structure for each entry
 			GF_SAFEALLOC(timing, GF_SDPTiming);
 			if (!timing) return GF_OUT_OF_MEM;
 			pos = gf_token_get(LineBuf, 2, " \t\r\n", comp, 3000);
 			timing->StartTime = atoi(comp);
 			/*pos = */gf_token_get(LineBuf, pos, "\r\n", comp, 3000);
 			timing->StopTime = atoi(comp);
 			gf_list_add(sdp->Timing, timing);
 			break;
 		case 'r':
 			if (media) break;
 			pos = gf_token_get(LineBuf, 2, " \t\r\n", comp, 3000);
 			if (!timing) return GF_NON_COMPLIANT_BITSTREAM;
 			timing->RepeatInterval = SDP_MakeSeconds(comp);
 			pos = gf_token_get(LineBuf, pos, " \t\r\n", comp, 3000);
 			timing->ActiveDuration = SDP_MakeSeconds(comp);
 			while (pos>=0) {
+				if (timing->NbRepeatOffsets == GF_SDP_MAX_TIMEOFFSET) break;
 				pos = gf_token_get(LineBuf, pos, " \t\r\n", comp, 3000);
 				if (pos <= 0) break;
 				timing->OffsetFromStart[timing->NbRepeatOffsets] = SDP_MakeSeconds(comp);
 				timing->NbRepeatOffsets += 1;
-				if (timing->NbRepeatOffsets == GF_SDP_MAX_TIMEOFFSET) break;
 			}
 			break;
 		case 'z':
 			if (media) break;
 			pos = 2;
 			if (!timing) return GF_NON_COMPLIANT_BITSTREAM;
 			while (1) {
 				pos = gf_token_get(LineBuf, pos, " \t\r\n", comp, 3000);
 				if (pos <= 0) break;
 				timing->AdjustmentTime[timing->NbZoneOffsets] = atoi(comp);
 				pos = gf_token_get(LineBuf, pos, " \t\r\n", comp, 3000);
 				timing->AdjustmentOffset[timing->NbZoneOffsets] = SDP_MakeSeconds(comp);
 				timing->NbZoneOffsets += 1;
 				if (timing->NbZoneOffsets == GF_SDP_MAX_TIMEOFFSET) break;
 			}
 			break;
 		case 'k':
 			if (sdp->k_method) break;
 			pos = gf_token_get(LineBuf, 2, ":\t\r\n", comp, 3000);
 			if (media) {
 				media->k_method = gf_strdup(comp);
 			} else {
 				sdp->k_method = gf_strdup(comp);
 			}
 			pos = gf_token_get(LineBuf, pos, ":\r\n", comp, 3000);
 			if (pos > 0) {
 				if (media) {
 					media->k_key = gf_strdup(comp);
 				} else {
 					sdp->k_key = gf_strdup(comp);
 				}
 			}
 			break;
 		case 'a':
 			SDP_ParseAttribute(sdp, LineBuf+2, media);
 			break;
 		case 'm':
 			pos = gf_token_get(LineBuf, 2, " \t\r\n", comp, 3000);
 			if (strcmp(comp, "audio")
 			        && strcmp(comp, "data")
 			        && strcmp(comp, "control")
 			        && strcmp(comp, "video")
 			        && strcmp(comp, "text")
 			        && strcmp(comp, "application")) {
 				return GF_SERVICE_ERROR;
 			}
 			media = gf_sdp_media_new();
 			//media type
 			if (!strcmp(comp, "video")) media->Type = 1;
 			else if (!strcmp(comp, "audio")) media->Type = 2;
 			else if (!strcmp(comp, "text")) media->Type = 3;
 			else if (!strcmp(comp, "data")) media->Type = 4;
 			else if (!strcmp(comp, "control")) media->Type = 5;
 			else media->Type = 0;
 			//port numbers
 			gf_token_get(LineBuf, pos, " ", comp, 3000);
 			if (!strstr(comp, "/")) {
 				pos = gf_token_get(LineBuf, pos, " \r\n", comp, 3000);
 				media->PortNumber = atoi(comp);
 				media->NumPorts = 0;
 			} else {
 				pos = gf_token_get(LineBuf, pos, " /\r\n", comp, 3000);
 				media->PortNumber = atoi(comp);
 				pos = gf_token_get(LineBuf, pos, " \r\n", comp, 3000);
 				media->NumPorts = atoi(comp);
 			}
 			//transport Profile
 			pos = gf_token_get(LineBuf, pos, " \r\n", comp, 3000);
 			media->Profile = gf_strdup(comp);
 			/*pos = */gf_token_get(LineBuf, pos, " \r\n", comp, 3000);
 			media->fmt_list = gf_strdup(comp);
 
 			gf_list_add(sdp->media_desc, media);
 			break;
 		}
+
+		if (pos<0)
+			return GF_NON_COMPLIANT_BITSTREAM;
 	}
 	//finally rewrite the fmt_list for all media, and remove dynamic payloads
 	//from the list
 	i=0;
 	while ((media = (GF_SDPMedia*)gf_list_enum(sdp->media_desc, &i))) {
 		pos = 0;
 		LinePos = 1;
 		strcpy(LineBuf, "");
 		while (1) {
 			if (!media->fmt_list) break;
 			pos = gf_token_get(media->fmt_list, pos, " ", comp, 3000);
 			if (pos <= 0) break;
 			if (!SDP_IsDynamicPayload(media, comp)) {
 				if (!LinePos) {
 					strcat(LineBuf, " ");
 				} else {
 					LinePos = 0;
 				}
 				strcat(LineBuf, comp);
 			}
 			gf_free(media->fmt_list);
 			media->fmt_list = NULL;
 			if (strlen(LineBuf)) {
 				media->fmt_list = gf_strdup(LineBuf);
 			}
 		}
 	}
 	return GF_OK;
 }
 
 
 #if 0 //unused
diff --git a/src/utils/token.c b/src/utils/token.c
index d47a4164d..bcae386e4 100644
--- a/src/utils/token.c
+++ b/src/utils/token.c
@@ -39,23 +39,25 @@ GF_EXPORT
 s32 gf_token_get(const char *Buffer, s32 Start,  const char *Separator,  char *Container, s32 ContainerSize)
 {
 	s32 i, start, end, Len;
+	Container[0]=0;
+	if (Start<0) return -1;
 
 	Len = (s32) strlen( Buffer );
 	for (i=Start; i<Len; i++ ) {
 		if (!gf_tok_is_char_in_set(Buffer[i], Separator)) break;
 	}
 	start = i;
 	if (i == Len) return( -1 );
 
 	for (i=start; i<Len; i++) {
 		if (gf_tok_is_char_in_set(Buffer[i], Separator)) break;
 	}
 	end = i-1;
 
 	for (i=start; ((i<=end) && (i< start+(ContainerSize-1))); i++) {
 		Container[i-start] = Buffer[i];
 	}
 	Container[i-start] = 0;
 
 	return (end+1);
 }
