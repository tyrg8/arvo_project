commit 44c3f765e5a42790ae2e7577ff0a96fab809fc4a
Author: tbeu <tbeu@users.noreply.github.com>
Date:   Fri Dec 6 22:21:56 2019 +0100

    Delete strdup_printf and remove strdup_vprintf from API

diff --git a/src/io.c b/src/io.c
index e2e959b..73da41c 100644
--- a/src/io.c
+++ b/src/io.c
@@ -46,54 +46,38 @@
 
 static void (*logfunc)(int log_level, char *message ) = NULL;
 static const char *progname = NULL;
+static char *strdup_vprintf(const char *format, va_list ap) MATIO_FORMATATTR_VPRINTF;
 
 /** @brief Allocates and prints to a new string
  *
  * @ingroup mat_util
  * @param format format string
  * @param ap variable argument list
  * @return Newly allocated string with format printed to it
  */
-char *
+static char *
 strdup_vprintf(const char* format, va_list ap)
 {
     va_list ap2;
     int size;
     char* buffer;
 
     va_copy(ap2, ap);
     size = mat_vsnprintf(NULL, 0, format, ap2)+1;
     va_end(ap2);
 
     buffer = (char*)malloc(size+1);
     if ( !buffer )
         return NULL;
 
     mat_vsnprintf(buffer, size, format, ap);
     return buffer;
 }
 
-/** @brief Allocates and prints to a new string using printf format
- *
- * @ingroup mat_util
- * @param format format string
- * @return Pointer to resulting string, or NULL if there was an error
- */
-char *
-strdup_printf(const char* format, ...)
-{
-    char* buffer;
-    va_list ap;
-    va_start(ap, format);
-    buffer = strdup_vprintf(format, ap);
-    va_end(ap);
-    return buffer;
-}
-
 #if defined(_WIN32) && defined(_MSC_VER)
 /** @brief Convert from narrow UTF-8 string to wide string
  *
  * @ingroup mat_util
  * @param src narrow string
  * @return Pointer to resulting wide string, or NULL if there was an error
  */
diff --git a/src/mat.c b/src/mat.c
index e62a9d2..3ff7f2a 100644
--- a/src/mat.c
+++ b/src/mat.c
@@ -348,186 +348,186 @@ mat_t *
 Mat_Open(const char *matname,int mode)
 {
     FILE *fp = NULL;
     mat_int16_t tmp, tmp2;
     mat_t *mat = NULL;
     size_t bytesread = 0;
 
     if ( (mode & 0x01) == MAT_ACC_RDONLY ) {
 #if defined(_WIN32) && defined(_MSC_VER)
         wchar_t* wname = utf82u(matname);
         if ( NULL != wname ) {
             fp = _wfopen(wname, L"rb");
             free(wname);
         }
 #else
         fp = fopen(matname, "rb");
 #endif
         if ( !fp )
             return NULL;
     } else if ( (mode & 0x01) == MAT_ACC_RDWR ) {
 #if defined(_WIN32) && defined(_MSC_VER)
         wchar_t* wname = utf82u(matname);
         if ( NULL != wname ) {
             fp = _wfopen(wname, L"r+b");
             free(wname);
         }
 #else
         fp = fopen(matname, "r+b");
 #endif
         if ( !fp ) {
             mat = Mat_CreateVer(matname,NULL,(enum mat_ft)(mode&0xfffffffe));
             return mat;
         }
     } else {
         Mat_Critical("Invalid file open mode");
         return NULL;
     }
 
     mat = (mat_t*)malloc(sizeof(*mat));
     if ( NULL == mat ) {
         fclose(fp);
         Mat_Critical("Couldn't allocate memory for the MAT file");
         return NULL;
     }
 
     mat->fp = fp;
     mat->header        = (char*)calloc(128,sizeof(char));
     if ( NULL == mat->header ) {
         free(mat);
         fclose(fp);
         Mat_Critical("Couldn't allocate memory for the MAT file header");
         return NULL;
     }
     mat->subsys_offset = (char*)calloc(8,sizeof(char));
     if ( NULL == mat->subsys_offset ) {
         free(mat->header);
         free(mat);
         fclose(fp);
         Mat_Critical("Couldn't allocate memory for the MAT file subsys offset");
         return NULL;
     }
     mat->filename      = NULL;
     mat->version       = 0;
     mat->byteswap      = 0;
     mat->num_datasets  = 0;
 #if defined(MAT73) && MAT73
     mat->refs_id       = -1;
 #endif
     mat->dir           = NULL;
 
     bytesread += fread(mat->header,1,116,fp);
     mat->header[116] = '\0';
     bytesread += fread(mat->subsys_offset,1,8,fp);
     bytesread += 2*fread(&tmp2,2,1,fp);
     bytesread += fread(&tmp,1,2,fp);
 
     if ( 128 == bytesread ) {
         /* v5 and v7.3 files have at least 128 byte header */
         mat->byteswap = -1;
         if ( tmp == 0x4d49 )
             mat->byteswap = 0;
         else if ( tmp == 0x494d ) {
             mat->byteswap = 1;
             Mat_int16Swap(&tmp2);
         }
 
         mat->version = (int)tmp2;
         if ( (mat->version == 0x0100 || mat->version == 0x0200) &&
              -1 != mat->byteswap ) {
             mat->bof = ftell((FILE*)mat->fp);
             if ( mat->bof == -1L ) {
                 free(mat->header);
                 free(mat->subsys_offset);
                 free(mat);
                 fclose(fp);
                 Mat_Critical("Couldn't determine file position");
                 return NULL;
             }
             mat->next_index = 0;
         } else {
             mat->version = 0;
         }
     }
 
     if ( 0 == mat->version ) {
         /* Maybe a V4 MAT file */
         matvar_t *var;
 
         free(mat->header);
         free(mat->subsys_offset);
 
         mat->header        = NULL;
         mat->subsys_offset = NULL;
         mat->fp            = fp;
         mat->version       = MAT_FT_MAT4;
         mat->byteswap      = 0;
         mat->mode          = mode;
         mat->bof           = 0;
         mat->next_index    = 0;
 #if defined(MAT73) && MAT73
         mat->refs_id       = -1;
 #endif
 
         Mat_Rewind(mat);
         var = Mat_VarReadNextInfo4(mat);
         if ( NULL == var &&
              bytesread != 0 ) { /* Accept 0 bytes files as a valid V4 file */
             /* Does not seem to be a valid V4 file */
             Mat_Close(mat);
             mat = NULL;
             Mat_Critical("\"%s\" does not seem to be a valid MAT file",matname);
         } else {
             Mat_VarFree(var);
             Mat_Rewind(mat);
         }
     }
 
     if ( NULL == mat )
         return mat;
 
-    mat->filename = strdup_printf("%s",matname);
+    mat->filename = strdup(matname);
     mat->mode = mode;
 
     if ( mat->version == 0x0200 ) {
         fclose((FILE*)mat->fp);
 #if defined(MAT73) && MAT73
         mat->fp = malloc(sizeof(hid_t));
 
         if ( (mode & 0x01) == MAT_ACC_RDONLY )
             *(hid_t*)mat->fp=H5Fopen(matname,H5F_ACC_RDONLY,H5P_DEFAULT);
         else if ( (mode & 0x01) == MAT_ACC_RDWR ) {
             hid_t plist_ap;
             plist_ap = H5Pcreate(H5P_FILE_ACCESS);
 #if H5_VERSION_GE(1,10,2)
             H5Pset_libver_bounds(plist_ap,H5F_LIBVER_EARLIEST,H5F_LIBVER_V18);
 #endif
             *(hid_t*)mat->fp=H5Fopen(matname,H5F_ACC_RDWR,plist_ap);
             H5Pclose(plist_ap);
         }
 
         if ( -1 < *(hid_t*)mat->fp ) {
             H5G_info_t group_info;
             memset(&group_info, 0, sizeof(group_info));
             H5Gget_info(*(hid_t*)mat->fp, &group_info);
             mat->num_datasets = (size_t)group_info.nlinks;
             mat->refs_id      = -1;
         }
 #else
         mat->fp = NULL;
         Mat_Close(mat);
         mat = NULL;
         Mat_Critical("No HDF5 support which is required to read the v7.3 "
                      "MAT file \"%s\"",matname);
 #endif
     }
 
     return mat;
 }
 
 /** @brief Closes an open Matlab MAT file
  *
  * Closes the given Matlab MAT file and frees any memory with it.
  * @ingroup MAT
  * @param mat Pointer to the MAT file
  * @retval 0 on success
  */
@@ -629,102 +629,100 @@ char **
 Mat_GetDir(mat_t *mat, size_t *n)
 {
     char ** dir = NULL;
 
     if ( NULL == n )
         return dir;
 
     if ( NULL == mat ) {
         *n = 0;
         return dir;
     }
 
     if ( NULL == mat->dir ) {
         matvar_t *matvar = NULL;
 
         if ( mat->version == MAT_FT_MAT73 ) {
             size_t i = 0;
             size_t fpos = mat->next_index;
             if ( mat->num_datasets == 0 ) {
                 *n = 0;
                 return dir;
             }
             mat->dir = (char**)calloc(mat->num_datasets, sizeof(char*));
             if ( NULL == mat->dir ) {
                 *n = 0;
                 Mat_Critical("Couldn't allocate memory for the directory");
                 return dir;
             }
             mat->next_index = 0;
             while ( mat->next_index < mat->num_datasets ) {
                 matvar = Mat_VarReadNextInfo(mat);
                 if ( NULL != matvar ) {
                     if ( NULL != matvar->name ) {
-                        mat->dir[i++] = strdup_printf("%s",
-                            matvar->name);
+                        mat->dir[i++] = strdup(matvar->name);
                     }
                     Mat_VarFree(matvar);
                 } else {
                     Mat_Critical("An error occurred in reading the MAT file");
                     break;
                 }
             }
             mat->next_index = fpos;
             *n = i;
         } else {
             long fpos = ftell((FILE*)mat->fp);
             if ( fpos == -1L ) {
                 *n = 0;
                 Mat_Critical("Couldn't determine file position");
                 return dir;
             }
             (void)fseek((FILE*)mat->fp,mat->bof,SEEK_SET);
             mat->num_datasets = 0;
             do {
                 matvar = Mat_VarReadNextInfo(mat);
                 if ( NULL != matvar ) {
                     if ( NULL != matvar->name ) {
                         if ( NULL == mat->dir ) {
                             dir = (char**)malloc(sizeof(char*));
                         } else {
                             dir = (char**)realloc(mat->dir,
                                 (mat->num_datasets + 1)*(sizeof(char*)));
                         }
                         if ( NULL != dir ) {
                             mat->dir = dir;
-                            mat->dir[mat->num_datasets++] =
-                                strdup_printf("%s", matvar->name);
+                            mat->dir[mat->num_datasets++] = strdup(matvar->name);
                         } else {
                             Mat_Critical("Couldn't allocate memory for the directory");
                             break;
                         }
                     }
                     Mat_VarFree(matvar);
                 } else if ( !feof((FILE *)mat->fp) ) {
                     Mat_Critical("An error occurred in reading the MAT file");
                     break;
                 }
             } while ( !feof((FILE *)mat->fp) );
             (void)fseek((FILE*)mat->fp,fpos,SEEK_SET);
             *n = mat->num_datasets;
         }
     } else {
         if ( mat->version == MAT_FT_MAT73 ) {
             *n = 0;
             while ( *n < mat->num_datasets && NULL != mat->dir[*n] ) {
                 (*n)++;
             }
         } else {
             *n = mat->num_datasets;
         }
     }
     dir = mat->dir;
     return dir;
 }
 
 /** @brief Rewinds a Matlab MAT file to the first variable
  *
  * Rewinds a Matlab MAT file to the first variable
  * @ingroup MAT
  * @param mat Pointer to the MAT file
  * @retval 0 on success
  */
@@ -908,195 +906,195 @@ matvar_t *
 Mat_VarCreate(const char *name,enum matio_classes class_type,
     enum matio_types data_type,int rank,size_t *dims,void *data,int opt)
 {
     size_t nelems = 1, data_size;
     matvar_t *matvar = NULL;
     int j, err;
 
     if ( dims == NULL )
         return NULL;
 
     matvar = Mat_VarCalloc();
     if ( NULL == matvar )
         return NULL;
 
     matvar->compression = MAT_COMPRESSION_NONE;
     matvar->isComplex   = opt & MAT_F_COMPLEX;
     matvar->isGlobal    = opt & MAT_F_GLOBAL;
     matvar->isLogical   = opt & MAT_F_LOGICAL;
     if ( name )
-        matvar->name = strdup_printf("%s",name);
+        matvar->name = strdup(name);
     matvar->rank = rank;
     matvar->dims = (size_t*)malloc(matvar->rank*sizeof(*matvar->dims));
     for ( j = 0; j < matvar->rank; j++ ) {
         matvar->dims[j] = dims[j];
         nelems *= dims[j];
     }
     matvar->class_type = class_type;
     matvar->data_type  = data_type;
     switch ( data_type ) {
         case MAT_T_INT8:
             data_size = 1;
             break;
         case MAT_T_UINT8:
             data_size = 1;
             break;
         case MAT_T_INT16:
             data_size = 2;
             break;
         case MAT_T_UINT16:
             data_size = 2;
             break;
         case MAT_T_INT64:
             data_size = 8;
             break;
         case MAT_T_UINT64:
             data_size = 8;
             break;
         case MAT_T_INT32:
             data_size = 4;
             break;
         case MAT_T_UINT32:
             data_size = 4;
             break;
         case MAT_T_SINGLE:
             data_size = sizeof(float);
             break;
         case MAT_T_DOUBLE:
             data_size = sizeof(double);
             break;
         case MAT_T_UTF8:
             data_size = 1;
             break;
         case MAT_T_UTF16:
             data_size = 2;
             break;
         case MAT_T_UTF32:
             data_size = 4;
             break;
         case MAT_T_CELL:
             data_size = sizeof(matvar_t **);
             break;
         case MAT_T_STRUCT:
         {
             data_size = sizeof(matvar_t **);
             if ( data != NULL ) {
                 matvar_t **fields = (matvar_t**)data;
                 size_t nfields = 0;
                 while ( fields[nfields] != NULL )
                     nfields++;
                 if ( nelems )
                     nfields /= nelems;
                 matvar->internal->num_fields = nfields;
                 if ( nfields ) {
                     size_t i;
                     matvar->internal->fieldnames =
                         (char**)calloc(nfields,sizeof(*matvar->internal->fieldnames));
                     for ( i = 0; i < nfields; i++ )
                         matvar->internal->fieldnames[i] = strdup(fields[i]->name);
                     err = SafeMul(&nelems, nelems, nfields);
                     if ( err ) {
                         Mat_VarFree(matvar);
                         Mat_Critical("Integer multiplication overflow");
                         return NULL;
                     }
                 }
             }
             break;
         }
         default:
             Mat_VarFree(matvar);
             Mat_Critical("Unrecognized data_type");
             return NULL;
     }
     if ( matvar->class_type == MAT_C_SPARSE ) {
         matvar->data_size = sizeof(mat_sparse_t);
         matvar->nbytes    = matvar->data_size;
     } else {
         matvar->data_size = data_size;
         err = SafeMul(&matvar->nbytes, nelems, matvar->data_size);
         if ( err ) {
             Mat_VarFree(matvar);
             Mat_Critical("Integer multiplication overflow");
             return NULL;
         }
     }
     if ( data == NULL ) {
         if ( MAT_C_CELL == matvar->class_type && nelems > 0 )
             matvar->data = calloc(nelems,sizeof(matvar_t*));
         else
             matvar->data = NULL;
     } else if ( opt & MAT_F_DONT_COPY_DATA ) {
         matvar->data         = data;
         matvar->mem_conserve = 1;
     } else if ( MAT_C_SPARSE == matvar->class_type ) {
         mat_sparse_t *sparse_data, *sparse_data_in;
 
         sparse_data_in = (mat_sparse_t*)data;
         sparse_data    = (mat_sparse_t*)malloc(sizeof(mat_sparse_t));
         if ( NULL != sparse_data ) {
             sparse_data->nzmax = sparse_data_in->nzmax;
             sparse_data->nir   = sparse_data_in->nir;
             sparse_data->njc   = sparse_data_in->njc;
             sparse_data->ndata = sparse_data_in->ndata;
             sparse_data->ir = (mat_uint32_t*)malloc(sparse_data->nir*sizeof(*sparse_data->ir));
             if ( NULL != sparse_data->ir )
                 memcpy(sparse_data->ir,sparse_data_in->ir,
                        sparse_data->nir*sizeof(*sparse_data->ir));
             sparse_data->jc = (mat_uint32_t*)malloc(sparse_data->njc*sizeof(*sparse_data->jc));
             if ( NULL != sparse_data->jc )
                 memcpy(sparse_data->jc,sparse_data_in->jc,
                        sparse_data->njc*sizeof(*sparse_data->jc));
             if ( matvar->isComplex ) {
                 sparse_data->data = malloc(sizeof(mat_complex_split_t));
                 if ( NULL != sparse_data->data ) {
                     mat_complex_split_t *complex_data,*complex_data_in;
                     complex_data     = (mat_complex_split_t*)sparse_data->data;
                     complex_data_in  = (mat_complex_split_t*)sparse_data_in->data;
                     complex_data->Re = malloc(sparse_data->ndata*data_size);
                     complex_data->Im = malloc(sparse_data->ndata*data_size);
                     if ( NULL != complex_data->Re )
                         memcpy(complex_data->Re,complex_data_in->Re,
                                sparse_data->ndata*data_size);
                     if ( NULL != complex_data->Im )
                         memcpy(complex_data->Im,complex_data_in->Im,
                                sparse_data->ndata*data_size);
                 }
             } else {
                 sparse_data->data = malloc(sparse_data->ndata*data_size);
                 if ( NULL != sparse_data->data )
                     memcpy(sparse_data->data,sparse_data_in->data,
                            sparse_data->ndata*data_size);
             }
         }
         matvar->data = sparse_data;
     } else {
         if ( matvar->isComplex ) {
             matvar->data   = malloc(sizeof(mat_complex_split_t));
             if ( NULL != matvar->data && matvar->nbytes > 0 ) {
                 mat_complex_split_t *complex_data    = (mat_complex_split_t*)matvar->data;
                 mat_complex_split_t *complex_data_in = (mat_complex_split_t*)data;
 
                 complex_data->Re = malloc(matvar->nbytes);
                 complex_data->Im = malloc(matvar->nbytes);
                 if ( NULL != complex_data->Re )
                     memcpy(complex_data->Re,complex_data_in->Re,matvar->nbytes);
                 if ( NULL != complex_data->Im )
                     memcpy(complex_data->Im,complex_data_in->Im,matvar->nbytes);
             }
         } else if ( matvar->nbytes > 0 ) {
             matvar->data   = malloc(matvar->nbytes);
             if ( NULL != matvar->data )
                 memcpy(matvar->data,data,matvar->nbytes);
         }
         matvar->mem_conserve = 0;
     }
 
     return matvar;
 }
 
 /** @brief Copies a file
  *
  * @param src source file path
  * @param dst destination file path
  * @retval 0 on success
  */
@@ -1165,133 +1163,133 @@ int
 Mat_VarDelete(mat_t *mat, const char *name)
 {
     int   err = 1;
     char *tmp_name;
     char temp[7] = "XXXXXX";
 
     if ( NULL == mat || NULL == name )
         return err;
 
     if ( (tmp_name = mktemp(temp)) != NULL ) {
         enum mat_ft mat_file_ver;
         mat_t *tmp;
 
         switch ( mat->version ) {
             case 0x0100:
                 mat_file_ver = MAT_FT_MAT5;
                 break;
             case 0x0200:
                 mat_file_ver = MAT_FT_MAT73;
                 break;
             case 0x0010:
                 mat_file_ver = MAT_FT_MAT4;
                 break;
             default:
                 mat_file_ver = MAT_FT_DEFAULT;
                 break;
         }
 
         tmp = Mat_CreateVer(tmp_name,mat->header,mat_file_ver);
         if ( tmp != NULL ) {
             matvar_t *matvar;
             char **dir;
             size_t n;
 
             Mat_Rewind(mat);
             while ( NULL != (matvar = Mat_VarReadNext(mat)) ) {
                 if ( 0 != strcmp(matvar->name,name) )
                     Mat_VarWrite(tmp,matvar,matvar->compression);
                 else
                     err = 0;
                 Mat_VarFree(matvar);
             }
             dir = tmp->dir; /* Keep directory for later assignment */
             tmp->dir = NULL;
             n = tmp->num_datasets;
             Mat_Close(tmp);
 
             if ( 0 == err ) {
-                char *new_name = strdup_printf("%s",mat->filename);
+                char *new_name = strdup(mat->filename);
 #if defined(MAT73) && MAT73
                 if ( mat_file_ver == MAT_FT_MAT73 ) {
                     if ( mat->refs_id > -1 )
                         H5Gclose(mat->refs_id);
                     H5Fclose(*(hid_t*)mat->fp);
                     free(mat->fp);
                     mat->fp = NULL;
                 }
 #endif
                 if ( mat->fp != NULL ) {
                     fclose((FILE*)mat->fp);
                     mat->fp = NULL;
                 }
 
                 if ( (err = mat_copy(tmp_name,new_name)) == -1 ) {
                     if ( NULL != dir ) {
                         size_t i;
                         for ( i = 0; i < n; i++ ) {
                             if ( dir[i] )
                                 free(dir[i]);
                         }
                         free(dir);
                     }
                     Mat_Critical("Cannot copy file from \"%s\" to \"%s\".",
                         tmp_name, new_name);
                 } else if ( (err = remove(tmp_name)) == -1 ) {
                     if ( NULL != dir ) {
                         size_t i;
                         for ( i = 0; i < n; i++ ) {
                             if ( dir[i] )
                                 free(dir[i]);
                         }
                         free(dir);
                     }
                     Mat_Critical("Cannot remove file \"%s\".",tmp_name);
                 } else {
                     tmp = Mat_Open(new_name,mat->mode);
                     if ( NULL != tmp ) {
                         if ( mat->header )
                             free(mat->header);
                         if ( mat->subsys_offset )
                             free(mat->subsys_offset);
                         if ( mat->filename )
                             free(mat->filename);
                         if ( mat->dir ) {
                             size_t i;
                             for ( i = 0; i < mat->num_datasets; i++ ) {
                                 if ( mat->dir[i] )
                                     free(mat->dir[i]);
                             }
                             free(mat->dir);
                         }
                         memcpy(mat,tmp,sizeof(mat_t));
                         free(tmp);
                         mat->num_datasets = n;
                         mat->dir = dir;
                     } else {
                         Mat_Critical("Cannot open file \"%s\".",new_name);
                     }
                 }
                 free(new_name);
             } else if ( (err = remove(tmp_name)) == -1 ) {
                 Mat_Critical("Cannot remove file \"%s\".",tmp_name);
             }
         }
     } else {
         Mat_Critical("Cannot create a unique file name.");
     }
 
     return err;
 }
 
 /** @brief Duplicates a matvar_t structure
  *
  * Provides a clean function for duplicating a matvar_t structure.
  * @ingroup MAT
  * @param in pointer to the matvar_t structure to be duplicated
  * @param opt 0 does a shallow duplicate and only assigns the data pointer to
  *            the duplicated array.  1 will do a deep duplicate and actually
  *            duplicate the contents of the data.  Warning: If you do a shallow
  *            copy and free both structures, the data will be freed twice and
  *            memory will be corrupted.  This may be fixed in a later release.
  * @returns Pointer to the duplicated matvar_t structure.
  */
@@ -2572,77 +2570,76 @@ int
 Mat_VarWrite(mat_t *mat,matvar_t *matvar,enum matio_compression compress)
 {
     int err;
 
     if ( NULL == mat || NULL == matvar )
         return -1;
 
     if ( NULL == mat->dir ) {
         size_t n = 0;
         (void)Mat_GetDir(mat, &n);
     }
 
     {
         /* Error if MAT variable already exists in MAT file */
         size_t i;
         for ( i = 0; i < mat->num_datasets; i++ ) {
             if ( NULL != mat->dir[i] &&
                 0 == strcmp(mat->dir[i], matvar->name) ) {
                 Mat_Critical("Variable %s already exists.", matvar->name);
                 return 1;
             }
         }
     }
 
     if ( mat->version == MAT_FT_MAT5 )
         err = Mat_VarWrite5(mat,matvar,compress);
     else if ( mat->version == MAT_FT_MAT73 )
 #if defined(MAT73) && MAT73
         err = Mat_VarWrite73(mat,matvar,compress);
 #else
         err = 1;
 #endif
     else if ( mat->version == MAT_FT_MAT4 )
         err = Mat_VarWrite4(mat,matvar);
     else
         err = 2;
 
     if ( err == 0 ) {
         /* Update directory */
         char **dir;
         if ( NULL == mat->dir ) {
             dir = (char**)malloc(sizeof(char*));
         } else {
             dir = (char**)realloc(mat->dir,
             (mat->num_datasets + 1)*(sizeof(char*)));
         }
         if ( NULL != dir ) {
             mat->dir = dir;
             if ( NULL != matvar->name ) {
-                mat->dir[mat->num_datasets++] =
-                    strdup_printf("%s", matvar->name);
+                mat->dir[mat->num_datasets++] = strdup(matvar->name);
             } else {
                 mat->dir[mat->num_datasets++] = NULL;
             }
         } else {
             err = 3;
             Mat_Critical("Couldn't allocate memory for the directory");
         }
     }
 
     return err;
 }
 
 /** @brief Writes/appends the given MAT variable to a version 7.3 MAT file
  *
  * Writes the numeric data of the MAT variable stored in matvar to the given
  * MAT file. The variable will be written to the end of the file if it does
  * not yet exist or appended to the existing variable.
  * @ingroup MAT
  * @param mat MAT file to write to
  * @param matvar MAT variable information to write
  * @param compress Whether or not to compress the data
  *        (Only valid for version 7.3 MAT files and variables with numeric data)
  * @param dim dimension to append data
  *        (Only valid for version 7.3 MAT files and variables with numeric data)
  * @retval 0 on success
  */
@@ -2650,58 +2647,57 @@ int
 Mat_VarWriteAppend(mat_t *mat,matvar_t *matvar,enum matio_compression compress,int dim)
 {
     int err;
 
     if ( NULL == mat || NULL == matvar )
         return -1;
 
     if ( NULL == mat->dir ) {
         size_t n = 0;
         (void)Mat_GetDir(mat, &n);
     }
 
     if ( mat->version == MAT_FT_MAT73 ) {
 #if defined(MAT73) && MAT73
         int append = 0;
         {
             /* Check if MAT variable already exists in MAT file */
             size_t i;
             for ( i = 0; i < mat->num_datasets; i++ ) {
                 if ( NULL != mat->dir[i] &&
                     0 == strcmp(mat->dir[i], matvar->name) ) {
                     append = 1;
                     break;
                 }
             }
         }
         err = Mat_VarWriteAppend73(mat,matvar,compress,dim);
         if ( err == 0 && 0 == append ) {
             /* Update directory */
             char **dir;
             if ( NULL == mat->dir ) {
                 dir = (char**)malloc(sizeof(char*));
             } else {
                 dir = (char**)realloc(mat->dir,
                 (mat->num_datasets + 1)*(sizeof(char*)));
             }
             if ( NULL != dir ) {
                 mat->dir = dir;
                 if ( NULL != matvar->name ) {
-                    mat->dir[mat->num_datasets++] =
-                        strdup_printf("%s", matvar->name);
+                    mat->dir[mat->num_datasets++] = strdup(matvar->name);
                 } else {
                     mat->dir[mat->num_datasets++] = NULL;
                 }
             } else {
                 err = 3;
                 Mat_Critical("Couldn't allocate memory for the directory");
             }
         }
 #else
         err = 1;
 #endif
     }
     else
         err = 2;
 
     return err;
 }
diff --git a/src/mat4.c b/src/mat4.c
index 28a1bcf..10556cc 100644
--- a/src/mat4.c
+++ b/src/mat4.c
@@ -1,51 +1,54 @@
 /** @file mat4.c
  * Matlab MAT version 4 file functions
  * @ingroup MAT
  */
 /*
  * Copyright (c) 2005-2019, Christopher C. Hulbert
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * 1. Redistributions of source code must retain the above copyright notice, this
  *    list of conditions and the following disclaimer.
  *
  * 2. Redistributions in binary form must reproduce the above copyright notice,
  *    this list of conditions and the following disclaimer in the documentation
  *    and/or other materials provided with the distribution.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include <stdlib.h>
 #include <string.h>
 #include <stdio.h>
 #include <math.h>
 #include <limits.h>
 #if defined(__GLIBC__)
 #include <endian.h>
 #endif
+#if defined(_MSC_VER) || defined(__MINGW32__)
+#   define strdup _strdup
+#endif
 #include "matio_private.h"
 #include "mat4.h"
 
 /** @if mat_devman
  * @brief Creates a new Matlab MAT version 4 file
  *
  * Tries to create a new Matlab MAT file with the given name.
  * @ingroup MAT
  * @param matname Name of MAT file to create
  * @return A pointer to the MAT file or NULL if it failed.  This is not a
  * simple FILE * and should not be used as one.
  * @endif
  */
@@ -53,53 +56,53 @@ mat_t *
 Mat_Create4(const char* matname)
 {
     FILE *fp = NULL;
     mat_t *mat = NULL;
 
 #if defined(_WIN32) && defined(_MSC_VER)
     wchar_t* wname = utf82u(matname);
     if ( NULL != wname ) {
         fp = _wfopen(wname, L"w+b");
         free(wname);
     }
 #else
     fp = fopen(matname, "w+b");
 #endif
     if ( !fp )
         return NULL;
 
     mat = (mat_t*)malloc(sizeof(*mat));
     if ( NULL == mat ) {
         fclose(fp);
         Mat_Critical("Couldn't allocate memory for the MAT file");
         return NULL;
     }
 
     mat->fp            = fp;
     mat->header        = NULL;
     mat->subsys_offset = NULL;
-    mat->filename      = strdup_printf("%s",matname);
+    mat->filename      = strdup(matname);
     mat->version       = MAT_FT_MAT4;
     mat->byteswap      = 0;
     mat->mode          = 0;
     mat->bof           = 0;
     mat->next_index    = 0;
     mat->num_datasets  = 0;
 #if defined(MAT73) && MAT73
     mat->refs_id       = -1;
 #endif
     mat->dir           = NULL;
 
     Mat_Rewind(mat);
 
     return mat;
 }
 
 /** @if mat_devman
  * @brief Writes a matlab variable to a version 4 matlab file
  *
  * @ingroup mat_internal
  * @param mat MAT file pointer
  * @param matvar pointer to the mat variable
  * @retval 0 on success
  * @endif
  */
diff --git a/src/mat5.c b/src/mat5.c
index 41907c1..140cd6c 100644
--- a/src/mat5.c
+++ b/src/mat5.c
@@ -547,89 +547,89 @@ mat_t *
 Mat_Create5(const char *matname,const char *hdr_str)
 {
     FILE *fp = NULL;
     mat_int16_t endian = 0, version;
     mat_t *mat = NULL;
     size_t err;
     time_t t;
 
 #if defined(_WIN32) && defined(_MSC_VER)
     wchar_t* wname = utf82u(matname);
     if ( NULL != wname ) {
         fp = _wfopen(wname, L"w+b");
         free(wname);
     }
 #else
     fp = fopen(matname, "w+b");
 #endif
     if ( !fp )
         return NULL;
 
     mat = (mat_t*)malloc(sizeof(*mat));
     if ( mat == NULL ) {
         fclose(fp);
         return NULL;
     }
 
     mat->fp            = NULL;
     mat->header        = NULL;
     mat->subsys_offset = NULL;
     mat->filename      = NULL;
     mat->version       = 0;
     mat->byteswap      = 0;
     mat->mode          = 0;
     mat->bof           = 128;
     mat->next_index    = 0;
     mat->num_datasets  = 0;
 #if defined(MAT73) && MAT73
     mat->refs_id       = -1;
 #endif
     mat->dir           = NULL;
 
     t = time(NULL);
     mat->fp       = fp;
-    mat->filename = strdup_printf("%s",matname);
+    mat->filename = strdup(matname);
     mat->mode     = MAT_ACC_RDWR;
     mat->byteswap = 0;
     mat->header   = (char*)malloc(128*sizeof(char));
     mat->subsys_offset = (char*)malloc(8*sizeof(char));
     memset(mat->header,' ',128);
     if ( hdr_str == NULL ) {
         err = mat_snprintf(mat->header,116,"MATLAB 5.0 MAT-file, Platform: %s, "
                 "Created by: libmatio v%d.%d.%d on %s", MATIO_PLATFORM,
                 MATIO_MAJOR_VERSION, MATIO_MINOR_VERSION, MATIO_RELEASE_LEVEL,
                 ctime(&t));
     } else {
         err = mat_snprintf(mat->header,116,"%s",hdr_str);
     }
     if ( err >= 116 )
         mat->header[115] = '\0'; /* Just to make sure it's NULL terminated */
     memset(mat->subsys_offset,' ',8);
     mat->version = (int)0x0100;
     endian = 0x4d49;
 
     version = 0x0100;
 
     fwrite(mat->header,1,116,(FILE*)mat->fp);
     fwrite(mat->subsys_offset,1,8,(FILE*)mat->fp);
     fwrite(&version,2,1,(FILE*)mat->fp);
     fwrite(&endian,2,1,(FILE*)mat->fp);
 
     return mat;
 }
 
 /** @if mat_devman
  * @brief Writes @c data as character data
  *
  * This function uses the knowledge that the data is part of a character class
  * to avoid some pitfalls with Matlab listed below.
  *   @li Matlab character data cannot be unsigned 8-bit integers, it needs at
  *       least unsigned 16-bit integers
  *
  * @ingroup mat_internal
  * @param mat MAT file pointer
  * @param data character data to write
  * @param N Number of elements to write
  * @param data_type character data type (enum matio_types)
  * @return number of bytes written
  * @endif
  */
diff --git a/src/mat73.c b/src/mat73.c
index 478ab70..23af499 100644
--- a/src/mat73.c
+++ b/src/mat73.c
@@ -2209,105 +2209,105 @@ mat_t *
 Mat_Create73(const char *matname,const char *hdr_str)
 {
     FILE *fp = NULL;
     mat_int16_t endian = 0, version;
     mat_t *mat = NULL;
     size_t err;
     time_t t;
     hid_t plist_id,fid,plist_ap;
 
     plist_id = H5Pcreate(H5P_FILE_CREATE);
     H5Pset_userblock(plist_id,512);
     plist_ap = H5Pcreate(H5P_FILE_ACCESS);
 #if H5_VERSION_GE(1,10,2)
     H5Pset_libver_bounds(plist_ap,H5F_LIBVER_EARLIEST,H5F_LIBVER_V18);
 #endif
     fid = H5Fcreate(matname,H5F_ACC_TRUNC,plist_id,plist_ap);
     H5Fclose(fid);
     H5Pclose(plist_id);
 
 #if defined(_WIN32) && defined(_MSC_VER) && H5_VERSION_GE(1,11,6)
     {
         wchar_t* wname = utf82u(matname);
         if ( NULL != wname ) {
             fp = _wfopen(wname, L"r+b");
             free(wname);
         }
     }
 #else
     fp = fopen(matname, "r+b");
 #endif
     if ( !fp ) {
         H5Pclose(plist_ap);
         return NULL;
     }
 
     (void)fseek(fp,0,SEEK_SET);
 
     mat = (mat_t*)malloc(sizeof(*mat));
     if ( mat == NULL ) {
         fclose(fp);
         H5Pclose(plist_ap);
         return NULL;
     }
 
     mat->fp            = NULL;
     mat->header        = NULL;
     mat->subsys_offset = NULL;
     mat->filename      = NULL;
     mat->version       = 0;
     mat->byteswap      = 0;
     mat->mode          = 0;
     mat->bof           = 128;
     mat->next_index    = 0;
     mat->num_datasets  = 0;
     mat->refs_id       = -1;
     mat->dir           = NULL;
 
     t = time(NULL);
-    mat->filename = strdup_printf("%s",matname);
+    mat->filename = strdup(matname);
     mat->mode     = MAT_ACC_RDWR;
     mat->byteswap = 0;
     mat->header   = (char*)malloc(128*sizeof(char));
     mat->subsys_offset = (char*)malloc(8*sizeof(char));
     memset(mat->header,' ',128);
     if ( hdr_str == NULL ) {
         err = mat_snprintf(mat->header,116,"MATLAB 7.3 MAT-file, Platform: %s, "
                 "Created by: libmatio v%d.%d.%d on %s HDF5 schema 0.5",
                 MATIO_PLATFORM, MATIO_MAJOR_VERSION, MATIO_MINOR_VERSION,
                 MATIO_RELEASE_LEVEL, ctime(&t));
     } else {
         err = mat_snprintf(mat->header,116,"%s",hdr_str);
     }
     if ( err >= 116 )
         mat->header[115] = '\0'; /* Just to make sure it's NULL terminated */
     memset(mat->subsys_offset,' ',8);
     mat->version = (int)0x0200;
     endian = 0x4d49;
 
     version = 0x0200;
 
     fwrite(mat->header,1,116,fp);
     fwrite(mat->subsys_offset,1,8,fp);
     fwrite(&version,2,1,fp);
     fwrite(&endian,2,1,fp);
 
     fclose(fp);
 
     fid = H5Fopen(matname,H5F_ACC_RDWR,plist_ap);
     H5Pclose(plist_ap);
 
     mat->fp = malloc(sizeof(hid_t));
     *(hid_t*)mat->fp = fid;
 
     return mat;
 }
 
 /** @if mat_devman
  * @brief Reads the MAT variable identified by matvar
  *
  * @ingroup mat_internal
  * @param mat MAT file pointer
  * @param matvar MAT variable pointer
  * @retval 0 on success
  * @endif
  */
diff --git a/src/matio.h b/src/matio.h
index 1d965b3..5d8e1f3 100644
--- a/src/matio.h
+++ b/src/matio.h
@@ -231,8 +231,6 @@ typedef struct mat_sparse_t {
 EXTERN void Mat_GetLibraryVersion(int *major,int *minor,int *release);
 
 /* io.c */
-EXTERN char  *strdup_vprintf(const char *format, va_list ap) MATIO_FORMATATTR_VPRINTF;
-EXTERN char  *strdup_printf(const char *format, ...) MATIO_FORMATATTR_PRINTF1;
 EXTERN int    Mat_SetVerbose(int verb, int s);
 EXTERN int    Mat_SetDebug(int d);
 EXTERN void   Mat_Critical(const char *format, ...) MATIO_FORMATATTR_PRINTF1;
