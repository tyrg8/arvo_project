commit 675093ee08b1cc970419946760ca6340edfca272
Author: Joachim Metz <joachim.metz@gmail.com>
Date:   Sat Sep 18 09:26:15 2021 +0200

    Fixed integer overflow ext4_load_attrs_inline leading to OOB-read

diff --git a/tsk/fs/ext2fs.c b/tsk/fs/ext2fs.c
index 9039b696a..5ca571b27 100755
--- a/tsk/fs/ext2fs.c
+++ b/tsk/fs/ext2fs.c
@@ -601,108 +601,108 @@ static uint8_t
 ext4_load_attrs_inline(TSK_FS_FILE *fs_file, const uint8_t * ea_buf, size_t ea_buf_len)
 {
     TSK_FS_META *fs_meta = fs_file->meta;
     TSK_FS_ATTR *fs_attr;
 
     // see if we have already loaded the attr
     if ((fs_meta->attr != NULL)
         && (fs_meta->attr_state == TSK_FS_META_ATTR_STUDIED)) {
         return 0;
     }
 
     if (fs_meta->attr_state == TSK_FS_META_ATTR_ERROR) {
         return 1;
     }
 
     // First load the data from the extended attr (if present)
     const char *ea_inline_data = NULL;
     uint32_t ea_inline_data_len = 0;
     if ((ea_buf != NULL) && (ea_buf_len > 4 + sizeof(ext2fs_ea_entry))
         && (tsk_getu32(fs_file->fs_info->endian, ea_buf) == EXT2_EA_MAGIC)) {
 
         // First entry starts after the four byte header
         size_t index = 4;
         ext2fs_ea_entry *ea_entry = (ext2fs_ea_entry*) &(ea_buf[index]);
 
         // The end of the list of entries is marked by two null bytes
         while ((ea_entry->nlen != 0) || (ea_entry->nidx != 0)) {
 
             // It looks like the continuation of inline data is stored in system.data.
             // Make sure we have room to read the attr name 'data'.
             if ((ea_entry->nidx == EXT2_EA_IDX_SYSTEM)
                 && (ea_entry->nlen == 4)
                 && (index + sizeof(ext2fs_ea_entry) + strlen("data") < ea_buf_len)
                 && (strncmp(&(ea_entry->name), "data", 4)) == 0) {
 
                 // This is the right attribute. Check that the length and offset are valid.
                 // The offset is from the beginning of the entries, i.e., four bytes into the buffer.
                 uint16_t offset = tsk_getu16(fs_file->fs_info->endian, ea_entry->val_off);
                 uint32_t size = tsk_getu32(fs_file->fs_info->endian, ea_entry->val_size);
-                if (4 + offset + size <= ea_buf_len) {
+                if ((ea_buf_len >= 4) && (offset < ea_buf_len - 4) && (size <= ea_buf_len - 4 - offset)) {
                     ea_inline_data = &(ea_buf[4 + offset]);
                     ea_inline_data_len = size;
                     break;
                 }
             }
 
             // Prepare to load the next entry.
             // The entry size is the size of the struct plus the length of the name, minus one
             // because the struct contains the first character of the name.
             index += sizeof(ext2fs_ea_entry) + ea_entry->nlen - 1;
 
             // Make sure there's room for the next entry plus the 'data' name we're looking for.
             if (index + sizeof(ext2fs_ea_entry) + strlen("data") > ea_buf_len) {
                 break;
             }
             ea_entry = (ext2fs_ea_entry*) &(ea_buf[index]);
         }
     }
 
     // Combine the two parts of the inline data for the resident attribute. For now, make a
     // buffer for the full file size - this may be different than the length of the data 
     // from the inode if we have sparse data.
     uint8_t *resident_data;
     if ((resident_data = (uint8_t*)tsk_malloc(fs_meta->size)) == NULL) {
         return 1;
     }
     memset(resident_data, 0, fs_meta->size);
 
     // Copy the data from the inode.
     size_t inode_data_len = (fs_meta->size < EXT2_INLINE_MAX_DATA_LEN) ? fs_meta->size : EXT2_INLINE_MAX_DATA_LEN;
     memcpy(resident_data, fs_meta->content_ptr, inode_data_len);
 
     // If we need more data and found an extended attribute, append that data
     if ((fs_meta->size > EXT2_INLINE_MAX_DATA_LEN) && (ea_inline_data_len > 0)) {
         // Don't go beyond the size of the file
         size_t ea_data_len = (ea_inline_data_len < (uint64_t)fs_meta->size - inode_data_len) ? ea_inline_data_len : fs_meta->size - inode_data_len;
         memcpy(resident_data + inode_data_len, ea_inline_data, ea_data_len);
     }
 
     if (fs_meta->attr == NULL) {
         fs_meta->attr = tsk_fs_attrlist_alloc();
     }
     if ((fs_attr =
         tsk_fs_attrlist_getnew(fs_meta->attr,
             TSK_FS_ATTR_RES)) == NULL) {
         free(resident_data);
         return 1;
     }
 
     // Set the details in the fs_attr structure
     if (tsk_fs_attr_set_str(fs_file, fs_attr, "DATA",
         TSK_FS_ATTR_TYPE_DEFAULT, TSK_FS_ATTR_ID_DEFAULT,
         (void*)resident_data,
         fs_meta->size)) {
         free(resident_data);
         fs_meta->attr_state = TSK_FS_META_ATTR_ERROR;
         return 1;
     }
 
     free(resident_data);
     fs_meta->attr_state = TSK_FS_META_ATTR_STUDIED;
     return 0;
 }
 
 /* ext2fs_dinode_copy - copy cached disk inode into generic inode
  *
  * returns 1 on error and 0 on success
  * */
