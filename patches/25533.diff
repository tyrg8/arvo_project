commit 8bab82bdb8c2613e1ca7bd5573d7c12117a2dc02
Author: Valeriu Ohan <vo2@sanger.ac.uk>
Date:   Thu Sep 10 07:05:16 2020 +0000

    Check against the proper type lenght.

diff --git a/vcf.c b/vcf.c
index b2d4e9b7..2ad0ac13 100755
--- a/vcf.c
+++ b/vcf.c
@@ -1265,31 +1265,31 @@ static inline int bcf_read1_core(BGZF *fp, bcf1_t *v)
 static int bcf_dec_typed_int1_safe(uint8_t *p, uint8_t *end, uint8_t **q,
                                    int32_t *val) {
     uint32_t t;
     if (end - p < 2) return -1;
     t = *p++ & 0xf;
     /* Use if .. else if ... else instead of switch to force order.  Assumption
        is that small integers are more frequent than big ones. */
     if (t == BCF_BT_INT8) {
         *val = *(int8_t *) p++;
     } else {
-        if (end - p < bcf_type_shift[t]) return -1;
+        if (end - p < (1<<bcf_type_shift[t])) return -1;
         if (t == BCF_BT_INT16) {
             *val = le_to_i16(p);
             p += 2;
         } else if (t == BCF_BT_INT32) {
             *val = le_to_i32(p);
             p += 4;
 #ifdef VCF_ALLOW_INT64
         } else if (t == BCF_BT_INT64) {
             // This case should never happen because there should be no
             // 64-bit BCFs at all, definitely not coming from htslib
             *val = le_to_i64(p);
             p += 8;
 #endif
         } else {
             return -1;
         }
     }
     *q = p;
     return 0;
 }
