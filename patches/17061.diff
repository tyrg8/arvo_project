commit 73b8376b302ac3fd61ef4010f2bcc4fc2a48b5bc
Author: Ethan Nicholas <ethannicholas@google.com>
Date:   Mon Sep 9 09:25:45 2019 -0400

    Fixed skslc assertion failure discovered by fuzzer
    
    This particular issue probably wouldn't ever occur in hand-written code, but
    such is fuzzing...
    
    Bug: oss-fuzz:17061
    Change-Id: Ia5da7b75afef8b49bb19ddb7f1ea8696053c2e54
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/240197
    Reviewed-by: Brian Osman <brianosman@google.com>
    Commit-Queue: Ethan Nicholas <ethannicholas@google.com>

diff --git a/src/sksl/ir/SkSLFunctionDeclaration.h b/src/sksl/ir/SkSLFunctionDeclaration.h
index f0e3e10c10..9b6d25e483 100644
--- a/src/sksl/ir/SkSLFunctionDeclaration.h
+++ b/src/sksl/ir/SkSLFunctionDeclaration.h
@@ -20,96 +20,98 @@ namespace SkSL {
 /**
  * A function declaration (not a definition -- does not contain a body).
  */
 struct FunctionDeclaration : public Symbol {
     FunctionDeclaration(int offset, Modifiers modifiers, StringFragment name,
                         std::vector<const Variable*> parameters, const Type& returnType)
     : INHERITED(offset, kFunctionDeclaration_Kind, std::move(name))
     , fDefined(false)
     , fBuiltin(false)
     , fModifiers(modifiers)
     , fParameters(std::move(parameters))
     , fReturnType(returnType) {}
 
     String description() const override {
         String result = fReturnType.description() + " " + fName + "(";
         String separator;
         for (auto p : fParameters) {
             result += separator;
             separator = ", ";
             result += p->description();
         }
         result += ")";
         return result;
     }
 
     bool matches(const FunctionDeclaration& f) const {
         if (fName != f.fName) {
             return false;
         }
         if (fParameters.size() != f.fParameters.size()) {
             return false;
         }
         for (size_t i = 0; i < fParameters.size(); i++) {
             if (fParameters[i]->fType != f.fParameters[i]->fType) {
                 return false;
             }
         }
         return true;
     }
 
     /**
      * Determine the effective types of this function's parameters and return value when called with
      * the given arguments. This is relevant for functions with generic parameter types, where this
      * will collapse the generic types down into specific concrete types.
      *
      * Returns true if it was able to select a concrete set of types for the generic function, false
      * if there is no possible way this can match the argument types. Note that even a true return
      * does not guarantee that the function can be successfully called with those arguments, merely
      * indicates that an attempt should be made. If false is returned, the state of
      * outParameterTypes and outReturnType are undefined.
      */
     bool determineFinalTypes(const std::vector<std::unique_ptr<Expression>>& arguments,
                              std::vector<const Type*>* outParameterTypes,
                              const Type** outReturnType) const {
         SkASSERT(arguments.size() == fParameters.size());
         int genericIndex = -1;
         for (size_t i = 0; i < arguments.size(); i++) {
             if (fParameters[i]->fType.kind() == Type::kGeneric_Kind) {
                 std::vector<const Type*> types = fParameters[i]->fType.coercibleTypes();
                 if (genericIndex == -1) {
                     for (size_t j = 0; j < types.size(); j++) {
                         if (arguments[i]->fType.canCoerceTo(*types[j])) {
                             genericIndex = j;
                             break;
                         }
                     }
                     if (genericIndex == -1) {
                         return false;
                     }
                 }
                 outParameterTypes->push_back(types[genericIndex]);
             } else {
                 outParameterTypes->push_back(&fParameters[i]->fType);
             }
         }
         if (fReturnType.kind() == Type::kGeneric_Kind) {
-            SkASSERT(genericIndex != -1);
+            if (genericIndex == -1) {
+                return false;
+            }
             *outReturnType = fReturnType.coercibleTypes()[genericIndex];
         } else {
             *outReturnType = &fReturnType;
         }
         return true;
     }
 
     mutable bool fDefined;
     bool fBuiltin;
     Modifiers fModifiers;
     const std::vector<const Variable*> fParameters;
     const Type& fReturnType;
 
     typedef Symbol INHERITED;
 };
 
 } // namespace
 
 #endif
