commit 1e1bdcc693086f89bfcfe79173e98bc9ae97dde3
Author: asraa <asraa@google.com>
Date:   Fri May 15 12:29:02 2020 -0400

    [fuzz] misc HCM fuzz bugs (#11169)
    
    Fixes two minor HCM fuzz bugs
    
    Signed-off-by: Asra Ali <asraa@google.com>

diff --git a/test/common/http/conn_manager_impl_corpus/clusterfuzz-testcase-failed-dispatch b/test/common/http/conn_manager_impl_corpus/clusterfuzz-testcase-failed-dispatch
new file mode 100644
index 0000000000..485481def1
--- /dev/null
+++ b/test/common/http/conn_manager_impl_corpus/clusterfuzz-testcase-failed-dispatch
@@ -0,0 +1,294 @@
+actions {
+}
+actions {
+  new_stream {
+    request_headers {
+      headers {
+        key: ":scheme"
+        value: "t"
+      }
+      headers {
+        key: ":method"
+        value: "GET"
+      }
+      headers {
+        key: "blah"
+        value: "nosniff"
+      }
+      headers {
+        key: "blah"
+        value: "nosniff"
+      }
+      headers {
+        key: "\'"
+      }
+      headers {
+        key: ":path"
+        value: "/"
+      }
+      headers {
+        key: ":authority"
+        value: "foo.com"
+      }
+    }
+  }
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+  stream_action {
+    stream_id: 1634017305
+    request {
+      trailers {
+        headers {
+          headers {
+            key: "&"
+          }
+        }
+      }
+    }
+  }
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+  stream_action {
+    stream_id: 1073741824
+  }
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+  new_stream {
+    end_stream: true
+  }
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+  stream_action {
+    stream_id: 1073741824
+  }
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+}
+actions {
+  new_stream {
+    end_stream: true
+  }
+}
+actions {
+  new_stream {
+    request_headers {
+      headers {
+        key: ":scheme"
+        value: "\'"
+      }
+      headers {
+        key: ":method"
+        value: "GOT"
+      }
+      headers {
+        key: ":path"
+        value: "/"
+      }
+      headers {
+        key: ":authority"
+        value: "foo.com"
+      }
+    }
+    end_stream: true
+  }
+}
+actions {
+}
+actions {
+}
+actions {
+  new_stream {
+    request_headers {
+      headers {
+        key: ":scheme"
+        value: "t"
+      }
+      headers {
+        key: ":method"
+        value: "GET"
+      }
+      headers {
+        key: "blah"
+        value: "nosniff"
+      }
+      headers {
+        key: "blah"
+        value: "nosniff"
+      }
+      headers {
+        key: "\'"
+      }
+      headers {
+        key: ":path"
+        value: "/"
+      }
+      headers {
+        key: "/"
+        value: "foo.com"
+      }
+    }
+  }
+}
+actions {
+  new_stream {
+    end_stream: true
+  }
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+  stream_action {
+    request {
+      throw_decoder_exception {
+      }
+    }
+  }
+}
+actions {
+  stream_action {
+    request {
+      data {
+        status: DATA_STOP_ITERATION_NO_BUFFER
+      }
+    }
+  }
+}
+actions {
+  new_stream {
+    request_headers {
+      headers {
+        key: "\'"
+      }
+    }
+  }
+}
+actions {
+  stream_action {
+    stream_id: 1073741824
+  }
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+}
+actions {
+  new_stream {
+    end_stream: true
+  }
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+  new_stream {
+    request_headers {
+      headers {
+        key: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
+      }
+    }
+  }
+}
+actions {
+  stream_action {
+    request {
+      data {
+        decoder_filter_callback_action {
+          add_decoded_data {
+            size: 262144
+          }
+        }
+      }
+    }
+  }
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+}
+actions {
+  new_stream {
+    request_headers {
+      headers {
+        key: ":scheme"
+        value: "t"
+      }
+      headers {
+        key: ":method"
+        value: "GET"
+      }
+      headers {
+        key: "blah"
+        value: "nosniff"
+      }
+      headers {
+        key: "blah"
+        value: "nosniff"
+      }
+      headers {
+        key: "\'"
+      }
+      headers {
+        key: ":path"
+        value: "/"
+      }
+      headers {
+        key: ":authority"
+        value: "foo.com"
+      }
+    }
+  }
+}
+actions {
+  new_stream {
+    request_headers {
+      headers {
+        key: "&"
+      }
+    }
+  }
+}
+actions {
+  stream_action {
+    stream_id: 4294967295
+  }
+}
+actions {
+  stream_action {
+    stream_id: 4
+  }
+}
\ No newline at end of file
diff --git a/test/common/http/conn_manager_impl_corpus/clusterfuzz-testcase-invalidhost b/test/common/http/conn_manager_impl_corpus/clusterfuzz-testcase-invalidhost
new file mode 100644
index 0000000000..c6ab3140f0
--- /dev/null
+++ b/test/common/http/conn_manager_impl_corpus/clusterfuzz-testcase-invalidhost
@@ -0,0 +1,108 @@
+actions {
+  stream_action {
+    response {
+      data: 2683
+    }
+  }
+}
+actions {
+  new_stream {
+    request_headers {
+      headers {
+        key: ":scheme"
+        value: "t"
+      }
+      headers {
+        key: ":method"
+        value: "GET"
+      }
+      headers {
+        key: "blah"
+        value: "nosniff"
+      }
+      headers {
+        key: "blah"
+        value: "nosniff"
+      }
+      headers {
+        key: "\'"
+      }
+      headers {
+        key: ":path"
+        value: "/"
+      }
+      headers {
+        key: ":authority"
+        value: "fojdbar1"
+      }
+    }
+    end_stream: true
+  }
+}
+actions {
+}
+actions {
+  new_stream {
+    end_stream: true
+    status: HEADER_STOP_ALL_ITERATION_AND_WATERMARK
+  }
+}
+actions {
+  new_stream {
+    end_stream: true
+  }
+}
+actions {
+  stream_action {
+    stream_id: 721420288
+  }
+}
+actions {
+  stream_action {
+    stream_id: 1024
+  }
+}
+actions {
+  stream_action {
+    request {
+      trailers {
+        status: TRAILER_STOP_ITERATION
+      }
+    }
+  }
+}
+actions {
+  new_stream {
+    end_stream: true
+  }
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+}
+actions {
+}
+actions {
+  new_stream {
+  }
+}
+actions {
+  new_stream {
+  }
+}
\ No newline at end of file
diff --git a/test/common/http/conn_manager_impl_fuzz.proto b/test/common/http/conn_manager_impl_fuzz.proto
index 5cc690eb83..58a7d8ba0d 100644
--- a/test/common/http/conn_manager_impl_fuzz.proto
+++ b/test/common/http/conn_manager_impl_fuzz.proto
@@ -48,22 +48,24 @@ message DecoderFilterCallbackAction {
 message RequestAction {
   message DataAction {
     uint32 size = 1;
     bool end_stream = 2;
     DataStatus status = 3;
     DecoderFilterCallbackAction decoder_filter_callback_action = 4;
   }
   message TrailerAction {
     test.fuzz.Headers headers = 1;
     TrailerStatus status = 2;
     DecoderFilterCallbackAction decoder_filter_callback_action = 3;
   }
   oneof request_action_selector {
     DataAction data = 1;
     TrailerAction trailers = 2;
     google.protobuf.Empty continue_decoding = 3;
-    google.protobuf.Empty throw_decoder_exception = 4;
+    // Dispatch no longer throws, but rather returns an error status.
+    google.protobuf.Empty throw_decoder_exception = 4 [deprecated = true];
+    google.protobuf.Empty return_decoder_error = 5;
     // TODO(htuch): Model and fuzz watermark events.
   }
 }
 
 // TODO(htuch): Model and fuzz encoder filter buffering/resumption and different status returns.
diff --git a/test/common/http/conn_manager_impl_fuzz_test.cc b/test/common/http/conn_manager_impl_fuzz_test.cc
index de381823f7..7e503275e1 100644
--- a/test/common/http/conn_manager_impl_fuzz_test.cc
+++ b/test/common/http/conn_manager_impl_fuzz_test.cc
@@ -211,269 +211,271 @@ class FuzzStream {
 public:
   // We track stream state here to prevent illegal operations, e.g. applying an
   // encodeData() to the codec after encodeTrailers(). This is necessary to
   // maintain the preconditions for operations on the codec at the API level. Of
   // course, it's the codecs must be robust to wire-level violations. We
   // explore these violations via MutateAction and SwapAction at the connection
   // buffer level.
   enum class StreamState { PendingHeaders, PendingDataOrTrailers, Closed };
 
   FuzzStream(ConnectionManagerImpl& conn_manager, FuzzConfig& config,
              const HeaderMap& request_headers,
              test::common::http::HeaderStatus decode_header_status, bool end_stream)
       : conn_manager_(conn_manager), config_(config) {
     config_.newStream();
     request_state_ = end_stream ? StreamState::Closed : StreamState::PendingDataOrTrailers;
     response_state_ = StreamState::PendingHeaders;
     decoder_filter_ = config.decoder_filter_;
     encoder_filter_ = config.encoder_filter_;
     EXPECT_CALL(*config_.codec_, dispatch(_))
         .WillOnce(InvokeWithoutArgs([this, &request_headers, end_stream] {
           decoder_ = &conn_manager_.newStream(encoder_);
           auto headers = std::make_unique<TestRequestHeaderMapImpl>(request_headers);
           if (headers->Method() == nullptr) {
             headers->setReferenceKey(Headers::get().Method, "GET");
           }
           if (headers->Host() != nullptr &&
               !HeaderUtility::authorityIsValid(headers->Host()->value().getStringView())) {
             // Sanitize host header so we don't fail at ASSERTs that verify header sanity checks
             // which should have been performed by the codec.
             headers->setHost(
                 Fuzz::replaceInvalidHostCharacters(headers->Host()->value().getStringView()));
           }
           // If sendLocalReply is called:
           ON_CALL(encoder_, encodeHeaders(_, true))
               .WillByDefault(Invoke([this](const ResponseHeaderMap&, bool end_stream) -> void {
                 response_state_ =
                     end_stream ? StreamState::Closed : StreamState::PendingDataOrTrailers;
               }));
           decoder_->decodeHeaders(std::move(headers), end_stream);
           return Http::okStatus();
         }));
     ON_CALL(*decoder_filter_, decodeHeaders(_, _))
         .WillByDefault(
             InvokeWithoutArgs([this, decode_header_status]() -> Http::FilterHeadersStatus {
               header_status_ = fromHeaderStatus(decode_header_status);
               return *header_status_;
             }));
     fakeOnData();
     FUZZ_ASSERT(testing::Mock::VerifyAndClearExpectations(config_.codec_));
   }
 
   void fakeOnData() {
     Buffer::OwnedImpl fake_input;
     conn_manager_.onData(fake_input, false);
   }
 
   Http::FilterHeadersStatus fromHeaderStatus(test::common::http::HeaderStatus status) {
     switch (status) {
     case test::common::http::HeaderStatus::HEADER_CONTINUE:
       return Http::FilterHeadersStatus::Continue;
     case test::common::http::HeaderStatus::HEADER_STOP_ITERATION:
       return Http::FilterHeadersStatus::StopIteration;
     case test::common::http::HeaderStatus::HEADER_CONTINUE_AND_END_STREAM:
       return Http::FilterHeadersStatus::ContinueAndEndStream;
     case test::common::http::HeaderStatus::HEADER_STOP_ALL_ITERATION_AND_BUFFER:
       return Http::FilterHeadersStatus::StopAllIterationAndBuffer;
     case test::common::http::HeaderStatus::HEADER_STOP_ALL_ITERATION_AND_WATERMARK:
       return Http::FilterHeadersStatus::StopAllIterationAndWatermark;
     default:
       return Http::FilterHeadersStatus::Continue;
     }
   }
 
   Http::FilterDataStatus fromDataStatus(test::common::http::DataStatus status) {
     switch (status) {
     case test::common::http::DataStatus::DATA_CONTINUE:
       return Http::FilterDataStatus::Continue;
     case test::common::http::DataStatus::DATA_STOP_ITERATION_AND_BUFFER:
       return Http::FilterDataStatus::StopIterationAndBuffer;
     case test::common::http::DataStatus::DATA_STOP_ITERATION_AND_WATERMARK:
       return Http::FilterDataStatus::StopIterationAndWatermark;
     case test::common::http::DataStatus::DATA_STOP_ITERATION_NO_BUFFER:
       return Http::FilterDataStatus::StopIterationNoBuffer;
     default:
       return Http::FilterDataStatus::Continue;
     }
   }
 
   Http::FilterTrailersStatus fromTrailerStatus(test::common::http::TrailerStatus status) {
     switch (status) {
     case test::common::http::TrailerStatus::TRAILER_CONTINUE:
       return Http::FilterTrailersStatus::Continue;
     case test::common::http::TrailerStatus::TRAILER_STOP_ITERATION:
       return Http::FilterTrailersStatus::StopIteration;
     default:
       return Http::FilterTrailersStatus::Continue;
     }
   }
 
   void decoderFilterCallbackAction(
       const test::common::http::DecoderFilterCallbackAction& decoder_filter_callback_action) {
     switch (decoder_filter_callback_action.decoder_filter_callback_action_selector_case()) {
     case test::common::http::DecoderFilterCallbackAction::kAddDecodedData: {
       if (request_state_ == StreamState::PendingDataOrTrailers) {
         Buffer::OwnedImpl buf(std::string(
             decoder_filter_callback_action.add_decoded_data().size() % (1024 * 1024), 'a'));
         decoder_filter_->callbacks_->addDecodedData(
             buf, decoder_filter_callback_action.add_decoded_data().streaming());
       }
       break;
     }
     default:
       // Maybe nothing is set?
       break;
     }
   }
 
   void requestAction(StreamState& state, const test::common::http::RequestAction& request_action) {
     switch (request_action.request_action_selector_case()) {
     case test::common::http::RequestAction::kData: {
       if (state == StreamState::PendingDataOrTrailers) {
         const auto& data_action = request_action.data();
         ON_CALL(*decoder_filter_, decodeData(_, _))
             .WillByDefault(InvokeWithoutArgs([this, &data_action]() -> Http::FilterDataStatus {
               if (data_action.has_decoder_filter_callback_action()) {
                 decoderFilterCallbackAction(data_action.decoder_filter_callback_action());
               }
               data_status_ = fromDataStatus(data_action.status());
               return *data_status_;
             }));
         EXPECT_CALL(*config_.codec_, dispatch(_)).WillOnce(InvokeWithoutArgs([this, &data_action] {
           Buffer::OwnedImpl buf(std::string(data_action.size() % (1024 * 1024), 'a'));
           decoder_->decodeData(buf, data_action.end_stream());
           return Http::okStatus();
         }));
         fakeOnData();
         FUZZ_ASSERT(testing::Mock::VerifyAndClearExpectations(config_.codec_));
         state = data_action.end_stream() ? StreamState::Closed : StreamState::PendingDataOrTrailers;
       }
       break;
     }
     case test::common::http::RequestAction::kTrailers: {
       if (state == StreamState::PendingDataOrTrailers) {
         const auto& trailers_action = request_action.trailers();
         ON_CALL(*decoder_filter_, decodeTrailers(_))
             .WillByDefault(
                 InvokeWithoutArgs([this, &trailers_action]() -> Http::FilterTrailersStatus {
                   if (trailers_action.has_decoder_filter_callback_action()) {
                     decoderFilterCallbackAction(trailers_action.decoder_filter_callback_action());
                   }
                   return fromTrailerStatus(trailers_action.status());
                 }));
         EXPECT_CALL(*config_.codec_, dispatch(_))
             .WillOnce(InvokeWithoutArgs([this, &trailers_action] {
               decoder_->decodeTrailers(std::make_unique<TestRequestTrailerMapImpl>(
                   Fuzz::fromHeaders<TestRequestTrailerMapImpl>(trailers_action.headers())));
               return Http::okStatus();
             }));
         fakeOnData();
         FUZZ_ASSERT(testing::Mock::VerifyAndClearExpectations(config_.codec_));
         state = StreamState::Closed;
       }
       break;
     }
     case test::common::http::RequestAction::kContinueDecoding: {
       if (header_status_ == FilterHeadersStatus::StopAllIterationAndBuffer ||
           header_status_ == FilterHeadersStatus::StopAllIterationAndWatermark ||
           (header_status_ == FilterHeadersStatus::StopIteration &&
            (data_status_ == FilterDataStatus::StopIterationAndBuffer ||
             data_status_ == FilterDataStatus::StopIterationAndWatermark ||
             data_status_ == FilterDataStatus::StopIterationNoBuffer))) {
         decoder_filter_->callbacks_->continueDecoding();
       }
       break;
     }
-    case test::common::http::RequestAction::kThrowDecoderException: {
+    case test::common::http::RequestAction::kThrowDecoderException:
+    // Dispatch no longer throws, execute subsequent kReturnDecoderError case.
+    case test::common::http::RequestAction::kReturnDecoderError: {
       if (state == StreamState::PendingDataOrTrailers) {
         EXPECT_CALL(*config_.codec_, dispatch(_))
-            .WillOnce(testing::Throw(CodecProtocolException("blah")));
+            .WillOnce(testing::Return(codecProtocolError("blah")));
         fakeOnData();
         FUZZ_ASSERT(testing::Mock::VerifyAndClearExpectations(config_.codec_));
         state = StreamState::Closed;
       }
       break;
     }
     default:
       // Maybe nothing is set or not a request action?
       break;
     }
   }
 
   void responseAction(StreamState& state,
                       const test::common::http::ResponseAction& response_action) {
     const bool end_stream = response_action.end_stream();
     switch (response_action.response_action_selector_case()) {
     case test::common::http::ResponseAction::kContinueHeaders: {
       if (state == StreamState::PendingHeaders) {
         auto headers = std::make_unique<TestResponseHeaderMapImpl>(
             Fuzz::fromHeaders<TestResponseHeaderMapImpl>(response_action.continue_headers()));
         headers->setReferenceKey(Headers::get().Status, "100");
         decoder_filter_->callbacks_->encode100ContinueHeaders(std::move(headers));
       }
       break;
     }
     case test::common::http::ResponseAction::kHeaders: {
       if (state == StreamState::PendingHeaders) {
         auto headers = std::make_unique<TestResponseHeaderMapImpl>(
             Fuzz::fromHeaders<TestResponseHeaderMapImpl>(response_action.headers()));
         // The client codec will ensure we always have a valid :status.
         // Similarly, local replies should always contain this.
         try {
           Utility::getResponseStatus(*headers);
         } catch (const CodecClientException&) {
           headers->setReferenceKey(Headers::get().Status, "200");
         }
         decoder_filter_->callbacks_->encodeHeaders(std::move(headers), end_stream);
         state = end_stream ? StreamState::Closed : StreamState::PendingDataOrTrailers;
       }
       break;
     }
     case test::common::http::ResponseAction::kData: {
       if (state == StreamState::PendingDataOrTrailers) {
         Buffer::OwnedImpl buf(std::string(response_action.data() % (1024 * 1024), 'a'));
         decoder_filter_->callbacks_->encodeData(buf, end_stream);
         state = end_stream ? StreamState::Closed : StreamState::PendingDataOrTrailers;
       }
       break;
     }
     case test::common::http::ResponseAction::kTrailers: {
       if (state == StreamState::PendingDataOrTrailers) {
         decoder_filter_->callbacks_->encodeTrailers(std::make_unique<TestResponseTrailerMapImpl>(
             Fuzz::fromHeaders<TestResponseTrailerMapImpl>(response_action.trailers())));
         state = StreamState::Closed;
       }
       break;
     }
     default:
       // Maybe nothing is set?
       break;
     }
   }
 
   void streamAction(const test::common::http::StreamAction& stream_action) {
     switch (stream_action.stream_action_selector_case()) {
     case test::common::http::StreamAction::kRequest: {
       requestAction(request_state_, stream_action.request());
       break;
     }
     case test::common::http::StreamAction::kResponse: {
       responseAction(response_state_, stream_action.response());
       break;
     }
     default:
       // Maybe nothing is set?
       break;
     }
   }
 
   ConnectionManagerImpl& conn_manager_;
   FuzzConfig& config_;
   RequestDecoder* decoder_{};
   NiceMock<MockResponseEncoder> encoder_;
   MockStreamDecoderFilter* decoder_filter_{};
   MockStreamEncoderFilter* encoder_filter_{};
   StreamState request_state_;
   StreamState response_state_;
   absl::optional<Http::FilterHeadersStatus> header_status_;
   absl::optional<Http::FilterDataStatus> data_status_;
 };
diff --git a/test/fuzz/utility.h b/test/fuzz/utility.h
index bb9f6020a0..b0a16930fb 100644
--- a/test/fuzz/utility.h
+++ b/test/fuzz/utility.h
@@ -50,13 +50,13 @@ inline std::string replaceInvalidCharacters(absl::string_view string) {
 // Replace invalid host characters.
 inline std::string replaceInvalidHostCharacters(absl::string_view string) {
   std::string filtered;
   filtered.reserve(string.length());
-  for (const uint8_t* c = reinterpret_cast<const uint8_t*>(string.data()); *c; ++c) {
-    if (nghttp2_check_authority(c, 1)) {
-      filtered.push_back(*c);
+  for (const char& c : string) {
+    if (nghttp2_check_authority(reinterpret_cast<const uint8_t*>(&c), 1)) {
+      filtered.push_back(c);
     } else {
       filtered.push_back('0');
     }
   }
   return filtered;
 }
