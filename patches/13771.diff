commit 229d3e8f5cc3974c46a017cbdb72a14d6223e5d5
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Sat Mar 16 02:48:43 2019 +0800

    Bug 700821: Fix mixup of skip and pad when unpacking images.
    
    This is a recently introduced bug, stemming from a review rebase
    mistake of c1d0880690bab653b455113e09d6be86fb54de33
    Thanks to oss-fuzz for reporting.

diff --git a/source/fitz/draw-unpack.c b/source/fitz/draw-unpack.c
index d06689c53..6bc0eb402 100644
--- a/source/fitz/draw-unpack.c
+++ b/source/fitz/draw-unpack.c
@@ -160,118 +160,118 @@ void
 fz_unpack_tile(fz_context *ctx, fz_pixmap *dst, unsigned char *src, int n, int depth, size_t stride, int scale)
 {
 	unsigned char *sp = src;
 	unsigned char *dp = dst->samples;
 	fz_unpack_line_fn unpack_line = NULL;
 	int pad, y, skip;
 	int w = dst->w;
 	int h = dst->h;
 
 	pad = 0;
 	skip = 0;
 	if (dst->n > n)
 		pad = 255;
 	if (dst->n < n)
 	{
 		skip = n - dst->n;
 		n = dst->n;
 	}
 
 	if (depth == 1)
 		init_get1_tables();
 
 	if (scale == 0)
 	{
 		switch (depth)
 		{
 		case 1: scale = 255; break;
 		case 2: scale = 85; break;
 		case 4: scale = 17; break;
 		}
 	}
 
 	if (n == 1 && depth == 1 && scale == 1 && !pad && !skip)
 		unpack_line = fz_unpack_mono_line_unscaled;
 	else if (n == 1 && depth == 1 && scale == 255 && !pad && !skip)
 		unpack_line = fz_unpack_mono_line_scaled;
 	else if (n == 1 && depth == 1 && scale == 1 && pad && !skip)
 		unpack_line = fz_unpack_mono_line_unscaled_with_padding;
 	else if (n == 1 && depth == 1 && scale == 255 && pad && !skip)
 		unpack_line = fz_unpack_mono_line_scaled_with_padding;
 	else if (depth == 8 && !pad && !skip)
 		unpack_line = fz_unpack_line;
 	else if (depth == 8 && pad && !skip)
 		unpack_line = fz_unpack_line_with_padding;
 
 	if (unpack_line)
 	{
 		for (y = 0; y < h; y++, sp += stride, dp += dst->stride)
 			unpack_line(dp, sp, w, n);
 	}
 	else if (depth == 1 || depth == 2 || depth == 4 || depth == 8 || depth  == 16 || depth == 24 || depth == 32)
 	{
 		for (y = 0; y < h; y++, sp += stride, dp += dst->stride)
 		{
 			unsigned char *p = dp;
 			int b = 0;
 			int x, k;
 
 			for (x = 0; x < w; x++)
 			{
 				for (k = 0; k < n; k++)
 				{
 					switch (depth)
 					{
 					case 1: *p++ = get1(sp, b) * scale; break;
 					case 2: *p++ = get2(sp, b) * scale; break;
 					case 4: *p++ = get4(sp, b) * scale; break;
 					case 8: *p++ = get8(sp, b); break;
 					case 16: *p++ = get16(sp, b); break;
 					case 24: *p++ = get24(sp, b); break;
 					case 32: *p++ = get32(sp, b); break;
 					}
 					b++;
 				}
 				b += skip;
 				if (pad)
 					*p++ = 255;
 			}
 		}
 	}
 	else if (depth > 0 && depth <= 8 * sizeof(int))
 	{
 		fz_stream *stm;
 		int x, k;
 		int skipbits = 8 * stride - w * n * depth;
 
 		stm = fz_open_memory(ctx, sp, h * stride);
 		fz_try(ctx)
 		{
 			for (y = 0; y < h; y++)
 			{
 				for (x = 0; x < w; x++)
 				{
 					for (k = 0; k < n; k++)
 					{
 						if (depth <= 8)
 							*dp++ = fz_read_bits(ctx, stm, depth);
 						else
 							*dp++ = fz_read_bits(ctx, stm, depth) >> (depth - 8);
 					}
-					if (skip == -1)
+					if (pad)
 						*dp++ = 255;
 				}
 
-				dp += dst->stride - w * (n + (skip == -1));
+				dp += dst->stride - w * (n + (pad > 0));
 				(void) fz_read_bits(ctx, stm, skipbits);
 			}
 		}
 		fz_always(ctx)
 			fz_drop_stream(ctx, stm);
 		fz_catch(ctx)
 			fz_rethrow(ctx);
 	}
 	else
 		fz_throw(ctx, FZ_ERROR_GENERIC, "cannot unpack tile with %d bits per component", depth);
 }
 
 /* Apply decode array */
