commit cbaaf7fd814793c204398519821b4ef8139a23b4
Author: Caol√°n McNamara <caolanm@redhat.com>
Date:   Mon Oct 17 20:11:08 2022 +0100

    ofz#52486 if we restore to oldi and orig str, surely len needs to be reset

diff --git a/src/hunspell/affixmgr.cxx b/src/hunspell/affixmgr.cxx
index 0e132ad..c1d21fe 100644
--- a/src/hunspell/affixmgr.cxx
+++ b/src/hunspell/affixmgr.cxx
@@ -1567,609 +1567,612 @@ void AffixMgr::setcminmax(int* cmin, int* cmax, const char* word, int len) {
 // check if compound word is correctly spelled
 // hu_mov_rule = spec. Hungarian rule (XXX)
 struct hentry* AffixMgr::compound_check(const std::string& word,
                                         short wordnum,
                                         short numsyllable,
                                         short maxwordnum,
                                         short wnum,
                                         hentry** words = NULL,
                                         hentry** rwords = NULL,
                                         char hu_mov_rule = 0,
                                         char is_sug = 0,
                                         int* info = NULL) {
   short oldnumsyllable, oldnumsyllable2, oldwordnum, oldwordnum2;
   hentry *rv = NULL, *rv_first;
   std::string st;
   char ch = '\0', affixed;
   int cmin, cmax, striple = 0, soldi = 0, oldcmin = 0, oldcmax = 0, oldlen = 0, checkedstriple = 0;
   hentry** oldwords = words;
   size_t scpd = 0, len = word.size();
 
   int checked_prefix;
 
   // add a time limit to handle possible
   // combinatorical explosion of the overlapping words
 
   HUNSPELL_THREAD_LOCAL clock_t timelimit;
 
   if (wordnum == 0) {
       // get the start time, seeing as we're reusing this set to 0
       // to flag timeout, use clock() + 1 to avoid start clock()
       // of 0 as being a timeout
       timelimit = clock() + 1;
   }
   else if (timelimit != 0 && (clock() > timelimit + TIMELIMIT)) {
       timelimit = 0;
   }
 
   setcminmax(&cmin, &cmax, word.c_str(), len);
 
   st.assign(word);
 
   for (int i = cmin; i < cmax; ++i) {
     // go to end of the UTF-8 character
     if (utf8) {
       for (; (st[i] & 0xc0) == 0x80; i++)
         ;
       if (i >= cmax)
         return NULL;
     }
 
     words = oldwords;
     int onlycpdrule = (words) ? 1 : 0;
 
     do {  // onlycpdrule loop
 
       oldnumsyllable = numsyllable;
       oldwordnum = wordnum;
       checked_prefix = 0;
 
       do {  // simplified checkcompoundpattern loop
 
         if (timelimit == 0)
           return 0;
 
         if (scpd > 0) {
           for (; scpd <= checkcpdtable.size() &&
                  (checkcpdtable[scpd - 1].pattern3.empty() ||
                   i > word.size() ||
                   word.compare(i, checkcpdtable[scpd - 1].pattern3.size(), checkcpdtable[scpd - 1].pattern3) != 0);
                scpd++)
             ;
 
           if (scpd > checkcpdtable.size())
             break;  // break simplified checkcompoundpattern loop
           st.replace(i, std::string::npos, checkcpdtable[scpd - 1].pattern);
           soldi = i;
           i += checkcpdtable[scpd - 1].pattern.size();
           st.replace(i, std::string::npos, checkcpdtable[scpd - 1].pattern2);
           st.replace(i + checkcpdtable[scpd - 1].pattern2.size(), std::string::npos,
                  word.substr(soldi + checkcpdtable[scpd - 1].pattern3.size()));
 
           oldlen = len;
           len += checkcpdtable[scpd - 1].pattern.size() +
                  checkcpdtable[scpd - 1].pattern2.size() -
                  checkcpdtable[scpd - 1].pattern3.size();
           oldcmin = cmin;
           oldcmax = cmax;
           setcminmax(&cmin, &cmax, st.c_str(), len);
 
           cmax = len - cpdmin + 1;
         }
 
 	if (i > st.size())
 	    return NULL;
 
         ch = st[i];
         st[i] = '\0';
 
         sfx = NULL;
         pfx = NULL;
 
         // FIRST WORD
 
         affixed = 1;
         rv = lookup(st.c_str(), i);  // perhaps without prefix
 
         // forbid dictionary stems with COMPOUNDFORBIDFLAG in
         // compound words, overriding the effect of COMPOUNDPERMITFLAG
         if ((rv) && compoundforbidflag &&
                 TESTAFF(rv->astr, compoundforbidflag, rv->alen) && !hu_mov_rule)
             continue;
 
         // search homonym with compound flag
         while ((rv) && !hu_mov_rule &&
                ((needaffix && TESTAFF(rv->astr, needaffix, rv->alen)) ||
                 !((compoundflag && !words && !onlycpdrule &&
                    TESTAFF(rv->astr, compoundflag, rv->alen)) ||
                   (compoundbegin && !wordnum && !onlycpdrule &&
                    TESTAFF(rv->astr, compoundbegin, rv->alen)) ||
                   (compoundmiddle && wordnum && !words && !onlycpdrule &&
                    TESTAFF(rv->astr, compoundmiddle, rv->alen)) ||
                   (!defcpdtable.empty() && onlycpdrule &&
                    ((!words && !wordnum &&
                      defcpd_check(&words, wnum, rv, rwords, 0)) ||
                     (words &&
                      defcpd_check(&words, wnum, rv, rwords, 0))))) ||
                 (scpd != 0 && checkcpdtable[scpd - 1].cond != FLAG_NULL &&
                  !TESTAFF(rv->astr, checkcpdtable[scpd - 1].cond, rv->alen)))) {
           rv = rv->next_homonym;
         }
 
         if (rv)
           affixed = 0;
 
         if (!rv) {
           if (onlycpdrule)
             break;
           if (compoundflag &&
               !(rv = prefix_check(st, 0, i,
                                   hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN,
                                   compoundflag))) {
             if (((rv = suffix_check(
                       st, 0, i, 0, NULL, FLAG_NULL, compoundflag,
                       hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN)) ||
                  (compoundmoresuffixes &&
                   (rv = suffix_check_twosfx(st, 0, i, 0, NULL, compoundflag)))) &&
                 !hu_mov_rule && sfx->getCont() &&
                 ((compoundforbidflag &&
                   TESTAFF(sfx->getCont(), compoundforbidflag,
                           sfx->getContLen())) ||
                  (compoundend &&
                   TESTAFF(sfx->getCont(), compoundend, sfx->getContLen())))) {
               rv = NULL;
             }
           }
 
           if (rv ||
               (((wordnum == 0) && compoundbegin &&
                 ((rv = suffix_check(
                       st, 0, i, 0, NULL, FLAG_NULL, compoundbegin,
                       hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN)) ||
                  (compoundmoresuffixes &&
                   (rv = suffix_check_twosfx(
                        st, 0, i, 0, NULL,
                        compoundbegin))) ||  // twofold suffixes + compound
                  (rv = prefix_check(st, 0, i,
                                     hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN,
                                     compoundbegin)))) ||
                ((wordnum > 0) && compoundmiddle &&
                 ((rv = suffix_check(
                       st, 0, i, 0, NULL, FLAG_NULL, compoundmiddle,
                       hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN)) ||
                  (compoundmoresuffixes &&
                   (rv = suffix_check_twosfx(
                        st, 0, i, 0, NULL,
                        compoundmiddle))) ||  // twofold suffixes + compound
                  (rv = prefix_check(st, 0, i,
                                     hu_mov_rule ? IN_CPD_OTHER : IN_CPD_BEGIN,
                                     compoundmiddle))))))
             checked_prefix = 1;
           // else check forbiddenwords and needaffix
         } else if (rv->astr && (TESTAFF(rv->astr, forbiddenword, rv->alen) ||
                                 TESTAFF(rv->astr, needaffix, rv->alen) ||
                                 TESTAFF(rv->astr, ONLYUPCASEFLAG, rv->alen) ||
                                 (is_sug && nosuggest &&
                                  TESTAFF(rv->astr, nosuggest, rv->alen)))) {
           st[i] = ch;
           // continue;
           break;
         }
 
         // check non_compound flag in suffix and prefix
         if ((rv) && !hu_mov_rule &&
             ((pfx && pfx->getCont() &&
               TESTAFF(pfx->getCont(), compoundforbidflag, pfx->getContLen())) ||
              (sfx && sfx->getCont() &&
               TESTAFF(sfx->getCont(), compoundforbidflag,
                       sfx->getContLen())))) {
           rv = NULL;
         }
 
         // check compoundend flag in suffix and prefix
         if ((rv) && !checked_prefix && compoundend && !hu_mov_rule &&
             ((pfx && pfx->getCont() &&
               TESTAFF(pfx->getCont(), compoundend, pfx->getContLen())) ||
              (sfx && sfx->getCont() &&
               TESTAFF(sfx->getCont(), compoundend, sfx->getContLen())))) {
           rv = NULL;
         }
 
         // check compoundmiddle flag in suffix and prefix
         if ((rv) && !checked_prefix && (wordnum == 0) && compoundmiddle &&
             !hu_mov_rule &&
             ((pfx && pfx->getCont() &&
               TESTAFF(pfx->getCont(), compoundmiddle, pfx->getContLen())) ||
              (sfx && sfx->getCont() &&
               TESTAFF(sfx->getCont(), compoundmiddle, sfx->getContLen())))) {
           rv = NULL;
         }
 
         // check forbiddenwords
         if ((rv) && (rv->astr) &&
             (TESTAFF(rv->astr, forbiddenword, rv->alen) ||
              TESTAFF(rv->astr, ONLYUPCASEFLAG, rv->alen) ||
              (is_sug && nosuggest && TESTAFF(rv->astr, nosuggest, rv->alen)))) {
           return NULL;
         }
 
         // increment word number, if the second root has a compoundroot flag
         if ((rv) && compoundroot &&
             (TESTAFF(rv->astr, compoundroot, rv->alen))) {
           wordnum++;
         }
 
         // first word is acceptable in compound words?
         if (((rv) &&
              (checked_prefix || (words && words[wnum]) ||
               (compoundflag && TESTAFF(rv->astr, compoundflag, rv->alen)) ||
               ((oldwordnum == 0) && compoundbegin &&
                TESTAFF(rv->astr, compoundbegin, rv->alen)) ||
               ((oldwordnum > 0) && compoundmiddle &&
                TESTAFF(rv->astr, compoundmiddle, rv->alen))
 
               // LANG_hu section: spec. Hungarian rule
               || ((langnum == LANG_hu) && hu_mov_rule &&
                   (TESTAFF(
                        rv->astr, 'F',
                        rv->alen) ||  // XXX hardwired Hungarian dictionary codes
                    TESTAFF(rv->astr, 'G', rv->alen) ||
                    TESTAFF(rv->astr, 'H', rv->alen)))
               // END of LANG_hu section
               ) &&
              (
                  // test CHECKCOMPOUNDPATTERN conditions
                  scpd == 0 || checkcpdtable[scpd - 1].cond == FLAG_NULL ||
                  TESTAFF(rv->astr, checkcpdtable[scpd - 1].cond, rv->alen)) &&
              !((checkcompoundtriple && scpd == 0 &&
                 !words &&  // test triple letters
                 (word[i - 1] == word[i]) &&
                 (((i > 1) && (word[i - 1] == word[i - 2])) ||
                  ((word[i - 1] == word[i + 1]))  // may be word[i+1] == '\0'
                  )) ||
                (checkcompoundcase && scpd == 0 && !words &&
                 cpdcase_check(word, i))))
             // LANG_hu section: spec. Hungarian rule
             || ((!rv) && (langnum == LANG_hu) && hu_mov_rule &&
                 (rv = affix_check(st, 0, i)) &&
                 (sfx && sfx->getCont() &&
                  (  // XXX hardwired Hungarian dic. codes
                      TESTAFF(sfx->getCont(), (unsigned short)'x',
                              sfx->getContLen()) ||
                      TESTAFF(
                          sfx->getCont(), (unsigned short)'%',
                          sfx->getContLen()))))) {  // first word is ok condition
 
           // LANG_hu section: spec. Hungarian rule
           if (langnum == LANG_hu) {
             // calculate syllable number of the word
             numsyllable += get_syllable(st.substr(0, i));
             // + 1 word, if syllable number of the prefix > 1 (hungarian
             // convention)
             if (pfx && (get_syllable(pfx->getKey()) > 1))
               wordnum++;
           }
           // END of LANG_hu section
 
           // NEXT WORD(S)
           rv_first = rv;
           st[i] = ch;
 
           do {  // striple loop
 
             // check simplifiedtriple
             if (simplifiedtriple) {
               if (striple) {
                 checkedstriple = 1;
                 i--;  // check "fahrt" instead of "ahrt" in "Schiffahrt"
               } else if (i > 2 && i <= word.size() && word[i - 1] == word[i - 2])
                 striple = 1;
             }
 
             rv = lookup(st.c_str() + i, st.size() - i);  // perhaps without prefix
 
             // search homonym with compound flag
             while ((rv) &&
                    ((needaffix && TESTAFF(rv->astr, needaffix, rv->alen)) ||
                     !((compoundflag && !words &&
                        TESTAFF(rv->astr, compoundflag, rv->alen)) ||
                       (compoundend && !words &&
                        TESTAFF(rv->astr, compoundend, rv->alen)) ||
                       (!defcpdtable.empty() && words &&
                        defcpd_check(&words, wnum + 1, rv, NULL, 1))) ||
                     (scpd != 0 && checkcpdtable[scpd - 1].cond2 != FLAG_NULL &&
                      !TESTAFF(rv->astr, checkcpdtable[scpd - 1].cond2,
                               rv->alen)))) {
               rv = rv->next_homonym;
             }
 
             // check FORCEUCASE
             if (rv && forceucase &&
                 (TESTAFF(rv->astr, forceucase, rv->alen)) &&
                 !(info && *info & SPELL_ORIGCAP))
               rv = NULL;
 
             if (rv && words && words[wnum + 1])
               return rv_first;
 
             oldnumsyllable2 = numsyllable;
             oldwordnum2 = wordnum;
 
             // LANG_hu section: spec. Hungarian rule, XXX hardwired dictionary
             // code
             if ((rv) && (langnum == LANG_hu) &&
                 (TESTAFF(rv->astr, 'I', rv->alen)) &&
                 !(TESTAFF(rv->astr, 'J', rv->alen))) {
               numsyllable--;
             }
             // END of LANG_hu section
 
             // increment word number, if the second root has a compoundroot flag
             if ((rv) && (compoundroot) &&
                 (TESTAFF(rv->astr, compoundroot, rv->alen))) {
               wordnum++;
             }
 
             // check forbiddenwords
             if ((rv) && (rv->astr) &&
                 (TESTAFF(rv->astr, forbiddenword, rv->alen) ||
                  TESTAFF(rv->astr, ONLYUPCASEFLAG, rv->alen) ||
                  (is_sug && nosuggest &&
                   TESTAFF(rv->astr, nosuggest, rv->alen))))
               return NULL;
 
             // second word is acceptable, as a root?
             // hungarian conventions: compounding is acceptable,
             // when compound forms consist of 2 words, or if more,
             // then the syllable number of root words must be 6, or lesser.
 
             if ((rv) &&
                 ((compoundflag && TESTAFF(rv->astr, compoundflag, rv->alen)) ||
                  (compoundend && TESTAFF(rv->astr, compoundend, rv->alen))) &&
                 (((cpdwordmax == -1) || (wordnum + 1 < cpdwordmax)) ||
                  ((cpdmaxsyllable != 0) &&
                   (numsyllable + get_syllable(std::string(HENTRY_WORD(rv), rv->blen)) <=
                    cpdmaxsyllable))) &&
                 (
                     // test CHECKCOMPOUNDPATTERN
                     checkcpdtable.empty() || scpd != 0 ||
                     (i < word.size() && !cpdpat_check(word, i, rv_first, rv, 0))) &&
                 ((!checkcompounddup || (rv != rv_first)))
                 // test CHECKCOMPOUNDPATTERN conditions
                 &&
                 (scpd == 0 || checkcpdtable[scpd - 1].cond2 == FLAG_NULL ||
                  TESTAFF(rv->astr, checkcpdtable[scpd - 1].cond2, rv->alen))) {
               // forbid compound word, if it is a non-compound word with typical
               // fault
               if ((checkcompoundrep && cpdrep_check(word, len)) ||
                       cpdwordpair_check(word, len))
                 return NULL;
               return rv_first;
             }
 
             numsyllable = oldnumsyllable2;
             wordnum = oldwordnum2;
 
             // perhaps second word has prefix or/and suffix
             sfx = NULL;
             sfxflag = FLAG_NULL;
             rv = (compoundflag && !onlycpdrule && i < word.size())
                      ? affix_check(word, i, word.size() - i, compoundflag,
                                    IN_CPD_END)
                      : NULL;
             if (!rv && compoundend && !onlycpdrule) {
               sfx = NULL;
               pfx = NULL;
               if (i < word.size())
                 rv = affix_check(word, i, word.size() - i, compoundend, IN_CPD_END);
             }
 
             if (!rv && !defcpdtable.empty() && words) {
               if (i < word.size())
                 rv = affix_check(word, i, word.size() - i, 0, IN_CPD_END);
               if (rv && defcpd_check(&words, wnum + 1, rv, NULL, 1))
                 return rv_first;
               rv = NULL;
             }
 
             // test CHECKCOMPOUNDPATTERN conditions (allowed forms)
             if (rv &&
                 !(scpd == 0 || checkcpdtable[scpd - 1].cond2 == FLAG_NULL ||
                   TESTAFF(rv->astr, checkcpdtable[scpd - 1].cond2, rv->alen)))
               rv = NULL;
 
             // test CHECKCOMPOUNDPATTERN conditions (forbidden compounds)
             if (rv && !checkcpdtable.empty() && scpd == 0 &&
                 cpdpat_check(word, i, rv_first, rv, affixed))
               rv = NULL;
 
             // check non_compound flag in suffix and prefix
             if ((rv) && ((pfx && pfx->getCont() &&
                           TESTAFF(pfx->getCont(), compoundforbidflag,
                                   pfx->getContLen())) ||
                          (sfx && sfx->getCont() &&
                           TESTAFF(sfx->getCont(), compoundforbidflag,
                                   sfx->getContLen())))) {
               rv = NULL;
             }
 
             // check FORCEUCASE
             if (rv && forceucase &&
                 (TESTAFF(rv->astr, forceucase, rv->alen)) &&
                 !(info && *info & SPELL_ORIGCAP))
               rv = NULL;
 
             // check forbiddenwords
             if ((rv) && (rv->astr) &&
                 (TESTAFF(rv->astr, forbiddenword, rv->alen) ||
                  TESTAFF(rv->astr, ONLYUPCASEFLAG, rv->alen) ||
                  (is_sug && nosuggest &&
                   TESTAFF(rv->astr, nosuggest, rv->alen))))
               return NULL;
 
             // pfxappnd = prefix of word+i, or NULL
             // calculate syllable number of prefix.
             // hungarian convention: when syllable number of prefix is more,
             // than 1, the prefix+word counts as two words.
 
             if (langnum == LANG_hu) {
               if (i < word.size()) {
                 // calculate syllable number of the word
                 numsyllable += get_syllable(word.substr(i));
               }
 
               // - affix syllable num.
               // XXX only second suffix (inflections, not derivations)
               if (sfxappnd) {
                 std::string tmp(sfxappnd);
                 reverseword(tmp);
                 numsyllable -= short(get_syllable(tmp) + sfxextra);
               } else {
                 numsyllable -= short(sfxextra);
               }
 
               // + 1 word, if syllable number of the prefix > 1 (hungarian
               // convention)
               if (pfx && (get_syllable(pfx->getKey()) > 1))
                 wordnum++;
 
               // increment syllable num, if last word has a SYLLABLENUM flag
               // and the suffix is beginning `s'
 
               if (!cpdsyllablenum.empty()) {
                 switch (sfxflag) {
                   case 'c': {
                     numsyllable += 2;
                     break;
                   }
                   case 'J': {
                     numsyllable += 1;
                     break;
                   }
                   case 'I': {
                     if (rv && TESTAFF(rv->astr, 'J', rv->alen))
                       numsyllable += 1;
                     break;
                   }
                 }
               }
             }
 
             // increment word number, if the second word has a compoundroot flag
             if ((rv) && (compoundroot) &&
                 (TESTAFF(rv->astr, compoundroot, rv->alen))) {
               wordnum++;
             }
             // second word is acceptable, as a word with prefix or/and suffix?
             // hungarian conventions: compounding is acceptable,
             // when compound forms consist 2 word, otherwise
             // the syllable number of root words is 6, or lesser.
             if ((rv) &&
                 (((cpdwordmax == -1) || (wordnum + 1 < cpdwordmax)) ||
                  ((cpdmaxsyllable != 0) && (numsyllable <= cpdmaxsyllable))) &&
                 ((!checkcompounddup || (rv != rv_first)))) {
               // forbid compound word, if it is a non-compound word with typical
               // fault
               if ((checkcompoundrep && cpdrep_check(word, len)) ||
                       cpdwordpair_check(word, len))
                 return NULL;
               return rv_first;
             }
 
             numsyllable = oldnumsyllable2;
             wordnum = oldwordnum2;
 
             // perhaps second word is a compound word (recursive call)
             if (wordnum + 2 < maxwordnum) {
               rv = compound_check(st.substr(i), wordnum + 1,
                                   numsyllable, maxwordnum, wnum + 1, words, rwords, 0,
                                   is_sug, info);
 
               if (rv && !checkcpdtable.empty() &&
                   ((scpd == 0 &&
                     cpdpat_check(word, i, rv_first, rv, affixed)) ||
                    (scpd != 0 &&
                     !cpdpat_check(word, i, rv_first, rv, affixed))))
                 rv = NULL;
             } else {
               rv = NULL;
             }
             if (rv) {
               // forbid compound word, if it is a non-compound word with typical
               // fault, or a dictionary word pair
 
               if (cpdwordpair_check(word, len))
                   return NULL;
 
               if (checkcompoundrep || forbiddenword) {
 
                 if (checkcompoundrep && cpdrep_check(word, len))
                   return NULL;
 
                 // check first part
                 if (word.compare(i, rv->blen, rv->word, rv->blen) == 0) {
                   char r = st[i + rv->blen];
                   st[i + rv->blen] = '\0';
 
                   if ((checkcompoundrep && cpdrep_check(st, i + rv->blen)) ||
                       cpdwordpair_check(st, i + rv->blen)) {
                     st[ + i + rv->blen] = r;
                     continue;
                   }
 
                   if (forbiddenword) {
                     struct hentry* rv2 = lookup(word.c_str(), word.size());
                     if (!rv2)
                       rv2 = affix_check(word, 0, len);
                     if (rv2 && rv2->astr &&
                         TESTAFF(rv2->astr, forbiddenword, rv2->alen) &&
                         (strncmp(rv2->word, st.c_str(), i + rv->blen) == 0)) {
                       return NULL;
                     }
                   }
                   st[i + rv->blen] = r;
                 }
               }
               return rv_first;
             }
           } while (striple && !checkedstriple);  // end of striple loop
 
           if (checkedstriple) {
             i++;
             checkedstriple = 0;
             striple = 0;
           }
 
         }  // first word is ok condition
 
         if (soldi != 0) {
           i = soldi;
           soldi = 0;
           len = oldlen;
           cmin = oldcmin;
           cmax = oldcmax;
         }
         scpd++;
 
       } while (!onlycpdrule && simplifiedcpd &&
                scpd <= checkcpdtable.size());  // end of simplifiedcpd loop
 
       scpd = 0;
       wordnum = oldwordnum;
       numsyllable = oldnumsyllable;
 
       if (soldi != 0) {
         i = soldi;
         st.assign(word);  // XXX add more optim.
         soldi = 0;
+        len = oldlen;
+        cmin = oldcmin;
+        cmax = oldcmax;
       } else
         st[i] = ch;
 
     } while (!defcpdtable.empty() && oldwordnum == 0 &&
              onlycpdrule++ < 1);  // end of onlycpd loop
   }
 
   return NULL;
 }
 
 // check if compound word is correctly spelled
 // hu_mov_rule = spec. Hungarian rule (XXX)
