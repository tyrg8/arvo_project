commit dbd1d1ada6c133447e6e21d00512b70f20041984
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Wed May 31 22:21:11 2017 +0000

    GRIB / degrib: avoid heap-buffer-overflow read. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1989. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@38748 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/frmts/grib/degrib18/degrib/inventory.cpp b/gdal/frmts/grib/degrib18/degrib/inventory.cpp
index 099b065d76..c9bebd0588 100644
--- a/gdal/frmts/grib/degrib18/degrib/inventory.cpp
+++ b/gdal/frmts/grib/degrib18/degrib/inventory.cpp
@@ -453,358 +453,370 @@ static int GRIB2Inventory2to7 (sChar sectNum, DataSource &fp, sInt4 gribLen,
    if ((sectNum == 2) || (sectNum == 3)) {
       /* Jump past section (2 or 3). */
       sectNum = -1;
       if (GRIB2SectJump (fp, gribLen, &sectNum, &secLen) != 0) {
          errSprintf ("ERROR: Problems Jumping past section 2 || 3\n");
          return -6;
       }
       if ((sectNum != 2) && (sectNum != 3)) {
          errSprintf ("ERROR: Section 2 or 3 mislabeled\n");
          return -5;
       } else if (sectNum == 2) {
          /* Jump past section 3. */
          sectNum = 3;
          if (GRIB2SectJump (fp, gribLen, &sectNum, &secLen) != 0) {
             errSprintf ("ERROR: Problems Jumping past section 3\n");
             return -6;
          }
       }
    }
    /* Read section 4 into buffer. */
    sectNum = 4;
    if (GRIB2SectToBuffer (fp, gribLen, &sectNum, &secLen, buffLen,
                           buffer) != 0) {
       errSprintf ("ERROR: Problems with section 4\n");
       return -7;
    }
 /*
 enum { GS4_ANALYSIS, GS4_ENSEMBLE, GS4_DERIVED, GS4_PROBABIL_PNT = 5,
    GS4_STATISTIC = 8, GS4_PROBABIL_TIME = 9, GS4_PERCENTILE = 10,
    GS4_RADAR = 20, GS4_SATELLITE = 30
 };
 */
    /* Parse the interesting data out of sect 4. */
    MEMCPY_BIG (&templat, *buffer + 8 - 5, sizeof (short int));
    if ((templat != GS4_ANALYSIS) && (templat != GS4_ENSEMBLE)
        && (templat != GS4_DERIVED)
        && (templat != GS4_PROBABIL_PNT) && (templat != GS4_STATISTIC)
        && (templat != GS4_PROBABIL_TIME) && (templat != GS4_PERCENTILE)
        && (templat != GS4_ENSEMBLE_STAT)
        && (templat != GS4_STATISTIC_SPATIAL_AREA)
        && (templat != GS4_RADAR) && (templat != GS4_SATELLITE)
        && (templat != GS4_DERIVED_INTERVAL)) {
       errSprintf ("This was only designed for templates 0, 1, 2, 5, 8, 9, "
                   "10, 11, 12, 15, 20, 30. Template found = %d\n", templat);
       return -8;
    }
    cat = (*buffer)[10 - 5];
    subcat = (*buffer)[11 - 5];
    genProcess = (*buffer)[12 - 5];
    genID = 0;
    probType = 0;
    lowerProb = 0;
    upperProb = 0;
    if ((templat == GS4_RADAR) || (templat == GS4_SATELLITE) ||
        (templat == 254)) {
       inv->foreSec = 0;
       inv->validTime = inv->refTime;
       timeIncrType = 255;
       timeRangeUnit = 255;
       lenTime = 0;
    } else {
       genID = (*buffer)[14 - 5];
       /* Compute forecast time. */
       foreTimeUnit = (*buffer)[18 - 5];
       MEMCPY_BIG (&foreTime, *buffer + 19 - 5, sizeof (sInt4));
       if (ParseSect4Time2sec (/*inv->refTime, */foreTime, foreTimeUnit, &(inv->foreSec)) != 0) {
          errSprintf ("unable to convert TimeUnit: %d \n", foreTimeUnit);
          return -8;
       }
       /* Compute valid time. */
       inv->validTime = inv->refTime + inv->foreSec;
       timeIncrType = 255;
       timeRangeUnit = 1;
       lenTime = (sInt4) (inv->foreSec / 3600);
       switch (templat) {
          case GS4_PROBABIL_PNT: /* 4.5 */
+            if( *buffLen <= 44 - 5 + 4)
+                return -8;
             probType = (*buffer)[37 - 5];
             factor = (sChar) (*buffer)[38 - 5];
             MEMCPY_BIG (&value, *buffer + 39 - 5, sizeof (sInt4));
             lowerProb = value * pow (10.0, -1 * factor);
             factor = (sChar) (*buffer)[43 - 5];
             MEMCPY_BIG (&value, *buffer + 44 - 5, sizeof (sInt4));
             upperProb = value * pow (10.0, -1 * factor);
             break;
          case GS4_DERIVED_INTERVAL: /* 4.12 */
+            if( *buffLen <= 52 - 5 + 4)
+                return -8;
             if (InventoryParseTime (*buffer + 37 - 5, &(inv->validTime)) != 0) {
                printf ("Warning: Investigate Template 4.12 bytes 37-43\n");
                inv->validTime = inv->refTime + inv->foreSec;
             }
             timeIncrType = (*buffer)[50 - 5];
             timeRangeUnit = (*buffer)[51 - 5];
             MEMCPY_BIG (&lenTime, *buffer + 52 - 5, sizeof (sInt4));
 /* If lenTime == missing (2^32 -1) we might do something, but not with 255.*/
 /*
             if (lenTime == 255) {
                lenTime = (inv->validTime -
                           (inv->refTime + inv->foreSec)) / 3600;
             }
 */
             break;
          case GS4_PERCENTILE: /* 4.10 */
+            if( *buffLen <= 51 - 5 + 4)
+                return -8;
             percentile = (*buffer)[35 - 5];
             if (InventoryParseTime (*buffer + 36 - 5, &(inv->validTime)) != 0) {
                printf ("Warning: Investigate Template 4.10 bytes 36-42\n");
                inv->validTime = inv->refTime + inv->foreSec;
             }
             timeIncrType = (*buffer)[49 - 5];
             timeRangeUnit = (*buffer)[50 - 5];
             MEMCPY_BIG (&lenTime, *buffer + 51 - 5, sizeof (sInt4));
 /* If lenTime == missing (2^32 -1) we might do something, but not with 255.*/
 /*
             if (lenTime == 255) {
                lenTime = (inv->validTime -
                           (inv->refTime + inv->foreSec)) / 3600;
             }
 */
             break;
          case GS4_STATISTIC: /* 4.8 */
+            if( *buffLen <= 50 - 5 + 4)
+                return -8;
             if (InventoryParseTime (*buffer + 35 - 5, &(inv->validTime)) != 0) {
                printf ("Warning: Investigate Template 4.8 bytes 35-41\n");
                inv->validTime = inv->refTime + inv->foreSec;
             }
             timeIncrType = (*buffer)[48 - 5];
             timeRangeUnit = (*buffer)[49 - 5];
             MEMCPY_BIG (&lenTime, *buffer + 50 - 5, sizeof (sInt4));
 /* If lenTime == missing (2^32 -1) we might do something, but not with 255.*/
 /*
             if (lenTime == 255) {
                lenTime = (inv->validTime -
                           (inv->refTime + inv->foreSec)) / 3600;
             }
 */
             break;
          case GS4_ENSEMBLE_STAT: /* 4.11 */
+            if( *buffLen <= 53 - 5 + 4)
+                return -8;
             if (InventoryParseTime (*buffer + 38 - 5, &(inv->validTime)) != 0) {
                printf ("Warning: Investigate Template 4.11 bytes 38-44\n");
                inv->validTime = inv->refTime + inv->foreSec;
             }
             timeIncrType = (*buffer)[51 - 5];
             timeRangeUnit = (*buffer)[52 - 5];
             MEMCPY_BIG (&lenTime, *buffer + 53 - 5, sizeof (sInt4));
 /* If lenTime == missing (2^32 -1) we might do something, but not with 255.*/
 /*
             if (lenTime == 255) {
                lenTime = (inv->validTime -
                           (inv->refTime + inv->foreSec)) / 3600;
             }
 */
             break;
          case GS4_PROBABIL_TIME: /* 4.9 */
+            if( *buffLen <= 63 - 5 + 4)
+                return -8;
             probType = (*buffer)[37 - 5];
             if ((uChar) (*buffer)[38 - 5] > 128) {
                factor = 128 - (uChar) (*buffer)[38 - 5];
             } else {
                factor = (*buffer)[38 - 5];
             }
             MEMCPY_BIG (&value, *buffer + 39 - 5, sizeof (sInt4));
             lowerProb = value * pow (10.0, -1 * factor);
 
             if ((uChar) (*buffer)[43 - 5] > 128) {
                factor = 128 - (uChar) (*buffer)[43 - 5];
             } else {
                factor = (*buffer)[43 - 5];
             }
             MEMCPY_BIG (&value, *buffer + 44 - 5, sizeof (sInt4));
             upperProb = value * pow (10.0, -1 * factor);
 
             if (InventoryParseTime (*buffer + 48 - 5, &(inv->validTime)) != 0) {
                printf ("Warning: Investigate Template 4.9 bytes 48-54\n");
                inv->validTime = inv->refTime + inv->foreSec;
             }
             timeIncrType = (*buffer)[61 - 5];
             timeRangeUnit = (*buffer)[62 - 5];
             MEMCPY_BIG (&lenTime, *buffer + 63 - 5, sizeof (sInt4));
 /* If lenTime == missing (2^32 -1) we might do something, but not with 255.*/
 /*
             if (lenTime == 255) {
                lenTime = (inv->validTime -
                           (inv->refTime + inv->foreSec)) / 3600;
             }
 */
             break;
       }
    }
 
    if (timeRangeUnit == 255) {
       timeRangeUnit = 1;
       lenTime = (sInt4) ((inv->validTime - inv->foreSec - inv->refTime) /
                          3600);
    }
 /*   myAssert (timeRangeUnit == 1);*/
    /* Try to convert lenTime to hourly. */
    if (timeRangeUnit == 0) {
       lenTime = (sInt4) (lenTime / 60.);
       timeRangeUnit = 1;
    } else if (timeRangeUnit == 1) {
    } else if (timeRangeUnit == 2) {
       if( lenTime < INT_MIN / 24 || lenTime > INT_MAX / 24 )
           return -8;
       lenTime = lenTime * 24;
       timeRangeUnit = 1;
    } else if (timeRangeUnit == 10) {
       if( lenTime < INT_MIN / 3 || lenTime > INT_MAX / 3 )
           return -8;
       lenTime = lenTime * 3;
       timeRangeUnit = 1;
    } else if (timeRangeUnit == 11) {
       if( lenTime < INT_MIN / 6 || lenTime > INT_MAX / 6 )
           return -8;
       lenTime = lenTime * 6;
       timeRangeUnit = 1;
    } else if (timeRangeUnit == 12) {
       if( lenTime < INT_MIN / 12 || lenTime > INT_MAX / 12 )
           return -8;
       lenTime = lenTime * 12;
       timeRangeUnit = 1;
    } else if (timeRangeUnit == 13) {
       lenTime = (sInt4) (lenTime / 3600.);
       timeRangeUnit = 1;
    } else {
       printf ("Can't handle this timeRangeUnit\n");
       //myAssert (timeRangeUnit == 1);
       return -8;
    }
    if (lenTime == GRIB2MISSING_s4) {
       lenTime = 0;
    }
 
    if ((templat == GS4_RADAR) || (templat == GS4_SATELLITE)
        || (templat == 254) || (templat == 1000) || (templat == 1001)
        || (templat == 1002)) {
       fstSurfValue = 0;
       f_fstValue = 0;
       fstSurfType = 0;
       sndSurfValue = 0;
       f_sndValue = 0;
    } else {
       fstSurfType = (*buffer)[23 - 5];
       scale = (*buffer)[24 - 5];
       MEMCPY_BIG (&value, *buffer + 25 - 5, sizeof (sInt4));
       if ((value == GRIB2MISSING_s4) || (scale == GRIB2MISSING_s1) ||
           (fstSurfType == GRIB2MISSING_u1)) {
          fstSurfValue = 0;
          f_fstValue = 1;
       } else {
          fstSurfValue = value * pow (10.0, (int) (-1 * scale));
          f_fstValue = 1;
       }
       sndSurfType = (*buffer)[29 - 5];
       scale = (*buffer)[30 - 5];
       MEMCPY_BIG (&value, *buffer + 31 - 5, sizeof (sInt4));
       if ((value == GRIB2MISSING_s4) || (scale == GRIB2MISSING_s1) ||
           (sndSurfType == GRIB2MISSING_u1)) {
          sndSurfValue = 0;
          f_sndValue = 0;
       } else {
          sndSurfValue = value * pow (10.0, -1 * scale);
          f_sndValue = 1;
       }
    }
 
    /* Find out what the name of this variable is. */
    ParseElemName (center, subcenter, prodType, templat, cat, subcat,
                   lenTime, timeRangeUnit, timeIncrType, genID, probType, lowerProb,
                   upperProb, &(inv->element), &(inv->comment),
                   &(inv->unitName), &convert, percentile, genProcess,
                   f_fstValue, fstSurfValue, f_sndValue, sndSurfValue);
 
    if (! f_fstValue) {
       reallocSprintf (&(inv->shortFstLevel), "0 undefined");
       reallocSprintf (&(inv->longFstLevel), "0.000[-] undefined ()");
    } else {
       ParseLevelName (center, subcenter, fstSurfType, fstSurfValue,
                       f_sndValue, sndSurfValue, &(inv->shortFstLevel),
                       &(inv->longFstLevel));
    }
 
    /* Jump past section 5. */
    sectNum = 5;
    if (GRIB2SectJump (fp, gribLen, &sectNum, &secLen) != 0) {
       errSprintf ("ERROR: Problems Jumping past section 5\n");
       return -9;
    }
    /* Jump past section 6. */
    sectNum = 6;
    if (GRIB2SectJump (fp, gribLen, &sectNum, &secLen) != 0) {
       errSprintf ("ERROR: Problems Jumping past section 6\n");
       return -10;
    }
    /* Jump past section 7. */
    sectNum = 7;
    if (GRIB2SectJump (fp, gribLen, &sectNum, &secLen) != 0) {
       errSprintf ("ERROR: Problems Jumping past section 7\n");
       return -11;
    }
    return 0;
 }
 
 /*****************************************************************************
  * GRIB2Inventory() -- Review 12/2002
  *
  * Arthur Taylor / MDL
  *
  * PURPOSE
  *   Fills out an inventory structure for each GRIB message in a GRIB file,
  * without calling the FORTRAN routines to unpack the message.  It returns
  * the number of messages it found, or a negative number signifying an error.
  *
  * ARGUMENTS
  * filename = File to do the inventory of. (Input)
  *      Inv = The resultant array of inventories. (Output)
  *   LenInv = Length of the Array Inv (Output)
  *   numMsg = # of messages to inventory (0 = all, 1 = just first) (In)
  *   msgNum = MsgNum to start with, MsgNum of last message (Input/Output)
  *
  * FILES/DATABASES:
  *    Opens a GRIB2 file for reading given its filename.
  *
  * RETURNS: int (could use errSprintf())
  * +# = number of GRIB2 messages in the file.
  * -1 = Problems opening file for read.
  * -2 = Problems in section 0
  * -3 = Ran out of file.
  * -4 = Problems Reading in section 1
  * -5 = Problems Reading in section 2 or 3
  * -6 = Problems Reading in section 3
  * -7 = Problems Reading in section 4
  * -8 = Problems Parsing section 4.
  * -9 = Problems Reading in section 5
  * -10 = Problems Reading in section 6
  * -11 = Problems Reading in section 7
  * -12 = Problems inventory'ing a GRIB1 record
  * -13 = Problems inventory'ing a TDLP record
  *
  * HISTORY
  *   9/2002 Arthur Taylor (MDL/RSIS): Created.
  *  11/2002 AAT: Revised.
  *  12/2002 (TK,AC,TB,&MS): Code Review.
  *   3/2003 AAT: Corrected some satellite type mistakes.
  *   3/2003 AAT: Implemented multiple grid inventories in the same GRIB2
  *          message.
  *   4/2003 AAT: Started adding GRIB1 support
  *   6/2003 Matthew T. Kallio (matt@wunderground.com):
  *          "wmo" dimension increased to WMO_HEADER_LEN + 1 (for '\0' char)
  *   7/2003 AAT: Added numMsg so we can quickly find the reference time for
  *          a file by inventorying just the first message.
  *   8/2003 AAT: Adjusted use of GRIB_LIMIT to only affect the first message
  *          after we know we have a GRIB file, we don't want "trailing" bytes
  *          to break the program.
  *   8/2003 AAT: switched fileLen to only be computed for an error message.
  *   8/2003 AAT: curTot no longer serves a purpose.
  *   5/2004 AAT: Added a check for section number 2..8 for the repeated
  *          section (otherwise error)
  *  10/2004 AAT: Added ability to inventory TDLP records.
  *
  * NOTES
  *****************************************************************************
  */
