commit 3ff059a74bcd10ead9a92cc67e5c8c006996e940
Author: Frank Morgner <frankmorgner@gmail.com>
Date:   Wed Sep 30 23:37:09 2020 +0200

    fixed length checking in oberthur profile
    
    fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=25943

diff --git a/src/libopensc/pkcs15-oberthur.c b/src/libopensc/pkcs15-oberthur.c
index 0cc440b9..007a6182 100644
--- a/src/libopensc/pkcs15-oberthur.c
+++ b/src/libopensc/pkcs15-oberthur.c
@@ -388,55 +388,55 @@ static int
 sc_oberthur_parse_containers (struct sc_pkcs15_card *p15card,
 		unsigned char *buff, size_t len, int postpone_allowed)
 {
 	struct sc_context *ctx = p15card->card->ctx;
 	size_t offs;
 
 	LOG_FUNC_CALLED(ctx);
 
 	while (Containers)   {
 		struct container *next = Containers->next;
 
 		free (Containers);
 		Containers = next;
 	}
 
-	for (offs=0; offs < len;)  {
+	for (offs=0; offs + 2 + 2+2+2 + 2+2+2 + 2+36 <= len;)  {
 		struct container *cont;
 		unsigned char *ptr =  buff + offs + 2;
 
 		sc_log(ctx,
 		       "parse contaniers offs:%"SC_FORMAT_LEN_SIZE_T"u, len:%"SC_FORMAT_LEN_SIZE_T"u",
 		       offs, len);
 		if (*(buff + offs) != 'R')
 			return SC_ERROR_INVALID_DATA;
 
 		cont = (struct container *)calloc(sizeof(struct container), 1);
 		if (!cont)
 			return SC_ERROR_OUT_OF_MEMORY;
 
 		cont->exchange.id_pub = *ptr * 0x100 + *(ptr + 1);  ptr += 2;
 		cont->exchange.id_prv = *ptr * 0x100 + *(ptr + 1);  ptr += 2;
 		cont->exchange.id_cert = *ptr * 0x100 + *(ptr + 1); ptr += 2;
 
 		cont->sign.id_pub = *ptr * 0x100 + *(ptr + 1);  ptr += 2;
 		cont->sign.id_prv = *ptr * 0x100 + *(ptr + 1);  ptr += 2;
 		cont->sign.id_cert = *ptr * 0x100 + *(ptr + 1); ptr += 2;
 
 		memcpy(cont->uuid, ptr + 2, 36);
 		sc_log(ctx, "UUID: %s; 0x%X, 0x%X, 0x%X", cont->uuid,
 				cont->exchange.id_pub, cont->exchange.id_prv, cont->exchange.id_cert);
 
 		if (!Containers)  {
 			Containers = cont;
 		}
 		else   {
 			cont->next = Containers;
 			Containers->prev = (void *)cont;
 			Containers = cont;
 		}
 
 		offs += *(buff + offs + 1) + 2;
 	}
 
 	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
 }
@@ -446,40 +446,40 @@ static int
 sc_oberthur_parse_publicinfo (struct sc_pkcs15_card *p15card,
 		unsigned char *buff, size_t len, int postpone_allowed)
 {
 	struct sc_context *ctx = p15card->card->ctx;
 	size_t ii;
 	int rv;
 
 	LOG_FUNC_CALLED(ctx);
-	for (ii=0; ii<len; ii+=5)   {
+	for (ii=0; ii+5<=len; ii+=5)   {
 		unsigned int file_id, size;
 
 		if(*(buff+ii) != 0xFF)
 			continue;
 
 		file_id = 0x100 * *(buff+ii + 1) + *(buff+ii + 2);
 		size = 0x100 * *(buff+ii + 3) + *(buff+ii + 4);
 		sc_log(ctx, "add public object(file-id:%04X,size:%X)", file_id, size);
 
 		switch (*(buff+ii + 1))   {
 		case BASE_ID_PUB_RSA :
 			rv = sc_pkcs15emu_oberthur_add_pubkey(p15card, file_id, size);
 			LOG_TEST_RET(ctx, rv, "Cannot parse public key info");
 			break;
 		case BASE_ID_CERT :
 			rv = sc_pkcs15emu_oberthur_add_cert(p15card, file_id);
 			LOG_TEST_RET(ctx, rv, "Cannot parse certificate info");
 			break;
 		case BASE_ID_PUB_DES :
 			break;
 		case BASE_ID_PUB_DATA :
 			rv = sc_pkcs15emu_oberthur_add_data(p15card, file_id, size, 0);
 			LOG_TEST_RET(ctx, rv, "Cannot parse data info");
 			break;
 		default:
 			LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "Public object parse error");
 		}
 	}
 
 	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
 }
