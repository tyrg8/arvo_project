commit efd5f9a71af7bd5ab3816ba49edc8c3f7c370bae
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Wed Dec 22 10:17:57 2021 +0000

    OSS-fuzz #42783 - limit debug string copying to destination buffer size
    
    A debug message copied a potentially large string, if it exceeded the
    destination buffer size we would overrun. Prevent that (can only happen
    for broken files) and check other similar constructs because this isn't
    the first one we've seen. Found one more.

diff --git a/pdf/pdf_annot.c b/pdf/pdf_annot.c
index f1cd9d63e..09bbb8d0c 100644
--- a/pdf/pdf_annot.c
+++ b/pdf/pdf_annot.c
@@ -1425,43 +1425,43 @@ annot_LE_dispatch_t annot_LE_dispatch[] = {
 /* Draw one line ending at (x,y) */
 static int pdfi_annot_draw_LE_one(pdf_context *ctx, pdf_dict *annot, pdf_name *LE,
                                   double x, double y, double angle)
 {
     int code;
     int code1;
     annot_LE_dispatch_t *dispatch_ptr;
 
     code = pdfi_gsave(ctx);
     if (code < 0) goto exit1;
 
     code = gs_translate(ctx->pgs, x, y);
     code = gs_moveto(ctx->pgs, 0, 0);
     code = gs_rotate(ctx->pgs, angle);
 
     /* Draw the LE */
     for (dispatch_ptr = annot_LE_dispatch; dispatch_ptr->name; dispatch_ptr ++) {
         if (pdfi_name_is(LE, dispatch_ptr->name)) {
             code = dispatch_ptr->func(ctx, annot);
             break;
         }
     }
     if (!dispatch_ptr->name) {
         char str[100];
-        memcpy(str, (const char *)LE->data, LE->length);
-        str[LE->length] = '\0';
+        memcpy(str, (const char *)LE->data, LE->length < 100 ? LE->length : 99);
+        str[LE->length < 100 ? LE->length : 99] = '\0';
         dbgmprintf1(ctx->memory, "ANNOT: WARNING No handler for LE %s\n", str);
     }
 
  exit1:
     code1 = pdfi_grestore(ctx);
     if (code < 0)
         code = code1;
     return code;
 }
 
 /* Draw line endings using LE entry in annotation dictionary
  * Draws one at (x1,y1) and one at (x2,y2)
  * If LE is a name instead of an array, only draws at x2,y2 (but needs x1,y1 for angle)
  *  (defaults to None if not there)
  *
  * which -- tells whether to draw both ends (0) or just the first one (1) or second one (2)
  */
@@ -3705,19 +3705,19 @@ static int pdfi_annot_draw_Widget(pdf_context *ctx, pdf_dict *annot, pdf_obj *No
 /* Handle Annotations that are not implemented */
 static int pdfi_annot_draw_NotImplemented(pdf_context *ctx, pdf_dict *annot, pdf_obj *NormAP, bool *render_done)
 {
     int code = 0;
     pdf_name *Subtype = NULL;
     char str[100];
 
     code = pdfi_dict_get_type(ctx, annot, "Subtype", PDF_NAME, (pdf_obj **)&Subtype);
     if (code < 0) goto exit;
 
-    memcpy(str, (const char *)Subtype->data, Subtype->length);
-    str[Subtype->length] = '\0';
+    memcpy(str, (const char *)Subtype->data, Subtype->length < 100 ? Subtype->length : 99);
+    str[Subtype->length < 100 ? Subtype->length : 99] = '\0';
     dbgmprintf1(ctx->memory, "ANNOT: No AP, default appearance for Subtype %s Not Implemented\n", str);
 
  exit:
     *render_done = false;
     pdfi_countdown(Subtype);
     return code;
 }
