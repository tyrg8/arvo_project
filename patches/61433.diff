commit fa62aafb7d81b89d68752e830a757ef4199d0b21
Author: Alan Modra <amodra@gmail.com>
Date:   Mon Aug 21 18:38:08 2023 +0930

    bfd_close_all_done bug and bfd_last_cache
    
    bfd_close ought to always call iovec->bclose so that cache_bclose is
    called.  If not, bfd_last_cache will be left pointing at freed memory.
    This bug was found by oss-fuzz with the trigger being an old bug in
    the ia64-vms support.  Given a file of the "wrong" size,
    elf64_vms_close_and_cleanup attempted to extend it, leading to an
    error since the file was opened read-only by nm.  nm bad_file bad_file
    then hit the use-after-free when opening the second file.
    
    commit 8219cab3f8 fixed multiple bugs of this type in bfd_close and
    bfd_close_all_done, but didn't go quite far enough.
    
            * elf64-ia64-vms.c (elf64_vms_close_and_cleanup): Don't
            attempt to extend read-only files.
            * opncls.c (bfd_close_all_done): Always call _close_and_cleanup.
    
    An old bug in the ia64-vms support can be used to tickle another bug
    in bfd_close_all_done.  If _close_and_cleanup returns an error,

diff --git a/bfd/elf64-ia64-vms.c b/bfd/elf64-ia64-vms.c
index f8e9922fc4a..ab1f18b8d81 100644
--- a/bfd/elf64-ia64-vms.c
+++ b/bfd/elf64-ia64-vms.c
@@ -4713,24 +4713,25 @@ static bool
 elf64_vms_close_and_cleanup (bfd *abfd)
 {
   bool ret = true;
-  if (bfd_get_format (abfd) == bfd_object)
+  if (bfd_get_format (abfd) == bfd_object
+      && bfd_write_p (abfd))
     {
       long isize;
 
       /* Pad to 8 byte boundary for IPF/VMS.  */
       isize = bfd_get_size (abfd);
       if ((isize & 7) != 0)
 	{
 	  unsigned int ishort = 8 - (isize & 7);
 	  uint64_t pad = 0;
 
 	  if (bfd_seek (abfd, isize, SEEK_SET) != 0
 	      || bfd_write (&pad, ishort, abfd) != ishort)
 	    ret = false;
 	}
     }
 
   return _bfd_generic_close_and_cleanup (abfd) && ret;
 }
 
 /* Add symbols from an ELF object file to the linker hash table.  */
diff --git a/bfd/opncls.c b/bfd/opncls.c
index 56a90046b1a..741d20e81da 100644
--- a/bfd/opncls.c
+++ b/bfd/opncls.c
@@ -919,20 +919,18 @@ bool
 bfd_close_all_done (bfd *abfd)
 {
   bool ret = BFD_SEND (abfd, _close_and_cleanup, (abfd));
 
-  if (ret && abfd->iovec != NULL)
-    {
-      ret = abfd->iovec->bclose (abfd) == 0;
+  if (abfd->iovec != NULL)
+    ret &= abfd->iovec->bclose (abfd) == 0;
 
-      if (ret)
-	_maybe_make_executable (abfd);
-    }
+  if (ret)
+    _maybe_make_executable (abfd);
 
   _bfd_delete_bfd (abfd);
   free (_bfd_error_buf);
   _bfd_error_buf = NULL;
 
   return ret;
 }
 
 /*
