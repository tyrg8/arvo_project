commit f3b0e4373af7500155e470931e5a50060f5b4612
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Thu Mar 1 17:36:54 2018 +0800

    Fix 699085: Use at most 16 bytes from MD5 digests.
    
    Previously crypt->len / 8 could be 0..32. In the case
    of crypt->len == 256 this meant that when an 16 byte
    MD5 was computed, uninitalized key data would be
    accessed because 32 bytes of key data was accessed.
    
    Now crypt->len / 8 is limited to 0..16. So when the
    16 byte MD5 is computed and later accessed only the
    initialized part of the key data is accessed.
    
    Because crypt->len / 8 is now limited to 0..16 the key
    data buffer can also be shrunk to 16 bytes without
    risking the code stepping over its boundaries.

diff --git a/source/pdf/pdf-crypt.c b/source/pdf/pdf-crypt.c
index 7150f66eb..2e31f3565 100644
--- a/source/pdf/pdf-crypt.c
+++ b/source/pdf/pdf-crypt.c
@@ -349,67 +349,67 @@ static void
 pdf_compute_encryption_key(fz_context *ctx, pdf_crypt *crypt, unsigned char *password, size_t pwlen, unsigned char *key)
 {
 	unsigned char buf[32];
 	unsigned int p;
 	int i, n;
 	fz_md5 md5;
 
-	n = crypt->length / 8;
+	n = fz_clampi(crypt->length / 8, 0, 16);
 
 	/* Step 1 - copy and pad password string */
 	if (pwlen > 32)
 		pwlen = 32;
 	memcpy(buf, password, pwlen);
 	memcpy(buf + pwlen, padding, 32 - pwlen);
 
 	/* Step 2 - init md5 and pass value of step 1 */
 	fz_md5_init(&md5);
 	fz_md5_update(&md5, buf, 32);
 
 	/* Step 3 - pass O value */
 	fz_md5_update(&md5, crypt->o, 32);
 
 	/* Step 4 - pass P value as unsigned int, low-order byte first */
 	p = (unsigned int) crypt->p;
 	buf[0] = (p) & 0xFF;
 	buf[1] = (p >> 8) & 0xFF;
 	buf[2] = (p >> 16) & 0xFF;
 	buf[3] = (p >> 24) & 0xFF;
 	fz_md5_update(&md5, buf, 4);
 
 	/* Step 5 - pass first element of ID array */
 	fz_md5_update(&md5, (unsigned char *)pdf_to_str_buf(ctx, crypt->id), pdf_to_str_len(ctx, crypt->id));
 
 	/* Step 6 (revision 4 or greater) - if metadata is not encrypted pass 0xFFFFFFFF */
 	if (crypt->r >= 4)
 	{
 		if (!crypt->encrypt_metadata)
 		{
 			buf[0] = 0xFF;
 			buf[1] = 0xFF;
 			buf[2] = 0xFF;
 			buf[3] = 0xFF;
 			fz_md5_update(&md5, buf, 4);
 		}
 	}
 
 	/* Step 7 - finish the hash */
 	fz_md5_final(&md5, buf);
 
 	/* Step 8 (revision 3 or greater) - do some voodoo 50 times */
 	if (crypt->r >= 3)
 	{
 		for (i = 0; i < 50; i++)
 		{
 			fz_md5_init(&md5);
 			fz_md5_update(&md5, buf, n);
 			fz_md5_final(&md5, buf);
 		}
 	}
 
 	/* Step 9 - the key is the first 'n' bytes of the result */
 	memcpy(key, buf, n);
 }
 
 /*
  * Compute an encryption key (PDF 1.7 ExtensionLevel 3 algorithm 3.2a)
  */
@@ -569,60 +569,60 @@ pdf_compute_encryption_key_r6(fz_context *ctx, pdf_crypt *crypt, unsigned char *
 static void
 pdf_compute_user_password(fz_context *ctx, pdf_crypt *crypt, unsigned char *password, size_t pwlen, unsigned char *output)
 {
+	int n = fz_clampi(crypt->length / 8, 0, 16);
+
 	if (crypt->r == 2)
 	{
 		fz_arc4 arc4;
 
 		pdf_compute_encryption_key(ctx, crypt, password, pwlen, crypt->key);
-		fz_arc4_init(&arc4, crypt->key, crypt->length / 8);
+		fz_arc4_init(&arc4, crypt->key, n);
 		fz_arc4_encrypt(&arc4, output, padding, 32);
 	}
 
 	if (crypt->r == 3 || crypt->r == 4)
 	{
 		unsigned char xor[32];
 		unsigned char digest[16];
 		fz_md5 md5;
 		fz_arc4 arc4;
-		int i, x, n;
-
-		n = crypt->length / 8;
+		int i, x;
 
 		pdf_compute_encryption_key(ctx, crypt, password, pwlen, crypt->key);
 
 		fz_md5_init(&md5);
 		fz_md5_update(&md5, padding, 32);
 		fz_md5_update(&md5, (unsigned char*)pdf_to_str_buf(ctx, crypt->id), pdf_to_str_len(ctx, crypt->id));
 		fz_md5_final(&md5, digest);
 
 		fz_arc4_init(&arc4, crypt->key, n);
 		fz_arc4_encrypt(&arc4, output, digest, 16);
 
 		for (x = 1; x <= 19; x++)
 		{
 			for (i = 0; i < n; i++)
 				xor[i] = crypt->key[i] ^ x;
 			fz_arc4_init(&arc4, xor, n);
 			fz_arc4_encrypt(&arc4, output, output, 16);
 		}
 
 		memcpy(output + 16, padding, 16);
 	}
 
 	if (crypt->r == 5)
 	{
 		pdf_compute_encryption_key_r5(ctx, crypt, password, pwlen, 0, output);
 	}
 
 	if (crypt->r == 6)
 	{
 		pdf_compute_encryption_key_r6(ctx, crypt, password, pwlen, 0, output);
 	}
 }
 
 /*
  * Authenticating the user password (PDF 1.7 algorithm 3.6
  * and ExtensionLevel 3 algorithm 3.11)
  * This also has the side effect of saving a key generated
  * from the password for decrypting objects and streams.
  */
@@ -649,85 +649,82 @@ pdf_authenticate_user_password(fz_context *ctx, pdf_crypt *crypt, unsigned char
 static int
 pdf_authenticate_owner_password(fz_context *ctx, pdf_crypt *crypt, unsigned char *ownerpass, size_t pwlen)
 {
+	int n = fz_clampi(crypt->length / 8, 0, 16);
+
 	if (crypt->r == 2)
 	{
 		unsigned char pwbuf[32];
-		unsigned char key[32];
+		unsigned char key[16];
 		unsigned char userpass[32];
-		int n;
 		fz_md5 md5;
 		fz_arc4 arc4;
 
-		n = crypt->length / 8;
-
 		if (pwlen > 32)
 			pwlen = 32;
 		memcpy(pwbuf, ownerpass, pwlen);
 		memcpy(pwbuf + pwlen, padding, 32 - pwlen);
 
 		fz_md5_init(&md5);
 		fz_md5_update(&md5, pwbuf, 32);
 		fz_md5_final(&md5, key);
 
 		fz_arc4_init(&arc4, key, n);
 		fz_arc4_encrypt(&arc4, userpass, crypt->o, 32);
 
 		return pdf_authenticate_user_password(ctx, crypt, userpass, 32);
 	}
 
 	if (crypt->r == 3 || crypt->r == 4)
 	{
 		unsigned char pwbuf[32];
-		unsigned char key[32];
+		unsigned char key[16];
 		unsigned char xor[32];
 		unsigned char userpass[32];
-		int i, n, x;
+		int i, x;
 		fz_md5 md5;
 		fz_arc4 arc4;
 
-		n = crypt->length / 8;
-
 		if (pwlen > 32)
 			pwlen = 32;
 		memcpy(pwbuf, ownerpass, pwlen);
 		memcpy(pwbuf + pwlen, padding, 32 - pwlen);
 
 		fz_md5_init(&md5);
 		fz_md5_update(&md5, pwbuf, 32);
 		fz_md5_final(&md5, key);
 
 		for (i = 0; i < 50; i++)
 		{
 			fz_md5_init(&md5);
-			fz_md5_update(&md5, key, 16);
+			fz_md5_update(&md5, key, n);
 			fz_md5_final(&md5, key);
 		}
 
 		memcpy(userpass, crypt->o, 32);
 		for (x = 0; x < 20; x++)
 		{
 			for (i = 0; i < n; i++)
 				xor[i] = key[i] ^ (19 - x);
 			fz_arc4_init(&arc4, xor, n);
 			fz_arc4_encrypt(&arc4, userpass, userpass, 32);
 		}
 
 		return pdf_authenticate_user_password(ctx, crypt, userpass, 32);
 	}
 
 	if (crypt->r == 5)
 	{
 		unsigned char key[32];
 		pdf_compute_encryption_key_r5(ctx, crypt, ownerpass, pwlen, 1, key);
 		return !memcmp(key, crypt->o, 32);
 	}
 
 	if (crypt->r == 6)
 	{
 		unsigned char key[32];
 		pdf_compute_encryption_key_r6(ctx, crypt, ownerpass, pwlen, 1, key);
 		return !memcmp(key, crypt->o, 32);
 	}
 
 	return 0;
 }
