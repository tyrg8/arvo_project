commit 243274a82cc506507bc59083d63a0d3b7ced611e
Author: Brian Carrier <carrier@sleuthkit.org>
Date:   Thu Sep 10 12:44:24 2020 -0400

    Fix bug that uses wrong value

diff --git a/tsk/fs/ntfs.c b/tsk/fs/ntfs.c
index 7db5200e0..631fe2ff3 100755
--- a/tsk/fs/ntfs.c
+++ b/tsk/fs/ntfs.c
@@ -571,234 +571,234 @@ static TSK_RETVAL_ENUM
 ntfs_make_data_run(NTFS_INFO * ntfs, TSK_OFF_T start_vcn,
     ntfs_runlist * runlist_head, TSK_FS_ATTR_RUN ** a_data_run_head,
     TSK_OFF_T * totlen, TSK_INUM_T mnum)
 {
     TSK_FS_INFO *fs = (TSK_FS_INFO *) ntfs;
     ntfs_runlist *run;
     TSK_FS_ATTR_RUN *data_run, *data_run_prev = NULL;
     unsigned int i, idx;
     TSK_DADDR_T prev_addr = 0;
     TSK_OFF_T file_offset = start_vcn;
 
     run = runlist_head;
     *a_data_run_head = NULL;
 
     /* initialize if non-NULL */
     if (totlen)
         *totlen = 0;
 
     /* Cycle through each run in the runlist
      * We go until we find an entry with no length
      * An entry with offset of 0 is for a sparse run
      */
     while (NTFS_RUNL_LENSZ(run) != 0) {
         int64_t addr_offset = 0;
 
         /* allocate a new tsk_fs_attr_run */
         if ((data_run = tsk_fs_attr_run_alloc()) == NULL) {
             tsk_fs_attr_run_free(*a_data_run_head);
             *a_data_run_head = NULL;
             return TSK_ERR;
         }
 
         /* make the list, unless its the first pass & then we set the head */
         if (data_run_prev)
             data_run_prev->next = data_run;
         else
             *a_data_run_head = data_run;
         data_run_prev = data_run;
 
         /* These fields are a variable number of bytes long
          * these for loops are the equivalent of the getuX macros
          */
         idx = 0;
 
         /* Get the length of this run. 
          * A length of more than eight bytes will not fit in the
          * 64-bit length field (and is likely corrupt)
          */
         if (NTFS_RUNL_LENSZ(run) > 8) {
             tsk_error_reset();
             tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
             tsk_error_set_errstr
             ("ntfs_make_run: Run length is too large to process");
             tsk_fs_attr_run_free(*a_data_run_head);
             *a_data_run_head = NULL;
             return TSK_COR;
         }
         for (i = 0, data_run->len = 0; i < NTFS_RUNL_LENSZ(run); i++) {
             data_run->len |= ((uint64_t)(run->buf[idx++]) << (i * 8));
             if (tsk_verbose)
                 tsk_fprintf(stderr,
                     "ntfs_make_data_run: Len idx: %i cur: %"
                     PRIu8 " (%" PRIx8 ") tot: %" PRIuDADDR
                     " (%" PRIxDADDR ")\n", i,
                     run->buf[idx - 1], run->buf[idx - 1],
                     data_run->len, data_run->len);
         }
 
         /* Sanity check on length */
         if (data_run->len > fs->block_count) {
             tsk_error_reset();
             tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
             tsk_error_set_errstr
                 ("ntfs_make_run: Run length is larger than file system");
             tsk_fs_attr_run_free(*a_data_run_head);
             *a_data_run_head = NULL;
             return TSK_COR;
         }
 
         data_run->offset = file_offset;
         file_offset += data_run->len;
 
         /* Update the length if we were passed a value */
         if (totlen)
             *totlen += (data_run->len * ntfs->csize_b);
 
         /* Get the address offset of this run.
          * An address offset of more than eight bytes will not fit in the
          * 64-bit addr_offset field (and is likely corrupt)
          */
-        if (NTFS_RUNL_LENSZ(run) > 8) {
+        if (NTFS_RUNL_OFFSZ(run) > 8) {
             tsk_error_reset();
             tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
             tsk_error_set_errstr
             ("ntfs_make_run: Run address offset is too large to process");
             tsk_fs_attr_run_free(*a_data_run_head);
             *a_data_run_head = NULL;
             return TSK_COR;
         }
         for (i = 0, data_run->addr = 0; i < NTFS_RUNL_OFFSZ(run); i++) {
             //data_run->addr |= (run->buf[idx++] << (i * 8));
             addr_offset |= ((int64_t)(run->buf[idx++]) << (i * 8));
             if (tsk_verbose)
                 tsk_fprintf(stderr,
                     "ntfs_make_data_run: Off idx: %i cur: %"
                     PRIu8 " (%" PRIx8 ") tot: %" PRIuDADDR
                     " (%" PRIxDADDR ")\n", i,
                     run->buf[idx - 1], run->buf[idx - 1], addr_offset,
                     addr_offset);
         }
 
         /* addr_offset value is signed so extend it to 64-bits */
         if ((int8_t) run->buf[idx - 1] < 0) {
             for (; i < sizeof(addr_offset); i++)
                 addr_offset |= (int64_t) ((int64_t) 0xff << (i * 8));
         }
 
         if (tsk_verbose)
             tsk_fprintf(stderr,
                 "ntfs_make_data_run: Signed addr_offset: %"
 				PRId64 " Previous address: %"
 				PRIuDADDR "\n", addr_offset, prev_addr);
 
         /* The NT 4.0 version of NTFS uses an offset of -1 to represent
          * a hole, so add the sparse flag and make it look like the 2K
          * version with a offset of 0
          *
          * A user reported an issue where the $Bad file started with
          * its offset as -1 and it was not NT (maybe a conversion)
          * Change the check now to not limit to NT, but make sure
          * that it is the first run
          */
         if (((addr_offset == -1) && (prev_addr == 0))
             || ((addr_offset == -1)
                 && (ntfs->ver == NTFS_VINFO_NT))) {
             data_run->flags |= TSK_FS_ATTR_RUN_FLAG_SPARSE;
             data_run->addr = 0;
             if (tsk_verbose)
                 tsk_fprintf(stderr, "ntfs_make_data_run: Sparse Run\n");
         }
 
         /* A Sparse file has a run with an offset of 0
          * there is a special case though of the BOOT MFT entry which
          * is the super block and has a legit offset of 0.
          *
          * The value given is a delta of the previous offset, so add
          * them for non-sparse files
          *
          * For sparse files the next run will have its offset relative
          * to the current "prev_addr" so skip that code
          */
         // @@@ BC: we'll need to pass in an inode value for this check
         else if ((addr_offset) || (mnum == NTFS_MFT_BOOT)) {
 
             data_run->addr = prev_addr + addr_offset;
             prev_addr = data_run->addr;
 
             /* Sanity check on length and offset */
             if (data_run->addr + data_run->len > fs->block_count) {
                 tsk_error_reset();
                 tsk_error_set_errno(TSK_ERR_FS_INODE_COR);
                 tsk_error_set_errstr
                     ("ntfs_make_run: Run offset and length is larger than file system");
                 tsk_fs_attr_run_free(*a_data_run_head);
                 *a_data_run_head = NULL;
                 return TSK_COR;
             }
 
         }
         else {
             data_run->flags |= TSK_FS_ATTR_RUN_FLAG_SPARSE;
             if (tsk_verbose)
                 tsk_fprintf(stderr, "ntfs_make_data_run: Sparse Run\n");
         }
 
         /* Advance run */
         run = (ntfs_runlist *) ((uintptr_t) run + (1 + NTFS_RUNL_LENSZ(run)
                 + NTFS_RUNL_OFFSZ(run)));
     }
 
     /* special case for $BADCLUST, which is a sparse file whose size is
      * the entire file system.
      *
      * If there is only one run entry and it is sparse, then there are no
      * bad blocks, so get rid of it.
      */
     if ((*a_data_run_head != NULL)
         && ((*a_data_run_head)->next == NULL)
         && ((*a_data_run_head)->flags & TSK_FS_ATTR_RUN_FLAG_SPARSE)
         && ((*a_data_run_head)->len == fs->last_block + 1)) {
         tsk_fs_attr_run_free(*a_data_run_head);
         *a_data_run_head = NULL;
     }
 
     return TSK_OK;
 }
 
 
 
 /*********** UNCOMPRESSION CODE *************/
 
 
 /*
  * NTFS Breaks compressed data into compression units, which are
  * typically 16 clusters in size. If the data in the comp  unit
  * compresses to something smaller than 16 clusters then the
  * compressed data is stored and the rest of the compression unit
  * is filled with sparse clusters. The entire compression unit
  * can also be sparse.
  *
  * The uncompressed content in the compression unit is further broken
  * into 4k (pre-compression) blocks.  When stored, each 4k block has
  * a 2-byte header that identifies the compressed size (and if there
  * was compression).
  *
  * The compressed data is a series of token groups.  Each token group
  * contains a 1-byte header and 8 tokens.  The 8-bits in the token
  * group header identify the type of each token in the group.
  *
  * There are two types of tokens.
  * Symbol tokens are 1 byte in length and the 1-byte value is the value
  * for that position in the file and it should be direcly copied into the
  * uncompressed data.  Phrase tokens identify a previous run of data
  * in the same compression unit that should be
  * copied to the current location.  These contain offset and length info.
  *
  * The attribute will have enough cluster addresses to store all of
  * the content, but the addresses will be 0 in the compression unit
  * if it is all sparse and the ending clusters will be 0 in the
  * compression unit if they are not needed.
  *
  */
 
  /* Variables used for ntfs_uncompress() method */
