commit d1ded876f9cb09d83b904b40cf6a4f67adfe91fe
Author: Jonathan Hui <jonhui@google.com>
Date:   Thu Jun 20 09:38:25 2019 -0700

    [meshcop] add MeshLocalPrefixTlv::GetMeshLocalPrefixLength() (#3930)

diff --git a/src/core/meshcop/dataset_manager_ftd.cpp b/src/core/meshcop/dataset_manager_ftd.cpp
index 815293248..8d7744f18 100644
--- a/src/core/meshcop/dataset_manager_ftd.cpp
+++ b/src/core/meshcop/dataset_manager_ftd.cpp
@@ -69,209 +69,209 @@ otError DatasetManager::AppendMleDatasetTlv(Message &aMessage) const
 otError DatasetManager::HandleSet(Coap::Message &aMessage, const Ip6::MessageInfo &aMessageInfo)
 {
     Tlv             tlv;
     Timestamp *     timestamp;
     uint16_t        offset = aMessage.GetOffset();
     Tlv::Type       type;
     bool            isUpdateFromCommissioner = false;
     bool            doesAffectConnectivity   = false;
     bool            doesAffectMasterKey      = false;
     StateTlv::State state                    = StateTlv::kAccept;
     Dataset         dataset(mLocal.GetType());
 
     ActiveTimestampTlv       activeTimestamp;
     PendingTimestampTlv      pendingTimestamp;
     ChannelTlv               channel;
     CommissionerSessionIdTlv sessionId;
     MeshLocalPrefixTlv       meshLocalPrefix;
     NetworkMasterKeyTlv      masterKey;
     PanIdTlv                 panId;
 
     activeTimestamp.SetLength(0);
     pendingTimestamp.SetLength(0);
     channel.SetLength(0);
     masterKey.SetLength(0);
     meshLocalPrefix.SetLength(0);
     panId.SetLength(0);
     pendingTimestamp.SetLength(0);
     sessionId.SetLength(0);
 
     VerifyOrExit(Get<Mle::MleRouter>().GetRole() == OT_DEVICE_ROLE_LEADER, state = StateTlv::kReject);
 
     // verify that TLV data size is less than maximum TLV value size
     while (offset < aMessage.GetLength())
     {
         aMessage.Read(offset, sizeof(tlv), &tlv);
         VerifyOrExit(tlv.GetLength() <= Dataset::kMaxValueSize, state = StateTlv::kReject);
         offset += sizeof(tlv) + tlv.GetLength();
     }
 
     // verify that does not overflow dataset buffer
     VerifyOrExit((offset - aMessage.GetOffset()) <= Dataset::kMaxSize, state = StateTlv::kReject);
 
     type = (strcmp(mUriSet, OT_URI_PATH_ACTIVE_SET) == 0 ? Tlv::kActiveTimestamp : Tlv::kPendingTimestamp);
 
     if (Tlv::GetTlv(aMessage, Tlv::kActiveTimestamp, sizeof(activeTimestamp), activeTimestamp) != OT_ERROR_NONE)
     {
         ExitNow(state = StateTlv::kReject);
     }
 
     VerifyOrExit(activeTimestamp.IsValid(), state = StateTlv::kReject);
 
     if (Tlv::GetTlv(aMessage, Tlv::kPendingTimestamp, sizeof(pendingTimestamp), pendingTimestamp) == OT_ERROR_NONE)
     {
         VerifyOrExit(pendingTimestamp.IsValid(), state = StateTlv::kReject);
     }
 
     // verify the request includes a timestamp that is ahead of the locally stored value
     timestamp = (type == Tlv::kActiveTimestamp) ? static_cast<Timestamp *>(&activeTimestamp)
                                                 : static_cast<Timestamp *>(&pendingTimestamp);
 
     VerifyOrExit(mLocal.Compare(timestamp) > 0, state = StateTlv::kReject);
 
     // check channel
     if (Tlv::GetTlv(aMessage, Tlv::kChannel, sizeof(channel), channel) == OT_ERROR_NONE)
     {
         VerifyOrExit(channel.IsValid(), state = StateTlv::kReject);
 
         if (channel.GetChannel() != Get<Mac::Mac>().GetPanChannel())
         {
             doesAffectConnectivity = true;
         }
     }
 
     // check PAN ID
     if (Tlv::GetTlv(aMessage, Tlv::kPanId, sizeof(panId), panId) == OT_ERROR_NONE && panId.IsValid() &&
         panId.GetPanId() != Get<Mac::Mac>().GetPanId())
     {
         doesAffectConnectivity = true;
     }
 
     // check mesh local prefix
     if (Tlv::GetTlv(aMessage, Tlv::kMeshLocalPrefix, sizeof(meshLocalPrefix), meshLocalPrefix) == OT_ERROR_NONE &&
         meshLocalPrefix.IsValid() &&
         memcmp(&meshLocalPrefix.GetMeshLocalPrefix(), &Get<Mle::MleRouter>().GetMeshLocalPrefix(),
-               meshLocalPrefix.GetLength()))
+               meshLocalPrefix.GetMeshLocalPrefixLength()))
     {
         doesAffectConnectivity = true;
     }
 
     // check network master key
     if (Tlv::GetTlv(aMessage, Tlv::kNetworkMasterKey, sizeof(masterKey), masterKey) == OT_ERROR_NONE &&
         masterKey.IsValid() &&
         memcmp(&masterKey.GetNetworkMasterKey(), &Get<KeyManager>().GetMasterKey(), OT_MASTER_KEY_SIZE))
     {
         doesAffectConnectivity = true;
         doesAffectMasterKey    = true;
     }
 
     // check active timestamp rollback
     if (type == Tlv::kPendingTimestamp &&
         (masterKey.GetLength() == 0 ||
          memcmp(&masterKey.GetNetworkMasterKey(), &Get<KeyManager>().GetMasterKey(), OT_MASTER_KEY_SIZE) == 0))
     {
         // no change to master key, active timestamp must be ahead
         const Timestamp *localActiveTimestamp = Get<ActiveDataset>().GetTimestamp();
 
         VerifyOrExit(localActiveTimestamp == NULL || localActiveTimestamp->Compare(activeTimestamp) > 0,
                      state = StateTlv::kReject);
     }
 
     // check commissioner session id
     if (Tlv::GetTlv(aMessage, Tlv::kCommissionerSessionId, sizeof(sessionId), sessionId) == OT_ERROR_NONE)
     {
         CommissionerSessionIdTlv *localId;
 
         isUpdateFromCommissioner = true;
 
         localId = static_cast<CommissionerSessionIdTlv *>(
             Get<NetworkData::Leader>().GetCommissioningDataSubTlv(Tlv::kCommissionerSessionId));
 
         VerifyOrExit(sessionId.IsValid() && localId != NULL &&
                          localId->GetCommissionerSessionId() == sessionId.GetCommissionerSessionId(),
                      state = StateTlv::kReject);
     }
 
     // verify an MGMT_ACTIVE_SET.req from a Commissioner does not affect connectivity
     VerifyOrExit(!isUpdateFromCommissioner || type == Tlv::kPendingTimestamp || !doesAffectConnectivity,
                  state = StateTlv::kReject);
 
     if (isUpdateFromCommissioner)
     {
         // Thread specification allows partial dataset changes for MGMT_ACTIVE_SET.req/MGMT_PENDING_SET.req
         // from Commissioner based on existing active dataset.
         Get<ActiveDataset>().Read(dataset);
     }
 
     if (type == Tlv::kPendingTimestamp || !doesAffectConnectivity)
     {
         offset = aMessage.GetOffset();
 
         while (offset < aMessage.GetLength())
         {
             OT_TOOL_PACKED_BEGIN
             struct
             {
                 Tlv     tlv;
                 uint8_t value[Dataset::kMaxValueSize];
             } OT_TOOL_PACKED_END data;
 
             aMessage.Read(offset, sizeof(Tlv), &data.tlv);
             VerifyOrExit(data.tlv.GetLength() <= sizeof(data.value), state = StateTlv::kReject);
 
             aMessage.Read(offset + sizeof(Tlv), data.tlv.GetLength(), data.value);
 
             switch (data.tlv.GetType())
             {
             case Tlv::kCommissionerSessionId:
                 // do not store Commissioner Session ID TLV
                 break;
 
             case Tlv::kDelayTimer:
             {
                 DelayTimerTlv *delayTimerTlv = static_cast<DelayTimerTlv *>(&data.tlv);
 
                 if (doesAffectMasterKey && delayTimerTlv->GetDelayTimer() < DelayTimerTlv::kDelayTimerDefault)
                 {
                     delayTimerTlv->SetDelayTimer(DelayTimerTlv::kDelayTimerDefault);
                 }
                 else if (delayTimerTlv->GetDelayTimer() < Get<Leader>().GetDelayTimerMinimal())
                 {
                     delayTimerTlv->SetDelayTimer(Get<Leader>().GetDelayTimerMinimal());
                 }
             }
 
                 // fall through
 
             default:
                 VerifyOrExit(dataset.Set(data.tlv) == OT_ERROR_NONE, state = StateTlv::kReject);
                 break;
             }
 
             offset += sizeof(Tlv) + data.tlv.GetLength();
         }
 
         VerifyOrExit(Save(dataset) == OT_ERROR_NONE, state = StateTlv::kReject);
         Get<NetworkData::Leader>().IncrementVersion();
         Get<NetworkData::Leader>().IncrementStableVersion();
     }
     else
     {
         Get<PendingDataset>().ApplyActiveDataset(activeTimestamp, aMessage);
     }
 
     // notify commissioner if update is from thread device
     if (!isUpdateFromCommissioner)
     {
         BorderAgentLocatorTlv *borderAgentLocator;
         Ip6::Address           destination;
 
         borderAgentLocator = static_cast<BorderAgentLocatorTlv *>(
             Get<NetworkData::Leader>().GetCommissioningDataSubTlv(Tlv::kBorderAgentLocator));
         VerifyOrExit(borderAgentLocator != NULL);
 
         memset(&destination, 0, sizeof(destination));
         destination                = Get<Mle::MleRouter>().GetMeshLocal16();
         destination.mFields.m16[7] = HostSwap16(borderAgentLocator->GetBorderAgentLocator());
 
         Get<Leader>().SendDatasetChanged(destination);
     }
diff --git a/src/core/meshcop/meshcop_tlvs.hpp b/src/core/meshcop/meshcop_tlvs.hpp
index 9be06b1eb..8e8f7f0c6 100644
--- a/src/core/meshcop/meshcop_tlvs.hpp
+++ b/src/core/meshcop/meshcop_tlvs.hpp
@@ -588,36 +588,44 @@ class MeshLocalPrefixTlv : public Tlv
 {
 public:
     /**
      * This method initializes the TLV.
      *
      */
     void Init(void)
     {
         SetType(kMeshLocalPrefix);
         SetLength(sizeof(*this) - sizeof(Tlv));
     }
 
     /**
      * This method indicates whether or not the TLV appears to be well-formed.
      *
      * @retval TRUE   If the TLV appears to be well-formed.
      * @retval FALSE  If the TLV does not appear to be well-formed.
      *
      */
     bool IsValid(void) const { return GetLength() >= sizeof(*this) - sizeof(Tlv); }
 
+    /**
+     * This method returns the size (in bytes) of the Mesh Local Prefix field.
+     *
+     * @returns The size (in bytes) of the Mesh Local Prefix field (8 bytes).
+     *
+     */
+    uint8_t GetMeshLocalPrefixLength(void) const { return sizeof(mMeshLocalPrefix); }
+
     /**
      * This method returns the Mesh Local Prefix value.
      *
      * @returns The Mesh Local Prefix value.
      *
      */
     const otMeshLocalPrefix &GetMeshLocalPrefix(void) const { return mMeshLocalPrefix; }
 
     /**
      * This method sets the Mesh Local Prefix value.
      *
      * @param[in]  aMeshLocalPrefix  A pointer to the Mesh Local Prefix value.
      *
      */
     void SetMeshLocalPrefix(const otMeshLocalPrefix &aMeshLocalPrefix) { mMeshLocalPrefix = aMeshLocalPrefix; }
