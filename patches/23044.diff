commit 3c6b51d4a1f5682f8144fef1553b0357d3d83aaf
Author: Christos Zoulas <christos@zoulas.com>
Date:   Thu Jun 4 23:18:45 2020 +0000

    Pass an upper bound to file_strncmp because the string is not always NUL
    terminated (found by ClusterFuzz)

diff --git a/src/softmagic.c b/src/softmagic.c
index 86af2c99..0a8353b7 100644
--- a/src/softmagic.c
+++ b/src/softmagic.c
@@ -32,13 +32,13 @@
 #include "file.h"
 
 #ifndef	lint
-FILE_RCSID("@(#)$File: softmagic.c,v 1.296 2020/06/04 00:21:46 christos Exp $")
+FILE_RCSID("@(#)$File: softmagic.c,v 1.297 2020/06/04 23:18:45 christos Exp $")
 #endif	/* lint */
 
 #include "magic.h"
 #include <assert.h>
 #include <string.h>
 #include <ctype.h>
 #include <stdlib.h>
 #include <time.h>
 #include "der.h"
@@ -1902,441 +1902,443 @@ mget(struct magic_set *ms, struct magic *m, const struct buffer *b,
 }
 
 private uint64_t
-file_strncmp(const char *s1, const char *s2, size_t len, uint32_t flags)
+file_strncmp(const char *s1, const char *s2, size_t len, size_t maxlen,
+    uint32_t flags)
 {
 	/*
 	 * Convert the source args to unsigned here so that (1) the
 	 * compare will be unsigned as it is in strncmp() and (2) so
 	 * the ctype functions will work correctly without extra
 	 * casting.
 	 */
 	const unsigned char *a = RCAST(const unsigned char *, s1);
 	const unsigned char *b = RCAST(const unsigned char *, s2);
 	uint32_t ws = flags & (STRING_COMPACT_WHITESPACE |
 	    STRING_COMPACT_OPTIONAL_WHITESPACE);
-	const unsigned char *eb = b + (ws ? strlen(s2) : len);
+	const unsigned char *eb = b + (ws ? maxlen : len);
 	uint64_t v;
 
 	/*
 	 * What we want here is v = strncmp(s1, s2, len),
 	 * but ignoring any nulls.
 	 */
 	v = 0;
 	if (0L == flags) { /* normal string: do it fast */
 		while (len-- > 0)
 			if ((v = *b++ - *a++) != '\0')
 				break;
 	}
 	else { /* combine the others */
 		while (len-- > 0) {
 			if (b >= eb) {
 				v = 1;
 				break;
 			}
 			if ((flags & STRING_IGNORE_LOWERCASE) &&
 			    islower(*a)) {
 				if ((v = tolower(*b++) - *a++) != '\0')
 					break;
 			}
 			else if ((flags & STRING_IGNORE_UPPERCASE) &&
 			    isupper(*a)) {
 				if ((v = toupper(*b++) - *a++) != '\0')
 					break;
 			}
 			else if ((flags & STRING_COMPACT_WHITESPACE) &&
 			    isspace(*a)) {
 				a++;
 				if (isspace(*b++)) {
 					if (!isspace(*a))
 						while (b < eb && isspace(*b))
 							b++;
 				}
 				else {
 					v = 1;
 					break;
 				}
 			}
 			else if ((flags & STRING_COMPACT_OPTIONAL_WHITESPACE) &&
 			    isspace(*a)) {
 				a++;
 				while (b < eb && isspace(*b))
 					b++;
 			}
 			else {
 				if ((v = *b++ - *a++) != '\0')
 					break;
 			}
 		}
 	}
 	return v;
 }
 
 private uint64_t
-file_strncmp16(const char *a, const char *b, size_t len, uint32_t flags)
+file_strncmp16(const char *a, const char *b, size_t len, size_t maxlen,
+    uint32_t flags)
 {
 	/*
 	 * XXX - The 16-bit string compare probably needs to be done
 	 * differently, especially if the flags are to be supported.
 	 * At the moment, I am unsure.
 	 */
 	flags = 0;
-	return file_strncmp(a, b, len, flags);
+	return file_strncmp(a, b, len, maxlen, flags);
 }
 
 private int
 magiccheck(struct magic_set *ms, struct magic *m)
 {
 	uint64_t l = m->value.q;
 	uint64_t v;
 	float fl, fv;
 	double dl, dv;
 	int matched;
 	union VALUETYPE *p = &ms->ms_value;
 
 	switch (m->type) {
 	case FILE_BYTE:
 		v = p->b;
 		break;
 
 	case FILE_SHORT:
 	case FILE_BESHORT:
 	case FILE_LESHORT:
 		v = p->h;
 		break;
 
 	case FILE_LONG:
 	case FILE_BELONG:
 	case FILE_LELONG:
 	case FILE_MELONG:
 	case FILE_DATE:
 	case FILE_BEDATE:
 	case FILE_LEDATE:
 	case FILE_MEDATE:
 	case FILE_LDATE:
 	case FILE_BELDATE:
 	case FILE_LELDATE:
 	case FILE_MELDATE:
 		v = p->l;
 		break;
 
 	case FILE_QUAD:
 	case FILE_LEQUAD:
 	case FILE_BEQUAD:
 	case FILE_QDATE:
 	case FILE_BEQDATE:
 	case FILE_LEQDATE:
 	case FILE_QLDATE:
 	case FILE_BEQLDATE:
 	case FILE_LEQLDATE:
 	case FILE_QWDATE:
 	case FILE_BEQWDATE:
 	case FILE_LEQWDATE:
 	case FILE_OFFSET:
 		v = p->q;
 		break;
 
 	case FILE_FLOAT:
 	case FILE_BEFLOAT:
 	case FILE_LEFLOAT:
 		fl = m->value.f;
 		fv = p->f;
 		switch (m->reln) {
 		case 'x':
 			matched = 1;
 			break;
 
 		case '!':
 			matched = fv != fl;
 			break;
 
 		case '=':
 			matched = fv == fl;
 			break;
 
 		case '>':
 			matched = fv > fl;
 			break;
 
 		case '<':
 			matched = fv < fl;
 			break;
 
 		default:
 			file_magerror(ms, "cannot happen with float: invalid relation `%c'",
 			    m->reln);
 			return -1;
 		}
 		return matched;
 
 	case FILE_DOUBLE:
 	case FILE_BEDOUBLE:
 	case FILE_LEDOUBLE:
 		dl = m->value.d;
 		dv = p->d;
 		switch (m->reln) {
 		case 'x':
 			matched = 1;
 			break;
 
 		case '!':
 			matched = dv != dl;
 			break;
 
 		case '=':
 			matched = dv == dl;
 			break;
 
 		case '>':
 			matched = dv > dl;
 			break;
 
 		case '<':
 			matched = dv < dl;
 			break;
 
 		default:
 			file_magerror(ms, "cannot happen with double: invalid relation `%c'", m->reln);
 			return -1;
 		}
 		return matched;
 
 	case FILE_DEFAULT:
 	case FILE_CLEAR:
 		l = 0;
 		v = 0;
 		break;
 
 	case FILE_STRING:
 	case FILE_PSTRING:
 		l = 0;
 		v = file_strncmp(m->value.s, p->s, CAST(size_t, m->vallen),
-		    m->str_flags);
+		    sizeof(p->s), m->str_flags);
 		break;
 
 	case FILE_BESTRING16:
 	case FILE_LESTRING16:
 		l = 0;
 		v = file_strncmp16(m->value.s, p->s, CAST(size_t, m->vallen),
-		    m->str_flags);
+		    sizeof(p->s), m->str_flags);
 		break;
 
 	case FILE_SEARCH: { /* search ms->search.s for the string m->value.s */
 		size_t slen;
 		size_t idx;
 
 		if (ms->search.s == NULL)
 			return 0;
 
 		slen = MIN(m->vallen, sizeof(m->value.s));
 		l = 0;
 		v = 0;
 #ifdef HAVE_MEMMEM
 		if (slen > 0 && m->str_flags == 0) {
 			const char *found;
 			idx = m->str_range + slen;
 			if (m->str_range == 0 || ms->search.s_len < idx)
 				idx = ms->search.s_len;
 			found = CAST(const char *, memmem(ms->search.s, idx,
 			    m->value.s, slen));
 			if (!found)
 				return 0;
 			idx = found - ms->search.s;
 			ms->search.offset += idx;
 			ms->search.rm_len = ms->search.s_len - idx;
 			break;
 		}
 #endif
 
 		for (idx = 0; m->str_range == 0 || idx < m->str_range; idx++) {
 			if (slen + idx > ms->search.s_len)
 				return 0;
 
 			v = file_strncmp(m->value.s, ms->search.s + idx, slen,
-			    m->str_flags);
+			    ms->search.s_len - idx, m->str_flags);
 			if (v == 0) {	/* found match */
 				ms->search.offset += idx;
 				ms->search.rm_len = ms->search.s_len - idx;
 				break;
 			}
 		}
 		break;
 	}
 	case FILE_REGEX: {
 		int rc;
 		file_regex_t rx;
 		const char *search;
 
 		if (ms->search.s == NULL)
 			return 0;
 
 		l = 0;
 		rc = file_regcomp(&rx, m->value.s,
 		    REG_EXTENDED|REG_NEWLINE|
 		    ((m->str_flags & STRING_IGNORE_CASE) ? REG_ICASE : 0));
 		if (rc) {
 			file_regerror(&rx, rc, ms);
 			v = CAST(uint64_t, -1);
 		} else {
 			regmatch_t pmatch;
 			size_t slen = ms->search.s_len;
 			char *copy;
 			if (slen != 0) {
 			    copy = CAST(char *, malloc(slen));
 			    if (copy == NULL)  {
 				file_regfree(&rx);
 				file_error(ms, errno,
 				    "can't allocate %" SIZE_T_FORMAT "u bytes",
 				    slen);
 				return -1;
 			    }
 			    memcpy(copy, ms->search.s, slen);
 			    copy[--slen] = '\0';
 			    search = copy;
 			} else {
 			    search = CCAST(char *, "");
 			    copy = NULL;
 			}
 			rc = file_regexec(&rx, RCAST(const char *, search),
 			    1, &pmatch, 0);
 			free(copy);
 			switch (rc) {
 			case 0:
 				ms->search.s += CAST(int, pmatch.rm_so);
 				ms->search.offset += CAST(size_t, pmatch.rm_so);
 				ms->search.rm_len = CAST(size_t, 
 				    pmatch.rm_eo - pmatch.rm_so);
 				v = 0;
 				break;
 
 			case REG_NOMATCH:
 				v = 1;
 				break;
 
 			default:
 				file_regerror(&rx, rc, ms);
 				v = CAST(uint64_t, -1);
 				break;
 			}
 		}
 		file_regfree(&rx);
 		if (v == CAST(uint64_t, -1))
 			return -1;
 		break;
 	}
 	case FILE_INDIRECT:
 	case FILE_USE:
 	case FILE_NAME:
 		return 1;
 	case FILE_DER:
 		matched = der_cmp(ms, m);
 		if (matched == -1) {
 			if ((ms->flags & MAGIC_DEBUG) != 0) {
 				(void) fprintf(stderr,
 				    "EOF comparing DER entries");
 			}
 			return 0;
 		}
 		return matched;
 	case FILE_GUID:
 		v = memcmp(m->value.guid, p->guid, sizeof(p->guid));
 		break;
 	default:
 		file_magerror(ms, "invalid type %d in magiccheck()", m->type);
 		return -1;
 	}
 
 	v = file_signextend(ms, m, v);
 
 	switch (m->reln) {
 	case 'x':
 		if ((ms->flags & MAGIC_DEBUG) != 0)
 			(void) fprintf(stderr, "%" INT64_T_FORMAT
 			    "u == *any* = 1\n", CAST(unsigned long long, v));
 		matched = 1;
 		break;
 
 	case '!':
 		matched = v != l;
 		if ((ms->flags & MAGIC_DEBUG) != 0)
 			(void) fprintf(stderr, "%" INT64_T_FORMAT "u != %"
 			    INT64_T_FORMAT "u = %d\n",
 			    CAST(unsigned long long, v),
 			    CAST(unsigned long long, l), matched);
 		break;
 
 	case '=':
 		matched = v == l;
 		if ((ms->flags & MAGIC_DEBUG) != 0)
 			(void) fprintf(stderr, "%" INT64_T_FORMAT "u == %"
 			    INT64_T_FORMAT "u = %d\n",
 			    CAST(unsigned long long, v),
 			    CAST(unsigned long long, l), matched);
 		break;
 
 	case '>':
 		if (m->flag & UNSIGNED) {
 			matched = v > l;
 			if ((ms->flags & MAGIC_DEBUG) != 0)
 				(void) fprintf(stderr, "%" INT64_T_FORMAT
 				    "u > %" INT64_T_FORMAT "u = %d\n",
 				    CAST(unsigned long long, v),
 				    CAST(unsigned long long, l), matched);
 		}
 		else {
 			matched = CAST(int64_t, v) > CAST(int64_t, l);
 			if ((ms->flags & MAGIC_DEBUG) != 0)
 				(void) fprintf(stderr, "%" INT64_T_FORMAT
 				    "d > %" INT64_T_FORMAT "d = %d\n",
 				    CAST(long long, v),
 				    CAST(long long, l), matched);
 		}
 		break;
 
 	case '<':
 		if (m->flag & UNSIGNED) {
 			matched = v < l;
 			if ((ms->flags & MAGIC_DEBUG) != 0)
 				(void) fprintf(stderr, "%" INT64_T_FORMAT
 				    "u < %" INT64_T_FORMAT "u = %d\n",
 				    CAST(unsigned long long, v),
 				    CAST(unsigned long long, l), matched);
 		}
 		else {
 			matched = CAST(int64_t, v) < CAST(int64_t, l);
 			if ((ms->flags & MAGIC_DEBUG) != 0)
 				(void) fprintf(stderr, "%" INT64_T_FORMAT
 				    "d < %" INT64_T_FORMAT "d = %d\n",
 				     CAST(long long, v),
 				     CAST(long long, l), matched);
 		}
 		break;
 
 	case '&':
 		matched = (v & l) == l;
 		if ((ms->flags & MAGIC_DEBUG) != 0)
 			(void) fprintf(stderr, "((%" INT64_T_FORMAT "x & %"
 			    INT64_T_FORMAT "x) == %" INT64_T_FORMAT
 			    "x) = %d\n", CAST(unsigned long long, v),
 			    CAST(unsigned long long, l),
 			    CAST(unsigned long long, l),
 			    matched);
 		break;
 
 	case '^':
 		matched = (v & l) != l;
 		if ((ms->flags & MAGIC_DEBUG) != 0)
 			(void) fprintf(stderr, "((%" INT64_T_FORMAT "x & %"
 			    INT64_T_FORMAT "x) != %" INT64_T_FORMAT
 			    "x) = %d\n", CAST(unsigned long long, v),
 			    CAST(unsigned long long, l),
 			    CAST(unsigned long long, l), matched);
 		break;
 
 	default:
 		file_magerror(ms, "cannot happen: invalid relation `%c'",
 		    m->reln);
 		return -1;
 	}
 
 	return matched;
 }
