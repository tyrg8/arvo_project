commit a7c64ff42f1c67960acb9686555ecbc683e3762c
Author: Fraunhofer IIS FDK <audio-fdk@iis.fraunhofer.de>
Date:   Thu Apr 9 17:54:50 2020 +0200

    Fix unsigned integer overflow in Hcr_State_BODY_SIGN_ESC__ESC_WORD().
    
    Bug: 176246647
    Test: atest DecoderTestXheAac DecoderTestAacDrc
    Change-Id: I5eb0f88a55e856c427f9e4647332070f66e673c5

diff --git a/libAACdec/src/aacdec_hcrs.cpp b/libAACdec/src/aacdec_hcrs.cpp
index 44b32a5..5e3f9ac 100644
--- a/libAACdec/src/aacdec_hcrs.cpp
+++ b/libAACdec/src/aacdec_hcrs.cpp
@@ -1,7 +1,7 @@
 /* -----------------------------------------------------------------------------
 Software License for The Fraunhofer FDK AAC Codec Library for Android
 
-© Copyright  1995 - 2019 Fraunhofer-Gesellschaft zur Förderung der angewandten
+© Copyright  1995 - 2020 Fraunhofer-Gesellschaft zur Förderung der angewandten
 Forschung e.V. All rights reserved.
 
  1.    INTRODUCTION
@@ -128,225 +128,227 @@ using a state-machine.
 --------------------------------------------------------------------------------------------
 */
 void DecodeNonPCWs(HANDLE_FDK_BITSTREAM bs, H_HCR_INFO pHcr) {
   UINT numValidSegment;
   INT segmentOffset;
   INT codewordOffsetBase;
   INT codewordOffset;
   UINT trial;
 
   UINT *pNumSegment;
   SCHAR *pRemainingBitsInSegment;
   UINT *pSegmentBitfield;
   UCHAR *pNumWordForBitfield;
   USHORT *pNumBitValidInLastWord;
   UINT *pCodewordBitfield;
   INT bitfieldWord;
   INT bitInWord;
   UINT tempWord;
   UINT interMediateWord;
   INT tempBit;
   INT carry;
 
   UINT numCodeword;
   UCHAR numSet;
   UCHAR currentSet;
   UINT codewordInSet;
   UINT remainingCodewordsInSet;
   SCHAR *pSta;
   UINT ret;
 
   pNumSegment = &(pHcr->segmentInfo.numSegment);
   pRemainingBitsInSegment = pHcr->segmentInfo.pRemainingBitsInSegment;
   pSegmentBitfield = pHcr->segmentInfo.pSegmentBitfield;
   pNumWordForBitfield = &(pHcr->segmentInfo.numWordForBitfield);
   pNumBitValidInLastWord = &(pHcr->segmentInfo.pNumBitValidInLastWord);
   pSta = pHcr->nonPcwSideinfo.pSta;
 
   numValidSegment = InitSegmentBitfield(pNumSegment, pRemainingBitsInSegment,
                                         pSegmentBitfield, pNumWordForBitfield,
                                         pNumBitValidInLastWord);
 
   if (numValidSegment != 0) {
     numCodeword = pHcr->sectionInfo.numCodeword;
     numSet = ((numCodeword - 1) / *pNumSegment) + 1;
 
     pHcr->segmentInfo.readDirection = FROM_RIGHT_TO_LEFT;
 
     /* Process sets subsequently */
+    numSet = fMin(numSet, (UCHAR)MAX_HCR_SETS);
     for (currentSet = 1; currentSet < numSet; currentSet++) {
+
       /* step 1 */
       numCodeword -=
           *pNumSegment; /* number of remaining non PCWs [for all sets] */
       if (numCodeword < *pNumSegment) {
         codewordInSet = numCodeword; /* for last set */
       } else {
         codewordInSet = *pNumSegment; /* for all sets except last set */
       }
 
       /* step 2 */
       /* prepare array 'CodewordBitfield'; as much ones are written from left in
        * all words, as much decodedCodewordInSetCounter nonPCWs exist in this
        * set */
       tempWord = 0xFFFFFFFF;
       pCodewordBitfield = pHcr->segmentInfo.pCodewordBitfield;
 
       for (bitfieldWord = *pNumWordForBitfield; bitfieldWord != 0;
            bitfieldWord--) { /* loop over all used words */
         if (codewordInSet > NUMBER_OF_BIT_IN_WORD) { /* more codewords than
                                                         number of bits => fill
                                                         ones */
           /* fill a whole word with ones */
           *pCodewordBitfield++ = tempWord;
           codewordInSet -= NUMBER_OF_BIT_IN_WORD; /* subtract number of bits */
         } else {
           /* prepare last tempWord */
           for (remainingCodewordsInSet = codewordInSet;
                remainingCodewordsInSet < NUMBER_OF_BIT_IN_WORD;
                remainingCodewordsInSet++) {
             tempWord =
                 tempWord &
                 ~(1
                   << (NUMBER_OF_BIT_IN_WORD - 1 -
                       remainingCodewordsInSet)); /* set a zero at bit number
                                                     (NUMBER_OF_BIT_IN_WORD-1-i)
                                                     in tempWord */
           }
           *pCodewordBitfield++ = tempWord;
           tempWord = 0x00000000;
         }
       }
       pCodewordBitfield = pHcr->segmentInfo.pCodewordBitfield;
 
       /* step 3 */
       /* build non-PCW sideinfo for each non-PCW of the current set */
       InitNonPCWSideInformationForCurrentSet(pHcr);
 
       /* step 4 */
       /* decode all non-PCWs belonging to this set */
 
       /* loop over trials */
       codewordOffsetBase = 0;
       for (trial = *pNumSegment; trial > 0; trial--) {
         /* loop over number of words in bitfields */
         segmentOffset = 0; /* start at zero in every segment */
         pHcr->segmentInfo.segmentOffset =
             segmentOffset; /* store in structure for states */
         codewordOffset = codewordOffsetBase;
         pHcr->nonPcwSideinfo.codewordOffset =
             codewordOffset; /* store in structure for states */
 
         for (bitfieldWord = 0; bitfieldWord < *pNumWordForBitfield;
              bitfieldWord++) {
           /* derive tempWord with bitwise and */
           tempWord =
               pSegmentBitfield[bitfieldWord] & pCodewordBitfield[bitfieldWord];
 
           /* if tempWord is not zero, decode something */
           if (tempWord != 0) {
             /* loop over all bits in tempWord; start state machine if & is true
              */
             for (bitInWord = NUMBER_OF_BIT_IN_WORD; bitInWord > 0;
                  bitInWord--) {
               interMediateWord = ((UINT)1 << (bitInWord - 1));
               if ((tempWord & interMediateWord) == interMediateWord) {
                 /* get state and start state machine */
                 pHcr->nonPcwSideinfo.pState =
                     aStateConstant2State[pSta[codewordOffset]];
 
                 while (pHcr->nonPcwSideinfo.pState) {
                   ret = ((STATEFUNC)pHcr->nonPcwSideinfo.pState)(bs, pHcr);
                   if (ret != 0) {
                     return;
                   }
                 }
               }
 
               /* update both offsets */
               segmentOffset += 1; /* add NUMBER_OF_BIT_IN_WORD times one */
               pHcr->segmentInfo.segmentOffset = segmentOffset;
               codewordOffset += 1; /* add NUMBER_OF_BIT_IN_WORD times one */
               codewordOffset =
                   ModuloValue(codewordOffset,
                               *pNumSegment); /* index of the current codeword
                                                 lies within modulo range */
               pHcr->nonPcwSideinfo.codewordOffset = codewordOffset;
             }
           } else {
             segmentOffset +=
                 NUMBER_OF_BIT_IN_WORD; /* add NUMBER_OF_BIT_IN_WORD at once */
             pHcr->segmentInfo.segmentOffset = segmentOffset;
             codewordOffset +=
                 NUMBER_OF_BIT_IN_WORD; /* add NUMBER_OF_BIT_IN_WORD at once */
             codewordOffset = ModuloValue(
                 codewordOffset,
                 *pNumSegment); /* index of the current codeword lies within
                                   modulo range */
             pHcr->nonPcwSideinfo.codewordOffset = codewordOffset;
           }
         } /* end of bitfield word loop */
 
         /* decrement codeword - pointer */
         codewordOffsetBase -= 1;
         codewordOffsetBase =
             ModuloValue(codewordOffsetBase, *pNumSegment); /* index of the
                                                               current codeword
                                                               base lies within
                                                               modulo range */
 
         /* rotate numSegment bits in codewordBitfield */
         /* rotation of *numSegment bits in bitfield of codewords
          * (circle-rotation) */
         /* get last valid bit */
         tempBit = pCodewordBitfield[*pNumWordForBitfield - 1] &
                   (1 << (NUMBER_OF_BIT_IN_WORD - *pNumBitValidInLastWord));
         tempBit = tempBit >> (NUMBER_OF_BIT_IN_WORD - *pNumBitValidInLastWord);
 
         /* write zero into place where tempBit was fetched from */
         pCodewordBitfield[*pNumWordForBitfield - 1] =
             pCodewordBitfield[*pNumWordForBitfield - 1] &
             ~(1 << (NUMBER_OF_BIT_IN_WORD - *pNumBitValidInLastWord));
 
         /* rotate last valid word */
         pCodewordBitfield[*pNumWordForBitfield - 1] =
             pCodewordBitfield[*pNumWordForBitfield - 1] >> 1;
 
         /* transfare carry bit 0 from current word into bitposition 31 from next
          * word and rotate current word */
         for (bitfieldWord = *pNumWordForBitfield - 2; bitfieldWord > -1;
              bitfieldWord--) {
           /* get carry (=bit at position 0) from current word */
           carry = pCodewordBitfield[bitfieldWord] & 1;
 
           /* put the carry bit at position 31 into word right from current word
            */
           pCodewordBitfield[bitfieldWord + 1] =
               pCodewordBitfield[bitfieldWord + 1] |
               (carry << (NUMBER_OF_BIT_IN_WORD - 1));
 
           /* shift current word */
           pCodewordBitfield[bitfieldWord] =
               pCodewordBitfield[bitfieldWord] >> 1;
         }
 
         /* put tempBit into free bit-position 31 from first word */
         pCodewordBitfield[0] =
             pCodewordBitfield[0] | (tempBit << (NUMBER_OF_BIT_IN_WORD - 1));
 
       } /* end of trial loop */
 
       /* toggle read direction */
       pHcr->segmentInfo.readDirection =
           ToggleReadDirection(pHcr->segmentInfo.readDirection);
     }
     /* end of set loop */
 
     /* all non-PCWs of this spectrum are decoded */
   }
 
   /* all PCWs and all non PCWs are decoded. They are unbacksorted in output
    * buffer. Here is the Interface with comparing QSCs to asm decoding */
 }
 
 /*---------------------------------------------------------------------------------------------
      description:   This function prepares the bitfield used for the
                     segments. The list is set up once to be used in all
