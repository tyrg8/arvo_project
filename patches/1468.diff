commit d9051f8f3e60768f68867c3e3116e980d855215a
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Thu May 11 15:07:28 2017 +0200

    avcodec/mimic: Fix runtime error: index 96 out of bounds for type 'const int8_t [64]'
    
    Fixes: 1468/clusterfuzz-testcase-minimized-5235964056174592
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/targets/ffmpeg
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/mimic.c b/libavcodec/mimic.c
index 61ce1ce584..607dffa4a5 100644
--- a/libavcodec/mimic.c
+++ b/libavcodec/mimic.c
@@ -231,43 +231,43 @@ static const int8_t vlcdec_lookup[9][64] = {
 static int vlc_decode_block(MimicContext *ctx, int num_coeffs, int qscale)
 {
     int16_t *block = ctx->dct_block;
     unsigned int pos;
 
     ctx->bdsp.clear_block(block);
 
     block[0] = get_bits(&ctx->gb, 8) << 3;
 
     for (pos = 1; pos < num_coeffs; pos++) {
         uint32_t vlc, num_bits;
         int value;
         int coeff;
 
         vlc = get_vlc2(&ctx->gb, ctx->vlc.table, ctx->vlc.bits, 3);
         if (!vlc) /* end-of-block code */
             return 0;
         if (vlc == -1)
             return AVERROR_INVALIDDATA;
 
         /* pos_add and num_bits are coded in the vlc code */
         pos     += vlc & 15; // pos_add
         num_bits = vlc >> 4; // num_bits
 
         if (pos >= 64)
             return AVERROR_INVALIDDATA;
 
         value = get_bits(&ctx->gb, num_bits);
 
         /* FFmpeg's IDCT behaves somewhat different from the original code, so
          * a factor of 4 was added to the input */
 
-        coeff = vlcdec_lookup[num_bits][value];
+        coeff = ((int8_t*)vlcdec_lookup[num_bits])[value];
         if (pos < 3)
             coeff *= 16;
         else /* TODO Use >> 10 instead of / 1001 */
             coeff = (coeff * qscale) / 1001;
 
         block[ctx->scantable.permutated[pos]] = coeff;
     }
 
     return 0;
 }
