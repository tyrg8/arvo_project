commit 98eee3396d7e225d74208cc13c21dce853b10082
Author: Daniel Stenberg <daniel@haxx.se>
Date:   Mon Mar 12 23:52:28 2018 +0100

    Revert "hostip: fix compiler warning: 'variable set but not used'"
    
    This reverts commit a577059f92fc65bd6b81717f0737f897a5b34248.
    
    The assignment really needs to be there or we risk working with an
    uninitialized pointer.

diff --git a/lib/hostip.c b/lib/hostip.c
index d2ebe2fa4..8554d39d1 100644
--- a/lib/hostip.c
+++ b/lib/hostip.c
@@ -792,184 +792,184 @@ void Curl_hostcache_clean(struct Curl_easy *data,
 CURLcode Curl_loadhostpairs(struct Curl_easy *data)
 {
   struct curl_slist *hostp;
   char hostname[256];
   int port = 0;
 
   for(hostp = data->change.resolve; hostp; hostp = hostp->next) {
     if(!hostp->data)
       continue;
     if(hostp->data[0] == '-') {
       char *entry_id;
       size_t entry_len;
 
       if(2 != sscanf(hostp->data + 1, "%255[^:]:%d", hostname, &port)) {
         infof(data, "Couldn't parse CURLOPT_RESOLVE removal entry '%s'!\n",
               hostp->data);
         continue;
       }
 
       /* Create an entry id, based upon the hostname and port */
       entry_id = create_hostcache_id(hostname, port);
       /* If we can't create the entry id, fail */
       if(!entry_id) {
         return CURLE_OUT_OF_MEMORY;
       }
 
       entry_len = strlen(entry_id);
 
       if(data->share)
         Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
 
       /* delete entry, ignore if it didn't exist */
       Curl_hash_delete(data->dns.hostcache, entry_id, entry_len + 1);
 
       if(data->share)
         Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
 
       /* free the allocated entry_id again */
       free(entry_id);
     }
     else {
       struct Curl_dns_entry *dns;
       Curl_addrinfo *head = NULL, *tail = NULL;
       char *entry_id;
       size_t entry_len;
       char address[64];
-      char *addresses;
+      char *addresses = NULL;
       char *addr_begin;
       char *addr_end;
       char *port_ptr;
       char *end_ptr;
       char *host_end;
       unsigned long tmp_port;
       bool error = true;
 
       host_end = strchr(hostp->data, ':');
       if(!host_end ||
          ((host_end - hostp->data) >= (ptrdiff_t)sizeof(hostname)))
         goto err;
 
       memcpy(hostname, hostp->data, host_end - hostp->data);
       hostname[host_end - hostp->data] = '\0';
 
       port_ptr = host_end + 1;
       tmp_port = strtoul(port_ptr, &end_ptr, 10);
       if(tmp_port > USHRT_MAX || end_ptr == port_ptr || *end_ptr != ':')
         goto err;
 
       port = (int)tmp_port;
       addresses = end_ptr + 1;
 
       while(*end_ptr) {
         size_t alen;
         Curl_addrinfo *ai;
 
         addr_begin = end_ptr + 1;
         addr_end = strchr(addr_begin, ',');
         if(!addr_end)
           addr_end = addr_begin + strlen(addr_begin);
         end_ptr = addr_end;
 
         /* allow IP(v6) address within [brackets] */
         if(*addr_begin == '[') {
           if(addr_end == addr_begin || *(addr_end - 1) != ']')
             goto err;
           ++addr_begin;
           --addr_end;
         }
 
         alen = addr_end - addr_begin;
         if(!alen)
           continue;
 
         if(alen >= sizeof(address))
           goto err;
 
         memcpy(address, addr_begin, alen);
         address[alen] = '\0';
 
 #ifndef ENABLE_IPV6
         if(strchr(address, ':')) {
           infof(data, "Ignoring resolve address '%s', missing IPv6 support.\n",
                 address);
           continue;
         }
 #endif
 
         ai = Curl_str2addr(address, port);
         if(!ai) {
           infof(data, "Resolve address '%s' found illegal!\n", address);
           goto err;
         }
 
         if(tail) {
           tail->ai_next = ai;
           tail = tail->ai_next;
         }
         else {
           head = tail = ai;
         }
       }
 
       if(!head)
         goto err;
 
       error = false;
    err:
       if(error) {
         infof(data, "Couldn't parse CURLOPT_RESOLVE entry '%s'!\n",
               hostp->data);
         Curl_freeaddrinfo(head);
         continue;
       }
 
       /* Create an entry id, based upon the hostname and port */
       entry_id = create_hostcache_id(hostname, port);
       /* If we can't create the entry id, fail */
       if(!entry_id) {
         Curl_freeaddrinfo(head);
         return CURLE_OUT_OF_MEMORY;
       }
       entry_len = strlen(entry_id);
 
       if(data->share)
         Curl_share_lock(data, CURL_LOCK_DATA_DNS, CURL_LOCK_ACCESS_SINGLE);
 
       /* See if its already in our dns cache */
       dns = Curl_hash_pick(data->dns.hostcache, entry_id, entry_len + 1);
 
       /* free the allocated entry_id again */
       free(entry_id);
 
       if(!dns) {
         /* if not in the cache already, put this host in the cache */
         dns = Curl_cache_addr(data, head, hostname, port);
         if(dns) {
           dns->timestamp = 0; /* mark as added by CURLOPT_RESOLVE */
           /* release the returned reference; the cache itself will keep the
            * entry alive: */
           dns->inuse--;
         }
       }
       else {
         /* this is a duplicate, free it again */
         infof(data, "RESOLVE %s:%d is already cached, %s not stored!\n",
               hostname, port, addresses);
         Curl_freeaddrinfo(head);
       }
 
       if(data->share)
         Curl_share_unlock(data, CURL_LOCK_DATA_DNS);
 
       if(!dns) {
         Curl_freeaddrinfo(head);
         return CURLE_OUT_OF_MEMORY;
       }
       infof(data, "Added %s:%d:%s to DNS cache\n",
             hostname, port, addresses);
     }
   }
   data->change.resolve = NULL; /* dealt with now */
 
   return CURLE_OK;
 }
