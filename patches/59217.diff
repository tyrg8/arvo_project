commit bf61ca1bcd64f7a457a8290f2a119bf62ecbb8e8
Author: Luca Deri <deri@ntop.org>
Date:   Mon May 22 19:05:37 2023 +0200

    Added fix for enforcing IPv4/v6 packet boundaries

diff --git a/src/NetworkInterface.cpp b/src/NetworkInterface.cpp
index a8ab6ad79..be4ea5d09 100644
--- a/src/NetworkInterface.cpp
+++ b/src/NetworkInterface.cpp
@@ -1553,331 +1553,344 @@ NetworkInterface *NetworkInterface::getDynInterface(u_int64_t criteria,
 
 /* **************************************************** */
 
-bool NetworkInterface::processPacket(
-    u_int32_t bridge_iface_idx, bool ingressPacket,
-    const struct bpf_timeval *when, const u_int64_t packet_time,
-    struct ndpi_ethhdr *eth, u_int16_t vlan_id, struct ndpi_iphdr *iph,
-    struct ndpi_ipv6hdr *ip6, u_int16_t ip_offset,
-    u_int16_t encapsulation_overhead, u_int32_t len_on_wire,
-    const struct pcap_pkthdr *h, const u_char *packet, u_int16_t *ndpiProtocol,
+bool NetworkInterface::processPacket(u_int32_t bridge_iface_idx, bool ingressPacket,
+				     const struct bpf_timeval *when, const u_int64_t packet_time,
+				     struct ndpi_ethhdr *eth, u_int16_t vlan_id, struct ndpi_iphdr *iph,
+				     struct ndpi_ipv6hdr *ip6, u_int16_t ip_offset,
+				     u_int16_t encapsulation_overhead, u_int32_t len_on_wire,
+				     const struct pcap_pkthdr *h, const u_char *packet, u_int16_t *ndpiProtocol,
     Host **srcHost, Host **dstHost, Flow **hostFlow) {
   u_int16_t trusted_ip_len = max_val(0, (int)h->caplen - ip_offset);
   u_int16_t trusted_payload_len = 0;
   u_int32_t private_flow_id = 0;
   bool src2dst_direction;
   u_int8_t l4_proto;
   Flow *flow;
   Mac *srcMac = NULL, *dstMac = NULL;
   IpAddress src_ip, dst_ip;
   ICMPinfo icmp_info;
   u_int16_t frame_padding = 0;
   u_int16_t src_port = 0, dst_port = 0;
   struct ndpi_tcphdr *tcph = NULL;
   struct ndpi_udphdr *udph = NULL;
   struct sctphdr *sctph = NULL;
   u_int16_t trusted_l4_packet_len;
   u_int8_t *l4, tcp_flags = 0, *payload = NULL;
   u_int8_t *ip;
   bool is_fragment = false, new_flow;
   bool pass_verdict = true;
   u_int16_t l4_len = 0, fragment_offset = 0;
 #ifndef HAVE_NEDGE
 #ifdef IMPLEMENT_SMART_FRAGMENTS
   u_int16_t fragment_extra_overhead = 0;
 #endif
 #endif
   u_int8_t tos;
 
   *hostFlow = NULL;
 
   if (!isSubInterface()) {
     bool processed = false;
 #ifdef NTOPNG_PRO
 #ifndef HAVE_NEDGE
     /* Custom disaggregation */
     if (sub_interfaces && (sub_interfaces->getNumSubInterfaces() > 0)) {
-      processed = sub_interfaces->processPacket(
-          bridge_iface_idx, ingressPacket, when, packet_time, eth, vlan_id, iph,
-          ip6, ip_offset, encapsulation_overhead, len_on_wire, h, packet,
-          ndpiProtocol, srcHost, dstHost, hostFlow);
+      processed = sub_interfaces->processPacket(bridge_iface_idx, ingressPacket, when, packet_time, eth, vlan_id, iph,
+						ip6, ip_offset, encapsulation_overhead, len_on_wire, h, packet,
+						ndpiProtocol, srcHost, dstHost, hostFlow);
     }
 #endif
 #endif
 
     if ((!processed) && (flowHashingMode != flowhashing_none)) {
       /* VLAN disaggregation */
       if ((flowHashingMode == flowhashing_vlan) && (vlan_id > 0)) {
         NetworkInterface *vIface;
 
         if ((vIface = getDynInterface((u_int32_t)vlan_id, false)) != NULL) {
           vIface->setTimeLastPktRcvd(h->ts.tv_sec);
-          pass_verdict = vIface->processPacket(
-              bridge_iface_idx, ingressPacket, when, packet_time, eth, vlan_id,
-              iph, ip6, ip_offset, encapsulation_overhead, len_on_wire, h,
-              packet, ndpiProtocol, srcHost, dstHost, hostFlow);
+          pass_verdict = vIface->processPacket(bridge_iface_idx, ingressPacket, when, packet_time, eth, vlan_id,
+					       iph, ip6, ip_offset, encapsulation_overhead, len_on_wire, h,
+					       packet, ndpiProtocol, srcHost, dstHost, hostFlow);
           processed = true;
         }
       }
     }
 
     if (processed && !showDynamicInterfaceTraffic()) {
       incStats(ingressPacket, when->tv_sec, ETHERTYPE_IP, NDPI_PROTOCOL_UNKNOWN,
                NDPI_PROTOCOL_CATEGORY_UNSPECIFIED, 0, len_on_wire, 1);
 
       return (pass_verdict);
     }
   }
 
   if (eth == NULL) {
     incStats(ingressPacket, when->tv_sec, ETHERTYPE_IP, NDPI_PROTOCOL_UNKNOWN,
              NDPI_PROTOCOL_CATEGORY_UNSPECIFIED, 0, len_on_wire, 1);
     return (pass_verdict);
   }
 
   if ((srcMac = getMac(eth->h_source, true /* Create if missing */,
                        true /* Inline call */))) {
     /* NOTE: in nEdge, stats are updated into Flow::update_hosts_stats */
 #ifndef HAVE_NEDGE
     srcMac->incSentStats(getTimeLastPktRcvd(), 1, len_on_wire);
 #endif
     srcMac->setSeenIface(bridge_iface_idx);
 
 #ifdef HAVE_NEDGE
     u_int16_t mac_pool = 0;
     char bufMac[24];
     char *mac_str;
 
     /* When captive portal is disabled, use the auto_assigned_pool_id as the
      * default MAC pool */
     if (host_pools &&
         (ntop->getPrefs()->get_auto_assigned_pool_id() != NO_HOST_POOL_ID) &&
         (!ntop->getPrefs()->isCaptivePortalEnabled()) &&
         (srcMac->locate() == located_on_lan_interface)) {
       if (!host_pools->findMacPool(srcMac->get_mac(), &mac_pool) ||
           (mac_pool == NO_HOST_POOL_ID)) {
         mac_str = Utils::formatMac(srcMac->get_mac(), bufMac, sizeof(bufMac));
         ntop->addToPool(mac_str, ntop->getPrefs()->get_auto_assigned_pool_id());
       }
     }
 #endif
   }
 
   if ((dstMac = getMac(eth->h_dest, true /* Create if missing */,
                        true /* Inline call */))) {
     /* NOTE: in nEdge, stats are updated into Flow::update_hosts_stats */
 #ifndef HAVE_NEDGE
     dstMac->incRcvdStats(getTimeLastPktRcvd(), 1, len_on_wire);
 #endif
   }
 
   if (iph != NULL) {
     u_int16_t ip_len, ip_tot_len;
 
     /* IPv4 */
     if ((trusted_ip_len < 20) || ((ip_len = iph->ihl * 4) == 0)) {
       incStats(ingressPacket, when->tv_sec, ETHERTYPE_IP, NDPI_PROTOCOL_UNKNOWN,
                NDPI_PROTOCOL_CATEGORY_UNSPECIFIED, 0, len_on_wire, 1);
       return (pass_verdict);
     }
 
     /* NOTE: ip_tot_len is not trusted as may be forged */
     ip_tot_len = ntohs(iph->tot_len);
+
+    if(ip_tot_len > (h->caplen - ip_offset)) {
+      /* Invalid lenght */
+      incStats(ingressPacket, when->tv_sec, ETHERTYPE_IP, NDPI_PROTOCOL_UNKNOWN,
+	       NDPI_PROTOCOL_CATEGORY_UNSPECIFIED, 0, len_on_wire, 1);
+      return (pass_verdict);
+    }
+    
     tos = iph->tos;
 
     /* Use the actual h->len and not the h->caplen to determine
        whether a packet is fragmented. */
     if (ip_len > (int)h->len - ip_offset ||
         (int)h->len - ip_offset < ip_tot_len ||
         (iph->frag_off & htons(0x1FFF /* IP_OFFSET */)) ||
         (iph->frag_off & htons(0x2000 /* More Fragments: set */))) {
       is_fragment = true;
       fragment_offset = ((ntohs(iph->frag_off) & 0x3fff) & 0x1FFF) * 8;
 
 #ifdef IMPLEMENT_SMART_FRAGMENTS
       if (fragment_offset) return (pass_verdict);
 #endif
     }
 
     l4_proto = iph->protocol;
     l4 = ((u_int8_t *)iph + ip_len);
     l4_len =
         ip_tot_len -
         ip_len; /* use len from the ip header to compute sequence numbers */
     ip = (u_int8_t *)iph;
 
     /* An ethernet frame can contain padding at the end of the packet.
      * Such padding can be identified by comparing the total packet length
      * reported into the IP header with the ethernet frame size. Such padding
      * should not be accounted in the L4 size. */
     if (packet + h->caplen > ip + ip_tot_len)
       frame_padding = packet + h->caplen - ip - ip_tot_len;
 
     tos = iph->tos;
   } else {
     /* IPv6 */
     u_int ipv6_shift = sizeof(const struct ndpi_ipv6hdr);
     u_int32_t *tos_ptr = (u_int32_t *)ip6;
 
     if (trusted_ip_len < sizeof(const struct ndpi_ipv6hdr)) {
       incStats(ingressPacket, when->tv_sec, ETHERTYPE_IPV6,
                NDPI_PROTOCOL_UNKNOWN, NDPI_PROTOCOL_CATEGORY_UNSPECIFIED, 0,
                len_on_wire, 1);
       return (pass_verdict);
     }
 
     l4_proto = ip6->ip6_hdr.ip6_un1_nxt;
 
     if ((l4_proto == 0x3C /* IPv6 destination option */) ||
         (l4_proto == 0x0 /* Hop-by-hop option */)) {
       u_int8_t *options = (u_int8_t *)ip6 + ipv6_shift;
 
       l4_proto = options[0];
       ipv6_shift += 8 * (options[1] + 1);
 
       if (trusted_ip_len < ipv6_shift) {
         incStats(ingressPacket, when->tv_sec, ETHERTYPE_IPV6,
                  NDPI_PROTOCOL_UNKNOWN, NDPI_PROTOCOL_CATEGORY_UNSPECIFIED, 0,
                  len_on_wire, 1);
         return (pass_verdict);
       }
     }
 
     l4 = (u_int8_t *)ip6 + ipv6_shift;
     l4_len = packet + h->len - l4;
     ip = (u_int8_t *)ip6;
 
     tos = ((ntohl(*tos_ptr) & 0xFF00000) >> 20) & 0xFF;
   }
 
-  trusted_l4_packet_len = packet + h->caplen - l4;
-
+  if((packet + h->caplen) > l4)
+    trusted_l4_packet_len = packet + h->caplen - l4;
+  else {
+    /* Invalid lenght */
+    incStats(ingressPacket, when->tv_sec, ETHERTYPE_IPV6,
+	     NDPI_PROTOCOL_UNKNOWN, NDPI_PROTOCOL_CATEGORY_UNSPECIFIED, 0,
+	     len_on_wire, 1);
+    return (pass_verdict);
+  }
+  
   if (trusted_l4_packet_len > frame_padding)
     trusted_l4_packet_len -= frame_padding;
 
   if (l4_proto == IPPROTO_TCP) {
     if (trusted_l4_packet_len >= sizeof(struct ndpi_tcphdr)) {
       u_int tcp_len;
 
       /* TCP */
       tcph = (struct ndpi_tcphdr *)l4;
       src_port = tcph->source, dst_port = tcph->dest;
       tcp_flags = l4[13];
       tcp_len = min_val(4 * tcph->doff, trusted_l4_packet_len);
       payload = &l4[tcp_len];
       trusted_payload_len = trusted_l4_packet_len - tcp_len;
       // TODO: check if payload should be set to NULL when trusted_payload_len
       // == 0
     } else {
       /* Packet too short: this is a faked packet */
       ntop->getTrace()->traceEvent(
           TRACE_INFO, "Invalid TCP packet received [%u bytes long]",
           trusted_l4_packet_len);
       incStats(ingressPacket, when->tv_sec, iph ? ETHERTYPE_IP : ETHERTYPE_IPV6,
                NDPI_PROTOCOL_UNKNOWN, NDPI_PROTOCOL_CATEGORY_UNSPECIFIED, 0,
                len_on_wire, 1);
       return (pass_verdict);
     }
   } else if (l4_proto == IPPROTO_UDP) {
     if (trusted_l4_packet_len >= sizeof(struct ndpi_udphdr)) {
       /* UDP */
       udph = (struct ndpi_udphdr *)l4;
       src_port = udph->source, dst_port = udph->dest;
       payload = &l4[sizeof(struct ndpi_udphdr)];
       trusted_payload_len = trusted_l4_packet_len - sizeof(struct ndpi_udphdr);
 
 #ifndef HAVE_NEDGE
 #ifdef IMPLEMENT_SMART_FRAGMENTS
       if (is_fragment)
         fragment_extra_overhead =
             ntohs(udph->len) - l4_len + sizeof(struct ndpi_iphdr);
 #endif
 #endif
     } else {
       /* Packet too short: this is a faked packet */
       ntop->getTrace()->traceEvent(
           TRACE_INFO, "Invalid UDP packet received [%u bytes long]",
           trusted_l4_packet_len);
       incStats(ingressPacket, when->tv_sec, iph ? ETHERTYPE_IP : ETHERTYPE_IPV6,
                NDPI_PROTOCOL_UNKNOWN, NDPI_PROTOCOL_CATEGORY_UNSPECIFIED, 0,
                len_on_wire, 1);
       return (pass_verdict);
     }
   } else if (l4_proto == IPPROTO_SCTP) {
     if (trusted_l4_packet_len >= sizeof(struct sctphdr)) {
       /* SCTP */
       sctph = (struct sctphdr *)l4;
       src_port = sctph->sport, dst_port = sctph->dport;
 
       payload = &l4[sizeof(struct sctphdr)];
       trusted_payload_len = trusted_l4_packet_len - sizeof(struct sctphdr);
     } else {
       /* Packet too short: this is a faked packet */
       ntop->getTrace()->traceEvent(
           TRACE_INFO, "Invalid SCTP packet received [%u bytes long]",
           trusted_l4_packet_len);
       incStats(ingressPacket, when->tv_sec, iph ? ETHERTYPE_IP : ETHERTYPE_IPV6,
                NDPI_PROTOCOL_UNKNOWN, NDPI_PROTOCOL_CATEGORY_UNSPECIFIED, 0,
                len_on_wire, 1);
       return (pass_verdict);
     }
   } else if (l4_proto == IPPROTO_ICMP) {
     icmp_info.dissectICMP(trusted_l4_packet_len, l4);
   } else {
     /* non TCP/UDP protocols */
   }
 
   if (iph != NULL)
     src_ip.set(iph->saddr), dst_ip.set(iph->daddr);
   else
     src_ip.set(&ip6->ip6_src), dst_ip.set(&ip6->ip6_dst);
 
 #if defined(WIN32) && defined(DEMO_WIN32)
   if (this->ethStats.getNumPackets() > MAX_NUM_PACKETS) {
     static bool showMsg = false;
 
     if (!showMsg) {
       ntop->getTrace()->traceEvent(
           TRACE_NORMAL,
           "-----------------------------------------------------------");
       ntop->getTrace()->traceEvent(
           TRACE_NORMAL,
           "WARNING: this demo application is a limited ntopng version able to");
       ntop->getTrace()->traceEvent(
           TRACE_NORMAL, "capture up to %d packets. If you are interested",
           MAX_NUM_PACKETS);
       ntop->getTrace()->traceEvent(
           TRACE_NORMAL, "in the full version please have a look at the ntop");
       ntop->getTrace()->traceEvent(TRACE_NORMAL,
                                    "home page http://www.ntop.org/.");
       ntop->getTrace()->traceEvent(
           TRACE_NORMAL,
           "-----------------------------------------------------------");
       ntop->getTrace()->traceEvent(TRACE_NORMAL, "");
       showMsg = true;
     }
 
     return (pass_verdict);
   }
 #endif
 
   /*
     We need to populate the private_flow_id with protocol-specific
     such as DNS....
 
     Unfortunately nDPI has not yet seen this packet so we need to
     implement a micro-DPI code here
   */
   if ((l4_proto == IPPROTO_UDP) && (trusted_payload_len > 20)) {
     u_int16_t fiftythree = htons(53);
 
     if ((src_port == fiftythree) || (dst_port == fiftythree)) {
       /* Looks like DNS */
       u_int16_t dns_transaction_id = (payload[0] << 8) + payload[1];
 
       // ntop->getTrace()->traceEvent(TRACE_NORMAL, "%04X", dns_transaction_id);
       private_flow_id = (u_int32_t)dns_transaction_id;
     }
   }
 
   INTERFACE_PROFILING_SECTION_ENTER("NetworkInterface::processPacket: getFlow",
                                     0);
