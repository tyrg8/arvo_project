commit 8f653c34c0dd46c39e2a5ebf9ff3fe9ec932fc4f
Author: Eduardo Silva <edsiper@gmail.com>
Date:   Fri Jun 11 18:15:31 2021 -0600

    parser: fix double-free
    
    Signed-off-by: Eduardo Silva <edsiper@gmail.com>

diff --git a/src/flb_parser.c b/src/flb_parser.c
index 74479f960..96844cbfd 100644
--- a/src/flb_parser.c
+++ b/src/flb_parser.c
@@ -442,263 +442,261 @@ static flb_sds_t get_parser_key(char *key,
 /* Config file: read [PARSER] definitions */
 static int parser_conf_file(const char *cfg, struct mk_rconf *fconf,
                             struct flb_config *config)
 {
     flb_sds_t name;
     flb_sds_t format;
     flb_sds_t regex;
     flb_sds_t time_fmt;
     flb_sds_t time_key;
     flb_sds_t time_offset;
     flb_sds_t types_str;
     flb_sds_t tmp_str;
     int time_keep;
     int time_strict;
     int types_len;
     struct mk_list *head;
     struct mk_list *decoders = NULL;
     struct mk_rconf_section *section;
     struct flb_parser_types *types = NULL;
 
     /* Read all [PARSER] sections */
     mk_list_foreach(head, &fconf->sections) {
         name = NULL;
         format = NULL;
         regex = NULL;
         time_fmt = NULL;
         time_key = NULL;
         time_offset = NULL;
         types_str = NULL;
         tmp_str = NULL;
 
         section = mk_list_entry(head, struct mk_rconf_section, _head);
         if (strcasecmp(section->name, "PARSER") != 0) {
             continue;
         }
 
         /* Name */
         name = get_parser_key("Name", config, section);
         if (!name) {
             flb_error("[parser] no parser 'name' found in file '%s'", cfg);
             goto fconf_error;
         }
 
         /* Format */
         format = get_parser_key("Format", config, section);
         if (!format) {
             flb_error("[parser] no parser 'format' found for '%s' in file '%s'",
                       name, cfg);
             goto fconf_error;
         }
 
         /* Regex (if 'format' == 'regex') */
         regex = get_parser_key("Regex", config, section);
         if (!regex && strcmp(format, "regex") == 0) {
             flb_error("[parser] no parser 'regex' found for '%s' in file '%s", name, cfg);
             goto fconf_error;
         }
 
         /* Time_Format */
         time_fmt = get_parser_key("Time_Format", config, section);
 
         /* Time_Key */
         time_key = get_parser_key("Time_Key", config, section);
 
         /* Time_Keep */
         time_keep = FLB_FALSE;
         tmp_str = get_parser_key("Time_Keep", config, section);
         if (tmp_str) {
             time_keep = flb_utils_bool(tmp_str);
             flb_sds_destroy(tmp_str);
         }
 
         /* Time_Strict */
         time_strict = FLB_TRUE;
         tmp_str = get_parser_key("Time_Strict", config, section);
         if (tmp_str) {
             time_strict = flb_utils_bool(tmp_str);
             flb_sds_destroy(tmp_str);
         }
 
         /* Time_Offset (UTC offset) */
         time_offset = get_parser_key("Time_Offset", config, section);
 
         /* Types */
         types_str = get_parser_key("Types", config, section);
         if (types_str) {
             types_len = proc_types_str(types_str, &types);
         }
         else {
             types_len = 0;
         }
 
         /* Decoders */
         decoders = flb_parser_decoder_list_create(section);
 
         /* Create the parser context */
         if (!flb_parser_create(name, format, regex,
                                time_fmt, time_key, time_offset, time_keep, time_strict,
                                types, types_len, decoders, config)) {
             goto fconf_error;
         }
 
         flb_debug("[parser] new parser registered: %s", name);
 
         flb_sds_destroy(name);
         flb_sds_destroy(format);
 
         if (regex) {
             flb_sds_destroy(regex);
         }
         if (time_fmt) {
             flb_sds_destroy(time_fmt);
         }
         if (time_key) {
             flb_sds_destroy(time_key);
         }
         if (time_offset) {
             flb_sds_destroy(time_offset);
         }
         if (types_str) {
             flb_sds_destroy(types_str);
         }
         decoders = NULL;
     }
 
-    mk_rconf_free(fconf);
     return 0;
 
  fconf_error:
     flb_sds_destroy(name);
     flb_sds_destroy(format);
     if (regex) {
         flb_sds_destroy(regex);
     }
     if (time_fmt) {
         flb_sds_destroy(time_fmt);
     }
     if (time_key) {
         flb_sds_destroy(time_key);
     }
     if (time_offset) {
         flb_sds_destroy(time_offset);
     }
     if (types_str) {
         flb_sds_destroy(types_str);
     }
     if (decoders) {
         flb_parser_decoder_list_destroy(decoders);
     }
     return -1;
 }
 
 /* Config file: read [MULTILINE_PARSER] definitions */
 static int multiline_parser_conf_file(const char *cfg, struct mk_rconf *fconf,
                                       struct flb_config *config)
 {
     flb_sds_t name;
     int type;
     flb_sds_t match_string;
     int negate;
     flb_sds_t key_content;
     flb_sds_t key_pattern;
     flb_sds_t key_group;
     flb_sds_t parser;
     flb_sds_t tmp;
     int flush_timeout;
     struct mk_list *head;
     struct mk_rconf_section *section;
     struct flb_ml *ml;
 
     /* Read all [PARSER] sections */
     mk_list_foreach(head, &fconf->sections) {
         name = NULL;
         type = -1;
         match_string = NULL;
         negate = FLB_FALSE;
         key_content = NULL;
         key_pattern = NULL;
         key_group = NULL;
         parser = NULL;
         flush_timeout = -1;
 
         section = mk_list_entry(head, struct mk_rconf_section, _head);
         if (strcasecmp(section->name, "MULTILINE_PARSER") != 0) {
             continue;
         }
 
         /* name */
         name = get_parser_key("name", config, section);
         if (!name) {
             flb_error("[multiline_parser] no 'name' defined in file '%s'", cfg);
             goto fconf_error;
         }
 
         /* type */
         tmp = get_parser_key("type", config, section);
         if (!tmp) {
             flb_error("[multiline_parser] no 'type' defined in file '%s'", cfg);
             goto fconf_error;
         }
         else {
             type = flb_ml_type_lookup(tmp);
             if (type == -1) {
                 flb_error("[multiline_parser] invalid type '%s'", tmp);
                 flb_sds_destroy(tmp);
                 goto fconf_error;
             }
             flb_sds_destroy(tmp);
         }
 
         /* match_string */
         match_string = get_parser_key("match_string", config, section);
 
         /* negate */
         tmp = get_parser_key("negate", config, section);
         if (tmp) {
             negate = flb_utils_bool(tmp);
             flb_sds_destroy(tmp);
         }
 
         /* key_content */
         key_content = get_parser_key("key_content", config, section);
 
         /* key_pattern */
         key_pattern = get_parser_key("key_pattern", config, section);
 
         /* key_group */
         key_group = get_parser_key("key_group", config, section);
 
         /* parser */
         parser = get_parser_key("parser", config, section);
 
         /* flush_timeout */
         tmp = get_parser_key("flush_timeout", config, section);
         if (tmp) {
             flush_timeout = atoi(tmp);
         }
 
         ml = flb_ml_create(config, name, type, match_string, negate,
                            flush_timeout, key_content, key_group, key_pattern,
                            NULL, parser);
 
         flb_sds_destroy(name);
         flb_sds_destroy(match_string);
         flb_sds_destroy(key_content);
         flb_sds_destroy(key_pattern);
         flb_sds_destroy(key_group);
     }
 
-    mk_rconf_free(fconf);
     return 0;
 
  fconf_error:
     flb_sds_destroy(name);
     flb_sds_destroy(match_string);
     flb_sds_destroy(key_content);
     flb_sds_destroy(key_pattern);
     flb_sds_destroy(key_group);
 
     return -1;
 }
 
 /* Load parsers from a configuration file */
