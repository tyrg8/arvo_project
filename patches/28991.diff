commit 81f70fba5f6f3fd4715cbe1d51e3b7e76ce22b5d
Author: Hayden Roche <hayden@wolfssl.com>
Date:   Mon Dec 28 18:03:42 2020 -0600

    Ensure that all leading zeros are skipped in sp_tohex.

diff --git a/wolfcrypt/src/sp_int.c b/wolfcrypt/src/sp_int.c
index af1c9c244..39684a232 100644
--- a/wolfcrypt/src/sp_int.c
+++ b/wolfcrypt/src/sp_int.c
@@ -12674,80 +12674,90 @@ static const char sp_hex_char[16] = {
 /* Put the big-endian, hex string encoding of a into str.
  *
  * Assumes str is large enough for result.
  * Use sp_radix_size() to calculate required length.
  *
  * @param  [in]   a    SP integer to convert.
  * @param  [out]  str  String to hold hex string result.
  *
  * @return  MP_OKAY on success.
  * @return  MP_VAL when a or str is NULL.
  */
 int sp_tohex(sp_int* a, char* str)
 {
     int err = MP_OKAY;
     int i;
     int j;
 
     if ((a == NULL) || (str == NULL)) {
         err = MP_VAL;
     }
     if (err == MP_OKAY) {
         /* quick out if its zero */
         if (sp_iszero(a) == MP_YES) {
     #ifndef WC_DISABLE_RADIX_ZERO_PAD
             *str++ = '0';
     #endif /* WC_DISABLE_RADIX_ZERO_PAD */
             *str++ = '0';
             *str = '\0';
         }
         else {
     #ifdef WOLFSSL_SP_INT_NEGATIVE
             if (a->sign == MP_NEG) {
                 *str = '-';
                 str++;
             }
     #endif /* WOLFSSL_SP_INT_NEGATIVE */
 
             i = a->used - 1;
     #ifndef WC_DISABLE_RADIX_ZERO_PAD
             for (j = SP_WORD_SIZE - 8; j >= 0; j -= 8) {
-                if (((a->dp[i] >> j) & 0xff) != 0)
+                if (((a->dp[i] >> j) & 0xff) != 0) {
                     break;
+                }
+                else if (j == 0) {
+                    j = SP_WORD_SIZE - 8;
+                    --i;
+                }
             }
             j += 4;
     #else
             for (j = SP_WORD_SIZE - 4; j >= 0; j -= 4) {
-                if (((a->dp[i] >> j) & 0xf) != 0)
+                if (((a->dp[i] >> j) & 0xf) != 0) {
                     break;
+                }
+                else if (j == 0) {
+                    j = SP_WORD_SIZE - 4;
+                    --i;
+                }
             }
     #endif /* WC_DISABLE_RADIX_ZERO_PAD */
             for (; j >= 0; j -= 4) {
                 *(str++) = sp_hex_char[(a->dp[i] >> j) & 0xf];
             }
             for (--i; i >= 0; i--) {
                 for (j = SP_WORD_SIZE - 4; j >= 0; j -= 4) {
                     *(str++) = sp_hex_char[(a->dp[i] >> j) & 0xf];
                 }
             }
             *str = '\0';
         }
     }
 
     return err;
 }
 #endif /* WOLFSSL_SP_MATH_ALL || WC_MP_TO_RADIX */
 
 #if defined(WOLFSSL_SP_MATH_ALL) || defined(WOLFSSL_KEY_GEN) || \
     defined(HAVE_COMP_KEY)
 /* Put the big-endian, decimal string encoding of a into str.
  *
  * Assumes str is large enough for result.
  * Use sp_radix_size() to calculate required length.
  *
  * @param  [in]   a    SP integer to convert.
  * @param  [out]  str  String to hold hex string result.
  *
  * @return  MP_OKAY on success.
  * @return  MP_VAL when a or str is NULL.
  * @return  MP_MEM when dynamic memory allocation fails.
  */
