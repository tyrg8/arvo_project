commit d33414d2ad27a5d2193c9ab0948ba7a282c2f910
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Tue Jun 18 23:55:56 2019 +0200

    avcodec/utils: Check bits_per_coded_sample
    
    This avoids the need for each decoder separately having to handle this case
    
    Fixes: shift exponent -100663046 is negative
    Fixes: out of array access
    Fixes: 15270/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_IFF_ILBM_fuzzer-5727829913763840
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/utils.c b/libavcodec/utils.c
index cc04b73471..1b1feca38c 100644
--- a/libavcodec/utils.c
+++ b/libavcodec/utils.c
@@ -760,251 +760,255 @@ FF_DISABLE_DEPRECATION_WARNINGS
         avctx->coded_frame = av_frame_alloc();
         if (!avctx->coded_frame) {
             ret = AVERROR(ENOMEM);
             goto free_and_end;
         }
 FF_ENABLE_DEPRECATION_WARNINGS
 #endif
 
         if (avctx->time_base.num <= 0 || avctx->time_base.den <= 0) {
             av_log(avctx, AV_LOG_ERROR, "The encoder timebase is not set.\n");
             ret = AVERROR(EINVAL);
             goto free_and_end;
         }
 
         if (avctx->codec->sample_fmts) {
             for (i = 0; avctx->codec->sample_fmts[i] != AV_SAMPLE_FMT_NONE; i++) {
                 if (avctx->sample_fmt == avctx->codec->sample_fmts[i])
                     break;
                 if (avctx->channels == 1 &&
                     av_get_planar_sample_fmt(avctx->sample_fmt) ==
                     av_get_planar_sample_fmt(avctx->codec->sample_fmts[i])) {
                     avctx->sample_fmt = avctx->codec->sample_fmts[i];
                     break;
                 }
             }
             if (avctx->codec->sample_fmts[i] == AV_SAMPLE_FMT_NONE) {
                 char buf[128];
                 snprintf(buf, sizeof(buf), "%d", avctx->sample_fmt);
                 av_log(avctx, AV_LOG_ERROR, "Specified sample format %s is invalid or not supported\n",
                        (char *)av_x_if_null(av_get_sample_fmt_name(avctx->sample_fmt), buf));
                 ret = AVERROR(EINVAL);
                 goto free_and_end;
             }
         }
         if (avctx->codec->pix_fmts) {
             for (i = 0; avctx->codec->pix_fmts[i] != AV_PIX_FMT_NONE; i++)
                 if (avctx->pix_fmt == avctx->codec->pix_fmts[i])
                     break;
             if (avctx->codec->pix_fmts[i] == AV_PIX_FMT_NONE
                 && !((avctx->codec_id == AV_CODEC_ID_MJPEG || avctx->codec_id == AV_CODEC_ID_LJPEG)
                      && avctx->strict_std_compliance <= FF_COMPLIANCE_UNOFFICIAL)) {
                 char buf[128];
                 snprintf(buf, sizeof(buf), "%d", avctx->pix_fmt);
                 av_log(avctx, AV_LOG_ERROR, "Specified pixel format %s is invalid or not supported\n",
                        (char *)av_x_if_null(av_get_pix_fmt_name(avctx->pix_fmt), buf));
                 ret = AVERROR(EINVAL);
                 goto free_and_end;
             }
             if (avctx->codec->pix_fmts[i] == AV_PIX_FMT_YUVJ420P ||
                 avctx->codec->pix_fmts[i] == AV_PIX_FMT_YUVJ411P ||
                 avctx->codec->pix_fmts[i] == AV_PIX_FMT_YUVJ422P ||
                 avctx->codec->pix_fmts[i] == AV_PIX_FMT_YUVJ440P ||
                 avctx->codec->pix_fmts[i] == AV_PIX_FMT_YUVJ444P)
                 avctx->color_range = AVCOL_RANGE_JPEG;
         }
         if (avctx->codec->supported_samplerates) {
             for (i = 0; avctx->codec->supported_samplerates[i] != 0; i++)
                 if (avctx->sample_rate == avctx->codec->supported_samplerates[i])
                     break;
             if (avctx->codec->supported_samplerates[i] == 0) {
                 av_log(avctx, AV_LOG_ERROR, "Specified sample rate %d is not supported\n",
                        avctx->sample_rate);
                 ret = AVERROR(EINVAL);
                 goto free_and_end;
             }
         }
         if (avctx->sample_rate < 0) {
             av_log(avctx, AV_LOG_ERROR, "Specified sample rate %d is not supported\n",
                     avctx->sample_rate);
             ret = AVERROR(EINVAL);
             goto free_and_end;
         }
         if (avctx->codec->channel_layouts) {
             if (!avctx->channel_layout) {
                 av_log(avctx, AV_LOG_WARNING, "Channel layout not specified\n");
             } else {
                 for (i = 0; avctx->codec->channel_layouts[i] != 0; i++)
                     if (avctx->channel_layout == avctx->codec->channel_layouts[i])
                         break;
                 if (avctx->codec->channel_layouts[i] == 0) {
                     char buf[512];
                     av_get_channel_layout_string(buf, sizeof(buf), -1, avctx->channel_layout);
                     av_log(avctx, AV_LOG_ERROR, "Specified channel layout '%s' is not supported\n", buf);
                     ret = AVERROR(EINVAL);
                     goto free_and_end;
                 }
             }
         }
         if (avctx->channel_layout && avctx->channels) {
             int channels = av_get_channel_layout_nb_channels(avctx->channel_layout);
             if (channels != avctx->channels) {
                 char buf[512];
                 av_get_channel_layout_string(buf, sizeof(buf), -1, avctx->channel_layout);
                 av_log(avctx, AV_LOG_ERROR,
                        "Channel layout '%s' with %d channels does not match number of specified channels %d\n",
                        buf, channels, avctx->channels);
                 ret = AVERROR(EINVAL);
                 goto free_and_end;
             }
         } else if (avctx->channel_layout) {
             avctx->channels = av_get_channel_layout_nb_channels(avctx->channel_layout);
         }
         if (avctx->channels < 0) {
             av_log(avctx, AV_LOG_ERROR, "Specified number of channels %d is not supported\n",
                     avctx->channels);
             ret = AVERROR(EINVAL);
             goto free_and_end;
         }
         if(avctx->codec_type == AVMEDIA_TYPE_VIDEO) {
             pixdesc = av_pix_fmt_desc_get(avctx->pix_fmt);
             if (    avctx->bits_per_raw_sample < 0
                 || (avctx->bits_per_raw_sample > 8 && pixdesc->comp[0].depth <= 8)) {
                 av_log(avctx, AV_LOG_WARNING, "Specified bit depth %d not possible with the specified pixel formats depth %d\n",
                     avctx->bits_per_raw_sample, pixdesc->comp[0].depth);
                 avctx->bits_per_raw_sample = pixdesc->comp[0].depth;
             }
             if (avctx->width <= 0 || avctx->height <= 0) {
                 av_log(avctx, AV_LOG_ERROR, "dimensions not set\n");
                 ret = AVERROR(EINVAL);
                 goto free_and_end;
             }
         }
         if (   (avctx->codec_type == AVMEDIA_TYPE_VIDEO || avctx->codec_type == AVMEDIA_TYPE_AUDIO)
             && avctx->bit_rate>0 && avctx->bit_rate<1000) {
             av_log(avctx, AV_LOG_WARNING, "Bitrate %"PRId64" is extremely low, maybe you mean %"PRId64"k\n", avctx->bit_rate, avctx->bit_rate);
         }
 
         if (!avctx->rc_initial_buffer_occupancy)
             avctx->rc_initial_buffer_occupancy = avctx->rc_buffer_size * 3LL / 4;
 
         if (avctx->ticks_per_frame && avctx->time_base.num &&
             avctx->ticks_per_frame > INT_MAX / avctx->time_base.num) {
             av_log(avctx, AV_LOG_ERROR,
                    "ticks_per_frame %d too large for the timebase %d/%d.",
                    avctx->ticks_per_frame,
                    avctx->time_base.num,
                    avctx->time_base.den);
             goto free_and_end;
         }
 
         if (avctx->hw_frames_ctx) {
             AVHWFramesContext *frames_ctx = (AVHWFramesContext*)avctx->hw_frames_ctx->data;
             if (frames_ctx->format != avctx->pix_fmt) {
                 av_log(avctx, AV_LOG_ERROR,
                        "Mismatching AVCodecContext.pix_fmt and AVHWFramesContext.format\n");
                 ret = AVERROR(EINVAL);
                 goto free_and_end;
             }
             if (avctx->sw_pix_fmt != AV_PIX_FMT_NONE &&
                 avctx->sw_pix_fmt != frames_ctx->sw_format) {
                 av_log(avctx, AV_LOG_ERROR,
                        "Mismatching AVCodecContext.sw_pix_fmt (%s) "
                        "and AVHWFramesContext.sw_format (%s)\n",
                        av_get_pix_fmt_name(avctx->sw_pix_fmt),
                        av_get_pix_fmt_name(frames_ctx->sw_format));
                 ret = AVERROR(EINVAL);
                 goto free_and_end;
             }
             avctx->sw_pix_fmt = frames_ctx->sw_format;
         }
     }
 
     avctx->pts_correction_num_faulty_pts =
     avctx->pts_correction_num_faulty_dts = 0;
     avctx->pts_correction_last_pts =
     avctx->pts_correction_last_dts = INT64_MIN;
 
     if (   !CONFIG_GRAY && avctx->flags & AV_CODEC_FLAG_GRAY
         && avctx->codec_descriptor->type == AVMEDIA_TYPE_VIDEO)
         av_log(avctx, AV_LOG_WARNING,
                "gray decoding requested but not enabled at configuration time\n");
 
     if (   avctx->codec->init && (!(avctx->active_thread_type&FF_THREAD_FRAME)
         || avctx->internal->frame_thread_encoder)) {
         ret = avctx->codec->init(avctx);
         if (ret < 0) {
             goto free_and_end;
         }
     }
 
     ret=0;
 
     if (av_codec_is_decoder(avctx->codec)) {
         if (!avctx->bit_rate)
             avctx->bit_rate = get_bit_rate(avctx);
         /* validate channel layout from the decoder */
         if (avctx->channel_layout) {
             int channels = av_get_channel_layout_nb_channels(avctx->channel_layout);
             if (!avctx->channels)
                 avctx->channels = channels;
             else if (channels != avctx->channels) {
                 char buf[512];
                 av_get_channel_layout_string(buf, sizeof(buf), -1, avctx->channel_layout);
                 av_log(avctx, AV_LOG_WARNING,
                        "Channel layout '%s' with %d channels does not match specified number of channels %d: "
                        "ignoring specified channel layout\n",
                        buf, channels, avctx->channels);
                 avctx->channel_layout = 0;
             }
         }
         if (avctx->channels && avctx->channels < 0 ||
             avctx->channels > FF_SANE_NB_CHANNELS) {
             ret = AVERROR(EINVAL);
             goto free_and_end;
         }
+        if (avctx->bits_per_coded_sample < 0) {
+            ret = AVERROR(EINVAL);
+            goto free_and_end;
+        }
         if (avctx->sub_charenc) {
             if (avctx->codec_type != AVMEDIA_TYPE_SUBTITLE) {
                 av_log(avctx, AV_LOG_ERROR, "Character encoding is only "
                        "supported with subtitles codecs\n");
                 ret = AVERROR(EINVAL);
                 goto free_and_end;
             } else if (avctx->codec_descriptor->props & AV_CODEC_PROP_BITMAP_SUB) {
                 av_log(avctx, AV_LOG_WARNING, "Codec '%s' is bitmap-based, "
                        "subtitles character encoding will be ignored\n",
                        avctx->codec_descriptor->name);
                 avctx->sub_charenc_mode = FF_SUB_CHARENC_MODE_DO_NOTHING;
             } else {
                 /* input character encoding is set for a text based subtitle
                  * codec at this point */
                 if (avctx->sub_charenc_mode == FF_SUB_CHARENC_MODE_AUTOMATIC)
                     avctx->sub_charenc_mode = FF_SUB_CHARENC_MODE_PRE_DECODER;
 
                 if (avctx->sub_charenc_mode == FF_SUB_CHARENC_MODE_PRE_DECODER) {
 #if CONFIG_ICONV
                     iconv_t cd = iconv_open("UTF-8", avctx->sub_charenc);
                     if (cd == (iconv_t)-1) {
                         ret = AVERROR(errno);
                         av_log(avctx, AV_LOG_ERROR, "Unable to open iconv context "
                                "with input character encoding \"%s\"\n", avctx->sub_charenc);
                         goto free_and_end;
                     }
                     iconv_close(cd);
 #else
                     av_log(avctx, AV_LOG_ERROR, "Character encoding subtitles "
                            "conversion needs a libavcodec built with iconv support "
                            "for this codec\n");
                     ret = AVERROR(ENOSYS);
                     goto free_and_end;
 #endif
                 }
             }
         }
 
 #if FF_API_AVCTX_TIMEBASE
         if (avctx->framerate.num > 0 && avctx->framerate.den > 0)
             avctx->time_base = av_inv_q(av_mul_q(avctx->framerate, (AVRational){avctx->ticks_per_frame, 1}));
 #endif
     }
     if (codec->priv_data_size > 0 && avctx->priv_data && codec->priv_class) {
         av_assert0(*(const AVClass **)avctx->priv_data == codec->priv_class);
     }
