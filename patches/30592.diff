commit 00a5a5d881d6dc1e4b4d2032e873b6fc3fc1d7b3
Author: Eric Blankenhorn <eric@wolfssl.com>
Date:   Thu Sep 23 08:10:34 2021 -0500

    Fix handling properties

diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index d392cc5..8667911 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -239,291 +239,296 @@ static void MqttClient_RespList_Remove(MqttClient *client, MqttPendResp *rmResp)
 static int MqttClient_RespList_Find(MqttClient *client,
     MqttPacketType packet_type, word16 packet_id, MqttPendResp **retResp)
 {
     int rc = 0;
     MqttPendResp *tmpResp;
 
     if (client == NULL)
         return MQTT_CODE_ERROR_BAD_ARG;
 
 #ifdef WOLFMQTT_DEBUG_CLIENT
     PRINTF("PendResp Find: Type %s (%d), ID %d",
         MqttPacket_TypeDesc(packet_type), packet_type, packet_id);
 #endif
 
     if (retResp)
         *retResp = NULL; /* clear */
 
     /* Find pending response entry */
     for (tmpResp = client->firstPendResp;
          tmpResp != NULL;
          tmpResp = tmpResp->next)
     {
         if (packet_type == tmpResp->packet_type &&
            (packet_id == tmpResp->packet_id))
         {
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("PendResp Found: %p, Type %s (%d), ID %d",
                 tmpResp, MqttPacket_TypeDesc(tmpResp->packet_type),
                 tmpResp->packet_type, tmpResp->packet_id);
         #endif
 
             if (retResp)
                 *retResp = tmpResp;
             rc = 1;
             break;
         }
     }
     return rc;
 }
 #endif /* WOLFMQTT_MULTITHREAD */
 
+#ifdef WOLFMQTT_V5
+static int Handle_Props(MqttProp* props)
+{
+    int rc = MQTT_CODE_SUCCESS;
+
+    /* If no properties, just return */
+    if (props != NULL) {
+    #ifdef WOLFMQTT_PROPERTY_CB
+        /* Check for properties set by the server */
+        if (packet_obj && client->property_cb) {
+            /* capture error if returned */
+            int rc_err = client->property_cb(client, props,
+                    client->property_ctx);
+            if (rc_err < 0) {
+                rc = rc_err;
+            }
+        }
+    #endif
+        /* Free the properties */
+        MqttProps_Free(props);
+    }
+    return rc;
+}
+#endif
+
+
 /* Returns length decoded or error (as negative) */
 /*! \brief      Take a received MQTT packet and try and decode it
  *  \param      client       MQTT client context
  *  \param      rx_buf       Incoming buffer data
  *  \param      rx_len       Incoming buffer length
  *  \param      p_decode     Opaque pointer to packet structure based on type
  *  \param      ppacket_type Decoded packet type
  *  \param      ppacket_qos  Decoded QoS level
  *  \param      ppacket_id   Decoded packet id
 
  *  \return     Returns length decoded or error (as negative) MQTT_CODE_ERROR_*
                 (see enum MqttPacketResponseCodes)
  */
 static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
     word32 rx_len, void *packet_obj, MqttPacketType* ppacket_type,
     MqttQoS* ppacket_qos, word16* ppacket_id)
 {
     int rc = MQTT_CODE_SUCCESS;
     MqttPacket* header;
     MqttPacketType packet_type;
     MqttQoS packet_qos;
     word16 packet_id = 0;
-#ifdef WOLFMQTT_V5
-    MqttProp* props = NULL;
-#endif
 
     /* must have rx buffer with at least 2 byes for header */
     if (rx_buf == NULL || rx_len < MQTT_PACKET_HEADER_MIN_SIZE) {
         return MQTT_CODE_ERROR_BAD_ARG;
     }
 
     /* Decode header */
     header = (MqttPacket*)rx_buf;
     packet_type = (MqttPacketType)MQTT_PACKET_TYPE_GET(header->type_flags);
     if (ppacket_type) {
         *ppacket_type = packet_type;
     }
     packet_qos = (MqttQoS)MQTT_PACKET_FLAGS_GET_QOS(header->type_flags);
     if (ppacket_qos) {
         *ppacket_qos = packet_qos;
     }
 
     /* Decode packet specific data (if requested) */
     if (ppacket_id || packet_obj) {
         switch (packet_type) {
         case MQTT_PACKET_TYPE_CONNECT_ACK:
         {
             MqttConnectAck connect_ack, *p_connect_ack = &connect_ack;
             if (packet_obj) {
                 p_connect_ack = (MqttConnectAck*)packet_obj;
             }
             else {
                 XMEMSET(p_connect_ack, 0, sizeof(MqttConnectAck));
             }
         #ifdef WOLFMQTT_V5
             p_connect_ack->protocol_level = client->protocol_level;
         #endif
             rc = MqttDecode_ConnectAck(rx_buf, rx_len, p_connect_ack);
         #ifdef WOLFMQTT_V5
             if (rc >= 0) {
-                props = p_connect_ack->props;
+                rc = Handle_Props(p_connect_ack->props);
             }
         #endif
             break;
         }
         case MQTT_PACKET_TYPE_PUBLISH:
         {
             MqttPublish publish, *p_publish = &publish;
             if (packet_obj) {
                 p_publish = (MqttPublish*)packet_obj;
             }
             else {
                 XMEMSET(p_publish, 0, sizeof(MqttPublish));
             }
         #ifdef WOLFMQTT_V5
             p_publish->protocol_level = client->protocol_level;
         #endif
             rc = MqttDecode_Publish(rx_buf, rx_len, p_publish);
             if (rc >= 0) {
                 packet_id = p_publish->packet_id;
             #ifdef WOLFMQTT_V5
-                props = p_publish->props;
+                rc = Handle_Props(p_publish->props);
             #endif
             }
             break;
         }
         case MQTT_PACKET_TYPE_PUBLISH_ACK:
         case MQTT_PACKET_TYPE_PUBLISH_REC:
         case MQTT_PACKET_TYPE_PUBLISH_REL:
         case MQTT_PACKET_TYPE_PUBLISH_COMP:
         {
             MqttPublishResp publish_resp, *p_publish_resp = &publish_resp;
             if (packet_obj) {
                 p_publish_resp = (MqttPublishResp*)packet_obj;
             }
             else {
                 XMEMSET(p_publish_resp, 0, sizeof(MqttPublishResp));
             }
         #ifdef WOLFMQTT_V5
                 p_publish_resp->protocol_level = client->protocol_level;
         #endif
                 rc = MqttDecode_PublishResp(rx_buf, rx_len, packet_type,
                 p_publish_resp);
             if (rc >= 0) {
                 packet_id = p_publish_resp->packet_id;
             #ifdef WOLFMQTT_V5
-                props = p_publish_resp->props;
+                rc = Handle_Props(p_publish_resp->props);
             #endif
             }
             break;
         }
         case MQTT_PACKET_TYPE_SUBSCRIBE_ACK:
         {
             MqttSubscribeAck subscribe_ack, *p_subscribe_ack = &subscribe_ack;
             if (packet_obj) {
                 p_subscribe_ack = (MqttSubscribeAck*)packet_obj;
             }
             else {
                 XMEMSET(p_subscribe_ack, 0, sizeof(MqttSubscribeAck));
             }
         #ifdef WOLFMQTT_V5
             p_subscribe_ack->protocol_level = client->protocol_level;
         #endif
             rc = MqttDecode_SubscribeAck(rx_buf, rx_len, p_subscribe_ack);
             if (rc >= 0) {
                 packet_id = p_subscribe_ack->packet_id;
             #ifdef WOLFMQTT_V5
-                props = p_subscribe_ack->props;
+                rc = Handle_Props(p_subscribe_ack->props);
             #endif
             }
             break;
         }
         case MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK:
         {
             MqttUnsubscribeAck unsubscribe_ack,
                                *p_unsubscribe_ack = &unsubscribe_ack;
             if (packet_obj) {
                 p_unsubscribe_ack = (MqttUnsubscribeAck*)packet_obj;
             }
             else {
                 XMEMSET(p_unsubscribe_ack, 0, sizeof(MqttUnsubscribeAck));
             }
         #ifdef WOLFMQTT_V5
             p_unsubscribe_ack->protocol_level = client->protocol_level;
         #endif
             rc = MqttDecode_UnsubscribeAck(rx_buf, rx_len, p_unsubscribe_ack);
             if (rc >= 0) {
                 packet_id = p_unsubscribe_ack->packet_id;
             #ifdef WOLFMQTT_V5
-                props = p_unsubscribe_ack->props;
+                rc = Handle_Props(p_unsubscribe_ack->props);
             #endif
             }
             break;
         }
         case MQTT_PACKET_TYPE_PING_RESP:
         {
             MqttPing ping, *p_ping = &ping;
             if (packet_obj) {
                 p_ping = (MqttPing*)packet_obj;
             }
             else {
                 XMEMSET(p_ping, 0, sizeof(MqttPing));
             }
             rc = MqttDecode_Ping(rx_buf, rx_len, p_ping);
             break;
         }
         case MQTT_PACKET_TYPE_AUTH:
         {
         #ifdef WOLFMQTT_V5
             MqttAuth auth, *p_auth = &auth;
             if (packet_obj) {
                 p_auth = (MqttAuth*)packet_obj;
             }
             else {
                 XMEMSET(p_auth, 0, sizeof(MqttAuth));
             }
             rc = MqttDecode_Auth(rx_buf, rx_len, p_auth);
             if (rc >= 0) {
-                props = p_auth->props;
+                rc = Handle_Props(p_auth->props);
             }
         #else
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
         #endif /* WOLFMQTT_V5 */
             break;
         }
         case MQTT_PACKET_TYPE_DISCONNECT:
         {
         #ifdef WOLFMQTT_V5
             MqttDisconnect disc, *p_disc = &disc;
             if (packet_obj) {
                 p_disc = (MqttDisconnect*)packet_obj;
             }
             else {
                 XMEMSET(p_disc, 0, sizeof(MqttDisconnect));
             }
             rc = MqttDecode_Disconnect(rx_buf, rx_len, p_disc);
             if (rc >= 0) {
-                props = p_disc->props;
+                rc = Handle_Props(p_disc->props);
             }
         #else
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
         #endif /* WOLFMQTT_V5 */
             break;
         }
         case MQTT_PACKET_TYPE_CONNECT:
         case MQTT_PACKET_TYPE_SUBSCRIBE:
         case MQTT_PACKET_TYPE_UNSUBSCRIBE:
         case MQTT_PACKET_TYPE_PING_REQ:
         case MQTT_PACKET_TYPE_ANY:
         case MQTT_PACKET_TYPE_RESERVED:
         default:
             /* these type are only encoded by client */
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
             break;
         } /* switch (packet_type) */
     }
 
     if (ppacket_id) {
         *ppacket_id = packet_id;
     }
 
-#ifdef WOLFMQTT_V5
-    if (props) {
-    #ifdef WOLFMQTT_PROPERTY_CB
-        /* Check for properties set by the server */
-        if (packet_obj && client->property_cb) {
-            /* capture error if returned */
-            int rc_err = client->property_cb(client, props,
-                    client->property_ctx);
-            if (rc_err < 0) {
-                rc = rc_err;
-            }
-        }
-    #endif
-        /* Free the properties */
-        MqttProps_Free(props);
-    }
-#endif
-
     (void)client;
 
 #ifdef WOLFMQTT_DEBUG_CLIENT
     PRINTF("MqttClient_DecodePacket: Rc %d, Len %d, Type %s (%d), ID %d,"
             " QoS %d",
         rc, rx_len, MqttPacket_TypeDesc(packet_type), packet_type, packet_id,
         packet_qos);
 #endif
 
     return rc;
 }
@@ -2134,13 +2139,21 @@ int MqttClient_WaitMessage_ex(MqttClient *client, MqttObject* msg,
         int timeout_ms)
 {
     return MqttClient_WaitType(client, msg, MQTT_PACKET_TYPE_ANY, 0,
         timeout_ms);
 }
+
 int MqttClient_WaitMessage(MqttClient *client, int timeout_ms)
 {
-    if (client == NULL)
-        return MQTT_CODE_ERROR_BAD_ARG;
-    return MqttClient_WaitMessage_ex(client, &client->msg, timeout_ms);
+    int rc = MQTT_CODE_ERROR_BAD_ARG;
+    if (client != NULL) {
+        rc = MqttClient_WaitMessage_ex(client, &client->msg, timeout_ms);
+        if (rc != MQTT_CODE_CONTINUE) {
+            /* Clear the union for the next call to MqttClient_WaitMessage */
+            XMEMSET(&client->msg, 0, sizeof(MqttObject));
+        }
+    }
+
+    return rc;
 }
 
 int MqttClient_NetConnect(MqttClient *client, const char* host,
