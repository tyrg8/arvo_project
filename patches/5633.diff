commit 58acd74f55f2ffd233053a5b06901ed0251fb32c
Author: Mike Reed <reed@google.com>
Date:   Mon Jan 29 12:09:41 2018 -0500

    validate that contours begin with moveTo
    
    Bug: skia:7507
    Change-Id: Iba6e99443c56402ac1417a094f08d346c6e5a1a8
    Reviewed-on: https://skia-review.googlesource.com/101128
    Commit-Queue: Mike Reed <reed@google.com>
    Reviewed-by: Mike Klein <mtklein@chromium.org>

diff --git a/src/core/SkPathRef.cpp b/src/core/SkPathRef.cpp
index 562838b530..c185abaeb7 100644
--- a/src/core/SkPathRef.cpp
+++ b/src/core/SkPathRef.cpp
@@ -127,78 +127,106 @@ static void transform_dir_and_start(const SkMatrix& matrix, bool isRRect, bool*
 void SkPathRef::CreateTransformedCopy(sk_sp<SkPathRef>* dst,
                                       const SkPathRef& src,
                                       const SkMatrix& matrix) {
     SkDEBUGCODE(src.validate();)
     if (matrix.isIdentity()) {
         if (dst->get() != &src) {
             src.ref();
             dst->reset(const_cast<SkPathRef*>(&src));
             SkDEBUGCODE((*dst)->validate();)
         }
         return;
     }
 
     if (!(*dst)->unique()) {
         dst->reset(new SkPathRef);
     }
 
     if (dst->get() != &src) {
         (*dst)->resetToSize(src.fVerbCnt, src.fPointCnt, src.fConicWeights.count());
         sk_careful_memcpy((*dst)->verbsMemWritable(), src.verbsMemBegin(),
                            src.fVerbCnt * sizeof(uint8_t));
         (*dst)->fConicWeights = src.fConicWeights;
     }
 
     SkASSERT((*dst)->countPoints() == src.countPoints());
     SkASSERT((*dst)->countVerbs() == src.countVerbs());
     SkASSERT((*dst)->fConicWeights.count() == src.fConicWeights.count());
 
     // Need to check this here in case (&src == dst)
     bool canXformBounds = !src.fBoundsIsDirty && matrix.rectStaysRect() && src.countPoints() > 1;
 
     matrix.mapPoints((*dst)->fPoints, src.points(), src.fPointCnt);
 
     /*
      *  Here we optimize the bounds computation, by noting if the bounds are
      *  already known, and if so, we just transform those as well and mark
      *  them as "known", rather than force the transformed path to have to
      *  recompute them.
      *
      *  Special gotchas if the path is effectively empty (<= 1 point) or
      *  if it is non-finite. In those cases bounds need to stay empty,
      *  regardless of the matrix.
      */
     if (canXformBounds) {
         (*dst)->fBoundsIsDirty = false;
         if (src.fIsFinite) {
             matrix.mapRect(&(*dst)->fBounds, src.fBounds);
             if (!((*dst)->fIsFinite = (*dst)->fBounds.isFinite())) {
                 (*dst)->fBounds.setEmpty();
             }
         } else {
             (*dst)->fIsFinite = false;
             (*dst)->fBounds.setEmpty();
         }
     } else {
         (*dst)->fBoundsIsDirty = true;
     }
 
     (*dst)->fSegmentMask = src.fSegmentMask;
 
     // It's an oval only if it stays a rect.
     bool rectStaysRect = matrix.rectStaysRect();
     (*dst)->fIsOval = src.fIsOval && rectStaysRect;
     (*dst)->fIsRRect = src.fIsRRect && rectStaysRect;
     if ((*dst)->fIsOval || (*dst)->fIsRRect) {
         unsigned start = src.fRRectOrOvalStartIdx;
         bool isCCW = SkToBool(src.fRRectOrOvalIsCCW);
         transform_dir_and_start(matrix, (*dst)->fIsRRect, &isCCW, &start);
         (*dst)->fRRectOrOvalIsCCW = isCCW;
         (*dst)->fRRectOrOvalStartIdx = start;
     }
 
     SkDEBUGCODE((*dst)->validate();)
 }
 
+static bool validate_verb_sequence(const uint8_t verbs[], int vCount) {
+    // verbs are stored backwards, but we need to visit them in logical order to determine if
+    // they form a valid sequence.
+
+    bool needsMoveTo = true;
+    bool invalidSequence = false;
+
+    for (int i = vCount - 1; i >= 0; --i) {
+        switch (verbs[i]) {
+            case SkPath::kMove_Verb:
+                needsMoveTo = false;
+                break;
+            case SkPath::kLine_Verb:
+            case SkPath::kQuad_Verb:
+            case SkPath::kConic_Verb:
+            case SkPath::kCubic_Verb:
+                invalidSequence |= needsMoveTo;
+                break;
+            case SkPath::kClose_Verb:
+                needsMoveTo = true;
+                break;
+            default:
+                return false;   // unknown verb
+        }
+    }
+    return !invalidSequence;
+}
+
 // Given the verb array, deduce the required number of pts and conics,
 // or if an invalid verb is encountered, return false.
 static bool deduce_pts_conics(const uint8_t verbs[], int vCount, int* ptCountPtr,
@@ -243,75 +271,78 @@ static bool deduce_pts_conics(const uint8_t verbs[], int vCount, int* ptCountPtr
 SkPathRef* SkPathRef::CreateFromBuffer(SkRBuffer* buffer) {
     std::unique_ptr<SkPathRef> ref(new SkPathRef);
 
     int32_t packed;
     if (!buffer->readS32(&packed)) {
         return nullptr;
     }
 
     ref->fIsFinite = (packed >> kIsFinite_SerializationShift) & 1;
     uint8_t segmentMask = (packed >> kSegmentMask_SerializationShift) & 0xF;
 
     int32_t verbCount, pointCount, conicCount;
     if (!buffer->readU32(&(ref->fGenerationID)) ||
         !buffer->readS32(&verbCount)            || (verbCount  < 0) ||
         !buffer->readS32(&pointCount)           || (pointCount < 0) ||
         !buffer->readS32(&conicCount)           || (conicCount < 0))
     {
         return nullptr;
     }
 
     uint64_t pointSize64 = sk_64_mul(pointCount, sizeof(SkPoint));
     uint64_t conicSize64 = sk_64_mul(conicCount, sizeof(SkScalar));
     if (!SkTFitsIn<size_t>(pointSize64) || !SkTFitsIn<size_t>(conicSize64)) {
         return nullptr;
     }
 
     size_t verbSize = verbCount * sizeof(uint8_t);
     size_t pointSize = SkToSizeT(pointSize64);
     size_t conicSize = SkToSizeT(conicSize64);
 
     {
         uint64_t requiredBufferSize = sizeof(SkRect);
         requiredBufferSize += verbSize;
         requiredBufferSize += pointSize;
         requiredBufferSize += conicSize;
         if (buffer->available() < requiredBufferSize) {
             return nullptr;
         }
     }
 
     ref->resetToSize(verbCount, pointCount, conicCount);
     SkASSERT(verbCount  == ref->countVerbs());
     SkASSERT(pointCount == ref->countPoints());
     SkASSERT(conicCount == ref->fConicWeights.count());
 
     if (!buffer->read(ref->verbsMemWritable(), verbSize) ||
         !buffer->read(ref->fPoints, pointSize) ||
         !buffer->read(ref->fConicWeights.begin(), conicSize) ||
         !buffer->read(&ref->fBounds, sizeof(SkRect))) {
         return nullptr;
     }
 
     // Check that the verbs are valid, and imply the correct number of pts and conics
     {
         int pCount, cCount;
+        if (!validate_verb_sequence(ref->verbsMemBegin(), ref->countVerbs())) {
+            return nullptr;
+        }
         if (!deduce_pts_conics(ref->verbsMemBegin(), ref->countVerbs(), &pCount, &cCount) ||
             pCount != ref->countPoints() || cCount != ref->fConicWeights.count()) {
             return nullptr;
         }
         if (!validate_conic_weights(ref->fConicWeights.begin(), ref->fConicWeights.count())) {
             return nullptr;
         }
         // Check that the bounds match the serialized bounds.
         SkRect bounds;
         if (ComputePtBounds(&bounds, *ref) != SkToBool(ref->fIsFinite) || bounds != ref->fBounds) {
             return nullptr;
         }
     }
 
     ref->fBoundsIsDirty = false;
 
     // resetToSize clears fSegmentMask and fIsOval
     ref->fSegmentMask = segmentMask;
     return ref.release();
 }
