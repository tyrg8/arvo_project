commit e614649056c9b753594269c90b5360046cbd02bc
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Fri Aug 4 19:04:52 2017 +0000

    morphFromESRI(): fixes heap-after-free uses. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=2864. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@39753 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/ogr/ogr_srs_esri.cpp b/gdal/ogr/ogr_srs_esri.cpp
index 7a0704d975..f9b98feb2c 100644
--- a/gdal/ogr/ogr_srs_esri.cpp
+++ b/gdal/ogr/ogr_srs_esri.cpp
@@ -1307,551 +1307,558 @@ int RemapGeogCSName( OGRSpatialReference* pOgr, const char *pszGeogCSName )
 OGRErr OGRSpatialReference::morphToESRI()
 
 {
 /* -------------------------------------------------------------------- */
 /*      Special case for EPSG:3857. Hard to deal with in the general    */
 /*      case as GDAL (at the time of writing) uses regular Mercator_1SP */
 /*      to model it.                                                    */
 /* -------------------------------------------------------------------- */
     const char* pszAuthName = GetAuthorityName(NULL);
     const char* pszAuthCode = GetAuthorityCode(NULL);
     if( (pszAuthName != NULL && EQUAL(pszAuthName, "EPSG") &&
          pszAuthCode != NULL && atoi(pszAuthCode) == 3857) ||
         (GetAttrValue("PROJCS") != NULL &&
          EQUAL(GetAttrValue("PROJCS"), "WGS 84 / Pseudo-Mercator")) )
     {
         Clear();
         const char* pszESRI_PE_WebMercator =
             "PROJCS[\"WGS_1984_Web_Mercator_Auxiliary_Sphere\","
             "GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\","
             "SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],"
             "PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],"
             "PROJECTION[\"Mercator_Auxiliary_Sphere\"],"
             "PARAMETER[\"False_Easting\",0.0],"
             "PARAMETER[\"False_Northing\",0.0],"
             "PARAMETER[\"Central_Meridian\",0.0],"
             "PARAMETER[\"Standard_Parallel_1\",0.0],"
             "PARAMETER[\"Auxiliary_Sphere_Type\",0.0],UNIT[\"Meter\",1.0]]";
         return importFromWkt( (char**) &pszESRI_PE_WebMercator );
     }
 
 /* -------------------------------------------------------------------- */
 /*      Fixup ordering, missing linear units, etc.                      */
 /* -------------------------------------------------------------------- */
     {
         const OGRErr eErr = Fixup();
         if( eErr != OGRERR_NONE )
             return eErr;
     }
 
 /* -------------------------------------------------------------------- */
 /*      Strip all CT parameters (AXIS, AUTHORITY, TOWGS84, etc).        */
 /* -------------------------------------------------------------------- */
     {
         const OGRErr eErr = StripCTParms();
         if( eErr != OGRERR_NONE )
             return eErr;
     }
 
     if( GetRoot() == NULL )
         return OGRERR_NONE;
 
 /* -------------------------------------------------------------------- */
 /*      There is a special case for Hotine Oblique Mercator to split    */
 /*      out the case with an angle to rectified grid.  Bug 423          */
 /* -------------------------------------------------------------------- */
     const char *pszProjection = GetAttrValue("PROJECTION");
 
     if( pszProjection != NULL
         && EQUAL(pszProjection, SRS_PT_HOTINE_OBLIQUE_MERCATOR)
         && fabs(GetProjParm(SRS_PP_AZIMUTH, 0.0) - 90) < 0.0001
         && fabs(GetProjParm(SRS_PP_RECTIFIED_GRID_ANGLE, 0.0) - 90) < 0.0001 )
     {
         SetNode( "PROJCS|PROJECTION",
                  "Hotine_Oblique_Mercator_Azimuth_Center" );
 
         // Ideally we should strip out of the rectified_grid_angle.
         // Strip off rectified_grid_angle -- Hope it is 90!
         OGR_SRSNode *poPROJCS = GetAttrNode( "PROJCS" );
         const int iRGAChild = FindProjParm( "rectified_grid_angle", poPROJCS );
         if( iRGAChild != -1 )
             poPROJCS->DestroyChild( iRGAChild);
 
         pszProjection = GetAttrValue("PROJECTION");
     }
 
 /* -------------------------------------------------------------------- */
 /*      Polar_Stereographic maps to ESRI codes                          */
 /*      Stereographic_South_Pole or Stereographic_North_Pole based      */
 /*      on latitude.                                                    */
 /* -------------------------------------------------------------------- */
     if( pszProjection != NULL
         && ( EQUAL(pszProjection, SRS_PT_POLAR_STEREOGRAPHIC) ))
     {
         if( GetProjParm(SRS_PP_LATITUDE_OF_ORIGIN, 0.0 ) < 0.0 )
         {
             SetNode( "PROJCS|PROJECTION",
                      "Stereographic_South_Pole" );
             pszProjection = GetAttrValue("PROJECTION");
         }
         else
         {
             SetNode( "PROJCS|PROJECTION",
                      "Stereographic_North_Pole" );
             pszProjection = GetAttrValue("PROJECTION");
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*      OBLIQUE_STEREOGRAPHIC maps to ESRI Double_Stereographic         */
 /* -------------------------------------------------------------------- */
     if( pszProjection != NULL
         && ( EQUAL(pszProjection, SRS_PT_OBLIQUE_STEREOGRAPHIC) ))
     {
         SetNode( "PROJCS|PROJECTION", "Double_Stereographic" );
     }
 
 /* -------------------------------------------------------------------- */
 /*      Translate PROJECTION keywords that are misnamed.                */
 /* -------------------------------------------------------------------- */
     // TODO(schwehr): How is applyRemapper safe with
     //   static const char * const apszProjMapping[]?
     GetRoot()->applyRemapper( "PROJECTION",
                               const_cast<char **>(apszProjMapping + 1),
                               const_cast<char **>(apszProjMapping),
                               2 );
     pszProjection = GetAttrValue("PROJECTION");
 
 /* -------------------------------------------------------------------- */
 /*      Translate DATUM keywords that are misnamed.                     */
 /* -------------------------------------------------------------------- */
     InitDatumMappingTable();
 
     GetRoot()->applyRemapper( "DATUM",
                               papszDatumMapping + 2, papszDatumMapping + 1, 3 );
 
     const char *pszProjCSName      = NULL;
     OGR_SRSNode *poProjCS          = NULL;
     OGR_SRSNode *poProjCSNodeChild = NULL;
 
 /* -------------------------------------------------------------------- */
 /*      Very specific handling for some well known geographic           */
 /*      coordinate systems.                                             */
 /* -------------------------------------------------------------------- */
     OGR_SRSNode *poGeogCS = GetAttrNode( "GEOGCS" );
     if( poGeogCS != NULL )
     {
         const char *pszGeogCSName = poGeogCS->GetChild(0)->GetValue();
         pszAuthName = GetAuthorityName("GEOGCS");
         const char *pszUTMPrefix = NULL;
         int nGCSCode = -1;
 
         if( pszAuthName != NULL && EQUAL(pszAuthName, "EPSG") )
             nGCSCode = atoi(GetAuthorityCode("GEOGCS"));
 
         if( nGCSCode == 4326
             || EQUAL(pszGeogCSName, "WGS84")
             || EQUAL(pszGeogCSName, "WGS 84") )
         {
             poGeogCS->GetChild(0)->SetValue( "GCS_WGS_1984" );
             pszUTMPrefix = "WGS_1984";
         }
         else if( nGCSCode == 4322
             || EQUAL(pszGeogCSName, "WGS72")
             || EQUAL(pszGeogCSName, "WGS 72") )
         {
             poGeogCS->GetChild(0)->SetValue( "GCS_WGS_1972" );
             pszUTMPrefix = "WGS_1972";
         }
         else if( nGCSCode == 4267
                  || EQUAL(pszGeogCSName, "NAD27")
                  || EQUAL(pszGeogCSName, "NAD 27") )
         {
             poGeogCS->GetChild(0)->SetValue( "GCS_North_American_1927" );
             pszUTMPrefix = "NAD_1927";
         }
         else if( nGCSCode == 4269
                  || EQUAL(pszGeogCSName, "NAD83")
                  || EQUAL(pszGeogCSName, "NAD 83") )
         {
             poGeogCS->GetChild(0)->SetValue( "GCS_North_American_1983" );
             pszUTMPrefix = "NAD_1983";
         }
         else if( nGCSCode == 4167
                  || EQUAL(pszGeogCSName, "NZGD2000")
                  || EQUAL(pszGeogCSName, "NZGD 2000") )
         {
             poGeogCS->GetChild(0)->SetValue( "GCS_NZGD_2000" );
             pszUTMPrefix = "NZGD_2000";
         }
         else if( nGCSCode == 4272
                  || EQUAL(pszGeogCSName, "NZGD49")
                  || EQUAL(pszGeogCSName, "NZGD 49") )
         {
             poGeogCS->GetChild(0)->SetValue( "GCS_New_Zealand_1949" );
             pszUTMPrefix = "NZGD_1949";
         }
 
 /* -------------------------------------------------------------------- */
 /*      Force Unnamed to Unknown for most common locations.             */
 /* -------------------------------------------------------------------- */
         static const char * const apszUnknownMapping[] = {
             "Unknown", "Unnamed",
             NULL, NULL
         };
 
         char **apszMap = const_cast<char **>(apszUnknownMapping);
 
         GetRoot()->applyRemapper("PROJCS", apszMap + 1, apszMap + 0, 2);
         GetRoot()->applyRemapper("GEOGCS", apszMap + 1, apszMap + 0, 2);
         GetRoot()->applyRemapper("DATUM", apszMap + 1, apszMap + 0, 2);
         GetRoot()->applyRemapper("SPHEROID", apszMap + 1, apszMap + 0, 2);
         GetRoot()->applyRemapper("PRIMEM", apszMap + 1, apszMap + 0, 2);
 
 /* -------------------------------------------------------------------- */
 /*      If the PROJCS name is unset, use the PROJECTION name in         */
 /*      place of unknown, or unnamed.  At the request of Peng Gao.      */
 /* -------------------------------------------------------------------- */
         if( (poProjCS = GetAttrNode( "PROJCS" )) != NULL )
             poProjCSNodeChild = poProjCS->GetChild(0);
 
         if( poProjCSNodeChild )
         {
             pszProjCSName = poProjCSNodeChild->GetValue();
             char *pszNewValue = CPLStrdup(pszProjCSName);
             MorphNameToESRI( &pszNewValue );
             poProjCSNodeChild->SetValue( pszNewValue );
             CPLFree( pszNewValue );
             pszProjCSName = poProjCSNodeChild->GetValue();
         }
 
         if( pszProjCSName != NULL
             && ( EQUAL(pszProjCSName, "unnamed")
                  || EQUAL(pszProjCSName, "unknown")
                  || EQUAL(pszProjCSName, "") ) )
         {
             if( GetAttrValue( "PROJECTION", 0 ) != NULL )
             {
                 pszProjCSName = GetAttrValue( "PROJECTION", 0 );
                 poProjCSNodeChild->SetValue( pszProjCSName );
             }
         }
 
 /* -------------------------------------------------------------------- */
 /*      Prepare very specific PROJCS names for UTM coordinate           */
 /*      systems.                                                        */
 /* -------------------------------------------------------------------- */
         int bNorth = FALSE;
         int nZone = 0;
 
         // Get zone from name first.
         if( pszProjCSName && STARTS_WITH_CI(pszProjCSName, "UTM Zone ") )
         {
             nZone = atoi(pszProjCSName+9);
             if( strstr(pszProjCSName, "North") )
                 bNorth = TRUE;
         }
 
         // If can not get from the name, from the parameters.
         if( nZone <= 0 )
             nZone = GetUTMZone( &bNorth );
 
         if( nZone > 0 && pszUTMPrefix )
         {
             char szUTMName[128] = {};
             if( bNorth )
                 snprintf( szUTMName, sizeof(szUTMName),
                           "%s_UTM_Zone_%dN", pszUTMPrefix, nZone );
             else
                 snprintf( szUTMName, sizeof(szUTMName),
                           "%s_UTM_Zone_%dS", pszUTMPrefix, nZone );
 
             if( poProjCSNodeChild )
                 poProjCSNodeChild->SetValue( szUTMName );
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*      Translate UNIT keywords that are misnamed, or even the wrong    */
 /*      case.                                                           */
 /* -------------------------------------------------------------------- */
     GetRoot()->applyRemapper( "UNIT",
                               const_cast<char **>(apszUnitMapping + 1),
                               const_cast<char **>(apszUnitMapping),
                               2 );
 
 /* -------------------------------------------------------------------- */
 /*      reset constants for decimal degrees to the exact string ESRI    */
 /*      expects when encountered to ensure a matchup.                   */
 /* -------------------------------------------------------------------- */
     OGR_SRSNode *poUnit = GetAttrNode( "GEOGCS|UNIT" );
 
     if( poUnit != NULL && poUnit->GetChildCount() >= 2
         && std::abs(GetAngularUnits()-0.0174532925199433) < 0.00000000001 )
     {
         poUnit->GetChild(0)->SetValue("Degree");
         poUnit->GetChild(1)->SetValue("0.017453292519943295");
     }
 
 /* -------------------------------------------------------------------- */
 /*      Make sure we reproduce US Feet exactly too.                     */
 /* -------------------------------------------------------------------- */
     poUnit = GetAttrNode( "PROJCS|UNIT" );
 
     if( poUnit != NULL && poUnit->GetChildCount() >= 2
         && std::abs(GetLinearUnits()- 0.30480060960121924) < 0.000000000000001)
     {
         poUnit->GetChild(0)->SetValue("Foot_US");
         poUnit->GetChild(1)->SetValue("0.30480060960121924");
     }
 
 /* -------------------------------------------------------------------- */
 /*      Remap parameters used for Albers.                               */
 /* -------------------------------------------------------------------- */
     // Do not remove the previous pszProjection assignment, for easy
     // maintainability.
     CPL_IGNORE_RET_VAL(pszProjection);
     pszProjection = GetAttrValue("PROJECTION");
     poProjCS = GetAttrNode( "PROJCS" );
 
     if( pszProjection != NULL && EQUAL(pszProjection, "Albers") )
         GetRoot()->applyRemapper(
             "PARAMETER", const_cast<char **>(apszAlbersMapping + 1),
             const_cast<char **>(apszAlbersMapping + 0), 2 );
 
     if( pszProjection != NULL
         && (EQUAL(pszProjection, SRS_PT_EQUIDISTANT_CONIC) ||
             EQUAL(pszProjection, SRS_PT_LAMBERT_AZIMUTHAL_EQUAL_AREA) ||
             EQUAL(pszProjection, SRS_PT_AZIMUTHAL_EQUIDISTANT) ||
             EQUAL(pszProjection, SRS_PT_SINUSOIDAL) ||
             EQUAL(pszProjection, SRS_PT_ROBINSON) ) )
         GetRoot()->applyRemapper(
             "PARAMETER", const_cast<char **>(apszECMapping + 1),
             const_cast<char **>(apszECMapping + 0), 2 );
 
     if( pszProjection != NULL
         && STARTS_WITH_CI(pszProjection, "Stereographic_")
         && STARTS_WITH_CI(pszProjection+strlen(pszProjection)-5, "_Pole") )
         GetRoot()->applyRemapper(
             "PARAMETER",
             const_cast<char **>(apszPolarStereographicMapping + 1),
             const_cast<char **>(apszPolarStereographicMapping + 0), 2);
 
     if( pszProjection != NULL && EQUAL(pszProjection, "Plate_Carree") )
         if( FindProjParm( SRS_PP_STANDARD_PARALLEL_1, poProjCS ) < 0 )
             GetRoot()->applyRemapper(
                 "PARAMETER",
                 const_cast<char **>(apszPolarStereographicMapping + 1),
                 const_cast<char **>(apszPolarStereographicMapping + 0), 2);
 
 /* -------------------------------------------------------------------- */
 /*      ESRI's Equidistant_Cylindrical does not support the             */
 /*      latitude_of_origin keyword.                                     */
 /* -------------------------------------------------------------------- */
     if( pszProjection != NULL
         && EQUAL(pszProjection, "Equidistant_Cylindrical") )
     {
         if( GetNormProjParm(SRS_PP_LATITUDE_OF_ORIGIN, 0.0) != 0.0 )
         {
             CPLDebug( "OGR_ESRI",
                       "Equirectangular with non-zero latitude of origin - "
                       "not supported." );
         }
         else
         {
             OGR_SRSNode *poPROJCS = GetAttrNode("PROJCS");
             if( poPROJCS )
                 poPROJCS->DestroyChild(
                     FindProjParm( SRS_PP_LATITUDE_OF_ORIGIN ) );
         }
     }
 
     // See #4861.
     if( pszProjection != NULL && EQUAL(pszProjection, SRS_PT_MERCATOR_2SP) )
     {
         SetNode( "PROJCS|PROJECTION", "Mercator" );
+        if( (poProjCS = GetAttrNode( "PROJCS" )) != NULL )
+            poProjCSNodeChild = poProjCS->GetChild(0);
     }
 
     // See #4861.
     else if( pszProjection != NULL &&
              EQUAL(pszProjection, SRS_PT_MERCATOR_1SP) )
     {
         SetNode( "PROJCS|PROJECTION", "Mercator" );
+        if( (poProjCS = GetAttrNode( "PROJCS" )) != NULL )
+            poProjCSNodeChild = poProjCS->GetChild(0);
 
         const double dfK0 = GetNormProjParm(SRS_PP_SCALE_FACTOR, 1.0);
 
         const double dfInvFlattening = GetInvFlattening();
         double e2 = 0.0;
         if( dfInvFlattening != 0.0 )
         {
             const double f = 1.0 / dfInvFlattening;
             e2 = 2 * f - f * f;
         }
         const double dfStdP1Lat =
             acos( sqrt( (1.0 - e2) / ((1.0 / (dfK0 * dfK0)) - e2)) ) /
             M_PI * 180.0;
         if( poProjCS )
         {
             const int iScaleFactorChild =
                 FindProjParm( SRS_PP_SCALE_FACTOR, poProjCS );
             if( iScaleFactorChild != -1 )
                 poProjCS->DestroyChild( iScaleFactorChild);
             SetProjParm(SRS_PP_STANDARD_PARALLEL_1, dfStdP1Lat);
             FixupOrdering();
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*      Convert SPHEROID name to use underscores instead of spaces.     */
 /* -------------------------------------------------------------------- */
     OGR_SRSNode *poSpheroidChild = NULL;
     OGR_SRSNode *poSpheroid = GetAttrNode( "SPHEROID" );
     if( poSpheroid != NULL )
         poSpheroidChild = poSpheroid->GetChild(0);
 
     if( poSpheroidChild != NULL )
     {
         // char *pszNewValue =
         //     CPLStrdup(RemapSpheroidName(poSpheroidChild->GetValue()));
         char *pszNewValue = CPLStrdup(poSpheroidChild->GetValue());
 
         MorphNameToESRI( &pszNewValue );
 
         poSpheroidChild->SetValue( pszNewValue );
         CPLFree( pszNewValue );
 
         GetRoot()->applyRemapper("SPHEROID",
                                  const_cast<char **>(apszSpheroidMapping + 0),
                                  const_cast<char **>(apszSpheroidMapping + 1),
                                  2);
     }
 
     if( poSpheroid != NULL )
         poSpheroidChild = poSpheroid->GetChild(2);
 
     if( poSpheroidChild != NULL )
     {
       const char * pszValue = poSpheroidChild->GetValue();
       for( int i = 0; apszInvFlatteningMapping[i] != NULL; i += 2 )
       {
         if( EQUALN(apszInvFlatteningMapping[i], pszValue,
                    strlen(apszInvFlatteningMapping[i]) ))
         {
           poSpheroidChild->SetValue( apszInvFlatteningMapping[i+1] );
           break;
         }
       }
     }
 
 /* -------------------------------------------------------------------- */
 /*      Try to insert a D_ in front of the datum name.                  */
 /* -------------------------------------------------------------------- */
     OGR_SRSNode *poDatum = GetAttrNode( "DATUM" );
     if( poDatum != NULL )
         poDatum = poDatum->GetChild(0);
 
     if( poDatum != NULL )
     {
         const char* pszDatumName = poDatum->GetValue();
         if( !STARTS_WITH_CI(pszDatumName, "D_") )
         {
             char *pszNewValue = static_cast<char *>(
                 CPLMalloc(strlen(poDatum->GetValue())+3) );
             strcpy( pszNewValue, "D_" );
             strcat( pszNewValue, poDatum->GetValue() );
             poDatum->SetValue( pszNewValue );
             CPLFree( pszNewValue );
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*                        final check names                             */
 /* -------------------------------------------------------------------- */
     if( poProjCSNodeChild )
         pszProjCSName = poProjCSNodeChild->GetValue();
 
     if( pszProjCSName )
     {
       const char *pszGcsName = GetAttrValue( "GEOGCS" );
       if( pszGcsName && !STARTS_WITH_CI(pszGcsName, "GCS_") )
       {
         char* newGcsName = static_cast<char *>(
             CPLMalloc(strlen(pszGcsName) + 5) );
         strcpy( newGcsName, "GCS_" );
         strcat(newGcsName, pszGcsName);
         SetNewName( this, "GEOGCS", newGcsName );
         CPLFree( newGcsName );
         pszGcsName = GetAttrValue( "GEOGCS" );
       }
-      RemapGeogCSName(this, pszGcsName);
+      if( pszGcsName != NULL )
+      {
+        RemapGeogCSName(this, pszGcsName);
+      }
 
       // Specific processing and remapping
       pszProjection = GetAttrValue("PROJECTION");
       if( pszProjection )
       {
         if( EQUAL(pszProjection, "Lambert_Conformal_Conic") )
         {
           if( FindProjParm( SRS_PP_STANDARD_PARALLEL_2, poProjCS ) < 0 )
           {
             int iChild = FindProjParm( SRS_PP_LATITUDE_OF_ORIGIN, poProjCS );
             int iChild1 = FindProjParm( SRS_PP_STANDARD_PARALLEL_1, poProjCS );
             if( iChild >= 0 && iChild1 < 0 )
             {
               const OGR_SRSNode *poParameter = poProjCS->GetChild(iChild);
               if( poParameter )
               {
                 OGR_SRSNode *poNewParm = new OGR_SRSNode( "PARAMETER" );
                 poNewParm->AddChild( new OGR_SRSNode( "standard_parallel_1" ) );
                 poNewParm->AddChild( new OGR_SRSNode(
                     poParameter->GetChild(1)->GetValue() ) );
                 poProjCS->AddChild( poNewParm );
               }
             }
           }
         }
 
         if( EQUAL(pszProjection, "Plate_Carree") )
         {
           int iChild = FindProjParm( SRS_PP_STANDARD_PARALLEL_1, poProjCS );
           if( iChild < 0 )
             iChild = FindProjParm( SRS_PP_PSEUDO_STD_PARALLEL_1, poProjCS );
 
           if( iChild >= 0 )
           {
             const OGR_SRSNode *poParameter = poProjCS->GetChild(iChild);
             if( !EQUAL(poParameter->GetChild(1)->GetValue(), "0.0") &&
                 !EQUAL(poParameter->GetChild(1)->GetValue(), "0") )
             {
               SetNode( "PROJCS|PROJECTION", "Equidistant_Cylindrical" );
               pszProjection = GetAttrValue("PROJECTION");
             }
           }
         }
 
         DeleteParamBasedOnPrjName(
             this, pszProjection,
             const_cast<char **>(apszDeleteParametersBasedOnProjection));
         AddParamBasedOnPrjName(
             this, pszProjection,
             const_cast<char **>(apszAddParametersBasedOnProjection));
         RemapPValuesBasedOnProjCSAndPName(
             this, pszProjection,
             const_cast<char **>(apszParamValueMapping));
         RemapPNamesBasedOnProjCSAndPName(
             this, pszProjection,
             const_cast<char **>(apszParamNameMapping));
       }
     }
 
     return OGRERR_NONE;
 }
 
 /************************************************************************/
 /*                           OSRMorphToESRI()                           */
 /************************************************************************/
 
 /**
  * \brief Convert in place to ESRI WKT format.
  *
  * This function is the same as the C++ method
  * OGRSpatialReference::morphToESRI().
  */
