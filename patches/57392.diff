commit 61e98bf35eb939bdd7b27ad7938f8549db2e1551
Author: Ilija Tovilo <ilija.tovilo@me.com>
Date:   Thu Mar 23 14:35:50 2023 +0100

    Disallow parent dir components (..) in open_basedir() at runtime
    
    Fix GH-10469
    Closes GH-10913

diff --git a/NEWS b/NEWS
index 9ef2f16918..1fbe26ea83 100644
--- a/NEWS
+++ b/NEWS
@@ -1,160 +1,162 @@
 PHP                                                                        NEWS
 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
 ?? ??? ????, PHP 8.3.0alpha1
 
 - CLI:
   . Added pdeathsig to builtin server to terminate workers when the master
     process is killed. (ilutov)
 
 - Core:
   . Fixed bug GH-9388 (Improve unset property and __get type incompatibility
     error message). (ilutov)
   . SA_ONSTACK is now set for signal handlers to be friendlier to other
     in-process code such as Go's cgo. (Kévin Dunglas)
   . SA_ONSTACK is now set when signals are disabled. (Kévin Dunglas)
   . Fix GH-9649: Signal handlers now do a no-op instead of crashing when
     executed on threads not managed by TSRM. (Kévin Dunglas)
   . Fixed potential NULL pointer dereference Windows shm*() functions. (cmb)
   . Added shadow stack support for fibers. (Chen Hu)
   . Fix bug GH-9965 (Fix accidental caching of default arguments with side
     effects). (ilutov)
   . Implement GH-10217 (Use strlen() for determining the class_name length).
     (Dennis Buteyn)
   . Fix bug GH-8821 (Improve line numbers for errors in constant expressions).
     (ilutov)
   . Fix bug GH-10083 (Allow comments between & and parameter). (ilutov)
   . Zend Max Execution Timers is now enabled by default for ZTS builds on
     Linux. (Kévin Dunglas)
+  . Fix bug GH-10469 (Disallow .. in open_basedir paths set at runtime).
+    (ilutov)
 
 - Date:
   . Implement More Appropriate Date/Time Exceptions RFC. (Derick)
 
 - Exif:
   . Removed unneeded codepaths in exif_process_TIFF_in_JPEG(). (nielsdos)
 
 - Fileinfo:
   . Upgrade bundled libmagic to 5.43. (Anatol)
 
 - FPM:
   . The status.listen shared pool now uses the same php_values (including
     expose_php) and php_admin_value as the pool it is shared with. (dwxh)
 
 - GD:
   . Fixed bug #81739: OOB read due to insufficient input validation in
     imageloadfont(). (CVE-2022-31630) (cmb)
 
 - Hash:
   . Fixed bug #81738: buffer overflow in hash_update() on long parameter.
     (CVE-2022-37454) (nicky at mouha dot be)
 
 - Intl:
   . Added pattern format error infos for numfmt_set_pattern. (David Carlier)
   . Added MIXED_NUMBERS and HIDDEN_OVERLAY constants for
     the Spoofchecker's class. (David Carlier)
   . Updated datefmt_set_timezone/IntlDateformatter::setTimezone returns type.
     (David Carlier).
 
 - JSON:
   . Added json_validate(). (Juan Morales)
 
 - MBString:
   . mb_detect_encoding is better able to identify the correct encoding for
     Turkish text. (Alex Dowad)
   . mb_detect_encoding's "non-strict" mode now behaves as described in the
     documentation. Previously, it would return false if the very first byte
     of the input string was invalid in all candidate encodings. (Alex Dowad)
   . mb_strtolower, mb_strtotitle, and mb_convert_case implement conditional
     casing rules for the Greek letter sigma. For mb_convert_case, conditional
     casing only applies to MB_CASE_LOWER and MB_CASE_TITLE modes, not to
     MB_CASE_LOWER_SIMPLE and MB_CASE_TITLE_SIMPLE. (Alex Dowad)
   . mb_detect_encoding is better able to identify UTF-8 and UTF-16 strings
     with a byte-order mark. (Alex Dowad)
   . mb_decode_mimeheader interprets underscores in QPrint-encoded MIME
     encoded words as required by RFC 2047; they are converted to spaces.
     Underscores must be encoded as "=5F" in such MIME encoded words.
     (Alex Dowad)
   . mb_encode_mimeheader no longer drops NUL (zero) bytes when
     QPrint-encoding the input string. This previously caused strings in
     certain text encodings, especially UTF-16 and UTF-32, to be
     corrupted by mb_encode_mimeheader. (Alex Dowad)
 
 - mysqli:
   . mysqli_fetch_object raises a ValueError instead of an Exception.
     (David Carlier)
 
 - Opcache:
   . Added start, restart and force restart time to opcache's
     phpinfo section. (Mikhail Galanin)
   . Fix GH-9139: Allow FFI in opcache.preload when opcache.preload_user=root.
     (Arnaud, Kapitan Oczywisty)
   . Made opcache.preload_user always optional in the cli and phpdbg SAPIs.
     (Arnaud)
   . Allows W/X bits on page creation on FreeBSD despite system settings.
     (David Carlier)
   . Added memfd api usage, on Linux, for zend_shared_alloc_create_lock()
     to create an abstract anonymous file for the opcache's lock. (Max Kellermann)
 
 - PCNTL:
   . SA_ONSTACK is now set for pcntl_signal. (Kévin Dunglas)
   . Added SIGINFO constant. (David Carlier)
 
 - PGSQL:
   . pg_fetch_object raises a ValueError instead of an Exception.
     (David Carlier)
 
 - Phar:
   . Fix memory leak in phar_rename_archive(). (stkeke)
 
 - Posix:
   . Added posix_sysconf. (David Carlier)
   . Added posix_pathconf. (David Carlier)
   . Added posix_fpathconf. (David Carlier)
   . Fixed zend_parse_arg_long's bool pointer argument assignment. (Cristian Rodriguez)
 
 - Random:
   . Added Randomizer::getBytesFromString(). (Joshua Rüsweg)
   . Added Randomizer::nextFloat(), ::getFloat(), and IntervalBoundary. (timwolla)
   . Fix GH-10292 (Made the default value of the first param of srand() and
     mt_srand() nullable). (kocsismate)
   . Enable getrandom() for NetBSD (from 10.x). (David Carlier)
 
 - Reflection:
   . Fix GH-9470 (ReflectionMethod constructor should not find private parent
     method). (ilutov)
   . Fix GH-10259 (ReflectionClass::getStaticProperties doesn't need null return
     type). (kocsismate)
   . Fix Segfault when using ReflectionFiber suspended by an internal function.
     (danog)
 
 - Sockets:
   . Added SO_ATTACH_REUSEPORT_CBPF socket option, to give tighter control
     over socket binding for a cpu core. (David Carlier)
   . Added SKF_AD_QUEUE for cbpf filters. (David Carlier)
   . Added socket_atmark if send/recv needs using MSG_OOB. (David Carlier)
   . Added TCP_QUICKACK constant, to give tigher control over
     ACK delays. (David Carlier)
   . Added DONTFRAGMENT support for path MTU discovery purpose. (David Carlier)
   . Added AF_DIVERT for raw socket for divert ports. (David Carlier)
   . Added SOL_UPDLITE, UDPLITE_RECV_CSCOV and UDPLITE_SEND_CSCOV for updlite
     protocol support. (David Carlier)
   . Added SO_RERROR, SO_ZEROIZE and SO_SPLICE netbsd and openbsd constants.
     (David Carlier)
   . Added TCP_REPAIR for quietly close a connection. (David Carlier)
 
 - Standard:
   . E_NOTICEs emitted by unserialize() have been promoted to E_WARNING. (timwolla)
   . Make array_pad's $length warning less confusing. (nielsdos)
   . E_WARNING emitted by strtok in the caase both arguments are not provided when
     starting tokenisation. (David Carlier)
   . password_hash() will now chain the original RandomException to the ValueError
     on salt generation failure. (timwolla)
   . Fix GH-10239 (proc_close after proc_get_status always returns -1). (nielsdos)
 
 - Streams:
   . Fixed bug #51056: blocking fread() will block even if data is available.
     (Jakub Zelenka)
 
 - XSLTProcessor:
   . Fixed bug #69168 (DomNode::getNodePath() returns invalid path). (nielsdos)
 
 <<< NOTE: Insert NEWS from last stable release here prior to actual release! >>>
diff --git a/UPGRADING b/UPGRADING
index db2fdaaa50..f594237e43 100644
--- a/UPGRADING
+++ b/UPGRADING
@@ -1,258 +1,262 @@
 PHP 8.3 UPGRADE NOTES
 
 1. Backward Incompatible Changes
 2. New Features
 3. Changes in SAPI modules
 4. Deprecated Functionality
 5. Changed Functions
 6. New Functions
 7. New Classes and Interfaces
 8. Removed Extensions and SAPIs
 9. Other Changes to Extensions
 10. New Global Constants
 11. Changes to INI File Handling
 12. Windows Support
 13. Other Changes
 14. Performance Improvements
 
 ========================================
 1. Backward Incompatible Changes
 ========================================
 
 - Core:
   . Programs that were very close to overflowing the call stack may now throw an
     Error when using more than
     `zend.max_allowed_stack_size-zend.reserved_stack_size` bytes of stack
     (`fiber.stack_size-zend.reserved_stack_size` for fibers).
   . Class constants can now be accessed dynamically using the C::{$name} syntax.
     RFC: https://wiki.php.net/rfc/dynamic_class_constant_fetch
   . Executing proc_get_status() multiple times will now always return the right
     value on posix systems. Previously, only the first call of the function
     returned the right value. Executing proc_close() after proc_get_status() will
     now also return the right exit code. Previously this would return -1.
     Internally, this works by caching the result on posix systems. If you want
     the old behaviour, you can check the "cached" key in the array returned by
     proc_get_status() to check whether the result was cached.
   . Zend Max Execution Timers is now enabled by default for ZTS builds on
     Linux.
 
 - FFI:
   . C functions that have a return type of void now return null instead of
     returning the following object object(FFI\CData:void) { }
 
 ========================================
 2. New Features
 ========================================
 
 - Core
   . Anonymous classes may now be marked as readonly.
 
 - Posix
   . posix_getrlimit() now takes an optional $res parameter to allow fetching a
     single resource limit.
   . posix_isatty() now raises type warnings for integers following the usual ZPP semantics
   . posix_ttyname() now raises type warnings for integers following the usual ZPP semantics
     and value warnings for invalid file descriptor integers.
 
 ========================================
 3. Changes in SAPI modules
 ========================================
 
 ========================================
 4. Deprecated Functionality
 ========================================
 
 ========================================
 5. Changed Functions
 ========================================
 
 - Core:
   . gc_status() has added the following 4 fields:
     "running" => bool
     "protected" => bool
     "full" => bool
     "buffer_size" => int
     See GH-9336
   . class_alias() now supports creating an alias of an internal class.
+  . Setting `open_basedir` at runtime using `ini_set('open_basedir', ...);` no
+    longer accepts paths containing the parent directory (`..`). Previously,
+    only paths starting with `..` were disallowed. This could easily be
+    circumvented by prepending `./` to the path.
 
 - Dom:
   . Changed DOMCharacterData::appendData() tentative return type to true.
 
 - Intl:
   . datefmt_set_timezone (and its alias IntlDateformatter::setTimeZone) 
     now returns true on sucess, previously null was returned.
 
 - MBString:
   . mb_strtolower, mb_strtotitle, and mb_convert_case implement conditional
     casing rules for the Greek letter sigma. For mb_convert_case, conditional
     casing only applies to MB_CASE_LOWER and MB_CASE_TITLE modes, not to
     MB_CASE_LOWER_SIMPLE and MB_CASE_TITLE_SIMPLE. (Alex Dowad)
   . mb_decode_mimeheader interprets underscores in QPrint-encoded MIME
     encoded words as required by RFC 2047; they are converted to spaces.
     Underscores must be encoded as "=5F" in such MIME encoded words.
     (Alex Dowad)
   . In rare cases, mb_encode_mimeheader will transfer-encode its input
     string where it would pass it through as raw ASCII in PHP 8.2.
     (Alex Dowad)
 
 - mysqli:
   . mysqli_fetch_object now raises a ValueError instead of an Exception when the constructor_args
     argument is non empty with the class not having constructor.
   . mysqli_poll now raises a ValueError when the read nor error arguments are passed.
 
 - PGSQL:
   . pg_fetch_object now raises a ValueError instead of an Exception when the constructor_args
     argument is non empty with the class not having constructor.
   . pg_insert now raises a ValueError instead of a WARNING when the table specified is invalid.
 
 - Standard:
   . E_NOTICEs emitted by unserialized() have been promoted to E_WARNING.
     RFC: https://wiki.php.net/rfc/improve_unserialize_error_handling
   . array_pad() is now only limited by the maximum number of elements an array
     can have. Before, it was only possible to add at most 1048576 elements at a
     time.
   . strtok() raises a warning in the case token is not provided when starting tokenization.
   . password_hash() will now chain the underlying Random\RandomException
     as the ValueError’s $previous Exception when salt generation fails.
   . proc_open() $command array must now have at least one non empty element.
   . array_sum() and array_product() now warn when values in the array cannot be converted to int/float.
     Previously arrays and objects where ignored whilst every other value was cast to int.
     Moreover, objects that define a numeric cast (e.g. GMP) are now casted instead of ignored.
     RFC: https://wiki.php.net/rfc/saner-array-sum-product
 
 ========================================
 6. New Functions
 ========================================
 
 - JSON:
   . Added json_validate(), which returns whether the json is valid for
     the given $depth and $options.
     RFC: https://wiki.php.net/rfc/json_validate
 
 - Posix:
   . Added posix_sysconf call to get runtime informations.
   . Added posix_pathconf call to get configuration value from a directory/file.
   . Added posix_fpathconf call to get configuration value from a file descriptor.
 
 - Random:
   . Added Randomizer::getBytesFromString().
     RFC: https://wiki.php.net/rfc/randomizer_additions
   . Added Randomizer::nextFloat(), ::getFloat(), and IntervalBoundary.
     RFC: https://wiki.php.net/rfc/randomizer_additions
   . Changed mt_srand() and srand() to not check the number of arguments to
     determine whether a random seed should be used. Passing null will generate
     a random seed, 0 will use zero as the seed. The functions are now consistent
     with Mt19937::__construct().
 
 - Reflection:
   . Return type of ReflectionClass::getStaticProperties() is no longer nullable.
 
 - Sockets:
   . Added socket_atmark to checks if the socket is OOB marked.
 
 ========================================
 7. New Classes and Interfaces
 ========================================
 
 ========================================
 8. Removed Extensions and SAPIs
 ========================================
 
 ========================================
 9. Other Changes to Extensions
 ========================================
 
 ========================================
 10. New Global Constants
 ========================================
 
 - Intl:
   . MIXED_NUMBERS (Spoofchecker).
   . HIDDEN_OVERLAY (Spoofchecker).
 
 - PCNTL:
   . SIGINFO
 
 - Posix:
   . POSIX_SC_ARG_MAX
   . POSIX_SC_PAGESIZE
   . POSIX_SC_NPROCESSORS_CONF
   . POSIX_SC_NPROCESSORS_ONLN
 
 - Sockets:
   . SO_ATTACH_REUSEPORT_CBPF (Linux only).
   . TCP_QUICKACK (Linux only).
   . IP_DONTFRAG (FreeBSD only).
   . IP_MTU_DISCOVER (Linux only).
   . IP_PMTUDISC_DO (Linux only).
   . IP_PMTUDISC_DONT (Linux only).
   . IP_PMTUDISC_WANT (Linux only).
   . IP_PMTUDISC_PROBE (Linux only).
   . IP_PMTUDISC_INTERFACE (Linux only).
   . IP_PMTUDISC_OMIT (Linux only).
   . AF_DIVERT (FreeBSD only).
   . SOL_UDPLITE.
   . UDPLITE_RECV_CSCOV.
   . UDPLITE_SEND_CSCOV.
   . SO_RERROR (NetBSD only).
   . SO_ZEROIZE (OpenBSD only).
   . SO_SPLICE (OpenBSD only).
   . TCP_REPAIR (Linux only).
 
 ========================================
 11. Changes to INI File Handling
 ========================================
 
 - zend.max_allowed_stack_size
   . New INI directive to set the maximum allowed stack size. Possible
     values are `0` (detect the process or thread maximum stack size), `-1`
     (no limit), or a positive number of bytes. The default is `0`. When it
     is not possible to detect the the process or thread maximum stack size,
     a known system default is used. Setting this value too high has the same
     effect as disabling the stack size limit. Fibers use fiber.stack_size
     as maximum allowed stack size. An Error is thrown when the process call
     stack exceeds `zend.max_allowed_stack_size-zend.reserved_stack_size`
     bytes, to prevent stack-overflow-induced segmentation faults, with
     the goal of making debugging easier. The stack size increases during
     uncontrolled recursions involving internal functions or the magic methods
     __toString, __clone, __sleep, __destruct.  This is not related to stack
     buffer overflows, and is not a security feature.
 
 - zend.reserved_stack_size
   . New INI directive to set the reserved stack size, in bytes. This is
     subtracted from the max allowed stack size, as a buffer, when checking the
     stack size.
 
 ========================================
 12. Windows Support
 ========================================
 
 ========================================
 13. Other Changes
 ========================================
 
 - Core:
   . An Error is now thrown when the process call stack exceeds a certain size,
     to prevent stack-overflow-induced segmentation faults, with the goal of
     making debugging easier. The maximum allowed stack size is controlled
     by the INI directives zend.max_allowed_stack_size, zend.reserved_stack_size,
     and fiber.stack_size.
 
 - FFI:
   . FFI::load() is now allowed during preloading when opcache.preload_user is the
     current system user. Previously, calling FFI::load() was not possible during
     preloading if the opcache.preload_user directive was set.
 
 - Opcache:
   . In the cli and phpdbg SAPIs, preloading does not require the
     opcache.preload_user directive to be set anymore when running as root. In
     other SAPIs, this directive is required when running as root because
     preloading is done before the SAPI switches to an unprivileged user.
 
 - Streams:
   . Blocking fread() on socket connection returns immediately if there are
     any buffered data instead of waiting for more data.
 
 ========================================
 14. Performance Improvements
 ========================================
diff --git a/Zend/tests/gh10469.phpt b/Zend/tests/gh10469.phpt
new file mode 100644
index 0000000000..26d13a09b3
--- /dev/null
+++ b/Zend/tests/gh10469.phpt
@@ -0,0 +1,22 @@
+--TEST--
+GH-10469: Disallow open_basedir() with parent dir components (..)
+--FILE--
+<?php
+ini_set('open_basedir', __DIR__);
+
+$originalDir = __DIR__;
+$tmpDir = $originalDir . '/gh10469_tmp';
+@mkdir($tmpDir, 0777, true);
+chdir($tmpDir);
+ini_set('open_basedir', ini_get('open_basedir') . ':./..');
+ini_set('open_basedir', ini_get('open_basedir') . ':./../');
+
+chdir($originalDir);
+var_dump(ini_get('open_basedir'));
+?>
+--CLEAN--
+<?php
+@rmdir(__DIR__ . '/gh10469_tmp');
+?>
+--EXPECTF--
+string(%d) "%stests"
diff --git a/main/fopen_wrappers.c b/main/fopen_wrappers.c
index efb110171b..ef08d8dc73 100644
--- a/main/fopen_wrappers.c
+++ b/main/fopen_wrappers.c
@@ -73,57 +73,75 @@ or a tightening during activation/runtime/deactivation */
 PHPAPI ZEND_INI_MH(OnUpdateBaseDir)
 {
 	char **p = (char **) ZEND_INI_GET_ADDR();
 	char *pathbuf, *ptr, *end;
 
 	if (stage == PHP_INI_STAGE_STARTUP || stage == PHP_INI_STAGE_SHUTDOWN || stage == PHP_INI_STAGE_ACTIVATE || stage == PHP_INI_STAGE_DEACTIVATE) {
 		/* We're in a PHP_INI_SYSTEM context, no restrictions */
 		*p = new_value ? ZSTR_VAL(new_value) : NULL;
 		return SUCCESS;
 	}
 
 	/* Otherwise we're in runtime */
 	if (!*p || !**p) {
 		/* open_basedir not set yet, go ahead and give it a value */
 		*p = ZSTR_VAL(new_value);
 		return SUCCESS;
 	}
 
 	/* Shortcut: When we have a open_basedir and someone tries to unset, we know it'll fail */
 	if (!new_value || !*ZSTR_VAL(new_value)) {
 		return FAILURE;
 	}
 
 	/* Is the proposed open_basedir at least as restrictive as the current setting? */
 	ptr = pathbuf = estrdup(ZSTR_VAL(new_value));
 	while (ptr && *ptr) {
 		end = strchr(ptr, DEFAULT_DIR_SEPARATOR);
 		if (end != NULL) {
 			*end = '\0';
 			end++;
 		}
-		if (ptr[0] == '.' && ptr[1] == '.' && (ptr[2] == '\0' || IS_SLASH(ptr[2]))) {
-			/* Don't allow paths with a leading .. path component to be set at runtime */
-			efree(pathbuf);
-			return FAILURE;
+		/* Don't allow paths with a parent dir component (..) to be set at runtime */
+		char *substr_pos = ptr;
+		while (true) {
+			// Check if we have a .. path component
+			if (substr_pos[0] == '.'
+			 && substr_pos[1] == '.'
+			 && (substr_pos[2] == '\0' || IS_SLASH(substr_pos[2]))) {
+				efree(pathbuf);
+				return FAILURE;
+			}
+			// Skip to the next path component
+			while (true) {
+				substr_pos++;
+				if (*substr_pos == '\0' || *substr_pos == DEFAULT_DIR_SEPARATOR) {
+					goto no_parent_dir_component;
+				} else if (IS_SLASH(*substr_pos)) {
+					// Also skip the slash
+					substr_pos++;
+					break;
+				}
+			}
 		}
+no_parent_dir_component:
 		if (php_check_open_basedir_ex(ptr, 0) != 0) {
 			/* At least one portion of this open_basedir is less restrictive than the prior one, FAIL */
 			efree(pathbuf);
 			return FAILURE;
 		}
 		ptr = end;
 	}
 	efree(pathbuf);
 
 	/* Everything checks out, set it */
 	*p = ZSTR_VAL(new_value);
 
 	return SUCCESS;
 }
 /* }}} */
 
 /* {{{ php_check_specific_open_basedir
 	When open_basedir is not NULL, check if the given filename is located in
 	open_basedir. Returns -1 if error or not in the open_basedir, else 0.
 	When open_basedir is NULL, always return 0.
 */
