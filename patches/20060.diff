commit c4e193f3a360817eb097fb54f2f9f84d5dda7112
Author: David Bryant <david@wavpack.com>
Date:   Mon Jan 13 14:00:14 2020 -0800

    fix for uninitialized memory access (oss-fuzz issue 20060, trigger file included)
    note that this was not a vulnerability because the accessed values were always discarded

diff --git a/fuzzing/regression/clusterfuzz-testcase-minimized-fuzzer-5730671461138432 b/fuzzing/regression/clusterfuzz-testcase-minimized-fuzzer-5730671461138432
new file mode 100644
index 0000000..96572c5
Binary files /dev/null and b/fuzzing/regression/clusterfuzz-testcase-minimized-fuzzer-5730671461138432 differ
diff --git a/src/tag_utils.c b/src/tag_utils.c
index 2040e1c..d3825b6 100644
--- a/src/tag_utils.c
+++ b/src/tag_utils.c
@@ -180,43 +180,43 @@ int WavpackAppendBinaryTagItem (WavpackContext *wpc, const char *item, const cha
 int WavpackDeleteTagItem (WavpackContext *wpc, const char *item)
 {
     M_Tag *m_tag = &wpc->m_tag;
 
     if (m_tag->ape_tag_hdr.ID [0] == 'A') {
         unsigned char *p = m_tag->ape_tag_data;
         unsigned char *q = p + m_tag->ape_tag_hdr.length - sizeof (APE_Tag_Hdr);
         int i;
 
-        for (i = 0; i < m_tag->ape_tag_hdr.item_count; ++i) {
+        for (i = 0; i < m_tag->ape_tag_hdr.item_count && q - p > 8; ++i) {
             int vsize, isize;
 
             vsize = p[0] + (p[1] << 8) + (p[2] << 16) + (p[3] << 24); p += 8;   // skip flags because we don't need them
-            for (isize = 0; p[isize] && p + isize < q; ++isize);
+            for (isize = 0; p + isize < q && p[isize]; ++isize);
 
             if (vsize < 0 || vsize > m_tag->ape_tag_hdr.length || p + isize + vsize + 1 > q)
                 break;
 
             if (isize && vsize && !stricmp (item, (char *) p)) {
                 unsigned char *d = p - 8;
 
                 p += isize + vsize + 1;
 
                 while (p < q)
                     *d++ = *p++;
 
                 m_tag->ape_tag_hdr.length = (int32_t)(d - m_tag->ape_tag_data) + sizeof (APE_Tag_Hdr);
                 m_tag->ape_tag_hdr.item_count--;
                 return 1;
             }
             else
                 p += isize + vsize + 1;
         }
     }
 
     return 0;
 }
 
 // Once a APEv2 tag has been created with WavpackAppendTag(), this function is
 // used to write the completed tag to the end of the WavPack file. Note that
 // this function uses the same "blockout" function that is used to write
 // regular WavPack blocks, although that's where the similarity ends. It is also
 // used to write tags that have been edited on existing files.
@@ -234,49 +234,49 @@ int WavpackWriteTag (WavpackContext *wpc)
 static int get_ape_tag_item (M_Tag *m_tag, const char *item, char *value, int size, int type)
 {
     unsigned char *p = m_tag->ape_tag_data;
     unsigned char *q = p + m_tag->ape_tag_hdr.length - sizeof (APE_Tag_Hdr);
     int i;
 
     for (i = 0; i < m_tag->ape_tag_hdr.item_count && q - p > 8; ++i) {
         int vsize, flags, isize;
 
         vsize = p[0] + (p[1] << 8) + (p[2] << 16) + (p[3] << 24); p += 4;
         flags = p[0] + (p[1] << 8) + (p[2] << 16) + (p[3] << 24); p += 4;
-        for (isize = 0; p[isize] && p + isize < q; ++isize);
+        for (isize = 0; p + isize < q && p[isize]; ++isize);
 
         if (vsize < 0 || vsize > m_tag->ape_tag_hdr.length || p + isize + vsize + 1 > q)
             break;
 
         if (isize && vsize && !stricmp (item, (char *) p) && ((flags & 6) >> 1) == type) {
 
             if (!value || !size)
                 return vsize;
 
             if (type == APE_TAG_TYPE_BINARY) {
                 if (vsize <= size) {
                     memcpy (value, p + isize + 1, vsize);
                     return vsize;
                 }
                 else
                     return 0;
             }
             else if (vsize < size) {
                 memcpy (value, p + isize + 1, vsize);
                 value [vsize] = 0;
                 return vsize;
             }
             else if (size >= 4) {
                 memcpy (value, p + isize + 1, size - 1);
                 value [size - 4] = value [size - 3] = value [size - 2] = '.';
                 value [size - 1] = 0;
                 return size - 1;
             }
             else
                 return 0;
         }
         else
             p += isize + vsize + 1;
     }
 
     return 0;
 }
@@ -325,41 +325,41 @@ static int get_id3_tag_item (M_Tag *m_tag, const char *item, char *value, int si
 static int get_ape_tag_item_indexed (M_Tag *m_tag, int index, char *item, int size, int type)
 {
     unsigned char *p = m_tag->ape_tag_data;
     unsigned char *q = p + m_tag->ape_tag_hdr.length - sizeof (APE_Tag_Hdr);
     int i;
 
     for (i = 0; i < m_tag->ape_tag_hdr.item_count && index >= 0 && q - p > 8; ++i) {
         int vsize, flags, isize;
 
         vsize = p[0] + (p[1] << 8) + (p[2] << 16) + (p[3] << 24); p += 4;
         flags = p[0] + (p[1] << 8) + (p[2] << 16) + (p[3] << 24); p += 4;
-        for (isize = 0; p[isize] && p + isize < q; ++isize);
+        for (isize = 0; p + isize < q && p[isize]; ++isize);
 
         if (vsize < 0 || vsize > m_tag->ape_tag_hdr.length || p + isize + vsize + 1 > q)
             break;
 
         if (isize && vsize && ((flags & 6) >> 1) == type && !index--) {
 
             if (!item || !size)
                 return isize;
 
             if (isize < size) {
                 memcpy (item, p, isize);
                 item [isize] = 0;
                 return isize;
             }
             else if (size >= 4) {
                 memcpy (item, p, size - 1);
                 item [size - 4] = item [size - 3] = item [size - 2] = '.';
                 item [size - 1] = 0;
                 return size - 1;
             }
             else
                 return 0;
         }
         else
             p += isize + vsize + 1;
     }
 
     return 0;
 }
