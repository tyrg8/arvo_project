commit 35b09487b9e38f11e5e01fc3cf9eb60b1b493f7c
Author: Nicolo Maio <maio@ntop.org>
Date:   Wed Dec 20 15:34:06 2023 +0100

    Fix dissectPacket call on fuzz.

diff --git a/fuzz/fuzz_dissect_packet.cpp b/fuzz/fuzz_dissect_packet.cpp
index ad879ed3d..e594a1148 100644
--- a/fuzz/fuzz_dissect_packet.cpp
+++ b/fuzz/fuzz_dissect_packet.cpp
@@ -143,30 +143,30 @@ using PostProcessor =
 DEFINE_PROTO_FUZZER(const ntopng_fuzz::Pcap &message) {
   ntop->getTrace()->traceEvent(TRACE_INFO, "Starting");
 
   for (const ntopng_fuzz::Record &packet : message.packets()) {
     char pcap_error_buffer[PCAP_ERRBUF_SIZE];
     u_int16_t p;
     Host *srcHost = NULL, *dstHost = NULL;
     Flow *flow = NULL;
 
     const u_char *pkt =
       reinterpret_cast<const u_char *>(packet.data().data());
     struct pcap_pkthdr *hdr = new pcap_pkthdr();
 
     hdr->caplen = message.packets().size();
     hdr->len = packet.header().len();
     hdr->ts = {packet.header().timestamp(),
 	       packet.header().micronano_timestamp()};
 
     // printf("caplen %d len %d ts %d sus %d\n", hdr->caplen, hdr->len,
     //        hdr->ts.tv_sec, hdr->ts.tv_usec);
 
     iface->dissectPacket(UNKNOWN_PKT_IFACE_IDX,
-			 DUMMY_BRIDGE_INTERFACE_ID, true, NULL, hdr, pkt,
+			 DUMMY_BRIDGE_INTERFACE_ID, true, DLT_NULL, NULL, hdr, pkt,
 			 &p, &srcHost, &dstHost, &flow);
     // ntop->getTrace()->traceEvent(TRACE_ERROR, "dissecting packet");
   }
   ntop->getTrace()->traceEvent(TRACE_INFO, "Ending");
 }
 
 #else
@@ -174,37 +174,37 @@ DEFINE_PROTO_FUZZER(const ntopng_fuzz::Pcap &message) {
 extern "C" int LLVMFuzzerTestOneInput(const uint8_t *buf, size_t len) {
   if (len == 0) return -1;
 
   FILE *fd = fmemopen((void *)buf, len, "r");
   if (fd == NULL) {
     std::cerr << "Cannot create the file descriptor with fmemopen"
 	      << std::endl;
     return -1;
   }
 
   char pcap_error_buffer[PCAP_ERRBUF_SIZE];
   pcap_t *pcap_handle;
   const u_char *pkt;
   struct pcap_pkthdr *hdr;
   u_int16_t p;
   Host *srcHost = NULL, *dstHost = NULL;
   Flow *flow = NULL;
 
   pcap_handle = pcap_fopen_offline(fd, pcap_error_buffer);
   if (pcap_handle == NULL) goto end;
   iface->set_datalink(pcap_datalink(pcap_handle));
   pcap_setnonblock(pcap_handle, 1, pcap_error_buffer);
 
   while (pcap_next_ex(pcap_handle, &hdr, &pkt) > 0) {
     iface->dissectPacket(UNKNOWN_PKT_IFACE_IDX,
-			 DUMMY_BRIDGE_INTERFACE_ID, true, NULL, hdr, pkt,
+			 DUMMY_BRIDGE_INTERFACE_ID, DLT_NULL, true, NULL, hdr, pkt,
 			 &p, &srcHost, &dstHost, &flow);
   }
   pcap_close(pcap_handle);
 
  end:
   iface->cleanup();
 
   return 0;
 }
 
 #endif
