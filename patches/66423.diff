commit 9c840a68e212fb54136b67711daff331435c1ce7
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Tue Feb 13 22:36:03 2024 +0900

    string.c (memsearch_swar): boundary check by the latest position

diff --git a/src/string.c b/src/string.c
index e214ad4c2..780ab4e5e 100644
--- a/src/string.c
+++ b/src/string.c
@@ -578,76 +578,76 @@ str_index_str_by_char(mrb_state *mrb, mrb_value str, mrb_value sub, mrb_int pos)
    * fixed potential buffer overflow
 */
 static inline mrb_int
-memsearch_swar(const char *xs, long m, const char *ys, long n)
+memsearch_swar(const char *xs, mrb_int m, const char *ys, mrb_int n)
 {
 #ifdef MRB_64BIT
 #define bitint uint64_t
 #define MASK1 0x0101010101010101ull
 #define MASK2 0x7f7f7f7f7f7f7f7full
 #define MASK3 0x8080808080808080ull
 #else
 #define bitint uint32_t
 #define MASK1 0x01010101ul
 #define MASK2 0x7f7f7f7ful
 #define MASK3 0x80808080ul
 #endif
 #if defined(MRB_ENDIAN_BIG)
 #ifdef MRB_64BIT
 #define MASK4 0x8000000000000000ull
 #else
 #define MASK4 0x80000000ul
 #endif
 #else
 #define MASK4 0x80
 #endif
 
   const bitint first = MASK1 * (uint8_t)xs[0];
   const bitint last  = MASK1 * (uint8_t)xs[m-1];
 
   const char *s0 = ys;
   const char *s1 = ys+m-1;
 
   const mrb_int lim = n - m - (mrb_int)sizeof(bitint);
   mrb_int i;
 
   for (i=0; i < lim; i+=sizeof(bitint)) {
     bitint t0, t1;
 
     memcpy(&t0, s0+i, sizeof(bitint));
     memcpy(&t1, s1+i, sizeof(bitint));
 
     const bitint eq = (t0 ^ first) | (t1 ^ last);
     bitint zeros = ((~eq & MASK2) + MASK1) & (~eq & MASK3);
 
 
     for (size_t j = 0; zeros; j++) {
       if (zeros & MASK4) {
         const mrb_int idx = i + j;
         const char* p = s0 + idx + 1;
         if (memcmp(p, xs + 1, m - 2) == 0) {
           return idx;
         }
       }
 
 #if defined(MRB_ENDIAN_BIG)
       zeros <<= 8;
 #else
       zeros >>= 8;
 #endif
     }
   }
 
   if (i+m < n) {
     const char *p = s0;
     const char *e = ys + n;
     for (;p<e;) {
-      size_t len = e-p;
+      size_t len = e - p;
       p = (const char*)memchr(p, *xs, len);
-      if (p == NULL || len < m) break;
+      if (p == NULL || (e - p) < m) break;
       if (memcmp(p+1, xs+1, m-1) == 0) return (mrb_int)(p - ys);
       p++;
     }
   }
 
   return -1;
 }
