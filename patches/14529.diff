commit 8feaf5303d43cad4d057a51722713213d3c9732c
Author: Leandro Pereira <leandro@hardinfo.org>
Date:   Thu May 2 20:31:54 2019 -0700

    Properly limit number of elements in header_start array
    
    Credit to OSS-Fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=14529

diff --git a/fuzz/clusterfuzz-testcase-minimized-request_fuzzer-5636210766118912 b/fuzz/clusterfuzz-testcase-minimized-request_fuzzer-5636210766118912
new file mode 100644
index 00000000..db04e06c
--- /dev/null
+++ b/fuzz/clusterfuzz-testcase-minimized-request_fuzzer-5636210766118912
@@ -0,0 +1,3 @@
+GET / HTTP/1.1                                                              
+
+ 
\ No newline at end of file
diff --git a/src/lib/lwan-request.c b/src/lib/lwan-request.c
index 70a785d9..95907675 100644
--- a/src/lib/lwan-request.c
+++ b/src/lib/lwan-request.c
@@ -528,86 +528,86 @@ identify_http_path(struct lwan_request *request, char *buffer)
 static bool parse_headers(struct lwan_request_parser_helper *helper,
                           char *buffer)
 {
     char *buffer_end = helper->buffer->value + helper->buffer->len;
     char **header_start = helper->header_start;
     size_t n_headers = 0;
     char *p;
 
     for (p = buffer + 1;;) {
         char *next_chr = p;
         char *next_hdr = memchr(next_chr, '\r', (size_t)(buffer_end - p));
 
         if (!next_hdr)
             break;
 
         if (next_chr == next_hdr) {
             if (buffer_end - next_chr > 2) {
                 STRING_SWITCH_SMALL (next_hdr) {
                 case MULTICHAR_CONSTANT_SMALL('\r', '\n'):
                     helper->next_request = next_hdr + 2;
                 }
             }
             break;
         }
 
         header_start[n_headers++] = next_chr;
         header_start[n_headers++] = next_hdr;
 
         p = next_hdr + 2;
 
-        if (n_headers > N_HEADER_START || p >= buffer_end) {
+        if (n_headers >= N_HEADER_START || p >= buffer_end) {
             helper->n_header_start = 0;
             return false;
         }
     }
 
     for (size_t i = 0; i < n_headers; i += 2) {
         char *end = header_start[i + 1];
 
         p = header_start[i];
 
         STRING_SWITCH_L (p) {
         case MULTICHAR_CONSTANT_L('A', 'c', 'c', 'e'):
             p += HEADER_LENGTH("Accept");
 
             STRING_SWITCH_L (p) {
             case MULTICHAR_CONSTANT_L('-', 'E', 'n', 'c'):
                 helper->accept_encoding = HEADER("-Encoding");
                 break;
             }
             break;
         case MULTICHAR_CONSTANT_L('A', 'u', 't', 'h'):
             helper->authorization = HEADER("Authorization");
             break;
         case MULTICHAR_CONSTANT_L('C', 'o', 'n', 'n'):
             helper->connection = HEADER("Connection");
             break;
         case MULTICHAR_CONSTANT_L('C', 'o', 'n', 't'):
             p += HEADER_LENGTH("Content");
 
             STRING_SWITCH_L (p) {
             case MULTICHAR_CONSTANT_L('-', 'T', 'y', 'p'):
                 helper->content_type = HEADER("-Type");
                 break;
             case MULTICHAR_CONSTANT_L('-', 'L', 'e', 'n'):
                 helper->content_length = HEADER("-Length");
                 break;
             }
             break;
         case MULTICHAR_CONSTANT_L('C', 'o', 'o', 'k'):
             helper->cookie = HEADER("Cookie");
             break;
         case MULTICHAR_CONSTANT_L('I', 'f', '-', 'M'):
             helper->if_modified_since.raw = HEADER("If-Modified-Since");
             break;
         case MULTICHAR_CONSTANT_L('R', 'a', 'n', 'g'):
             helper->range.raw = HEADER("Range");
             break;
         }
     }
 
     helper->n_header_start = n_headers;
     return true;
 }
 #undef HEADER_LENGTH
 #undef HEADER
