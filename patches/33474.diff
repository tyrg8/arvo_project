commit f593230f5907260096202ef0302abe99b81c0bf7
Author: Paul Ramsey <pramsey@cleverelephant.ca>
Date:   Wed Aug 25 15:42:37 2021 -0700

    Sanitize fix to ensure stack allocated envelope is available to edgeNodingBuilder, closes https://github.com/libgeos/geos/issues/476

diff --git a/src/operation/overlayng/OverlayNG.cpp b/src/operation/overlayng/OverlayNG.cpp
index 709f28882..4c37ddfb5 100644
--- a/src/operation/overlayng/OverlayNG.cpp
+++ b/src/operation/overlayng/OverlayNG.cpp
@@ -207,64 +207,66 @@ std::unique_ptr<Geometry>
 OverlayNG::computeEdgeOverlay()
 {
     /**
      * Node the edges, using whatever noder is being used
      * Formerly in nodeEdges())
      */
     EdgeNodingBuilder nodingBuilder(pm, noder);
+    // clipEnv not always used, but needs to remain in scope
+    // as long as nodingBuilder when it is.
+    Envelope clipEnv;
 
     GEOS_CHECK_FOR_INTERRUPTS();
 
     if (isOptimized) {
-        Envelope clipEnv;
         bool gotClipEnv = OverlayUtil::clippingEnvelope(opCode, &inputGeom, pm, clipEnv);
         if (gotClipEnv) {
             nodingBuilder.setClipEnvelope(&clipEnv);
         }
     }
 
     std::vector<Edge*> edges = nodingBuilder.build(
         inputGeom.getGeometry(0),
         inputGeom.getGeometry(1));
 
     GEOS_CHECK_FOR_INTERRUPTS();
 
     /**
      * Record if an input geometry has collapsed.
      * This is used to avoid trying to locate disconnected edges
      * against a geometry which has collapsed completely.
      */
     inputGeom.setCollapsed(0, ! nodingBuilder.hasEdgesFor(0));
     inputGeom.setCollapsed(1, ! nodingBuilder.hasEdgesFor(1));
 
     /**
     * Inlined buildGraph() method here for memory purposes, so the
     * Edge* list allocated in the EdgeNodingBuilder survives
     * long enough to be copied into the OverlayGraph
     */
     // Sort the edges first, for comparison with JTS results
     // std::sort(edges.begin(), edges.end(), EdgeComparator);
     OverlayGraph graph;
     for (Edge* e : edges) {
         // Write out edge graph as hex for examination
         // std::cout << *e << std::endl;
         graph.addEdge(e);
     }
 
     if (isOutputNodedEdges) {
         return OverlayUtil::toLines(&graph, isOutputEdges, geomFact);
     }
 
     GEOS_CHECK_FOR_INTERRUPTS();
     labelGraph(&graph);
 
     // std::cout << std::endl << graph << std::endl;
 
     if (isOutputEdges || isOutputResultEdges) {
         return OverlayUtil::toLines(&graph, isOutputEdges, geomFact);
     }
 
     GEOS_CHECK_FOR_INTERRUPTS();
     return extractResult(opCode, &graph);
 }
 
 /*private*/
