commit 9c5803ff7618002b8d18cfcd65fa44ec20fb1c76
Author: Gerald Combs <gerald@wireshark.org>
Date:   Tue Feb 20 11:48:11 2018 -0800

    Airpdcap: Add length checks.
    
    Make sure we don't underflow length values.
    
    Bug: 14442
    Change-Id: I71baac428ba3b07fe4cd5a7f60fbe2a957ac460e
    Reviewed-on: https://code.wireshark.org/review/25937
    Reviewed-by: Gerald Combs <gerald@wireshark.org>
    Petri-Dish: Gerald Combs <gerald@wireshark.org>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Michael Mann <mmann78@netscape.net>

diff --git a/epan/crypt/airpdcap.c b/epan/crypt/airpdcap.c
index 5d86631625..78a6d6647a 100644
--- a/epan/crypt/airpdcap.c
+++ b/epan/crypt/airpdcap.c
@@ -322,174 +322,179 @@ static INT
 AirPDcapDecryptWPABroadcastKey(const EAPOL_RSN_KEY *pEAPKey, guint8 *decryption_key, PAIRPDCAP_SEC_ASSOCIATION sa, guint eapol_len)
 {
     guint8 key_version;
     const guint8 *key_data;
     guint8  *szEncryptedKey;
     guint16 key_bytes_len = 0; /* Length of the total key data field */
     guint16 key_len;           /* Actual group key length */
     static AIRPDCAP_KEY_ITEM dummy_key; /* needed in case AirPDcapRsnaMng() wants the key structure */
     AIRPDCAP_SEC_ASSOCIATION *tmp_sa;
 
     /* We skip verifying the MIC of the key. If we were implementing a WPA supplicant we'd want to verify, but for a sniffer it's not needed. */
 
     /* Preparation for decrypting the group key -  determine group key data length */
     /* depending on whether the pairwise key is TKIP or AES encryption key */
     key_version = AIRPDCAP_EAP_KEY_DESCR_VER(pEAPKey->key_information[1]);
     if (key_version == AIRPDCAP_WPA_KEY_VER_NOT_CCMP){
         /* TKIP */
         key_bytes_len = pntoh16(pEAPKey->key_length);
     }else if (key_version == AIRPDCAP_WPA_KEY_VER_AES_CCMP){
         /* AES */
         key_bytes_len = pntoh16(pEAPKey->key_data_len);
 
         /* AES keys must be at least 128 bits = 16 bytes. */
         if (key_bytes_len < 16) {
             return AIRPDCAP_RET_NO_VALID_HANDSHAKE;
         }
     }
 
     if ((key_bytes_len < GROUP_KEY_MIN_LEN) ||
         (eapol_len < sizeof(EAPOL_RSN_KEY)) ||
         (key_bytes_len > eapol_len - sizeof(EAPOL_RSN_KEY))) {
         return AIRPDCAP_RET_NO_VALID_HANDSHAKE;
     }
 
     /* Encrypted key is in the information element field of the EAPOL key packet */
     key_data = (const guint8 *)pEAPKey + sizeof(EAPOL_RSN_KEY);
     szEncryptedKey = (guint8 *)g_memdup(key_data, key_bytes_len);
 
     DEBUG_DUMP("Encrypted Broadcast key:", szEncryptedKey, key_bytes_len);
     DEBUG_DUMP("KeyIV:", pEAPKey->key_iv, 16);
     DEBUG_DUMP("decryption_key:", decryption_key, 16);
 
     /* We are rekeying, save old sa */
     tmp_sa=(AIRPDCAP_SEC_ASSOCIATION *)g_malloc(sizeof(AIRPDCAP_SEC_ASSOCIATION));
     memcpy(tmp_sa, sa, sizeof(AIRPDCAP_SEC_ASSOCIATION));
     sa->next=tmp_sa;
 
     /* As we have no concept of the prior association request at this point, we need to deduce the     */
     /* group key cipher from the length of the key bytes. In WPA this is straightforward as the        */
     /* keybytes just contain the GTK, and the GTK is only in the group handshake, NOT the M3.          */
     /* In WPA2 its a little more tricky as the M3 keybytes contain an RSN_IE, but the group handshake  */
     /* does not. Also there are other (variable length) items in the keybytes which we need to account */
     /* for to determine the true key length, and thus the group cipher.                                */
 
     if (key_version == AIRPDCAP_WPA_KEY_VER_NOT_CCMP){
         guint8 new_key[32];
         guint8 dummy[256] = { 0 };
         /* TKIP key */
         /* Per 802.11i, Draft 3.0 spec, section 8.5.2, p. 97, line 4-8, */
         /* group key is decrypted using RC4.  Concatenate the IV with the 16 byte EK (PTK+16) to get the decryption key */
 
         gcry_cipher_hd_t  rc4_handle;
 
         /* The WPA group key just contains the GTK bytes so deducing the type is straightforward   */
         /* Note - WPA M3 doesn't contain a group key so we'll only be here for the group handshake */
         sa->wpa.key_ver = (key_bytes_len >=TKIP_GROUP_KEY_LEN)?AIRPDCAP_WPA_KEY_VER_NOT_CCMP:AIRPDCAP_WPA_KEY_VER_AES_CCMP;
 
         /* Build the full decryption key based on the IV and part of the pairwise key */
         memcpy(new_key, pEAPKey->key_iv, 16);
         memcpy(new_key+16, decryption_key, 16);
         DEBUG_DUMP("FullDecrKey:", new_key, 32);
 
         if (gcry_cipher_open (&rc4_handle, GCRY_CIPHER_ARCFOUR, GCRY_CIPHER_MODE_STREAM, 0)) {
           return AIRPDCAP_RET_NO_VALID_HANDSHAKE;
         }
         if (gcry_cipher_setkey(rc4_handle, new_key, sizeof(new_key))) {
           gcry_cipher_close(rc4_handle);
           return AIRPDCAP_RET_NO_VALID_HANDSHAKE;
         }
 
         /* Do dummy 256 iterations of the RC4 algorithm (per 802.11i, Draft 3.0, p. 97 line 6) */
         gcry_cipher_decrypt(rc4_handle, dummy, 256, NULL, 0);
         gcry_cipher_decrypt(rc4_handle, szEncryptedKey, key_bytes_len, NULL, 0);
         gcry_cipher_close(rc4_handle);
 
     } else if (key_version == AIRPDCAP_WPA_KEY_VER_AES_CCMP){
         /* AES CCMP key */
 
         guint8 key_found;
         guint8 key_length;
         guint16 key_index;
         guint8 *decrypted_data;
 
         /* Unwrap the key; the result is key_bytes_len in length */
         decrypted_data = AES_unwrap(decryption_key, 16, szEncryptedKey,  key_bytes_len);
 
         /* With WPA2 what we get after Broadcast Key decryption is an actual RSN structure.
            The key itself is stored as a GTK KDE
            WPA2 IE (1 byte) id = 0xdd, length (1 byte), GTK OUI (4 bytes), key index (1 byte) and 1 reserved byte. Thus we have to
            pass pointer to the actual key with 8 bytes offset */
 
         key_found = FALSE;
         key_index = 0;
 
         /* Parse Key data until we found GTK KDE */
         /* GTK KDE = 00-0F-AC 01 */
         while(key_index < (key_bytes_len - 6) && !key_found){
             guint8 rsn_id;
             guint32 type;
 
             /* Get RSN ID */
             rsn_id = decrypted_data[key_index];
             type = ((decrypted_data[key_index + 2] << 24) +
                     (decrypted_data[key_index + 3] << 16) +
                     (decrypted_data[key_index + 4] << 8) +
                      (decrypted_data[key_index + 5]));
 
             if (rsn_id == 0xdd && type == 0x000fac01) {
                 key_found = TRUE;
             } else {
                 key_index += decrypted_data[key_index+1]+2;
             }
         }
 
         if (key_found){
+            if (decrypted_data[key_index+1] <= 6) {
+                g_free(decrypted_data);
+                g_free(szEncryptedKey);
+                return AIRPDCAP_RET_NO_VALID_HANDSHAKE;
+            }
             key_length = decrypted_data[key_index+1] - 6;
 
             if (key_index+8 >= key_bytes_len ||
                 key_length > key_bytes_len - key_index - 8) {
                 g_free(decrypted_data);
                 g_free(szEncryptedKey);
                 return AIRPDCAP_RET_NO_VALID_HANDSHAKE;
             }
 
             /* Skip over the GTK header info, and don't copy past the end of the encrypted data */
             memcpy(szEncryptedKey, decrypted_data+key_index+8, key_length);
         } else {
             g_free(decrypted_data);
             g_free(szEncryptedKey);
             return AIRPDCAP_RET_NO_VALID_HANDSHAKE;
         }
 
         if (key_length == TKIP_GROUP_KEY_LEN)
             sa->wpa.key_ver = AIRPDCAP_WPA_KEY_VER_NOT_CCMP;
         else
             sa->wpa.key_ver = AIRPDCAP_WPA_KEY_VER_AES_CCMP;
 
         g_free(decrypted_data);
     }
 
     key_len = (sa->wpa.key_ver==AIRPDCAP_WPA_KEY_VER_NOT_CCMP)?TKIP_GROUP_KEY_LEN:CCMP_GROUP_KEY_LEN;
     if (key_len > key_bytes_len) {
         /* the key required for this protocol is longer than the key that we just calculated */
         g_free(szEncryptedKey);
         return AIRPDCAP_RET_NO_VALID_HANDSHAKE;
     }
 
     /* Decrypted key is now in szEncryptedKey with len of key_len */
     DEBUG_DUMP("Broadcast key:", szEncryptedKey, key_len);
 
     /* Load the proper key material info into the SA */
     sa->key = &dummy_key;  /* we just need key to be not null because it is checked in AirPDcapRsnaMng().  The WPA key materials are actually in the .wpa structure */
     sa->validKey = TRUE;
 
     /* Since this is a GTK and its size is only 32 bytes (vs. the 64 byte size of a PTK), we fake it and put it in at a 32-byte offset so the  */
     /* AirPDcapRsnaMng() function will extract the right piece of the GTK for decryption. (The first 16 bytes of the GTK are used for decryption.) */
     memset(sa->wpa.ptk, 0, sizeof(sa->wpa.ptk));
     memcpy(sa->wpa.ptk+32, szEncryptedKey, key_len);
     g_free(szEncryptedKey);
     return AIRPDCAP_RET_SUCCESS_HANDSHAKE;
 }
 
 
 /* Return a pointer the the requested SA. If it doesn't exist create it. */
@@ -2174,135 +2179,142 @@ static INT
 AirPDcapTDLSDeriveKey(
     PAIRPDCAP_SEC_ASSOCIATION sa,
     const guint8 *data,
 #if GCRYPT_VERSION_NUMBER >= 0x010600
     guint offset_rsne,
 #else
     guint offset_rsne _U_,
 #endif
     guint offset_fte,
 #if GCRYPT_VERSION_NUMBER >= 0x010600
     guint offset_timeout,
 #else
     guint offset_timeout _U_,
 #endif
     guint offset_link,
 #if GCRYPT_VERSION_NUMBER >= 0x010600
     guint8 action)
 #else
     guint8 action _U_)
 #endif
 {
 
     gcry_md_hd_t sha256_handle;
     gcry_md_hd_t hmac_handle;
     const guint8 *snonce, *anonce, *initiator, *responder, *bssid;
     guint8 key_input[32];
 #if GCRYPT_VERSION_NUMBER >= 0x010600
     guint8 mic[16], seq_num = action + 1;
     guint8 zeros[16] = { 0 };
     gcry_mac_hd_t cmac_handle;
     size_t cmac_len = 16;
+    size_t cmac_write_len;
 #endif
 
     /* Get key input */
     anonce = &data[offset_fte + 20];
     snonce = &data[offset_fte + 52];
 
     gcry_md_open (&sha256_handle, GCRY_MD_SHA256, 0);
     if (memcmp(anonce, snonce, AIRPDCAP_WPA_NONCE_LEN) < 0) {
         gcry_md_write(sha256_handle, anonce, AIRPDCAP_WPA_NONCE_LEN);
         gcry_md_write(sha256_handle, snonce, AIRPDCAP_WPA_NONCE_LEN);
     } else {
         gcry_md_write(sha256_handle, snonce, AIRPDCAP_WPA_NONCE_LEN);
         gcry_md_write(sha256_handle, anonce, AIRPDCAP_WPA_NONCE_LEN);
     }
     memcpy(key_input, gcry_md_read(sha256_handle, 0), 32);
     gcry_md_close(sha256_handle);
 
     /* Derive key */
     bssid = &data[offset_link + 2];
     initiator = &data[offset_link + 8];
     responder = &data[offset_link + 14];
     if (gcry_md_open(&hmac_handle, GCRY_MD_SHA256, GCRY_MD_FLAG_HMAC)) {
         return AIRPDCAP_RET_UNSUCCESS;
     }
     if (gcry_md_setkey(hmac_handle, key_input, 32)) {
         gcry_md_close(hmac_handle);
         return AIRPDCAP_RET_UNSUCCESS;
     }
     gcry_md_putc(hmac_handle, 1);
     gcry_md_putc(hmac_handle, 0);
     gcry_md_write(hmac_handle, "TDLS PMK", 8);
     if (memcmp(initiator, responder, AIRPDCAP_MAC_LEN) < 0) {
           gcry_md_write(hmac_handle, initiator, AIRPDCAP_MAC_LEN);
           gcry_md_write(hmac_handle, responder, AIRPDCAP_MAC_LEN);
     } else {
           gcry_md_write(hmac_handle, responder, AIRPDCAP_MAC_LEN);
           gcry_md_write(hmac_handle, initiator, AIRPDCAP_MAC_LEN);
     }
     gcry_md_write(hmac_handle, bssid, AIRPDCAP_MAC_LEN);
     gcry_md_putc(hmac_handle, 0);
     gcry_md_putc(hmac_handle, 1);
     memcpy(key_input, gcry_md_read(hmac_handle, 0), 32);
     gcry_md_close(hmac_handle);
 
     /* Check MIC */
 #if GCRYPT_VERSION_NUMBER >= 0x010600
     if (gcry_mac_open(&cmac_handle, GCRY_MAC_CMAC_AES, 0, NULL)) {
         return AIRPDCAP_RET_UNSUCCESS;
     }
     if (gcry_mac_setkey(cmac_handle, key_input, 16)) {
         gcry_mac_close(cmac_handle);
         return AIRPDCAP_RET_UNSUCCESS;
     }
     gcry_mac_write(cmac_handle, initiator, AIRPDCAP_MAC_LEN);
     gcry_mac_write(cmac_handle, responder, AIRPDCAP_MAC_LEN);
     gcry_mac_write(cmac_handle, &seq_num, 1);
     gcry_mac_write(cmac_handle, &data[offset_link], data[offset_link + 1] + 2);
     gcry_mac_write(cmac_handle, &data[offset_rsne], data[offset_rsne + 1] + 2);
     gcry_mac_write(cmac_handle, &data[offset_timeout], data[offset_timeout + 1] + 2);
     gcry_mac_write(cmac_handle, &data[offset_fte], 4);
     gcry_mac_write(cmac_handle, zeros, 16);
-    gcry_mac_write(cmac_handle, &data[offset_fte + 20], data[offset_fte + 1] + 2 - 20);
+    cmac_write_len = data[offset_fte + 1] + 2;
+    if (cmac_write_len < 20) {
+        AIRPDCAP_DEBUG_PRINT_LINE("AirPDcapTDLSDeriveKey", "Bad MAC len", AIRPDCAP_DEBUG_LEVEL_3);
+        gcry_mac_close(cmac_handle);
+        return AIRPDCAP_RET_UNSUCCESS;
+    }
+    gcry_mac_write(cmac_handle, &data[offset_fte + 20], cmac_write_len - 20);
     if (gcry_mac_read(cmac_handle, mic, &cmac_len) != GPG_ERR_NO_ERROR) {
         AIRPDCAP_DEBUG_PRINT_LINE("AirPDcapTDLSDeriveKey", "MAC read error", AIRPDCAP_DEBUG_LEVEL_3);
         gcry_mac_close(cmac_handle);
         return AIRPDCAP_RET_UNSUCCESS;
     }
     if (memcmp(mic, &data[offset_fte + 4], 16)) {
         AIRPDCAP_DEBUG_PRINT_LINE("AirPDcapTDLSDeriveKey", "MIC verification failed", AIRPDCAP_DEBUG_LEVEL_3);
         gcry_mac_close(cmac_handle);
         return AIRPDCAP_RET_UNSUCCESS;
     }
     gcry_mac_close(cmac_handle);
 #else
     AIRPDCAP_DEBUG_PRINT_LINE("AirPDcapTDLSDeriveKey", "MIC verification failed, need libgcrypt >= 1.6", AIRPDCAP_DEBUG_LEVEL_3);
     return AIRPDCAP_RET_UNSUCCESS;
 #endif
     memcpy(AIRPDCAP_GET_TK(sa->wpa.ptk), &key_input[16], 16);
     memcpy(sa->wpa.nonce, snonce, AIRPDCAP_WPA_NONCE_LEN);
     sa->validKey = TRUE;
     sa->wpa.key_ver = AIRPDCAP_WPA_KEY_VER_AES_CCMP;
     AIRPDCAP_DEBUG_PRINT_LINE("AirPDcapTDLSDeriveKey", "MIC verified", AIRPDCAP_DEBUG_LEVEL_3);
     return  AIRPDCAP_RET_SUCCESS;
 }
 
 
 #ifdef __cplusplus
 }
 #endif
 
 /****************************************************************************/
 
 /*
  * Editor modelines
  *
  * Local Variables:
  * c-basic-offset: 4
  * tab-width: 8
  * indent-tabs-mode: nil
  * End:
  *
  * ex: set shiftwidth=4 tabstop=8 expandtab:
  * :indentSize=4:tabSize=8:noTabs=true:
  */
