commit ee6470b68c36f33107328fead56c660f42b6419e
Merge: 9656abd176 5d5df7e413
Author: Hannes MÃ¼hleisen <hannes@muehleisen.org>
Date:   Tue Sep 6 14:47:44 2022 +0200

    Merge pull request #4616 from lokax/fix-update-oid-p
    
    Fix update statement on generated column

diff --git a/src/planner/binder/statement/bind_update.cpp b/src/planner/binder/statement/bind_update.cpp
index e80b041723..8281909d87 100644
--- a/src/planner/binder/statement/bind_update.cpp
+++ b/src/planner/binder/statement/bind_update.cpp
@@ -1,19 +1,20 @@
+#include "duckdb/parser/expression/columnref_expression.hpp"
 #include "duckdb/parser/statement/update_statement.hpp"
 #include "duckdb/planner/binder.hpp"
+#include "duckdb/planner/bound_tableref.hpp"
+#include "duckdb/planner/constraints/bound_check_constraint.hpp"
 #include "duckdb/planner/expression/bound_columnref_expression.hpp"
 #include "duckdb/planner/expression/bound_default_expression.hpp"
 #include "duckdb/planner/expression_binder/update_binder.hpp"
 #include "duckdb/planner/expression_binder/where_binder.hpp"
 #include "duckdb/planner/operator/logical_filter.hpp"
 #include "duckdb/planner/operator/logical_get.hpp"
 #include "duckdb/planner/operator/logical_projection.hpp"
 #include "duckdb/planner/operator/logical_update.hpp"
-#include "duckdb/planner/constraints/bound_check_constraint.hpp"
-#include "duckdb/parser/expression/columnref_expression.hpp"
-#include "duckdb/storage/data_table.hpp"
-#include "duckdb/planner/bound_tableref.hpp"
 #include "duckdb/planner/tableref/bound_basetableref.hpp"
 #include "duckdb/planner/tableref/bound_crossproductref.hpp"
+#include "duckdb/storage/data_table.hpp"
+
 #include <algorithm>
 
 namespace duckdb {
@@ -121,120 +122,120 @@ static void BindUpdateConstraints(TableCatalogEntry &table, LogicalGet &get, Log
 BoundStatement Binder::Bind(UpdateStatement &stmt) {
 	BoundStatement result;
 	unique_ptr<LogicalOperator> root;
 	LogicalGet *get;
 
 	// visit the table reference
 	auto bound_table = Bind(*stmt.table);
 	if (bound_table->type != TableReferenceType::BASE_TABLE) {
 		throw BinderException("Can only update base table!");
 	}
 	auto &table_binding = (BoundBaseTableRef &)*bound_table;
 	auto table = table_binding.table;
 
 	// Add CTEs as bindable
 	AddCTEMap(stmt.cte_map);
 
 	if (stmt.from_table) {
 		BoundCrossProductRef bound_crossproduct;
 		bound_crossproduct.left = move(bound_table);
 		bound_crossproduct.right = Bind(*stmt.from_table);
 		root = CreatePlan(bound_crossproduct);
 		get = (LogicalGet *)root->children[0].get();
 	} else {
 		root = CreatePlan(*bound_table);
 		get = (LogicalGet *)root.get();
 	}
 
 	if (!table->temporary) {
 		// update of persistent table: not read only!
 		properties.read_only = false;
 	}
 	auto update = make_unique<LogicalUpdate>(table);
 
 	// set return_chunk boolean early because it needs uses update_is_del_and_insert logic
 	if (!stmt.returning_list.empty()) {
 		update->return_chunk = true;
 	}
 	// bind the default values
 	BindDefaultValues(table->columns, update->bound_defaults);
 
 	// project any additional columns required for the condition/expressions
 	if (stmt.condition) {
 		WhereBinder binder(*this, context);
 		auto condition = binder.Bind(stmt.condition);
 
 		PlanSubqueries(&condition, &root);
 		auto filter = make_unique<LogicalFilter>(move(condition));
 		filter->AddChild(move(root));
 		root = move(filter);
 	}
 
 	D_ASSERT(stmt.columns.size() == stmt.expressions.size());
 
 	auto proj_index = GenerateTableIndex();
 	vector<unique_ptr<Expression>> projection_expressions;
 
 	for (idx_t i = 0; i < stmt.columns.size(); i++) {
 		auto &colname = stmt.columns[i];
 		auto &expr = stmt.expressions[i];
 		if (!table->ColumnExists(colname)) {
 			throw BinderException("Referenced update column %s not found in table!", colname);
 		}
 		auto &column = table->GetColumn(colname);
 		if (column.Generated()) {
 			throw BinderException("Cant update column \"%s\" because it is a generated column!", column.Name());
 		}
-		if (std::find(update->columns.begin(), update->columns.end(), column.Oid()) != update->columns.end()) {
+		if (std::find(update->columns.begin(), update->columns.end(), column.StorageOid()) != update->columns.end()) {
 			throw BinderException("Multiple assignments to same column \"%s\"", colname);
 		}
-		update->columns.push_back(column.Oid());
+		update->columns.push_back(column.StorageOid());
 
 		if (expr->type == ExpressionType::VALUE_DEFAULT) {
 			update->expressions.push_back(make_unique<BoundDefaultExpression>(column.Type()));
 		} else {
 			UpdateBinder binder(*this, context);
 			binder.target_type = column.Type();
 			auto bound_expr = binder.Bind(expr);
 			PlanSubqueries(&bound_expr, &root);
 
 			update->expressions.push_back(make_unique<BoundColumnRefExpression>(
 			    bound_expr->return_type, ColumnBinding(proj_index, projection_expressions.size())));
 			projection_expressions.push_back(move(bound_expr));
 		}
 	}
 
 	// now create the projection
 	auto proj = make_unique<LogicalProjection>(proj_index, move(projection_expressions));
 	proj->AddChild(move(root));
 
 	// bind any extra columns necessary for CHECK constraints or indexes
 	BindUpdateConstraints(*table, *get, *proj, *update);
 
 	// finally add the row id column to the projection list
 	proj->expressions.push_back(make_unique<BoundColumnRefExpression>(
 	    LogicalType::ROW_TYPE, ColumnBinding(get->table_index, get->column_ids.size())));
 	get->column_ids.push_back(COLUMN_IDENTIFIER_ROW_ID);
 
 	// set the projection as child of the update node and finalize the result
 	update->AddChild(move(proj));
 
 	if (!stmt.returning_list.empty()) {
 		auto update_table_index = GenerateTableIndex();
 		update->table_index = update_table_index;
 		unique_ptr<LogicalOperator> update_as_logicaloperator = move(update);
 
 		return BindReturning(move(stmt.returning_list), table, update_table_index, move(update_as_logicaloperator),
 		                     move(result));
 
 	} else {
 		update->table_index = 0;
 		result.names = {"Count"};
 		result.types = {LogicalType::BIGINT};
 		result.plan = move(update);
 		properties.allow_stream_result = false;
 		properties.return_type = StatementReturnType::CHANGED_ROWS;
 	}
 	return result;
 }
 
 } // namespace duckdb
diff --git a/test/issues/general/test_4615.test b/test/issues/general/test_4615.test
new file mode 100644
index 0000000000..b8ed8bdf23
--- /dev/null
+++ b/test/issues/general/test_4615.test
@@ -0,0 +1,19 @@
+# name: test/issues/general/test_4615.test
+# group: [general]
+
+statement ok
+pragma enable_verification
+
+statement ok
+CREATE TABLE t1 (int AS (x + 100), x INT);
+
+statement ok
+INSERT INTO t1 VALUES (1);
+
+statement ok
+UPDATE t1 SET x=0 WHERE x = 1;
+
+query II
+SELECT * FROM t1;
+----
+100	0
\ No newline at end of file
