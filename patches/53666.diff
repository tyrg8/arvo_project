commit c5507dff5f5b2936937442b43f6c021b4f8a493d
Author: Greg Hudson <ghudson@mit.edu>
Date:   Sat Dec 10 00:40:44 2022 -0500

    Simplify krb5_chpw_message() UTF-8 processing
    
    Only validate the message as a UTF-8 string, rather than normalizing
    it.

diff --git a/src/include/k5-unicode.h b/src/include/k5-unicode.h
index e51ab2fe8..45c1788b2 100644
--- a/src/include/k5-unicode.h
+++ b/src/include/k5-unicode.h
@@ -125,6 +125,8 @@ krb5_error_code krb5int_utf8_normalize(
 int krb5int_utf8_normcmp(
     const krb5_data *,
     const krb5_data *,
     unsigned);
 
+krb5_boolean k5_utf8_validate(const krb5_data *data);
+
 #endif /* K5_UNICODE_H */
diff --git a/src/lib/krb5/krb/chpw.c b/src/lib/krb5/krb/chpw.c
index cdec59521..803c80feb 100644
--- a/src/lib/krb5/krb/chpw.c
+++ b/src/lib/krb5/krb/chpw.c
@@ -476,36 +476,34 @@ krb5_error_code KRB5_CALLCONV
 krb5_chpw_message(krb5_context context, const krb5_data *server_string,
                   char **message_out)
 {
     krb5_error_code ret;
-    krb5_data *string;
     char *msg;
 
     *message_out = NULL;
 
     /* If server_string contains an AD password policy, construct a message
      * based on that. */
     ret = decode_ad_policy_info(server_string, &msg);
     if (ret == 0 && msg != NULL) {
         *message_out = msg;
         return 0;
     }
 
     /* If server_string contains a valid UTF-8 string, return that. */
     if (server_string->length > 0 &&
         memchr(server_string->data, 0, server_string->length) == NULL &&
-        krb5int_utf8_normalize(server_string, &string,
-                               KRB5_UTF8_APPROX) == 0) {
-        *message_out = string->data; /* already null terminated */
-        free(string);
-        return 0;
+        k5_utf8_validate(server_string)) {
+        *message_out = k5memdup0(server_string->data, server_string->length,
+                                 &ret);
+        return (*message_out == NULL) ? ENOMEM : 0;
     }
 
     /* server_string appears invalid, so try to be helpful. */
     msg = strdup(_("Try a more complex password, or contact your "
                    "administrator."));
     if (msg == NULL)
         return ENOMEM;
 
     *message_out = msg;
     return 0;
 }
diff --git a/src/lib/krb5/unicode/ucstr.c b/src/lib/krb5/unicode/ucstr.c
index e3ed9bc64..0257882cd 100644
--- a/src/lib/krb5/unicode/ucstr.c
+++ b/src/lib/krb5/unicode/ucstr.c
@@ -1,23 +1,24 @@
 /*
  * Copyright 1998-2008 The OpenLDAP Foundation. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted only as authorized by the OpenLDAP Public
  * License.
  *
  * A copy of this license is available in file LICENSE in the top-level
  * directory of the distribution or, alternatively, at
  * <https://www.OpenLDAP.org/license.html>.
  */
 
 /*
  * This work is part of OpenLDAP Software <https://www.openldap.org/>.
  * $OpenLDAP: pkg/ldap/libraries/liblunicode/ucstr.c,v 1.40 2008/03/04 06:24:05 hyc Exp $
  */
 
 #include "k5-int.h"
 #include "k5-utf8.h"
 #include "k5-unicode.h"
+#include "k5-input.h"
 #include "ucdata/ucdata.h"
 
 #include <ctype.h>
@@ -94,12 +95,38 @@ void
 krb5int_ucstr2upper(
 		    krb5_unicode * u,
 		    size_t n)
 {
     for (; 0 < n; ++u, --n) {
 	*u = uctoupper(*u);
     }
 }
 
+/* Return true if data contains valid UTF-8 sequences. */
+krb5_boolean
+k5_utf8_validate(const krb5_data *data)
+{
+    struct k5input in;
+    int len, tmplen, i;
+    const uint8_t *bytes;
+
+    k5_input_init(&in, data->data, data->length);
+    while (!in.status && in.len > 0) {
+	len = KRB5_UTF8_CHARLEN(in.ptr);
+	if (len < 1 || len > 4)
+	    return FALSE;
+	bytes = k5_input_get_bytes(&in, len);
+	if (bytes == NULL)
+	    return FALSE;
+	if (KRB5_UTF8_CHARLEN2(bytes, tmplen) != len)
+	    return FALSE;
+	for (i = 1; i < len; i++) {
+	    if ((bytes[i] & 0xc0) != 0x80)
+		return FALSE;
+	}
+    }
+    return !in.status;
+}
+
 #define TOUPPER(c)  (islower(c) ? toupper(c) : (c))
 #define TOLOWER(c)  (isupper(c) ? tolower(c) : (c))
 
