commit 924ba961d68f6833f617fd3ad03c40f63f287142
Author: Nikias Bassen <nikias@gmx.li>
Date:   Mon Jan 31 02:55:18 2022 +0100

    jplist: Fix OOB read by making sure the JSMN token index is in valid range
    
    Credit to OSS-Fuzz

diff --git a/src/jplist.c b/src/jplist.c
index 88cce28..2182079 100644
--- a/src/jplist.c
+++ b/src/jplist.c
@@ -418,46 +418,51 @@ PLIST_API int plist_to_json(plist_t plist, char **json, uint32_t* length, int pr
     return PLIST_ERR_SUCCESS;
 }
 
-static plist_t parse_primitive(const char* js, jsmntok_t* tokens, int* index)
+typedef struct {
+    jsmntok_t* tokens;
+    int count;
+} jsmntok_info_t;
+
+static plist_t parse_primitive(const char* js, jsmntok_info_t* ti, int* index)
 {
-    if (tokens[*index].type != JSMN_PRIMITIVE) {
+    if (ti->tokens[*index].type != JSMN_PRIMITIVE) {
         PLIST_JSON_ERR("%s: token type != JSMN_PRIMITIVE\n", __func__);
         return NULL;
     }
     plist_t val = NULL;
-    const char* str_val = js + tokens[*index].start;
-    const char* str_end = js + tokens[*index].end;
-    size_t str_len = tokens[*index].end - tokens[*index].start;
+    const char* str_val = js + ti->tokens[*index].start;
+    const char* str_end = js + ti->tokens[*index].end;
+    size_t str_len = ti->tokens[*index].end - ti->tokens[*index].start;
     if (!strncmp("false", str_val, str_len)) {
         val = plist_new_bool(0);
     } else if (!strncmp("true", str_val, str_len)) {
         val = plist_new_bool(1);
     } else if (!strncmp("null", str_val, str_len)) {
         plist_data_t data = plist_new_plist_data();
         data->type = PLIST_NULL;
         val = plist_new_node(data);
     } else if (str_val[0] == '-' || isdigit(str_val[0])) {
         char* endp = NULL;
         long long intpart = strtol(str_val, &endp, 10);
         if (endp >= str_end) {
             /* integer */
             val = plist_new_uint((uint64_t)intpart);
         } else if (*endp == '.' && endp+1 < str_end && isdigit(*(endp+1))) {
             /* float */
             char* fendp = endp+1;
             while (isdigit(*fendp) && fendp < str_end) fendp++;
             if ((fendp > endp+1 && fendp >= str_end) || (fendp+2 < str_end && (*fendp == 'e' || *fendp == 'E') && (*(fendp+1) == '+' || *(fendp+1) == '-') && isdigit(*(fendp+2)))) {
                 double dval = atof(str_val);
                 val = plist_new_real(dval);
             } else {
                 PLIST_JSON_ERR("%s: invalid character at offset %d when parsing floating point value\n", __func__, (int)(fendp - js));
             }
         } else {
             PLIST_JSON_ERR("%s: invalid character at offset %d when parsing numerical value\n", __func__, (int)(endp - js));
         }
     } else {
         PLIST_JSON_ERR("%s: invalid primitive value '%.*s' encountered\n", __func__, (int)str_len, str_val);
     }
     (*index)++;
     return val;
 }
@@ -540,117 +545,128 @@ static char* unescape_string(const char* str_val, size_t str_len, size_t *new_le
     return strval;
 }
 
-static plist_t parse_string(const char* js, jsmntok_t* tokens, int* index)
+static plist_t parse_string(const char* js, jsmntok_info_t* ti, int* index)
 {
-    if (tokens[*index].type != JSMN_STRING) {
+    if (ti->tokens[*index].type != JSMN_STRING) {
         PLIST_JSON_ERR("%s: token type != JSMN_STRING\n", __func__);
         return NULL;
     }
 
     size_t str_len = 0; ;
-    char* strval = unescape_string(js + tokens[*index].start, tokens[*index].end - tokens[*index].start, &str_len);
+    char* strval = unescape_string(js + ti->tokens[*index].start, ti->tokens[*index].end - ti->tokens[*index].start, &str_len);
     if (!strval) {
         return NULL;
     }
     plist_t node;
 
     plist_data_t data = plist_new_plist_data();
     data->type = PLIST_STRING;
     data->strval = strval;
     data->length = str_len;
     node = plist_new_node(data);
 
     (*index)++;
     return node;
 }
 
-static plist_t parse_object(const char* js, jsmntok_t* tokens, int* index);
+static plist_t parse_object(const char* js, jsmntok_info_t* ti, int* index);
 
-static plist_t parse_array(const char* js, jsmntok_t* tokens, int* index)
+static plist_t parse_array(const char* js, jsmntok_info_t* ti, int* index)
 {
-    if (tokens[*index].type != JSMN_ARRAY) {
+    if (ti->tokens[*index].type != JSMN_ARRAY) {
         PLIST_JSON_ERR("%s: token type != JSMN_ARRAY\n", __func__);
         return NULL;
     }
     plist_t arr = plist_new_array();
-    int num_tokens = tokens[*index].size;
+    int num_tokens = ti->tokens[*index].size;
     int num;
     int j = (*index)+1;
     for (num = 0; num < num_tokens; num++) {
+        if (j >= ti->count) {
+            PLIST_JSON_ERR("%s: token index out of valid range\n", __func__);
+            return NULL;
+        }
         plist_t val = NULL;
-        switch (tokens[j].type) {
+        switch (ti->tokens[j].type) {
             case JSMN_OBJECT:
-                val = parse_object(js, tokens, &j);
+                val = parse_object(js, ti, &j);
                 break;
             case JSMN_ARRAY:
-                val = parse_array(js, tokens, &j);
+                val = parse_array(js, ti, &j);
                 break;
             case JSMN_STRING:
-                val = parse_string(js, tokens, &j);
+                val = parse_string(js, ti, &j);
                 break;
             case JSMN_PRIMITIVE:
-                val = parse_primitive(js, tokens, &j);
+                val = parse_primitive(js, ti, &j);
                 break;
             default:
                 break;
         }
         if (val) {
             plist_array_append_item(arr, val);
         } else {
             plist_free(arr);
             return NULL;
         }
     }
     *(index) = j;
     return arr;
 }
 
-static plist_t parse_object(const char* js, jsmntok_t* tokens, int* index)
+static plist_t parse_object(const char* js, jsmntok_info_t* ti, int* index)
 {
-    if (tokens[*index].type != JSMN_OBJECT) {
+    if (ti->tokens[*index].type != JSMN_OBJECT) {
         PLIST_JSON_ERR("%s: token type != JSMN_OBJECT\n", __func__);
         return NULL;
     }
     plist_t obj = plist_new_dict();
-    int num_tokens = tokens[*index].size;
+    int num_tokens = ti->tokens[*index].size;
     int num;
     int j = (*index)+1;
     for (num = 0; num < num_tokens; num++) {
-        if (tokens[j].type == JSMN_STRING) {
-            char* key = unescape_string(js + tokens[j].start, tokens[j].end - tokens[j].start, NULL);
+        if (j >= ti->count) {
+            PLIST_JSON_ERR("%s: token index out of valid range\n", __func__);
+            return NULL;
+        }
+        if (ti->tokens[j].type == JSMN_STRING) {
+            char* key = unescape_string(js + ti->tokens[j].start, ti->tokens[j].end - ti->tokens[j].start, NULL);
             if (!key) {
                 plist_free(obj);
                 return NULL;
             }
             plist_t val = NULL;
             j++;
             num++;
-            switch (tokens[j].type) {
+            switch (ti->tokens[j].type) {
                 case JSMN_OBJECT:
-                    val = parse_object(js, tokens, &j);
+                    val = parse_object(js, ti, &j);
                     break;
                 case JSMN_ARRAY:
-                    val = parse_array(js, tokens, &j);
+                    val = parse_array(js, ti, &j);
                     break;
                 case JSMN_STRING:
-                    val = parse_string(js, tokens, &j);
+                    val = parse_string(js, ti, &j);
                     break;
                 case JSMN_PRIMITIVE:
-                    val = parse_primitive(js, tokens, &j);
+                    val = parse_primitive(js, ti, &j);
                     break;
                 default:
                     break;
             }
             if (val) {
                 plist_dict_set_item(obj, key, val);
+            } else {
+                plist_free(obj);
+                return NULL;
             }
             free(key);
         } else {
             PLIST_JSON_ERR("%s: keys must be of type STRING\n", __func__);
             plist_free(obj);
             return NULL;
         }
     }
     (*index) = j;
     return obj;
 }
@@ -658,71 +674,72 @@ static plist_t parse_object(const char* js, jsmntok_t* tokens, int* index)
 PLIST_API int plist_from_json(const char *json, uint32_t length, plist_t * plist)
 {
     if (!plist) {
         return PLIST_ERR_INVALID_ARG;
     }
     *plist = NULL;
     if (!json || (length == 0)) {
         return PLIST_ERR_INVALID_ARG;
     }
 
     jsmn_parser parser;
     jsmn_init(&parser);
     int maxtoks = 256;
     int curtoks = 0;
     int r = 0;
     jsmntok_t *tokens = NULL;
 
     do {
         jsmntok_t* newtokens = realloc(tokens, sizeof(jsmntok_t)*maxtoks);
         if (!newtokens) {
             PLIST_JSON_ERR("%s: Out of memory\n", __func__);
             return PLIST_ERR_NO_MEM;
         }
         memset((unsigned char*)newtokens + sizeof(jsmntok_t)*curtoks, '\0', sizeof(jsmntok_t)*(maxtoks-curtoks));
         tokens = newtokens;
         curtoks = maxtoks;
 
         r = jsmn_parse(&parser, json, length, tokens, maxtoks);
         if (r == JSMN_ERROR_NOMEM) {
             maxtoks+=16;
             continue;
         }
     } while (r == JSMN_ERROR_NOMEM);
 
     switch(r) {
         case JSMN_ERROR_NOMEM:
             PLIST_JSON_ERR("%s: Out of memory...\n", __func__);
             free(tokens);
             return PLIST_ERR_NO_MEM;
         case JSMN_ERROR_INVAL:
             PLIST_JSON_ERR("%s: Invalid character inside JSON string\n", __func__);
             free(tokens);
             return PLIST_ERR_PARSE;
         case JSMN_ERROR_PART:
             PLIST_JSON_ERR("%s: Incomplete JSON, more bytes expected\n", __func__);
             free(tokens);
             return PLIST_ERR_PARSE;
         default:
             break;
     }
 
     int startindex = 0;
+    jsmntok_info_t ti = { tokens, parser.toknext };
     switch (tokens[startindex].type) {
         case JSMN_PRIMITIVE:
-            *plist = parse_primitive(json, tokens, &startindex);
+            *plist = parse_primitive(json, &ti, &startindex);
             break;
         case JSMN_STRING:
-            *plist = parse_string(json, tokens, &startindex);
+            *plist = parse_string(json, &ti, &startindex);
             break;
         case JSMN_ARRAY:
-            *plist = parse_array(json, tokens, &startindex);
+            *plist = parse_array(json, &ti, &startindex);
             break;
         case JSMN_OBJECT:
-            *plist = parse_object(json, tokens, &startindex);
+            *plist = parse_object(json, &ti, &startindex);
             break;
         default:
             break;
     }
     free(tokens);
     return PLIST_ERR_SUCCESS;
 }
