commit eca4047c7f90d6893ac190126c426e40458f7bbf
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Tue Nov 14 23:01:15 2017 +0300

    ArwDecoder::decodeRawInternal(): ARWv1 requires height in multiples of two.

diff --git a/src/librawspeed/decoders/ArwDecoder.cpp b/src/librawspeed/decoders/ArwDecoder.cpp
index f0e35904..f8995c40 100644
--- a/src/librawspeed/decoders/ArwDecoder.cpp
+++ b/src/librawspeed/decoders/ArwDecoder.cpp
@@ -108,114 +108,115 @@ RawImage ArwDecoder::decodeSRF(const TiffIFD* raw) {
 RawImage ArwDecoder::decodeRawInternal() {
   const TiffIFD* raw = nullptr;
   vector<const TiffIFD*> data = mRootIFD->getIFDsWithTag(STRIPOFFSETS);
 
   if (data.empty()) {
     TiffEntry *model = mRootIFD->getEntryRecursive(MODEL);
 
     if (model && model->getString() == "DSLR-A100") {
       // We've caught the elusive A100 in the wild, a transitional format
       // between the simple sanity of the MRW custom format and the wordly
       // wonderfullness of the Tiff-based ARW format, let's shoot from the hip
       raw = mRootIFD->getIFDWithTag(SUBIFDS);
       uint32 off = raw->getEntry(SUBIFDS)->getU32();
       uint32 width = 3881;
       uint32 height = 2608;
 
       mRaw->dim = iPoint2D(width, height);
       mRaw->createData();
       ByteStream input(mFile, off);
 
       DecodeARW(input, width, height);
 
       return mRaw;
     }
 
     if (hints.has("srf_format"))
       return decodeSRF(raw);
 
     ThrowRDE("No image data found");
   }
 
   raw = data[0];
   int compression = raw->getEntry(COMPRESSION)->getU32();
   if (1 == compression) {
     DecodeUncompressed(raw);
     return mRaw;
   }
 
   if (32767 != compression)
     ThrowRDE("Unsupported compression");
 
   TiffEntry *offsets = raw->getEntry(STRIPOFFSETS);
   TiffEntry *counts = raw->getEntry(STRIPBYTECOUNTS);
 
   if (offsets->count != 1) {
     ThrowRDE("Multiple Strips found: %u", offsets->count);
   }
   if (counts->count != offsets->count) {
     ThrowRDE(
         "Byte count number does not match strip size: count:%u, strips:%u ",
         counts->count, offsets->count);
   }
   uint32 width = raw->getEntry(IMAGEWIDTH)->getU32();
   uint32 height = raw->getEntry(IMAGELENGTH)->getU32();
   uint32 bitPerPixel = raw->getEntry(BITSPERSAMPLE)->getU32();
 
   // Sony E-550 marks compressed 8bpp ARW with 12 bit per pixel
   // this makes the compression detect it as a ARW v1.
   // This camera has however another MAKER entry, so we MAY be able
   // to detect it this way in the future.
   data = mRootIFD->getIFDsWithTag(MAKE);
   if (data.size() > 1) {
     for (auto &i : data) {
       string make = i->getEntry(MAKE)->getString();
       /* Check for maker "SONY" without spaces */
       if (make == "SONY")
         bitPerPixel = 8;
     }
   }
 
   bool arw1 = counts->getU32() * 8 != width * height * bitPerPixel;
   if (arw1)
     height += 8;
 
-  if (width == 0 || height == 0 || width > 8000 || height > 5320)
+  if (width == 0 || height == 0 || height % 2 != 0 || width > 8000 ||
+      height > 5320)
     ThrowRDE("Unexpected image dimensions found: (%u; %u)", width, height);
 
   mRaw->dim = iPoint2D(width, height);
   mRaw->createData();
 
   std::vector<ushort16> curve(0x4001);
   TiffEntry *c = raw->getEntry(SONY_CURVE);
   uint32 sony_curve[] = { 0, 0, 0, 0, 0, 4095 };
 
   for (uint32 i = 0; i < 4; i++)
     sony_curve[i+1] = (c->getU16(i) >> 2) & 0xfff;
 
   for (uint32 i = 0; i < 0x4001; i++)
     curve[i] = i;
 
   for (uint32 i = 0; i < 5; i++)
     for (uint32 j = sony_curve[i] + 1; j <= sony_curve[i+1]; j++)
       curve[j] = curve[j-1] + (1 << i);
 
   RawImageCurveGuard curveHandler(&mRaw, curve, uncorrectedRawValues);
 
   uint32 c2 = counts->getU32();
   uint32 off = offsets->getU32();
 
   if (!mFile->isValid(off))
     ThrowRDE("Data offset after EOF, file probably truncated");
 
   if (!mFile->isValid(off, c2))
     c2 = mFile->getSize() - off;
 
   ByteStream input(mFile, off, c2);
 
   if (arw1)
     DecodeARW(input, width, height);
   else
     DecodeARW2(input, width, height, bitPerPixel);
 
   return mRaw;
 }
@@ -247,39 +248,40 @@ void ArwDecoder::DecodeUncompressed(const TiffIFD* raw) {
 }
 
 void ArwDecoder::DecodeARW(const ByteStream& input, uint32 w, uint32 h) {
-  if (0 == w)
-    return;
+  assert(w > 0);
+  assert(h > 0);
+  assert(h % 2 == 0);
 
   BitPumpMSB bits(input);
   uchar8* data = mRaw->getData();
   auto* dest = reinterpret_cast<ushort16*>(&data[0]);
   uint32 pitch = mRaw->pitch / sizeof(ushort16);
   int sum = 0;
   for (int64 x = w - 1; x >= 0; x--) {
     for (uint32 y = 0; y < h + 1; y += 2) {
       bits.fill();
 
       if (y == h)
         y = 1;
 
       uint32 len = 4 - bits.getBitsNoFill(2);
 
       if (len == 3 && bits.getBitsNoFill(1))
         len = 0;
 
       if (len == 4)
         while (len < 17 && !bits.getBitsNoFill(1))
           len++;
 
       int diff = bits.getBits(len);
       diff = len != 0 ? HuffmanTable::signExtended(diff, len) : diff;
       sum += diff;
 
       if ((sum >> 12) > 0)
         ThrowRDE("Error decompressing");
 
       if (y < h)
         dest[x + y * pitch] = sum;
     }
   }
 }
