commit 068f6771ad3d309bc64a8bde0124da078186e695
Author: Tim Ledbetter <timledbetter@gmail.com>
Date:   Tue Oct 10 21:36:44 2023 +0100

    LibVideo/VP9: Check for invalid subsampled block sizes
    
    Previously, a corrupted block could cause
    `Parser::get_subsampled_block_size()` to return an invalid value. We
    now return an error in this case.

diff --git a/Userland/Libraries/LibVideo/VP9/Parser.cpp b/Userland/Libraries/LibVideo/VP9/Parser.cpp
index ab3910c5d7..90292861ac 100644
--- a/Userland/Libraries/LibVideo/VP9/Parser.cpp
+++ b/Userland/Libraries/LibVideo/VP9/Parser.cpp
@@ -1404,63 +1404,66 @@ static TransformSet select_transform_type(BlockContext const& block_context, u8
 DecoderErrorOr<bool> Parser::residual(BlockContext& block_context, bool has_block_above, bool has_block_left)
 {
     bool block_had_non_zero_tokens = false;
     Array<u8, 1024> token_cache;
     for (u8 plane = 0; plane < 3; plane++) {
         auto plane_subsampling_x = (plane > 0) ? block_context.frame_context.color_config.subsampling_x : false;
         auto plane_subsampling_y = (plane > 0) ? block_context.frame_context.color_config.subsampling_y : false;
         auto plane_size = get_subsampled_block_size(block_context.size, plane_subsampling_x, plane_subsampling_y);
+        if (plane_size == Block_Invalid) {
+            return DecoderError::corrupted("Invalid block size"sv);
+        }
         auto transform_size = get_uv_transform_size(block_context.transform_size, plane_size);
         auto transform_size_in_sub_blocks = transform_size_to_sub_blocks(transform_size);
         auto block_size_in_sub_blocks = block_size_to_sub_blocks(plane_size);
 
         auto base_x_in_pixels = (blocks_to_pixels(block_context.column)) >> plane_subsampling_x;
         auto base_y_in_pixels = (blocks_to_pixels(block_context.row)) >> plane_subsampling_y;
         if (block_context.is_inter_predicted()) {
             if (block_context.size < Block_8x8) {
                 for (auto y = 0; y < block_size_in_sub_blocks.height(); y++) {
                     for (auto x = 0; x < block_size_in_sub_blocks.width(); x++) {
                         TRY(m_decoder.predict_inter(plane, block_context, base_x_in_pixels + sub_blocks_to_pixels(x), base_y_in_pixels + sub_blocks_to_pixels(y), sub_blocks_to_pixels(1), sub_blocks_to_pixels(1), (y * block_size_in_sub_blocks.width()) + x));
                     }
                 }
             } else {
                 TRY(m_decoder.predict_inter(plane, block_context, base_x_in_pixels, base_y_in_pixels, sub_blocks_to_pixels(block_size_in_sub_blocks.width()), sub_blocks_to_pixels(block_size_in_sub_blocks.height()), 0));
             }
         }
 
         auto frame_right_in_pixels = (blocks_to_pixels(block_context.frame_context.columns())) >> plane_subsampling_x;
         auto frame_bottom_in_pixels = (blocks_to_pixels(block_context.frame_context.rows())) >> plane_subsampling_y;
 
         auto sub_block_index = 0;
         for (u32 y = 0; y < block_size_in_sub_blocks.height(); y += transform_size_in_sub_blocks) {
             for (u32 x = 0; x < block_size_in_sub_blocks.width(); x += transform_size_in_sub_blocks) {
                 auto transform_x_in_px = base_x_in_pixels + sub_blocks_to_pixels(x);
                 auto transform_y_in_px = base_y_in_pixels + sub_blocks_to_pixels(y);
 
                 auto sub_block_had_non_zero_tokens = false;
                 if (transform_x_in_px < frame_right_in_pixels && transform_y_in_px < frame_bottom_in_pixels) {
                     if (!block_context.is_inter_predicted())
                         TRY(m_decoder.predict_intra(plane, block_context, transform_x_in_px, transform_y_in_px, has_block_left || x > 0, has_block_above || y > 0, (x + transform_size_in_sub_blocks) < block_size_in_sub_blocks.width(), transform_size, sub_block_index));
                     if (!block_context.should_skip_residuals) {
                         auto transform_set = select_transform_type(block_context, plane, transform_size, sub_block_index);
                         sub_block_had_non_zero_tokens = tokens(block_context, plane, x, y, transform_size, transform_set, token_cache);
                         block_had_non_zero_tokens = block_had_non_zero_tokens || sub_block_had_non_zero_tokens;
                         TRY(m_decoder.reconstruct(plane, block_context, transform_x_in_px, transform_y_in_px, transform_size, transform_set));
                     }
                 }
 
                 auto& above_sub_block_tokens = block_context.above_non_zero_tokens[plane];
                 auto transform_right_in_sub_blocks = min(x + transform_size_in_sub_blocks, above_sub_block_tokens.size());
                 for (size_t inside_x = x; inside_x < transform_right_in_sub_blocks; inside_x++)
                     above_sub_block_tokens[inside_x] = sub_block_had_non_zero_tokens;
 
                 auto& left_sub_block_context = block_context.left_non_zero_tokens[plane];
                 auto transform_bottom_in_sub_blocks = min(y + transform_size_in_sub_blocks, left_sub_block_context.size());
                 for (size_t inside_y = y; inside_y < transform_bottom_in_sub_blocks; inside_y++)
                     left_sub_block_context[inside_y] = sub_block_had_non_zero_tokens;
 
                 sub_block_index++;
             }
         }
     }
     return block_had_non_zero_tokens;
 }
