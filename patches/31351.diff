commit 42133a196a0bea83705b5947921d5c7e5b9f201d
Author: Andreas Kling <kling@serenityos.org>
Date:   Wed Feb 24 22:10:32 2021 +0100

    AK: Don't compare past '\0' in StringView::operator==(const char*)
    
    We kept scanning the needle string even after hitting a null terminator
    and that's clearly not right.
    
    Found by oss-fuzz:
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=31338
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=31351

diff --git a/AK/StringView.h b/AK/StringView.h
index 1237e147b6..0a5edf6904 100644
--- a/AK/StringView.h
+++ b/AK/StringView.h
@@ -39,160 +39,162 @@ class StringView {
 public:
     ALWAYS_INLINE constexpr StringView() = default;
     ALWAYS_INLINE constexpr StringView(const char* characters, size_t length)
         : m_characters(characters)
         , m_length(length)
     {
         VERIFY(!Checked<uintptr_t>::addition_would_overflow((uintptr_t)characters, length));
     }
     ALWAYS_INLINE StringView(const unsigned char* characters, size_t length)
         : m_characters((const char*)characters)
         , m_length(length)
     {
         VERIFY(!Checked<uintptr_t>::addition_would_overflow((uintptr_t)characters, length));
     }
     ALWAYS_INLINE constexpr StringView(const char* cstring)
         : m_characters(cstring)
         , m_length(cstring ? __builtin_strlen(cstring) : 0)
     {
     }
     ALWAYS_INLINE StringView(ReadonlyBytes bytes)
         : m_characters(reinterpret_cast<const char*>(bytes.data()))
         , m_length(bytes.size())
     {
     }
 
     StringView(const ByteBuffer&);
     StringView(const String&);
     StringView(const FlyString&);
 
     bool is_null() const { return !m_characters; }
     bool is_empty() const { return m_length == 0; }
 
     const char* characters_without_null_termination() const { return m_characters; }
     size_t length() const { return m_length; }
 
     ReadonlyBytes bytes() const { return { m_characters, m_length }; }
 
     const char& operator[](size_t index) const { return m_characters[index]; }
 
     using ConstIterator = SimpleIterator<const StringView, const char>;
 
     constexpr ConstIterator begin() const { return ConstIterator::begin(*this); }
     constexpr ConstIterator end() const { return ConstIterator::end(*this); }
 
     unsigned hash() const;
 
     bool starts_with(const StringView&, CaseSensitivity = CaseSensitivity::CaseSensitive) const;
     bool ends_with(const StringView&, CaseSensitivity = CaseSensitivity::CaseSensitive) const;
     bool starts_with(char) const;
     bool ends_with(char) const;
     bool matches(const StringView& mask, CaseSensitivity = CaseSensitivity::CaseInsensitive) const;
     bool matches(const StringView& mask, Vector<MaskSpan>&, CaseSensitivity = CaseSensitivity::CaseInsensitive) const;
     bool contains(char) const;
     bool contains(const StringView&, CaseSensitivity = CaseSensitivity::CaseSensitive) const;
     bool equals_ignoring_case(const StringView& other) const;
 
     StringView trim_whitespace(TrimMode mode = TrimMode::Both) const { return StringUtils::trim_whitespace(*this, mode); }
 
     Optional<size_t> find_first_of(char) const;
     Optional<size_t> find_first_of(const StringView&) const;
 
     Optional<size_t> find_last_of(char) const;
     Optional<size_t> find_last_of(const StringView&) const;
 
     Optional<size_t> find(const StringView&) const;
     Optional<size_t> find(char c) const;
 
     StringView substring_view(size_t start, size_t length) const;
     StringView substring_view(size_t start) const;
     Vector<StringView> split_view(char, bool keep_empty = false) const;
     Vector<StringView> split_view(const StringView&, bool keep_empty = false) const;
 
     // Create a Vector of StringViews split by line endings. As of CommonMark
     // 0.29, the spec defines a line ending as "a newline (U+000A), a carriage
     // return (U+000D) not followed by a newline, or a carriage return and a
     // following newline.".
     Vector<StringView> lines(bool consider_cr = true) const;
 
     template<typename T = int>
     Optional<T> to_int() const;
     template<typename T = unsigned>
     Optional<T> to_uint() const;
 
     // Create a new substring view of this string view, starting either at the beginning of
     // the given substring view, or after its end, and continuing until the end of this string
     // view (that is, for the remaining part of its length). For example,
     //
     //    StringView str { "foobar" };
     //    StringView substr = str.substring_view(1, 2);  // "oo"
     //    StringView substr_from = str.substring_view_starting_from_substring(subst);  // "oobar"
     //    StringView substr_after = str.substring_view_starting_after_substring(subst);  // "bar"
     //
     // Note that this only works if the string view passed as an argument is indeed a substring
     // view of this string view, such as one created by substring_view() and split_view(). It
     // does not work for arbitrary strings; for example declaring substr in the example above as
     //
     //     StringView substr { "oo" };
     //
     // would not work.
     StringView substring_view_starting_from_substring(const StringView& substring) const;
     StringView substring_view_starting_after_substring(const StringView& substring) const;
 
     bool operator==(const char* cstring) const
     {
         if (is_null())
             return !cstring;
         if (!cstring)
             return false;
         // NOTE: `m_characters` is not guaranteed to be null-terminated, but `cstring` is.
         const char* cp = cstring;
         for (size_t i = 0; i < m_length; ++i) {
+            if (!*cp)
+                return false;
             if (m_characters[i] != *(cp++))
                 return false;
         }
         return !*cp;
     }
 
     bool operator!=(const char* cstring) const
     {
         return !(*this == cstring);
     }
 
     bool operator==(const String&) const;
 
     bool operator==(const StringView& other) const
     {
         if (is_null())
             return other.is_null();
         if (other.is_null())
             return false;
         if (length() != other.length())
             return false;
         return !__builtin_memcmp(m_characters, other.m_characters, m_length);
     }
 
     bool operator!=(const StringView& other) const
     {
         return !(*this == other);
     }
 
     bool operator<(const StringView& other) const
     {
         if (int c = __builtin_memcmp(m_characters, other.m_characters, min(m_length, other.m_length)))
             return c < 0;
         return m_length < other.m_length;
     }
 
     const StringImpl* impl() const { return m_impl; }
 
     String to_string() const;
 
     bool is_whitespace() const { return StringUtils::is_whitespace(*this); }
 
     template<typename T, typename... Rest>
     bool is_one_of(const T& string, Rest... rest) const
     {
         if (*this == string)
             return true;
         return is_one_of(rest...);
     }
