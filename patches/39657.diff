commit 1def06002d0722f02e396ee83e900ee4a011ad4d
Author: Alan T. DeKok <aland@freeradius.org>
Date:   Wed Oct 6 17:01:02 2021 -0400

    pass length of data, not offset of label

diff --git a/src/protocols/dns/decode.c b/src/protocols/dns/decode.c
index fbc463d92e..768c8a5e37 100644
--- a/src/protocols/dns/decode.c
+++ b/src/protocols/dns/decode.c
@@ -334,72 +334,72 @@ static ssize_t decode_array(TALLOC_CTX *ctx, fr_dcursor_t *cursor, fr_dict_t con
 static ssize_t decode_dns_labels(TALLOC_CTX *ctx, fr_dcursor_t *cursor, fr_dict_t const *dict,
 				 fr_dict_attr_t const *parent,
 				 uint8_t const *data, size_t const data_len, void *decode_ctx)
 {
 	ssize_t slen;
 	size_t total, labels_len;
 	fr_pair_t *vp;
 	uint8_t const *next = data;
 	fr_dns_ctx_t *packet_ctx = decode_ctx;
 
 	FR_PROTO_HEX_DUMP(data, data_len, "decode_dns_labels");
 
 	/*
 	 *	This function handles both single-valued and array
 	 *	types.  It's just easier that way.
 	 */
 	if (!parent->flags.array) {
 		/*
 		 *	Decode starting at "NEXT", but allowing decodes from the start of the packet.
 		 */
-		slen = fr_dns_label_uncompressed_length(packet_ctx->packet, data, data + data_len - packet_ctx->packet, &next, packet_ctx->lb);
+		slen = fr_dns_label_uncompressed_length(packet_ctx->packet, data, data_len, &next, packet_ctx->lb);
 		if (slen <= 0) {
 			FR_PROTO_TRACE("length failed at %zd - %s", slen, fr_strerror());
 			goto raw;
 		}
 
 		labels_len = next - data; /* decode only what we've found */
 	} else {
 		/*
 		 *	Get the length of the entire set of labels, up
 		 *	to (and including) the final 0x00.
 		 *
 		 *	If any of the labels point outside of this
 		 *	area, OR they are otherwise invalid, then that's an error.
 		 */
-		slen = fr_dns_labels_network_verify(packet_ctx->packet, data, data + data_len - packet_ctx->packet, data, packet_ctx->lb);
+		slen = fr_dns_labels_network_verify(packet_ctx->packet, data, data_len, data, packet_ctx->lb);
 		if (slen < 0) {
 			FR_PROTO_TRACE("verify failed");
 		raw:
 			return decode_raw(ctx, cursor, dict, parent, data, data_len, decode_ctx);
 		}
 
 		labels_len = slen;
 	}
 
 	/*
 	 *	Loop over the input buffer, decoding the labels one by
 	 *	one.
 	 */
 	for (total = 0; total < labels_len; total += slen) {
 		vp = fr_pair_afrom_da(ctx, parent);
 		if (!vp) return PAIR_DECODE_OOM;
 
 		/*
 		 *	Having verified the input above, this next
 		 *	function should never fail unless there's a
 		 *	bug in the code.
 		 */
 		slen = fr_dns_label_to_value_box(vp, &vp->data, data, labels_len, data + total, true, packet_ctx->lb);
 		if (slen <= 0) {
 			FR_PROTO_TRACE("Failed decoding label at %zd", slen);
 			talloc_free(vp);
 			goto raw;
 		}
 
 		vp->type = VT_DATA;
 		fr_dcursor_append(cursor, vp);
 	}
 
 	FR_PROTO_TRACE("decode_dns_labels - %zu", labels_len);
 	return labels_len;
 }
