commit 3fa0cdada707c15d5035e75e10cf522cc2656e17
Author: Brian Salomon <bsalomon@google.com>
Date:   Mon Mar 8 09:31:34 2021 -0500

    SkPictureShader::asFragmentProcessor should recreate proxy for resource.
    
    findProxyByUniqueKey merely checks if a proxy exists for a key while
    findOrCreateProxyByUniqueKey checks if there is an existing texture
    whose proxy was deleted and recreates a new proxy for it.
    
    Change-Id: I352639d03769dbb9659819d52bc6927347b5a452
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/381222
    Auto-Submit: Brian Salomon <bsalomon@google.com>
    Commit-Queue: Mike Reed <reed@google.com>
    Reviewed-by: Mike Reed <reed@google.com>

diff --git a/src/shaders/SkPictureShader.cpp b/src/shaders/SkPictureShader.cpp
index 2908a1d1af..408738cb6a 100644
--- a/src/shaders/SkPictureShader.cpp
+++ b/src/shaders/SkPictureShader.cpp
@@ -407,66 +407,66 @@ void SkPictureShader::PictureShaderContext::shadeSpan(int x, int y, SkPMColor ds
 std::unique_ptr<GrFragmentProcessor> SkPictureShader::asFragmentProcessor(
         const GrFPArgs& args) const {
 
     auto ctx = args.fContext;
     auto lm = this->totalLocalMatrix(args.fPreLocalMatrix);
     SkColorType dstColorType = GrColorTypeToSkColorType(args.fDstColorInfo->colorType());
     if (dstColorType == kUnknown_SkColorType) {
         dstColorType = kRGBA_8888_SkColorType;
     }
 
     auto dstCS = ref_or_srgb(args.fDstColorInfo->colorSpace());
     auto info = CachedImageInfo::Make(fTile, args.fMatrixProvider.localToDevice(), &lm,
                                       dstColorType, dstCS.get(),
                                       ctx->priv().caps()->maxTextureSize());
     SkMatrix inv;
     if (!info.success || !(*lm).invert(&inv)) {
         return nullptr;
     }
 
     // Gotta be sure the GPU can support our requested colortype (might be FP16)
     if (!ctx->colorTypeSupportedAsSurface(info.imageInfo.colorType())) {
         info.imageInfo = info.imageInfo.makeColorType(kRGBA_8888_SkColorType);
     }
 
     static const GrUniqueKey::Domain kDomain = GrUniqueKey::GenerateDomain();
     GrUniqueKey key;
     GrUniqueKey::Builder builder(&key, kDomain, 10, "Picture Shader Image");
     builder[0] = dstCS->toXYZD50Hash();
     builder[1] = dstCS->transferFnHash();
     builder[2] = static_cast<uint32_t>(dstColorType);
     builder[3] = fPicture->uniqueID();
     memcpy(&builder[4], &fTile, sizeof(fTile));                     // 4,5,6,7
     memcpy(&builder[8], &info.tileScale, sizeof(info.tileScale));   // 8,9
     builder.finish();
 
     GrProxyProvider* provider = ctx->priv().proxyProvider();
     GrSurfaceProxyView view;
-    if (auto proxy = provider->findProxyByUniqueKey(key)) {
+    if (auto proxy = provider->findOrCreateProxyByUniqueKey(key)) {
         view = GrSurfaceProxyView(proxy, kTopLeft_GrSurfaceOrigin, GrSwizzle());
     } else {
         const int msaaSampleCount = 0;
         const SkSurfaceProps* props = nullptr;
         const bool createWithMips = false;
         auto image = info.makeImage(SkSurface::MakeRenderTarget(ctx,
                                                                 SkBudgeted::kYes,
                                                                 info.imageInfo,
                                                                 msaaSampleCount,
                                                                 kTopLeft_GrSurfaceOrigin,
                                                                 props,
                                                                 createWithMips),
                                     fPicture.get());
         if (!image) {
             return nullptr;
         }
         auto [v, ct] = as_IB(image)->asView(ctx, GrMipmapped::kNo);
         view = std::move(v);
         provider->assignUniqueKeyToProxy(key, view.asTextureProxy());
     }
 
     const GrSamplerState sampler(static_cast<GrSamplerState::WrapMode>(fTmx),
                                  static_cast<GrSamplerState::WrapMode>(fTmy),
                                  sampling_to_filter(args.fSampling));
     return GrTextureEffect::Make(std::move(view), kPremul_SkAlphaType, inv, sampler,
                                  *ctx->priv().caps());
 }
 #endif
