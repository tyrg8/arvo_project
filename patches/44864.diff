commit 98c445c0b98c8da183e9bfad32df3936a8d7fd35
Author: Alan Modra <amodra@gmail.com>
Date:   Thu Mar 17 17:55:48 2022 +1030

    asan: Buffer overflow in evax_bfd_print_dst
    
    With "name" a char*, the length at name[0] might be negative, escaping
    buffer limit checks.
    
            * vms-alpha.c (evax_bfd_print_dst): Make name an unsigned char*.
            (evax_bfd_print_emh): Likewise.

diff --git a/bfd/vms-alpha.c b/bfd/vms-alpha.c
index 06fa891ac70..4a92574c850 100644
--- a/bfd/vms-alpha.c
+++ b/bfd/vms-alpha.c
@@ -5918,98 +5918,98 @@ static void
 evax_bfd_print_emh (FILE *file, unsigned char *rec, unsigned int rec_len)
 {
   struct vms_emh_common *emh = (struct vms_emh_common *)rec;
   unsigned int subtype;
   int extra;
 
   subtype = (unsigned) bfd_getl16 (emh->subtyp);
 
   /* xgettext:c-format */
   fprintf (file, _("  EMH %u (len=%u): "), subtype, rec_len);
 
   /* PR 21618: Check for invalid lengths.  */
   if (rec_len < sizeof (* emh))
     {
       fprintf (file, _("   Error: The length is less than the length of an EMH record\n"));
       return;
     }
   extra = rec_len - sizeof (struct vms_emh_common);
 
   switch (subtype)
     {
     case EMH__C_MHD:
       {
 	struct vms_emh_mhd *mhd = (struct vms_emh_mhd *) rec;
-	const char * name;
-	const char * nextname;
-	const char * maxname;
+	unsigned char *name;
+	unsigned char *nextname;
+	unsigned char *maxname;
 
 	/* PR 21840: Check for invalid lengths.  */
 	if (rec_len < sizeof (* mhd))
 	  {
 	    fprintf (file, _("   Error: The record length is less than the size of an EMH_MHD record\n"));
 	    return;
 	  }
 	fprintf (file, _("Module header\n"));
 	fprintf (file, _("   structure level: %u\n"), mhd->strlvl);
 	fprintf (file, _("   max record size: %u\n"),
 		 (unsigned) bfd_getl32 (mhd->recsiz));
-	name = (char *)(mhd + 1);
-	maxname = (char *) rec + rec_len;
+	name = (unsigned char *) (mhd + 1);
+	maxname = (unsigned char *) rec + rec_len;
 	if (name > maxname - 2)
 	  {
 	    fprintf (file, _("   Error: The module name is missing\n"));
 	    return;
 	  }
 	nextname = name + name[0] + 1;
 	if (nextname >= maxname)
 	  {
 	    fprintf (file, _("   Error: The module name is too long\n"));
 	    return;
 	  }
 	fprintf (file, _("   module name    : %.*s\n"), name[0], name + 1);
 	name = nextname;
 	if (name > maxname - 2)
 	  {
 	    fprintf (file, _("   Error: The module version is missing\n"));
 	    return;
 	  }
 	nextname = name + name[0] + 1;
 	if (nextname >= maxname)
 	  {
 	    fprintf (file, _("   Error: The module version is too long\n"));
 	    return;
 	  }
 	fprintf (file, _("   module version : %.*s\n"), name[0], name + 1);
 	name = nextname;
 	if ((maxname - name) < 17 && maxname[-1] != 0)
 	  fprintf (file, _("   Error: The compile date is truncated\n"));
 	else
 	  fprintf (file, _("   compile date   : %.17s\n"), name);
       }
       break;
 
     case EMH__C_LNM:
       fprintf (file, _("Language Processor Name\n"));
       fprintf (file, _("   language name: %.*s\n"), extra, (char *)(emh + 1));
       break;
 
     case EMH__C_SRC:
       fprintf (file, _("Source Files Header\n"));
       fprintf (file, _("   file: %.*s\n"), extra, (char *)(emh + 1));
       break;
 
     case EMH__C_TTL:
       fprintf (file, _("Title Text Header\n"));
       fprintf (file, _("   title: %.*s\n"), extra, (char *)(emh + 1));
       break;
 
     case EMH__C_CPR:
       fprintf (file, _("Copyright Header\n"));
       fprintf (file, _("   copyright: %.*s\n"), extra, (char *)(emh + 1));
       break;
 
     default:
       fprintf (file, _("unhandled emh subtype %u\n"), subtype);
       break;
     }
 }
@@ -7306,554 +7306,554 @@ static void
 evax_bfd_print_dst (struct bfd *abfd, unsigned int dst_size, FILE *file)
 {
   unsigned int off = 0;
   unsigned int pc = 0;
   unsigned int line = 0;
 
   fprintf (file, _("Debug symbol table:\n"));
 
   while (dst_size > 0)
     {
       struct vms_dst_header dsth;
       unsigned int len;
       unsigned int type;
       unsigned char *buf;
 
       if (bfd_bread (&dsth, sizeof (dsth), abfd) != sizeof (dsth))
 	{
 	  fprintf (file, _("cannot read DST header\n"));
 	  return;
 	}
       len = bfd_getl16 (dsth.length);
       type = bfd_getl16 (dsth.type);
       /* xgettext:c-format */
       fprintf (file, _(" type: %3u, len: %3u (at 0x%08x): "),
 	       type, len, off);
       if (len < sizeof (dsth))
 	{
 	  fputc ('\n', file);
 	  break;
 	}
       dst_size -= len;
       off += len;
       len -= sizeof (dsth);
       if (len == 0)
 	buf = NULL;
       else
 	{
 	  buf = _bfd_malloc_and_read (abfd, len, len);
 	  if (buf == NULL)
 	    {
 	      fprintf (file, _("cannot read DST symbol\n"));
 	      return;
 	    }
 	}
       switch (type)
 	{
 	case DSC__K_DTYPE_V:
 	case DSC__K_DTYPE_BU:
 	case DSC__K_DTYPE_WU:
 	case DSC__K_DTYPE_LU:
 	case DSC__K_DTYPE_QU:
 	case DSC__K_DTYPE_B:
 	case DSC__K_DTYPE_W:
 	case DSC__K_DTYPE_L:
 	case DSC__K_DTYPE_Q:
 	case DSC__K_DTYPE_F:
 	case DSC__K_DTYPE_D:
 	case DSC__K_DTYPE_FC:
 	case DSC__K_DTYPE_DC:
 	case DSC__K_DTYPE_T:
 	case DSC__K_DTYPE_NU:
 	case DSC__K_DTYPE_NL:
 	case DSC__K_DTYPE_NLO:
 	case DSC__K_DTYPE_NR:
 	case DSC__K_DTYPE_NRO:
 	case DSC__K_DTYPE_NZ:
 	case DSC__K_DTYPE_P:
 	case DSC__K_DTYPE_ZI:
 	case DSC__K_DTYPE_ZEM:
 	case DSC__K_DTYPE_DSC:
 	case DSC__K_DTYPE_OU:
 	case DSC__K_DTYPE_O:
 	case DSC__K_DTYPE_G:
 	case DSC__K_DTYPE_H:
 	case DSC__K_DTYPE_GC:
 	case DSC__K_DTYPE_HC:
 	case DSC__K_DTYPE_CIT:
 	case DSC__K_DTYPE_BPV:
 	case DSC__K_DTYPE_BLV:
 	case DSC__K_DTYPE_VU:
 	case DSC__K_DTYPE_ADT:
 	case DSC__K_DTYPE_VT:
 	case DSC__K_DTYPE_T2:
 	case DSC__K_DTYPE_VT2:
 	  fprintf (file, _("standard data: %s\n"),
 		   evax_bfd_get_dsc_name (type));
 	  evax_bfd_print_valspec (buf, len, 4, file);
 	  if (len > 6)
 	    fprintf (file, _("    name: %.*s\n"),
 		     buf[5] > len - 6 ? len - 6 : buf[5], buf + 6);
 	  break;
 	case DST__K_MODBEG:
 	  {
 	    struct vms_dst_modbeg *dst = (void *)buf;
-	    const char *name = (const char *)buf + sizeof (*dst);
+	    unsigned char *name = buf + sizeof (*dst);
 
 	    fprintf (file, _("modbeg\n"));
 	    if (len < sizeof (*dst))
 	      break;
 	    /* xgettext:c-format */
 	    fprintf (file, _("   flags: %d, language: %u, "
 			     "major: %u, minor: %u\n"),
 		     dst->flags,
 		     (unsigned)bfd_getl32 (dst->language),
 		     (unsigned)bfd_getl16 (dst->major),
 		     (unsigned)bfd_getl16 (dst->minor));
 	    len -= sizeof (*dst);
 	    if (len > 0)
 	      {
 		int nlen = len - 1;
 		fprintf (file, _("   module name: %.*s\n"),
 			 name[0] > nlen ? nlen : name[0], name + 1);
 		if (name[0] < nlen)
 		  {
 		    len -= name[0] + 1;
 		    name += name[0] + 1;
 		    nlen = len - 1;
 		    fprintf (file, _("   compiler   : %.*s\n"),
-			     name[0] > nlen ? nlen: name[0], name + 1);
+			     name[0] > nlen ? nlen : name[0], name + 1);
 		  }
 	      }
 	  }
 	  break;
 	case DST__K_MODEND:
 	  fprintf (file, _("modend\n"));
 	  break;
 	case DST__K_RTNBEG:
 	  {
 	    struct vms_dst_rtnbeg *dst = (void *)buf;
-	    const char *name = (const char *)buf + sizeof (*dst);
+	    unsigned char *name = buf + sizeof (*dst);
 
 	    fputs (_("rtnbeg\n"), file);
 	    if (len >= sizeof (*dst))
 	      {
 		/* xgettext:c-format */
 		fprintf (file, _("    flags: %u, address: 0x%08x, "
 				 "pd-address: 0x%08x\n"),
 			 dst->flags,
 			 (unsigned) bfd_getl32 (dst->address),
 			 (unsigned) bfd_getl32 (dst->pd_address));
 		len -= sizeof (*dst);
 		if (len > 0)
 		  {
 		    int nlen = len - 1;
 		    fprintf (file, _("    routine name: %.*s\n"),
 			     name[0] > nlen ? nlen : name[0], name + 1);
 		  }
 	      }
 	  }
 	  break;
 	case DST__K_RTNEND:
 	  {
 	    struct vms_dst_rtnend *dst = (void *)buf;
 
 	    if (len >= sizeof (*dst))
 	      fprintf (file, _("rtnend: size 0x%08x\n"),
 		       (unsigned) bfd_getl32 (dst->size));
 	  }
 	  break;
 	case DST__K_PROLOG:
 	  {
 	    struct vms_dst_prolog *dst = (void *)buf;
 
 	    if (len >= sizeof (*dst))
 	      /* xgettext:c-format */
 	      fprintf (file, _("prolog: bkpt address 0x%08x\n"),
 		       (unsigned) bfd_getl32 (dst->bkpt_addr));
 	  }
 	  break;
 	case DST__K_EPILOG:
 	  {
 	    struct vms_dst_epilog *dst = (void *)buf;
 
 	    if (len >= sizeof (*dst))
 	      /* xgettext:c-format */
 	      fprintf (file, _("epilog: flags: %u, count: %u\n"),
 		       dst->flags, (unsigned) bfd_getl32 (dst->count));
 	  }
 	  break;
 	case DST__K_BLKBEG:
 	  {
 	    struct vms_dst_blkbeg *dst = (void *)buf;
-	    const char *name = (const char *)buf + sizeof (*dst);
+	    unsigned char *name = buf + sizeof (*dst);
 
 	    if (len > sizeof (*dst))
 	      {
 		int nlen;
 		len -= sizeof (*dst);
 		nlen = len - 1;
 		/* xgettext:c-format */
 		fprintf (file, _("blkbeg: address: 0x%08x, name: %.*s\n"),
 			 (unsigned) bfd_getl32 (dst->address),
 			 name[0] > nlen ? nlen : name[0], name + 1);
 	      }
 	  }
 	  break;
 	case DST__K_BLKEND:
 	  {
 	    struct vms_dst_blkend *dst = (void *)buf;
 
 	    if (len >= sizeof (*dst))
 	      /* xgettext:c-format */
 	      fprintf (file, _("blkend: size: 0x%08x\n"),
 		       (unsigned) bfd_getl32 (dst->size));
 	  }
 	  break;
 	case DST__K_TYPSPEC:
 	  {
 	    fprintf (file, _("typspec (len: %u)\n"), len);
 	    if (len >= 1)
 	      {
 		int nlen = len - 1;
 		fprintf (file, _("    name: %.*s\n"),
 			 buf[0] > nlen ? nlen : buf[0], buf + 1);
 		if (nlen > buf[0])
 		  evax_bfd_print_typspec (buf + 1 + buf[0], len - (1 + buf[0]),
 					  5, file);
 	      }
 	  }
 	  break;
 	case DST__K_SEPTYP:
 	  {
 	    if (len >= 6)
 	      {
 		fprintf (file, _("septyp, name: %.*s\n"),
 			 buf[5] > len - 6 ? len - 6 : buf[5], buf + 6);
 		evax_bfd_print_valspec (buf, len, 4, file);
 	      }
 	  }
 	  break;
 	case DST__K_RECBEG:
 	  {
 	    struct vms_dst_recbeg *recbeg = (void *)buf;
-	    const char *name = (const char *)buf + sizeof (*recbeg);
+	    unsigned char *name = buf + sizeof (*recbeg);
 
 	    if (len > sizeof (*recbeg))
 	      {
 		int nlen = len - sizeof (*recbeg) - 1;
 		if (name[0] < nlen)
 		  nlen = name[0];
 		fprintf (file, _("recbeg: name: %.*s\n"), nlen, name + 1);
 		evax_bfd_print_valspec (buf, len, 4, file);
 		len -= 1 + nlen;
 		if (len >= 4)
 		  fprintf (file, _("    len: %u bits\n"),
 			   (unsigned) bfd_getl32 (name + 1 + nlen));
 	      }
 	  }
 	  break;
 	case DST__K_RECEND:
 	  fprintf (file, _("recend\n"));
 	  break;
 	case DST__K_ENUMBEG:
 	  if (len >= 2)
 	    /* xgettext:c-format */
 	    fprintf (file, _("enumbeg, len: %u, name: %.*s\n"),
 		     buf[0], buf[1] > len - 2 ? len - 2 : buf[1], buf + 2);
 	  break;
 	case DST__K_ENUMELT:
 	  if (len >= 6)
 	    {
 	      fprintf (file, _("enumelt, name: %.*s\n"),
 		       buf[5] > len - 6 ? len - 6 : buf[5], buf + 6);
 	      evax_bfd_print_valspec (buf, len, 4, file);
 	    }
 	  break;
 	case DST__K_ENUMEND:
 	  fprintf (file, _("enumend\n"));
 	  break;
 	case DST__K_LABEL:
 	  {
 	    struct vms_dst_label *lab = (void *)buf;
 	    if (len >= sizeof (*lab))
 	      {
 		fprintf (file, _("label, name: %.*s\n"),
 			 lab->name[0] > len - 1 ? len - 1 : lab->name[0],
 			 lab->name + 1);
 		fprintf (file, _("    address: 0x%08x\n"),
 			 (unsigned) bfd_getl32 (lab->value));
 	      }
 	  }
 	  break;
 	case DST__K_DIS_RANGE:
 	  if (len >= 4)
 	    {
 	      unsigned int cnt = bfd_getl32 (buf);
 	      unsigned char *rng = buf + 4;
 	      unsigned int i;
 
 	      fprintf (file, _("discontiguous range (nbr: %u)\n"), cnt);
 	      len -= 4;
 	      for (i = 0; i < cnt; i++, rng += 8)
 		{
 		  if (len < 8)
 		    break;
 		  /* xgettext:c-format */
 		  fprintf (file, _("    address: 0x%08x, size: %u\n"),
 			   (unsigned) bfd_getl32 (rng),
 			   (unsigned) bfd_getl32 (rng + 4));
 		  len -= 8;
 		}
 	    }
 	  break;
 	case DST__K_LINE_NUM:
 	  {
 	    unsigned char *buf_orig = buf;
 
 	    fprintf (file, _("line num  (len: %u)\n"), len);
 
 	    while (len > 0)
 	      {
 		int cmd;
 		unsigned int val;
 		int cmdlen = -1;
 
 		cmd = *buf++;
 		len--;
 
 		fputs ("    ", file);
 
 		switch (cmd)
 		  {
 		  case DST__K_DELTA_PC_W:
 		    if (len < 2)
 		      break;
 		    val = bfd_getl16 (buf);
 		    fprintf (file, _("delta_pc_w %u\n"), val);
 		    pc += val;
 		    line++;
 		    cmdlen = 2;
 		    break;
 		  case DST__K_INCR_LINUM:
 		    if (len < 1)
 		      break;
 		    val = *buf;
 		    fprintf (file, _("incr_linum(b): +%u\n"), val);
 		    line += val;
 		    cmdlen = 1;
 		    break;
 		  case DST__K_INCR_LINUM_W:
 		    if (len < 2)
 		      break;
 		    val = bfd_getl16 (buf);
 		    fprintf (file, _("incr_linum_w: +%u\n"), val);
 		    line += val;
 		    cmdlen = 2;
 		    break;
 		  case DST__K_INCR_LINUM_L:
 		    if (len < 4)
 		      break;
 		    val = bfd_getl32 (buf);
 		    fprintf (file, _("incr_linum_l: +%u\n"), val);
 		    line += val;
 		    cmdlen = 4;
 		    break;
 		  case DST__K_SET_LINUM:
 		    if (len < 2)
 		      break;
 		    line = bfd_getl16 (buf);
 		    fprintf (file, _("set_line_num(w) %u\n"), line);
 		    cmdlen = 2;
 		    break;
 		  case DST__K_SET_LINUM_B:
 		    if (len < 1)
 		      break;
 		    line = *buf;
 		    fprintf (file, _("set_line_num_b %u\n"), line);
 		    cmdlen = 1;
 		    break;
 		  case DST__K_SET_LINUM_L:
 		    if (len < 4)
 		      break;
 		    line = bfd_getl32 (buf);
 		    fprintf (file, _("set_line_num_l %u\n"), line);
 		    cmdlen = 4;
 		    break;
 		  case DST__K_SET_ABS_PC:
 		    if (len < 4)
 		      break;
 		    pc = bfd_getl32 (buf);
 		    fprintf (file, _("set_abs_pc: 0x%08x\n"), pc);
 		    cmdlen = 4;
 		    break;
 		  case DST__K_DELTA_PC_L:
 		    if (len < 4)
 		      break;
 		    fprintf (file, _("delta_pc_l: +0x%08x\n"),
 			     (unsigned) bfd_getl32 (buf));
 		    cmdlen = 4;
 		    break;
 		  case DST__K_TERM:
 		    if (len < 1)
 		      break;
 		    fprintf (file, _("term(b): 0x%02x"), *buf);
 		    pc += *buf;
 		    fprintf (file, _("        pc: 0x%08x\n"), pc);
 		    cmdlen = 1;
 		    break;
 		  case DST__K_TERM_W:
 		    if (len < 2)
 		      break;
 		    val = bfd_getl16 (buf);
 		    fprintf (file, _("term_w: 0x%04x"), val);
 		    pc += val;
 		    fprintf (file, _("    pc: 0x%08x\n"), pc);
 		    cmdlen = 2;
 		    break;
 		  default:
 		    if (cmd <= 0)
 		      {
 			fprintf (file, _("delta pc +%-4d"), -cmd);
 			line++;  /* FIXME: curr increment.  */
 			pc += -cmd;
 			/* xgettext:c-format */
 			fprintf (file, _("    pc: 0x%08x line: %5u\n"),
 				 pc, line);
 			cmdlen = 0;
 		      }
 		    else
 		      fprintf (file, _("    *unhandled* cmd %u\n"), cmd);
 		    break;
 		  }
 		if (cmdlen < 0)
 		  break;
 		len -= cmdlen;
 		buf += cmdlen;
 	      }
 	    buf = buf_orig;
 	  }
 	  break;
 	case DST__K_SOURCE:
 	  {
 	    unsigned char *buf_orig = buf;
 
 	    fprintf (file, _("source (len: %u)\n"), len);
 
 	    while (len > 0)
 	      {
 		int cmd = *buf++;
 		int cmdlen = -1;
 
 		len--;
 		switch (cmd)
 		  {
 		  case DST__K_SRC_DECLFILE:
 		    {
 		      struct vms_dst_src_decl_src *src = (void *) buf;
-		      const char *name;
+		      unsigned char *name;
 		      int nlen;
 
 		      if (len < sizeof (*src))
 			break;
 		      /* xgettext:c-format */
 		      fprintf (file, _("   declfile: len: %u, flags: %u, "
 				       "fileid: %u\n"),
 			       src->length, src->flags,
 			       (unsigned)bfd_getl16 (src->fileid));
 		      /* xgettext:c-format */
 		      fprintf (file, _("   rms: cdt: 0x%08x %08x, "
 				       "ebk: 0x%08x, ffb: 0x%04x, "
 				       "rfo: %u\n"),
 			       (unsigned)bfd_getl32 (src->rms_cdt + 4),
 			       (unsigned)bfd_getl32 (src->rms_cdt + 0),
 			       (unsigned)bfd_getl32 (src->rms_ebk),
 			       (unsigned)bfd_getl16 (src->rms_ffb),
 			       src->rms_rfo);
 		      if (src->length > len || src->length <= sizeof (*src))
 			break;
 		      nlen = src->length - sizeof (*src) - 1;
-		      name = (const char *) buf + sizeof (*src);
+		      name = buf + sizeof (*src);
 		      fprintf (file, _("   filename   : %.*s\n"),
 			       name[0] > nlen ? nlen : name[0], name + 1);
 		      if (name[0] >= nlen)
 			break;
 		      nlen -= name[0] + 1;
 		      name += name[0] + 1;
 		      fprintf (file, _("   module name: %.*s\n"),
 			       name[0] > nlen ? nlen : name[0], name + 1);
 		      if (name[0] > nlen)
 			break;
 		      cmdlen = src->length;
 		    }
 		    break;
 		  case DST__K_SRC_SETFILE:
 		    if (len < 2)
 		      break;
 		    fprintf (file, _("   setfile %u\n"),
 			     (unsigned) bfd_getl16 (buf));
 		    cmdlen = 2;
 		    break;
 		  case DST__K_SRC_SETREC_W:
 		    if (len < 2)
 		      break;
 		    fprintf (file, _("   setrec %u\n"),
 			     (unsigned) bfd_getl16 (buf));
 		    cmdlen = 2;
 		    break;
 		  case DST__K_SRC_SETREC_L:
 		    if (len < 4)
 		      break;
 		    fprintf (file, _("   setrec %u\n"),
 			     (unsigned) bfd_getl32 (buf));
 		    cmdlen = 4;
 		    break;
 		  case DST__K_SRC_SETLNUM_W:
 		    if (len < 2)
 		      break;
 		    fprintf (file, _("   setlnum %u\n"),
 			     (unsigned) bfd_getl16 (buf));
 		    cmdlen = 2;
 		    break;
 		  case DST__K_SRC_SETLNUM_L:
 		    if (len < 4)
 		      break;
 		    fprintf (file, _("   setlnum %u\n"),
 			     (unsigned) bfd_getl32 (buf));
 		    cmdlen = 4;
 		    break;
 		  case DST__K_SRC_DEFLINES_W:
 		    if (len < 2)
 		      break;
 		    fprintf (file, _("   deflines %u\n"),
 			     (unsigned) bfd_getl16 (buf));
 		    cmdlen = 2;
 		    break;
 		  case DST__K_SRC_DEFLINES_B:
 		    if (len < 1)
 		      break;
 		    fprintf (file, _("   deflines %u\n"), *buf);
 		    cmdlen = 1;
 		    break;
 		  case DST__K_SRC_FORMFEED:
 		    fprintf (file, _("   formfeed\n"));
 		    cmdlen = 0;
 		    break;
 		  default:
 		    fprintf (file, _("   *unhandled* cmd %u\n"), cmd);
 		    break;
 		  }
 		if (cmdlen < 0)
 		  break;
 		len -= cmdlen;
 		buf += cmdlen;
 	      }
 	    buf = buf_orig;
 	  }
 	  break;
 	default:
 	  fprintf (file, _("*unhandled* dst type %u\n"), type);
 	  break;
 	}
       free (buf);
     }
 }
