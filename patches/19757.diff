commit bbbe3bda1856d98153b7a533a691ec43e58d9c4d
Author: Alex Hultman <alexhultman@gmail.com>
Date:   Wed Jan 1 18:15:56 2020 +0100

    Be strict about maxPayloadLength in inflate

diff --git a/fuzzing/PerMessageDeflate.cpp b/fuzzing/PerMessageDeflate.cpp
index 1867994..f16796e 100644
--- a/fuzzing/PerMessageDeflate.cpp
+++ b/fuzzing/PerMessageDeflate.cpp
@@ -20,19 +20,19 @@ struct StaticData {
 extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
 
     /* Why is this padded? */
     makeChunked(makePadded(data, size), size, [](const uint8_t *data, size_t size) {
         std::string_view inflation = staticData.inflationStream.inflate(&staticData.zlibContext, std::string_view((char *) data, size), 256);
         if (inflation.length() > 256) {
             /* Cause ASAN to freak out */
-            //delete (int *) (void *) 1;
+            delete (int *) (void *) 1;
         }
     });
 
     makeChunked(makePadded(data, size), size, [](const uint8_t *data, size_t size) {
         /* Always reset */
         staticData.deflationStream.deflate(&staticData.zlibContext, std::string_view((char *) data, size), true);
     });
 
     return 0;
 }
 
diff --git a/src/PerMessageDeflate.h b/src/PerMessageDeflate.h
index 4a631ab..e0ed2fb 100644
--- a/src/PerMessageDeflate.h
+++ b/src/PerMessageDeflate.h
@@ -122,55 +122,66 @@ struct DeflationStream {
 struct InflationStream {
     z_stream inflationStream = {};
 
     InflationStream() {
         inflateInit2(&inflationStream, -15);
     }
 
     ~InflationStream() {
         inflateEnd(&inflationStream);
     }
 
     std::string_view inflate(ZlibContext *zlibContext, std::string_view compressed, size_t maxPayloadLength) {
 
         /* We clear this one here, could be done better */
         zlibContext->dynamicInflationBuffer.clear();
 
         inflationStream.next_in = (Bytef *) compressed.data();
         inflationStream.avail_in = (unsigned int) compressed.length();
 
         int err;
         do {
             inflationStream.next_out = (Bytef *) zlibContext->inflationBuffer;
             inflationStream.avail_out = LARGE_BUFFER_SIZE;
 
             err = ::inflate(&inflationStream, Z_SYNC_FLUSH);
             if (err == Z_OK && inflationStream.avail_out) {
                 break;
             }
 
             zlibContext->dynamicInflationBuffer.append(zlibContext->inflationBuffer, LARGE_BUFFER_SIZE - inflationStream.avail_out);
 
 
         } while (inflationStream.avail_out == 0 && zlibContext->dynamicInflationBuffer.length() <= maxPayloadLength);
 
         inflateReset(&inflationStream);
 
         if ((err != Z_BUF_ERROR && err != Z_OK) || zlibContext->dynamicInflationBuffer.length() > maxPayloadLength) {
             return {nullptr, 0};
         }
 
         if (zlibContext->dynamicInflationBuffer.length()) {
             zlibContext->dynamicInflationBuffer.append(zlibContext->inflationBuffer, LARGE_BUFFER_SIZE - inflationStream.avail_out);
+
+            /* Let's be strict about the max size */
+            if (zlibContext->dynamicInflationBuffer.length() > maxPayloadLength) {
+                return {nullptr, 0};
+            }
+
             return {zlibContext->dynamicInflationBuffer.data(), zlibContext->dynamicInflationBuffer.length()};
         }
 
+        /* Let's be strict about the max size */
+        if ((LARGE_BUFFER_SIZE - inflationStream.avail_out) > maxPayloadLength) {
+            return {nullptr, 0};
+        }
+
         return {zlibContext->inflationBuffer, LARGE_BUFFER_SIZE - inflationStream.avail_out};
     }
 
 };
 
 #endif
 
 }
 
 #endif // UWS_PERMESSAGEDEFLATE_H
