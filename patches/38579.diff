commit a9c0965ebe15c1f8a79709bd0214cd7ea887fb7b
Author: Alex Rebert <alexandre.rebert@gmail.com>
Date:   Mon Jan 3 23:52:46 2022 -0500

    ucl_object_copy_internal: use memcpy instead of strdup
    
    Keys may have null bytes, when they are decoded from json in
    ucl_unescape_json_string and contain \u0000. Not copying the full key
    resulted in out-of-bounds reads. The copy now relies on memcpy and
    keylen instead of strdup.
    
    Fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=38579
    Fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=38675

diff --git a/src/ucl_util.c b/src/ucl_util.c
index a0fdcc9..30385fe 100644
--- a/src/ucl_util.c
+++ b/src/ucl_util.c
@@ -3575,65 +3575,66 @@ static ucl_object_t *
 ucl_object_copy_internal (const ucl_object_t *other, bool allow_array)
 {
 
 	ucl_object_t *new;
 	ucl_object_iter_t it = NULL;
 	const ucl_object_t *cur;
 
 	new = malloc (sizeof (*new));
 
 	if (new != NULL) {
 		memcpy (new, other, sizeof (*new));
 		if (other->flags & UCL_OBJECT_EPHEMERAL) {
 			/* Copied object is always non ephemeral */
 			new->flags &= ~UCL_OBJECT_EPHEMERAL;
 		}
 		new->ref = 1;
 		/* Unlink from others */
 		new->next = NULL;
 		new->prev = new;
 
 		/* deep copy of values stored */
 		if (other->trash_stack[UCL_TRASH_KEY] != NULL) {
-			new->trash_stack[UCL_TRASH_KEY] =
-					strdup (other->trash_stack[UCL_TRASH_KEY]);
+			new->trash_stack[UCL_TRASH_KEY] = NULL;
 			if (other->key == (const char *)other->trash_stack[UCL_TRASH_KEY]) {
+				new->trash_stack[UCL_TRASH_KEY] = malloc(other->keylen);
+				memcpy(new->trash_stack[UCL_TRASH_KEY], other->trash_stack[UCL_TRASH_KEY], other->keylen);
 				new->key = new->trash_stack[UCL_TRASH_KEY];
 			}
 		}
 		if (other->trash_stack[UCL_TRASH_VALUE] != NULL) {
 			new->trash_stack[UCL_TRASH_VALUE] =
 					strdup (other->trash_stack[UCL_TRASH_VALUE]);
 			if (new->type == UCL_STRING) {
 				new->value.sv = new->trash_stack[UCL_TRASH_VALUE];
 			}
 		}
 
 		if (other->type == UCL_ARRAY || other->type == UCL_OBJECT) {
 			/* reset old value */
 			memset (&new->value, 0, sizeof (new->value));
 
 			while ((cur = ucl_object_iterate (other, &it, true)) != NULL) {
 				if (other->type == UCL_ARRAY) {
 					ucl_array_append (new, ucl_object_copy_internal (cur, false));
 				}
 				else {
 					ucl_object_t *cp = ucl_object_copy_internal (cur, true);
 					if (cp != NULL) {
 						ucl_object_insert_key (new, cp, cp->key, cp->keylen,
 								false);
 					}
 				}
 			}
 		}
 		else if (allow_array && other->next != NULL) {
 			LL_FOREACH (other->next, cur) {
 				ucl_object_t *cp = ucl_object_copy_internal (cur, false);
 				if (cp != NULL) {
 					DL_APPEND (new, cp);
 				}
 			}
 		}
 	}
 
 	return new;
 }
