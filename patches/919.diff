commit 925efed69ee3faa4e92612ac97628886442a9ce9
Author: Khaled Hosny <khaledhosny@eglug.org>
Date:   Mon Mar 20 22:11:28 2017 +0200

    [fuzz] Heap-use-after-free in ots::OTSStream::Write
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=919

diff --git a/src/ots.cc b/src/ots.cc
index 8a860ce..54c9d71 100644
--- a/src/ots.cc
+++ b/src/ots.cc
@@ -47,24 +47,7 @@
 #include "vmtx.h"
 #include "vorg.h"
 
-namespace {
-
-// Generate a message with or without a table tag, when 'header' is the FontFile pointer
-#define OTS_FAILURE_MSG_TAG(msg_,tag_) OTS_FAILURE_MSG_TAG_(header, msg_, tag_)
-#define OTS_FAILURE_MSG_HDR(msg_)      OTS_FAILURE_MSG_(header, msg_)
-#define OTS_WARNING_MSG_HDR(msg_)      OTS_WARNING_MSG_(header, msg_)
-
-
-bool CheckTag(uint32_t tag_value) {
-  for (unsigned i = 0; i < 4; ++i) {
-    const uint32_t check = tag_value & 0xff;
-    if (check < 32 || check > 126) {
-      return false;  // non-ASCII character found.
-    }
-    tag_value >>= 8;
-  }
-  return true;
-}
+namespace ots {
 
 struct Arena {
  public:
@@ -85,6 +68,27 @@ struct Arena {
   std::vector<uint8_t*> hunks_;
 };
 
+}; // namespace ots
+
+namespace {
+
+// Generate a message with or without a table tag, when 'header' is the FontFile pointer
+#define OTS_FAILURE_MSG_TAG(msg_,tag_) OTS_FAILURE_MSG_TAG_(header, msg_, tag_)
+#define OTS_FAILURE_MSG_HDR(msg_)      OTS_FAILURE_MSG_(header, msg_)
+#define OTS_WARNING_MSG_HDR(msg_)      OTS_WARNING_MSG_(header, msg_)
+
+
+bool CheckTag(uint32_t tag_value) {
+  for (unsigned i = 0; i < 4; ++i) {
+    const uint32_t check = tag_value & 0xff;
+    if (check < 32 || check > 126) {
+      return false;  // non-ASCII character found.
+    }
+    tag_value >>= 8;
+  }
+  return true;
+}
+
 const struct {
   uint32_t tag;
   bool required;
@@ -505,24 +509,24 @@ ots::TableAction GetTableAction(const ots::FontFile *header, uint32_t tag) {
 
 bool GetTableData(const uint8_t *data,
                   const ots::TableEntry& table,
-                  Arena *arena,
+                  ots::Arena &arena,
                   size_t *table_length,
                   const uint8_t **table_data) {
   if (table.uncompressed_length != table.length) {
     // Compressed table. Need to uncompress into memory first.
     *table_length = table.uncompressed_length;
-    *table_data = (*arena).Allocate(*table_length);
+    *table_data = arena.Allocate(*table_length);
     uLongf dest_len = *table_length;
     int r = uncompress((Bytef*) *table_data, &dest_len,
                        data + table.offset, table.length);
     if (r != Z_OK || dest_len != *table_length) {
       return false;
     }
   } else {
     // Uncompressed table. We can process directly from memory.
     *table_data = data + table.offset;
     *table_length = table.length;
   }
 
   return true;
 }
@@ -530,273 +534,274 @@ bool GetTableData(const uint8_t *data,
 bool ProcessGeneric(ots::FontFile *header,
                     ots::Font *font,
                     uint32_t signature,
                     ots::OTSStream *output,
                     const uint8_t *data, size_t length,
                     const std::vector<ots::TableEntry>& tables,
                     ots::Buffer& file) {
   const size_t data_offset = file.offset();
 
   uint32_t uncompressed_sum = 0;
 
   for (unsigned i = 0; i < font->num_tables; ++i) {
     // the tables must be sorted by tag (when taken as big-endian numbers).
     // This also remove the possibility of duplicate tables.
     if (i) {
       const uint32_t this_tag = tables[i].tag;
       const uint32_t prev_tag = tables[i - 1].tag;
       if (this_tag <= prev_tag) {
         OTS_WARNING_MSG_HDR("Table directory is not correctly ordered");
       }
     }
 
     // all tag names must be built from printable ASCII characters
     if (!CheckTag(tables[i].tag)) {
       return OTS_FAILURE_MSG_TAG("invalid table tag", tables[i].tag);
     }
 
     // tables must be 4-byte aligned
     if (tables[i].offset & 3) {
       return OTS_FAILURE_MSG_TAG("misaligned table", tables[i].tag);
     }
 
     // and must be within the file
     if (tables[i].offset < data_offset || tables[i].offset >= length) {
       return OTS_FAILURE_MSG_TAG("invalid table offset", tables[i].tag);
     }
     // disallow all tables with a zero length
     if (tables[i].length < 1) {
       // Note: malayalam.ttf has zero length CVT table...
       return OTS_FAILURE_MSG_TAG("zero-length table", tables[i].tag);
     }
     // disallow all tables with a length > 1GB
     if (tables[i].length > 1024 * 1024 * 1024) {
       return OTS_FAILURE_MSG_TAG("table length exceeds 1GB", tables[i].tag);
     }
     // disallow tables where the uncompressed size is < the compressed size.
     if (tables[i].uncompressed_length < tables[i].length) {
       return OTS_FAILURE_MSG_TAG("invalid compressed table", tables[i].tag);
     }
     if (tables[i].uncompressed_length > tables[i].length) {
       // We'll probably be decompressing this table.
 
       // disallow all tables which uncompress to > 30 MB
       if (tables[i].uncompressed_length > 30 * 1024 * 1024) {
         return OTS_FAILURE_MSG_TAG("uncompressed length exceeds 30MB", tables[i].tag);
       }
       if (uncompressed_sum + tables[i].uncompressed_length < uncompressed_sum) {
         return OTS_FAILURE_MSG_TAG("overflow of uncompressed sum", tables[i].tag);
       }
 
       uncompressed_sum += tables[i].uncompressed_length;
     }
     // since we required that the file be < 1GB in length, and that the table
     // length is < 1GB, the following addtion doesn't overflow
     uint32_t end_byte = tables[i].offset + tables[i].length;
     // Tables in the WOFF file must be aligned 4-byte boundary.
     if (signature == OTS_TAG('w','O','F','F')) {
         end_byte = ots::Round4(end_byte);
     }
     if (!end_byte || end_byte > length) {
       return OTS_FAILURE_MSG_TAG("table overruns end of file", tables[i].tag);
     }
   }
 
   // All decompressed tables uncompressed must be <= 30MB.
   if (uncompressed_sum > 30 * 1024 * 1024) {
     return OTS_FAILURE_MSG_HDR("uncompressed sum exceeds 30MB");
   }
 
   // check that the tables are not overlapping.
   std::vector<std::pair<uint32_t, uint8_t> > overlap_checker;
   for (unsigned i = 0; i < font->num_tables; ++i) {
     overlap_checker.push_back(
         std::make_pair(tables[i].offset, static_cast<uint8_t>(1) /* start */));
     overlap_checker.push_back(
         std::make_pair(tables[i].offset + tables[i].length,
                        static_cast<uint8_t>(0) /* end */));
   }
   std::sort(overlap_checker.begin(), overlap_checker.end());
   int overlap_count = 0;
   for (unsigned i = 0; i < overlap_checker.size(); ++i) {
     overlap_count += (overlap_checker[i].second ? 1 : -1);
     if (overlap_count > 1) {
       return OTS_FAILURE_MSG_HDR("overlapping tables");
     }
   }
 
   std::map<uint32_t, ots::TableEntry> table_map;
   for (unsigned i = 0; i < font->num_tables; ++i) {
     table_map[tables[i].tag] = tables[i];
   }
 
+  ots::Arena arena;
   // Parse known tables first as we need to parse them in specific order.
   for (unsigned i = 0; ; ++i) {
     if (supported_tables[i].tag == 0) break;
 
     uint32_t tag = supported_tables[i].tag;
     const auto &it = table_map.find(tag);
     if (it == table_map.cend()) {
       if (supported_tables[i].required) {
         return OTS_FAILURE_MSG_TAG("missing required table", tag);
       }
     } else {
-      if (!font->ParseTable(it->second, data)) {
+      if (!font->ParseTable(it->second, data, arena)) {
         return OTS_FAILURE_MSG_TAG("Failed to parse table", tag);
       }
     }
   }
 
   // Then parse any tables left.
   for (const auto &table_entry : tables) {
     if (!font->GetTable(table_entry.tag)) {
-      if (!font->ParseTable(table_entry, data)) {
+      if (!font->ParseTable(table_entry, data, arena)) {
         return OTS_FAILURE_MSG_TAG("Failed to parse table", table_entry.tag);
       }
     }
   }
 
   if (font->GetTable(OTS_TAG_CFF)) {
     // font with PostScript glyph
     if (font->version != OTS_TAG('O','T','T','O')) {
       return OTS_FAILURE_MSG_HDR("wrong font version for PostScript glyph data");
     }
     if (font->GetTable(OTS_TAG_GLYF) || font->GetTable(OTS_TAG_LOCA)) {
       // mixing outline formats is not recommended
       return OTS_FAILURE_MSG_HDR("font contains both PS and TT glyphs");
     }
   } else {
     if (!font->GetTable(OTS_TAG_GLYF) || !font->GetTable(OTS_TAG_LOCA)) {
       // No TrueType glyph found.
       //
       // We don't sanitize bitmap tables, but don’t reject bitmap-only fonts if
       // we are asked to pass them thru.
       // Also don’t reject if we are asked to pass glyf/loca thru.
       if (!font->GetTable(OTS_TAG('C','B','D','T')) &&
           !font->GetTable(OTS_TAG('C','B','L','C'))) {
         return OTS_FAILURE_MSG_HDR("no supported glyph shapes table(s) present");
       }
     }
   }
 
   uint16_t num_output_tables = 0;
   for (const auto &it : table_map) {
     ots::Table *table = font->GetTable(it.first);
     if (table != NULL && table->ShouldSerialize())
       num_output_tables++;
   }
 
   uint16_t max_pow2 = 0;
   while (1u << (max_pow2 + 1) <= num_output_tables) {
     max_pow2++;
   }
   const uint16_t output_search_range = (1u << max_pow2) << 4;
 
   // most of the errors here are highly unlikely - they'd only occur if the
   // output stream returns a failure, e.g. lack of space to write
   output->ResetChecksum();
   if (!output->WriteU32(font->version) ||
       !output->WriteU16(num_output_tables) ||
       !output->WriteU16(output_search_range) ||
       !output->WriteU16(max_pow2) ||
       !output->WriteU16((num_output_tables << 4) - output_search_range)) {
     return OTS_FAILURE_MSG_HDR("error writing output");
   }
   const uint32_t offset_table_chksum = output->chksum();
 
   const size_t table_record_offset = output->Tell();
   if (!output->Pad(16 * num_output_tables)) {
     return OTS_FAILURE_MSG_HDR("error writing output");
   }
 
   std::vector<ots::TableEntry> out_tables;
 
   size_t head_table_offset = 0;
   for (const auto &it : table_map) {
     uint32_t input_offset = it.second.offset;
     const auto &ot = header->table_entries.find(input_offset);
     if (ot != header->table_entries.end()) {
       ots::TableEntry out = ot->second;
       if (out.tag == OTS_TAG('h','e','a','d')) {
         head_table_offset = out.offset;
       }
       out_tables.push_back(out);
     } else {
       ots::TableEntry out;
       out.tag = it.first;
       out.offset = output->Tell();
 
       if (out.tag == OTS_TAG('h','e','a','d')) {
         head_table_offset = out.offset;
       }
 
       ots::Table *table = font->GetTable(out.tag);
       if (table != NULL && table->ShouldSerialize()) {
         output->ResetChecksum();
         if (!table->Serialize(output)) {
           return OTS_FAILURE_MSG_TAG("failed to serialize table", out.tag);
         }
 
         const size_t end_offset = output->Tell();
         if (end_offset <= out.offset) {
           // paranoid check. |end_offset| is supposed to be greater than the offset,
           // as long as the Tell() interface is implemented correctly.
           return OTS_FAILURE_MSG_HDR("error writing output");
         }
         out.length = end_offset - out.offset;
 
         // align tables to four bytes
         if (!output->Pad((4 - (end_offset & 3)) % 4)) {
           return OTS_FAILURE_MSG_HDR("error writing output");
         }
         out.chksum = output->chksum();
         out_tables.push_back(out);
         header->table_entries[input_offset] = out;
       }
     }
   }
 
   const size_t end_of_file = output->Tell();
 
   // Need to sort the output tables for inclusion in the file
   std::sort(out_tables.begin(), out_tables.end());
   if (!output->Seek(table_record_offset)) {
     return OTS_FAILURE_MSG_HDR("error writing output");
   }
 
   output->ResetChecksum();
   uint32_t tables_chksum = 0;
   for (unsigned i = 0; i < out_tables.size(); ++i) {
     if (!output->WriteU32(out_tables[i].tag) ||
         !output->WriteU32(out_tables[i].chksum) ||
         !output->WriteU32(out_tables[i].offset) ||
         !output->WriteU32(out_tables[i].length)) {
       return OTS_FAILURE_MSG_HDR("error writing output");
     }
     tables_chksum += out_tables[i].chksum;
   }
   const uint32_t table_record_chksum = output->chksum();
 
   // http://www.microsoft.com/typography/otspec/otff.htm
   const uint32_t file_chksum
       = offset_table_chksum + tables_chksum + table_record_chksum;
   const uint32_t chksum_magic = static_cast<uint32_t>(0xb1b0afba) - file_chksum;
 
   // seek into the 'head' table and write in the checksum magic value
   if (!head_table_offset) {
     return OTS_FAILURE_MSG_HDR("internal error!");
   }
   if (!output->Seek(head_table_offset + 8)) {
     return OTS_FAILURE_MSG_HDR("error writing output");
   }
   if (!output->WriteU32(chksum_magic)) {
     return OTS_FAILURE_MSG_HDR("error writing output");
   }
 
   if (!output->Seek(end_of_file)) {
     return OTS_FAILURE_MSG_HDR("error writing output");
   }
 
   return true;
 }
 
 }  // namespace
@@ -810,74 +815,74 @@ FontFile::~FontFile() {
   tables.clear();
 }
 
-bool Font::ParseTable(const TableEntry& table_entry, const uint8_t* data) {
+bool Font::ParseTable(const TableEntry& table_entry, const uint8_t* data,
+                      Arena &arena) {
   uint32_t tag = table_entry.tag;
   TableAction action = GetTableAction(file, tag);
   if (action == TABLE_ACTION_DROP) {
     return true;
   }
 
   const auto &it = file->tables.find(table_entry);
   if (it != file->tables.end()) {
     m_tables[tag] = it->second;
     return true;
   }
 
   Table *table = NULL;
   bool ret = false;
 
   if (action == TABLE_ACTION_PASSTHRU) {
     table = new TablePassthru(this, tag);
   } else {
     switch (tag) {
       case OTS_TAG_CFF:  table = new OpenTypeCFF(this,  tag); break;
       case OTS_TAG_CMAP: table = new OpenTypeCMAP(this, tag); break;
       case OTS_TAG_CVT:  table = new OpenTypeCVT(this,  tag); break;
       case OTS_TAG_FPGM: table = new OpenTypeFPGM(this, tag); break;
       case OTS_TAG_GASP: table = new OpenTypeGASP(this, tag); break;
       case OTS_TAG_GDEF: table = new OpenTypeGDEF(this, tag); break;
       case OTS_TAG_GLYF: table = new OpenTypeGLYF(this, tag); break;
       case OTS_TAG_GPOS: table = new OpenTypeGPOS(this, tag); break;
       case OTS_TAG_GSUB: table = new OpenTypeGSUB(this, tag); break;
       case OTS_TAG_HDMX: table = new OpenTypeHDMX(this, tag); break;
       case OTS_TAG_HEAD: table = new OpenTypeHEAD(this, tag); break;
       case OTS_TAG_HHEA: table = new OpenTypeHHEA(this, tag); break;
       case OTS_TAG_HMTX: table = new OpenTypeHMTX(this, tag); break;
       case OTS_TAG_KERN: table = new OpenTypeKERN(this, tag); break;
       case OTS_TAG_LOCA: table = new OpenTypeLOCA(this, tag); break;
       case OTS_TAG_LTSH: table = new OpenTypeLTSH(this, tag); break;
       case OTS_TAG_MATH: table = new OpenTypeMATH(this, tag); break;
       case OTS_TAG_MAXP: table = new OpenTypeMAXP(this, tag); break;
       case OTS_TAG_NAME: table = new OpenTypeNAME(this, tag); break;
       case OTS_TAG_OS2:  table = new OpenTypeOS2(this,  tag); break;
       case OTS_TAG_POST: table = new OpenTypePOST(this, tag); break;
       case OTS_TAG_PREP: table = new OpenTypePREP(this, tag); break;
       case OTS_TAG_VDMX: table = new OpenTypeVDMX(this, tag); break;
       case OTS_TAG_VORG: table = new OpenTypeVORG(this, tag); break;
       case OTS_TAG_VHEA: table = new OpenTypeVHEA(this, tag); break;
       case OTS_TAG_VMTX: table = new OpenTypeVMTX(this, tag); break;
       default: break;
     }
   }
 
   if (table) {
-    Arena arena;
     const uint8_t* table_data;
     size_t table_length;
 
-    if (GetTableData(data, table_entry, &arena, &table_length, &table_data)) {
+    if (GetTableData(data, table_entry, arena, &table_length, &table_data)) {
       // FIXME: Parsing some tables will fail if the table is not added to
       // m_tables first.
       m_tables[tag] = table;
       ret = table->Parse(table_data, table_length);
       if (!ret) {
         m_tables.erase(tag);
         delete table;
       } else {
         file->tables[table_entry] = table;
       }
     }
   }
 
   return ret;
 }
diff --git a/src/ots.h b/src/ots.h
index 021d33a..f533d35 100644
--- a/src/ots.h
+++ b/src/ots.h
@@ -218,6 +218,7 @@ bool IsValidVersionTag(uint32_t tag);
 struct Font;
 struct FontFile;
 struct TableEntry;
+struct Arena;
 
 class Table {
  public:
@@ -266,24 +267,25 @@ class TablePassthru : public Table {
 struct Font {
   explicit Font(FontFile *f)
       : file(f),
         version(0),
         num_tables(0),
         search_range(0),
         entry_selector(0),
         range_shift(0) {
   }
 
-  bool ParseTable(const TableEntry& tableinfo, const uint8_t* data);
+  bool ParseTable(const TableEntry& tableinfo, const uint8_t* data,
+                  Arena &arena);
   Table* GetTable(uint32_t tag) const;
 
   FontFile *file;
 
   uint32_t version;
   uint16_t num_tables;
   uint16_t search_range;
   uint16_t entry_selector;
   uint16_t range_shift;
 
  private:
   std::map<uint32_t, Table*> m_tables;
 };
diff --git a/tests/fonts/fuzzing/72566065770241b8c31bd35201ad62102962a5aa.woff b/tests/fonts/fuzzing/72566065770241b8c31bd35201ad62102962a5aa.woff
new file mode 100644
index 0000000..7e9af18
Binary files /dev/null and b/tests/fonts/fuzzing/72566065770241b8c31bd35201ad62102962a5aa.woff differ
