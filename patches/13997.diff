commit 8e3b01e20ebd82528c3302d6756f3c6dffa4bfb2
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Wed Apr 3 02:12:28 2019 +0200

    avcodec/agm: More completely check size before using it
    
    Fixes: out of array access
    Fixes: 13997/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_AGM_fuzzer-5701427252428800
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Reviewed-by: Paul B Mahol <onemda@gmail.com>
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/agm.c b/libavcodec/agm.c
index b0e8b80f81..2d2092222d 100644
--- a/libavcodec/agm.c
+++ b/libavcodec/agm.c
@@ -504,97 +504,98 @@ static int decode_inter(AVCodecContext *avctx, GetBitContext *gb,
 static int decode_frame(AVCodecContext *avctx, void *data,
                         int *got_frame, AVPacket *avpkt)
 {
     AGMContext *s = avctx->priv_data;
     GetBitContext *gb = &s->gb;
     GetByteContext *gbyte = &s->gbyte;
     AVFrame *frame = data;
     int w, h, width, height, header;
     int ret;
 
     if (!avpkt->size)
         return 0;
 
     bytestream2_init(gbyte, avpkt->data, avpkt->size);
 
     header = bytestream2_get_le32(gbyte);
     s->fflags = bytestream2_get_le32(gbyte);
     s->bitstream_size = s->fflags & 0x1FFFFFFF;
     s->fflags >>= 29;
     av_log(avctx, AV_LOG_DEBUG, "fflags: %X\n", s->fflags);
     if (avpkt->size < s->bitstream_size + 8)
         return AVERROR_INVALIDDATA;
 
     s->key_frame = s->fflags & 0x1;
     frame->key_frame = s->key_frame;
     frame->pict_type = s->key_frame ? AV_PICTURE_TYPE_I : AV_PICTURE_TYPE_P;
 
     if (header) {
         av_log(avctx, AV_LOG_ERROR, "header: %X\n", header);
         return AVERROR_PATCHWELCOME;
     }
 
     s->flags = 0;
     w = bytestream2_get_le32(gbyte);
     if (w < 0) {
         w = -w;
         s->flags |= 2;
     }
     h = bytestream2_get_le32(gbyte);
     if (h < 0) {
         h = -h;
         s->flags |= 1;
     }
 
     width  = avctx->width;
     height = avctx->height;
     if (w < width || h < height || w & 7 || h & 7)
         return AVERROR_INVALIDDATA;
 
     ret = ff_set_dimensions(avctx, w, h);
     if (ret < 0)
         return ret;
     avctx->width = width;
     avctx->height = height;
 
     s->compression = bytestream2_get_le32(gbyte);
     if (s->compression < 0 || s->compression > 100)
         return AVERROR_INVALIDDATA;
 
     for (int i = 0; i < 3; i++)
         s->size[i] = bytestream2_get_le32(gbyte);
-    if (32LL + s->size[0] + s->size[1] + s->size[2] > avpkt->size)
+    if (s->size[0] < 0 || s->size[1] < 0 || s->size[2] < 0 ||
+        32LL + s->size[0] + s->size[1] + s->size[2] > avpkt->size)
         return AVERROR_INVALIDDATA;
 
     if ((ret = ff_get_buffer(avctx, frame, AV_GET_BUFFER_FLAG_REF)) < 0)
         return ret;
 
     if (frame->key_frame) {
         ret = decode_intra(avctx, gb, frame);
     } else {
         if (!s->prev_frame->data[0]) {
             av_log(avctx, AV_LOG_ERROR, "Missing reference frame.\n");
             return AVERROR_INVALIDDATA;
         }
 
         if (!(s->flags & 2)) {
             ret = av_frame_copy(frame, s->prev_frame);
             if (ret < 0)
                 return ret;
         }
 
         ret = decode_inter(avctx, gb, frame, s->prev_frame);
     }
     if (ret < 0)
         return ret;
 
     av_frame_unref(s->prev_frame);
     if ((ret = av_frame_ref(s->prev_frame, frame)) < 0)
         return ret;
 
     frame->crop_top  = avctx->coded_height - avctx->height;
     frame->crop_left = avctx->coded_width  - avctx->width;
 
     *got_frame = 1;
 
     return avpkt->size;
 }
