commit c8b3d02c49943d1fef2cc060dd7115a5ae5f7afe
Author: Alan Modra <amodra@gmail.com>
Date:   Tue Mar 14 10:25:51 2023 +1030

    objdump segfault after symbol table error
    
    This memcpy segfaults if symcount is -1 (=> syms is NULL).
          memcpy (sorted_syms, symcount ? syms : dynsyms,
                  sorted_symcount * sizeof (asymbol *));
    
            * objdump.c (slurp_symtab): Don't leave symcount as -1 after
            an error.
            (slurp_dynamic_symtab): Likewise for dynsymcount.

diff --git a/binutils/objdump.c b/binutils/objdump.c
index 0e8e1980b80..5dac13ba868 100644
--- a/binutils/objdump.c
+++ b/binutils/objdump.c
@@ -994,29 +994,30 @@ static asymbol **
 slurp_symtab (bfd *abfd)
 {
   symcount = 0;
   if (!(bfd_get_file_flags (abfd) & HAS_SYMS))
     return NULL;
 
   long storage = bfd_get_symtab_upper_bound (abfd);
   if (storage < 0)
     {
       non_fatal (_("failed to read symbol table from: %s"),
 		 bfd_get_filename (abfd));
       my_bfd_nonfatal (_("error message was"));
     }
 
   if (storage <= 0)
     return NULL;
 
   asymbol **sy = (asymbol **) xmalloc (storage);
   symcount = bfd_canonicalize_symtab (abfd, sy);
   if (symcount < 0)
     {
       my_bfd_nonfatal (bfd_get_filename (abfd));
       free (sy);
       sy = NULL;
+      symcount = 0;
     }
   return sy;
 }
 
 /* Read in the dynamic symbols.  */
@@ -1025,33 +1026,34 @@ static asymbol **
 slurp_dynamic_symtab (bfd *abfd)
 {
   dynsymcount = 0;
   long storage = bfd_get_dynamic_symtab_upper_bound (abfd);
   if (storage < 0)
     {
       if (!(bfd_get_file_flags (abfd) & DYNAMIC))
 	{
 	  non_fatal (_("%s: not a dynamic object"), bfd_get_filename (abfd));
 	  exit_status = 1;
 	  return NULL;
 	}
 
       my_bfd_nonfatal (bfd_get_filename (abfd));
     }
 
   if (storage <= 0)
     return NULL;
 
   asymbol **sy = (asymbol **) xmalloc (storage);
   dynsymcount = bfd_canonicalize_dynamic_symtab (abfd, sy);
   if (dynsymcount < 0)
     {
       my_bfd_nonfatal (bfd_get_filename (abfd));
       free (sy);
       sy = NULL;
+      dynsymcount = 0;
     }
   return sy;
 }
 
 /* Some symbol names are significant and should be kept in the
    table of sorted symbol names, even if they are marked as
    debugging/section symbols.  */
