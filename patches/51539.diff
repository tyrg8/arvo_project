commit 1225ea30e2389f36c4828f9b6c9b514261adc80f
Merge: 3e0e032e1 e8a640d7f
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Sat Oct 1 18:49:33 2022 +0200

    Merge pull request #6638 from rouault/shapefuzzer_fix
    
    shapefuzzer: avoid too long processing time

diff --git a/fuzzers/shapefuzzer.c b/fuzzers/shapefuzzer.c
index d1481910a..7a0e3c51f 100644
--- a/fuzzers/shapefuzzer.c
+++ b/fuzzers/shapefuzzer.c
@@ -1,6 +1,8 @@
 #include "mapserver.h"
 #include "mapshape.h"
 
+#include "cpl_vsi.h"
+
 #include <stdlib.h>
 #include <string.h>
 #include <stdbool.h>
@@ -54,32 +56,50 @@ int
 LLVMFuzzerTestOneInput(GByte *data, size_t size)
 {
   /* this fuzzer expects three files concatenated, separated by the
      string "deadbeef"; you can generate such a file by typing:
 
      { cat foo.shp; echo -n "deadbeef"; cat foo.shx; echo -n "deadbeef"; cat foo.dbf; } >/tmp/corpus/start
 
      then run the fuzzer:
 
      ./build/fuzzer/fuzzer /tmp/corpus
   */
 
   VSILFILE *shp = SegmentFile("/vsimem/foo.shp", &data, &size);
   VSILFILE *shx = SegmentFile("/vsimem/foo.shx", &data, &size);
   VSILFILE *dbf = SegmentFile("/vsimem/foo.dbf", &data, &size);
 
   shapefileObj file;
+  errorObj *ms_error = msGetErrorObj();
   if (msShapefileOpenVirtualFile(&file, "/vsimem/foo.shp", shp, shx, dbf, false) == 0) {
+    if (file.numshapes > 100 * 1000 )
+    {
+        VSIStatBufL sStat;
+        if( VSIStatL("/vsimem/foo.shx", &sStat) == 0 &&
+            sStat.st_size >= 100 &&
+            file.numshapes > (int)(sStat.st_size - 100) / 8 )
+        {
+            file.numshapes = (int)(sStat.st_size - 100) / 8;
+        }
+    }
     for (int i = 0; i < file.numshapes; ++i) {
       shapeObj shape;
       msInitShape(&shape);
       msSHPReadShape(file.hSHP, i, &shape);
       msFreeShape(&shape);
+      // Give up as soon an error is triggered to avoid too long processing time.
+      if( ms_error->code != MS_NOERR )
+          break;
     }
 
     msShapefileClose(&file);
   }
 
   msResetErrorList();
 
+  VSIUnlink("/vsimem/foo.shp");
+  VSIUnlink("/vsimem/foo.shx");
+  VSIUnlink("/vsimem/foo.dbf");
+
   return EXIT_SUCCESS;
 }
