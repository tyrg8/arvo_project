commit af904facd1c81a0b862c9a324327024677ccc495
Author: Eduardo Silva <eduardo@treasure-data.com>
Date:   Tue May 12 17:24:10 2020 -0600

    tests: internal: fuzzer: local: use direct file read
    
    Signed-off-by: Eduardo Silva <eduardo@treasure-data.com>

diff --git a/tests/internal/fuzzers/local_test.c b/tests/internal/fuzzers/local_test.c
index 4a576fcca..5fd11b39a 100644
--- a/tests/internal/fuzzers/local_test.c
+++ b/tests/internal/fuzzers/local_test.c
@@ -1,64 +1,85 @@
 /* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
 
 /*  Fluent Bit
  *  ==========
  *  Copyright (C) 2019-2020 The Fluent Bit Authors
  *  Copyright (C) 2015-2018 Treasure Data Inc.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
  *  You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
 
 #include <fluent-bit/flb_info.h>
 #include <fluent-bit/flb_log.h>
+#include <fluent-bit/flb_mem.h>
 #include <monkey/mk_core.h>
 
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <unistd.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <errno.h>
 
 /* declare external function test */
 int LLVMFuzzerTestOneInput(unsigned char *data, size_t size);
 
 int main(int argc, char **argv)
 {
+    int i;
     int ret;
-    char *test;
+    FILE *fp;
+    char *buffer;
+    long bytes;
     struct stat st;
 
     if (argc < 2) {
         flb_error("usage: %s TESTCASE_FILE", argv[0]);
         exit(EXIT_FAILURE);
     }
 
     /* Validate the file */
     ret = stat(argv[1], &st);
     if (ret == -1) {
         flb_errno();
         flb_error("cannot stat(2) testcase file '%s'", argv[1]);
         exit(EXIT_FAILURE);
     }
 
-    /* Load file into the 'test' buffer */
-    test = mk_file_to_buffer(argv[1]);
-    if (!test) {
-        flb_error("cannot open/read testcase '%s'", argv[1]);
-        exit(EXIT_FAILURE);
+    if (!(fp = fopen(argv[1], "rb"))) {
+        flb_errno();
+        flb_error("cannot fopen(2) testcase file '%s'", argv[1]);
+        return -1;
     }
 
-    /* Invoke the fuzzer entry-point function */
-    ret = LLVMFuzzerTestOneInput((unsigned char *) test, st.st_size);
-    flb_info("unit test return value: %i", ret);
+    buffer = flb_malloc(st.st_size);
+    if (!buffer) {
+        flb_errno();
+        return -1;
+    }
 
-    mk_mem_free(test);
+    bytes = fread(buffer, st.st_size, 1, fp);
+    if (bytes < 1) {
+        fclose(fp);
+        flb_free(buffer);
+        return -1;
+    }
+    fclose(fp);
+
+    /* Invoke the fuzzer entry-point function */
+    for (i = 0; i < 1; i++) {
+        ret = LLVMFuzzerTestOneInput((unsigned char *) buffer, st.st_size);
+    }
+    flb_free(buffer);
     return 0;
 }
