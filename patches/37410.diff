commit 1da9ad10e80f2e2365c4c00b532fe908b4b8fe19
Author: Samuel Thibault <samuel.thibault@ens-lyon.org>
Date:   Sat Jul 2 01:04:21 2022 +0200

    Add tertiary translator
    
    TranslateWord2 passes translator2 as tr to TranslateWord which may call
    TranslateWord3, SpeakIndividualLetters, TranslateLetter, which was calling
    SetTranslator2 again, thus freeing the very tr being used. Make that
    latter use another translator.

diff --git a/src/libespeak-ng/numbers.c b/src/libespeak-ng/numbers.c
index 5a627ca7..04f95913 100644
--- a/src/libespeak-ng/numbers.c
+++ b/src/libespeak-ng/numbers.c
@@ -477,70 +477,70 @@ void LookupAccentedLetter(Translator *tr, unsigned int letter, char *ph_buf)
 void LookupLetter(Translator *tr, unsigned int letter, int next_byte, char *ph_buf1, int control)
 {
 	// control, bit 0:  not the first letter of a word
 
 	int len;
 	char single_letter[10] = { 0, 0 };
 	unsigned int dict_flags[2];
 	char ph_buf3[40];
 
 	ph_buf1[0] = 0;
 	len = utf8_out(letter, &single_letter[2]);
 	single_letter[len+2] = ' ';
 
 	if (next_byte == -1) {
 		// speaking normal text, not individual characters
 		if (Lookup(tr, &single_letter[2], ph_buf1) != 0)
 			return;
 
 		single_letter[1] = '_';
 		if (Lookup(tr, &single_letter[1], ph_buf3) != 0)
 			return; // the character is specified as _* so ignore it when speaking normal text
 
 		// check whether this character is specified for English
 		if (tr->translator_name == L('e', 'n'))
 			return; // we are already using English
 
-		SetTranslator2(ESPEAKNG_DEFAULT_VOICE);
-		if (Lookup(translator2, &single_letter[2], ph_buf3) != 0) {
+		SetTranslator3(ESPEAKNG_DEFAULT_VOICE);
+		if (Lookup(translator3, &single_letter[2], ph_buf3) != 0) {
 			// yes, switch to English and re-translate the word
 			sprintf(ph_buf1, "%c", phonSWITCH);
 		}
 		SelectPhonemeTable(voice->phoneme_tab_ix); // revert to original phoneme table
 		return;
 	}
 
 	if ((letter <= 32) || iswspace(letter)) {
 		// lookup space as _&32 etc.
 		sprintf(&single_letter[1], "_#%d ", letter);
 		Lookup(tr, &single_letter[1], ph_buf1);
 		return;
 	}
 
 	if (next_byte != ' ')
 		next_byte = RULE_SPELLING;
 	single_letter[3+len] = next_byte; // follow by space-space if the end of the word, or space-31
 
 	single_letter[1] = '_';
 
 	// if the $accent flag is set for this letter, use the accents table (below)
 	dict_flags[1] = 0;
 
 	if (Lookup(tr, &single_letter[1], ph_buf3) == 0) {
 		single_letter[1] = ' ';
 		if (Lookup(tr, &single_letter[2], ph_buf3) == 0)
 			TranslateRules(tr, &single_letter[2], ph_buf3, sizeof(ph_buf3), NULL, FLAG_NO_TRACE, NULL);
 	}
 
 	if (ph_buf3[0] == 0)
 		LookupAccentedLetter(tr, letter, ph_buf3);
 
 	strcpy(ph_buf1, ph_buf3);
 	if ((ph_buf1[0] == 0) || (ph_buf1[0] == phonSWITCH))
 		return;
 
 	dict_flags[0] = 0;
 	dict_flags[1] = 0;
 	SetWordStress(tr, ph_buf1, dict_flags, -1, control & 1);
 }
 
 // unicode ranges for non-ascii digits 0-9 (these must be in ascending order)
@@ -666,240 +666,240 @@ int IsSuperscript(int letter)
 int TranslateLetter(Translator *tr, char *word, char *phonemes, int control, ALPHABET *current_alphabet)
 {
 	// get pronunciation for an isolated letter
 	// return number of bytes used by the letter
 	// control bit 0:  a non-initial letter in a word
 	//         bit 1:  say 'capital'
 	//         bit 2:  say character code for unknown letters
 
 	int n_bytes;
 	int letter;
 	int len;
 	int ix;
 	int c;
 	char *p2;
 	char *pbuf;
 	const char *modifier;
 	ALPHABET *alphabet;
 	int al_offset;
 	int al_flags;
 	int language;
 	int number;
 	int phontab_1;
 	int speak_letter_number;
 	char capital[30];
 	char ph_buf[80];
 	char ph_buf2[80];
 	char ph_alphabet[80];
 	char hexbuf[12];
 	static const char pause_string[] = { phonPAUSE, 0 };
 
 	ph_buf[0] = 0;
 	ph_alphabet[0] = 0;
 	capital[0] = 0;
 	phontab_1 = translator->phoneme_tab_ix;
 
 	n_bytes = utf8_in(&letter, word);
 
 	if ((letter & 0xfff00) == 0x0e000)
 		letter &= 0xff; // uncode private usage area
 
 	if (control & 2) {
 		// include CAPITAL information
 		if (iswupper(letter))
 			Lookup(tr, "_cap", capital);
 	}
 	letter = towlower2(letter, tr);
 	LookupLetter(tr, letter, word[n_bytes], ph_buf, control & 1);
 
 	if (ph_buf[0] == 0) {
 		// is this a subscript or superscript letter ?
 		if ((c = IsSuperscript(letter)) != 0) {
 			letter = c & 0x3fff;
 			if ((control & 4 ) && ((modifier = modifiers[c >> 14]) != NULL)) {
 				// don't say "superscript" during normal text reading
 				Lookup(tr, modifier, capital);
 				if (capital[0] == 0) {
-					capital[2] = SetTranslator2(ESPEAKNG_DEFAULT_VOICE); // overwrites previous contents of translator2
-					Lookup(translator2, modifier, &capital[3]);
+					capital[2] = SetTranslator3(ESPEAKNG_DEFAULT_VOICE); // overwrites previous contents of translator3
+					Lookup(translator3, modifier, &capital[3]);
 					if (capital[3] != 0) {
 						capital[0] = phonPAUSE;
 						capital[1] = phonSWITCH;
 						len = strlen(&capital[3]);
 						capital[len+3] = phonSWITCH;
 						capital[len+4] = phontab_1;
 						capital[len+5] = 0;
 					}
 				}
 			}
 		}
 		LookupLetter(tr, letter, word[n_bytes], ph_buf, control & 1);
 	}
 
 	if (ph_buf[0] == phonSWITCH) {
 		strcpy(phonemes, ph_buf);
 		return 0;
 	}
 
 
 	if ((ph_buf[0] == 0) && ((number = NonAsciiNumber(letter)) > 0)) {
 		// convert a non-ascii number to 0-9
 		LookupLetter(tr, number, 0, ph_buf, control & 1);
 	}
 
 	al_offset = 0;
 	al_flags = 0;
 	if ((alphabet = AlphabetFromChar(letter)) != NULL) {
 		al_offset = alphabet->offset;
 		al_flags = alphabet->flags;
 	}
 
 	if (alphabet != current_alphabet) {
 		// speak the name of the alphabet
 		current_alphabet = alphabet;
 		if ((alphabet != NULL) && !(al_flags & AL_DONT_NAME) && (al_offset != translator->letter_bits_offset)) {
 			if ((al_flags & AL_DONT_NAME) || (al_offset == translator->langopts.alt_alphabet) || (al_offset == translator->langopts.our_alphabet)) {
 				// don't say the alphabet name
 			} else {
 				ph_buf2[0] = 0;
 				if (Lookup(translator, alphabet->name, ph_alphabet) == 0) { // the original language for the current voice
 					// Can't find the local name for this alphabet, use the English name
-					ph_alphabet[2] = SetTranslator2(ESPEAKNG_DEFAULT_VOICE); // overwrites previous contents of translator2
-					Lookup(translator2, alphabet->name, ph_buf2);
+					ph_alphabet[2] = SetTranslator3(ESPEAKNG_DEFAULT_VOICE); // overwrites previous contents of translator3
+					Lookup(translator3, alphabet->name, ph_buf2);
 				} else if (translator != tr) {
 					phontab_1 = tr->phoneme_tab_ix;
 					strcpy(ph_buf2, ph_alphabet);
 					ph_alphabet[2] = translator->phoneme_tab_ix;
 				}
 
 				if (ph_buf2[0] != 0) {
 					// we used a different language for the alphabet name (now in ph_buf2)
 					ph_alphabet[0] = phonPAUSE;
 					ph_alphabet[1] = phonSWITCH;
 					strcpy(&ph_alphabet[3], ph_buf2);
 					len = strlen(ph_buf2) + 3;
 					ph_alphabet[len] = phonSWITCH;
 					ph_alphabet[len+1] = phontab_1;
 					ph_alphabet[len+2] = 0;
 				}
 			}
 		}
 	}
 
 	// caution: SetWordStress() etc don't expect phonSWITCH + phoneme table number
 
 	if (ph_buf[0] == 0) {
 		if ((al_offset != 0) && (al_offset == translator->langopts.alt_alphabet))
 			language = translator->langopts.alt_alphabet_lang;
 		else if ((alphabet != NULL) && (alphabet->language != 0) && !(al_flags & AL_NOT_LETTERS))
 			language = alphabet->language;
 		else
 			language = L('e', 'n');
 
 		if ((language != tr->translator_name) || (language == L('k', 'o'))) {
 			char *p3;
 			int initial, code;
 			char hangul_buf[12];
 
 			// speak in the language for this alphabet (or English)
-			ph_buf[2] = SetTranslator2(WordToString2(language));
+			ph_buf[2] = SetTranslator3(WordToString2(language));
 
-			if (translator2 != NULL) {
+			if (translator3 != NULL) {
 				if (((code = letter - 0xac00) >= 0) && (letter <= 0xd7af)) {
 					// Special case for Korean letters.
 					// break a syllable hangul into 2 or 3 individual jamo
 
 					hangul_buf[0] = ' ';
 					p3 = &hangul_buf[1];
 					if ((initial = (code/28)/21) != 11) {
 						p3 += utf8_out(initial + 0x1100, p3);
 					}
 					utf8_out(((code/28) % 21) + 0x1161, p3); // medial
 					utf8_out((code % 28) + 0x11a7, &p3[3]); // final
 					p3[6] = ' ';
 					p3[7] = 0;
 					ph_buf[3] = 0;
-					TranslateRules(translator2, &hangul_buf[1], &ph_buf[3], sizeof(ph_buf)-3, NULL, 0, NULL);
-					SetWordStress(translator2, &ph_buf[3], NULL, -1, 0);
+					TranslateRules(translator3, &hangul_buf[1], &ph_buf[3], sizeof(ph_buf)-3, NULL, 0, NULL);
+					SetWordStress(translator3, &ph_buf[3], NULL, -1, 0);
 				} else
-					LookupLetter(translator2, letter, word[n_bytes], &ph_buf[3], control & 1);
+					LookupLetter(translator3, letter, word[n_bytes], &ph_buf[3], control & 1);
 
 				if (ph_buf[3] == phonSWITCH) {
 					// another level of language change
-					ph_buf[2] = SetTranslator2(&ph_buf[4]);
-					LookupLetter(translator2, letter, word[n_bytes], &ph_buf[3], control & 1);
+					ph_buf[2] = SetTranslator3(&ph_buf[4]);
+					LookupLetter(translator3, letter, word[n_bytes], &ph_buf[3], control & 1);
 				}
 
 				SelectPhonemeTable(voice->phoneme_tab_ix); // revert to original phoneme table
 
 				if (ph_buf[3] != 0) {
 					ph_buf[0] = phonPAUSE;
 					ph_buf[1] = phonSWITCH;
 					len = strlen(&ph_buf[3]) + 3;
 					ph_buf[len] = phonSWITCH; // switch back
 					ph_buf[len+1] = tr->phoneme_tab_ix;
 					ph_buf[len+2] = 0;
 				}
 			}
 		}
 	}
 
 	if (ph_buf[0] == 0) {
 		// character name not found
 
 		if (ph_buf[0] == 0) {
 			speak_letter_number = 1;
 			if (!(al_flags & AL_NO_SYMBOL)) {
 				if (iswalpha(letter))
 					Lookup(translator, "_?A", ph_buf);
 
 				if ((ph_buf[0] == 0) && !iswspace(letter))
 					Lookup(translator, "_??", ph_buf);
 
 				if (ph_buf[0] == 0)
 					EncodePhonemes("l'et@", ph_buf, NULL);
 			}
 
 			if (!(control & 4) && (al_flags & AL_NOT_CODE)) {
 				// don't speak the character code number, unless we want full details of this character
 				speak_letter_number = 0;
 			}
 
 			if (speak_letter_number) {
 				if (al_offset == 0x2800) {
 					// braille dots symbol, list the numbered dots
 					p2 = hexbuf;
 					for (ix = 0; ix < 8; ix++) {
 						if (letter & (1 << ix))
 							*p2++ = '1'+ix;
 					}
 					*p2 = 0;
 				} else {
 					// speak the hexadecimal number of the character code
 					sprintf(hexbuf, "%x", letter);
 				}
 
 				pbuf = ph_buf;
 				for (p2 = hexbuf; *p2 != 0; p2++) {
 					pbuf += strlen(pbuf);
 					*pbuf++ = phonPAUSE_VSHORT;
 					LookupLetter(translator, *p2, 0, pbuf, 1);
 					if (((pbuf[0] == 0) || (pbuf[0] == phonSWITCH)) && (*p2 >= 'a')) {
 						// This language has no translation for 'a' to 'f', speak English names using base phonemes
 						EncodePhonemes(hex_letters[*p2 - 'a'], pbuf, NULL);
 					}
 				}
 				strcat(pbuf, pause_string);
 			}
 		}
 	}
 
 	len = strlen(phonemes);
 
 	if (tr->langopts.accents & 2)  // 'capital' before or after the word ?
 		sprintf(ph_buf2, "%c%s%s%s", 0xff, ph_alphabet, ph_buf, capital);
 	else
 		sprintf(ph_buf2, "%c%s%s%s", 0xff, ph_alphabet, capital, ph_buf); // the 0xff marker will be removed or replaced in SetSpellingStress()
 	if ((len + strlen(ph_buf2)) < N_WORD_PHONEMES)
 		strcpy(&phonemes[len], ph_buf2);
 	return n_bytes;
 }
diff --git a/src/libespeak-ng/translate.c b/src/libespeak-ng/translate.c
index 33bf5425..19f95051 100644
--- a/src/libespeak-ng/translate.c
+++ b/src/libespeak-ng/translate.c
@@ -47,6 +47,8 @@
 Translator *translator = NULL; // the main translator
 Translator *translator2 = NULL; // secondary translator for certain words
 static char translator2_language[20] = { 0 };
+Translator *translator3 = NULL; // tertiary translator for certain words
+static char translator3_language[20] = { 0 };
 
 FILE *f_trans = NULL; // phoneme output text
 int option_tone_flags = 0; // bit 8=emphasize allcaps, bit 9=emphasize penultimate stress
@@ -1206,35 +1208,45 @@ static void Word_EmbeddedCmd()
 	} while (((embedded_cmd & 0x80) == 0) && (embedded_read < embedded_ix));
 }
 
-int SetTranslator2(const char *new_language)
+static int SetAlternateTranslator(const char *new_language, Translator **translator, char translator_language[20])
 {
-	// Set translator2 to a second language
+	// Set alternate translator to a second language
 	int new_phoneme_tab;
 
 	if ((new_phoneme_tab = SelectPhonemeTableName(new_language)) >= 0) {
-		if ((translator2 != NULL) && (strcmp(new_language, translator2_language) != 0)) {
+		if ((*translator != NULL) && (strcmp(new_language, translator_language) != 0)) {
 			// we already have an alternative translator, but not for the required language, delete it
-			DeleteTranslator(translator2);
-			translator2 = NULL;
+			DeleteTranslator(*translator);
+			*translator = NULL;
 		}
 
-		if (translator2 == NULL) {
-			translator2 = SelectTranslator(new_language);
-			strcpy(translator2_language, new_language);
+		if (*translator == NULL) {
+			*translator = SelectTranslator(new_language);
+			strcpy(translator_language, new_language);
 
-			if (LoadDictionary(translator2, translator2->dictionary_name, 0) != 0) {
+			if (LoadDictionary(*translator, (*translator)->dictionary_name, 0) != 0) {
 				SelectPhonemeTable(voice->phoneme_tab_ix); // revert to original phoneme table
 				new_phoneme_tab = -1;
-				translator2_language[0] = 0;
+				translator_language[0] = 0;
 			}
-			translator2->phoneme_tab_ix = new_phoneme_tab;
+			(*translator)->phoneme_tab_ix = new_phoneme_tab;
 		}
 	}
-	if (translator2 != NULL)
-		translator2->phonemes_repeat[0] = 0;
+	if (*translator != NULL)
+		(*translator)->phonemes_repeat[0] = 0;
 	return new_phoneme_tab;
 }
 
+int SetTranslator2(const char *new_language)
+{
+	return SetAlternateTranslator(new_language, &translator2, translator2_language);
+}
+
+int SetTranslator3(const char *new_language)
+{
+	return SetAlternateTranslator(new_language, &translator3, translator3_language);
+}
+
 static int TranslateWord2(Translator *tr, char *word, WORD_TAB *wtab, int pre_pause)
 {
 	int flags = 0;
diff --git a/src/libespeak-ng/translate.h b/src/libespeak-ng/translate.h
index 7af96608..0be35ce5 100644
--- a/src/libespeak-ng/translate.h
+++ b/src/libespeak-ng/translate.h
@@ -649,6 +649,7 @@ extern wchar_t option_punctlist[N_PUNCTLIST];  // which punctuation characters t
 
 extern Translator *translator;
 extern Translator *translator2;
+extern Translator *translator3;
 extern char dictionary_name[40];
 extern espeak_ng_TEXT_DECODER *p_decoder;
 extern int dictionary_skipwords;
@@ -679,6 +680,7 @@ ALPHABET *AlphabetFromChar(int c);
 
 Translator *SelectTranslator(const char *name);
 int SetTranslator2(const char *name);
+int SetTranslator3(const char *name);
 void DeleteTranslator(Translator *tr);
 void ProcessLanguageOptions(LANGUAGE_OPTIONS *langopts);
 
