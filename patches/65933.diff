commit 0318ddbee92ccdb4c6ea86c1ccfefd7e58e5c5a3
Author: Arne Welzel <arne.welzel@corelight.com>
Date:   Fri Jan 19 11:52:03 2024 +0100

    SMTP: Reject BDAT chunks larger than int64_t's max value
    
    The ContentLine analyzer does not support uint64_t.

diff --git a/src/analyzer/protocol/smtp/SMTP.cc b/src/analyzer/protocol/smtp/SMTP.cc
index b70dd91ba..1b0e36d8b 100644
--- a/src/analyzer/protocol/smtp/SMTP.cc
+++ b/src/analyzer/protocol/smtp/SMTP.cc
@@ -1,18 +1,19 @@
 // See the file "COPYING" in the main distribution directory for copyright.
 
 #include "zeek/analyzer/protocol/smtp/SMTP.h"
 
 #include "zeek/zeek-config.h"
 
 #include <cstdlib>
+#include <limits>
 
 #include "zeek/Event.h"
 #include "zeek/NetVar.h"
 #include "zeek/Reporter.h"
 #include "zeek/analyzer/Manager.h"
 #include "zeek/analyzer/protocol/smtp/BDAT.h"
 #include "zeek/analyzer/protocol/smtp/consts.bif.h"
 #include "zeek/analyzer/protocol/smtp/events.bif.h"
 
 #undef SMTP_CMD_DEF
 #define SMTP_CMD_DEF(cmd) #cmd,
@@ -850,24 +851,33 @@ void SMTP_Analyzer::ProcessData(int length, const char* line) { mail->Deliver(le
 bool SMTP_Analyzer::ProcessBdatArg(int arg_len, const char* arg, bool orig) {
     // For the BDAT command, parse out the chunk-size from the line
     // and switch the ContentLineAnalyzer into plain delivery mode
     // assuming things look valid.
     const auto [chunk_size, is_last_chunk, error] = detail::parse_bdat_arg(arg_len, arg);
     if ( error ) {
         Weird("smtp_invalid_bdat_command", error);
         return false;
     }
 
+    // The ContentLine analyzer only supports int64_t, but BDAT could deal
+    // with uint64_t sized chunks. Weird if the chunk size is larger and
+    // do not configure the ContentLine analyzer for plain delivery.
+    if ( chunk_size > std::numeric_limits<int64_t>::max() ) {
+        const char* addl = zeek::util::fmt("%" PRIu64, chunk_size);
+        Weird("smtp_huge_bdat_chunk", addl);
+        return false;
+    }
+
     auto* cl = orig ? cl_orig : cl_resp;
     cl->SetPlainDelivery(chunk_size);
 
     if ( ! bdat ) {
         // This is the first BDAT chunk.
         BeginData(orig);
         bdat = std::make_unique<detail::SMTP_BDAT_Analyzer>(Conn(), mail, zeek::BifConst::SMTP::bdat_max_line_length);
     }
 
     bdat->NextChunk(is_last_chunk ? detail::ChunkType::Last : detail::ChunkType::Intermediate, chunk_size);
 
     // All good.
     return true;
 }
