commit 4413d43962e1aed72a285ae8fb68780bb64a11fe
Author: Peter Wu <peter@lekensteyn.nl>
Date:   Mon May 14 15:18:29 2018 +0200

    rtcp: fix buffer overflow in transport-cc dissection
    
    When the packet status chunks cover more packets than advertised in the
    packet status count field, fail rather than writing past the end.
    https://tools.ietf.org/html/draft-holmer-rmcat-transport-wide-cc-extensions-01#section-3.1.2
    
    Bug: 14673
    Change-Id: If90baef3610d8f884b0772a4b81d6dcb4ebc9227
    Fixes: v2.5.0rc0-2533-ga584eab239 ("New RTCP dissector for transport-cc")
    Link: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6464
    Reviewed-on: https://code.wireshark.org/review/27527
    Petri-Dish: Peter Wu <peter@lekensteyn.nl>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Rui Zhang <rzhang@grandstream.cn>
    Reviewed-by: Peter Wu <peter@lekensteyn.nl>

diff --git a/epan/dissectors/packet-rtcp.c b/epan/dissectors/packet-rtcp.c
index 1d8f976c1c..7229096776 100644
--- a/epan/dissectors/packet-rtcp.c
+++ b/epan/dissectors/packet-rtcp.c
@@ -696,6 +696,7 @@ static expert_field ei_rtcp_missing_sender_ssrc = EI_INIT;
 static expert_field ei_rtcp_missing_block_header = EI_INIT;
 static expert_field ei_rtcp_block_length = EI_INIT;
 static expert_field ei_srtcp_encrypted_payload = EI_INIT;
+static expert_field ei_rtcp_rtpfb_transportcc_bad = EI_INIT;
 
 /* Main dissection function */
 static int dissect_rtcp( tvbuff_t *tvb, packet_info *pinfo,
@@ -1111,248 +1112,263 @@ dissect_rtcp_psfb_remb( tvbuff_t *tvb, int offset, proto_tree *rtcp_tree, proto_
 #define RTCP_HEADER_LENGTH      12
 
 static int
-dissect_rtcp_rtpfb_transport_cc( tvbuff_t *tvb, int offset, proto_tree *rtcp_tree, int pkt_len)
+dissect_rtcp_rtpfb_transport_cc( tvbuff_t *tvb, int offset, packet_info *pinfo, proto_tree *rtcp_tree, int pkt_len)
 {
     proto_tree *fci_tree, *pkt_chunk_tree, *recv_delta_tree;
     proto_item *item       = NULL;
     guint8  *delta_array;
     guint16 *pkt_seq_array;
-    guint32 i, pkt_base_seq, pkt_seq_num, pkt_count;
+    guint32 i, pkt_base_seq, pkt_seq_num, pkt_count, delta_index = 0;
     gint fci_length        = pkt_len - RTCP_HEADER_LENGTH;
-    int delta_index        = 0;
     int padding_length     = offset;
 
     fci_tree = proto_tree_add_subtree_format( rtcp_tree, tvb, offset, fci_length, ett_ssrc, NULL, "Transport-cc" );
 
     /* base sequence number */
     proto_tree_add_item_ret_uint( fci_tree, hf_rtcp_rtpfb_transport_cc_fci_base_seq, tvb, offset, 2, ENC_BIG_ENDIAN, &pkt_base_seq );
     offset += 2;
     pkt_seq_num = pkt_base_seq;
 
     /* packet status count */
     proto_tree_add_item_ret_uint( fci_tree, hf_rtcp_rtpfb_transport_cc_fci_pkt_stats_cnt, tvb, offset, 2, ENC_BIG_ENDIAN, &pkt_count );
     offset += 2;
 
     delta_array   = wmem_alloc0_array( wmem_packet_scope(), gint8, pkt_count );
     pkt_seq_array = wmem_alloc0_array( wmem_packet_scope(), gint16, pkt_count );
 
     /* reference time */
     proto_tree_add_item( fci_tree, hf_rtcp_rtpfb_transport_cc_fci_ref_time, tvb, offset, 3, ENC_BIG_ENDIAN );
     offset += 3;
 
     /* feedback packet count */
     proto_tree_add_item( fci_tree, hf_rtcp_rtpfb_transport_cc_fci_fb_pkt_cnt, tvb, offset, 1, ENC_BIG_ENDIAN );
     offset += 1;
 
     /* packet chunk */
     pkt_chunk_tree = proto_tree_add_subtree_format( fci_tree, tvb, offset, 0, ett_ssrc, NULL, "Packet Chunks" );
 
     for (i = 0; i < pkt_count; )
     {
         guint32 chunk = 0;
         item = proto_tree_add_item_ret_uint( pkt_chunk_tree, hf_rtcp_rtpfb_transport_cc_fci_pkt_chunk, tvb, offset, 2, ENC_BIG_ENDIAN, &chunk );
 
         /* Packet Status Symbols */
         /**
          * 00 Packet not received
          * 01 Packet received, small delta
          * 10 Packet received, large or negative delta
          * 11 [Reserved]
          */
         if ( !(chunk & 0x8000) )
         {
             /* Run length chunk, first bit is zero */
-            int length = chunk & 0x1FFF;
+            guint length = chunk & 0x1FFF;
 
-            if ( length <= 0 )
+            if ( length <= 0 || pkt_count - delta_index < length )
             {
-                /*Malfromed Packet, stop parse it*/
-                delta_array = NULL;
-                pkt_seq_array = NULL;
-
+                /* Malformed packet (zero or too many packets), stop parsing. */
+                proto_tree_add_expert(pkt_chunk_tree, pinfo, &ei_rtcp_rtpfb_transportcc_bad, tvb, offset, 2);
                 offset += 2;
                 return offset;
             }
 
             if ( !(chunk & 0x6000) )
             {
                 proto_item_append_text( item, " [Run Length Chunk] Packet not received. Length : %d", length);
                 pkt_seq_num += length;
             }
             else if ( chunk & 0x2000 )
             {
                 proto_item_append_text( item, " [Run Length Chunk] Small Delta. Length : %d", length);
-                for (int j = 0; j < length; j++)
+                for (guint j = 0; j < length; j++)
                 {
                     /*1 means 1 byte delta, 2 means 2 bytes delta*/
                     delta_array[delta_index+j] = 1;
                     pkt_seq_array[delta_index+j] = pkt_seq_num++;
                 }
                 delta_index += length;
             }
             else if ( chunk & 0x4000 )
             {
                 proto_item_append_text( item, " [Run Length Chunk] Large or Negative Delta. Length : %d", length);
-                for (int j = 0; j < length; j++)
+                for (guint j = 0; j < length; j++)
                 {
                     delta_array[delta_index+j] = 2;
                     pkt_seq_array[delta_index+j] = pkt_seq_num++;
                 }
                 delta_index += length;
             }
             else
             {
                 proto_item_append_text( item, " [Run Length Chunk] [Reserved]. Length : %d", length);
                 pkt_seq_num += length;
             }
 
             i += length;
 
         }
         else
         {
             wmem_strbuf_t* status = wmem_strbuf_new(wmem_packet_scope(), "|");
 
             /* Status Vector Chunk, first bit is one */
             if ( !(chunk & 0x4000) )
             {
                 /* 1 bit symbols */
 
                 int data = chunk & 0x3FFF;
                 int chunk_count = 14;
 
                 for (int k = 0; k < chunk_count; k++)
                 {
                     if ( (data & (0x2000>>k)) == 0 )
                     {
                         if ( i + k < pkt_count )
                         {
                             wmem_strbuf_append(status, " N |");
                             pkt_seq_num++;
                         }
                         else
                         {
                             /* padding */
                             wmem_strbuf_append(status, " _ |");
                         }
                     }
                     else
                     {
+                        if (delta_index >= pkt_count) {
+                            /* Malformed packet (too many status packets). */
+                            proto_tree_add_expert(pkt_chunk_tree, pinfo, &ei_rtcp_rtpfb_transportcc_bad, tvb, offset, 2);
+                            offset += 2;
+                            return offset;
+                        }
                         wmem_strbuf_append(status, " R |");
                         delta_array[delta_index] = 1;
                         pkt_seq_array[delta_index] = pkt_seq_num++;
                         delta_index++;
                     }
                 }
                 proto_item_append_text( item, " [1 bit Status Vector Chunk]: %s", wmem_strbuf_get_str(status));
                 i += chunk_count;
             }
             else
             {
                 /* 2 bits symbols */
                 int chunk_count = 7;
                 int data = chunk & 0x3FFF;
 
                 for (int k = 0; k < chunk_count; k++)
                 {
                     switch ( (data & (0x3000 >> (2*k))) >> ( 2 * (6-k) ) )
                     {
                         case 0: /*00 packet not received*/
                             if ( i + k < pkt_count )
                             {
                                 wmem_strbuf_append(status, " NR |");
                                 pkt_seq_num++;
                             }
                             else
                             {
                                 /*padding*/
                                 wmem_strbuf_append(status, " __ |");
                             }
                             break;
 
                         case 1: /*01 Packet received, small delta*/
+                            if (delta_index >= pkt_count) {
+                                /* Malformed packet (too many status packets). */
+                                proto_tree_add_expert(pkt_chunk_tree, pinfo, &ei_rtcp_rtpfb_transportcc_bad, tvb, offset, 2);
+                                offset += 2;
+                                return offset;
+                            }
                             wmem_strbuf_append(status, " SD |");
                             delta_array[delta_index] = 1;
                             pkt_seq_array[delta_index] = pkt_seq_num++;
                             delta_index++;
                             break;
 
                         case 2: /*10 Packet received, large or negative delta*/
+                            if (delta_index >= pkt_count) {
+                                /* Malformed packet (too many status packets). */
+                                proto_tree_add_expert(pkt_chunk_tree, pinfo, &ei_rtcp_rtpfb_transportcc_bad, tvb, offset, 2);
+                                offset += 2;
+                                return offset;
+                            }
                             wmem_strbuf_append(status, " LD |");
                             delta_array[delta_index] = 2;
                             pkt_seq_array[delta_index] = pkt_seq_num++;
                             delta_index++;
                             break;
 
                         case 3: /*11 packet received, w/o(wrong? overflow?) timestamp*/
                         default:
                             /*TODO: process overflow status which is not details on draft.*/
                             wmem_strbuf_append(status, " WO |");
                             pkt_seq_num++;
                             break;
 
                     }
                 }
 
                 proto_item_append_text( item, " [2 bits Status Vector Chunk]: %s", wmem_strbuf_get_str(status));
                 i += chunk_count;
             }
 
         }
 
         offset += 2;
     }
 
     /* recv delta */
     recv_delta_tree = proto_tree_add_subtree_format( fci_tree, tvb, offset, 0, ett_ssrc, NULL, "Recv Delta" );
     for (i = 0; i < pkt_count; i++ )
     {
         if ( delta_array[i] == 1 )
         {
             /*1 byte delta*/
             guint32 delta;
             item = proto_tree_add_item_ret_uint( recv_delta_tree, hf_rtcp_rtpfb_transport_cc_fci_recv_delta_1_byte, tvb, offset, 1, ENC_BIG_ENDIAN, &delta );
 
             proto_item_append_text( item, " Small Delta: [seq: %d] %lf ms", pkt_seq_array[i], delta*250.0/1000);
 
             offset += 1;
         }
         else if ( delta_array[i] == 2 )
         {
             /*2 bytes delta*/
             gint16 delta;
             item = proto_tree_add_item( recv_delta_tree, hf_rtcp_rtpfb_transport_cc_fci_recv_delta_2_bytes, tvb, offset, 2, ENC_BIG_ENDIAN);
             delta = tvb_get_ntohs(tvb, offset);
 
             if ( delta < 0 )
             {
                 proto_item_append_text( item, " Negative Delta: [seq: %d] %lf ms", pkt_seq_array[i], delta*250.0/1000 );
             }
             else
             {
                 proto_item_append_text( item, " Large Delta: [seq: %d] %lf ms", pkt_seq_array[i], delta*250.0/1000 );
             }
 
             offset += 2;
         }
         else
         {
             /*End with 0*/
             break;
         }
     }
 
     /* padding */
     padding_length = fci_length - (offset - padding_length);
     if ( padding_length > 0 )
     {
         proto_tree_add_item( recv_delta_tree, hf_rtcp_rtpfb_transport_cc_fci_recv_delta_padding, tvb, offset, padding_length, ENC_BIG_ENDIAN );
         offset += padding_length;
     }
 
     /* delta_array / pkt_seq_array will be freed out of wmem_packet_scope*/
     delta_array = NULL;
     pkt_seq_array = NULL;
 
     return offset;
 }
@@ -1402,62 +1418,62 @@ static int
 dissect_rtcp_rtpfb( tvbuff_t *tvb, int offset, proto_tree *rtcp_tree, proto_item *top_item, packet_info *pinfo )
 {
     unsigned int counter;
     unsigned int rtcp_rtpfb_fmt;
     int          packet_length;
     int          start_offset   = offset;
 
     /* Transport layer FB message */
     /* Feedback message type (FMT): 5 bits */
     proto_tree_add_item( rtcp_tree, hf_rtcp_rtpfb_fmt, tvb, offset, 1, ENC_BIG_ENDIAN );
     rtcp_rtpfb_fmt = (tvb_get_guint8(tvb, offset) & 0x1f);
     offset++;
 
     /* Packet type, 8 bits */
     proto_tree_add_item( rtcp_tree, hf_rtcp_pt, tvb, offset, 1, ENC_BIG_ENDIAN );
     offset++;
 
     /* Packet length in 32 bit words MINUS one, 16 bits */
     packet_length = (tvb_get_ntohs(tvb, offset) + 1) * 4;
     offset = dissect_rtcp_length_field(rtcp_tree, tvb, offset);
 
     /* SSRC of packet sender, 32 bits */
     proto_tree_add_item( rtcp_tree, hf_rtcp_ssrc_sender, tvb, offset, 4, ENC_BIG_ENDIAN );
     offset += 4;
 
     /* SSRC of media source, 32 bits */
     proto_tree_add_item( rtcp_tree, hf_rtcp_ssrc_media_source, tvb, offset, 4, ENC_BIG_ENDIAN );
     offset += 4;
 
     /* Check if we have a type specific dissector,
      * if we do, just return from here
      */
     if (packet_length > 12) {
       tvbuff_t *subtvb = tvb_new_subset_length(tvb, offset, packet_length - 12);
 
       if (dissector_try_uint (rtcp_rtpfb_dissector_table, rtcp_rtpfb_fmt,
               subtvb, pinfo, rtcp_tree))
         return start_offset + packet_length;
     }
 
     /* Transport-Layer Feedback Message Elements */
     counter = 0;
     while ((offset - start_offset) < packet_length) {
       counter++;
       if (rtcp_rtpfb_fmt == 1) {
         offset = dissect_rtcp_rtpfb_nack(tvb, offset, rtcp_tree, top_item);
       } else if (rtcp_rtpfb_fmt == 3) {
         offset = dissect_rtcp_rtpfb_tmmbr(tvb, offset, rtcp_tree, top_item, counter, 0);
       } else if (rtcp_rtpfb_fmt == 4) {
         offset = dissect_rtcp_rtpfb_tmmbr(tvb, offset, rtcp_tree, top_item, counter, 1);
       } else if (rtcp_rtpfb_fmt == 15) {
         /* Handle transport-cc (RTP Extensions for Transport-wide Congestion Control) - https://tools.ietf.org/html/draft-holmer-rmcat-transport-wide-cc-extensions-01 */
-        offset = dissect_rtcp_rtpfb_transport_cc( tvb, offset, rtcp_tree, packet_length);
+        offset = dissect_rtcp_rtpfb_transport_cc( tvb, offset, pinfo, rtcp_tree, packet_length);
       } else {
         /* Unknown FMT */
         proto_tree_add_item(rtcp_tree, hf_rtcp_fci, tvb, offset, start_offset + packet_length - offset, ENC_NA );
         offset = start_offset + packet_length;
       }
     }
 
     return offset;
 }
@@ -3845,3031 +3861,3032 @@ void
 proto_register_rtcp(void)
 {
     static hf_register_info hf[] = {
         {
             &hf_rtcp_version,
             {
                 "Version",
                 "rtcp.version",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_version_vals),
                 0xC0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_padding,
             {
                 "Padding",
                 "rtcp.padding",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x20,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_rc,
             {
                 "Reception report count",
                 "rtcp.rc",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x1F,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_sc,
             {
                 "Source count",
                 "rtcp.sc",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x1F,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pt,
             {
                 "Packet type",
                 "rtcp.pt",
                 FT_UINT8,
                 BASE_DEC,
                 VALS( rtcp_packet_type_vals ),
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_length,
             {
                 "Length",
                 "rtcp.length",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 "32-bit words (-1) in packet", HFILL
             }
         },
         {
             &hf_rtcp_ssrc_sender,
             {
                 "Sender SSRC",
                 "rtcp.senderssrc",
                 FT_UINT32,
                 BASE_HEX_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
       &hf_rtcp_ssrc_media_source,
             {
                 "Media source SSRC",
                 "rtcp.mediassrc",
                 FT_UINT32,
                 BASE_HEX_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_ntp_msw,
             {
                 "Timestamp, MSW",
                 "rtcp.timestamp.ntp.msw",
                 FT_UINT32,
                 BASE_DEC_HEX,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_ntp_lsw,
             {
                 "Timestamp, LSW",
                 "rtcp.timestamp.ntp.lsw",
                 FT_UINT32,
                 BASE_DEC_HEX,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_ntp,
             {
                 "MSW and LSW as NTP timestamp",
                 "rtcp.timestamp.ntp",
                 FT_ABSOLUTE_TIME,
                 ABSOLUTE_TIME_UTC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_rtp_timestamp,
             {
                 "RTP timestamp",
                 "rtcp.timestamp.rtp",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_sender_pkt_cnt,
             {
                 "Sender's packet count",
                 "rtcp.sender.packetcount",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_sender_oct_cnt,
             {
                 "Sender's octet count",
                 "rtcp.sender.octetcount",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_ssrc_source,
             {
                 "Identifier",
                 "rtcp.ssrc.identifier",
                 FT_UINT32,
                 BASE_HEX_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_ssrc_fraction,
             {
                 "Fraction lost",
                 "rtcp.ssrc.fraction",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_ssrc_cum_nr,
             {
                 "Cumulative number of packets lost",
                 "rtcp.ssrc.cum_nr",
                 FT_INT24,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_ssrc_ext_high_seq,
             {
                 "Extended highest sequence number received",
                 "rtcp.ssrc.ext_high",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_ssrc_high_seq,
             {
                 "Highest sequence number received",
                 "rtcp.ssrc.high_seq",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_ssrc_high_cycles,
             {
                 "Sequence number cycles count",
                 "rtcp.ssrc.high_cycles",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_ssrc_jitter,
             {
                 "Interarrival jitter",
                 "rtcp.ssrc.jitter",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_ssrc_lsr,
             {
                 "Last SR timestamp",
                 "rtcp.ssrc.lsr",
                 FT_UINT32,
                 BASE_DEC_HEX,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_ssrc_dlsr,
             {
                 "Delay since last SR timestamp",
                 "rtcp.ssrc.dlsr",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
 #if 0
         {
             &hf_rtcp_ssrc_csrc,
             {
                 "SSRC / CSRC identifier",
                 "rtcp.sdes.ssrc_csrc",
                 FT_UINT32,
                 BASE_HEX_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
 #endif
         {
             &hf_rtcp_sdes_type,
             {
                 "Type",
                 "rtcp.sdes.type",
                 FT_UINT8,
                 BASE_DEC,
                 VALS( rtcp_sdes_type_vals ),
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_sdes_length,
             {
                 "Length",
                 "rtcp.sdes.length",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_sdes_text,
             {
                 "Text",
                 "rtcp.sdes.text",
                 FT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_sdes_prefix_len,
             {
                 "Prefix length",
                 "rtcp.sdes.prefix.length",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_sdes_prefix_string,
             {
                 "Prefix string",
                 "rtcp.sdes.prefix.string",
                 FT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_subtype,
             {
                 "Subtype",
                 "rtcp.app.subtype",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_name_ascii,
             {
                 "Name (ASCII)",
                 "rtcp.app.name",
                 FT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_data,
             {
                 "Application specific data",
                 "rtcp.app.data",
                 FT_BYTES,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1,
             {
                 "PoC1 Application specific data",
                 "rtcp.app.poc1",
                 FT_NONE,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_subtype,
             {
                 "Subtype",
                 "rtcp.app.PoC1.subtype",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_app_poc1_floor_cnt_type_vals),
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_sip_uri,
             {
                 "SIP URI",
                 "rtcp.app.poc1.sip.uri",
                 FT_UINT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_disp_name,
             {
                 "Display Name",
                 "rtcp.app.poc1.disp.name",
                 FT_UINT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_priority,
             {
                 "Priority",
                 "rtcp.app.poc1.priority",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_app_poc1_qsresp_priority_vals),
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_request_ts,
             {
                 "Talk Burst Request Timestamp",
                 "rtcp.app.poc1.request.ts",
                 FT_ABSOLUTE_TIME,
                 ABSOLUTE_TIME_UTC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_stt,
             {
                 "Stop talking timer",
                 "rtcp.app.poc1.stt",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_partic,
             {
                 "Number of participants",
                 "rtcp.app.poc1.participants",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_ssrc_granted,
             {
                 "SSRC of client granted permission to talk",
                 "rtcp.app.poc1.ssrc.granted",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_last_pkt_seq_no,
             {
                 "Sequence number of last RTP packet",
                 "rtcp.app.poc1.last.pkt.seq.no",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_ignore_seq_no,
             {
                 "Ignore sequence number field",
                 "rtcp.app.poc1.ignore.seq.no",
                 FT_UINT16,
                 BASE_HEX,
                 NULL,
                 0x8000,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_reason_code1,
             {
                 "Reason code",
                 "rtcp.app.poc1.reason.code",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_app_poc1_reason_code1_vals),
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_reason1_phrase,
             {
                 "Reason Phrase",
                 "rtcp.app.poc1.reason.phrase",
                 FT_UINT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_reason_code2,
             {
                 "Reason code",
                 "rtcp.app.poc1.reason.code",
                 FT_UINT16,
                 BASE_DEC,
                 VALS(rtcp_app_poc1_reason_code2_vals),
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_new_time_request,
             {
                 "New time client can request (seconds)",
                 "rtcp.app.poc1.new.time.request",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 "Time in seconds client can request for", HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_ack_subtype,
             {
                 "Subtype",
                 "rtcp.app.poc1.ack.subtype",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_app_poc1_floor_cnt_type_vals),
                 0xf8,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_ack_reason_code,
             {
                 "Reason code",
                 "rtcp.app.poc1.ack.reason.code",
                 FT_UINT16,
                 BASE_DEC,
                 VALS(rtcp_app_poc1_reason_code_ack_vals),
                 0x07ff,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_qsresp_priority,
             {
                 "Priority",
                 "rtcp.app.poc1.qsresp.priority",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_app_poc1_qsresp_priority_vals),
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_qsresp_position,
             {
                 "Position (number of clients ahead)",
                 "rtcp.app.poc1.qsresp.position",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_conn_content[0],
             {
                 "Identity of inviting client",
                 "rtcp.app.poc1.conn.content.a.id",
                 FT_BOOLEAN,
                 16,
                 NULL,
                 0x8000,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_conn_content[1],
             {
                 "Nick name of inviting client",
                 "rtcp.app.poc1.conn.content.a.dn",
                 FT_BOOLEAN,
                 16,
                 NULL,
                 0x4000,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_conn_content[2],
             {
                 "Session identity",
                 "rtcp.app.poc1.conn.content.sess.id",
                 FT_BOOLEAN,
                 16,
                 NULL,
                 0x2000,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_conn_content[3],
             {
                 "Group name",
                 "rtcp.app.poc1.conn.content.grp.dn",
                 FT_BOOLEAN,
                 16,
                 NULL,
                 0x1000,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_conn_content[4],
             {
                 "Group identity",
                 "rtcp.app.poc1.conn.content.grp.id",
                 FT_BOOLEAN,
                 16,
                 NULL,
                 0x0800,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_conn_session_type,
             {
                 "Session type",
                 "rtcp.app.poc1.conn.session.type",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_app_poc1_conn_sess_type_vals),
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_conn_add_ind_mao,
             {
                 "Manual answer override",
                 "rtcp.app.poc1.conn.add.ind.mao",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x80,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_conn_sdes_items[0],
             {
                 "Identity of inviting client",
                 "rtcp.app.poc1.conn.sdes.a.id",
                 FT_UINT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_conn_sdes_items[1],
             {
                 "Nick name of inviting client",
                 "rtcp.app.poc1.conn.sdes.a.dn",
                 FT_UINT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_conn_sdes_items[2],
             {
                 "Session identity",
                 "rtcp.app.poc1.conn.sdes.sess.id",
                 FT_UINT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_conn_sdes_items[3],
             {
                 "Group Name",
                 "rtcp.app.poc1.conn.sdes.grp.dn",
                 FT_UINT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_poc1_conn_sdes_items[4],
             {
                 "Group identity",
                 "rtcp.app.poc1.conn.sdes.grp.id",
                 FT_UINT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_mux,
             {
                 "RtpMux Application specific data",
                 "rtcp.app.mux",
                 FT_NONE,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_mux_mux,
             {
                 "Multiplexing supported",
                 "rtcp.app.mux.mux",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x80,
                 NULL, HFILL
             }
                 },
         {
             &hf_rtcp_app_mux_cp,
             {
                 "Header compression supported",
                 "rtcp.app.mux.cp",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x40,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_app_mux_selection,
             {
                 "Multiplexing selection",
                 "rtcp.app.mux.selection",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_app_mux_selection_vals),
                 0x30,
                 NULL, HFILL
             }
         },
                 {
                     &hf_rtcp_app_mux_localmuxport,
             {
                 "Local Mux Port",
                 "rtcp.app.mux.muxport",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_fsn,
             {
                 "First sequence number",
                 "rtcp.nack.fsn",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_blp,
             {
                 "Bitmask of following lost packets",
                 "rtcp.nack.blp",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_padding_count,
             {
                 "Padding count",
                 "rtcp.padding.count",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_padding_data,
             {
                 "Padding data",
                 "rtcp.padding.data",
                 FT_BYTES,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_profile_specific_extension_type,
             {
                 "Extension Type",
                 "rtcp.profile-specific-extension.type",
                 FT_UINT16,
                 BASE_DEC,
                 VALS( rtcp_ms_profile_extension_vals ),
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_profile_specific_extension_length,
             {
                 "Extension Length",
                 "rtcp.profile-specific-extension.length",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_profile_specific_extension,
             {
                 "Profile-specific extension",
                 "rtcp.profile-specific-extension",
                 FT_BYTES,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_setup,
             {
                 "Stream setup",
                 "rtcp.setup",
                 FT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 "Stream setup, method and frame number", HFILL
             }
         },
         {
             &hf_rtcp_setup_frame,
             {
                 "Setup frame",
                 "rtcp.setup-frame",
                 FT_FRAMENUM,
                 BASE_NONE,
                 NULL,
                 0x0,
                 "Frame that set up this stream", HFILL
             }
         },
         {
             &hf_rtcp_setup_method,
             {
                 "Setup Method",
                 "rtcp.setup-method",
                 FT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 "Method used to set up this stream", HFILL
             }
         },
         {
             &hf_rtcp_last_sr_timestamp_frame,
             {
                 "Frame matching Last SR timestamp",
                 "rtcp.lsr-frame",
                 FT_FRAMENUM,
                 BASE_NONE,
                 NULL,
                 0x0,
                 "Frame matching LSR field (used to calculate roundtrip delay)", HFILL
             }
         },
         {
             &hf_rtcp_time_since_last_sr,
             {
                 "Time since Last SR captured",
                 "rtcp.lsr-frame-captured",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 "Time since frame matching LSR field was captured", HFILL
             }
         },
         {
             &hf_rtcp_roundtrip_delay,
             {
                 "Roundtrip Delay(ms)",
                 "rtcp.roundtrip-delay",
                 FT_INT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 "Calculated roundtrip delay in ms", HFILL
             }
         },
         {
             &hf_rtcp_xr_block_type,
             {
                 "Type",
                 "rtcp.xr.bt",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_xr_type_vals),
                 0x0,
                 "Block Type", HFILL
             }
         },
         {
             &hf_rtcp_xr_block_specific,
             {
                 "Type Specific",
                 "rtcp.xr.bs",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 "Reserved", HFILL
             }
         },
         {
             &hf_rtcp_xr_block_length,
             {
                 "Length",
                 "rtcp.xr.bl",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 "Block Length", HFILL
             }
         },
         {
             &hf_rtcp_ssrc_discarded,
             {
                 "Fraction discarded",
                 "rtcp.ssrc.discarded",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 "Discard Rate", HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_burst_density,
             {
                 "Burst Density",
                 "rtcp.xr.voipmetrics.burstdensity",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_gap_density,
             {
                 "Gap Density",
                 "rtcp.xr.voipmetrics.gapdensity",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_burst_duration,
             {
                 "Burst Duration(ms)",
                 "rtcp.xr.voipmetrics.burstduration",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_gap_duration,
             {
                 "Gap Duration(ms)",
                 "rtcp.xr.voipmetrics.gapduration",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_rtdelay,
             {
                 "Round Trip Delay(ms)",
                 "rtcp.xr.voipmetrics.rtdelay",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_esdelay,
             {
                 "End System Delay(ms)",
                 "rtcp.xr.voipmetrics.esdelay",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_siglevel,
             {
                 "Signal Level",
                 "rtcp.xr.voipmetrics.signallevel",
                 FT_INT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_noiselevel,
             {
                 "Noise Level",
                 "rtcp.xr.voipmetrics.noiselevel",
                 FT_INT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_rerl,
             {
                 "Residual Echo Return Loss",
                 "rtcp.xr.voipmetrics.rerl",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_gmin,
             {
                 "Gmin",
                 "rtcp.xr.voipmetrics.gmin",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_rfactor,
             {
                 "R Factor",
                 "rtcp.xr.voipmetrics.rfactor",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 "R Factor is in the range of 0 to 100", HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_extrfactor,
             {
                 "External R Factor",
                 "rtcp.xr.voipmetrics.extrfactor",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 "R Factor is in the range of 0 to 100", HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_moslq,
             {
                 "MOS - Listening Quality",
                 "rtcp.xr.voipmetrics.moslq",
                 FT_FLOAT,
                 BASE_NONE,
                 NULL,
                 0x0,
                 "MOS is in the range of 1 to 5", HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_moscq,
             {
                 "MOS - Conversational Quality",
                 "rtcp.xr.voipmetrics.moscq",
                 FT_FLOAT,
                 BASE_NONE,
                 NULL,
                 0x0,
                 "MOS is in the range of 1 to 5", HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_plc,
             {
                 "Packet Loss Concealment Algorithm",
                 "rtcp.xr.voipmetrics.plc",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_xr_plc_algo_vals),
                 0xC0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_jbadaptive,
             {
                 "Adaptive Jitter Buffer Algorithm",
                 "rtcp.xr.voipmetrics.jba",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_xr_jb_adaptive_vals),
                 0x30,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_jbrate,
             {
                 "Jitter Buffer Rate",
                 "rtcp.xr.voipmetrics.jbrate",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0F,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_jbnominal,
             {
                 "Nominal Jitter Buffer Size",
                 "rtcp.xr.voipmetrics.jbnominal",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_jbmax,
             {
                 "Maximum Jitter Buffer Size",
                 "rtcp.xr.voipmetrics.jbmax",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_voip_metrics_jbabsmax,
             {
                 "Absolute Maximum Jitter Buffer Size",
                 "rtcp.xr.voipmetrics.jbabsmax",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_thinning,
             {
                 "Thinning factor",
                 "rtcp.xr.tf",
                 FT_UINT8,
                 BASE_DEC,
                                 NULL,
                 0x0F,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_stats_loss_flag,
             {
                 "Loss Report Flag",
                 "rtcp.xr.stats.lrflag",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x80,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_stats_dup_flag,
             {
                 "Duplicates Report Flag",
                 "rtcp.xr.stats.dupflag",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x40,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_stats_jitter_flag,
             {
                 "Jitter Report Flag",
                 "rtcp.xr.stats.jitterflag",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x20,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_stats_ttl,
             {
                 "TTL or Hop Limit Flag",
                 "rtcp.xr.stats.ttl",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_xr_ip_ttl_vals),
                 0x18,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_endseq,
             {
                 "End Sequence Number",
                 "rtcp.xr.endseq",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_chunk_null_terminator,
             {
                 "Null Terminator",
                 "rtcp.xr.chunk.null_terminator",
                 FT_NONE,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_chunk_length,
             {
                 "Check length",
                 "rtcp.xr.chunk.length",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_chunk_bit_vector,
             {
                 "Bit Vector",
                 "rtcp.xr.chunk.bit_vector",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
 
         {
             &hf_rtcp_xr_beginseq,
             {
                 "Begin Sequence Number",
                 "rtcp.xr.beginseq",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_receipt_time_seq,
             {
                 "Receipt Time",
                 "rtcp.xr.receipt_time_seq",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_stats_lost,
             {
                 "Lost Packets",
                 "rtcp.xr.stats.lost",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_stats_dups,
             {
                 "Duplicate Packets",
                 "rtcp.xr.stats.dups",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_stats_minjitter,
             {
                 "Minimum Jitter",
                 "rtcp.xr.stats.minjitter",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_stats_maxjitter,
             {
                 "Maximum Jitter",
                 "rtcp.xr.stats.maxjitter",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_stats_meanjitter,
             {
                 "Mean Jitter",
                 "rtcp.xr.stats.meanjitter",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_stats_devjitter,
             {
                 "Standard Deviation of Jitter",
                 "rtcp.xr.stats.devjitter",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_stats_minttl,
             {
                 "Minimum TTL or Hop Limit",
                 "rtcp.xr.stats.minttl",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_stats_maxttl,
             {
                 "Maximum TTL or Hop Limit",
                 "rtcp.xr.stats.maxttl",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_stats_meanttl,
             {
                 "Mean TTL or Hop Limit",
                 "rtcp.xr.stats.meanttl",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_stats_devttl,
             {
                 "Standard Deviation of TTL",
                 "rtcp.xr.stats.devttl",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_timestamp,
             {
                 "Timestamp",
                 "rtcp.xr.timestamp",
                 FT_ABSOLUTE_TIME,
                 ABSOLUTE_TIME_UTC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_lrr,
             {
                 "Last RR timestamp",
                 "rtcp.xr.lrr",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_dlrr,
             {
                 "Delay since last RR timestamp",
                 "rtcp.xr.dlrr",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_length_check,
             {
                 "RTCP frame length check",
                 "rtcp.length_check",
                 FT_BOOLEAN,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_rtpfb_fmt,
             {
                 "RTCP Feedback message type (FMT)",
                 "rtcp.rtpfb.fmt",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_rtpfb_fmt_vals),
                 0x1f,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_fmt,
             {
                 "RTCP Feedback message type (FMT)",
                 "rtcp.psfb.fmt",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_psfb_fmt_vals),
                 0x1f,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_rtpfb_nack_pid,
             {
                 "RTCP Transport Feedback NACK PID",
                 "rtcp.rtpfb.nack_pid",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_rtpfb_nack_blp,
             {
                 "RTCP Transport Feedback NACK BLP",
                 "rtcp.rtpfb.nack_blp",
                 FT_UINT16,
                 BASE_HEX,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_fci,
             {
                 "Feedback Control Information (FCI)",
                 "rtcp.fci",
                 FT_BYTES,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_idms_spst,
             {
                 "Syncronization Packet Sender Type",
                 "rtcp.xr.idms.spst",
                 FT_UINT8,
                 BASE_DEC,
                 VALS(rtcp_xr_idms_spst),
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_idms_pt,
             {
                 "Payload Type",
                 "rtcp.xr.idms.pt",
                 FT_UINT8,
                 BASE_DEC,
                                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_idms_msci,
             {
                 "Media Stream Correlation Identifier",
                 "rtcp.xr.idms.msci",
                 FT_UINT32,
                 BASE_DEC,
                                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_idms_source_ssrc,
             {
                 "Source SSRC",
                 "rtcp.xr.idms.source_ssrc",
                 FT_UINT32,
                 BASE_DEC,
                                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_idms_ntp_rcv_ts,
             {
                 "NTP Timestamp of packet reception",
                 "rtcp.xr.idms.ntp_rcv_ts",
                 FT_ABSOLUTE_TIME,
                 ABSOLUTE_TIME_UTC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_idms_rtp_ts,
             {
                 "RTP Timestamp of packet",
                 "rtcp.xr.idms.rtp_ts",
                 FT_UINT32,
                 BASE_DEC,
                                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_idms_ntp_pres_ts,
             {
                 "NTP Timestamp of presentation",
                 "rtcp.xr.idms.ntp_pres_ts",
                 FT_UINT32,
                 BASE_DEC,
                                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
     {
       &hf_rtcp_psfb_fir_fci_ssrc,
             {
                 "SSRC",
                 "rtcp.psfb.fir.fci.ssrc",
                 FT_UINT32,
                 BASE_HEX_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
     {
       &hf_rtcp_psfb_fir_fci_csn,
             {
                 "Command Sequence Number",
                 "rtcp.psfb.fir.fci.csn",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
     {
       &hf_rtcp_psfb_fir_fci_reserved,
             {
                 "Reserved",
                 "rtcp.psfb.fir.fci.reserved",
                 FT_UINT24,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
     {
             &hf_rtcp_psfb_sli_first,
             {
                 "First MB",
                 "rtcp.psfb.fir.sli.first",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0xFFF80000,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_sli_number,
             {
                 "Number of MBs",
                 "rtcp.psfb.fir.sli.number",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0007FFC0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_sli_picture_id,
             {
                 "Picture ID",
                 "rtcp.psfb.fir.sli.picture_id",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0007FFC0,
                 NULL, HFILL
             }
         },
         {
       &hf_rtcp_psfb_remb_fci_identifier,
             {
                 "Unique Identifier",
                 "rtcp.psfb.remb.identifier",
                 FT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
     {
       &hf_rtcp_psfb_remb_fci_ssrc,
             {
                 "SSRC",
                 "rtcp.psfb.remb.fci.ssrc",
                 FT_UINT32,
                 BASE_HEX_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
     {
       &hf_rtcp_psfb_remb_fci_number_ssrcs,
             {
                 "Number of Ssrcs",
                 "rtcp.psfb.remb.fci.number_ssrcs",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0xff,
                 NULL, HFILL
             }
         },
     {
       &hf_rtcp_psfb_remb_fci_exp,
             {
                 "BR Exp",
                 "rtcp.psfb.remb.fci.br_exp",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0xfc,
                 NULL, HFILL
             }
         },
     {
       &hf_rtcp_psfb_remb_fci_mantissa,
             {
                 "Br Mantissa",
                 "rtcp.psfb.remb.fci.br_mantissa",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x03ffff,
                 NULL, HFILL
             }
         },
     {
       &hf_rtcp_psfb_remb_fci_bitrate,
             {
                 "Maximum bit rate",
                 "rtcp.psfb.remb.fci.bitrate",
                 FT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
     {
       &hf_rtcp_rtpfb_tmbbr_fci_ssrc,
             {
                 "SSRC",
                 "rtcp.rtpfb.tmmbr.fci.ssrc",
                 FT_UINT32,
                 BASE_HEX_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
     {
       &hf_rtcp_rtpfb_tmbbr_fci_exp,
             {
                 "MxTBR Exp",
                 "rtcp.rtpfb.tmmbr.fci.exp",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0xfc,
                 NULL, HFILL
             }
         },
     {
       &hf_rtcp_rtpfb_tmbbr_fci_mantissa,
             {
                 "MxTBR Mantissa",
                 "rtcp.rtpfb.tmmbr.fci.mantissa",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x3fffe,
                 NULL, HFILL
             }
         },
     {
       &hf_rtcp_rtpfb_tmbbr_fci_bitrate,
             {
                 "Maximum total media bit rate",
                 "rtcp.rtpfb.tmmbr.fci.bitrate",
                 FT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
     {
       &hf_rtcp_rtpfb_tmbbr_fci_measuredoverhead,
             {
                 "Measured Overhead",
                 "rtcp.rtpfb.tmmbr.fci.measuredoverhead",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x1ff,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_rtpfb_transport_cc_fci_base_seq,
             {
                 "Base Sequence Number",
                 "rtcp.rtpfb.transportcc.baseseq",
                 FT_UINT16,
                 BASE_DEC_HEX,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_rtpfb_transport_cc_fci_pkt_stats_cnt,
             {
                 "Packet Status Count",
                 "rtcp.rtpfb.transportcc.statuscount",
                 FT_UINT16,
                 BASE_DEC_HEX,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_rtpfb_transport_cc_fci_ref_time,
             {
                 "Reference Time",
                 "rtcp.rtpfb.transportcc.reftime",
                 FT_UINT24,
                 BASE_DEC_HEX,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_rtpfb_transport_cc_fci_fb_pkt_cnt,
             {
                 "Feedback Packets Count",
                 "rtcp.rtpfb.transportcc.pktcount",
                 FT_UINT8,
                 BASE_DEC_HEX,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_rtpfb_transport_cc_fci_pkt_chunk,
             {
                 "Packet Chunk",
                 "rtcp.rtpfb.transportcc.pktchunk",
                 FT_UINT16,
                 BASE_DEC_HEX,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_rtpfb_transport_cc_fci_recv_delta_1_byte,
             {
                 "Recv Delta",
                 "rtcp.rtpfb.transportcc.recv_delta",
                 FT_UINT8,
                 BASE_HEX,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_rtpfb_transport_cc_fci_recv_delta_2_bytes,
             {
                 "Recv Delta",
                 "rtcp.rtpfb.transportcc.recv_delta",
                 FT_UINT16,
                 BASE_HEX,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_rtpfb_transport_cc_fci_recv_delta_padding,
             {
                 "Recv Delta Padding",
                 "rtcp.rtpfb.transportcc.recv_delta.padding",
                 FT_UINT16,
                 BASE_HEX,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
 
 
         {
             &hf_srtcp_e,
             {
                 "SRTCP E flag",
                 "srtcp.e",
                 FT_BOOLEAN,
                 32,
                 NULL,
                 0x80000000,
                 "SRTCP Encryption Flag", HFILL
             }
         },
         {
             &hf_srtcp_index,
             {
                 "SRTCP Index",
                 "srtcp.index",
                 FT_UINT32,
                 BASE_DEC_HEX,
                 NULL,
                 0x7fffffff,
                 NULL, HFILL
             }
         },
         {
             &hf_srtcp_mki,
             {
                 "SRTCP MKI",
                 "srtcp.mki",
                 FT_BYTES,
                 BASE_NONE,
                 NULL,
                 0,
                 "SRTCP Master Key Index", HFILL
             }
         },
         {
             &hf_srtcp_auth_tag,
             {
                 "SRTCP Auth Tag",
                 "srtcp.auth_tag",
                 FT_BYTES,
                 BASE_NONE,
                 NULL,
                 0,
                 "SRTCP Authentication Tag", HFILL
             }
         },
         /* additions for BT XNQ block as defined in RFC5093 */
         {
             &hf_rtcp_xr_btxnq_begseq,
             {
                 "Starting sequence number",
                 "rtcp.xr.btxnq.begseq",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_btxnq_endseq,
             {
                 "Last sequence number",
                 "rtcp.xr.btxnq.endseq",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_btxnq_vmaxdiff,
             {
                 "Maximum IPDV difference in 1 cycle",
                 "rtcp.xr.btxnq.vmaxdiff",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_btxnq_vrange,
             {
                 "Maximum IPDV difference seen to date",
                 "rtcp.xr.btxnq.vrange",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_btxnq_vsum,
             {
                 "Sum of peak IPDV differences to date",
                 "rtcp.xr.btxnq.vsum",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_btxnq_cycles,
             {
                 "Number of cycles in calculation",
                 "rtcp.xr.btxnq.cycles",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_btxnq_jbevents,
             {
                 "Number of jitter buffer adaptations to date",
                 "rtcp.xr.btxnq.jbevents",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_btxnq_spare,
             {
                 "Spare/reserved bits",
                 "rtcp.xr.btxnq.spare",
                 FT_STRING,
                 BASE_NONE,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_btxnq_tdegnet,
             {
                 "Time degraded by packet loss or late delivery",
                 "rtcp.xr.btxnq.tdegnet",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_btxnq_tdegjit,
             {
                 "Time degraded by jitter buffer adaptation events",
                 "rtcp.xr.btxnq.tdegjit",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_btxnq_es,
             {
                 "ES due to unavailable packet events",
                 "rtcp.xr.btxnq.es",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_xr_btxnq_ses,
             {
                 "SES due to unavailable packet events",
                 "rtcp.xr.btxnq.ses",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         /* MS Profile Specific Extension Fields */
         {
             &hf_rtcp_pse_ms_bandwidth,
             {
                 "Bandwidth",
                 "rtcp.ms_pse.bandwidth",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_confidence_level,
             {
                 "Confidence Level",
                 "rtcp.ms_pse.confidence_level",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_seq_num,
             {
                 "Sequence Number",
                 "rtcp.ms_pse.seq_num",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_frame_resolution_width,
             {
                 "Frame Resolution Width",
                 "rtcp.ms_pse.frame_res_width",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_frame_resolution_height,
             {
                 "Frame Resolution Height",
                 "rtcp.ms_pse.frame_res_height",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_bitrate,
             {
                 "Bitrate",
                 "rtcp.ms_pse.bitrate",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_frame_rate,
             {
                 "Frame Rate",
                 "rtcp.ms_pse.frame_rate",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_concealed_frames,
             {
                 "Concealed Frames",
                 "rtcp.ms_pse.concealed_frames",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_stretched_frames,
             {
                 "Stretched Frames",
                 "rtcp.ms_pse.stretched_frames",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_compressed_frames,
             {
                 "Compressed Frames",
                 "rtcp.ms_pse.compressed_frames",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_total_frames,
             {
                 "Total Frames",
                 "rtcp.ms_pse.total_frames",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_receive_quality_state,
             {
                 "Received Quality State",
                 "rtcp.ms_pse.receive_quality_state",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_fec_distance_request,
             {
                 "FEC Distance Request",
                 "rtcp.ms_pse.fec_distance_request",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_last_packet_train,
             {
                 "Last Packet Train Flag",
                 "rtcp.ms_pse.last_packet_train",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x80,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_packet_idx,
             {
                 "Packet Index",
                 "rtcp.ms_pse.packet_index",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x7f,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_packet_cnt,
             {
                 "Packet Count",
                 "rtcp.ms_pse.packet_count",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x7f,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_packet_train_byte_cnt,
             {
                 "Packet Train Byte Count",
                 "rtcp.ms_pse.packet_train_byte_count",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_inbound_bandwidth,
             {
                 "Inbound Link Bandwidth",
                 "rtcp.ms_pse.inbound_bandwidth",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_outbound_bandwidth,
             {
                 "Outbound Link Bandwidth",
                 "rtcp.ms_pse.outbound_bandwidth",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_no_cache,
             {
                 "No Cache Flag",
                 "rtcp.ms_pse.no_cache",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x80,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_congestion_info,
             {
                 "Congestion Information",
                 "rtcp.ms_pse.congestion_info",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_pse_ms_modality,
             {
                 "Modality",
                 "rtcp.ms_pse.modality",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
 
         /* Microsoft PLI */
         {
             &hf_rtcp_psfb_pli_ms_request_id,
             {
                 "Request ID",
                 "rtcp.psfb.ms.pli.request_id",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_pli_ms_sfr,
             {
                 "Sync Frame Request",
                 "rtcp.psfb.ms.pli.sync_frame_request",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
 
         /* Microsoft Application Feedback Video Source Request */
         {
             &hf_rtcp_psfb_ms_type,
             {
                 "Application Layer Feedback Type",
                 "rtcp.psfb.ms.afb_type",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_length,
             {
                 "Length",
                 "rtcp.psfb.ms.length",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_msi,
             {
                 "Requested Media Source ID (MSI)",
                 "rtcp.psfb.ms.msi",
                 FT_UINT32,
                 BASE_HEX_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsr_request_id,
             {
                 "Request Id",
                 "rtcp.psfb.ms.vsr.request_id",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsr_version,
             {
                 "Version",
                 "rtcp.psfb.ms.vsr.version",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsr_key_frame_request,
             {
                 "Key Frame Request",
                 "rtcp.psfb.ms.vsr.key_frame_request",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x01,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsr_num_entries,
             {
                 "Number of Entries",
                 "rtcp.psfb.ms.vsr.num_entries",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsr_entry_length,
             {
                 "Entry Length",
                 "rtcp.psfb.ms.vsr.entry_length",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_payload_type,
             {
                 "Payload Type",
                 "rtcp.psfb.ms.vsr.entry.payload_type",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_ucconfig_mode,
             {
                 "UCConfig Mode",
                 "rtcp.psfb.ms.vsr.entry.ucconfig_mode",
                 FT_UINT8,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_no_sp_frames,
             {
                 "No support for SP Frames (RT only)",
                 "rtcp.psfb.ms.vsr.entry.no_sp_frames",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x04,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_baseline,
             {
                 "Only Supports Constrained Baseline (H.264 only)",
                 "rtcp.psfb.ms.vsr.entry.no_sp_baseline",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x02,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_cgs,
             {
                 "Supports CGS rewrite (H.264 only)",
                 "rtcp.psfb.ms.vsr.entry.cgs",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x01,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_aspect_ratio_bitmask,
             {
                 "Aspect Ratio Bitmask",
                 "rtcp.psfb.ms.vsr.entry.apsect_ratio",
                 FT_UINT8,
                 BASE_HEX,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_aspect_ratio_4by3,
             {
                 "Aspect Ratio 4 by 3",
                 "rtcp.psfb.ms.vsr.entry.apsect_ratio_4by3",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x01,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_aspect_ratio_16by9,
             {
                 "Aspect Ratio 16 by 9",
                 "rtcp.psfb.ms.vsr.entry.apsect_ratio_16by9",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x02,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_aspect_ratio_1by1,
             {
                 "Aspect Ratio 1 by 1",
                 "rtcp.psfb.ms.vsr.entry.apsect_ratio_1by1",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x04,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_aspect_ratio_3by4,
             {
                 "Aspect Ratio 3 by 4",
                 "rtcp.psfb.ms.vsr.entry.apsect_ratio_3by4",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x08,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_aspect_ratio_9by16,
             {
                 "Aspect Ratio 9 by 16",
                 "rtcp.psfb.ms.vsr.entry.apsect_ratio_9by16",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x10,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_aspect_ratio_20by3,
             {
                 "Aspect Ratio 20 by 3",
                 "rtcp.psfb.ms.vsr.entry.apsect_ratio_20by3",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x20,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_max_width,
             {
                 "Max Width",
                 "rtcp.psfb.ms.vsr.entry.max_width",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_max_height,
             {
                 "Max Height",
                 "rtcp.psfb.ms.vsr.entry.max_height",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_min_bitrate,
             {
                 "Min bit rate",
                 "rtcp.psfb.ms.vsr.entry.min_bitrate",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_bitrate_per_level,
             {
                 "Bit rate per level",
                 "rtcp.psfb.ms.vsr.entry.bitrate_per_level",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_bitrate_histogram,
             {
                 "Receiver Count",
                 "rtcp.psfb.ms.vsr.entry.bitrate_histogram",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_frame_rate_mask,
             {
                 "Frame rate mask",
                 "rtcp.psfb.ms.vsr.entry.frame_rate_mask",
                 FT_UINT32,
                 BASE_HEX,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_frame_rate_7_5,
             {
                 "7.5 fps",
                 "rtcp.psfb.ms.vsr.entry.frame_rate_7_5",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x01,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_frame_rate_12_5,
             {
                 "12.5 fps",
                 "rtcp.psfb.ms.vsr.entry.frame_rate_12_5",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x02,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_frame_rate_15,
             {
                 "15 fps",
                 "rtcp.psfb.ms.vsr.entry.frame_rate_15",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x04,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_frame_rate_25,
             {
                 "25 fps",
                 "rtcp.psfb.ms.vsr.entry.frame_rate_25",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x08,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_frame_rate_30,
             {
                 "30 fps",
                 "rtcp.psfb.ms.vsr.entry.frame_rate_30",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x10,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_frame_rate_50,
             {
                 "50 fps",
                 "rtcp.psfb.ms.vsr.entry.frame_rate_50",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x20,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_frame_rate_60,
             {
                 "60 fps",
                 "rtcp.psfb.ms.vsr.entry.frame_rate_60",
                 FT_BOOLEAN,
                 8,
                 NULL,
                 0x40,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_must_instances,
             {
                 "Number of MUST instances",
                 "rtcp.psfb.ms.vsr.entry.musts",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_may_instances,
             {
                 "Number of MAY instances",
                 "rtcp.psfb.ms.vsr.entry.mays",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_quality_histogram,
             {
                 "Receiver Count",
                 "rtcp.psfb.ms.vsr.entry.quality_histogram",
                 FT_UINT16,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
         {
             &hf_rtcp_psfb_ms_vsre_max_pixels,
             {
                 "Max Pixels per Frame",
                 "rtcp.psfb.ms.vsr.entry.max_pixels",
                 FT_UINT32,
                 BASE_DEC,
                 NULL,
                 0x0,
                 NULL, HFILL
             }
         },
 
     };
 
     static gint *ett[] =
     {
         &ett_rtcp,
         &ett_rtcp_sr,
         &ett_rtcp_rr,
         &ett_rtcp_sdes,
         &ett_rtcp_bye,
         &ett_rtcp_app,
         &ett_rtcp_rtpfb,
         &ett_rtcp_psfb,
         &ett_rtcp_xr,
         &ett_rtcp_fir,
         &ett_rtcp_nack,
         &ett_ssrc,
         &ett_ssrc_item,
         &ett_ssrc_ext_high,
         &ett_sdes,
         &ett_sdes_item,
         &ett_PoC1,
         &ett_mux,
         &ett_rtcp_setup,
         &ett_rtcp_roundtrip_delay,
         &ett_xr_block,
         &ett_xr_block_contents,
         &ett_xr_ssrc,
         &ett_xr_loss_chunk,
         &ett_poc1_conn_contents,
         &ett_rtcp_nack_blp,
         &ett_pse,
         &ett_ms_vsr,
         &ett_ms_vsr_entry,
         &ett_ms_ds
     };
 
     static ei_register_info ei[] = {
         { &ei_rtcp_bye_reason_not_padded, { "rtcp.bye_reason_not_padded", PI_MALFORMED, PI_WARN, "Reason string is not NULL padded (see RFC3550, section 6.6)", EXPFILL }},
         { &ei_rtcp_xr_block_length_bad, { "rtcp.invalid_block_length", PI_PROTOCOL, PI_WARN, "Invalid block length, should be 2", EXPFILL }},
         { &ei_rtcp_roundtrip_delay, { "rtcp.roundtrip-delay.expert", PI_SEQUENCE, PI_NOTE, "RTCP round-trip delay detected (%d ms)", EXPFILL }},
         { &ei_rtcp_roundtrip_delay_negative, { "rtcp.roundtrip-delay.negative", PI_SEQUENCE, PI_ERROR, "Negative RTCP round-trip delay detected (%d ms)", EXPFILL }},
         { &ei_rtcp_length_check, { "rtcp.length_check.bad", PI_MALFORMED, PI_WARN, "Incorrect RTCP packet length information (expected %u bytes, found %d)", EXPFILL }},
         { &ei_rtcp_psfb_ms_type, { "rtcp.psfb.ms.afb_type.unknown", PI_PROTOCOL, PI_WARN, "Unknown Application Layer Feedback Type", EXPFILL }},
         { &ei_rtcp_missing_sender_ssrc, { "rtcp.missing_sender_ssrc", PI_PROTOCOL, PI_WARN, "Missing Sender SSRC", EXPFILL }},
         { &ei_rtcp_missing_block_header, { "rtcp.missing_block_header", PI_PROTOCOL, PI_WARN, "Missing Required Block Headers", EXPFILL }},
         { &ei_rtcp_block_length, { "rtcp.block_length.invalid", PI_PROTOCOL, PI_WARN, "Block length is greater than packet length", EXPFILL }},
         { &ei_srtcp_encrypted_payload, { "srtcp.encrypted_payload", PI_UNDECODED, PI_WARN, "Encrypted RTCP Payload - not dissected", EXPFILL }},
+        { &ei_rtcp_rtpfb_transportcc_bad, { "rtcp.rtpfb.transportcc_bad", PI_MALFORMED, PI_WARN, "Too many packet chunks (more than packet status count)", EXPFILL }},
     };
 
     module_t *rtcp_module;
     expert_module_t* expert_rtcp;
 
     proto_rtcp = proto_register_protocol("Real-time Transport Control Protocol",
                                              "RTCP", "rtcp");
     proto_register_field_array(proto_rtcp, hf, array_length(hf));
     proto_register_subtree_array(ett, array_length(ett));
     expert_rtcp = expert_register_protocol(proto_rtcp);
     expert_register_field_array(expert_rtcp, ei, array_length(ei));
 
     rtcp_handle = register_dissector("rtcp", dissect_rtcp, proto_rtcp);
 
     rtcp_module = prefs_register_protocol(proto_rtcp, NULL);
 
     prefs_register_bool_preference(rtcp_module, "show_setup_info",
         "Show stream setup information",
         "Where available, show which protocol and frame caused "
         "this RTCP stream to be created",
         &global_rtcp_show_setup_info);
 
     prefs_register_obsolete_preference(rtcp_module, "heuristic_rtcp");
 
     prefs_register_bool_preference(rtcp_module, "show_roundtrip_calculation",
         "Show relative roundtrip calculations",
         "Try to work out network delay by comparing time between packets "
         "as captured and delays as seen by endpoint",
         &global_rtcp_show_roundtrip_calculation);
 
     prefs_register_uint_preference(rtcp_module, "roundtrip_min_threshhold",
         "Minimum roundtrip calculation to report (ms)",
         "Minimum (absolute) calculated roundtrip delay time in milliseconds that "
         "should be reported",
         10, &global_rtcp_show_roundtrip_calculation_minimum);
 
     /* Register table for sub-dissetors */
     rtcp_dissector_table = register_dissector_table("rtcp.app.name", "RTCP Application Name", proto_rtcp, FT_STRING, BASE_NONE);
     rtcp_psfb_dissector_table = register_dissector_table("rtcp.psfb.fmt", "RTCP Payload Specific Feedback Message Format", proto_rtcp, FT_UINT8, BASE_DEC);
     rtcp_rtpfb_dissector_table = register_dissector_table("rtcp.rtpfb.fmt", "RTCP Generic RTP Feedback Message Format", proto_rtcp, FT_UINT8, BASE_DEC);
 }
