commit 67be3708cc4dea9e03f5d0ce5b0214fff35748f2
Author: Albert Astals Cid <aacid@kde.org>
Date:   Thu May 24 23:29:55 2018 +0200

    SplashFTFont::makeGlyph: Fix use of uninitialized data
    
    caused by the bugfix to not divide by zero

diff --git a/splash/SplashFTFont.cc b/splash/SplashFTFont.cc
index 61339ef3..0b2b6afe 100644
--- a/splash/SplashFTFont.cc
+++ b/splash/SplashFTFont.cc
@@ -270,80 +270,84 @@ static FT_Int32 getFTLoadFlags(GBool type1, GBool trueType, GBool aa, GBool enab
 GBool SplashFTFont::makeGlyph(int c, int xFrac, int yFrac,
 			      SplashGlyphBitmap *bitmap, int x0, int y0, SplashClip *clip, SplashClipResult *clipRes) {
   SplashFTFontFile *ff;
   FT_Vector offset;
   FT_GlyphSlot slot;
   FT_UInt gid;
   int rowSize;
   Guchar *p, *q;
   int i;
 
+  if (unlikely(textScale == 0)) {
+    return gFalse;
+  }
+
   ff = (SplashFTFontFile *)fontFile;
 
   ff->face->size = sizeObj;
   offset.x = (FT_Pos)(int)((SplashCoord)xFrac * splashFontFractionMul * 64);
   offset.y = 0;
   FT_Set_Transform(ff->face, &matrix, &offset);
   slot = ff->face->glyph;
 
   if (ff->codeToGID && c < ff->codeToGIDLen && c >= 0) {
     gid = (FT_UInt)ff->codeToGID[c];
   } else {
     gid = (FT_UInt)c;
   }
 
   if (FT_Load_Glyph(ff->face, gid, getFTLoadFlags(ff->type1, ff->trueType, aa, enableFreeTypeHinting, enableSlightHinting))) {
     return gFalse;
   }
 
   // prelimirary values based on FT_Outline_Get_CBox
   // we add two pixels to each side to be in the safe side
   FT_BBox cbox;
   FT_Outline_Get_CBox(&ff->face->glyph->outline, &cbox);
   bitmap->x = -(cbox.xMin / 64) + 2;
   bitmap->y =  (cbox.yMax / 64) + 2;
   bitmap->w = ((cbox.xMax - cbox.xMin) / 64) + 4;
   bitmap->h = ((cbox.yMax - cbox.yMin) / 64) + 4;
 
   *clipRes = clip->testRect(x0 - bitmap->x,
                             y0 - bitmap->y,
                             x0 - bitmap->x + bitmap->w,
                             y0 - bitmap->y + bitmap->h);
   if (*clipRes == splashClipAllOutside) {
     bitmap->freeData = gFalse;
     return gTrue;
   }
 
   if (FT_Render_Glyph(slot, aa ? ft_render_mode_normal
 		               : ft_render_mode_mono)) {
     return gFalse;
   }
 
   if (slot->bitmap.width == 0 || slot->bitmap.rows == 0) {
     // this can happen if (a) the glyph is really tiny or (b) the
     // metrics in the TrueType file are broken
     return gFalse;
   }
 
   bitmap->x = -slot->bitmap_left;
   bitmap->y = slot->bitmap_top;
   bitmap->w = slot->bitmap.width;
   bitmap->h = slot->bitmap.rows;
   bitmap->aa = aa;
   if (aa) {
     rowSize = bitmap->w;
   } else {
     rowSize = (bitmap->w + 7) >> 3;
   }
   bitmap->data = (Guchar *)gmallocn_checkoverflow(rowSize, bitmap->h);
   if (!bitmap->data) {
     return gFalse;
   }
   bitmap->freeData = gTrue;
   for (i = 0, p = bitmap->data, q = slot->bitmap.buffer;
        i < bitmap->h;
        ++i, p += rowSize, q += slot->bitmap.pitch) {
     memcpy(p, q, rowSize);
   }
 
   return gTrue;
 }
