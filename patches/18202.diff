commit c96c5eac9a0467ffdb1cb67517702bf80d5a5277
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sun Oct 27 12:55:59 2019 -0400

    https://github.com/ImageMagick/ImageMagick/issues/1763

diff --git a/MagickCore/quantum-import.c b/MagickCore/quantum-import.c
index 99b298b85..ac255fdb3 100644
--- a/MagickCore/quantum-import.c
+++ b/MagickCore/quantum-import.c
@@ -123,39 +123,37 @@ static inline Quantum PushColormapIndex(const Image *image,const size_t index,
 static inline const unsigned char *PushDoublePixel(QuantumInfo *quantum_info,
   const unsigned char *magick_restrict pixels,double *pixel)
 {
   double
     *p;
 
   unsigned char
     quantum[8];
 
   if (quantum_info->endian == LSBEndian)
     {
       quantum[0]=(*pixels++);
       quantum[1]=(*pixels++);
       quantum[2]=(*pixels++);
       quantum[3]=(*pixels++);
       quantum[4]=(*pixels++);
       quantum[5]=(*pixels++);
       quantum[6]=(*pixels++);
       quantum[7]=(*pixels++);
-      p=(double *) quantum;
-      *pixel=(*p);
-      *pixel-=quantum_info->minimum;
-      *pixel*=quantum_info->scale;
-      return(pixels);
-    }
-  quantum[7]=(*pixels++);
-  quantum[6]=(*pixels++);
-  quantum[5]=(*pixels++);
-  quantum[4]=(*pixels++);
-  quantum[3]=(*pixels++);
-  quantum[2]=(*pixels++);
-  quantum[1]=(*pixels++);
-  quantum[0]=(*pixels++);
+    }
+  else
+    {
+      quantum[7]=(*pixels++);
+      quantum[6]=(*pixels++);
+      quantum[5]=(*pixels++);
+      quantum[4]=(*pixels++);
+      quantum[3]=(*pixels++);
+      quantum[2]=(*pixels++);
+      quantum[1]=(*pixels++);
+      quantum[0]=(*pixels++);
+    }
   p=(double *) quantum;
   *pixel=(*p);
   *pixel-=quantum_info->minimum;
   *pixel*=quantum_info->scale;
   return(pixels);
 }
@@ -163,33 +161,36 @@ static inline const unsigned char *PushDoublePixel(QuantumInfo *quantum_info,
 static inline const unsigned char *PushQuantumFloatPixel(
   QuantumInfo *quantum_info,const unsigned char *magick_restrict pixels,
   float *pixel)
 {
   float
     *p;
 
   unsigned char
     quantum[4];
 
   if (quantum_info->endian == LSBEndian)
     {
       quantum[0]=(*pixels++);
       quantum[1]=(*pixels++);
       quantum[2]=(*pixels++);
       quantum[3]=(*pixels++);
-      p=(float *) quantum;
-      *pixel=(*p);
-      *pixel-=quantum_info->minimum;
-      *pixel*=(float) quantum_info->scale;
-      return(pixels);
-    }
-  quantum[3]=(*pixels++);
-  quantum[2]=(*pixels++);
-  quantum[1]=(*pixels++);
-  quantum[0]=(*pixels++);
+     }
+   else
+     {
+       quantum[3]=(*pixels++);
+       quantum[2]=(*pixels++);
+       quantum[1]=(*pixels++);
+       quantum[0]=(*pixels++);
+     }
   p=(float *) quantum;
   *pixel=(*p);
   *pixel-=quantum_info->minimum;
   *pixel*=(float) quantum_info->scale;
+  if (*pixel < FLT_MIN)
+    *pixel=FLT_MIN;
+  else
+    if (*pixel > FLT_MAX)
+      *pixel=FLT_MAX;
   return(pixels);
 }
 
diff --git a/MagickCore/quantum.h b/MagickCore/quantum.h
index 34a661446..b76617d55 100644
--- a/MagickCore/quantum.h
+++ b/MagickCore/quantum.h
@@ -82,21 +82,17 @@ typedef enum
 typedef struct _QuantumInfo
   QuantumInfo;
 
-static inline Quantum ClampToQuantum(const MagickRealType value)
+static inline Quantum ClampToQuantum(const MagickRealType quantum)
 {
 #if defined(MAGICKCORE_HDRI_SUPPORT)
-  if (value < DBL_MIN)
-    return((Quantum) DBL_MIN);
-  if (value > DBL_MAX)
-    return((Quantum) DBL_MAX);
-  return((Quantum) value);
+  return((Quantum) quantum);
 #else
-  if (value <= 0.0f)
+  if (quantum <= 0.0f)
     return((Quantum) 0);
   if (value >= (MagickRealType) QuantumRange)
     return(QuantumRange);
-  return((Quantum) (value+0.5f));
+  return((Quantum) (quantum+0.5f));
 #endif
 }
 
 #if (MAGICKCORE_QUANTUM_DEPTH == 8)
