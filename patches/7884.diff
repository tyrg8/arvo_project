commit ab959c2235ab69359cdc75372c5cdf7bcc324726
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Wed Jun 20 20:32:11 2018 +0300

    ArwDecoder::GetWB(): slightly less broken handling of IFD decryption.
    
    1. We should only alloc off+len bytes for the new buffer,
       not the entire size of original IFD buffer
       Because we only decode [off, len).
       Otherwise we'd end up with uninitialized garbage at the end.
    2. We do not decode [0, off), thus that contains uninitialized garbage.
       Thus we should not allow IFD to point into that.

diff --git a/src/librawspeed/decoders/ArwDecoder.cpp b/src/librawspeed/decoders/ArwDecoder.cpp
index 8b671f77..ff973605 100644
--- a/src/librawspeed/decoders/ArwDecoder.cpp
+++ b/src/librawspeed/decoders/ArwDecoder.cpp
@@ -402,57 +402,63 @@ void ArwDecoder::SonyDecrypt(const uint32* ibuf, uint32* obuf, uint32 len,
 void ArwDecoder::GetWB() {
   // Set the whitebalance for all the modern ARW formats (everything after A100)
   if (mRootIFD->hasEntryRecursive(DNGPRIVATEDATA)) {
     NORangesSet<Buffer> ifds_undecoded;
 
     TiffEntry *priv = mRootIFD->getEntryRecursive(DNGPRIVATEDATA);
     TiffRootIFD makerNoteIFD(nullptr, &ifds_undecoded, priv->getRootIfdData(),
                              priv->getU32());
 
     TiffEntry *sony_offset = makerNoteIFD.getEntryRecursive(SONY_OFFSET);
     TiffEntry *sony_length = makerNoteIFD.getEntryRecursive(SONY_LENGTH);
     TiffEntry *sony_key = makerNoteIFD.getEntryRecursive(SONY_KEY);
     if(!sony_offset || !sony_length || !sony_key || sony_key->count != 4)
       ThrowRDE("couldn't find the correct metadata for WB decoding");
 
     assert(sony_offset != nullptr);
     uint32 off = sony_offset->getU32();
 
     assert(sony_length != nullptr);
     uint32 len = sony_length->getU32();
 
     assert(sony_key != nullptr);
     uint32 key = getU32LE(sony_key->getData(4));
 
     // "Decrypt" IFD
     const auto& ifd_crypt = priv->getRootIfdData();
-    auto ifd_size = ifd_crypt.getSize();
-    auto ifd_decoded = Buffer::Create(ifd_size);
+    const auto EncryptedBuffer = ifd_crypt.getSubView(off, len);
+    // We do have to prepend 'off' padding, because TIFF uses absolute offsets.
+    const auto DecryptedBufferSize = off + EncryptedBuffer.getSize();
+    auto DecryptedBuffer = Buffer::Create(DecryptedBufferSize);
 
-    SonyDecrypt(reinterpret_cast<const uint32*>(ifd_crypt.getData(off, len)),
-                reinterpret_cast<uint32*>(ifd_decoded.get() + off), len / 4,
+    SonyDecrypt(reinterpret_cast<const uint32*>(EncryptedBuffer.begin()),
+                reinterpret_cast<uint32*>(DecryptedBuffer.get() + off), len / 4,
                 key);
 
     NORangesSet<Buffer> ifds_decoded;
-    Buffer decIFD(move(ifd_decoded), ifd_size);
+    Buffer decIFD(std::move(DecryptedBuffer), DecryptedBufferSize);
+    const Buffer Padding(decIFD.getSubView(0, off));
+    // The Decrypted Root Ifd can not point to preceding padding buffer.
+    ifds_decoded.emplace(Padding);
+
     DataBuffer dbIDD(decIFD, priv->getRootIfdData().getByteOrder());
     TiffRootIFD encryptedIFD(nullptr, &ifds_decoded, dbIDD, off);
 
     if (encryptedIFD.hasEntry(SONYGRBGLEVELS)){
       TiffEntry *wb = encryptedIFD.getEntry(SONYGRBGLEVELS);
       if (wb->count != 4)
         ThrowRDE("WB has %d entries instead of 4", wb->count);
       mRaw->metadata.wbCoeffs[0] = wb->getFloat(1);
       mRaw->metadata.wbCoeffs[1] = wb->getFloat(0);
       mRaw->metadata.wbCoeffs[2] = wb->getFloat(2);
     } else if (encryptedIFD.hasEntry(SONYRGGBLEVELS)){
       TiffEntry *wb = encryptedIFD.getEntry(SONYRGGBLEVELS);
       if (wb->count != 4)
         ThrowRDE("WB has %d entries instead of 4", wb->count);
       mRaw->metadata.wbCoeffs[0] = wb->getFloat(0);
       mRaw->metadata.wbCoeffs[1] = wb->getFloat(1);
       mRaw->metadata.wbCoeffs[2] = wb->getFloat(3);
     }
   }
 }
 
 } // namespace rawspeed
