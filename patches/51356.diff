commit fdc32aec1ff50e79d04ccffbfefa5f82acd72afe
Author: Isaac Brodsky <isaac@isaacbrodsky.com>
Date:   Thu Sep 15 08:15:20 2022 -0700

    Fix second potential use of uninitialized value in cellToVertex (#690)

diff --git a/src/apps/testapps/testVertex.c b/src/apps/testapps/testVertex.c
index 1c22a3b5..e66a9f97 100644
--- a/src/apps/testapps/testVertex.c
+++ b/src/apps/testapps/testVertex.c
@@ -24,176 +24,183 @@
 SUITE(Vertex) {
     TEST(vertexNumForDirection_hex) {
         H3Index origin = 0x823d6ffffffffff;
         int vertexNums[NUM_HEX_VERTS] = {0};
         for (Direction dir = K_AXES_DIGIT; dir < NUM_DIGITS; dir++) {
             int vertexNum = vertexNumForDirection(origin, dir);
             t_assert(vertexNum >= 0 && vertexNum < NUM_HEX_VERTS,
                      "vertex number appears valid");
             t_assert(!vertexNums[vertexNum], "vertex number appears only once");
             vertexNums[vertexNum] = 1;
         }
     }
 
     TEST(vertexNumForDirection_pent) {
         H3Index pentagon = 0x823007fffffffff;
         int vertexNums[NUM_PENT_VERTS] = {0};
         for (Direction dir = J_AXES_DIGIT; dir < NUM_DIGITS; dir++) {
             int vertexNum = vertexNumForDirection(pentagon, dir);
             t_assert(vertexNum >= 0 && vertexNum < NUM_PENT_VERTS,
                      "vertex number appears valid");
             t_assert(!vertexNums[vertexNum], "vertex number appears only once");
             vertexNums[vertexNum] = 1;
         }
     }
 
     TEST(vertexNumForDirection_badDirections) {
         H3Index origin = 0x823007fffffffff;
 
         t_assert(
             vertexNumForDirection(origin, CENTER_DIGIT) == INVALID_VERTEX_NUM,
             "center digit should return invalid vertex");
         t_assert(
             vertexNumForDirection(origin, INVALID_DIGIT) == INVALID_VERTEX_NUM,
             "invalid digit should return invalid vertex");
 
         H3Index pentagon = 0x823007fffffffff;
         t_assert(
             vertexNumForDirection(pentagon, K_AXES_DIGIT) == INVALID_VERTEX_NUM,
             "K direction on pentagon should return invalid vertex");
     }
 
     TEST(directionForVertexNum_hex) {
         H3Index origin = 0x823d6ffffffffff;
         bool seenDirs[NUM_DIGITS] = {false};
         for (int vertexNum = 0; vertexNum < NUM_HEX_VERTS; vertexNum++) {
             Direction dir = directionForVertexNum(origin, vertexNum);
             t_assert(dir > 0 && dir < INVALID_DIGIT, "direction appears valid");
             t_assert(!seenDirs[dir], "direction appears only once");
             seenDirs[dir] = true;
         }
     }
 
     TEST(directionForVertexNum_badVerts) {
         H3Index origin = 0x823d6ffffffffff;
 
         t_assert(directionForVertexNum(origin, -1) == INVALID_DIGIT,
                  "negative vertex should return invalid direction");
         t_assert(directionForVertexNum(origin, 6) == INVALID_DIGIT,
                  "invalid vertex should return invalid direction");
 
         H3Index pentagon = 0x823007fffffffff;
         t_assert(directionForVertexNum(pentagon, 5) == INVALID_DIGIT,
                  "invalid pent vertex should return invalid direction");
     }
 
     TEST(cellToVertex_badVerts) {
         H3Index origin = 0x823d6ffffffffff;
 
         H3Index vert;
         t_assert(H3_EXPORT(cellToVertex)(origin, -1, &vert) == E_DOMAIN,
                  "negative vertex should return null index");
         t_assert(H3_EXPORT(cellToVertex)(origin, 6, &vert) == E_DOMAIN,
                  "invalid vertex should return null index");
 
         H3Index pentagon = 0x823007fffffffff;
         t_assert(H3_EXPORT(cellToVertex)(pentagon, 5, &vert) == E_DOMAIN,
                  "invalid pent vertex should return null index");
     }
 
     TEST(cellToVertex_invalid) {
         H3Index invalid = 0xFFFFFFFFFFFFFFFF;
         H3Index vert;
         t_assert(H3_EXPORT(cellToVertex)(invalid, 3, &vert) == E_FAILED,
                  "Invalid cell returns error");
     }
 
     TEST(cellToVertex_invalid2) {
         H3Index index = 0x685b2396e900fff9;
         H3Index vert;
         t_assert(H3_EXPORT(cellToVertex)(index, 2, &vert) == E_CELL_INVALID,
                  "Invalid cell returns error");
     }
 
+    TEST(cellToVertex_invalid3) {
+        H3Index index = 0x20ff20202020ff35;
+        H3Index vert;
+        t_assert(H3_EXPORT(cellToVertex)(index, 0, &vert) == E_CELL_INVALID,
+                 "Invalid cell returns error");
+    }
+
     TEST(isValidVertex_hex) {
         H3Index origin = 0x823d6ffffffffff;
         H3Index vert = 0x2222597fffffffff;
 
         t_assert(H3_EXPORT(isValidVertex)(vert), "known vertex is valid");
 
         for (int i = 0; i < NUM_HEX_VERTS; i++) {
             t_assertSuccess(H3_EXPORT(cellToVertex)(origin, i, &vert));
             t_assert(H3_EXPORT(isValidVertex)(vert), "vertex is valid");
         }
     }
 
     TEST(isValidVertex_invalidOwner) {
         H3Index origin = 0x823d6ffffffffff;
         int vertexNum = 0;
         H3Index vert;
         t_assertSuccess(H3_EXPORT(cellToVertex)(origin, vertexNum, &vert));
 
         // Set a bit for an unused digit to something else.
         vert ^= 1;
 
         t_assert(H3_EXPORT(isValidVertex)(vert) == 0,
                  "vertex with invalid owner is not valid");
     }
 
     TEST(isValidVertex_wrongOwner) {
         H3Index origin = 0x823d6ffffffffff;
         int vertexNum = 0;
         H3Index vert;
         t_assertSuccess(H3_EXPORT(cellToVertex)(origin, vertexNum, &vert));
 
         // Assert that origin does not own the vertex
         H3Index owner = vert;
         H3_SET_MODE(owner, H3_CELL_MODE);
         H3_SET_RESERVED_BITS(owner, 0);
 
         t_assert(origin != owner, "origin does not own the canonical vertex");
 
         H3Index nonCanonicalVertex = origin;
         H3_SET_MODE(nonCanonicalVertex, H3_VERTEX_MODE);
         H3_SET_RESERVED_BITS(nonCanonicalVertex, vertexNum);
 
         t_assert(H3_EXPORT(isValidVertex)(nonCanonicalVertex) == 0,
                  "vertex with incorrect owner is not valid");
     }
 
     TEST(isValidVertex_badVerts) {
         H3Index origin = 0x823d6ffffffffff;
         t_assert(H3_EXPORT(isValidVertex)(origin) == 0, "cell is not valid");
 
         H3Index fakeEdge = origin;
         H3_SET_MODE(fakeEdge, H3_DIRECTEDEDGE_MODE);
         t_assert(H3_EXPORT(isValidVertex)(fakeEdge) == 0,
                  "edge mode is not valid");
 
         H3Index vert;
         t_assertSuccess(H3_EXPORT(cellToVertex)(origin, 0, &vert));
         H3_SET_RESERVED_BITS(vert, 6);
         t_assert(H3_EXPORT(isValidVertex)(vert) == 0,
                  "invalid vertexNum is not valid");
 
         H3Index pentagon = 0x823007fffffffff;
         H3Index vert2;
         t_assertSuccess(H3_EXPORT(cellToVertex)(pentagon, 0, &vert2));
         H3_SET_RESERVED_BITS(vert2, 5);
         t_assert(H3_EXPORT(isValidVertex)(vert2) == 0,
                  "invalid pentagon vertexNum is not valid");
     }
 
     TEST(vertexToLatLng_invalid) {
         H3Index invalid = 0xFFFFFFFFFFFFFFFF;
         LatLng latLng;
         t_assert(H3_EXPORT(vertexToLatLng)(invalid, &latLng) != E_SUCCESS,
                  "Invalid vertex returns error");
     }
 
     TEST(cellToVertexes_invalid) {
         H3Index invalid = 0xFFFFFFFFFFFFFFFF;
         H3Index verts[6] = {0};
         t_assert(H3_EXPORT(cellToVertexes)(invalid, verts) == E_FAILED,
                  "cellToVertexes fails for invalid cell");
     }
 }
diff --git a/src/h3lib/lib/vertex.c b/src/h3lib/lib/vertex.c
index c067be24..4dd23511 100644
--- a/src/h3lib/lib/vertex.c
+++ b/src/h3lib/lib/vertex.c
@@ -198,92 +198,94 @@ static const int revNeighborDirectionsHex[NUM_DIGITS] = {
 /**
  * Get a single vertex for a given cell, as an H3 index, or
  * H3_NULL if the vertex is invalid
  * @param cell    Cell to get the vertex for
  * @param vertexNum Number (index) of the vertex to calculate
  */
 H3Error H3_EXPORT(cellToVertex)(H3Index cell, int vertexNum, H3Index *out) {
     int cellIsPentagon = H3_EXPORT(isPentagon)(cell);
     int cellNumVerts = cellIsPentagon ? NUM_PENT_VERTS : NUM_HEX_VERTS;
     int res = H3_GET_RESOLUTION(cell);
 
     // Check for invalid vertexes
     if (vertexNum < 0 || vertexNum > cellNumVerts - 1) return E_DOMAIN;
 
     // Default the owner and vertex number to the input cell
     H3Index owner = cell;
     int ownerVertexNum = vertexNum;
 
     // Determine the owner, looking at the three cells that share the vertex.
     // By convention, the owner is the cell with the lowest numerical index.
 
     // If the cell is the center child of its parent, it will always have
     // the lowest index of any neighbor, so we can skip determining the owner
     if (res == 0 || H3_GET_INDEX_DIGIT(cell, res) != CENTER_DIGIT) {
         // Get the left neighbor of the vertex, with its rotations
         Direction left = directionForVertexNum(cell, vertexNum);
         if (left == INVALID_DIGIT) return E_FAILED;
         int lRotations = 0;
         H3Index leftNeighbor;
         H3Error leftNeighborError =
             h3NeighborRotations(cell, left, &lRotations, &leftNeighbor);
         if (leftNeighborError) return leftNeighborError;
         // Set to owner if lowest index
         if (leftNeighbor < owner) owner = leftNeighbor;
 
         // As above, skip the right neighbor if the left is known lowest
         if (res == 0 || H3_GET_INDEX_DIGIT(leftNeighbor, res) != CENTER_DIGIT) {
             // Get the right neighbor of the vertex, with its rotations
             // Note that vertex - 1 is the right side, as vertex numbers are CCW
             Direction right = directionForVertexNum(
                 cell, (vertexNum - 1 + cellNumVerts) % cellNumVerts);
             // This case should be unreachable; invalid verts fail earlier
             if (right == INVALID_DIGIT) return E_FAILED;  // LCOV_EXCL_LINE
             int rRotations = 0;
             H3Index rightNeighbor;
-            h3NeighborRotations(cell, right, &rRotations, &rightNeighbor);
+            H3Error rightNeighborError =
+                h3NeighborRotations(cell, right, &rRotations, &rightNeighbor);
+            if (rightNeighborError) return rightNeighborError;
             // Set to owner if lowest index
             if (rightNeighbor < owner) {
                 owner = rightNeighbor;
                 Direction dir =
                     H3_EXPORT(isPentagon)(owner)
                         ? directionForNeighbor(owner, cell)
                         : DIRECTIONS[(revNeighborDirectionsHex[right] +
                                       rRotations) %
                                      NUM_HEX_VERTS];
                 ownerVertexNum = vertexNumForDirection(owner, dir);
             }
         }
 
         // Determine the vertex number for the left neighbor
         if (owner == leftNeighbor) {
             int ownerIsPentagon = H3_EXPORT(isPentagon)(owner);
             Direction dir =
                 ownerIsPentagon
                     ? directionForNeighbor(owner, cell)
                     : DIRECTIONS[(revNeighborDirectionsHex[left] + lRotations) %
                                  NUM_HEX_VERTS];
 
             // For the left neighbor, we need the second vertex of the
             // edge, which may involve looping around the vertex nums
             ownerVertexNum = vertexNumForDirection(owner, dir) + 1;
             if (ownerVertexNum == NUM_HEX_VERTS ||
                 (ownerIsPentagon && ownerVertexNum == NUM_PENT_VERTS)) {
                 ownerVertexNum = 0;
             }
         }
     }
 
     // Create the vertex index
     H3Index vertex = owner;
     H3_SET_MODE(vertex, H3_VERTEX_MODE);
     H3_SET_RESERVED_BITS(vertex, ownerVertexNum);
     *out = vertex;
 
     return E_SUCCESS;
 }
 
 /**
  * Get all vertexes for the given cell
  * @param cell      Cell to get the vertexes for
  * @param vertexes  Array to hold vertex output. Must have length >= 6.
  */
