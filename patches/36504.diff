commit 45003f3921774577968e209a5f6900022a5cc9bf
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Fri Jul 23 12:20:48 2021 +0200

    Remember to push empty clip onto draw stack in error case.
    
    Commit b1e505d1824d4356e48ce9e11cc5a02d6fa785dc accidentally omitted
    pushing an empty clip onto the draw stack when returning early from
    fz_draw_clip_image_mask(). The calling function assumes that the
    clip is always pushed and so will always pop the clip. This situation
    caused a later function to access the already popped clip causing a
    segmentation fault.
    
    This fixes OSS-fuzz issue 36463.

diff --git a/source/fitz/draw-device.c b/source/fitz/draw-device.c
index a537b41fb..07459a173 100644
--- a/source/fitz/draw-device.c
+++ b/source/fitz/draw-device.c
@@ -1923,126 +1923,133 @@ static void
 fz_draw_clip_image_mask(fz_context *ctx, fz_device *devp, fz_image *image, fz_matrix in_ctm, fz_rect scissor)
 {
 	fz_draw_device *dev = (fz_draw_device*)devp;
 	fz_matrix local_ctm = fz_concat(in_ctm, dev->transform);
 	fz_irect bbox;
 	fz_pixmap *scaled = NULL;
 	fz_pixmap *pixmap = NULL;
 	int dx, dy;
 	fz_draw_state *state = push_stack(ctx, dev, "clip image mask");
 	fz_colorspace *model = state->dest->colorspace;
 	fz_irect clip;
 	fz_irect src_area;
 
 	fz_var(pixmap);
 
 	if (dev->top == 0 && dev->resolve_spots)
 		state = push_group_for_separations(ctx, dev, fz_default_color_params /* FIXME */, dev->default_cs);
 
 	clip = fz_pixmap_bbox(ctx, state->dest);
 	clip = fz_intersect_irect(clip, state->scissor);
 
 	if (image->w == 0 || image->h == 0)
 	{
 #ifdef DUMP_GROUP_BLENDS
 		dump_spaces(dev->top-1, "Clip (image mask) (empty) begin\n");
 #endif
 		state[1].scissor = fz_empty_irect;
 		state[1].mask = NULL;
 		return;
 	}
 
 	local_ctm = fz_gridfit_matrix(devp->flags & FZ_DEVFLAG_GRIDFIT_AS_TILED, local_ctm);
 
 	src_area = find_src_area_required(local_ctm, image, clip);
 	if (fz_is_empty_irect(src_area))
+	{
+#ifdef DUMP_GROUP_BLENDS
+		dump_spaces(dev->top-1, "Clip (image mask) (empty source area) begin\n");
+#endif
+		state[1].scissor = fz_empty_irect;
+		state[1].mask = NULL;
 		return;
+	}
 
 	bbox = fz_irect_from_rect(fz_transform_rect(fz_unit_rect, local_ctm));
 	bbox = fz_intersect_irect(bbox, state->scissor);
 	if (!fz_is_infinite_rect(scissor))
 	{
 		fz_rect tscissor = fz_transform_rect(scissor, dev->transform);
 		bbox = fz_intersect_irect(bbox, fz_irect_from_rect(tscissor));
 	}
 	if (!fz_is_valid_irect(bbox))
 	{
 #ifdef DUMP_GROUP_BLENDS
 		dump_spaces(dev->top-1, "Clip (image mask) (invalid) begin\n");
 #endif
 		state[1].scissor = fz_empty_irect;
 		state[1].mask = NULL;
 		return;
 	}
 
 #ifdef DUMP_GROUP_BLENDS
 	dump_spaces(dev->top-1, "Clip (image mask) begin\n");
 #endif
 
 	fz_try(ctx)
 	{
 		pixmap = fz_get_pixmap_from_image(ctx, image, &src_area, &local_ctm, &dx, &dy);
 
 		state[1].mask = fz_new_pixmap_with_bbox(ctx, NULL, bbox, NULL, 1);
 		fz_clear_pixmap(ctx, state[1].mask);
 
 		state[1].dest = fz_new_pixmap_with_bbox(ctx, model, bbox, state[0].dest->seps, state[0].dest->alpha);
 		fz_copy_pixmap_rect(ctx, state[1].dest, state[0].dest, bbox, dev->default_cs);
 		if (state[0].shape)
 		{
 			state[1].shape = fz_new_pixmap_with_bbox(ctx, NULL, bbox, NULL, 1);
 			fz_clear_pixmap(ctx, state[1].shape);
 		}
 		if (state[0].group_alpha)
 		{
 			state[1].group_alpha = fz_new_pixmap_with_bbox(ctx, NULL, bbox, NULL, 1);
 			fz_clear_pixmap(ctx, state[1].group_alpha);
 		}
 
 		state[1].blendmode |= FZ_BLEND_ISOLATED;
 		state[1].scissor = bbox;
 
 		if (!(devp->hints & FZ_DONT_INTERPOLATE_IMAGES) && ctx->tuning->image_scale(ctx->tuning->image_scale_arg, dx, dy, pixmap->w, pixmap->h))
 		{
 			int gridfit = !(dev->flags & FZ_DRAWDEV_FLAGS_TYPE3);
 			scaled = fz_transform_pixmap(ctx, dev, pixmap, &local_ctm, state->dest->x, state->dest->y, dx, dy, gridfit, &clip);
 			if (!scaled)
 			{
 				if (dx < 1)
 					dx = 1;
 				if (dy < 1)
 					dy = 1;
 				scaled = fz_scale_pixmap_cached(ctx, pixmap, pixmap->x, pixmap->y, dx, dy, NULL, dev->cache_x, dev->cache_y);
 			}
 			if (scaled)
 			{
 				fz_drop_pixmap(ctx, pixmap);
 				pixmap = scaled;
 			}
 		}
 
 #ifdef DUMP_GROUP_BLENDS
 		dump_spaces(dev->top, "");
 		fz_dump_blend(ctx, "Creating imagemask: plotting ", pixmap);
 		fz_dump_blend(ctx, " onto ", state[1].mask);
 		if (state[1].shape)
 			fz_dump_blend(ctx, "/S=", state[1].shape);
 		if (state[1].group_alpha)
 			fz_dump_blend(ctx, "/GA=", state[1].group_alpha);
 #endif
 
 		fz_paint_image(ctx, state[1].mask, &bbox, state[1].shape, state[1].group_alpha, pixmap, local_ctm, 255, !(devp->hints & FZ_DONT_INTERPOLATE_IMAGES), 0);
 
 #ifdef DUMP_GROUP_BLENDS
 		fz_dump_blend(ctx, " to get ", state[1].mask);
 		if (state[1].shape)
 			fz_dump_blend(ctx, "/S=", state[1].shape);
 		if (state[1].group_alpha)
 			fz_dump_blend(ctx, "/GA=", state[1].group_alpha);
 		printf("\n");
 #endif
 	}
 	fz_always(ctx)
 		fz_drop_pixmap(ctx, pixmap);
 	fz_catch(ctx)
 		fz_rethrow(ctx);
 }
