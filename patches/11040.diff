commit 07afa23bd0fa74d18fb7faee898b2a876536a170
Author: Leon Scroggins III <scroggo@google.com>
Date:   Mon Oct 22 13:16:37 2018 -0400

    Fix heap buffer overflow
    
    Bug: oss-fuzz:11040
    
    Because we're sampling, the offset ends up the same as the width. Back
    up to the left enough to fit the bytes we will write.
    
    Change-Id: Ie476a0191b66c2322446b9c0922f630d6e971645
    Reviewed-on: https://skia-review.googlesource.com/c/164262
    Commit-Queue: Leon Scroggins <scroggo@google.com>
    Commit-Queue: Mike Klein <mtklein@google.com>
    Auto-Submit: Leon Scroggins <scroggo@google.com>
    Reviewed-by: Mike Klein <mtklein@google.com>

diff --git a/src/codec/SkSwizzler.cpp b/src/codec/SkSwizzler.cpp
index e1e2ecb623..05636ebfd7 100644
--- a/src/codec/SkSwizzler.cpp
+++ b/src/codec/SkSwizzler.cpp
@@ -1210,20 +1210,29 @@ SkSwizzler::SkSwizzler(RowProc fastProc, RowProc proc, const SkPMColor* ctable,
 int SkSwizzler::onSetSampleX(int sampleX) {
     SkASSERT(sampleX > 0);
 
     fSampleX = sampleX;
     fSrcOffsetUnits = (get_start_coord(sampleX) + fSrcOffset) * fSrcBPP;
     fDstOffsetBytes = (fDstOffset / sampleX) * fDstBPP;
     fSwizzleWidth = get_scaled_dimension(fSrcWidth, sampleX);
     fAllocatedWidth = get_scaled_dimension(fDstWidth, sampleX);
 
+    if (fDstOffsetBytes > 0) {
+        const size_t dstSwizzleBytes   = fSwizzleWidth   * fDstBPP;
+        const size_t dstAllocatedBytes = fAllocatedWidth * fDstBPP;
+        if (fDstOffsetBytes + dstSwizzleBytes > dstAllocatedBytes) {
+            SkASSERT(dstSwizzleBytes < dstAllocatedBytes);
+            fDstOffsetBytes = dstAllocatedBytes - dstSwizzleBytes;
+        }
+    }
+
     // The optimized swizzler functions do not support sampling.  Sampled swizzles
     // are already fast because they skip pixels.  We haven't seen a situation
     // where speeding up sampling has a significant impact on total decode time.
     if (1 == fSampleX && fFastProc) {
         fActualProc = fFastProc;
     } else {
         fActualProc = fSlowProc;
     }
 
     return fAllocatedWidth;
 }
