commit 4e3e6cbc15022fd78b214034c7dfacc719ba418c
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Mon Aug 14 16:56:20 2017 +0300

    OrfDecoder: check image dimensions first.
    
    Had to modify decodeCompressed() to keep the clang-tidy
    function-size check happy

diff --git a/src/librawspeed/decoders/OrfDecoder.cpp b/src/librawspeed/decoders/OrfDecoder.cpp
index f1ad8e81..e5be704c 100644
--- a/src/librawspeed/decoders/OrfDecoder.cpp
+++ b/src/librawspeed/decoders/OrfDecoder.cpp
@@ -63,45 +63,48 @@ bool OrfDecoder::isAppropriateDecoder(const TiffRootIFD* rootIFD,
 RawImage OrfDecoder::decodeRawInternal() {
   auto raw = mRootIFD->getIFDWithTag(STRIPOFFSETS);
 
   int compression = raw->getEntry(COMPRESSION)->getU32();
   if (1 != compression)
     ThrowRDE("Unsupported compression");
 
   TiffEntry *offsets = raw->getEntry(STRIPOFFSETS);
   TiffEntry *counts = raw->getEntry(STRIPBYTECOUNTS);
 
   if (counts->count != offsets->count) {
     ThrowRDE(
         "Byte count number does not match strip size: count:%u, strips:%u ",
         counts->count, offsets->count);
   }
 
   //TODO: this code assumes that all strips are layed out directly after another without padding and in order
   uint32 off = raw->getEntry(STRIPOFFSETS)->getU32();
   uint32 size = 0;
   for (uint32 i=0; i < counts->count; i++)
     size += counts->getU32(i);
 
   if (!mFile->isValid(off, size))
     ThrowRDE("Truncated file");
 
   uint32 width = raw->getEntry(IMAGEWIDTH)->getU32();
   uint32 height = raw->getEntry(IMAGELENGTH)->getU32();
 
+  if (!width || !height || width % 2 != 0)
+    ThrowRDE("Bad raw dimensions");
+
   mRaw->dim = iPoint2D(width, height);
   mRaw->createData();
 
   ByteStream input(offsets->getRootIfdData());
   input.setPosition(off);
 
   try {
     if (offsets->count != 1 || hints.has("force_uncompressed"))
       decodeUncompressed(input, width, height, size);
     else
       decodeCompressed(&input, width, height);
   } catch (IOException &e) {
      mRaw->setError(e.what());
   }
 
   return mRaw;
 }
@@ -136,161 +139,163 @@ void OrfDecoder::decodeUncompressed(const ByteStream& s, uint32 w, uint32 h,
  */
 
 void OrfDecoder::decodeCompressed(ByteStream* s, uint32 w, uint32 h) {
+  assert(h > 0);
+  assert(w > 0);
+  assert(w % 2 == 0);
+
   int nbits;
   int sign;
   int low;
   int high;
   int i;
-  int left0;
-  int nw0;
-  int left1;
-  int nw1;
-  int acarry0[3];
-  int acarry1[3];
+  int left0 = 0;
+  int nw0 = 0;
+  int left1 = 0;
+  int nw1 = 0;
   int pred;
   int diff;
 
   uchar8* data = mRaw->getData();
   int pitch = mRaw->pitch;
 
   /* Build a table to quickly look up "high" value */
   unique_ptr<char[]> bittable(new char[4096]);
 
   for (i = 0; i < 4096; i++) {
     int b = i;
     for (high = 0; high < 12; high++)
       if ((b>>(11-high))&1)
         break;
     bittable[i] = min(12,high);
   }
-  left0 = nw0 = left1 = nw1 = 0;
 
   s->skipBytes(7);
   BitPumpMSB bits(*s);
 
   for (uint32 y = 0; y < h; y++) {
-    memset(acarry0, 0, sizeof acarry0);
-    memset(acarry1, 0, sizeof acarry1);
+    int acarry0[3] = {};
+    int acarry1[3] = {};
+
     auto* dest = reinterpret_cast<ushort16*>(&data[y * pitch]);
     bool y_border = y < 2;
     bool border = true;
     for (uint32 x = 0; x < w; x++) {
       bits.fill();
       i = 2 * (acarry0[2] < 3);
       for (nbits = 2 + i; static_cast<ushort16>(acarry0[0]) >> (nbits + i);
            nbits++)
         ;
 
       int b = bits.peekBitsNoFill(15);
       sign = (b >> 14) * -1;
       low  = (b >> 12) & 3;
       high = bittable[b&4095];
 
       // Skip bytes used above or read bits
       if (high == 12) {
         bits.skipBitsNoFill(15);
         high = bits.getBits(16 - nbits) >> 1;
       } else {
         bits.skipBitsNoFill(high + 1 + 3);
       }
 
       acarry0[0] = (high << nbits) | bits.getBits(nbits);
       diff = (acarry0[0] ^ sign) + acarry0[1];
       acarry0[1] = (diff * 3 + acarry0[1]) >> 5;
       acarry0[2] = acarry0[0] > 16 ? 0 : acarry0[2] + 1;
 
       if (border) {
         if (y_border && x < 2)
           pred = 0;
         else {
           if (y_border)
             pred = left0;
           else {
             pred = dest[-pitch + (static_cast<int>(x))];
             nw0 = pred;
           }
         }
         dest[x] = pred + ((diff * 4) | low);
         // Set predictor
         left0 = dest[x];
       } else {
         // Have local variables for values used several tiles
         // (having a "ushort16 *dst_up" that caches dest[-pitch+((int)x)] is actually slower, probably stack spill or aliasing)
         int up = dest[-pitch + (static_cast<int>(x))];
         int leftMinusNw = left0 - nw0;
         int upMinusNw = up - nw0;
         // Check if sign is different, and they are both not zero
         if ((signbit(leftMinusNw) ^ signbit(upMinusNw)) &&
             (leftMinusNw != 0 && upMinusNw != 0)) {
           if (abs(leftMinusNw) > 32 || abs(upMinusNw) > 32)
             pred = left0 + upMinusNw;
           else
             pred = (left0 + up) >> 1;
         } else
           pred = abs(leftMinusNw) > abs(upMinusNw) ? left0 : up;
 
         dest[x] = pred + ((diff * 4) | low);
         // Set predictors
         left0 = dest[x];
         nw0 = up;
       }
 
       // ODD PIXELS
       x += 1;
       bits.fill();
       i = 2 * (acarry1[2] < 3);
       for (nbits = 2 + i; static_cast<ushort16>(acarry1[0]) >> (nbits + i);
            nbits++)
         ;
       b = bits.peekBitsNoFill(15);
       sign = (b >> 14) * -1;
       low  = (b >> 12) & 3;
       high = bittable[b&4095];
 
       // Skip bytes used above or read bits
       if (high == 12) {
         bits.skipBitsNoFill(15);
         high = bits.getBits(16 - nbits) >> 1;
       } else {
         bits.skipBitsNoFill(high + 1 + 3);
       }
 
       acarry1[0] = (high << nbits) | bits.getBits(nbits);
       diff = (acarry1[0] ^ sign) + acarry1[1];
       acarry1[1] = (diff * 3 + acarry1[1]) >> 5;
       acarry1[2] = acarry1[0] > 16 ? 0 : acarry1[2] + 1;
 
       if (border) {
         if (y_border && x < 2)
           pred = 0;
         else {
           if (y_border)
             pred = left1;
           else {
             pred = dest[-pitch + (static_cast<int>(x))];
             nw1 = pred;
           }
         }
         dest[x] = left1 = pred + ((diff * 4) | low);
       } else {
         int up = dest[-pitch + (static_cast<int>(x))];
         int leftMinusNw = left1 - nw1;
         int upMinusNw = up - nw1;
 
         // Check if sign is different, and they are both not zero
         if ((signbit(leftMinusNw) ^ signbit(upMinusNw)) &&
             (leftMinusNw != 0 && upMinusNw != 0)) {
           if (abs(leftMinusNw) > 32 || abs(upMinusNw) > 32)
             pred = left1 + upMinusNw;
           else
             pred = (left1 + up) >> 1;
         } else
           pred = abs(leftMinusNw) > abs(upMinusNw) ? left1 : up;
 
         dest[x] = left1 = pred + ((diff * 4) | low);
         nw1 = up;
       }
       border = y_border;
     }
   }
 }
