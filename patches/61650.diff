commit 9933b5910d4ffa1024478c28bd4b5952eaf9637d
Author: Luca <deri@ntop.org>
Date:   Mon Aug 21 23:19:57 2023 +0200

    Boundary check

diff --git a/src/lib/ndpi_main.c b/src/lib/ndpi_main.c
index 8c553ef7..cc3782d5 100644
--- a/src/lib/ndpi_main.c
+++ b/src/lib/ndpi_main.c
@@ -3882,210 +3882,212 @@ int ndpi_add_trusted_issuer_dn(struct ndpi_detection_module_struct *ndpi_str, ch
 int ndpi_handle_rule(struct ndpi_detection_module_struct *ndpi_str,
 		     char *rule, u_int8_t do_add) {
   char *at, *proto, *elem;
   ndpi_proto_defaults_t *def;
   u_int subprotocol_id, i;
   int id, ret = 0;
 
   at = strrchr(rule, '@');
   if(at == NULL) {
     /* This looks like a mask rule or an invalid rule */
     char _rule[256], *rule_type, *key;
 
     ndpi_snprintf(_rule, sizeof(_rule), "%s", rule);
     rule_type = strtok(rule, ":");
 
     if(!rule_type) {
       NDPI_LOG_ERR(ndpi_str, "Invalid rule '%s'\n", rule);
       return(-1);
     }
 
     if(!strcmp(rule_type, "trusted_issuer_dn"))
       return(ndpi_add_trusted_issuer_dn(ndpi_str, strtok(NULL, ":")));
 
     key = strtok(NULL, "=");
     if(key) {
       char *value = strtok(NULL, "=");
 
       if(value) {
 	ndpi_risk risk_mask = (ndpi_risk)atoll(value);
 
 	if(!strcmp(rule_type, "ip_risk_mask")) {
 	  return(ndpi_add_ip_risk_mask(ndpi_str, key, risk_mask));
 	} else if(!strcmp(rule_type, "host_risk_mask")) {
 	  return(ndpi_add_host_risk_mask(ndpi_str, key, risk_mask));
 	}
       }
     }
 
     NDPI_LOG_ERR(ndpi_str, "Unknown rule '%s'\n", rule);
     return(-1);
   } else
     at[0] = 0, proto = &at[1];
 
   for(i = 0; proto[i] != '\0'; i++) {
     switch(proto[i]) {
     case '/':
     case '&':
     case '^':
     case ':':
     case ';':
     case '\'':
     case '"':
     case ' ':
       proto[i] = '_';
       break;
     }
   }
 
   if((id = ndpi_get_protocol_id(ndpi_str, proto)) != -1) {
     subprotocol_id = (u_int)id;
     def = &ndpi_str->proto_defaults[subprotocol_id];
   } else
     def = NULL;
 
   if(def == NULL) {
     if(!do_add) {
       /* We need to remove a rule */
       NDPI_LOG_ERR(ndpi_str, "Unable to find protocol '%s': skipping rule '%s'\n", proto, rule);
       return(-3);
     } else {
       ndpi_port_range ports_a[MAX_DEFAULT_PORTS], ports_b[MAX_DEFAULT_PORTS];
       char *equal = strchr(proto, '=');
       u_int16_t user_proto_id = ndpi_str->ndpi_num_supported_protocols;
 
       if(equal != NULL) {
 	/* PROTO=VALUE */
 
 	equal[0] = '\0';
 	user_proto_id = atoi(&equal[1]);
 
 	/* NOTE: ndpi_str->ndpi_num_supported_protocols >= NDPI_MAX_SUPPORTED_PROTOCOLS */
 	ndpi_add_user_proto_id_mapping(ndpi_str, ndpi_str->ndpi_num_supported_protocols, user_proto_id);
 
 	/* printf("***** ADDING MAPPING %s: %u -> %u\n", proto, ndpi_str->ndpi_num_supported_protocols, user_proto_id); */
       } else
 	ndpi_add_user_proto_id_mapping(ndpi_str, ndpi_str->ndpi_num_supported_protocols,
 				       ndpi_str->ndpi_num_supported_protocols);
 
       if(ndpi_str->ndpi_num_custom_protocols >= (NDPI_MAX_NUM_CUSTOM_PROTOCOLS - 1)) {
 	NDPI_LOG_ERR(ndpi_str, "Too many protocols defined (%u): skipping protocol %s\n",
 		     ndpi_str->ndpi_num_custom_protocols, proto);
 	return(-2);
       }
 
       ndpi_set_proto_defaults(ndpi_str, 1 /* is_cleartext */,
 			      1 /* is_app_protocol */,
 			      NDPI_PROTOCOL_ACCEPTABLE, /* breed*/
 			      ndpi_str->ndpi_num_supported_protocols /* protoId */,
 			      proto, /* protoName */
 			      NDPI_PROTOCOL_CATEGORY_UNSPECIFIED, /* TODO add protocol category support in rules */
 			      ndpi_build_default_ports(ports_a, 0, 0, 0, 0, 0) /* TCP */,
 			      ndpi_build_default_ports(ports_b, 0, 0, 0, 0, 0) /* UDP */);
 
       def = &ndpi_str->proto_defaults[ndpi_str->ndpi_num_supported_protocols];
       subprotocol_id = ndpi_str->ndpi_num_supported_protocols;
       ndpi_str->ndpi_num_supported_protocols++, ndpi_str->ndpi_num_custom_protocols++;
     }
   }
 
   while((elem = strsep(&rule, ",")) != NULL) {
     char *attr = elem, *value = NULL;
     ndpi_port_range range;
     int is_tcp = 0, is_udp = 0, is_ip = 0;
 
     if(strncmp(attr, "tcp:", 4) == 0)
       is_tcp = 1, value = &attr[4];
     else if(strncmp(attr, "udp:", 4) == 0)
       is_udp = 1, value = &attr[4];
     else if(strncmp(attr, "ip:", 3) == 0)
       is_ip = 1, value = &attr[3];
     else if(strncmp(attr, "host:", 5) == 0) {
       /* host:"<value>",host:"<value>",.....@<subproto> */
-      u_int i, max_len;
-
       value = &attr[5];
       if(value[0] == '"')
 	value++; /* remove leading " */
 
-      max_len = strlen(value) - 1;
-      if(value[max_len] == '"')
-	value[max_len] = '\0'; /* remove trailing " */
-
-      for(i=0; i<max_len; i++) value[i] = tolower(value[i]);
+      if(value[0] != '\0') {
+	u_int i, max_len = strlen(value) - 1;
+	
+	if(value[max_len] == '"')
+	  value[max_len] = '\0'; /* remove trailing " */
+	
+	for(i=0; i<max_len; i++)
+	  value[i] = tolower(value[i]);
+      }
     } else if(strncmp(attr, "nbpf:", 5) == 0) {
 #ifdef HAVE_NBPF
       char *filter = &attr[5];
 
       if(ndpi_str->num_nbpf_custom_proto >= MAX_NBPF_CUSTOM_PROTO) {
 	NDPI_LOG_ERR(ndpi_str, "nBPF: too many protocols\n");
 	return(-4); /* Too many protocols */
       }
 
       if(filter[0] == '"') {
 	u_int len;
 
 	filter = &filter[1];
 	len = strlen(filter);
 
 	if(len > 0)
 	  filter[len-1] = '\0';
       }
 
       if((ndpi_str->nbpf_custom_proto[ndpi_str->num_nbpf_custom_proto].tree =
 	  nbpf_parse(filter, NULL)) == NULL) {
 	NDPI_LOG_ERR(ndpi_str, "nBPF invalid filter: %s\n", filter)
 	return(-5); /* Invalid filter */
       } else
 	ndpi_str->nbpf_custom_proto[ndpi_str->num_nbpf_custom_proto].l7_protocol = subprotocol_id;
 
     ndpi_str->num_nbpf_custom_proto++;
 #else
       NDPI_LOG_INFO(ndpi_str, "nDPI compiled without nBPF support: skipping rule\n");
       return(-6);
 #endif
     }
 
     if(is_tcp || is_udp) {
       u_int p_low, p_high;
       int rc;
 
       if(sscanf(value, "%u-%u", &p_low, &p_high) == 2)
 	range.port_low = p_low, range.port_high = p_high;
       else
 	range.port_low = range.port_high = atoi(&elem[4]);
 
       if(do_add)
 	rc = addDefaultPort(ndpi_str, &range, def, 1 /* Custom user proto */,
 		       is_tcp ? &ndpi_str->tcpRoot : &ndpi_str->udpRoot, __FUNCTION__, __LINE__);
       else
 	rc = removeDefaultPort(&range, def, is_tcp ? &ndpi_str->tcpRoot : &ndpi_str->udpRoot);
 
       if(rc != 0) ret = rc;
     } else if(is_ip) {
       int rc = ndpi_add_host_ip_subprotocol(ndpi_str, value, subprotocol_id);
 
       if(rc != 0)
 	return(rc);
     } else {
       if(do_add)
 	ndpi_add_host_url_subprotocol(ndpi_str, value, subprotocol_id, NDPI_PROTOCOL_CATEGORY_UNSPECIFIED,
 				      NDPI_PROTOCOL_ACCEPTABLE, 0);
       else
 	ndpi_remove_host_url_subprotocol(ndpi_str, value, subprotocol_id);
     }
   }
 
   return(ret);
 }
 
 /* ******************************************************************** */
 
 /*
  * Format:
  *
  * <host|ip>	<category_id>
  *
  * Notes:
  *  - host and category are separated by a single TAB
  *  - empty lines or lines starting with # are ignored
  */
