commit 56c425eec1d9ff9692f9fb2433b7650bde373992
Author: davidot <davidot@serenityos.org>
Date:   Wed Dec 29 11:55:06 2021 +0100

    LibJS: Detect invalid unicode and stop lexing at that point
    
    Previously we might swallow invalid unicode point which would skip valid
    ascii characters. This could be dangerous as we might skip a '"' thus
    not closing a string where we should.
    This might have been exploitable as it would not have been clear what
    code gets executed when looking at a script.
    
    Another approach to this would be simply replacing all invalid
    characters with the replacement character (this is what v8 does). But
    our lexer and parser are currently not set up for such a change.

diff --git a/Tests/LibJS/test-invalid-unicode-js.cpp b/Tests/LibJS/test-invalid-unicode-js.cpp
index 9e209f29d5..75b6682a08 100644
--- a/Tests/LibJS/test-invalid-unicode-js.cpp
+++ b/Tests/LibJS/test-invalid-unicode-js.cpp
@@ -7,70 +7,138 @@
 #include <LibJS/Parser.h>
 #include <LibTest/TestCase.h>
 
-TEST_CASE(invalid_unicode_only)
+static bool produces_eof_tokens(JS::Lexer& lexer)
 {
-    char const* code = "\xEA\xFD";
-    auto lexer = JS::Lexer(code);
-    auto token = lexer.next();
-    EXPECT_EQ(token.type(), JS::TokenType::Invalid);
-
-    // After this we can get as many eof tokens as we like.
     for (auto i = 0; i < 10; i++) {
         auto eof_token = lexer.next();
-        EXPECT_EQ(eof_token.type(), JS::TokenType::Eof);
+        if (eof_token.type() != JS::TokenType::Eof)
+            return false;
     }
+    return true;
 }
 
-TEST_CASE(long_invalid_unicode)
+static bool triggers_immediate_unicode_fault(StringView code)
 {
-    char const* code = "\xF7";
     auto lexer = JS::Lexer(code);
-    auto token = lexer.next();
-    EXPECT_EQ(token.type(), JS::TokenType::Invalid);
+    auto first_token = lexer.next();
 
-    // After this we can get as many eof tokens as we like.
-    for (auto i = 0; i < 10; i++) {
-        auto eof_token = lexer.next();
-        EXPECT_EQ(eof_token.type(), JS::TokenType::Eof);
-    }
+    if (first_token.type() != JS::TokenType::Invalid)
+        return false;
+
+    return produces_eof_tokens(lexer);
 }
+// In the not leading character it must start with 0b10xxxxxx
+// Thus all these options are invalid:
+// \x0y = 0000 y (or \x1y, \x2y and \x3y)
+// \x4y = 0100 y (or \x5y, \x6y and \x7y)
+// \xCy = 1100 y (or \xDy, \xEy and \xFy)
+// And the only valid option is:
+// \x8y = 1000 y (or \x9y, \xAy
 
-TEST_CASE(invalid_unicode_and_valid_code)
+TEST_CASE(no_input_only_gives_eof)
 {
-    char const* code = "\xEA\xFDthrow 1;";
+    char const* code = "";
     auto lexer = JS::Lexer(code);
-    auto invalid_token = lexer.next();
-    EXPECT_EQ(invalid_token.type(), JS::TokenType::Invalid);
-    // 0xEA is the start of a three character unicode code point thus it consumes the 't'.
-    auto token_after = lexer.next();
-    EXPECT_EQ(token_after.value(), "hrow");
+    EXPECT(produces_eof_tokens(lexer));
+}
+
+TEST_CASE(invalid_start_code_point)
+{
+    EXPECT(triggers_immediate_unicode_fault("\x80"sv));
+    EXPECT(triggers_immediate_unicode_fault("\x90"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xA0"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xB0"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xF8"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xFF"sv));
+}
+
+TEST_CASE(code_points_of_length_2)
+{
+    // Initial 110xxxxx -> \xCy or \xDy
+    EXPECT(triggers_immediate_unicode_fault("\xC5"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xC5\x02"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xC5\x52"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xC5\xD2"sv));
+
+    EXPECT(triggers_immediate_unicode_fault("\xD5"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xD5\x23"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xD5\x74"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xD5\xF5"sv));
+}
+
+TEST_CASE(code_points_of_length_3)
+{
+    // Initial 1110xxxx -> \xEy
+    EXPECT(triggers_immediate_unicode_fault("\xE5"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xE5\x02"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xE5\x52"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xE5\xD2"sv));
+
+    EXPECT(triggers_immediate_unicode_fault("\xEA\x80"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xEA\x81\x07"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xEA\x82\x57"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xEA\x83\xD7"sv));
+}
+
+TEST_CASE(code_points_of_length_4)
+{
+    // Initial 11110xxx -> \xF{0..7}
+    EXPECT(triggers_immediate_unicode_fault("\xF0"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xF1\x02"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xF2\x52"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xF3\xD2"sv));
+
+    EXPECT(triggers_immediate_unicode_fault("\xF4\x80"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xF5\x81\x07"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xF6\x82\x57"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xF7\x83\xD7"sv));
+
+    EXPECT(triggers_immediate_unicode_fault("\xF4\x80\x80"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xF5\x91\x80\x07"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xF6\xA2\x80\x57"sv));
+    EXPECT(triggers_immediate_unicode_fault("\xF7\xB3\x80\xD7"sv));
+}
+
+TEST_CASE(gives_valid_part_until_fault)
+{
+    auto code = "abc\xF5\x81\x80\x07; abc\xF5\x81\x80\x07 += 4"sv;
+    JS::Lexer lexer(code);
+    auto first_token = lexer.next();
+    EXPECT_EQ(first_token.type(), JS::TokenType::Identifier);
+    EXPECT_EQ(first_token.value(), "abc"sv);
+    auto second_token = lexer.next();
+    EXPECT_EQ(second_token.type(), JS::TokenType::Invalid);
+    EXPECT(produces_eof_tokens(lexer));
+}
+
+TEST_CASE(gives_fully_parsed_tokens_even_if_invalid_unicode_follows)
+{
+    auto code = "let \xE5\xD2"sv;
+    JS::Lexer lexer(code);
+    auto first_token = lexer.next();
+    EXPECT_EQ(first_token.type(), JS::TokenType::Let);
+    auto second_token = lexer.next();
+    EXPECT_EQ(second_token.type(), JS::TokenType::Invalid);
+    EXPECT(produces_eof_tokens(lexer));
+}
+
+TEST_CASE(invalid_unicode_and_valid_code)
+{
+    EXPECT(triggers_immediate_unicode_fault("\xEA\xFDthrow 1;"sv));
 }
 
 TEST_CASE(long_invalid_unicode_and_valid_code)
 {
-    char const* code = "\xF7throw 1;";
-    auto lexer = JS::Lexer(code);
-    auto invalid_token = lexer.next();
-    EXPECT_EQ(invalid_token.type(), JS::TokenType::Invalid);
-    // 0xF7 is the start of a four character unicode code point thus it consumes 'thr'.
-    auto token_after = lexer.next();
-    EXPECT_EQ(token_after.value(), "ow");
+    EXPECT(triggers_immediate_unicode_fault("\xF7throw 1;"sv));
 }
 
 TEST_CASE(invalid_unicode_after_valid_code_and_before_eof)
 {
     char const* code = "let \xEA\xFD;";
     auto lexer = JS::Lexer(code);
     auto let_token = lexer.next();
     EXPECT_EQ(let_token.type(), JS::TokenType::Let);
     auto invalid_token = lexer.next();
     EXPECT_EQ(invalid_token.type(), JS::TokenType::Invalid);
-    // It should still get the valid trivia in front.
-    EXPECT_EQ(invalid_token.trivia(), " ");
-
-    // After this we can get as many eof tokens as we like.
-    for (auto i = 0; i < 10; i++) {
-        auto eof_token = lexer.next();
-        EXPECT_EQ(eof_token.type(), JS::TokenType::Eof);
-    }
+    EXPECT(produces_eof_tokens(lexer));
 }
diff --git a/Userland/Libraries/LibJS/Lexer.cpp b/Userland/Libraries/LibJS/Lexer.cpp
index a439d0c684..a71469f362 100644
--- a/Userland/Libraries/LibJS/Lexer.cpp
+++ b/Userland/Libraries/LibJS/Lexer.cpp
@@ -142,78 +142,89 @@ Lexer::Lexer(StringView source, StringView filename, size_t line_number, size_t
 void Lexer::consume()
 {
     auto did_reach_eof = [this] {
         if (m_position < m_source.length())
             return false;
         m_eof = true;
         m_current_char = '\0';
         m_position = m_source.length() + 1;
         m_line_column++;
         return true;
     };
 
     if (m_position > m_source.length())
         return;
 
     if (did_reach_eof())
         return;
 
     if (is_line_terminator()) {
         if constexpr (LEXER_DEBUG) {
             String type;
             if (m_current_char == '\n')
                 type = "LINE FEED";
             else if (m_current_char == '\r')
                 type = "CARRIAGE RETURN";
             else if (m_source[m_position + 1] == (char)0xa8)
                 type = "LINE SEPARATOR";
             else
                 type = "PARAGRAPH SEPARATOR";
             dbgln("Found a line terminator: {}", type);
         }
         // This is a three-char line terminator, we need to increase m_position some more.
         // We might reach EOF and need to check again.
         if (m_current_char != '\n' && m_current_char != '\r') {
             m_position += 2;
             if (did_reach_eof())
                 return;
         }
 
         // If the previous character is \r and the current one \n we already updated line number
         // and column - don't do it again. From https://tc39.es/ecma262/#sec-line-terminators:
         //   The sequence <CR><LF> is commonly used as a line terminator.
         //   It should be considered a single SourceCharacter for the purpose of reporting line numbers.
         auto second_char_of_crlf = m_position > 1 && m_source[m_position - 2] == '\r' && m_current_char == '\n';
 
         if (!second_char_of_crlf) {
             m_line_number++;
             m_line_column = 1;
             dbgln_if(LEXER_DEBUG, "Incremented line number, now at: line {}, column 1", m_line_number);
         } else {
             dbgln_if(LEXER_DEBUG, "Previous was CR, this is LF - not incrementing line number again.");
         }
     } else if (is_unicode_character()) {
         size_t char_size = 1;
         if ((m_current_char & 64) == 0) {
-            // invalid char
+            m_hit_invalid_unicode = m_position;
         } else if ((m_current_char & 32) == 0) {
             char_size = 2;
         } else if ((m_current_char & 16) == 0) {
             char_size = 3;
         } else if ((m_current_char & 8) == 0) {
             char_size = 4;
         }
 
         VERIFY(char_size >= 1);
         --char_size;
 
-        m_position += char_size;
+        for (size_t i = m_position; i < m_position + char_size; i++) {
+            if (i >= m_source.length() || (m_source[i] & 0b11000000) != 0b10000000) {
+                m_hit_invalid_unicode = m_position;
+                break;
+            }
+        }
+
+        if (m_hit_invalid_unicode.has_value())
+            m_position = m_source.length();
+        else
+            m_position += char_size;
+
         if (did_reach_eof())
             return;
 
         m_line_column++;
     } else {
         m_line_column++;
     }
 
     m_current_char = m_source[m_position++];
 }
@@ -508,332 +519,346 @@ bool Lexer::slash_means_division() const
 Token Lexer::next()
 {
     size_t trivia_start = m_position;
     auto in_template = !m_template_states.is_empty();
     bool line_has_token_yet = m_line_column > 1;
     bool unterminated_comment = false;
 
     if (!in_template || m_template_states.last().in_expr) {
         // consume whitespace and comments
         while (true) {
             if (is_line_terminator()) {
                 line_has_token_yet = false;
                 do {
                     consume();
                 } while (is_line_terminator());
             } else if (is_whitespace()) {
                 do {
                     consume();
                 } while (is_whitespace());
             } else if (is_line_comment_start(line_has_token_yet)) {
                 consume();
                 do {
                     consume();
                 } while (!is_eof() && !is_line_terminator());
             } else if (is_block_comment_start()) {
                 size_t start_line_number = m_line_number;
                 consume();
                 do {
                     consume();
                 } while (!is_eof() && !is_block_comment_end());
                 if (is_eof())
                     unterminated_comment = true;
                 consume(); // consume *
                 if (is_eof())
                     unterminated_comment = true;
                 consume(); // consume /
 
                 if (start_line_number != m_line_number)
                     line_has_token_yet = false;
             } else {
                 break;
             }
         }
     }
 
     size_t value_start = m_position;
     size_t value_start_line_number = m_line_number;
     size_t value_start_column_number = m_line_column;
     auto token_type = TokenType::Invalid;
     auto did_consume_whitespace_or_comments = trivia_start != value_start;
     // This is being used to communicate info about invalid tokens to the parser, which then
     // can turn that into more specific error messages - instead of us having to make up a
     // bunch of Invalid* tokens (bad numeric literals, unterminated comments etc.)
     String token_message;
 
     Optional<FlyString> identifier;
     size_t identifier_length = 0;
 
     if (m_current_token.type() == TokenType::RegexLiteral && !is_eof() && is_ascii_alpha(m_current_char) && !did_consume_whitespace_or_comments) {
         token_type = TokenType::RegexFlags;
         while (!is_eof() && is_ascii_alpha(m_current_char))
             consume();
     } else if (m_current_char == '`') {
         consume();
 
         if (!in_template) {
             token_type = TokenType::TemplateLiteralStart;
             m_template_states.append({ false, 0 });
         } else {
             if (m_template_states.last().in_expr) {
                 m_template_states.append({ false, 0 });
                 token_type = TokenType::TemplateLiteralStart;
             } else {
                 m_template_states.take_last();
                 token_type = TokenType::TemplateLiteralEnd;
             }
         }
     } else if (in_template && m_template_states.last().in_expr && m_template_states.last().open_bracket_count == 0 && m_current_char == '}') {
         consume();
         token_type = TokenType::TemplateLiteralExprEnd;
         m_template_states.last().in_expr = false;
     } else if (in_template && !m_template_states.last().in_expr) {
         if (is_eof()) {
             token_type = TokenType::UnterminatedTemplateLiteral;
             m_template_states.take_last();
         } else if (match('$', '{')) {
             token_type = TokenType::TemplateLiteralExprStart;
             consume();
             consume();
             m_template_states.last().in_expr = true;
         } else {
             while (!match('$', '{') && m_current_char != '`' && !is_eof()) {
                 if (match('\\', '$') || match('\\', '`'))
                     consume();
                 consume();
             }
             if (is_eof() && !m_template_states.is_empty())
                 token_type = TokenType::UnterminatedTemplateLiteral;
             else
                 token_type = TokenType::TemplateLiteralString;
         }
     } else if (m_current_char == '#') {
         // Note: This has some duplicated code with the identifier lexing below
         consume();
         auto code_point = is_identifier_start(identifier_length);
         if (code_point.has_value()) {
             StringBuilder builder;
             builder.append_code_point('#');
             do {
                 builder.append_code_point(*code_point);
                 for (size_t i = 0; i < identifier_length; ++i)
                     consume();
 
                 code_point = is_identifier_middle(identifier_length);
             } while (code_point.has_value());
 
             identifier = builder.string_view();
             token_type = TokenType::PrivateIdentifier;
 
             m_parsed_identifiers->identifiers.set(*identifier);
         } else {
             token_type = TokenType::Invalid;
             token_message = "Start of private name '#' but not followed by valid identifier";
         }
     } else if (auto code_point = is_identifier_start(identifier_length); code_point.has_value()) {
         bool has_escaped_character = false;
         // identifier or keyword
         StringBuilder builder;
         do {
             builder.append_code_point(*code_point);
             for (size_t i = 0; i < identifier_length; ++i)
                 consume();
 
             has_escaped_character |= identifier_length > 1;
 
             code_point = is_identifier_middle(identifier_length);
         } while (code_point.has_value());
 
         identifier = builder.string_view();
         m_parsed_identifiers->identifiers.set(*identifier);
 
         auto it = s_keywords.find(identifier->hash(), [&](auto& entry) { return entry.key == identifier; });
         if (it == s_keywords.end())
             token_type = TokenType::Identifier;
         else
             token_type = has_escaped_character ? TokenType::EscapedKeyword : it->value;
     } else if (is_numeric_literal_start()) {
         token_type = TokenType::NumericLiteral;
         bool is_invalid_numeric_literal = false;
         if (m_current_char == '0') {
             consume();
             if (m_current_char == '.') {
                 // decimal
                 consume();
                 while (is_ascii_digit(m_current_char))
                     consume();
                 if (m_current_char == 'e' || m_current_char == 'E')
                     is_invalid_numeric_literal = !consume_exponent();
             } else if (m_current_char == 'e' || m_current_char == 'E') {
                 is_invalid_numeric_literal = !consume_exponent();
             } else if (m_current_char == 'o' || m_current_char == 'O') {
                 // octal
                 is_invalid_numeric_literal = !consume_octal_number();
                 if (m_current_char == 'n') {
                     consume();
                     token_type = TokenType::BigIntLiteral;
                 }
             } else if (m_current_char == 'b' || m_current_char == 'B') {
                 // binary
                 is_invalid_numeric_literal = !consume_binary_number();
                 if (m_current_char == 'n') {
                     consume();
                     token_type = TokenType::BigIntLiteral;
                 }
             } else if (m_current_char == 'x' || m_current_char == 'X') {
                 // hexadecimal
                 is_invalid_numeric_literal = !consume_hexadecimal_number();
                 if (m_current_char == 'n') {
                     consume();
                     token_type = TokenType::BigIntLiteral;
                 }
             } else if (m_current_char == 'n') {
                 consume();
                 token_type = TokenType::BigIntLiteral;
             } else if (is_ascii_digit(m_current_char)) {
                 // octal without '0o' prefix. Forbidden in 'strict mode'
                 do {
                     consume();
                 } while (is_ascii_digit(m_current_char));
             }
         } else {
             // 1...9 or period
             while (is_ascii_digit(m_current_char) || match_numeric_literal_separator_followed_by(is_ascii_digit))
                 consume();
             if (m_current_char == 'n') {
                 consume();
                 token_type = TokenType::BigIntLiteral;
             } else {
                 if (m_current_char == '.') {
                     consume();
                     if (m_current_char == '_')
                         is_invalid_numeric_literal = true;
 
                     while (is_ascii_digit(m_current_char) || match_numeric_literal_separator_followed_by(is_ascii_digit)) {
                         consume();
                     }
                 }
                 if (m_current_char == 'e' || m_current_char == 'E')
                     is_invalid_numeric_literal = is_invalid_numeric_literal || !consume_exponent();
             }
         }
         if (is_invalid_numeric_literal) {
             token_type = TokenType::Invalid;
             token_message = "Invalid numeric literal";
         }
     } else if (m_current_char == '"' || m_current_char == '\'') {
         char stop_char = m_current_char;
         consume();
         // Note: LS/PS line terminators are allowed in string literals.
         while (m_current_char != stop_char && m_current_char != '\r' && m_current_char != '\n' && !is_eof()) {
             if (m_current_char == '\\') {
                 consume();
                 if (m_current_char == '\r' && m_position < m_source.length() && m_source[m_position] == '\n') {
                     consume();
                 }
             }
             consume();
         }
         if (m_current_char != stop_char) {
             token_type = TokenType::UnterminatedStringLiteral;
         } else {
             consume();
             token_type = TokenType::StringLiteral;
         }
     } else if (m_current_char == '/' && !slash_means_division()) {
         consume();
         token_type = consume_regex_literal();
     } else if (m_eof) {
         if (unterminated_comment) {
             token_type = TokenType::Invalid;
             token_message = "Unterminated multi-line comment";
         } else {
             token_type = TokenType::Eof;
         }
     } else {
         // There is only one four-char operator: >>>=
         bool found_four_char_token = false;
         if (match('>', '>', '>', '=')) {
             found_four_char_token = true;
             consume();
             consume();
             consume();
             consume();
             token_type = TokenType::UnsignedShiftRightEquals;
         }
 
         bool found_three_char_token = false;
         if (!found_four_char_token && m_position + 1 < m_source.length()) {
             auto three_chars_view = m_source.substring_view(m_position - 1, 3);
             auto it = s_three_char_tokens.find(three_chars_view.hash(), [&](auto& entry) { return entry.key == three_chars_view; });
             if (it != s_three_char_tokens.end()) {
                 found_three_char_token = true;
                 consume();
                 consume();
                 consume();
                 token_type = it->value;
             }
         }
 
         bool found_two_char_token = false;
         if (!found_four_char_token && !found_three_char_token && m_position < m_source.length()) {
             auto two_chars_view = m_source.substring_view(m_position - 1, 2);
             auto it = s_two_char_tokens.find(two_chars_view.hash(), [&](auto& entry) { return entry.key == two_chars_view; });
             if (it != s_two_char_tokens.end()) {
                 // OptionalChainingPunctuator :: ?. [lookahead ∉ DecimalDigit]
                 if (!(it->value == TokenType::QuestionMarkPeriod && m_position + 1 < m_source.length() && is_ascii_digit(m_source[m_position + 1]))) {
                     found_two_char_token = true;
                     consume();
                     consume();
                     token_type = it->value;
                 }
             }
         }
 
         bool found_one_char_token = false;
         if (!found_four_char_token && !found_three_char_token && !found_two_char_token) {
             auto it = s_single_char_tokens.find(m_current_char);
             if (it != s_single_char_tokens.end()) {
                 found_one_char_token = true;
                 consume();
                 token_type = it->value;
             }
         }
 
         if (!found_four_char_token && !found_three_char_token && !found_two_char_token && !found_one_char_token) {
             consume();
             token_type = TokenType::Invalid;
         }
     }
 
     if (!m_template_states.is_empty() && m_template_states.last().in_expr) {
         if (token_type == TokenType::CurlyOpen) {
             m_template_states.last().open_bracket_count++;
         } else if (token_type == TokenType::CurlyClose) {
             m_template_states.last().open_bracket_count--;
         }
     }
 
-    m_current_token = Token(
-        token_type,
-        token_message,
-        m_source.substring_view(trivia_start - 1, value_start - trivia_start),
-        m_source.substring_view(value_start - 1, m_position - value_start),
-        m_filename,
-        value_start_line_number,
-        value_start_column_number,
-        m_position);
+    if (m_hit_invalid_unicode.has_value()) {
+        value_start = m_hit_invalid_unicode.value() - 1;
+        m_current_token = Token(TokenType::Invalid, "Invalid unicode codepoint in source",
+            "", // Since the invalid unicode can occur anywhere in the current token the trivia is not correct
+            m_source.substring_view(value_start + 1, min(4u, m_source.length() - value_start - 2)),
+            m_filename,
+            m_line_number,
+            m_line_column - 1,
+            m_position);
+        m_hit_invalid_unicode.clear();
+        // Do not produce any further tokens.
+        VERIFY(is_eof());
+    } else {
+        m_current_token = Token(
+            token_type,
+            token_message,
+            m_source.substring_view(trivia_start - 1, value_start - trivia_start),
+            m_source.substring_view(value_start - 1, m_position - value_start),
+            m_filename,
+            value_start_line_number,
+            value_start_column_number,
+            m_position);
+    }
 
     if (identifier.has_value())
         m_current_token.set_identifier_value(identifier.release_value());
 
     if constexpr (LEXER_DEBUG) {
         dbgln("------------------------------");
         dbgln("Token: {}", m_current_token.name());
         dbgln("Trivia: _{}_", m_current_token.trivia());
         dbgln("Value: _{}_", m_current_token.value());
         dbgln("Line: {}, Column: {}", m_current_token.line_number(), m_current_token.line_column());
         dbgln("------------------------------");
     }
 
     return m_current_token;
 }
diff --git a/Userland/Libraries/LibJS/Lexer.h b/Userland/Libraries/LibJS/Lexer.h
index 6f5e3cbdb5..326f5aa45b 100644
--- a/Userland/Libraries/LibJS/Lexer.h
+++ b/Userland/Libraries/LibJS/Lexer.h
@@ -30,65 +30,67 @@ public:
 private:
     void consume();
     bool consume_exponent();
     bool consume_octal_number();
     bool consume_hexadecimal_number();
     bool consume_binary_number();
     bool consume_decimal_number();
 
     bool is_unicode_character() const;
     u32 current_code_point() const;
 
     bool is_eof() const;
     bool is_line_terminator() const;
     bool is_whitespace() const;
     Optional<u32> is_identifier_unicode_escape(size_t& identifier_length) const;
     Optional<u32> is_identifier_start(size_t& identifier_length) const;
     Optional<u32> is_identifier_middle(size_t& identifier_length) const;
     bool is_line_comment_start(bool line_has_token_yet) const;
     bool is_block_comment_start() const;
     bool is_block_comment_end() const;
     bool is_numeric_literal_start() const;
     bool match(char, char) const;
     bool match(char, char, char) const;
     bool match(char, char, char, char) const;
     template<typename Callback>
     bool match_numeric_literal_separator_followed_by(Callback) const;
     bool slash_means_division() const;
 
     TokenType consume_regex_literal();
 
     StringView m_source;
     size_t m_position { 0 };
     Token m_current_token;
     char m_current_char { 0 };
     bool m_eof { false };
 
     StringView m_filename;
     size_t m_line_number { 1 };
     size_t m_line_column { 0 };
 
     bool m_regex_is_in_character_class { false };
 
     struct TemplateState {
         bool in_expr;
         u8 open_bracket_count;
     };
     Vector<TemplateState> m_template_states;
 
     bool m_allow_html_comments { true };
 
+    Optional<size_t> m_hit_invalid_unicode;
+
     static HashMap<FlyString, TokenType> s_keywords;
     static HashMap<String, TokenType> s_three_char_tokens;
     static HashMap<String, TokenType> s_two_char_tokens;
     static HashMap<char, TokenType> s_single_char_tokens;
 
     struct ParsedIdentifiers : public RefCounted<ParsedIdentifiers> {
         // Resolved identifiers must be kept alive for the duration of the parsing stage, otherwise
         // the only references to these strings are deleted by the Token destructor.
         HashTable<FlyString> identifiers;
     };
 
     RefPtr<ParsedIdentifiers> m_parsed_identifiers;
 };
 
 }
