commit 96c69d875b91fba9ac501f1376144bf662644252
Author: Eric Blankenhorn <eric@wolfssl.com>
Date:   Wed Nov 29 10:02:15 2023 -0600

    Fix Wild read in MqttProps_Free

diff --git a/src/mqtt_packet.c b/src/mqtt_packet.c
index 5f105ab..dae2ab1 100644
--- a/src/mqtt_packet.c
+++ b/src/mqtt_packet.c
@@ -364,296 +364,292 @@ int MqttEncode_Data(byte *buf, const byte *data, word16 data_len)
 #ifdef WOLFMQTT_V5
 /* Returns the (positive) number of bytes encoded, or a (negative) error code.
    If pointer to buf is NULL, then only calculate the length of properties. */
 int MqttEncode_Props(MqttPacketType packet, MqttProp* props, byte* buf)
 {
     int rc = 0, tmp;
     MqttProp* cur_prop = props;
-    int num_props = 0;
 
     /* TODO: Check against max size. Sometimes all properties are not
              expected to be added */
     /* TODO: Validate property type is allowed for packet type */
 
     /* loop through the list properties */
     while ((cur_prop != NULL) && (rc >= 0))
     {
         /* TODO: validate packet type */
         (void)packet;
 
         /* Encode the Identifier */
         tmp = MqttEncode_Vbi(buf, (word32)cur_prop->type);
         rc += tmp;
         if (buf != NULL) {
             buf += tmp;
         }
 
         switch (gPropMatrix[cur_prop->type].data)
         {
             case MQTT_DATA_TYPE_BYTE:
             {
                 if (buf != NULL) {
                     *(buf++) = cur_prop->data_byte;
                 }
                 rc++;
                 break;
             }
             case MQTT_DATA_TYPE_SHORT:
             {
                 tmp = MqttEncode_Num(buf, cur_prop->data_short);
                 rc += tmp;
                 if (buf != NULL) {
                     buf += tmp;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_INT:
             {
                 tmp = MqttEncode_Int(buf, cur_prop->data_int);
                 rc += tmp;
                 if (buf != NULL) {
                     buf += tmp;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_STRING:
             {
                 tmp = MqttEncode_String(buf,
                         (const char*)cur_prop->data_str.str);
                 rc += tmp;
                 if (buf != NULL) {
                     buf += tmp;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_VAR_INT:
             {
                 tmp = MqttEncode_Vbi(buf, cur_prop->data_int);
                 rc += tmp;
                 if (buf != NULL) {
                     buf += tmp;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_BINARY:
             {
                 tmp = MqttEncode_Data(buf, (const byte*)cur_prop->data_bin.data,
                         cur_prop->data_bin.len);
                 rc += tmp;
                 if (buf != NULL) {
                     buf += tmp;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_STRING_PAIR:
             {
                 /* String is prefixed with a Two Byte Integer length field that
                    gives the number of bytes */
                 tmp = MqttEncode_String(buf,
                         (const char*)cur_prop->data_str.str);
                 rc += tmp;
                 if (buf != NULL) {
                     buf += tmp;
                 }
 
                 tmp = MqttEncode_String(buf,
                         (const char*)cur_prop->data_str2.str);
                 rc += tmp;
                 if (buf != NULL) {
                     buf += tmp;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_NONE:
             default:
             {
                 /* Invalid property data type */
                 rc = MQTT_TRACE_ERROR(MQTT_CODE_ERROR_PROPERTY);
                 break;
             }
         }
 
-        num_props++;
-
         cur_prop = cur_prop->next;
     }
 
     return rc;
 }
 
 /* Returns the (positive) number of bytes decoded, or a (negative) error code.
    Allocates MqttProp structures for all properties.
    Head of list is stored in props. */
 int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
         word32 buf_len, word32 prop_len)
 {
     int rc = 0;
     int total, tmp;
     MqttProp* cur_prop;
     byte* buf = pbuf;
 
-    *props = NULL;
     total = 0;
 
     while (((int)prop_len > 0) && (rc >= 0))
     {
         /* Allocate a structure and add to head. */
         cur_prop = MqttProps_Add(props);
         if (cur_prop == NULL) {
             rc = MQTT_TRACE_ERROR(MQTT_CODE_ERROR_MEMORY);
             break;
         }
 
         /* Decode the Identifier */
         rc = MqttDecode_Vbi(buf, (word32*)&cur_prop->type,
                 (word32)(buf_len - (buf - pbuf)));
         if (rc < 0) {
             break;
         }
         tmp = rc;
         buf += tmp;
         total += tmp;
         prop_len -= tmp;
 
         /* TODO: Validate property type is allowed for packet type */
         (void)packet;
 
         if (cur_prop->type >= sizeof(gPropMatrix) / sizeof(gPropMatrix[0])) {
             rc = MQTT_TRACE_ERROR(MQTT_CODE_ERROR_PROPERTY);
             break;
         }
 
         switch (gPropMatrix[cur_prop->type].data)
         {
             case MQTT_DATA_TYPE_BYTE:
             {
                 cur_prop->data_byte = *buf++;
                 tmp++;
                 total++;
                 prop_len--;
                 break;
             }
             case MQTT_DATA_TYPE_SHORT:
             {
                 tmp = MqttDecode_Num(buf, &cur_prop->data_short);
                 buf += tmp;
                 total += tmp;
                 prop_len -= (word32)tmp;
                 break;
             }
             case MQTT_DATA_TYPE_INT:
             {
                 tmp = MqttDecode_Int(buf, &cur_prop->data_int);
                 buf += tmp;
                 total += tmp;
                 prop_len -= tmp;
                 break;
             }
             case MQTT_DATA_TYPE_STRING:
             {
                 tmp = MqttDecode_String(buf,
                         (const char**)&cur_prop->data_str.str,
                         &cur_prop->data_str.len);
                 if (cur_prop->data_str.len <= (buf_len - (buf - pbuf))) {
                     buf += tmp;
                     total += tmp;
                     prop_len -= (word32)tmp;
                 }
                 else {
                     /* Invalid length */
                     rc = MQTT_TRACE_ERROR(MQTT_CODE_ERROR_PROPERTY);
                 }
                 break;
             }
             case MQTT_DATA_TYPE_VAR_INT:
             {
                 tmp = MqttDecode_Vbi(buf, &cur_prop->data_int,
                         (word32)(buf_len - (buf - pbuf)));
                 if (tmp < 0) {
                     return tmp;
                 }
                 buf += tmp;
                 total += tmp;
                 prop_len -= (word32)tmp;
                 break;
             }
             case MQTT_DATA_TYPE_BINARY:
             {
                 /* Binary type is a two byte integer "length"
                    followed by that number of bytes */
                 tmp = MqttDecode_Num(buf, &cur_prop->data_bin.len);
                 buf += tmp;
                 total += tmp;
                 prop_len -= tmp;
 
                 if (cur_prop->data_bin.len <= (buf_len - (buf - pbuf))) {
                     cur_prop->data_bin.data = buf;
                     buf += cur_prop->data_bin.len;
                     total += (int)cur_prop->data_bin.len;
                     prop_len -= cur_prop->data_bin.len;
                 }
                 else {
                     /* Invalid length */
                     rc = MQTT_TRACE_ERROR(MQTT_CODE_ERROR_PROPERTY);
                 }
                 break;
             }
             case MQTT_DATA_TYPE_STRING_PAIR:
             {
                 /* String is prefixed with a Two Byte Integer length
                    field that gives the number of bytes */
                 tmp = MqttDecode_String(buf,
                         (const char**)&cur_prop->data_str.str,
                         &cur_prop->data_str.len);
                 if (cur_prop->data_str.len <=
                     (buf_len - (buf - pbuf))) {
                     buf += tmp;
                     total += tmp;
                     prop_len -= (word32)tmp;
 
                     tmp = MqttDecode_String(buf,
                             (const char**)&cur_prop->data_str2.str,
                             &cur_prop->data_str2.len);
                     if (cur_prop->data_str2.len <=
                         (buf_len - (buf - pbuf))) {
                         buf += tmp;
                         total += tmp;
                         prop_len -= (word32)tmp;
                     }
                     else {
                         /* Invalid length */
                         rc = MQTT_TRACE_ERROR(MQTT_CODE_ERROR_PROPERTY);
                     }
                 }
                 else {
                     /* Invalid length */
                     rc = MQTT_TRACE_ERROR(MQTT_CODE_ERROR_PROPERTY);
                 }
                 break;
             }
             case MQTT_DATA_TYPE_NONE:
                 PRINTF("DATA TYPE NONE");
                 break;
             default:
             {
                 PRINTF("INVALID DATA TYPE");
                 /* Invalid property data type */
                 rc = MQTT_TRACE_ERROR(MQTT_CODE_ERROR_PROPERTY);
                 break;
             }
         }
     };
 
     if (rc < 0) {
         /* Free the property */
         MqttProps_Free(*props);
         *props = NULL;
     }
     else {
         rc = total;
     }
 
     return rc;
 }
 #endif
 
 /* Packet Type Encoders/Decoders */
@@ -805,54 +801,55 @@ int MqttEncode_Connect(byte *tx_buf, int tx_buf_len, MqttConnect *mc_connect)
 int MqttDecode_ConnectAck(byte *rx_buf, int rx_buf_len,
     MqttConnectAck *connect_ack)
 {
     int header_len, remain_len;
     byte *rx_payload;
 
     /* Validate required arguments */
     if (rx_buf == NULL || rx_buf_len <= 0) {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
     }
 
     /* Decode fixed header */
     header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
         MQTT_PACKET_TYPE_CONNECT_ACK, NULL, NULL, NULL);
     if (header_len < 0) {
         return header_len;
     }
     rx_payload = &rx_buf[header_len];
 
     /* Decode variable header */
     if (connect_ack) {
         connect_ack->flags = *rx_payload++;
         connect_ack->return_code = *rx_payload++;
 
 #ifdef WOLFMQTT_V5
+        connect_ack->props = 0;
         if (connect_ack->protocol_level >= MQTT_CONNECT_PROTOCOL_LEVEL_5) {
             word32 props_len = 0;
             int tmp;
             /* Decode Length of Properties */
             tmp = MqttDecode_Vbi(rx_payload, &props_len,
                     (word32)(rx_buf_len - (rx_payload - rx_buf)));
             if (tmp < 0) {
                 return tmp;
             }
             rx_payload += tmp;
             if (props_len > 0) {
                 /* Decode the Properties */
                 tmp = MqttDecode_Props(MQTT_PACKET_TYPE_CONNECT_ACK,
                                &connect_ack->props, rx_payload,
                                (word32)(rx_buf_len - (rx_payload - rx_buf)),
                                props_len);
                 if (tmp < 0)
                     return tmp;
                 rx_payload += tmp;
             }
         }
 #endif
     }
 
     (void)rx_payload;
 
     /* Return total length of packet */
     return header_len + remain_len;
 }
@@ -965,90 +962,91 @@ int MqttEncode_Publish(byte *tx_buf, int tx_buf_len, MqttPublish *publish,
 int MqttDecode_Publish(byte *rx_buf, int rx_buf_len, MqttPublish *publish)
 {
     int header_len, remain_len, variable_len, payload_len;
     byte *rx_payload;
 
     /* Validate required arguments */
     if (rx_buf == NULL || rx_buf_len <= 0 || publish == NULL) {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
     }
 
     /* Decode fixed header */
     publish->type = MQTT_PACKET_TYPE_PUBLISH;
     header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len,
         &remain_len, publish->type, &publish->qos,
         &publish->retain, &publish->duplicate);
     if (header_len < 0) {
         return header_len;
     }
     rx_payload = &rx_buf[header_len];
 
     /* Decode variable header */
     variable_len = MqttDecode_String(rx_payload, &publish->topic_name,
         &publish->topic_name_len);
     if (variable_len + header_len <= rx_buf_len) {
         rx_payload += variable_len;
     }
     else {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_OUT_OF_BUFFER);
     }
 
     /* If QoS > 0 then get packet Id */
     if (publish->qos > MQTT_QOS_0) {
         if (rx_payload - rx_buf + MQTT_DATA_LEN_SIZE > rx_buf_len) {
             return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_OUT_OF_BUFFER);
         }
         variable_len += MqttDecode_Num(rx_payload, &publish->packet_id);
         if (variable_len + header_len <= rx_buf_len) {
             rx_payload += MQTT_DATA_LEN_SIZE;
         }
         else {
             return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_OUT_OF_BUFFER);
         }
     }
 
 #ifdef WOLFMQTT_V5
+    publish->props = 0;
     if (publish->protocol_level >= MQTT_CONNECT_PROTOCOL_LEVEL_5) {
         word32 props_len = 0;
         int tmp;
 
         /* Decode Length of Properties */
         tmp = MqttDecode_Vbi(rx_payload, &props_len,
                 (word32)(rx_buf_len - (rx_payload - rx_buf)));
         if (tmp < 0)
             return tmp;
         variable_len += tmp + props_len;
         if (variable_len + header_len <= rx_buf_len) {
             rx_payload += tmp;
             if (props_len > 0) {
                 /* Decode the Properties */
                 tmp = MqttDecode_Props((MqttPacketType)publish->type,
                     &publish->props, rx_payload,
                     (word32)(rx_buf_len - (rx_payload - rx_buf)), props_len);
                 if (tmp < 0)
                     return tmp;
                 rx_payload += tmp;
             }
         }
         else {
             return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_OUT_OF_BUFFER);
         }
     }
 #endif
 
     /* Decode Payload */
     payload_len = remain_len - variable_len;
     publish->buffer = rx_payload;
     publish->buffer_new = 1;
     publish->buffer_pos = 0;
     publish->buffer_len = payload_len;
     publish->total_len = payload_len;
 
     /* Only return the length provided in rx_buf_len */
     if ((int)publish->buffer_len >
         (rx_buf_len - (header_len + variable_len)))
     {
         publish->buffer_len = (rx_buf_len - (header_len + variable_len));
     }
 
     return header_len + variable_len + payload_len;
 }
@@ -1134,69 +1132,70 @@ int MqttEncode_PublishResp(byte* tx_buf, int tx_buf_len, byte type,
 int MqttDecode_PublishResp(byte* rx_buf, int rx_buf_len, byte type,
     MqttPublishResp *publish_resp)
 {
     int header_len, remain_len;
     byte *rx_payload;
 
     /* Validate required arguments */
     if (rx_buf == NULL || rx_buf_len <= 0) {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
     }
 
     /* Decode fixed header */
     header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
         type, NULL, NULL, NULL);
     if (header_len < 0) {
         return header_len;
     }
     rx_payload = &rx_buf[header_len];
 
     /* Decode variable header */
     if (publish_resp) {
         rx_payload += MqttDecode_Num(rx_payload, &publish_resp->packet_id);
 
 #ifdef WOLFMQTT_V5
+        publish_resp->props = 0;
         if (publish_resp->protocol_level >= MQTT_CONNECT_PROTOCOL_LEVEL_5) {
             if (remain_len > MQTT_DATA_LEN_SIZE) {
                 /* Decode the Reason Code */
                 publish_resp->reason_code = *rx_payload++;
             }
             else {
                 publish_resp->reason_code = MQTT_REASON_SUCCESS;
             }
 
             if (remain_len > MQTT_DATA_LEN_SIZE+1) {
                 word32 props_len = 0;
                 int tmp;
 
                 /* Decode Length of Properties */
                 tmp = MqttDecode_Vbi(rx_payload, &props_len,
                         (word32)(rx_buf_len - (rx_payload - rx_buf)));
                 if (tmp < 0)
                     return tmp;
 
                 if (props_len <= (word32)(rx_buf_len - (rx_payload - rx_buf))) {
                     rx_payload += tmp;
                     if (props_len > 0) {
                         /* Decode the Properties */
                         tmp = MqttDecode_Props((MqttPacketType)type,
                                 &publish_resp->props, rx_payload,
                                 (word32)(rx_buf_len - (rx_payload - rx_buf)),
                                 props_len);
                         if (tmp < 0)
                             return tmp;
                         rx_payload += tmp;
                     }
                 }
                 else {
                     return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_OUT_OF_BUFFER);
                 }
             }
         }
 #endif
     }
 
     (void)rx_payload;
 
     /* Return total length of packet */
     return header_len + remain_len;
 }
@@ -1285,63 +1284,64 @@ int MqttEncode_Subscribe(byte *tx_buf, int tx_buf_len,
 int MqttDecode_SubscribeAck(byte* rx_buf, int rx_buf_len,
     MqttSubscribeAck *subscribe_ack)
 {
     int header_len, remain_len;
     byte *rx_payload;
 
     /* Validate required arguments */
     if (rx_buf == NULL || rx_buf_len <= 0 || subscribe_ack == NULL) {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
     }
 
     /* Decode fixed header */
     header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
         MQTT_PACKET_TYPE_SUBSCRIBE_ACK, NULL, NULL, NULL);
     if (header_len < 0) {
         return header_len;
     }
     rx_payload = &rx_buf[header_len];
 
     /* Decode variable header */
     if (subscribe_ack) {
         rx_payload += MqttDecode_Num(rx_payload, &subscribe_ack->packet_id);
 
 #ifdef WOLFMQTT_V5
+        subscribe_ack->props = 0;
         if ((subscribe_ack->protocol_level >= MQTT_CONNECT_PROTOCOL_LEVEL_5) &&
             (remain_len > MQTT_DATA_LEN_SIZE)) {
             word32 props_len = 0;
             int tmp;
 
             /* Decode Length of Properties */
             tmp = MqttDecode_Vbi(rx_payload, &props_len,
                     (word32)(rx_buf_len - (rx_payload - rx_buf)));
             if (tmp < 0)
                 return tmp;
 
             if (props_len <= (word32)(rx_buf_len - (rx_payload - rx_buf))) {
                 rx_payload += tmp;
                 if (props_len > 0) {
                     /* Decode the Properties */
                     tmp = MqttDecode_Props(MQTT_PACKET_TYPE_SUBSCRIBE_ACK,
                                 &subscribe_ack->props, rx_payload,
                                 (word32)(rx_buf_len - (rx_payload - rx_buf)),
                                 props_len);
                     if (tmp < 0)
                         return tmp;
                     rx_payload += tmp;
                 }
             }
             else {
                 return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_OUT_OF_BUFFER);
             }
         }
 #endif
 
         /* payload is list of return codes (MqttSubscribeAckReturnCodes) */
         if (remain_len > MAX_MQTT_TOPICS)
             remain_len = MAX_MQTT_TOPICS;
         XMEMCPY(subscribe_ack->return_codes, rx_payload, remain_len);
     }
 
     /* Return total length of packet */
     return header_len + remain_len;
 }
@@ -1424,62 +1424,63 @@ int MqttEncode_Unsubscribe(byte *tx_buf, int tx_buf_len,
 int MqttDecode_UnsubscribeAck(byte *rx_buf, int rx_buf_len,
     MqttUnsubscribeAck *unsubscribe_ack)
 {
     int header_len, remain_len;
     byte *rx_payload;
 
     /* Validate required arguments */
     if (rx_buf == NULL || rx_buf_len <= 0 || unsubscribe_ack == NULL) {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
     }
 
     /* Decode fixed header */
     header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
         MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK, NULL, NULL, NULL);
     if (header_len < 0) {
         return header_len;
     }
     rx_payload = &rx_buf[header_len];
 
     /* Decode variable header */
     if (unsubscribe_ack) {
         rx_payload += MqttDecode_Num(rx_payload, &unsubscribe_ack->packet_id);
 #ifdef WOLFMQTT_V5
+        unsubscribe_ack->props = 0;
         if (unsubscribe_ack->protocol_level >= MQTT_CONNECT_PROTOCOL_LEVEL_5) {
             if (remain_len > MQTT_DATA_LEN_SIZE) {
                 word32 props_len = 0;
                 int tmp;
 
                 /* Decode Length of Properties */
                 tmp = MqttDecode_Vbi(rx_payload, &props_len,
                         (word32)(rx_buf_len - (rx_payload - rx_buf)));
                 if (tmp < 0)
                     return tmp;
 
                 if (props_len <= (word32)(rx_buf_len - (rx_payload - rx_buf))) {
                     rx_payload += tmp;
                     if (props_len > 0) {
                         /* Decode the Properties */
                         tmp = MqttDecode_Props(MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK,
                                 &unsubscribe_ack->props, rx_payload,
                                 (word32)(rx_buf_len - (rx_payload - rx_buf)),
                                 props_len);
                         if (tmp < 0)
                             return tmp;
                         rx_payload += tmp;
                     }
                 }
                 else {
                     return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_OUT_OF_BUFFER);
                 }
             }
 
             /* Reason codes are stored in the payload */
             unsubscribe_ack->reason_codes = rx_payload;
         }
 #endif
     }
     (void)rx_payload;
 
     /* Return total length of packet */
     return header_len + remain_len;
 }
@@ -1609,55 +1610,56 @@ int MqttEncode_Disconnect(byte *tx_buf, int tx_buf_len,
 #ifdef WOLFMQTT_V5
 int MqttDecode_Disconnect(byte *rx_buf, int rx_buf_len, MqttDisconnect *disc)
 {
     int header_len, remain_len, tmp;
     byte *rx_payload;
     word32 props_len = 0;
 
     /* Validate required arguments */
     if ((rx_buf == NULL) || (rx_buf_len <= 0) || (disc == NULL)) {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
     }
 
     /* Decode fixed header */
     header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
         MQTT_PACKET_TYPE_DISCONNECT, NULL, NULL, NULL);
     if (header_len < 0) {
         return header_len;
     }
     rx_payload = &rx_buf[header_len];
 
+    disc->props = 0;
     if (remain_len > 0) {
         /* Decode variable header */
         disc->reason_code = *rx_payload++;
 
         if (remain_len > 1) {
             /* Decode Length of Properties */
             tmp = MqttDecode_Vbi(rx_payload, &props_len,
                     (word32)(rx_buf_len - (rx_payload - rx_buf)));
             if (tmp < 0)
                 return tmp;
 
             if (props_len <= (word32)(rx_buf_len - (rx_payload - rx_buf))) {
                 rx_payload += tmp;
                 if (props_len > 0) {
                     /* Decode the Properties */
                     tmp = MqttDecode_Props(MQTT_PACKET_TYPE_DISCONNECT,
                             &disc->props, rx_payload,
                             (word32)(rx_buf_len - (rx_payload - rx_buf)),
                             props_len);
                     if (tmp < 0)
                         return tmp;
                     rx_payload += tmp;
                 }
             }
             else {
                 return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_OUT_OF_BUFFER);
             }
         }
     }
 
     (void)rx_payload;
 
     /* Return total length of packet */
     return header_len + remain_len;
 }
@@ -1722,76 +1724,78 @@ int MqttEncode_Auth(byte *tx_buf, int tx_buf_len, MqttAuth *auth)
 int MqttDecode_Auth(byte *rx_buf, int rx_buf_len, MqttAuth *auth)
 {
     int header_len, remain_len, tmp;
     byte *rx_payload;
     word32 props_len = 0;
 
 
     /* Validate required arguments */
     if ((rx_buf == NULL) || (rx_buf_len <= 0) || (auth == NULL)) {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_BAD_ARG);
     }
 
     /* Decode fixed header */
     header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
                   MQTT_PACKET_TYPE_AUTH, NULL, NULL, NULL);
     if (header_len < 0) {
         return header_len;
     }
     rx_payload = &rx_buf[header_len];
 
     /* Decode variable header */
     auth->reason_code = *rx_payload++;
     if ((auth->reason_code == MQTT_REASON_SUCCESS) ||
         (auth->reason_code == MQTT_REASON_CONT_AUTH))
     {
+        auth->props = 0;
+
         /* Decode Length of Properties */
         tmp = MqttDecode_Vbi(rx_payload, &props_len,
                 (word32)(rx_buf_len - (rx_payload - rx_buf)));
         if (tmp < 0)
             return tmp;
 
         if (props_len <= (word32)(rx_buf_len - (rx_payload - rx_buf))) {
             rx_payload += tmp;
             if ((rx_payload - rx_buf) > rx_buf_len) {
                 return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_OUT_OF_BUFFER);
             }
             if (props_len > 0) {
                 /* Decode the Properties */
                 tmp = MqttDecode_Props(MQTT_PACKET_TYPE_AUTH,
                         &auth->props, rx_payload,
                         (word32)(rx_buf_len - (rx_payload - rx_buf)),
                         props_len);
                 if (tmp < 0)
                     return tmp;
                 rx_payload += tmp;
             }
             else if (auth->reason_code != MQTT_REASON_SUCCESS) {
                 /* The Reason Code and Property Length can be omitted if the
                    Reason Code is 0x00 (Success) and there are no Properties.
                    In this case the AUTH has a Remaining Length of 0. */
                 return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_MALFORMED_DATA);
             }
             if (auth->props != NULL) {
                 /* Must have Authentication Method */
 
                 /* Must have Authentication Data */
 
                 /* May have zero or more User Property pairs */
             }
             else {
                 return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_MALFORMED_DATA);
             }
         }
         else {
             return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_OUT_OF_BUFFER);
         }
     }
     else {
         return MQTT_TRACE_ERROR(MQTT_CODE_ERROR_MALFORMED_DATA);
     }
 
     (void)rx_payload;
 
     /* Return total length of packet */
     return header_len + remain_len;
 }
