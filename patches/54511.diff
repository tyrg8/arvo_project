commit 6324feaa1bdf8e4f50e49d332ce2ef9ec823aa98
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Tue Jan 3 15:31:01 2023 +0000

    oss-fuzz 54511: Clean up after processing annotations and acroforms
    
    We weren't doing the same clean up afer rendering annotations and acroforms that
    we do after the main page contents, meaning an error could result in extra
    gsave levels persisting after the pdfi interpreter exits, leading to crashes
    or other problems.

diff --git a/pdf/pdf_page.c b/pdf/pdf_page.c
index 4a473d07e..45b31c086 100644
--- a/pdf/pdf_page.c
+++ b/pdf/pdf_page.c
@@ -1,41 +1,41 @@
-/* Copyright (C) 2019-2022 Artifex Software, Inc.
+/* Copyright (C) 2019-2023 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 /* Page-level operations for the PDF interpreter */
 
 #include "pdf_int.h"
 #include "pdf_stack.h"
 #include "pdf_doc.h"
 #include "pdf_deref.h"
 #include "pdf_page.h"
 #include "pdf_file.h"
 #include "pdf_dict.h"
 #include "pdf_array.h"
 #include "pdf_loop_detect.h"
 #include "pdf_colour.h"
 #include "pdf_trans.h"
 #include "pdf_font_types.h"
 #include "pdf_gstate.h"
 #include "pdf_misc.h"
 #include "pdf_optcontent.h"
 #include "pdf_device.h"
 #include "pdf_annot.h"
 #include "pdf_check.h"
 #include "pdf_mark.h"
 
 #include "gscoord.h"        /* for gs_concat() and others */
 #include "gspaint.h"        /* For gs_erasepage() */
 #include "gsstate.h"        /* For gs_initgraphics() */
 #include "gspath2.h"        /* For gs_rectclip() */
@@ -139,38 +139,50 @@ page_error:
 /* Render one page (including annotations) (see pdf_main.ps/showpagecontents) */
 static int pdfi_process_one_page(pdf_context *ctx, pdf_dict *page_dict)
 {
     stream_save local_entry_save;
     int code, code1;
 
     /* Save the current stream state, for later cleanup, in a local variable */
     local_save_stream_state(ctx, &local_entry_save);
     initialise_stream_save(ctx);
 
     code = pdfi_process_page_contents(ctx, page_dict);
 
     /* Put our state back the way it was before we ran the contents
      * and check if the stream had problems
      */
 #if PROBE_STREAMS
     if (ctx->pgs->level > ctx->current_stream_save.gsave_level ||
         pdfi_count_stack(ctx) > ctx->current_stream_save.stack_count)
         code = ((pdf_context *)0)->first_page;
 #endif
 
     cleanup_context_interpretation(ctx, &local_entry_save);
     local_restore_stream_state(ctx, &local_entry_save);
 
+    local_save_stream_state(ctx, &local_entry_save);
+    initialise_stream_save(ctx);
+
     code1 = pdfi_do_annotations(ctx, page_dict);
     if (code >= 0) code = code1;
 
+    cleanup_context_interpretation(ctx, &local_entry_save);
+    local_restore_stream_state(ctx, &local_entry_save);
+
+    local_save_stream_state(ctx, &local_entry_save);
+    initialise_stream_save(ctx);
+
     code1 = pdfi_do_acroform(ctx, page_dict);
     if (code >= 0) code = code1;
 
+    cleanup_context_interpretation(ctx, &local_entry_save);
+    local_restore_stream_state(ctx, &local_entry_save);
+
     if (ctx->text.BlockDepth != 0) {
         pdfi_set_warning(ctx, 0, NULL, W_PDF_UNBLANACED_BT, "pdfi_process_one_page", "");
         ctx->text.BlockDepth = 0;
     }
     return code;
 }
 
 /* See pdf_PDF2PS_matrix and .pdfshowpage_Install */
