commit 47eec2c3a87e0c129766046ad15b074eb60a1213
Author: Tamas Nepusz <ntamas@gmail.com>
Date:   Tue Jan 12 21:36:54 2021 +0100

    fix: fix a double-free problem in igraph_read_graph_gml

diff --git a/src/io/gml.c b/src/io/gml.c
index 71e524822..635bd37fe 100644
--- a/src/io/gml.c
+++ b/src/io/gml.c
@@ -140,371 +140,370 @@ void igraph_i_gml_parsedata_destroy(igraph_i_gml_parsedata_t* context) {
 /**
  * \function igraph_read_graph_gml
  * \brief Read a graph in GML format.
  *
  * GML is a simple textual format, see
  * http://www.fim.uni-passau.de/en/fim/faculty/chairs/theoretische-informatik/projects.html for details.
  *
  * </para><para>
  * Although all syntactically correct GML can be parsed,
  * we implement only a subset of this format, some attributes might be
  * ignored. Here is a list of all the differences:
  * \olist
  * \oli Only <code>node</code> and <code>edge</code> attributes are
  *      used, and only if they have a simple type: integer, real or
  *      string. So if an attribute is an array or a record, then it is
  *      ignored. This is also true if only some values of the
  *      attribute are complex.
  * \oli Top level attributes except for <code>Version</code> and the
  *      first <code>graph</code> attribute are completely ignored.
  * \oli Graph attributes except for <code>node</code> and
  *      <code>edge</code> are completely ignored.
  * \oli There is no maximum line length.
  * \oli There is no maximum keyword length.
  * \oli Character entities in strings are not interpreted.
  * \oli We allow <code>inf</code> (infinity) and <code>nan</code>
  *      (not a number) as a real number. This is case insensitive, so
  *      <code>nan</code>, <code>NaN</code> and <code>NAN</code> are equal.
  * \endolist
  *
  * </para><para> Please contact us if you cannot live with these
  * limitations of the GML parser.
  * \param graph Pointer to an uninitialized graph object.
  * \param instream The stream to read the GML file from.
  * \return Error code.
  *
  * Time complexity: should be proportional to the length of the file.
  *
  * \sa \ref igraph_read_graph_graphml() for a more modern format,
  * \ref igraph_write_graph_gml() for writing GML files.
  *
  * \example examples/simple/gml.c
  */
 int igraph_read_graph_gml(igraph_t *graph, FILE *instream) {
 
     long int i, p;
     long int no_of_nodes = 0, no_of_edges = 0;
     igraph_trie_t trie;
     igraph_vector_t edges;
     igraph_bool_t directed = IGRAPH_UNDIRECTED;
     igraph_gml_tree_t *gtree;
     long int gidx;
     igraph_trie_t vattrnames;
     igraph_trie_t eattrnames;
     igraph_trie_t gattrnames;
     igraph_vector_ptr_t gattrs = IGRAPH_VECTOR_PTR_NULL,
                         vattrs = IGRAPH_VECTOR_PTR_NULL, eattrs = IGRAPH_VECTOR_PTR_NULL;
     igraph_vector_ptr_t *attrs[3];
     long int edgeptr = 0;
     igraph_i_gml_parsedata_t context;
 
     attrs[0] = &gattrs; attrs[1] = &vattrs; attrs[2] = &eattrs;
 
     IGRAPH_CHECK(igraph_i_gml_parsedata_init(&context));
     IGRAPH_FINALLY(igraph_i_gml_parsedata_destroy, &context);
 
     igraph_gml_yylex_init_extra(&context, &context.scanner);
 
     igraph_gml_yyset_in(instream, context.scanner);
 
     i = igraph_gml_yyparse(&context);
     if (i != 0) {
         if (context.errmsg[0] != 0) {
             IGRAPH_ERROR(context.errmsg, IGRAPH_PARSEERROR);
         } else {
             IGRAPH_ERROR("Cannot read GML file", IGRAPH_PARSEERROR);
         }
     }
 
     IGRAPH_VECTOR_INIT_FINALLY(&edges, 0);
 
     /* Check version, if present, integer and not '1' then ignored */
     i = igraph_gml_tree_find(context.tree, "Version", 0);
     if (i >= 0 &&
         igraph_gml_tree_type(context.tree, i) == IGRAPH_I_GML_TREE_INTEGER &&
         igraph_gml_tree_get_integer(context.tree, i) != 1) {
-        igraph_gml_tree_destroy(context.tree);
         IGRAPH_ERROR("Unknown GML version", IGRAPH_UNIMPLEMENTED);
         /* RETURN HERE!!!! */
     }
 
     /* get the graph */
     gidx = igraph_gml_tree_find(context.tree, "graph", 0);
     if (gidx == -1) {
         IGRAPH_ERROR("No 'graph' object in GML file", IGRAPH_PARSEERROR);
     }
     if (igraph_gml_tree_type(context.tree, gidx) !=
         IGRAPH_I_GML_TREE_TREE) {
         IGRAPH_ERROR("Invalid type for 'graph' object in GML file", IGRAPH_PARSEERROR);
     }
     gtree = igraph_gml_tree_get_tree(context.tree, gidx);
 
     IGRAPH_FINALLY(igraph_i_gml_destroy_attrs, attrs);
     igraph_vector_ptr_init(&gattrs, 0);
     igraph_vector_ptr_init(&vattrs, 0);
     igraph_vector_ptr_init(&eattrs, 0);
 
     IGRAPH_TRIE_INIT_FINALLY(&trie, 0);
     IGRAPH_TRIE_INIT_FINALLY(&vattrnames, 0);
     IGRAPH_TRIE_INIT_FINALLY(&eattrnames, 0);
     IGRAPH_TRIE_INIT_FINALLY(&gattrnames, 0);
 
     /* Is is directed? */
     i = igraph_gml_tree_find(gtree, "directed", 0);
     if (i >= 0 && igraph_gml_tree_type(gtree, i) == IGRAPH_I_GML_TREE_INTEGER) {
         if (igraph_gml_tree_get_integer(gtree, i) == 1) {
             directed = IGRAPH_DIRECTED;
         }
     }
 
     /* Now we go over all objects in the graph and collect the attribute names and
        types. Plus we collect node ids. We also do some checks. */
     for (i = 0; i < igraph_gml_tree_length(gtree); i++) {
         long int j;
         char cname[100];
         const char *name = igraph_gml_tree_name(gtree, i);
         if (!strcmp(name, "node")) {
             igraph_gml_tree_t *node;
             igraph_bool_t hasid;
             no_of_nodes++;
             if (igraph_gml_tree_type(gtree, i) != IGRAPH_I_GML_TREE_TREE) {
                 IGRAPH_ERROR("'node' is not a list", IGRAPH_PARSEERROR);
             }
             node = igraph_gml_tree_get_tree(gtree, i);
             hasid = 0;
             for (j = 0; j < igraph_gml_tree_length(node); j++) {
                 const char *name = igraph_gml_tree_name(node, j);
                 long int trieid, triesize = igraph_trie_size(&vattrnames);
                 IGRAPH_CHECK(igraph_trie_get(&vattrnames, name, &trieid));
                 if (trieid == triesize) {
                     /* new attribute */
                     igraph_attribute_record_t *atrec = igraph_Calloc(1, igraph_attribute_record_t);
                     int type = igraph_gml_tree_type(node, j);
                     if (!atrec) {
                         IGRAPH_ERROR("Cannot read GML file", IGRAPH_ENOMEM);
                     }
                     IGRAPH_CHECK(igraph_vector_ptr_push_back(&vattrs, atrec));
                     atrec->name = strdup(name);
                     if (type == IGRAPH_I_GML_TREE_INTEGER || type == IGRAPH_I_GML_TREE_REAL) {
                         atrec->type = IGRAPH_ATTRIBUTE_NUMERIC;
                     } else {
                         atrec->type = IGRAPH_ATTRIBUTE_STRING;
                     }
                 } else {
                     /* already seen, should we update type? */
                     igraph_attribute_record_t *atrec = VECTOR(vattrs)[trieid];
                     int type1 = atrec->type;
                     int type2 = igraph_gml_tree_type(node, j);
                     if (type1 == IGRAPH_ATTRIBUTE_NUMERIC && type2 == IGRAPH_I_GML_TREE_STRING) {
                         atrec->type = IGRAPH_ATTRIBUTE_STRING;
                     }
                 }
                 /* check id */
                 if (!hasid && !strcmp(name, "id")) {
                     long int id;
                     if (igraph_gml_tree_type(node, j) != IGRAPH_I_GML_TREE_INTEGER) {
                         IGRAPH_ERROR("Non-integer node id in GML file", IGRAPH_PARSEERROR);
                     }
                     id = igraph_gml_tree_get_integer(node, j);
                     snprintf(cname, sizeof(cname) / sizeof(char) -1, "%li", id);
                     IGRAPH_CHECK(igraph_trie_get(&trie, cname, &id));
                     hasid = 1;
                 }
             }
             if (!hasid) {
                 IGRAPH_ERROR("Node without 'id' while parsing GML file", IGRAPH_PARSEERROR);
             }
         } else if (!strcmp(name, "edge")) {
             igraph_gml_tree_t *edge;
             igraph_bool_t has_source = 0, has_target = 0;
             no_of_edges++;
             if (igraph_gml_tree_type(gtree, i) != IGRAPH_I_GML_TREE_TREE) {
                 IGRAPH_ERROR("'edge' is not a list", IGRAPH_PARSEERROR);
             }
             edge = igraph_gml_tree_get_tree(gtree, i);
             has_source = has_target = 0;
             for (j = 0; j < igraph_gml_tree_length(edge); j++) {
                 const char *name = igraph_gml_tree_name(edge, j);
                 if (!strcmp(name, "source")) {
                     has_source = 1;
                     if (igraph_gml_tree_type(edge, j) != IGRAPH_I_GML_TREE_INTEGER) {
                         IGRAPH_ERROR("Non-integer 'source' for an edge in GML file",
                                      IGRAPH_PARSEERROR);
                     }
                 } else if (!strcmp(name, "target")) {
                     has_target = 1;
                     if (igraph_gml_tree_type(edge, j) != IGRAPH_I_GML_TREE_INTEGER) {
                         IGRAPH_ERROR("Non-integer 'source' for an edge in GML file",
                                      IGRAPH_PARSEERROR);
                     }
                 } else {
                     long int trieid, triesize = igraph_trie_size(&eattrnames);
                     IGRAPH_CHECK(igraph_trie_get(&eattrnames, name, &trieid));
                     if (trieid == triesize) {
                         /* new attribute */
                         igraph_attribute_record_t *atrec = igraph_Calloc(1, igraph_attribute_record_t);
                         int type = igraph_gml_tree_type(edge, j);
                         if (!atrec) {
                             IGRAPH_ERROR("Cannot read GML file", IGRAPH_ENOMEM);
                         }
                         IGRAPH_CHECK(igraph_vector_ptr_push_back(&eattrs, atrec));
                         atrec->name = strdup(name);
                         if (type == IGRAPH_I_GML_TREE_INTEGER || type == IGRAPH_I_GML_TREE_REAL) {
                             atrec->type = IGRAPH_ATTRIBUTE_NUMERIC;
                         } else {
                             atrec->type = IGRAPH_ATTRIBUTE_STRING;
                         }
                     } else {
                         /* already seen, should we update type? */
                         igraph_attribute_record_t *atrec = VECTOR(eattrs)[trieid];
                         int type1 = atrec->type;
                         int type2 = igraph_gml_tree_type(edge, j);
                         if (type1 == IGRAPH_ATTRIBUTE_NUMERIC && type2 == IGRAPH_I_GML_TREE_STRING) {
                             atrec->type = IGRAPH_ATTRIBUTE_STRING;
                         }
                     }
                 }
             } /* for */
             if (!has_source) {
                 IGRAPH_ERROR("No 'source' for edge in GML file", IGRAPH_PARSEERROR);
             }
             if (!has_target) {
                 IGRAPH_ERROR("No 'target' for edge in GML file", IGRAPH_PARSEERROR);
             }
         } else {
             /* anything to do? Maybe add as graph attribute.... */
         }
     }
 
     /* check vertex id uniqueness */
     if (igraph_trie_size(&trie) != no_of_nodes) {
         IGRAPH_ERROR("Node 'id' not unique", IGRAPH_PARSEERROR);
     }
 
     /* now we allocate the vectors and strvectors for the attributes */
     for (i = 0; i < igraph_vector_ptr_size(&vattrs); i++) {
         igraph_attribute_record_t *atrec = VECTOR(vattrs)[i];
         int type = atrec->type;
         if (type == IGRAPH_ATTRIBUTE_NUMERIC) {
             igraph_vector_t *p = igraph_Calloc(1, igraph_vector_t);
             atrec->value = p;
             IGRAPH_CHECK(igraph_vector_init(p, no_of_nodes));
         } else if (type == IGRAPH_ATTRIBUTE_STRING) {
             igraph_strvector_t *p = igraph_Calloc(1, igraph_strvector_t);
             atrec->value = p;
             IGRAPH_CHECK(igraph_strvector_init(p, no_of_nodes));
         } else {
             IGRAPH_WARNING("A composite attribute ignored");
         }
     }
 
     for (i = 0; i < igraph_vector_ptr_size(&eattrs); i++) {
         igraph_attribute_record_t *atrec = VECTOR(eattrs)[i];
         int type = atrec->type;
         if (type == IGRAPH_ATTRIBUTE_NUMERIC) {
             igraph_vector_t *p = igraph_Calloc(1, igraph_vector_t);
             atrec->value = p;
             IGRAPH_CHECK(igraph_vector_init(p, no_of_edges));
         } else if (type == IGRAPH_ATTRIBUTE_STRING) {
             igraph_strvector_t *p = igraph_Calloc(1, igraph_strvector_t);
             atrec->value = p;
             IGRAPH_CHECK(igraph_strvector_init(p, no_of_edges));
         } else {
             IGRAPH_WARNING("A composite attribute ignored");
         }
     }
 
     /* Ok, now the edges, attributes too */
     IGRAPH_CHECK(igraph_vector_resize(&edges, no_of_edges * 2));
     p = -1;
     while ( (p = igraph_gml_tree_find(gtree, "edge", p + 1)) != -1) {
         igraph_gml_tree_t *edge;
         long int from, to, fromidx = 0, toidx = 0;
         char name[100];
         long int j;
         edge = igraph_gml_tree_get_tree(gtree, p);
         for (j = 0; j < igraph_gml_tree_length(edge); j++) {
             const char *n = igraph_gml_tree_name(edge, j);
             if (!strcmp(n, "source")) {
                 fromidx = igraph_gml_tree_find(edge, "source", 0);
             } else if (!strcmp(n, "target")) {
                 toidx = igraph_gml_tree_find(edge, "target", 0);
             } else {
                 long int edgeid = edgeptr / 2;
                 long int trieidx;
                 igraph_attribute_record_t *atrec;
                 int type;
                 igraph_trie_get(&eattrnames, n, &trieidx);
                 atrec = VECTOR(eattrs)[trieidx];
                 type = atrec->type;
                 if (type == IGRAPH_ATTRIBUTE_NUMERIC) {
                     igraph_vector_t *v = (igraph_vector_t *)atrec->value;
                     IGRAPH_CHECK(igraph_i_gml_toreal(edge, j, VECTOR(*v) + edgeid));
                 } else if (type == IGRAPH_ATTRIBUTE_STRING) {
                     igraph_strvector_t *v = (igraph_strvector_t *)atrec->value;
                     const char *value = igraph_i_gml_tostring(edge, j);
                     IGRAPH_CHECK(igraph_strvector_set(v, edgeid, value));
                 }
             }
         }
         from = igraph_gml_tree_get_integer(edge, fromidx);
         to = igraph_gml_tree_get_integer(edge, toidx);
         snprintf(name, sizeof(name) / sizeof(char) -1, "%li", from);
         IGRAPH_CHECK(igraph_trie_get(&trie, name, &from));
         snprintf(name, sizeof(name) / sizeof(char) -1, "%li", to);
         IGRAPH_CHECK(igraph_trie_get(&trie, name, &to));
         if (igraph_trie_size(&trie) != no_of_nodes) {
             IGRAPH_ERROR("Unknown node id found at an edge", IGRAPH_PARSEERROR);
         }
         VECTOR(edges)[edgeptr++] = from;
         VECTOR(edges)[edgeptr++] = to;
     }
 
     /* and add vertex attributes */
     for (i = 0; i < igraph_gml_tree_length(gtree); i++) {
         const char *n;
         char name[100];
         long int j, k;
         n = igraph_gml_tree_name(gtree, i);
         if (!strcmp(n, "node")) {
             igraph_gml_tree_t *node = igraph_gml_tree_get_tree(gtree, i);
             long int iidx = igraph_gml_tree_find(node, "id", 0);
             long int id = igraph_gml_tree_get_integer(node, iidx);
             snprintf(name, sizeof(name) / sizeof(char) -1, "%li", id);
             igraph_trie_get(&trie, name, &id);
             for (j = 0; j < igraph_gml_tree_length(node); j++) {
                 const char *aname = igraph_gml_tree_name(node, j);
                 igraph_attribute_record_t *atrec;
                 int type;
                 igraph_trie_get(&vattrnames, aname, &k);
                 atrec = VECTOR(vattrs)[k];
                 type = atrec->type;
                 if (type == IGRAPH_ATTRIBUTE_NUMERIC) {
                     igraph_vector_t *v = (igraph_vector_t *)atrec->value;
                     IGRAPH_CHECK(igraph_i_gml_toreal(node, j, VECTOR(*v) + id));
                 } else if (type == IGRAPH_ATTRIBUTE_STRING) {
                     igraph_strvector_t *v = (igraph_strvector_t *)atrec->value;
                     const char *value = igraph_i_gml_tostring(node, j);
                     IGRAPH_CHECK(igraph_strvector_set(v, id, value));
                 }
             }
         }
     }
 
     igraph_trie_destroy(&trie);
     igraph_trie_destroy(&gattrnames);
     igraph_trie_destroy(&vattrnames);
     igraph_trie_destroy(&eattrnames);
     IGRAPH_FINALLY_CLEAN(4);
 
     IGRAPH_CHECK(igraph_empty_attrs(graph, 0, directed, 0)); /* TODO */
     IGRAPH_CHECK(igraph_add_vertices(graph, (igraph_integer_t) no_of_nodes,
                                      &vattrs));
     IGRAPH_CHECK(igraph_add_edges(graph, &edges, &eattrs));
 
     igraph_i_gml_destroy_attrs(attrs);
     igraph_vector_destroy(&edges);
     igraph_i_gml_parsedata_destroy(&context);
     IGRAPH_FINALLY_CLEAN(3);
 
     return 0;
 }
