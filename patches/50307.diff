commit 27152931e783a7dffd22443c88e0234957ca1a1c
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Wed Aug 17 09:57:37 2022 +0100

    oss-fuzz 50307: free temporary forwarding device on error

diff --git a/devices/vector/gdevpdfi.c b/devices/vector/gdevpdfi.c
index 724e36547..1de48cee6 100644
--- a/devices/vector/gdevpdfi.c
+++ b/devices/vector/gdevpdfi.c
@@ -2187,94 +2187,96 @@ static int
 pdf_image3x_make_mcde(gx_device *dev, const gs_gstate *pgs,
                       const gs_matrix *pmat, const gs_image_common_t *pic,
                       const gs_int_rect *prect,
                       const gx_drawing_color *pdcolor,
                       const gx_clip_path *pcpath, gs_memory_t *mem,
                       gx_image_enum_common_t **pinfo,
                       gx_device **pmcdev, gx_device *midev[2],
                       gx_image_enum_common_t *pminfo[2],
                       const gs_int_point origin[2],
                       const gs_image3x_t *pim)
 {
     int code;
     pdf_image_enum *pmie;
     int i;
     const gs_image3x_mask_t *pixm;
 
     if (midev[0]) {
         if (midev[1])
             return_error(gs_error_rangecheck);
         i = 0, pixm = &pim->Opacity;
     } else if (midev[1])
         i = 1, pixm = &pim->Shape;
     else
         return_error(gs_error_rangecheck);
     code = pdf_make_mxd(pmcdev, midev[i], mem);
     if (code < 0)
         return code;
     code = pdf_begin_typed_image
         ((gx_device_pdf *)dev, pgs, pmat, pic, prect, pdcolor, pcpath, mem,
          pinfo, PDF_IMAGE_TYPE3_DATA);
-    if (code < 0)
+    if (code < 0) {
+        rc_decrement(*pmcdev, "pdf_image3x_make_mcde");
         return code;
+    }
     if ((*pinfo)->procs != &pdf_image_enum_procs) {
         /* We couldn't handle the image.  Bail out. */
         gx_image_end(*pinfo, false);
         gs_free_object(mem, *pmcdev, "pdf_image3x_make_mcde");
         return_error(gs_error_rangecheck);
     }
     pmie = (pdf_image_enum *)pminfo[i];
     /*
      * Add the SMask entry to the image dictionary, and, if needed,
      * the Matte entry to the mask dictionary.
      */
     if (pixm->has_Matte) {
         gx_device_pdf *pdev = (gx_device_pdf *)dev;
         int DoMatte = 0, num_components =
             gs_color_space_num_components(pim->ColorSpace);
 
         switch (pdev->params.ColorConversionStrategy) {
             case ccs_LeaveColorUnchanged:
                 DoMatte = 1;
                 break;
             case ccs_RGB:
             case ccs_sRGB:
                 if (num_components == 3)
                     DoMatte = 1;
                 else
                     DoMatte = 0;
                 break;
             case ccs_CMYK:
                 if (num_components == 4)
                     DoMatte = 1;
                 else
                     DoMatte = 0;
                 break;
             case ccs_Gray:
                 if (num_components == 1)
                     DoMatte = 1;
                 else
                     DoMatte = 0;
                 break;
             case ccs_UseDeviceIndependentColor:
             case ccs_UseDeviceIndependentColorForImages:
             case ccs_ByObjectType:
             default:
                 DoMatte = 0;
                 break;
         }
 
         if (DoMatte) {
             code = cos_dict_put_c_key_floats((gx_device_pdf *)dev,
                                     (cos_dict_t *)pmie->writer.pres->object,
                                     "/Matte", pixm->Matte,
                                     num_components);
             if (code < 0)
                 return code;
         }
     }
 /* Don't put SMask here because pmie->writer.pres->object may be substituted
  * after the image stream is accummulated. pdf_end_and_do_image will set
  * SMask with the right value. Bug 690345.
  */
     return 0;
 }
