commit dd907d6d9e772f91a9b652c3e765439f38e7147d
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Mon Aug 1 10:08:48 2022 +0100

    OSS-fuzz #49606
    
    If we rejected an addition to the xref table because the object number
    exceeds a 32-bit signed integer, less than 0, or the generation number
    is less than 0 or the file offset is less than 0 we were not returning
    an error (earlier incarnations of the code didn't expect it to).
    
    But when decoding an object stream if we didn't get an error code we
    would assume the object was present in the xref table and try to use
    the xref  entry.
    
    Fix that by returning an error code if we didn't add an entry to the
    xref table.

diff --git a/pdf/pdf_repair.c b/pdf/pdf_repair.c
index b3252b598..17cdce5e6 100644
--- a/pdf/pdf_repair.c
+++ b/pdf/pdf_repair.c
@@ -28,55 +28,55 @@
 static int pdfi_repair_add_object(pdf_context *ctx, int64_t obj, int64_t gen, gs_offset_t offset)
 {
     /* Although we can handle object numbers larger than this, on some systems (32-bit Windows)
      * memset is limited to a (signed!) integer for the size of memory to clear. We could deal
      * with this by clearing the memory in blocks, but really, this is almost certainly a
      * corrupted file or something.
      */
     if (obj >= 0x7ffffff / sizeof(xref_entry) || obj < 1 || gen < 0 || offset < 0)
-        return 0;
+        return_error(gs_error_rangecheck);
 
     if (ctx->xref_table == NULL) {
         ctx->xref_table = (xref_table_t *)gs_alloc_bytes(ctx->memory, sizeof(xref_table_t), "repair xref table");
         if (ctx->xref_table == NULL) {
             return_error(gs_error_VMerror);
         }
         memset(ctx->xref_table, 0x00, sizeof(xref_table_t));
         ctx->xref_table->xref = (xref_entry *)gs_alloc_bytes(ctx->memory, (obj + 1) * sizeof(xref_entry), "repair xref table");
         if (ctx->xref_table->xref == NULL){
             gs_free_object(ctx->memory, ctx->xref_table, "failed to allocate xref table entries for repair");
             ctx->xref_table = NULL;
             return_error(gs_error_VMerror);
         }
         memset(ctx->xref_table->xref, 0x00, (obj + 1) * sizeof(xref_entry));
         ctx->xref_table->ctx = ctx;
         ctx->xref_table->type = PDF_XREF_TABLE;
         ctx->xref_table->xref_size = obj + 1;
 #if REFCNT_DEBUG
         ctx->xref_table->UID = ctx->ref_UID++;
         dmprintf1(ctx->memory, "Allocated xref table with UID %"PRIi64"\n", ctx->xref_table->UID);
 #endif
         pdfi_countup(ctx->xref_table);
     } else {
         if (ctx->xref_table->xref_size < (obj + 1)) {
             xref_entry *new_xrefs;
 
             new_xrefs = (xref_entry *)gs_alloc_bytes(ctx->memory, (obj + 1) * sizeof(xref_entry), "read_xref_stream allocate xref table entries");
             if (new_xrefs == NULL){
                 pdfi_countdown(ctx->xref_table);
                 ctx->xref_table = NULL;
                 return_error(gs_error_VMerror);
             }
             memset(new_xrefs, 0x00, (obj + 1) * sizeof(xref_entry));
             memcpy(new_xrefs, ctx->xref_table->xref, ctx->xref_table->xref_size * sizeof(xref_entry));
             gs_free_object(ctx->memory, ctx->xref_table->xref, "reallocated xref entries");
             ctx->xref_table->xref = new_xrefs;
             ctx->xref_table->xref_size = obj + 1;
         }
     }
     ctx->xref_table->xref[obj].compressed = false;
     ctx->xref_table->xref[obj].free = false;
     ctx->xref_table->xref[obj].object_num = obj;
     ctx->xref_table->xref[obj].u.uncompressed.generation_num = gen;
     ctx->xref_table->xref[obj].u.uncompressed.offset = offset;
     return 0;
 }
