commit d155b410d4bbc90d28f361b966f0429598da8188
Author: James Carter <jwcart2@gmail.com>
Date:   Tue Mar 16 10:26:28 2021 -0400

    libsepol/cil: Check for duplicate blocks, optionals, and macros
    
    In CIL, blocks, optionals, and macros share the same symbol table so
    that the targets of "in" statements can be located. Because of this,
    they cannot have the same name in the same namespace, but, because
    they do not show up in the final policy, they can have the same name
    as long as they are in different namespaces. Unfortunately, when
    copying from one namespace to another, no check was being done to see
    if there was a conflict.
    
    When copying blocks, optionals, and macros, if a datum is found in
    the destination namespace, then there is a conflict with a previously
    declared block, optional, or macro, so exit with an error.
    
    Reported-by: Nicolas Iooss <nicolas.iooss@m4x.org>
    Reported-by: Evgeny Vereshchagin <evvers@ya.ru>
    Signed-off-by: James Carter <jwcart2@gmail.com>

diff --git a/libsepol/cil/src/cil_copy_ast.c b/libsepol/cil/src/cil_copy_ast.c
index c9aada9d..ed967861 100644
--- a/libsepol/cil/src/cil_copy_ast.c
+++ b/libsepol/cil/src/cil_copy_ast.c
@@ -98,18 +98,19 @@ int cil_copy_node(__attribute__((unused)) struct cil_db *db, void *data, void **
 int cil_copy_block(__attribute__((unused)) struct cil_db *db, void *data, void **copy, symtab_t *symtab)
 {
 	struct cil_block *orig = data;
 	char *key = orig->datum.name;
 	struct cil_symtab_datum *datum = NULL;
+	struct cil_block *new;
 
 	cil_symtab_get_datum(symtab, key, &datum);
-	if (datum == NULL) {
-		struct cil_block *new;
-		cil_block_init(&new);
-		*copy = new;
-	} else {
-		*copy = datum;;
+	if (datum != NULL) {
+		cil_tree_log(NODE(datum), CIL_ERR, "Re-declaration of %s %s", cil_node_to_string(NODE(datum)), key);
+		return SEPOL_ERR;
 	}
 
+	cil_block_init(&new);
+	*copy = new;
+
 	return SEPOL_OK;
 }
 
@@ -1507,83 +1508,42 @@ exit:
 int cil_copy_macro(__attribute__((unused)) struct cil_db *db, void *data, void **copy, symtab_t *symtab)
 {
 	struct cil_macro *orig = data;
 	char *key = orig->datum.name;
 	struct cil_symtab_datum *datum = NULL;
+	struct cil_macro *new;
 
 	cil_symtab_get_datum(symtab, key, &datum);
-	if (datum == NULL) {
-		struct cil_macro *new;
-		cil_macro_init(&new);
-		if (orig->params != NULL) {
-			cil_copy_list(orig->params, &new->params);
-		}
-
-		*copy = new;
-
-	} else {
-		struct cil_list_item *curr_orig = NULL;
-		struct cil_list_item *curr_new = NULL;
-		struct cil_param *param_orig = NULL;
-		struct cil_param *param_new = NULL;
-
-		if (((struct cil_macro*)datum)->params != NULL) {
-			curr_new = ((struct cil_macro*)datum)->params->head;
-		}
-
-		if (orig->params != NULL) {
-			curr_orig = orig->params->head;
-		}
-
-		if (curr_orig != NULL && curr_new != NULL) {
-			while (curr_orig != NULL) {
-				if (curr_new == NULL) {
-					goto exit;
-				}
-
-				param_orig = (struct cil_param*)curr_orig->data;
-				param_new = (struct cil_param*)curr_new->data;
-				if (param_orig->str != param_new->str) {
-					goto exit;
-				} else if (param_orig->flavor != param_new->flavor) {
-					goto exit;
-				}
-
-				curr_orig = curr_orig->next;
-				curr_new = curr_new->next;
-			}
-
-			if (curr_new != NULL) {
-				goto exit;
-			}
-		} else if (!(curr_orig == NULL && curr_new == NULL)) {
-			goto exit;
-		}
+	if (datum != NULL) {
+		cil_tree_log(NODE(datum), CIL_ERR, "Re-declaration of %s %s", cil_node_to_string(NODE(datum)), key);
+		return SEPOL_ERR;
+	}
 
-		*copy = datum;
+	cil_macro_init(&new);
+	if (orig->params != NULL) {
+		cil_copy_list(orig->params, &new->params);
 	}
 
-	return SEPOL_OK;
+	*copy = new;
 
-exit:
-	cil_log(CIL_INFO, "cil_copy_macro: macro cannot be redefined\n");
-	return SEPOL_ERR;
+	return SEPOL_OK;
 }
 
 int cil_copy_optional(__attribute__((unused)) struct cil_db *db, void *data, void **copy, symtab_t *symtab)
 {
 	struct cil_optional *orig = data;
 	char *key = orig->datum.name;
 	struct cil_symtab_datum *datum = NULL;
+	struct cil_optional *new;
 
 	cil_symtab_get_datum(symtab, key, &datum);
-	if (datum == NULL) {
-		struct cil_optional *new;
-		cil_optional_init(&new);
-		*copy = new;
-	} else {
-		*copy = datum;
+	if (datum != NULL) {
+		cil_tree_log(NODE(datum), CIL_ERR, "Re-declaration of %s %s", cil_node_to_string(NODE(datum)), key);
+		return SEPOL_ERR;
 	}
 
+	cil_optional_init(&new);
+	*copy = new;
+
 	return SEPOL_OK;
 }
 
@@ -1751,378 +1711,379 @@ int cil_copy_src_info(__attribute__((unused)) struct cil_db *db, void *data, voi
 int __cil_copy_node_helper(struct cil_tree_node *orig, __attribute__((unused)) uint32_t *finished, void *extra_args)
 {
 	int rc = SEPOL_ERR;
 	struct cil_tree_node *parent = NULL;
 	struct cil_tree_node *new = NULL;
 	struct cil_db *db = NULL;
 	struct cil_args_copy *args = NULL;
 	struct cil_tree_node *namespace = NULL;
 	struct cil_param *param = NULL;
 	enum cil_sym_index sym_index = CIL_SYM_UNKNOWN;
 	symtab_t *symtab = NULL;
 	void *data = NULL;
 	int (*copy_func)(struct cil_db *db, void *data, void **copy, symtab_t *symtab) = NULL;
 	struct cil_blockinherit *blockinherit = NULL;
 
 	if (orig == NULL || extra_args == NULL) {
 		goto exit;
 	}
 
 	args = extra_args;
 	parent = args->dest;
 	db = args->db;
 
 
 	switch (orig->flavor) {
 	case CIL_BLOCK:
 		copy_func = &cil_copy_block;
 		break;
 	case CIL_BLOCKABSTRACT:
 		copy_func = &cil_copy_blockabstract;
 		break;
 	case CIL_BLOCKINHERIT:
 		copy_func = &cil_copy_blockinherit;
 		break;
 	case CIL_POLICYCAP:
 		copy_func = &cil_copy_policycap;
 		break;
 	case CIL_PERM:
 	case CIL_MAP_PERM:
 		copy_func = &cil_copy_perm;
 		break;
 	case CIL_CLASSMAPPING:
 		copy_func = &cil_copy_classmapping;
 		break;
 	case CIL_CLASS:
 	case CIL_COMMON:
 	case CIL_MAP_CLASS:
 		copy_func = &cil_copy_class;
 		break;
 	case CIL_CLASSORDER:
 		copy_func = &cil_copy_classorder;
 		break;
 	case CIL_CLASSPERMISSION:
 		copy_func = &cil_copy_classpermission;
 		break;
 	case CIL_CLASSPERMISSIONSET:
 		copy_func = &cil_copy_classpermissionset;
 		break;
 	case CIL_CLASSCOMMON:
 		copy_func = &cil_copy_classcommon;
 		break;
 	case CIL_SID:
 		copy_func = &cil_copy_sid;
 		break;
 	case CIL_SIDCONTEXT:
 		copy_func = &cil_copy_sidcontext;
 		break;
 	case CIL_SIDORDER:
 		copy_func = &cil_copy_sidorder;
 		break;
 	case CIL_USER:
 		copy_func = &cil_copy_user;
 		break;
 	case CIL_USERATTRIBUTE:
 		copy_func = &cil_copy_userattribute;
 		break;
 	case CIL_USERATTRIBUTESET:
 		copy_func = &cil_copy_userattributeset;
 		break;
 	case CIL_USERROLE:
 		copy_func = &cil_copy_userrole;
 		break;
 	case CIL_USERLEVEL:
 		copy_func = &cil_copy_userlevel;
 		break;
 	case CIL_USERRANGE:
 		copy_func = &cil_copy_userrange;
 		break;
 	case CIL_USERBOUNDS:
 		copy_func = &cil_copy_bounds;
 		break;
 	case CIL_USERPREFIX:
 		copy_func = &cil_copy_userprefix;
 		break;
 	case CIL_ROLE:
 		copy_func = &cil_copy_role;
 		break;
 	case CIL_ROLETYPE:
 		copy_func = &cil_copy_roletype;
 		break;
 	case CIL_ROLEBOUNDS:
 		copy_func = &cil_copy_bounds;
 		break;
 	case CIL_ROLEATTRIBUTE:
 		copy_func = &cil_copy_roleattribute;
 		break;
 	case CIL_ROLEATTRIBUTESET:
 		copy_func = &cil_copy_roleattributeset;
 		break;
 	case CIL_ROLEALLOW:
 		copy_func = &cil_copy_roleallow;
 		break;
 	case CIL_TYPE:
 		copy_func = &cil_copy_type;
 		break;
 	case CIL_TYPEBOUNDS:
 		copy_func = &cil_copy_bounds;
 		break;
 	case CIL_TYPEPERMISSIVE:
 		copy_func = cil_copy_typepermissive;
 		break;
 	case CIL_TYPEATTRIBUTE:
 		copy_func = &cil_copy_typeattribute;
 		break;
 	case CIL_TYPEATTRIBUTESET:
 		copy_func = &cil_copy_typeattributeset;
 		break;
 	case CIL_EXPANDTYPEATTRIBUTE:
 		copy_func = &cil_copy_expandtypeattribute;
 		break;
 	case CIL_TYPEALIAS:
 		copy_func = &cil_copy_alias;
 		break;
 	case CIL_TYPEALIASACTUAL:
 		copy_func = &cil_copy_aliasactual;
 		break;
 	case CIL_ROLETRANSITION:
 		copy_func = &cil_copy_roletransition;
 		break;
 	case CIL_NAMETYPETRANSITION:
 		copy_func = &cil_copy_nametypetransition;
 		break;
 	case CIL_RANGETRANSITION:
 		copy_func = &cil_copy_rangetransition;
 		break;
 	case CIL_TUNABLE:
 		copy_func = &cil_copy_tunable;
 		break;
 	case CIL_BOOL:
 		copy_func = &cil_copy_bool;
 		break;
 	case CIL_AVRULE:
 	case CIL_AVRULEX:
 		copy_func = &cil_copy_avrule;
 		break;
 	case CIL_PERMISSIONX:
 		copy_func = &cil_copy_permissionx;
 		break;
 	case CIL_TYPE_RULE:
 		copy_func = &cil_copy_type_rule;
 		break;
 	case CIL_SENS:
 		copy_func = &cil_copy_sens;
 		break;
 	case CIL_SENSALIAS:
 		copy_func = &cil_copy_alias;
 		break;
 	case CIL_SENSALIASACTUAL:
 		copy_func = &cil_copy_aliasactual;
 		break;
 	case CIL_CAT:
 		copy_func = &cil_copy_cat;
 		break;
 	case CIL_CATALIAS:
 		copy_func = &cil_copy_alias;
 		break;
 	case CIL_CATALIASACTUAL:
 		copy_func = &cil_copy_aliasactual;
 		break;
 	case CIL_CATSET:
 		copy_func = &cil_copy_catset;
 		break;
 	case CIL_SENSCAT:
 		copy_func = &cil_copy_senscat;
 		break;
 	case CIL_CATORDER:
 		copy_func = &cil_copy_catorder;
 		break;
 	case CIL_SENSITIVITYORDER:
 		copy_func = &cil_copy_sensitivityorder;
 		break;
 	case CIL_LEVEL:
 		copy_func = &cil_copy_level;
 		break;
 	case CIL_LEVELRANGE:
 		copy_func = &cil_copy_levelrange;
 		break;
 	case CIL_CONTEXT:
 		copy_func = &cil_copy_context;
 		break;
 	case CIL_NETIFCON:
 		copy_func = &cil_copy_netifcon;
 		break;
 	case CIL_GENFSCON:
 		copy_func = &cil_copy_genfscon;
 		break;
 	case CIL_FILECON:
 		copy_func = &cil_copy_filecon;
 		break;
 	case CIL_NODECON:
 		copy_func = &cil_copy_nodecon;
 		break;
 	case CIL_IBPKEYCON:
 		copy_func = &cil_copy_ibpkeycon;
 		break;
 	case CIL_IBENDPORTCON:
 		copy_func = &cil_copy_ibendportcon;
 		break;
 	case CIL_PORTCON:
 		copy_func = &cil_copy_portcon;
 		break;
 	case CIL_PIRQCON:
 		copy_func = &cil_copy_pirqcon;
 		break;
 	case CIL_IOMEMCON:
 		copy_func = &cil_copy_iomemcon;
 		break;
 	case CIL_IOPORTCON:
 		copy_func = &cil_copy_ioportcon;
 		break;
 	case CIL_PCIDEVICECON:
 		copy_func = &cil_copy_pcidevicecon;
 		break;
 	case CIL_DEVICETREECON:
 		copy_func = &cil_copy_devicetreecon;
 		break;
 	case CIL_FSUSE:
 		copy_func = &cil_copy_fsuse;
 		break;
 	case CIL_CONSTRAIN:
 	case CIL_MLSCONSTRAIN:
 		copy_func = &cil_copy_constrain;
 		break;
 	case CIL_VALIDATETRANS:
 	case CIL_MLSVALIDATETRANS:
 		copy_func = &cil_copy_validatetrans;
 		break;
 	case CIL_CALL:
 		copy_func = &cil_copy_call;
 		break;
 	case CIL_MACRO:
 		copy_func = &cil_copy_macro;
 		break;
 	case CIL_NODE:
 		copy_func = &cil_copy_node;
 		break;
 	case CIL_OPTIONAL:
 		copy_func = &cil_copy_optional;
 		break;
 	case CIL_IPADDR:
 		copy_func = &cil_copy_ipaddr;
 		break;
 	case CIL_CONDBLOCK:
 		copy_func = &cil_copy_condblock;
 		break;
 	case CIL_BOOLEANIF:
 		copy_func = &cil_copy_boolif;
 		break;
 	case CIL_TUNABLEIF:
 		copy_func = &cil_copy_tunif;
 		break;
 	case CIL_DEFAULTUSER:
 	case CIL_DEFAULTROLE:
 	case CIL_DEFAULTTYPE:
 		copy_func = &cil_copy_default;
 		break;
 	case CIL_DEFAULTRANGE:
 		copy_func = &cil_copy_defaultrange;
 		break;
 	case CIL_HANDLEUNKNOWN:
 		copy_func = &cil_copy_handleunknown;
 		break;
 	case CIL_MLS:
 		copy_func = &cil_copy_mls;
 		break;
 	case CIL_SRC_INFO:
 		copy_func = &cil_copy_src_info;
 		break;
 	default:
 		goto exit;
 	}
 
 	if (orig->flavor >= CIL_MIN_DECLARATIVE) {
 		rc = cil_flavor_to_symtab_index(orig->flavor, &sym_index);
 		if (rc != SEPOL_OK) {
 			goto exit;
 		}
 
 		rc = cil_get_symtab(parent, &symtab, sym_index);
 		if (rc != SEPOL_OK) {
 			goto exit;
 		}
 	}
 
 	rc = (*copy_func)(db, orig->data, &data, symtab);
 	if (rc == SEPOL_OK) {
 		cil_tree_node_init(&new);
 
 		new->parent = parent;
 		new->line = orig->line;
 		new->hll_line = orig->hll_line;
 		new->flavor = orig->flavor;
 		new->data = data;
 
 		if (orig->flavor >= CIL_MIN_DECLARATIVE) {
 			/* Check the flavor of data if was found in the destination symtab */
 			if (DATUM(data)->nodes->head && FLAVOR(data) != orig->flavor) {
 				cil_tree_log(orig, CIL_ERR, "Incompatible flavor when trying to copy %s", DATUM(data)->name);
 				cil_tree_log(NODE(data), CIL_ERR, "Note: conflicting declaration");
 				new->flavor = FLAVOR(data);
 				rc = SEPOL_ERR;
 				goto exit;
 			}
 			rc = cil_symtab_insert(symtab, ((struct cil_symtab_datum*)orig->data)->name, ((struct cil_symtab_datum*)data), new);
 
 			namespace = new;
 			while (namespace->flavor != CIL_MACRO && namespace->flavor != CIL_BLOCK && namespace->flavor != CIL_ROOT) {
 				namespace = namespace->parent;
 			}
 
 			if (namespace->flavor == CIL_MACRO) {
 				struct cil_macro *macro = namespace->data;
 				struct cil_list *param_list = macro->params;
 				if (param_list != NULL) {
 					struct cil_list_item *item;
 					cil_list_for_each(item, param_list) {
 						param = item->data;
 						if (param->flavor == new->flavor) {
 							if (param->str == ((struct cil_symtab_datum*)new->data)->name) {
 								cil_tree_log(orig, CIL_ERR, "%s %s shadows a macro parameter", cil_node_to_string(new), ((struct cil_symtab_datum*)orig->data)->name);
 								cil_tree_log(namespace, CIL_ERR, "Note: macro declaration");
 								rc = SEPOL_ERR;
 								goto exit;
 							}
 						}
 					}
 				}
 			}
 		}
 
 		if (new->flavor == CIL_BLOCKINHERIT) {
 			blockinherit = new->data;
 			// if a blockinherit statement is copied before blockinherit are
 			// resolved (like in an in-statement), the block will not have been
 			// resolved yet, so there's nothing to append yet. This is fine,
 			// the copied blockinherit statement will be handled later, as if
 			// it wasn't in an in-statement
 			if (blockinherit->block != NULL) {
 				cil_list_append(blockinherit->block->bi_nodes, CIL_NODE, new);
 			}
 		}
 
 		if (parent->cl_head == NULL) {
 			parent->cl_head = new;
 			parent->cl_tail = new;
 		} else {
 			parent->cl_tail->next = new;
 			parent->cl_tail = new;
 		}
 
 		if (orig->cl_head != NULL) {
 			args->dest = new;
 		}
 	} else {
+		cil_tree_log(orig, CIL_ERR, "Problem copying %s node", cil_node_to_string(orig));
 		goto exit;
 	}
 
 	return SEPOL_OK;
