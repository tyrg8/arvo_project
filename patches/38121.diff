commit 84d4b53122e0fa0280c7872350b89d5777dabbb2
Author: Eric Blankenhorn <eric@wolfssl.com>
Date:   Tue Sep 21 11:46:46 2021 -0500

    Fix wolfmqtt-fuzzer: Null-dereference WRITE in MqttProps_Free

diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index d06fac6..d392cc5 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -795,224 +795,225 @@ static int MqttClient_WaitType(MqttClient *client, void *packet_obj,
 wait_again:
 
     /* initialize variables */
     packet_id = 0;
     packet_type = MQTT_PACKET_TYPE_RESERVED;
 #ifdef WOLFMQTT_MULTITHREAD
     pendResp = NULL;
     readLocked = 0;
 #endif
     waitMatchFound = 0;
 
 #ifdef WOLFMQTT_DEBUG_CLIENT
     PRINTF("MqttClient_WaitType: Type %s (%d), ID %d",
         MqttPacket_TypeDesc((MqttPacketType)wait_type),
             wait_type, wait_packet_id);
 #endif
 
     switch ((int)*mms_stat)
     {
         case MQTT_MSG_BEGIN:
         {
         #ifdef WOLFMQTT_MULTITHREAD
             /* Lock recv socket mutex */
             rc = wm_SemLock(&client->lockRecv);
             if (rc != 0) {
                 PRINTF("MqttClient_WaitType: recv lock error!");
                 return rc;
             }
             readLocked = 1;
         #endif
 
             /* reset the packet state */
             client->packet.stat = MQTT_PK_BEGIN;
         }
         FALL_THROUGH;
 
     #ifdef WOLFMQTT_V5
         case MQTT_MSG_AUTH:
     #endif
         case MQTT_MSG_WAIT:
         {
         #ifdef WOLFMQTT_MULTITHREAD
             /* Check to see if packet type and id have already completed */
             pendResp = NULL;
             rc = wm_SemLock(&client->lockClient);
             if (rc == 0) {
                 if (MqttClient_RespList_Find(client, (MqttPacketType)wait_type, 
                     wait_packet_id, &pendResp)) {
                     if (pendResp->packetDone) {
                         /* pending response is already done, so return */
                         rc = pendResp->packet_ret;
                     #ifdef WOLFMQTT_DEBUG_CLIENT
                         PRINTF("PendResp already Done %p: Rc %d", pendResp, rc);
                     #endif
                         MqttClient_RespList_Remove(client, pendResp);
                         wm_SemUnlock(&client->lockClient);
                         wm_SemUnlock(&client->lockRecv);
                         return rc;
                     }
                 }
                 wm_SemUnlock(&client->lockClient);
             }
             else {
                 break; /* error */
             }
         #endif /* WOLFMQTT_MULTITHREAD */
 
             *mms_stat = MQTT_MSG_WAIT;
 
             /* Wait for packet */
             rc = MqttPacket_Read(client, client->rx_buf, client->rx_buf_len,
                     timeout_ms);
             /* handle failure */
             if (rc <= 0) {
                 break;
             }
 
             /* capture length read */
             client->packet.buf_len = rc;
 
             /* Decode Packet - get type and id */
             rc = MqttClient_DecodePacket(client, client->rx_buf,
                 client->packet.buf_len, NULL, &packet_type, NULL, &packet_id);
             if (rc < 0) {
                 break;
             }
 
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("Read Packet: Len %d, Type %d, ID %d",
                 client->packet.buf_len, packet_type, packet_id);
         #endif
 
             *mms_stat = MQTT_MSG_READ;
         }
         FALL_THROUGH;
 
         case MQTT_MSG_READ:
         case MQTT_MSG_READ_PAYLOAD:
         {
             MqttPacketType use_packet_type;
             void* use_packet_obj;
 
         #ifdef WOLFMQTT_MULTITHREAD
             readLocked = 1; /* if in this state read is locked */
         #endif
 
             /* read payload state only happens for publish messages */
             if (*mms_stat == MQTT_MSG_READ_PAYLOAD) {
                 packet_type = MQTT_PACKET_TYPE_PUBLISH;
             }
 
             /* Determine if we received data for this request */
             if ((wait_type == MQTT_PACKET_TYPE_ANY ||
                  wait_type == packet_type ||
-                 MqttIsPubRespPacket(packet_type) == MqttIsPubRespPacket(wait_type)) &&
-               (wait_packet_id == 0 || wait_packet_id == packet_id))
+                 (MqttIsPubRespPacket(packet_type) &&
+                  MqttIsPubRespPacket(wait_type))) &&
+                (wait_packet_id == 0 || wait_packet_id == packet_id))
             {
                 use_packet_obj = packet_obj;
                 waitMatchFound = 1;
             }
             else {
                 /* use generic packet object */
                 use_packet_obj = &client->msg;
             }
             use_packet_type = packet_type;
 
         #ifdef WOLFMQTT_MULTITHREAD
             /* Check to see if we have a pending response for this packet */
             pendResp = NULL;
             rc = wm_SemLock(&client->lockClient);
             if (rc == 0) {
                 if (MqttClient_RespList_Find(client, packet_type, packet_id,
                                                                &pendResp)) {
                     /* we found packet match this incoming read packet */
                     pendResp->packetProcessing = 1;
                     use_packet_obj = pendResp->packet_obj;
                     use_packet_type = pendResp->packet_type;
                     /* req from another thread... not a match */
                     waitMatchFound = 0;
                 }
                 wm_SemUnlock(&client->lockClient);
             }
             else {
                 break; /* error */
             }
         #endif /* WOLFMQTT_MULTITHREAD */
 
             /* Perform packet handling for publish callback and QoS */
             rc = MqttClient_HandlePacket(client, use_packet_type,
                 use_packet_obj, timeout_ms);
 
         #ifdef WOLFMQTT_NONBLOCK
             if (rc == MQTT_CODE_CONTINUE) {
                 /* we have received some data, so keep the recv
                     mutex lock active and return */
                 return rc;
             }
         #endif
 
             /* handle success case */
             if (rc >= 0) {
                 rc = MQTT_CODE_SUCCESS;
             }
 
         #ifdef WOLFMQTT_MULTITHREAD
             if (pendResp) {
                 /* Mark pending response entry done */
                 if (wm_SemLock(&client->lockClient) == 0) {
                     pendResp->packetDone = 1;
                     pendResp->packet_ret = rc;
                 #ifdef WOLFMQTT_DEBUG_CLIENT
                     PRINTF("PendResp Done %p", pendResp);
                 #endif
                     pendResp = NULL;
                     wm_SemUnlock(&client->lockClient);
                 }
             }
         #endif /* WOLFMQTT_MULTITHREAD */
             break;
         }
 
         case MQTT_MSG_WRITE:
         case MQTT_MSG_WRITE_PAYLOAD:
         default:
         {
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("MqttClient_WaitType: Invalid state %d!", *mms_stat);
         #endif
             rc = MQTT_CODE_ERROR_STAT;
             break;
         }
     } /* switch (*mms_stat) */
 
 #ifdef WOLFMQTT_NONBLOCK
     if (rc != MQTT_CODE_CONTINUE)
 #endif
     {
         /* reset state */
         *mms_stat = MQTT_MSG_BEGIN;
     }
 
 #ifdef WOLFMQTT_MULTITHREAD
     if (readLocked) {
         wm_SemUnlock(&client->lockRecv);
     }
 #endif
     if (rc < 0) {
     #ifdef WOLFMQTT_DEBUG_CLIENT
         PRINTF("MqttClient_WaitType: Failure: %s (%d)",
             MqttClient_ReturnCodeToString(rc), rc);
     #endif
         return rc;
     }
 
     if (!waitMatchFound) {
         /* if we get here, then the we are still waiting for a packet */
         goto wait_again;
     }
 
     return rc;
 }
 
 
 /* Public Functions */
