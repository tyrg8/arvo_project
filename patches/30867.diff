commit 830de9a9fb99e30f9ac9caa0a7f7bba29c3b4863
Merge: 30462fcf9 847938f4d
Author: toddouska <todd@wolfssl.com>
Date:   Mon Feb 15 14:29:51 2021 -0800

    Merge pull request #3760 from JacobBarthelmeh/Release
    
    prepare for release v4.7.0

diff --git a/CMakeLists.txt b/CMakeLists.txt
index bb4cd7e3b..5de39a866 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -28,7 +28,7 @@ if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")
      You must delete them, or cmake will refuse to work.")
 endif()
 
-project(wolfssl VERSION 4.6.0 LANGUAGES C)
+project(wolfssl VERSION 4.7.0 LANGUAGES C)
 
 # shared library versioning
 # increment if interfaces have been added, removed or changed
diff --git a/ChangeLog.md b/ChangeLog.md
index c0b2c02a1..3ad61812e 100644
--- a/ChangeLog.md
+++ b/ChangeLog.md
@@ -1,3 +1,53 @@
+# wolfSSL Release 4.7.0 (February 16, 2021)
+Release 4.7.0 of wolfSSL embedded TLS has bug fixes and new features including:
+
+### New Feature Additions
+* Compatibility Layer expansion SSL_get_verify_mode, X509_VERIFY_PARAM API, X509_STORE_CTX API added
+* WOLFSSL_PSK_IDENTITY_ALERT macro added for enabling a subset of TLS alerts
+* Function wolfSSL_CTX_NoTicketTLSv12 added to enable turning off session tickets with TLS 1.2 while keeping TLS 1.3 session tickets available
+* Implement RFC 5705: Keying Material Exporters for TLS
+* Added --enable-reproducible-build flag for making more deterministic library outputs to assist debugging
+
+### Fixes
+* Fix to free mutex when cert manager is free’d
+* Compatibility layer EVP function to return the correct block size and type
+* DTLS secure renegotiation fixes including resetting timeout and retransmit on duplicate HelloRequest
+* Fix for edge case with shrink buffer and secure renegotiation
+* Compile fix for type used with curve448 and PPC64
+* Fixes for SP math all with PPC64 and other embedded compilers
+* SP math all fix when performing montgomery reduction on one word modulus
+* Fixes to SP math all to better support digit size of 8-bit
+* Fix for results of edge case with SP integer square operation
+* Stop non-ct mod inv from using register x29 with SP ARM64 build
+* Fix edge case when generating z value of ECC with SP code
+* Fixes for PKCS7 with crypto callback (devId) with RSA and RNG
+* Fix for compiling builds with RSA verify and public only
+* Fix for PKCS11 not properly exporting the public key due to a missing key type field
+* Call certificate callback with certificate depth issues
+* Fix for out-of-bounds read in TLSX_CSR_Parse()
+* Fix incorrect AES-GCM tag generation in the EVP layer
+* Fix for out of bounds write with SP math all enabled and an edge case of calling sp_tohex on the result of sp_mont_norm
+* Fix for parameter check in sp_rand_prime to handle 0 length values
+* Fix for edge case of failing malloc resulting in an out of bounds write with SHA256/SHA512 when small stack is enabled
+
+
+### Improvements/Optimizations
+* Added --enable-wolftpm option for easily building wolfSSL to be used with wolfTPM
+* DTLS macro WOLFSSL_DTLS_RESEND_ONLY_TIMEOUT added for resending flight only after a timeout
+* Update linux kernel module to use kvmalloc and kvfree
+* Add user settings option to cmake build
+* Added support for AES GCM session ticket encryption
+* Thread protection for global RNG used by wolfSSL_RAND_bytes function calls
+* Sanity check on FIPs configure flag used against the version of FIPs bundle
+* --enable-aesgcm=table now is compatible with --enable-linuxkm
+* Increase output buffer size that wolfSSL_RAND_bytes can handle
+* Out of directory builds resolved, wolfSSL can now be built in a separate directory than the root wolfssl directory
+
+### Vulnerabilities
+* [HIGH] CVE-2021-3336: In earlier versions of wolfSSL there exists a potential man in the middle attack on TLS 1.3 clients. Malicious attackers with a privileged network position can impersonate TLS 1.3 servers and bypass authentication. Users that have applications with client side code and have TLS 1.3 turned on, should update to the latest version of wolfSSL. Users that do not have TLS 1.3 turned on, or that are server side only, are NOT affected by this report. For the code change see https://github.com/wolfSSL/wolfssl/pull/3676.
+* [LOW] In the case of using custom ECC curves there is the potential for a crafted compressed ECC key that has a custom prime value to cause a hang when imported. This only affects applications that are loading in ECC keys with wolfSSL builds that have compressed ECC keys and custom ECC curves enabled.
+* [LOW] With TLS 1.3 authenticated-only ciphers a section of the server hello could contain 16 bytes of uninitialized data when sent to the connected peer. This affects only a specific build of wolfSSL with TLS 1.3 early data enabled and using authenticated-only ciphers with TLS 1.3.
+
 # wolfSSL Release 4.6.0 (December 22, 2020)
 Release 4.6.0 of wolfSSL embedded TLS has bug fixes and new features including:
 
diff --git a/README b/README
index e6bb60752..bcb072d64 100644
--- a/README
+++ b/README
@@ -71,157 +71,58 @@ hash function. Instead the name WC_SHA, WC_SHA256, WC_SHA384 and WC_SHA512
 should be used for the enum name.
 
 *** end Notes ***
 
 
-# wolfSSL Release 4.6.0 (December 22, 2020)
-Release 4.6.0 of wolfSSL embedded TLS has bug fixes and new features including:
+# wolfSSL Release 4.7.0 (February 16, 2021)
+Release 4.7.0 of wolfSSL embedded TLS has bug fixes and new features including:
 
 ### New Feature Additions
-###### New Build Options
-* wolfSSL now enables linux kernel module support. Big news for Linux kernel module developers with crypto requirements! wolfCrypt and wolfSSL are now loadable as modules in the Linux kernel, providing the entire libwolfssl API natively to other kernel modules. For the first time on Linux, the entire TLS protocol stack can be loaded as a module, allowing fully kernel-resident TLS/DTLS endpoints with in-kernel handshaking.  (--enable-linuxkm, --enable-linuxkm-defaults, --with-linux-source) (https://www.wolfssl.com/loading-wolfssl-into-the-linux-kernel/)
-* Build tests and updated instructions for use with Apple’s A12Z chipset  (https://www.wolfssl.com/preliminary-cryptographic-benchmarks-on-new-apple-a12z-bionic-platform/)
-* Expansion of wolfSSL SP math implementation and addition of --enable-sp-math-all build option
-* Apache httpd w/TLS 1.3 support added
-* Sniffer support for TLS 1.3 and AES CCM
-* Support small memory footprint build with only TLS 1.3 and PSK without code for (EC)DHE and certificates
-
-###### New Hardware Acceleration
-* Added support for NXP DCP (i.MX RT1060/1062) crypto co-processor
-* Add Silicon Labs hardware acceleration using [SL SE Manager](https://docs.silabs.com/gecko-platform/latest/service/api/group-sl-se-manager)
-
-###### New Algorithms
-* RC2 ECB/CBC added for use with PKCS#12 bundles
-* XChaCha and the XChaCha20-Poly1305 AEAD algorithm support added
-
-###### Misc
-* Added support for 802.11Q VLAN frames to sniffer
-* Added OCSP function wolfSSL_get_ocsp_producedDate
-* Added API to set CPU ID flags cpuid_select_flags, cpuid_set_flag, cpuid_clear_flag
-* New DTLS/TLS non-blocking Secure Renegotiation example added to server.c and client.c
+* Compatibility Layer expansion SSL_get_verify_mode, X509_VERIFY_PARAM API, X509_STORE_CTX API added
+* WOLFSSL_PSK_IDENTITY_ALERT macro added for enabling a subset of TLS alerts
+* Function wolfSSL_CTX_NoTicketTLSv12 added to enable turning off session tickets with TLS 1.2 while keeping TLS 1.3 session tickets available
+* Implement RFC 5705: Keying Material Exporters for TLS
+* Added --enable-reproducible-build flag for making more deterministic library outputs to assist debugging
 
 ### Fixes
-###### Math Library
-* Fix mp_to_unsigned_bin_len out of bounds read with buffers longer than maximum MP
-* Fix for fp_read_radix_16 out of bounds read
-* Fix to add wrapper for new timing resistant wc_ecc_mulmod_ex2 function version in HW ECC acceleration
-* Handle an edge case with RSA-PSS encoding message to hash
-
-###### Compatibility Layer Fixes
-* Fix for setting serial number wolfSSL_X509_set_serialNumber
-* Fix for setting ASN1 time not before / not after with WOLFSSL_X509
-* Fix for order of components in issuer name when using X509_sign
-* Fix for compatibility layer API DH_compute_key
-* EVP fix incorrect block size for GCM and buffer up AAD for encryption/decryption
-* EVP fix for AES-XTS key length return value and fix for string compare calls
-* Fix for mutex freeing during RNG failure case with EVP_KEY creation
-* Non blocking use with compatibility layer BIOs in TLS connections
-
-###### Build Configuration
-* Fix for custom build with WOLFSSL_USER_MALLOC defined
-* ED448 compiler warning on Intel 32bit systems
-* CURVE448_SMALL build fix for 32bit systems with Curve448
-* Fix to build SP math with IAR
-* CMake fix to only set ranlib arguments for Mac, and for stray typo of , -> ;
-* Build with --enable-wpas=small fix
-* Fix for building fips ready using openssl extra
-* Fixes for building with Microchip (min/max and undef SHA_BLOCK_SIZE)
-* FIx for NO_FILESYSTEM build on Windows
-* Fixed SHA256 support for IMX-RT1060
-* Fix for ECC key gen with NO_TFM_64BIT
-
-###### Sniffer
-* Fixes for sniffer when using static ECC keys. Adds back TLS v1.2 static ECC key fallback detection and fixes new ECC RNG requirement for timing resistance
-* Fix for sniffer with SNI enabled to properly handle WOLFSSL_SUCCESS error code in ProcessClientHello
-* Fix for sniffer using HAVE_MAX_FRAGMENT in "certificate" type message
-* Fix build error with unused "ret" when building with WOLFSSL_SNIFFER_WATCH.
-* Fix to not treat cert/key not found as error in myWatchCb and WOLFSSL_SNIFFER_WATCH.
-* Sniffer fixes for handling TCP `out-of-range sequence number`
-* Fixes SSLv3 use of ECDH in sniffer
-
-###### PKCS
-* PKCS#11 fix to generate ECC key for decrypt/sign or derive
-* Fix for resetting internal variables when parsing a malformed PKCS#7 bundle with PKCS7_VerifySignedData()
-* Verify the extracted public key in wc_PKCS7_InitWithCert
-* Fix for internal buffer size when using decompression with PKCS#7
-
-###### Misc
-* Pin the C# verify callback function to keep from garbage collection
-* DH fixes for when public key is owned and free’d after a handshake
-* Fix for TLS 1.3 early data packets
-* Fix for STM32 issue with some Cube HAL versions and STM32 example timeout
-* Fix mmCAU and LTC hardware mutex locking to prevent double lock
-* Fix potential race condition with CRL monitor
-* Fix for possible malformed encrypted key with 3DES causing negative length
-* AES-CTR performance fixed with AES-NI
+* Fix to free mutex when cert manager is free’d
+* Compatibility layer EVP function to return the correct block size and type
+* DTLS secure renegotiation fixes including resetting timeout and retransmit on duplicate HelloRequest
+* Fix for edge case with shrink buffer and secure renegotiation
+* Compile fix for type used with curve448 and PPC64
+* Fixes for SP math all with PPC64 and other embedded compilers
+* SP math all fix when performing montgomery reduction on one word modulus
+* Fixes to SP math all to better support digit size of 8-bit
+* Fix for results of edge case with SP integer square operation
+* Stop non-ct mod inv from using register x29 with SP ARM64 build
+* Fix edge case when generating z value of ECC with SP code
+* Fixes for PKCS7 with crypto callback (devId) with RSA and RNG
+* Fix for compiling builds with RSA verify and public only
+* Fix for PKCS11 not properly exporting the public key due to a missing key type field
+* Call certificate callback with certificate depth issues
+* Fix for out-of-bounds read in TLSX_CSR_Parse()
+* Fix incorrect AES-GCM tag generation in the EVP layer
+* Fix for out of bounds write with SP math all enabled and an edge case of calling sp_tohex on the result of sp_mont_norm
+* Fix for parameter check in sp_rand_prime to handle 0 length values
+* Fix for edge case of failing malloc resulting in an out of bounds write with SHA256/SHA512 when small stack is enabled
+
 
 ### Improvements/Optimizations
-##### SP and Math
-* mp_radix_size adjustment for leading 0
-* Resolve implicit cast warnings with SP build
-* Change mp_sqr to return an error if the result won't fit into the fixed length dp
-* ARM64 assembly with clang improvements, clang doesn't always handle use of x29 (FP or Frame Pointer) in inline assembly code correctly - reworked sp_2048_sqr_8 to not use x29
-* SP mod exp changed to support exponents of different lengths
-* TFM div: fix initial value of size in q so clamping doesn't OOB read
-* Numerous stack depth improvements with --enable-smallstack
-* Improve cache resistance with Base64 operations
-
-###### TLS 1.3
-* TLS 1.3 wolfSSL_peek want read return addition
-* TLS 1.3: Fix P-521 algorithm matching
-
-###### PKCS
-* Improvements and refactoring to PKCS#11 key look up
-* PKCS #11 changes for signing and loading RSA public key from private
-* check PKCS#7 SignedData private key is valid before using it
-* check PKCS#7 VerifySignedData content length against total bundle size to avoid large malloc
-
-###### Compatibility Layer
-* EVP add block size for more ciphers in wolfSSL_EVP_CIPHER_block_size()
-* Return long names instead of short names in wolfSSL_OBJ_obj2txt()
-* Add additional OpenSSL compatibility functions to update the version of Apache httpd supported
-* add "CCM8" variants to cipher_names "CCM-8" ciphers, for OpenSSL compat
-
-###### Builds
-* Cortex-M SP ASM support for IAR 6.70
-* STM Cube pack support (IDE/STM32Cube)
-* Build option --enable-aesgcm=4bit added for AES-GCM GMULT using 4 bit table
-* Xilinx IDE updates to allow XTIME override for Xilinx, spelling fixes in Xilinx README.md, and add Xilinx SDK printf support
-* Added ED448 to the "all" options and ED448 check key null argument sanity check
-* Added ARC4, 3DES, nullcipher, BLAKE2, BLAKE2s, XChaCha, MD2, and MD4 to the “all” options
-* Added an --enable-all-crypto option, to enable only the wolfCrypt features of --enable-all, combinable with --enable-cryptonly
-* Added the ability to selectively remove features from --enable-all and --enable-all-crypto using specific --disable-<feature> options
-* Use Intel intrinsics with Windows for RDSEED and RDRAND (thanks to dr-m from MariaDB)
-* Add option to build with WOLFSSL_NO_CLIENT_AUTH
-* Updated build requirements for wolfSSH use to be less restrictive
-* lighttpd support update for v1.4.56
-* Added batch file to copy files to ESP-IDF folders and resolved warnings when using v4.0 ESP-IDF
-* Added --enable-stacksize=verbose, showing at a glance the stack high water mark for each subtest in testwolfcrypt
-
-###### ECC
-* Performance increase for ECC verify only, using non constant time SP modinv
-* During ECC verify add validation of r and s before any use
-* Always use safe add and dbl with ECC
-* Timing resistant scalar multiplication updated with use of Joye double-add ladder
-* Update mp_jacobi function to reduce stack and increase performance for base ECC build
-* Reduce heap memory use with wc_EccPrivateKeyDecode, Improvement to ECC wc_ecc_sig_to_rs and wc_ecc_rs_raw_to_sig to reduce memory use (avoid the mp_int)
-* Improve StoreECC_DSA_Sig bounds checking
-
-###### OCSP
-* OCSP improvement to handle extensions in singleResponse
-* support for OCSP request/response for multiple certificates
-* OCSP Must Staple option added to require OCSP stapling response
-* Add support for id-pkix-ocsp-nocheck extension
-
-###### Misc
-* Additional code coverage added for ECC and RSA, PKCS#7, 3DES, EVP and Blake2b operations
-* DTLS MTU: check MTU on write
-* Refactor hash sig selection and add the macros WOLFSSL_STRONGEST_HASH_SIG (picks the strongest hash) and WOLFSSL_ECDSA_MATCH_HASH (will pick the hash to match the ECC curve)
-* Strict certificate version allowed from client, TLS 1.2 / 1.3 can not accept client certificates lower than version 3
-* wolfSSL_get_ciphers_compat(), skip the fake indicator ciphers like the renegotiation indication and the quantum-safe hybrid
-* When parsing session ticket, check TLS version to see whether they are version compatible
-* Additional sanity check for invalid ASN1 padding on integer type
-* Adding in ChaCha20 streaming feature with Mac and Intel assembly build
-* Sniffer build with --enable-oldtls option on
+* Added --enable-wolftpm option for easily building wolfSSL to be used with wolfTPM
+* DTLS macro WOLFSSL_DTLS_RESEND_ONLY_TIMEOUT added for resending flight only after a timeout
+* Update linux kernel module to use kvmalloc and kvfree
+* Add user settings option to cmake build
+* Added support for AES GCM session ticket encryption
+* Thread protection for global RNG used by wolfSSL_RAND_bytes function calls
+* Sanity check on FIPs configure flag used against the version of FIPs bundle
+* --enable-aesgcm=table now is compatible with --enable-linuxkm
+* Increase output buffer size that wolfSSL_RAND_bytes can handle
+* Out of directory builds resolved, wolfSSL can now be built in a separate directory than the root wolfssl directory
+
+### Vulnerabilities
+* [HIGH] CVE-2021-3336: In earlier versions of wolfSSL there exists a potential man in the middle attack on TLS 1.3 clients. Malicious attackers with a privileged network position can impersonate TLS 1.3 servers and bypass authentication. Users that have applications with client side code and have TLS 1.3 turned on, should update to the latest version of wolfSSL. Users that do not have TLS 1.3 turned on, or that are server side only, are NOT affected by this report. For the code change see https://github.com/wolfSSL/wolfssl/pull/3676.
+* [LOW] In the case of using custom ECC curves there is the potential for a crafted compressed ECC key that has a custom prime value to cause a hang when imported. This only affects applications that are loading in ECC keys with wolfSSL builds that have compressed ECC keys and custom ECC curves enabled.
+* [LOW] With TLS 1.3 authenticated-only ciphers a section of the server hello could contain 16 bytes of uninitialized data when sent to the connected peer. This affects only a specific build of wolfSSL with TLS 1.3 early data enabled and using authenticated-only ciphers with TLS 1.3.
+
 
 For additional vulnerability information visit the vulnerability page at
 https://www.wolfssl.com/docs/security-vulnerabilities/
diff --git a/README.md b/README.md
index e57e6f432..94bbdf5e5 100644
--- a/README.md
+++ b/README.md
@@ -76,155 +76,55 @@ macro ```NO_OLD_SHA_NAMES```. These names get mapped to the OpenSSL API for a
 single call hash function. Instead the name WC_SHA, WC_SHA256, WC_SHA384 and
 WC_SHA512 should be used for the enum name.
 
-# wolfSSL Release 4.6.0 (December 22, 2020)
-Release 4.6.0 of wolfSSL embedded TLS has bug fixes and new features including:
+# wolfSSL Release 4.7.0 (February 16, 2021)
+Release 4.7.0 of wolfSSL embedded TLS has bug fixes and new features including:
 
 ### New Feature Additions
-###### New Build Options
-* wolfSSL now enables linux kernel module support. Big news for Linux kernel module developers with crypto requirements! wolfCrypt and wolfSSL are now loadable as modules in the Linux kernel, providing the entire libwolfssl API natively to other kernel modules. For the first time on Linux, the entire TLS protocol stack can be loaded as a module, allowing fully kernel-resident TLS/DTLS endpoints with in-kernel handshaking.  (--enable-linuxkm, --enable-linuxkm-defaults, --with-linux-source) (https://www.wolfssl.com/loading-wolfssl-into-the-linux-kernel/)
-* Build tests and updated instructions for use with Apple’s A12Z chipset  (https://www.wolfssl.com/preliminary-cryptographic-benchmarks-on-new-apple-a12z-bionic-platform/)
-* Expansion of wolfSSL SP math implementation and addition of --enable-sp-math-all build option
-* Apache httpd w/TLS 1.3 support added
-* Sniffer support for TLS 1.3 and AES CCM
-* Support small memory footprint build with only TLS 1.3 and PSK without code for (EC)DHE and certificates
-
-###### New Hardware Acceleration
-* Added support for NXP DCP (i.MX RT1060/1062) crypto co-processor
-* Add Silicon Labs hardware acceleration using [SL SE Manager](https://docs.silabs.com/gecko-platform/latest/service/api/group-sl-se-manager)
-
-###### New Algorithms
-* RC2 ECB/CBC added for use with PKCS#12 bundles
-* XChaCha and the XChaCha20-Poly1305 AEAD algorithm support added
-
-###### Misc
-* Added support for 802.11Q VLAN frames to sniffer
-* Added OCSP function wolfSSL_get_ocsp_producedDate
-* Added API to set CPU ID flags cpuid_select_flags, cpuid_set_flag, cpuid_clear_flag
-* New DTLS/TLS non-blocking Secure Renegotiation example added to server.c and client.c
+* Compatibility Layer expansion SSL_get_verify_mode, X509_VERIFY_PARAM API, X509_STORE_CTX API added
+* WOLFSSL_PSK_IDENTITY_ALERT macro added for enabling a subset of TLS alerts
+* Function wolfSSL_CTX_NoTicketTLSv12 added to enable turning off session tickets with TLS 1.2 while keeping TLS 1.3 session tickets available
+* Implement RFC 5705: Keying Material Exporters for TLS
+* Added --enable-reproducible-build flag for making more deterministic library outputs to assist debugging
 
 ### Fixes
-###### Math Library
-* Fix mp_to_unsigned_bin_len out of bounds read with buffers longer than maximum MP
-* Fix for fp_read_radix_16 out of bounds read
-* Fix to add wrapper for new timing resistant wc_ecc_mulmod_ex2 function version in HW ECC acceleration
-* Handle an edge case with RSA-PSS encoding message to hash
-
-###### Compatibility Layer Fixes
-* Fix for setting serial number wolfSSL_X509_set_serialNumber
-* Fix for setting ASN1 time not before / not after with WOLFSSL_X509
-* Fix for order of components in issuer name when using X509_sign
-* Fix for compatibility layer API DH_compute_key
-* EVP fix incorrect block size for GCM and buffer up AAD for encryption/decryption
-* EVP fix for AES-XTS key length return value and fix for string compare calls
-* Fix for mutex freeing during RNG failure case with EVP_KEY creation
-* Non blocking use with compatibility layer BIOs in TLS connections
-
-###### Build Configuration
-* Fix for custom build with WOLFSSL_USER_MALLOC defined
-* ED448 compiler warning on Intel 32bit systems
-* CURVE448_SMALL build fix for 32bit systems with Curve448
-* Fix to build SP math with IAR
-* CMake fix to only set ranlib arguments for Mac, and for stray typo of , -> ;
-* Build with --enable-wpas=small fix
-* Fix for building fips ready using openssl extra
-* Fixes for building with Microchip (min/max and undef SHA_BLOCK_SIZE)
-* FIx for NO_FILESYSTEM build on Windows
-* Fixed SHA256 support for IMX-RT1060
-* Fix for ECC key gen with NO_TFM_64BIT
-
-###### Sniffer
-* Fixes for sniffer when using static ECC keys. Adds back TLS v1.2 static ECC key fallback detection and fixes new ECC RNG requirement for timing resistance
-* Fix for sniffer with SNI enabled to properly handle WOLFSSL_SUCCESS error code in ProcessClientHello
-* Fix for sniffer using HAVE_MAX_FRAGMENT in "certificate" type message
-* Fix build error with unused "ret" when building with WOLFSSL_SNIFFER_WATCH.
-* Fix to not treat cert/key not found as error in myWatchCb and WOLFSSL_SNIFFER_WATCH.
-* Sniffer fixes for handling TCP `out-of-range sequence number`
-* Fixes SSLv3 use of ECDH in sniffer
-
-###### PKCS
-* PKCS#11 fix to generate ECC key for decrypt/sign or derive
-* Fix for resetting internal variables when parsing a malformed PKCS#7 bundle with PKCS7_VerifySignedData()
-* Verify the extracted public key in wc_PKCS7_InitWithCert
-* Fix for internal buffer size when using decompression with PKCS#7
-
-###### Misc
-* Pin the C# verify callback function to keep from garbage collection
-* DH fixes for when public key is owned and free’d after a handshake
-* Fix for TLS 1.3 early data packets
-* Fix for STM32 issue with some Cube HAL versions and STM32 example timeout
-* Fix mmCAU and LTC hardware mutex locking to prevent double lock
-* Fix potential race condition with CRL monitor
-* Fix for possible malformed encrypted key with 3DES causing negative length
-* AES-CTR performance fixed with AES-NI
+* Fix to free mutex when cert manager is free’d
+* Compatibility layer EVP function to return the correct block size and type
+* DTLS secure renegotiation fixes including resetting timeout and retransmit on duplicate HelloRequest
+* Fix for edge case with shrink buffer and secure renegotiation
+* Compile fix for type used with curve448 and PPC64
+* Fixes for SP math all with PPC64 and other embedded compilers
+* SP math all fix when performing montgomery reduction on one word modulus
+* Fixes to SP math all to better support digit size of 8-bit
+* Fix for results of edge case with SP integer square operation
+* Stop non-ct mod inv from using register x29 with SP ARM64 build
+* Fix edge case when generating z value of ECC with SP code
+* Fixes for PKCS7 with crypto callback (devId) with RSA and RNG
+* Fix for compiling builds with RSA verify and public only
+* Fix for PKCS11 not properly exporting the public key due to a missing key type field
+* Call certificate callback with certificate depth issues
+* Fix for out-of-bounds read in TLSX_CSR_Parse()
+* Fix incorrect AES-GCM tag generation in the EVP layer
+* Fix for out of bounds write with SP math all enabled and an edge case of calling sp_tohex on the result of sp_mont_norm
+* Fix for parameter check in sp_rand_prime to handle 0 length values
+* Fix for edge case of failing malloc resulting in an out of bounds write with SHA256/SHA512 when small stack is enabled
+
 
 ### Improvements/Optimizations
-##### SP and Math
-* mp_radix_size adjustment for leading 0
-* Resolve implicit cast warnings with SP build
-* Change mp_sqr to return an error if the result won't fit into the fixed length dp
-* ARM64 assembly with clang improvements, clang doesn't always handle use of x29 (FP or Frame Pointer) in inline assembly code correctly - reworked sp_2048_sqr_8 to not use x29
-* SP mod exp changed to support exponents of different lengths
-* TFM div: fix initial value of size in q so clamping doesn't OOB read
-* Numerous stack depth improvements with --enable-smallstack
-* Improve cache resistance with Base64 operations
-
-###### TLS 1.3
-* TLS 1.3 wolfSSL_peek want read return addition
-* TLS 1.3: Fix P-521 algorithm matching
-
-###### PKCS
-* Improvements and refactoring to PKCS#11 key look up
-* PKCS #11 changes for signing and loading RSA public key from private
-* check PKCS#7 SignedData private key is valid before using it
-* check PKCS#7 VerifySignedData content length against total bundle size to avoid large malloc
-
-###### Compatibility Layer
-* EVP add block size for more ciphers in wolfSSL_EVP_CIPHER_block_size()
-* Return long names instead of short names in wolfSSL_OBJ_obj2txt()
-* Add additional OpenSSL compatibility functions to update the version of Apache httpd supported
-* add "CCM8" variants to cipher_names "CCM-8" ciphers, for OpenSSL compat
-
-###### Builds
-* Cortex-M SP ASM support for IAR 6.70
-* STM Cube pack support (IDE/STM32Cube)
-* Build option --enable-aesgcm=4bit added for AES-GCM GMULT using 4 bit table
-* Xilinx IDE updates to allow XTIME override for Xilinx, spelling fixes in Xilinx README.md, and add Xilinx SDK printf support
-* Added ED448 to the "all" options and ED448 check key null argument sanity check
-* Added ARC4, 3DES, nullcipher, BLAKE2, BLAKE2s, XChaCha, MD2, and MD4 to the “all” options
-* Added an --enable-all-crypto option, to enable only the wolfCrypt features of --enable-all, combinable with --enable-cryptonly
-* Added the ability to selectively remove features from --enable-all and --enable-all-crypto using specific --disable-<feature> options
-* Use Intel intrinsics with Windows for RDSEED and RDRAND (thanks to dr-m from MariaDB)
-* Add option to build with WOLFSSL_NO_CLIENT_AUTH
-* Updated build requirements for wolfSSH use to be less restrictive
-* lighttpd support update for v1.4.56
-* Added batch file to copy files to ESP-IDF folders and resolved warnings when using v4.0 ESP-IDF
-* Added --enable-stacksize=verbose, showing at a glance the stack high water mark for each subtest in testwolfcrypt
-
-###### ECC
-* Performance increase for ECC verify only, using non constant time SP modinv
-* During ECC verify add validation of r and s before any use
-* Always use safe add and dbl with ECC
-* Timing resistant scalar multiplication updated with use of Joye double-add ladder
-* Update mp_jacobi function to reduce stack and increase performance for base ECC build
-* Reduce heap memory use with wc_EccPrivateKeyDecode, Improvement to ECC wc_ecc_sig_to_rs and wc_ecc_rs_raw_to_sig to reduce memory use (avoid the mp_int)
-* Improve StoreECC_DSA_Sig bounds checking
-
-###### OCSP
-* OCSP improvement to handle extensions in singleResponse
-* support for OCSP request/response for multiple certificates
-* OCSP Must Staple option added to require OCSP stapling response
-* Add support for id-pkix-ocsp-nocheck extension
-
-###### Misc
-* Additional code coverage added for ECC and RSA, PKCS#7, 3DES, EVP and Blake2b operations
-* DTLS MTU: check MTU on write
-* Refactor hash sig selection and add the macros WOLFSSL_STRONGEST_HASH_SIG (picks the strongest hash) and WOLFSSL_ECDSA_MATCH_HASH (will pick the hash to match the ECC curve)
-* Strict certificate version allowed from client, TLS 1.2 / 1.3 can not accept client certificates lower than version 3
-* wolfSSL_get_ciphers_compat(), skip the fake indicator ciphers like the renegotiation indication and the quantum-safe hybrid
-* When parsing session ticket, check TLS version to see whether they are version compatible
-* Additional sanity check for invalid ASN1 padding on integer type
-* Adding in ChaCha20 streaming feature with Mac and Intel assembly build
-* Sniffer build with --enable-oldtls option on
+* Added --enable-wolftpm option for easily building wolfSSL to be used with wolfTPM
+* DTLS macro WOLFSSL_DTLS_RESEND_ONLY_TIMEOUT added for resending flight only after a timeout
+* Update linux kernel module to use kvmalloc and kvfree
+* Add user settings option to cmake build
+* Added support for AES GCM session ticket encryption
+* Thread protection for global RNG used by wolfSSL_RAND_bytes function calls
+* Sanity check on FIPs configure flag used against the version of FIPs bundle
+* --enable-aesgcm=table now is compatible with --enable-linuxkm
+* Increase output buffer size that wolfSSL_RAND_bytes can handle
+* Out of directory builds resolved, wolfSSL can now be built in a separate directory than the root wolfssl directory
+
+### Vulnerabilities
+* [HIGH] CVE-2021-3336: In earlier versions of wolfSSL there exists a potential man in the middle attack on TLS 1.3 clients. Malicious attackers with a privileged network position can impersonate TLS 1.3 servers and bypass authentication. Users that have applications with client side code and have TLS 1.3 turned on, should update to the latest version of wolfSSL. Users that do not have TLS 1.3 turned on, or that are server side only, are NOT affected by this report. For the code change see https://github.com/wolfSSL/wolfssl/pull/3676.
+* [LOW] In the case of using custom ECC curves there is the potential for a crafted compressed ECC key that has a custom prime value to cause a hang when imported. This only affects applications that are loading in ECC keys with wolfSSL builds that have compressed ECC keys and custom ECC curves enabled.
+* [LOW] With TLS 1.3 authenticated-only ciphers a section of the server hello could contain 16 bytes of uninitialized data when sent to the connected peer. This affects only a specific build of wolfSSL with TLS 1.3 early data enabled and using authenticated-only ciphers with TLS 1.3.
 
 
 For additional vulnerability information visit the vulnerability page at
diff --git a/configure.ac b/configure.ac
index 3ad79e332..dd8a6ac74 100644
--- a/configure.ac
+++ b/configure.ac
@@ -7,7 +7,7 @@
 #
 AC_COPYRIGHT([Copyright (C) 2006-2020 wolfSSL Inc.])
 AC_PREREQ([2.63])
-AC_INIT([wolfssl],[4.6.0],[https://github.com/wolfssl/wolfssl/issues],[wolfssl],[https://www.wolfssl.com])
+AC_INIT([wolfssl],[4.7.0],[https://github.com/wolfssl/wolfssl/issues],[wolfssl],[https://www.wolfssl.com])
 AC_CONFIG_AUX_DIR([build-aux])
 
 # The following sets CFLAGS to empty if unset on command line.  We do not
@@ -55,15 +55,15 @@ LT_PREREQ([2.2])
 LT_INIT([disable-static win32-dll])
 
 #shared library versioning
-WOLFSSL_LIBRARY_VERSION=27:0:3
+WOLFSSL_LIBRARY_VERSION=28:0:4
 #                        | | |
 #                 +------+ | +---+
 #                 |        |     |
 #                current:revision:age
 #                 |        |     |
 #                 |        |     +- increment if interfaces have been added
 #                 |        |        set to zero if interfaces have been removed
 #                 |        |        or changed
 #                 |        +- increment if source code has changed
 #                 |           set to zero if current is incremented
 #                 +- increment if interfaces have been added, removed or changed
diff --git a/rpm/spec.in b/rpm/spec.in
index a9c25fea7..53788f307 100644
--- a/rpm/spec.in
+++ b/rpm/spec.in
@@ -45,309 +45,309 @@ you will need to install %{name}-devel.
 %install
 %{__rm} -rf %{buildroot}
 %{__make} install  DESTDIR="%{buildroot}" AM_INSTALL_PROGRAM_FLAGS=""
 mkdir -p $RPM_BUILD_ROOT/
 
 %check
 
 
 %clean
 %{__rm} -rf %{buildroot}
 
 %post -p /sbin/ldconfig
 
 %postun -p /sbin/ldconfig
 
 %files
 %defattr(-,root,root,-)
 %doc AUTHORS ChangeLog.md COPYING README README.md
 %{_docdir}/wolfssl/taoCert.txt
 %{_docdir}/wolfssl/example/echoserver.c
 %{_docdir}/wolfssl/example/server.c
 %{_docdir}/wolfssl/example/echoclient.c
 %{_docdir}/wolfssl/example/client.c
 %{_docdir}/wolfssl/example/sctp-client.c
 %{_docdir}/wolfssl/example/sctp-server.c
 %{_docdir}/wolfssl/example/sctp-client-dtls.c
 %{_docdir}/wolfssl/example/sctp-server-dtls.c
 %{_docdir}/wolfssl/example/tls_bench.c
 %{_docdir}/wolfssl/README.txt
 %{_libdir}/libwolfssl.la
 %{_libdir}/libwolfssl.so
 %{_libdir}/libwolfssl.so.24
-%{_libdir}/libwolfssl.so.24.3.0
+%{_libdir}/libwolfssl.so.24.4.0
 
 %files devel
 %defattr(-,root,root,-)
 %doc AUTHORS ChangeLog.md COPYING README README.md
 %{_bindir}/wolfssl-config
 %{_includedir}/cyassl/callbacks.h
 %{_includedir}/cyassl/certs_test.h
 %{_includedir}/cyassl/crl.h
 %{_includedir}/cyassl/ctaocrypt/aes.h
 %{_includedir}/cyassl/ctaocrypt/arc4.h
 %{_includedir}/cyassl/ctaocrypt/asn.h
 %{_includedir}/cyassl/ctaocrypt/asn_public.h
 %{_includedir}/cyassl/ctaocrypt/blake2-impl.h
 %{_includedir}/cyassl/ctaocrypt/blake2-int.h
 %{_includedir}/cyassl/ctaocrypt/blake2.h
 %{_includedir}/cyassl/ctaocrypt/camellia.h
 %{_includedir}/cyassl/ctaocrypt/chacha.h
 %{_includedir}/cyassl/ctaocrypt/coding.h
 %{_includedir}/cyassl/ctaocrypt/compress.h
 %{_includedir}/cyassl/ctaocrypt/des3.h
 %{_includedir}/cyassl/ctaocrypt/dh.h
 %{_includedir}/cyassl/ctaocrypt/dsa.h
 %{_includedir}/cyassl/ctaocrypt/ecc.h
 %{_includedir}/cyassl/ctaocrypt/error-crypt.h
 %{_includedir}/cyassl/ctaocrypt/fips_test.h
 %{_includedir}/cyassl/ctaocrypt/hc128.h
 %{_includedir}/cyassl/ctaocrypt/hmac.h
 %{_includedir}/cyassl/ctaocrypt/integer.h
 %{_includedir}/cyassl/ctaocrypt/logging.h
 %{_includedir}/cyassl/ctaocrypt/md2.h
 %{_includedir}/cyassl/ctaocrypt/md4.h
 %{_includedir}/cyassl/ctaocrypt/md5.h
 %{_includedir}/cyassl/ctaocrypt/memory.h
 %{_includedir}/cyassl/ctaocrypt/misc.h
 %{_includedir}/cyassl/ctaocrypt/mpi_class.h
 %{_includedir}/cyassl/ctaocrypt/mpi_superclass.h
 %{_includedir}/cyassl/ctaocrypt/pkcs7.h
 %{_includedir}/cyassl/ctaocrypt/poly1305.h
 %{_includedir}/cyassl/ctaocrypt/pwdbased.h
 %{_includedir}/cyassl/ctaocrypt/rabbit.h
 %{_includedir}/cyassl/ctaocrypt/random.h
 %{_includedir}/cyassl/ctaocrypt/ripemd.h
 %{_includedir}/cyassl/ctaocrypt/rsa.h
 %{_includedir}/cyassl/ctaocrypt/settings.h
 %{_includedir}/cyassl/ctaocrypt/settings_comp.h
 %{_includedir}/cyassl/ctaocrypt/sha.h
 %{_includedir}/cyassl/ctaocrypt/sha256.h
 %{_includedir}/cyassl/ctaocrypt/sha512.h
 %{_includedir}/cyassl/ctaocrypt/tfm.h
 %{_includedir}/cyassl/ctaocrypt/types.h
 %{_includedir}/cyassl/ctaocrypt/visibility.h
 %{_includedir}/cyassl/ctaocrypt/wc_port.h
 %{_includedir}/cyassl/error-ssl.h
 %{_includedir}/cyassl/ocsp.h
 %{_includedir}/cyassl/openssl/asn1.h
 %{_includedir}/cyassl/openssl/bio.h
 %{_includedir}/cyassl/openssl/bn.h
 %{_includedir}/cyassl/openssl/conf.h
 %{_includedir}/cyassl/openssl/crypto.h
 %{_includedir}/cyassl/openssl/des.h
 %{_includedir}/cyassl/openssl/dh.h
 %{_includedir}/cyassl/openssl/dsa.h
 %{_includedir}/cyassl/openssl/ec.h
 %{_includedir}/cyassl/openssl/ec25519.h
 %{_includedir}/cyassl/openssl/ec448.h
 %{_includedir}/cyassl/openssl/ecdh.h
 %{_includedir}/cyassl/openssl/ecdsa.h
 %{_includedir}/cyassl/openssl/ed25519.h
 %{_includedir}/cyassl/openssl/ed448.h
 %{_includedir}/cyassl/openssl/engine.h
 %{_includedir}/cyassl/openssl/err.h
 %{_includedir}/cyassl/openssl/evp.h
 %{_includedir}/cyassl/openssl/hmac.h
 %{_includedir}/cyassl/openssl/lhash.h
 %{_includedir}/cyassl/openssl/md4.h
 %{_includedir}/cyassl/openssl/md5.h
 %{_includedir}/cyassl/openssl/ocsp.h
 %{_includedir}/cyassl/openssl/opensslconf.h
 %{_includedir}/cyassl/openssl/opensslv.h
 %{_includedir}/cyassl/openssl/ossl_typ.h
 %{_includedir}/cyassl/openssl/pem.h
 %{_includedir}/cyassl/openssl/pkcs12.h
 %{_includedir}/cyassl/openssl/rand.h
 %{_includedir}/cyassl/openssl/ripemd.h
 %{_includedir}/cyassl/openssl/rsa.h
 %{_includedir}/cyassl/openssl/sha.h
 %{_includedir}/cyassl/openssl/ssl.h
 %{_includedir}/cyassl/openssl/ssl23.h
 %{_includedir}/cyassl/openssl/stack.h
 %{_includedir}/cyassl/openssl/ui.h
 %{_includedir}/cyassl/openssl/x509.h
 %{_includedir}/cyassl/openssl/x509v3.h
 %{_includedir}/cyassl/options.h
 %{_includedir}/cyassl/sniffer.h
 %{_includedir}/cyassl/sniffer_error.h
 %{_includedir}/cyassl/ssl.h
 %{_includedir}/cyassl/test.h
 %{_includedir}/cyassl/version.h
 %{_includedir}/wolfssl/callbacks.h
 %{_includedir}/wolfssl/certs_test.h
 %{_includedir}/wolfssl/crl.h
 %{_includedir}/wolfssl/error-ssl.h
 %{_includedir}/wolfssl/ocsp.h
 %{_includedir}/wolfssl/openssl/aes.h
 %{_includedir}/wolfssl/openssl/asn1.h
 %{_includedir}/wolfssl/openssl/asn1t.h
 %{_includedir}/wolfssl/openssl/bio.h
 %{_includedir}/wolfssl/openssl/bn.h
 %{_includedir}/wolfssl/openssl/cms.h
 %{_includedir}/wolfssl/openssl/buffer.h
 %{_includedir}/wolfssl/openssl/conf.h
 %{_includedir}/wolfssl/openssl/crypto.h
 %{_includedir}/wolfssl/openssl/des.h
 %{_includedir}/wolfssl/openssl/dh.h
 %{_includedir}/wolfssl/openssl/dsa.h
 %{_includedir}/wolfssl/openssl/ec.h
 %{_includedir}/wolfssl/openssl/ec25519.h
 %{_includedir}/wolfssl/openssl/ec448.h
 %{_includedir}/wolfssl/openssl/ecdh.h
 %{_includedir}/wolfssl/openssl/ecdsa.h
 %{_includedir}/wolfssl/openssl/ed25519.h
 %{_includedir}/wolfssl/openssl/ed448.h
 %{_includedir}/wolfssl/openssl/engine.h
 %{_includedir}/wolfssl/openssl/err.h
 %{_includedir}/wolfssl/openssl/evp.h
 %{_includedir}/wolfssl/openssl/hmac.h
 %{_includedir}/wolfssl/openssl/lhash.h
 %{_includedir}/wolfssl/openssl/md4.h
 %{_includedir}/wolfssl/openssl/md5.h
 %{_includedir}/wolfssl/openssl/obj_mac.h
 %{_includedir}/wolfssl/openssl/objects.h
 %{_includedir}/wolfssl/openssl/ocsp.h
 %{_includedir}/wolfssl/openssl/opensslconf.h
 %{_includedir}/wolfssl/openssl/opensslv.h
 %{_includedir}/wolfssl/openssl/ossl_typ.h
 %{_includedir}/wolfssl/openssl/pem.h
 %{_includedir}/wolfssl/openssl/pkcs12.h
 %{_includedir}/wolfssl/openssl/pkcs7.h
 %{_includedir}/wolfssl/openssl/rand.h
 %{_includedir}/wolfssl/openssl/rc4.h
 %{_includedir}/wolfssl/openssl/ripemd.h
 %{_includedir}/wolfssl/openssl/rsa.h
 %{_includedir}/wolfssl/openssl/sha.h
 %{_includedir}/wolfssl/openssl/srp.h
 %{_includedir}/wolfssl/openssl/sha3.h
 %{_includedir}/wolfssl/openssl/ssl.h
 %{_includedir}/wolfssl/openssl/ssl23.h
 %{_includedir}/wolfssl/openssl/stack.h
 %{_includedir}/wolfssl/openssl/txt_db.h
 %{_includedir}/wolfssl/openssl/tls1.h
 %{_includedir}/wolfssl/openssl/ui.h
 %{_includedir}/wolfssl/openssl/x509.h
 %{_includedir}/wolfssl/openssl/x509_vfy.h
 %{_includedir}/wolfssl/openssl/x509v3.h
 %{_includedir}/wolfssl/options.h
 %{_includedir}/wolfssl/sniffer.h
 %{_includedir}/wolfssl/sniffer_error.h
 %{_includedir}/wolfssl/ssl.h
 %{_includedir}/wolfssl/test.h
 %{_includedir}/wolfssl/version.h
 %{_includedir}/wolfssl/wolfcrypt/aes.h
 %{_includedir}/wolfssl/wolfcrypt/arc4.h
 %{_includedir}/wolfssl/wolfcrypt/asn.h
 %{_includedir}/wolfssl/wolfcrypt/asn_public.h
 %{_includedir}/wolfssl/wolfcrypt/blake2-impl.h
 %{_includedir}/wolfssl/wolfcrypt/blake2-int.h
 %{_includedir}/wolfssl/wolfcrypt/blake2.h
 %{_includedir}/wolfssl/wolfcrypt/camellia.h
 %{_includedir}/wolfssl/wolfcrypt/chacha.h
 %{_includedir}/wolfssl/wolfcrypt/chacha20_poly1305.h
 %{_includedir}/wolfssl/wolfcrypt/cmac.h
 %{_includedir}/wolfssl/wolfcrypt/coding.h
 %{_includedir}/wolfssl/wolfcrypt/compress.h
 %{_includedir}/wolfssl/wolfcrypt/cpuid.h
 %{_includedir}/wolfssl/wolfcrypt/cryptocb.h
 %{_includedir}/wolfssl/wolfcrypt/curve25519.h
 %{_includedir}/wolfssl/wolfcrypt/curve448.h
 %{_includedir}/wolfssl/wolfcrypt/des3.h
 %{_includedir}/wolfssl/wolfcrypt/dh.h
 %{_includedir}/wolfssl/wolfcrypt/dsa.h
 %{_includedir}/wolfssl/wolfcrypt/ecc.h
 %{_includedir}/wolfssl/wolfcrypt/ed25519.h
 %{_includedir}/wolfssl/wolfcrypt/ed448.h
 %{_includedir}/wolfssl/wolfcrypt/error-crypt.h
 %{_includedir}/wolfssl/wolfcrypt/fe_448.h
 %{_includedir}/wolfssl/wolfcrypt/fe_operations.h
 %{_includedir}/wolfssl/wolfcrypt/fips_test.h
 %{_includedir}/wolfssl/wolfcrypt/ge_448.h
 %{_includedir}/wolfssl/wolfcrypt/ge_operations.h
 %{_includedir}/wolfssl/wolfcrypt/hash.h
 %{_includedir}/wolfssl/wolfcrypt/hc128.h
 %{_includedir}/wolfssl/wolfcrypt/hmac.h
 %{_includedir}/wolfssl/wolfcrypt/idea.h
 %{_includedir}/wolfssl/wolfcrypt/integer.h
 %{_includedir}/wolfssl/wolfcrypt/logging.h
 %{_includedir}/wolfssl/wolfcrypt/md2.h
 %{_includedir}/wolfssl/wolfcrypt/md4.h
 %{_includedir}/wolfssl/wolfcrypt/md5.h
 %{_includedir}/wolfssl/wolfcrypt/mem_track.h
 %{_includedir}/wolfssl/wolfcrypt/memory.h
 %{_includedir}/wolfssl/wolfcrypt/misc.h
 %{_includedir}/wolfssl/wolfcrypt/mpi_class.h
 %{_includedir}/wolfssl/wolfcrypt/mpi_superclass.h
 %{_includedir}/wolfssl/wolfcrypt/pkcs12.h
 %{_includedir}/wolfssl/wolfcrypt/pkcs7.h
 %{_includedir}/wolfssl/wolfcrypt/poly1305.h
 %{_includedir}/wolfssl/wolfcrypt/pwdbased.h
 %{_includedir}/wolfssl/wolfcrypt/rabbit.h
 %{_includedir}/wolfssl/wolfcrypt/random.h
 %{_includedir}/wolfssl/wolfcrypt/ripemd.h
 %{_includedir}/wolfssl/wolfcrypt/rc2.h
 %{_includedir}/wolfssl/wolfcrypt/rsa.h
 %{_includedir}/wolfssl/wolfcrypt/settings.h
 %{_includedir}/wolfssl/wolfcrypt/sha.h
 %{_includedir}/wolfssl/wolfcrypt/sha256.h
 %{_includedir}/wolfssl/wolfcrypt/sha3.h
 %{_includedir}/wolfssl/wolfcrypt/sha512.h
 %{_includedir}/wolfssl/wolfcrypt/signature.h
 %{_includedir}/wolfssl/wolfcrypt/srp.h
 %{_includedir}/wolfssl/wolfcrypt/tfm.h
 %{_includedir}/wolfssl/wolfcrypt/types.h
 %{_includedir}/wolfssl/wolfcrypt/visibility.h
 %{_includedir}/wolfssl/wolfcrypt/wc_encrypt.h
 %{_includedir}/wolfssl/wolfcrypt/wc_port.h
 %{_includedir}/wolfssl/wolfcrypt/wolfevent.h
 %{_includedir}/wolfssl/wolfcrypt/wolfmath.h
 %{_includedir}/wolfssl/wolfio.h
 %{_libdir}/pkgconfig/wolfssl.pc
 
 %changelog
 * Mon Aug 17 2020 John Safranek <john@wolfssl.com>
 - Add a missing header.
 - Update for release.
 * Thu Apr 16 2020 John Safranek <john@wolfssl.com>
 - Add some missing headers.
 - Sort the file list.
 * Thu Dec 19 2019 Jacob Barthelmeh <jacob@wolfssl.com>
 - Add wolfssl/openssl/tls1.h, wolfssl/openssl/x509_vfy.h
 * Fri Mar 15 2019 John Safranek <john@wolfssl.com>
 - Updates for the v4 release.
 * Thu Dec 20 2018 Jacob Barthelmeh <jacob@wolfssl.com>
 - Remove wolfssl/wolfcrypt/fips.h, add wolfssl/openssl/pkcs7.h
 * Wed Jun 20 2018 Jacob Barthelmeh <jacob@wolfssl.com>
 - Remove NEWS, update ChangeLog to ChangeLog.md, remove wolfssl/wolfcrypt/fips.h, add wolfssl/wolfcrypt/cryptocb.h
 * Thu May 31 2018 John Safranek <john@wolfssl.com>
 - Update the version number on the library SO file.
 * Fri Mar 02 2018 Jacob Barthelmeh <jacob@wolfssl.com>
 - Added headder files fips.h, buffer.h, objects.h, rc4.h and example tls_bench.c
 * Fri Sep 08 2017 Jacob Barthelmeh <jacob@wolfssl.com>
 - Change name for header wolfssl/io.h to wolfssl/wolfio.h
 * Fri Aug 04 2017 Jacob Barthelmeh <jacob@wolfssl.com>
 - Added header for wolfssl/wolfcrypt/cpuid.h, wolfssl/wolfcrypt/sha3.h
 * Thu May 04 2017 Jacob Barthelmeh <jacob@wolfssl.com>
 - Added header for wolfssl/io.h, wolfssl/openssl/ssl23.h, cyassl/openssl/ssl23.h
 * Thu Feb 09 2017 Jacob Barthelmeh <jacob@wolfssl.com>
 - Added header for wolfssl/wolfcrypt/wolfmath.h
 * Fri Nov 11 2016 Jacob Barthelmeh <jacob@wolfssl.com>
 - Added header for wolfssl/openssl/aes.h
 * Fri Oct 28 2016 Jacob Barthelmeh <jacob@wolfssl.com>
 - Added header for pkcs12
 * Fri Sep 23 2016 John Safranek <john@wolfssl.com>
 - Add the dtls-sctp example sources
 * Tue Jun 14 2016 Jacob Barthelmeh <jacob@wolfssl.com>
 - Change location for mem_track.h header
 - Added header for cmac.h
 * Thu Mar 17 2016 Jacob Barthelmeh <jacob@wolfssl.com>
 - Added header for mem_track.h
 * Wed Dec 30 2015 Jacob Barthelmeh <jacob@wolfssl.com>
 - Added headers for curve25519 and ed25519 openssl compatibility
 - Added headers for Idea, srp, signature, and wc_encrypt
 * Tue Mar 31 2015 John Safranek <john@wolfssl.com>
 - Added recent new wolfcrypt headers for curve25519
 * Fri Jan 09 2015 John Safranek <john@wolfssl.com>
 - Update for cyassl->wolfssl name change
 * Sat Oct 20 2012 Brian Aker <brian@tangent.org>
 - Initial package
diff --git a/wolfssl.rc b/wolfssl.rc
index f1a166c2e..cd9a6fa84 100644
Binary files a/wolfssl.rc and b/wolfssl.rc differ
diff --git a/wolfssl/version.h b/wolfssl/version.h
index 4ed515023..3f7d97692 100644
--- a/wolfssl/version.h
+++ b/wolfssl/version.h
@@ -27,14 +27,14 @@
 #ifdef __cplusplus
 extern "C" {
 #endif
 
-#define LIBWOLFSSL_VERSION_STRING "4.6.0"
-#define LIBWOLFSSL_VERSION_HEX 0x04006000
+#define LIBWOLFSSL_VERSION_STRING "4.7.0"
+#define LIBWOLFSSL_VERSION_HEX 0x04007000
 
 #ifdef __cplusplus
 }
 #endif
 
 
 #endif /* WOLFSSL_VERSION_H */
 
