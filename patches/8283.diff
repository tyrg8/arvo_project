commit 2f57215cbab35ccafcee61213de80409472ebc4b
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Sun May 13 11:32:14 2018 +0200

    DXF: avoid null pointer dereference when DXF_MAX_BSPLINE_CONTROL_POINTS is hit. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=8254. Credit to OSS Fuzz

diff --git a/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp b/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp
index 5cefc208de..5b074ab747 100644
--- a/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp
+++ b/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp
@@ -61,234 +61,234 @@ inline static double PointDist( double x1, double y1, double z1, double x2,
 OGRDXFFeature *OGRDXFLayer::TranslateLEADER()
 
 {
     char szLineBuf[257];
     int nCode;
     OGRDXFFeature *poFeature = new OGRDXFFeature( poFeatureDefn );
 
     OGRLineString *poLine = new OGRLineString();
     bool bHaveX = false;
     bool bHaveY = false;
     bool bHaveZ = false;
     double dfCurrentX = 0.0;
     double dfCurrentY = 0.0;
     double dfCurrentZ = 0.0;
     int nNumVertices = 0;
 
     bool bHorizontalDirectionFlip = true;
     double dfHorizontalDirectionX = 1.0;
     double dfHorizontalDirectionY = 0.0;
     double dfHorizontalDirectionZ = 0.0;
     bool bHasTextAnnotation = false;
     double dfTextAnnotationWidth = 0.0;
     bool bIsSpline = false;
 
     // spec is silent as to default, but AutoCAD assumes true
     bool bWantArrowhead = true;
 
     bool bReadyForDimstyleOverride = false;
 
     std::map<CPLString,CPLString> oDimStyleProperties;
     poDS->PopulateDefaultDimStyleProperties(oDimStyleProperties);
 
     while( (nCode = poDS->ReadValue(szLineBuf,sizeof(szLineBuf))) > 0 )
     {
         switch( nCode )
         {
           case 3:
             // 3 is the dimension style name. We don't need to store it,
             // let's just fetch the dimension style properties
             poDS->LookupDimStyle(szLineBuf, oDimStyleProperties);
             break;
 
           case 10:
             // add the previous point onto the linestring
             if( bHaveX && bHaveY && bHaveZ ) {
                 poLine->setPoint( nNumVertices++,
                     dfCurrentX, dfCurrentY, dfCurrentZ );
                 bHaveY = bHaveZ = false;
             }
             dfCurrentX = CPLAtof(szLineBuf);
             bHaveX = true;
             break;
 
           case 20:
             // add the previous point onto the linestring
             if( bHaveX && bHaveY && bHaveZ ) {
                 poLine->setPoint( nNumVertices++,
                     dfCurrentX, dfCurrentY, dfCurrentZ );
                 bHaveX = bHaveZ = false;
             }
             dfCurrentY = CPLAtof(szLineBuf);
             bHaveY = true;
             break;
 
           case 30:
             // add the previous point onto the linestring
             if( bHaveX && bHaveY && bHaveZ ) {
                 poLine->setPoint( nNumVertices++,
                     dfCurrentX, dfCurrentY, dfCurrentZ );
                 bHaveX = bHaveY = false;
             }
             dfCurrentZ = CPLAtof(szLineBuf);
             bHaveZ = true;
             break;
 
           case 41:
             dfTextAnnotationWidth = CPLAtof(szLineBuf);
             break;
 
           case 71:
             bWantArrowhead = atoi(szLineBuf) != 0;
             break;
 
           case 72:
             bIsSpline = atoi(szLineBuf) != 0;
             break;
 
           case 73:
             bHasTextAnnotation = atoi(szLineBuf) == 0;
             break;
 
           case 74:
             // DXF spec seems to have this backwards. A value of 0 actually
             // indicates no flipping occurs, and 1 (flip) is the default
             bHorizontalDirectionFlip = atoi(szLineBuf) != 0;
             break;
 
           case 211:
             dfHorizontalDirectionX = CPLAtof(szLineBuf);
             break;
 
           case 221:
             dfHorizontalDirectionY = CPLAtof(szLineBuf);
             break;
 
           case 231:
             dfHorizontalDirectionZ = CPLAtof(szLineBuf);
             break;
 
           case 1001:
             bReadyForDimstyleOverride = EQUAL(szLineBuf, "ACAD");
             break;
 
           case 1070:
             if( bReadyForDimstyleOverride )
             {
                 // Store DIMSTYLE override values in the dimension
                 // style property map. The nInnerCode values match the
                 // group codes used in the DIMSTYLE table.
                 const int nInnerCode = atoi(szLineBuf);
                 const char* pszProperty = ACGetDimStylePropertyName(nInnerCode);
                 if( pszProperty )
                 {
                     nCode = poDS->ReadValue(szLineBuf,sizeof(szLineBuf));
                     if( nCode == 1005 || nCode == 1040 || nCode == 1070 )
                         oDimStyleProperties[pszProperty] = szLineBuf;
                 }
             }
             break;
 
           default:
             TranslateGenericProperty( poFeature, nCode, szLineBuf );
             break;
         }
     }
 
     if( nCode == 0 )
         poDS->UnreadValue();
 
     if( bHaveX && bHaveY && bHaveZ )
         poLine->setPoint( nNumVertices++, dfCurrentX, dfCurrentY, dfCurrentZ );
 
     // Unpack the dimension style
     bool bWantExtension = atoi(oDimStyleProperties["DIMTAD"]) > 0;
     double dfTextOffset = CPLAtof(oDimStyleProperties["DIMGAP"]);
     double dfScale = CPLAtof(oDimStyleProperties["DIMSCALE"]);
     double dfArrowheadSize = CPLAtof(oDimStyleProperties["DIMASZ"]);
     int nLeaderColor = atoi(oDimStyleProperties["DIMCLRD"]);
     // DIMLDRBLK is the entity handle of the BLOCK_RECORD table entry that
     // corresponds to the arrowhead block.
     CPLString osArrowheadBlockHandle = oDimStyleProperties["DIMLDRBLK"];
 
     // Zero scale has a special meaning which we aren't interested in,
     // so we can change it to 1.0
     if( dfScale == 0.0 )
         dfScale = 1.0;
 
     // Use the color from the dimension style if it is not ByBlock
     if( nLeaderColor > 0 )
         poFeature->oStyleProperties["Color"] = oDimStyleProperties["DIMCLRD"];
 
 /* -------------------------------------------------------------------- */
 /*      Add an arrowhead to the start of the leader line.               */
 /* -------------------------------------------------------------------- */
 
     if( bWantArrowhead && nNumVertices >= 2 )
     {
         InsertArrowhead( poFeature, osArrowheadBlockHandle, poLine,
             dfArrowheadSize * dfScale );
     }
 
 
     if( bHorizontalDirectionFlip )
     {
         dfHorizontalDirectionX *= -1;
         dfHorizontalDirectionX *= -1;
         dfHorizontalDirectionX *= -1;
     }
 
 /* -------------------------------------------------------------------- */
 /*      For a spline leader, determine the end tangent direction        */
 /*      and interpolate the spline vertices.                            */
 /* -------------------------------------------------------------------- */
 
     if( bIsSpline )
     {
         DXFTriple oEndTangent;
         if( bHasTextAnnotation )
         {
             oEndTangent = DXFTriple( dfHorizontalDirectionX,
                 dfHorizontalDirectionY, dfHorizontalDirectionZ );
         }
         InterpolateSpline( poLine, oEndTangent );
     }
 
 /* -------------------------------------------------------------------- */
 /*      Add an extension to the end of the leader line. This is not     */
 /*      properly documented in the DXF spec, but it is needed to        */
 /*      replicate the way AutoCAD displays leader objects.              */
 /*                                                                      */
 /*      When $DIMTAD (77) is nonzero, the leader line is extended       */
 /*      under the text annotation. This extension is not stored as an   */
 /*      additional vertex, so we need to create it ourselves.           */
 /* -------------------------------------------------------------------- */
 
-    if( bWantExtension && bHasTextAnnotation && nNumVertices >= 2 )
+    if( bWantExtension && bHasTextAnnotation && poLine->getNumPoints() >= 2 )
     {
         OGRPoint oLastVertex;
         poLine->getPoint( poLine->getNumPoints() - 1, &oLastVertex );
 
         double dfExtensionX = oLastVertex.getX();
         double dfExtensionY = oLastVertex.getY();
         double dfExtensionZ = oLastVertex.getZ();
 
         double dfExtensionLength = ( dfTextOffset * dfScale ) +
             dfTextAnnotationWidth;
         dfExtensionX += dfHorizontalDirectionX * dfExtensionLength;
         dfExtensionY += dfHorizontalDirectionY * dfExtensionLength;
         dfExtensionZ += dfHorizontalDirectionZ * dfExtensionLength;
 
         poLine->setPoint( poLine->getNumPoints(), dfExtensionX, dfExtensionY,
             dfExtensionZ );
     }
 
     poFeature->SetGeometryDirectly( poLine );
 
     PrepareLineStyle( poFeature );
 
     return poFeature;
 }
 
 /************************************************************************/
 /*       DXFMLEADERVertex, DXFMLEADERLeaderLine, DXFMLEADERLeader       */
 /************************************************************************/
