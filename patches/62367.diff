commit 6f43e71f4cbddf96d47648f36161a9815389b50a
Author: Reini Urban <reini.urban@gmail.com>
Date:   Tue Jan 23 13:24:26 2024 +0100

    indxf: reject invalid number pairs
    
    0\nSECTION ok,
    0SECTION not ok.

diff --git a/src/in_dxf.c b/src/in_dxf.c
index ee2319ff..50027e68 100644
--- a/src/in_dxf.c
+++ b/src/in_dxf.c
@@ -249,70 +249,79 @@ static void
 dxf_skip_ws (Bit_Chain *dat)
 {
   const int is_binary = dat->opts & DWG_OPTS_DXFB;
   if (is_binary)
     return;
   if (dat->byte >= dat->size)
     return;
   // clang-format off
   for (; (!dat->chain[dat->byte] ||
           dat->chain[dat->byte] == ' ' ||
           dat->chain[dat->byte] == '\t' ||
           dat->chain[dat->byte] == '\r');
        )
     // clang-format on
     {
       dat->byte++;
       if (dat->byte >= dat->size)
         return;
     }
 }
 
 #  define SAFER_STRTOL(num, rettype, ret)                                     \
     if (dat->byte + 3 >= dat->size                                            \
         || !memchr (&dat->chain[dat->byte], '\n', dat->size - dat->byte))     \
       {                                                                       \
         LOG_ERROR ("Premature DXF end");                                      \
         dat->byte = dat->size;                                                \
         return (rettype)ret;                                                  \
       }                                                                       \
     errno = 0;                                                                \
     num = strtol ((char *)&dat->chain[dat->byte], &endptr, 10);               \
     if (endptr)                                                               \
       {                                                                       \
         if (endptr == (char *)&dat->chain[dat->byte])                         \
           {                                                                   \
             LOG_ERROR ("Expected DXF integer value");                         \
             dat->byte = dat->size;                                            \
             return (rettype)ret;                                              \
           }                                                                   \
         dat->byte += (unsigned char *)endptr - &dat->chain[dat->byte];        \
       }                                                                       \
     if (errno == ERANGE)                                                      \
       return (rettype)num;                                                    \
     if (dat->byte + 1 >= dat->size)                                           \
-    return (rettype)num
+      return (rettype)num
 
 static BITCODE_RC
 dxf_read_rc (Bit_Chain *dat)
 {
   const int is_binary = dat->opts & DWG_OPTS_DXFB;
   if (is_binary)
     {
       return bit_read_RC (dat);
     }
   else
     {
       char *endptr;
       long num;
       // avoid overflow over dat->size
       SAFER_STRTOL (num, BITCODE_RC, 0);
       if (dat->chain[dat->byte] == '\r')
         dat->byte++;
       if (dat->chain[dat->byte] == '\n')
         dat->byte++;
+      else
+        {
+          LOG_ERROR ("%s: \\n missing after %ld (at %" PRIuSIZE ")",
+                     __FUNCTION__, num, dat->byte);
+          dat->byte = dat->size;
+        }
       if (num > UINT8_MAX)
-        LOG_ERROR ("%s: RC overflow %ld (at %" PRIuSIZE ")", __FUNCTION__, num,
-                   dat->byte);
+        {
+          LOG_ERROR ("%s: RC overflow %ld (at %" PRIuSIZE ")", __FUNCTION__, num,
+                     dat->byte);
+          dat->byte = dat->size;
+        }
       return (BITCODE_RC)num;
     }
 }
@@ -321,22 +330,31 @@ static BITCODE_RS
 dxf_read_rs (Bit_Chain *dat)
 {
   const int is_binary = dat->opts & DWG_OPTS_DXFB;
   if (is_binary)
     {
       return bit_read_RS (dat);
     }
   else
     {
       char *endptr;
       long num;
       SAFER_STRTOL (num, BITCODE_RS, 0);
       if (dat->chain[dat->byte] == '\r')
         dat->byte++;
       if (dat->chain[dat->byte] == '\n')
         dat->byte++;
+      else
+        {
+          LOG_ERROR ("%s: \\n missing after %ld (at %" PRIuSIZE ")",
+                     __FUNCTION__, num, dat->byte);
+          dat->byte = dat->size;
+        }
       if (num > UINT16_MAX)
-        LOG_ERROR ("%s: RS overflow %ld (at %" PRIuSIZE ")", __FUNCTION__, num,
+        {
+          LOG_ERROR ("%s: RS overflow %ld (at %" PRIuSIZE ")", __FUNCTION__, num,
                    dat->byte);
+          dat->byte = dat->size;
+        }
       return (BITCODE_RS)num;
     }
 }
@@ -345,25 +363,31 @@ static BITCODE_RL
 dxf_read_rl (Bit_Chain *dat)
 {
   const int is_binary = dat->opts & DWG_OPTS_DXFB;
   if (is_binary)
     {
       return bit_read_RL (dat);
     }
   else
     {
       char *endptr;
       long num;
       // avoid overflow over dat->size
       SAFER_STRTOL (num, BITCODE_RL, 0);
       if (dat->chain[dat->byte] == '\r')
         dat->byte++;
       if (dat->chain[dat->byte] == '\n')
         dat->byte++;
+      else
+        {
+          LOG_ERROR ("%s: \\n missing after %ld (at %" PRIuSIZE ")",
+                     __FUNCTION__, num, dat->byte);
+          dat->byte = dat->size;
+        }
       /*
       if (num > (long)0xffffffff)
         LOG_ERROR ("%s: RL overflow %ld (at %" PRIuSIZE ")", __FUNCTION__, num,
                    dat->byte);
       */
       return (BITCODE_RL)num;
     }
 }
@@ -372,20 +396,26 @@ static BITCODE_RLL
 dxf_read_rll (Bit_Chain *dat)
 {
   const int is_binary = dat->opts & DWG_OPTS_DXFB;
   if (is_binary)
     {
       return bit_read_RLL (dat);
     }
   else
     {
       char *endptr;
       BITCODE_RLL num;
       // avoid overflow over dat->size (need final "  0\nEOF")
       SAFER_STRTOL (num, BITCODE_RLL, 0UL);
       if (dat->chain[dat->byte] == '\r')
         dat->byte++;
       if (dat->chain[dat->byte] == '\n')
         dat->byte++;
+      else
+        {
+          LOG_ERROR ("%s: \\n missing after %ld (at %" PRIuSIZE ")",
+                     __FUNCTION__, (long)num, dat->byte);
+          dat->byte = dat->size;
+        }
       return num;
     }
 }
