commit 7fce9752137f7040358dfbc90c677240396f8b82
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sat Mar 31 20:47:59 2018 -0400

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=7242

diff --git a/coders/heic.c b/coders/heic.c
index 71a01e951..c10c35815 100644
--- a/coders/heic.c
+++ b/coders/heic.c
@@ -385,43 +385,45 @@ static MagickBooleanType ParseHvcCAtom(HEICItemProp *prop, ExceptionInfo *except
 static MagickBooleanType ParseIpcoAtom(Image *image, DataBuffer *db,
     HEICImageContext *ctx, ExceptionInfo *exception)
 {
   unsigned int
     length, atom;
 
   HEICItemProp
     *prop;
 
   /*
      property indicies starts from 1
   */
   for (ctx->itemPropsCount = 1; ctx->itemPropsCount < MAX_ITEM_PROPS && DBGetSize(db) > 8; ctx->itemPropsCount++) {
     DataBuffer
       propDb;
 
     length = DBReadUInt(db);
     atom = DBReadUInt(db);
 
     if (ctx->itemPropsCount == MAX_ITEM_PROPS) {
       ThrowAndReturn("too many item properties");
     }
 
     prop = &(ctx->itemProps[ctx->itemPropsCount]);
     prop->type = atom;
     prop->size = length - 8;
+    if (prop->data != (uint8_t *) NULL)
+      prop->data=(uint8_t *) RelinquishMagickMemory(prop->data);
     prop->data = (uint8_t *) AcquireCriticalMemory(prop->size);
     if (DBChop(&propDb, db, prop->size) != MagickTrue) {
       ThrowAndReturn("incorrect read size");
     }
     memcpy(prop->data, propDb.data, prop->size);
 
     switch (prop->type) {
       case ATOM('h', 'v', 'c', 'C'):
         ParseHvcCAtom(prop, exception);
         break;
       default:
         break;
     }
   }
 
   return MagickTrue;
 }
