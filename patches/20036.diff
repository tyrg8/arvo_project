commit a32ecc15aec6518f5a126fb8f3643e563327f74d
Author: Ebrahim Byagowi <ebrahim@gnu.org>
Date:   Sat Jan 11 15:37:24 2020 +0330

    Fix collect lookups logic of FeatureVariationRecord
    
    As "Offset to a feature table substitution table, from beginning of the FeatureVariations table."
    from https://docs.microsoft.com/en-us/typography/opentype/spec/chapter2 the record should
    match its sanitize logic not the reverse way.
    
    Fixes https://crbug.com/oss-fuzz/20021 and https://crbug.com/oss-fuzz/20022

diff --git a/src/hb-ot-layout-common.hh b/src/hb-ot-layout-common.hh
index c85c5a3a4..af394b5b7 100644
--- a/src/hb-ot-layout-common.hh
+++ b/src/hb-ot-layout-common.hh
@@ -2362,25 +2362,26 @@ struct FeatureTableSubstitution
 struct FeatureVariationRecord
 {
   friend struct FeatureVariations;
 
-  void collect_lookups (const hb_set_t *feature_indexes,
+  void collect_lookups (const void     *base,
+			const hb_set_t *feature_indexes,
 			hb_set_t       *lookup_indexes /* OUT */) const
   {
-    return (this+substitutions).collect_lookups (feature_indexes, lookup_indexes);
+    return (base+substitutions).collect_lookups (feature_indexes, lookup_indexes);
   }
 
   bool sanitize (hb_sanitize_context_t *c, const void *base) const
   {
     TRACE_SANITIZE (this);
     return_trace (conditions.sanitize (c, base) &&
 		  substitutions.sanitize (c, base));
   }
 
   protected:
   LOffsetTo<ConditionSet>
 			conditions;
   LOffsetTo<FeatureTableSubstitution>
 			substitutions;
   public:
   DEFINE_SIZE_STATIC (8);
 };
@@ -2388,61 +2389,61 @@ struct FeatureVariationRecord
 struct FeatureVariations
 {
   static constexpr unsigned NOT_FOUND_INDEX = 0xFFFFFFFFu;
 
   bool find_index (const int *coords, unsigned int coord_len,
 			  unsigned int *index) const
   {
     unsigned int count = varRecords.len;
     for (unsigned int i = 0; i < count; i++)
     {
       const FeatureVariationRecord &record = varRecords.arrayZ[i];
       if ((this+record.conditions).evaluate (coords, coord_len))
       {
 	*index = i;
 	return true;
       }
     }
     *index = NOT_FOUND_INDEX;
     return false;
   }
 
   const Feature *find_substitute (unsigned int variations_index,
 				  unsigned int feature_index) const
   {
     const FeatureVariationRecord &record = varRecords[variations_index];
     return (this+record.substitutions).find_substitute (feature_index);
   }
 
   FeatureVariations* copy (hb_serialize_context_t *c) const
   {
     TRACE_SERIALIZE (this);
     return_trace (c->embed (*this));
   }
 
   void collect_lookups (const hb_set_t *feature_indexes,
 			hb_set_t       *lookup_indexes /* OUT */) const
   {
     for (const FeatureVariationRecord& r : varRecords)
-      r.collect_lookups (feature_indexes, lookup_indexes);
+      r.collect_lookups (this, feature_indexes, lookup_indexes);
   }
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (version.sanitize (c) &&
 		  likely (version.major == 1) &&
 		  varRecords.sanitize (c, this));
   }
 
   protected:
   FixedVersion<>	version;	/* Version--0x00010000u */
   LArrayOf<FeatureVariationRecord>
 			varRecords;
   public:
   DEFINE_SIZE_ARRAY_SIZED (8, varRecords);
 };
 
 
 /*
  * Device Tables
  */
diff --git a/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5167653459329024 b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5167653459329024
new file mode 100644
index 000000000..fe83d24a9
Binary files /dev/null and b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5167653459329024 differ
diff --git a/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5642531954229248 b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5642531954229248
new file mode 100644
index 000000000..8631cd645
Binary files /dev/null and b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5642531954229248 differ
