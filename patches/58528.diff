commit 6f2cf88771bd8c3986b0c8b6404eabc5b37d8a6e
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Thu May 25 23:40:19 2023 +0200

    avcodec/hevc_refs: Check that nb_refs stays <= HEVC_MAX_REFS
    
    Fixes: 58528/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_HEVC_fuzzer-5834725318328320
    Fixes: index 16 out of bounds for type 'int [16]'
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/hevc_refs.c b/libavcodec/hevc_refs.c
index a4af6ca656..3aa8e19950 100644
--- a/libavcodec/hevc_refs.c
+++ b/libavcodec/hevc_refs.c
@@ -316,84 +316,84 @@ static int init_slice_rpl(HEVCContext *s)
 int ff_hevc_slice_rpl(HEVCContext *s)
 {
     SliceHeader *sh = &s->sh;
 
     uint8_t nb_list = sh->slice_type == HEVC_SLICE_B ? 2 : 1;
     uint8_t list_idx;
     int i, j, ret;
 
     ret = init_slice_rpl(s);
     if (ret < 0)
         return ret;
 
     if (!(s->rps[ST_CURR_BEF].nb_refs + s->rps[ST_CURR_AFT].nb_refs +
           s->rps[LT_CURR].nb_refs) && !s->ps.pps->pps_curr_pic_ref_enabled_flag) {
         av_log(s->avctx, AV_LOG_ERROR, "Zero refs in the frame RPS.\n");
         return AVERROR_INVALIDDATA;
     }
 
     for (list_idx = 0; list_idx < nb_list; list_idx++) {
         RefPicList  rpl_tmp = { { 0 } };
         RefPicList *rpl     = &s->ref->refPicList[list_idx];
 
         /* The order of the elements is
          * ST_CURR_BEF - ST_CURR_AFT - LT_CURR for the L0 and
          * ST_CURR_AFT - ST_CURR_BEF - LT_CURR for the L1 */
         int cand_lists[3] = { list_idx ? ST_CURR_AFT : ST_CURR_BEF,
                               list_idx ? ST_CURR_BEF : ST_CURR_AFT,
                               LT_CURR };
 
         /* concatenate the candidate lists for the current frame */
         while (rpl_tmp.nb_refs < sh->nb_refs[list_idx]) {
             for (i = 0; i < FF_ARRAY_ELEMS(cand_lists); i++) {
                 RefPicList *rps = &s->rps[cand_lists[i]];
                 for (j = 0; j < rps->nb_refs && rpl_tmp.nb_refs < HEVC_MAX_REFS; j++) {
                     rpl_tmp.list[rpl_tmp.nb_refs]       = rps->list[j];
                     rpl_tmp.ref[rpl_tmp.nb_refs]        = rps->ref[j];
                     rpl_tmp.isLongTerm[rpl_tmp.nb_refs] = i == 2;
                     rpl_tmp.nb_refs++;
                 }
             }
             // Construct RefPicList0, RefPicList1 (8-8, 8-10)
-            if (s->ps.pps->pps_curr_pic_ref_enabled_flag) {
+            if (s->ps.pps->pps_curr_pic_ref_enabled_flag && rpl_tmp.nb_refs < HEVC_MAX_REFS) {
                 rpl_tmp.list[rpl_tmp.nb_refs]           = s->ref->poc;
                 rpl_tmp.ref[rpl_tmp.nb_refs]            = s->ref;
                 rpl_tmp.isLongTerm[rpl_tmp.nb_refs]     = 1;
                 rpl_tmp.nb_refs++;
             }
         }
 
         /* reorder the references if necessary */
         if (sh->rpl_modification_flag[list_idx]) {
             for (i = 0; i < sh->nb_refs[list_idx]; i++) {
                 int idx = sh->list_entry_lx[list_idx][i];
 
                 if (idx >= rpl_tmp.nb_refs) {
                     av_log(s->avctx, AV_LOG_ERROR, "Invalid reference index.\n");
                     return AVERROR_INVALIDDATA;
                 }
 
                 rpl->list[i]       = rpl_tmp.list[idx];
                 rpl->ref[i]        = rpl_tmp.ref[idx];
                 rpl->isLongTerm[i] = rpl_tmp.isLongTerm[idx];
                 rpl->nb_refs++;
             }
         } else {
             memcpy(rpl, &rpl_tmp, sizeof(*rpl));
             rpl->nb_refs = FFMIN(rpl->nb_refs, sh->nb_refs[list_idx]);
         }
 
         // 8-9
         if (s->ps.pps->pps_curr_pic_ref_enabled_flag &&
             !sh->rpl_modification_flag[list_idx] &&
             rpl_tmp.nb_refs > sh->nb_refs[L0]) {
             rpl->list[sh->nb_refs[L0] - 1] = s->ref->poc;
             rpl->ref[sh->nb_refs[L0] - 1]  = s->ref;
         }
 
         if (sh->collocated_list == list_idx &&
             sh->collocated_ref_idx < rpl->nb_refs)
             s->ref->collocated_ref = rpl->ref[sh->collocated_ref_idx];
     }
 
     return 0;
 }
