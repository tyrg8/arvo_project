commit ac8d76023386fb1f1b31b47cd294e28831929c96
Author: Alex Rebert <alexandre.rebert@gmail.com>
Date:   Mon Jan 3 20:49:47 2022 -0500

    ucl_lex_json_string: fix out-of-bounds read
    
    If the string ends with a '\', the function tried to read the next
    character before checking bounds. This commit move the bounds check
    before the read to avoid the out-of-bounds read.
    
    Fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=21578

diff --git a/src/ucl_parser.c b/src/ucl_parser.c
index 093f993..c2a51ad 100644
--- a/src/ucl_parser.c
+++ b/src/ucl_parser.c
@@ -1030,84 +1030,84 @@ static bool
 ucl_lex_json_string (struct ucl_parser *parser,
 		struct ucl_chunk *chunk,
 		bool *need_unescape,
 		bool *ucl_escape,
 		bool *var_expand)
 {
 	const unsigned char *p = chunk->pos;
 	unsigned char c;
 	int i;
 
 	while (p < chunk->end) {
 		c = *p;
 		if (c < 0x1F) {
 			/* Unmasked control character */
 			if (c == '\n') {
 				ucl_set_err (parser, UCL_ESYNTAX, "unexpected newline",
 						&parser->err);
 			}
 			else {
 				ucl_set_err (parser, UCL_ESYNTAX, "unexpected control character",
 						&parser->err);
 			}
 			return false;
 		}
 		else if (c == '\\') {
 			ucl_chunk_skipc (chunk, p);
-			c = *p;
 			if (p >= chunk->end) {
 				ucl_set_err (parser, UCL_ESYNTAX, "unfinished escape character",
 						&parser->err);
 				return false;
 			}
-			else if (ucl_test_character (c, UCL_CHARACTER_ESCAPE)) {
+			c = *p;
+			if (ucl_test_character (c, UCL_CHARACTER_ESCAPE)) {
 				if (c == 'u') {
 					ucl_chunk_skipc (chunk, p);
 					for (i = 0; i < 4 && p < chunk->end; i ++) {
 						if (!isxdigit (*p)) {
 							ucl_set_err (parser, UCL_ESYNTAX, "invalid utf escape",
 									&parser->err);
 							return false;
 						}
 						ucl_chunk_skipc (chunk, p);
 					}
 					if (p >= chunk->end) {
 						ucl_set_err (parser, UCL_ESYNTAX,
 								"unfinished escape character",
 								&parser->err);
 						return false;
 					}
 				}
 				else {
 					ucl_chunk_skipc (chunk, p);
 				}
 			}
 			*need_unescape = true;
 			*ucl_escape = true;
 			continue;
 		}
 		else if (c == '"') {
 			ucl_chunk_skipc (chunk, p);
 			return true;
 		}
 		else if (ucl_test_character (c, UCL_CHARACTER_UCL_UNSAFE)) {
 			*ucl_escape = true;
 		}
 		else if (c == '$') {
 			*var_expand = true;
 		}
 		ucl_chunk_skipc (chunk, p);
 	}
 
 	ucl_set_err (parser, UCL_ESYNTAX,
 			"no quote at the end of json string",
 			&parser->err);
 	return false;
 }
 
 /**
  * Process single quoted string
  * @param parser
  * @param chunk
  * @param need_unescape
  * @return
  */
