commit 9835ec2b9721f839af5a4e337e3cd588e0ad0208
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Tue Feb 13 10:58:19 2024 +0100

    valid: Fix xmlAddIDSafe in "streaming" mode
    
    Make sure that IDs and attributes never reference each other in
    streaming (XML reader) mode, even when attributes are copied from an
    entity.
    
    Also update lineno.
    
    Fixes a short-lived use-after-free.

diff --git a/valid.c b/valid.c
index b1b0001b..ada36a66 100644
--- a/valid.c
+++ b/valid.c
@@ -2295,102 +2295,103 @@ int
 xmlAddIDSafe(xmlDocPtr doc, const xmlChar *value, xmlAttrPtr attr,
              int streaming, xmlIDPtr *id) {
     xmlIDPtr ret;
     xmlIDTablePtr table;
 
     if (id != NULL)
         *id = NULL;
 
     if (doc == NULL) {
 	return(-1);
     }
     if ((value == NULL) || (value[0] == 0)) {
 	return(0);
     }
     if (attr == NULL) {
 	return(-1);
     }
 
     /*
      * Create the ID table if needed.
      */
     table = (xmlIDTablePtr) doc->ids;
     if (table == NULL)  {
         doc->ids = table = xmlHashCreateDict(0, doc->dict);
         if (table == NULL)
             return(-1);
     } else {
         ret = xmlHashLookup(table, value);
         if (ret != NULL) {
             /*
-             * Update the attribute to make entities work.
+             * Update the attribute unless we are parsing in streaming
+             * mode. If the attribute is copied from an entity we want
+             * the ID reference the copy.
              */
-            if (!streaming) {
-                if (ret->attr != NULL) {
-                    ret->attr->id = NULL;
-                    ret->attr = attr;
-                }
+            if (ret->attr != NULL) {
+                ret->attr->id = NULL;
+                ret->attr = attr;
                 attr->id = ret;
             }
+            ret->lineno = xmlGetLineNo(attr->parent);
 	    attr->atype = XML_ATTRIBUTE_ID;
             return(0);
         }
     }
 
     ret = (xmlIDPtr) xmlMalloc(sizeof(xmlID));
     if (ret == NULL)
 	return(-1);
     memset(ret, 0, sizeof(*ret));
 
     /*
      * fill the structure.
      */
     ret->doc = doc;
     ret->value = xmlStrdup(value);
     if (ret->value == NULL) {
         xmlFreeID(ret);
         return(-1);
     }
     if (streaming) {
 	/*
 	 * Operating in streaming mode, attr is gonna disappear
 	 */
 	if (doc->dict != NULL)
 	    ret->name = xmlDictLookup(doc->dict, attr->name, -1);
 	else
 	    ret->name = xmlStrdup(attr->name);
         if (ret->name == NULL) {
             xmlFreeID(ret);
             return(-1);
         }
 	ret->attr = NULL;
     } else {
 	ret->attr = attr;
 	ret->name = NULL;
     }
     ret->lineno = xmlGetLineNo(attr->parent);
 
     if (xmlHashAddEntry(table, value, ret) < 0) {
 	xmlFreeID(ret);
 	return(-1);
     }
 
     attr->atype = XML_ATTRIBUTE_ID;
     if (!streaming)
         attr->id = ret;
 
     if (id != NULL)
         *id = ret;
     return(1);
 }
 
 /**
  * xmlAddID:
  * @ctxt:  the validation context
  * @doc:  pointer to the document
  * @value:  the value name
  * @attr:  the attribute holding the ID
  *
  * Register a new id declaration
  *
  * Returns NULL if not, otherwise the new xmlIDPtr
  */
