commit 1e4222efcf6d889adaab9d28f32623e5e1055042
Author: Veronika Hanulikova <vhanulik@redhat.com>
Date:   Thu Sep 1 17:15:11 2022 +0200

    Avoid double-free
    
    Thank OSS-Fuzz
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51185
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51837

diff --git a/src/libopensc/pkcs15.c b/src/libopensc/pkcs15.c
index dac6808a..4054f8e8 100644
--- a/src/libopensc/pkcs15.c
+++ b/src/libopensc/pkcs15.c
@@ -2001,69 +2001,70 @@ int
 sc_pkcs15_encode_df(struct sc_context *ctx, struct sc_pkcs15_card *p15card, struct sc_pkcs15_df *df,
 		unsigned char **buf_out, size_t *bufsize_out)
 {
 	unsigned char *buf = NULL, *tmp = NULL, *p;
 	size_t bufsize = 0, tmpsize;
 	const struct sc_pkcs15_object *obj;
 	int (* func)(struct sc_context *, const struct sc_pkcs15_object *nobj,
 		     unsigned char **nbuf, size_t *nbufsize) = NULL;
 	int r;
 
 	if (p15card == NULL || p15card->magic != SC_PKCS15_CARD_MAGIC) {
 		return SC_ERROR_INVALID_ARGUMENTS;
 	}
 	switch (df->type) {
 	case SC_PKCS15_PRKDF:
 		func = sc_pkcs15_encode_prkdf_entry;
 		break;
 	case SC_PKCS15_PUKDF:
 	case SC_PKCS15_PUKDF_TRUSTED:
 		func = sc_pkcs15_encode_pukdf_entry;
 		break;
 	case SC_PKCS15_SKDF:
 		func = sc_pkcs15_encode_skdf_entry;
 		break;
 	case SC_PKCS15_CDF:
 	case SC_PKCS15_CDF_TRUSTED:
 	case SC_PKCS15_CDF_USEFUL:
 		func = sc_pkcs15_encode_cdf_entry;
 		break;
 	case SC_PKCS15_DODF:
 		func = sc_pkcs15_encode_dodf_entry;
 		break;
 	case SC_PKCS15_AODF:
 		func = sc_pkcs15_encode_aodf_entry;
 		break;
 	}
 	if (func == NULL) {
 		sc_log(ctx, "unknown DF type: %d", df->type);
 		*buf_out = NULL;
 		*bufsize_out = 0;
 		return 0;
 	}
 	for (obj = p15card->obj_list; obj != NULL; obj = obj->next) {
 		if (obj->df != df)
 			continue;
 		r = func(ctx, obj, &tmp, &tmpsize);
 		if (r) {
 			free(tmp);
 			free(buf);
 			return r;
 		}
 		if (!tmpsize)
 			continue;
 		p = (u8 *) realloc(buf, bufsize + tmpsize);
 		if (!p) {
 			free(tmp);
 			free(buf);
 			return SC_ERROR_OUT_OF_MEMORY;
 		}
 		buf = p;
 		memcpy(buf + bufsize, tmp, tmpsize);
 		free(tmp);
+		tmp = NULL;
 		bufsize += tmpsize;
 	}
 	*buf_out = buf;
 	*bufsize_out = bufsize;
 
 	return 0;
 }
