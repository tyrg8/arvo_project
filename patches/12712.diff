commit f9659b3733b85ffb499692a6d2f18a6414782dc0
Author: Jonathan Hui <jonhui@nestlabs.com>
Date:   Mon Jan 28 08:38:42 2019 -0800

    [router-table] add arg bounds check to Release() (#3521)

diff --git a/include/openthread/thread_ftd.h b/include/openthread/thread_ftd.h
index 5ed1cde65..4dae3b1d2 100644
--- a/include/openthread/thread_ftd.h
+++ b/include/openthread/thread_ftd.h
@@ -312,28 +312,29 @@ OTAPI uint8_t OTCALL otThreadGetRouterUpgradeThreshold(otInstance *aInstance);
 /**
  * Set the ROUTER_UPGRADE_THRESHOLD parameter used in the Leader role.
  *
  * @note This API is reserved for testing and demo purposes only. Changing settings with
  * this API will render a production application non-compliant with the Thread Specification.
  *
  * @param[in]  aInstance   A pointer to an OpenThread instance.
  * @param[in]  aThreshold  The ROUTER_UPGRADE_THRESHOLD value.
  *
  * @sa otThreadGetRouterUpgradeThreshold
  *
  */
 OTAPI void OTCALL otThreadSetRouterUpgradeThreshold(otInstance *aInstance, uint8_t aThreshold);
 
 /**
  * Release a Router ID that has been allocated by the device in the Leader role.
  *
  * @note This API is reserved for testing and demo purposes only. Changing settings with
  * this API will render a production application non-compliant with the Thread Specification.
  *
  * @param[in]  aInstance  A pointer to an OpenThread instance.
  * @param[in]  aRouterId  The Router ID to release. Valid range is [0, 62].
  *
  * @retval OT_ERROR_NONE           Successfully released the router id.
+ * @retval OT_ERROR_INVALID_ARGS   @p aRouterId is not in the range [0, 62].
  * @retval OT_ERROR_INVALID_STATE  The device is not currently operating as a leader.
  * @retval OT_ERROR_NOT_FOUND      The router id is not currently allocated.
  *
  */
diff --git a/src/core/api/thread_ftd_api.cpp b/src/core/api/thread_ftd_api.cpp
index 71738fcd9..6c7963446 100644
--- a/src/core/api/thread_ftd_api.cpp
+++ b/src/core/api/thread_ftd_api.cpp
@@ -166,9 +166,15 @@ void otThreadSetRouterUpgradeThreshold(otInstance *aInstance, uint8_t aThreshold
 
 otError otThreadReleaseRouterId(otInstance *aInstance, uint8_t aRouterId)
 {
+    otError   error    = OT_ERROR_NONE;
     Instance &instance = *static_cast<Instance *>(aInstance);
 
-    return instance.GetThreadNetif().GetMle().GetRouterTable().Release(aRouterId);
+    VerifyOrExit(aRouterId <= Mle::kMaxRouterId, error = OT_ERROR_INVALID_ARGS);
+
+    error = instance.GetThreadNetif().GetMle().GetRouterTable().Release(aRouterId);
+
+exit:
+    return error;
 }
 
 otError otThreadBecomeRouter(otInstance *aInstance)
diff --git a/src/core/thread/router_table.cpp b/src/core/thread/router_table.cpp
index 4e3499d41..dbf7028dd 100644
--- a/src/core/thread/router_table.cpp
+++ b/src/core/thread/router_table.cpp
@@ -258,38 +258,40 @@ exit:
 otError RouterTable::Release(uint8_t aRouterId)
 {
     otError      error  = OT_ERROR_NONE;
     ThreadNetif &netif  = GetNetif();
     uint16_t     rloc16 = Mle::Mle::GetRloc16(aRouterId);
 
+    assert(aRouterId <= Mle::kMaxRouterId);
+
     VerifyOrExit(netif.GetMle().GetRole() == OT_DEVICE_ROLE_LEADER, error = OT_ERROR_INVALID_STATE);
     VerifyOrExit(IsAllocated(aRouterId), error = OT_ERROR_NOT_FOUND);
 
     mAllocatedRouterIds[aRouterId / 8] &= ~(1 << (aRouterId % 8));
     UpdateAllocation();
 
     mRouterIdReuseDelay[aRouterId] = Mle::kRouterIdReuseDelay;
 
     for (int i = 0; i < Mle::kMaxRouters; i++)
     {
         Router &router = mRouters[i];
 
         if (router.GetRloc16() == 0xffff)
         {
             break;
         }
 
         if (router.GetNextHop() == rloc16)
         {
             router.SetNextHop(Mle::kInvalidRouterId);
             router.SetCost(0);
         }
     }
 
     mRouterIdSequence++;
     mRouterIdSequenceLastUpdated = TimerMilli::GetNow();
 
     netif.GetAddressResolver().Remove(aRouterId);
     netif.GetNetworkDataLeader().RemoveBorderRouter(rloc16, NetworkData::Leader::kMatchModeRouterId);
     netif.GetMle().ResetAdvertiseInterval();
 
     otLogNoteMle("Release router id %d", aRouterId);
