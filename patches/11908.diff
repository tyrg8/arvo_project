commit 8d2d41025619e24160ed80edd1c413168a2dda36
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Mon Dec 17 20:23:26 2018 -0500

    Add hb_addressof() and use it to fix bug after hb_bytes_t merge
    
    We cannot take address hb_bytes_t direction.  We need to use the
    newly added hb_addressof(), ala std::addressof().

diff --git a/src/hb-dsalgs.hh b/src/hb-dsalgs.hh
index b56cd7462..6fef9240f 100644
--- a/src/hb-dsalgs.hh
+++ b/src/hb-dsalgs.hh
@@ -162,78 +162,87 @@ static inline HB_CONST_FUNC unsigned int
 hb_ctz (T v)
 {
   if (unlikely (!v)) return 0;
 
 #if defined(__GNUC__) && (__GNUC__ >= 4) && defined(__OPTIMIZE__)
   if (sizeof (T) <= sizeof (unsigned int))
     return __builtin_ctz (v);
 
   if (sizeof (T) <= sizeof (unsigned long))
     return __builtin_ctzl (v);
 
   if (sizeof (T) <= sizeof (unsigned long long))
     return __builtin_ctzll (v);
 #endif
 
 #if (defined(_MSC_VER) && _MSC_VER >= 1500) || defined(__MINGW32__)
   if (sizeof (T) <= sizeof (unsigned int))
   {
     unsigned long where;
     _BitScanForward (&where, v);
     return where;
   }
 # if _WIN64
   if (sizeof (T) <= 8)
   {
     unsigned long where;
     _BitScanForward64 (&where, v);
     return where;
   }
 # endif
 #endif
 
   if (sizeof (T) <= 4)
   {
     /* "bithacks" */
     unsigned int c = 32;
     v &= - (int32_t) v;
     if (v) c--;
     if (v & 0x0000FFFF) c -= 16;
     if (v & 0x00FF00FF) c -= 8;
     if (v & 0x0F0F0F0F) c -= 4;
     if (v & 0x33333333) c -= 2;
     if (v & 0x55555555) c -= 1;
     return c;
   }
   if (sizeof (T) <= 8)
   {
     /* "bithacks" */
     unsigned int c = 64;
     v &= - (int64_t) (v);
     if (v) c--;
     if (v & 0x00000000FFFFFFFFULL) c -= 32;
     if (v & 0x0000FFFF0000FFFFULL) c -= 16;
     if (v & 0x00FF00FF00FF00FFULL) c -= 8;
     if (v & 0x0F0F0F0F0F0F0F0FULL) c -= 4;
     if (v & 0x3333333333333333ULL) c -= 2;
     if (v & 0x5555555555555555ULL) c -= 1;
     return c;
   }
   if (sizeof (T) == 16)
   {
     unsigned int shift = 64;
     return (uint64_t) v ? hb_bit_storage<uint64_t> ((uint64_t) v) :
 			  hb_bit_storage<uint64_t> ((uint64_t) (v >> shift)) + shift;
   }
 
   assert (0);
   return 0; /* Shut up stupid compiler. */
 }
 
 
 /*
  * Tiny stuff.
  */
 
+template <typename T>
+T* hb_addressof (T& arg)
+{
+  /* https://en.cppreference.com/w/cpp/memory/addressof */
+  return reinterpret_cast<T*>(
+	   &const_cast<char&>(
+	      reinterpret_cast<const volatile char&>(arg)));
+}
+
 /* ASCII tag/character handling */
 static inline bool ISALPHA (unsigned char c)
 { return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'); }
diff --git a/src/hb-ot-post-table.hh b/src/hb-ot-post-table.hh
index 4adad6017..33b7070ee 100644
--- a/src/hb-ot-post-table.hh
+++ b/src/hb-ot-post-table.hh
@@ -72,220 +72,221 @@ struct postV2Tail
 struct post
 {
   enum { tableTag = HB_OT_TAG_post };
 
   bool subset (hb_subset_plan_t *plan) const
   {
     unsigned int post_prime_length;
     hb_blob_t *post_blob = hb_sanitize_context_t ().reference_table<post>(plan->source);
     hb_blob_t *post_prime_blob = hb_blob_create_sub_blob (post_blob, 0, post::min_size);
     post *post_prime = (post *) hb_blob_get_data_writable (post_prime_blob, &post_prime_length);
     hb_blob_destroy (post_blob);
 
     if (unlikely (!post_prime || post_prime_length != post::min_size))
     {
       hb_blob_destroy (post_prime_blob);
       DEBUG_MSG(SUBSET, nullptr, "Invalid source post table with length %d.", post_prime_length);
       return false;
     }
 
     post_prime->version.major.set (3); // Version 3 does not have any glyph names.
     bool result = plan->add_table (HB_OT_TAG_post, post_prime_blob);
     hb_blob_destroy (post_prime_blob);
 
     return result;
   }
 
   struct accelerator_t
   {
     void init (hb_face_t *face)
     {
       index_to_offset.init ();
 
       table = hb_sanitize_context_t ().reference_table<post> (face);
       unsigned int table_length = table.get_length ();
 
       version = table->version.to_int ();
       if (version != 0x00020000) return;
 
       const postV2Tail &v2 = table->v2X;
 
       glyphNameIndex = &v2.glyphNameIndex;
       pool = &StructAfter<uint8_t> (v2.glyphNameIndex);
 
       const uint8_t *end = (const uint8_t *) (const void *) table + table_length;
       for (const uint8_t *data = pool;
 	   index_to_offset.len < 65535 && data < end && data + *data < end;
 	   data += 1 + *data)
 	index_to_offset.push (data - pool);
     }
     void fini ()
     {
       index_to_offset.fini ();
       free (gids_sorted_by_name.get ());
       table.destroy ();
     }
 
     bool get_glyph_name (hb_codepoint_t glyph,
 			 char *buf, unsigned int buf_len) const
     {
       hb_bytes_t s = find_glyph_name (glyph);
       if (!s.len) return false;
       if (!buf_len) return true;
       unsigned int len = MIN (buf_len - 1, s.len);
       strncpy (buf, s.arrayZ, len);
       buf[len] = '\0';
       return true;
     }
 
     bool get_glyph_from_name (const char *name, int len,
 			      hb_codepoint_t *glyph) const
     {
       unsigned int count = get_glyph_count ();
       if (unlikely (!count)) return false;
 
       if (len < 0) len = strlen (name);
 
       if (unlikely (!len)) return false;
 
     retry:
       uint16_t *gids = gids_sorted_by_name.get ();
 
       if (unlikely (!gids))
       {
 	gids = (uint16_t *) malloc (count * sizeof (gids[0]));
 	if (unlikely (!gids))
 	  return false; /* Anything better?! */
 
 	for (unsigned int i = 0; i < count; i++)
 	  gids[i] = i;
 	hb_sort_r (gids, count, sizeof (gids[0]), cmp_gids, (void *) this);
 
 	if (unlikely (!gids_sorted_by_name.cmpexch (nullptr, gids)))
 	{
 	  free (gids);
 	  goto retry;
 	}
       }
 
       hb_bytes_t st (name, len);
-      const uint16_t *gid = (const uint16_t *) hb_bsearch_r (&st, gids, count, sizeof (gids[0]), cmp_key, (void *) this);
+      const uint16_t *gid = (const uint16_t *) hb_bsearch_r (hb_addressof (st), gids, count,
+							     sizeof (gids[0]), cmp_key, (void *) this);
       if (gid)
       {
 	*glyph = *gid;
 	return true;
       }
 
       return false;
     }
 
     protected:
 
     unsigned int get_glyph_count () const
     {
       if (version == 0x00010000)
 	return NUM_FORMAT1_NAMES;
 
       if (version == 0x00020000)
 	return glyphNameIndex->len;
 
       return 0;
     }
 
     static int cmp_gids (const void *pa, const void *pb, void *arg)
     {
       const accelerator_t *thiz = (const accelerator_t *) arg;
       uint16_t a = * (const uint16_t *) pa;
       uint16_t b = * (const uint16_t *) pb;
       return thiz->find_glyph_name (b).cmp (thiz->find_glyph_name (a));
     }
 
     static int cmp_key (const void *pk, const void *po, void *arg)
     {
       const accelerator_t *thiz = (const accelerator_t *) arg;
       const hb_bytes_t *key = (const hb_bytes_t *) pk;
       uint16_t o = * (const uint16_t *) po;
       return thiz->find_glyph_name (o).cmp (*key);
     }
 
     hb_bytes_t find_glyph_name (hb_codepoint_t glyph) const
     {
       if (version == 0x00010000)
       {
 	if (glyph >= NUM_FORMAT1_NAMES)
 	  return hb_bytes_t ();
 
 	return format1_names (glyph);
       }
 
       if (version != 0x00020000 || glyph >= glyphNameIndex->len)
 	return hb_bytes_t ();
 
       unsigned int index = glyphNameIndex->arrayZ[glyph];
       if (index < NUM_FORMAT1_NAMES)
 	return format1_names (index);
       index -= NUM_FORMAT1_NAMES;
 
       if (index >= index_to_offset.len)
 	return hb_bytes_t ();
       unsigned int offset = index_to_offset[index];
 
       const uint8_t *data = pool + offset;
       unsigned int name_length = *data;
       data++;
 
       return hb_bytes_t ((const char *) data, name_length);
     }
 
     private:
     hb_blob_ptr_t<post> table;
     uint32_t version;
     const ArrayOf<HBUINT16> *glyphNameIndex;
     hb_vector_t<uint32_t, 1> index_to_offset;
     const uint8_t *pool;
     hb_atomic_ptr_t<uint16_t *> gids_sorted_by_name;
   };
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (likely (c->check_struct (this) &&
 			  (version.to_int () == 0x00010000 ||
 			   (version.to_int () == 0x00020000 && v2X.sanitize (c)) ||
 			   version.to_int () == 0x00030000)));
   }
 
   public:
   FixedVersion<>version;		/* 0x00010000 for version 1.0
 					 * 0x00020000 for version 2.0
 					 * 0x00025000 for version 2.5 (deprecated)
 					 * 0x00030000 for version 3.0 */
   Fixed		italicAngle;		/* Italic angle in counter-clockwise degrees
 					 * from the vertical. Zero for upright text,
 					 * negative for text that leans to the right
 					 * (forward). */
   FWORD		underlinePosition;	/* This is the suggested distance of the top
 					 * of the underline from the baseline
 					 * (negative values indicate below baseline).
 					 * The PostScript definition of this FontInfo
 					 * dictionary key (the y coordinate of the
 					 * center of the stroke) is not used for
 					 * historical reasons. The value of the
 					 * PostScript key may be calculated by
 					 * subtracting half the underlineThickness
 					 * from the value of this field. */
   FWORD		underlineThickness;	/* Suggested values for the underline
 					   thickness. */
   HBUINT32	isFixedPitch;		/* Set to 0 if the font is proportionally
 					 * spaced, non-zero if the font is not
 					 * proportionally spaced (i.e. monospaced). */
   HBUINT32	minMemType42;		/* Minimum memory usage when an OpenType font
 					 * is downloaded. */
   HBUINT32	maxMemType42;		/* Maximum memory usage when an OpenType font
 					 * is downloaded. */
   HBUINT32	minMemType1;		/* Minimum memory usage when an OpenType font
 					 * is downloaded as a Type 1 font. */
   HBUINT32	maxMemType1;		/* Maximum memory usage when an OpenType font
 					 * is downloaded as a Type 1 font. */
   postV2Tail	v2X;
   DEFINE_SIZE_MIN (32);
 };
