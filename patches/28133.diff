commit 068615fe5e25ff763d84262c615ab4c1f178a708
Author: Andreas Kling <kling@serenityos.org>
Date:   Wed Dec 23 15:44:54 2020 +0100

    LibGfx: Reject PNG files with invalid filter/interlace methods
    
    Might as well reject these when parsing the IHDR chunk instead of
    continuing to load something invalid.

diff --git a/Libraries/LibGfx/PNGLoader.cpp b/Libraries/LibGfx/PNGLoader.cpp
index 02a3391ebe..a03fafb1d6 100644
--- a/Libraries/LibGfx/PNGLoader.cpp
+++ b/Libraries/LibGfx/PNGLoader.cpp
@@ -818,68 +818,88 @@ static RefPtr<Gfx::Bitmap> load_png_impl(const u8* data, size_t data_size)
     return context.bitmap;
 }
 
+static bool is_valid_compression_method(u8 compression_method)
+{
+    return compression_method == 0;
+}
+
+static bool is_valid_filter_method(u8 filter_method)
+{
+    return filter_method <= 4;
+}
+
 static bool process_IHDR(ReadonlyBytes data, PNGLoadingContext& context)
 {
     if (data.size() < (int)sizeof(PNG_IHDR))
         return false;
     auto& ihdr = *(const PNG_IHDR*)data.data();
 
     if (ihdr.width > NumericLimits<i32>::max() || ihdr.height > NumericLimits<i32>::max()) {
         dbgln("PNG has invalid geometry {}x{}", (u32)ihdr.width, (u32)ihdr.height);
         return false;
     }
 
+    if (!is_valid_compression_method(ihdr.compression_method)) {
+        dbgln("PNG has invalid compression method {}", ihdr.compression_method);
+        return false;
+    }
+
+    if (!is_valid_filter_method(ihdr.filter_method)) {
+        dbgln("PNG has invalid filter method {}", ihdr.filter_method);
+        return false;
+    }
+
     context.width = ihdr.width;
     context.height = ihdr.height;
     context.bit_depth = ihdr.bit_depth;
     context.color_type = ihdr.color_type;
     context.compression_method = ihdr.compression_method;
     context.filter_method = ihdr.filter_method;
     context.interlace_method = ihdr.interlace_method;
 
 #ifdef PNG_DEBUG
     printf("PNG: %dx%d (%d bpp)\n", context.width, context.height, context.bit_depth);
     printf("     Color type: %d\n", context.color_type);
     printf("Compress Method: %d\n", context.compression_method);
     printf("  Filter Method: %d\n", context.filter_method);
     printf(" Interlace type: %d\n", context.interlace_method);
 #endif
 
     if (context.interlace_method != PngInterlaceMethod::Null && context.interlace_method != PngInterlaceMethod::Adam7) {
 #ifdef PNG_DEBUG
         dbgprintf("PNGLoader::process_IHDR: unknown interlace method: %d\n", context.interlace_method);
 #endif
         return false;
     }
 
     switch (context.color_type) {
     case 0: // Each pixel is a grayscale sample.
         if (context.bit_depth != 1 && context.bit_depth != 2 && context.bit_depth != 4 && context.bit_depth != 8 && context.bit_depth != 16)
             return false;
         context.channels = 1;
         break;
     case 4: // Each pixel is a grayscale sample, followed by an alpha sample.
         if (context.bit_depth != 8 && context.bit_depth != 16)
             return false;
         context.channels = 2;
         break;
     case 2: // Each pixel is an RGB sample
         if (context.bit_depth != 8 && context.bit_depth != 16)
             return false;
         context.channels = 3;
         break;
     case 3: // Each pixel is a palette index; a PLTE chunk must appear.
         if (context.bit_depth != 1 && context.bit_depth != 2 && context.bit_depth != 4 && context.bit_depth != 8)
             return false;
         context.channels = 1;
         break;
     case 6: // Each pixel is an RGB sample, followed by an alpha sample.
         if (context.bit_depth != 8 && context.bit_depth != 16)
             return false;
         context.channels = 4;
         break;
     default:
         return false;
     }
     return true;
 }
