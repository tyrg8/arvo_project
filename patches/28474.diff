commit 1b551741b86b4482cf368444ce6c78063ab9d0f3
Author: cpq <valenok@gmail.com>
Date:   Fri Dec 11 09:35:50 2020 +0000

    Fix mg_url_decode fuzz

diff --git a/mongoose.c b/mongoose.c
index dd15b18e..79690134 100644
--- a/mongoose.c
+++ b/mongoose.c
@@ -433,22 +433,23 @@ int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
 int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                   int is_form_url_encoded) {
   size_t i, j;
-  for (i = j = 0; i < src_len && j < dst_len - 1; i++, j++) {
+  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
     if (src[i] == '%') {
-      if (i < src_len - 2 && isxdigit(*(const unsigned char *) (src + i + 1)) &&
+      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
+      if (i + 2 < src_len && isxdigit(*(const unsigned char *) (src + i + 1)) &&
           isxdigit(*(const unsigned char *) (src + i + 2))) {
         mg_unhex(src + i + 1, 2, (uint8_t *) &dst[j]);
         i += 2;
       } else {
         return -1;
       }
     } else if (is_form_url_encoded && src[i] == '+') {
       dst[j] = ' ';
     } else {
       dst[j] = src[i];
     }
   }
-  dst[j] = '\0';  // Null-terminate the destination
+  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
   return i >= src_len ? (int) j : -1;
 }
 
@@ -1723,55 +1724,55 @@ void mg_mqtt_sub(struct mg_connection *c, struct mg_str *topic) {
 static int parse(const uint8_t *in, size_t inlen, struct mqtt_message *m) {
   uint8_t lc = 0, *p, *end;
   uint32_t len = 0, len_len = 0;
 
   if (inlen < 2) return MQTT_INCOMPLETE;
   m->cmd = in[0] >> 4;
   m->qos = (in[0] >> 1) & 3;
 
   len = len_len = 0;
   p = (uint8_t *) in + 1;
   while ((size_t)(p - in) < inlen) {
     lc = *((uint8_t *) p++);
     len += (lc & 0x7f) << 7 * len_len;
     len_len++;
     if (!(lc & 0x80)) break;
-    if (len_len > 4) return MQTT_MALFORMED;
+    if (len_len >= 4) return MQTT_MALFORMED;
   }
 
   end = p + len;
   if (lc & 0x80 || end > in + inlen) return MQTT_INCOMPLETE;
   m->len = (int) (end - in);
 
   switch (m->cmd) {
     case MQTT_CMD_CONNACK:
       if (end - p < 2) return MQTT_MALFORMED;
       m->connack_ret_code = p[1];
       break;
     case MQTT_CMD_PUBACK:
     case MQTT_CMD_PUBREC:
     case MQTT_CMD_PUBREL:
     case MQTT_CMD_PUBCOMP:
     case MQTT_CMD_SUBACK:
       if (p + 2 > end) return MQTT_MALFORMED;
       m->id = (p[0] << 8) | p[1];
       break;
     case MQTT_CMD_PUBLISH: {
       if (p + 2 > end) return MQTT_MALFORMED;
       m->topic_len = (p[0] << 8) | p[1];
       m->topic_offset = p + 2 - in;
       p += 2 + m->topic_len;
       if (p > end) return MQTT_MALFORMED;
       if (m->qos > 0) {
         if (p + 2 > end) return MQTT_MALFORMED;
         m->id = (p[0] << 8) | p[1];
         p += 2;
       }
       if (p > end) return MQTT_MALFORMED;
       m->data_offset = p - in;
       m->data_len = end - p;
     }
     default:
       break;
   }
   return MQTT_OK;
 }
diff --git a/src/http.c b/src/http.c
index 95acaeb6..eb232e3e 100644
--- a/src/http.c
+++ b/src/http.c
@@ -73,22 +73,23 @@ int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
 int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                   int is_form_url_encoded) {
   size_t i, j;
-  for (i = j = 0; i < src_len && j < dst_len - 1; i++, j++) {
+  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
     if (src[i] == '%') {
-      if (i < src_len - 2 && isxdigit(*(const unsigned char *) (src + i + 1)) &&
+      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
+      if (i + 2 < src_len && isxdigit(*(const unsigned char *) (src + i + 1)) &&
           isxdigit(*(const unsigned char *) (src + i + 2))) {
         mg_unhex(src + i + 1, 2, (uint8_t *) &dst[j]);
         i += 2;
       } else {
         return -1;
       }
     } else if (is_form_url_encoded && src[i] == '+') {
       dst[j] = ' ';
     } else {
       dst[j] = src[i];
     }
   }
-  dst[j] = '\0';  // Null-terminate the destination
+  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
   return i >= src_len ? (int) j : -1;
 }
 
diff --git a/src/mqtt.c b/src/mqtt.c
index 4167a97c..93abc77c 100644
--- a/src/mqtt.c
+++ b/src/mqtt.c
@@ -138,55 +138,55 @@ void mg_mqtt_sub(struct mg_connection *c, struct mg_str *topic) {
 static int parse(const uint8_t *in, size_t inlen, struct mqtt_message *m) {
   uint8_t lc = 0, *p, *end;
   uint32_t len = 0, len_len = 0;
 
   if (inlen < 2) return MQTT_INCOMPLETE;
   m->cmd = in[0] >> 4;
   m->qos = (in[0] >> 1) & 3;
 
   len = len_len = 0;
   p = (uint8_t *) in + 1;
   while ((size_t)(p - in) < inlen) {
     lc = *((uint8_t *) p++);
     len += (lc & 0x7f) << 7 * len_len;
     len_len++;
     if (!(lc & 0x80)) break;
-    if (len_len > 4) return MQTT_MALFORMED;
+    if (len_len >= 4) return MQTT_MALFORMED;
   }
 
   end = p + len;
   if (lc & 0x80 || end > in + inlen) return MQTT_INCOMPLETE;
   m->len = (int) (end - in);
 
   switch (m->cmd) {
     case MQTT_CMD_CONNACK:
       if (end - p < 2) return MQTT_MALFORMED;
       m->connack_ret_code = p[1];
       break;
     case MQTT_CMD_PUBACK:
     case MQTT_CMD_PUBREC:
     case MQTT_CMD_PUBREL:
     case MQTT_CMD_PUBCOMP:
     case MQTT_CMD_SUBACK:
       if (p + 2 > end) return MQTT_MALFORMED;
       m->id = (p[0] << 8) | p[1];
       break;
     case MQTT_CMD_PUBLISH: {
       if (p + 2 > end) return MQTT_MALFORMED;
       m->topic_len = (p[0] << 8) | p[1];
       m->topic_offset = p + 2 - in;
       p += 2 + m->topic_len;
       if (p > end) return MQTT_MALFORMED;
       if (m->qos > 0) {
         if (p + 2 > end) return MQTT_MALFORMED;
         m->id = (p[0] << 8) | p[1];
         p += 2;
       }
       if (p > end) return MQTT_MALFORMED;
       m->data_offset = p - in;
       m->data_len = end - p;
     }
     default:
       break;
   }
   return MQTT_OK;
 }
diff --git a/test/fuzz.c b/test/fuzz.c
index bb6919e9..c8dd9316 100644
--- a/test/fuzz.c
+++ b/test/fuzz.c
@@ -4,23 +4,25 @@
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   struct mg_dns_message dm;
   mg_dns_parse(data, size, &dm);
 
   struct mg_http_message hm;
   mg_http_parse((const char *) data, size, &hm);
 
   struct mg_str body = mg_str_n((const char *) data, size);
   char tmp[256];
   mg_http_get_var(&body, "key", tmp, sizeof(tmp));
+  mg_url_decode((char *) data, size, tmp, sizeof(tmp), 1);
+  mg_url_decode((char *) data, size, tmp, 1, 1);
 
   struct mg_mqtt_message mm;
   mg_mqtt_parse(data, size, &mm);
 
   struct timeval tv;
   mg_sntp_parse(data, size, &tv);
 
   char buf[size * 4 / 3 + 5];  // At least 4 chars and nul termination
   mg_base64_decode((char *) data, size, buf);
   mg_base64_encode(data, size, buf);
 
   return 0;
 }
diff --git a/test/unit_test.c b/test/unit_test.c
index 1ba942d9..ad1a0b7f 100644
--- a/test/unit_test.c
+++ b/test/unit_test.c
@@ -68,30 +68,32 @@ static void test_commalist(void) {
 static void test_http_get_var(void) {
   char buf[256];
   struct mg_str body;
   body = mg_str("key1=value1&key2=value2&key3=value%203&key4=value+4");
   ASSERT(mg_http_get_var(&body, "key1", buf, sizeof(buf)) == 6);
   ASSERT(strcmp(buf, "value1") == 0);
   ASSERT(mg_http_get_var(&body, "KEY1", buf, sizeof(buf)) == 6);
   ASSERT(strcmp(buf, "value1") == 0);
   ASSERT(mg_http_get_var(&body, "key2", buf, sizeof(buf)) == 6);
   ASSERT(strcmp(buf, "value2") == 0);
   ASSERT(mg_http_get_var(&body, "key3", buf, sizeof(buf)) == 7);
   ASSERT(strcmp(buf, "value 3") == 0);
   ASSERT(mg_http_get_var(&body, "key4", buf, sizeof(buf)) == 7);
   ASSERT(strcmp(buf, "value 4") == 0);
 
   ASSERT(mg_http_get_var(&body, "key", buf, sizeof(buf)) == -4);
   ASSERT(mg_http_get_var(&body, "key1", NULL, sizeof(buf)) == -2);
   ASSERT(mg_http_get_var(&body, "key1", buf, 0) == -2);
   ASSERT(mg_http_get_var(&body, NULL, buf, sizeof(buf)) == -1);
   ASSERT(mg_http_get_var(&body, "key1", buf, 1) == -3);
 
   body = mg_str("key=broken%2");
   ASSERT(mg_http_get_var(&body, "key", buf, sizeof(buf)) == -3);
 
   body = mg_str("key=broken%2x");
   ASSERT(mg_http_get_var(&body, "key", buf, sizeof(buf)) == -3);
   ASSERT(mg_http_get_var(&body, "inexistent", buf, sizeof(buf)) == -4);
+  body = mg_str("key=%");
+  ASSERT(mg_http_get_var(&body, "key", buf, sizeof(buf)) == -3);
 }
 
 static int vcmp(struct mg_str s1, const char *s2) {
@@ -262,42 +264,48 @@ static void mqtt_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
 static void test_mqtt(void) {
   char buf[50] = {0};
   struct mg_mgr mgr;
   struct mg_str topic = mg_str("x/f12"), data = mg_str("hi");
   struct mg_connection *c;
   struct mg_mqtt_opts opts;
   // const char *url = "mqtt://mqtt.eclipse.org:1883";
   const char *url = "mqtt://broker.hivemq.com:1883";
   int i;
   mg_mgr_init(&mgr);
 
+  {
+    uint8_t bad[] = " \xff\xff\xff\xff ";
+    struct mg_mqtt_message mm;
+    mg_mqtt_parse(bad, sizeof(bad), &mm);
+  }
+
   // Connect with empty client ID
   c = mg_mqtt_connect(&mgr, url, NULL, mqtt_cb, buf);
   for (i = 0; i < 100 && buf[0] == 0; i++) mg_mgr_poll(&mgr, 10);
   ASSERT(buf[0] == 'X');
   mg_mqtt_sub(c, &topic);
   mg_mqtt_pub(c, &topic, &data);
   for (i = 0; i < 100 && buf[1] == 0; i++) mg_mgr_poll(&mgr, 10);
   // LOG(LL_INFO, ("[%s]", buf));
   ASSERT(strcmp(buf, "Xx/f12/hi") == 0);
 
   // Set params
   memset(buf, 0, sizeof(buf));
   memset(&opts, 0, sizeof(opts));
   opts.qos = 1;
   opts.clean = true;
   opts.will_retain = true;
   opts.keepalive = 20;
   opts.client_id = mg_str("mg_client");
   opts.will_topic = mg_str("mg_will_topic");
   opts.will_message = mg_str("mg_will_messsage");
   c = mg_mqtt_connect(&mgr, url, &opts, mqtt_cb, buf);
   for (i = 0; i < 100 && buf[0] == 0; i++) mg_mgr_poll(&mgr, 10);
   ASSERT(buf[0] == 'X');
   mg_mqtt_sub(c, &topic);
   mg_mqtt_pub(c, &topic, &data);
   for (i = 0; i < 100 && buf[1] == 0; i++) mg_mgr_poll(&mgr, 10);
   ASSERT(strcmp(buf, "Xx/f12/hi") == 0);
 
   mg_mgr_free(&mgr);
   ASSERT(mgr.conns == NULL);
 }
@@ -855,33 +863,37 @@ static void test_str(void) {
 static void test_util(void) {
   char buf[100], *s = mg_hexdump("abc", 3);
   ASSERT(s != NULL);
   free(s);
   ASSERT(mg_file_write("data.txt", "%s", "hi") == 2);
   ASSERT(strcmp(mg_ntoa(0x100007f, buf, sizeof(buf)), "127.0.0.1") == 0);
   ASSERT(strcmp(mg_hex("abc", 3, buf), "616263") == 0);
+  {
+    char bad[] = {'a', '=', '%'};
+    ASSERT(mg_url_decode(bad, sizeof(bad), buf, sizeof(buf), 0) < 0);
+  }
 }
 
 int main(void) {
   mg_log_set("3");
-  test_str();
   test_util();
+  test_mqtt();
+  test_str();
   test_timer();
   test_http_range();
   test_url();
   test_iobuf();
   test_commalist();
   test_base64();
   test_globmatch();
   test_http_get_var();
   test_tls();
   test_ws();
-  test_mqtt();
   test_http_parse();
   test_http_server();
   test_http_client();
   test_http_no_content_length();
   test_http_pipeline();
   test_sntp();
   printf("SUCCESS. Total tests: %d\n", s_num_tests);
   return EXIT_SUCCESS;
 }
