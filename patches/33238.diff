commit e90061779637e4fe46798f2318fe26746d8dac78
Author: Alex Rebert <alexandre.rebert@gmail.com>
Date:   Fri Oct 29 09:17:40 2021 -0400

    Fix out-of-bounds read in FileSystemFilter::Cleanup
    
    Fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=33238

diff --git a/code/Common/FileSystemFilter.h b/code/Common/FileSystemFilter.h
index 6782dd9e5..81576aa6c 100644
--- a/code/Common/FileSystemFilter.h
+++ b/code/Common/FileSystemFilter.h
@@ -220,116 +220,117 @@ public:
 private:
     // -------------------------------------------------------------------
     /** Build a valid path from a given relative or absolute path.
      */
     void BuildPath (std::string& in) const {
         ai_assert( nullptr != mWrapped );
         // if we can already access the file, great.
         if (in.length() < 3 || mWrapped->Exists(in)) {
             return;
         }
 
         // Determine whether this is a relative path (Windows-specific - most assets are packaged on Windows).
         if (in[1] != ':') {
 
             // append base path and try
             const std::string tmp = mBase + in;
             if (mWrapped->Exists(tmp)) {
                 in = tmp;
                 return;
             }
         }
 
         // Chop of the file name and look in the model directory, if
         // this fails try all sub paths of the given path, i.e.
         // if the given path is foo/bar/something.lwo, try
         // <base>/something.lwo
         // <base>/bar/something.lwo
         // <base>/foo/bar/something.lwo
         std::string::size_type pos = in.rfind('/');
         if (std::string::npos == pos) {
             pos = in.rfind('\\');
         }
 
         if (std::string::npos != pos)   {
             std::string tmp;
             std::string::size_type last_dirsep = std::string::npos;
 
             while(true) {
                 tmp = mBase;
                 tmp += mSep;
 
                 std::string::size_type dirsep = in.rfind('/', last_dirsep);
                 if (std::string::npos == dirsep) {
                     dirsep = in.rfind('\\', last_dirsep);
                 }
 
                 if (std::string::npos == dirsep || dirsep == 0) {
                     // we did try this already.
                     break;
                 }
 
                 last_dirsep = dirsep-1;
 
                 tmp += in.substr(dirsep+1, in.length()-pos);
                 if (mWrapped->Exists(tmp)) {
                     in = tmp;
                     return;
                 }
             }
         }
 
         // hopefully the underlying file system has another few tricks to access this file ...
     }
 
     // -------------------------------------------------------------------
     /** Cleanup the given path
      */
     void Cleanup (std::string& in) const {
         if(in.empty()) {
             return;
         }
 
         // Remove a very common issue when we're parsing file names: spaces at the
         // beginning of the path.
         char last = 0;
         std::string::iterator it = in.begin();
         while (IsSpaceOrNewLine( *it ))++it;
         if (it != in.begin()) {
             in.erase(in.begin(),it+1);
         }
 
         const char separator = getOsSeparator();
         for (it = in.begin(); it != in.end(); ++it) {
+            int remaining = std::distance(in.end(), it);
             // Exclude :// and \\, which remain untouched.
             // https://sourceforge.net/tracker/?func=detail&aid=3031725&group_id=226462&atid=1067632
-            if ( !strncmp(&*it, "://", 3 )) {
+            if (remaining >= 3 && !strncmp(&*it, "://", 3 )) {
                 it += 3;
                 continue;
             }
-            if (it == in.begin() && !strncmp(&*it, "\\\\", 2)) {
+            if (it == in.begin() && remaining >= 2 && !strncmp(&*it, "\\\\", 2)) {
                 it += 2;
                 continue;
             }
 
             // Cleanup path delimiters
             if (*it == '/' || (*it) == '\\') {
                 *it = separator;
 
                 // And we're removing double delimiters, frequent issue with
                 // incorrectly composited paths ...
                 if (last == *it) {
                     it = in.erase(it);
                     --it;
                 }
             } else if (*it == '%' && in.end() - it > 2) {
                 // Hex sequence in URIs
                 if( IsHex((&*it)[0]) && IsHex((&*it)[1]) ) {
                     *it = HexOctetToDecimal(&*it);
                     it = in.erase(it+1,it+2);
                     --it;
                 }
             }
 
             last = *it;
         }
     }
