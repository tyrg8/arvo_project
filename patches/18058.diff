commit a368569d61258d7b1709bd2b4cd223d5eeebfc18
Merge: cb3be61 a9fc115
Author: Harish Mahendrakar <harish.mahendrakar@ittiam.com>
Date:   Fri Sep 27 14:30:46 2019 -0700

    Check change in CTB size when decoding multiple SPS with same id am: 70940fbabd
    am: a9fc115a23
    
    Change-Id: I962ca2ef87273ec6082d10abb1ee32b16a0c8118

diff --git a/decoder/ihevcd_parse_headers.c b/decoder/ihevcd_parse_headers.c
index 2d1f567..e16a9e6 100644
--- a/decoder/ihevcd_parse_headers.c
+++ b/decoder/ihevcd_parse_headers.c
@@ -1415,545 +1415,558 @@ IHEVCD_ERROR_T ihevcd_parse_vps(codec_t *ps_codec)
 /**
 *******************************************************************************
 *
 * @brief
 *  Parses SPS (Sequence Parameter Set)
 * sequence_parameter_set_rbsp()
 *
 * @par Description:
 *  Parse Sequence Parameter Set as per section  Section: 7.3.2.2
 * The sps is written to a temporary buffer and copied later to the
 * appropriate location
 *
 * @param[in] ps_codec
 *  Pointer to codec context
 *
 * @returns Error code from IHEVCD_ERROR_T
 *
 * @remarks
 *
 *
 *******************************************************************************
 */
 IHEVCD_ERROR_T ihevcd_parse_sps(codec_t *ps_codec)
 {
     IHEVCD_ERROR_T ret = (IHEVCD_ERROR_T)IHEVCD_SUCCESS;
     UWORD32 value;
 
     WORD32 i;
     WORD32 vps_id;
     WORD32 sps_max_sub_layers;
     WORD32 sps_id;
     WORD32 sps_temporal_id_nesting_flag;
     sps_t *ps_sps;
     profile_tier_lvl_info_t s_ptl;
     bitstrm_t *ps_bitstrm = &ps_codec->s_parse.s_bitstrm;
     WORD32 ctb_log2_size_y = 0;
 
 
     BITS_PARSE("video_parameter_set_id", value, ps_bitstrm, 4);
     if(value > MAX_VPS_CNT - 1)
     {
         return IHEVCD_INVALID_PARAMETER;
     }
     vps_id = value;
 
     BITS_PARSE("sps_max_sub_layers_minus1", value, ps_bitstrm, 3);
     if(value > SPS_MAX_SUB_LAYERS - 1)
     {
         return IHEVCD_INVALID_PARAMETER;
     }
     sps_max_sub_layers = value + 1;
 
     BITS_PARSE("sps_temporal_id_nesting_flag", value, ps_bitstrm, 1);
     sps_temporal_id_nesting_flag = value;
 
     //profile_and_level( 1, sps_max_sub_layers_minus1 )
     ret = ihevcd_profile_tier_level(ps_bitstrm, &(s_ptl), 1,
                                     (sps_max_sub_layers - 1));
 
     UEV_PARSE("seq_parameter_set_id", value, ps_bitstrm);
     sps_id = value;
     if((sps_id >= MAX_SPS_CNT) || (sps_id < 0))
     {
         if(ps_codec->i4_sps_done)
             return IHEVCD_UNSUPPORTED_SPS_ID;
         else
             sps_id = 0;
     }
 
 
     ps_sps = (ps_codec->s_parse.ps_sps_base + MAX_SPS_CNT - 1);
     /* Reset SPS to zero */
     {
         WORD16 *pi2_scaling_mat = ps_sps->pi2_scaling_mat;
         memset(ps_sps, 0, sizeof(sps_t));
         ps_sps->pi2_scaling_mat = pi2_scaling_mat;
     }
     ps_sps->i1_sps_id = sps_id;
     ps_sps->i1_vps_id = vps_id;
     ps_sps->i1_sps_max_sub_layers = sps_max_sub_layers;
     ps_sps->i1_sps_temporal_id_nesting_flag = sps_temporal_id_nesting_flag;
 
     memcpy(&ps_sps->s_ptl, &s_ptl, sizeof(profile_tier_lvl_info_t));
 
     UEV_PARSE("chroma_format_idc", value, ps_bitstrm);
     if(value > 3)
     {
         return IHEVCD_INVALID_PARAMETER;
     }
     ps_sps->i1_chroma_format_idc = value;
 
     if(ps_sps->i1_chroma_format_idc != CHROMA_FMT_IDC_YUV420)
     {
         ps_codec->s_parse.i4_error_code = IHEVCD_UNSUPPORTED_CHROMA_FMT_IDC;
         return (IHEVCD_ERROR_T)IHEVCD_UNSUPPORTED_CHROMA_FMT_IDC;
     }
 
     if(CHROMA_FMT_IDC_YUV444_PLANES == ps_sps->i1_chroma_format_idc)
     {
         BITS_PARSE("separate_colour_plane_flag", value, ps_bitstrm, 1);
         ps_sps->i1_separate_colour_plane_flag = value;
     }
     else
     {
         ps_sps->i1_separate_colour_plane_flag = 0;
     }
 
     UEV_PARSE("pic_width_in_luma_samples", value, ps_bitstrm);
     if(value > INT16_MAX)
     {
         return (IHEVCD_ERROR_T)IVD_STREAM_WIDTH_HEIGHT_NOT_SUPPORTED;
     }
     ps_sps->i2_pic_width_in_luma_samples = value;
 
     UEV_PARSE("pic_height_in_luma_samples", value, ps_bitstrm);
     if(value > INT16_MAX)
     {
         return (IHEVCD_ERROR_T)IVD_STREAM_WIDTH_HEIGHT_NOT_SUPPORTED;
     }
     ps_sps->i2_pic_height_in_luma_samples = value;
 
     if((0 >= ps_sps->i2_pic_width_in_luma_samples) || (0 >= ps_sps->i2_pic_height_in_luma_samples))
         return IHEVCD_INVALID_PARAMETER;
 
     BITS_PARSE("pic_cropping_flag", value, ps_bitstrm, 1);
     ps_sps->i1_pic_cropping_flag = value;
 
     if(ps_sps->i1_pic_cropping_flag)
     {
 
         UEV_PARSE("pic_crop_left_offset", value, ps_bitstrm);
         if (value >= ps_sps->i2_pic_width_in_luma_samples)
         {
             return IHEVCD_INVALID_PARAMETER;
         }
         ps_sps->i2_pic_crop_left_offset = value;
 
         UEV_PARSE("pic_crop_right_offset", value, ps_bitstrm);
         if (value >= ps_sps->i2_pic_width_in_luma_samples)
         {
             return IHEVCD_INVALID_PARAMETER;
         }
         ps_sps->i2_pic_crop_right_offset = value;
 
         UEV_PARSE("pic_crop_top_offset", value, ps_bitstrm);
         if (value >= ps_sps->i2_pic_height_in_luma_samples)
         {
             return IHEVCD_INVALID_PARAMETER;
         }
         ps_sps->i2_pic_crop_top_offset = value;
 
         UEV_PARSE("pic_crop_bottom_offset", value, ps_bitstrm);
         if (value >= ps_sps->i2_pic_height_in_luma_samples)
         {
             return IHEVCD_INVALID_PARAMETER;
         }
         ps_sps->i2_pic_crop_bottom_offset = value;
     }
     else
     {
         ps_sps->i2_pic_crop_left_offset = 0;
         ps_sps->i2_pic_crop_right_offset = 0;
         ps_sps->i2_pic_crop_top_offset = 0;
         ps_sps->i2_pic_crop_bottom_offset = 0;
     }
 
 
     UEV_PARSE("bit_depth_luma_minus8", value, ps_bitstrm);
     if(0 != value)
         return IHEVCD_UNSUPPORTED_BIT_DEPTH;
 
     UEV_PARSE("bit_depth_chroma_minus8", value, ps_bitstrm);
     if(0 != value)
         return IHEVCD_UNSUPPORTED_BIT_DEPTH;
 
     UEV_PARSE("log2_max_pic_order_cnt_lsb_minus4", value, ps_bitstrm);
     if(value > 12)
         return IHEVCD_INVALID_PARAMETER;
     ps_sps->i1_log2_max_pic_order_cnt_lsb = value + 4;
 
     BITS_PARSE("sps_sub_layer_ordering_info_present_flag", value, ps_bitstrm, 1);
 
     ps_sps->i1_sps_sub_layer_ordering_info_present_flag = value;
 
 
     i = (ps_sps->i1_sps_sub_layer_ordering_info_present_flag ? 0 : (ps_sps->i1_sps_max_sub_layers - 1));
     for(; i < ps_sps->i1_sps_max_sub_layers; i++)
     {
         UEV_PARSE("max_dec_pic_buffering", value, ps_bitstrm);
         if(value > (MAX_DPB_SIZE - 1))
         {
             return IHEVCD_INVALID_PARAMETER;
         }
         ps_sps->ai1_sps_max_dec_pic_buffering[i] = value + 1;
 
         UEV_PARSE("num_reorder_pics", value, ps_bitstrm);
         if(value >= ps_sps->ai1_sps_max_dec_pic_buffering[i])
         {
             return IHEVCD_INVALID_PARAMETER;
         }
         ps_sps->ai1_sps_max_num_reorder_pics[i] = value;
 
         UEV_PARSE("max_latency_increase", value, ps_bitstrm);
         if(value > UINT_MAX - 2)
         {
             return IHEVCD_INVALID_PARAMETER;
         }
         ps_sps->ai1_sps_max_latency_increase[i] = value;
     }
 
     /* Check if sps_max_dec_pic_buffering or sps_max_num_reorder_pics
        has changed */
     if(0 != ps_codec->u4_allocate_dynamic_done)
     {
         sps_t *ps_sps_old = ps_codec->s_parse.ps_sps;
         if(ps_sps_old->ai1_sps_max_dec_pic_buffering[ps_sps_old->i1_sps_max_sub_layers - 1] !=
                     ps_sps->ai1_sps_max_dec_pic_buffering[ps_sps->i1_sps_max_sub_layers - 1])
         {
             if(0 == ps_codec->i4_first_pic_done)
             {
                 return IHEVCD_INVALID_PARAMETER;
             }
             ps_codec->i4_reset_flag = 1;
             return (IHEVCD_ERROR_T)IVD_RES_CHANGED;
         }
 
         if(ps_sps_old->ai1_sps_max_num_reorder_pics[ps_sps_old->i1_sps_max_sub_layers - 1] !=
                     ps_sps->ai1_sps_max_num_reorder_pics[ps_sps->i1_sps_max_sub_layers - 1])
         {
             if(0 == ps_codec->i4_first_pic_done)
             {
                 return IHEVCD_INVALID_PARAMETER;
             }
             ps_codec->i4_reset_flag = 1;
             return (IHEVCD_ERROR_T)IVD_RES_CHANGED;
         }
     }
 
     UEV_PARSE("log2_min_coding_block_size_minus3", value, ps_bitstrm);
     if(value > (LOG2_MAX_CU_SIZE - 3))
     {
         return IHEVCD_INVALID_PARAMETER;
     }
     ps_sps->i1_log2_min_coding_block_size = value + 3;
     if((ps_sps->i2_pic_width_in_luma_samples % (1 << ps_sps->i1_log2_min_coding_block_size) != 0) ||
                     (ps_sps->i2_pic_height_in_luma_samples % (1 << ps_sps->i1_log2_min_coding_block_size) != 0))
     {
         return IHEVCD_INVALID_PARAMETER;
     }
 
     UEV_PARSE("log2_diff_max_min_coding_block_size", value, ps_bitstrm);
     if(value > (LOG2_MAX_CU_SIZE - ps_sps->i1_log2_min_coding_block_size))
     {
         return IHEVCD_INVALID_PARAMETER;
     }
     ps_sps->i1_log2_diff_max_min_coding_block_size = value;
 
     ctb_log2_size_y = ps_sps->i1_log2_min_coding_block_size + ps_sps->i1_log2_diff_max_min_coding_block_size;
 
     if((ctb_log2_size_y < LOG2_MIN_CTB_SIZE) || (ctb_log2_size_y > LOG2_MAX_CTB_SIZE))
     {
         return IHEVCD_INVALID_PARAMETER;
     }
+    /* Check if CTB size is different in case of multiple SPS with same ID */
+    {
+        sps_t *ps_sps_old = (ps_codec->s_parse.ps_sps_base + sps_id);
+        if(ps_sps_old->i1_sps_valid && ps_sps_old->i1_log2_ctb_size != ctb_log2_size_y)
+        {
+            if(0 == ps_codec->i4_first_pic_done)
+            {
+                return IHEVCD_INVALID_PARAMETER;
+            }
+            ps_codec->i4_reset_flag = 1;
+            return (IHEVCD_ERROR_T)IVD_RES_CHANGED;
+        }
+    }
     ps_sps->i1_log2_ctb_size = ctb_log2_size_y;
 
     UEV_PARSE("log2_min_transform_block_size_minus2", value, ps_bitstrm);
     if(value > (LOG2_MAX_TU_SIZE - 2))
     {
         return IHEVCD_INVALID_PARAMETER;
     }
     ps_sps->i1_log2_min_transform_block_size = value + 2;
     if(ps_sps->i1_log2_min_transform_block_size >= ps_sps->i1_log2_min_coding_block_size)
     {
         return IHEVCD_INVALID_PARAMETER;
     }
 
     UEV_PARSE("log2_diff_max_min_transform_block_size", value, ps_bitstrm);
     if(value > (LOG2_MAX_TU_SIZE - ps_sps->i1_log2_min_transform_block_size))
     {
         return IHEVCD_INVALID_PARAMETER;
     }
     ps_sps->i1_log2_diff_max_min_transform_block_size = value;
 
     ps_sps->i1_log2_max_transform_block_size = ps_sps->i1_log2_min_transform_block_size +
                     ps_sps->i1_log2_diff_max_min_transform_block_size;
 
     if(ps_sps->i1_log2_max_transform_block_size > ps_sps->i1_log2_ctb_size)
     {
         return IHEVCD_INVALID_PARAMETER;
     }
 
     ps_sps->i1_log2_min_pcm_coding_block_size = 0;
     ps_sps->i1_log2_diff_max_min_pcm_coding_block_size = 0;
 
     UEV_PARSE("max_transform_hierarchy_depth_inter", value, ps_bitstrm);
     if(value > (ps_sps->i1_log2_ctb_size - ps_sps->i1_log2_min_transform_block_size))
     {
         return IHEVCD_INVALID_PARAMETER;
     }
     ps_sps->i1_max_transform_hierarchy_depth_inter = value;
 
     UEV_PARSE("max_transform_hierarchy_depth_intra", value, ps_bitstrm);
     if(value > (ps_sps->i1_log2_ctb_size - ps_sps->i1_log2_min_transform_block_size))
     {
         return IHEVCD_INVALID_PARAMETER;
     }
     ps_sps->i1_max_transform_hierarchy_depth_intra = value;
 
     /* String has a d (enabled) in order to match with HM */
     BITS_PARSE("scaling_list_enabled_flag", value, ps_bitstrm, 1);
     ps_sps->i1_scaling_list_enable_flag = value;
 
     if(ps_sps->i1_scaling_list_enable_flag)
     {
         COPY_DEFAULT_SCALING_LIST(ps_sps->pi2_scaling_mat);
         BITS_PARSE("sps_scaling_list_data_present_flag", value, ps_bitstrm, 1);
         ps_sps->i1_sps_scaling_list_data_present_flag = value;
 
         if(ps_sps->i1_sps_scaling_list_data_present_flag)
             ihevcd_scaling_list_data(ps_codec, ps_sps->pi2_scaling_mat);
     }
     else
     {
         COPY_FLAT_SCALING_LIST(ps_sps->pi2_scaling_mat);
     }
     /* String is asymmetric_motion_partitions_enabled_flag instead of amp_enabled_flag in order to match with HM */
     BITS_PARSE("asymmetric_motion_partitions_enabled_flag", value, ps_bitstrm, 1);
     ps_sps->i1_amp_enabled_flag = value;
 
     BITS_PARSE("sample_adaptive_offset_enabled_flag", value, ps_bitstrm, 1);
     ps_sps->i1_sample_adaptive_offset_enabled_flag = value;
 
     BITS_PARSE("pcm_enabled_flag", value, ps_bitstrm, 1);
     ps_sps->i1_pcm_enabled_flag = value;
 
     if(ps_sps->i1_pcm_enabled_flag)
     {
         BITS_PARSE("pcm_sample_bit_depth_luma", value, ps_bitstrm, 4);
         ps_sps->i1_pcm_sample_bit_depth_luma = value + 1;
 
         BITS_PARSE("pcm_sample_bit_depth_chroma", value, ps_bitstrm, 4);
         ps_sps->i1_pcm_sample_bit_depth_chroma = value + 1;
 
         UEV_PARSE("log2_min_pcm_coding_block_size_minus3", value, ps_bitstrm);
         if(value < (ps_sps->i1_log2_min_coding_block_size - 3) || value > (MIN(ctb_log2_size_y, 5) - 3))
         {
             return IHEVCD_INVALID_PARAMETER;
         }
         ps_sps->i1_log2_min_pcm_coding_block_size = value + 3;
 
         UEV_PARSE("log2_diff_max_min_pcm_coding_block_size", value, ps_bitstrm);
         if(value > MIN(ctb_log2_size_y, 5) - ps_sps->i1_log2_min_pcm_coding_block_size)
         {
             return IHEVCD_INVALID_PARAMETER;
         }
         ps_sps->i1_log2_diff_max_min_pcm_coding_block_size = value;
         BITS_PARSE("pcm_loop_filter_disable_flag", value, ps_bitstrm, 1);
         ps_sps->i1_pcm_loop_filter_disable_flag = value;
 
     }
     UEV_PARSE("num_short_term_ref_pic_sets", value, ps_bitstrm);
     if(value > MAX_STREF_PICS_SPS)
     {
         return IHEVCD_INVALID_PARAMETER;
     }
     ps_sps->i1_num_short_term_ref_pic_sets = value;
 
     for(i = 0; i < ps_sps->i1_num_short_term_ref_pic_sets; i++)
     {
         ret = ihevcd_short_term_ref_pic_set(ps_bitstrm, &ps_sps->as_stref_picset[0], ps_sps->i1_num_short_term_ref_pic_sets, i, &ps_sps->as_stref_picset[i]);
         if (ret != IHEVCD_SUCCESS)
         {
             return ret;
         }
     }
 
     BITS_PARSE("long_term_ref_pics_present_flag", value, ps_bitstrm, 1);
     ps_sps->i1_long_term_ref_pics_present_flag = value;
 
     if(ps_sps->i1_long_term_ref_pics_present_flag)
     {
         UEV_PARSE("num_long_term_ref_pics_sps", value, ps_bitstrm);
         if(value > MAX_LTREF_PICS_SPS)
         {
             return IHEVCD_INVALID_PARAMETER;
         }
         ps_sps->i1_num_long_term_ref_pics_sps = value;
 
         for(i = 0; i < ps_sps->i1_num_long_term_ref_pics_sps; i++)
         {
             BITS_PARSE("lt_ref_pic_poc_lsb_sps[ i ]", value, ps_bitstrm, ps_sps->i1_log2_max_pic_order_cnt_lsb);
             ps_sps->au2_lt_ref_pic_poc_lsb_sps[i] = value;
 
             BITS_PARSE("used_by_curr_pic_lt_sps_flag[ i ]", value, ps_bitstrm, 1);
             ps_sps->ai1_used_by_curr_pic_lt_sps_flag[i] = value;
         }
     }
 
     BITS_PARSE("sps_temporal_mvp_enable_flag", value, ps_bitstrm, 1);
     ps_sps->i1_sps_temporal_mvp_enable_flag = value;
 
     /* Print matches HM 8-2 */
     BITS_PARSE("sps_strong_intra_smoothing_enable_flag", value, ps_bitstrm, 1);
     ps_sps->i1_strong_intra_smoothing_enable_flag = value;
 
     BITS_PARSE("vui_parameters_present_flag", value, ps_bitstrm, 1);
     ps_sps->i1_vui_parameters_present_flag = value;
 
     if(ps_sps->i1_vui_parameters_present_flag)
     {
         ret = ihevcd_parse_vui_parameters(ps_bitstrm,
                                           &ps_sps->s_vui_parameters,
                                           ps_sps->i1_sps_max_sub_layers - 1);
         RETURN_IF((ret != (IHEVCD_ERROR_T)IHEVCD_SUCCESS), ret);
     }
 
     BITS_PARSE("sps_extension_flag", value, ps_bitstrm, 1);
 
     if((UWORD8 *)ps_bitstrm->pu4_buf > ps_bitstrm->pu1_buf_max)
     {
         return IHEVCD_INVALID_PARAMETER;
     }
 
     {
         WORD32 numerator;
         WORD32 ceil_offset;
 
         ceil_offset = (1 << ps_sps->i1_log2_ctb_size) - 1;
         numerator = ps_sps->i2_pic_width_in_luma_samples;
 
         ps_sps->i2_pic_wd_in_ctb = ((numerator + ceil_offset) /
                         (1 << ps_sps->i1_log2_ctb_size));
 
         numerator = ps_sps->i2_pic_height_in_luma_samples;
         ps_sps->i2_pic_ht_in_ctb = ((numerator + ceil_offset) /
                         (1 << ps_sps->i1_log2_ctb_size));
 
         ps_sps->i4_pic_size_in_ctb = ps_sps->i2_pic_ht_in_ctb *
                         ps_sps->i2_pic_wd_in_ctb;
 
         if(0 == ps_codec->i4_sps_done)
             ps_codec->s_parse.i4_next_ctb_indx = ps_sps->i4_pic_size_in_ctb;
 
         numerator = ps_sps->i2_pic_width_in_luma_samples;
         ps_sps->i2_pic_wd_in_min_cb = numerator  /
                         (1 << ps_sps->i1_log2_min_coding_block_size);
 
         numerator = ps_sps->i2_pic_height_in_luma_samples;
         ps_sps->i2_pic_ht_in_min_cb = numerator  /
                         (1 << ps_sps->i1_log2_min_coding_block_size);
     }
     if((0 != ps_codec->u4_allocate_dynamic_done) &&
                     ((ps_codec->i4_wd != ps_sps->i2_pic_width_in_luma_samples) ||
                     (ps_codec->i4_ht != ps_sps->i2_pic_height_in_luma_samples)))
     {
         if(0 == ps_codec->i4_first_pic_done)
         {
             return IHEVCD_INVALID_PARAMETER;
         }
         ps_codec->i4_reset_flag = 1;
         return (IHEVCD_ERROR_T)IVD_RES_CHANGED;
     }
 
     if((ps_sps->i2_pic_width_in_luma_samples > MAX_WD) ||
                     ((ps_sps->i2_pic_width_in_luma_samples * ps_sps->i2_pic_height_in_luma_samples) >
                     (MAX_WD * MAX_HT)))
     {
         return (IHEVCD_ERROR_T)IVD_STREAM_WIDTH_HEIGHT_NOT_SUPPORTED;
     }
 
     /* Update display width and display height */
     {
         WORD32 disp_wd, disp_ht;
         WORD32 crop_unit_x, crop_unit_y;
         crop_unit_x = 1;
         crop_unit_y = 1;
 
         if(CHROMA_FMT_IDC_YUV420 == ps_sps->i1_chroma_format_idc)
         {
             crop_unit_x = 2;
             crop_unit_y = 2;
         }
 
         disp_wd = ps_sps->i2_pic_width_in_luma_samples;
         disp_wd -= ps_sps->i2_pic_crop_left_offset * crop_unit_x;
         disp_wd -= ps_sps->i2_pic_crop_right_offset * crop_unit_x;
 
 
         disp_ht = ps_sps->i2_pic_height_in_luma_samples;
         disp_ht -= ps_sps->i2_pic_crop_top_offset * crop_unit_y;
         disp_ht -= ps_sps->i2_pic_crop_bottom_offset * crop_unit_y;
 
         if((0 >= disp_wd) || (0 >= disp_ht))
             return IHEVCD_INVALID_PARAMETER;
 
         if((0 != ps_codec->u4_allocate_dynamic_done) &&
                             ((ps_codec->i4_disp_wd != disp_wd) ||
                             (ps_codec->i4_disp_ht != disp_ht)))
         {
             if(0 == ps_codec->i4_first_pic_done)
             {
                 return IHEVCD_INVALID_PARAMETER;
             }
             ps_codec->i4_reset_flag = 1;
             return (IHEVCD_ERROR_T)IVD_RES_CHANGED;
         }
 
         ps_codec->i4_disp_wd = disp_wd;
         ps_codec->i4_disp_ht = disp_ht;
 
 
         ps_codec->i4_wd = ps_sps->i2_pic_width_in_luma_samples;
         ps_codec->i4_ht = ps_sps->i2_pic_height_in_luma_samples;
 
         {
             WORD32 ref_strd;
             ref_strd = ALIGN32(ps_sps->i2_pic_width_in_luma_samples + PAD_WD);
             if(ps_codec->i4_strd < ref_strd)
             {
                 ps_codec->i4_strd = ref_strd;
             }
         }
 
         if(0 == ps_codec->i4_share_disp_buf)
         {
             if(ps_codec->i4_disp_strd < ps_codec->i4_disp_wd)
             {
                 ps_codec->i4_disp_strd = ps_codec->i4_disp_wd;
             }
         }
         else
         {
             if(ps_codec->i4_disp_strd < ps_codec->i4_strd)
             {
                 ps_codec->i4_disp_strd = ps_codec->i4_strd;
             }
         }
     }
 
     /* This is used only during initialization to get reorder count etc */
     ps_codec->i4_sps_id = sps_id;
 
     ps_codec->i4_sps_done = 1;
     return ret;
 }
