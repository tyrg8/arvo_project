commit f6cc2a9055809f9cdda2eec6ab306b8156bbf8d5
Author: John Cupitt <jcupitt@gmail.com>
Date:   Mon Aug 26 11:35:26 2019 +0100

    revise gifload delays array handling
    
    so pages and delay_length can't get out of sync, even with corrupt GIFs

diff --git a/libvips/foreign/gifload.c b/libvips/foreign/gifload.c
index e36876f40..d87c4392b 100644
--- a/libvips/foreign/gifload.c
+++ b/libvips/foreign/gifload.c
@@ -1,121 +1,120 @@
 /* load a GIF with giflib
  *
  * 10/2/16
  * 	- from svgload.c
  * 25/4/16
  * 	- add giflib5 support
  * 26/7/16
  * 	- transparency was wrong if there was no EXTENSION_RECORD
  * 	- write 1, 2, 3, or 4 bands depending on file contents
  * 17/8/16
  * 	- support unicode on win
  * 19/8/16
  * 	- better transparency detection, thanks diegocsandrim
  * 25/11/16
  * 	- support @n, page-height
  * 5/10/17
  * 	- colormap can be missing thanks Kleis
  * 21/11/17
  * 	- add "gif-delay", "gif-loop", "gif-comment" metadata
  * 	- add dispose handling
  * 13/8/18
  * 	- init pages to 0 before load
  * 14/2/19
  * 	- rework as a sequential loader ... simpler, much lower mem use
-<<<<<<< HEAD
  * 6/7/19 [deftomat]
  * 	- support array of delays 
  * 24/7/19
  * 	- close early on minimise 
  * 	- close early on error
  * 23/8/18
  * 	- allow GIF read errors during header scan
  * 	- better feof() handling
  */
 
 /*
 
     This file is part of VIPS.
 
     VIPS is free software; you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
 
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
 
     You should have received a copy of the GNU Lesser General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
     02110-1301  USA
 
  */
 
 /*
 
     These files are distributed with VIPS - http://www.vips.ecs.soton.ac.uk
 
  */
 
 /*
 #define DEBUG_VERBOSE
 #define VIPS_DEBUG
  */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif /*HAVE_CONFIG_H*/
 #include <vips/intl.h>
 
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <errno.h>
 #include <ctype.h>
 
 #include <vips/vips.h>
 #include <vips/buf.h>
 #include <vips/internal.h>
 #include <vips/debug.h>
 
 #ifdef HAVE_GIFLIB
 
 #include <gif_lib.h>
 
 /* giflib 5 is rather different :-( functions have error returns and there's
  * no LastError().
  *
  * GIFLIB_MAJOR was introduced in 4.1.6. Use it to test for giflib 5.x.
  */
 #ifdef GIFLIB_MAJOR
 #  if GIFLIB_MAJOR > 4
 #    define HAVE_GIFLIB_5
 #  endif
 #endif
 
 /* Added in giflib5.
  */
 #ifndef HAVE_GIFLIB_5
 #define DISPOSAL_UNSPECIFIED      0
 #define DISPOSE_DO_NOT            1
 #define DISPOSE_BACKGROUND        2
 #define DISPOSE_PREVIOUS          3
 #endif
 
 #define VIPS_TYPE_FOREIGN_LOAD_GIF (vips_foreign_load_gif_get_type())
 #define VIPS_FOREIGN_LOAD_GIF( obj ) \
 	(G_TYPE_CHECK_INSTANCE_CAST( (obj), \
 	VIPS_TYPE_FOREIGN_LOAD_GIF, VipsForeignLoadGif ))
 #define VIPS_FOREIGN_LOAD_GIF_CLASS( klass ) \
 	(G_TYPE_CHECK_CLASS_CAST( (klass), \
 	VIPS_TYPE_FOREIGN_LOAD_GIF, VipsForeignLoadGifClass))
 #define VIPS_IS_FOREIGN_LOAD_GIF( obj ) \
 	(G_TYPE_CHECK_INSTANCE_TYPE( (obj), VIPS_TYPE_FOREIGN_LOAD_GIF ))
 #define VIPS_IS_FOREIGN_LOAD_GIF_CLASS( klass ) \
 	(G_TYPE_CHECK_CLASS_TYPE( (klass), VIPS_TYPE_FOREIGN_LOAD_GIF ))
 #define VIPS_FOREIGN_LOAD_GIF_GET_CLASS( obj ) \
 	(G_TYPE_INSTANCE_GET_CLASS( (obj), \
 	VIPS_TYPE_FOREIGN_LOAD_GIF, VipsForeignLoadGifClass ))
@@ -376,6 +375,23 @@ vips_foreign_load_gif_is_a( const char *filename )
 	return( 0 );
 }
 
+/* Make sure delays is allocated and large enough.
+ */
+static void
+vips_foreign_load_gif_allocate_delays( VipsForeignLoadGif *gif )
+{
+	if( gif->n_pages >= gif->delays_length ) {
+		int old = gif->delays_length;
+		int i;
+
+		gif->delays_length = gif->delays_length + gif->n_pages + 64;
+		gif->delays = (int *) g_realloc( gif->delays, 
+			gif->delays_length * sizeof( int ) );
+		for( i = old; i < gif->delays_length; i++ )
+			gif->delays[i] = 40;
+	}
+}
+
 static int
 vips_foreign_load_gif_ext_next( VipsForeignLoadGif *gif,
 	GifByteType **extension )
@@ -516,68 +532,56 @@ static int
 vips_foreign_load_gif_scan_extension( VipsForeignLoadGif *gif )
 {
 	GifByteType *extension;
 	int ext_code;
 
 	if( DGifGetExtension( gif->file, &ext_code, &extension ) ==
 		GIF_ERROR ) {
 		vips_foreign_load_gif_error( gif );
 		return( -1 );
 	}
 
 	if( extension )
 		switch( ext_code ) {
 		case GRAPHICS_EXT_FUNC_CODE:
 			if( extension[0] == 4 &&
 				extension[1] & 0x1 ) {
 				VIPS_DEBUG_MSG( "gifload: has transp.\n" );
 				gif->has_transparency = TRUE;
 			}
 
-			if( gif->n_pages >= gif->delays_length ) {
-				int old = gif->delays_length;
-				int i;
-
-				gif->delays_length = 
-					gif->delays_length + gif->n_pages + 64;
-				gif->delays = (int *) g_realloc( gif->delays, 
-					gif->delays_length * sizeof( int ) );
-				for( i = old; i < gif->delays_length; i++ )
-					gif->delays[i] = 40;
-			}
-
 			/* giflib uses centiseconds, we use ms.
 			 */
 			gif->delays[gif->n_pages] = 
 				(extension[2] | (extension[3] << 8)) * 10;
 
 			while( extension != NULL )
 				if( vips_foreign_load_gif_ext_next( gif,
 					&extension ) )
 					return( -1 );
 
 			break;
 
 		case APPLICATION_EXT_FUNC_CODE:
 			if( vips_foreign_load_gif_scan_application_ext( gif,
 				extension ) )
 				return( -1 );
 			break;
 
 		case COMMENT_EXT_FUNC_CODE:
 			if( vips_foreign_load_gif_scan_comment_ext( gif,
 				extension ) )
 				return( -1 );
 			break;
 
 		default:
 			/* Step over any NEXT blocks for unknown extensions.
 			 */
 			while( extension != NULL )
 				if( vips_foreign_load_gif_ext_next( gif,
 					&extension ) )
 					return( -1 );
 			break;
 		}
 
 	return( 0 );
 }
@@ -626,63 +630,62 @@ static int
 vips_foreign_load_gif_header( VipsForeignLoad *load )
 {
 	VipsObjectClass *class = VIPS_OBJECT_GET_CLASS( load );
 	VipsForeignLoadGifClass *gif_class =
 		(VipsForeignLoadGifClass *) VIPS_OBJECT_GET_CLASS( load );
 	VipsForeignLoadGif *gif = (VipsForeignLoadGif *) load;
 
 	GifRecordType record;
 
 	if( gif_class->open( gif ) )
 		return( -1 );
 
 	gif->n_pages = 0;
 
 	do {
 		if( DGifGetRecordType( gif->file, &record ) == GIF_ERROR ) 
 			continue;
 
 		switch( record ) {
 		case IMAGE_DESC_RECORD_TYPE:
 			(void) vips_foreign_load_gif_scan_image( gif );
-
 			gif->n_pages += 1;
-
+			vips_foreign_load_gif_allocate_delays( gif );
 			break;
 
 		case EXTENSION_RECORD_TYPE:
 			/* We need to fetch the extensions to check for
 			 * cmaps and transparency.
 			 */
 			(void) vips_foreign_load_gif_scan_extension( gif );
 			break;
 
 		case TERMINATE_RECORD_TYPE:
 			gif->eof = TRUE;
 			break;
 
 		case SCREEN_DESC_RECORD_TYPE:
 		case UNDEFINED_RECORD_TYPE:
 			break;
 
 		default:
 			break;
 		}
 	} while( !gif->eof );
 
 	if( gif->n == -1 )
 		gif->n = gif->n_pages - gif->page;
 
 	if( gif->page < 0 ||
 		gif->n <= 0 ||
 		gif->page + gif->n > gif->n_pages ) {
 		vips_error( class->nickname, "%s", _( "bad page number" ) );
 		return( -1 );
 	}
 
 	/* And set the output vips header from what we've learned.
 	 */
 	if( vips_foreign_load_gif_set_header( gif, load->out ) )
 		return( -1 );
 
 	return( 0 );
 }
@@ -1152,12 +1155,14 @@ static void
 vips_foreign_load_gif_init( VipsForeignLoadGif *gif )
 {
 	gif->n = 1;
 	gif->transparency = -1;
 	gif->delays = NULL;
 	gif->delays_length = 0;
 	gif->loop = 0;
 	gif->comment = NULL;
 	gif->dispose = 0;
+
+	vips_foreign_load_gif_allocate_delays( gif );
 }
 
 typedef struct _VipsForeignLoadGifFile {
