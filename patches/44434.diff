commit e000a85b5569c82e2c273b8f60cbebb7d9a1ab76
Author: andreasebner <andreas.ebner@iosb.fraunhofer.de>
Date:   Wed Sep 8 10:04:06 2021 +0200

    feat(server) added event filter examples, introduce initial event filter where and select clause evaluation (#4608)
    
    (cherry picked from commit ebb6f35659786e17a29b4bf62112748daed6cac1)

diff --git a/examples/events/client_eventfilter.c b/examples/events/client_eventfilter.c
index 44663eb1e..a7d36a76b 100644
--- a/examples/events/client_eventfilter.c
+++ b/examples/events/client_eventfilter.c
@@ -138,40 +138,40 @@ static UA_StatusCode
 setupWhereClauses(UA_ContentFilter *contentFilter, UA_UInt16 whereClauseSize, UA_UInt16 filterSelection){
     UA_ContentFilter_init(contentFilter);
     contentFilter->elementsSize = whereClauseSize;
     contentFilter->elements  = (UA_ContentFilterElement *)
         UA_Array_new(contentFilter->elementsSize, &UA_TYPES[UA_TYPES_CONTENTFILTERELEMENT]);
     if(!contentFilter->elements)
         return UA_STATUSCODE_BADOUTOFMEMORY;
     for(size_t i =0; i < contentFilter->elementsSize; ++i) {
         UA_ContentFilterElement_init(&contentFilter->elements[i]);
     }
     UA_StatusCode result = UA_STATUSCODE_GOOD;
     switch(filterSelection) {
         case 0:
             contentFilter->elements[0].filterOperator = UA_FILTEROPERATOR_OR;
             contentFilter->elements[1].filterOperator = UA_FILTEROPERATOR_OFTYPE;
             contentFilter->elements[2].filterOperator = UA_FILTEROPERATOR_OFTYPE;
             contentFilter->elements[0].filterOperandsSize = 2;
             contentFilter->elements[1].filterOperandsSize = 1;
             contentFilter->elements[2].filterOperandsSize = 1;
             /* Setup Operand Arrays */
             result = setupOperandArrays(contentFilter);
             if(result != UA_STATUSCODE_GOOD){
                 UA_ContentFilter_clear(contentFilter);
                 return UA_STATUSCODE_BADCONFIGURATIONERROR;
             }
             /* first Element (OR) */
             setupOrFilter(&contentFilter->elements[0]);
             /* second Element (OfType) */
-            setupOfTypeFilter(&contentFilter->elements[1], 60443);
+            setupOfTypeFilter(&contentFilter->elements[1], UA_NS0ID_AUDITEVENTTYPE);
             /* third Element (OfType) */
             setupOfTypeFilter(&contentFilter->elements[2], UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE);
             break;
         default:
             UA_ContentFilter_clear(contentFilter);
             return UA_STATUSCODE_BADCONFIGURATIONERROR;
     }
-    return UA_STATUSCODE_GOOD;
+    return result;
 }
 
 static void
@@ -210,82 +210,82 @@ static void stopHandler(int sig) {
 int main(int argc, char *argv[]) {
     signal(SIGINT, stopHandler);
     signal(SIGTERM, stopHandler);
 
     if(argc < 2) {
         printf("Usage: tutorial_client_events <opc.tcp://server-url>\n");
         return EXIT_FAILURE;
     }
 
     UA_Client *client = UA_Client_new();
     UA_ClientConfig_setDefault(UA_Client_getConfig(client));
 
     UA_StatusCode retval = UA_Client_connect(client, argv[1]);
     if(retval != UA_STATUSCODE_GOOD) {
         UA_Client_delete(client);
         return EXIT_FAILURE;
     }
 
     /* Create a subscription */
     UA_CreateSubscriptionRequest request = UA_CreateSubscriptionRequest_default();
     UA_CreateSubscriptionResponse response = UA_Client_Subscriptions_create(client, request,
                                                                             NULL, NULL, NULL);
     if(response.responseHeader.serviceResult != UA_STATUSCODE_GOOD) {
         UA_Client_disconnect(client);
         UA_Client_delete(client);
         return EXIT_FAILURE;
     }
     UA_UInt32 subId = response.subscriptionId;
     UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND, "Create subscription succeeded, id %u", subId);
 
     /* Add a MonitoredItem */
     UA_MonitoredItemCreateRequest item;
     UA_MonitoredItemCreateRequest_init(&item);
-    item.itemToMonitor.nodeId = UA_NODEID_NUMERIC(0, UA_NS0ID_SERVER); // Root->Objects->Server
+    item.itemToMonitor.nodeId = UA_NODEID_NUMERIC(0, 2253); // Root->Objects->Server
     item.itemToMonitor.attributeId = UA_ATTRIBUTEID_EVENTNOTIFIER;
     item.monitoringMode = UA_MONITORINGMODE_REPORTING;
 
     UA_EventFilter filter;
     UA_EventFilter_init(&filter);
     filter.selectClauses = setupSelectClauses();
     filter.selectClausesSize = nSelectClauses;
     retval = setupWhereClauses(&filter.whereClause, 3, 0);
     if(retval != UA_STATUSCODE_GOOD) {
         UA_Client_delete(client);
         return EXIT_FAILURE;
     }
 
     item.requestedParameters.filter.encoding = UA_EXTENSIONOBJECT_DECODED;
     item.requestedParameters.filter.content.decoded.data = &filter;
     item.requestedParameters.filter.content.decoded.type = &UA_TYPES[UA_TYPES_EVENTFILTER];
 
     UA_UInt32 monId = 0;
     UA_MonitoredItemCreateResult result =
         UA_Client_MonitoredItems_createEvent(client, subId,
                                              UA_TIMESTAMPSTORETURN_BOTH, item,
                                              &monId, handler_events, NULL);
 
     if(result.statusCode != UA_STATUSCODE_GOOD) {
         UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND,
                     "Could not add the MonitoredItem with %s", UA_StatusCode_name(retval));
         goto cleanup;
     } else {
         UA_LOG_INFO(UA_Log_Stdout, UA_LOGCATEGORY_USERLAND,
                     "Monitoring 'Root->Objects->Server', id %u", response.subscriptionId);
     }
 
     monId = result.monitoredItemId;
 
     while(running)
         retval = UA_Client_run_iterate(client, 100);
 
     /* Delete the subscription */
     cleanup:
     UA_MonitoredItemCreateResult_clear(&result);
     UA_Client_Subscriptions_deleteSingle(client, response.subscriptionId);
     UA_Array_delete(filter.selectClauses, nSelectClauses, &UA_TYPES[UA_TYPES_SIMPLEATTRIBUTEOPERAND]);
     UA_Array_delete(filter.whereClause.elements, filter.whereClause.elementsSize, &UA_TYPES[UA_TYPES_CONTENTFILTERELEMENT]);
 
     UA_Client_disconnect(client);
     UA_Client_delete(client);
     return retval == UA_STATUSCODE_GOOD ? EXIT_SUCCESS : EXIT_FAILURE;
 }
diff --git a/examples/events/server_random_events.c b/examples/events/server_random_events.c
index 889a67770..ed15e8ef5 100644
--- a/examples/events/server_random_events.c
+++ b/examples/events/server_random_events.c
@@ -26,18 +26,18 @@ static volatile UA_Boolean running = true;
 static UA_NodeId* eventTypes;
 
 static UA_StatusCode
-addEventType(UA_Server *server, char* name, UA_NodeId parentNodeId, UA_NodeId requestedId, UA_NodeId* eventType) {
+addEventType(UA_Server *server, char* name, UA_NodeId parentNodeId, UA_NodeId* eventType) {
     UA_ObjectTypeAttributes attr = UA_ObjectTypeAttributes_default;
     attr.displayName = UA_LOCALIZEDTEXT("en-US", name);
     attr.description = UA_LOCALIZEDTEXT("en-US", "Sample event type");
-    UA_StatusCode retval = UA_Server_addObjectTypeNode(server, requestedId,
+    UA_StatusCode retval = UA_Server_addObjectTypeNode(server, UA_NODEID_NULL,
                                                        parentNodeId,
                                                        UA_NODEID_NUMERIC(0, UA_NS0ID_HASSUBTYPE),
                                                        UA_QUALIFIEDNAME(0, name),
                                                        attr, NULL, eventType);
     if (retval != UA_STATUSCODE_GOOD) {
         UA_LOG_WARNING(UA_Log_Stdout, UA_LOGCATEGORY_SERVER,
                        "Add EventType failed. StatusCode %s", UA_StatusCode_name(retval));
     }
     return retval;
 }
@@ -46,30 +46,25 @@ static UA_StatusCode
 addSampleEventTypes(UA_Server *server) {
     eventTypes = (UA_NodeId *)
         UA_Array_new(SAMPLE_EVENT_TYPES_COUNT, &UA_TYPES[UA_TYPES_NODEID]);
     UA_StatusCode retval = addEventType(server, "SampleBaseEventType",
                                         UA_NODEID_NUMERIC(0, UA_NS0ID_BASEEVENTTYPE),
-                                        UA_NODEID_NULL,
                                         &eventTypes[0]);
     if (retval != UA_STATUSCODE_GOOD) return retval;
     retval = addEventType(server, "SampleDeviceFailureEventType",
                           UA_NODEID_NUMERIC(0, UA_NS0ID_BASEEVENTTYPE),
-                          UA_NODEID_NULL,
                           &eventTypes[1]);
     if (retval != UA_STATUSCODE_GOOD) return retval;
     retval = addEventType(server, "SampleEventQueueOverflowEventType",
                           UA_NODEID_NUMERIC(0, UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE),
-                          UA_NODEID_NULL,
                           &eventTypes[2]);
     if (retval != UA_STATUSCODE_GOOD) return retval;
     retval = addEventType(server, "SampleProgressEventType",
                           UA_NODEID_NUMERIC(0, UA_NS0ID_BASEEVENTTYPE),
-                          UA_NODEID_NULL,
                           &eventTypes[3]);
     if (retval != UA_STATUSCODE_GOOD) return retval;
     retval = addEventType(server, "SampleAuditSecurityEventType",
                           UA_NODEID_NUMERIC(0, UA_NS0ID_BASEEVENTTYPE),
-                          UA_NODEID_NUMERIC(0,60443),
                           &eventTypes[4]);
     if (retval != UA_STATUSCODE_GOOD) return retval;
     return UA_STATUSCODE_GOOD;
 }
diff --git a/src/server/ua_services_monitoreditem.c b/src/server/ua_services_monitoreditem.c
index 924b024b5..e72be95e1 100644
--- a/src/server/ua_services_monitoreditem.c
+++ b/src/server/ua_services_monitoreditem.c
@@ -33,47 +33,48 @@ static UA_StatusCode
 setAbsoluteFromPercentageDeadband(UA_Server *server, UA_Session *session,
                                   const UA_MonitoredItem *mon, UA_DataChangeFilter *filter) {
     /* A valid deadband? */
     if(filter->deadbandValue < 0.0 || filter->deadbandValue > 100.0)
         return UA_STATUSCODE_BADDEADBANDFILTERINVALID;
 
     /* Browse for the percent range */
     UA_QualifiedName qn = UA_QUALIFIEDNAME(0, "EURange");
     UA_BrowsePathResult bpr =
         browseSimplifiedBrowsePath(server, mon->itemToMonitor.nodeId, 1, &qn);
     if(bpr.statusCode != UA_STATUSCODE_GOOD || bpr.targetsSize < 1) {
         UA_BrowsePathResult_clear(&bpr);
-        return UA_STATUSCODE_BADMONITOREDITEMFILTERUNSUPPORTED;
+        return UA_STATUSCODE_BADFILTERNOTALLOWED;
     }
 
     /* Read the range */
     UA_ReadValueId rvi;
     UA_ReadValueId_init(&rvi);
     rvi.nodeId = bpr.targets->targetId.nodeId;
     rvi.attributeId = UA_ATTRIBUTEID_VALUE;
     UA_DataValue rangeVal = UA_Server_readWithSession(server, session, &rvi,
                                                       UA_TIMESTAMPSTORETURN_NEITHER);
     UA_BrowsePathResult_clear(&bpr);
     if(!UA_Variant_isScalar(&rangeVal.value) ||
        rangeVal.value.type != &UA_TYPES[UA_TYPES_RANGE]) {
         UA_DataValue_clear(&rangeVal);
-        return UA_STATUSCODE_BADMONITOREDITEMFILTERUNSUPPORTED;
+        return UA_STATUSCODE_BADFILTERNOTALLOWED;
     }
 
     /* Compute the abs deadband */
     UA_Range *euRange = (UA_Range*)rangeVal.value.data;
     UA_Double absDeadband = (filter->deadbandValue/100.0) * (euRange->high - euRange->low);
 
     UA_DataValue_clear(&rangeVal);
 
     /* EURange invalid or NaN? */
     if(absDeadband < 0.0 || absDeadband != absDeadband) {
-        return UA_STATUSCODE_BADMONITOREDITEMFILTERUNSUPPORTED;
+        UA_DataValue_clear(&rangeVal);
+        return UA_STATUSCODE_BADFILTERNOTALLOWED;
     }
 
     /* Adjust the original filter */
     filter->deadbandType = UA_DEADBANDTYPE_ABSOLUTE;
     filter->deadbandValue = absDeadband;
     return UA_STATUSCODE_GOOD;
 }
 
 #endif /* UA_ENABLE_DA */
@@ -321,167 +322,167 @@ static void
 Operation_CreateMonitoredItem(UA_Server *server, UA_Session *session,
                               struct createMonContext *cmc,
                               const UA_MonitoredItemCreateRequest *request,
                               UA_MonitoredItemCreateResult *result) {
     UA_LOCK_ASSERT(&server->serviceMutex, 1);
 
     /* Check available capacity */
     if(cmc->sub &&
        (((server->config.maxMonitoredItems != 0) &&
          (server->monitoredItemsSize >= server->config.maxMonitoredItems)) ||
         ((server->config.maxMonitoredItemsPerSubscription != 0) &&
          (cmc->sub->monitoredItemsSize >= server->config.maxMonitoredItemsPerSubscription)))) {
         result->statusCode = UA_STATUSCODE_BADTOOMANYMONITOREDITEMS;
         return;
     }
 
     /* Check if the encoding is supported */
     if(request->itemToMonitor.dataEncoding.name.length > 0 &&
        (!UA_String_equal(&binaryEncoding, &request->itemToMonitor.dataEncoding.name) ||
         request->itemToMonitor.dataEncoding.namespaceIndex != 0)) {
         result->statusCode = UA_STATUSCODE_BADDATAENCODINGUNSUPPORTED;
         return;
     }
 
     /* Check if the encoding is set for a value */
     if(request->itemToMonitor.attributeId != UA_ATTRIBUTEID_VALUE &&
        request->itemToMonitor.dataEncoding.name.length > 0) {
         result->statusCode = UA_STATUSCODE_BADDATAENCODINGINVALID;
         return;
     }
 
     /* Make an example read to check the itemToMonitor. The DataSource itself
      * could return a (temporary) error. This should still result in a valid
      * MonitoredItem. Only a few StatusCodes are considered unrecoverable and
      * lead to an abort:
      * - The Node does not exist
      * - The AttributeId does not match the NodeClass
      * - The Session does not have sufficient access rights
      * - The indicated encoding is not supported or not valid */
     UA_DataValue v = UA_Server_readWithSession(server, session, &request->itemToMonitor,
                                                cmc->timestampsToReturn);
     if(v.hasStatus &&
        (v.status == UA_STATUSCODE_BADNODEIDUNKNOWN ||
         v.status == UA_STATUSCODE_BADATTRIBUTEIDINVALID ||
         v.status == UA_STATUSCODE_BADDATAENCODINGUNSUPPORTED ||
         v.status == UA_STATUSCODE_BADDATAENCODINGINVALID ||
         v.status == UA_STATUSCODE_BADINDEXRANGEINVALID
         /* Part 4, 5.12.2 CreateMonitoredItems: When a user adds a monitored
          * item that the user is denied read access to, the add operation for
          * the item shall succeed and the bad status Bad_NotReadable or
          * Bad_UserAccessDenied shall be returned in the Publish response.
          * v.status == UA_STATUSCODE_BADNOTREADABLE
          * v.status == UA_STATUSCODE_BADUSERACCESSDENIED
          *
          * The IndexRange error can change depending on the value.
          * v.status == UA_STATUSCODE_BADINDEXRANGENODATA */
         )) {
         result->statusCode = v.status;
         UA_DataValue_clear(&v);
         return;
     }
 
     /* Adding an Event MonitoredItem */
 #ifdef UA_ENABLE_SUBSCRIPTIONS_EVENTS
     if(request->itemToMonitor.attributeId == UA_ATTRIBUTEID_EVENTNOTIFIER) {
         /* TODO: Only remote clients can add Event-MonitoredItems at the moment */
         if(!cmc->sub) {
             UA_LOG_WARNING(&server->config.logger, UA_LOGCATEGORY_SERVER,
                            "Only remote clients can add Event-MonitoredItems");
             result->statusCode = UA_STATUSCODE_BADNOTSUPPORTED;
             UA_DataValue_clear(&v);
             return;
         }
 
         /* If the 'SubscribeToEvents' bit of EventNotifier attribute is
          * zero, then the object cannot be subscribed to monitor events */
         if(!v.hasValue || !v.value.data) {
             result->statusCode = UA_STATUSCODE_BADINTERNALERROR;
             UA_DataValue_clear(&v);
             return;
         }
         UA_Byte eventNotifierValue = *((UA_Byte *)v.value.data);
         if((eventNotifierValue & 0x01) != 1) {
             result->statusCode = UA_STATUSCODE_BADNOTSUPPORTED;
             UA_LOG_INFO_SUBSCRIPTION(&server->config.logger, cmc->sub,
                                      "Could not create a MonitoredItem as the "
                                      "'SubscribeToEvents' bit of the EventNotifier "
                                      "attribute is not set");
             UA_DataValue_clear(&v);
             return;
         }
     }
 #endif
 
     const UA_DataType *valueType = v.value.type;
     UA_DataValue_clear(&v);
 
     /* Allocate the MonitoredItem */
     UA_MonitoredItem *newMon = NULL;
     if(cmc->sub) {
         newMon = (UA_MonitoredItem*)UA_malloc(sizeof(UA_MonitoredItem));
     } else {
         UA_LocalMonitoredItem *localMon = (UA_LocalMonitoredItem*)
             UA_malloc(sizeof(UA_LocalMonitoredItem));
         if(localMon) {
             /* Set special values only for the LocalMonitoredItem */
             localMon->context = cmc->context;
             localMon->callback.dataChangeCallback = cmc->dataChangeCallback;
         }
         newMon = &localMon->monitoredItem;
     }
     if(!newMon) {
         result->statusCode = UA_STATUSCODE_BADOUTOFMEMORY;
         return;
     }
 
     /* Initialize the MonitoredItem */
     UA_MonitoredItem_init(newMon);
     newMon->subscription = cmc->sub; /* Can be NULL for local MonitoredItems */
     newMon->timestampsToReturn = cmc->timestampsToReturn;
     result->statusCode |= UA_ReadValueId_copy(&request->itemToMonitor,
                                               &newMon->itemToMonitor);
     result->statusCode |= UA_MonitoringParameters_copy(&request->requestedParameters,
                                                        &newMon->parameters);
     result->statusCode |= checkAdjustMonitoredItemParams(server, session, newMon,
                                                          valueType, &newMon->parameters);
 #ifdef UA_ENABLE_SUBSCRIPTIONS_EVENTS
     result->statusCode |= checkEventFilterParam(server, session, newMon,
-                                                &newMon->parameters);
+                                                         &newMon->parameters);
 #endif
     if(result->statusCode != UA_STATUSCODE_GOOD) {
         UA_LOG_INFO_SUBSCRIPTION(&server->config.logger, cmc->sub,
                                  "Could not create a MonitoredItem "
                                  "with StatusCode %s",
                                  UA_StatusCode_name(result->statusCode));
         UA_MonitoredItem_delete(server, newMon);
         return;
     }
 
     /* Initialize the value status so the first sample always passes the filter */
     newMon->lastValue.hasStatus = true;
     newMon->lastValue.status = ~(UA_StatusCode)0;
 
     /* Register the Monitoreditem in the server and subscription */
     UA_Server_registerMonitoredItem(server, newMon);
 
     /* Activate the MonitoredItem */
     result->statusCode |=
         UA_MonitoredItem_setMonitoringMode(server, newMon, request->monitoringMode);
     if(result->statusCode != UA_STATUSCODE_GOOD) {
         UA_MonitoredItem_delete(server, newMon);
         return;
     }
 
     /* Prepare the response */
     result->revisedSamplingInterval = newMon->parameters.samplingInterval;
     result->revisedQueueSize = newMon->parameters.queueSize;
     result->monitoredItemId = newMon->monitoredItemId;
 
     UA_LOG_INFO_SUBSCRIPTION(&server->config.logger, cmc->sub,
                              "MonitoredItem %" PRIi32 " | "
                              "Created the MonitoredItem "
                              "(Sampling Interval: %.2fms, Queue Size: %lu)",
                              newMon->monitoredItemId,
                              newMon->parameters.samplingInterval,
                              (unsigned long)newMon->parameters.queueSize);
 }
