commit 0886abbb8596c875ccf25981e4cde3a4dd902365
Author: Diego F. Aranha <dfaranha@gmail.com>
Date:   Sun Feb 7 13:19:06 2021 +0100

    Fix invalid write.

diff --git a/src/bn/relic_bn_mul.c b/src/bn/relic_bn_mul.c
index f8902cf8..ac92a52a 100644
--- a/src/bn/relic_bn_mul.c
+++ b/src/bn/relic_bn_mul.c
@@ -41,116 +41,116 @@
 /**
  * Multiplies two multiple precision integers using recursive Karatsuba
  * multiplication.
  *
  * @param[out] c			- the result.
  * @param[in] a				- the first multiple precision integer.
  * @param[in] b				- the second multiple precision integer.
  * @param[in] level			- the number of Karatsuba steps to apply.
  */
 static void bn_mul_karat_imp(bn_t c, const bn_t a, const bn_t b, int level) {
 	bn_t a0, a1, b0, b1, a0b0, a1b1, t;
 
 	/* Compute half the digits of a or b. */
 	int h = RLC_MIN(a->used, b->used) >> 1;
 
 	bn_null(a0);
 	bn_null(a1);
 	bn_null(b0);
 	bn_null(b1);
 	bn_null(a0b0);
 	bn_null(a1b1);
 	bn_null(t);
 
 	RLC_TRY {
 		/* Allocate the temp variables. */
 		bn_new_size(a0, h);
-		bn_new_size(a1, h);
-		bn_new_size(b0, a->used - h);
+		bn_new_size(b0, h);
+		bn_new_size(a1, a->used - h);
 		bn_new_size(b1, b->used - h);
 		bn_new(a0b0);
 		bn_new(a1b1);
 		bn_new(t);
 
 		/* a = a1 || a0, b = b1 || b0 */
 		a0->used = b0->used = h;
 		a1->used = a->used - h;
 		b1->used = b->used - h;
 		dv_copy(a0->dp, a->dp, h);
 		dv_copy(a1->dp, a->dp + h, a->used - h);
 		dv_copy(b0->dp, b->dp, h);
 		dv_copy(b1->dp, b->dp + h, b->used - h);
 		bn_trim(a0);
 		bn_trim(b0);
 		bn_trim(a1);
 		bn_trim(b1);
 
 		/* a0b0 = a0 * b0 and a1b1 = a1 * b1 */
 		if (level <= 1) {
 #if BN_MUL == BASIC
 			bn_mul_basic(a0b0, a0, b0);
 			bn_mul_basic(a1b1, a1, b1);
 #elif BN_MUL == COMBA
 			bn_mul_comba(a0b0, a0, b0);
 			bn_mul_comba(a1b1, a1, b1);
 #endif
 		} else {
 			bn_mul_karat_imp(a0b0, a0, b0, level - 1);
 			bn_mul_karat_imp(a1b1, a1, b1, level - 1);
 		}
 
 		/* t = (a1 + a0) */
 		bn_add(a1, a1, a0);
 		/* t2 = (b1 + b0) */
 		bn_add(b1, b1, b0);
 
 		/* t = (a1 + a0)*(b1 + b0) */
 		if (level <= 1) {
 #if BN_MUL == BASIC
 			bn_mul_basic(t, a1, b1);
 #elif BN_MUL == COMBA
 			bn_mul_comba(t, a1, b1);
 #endif
 		} else {
 			bn_mul_karat_imp(t, a1, b1, level - 1);
 		}
 		/* t2 = (a0*b0 + a1*b1) */
 		bn_sub(t, t, a0b0);
 
 		/* t = (a1 + a0)*(b1 + b0) - (a0*b0 + a1*b1) */
 		bn_sub(t, t, a1b1);
 
 		/* t = (a1 + a0)*(b1 + b0) - (a0*b0 + a1*b1) << h digits */
 		bn_lsh(t, t, h * RLC_DIG);
 
 		/* t2 = a1 * b1 << 2*h digits */
 		bn_lsh(a1b1, a1b1, 2 * h * RLC_DIG);
 
 		/* t = t + a0*b0 */
 		bn_add(t, t, a0b0);
 
 		/* c = t + a1*b1 */
 		bn_add(t, t, a1b1);
 
 		t->sign = a->sign ^ b->sign;
 		bn_copy(c, t);
 		bn_trim(c);
 	}
 	RLC_CATCH_ANY {
 		RLC_THROW(ERR_CAUGHT);
 	}
 	RLC_FINALLY {
 		bn_free(a0);
 		bn_free(a1);
 		bn_free(b0);
 		bn_free(b1);
 		bn_free(a0b0);
 		bn_free(a1b1);
 		bn_free(t);
 	}
 }
 
 #endif
 
 /*============================================================================*/
 /* Public definitions                                                         */
 /*============================================================================*/
