commit 497858a0436bf2d0f64510c1cfe7590a4a72c1ff
Merge: 057d2f2a00 1631b96b4b
Author: Christoph M. Becker <cmbecker69@gmx.de>
Date:   Mon Jul 12 23:40:16 2021 +0200

    Merge branch 'PHP-8.0'
    
    * PHP-8.0:
      exit_status is no longer a true global

diff --git a/sapi/cli/php_cli.c b/sapi/cli/php_cli.c
index cb8dbeed4c..a118e98d47 100644
--- a/sapi/cli/php_cli.c
+++ b/sapi/cli/php_cli.c
@@ -602,555 +602,555 @@ BOOL WINAPI php_cli_win32_ctrl_handler(DWORD sig)
 static int do_cli(int argc, char **argv) /* {{{ */
 {
 	int c;
 	zend_file_handle file_handle;
 	int behavior = PHP_MODE_STANDARD;
 	char *reflection_what = NULL;
 	volatile int request_started = 0;
 	char *php_optarg = NULL, *orig_optarg = NULL;
 	int php_optind = 1, orig_optind = 1;
 	char *exec_direct=NULL, *exec_run=NULL, *exec_begin=NULL, *exec_end=NULL;
 	char *arg_free=NULL, **arg_excp=&arg_free;
 	char *script_file=NULL, *translated_path = NULL;
 	int interactive=0;
 	const char *param_error=NULL;
 	int hide_argv = 0;
 	int num_repeats = 1;
 	pid_t pid = getpid();
 
 	file_handle.filename = NULL;
 
 	zend_try {
 
 		CG(in_compilation) = 0; /* not initialized but needed for several options */
 
 		while ((c = php_getopt(argc, argv, OPTIONS, &php_optarg, &php_optind, 0, 2)) != -1) {
 			switch (c) {
 
 			case 'i': /* php info & quit */
 				if (php_request_startup()==FAILURE) {
 					goto err;
 				}
 				request_started = 1;
 				php_print_info(PHP_INFO_ALL & ~PHP_INFO_CREDITS);
 				php_output_end_all();
 				EG(exit_status) = (c == '?' && argc > 1 && !strchr(argv[1],  c));
 				goto out;
 
 			case 'v': /* show php version & quit */
 				php_printf("PHP %s (%s) (built: %s %s) (%s)\nCopyright (c) The PHP Group\n%s",
 					PHP_VERSION, cli_sapi_module.name, __DATE__, __TIME__,
 #ifdef ZTS
 					"ZTS"
 #else
 					"NTS"
 #endif
 #ifdef PHP_BUILD_COMPILER
 					" " PHP_BUILD_COMPILER
 #endif
 #ifdef PHP_BUILD_ARCH
 					" " PHP_BUILD_ARCH
 #endif
 #if ZEND_DEBUG
 					" DEBUG"
 #endif
 #ifdef HAVE_GCOV
 					" GCOV"
 #endif
 					,
 					get_zend_version()
 				);
 				sapi_deactivate();
 				goto out;
 
 			case 'm': /* list compiled in modules */
 				if (php_request_startup()==FAILURE) {
 					goto err;
 				}
 				request_started = 1;
 				php_printf("[PHP Modules]\n");
 				print_modules();
 				php_printf("\n[Zend Modules]\n");
 				print_extensions();
 				php_printf("\n");
 				php_output_end_all();
 				EG(exit_status) = 0;
 				goto out;
 
 			default:
 				break;
 			}
 		}
 
 		/* Set some CLI defaults */
 		SG(options) |= SAPI_OPTION_NO_CHDIR;
 
 		php_optind = orig_optind;
 		php_optarg = orig_optarg;
 		while ((c = php_getopt(argc, argv, OPTIONS, &php_optarg, &php_optind, 0, 2)) != -1) {
 			switch (c) {
 
 			case 'a':	/* interactive mode */
 				if (!cli_shell_callbacks.cli_shell_run) {
 					param_error = "Interactive shell (-a) requires the readline extension.\n";
 					break;
 				}
 				if (!interactive) {
 					if (behavior != PHP_MODE_STANDARD) {
 						param_error = param_mode_conflict;
 						break;
 					}
 
 					interactive=1;
 				}
 				break;
 
 			case 'C': /* don't chdir to the script directory */
 				/* This is default so NOP */
 				break;
 
 			case 'F':
 				if (behavior == PHP_MODE_PROCESS_STDIN) {
 					if (exec_run || script_file) {
 						param_error = "You can use -R or -F only once.\n";
 						break;
 					}
 				} else if (behavior != PHP_MODE_STANDARD) {
 					param_error = param_mode_conflict;
 					break;
 				}
 				behavior=PHP_MODE_PROCESS_STDIN;
 				script_file = php_optarg;
 				break;
 
 			case 'f': /* parse file */
 				if (behavior == PHP_MODE_CLI_DIRECT || behavior == PHP_MODE_PROCESS_STDIN) {
 					param_error = param_mode_conflict;
 					break;
 				} else if (script_file) {
 					param_error = "You can use -f only once.\n";
 					break;
 				}
 				script_file = php_optarg;
 				break;
 
 			case 'l': /* syntax check mode */
 				if (behavior != PHP_MODE_STANDARD) {
 					break;
 				}
 				behavior=PHP_MODE_LINT;
 				break;
 
 			case 'q': /* do not generate HTTP headers */
 				/* This is default so NOP */
 				break;
 
 			case 'r': /* run code from command line */
 				if (behavior == PHP_MODE_CLI_DIRECT) {
 					if (exec_direct || script_file) {
 						param_error = "You can use -r only once.\n";
 						break;
 					}
 				} else if (behavior != PHP_MODE_STANDARD || interactive) {
 					param_error = param_mode_conflict;
 					break;
 				}
 				behavior=PHP_MODE_CLI_DIRECT;
 				exec_direct=php_optarg;
 				break;
 
 			case 'R':
 				if (behavior == PHP_MODE_PROCESS_STDIN) {
 					if (exec_run || script_file) {
 						param_error = "You can use -R or -F only once.\n";
 						break;
 					}
 				} else if (behavior != PHP_MODE_STANDARD) {
 					param_error = param_mode_conflict;
 					break;
 				}
 				behavior=PHP_MODE_PROCESS_STDIN;
 				exec_run=php_optarg;
 				break;
 
 			case 'B':
 				if (behavior == PHP_MODE_PROCESS_STDIN) {
 					if (exec_begin) {
 						param_error = "You can use -B only once.\n";
 						break;
 					}
 				} else if (behavior != PHP_MODE_STANDARD || interactive) {
 					param_error = param_mode_conflict;
 					break;
 				}
 				behavior=PHP_MODE_PROCESS_STDIN;
 				exec_begin=php_optarg;
 				break;
 
 			case 'E':
 				if (behavior == PHP_MODE_PROCESS_STDIN) {
 					if (exec_end) {
 						param_error = "You can use -E only once.\n";
 						break;
 					}
 				} else if (behavior != PHP_MODE_STANDARD || interactive) {
 					param_error = param_mode_conflict;
 					break;
 				}
 				behavior=PHP_MODE_PROCESS_STDIN;
 				exec_end=php_optarg;
 				break;
 
 			case 's': /* generate highlighted HTML from source */
 				if (behavior == PHP_MODE_CLI_DIRECT || behavior == PHP_MODE_PROCESS_STDIN) {
 					param_error = "Source highlighting only works for files.\n";
 					break;
 				}
 				behavior=PHP_MODE_HIGHLIGHT;
 				break;
 
 			case 'w':
 				if (behavior == PHP_MODE_CLI_DIRECT || behavior == PHP_MODE_PROCESS_STDIN) {
 					param_error = "Source stripping only works for files.\n";
 					break;
 				}
 				behavior=PHP_MODE_STRIP;
 				break;
 
 			case 'z': /* load extension file */
 				zend_load_extension(php_optarg);
 				break;
 			case 'H':
 				hide_argv = 1;
 				break;
 			case 10:
 				behavior=PHP_MODE_REFLECTION_FUNCTION;
 				reflection_what = php_optarg;
 				break;
 			case 11:
 				behavior=PHP_MODE_REFLECTION_CLASS;
 				reflection_what = php_optarg;
 				break;
 			case 12:
 				behavior=PHP_MODE_REFLECTION_EXTENSION;
 				reflection_what = php_optarg;
 				break;
 			case 13:
 				behavior=PHP_MODE_REFLECTION_ZEND_EXTENSION;
 				reflection_what = php_optarg;
 				break;
 			case 14:
 				behavior=PHP_MODE_REFLECTION_EXT_INFO;
 				reflection_what = php_optarg;
 				break;
 			case 15:
 				behavior = PHP_MODE_SHOW_INI_CONFIG;
 				break;
 			case 16:
 				num_repeats = atoi(php_optarg);
 				break;
 			default:
 				break;
 			}
 		}
 
 		if (param_error) {
 			PUTS(param_error);
 			EG(exit_status) = 1;
 			goto err;
 		}
 
 #if defined(PHP_WIN32) && !defined(PHP_CLI_WIN32_NO_CONSOLE) && (HAVE_LIBREADLINE || HAVE_LIBEDIT) && !defined(COMPILE_DL_READLINE)
 		if (!interactive) {
 		/* The -a option was not passed. If there is no file, it could
 		 	still make sense to run interactively. The presence of a file
 			is essential to mitigate buggy console info. */
 			interactive = php_win32_console_is_own() &&
 				!(script_file ||
 					argc > php_optind && behavior!=PHP_MODE_CLI_DIRECT &&
 					behavior!=PHP_MODE_PROCESS_STDIN &&
 					strcmp(argv[php_optind-1],"--")
 				);
 		}
 #endif
 
 		if (interactive) {
 			printf("Interactive shell\n\n");
 			fflush(stdout);
 		}
 
 		if (num_repeats > 1) {
 			fprintf(stdout, "Executing for the first time...\n");
 			fflush(stdout);
 		}
 
 do_repeat:
 		/* only set script_file if not set already and not in direct mode and not at end of parameter list */
 		if (argc > php_optind
 		  && !script_file
 		  && behavior!=PHP_MODE_CLI_DIRECT
 		  && behavior!=PHP_MODE_PROCESS_STDIN
 		  && strcmp(argv[php_optind-1],"--"))
 		{
 			script_file=argv[php_optind];
 			php_optind++;
 		}
 		if (script_file) {
 			virtual_cwd_activate();
 			if (cli_seek_file_begin(&file_handle, script_file) != SUCCESS) {
 				goto err;
 			} else {
 				char real_path[MAXPATHLEN];
 				if (VCWD_REALPATH(script_file, real_path)) {
 					translated_path = strdup(real_path);
 				}
 				script_filename = script_file;
 				php_self = script_file;
 			}
 		} else {
 			/* We could handle PHP_MODE_PROCESS_STDIN in a different manner  */
 			/* here but this would make things only more complicated. And it */
 			/* is consistent with the way -R works where the stdin file handle*/
 			/* is also accessible. */
 			php_self = "Standard input code";
 			if (behavior < PHP_MODE_CLI_DIRECT
 			 && (!interactive || PHP_MODE_STANDARD != PHP_MODE_STANDARD)) {
 				zend_stream_init_fp(&file_handle, stdin, php_self);
 				file_handle.primary_script = 1;
 			}
 		}
 
 		/* before registering argv to module exchange the *new* argv[0] */
 		/* we can achieve this without allocating more memory */
 		SG(request_info).argc=argc-php_optind+1;
 		arg_excp = argv+php_optind-1;
 		arg_free = argv[php_optind-1];
 		SG(request_info).path_translated = translated_path ? translated_path : php_self;
 		argv[php_optind-1] = php_self;
 		SG(request_info).argv=argv+php_optind-1;
 
 		if (php_request_startup()==FAILURE) {
 			*arg_excp = arg_free;
 			PUTS("Could not startup.\n");
 			goto err;
 		}
 		request_started = 1;
 		CG(skip_shebang) = 1;
 
 		zend_register_bool_constant(
 			ZEND_STRL("PHP_CLI_PROCESS_TITLE"),
 			is_ps_title_available() == PS_TITLE_SUCCESS,
 			CONST_CS, 0);
 
 		*arg_excp = arg_free; /* reconstruct argv */
 
 		if (hide_argv) {
 			int i;
 			for (i = 1; i < argc; i++) {
 				memset(argv[i], 0, strlen(argv[i]));
 			}
 		}
 
 		zend_is_auto_global(ZSTR_KNOWN(ZEND_STR_AUTOGLOBAL_SERVER));
 
 		PG(during_request_startup) = 0;
 		switch (behavior) {
 		case PHP_MODE_STANDARD:
 			if (script_file) {
 				cli_register_file_handles(/* no_close */ PHP_DEBUG || num_repeats > 1);
 			}
 
 			if (interactive) {
 				EG(exit_status) = cli_shell_callbacks.cli_shell_run();
 			} else {
 				php_execute_script(&file_handle);
 			}
 			break;
 		case PHP_MODE_LINT:
 			EG(exit_status) = php_lint_script(&file_handle);
 			if (EG(exit_status) == SUCCESS) {
 				zend_printf("No syntax errors detected in %s\n", php_self);
 			} else {
 				zend_printf("Errors parsing %s\n", php_self);
 			}
 			break;
 		case PHP_MODE_STRIP:
 			if (open_file_for_scanning(&file_handle)==SUCCESS) {
 				zend_strip();
 			}
 			goto out;
 			break;
 		case PHP_MODE_HIGHLIGHT:
 			{
 				zend_syntax_highlighter_ini syntax_highlighter_ini;
 
 				if (open_file_for_scanning(&file_handle)==SUCCESS) {
 					php_get_highlight_struct(&syntax_highlighter_ini);
 					zend_highlight(&syntax_highlighter_ini);
 				}
 				goto out;
 			}
 			break;
 		case PHP_MODE_CLI_DIRECT:
 			cli_register_file_handles(/* no_close */ PHP_DEBUG || num_repeats > 1);
 			zend_eval_string_ex(exec_direct, NULL, "Command line code", 1);
 			break;
 
 		case PHP_MODE_PROCESS_STDIN:
 			{
 				char *input;
 				size_t len, index = 0;
 				zval argn, argi;
 
 				if (!exec_run && script_file) {
 					zend_string_release_ex(file_handle.filename, 0);
 					file_handle.filename = NULL;
 				}
 
 				cli_register_file_handles(/* no_close */ PHP_DEBUG || num_repeats > 1);
 
 				if (exec_begin) {
 					zend_eval_string_ex(exec_begin, NULL, "Command line begin code", 1);
 				}
 				while (EG(exit_status) == SUCCESS && (input=php_stream_gets(s_in_process, NULL, 0)) != NULL) {
 					len = strlen(input);
 					while (len > 0 && len-- && (input[len]=='\n' || input[len]=='\r')) {
 						input[len] = '\0';
 					}
 					ZVAL_STRINGL(&argn, input, len + 1);
 					zend_hash_str_update(&EG(symbol_table), "argn", sizeof("argn")-1, &argn);
 					ZVAL_LONG(&argi, ++index);
 					zend_hash_str_update(&EG(symbol_table), "argi", sizeof("argi")-1, &argi);
 					if (exec_run) {
 						zend_eval_string_ex(exec_run, NULL, "Command line run code", 1);
 					} else {
 						if (script_file) {
 							if (cli_seek_file_begin(&file_handle, script_file) != SUCCESS) {
 								EG(exit_status) = 1;
 							} else {
 								CG(skip_shebang) = 1;
 								php_execute_script(&file_handle);
 							}
 						}
 					}
 					efree(input);
 				}
 				if (exec_end) {
 					zend_eval_string_ex(exec_end, NULL, "Command line end code", 1);
 				}
 
 				break;
 			}
 
 			case PHP_MODE_REFLECTION_FUNCTION:
 			case PHP_MODE_REFLECTION_CLASS:
 			case PHP_MODE_REFLECTION_EXTENSION:
 			case PHP_MODE_REFLECTION_ZEND_EXTENSION:
 				{
 					zend_class_entry *pce = NULL;
 					zval arg, ref;
 					zend_execute_data execute_data;
 
 					switch (behavior) {
 						default:
 							break;
 						case PHP_MODE_REFLECTION_FUNCTION:
 							if (strstr(reflection_what, "::")) {
 								pce = reflection_method_ptr;
 							} else {
 								pce = reflection_function_ptr;
 							}
 							break;
 						case PHP_MODE_REFLECTION_CLASS:
 							pce = reflection_class_ptr;
 							break;
 						case PHP_MODE_REFLECTION_EXTENSION:
 							pce = reflection_extension_ptr;
 							break;
 						case PHP_MODE_REFLECTION_ZEND_EXTENSION:
 							pce = reflection_zend_extension_ptr;
 							break;
 					}
 
 					ZVAL_STRING(&arg, reflection_what);
 					object_init_ex(&ref, pce);
 
 					memset(&execute_data, 0, sizeof(zend_execute_data));
 					EG(current_execute_data) = &execute_data;
 					zend_call_known_instance_method_with_1_params(
 						pce->constructor, Z_OBJ(ref), NULL, &arg);
 
 					if (EG(exception)) {
 						zval rv;
 						zval *msg = zend_read_property(zend_ce_exception, EG(exception), "message", sizeof("message")-1, 0, &rv);
 						zend_printf("Exception: %s\n", Z_STRVAL_P(msg));
 						zend_object_release(EG(exception));
 						EG(exception) = NULL;
-						exit_status = 1;
+						EG(exit_status) = 1;
 					} else {
 						zend_print_zval(&ref, 0);
 						zend_write("\n", 1);
 					}
 					zval_ptr_dtor(&ref);
 					zval_ptr_dtor(&arg);
 
 					break;
 				}
 			case PHP_MODE_REFLECTION_EXT_INFO:
 				{
 					size_t len = strlen(reflection_what);
 					char *lcname = zend_str_tolower_dup(reflection_what, len);
 					zend_module_entry *module;
 
 					if ((module = zend_hash_str_find_ptr(&module_registry, lcname, len)) == NULL) {
 						if (!strcmp(reflection_what, "main")) {
 							display_ini_entries(NULL);
 						} else {
 							zend_printf("Extension '%s' not present.\n", reflection_what);
 							EG(exit_status) = 1;
 						}
 					} else {
 						php_info_print_module(module);
 					}
 
 					efree(lcname);
 					break;
 				}
 
 			case PHP_MODE_SHOW_INI_CONFIG:
 				{
 					zend_printf("Configuration File (php.ini) Path: %s\n", PHP_CONFIG_FILE_PATH);
 					zend_printf("Loaded Configuration File:         %s\n", php_ini_opened_path ? php_ini_opened_path : "(none)");
 					zend_printf("Scan for additional .ini files in: %s\n", php_ini_scanned_path  ? php_ini_scanned_path : "(none)");
 					zend_printf("Additional .ini files parsed:      %s\n", php_ini_scanned_files ? php_ini_scanned_files : "(none)");
 					break;
 				}
 		}
 	} zend_end_try();
 
 out:
 	if (file_handle.filename) {
 		zend_destroy_file_handle(&file_handle);
 	}
 	if (request_started) {
 		php_request_shutdown((void *) 0);
 	}
 	if (translated_path) {
 		free(translated_path);
 	}
 	/* Don't repeat fork()ed processes. */
 	if (--num_repeats && pid == getpid()) {
 		fprintf(stdout, "Finished execution, repeating...\n");
 		fflush(stdout);
 		goto do_repeat;
 	}
 	return EG(exit_status);
 err:
 	sapi_deactivate();
 	zend_ini_deactivate();
 	EG(exit_status) = 1;
 	goto out;
 }
 /* }}} */
 
 /* {{{ main */
 #ifdef PHP_CLI_WIN32_NO_CONSOLE
