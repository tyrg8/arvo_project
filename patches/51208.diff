commit fce1c53844ca21dcc14f3acabeaf2e12d47e5568
Author: Isaac Brodsky <isaac@isaacbrodsky.com>
Date:   Mon Sep 12 16:55:26 2022 -0700

    Fix potential OOB read in localIjToCell (#684)

diff --git a/src/apps/testapps/testCellToLocalIj.c b/src/apps/testapps/testCellToLocalIj.c
index fd64eb6b..944d1eb1 100644
--- a/src/apps/testapps/testCellToLocalIj.c
+++ b/src/apps/testapps/testCellToLocalIj.c
@@ -36,240 +36,248 @@
 SUITE(h3ToLocalIj) {
     // Some indexes that represent base cells. Base cells
     // are hexagons except for `pent1`.
     H3Index bc1 = H3_INIT;
     setH3Index(&bc1, 0, 15, 0);
 
     H3Index bc2 = H3_INIT;
     setH3Index(&bc2, 0, 8, 0);
 
     H3Index bc3 = H3_INIT;
     setH3Index(&bc3, 0, 31, 0);
 
     H3Index pent1 = H3_INIT;
     setH3Index(&pent1, 0, 4, 0);
 
     TEST(ijkBaseCells) {
         CoordIJK ijk;
         t_assert(cellToLocalIjk(pent1, bc1, &ijk) == E_SUCCESS,
                  "got ijk for base cells 4 and 15");
         t_assert(_ijkMatches(&ijk, &UNIT_VECS[2]) == 1,
                  "neighboring base cell at 0,1,0");
     }
 
     TEST(ijBaseCells) {
         CoordIJ ij = {.i = 0, .j = 0};
         H3Index origin = 0x8029fffffffffff;
         H3Index retrieved;
         t_assert(
             H3_EXPORT(localIjToCell)(origin, &ij, 0, &retrieved) == E_SUCCESS,
             "got origin back");
         t_assert(retrieved == 0x8029fffffffffff, "origin matches self");
         ij.i = 1;
         t_assert(
             H3_EXPORT(localIjToCell)(origin, &ij, 0, &retrieved) == E_SUCCESS,
             "got offset index");
         t_assert(retrieved == 0x8051fffffffffff,
                  "modified index matches expected");
         ij.i = 2;
         t_assert(
             H3_EXPORT(localIjToCell)(origin, &ij, 0, &retrieved) == E_FAILED,
             "out of range base cell (1)");
         ij.i = 0;
         ij.j = 2;
         t_assert(
             H3_EXPORT(localIjToCell)(origin, &ij, 0, &retrieved) == E_FAILED,
             "out of range base cell (2)");
         ij.i = -2;
         ij.j = -2;
         t_assert(
             H3_EXPORT(localIjToCell)(origin, &ij, 0, &retrieved) == E_FAILED,
             "out of range base cell (3)");
     }
 
     TEST(ijOutOfRange) {
         const int numCoords = 7;
         const CoordIJ coords[] = {{0, 0}, {1, 0},  {2, 0}, {3, 0},
                                   {4, 0}, {-4, 0}, {0, 4}};
         const H3Index expected[] = {0x81283ffffffffff,
                                     0x81293ffffffffff,
                                     0x8150bffffffffff,
                                     0x8151bffffffffff,
                                     H3_NULL,
                                     H3_NULL,
                                     H3_NULL};
 
         for (int i = 0; i < numCoords; i++) {
             H3Index result;
             const H3Error err =
                 H3_EXPORT(localIjToCell)(expected[0], &coords[i], 0, &result);
             if (expected[i] == H3_NULL) {
                 t_assert(err != 0, "coordinates out of range");
             } else {
                 t_assert(err == 0, "coordinates in range");
                 t_assert(result == expected[i], "result matches expectation");
             }
         }
     }
 
     TEST(cellToLocalIjFailed) {
         CoordIJ ij;
 
         t_assert(H3_EXPORT(cellToLocalIj)(bc1, bc1, 0, &ij) == 0,
                  "found IJ (1)");
         t_assert(ij.i == 0 && ij.j == 0, "ij correct (1)");
         t_assert(H3_EXPORT(cellToLocalIj)(bc1, pent1, 0, &ij) == 0,
                  "found IJ (2)");
         t_assert(ij.i == 1 && ij.j == 0, "ij correct (2)");
         t_assert(H3_EXPORT(cellToLocalIj)(bc1, bc2, 0, &ij) == 0,
                  "found IJ (3)");
         t_assert(ij.i == 0 && ij.j == -1, "ij correct (3)");
         t_assert(H3_EXPORT(cellToLocalIj)(bc1, bc3, 0, &ij) == 0,
                  "found IJ (4)");
         t_assert(ij.i == -1 && ij.j == 0, "ij correct (4)");
         t_assert(H3_EXPORT(cellToLocalIj)(pent1, bc3, 0, &ij) == E_FAILED,
                  "found IJ (5)");
     }
 
     TEST(cellToLocalIjInvalid) {
         CoordIJ ij;
         H3Index invalidIndex = 0x7fffffffffffffff;
         H3_SET_RESOLUTION(invalidIndex, H3_GET_RESOLUTION(bc1));
         t_assert(H3_EXPORT(cellToLocalIj)(bc1, invalidIndex, 0, &ij) ==
                      E_CELL_INVALID,
                  "invalid index");
         t_assert(H3_EXPORT(cellToLocalIj)(0x7fffffffffffffff, bc1, 0, &ij) ==
                      E_RES_MISMATCH,
                  "invalid origin");
         t_assert(
             H3_EXPORT(cellToLocalIj)(0x7fffffffffffffff, 0x7fffffffffffffff, 0,
                                      &ij) == E_CELL_INVALID,
             "invalid origin and index");
     }
 
     TEST(localIjToCellInvalid) {
         CoordIJ ij = {0, 0};
         H3Index index;
         t_assert(H3_EXPORT(localIjToCell)(0x7fffffffffffffff, &ij, 0, &index) ==
                      E_CELL_INVALID,
                  "invalid origin for ijToH3");
     }
 
     /**
      * Tests for INVALID_DIGIT being detected and failed on in various cases.
      */
     TEST(indexOnPentInvalid) {
         H3Index onPentInvalid;
         setH3Index(&onPentInvalid, 1, 4, INVALID_DIGIT);
         H3Index offPent;
         setH3Index(&offPent, 1, 3, CENTER_DIGIT);
         CoordIJ ij;
         t_assert(H3_EXPORT(cellToLocalIj)(offPent, onPentInvalid, 0, &ij) ==
                      E_CELL_INVALID,
                  "invalid index on pentagon");
 
         H3Index onPentValid;
         setH3Index(&onPentValid, 1, 4, CENTER_DIGIT);
         t_assert(H3_EXPORT(cellToLocalIj)(onPentInvalid, onPentValid, 0, &ij) ==
                      E_CELL_INVALID,
                  "invalid both on pentagon");
         t_assert(H3_EXPORT(cellToLocalIj)(onPentValid, onPentInvalid, 0, &ij) ==
                      E_CELL_INVALID,
                  "invalid both on pentagon");
 
         ij.i = 0;
         ij.j = 0;
         H3Index out;
         t_assert(H3_EXPORT(localIjToCell)(onPentInvalid, &ij, 0, &out) ==
                      E_CELL_INVALID,
                  "invalid both on pentagon");
 
         ij.i = 3;
         ij.j = 3;
         t_assert(H3_EXPORT(localIjToCell)(onPentInvalid, &ij, 0, &out) ==
                      E_CELL_INVALID,
                  "invalid origin on pentagon");
     }
 
     /**
      * Test that coming from the same direction outside the pentagon is handled
      * the same as coming from the same direction inside the pentagon.
      */
     TEST(onOffPentagonSame) {
         for (int bc = 0; bc < NUM_BASE_CELLS; bc++) {
             for (int res = 1; res <= MAX_H3_RES; res++) {
                 // K_AXES_DIGIT is the first internal direction, and it's also
                 // invalid for pentagons, so skip to next.
                 Direction startDir = K_AXES_DIGIT;
                 if (_isBaseCellPentagon(bc)) {
                     startDir++;
                 }
 
                 for (Direction dir = startDir; dir < NUM_DIGITS; dir++) {
                     H3Index internalOrigin;
                     setH3Index(&internalOrigin, res, bc, dir);
 
                     H3Index externalOrigin;
                     setH3Index(&externalOrigin, res,
                                _getBaseCellNeighbor(bc, dir), CENTER_DIGIT);
 
                     for (Direction testDir = startDir; testDir < NUM_DIGITS;
                          testDir++) {
                         H3Index testIndex;
                         setH3Index(&testIndex, res, bc, testDir);
 
                         CoordIJ internalIj;
                         int internalIjFailed = H3_EXPORT(cellToLocalIj)(
                             internalOrigin, testIndex, 0, &internalIj);
                         CoordIJ externalIj;
                         int externalIjFailed = H3_EXPORT(cellToLocalIj)(
                             externalOrigin, testIndex, 0, &externalIj);
 
                         t_assert(
                             (bool)internalIjFailed == (bool)externalIjFailed,
                             "internal/external failed matches when getting IJ");
 
                         if (internalIjFailed) {
                             continue;
                         }
 
                         H3Index internalIndex;
                         int internalIjFailed2 = H3_EXPORT(localIjToCell)(
                             internalOrigin, &internalIj, 0, &internalIndex);
                         H3Index externalIndex;
                         int externalIjFailed2 = H3_EXPORT(localIjToCell)(
                             externalOrigin, &externalIj, 0, &externalIndex);
 
                         t_assert(
                             (bool)internalIjFailed2 == (bool)externalIjFailed2,
                             "internal/external failed matches when getting "
                             "index");
 
                         if (internalIjFailed2) {
                             continue;
                         }
 
                         t_assert(internalIndex == externalIndex,
                                  "internal/external index matches");
                     }
                 }
             }
         }
     }
 
     TEST(invalidMode) {
         CoordIJ ij;
         H3Index cell = 0x85283473fffffff;
         t_assertSuccess(H3_EXPORT(cellToLocalIj)(cell, cell, 0, &ij));
 
         for (uint32_t i = 1; i <= 32; i++) {
             CoordIJ ij2;
             t_assert(H3_EXPORT(cellToLocalIj)(cell, cell, i, &ij2) ==
                          E_OPTION_INVALID,
                      "Invalid mode fail for cellToLocalIj");
             H3Index cell2;
             t_assert(H3_EXPORT(localIjToCell)(cell, &ij2, i, &cell2) ==
                          E_OPTION_INVALID,
                      "Invalid mode fail for cellToLocalIj");
         }
     }
+
+    TEST(invalid_negativeIj) {
+        H3Index index = 0x200f202020202020;
+        CoordIJ ij = {.i = -14671840, .j = -2147483648};
+        H3Index out;
+        t_assert(H3_EXPORT(localIjToCell)(index, &ij, 0, &out) == E_FAILED,
+                 "Negative I and J components fail");
+    }
 }
diff --git a/src/h3lib/lib/coordijk.c b/src/h3lib/lib/coordijk.c
index 91771bdf..b3533ed0 100644
--- a/src/h3lib/lib/coordijk.c
+++ b/src/h3lib/lib/coordijk.c
@@ -210,46 +210,47 @@ void _ijkScale(CoordIJK *c, int factor) {
 /**
  * Normalizes ijk coordinates by setting the components to the smallest possible
  * values. Works in place.
  *
  * @param c The ijk coordinates to normalize.
  */
 void _ijkNormalize(CoordIJK *c) {
     // remove any negative values
     if (c->i < 0) {
         c->j -= c->i;
         c->k -= c->i;
         c->i = 0;
     }
 
     if (c->j < 0) {
         c->i -= c->j;
         c->k -= c->j;
         c->j = 0;
     }
 
     if (c->k < 0) {
         c->i -= c->k;
         c->j -= c->k;
         c->k = 0;
     }
 
     // remove the min value if needed
     int min = c->i;
     if (c->j < min) min = c->j;
     if (c->k < min) min = c->k;
     if (min > 0) {
         c->i -= min;
         c->j -= min;
         c->k -= min;
     }
 }
 
 /**
- * Determines the H3 digit corresponding to a unit vector in ijk coordinates.
+ * Determines the H3 digit corresponding to a unit vector or the zero vector
+ * in ijk coordinates.
  *
- * @param ijk The ijk coordinates; must be a unit vector.
- * @return The H3 digit (0-6) corresponding to the ijk unit vector, or
- * INVALID_DIGIT on failure.
+ * @param ijk The ijk coordinates; must be a unit vector or zero vector.
+ * @return The H3 digit (0-6) corresponding to the ijk unit vector, zero vector,
+ * or INVALID_DIGIT (7) on failure.
  */
 Direction _unitIjkToDigit(const CoordIJK *ijk) {
     CoordIJK c = *ijk;
diff --git a/src/h3lib/lib/localij.c b/src/h3lib/lib/localij.c
index 6e338c6d..8b073026 100644
--- a/src/h3lib/lib/localij.c
+++ b/src/h3lib/lib/localij.c
@@ -288,238 +288,238 @@ H3Error cellToLocalIjk(H3Index origin, H3Index h3, CoordIJK *out) {
 /**
  * Produces an index for ijk+ coordinates anchored by an origin.
  *
  * The coordinate space used by this function may have deleted
  * regions or warping due to pentagonal distortion.
  *
  * Failure may occur if the coordinates are too far away from the origin
  * or if the index is on the other side of a pentagon.
  *
  * @param origin An anchoring index for the ijk+ coordinate system.
  * @param ijk IJK+ Coordinates to find the index of
  * @param out The index will be placed here on success
  * @return 0 on success, or another value on failure.
  */
 H3Error localIjkToCell(H3Index origin, const CoordIJK *ijk, H3Index *out) {
     int res = H3_GET_RESOLUTION(origin);
     int originBaseCell = H3_GET_BASE_CELL(origin);
     if (originBaseCell < 0 ||  // LCOV_EXCL_BR_LINE
         originBaseCell >= NUM_BASE_CELLS) {
         // Base cells less than zero can not be represented in an index
         return E_CELL_INVALID;
     }
     int originOnPent = _isBaseCellPentagon(originBaseCell);
 
     // This logic is very similar to faceIjkToH3
     // initialize the index
     *out = H3_INIT;
     H3_SET_MODE(*out, H3_CELL_MODE);
     H3_SET_RESOLUTION(*out, res);
 
     // check for res 0/base cell
     if (res == 0) {
-        if (ijk->i > 1 || ijk->j > 1 || ijk->k > 1) {
-            // out of range input
+        const Direction dir = _unitIjkToDigit(ijk);
+        if (dir == INVALID_DIGIT) {
+            // out of range input - not a unit vector or zero vector
             return E_FAILED;
         }
 
-        const Direction dir = _unitIjkToDigit(ijk);
         const int newBaseCell = _getBaseCellNeighbor(originBaseCell, dir);
         if (newBaseCell == INVALID_BASE_CELL) {
             // Moving in an invalid direction off a pentagon.
             return E_FAILED;
         }
         H3_SET_BASE_CELL(*out, newBaseCell);
         return E_SUCCESS;
     }
 
     // we need to find the correct base cell offset (if any) for this H3 index;
     // start with the passed in base cell and resolution res ijk coordinates
     // in that base cell's coordinate system
     CoordIJK ijkCopy = *ijk;
 
     // build the H3Index from finest res up
     // adjust r for the fact that the res 0 base cell offsets the indexing
     // digits
     for (int r = res - 1; r >= 0; r--) {
         CoordIJK lastIJK = ijkCopy;
         CoordIJK lastCenter;
         if (isResolutionClassIII(r + 1)) {
             // rotate ccw
             _upAp7(&ijkCopy);
             lastCenter = ijkCopy;
             _downAp7(&lastCenter);
         } else {
             // rotate cw
             _upAp7r(&ijkCopy);
             lastCenter = ijkCopy;
             _downAp7r(&lastCenter);
         }
 
         CoordIJK diff;
         _ijkSub(&lastIJK, &lastCenter, &diff);
         _ijkNormalize(&diff);
 
         H3_SET_INDEX_DIGIT(*out, r + 1, _unitIjkToDigit(&diff));
     }
 
     // ijkCopy should now hold the IJK of the base cell in the
     // coordinate system of the current base cell
 
     if (ijkCopy.i > 1 || ijkCopy.j > 1 || ijkCopy.k > 1) {
         // out of range input
         return E_FAILED;
     }
 
     // lookup the correct base cell
     Direction dir = _unitIjkToDigit(&ijkCopy);
     int baseCell = _getBaseCellNeighbor(originBaseCell, dir);
     // If baseCell is invalid, it must be because the origin base cell is a
     // pentagon, and because pentagon base cells do not border each other,
     // baseCell must not be a pentagon.
     int indexOnPent =
         (baseCell == INVALID_BASE_CELL ? 0 : _isBaseCellPentagon(baseCell));
 
     if (dir != CENTER_DIGIT) {
         // If the index is in a warped direction, we need to unwarp the base
         // cell direction. There may be further need to rotate the index digits.
         int pentagonRotations = 0;
         if (originOnPent) {
             const Direction originLeadingDigit = _h3LeadingNonZeroDigit(origin);
             if (originLeadingDigit == INVALID_DIGIT) {
                 return E_CELL_INVALID;
             }
             pentagonRotations =
                 PENTAGON_ROTATIONS_REVERSE[originLeadingDigit][dir];
             for (int i = 0; i < pentagonRotations; i++) {
                 dir = _rotate60ccw(dir);
             }
             // The pentagon rotations are being chosen so that dir is not the
             // deleted direction. If it still happens, it means we're moving
             // into a deleted subsequence, so there is no index here.
             if (dir == K_AXES_DIGIT) {
                 return E_PENTAGON;
             }
             baseCell = _getBaseCellNeighbor(originBaseCell, dir);
 
             // indexOnPent does not need to be checked again since no pentagon
             // base cells border each other.
             assert(baseCell != INVALID_BASE_CELL);
             assert(!_isBaseCellPentagon(baseCell));
         }
 
         // Now we can determine the relation between the origin and target base
         // cell.
         const int baseCellRotations =
             baseCellNeighbor60CCWRots[originBaseCell][dir];
         assert(baseCellRotations >= 0);
 
         // Adjust for pentagon warping within the base cell. The base cell
         // should be in the right location, so now we need to rotate the index
         // back. We might not need to check for errors since we would just be
         // double mapping.
         if (indexOnPent) {
             const Direction revDir =
                 _getBaseCellDirection(baseCell, originBaseCell);
             assert(revDir != INVALID_DIGIT);
 
             // Adjust for the different coordinate space in the two base cells.
             // This is done first because we need to do the pentagon rotations
             // based on the leading digit in the pentagon's coordinate system.
             for (int i = 0; i < baseCellRotations; i++) {
                 *out = _h3Rotate60ccw(*out);
             }
 
             const Direction indexLeadingDigit = _h3LeadingNonZeroDigit(*out);
             // This case should be unreachable because this function is building
             // *out, and should never generate an invalid digit, above.
             // LCOV_EXCL_START
             if (indexLeadingDigit == INVALID_DIGIT) {
                 return E_CELL_INVALID;
             }
             // LCOV_EXCL_STOP
             if (_isBaseCellPolarPentagon(baseCell)) {
                 pentagonRotations =
                     PENTAGON_ROTATIONS_REVERSE_POLAR[revDir][indexLeadingDigit];
             } else {
                 pentagonRotations =
                     PENTAGON_ROTATIONS_REVERSE_NONPOLAR[revDir]
                                                        [indexLeadingDigit];
             }
             // For this to occur, revDir would need to be 1. Since revDir is
             // from the index base cell (which is a pentagon) towards the
             // origin, this should never be the case. LCOV_EXCL_START
             if (pentagonRotations < 0) {
                 return E_CELL_INVALID;
             }
             // LCOV_EXCL_STOP
 
             for (int i = 0; i < pentagonRotations; i++) {
                 *out = _h3RotatePent60ccw(*out);
             }
         } else {
             if (pentagonRotations < 0) {
                 return E_CELL_INVALID;
             }
             for (int i = 0; i < pentagonRotations; i++) {
                 *out = _h3Rotate60ccw(*out);
             }
 
             // Adjust for the different coordinate space in the two base cells.
             for (int i = 0; i < baseCellRotations; i++) {
                 *out = _h3Rotate60ccw(*out);
             }
         }
     } else if (originOnPent && indexOnPent) {
         const int originLeadingDigit = _h3LeadingNonZeroDigit(origin);
         const int indexLeadingDigit = _h3LeadingNonZeroDigit(*out);
 
         if (originLeadingDigit == INVALID_DIGIT ||
             indexLeadingDigit == INVALID_DIGIT) {
             return E_CELL_INVALID;
         }
         const int withinPentagonRotations =
             PENTAGON_ROTATIONS_REVERSE[originLeadingDigit][indexLeadingDigit];
         if (withinPentagonRotations < 0) {
             // This occurs when an invalid K axis digit is present
             return E_CELL_INVALID;
         }
 
         for (int i = 0; i < withinPentagonRotations; i++) {
             *out = _h3Rotate60ccw(*out);
         }
     }
 
     if (indexOnPent) {
         // TODO: There are cases in cellToLocalIjk which are failed but not
         // accounted for here - instead just fail if the recovered index is
         // invalid.
         if (_h3LeadingNonZeroDigit(*out) == K_AXES_DIGIT) {
             return E_PENTAGON;
         }
     }
 
     H3_SET_BASE_CELL(*out, baseCell);
     return E_SUCCESS;
 }
 
 /**
  * Produces ij coordinates for an index anchored by an origin.
  *
  * The coordinate space used by this function may have deleted
  * regions or warping due to pentagonal distortion.
  *
  * Coordinates are only comparable if they come from the same
  * origin index.
  *
  * Failure may occur if the index is too far away from the origin
  * or if the index is on the other side of a pentagon.
  *
  * This function's output is not guaranteed
  * to be compatible across different versions of H3.
  *
  * @param origin An anchoring index for the ij coordinate system.
  * @param index Index to find the coordinates of
  * @param mode Mode, must be 0
  * @param out ij coordinates of the index will be placed here on success
  * @return 0 on success, or another value on failure.
  */
