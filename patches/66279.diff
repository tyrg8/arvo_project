commit f86cdab8d685ce5d2ea0d133c076611e3394c6c8
Author: danblooomberg <dan.bloomberg@gmail.com>
Date:   Mon Jan 29 10:50:58 2024 -0800

    Fixed fuzzing issue #66279 (asan oss-fuzz in pixa_recog_fuzzer)
    * test for index before doing lookup in font and baseline tables

diff --git a/src/bmf.c b/src/bmf.c
index 7cd3116..f03889a 100644
--- a/src/bmf.c
+++ b/src/bmf.c
@@ -205,28 +205,30 @@ l_int32  i, index;
 PIXA    *pixa;
 
     if ((index = (l_int32)chr) == 10)  /* NL */
         return NULL;
     if (!bmf)
         return (PIX *)ERROR_PTR("bmf not defined", __func__, NULL);
+    if (index < 32 || index >= 127)
+        return (PIX *)ERROR_PTR("invalid index", __func__, NULL);
 
     i = bmf->fonttab[index];
     if (i == UNDEF) {
         L_ERROR("no bitmap representation for %d\n", __func__, index);
         return NULL;
     }
 
     if ((pixa = bmf->pixa) == NULL)
         return (PIX *)ERROR_PTR("pixa not found", __func__, NULL);
 
     return pixaGetPix(pixa, i, L_CLONE);
 }
 
 
 /*!
  * \brief   bmfGetWidth()
  *
  * \param[in]    bmf
  * \param[in]    chr    should be one of the 95 supported bitmaps
  * \param[out]   pw     character width; -1 if not printable
  * \return  0 if OK, 1 on error
  */
@@ -239,31 +241,33 @@ l_int32  i, index;
 PIXA    *pixa;
 
     if (!pw)
         return ERROR_INT("&w not defined", __func__, 1);
     *pw = -1;
     if (!bmf)
         return ERROR_INT("bmf not defined", __func__, 1);
     if ((index = (l_int32)chr) == 10)  /* NL */
         return 0;
+    if (index < 32 || index >= 127)
+        return ERROR_INT("invalid index", __func__, 1);
 
     i = bmf->fonttab[index];
     if (i == UNDEF) {
         L_ERROR("no bitmap representation for %d\n", __func__, index);
         return 1;
     }
 
     if ((pixa = bmf->pixa) == NULL)
         return ERROR_INT("pixa not found", __func__, 1);
 
     return pixaGetPixDimensions(pixa, i, pw, NULL, NULL);
 }
 
 
 /*!
  * \brief   bmfGetBaseline()
  *
  * \param[in]    bmf
  * \param[in]    chr         should be one of the 95 supported bitmaps
  * \param[out]   pbaseline   distance below UL corner of bitmap char
  * \return  0 if OK, 1 on error
  */
@@ -272,42 +276,44 @@ bmfGetBaseline(L_BMF    *bmf,
                char      chr,
                l_int32  *pbaseline)
 {
 l_int32  bl, index;
 
     if (!pbaseline)
         return ERROR_INT("&baseline not defined", __func__, 1);
     *pbaseline = 0;
     if (!bmf)
         return ERROR_INT("bmf not defined", __func__, 1);
     if ((index = (l_int32)chr) == 10)  /* NL */
         return 0;
+    if (index < 32 || index >= 127)
+        return ERROR_INT("invalid index", __func__, 1);
 
     bl = bmf->baselinetab[index];
     if (bl == UNDEF) {
         L_ERROR("no bitmap representation for %d\n", __func__, index);
         return 1;
     }
 
     *pbaseline = bl;
     return 0;
 }
 
 
 /*---------------------------------------------------------------------*/
 /*               Font bitmap acquisition and generation                */
 /*---------------------------------------------------------------------*/
 /*!
  * \brief   pixaGetFont()
  *
  * \param[in]    dir         directory holding pixa of character set
  * \param[in]    fontsize    4, 6, 8, ... , 20
  * \param[out]   pbl0        baseline of row 1
  * \param[out]   pbl1        baseline of row 2
  * \param[out]   pbl2        baseline of row 3
  * \return  pixa    of font bitmaps for 95 characters, or NULL on error
  *
  * <pre>
  * Notes:
  *      (1) This reads a pre-computed pixa file with the 95 ascii chars.
  * </pre>
  */
