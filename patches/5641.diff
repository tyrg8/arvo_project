commit dac34508c049d12c801416727652f94daed4fd4b
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Sun Aug 12 20:55:17 2018 +0800

    Bug 699631: Handle unsupported triangle mesh edge flags.
    
    There were two issues with the code parsing the triangle mesh's
    edge flags:
    
      * meshes were not require to start with an independent triangle
      * out of range edge flags caused vertices to be ignored
    
    A mesh where the edge flag of the first vertice is out of range,
    and the edge flag of the second vertex indicates continuation
    of a prior triangle would result in trying to create a triangle
    where the third coordinate would be uninitialized.
    
    This commit requires the edge flag of the first vertex to indicate
    a new independent triangle and if out of range edge flags are
    encountered they are treated as if they indicate a new triangle.
    
    Thanks to oss-fuzz for reporting.

diff --git a/source/fitz/shade.c b/source/fitz/shade.c
index faf8b67c4..63089235b 100644
--- a/source/fitz/shade.c
+++ b/source/fitz/shade.c
@@ -298,77 +298,92 @@ static void
 fz_process_shade_type4(fz_context *ctx, fz_shade *shade, fz_matrix ctm, fz_mesh_processor *painter)
 {
 	fz_stream *stream = fz_open_compressed_buffer(ctx, shade->buffer);
 	fz_vertex v[4];
 	fz_vertex *va = &v[0];
 	fz_vertex *vb = &v[1];
 	fz_vertex *vc = &v[2];
 	fz_vertex *vd = &v[3];
 	int flag, i, ncomp = painter->ncomp;
 	int bpflag = shade->u.m.bpflag;
 	int bpcoord = shade->u.m.bpcoord;
 	int bpcomp = shade->u.m.bpcomp;
 	float x0 = shade->u.m.x0;
 	float x1 = shade->u.m.x1;
 	float y0 = shade->u.m.y0;
 	float y1 = shade->u.m.y1;
 	const float *c0 = shade->u.m.c0;
 	const float *c1 = shade->u.m.c1;
 	float x, y, c[FZ_MAX_COLORS];
+	int first_triangle = 1;
 
 	fz_try(ctx)
 	{
 		while (!fz_is_eof_bits(ctx, stream))
 		{
 			flag = fz_read_bits(ctx, stream, bpflag);
 			x = read_sample(ctx, stream, bpcoord, x0, x1);
 			y = read_sample(ctx, stream, bpcoord, y0, y1);
 			for (i = 0; i < ncomp; i++)
 				c[i] = read_sample(ctx, stream, bpcomp, c0[i], c1[i]);
 			fz_prepare_vertex(ctx, painter, vd, ctm, x, y, c);
 
+			if (first_triangle)
+			{
+				if (flag != 0)
+				{
+					fz_warn(ctx, "ignoring non-zero edge flags for first vertex in mesh");
+					flag = 0;
+				}
+				first_triangle = 0;
+			}
+
 			switch (flag)
 			{
+			default:
+				fz_warn(ctx, "ignoring out of range edge flag in mesh");
+				/* fallthrough */
+
 			case 0: /* start new triangle */
 				SWAP(va, vd);
 
 				fz_read_bits(ctx, stream, bpflag);
 				x = read_sample(ctx, stream, bpcoord, x0, x1);
 				y = read_sample(ctx, stream, bpcoord, y0, y1);
 				for (i = 0; i < ncomp; i++)
 					c[i] = read_sample(ctx, stream, bpcomp, c0[i], c1[i]);
 				fz_prepare_vertex(ctx, painter, vb, ctm, x, y, c);
 
 				fz_read_bits(ctx, stream, bpflag);
 				x = read_sample(ctx, stream, bpcoord, x0, x1);
 				y = read_sample(ctx, stream, bpcoord, y0, y1);
 				for (i = 0; i < ncomp; i++)
 					c[i] = read_sample(ctx, stream, bpcomp, c0[i], c1[i]);
 				fz_prepare_vertex(ctx, painter, vc, ctm, x, y, c);
 
 				paint_tri(ctx, painter, va, vb, vc);
 				break;
 
 			case 1: /* Vb, Vc, Vd */
 				SWAP(va, vb);
 				SWAP(vb, vc);
 				SWAP(vc, vd);
 				paint_tri(ctx, painter, va, vb, vc);
 				break;
 
 			case 2: /* Va, Vc, Vd */
 				SWAP(vb, vc);
 				SWAP(vc, vd);
 				paint_tri(ctx, painter, va, vb, vc);
 				break;
 			}
 		}
 	}
 	fz_always(ctx)
 	{
 		fz_drop_stream(ctx, stream);
 	}
 	fz_catch(ctx)
 	{
 		fz_rethrow(ctx);
 	}
 }
