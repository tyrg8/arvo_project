commit 84c15da1997559c37841dc16f9e2c70c643dd9d2
Author: Benjamin Kietzman <bengilgit@gmail.com>
Date:   Mon Nov 27 12:10:08 2023 -0500

    GH-38738: [C++] Check variadic buffer counts in bounds (#38740)
    
    
    
    ### Rationale for this change
    
    Invalid variadic buffer counts can cause allocating storage for variadic buffers to fail.
    
    ### What changes are included in this PR?
    
    Check variadic buffer counts are valid before they are used as an allocator argument.
    
    ### Are these changes tested?
    
    They pass with the fuzzer testcase.
    
    ### Are there any user-facing changes?
    
    No
    
    * Closes: #38738
    
    Lead-authored-by: Benjamin Kietzman <bengilgit@gmail.com>
    Co-authored-by: Antoine Pitrou <pitrou@free.fr>
    Signed-off-by: Benjamin Kietzman <bengilgit@gmail.com>

diff --git a/cpp/CMakePresets.json b/cpp/CMakePresets.json
index f6324c1c0..a15b204c3 100644
--- a/cpp/CMakePresets.json
+++ b/cpp/CMakePresets.json
@@ -1,435 +1,450 @@
 {
   "version": 3,
   "cmakeMinimumRequired": {
     "major": 3,
     "minor": 21,
     "patch": 0
   },
   "configurePresets": [
     {
       "name": "base",
       "hidden": true,
       "generator": "Ninja",
       "cacheVariables": {
         "ARROW_BUILD_STATIC": "OFF",
         "CMAKE_EXPORT_COMPILE_COMMANDS": "ON"
       }
     },
     {
       "name": "base-debug",
       "inherits": "base",
       "hidden": true,
       "cacheVariables": {
         "ARROW_BUILD_INTEGRATION": "ON",
         "ARROW_BUILD_TESTS": "ON",
         "ARROW_EXTRA_ERROR_CONTEXT": "ON",
         "CMAKE_BUILD_TYPE": "Debug"
       }
     },
     {
       "name": "base-release",
       "inherits": "base",
       "hidden": true,
       "cacheVariables": {
         "CMAKE_BUILD_TYPE": "Release"
       }
     },
     {
       "name": "base-benchmarks",
       "inherits": "base",
       "hidden": true,
       "cacheVariables": {
         "ARROW_BUILD_BENCHMARKS": "ON",
         "ARROW_BUILD_BENCHMARKS_REFERENCE": "ON",
         "ARROW_BUILD_OPENMP_BENCHMARKS": "ON",
         "ARROW_BUILD_DETAILED_BENCHMARKS": "OFF",
         "CMAKE_BUILD_TYPE": "RelWithDebInfo"
       }
     },
     {
       "name": "features-minimal",
       "hidden": true,
       "cacheVariables": {
         "ARROW_WITH_RE2": "OFF",
         "ARROW_WITH_UTF8PROC": "OFF"
       }
     },
     {
       "name": "features-basic",
       "inherits": "features-minimal",
       "hidden": true,
       "cacheVariables": {
         "ARROW_COMPUTE": "ON",
         "ARROW_CSV": "ON",
         "ARROW_DATASET": "ON",
         "ARROW_FILESYSTEM": "ON",
         "ARROW_JSON": "ON"
       }
     },
     {
       "name": "features-main",
       "inherits": "features-basic",
       "hidden": true,
       "cacheVariables": {
         "ARROW_SUBSTRAIT": "ON",
         "ARROW_ACERO": "ON",
         "ARROW_MIMALLOC": "ON",
         "ARROW_PARQUET": "ON",
         "ARROW_WITH_BROTLI": "ON",
         "ARROW_WITH_BZ2": "ON",
         "ARROW_WITH_LZ4": "ON",
         "ARROW_WITH_RE2": "ON",
         "ARROW_WITH_SNAPPY": "ON",
         "ARROW_WITH_UTF8PROC": "ON",
         "ARROW_WITH_ZLIB": "ON",
         "ARROW_WITH_ZSTD": "ON"
       }
     },
     {
       "name": "features-cuda",
       "inherits": "features-basic",
       "hidden": true,
       "cacheVariables": {
         "ARROW_CUDA": "ON"
       }
     },
     {
       "name": "features-filesystems",
       "inherits": "features-basic",
       "hidden": true,
       "cacheVariables": {
         "ARROW_AZURE": "ON",
         "ARROW_GCS": "ON",
         "ARROW_HDFS": "ON",
         "ARROW_S3": "ON"
       }
     },
     {
       "name": "features-flight",
       "inherits": "features-basic",
       "hidden": true,
       "cacheVariables": {
         "ARROW_FLIGHT": "ON"
       }
     },
     {
       "name": "features-flight-sql",
       "inherits": "features-flight",
       "hidden": true,
       "cacheVariables": {
         "ARROW_FLIGHT_SQL": "ON"
       }
     },
     {
       "name": "features-gandiva",
       "inherits": "features-basic",
       "hidden": true,
       "cacheVariables": {
         "ARROW_GANDIVA": "ON"
       }
     },
     {
       "name": "features-python-minimal",
       "inherits": [
         "features-minimal"
       ],
       "hidden": true,
       "cacheVariables": {
         "ARROW_COMPUTE": "ON",
         "ARROW_CSV": "ON",
         "ARROW_FILESYSTEM": "ON",
         "ARROW_JSON": "ON"
       }
     },
     {
       "name": "features-python",
       "inherits": [
         "features-main"
       ],
       "hidden": true,
       "cacheVariables": {
         "ARROW_COMPUTE": "ON",
         "ARROW_CSV": "ON",
         "ARROW_DATASET": "ON",
         "ARROW_FILESYSTEM": "ON",
         "ARROW_JSON": "ON",
         "ARROW_ORC": "ON"
       }
     },
     {
       "name": "features-python-maximal",
       "inherits": [
         "features-cuda",
         "features-filesystems",
         "features-flight-sql",
         "features-gandiva",
         "features-main",
         "features-python-minimal"
       ],
       "hidden": true,
       "cacheVariables": {
         "ARROW_ORC": "ON",
         "PARQUET_REQUIRE_ENCRYPTION": "ON"
       }
     },
     {
       "name": "features-maximal",
       "inherits": [
         "features-main",
         "features-cuda",
         "features-filesystems",
         "features-flight-sql",
         "features-gandiva",
         "features-python-maximal"
       ],
       "hidden": true,
       "cacheVariables": {
         "ARROW_BUILD_EXAMPLES": "ON",
         "ARROW_BUILD_UTILITIES": "ON",
         "ARROW_ORC": "ON",
         "ARROW_SKYHOOK": "ON",
         "ARROW_TENSORFLOW": "ON",
         "PARQUET_BUILD_EXAMPLES": "ON",
         "PARQUET_BUILD_EXECUTABLES": "ON",
         "PARQUET_REQUIRE_ENCRYPTION": "ON"
       }
     },
     {
       "name": "ninja-debug-minimal",
       "inherits": [
         "base-debug",
         "features-minimal"
       ],
       "displayName": "Debug build without anything enabled",
       "cacheVariables": {
         "ARROW_BUILD_INTEGRATION": "OFF",
         "ARROW_BUILD_TESTS": "OFF"
       }
     },
     {
       "name": "ninja-debug-basic",
       "inherits": [
         "base-debug",
         "features-basic"
       ],
       "displayName": "Debug build with tests and reduced dependencies",
       "cacheVariables": {}
     },
     {
       "name": "ninja-debug",
       "inherits": [
         "base-debug",
         "features-main"
       ],
       "displayName": "Debug build with tests and more optional components",
       "cacheVariables": {}
     },
     {
       "name": "ninja-debug-cuda",
       "inherits": [
         "base-debug",
         "features-cuda"
       ],
       "displayName": "Debug build with tests and CUDA integration",
       "cacheVariables": {}
     },
     {
       "name": "ninja-debug-filesystems",
       "inherits": [
         "base-debug",
         "features-filesystems"
       ],
       "displayName": "Debug build with tests and filesystems",
       "cacheVariables": {}
     },
     {
       "name": "ninja-debug-flight",
       "inherits": [
         "base-debug",
         "features-flight"
       ],
       "displayName": "Debug build with tests and Flight",
       "cacheVariables": {}
     },
     {
       "name": "ninja-debug-flight-sql",
       "inherits": [
         "base-debug",
         "features-flight-sql"
       ],
       "displayName": "Debug build with tests and Flight SQL",
       "cacheVariables": {}
     },
     {
       "name": "ninja-debug-gandiva",
       "inherits": [
         "base-debug",
         "features-gandiva"
       ],
       "displayName": "Debug build with tests and Gandiva",
       "cacheVariables": {}
     },
     {
       "name": "ninja-debug-python-minimal",
       "inherits": [
         "base-debug",
         "features-python-minimal"
       ],
       "displayName": "Debug build for PyArrow with minimal features",
       "cacheVariables": {}
     },
     {
       "name": "ninja-debug-python",
       "inherits": [
         "base-debug",
         "features-python"
       ],
       "displayName": "Debug build for PyArrow with common features (for backward compatibility)",
       "cacheVariables": {}
     },
     {
       "name": "ninja-debug-python-maximal",
       "inherits": [
         "base-debug",
         "features-python-maximal"
       ],
       "displayName": "Debug build for PyArrow with everything enabled",
       "cacheVariables": {}
     },
     {
       "name": "ninja-debug-maximal",
       "inherits": [
         "base-debug",
         "features-maximal"
       ],
       "displayName": "Debug build with everything enabled (except benchmarks)",
       "cacheVariables": {}
     },
     {
       "name": "ninja-release-minimal",
       "inherits": [
         "base-release",
         "features-minimal"
       ],
       "displayName": "Release build without anything enabled",
       "cacheVariables": {}
     },
     {
       "name": "ninja-release-basic",
       "inherits": [
         "base-release",
         "features-basic"
       ],
       "displayName": "Release build with reduced dependencies",
       "cacheVariables": {}
     },
     {
       "name": "ninja-release",
       "inherits": [
         "base-release",
         "features-main"
       ],
       "displayName": "Release build with more optional components",
       "cacheVariables": {}
     },
     {
       "name": "ninja-release-cuda",
       "inherits": [
         "base-release",
         "features-cuda"
       ],
       "displayName": "Release build with CUDA integration",
       "cacheVariables": {}
     },
     {
       "name": "ninja-release-flight",
       "inherits": [
         "base-release",
         "features-flight"
       ],
       "displayName": "Release build with Flight",
       "cacheVariables": {}
     },
     {
       "name": "ninja-release-flight-sql",
       "inherits": [
         "base-release",
         "features-flight-sql"
       ],
       "displayName": "Release build with Flight SQL",
       "cacheVariables": {}
     },
     {
       "name": "ninja-release-gandiva",
       "inherits": [
         "base-release",
         "features-gandiva"
       ],
       "displayName": "Release build with Gandiva",
       "cacheVariables": {}
     },
     {
       "name": "ninja-release-python-minimal",
       "inherits": [
         "base-release",
         "features-python-minimal"
       ],
       "displayName": "Release build for PyArrow with minimal features",
       "cacheVariables": {}
     },
     {
       "name": "ninja-release-python",
       "inherits": [
         "base-release",
         "features-python"
       ],
       "displayName": "Release build for PyArrow with common features (for backward compatibility)",
       "cacheVariables": {}
     },
     {
       "name": "ninja-release-python-maximal",
       "inherits": [
         "base-release",
         "features-python-maximal"
       ],
       "displayName": "Release build for PyArrow with everything enabled",
       "cacheVariables": {}
     },
     {
       "name": "ninja-release-maximal",
       "inherits": [
         "base-release",
         "features-maximal"
       ],
       "displayName": "Release build with everything enabled (except benchmarks)",
       "cacheVariables": {}
     },
     {
       "name": "ninja-benchmarks-basic",
       "inherits": [
         "base-benchmarks",
         "features-basic"
       ],
       "displayName": "Benchmarking build with reduced dependencies",
       "cacheVariables": {}
     },
     {
       "name": "ninja-benchmarks",
       "inherits": [
         "base-benchmarks",
         "features-main"
       ],
       "displayName": "Benchmarking build with more optional components",
       "cacheVariables": {}
     },
     {
       "name": "ninja-benchmarks-maximal",
       "inherits": [
         "base-benchmarks",
         "features-maximal"
       ],
       "displayName": "Benchmarking build with with everything enabled",
       "cacheVariables": {}
+    },
+    {
+      "name": "fuzzing",
+      "inherits": "base",
+      "displayName": "Debug build with IPC and Parquet fuzzing targets",
+      "cacheVariables": {
+        "CMAKE_BUILD_TYPE": "Debug",
+        "CMAKE_C_COMPILER": "clang",
+        "CMAKE_CXX_COMPILER": "clang++",
+        "ARROW_USE_ASAN": "ON",
+        "ARROW_USE_UBSAN": "ON",
+        "ARROW_IPC": "ON",
+        "ARROW_PARQUET": "ON",
+        "ARROW_FUZZING": "ON"
+      }
     }
   ]
 }
diff --git a/cpp/src/arrow/ipc/reader.cc b/cpp/src/arrow/ipc/reader.cc
index 2ea2a4bd1..d272c7856 100644
--- a/cpp/src/arrow/ipc/reader.cc
+++ b/cpp/src/arrow/ipc/reader.cc
@@ -163,340 +163,345 @@ class BatchDataReadRequest {
 /// The field_index and buffer_index are incremented based on how much of the
 /// batch is "consumed" (through nested data reconstruction, for example)
 class ArrayLoader {
  public:
   explicit ArrayLoader(const flatbuf::RecordBatch* metadata,
                        MetadataVersion metadata_version, const IpcReadOptions& options,
                        io::RandomAccessFile* file)
       : metadata_(metadata),
         metadata_version_(metadata_version),
         file_(file),
         file_offset_(0),
         max_recursion_depth_(options.max_recursion_depth) {}
 
   explicit ArrayLoader(const flatbuf::RecordBatch* metadata,
                        MetadataVersion metadata_version, const IpcReadOptions& options,
                        int64_t file_offset)
       : metadata_(metadata),
         metadata_version_(metadata_version),
         file_(nullptr),
         file_offset_(file_offset),
         max_recursion_depth_(options.max_recursion_depth) {}
 
   Status ReadBuffer(int64_t offset, int64_t length, std::shared_ptr<Buffer>* out) {
     if (skip_io_) {
       return Status::OK();
     }
     if (offset < 0) {
       return Status::Invalid("Negative offset for reading buffer ", buffer_index_);
     }
     if (length < 0) {
       return Status::Invalid("Negative length for reading buffer ", buffer_index_);
     }
     // This construct permits overriding GetBuffer at compile time
     if (!bit_util::IsMultipleOf8(offset)) {
       return Status::Invalid("Buffer ", buffer_index_,
                              " did not start on 8-byte aligned offset: ", offset);
     }
     if (file_) {
       return file_->ReadAt(offset, length).Value(out);
     } else {
       read_request_.RequestRange(offset + file_offset_, length, out);
       return Status::OK();
     }
   }
 
   Status LoadType(const DataType& type) {
     DCHECK_NE(out_, nullptr);
     return VisitTypeInline(type, this);
   }
 
   Status Load(const Field* field, ArrayData* out) {
     if (max_recursion_depth_ <= 0) {
       return Status::Invalid("Max recursion depth reached");
     }
 
     field_ = field;
     out_ = out;
     out_->type = field_->type();
     return LoadType(*field_->type());
   }
 
   Status SkipField(const Field* field) {
     ArrayData dummy;
     skip_io_ = true;
     Status status = Load(field, &dummy);
     skip_io_ = false;
     // GH-37851: Reset state. Load will set `out_` to `&dummy`, which would
     // be a dangling pointer.
     out_ = nullptr;
     return status;
   }
 
   Status GetBuffer(int buffer_index, std::shared_ptr<Buffer>* out) {
     auto buffers = metadata_->buffers();
     CHECK_FLATBUFFERS_NOT_NULL(buffers, "RecordBatch.buffers");
     if (buffer_index >= static_cast<int>(buffers->size())) {
       return Status::IOError("buffer_index out of range.");
     }
     const flatbuf::Buffer* buffer = buffers->Get(buffer_index);
     if (buffer->length() == 0) {
       // Should never return a null buffer here.
       // (zero-sized buffer allocations are cheap)
       return AllocateBuffer(0).Value(out);
     } else {
       return ReadBuffer(buffer->offset(), buffer->length(), out);
     }
   }
 
   Result<size_t> GetVariadicCount(int i) {
     auto* variadic_counts = metadata_->variadicBufferCounts();
     CHECK_FLATBUFFERS_NOT_NULL(variadic_counts, "RecordBatch.variadicBufferCounts");
     if (i >= static_cast<int>(variadic_counts->size())) {
       return Status::IOError("variadic_count_index out of range.");
     }
-    return static_cast<size_t>(variadic_counts->Get(i));
+    int64_t count = variadic_counts->Get(i);
+    if (count < 0 || count > std::numeric_limits<int32_t>::max()) {
+      return Status::IOError(
+          "variadic_count must be representable as a positive int32_t, got ", count, ".");
+    }
+    return static_cast<size_t>(count);
   }
 
   Status GetFieldMetadata(int field_index, ArrayData* out) {
     auto nodes = metadata_->nodes();
     CHECK_FLATBUFFERS_NOT_NULL(nodes, "Table.nodes");
     // pop off a field
     if (field_index >= static_cast<int>(nodes->size())) {
       return Status::Invalid("Ran out of field metadata, likely malformed");
     }
     const flatbuf::FieldNode* node = nodes->Get(field_index);
 
     out->length = node->length();
     out->null_count = node->null_count();
     out->offset = 0;
     return Status::OK();
   }
 
   Status LoadCommon(Type::type type_id) {
     DCHECK_NE(out_, nullptr);
     // This only contains the length and null count, which we need to figure
     // out what to do with the buffers. For example, if null_count == 0, then
     // we can skip that buffer without reading from shared memory
     RETURN_NOT_OK(GetFieldMetadata(field_index_++, out_));
 
     if (internal::HasValidityBitmap(type_id, metadata_version_)) {
       // Extract null_bitmap which is common to all arrays except for unions
       // and nulls.
       if (out_->null_count != 0) {
         RETURN_NOT_OK(GetBuffer(buffer_index_, &out_->buffers[0]));
       }
       buffer_index_++;
     }
     return Status::OK();
   }
 
   template <typename TYPE>
   Status LoadPrimitive(Type::type type_id) {
     DCHECK_NE(out_, nullptr);
     out_->buffers.resize(2);
 
     RETURN_NOT_OK(LoadCommon(type_id));
     if (out_->length > 0) {
       RETURN_NOT_OK(GetBuffer(buffer_index_++, &out_->buffers[1]));
     } else {
       buffer_index_++;
       out_->buffers[1].reset(new Buffer(nullptr, 0));
     }
     return Status::OK();
   }
 
   Status LoadBinary(Type::type type_id) {
     DCHECK_NE(out_, nullptr);
     out_->buffers.resize(3);
 
     RETURN_NOT_OK(LoadCommon(type_id));
     RETURN_NOT_OK(GetBuffer(buffer_index_++, &out_->buffers[1]));
     return GetBuffer(buffer_index_++, &out_->buffers[2]);
   }
 
   template <typename TYPE>
   Status LoadList(const TYPE& type) {
     DCHECK_NE(out_, nullptr);
     out_->buffers.resize(2);
 
     RETURN_NOT_OK(LoadCommon(type.id()));
     RETURN_NOT_OK(GetBuffer(buffer_index_++, &out_->buffers[1]));
 
     const int num_children = type.num_fields();
     if (num_children != 1) {
       return Status::Invalid("Wrong number of children: ", num_children);
     }
 
     return LoadChildren(type.fields());
   }
 
   template <typename TYPE>
   Status LoadListView(const TYPE& type) {
     out_->buffers.resize(3);
 
     RETURN_NOT_OK(LoadCommon(type.id()));
     RETURN_NOT_OK(GetBuffer(buffer_index_++, &out_->buffers[1]));
     RETURN_NOT_OK(GetBuffer(buffer_index_++, &out_->buffers[2]));
 
     const int num_children = type.num_fields();
     if (num_children != 1) {
       return Status::Invalid("Wrong number of children: ", num_children);
     }
 
     return LoadChildren(type.fields());
   }
 
   Status LoadChildren(const std::vector<std::shared_ptr<Field>>& child_fields) {
     DCHECK_NE(out_, nullptr);
     ArrayData* parent = out_;
 
     parent->child_data.resize(child_fields.size());
     for (int i = 0; i < static_cast<int>(child_fields.size()); ++i) {
       parent->child_data[i] = std::make_shared<ArrayData>();
       --max_recursion_depth_;
       RETURN_NOT_OK(Load(child_fields[i].get(), parent->child_data[i].get()));
       ++max_recursion_depth_;
     }
     out_ = parent;
     return Status::OK();
   }
 
   Status Visit(const NullType& type) {
     out_->buffers.resize(1);
 
     // ARROW-6379: NullType has no buffers in the IPC payload
     return GetFieldMetadata(field_index_++, out_);
   }
 
   template <typename T>
   enable_if_t<std::is_base_of<FixedWidthType, T>::value &&
                   !std::is_base_of<FixedSizeBinaryType, T>::value &&
                   !std::is_base_of<DictionaryType, T>::value,
               Status>
   Visit(const T& type) {
     return LoadPrimitive<T>(type.id());
   }
 
   template <typename T>
   enable_if_base_binary<T, Status> Visit(const T& type) {
     return LoadBinary(type.id());
   }
 
   Status Visit(const BinaryViewType& type) {
     out_->buffers.resize(2);
 
     RETURN_NOT_OK(LoadCommon(type.id()));
     RETURN_NOT_OK(GetBuffer(buffer_index_++, &out_->buffers[1]));
 
-    ARROW_ASSIGN_OR_RAISE(auto character_buffer_count,
+    ARROW_ASSIGN_OR_RAISE(auto data_buffer_count,
                           GetVariadicCount(variadic_count_index_++));
-    out_->buffers.resize(character_buffer_count + 2);
-    for (size_t i = 0; i < character_buffer_count; ++i) {
+    out_->buffers.resize(data_buffer_count + 2);
+    for (size_t i = 0; i < data_buffer_count; ++i) {
       RETURN_NOT_OK(GetBuffer(buffer_index_++, &out_->buffers[i + 2]));
     }
     return Status::OK();
   }
 
   Status Visit(const FixedSizeBinaryType& type) {
     out_->buffers.resize(2);
     RETURN_NOT_OK(LoadCommon(type.id()));
     return GetBuffer(buffer_index_++, &out_->buffers[1]);
   }
 
   template <typename T>
   enable_if_var_size_list<T, Status> Visit(const T& type) {
     return LoadList(type);
   }
 
   template <typename T>
   enable_if_list_view<T, Status> Visit(const T& type) {
     return LoadListView(type);
   }
 
   Status Visit(const MapType& type) {
     RETURN_NOT_OK(LoadList(type));
     return MapArray::ValidateChildData(out_->child_data);
   }
 
   Status Visit(const FixedSizeListType& type) {
     out_->buffers.resize(1);
 
     RETURN_NOT_OK(LoadCommon(type.id()));
 
     const int num_children = type.num_fields();
     if (num_children != 1) {
       return Status::Invalid("Wrong number of children: ", num_children);
     }
 
     return LoadChildren(type.fields());
   }
 
   Status Visit(const StructType& type) {
     out_->buffers.resize(1);
     RETURN_NOT_OK(LoadCommon(type.id()));
     return LoadChildren(type.fields());
   }
 
   Status Visit(const UnionType& type) {
     int n_buffers = type.mode() == UnionMode::SPARSE ? 2 : 3;
     out_->buffers.resize(n_buffers);
 
     RETURN_NOT_OK(LoadCommon(type.id()));
 
     // With metadata V4, we can get a validity bitmap.
     // Trying to fix up union data to do without the top-level validity bitmap
     // is hairy:
     // - type ids must be rewritten to all have valid values (even for former
     //   null slots)
     // - sparse union children must have their validity bitmaps rewritten
     //   by ANDing the top-level validity bitmap
     // - dense union children must be rewritten (at least one of them)
     //   to insert the required null slots that were formerly omitted
     // So instead we bail out.
     if (out_->null_count != 0 && out_->buffers[0] != nullptr) {
       return Status::Invalid(
           "Cannot read pre-1.0.0 Union array with top-level validity bitmap");
     }
     out_->buffers[0] = nullptr;
     out_->null_count = 0;
 
     if (out_->length > 0) {
       RETURN_NOT_OK(GetBuffer(buffer_index_, &out_->buffers[1]));
       if (type.mode() == UnionMode::DENSE) {
         RETURN_NOT_OK(GetBuffer(buffer_index_ + 1, &out_->buffers[2]));
       }
     }
     buffer_index_ += n_buffers - 1;
     return LoadChildren(type.fields());
   }
 
   Status Visit(const DictionaryType& type) {
     // out_->dictionary will be filled later in ResolveDictionaries()
     return LoadType(*type.index_type());
   }
 
   Status Visit(const RunEndEncodedType& type) {
     out_->buffers.resize(1);
     RETURN_NOT_OK(LoadCommon(type.id()));
     return LoadChildren(type.fields());
   }
 
   Status Visit(const ExtensionType& type) { return LoadType(*type.storage_type()); }
 
   BatchDataReadRequest& read_request() { return read_request_; }
 
  private:
   const flatbuf::RecordBatch* metadata_;
   const MetadataVersion metadata_version_;
   io::RandomAccessFile* file_;
   int64_t file_offset_;
   int max_recursion_depth_;
   int buffer_index_ = 0;
   int field_index_ = 0;
   bool skip_io_ = false;
   int variadic_count_index_ = 0;
 
   BatchDataReadRequest read_request_;
   const Field* field_ = nullptr;
   ArrayData* out_ = nullptr;
 };
diff --git a/docs/source/developers/cpp/fuzzing.rst b/docs/source/developers/cpp/fuzzing.rst
index bd7b303d4..851d58fb5 100644
--- a/docs/source/developers/cpp/fuzzing.rst
+++ b/docs/source/developers/cpp/fuzzing.rst
@@ -36,9 +36,9 @@ areas ingesting potentially invalid or malicious data.
 Fuzz Targets and Utilities
 ==========================
 
-By passing the ``-DARROW_FUZZING=ON`` CMake option, you will build
-the fuzz targets corresponding to the aforementioned Arrow features, as well
-as additional related utilities.
+By passing the ``-DARROW_FUZZING=ON`` CMake option (or equivalently, using
+the ``fuzzing`` preset), you will build the fuzz targets corresponding to
+the aforementioned Arrow features, as well as additional related utilities.
 
 Generating the seed corpus
 --------------------------
@@ -84,12 +84,8 @@ would allow you to build the fuzz targets with debug information and the
 various sanitizer checks enabled.
 
 .. code-block::
 
-   $ cmake .. -GNinja \
-       -DCMAKE_BUILD_TYPE=Debug \
-       -DARROW_USE_ASAN=on \
-       -DARROW_USE_UBSAN=on \
-       -DARROW_FUZZING=on
+   $ cmake .. --preset=fuzzing
 
 Then, assuming you have downloaded the crashing data file (let's call it
 ``testcase-arrow-ipc-file-fuzz-123465``), you can reproduce the crash
@@ -101,3 +97,15 @@ by running the affected fuzz target on that file:
 
 (you may want to run that command under a debugger so as to inspect the
 program state more closely)
+
+Using conda
+-----------
+
+The fuzzing executables must be compiled with clang and linked to libraries
+which provide a fuzzing runtime. If you are using conda to provide your
+dependencies, you may need to install these before building the fuzz targets:
+
+.. code-block::
+
+   $ conda install clang clangxx compiler-rt
+   $ cmake .. --preset=fuzzing
