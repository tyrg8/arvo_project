commit 47e220942dfc68de777b91db1c2b3e81d0275e1b
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Tue Jan 11 11:50:42 2022 +0000

    oss-fuzz 42633: Bounds check (again) against hardcoded CMap value size

diff --git a/pdf/pdf_cmap.c b/pdf/pdf_cmap.c
index 9799120cb..c0b7fab4c 100644
--- a/pdf/pdf_cmap.c
+++ b/pdf/pdf_cmap.c
@@ -95,34 +95,37 @@ static int cmap_pushmark_func(gs_memory_t *mem, pdf_ps_ctx_t *stack, pdf_cmap *p
 static int cmap_endcodespacerange_func(gs_memory_t *mem, pdf_ps_ctx_t *s, byte *buf, byte *bufend)
 {
     pdf_cmap *pdficmap = (pdf_cmap *)s->client_data;
     int i, numranges, to_pop = pdf_ps_stack_count_to_mark(s, PDF_PS_OBJ_MARK);
     gx_code_space_t *code_space = &pdficmap->code_space;
     int nr = code_space->num_ranges;
     gx_code_space_range_t *gcsr = code_space->ranges;
 
     /* increment to_pop to cover the mark object */
     numranges = to_pop++;
     while (numranges % 2) numranges--;
 
     if (numranges > 0
      && pdf_ps_obj_has_type(&(s->cur[0]), PDF_PS_OBJ_STRING)  && s->cur[0].size <= MAX_CMAP_CODE_SIZE
      && pdf_ps_obj_has_type(&(s->cur[-1]), PDF_PS_OBJ_STRING) && s->cur[-1].size <= MAX_CMAP_CODE_SIZE) {
 
         code_space->num_ranges += numranges >> 1;
 
         code_space->ranges = (gx_code_space_range_t *)gs_alloc_byte_array(mem, code_space->num_ranges,
                           sizeof(gx_code_space_range_t), "cmap_endcodespacerange_func(ranges)");
         if (nr > 0) {
             memcpy(code_space->ranges, gcsr, nr);
             gs_free_object(mem, gcsr, "cmap_endcodespacerange_func(gcsr");
         }
 
         for (i = nr; i < code_space->num_ranges; i++) {
             int si = i - nr;
-            memcpy(code_space->ranges[i].first, s->cur[-((si * 2) + 1)].val.string, s->cur[-((si * 2) + 1)].size);
-            memcpy(code_space->ranges[i].last, s->cur[-(si * 2)].val.string, s->cur[-(si * 2)].size);
+            int s1 = s->cur[-((si * 2) + 1)].size < MAX_CMAP_CODE_SIZE ? s->cur[-((si * 2) + 1)].size : MAX_CMAP_CODE_SIZE;
+            int s2 = s->cur[-(si * 2)].size < MAX_CMAP_CODE_SIZE ? s->cur[-(si * 2)].size : MAX_CMAP_CODE_SIZE;
+
+            memcpy(code_space->ranges[i].first, s->cur[-((si * 2) + 1)].val.string, s1);
+            memcpy(code_space->ranges[i].last, s->cur[-(si * 2)].val.string, s2);
             code_space->ranges[i].size = s->cur[-(si * 2)].size;
         }
     }
     return pdf_ps_stack_pop(s, to_pop);
 }
