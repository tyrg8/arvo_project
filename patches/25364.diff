commit 739bc8cdac8d56c2c5f097a50cbf20fa941ff59d
Author: evpobr <evpobr@gmail.com>
Date:   Thu Nov 18 10:07:00 2021 +0500

    Fix unintialized variable in psf_binheader_readf()
    
    Thanks to @shao-hua-li

diff --git a/CHANGELOG.md b/CHANGELOG.md
index 9eacc3d0..9faf4c64 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -6,116 +6,118 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
 and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
 
 ## [Unreleased]
 
 ### Added
 
 * MPEG Encode/Decode Support.
 
   Uses libmpg123 for decode, liblame for encode. Encoding and decoding support
   is independent of each other and is split into separate files. MPEG support
   is generalized as subformats, `SF_FORMAT_MPEG_LAYER`(I,II,III) so that it
   might be used by other containers (`MPEG1WAVEFORMAT` for example), but also
   contains a major format `SF_FORMAT_MPEG` for 'mp3 files.'
 
   Encoding Status:
   * Layer III encoding
   * ID3v1 writing
   * ID3v2 writing
   * Lame/Xing Tag writing
   * Bitrate selection command
   * VBR or CBR
   
   Decoding Status:
   * Layers I/II/III decoding
   * ID3v1 reading
   * ID3v2 reading
   * Seeking
 * New fuzzer for OSS-Fuzz, thanks @DavidKorczynski.
 * This `CHANGELOG.md`. All notable changes to this project will be documented in
   this file. The old `NEWS` file has been renamed to `NEWS.OLD` and is no longer
   updated.
 * Add support for decoding MPEG III Audio in WAV files.
 * `SECURITY.md` file to give people instructions for reporting security
   vulnerabilities, thanks @zidingz.
 
 ### Changed
 
 * `SFC_SET_DITHER_ON_READ` and `SFC_SET_DITHER_ON_WRITE` enums comments in
   public header, thanks @SmiVan (issue #677).
 * `ENABLE_SNDFILE_WINDOWS_PROTOTYPES` define is deprecated and not needed
   anymore.
 
   Previously, in order for the [`sf_wchar_open`()](http://libsndfile.github.io/libsndfile/api.html#open)
   function to become available on   the Windows platform, it was required to
   perform certain actions:
 
   ```c
   #include <windows.h>
   #define ENABLE_SNDFILE_WINDOWS_PROTOTYPES 1
   #including <sndfile.h>
   ```
 
   These steps are no longer required and the `sf_wchar_open`() function is
   always available on the Windows platform.
 * Use UTF-8 as internal path encoding on Windows platform.
 
   This is an internal change to unify and simplify the handling of file paths.
 
   On the Windows platform, the file path is always converted to UTF-8 and
   converted to UTF-16 only for calls to WinAPI functions.
 
   The behavior of the functions for opening files on other platforms does not
   change.
 * Switch to .xz over .bz2 for release tarballs.
 * Disable static builds using Autotools by default. If you want static
   libraries, pass --enable-static to ./configure
 
 ### Fixed
 
 * Typo in `docs/index.md`.
 * Memory leak in `caf_read_header`(), credit to OSS-Fuzz ([issue 30375](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=30375)).
 * Stack overflow in `guess_file_type`(), thanks @bobsayshilol, credit to
   OSS-Fuzz ([issue 29339](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=29339)).
 * Abort in fuzzer, thanks @bobsayshilol, credit to OSS-Fuzz
   ([issue 26257](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=26257)).
 * Infinite loop in `svx_read_header`(), thanks @bobsayshilol, credit to OSS-Fuzz
   ([issue 25442](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=25442)).
 * GCC and Clang pedantic warnings, thanks @bobsayshilol.
 * Normalisation issue when scaling floating point data to `int` in
   `replace_read_f2i`(), thanks @bobsayshilol, (issue #702).
 * Missing samples when doing a partial read of Ogg file from index till the end
   of file, thanks @arthurt (issue #643).
 * sndfile-salvage: Handle files > 4 GB on Windows OS
 * Undefined shift in `dyn_get_32bit`(), credit to OSS-Fuzz
   ([issue 27366](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=27366)).
 * Integer overflow in `nms_adpcm_update`(), credit to OSS-Fuzz
   ([issue 25522](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=25522)).
 * Integer overflow in `psf_log_printf`(), credit to OSS-Fuzz
   ([issue 28441](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28441)),
   ([issue 25624](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=25624)).
 * ABI version incompatibility between Autotools and CMake build on Apple
   platforms.
 
   Now ABI must be compatible with Autotools builds. Note that this change
   requires CMake >= 3.17 for building dylib on Apple platforms.
 
 * Fix build with Autotools + MinGW toolchain on Windows platform.
 
   See https://github.com/msys2/MINGW-packages/issues/5803 for details.
 
+* Fix unintialized variable in psf_binheader_readf(), thanks @shao-hua-li
+
 ### Security
 
 * Heap buffer overflow in `wavlike_ima_decode_block`(), thanks @bobsayshilol,
   credit to OSS-Fuzz ([issue 25530](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=25530)).
 * Heap buffer overflow in `msadpcm_decode_block`(), thanks @bobsayshilol,
   credit to OSS-Fuzz ([issue 26803](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=26803)).
 * Heap buffer overflow in `psf_binheader_readf`(), thanks @bobsayshilol,
   credit to OSS-Fuzz ([issue 26026](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=26026)).
 * Index out of bounds in `psf_nms_adpcm_decode_block`(), credit to OSS-Fuzz
   ([issue 25561](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=25561)).
 * Heap buffer overflow in `flac_buffer_copy`(), thanks @yuawn,  @bobsayshilol.
 * Heap buffer overflow in `copyPredictorTo24`(), thanks @bobsayshilol,
   credit to OSS-Fuzz ([issue 27503](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=27503)).
 
 
 [Unreleased]: https://github.com/libsndfile/libsndfile/compare/1.0.31...HEAD
diff --git a/src/common.c b/src/common.c
index f236ca63..c4ef4a66 100644
--- a/src/common.c
+++ b/src/common.c
@@ -974,194 +974,194 @@ int
 psf_binheader_readf (SF_PRIVATE *psf, char const *format, ...)
 {	va_list			argptr ;
 	sf_count_t		*countptr, countdata ;
-	unsigned char	*ucptr, sixteen_bytes [16] ;
+	unsigned char	*ucptr, sixteen_bytes [16] = { 0 } ;
 	unsigned int 	*intptr, intdata ;
 	unsigned short	*shortptr ;
 	char			*charptr ;
 	float			*floatptr ;
 	double			*doubleptr ;
 	char			c ;
 	int				byte_count = 0, count = 0 ;
 
 	if (! format)
 		return psf_ftell (psf) ;
 
 	va_start (argptr, format) ;
 
 	while ((c = *format++))
 	{
 		if (psf->header.indx + 16 >= psf->header.len && psf_bump_header_allocation (psf, 16))
 			break ;
 
 		switch (c)
 		{	case 'e' : /* All conversions are now from LE to host. */
 					psf->rwf_endian = SF_ENDIAN_LITTLE ;
 					break ;
 
 			case 'E' : /* All conversions are now from BE to host. */
 					psf->rwf_endian = SF_ENDIAN_BIG ;
 					break ;
 
 			case 'm' : /* 4 byte marker value eg 'RIFF' */
 					intptr = va_arg (argptr, unsigned int*) ;
 					*intptr = 0 ;
 					ucptr = (unsigned char*) intptr ;
 					byte_count += header_read (psf, ucptr, sizeof (int)) ;
 					*intptr = GET_MARKER (ucptr) ;
 					break ;
 
 			case 'h' :
 					intptr = va_arg (argptr, unsigned int*) ;
 					*intptr = 0 ;
 					ucptr = (unsigned char*) intptr ;
 					byte_count += header_read (psf, sixteen_bytes, sizeof (sixteen_bytes)) ;
 					{	int k ;
 						intdata = 0 ;
 						for (k = 0 ; k < 16 ; k++)
 							intdata ^= sixteen_bytes [k] << k ;
 						}
 					*intptr = intdata ;
 					break ;
 
 			case '1' :
 					charptr = va_arg (argptr, char*) ;
 					*charptr = 0 ;
 					byte_count += header_read (psf, charptr, sizeof (char)) ;
 					break ;
 
 			case '2' : /* 2 byte value with the current endian-ness */
 					shortptr = va_arg (argptr, unsigned short*) ;
 					*shortptr = 0 ;
 					ucptr = (unsigned char*) shortptr ;
 					byte_count += header_read (psf, ucptr, sizeof (short)) ;
 					if (psf->rwf_endian == SF_ENDIAN_BIG)
 						*shortptr = GET_BE_SHORT (ucptr) ;
 					else
 						*shortptr = GET_LE_SHORT (ucptr) ;
 					break ;
 
 			case '3' : /* 3 byte value with the current endian-ness */
 					intptr = va_arg (argptr, unsigned int*) ;
 					*intptr = 0 ;
 					byte_count += header_read (psf, sixteen_bytes, 3) ;
 					if (psf->rwf_endian == SF_ENDIAN_BIG)
 						*intptr = GET_BE_3BYTE (sixteen_bytes) ;
 					else
 						*intptr = GET_LE_3BYTE (sixteen_bytes) ;
 					break ;
 
 			case '4' : /* 4 byte value with the current endian-ness */
 					intptr = va_arg (argptr, unsigned int*) ;
 					*intptr = 0 ;
 					ucptr = (unsigned char*) intptr ;
 					byte_count += header_read (psf, ucptr, sizeof (int)) ;
 					if (psf->rwf_endian == SF_ENDIAN_BIG)
 						*intptr = psf_get_be32 (ucptr, 0) ;
 					else
 						*intptr = psf_get_le32 (ucptr, 0) ;
 					break ;
 
 			case '8' : /* 8 byte value with the current endian-ness */
 					countptr = va_arg (argptr, sf_count_t *) ;
 					*countptr = 0 ;
 					byte_count += header_read (psf, sixteen_bytes, 8) ;
 					if (psf->rwf_endian == SF_ENDIAN_BIG)
 						countdata = psf_get_be64 (sixteen_bytes, 0) ;
 					else
 						countdata = psf_get_le64 (sixteen_bytes, 0) ;
 					*countptr = countdata ;
 					break ;
 
 			case 'f' : /* Float conversion */
 					floatptr = va_arg (argptr, float *) ;
 					*floatptr = 0.0 ;
 					byte_count += header_read (psf, floatptr, sizeof (float)) ;
 					if (psf->rwf_endian == SF_ENDIAN_BIG)
 						*floatptr = float32_be_read ((unsigned char*) floatptr) ;
 					else
 						*floatptr = float32_le_read ((unsigned char*) floatptr) ;
 					break ;
 
 			case 'd' : /* double conversion */
 					doubleptr = va_arg (argptr, double *) ;
 					*doubleptr = 0.0 ;
 					byte_count += header_read (psf, doubleptr, sizeof (double)) ;
 					if (psf->rwf_endian == SF_ENDIAN_BIG)
 						*doubleptr = double64_be_read ((unsigned char*) doubleptr) ;
 					else
 						*doubleptr = double64_le_read ((unsigned char*) doubleptr) ;
 					break ;
 
 			case 's' :
 					psf_log_printf (psf, "Format conversion 's' not implemented yet.\n") ;
 					/*
 					strptr = va_arg (argptr, char *) ;
 					size   = strlen (strptr) + 1 ;
 					size  += (size & 1) ;
 					longdata = H2LE_32 (size) ;
 					get_int (psf, longdata) ;
 					memcpy (&(psf->header.ptr [psf->header.indx]), strptr, size) ;
 					psf->header.indx += size ;
 					*/
 					break ;
 
 			case 'b' : /* Raw bytes */
 					charptr = va_arg (argptr, char*) ;
 					count = va_arg (argptr, size_t) ;
 					memset (charptr, 0, count) ;
 					byte_count += header_read (psf, charptr, count) ;
 					break ;
 
 			case 'G' :
 					charptr = va_arg (argptr, char*) ;
 					count = va_arg (argptr, size_t) ;
 					memset (charptr, 0, count) ;
 
 					if (psf->header.indx + count >= psf->header.len && psf_bump_header_allocation (psf, count))
 						break ;
 
 					byte_count += header_gets (psf, charptr, count) ;
 					break ;
 
 			case 'z' :
 					psf_log_printf (psf, "Format conversion 'z' not implemented yet.\n") ;
 					/*
 					size    = va_arg (argptr, size_t) ;
 					while (size)
 					{	psf->header.ptr [psf->header.indx] = 0 ;
 						psf->header.indx ++ ;
 						size -- ;
 						} ;
 					*/
 					break ;
 
 			case 'p' :	/* Seek to position from start. */
 					count = va_arg (argptr, size_t) ;
 					header_seek (psf, count, SEEK_SET) ;
 					byte_count = count ;
 					break ;
 
 			case 'j' :	/* Seek to position from current position. */
 					count = va_arg (argptr, size_t) ;
 					header_seek (psf, count, SEEK_CUR) ;
 					byte_count += count ;
 					break ;
 
 			case '!' : /* Clear buffer, forcing re-read. */
 					psf->header.end = psf->header.indx = 0 ;
 					break ;
 
 			default :
 				psf_log_printf (psf, "*** Invalid format specifier `%c'\n", c) ;
 				psf->error = SFE_INTERNAL ;
 				break ;
 			} ;
 		} ;
 
 	va_end (argptr) ;
 
 	return byte_count ;
 } /* psf_binheader_readf */
 
 /*-----------------------------------------------------------------------------------------------
 */
