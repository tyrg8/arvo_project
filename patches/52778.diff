commit b2ab692d87ec8a8fac20b7d8cc92653504bb6aaf
Author: Nikolay Degterinsky <evillique@gmail.com>
Date:   Thu Oct 27 10:03:03 2022 +0000

    Safer getResult()

diff --git a/src/Parsers/ExpressionListParsers.cpp b/src/Parsers/ExpressionListParsers.cpp
index 2f39162e104..c362340d013 100644
--- a/src/Parsers/ExpressionListParsers.cpp
+++ b/src/Parsers/ExpressionListParsers.cpp
@@ -518,237 +518,245 @@ class Layer
 {
 public:
     explicit Layer(bool allow_alias_ = true, bool allow_alias_without_as_keyword_ = false) :
         allow_alias(allow_alias_), allow_alias_without_as_keyword(allow_alias_without_as_keyword_) {}
 
     virtual ~Layer() = default;
 
     bool popOperator(Operator & op)
     {
         if (operators.empty())
             return false;
 
         op = std::move(operators.back());
         operators.pop_back();
 
         return true;
     }
 
     void pushOperator(Operator op)
     {
         operators.push_back(std::move(op));
     }
 
     bool popOperand(ASTPtr & op)
     {
         if (operands.empty())
             return false;
 
         op = std::move(operands.back());
         operands.pop_back();
 
         return true;
     }
 
     void pushOperand(ASTPtr op)
     {
         operands.push_back(std::move(op));
     }
 
     void pushResult(ASTPtr op)
     {
         elements.push_back(std::move(op));
     }
 
     virtual bool getResult(ASTPtr & node)
     {
-        if (elements.size() == 1)
-        {
-            node = std::move(elements[0]);
-            return true;
-        }
+        if (!finished)
+            return false;
 
-        return false;
+        return getResultImpl(node);
     }
 
     virtual bool parse(IParser::Pos & /*pos*/, Expected & /*expected*/, Action & /*action*/) = 0;
 
     bool isFinished() const
     {
         return finished;
     }
 
     int previousPriority() const
     {
         if (operators.empty())
             return 0;
 
         return operators.back().priority;
     }
 
     OperatorType previousType() const
     {
         if (operators.empty())
             return OperatorType::None;
 
         return operators.back().type;
     }
 
     int isCurrentElementEmpty() const
     {
         return operators.empty() && operands.empty();
     }
 
     bool popLastNOperands(ASTs & asts, size_t n)
     {
         if (n > operands.size())
             return false;
 
         asts.reserve(asts.size() + n);
 
         auto start = operands.begin() + operands.size() - n;
         asts.insert(asts.end(), std::make_move_iterator(start), std::make_move_iterator(operands.end()));
         operands.erase(start, operands.end());
 
         return true;
     }
 
     /// Merge operators and operands into a single element (column), then push it to 'elements' vector.
     ///  Operators are previously sorted in ascending order of priority
     ///  (operator with priority 1 has higher priority than operator with priority 2),
     ///  so we can just merge them with operands starting from the end.
     ///
     /// If we fail here it means that the query was incorrect and we should return an error.
     ///
     bool mergeElement(bool push_to_elements = true)
     {
         parsed_alias = false;
 
         Operator cur_op;
         while (popOperator(cur_op))
         {
             ASTPtr function;
 
             // We should not meet the starting part of the operator while finishing an element
             if (cur_op.type == OperatorType::StartIf ||
                 cur_op.type == OperatorType::StartBetween ||
                 cur_op.type == OperatorType::StartNotBetween)
                 return false;
 
             if (cur_op.type == OperatorType::FinishIf)
             {
                 Operator tmp;
                 if (!popOperator(tmp) || tmp.type != OperatorType::StartIf)
                     return false;
             }
 
             if (cur_op.type == OperatorType::FinishBetween)
             {
                 Operator tmp_op;
                 if (!popOperator(tmp_op))
                     return false;
 
                 if (tmp_op.type != OperatorType::StartBetween && tmp_op.type != OperatorType::StartNotBetween)
                     return false;
 
                 bool negative = tmp_op.type == OperatorType::StartNotBetween;
 
                 ASTs arguments;
                 if (!popLastNOperands(arguments, 3))
                     return false;
 
                 function = makeBetweenOperator(negative, arguments);
             }
             else
             {
                 function = makeASTFunction(cur_op);
 
                 if (!popLastNOperands(function->children[0]->children, cur_op.arity))
                     return false;
             }
 
             pushOperand(function);
         }
 
         ASTPtr node;
         if (!popOperand(node))
             return false;
 
         bool res = isCurrentElementEmpty();
 
         if (push_to_elements)
             pushResult(node);
         else
             pushOperand(node);
 
         return res;
     }
 
     bool parseLambda()
     {
         // 0. If empty - create function tuple with 0 args
         if (isCurrentElementEmpty())
         {
             auto function = makeASTFunction("tuple");
             pushOperand(function);
             return true;
         }
 
         if (operands.size() != 1 || !operators.empty() || !mergeElement())
             return false;
 
         /// 1. If there is already tuple do nothing
         if (tryGetFunctionName(elements.back()) == "tuple")
         {
             pushOperand(elements.back());
             elements.pop_back();
         }
         /// 2. Put all elements in a single tuple
         else
         {
             auto function = makeASTFunction("tuple", elements);
             elements.clear();
             pushOperand(function);
         }
         return true;
     }
 
     /// Put 'node' identifier into the last operand as its alias
     bool insertAlias(ASTPtr node)
     {
         if (!mergeElement(false))
             return false;
 
         if (operands.empty())
             return false;
 
         if (auto * ast_with_alias = dynamic_cast<ASTWithAlias *>(operands.back().get()))
         {
             tryGetIdentifierNameInto(node, ast_with_alias->alias);
             return true;
         }
 
         return false;
     }
 
     bool is_table_function = false;
 
     /// 'AND' in operator '... BETWEEN ... AND ...'  mirrors logical operator 'AND'.
     ///  In order to distinguish them we keep a counter of BETWEENs without matching ANDs.
     int between_counter = 0;
 
     /// Flag we set when we parsed alias to avoid parsing next element as alias
     bool parsed_alias = false;
 
     bool allow_alias = true;
     bool allow_alias_without_as_keyword = true;
 
     std::optional<std::pair<IParser::Pos, Checkpoint>> saved_checkpoint;
     Checkpoint current_checkpoint = Checkpoint::None;
 
 protected:
+    virtual bool getResultImpl(ASTPtr & node)
+    {
+        if (elements.size() == 1)
+        {
+            node = std::move(elements[0]);
+            return true;
+        }
+
+        return false;
+    }
+
     std::vector<Operator> operators;
     ASTs operands;
     ASTs elements;
     bool finished = false;
     int state = 0;
 };
@@ -758,38 +766,33 @@ class ExpressionLayer : public Layer
 {
 public:
 
     explicit ExpressionLayer(bool is_table_function_) : Layer(false, false)
     {
         is_table_function = is_table_function_;
     }
 
     bool getResult(ASTPtr & node) override
     {
         /// We can exit the main cycle outside the parse() function,
-        ///  so we need to merge the element here
+        ///  so we need to merge the element here.
+        /// Because of this 'finished' flag can also not be set.
         if (!mergeElement())
             return false;
 
-        if (elements.size() == 1)
-        {
-            node = std::move(elements[0]);
-            return true;
-        }
-
-        return false;
+        return Layer::getResultImpl(node);
     }
 
     bool parse(IParser::Pos & pos, Expected & /*expected*/, Action & /*action*/) override
     {
         if (pos->type == TokenType::Comma)
             finished = true;
 
         return true;
     }
 };
 
 /// Basic layer for a function with certain separator and end tokens:
 ///  1. If we parse a separator we should merge current operands and operators
 ///     into one element and push in to 'elements' vector.
 ///  2. If we parse an ending token, we should merge everything as in (1) and
 ///     also set 'finished' flag.
@@ -828,196 +831,186 @@ class FunctionLayer : public Layer
 {
 public:
     explicit FunctionLayer(String function_name_, bool allow_function_parameters_ = true)
         : function_name(function_name_), allow_function_parameters(allow_function_parameters_){}
 
-    bool getResult(ASTPtr & node) override
-    {
-        // FunctionLayer can be the only layer in our Layers stack,
-        //  so we need to check that we exited the main cycle properly
-        if (!finished)
-            return false;
-
-        return Layer::getResult(node);
-    }
-
     bool parse(IParser::Pos & pos, Expected & expected, Action & action) override
     {
         ///   | 0 |      1      |     2    |
         ///  f(ALL ...)(ALL ...) FILTER ...
         ///
         /// 0. Parse ALL and DISTINCT qualifiers (-> 1)
         /// 1. Parse all the arguments and ending token (-> 2), possibly with parameters list (-> 1)
         /// 2. Create function, possibly parse FILTER and OVER window definitions (finished)
 
         if (state == 0)
         {
             state = 1;
 
             auto pos_after_bracket = pos;
             auto old_expected = expected;
 
             ParserKeyword all("ALL");
             ParserKeyword distinct("DISTINCT");
 
             if (all.ignore(pos, expected))
                 has_all = true;
 
             if (distinct.ignore(pos, expected))
                 has_distinct = true;
 
             if (!has_all && all.ignore(pos, expected))
                 has_all = true;
 
             if (has_all && has_distinct)
                 return false;
 
             if (has_all || has_distinct)
             {
                 /// case f(ALL), f(ALL, x), f(DISTINCT), f(DISTINCT, x), ALL and DISTINCT should be treat as identifier
                 if (pos->type == TokenType::Comma || pos->type == TokenType::ClosingRoundBracket)
                 {
                     pos = pos_after_bracket;
                     expected = old_expected;
                     has_all = false;
                     has_distinct = false;
                 }
             }
 
             contents_begin = pos->begin;
         }
 
         if (state == 1)
         {
             if (ParserToken(TokenType::Comma).ignore(pos, expected))
             {
                 action = Action::OPERAND;
                 return mergeElement();
             }
 
             if (ParserToken(TokenType::ClosingRoundBracket).ignore(pos, expected))
             {
                 action = Action::OPERATOR;
 
                 if (!isCurrentElementEmpty() || !elements.empty())
                     if (!mergeElement())
                         return false;
 
                 contents_end = pos->begin;
 
                 /** Check for a common error case - often due to the complexity of quoting command-line arguments,
                  *  an expression of the form toDate(2014-01-01) appears in the query instead of toDate('2014-01-01').
                  * If you do not report that the first option is an error, then the argument will be interpreted as 2014 - 01 - 01 - some number,
                  *  and the query silently returns an unexpected elements.
                  */
                 if (function_name == "toDate"
                     && contents_end - contents_begin == strlen("2014-01-01")
                     && contents_begin[0] >= '2' && contents_begin[0] <= '3'
                     && contents_begin[1] >= '0' && contents_begin[1] <= '9'
                     && contents_begin[2] >= '0' && contents_begin[2] <= '9'
                     && contents_begin[3] >= '0' && contents_begin[3] <= '9'
                     && contents_begin[4] == '-'
                     && contents_begin[5] >= '0' && contents_begin[5] <= '9'
                     && contents_begin[6] >= '0' && contents_begin[6] <= '9'
                     && contents_begin[7] == '-'
                     && contents_begin[8] >= '0' && contents_begin[8] <= '9'
                     && contents_begin[9] >= '0' && contents_begin[9] <= '9')
                 {
                     std::string contents_str(contents_begin, contents_end - contents_begin);
                     throw Exception("Argument of function toDate is unquoted: toDate(" + contents_str + "), must be: toDate('" + contents_str + "')"
                         , ErrorCodes::SYNTAX_ERROR);
                 }
 
                 if (allow_function_parameters && ParserToken(TokenType::OpeningRoundBracket).ignore(pos, expected))
                 {
                     parameters = std::make_shared<ASTExpressionList>();
                     std::swap(parameters->children, elements);
                     action = Action::OPERAND;
 
                     /// Parametric aggregate functions cannot have DISTINCT in parameters list.
                     if (has_distinct)
                         return false;
 
                     auto pos_after_bracket = pos;
                     auto old_expected = expected;
 
                     ParserKeyword all("ALL");
                     ParserKeyword distinct("DISTINCT");
 
                     if (all.ignore(pos, expected))
                         has_all = true;
 
                     if (distinct.ignore(pos, expected))
                         has_distinct = true;
 
                     if (!has_all && all.ignore(pos, expected))
                         has_all = true;
 
                     if (has_all && has_distinct)
                         return false;
 
                     if (has_all || has_distinct)
                     {
                         /// case f(ALL), f(ALL, x), f(DISTINCT), f(DISTINCT, x), ALL and DISTINCT should be treat as identifier
                         if (pos->type == TokenType::Comma || pos->type == TokenType::ClosingRoundBracket)
                         {
                             pos = pos_after_bracket;
                             expected = old_expected;
                             has_distinct = false;
                         }
                     }
                 }
                 else
                 {
                     state = 2;
                 }
             }
         }
 
         if (state == 2)
         {
             if (has_distinct)
                 function_name += "Distinct";
 
             auto function_node = makeASTFunction(function_name, std::move(elements));
 
             if (parameters)
             {
                 function_node->parameters = std::move(parameters);
                 function_node->children.push_back(function_node->parameters);
             }
 
             ParserKeyword filter("FILTER");
             ParserKeyword over("OVER");
 
             if (filter.ignore(pos, expected))
             {
                 // We are slightly breaking the parser interface by parsing the window
                 // definition into an existing ASTFunction. Normally it would take a
                 // reference to ASTPtr and assign it the new node. We only have a pointer
                 // of a different type, hence this workaround with a temporary pointer.
                 ASTPtr function_node_as_iast = function_node;
 
                 // Recursion
                 ParserFilterClause filter_parser;
                 if (!filter_parser.parse(pos, function_node_as_iast, expected))
                     return false;
             }
 
             if (over.ignore(pos, expected))
             {
                 function_node->is_window_function = true;
 
                 ASTPtr function_node_as_iast = function_node;
 
                 // Recursion
                 ParserWindowReference window_reference;
                 if (!window_reference.parse(pos, function_node_as_iast, expected))
                     return false;
             }
 
             elements = {std::move(function_node)};
             finished = true;
         }
 
         return true;
     }
@@ -1039,46 +1032,48 @@ private:
 class RoundBracketsLayer : public Layer
 {
 public:
-    bool getResult(ASTPtr & node) override
-    {
-        // Round brackets can mean priority operator as well as function tuple()
-        if (!is_tuple && elements.size() == 1)
-            node = std::move(elements[0]);
-        else
-            node = makeASTFunction("tuple", std::move(elements));
-
-        return true;
-    }
-
     bool parse(IParser::Pos & pos, Expected & expected, Action & action) override
     {
         if (ParserToken(TokenType::Comma).ignore(pos, expected))
         {
             action = Action::OPERAND;
             is_tuple = true;
             if (!mergeElement())
                 return false;
         }
 
         if (ParserToken(TokenType::ClosingRoundBracket).ignore(pos, expected))
         {
             action = Action::OPERATOR;
 
             if (!isCurrentElementEmpty())
                 if (!mergeElement())
                     return false;
 
             // Special case for (('a', 'b')) -> tuple(('a', 'b'))
             if (!is_tuple && elements.size() == 1)
                 if (auto * literal = elements[0]->as<ASTLiteral>())
                     if (literal->value.getType() == Field::Types::Tuple)
                         is_tuple = true;
 
             finished = true;
         }
 
         return true;
     }
+
+protected:
+    bool getResultImpl(ASTPtr & node) override
+    {
+        // Round brackets can mean priority operator as well as function tuple()
+        if (!is_tuple && elements.size() == 1)
+            node = std::move(elements[0]);
+        else
+            node = makeASTFunction("tuple", std::move(elements));
+
+        return true;
+    }
+
 private:
     bool is_tuple = false;
 };
@@ -1087,18 +1082,19 @@ private:
 class ArrayLayer : public LayerWithSeparator<TokenType::Comma, TokenType::ClosingSquareBracket>
 {
 public:
-    bool getResult(ASTPtr & node) override
+    bool parse(IParser::Pos & pos, Expected & expected, Action & action) override
     {
-        node = makeASTFunction("array", std::move(elements));
-        return true;
+        return LayerWithSeparator::parse(pos, expected, action);
     }
 
-    bool parse(IParser::Pos & pos, Expected & expected, Action & action) override
+protected:
+    bool getResultImpl(ASTPtr & node) override
     {
-        return LayerWithSeparator::parse(pos, expected, action);
+        node = makeASTFunction("array", std::move(elements));
+        return true;
     }
 };
 
 /// Layer for arrayElement square brackets operator
 ///  This layer does not create a function, it is only needed to parse closing token
 ///  and return only one element.
@@ -1215,69 +1211,71 @@ class ExtractLayer : public LayerWithSeparator<TokenType::Comma, TokenType::Clos
 {
 public:
     ExtractLayer() : LayerWithSeparator(/*allow_alias*/ true, /*allow_alias_without_as_keyword*/ true) {}
 
-    bool getResult(ASTPtr & node) override
-    {
-        if (state == 2)
-        {
-            if (elements.empty())
-                return false;
-
-            node = makeASTFunction(interval_kind.toNameOfFunctionExtractTimePart(), elements[0]);
-        }
-        else
-        {
-            node = makeASTFunction("extract", std::move(elements));
-        }
-
-        return true;
-    }
-
     bool parse(IParser::Pos & pos, Expected & expected, Action & action) override
     {
         /// extract(haystack, pattern) or EXTRACT(DAY FROM Date)
         ///
         /// 0. If we parse interval_kind and 'FROM' keyword (-> 2), otherwise (-> 1)
         /// 1. Basic parser
         /// 2. Parse closing bracket (finished)
 
         if (state == 0)
         {
             IParser::Pos begin = pos;
             ParserKeyword s_from("FROM");
 
             if (parseIntervalKind(pos, expected, interval_kind) && s_from.ignore(pos, expected))
             {
                 state = 2;
                 return true;
             }
             else
             {
                 state = 1;
                 pos = begin;
             }
         }
 
         if (state == 1)
         {
             return LayerWithSeparator::parse(pos, expected, action);
         }
 
         if (state == 2)
         {
             if (ParserToken(TokenType::ClosingRoundBracket).ignore(pos, expected))
             {
                 if (!mergeElement())
                     return false;
 
                 finished = true;
                 return true;
             }
         }
 
         return true;
     }
 
+protected:
+    bool getResultImpl(ASTPtr & node) override
+    {
+        if (state == 2)
+        {
+            if (elements.empty())
+                return false;
+
+            node = makeASTFunction(interval_kind.toNameOfFunctionExtractTimePart(), elements[0]);
+        }
+        else
+        {
+            node = makeASTFunction("extract", std::move(elements));
+        }
+
+        return true;
+    }
+
+
 private:
     IntervalKind interval_kind;
 };
@@ -1286,62 +1284,63 @@ class SubstringLayer : public Layer
 {
 public:
     SubstringLayer() : Layer(/*allow_alias*/ true, /*allow_alias_without_as_keyword*/ true) {}
 
-    bool getResult(ASTPtr & node) override
-    {
-        node = makeASTFunction("substring", std::move(elements));
-        return true;
-    }
-
     bool parse(IParser::Pos & pos, Expected & expected, Action & action) override
     {
         /// Either SUBSTRING(expr FROM start [FOR length]) or SUBSTRING(expr, start, length)
         ///
         /// 0: Parse first separator: FROM or comma (-> 1)
         /// 1: Parse second separator: FOR or comma (-> 2)
         /// 1 or 2: Parse closing bracket (finished)
 
         if (state == 0)
         {
             if (ParserToken(TokenType::Comma).ignore(pos, expected) ||
                 ParserKeyword("FROM").ignore(pos, expected))
             {
                 action = Action::OPERAND;
 
                 if (!mergeElement())
                     return false;
 
                 state = 1;
             }
         }
 
         if (state == 1)
         {
             if (ParserToken(TokenType::Comma).ignore(pos, expected) ||
                 ParserKeyword("FOR").ignore(pos, expected))
             {
                 action = Action::OPERAND;
 
                 if (!mergeElement())
                     return false;
 
                 state = 2;
             }
         }
 
         if (state == 1 || state == 2)
         {
             if (ParserToken(TokenType::ClosingRoundBracket).ignore(pos, expected))
             {
                 if (!mergeElement())
                     return false;
 
                 finished = true;
             }
         }
 
         return true;
     }
+
+protected:
+    bool getResultImpl(ASTPtr & node) override
+    {
+        node = makeASTFunction("substring", std::move(elements));
+        return true;
+    }
 };
 
 class PositionLayer : public Layer
@@ -1348,70 +1347,71 @@ class PositionLayer : public Layer
 {
 public:
     PositionLayer() : Layer(/*allow_alias*/ true, /*allow_alias_without_as_keyword*/ true) {}
 
-    bool getResult(ASTPtr & node) override
-    {
-        if (state == 2)
-            std::swap(elements[1], elements[0]);
-
-        node = makeASTFunction("position", std::move(elements));
-        return true;
-    }
-
     bool parse(IParser::Pos & pos, Expected & expected, Action & action) override
     {
         /// position(haystack, needle[, start_pos]) or position(needle IN haystack)
         ///
         /// 0: Parse separator: comma (-> 1) or IN (-> 2)
         /// 1: Parse second separator: comma
         /// 1 or 2: Parse closing bracket (finished)
 
         if (state == 0)
         {
             if (ParserToken(TokenType::Comma).ignore(pos, expected))
             {
                 action = Action::OPERAND;
 
                 if (!mergeElement())
                     return false;
 
                 state = 1;
             }
             if (ParserKeyword("IN").ignore(pos, expected))
             {
                 action = Action::OPERAND;
 
                 if (!mergeElement())
                     return false;
 
                 state = 2;
             }
         }
 
         if (state == 1)
         {
             if (ParserToken(TokenType::Comma).ignore(pos, expected))
             {
                 action = Action::OPERAND;
 
                 if (!mergeElement())
                     return false;
             }
         }
 
         if (state == 1 || state == 2)
         {
             if (ParserToken(TokenType::ClosingRoundBracket).ignore(pos, expected))
             {
                 if (!mergeElement())
                     return false;
 
                 finished = true;
             }
         }
 
         return true;
     }
+
+protected:
+    bool getResultImpl(ASTPtr & node) override
+    {
+        if (state == 2)
+            std::swap(elements[1], elements[0]);
+
+        node = makeASTFunction("position", std::move(elements));
+        return true;
+    }
 };
 
 class ExistsLayer : public Layer
@@ -1444,155 +1444,157 @@ class TrimLayer : public Layer
 {
 public:
     TrimLayer(bool trim_left_, bool trim_right_)
         : Layer(/*allow_alias*/ true, /*allow_alias_without_as_keyword*/ true), trim_left(trim_left_), trim_right(trim_right_) {}
 
-    bool getResult(ASTPtr & node) override
-    {
-        node = makeASTFunction(function_name, std::move(elements));
-        return true;
-    }
-
     bool parse(IParser::Pos & pos, Expected & expected, Action & action) override
     {
         /// Handles all possible TRIM/LTRIM/RTRIM call variants
         ///
         /// 0: If flags 'trim_left' and 'trim_right' are set (-> 2).
         ///    If not, try to parse 'BOTH', 'LEADING', 'TRAILING' keywords,
         ///    then if char_override (-> 1), else (-> 2)
         /// 1. Parse 'FROM' keyword (-> 2)
         /// 2. Parse closing token, choose name, add arguments (finished)
 
         if (state == 0)
         {
             if (!trim_left && !trim_right)
             {
                 if (ParserKeyword("BOTH").ignore(pos, expected))
                 {
                     trim_left = true;
                     trim_right = true;
                     char_override = true;
                 }
                 else if (ParserKeyword("LEADING").ignore(pos, expected))
                 {
                     trim_left = true;
                     char_override = true;
                 }
                 else if (ParserKeyword("TRAILING").ignore(pos, expected))
                 {
                     trim_right = true;
                     char_override = true;
                 }
                 else
                 {
                     trim_left = true;
                     trim_right = true;
                 }
 
                 if (char_override)
                     state = 1;
                 else
                     state = 2;
             }
             else
             {
                 state = 2;
             }
         }
 
         if (state == 1)
         {
             if (ParserKeyword("FROM").ignore(pos, expected))
             {
                 action = Action::OPERAND;
 
                 if (!mergeElement())
                     return false;
 
                 to_remove = makeASTFunction("regexpQuoteMeta", elements[0]);
                 elements.clear();
                 state = 2;
             }
         }
 
         if (state == 2)
         {
             if (ParserToken(TokenType::ClosingRoundBracket).ignore(pos, expected))
             {
                 if (!mergeElement())
                     return false;
 
                 ASTPtr pattern_node;
 
                 if (char_override)
                 {
                     auto pattern_func_node = std::make_shared<ASTFunction>();
                     auto pattern_list_args = std::make_shared<ASTExpressionList>();
                     if (trim_left && trim_right)
                     {
                         pattern_list_args->children = {
                             std::make_shared<ASTLiteral>("^["),
                             to_remove,
                             std::make_shared<ASTLiteral>("]+|["),
                             to_remove,
                             std::make_shared<ASTLiteral>("]+$")
                         };
                         function_name = "replaceRegexpAll";
                     }
                     else
                     {
                         if (trim_left)
                         {
                             pattern_list_args->children = {
                                 std::make_shared<ASTLiteral>("^["),
                                 to_remove,
                                 std::make_shared<ASTLiteral>("]+")
                             };
                         }
                         else
                         {
                             /// trim_right == false not possible
                             pattern_list_args->children = {
                                 std::make_shared<ASTLiteral>("["),
                                 to_remove,
                                 std::make_shared<ASTLiteral>("]+$")
                             };
                         }
                         function_name = "replaceRegexpOne";
                     }
 
                     pattern_func_node->name = "concat";
                     pattern_func_node->arguments = std::move(pattern_list_args);
                     pattern_func_node->children.push_back(pattern_func_node->arguments);
 
                     pattern_node = std::move(pattern_func_node);
                 }
                 else
                 {
                     if (trim_left && trim_right)
                     {
                         function_name = "trimBoth";
                     }
                     else
                     {
                         if (trim_left)
                             function_name = "trimLeft";
                         else
                             function_name = "trimRight";
                     }
                 }
 
                 if (char_override)
                 {
                     elements.push_back(pattern_node);
                     elements.push_back(std::make_shared<ASTLiteral>(""));
                 }
 
                 finished = true;
             }
         }
 
         return true;
     }
+
+protected:
+    bool getResultImpl(ASTPtr & node) override
+    {
+        node = makeASTFunction(function_name, std::move(elements));
+        return true;
+    }
+
 private:
     bool trim_left;
     bool trim_right;
@@ -1606,54 +1608,54 @@ class DateAddLayer : public LayerWithSeparator<TokenType::Comma, TokenType::Clos
 {
 public:
     explicit DateAddLayer(const char * function_name_)
         : LayerWithSeparator(/*allow_alias*/ true, /*allow_alias_without_as_keyword*/ true), function_name(function_name_) {}
 
-    bool getResult(ASTPtr & node) override
-    {
-        if (parsed_interval_kind)
-        {
-            if (elements.size() < 2)
-                return false;
-
-            elements[0] = makeASTFunction(interval_kind.toNameOfFunctionToIntervalDataType(), elements[0]);
-            node = makeASTFunction(function_name, elements[1], elements[0]);
-        }
-        else
-            node = makeASTFunction(function_name, std::move(elements));
-
-        return true;
-    }
-
-
     bool parse(IParser::Pos & pos, Expected & expected, Action & action) override
     {
         /// DATEADD(YEAR, 1, date) or DATEADD(INTERVAL 1 YEAR, date);
         ///
         /// 0. Try to parse interval_kind (-> 1)
         /// 1. Basic parser
 
         if (state == 0)
         {
             if (parseIntervalKind(pos, expected, interval_kind))
             {
                 if (!ParserToken(TokenType::Comma).ignore(pos, expected))
                     return false;
 
                 action = Action::OPERAND;
                 parsed_interval_kind = true;
             }
 
             state = 1;
         }
 
         if (state == 1)
         {
             return LayerWithSeparator::parse(pos, expected, action);
         }
 
         return true;
     }
 
+protected:
+    bool getResultImpl(ASTPtr & node) override
+    {
+        if (parsed_interval_kind)
+        {
+            if (elements.size() < 2)
+                return false;
+
+            elements[0] = makeASTFunction(interval_kind.toNameOfFunctionToIntervalDataType(), elements[0]);
+            node = makeASTFunction(function_name, elements[1], elements[0]);
+        }
+        else
+            node = makeASTFunction(function_name, std::move(elements));
+
+        return true;
+    }
+
 private:
     IntervalKind interval_kind;
     const char * function_name;
@@ -1664,51 +1666,52 @@ class DateDiffLayer : public LayerWithSeparator<TokenType::Comma, TokenType::Clo
 {
 public:
     DateDiffLayer() : LayerWithSeparator(/*allow_alias*/ true, /*allow_alias_without_as_keyword*/ true) {}
 
-    bool getResult(ASTPtr & node) override
-    {
-        if (parsed_interval_kind)
-        {
-            if (elements.size() == 2)
-                node = makeASTFunction("dateDiff", std::make_shared<ASTLiteral>(interval_kind.toDateDiffUnit()), elements[0], elements[1]);
-            else if (elements.size() == 3)
-                node = makeASTFunction("dateDiff", std::make_shared<ASTLiteral>(interval_kind.toDateDiffUnit()), elements[0], elements[1], elements[2]);
-            else
-                return false;
-        }
-        else
-        {
-            node = makeASTFunction("dateDiff", std::move(elements));
-        }
-        return true;
-    }
-
     bool parse(IParser::Pos & pos, Expected & expected, Action & action) override
     {
         /// 0. Try to parse interval_kind (-> 1)
         /// 1. Basic parser
 
         if (state == 0)
         {
             if (parseIntervalKind(pos, expected, interval_kind))
             {
                 parsed_interval_kind = true;
 
                 if (!ParserToken(TokenType::Comma).ignore(pos, expected))
                     return false;
             }
 
             state = 1;
         }
 
         if (state == 1)
         {
             return LayerWithSeparator::parse(pos, expected, action);
         }
 
         return true;
     }
 
+protected:
+    bool getResultImpl(ASTPtr & node) override
+    {
+        if (parsed_interval_kind)
+        {
+            if (elements.size() == 2)
+                node = makeASTFunction("dateDiff", std::make_shared<ASTLiteral>(interval_kind.toDateDiffUnit()), elements[0], elements[1]);
+            else if (elements.size() == 3)
+                node = makeASTFunction("dateDiff", std::make_shared<ASTLiteral>(interval_kind.toDateDiffUnit()), elements[0], elements[1], elements[2]);
+            else
+                return false;
+        }
+        else
+        {
+            node = makeASTFunction("dateDiff", std::move(elements));
+        }
+        return true;
+    }
+
 private:
     IntervalKind interval_kind;
     bool parsed_interval_kind = false;
@@ -1891,73 +1894,74 @@ class ViewLayer : public Layer
 {
 public:
     explicit ViewLayer(bool if_permitted_) : if_permitted(if_permitted_) {}
 
-    bool getResult(ASTPtr & node) override
-    {
-        if (if_permitted)
-            node = makeASTFunction("viewIfPermitted", std::move(elements));
-        else
-            node = makeASTFunction("view", std::move(elements));
-
-        return true;
-    }
-
     bool parse(IParser::Pos & pos, Expected & expected, Action & /*action*/) override
     {
         /// view(SELECT ...)
         /// viewIfPermitted(SELECT ... ELSE func(...))
         ///
         /// 0. Parse the SELECT query and if 'if_permitted' parse 'ELSE' keyword (-> 1) else (finished)
         /// 1. Parse closing token
 
         if (state == 0)
         {
             ASTPtr query;
 
             bool maybe_an_subquery = pos->type == TokenType::OpeningRoundBracket;
 
             if (!ParserSelectWithUnionQuery().parse(pos, query, expected))
                 return false;
 
             auto & select_ast = query->as<ASTSelectWithUnionQuery &>();
             if (select_ast.list_of_selects->children.size() == 1 && maybe_an_subquery)
             {
                 // It's an subquery. Bail out.
                 return false;
             }
 
             pushResult(query);
 
             if (!if_permitted)
             {
                 if (!ParserToken(TokenType::ClosingRoundBracket).ignore(pos, expected))
                     return false;
 
                 finished = true;
                 return true;
             }
 
             if (!ParserKeyword{"ELSE"}.ignore(pos, expected))
                 return false;
 
             state = 1;
             return true;
         }
 
         if (state == 1)
         {
             if (ParserToken(TokenType::ClosingRoundBracket).ignore(pos, expected))
             {
                 if (!mergeElement())
                     return false;
 
                 finished = true;
             }
         }
 
         return true;
     }
 
+protected:
+    bool getResultImpl(ASTPtr & node) override
+    {
+        if (if_permitted)
+            node = makeASTFunction("viewIfPermitted", std::move(elements));
+        else
+            node = makeASTFunction("view", std::move(elements));
+
+        return true;
+    }
+
 private:
     bool if_permitted;
 };
