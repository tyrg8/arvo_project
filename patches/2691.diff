commit fd61eadd1686aa8a65772e040e50d3b7f3a0efb4
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Mon Jul 24 10:52:34 2017 +0000

    INGR: avoid excessive memory allocation. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=2694. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@39634 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/frmts/ingr/IntergraphBand.cpp b/gdal/frmts/ingr/IntergraphBand.cpp
index 288f3ff5ac..b00e123775 100644
--- a/gdal/frmts/ingr/IntergraphBand.cpp
+++ b/gdal/frmts/ingr/IntergraphBand.cpp
@@ -539,111 +539,122 @@ CPLErr IntergraphRGBBand::IReadBlock( int nBlockXOff,
 IntergraphRLEBand::IntergraphRLEBand( IntergraphDataset *poDSIn,
                                       int nBandIn,
                                       int nBandOffset,
                                       int nRGorB ) :
     IntergraphRasterBand( poDSIn, nBandIn, nBandOffset ),
     pabyRLEBlock(NULL),
     nRLESize(0),
     bRLEBlockLoaded(FALSE),
     panRLELineOffset(NULL)
 {
     nRGBIndex = static_cast<uint8>(nRGorB);
 
     if( pabyBlockBuf == NULL )
         return;
 
     if( !bTiled )
     {
         // ------------------------------------------------------------
         // Load all rows at once
         // ------------------------------------------------------------
 
         nFullBlocksX = 1;
 
         if( eFormat == RunLengthEncodedC || eFormat == RunLengthEncoded )
         {
             nBlockYSize = 1;
+            if( nRasterYSize > 1024 * 1024 )
+            {
+                VSIFSeekL( poDSIn->fp, 0, SEEK_END );
+                // At the very least 2 bytes per row (probably more)
+                if( VSIFTellL( poDSIn->fp ) / 2 <
+                                    static_cast<vsi_l_offset>(nRasterYSize) )
+                {
+                    CPLError(CE_Failure, CPLE_AppDefined, "File too short");
+                    return;
+                }
+            }
             panRLELineOffset = (uint32 *)
                 VSI_CALLOC_VERBOSE(sizeof(uint32),nRasterYSize);
             if( panRLELineOffset == NULL )
                 return;
             nFullBlocksY = nRasterYSize;
         }
         else
         {
             nBlockYSize  = nRasterYSize;
             nFullBlocksY = 1;
         }
 
         nRLESize = INGR_GetDataBlockSize( poDSIn->pszFilename,
                                           hHeaderTwo.CatenatedFilePointer,
                                           nDataOffset);
 
         if( nBlockYSize == 0 || nBlockXSize > INT_MAX / nBlockYSize )
         {
             CPLError(CE_Failure, CPLE_AppDefined, "Too big block size");
             return;
         }
         nBlockBufSize = nBlockXSize * nBlockYSize;
     }
     else
     {
         // ------------------------------------------------------------
         // Find the biggest tile
         // ------------------------------------------------------------
 
         for( uint32 iTiles = 0; iTiles < nTiles; iTiles++)
         {
             nRLESize = MAX( pahTiles[iTiles].Used, nRLESize );
         }
     }
 
     // ----------------------------------------------------------------
     // Reallocate the decompressed buffer.
     // ----------------------------------------------------------------
 
     if( eFormat == AdaptiveRGB ||
         eFormat == ContinuousTone )
     {
         if( nBlockBufSize > INT_MAX / 3 )
         {
             CPLError(CE_Failure, CPLE_AppDefined, "Too big block size");
             return;
         }
         nBlockBufSize *= 3;
     }
 
     CPLFree(pabyBlockBuf);
     pabyBlockBuf = NULL;
     if( nBlockBufSize > 0 )
         pabyBlockBuf = (GByte*) VSIMalloc( nBlockBufSize );
     if (pabyBlockBuf == NULL)
     {
         CPLError(CE_Failure, CPLE_AppDefined, "Cannot allocate %d bytes", nBlockBufSize);
     }
 
     // ----------------------------------------------------------------
     // Create a RLE buffer
     // ----------------------------------------------------------------
 
     if( nRLESize == 0 )
         pabyRLEBlock = (GByte*) VSIMalloc( 1 );
     else if( nRLESize < INT_MAX )
         pabyRLEBlock = (GByte*) VSIMalloc( nRLESize );
     if (pabyRLEBlock == NULL)
     {
         CPLError(CE_Failure, CPLE_AppDefined, "Cannot allocate %d bytes", nRLESize);
     }
 
     // ----------------------------------------------------------------
     // Set a black and white Color Table
     // ----------------------------------------------------------------
 
     if( eFormat == RunLengthEncoded )
     {
         BlackWhiteCT( true );
     }
 }
 
 //  ----------------------------------------------------------------------------
 //                                        IntergraphRLEBand::IntergraphRLEBand()
 //  ----------------------------------------------------------------------------
