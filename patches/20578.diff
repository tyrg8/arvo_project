commit c800e2987b10bb3af6ef644b515b5d6392f8861d
Author: Julius Pfrommer <julius.pfrommer@web.de>
Date:   Tue May 19 15:13:20 2020 +0200

    fix(json): Check max recursion depth in more places

diff --git a/src/ua_types_encoding_json.c b/src/ua_types_encoding_json.c
index eb8d70269..c0ced08ec 100644
--- a/src/ua_types_encoding_json.c
+++ b/src/ua_types_encoding_json.c
@@ -108,7 +108,9 @@ static WRITE_JSON_ELEMENT(Quote) {
 
 WRITE_JSON_ELEMENT(ObjStart) {
     /* increase depth, save: before first key-value no comma needed. */
+    if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)
+        return UA_STATUSCODE_BADENCODINGERROR;
     ctx->depth++;
     ctx->commaNeeded[ctx->depth] = false;
     return writeChar(ctx, '{');
 }
@@ -121,7 +123,10 @@ WRITE_JSON_ELEMENT(ObjEnd) {
 
 WRITE_JSON_ELEMENT(ArrStart) {
     /* increase depth, save: before first array entry no comma needed. */
-    ctx->commaNeeded[++ctx->depth] = false;
+    if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)
+        return UA_STATUSCODE_BADENCODINGERROR;
+    ctx->depth++;
+    ctx->commaNeeded[ctx->depth] = false;
     return writeChar(ctx, '[');
 }
 
@@ -1123,29 +1128,29 @@ static status
 addMultiArrayContentJSON(CtxJson *ctx, void* array, const UA_DataType *type, 
                          size_t *index, UA_UInt32 *arrayDimensions, size_t dimensionIndex, 
                          size_t dimensionSize) {
     /* Check the recursion limit */
-    if(ctx->depth > UA_JSON_ENCODING_MAX_RECURSION)
+    if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)
         return UA_STATUSCODE_BADENCODINGERROR;
     
     /* Stop recursion: The inner Arrays are written */
     status ret;
     if(dimensionIndex == (dimensionSize - 1)) {
         ret = encodeJsonArray(ctx, ((u8*)array) + (type->memSize * *index),
                               arrayDimensions[dimensionIndex], type);
         (*index) += arrayDimensions[dimensionIndex];
         return ret;
     }
 
     /* Recurse to the next dimension */
     ret = writeJsonArrStart(ctx);
     for(size_t i = 0; i < arrayDimensions[dimensionIndex]; i++) {
         ret |= writeJsonCommaIfNeeded(ctx);
         ret |= addMultiArrayContentJSON(ctx, array, type, index, arrayDimensions,
                                         dimensionIndex + 1, dimensionSize);
         ctx->commaNeeded[ctx->depth] = true;
         if(ret != UA_STATUSCODE_GOOD)
             return ret;
     }
     ret |= writeJsonArrEnd(ctx);
     return ret;
 }
@@ -1382,38 +1387,38 @@ ENCODE_JSON(DiagnosticInfo) {
 static status
 encodeJsonStructure(const void *src, const UA_DataType *type, CtxJson *ctx) {
     /* Check the recursion limit */
-    if(ctx->depth > UA_JSON_ENCODING_MAX_RECURSION)
+    if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)
         return UA_STATUSCODE_BADENCODINGERROR;
     ctx->depth++;
 
     status ret = writeJsonObjStart(ctx);
 
     uintptr_t ptr = (uintptr_t) src;
     u8 membersSize = type->membersSize;
     const UA_DataType * typelists[2] = {UA_TYPES, &type[-type->typeIndex]};
     for(size_t i = 0; i < membersSize && ret == UA_STATUSCODE_GOOD; ++i) {
         const UA_DataTypeMember *m = &type->members[i];
         const UA_DataType *mt = &typelists[!m->namespaceZero][m->memberTypeIndex];
 
         if(m->memberName != NULL && *m->memberName != 0)
             ret |= writeJsonKey(ctx, m->memberName);
 
         if(!m->isArray) {
             ptr += m->padding;
             size_t memSize = mt->memSize;
             ret |= encodeJsonJumpTable[mt->typeKind]((const void*) ptr, mt, ctx);
             ptr += memSize;
         } else {
             ptr += m->padding;
             const size_t length = *((const size_t*) ptr);
             ptr += sizeof (size_t);
             ret |= encodeJsonArray(ctx, *(void * const *)ptr, length, mt);
             ptr += sizeof (void*);
         }
     }
 
     ret |= writeJsonObjEnd(ctx);
 
     ctx->depth--;
     return ret;
 }
@@ -3152,43 +3157,43 @@ static status
 decodeJsonStructure(void *dst, const UA_DataType *type, CtxJson *ctx, 
                     ParseCtx *parseCtx, UA_Boolean moveToken) {
     (void) moveToken;
     /* Check the recursion limit */
-    if(ctx->depth > UA_JSON_ENCODING_MAX_RECURSION)
+    if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)
         return UA_STATUSCODE_BADENCODINGERROR;
     ctx->depth++;
 
     uintptr_t ptr = (uintptr_t)dst;
     status ret = UA_STATUSCODE_GOOD;
     u8 membersSize = type->membersSize;
     const UA_DataType *typelists[2] = { UA_TYPES, &type[-type->typeIndex] };
     
     UA_STACKARRAY(DecodeEntry, entries, membersSize);
 
     for(size_t i = 0; i < membersSize && ret == UA_STATUSCODE_GOOD; ++i) {
         const UA_DataTypeMember *m = &type->members[i];
         const UA_DataType *mt = &typelists[!m->namespaceZero][m->memberTypeIndex];
 
         entries[i].type = mt;
         if(!m->isArray) {
             ptr += m->padding;
             entries[i].fieldName = m->memberName;
             entries[i].fieldPointer = (void*)ptr;
             entries[i].function = decodeJsonJumpTable[mt->typeKind];
             entries[i].found = false;
             ptr += mt->memSize;
         } else {
             ptr += m->padding;
             ptr += sizeof(size_t);
             entries[i].fieldName = m->memberName;
             entries[i].fieldPointer = (void*)ptr;
             entries[i].function = (decodeJsonSignature)Array_decodeJson;
             entries[i].found = false;
             ptr += sizeof(void*);
         }
     }
     
     ret = decodeFields(ctx, parseCtx, entries, membersSize, type);
 
     ctx->depth--;
     return ret;
 }
