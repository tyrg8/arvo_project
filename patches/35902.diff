commit fda03e297b1abe3ce8277794a7de8970601ed7c9
Author: Isaac Brodsky <isaac@isaacbrodsky.com>
Date:   Thu Jul 15 10:01:58 2021 -0700

    Fix potential segfault in kRing due to invalid digit (#498)

diff --git a/CHANGELOG.md b/CHANGELOG.md
index d0223603..62679837 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -5,233 +5,236 @@ This project adheres to [Semantic Versioning](http://semver.org/).
 The public API of this library consists of the functions declared in file
 [h3api.h.in](./src/h3lib/include/h3api.h.in).
 
 ## [Unreleased]
 
+### Fixed
+- `gridDisk` of invalid indexes should not crash. (#498)
+
 ### Added
 - Vertex mode and associated functions:
     - `cellToVertex(cell, vertexNum)`
     - `cellToVertexes(cell, out)`
     - `vertexToPoint(vertex, out)` 
     - `isValidVertex(vertex)` 
 - closed-form implementation of `numHexagons`
 
 ### Breaking changes
 - rename functions according to the terminology RFC (#403, #466)
 - `cellToChildrenSize` to output `int64_t` instead of `int`
 - `pointDistRads` to `distanceRads`
 - `pointDistKm` to `distanceKm`
 - `pointDistM` to `distanceM`
 
 ### Other changes
 - generally use `lng` instead of `lon`
 
 ## [3.7.1] - 2020-10-05
 ### Fixed
 - Finding invalid edge boundaries should not crash. (#399)
 - Build fixes for FreeBSD. (#397)
 
 ## [3.7.0] - 2020-09-28
 ### Added
 - Area and haversine distance functions (#377):
     - `cellAreaRads2`
     - `cellAreaKm2`
     - `cellAreaM2`
     - `pointDistRads`
     - `pointDistKm`
     - `pointDistM`
     - `exactEdgeLengthRads`
     - `exactEdgeLengthKm`
     - `exactEdgeLengthM`
 - Refactor `getH3UnidirectionalEdgeBoundary` for accuracy at small resolutions. (#391)
     - Speeds up `getH3UnidirectionalEdgeBoundary` by about 3x.
     - Implement core logic for future vertex mode.
 ### Fixed
 - Fixed building the library with custom memory allocation functions on Mac OSX. (#362)
 - The installed H3 CMake target should have include directories specified. (#381)
 ### Changed
 - Tests now use `bash` on Windows. (#381)
 
 ## [3.6.4] - 2020-06-19
 ### Added
 - `H3_MEMORY_PREFIX` CMake option for replacing the memory management functions used in H3. (#317)
 - Support for building Debian packages of H3. (#352)
 ### Fixed
 - Removed duplicate include statements. (#333)
 - Fixed macro `H3_DIGIT_MASK_NEGATIVE`. (#329)
 ## Changed
 - Again implement new `polyfill` algorithm. (#313)
 
 ## [3.6.3] - 2020-01-21
 ### Fixed
 - `compact` detects and fails on cases with duplicated input indexes. (#299)
 ### Changed
 - `h3IsValid` returns false for indexes that have non-zero reserved bits. (#300)
 - `h3IsValid` and `h3UnidirectionalEdgeIsValid` return false for indexes with the high bit set. (#300)
 
 ## [3.6.2] - 2019-12-9
 - Revert new `polyfill` algorithm until reported issues are fixed. (#293)
 
 ## [3.6.1] - 2019-11-11
 ### Fixed
 - `compact` handles zero length input correctly. (#278)
 - `bboxHexRadius` scaling factor adjusted to guarantee containment for `polyfill`. (#279)
 - `polyfill` new algorithm for up to 3x perf boost. (#282)
 - Fix CMake targets for KML generation. (#285)
 
 ## [3.6.0] - 2019-08-12
 ### Added
 - `h3ToCenterChild` function to find center child at given resolution (#267)
 - `getPentagonIndexes` (and `pentagonIndexCount`) function to find pentagons at given resolution (#267)
 ### Fixed
 - Fix bounds check for local IJ coordinates (#271)
 
 ## [3.5.0] - 2019-07-22
 ### Added
 - CMake options for excluding filter applications or benchmarks from the build. (#247)
 - `h3GetFaces` function to find icosahedron faces for an index, and helper function `maxFaceCount` (#253)
 ### Changed
 - Argument parsing for all filter applications is more flexible. (#238)
 ### Fixed
 - Fix printing program name in `h3ToHier` error messages. (#254)
 
 ## [3.4.4] - 2019-05-30
 ### Changed
 - Local coordinate spaces cannot cross more than one icosahedron edge. (#234)
 - All dynamic internal memory allocations happen on the heap instead of the stack. (#235)
 - Argument parsing for `h3ToGeo`, `geoToH3`, and `h3ToGeoBoundary` is more flexible. (#227)
 
 ## [3.4.3] - 2019-05-02
 ### Added
 - `localIjToH3` filter application (#222)
 - An option to print distances in the `kRing` filter application (#222)
 ### Changed
 - Arguments parsing for `kRing` filter application is more flexible. (#224)
 ### Fixed
 - `benchmarkPolyfill` allocates its memory on the heap (#198)
 - Fixed constraints of vertex longitudes (#213)
 - Zero only input to `uncompact` does not produce an error (#223)
 
 ## [3.4.2] - 2019-02-21
 ### Changed
 - `binding-functions` build target generates an ASCII file on Windows (#193)
 
 ## [3.4.1] - 2019-02-15
 ### Fixed
 - `binding-functions` build target fixed when running the build out of source (#188)
 
 ## [3.4.0] - 2019-01-23
 ### Added
 - `getRes0Indexes` function for getting all base cells, and helper function `res0IndexCount` (#174)
 - Include defined constants for current library version (#173)
 
 ## [3.3.0] - 2018-12-25
 ### Added
 - `h3Line` and `h3LineSize` functions for getting the line of indexes between some start and end (inclusive) (#165)
 ### Changed
 - Indexes in deleted pentagon subsequences are not considered valid.
 
 ## [3.2.0] - 2018-10-04
 ### Added
 - `experimentalH3ToLocalIj` function for getting local coordinates for an index. (#102)
 - `experimentalLocalIjToH3` function for getting an index from local coordinates. (#102)
 - Benchmarks for the kRing method for k's of size 10, 20, 30, and 40. (#142, #144)
 ### Changed
 - Internal `h3ToIjk` function renamed to `h3ToLocalIjk`. (#102)
 - `h3ToIjk` filter application replaced with `h3ToLocalIj`. (#102)
 ### Fixed
 - Added `#include <stdio.h>` to `benchmark.h` (#142)
 
 ## [3.1.1] - 2018-08-29
 ### Fixed
 - Fixed bounding box bug for polygons crossing the antimeridian (#130)
 - Normalize output of h3SetToMultiPolygon to align with the GeoJSON spec, ensuring that each polygon has only one outer loop, followed by holes (#131)
 ### Changed
 - Longitude outputs are now guaranteed to be in the range [-Pi, Pi]. (#93)
 - Implemented closed form formula for maxKringSize. Source: https://oeis.org/A003215 (#138)
 - Improved test and benchmark harnesses (#126, #128)
 
 ## [3.1.0] - 2018-08-03
 ### Added
 - `h3Distance` function for determining the grid distance between H3 indexes (#83)
 - Internal `h3ToIjk` function for getting IJK+ coordinates from an index (#83)
 - Internal `ijkDistance` function for determining the grid distance between IJK+ coordinates (#83)
 - `h3ToIjk` filter application for experimenting with `h3ToIjk` (#83)
 ### Fixed
 - Don't require a C++ compiler (#107)
 ### Changed
 - Most dynamic internal memory allocations happen on the heap instead of the stack (#100)
 
 ## [3.0.8] - 2018-07-18
 ### Added
 - Added Direction enum, replacing int and defined constants (#77)
 ### Fixed
 - Ensured unused memory is cleared for pentagon children. (#84)
 - Fixed compiler warnings in `h3ToGeoHier` and `h3ToGeoBoundaryHier`. (#90)
 - Fixed a segfault in `h3SetToLinkedGeo` (#94)
 ### Changed
 - Warnings are not errors by default. (#90)
 
 ## [3.0.7] - 2018-06-08
 ### Added
 - Generator for the faceCenterPoint table (#67)
 - Generator for number of indexes per resolution (#69)
 - Added CMake `WARNINGS_AS_ERRORS` option, default on, for Clang and GCC (#70)
 - Added CMake `TEST_WRAPPER` setting when `WRAP_VALGRIND` is on (#66)
 ### Changed
 - Moved Vec3d structure to `vec3d.h` (#67)
 - Added input validation when getting the origin or destination of an edge (#74)
 
 ## [3.0.6] - 2018-06-01
 ### Changed
 - Changed signature of internal function h3NeighborRotations.
 - Do not require support for `hexRange`, `hexRanges`, or `hexRangeDistances` in the bindings. These functions may be deprecated in the public API in future releases; consumers should use `kRing` and `kRingDistances` instead.
 - Performance improvement in core indexing logic for `geoToH3` (thanks @wewei!)
 
 ## [3.0.5] - 2018-04-27
 ### Fixed
 - Fixed duplicate vertex in h3ToGeoBoundary for certain class III hexagons (#46)
 ### Added
 - Release guide
 
 ## [3.0.4] - 2018-04-16
 ### Added
 - Assertions when allocating memory on the heap.
 ### Changed
 - Most internal memory allocations happen on the stack instead of the heap.
 
 ## [3.0.3] - 2018-03-19
 ### Added
 - CMake config installation to ease use of h3 from CMake projects.
 - Add CMake toolchain file to set build options upfront.
 - Add CMake `C_CLANG_TIDY` property to integrate clang-tidy checks during build.
 - YouCompleteMe completion support.
 ### Changed
 - Improved resilience to out of range inputs.
 - Minimum CMake version to 3.1.
 - Set `CMAKE_C_STANDARD` to `11` instead of using compiler flag `-std=c1x`.
 - Use `CMAKE_POSITION_INDEPENDENT_CODE` instead of using compiler flag `-fPIC`.
 - Rename library target from `h3.1` to `h3` with `SONAME` property of 1.
 ### Removed
 - CMake `H3_COMPILER` option in favor of built-in `CMAKE_C_COMPILER`.
 - CMake `BUILD_STATIC` option in favor of built-in `BUILD_SHARED_LIBS`.
 - CMake `ENABLE_TESTS` option in favor of built-in `BUILD_TESTING`.
 - File globbing in CMake in favor of listing source files.
 
 ## [3.0.2] - 2018-01-24
 ### Removed
 - Removed the `H3IndexFat` internal structure.
 ### Changed
 - Simplified build process on Windows.
 ### Fixed
 - Fixed an issue where tests would fail on ARM systems.
 
 ## [3.0.1] - 2018-01-18
 ### Added
 - Added a `make install` target.
 ### Changed
 - Improved compatability with building on Windows.
 - Fixed various cases where the test suite could crash or not compile.
 
 ## [3.0.0] - 2018-01-08
 ### Added
 - First public release.
diff --git a/src/apps/testapps/testGridDisk.c b/src/apps/testapps/testGridDisk.c
index 6832c1ff..d3679771 100644
--- a/src/apps/testapps/testGridDisk.c
+++ b/src/apps/testapps/testGridDisk.c
@@ -76,292 +76,301 @@ static void gridDisk_equals_gridDiskDistancesSafe_assertions(H3Index h3) {
 SUITE(gridDisk) {
     TEST(gridDisk0) {
         LatLng sf = {0.659966917655, 2 * 3.14159 - 2.1364398519396};
         H3Index sfHex0;
         t_assertSuccess(H3_EXPORT(latLngToCell)(&sf, 0, &sfHex0));
 
         H3Index k1[] = {0, 0, 0, 0, 0, 0, 0};
         int k1Dist[] = {0, 0, 0, 0, 0, 0, 0};
         H3Index expectedK1[] = {0x8029fffffffffff, 0x801dfffffffffff,
                                 0x8013fffffffffff, 0x8027fffffffffff,
                                 0x8049fffffffffff, 0x8051fffffffffff,
                                 0x8037fffffffffff};
         H3_EXPORT(gridDiskDistances)(sfHex0, 1, k1, k1Dist);
 
         for (int i = 0; i < 7; i++) {
             t_assert(k1[i] != 0, "index is populated");
             int inList = 0;
             for (int j = 0; j < 7; j++) {
                 if (k1[i] == expectedK1[j]) {
                     t_assert(k1Dist[i] == (k1[i] == sfHex0 ? 0 : 1),
                              "distance is as expected");
                     inList++;
                 }
             }
             t_assert(inList == 1, "index found in expected set");
         }
     }
 
     TEST(gridDisk0_PolarPentagon) {
         H3Index polar;
         setH3Index(&polar, 0, 4, 0);
         H3Index k2[] = {0, 0, 0, 0, 0, 0, 0};
         int k2Dist[] = {0, 0, 0, 0, 0, 0, 0};
         H3Index expectedK2[] = {0x8009fffffffffff,
                                 0x8007fffffffffff,
                                 0x8001fffffffffff,
                                 0x8011fffffffffff,
                                 0x801ffffffffffff,
                                 0x8019fffffffffff,
                                 0};
         H3_EXPORT(gridDiskDistances)(polar, 1, k2, k2Dist);
 
         int k2present = 0;
         for (int i = 0; i < 7; i++) {
             if (k2[i] != 0) {
                 k2present++;
                 int inList = 0;
                 for (int j = 0; j < 7; j++) {
                     if (k2[i] == expectedK2[j]) {
                         t_assert(k2Dist[i] == (k2[i] == polar ? 0 : 1),
                                  "distance is as expected");
                         inList++;
                     }
                 }
                 t_assert(inList == 1, "index found in expected set");
             }
         }
         t_assert(k2present == 6, "pentagon has 5 neighbors");
     }
 
     TEST(gridDisk1_PolarPentagon) {
         H3Index polar;
         setH3Index(&polar, 1, 4, 0);
         H3Index k2[] = {0, 0, 0, 0, 0, 0, 0};
         int k2Dist[] = {0, 0, 0, 0, 0, 0, 0};
         H3Index expectedK2[] = {0x81083ffffffffff,
                                 0x81093ffffffffff,
                                 0x81097ffffffffff,
                                 0x8108fffffffffff,
                                 0x8108bffffffffff,
                                 0x8109bffffffffff,
                                 0};
         H3_EXPORT(gridDiskDistances)(polar, 1, k2, k2Dist);
 
         int k2present = 0;
         for (int i = 0; i < 7; i++) {
             if (k2[i] != 0) {
                 k2present++;
                 int inList = 0;
                 for (int j = 0; j < 7; j++) {
                     if (k2[i] == expectedK2[j]) {
                         t_assert(k2Dist[i] == (k2[i] == polar ? 0 : 1),
                                  "distance is as expected");
                         inList++;
                     }
                 }
                 t_assert(inList == 1, "index found in expected set");
             }
         }
         t_assert(k2present == 6, "pentagon has 5 neighbors");
     }
 
     TEST(gridDisk1_PolarPentagon_k3) {
         H3Index polar;
         setH3Index(&polar, 1, 4, 0);
         H3Index k2[37] = {0};
         int k2Dist[37] = {0};
         H3Index expectedK2[37] = {0x81013ffffffffff,
                                   0x811fbffffffffff,
                                   0x81193ffffffffff,
                                   0x81097ffffffffff,
                                   0x81003ffffffffff,
                                   0x81183ffffffffff,
                                   0x8111bffffffffff,
                                   0x81077ffffffffff,
                                   0x811f7ffffffffff,
                                   0x81067ffffffffff,
                                   0x81093ffffffffff,
                                   0x811e7ffffffffff,
                                   0x81083ffffffffff,
                                   0x81117ffffffffff,
                                   0x8101bffffffffff,
                                   0x81107ffffffffff,
                                   0x81073ffffffffff,
                                   0x811f3ffffffffff,
                                   0x81063ffffffffff,
                                   0x8108fffffffffff,
                                   0x811e3ffffffffff,
                                   0x8119bffffffffff,
                                   0x81113ffffffffff,
                                   0x81017ffffffffff,
                                   0x81103ffffffffff,
                                   0x8109bffffffffff,
                                   0x81197ffffffffff,
                                   0x81007ffffffffff,
                                   0x8108bffffffffff,
                                   0x81187ffffffffff,
                                   0x8107bffffffffff,
                                   0,
                                   0,
                                   0,
                                   0,
                                   0,
                                   0};
         int expectedK2Dist[37] = {2, 3, 2, 1, 3, 3, 3, 2, 2, 3, 1, 3, 0,
                                   2, 3, 3, 2, 2, 3, 1, 3, 3, 2, 2, 3, 1,
                                   2, 3, 1, 3, 3, 0, 0, 0, 0, 0, 0};
         H3_EXPORT(gridDiskDistances)(polar, 3, k2, k2Dist);
 
         int k2present = 0;
         for (int i = 0; i < 37; i++) {
             if (k2[i] != 0) {
                 k2present++;
                 int inList = 0;
                 for (int j = 0; j < 37; j++) {
                     if (k2[i] == expectedK2[j]) {
                         t_assert(k2Dist[i] == expectedK2Dist[j],
                                  "distance is as expected");
                         inList++;
                     }
                 }
                 t_assert(inList == 1, "index found in expected set");
             }
         }
         t_assert(k2present == 31, "pentagon has 30 neighbors");
     }
 
     TEST(gridDisk1_Pentagon_k4) {
         H3Index pent;
         setH3Index(&pent, 1, 14, 0);
         H3Index k2[61] = {0};
         int k2Dist[61] = {0};
         H3Index expectedK2[61] = {0x811d7ffffffffff,
                                   0x810c7ffffffffff,
                                   0x81227ffffffffff,
                                   0x81293ffffffffff,
                                   0x81133ffffffffff,
                                   0x8136bffffffffff,
                                   0x81167ffffffffff,
                                   0x811d3ffffffffff,
                                   0x810c3ffffffffff,
                                   0x81223ffffffffff,
                                   0x81477ffffffffff,
                                   0x8128fffffffffff,
                                   0x81367ffffffffff,
                                   0x8112fffffffffff,
                                   0x811cfffffffffff,
                                   0x8123bffffffffff,
                                   0x810dbffffffffff,
                                   0x8112bffffffffff,
                                   0x81473ffffffffff,
                                   0x8128bffffffffff,
                                   0x81363ffffffffff,
                                   0x811cbffffffffff,
                                   0x81237ffffffffff,
                                   0x810d7ffffffffff,
                                   0x81127ffffffffff,
                                   0x8137bffffffffff,
                                   0x81287ffffffffff,
                                   0x8126bffffffffff,
                                   0x81177ffffffffff,
                                   0x810d3ffffffffff,
                                   0x81233ffffffffff,
                                   0x8150fffffffffff,
                                   0x81123ffffffffff,
                                   0x81377ffffffffff,
                                   0x81283ffffffffff,
                                   0x8102fffffffffff,
                                   0x811c3ffffffffff,
                                   0x810cfffffffffff,
                                   0x8122fffffffffff,
                                   0x8113bffffffffff,
                                   0x81373ffffffffff,
                                   0x8129bffffffffff,
                                   0x8102bffffffffff,
                                   0x811dbffffffffff,
                                   0x810cbffffffffff,
                                   0x8122bffffffffff,
                                   0x81297ffffffffff,
                                   0x81507ffffffffff,
                                   0x8136fffffffffff,
                                   0x8127bffffffffff,
                                   0x81137ffffffffff,
                                   0,
                                   0};
         H3_EXPORT(gridDiskDistances)(pent, 4, k2, k2Dist);
 
         int k2present = 0;
         for (int i = 0; i < 61; i++) {
             if (k2[i] != 0) {
                 k2present++;
                 int inList = 0;
                 for (int j = 0; j < 61; j++) {
                     if (k2[i] == expectedK2[j]) {
                         inList++;
                     }
                 }
                 t_assert(inList == 1, "index found in expected set");
             }
         }
         t_assert(k2present == 51, "pentagon has 50 neighbors");
     }
 
     TEST(gridDisk_equals_gridDiskDistancesSafe) {
         // Check that gridDiskDistances output matches gridDiskDistancesSafe,
         // since gridDiskDistances will sometimes use a different
         // implementation.
 
         for (int res = 0; res < 2; res++) {
             iterateAllIndexesAtRes(
                 res, gridDisk_equals_gridDiskDistancesSafe_assertions);
         }
     }
 
     TEST(h3NeighborRotations_identity) {
         // This is undefined behavior, but it's helpful for it to make sense.
         H3Index origin = 0x811d7ffffffffffL;
         int rotations = 0;
         t_assert(
             h3NeighborRotations(origin, CENTER_DIGIT, &rotations) == origin,
             "Moving to self goes to self");
     }
 
     TEST(cwOffsetPent) {
         // Try to find a case where h3NeighborRotations would not pass the
         // cwOffsetPent check, and would hit a line marked as unreachable.
 
         // To do this, we need to find a case that would move from one
         // non-pentagon base cell into the deleted k-subsequence of a pentagon
         // base cell, and neither of the cwOffsetPent values are the original
         // base cell's face.
 
         for (int pentagon = 0; pentagon < NUM_BASE_CELLS; pentagon++) {
             if (!_isBaseCellPentagon(pentagon)) {
                 continue;
             }
 
             for (int neighbor = 0; neighbor < NUM_BASE_CELLS; neighbor++) {
                 FaceIJK homeFaceIjk;
                 _baseCellToFaceIjk(neighbor, &homeFaceIjk);
                 int neighborFace = homeFaceIjk.face;
 
                 // Only direction 2 needs to be checked, because that is the
                 // only direction where we can move from digit 2 to digit 1, and
                 // into the deleted k subsequence.
                 t_assert(
                     _getBaseCellNeighbor(neighbor, J_AXES_DIGIT) != pentagon ||
                         _baseCellIsCwOffset(pentagon, neighborFace),
                     "cwOffsetPent is reachable");
             }
         }
     }
 
     TEST(gridDiskInvalid) {
         int k = 1000;
         int kSz = H3_EXPORT(maxGridDiskSize)(k);
         H3Index *neighbors = calloc(kSz, sizeof(H3Index));
-        H3_EXPORT(gridDisk)(0x7fffffffffffffff, 1000, neighbors);
+        H3_EXPORT(gridDisk)(0x7fffffffffffffff, k, neighbors);
+        // Assertion is should not crash - should return an error in the future
+        free(neighbors);
+    }
+
+    TEST(gridDiskInvalidDigit) {
+        int k = 2;
+        int kSz = H3_EXPORT(maxGridDiskSize)(k);
+        H3Index *neighbors = calloc(kSz, sizeof(H3Index));
+        H3_EXPORT(gridDisk)(0x4d4b00fe5c5c3030, k, neighbors);
         // Assertion is should not crash - should return an error in the future
         free(neighbors);
     }
 }
diff --git a/src/h3lib/lib/algos.c b/src/h3lib/lib/algos.c
index cf5f1d8e..0a6ecd4f 100644
--- a/src/h3lib/lib/algos.c
+++ b/src/h3lib/lib/algos.c
@@ -293,158 +293,161 @@ void H3_EXPORT(gridDiskDistancesSafe)(H3Index origin, int k, H3Index *out,
 /**
  * Returns the hexagon index neighboring the origin, in the direction dir.
  *
  * Implementation note: The only reachable case where this returns 0 is if the
  * origin is a pentagon and the translation is in the k direction. Thus,
  * 0 can only be returned if origin is a pentagon.
  *
  * @param origin Origin index
  * @param dir Direction to move in
  * @param rotations Number of ccw rotations to perform to reorient the
  *                  translation vector. Will be modified to the new number of
  *                  rotations to perform (such as when crossing a face edge.)
  * @return H3Index of the specified neighbor or H3_NULL if deleted k-subsequence
  *         distortion is encountered.
  */
 H3Index h3NeighborRotations(H3Index origin, Direction dir, int *rotations) {
     H3Index out = origin;
 
     for (int i = 0; i < *rotations; i++) {
         dir = _rotate60ccw(dir);
     }
 
     int newRotations = 0;
     int oldBaseCell = H3_GET_BASE_CELL(out);
     if (oldBaseCell < 0 ||
         oldBaseCell >= NUM_BASE_CELLS) {  // LCOV_EXCL_BR_LINE
         // Base cells less than zero can not be represented in an index
         return H3_NULL;
     }
     Direction oldLeadingDigit = _h3LeadingNonZeroDigit(out);
 
     // Adjust the indexing digits and, if needed, the base cell.
     int r = H3_GET_RESOLUTION(out) - 1;
     while (true) {
         if (r == -1) {
             H3_SET_BASE_CELL(out, baseCellNeighbors[oldBaseCell][dir]);
             newRotations = baseCellNeighbor60CCWRots[oldBaseCell][dir];
 
             if (H3_GET_BASE_CELL(out) == INVALID_BASE_CELL) {
                 // Adjust for the deleted k vertex at the base cell level.
                 // This edge actually borders a different neighbor.
                 H3_SET_BASE_CELL(out,
                                  baseCellNeighbors[oldBaseCell][IK_AXES_DIGIT]);
                 newRotations =
                     baseCellNeighbor60CCWRots[oldBaseCell][IK_AXES_DIGIT];
 
                 // perform the adjustment for the k-subsequence we're skipping
                 // over.
                 out = _h3Rotate60ccw(out);
                 *rotations = *rotations + 1;
             }
 
             break;
         } else {
             Direction oldDigit = H3_GET_INDEX_DIGIT(out, r + 1);
             Direction nextDir;
-            if (isResolutionClassIII(r + 1)) {
+            if (oldDigit == INVALID_DIGIT) {
+                // Only possible on invalid input
+                return H3_NULL;
+            } else if (isResolutionClassIII(r + 1)) {
                 H3_SET_INDEX_DIGIT(out, r + 1, NEW_DIGIT_II[oldDigit][dir]);
                 nextDir = NEW_ADJUSTMENT_II[oldDigit][dir];
             } else {
                 H3_SET_INDEX_DIGIT(out, r + 1, NEW_DIGIT_III[oldDigit][dir]);
                 nextDir = NEW_ADJUSTMENT_III[oldDigit][dir];
             }
 
             if (nextDir != CENTER_DIGIT) {
                 dir = nextDir;
                 r--;
             } else {
                 // No more adjustment to perform
                 break;
             }
         }
     }
 
     int newBaseCell = H3_GET_BASE_CELL(out);
     if (_isBaseCellPentagon(newBaseCell)) {
         int alreadyAdjustedKSubsequence = 0;
 
         // force rotation out of missing k-axes sub-sequence
         if (_h3LeadingNonZeroDigit(out) == K_AXES_DIGIT) {
             if (oldBaseCell != newBaseCell) {
                 // in this case, we traversed into the deleted
                 // k subsequence of a pentagon base cell.
                 // We need to rotate out of that case depending
                 // on how we got here.
                 // check for a cw/ccw offset face; default is ccw
 
                 if (_baseCellIsCwOffset(
                         newBaseCell, baseCellData[oldBaseCell].homeFijk.face)) {
                     out = _h3Rotate60cw(out);
                 } else {
                     // See cwOffsetPent in testGridDisk.c for why this is
                     // unreachable.
                     out = _h3Rotate60ccw(out);  // LCOV_EXCL_LINE
                 }
                 alreadyAdjustedKSubsequence = 1;
             } else {
                 // In this case, we traversed into the deleted
                 // k subsequence from within the same pentagon
                 // base cell.
                 if (oldLeadingDigit == CENTER_DIGIT) {
                     // Undefined: the k direction is deleted from here
                     return H3_NULL;
                 } else if (oldLeadingDigit == JK_AXES_DIGIT) {
                     // Rotate out of the deleted k subsequence
                     // We also need an additional change to the direction we're
                     // moving in
                     out = _h3Rotate60ccw(out);
                     *rotations = *rotations + 1;
                 } else if (oldLeadingDigit == IK_AXES_DIGIT) {
                     // Rotate out of the deleted k subsequence
                     // We also need an additional change to the direction we're
                     // moving in
                     out = _h3Rotate60cw(out);
                     *rotations = *rotations + 5;
                 } else {
                     // Should never occur
                     return H3_NULL;  // LCOV_EXCL_LINE
                 }
             }
         }
 
         for (int i = 0; i < newRotations; i++) out = _h3RotatePent60ccw(out);
 
         // Account for differing orientation of the base cells (this edge
         // might not follow properties of some other edges.)
         if (oldBaseCell != newBaseCell) {
             if (_isBaseCellPolarPentagon(newBaseCell)) {
                 // 'polar' base cells behave differently because they have all
                 // i neighbors.
                 if (oldBaseCell != 118 && oldBaseCell != 8 &&
                     _h3LeadingNonZeroDigit(out) != JK_AXES_DIGIT) {
                     *rotations = *rotations + 1;
                 }
             } else if (_h3LeadingNonZeroDigit(out) == IK_AXES_DIGIT &&
                        !alreadyAdjustedKSubsequence) {
                 // account for distortion introduced to the 5 neighbor by the
                 // deleted k subsequence.
                 *rotations = *rotations + 1;
             }
         }
     } else {
         for (int i = 0; i < newRotations; i++) out = _h3Rotate60ccw(out);
     }
 
     *rotations = (*rotations + newRotations) % 6;
 
     return out;
 }
 
 /**
  * Get the direction from the origin to a given neighbor. This is effectively
  * the reverse operation for h3NeighborRotations. Returns INVALID_DIGIT if the
  * cells are not neighbors.
  *
  * TODO: This is currently a brute-force algorithm, but as it's O(6) that's
  * probably acceptable.
  */
