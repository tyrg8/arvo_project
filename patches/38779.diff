commit 7773d518b1f29caa1c2045eb66ec519e025be108
Author: Brian Miles <selimnairb@gmail.com>
Date:   Fri Apr 28 11:28:39 2023 -0400

    Add ability to create Python wheels (#313)
    
    * Rename Python bindings from pywraps2 to s2geometry and set SWIG CMake policies to remove warnings about using deprecated default binding name
    * Fix broken unit tests
    * Pass -DCMAKE_POSITION_INDEPENDENT_CODE=ON to CMake via setup.py for building Python wheel
    * Use a PEP 440-compliant pre-release version since the code in master does not correspond to already released version 0.10.0

diff --git a/README.md b/README.md
index 65f87d1..e636dc4 100644
--- a/README.md
+++ b/README.md
@@ -116,6 +116,12 @@ Disable building of shared libraries with `-DBUILD_SHARED_LIBS=OFF`.
 
 Enable the python interface with `-DWITH_PYTHON=ON`.
 
+If OpenSSL is installed in a non-standard location set `OPENSSL_ROOT_DIR`
+before running configure, for example on macOS:
+```
+OPENSSL_ROOT_DIR=/opt/homebrew/Cellar/openssl@3/3.1.0 cmake -DCMAKE_PREFIX_PATH=/opt/homebrew -DCMAKE_CXX_STANDARD=17
+```
+
 ## Installing
 
 From `build` subdirectory:
@@ -174,10 +180,29 @@ even 2.0.
 
 Python 3 is required.
 
+### Creating wheels
+First, make a virtual environment and install `cmake_build_extension` and `wheel`
+into it:
+```
+python3 -m venv venv
+source venv/bin/activate
+pip install cmake_build_extension wheel
+```
+
+Then build the wheel:
+```
+python setup.py bdist_wheel
+```
+
+The resulting wheel will be in the `dist` directory.
+
+> If OpenSSL is in a non-standard location make sure to set `OPENSSL_ROOT_DIR` 
+> when calling `setup.py`, see above for more information.
+
 ## Other S2 implementations
 
 * [Go](https://github.com/golang/geo) (Approximately 40% complete.)
 * [Java](https://github.com/google/s2-geometry-library-java)
 * [Kotlin](https://github.com/Enovea/s2-geometry-kotlin) (Complete except binary serialization)
 
 ## Disclaimer
diff --git a/pyproject.toml b/pyproject.toml
new file mode 100644
index 0000000..4cdb773
--- /dev/null
+++ b/pyproject.toml
@@ -0,0 +1,8 @@
+[build-system]
+requires = [
+    "wheel",
+    "setuptools",
+    "setuptools_scm[toml]",
+    "cmake_build_extension",
+]
+build-backend = "setuptools.build_meta"
diff --git a/setup.cfg b/setup.cfg
new file mode 100644
index 0000000..cc87371
--- /dev/null
+++ b/setup.cfg
@@ -0,0 +1,22 @@
+[metadata]
+name = s2geometry
+version = 0.11.0.dev1
+description = Python packaging of s2geometry
+author = Brian Miles
+author_email = selimnairb@gmail.com
+license= Apache 2
+project_urls =
+    Source  = https://github.com/google/s2geometry
+classifiers =
+    Programming Language :: Python :: 3
+    Operating System :: POSIX
+    License :: OSI Approved :: Apache Software License
+
+[options]
+zip_safe = False
+packages = find:
+package_dir = =src
+python_requres = >=3.7
+
+[options.packages.find]
+where = src
diff --git a/setup.py b/setup.py
new file mode 100644
index 0000000..242882a
--- /dev/null
+++ b/setup.py
@@ -0,0 +1,33 @@
+import sys
+from pathlib import Path
+
+import cmake_build_extension
+import setuptools
+
+
+setuptools.setup(
+    ext_modules=[
+        cmake_build_extension.CMakeExtension(
+            # This could be anything you like, it is used to create build folders
+            name="SwigBindings",
+            # Name of the resulting package name (import s2geometry)
+            install_prefix="s2geometry",
+            # Selects the folder where the main CMakeLists.txt is stored
+            # (it could be a subfolder)
+            source_dir=str(Path(__file__).parent.absolute()),
+            cmake_configure_options=[
+                                        # This option points CMake to the right Python interpreter, and helps
+                                        # the logic of FindPython3.cmake to find the active version
+                                        f"-DPython3_ROOT_DIR={Path(sys.prefix)}",
+                                        '-DCALL_FROM_SETUP_PY:BOOL=ON',
+                                        '-DBUILD_SHARED_LIBS:BOOL=OFF',
+                                        '-DCMAKE_POSITION_INDEPENDENT_CODE=ON',
+                                        '-DWITH_PYTHON=ON'
+                                    ]
+        )
+    ],
+    cmdclass=dict(
+        # Enable the CMakeExtension entries defined above
+        build_ext=cmake_build_extension.BuildExtension,
+    ),
+)
diff --git a/src/python/CMakeLists.txt b/src/python/CMakeLists.txt
index ced0832..2ba7259 100644
--- a/src/python/CMakeLists.txt
+++ b/src/python/CMakeLists.txt
@@ -1,21 +1,43 @@
+# Generate standard target names.
+cmake_policy(SET CMP0078 NEW)
+# Honor SWIG_MODULE_NAME via -module flag.
+cmake_policy(SET CMP0086 NEW)
+
+# Handle where to install the resulting Python package
+if (CALL_FROM_SETUP_PY)
+    # The CMakeExtension will set CMAKE_INSTALL_PREFIX to the root
+    # of the resulting wheel archive
+    set(S2GEOMETRY_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
+else()
+    # The Python package is installed directly in the folder of the
+    # detected interpreter (system, user, or virtualenv)
+    set(S2GEOMETRY_INSTALL_PREFIX ${Python3_SITELIB})
+endif()
+
 include(${SWIG_USE_FILE})
 include_directories(${Python3_INCLUDE_DIRS})
 
 set(CMAKE_SWIG_FLAGS "")
-set_property(SOURCE s2.i PROPERTY SWIG_FLAGS "-module" "pywraps2")
+set_property(SOURCE s2.i PROPERTY SWIG_FLAGS "-module" "s2geometry")
 set_property(SOURCE s2.i PROPERTY CPLUSPLUS ON)
 
-swig_add_library(pywraps2 LANGUAGE python SOURCES s2.i)
+swig_add_library(s2geometry LANGUAGE python SOURCES s2.i)
 
-swig_link_libraries(pywraps2 ${Python3_LIBRARIES} s2)
+swig_link_libraries(s2geometry ${Python3_LIBRARIES} s2)
 enable_testing()
-add_test(NAME pywraps2_test COMMAND
+add_test(NAME s2geometry_test COMMAND
          ${Python3_EXECUTABLE}
-         "${PROJECT_SOURCE_DIR}/src/python/pywraps2_test.py")
-set_property(TEST pywraps2_test PROPERTY ENVIRONMENT
+         "${PROJECT_SOURCE_DIR}/src/python/s2geometry_test.py")
+set_property(TEST s2geometry_test PROPERTY ENVIRONMENT
              "PYTHONPATH=$ENV{PYTHONPATH}:${PROJECT_BINARY_DIR}/python")
 
 # Install the wrapper.
-install(TARGETS _pywraps2 DESTINATION ${Python3_SITELIB})
-install(FILES "${PROJECT_BINARY_DIR}/python/pywraps2.py"
-        DESTINATION ${Python3_SITELIB})
+install(TARGETS s2geometry DESTINATION ${S2GEOMETRY_INSTALL_PREFIX})
+
+# Install swig-generated Python file (we rename it to __init__.py as it will
+# ultimately end up in a directory called s2geometry in site-packages, which will
+# serve as the module directory.
+install(FILES "${CMAKE_CURRENT_BINARY_DIR}/s2geometry.py"
+        DESTINATION ${S2GEOMETRY_INSTALL_PREFIX}
+        RENAME __init__.py
+        COMPONENT s2geometry)
diff --git a/src/python/pywraps2_test.py b/src/python/s2geometry_test.py
similarity index 98%
rename from src/python/pywraps2_test.py
rename to src/python/s2geometry_test.py
index 6845d59..e02e7fd 100755
--- a/src/python/pywraps2_test.py
+++ b/src/python/s2geometry_test.py
@@ -17,7 +17,7 @@
 import unittest
 from collections import defaultdict
 
-import pywraps2 as s2
+import s2geometry as s2
 
 
 class PyWrapS2TestCase(unittest.TestCase):
@@ -1039,90 +1039,90 @@ class S2PolygonTestCase(unittest.TestCase):
 
 class S2ChordAngleTest(unittest.TestCase):
   def testBasic(self):
-    ca = s2.S1ChordAngle(s2.S1Angle_Degrees(100))
+    ca = s2.S1ChordAngle(s2.S1Angle.Degrees(100))
     self.assertAlmostEqual(100, ca.degrees())
 
   def testArithmetic(self):
-    ca1 = s2.S1ChordAngle(s2.S1Angle_Degrees(10))
-    ca2 = s2.S1ChordAngle(s2.S1Angle_Degrees(20))
+    ca1 = s2.S1ChordAngle(s2.S1Angle.Degrees(10))
+    ca2 = s2.S1ChordAngle(s2.S1Angle.Degrees(20))
     ca3 = ca1 + ca2
     self.assertAlmostEqual(30, ca3.degrees())
     ca4 = ca2 - ca1
     self.assertAlmostEqual(10, ca4.degrees())
 
   def testComparison(self):
-    ca1 = s2.S1ChordAngle(s2.S1Angle_Degrees(10))
-    ca2 = s2.S1ChordAngle(s2.S1Angle_Degrees(20))
+    ca1 = s2.S1ChordAngle(s2.S1Angle.Degrees(10))
+    ca2 = s2.S1ChordAngle(s2.S1Angle.Degrees(20))
     self.assertTrue(ca1 < ca2)
     self.assertTrue(ca2 > ca1)
     self.assertFalse(ca1 > ca2)
     self.assertFalse(ca2 < ca1)
 
-    ca3 = s2.S1ChordAngle(s2.S1Angle_Degrees(10))
+    ca3 = s2.S1ChordAngle(s2.S1Angle.Degrees(10))
     self.assertTrue(ca1 == ca3)
     self.assertFalse(ca1 == ca2)
     self.assertFalse(ca1 != ca3)
     self.assertTrue(ca1 != ca2)
 
   def testInfinity(self):
-    ca1 = s2.S1ChordAngle(s2.S1Angle_Degrees(179))
+    ca1 = s2.S1ChordAngle(s2.S1Angle.Degrees(179))
     ca2 = s2.S1ChordAngle.Infinity()
     self.assertTrue(ca2 > ca1)
 
   def testCopy(self):
-    ca1 = s2.S1ChordAngle(s2.S1Angle_Degrees(100))
+    ca1 = s2.S1ChordAngle(s2.S1Angle.Degrees(100))
     ca2 = s2.S1ChordAngle(ca1)
     self.assertAlmostEqual(100, ca2.degrees())
 
 class S2BufferOperationTest(unittest.TestCase):
   def setUp(self):
     self.opts = s2.S2BufferOperationOptions()
     self.result = s2.S2Polygon()
     self.layer = s2.S2PolygonLayer(self.result)
 
   def testDefaults(self):
     op = s2.S2BufferOperation(self.layer, self.opts)
 
     cell1 = s2.S2Cell(s2.S2CellId(s2.S2LatLng.FromDegrees(3.0, 4.0)).parent(8))
     op.AddPolygon(s2.S2Polygon(cell1))
     op.Build()
 
     self.assertEqual(1, self.result.num_loops())
     loop = self.result.loop(0)
     self.assertEqual(4, loop.num_vertices())
 
   def testRadius(self):
-    self.opts.set_buffer_radius(s2.S1Angle_Degrees(0.001))
+    self.opts.set_buffer_radius(s2.S1Angle.Degrees(0.001))
     op = s2.S2BufferOperation(self.layer, self.opts)
 
     cell1 = s2.S2Cell(s2.S2CellId(s2.S2LatLng.FromDegrees(3.0, 4.0)).parent(8))
     op.AddPolygon(s2.S2Polygon(cell1))
     op.Build()
 
     self.assertEqual(1, self.result.num_loops())
     loop = self.result.loop(0)
     self.assertEqual(20, loop.num_vertices())
 
   def testRadiusAndError(self):
-    self.opts.set_buffer_radius(s2.S1Angle_Degrees(0.001))
+    self.opts.set_buffer_radius(s2.S1Angle.Degrees(0.001))
     self.opts.set_error_fraction(0.1)
     op = s2.S2BufferOperation(self.layer, self.opts)
 
     cell1 = s2.S2Cell(s2.S2CellId(s2.S2LatLng.FromDegrees(3.0, 4.0)).parent(8))
     op.AddPolygon(s2.S2Polygon(cell1))
     op.Build()
 
     self.assertEqual(1, self.result.num_loops())
     loop = self.result.loop(0)
     self.assertEqual(12, loop.num_vertices())
 
   def testPoint(self):
-    self.opts.set_buffer_radius(s2.S1Angle_Degrees(0.001))
+    self.opts.set_buffer_radius(s2.S1Angle.Degrees(0.001))
     op = s2.S2BufferOperation(self.layer, self.opts)
 
     op.AddPoint(s2.S2LatLng.FromDegrees(14.0, 15.0).ToPoint())
     op.Build()
 
     self.assertEqual(1, self.result.num_loops())
     loop = self.result.loop(0)
     self.assertEqual(16, loop.num_vertices())
