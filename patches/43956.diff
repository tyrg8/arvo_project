commit a1d46a8566c5fb79583e82fec3a561402ff9cec1
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Mon Mar 7 14:58:06 2022 -0500

    improve checking for conditional function arguments

diff --git a/MagickCore/fx.c b/MagickCore/fx.c
index 1df91ba28..9ac9c88ce 100644
--- a/MagickCore/fx.c
+++ b/MagickCore/fx.c
@@ -1693,309 +1693,330 @@ static ssize_t inline GetHexColour (FxInfo * pfx, fxFltType *v0, fxFltType *v1,
 static MagickBooleanType GetFunction (FxInfo * pfx, FunctionE fe)
 {
   /* A function, so get open-parens, n args, close-parens
   */
   const char * funStr = Functions[fe-FirstFunc].str;
   int nArgs = Functions[fe-FirstFunc].nArgs;
   char chLimit = ')';
   char expChLimit = ')';
   const char *strLimit = ",)";
   OperatorE pushOp = oOpenParen;
 
   char * pExpStart;
 
   int lenExp = 0;
 
   int FndArgs = 0;
   int ndx0 = NULL_ADDRESS, ndx1 = NULL_ADDRESS, ndx2 = NULL_ADDRESS, ndx3 = NULL_ADDRESS;
 
   MagickBooleanType coordQual = MagickFalse;
   PixelChannel chQual = NO_CHAN_QUAL;
   ImgAttrE iaQual = aNull;
 
   pfx->pex += pfx->lenToken;
 
   if (fe == fP) {
     char p = PeekChar (pfx);
     if (p=='{') {
       (void) ExpectChar (pfx, '{');
       pushOp = oOpenBrace;
       strLimit = ",}";
       chLimit = '}';
       expChLimit = '}';
     } else if (p=='[') {
       (void) ExpectChar (pfx, '[');
       pushOp = oOpenBracket;
       strLimit = ",]";
       chLimit = ']';
       expChLimit = ']';
     } else {
       nArgs = 0;
       chLimit = ']';
       expChLimit = ']';
     }
   } else if (fe == fU) {
     char p = PeekChar (pfx);
     if (p=='[') {
       (void) ExpectChar (pfx, '[');
       pushOp = oOpenBracket;
       strLimit = ",]";
       chLimit = ']';
       expChLimit = ']';
     } else {
       nArgs = 0;
       chLimit = ']';
       expChLimit = ']';
     }
   } else if (fe == fV || fe == fS) {
       nArgs = 0;
       pushOp = oOpenBracket;
       chLimit = ']';
       expChLimit = ']';
   } else {
     if (!ExpectChar (pfx, '(')) return MagickFalse;
   }
   if (!PushOperatorStack (pfx, pushOp)) return MagickFalse;
 
   pExpStart = pfx->pex;
   ndx0 = pfx->usedElements;
   if (fe==fDo) {
     (void) AddAddressingElement (pfx, rGoto, NULL_ADDRESS); /* address will be ndx1+1 */
   }
   while (nArgs > 0) {
     int FndOne = 0;
     if (TranslateStatementList (pfx, strLimit, &chLimit)) {
       FndOne = 1;
     } else {
       /* Maybe don't break because other expressions may be not empty. */
       if (!chLimit) break;
       if (fe == fP || fe == fS|| fe == fIf) {
         (void) AddElement (pfx, (fxFltType) 0, oNull);
         FndOne = 1;
       } 
     }
 
     if (strchr (strLimit, chLimit)==NULL) {
       (void) ThrowMagickException (
         pfx->exception, GetMagickModule(), OptionError,
         "For function", "'%s' expected one of '%s' after expression but found '%c' at '%s'",
         funStr, strLimit, chLimit ? chLimit : ' ', SetShortExp(pfx));
       return MagickFalse;
     }
     if (FndOne) {
       FndArgs++;
       nArgs--;
     }
     switch (FndArgs) {
       case 1:
+        if (ndx1 != NULL_ADDRESS) {
+          (void) ThrowMagickException (
+            pfx->exception, GetMagickModule(), OptionError,
+            "For function", "'%s' required argument is missing at '%s'",
+            funStr, SetShortExp(pfx));
+          return MagickFalse;
+        }
         ndx1 = pfx->usedElements;
         if (fe==fWhile) {
           (void) AddAddressingElement (pfx, rIfZeroGoto, NULL_ADDRESS); /* address will be ndx2+1 */
         } else if (fe==fDo) {
           (void) AddAddressingElement (pfx, rIfZeroGoto, NULL_ADDRESS); /* address will be ndx2+1 */
         } else if (fe==fFor) {
           pfx->Elements[pfx->usedElements-1].DoPush = MagickFalse;
         } else if (fe==fIf) {
           (void) AddAddressingElement (pfx, rIfZeroGoto, NULL_ADDRESS); /* address will be ndx2 + 1 */
           pfx->Elements[pfx->usedElements-1].DoPush = MagickTrue; /* we may need return from if() */
         }
         break;
       case 2:
+        if (ndx2 != NULL_ADDRESS) {
+          (void) ThrowMagickException (
+            pfx->exception, GetMagickModule(), OptionError,
+            "For function", "'%s' required argument is missing at '%s'",
+            funStr, SetShortExp(pfx));
+          return MagickFalse;
+        }
         ndx2 = pfx->usedElements;
         if (fe==fWhile) {
           pfx->Elements[pfx->usedElements-1].DoPush = MagickFalse;
           (void) AddAddressingElement (pfx, rGoto, ndx0);
         } else if (fe==fDo) {
           pfx->Elements[pfx->usedElements-1].DoPush = MagickFalse;
           (void) AddAddressingElement (pfx, rGoto, ndx0 + 1);
         } else if (fe==fFor) {
           (void) AddAddressingElement (pfx, rIfZeroGoto, NULL_ADDRESS); /* address will be ndx3 */
           pfx->Elements[pfx->usedElements-1].DoPush = MagickTrue; /* we may need return from for() */
           (void) AddAddressingElement (pfx, rZerStk, NULL_ADDRESS);
         } else if (fe==fIf) {
           (void) AddAddressingElement (pfx, rGoto, NULL_ADDRESS); /* address will be ndx3 */
         }
         break;
       case 3:
+        if (ndx3 != NULL_ADDRESS) {
+          (void) ThrowMagickException (
+            pfx->exception, GetMagickModule(), OptionError,
+            "For function", "'%s' required argument is missing at '%s'",
+            funStr, SetShortExp(pfx));
+          return MagickFalse;
+        }
         if (fe==fFor) {
           pfx->Elements[pfx->usedElements-1].DoPush = MagickFalse;
           (void) AddAddressingElement (pfx, rGoto, ndx1);
         }
         ndx3 = pfx->usedElements;
         break;
       default:
         break;
     }
     if (chLimit == expChLimit) {
       lenExp = pfx->pex - pExpStart - 1;
       break;
     }
   } /* end while args of a function */
   if (chLimit && chLimit != expChLimit && chLimit != ',' ) {
     (void) ThrowMagickException (
       pfx->exception, GetMagickModule(), OptionError,
       "For function", "'%s' expected '%c', found '%c' at '%s'",
       funStr, expChLimit, chLimit ? chLimit : ' ', SetShortExp(pfx));
     return MagickFalse;
   }
 
   if (fe == fP || fe == fS || fe == fU) {
     while (FndArgs < Functions[fe-FirstFunc].nArgs) {
       (void) AddElement (pfx, (fxFltType) 0, oNull);
       FndArgs++;
     }
   }
 
   if (FndArgs > Functions[fe-FirstFunc].nArgs) {
     (void) ThrowMagickException (
       pfx->exception, GetMagickModule(), OptionError,
       "For function", "'%s' expected %i arguments, found '%i' at '%s'",
       funStr, Functions[fe-FirstFunc].nArgs, FndArgs, SetShortExp(pfx));
     return MagickFalse;
   }
   if (FndArgs < Functions[fe-FirstFunc].nArgs) {
     (void) ThrowMagickException (
       pfx->exception, GetMagickModule(), OptionError,
       "For function", "'%s' expected %i arguments, found too few (%i) at '%s'",
       funStr, Functions[fe-FirstFunc].nArgs, FndArgs, SetShortExp(pfx));
     return MagickFalse;
   }
   if (fe != fS && fe != fV && FndArgs == 0 && Functions[fe-FirstFunc].nArgs == 0) {
     /* This is for "rand()" and similar. */
     chLimit = expChLimit;
     if (!ExpectChar (pfx, ')')) return MagickFalse;
   }
 
   if (chLimit != expChLimit) {
     (void) ThrowMagickException (
       pfx->exception, GetMagickModule(), OptionError,
       "For function", "'%s', arguments don't end with '%c' at '%s'",
       funStr, expChLimit, SetShortExp(pfx));
     return MagickFalse;
   }
   if (!PopOprOpenParen (pfx, pushOp)) {
     (void) ThrowMagickException (
       pfx->exception, GetMagickModule(), OptionError,
       "Bug: For function", "'%s' tos not '%s' at '%s'",
       funStr, Operators[pushOp].str, SetShortExp(pfx));
     return MagickFalse;
   }
 
   if (IsQualifier (pfx)) {
 
     if (fe == fU || fe == fV || fe == fS) {
 
       coordQual = (GetCoordQualifier (pfx, fe) == 1) ? MagickTrue : MagickFalse;
 
       if (coordQual) {
 
         /* Remove last element, which should be fP */
         ElementT * pel = &pfx->Elements[pfx->usedElements-1];
         if (pel->oprNum != fP) {
           (void) ThrowMagickException (
             pfx->exception, GetMagickModule(), OptionError,
             "Bug: For function", "'%s' last element not 'p' at '%s'",
             funStr, SetShortExp(pfx));
           return MagickFalse;
         }
         chQual = pel->ChannelQual;
         expChLimit = (pel->IsRelative) ? ']' : '}';
         pfx->usedElements--;
         if (fe == fU) fe = fUP;
         else if (fe == fV) fe = fVP;
         else if (fe == fS) fe = fSP;
         funStr = Functions[fe-FirstFunc].str;
       }
     }
 
     if ( chQual == NO_CHAN_QUAL &&
          (fe == fP || fe == fS || fe == fSP || fe == fU || fe == fUP || fe == fV || fe == fVP)
        )
     {
       chQual = GetChannelQualifier (pfx, fe);
     }
 
     if (chQual == NO_CHAN_QUAL && (fe == fU || fe == fV || fe == fS)) {
       /* Note: we don't allow "p.mean" etc. */
       iaQual = GetImgAttrQualifier (pfx, fe);
     }
     if (IsQualifier (pfx) && chQual == NO_CHAN_QUAL && iaQual != aNull) {
       chQual = GetChannelQualifier (pfx, fe);
     }
     if (coordQual && iaQual != aNull) {
       (void) ThrowMagickException (
         pfx->exception, GetMagickModule(), OptionError,
         "For function", "'%s', can't have qualifiers 'p' and image attribute '%s' at '%s'",
         funStr, pfx->token, SetShortExp(pfx));
       return MagickFalse;
     }
     if (!coordQual && chQual == NO_CHAN_QUAL && iaQual == aNull) {
       (void) ThrowMagickException (
         pfx->exception, GetMagickModule(), OptionError,
         "For function", "'%s', bad qualifier '%s' at '%s'",
         funStr, pfx->token, SetShortExp(pfx));
       return MagickFalse;
     }
     if (!coordQual && chQual == CompositePixelChannel && iaQual == aNull) {
       (void) ThrowMagickException (
         pfx->exception, GetMagickModule(), OptionError,
         "For function", "'%s', bad composite qualifier '%s' at '%s'",
         funStr, pfx->token, SetShortExp(pfx));
       return MagickFalse;
     }
 
     if (chQual == HUE_CHANNEL || chQual == SAT_CHANNEL || chQual == LIGHT_CHANNEL) {
       pfx->NeedHsl = MagickTrue;
 
       if (iaQual >= FirstImgAttr && iaQual < aNull) {
         (void) ThrowMagickException (
           pfx->exception, GetMagickModule(), OptionError,
           "Can't have image attribute with HLS qualifier at", "'%s'",
           SetShortExp(pfx));
         return MagickFalse;
       }
     }
   }
 
   if (fe==fWhile) {
     pfx->Elements[ndx1].EleNdx = ndx2+1;
   } else if (fe==fDo) {
     pfx->Elements[ndx0].EleNdx = ndx1+1;
     pfx->Elements[ndx1].EleNdx = ndx2+1;
   } else if (fe==fFor) {
     pfx->Elements[ndx2].EleNdx = ndx3;
   } else if (fe==fIf) {
     pfx->Elements[ndx1].EleNdx = ndx2 + 1;
     pfx->Elements[ndx2].EleNdx = ndx3;
   } else {
     if (fe == fU && iaQual == aNull) {
       ElementT * pel = &pfx->Elements[pfx->usedElements-1];
       if (pel->type == etConstant && pel->val == 0.0) {
         pfx->usedElements--;
         fe = fU0;
       }
     }
     (void) AddElement (pfx, (fxFltType) 0, fe);
     if (fe == fP || fe == fU  || fe == fU0 || fe == fUP ||
         fe == fV || fe == fVP || fe == fS || fe == fSP)
     {
       ElementT * pel = &pfx->Elements[pfx->usedElements-1];
       pel->IsRelative = (expChLimit == ']' ? MagickTrue : MagickFalse);
       if (chQual >= 0) pel->ChannelQual = chQual;
       if (iaQual != aNull && (fe == fU || fe == fV || fe == fS)) {
         /* Note: we don't allow "p[2,3].mean" or "p.mean" etc. */
         pel->ImgAttrQual = iaQual;
       }
     }
   }
 
   if (pExpStart && lenExp) {
     ElementT * pel = &pfx->Elements[pfx->usedElements-1];
     pel->pExpStart = pExpStart;
     pel->lenExp = lenExp;
   }
 
   if (fe == fDebug)
     pfx->ContainsDebug = MagickTrue;
 
   return MagickTrue;
 }
