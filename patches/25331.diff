commit 2022f2e5c905995c79fa08bb6955777573f32669
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Mon Aug 31 15:31:18 2020 +0200

    Fix nullsafe operator with delayed oplines
    
    Closes GH-6056.

diff --git a/Zend/zend_compile.c b/Zend/zend_compile.c
index 18c149de54..190e7e49d8 100644
--- a/Zend/zend_compile.c
+++ b/Zend/zend_compile.c
@@ -2218,14 +2218,19 @@ static inline uint32_t zend_delayed_compile_begin(void) /* {{{ */
 static zend_op *zend_delayed_compile_end(uint32_t offset) /* {{{ */
 {
 	zend_op *opline = NULL, *oplines = zend_stack_base(&CG(delayed_oplines_stack));
 	uint32_t i, count = zend_stack_count(&CG(delayed_oplines_stack));
 
 	ZEND_ASSERT(count >= offset);
 	for (i = offset; i < count; ++i) {
 		opline = get_next_op();
 		memcpy(opline, &oplines[i], sizeof(zend_op));
+		if (opline->opcode == ZEND_JMP_NULL) {
+			uint32_t opnum = get_next_op_number() - 1;
+			zend_stack_push(&CG(short_circuiting_opnums), &opnum);
+		}
 	}
+
 	CG(delayed_oplines_stack).top = offset;
 	return opline;
 }
 /* }}} */
@@ -2778,41 +2783,45 @@ static zend_op *zend_compile_dim(znode *result, zend_ast *ast, uint32_t type) /*
 static zend_op *zend_delayed_compile_prop(znode *result, zend_ast *ast, uint32_t type) /* {{{ */
 {
 	zend_ast *obj_ast = ast->child[0];
 	zend_ast *prop_ast = ast->child[1];
 
 	znode obj_node, prop_node;
 	zend_op *opline;
 	zend_bool nullsafe = ast->kind == ZEND_AST_NULLSAFE_PROP;
 
 	if (is_this_fetch(obj_ast)) {
 		if (this_guaranteed_exists()) {
 			obj_node.op_type = IS_UNUSED;
 		} else {
 			zend_emit_op(&obj_node, ZEND_FETCH_THIS, NULL, NULL);
 		}
 		CG(active_op_array)->fn_flags |= ZEND_ACC_USES_THIS;
 
 		/* We will throw if $this doesn't exist, so there's no need to emit a JMP_NULL
 		 * check for a nullsafe access. */
 	} else {
 		zend_short_circuiting_mark_inner(obj_ast);
 		opline = zend_delayed_compile_var(&obj_node, obj_ast, type, 0);
 		zend_separate_if_call_and_write(&obj_node, obj_ast, type);
 		if (nullsafe) {
-			zend_emit_jmp_null(&obj_node);
+			/* We will push to the short_cirtcuiting_opnums stack in zend_delayed_compile_end(). */
+			opline = zend_delayed_emit_op(NULL, ZEND_JMP_NULL, &obj_node, NULL);
+			if (opline->op1_type == IS_CONST) {
+				Z_TRY_ADDREF_P(CT_CONSTANT(opline->op1));
+			}
 		}
 	}
 
 	zend_compile_expr(&prop_node, prop_ast);
 
 	opline = zend_delayed_emit_op(result, ZEND_FETCH_OBJ_R, &obj_node, &prop_node);
 	if (opline->op2_type == IS_CONST) {
 		convert_to_string(CT_CONSTANT(opline->op2));
 		opline->extended_value = zend_alloc_cache_slots(3);
 	}
 
 	zend_adjust_for_fetch_type(opline, result, type);
 
 	return opline;
 }
 /* }}} */
