commit 635cad93737ea7f8ebd6047baf54548212ede7c7
Author: Peter Wu <peter@lekensteyn.nl>
Date:   Tue May 29 17:10:39 2018 +0200

    mstp: fix buffer overflow in COBS decoding
    
    Fix a crash (denial of service) resulting from a large buffer overrun
    (read) when the "MS/TP Length" is smaller than 3. If that is the case,
    then an integer overflow will result in a large unsigned number.
    
    Fix a buffer overflow (write) when the "code" (length) octet is 0. This
    is illegal and would result in an integer overflow. With a specially
    crafted encoded CRC-32K value, this could result in writing 255 bytes
    past the end of buffer (xoring the octets with 0x55).
    
    Make the meaning of the "length" parameter more obvious (include two
    bytes such that it reflects the input and output buffer size).
    
    Corrected based on the description in Section 9.10 of
    http://www.bacnet.org/Addenda/Add-135-2012an-PPR2-draft-rc4_chair_approved.pdf
    (note that its reference code also has this overflow issue).
    
    Bug: 14771
    Change-Id: Iac27e1151f02add4e54abb0fcae6afc94460ae23
    Fixes: v2.9.0rc0-734-g0e517232a8 ("Added support for extended length BACnet MS/TP data frames.")
    Link: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=8580
    Reviewed-on: https://code.wireshark.org/review/27897
    Petri-Dish: Peter Wu <peter@lekensteyn.nl>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Dirk Roemmen <dro@cslab.de>
    Reviewed-by: Anders Broman <a.broman58@gmail.com>

diff --git a/epan/dissectors/packet-mstp.c b/epan/dissectors/packet-mstp.c
index 9b1d186564..9a7d1e21e0 100644
--- a/epan/dissectors/packet-mstp.c
+++ b/epan/dissectors/packet-mstp.c
@@ -173,125 +173,131 @@ static int mstp_len(void)
 static guint32 calc_data_crc32(guint8 dataValue, guint32 crc32kValue)
 {
   guint8 data;
   guint8 b;
   guint32 crc;
 
   data = dataValue;
   crc = crc32kValue;
 
   for (b = 0; b < 8; b++)
   {
     if ((data & 1) ^ (crc & 1))
     {
       crc >>= 1;
       crc ^= 0xEB31D82E;
     }
     else
     {
       crc >>= 1;
     }
 
     data >>= 1;
   }
 
   return crc;
 }
 
 /*
 * Decodes 'length' octets of data located at 'from' and
 * writes the original client data at 'to', restoring any
 * 'mask' octets that may present in the encoded data.
 * Returns the length of the encoded data or zero if error.
+* The length of the encoded value is always smaller or equal to 'length'.
 */
 static gsize cobs_decode(guint8 *to, const guint8 *from, gsize length, guint8 mask)
 {
   gsize read_index = 0;
   gsize write_index = 0;
   guint8 code;
   guint8 last_code;
 
   while (read_index < length)
   {
     code = from[read_index] ^ mask;
     last_code = code;
     /*
-    * Sanity check the encoding to prevent the while() loop below
-    * from overrunning the output buffer.
-    */
-    if (read_index + code > length)
+     * A code octet equal to zero or greater than the length is illegal.
+     */
+    if (code == 0 || read_index + code > length)
       return 0;
 
     read_index++;
+    /*
+     * Decode data octets. The code octet is included in the length, but the
+     * terminating zero octet is not. (Note that a data octet of zero should not
+     * occur here since the whole point of COBS encoding is to remove zeroes.)
+     */
     while (--code > 0)
       to[write_index++] = from[read_index++] ^ mask;
 
     /*
     * Restore the implicit zero at the end of each decoded block
     * except when it contains exactly 254 non-zero octets or the
     * end of data has been reached.
     */
     if ((last_code != 255) && (read_index < length))
       to[write_index++] = 0;
   }
 
   return write_index;
 }
 
-#define ADJ_FOR_ENC_CRC 3
 #define SIZEOF_ENC_CRC 5
 #define CRC32K_INITIAL_VALUE 0xFFFFFFFF
 #define CRC32K_RESIDUE 0x0843323B
 #define MSTP_PREAMBLE_X55 0x55
 
 /*
-* Decodes Encoded Data and Encoded CRC-32K fields at 'from' and
-* writes the decoded client data at 'to'. Assumes 'length' contains
-* the actual combined length of these fields in octets (that is, the
-* MS/TP header Length field plus two).
+* Decodes Encoded Data and Encoded CRC-32K fields at 'from' (of length 'length')
+* and writes the decoded client data at 'to'.
 * Returns length of decoded Data in octets or zero if error.
 * NOTE: Safe to call with 'output' <= 'input' (decodes in place).
 */
 static gsize cobs_frame_decode(guint8 *to, const guint8 *from, gsize length)
 {
   gsize data_len;
   gsize crc_len;
   guint32 crc32K;
   guint32 i;
 
+  /* Must have enough room for the encoded CRC-32K value. */
+  if (length < SIZEOF_ENC_CRC)
+    return 0;
+
   /*
   * Calculate the CRC32K over the Encoded Data octets before decoding.
   * NOTE: Adjust 'length' by removing size of Encoded CRC-32K field.
   */
-  data_len = length - ADJ_FOR_ENC_CRC;
+  data_len = length - SIZEOF_ENC_CRC;
   crc32K = CRC32K_INITIAL_VALUE;
   for (i = 0; i < data_len; i++)
     crc32K = calc_data_crc32(from[i], crc32K);
 
   data_len = cobs_decode(to, from, data_len, MSTP_PREAMBLE_X55);
   /*
   * Decode the Encoded CRC-32K field and append to data.
   */
   crc_len = cobs_decode((guint8 *)(to + data_len),
-    (guint8 *)(from + length - ADJ_FOR_ENC_CRC),
+    (guint8 *)(from + length - SIZEOF_ENC_CRC),
     SIZEOF_ENC_CRC, MSTP_PREAMBLE_X55);
 
   /*
   * Sanity check length of decoded CRC32K.
   */
   if (crc_len != sizeof(guint32))
     return 0;
 
   /*
   * Verify CRC32K of incoming frame.
   */
   for (i = 0; i < crc_len; i++)
     crc32K = calc_data_crc32((to + data_len)[i], crc32K);
 
   if (crc32K == CRC32K_RESIDUE)
     return data_len;
 
   return 0;
 }
 
 /* dissects a BACnet MS/TP frame */
 /* preamble 0x55 0xFF is not included in Cimetrics U+4 output */
@@ -299,133 +305,133 @@ void
 dissect_mstp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree,
 	proto_tree *subtree, gint offset)
 {
 	guint8 mstp_frame_type = 0;
 	guint16 mstp_frame_pdu_len = 0;
 	guint16 mstp_tvb_pdu_len = 0;
 	guint16 vendorid = 0;
 	tvbuff_t *next_tvb = NULL;
 	proto_item *item;
 #if defined(BACNET_MSTP_CHECKSUM_VALIDATE)
 	/* used to calculate the crc value */
 	guint8 crc8 = 0xFF;
 	guint16 crc16 = 0xFFFF;
 	guint8 crcdata;
 	guint16 i; /* loop counter */
 	guint16 max_len = 0;
 #endif
 
 	col_set_str(pinfo->cinfo, COL_PROTOCOL, "BACnet");
 	col_set_str(pinfo->cinfo, COL_INFO, "BACnet MS/TP");
 	mstp_frame_type = tvb_get_guint8(tvb, offset);
 	mstp_frame_pdu_len = tvb_get_ntohs(tvb, offset+3);
 	col_append_fstr(pinfo->cinfo, COL_INFO, " %s",
 			mstp_frame_type_text(mstp_frame_type));
 
 	/* Add the items to the tree */
 	proto_tree_add_item(subtree, hf_mstp_frame_type, tvb,
 			offset, 1, ENC_LITTLE_ENDIAN);
 	proto_tree_add_item(subtree, hf_mstp_frame_destination, tvb,
 			offset+1, 1, ENC_LITTLE_ENDIAN);
 	proto_tree_add_item(subtree, hf_mstp_frame_source, tvb,
 			offset+2, 1, ENC_LITTLE_ENDIAN);
 	item = proto_tree_add_item(subtree, hf_mstp_frame_pdu_len, tvb,
 			offset+3, 2, ENC_BIG_ENDIAN);
 	mstp_tvb_pdu_len = tvb_reported_length_remaining(tvb, offset+6);
 	/* check the length - which does not include the crc16 checksum */
 	if (mstp_tvb_pdu_len > 2) {
 		if (mstp_frame_pdu_len > (mstp_tvb_pdu_len-2)) {
 			expert_add_info(pinfo, item, &ei_mstp_frame_pdu_len);
 		}
 	}
 #if defined(BACNET_MSTP_CHECKSUM_VALIDATE)
 	/* calculate checksum to validate */
 	for (i = 0; i < 5; i++) {
 		crcdata = tvb_get_guint8(tvb, offset+i);
 		crc8 = CRC_Calc_Header(crcdata, crc8);
 	}
 	crc8 = ~crc8;
 	proto_tree_add_checksum(subtree, tvb, offset+5, hf_mstp_frame_crc8, hf_mstp_frame_checksum_status, &ei_mstp_frame_checksum_bad, pinfo, crc8,
 							ENC_BIG_ENDIAN, PROTO_CHECKSUM_VERIFY);
 #else
 	proto_tree_add_checksum(subtree, tvb, offset+5, hf_mstp_frame_crc8, hf_mstp_frame_checksum_status, &ei_mstp_frame_checksum_bad, pinfo, 0,
 							PROTO_CHECKSUM_NO_FLAGS);
 #endif
 
 	/* dissect BACnet PDU if there is one */
 	offset += 6;
 
   if (mstp_frame_type == MSTP_BACNET_EXTENDED_DATA_EXPECTING_REPLY ||
       mstp_frame_type == MSTP_BACNET_EXTENDED_DATA_NOT_EXPECTING_REPLY) {
     /* handle extended frame types differently because their data need to
        be 'decoded' first */
     guint8 *decode_base;
     tvbuff_t *decoded_tvb;
     guint16 decoded_len = mstp_frame_pdu_len;
 
     decode_base = (guint8 *)tvb_memdup(pinfo->pool, tvb, offset, mstp_frame_pdu_len + 2);
-    decoded_len = (guint16)cobs_frame_decode(decode_base, decode_base, decoded_len);
+    decoded_len = (guint16)cobs_frame_decode(decode_base, decode_base, decoded_len + 2);
     if (decoded_len > 0) {
       decoded_tvb = tvb_new_real_data(decode_base, decoded_len, decoded_len);
       tvb_set_child_real_data_tvbuff(tvb, decoded_tvb);
       add_new_data_source(pinfo, decoded_tvb, "Decoded Data");
 
       if (!(dissector_try_uint(subdissector_table, (vendorid << 16) + mstp_frame_type,
         decoded_tvb, pinfo, tree))) {
         /* Unknown function - dissect the payload as data */
         call_data_dissector(decoded_tvb, pinfo, tree);
       }
 
       proto_tree_add_checksum(subtree, tvb, offset + mstp_frame_pdu_len, hf_mstp_frame_crc16, hf_mstp_frame_checksum_status, &ei_mstp_frame_checksum_bad,
         pinfo, tvb_get_ntohs(tvb, offset + mstp_frame_pdu_len), ENC_BIG_ENDIAN, PROTO_CHECKSUM_VERIFY);
     } else {
       next_tvb = tvb_new_subset_length(tvb, offset,
         mstp_tvb_pdu_len);
       call_data_dissector(next_tvb, pinfo, tree);
       proto_tree_add_checksum(subtree, tvb, offset + mstp_frame_pdu_len, hf_mstp_frame_crc16, hf_mstp_frame_checksum_status, &ei_mstp_frame_checksum_bad, pinfo, 0,
         ENC_BIG_ENDIAN, PROTO_CHECKSUM_NO_FLAGS);
     }
   }
   else if (mstp_tvb_pdu_len > 2) {
 		/* remove the 16-bit crc checksum bytes */
 		mstp_tvb_pdu_len -= 2;
 		if (mstp_frame_type < 128) {
 			vendorid = 0;
 			next_tvb = tvb_new_subset_length(tvb, offset,
 				mstp_tvb_pdu_len);
 		} else {
 			/* With Vendor ID */
 			vendorid = tvb_get_ntohs(tvb, offset);
 
 			/* Write Vendor ID as tree */
 			proto_tree_add_item(subtree, hf_mstp_frame_vendor_id, tvb,
 				offset, 2, ENC_BIG_ENDIAN);
 
 			/* NPDU - call the Vendor specific dissector */
 			next_tvb = tvb_new_subset_length_caplen(tvb, offset+2,
 				mstp_tvb_pdu_len-2, mstp_frame_pdu_len);
 		}
 
 		if (!(dissector_try_uint(subdissector_table, (vendorid<<16) + mstp_frame_type,
 			next_tvb, pinfo, tree))) {
 				/* Unknown function - dissect the payload as data */
 				call_data_dissector(next_tvb, pinfo, tree);
 		}
 #if defined(BACNET_MSTP_CHECKSUM_VALIDATE)
 		/* 16-bit checksum - calculate to validate */
 		max_len = MIN(mstp_frame_pdu_len, mstp_tvb_pdu_len);
 		for (i = 0; i < max_len; i++) {
 			crcdata = tvb_get_guint8(tvb, offset+i);
 			crc16 = CRC_Calc_Data(crcdata, crc16);
 		}
 		crc16 = ~crc16;
 		/* convert it to on-the-wire format */
 		crc16 = g_htons(crc16);
 
 		proto_tree_add_checksum(subtree, tvb, offset+mstp_frame_pdu_len, hf_mstp_frame_crc16, hf_mstp_frame_checksum_status, &ei_mstp_frame_checksum_bad, pinfo, crc16,
 							ENC_BIG_ENDIAN, PROTO_CHECKSUM_VERIFY);
 #else
 		proto_tree_add_checksum(subtree, tvb, offset+mstp_frame_pdu_len, hf_mstp_frame_crc16, hf_mstp_frame_checksum_status, &ei_mstp_frame_checksum_bad, pinfo, 0,
 							ENC_BIG_ENDIAN, PROTO_CHECKSUM_NO_FLAGS);
 #endif
 	}
 }
