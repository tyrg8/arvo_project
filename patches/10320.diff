commit 8051d38358293df1e5b8a1a513f8114147ec9fa3
Author: Robert Phillips <robertphillips@google.com>
Date:   Thu Sep 13 08:22:15 2018 -0400

    Fix SkPath::reverseAddPath and fuzzing of SkPath enums
    
    Bug: 882423
    Change-Id: I2be2863574a5951b86e4d5e213094efee6081098
    Reviewed-on: https://skia-review.googlesource.com/154300
    Reviewed-by: Kevin Lubick <kjlubick@google.com>
    Reviewed-by: Greg Daniel <egdaniel@google.com>
    Commit-Queue: Robert Phillips <robertphillips@google.com>

diff --git a/fuzz/FuzzCommon.cpp b/fuzz/FuzzCommon.cpp
index 8176d7fb55..d6aa94eb86 100644
--- a/fuzz/FuzzCommon.cpp
+++ b/fuzz/FuzzCommon.cpp
@@ -11,170 +11,187 @@
 // allows some float values for path points
 void FuzzPath(Fuzz* fuzz, SkPath* path, int maxOps) {
     if (maxOps <= 0) {
         return;
     }
     uint8_t fillType;
     fuzz->nextRange(&fillType, 0, (uint8_t)SkPath::kInverseEvenOdd_FillType);
     path->setFillType((SkPath::FillType)fillType);
     uint8_t numOps;
     fuzz->nextRange(&numOps, 0, maxOps);
     for (uint8_t i = 0; i < numOps; ++i) {
         uint8_t op;
         fuzz->nextRange(&op, 0, 32);
         bool test;
         SkPath p;
         SkMatrix m;
         SkRRect rr;
         SkRect r;
         SkPath::Direction dir;
         unsigned int ui;
         SkScalar a, b, c, d, e, f;
         switch (op) {
             case 0:
                 fuzz_nice_float(fuzz, &a, &b);
                 path->moveTo(a, b);
                 break;
             case 1:
                 fuzz_nice_float(fuzz, &a, &b);
                 path->rMoveTo(a, b);
                 break;
             case 2:
                 fuzz_nice_float(fuzz, &a, &b);
                 path->lineTo(a, b);
                 break;
             case 3:
                 fuzz_nice_float(fuzz, &a, &b);
                 path->rLineTo(a, b);
                 break;
             case 4:
                 fuzz_nice_float(fuzz, &a, &b, &c, &d);
                 path->quadTo(a, b, c, d);
                 break;
             case 5:
                 fuzz_nice_float(fuzz, &a, &b, &c, &d);
                 path->rQuadTo(a, b, c, d);
                 break;
             case 6:
                 fuzz_nice_float(fuzz, &a, &b, &c, &d, &e);
                 path->conicTo(a, b, c, d, e);
                 break;
             case 7:
                 fuzz_nice_float(fuzz, &a, &b, &c, &d, &e);
                 path->rConicTo(a, b, c, d, e);
                 break;
             case 8:
                 fuzz_nice_float(fuzz, &a, &b, &c, &d, &e, &f);
                 path->cubicTo(a, b, c, d, e, f);
                 break;
             case 9:
                 fuzz_nice_float(fuzz, &a, &b, &c, &d, &e, &f);
                 path->rCubicTo(a, b, c, d, e, f);
                 break;
             case 10:
                 fuzz_nice_float(fuzz, &a, &b, &c, &d, &e);
                 path->arcTo(a, b, c, d, e);
                 break;
             case 11:
                 fuzz_nice_float(fuzz, &a, &b);
                 fuzz->next(&r, &test);
                 path->arcTo(r, a, b, test);
                 break;
             case 12:
                 path->close();
                 break;
             case 13:
-                fuzz->next(&r, &dir);
+                fuzz->next(&r);
+                fuzz->nextRange(&ui, 0, 1);
+                dir = static_cast<SkPath::Direction>(ui);
                 path->addRect(r, dir);
                 break;
             case 14:
-                fuzz->next(&r, &dir, &ui);
+                fuzz->nextRange(&ui, 0, 1);
+                dir = static_cast<SkPath::Direction>(ui);
+                fuzz->next(&r, &ui);
                 path->addRect(r, dir, ui);
                 break;
             case 15:
-                fuzz->next(&r, &dir);
+                fuzz->nextRange(&ui, 0, 1);
+                dir = static_cast<SkPath::Direction>(ui);
+                fuzz->next(&r);
                 path->addOval(r, dir);
                 break;
             case 16:
-                fuzz->next(&r, &dir, &ui);
+                fuzz->nextRange(&ui, 0, 1);
+                dir = static_cast<SkPath::Direction>(ui);
+                fuzz->next(&r, &ui);
                 path->addOval(r, dir, ui);
                 break;
             case 17:
+                fuzz->nextRange(&ui, 0, 1);
+                dir = static_cast<SkPath::Direction>(ui);
                 fuzz_nice_float(fuzz, &a, &b, &c);
-                fuzz->next(&dir);
                 path->addCircle(a, b, c, dir);
                 break;
             case 18:
                 fuzz->next(&r);
                 fuzz_nice_float(fuzz, &a, &b);
                 path->addArc(r, a, b);
                 break;
             case 19:
                 fuzz_nice_float(fuzz, &a, &b);
-                fuzz->next(&r, &dir);
+                fuzz->next(&r);
+                fuzz->nextRange(&ui, 0, 1);
+                dir = static_cast<SkPath::Direction>(ui);
                 path->addRoundRect(r, a, b, dir);
                 break;
             case 20:
-                fuzz->next(&rr, &dir);
+                fuzz->next(&rr);
+                fuzz->nextRange(&ui, 0, 1);
+                dir = static_cast<SkPath::Direction>(ui);
                 path->addRRect(rr, dir);
                 break;
             case 21:
-                fuzz->next(&rr, &dir, &ui);
+                fuzz->nextRange(&ui, 0, 1);
+                dir = static_cast<SkPath::Direction>(ui);
+                fuzz->next(&rr, &ui);
                 path->addRRect(rr, dir, ui);
                 break;
             case 22: {
-                SkPath::AddPathMode mode;
-                fuzz->next(&m, &mode);
+                fuzz->nextRange(&ui, 0, 1);
+                SkPath::AddPathMode mode = static_cast<SkPath::AddPathMode>(ui);
+                fuzz->next(&m);
                 FuzzPath(fuzz, &p, maxOps-1);
                 path->addPath(p, m, mode);
                 break;
             }
             case 23: {
-                SkPath::AddPathMode mode;
-                fuzz->next(&m, &mode);
+                fuzz->nextRange(&ui, 0, 1);
+                SkPath::AddPathMode mode = static_cast<SkPath::AddPathMode>(ui);
+                fuzz->next(&m);
                 path->addPath(*path, m, mode);
                 break;
             }
             case 24:
                 FuzzPath(fuzz, &p, maxOps-1);
                 path->reverseAddPath(p);
                 break;
             case 25:
                 path->addPath(*path);
                 break;
             case 26:
                 path->reverseAddPath(*path);
                 break;
             case 27:
                 fuzz_nice_float(fuzz, &a, &b);
                 path->offset(a, b, path);
                 break;
             case 28:
                 FuzzPath(fuzz, &p, maxOps-1);
                 fuzz_nice_float(fuzz, &a, &b);
                 p.offset(a, b, path);
                 break;
             case 29:
                 fuzz->next(&m);
                 path->transform(m, path);
                 break;
             case 30:
                 FuzzPath(fuzz, &p, maxOps-1);
                 fuzz->next(&m);
                 p.transform(m, path);
                 break;
             case 31:
                 fuzz_nice_float(fuzz, &a, &b);
                 path->setLastPt(a, b);
                 break;
             case 32:
                 path->shrinkToFit();
                 break;
 
             default:
                 SkASSERT(false);
                 break;
         }
     }
 }
 
 // allows all float values for path points
diff --git a/src/core/SkPath.cpp b/src/core/SkPath.cpp
index 34704774b0..2808c12ed4 100644
--- a/src/core/SkPath.cpp
+++ b/src/core/SkPath.cpp
@@ -1708,56 +1708,63 @@ SkPath& SkPath::reversePathTo(const SkPath& path) {
     return *this;
 }
 
-SkPath& SkPath::reverseAddPath(const SkPath& src) {
-    SkPathRef::Editor ed(&fPathRef, src.fPathRef->countPoints(), src.fPathRef->countVerbs());
+SkPath& SkPath::reverseAddPath(const SkPath& srcPath) {
+    // Detect if we're trying to add ourself
+    const SkPath* src = &srcPath;
+    SkTLazy<SkPath> tmp;
+    if (this == src) {
+        src = tmp.set(srcPath);
+    }
+
+    SkPathRef::Editor ed(&fPathRef, src->fPathRef->countPoints(), src->fPathRef->countVerbs());
 
-    const SkPoint* pts = src.fPathRef->pointsEnd();
+    const SkPoint* pts = src->fPathRef->pointsEnd();
     // we will iterator through src's verbs backwards
-    const uint8_t* verbs = src.fPathRef->verbsMemBegin(); // points at the last verb
-    const uint8_t* verbsEnd = src.fPathRef->verbs(); // points just past the first verb
-    const SkScalar* conicWeights = src.fPathRef->conicWeightsEnd();
+    const uint8_t* verbs = src->fPathRef->verbsMemBegin(); // points at the last verb
+    const uint8_t* verbsEnd = src->fPathRef->verbs(); // points just past the first verb
+    const SkScalar* conicWeights = src->fPathRef->conicWeightsEnd();
 
     bool needMove = true;
     bool needClose = false;
     while (verbs < verbsEnd) {
         uint8_t v = *(verbs++);
         int n = pts_in_verb(v);
 
         if (needMove) {
             --pts;
             this->moveTo(pts->fX, pts->fY);
             needMove = false;
         }
         pts -= n;
         switch (v) {
             case kMove_Verb:
                 if (needClose) {
                     this->close();
                     needClose = false;
                 }
                 needMove = true;
                 pts += 1;   // so we see the point in "if (needMove)" above
                 break;
             case kLine_Verb:
                 this->lineTo(pts[0]);
                 break;
             case kQuad_Verb:
                 this->quadTo(pts[1], pts[0]);
                 break;
             case kConic_Verb:
                 this->conicTo(pts[1], pts[0], *--conicWeights);
                 break;
             case kCubic_Verb:
                 this->cubicTo(pts[2], pts[1], pts[0]);
                 break;
             case kClose_Verb:
                 needClose = true;
                 break;
             default:
                 SkDEBUGFAIL("unexpected verb");
         }
     }
     return *this;
 }
 
 ///////////////////////////////////////////////////////////////////////////////
