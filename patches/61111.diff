commit 269738d6ce42a2e4979bfca33328fbf0bf0e6d10
Author: Douglas Bagnall <douglas.bagnall@catalyst.net.nz>
Date:   Fri Jul 28 15:36:21 2023 +1200

    lib/replace: fix strlcat/strlcpy compile for Honggfuzz
    
    Otherwise we getthis kind of thing:
    
    ../../lib/replace/replace.c:837:3: error: implicit declaration of function 'strlcpy' is invalid in C99 [-Werror,-Wimplicit-function-declaration]
                    strlcpy(buf, s, buflen);
    
    ../../third_party/heimdal/lib/roken/getarg.c:288:6: error: implicit declaration of function 'strlcat' is invalid in C99 [-Werror,-Wimplicit-function-declaration]
                strlcat(buf, "]", sizeof(buf));
    
    because we found the symbol names in libc, but didn't check that the
    functions are declared in <string.h>. We already include
    <bsd/string.h> whenever we have it.
    
    Signed-off-by: Douglas Bagnall <douglas.bagnall@catalyst.net.nz>
    Reviewed-by: Andrew Bartlett <abartlet@samba.org>
    
    Autobuild-User(master): Andrew Bartlett <abartlet@samba.org>
    Autobuild-Date(master): Tue Aug  8 05:35:08 UTC 2023 on atb-devel-224

diff --git a/lib/replace/wscript b/lib/replace/wscript
index 37d77593900..77e655bb68b 100644
--- a/lib/replace/wscript
+++ b/lib/replace/wscript
@@ -28,466 +28,477 @@ def options(opt):
 @Utils.run_once
 def configure(conf):
     conf.RECURSE('buildtools/wafsamba')
 
     conf.env.standalone_replace = conf.IN_LAUNCH_DIR()
 
     if sys.platform.rfind('linux') > -1:
         conf.DEFINE('LINUX', '1')
 
     conf.DEFINE('BOOL_DEFINED', 1)
     conf.DEFINE('HAVE_LIBREPLACE', 1)
     conf.DEFINE('LIBREPLACE_NETWORK_CHECKS', 1)
 
     conf.CHECK_HEADERS('linux/types.h crypt.h locale.h acl/libacl.h compat.h')
     conf.CHECK_HEADERS('acl/libacl.h attr/xattr.h compat.h ctype.h dustat.h')
     conf.CHECK_HEADERS('fcntl.h fnmatch.h glob.h history.h krb5.h langinfo.h')
     conf.CHECK_HEADERS('locale.h ndir.h pwd.h')
     conf.CHECK_HEADERS('shadow.h sys/acl.h')
     conf.CHECK_HEADERS('sys/attributes.h attr/attributes.h sys/capability.h sys/dir.h sys/epoll.h')
     conf.CHECK_HEADERS('sys/fcntl.h sys/filio.h sys/filsys.h sys/fs/s5param.h')
     conf.CHECK_HEADERS('sys/id.h sys/ioctl.h sys/ipc.h sys/mman.h sys/mode.h sys/ndir.h sys/priv.h')
     conf.CHECK_HEADERS('sys/resource.h sys/security.h sys/shm.h sys/statfs.h sys/statvfs.h sys/termio.h')
     conf.CHECK_HEADERS('sys/vfs.h sys/xattr.h termio.h termios.h sys/file.h')
     conf.CHECK_HEADERS('sys/ucontext.h sys/wait.h sys/stat.h')
 
     if not conf.CHECK_DECLS('malloc', headers='stdlib.h'):
         conf.CHECK_HEADERS('malloc.h')
 
     conf.CHECK_HEADERS('grp.h')
     conf.CHECK_HEADERS('sys/select.h setjmp.h utime.h sys/syslog.h syslog.h')
     conf.CHECK_HEADERS('stdarg.h vararg.h sys/mount.h mntent.h')
     conf.CHECK_HEADERS('stropts.h unix.h string.h strings.h sys/param.h limits.h')
     conf.CHECK_HEADERS('''sys/socket.h netinet/in.h netdb.h arpa/inet.h netinet/in_systm.h
                           netinet/ip.h netinet/tcp.h netinet/in_ip.h
                           sys/sockio.h sys/un.h''', together=True)
     conf.CHECK_HEADERS('sys/uio.h ifaddrs.h direct.h dirent.h')
     conf.CHECK_HEADERS('windows.h winsock2.h ws2tcpip.h')
     conf.CHECK_HEADERS('errno.h')
     conf.CHECK_HEADERS('getopt.h iconv.h')
     conf.CHECK_HEADERS('memory.h nss.h sasl/sasl.h')
     conf.CHECK_HEADERS('linux/openat2.h')
 
     conf.CHECK_FUNCS_IN('inotify_init', 'inotify', checklibc=True,
                         headers='sys/inotify.h')
 
     conf.CHECK_HEADERS('security/pam_appl.h zlib.h asm/unistd.h')
     conf.CHECK_HEADERS('sys/unistd.h alloca.h float.h')
 
     conf.SET_TARGET_TYPE('tirpc', 'EMPTY')
 
     if conf.CHECK_CODE(
             '\n#ifndef _TIRPC_RPC_H\n#error "no tirpc headers in system path"\n#endif\n',
             'HAVE_RPC_RPC_HEADERS',
             headers=['rpc/rpc.h', 'rpc/nettype.h'],
             msg='Checking for tirpc rpc headers in default system path'):
         if conf.CONFIG_SET('HAVE_RPC_RPC_H'):
             conf.undefine('HAVE_RPC_RPC_H')
 
     if not conf.CONFIG_SET('HAVE_RPC_RPC_H'):
         if conf.CHECK_CFG(package='libtirpc', args='--cflags --libs',
                        msg='Checking for libtirpc headers',
                        uselib_store='TIRPC'):
             conf.CHECK_HEADERS('rpc/rpc.h rpc/nettype.h', lib='tirpc', together=True)
             conf.SET_TARGET_TYPE('tirpc', 'SYSLIB')
     if not conf.CONFIG_SET('HAVE_RPC_RPC_H'):
         if conf.CHECK_CFG(package='libntirpc', args='--cflags',
                        msg='Checking for libntirpc headers',
                        uselib_store='TIRPC'):
             conf.CHECK_HEADERS('rpc/rpc.h rpc/nettype.h', lib='tirpc', together=True)
             conf.SET_TARGET_TYPE('tirpc', 'SYSLIB')
     if not conf.CONFIG_SET('HAVE_RPC_RPC_H'):
             Logs.warn('No rpc/rpc.h header found, tirpc or libntirpc missing?')
 
     # This file is decprecated with glibc >= 2.30 so we need to check if it
     # includes a deprecation warning:
     # #warning "The <sys/sysctl.h> header is deprecated and will be removed."
     conf.CHECK_CODE('''
                     #include <sys/sysctl.h>
                     int main(void) { return 0; }
                     ''',
                     define='HAVE_SYS_SYSCTL_H',
                     cflags=['-Werror=cpp'],
                     addmain=False,
                     msg='Checking for header sys/sysctl.h')
 
     conf.CHECK_HEADERS('sys/fileio.h sys/filesys.h sys/dustat.h sys/sysmacros.h')
     conf.CHECK_HEADERS('xfs/libxfs.h netgroup.h')
 
     conf.CHECK_HEADERS('valgrind.h valgrind/valgrind.h')
     conf.CHECK_HEADERS('valgrind/memcheck.h valgrind/helgrind.h valgrind/callgrind.h')
     conf.CHECK_HEADERS('nss_common.h nsswitch.h ns_api.h')
     conf.CHECK_HEADERS('sys/extattr.h sys/ea.h sys/proplist.h sys/cdefs.h')
     conf.CHECK_HEADERS('utmp.h utmpx.h lastlog.h')
     conf.CHECK_HEADERS('syscall.h sys/syscall.h inttypes.h')
     conf.CHECK_HEADERS('sys/atomic.h stdatomic.h')
     conf.CHECK_HEADERS('libgen.h')
 
     if conf.CHECK_CFLAGS('-Wno-format-truncation'):
         conf.define('HAVE_WNO_FORMAT_TRUNCATION', '1')
 
     if conf.CHECK_CFLAGS('-Wno-unused-function'):
         conf.define('HAVE_WNO_UNUSED_FUNCTION', '1')
 
     if conf.CHECK_CFLAGS('-Wno-strict-overflow'):
         conf.define('HAVE_WNO_STRICT_OVERFLOW', '1')
 
     if conf.CHECK_CFLAGS('-Wno-unused-but-set-variable'):
         conf.define('HAVE_WNO_UNUSED_BUT_SET_VARIABLE', '1')
 
     if conf.CHECK_CFLAGS('-Wuse-after-free=1'):
         conf.define('HAVE_WUSE_AFTER_FREE_1', '1')
 
     # Check for process set name support
     conf.CHECK_CODE('''
                     #include <sys/prctl.h>
                     int main(void) {
                         prctl(0);
                         return 0;
                     }
                     ''',
                     'HAVE_PRCTL',
                     addmain=False,
                     headers='sys/prctl.h',
                     msg='Checking for prctl syscall')
 
     conf.CHECK_CODE('''
                     #include <unistd.h>
                     #ifdef HAVE_FCNTL_H
                     #include <fcntl.h>
                     #endif
                     int main(void) { int fd = open("/dev/null", O_DIRECT); }
                     ''',
                     define='HAVE_OPEN_O_DIRECT',
                     addmain=False,
                     msg='Checking for O_DIRECT flag to open(2)')
 
     conf.CHECK_TYPES('"long long" intptr_t uintptr_t ptrdiff_t comparison_fn_t')
     if not conf.CHECK_TYPE('bool', define='HAVE_BOOL', headers='stdbool.h'):
             raise Errors.WafError('Samba requires a genuine boolean type')
 
     conf.CHECK_TYPE('int8_t', 'char')
     conf.CHECK_TYPE('uint8_t', 'unsigned char')
     conf.CHECK_TYPE('int16_t', 'short')
     conf.CHECK_TYPE('uint16_t', 'unsigned short')
     conf.CHECK_TYPE('int32_t', 'int')
     conf.CHECK_TYPE('uint32_t', 'unsigned')
     conf.CHECK_TYPE('int64_t', 'long long')
     conf.CHECK_TYPE('uint64_t', 'unsigned long long')
     conf.CHECK_TYPE('size_t', 'unsigned int')
     conf.CHECK_TYPE('ssize_t', 'int')
     conf.CHECK_TYPE('ino_t', 'unsigned')
     conf.CHECK_TYPE('loff_t', 'off_t')
     conf.CHECK_TYPE('offset_t', 'loff_t')
     conf.CHECK_TYPE('volatile int', define='HAVE_VOLATILE')
     conf.CHECK_TYPE('uint_t', 'unsigned int')
     conf.CHECK_TYPE('blksize_t', 'long', headers='sys/types.h sys/stat.h unistd.h')
     conf.CHECK_TYPE('blkcnt_t', 'long', headers='sys/types.h sys/stat.h unistd.h')
 
     conf.CHECK_SIZEOF('bool char int "long long" long short size_t ssize_t')
     sizeof_int = conf.env["SIZEOF_INT"]
     if sizeof_int < 4:
         conf.fatal(f"Samba won't work with int of size {sizeof_int} (requires >= 4)")
 
     conf.CHECK_SIZEOF('int8_t uint8_t int16_t uint16_t int32_t uint32_t int64_t uint64_t')
     conf.CHECK_SIZEOF('void*', define='SIZEOF_VOID_P')
     conf.CHECK_SIZEOF('off_t dev_t ino_t time_t')
 
     conf.CHECK_TYPES('socklen_t', headers='sys/socket.h')
     conf.CHECK_TYPE_IN('struct ifaddrs', 'ifaddrs.h')
     conf.CHECK_TYPE_IN('struct addrinfo', 'netdb.h')
     conf.CHECK_TYPE_IN('struct sockaddr', 'sys/socket.h')
     conf.CHECK_CODE('struct sockaddr_in6 x', define='HAVE_STRUCT_SOCKADDR_IN6',
                     headers='sys/socket.h netdb.h netinet/in.h')
     conf.CHECK_TYPE_IN('struct sockaddr_storage', 'sys/socket.h')
     conf.CHECK_TYPE_IN('sa_family_t', 'sys/socket.h')
 
     conf.CHECK_TYPE_IN('sig_atomic_t', 'signal.h', define='HAVE_SIG_ATOMIC_T_TYPE')
     conf.CHECK_FUNCS('sigsetmask siggetmask sigprocmask sigblock sigaction sigset')
 
     # Those functions are normally available in libc
     if not conf.CHECK_FUNCS('''
                             inet_ntoa
                             inet_aton
                             inet_ntop
                             inet_pton
                             connect
                             gethostbyname
                             getaddrinfo
                             getnameinfo
                             freeaddrinfo
                             gai_strerror
                             socketpair''',
                             headers='sys/socket.h netinet/in.h arpa/inet.h netdb.h'):
         conf.CHECK_FUNCS_IN('''
                             inet_ntoa
                             inet_aton
                             inet_ntop
                             inet_pton
                             connect
                             gethostbyname
                             getaddrinfo
                             getnameinfo
                             freeaddrinfo
                             gai_strerror
                             socketpair''',
                             'socket nsl',
                             headers='sys/socket.h netinet/in.h arpa/inet.h netdb.h')
         conf.DEFINE('REPLACE_REQUIRES_LIBSOCKET_LIBNSL', 1)
 
     conf.CHECK_FUNCS('memset_s memset_explicit')
 
     conf.CHECK_CODE('''
                     #include <string.h>
 
                     int main(void)
                     {
                         char buf[] = "This is some content";
                         memset(buf, '\0', sizeof(buf)); __asm__ volatile("" : : "g"(&buf) : "memory");
                         return 0;
                     }
                     ''',
                     define='HAVE_GCC_VOLATILE_MEMORY_PROTECTION',
                     addmain=False,
                     msg='Checking for volatile memory protection',
                     local_include=False)
 
     # Some old Linux systems have broken header files and
     # miss the IPV6_V6ONLY define in netinet/in.h,
     # but have it in linux/in6.h.
     # We can't include both files so we just check if the value
     # if defined and do the replacement in system/network.h
     if not conf.CHECK_VARIABLE('IPV6_V6ONLY',
                                headers='sys/socket.h netdb.h netinet/in.h'):
         conf.CHECK_CODE('''
                         #include <linux/in6.h>
                         #if (IPV6_V6ONLY != 26)
                         #error no IPV6_V6ONLY support on linux
                         #endif
                         int main(void) { return IPV6_V6ONLY; }
                         ''',
                         define='HAVE_LINUX_IPV6_V6ONLY_26',
                         addmain=False,
                         msg='Checking for IPV6_V6ONLY in linux/in6.h',
                         local_include=False)
 
     conf.CHECK_CODE('''
                        struct sockaddr_storage sa_store;
                        struct addrinfo *ai = NULL;
                        struct in6_addr in6addr;
                        int idx = if_nametoindex("iface1");
                        int s = socket(AF_INET6, SOCK_STREAM, 0);
                        int ret = getaddrinfo(NULL, NULL, NULL, &ai);
                        if (ret != 0) {
                            const char *es = gai_strerror(ret);
                        }
                        freeaddrinfo(ai);
                        {
                           int val = 1;
                           #ifdef HAVE_LINUX_IPV6_V6ONLY_26
                           #define IPV6_V6ONLY 26
                           #endif
                           ret = setsockopt(s, IPPROTO_IPV6, IPV6_V6ONLY,
                                            (const void *)&val, sizeof(val));
                        }
                        ''',
                     define='HAVE_IPV6',
                     lib='nsl socket',
                     headers='sys/socket.h netdb.h netinet/in.h net/if.h')
 
     if conf.CONFIG_SET('HAVE_SYS_UCONTEXT_H') and conf.CONFIG_SET('HAVE_SIGNAL_H'):
         conf.CHECK_CODE('''
                        ucontext_t uc;
                        sigaddset(&uc.uc_sigmask, SIGUSR1);
                        ''',
                        'HAVE_UCONTEXT_T',
                        msg="Checking whether we have ucontext_t",
                        headers='signal.h sys/ucontext.h')
 
     # Check for atomic builtins. */
     conf.CHECK_CODE('''
                     int i;
                     (void)__sync_fetch_and_add(&i, 1);
                     ''',
                     'HAVE___SYNC_FETCH_AND_ADD',
                     msg='Checking for __sync_fetch_and_add compiler builtin')
 
     conf.CHECK_CODE('''
                     int i;
                     (void)__sync_add_and_fetch(&i, 1);
                     ''',
                     'HAVE___SYNC_ADD_AND_FETCH',
                     msg='Checking for __sync_add_and_fetch compiler builtin')
 
     conf.CHECK_CODE('''
                     int32_t i;
                     atomic_add_32(&i, 1);
                     ''',
                     'HAVE_ATOMIC_ADD_32',
                     headers='stdint.h sys/atomic.h',
                     msg='Checking for atomic_add_32 compiler builtin')
 
     conf.CHECK_CODE('''
                     uint32_t i,j;
                     j = __atomic_add_fetch(&i,1,__ATOMIC_SEQ_CST)
                     ''',
                     'HAVE___ATOMIC_ADD_FETCH',
                     headers='stdint.h',
                     msg='Checking for __atomic_add_fetch compiler builtin')
 
     conf.CHECK_CODE('''
                     uint32_t i,j;
                     __atomic_load(&i,&j,__ATOMIC_SEQ_CST)
                     ''',
                     'HAVE___ATOMIC_ADD_LOAD',
                     headers='stdint.h',
                     msg='Checking for __atomic_load compiler builtin')
 
     # Check for thread fence. */
     tf = conf.CHECK_CODE('atomic_thread_fence(memory_order_seq_cst);',
                          'HAVE_ATOMIC_THREAD_FENCE',
                          headers='stdatomic.h',
                          msg='Checking for atomic_thread_fence(memory_order_seq_cst) in stdatomic.h')
     if not tf:
         tf = conf.CHECK_CODE('__atomic_thread_fence(__ATOMIC_SEQ_CST);',
                              'HAVE___ATOMIC_THREAD_FENCE',
                              msg='Checking for __atomic_thread_fence(__ATOMIC_SEQ_CST)')
     if not tf:
         # __sync_synchronize() is available since 2005 in gcc.
         tf = conf.CHECK_CODE('__sync_synchronize();',
                              'HAVE___SYNC_SYNCHRONIZE',
                              msg='Checking for __sync_synchronize')
     if tf:
         conf.DEFINE('HAVE_ATOMIC_THREAD_FENCE_SUPPORT', 1)
 
     conf.CHECK_CODE('''
                     #define FALL_THROUGH __attribute__((fallthrough))
 
                     enum direction_e {
                         UP = 0,
                         DOWN,
                     };
 
                     int main(void) {
                         enum direction_e key = UP;
                         int i = 10;
                         int j = 0;
 
                         switch (key) {
                         case UP:
                             i = 5;
                             FALL_THROUGH;
                         case DOWN:
                             j = i * 2;
                             break;
                         default:
                             break;
                         }
 
                         if (j < i) {
                             return 1;
                         }
 
                         return 0;
                     }
                     ''',
                     'HAVE_FALLTHROUGH_ATTRIBUTE',
                     addmain=False,
                     strict=True,
                     cflags=['-Werror=missing-declarations'],
                     msg='Checking for fallthrough attribute')
 
     # these may be builtins, so we need the link=False strategy
     conf.CHECK_FUNCS('strdup memmem printf memset memcpy memmove strcpy strncpy bzero', link=False)
 
     # See https://bugzilla.samba.org/show_bug.cgi?id=1097
     #
     # Ported in from autoconf where it was added with this commit:
     # commit 804cfb20a067b4b687089dc72a8271b3abf20f31
     # Author: Simo Sorce <idra@samba.org>
     # Date:   Wed Aug 25 14:24:16 2004 +0000
     #     r2070: Let's try to overload srnlen and strndup for AIX where they are natly broken.
 
     host_os = sys.platform
     if host_os.rfind('aix') > -1:
         conf.DEFINE('BROKEN_STRNLEN', 1)
         conf.DEFINE('BROKEN_STRNDUP', 1)
 
     conf.CHECK_FUNCS('shl_load shl_unload shl_findsym')
     conf.CHECK_FUNCS('pipe strftime srandom random srand rand usleep setbuffer')
     conf.CHECK_FUNCS('lstat getpgrp utime utimes setuid seteuid setreuid setresuid setgid setegid')
     conf.CHECK_FUNCS('setregid setresgid chroot strerror vsyslog setlinebuf mktime')
     conf.CHECK_FUNCS('ftruncate chsize rename waitpid wait4')
     conf.CHECK_FUNCS('initgroups pread pwrite strndup strcasestr strsep')
     conf.CHECK_FUNCS('strtok_r mkdtemp dup2 dprintf vdprintf isatty chown lchown')
     conf.CHECK_FUNCS('link readlink symlink realpath snprintf vsnprintf')
     conf.CHECK_FUNCS('asprintf vasprintf setenv unsetenv strnlen strtoull __strtoull')
     conf.CHECK_FUNCS('strtouq strtoll __strtoll strtoq memalign posix_memalign')
     conf.CHECK_FUNCS('fmemopen')
 
     if conf.CONFIG_SET('HAVE_MEMALIGN'):
         conf.CHECK_DECLS('memalign', headers='malloc.h')
 
     # glibc up to 2.3.6 had dangerously broken posix_fallocate(). DON'T USE IT.
     if conf.CHECK_CODE('''
 #define _XOPEN_SOURCE 600
 #include <stdlib.h>
 #if defined(__GLIBC__) && ((__GLIBC__ < 2) || (__GLIBC__ == 2 && __GLIBC_MINOR__ < 4))
 #error probably broken posix_fallocate
 #endif
 ''',
                        '_POSIX_FALLOCATE_CAPABLE_LIBC',
                        msg='Checking for posix_fallocate-capable libc'):
         conf.CHECK_FUNCS('posix_fallocate')
 
     conf.CHECK_FUNCS('prctl dirname basename')
 
     strlcpy_in_bsd = False
 
     # libbsd on some platforms provides strlcpy and strlcat
     if not conf.CHECK_FUNCS('strlcpy strlcat'):
         if conf.CHECK_FUNCS_IN('strlcpy strlcat', 'bsd', headers='bsd/string.h',
                                checklibc=True):
             strlcpy_in_bsd = True
+    elif conf.env.enable_fuzzing:
+        # Just to complicate it more, some versions of Honggfuzz have
+        # got strlcpy and strlcat in libc, but not in <string.h>
+        # (unless it is there coincidentally, on a BSD). Therefore we
+        # can't use CHECK_FUNCS alone to decide whether to add the
+        # headers to replace.h.
+        #
+        # As this is only known to happen on a fuzzing compiler, we'll
+        # skip the check when not in fuzzing mode.
+        conf.CHECK_HEADERS('bsd/string.h')
+
     if not conf.CHECK_FUNCS('getpeereid'):
         conf.CHECK_FUNCS_IN('getpeereid', 'bsd', headers='sys/types.h bsd/unistd.h')
     if not conf.CHECK_FUNCS_IN('setproctitle', 'setproctitle', headers='setproctitle.h'):
         conf.CHECK_FUNCS_IN('setproctitle', 'bsd', headers='sys/types.h bsd/unistd.h')
     if not conf.CHECK_FUNCS('setproctitle_init'):
         conf.CHECK_FUNCS_IN('setproctitle_init', 'bsd', headers='sys/types.h bsd/unistd.h')
 
     if not conf.CHECK_FUNCS('closefrom'):
         conf.CHECK_FUNCS_IN('closefrom', 'bsd', headers='bsd/unistd.h')
 
     conf.CHECK_CODE('''
                 struct ucred cred;
                 socklen_t cred_len;
                 int ret = getsockopt(0, SOL_SOCKET, SO_PEERCRED, &cred, &cred_len);''',
                 'HAVE_PEERCRED',
                 msg="Checking whether we can use SO_PEERCRED to get socket credentials",
                 headers='sys/types.h sys/socket.h')
 
     #Some OS (ie. freebsd) return EINVAL if the conversion could not be done, it's not what we expect
     #Let's detect those cases
     if conf.CONFIG_SET('HAVE_STRTOLL'):
         conf.CHECK_CODE('''
                         long long nb = strtoll("Text", NULL, 0);
                         if (errno == EINVAL) {
                             return 0;
                         } else {
                             return 1;
                         }
                         ''',
                         msg="Checking correct behavior of strtoll",
                         headers = 'errno.h',
                         execute = True,
                         define = 'HAVE_BSD_STRTOLL',
                         )
     conf.CHECK_FUNCS('if_nameindex if_nametoindex strerror_r')
     conf.CHECK_FUNCS('syslog')
     conf.CHECK_FUNCS('gai_strerror get_current_dir_name')
     conf.CHECK_FUNCS('timegm getifaddrs freeifaddrs mmap setgroups syscall setsid')
     conf.CHECK_FUNCS('getgrent_r getgrgid_r getgrnam_r getgrouplist getpagesize')
     conf.CHECK_FUNCS('getpwent_r getpwnam_r getpwuid_r epoll_create1')
     conf.CHECK_FUNCS('getprogname')
     if not conf.CHECK_FUNCS('copy_file_range'):
         conf.CHECK_CODE('''
