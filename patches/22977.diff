commit 126ce46cd8d6d64a8031eec9164a9d388675ae77
Author: Jamie Pinheiro <pinheirojamie@google.com>
Date:   Fri Jun 5 17:58:48 2020 +0000

    Issue 22977
    
    Issue 22980
    
    too much unsigned in issue 22980 fixes
    
    Issue 22982
    
    MIN => LIM in Issue 22982 fix
    
    Issue 22988
    
    Issue 23188

diff --git a/src/decoders/generic.cpp b/src/decoders/generic.cpp
index 76b13fdb..a23732c5 100644
--- a/src/decoders/generic.cpp
+++ b/src/decoders/generic.cpp
@@ -40,46 +40,46 @@ void LibRaw::unpacked_load_raw()
 void LibRaw::packed_load_raw()
 {
   int vbits = 0, bwide, rbits, bite, half, irow, row, col, val, i;
   UINT64 bitbuf = 0;
 
   bwide = raw_width * tiff_bps / 8;
   bwide += bwide & load_flags >> 7;
   rbits = bwide * 8 - raw_width * tiff_bps;
   if (load_flags & 1)
     bwide = bwide * 16 / 15;
   bite = 8 + (load_flags & 24);
   half = (raw_height + 1) >> 1;
   for (irow = 0; irow < raw_height; irow++)
   {
     checkCancel();
     row = irow;
     if (load_flags & 2 && (row = irow % half * 2 + irow / half) == 1 &&
         load_flags & 4)
     {
       if (vbits = 0, tiff_compress)
         fseek(ifp, data_offset - (-half * bwide & -2048), SEEK_SET);
       else
       {
         fseek(ifp, 0, SEEK_END);
         fseek(ifp, ftell(ifp) >> 3 << 2, SEEK_SET);
       }
     }
     if (feof(ifp))
       throw LIBRAW_EXCEPTION_IO_EOF;
     for (col = 0; col < raw_width; col++)
     {
       for (vbits -= tiff_bps; vbits < 0; vbits += bite)
       {
         bitbuf <<= bite;
         for (i = 0; i < bite; i += 8)
-          bitbuf |= (unsigned)(fgetc(ifp) << i);
+          bitbuf |= (unsigned(fgetc(ifp)) << i);
       }
       val = bitbuf << (64 - tiff_bps - vbits) >> (64 - tiff_bps);
       RAW(row, col ^ (load_flags >> 6 & 1)) = val;
       if (load_flags & 1 && (col % 10) == 9 && fgetc(ifp) &&
           row < height + top_margin && col < width + left_margin)
         derror();
     }
     vbits -= rbits;
   }
 }
diff --git a/src/metadata/cr3_parser.cpp b/src/metadata/cr3_parser.cpp
index fd222ba5..33983e62 100644
--- a/src/metadata/cr3_parser.cpp
+++ b/src/metadata/cr3_parser.cpp
@@ -97,423 +97,424 @@ void LibRaw::selectCRXTrack(short maxTrack)
 #define bad_hdr                                                                \
   (((order != 0x4d4d) && (order != 0x4949)) || (get2() != 0x002a) ||           \
    (get4() != 0x00000008))
 int LibRaw::parseCR3(unsigned long long oAtomList,
                      unsigned long long szAtomList, short &nesting,
                      char *AtomNameStack, short &nTrack, short &TrackType)
 {
   /*
   Atom starts with 4 bytes for Atom size and 4 bytes containing Atom name
   Atom size includes the length of the header and the size of all "contained"
   Atoms if Atom size == 1, Atom has the extended size stored in 8 bytes located
   after the Atom name if Atom size == 0, it is the last top-level Atom extending
   to the end of the file Atom name is often a 4 symbol mnemonic, but can be a
   4-byte integer
   */
   const char UIID_Canon[17] =
       "\x85\xc0\xb6\x87\x82\x0f\x11\xe0\x81\x11\xf4\xce\x46\x2b\x6a\x48";
 
   /*
   AtomType = 0 - unknown: "unk."
   AtomType = 1 - container atom: "cont"
   AtomType = 2 - leaf atom: "leaf"
   AtomType = 3 - can be container, can be leaf: "both"
   */
   short AtomType;
   static const struct
   {
     char AtomName[5];
     short AtomType;
   } AtomNamesList[] = {
       {"dinf", 1},
       {"edts", 1},
       {"fiin", 1},
       {"ipro", 1},
       {"iprp", 1},
       {"mdia", 1},
       {"meco", 1},
       {"mere", 1},
       {"mfra", 1},
       {"minf", 1},
       {"moof", 1},
       {"moov", 1},
       {"mvex", 1},
       {"paen", 1},
       {"schi", 1},
       {"sinf", 1},
       {"skip", 1},
       {"stbl", 1},
       {"stsd", 1},
       {"strk", 1},
       {"tapt", 1},
       {"traf", 1},
       {"trak", 1},
 
       {"cdsc", 2},
       {"colr", 2},
       {"dimg", 2},
       // {"dref", 2},
       {"free", 2},
       {"frma", 2},
       {"ftyp", 2},
       {"hdlr", 2},
       {"hvcC", 2},
       {"iinf", 2},
       {"iloc", 2},
       {"infe", 2},
       {"ipco", 2},
       {"ipma", 2},
       {"iref", 2},
       {"irot", 2},
       {"ispe", 2},
       {"meta", 2},
       {"mvhd", 2},
       {"pitm", 2},
       {"pixi", 2},
       {"schm", 2},
       {"thmb", 2},
       {"tkhd", 2},
       {"url ", 2},
       {"urn ", 2},
 
       {"CCTP", 1},
       {"CRAW", 1},
 
       {"JPEG", 2},
       {"CDI1", 2},
       {"CMP1", 2},
 
       {"CNCV", 2},
       {"CCDT", 2},
       {"CTBO", 2},
       {"CMT1", 2},
       {"CMT2", 2},
       {"CMT3", 2},
       {"CMT4", 2},
       {"THMB", 2},
       {"co64", 2},
       {"mdat", 2},
       {"mdhd", 2},
       {"nmhd", 2},
       {"stsc", 2},
       {"stsz", 2},
       {"stts", 2},
       {"vmhd", 2},
 
       {"dref", 3},
       {"uuid", 3},
   };
 
   const char sHandlerType[5][5] = {"unk.", "soun", "vide", "hint", "meta"};
 
   int c, err;
 
   ushort tL;                        // Atom length represented in 4 or 8 bytes
   char nmAtom[5];                   // Atom name
   unsigned long long oAtom, szAtom; // Atom offset and Atom size
   unsigned long long oAtomContent,
       szAtomContent; // offset and size of Atom content
   unsigned long long lHdr;
 
   char UIID[16];
   uchar CMP1[36];
   char HandlerType[5], MediaFormatID[5];
   uint32_t relpos_inDir, relpos_inBox;
   unsigned szItem, Tag, lTag;
   ushort tItem;
 
   nmAtom[0] = MediaFormatID[0] = nmAtom[4] = MediaFormatID[4] = '\0';
   strcpy(HandlerType, sHandlerType[0]);
   oAtom = oAtomList;
   nesting++;
   if (nesting > 31)
     return -14; // too deep nesting
   short s_order = order;
 
   while ((oAtom + 8ULL) <= (oAtomList + szAtomList))
   {
     lHdr = 0ULL;
     err = 0;
     order = 0x4d4d;
     fseek(ifp, oAtom, SEEK_SET);
     szAtom = get4();
     FORC4 nmAtom[c] = AtomNameStack[nesting * 4 + c] = fgetc(ifp);
     AtomNameStack[(nesting + 1) * 4] = '\0';
     tL = 4;
     AtomType = 0;
 
     for (c = 0; c < int(sizeof AtomNamesList / sizeof *AtomNamesList); c++)
       if (!strcmp(nmAtom, AtomNamesList[c].AtomName))
       {
         AtomType = AtomNamesList[c].AtomType;
         break;
       }
 
     if (!AtomType)
     {
       err = 1;
     }
 
     if (szAtom == 0ULL)
     {
       if (nesting != 0)
       {
         err = -2;
         goto fin;
       }
       szAtom = szAtomList - oAtom;
       oAtomContent = oAtom + 8ULL;
       szAtomContent = szAtom - 8ULL;
     }
     else if (szAtom == 1ULL)
     {
       if ((oAtom + 16ULL) > (oAtomList + szAtomList))
       {
         err = -3;
         goto fin;
       }
       tL = 8;
       szAtom = (((unsigned long long)get4()) << 32) | get4();
       oAtomContent = oAtom + 16ULL;
       szAtomContent = szAtom - 16ULL;
     }
     else
     {
       oAtomContent = oAtom + 8ULL;
       szAtomContent = szAtom - 8ULL;
     }
 
     if (!strcmp(nmAtom, "trak"))
     {
       nTrack++;
       TrackType = 0;
       if (nTrack >= LIBRAW_CRXTRACKS_MAXCOUNT)
         break;
     }
     if (!strcmp(AtomNameStack, "moovuuid"))
     {
       lHdr = 16ULL;
       fread(UIID, 1, lHdr, ifp);
       if (!strncmp(UIID, UIID_Canon, lHdr))
       {
         AtomType = 1;
       }
       else
         fseek(ifp, -lHdr, SEEK_CUR);
     }
     else if (!strcmp(AtomNameStack, "moovuuidCCTP"))
     {
       lHdr = 12ULL;
     }
     else if (!strcmp(AtomNameStack, "moovuuidCMT1"))
     {
       short q_order = order;
       order = get2();
       if ((tL != 4) || bad_hdr)
       {
         err = -4;
         goto fin;
       }
       parse_tiff_ifd(oAtomContent);
       order = q_order;
     }
     else if (!strcmp(AtomNameStack, "moovuuidCMT2"))
     {
       short q_order = order;
       order = get2();
       if ((tL != 4) || bad_hdr)
       {
         err = -5;
         goto fin;
       }
       parse_exif(oAtomContent);
       order = q_order;
     }
     else if (!strcmp(AtomNameStack, "moovuuidCMT3"))
     {
       short q_order = order;
       order = get2();
       if ((tL != 4) || bad_hdr)
       {
         err = -6;
         goto fin;
       }
       fseek(ifp, -12L, SEEK_CUR);
       parse_makernote(oAtomContent, 0);
       order = q_order;
     }
     else if (!strcmp(AtomNameStack, "moovuuidCMT4"))
     {
       short q_order = order;
       order = get2();
       if ((tL != 4) || bad_hdr)
       {
         err = -6;
         goto fin;
       }
       INT64 off = ftell(ifp);
       parse_gps(oAtomContent);
       fseek(ifp, off, SEEK_SET);
       parse_gps_libraw(oAtomContent);
       order = q_order;
     }
     else if (!strcmp(AtomNameStack, "moovtrakmdiahdlr"))
     {
       fseek(ifp, 8L, SEEK_CUR);
       FORC4 HandlerType[c] = fgetc(ifp);
       for (c = 1; c < int(sizeof sHandlerType / sizeof *sHandlerType); c++)
         if (!strcmp(HandlerType, sHandlerType[c]))
         {
           TrackType = c;
           break;
         }
     }
     else if (!strcmp(AtomNameStack, "moovtrakmdiaminfstblstsd"))
     {
       if (szAtomContent >= 16)
       {
         fseek(ifp, 12L, SEEK_CUR);
         lHdr = 8;
       }
       else
       {
         err = -7;
         goto fin;
       }
       FORC4 MediaFormatID[c] = fgetc(ifp);
       if ((TrackType == 2) && (!strcmp(MediaFormatID, "CRAW")))
       {
         if (szAtomContent >= 44)
           fseek(ifp, 24L, SEEK_CUR);
         else
         {
           err = -8;
           goto fin;
         }
       }
       else
       {
         AtomType = 2; // only continue for CRAW
         lHdr = 0;
       }
 #define current_track libraw_internal_data.unpacker_data.crx_header[nTrack]
 
       /*ImageWidth =*/ get2();
       /*ImageHeight =*/ get2();
     }
     else if (!strcmp(AtomNameStack, "moovtrakmdiaminfstblstsdCRAW"))
     {
       lHdr = 82;
     }
     else if (!strcmp(AtomNameStack, "moovtrakmdiaminfstblstsdCRAWCMP1"))
     {
       if (szAtomContent >= 40)
         fread(CMP1, 1, 36, ifp);
       else
       {
         err = -7;
         goto fin;
       }
       if (!crxParseImageHeader(CMP1, nTrack))
         current_track.MediaType = 1;
     }
     else if (!strcmp(AtomNameStack, "moovtrakmdiaminfstblstsdCRAWJPEG"))
     {
       current_track.MediaType = 2;
     }
     else if (!strcmp(AtomNameStack, "moovtrakmdiaminfstblstsz"))
     {
       if (szAtomContent == 12)
         fseek(ifp, 4L, SEEK_CUR);
       else if (szAtomContent == 16)
         fseek(ifp, 12L, SEEK_CUR);
       else
       {
         err = -9;
         goto fin;
       }
       current_track.MediaSize = get4();
     }
     else if (!strcmp(AtomNameStack, "moovtrakmdiaminfstblco64"))
     {
       if (szAtomContent == 16)
         fseek(ifp, 8L, SEEK_CUR);
       else
       {
         err = -10;
         goto fin;
       }
       current_track.MediaOffset = (((unsigned long long)get4()) << 32) | get4();
     }
 
-    if (current_track.MediaSize && current_track.MediaOffset &&
+    if (nTrack >= 0 && nTrack < LIBRAW_CRXTRACKS_MAXCOUNT &&
+        current_track.MediaSize && current_track.MediaOffset &&
         ((oAtom + szAtom) >= (oAtomList + szAtomList)) &&
         !strncmp(AtomNameStack, "moovtrakmdiaminfstbl", 20))
     {
       if ((TrackType == 4) && (!strcmp(MediaFormatID, "CTMD")))
       {
         order = 0x4949;
         relpos_inDir = 0L;
         while (relpos_inDir + 6 < current_track.MediaSize)
         {
           fseek(ifp, current_track.MediaOffset + relpos_inDir, SEEK_SET);
           szItem = get4();
           tItem = get2();
           if ((relpos_inDir + szItem) > current_track.MediaSize)
           {
             err = -11;
             goto fin;
           }
           if ((tItem == 7) || (tItem == 8) || (tItem == 9))
           {
             relpos_inBox = relpos_inDir + 12L;
             while (relpos_inBox + 8 < relpos_inDir + szItem)
             {
               fseek(ifp, current_track.MediaOffset + relpos_inBox, SEEK_SET);
               lTag = get4();
               Tag = get4();
               if (lTag < 8)
               {
                 err = -12;
                 goto fin;
               }
               else if ((relpos_inBox + lTag) > (relpos_inDir + szItem))
               {
                 err = -11;
                 goto fin;
               }
               if ((Tag == 0x927c) && ((tItem == 7) || (tItem == 8)))
               {
                 fseek(ifp, current_track.MediaOffset + relpos_inBox + 8L,
                       SEEK_SET);
                 short q_order = order;
                 order = get2();
                 if (bad_hdr)
                 {
                   err = -13;
                   goto fin;
                 }
                 fseek(ifp, -8L, SEEK_CUR);
                 libraw_internal_data.unpacker_data.CR3_CTMDtag = 1;
                 parse_makernote(current_track.MediaOffset + relpos_inBox + 8,
                                 0);
                 libraw_internal_data.unpacker_data.CR3_CTMDtag = 0;
                 order = q_order;
               }
               relpos_inBox += lTag;
             }
           }
           relpos_inDir += szItem;
         }
         order = 0x4d4d;
       }
     }
 #undef current_track
     if (AtomType == 1)
     {
       err = parseCR3(oAtomContent + lHdr, szAtomContent - lHdr, nesting,
                      AtomNameStack, nTrack, TrackType);
       if (err)
         goto fin;
     }
     oAtom += szAtom;
   }
diff --git a/src/metadata/misc_parsers.cpp b/src/metadata/misc_parsers.cpp
index 55990b46..1dd0059b 100644
--- a/src/metadata/misc_parsers.cpp
+++ b/src/metadata/misc_parsers.cpp
@@ -125,67 +125,67 @@ void LibRaw::parse_redcine()
 void LibRaw::parse_cine()
 {
   unsigned off_head, off_setup, off_image, i;
 
   order = 0x4949;
   fseek(ifp, 4, SEEK_SET);
   is_raw = get2() == 2;
   fseek(ifp, 14, SEEK_CUR);
   is_raw *= get4();
   off_head = get4();
   off_setup = get4();
   off_image = get4();
   timestamp = get4();
   if ((i = get4()))
     timestamp = i;
   fseek(ifp, off_head + 4, SEEK_SET);
   raw_width = get4();
   raw_height = get4();
   switch (get2(), get2())
   {
   case 8:
     load_raw = &LibRaw::eight_bit_load_raw;
     break;
   case 16:
     load_raw = &LibRaw::unpacked_load_raw;
   }
   fseek(ifp, off_setup + 792, SEEK_SET);
   strcpy(make, "CINE");
   sprintf(model, "%d", get4());
   fseek(ifp, 12, SEEK_CUR);
   switch ((i = get4()) & 0xffffff)
   {
   case 3:
     filters = 0x94949494;
     break;
   case 4:
     filters = 0x49494949;
     break;
   default:
     is_raw = 0;
   }
   fseek(ifp, 72, SEEK_CUR);
   switch ((get4() + 3600) % 360)
   {
   case 270:
     flip = 4;
     break;
   case 180:
     flip = 1;
     break;
   case 90:
     flip = 7;
     break;
   case 0:
     flip = 2;
   }
   cam_mul[0] = getreal(LIBRAW_EXIFTAG_TYPE_FLOAT);
   cam_mul[2] = getreal(LIBRAW_EXIFTAG_TYPE_FLOAT);
-  maximum = ~((~0u) << get4());
+  maximum = ~((~0u) << LIM(get4(), 1, 31));
   fseek(ifp, 668, SEEK_CUR);
   shutter = get4() / 1000000000.0;
   fseek(ifp, off_image, SEEK_SET);
   if (shot_select < is_raw)
     fseek(ifp, shot_select * 8, SEEK_CUR);
   data_offset = (INT64)get4() + 8;
   data_offset += (INT64)get4() << 32;
 }
diff --git a/src/metadata/pentax.cpp b/src/metadata/pentax.cpp
index 73ca71b8..721baa8d 100644
--- a/src/metadata/pentax.cpp
+++ b/src/metadata/pentax.cpp
@@ -236,214 +236,214 @@ void LibRaw::PentaxLensInfo(unsigned long long id, unsigned len) // tag 0x0207
 void LibRaw::parsePentaxMakernotes(int base, unsigned tag, unsigned type,
                                    unsigned len, unsigned dng_writer)
 {
 
   int c;
   if (tag == 0x0005)
   {
     unique_id = get4();
     setPentaxBodyFeatures(unique_id);
   }
   else if (tag == 0x0008)
   { /* 4 is raw, 7 is raw w/ pixel shift, 8 is raw w/ dynamic pixel shift */
     imPentax.Quality = get2();
   }
   else if (tag == 0x000d)
   {
     imgdata.shootinginfo.FocusMode = imPentax.FocusMode = get2();
   }
   else if (tag == 0x000e)
   {
     imgdata.shootinginfo.AFPoint = imPentax.AFPointSelected = get2();
   }
   else if (tag == 0x000f)
   {
     imPentax.AFPointsInFocus = getint(type);
   }
   else if (tag == 0x0010)
   {
     imPentax.FocusPosition = get2();
   }
   else if (tag == 0x0013)
   {
     ilm.CurAp = (float)get2() / 10.0f;
   }
   else if (tag == 0x0014)
   {
     PentaxISO(get2());
   }
   else if (tag == 0x0017)
   {
     imgdata.shootinginfo.MeteringMode = get2();
   }
   else if (tag == 0x001b) {
     cam_mul[2] = get2() / 256.0;
   }
   else if (tag == 0x001c) {
     cam_mul[0] = get2() / 256.0;
   }
   else if (tag == 0x001d)
   {
     ilm.CurFocal = (float)get4() / 100.0f;
   }
   else if (tag == 0x0034)
   {
     uchar uc;
     FORC4
     {
       fread(&uc, 1, 1, ifp);
       imPentax.DriveMode[c] = uc;
     }
     imgdata.shootinginfo.DriveMode = imPentax.DriveMode[0];
   }
   else if (tag == 0x0037) {
     switch (get2()) {
     case 0:
       imCommon.ColorSpace = LIBRAW_COLORSPACE_sRGB;
       break;
     case 1:
       imCommon.ColorSpace = LIBRAW_COLORSPACE_AdobeRGB;
       break;
     default:
       imCommon.ColorSpace = LIBRAW_COLORSPACE_Unknown;
       break;
     }
   }
   else if (tag == 0x0038)
   {
     imgdata.sizes.raw_inset_crop.cleft = get2();
     imgdata.sizes.raw_inset_crop.ctop = get2();
   }
   else if (tag == 0x0039)
   {
     imgdata.sizes.raw_inset_crop.cwidth = get2();
     imgdata.sizes.raw_inset_crop.cheight = get2();
   }
   else if (tag == 0x003f)
   {
-    unsigned a = fgetc(ifp) << 8;
+    unsigned a = unsigned(fgetc(ifp)) << 8;
     ilm.LensID = a | fgetc(ifp);
   }
   else if (tag == 0x0047)
   {
     imCommon.CameraTemperature = (float)fgetc(ifp);
   }
   else if (tag == 0x004d)
   {
     if (tagtypeIs(LIBRAW_EXIFTAG_TYPE_SLONG))
       imCommon.FlashEC = getreal(type) / 256.0f;
     else
       imCommon.FlashEC = (float)((signed short)fgetc(ifp)) / 6.0f;
   }
   else if (tag == 0x005c)
   {
     fgetc(ifp);
     imgdata.shootinginfo.ImageStabilization = (short)fgetc(ifp);
   }
   else if (tag == 0x0072)
   {
     imPentax.AFAdjustment = get2();
   }
   else if ((tag == 0x007e) && (dng_writer == nonDNG))
   {
     imgdata.color.linear_max[0] = imgdata.color.linear_max[1] =
         imgdata.color.linear_max[2] = imgdata.color.linear_max[3] =
             get4();
   }
   else if (tag == 0x0080)
   {
     short a = (short)fgetc(ifp);
     switch (a)
     {
     case 0:
       imgdata.sizes.raw_inset_crop.aspect = LIBRAW_IMAGE_ASPECT_4to3;
       break;
     case 1:
       imgdata.sizes.raw_inset_crop.aspect = LIBRAW_IMAGE_ASPECT_3to2;
       break;
     case 2:
       imgdata.sizes.raw_inset_crop.aspect = LIBRAW_IMAGE_ASPECT_16to9;
       break;
     case 3:
       imgdata.sizes.raw_inset_crop.aspect = LIBRAW_IMAGE_ASPECT_1to1;
       break;
     }
   }
 
   else if ((tag == 0x0200) && (dng_writer == nonDNG)) { // Pentax black level
     FORC4 cblack[RGGB_2_RGBG(c)] = get2();
   }
 
   else if ((tag == 0x0201) && (dng_writer == nonDNG)) { // Pentax As Shot WB
     FORC4 cam_mul[RGGB_2_RGBG(c)] = get2();
   }
 
   else if ((tag == 0x0203) && (dng_writer == nonDNG))
   {
     for (int i = 0; i < 3; i++)
       FORC3 cmatrix[i][c] = ((short)get2()) / 8192.0;
   }
   else if (tag == 0x0205)
   { // Pentax K-m has multiexposure set to 8 when no multi-exposure is in effect
     if (len < 25)
     {
       fseek(ifp, 10, SEEK_CUR);
       imPentax.MultiExposure = fgetc(ifp) & 0x0f;
     }
   }
   else if (tag == 0x0207)
   {
     if (len < 65535) // Safety belt
       PentaxLensInfo(ilm.CamID, len);
   }
   else if ((tag >= 0x020d) && (tag <= 0x0214))
   {
     FORC4 icWBC[Pentax_wb_list1[tag - 0x020d]][RGGB_2_RGBG(c)] = get2();
   }
 
   else if ((tag == 0x0220) && (dng_writer == nonDNG)) {
     meta_offset = ftell(ifp);
   }
 
   else if (tag == 0x0221)
   {
     int nWB = get2();
     if (nWB <= int(sizeof(icWBCCTC) / sizeof(icWBCCTC[0])))
       FORC(nWB)
       {
         icWBCCTC[c][0] = (unsigned)0xcfc6 - get2();
         fseek(ifp, 2, SEEK_CUR);
         icWBCCTC[c][1] = get2();
         icWBCCTC[c][2] = icWBCCTC[c][4] = 0x2000;
         icWBCCTC[c][3] = get2();
       }
   }
   else if (tag == 0x0215)
   {
     fseek(ifp, 16, SEEK_CUR);
     sprintf(imgdata.shootinginfo.InternalBodySerial, "%d", get4());
   }
   else if (tag == 0x0229)
   {
     stmread(imgdata.shootinginfo.BodySerial, len, ifp);
   }
   else if (tag == 0x022d)
   {
     int wb_ind;
     getc(ifp);
     for (int wb_cnt = 0; wb_cnt < nPentax_wb_list2; wb_cnt++)
     {
       wb_ind = getc(ifp);
       if (wb_ind >= 0 && wb_ind < nPentax_wb_list2)
         FORC4 icWBC[Pentax_wb_list2[wb_ind]][RGGB_2_RGBG(c)] = get2();
     }
   }
   else if (tag == 0x0239)
   { // Q-series lens info (LensInfoQ)
     char LensInfo[20];
     fseek(ifp, 12, SEEK_CUR);
     stread(ilm.Lens, 30, ifp);
     strcat(ilm.Lens, " ");
     stread(LensInfo, 20, ifp);
     strcat(ilm.Lens, LensInfo);
   }
 }
diff --git a/src/metadata/tiff.cpp b/src/metadata/tiff.cpp
index b774b4d2..d33e54d9 100644
--- a/src/metadata/tiff.cpp
+++ b/src/metadata/tiff.cpp
@@ -1511,504 +1511,504 @@ int ifd_size_t_cmp(const void *a, const void *b)
 void LibRaw::apply_tiff()
 {
   int max_samp = 0, ties = 0, raw = -1, thm = -1, i;
   unsigned long long ns, os;
   struct jhead jh;
 
   thumb_misc = 16;
   if (thumb_offset)
   {
     fseek(ifp, thumb_offset, SEEK_SET);
     if (ljpeg_start(&jh, 1))
     {
       if ((unsigned)jh.bits < 17 && (unsigned)jh.wide < 0x10000 &&
           (unsigned)jh.high < 0x10000)
       {
         thumb_misc = jh.bits;
         thumb_width = jh.wide;
         thumb_height = jh.high;
       }
     }
   }
   for (i = tiff_nifds; i--;)
   {
     if (tiff_ifd[i].t_shutter)
       shutter = tiff_ifd[i].t_shutter;
     tiff_ifd[i].t_shutter = shutter;
   }
 
   if (dng_version)
   {
     int ifdc = 0;
     for (i = 0; i < (int)tiff_nifds; i++)
     {
       if (tiff_ifd[i].t_width < 1 || tiff_ifd[i].t_width > 65535 ||
           tiff_ifd[i].t_height < 1 || tiff_ifd[i].t_height > 65535)
         continue; /* wrong image dimensions */
 
       int samp = tiff_ifd[i].samples;
       if (samp == 2)
         samp = 1; // Fuji 2-frame
       max_samp = LIM(MAX(max_samp, samp), 1,
                      3); // max_samp is needed for thumbnail selection below
 
       if (tiff_ifd[i].phint != 32803 && tiff_ifd[i].phint != 34892)
         continue;
 
       if ((tiff_ifd[i].newsubfiletype == 0) // main image
                                             // Enhanced demosaiced:
           || (tiff_ifd[i].newsubfiletype == 16 &&
               (imgdata.params.raw_processing_options &
                LIBRAW_PROCESSING_DNG_ADD_ENHANCED))
           // Preview: 0x1 or 0x10001
           || ((tiff_ifd[i].newsubfiletype & 0xffff) == 1 &&
               (imgdata.params.raw_processing_options &
                LIBRAW_PROCESSING_DNG_ADD_PREVIEWS)))
       {
         // Add this IFD to dng_frames
         libraw_internal_data.unpacker_data.dng_frames[ifdc] =
             ((tiff_ifd[i].newsubfiletype & 0xffff) << 16) | ((i << 8) & 0xff00);
         ifdc++;
         // Fuji SuperCCD: second frame:
         if ((tiff_ifd[i].newsubfiletype == 0) && tiff_ifd[i].samples == 2)
         {
           libraw_internal_data.unpacker_data.dng_frames[ifdc] =
               ((tiff_ifd[i].newsubfiletype & 0xffff) << 16) |
               ((i << 8) & 0xff00) | 1;
           ifdc++;
         }
       }
     }
     if (ifdc)
     {
       if (ifdc > 1 && (imgdata.params.raw_processing_options &
                        LIBRAW_PROCESSING_DNG_PREFER_LARGEST_IMAGE))
       {
         ifd_size_t arr[LIBRAW_IFD_MAXCOUNT * 2];
         memset(arr, 0, sizeof(arr));
         for (int i = 0; i < ifdc && i < LIBRAW_IFD_MAXCOUNT * 2; i++)
         {
           int ifdidx =
               (libraw_internal_data.unpacker_data.dng_frames[i] >> 8) & 0xff;
           arr[i].ifdi = libraw_internal_data.unpacker_data.dng_frames[i];
           arr[i].databits =
               tiff_ifd[ifdidx].t_width * tiff_ifd[ifdidx].t_height *
                   tiff_ifd[ifdidx].samples * tiff_ifd[ifdidx].bps +
               (0x100 -
                (arr[i].ifdi & 0xff)); // add inverted frame # to ensure same
                                       // sort order for similar sized frames.
         }
         qsort(arr, MIN(ifdc, LIBRAW_IFD_MAXCOUNT * 2), sizeof(arr[0]),
               ifd_size_t_cmp);
         for (int i = 0; i < ifdc && i < LIBRAW_IFD_MAXCOUNT * 2; i++)
           libraw_internal_data.unpacker_data.dng_frames[i] = arr[i].ifdi;
       }
 
       int idx = LIM((int)shot_select, 0, ifdc - 1);
       i = (libraw_internal_data.unpacker_data.dng_frames[idx] >> 8) &
           0xff; // extract frame# back
 
       raw_width = tiff_ifd[i].t_width;
       raw_height = tiff_ifd[i].t_height;
       tiff_bps = tiff_ifd[i].bps;
       tiff_compress = tiff_ifd[i].comp;
       tiff_sampleformat = tiff_ifd[i].sample_format;
       data_offset = tiff_ifd[i].offset;
       data_size = tiff_ifd[i].bytes;
       tiff_flip = tiff_ifd[i].t_flip;
       tiff_samples = tiff_ifd[i].samples;
       tile_width = tiff_ifd[i].t_tile_width;
       tile_length = tiff_ifd[i].t_tile_length;
       fuji_width = tiff_ifd[i].t_fuji_width;
       if (tiff_samples != 2) /* special case: Fuji SuperCCD */
       {
         if (tiff_ifd[i].phint == 34892)
           filters = 0;
         else if (i > 0 && tiff_ifd[i].phint == 32803 &&
                  tiff_ifd[0].phint == 32803 && !tiff_ifd[i].t_filters &&
                  tiff_ifd[0].t_filters)
           filters = tiff_ifd[0].t_filters;
         else
           filters = tiff_ifd[i].t_filters;
         width = tiff_ifd[i].t_vwidth;
         height = tiff_ifd[i].t_vheight;
         top_margin = tiff_ifd[i].t_tm;
         left_margin = tiff_ifd[i].t_lm;
         shutter = tiff_ifd[i].t_shutter;
         if (tiff_ifd[i].dng_levels.dng_whitelevel[0])
           maximum = tiff_ifd[i].dng_levels.dng_whitelevel[0];
         else if (tiff_ifd[i].sample_format <= 2 && tiff_bps > 0 &&
                  tiff_bps < 32) // SampleFormat: 0-default(1), 1 - Uint, 2 - Int
           maximum = (1 << tiff_bps) - 1;
         else if (tiff_ifd[i].sample_format == 3)
           maximum = 1; // Defaults for FP
       }
       raw = i;
       is_raw = ifdc;
     }
     else
       is_raw = 0;
   }
   else
   {
     for (i = 0; i < (int)tiff_nifds; i++)
     {
       if (tiff_ifd[i].t_width < 1 || tiff_ifd[i].t_width > 65535 ||
           tiff_ifd[i].t_height < 1 || tiff_ifd[i].t_height > 65535)
         continue; /* wrong image dimensions */
       if (max_samp < tiff_ifd[i].samples)
         max_samp = tiff_ifd[i].samples;
       if (max_samp > 3)
         max_samp = 3;
 
       os = raw_width * raw_height;
-      ns = tiff_ifd[i].t_width * tiff_ifd[i].t_height;
+      ns = unsigned(tiff_ifd[i].t_width) * unsigned(tiff_ifd[i].t_height);
       if (tiff_bps)
       {
         os *= tiff_bps;
         ns *= tiff_ifd[i].bps;
       }
       /* too complex if below, so separate if to skip RGB+Alpha TIFFs*/
       if (tiff_ifd[i].phint == 2 && tiff_ifd[i].extrasamples > 0 && tiff_ifd[i].samples > 3)
           continue; // SKIP RGB+Alpha IFDs
 
       if ((tiff_ifd[i].comp != 6 || tiff_ifd[i].samples != 3) &&
             unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&
             (unsigned)tiff_ifd[i].bps < 33 &&
             (unsigned)tiff_ifd[i].samples < 13 && ns &&
             ((ns > os && (ties = 1)) || (ns == os && (int)shot_select == ties++)))
         {
         raw_width = tiff_ifd[i].t_width;
         raw_height = tiff_ifd[i].t_height;
         tiff_bps = tiff_ifd[i].bps;
         tiff_compress = tiff_ifd[i].comp;
         tiff_sampleformat = tiff_ifd[i].sample_format;
         data_offset = tiff_ifd[i].offset;
         data_size = tiff_ifd[i].bytes;
         tiff_flip = tiff_ifd[i].t_flip;
         tiff_samples = tiff_ifd[i].samples;
         tile_width = tiff_ifd[i].t_tile_width;
         tile_length = tiff_ifd[i].t_tile_length;
         shutter = tiff_ifd[i].t_shutter;
         raw = i;
         }
     }
     if (is_raw == 1 && ties)
       is_raw = ties;
   }
   if (is_NikonTransfer && raw >= 0)
   {
     if (tiff_ifd[raw].bps == 16)
     {
       if (tiff_compress == 1)
       {
         if ((raw_width * raw_height * 3) == (tiff_ifd[raw].bytes << 1))
         {
           tiff_bps = tiff_ifd[raw].bps = 12;
         }
         else
         {
           tiff_bps = tiff_ifd[raw].bps = 14;
         }
       }
     }
     else if (tiff_ifd[raw].bps == 8)
     {
       if (tiff_compress == 1)
       {
         is_NikonTransfer = 2; // 8-bit debayered TIFF, like CoolScan NEFs
         imgdata.params.coolscan_nef_gamma = 2.2f;
       }
     }
   }
 
   if (!tile_width)
     tile_width = INT_MAX;
   if (!tile_length)
     tile_length = INT_MAX;
   for (i = tiff_nifds; i--;)
     if (tiff_ifd[i].t_flip)
       tiff_flip = tiff_ifd[i].t_flip;
 
 #if 0
   if (raw < 0 && is_raw)
       is_raw = 0;
 #endif
 
   if (raw >= 0 && !load_raw)
     switch (tiff_compress)
     {
     case 32767:
       if (!dng_version &&
           INT64(tiff_ifd[raw].bytes) == INT64(raw_width) * INT64(raw_height))
       {
         tiff_bps = 14;
         load_raw = &LibRaw::sony_arw2_load_raw;
         break;
       }
       if (!dng_version && !strncasecmp(make, "Sony", 4) &&
           INT64(tiff_ifd[raw].bytes) ==
               INT64(raw_width) * INT64(raw_height) * 2LL)
       {
         tiff_bps = 14;
         load_raw = &LibRaw::unpacked_load_raw;
         break;
       }
       if (INT64(tiff_ifd[raw].bytes) * 8ULL !=
           INT64(raw_width) * INT64(raw_height) * INT64(tiff_bps))
       {
         raw_height += 8;
         load_raw = &LibRaw::sony_arw_load_raw;
         break;
       }
       load_flags = 79;
     case 32769:
       load_flags++;
     case 32770:
     case 32773:
       goto slr;
     case 0:
     case 1:
 #ifdef USE_DNGSDK
       if (dng_version && tiff_sampleformat == 3 &&
           (tiff_bps > 8 && (tiff_bps % 8 == 0))) // 16,24,32,48...
       {
         load_raw = &LibRaw::float_dng_load_raw_placeholder;
         break;
       }
 #endif
       // Sony 14-bit uncompressed
       if (!dng_version && !strncasecmp(make, "Sony", 4) &&
           INT64(tiff_ifd[raw].bytes) ==
               INT64(raw_width) * INT64(raw_height) * 2LL)
       {
         tiff_bps = 14;
         load_raw = &LibRaw::unpacked_load_raw;
         break;
       }
       if (!dng_version && !strncasecmp(make, "Sony", 4) &&
           tiff_ifd[raw].samples == 4 &&
           INT64(tiff_ifd[raw].bytes) ==
               INT64(raw_width) * INT64(raw_height) * 8LL) // Sony ARQ
       {
         // maybe to detect ARQ with the following:
         // if (tiff_ifd[raw].phint == 32892)
         tiff_bps = 14;
         tiff_samples = 4;
         load_raw = &LibRaw::sony_arq_load_raw;
         filters = 0;
         strcpy(cdesc, "RGBG");
         break;
       }
       if (!strncasecmp(make, "Nikon", 5) &&
           (!strncmp(software, "Nikon Scan", 10) || (is_NikonTransfer == 2) ||
            strcasestr(model, "COOLSCAN")))
       {
         load_raw = &LibRaw::nikon_coolscan_load_raw;
         raw_color = 1;
         filters = 0;
         break;
       }
       if ((!strncmp(make, "OLYMPUS", 7) ||
            (!strncasecmp(make, "CLAUSS", 6) &&
             !strncasecmp(model, "piX 5oo", 7))) && // 0x5330303539 works here
           (INT64(tiff_ifd[raw].bytes) * 2ULL ==
            INT64(raw_width) * INT64(raw_height) * 3ULL))
         load_flags = 24;
       if (!dng_version && INT64(tiff_ifd[raw].bytes) * 5ULL ==
                               INT64(raw_width) * INT64(raw_height) * 8ULL)
       {
         load_flags = 81;
         tiff_bps = 12;
       }
     slr:
       switch (tiff_bps)
       {
       case 8:
         load_raw = &LibRaw::eight_bit_load_raw;
         break;
       case 12:
         if (tiff_ifd[raw].phint == 2)
           load_flags = 6;
         if (!strncasecmp(make, "NIKON", 5) &&
             !strncasecmp(model, "COOLPIX A1000", 13) &&
             data_size == raw_width * raw_height * 2)
           load_raw = &LibRaw::unpacked_load_raw;
         else
           load_raw = &LibRaw::packed_load_raw;
         break;
       case 14:
         load_flags = 0;
       case 16:
         load_raw = &LibRaw::unpacked_load_raw;
         if ((!strncmp(make, "OLYMPUS", 7) ||
              (!strncasecmp(make, "CLAUSS", 6) &&
               !strncasecmp(model, "piX 5oo", 7))) && // 0x5330303539 works here
             (INT64(tiff_ifd[raw].bytes) * 7ULL >
              INT64(raw_width) * INT64(raw_height)))
           load_raw = &LibRaw::olympus_load_raw;
       }
       break;
     case 6:
     case 7:
     case 99:
       load_raw = &LibRaw::lossless_jpeg_load_raw;
       break;
     case 262:
       load_raw = &LibRaw::kodak_262_load_raw;
       break;
     case 34713:
       if ((INT64(raw_width) + 9LL) / 10LL * 16LL * INT64(raw_height) ==
           INT64(tiff_ifd[raw].bytes))
       {
         load_raw = &LibRaw::packed_load_raw;
         load_flags = 1;
       }
       else if (INT64(raw_width) * INT64(raw_height) * 3LL ==
                INT64(tiff_ifd[raw].bytes) * 2LL)
       {
         load_raw = &LibRaw::packed_load_raw;
         if (model[0] == 'N')
           load_flags = 80;
       }
       else if (INT64(raw_width) * INT64(raw_height) * 3LL ==
                INT64(tiff_ifd[raw].bytes))
       {
         load_raw = &LibRaw::nikon_yuv_load_raw;
         gamma_curve(1 / 2.4, 12.92, 1, 4095);
         memset(cblack, 0, sizeof cblack);
         filters = 0;
       }
       else if (INT64(raw_width) * INT64(raw_height) * 2LL ==
                INT64(tiff_ifd[raw].bytes))
       {
         load_raw = &LibRaw::unpacked_load_raw;
         load_flags = 4;
         order = 0x4d4d;
       }
       else if (INT64(raw_width) * INT64(raw_height) * 3LL ==
                INT64(tiff_ifd[raw].bytes) * 2LL)
       {
         load_raw = &LibRaw::packed_load_raw;
         load_flags = 80;
       }
       else if (tiff_ifd[raw].rows_per_strip &&
                tiff_ifd[raw].strip_offsets_count &&
                tiff_ifd[raw].strip_offsets_count ==
                    tiff_ifd[raw].strip_byte_counts_count)
       {
         int fit = 1;
         for (int i = 0; i < tiff_ifd[raw].strip_byte_counts_count - 1;
              i++) // all but last
           if (INT64(tiff_ifd[raw].strip_byte_counts[i]) * 2LL !=
               INT64(tiff_ifd[raw].rows_per_strip) * INT64(raw_width) * 3LL)
           {
             fit = 0;
             break;
           }
         if (fit)
           load_raw = &LibRaw::nikon_load_striped_packed_raw;
         else
           load_raw = &LibRaw::nikon_load_raw; // fallback
       }
       else if ((((INT64(raw_width) * 3LL / 2LL) + 15LL) / 16LL) * 16LL *
                    INT64(raw_height) ==
                INT64(tiff_ifd[raw].bytes))
       {
         load_raw = &LibRaw::nikon_load_padded_packed_raw;
         load_flags = (((INT64(raw_width) * 3ULL / 2ULL) + 15ULL) / 16ULL) *
                      16ULL; // bytes per row
       }
       else
         load_raw = &LibRaw::nikon_load_raw;
       break;
     case 65535:
       load_raw = &LibRaw::pentax_load_raw;
       break;
     case 65000:
       switch (tiff_ifd[raw].phint)
       {
       case 2:
         load_raw = &LibRaw::kodak_rgb_load_raw;
         filters = 0;
         break;
       case 6:
         load_raw = &LibRaw::kodak_ycbcr_load_raw;
         filters = 0;
         break;
       case 32803:
         load_raw = &LibRaw::kodak_65000_load_raw;
       }
     case 32867:
     case 34892:
       break;
     case 8:
       break;
 #ifdef USE_GPRSDK
     case 9:
       if (dng_version)
         break; /* Compression=9 supported for dng if we compiled with GPR SDK */
                /* Else: fallthrough */
 #endif
     default:
       is_raw = 0;
     }
   if (!dng_version)
   {
       if (((tiff_samples == 3 && tiff_ifd[raw].bytes &&
           !(tiff_bps == 16 &&
               !strncmp(make, "Leaf", 4)) && // Allow Leaf/16bit/3color files
           tiff_bps != 14 &&
           (tiff_compress & -16) != 32768) ||
           (tiff_bps == 8 && strncmp(make, "Phase", 5) &&
               strncmp(make, "Leaf", 4) && !strcasestr(make, "Kodak") &&
               !strstr(model2, "DEBUG RAW"))) &&
           !strcasestr(model, "COOLSCAN") && strncmp(software, "Nikon Scan", 10) &&
           is_NikonTransfer != 2)
           is_raw = 0;
 
       if (is_raw && raw >= 0 && tiff_ifd[raw].phint == 2 && tiff_ifd[raw].extrasamples > 0 && tiff_ifd[raw].samples > 3)
           is_raw = 0; // SKIP RGB+Alpha IFDs
   }
 
   for (i = 0; i < (int)tiff_nifds; i++)
     if (i != raw &&
         (tiff_ifd[i].samples == max_samp ||
          (tiff_ifd[i].comp == 7 &&
           tiff_ifd[i].samples == 1)) /* Allow 1-bps JPEGs */
         && tiff_ifd[i].bps > 0 && tiff_ifd[i].bps < 33 &&
         tiff_ifd[i].phint != 32803 && tiff_ifd[i].phint != 34892 &&
         unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&
         unsigned(tiff_ifd[i].t_width * tiff_ifd[i].t_height /
                 (SQR(tiff_ifd[i].bps) + 1)) >
             unsigned(thumb_width * thumb_height / (SQR(thumb_misc) + 1)) &&
         tiff_ifd[i].comp != 34892)
     {
       thumb_width = tiff_ifd[i].t_width;
       thumb_height = tiff_ifd[i].t_height;
       thumb_offset = tiff_ifd[i].offset;
       thumb_length = tiff_ifd[i].bytes;
       thumb_misc = tiff_ifd[i].bps;
       thm = i;
     }
   if (thm >= 0)
   {
     thumb_misc |= tiff_ifd[thm].samples << 5;
     switch (tiff_ifd[thm].comp)
     {
     case 0:
       write_thumb = &LibRaw::layer_thumb;
       break;
     case 1:
       if (tiff_ifd[thm].bps <= 8)
         write_thumb = &LibRaw::ppm_thumb;
       else if (!strncmp(make, "Imacon", 6))
         write_thumb = &LibRaw::ppm16_thumb;
       else
         thumb_load_raw = &LibRaw::kodak_thumb_load_raw;
       break;
     case 65000:
       thumb_load_raw = tiff_ifd[thm].phint == 6 ? &LibRaw::kodak_ycbcr_load_raw
                                                 : &LibRaw::kodak_rgb_load_raw;
     }
   }
 }
