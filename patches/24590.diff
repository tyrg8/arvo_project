commit 95deb055d9200fdd3b154b51d99a05282d81075c
Author: Dirk Farin <dirk.farin@gmail.com>
Date:   Wed Aug 26 15:07:44 2020 +0200

    encoder_fuzzer tests with both HEIF and AVIF

diff --git a/libheif/encoder_fuzzer.cc b/libheif/encoder_fuzzer.cc
index 22b9d17..38bede0 100644
--- a/libheif/encoder_fuzzer.cc
+++ b/libheif/encoder_fuzzer.cc
@@ -135,59 +135,64 @@ static struct heif_error writer_write(struct heif_context* ctx, const void* data
 extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)
 {
   struct heif_error err;
   std::shared_ptr<heif_context> context(heif_context_alloc(),
                                         [](heif_context* c) { heif_context_free(c); });
   assert(context);
+
+  if (size < 2) {
+    return 0;
+  }
+
+  int quality = (data[0] & 0x7F) % 101;
+  bool lossless = (data[1] & 0x80);
+  bool use_avif = (data[1] & 0x40);
+  data += 2;
+  size -= 2;
+
   static const size_t kMaxEncoders = 5;
   const heif_encoder_descriptor* encoder_descriptors[kMaxEncoders];
-  int count = heif_context_get_encoder_descriptors(context.get(), heif_compression_AV1, nullptr,
+  int count = heif_context_get_encoder_descriptors(context.get(),
+                                                   use_avif ? heif_compression_AV1 : heif_compression_HEVC,
+                                                   nullptr,
                                                    encoder_descriptors, kMaxEncoders);
   assert(count > 0);
 
   heif_encoder* encoder;
   err = heif_context_get_encoder(context.get(), encoder_descriptors[0], &encoder);
   if (err.code != heif_error_Ok) {
     return 0;
   }
 
-  if (size < 2) {
-    heif_encoder_release(encoder);
-    return 0;
-  }
-  int quality = data[0] % 101;;
-  int lossless = (data[1] > 0x80);
-  data += 2;
-  size -= 2;
   heif_encoder_set_lossy_quality(encoder, quality);
   heif_encoder_set_lossless(encoder, lossless);
 
   struct heif_image* image = nullptr;
   size_t read = create_image(data, size, &image);
   assert(read <= size);
   if (!read) {
     heif_image_release(image);
     heif_encoder_release(encoder);
     return 0;
   }
 
   data += read;
   size -= read;
 
   struct heif_image_handle* img;
   err = heif_context_encode_image(context.get(), image, encoder, nullptr, &img);
   heif_image_release(image);
   heif_encoder_release(encoder);
   if (err.code != heif_error_Ok) {
     return 0;
   }
 
   heif_image_handle_release(img);
 
   MemoryWriter writer;
   struct heif_writer w;
   w.writer_api_version = 1;
   w.write = writer_write;
   heif_context_write(context.get(), &w, &writer);
   assert(writer.size() > 0);
   return 0;
 }
