commit 609164045facaeae193feb48d9c2fc5cc4321e8a
Author: Jakub Jelen <jjelen@redhat.com>
Date:   Thu Nov 16 09:55:47 2023 +0100

    epass2003: Avoid heap buffer overflow
    
    Removes also needless malloc & memcpy instead of returning the first
    allocated buffer.
    
    Thanks oss-fuzz
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64215

diff --git a/src/libopensc/card-epass2003.c b/src/libopensc/card-epass2003.c
index ed2ec649..76ba339e 100644
--- a/src/libopensc/card-epass2003.c
+++ b/src/libopensc/card-epass2003.c
@@ -3028,110 +3028,110 @@ static int
 epass2003_gen_key(struct sc_card *card, sc_epass2003_gen_key_data * data)
 {
 	int r;
 	size_t len = data->key_length;
 	struct sc_apdu apdu;
 	u8 rbuf[SC_MAX_EXT_APDU_BUFFER_SIZE] = { 0 };
 	u8 sbuf[SC_MAX_EXT_APDU_BUFFER_SIZE] = { 0 };
 
 	LOG_FUNC_CALLED(card->ctx);
 
 	if(len == 256)
 	{
 		sbuf[0] = 0x02;
 	}
 	else
 	{
 		sbuf[0] = 0x01;
 	}
 	sbuf[1] = (u8) ((len >> 8) & 0xff);
 	sbuf[2] = (u8) (len & 0xff);
 	sbuf[3] = (u8) ((data->prkey_id >> 8) & 0xFF);
 	sbuf[4] = (u8) ((data->prkey_id) & 0xFF);
 	sbuf[5] = (u8) ((data->pukey_id >> 8) & 0xFF);
 	sbuf[6] = (u8) ((data->pukey_id) & 0xFF);
 
 	/* generate key */
 	sc_format_apdu(card, &apdu, SC_APDU_CASE_3_SHORT, 0x46, 0x00, 0x00);
 	apdu.lc = apdu.datalen = 7;
 	apdu.data = sbuf;
 
 	r = sc_transmit_apdu_t(card, &apdu);
 	LOG_TEST_RET(card->ctx, r, "APDU transmit failed");
 	r = sc_check_sw(card, apdu.sw1, apdu.sw2);
 	LOG_TEST_RET(card->ctx, r, "generate key pair failed");
 
 	/* read public key */
 	sc_format_apdu(card, &apdu, SC_APDU_CASE_3_SHORT, 0xb4, 0x02, 0x00);
 	if(len == 256)
 	{
 		apdu.p1 = 0x00;
 	}
 
 	apdu.cla = 0x80;
 	apdu.lc = apdu.datalen = 2;
 	apdu.data = &sbuf[5];
 	apdu.resp = rbuf;
 	apdu.resplen = sizeof(rbuf);
 	apdu.le = 0x00;
 
 	r = sc_transmit_apdu_t(card, &apdu);
 	LOG_TEST_RET(card->ctx, r, "APDU transmit failed");
 	r = sc_check_sw(card, apdu.sw1, apdu.sw2);
 	LOG_TEST_RET(card->ctx, r, "get pukey failed");
 
 	if (len < apdu.resplen)
 		LOG_FUNC_RETURN(card->ctx, SC_ERROR_INVALID_ARGUMENTS);
 
-	if(256 == len)
+	if(256 == len) /* ECC 256 bit */
 	{
-		int xCoordinateLen = rbuf[1];
-		int yCoordinateLen = rbuf[2+xCoordinateLen+1];
-		unsigned char * tmp =(u8 *)malloc(xCoordinateLen + yCoordinateLen);
+		size_t xCoordinateLen = rbuf[1];
+		size_t yCoordinateLen;
+		unsigned char *tmp;
+
+		if (2 + xCoordinateLen + 1 >= apdu.resplen) {
+			LOG_FUNC_RETURN(card->ctx, SC_ERROR_INVALID_DATA);
+		}
+		yCoordinateLen = rbuf[2 + xCoordinateLen + 1];
+		if (2 + xCoordinateLen + 2 + yCoordinateLen >= apdu.resplen) {
+			LOG_FUNC_RETURN(card->ctx, SC_ERROR_INVALID_DATA);
+		}
+		data->modulus_len = xCoordinateLen + yCoordinateLen;
+		tmp = (u8 *)malloc(data->modulus_len);
 		if(!tmp)
 		{
 			LOG_FUNC_RETURN(card->ctx, SC_ERROR_OUT_OF_MEMORY);
 		}
 
 		if(0x58 == rbuf[0])
 		{
 			memcpy(tmp, &rbuf[2], xCoordinateLen);
 		}
 		else{
 			free(tmp);
 			LOG_FUNC_RETURN(card->ctx, SC_ERROR_OBJECT_NOT_VALID);
 		}
 		if(0x59 == rbuf[2+xCoordinateLen])
 		{
 			memcpy(tmp + xCoordinateLen, &rbuf[2+xCoordinateLen+2], yCoordinateLen);
 		}
 		else{
 			free(tmp);
 			LOG_FUNC_RETURN(card->ctx, SC_ERROR_OBJECT_NOT_VALID);
 		}
 
-		data->modulus = (u8 *) malloc(xCoordinateLen + yCoordinateLen);
-		if (!data->modulus)
-		{
-			free(tmp);
-			LOG_FUNC_RETURN(card->ctx, SC_ERROR_OUT_OF_MEMORY);
-		}
-		else
-		{
-			memcpy(data->modulus, tmp, xCoordinateLen+yCoordinateLen);
-			free(tmp);
-		}
+		data->modulus = tmp;
 	}
 	else
 	{
 		data->modulus = (u8 *) malloc(len);
 		if (!data->modulus)
 		{
 			LOG_FUNC_RETURN(card->ctx, SC_ERROR_OUT_OF_MEMORY);
 		}
 		else
 		{
 			memcpy(data->modulus, rbuf, len);
 		}
 	}
 	LOG_FUNC_RETURN(card->ctx, SC_SUCCESS);
 }
diff --git a/src/libopensc/cardctl.h b/src/libopensc/cardctl.h
index 9ce90ec1..acefbee5 100644
--- a/src/libopensc/cardctl.h
+++ b/src/libopensc/cardctl.h
@@ -831,19 +831,20 @@ typedef struct sc_epass2003_wkey_data_st {
 typedef struct sc_epass2003_gen_key_data_st {
 	 int prkey_id;
 	 int pukey_id;
 	 size_t key_length;
 	 u8 *modulus;
+	 int modulus_len;
 } sc_epass2003_gen_key_data;
 
 
 #if defined(__APPLE__) || defined(sun)
 #pragma pack()
 #else
 #pragma pack(pop)
 #endif
 
 /*
  * Rutoken ECP stuff
  */
 
 #define SC_RTECP_SEC_ATTR_SIZE 15
diff --git a/src/pkcs15init/pkcs15-epass2003.c b/src/pkcs15init/pkcs15-epass2003.c
index b9b9a115..92bf4689 100644
--- a/src/pkcs15init/pkcs15-epass2003.c
+++ b/src/pkcs15init/pkcs15-epass2003.c
@@ -498,205 +498,206 @@ static int epass2003_pkcs15_store_key(struct sc_profile *profile,
 static int epass2003_pkcs15_generate_key(struct sc_profile *profile,
 					 struct sc_pkcs15_card *p15card,
 					 struct sc_pkcs15_object *obj,
 					 struct sc_pkcs15_pubkey *pubkey)
 {
 	struct sc_card *card = p15card->card;
 	int r;
 	sc_epass2003_gen_key_data gendat;
 	struct sc_pkcs15_prkey_info *key_info =
 	    (struct sc_pkcs15_prkey_info *)obj->data;
 	size_t idx = key_info->key_reference;
 	size_t keybits = key_info->modulus_length;
 	struct sc_file *tfile = NULL, *pukf = NULL;
 	struct sc_path path;
 	struct sc_file *file = NULL;
 	int fidl = 0;
 
 	SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);
 
 	if (obj->type != SC_PKCS15_TYPE_PRKEY_RSA && obj->type != SC_PKCS15_TYPE_PRKEY_EC)
 		return SC_ERROR_NOT_SUPPORTED;
 
 	if(obj->type == SC_PKCS15_TYPE_PRKEY_EC && keybits == 0)
 		keybits = 256; 	//EC key length is 256 ...
 
 	/* allocate key object */
 	r = cosm_new_file(profile, card, obj->type, idx, &file); //replace SC_PKCS15_TYPE_PRKEY_RSA with obj->type
 	SC_TEST_GOTO_ERR(card->ctx, SC_LOG_DEBUG_VERBOSE, r,
 		    "create key: failed to allocate new key object");
 	file->size = keybits;
 	sc_log(card->ctx,  "private key path: %s",
 		 sc_print_path(&file->path));
 	sc_log(card->ctx,  "private key_info path: %s",
 		 sc_print_path(&(key_info->path)));
 
 	r = sc_pkcs15init_authenticate(profile, p15card, file,
 				       SC_AC_OP_DELETE);
 	SC_TEST_GOTO_ERR(card->ctx, SC_LOG_DEBUG_VERBOSE, r,
 		    "generate key: pkcs15init_authenticate(SC_AC_OP_DELETE) failed");
 
 	sc_delete_file(p15card->card, &file->path);
 	/* create */
 	r = sc_pkcs15init_create_file(profile, p15card, file);
 	SC_TEST_GOTO_ERR(card->ctx, SC_LOG_DEBUG_VERBOSE, r,
 		    "create key: failed to create key file");
 
 	sc_log(card->ctx, 
 		 "index %"SC_FORMAT_LEN_SIZE_T"u; keybits %"SC_FORMAT_LEN_SIZE_T"u\n",
 		 idx, keybits);
 	if (keybits < 1024 || keybits > 2048 || (keybits % 0x20)) {
 		if(obj->type == SC_PKCS15_TYPE_PRKEY_EC && keybits == 256)
 		{
 			sc_log(card->ctx, "current Alg is EC,Only support 256 ..\n");
 		}
 		else
 		{
 			sc_debug(card->ctx, SC_LOG_DEBUG_VERBOSE_TOOL,
 				 "Unsupported key size %"SC_FORMAT_LEN_SIZE_T"u\n",
 				 keybits);
 			r = SC_ERROR_INVALID_ARGUMENTS;
 			goto err;
 		}
 	}
 
 	path = key_info->path;
 	path.len -= 2;
 
 	r = sc_select_file(card, &path, &tfile);
 	SC_TEST_GOTO_ERR(card->ctx, SC_LOG_DEBUG_VERBOSE, r,
 		    "generate key: no private object DF");
 
 	r = sc_pkcs15init_authenticate(profile, p15card, tfile,
 				       SC_AC_OP_CRYPTO);
 	SC_TEST_GOTO_ERR(card->ctx, SC_LOG_DEBUG_VERBOSE, r,
 		    "generate key: pkcs15init_authenticate(SC_AC_OP_CRYPTO) failed");
 
 	r = sc_pkcs15init_authenticate(profile, p15card, tfile,
 				       SC_AC_OP_CREATE);
 	SC_TEST_GOTO_ERR(card->ctx, SC_LOG_DEBUG_VERBOSE, r,
 		    "generate key: pkcs15init_authenticate(SC_AC_OP_CREATE) failed");
 
 	if (obj->type != SC_PKCS15_TYPE_PRKEY_RSA )
 	{
 	
 		r = cosm_new_file(profile, card, SC_PKCS15_TYPE_PUBKEY_EC, idx, &pukf);
 	}
 	else
 	{
 		
 		r = cosm_new_file(profile, card, SC_PKCS15_TYPE_PUBKEY_RSA, idx, &pukf);
 	}
 
 	if (r < 0) {
 		sc_log(card->ctx, 
 			 "generate key: create temporary pukf failed\n");
 		goto err;
 	}
 
 	pukf->size = keybits;
 	pukf->id = pukf->path.value[pukf->path.len - 2] * 0x100
 	    + pukf->path.value[pukf->path.len - 1];
 
 	sc_log(card->ctx, 
 		 "public key size %"SC_FORMAT_LEN_SIZE_T"u; ef type %i/%i; id %04X; path: %s",
 		 pukf->size, pukf->type, pukf->ef_structure, pukf->id,
 		 sc_print_path(&pukf->path));
 
 	r = sc_select_file(p15card->card, &pukf->path, NULL);
 	/* if exist, delete */
 	if (r == SC_SUCCESS) {
 		r = sc_pkcs15init_authenticate(profile, p15card, pukf,
 		       SC_AC_OP_DELETE);
 		SC_TEST_GOTO_ERR(card->ctx, SC_LOG_DEBUG_VERBOSE, r,
 		    "generate key - pubkey: pkcs15init_authenticate(SC_AC_OP_DELETE) failed");
 
 		r = sc_pkcs15init_delete_by_path(profile, p15card, &pukf->path);
 		if (r != SC_SUCCESS) {
 			sc_log(card->ctx, 
 				 "generate key: failed to delete existing key file\n");
 			goto err;
 		}
 	}
 	/* create */
 	r = sc_pkcs15init_create_file(profile, p15card, pukf);
 	if (r != SC_SUCCESS) {
 		sc_log(card->ctx, 
 			 "generate key: pukf create file failed\n");
 		goto err;
 	}
 
 	r = sc_pkcs15init_authenticate(profile, p15card, pukf,
 				       SC_AC_OP_UPDATE);
 	SC_TEST_GOTO_ERR(card->ctx, SC_LOG_DEBUG_VERBOSE, r,
 		    "generate key - pubkey: pkcs15init_authenticate(SC_AC_OP_UPDATE) failed");
 
 	/* generate key pair */
 	fidl = (file->id & 0xff) * FID_STEP;
 	file->id = (file->id & 0xff00) + fidl;
 	pukf->id = (pukf->id & 0xff00) + fidl;
 	gendat.prkey_id = file->id;
 	gendat.pukey_id = pukf->id;
 	gendat.key_length = keybits;
 	gendat.modulus = NULL;
+	gendat.modulus_len = 0;
 	r = sc_card_ctl(card, SC_CARDCTL_ENTERSAFE_GENERATE_KEY, &gendat);
 	SC_TEST_GOTO_ERR(card->ctx, SC_LOG_DEBUG_VERBOSE, r,
 		    "generate RSA key pair failed");
-	
+
 	if (!gendat.modulus) {
 		r = SC_ERROR_OUT_OF_MEMORY;
 		goto err;
 	}
 
 	/* get the modulus */
 	if (pubkey && (obj->type == SC_PKCS15_TYPE_PRKEY_RSA)) {
 		u8 *buf;
 		struct sc_pkcs15_pubkey_rsa *rsa = &pubkey->u.rsa;
 		/* set the modulus */
 		rsa->modulus.data = gendat.modulus;
 		rsa->modulus.len = keybits >> 3;
 		/* set the exponent (always 0x10001) */
 		buf = (u8 *) malloc(3);
 		if (!buf) {
 			r = SC_ERROR_OUT_OF_MEMORY;
 			goto err;
 		}
 		buf[0] = 0x01;
 		buf[1] = 0x00;
 		buf[2] = 0x01;
 		rsa->exponent.data = buf;
 		rsa->exponent.len = 3;
 
 		pubkey->algorithm = SC_ALGORITHM_RSA;
 	}
 	else if(pubkey && (obj->type == SC_PKCS15_TYPE_PRKEY_EC)){
 		struct sc_ec_parameters *ecparams = (struct	
 				sc_ec_parameters *)key_info->params.data;
 		pubkey->algorithm = SC_ALGORITHM_EC; 
 		pubkey->u.ec.ecpointQ.value = (u8 *) malloc(65);
 		if (!pubkey->u.ec.ecpointQ.value) {
 			r = SC_ERROR_OUT_OF_MEMORY;
 			goto err;
 		}
 
 		pubkey->u.ec.ecpointQ.value[0] = 0x04;
-		memcpy(&pubkey->u.ec.ecpointQ.value[1], gendat.modulus, 64);
-		pubkey->u.ec.ecpointQ.len = 65;
+		memcpy(&pubkey->u.ec.ecpointQ.value[1], gendat.modulus, gendat.modulus_len);
+		pubkey->u.ec.ecpointQ.len = gendat.modulus_len;
 
 		free(pubkey->u.ec.params.named_curve);
 		pubkey->u.ec.params.named_curve = NULL; 
 
 		free(pubkey->u.ec.params.der.value);
 		pubkey->u.ec.params.der.value = NULL;
 		pubkey->u.ec.params.der.len = 0;
 		pubkey->u.ec.params.named_curve = strdup(ecparams->named_curve); 
 
 		if (!pubkey->u.ec.params.named_curve){
 			r = SC_ERROR_OUT_OF_MEMORY;
 			goto err;
 		}
 
 		r = sc_pkcs15_fix_ec_parameters(card->ctx, &pubkey->u.ec.params);
 	}
 	else
 		/* free public key */
 		free(gendat.modulus);
