commit 552a7cae109df2b264ede8e1f85ec66505175cc8
Author: Jon Sneyers <jon@cloudinary.com>
Date:   Sat Jun 12 14:58:48 2021 +0200

    avoid << 32 also in decoder

diff --git a/lib/jxl/dec_modular.cc b/lib/jxl/dec_modular.cc
index a7c76867..f44f5d07 100644
--- a/lib/jxl/dec_modular.cc
+++ b/lib/jxl/dec_modular.cc
@@ -425,123 +425,125 @@ Status ModularFrameDecoder::DecodeAcMetadata(size_t group_id, BitReader* reader,
 Status ModularFrameDecoder::FinalizeDecoding(PassesDecoderState* dec_state,
                                              jxl::ThreadPool* pool,
                                              ImageBundle* output) {
   Image& gi = full_image;
   size_t xsize = gi.w;
   size_t ysize = gi.h;
 
   const auto& frame_header = dec_state->shared->frame_header;
   const auto* metadata = frame_header.nonserialized_metadata;
 
   // Don't use threads if total image size is smaller than a group
   if (xsize * ysize < frame_dim.group_dim * frame_dim.group_dim) pool = nullptr;
 
   // Undo the global transforms
   gi.undo_transforms(global_header.wp_header, -1, pool);
   if (gi.error) return JXL_FAILURE("Undoing transforms failed");
 
   auto& decoded = dec_state->decoded;
 
   int c = 0;
   if (do_color) {
     const bool rgb_from_gray =
         metadata->m.color_encoding.IsGray() &&
         frame_header.color_transform == ColorTransform::kNone;
     const bool fp = metadata->m.bit_depth.floating_point_sample;
 
     for (; c < 3; c++) {
-      float factor = 1.f / ((1u << full_image.bitdepth) - 1);
+      float factor = full_image.bitdepth < 32
+                         ? 1.f / ((1u << full_image.bitdepth) - 1)
+                         : 0;
       int c_in = c;
       if (frame_header.color_transform == ColorTransform::kXYB) {
         factor = dec_state->shared->matrices.DCQuants()[c];
         // XYB is encoded as YX(B-Y)
         if (c < 2) c_in = 1 - c;
       } else if (rgb_from_gray) {
         c_in = 0;
       }
       // TODO(eustas): could we detect it on earlier stage?
       if (gi.channel[c_in].w == 0 || gi.channel[c_in].h == 0) {
         return JXL_FAILURE("Empty image");
       }
       size_t xsize_shifted = DivCeil(xsize, 1 << gi.channel[c_in].hshift);
       size_t ysize_shifted = DivCeil(ysize, 1 << gi.channel[c_in].vshift);
       if (ysize_shifted != gi.channel[c_in].h ||
           xsize_shifted != gi.channel[c_in].w) {
         return JXL_FAILURE("Dimension mismatch");
       }
       if (frame_header.color_transform == ColorTransform::kXYB && c == 2) {
         JXL_ASSERT(!fp);
         RunOnPool(
             pool, 0, ysize_shifted, jxl::ThreadPool::SkipInit(),
             [&](const int task, const int thread) {
               const size_t y = task;
               const pixel_type* const JXL_RESTRICT row_in =
                   gi.channel[c_in].Row(y);
               const pixel_type* const JXL_RESTRICT row_in_Y =
                   gi.channel[0].Row(y);
               float* const JXL_RESTRICT row_out = decoded.PlaneRow(c, y);
               HWY_DYNAMIC_DISPATCH(MultiplySum)
               (xsize_shifted, row_in, row_in_Y, factor, row_out);
             },
             "ModularIntToFloat");
       } else if (fp) {
         int bits = metadata->m.bit_depth.bits_per_sample;
         int exp_bits = metadata->m.bit_depth.exponent_bits_per_sample;
         RunOnPool(
             pool, 0, ysize_shifted, jxl::ThreadPool::SkipInit(),
             [&](const int task, const int thread) {
               const size_t y = task;
               const pixel_type* const JXL_RESTRICT row_in =
                   gi.channel[c_in].Row(y);
               float* const JXL_RESTRICT row_out = decoded.PlaneRow(c, y);
               int_to_float(row_in, row_out, xsize_shifted, bits, exp_bits);
             },
             "ModularIntToFloat_losslessfloat");
       } else {
         RunOnPool(
             pool, 0, ysize_shifted, jxl::ThreadPool::SkipInit(),
             [&](const int task, const int thread) {
               const size_t y = task;
               const pixel_type* const JXL_RESTRICT row_in =
                   gi.channel[c_in].Row(y);
               if (rgb_from_gray) {
                 HWY_DYNAMIC_DISPATCH(RgbFromSingle)
                 (xsize_shifted, row_in, factor, &decoded, c, y);
               } else {
                 HWY_DYNAMIC_DISPATCH(SingleFromSingle)
                 (xsize_shifted, row_in, factor, &decoded, c, y);
               }
             },
             "ModularIntToFloat");
       }
       if (rgb_from_gray) {
         break;
       }
     }
     if (rgb_from_gray) {
       c = 1;
     }
   }
   for (size_t ec = 0; ec < dec_state->extra_channels.size(); ec++, c++) {
     const ExtraChannelInfo& eci = output->metadata()->extra_channel_info[ec];
     int bits = eci.bit_depth.bits_per_sample;
     int exp_bits = eci.bit_depth.exponent_bits_per_sample;
     bool fp = eci.bit_depth.floating_point_sample;
     JXL_ASSERT(fp || bits < 32);
     const float mul = fp ? 0 : (1.0f / ((1u << bits) - 1));
     size_t ecups = frame_header.extra_channel_upsampling[ec];
     const size_t ec_xsize = DivCeil(frame_dim.xsize_upsampled, ecups);
     const size_t ec_ysize = DivCeil(frame_dim.ysize_upsampled, ecups);
     for (size_t y = 0; y < ec_ysize; ++y) {
       float* const JXL_RESTRICT row_out = dec_state->extra_channels[ec].Row(y);
       const pixel_type* const JXL_RESTRICT row_in = gi.channel[c].Row(y);
       if (fp) {
         int_to_float(row_in, row_out, ec_xsize, bits, exp_bits);
       } else {
         for (size_t x = 0; x < ec_xsize; ++x) {
           row_out[x] = row_in[x] * mul;
         }
       }
     }
   }
   return true;
 }
