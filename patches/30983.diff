commit 6e9a697bd9a76475d2d947fb1a371e8f7a6edb32
Author: Khaled Hosny <khaled@aliftype.com>
Date:   Tue Feb 16 16:32:00 2021 +0200

    [graphite] Zero-initialize the decompressed buffer
    
    Apparently lz4 is not fully initializing it despite claiming the
    decompressed size is exactly what we requested.

diff --git a/src/glat.cc b/src/glat.cc
index 0e55cc0..d9034e1 100644
--- a/src/glat.cc
+++ b/src/glat.cc
@@ -182,82 +182,82 @@ bool OpenTypeGLAT_v2::GlatEntry::SerializePart(OTSStream* out) const {
 bool OpenTypeGLAT_v3::Parse(const uint8_t* data, size_t length,
                             bool prevent_decompression) {
   Buffer table(data, length);
   OpenTypeGLOC* gloc = static_cast<OpenTypeGLOC*>(
       GetFont()->GetTypedTable(OTS_TAG_GLOC));
   if (!gloc) {
     return DropGraphite("Required Gloc table is missing");
   }
 
   if (!table.ReadU32(&this->version) || this->version >> 16 != 3) {
     return DropGraphite("Failed to read version");
   }
   if (!table.ReadU32(&this->compHead)) {
     return DropGraphite("Failed to read compression header");
   }
   switch ((this->compHead & SCHEME) >> 27) {
     case 0:  // uncompressed
       break;
     case 1: {  // lz4
       if (prevent_decompression) {
         return DropGraphite("Illegal nested compression");
       }
       size_t decompressed_size = this->compHead & FULL_SIZE;
       if (decompressed_size < length) {
         return DropGraphite("Decompressed size is less than compressed size");
       }
       if (decompressed_size == 0) {
         return DropGraphite("Decompressed size is set to 0");
       }
       // decompressed table must be <= OTS_MAX_DECOMPRESSED_TABLE_SIZE
       if (decompressed_size > OTS_MAX_DECOMPRESSED_TABLE_SIZE) {
         return DropGraphite("Decompressed size exceeds %gMB: %gMB",
                             OTS_MAX_DECOMPRESSED_TABLE_SIZE / (1024.0 * 1024.0),
                             decompressed_size / (1024.0 * 1024.0));
       }
-      std::unique_ptr<uint8_t> decompressed(new uint8_t[decompressed_size]);
+      std::unique_ptr<uint8_t> decompressed(new uint8_t[decompressed_size]());
       int ret = LZ4_decompress_safe_partial(
           reinterpret_cast<const char*>(data + table.offset()),
           reinterpret_cast<char*>(decompressed.get()),
           table.remaining(),  // input buffer size (input size + padding)
           decompressed_size,  // target output size
           decompressed_size);  // output buffer size
       if (ret < 0 || unsigned(ret) != decompressed_size) {
         return DropGraphite("Decompression failed with error code %d", ret);
       }
       return this->Parse(decompressed.get(), decompressed_size, true);
     }
     default:
       return DropGraphite("Unknown compression scheme");
   }
   if (this->compHead & RESERVED) {
     Warning("Nonzero reserved");
   }
 
   const std::vector<uint32_t>& locations = gloc->GetLocations();
   if (locations.empty()) {
     return DropGraphite("No locations from Gloc table");
   }
   std::list<uint32_t> unverified(locations.begin(), locations.end());
   //this->entries.resize(locations.size() - 1, this);
   for (size_t i = 0; i < locations.size() - 1; ++i) {
     this->entries.emplace_back(this);
     if (table.offset() != unverified.front()) {
       return DropGraphite("Offset check failed for a GlyphAttrs");
     }
     unverified.pop_front();
     if (!this->entries[i].ParsePart(table,
                                     unverified.front() - table.offset())) {
         // unverified.front() is guaranteed to exist because of the number of
         // iterations of this loop
       return DropGraphite("Failed to read a GlyphAttrs");
     }
   }
 
   if (unverified.size() != 1 || unverified.front() != table.offset()) {
     return DropGraphite("%zu location(s) could not be verified", unverified.size());
   }
   if (table.remaining()) {
     return Warning("%zu bytes unparsed", table.remaining());
   }
   return true;
 }
diff --git a/src/silf.cc b/src/silf.cc
index e34f948..fa3634c 100644
--- a/src/silf.cc
+++ b/src/silf.cc
@@ -14,90 +14,90 @@ namespace ots {
 bool OpenTypeSILF::Parse(const uint8_t* data, size_t length,
                          bool prevent_decompression) {
   Buffer table(data, length);
 
   if (!table.ReadU32(&this->version)) {
     return DropGraphite("Failed to read version");
   }
   if (this->version >> 16 != 1 &&
       this->version >> 16 != 2 &&
       this->version >> 16 != 3 &&
       this->version >> 16 != 4 &&
       this->version >> 16 != 5) {
     return DropGraphite("Unsupported table version: %u", this->version >> 16);
   }
   if (this->version >> 16 >= 3 && !table.ReadU32(&this->compHead)) {
     return DropGraphite("Failed to read compHead");
   }
   if (this->version >> 16 >= 5) {
     switch ((this->compHead & SCHEME) >> 27) {
       case 0:  // uncompressed
         break;
       case 1: {  // lz4
         if (prevent_decompression) {
           return DropGraphite("Illegal nested compression");
         }
         size_t decompressed_size = this->compHead & FULL_SIZE;
         if (decompressed_size < length) {
           return DropGraphite("Decompressed size is less than compressed size");
         }
         if (decompressed_size == 0) {
           return DropGraphite("Decompressed size is set to 0");
         }
         // decompressed table must be <= OTS_MAX_DECOMPRESSED_TABLE_SIZE
         if (decompressed_size > OTS_MAX_DECOMPRESSED_TABLE_SIZE) {
           return DropGraphite("Decompressed size exceeds %gMB: %gMB",
                               OTS_MAX_DECOMPRESSED_TABLE_SIZE / (1024.0 * 1024.0),
                               decompressed_size / (1024.0 * 1024.0));
         }
-        std::unique_ptr<uint8_t> decompressed(new uint8_t[decompressed_size]);
+        std::unique_ptr<uint8_t> decompressed(new uint8_t[decompressed_size]());
         int ret = LZ4_decompress_safe_partial(
             reinterpret_cast<const char*>(data + table.offset()),
             reinterpret_cast<char*>(decompressed.get()),
             table.remaining(),  // input buffer size (input size + padding)
             decompressed_size,  // target output size
             decompressed_size);  // output buffer size
         if (ret < 0 || unsigned(ret) != decompressed_size) {
           return DropGraphite("Decompression failed with error code %d", ret);
         }
         return this->Parse(decompressed.get(), decompressed_size, true);
       }
       default:
         return DropGraphite("Unknown compression scheme");
     }
   }
   if (!table.ReadU16(&this->numSub)) {
     return DropGraphite("Failed to read numSub");
   }
   if (this->version >> 16 >= 2 && !table.ReadU16(&this->reserved)) {
     return DropGraphite("Failed to read reserved");
   }
   if (this->version >> 16 >= 2 && this->reserved != 0) {
     Warning("Nonzero reserved");
   }
 
   unsigned long last_offset = 0;
   //this->offset.resize(this->numSub);
   for (unsigned i = 0; i < this->numSub; ++i) {
     this->offset.emplace_back();
     if (!table.ReadU32(&this->offset[i]) || this->offset[i] < last_offset) {
       return DropGraphite("Failed to read offset[%u]", i);
     }
     last_offset = this->offset[i];
   }
 
   for (unsigned i = 0; i < this->numSub; ++i) {
     if (table.offset() != this->offset[i]) {
       return DropGraphite("Offset check failed for tables[%lu]", i);
     }
     SILSub subtable(this);
     if (!subtable.ParsePart(table)) {
       return DropGraphite("Failed to read tables[%u]", i);
     }
     tables.push_back(subtable);
   }
 
   if (table.remaining()) {
     return Warning("%zu bytes unparsed", table.remaining());
   }
   return true;
 }
diff --git a/tests/fonts/fuzzing/1e77a0231fe3d0af9875d314c4c5da04e65b3680.ttf b/tests/fonts/fuzzing/1e77a0231fe3d0af9875d314c4c5da04e65b3680.ttf
new file mode 100644
index 0000000..4edf647
Binary files /dev/null and b/tests/fonts/fuzzing/1e77a0231fe3d0af9875d314c4c5da04e65b3680.ttf differ
