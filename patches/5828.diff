commit 7d2f42b180f5c45ae79896c4f02a9dd6d378f8ee
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sun Feb 11 09:32:34 2018 -0500

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=5832

diff --git a/MagickCore/constitute.c b/MagickCore/constitute.c
index baef49528..bf38b18df 100644
--- a/MagickCore/constitute.c
+++ b/MagickCore/constitute.c
@@ -299,503 +299,504 @@ MagickExport Image *PingImages(ImageInfo *image_info,const char *filename,
       /*
         Images of the form image-%d.png[1-5].
       */
       read_info=CloneImageInfo(image_info);
       sans=AcquireExceptionInfo();
       (void) SetImageInfo(read_info,0,sans);
       sans=DestroyExceptionInfo(sans);
       if (read_info->number_scenes == 0)
         {
           read_info=DestroyImageInfo(read_info);
           return(PingImage(image_info,exception));
         }
       (void) CopyMagickString(ping_filename,read_info->filename,
         MagickPathExtent);
       images=NewImageList();
       extent=(ssize_t) (read_info->scene+read_info->number_scenes);
       for (scene=(ssize_t) read_info->scene; scene < (ssize_t) extent; scene++)
       {
         (void) InterpretImageFilename(image_info,(Image *) NULL,ping_filename,
           (int) scene,read_info->filename,exception);
         image=PingImage(read_info,exception);
         if (image == (Image *) NULL)
           continue;
         AppendImageToList(&images,image);
       }
       read_info=DestroyImageInfo(read_info);
       return(images);
     }
   return(PingImage(image_info,exception));
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   R e a d I m a g e                                                         %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ReadImage() reads an image or image sequence from a file or file handle.
 %  The method returns a NULL if there is a memory shortage or if the image
 %  cannot be read.  On failure, a NULL image is returned and exception
 %  describes the reason for the failure.
 %
 %  The format of the ReadImage method is:
 %
 %      Image *ReadImage(const ImageInfo *image_info,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image_info: Read the image defined by the file or filename members of
 %      this structure.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 MagickExport Image *ReadImage(const ImageInfo *image_info,
   ExceptionInfo *exception)
 {
   char
     filename[MagickPathExtent],
     magick[MagickPathExtent],
     magick_filename[MagickPathExtent];
 
   const char
     *value;
 
   const DelegateInfo
     *delegate_info;
 
   const MagickInfo
     *magick_info;
 
   ExceptionInfo
     *sans_exception;
 
   GeometryInfo
     geometry_info;
 
   Image
     *image,
     *next;
 
   ImageInfo
     *read_info;
 
   MagickStatusType
     flags;
 
   /*
     Determine image type from filename prefix or suffix (e.g. image.jpg).
   */
   assert(image_info != (ImageInfo *) NULL);
   assert(image_info->signature == MagickCoreSignature);
   assert(image_info->filename != (char *) NULL);
   if (image_info->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",
       image_info->filename);
   assert(exception != (ExceptionInfo *) NULL);
   read_info=CloneImageInfo(image_info);
   (void) CopyMagickString(magick_filename,read_info->filename,MagickPathExtent);
   (void) SetImageInfo(read_info,0,exception);
   (void) CopyMagickString(filename,read_info->filename,MagickPathExtent);
   (void) CopyMagickString(magick,read_info->magick,MagickPathExtent);
   /*
     Call appropriate image reader based on image type.
   */
   sans_exception=AcquireExceptionInfo();
   magick_info=GetMagickInfo(read_info->magick,sans_exception);
   sans_exception=DestroyExceptionInfo(sans_exception);
   if (magick_info != (const MagickInfo *) NULL)
     {
       PolicyDomain
         domain;
 
       PolicyRights
         rights;
 
       domain=CoderPolicyDomain;
       rights=ReadPolicyRights;
       if (IsRightsAuthorized(domain,rights,magick_info->module) == MagickFalse)
         {
           errno=EPERM;
           (void) ThrowMagickException(exception,GetMagickModule(),PolicyError,
             "NotAuthorized","`%s'",read_info->filename);
           read_info=DestroyImageInfo(read_info);
           return((Image *) NULL);
         }
       if (GetMagickEndianSupport(magick_info) == MagickFalse)
         read_info->endian=UndefinedEndian;
       else
         if ((image_info->endian == UndefinedEndian) &&
             (GetMagickRawSupport(magick_info) != MagickFalse))
           {
             unsigned long
               lsb_first;
 
             lsb_first=1;
             read_info->endian=(*(char *) &lsb_first) == 1 ? LSBEndian :
               MSBEndian;
          }
     }
   if ((magick_info != (const MagickInfo *) NULL) &&
       (GetMagickDecoderSeekableStream(magick_info) != MagickFalse))
     {
       MagickBooleanType
         status;
 
       image=AcquireImage(read_info,exception);
       (void) CopyMagickString(image->filename,read_info->filename,
         MagickPathExtent);
       status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);
       if (status == MagickFalse)
         {
           read_info=DestroyImageInfo(read_info);
           image=DestroyImage(image);
           return((Image *) NULL);
         }
       if (IsBlobSeekable(image) == MagickFalse)
         {
           /*
             Coder requires a seekable stream.
           */
           *read_info->filename='\0';
           status=ImageToFile(image,read_info->filename,exception);
           if (status == MagickFalse)
             {
               (void) CloseBlob(image);
               read_info=DestroyImageInfo(read_info);
               image=DestroyImage(image);
               return((Image *) NULL);
             }
           read_info->temporary=MagickTrue;
         }
       (void) CloseBlob(image);
       image=DestroyImage(image);
     }
   image=NewImageList();
   if ((magick_info == (const MagickInfo *) NULL) ||
       (GetImageDecoder(magick_info) == (DecodeImageHandler *) NULL))
     {
       delegate_info=GetDelegateInfo(read_info->magick,(char *) NULL,exception);
       if (delegate_info == (const DelegateInfo *) NULL)
         {
           (void) SetImageInfo(read_info,0,exception);
           (void) CopyMagickString(read_info->filename,filename,
             MagickPathExtent);
           magick_info=GetMagickInfo(read_info->magick,exception);
         }
     }
   if ((magick_info != (const MagickInfo *) NULL) &&
       (GetImageDecoder(magick_info) != (DecodeImageHandler *) NULL))
     {
       if (GetMagickDecoderThreadSupport(magick_info) == MagickFalse)
         LockSemaphoreInfo(magick_info->semaphore);
       image=GetImageDecoder(magick_info)(read_info,exception);
       if (GetMagickDecoderThreadSupport(magick_info) == MagickFalse)
         UnlockSemaphoreInfo(magick_info->semaphore);
     }
   else
     {
       MagickBooleanType
         status;
 
       delegate_info=GetDelegateInfo(read_info->magick,(char *) NULL,exception);
       if (delegate_info == (const DelegateInfo *) NULL)
         {
           (void) ThrowMagickException(exception,GetMagickModule(),
             MissingDelegateError,"NoDecodeDelegateForThisImageFormat","`%s'",
             read_info->magick);
           if (read_info->temporary != MagickFalse)
             (void) RelinquishUniqueFileResource(read_info->filename);
           read_info=DestroyImageInfo(read_info);
           return((Image *) NULL);
         }
       /*
         Let our decoding delegate process the image.
       */
       image=AcquireImage(read_info,exception);
       if (image == (Image *) NULL)
         {
           read_info=DestroyImageInfo(read_info);
           return((Image *) NULL);
         }
       (void) CopyMagickString(image->filename,read_info->filename,
         MagickPathExtent);
       *read_info->filename='\0';
       if (GetDelegateThreadSupport(delegate_info) == MagickFalse)
         LockSemaphoreInfo(delegate_info->semaphore);
       status=InvokeDelegate(read_info,image,read_info->magick,(char *) NULL,
         exception);
       if (GetDelegateThreadSupport(delegate_info) == MagickFalse)
         UnlockSemaphoreInfo(delegate_info->semaphore);
       image=DestroyImageList(image);
       read_info->temporary=MagickTrue;
       if (status != MagickFalse)
         (void) SetImageInfo(read_info,0,exception);
       magick_info=GetMagickInfo(read_info->magick,exception);
       if ((magick_info == (const MagickInfo *) NULL) ||
           (GetImageDecoder(magick_info) == (DecodeImageHandler *) NULL))
         {
           if (IsPathAccessible(read_info->filename) != MagickFalse)
             (void) ThrowMagickException(exception,GetMagickModule(),
               MissingDelegateError,"NoDecodeDelegateForThisImageFormat","`%s'",
               read_info->magick);
           else
             ThrowFileException(exception,FileOpenError,"UnableToOpenFile",
               read_info->filename);
           read_info=DestroyImageInfo(read_info);
           return((Image *) NULL);
         }
       if (GetMagickDecoderThreadSupport(magick_info) == MagickFalse)
         LockSemaphoreInfo(magick_info->semaphore);
       image=(Image *) (GetImageDecoder(magick_info))(read_info,exception);
       if (GetMagickDecoderThreadSupport(magick_info) == MagickFalse)
         UnlockSemaphoreInfo(magick_info->semaphore);
     }
   if (read_info->temporary != MagickFalse)
     {
       (void) RelinquishUniqueFileResource(read_info->filename);
       read_info->temporary=MagickFalse;
       if (image != (Image *) NULL)
         (void) CopyMagickString(image->filename,filename,MagickPathExtent);
     }
   if (image == (Image *) NULL)
     {
       read_info=DestroyImageInfo(read_info);
       return(image);
     }
   if (exception->severity >= ErrorException)
     (void) LogMagickEvent(ExceptionEvent,GetMagickModule(),
       "Coder (%s) generated an image despite an error (%d), "
       "notify the developers",image->magick,exception->severity);
   if (IsBlobTemporary(image) != MagickFalse)
     (void) RelinquishUniqueFileResource(read_info->filename);
   if ((GetNextImageInList(image) != (Image *) NULL) &&
       (IsSceneGeometry(read_info->scenes,MagickFalse) != MagickFalse))
     {
       Image
         *clones;
 
       clones=CloneImages(image,read_info->scenes,exception);
       if (clones == (Image *) NULL)
         (void) ThrowMagickException(exception,GetMagickModule(),OptionError,
           "SubimageSpecificationReturnsNoImages","`%s'",read_info->filename);
       else
         {
           image=DestroyImageList(image);
           image=GetFirstImageInList(clones);
         }
     }
   for (next=image; next != (Image *) NULL; next=GetNextImageInList(next))
   {
     char
       magick_path[MagickPathExtent],
       *property,
       timestamp[MagickPathExtent];
 
     const char
       *option;
 
     const StringInfo
       *profile;
 
     ssize_t
       option_type;
 
     next->taint=MagickFalse;
     GetPathComponent(magick_filename,MagickPath,magick_path);
     if (*magick_path == '\0' && *next->magick == '\0')
       (void) CopyMagickString(next->magick,magick,MagickPathExtent);
     (void) CopyMagickString(next->magick_filename,magick_filename,
       MagickPathExtent);
     if (IsBlobTemporary(image) != MagickFalse)
       (void) CopyMagickString(next->filename,filename,MagickPathExtent);
     if (next->magick_columns == 0)
       next->magick_columns=next->columns;
     if (next->magick_rows == 0)
       next->magick_rows=next->rows;
     value=GetImageProperty(next,"tiff:Orientation",exception);
     if (value == (char *) NULL)
       value=GetImageProperty(next,"exif:Orientation",exception);
     if (value != (char *) NULL)
       {
         next->orientation=(OrientationType) StringToLong(value);
         (void) DeleteImageProperty(next,"tiff:Orientation");
         (void) DeleteImageProperty(next,"exif:Orientation");
       }
     value=GetImageProperty(next,"exif:XResolution",exception);
     if (value != (char *) NULL)
       {
         geometry_info.rho=next->resolution.x;
         geometry_info.sigma=1.0;
         flags=ParseGeometry(value,&geometry_info);
         if (geometry_info.sigma != 0)
           next->resolution.x=geometry_info.rho/geometry_info.sigma;
         if (strchr(value,',') != (char *) NULL)
           next->resolution.x=geometry_info.rho+geometry_info.sigma/1000.0;
         (void) DeleteImageProperty(next,"exif:XResolution");
       }
     value=GetImageProperty(next,"exif:YResolution",exception);
     if (value != (char *) NULL)
       {
         geometry_info.rho=next->resolution.y;
         geometry_info.sigma=1.0;
         flags=ParseGeometry(value,&geometry_info);
         if (geometry_info.sigma != 0)
           next->resolution.y=geometry_info.rho/geometry_info.sigma;
         if (strchr(value,',') != (char *) NULL)
           next->resolution.y=geometry_info.rho+geometry_info.sigma/1000.0;
         (void) DeleteImageProperty(next,"exif:YResolution");
       }
     value=GetImageProperty(next,"tiff:ResolutionUnit",exception);
     if (value == (char *) NULL)
       value=GetImageProperty(next,"exif:ResolutionUnit",exception);
     if (value != (char *) NULL)
       {
         option_type=ParseCommandOption(MagickResolutionOptions,MagickFalse,
           value);
         if (option_type >= 0)
           next->units=(ResolutionType) option_type;
         (void) DeleteImageProperty(next,"exif:ResolutionUnit");
         (void) DeleteImageProperty(next,"tiff:ResolutionUnit");
       }
     if (next->page.width == 0)
       next->page.width=next->columns;
     if (next->page.height == 0)
       next->page.height=next->rows;
     option=GetImageOption(read_info,"caption");
     if (option != (const char *) NULL)
       {
         property=InterpretImageProperties(read_info,next,option,exception);
         (void) SetImageProperty(next,"caption",property,exception);
         property=DestroyString(property);
       }
     option=GetImageOption(read_info,"comment");
     if (option != (const char *) NULL)
       {
         property=InterpretImageProperties(read_info,next,option,exception);
         (void) SetImageProperty(next,"comment",property,exception);
         property=DestroyString(property);
       }
     option=GetImageOption(read_info,"label");
     if (option != (const char *) NULL)
       {
         property=InterpretImageProperties(read_info,next,option,exception);
         (void) SetImageProperty(next,"label",property,exception);
         property=DestroyString(property);
       }
     if (LocaleCompare(next->magick,"TEXT") == 0)
       (void) ParseAbsoluteGeometry("0x0+0+0",&next->page);
     if ((read_info->extract != (char *) NULL) &&
         (read_info->stream == (StreamHandler) NULL))
       {
         RectangleInfo
           geometry;
 
+        SetGeometry(next,&geometry);
         flags=ParseAbsoluteGeometry(read_info->extract,&geometry);
         if ((next->columns != geometry.width) ||
             (next->rows != geometry.height))
           {
             if (((flags & XValue) != 0) || ((flags & YValue) != 0))
               {
                 Image
                   *crop_image;
 
                 crop_image=CropImage(next,&geometry,exception);
                 if (crop_image != (Image *) NULL)
                   ReplaceImageInList(&next,crop_image);
               }
             else
               if (((flags & WidthValue) != 0) || ((flags & HeightValue) != 0))
                 {
                   Image
                     *size_image;
 
                   flags=ParseRegionGeometry(next,read_info->extract,&geometry,
                     exception);
                   size_image=ResizeImage(next,geometry.width,geometry.height,
                     next->filter,exception);
                   if (size_image != (Image *) NULL)
                     ReplaceImageInList(&next,size_image);
                 }
           }
       }
     profile=GetImageProfile(next,"icc");
     if (profile == (const StringInfo *) NULL)
       profile=GetImageProfile(next,"icm");
     profile=GetImageProfile(next,"iptc");
     if (profile == (const StringInfo *) NULL)
       profile=GetImageProfile(next,"8bim");
     (void) FormatMagickTime(GetBlobProperties(next)->st_mtime,MagickPathExtent,
       timestamp);
     (void) SetImageProperty(next,"date:modify",timestamp,exception);
     (void) FormatMagickTime(GetBlobProperties(next)->st_ctime,MagickPathExtent,
       timestamp);
     (void) SetImageProperty(next,"date:create",timestamp,exception);
     option=GetImageOption(image_info,"delay");
     if (option != (const char *) NULL)
       {
         flags=ParseGeometry(option,&geometry_info);
         if ((flags & GreaterValue) != 0)
           {
             if (next->delay > (size_t) floor(geometry_info.rho+0.5))
               next->delay=(size_t) floor(geometry_info.rho+0.5);
           }
         else
           if ((flags & LessValue) != 0)
             {
               if (next->delay < (size_t) floor(geometry_info.rho+0.5))
                 next->ticks_per_second=(ssize_t) floor(geometry_info.sigma+0.5);
             }
           else
             next->delay=(size_t) floor(geometry_info.rho+0.5);
         if ((flags & SigmaValue) != 0)
           next->ticks_per_second=(ssize_t) floor(geometry_info.sigma+0.5);
       }
     option=GetImageOption(image_info,"dispose");
     if (option != (const char *) NULL)
       {
         option_type=ParseCommandOption(MagickDisposeOptions,MagickFalse,
           option);
         if (option_type >= 0)
           next->dispose=(DisposeType) option_type;
       }
     if (read_info->verbose != MagickFalse)
       (void) IdentifyImage(next,stderr,MagickFalse,exception);
     image=next;
   }
   read_info=DestroyImageInfo(read_info);
   return(GetFirstImageInList(image));
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   R e a d I m a g e s                                                       %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ReadImages() reads one or more images and returns them as an image list.
 %
 %  The format of the ReadImage method is:
 %
 %      Image *ReadImages(ImageInfo *image_info,const char *filename,
 %        ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image_info: the image info.
 %
 %    o filename: the image filename.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
