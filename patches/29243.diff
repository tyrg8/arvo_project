commit de6a7ee4bd18b7812ee5ff9abb62e2889daa501b
Author: Alan Modra <amodra@gmail.com>
Date:   Tue Jan 5 13:17:24 2021 +1030

    asan: heap buffer overflow in _bfd_vms_slurp_egsd
    
            * vms-alpha.c (_bfd_vms_slurp_egsd): Read flags after size check.

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 20ccea5920e..4eda3a1e57e 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,54 +1,58 @@
+2021-01-05  Alan Modra  <amodra@gmail.com>
+
+	* vms-alpha.c (_bfd_vms_slurp_egsd): Read flags after size check.
+
 2021-01-05  Nelson Chu  <nelson.chu@sifive.com>
 
 	* elfnn-riscv.c (allocate_dynrelocs): When we are generating pde,
 	make sure gp symbol is output as a dynamic symbol.
 
 2021-01-04  H.J. Lu  <hongjiu.lu@intel.com>
 
 	PR ld/26256
 	* elflink.c (compare_link_order): Place unordered sections before
 	ordered sections.
 	(elf_fixup_link_order): Add a link info argument.  Allow mixed
 	ordered and unordered input sections for non-relocatable link.
 	Sort the consecutive bfd_indirect_link_order sections with the
 	same pattern.  Change the offsets of the bfd_indirect_link_order
 	sections only.
 	(bfd_elf_final_link): Pass info to elf_fixup_link_order.
 	* section.c (bfd_section): Add pattern.
 	(BFD_FAKE_SECTION): Initialize pattern to NULL.
 	* bfd-in2.h: Regenerated.
 
 2021-01-04  Alexander Fedotov  <alfedotov@gmail.com>
 
 	* elf32-arm.c (elf32_arm_print_private_bfd_data): Prefix hex value
 	of private flags with 0x.
 	* elfnn-aarch64.c (elfNN_aarch64_print_private_bfd_data): Likewise.
 
 2021-01-04  Alan Modra  <amodra@gmail.com>
 
 	PR 26822
 	* elflink.c (elf_link_input_bfd): Use the file base name in
 	linker generated STT_FILE symbols.
 
 2021-01-04  Nelson Chu  <nelson.chu@sifive.com>
 
 	* elfxx-riscv.c (riscv_compare_subsets): Removed static.
 	* elfxx-riscv.h: Add declaration.
 	* elfnn-riscv.c (riscv_merge_multi_letter_ext): Use
 	riscv_compare_subsets to check the orders.
 	(riscv_skip_prefix): Removed.
 	(riscv_prefix_cmp): Removed.
 
 2021-01-04  Alan Modra  <amodra@gmail.com>
 
 	PR 26741
 	* elfxx-riscv.c (riscv_parse_prefixed_ext): Free subset after
 	calculating subset version length.
 
 2021-01-01  Nicolas Boulenguez  <nicolas@debian.org>
 
 	* xcofflink.c: Correct spelling in comments.
 
 2021-01-01  Alan Modra  <amodra@gmail.com>
 
 	Update year range in copyright notice of all files.
diff --git a/bfd/vms-alpha.c b/bfd/vms-alpha.c
index 2c0e8126dc2..72d89e518f6 100644
--- a/bfd/vms-alpha.c
+++ b/bfd/vms-alpha.c
@@ -1179,284 +1179,283 @@ static bfd_boolean
 _bfd_vms_slurp_egsd (bfd *abfd)
 {
   int gsd_type;
   unsigned int gsd_size;
   unsigned char *vms_rec;
   bfd_vma base_addr;
   long psindx;
 
   vms_debug2 ((2, "EGSD\n"));
 
   if (PRIV (recrd.rec_size) < 8)
     {
       _bfd_error_handler (_("corrupt EGSD record: its size (%#x) is too small"),
 			  PRIV (recrd.rec_size));
       bfd_set_error (bfd_error_bad_value);
       return FALSE;
     }
 
   PRIV (recrd.rec) += 8;	/* Skip type, size, align pad.  */
   PRIV (recrd.rec_size) -= 8;
 
   /* Calculate base address for each section.  */
   base_addr = 0;
 
   while (PRIV (recrd.rec_size) > 4)
     {
       vms_rec = PRIV (recrd.rec);
 
       gsd_type = bfd_getl16 (vms_rec);
       gsd_size = bfd_getl16 (vms_rec + 2);
 
       vms_debug2 ((3, "egsd_type %d\n", gsd_type));
 
       /* PR 21615: Check for size overflow.  */
       if (PRIV (recrd.rec_size) < gsd_size)
 	{
 	  _bfd_error_handler (_("corrupt EGSD record type %d: size (%#x) "
 				"is larger than remaining space (%#x)"),
 			      gsd_type, gsd_size, PRIV (recrd.rec_size));
 	  bfd_set_error (bfd_error_bad_value);
 	  return FALSE;
 	}
 
       if (gsd_size < 4)
 	{
 	too_small:
 	  _bfd_error_handler (_("corrupt EGSD record type %d: size (%#x) "
 				"is too small"),
 			      gsd_type, gsd_size);
 	  bfd_set_error (bfd_error_bad_value);
 	  return FALSE;
 	}
 
       switch (gsd_type)
 	{
 	case EGSD__C_PSC:
 	  /* Program section definition.  */
 	  {
 	    struct vms_egps *egps = (struct vms_egps *) vms_rec;
 	    flagword new_flags, vms_flags;
 	    asection *section;
 
 	    if (offsetof (struct vms_egps, flags) + 2 > gsd_size)
 	      goto too_small;
 	    vms_flags = bfd_getl16 (egps->flags);
 
 	    if ((vms_flags & EGPS__V_REL) == 0)
 	      {
 		/* Use the global absolute section for all
 		   absolute sections.  */
 		section = bfd_abs_section_ptr;
 	      }
 	    else
 	      {
 		char *name;
 		bfd_vma align_addr;
 		size_t left;
 
 		if (offsetof (struct vms_egps, namlng) >= gsd_size)
 		  goto too_small;
 		left = gsd_size - offsetof (struct vms_egps, namlng);
 		name = _bfd_vms_save_counted_string (abfd, &egps->namlng, left);
 		if (name == NULL || name[0] == 0)
 		  return FALSE;
 
 		section = bfd_make_section (abfd, name);
 		if (!section)
 		  return FALSE;
 
 		section->filepos = 0;
 		section->size = bfd_getl32 (egps->alloc);
 		section->alignment_power = egps->align & 31;
 
 		vms_section_data (section)->flags = vms_flags;
 		vms_section_data (section)->no_flags = 0;
 
 		new_flags = vms_secflag_by_name (evax_section_flags,
 						 section->name,
 						 section->size > 0);
 		if (section->size > 0)
 		  new_flags |= SEC_LOAD;
 		if (!(vms_flags & EGPS__V_NOMOD) && section->size > 0)
 		  {
 		    /* Set RELOC and HAS_CONTENTS if the section is not
 		       demand-zero and not empty.  */
 		    new_flags |= SEC_HAS_CONTENTS;
 		    if (vms_flags & EGPS__V_REL)
 		      new_flags |= SEC_RELOC;
 		  }
 		if (vms_flags & EGPS__V_EXE)
 		  {
 		    /* Set CODE if section is executable.  */
 		    new_flags |= SEC_CODE;
 		    new_flags &= ~SEC_DATA;
 		  }
 		if (!bfd_set_section_flags (section, new_flags))
 		  return FALSE;
 
 		/* Give a non-overlapping vma to non absolute sections.  */
 		align_addr = (bfd_vma) 1 << section->alignment_power;
 		base_addr = (base_addr + align_addr - 1) & -align_addr;
 		section->vma = base_addr;
 		base_addr += section->size;
 	      }
 
 	    /* Append it to the section array.  */
 	    if (PRIV (section_count) >= PRIV (section_max))
 	      {
 		if (PRIV (section_max) == 0)
 		  PRIV (section_max) = 16;
 		else
 		  PRIV (section_max) *= 2;
 		PRIV (sections) = bfd_realloc_or_free
 		  (PRIV (sections), PRIV (section_max) * sizeof (asection *));
 		if (PRIV (sections) == NULL)
 		  return FALSE;
 	      }
 
 	    PRIV (sections)[PRIV (section_count)] = section;
 	    PRIV (section_count)++;
 	  }
 	  break;
 
 	case EGSD__C_SYM:
 	  {
 	    unsigned int nameoff;
 	    struct vms_symbol_entry *entry;
 	    struct vms_egsy *egsy = (struct vms_egsy *) vms_rec;
 	    flagword old_flags;
 
 	    if (offsetof (struct vms_egsy, flags) + 2 > gsd_size)
 	      goto too_small;
 	    old_flags = bfd_getl16 (egsy->flags);
 	    if (old_flags & EGSY__V_DEF)
 	      nameoff = ESDF__B_NAMLNG;
 	    else
 	      nameoff = ESRF__B_NAMLNG;
 
 	    if (nameoff >= gsd_size)
 	      goto too_small;
 	    entry = add_symbol (abfd, vms_rec + nameoff, gsd_size - nameoff);
 	    if (entry == NULL)
 	      return FALSE;
 
 	    /* Allow only duplicate reference.  */
 	    if ((entry->flags & EGSY__V_DEF) && (old_flags & EGSY__V_DEF))
 	      abort ();
 
 	    if (entry->typ == 0)
 	      {
 		entry->typ = gsd_type;
 		entry->data_type = egsy->datyp;
 		entry->flags = old_flags;
 	      }
 
 	    if (old_flags & EGSY__V_DEF)
 	      {
 		struct vms_esdf *esdf = (struct vms_esdf *) vms_rec;
 
 		entry->value = bfd_getl64 (esdf->value);
 		if (PRIV (sections) == NULL)
 		  return FALSE;
 
 		psindx = bfd_getl32 (esdf->psindx);
 		/* PR 21813: Check for an out of range index.  */
 		if (psindx < 0 || psindx >= (int) PRIV (section_count))
 		  {
 		  bad_psindx:
 		    _bfd_error_handler (_("corrupt EGSD record: its psindx "
 					  "field is too big (%#lx)"),
 					psindx);
 		    bfd_set_error (bfd_error_bad_value);
 		    return FALSE;
 		  }
 		entry->section = PRIV (sections)[psindx];
 
 		if (old_flags & EGSY__V_NORM)
 		  {
 		    PRIV (norm_sym_count)++;
 
 		    entry->code_value = bfd_getl64 (esdf->code_address);
 		    psindx = bfd_getl32 (esdf->ca_psindx);
 		    /* PR 21813: Check for an out of range index.  */
 		    if (psindx < 0 || psindx >= (int) PRIV (section_count))
 		      goto bad_psindx;
 		    entry->code_section = PRIV (sections)[psindx];
 		  }
 	      }
 	  }
 	  break;
 
 	case EGSD__C_SYMG:
 	  {
 	    struct vms_symbol_entry *entry;
 	    struct vms_egst *egst = (struct vms_egst *)vms_rec;
 	    flagword old_flags;
 	    unsigned int nameoff = offsetof (struct vms_egst, namlng);
 
-	    old_flags = bfd_getl16 (egst->header.flags);
-
 	    if (nameoff >= gsd_size)
 	      goto too_small;
 	    entry = add_symbol (abfd, &egst->namlng, gsd_size - nameoff);
 	    if (entry == NULL)
 	      return FALSE;
 
+	    old_flags = bfd_getl16 (egst->header.flags);
 	    entry->typ = gsd_type;
 	    entry->data_type = egst->header.datyp;
 	    entry->flags = old_flags;
 
 	    entry->symbol_vector = bfd_getl32 (egst->value);
 
 	    if (old_flags & EGSY__V_REL)
 	      {
 		if (PRIV (sections) == NULL)
 		  return FALSE;
 		psindx = bfd_getl32 (egst->psindx);
 		/* PR 21813: Check for an out of range index.  */
 		if (psindx < 0 || psindx >= (int) PRIV (section_count))
 		  goto bad_psindx;
 		entry->section = PRIV (sections)[psindx];
 	      }
 	    else
 	      entry->section = bfd_abs_section_ptr;
 
 	    entry->value = bfd_getl64 (egst->lp_2);
 
 	    if (old_flags & EGSY__V_NORM)
 	      {
 		PRIV (norm_sym_count)++;
 
 		entry->code_value = bfd_getl64 (egst->lp_1);
 		entry->code_section = bfd_abs_section_ptr;
 	      }
 	  }
 	  break;
 
 	case EGSD__C_SPSC:
 	case EGSD__C_IDC:
 	  /* Currently ignored.  */
 	  break;
 	case EGSD__C_SYMM:
 	case EGSD__C_SYMV:
 	default:
 	  _bfd_error_handler (_("unknown EGSD subtype %d"), gsd_type);
 	  bfd_set_error (bfd_error_bad_value);
 	  return FALSE;
 	}
 
       PRIV (recrd.rec_size) -= gsd_size;
       PRIV (recrd.rec) += gsd_size;
     }
 
   /* FIXME: Should we complain if PRIV (recrd.rec_size) is not zero ?  */
 
   if (PRIV (gsd_sym_count) > 0)
     abfd->flags |= HAS_SYMS;
 
   return TRUE;
 }
 
 /* Stack routines for vms ETIR commands.  */
 
 /* Push value and section index.  */
