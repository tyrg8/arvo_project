commit 3c5a5e691ba31ed60c4509e834dfdb40e0fa0220
Author: Volodymyr Shymanskyy <vshymanskyi@gmail.com>
Date:   Mon Apr 12 16:58:44 2021 +0300

    Cleanup

diff --git a/source/m3_compile.c b/source/m3_compile.c
index ca0fe83..6fc5e51 100644
--- a/source/m3_compile.c
+++ b/source/m3_compile.c
@@ -2210,21 +2210,22 @@ M3Result  Compile_BlockStatements  (IM3Compilation o)
     while (o->wasm < o->wasmEnd)
     {                                                                   emit_stack_dump (o);
         m3opcode_t opcode;
         o->lastOpcodeStart = o->wasm;
 _       (Read_opcode (& opcode, & o->wasm, o->wasmEnd));                log_opcode (o, opcode);
 
-        if (IsCompilingExpressions(o)) {
+        // Restrict opcodes when evaluating expressions
+        if (not o->function) {
             switch (opcode) {
             case c_waOp_i32_const: case c_waOp_i64_const:
             case c_waOp_f32_const: case c_waOp_f64_const:
             case c_waOp_getGlobal: case c_waOp_end:
                 break;
             default:
                 _throw(m3Err_restictedOpcode);
             }
         }
 
         IM3OpInfo opinfo = GetOpInfo(opcode);
         _throwif (m3Err_unknownOpcode, opinfo == NULL);
 
         if (opinfo->compiler) {
diff --git a/source/m3_env.c b/source/m3_env.c
index 316f57f..e288d18 100644
--- a/source/m3_env.c
+++ b/source/m3_env.c
@@ -260,81 +260,75 @@ void  m3_FreeRuntime  (IM3Runtime i_runtime)
     }
 }
 
-static char* c_compilingExprsFlag = "m3_exprs";
-
-bool  IsCompilingExpressions  (IM3Compilation i_compilation)
-{
-    return i_compilation->runtime && i_compilation->runtime->userdata == c_compilingExprsFlag;
-}
-
 M3Result  EvaluateExpression  (IM3Module i_module, void * o_expressed, u8 i_type, bytes_t * io_bytes, cbytes_t i_end)
 {
     M3Result result = m3Err_none;
 
+    // OPTZ: use a simplified interpreter for expressions
+
     // create a temporary runtime context
 #if defined(d_m3PreferStaticAlloc)
     static M3Runtime runtime;
 #else
     M3Runtime runtime;
 #endif
     M3_INIT (runtime);
 
     runtime.environment = i_module->runtime->environment;
     runtime.numStackSlots = i_module->runtime->numStackSlots;
     runtime.stack = i_module->runtime->stack;
-    runtime.userdata = c_compilingExprsFlag;
 
     m3stack_t stack = (m3stack_t)runtime.stack;
 
     IM3Runtime savedRuntime = i_module->runtime;
     i_module->runtime = & runtime;
 
     IM3Compilation o = & runtime.compilation;
     o->runtime = & runtime;
     o->module =  i_module;
     o->wasm =    * io_bytes;
     o->wasmEnd = i_end;
     o->lastOpcodeStart = o->wasm;
 
     o->block.depth = -1;  // so that root compilation depth = 0
 
     //  OPTZ: this code page could be erased after use.  maybe have 'empty' list in addition to full and open?
     o->page = AcquireCodePage (& runtime);  // AcquireUnusedCodePage (...)
 
     if (o->page)
     {
         IM3FuncType ftype = runtime.environment->retFuncTypes[i_type];
 
         pc_t m3code = GetPagePC (o->page);
         result = CompileBlock (o, ftype, c_waOp_block);
 
         if (not result)
         {
             m3ret_t r = Call (m3code, stack, NULL, d_m3OpDefaultArgs);
 
             if (r == 0)
             {
                 if (SizeOfType (i_type) == sizeof (u32))
                 {
                     * (u32 *) o_expressed = * ((u32 *) stack);
                 }
                 else
                 {
                     * (u64 *) o_expressed = * ((u64 *) stack);
                 }
             }
         }
 
         // TODO: EraseCodePage (...) see OPTZ above
         ReleaseCodePage (& runtime, o->page);
     }
     else result = m3Err_mallocFailedCodePage;
 
     runtime.stack = NULL;        // prevent free(stack) in ReleaseRuntime
     Runtime_Release (& runtime);
     i_module->runtime = savedRuntime;
 
     * io_bytes = o->wasm;
 
     return result;
 }
