commit 79ab2f6ae21059e394883f6c8e3b2a0bb97e7e48
Author: Kevin Backhouse <kevinbackhouse@github.com>
Date:   Wed Feb 7 21:37:59 2024 +0000

    Credit to OSS-Fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64151
    nul-terminate buf to avoid out-of-bounds read

diff --git a/src/quicktimevideo.cpp b/src/quicktimevideo.cpp
index 5c3a25bdf..fccc08dc9 100644
--- a/src/quicktimevideo.cpp
+++ b/src/quicktimevideo.cpp
@@ -906,210 +906,212 @@ void QuickTimeVideo::userDataDecoder(size_t size_external) {
 
 void QuickTimeVideo::NikonTagsDecoder(size_t size_external) {
   size_t cur_pos = io_->tell();
-  DataBuf buf(200);
+  DataBuf buf(201);
   DataBuf buf2(4 + 1);
   uint32_t TagID = 0;
   uint16_t dataLength = 0;
   uint16_t dataType = 2;
   const TagDetails* td;
   const TagDetails* td2;
 
   for (int i = 0; i < 100; i++) {
     io_->readOrThrow(buf.data(), 4);
     TagID = buf.read_uint32(0, bigEndian);
     td = Exiv2::find(NikonNCTGTags, TagID);
 
     io_->readOrThrow(buf.data(), 2);
     dataType = buf.read_uint16(0, bigEndian);
 
     std::memset(buf.data(), 0x0, buf.size());
     io_->readOrThrow(buf.data(), 2);
 
     if (TagID == 0x2000023) {
       size_t local_pos = io_->tell();
       dataLength = buf.read_uint16(0, bigEndian);
       std::memset(buf.data(), 0x0, buf.size());
 
       io_->readOrThrow(buf.data(), 4);
       xmpData_["Xmp.video.PictureControlVersion"] = Exiv2::toString(buf.data());
       io_->readOrThrow(buf.data(), 20);
       xmpData_["Xmp.video.PictureControlName"] = Exiv2::toString(buf.data());
       io_->readOrThrow(buf.data(), 20);
       xmpData_["Xmp.video.PictureControlBase"] = Exiv2::toString(buf.data());
       io_->readOrThrow(buf.data(), 4);
       std::memset(buf.data(), 0x0, buf.size());
 
       io_->readOrThrow(buf.data(), 1);
       td2 = Exiv2::find(PictureControlAdjust, static_cast<int>(buf.data()[0]) & 7);
       if (td2)
         xmpData_["Xmp.video.PictureControlAdjust"] = exvGettext(td2->label_);
       else
         xmpData_["Xmp.video.PictureControlAdjust"] = static_cast<int>(buf.data()[0]) & 7;
 
       io_->readOrThrow(buf.data(), 1);
       td2 = Exiv2::find(NormalSoftHard, static_cast<int>(buf.data()[0]) & 7);
       if (td2)
         xmpData_["Xmp.video.PictureControlQuickAdjust"] = exvGettext(td2->label_);
 
       io_->readOrThrow(buf.data(), 1);
       td2 = Exiv2::find(NormalSoftHard, static_cast<int>(buf.data()[0]) & 7);
       if (td2)
         xmpData_["Xmp.video.Sharpness"] = exvGettext(td2->label_);
       else
         xmpData_["Xmp.video.Sharpness"] = static_cast<int>(buf.data()[0]) & 7;
 
       io_->readOrThrow(buf.data(), 1);
       td2 = Exiv2::find(NormalSoftHard, static_cast<int>(buf.data()[0]) & 7);
       if (td2)
         xmpData_["Xmp.video.Contrast"] = exvGettext(td2->label_);
       else
         xmpData_["Xmp.video.Contrast"] = static_cast<int>(buf.data()[0]) & 7;
 
       io_->readOrThrow(buf.data(), 1);
       td2 = Exiv2::find(NormalSoftHard, static_cast<int>(buf.data()[0]) & 7);
       if (td2)
         xmpData_["Xmp.video.Brightness"] = exvGettext(td2->label_);
       else
         xmpData_["Xmp.video.Brightness"] = static_cast<int>(buf.data()[0]) & 7;
 
       io_->readOrThrow(buf.data(), 1);
       td2 = Exiv2::find(Saturation, static_cast<int>(buf.data()[0]) & 7);
       if (td2)
         xmpData_["Xmp.video.Saturation"] = exvGettext(td2->label_);
       else
         xmpData_["Xmp.video.Saturation"] = static_cast<int>(buf.data()[0]) & 7;
 
       io_->readOrThrow(buf.data(), 1);
       xmpData_["Xmp.video.HueAdjustment"] = static_cast<int>(buf.data()[0]) & 7;
 
       io_->readOrThrow(buf.data(), 1);
       td2 = Exiv2::find(FilterEffect, static_cast<int>(buf.data()[0]));
       if (td2)
         xmpData_["Xmp.video.FilterEffect"] = exvGettext(td2->label_);
       else
         xmpData_["Xmp.video.FilterEffect"] = static_cast<int>(buf.data()[0]);
 
       io_->readOrThrow(buf.data(), 1);
       td2 = Exiv2::find(ToningEffect, static_cast<int>(buf.data()[0]));
       if (td2)
         xmpData_["Xmp.video.ToningEffect"] = exvGettext(td2->label_);
       else
         xmpData_["Xmp.video.ToningEffect"] = static_cast<int>(buf.data()[0]);
 
       io_->readOrThrow(buf.data(), 1);
       xmpData_["Xmp.video.ToningSaturation"] = static_cast<int>(buf.data()[0]);
 
       io_->seek(local_pos + dataLength, BasicIo::beg);
     }
 
     else if (TagID == 0x2000024) {
       size_t local_pos = io_->tell();
       dataLength = buf.read_uint16(0, bigEndian);
       std::memset(buf.data(), 0x0, buf.size());
 
       io_->readOrThrow(buf.data(), 2);
       xmpData_["Xmp.video.TimeZone"] = Exiv2::getShort(buf.data(), bigEndian);
       io_->readOrThrow(buf.data(), 1);
       td2 = Exiv2::find(YesNo, static_cast<int>(buf.data()[0]));
       if (td2)
         xmpData_["Xmp.video.DayLightSavings"] = exvGettext(td2->label_);
 
       io_->readOrThrow(buf.data(), 1);
       td2 = Exiv2::find(DateDisplayFormat, static_cast<int>(buf.data()[0]));
       if (td2)
         xmpData_["Xmp.video.DateDisplayFormat"] = exvGettext(td2->label_);
 
       io_->seek(local_pos + dataLength, BasicIo::beg);
     }
 
     else if (dataType == 2 || dataType == 7) {
       dataLength = buf.read_uint16(0, bigEndian);
       std::memset(buf.data(), 0x0, buf.size());
 
       // Sanity check with an "unreasonably" large number
-      if (dataLength > 200) {
+      if (dataLength >= buf.size()) {
 #ifndef SUPPRESS_WARNINGS
         EXV_ERROR << "Xmp.video Nikon Tags, dataLength was found to be larger than 200."
                   << " Entries considered invalid. Not Processed.\n";
 #endif
         io_->seek(io_->tell() + dataLength, BasicIo::beg);
+        buf.data()[0] = '\0';
       } else {
         io_->readOrThrow(buf.data(), dataLength);
+        buf.data()[dataLength] = '\0';
       }
 
       if (td) {
         xmpData_[exvGettext(td->label_)] = Exiv2::toString(buf.data());
       }
     } else if (dataType == 4) {
       dataLength = buf.read_uint16(0, bigEndian) * 4;
       std::memset(buf.data(), 0x0, buf.size());
       io_->readOrThrow(buf.data(), 4);
       if (td)
         xmpData_[exvGettext(td->label_)] = Exiv2::toString(buf.read_uint32(0, bigEndian));
 
       // Sanity check with an "unreasonably" large number
       if (dataLength > 200 || dataLength < 4) {
 #ifndef SUPPRESS_WARNINGS
         EXV_ERROR << "Xmp.video Nikon Tags, dataLength was found to be of inappropriate size."
                   << " Entries considered invalid. Not Processed.\n";
 #endif
         io_->seek(io_->tell() + dataLength - 4, BasicIo::beg);
       } else
         io_->readOrThrow(buf.data(), dataLength - 4);
     } else if (dataType == 3) {
       dataLength = buf.read_uint16(0, bigEndian) * 2;
       std::memset(buf.data(), 0x0, buf.size());
       io_->readOrThrow(buf.data(), 2);
       if (td)
         xmpData_[exvGettext(td->label_)] = Exiv2::toString(buf.read_uint16(0, bigEndian));
 
       // Sanity check with an "unreasonably" large number
       if (dataLength > 200 || dataLength < 2) {
 #ifndef SUPPRESS_WARNINGS
         EXV_ERROR << "Xmp.video Nikon Tags, dataLength was found to be of inappropriate size."
                   << " Entries considered invalid. Not Processed.\n";
 #endif
         io_->seek(io_->tell() + dataLength - 2, BasicIo::beg);
       } else
         io_->readOrThrow(buf.data(), dataLength - 2);
     } else if (dataType == 5) {
       dataLength = buf.read_uint16(0, bigEndian) * 8;
       std::memset(buf.data(), 0x0, buf.size());
       io_->readOrThrow(buf.data(), 4);
       io_->readOrThrow(buf2.data(), 4);
       if (td)
         xmpData_[exvGettext(td->label_)] = Exiv2::toString(static_cast<double>(buf.read_uint32(0, bigEndian)) /
                                                            static_cast<double>(buf2.read_uint32(0, bigEndian)));
 
       // Sanity check with an "unreasonably" large number
       if (dataLength > 200 || dataLength < 8) {
 #ifndef SUPPRESS_WARNINGS
         EXV_ERROR << "Xmp.video Nikon Tags, dataLength was found to be of inappropriate size."
                   << " Entries considered invalid. Not Processed.\n";
 #endif
         io_->seek(io_->tell() + dataLength - 8, BasicIo::beg);
       } else
         io_->readOrThrow(buf.data(), dataLength - 8);
     } else if (dataType == 8) {
       dataLength = buf.read_uint16(0, bigEndian) * 2;
       std::memset(buf.data(), 0x0, buf.size());
       io_->readOrThrow(buf.data(), 2);
       io_->readOrThrow(buf2.data(), 2);
       if (td)
         xmpData_[exvGettext(td->label_)] =
             Exiv2::toString(buf.read_uint16(0, bigEndian)) + " " + Exiv2::toString(buf2.read_uint16(0, bigEndian));
 
       // Sanity check with an "unreasonably" large number
       if (dataLength > 200 || dataLength < 4) {
 #ifndef SUPPRESS_WARNINGS
         EXV_ERROR << "Xmp.video Nikon Tags, dataLength was found to be of inappropriate size."
                   << " Entries considered invalid. Not Processed.\n";
 #endif
         io_->seek(io_->tell() + dataLength - 4, BasicIo::beg);
       } else
         io_->readOrThrow(buf.data(), dataLength - 4);
     }
   }
 
   io_->seek(cur_pos + size_external, BasicIo::beg);
 }  // QuickTimeVideo::NikonTagsDecoder
