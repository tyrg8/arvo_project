commit eee3b1d917591e5106aef9fd4fe93393e95fc13d
Author: Dmitry Stogov <dmitry@zend.com>
Date:   Fri Dec 24 15:36:52 2021 +0300

    Bucket->key must be removed before destructor call, because destructor may update the same HashTable.
    
    Fixes oss-fuzz #42894

diff --git a/Zend/zend_hash.c b/Zend/zend_hash.c
index 680263b5cb..6e809c8734 100644
--- a/Zend/zend_hash.c
+++ b/Zend/zend_hash.c
@@ -1417,25 +1417,25 @@ static zend_always_inline void _zend_hash_del_el_ex(HashTable *ht, uint32_t idx,
 static zend_always_inline void _zend_hash_del_el(HashTable *ht, uint32_t idx, Bucket *p)
 {
 	Bucket *prev = NULL;
 	uint32_t nIndex;
 	uint32_t i;
 
 	nIndex = p->h | ht->nTableMask;
 	i = HT_HASH(ht, nIndex);
 
 	if (i != idx) {
 		prev = HT_HASH_TO_BUCKET(ht, i);
 		while (Z_NEXT(prev->val) != idx) {
 			i = Z_NEXT(prev->val);
 			prev = HT_HASH_TO_BUCKET(ht, i);
 		}
 	}
 
-	_zend_hash_del_el_ex(ht, idx, p, prev);
 	if (p->key) {
 		zend_string_release(p->key);
 		p->key = NULL;
 	}
+	_zend_hash_del_el_ex(ht, idx, p, prev);
 }
 
 ZEND_API void ZEND_FASTCALL zend_hash_packed_del_val(HashTable *ht, zval *zv)
@@ -1458,31 +1458,31 @@ ZEND_API void ZEND_FASTCALL zend_hash_del_bucket(HashTable *ht, Bucket *p)
 ZEND_API zend_result ZEND_FASTCALL zend_hash_del(HashTable *ht, zend_string *key)
 {
 	zend_ulong h;
 	uint32_t nIndex;
 	uint32_t idx;
 	Bucket *p;
 	Bucket *prev = NULL;
 
 	IS_CONSISTENT(ht);
 	HT_ASSERT_RC1(ht);
 
 	h = zend_string_hash_val(key);
 	nIndex = h | ht->nTableMask;
 
 	idx = HT_HASH(ht, nIndex);
 	while (idx != HT_INVALID_IDX) {
 		p = HT_HASH_TO_BUCKET(ht, idx);
 		if ((p->key == key) ||
 			(p->h == h &&
 		     p->key &&
 		     zend_string_equal_content(p->key, key))) {
-			_zend_hash_del_el_ex(ht, idx, p, prev);
 			zend_string_release(p->key);
 			p->key = NULL;
+			_zend_hash_del_el_ex(ht, idx, p, prev);
 			return SUCCESS;
 		}
 		prev = p;
 		idx = Z_NEXT(p->val);
 	}
 	return FAILURE;
 }
@@ -1490,49 +1490,49 @@ ZEND_API zend_result ZEND_FASTCALL zend_hash_del(HashTable *ht, zend_string *key
 ZEND_API zend_result ZEND_FASTCALL zend_hash_del_ind(HashTable *ht, zend_string *key)
 {
 	zend_ulong h;
 	uint32_t nIndex;
 	uint32_t idx;
 	Bucket *p;
 	Bucket *prev = NULL;
 
 	IS_CONSISTENT(ht);
 	HT_ASSERT_RC1(ht);
 
 	h = zend_string_hash_val(key);
 	nIndex = h | ht->nTableMask;
 
 	idx = HT_HASH(ht, nIndex);
 	while (idx != HT_INVALID_IDX) {
 		p = HT_HASH_TO_BUCKET(ht, idx);
 		if ((p->key == key) ||
 			(p->h == h &&
 		     p->key &&
 		     zend_string_equal_content(p->key, key))) {
 			if (Z_TYPE(p->val) == IS_INDIRECT) {
 				zval *data = Z_INDIRECT(p->val);
 
 				if (UNEXPECTED(Z_TYPE_P(data) == IS_UNDEF)) {
 					return FAILURE;
 				} else {
 					if (ht->pDestructor) {
 						zval tmp;
 						ZVAL_COPY_VALUE(&tmp, data);
 						ZVAL_UNDEF(data);
 						ht->pDestructor(&tmp);
 					} else {
 						ZVAL_UNDEF(data);
 					}
 					HT_FLAGS(ht) |= HASH_FLAG_HAS_EMPTY_IND;
 				}
 			} else {
-				_zend_hash_del_el_ex(ht, idx, p, prev);
 				zend_string_release(p->key);
 				p->key = NULL;
+				_zend_hash_del_el_ex(ht, idx, p, prev);
 			}
 			return SUCCESS;
 		}
 		prev = p;
 		idx = Z_NEXT(p->val);
 	}
 	return FAILURE;
 }
@@ -1540,45 +1540,45 @@ ZEND_API zend_result ZEND_FASTCALL zend_hash_del_ind(HashTable *ht, zend_string
 ZEND_API zend_result ZEND_FASTCALL zend_hash_str_del_ind(HashTable *ht, const char *str, size_t len)
 {
 	zend_ulong h;
 	uint32_t nIndex;
 	uint32_t idx;
 	Bucket *p;
 	Bucket *prev = NULL;
 
 	IS_CONSISTENT(ht);
 	HT_ASSERT_RC1(ht);
 
 	h = zend_inline_hash_func(str, len);
 	nIndex = h | ht->nTableMask;
 
 	idx = HT_HASH(ht, nIndex);
 	while (idx != HT_INVALID_IDX) {
 		p = HT_HASH_TO_BUCKET(ht, idx);
 		if ((p->h == h)
 			 && p->key
 			 && (ZSTR_LEN(p->key) == len)
 			 && !memcmp(ZSTR_VAL(p->key), str, len)) {
 			if (Z_TYPE(p->val) == IS_INDIRECT) {
 				zval *data = Z_INDIRECT(p->val);
 
 				if (UNEXPECTED(Z_TYPE_P(data) == IS_UNDEF)) {
 					return FAILURE;
 				} else {
 					if (ht->pDestructor) {
 						ht->pDestructor(data);
 					}
 					ZVAL_UNDEF(data);
 					HT_FLAGS(ht) |= HASH_FLAG_HAS_EMPTY_IND;
 				}
 			} else {
-				_zend_hash_del_el_ex(ht, idx, p, prev);
 				zend_string_release(p->key);
 				p->key = NULL;
+				_zend_hash_del_el_ex(ht, idx, p, prev);
 			}
 			return SUCCESS;
 		}
 		prev = p;
 		idx = Z_NEXT(p->val);
 	}
 	return FAILURE;
 }
@@ -1586,31 +1586,31 @@ ZEND_API zend_result ZEND_FASTCALL zend_hash_str_del_ind(HashTable *ht, const ch
 ZEND_API zend_result ZEND_FASTCALL zend_hash_str_del(HashTable *ht, const char *str, size_t len)
 {
 	zend_ulong h;
 	uint32_t nIndex;
 	uint32_t idx;
 	Bucket *p;
 	Bucket *prev = NULL;
 
 	IS_CONSISTENT(ht);
 	HT_ASSERT_RC1(ht);
 
 	h = zend_inline_hash_func(str, len);
 	nIndex = h | ht->nTableMask;
 
 	idx = HT_HASH(ht, nIndex);
 	while (idx != HT_INVALID_IDX) {
 		p = HT_HASH_TO_BUCKET(ht, idx);
 		if ((p->h == h)
 			 && p->key
 			 && (ZSTR_LEN(p->key) == len)
 			 && !memcmp(ZSTR_VAL(p->key), str, len)) {
-			_zend_hash_del_el_ex(ht, idx, p, prev);
 			zend_string_release(p->key);
 			p->key = NULL;
+			_zend_hash_del_el_ex(ht, idx, p, prev);
 			return SUCCESS;
 		}
 		prev = p;
 		idx = Z_NEXT(p->val);
 	}
 	return FAILURE;
 }
