commit 17eb652346678bd189742d7e45c946cae649d859
Author: Eric Blankenhorn <eric@wolfssl.com>
Date:   Tue Feb 1 14:18:56 2022 -0600

    Fix stale data in generic msg struct

diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index 1ac863b..3290157 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -817,350 +817,362 @@ static int MqttClient_WaitType(MqttClient *client, void *packet_obj,
 wait_again:
 
     /* initialize variables */
     packet_id = 0;
     packet_type = MQTT_PACKET_TYPE_RESERVED;
 #ifdef WOLFMQTT_MULTITHREAD
     pendResp = NULL;
 #endif
     waitMatchFound = 0;
 
 #ifdef WOLFMQTT_DEBUG_CLIENT
     #ifdef WOLFMQTT_NONBLOCK
     if (client->lastRc != MQTT_CODE_CONTINUE)
     #endif
     {
         PRINTF("MqttClient_WaitType: Type %s (%d), ID %d, State %d",
             MqttPacket_TypeDesc((MqttPacketType)wait_type),
                 wait_type, wait_packet_id, mms_stat->read);
     }
 #endif
 
     switch (mms_stat->read)
     {
         case MQTT_MSG_BEGIN:
         {
         #ifdef WOLFMQTT_MULTITHREAD
             /* Check to see if packet type and id have already completed */
             rc = MqttClient_CheckPendResp(client, wait_type, wait_packet_id);
             if ((rc != MQTT_CODE_SUCCESS) && (rc != MQTT_CODE_CONTINUE)) {
                 return rc;
             }
 
             /* Lock recv socket mutex */
             rc = wm_SemLock(&client->lockRecv);
             if (rc != 0) {
                 PRINTF("MqttClient_WaitType: recv lock error!");
                 return rc;
             }
             mms_stat->isReadLocked = 1;
             MQTT_TRACE_MSG("lockRecv");
         #endif
 
             /* reset the packet state used by MqttPacket_Read */
             client->packet.stat = MQTT_PK_BEGIN;
 
             mms_stat->read = MQTT_MSG_WAIT;
         }
         FALL_THROUGH;
 
         case MQTT_MSG_WAIT:
         {
             /* Wait for packet */
             rc = MqttPacket_Read(client, client->rx_buf, client->rx_buf_len,
                     timeout_ms);
             /* handle failure */
             if (rc <= 0) {
                 break;
             }
 
             /* capture length read */
             client->packet.buf_len = rc;
 
             /* Decode Packet - get type, qos and id */
             rc = MqttClient_DecodePacket(client, client->rx_buf,
                 client->packet.buf_len, NULL, &packet_type, &packet_qos,
                 &packet_id);
             if (rc < 0) {
                 break;
             }
 
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("Read Packet: Len %d, Type %d, ID %d",
                 client->packet.buf_len, packet_type, packet_id);
         #endif
 
             mms_stat->read = MQTT_MSG_HEADER;
         }
         FALL_THROUGH;
 
         case MQTT_MSG_HEADER:
         case MQTT_MSG_PAYLOAD:
         {
             MqttPublishResp resp;
             MqttPacketType use_packet_type;
 
             /* Determine if we received data for this request */
             if ((wait_type == MQTT_PACKET_TYPE_ANY ||
                  wait_type == packet_type ||
                  (MqttIsPubRespPacket(packet_type) &&
                   MqttIsPubRespPacket(wait_type))) &&
                 (wait_packet_id == 0 || wait_packet_id == packet_id))
             {
                 use_packet_obj = packet_obj;
                 if (packet_type == wait_type || wait_type == MQTT_PACKET_TYPE_ANY) {
                     /* Only stop waiting when matched or waiting for "any" */
                     waitMatchFound = 1;
                 }
             }
             else {
                 /* use generic packet object */
                 use_packet_obj = &client->msg;
+        #ifdef WOLFMQTT_MULTITHREAD
+                rc = wm_SemLock(&client->lockClient);
+                if (rc == 0) {
+        #endif /* WOLFMQTT_MULTITHREAD */
+                    XMEMSET(use_packet_obj, 0, sizeof(client->msg));
+        #ifdef WOLFMQTT_MULTITHREAD
+                    wm_SemUnlock(&client->lockClient);
+                }
+                else {
+                    break; /* error */
+                }
+        #endif /* WOLFMQTT_MULTITHREAD */
             }
             use_packet_type = packet_type;
 
         #ifdef WOLFMQTT_MULTITHREAD
             /* Check to see if we have a pending response for this packet */
             pendResp = NULL;
             rc = wm_SemLock(&client->lockClient);
             if (rc == 0) {
                 if (MqttClient_RespList_Find(client, packet_type, packet_id,
                                                                &pendResp)) {
                     /* we found packet match this incoming read packet */
                     pendResp->packetProcessing = 1;
                     if (pendResp->packet_obj != packet_obj) {
                         use_packet_obj = pendResp->packet_obj;
                         use_packet_type = pendResp->packet_type;
                         /* req from another thread... not a match */
                         waitMatchFound = 0;
                     }
                 }
                 wm_SemUnlock(&client->lockClient);
             }
             else {
                 break; /* error */
             }
         #endif /* WOLFMQTT_MULTITHREAD */
 
             /* cache publish packet id and qos for MqttClient_HandlePacket payload */
             if (use_packet_type == MQTT_PACKET_TYPE_PUBLISH &&
                   mms_stat->read == MQTT_MSG_HEADER && use_packet_obj != NULL) {
                 MqttObject* obj = (MqttObject*)use_packet_obj;
                 obj->publish.qos = packet_qos;
                 obj->publish.packet_id = packet_id;
             }
 
             /* Perform packet handling for publish callback and QoS */
             XMEMSET(&resp, 0, sizeof(resp));
             rc = MqttClient_HandlePacket(client, use_packet_type,
                 use_packet_obj, &resp, timeout_ms);
 
         #ifdef WOLFMQTT_NONBLOCK
             if (rc == MQTT_CODE_CONTINUE) {
                 break;
             }
         #endif
 
             /* handle success case */
             if (rc >= 0) {
                 rc = MQTT_CODE_SUCCESS;
             }
 
         #ifdef WOLFMQTT_MULTITHREAD
             if (pendResp) {
                 /* Mark pending response entry done */
                 if (wm_SemLock(&client->lockClient) == 0) {
                     pendResp->packetDone = 1;
                     pendResp->packet_ret = rc;
                 #ifdef WOLFMQTT_DEBUG_CLIENT
                     PRINTF("PendResp Done %p", pendResp);
                 #endif
                     pendResp = NULL;
                     wm_SemUnlock(&client->lockClient);
                 }
             }
         #endif /* WOLFMQTT_MULTITHREAD */
 
             /* are we sending ACK or done with message? */
             if (MqttIsPubRespPacket(resp.packet_type)) {
                 mms_stat->read = MQTT_MSG_ACK;
             }
             else {
                 mms_stat->read = MQTT_MSG_BEGIN;
             }
 
         #ifdef WOLFMQTT_MULTITHREAD
             /* release read lock, done reading */
             if (mms_stat->isReadLocked) {
                 mms_stat->isReadLocked = 0;
                 MQTT_TRACE_MSG("unlockRecv");
                 wm_SemUnlock(&client->lockRecv);
             }
         #endif
 
             /* if error, leave */
             if (rc != MQTT_CODE_SUCCESS) {
                 break;
             }
 
             /* if not sending an ACK, we are done */
             if (!MqttIsPubRespPacket(resp.packet_type)) {
                 break;
             }
 
         #ifdef WOLFMQTT_MULTITHREAD
             /* Lock send socket mutex */
             rc = wm_SemLock(&client->lockSend);
             if (rc != 0) break;
             mms_stat->isWriteLocked = 1;
             MQTT_TRACE_MSG("lockSend");
         #endif
 
             /* setup ACK in shared context */
             XMEMCPY(&client->packetAck, &resp, sizeof(MqttPublishResp));
         #ifdef WOLFMQTT_V5
             /* Publish QoS response needs success reason code,
              * otherwise will cause disconnect at broker */
             client->packetAck.reason_code = MQTT_REASON_SUCCESS;
         #endif
             mms_stat->write = MQTT_MSG_ACK;
             break;
         }
 
         case MQTT_MSG_ACK:
             /* go to write section below */
             break;
 
         case MQTT_MSG_AUTH:
         default:
         {
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("MqttClient_WaitType: Invalid read state %d!",
                 mms_stat->read);
         #endif
             rc = MQTT_CODE_ERROR_STAT;
             break;
         }
     } /* switch (mms_stat->read) */
 
     switch (mms_stat->write)
     {
         case MQTT_MSG_BEGIN:
         case MQTT_MSG_WAIT:
             /* wait for read to set ack */
             break;
 
         case MQTT_MSG_ACK:
         {
         #ifdef WOLFMQTT_MULTITHREAD
             if (!mms_stat->isWriteLocked) {
                 rc = wm_SemLock(&client->lockSend);
                 if (rc != 0) break;
                 mms_stat->isWriteLocked = 1;
                 MQTT_TRACE_MSG("lockSend");
             }
         #endif
 
             /* send ack */
             rc = MqttEncode_PublishResp(client->tx_buf, client->tx_buf_len,
                 client->packetAck.packet_type, &client->packetAck);
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("MqttEncode_PublishResp: Len %d, Type %s (%d), ID %d",
                 rc, MqttPacket_TypeDesc(client->packetAck.packet_type),
                     client->packetAck.packet_type, client->packetAck.packet_id);
         #endif
             if (rc > 0) {
                 client->write.len = rc;
 
                 /* Send publish response packet */
                 rc = MqttPacket_Write(client, client->tx_buf,
                     client->write.len);
                 if (rc == client->write.len) {
                     rc = 0; /* success */
                 }
             }
 
             mms_stat->write = MQTT_MSG_BEGIN;
         #ifdef WOLFMQTT_MULTITHREAD
             MQTT_TRACE_MSG("unlockSend");
             mms_stat->isWriteLocked = 0;
             wm_SemUnlock(&client->lockSend);
         #endif
             break;
         }
 
         case MQTT_MSG_AUTH:
         case MQTT_MSG_HEADER:
         case MQTT_MSG_PAYLOAD:
         default:
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("MqttClient_WaitType: Invalid write state %d!",
                 mms_stat->write);
         #endif
             rc = MQTT_TRACE_ERROR(MQTT_CODE_ERROR_STAT);
             break;
     } /* switch (mms_stat->write) */
 
 #ifdef WOLFMQTT_DEBUG_CLIENT
     if (rc != MQTT_CODE_CONTINUE) {
         PRINTF("MqttClient_WaitType: rc %d, state %d", rc, mms_stat->read);
     }
 #endif
 
     /* no data read, reset state */
     if (mms_stat->read == MQTT_MSG_WAIT) {
         mms_stat->read = MQTT_MSG_BEGIN;
     }
 
 #ifdef WOLFMQTT_NONBLOCK
     /* if nonblocking and some data has been read, do not release read lock */
     if (rc == MQTT_CODE_CONTINUE && mms_stat->read > MQTT_MSG_WAIT) {
         return rc;
     }
 #endif
 
 #ifdef WOLFMQTT_MULTITHREAD
     if (mms_stat->isReadLocked) {
         mms_stat->isReadLocked = 0;
         MQTT_TRACE_MSG("unlockRecv");
         wm_SemUnlock(&client->lockRecv);
     }
 #endif
 
 #ifdef WOLFMQTT_NONBLOCK
     #ifdef WOLFMQTT_DEBUG_CLIENT
     client->lastRc = rc;
     #endif
     if (rc == MQTT_CODE_CONTINUE) {
         return rc;
     }
 #endif
 
     if (rc < 0) {
     #ifdef WOLFMQTT_DEBUG_CLIENT
         if (rc != MQTT_CODE_CONTINUE) {
             PRINTF("MqttClient_WaitType: Failure: %s (%d)",
                 MqttClient_ReturnCodeToString(rc), rc);
         }
     #endif
         return rc;
     }
 
     if (!waitMatchFound) {
         /* if we get here, then the we are still waiting for a packet */
         mms_stat->read = MQTT_MSG_BEGIN;
         MQTT_TRACE_MSG("Wait Again");
     #ifdef WOLFMQTT_NONBLOCK
         /* for non-blocking return with code continue instead of waiting again
          * if called with packet type and id of 'any' */
         if (wait_type == MQTT_PACKET_TYPE_ANY && wait_packet_id == 0) {
             return MQTT_CODE_CONTINUE;
         }
     #endif
         goto wait_again;
     }
 
     return rc;
 }
 
 
 /* Public Functions */
