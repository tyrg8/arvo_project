commit ee11d47e3d907b66eeff99e0ba1e1c71e05164b7
Author: Patrick Steinhardt <ps@pks.im>
Date:   Fri Oct 19 09:47:50 2018 +0200

    tag: fix out of bounds read when searching for tag message
    
    When parsing tags, we skip all unknown fields that appear before the tag
    message. This skipping is done by using a plain `strstr(buffer, "\n\n")`
    to search for the two newlines that separate tag fields from tag
    message. As it is not possible to supply a buffer length to `strstr`,
    this call may skip over the buffer's end and thus result in an out of
    bounds read. As `strstr` may return a pointer that is out of bounds, the
    following computation of `buffer_end - buffer` will overflow and result
    in an allocation of an invalid length.
    
    Fix the issue by using `git__memmem` instead. Add a test that verifies
    parsing the tag fails not due to the allocation failure but due to the
    tag having no message.

diff --git a/src/tag.c b/src/tag.c
index 663c7dabd..c45335151 100644
--- a/src/tag.c
+++ b/src/tag.c
@@ -68,93 +68,93 @@ static int tag_error(const char *str)
 static int tag_parse(git_tag *tag, const char *buffer, const char *buffer_end)
 {
 	static const char *tag_types[] = {
 		NULL, "commit\n", "tree\n", "blob\n", "tag\n"
 	};
-
-	unsigned int i;
 	size_t text_len, alloc_len;
-	char *search;
+	const char *search;
+	unsigned int i;
 
 	if (git_oid__parse(&tag->target, &buffer, buffer_end, "object ") < 0)
 		return tag_error("object field invalid");
 
 	if (buffer + 5 >= buffer_end)
 		return tag_error("object too short");
 
 	if (memcmp(buffer, "type ", 5) != 0)
 		return tag_error("type field not found");
 	buffer += 5;
 
 	tag->type = GIT_OBJ_BAD;
 
 	for (i = 1; i < ARRAY_SIZE(tag_types); ++i) {
 		size_t type_length = strlen(tag_types[i]);
 
 		if (buffer + type_length >= buffer_end)
 			return tag_error("object too short");
 
 		if (memcmp(buffer, tag_types[i], type_length) == 0) {
 			tag->type = i;
 			buffer += type_length;
 			break;
 		}
 	}
 
 	if (tag->type == GIT_OBJ_BAD)
 		return tag_error("invalid object type");
 
 	if (buffer + 4 >= buffer_end)
 		return tag_error("object too short");
 
 	if (memcmp(buffer, "tag ", 4) != 0)
 		return tag_error("tag field not found");
 
 	buffer += 4;
 
 	search = memchr(buffer, '\n', buffer_end - buffer);
 	if (search == NULL)
 		return tag_error("object too short");
 
 	text_len = search - buffer;
 
 	GITERR_CHECK_ALLOC_ADD(&alloc_len, text_len, 1);
 	tag->tag_name = git__malloc(alloc_len);
 	GITERR_CHECK_ALLOC(tag->tag_name);
 
 	memcpy(tag->tag_name, buffer, text_len);
 	tag->tag_name[text_len] = '\0';
 
 	buffer = search + 1;
 
 	tag->tagger = NULL;
 	if (buffer < buffer_end && *buffer != '\n') {
 		tag->tagger = git__malloc(sizeof(git_signature));
 		GITERR_CHECK_ALLOC(tag->tagger);
 
 		if (git_signature__parse(tag->tagger, &buffer, buffer_end, "tagger ", '\n') < 0)
 			return -1;
 	}
 
 	tag->message = NULL;
 	if (buffer < buffer_end) {
 		/* If we're not at the end of the header, search for it */
-		if( *buffer != '\n' ) {
-			search = strstr(buffer, "\n\n");
+		if(*buffer != '\n') {
+			search = git__memmem(buffer, buffer_end - buffer,
+					     "\n\n", 2);
 			if (search)
 				buffer = search + 1;
 			else
 				return tag_error("tag contains no message");
 		}
 
 		text_len = buffer_end - ++buffer;
 
 		GITERR_CHECK_ALLOC_ADD(&alloc_len, text_len, 1);
 		tag->message = git__malloc(alloc_len);
 		GITERR_CHECK_ALLOC(tag->message);
 
 		memcpy(tag->message, buffer, text_len);
 		tag->message[text_len] = '\0';
 	}
 
 	return 0;
 }
diff --git a/tests/object/tag/parse.c b/tests/object/tag/parse.c
index 7e58ed12b..f701f6b89 100644
--- a/tests/object/tag/parse.c
+++ b/tests/object/tag/parse.c
@@ -198,3 +198,21 @@ void test_object_tag_parse__missing_message_fails(void)
 		"tagger taggy@taggart.com>\n";
 	assert_tag_fails(tag, 0);
 }
+
+void test_object_tag_parse__no_oob_read_when_searching_message(void)
+{
+	const char *tag =
+		"object a8d447f68076d1520f69649bb52629941be7031f\n"
+		"type tag\n"
+		"tag \n"
+		"tagger <>\n"
+		" \n\n"
+		"Message";
+	/*
+	 * The OOB read previously resulted in an OOM error. We
+	 * thus want to make sure that the resulting error is the
+	 * expected one.
+	 */
+	assert_tag_fails(tag, strlen(tag) - strlen("\n\nMessage"));
+	cl_assert(strstr(giterr_last()->message, "tag contains no message"));
+}
