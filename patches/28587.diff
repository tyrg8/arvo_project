commit 1141c81c411b599e40496679129d0884715e8650
Author: Khaled Hosny <khaled@aliftype.com>
Date:   Sun Dec 13 13:03:58 2020 +0200

    [glyf] Guard access to maxp version 1 fields
    
    They are not initialized otherwise (ugly design, but it matches the
    current code).
    
    A better approach is to reject maxp 0 if there is glyf table and maxp 1
    if there is CFF table, but that would require some surgery since maxp is
    parsed before all other tables.

diff --git a/src/glyf.cc b/src/glyf.cc
index d0af962..10341c1 100644
--- a/src/glyf.cc
+++ b/src/glyf.cc
@@ -83,68 +83,69 @@ bool OpenTypeGLYF::ParseFlagsForSimpleGlyph(Buffer &glyph,
 bool OpenTypeGLYF::ParseSimpleGlyph(Buffer &glyph,
                                     int16_t num_contours) {
   // read the end-points array
   uint16_t num_flags = 0;
   for (int i = 0; i < num_contours; ++i) {
     uint16_t tmp_index = 0;
     if (!glyph.ReadU16(&tmp_index)) {
       return Error("Can't read contour index %d", i);
     }
     if (tmp_index == 0xffffu) {
       return Error("Bad contour index %d", i);
     }
     // check if the indices are monotonically increasing
     if (i && (tmp_index + 1 <= num_flags)) {
       return Error("Decreasing contour index %d + 1 <= %d", tmp_index, num_flags);
     }
     num_flags = tmp_index + 1;
   }
 
-  if (num_flags > this->maxp->max_points) {
+  if (this->maxp->version_1 &&
+      num_flags > this->maxp->max_points) {
     Warning("Number of contour points exceeds maxp maxPoints, adjusting limit.");
     this->maxp->max_points = num_flags;
   }
 
   uint16_t bytecode_length = 0;
   if (!glyph.ReadU16(&bytecode_length)) {
     return Error("Can't read bytecode length");
   }
 
   if (this->maxp->version_1 &&
       this->maxp->max_size_glyf_instructions < bytecode_length) {
     this->maxp->max_size_glyf_instructions = bytecode_length;
     Warning("Bytecode length is bigger than maxp.maxSizeOfInstructions %d: %d",
             this->maxp->max_size_glyf_instructions, bytecode_length);
   }
 
   if (!glyph.Skip(bytecode_length)) {
     return Error("Can't read bytecode of length %d", bytecode_length);
   }
 
   uint32_t coordinates_length = 0;
   for (uint32_t i = 0; i < num_flags; ++i) {
     if (!ParseFlagsForSimpleGlyph(glyph, num_flags, &i, &coordinates_length)) {
       return Error("Failed to parse glyph flags %d", i);
     }
   }
 
   if (!glyph.Skip(coordinates_length)) {
     return Error("Glyph too short %d", glyph.length());
   }
 
   if (glyph.remaining() > 3) {
     // We allow 0-3 bytes difference since gly_length is 4-bytes aligned,
     // zero-padded length.
     Warning("Extra bytes at end of the glyph: %d", glyph.remaining());
   }
 
   this->iov.push_back(std::make_pair(glyph.buffer(), glyph.offset()));
 
   return true;
 }
 
 #define ARG_1_AND_2_ARE_WORDS    (1u << 0)
 #define WE_HAVE_A_SCALE          (1u << 3)
 #define MORE_COMPONENTS          (1u << 5)
 #define WE_HAVE_AN_X_AND_Y_SCALE (1u << 6)
 #define WE_HAVE_A_TWO_BY_TWO     (1u << 7)
 #define WE_HAVE_INSTRUCTIONS     (1u << 8)
@@ -233,158 +234,159 @@ bool OpenTypeGLYF::ParseCompositeGlyph(
 bool OpenTypeGLYF::Parse(const uint8_t *data, size_t length) {
   OpenTypeMAXP *maxp = static_cast<OpenTypeMAXP*>(
       GetFont()->GetTypedTable(OTS_TAG_MAXP));
   OpenTypeLOCA *loca = static_cast<OpenTypeLOCA*>(
       GetFont()->GetTypedTable(OTS_TAG_LOCA));
   OpenTypeHEAD *head = static_cast<OpenTypeHEAD*>(
       GetFont()->GetTypedTable(OTS_TAG_HEAD));
   if (!maxp || !loca || !head) {
     return Error("Missing maxp or loca or head table needed by glyf table");
   }
 
   this->maxp = maxp;
 
   const unsigned num_glyphs = maxp->num_glyphs;
   std::vector<uint32_t> &offsets = loca->offsets;
 
   if (offsets.size() != num_glyphs + 1) {
     return Error("Invalid glyph offsets size %ld != %d", offsets.size(), num_glyphs + 1);
   }
 
   std::vector<uint32_t> resulting_offsets(num_glyphs + 1);
   uint32_t current_offset = 0;
 
   for (unsigned i = 0; i < num_glyphs; ++i) {
 
     Buffer glyph(GetGlyphBufferSection(data, length, offsets, i));
     if (!glyph.buffer())
       return false;
 
     if (!glyph.length()) {
       resulting_offsets[i] = current_offset;
       continue;
     }
 
     int16_t num_contours, xmin, ymin, xmax, ymax;
     if (!glyph.ReadS16(&num_contours) ||
         !glyph.ReadS16(&xmin) ||
         !glyph.ReadS16(&ymin) ||
         !glyph.ReadS16(&xmax) ||
         !glyph.ReadS16(&ymax)) {
       return Error("Can't read glyph %d header", i);
     }
 
     if (num_contours <= -2) {
       // -2, -3, -4, ... are reserved for future use.
       return Error("Bad number of contours %d in glyph %d", num_contours, i);
     }
 
     // workaround for fonts in http://www.princexml.com/fonts/
     if ((xmin == 32767) &&
         (xmax == -32767) &&
         (ymin == 32767) &&
         (ymax == -32767)) {
       Warning("bad xmin/xmax/ymin/ymax values");
       xmin = xmax = ymin = ymax = 0;
     }
 
     if (xmin > xmax || ymin > ymax) {
       return Error("Bad bounding box values bl=(%d, %d), tr=(%d, %d) in glyph %d", xmin, ymin, xmax, ymax, i);
     }
 
     if (num_contours == 0) {
       // This is an empty glyph and shouldn’t have any glyph data, but if it
       // does we will simply ignore it.
       glyph.set_offset(0);
     } else if (num_contours > 0) {
       if (!ParseSimpleGlyph(glyph, num_contours)) {
         return Error("Failed to parse glyph %d", i);
       }
     } else {
 
       ComponentPointCount component_point_count;
       if (!ParseCompositeGlyph(glyph, &component_point_count)) {
         return Error("Failed to parse glyph %d", i);
       }
 
       // Check maxComponentDepth and validate maxComponentPoints.
       // ParseCompositeGlyph placed the first set of component glyphs on the
       // component_point_count.gid_stack, which we start to process below. If a
       // nested glyph is in turn a component glyph, additional glyphs are placed
       // on the stack.
       while (component_point_count.gid_stack.size()) {
         GidAtLevel stack_top_gid = component_point_count.gid_stack.back();
         component_point_count.gid_stack.pop_back();
 
         Buffer points_count_glyph(GetGlyphBufferSection(
             data,
             length,
             offsets,
             stack_top_gid.gid));
 
         if (!points_count_glyph.buffer())
           return false;
 
         if (!points_count_glyph.length())
           continue;
 
         if (!TraverseComponentsCountingPoints(points_count_glyph,
                                               i,
                                               stack_top_gid.level,
                                               &component_point_count)) {
           return Error("Error validating component points and depth.");
         }
 
         if (component_point_count.accumulated_component_points >
             std::numeric_limits<uint16_t>::max()) {
           return Error("Illegal composite points value "
                        "exceeding 0xFFFF for base glyph %d.", i);
-        } else if (component_point_count.accumulated_component_points >
+        } else if (this->maxp->version_1 &&
+                   component_point_count.accumulated_component_points >
                    this->maxp->max_c_points) {
           Warning("Number of composite points in glyph %d exceeds "
                   "maxp maxCompositePoints: %d vs %d, adjusting limit.",
                   i,
                   component_point_count.accumulated_component_points,
                   this->maxp->max_c_points
                   );
           this->maxp->max_c_points =
               component_point_count.accumulated_component_points;
         }
       }
     }
 
     size_t new_size = glyph.offset();
     resulting_offsets[i] = current_offset;
     // glyphs must be four byte aligned
     // TODO(yusukes): investigate whether this padding is really necessary.
     //                Which part of the spec requires this?
     const unsigned padding = (4 - (new_size & 3)) % 4;
     if (padding) {
       this->iov.push_back(std::make_pair(
           reinterpret_cast<const uint8_t*>("\x00\x00\x00\x00"),
           static_cast<size_t>(padding)));
       new_size += padding;
     }
     current_offset += new_size;
   }
   resulting_offsets[num_glyphs] = current_offset;
 
   const uint16_t max16 = std::numeric_limits<uint16_t>::max();
   if ((*std::max_element(resulting_offsets.begin(),
                          resulting_offsets.end()) >= (max16 * 2u)) &&
       (head->index_to_loc_format != 1)) {
     head->index_to_loc_format = 1;
   }
 
   loca->offsets = resulting_offsets;
 
   if (this->iov.empty()) {
     // As a special case when all glyph in the font are empty, add a zero byte
     // to the table, so that we don’t reject it down the way, and to make the
     // table work on Windows as well.
     // See https://github.com/khaledhosny/ots/issues/52
     static const uint8_t kZero = 0;
     this->iov.push_back(std::make_pair(&kZero, 1));
   }
 
   return true;
 }
@@ -392,81 +394,82 @@ bool OpenTypeGLYF::Parse(const uint8_t *data, size_t length) {
 bool OpenTypeGLYF::TraverseComponentsCountingPoints(
     Buffer &glyph,
     uint16_t base_glyph_id,
     uint32_t level,
     ComponentPointCount* component_point_count) {
 
   int16_t num_contours;
   if (!glyph.ReadS16(&num_contours) ||
       !glyph.Skip(8)) {
     return Error("Can't read glyph header.");
   }
 
   if (num_contours <= -2) {
     return Error("Bad number of contours %d in glyph.", num_contours);
   }
 
   if (num_contours == 0)
     return true;
 
   // FontTools counts a component level for each traversed recursion. We start
   // counting at level 0. If we reach a level that's deeper than
   // maxComponentDepth, we expand maxComponentDepth unless it's larger than
   // the maximum possible depth.
   if (level > std::numeric_limits<uint16_t>::max()) {
     return Error("Illegal component depth exceeding 0xFFFF in base glyph id %d.",
                  base_glyph_id);
-  } else if (level > this->maxp->max_c_depth) {
+  } else if (this->maxp->version_1 &&
+             level > this->maxp->max_c_depth) {
     this->maxp->max_c_depth = level;
     Warning("Component depth exceeds maxp maxComponentDepth "
             "in glyph %d, adjust limit to %d.",
             base_glyph_id, level);
   }
 
   if (num_contours > 0) {
     uint16_t num_points = 0;
     for (int i = 0; i < num_contours; ++i) {
       // Simple glyph, add contour points.
       uint16_t tmp_index = 0;
       if (!glyph.ReadU16(&tmp_index)) {
         return Error("Can't read contour index %d", i);
       }
       num_points = tmp_index + 1;
     }
 
     component_point_count->accumulated_component_points += num_points;
     return true;
   } else  {
     assert(num_contours == -1);
 
     // Composite glyph, add gid's to stack.
     uint16_t flags = 0;
     uint16_t gid = 0;
     do {
       if (!glyph.ReadU16(&flags) || !glyph.ReadU16(&gid)) {
         return Error("Can't read composite glyph flags or glyphIndex");
       }
 
       size_t skip_bytes = 0;
       skip_bytes += flags & ARG_1_AND_2_ARE_WORDS ? 4 : 2;
 
       if (flags & WE_HAVE_A_SCALE) {
         skip_bytes += 2;
       } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
         skip_bytes += 4;
       } else if (flags & WE_HAVE_A_TWO_BY_TWO) {
         skip_bytes += 8;
       }
 
       if (!glyph.Skip(skip_bytes)) {
         return Error("Failed to parse component glyph.");
       }
 
       if (gid >= this->maxp->num_glyphs) {
         return Error("Invalid glyph id used in composite glyph: %d", gid);
       }
 
       component_point_count->gid_stack.push_back({gid, level + 1u});
     } while (flags & MORE_COMPONENTS);
     return true;
   }
 }
diff --git a/tests/fonts/fuzzing/adb242cbc61b3ca428903e397a2c9dcf97fe3042.ttf b/tests/fonts/fuzzing/adb242cbc61b3ca428903e397a2c9dcf97fe3042.ttf
new file mode 100644
index 0000000..c372989
Binary files /dev/null and b/tests/fonts/fuzzing/adb242cbc61b3ca428903e397a2c9dcf97fe3042.ttf differ
