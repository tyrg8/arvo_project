commit 3cc27abcef30760d655bf00fe46caac87b2e831b
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Fri Mar 2 12:52:08 2018 +0800

    Fix 699087: Get scissor from stack after new entry pushed.
    
    Without this fix the stack may be resized and relocated and
    then the scissor might point to stale memory.

diff --git a/source/fitz/draw-device.c b/source/fitz/draw-device.c
index 2ae7354bd..7d81e4d3f 100644
--- a/source/fitz/draw-device.c
+++ b/source/fitz/draw-device.c
@@ -742,71 +742,72 @@ static void
 fz_draw_clip_path(fz_context *ctx, fz_device *devp, const fz_path *path, int even_odd, const fz_matrix *in_ctm, const fz_rect *scissor)
 {
 	fz_draw_device *dev = (fz_draw_device*)devp;
 	fz_matrix ctm = concat(in_ctm, &dev->transform);
 	fz_rasterizer *rast = dev->rast;
 
 	float expansion = fz_matrix_expansion(&ctm);
 	float flatness = 0.3f / expansion;
 	fz_irect bbox;
 	fz_draw_state *state = &dev->stack[dev->top];
 	fz_colorspace *model;
 	fz_irect local_scissor;
-	fz_irect *scissor_ptr = &state->scissor;
+	fz_irect *scissor_ptr;
 
 	if (dev->top == 0 && dev->resolve_spots)
 		(void)push_group_for_separations(ctx, dev, fz_default_color_params(ctx)/* FIXME */, dev->default_cs);
 
 	if (flatness < 0.001f)
 		flatness = 0.001f;
 
 	state = push_stack(ctx, dev);
 	STACK_PUSHED("clip path");
 	model = state->dest->colorspace;
 
+	scissor_ptr = &state->scissor;
 	if (scissor)
 	{
 		fz_rect tscissor = *scissor;
 		fz_transform_rect(&tscissor, &dev->transform);
 		scissor_ptr = fz_intersect_irect(fz_irect_from_rect(&local_scissor, &tscissor), scissor_ptr);
 	}
 	fz_intersect_irect(fz_pixmap_bbox_no_ctx(state->dest, &bbox), scissor_ptr);
 
 	if (fz_flatten_fill_path(ctx, rast, path, &ctm, flatness, &bbox, &bbox) || fz_is_rect_rasterizer(ctx, rast))
 	{
 		state[1].scissor = bbox;
 		state[1].mask = NULL;
 #ifdef DUMP_GROUP_BLENDS
 		dump_spaces(dev->top-1, "Clip (rectangular) begin\n");
 #endif
 		return;
 	}
 
 	fz_try(ctx)
 	{
 		state[1].mask = fz_new_pixmap_with_bbox(ctx, NULL, &bbox, NULL, 1);
 		fz_clear_pixmap(ctx, state[1].mask);
 		state[1].dest = fz_new_pixmap_with_bbox(ctx, model, &bbox, state[0].dest->seps, state[0].dest->alpha);
 		fz_copy_pixmap_rect(ctx, state[1].dest, state[0].dest, &bbox, dev->default_cs);
 		if (state[1].shape)
 		{
 			state[1].shape = fz_new_pixmap_with_bbox(ctx, NULL, &bbox, NULL, 1);
 			fz_clear_pixmap(ctx, state[1].shape);
 		}
 		if (state[1].group_alpha)
 		{
 			state[1].group_alpha = fz_new_pixmap_with_bbox(ctx, NULL, &bbox, NULL, 1);
 			fz_clear_pixmap(ctx, state[1].group_alpha);
 		}
 
 		fz_convert_rasterizer(ctx, rast, even_odd, state[1].mask, NULL, 0);
 
 		state[1].scissor = bbox;
 #ifdef DUMP_GROUP_BLENDS
 		dump_spaces(dev->top-1, "Clip (non-rectangular) begin\n");
 #endif
 	}
 	fz_catch(ctx)
 	{
 		emergency_pop_stack(ctx, dev, state);
 	}
 }
@@ -815,86 +816,87 @@ static void
 fz_draw_clip_stroke_path(fz_context *ctx, fz_device *devp, const fz_path *path, const fz_stroke_state *stroke, const fz_matrix *in_ctm, const fz_rect *scissor)
 {
 	fz_draw_device *dev = (fz_draw_device*)devp;
 	fz_matrix ctm = concat(in_ctm, &dev->transform);
 	fz_rasterizer *rast = dev->rast;
 
 	float expansion = fz_matrix_expansion(&ctm);
 	float flatness = 0.3f / expansion;
 	float linewidth = stroke->linewidth;
 	fz_irect bbox;
 	fz_draw_state *state = &dev->stack[dev->top];
 	fz_colorspace *model;
 	float aa_level = 2.0f/(fz_rasterizer_graphics_aa_level(rast)+2);
 	float mlw = fz_rasterizer_graphics_min_line_width(rast);
 	fz_irect local_scissor;
-	fz_irect *scissor_ptr = &state->scissor;
+	fz_irect *scissor_ptr;
 
 	if (dev->top == 0 && dev->resolve_spots)
 		(void)push_group_for_separations(ctx, dev, fz_default_color_params(ctx) /* FIXME */, dev->default_cs);
 
 	if (mlw > aa_level)
 		aa_level = mlw;
 	if (linewidth * expansion < aa_level)
 		linewidth = aa_level / expansion;
 	if (flatness < 0.001f)
 		flatness = 0.001f;
 
 	state = push_stack(ctx, dev);
 	STACK_PUSHED("clip stroke");
 	model = state->dest->colorspace;
 
+	scissor_ptr = &state->scissor;
 	if (scissor)
 	{
 		fz_rect tscissor = *scissor;
 		fz_transform_rect(&tscissor, &dev->transform);
 		scissor_ptr = fz_intersect_irect(fz_irect_from_rect(&local_scissor, &tscissor), scissor_ptr);
 	}
 	fz_intersect_irect(fz_pixmap_bbox_no_ctx(state->dest, &bbox), scissor_ptr);
 
 	if (fz_flatten_stroke_path(ctx, rast, path, stroke, &ctm, flatness, linewidth, &bbox, &bbox))
 	{
 		state[1].scissor = bbox;
 		state[1].mask = NULL;
 #ifdef DUMP_GROUP_BLENDS
 		dump_spaces(dev->top-1, "Clip (stroke, empty) begin\n");
 #endif
 		return;
 	}
 
 	fz_try(ctx)
 	{
 		state[1].mask = fz_new_pixmap_with_bbox(ctx, NULL, &bbox, NULL, 1);
 		fz_clear_pixmap(ctx, state[1].mask);
 		/* When there is no alpha in the current destination (state[0].dest->alpha == 0)
 		 * we have a choice. We can either create the new destination WITH alpha, or
 		 * we can copy the old pixmap contents in. We opt for the latter here, but
 		 * may want to revisit this decision in the future. */
 		state[1].dest = fz_new_pixmap_with_bbox(ctx, model, &bbox, state[0].dest->seps, state[0].dest->alpha);
 		if (state[0].dest->alpha)
 			fz_clear_pixmap(ctx, state[1].dest);
 		else
 			fz_copy_pixmap_rect(ctx, state[1].dest, state[0].dest, &bbox, dev->default_cs);
 		if (state->shape)
 		{
 			state[1].shape = fz_new_pixmap_with_bbox(ctx, NULL, &bbox, NULL, 1);
 			fz_clear_pixmap(ctx, state[1].shape);
 		}
 		if (state->group_alpha)
 		{
 			state[1].group_alpha = fz_new_pixmap_with_bbox(ctx, NULL, &bbox, NULL, 1);
 			fz_clear_pixmap(ctx, state[1].group_alpha);
 		}
 
 		fz_convert_rasterizer(ctx, rast, 0, state[1].mask, NULL, 0);
 
 		state[1].blendmode |= FZ_BLEND_ISOLATED;
 		state[1].scissor = bbox;
 #ifdef DUMP_GROUP_BLENDS
 		dump_spaces(dev->top-1, "Clip (stroke) begin\n");
 #endif
 	}
 	fz_catch(ctx)
 	{
 		emergency_pop_stack(ctx, dev, state);
 	}
 }
