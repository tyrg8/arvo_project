commit d6836713630f752a1ea1729c666b26afd8f1e432
Author: Caol√°n McNamara <caolanm@redhat.com>
Date:   Mon Sep 12 15:54:01 2022 +0100

    ofz#51277 fix negative condition length in bad .aff

diff --git a/src/hunspell/affentry.hxx b/src/hunspell/affentry.hxx
index 39a459d..c75da03 100644
--- a/src/hunspell/affentry.hxx
+++ b/src/hunspell/affentry.hxx
@@ -80,67 +80,67 @@
 class PfxEntry : public AffEntry {
  private:
   PfxEntry(const PfxEntry&);
   PfxEntry& operator=(const PfxEntry&);
 
  private:
   AffixMgr* pmyMgr;
 
   PfxEntry* next;
   PfxEntry* nexteq;
   PfxEntry* nextne;
   PfxEntry* flgnxt;
 
  public:
   explicit PfxEntry(AffixMgr* pmgr);
 
   bool allowCross() const { return ((opts & aeXPRODUCT) != 0); }
   struct hentry* checkword(const std::string& word,
                            int start,
                            int len,
                            char in_compound,
                            const FLAG needflag = FLAG_NULL);
 
   struct hentry* check_twosfx(const std::string& word,
                               int start,
                               int len,
                               char in_compound,
                               const FLAG needflag = FLAG_NULL);
 
   std::string check_morph(const std::string& word,
                           int start,
                           int len,
                           char in_compound,
                           const FLAG needflag = FLAG_NULL);
 
   std::string check_twosfx_morph(const std::string& word,
                                  int start,
                                  int len,
                                  char in_compound,
                                  const FLAG needflag = FLAG_NULL);
 
   FLAG getFlag() { return aflag; }
   const char* getKey() { return appnd.c_str(); }
   std::string add(const char* word, size_t len);
 
   inline short getKeyLen() { return appnd.size(); }
 
   inline const char* getMorph() { return morphcode; }
 
   inline const unsigned short* getCont() { return contclass; }
-  inline short getContLen() { return contclasslen; }
+  inline unsigned short getContLen() { return contclasslen; }
 
   inline PfxEntry* getNext() { return next; }
   inline PfxEntry* getNextNE() { return nextne; }
   inline PfxEntry* getNextEQ() { return nexteq; }
   inline PfxEntry* getFlgNxt() { return flgnxt; }
 
   inline void setNext(PfxEntry* ptr) { next = ptr; }
   inline void setNextNE(PfxEntry* ptr) { nextne = ptr; }
   inline void setNextEQ(PfxEntry* ptr) { nexteq = ptr; }
   inline void setFlgNxt(PfxEntry* ptr) { flgnxt = ptr; }
 
   inline char* nextchar(char* p);
   inline int test_condition(const std::string& st);
 };
 
 /* A Suffix Entry */
@@ -148,83 +148,83 @@ class PfxEntry : public AffEntry {
 class SfxEntry : public AffEntry {
  private:
   SfxEntry(const SfxEntry&);
   SfxEntry& operator=(const SfxEntry&);
 
  private:
   AffixMgr* pmyMgr;
   std::string rappnd;
 
   SfxEntry* next;
   SfxEntry* nexteq;
   SfxEntry* nextne;
   SfxEntry* flgnxt;
 
   SfxEntry* l_morph;
   SfxEntry* r_morph;
   SfxEntry* eq_morph;
 
  public:
   explicit SfxEntry(AffixMgr* pmgr);
 
   bool allowCross() const { return ((opts & aeXPRODUCT) != 0); }
   struct hentry* checkword(const std::string& word,
                            int start,
                            int len,
                            int optflags,
                            PfxEntry* ppfx,
                            const FLAG cclass,
                            const FLAG needflag,
                            const FLAG badflag);
 
   struct hentry* check_twosfx(const std::string& word,
                               int start,
                               int len,
                               int optflags,
                               PfxEntry* ppfx,
                               const FLAG needflag = FLAG_NULL);
 
   std::string check_twosfx_morph(const std::string& word,
                                  int start,
                                  int len,
                                  int optflags,
                                  PfxEntry* ppfx,
                                  const FLAG needflag = FLAG_NULL);
   struct hentry* get_next_homonym(struct hentry* he);
   struct hentry* get_next_homonym(struct hentry* word,
                                   int optflags,
                                   PfxEntry* ppfx,
                                   const FLAG cclass,
                                   const FLAG needflag);
 
   FLAG getFlag() { return aflag; }
   const char* getKey() { return rappnd.c_str(); }
   std::string add(const char* word, size_t len);
 
   inline const char* getMorph() { return morphcode; }
 
   inline const unsigned short* getCont() { return contclass; }
-  inline short getContLen() { return contclasslen; }
+  inline unsigned short getContLen() { return contclasslen; }
   inline const char* getAffix() { return appnd.c_str(); }
 
   inline short getKeyLen() { return appnd.size(); }
 
   inline SfxEntry* getNext() { return next; }
   inline SfxEntry* getNextNE() { return nextne; }
   inline SfxEntry* getNextEQ() { return nexteq; }
 
   inline SfxEntry* getLM() { return l_morph; }
   inline SfxEntry* getRM() { return r_morph; }
   inline SfxEntry* getEQM() { return eq_morph; }
   inline SfxEntry* getFlgNxt() { return flgnxt; }
 
   inline void setNext(SfxEntry* ptr) { next = ptr; }
   inline void setNextNE(SfxEntry* ptr) { nextne = ptr; }
   inline void setNextEQ(SfxEntry* ptr) { nexteq = ptr; }
   inline void setFlgNxt(SfxEntry* ptr) { flgnxt = ptr; }
   void initReverseWord();
 
   inline char* nextchar(char* p);
   inline int test_condition(const char* st, const char* begin);
 };
 
 #endif
