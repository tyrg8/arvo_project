commit 428d1ed6a874d11b39a34f779140755f087fc9e2
Author: Reini Urban <rurban@cpan.org>
Date:   Wed Dec 14 15:25:32 2022 +0100

    dynapi: protect fixed TFv strings
    
    eg. from fuzzed illegal input.
    Fixes oss-fuzz #49928

diff --git a/src/dynapi.c b/src/dynapi.c
index 9be9ca4f..9f2aec1a 100644
--- a/src/dynapi.c
+++ b/src/dynapi.c
@@ -14259,58 +14259,58 @@ static void
 dynapi_set_helper (void *restrict old, const Dwg_DYNAPI_field *restrict f,
                    const Dwg_Version_Type dwg_version,
                    const void *restrict value, const bool is_utf8)
 {
   // TODO: sanity checks. is_malloc (TF), copy zero's (TFv)
   // if text strcpy or wcscpy, or do utf8 conversion.
   //if ((char*)old && f->is_malloc)
   //  free (old);
   if (f->is_malloc)
     {
       // NULL ptr
       if (!*(char**)value)
         memcpy (old, value, sizeof (char*));
       // fixed length (but not yet TF)
       else if (strEQc (f->type, "TFv"))
         {
           char *str = (char *)calloc (f->size, 1);
-          strcpy (str, *(char**)value);
+          strncpy (str, *(char**)value, f->size);
           memcpy (old, &str, sizeof (char*)); // size of ptr
         }
       // ascii
       else if (f->is_string && dwg_version < R_2007)
         {
           // FIXME: TF size calc is probably wrong
           char *str = (char *)malloc (strlen (*(char**)value)+1);
           strcpy (str, *(char**)value);
           memcpy (old, &str, sizeof (char*)); // size of ptr
         }
       // or wide
       else if (strNE (f->type, "TF") && (f->is_string && dwg_version >= R_2007))
         {
           BITCODE_TU wstr;
           if (is_utf8)
             wstr = bit_utf8_to_TU (*(char **)value, 0);
           else // source is already TU
             {
 #if defined(HAVE_WCHAR_H) && defined(SIZEOF_WCHAR_T) && SIZEOF_WCHAR_T == 2
               wstr = (BITCODE_TU)malloc (2 * (wcslen (*(wchar_t **)value) + 1));
               wcscpy ((wchar_t *)wstr, *(wchar_t **)value);
 #else
               int length = 0;
               for (; (*(BITCODE_TU*)value)[length]; length++)
                 ;
               length++;
               wstr = (BITCODE_TU)malloc (2 * length);
               memcpy (wstr, value, length * 2);
 #endif
             }
           memcpy (old, &wstr, sizeof (char*)); // size of ptr
         }
       else
         memcpy (old, value, sizeof (char*));
     }
   else
     memcpy (old, value, f->size);
 }
 
 /* generic field setters */
diff --git a/src/gen-dynapi.pl b/src/gen-dynapi.pl
index c4eb5ac9..429457cd 100755
--- a/src/gen-dynapi.pl
+++ b/src/gen-dynapi.pl
@@ -3097,58 +3097,58 @@ static void
 dynapi_set_helper (void *restrict old, const Dwg_DYNAPI_field *restrict f,
                    const Dwg_Version_Type dwg_version,
                    const void *restrict value, const bool is_utf8)
 {
   // TODO: sanity checks. is_malloc (TF), copy zero's (TFv)
   // if text strcpy or wcscpy, or do utf8 conversion.
   //if ((char*)old && f->is_malloc)
   //  free (old);
   if (f->is_malloc)
     {
       // NULL ptr
       if (!*(char**)value)
         memcpy (old, value, sizeof (char*));
       // fixed length (but not yet TF)
       else if (strEQc (f->type, "TFv"))
         {
           char *str = (char *)calloc (f->size, 1);
-          strcpy (str, *(char**)value);
+          strncpy (str, *(char**)value, f->size);
           memcpy (old, &str, sizeof (char*)); // size of ptr
         }
       // ascii
       else if (f->is_string && dwg_version < R_2007)
         {
           // FIXME: TF size calc is probably wrong
           char *str = (char *)malloc (strlen (*(char**)value)+1);
           strcpy (str, *(char**)value);
           memcpy (old, &str, sizeof (char*)); // size of ptr
         }
       // or wide
       else if (strNE (f->type, "TF") && (f->is_string && dwg_version >= R_2007))
         {
           BITCODE_TU wstr;
           if (is_utf8)
             wstr = bit_utf8_to_TU (*(char **)value, 0);
           else // source is already TU
             {
 #if defined(HAVE_WCHAR_H) && defined(SIZEOF_WCHAR_T) && SIZEOF_WCHAR_T == 2
               wstr = (BITCODE_TU)malloc (2 * (wcslen (*(wchar_t **)value) + 1));
               wcscpy ((wchar_t *)wstr, *(wchar_t **)value);
 #else
               int length = 0;
               for (; (*(BITCODE_TU*)value)[length]; length++)
                 ;
               length++;
               wstr = (BITCODE_TU)malloc (2 * length);
               memcpy (wstr, value, length * 2);
 #endif
             }
           memcpy (old, &wstr, sizeof (char*)); // size of ptr
         }
       else
         memcpy (old, value, sizeof (char*));
     }
   else
     memcpy (old, value, f->size);
 }
 
 /* generic field setters */
