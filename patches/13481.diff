commit 8478e6daf5c38515fb1bf8aa1a39a96b0072ecee
Author: Primiano Tucci <primiano@google.com>
Date:   Sun Mar 10 12:32:24 2019 -0700

    Fix fuzzers and remove hardcoded -j from travis
    
    Fix a couple of broken fuzzers.
    Also remove the shadow list of fuzzers from travis and
    instead run them all.
    
    Test: manual
    Change-Id: I079cfc34acbb4eebbf968c369173772db76b24c1

diff --git a/.travis.yml b/.travis.yml
index 75b6e76ac..256881cb4 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -154,38 +154,38 @@ install:
 script:
   - tools/gn gen out/dist --args="${GN_ARGS}" --check
   - |
     if [[ "$CFG" == ui-* ]]; then
-      tools/ninja -C out/dist -j8 ui 2>&1 | grep -v "no version information available"
+      tools/ninja -C out/dist ui 2>&1 | grep -v "no version information"
+    elif [[ "$CFG" == *-libfuzzer ]]; then
+      tools/ninja -C out/dist fuzzers
     else
-      tools/ninja -C out/dist -j8
+      tools/ninja -C out/dist
     fi
   - |
     TEST_TARGETS="
     perfetto_integrationtests
     perfetto_unittests
     "
     if [[ "$CFG" == ui-* ]]; then
       out/dist/ui_unittests --ci
+    elif [[ "$CFG" == *-libfuzzer ]]; then
+      # Run a single iteration each to make sure they are not crashing.
+      for fuzzer in $(find out/dist -name '*_fuzzer' -executable); do
+        $fuzzer -runs=1
+      done
     elif [[ "$CFG" == android-* ]]; then
       TARGET_ARCH=$(echo $CFG | cut -d- -f3)
       tools/run_android_emulator --pid /tmp/emulator.pid -v &
       for TEST_TARGET in $TEST_TARGETS; do
         tools/run_android_test out/dist "$TEST_TARGET"
       done
       tools/run_android_test --env BENCHMARK_FUNCTIONAL_TEST_ONLY=true out/dist "perfetto_benchmarks"
     else
       for TEST_TARGET in $TEST_TARGETS; do
         "out/dist/$TEST_TARGET"
       done
       BENCHMARK_FUNCTIONAL_TEST_ONLY=true out/dist/perfetto_benchmarks
       tools/diff_test_trace_processor.py out/dist/trace_processor_shell
-      if [[ "$CFG" == *-libfuzzer ]]; then
-        # Run a single iteration each to make sure they are not crashing.
-        out/dist/end_to_end_shared_memory_fuzzer -runs=1
-        out/dist/buffered_frame_deserializer_fuzzer -runs=1
-        out/dist/unwinding_fuzzer -runs=1
-        out/dist/trace_processor_fuzzer -runs=1
-      fi
     fi
 
 after_script:
diff --git a/src/profiling/memory/shared_ring_buffer_fuzzer.cc b/src/profiling/memory/shared_ring_buffer_fuzzer.cc
index 7101a15a9..2fe7554dc 100644
--- a/src/profiling/memory/shared_ring_buffer_fuzzer.cc
+++ b/src/profiling/memory/shared_ring_buffer_fuzzer.cc
@@ -50,54 +50,57 @@ size_t RoundToPow2(size_t v) {
 int FuzzRingBuffer(const uint8_t* data, size_t size) {
   if (size <= sizeof(MetadataHeader))
     return 0;
 
   auto fd = base::TempFile::CreateUnlinked().ReleaseFD();
   PERFETTO_CHECK(fd);
 
   // Use fuzzer input to first fill the MetadataHeader in the first page, and
   // then put the remainder into the data portion of the ring buffer (2nd+
   // pages).
   size_t payload_size = size - sizeof(MetadataHeader);
   const uint8_t* payload = data + sizeof(MetadataHeader);
   size_t payload_size_pages =
       (payload_size + base::kPageSize - 1) / base::kPageSize;
   // Upsize test buffer to be 2^n data pages (precondition of the impl) + 1 page
   // for the metadata.
   size_t total_size_pages = 1 + RoundToPow2(payload_size_pages);
 
   // Clear spinlock field, as otherwise the read will wait indefinitely (it
   // defaults to indefinite blocking mode).
   MetadataHeader header = {};
   memcpy(&header, data, sizeof(header));
   header.spinlock = 0;
 
-  PERFETTO_CHECK(ftruncate(*fd, total_size_pages * base::kPageSize) == 0);
+  PERFETTO_CHECK(ftruncate(*fd, static_cast<off_t>(total_size_pages *
+                                                   base::kPageSize)) == 0);
   PERFETTO_CHECK(base::WriteAll(*fd, &header, sizeof(header)) != -1);
   PERFETTO_CHECK(lseek(*fd, base::kPageSize, SEEK_SET) != -1);
   PERFETTO_CHECK(base::WriteAll(*fd, payload, payload_size) != -1);
 
   auto buf = SharedRingBuffer::Attach(std::move(fd));
   PERFETTO_CHECK(!!buf);
 
   bool did_read;
   do {
     auto read_buf = buf->BeginRead();
     did_read = bool(read_buf);
     if (did_read) {
       volatile uint8_t* v_data = read_buf.data;
       // Assert we get a reference to valid memory.
       for (size_t i = 0; i < read_buf.size; ++i)
         v_data[i] = v_data[i];
     }
     buf->EndRead(std::move(read_buf));
   } while (did_read);
   return 0;
 }
 
 }  // namespace
 }  // namespace profiling
 }  // namespace perfetto
 
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size);
+
 extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
   return perfetto::profiling::FuzzRingBuffer(data, size);
 }
diff --git a/src/profiling/memory/unwinding.h b/src/profiling/memory/unwinding.h
index e4578b071..478e2eafa 100644
--- a/src/profiling/memory/unwinding.h
+++ b/src/profiling/memory/unwinding.h
@@ -131,54 +131,56 @@ bool DoUnwind(WireMessage*, UnwindingMetadata* metadata, AllocRecord* out);
 class UnwindingWorker : public base::UnixSocket::EventListener {
  public:
   class Delegate {
    public:
     virtual void PostAllocRecord(AllocRecord) = 0;
     virtual void PostFreeRecord(FreeRecord) = 0;
     virtual void PostSocketDisconnected(DataSourceInstanceID, pid_t pid) = 0;
     virtual ~Delegate();
   };
 
   struct HandoffData {
     DataSourceInstanceID data_source_instance_id;
     base::UnixSocketRaw sock;
     base::ScopedFile fds[kHandshakeSize];
     SharedRingBuffer shmem;
   };
 
   UnwindingWorker(Delegate* delegate, base::TaskRunner* task_runner)
       : delegate_(delegate), task_runner_(task_runner) {}
 
   // Public API safe to call from other threads.
   void PostDisconnectSocket(pid_t pid);
   void PostHandoffSocket(HandoffData);
 
   // Implementation of UnixSocket::EventListener.
   // Do not call explicitly.
   void OnDisconnect(base::UnixSocket* self) override;
   void OnNewIncomingConnection(base::UnixSocket*,
                                std::unique_ptr<base::UnixSocket>) override {
     PERFETTO_DFATAL("This should not happen.");
   }
   void OnDataAvailable(base::UnixSocket* self) override;
 
- private:
+ public:  // Public for testing / fuzzing.
   struct ClientData {
     DataSourceInstanceID data_source_instance_id;
     std::unique_ptr<base::UnixSocket> sock;
     UnwindingMetadata metadata;
     SharedRingBuffer shmem;
   };
 
   void HandleBuffer(SharedRingBuffer::Buffer* buf, ClientData* socket_data);
+
+ private:
   void HandleHandoffSocket(HandoffData data);
   void HandleDisconnectSocket(pid_t pid);
 
   std::map<pid_t, ClientData> client_data_;
   Delegate* delegate_;
   base::TaskRunner* task_runner_;
 };
 
 }  // namespace profiling
 }  // namespace perfetto
 
 #endif  // SRC_PROFILING_MEMORY_UNWINDING_H_
diff --git a/src/profiling/memory/unwinding_fuzzer.cc b/src/profiling/memory/unwinding_fuzzer.cc
index a52d67385..00bcf4d3c 100644
--- a/src/profiling/memory/unwinding_fuzzer.cc
+++ b/src/profiling/memory/unwinding_fuzzer.cc
@@ -25,23 +25,30 @@ namespace perfetto {
 namespace profiling {
 namespace {
 
+class FakeDelegate : public UnwindingWorker::Delegate {
+ public:
+  ~FakeDelegate() override {}
+  void PostAllocRecord(AllocRecord) override {}
+  void PostFreeRecord(FreeRecord) override {}
+  void PostSocketDisconnected(DataSourceInstanceID, pid_t) override {}
+};
+
 int FuzzUnwinding(const uint8_t* data, size_t size) {
-  UnwindingRecord record;
-  auto unwinding_metadata = std::make_shared<UnwindingMetadata>(
-      getpid(), base::OpenFile("/proc/self/maps", O_RDONLY),
-      base::OpenFile("/proc/self/mem", O_RDONLY));
-
-  record.pid = getpid();
-  record.size = size;
-  record.data.reset(new uint8_t[size]);
-  memcpy(record.data.get(), data, size);
-  record.metadata = unwinding_metadata;
-
-  BookkeepingRecord out;
-  HandleUnwindingRecord(&record, &out);
+  FakeDelegate delegate;
+  UnwindingWorker worker(&delegate, /*task_runner=*/nullptr);
+
+  SharedRingBuffer::Buffer buf(const_cast<uint8_t*>(data), size);
+
+  UnwindingWorker::ClientData sock_data{
+      0, nullptr,
+      UnwindingMetadata{getpid(), base::OpenFile("/proc/self/maps", O_RDONLY),
+                        base::OpenFile("/proc/self/mem", O_RDONLY)},
+      *SharedRingBuffer::Create(4096)};
+
+  worker.HandleBuffer(&buf, &sock_data);
   return 0;
 }
 
 }  // namespace
 }  // namespace profiling
 }  // namespace perfetto
