commit ee79e1082aa9d8cf1420518b23077063beca654a
Author: Stanislav Klima <sklima@ra.rockwell.com>
Date:   Tue Mar 23 13:19:32 2021 +0100

    Updated fix of 58787.

diff --git a/src/internal.c b/src/internal.c
index eeddb1541..42ac95fce 100644
--- a/src/internal.c
+++ b/src/internal.c
@@ -7096,101 +7096,102 @@ static DtlsFrag* CreateFragment(word32* begin, word32 end, const byte* data,
 int DtlsMsgSet(DtlsMsg* msg, word32 seq, word16 epoch, const byte* data, byte type,
                                    word32 fragOffset, word32 fragSz, void* heap)
 {
     WOLFSSL_ENTER("DtlsMsgSet()");
     if (msg != NULL && data != NULL && msg->fragSz <= msg->sz &&
-                    fragOffset <= msg->sz && (fragOffset + fragSz) <= msg->sz) {
+        fragSz <= msg->sz && fragOffset <= msg->sz &&
+        (fragOffset + fragSz) <= msg->sz) {
         DtlsFrag* cur = msg->fragList;
         DtlsFrag* prev = cur;
         DtlsFrag* newFrag;
         word32 bytesLeft = fragSz; /* could be overlapping fragment */
         word32 startOffset = fragOffset;
         word32 added;
 
         msg->seq = seq;
         msg->epoch = epoch;
         msg->type = type;
 
         if (fragOffset == 0) {
             XMEMCPY(msg->buf, data - DTLS_HANDSHAKE_HEADER_SZ,
                     DTLS_HANDSHAKE_HEADER_SZ);
             c32to24(msg->sz, msg->msg - DTLS_HANDSHAKE_FRAG_SZ);
         }
 
         /* if no message data, just return */
         if (fragSz == 0)
             return 0;
 
         /* if list is empty add full fragment to front */
         if (cur == NULL) {
             newFrag = CreateFragment(&fragOffset, fragOffset + fragSz - 1, data,
                                      msg->msg, &bytesLeft, heap);
             if (newFrag == NULL)
                 return MEMORY_E;
 
             msg->fragSz = fragSz;
             msg->fragList = newFrag;
 
             return 0;
         }
 
         /* add to front if before current front, up to next->begin */
         if (fragOffset < cur->begin) {
             word32 end = fragOffset + fragSz - 1;
 
             if (end >= cur->begin)
                 end = cur->begin - 1;
 
             added = end - fragOffset + 1;
             newFrag = CreateFragment(&fragOffset, end, data, msg->msg,
                                      &bytesLeft, heap);
             if (newFrag == NULL)
                 return MEMORY_E;
 
             msg->fragSz += added;
 
             newFrag->next = cur;
             msg->fragList = newFrag;
         }
 
         /* while we have bytes left, try to find a gap to fill */
         while (bytesLeft > 0) {
             /* get previous packet in list */
             while (cur && (fragOffset >= cur->begin)) {
                 prev = cur;
                 cur = cur->next;
             }
 
             /* don't add duplicate data */
             if (prev->end >= fragOffset) {
                 if ( (fragOffset + bytesLeft - 1) <= prev->end)
                     return 0;
                 fragOffset = prev->end + 1;
                 bytesLeft = startOffset + fragSz - fragOffset;
             }
 
             if (cur == NULL)
                 /* we're at the end */
                 added = bytesLeft;
             else
                 /* we're in between two frames */
                 added = min(bytesLeft, cur->begin - fragOffset);
 
             /* data already there */
             if (added == 0)
                 continue;
 
             newFrag = CreateFragment(&fragOffset, fragOffset + added - 1,
                                      data + fragOffset - startOffset,
                                      msg->msg, &bytesLeft, heap);
             if (newFrag == NULL)
                 return MEMORY_E;
 
             msg->fragSz += added;
 
             newFrag->next = prev->next;
             prev->next = newFrag;
         }
     }
 
     return 0;
 }
