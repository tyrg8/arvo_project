commit 093e35dd54489232bbc9ed3e12f984747994b268
Author: Alex <aleksandrosansan@gmail.com>
Date:   Mon Jul 3 09:12:00 2023 +0000

    Fix eternal loop

diff --git a/code/AssetLib/SMD/SMDLoader.cpp b/code/AssetLib/SMD/SMDLoader.cpp
index 8f5ae58e3..9af871cee 100644
--- a/code/AssetLib/SMD/SMDLoader.cpp
+++ b/code/AssetLib/SMD/SMDLoader.cpp
@@ -828,64 +828,63 @@ void SMDImporter::ParseSkeletonSection(const char* szCurrent, const char** szCur
 // ------------------------------------------------------------------------------------------------
 #define SMDI_PARSE_RETURN { \
     SkipLine(szCurrent,&szCurrent); \
     *szCurrentOut = szCurrent; \
     return; \
 }
 // ------------------------------------------------------------------------------------------------
 // Parse a node line
 void SMDImporter::ParseNodeInfo(const char* szCurrent, const char** szCurrentOut) {
     unsigned int iBone  = 0;
     SkipSpacesAndLineEnd(szCurrent,&szCurrent);
     if ( !ParseUnsignedInt(szCurrent,&szCurrent,iBone) || !SkipSpaces(szCurrent,&szCurrent)) {
-        LogErrorNoThrow("Unexpected EOF/EOL while parsing bone index");
-        SMDI_PARSE_RETURN;
+        throw DeadlyImportError("Unexpected EOF/EOL while parsing bone index");
     }
     if (iBone == UINT_MAX) {
         LogErrorNoThrow("Invalid bone number while parsing bone index");
         SMDI_PARSE_RETURN;
     }
     // add our bone to the list
     if (iBone >= asBones.size()) {
         asBones.resize(iBone+1);
     }
     SMD::Bone& bone = asBones[iBone];
 
     bool bQuota = true;
     if ('\"' != *szCurrent) {
         LogWarning("Bone name is expected to be enclosed in "
             "double quotation marks. ");
         bQuota = false;
     } else {
         ++szCurrent;
     }
 
     const char* szEnd = szCurrent;
     for ( ;; ) {
         if (bQuota && '\"' == *szEnd) {
             iBone = (unsigned int)(szEnd - szCurrent);
             ++szEnd;
             break;
         } else if (!bQuota && IsSpaceOrNewLine(*szEnd)) {
             iBone = (unsigned int)(szEnd - szCurrent);
             break;
         } else if (!(*szEnd)) {
             LogErrorNoThrow("Unexpected EOF/EOL while parsing bone name");
             SMDI_PARSE_RETURN;
         }
         ++szEnd;
     }
     bone.mName = std::string(szCurrent,iBone);
     szCurrent = szEnd;
 
     // the only negative bone parent index that could occur is -1 AFAIK
     if(!ParseSignedInt(szCurrent,&szCurrent,(int&)bone.iParent))  {
         LogErrorNoThrow("Unexpected EOF/EOL while parsing bone parent index. Assuming -1");
         SMDI_PARSE_RETURN;
     }
 
     // go to the beginning of the next line
     SMDI_PARSE_RETURN;
 }
 
 // ------------------------------------------------------------------------------------------------
 // Parse a skeleton element
