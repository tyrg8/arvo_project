commit ef0d3789f229e1176910e45fc47600336ae3aed9
Author: Ben Smith <binji@chromium.org>
Date:   Fri Jul 31 15:11:34 2020 -0700

    Fix linking section symbol name bugs (#1508)
    
    Found by oss-fuzz.

diff --git a/src/binary-reader-ir.cc b/src/binary-reader-ir.cc
index 0dc9b2b1..3b0fc453 100644
--- a/src/binary-reader-ir.cc
+++ b/src/binary-reader-ir.cc
@@ -1265,22 +1265,26 @@ Result BinaryReaderIR::OnEventType(Index index, Index sig_index) {
 Result BinaryReaderIR::OnDataSymbol(Index index, uint32_t flags,
                                     string_view name, Index segment,
                                     uint32_t offset, uint32_t size) {
   if (name.empty()) {
     return Result::Ok;
   }
   if (flags & WABT_SYMBOL_FLAG_UNDEFINED) {
     // Refers to data in another file, `segment` not valid.
     return Result::Ok;
   }
   if (offset) {
     // If it is pointing into the data segment, then it's not really naming
     // the whole segment.
     return Result::Ok;
   }
+  if (segment >= module_->data_segments.size()) {
+    PrintError("invalid data segment index: %" PRIindex, segment);
+    return Result::Error;
+  }
   DataSegment* seg = module_->data_segments[segment];
   std::string dollar_name =
       GetUniqueName(&module_->data_segment_bindings, MakeDollarName(name));
   seg->name = dollar_name;
   module_->data_segment_bindings.emplace(dollar_name, Binding(segment));
   return Result::Ok;
 }
@@ -1288,16 +1292,20 @@ Result BinaryReaderIR::OnDataSymbol(Index index, uint32_t flags,
 Result BinaryReaderIR::OnFunctionSymbol(Index index, uint32_t flags,
                                         string_view name, Index func_index) {
   if (name.empty()) {
     return Result::Ok;
   }
+  if (func_index >= module_->funcs.size()) {
+    PrintError("invalid function index: %" PRIindex, func_index);
+    return Result::Error;
+  }
   Func* func = module_->funcs[func_index];
   if (!func->name.empty()) {
     // The name section has already named this function.
     return Result::Ok;
   }
   std::string dollar_name =
       GetUniqueName(&module_->func_bindings, MakeDollarName(name));
   func->name = dollar_name;
   module_->func_bindings.emplace(dollar_name, Binding(func_index));
   return Result::Ok;
 }
@@ -1305,12 +1313,16 @@ Result BinaryReaderIR::OnFunctionSymbol(Index index, uint32_t flags,
 Result BinaryReaderIR::OnGlobalSymbol(Index index, uint32_t flags,
                                       string_view name, Index global_index) {
   if (name.empty()) {
     return Result::Ok;
   }
+  if (global_index >= module_->globals.size()) {
+    PrintError("invalid global index: %" PRIindex, global_index);
+    return Result::Error;
+  }
   Global* glob = module_->globals[global_index];
   std::string dollar_name =
       GetUniqueName(&module_->global_bindings, MakeDollarName(name));
   glob->name = dollar_name;
   module_->global_bindings.emplace(dollar_name, Binding(global_index));
   return Result::Ok;
 }
@@ -1323,14 +1335,18 @@ Result BinaryReaderIR::OnSectionSymbol(Index index, uint32_t flags,
 Result BinaryReaderIR::OnEventSymbol(Index index, uint32_t flags,
                                      string_view name, Index event_index) {
   if (name.empty()) {
     return Result::Ok;
   }
+  if (event_index >= module_->events.size()) {
+    PrintError("invalid event index: %" PRIindex, event_index);
+    return Result::Error;
+  }
   Event* event = module_->events[event_index];
   std::string dollar_name =
       GetUniqueName(&module_->event_bindings, MakeDollarName(name));
   event->name = dollar_name;
   module_->event_bindings.emplace(dollar_name, Binding(event_index));
   return Result::Ok;
 }
 
 }  // end anonymous namespace
diff --git a/test/binary/bad-linking-data-segment-index.txt b/test/binary/bad-linking-data-segment-index.txt
new file mode 100644
index 00000000..709b76ce
--- /dev/null
+++ b/test/binary/bad-linking-data-segment-index.txt
@@ -0,0 +1,31 @@
+;;; TOOL: run-gen-wasm-bad
+magic
+version
+section(MEMORY) { count[1] has_max[0] initial[0] }
+section(DATA) {
+  count[1]
+  memory_index[0]
+  offset[i32.const 0 end]
+  data[str("foo")]
+}
+
+section("linking") {
+  metadata_version[2]
+
+  section(LINKING_SYMBOL_TABLE) {
+    num_symbols[1]
+
+    type[1]
+    flags[1]
+    str("data OOB")
+    segment[1] ;; OOB
+    offset[0]
+    size[0]
+  }
+}
+(;; STDERR ;;;
+error: invalid data segment index: 1
+0000034: error: OnDataSymbol callback failed
+error: invalid data segment index: 1
+0000034: error: OnDataSymbol callback failed
+;;; STDERR ;;)
diff --git a/test/binary/bad-linking-event-index.txt b/test/binary/bad-linking-event-index.txt
new file mode 100644
index 00000000..975c2d8d
--- /dev/null
+++ b/test/binary/bad-linking-event-index.txt
@@ -0,0 +1,30 @@
+;;; TOOL: run-gen-wasm-bad
+;;; ARGS1: --enable-exceptions
+;;; ARGS2: --enable-exceptions
+magic
+version
+section(TYPE) { count[1] function params[0] results[0] }
+section(EVENT) {
+  count[1]
+  attr[0]
+  sig[0]
+}
+
+section("linking") {
+  metadata_version[2]
+
+  section(LINKING_SYMBOL_TABLE) {
+    num_symbols[1]
+
+    type[4]
+    flags[1]
+    index[1]
+    str("event OOB")
+  }
+}
+(;; STDERR ;;;
+error: invalid event index: 1
+000002e: error: OnEventSymbol callback failed
+error: invalid event index: 1
+000002e: error: OnEventSymbol callback failed
+;;; STDERR ;;)
diff --git a/test/binary/bad-linking-function-index.txt b/test/binary/bad-linking-function-index.txt
new file mode 100644
index 00000000..ff0b7556
--- /dev/null
+++ b/test/binary/bad-linking-function-index.txt
@@ -0,0 +1,25 @@
+;;; TOOL: run-gen-wasm-bad
+magic
+version
+section(TYPE) { count[1] function params[0] results[0] }
+section(FUNCTION) { count[1] type[0] }
+section(CODE) { count[1] func { locals[0] } }
+
+section("linking") {
+  metadata_version[2]
+
+  section(LINKING_SYMBOL_TABLE) {
+    num_symbols[1]
+
+    type[0]
+    flags[1]
+    index[1]
+    str("func OOB")
+  }
+}
+(;; STDERR ;;;
+error: invalid function index: 1
+0000032: error: OnFunctionSymbol callback failed
+error: invalid function index: 1
+0000032: error: OnFunctionSymbol callback failed
+;;; STDERR ;;)
diff --git a/test/binary/bad-linking-global-index.txt b/test/binary/bad-linking-global-index.txt
new file mode 100644
index 00000000..7d217b8a
--- /dev/null
+++ b/test/binary/bad-linking-global-index.txt
@@ -0,0 +1,26 @@
+;;; TOOL: run-gen-wasm-bad
+magic
+version
+section(GLOBAL) {
+  count[1]
+  type[i32] mut[0] init_expr[i32.const 0 end]
+}
+
+section("linking") {
+  metadata_version[2]
+
+  section(LINKING_SYMBOL_TABLE) {
+    num_symbols[1]
+
+    type[2]
+    flags[1]
+    index[1]
+    str("global OOB")
+  }
+}
+(;; STDERR ;;;
+error: invalid global index: 1
+000002c: error: OnGlobalSymbol callback failed
+error: invalid global index: 1
+000002c: error: OnGlobalSymbol callback failed
+;;; STDERR ;;)
