commit aa6a7c2b18d9d679a349bb7d5683347d0caa9566
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Thu Jul 12 15:26:22 2018 +0200

    PAMDataset: avoid illegal down_cast to GDALPamRasterBand. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=9358. Credit to OSS Fuzz

diff --git a/gdal/gcore/gdalpamdataset.cpp b/gdal/gcore/gdalpamdataset.cpp
index 082d55a833..9592d524bb 100644
--- a/gdal/gcore/gdalpamdataset.cpp
+++ b/gdal/gcore/gdalpamdataset.cpp
@@ -180,109 +180,108 @@ void GDALPamDataset::FlushCache()
 //! @cond Doxygen_Suppress
 CPLXMLNode *GDALPamDataset::SerializeToXML( const char *pszUnused )
 
 {
     if( psPam == nullptr )
         return nullptr;
 
 /* -------------------------------------------------------------------- */
 /*      Setup root node and attributes.                                 */
 /* -------------------------------------------------------------------- */
     CPLXMLNode *psDSTree = CPLCreateXMLNode( nullptr, CXT_Element, "PAMDataset" );
 
 /* -------------------------------------------------------------------- */
 /*      SRS                                                             */
 /* -------------------------------------------------------------------- */
     if( psPam->pszProjection != nullptr && strlen(psPam->pszProjection) > 0 )
         CPLSetXMLValue( psDSTree, "SRS", psPam->pszProjection );
 
 /* -------------------------------------------------------------------- */
 /*      GeoTransform.                                                   */
 /* -------------------------------------------------------------------- */
     if( psPam->bHaveGeoTransform )
     {
         CPLString oFmt;
         oFmt.Printf( "%24.16e,%24.16e,%24.16e,%24.16e,%24.16e,%24.16e",
                      psPam->adfGeoTransform[0],
                      psPam->adfGeoTransform[1],
                      psPam->adfGeoTransform[2],
                      psPam->adfGeoTransform[3],
                      psPam->adfGeoTransform[4],
                      psPam->adfGeoTransform[5] );
         CPLSetXMLValue( psDSTree, "GeoTransform", oFmt );
     }
 
 /* -------------------------------------------------------------------- */
 /*      Metadata.                                                       */
 /* -------------------------------------------------------------------- */
     if( psPam->bHasMetadata )
     {
         CPLXMLNode *psMD = oMDMD.Serialize();
         if( psMD != nullptr )
         {
             CPLAddXMLChild( psDSTree, psMD );
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*      GCPs                                                            */
 /* -------------------------------------------------------------------- */
     if( psPam->nGCPCount > 0 )
     {
         GDALSerializeGCPListToXML( psDSTree,
                                    psPam->pasGCPList,
                                    psPam->nGCPCount,
                                    psPam->pszGCPProjection );
     }
 
 /* -------------------------------------------------------------------- */
 /*      Process bands.                                                  */
 /* -------------------------------------------------------------------- */
 
     // Find last child
     CPLXMLNode* psLastChild = psDSTree->psChild;
     for( ; psLastChild != nullptr && psLastChild->psNext;
                                     psLastChild = psLastChild->psNext )
     {
     }
 
     for( int iBand = 0; iBand < GetRasterCount(); iBand++ )
     {
-        GDALPamRasterBand * const poBand =
-            cpl::down_cast<GDALPamRasterBand *>(
-                GetRasterBand(iBand+1) );
+        GDALRasterBand * const poBand = GetRasterBand(iBand+1);
 
         if( poBand == nullptr || !(poBand->GetMOFlags() & GMO_PAM_CLASS) )
             continue;
 
-        CPLXMLNode * const psBandTree = poBand->SerializeToXML( pszUnused );
+        CPLXMLNode * const psBandTree =
+            cpl::down_cast<GDALPamRasterBand *>(poBand)->SerializeToXML( pszUnused );
 
         if( psBandTree != nullptr )
         {
             if( psLastChild == nullptr )
             {
                 CPLAddXMLChild( psDSTree, psBandTree );
             }
             else
             {
                 psLastChild->psNext = psBandTree;
             }
             psLastChild = psBandTree;
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*      We don't want to return anything if we had no metadata to       */
 /*      attach.                                                         */
 /* -------------------------------------------------------------------- */
     if( psDSTree->psChild == nullptr )
     {
         CPLDestroyXMLNode( psDSTree );
         psDSTree = nullptr;
     }
 
     return psDSTree;
 }
 
 /************************************************************************/
 /*                           PamInitialize()                            */
 /************************************************************************/
@@ -352,160 +351,162 @@ void GDALPamDataset::PamClear()
 CPLErr GDALPamDataset::XMLInit( CPLXMLNode *psTree, const char *pszUnused )
 
 {
 /* -------------------------------------------------------------------- */
 /*      Check for an SRS node.                                          */
 /* -------------------------------------------------------------------- */
     if( strlen(CPLGetXMLValue(psTree, "SRS", "")) > 0 )
     {
         CPLFree( psPam->pszProjection );
         psPam->pszProjection = nullptr;
 
         OGRSpatialReference oSRS;
         if( oSRS.SetFromUserInput( CPLGetXMLValue(psTree, "SRS", "") )
             == OGRERR_NONE )
             oSRS.exportToWkt( &(psPam->pszProjection) );
     }
 
 /* -------------------------------------------------------------------- */
 /*      Check for a GeoTransform node.                                  */
 /* -------------------------------------------------------------------- */
     if( strlen(CPLGetXMLValue(psTree, "GeoTransform", "")) > 0 )
     {
         const char *pszGT = CPLGetXMLValue(psTree, "GeoTransform", "");
 
         char **papszTokens =
             CSLTokenizeStringComplex( pszGT, ",", FALSE, FALSE );
         if( CSLCount(papszTokens) != 6 )
         {
             CPLError( CE_Warning, CPLE_AppDefined,
                       "GeoTransform node does not have expected six values.");
         }
         else
         {
             for( int iTA = 0; iTA < 6; iTA++ )
                 psPam->adfGeoTransform[iTA] = CPLAtof(papszTokens[iTA]);
             psPam->bHaveGeoTransform = TRUE;
         }
 
         CSLDestroy( papszTokens );
     }
 
 /* -------------------------------------------------------------------- */
 /*      Check for GCPs.                                                 */
 /* -------------------------------------------------------------------- */
     CPLXMLNode *psGCPList = CPLGetXMLNode( psTree, "GCPList" );
 
     if( psGCPList != nullptr )
     {
         CPLFree( psPam->pszGCPProjection );
         psPam->pszGCPProjection = nullptr;
 
         // Make sure any previous GCPs, perhaps from an .aux file, are cleared
         // if we have new ones.
         if( psPam->nGCPCount > 0 )
         {
             GDALDeinitGCPs( psPam->nGCPCount, psPam->pasGCPList );
             CPLFree( psPam->pasGCPList );
             psPam->nGCPCount = 0;
             psPam->pasGCPList = nullptr;
         }
 
         GDALDeserializeGCPListFromXML( psGCPList,
                                        &(psPam->pasGCPList),
                                        &(psPam->nGCPCount),
                                        &(psPam->pszGCPProjection) );
     }
 
 /* -------------------------------------------------------------------- */
 /*      Apply any dataset level metadata.                               */
 /* -------------------------------------------------------------------- */
     oMDMD.XMLInit( psTree, TRUE );
 
 /* -------------------------------------------------------------------- */
 /*      Try loading ESRI xml encoded GeodataXform.                      */
 /* -------------------------------------------------------------------- */
     if (psPam->pszProjection == nullptr)
     {
         // ArcGIS 9.3: GeodataXform as a root element
         CPLXMLNode* psGeodataXform = CPLGetXMLNode(psTree, "=GeodataXform");
         CPLXMLNode *psValueAsXML = nullptr;
         if( psGeodataXform != nullptr )
         {
             char* apszMD[2];
             apszMD[0] = CPLSerializeXMLTree(psGeodataXform);
             apszMD[1] = nullptr;
             oMDMD.SetMetadata( apszMD, "xml:ESRI");
             CPLFree(apszMD[0]);
         }
         else
         {
             // ArcGIS 10: GeodataXform as content of xml:ESRI metadata domain.
             char** papszXML = oMDMD.GetMetadata( "xml:ESRI" );
             if (CSLCount(papszXML) == 1)
             {
                 psValueAsXML = CPLParseXMLString( papszXML[0] );
                 if( psValueAsXML )
                     psGeodataXform = CPLGetXMLNode(psValueAsXML, "=GeodataXform");
             }
         }
 
         if (psGeodataXform)
         {
             const char* pszESRI_WKT = CPLGetXMLValue(psGeodataXform,
                                 "SpatialReference.WKT", nullptr);
             if (pszESRI_WKT)
             {
                 OGRSpatialReference* poSRS = new OGRSpatialReference(nullptr);
                 if (poSRS->importFromWkt(pszESRI_WKT) == OGRERR_NONE &&
                     poSRS->morphFromESRI() == OGRERR_NONE)
                 {
                     char* pszWKT = nullptr;
                     if (poSRS->exportToWkt(&pszWKT) == OGRERR_NONE)
                     {
                         psPam->pszProjection = CPLStrdup(pszWKT);
                     }
                     CPLFree(pszWKT);
                 }
                 delete poSRS;
             }
         }
         if( psValueAsXML )
             CPLDestroyXMLNode(psValueAsXML);
     }
 
 /* -------------------------------------------------------------------- */
 /*      Process bands.                                                  */
 /* -------------------------------------------------------------------- */
     for( CPLXMLNode *psBandTree = psTree->psChild;
          psBandTree != nullptr;
          psBandTree = psBandTree->psNext )
     {
         if( psBandTree->eType != CXT_Element
             || !EQUAL(psBandTree->pszValue,"PAMRasterBand") )
             continue;
 
         const int nBand = atoi(CPLGetXMLValue( psBandTree, "band", "0"));
 
         if( nBand < 1 || nBand > GetRasterCount() )
             continue;
 
-        GDALPamRasterBand *poBand = cpl::down_cast<GDALPamRasterBand *>(
-            GetRasterBand(nBand) );
+        GDALRasterBand *poBand = GetRasterBand(nBand);
 
         if( poBand == nullptr || !(poBand->GetMOFlags() & GMO_PAM_CLASS) )
             continue;
 
-        poBand->XMLInit( psBandTree, pszUnused );
+        GDALPamRasterBand *poPamBand = cpl::down_cast<GDALPamRasterBand *>(
+            GetRasterBand(nBand) );
+
+        poPamBand->XMLInit( psBandTree, pszUnused );
     }
 
 /* -------------------------------------------------------------------- */
 /*      Clear dirty flag.                                               */
 /* -------------------------------------------------------------------- */
     nPamFlags &= ~GPF_DIRTY;
 
     return CE_None;
 }
 
 /************************************************************************/
 /*                        SetPhysicalFilename()                         */
 /************************************************************************/
@@ -891,135 +892,136 @@ CPLErr GDALPamDataset::TrySaveXML()
 CPLErr GDALPamDataset::CloneInfo( GDALDataset *poSrcDS, int nCloneFlags )
 
 {
     const int bOnlyIfMissing = nCloneFlags & GCIF_ONLY_IF_MISSING;
     const int nSavedMOFlags = GetMOFlags();
 
     PamInitialize();
 
 /* -------------------------------------------------------------------- */
 /*      Suppress NotImplemented error messages - mainly needed if PAM   */
 /*      disabled.                                                       */
 /* -------------------------------------------------------------------- */
     SetMOFlags( nSavedMOFlags | GMO_IGNORE_UNIMPLEMENTED );
 
 /* -------------------------------------------------------------------- */
 /*      GeoTransform                                                    */
 /* -------------------------------------------------------------------- */
     if( nCloneFlags & GCIF_GEOTRANSFORM )
     {
       double adfGeoTransform[6] = { 0.0 };
 
         if( poSrcDS->GetGeoTransform( adfGeoTransform ) == CE_None )
         {
             double adfOldGT[6] = { 0.0 };
 
             if( !bOnlyIfMissing || GetGeoTransform( adfOldGT ) != CE_None )
                 SetGeoTransform( adfGeoTransform );
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*      Projection                                                      */
 /* -------------------------------------------------------------------- */
     if( nCloneFlags & GCIF_PROJECTION )
     {
         const char *pszWKT = poSrcDS->GetProjectionRef();
 
         if( pszWKT != nullptr && strlen(pszWKT) > 0 )
         {
             if( !bOnlyIfMissing
                 || GetProjectionRef() == nullptr
                 || strlen(GetProjectionRef()) == 0 )
                 SetProjection( pszWKT );
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*      GCPs                                                            */
 /* -------------------------------------------------------------------- */
     if( nCloneFlags & GCIF_GCPS )
     {
         if( poSrcDS->GetGCPCount() > 0 )
         {
             if( !bOnlyIfMissing || GetGCPCount() == 0 )
             {
                 SetGCPs( poSrcDS->GetGCPCount(),
                          poSrcDS->GetGCPs(),
                          poSrcDS->GetGCPProjection() );
             }
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*      Metadata                                                        */
 /* -------------------------------------------------------------------- */
     if( nCloneFlags & GCIF_METADATA )
     {
         if( poSrcDS->GetMetadata() != nullptr )
         {
             if( !bOnlyIfMissing
                 || CSLCount(GetMetadata()) != CSLCount(poSrcDS->GetMetadata()) )
             {
                 SetMetadata( poSrcDS->GetMetadata() );
             }
         }
         if( poSrcDS->GetMetadata("RPC") != nullptr )
         {
             if( !bOnlyIfMissing
                 || CSLCount(GetMetadata("RPC"))
                    != CSLCount(poSrcDS->GetMetadata("RPC")) )
             {
                 SetMetadata( poSrcDS->GetMetadata("RPC"), "RPC" );
             }
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*      Process bands.                                                  */
 /* -------------------------------------------------------------------- */
     if( nCloneFlags & GCIF_PROCESS_BANDS )
     {
         for( int iBand = 0; iBand < GetRasterCount(); iBand++ )
         {
-            GDALPamRasterBand *poBand = cpl::down_cast<GDALPamRasterBand *>(
-                GetRasterBand(iBand+1) );
+            GDALRasterBand *poBand = GetRasterBand(iBand+1);
 
             if( poBand == nullptr || !(poBand->GetMOFlags() & GMO_PAM_CLASS) )
                 continue;
 
             if( poSrcDS->GetRasterCount() >= iBand+1 )
-                poBand->CloneInfo( poSrcDS->GetRasterBand(iBand+1),
-                                   nCloneFlags );
+            {
+                cpl::down_cast<GDALPamRasterBand *>(poBand)->
+                    CloneInfo( poSrcDS->GetRasterBand(iBand+1), nCloneFlags );
+            }
             else
                 CPLDebug(
                     "GDALPamDataset",
                     "Skipping CloneInfo for band not in source, "
                     "this is a bit unusual!" );
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*      Copy masks.  These are really copied at a lower level using     */
 /*      GDALDefaultOverviews, for formats with no native mask           */
 /*      support but this is a convenient central point to put this      */
 /*      for most drivers.                                               */
 /* -------------------------------------------------------------------- */
     if( nCloneFlags & GCIF_MASK )
     {
         GDALDriver::DefaultCopyMasks( poSrcDS, this, FALSE );
     }
 
 /* -------------------------------------------------------------------- */
 /*      Restore MO flags.                                               */
 /* -------------------------------------------------------------------- */
     SetMOFlags( nSavedMOFlags );
 
     return CE_None;
 }
 //! @endcond
 
 /************************************************************************/
 /*                            GetFileList()                             */
 /*                                                                      */
 /*      Add .aux.xml or .aux file into file list as appropriate.        */
 /************************************************************************/
