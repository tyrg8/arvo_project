commit 3f116fa4ff59f78e1699b950e8ef348b896fc606
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Sun Jan 14 17:18:15 2018 +0300

    Spline::calculateCurve(): clamp interpolated value to the max too.

diff --git a/src/librawspeed/common/Spline.h b/src/librawspeed/common/Spline.h
index ebb84b0d..fa87f585 100644
--- a/src/librawspeed/common/Spline.h
+++ b/src/librawspeed/common/Spline.h
@@ -107,74 +107,71 @@ private:
 public:
   explicit Spline(const std::vector<iPoint2D>& control_points) {
     assert(control_points.size() >= 2 &&
            "Need at least two points to interpolate between");
 
     // Expect the X coords of the curve to start/end at the extreme values
     assert(control_points.front().x == 0);
     assert(control_points.back().x == 65535);
 
     assert(std::adjacent_find(
                control_points.cbegin(), control_points.cend(),
                [](const iPoint2D& lhs, const iPoint2D& rhs) -> bool {
                  return std::greater_equal<>()(lhs.x, rhs.x);
                }) == control_points.cend() &&
            "The X coordinates must all be strictly increasing");
 
 #ifndef NDEBUG
     if (!std::is_floating_point<value_type>::value) {
       // The Y coords must be limited to the range of value_type
       std::for_each(control_points.cbegin(), control_points.cend(),
                     [](const iPoint2D& p) -> void {
                       assert(p.y >= std::numeric_limits<value_type>::min());
                       assert(p.y <= std::numeric_limits<value_type>::max());
                     });
     }
 #endif
 
     num_coords = control_points.size();
     num_segments = num_coords - 1;
 
     xCp.resize(num_coords);
     segments.resize(num_coords);
     for (int i = 0; i < num_coords; i++) {
       xCp[i] = control_points[i].x;
       segments[i].a = control_points[i].y;
     }
 
     prepare();
   }
 
   std::vector<Segment> getSegments() const { return segments; }
 
   std::vector<value_type> calculateCurve() const {
     std::vector<value_type> curve(65536);
 
     for (int i = 0; i < num_segments; i++) {
       const Segment& s = segments[i];
 
       for (int x = xCp[i]; x <= xCp[i + 1]; x++) {
         double diff = x - xCp[i];
         double diff_2 = diff * diff;
         double diff_3 = diff * diff * diff;
 
         double interpolated = s.a + s.b * diff + s.c * diff_2 + s.d * diff_3;
 
         if (!std::is_floating_point<value_type>::value) {
           interpolated = std::max(
               interpolated, double(std::numeric_limits<value_type>::min()));
-
-          assert(interpolated <=
-                 double(std::numeric_limits<value_type>::max()));
-          // interpolated = std::min(interpolated,
-          // double(std::numeric_limits<value_type>::max()));
+          interpolated = std::min(
+              interpolated, double(std::numeric_limits<value_type>::max()));
         }
 
         curve[x] = interpolated;
       }
     }
 
     return curve;
   }
 };
 
 } // namespace rawspeed
