commit 5b4c2fce7262b2bec00fa679e472559ab268d0c7
Author: Reini Urban <rurban@cpan.org>
Date:   Mon Oct 30 14:07:39 2023 +0100

    decode_r11: fix heap-overflow by 1
    
    Fixes ossfuzz 63483

diff --git a/src/decode.c b/src/decode.c
index 6d58f1f7..a843214f 100644
--- a/src/decode.c
+++ b/src/decode.c
@@ -5636,40 +5636,41 @@ int
 dwg_decode_unknown_rest (Bit_Chain *restrict dat, Dwg_Object *restrict obj)
 {
   // check in which object stream we are: common, object, text or handles?
   // for now we only need the text
 
   // bitsize does not include the handles size
   int num_bytes;
   size_t pos = bit_position (dat);
   long num_bits;
   if (pos < obj->bitsize) // data or text
     num_bits = (obj->bitsize - pos) & ULONG_MAX;
   else // or handles
     num_bits = ((8 * obj->size) - pos) & ULONG_MAX;
   if (num_bits < 0)
     return DWG_ERR_VALUEOUTOFBOUNDS;
 
   obj->num_unknown_rest = (BITCODE_RL)num_bits;
   num_bytes = num_bits / 8;
   if (num_bits % 8)
     num_bytes++;
 
   obj->unknown_rest = bit_read_bits (dat, num_bits);
   if (!obj->unknown_rest)
     {
       bit_set_position (dat, pos);
+      obj->num_unknown_rest = 0;
       return DWG_ERR_VALUEOUTOFBOUNDS;
     }
   // [num_bits (commonsize, hdlpos, strsize) num_bytes TF]
   LOG_TRACE ("unknown_rest [%ld (%" PRIuSIZE ",%ld,%d) %d TF]: ", num_bits,
              obj->common_size, (long)(obj->bitsize - obj->common_size),
              (int)obj->stringstream_size, num_bytes);
   LOG_TRACE_TF (obj->unknown_rest, num_bytes);
   LOG_TRACE ("\n");
   bit_set_position (dat, pos);
   return 0;
 }
 
 /* We need the full block name, not from BLOCK_HEADER, but the BLOCK entity.
    unicode is allocated as utf-8.
  */
diff --git a/src/decode_r11.c b/src/decode_r11.c
index b62b3f95..409cac04 100644
--- a/src/decode_r11.c
+++ b/src/decode_r11.c
@@ -221,361 +221,361 @@ static int
 decode_preR13_section (Dwg_Section_Type_r11 id, Bit_Chain *restrict dat,
                        Dwg_Data *restrict dwg)
 {
   Dwg_Section *tbl = &dwg->header.section[id];
   Bit_Chain *hdl_dat = dat;
   Dwg_Object *obj;
   int error = 0;
   BITCODE_RLd i;
   BITCODE_RL vcount;
   BITCODE_RL num = dwg->num_objects;
   size_t pos = tbl->address;
   size_t oldpos;
   size_t real_start = pos;
   BITCODE_TF name;
   BITCODE_RSd used = -1;
   BITCODE_RC flag;
 
   LOG_TRACE ("\ncontents table %-8s [%2d]: size:%-4u num:%-3ld (" FORMAT_RLL
              "-" FORMAT_RLL ")\n\n",
              tbl->name, id, tbl->size, (long)tbl->number, tbl->address,
              tbl->address + (tbl->number * tbl->size))
 
   // with sentinel in case of R11
   SINCE (R_11)
   {
     real_start -= 16; // the sentinel size
   }
 
   // report unknown data before table
   if (tbl->address && dat->byte != real_start)
     {
       LOG_WARN ("\n@0x%zx => start 0x%zx", dat->byte, real_start);
       if (dat->byte < real_start)
         {
           UNKNOWN_UNTIL (real_start);
         }
     }
 
   SINCE (R_11)
   {
 #define DECODE_PRER13_SENTINEL(ID)                                            \
   error |= decode_preR13_sentinel (ID, #ID, dat, dwg);                        \
   if (error >= DWG_ERR_SECTIONNOTFOUND)                                       \
   return error
 
     switch (id)
       {
 #define CASE_SENTINEL_BEGIN(id)                                               \
   case SECTION_##id:                                                          \
     DECODE_PRER13_SENTINEL (DWG_SENTINEL_R11_##id##_BEGIN);                   \
     break
 
         CASE_SENTINEL_BEGIN (BLOCK);
         CASE_SENTINEL_BEGIN (LAYER);
         CASE_SENTINEL_BEGIN (STYLE);
         CASE_SENTINEL_BEGIN (LTYPE);
         CASE_SENTINEL_BEGIN (VIEW);
         CASE_SENTINEL_BEGIN (UCS);
         CASE_SENTINEL_BEGIN (VPORT);
         CASE_SENTINEL_BEGIN (APPID);
         CASE_SENTINEL_BEGIN (DIMSTYLE);
         CASE_SENTINEL_BEGIN (VX);
 #undef CASE_SENTINEL_BEGIN
 
       default:
         LOG_ERROR ("Internal error: Invalid section id %d", (int)id);
         return DWG_ERR_INTERNALERROR;
       }
   }
 
   oldpos = dat->byte;
   if (tbl->address)
     dat->byte = tbl->address;
   dat->bit = 0;
   if ((size_t)(tbl->number * tbl->size) > dat->size - dat->byte)
     {
       LOG_ERROR ("Overlarge table num_entries %ld or size %ld for %-8s [%2d]",
                  (long)tbl->number, (long)tbl->size, tbl->name, id);
       dat->byte = oldpos;
       return DWG_ERR_INVALIDDWG;
     }
   tbl->objid_r11 = num;
   if (dwg->num_alloced_objects < dwg->num_objects + tbl->number)
     {
       dwg->num_alloced_objects = dwg->num_objects + tbl->number;
       if (dwg->num_alloced_objects > dwg->num_objects + MAX_NUM)
         {
           LOG_ERROR ("Invalid num_alloced_objects " FORMAT_BL,
                      dwg->num_alloced_objects);
           return DWG_ERR_INVALIDDWG;
         }
       dwg->object = (Dwg_Object *)realloc (
           dwg->object, dwg->num_alloced_objects * sizeof (Dwg_Object));
       dwg->dirty_refs = 1;
     }
 
 #define SET_CONTROL(token)                                                    \
   Dwg_Object *ctrl;                                                           \
   Dwg_Object_##token##_CONTROL *_ctrl = NULL;                                 \
   ctrl = dwg_get_first_object (dwg, DWG_TYPE_##token##_CONTROL);              \
   if (ctrl)                                                                   \
     {                                                                         \
       _ctrl = ctrl->tio.object->tio.token##_CONTROL;                          \
       ctrl->size = tbl->size;                                                 \
       if (tbl->number > _ctrl->num_entries)                                   \
         {                                                                     \
           if (_ctrl->entries)                                                 \
             {                                                                 \
               _ctrl->entries = (BITCODE_H *)realloc (                         \
                   _ctrl->entries, tbl->number * sizeof (BITCODE_H));          \
               memset (&_ctrl->entries[_ctrl->num_entries], 0,                 \
                       (tbl->number - _ctrl->num_entries)                      \
                           * sizeof (BITCODE_H));                              \
             }                                                                 \
           else                                                                \
             _ctrl->entries                                                    \
                 = (BITCODE_H *)calloc (tbl->number, sizeof (BITCODE_H));      \
           _ctrl->num_entries = tbl->number;                                   \
           LOG_TRACE (#token "_CONTROL.num_entries = %u\n", tbl->number);      \
         }                                                                     \
     }
 
 #define NEW_OBJECT                                                            \
   dwg_add_object (dwg);                                                       \
   if (dat->byte > dat->size)                                                  \
     return DWG_ERR_INVALIDDWG;                                                \
   obj = &dwg->object[num++];                                                  \
   obj->address = dat->byte;                                                   \
   obj->size = tbl->size;
 
 #define ADD_CTRL_ENTRY                                                        \
   if (_ctrl)                                                                  \
     {                                                                         \
       BITCODE_H ref;                                                          \
       if (!obj->handle.value)                                                 \
         obj->handle.value = obj->index;                                       \
       ref = _ctrl->entries[i]                                                 \
           = dwg_add_handleref (dwg, 2, obj->handle.value, obj);               \
       ref->r11_idx = i;                                                       \
       LOG_TRACE ("%s.entries[%u] = " FORMAT_REF " [H 0]\n", ctrl->name, i,    \
                  ARGS_REF (ref));                                             \
     }                                                                         \
   else                                                                        \
     return error | DWG_ERR_INVALIDDWG
 
 #define CHK_ENDPOS                                                            \
   SINCE (R_11)                                                                \
   {                                                                           \
     if (!bit_check_CRC (dat, obj->address, 0xC0C1))                           \
       error |= DWG_ERR_WRONGCRC;                                              \
   }                                                                           \
   pos = tbl->address + (long)((i + 1) * tbl->size);                           \
   if (pos != dat->byte)                                                       \
     {                                                                         \
       LOG_ERROR ("offset %ld", (long)(pos - dat->byte));                      \
       if (pos > dat->byte)                                                    \
         {                                                                     \
           BITCODE_RL offset = (BITCODE_RL)(pos - dat->byte);                  \
           obj->num_unknown_rest = 8 * offset;                                 \
-          obj->unknown_rest = (BITCODE_TF)calloc (offset, 1);                 \
+          obj->unknown_rest = (BITCODE_TF)calloc (offset + 1, 1);             \
           if (obj->unknown_rest)                                              \
             {                                                                 \
               memcpy (obj->unknown_rest, &dat->chain[dat->byte], offset);     \
               LOG_TRACE_TF (obj->unknown_rest, offset);                       \
             }                                                                 \
           else                                                                \
             {                                                                 \
               LOG_ERROR ("Out of memory");                                    \
               obj->num_unknown_rest = 0;                                      \
             }                                                                 \
         }                                                                     \
       /* In the table header the size OR number can be wrong. */              \
       /* Here we catch the wrong number. */                                   \
       if (tbl->number > 0 && tbl->size < 33)                                  \
         return DWG_ERR_SECTIONNOTFOUND;                                       \
     }                                                                         \
   LOG_TRACE ("\n")                                                            \
   dat->byte = pos
 
   switch (id)
     {
     case SECTION_BLOCK:
       {
         SET_CONTROL (BLOCK);
         for (i = 0; i < tbl->number; i++)
           {
             NEW_OBJECT;
             error |= dwg_decode_BLOCK_HEADER (dat, obj);
             // PUSH_HV (_hdr, num_owned, entities, ref);
             ADD_CTRL_ENTRY;
             CHK_ENDPOS;
           }
       }
       break;
 
     case SECTION_LAYER:
       {
         SET_CONTROL (LAYER);
         for (i = 0; i < tbl->number; i++)
           {
             NEW_OBJECT;
             error |= dwg_decode_LAYER (dat, obj);
             ADD_CTRL_ENTRY;
             CHK_ENDPOS;
           }
       }
       break;
 
     // was a text STYLE table, became a STYLE object
     case SECTION_STYLE:
       {
         SET_CONTROL (STYLE);
         for (i = 0; i < tbl->number; i++)
           {
             NEW_OBJECT;
             error |= dwg_decode_STYLE (dat, obj);
             ADD_CTRL_ENTRY;
             CHK_ENDPOS;
           }
       }
       break;
 
     case SECTION_LTYPE:
       {
         SET_CONTROL (LTYPE);
         for (i = 0; i < tbl->number; i++)
           {
             NEW_OBJECT;
             error |= dwg_decode_LTYPE (dat, obj);
             ADD_CTRL_ENTRY;
             if (strEQc (tbl->name, "CONTINUOUS"))
               dwg->header_vars.LTYPE_CONTINUOUS = _ctrl->entries[i];
             CHK_ENDPOS;
           }
       }
       break;
 
     case SECTION_VIEW:
       {
         SET_CONTROL (VIEW);
         for (i = 0; i < tbl->number; i++)
           {
             NEW_OBJECT;
             error |= dwg_decode_VIEW (dat, obj);
             ADD_CTRL_ENTRY;
             CHK_ENDPOS;
           }
       }
       break;
 
     // SINCE R_11
     case SECTION_UCS:
       {
         SET_CONTROL (UCS);
         for (i = 0; i < tbl->number; i++)
           {
             NEW_OBJECT;
             error |= dwg_decode_UCS (dat, obj);
             ADD_CTRL_ENTRY;
             CHK_ENDPOS;
           }
       }
       break;
 
     // SINCE R_11
     case SECTION_VPORT:
       {
         SET_CONTROL (VPORT);
         for (i = 0; i < tbl->number; i++)
           {
             NEW_OBJECT;
             error |= dwg_decode_VPORT (dat, obj);
             ADD_CTRL_ENTRY;
             CHK_ENDPOS;
           }
       }
       break;
 
     // SINCE R_11
     case SECTION_APPID:
       {
         SET_CONTROL (APPID);
         for (i = 0; i < tbl->number; i++)
           {
             NEW_OBJECT;
             error |= dwg_decode_APPID (dat, obj);
             ADD_CTRL_ENTRY;
             CHK_ENDPOS;
           }
       }
       break;
 
     // SINCE R_11
     case SECTION_DIMSTYLE:
       {
         SET_CONTROL (DIMSTYLE);
         for (i = 0; i < tbl->number; i++)
           {
             NEW_OBJECT;
             error |= dwg_decode_DIMSTYLE (dat, obj);
             ADD_CTRL_ENTRY;
             CHK_ENDPOS;
           }
       }
       break;
 
     // SINCE R_11
     case SECTION_VX:
       {
         SET_CONTROL (VX);
         for (i = 0; i < tbl->number; i++)
           {
             NEW_OBJECT;
             error |= dwg_decode_VX_TABLE_RECORD (dat, obj);
             ADD_CTRL_ENTRY;
             CHK_ENDPOS;
           }
       }
       break;
 
     case SECTION_HEADER_R11:
     default:
       LOG_ERROR ("Invalid table id %d", id);
       tbl->number = 0;
       break;
     }
 
   if (tbl->address && tbl->number && tbl->size)
     dat->byte = tbl->address + (tbl->number * tbl->size);
   else
     dat->byte = oldpos;
 
   SINCE (R_11)
   {
     switch (id)
       {
 #define CASE_SENTINEL_END(id)                                                 \
   case SECTION_##id:                                                          \
     DECODE_PRER13_SENTINEL (DWG_SENTINEL_R11_##id##_END);                     \
     break
 
         CASE_SENTINEL_END (BLOCK);
         CASE_SENTINEL_END (LAYER);
         CASE_SENTINEL_END (STYLE);
         CASE_SENTINEL_END (LTYPE);
         CASE_SENTINEL_END (VIEW);
         CASE_SENTINEL_END (UCS);
         CASE_SENTINEL_END (VPORT);
         CASE_SENTINEL_END (APPID);
         CASE_SENTINEL_END (DIMSTYLE);
         CASE_SENTINEL_END (VX);
       default:
         LOG_ERROR ("Internal error: Invalid section id %d", (int)id);
         return DWG_ERR_INTERNALERROR;
       }
   }
 #undef DECODE_PRER13_SENTINEL
 #undef CASE_SENTINEL_END
 
   return error;
 }
