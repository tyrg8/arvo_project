commit 8586bb47193aebecab2f84ff531beaaeaa7bf93c
Author: Albert Astals Cid <aacid@kde.org>
Date:   Sun Oct 30 23:59:55 2022 +0100

    raw: Don't seek back if we were asked to read too much
    
    Otherwise we will return false when LibRaw::derror
    calls for eof() when it is actually that we have reached eof

diff --git a/src/imageformats/raw.cpp b/src/imageformats/raw.cpp
index 261e89c..fba2d8c 100644
--- a/src/imageformats/raw.cpp
+++ b/src/imageformats/raw.cpp
@@ -99,90 +99,87 @@ class LibRaw_QIODevice : public LibRaw_abstract_datastream
 {
 public:
     explicit LibRaw_QIODevice(QIODevice *device)
     {
         m_device = device;
     }
     virtual ~LibRaw_QIODevice() override
     {
     }
     virtual int valid() override
     {
         return m_device != nullptr;
     }
     virtual int read(void *ptr, size_t sz, size_t nmemb) override
     {
         auto read = m_device->read(reinterpret_cast<char *>(ptr), sz * nmemb);
         if (read < 1) {
             return 0;
         }
-        if (auto o = read % sz) {
-            seek(-(sz - o), SEEK_CUR);
-        }
         return read / sz;
     }
     virtual int eof() override
     {
         return m_device->atEnd() ? 1 : 0;
     }
     virtual int seek(INT64 o, int whence) override
     {
         auto pos = o;
         auto size = m_device->size();
         if (whence == SEEK_CUR) {
             pos = m_device->pos() + o;
         }
         if (whence == SEEK_END) {
             pos = size + o;
         }
         if (pos < 0 || pos > size || m_device->isSequential()) {
             return -1;
         }
         return m_device->seek(pos) ? 0 : -1;
     }
     virtual INT64 tell() override
     {
         return m_device->pos();
     }
     virtual INT64 size() override
     {
         return m_device->size();
     }
     virtual char *gets(char *s, int sz) override
     {
         if (m_device->readLine(s, sz) > 0) {
             return s;
         }
         return nullptr;
     }
     virtual int scanf_one(const char *fmt, void *val) override
     {
         QByteArray ba;
         for (int xcnt = 0; xcnt < 24 && !m_device->atEnd(); ++xcnt) {
             char c;
             if (!m_device->getChar(&c)) {
                 return EOF;
             }
             if (ba.isEmpty() && (c == ' ' || c == '\t')) {
                 continue;
             }
             if (c == '\0' || c == ' ' || c == '\t' || c == '\n') {
                 break;
             }
             ba.append(c);
         }
         return raw_scanf_one(ba, fmt, val);
     }
     virtual int get_char() override
     {
         unsigned char c;
         if (!m_device->getChar(reinterpret_cast<char *>(&c))) {
             return EOF;
         }
         return int(c);
     }
 #if (LIBRAW_VERSION < LIBRAW_MAKE_VERSION(0, 21, 0)) || defined(LIBRAW_OLD_VIDEO_SUPPORT)
     virtual void *make_jas_stream() override
     {
         return nullptr;
     }
 #endif
