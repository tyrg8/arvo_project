commit 900ade653f3c58a904b428317a3c632623b0120d
Author: Victor M. Alvarez <vmalvarez@virustotal.com>
Date:   Mon Oct 30 09:49:47 2017 +0100

    Fix read heap buffer overflow in PE module.
    
    Credit to OSS-Fuzz for finding this bug.

diff --git a/libyara/modules/pe.c b/libyara/modules/pe.c
index ed325867..15385cd6 100644
--- a/libyara/modules/pe.c
+++ b/libyara/modules/pe.c
@@ -951,110 +951,115 @@ IMPORTED_DLL* pe_parse_imports(
 IMPORT_EXPORT_FUNCTION* pe_parse_exports(
     PE* pe)
 {
   IMPORT_EXPORT_FUNCTION* head = NULL;
   IMPORT_EXPORT_FUNCTION* tail = NULL;
 
   PIMAGE_DATA_DIRECTORY directory;
   PIMAGE_EXPORT_DIRECTORY exports;
 
   DWORD* names;
   WORD* ordinals;
 
   int64_t offset;
   uint32_t i;
   size_t remaining;
 
   int num_exports = 0;
 
   // If not a PE file, return UNDEFINED
 
   if (pe == NULL)
     return NULL;
 
   directory = pe_get_directory_entry(
       pe, IMAGE_DIRECTORY_ENTRY_EXPORT);
 
   if (yr_le32toh(directory->VirtualAddress) == 0)
     return NULL;
 
   offset = pe_rva_to_offset(pe, yr_le32toh(directory->VirtualAddress));
 
   if (offset < 0)
     return NULL;
 
   exports = (PIMAGE_EXPORT_DIRECTORY) (pe->data + offset);
 
   if (!struct_fits_in_pe(pe, exports, IMAGE_EXPORT_DIRECTORY))
     return NULL;
 
   offset = pe_rva_to_offset(pe, yr_le32toh(exports->AddressOfNames));
 
   if (offset < 0)
     return NULL;
 
   if (yr_le32toh(exports->NumberOfFunctions) > MAX_PE_EXPORTS ||
       yr_le32toh(exports->NumberOfFunctions) * sizeof(DWORD) > pe->data_size - offset)
     return NULL;
 
   names = (DWORD*)(pe->data + offset);
 
   offset = pe_rva_to_offset(pe, yr_le32toh(exports->AddressOfNameOrdinals));
 
   if (offset < 0)
     return NULL;
 
   ordinals = (WORD*)(pe->data + offset);
 
   // Walk the number of functions, not the number of names as each exported
   // symbol has an ordinal value, but names are optional.
 
   for (i = 0; i < yr_le32toh(exports->NumberOfFunctions); i++)
   {
     IMPORT_EXPORT_FUNCTION* exported_func;
-
     uint16_t ordinal = 0;
     char* name;
 
+    if (available_space(pe, names + i) < sizeof(DWORD) ||
+        available_space(pe, ordinals + i) < sizeof(WORD))
+    {
+      break;
+    }
+
     offset = pe_rva_to_offset(pe, names[i]);
 
     if (offset < 0)
       continue;
 
     remaining = pe->data_size - (size_t) offset;
     name = yr_strndup((char*) (pe->data + offset), remaining);
 
     // Get the corresponding ordinal. Note that we are not subtracting the
     // ordinal base here as we don't intend to index into the export address
     // table.
     ordinal = yr_le16toh(ordinals[i]);
 
     // Now add it to the list...
     exported_func = (IMPORT_EXPORT_FUNCTION*)
         yr_calloc(1, sizeof(IMPORT_EXPORT_FUNCTION));
 
     if (exported_func == NULL)
     {
       yr_free(name);
       continue;
     }
 
     exported_func->name = name;
     exported_func->ordinal = ordinal;
     exported_func->next = NULL;
 
     if (head == NULL)
       head = exported_func;
 
     if (tail != NULL)
       tail->next = exported_func;
 
     tail = exported_func;
     num_exports++;
   }
 
   set_integer(num_exports, pe->object, "number_of_exports");
   return head;
 }
 
 
 #if defined(HAVE_LIBCRYPTO)
