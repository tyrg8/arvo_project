commit 3479c64b9044c4dfdcb914ad1296216b235696ec
Author: Yash Patil <yash.patil@ittiam.com>
Date:   Fri Sep 1 16:02:01 2023 +0530

    Fix for Global-buffer-overflow READ 2 in ixheaacd_res_ctns_apply
    
    These changes handle the Global-buffer-overflow
    runtime error reported because tns data filter was getting initialised
    inappropriately and was returning an error which was not propagated up.
    
    Bug: ossFuzz:61816
    Test: poc in bug

diff --git a/decoder/ixheaacd_mps_bitdec.c b/decoder/ixheaacd_mps_bitdec.c
index d4c4bc0..756f8e9 100644
--- a/decoder/ixheaacd_mps_bitdec.c
+++ b/decoder/ixheaacd_mps_bitdec.c
@@ -542,371 +542,435 @@ static WORD32 ixheaacd_decode_icc_diff_code(ia_bit_buf_struct *it_bit_buff) {
   return value;
 }
 
-static VOID ixheaacd_parse_residual_data(ia_heaac_mps_state_struct *pstr_mps_state) {
+static IA_ERRORCODE ixheaacd_parse_residual_data(ia_heaac_mps_state_struct *pstr_mps_state) {
   WORD32 ich, ch;
   WORD32 rfpsf;
   WORD32 ps;
   WORD32 pb;
 
   ia_mps_dec_residual_aac_tables_struct *aac_tables_ptr =
       pstr_mps_state->ia_mps_dec_mps_table.aac_tab;
   WORD32 i;
 
   ia_mps_dec_spatial_bs_frame_struct *frame = pstr_mps_state->bs_frame;
   ia_mps_spatial_bs_config_struct *config = &(pstr_mps_state->bs_config);
 
   WORD32 num_ott_boxes = pstr_mps_state->num_ott_boxes;
   WORD32 num_parameter_sets = pstr_mps_state->num_parameter_sets;
   WORD32 residual_frames_per_spatial_frame = pstr_mps_state->residual_frames_per_spatial_frame;
   WORD32 upd_qmf = pstr_mps_state->upd_qmf;
 
   WORD32 loop_counter = num_ott_boxes + pstr_mps_state->num_ttt_boxes;
   WORD32 *p_mdct_res;
 
   WORD32 *p_res_mdct = pstr_mps_state->array_struct->res_mdct;
   ia_bit_buf_struct *mps_bit_buf = pstr_mps_state->ptr_mps_bit_buff;
+  WORD16 error_code = IA_NO_ERROR;
 
   for (ich = 0; ich < loop_counter; ich++) {
     ch = ich;
 
     p_mdct_res = p_res_mdct;
     if (config->bs_residual_bands[ch] > 0) {
       if (ch < num_ott_boxes) {
         for (ps = 0; ps < num_parameter_sets; ps++) {
           frame->res_data.bs_icc_diff_present[ch][ps] = ixheaacd_read_bits_buf(mps_bit_buf, 1);
           if (frame->res_data.bs_icc_diff_present[ch][ps]) {
             for (pb = 0; pb < config->bs_residual_bands[ch]; pb++) {
               frame->res_data.bs_icc_diff[ch][ps][pb] =
                   ixheaacd_decode_icc_diff_code(mps_bit_buf);
               frame->ott_icc_diff_idx[ch][ps][pb] = frame->res_data.bs_icc_diff[ch][ps][pb];
             }
           }
         }
       }
       p_mdct_res = p_res_mdct;
       for (rfpsf = 0; rfpsf < residual_frames_per_spatial_frame; rfpsf++) {
-        ixheaacd_res_read_ics(mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info, 1,
-                              aac_tables_ptr, pstr_mps_state->tot_sf_bands_ls);
+        error_code =
+            ixheaacd_res_read_ics(mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info, 1,
+                                  aac_tables_ptr, pstr_mps_state->tot_sf_bands_ls);
+        if (error_code) {
+          if (pstr_mps_state->ec_flag) {
+            pstr_mps_state->frame_ok = 0;
+          } else
+            return error_code;
+        }
         if (1 == pstr_mps_state->p_aac_decoder_channel_info[0]->tns_data.tns_data_present)
           ixheaacd_res_ctns_apply(
               pstr_mps_state->p_aac_decoder_channel_info[0],
               pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.max_sf_bands,
               aac_tables_ptr);
         pstr_mps_state->res_block_type[ch][rfpsf] =
             pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.window_sequence;
         for (i = 0; i < AAC_FRAME_LENGTH; i++) {
           *p_mdct_res++ =
               (pstr_mps_state->p_aac_decoder_channel_info[0]->p_spectral_coefficient[i]);
         }
 
         if ((pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.window_sequence ==
              EIGHT_SHORT_SEQUENCE) &&
             ((upd_qmf == UPD_QMF_18) || (upd_qmf == UPD_QMF_24) || (upd_qmf == UPD_QMF_30))) {
-          ixheaacd_res_read_ics(mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info, 1,
-                                aac_tables_ptr, pstr_mps_state->tot_sf_bands_ls);
+          error_code =
+              ixheaacd_res_read_ics(mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info, 1,
+                                    aac_tables_ptr, pstr_mps_state->tot_sf_bands_ls);
+          if (error_code) {
+            if (pstr_mps_state->ec_flag) {
+              pstr_mps_state->frame_ok = 0;
+            } else
+              return error_code;
+          }
           if (1 == pstr_mps_state->p_aac_decoder_channel_info[0]->tns_data.tns_data_present)
             ixheaacd_res_ctns_apply(
                 pstr_mps_state->p_aac_decoder_channel_info[0],
                 pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.max_sf_bands,
                 aac_tables_ptr);
           for (i = 0; i < AAC_FRAME_LENGTH; i++) {
             *p_mdct_res++ =
                 (pstr_mps_state->p_aac_decoder_channel_info[0]->p_spectral_coefficient[i]);
           }
         }
       }
     }
 
     p_res_mdct += RFX2XMDCTCOEF;
   }
+  return IA_NO_ERROR;
 }
 
 static IA_ERRORCODE ixheaacd_parse_extension_frame(ia_heaac_mps_state_struct *pstr_mps_state) {
   WORD32 i, fr, gr, offset, ch;
   WORD32 ext_num, sac_ext_type, sac_ext_len, tmp, bits_read, n_fill_bits, temp;
   WORD32 channel_grouping[MAX_INPUT_CHANNELS_MPS];
 
   ia_mps_dec_spatial_bs_frame_struct *frame = pstr_mps_state->bs_frame;
   ia_mps_spatial_bs_config_struct *p_bs_config = &pstr_mps_state->bs_config;
 
   ia_mps_dec_residual_aac_tables_struct *aac_tables_ptr =
       pstr_mps_state->ia_mps_dec_mps_table.aac_tab;
 
   WORD32 arbdmx_upd_qmf = pstr_mps_state->arbdmx_upd_qmf;
   WORD32 num_ott_boxes = pstr_mps_state->num_ott_boxes;
   WORD32 num_input_channels = pstr_mps_state->num_input_channels;
   WORD32 num_ttt_boxes = pstr_mps_state->num_ttt_boxes;
   WORD32 arbdmx_frames_per_spatial_frame = pstr_mps_state->arbdmx_frames_per_spatial_frame;
   WORD32 *p_res_mdct, *p_mdct_res;
 
   WORD32 sfidx;
   VOID *free_scratch = pstr_mps_state->mps_scratch_mem_v;
   ia_mps_dec_residual_sfband_info_struct *p_sfband_info_tab = &pstr_mps_state->sfband_info_tab;
   ia_bit_buf_struct *mps_bit_buf = pstr_mps_state->ptr_mps_bit_buff;
   IA_ERRORCODE error_code = IA_NO_ERROR;
 
   for (ch = 0; ch < 2; ch++) {
     pstr_mps_state->p_aac_decoder_channel_info[ch] = free_scratch;
     free_scratch = (WORD8 *)free_scratch + sizeof(ia_mps_dec_residual_channel_info_struct);
     pstr_mps_state->p_aac_decoder_dynamic_data_init[ch] = free_scratch;
     free_scratch = (WORD8 *)free_scratch + sizeof(ia_mps_dec_residual_dynamic_data_struct);
     pstr_mps_state->p_aac_decoder_channel_info[ch]->p_scale_factor =
         pstr_mps_state->p_aac_decoder_dynamic_data_init[ch]->a_scale_factor;
     pstr_mps_state->p_aac_decoder_channel_info[ch]->p_code_book =
         pstr_mps_state->p_aac_decoder_dynamic_data_init[ch]->a_code_book;
     pstr_mps_state->p_aac_decoder_channel_info[ch]->p_spectral_coefficient = free_scratch;
     free_scratch = (WORD8 *)free_scratch + 4096;
     pstr_mps_state->p_aac_decoder_channel_info[ch]->p_tns_scratch = free_scratch;
     free_scratch = (WORD8 *)free_scratch + 4096;
     pstr_mps_state->p_aac_decoder_channel_info[ch]->ics_info.frame_length = AAC_FRAME_LENGTH;
     pstr_mps_state->p_aac_decoder_channel_info[ch]->common_window = 0;
   }
   if (pstr_mps_state->arbitrary_downmix == 2)
     sfidx = p_bs_config->bs_arbitrary_downmix_residual_sampling_freq_index;
   else
     sfidx = p_bs_config->bs_residual_sampling_freq_index;
   {
     WORD16 *psfb_idx[2];
     const WORD8 *psfb_width[2];
     WORD width_idx;
     WORD32 j;
 
     pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.sampling_rate_index = sfidx;
     psfb_idx[0] = p_sfband_info_tab->sfb_long_idx;
     psfb_idx[1] = p_sfband_info_tab->sfb_short_idx;
     psfb_width[0] = aac_tables_ptr->scale_factor_bands_long[sfidx];
     psfb_width[1] = aac_tables_ptr->scale_factor_bands_short[sfidx];
 
     for (j = 1; j >= 0; j--) {
       const WORD8 *ptr_w = psfb_width[j];
       WORD16 *ptr_i = psfb_idx[j];
       width_idx = 0;
       *ptr_i++ = width_idx;
       do {
         width_idx += (*ptr_w++);
         *ptr_i++ = width_idx;
       } while (*ptr_w != -1);
 
       pstr_mps_state->tot_sf_bands_ls[j] = (WORD8)(ptr_w - psfb_width[j]);
     }
 
     {
       aac_tables_ptr->sfb_index_long = p_sfband_info_tab->sfb_long_idx;
       aac_tables_ptr->sfb_index_short = p_sfband_info_tab->sfb_short_idx;
       aac_tables_ptr->sfb_index_long_width = (WORD8 *)psfb_width[0];
       aac_tables_ptr->sfb_index_short_width = (WORD8 *)psfb_width[1];
     }
   }
 
   for (ext_num = 0; ext_num < p_bs_config->sac_ext_cnt; ext_num++) {
     sac_ext_type = p_bs_config->bs_sac_ext_type[ext_num];
 
     if (sac_ext_type < 12) {
       sac_ext_len = ixheaacd_read_bits_buf(mps_bit_buf, 8);
       if (sac_ext_len == 255) {
         sac_ext_len += ixheaacd_read_bits_buf(mps_bit_buf, 16);
       }
 
       tmp = (WORD32)(((mps_bit_buf->ptr_read_next - mps_bit_buf->ptr_bit_buf_base + 1) << 3) -
                      (mps_bit_buf->bit_pos + 1));
 
       switch (sac_ext_type) {
         case EXT_TYPE_0:
-          ixheaacd_parse_residual_data(pstr_mps_state);
+          error_code = ixheaacd_parse_residual_data(pstr_mps_state);
+          if (error_code) {
+            if (pstr_mps_state->ec_flag) {
+              pstr_mps_state->frame_ok = 0;
+            } else
+              return error_code;
+          }
           break;
 
         case EXT_TYPE_1:
           switch (num_input_channels) {
             case IN_CH_1:
               channel_grouping[0] = 1;
               break;
             case IN_CH_2:
               channel_grouping[0] = 2;
               break;
             case IN_CH_6:
               channel_grouping[0] = 2;
               channel_grouping[1] = 2;
               channel_grouping[2] = 2;
               break;
             default:
               return IA_XHEAAC_MPS_DEC_EXE_FATAL_INVALID_INPUT_CHANNEL;
               break;
           }
 
           offset = num_ott_boxes + num_ttt_boxes;
 
           p_res_mdct = pstr_mps_state->array_struct->res_mdct + offset * RFX2XMDCTCOEF;
 
           for (ch = 0, gr = 0; ch < num_input_channels; ch += channel_grouping[gr++]) {
             p_mdct_res = p_res_mdct;
 
             temp = ixheaacd_read_bits_buf(mps_bit_buf, 2);
             frame->bs_arbitrary_downmix_residual_abs[ch] = (temp >> 1) & ONE_BIT_MASK;
             frame->bs_arbitrary_downmix_residual_alpha_update_set[ch] = temp & ONE_BIT_MASK;
 
             if (channel_grouping[gr] == 1) {
               for (fr = 0; fr < arbdmx_frames_per_spatial_frame; fr++) {
-                ixheaacd_res_read_ics(mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info, 1,
-                                      aac_tables_ptr, pstr_mps_state->tot_sf_bands_ls);
+                error_code =
+                    ixheaacd_res_read_ics(mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info,
+                                          1, aac_tables_ptr, pstr_mps_state->tot_sf_bands_ls);
+                if (error_code) {
+                  if (pstr_mps_state->ec_flag) {
+                    pstr_mps_state->frame_ok = 0;
+                  } else
+                    return error_code;
+                }
                 if (1 == pstr_mps_state->p_aac_decoder_channel_info[0]->tns_data.tns_data_present)
                   ixheaacd_res_ctns_apply(
                       pstr_mps_state->p_aac_decoder_channel_info[0],
                       pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.max_sf_bands,
                       aac_tables_ptr);
 
                 pstr_mps_state->res_block_type[offset + ch][fr] =
                     pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.window_sequence;
                 for (i = 0; i < AAC_FRAME_LENGTH; i++) {
                   *p_mdct_res++ =
                       (pstr_mps_state->p_aac_decoder_channel_info[0]->p_spectral_coefficient[i]);
                 }
 
                 if ((pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.window_sequence ==
                      EIGHT_SHORT_SEQUENCE) &&
                     ((arbdmx_upd_qmf == UPD_QMF_18) || (arbdmx_upd_qmf == UPD_QMF_24) ||
                      (arbdmx_upd_qmf == UPD_QMF_30))) {
-                  ixheaacd_res_read_ics(mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info,
-                                        1, aac_tables_ptr, pstr_mps_state->tot_sf_bands_ls);
+                  error_code = ixheaacd_res_read_ics(
+                      mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info, 1, aac_tables_ptr,
+                      pstr_mps_state->tot_sf_bands_ls);
+                  if (error_code) {
+                    if (pstr_mps_state->ec_flag) {
+                      pstr_mps_state->frame_ok = 0;
+                    } else
+                      return error_code;
+                  }
                   if (1 ==
                       pstr_mps_state->p_aac_decoder_channel_info[0]->tns_data.tns_data_present)
                     ixheaacd_res_ctns_apply(
                         pstr_mps_state->p_aac_decoder_channel_info[0],
                         pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.max_sf_bands,
                         aac_tables_ptr);
                   for (i = 0; i < AAC_FRAME_LENGTH; i++) {
                     *p_mdct_res++ = (pstr_mps_state->p_aac_decoder_channel_info[0]
                                          ->p_spectral_coefficient[i]);
                   }
                 }
               }
               p_res_mdct += RFX2XMDCTCOEF;
             } else {
               frame->bs_arbitrary_downmix_residual_abs[ch + 1] =
                   frame->bs_arbitrary_downmix_residual_abs[ch];
               frame->bs_arbitrary_downmix_residual_alpha_update_set[ch + 1] =
                   frame->bs_arbitrary_downmix_residual_alpha_update_set[ch];
 
               for (fr = 0; fr < arbdmx_frames_per_spatial_frame; fr++) {
                 WORD32 *res_mdct_1 = p_mdct_res + RFX2XMDCTCOEF;
                 WORD32 temp, win1, win2;
                 temp = ixheaacd_read_bits_buf(mps_bit_buf, 4);
                 temp = ixheaacd_read_bits_buf(mps_bit_buf, 1);
 
                 if (temp != 0) {
                   return IA_XHEAAC_MPS_DEC_EXE_FATAL_NONZERO_BIT;
                 }
 
-                ixheaacd_res_read_ics(mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info, 1,
-                                      aac_tables_ptr, pstr_mps_state->tot_sf_bands_ls);
+                error_code =
+                    ixheaacd_res_read_ics(mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info,
+                                          1, aac_tables_ptr, pstr_mps_state->tot_sf_bands_ls);
+                if (error_code) {
+                  if (pstr_mps_state->ec_flag) {
+                    pstr_mps_state->frame_ok = 0;
+                  } else
+                    return error_code;
+                }
 
                 if (1 == pstr_mps_state->p_aac_decoder_channel_info[0]->tns_data.tns_data_present)
                   ixheaacd_res_ctns_apply(
                       pstr_mps_state->p_aac_decoder_channel_info[0],
                       pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.max_sf_bands,
                       aac_tables_ptr);
                 win1 = pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.window_sequence;
                 pstr_mps_state->res_block_type[offset + ch][fr] =
                     pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.window_sequence;
 
                 for (i = 0; i < AAC_FRAME_LENGTH; i++) {
                   *p_mdct_res++ =
                       (pstr_mps_state->p_aac_decoder_channel_info[0]->p_spectral_coefficient[i]);
                 }
 
-                ixheaacd_res_read_ics(mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info, 1,
-                                      aac_tables_ptr, pstr_mps_state->tot_sf_bands_ls);
+                error_code =
+                    ixheaacd_res_read_ics(mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info,
+                                          1, aac_tables_ptr, pstr_mps_state->tot_sf_bands_ls);
+                if (error_code) {
+                  if (pstr_mps_state->ec_flag) {
+                    pstr_mps_state->frame_ok = 0;
+                  } else
+                    return error_code;
+                }
 
                 if (1 == pstr_mps_state->p_aac_decoder_channel_info[0]->tns_data.tns_data_present)
                   ixheaacd_res_ctns_apply(
                       pstr_mps_state->p_aac_decoder_channel_info[0],
                       pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.max_sf_bands,
                       aac_tables_ptr);
                 win2 = pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.window_sequence;
                 for (i = 0; i < AAC_FRAME_LENGTH; i++) {
                   *res_mdct_1++ =
                       (pstr_mps_state->p_aac_decoder_channel_info[0]->p_spectral_coefficient[i]);
                 }
 
                 if (win1 != win2) return IA_XHEAAC_MPS_DEC_EXE_FATAL_INVALID_WINDOW_SEQUENCE;
 
                 if ((win1 == EIGHT_SHORT_SEQUENCE) &&
                     ((arbdmx_upd_qmf == UPD_QMF_18) || (arbdmx_upd_qmf == UPD_QMF_24) ||
                      (arbdmx_upd_qmf == UPD_QMF_30))) {
                   temp = ixheaacd_read_bits_buf(mps_bit_buf, 4);
                   temp = ixheaacd_read_bits_buf(mps_bit_buf, 1);
 
                   if (temp != 0) {
                     return IA_XHEAAC_MPS_DEC_EXE_FATAL_NONZERO_BIT;
                   }
 
-                  ixheaacd_res_read_ics(mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info,
-                                        1, aac_tables_ptr, pstr_mps_state->tot_sf_bands_ls);
+                  error_code = ixheaacd_res_read_ics(
+                      mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info, 1, aac_tables_ptr,
+                      pstr_mps_state->tot_sf_bands_ls);
+                  if (error_code) {
+                    if (pstr_mps_state->ec_flag) {
+                      pstr_mps_state->frame_ok = 0;
+                    } else
+                      return error_code;
+                  }
 
                   if (1 ==
                       pstr_mps_state->p_aac_decoder_channel_info[0]->tns_data.tns_data_present)
                     ixheaacd_res_ctns_apply(
                         pstr_mps_state->p_aac_decoder_channel_info[0],
                         pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.max_sf_bands,
                         aac_tables_ptr);
                   win1 = pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.window_sequence;
 
                   for (i = 0; i < AAC_FRAME_LENGTH; i++) {
                     *p_mdct_res++ = (pstr_mps_state->p_aac_decoder_channel_info[0]
                                          ->p_spectral_coefficient[i]);
                   }
 
-                  ixheaacd_res_read_ics(mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info,
-                                        1, aac_tables_ptr, pstr_mps_state->tot_sf_bands_ls);
+                  error_code = ixheaacd_res_read_ics(
+                      mps_bit_buf, pstr_mps_state->p_aac_decoder_channel_info, 1, aac_tables_ptr,
+                      pstr_mps_state->tot_sf_bands_ls);
+                  if (error_code) {
+                    if (pstr_mps_state->ec_flag) {
+                      pstr_mps_state->frame_ok = 0;
+                    } else
+                      return error_code;
+                  }
 
                   if (1 ==
                       pstr_mps_state->p_aac_decoder_channel_info[0]->tns_data.tns_data_present)
                     ixheaacd_res_ctns_apply(
                         pstr_mps_state->p_aac_decoder_channel_info[0],
                         pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.max_sf_bands,
                         aac_tables_ptr);
                   win2 = pstr_mps_state->p_aac_decoder_channel_info[0]->ics_info.window_sequence;
                   for (i = 0; i < AAC_FRAME_LENGTH; i++) {
                     *res_mdct_1++ = (pstr_mps_state->p_aac_decoder_channel_info[0]
                                          ->p_spectral_coefficient[i]);
                   }
 
                   if (win1 != win2) return IA_XHEAAC_MPS_DEC_EXE_FATAL_INVALID_WINDOW_SEQUENCE;
                 }
               }
               p_res_mdct += RFX2XMDCTCOEF;
             }
           }
 
           break;
 
         case EXT_TYPE_2:
           for (i = 0; i < p_bs_config->num_ott_boxes_at; i++) {
             error_code = ixheaacd_ec_data_dec(pstr_mps_state, &frame->cld_lossless_data,
                                               frame->cmp_ott_cld_idx, frame->cmp_ott_cld_idx_prev,
                                               CLD, num_ott_boxes + i, num_ott_boxes + i, 0,
                                               p_bs_config->bs_ott_bands_at[i]);
             if (error_code != IA_NO_ERROR) return error_code;
           }
 
           break;
 
         default:
           return IA_XHEAAC_MPS_DEC_EXE_NONFATAL_INVALID_EXTENSION_TYPE;
       }
 
       bits_read =
           (WORD32)(((mps_bit_buf->ptr_read_next - mps_bit_buf->ptr_bit_buf_base + 1) << 3) -
                    (mps_bit_buf->bit_pos + 1) - tmp);
       n_fill_bits = (sac_ext_len << 3) - bits_read;
 
       while (n_fill_bits > 7) {
         ixheaacd_read_bits_buf(mps_bit_buf, 8);
         n_fill_bits -= 8;
       }
       if (n_fill_bits > 0) {
         ixheaacd_read_bits_buf(mps_bit_buf, n_fill_bits);
       }
     }
   }
   return IA_NO_ERROR;
 }
@@ -914,250 +978,257 @@ static IA_ERRORCODE ixheaacd_parse_extension_frame(ia_heaac_mps_state_struct *ps
 IA_ERRORCODE ixheaacd_parse_frame(ia_heaac_mps_state_struct *pstr_mps_state) {
   ia_mps_spatial_bs_config_struct *p_bs_config = &pstr_mps_state->bs_config;
 
   ia_mps_dec_auxilary_struct *p_aux_struct = pstr_mps_state->aux_struct;
   WORD32 i, bs_framing_type, prev_param_slot, data_bands, bs_temp_shape_enable,
       num_temp_shape_chan;
   WORD32 ttt_off, ps, pg, ts, pb, temp;
   WORD32 *bs_env_shape_data = pstr_mps_state->mps_scratch_mem_v;
   WORD32 const *reciprocal_tab = pstr_mps_state->ia_mps_dec_mps_table.m1_m2_table_ptr->reciprocal;
   WORD32 num_parameter_sets;
 
   ia_mps_dec_spatial_bs_frame_struct *frame = pstr_mps_state->bs_frame;
   ia_mps_dec_bitdec_tables_struct *bitdec_table =
       pstr_mps_state->ia_mps_dec_mps_table.bitdec_table_ptr;
   WORD32 bs_num_output_channels =
       bitdec_table->tree_property_table[pstr_mps_state->tree_config].num_output_channels;
 
   WORD32 time_slots = pstr_mps_state->time_slots;
   WORD32 bitstream_parameter_bands = pstr_mps_state->bitstream_parameter_bands;
   WORD32 *b_ott_bands = pstr_mps_state->bitstream_ott_bands;
   WORD32 *param_slot = pstr_mps_state->aux_struct->param_slot;
 
   WORD32 num_ott_boxes = pstr_mps_state->num_ott_boxes;
 
   WORD32 reciprocal, alignment_bits = 0;
   ia_bit_buf_struct *mps_bit_buf = pstr_mps_state->ptr_mps_bit_buff;
   IA_ERRORCODE error_code = IA_NO_ERROR;
 
   if (pstr_mps_state->parse_next_bitstream_frame == 0) return IA_NO_ERROR;
 
   temp = ixheaacd_read_bits_buf(mps_bit_buf, 4);
   bs_framing_type = (temp >> 3) & ONE_BIT_MASK;
   num_parameter_sets = (temp & THREE_BIT_MASK) + 1;
   pstr_mps_state->num_parameter_sets = num_parameter_sets;
 
   reciprocal = reciprocal_tab[num_parameter_sets - 1];
 
   prev_param_slot = -1;
   for (i = 0; i < num_parameter_sets; i++) {
     if (bs_framing_type) {
       WORD32 bits_param_slot = 0;
       while ((1 << bits_param_slot) < (time_slots - num_parameter_sets + i - prev_param_slot))
         bits_param_slot++;
       param_slot[i] =
           bits_param_slot
               ? prev_param_slot + 1 + ixheaacd_read_bits_buf(mps_bit_buf, bits_param_slot)
               : prev_param_slot + 1;
       prev_param_slot = param_slot[i];
     } else {
       WORD64 temp = (WORD64)(
           ((WORD64)((time_slots * (i + 1)) + num_parameter_sets - 1) * (WORD64)reciprocal) >> 28);
       param_slot[i] = (WORD32)(temp - 1);
     }
   }
   frame->bs_independency_flag = ixheaacd_read_bits_buf(mps_bit_buf, 1);
 
   for (i = 0; i < num_ott_boxes; i++) {
     error_code =
         ixheaacd_ec_data_dec(pstr_mps_state, &frame->cld_lossless_data, frame->cmp_ott_cld_idx,
                              frame->cmp_ott_cld_idx_prev, CLD, i, i, 0, b_ott_bands[i]);
     if (error_code != IA_NO_ERROR) return error_code;
   }
   if (pstr_mps_state->one_icc) {
     error_code = ixheaacd_ec_data_dec(pstr_mps_state, &frame->icc_lossless_data,
                                       frame->cmp_ott_icc_idx, frame->cmp_ott_icc_idx_prev, ICC, 0,
                                       0, 0, bitstream_parameter_bands);
     if (error_code != IA_NO_ERROR) return error_code;
   } else {
     for (i = 0; i < num_ott_boxes; i++) {
       if (!pstr_mps_state->ott_mode_lfe[i]) {
         error_code = ixheaacd_ec_data_dec(pstr_mps_state, &frame->icc_lossless_data,
                                           frame->cmp_ott_icc_idx, frame->cmp_ott_icc_idx_prev,
                                           ICC, i, i, 0, b_ott_bands[i]);
         if (error_code != IA_NO_ERROR) return error_code;
       }
     }
   }
 
   ttt_off = num_ott_boxes;
   for (i = 0; i < pstr_mps_state->num_ttt_boxes; i++) {
     if (p_aux_struct->ttt_config[0][i].mode < 2) {
       error_code = ixheaacd_ec_data_dec(pstr_mps_state, &frame->cpc_lossless_data,
                                         frame->cmp_ttt_cpc_1_idx, frame->cmp_ttt_cpc_1_idx_prev,
                                         CPC, i, ttt_off + 4 * i,
                                         p_aux_struct->ttt_config[0][i].bitstream_start_band,
                                         p_aux_struct->ttt_config[0][i].bitstream_stop_band);
       if (error_code != IA_NO_ERROR) return error_code;
 
       error_code = ixheaacd_ec_data_dec(pstr_mps_state, &frame->cpc_lossless_data,
                                         frame->cmp_ttt_cpc_2_idx, frame->cmp_ttt_cpc_2_idx_prev,
                                         CPC, i, ttt_off + 4 * i + 1,
                                         p_aux_struct->ttt_config[0][i].bitstream_start_band,
                                         p_aux_struct->ttt_config[0][i].bitstream_stop_band);
       if (error_code != IA_NO_ERROR) return error_code;
 
       error_code =
           ixheaacd_ec_data_dec(pstr_mps_state, &frame->icc_lossless_data, frame->cmp_ttt_icc_idx,
                                frame->cmp_ttt_icc_idx_prev, ICC, i, ttt_off + 4 * i,
                                p_aux_struct->ttt_config[0][i].bitstream_start_band,
                                p_aux_struct->ttt_config[0][i].bitstream_stop_band);
       if (error_code != IA_NO_ERROR) return error_code;
     } else {
       error_code = ixheaacd_ec_data_dec(pstr_mps_state, &frame->cld_lossless_data,
                                         frame->cmp_ttt_cld_1_idx, frame->cmp_ttt_cld_1_idx_prev,
                                         CLD, i, ttt_off + 4 * i,
                                         p_aux_struct->ttt_config[0][i].bitstream_start_band,
                                         p_aux_struct->ttt_config[0][i].bitstream_stop_band);
       if (error_code != IA_NO_ERROR) return error_code;
 
       error_code = ixheaacd_ec_data_dec(pstr_mps_state, &frame->cld_lossless_data,
                                         frame->cmp_ttt_cld_2_idx, frame->cmp_ttt_cld_2_idx_prev,
                                         CLD, i, ttt_off + 4 * i + 1,
                                         p_aux_struct->ttt_config[0][i].bitstream_start_band,
                                         p_aux_struct->ttt_config[0][i].bitstream_stop_band);
       if (error_code != IA_NO_ERROR) return error_code;
     }
 
     if (p_aux_struct->ttt_config[1][i].bitstream_start_band <
         p_aux_struct->ttt_config[1][i].bitstream_stop_band) {
       if (p_aux_struct->ttt_config[1][i].mode < 2) {
         error_code = ixheaacd_ec_data_dec(pstr_mps_state, &frame->cpc_lossless_data,
                                           frame->cmp_ttt_cpc_1_idx, frame->cmp_ttt_cpc_1_idx_prev,
                                           CPC, i, ttt_off + 4 * i + 2,
                                           p_aux_struct->ttt_config[1][i].bitstream_start_band,
                                           p_aux_struct->ttt_config[1][i].bitstream_stop_band);
         if (error_code != IA_NO_ERROR) return error_code;
 
         error_code = ixheaacd_ec_data_dec(pstr_mps_state, &frame->cpc_lossless_data,
                                           frame->cmp_ttt_cpc_2_idx, frame->cmp_ttt_cpc_2_idx_prev,
                                           CPC, i, ttt_off + 4 * i + 3,
                                           p_aux_struct->ttt_config[1][i].bitstream_start_band,
                                           p_aux_struct->ttt_config[1][i].bitstream_stop_band);
         if (error_code != IA_NO_ERROR) return error_code;
 
         error_code = ixheaacd_ec_data_dec(pstr_mps_state, &frame->icc_lossless_data,
                                           frame->cmp_ttt_icc_idx, frame->cmp_ttt_icc_idx_prev,
                                           ICC, i, ttt_off + 4 * i + 2,
                                           p_aux_struct->ttt_config[1][i].bitstream_start_band,
                                           p_aux_struct->ttt_config[1][i].bitstream_stop_band);
         if (error_code != IA_NO_ERROR) return error_code;
       } else {
         error_code = ixheaacd_ec_data_dec(pstr_mps_state, &frame->cld_lossless_data,
                                           frame->cmp_ttt_cld_1_idx, frame->cmp_ttt_cld_1_idx_prev,
                                           CLD, i, ttt_off + 4 * i + 2,
                                           p_aux_struct->ttt_config[1][i].bitstream_start_band,
                                           p_aux_struct->ttt_config[1][i].bitstream_stop_band);
         if (error_code != IA_NO_ERROR) return error_code;
 
         error_code = ixheaacd_ec_data_dec(pstr_mps_state, &frame->cld_lossless_data,
                                           frame->cmp_ttt_cld_2_idx, frame->cmp_ttt_cld_2_idx_prev,
                                           CLD, i, ttt_off + 4 * i + 3,
                                           p_aux_struct->ttt_config[1][i].bitstream_start_band,
                                           p_aux_struct->ttt_config[1][i].bitstream_stop_band);
         if (error_code != IA_NO_ERROR) return error_code;
       }
     }
   }
 
   frame->bs_smooth_control = 1;
 
   if (frame->bs_smooth_control) {
     for (ps = 0; ps < num_parameter_sets; ps++) {
       frame->bs_smooth_mode[ps] = ixheaacd_read_bits_buf(mps_bit_buf, 2);
       if (frame->bs_smooth_mode[ps] > 3 || frame->bs_smooth_mode[ps] < 0) {
         return IA_XHEAAC_MPS_DEC_EXE_NONFATAL_INVALID_SMOOTH_MODE;
       }
       if (frame->bs_smooth_mode[ps] >= 2) {
         frame->bs_smooth_time[ps] = ixheaacd_read_bits_buf(mps_bit_buf, 2);
       }
       if (frame->bs_smooth_mode[ps] == 3) {
         frame->bs_freq_res_stride_smg[ps] = ixheaacd_read_bits_buf(mps_bit_buf, 2);
         data_bands = (bitstream_parameter_bands - 1) /
                          bitdec_table->pb_stride_table[frame->bs_freq_res_stride_smg[ps]] +
                      1;
         for (pg = 0; pg < data_bands; pg++) {
           frame->bs_smg_data[ps][pg] = ixheaacd_read_bits_buf(mps_bit_buf, 1);
         }
       }
     }
   }
 
   for (i = 0; i < bs_num_output_channels; i++) {
     p_aux_struct->temp_shape_enable_channel_stp[i] = 0;
     p_aux_struct->temp_shape_enable_channel_ges[i] = 0;
   }
 
   if (p_bs_config->bs_temp_shape_config != 0) {
     bs_temp_shape_enable = ixheaacd_read_bits_buf(mps_bit_buf, 1);
     if (bs_temp_shape_enable) {
       num_temp_shape_chan =
           bitdec_table->temp_shape_chan_table[p_bs_config->bs_temp_shape_config - 1]
                                              [p_bs_config->bs_tree_config];
       switch (pstr_mps_state->temp_shape_config) {
         case 1:
           for (i = 0; i < num_temp_shape_chan; i++) {
             p_aux_struct->temp_shape_enable_channel_stp[i] =
                 ixheaacd_read_bits_buf(mps_bit_buf, 1);
           }
           break;
         case 2:
           for (i = 0; i < num_temp_shape_chan; i++) {
             p_aux_struct->temp_shape_enable_channel_ges[i] =
                 ixheaacd_read_bits_buf(mps_bit_buf, 1);
           }
           for (i = 0; i < num_temp_shape_chan; i++) {
             if (p_aux_struct->temp_shape_enable_channel_ges[i]) {
               WORD32 const *envshape_data =
                   &bitdec_table->envshape_data[pstr_mps_state->env_quant_mode][0];
               ixheaacd_mps_huff_decode(mps_bit_buf, bs_env_shape_data, time_slots);
               for (ts = 0; ts < time_slots; ts++) {
                 p_aux_struct->env_shape_data[i][ts] = envshape_data[bs_env_shape_data[ts]];
               }
             }
           }
           break;
         default:
           return IA_XHEAAC_MPS_DEC_EXE_FATAL_INVALID_TEMPORAL_SHAPING_CONFIG;
       }
     }
   }
 
   if (pstr_mps_state->up_mix_type == 2) {
     for (i = 0; i < bs_num_output_channels; i++) {
       p_aux_struct->temp_shape_enable_channel_stp[i] = 0;
       p_aux_struct->temp_shape_enable_channel_ges[i] = 0;
     }
   }
 
   if (pstr_mps_state->arbitrary_downmix != 0) {
     ixheaacd_parse_arbitrary_downmix_data(pstr_mps_state);
   }
 
   ixheaacd_byte_align(mps_bit_buf, &alignment_bits);
-  ixheaacd_parse_extension_frame(pstr_mps_state);
+  error_code = ixheaacd_parse_extension_frame(pstr_mps_state);
+  if (error_code) {
+    if (pstr_mps_state->ec_flag) {
+      pstr_mps_state->frame_ok = 0;
+    }
+    else
+      return error_code;
+  }
 
   for (i = 0; i < num_ott_boxes; i++) {
     for (ps = 0; ps < num_parameter_sets; ps++) {
       if (!frame->res_data.bs_icc_diff_present[i][ps] || (pstr_mps_state->up_mix_type == 2) ||
           (pstr_mps_state->up_mix_type == 3)) {
         for (pb = 0; pb < bitstream_parameter_bands; pb++) {
           pstr_mps_state->bs_frame->ott_icc_diff_idx[i][ps][pb] = 0;
         }
       }
     }
   }
 
   pstr_mps_state->parse_next_bitstream_frame = 1;
 
   return IA_NO_ERROR;
 }
diff --git a/decoder/ixheaacd_mps_res_pns_js_thumb.c b/decoder/ixheaacd_mps_res_pns_js_thumb.c
index f7301a8..d86707c 100644
--- a/decoder/ixheaacd_mps_res_pns_js_thumb.c
+++ b/decoder/ixheaacd_mps_res_pns_js_thumb.c
@@ -70,106 +70,106 @@ VOID ixheaacd_res_tns_decode_coeffs_32x16(const ia_mps_dec_residual_filter_struc
 VOID ixheaacd_res_ctns_apply(ia_mps_dec_residual_channel_info_struct *p_aac_decoder_channel_info,
                              WORD16 max_sfb,
                              ia_mps_dec_residual_aac_tables_struct *aac_tables_ptr) {
   WORD i;
   WORD16 scale_lpc;
 
   ia_mps_dec_residual_tns_data *p_tns_data = &p_aac_decoder_channel_info->tns_data;
   WORD32 *p_spectrum = p_aac_decoder_channel_info->p_spectral_coefficient;
 
   WORD window, index, start, stop, size, scale_spec;
   ia_mps_dec_residual_ics_info_struct *p_ics_info = &p_aac_decoder_channel_info->ics_info;
   WORD win_len, tns_max_bands;
   WORD16 maximum_bins_short = ixheaac_shr16_dir_sat(p_ics_info->frame_length, 3);
 
   WORD32 coeff_parc[MAX_ORDER + 1];
   WORD32 lpc[MAX_ORDER + 1];
 
   const WORD16 *scale_factor_bands_tbl;
 
   if (!p_tns_data->tns_data_present) return;
 
   tns_max_bands = ixheaacd_res_get_maximum_tns_bands(p_ics_info, aac_tables_ptr, &win_len);
 
   scale_factor_bands_tbl =
       ixheaacd_res_get_sfb_offsets(&p_aac_decoder_channel_info->ics_info, aac_tables_ptr);
 
   for (window = 0; window < win_len; window++) {
     WORD ind_len = p_tns_data->number_of_filters[window];
 
     for (index = 0; index < ind_len; index++) {
       ia_mps_dec_residual_filter_struct *filter = &p_tns_data->filter[window][index];
 
-      if (filter->order <= 0) continue;
+      if (filter->order <= 0 || filter->order > MAX_ORDER_LONG) continue;
 
       ixheaacd_res_tns_decode_coeffs_32x16(filter, (WORD16 *)coeff_parc, aac_tables_ptr);
 
       start = ixheaac_min32(ixheaac_min32(filter->start_band, tns_max_bands), max_sfb);
 
       start = scale_factor_bands_tbl[start];
 
       stop = ixheaac_min32(ixheaac_min32(filter->stop_band, tns_max_bands), max_sfb);
 
       stop = scale_factor_bands_tbl[stop];
 
       size = (stop - start);
       if (size <= 0) continue;
 
       ixheaacd_res_tns_parcor_2_lpc_32x16((WORD16 *)coeff_parc, (WORD16 *)lpc, &scale_lpc,
                                           filter->order);
       {
         WORD32 *p_tmp = p_spectrum + (window * maximum_bins_short) + start;
         scale_spec = ixheaacd_res_calc_max_spectral_line(p_tmp, size);
       }
 
       scale_spec = ((scale_spec - 4) - scale_lpc);
 
       if (scale_spec > 0) {
         WORD shift;
 
         scale_spec = ixheaac_min32(scale_spec, 31);
 
         if (filter->direction == -1)
           shift = stop - 1;
         else
           shift = start;
 
         ixheaacd_res_tns_ar_filter_fixed_32x16(&p_spectrum[(window * maximum_bins_short) + shift],
                                                size, filter->direction, (WORD16 *)lpc,
                                                filter->order, (WORD32)scale_lpc, scale_spec);
       } else {
         WORD shift;
         WORD32 *p_tmp = p_spectrum + (window * maximum_bins_short) + start;
 
         scale_spec = -scale_spec;
         scale_spec = ixheaac_min32(scale_spec, 31);
 
         for (i = size; i != 0; i--) {
           *p_tmp = (*p_tmp >> scale_spec);
           p_tmp++;
         }
 
         if (filter->direction == -1)
           shift = stop - 1;
         else
           shift = start;
 
         {
           WORD32 shift_val = scale_lpc;
 
           ixheaacd_res_tns_ar_filter_fixed_32x16(
               &p_spectrum[(window * maximum_bins_short) + shift], size, filter->direction,
               (WORD16 *)lpc, filter->order, shift_val, 0);
         }
         {
           p_tmp = p_spectrum + (window * maximum_bins_short) + start;
           i = size;
           do {
             *p_tmp = (*p_tmp << scale_spec);
             p_tmp++;
             i--;
           } while (i != 0);
         }
       }
     }
   }
 }
