commit 04c37454b9ef5a0576c3dd34adc7426450bf18e7
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Wed Aug 22 21:49:46 2018 +0800

    Bug 699667: Remember to update gstate pointers when showing patterns.
    
    pdf_show_pattern() may resize the pdf run processors gstate array. In doing
    so any pointers to it saved by called will become stale. Similarly to
    pdf_begin_group() pdf_show_pattern() now returns the updated pointer to the
    top of the gstate stack.
    
    For the same reason pdf_show_pattern() can not be given a pointer to a gstate
    stack entry and continue using it after the gstate array has been resized. So,
    have pdf_show_pattern() take an index to the desired state instead.

diff --git a/source/pdf/pdf-op-run.c b/source/pdf/pdf-op-run.c
index aa7bc985a..6367fff91 100644
--- a/source/pdf/pdf-op-run.c
+++ b/source/pdf/pdf-op-run.c
@@ -338,196 +338,200 @@ pdf_grestore(fz_context *ctx, pdf_run_processor *pr)
 	}
 }
 
-static void
-pdf_show_pattern(fz_context *ctx, pdf_run_processor *pr, pdf_pattern *pat, pdf_gstate *pat_gstate, fz_rect area, int what)
+static pdf_gstate *
+pdf_show_pattern(fz_context *ctx, pdf_run_processor *pr, pdf_pattern *pat, int pat_gstate_num, fz_rect area, int what)
 {
 	pdf_gstate *gstate;
+	pdf_gstate *pat_gstate;
 	int gparent_save;
 	fz_matrix ptm, invptm, gparent_save_ctm;
 	int x0, y0, x1, y1;
 	float fx0, fy0, fx1, fy1;
 	fz_rect local_area;
 	int id;
 
 	pdf_gsave(ctx, pr);
 	gstate = pr->gstate + pr->gtop;
+	pat_gstate = pr->gstate + pat_gstate_num;
 
 	/* Patterns are run with the gstate of the parent */
 	pdf_copy_pattern_gstate(ctx, gstate, pat_gstate);
 
 	if (pat->ismask)
 	{
 		pdf_unset_pattern(ctx, pr, PDF_FILL);
 		pdf_unset_pattern(ctx, pr, PDF_STROKE);
 		if (what == PDF_FILL)
 		{
 			pdf_drop_material(ctx, &gstate->stroke);
 			pdf_keep_material(ctx, &gstate->fill);
 			gstate->stroke = gstate->fill;
 		}
 		if (what == PDF_STROKE)
 		{
 			pdf_drop_material(ctx, &gstate->fill);
 			pdf_keep_material(ctx, &gstate->stroke);
 			gstate->fill = gstate->stroke;
 		}
 		id = 0; /* don't cache uncolored patterns, since we colorize them when drawing */
 	}
 	else
 	{
 		// TODO: unset only the current fill/stroke or both?
 		pdf_unset_pattern(ctx, pr, what);
 		id = pat->id;
 	}
 
 	/* don't apply soft masks to objects in the pattern as well */
 	if (gstate->softmask)
 	{
 		pdf_drop_obj(ctx, gstate->softmask);
 		gstate->softmask = NULL;
 	}
 
 	ptm = fz_concat(pat->matrix, pat_gstate->ctm);
 	invptm = fz_invert_matrix(ptm);
 
 	/* The parent_ctm is amended with our pattern matrix */
 	gparent_save = pr->gparent;
 	pr->gparent = pr->gtop-1;
 	gparent_save_ctm = pr->gstate[pr->gparent].ctm;
 	pr->gstate[pr->gparent].ctm = ptm;
 
 	fz_try(ctx)
 	{
 		/* patterns are painted using the parent_ctm. area = bbox of
 		 * shape to be filled in device space. Map it back to pattern
 		 * space. */
 		local_area = fz_transform_rect(area, invptm);
 
 		fx0 = (local_area.x0 - pat->bbox.x0) / pat->xstep;
 		fy0 = (local_area.y0 - pat->bbox.y0) / pat->ystep;
 		fx1 = (local_area.x1 - pat->bbox.x0) / pat->xstep;
 		fy1 = (local_area.y1 - pat->bbox.y0) / pat->ystep;
 		if (fx0 > fx1)
 		{
 			float t = fx0; fx0 = fx1; fx1 = t;
 		}
 		if (fy0 > fy1)
 		{
 			float t = fy0; fy0 = fy1; fy1 = t;
 		}
 
 #ifdef TILE
 		/* We have tried various formulations in the past, but this one is
 		 * best we've found; only use it as a tile if a whole repeat is
 		 * required in at least one direction. Note, that this allows for
 		 * 'sections' of 4 tiles to be show, but all non-overlapping. */
 		if (fx1-fx0 > 1 || fy1-fy0 > 1)
 #else
 		if (0)
 #endif
 		{
 			int cached = fz_begin_tile_id(ctx, pr->dev, local_area, pat->bbox, pat->xstep, pat->ystep, ptm, id);
 			if (cached)
 			{
 				fz_end_tile(ctx, pr->dev);
 			}
 			else
 			{
 				gstate->ctm = ptm;
 				pdf_gsave(ctx, pr);
 				fz_try(ctx)
 					pdf_process_contents(ctx, (pdf_processor*)pr, pat->document, pat->resources, pat->contents, NULL);
 				fz_always(ctx)
 				{
 					pdf_grestore(ctx, pr);
 					fz_end_tile(ctx, pr->dev);
 				}
 				fz_catch(ctx)
 					fz_rethrow(ctx);
 			}
 		}
 		else
 		{
 			int x, y;
 
 			/* When calculating the number of tiles required, we adjust by
 			 * a small amount to allow for rounding errors. By choosing
 			 * this amount to be smaller than 1/256, we guarantee we won't
 			 * cause problems that will be visible even under our most
 			 * extreme antialiasing. */
 			x0 = floorf(fx0 + 0.001f);
 			y0 = floorf(fy0 + 0.001f);
 			x1 = ceilf(fx1 - 0.001f);
 			y1 = ceilf(fy1 - 0.001f);
 			/* The above adjustments cause problems for sufficiently
 			 * large values for xstep/ystep which may be used if the
 			 * pattern is expected to be rendered exactly once. */
 			if (fx1 > fx0 && x1 == x0)
 				x1 = x0 + 1;
 			if (fy1 > fy0 && y1 == y0)
 				y1 = y0 + 1;
 
 			for (y = y0; y < y1; y++)
 			{
 				for (x = x0; x < x1; x++)
 				{
 					gstate->ctm = fz_pre_translate(ptm, x * pat->xstep, y * pat->ystep);
 					pdf_gsave(ctx, pr);
 					fz_try(ctx)
 						pdf_process_contents(ctx, (pdf_processor*)pr, pat->document, pat->resources, pat->contents, NULL);
 					fz_always(ctx)
 						pdf_grestore(ctx, pr);
 					fz_catch(ctx)
 						fz_rethrow(ctx);
 				}
 			}
 		}
 	}
 	fz_always(ctx)
 	{
 		pr->gstate[pr->gparent].ctm = gparent_save_ctm;
 		pr->gparent = gparent_save;
 	}
 	fz_catch(ctx)
 	{
 		fz_rethrow(ctx);
 	}
 
 	pdf_grestore(ctx, pr);
+
+	return pr->gstate + pr->gtop;
 }
 
 static void
 pdf_show_image_imp(fz_context *ctx, pdf_run_processor *pr, fz_image *image, fz_matrix image_ctm, fz_rect bbox)
 {
 	pdf_gstate *gstate = pr->gstate + pr->gtop;
 
 	if (image->colorspace)
 	{
 		fz_fill_image(ctx, pr->dev, image, image_ctm, gstate->fill.alpha, &gstate->fill.color_params);
 		return;
 	}
 
 	if (gstate->fill.kind == PDF_MAT_COLOR)
 		fz_fill_image_mask(ctx, pr->dev, image, image_ctm,
 				gstate->fill.colorspace, gstate->fill.v, gstate->fill.alpha, &gstate->fill.color_params);
 	else if (gstate->fill.kind == PDF_MAT_PATTERN && gstate->fill.pattern)
 	{
 		fz_clip_image_mask(ctx, pr->dev, image, image_ctm, bbox);
 		fz_try(ctx)
-			pdf_show_pattern(ctx, pr, gstate->fill.pattern, &pr->gstate[gstate->fill.gstate_num], bbox, PDF_FILL);
+			gstate = pdf_show_pattern(ctx, pr, gstate->fill.pattern, gstate->fill.gstate_num, bbox, PDF_FILL);
 		fz_always(ctx)
 			fz_pop_clip(ctx, pr->dev);
 		fz_catch(ctx)
 			fz_rethrow(ctx);
 	}
 	else if (gstate->fill.kind == PDF_MAT_SHADE && gstate->fill.shade)
 	{
 		fz_clip_image_mask(ctx, pr->dev, image, image_ctm, bbox);
 		fz_try(ctx)
 			fz_fill_shade(ctx, pr->dev, gstate->fill.shade, pr->gstate[gstate->fill.gstate_num].ctm, gstate->fill.alpha, &gstate->fill.color_params);
 		fz_always(ctx)
 			fz_pop_clip(ctx, pr->dev);
 		fz_catch(ctx)
 			fz_rethrow(ctx);
 	}
 }
@@ -599,141 +603,140 @@ static void
 pdf_show_path(fz_context *ctx, pdf_run_processor *pr, int doclose, int dofill, int dostroke, int even_odd)
 {
 	pdf_gstate *gstate = pr->gstate + pr->gtop;
 	fz_path *path;
 	fz_rect bbox;
 	softmask_save softmask = { NULL };
 	int knockout_group = 0;
 
 	if (dostroke) {
 		if (pr->dev->flags & (FZ_DEVFLAG_STROKECOLOR_UNDEFINED | FZ_DEVFLAG_LINEJOIN_UNDEFINED | FZ_DEVFLAG_LINEWIDTH_UNDEFINED))
 			pr->dev->flags |= FZ_DEVFLAG_UNCACHEABLE;
 		else if (gstate->stroke_state->dash_len != 0 && pr->dev->flags & (FZ_DEVFLAG_STARTCAP_UNDEFINED | FZ_DEVFLAG_DASHCAP_UNDEFINED | FZ_DEVFLAG_ENDCAP_UNDEFINED))
 			pr->dev->flags |= FZ_DEVFLAG_UNCACHEABLE;
 		else if (gstate->stroke_state->linejoin == FZ_LINEJOIN_MITER && (pr->dev->flags & FZ_DEVFLAG_MITERLIMIT_UNDEFINED))
 			pr->dev->flags |= FZ_DEVFLAG_UNCACHEABLE;
 	}
 	if (dofill) {
 		if (pr->dev->flags & FZ_DEVFLAG_FILLCOLOR_UNDEFINED)
 			pr->dev->flags |= FZ_DEVFLAG_UNCACHEABLE;
 	}
 
 	path = pr->path;
 	pr->path = fz_new_path(ctx);
 
 	fz_try(ctx)
 	{
 		if (doclose)
 			fz_closepath(ctx, path);
 
 		bbox = fz_bound_path(ctx, path, (dostroke ? gstate->stroke_state : NULL), gstate->ctm);
 
 		if (pr->super.hidden)
 			dostroke = dofill = 0;
 
 		if (dofill || dostroke)
 			gstate = pdf_begin_group(ctx, pr, bbox, &softmask);
 
 		if (dofill && dostroke)
 		{
 			/* We may need to push a knockout group */
 			if (gstate->stroke.alpha == 0)
 			{
 				/* No need for group, as stroke won't do anything */
 			}
 			else if (gstate->stroke.alpha == 1.0f && gstate->blendmode == FZ_BLEND_NORMAL)
 			{
 				/* No need for group, as stroke won't show up */
 			}
 			else
 			{
 				knockout_group = 1;
 				fz_begin_group(ctx, pr->dev, bbox, NULL, 0, 1, FZ_BLEND_NORMAL, 1);
 			}
 		}
 
 		if (dofill)
 		{
 			switch (gstate->fill.kind)
 			{
 			case PDF_MAT_NONE:
 				break;
 			case PDF_MAT_COLOR:
 				fz_fill_path(ctx, pr->dev, path, even_odd, gstate->ctm,
 					gstate->fill.colorspace, gstate->fill.v, gstate->fill.alpha, &gstate->fill.color_params);
 				break;
 			case PDF_MAT_PATTERN:
 				if (gstate->fill.pattern)
 				{
 					fz_clip_path(ctx, pr->dev, path, even_odd, gstate->ctm, bbox);
-					pdf_show_pattern(ctx, pr, gstate->fill.pattern, &pr->gstate[gstate->fill.gstate_num], bbox, PDF_FILL);
+					gstate = pdf_show_pattern(ctx, pr, gstate->fill.pattern, gstate->fill.gstate_num, bbox, PDF_FILL);
 					fz_pop_clip(ctx, pr->dev);
 				}
 				break;
 			case PDF_MAT_SHADE:
 				if (gstate->fill.shade)
 				{
 					fz_clip_path(ctx, pr->dev, path, even_odd, gstate->ctm, bbox);
 					/* The cluster and page 2 of patterns.pdf shows that fz_fill_shade should NOT be called with gstate->ctm. */
 					fz_fill_shade(ctx, pr->dev, gstate->fill.shade, pr->gstate[gstate->fill.gstate_num].ctm, gstate->fill.alpha, &gstate->fill.color_params);
 					fz_pop_clip(ctx, pr->dev);
 				}
 				break;
 			}
 		}
 
 		if (dostroke)
 		{
 			switch (gstate->stroke.kind)
 			{
 			case PDF_MAT_NONE:
 				break;
 			case PDF_MAT_COLOR:
 				fz_stroke_path(ctx, pr->dev, path, gstate->stroke_state, gstate->ctm,
 					gstate->stroke.colorspace, gstate->stroke.v, gstate->stroke.alpha, &gstate->stroke.color_params);
 				break;
 			case PDF_MAT_PATTERN:
 				if (gstate->stroke.pattern)
 				{
 					fz_clip_stroke_path(ctx, pr->dev, path, gstate->stroke_state, gstate->ctm, bbox);
-					pdf_show_pattern(ctx, pr, gstate->stroke.pattern, &pr->gstate[gstate->stroke.gstate_num], bbox, PDF_STROKE);
+					gstate = pdf_show_pattern(ctx, pr, gstate->stroke.pattern, gstate->stroke.gstate_num, bbox, PDF_STROKE);
 					fz_pop_clip(ctx, pr->dev);
 				}
 				break;
 			case PDF_MAT_SHADE:
 				if (gstate->stroke.shade)
 				{
 					fz_clip_stroke_path(ctx, pr->dev, path, gstate->stroke_state, gstate->ctm, bbox);
 					fz_fill_shade(ctx, pr->dev, gstate->stroke.shade, pr->gstate[gstate->stroke.gstate_num].ctm, gstate->stroke.alpha, &gstate->stroke.color_params);
 					fz_pop_clip(ctx, pr->dev);
 				}
 				break;
 			}
 		}
 
 		if (knockout_group)
 			fz_end_group(ctx, pr->dev);
 
 		if (dofill || dostroke)
 			pdf_end_group(ctx, pr, &softmask);
 
 		if (pr->clip)
 		{
-			gstate = pr->gstate + pr->gtop; /* in case it was changed by pdf_begin_group */
 			gstate->clip_depth++;
 			fz_clip_path(ctx, pr->dev, path, pr->clip_even_odd, gstate->ctm, bbox);
 			pr->clip = 0;
 		}
 	}
 	fz_always(ctx)
 	{
 		fz_drop_path(ctx, path);
 	}
 	fz_catch(ctx)
 	{
 		fz_rethrow(ctx);
 	}
 }
 
 /*
  * Assemble and emit text
  */
@@ -742,147 +745,147 @@ static pdf_gstate *
 pdf_flush_text(fz_context *ctx, pdf_run_processor *pr)
 {
 	pdf_gstate *gstate = pr->gstate + pr->gtop;
 	fz_text *text;
 	int dofill;
 	int dostroke;
 	int doclip;
 	int doinvisible;
 	softmask_save softmask = { NULL };
 	int knockout_group = 0;
 
 	text = pdf_tos_get_text(ctx, &pr->tos);
 	if (!text)
 		return gstate;
 
 	dofill = dostroke = doclip = doinvisible = 0;
 	switch (pr->tos.text_mode)
 	{
 	case 0: dofill = 1; break;
 	case 1: dostroke = 1; break;
 	case 2: dofill = dostroke = 1; break;
 	case 3: doinvisible = 1; break;
 	case 4: dofill = doclip = 1; break;
 	case 5: dostroke = doclip = 1; break;
 	case 6: dofill = dostroke = doclip = 1; break;
 	case 7: doclip = 1; break;
 	}
 
 	if (pr->super.hidden)
 		dostroke = dofill = 0;
 
 	fz_try(ctx)
 	{
 		fz_rect tb = fz_transform_rect(pr->tos.text_bbox, gstate->ctm);
 		if (dostroke)
 			tb = fz_adjust_rect_for_stroke(ctx, tb, gstate->stroke_state, gstate->ctm);
 
 		/* Don't bother sending a text group with nothing in it */
 		if (!text->head)
 			break;
 
 		if (dofill || dostroke)
 			gstate = pdf_begin_group(ctx, pr, tb, &softmask);
 
 		if (dofill && dostroke)
 		{
 			/* We may need to push a knockout group */
 			if (gstate->stroke.alpha == 0)
 			{
 				/* No need for group, as stroke won't do anything */
 			}
 			else if (gstate->stroke.alpha == 1.0f && gstate->blendmode == FZ_BLEND_NORMAL)
 			{
 				/* No need for group, as stroke won't show up */
 			}
 			else
 			{
 				knockout_group = 1;
 				fz_begin_group(ctx, pr->dev, tb, NULL, 0, 1, FZ_BLEND_NORMAL, 1);
 			}
 		}
 
 		if (doinvisible)
 			fz_ignore_text(ctx, pr->dev, text, gstate->ctm);
 
 		if (dofill)
 		{
 			switch (gstate->fill.kind)
 			{
 			case PDF_MAT_NONE:
 				break;
 			case PDF_MAT_COLOR:
 				fz_fill_text(ctx, pr->dev, text, gstate->ctm,
 					gstate->fill.colorspace, gstate->fill.v, gstate->fill.alpha, &gstate->fill.color_params);
 				break;
 			case PDF_MAT_PATTERN:
 				if (gstate->fill.pattern)
 				{
 					fz_clip_text(ctx, pr->dev, text, gstate->ctm, tb);
-					pdf_show_pattern(ctx, pr, gstate->fill.pattern, &pr->gstate[gstate->fill.gstate_num], tb, PDF_FILL);
+					gstate = pdf_show_pattern(ctx, pr, gstate->fill.pattern, gstate->fill.gstate_num, tb, PDF_FILL);
 					fz_pop_clip(ctx, pr->dev);
 				}
 				break;
 			case PDF_MAT_SHADE:
 				if (gstate->fill.shade)
 				{
 					fz_clip_text(ctx, pr->dev, text, gstate->ctm, tb);
 					/* Page 2 of patterns.pdf shows that fz_fill_shade should NOT be called with gstate->ctm */
 					fz_fill_shade(ctx, pr->dev, gstate->fill.shade, pr->gstate[gstate->fill.gstate_num].ctm, gstate->fill.alpha, &gstate->fill.color_params);
 					fz_pop_clip(ctx, pr->dev);
 				}
 				break;
 			}
 		}
 
 		if (dostroke)
 		{
 			switch (gstate->stroke.kind)
 			{
 			case PDF_MAT_NONE:
 				break;
 			case PDF_MAT_COLOR:
 				fz_stroke_text(ctx, pr->dev, text, gstate->stroke_state, gstate->ctm,
 					gstate->stroke.colorspace, gstate->stroke.v, gstate->stroke.alpha, &gstate->stroke.color_params);
 				break;
 			case PDF_MAT_PATTERN:
 				if (gstate->stroke.pattern)
 				{
 					fz_clip_stroke_text(ctx, pr->dev, text, gstate->stroke_state, gstate->ctm, tb);
-					pdf_show_pattern(ctx, pr, gstate->stroke.pattern, &pr->gstate[gstate->stroke.gstate_num], tb, PDF_STROKE);
+					gstate = pdf_show_pattern(ctx, pr, gstate->stroke.pattern, gstate->stroke.gstate_num, tb, PDF_STROKE);
 					fz_pop_clip(ctx, pr->dev);
 				}
 				break;
 			case PDF_MAT_SHADE:
 				if (gstate->stroke.shade)
 				{
 					fz_clip_stroke_text(ctx, pr->dev, text, gstate->stroke_state, gstate->ctm, tb);
 					fz_fill_shade(ctx, pr->dev, gstate->stroke.shade, pr->gstate[gstate->stroke.gstate_num].ctm, gstate->stroke.alpha, &gstate->stroke.color_params);
 					fz_pop_clip(ctx, pr->dev);
 				}
 				break;
 			}
 		}
 
 		if (knockout_group)
 			fz_end_group(ctx, pr->dev);
 
 		if (dofill || dostroke)
 			pdf_end_group(ctx, pr, &softmask);
 
 		if (doclip)
 		{
 			gstate->clip_depth++;
 			fz_clip_text(ctx, pr->dev, text, gstate->ctm, tb);
 		}
 	}
 	fz_always(ctx)
 	{
 		fz_drop_text(ctx, text);
 	}
 	fz_catch(ctx)
 	{
 		fz_rethrow(ctx);
 	}
 
 	return pr->gstate + pr->gtop;
 }
