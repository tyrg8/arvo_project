commit 9fbc712003baf498635675388a79a76755446b91
Author: Alex <aleksandrosansan@gmail.com>
Date:   Wed Nov 15 08:18:13 2023 +0100

    Fix oss-fuzz issue 64111 (#1237)
    
    Fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64111

diff --git a/Packet++/header/BgpLayer.h b/Packet++/header/BgpLayer.h
index 01a5f325..31cb7563 100644
--- a/Packet++/header/BgpLayer.h
+++ b/Packet++/header/BgpLayer.h
@@ -274,175 +274,183 @@ class BgpUpdateMessageLayer : public BgpLayer
 {
 public:
 
 	/**
 	 * @struct prefix_and_ip
 	 * A structure that contains IPv4 address and IP address mask (prefix) information.
 	 * It's used to represent BGP Withdrawn Routes and Network Layer Reachability Information (NLRI)
 	 */
 	struct prefix_and_ip
 	{
 		/** IPv4 address mask, must contain one of the values: 8, 16, 24, 32 */
 		uint8_t prefix;
 		/** IPv4 address */
 		IPv4Address ipAddr;
 
 		/**
 		 * A default c'tor that zeroes all data
 		 */
 		prefix_and_ip(): prefix(0), ipAddr(IPv4Address::Zero) {}
 
 		/**
 		 * A c'tor that initializes the values of the struct
 		 * @param[in] prefixVal IPv4 address mask value
 		 * @param[in] ipAddrVal IPv4 address
 		 */
 		prefix_and_ip(uint8_t prefixVal, const std::string& ipAddrVal): prefix(prefixVal), ipAddr(ipAddrVal) {}
 	};
 
 
 	/**
 	 * @struct path_attribute
 	 * A structure that represents BGP OPEN message Path Attributes information
 	 */
 	struct path_attribute
 	{
 		/** Path attribute flags */
 		uint8_t flags;
 		/** Path attribute type */
 		uint8_t type;
 		/** Path attribute length */
 		uint8_t length;
 		/** Path attribute data. Max supported data length is 32 bytes */
 		uint8_t data[32];
 
 		/**
 		 * A default c'tor that zeroes all data
 		 */
 		path_attribute() {}
 
 		/**
 		 * A c'tor that initializes the values of the struct
 		 * @param[in] flagsVal Path attribute flags value
 		 * @param[in] typeVal Path attribute type value
 		 * @param[in] dataAsHexString Path attribute data as hex string. The path_attribute#length field will be set accordingly.
 		 * If this parameter is not a valid hex string the data will remain zeroed and length will be also set to zero
 		 */
 		path_attribute(uint8_t flagsVal, uint8_t typeVal, const std::string& dataAsHexString);
 	};
 
 	/**
 	 * A constructor that creates the layer from an existing packet raw data
 	 * @param[in] data A pointer to the raw data
 	 * @param[in] dataLen Size of the data in bytes
 	 * @param[in] prevLayer A pointer to the previous layer
 	 * @param[in] packet A pointer to the Packet instance where layer will be stored in
 	 */
 	BgpUpdateMessageLayer(uint8_t* data, size_t dataLen, Layer* prevLayer, Packet* packet) : BgpLayer(data, dataLen, prevLayer, packet) {}
 
+	/**
+	* A static method that takes a byte array and detects whether it is a BgpUpdateMessage
+	* @param[in] data A byte array
+	* @param[in] dataSize The byte array size (in bytes)
+	* @return True if the data looks like a valid BgpUpdateMessage layer
+	*/
+	static bool isDataValid(const uint8_t *data, size_t dataSize);
+
 	/**
 	 * A c'tor that creates a new BGP UPDATE message
 	 * @param[in] withdrawnRoutes A vector of withdrawn routes data. If left empty (which is the default value) no withdrawn route information will be written to the message
 	 * @param[in] pathAttributes A vector of path attributes data. If left empty (which is the default value) no path attribute information will be written to the message
 	 * @param[in] nlri A vector of network layer reachability data. If left empty (which is the default value) no reachability information will be written to the message
 	 */
 	explicit BgpUpdateMessageLayer(
 		const std::vector<prefix_and_ip>& withdrawnRoutes = std::vector<prefix_and_ip>(),
 		const std::vector<path_attribute>& pathAttributes = std::vector<path_attribute>(),
 		const std::vector<prefix_and_ip>& nlri = std::vector<prefix_and_ip>());
 
 	/**
 	 * Get a pointer to the basic BGP message data. Notice this points directly to the data, so any change will modify the actual packet data
 	 * @return A pointer to a bgp_common_header structure containing the data
 	 */
 	bgp_common_header* getBasicMsgHeader() const { return (bgp_common_header*)m_Data; }
 
 	/**
 	 * @return The size in [bytes] of the Withdrawn Routes data
 	 */
 	size_t getWithdrawnRoutesLength() const;
 
 	/**
 	 * Get a vector of the Withdrawn Routes currently in the message
 	 * @param[out] withdrawnRoutes A reference to a vector the Withdrawn Routes data will be written to
 	 */
 	void getWithdrawnRoutes(std::vector<prefix_and_ip>& withdrawnRoutes);
 
 	/**
 	 * Set Withdrawn Routes in this message. This method will override any existing Withdrawn Routes in the message.
 	 * If the input is an empty vector all Withdrawn Routes will be removed. This method automatically sets the
 	 * bgp_common_header#length and the Withdrawn Routes length fields in the message
 	 * @param[in] withdrawnRoutes New Withdrawn Routes to set in the message
 	 * @return True if all Withdrawn Routes were set successfully or false otherwise. In case of an error an appropriate message
 	 * will be printed to log
 	 */
 	bool setWithdrawnRoutes(const std::vector<prefix_and_ip>& withdrawnRoutes);
 
 	/**
 	 * Clear all Withdrawn Routes data currently in the message. This is equivalent to calling setWithdrawnRoutes() with an empty
 	 * vector as a parameter
 	 * @return True if all Withdrawn Routes were successfully cleared or false otherwise. In case of an error an appropriate message
 	 * will be printed to log
 	 */
 	bool clearWithdrawnRoutes();
 
 	/**
 	 * @return The size in [bytes] of the Path Attributes data
 	 */
 	size_t getPathAttributesLength() const;
 
 	/**
 	 * Get a vector of the Path Attributes currently in the message
 	 * @param[out] pathAttributes A reference to a vector the Path Attributes data will be written to
 	 */
 	void getPathAttributes(std::vector<path_attribute>& pathAttributes);
 
 	/**
 	 * Set Path Attributes in this message. This method will override any existing Path Attributes in the message.
 	 * If the input is an empty vector all Path Attributes will be removed. This method automatically sets the
 	 * bgp_common_header#length and the Path Attributes length fields in the message
 	 * @param[in] pathAttributes New Path Attributes to set in the message
 	 * @return True if all Path Attributes were set successfully or false otherwise. In case of an error an appropriate message
 	 * will be printed to log
 	 */
 	bool setPathAttributes(const std::vector<path_attribute>& pathAttributes);
 
 	/**
 	 * Clear all Path Attributes data currently in the message. This is equivalent to calling setPathAttributes() with an empty
 	 * vector as a parameter
 	 * @return True if all Path Attributes were successfully cleared or false otherwise. In case of an error an appropriate message
 	 * will be printed to log
 	 */
 	bool clearPathAttributes();
 
 	/**
 	 * @return The size in [bytes] of the Network Layer Reachability Info
 	 */
 	size_t getNetworkLayerReachabilityInfoLength() const;
 
 	/**
 	 * Get a vector of the Network Layer Reachability Info currently in the message
 	 * @param[out] nlri A reference to a vector the NLRI data will be written to
 	 */
 	void getNetworkLayerReachabilityInfo(std::vector<prefix_and_ip>& nlri);
 
 	/**
 	 * Set NLRI data in this message. This method will override any existing NLRI data in the message.
 	 * If the input is an empty vector all NLRI data will be removed. This method automatically sets the
 	 * bgp_common_header#length field in the message
 	 * @param[in] nlri New NLRI data to set in the message
 	 * @return True if all NLRI data was set successfully or false otherwise. In case of an error an appropriate message
 	 * will be printed to log
 	 */
 	bool setNetworkLayerReachabilityInfo(const std::vector<prefix_and_ip>& nlri);
 
 	/**
 	 * Clear all NLRI data currently in the message. This is equivalent to calling setNetworkLayerReachabilityInfo() with an empty
 	 * vector as a parameter
 	 * @return True if all NLRI were successfully cleared or false otherwise. In case of an error an appropriate message
 	 * will be printed to log
 	 */
 	bool clearNetworkLayerReachabilityInfo();
 
 	// implement abstract methods
 
 	BgpMessageType getBgpMessageType() const { return BgpLayer::Update; }
diff --git a/Packet++/src/BgpLayer.cpp b/Packet++/src/BgpLayer.cpp
index 2b54dbbd..ddf4c91b 100644
--- a/Packet++/src/BgpLayer.cpp
+++ b/Packet++/src/BgpLayer.cpp
@@ -30,28 +30,29 @@ size_t BgpLayer::getHeaderLen() const
 
 BgpLayer* BgpLayer::parseBgpLayer(uint8_t* data, size_t dataLen, Layer* prevLayer, Packet* packet)
 {
-	if (dataLen < sizeof(bgp_common_header))
+	if (data == nullptr || dataLen < sizeof(bgp_common_header))
 		return nullptr;
 
 	bgp_common_header* bgpHeader = (bgp_common_header*)data;
 
 	// illegal header data - length is too small
-	if (be16toh(bgpHeader->length) < static_cast<uint16_t>(sizeof(bgp_common_header)))
+	uint16_t messageLen = be16toh(bgpHeader->length);
+	if (dataLen < messageLen || messageLen < static_cast<uint16_t>(sizeof(bgp_common_header)))
 		return nullptr;
 
 	switch (bgpHeader->messageType)
 	{
 	case 1: // OPEN
 		return new BgpOpenMessageLayer(data, dataLen, prevLayer, packet);
 	case 2: // UPDATE
-		return new BgpUpdateMessageLayer(data, dataLen, prevLayer, packet);
+		return BgpUpdateMessageLayer::isDataValid(data, dataLen) ? new BgpUpdateMessageLayer(data, dataLen, prevLayer, packet) : nullptr;
 	case 3: // NOTIFICATION
 		return new BgpNotificationMessageLayer(data, dataLen, prevLayer, packet);
 	case 4: // KEEPALIVE
 		return new BgpKeepaliveMessageLayer(data, dataLen, prevLayer, packet);
 	case 5: // ROUTE-REFRESH
 		return new BgpRouteRefreshMessageLayer(data, dataLen, prevLayer, packet);
 	default:
 		return nullptr;
 	}
 }
@@ -703,6 +704,22 @@ void BgpUpdateMessageLayer::getNetworkLayerReachabilityInfo(std::vector<prefix_a
 	parsePrefixAndIPData(dataPtr, nlriSize, nlri);
 }
 
+bool BgpUpdateMessageLayer::isDataValid(const uint8_t *data, size_t dataSize)
+{
+	if (dataSize < sizeof(bgp_common_header) + 2*sizeof(uint16_t))
+		return false;
+
+	uint16_t withdrLen = be16toh(*(uint16_t*)(data + sizeof(bgp_common_header)));
+	if (dataSize < sizeof(bgp_common_header) + 2*sizeof(uint16_t) + withdrLen)
+		return false;
+
+	uint16_t attrLen = be16toh(*(uint16_t*)(data + sizeof(bgp_common_header) + sizeof(uint16_t) + withdrLen));
+	if (dataSize < sizeof(bgp_common_header) + 2*sizeof(uint16_t) + withdrLen + attrLen)
+		return false;
+
+	return true;
+}
+
 bool BgpUpdateMessageLayer::setNetworkLayerReachabilityInfo(const std::vector<prefix_and_ip>& nlri)
 {
 	uint8_t newNlriData[1500];
