commit 9e3ee0e2b589ec8b28b27a72232a76e5d57e294b
Author: Tim Ledbetter <timledbetter@gmail.com>
Date:   Thu Oct 12 20:52:19 2023 +0100

    LibGfx/ILBM: Avoid buffer overrun when reading header chunk

diff --git a/Userland/Libraries/LibGfx/ImageFormats/ILBMLoader.cpp b/Userland/Libraries/LibGfx/ImageFormats/ILBMLoader.cpp
index 50511cb253..6ec65acd15 100644
--- a/Userland/Libraries/LibGfx/ImageFormats/ILBMLoader.cpp
+++ b/Userland/Libraries/LibGfx/ImageFormats/ILBMLoader.cpp
@@ -295,24 +295,27 @@ static ErrorOr<void> decode_iff_chunks(ILBMLoadingContext& context)
 static ErrorOr<void> decode_bmhd_chunk(ILBMLoadingContext& context)
 {
     context.chunks_cursor = context.data.slice(sizeof(IFFHeader));
     auto first_chunk = TRY(decode_iff_advance_chunk(context.chunks_cursor));
 
     if (first_chunk.type != FourCC("BMHD"))
         return Error::from_string_literal("IFFImageDecoderPlugin: Invalid chunk type, expected BMHD");
 
+    if (first_chunk.data.size() < sizeof(BMHDHeader))
+        return Error::from_string_literal("IFFImageDecoderPlugin: Not enough data for header chunk");
+
     context.bm_header = *bit_cast<BMHDHeader const*>(first_chunk.data.data());
     context.pitch = ceil_div((u16)context.bm_header.width, (u16)16) * 2;
 
     context.state = ILBMLoadingContext::State::HeaderDecoded;
 
     dbgln_if(ILBM_DEBUG, "IFFImageDecoderPlugin: BMHD: {}x{} ({},{}), p={}, m={}, c={}",
         context.bm_header.width,
         context.bm_header.height,
         context.bm_header.x,
         context.bm_header.y,
         context.bm_header.planes,
         to_underlying(context.bm_header.mask),
         to_underlying(context.bm_header.compression));
 
     return {};
 }
