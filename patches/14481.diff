commit 7de049193ab78d9fcdc3baa2c0673bd1e300ed5b
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Sat Apr 27 20:53:15 2019 -0700

    AgentX: Avoid reading uninitialized data
    
    Fixes: 46a42549dbae ("AgentX: Reduce stack usage")
    Fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=14481

diff --git a/agent/mibgroup/agentx/protocol.c b/agent/mibgroup/agentx/protocol.c
index d8a954368a..4d219da818 100644
--- a/agent/mibgroup/agentx/protocol.c
+++ b/agent/mibgroup/agentx/protocol.c
@@ -1238,40 +1238,45 @@ static const u_char *
 agentx_parse_string(const u_char *data, size_t *length, struct rszbuf *string,
                     u_int network_byte_order)
 {
     u_int           len;
 
     len = agentx_parse_int(data, network_byte_order);
+    if (*length < len + 4) {
+        DEBUGMSGTL(("agentx", "Incomplete string (still too short: %d)\n",
+                    (int)*length));
+        return NULL;
+    }
     if (!increase_size(string, len + 1)) {
         DEBUGMSGTL(("agentx", "Out of memory\n"));
         return NULL;
     }
     memmove(string->buf, data + 4, len);
     memset((char *)string->buf + len, '\0', 1);
     string->used = len;
 
     len = (len + 3) & ~3UL; /* Include padding. */
 
     if (*length < len + 4) {
         DEBUGMSGTL(("agentx", "Packet too short for string padding (still too short: %d)\n",
                     (int)*length));
         return NULL;
     }
 
     *length -= (len + 4);
     DEBUGDUMPSETUP("recv", data, (len + 4));
     DEBUGIF("dumpv_recv") {
         u_char         *buf = NULL;
         size_t          buf_len = 0, out_len = 0;
 
         if (sprint_realloc_asciistring(&buf, &buf_len, &out_len, 1,
                                        string->buf, string->used)) {
             DEBUGMSG(("dumpv_recv", "String: %s\n", buf));
         } else {
             DEBUGMSG(("dumpv_recv", "String: %s [TRUNCATED]\n", buf));
         }
         if (buf != NULL) {
             free(buf);
         }
     }
     return data + (len + 4);
 }
