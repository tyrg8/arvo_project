commit 8510a0d2a5ac878f1a4b9a6683580bcdfa9196d3
Author: James Bonfield <jkb@sanger.ac.uk>
Date:   Thu Jan 28 17:06:25 2021 +0000

    Fix more OSS fuzz reported issues.
    
    Credit to OSS-Fuzz
    
    - Add bounds check in cram_const_decode_init.
    
      I've checked and this is the only use of the varint decoders that
      didn't have a bounds check.  Suitably sniffed out by the fuzzer.
      Good fuzzer!
    
      Fixes oss-fuzz 30012
    
    - Free the sub-encoding when initialising XRLE encoding fails due to
      malformed streams.  This removes a tiny memory leak.
    
      Fixes oss-fuzz 30014

diff --git a/cram/cram_codecs.c b/cram/cram_codecs.c
index e581ba3c..ab46fc29 100644
--- a/cram/cram_codecs.c
+++ b/cram/cram_codecs.c
@@ -945,32 +945,32 @@ int cram_const_decode_size(cram_slice *slice, cram_codec *c) {
 cram_codec *cram_const_decode_init(cram_block_compression_hdr *hdr,
                                    char *data, int size,
                                    enum cram_encoding codec,
                                    enum cram_external_type option,
                                    int version, varint_vec *vv) {
     cram_codec *c;
     char *cp = data;
 
     if (!(c = malloc(sizeof(*c))))
         return NULL;
 
     c->codec  = codec;
     if (codec == E_CONST_BYTE)
         c->decode = cram_const_decode_byte;
     else if (option == E_INT)
         c->decode = cram_const_decode_int;
     else
         c->decode = cram_const_decode_long;
     c->free   = cram_const_decode_free;
     c->size   = cram_const_decode_size;
     c->get_block = NULL;
 
-    c->u.xconst.val = vv->varint_get64s(&cp, NULL, NULL);
+    c->u.xconst.val = vv->varint_get64s(&cp, data+size, NULL);
 
     if (cp - data != size) {
         fprintf(stderr, "Malformed const header stream\n");
         free(c);
         return NULL;
     }
 
     return c;
 }
@@ -2111,71 +2111,71 @@ void cram_xrle_decode_free(cram_codec *c) {
 cram_codec *cram_xrle_decode_init(cram_block_compression_hdr *hdr,
                                   char *data, int size,
                                   enum cram_encoding codec,
                                   enum cram_external_type option,
                                   int version, varint_vec *vv) {
     cram_codec *c;
     char *cp = data;
     char *endp = data+size;
     int err = 0;
 
-    if (!(c = malloc(sizeof(*c))))
+    if (!(c = calloc(1, sizeof(*c))))
         return NULL;
 
     c->codec  = E_XRLE;
     if (option == E_LONG)
         c->decode = cram_xrle_decode_long;
     else if (option == E_INT)
         c->decode = cram_xrle_decode_int;
     else if (option == E_BYTE_ARRAY || option == E_BYTE)
         c->decode = cram_xrle_decode_char;
     else {
         fprintf(stderr, "BYTE_ARRAYs not supported by this codec\n");
         return NULL;
     }
     c->free   = cram_xrle_decode_free;
     c->size   = cram_xrle_decode_size;
     c->get_block = cram_xrle_get_block;
     c->u.xrle.cur_len = 0;
     c->u.xrle.cur_lit = -1;
 
     // RLE map
     int i, j, nrle = vv->varint_get32(&cp, endp, &err);
     memset(c->u.xrle.rep_score, 0, 256*sizeof(*c->u.xrle.rep_score));
     for (i = 0; i < nrle && i < 256; i++) {
         j = vv->varint_get32(&cp, endp, &err);
         if (j >= 0 && j < 256)
             c->u.xrle.rep_score[j] = 1;
     }
 
     // Length and literal sub encodings
     c->u.xrle.len_encoding = vv->varint_get32(&cp, endp, &err);
     int sub_size = vv->varint_get32(&cp, endp, &err);
     if (sub_size < 0 || endp - cp < sub_size)
         goto malformed;
     c->u.xrle.len_codec = cram_decoder_init(hdr, c->u.xrle.len_encoding,
                                             cp, sub_size, E_INT, version, vv);
     if (c->u.xrle.len_codec == NULL)
         goto malformed;
     cp += sub_size;
 
     c->u.xrle.lit_encoding = vv->varint_get32(&cp, endp, &err);
     sub_size = vv->varint_get32(&cp, endp, &err);
     if (sub_size < 0 || endp - cp < sub_size)
         goto malformed;
     c->u.xrle.lit_codec = cram_decoder_init(hdr, c->u.xrle.lit_encoding,
                                             cp, sub_size, option, version, vv);
     if (c->u.xrle.lit_codec == NULL)
         goto malformed;
     cp += sub_size;
 
     if (err)
         goto malformed;
 
     return c;
 
  malformed:
     fprintf(stderr, "Malformed xrle header stream\n");
-    free(c);
+    cram_xrle_decode_free(c);
     return NULL;
 }
 
