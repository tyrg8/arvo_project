commit ab9ccf9eb9a6571d84bd0b2c8e185565d0d700f6
Author: Luca Deri <deri@ntop.org>
Date:   Tue Nov 12 12:28:34 2019 +0100

    Fixed new nDPi API

diff --git a/example/ndpiReader.c b/example/ndpiReader.c
index 48125429..abf1bce5 100644
--- a/example/ndpiReader.c
+++ b/example/ndpiReader.c
@@ -4151,110 +4151,110 @@ static void produceBpfFilter(char *filePath) {
 /**
    @brief MAIN FUNCTION
 **/
 #ifdef APP_HAS_OWN_MAIN
 int orginal_main(int argc, char **argv) {
 #else
   int main(int argc, char **argv) {
 #endif
     int i;
 
     if(ndpi_get_api_version() != NDPI_API_VERSION) {
       printf("nDPI Library version mismatch: please make sure this code and the nDPI library are in sync\n");
       return(-1);
     }
 
     /* Internal checks */
     automataUnitTest();
     serializerUnitTest();
     analyzeUnitTest();
 
     gettimeofday(&startup_time, NULL);
-    ndpi_info_mod = ndpi_init_detection_module(0 /* Don't skip tor hosts */);
+    ndpi_info_mod = ndpi_init_detection_module(ndpi_no_prefs);
 
     if(ndpi_info_mod == NULL) return -1;
 
     memset(ndpi_thread_info, 0, sizeof(ndpi_thread_info));
 
     parseOptions(argc, argv);
 
     if(bpf_filter_flag) {
 #ifdef HAVE_JSON_C
       produceBpfFilter(_diagnoseFilePath);
       return 0;
 #endif
     }
 
     if((!json_flag) && (!quiet_mode)) {
       printf("\n-----------------------------------------------------------\n"
 	     "* NOTE: This is demo app to show *some* nDPI features.\n"
 	     "* In this demo we have implemented only some basic features\n"
 	     "* just to show you what you can do with the library. Feel \n"
 	     "* free to extend it and send us the patches for inclusion\n"
 	     "------------------------------------------------------------\n\n");
 
       printf("Using nDPI (%s) [%d thread(s)]\n", ndpi_revision(), num_threads);
     }
 
     signal(SIGINT, sigproc);
 
     for(i=0; i<num_loops; i++)
       test_lib();
 
     if(results_path)  free(results_path);
     if(results_file)  fclose(results_file);
     if(extcap_dumper) pcap_dump_close(extcap_dumper);
     if(ndpi_info_mod) ndpi_exit_detection_module(ndpi_info_mod);
     if(csv_fp)        fclose(csv_fp);
 
     return 0;
   }
 
 #ifdef WIN32
 #ifndef __GNUC__
 #define EPOCHFILETIME (116444736000000000i64)
 #else
 #define EPOCHFILETIME (116444736000000000LL)
 #endif
 
 /**
    @brief Timezone
 **/
   struct timezone {
     int tz_minuteswest; /* minutes W of Greenwich */
     int tz_dsttime;     /* type of dst correction */
   };
 
 
 /**
    @brief Set time
 **/
   int gettimeofday(struct timeval *tv, struct timezone *tz) {
     FILETIME        ft;
     LARGE_INTEGER   li;
     __int64         t;
     static int      tzflag;
 
     if(tv) {
       GetSystemTimeAsFileTime(&ft);
       li.LowPart  = ft.dwLowDateTime;
       li.HighPart = ft.dwHighDateTime;
       t  = li.QuadPart;       /* In 100-nanosecond intervals */
       t -= EPOCHFILETIME;     /* Offset to the Epoch time */
       t /= 10;                /* In microseconds */
       tv->tv_sec  = (long)(t / 1000000);
       tv->tv_usec = (long)(t % 1000000);
     }
 
     if(tz) {
       if(!tzflag) {
 	_tzset();
 	tzflag++;
       }
 
       tz->tz_minuteswest = _timezone / 60;
       tz->tz_dsttime = _daylight;
     }
 
     return 0;
   }
 #endif /* WIN32 */
diff --git a/fuzz/Makefile.am b/fuzz/Makefile.am
index 4693d407..10b4e593 100644
--- a/fuzz/Makefile.am
+++ b/fuzz/Makefile.am
@@ -5,7 +5,7 @@ fuzz_process_packet_LDFLAGS = ../src/lib/libndpi.a
 if HAS_FUZZLDFLAGS
     fuzz_process_packet_LDFLAGS += $(LIB_FUZZING_ENGINE)
 else
-    fuzz_process_packet_SOURCES += onefile.c
+    fuzz_process_packet_SOURCES += # onefile.c
 endif
 # force usage of CXX for linker
 fuzz_process_packet_LINK=$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
diff --git a/fuzz/fuzz_process_packet.c b/fuzz/fuzz_process_packet.c
index 88319b41..56cafd98 100644
--- a/fuzz/fuzz_process_packet.c
+++ b/fuzz/fuzz_process_packet.c
@@ -9,20 +9,20 @@ struct ndpi_id_struct *src;
 struct ndpi_id_struct *dst;
 
 int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
-    if (ndpi_info_mod == NULL) {
-        ndpi_info_mod = ndpi_init_detection_module();
-        NDPI_PROTOCOL_BITMASK all;
-        NDPI_BITMASK_SET_ALL(all);
-        ndpi_set_protocol_detection_bitmask2(ndpi_info_mod, &all);
-        ndpi_flow = ndpi_flow_malloc(SIZEOF_FLOW_STRUCT);
-        src = ndpi_malloc(SIZEOF_ID_STRUCT);
-        dst = ndpi_malloc(SIZEOF_ID_STRUCT);
-    }
+  if (ndpi_info_mod == NULL) {
+    ndpi_info_mod = ndpi_init_detection_module(ndpi_no_prefs);
+    NDPI_PROTOCOL_BITMASK all;
+    NDPI_BITMASK_SET_ALL(all);
+    ndpi_set_protocol_detection_bitmask2(ndpi_info_mod, &all);
+    ndpi_flow = ndpi_flow_malloc(SIZEOF_FLOW_STRUCT);
+    src = ndpi_malloc(SIZEOF_ID_STRUCT);
+    dst = ndpi_malloc(SIZEOF_ID_STRUCT);
+  }
 
-    memset(ndpi_flow, 0, SIZEOF_FLOW_STRUCT);
-    memset(src, 0, SIZEOF_ID_STRUCT);
-    memset(dst, 0, SIZEOF_ID_STRUCT);
-    ndpi_detection_process_packet(ndpi_info_mod, ndpi_flow, Data, Size, 0, src, dst);
+  memset(ndpi_flow, 0, SIZEOF_FLOW_STRUCT);
+  memset(src, 0, SIZEOF_ID_STRUCT);
+  memset(dst, 0, SIZEOF_ID_STRUCT);
+  ndpi_detection_process_packet(ndpi_info_mod, ndpi_flow, Data, Size, 0, src, dst);
 
-    return 0;
+  return 0;
 }
