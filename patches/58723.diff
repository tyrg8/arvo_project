commit b47c8b738ae3e400ec02269fae9857222218e9d5
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Tue Jun 6 07:29:41 2023 +0900

    gc.c (clear_all_old): fix a generational GC bug
    
    This issue was caused by 375d22b that introduced a serious mark
    leakage in the generational GC mode.

diff --git a/src/gc.c b/src/gc.c
index 4b6efdc39..83d64486f 100644
--- a/src/gc.c
+++ b/src/gc.c
@@ -1236,18 +1236,16 @@ static void
 clear_all_old(mrb_state *mrb, mrb_gc *gc)
 {
   mrb_assert(is_generational(gc));
   if (gc->full) {
     /* finish the half baked GC */
     incremental_gc_finish(mrb, gc);
   }
-  else {
-    /* Sweep the dead objects, then reset all the live objects
-     * (including all the old objects, of course) to white. */
-    gc->generational = FALSE;
-    prepare_incremental_sweep(mrb, gc);
-    incremental_gc_finish(mrb, gc);
-    gc->generational = TRUE;
-  }
+  /* Sweep the dead objects, then reset all the live objects
+   * (including all the old objects, of course) to white. */
+  gc->generational = FALSE;
+  prepare_incremental_sweep(mrb, gc);
+  incremental_gc_finish(mrb, gc);
+  gc->generational = TRUE;
   /* The gray objects have already been painted as white */
   gc->atomic_gray_list = gc->gray_list = NULL;
 }
