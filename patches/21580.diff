commit 57b7de032f60d0499ae2debb293d0f8456acfdfb
Author: Ebrahim Byagowi <ebrahim@gnu.org>
Date:   Sun Apr 5 17:07:48 2020 +0430

    [subset] Fail ClassDefFormat1 serialization if no space available
    
    Fixes https://crbug.com/oss-fuzz/21580

diff --git a/src/hb-ot-layout-common.hh b/src/hb-ot-layout-common.hh
index fe49afbde..019370908 100644
--- a/src/hb-ot-layout-common.hh
+++ b/src/hb-ot-layout-common.hh
@@ -1622,145 +1622,145 @@ static void ClassDef_remap_and_serialize (hb_serialize_context_t *c,
 struct ClassDefFormat1
 {
   friend struct ClassDef;
 
   private:
   unsigned int get_class (hb_codepoint_t glyph_id) const
   {
     return classValue[(unsigned int) (glyph_id - startGlyph)];
   }
 
   template<typename Iterator,
 	   hb_requires (hb_is_iterator (Iterator))>
   bool serialize (hb_serialize_context_t *c,
                   Iterator it)
   {
     TRACE_SERIALIZE (this);
     if (unlikely (!c->extend_min (*this))) return_trace (false);
 
     if (unlikely (!it))
     {
       startGlyph = 0;
       classValue.len = 0;
       return_trace (true);
     }
 
     hb_codepoint_t glyph_min = (*it).first;
     hb_codepoint_t glyph_max = + it
                                | hb_map (hb_first)
                                | hb_reduce (hb_max, 0u);
     unsigned glyph_count = glyph_max - glyph_min + 1;
 
     startGlyph = glyph_min;
-    classValue.serialize (c, glyph_count);
+    if (unlikely (!classValue.serialize (c, glyph_count))) return_trace (false);
     for (const hb_pair_t<hb_codepoint_t, unsigned>& gid_klass_pair : + it)
     {
       unsigned idx = gid_klass_pair.first - glyph_min;
       classValue[idx] = gid_klass_pair.second;
     }
     return_trace (true);
   }
 
   bool subset (hb_subset_context_t *c,
                hb_map_t *klass_map = nullptr /*OUT*/) const
   {
     TRACE_SUBSET (this);
     const hb_set_t &glyphset = *c->plan->_glyphset_gsub;
     const hb_map_t &glyph_map = *c->plan->glyph_map;
 
     hb_sorted_vector_t<HBGlyphID> glyphs;
     hb_set_t orig_klasses;
     hb_map_t gid_org_klass_map;
 
     hb_codepoint_t start = startGlyph;
     hb_codepoint_t end   = start + classValue.len;
     for (const hb_codepoint_t gid : + hb_range (start, end)
 				    | hb_filter (glyphset))
     {
       unsigned klass = classValue[gid - start];
       if (!klass) continue;
 
       glyphs.push (glyph_map[gid]);
       gid_org_klass_map.set (glyph_map[gid], klass);
       orig_klasses.add (klass);
     }
 
     ClassDef_remap_and_serialize (c->serializer, glyphset, gid_org_klass_map,
                                   glyphs, orig_klasses, klass_map);
     return_trace ((bool) glyphs);
   }
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (c->check_struct (this) && classValue.sanitize (c));
   }
 
   template <typename set_t>
   bool add_coverage (set_t *glyphs) const
   {
     unsigned int start = 0;
     unsigned int count = classValue.len;
     for (unsigned int i = 0; i < count; i++)
     {
       if (classValue[i])
 	continue;
 
       if (start != i)
 	if (unlikely (!glyphs->add_range (startGlyph + start, startGlyph + i)))
 	  return false;
 
       start = i + 1;
     }
     if (start != count)
       if (unlikely (!glyphs->add_range (startGlyph + start, startGlyph + count)))
 	return false;
 
     return true;
   }
 
   template <typename set_t>
   bool add_class (set_t *glyphs, unsigned int klass) const
   {
     unsigned int count = classValue.len;
     for (unsigned int i = 0; i < count; i++)
       if (classValue[i] == klass) glyphs->add (startGlyph + i);
     return true;
   }
 
   bool intersects (const hb_set_t *glyphs) const
   {
     /* TODO Speed up, using hb_set_next()? */
     hb_codepoint_t start = startGlyph;
     hb_codepoint_t end = startGlyph + classValue.len;
     for (hb_codepoint_t iter = startGlyph - 1;
 	 hb_set_next (glyphs, &iter) && iter < end;)
       if (classValue[iter - start]) return true;
     return false;
   }
   bool intersects_class (const hb_set_t *glyphs, unsigned int klass) const
   {
     unsigned int count = classValue.len;
     if (klass == 0)
     {
       /* Match if there's any glyph that is not listed! */
       hb_codepoint_t g = HB_SET_VALUE_INVALID;
       if (!hb_set_next (glyphs, &g)) return false;
       if (g < startGlyph) return true;
       g = startGlyph + count - 1;
       if (hb_set_next (glyphs, &g)) return true;
       /* Fall through. */
     }
     for (unsigned int i = 0; i < count; i++)
       if (classValue[i] == klass && glyphs->has (startGlyph + i))
 	return true;
     return false;
   }
 
   protected:
   HBUINT16	classFormat;	/* Format identifier--format = 1 */
   HBGlyphID	startGlyph;	/* First GlyphID of the classValueArray */
   ArrayOf<HBUINT16>
 		classValue;	/* Array of Class Values--one per GlyphID */
   public:
   DEFINE_SIZE_ARRAY (6, classValue);
 };
diff --git a/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5704307501694976 b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5704307501694976
new file mode 100644
index 000000000..f2f0ec9c9
Binary files /dev/null and b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5704307501694976 differ
