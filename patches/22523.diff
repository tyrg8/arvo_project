commit 50aab202d24331ef35b9eff68d96ef9f97baf6a1
Author: seladb <pcapplusplus@gmail.com>
Date:   Sun May 31 05:52:17 2020 -0400

    Bugfixes 22513, 22523, 22529 in oss-fuzz: various fixes in SSL layer

diff --git a/Packet++/header/SSLLayer.h b/Packet++/header/SSLLayer.h
index 2ef2bd7c..4ca7329a 100644
--- a/Packet++/header/SSLLayer.h
+++ b/Packet++/header/SSLLayer.h
@@ -157,402 +157,404 @@
 /**
  * \namespace pcpp
  * \brief The main namespace for the PcapPlusPlus lib
  */
 namespace pcpp
 {
 
 	/**
 	 * @class SSLLayer
 	 * The base class for the 4 record type classes. Each record type is represented as a layer. See SSLLayer.h for
 	 * detailed explanation of the TLS/SSL protocol support in PcapPlusPlus.
 	 * This class provides the common functionality used by all record types and also contains static methods for identifying
 	 * an creating SSL/TLS record type layers
 	 */
 	class SSLLayer : public Layer
 	{
 	public:
 
 		/**
 		 * A static method that checks whether the port is considered as SSL/TLS
 		 * @param[in] port The port number to be checked
 		 */
 		static inline bool isSSLPort(uint16_t port);
 
 		/**
 		 * A static methods that gets raw data of a layer and checks whether this data is a SSL/TLS record or not. This check is
 		 * done using the source/dest port and matching of a legal record type in the raw data. The list of ports identified
 		 * as SSL/TLS is hard-coded and includes the following ports:
 		 * - Port 443 [HTTPS]
 		 * - Port 465 [LDAPS]
 		 * - Port 636 [FTPS]
 		 * - Port 989 [FTPS - data]
 		 * - Port 990 [FTPS - control]
 		 * - Port 992 [Telnet over TLS/SSL[
 		 * - Port 993 [IMAPS]
 		 * - Port 995 [POP3S]
 		 * @param[in] srcPort The source port of the packet that contains the raw data. Source port (or dest port) are a
 		 * criteria to identify SSL/TLS packets
 		 * @param[in] dstPort The dest port of the packet that contains the raw data. Dest port (or source port) are a
 		 * criteria to identify SSL/TLS packets
 		 * @param[in] data The data to check
 		 * @param[in] dataLen Length (in bytes) of the data
+		 * @param[in] ignorePorts SSL/TLS ports are only relevant for parsing the first SSL/TLS message, but are not relevant
+		 * for parsing subsequent messages. This parameter can be set to "true" to skip SSL/TLS ports check. This is an 
+		 * optional paramter and its default is "false"
 		 */
-		static bool IsSSLMessage(uint16_t srcPort, uint16_t dstPort, uint8_t* data, size_t dataLen);
+		static bool IsSSLMessage(uint16_t srcPort, uint16_t dstPort, uint8_t* data, size_t dataLen, bool ignorePorts = false);
 
 		/**
 		 * A static method that creates SSL/TLS layers by raw data. This method parses the raw data, finds if and which
 		 * SSL/TLS record it is and creates the corresponding record layer. It's the responsibility of the user to free
 		 * the created object when done using it
 		 * @param[in] data A pointer to the raw data
 		 * @param[in] dataLen Size of the data in bytes
 		 * @param[in] prevLayer A pointer to the previous layer
 		 * @param[in] packet A pointer to the Packet instance where layer will be stored in
 		 * @return A pointer to the newly created record layer. If no SSL/TLS record could be identified from the raw data
 		 * NULL is returned
 		 */
 		static SSLLayer* createSSLMessage(uint8_t* data, size_t dataLen, Layer* prevLayer, Packet* packet);
 
 		/**
 		 * A static method that converts SSLVersion enum value to string
 		 * @param[in] ver The enum value
 		 * @return The string representation of the enum value
 		 */
 		static std::string sslVersionToString(SSLVersion ver);
 
 		/**
 		 * Get a pointer to the record header. Notice this points directly to the data, so every change will change the actual packet data
 		 * @return A pointer to the @ref ssl_tls_record_layer
 		 */
 		ssl_tls_record_layer* getRecordLayer() const { return (ssl_tls_record_layer*)m_Data; }
 
 		/**
 		 * @return The SSL/TLS version used in this record (parsed from the record)
 		 */
 		SSLVersion getRecordVersion() const;
 
 		/**
 		 * @return The SSL/TLS record type as parsed from the record
 		 */
 		SSLRecordType getRecordType() const;
 
 		// implement abstract methods
 
 		/**
 		 * @return The record size as extracted from the record data (in ssl_tls_record_layer#length)
 		 */
 		size_t getHeaderLen() const;
 
 		/**
 		 * Several SSL/TLS records can reside in a single packets. So this method checks the remaining data and if it's
 		 * identified as SSL/TLS it creates another SSL/TLS record layer as the next layer
 		 */
 		void parseNextLayer();
 
 		OsiModelLayer getOsiModelLayer() const { return OsiModelPresentationLayer; }
 
 	protected:
 		SSLLayer(uint8_t* data, size_t dataLen, Layer* prevLayer, Packet* packet) : Layer(data, dataLen, prevLayer, packet) { m_Protocol = SSL; }
 
 	}; // class SSLLayer
 
 
 	/**
 	 * @class SSLHandshakeLayer
 	 * Represents SSL/TLS handshake layer. This layer may contain one or more handshake messages (all of them inherit from
 	 * the base class SSLHandshakeMessage) which are the SSL/TLS handshake message sent between a client and a server until
 	 * they establish a secure connection (e.g client-hello, server-hello, certificate, client-key-exchange,
 	 * server-key-exchange, etc.). Usually this layer will contain just one message (as the first example below
 	 * demonstrates). But there are cases a layer may contain more than 1 message. To better explain this layer structure
 	 * we'll use 2 examples. The first will be client-hello message. The layer structure will look like this:
 	  @verbatim
 
 			  |------------------- SSLHandshakeLayer ----------------------|
 			  +----------------------+-------------------------------------+
 			  | ssl_tls_record_layer |       SSLClientHelloMessage         |
 			  |        struct        |                                     |
 			  +----------------------+-------------------------------------+
 			   /     |       \               |          \         \      \
 			  /    version    \      |   handshake       \         \      \
 			 /     TLS1_0      \            type          \         \     rest of
 		  type                  \    | SSL_CLIENT_HELLO    \         \    message fields...
 	  SSL_HANDSHAKE           length                   handshake      \
 		  (22)                 xxx   |                  version      message
 														 TLS1_2      length
 									 |                                yyy
 	  @endverbatim
 
 	 * Second example is a multiple-message handshake layer comprises of server-hello, certificate and server-key-exchange
 	 * messages:
 
 	  @verbatim
 
 			  |---------------------------------------------- SSLHandshakeLayer -----------------------------------------------------|
 			  +----------------------+-------------------------------------+---------------------------+-----------------------------+
 			  | ssl_tls_record_layer |       SSLServerHelloMessage         |   SSLCertificateMessage   | SSLServerKeyExchangeMessage |
 			  |        struct        |                                     |                           |                             |
 			  +----------------------+-------------------------------------+---------------------------+-----------------------------+
 			   /     |       \               |          \         \               |           \               |            \
 			  /    version    \      |   handshake       \        rest of  |      |          rest      |      |            rest
 			 /     TLS1_0      \            type          \       message      handshake   of fields...   handshake    of fields...
 		  type                  \    | SSL_SERVER_HELLO    \      fields...|     type                  |     type
 	  SSL_HANDSHAKE           length                   handshake             SSL_CERTIFICATE             SSL_SERVER_KEY_EXCHANGE
 		  (22)                 xxx   |               version,length        |                           |
 
 									 |                                     |                           |
 
 	  @endverbatim
 	 */
 	class SSLHandshakeLayer: public SSLLayer
 	{
 	public:
 
 		/**
 		 * C'tor for this class that creates the layer from an existing packet raw data
 		 * @param[in] data A pointer to the raw data
 		 * @param[in] dataLen Size of the data in bytes
 		 * @param[in] prevLayer A pointer to the previous layer
 		 * @param[in] packet A pointer to the Packet instance where layer will be stored in
 		 */
 		SSLHandshakeLayer(uint8_t* data, size_t dataLen, Layer* prevLayer, Packet* packet);
 
 		/**
 		 * @return The number of messages in this layer instance
 		 */
 		size_t getHandshakeMessagesCount() const { return m_MessageList.size(); }
 
 		/**
 		 * Get a pointer to an handshake message by index. The message are numbered according to their order of appearance
 		 * in the layer. If index is out of bounds (less than 0 or larger than total amount of message) NULL will be
 		 * returned
 		 * @param[in] index The index of the message to return
 		 * @return The pointer to the message object or NULL if index is out of bounds
 		 */
 		SSLHandshakeMessage* getHandshakeMessageAt(int index) const;
 
 		/**
 		 * A templated method to get a message of a certain type. If no message of such type is found, NULL is returned
 		 * @return A pointer to the message of the requested type, NULL if not found
 		 */
 		template<class THandshakeMessage>
 		THandshakeMessage* getHandshakeMessageOfType() const;
 
 		/**
 		 * A templated method to get the first message of a certain type, starting to search from a certain message.
 		 * For example: if the layer looks like: HelloRequest(1) -> HelloRequest(2)
 		 * and the user put HelloRequest(1) as a parameter and wishes to search for an HelloRequest message, the
 		 * HelloRequest(2) will be returned.<BR>
 		 * If no layer of such type is found, NULL is returned
 		 * @param[in] after A pointer to the message to start search from
 		 * @return A pointer to the message of the requested type, NULL if not found
 		 */
 		template<class THandshakeMessage>
 		THandshakeMessage* getNextHandshakeMessageOfType(SSLHandshakeMessage* after) const;
 
 		// implement abstract methods
 
 		std::string toString() const;
 
 		/**
 		 * There are no calculated fields for this layer
 		 */
 		void computeCalculateFields() {}
 
 	private:
 		PointerVector<SSLHandshakeMessage> m_MessageList;
 	}; // class SSLHandshakeLayer
 
 
 	/**
 	 * @class SSLChangeCipherSpecLayer
 	 * Represents SSL/TLS change-cipher-spec layer. This layer has no additional fields besides common fields described in
 	 * SSLLayer
 	 */
 	class SSLChangeCipherSpecLayer : public SSLLayer
 	{
 	public:
 
 		/**
 		 * C'tor for this class that creates the layer from an existing packet raw data
 		 * @param[in] data A pointer to the raw data
 		 * @param[in] dataLen Size of the data in bytes
 		 * @param[in] prevLayer A pointer to the previous layer
 		 * @param[in] packet A pointer to the Packet instance where layer will be stored in
 		 */
 		SSLChangeCipherSpecLayer(uint8_t* data, size_t dataLen, Layer* prevLayer, Packet* packet)
 			: SSLLayer(data, dataLen, prevLayer, packet) {}
 
 		~SSLChangeCipherSpecLayer() {}
 
 		// implement abstract methods
 
 		std::string toString() const;
 
 		/**
 		 * There are no calculated fields for this layer
 		 */
 		void computeCalculateFields() {}
 	}; // class SSLChangeCipherSpecLayer
 
 
 	/**
 	 * @class SSLAlertLayer
 	 * Represents SSL/TLS alert layer. Inherits from SSLLayer and adds parsing functionality such as retrieving the alert
 	 * level and description
 	 */
 	class SSLAlertLayer : public SSLLayer
 	{
 	public:
 
 		/**
 		 * C'tor for this class that creates the layer from an existing packet raw data
 		 * @param[in] data A pointer to the raw data
 		 * @param[in] dataLen Size of the data in bytes
 		 * @param[in] prevLayer A pointer to the previous layer
 		 * @param[in] packet A pointer to the Packet instance where layer will be stored in
 		 */
 		SSLAlertLayer(uint8_t* data, size_t dataLen, Layer* prevLayer, Packet* packet)
 			: SSLLayer(data, dataLen, prevLayer, packet) {}
 
 		~SSLAlertLayer() {}
 
 		/**
 		 * @return SSL/TLS alert level. Will return ::SSL_ALERT_LEVEL_ENCRYPTED if alert is encrypted
 		 */
 		SSLAlertLevel getAlertLevel() const;
 
 		/**
 		 * @return SSL/TLS alert description. Will return ::SSL_ALERT_ENCRYPTED if alert is encrypted
 		 */
 		SSLAlertDescription getAlertDescription();
 
 		// implement abstract methods
 
 		std::string toString() const;
 
 		/**
 		 * There are no calculated fields for this layer
 		 */
 		void computeCalculateFields() {}
 	}; // class SSLAlertLayer
 
 
 	/**
 	 * @class SSLApplicationDataLayer
 	 * Represents SSL/TLS application data layer. This message contains the encrypted data transfered from client to
 	 * server and vice-versa after the SSL/TLS handshake was completed successfully
 	 */
 	class SSLApplicationDataLayer : public SSLLayer
 	{
 	public:
 
 		/**
 		 * C'tor for this class that creates the layer from an existing packet raw data
 		 * @param[in] data A pointer to the raw data
 		 * @param[in] dataLen Size of the data in bytes
 		 * @param[in] prevLayer A pointer to the previous layer
 		 * @param[in] packet A pointer to the Packet instance where layer will be stored in
 		 */
 		SSLApplicationDataLayer(uint8_t* data, size_t dataLen, Layer* prevLayer, Packet* packet)
 			: SSLLayer(data, dataLen, prevLayer, packet) {}
 
 		~SSLApplicationDataLayer() {}
 
 		/**
 		 * @return A pointer to the encrypted data. This data can be decrypted only if you have the symmetric key
 		 * that was agreed between the client and the server during SSL/TLS handshake process
 		 */
 		uint8_t* getEncrpytedData() const;
 
 		/**
 		 * @return The length in bytes of the encrypted data returned in getEncrpytedData()
 		 */
 		size_t getEncrpytedDataLen() const;
 
 		// implement abstract methods
 
 		std::string toString() const;
 
 		/**
 		 * There are no calculated fields for this layer
 		 */
 		void computeCalculateFields() {}
 	}; // class SSLApplicationDataLayer
 
 
 	template<class THandshakeMessage>
 	THandshakeMessage* SSLHandshakeLayer::getHandshakeMessageOfType() const
 	{
 		size_t vecSize = m_MessageList.size();
 		for (size_t i = 0; i < vecSize; i++)
 		{
 			SSLHandshakeMessage* curElem = const_cast<SSLHandshakeMessage*>(m_MessageList.at(i));
 			 if (dynamic_cast<THandshakeMessage*>(curElem) != NULL)
 				 return (THandshakeMessage*)curElem;
 		}
 
 		// element not found
 		return NULL;
 	} // getHandshakeMessageOfType
 
 
 	template<class THandshakeMessage>
 	THandshakeMessage* SSLHandshakeLayer::getNextHandshakeMessageOfType(SSLHandshakeMessage* after) const
 	{
 		size_t vecSize = m_MessageList.size();
 		size_t afterIndex;
 
 		// find the index of "after"
 		for (afterIndex = 0; afterIndex < vecSize; afterIndex++)
 		{
 			SSLHandshakeMessage* curElem = const_cast<SSLHandshakeMessage*>(m_MessageList.at(afterIndex));
 			if (curElem == after)
 				break;
 		}
 
 		// "after" not found
 		if (afterIndex == vecSize)
 			return NULL;
 
 		for (size_t i = afterIndex+1; i < vecSize; i++)
 		{
 			SSLHandshakeMessage* curElem = const_cast<SSLHandshakeMessage*>(m_MessageList.at(i));
 			 if (dynamic_cast<THandshakeMessage*>(curElem) != NULL)
 				 return (THandshakeMessage*)curElem;
 		}
 
 		// element not found
 		return NULL;
 	} // getNextHandshakeMessageOfType
 
 
 	// implementation of inline methods
 
 	bool SSLLayer::isSSLPort(uint16_t port)
 	{
 		if (port == 443) // HTTPS, this is likely case
 			return true;
 
 		switch (port)
 		{
-		case 0:   // default
 		case 261: // NSIIOPS
 		case 448: // DDM-SSL
 		case 465: // SMTPS
 		case 563: // NNTPS
 		case 614: // SSHELL
 		case 636: // LDAPS
 		case 989: // FTPS - data
 		case 990: // FTPS - control
 		case 992: // Telnet over TLS/SSL
 		case 993: // IMAPS
 		case 994: // IRCS
 		case 995: // POP3S
 			return true;
 		default:
 			return false;
 		}
 	} // isSSLPort
 
 } // namespace pcpp
 
 #endif /* PACKETPP_SSL_LAYER */
diff --git a/Packet++/src/SSLHandshake.cpp b/Packet++/src/SSLHandshake.cpp
index 6cfa647e..1f507a88 100644
--- a/Packet++/src/SSLHandshake.cpp
+++ b/Packet++/src/SSLHandshake.cpp
@@ -1166,29 +1166,32 @@ bool SSLHandshakeMessage::isMessageComplete() const
 SSLClientHelloMessage::SSLClientHelloMessage(uint8_t* data, size_t dataLen, SSLHandshakeLayer* container)
 	: SSLHandshakeMessage(data, dataLen, container)
 {
 	size_t extensionLengthOffset = sizeof(ssl_tls_client_server_hello) + sizeof(uint8_t) + getSessionIDLength() + sizeof(uint16_t) + sizeof(uint16_t)*getCipherSuiteCount() + 2*sizeof(uint8_t);
 	if (extensionLengthOffset + sizeof(uint16_t) > m_DataLen)
 		return;
 
 	uint8_t* extensionLengthPos = m_Data + extensionLengthOffset;
 	uint16_t extensionLength = getExtensionsLenth();
 	uint8_t* extensionPos = extensionLengthPos + sizeof(uint16_t);
 	uint8_t* curPos = extensionPos;
 	size_t messageLen = getMessageLength();
-	while ((curPos - extensionPos) < (int)extensionLength && (curPos - m_Data) < (int)messageLen)
+	size_t minSSLExtentionLen = 2*sizeof(uint16_t) + sizeof(uint8_t);
+	while ((curPos - extensionPos) < (int)extensionLength 
+		&& (curPos - m_Data) < (int)messageLen 
+		&& (int)messageLen - (curPos - m_Data) >= (int)minSSLExtentionLen)
 	{
 		SSLExtension* newExt = NULL;
 		uint16_t sslExtType = be16toh(*(uint16_t*)curPos);
 		if (sslExtType == SSL_EXT_SERVER_NAME)
 		{
 			newExt = new SSLServerNameIndicationExtension(curPos);
 		}
 		else
 		{
 			newExt = new SSLExtension(curPos);
 		}
 
 		m_ExtensionList.pushBack(newExt);
 		curPos += newExt->getTotalLength();
 	}
 }
@@ -1308,29 +1311,32 @@ std::string SSLClientHelloMessage::toString() const
 SSLServerHelloMessage::SSLServerHelloMessage(uint8_t* data, size_t dataLen, SSLHandshakeLayer* container)
 	: SSLHandshakeMessage(data, dataLen, container)
 {
 	size_t extensionLengthOffset = sizeof(ssl_tls_client_server_hello) + sizeof(uint8_t) + getSessionIDLength() + sizeof(uint16_t) + sizeof(uint8_t);
 	if (extensionLengthOffset + sizeof(uint16_t) > m_DataLen)
 		return;
 
 	uint8_t* extensionLengthPos = m_Data + extensionLengthOffset;
 	uint16_t extensionLength = getExtensionsLenth();
 	uint8_t* extensionPos = extensionLengthPos + sizeof(uint16_t);
 	uint8_t* curPos = extensionPos;
 	size_t messageLen = getMessageLength();
-	while ((curPos - extensionPos) < (int)extensionLength && (curPos - m_Data) < (int)messageLen)
+	size_t minSSLExtentionLen = 2*sizeof(uint16_t) + sizeof(uint8_t);
+	while ((curPos - extensionPos) < (int)extensionLength 
+		&& (curPos - m_Data) < (int)messageLen 
+		&& (int)messageLen - (curPos - m_Data) >= (int)minSSLExtentionLen)
 	{
 		SSLExtension* newExt = NULL;
 		uint16_t sslExtType = be16toh(*(uint16_t*)curPos);
 		if (sslExtType == SSL_EXT_SERVER_NAME)
 		{
 			newExt = new SSLServerNameIndicationExtension(curPos);
 		}
 		else
 		{
 			newExt = new SSLExtension(curPos);
 		}
 
 		m_ExtensionList.pushBack(newExt);
 		curPos += newExt->getTotalLength();
 	}
 }
@@ -1343,9 +1349,12 @@ SSLVersion SSLServerHelloMessage::getHandshakeVersion() const
 }
 uint8_t SSLServerHelloMessage::getSessionIDLength() const
 {
+	if (m_DataLen <= sizeof(ssl_tls_client_server_hello) + sizeof(uint8_t))
+		return 0;
+
 	uint8_t val = *(m_Data + sizeof(ssl_tls_client_server_hello));
 	if ((size_t)val > m_DataLen - sizeof(ssl_tls_client_server_hello) - 1)
 		return (uint8_t)(m_DataLen - sizeof(ssl_tls_client_server_hello) - 1);
 
 	return val;
 }
@@ -1588,30 +1597,29 @@ std::string SSLClientKeyExchangeMessage::toString() const
 SSLCertificateRequestMessage::SSLCertificateRequestMessage(uint8_t* data, size_t dataLen, SSLHandshakeLayer* container)
 		: SSLHandshakeMessage(data, dataLen, container)
 {
 	if (dataLen < sizeof(ssl_tls_handshake_layer) +
 			sizeof(uint8_t)) // certificate types count (1B)
 		return;
 
 	size_t messageLen = getMessageLength();
 
 	uint8_t certificateTypesCount = *(uint8_t*)(data + sizeof(ssl_tls_handshake_layer));
 
-	if (certificateTypesCount > messageLen)
-		certificateTypesCount = messageLen;
+	if (certificateTypesCount > messageLen - sizeof(ssl_tls_handshake_layer) - sizeof(uint8_t))
+		certificateTypesCount = messageLen - sizeof(ssl_tls_handshake_layer) - sizeof(uint8_t);
 
 	uint8_t* pos = data + sizeof(ssl_tls_handshake_layer) + sizeof(uint8_t);
 	for (uint8_t i = 0; i < certificateTypesCount; i++)
 	{
 		uint8_t certType = *(uint8_t*)(pos + i);
 		if (certType == 0 ||
 				(certType > 6 && certType < 20) ||
 				(certType > 20 && certType < 64) ||
 				certType > 64)
 			m_ClientCertificateTypes.push_back(SSL_CCT_UNKNOWN);
 		else
-			m_ClientCertificateTypes.push_back((SSLClientCertificateType)certType);
+			m_ClientCertificateTypes.push_back(static_cast<SSLClientCertificateType>(certType));
 	}
-
 }
 
 std::vector<SSLClientCertificateType>& SSLCertificateRequestMessage::getCertificateTypes()
diff --git a/Packet++/src/SSLLayer.cpp b/Packet++/src/SSLLayer.cpp
index cc48f62e..4d1c6cde 100644
--- a/Packet++/src/SSLLayer.cpp
+++ b/Packet++/src/SSLLayer.cpp
@@ -13,31 +13,31 @@ namespace pcpp
 // SSLLayer methods
 // ----------------
 
-bool SSLLayer::IsSSLMessage(uint16_t srcPort, uint16_t dstPort, uint8_t* data, size_t dataLen)
+bool SSLLayer::IsSSLMessage(uint16_t srcPort, uint16_t dstPort, uint8_t* data, size_t dataLen, bool ignorePorts)
 {
 	// check the port map first
-	if (!isSSLPort(srcPort) && !isSSLPort(dstPort))
+	if (!ignorePorts && !isSSLPort(srcPort) && !isSSLPort(dstPort))
 		return false;
 
 	if (dataLen < sizeof(ssl_tls_record_layer))
 		return false;
 
 	ssl_tls_record_layer* recordLayer = (ssl_tls_record_layer*)data;
 
 	// there is no SSL message with length 0
 	if (recordLayer->length == 0)
 		return false;
 
 	if (recordLayer->recordType < 20 || recordLayer->recordType > 23)
 		return false;
 
 	uint16_t recordVersion = be16toh(recordLayer->recordVersion);
 
 	if (recordVersion != SSL3 &&
 			recordVersion != TLS1_0 &&
 			recordVersion != TLS1_1 &&
 			recordVersion != TLS1_2)
 		return false;
 
 	return true;
 }
@@ -113,14 +113,14 @@ size_t SSLLayer::getHeaderLen() const
 void SSLLayer::parseNextLayer()
 {
 	size_t headerLen = getHeaderLen();
 	if (m_DataLen <= headerLen)
 		return;
 
-	if (SSLLayer::IsSSLMessage(0, 0, m_Data + headerLen, m_DataLen - headerLen))
+	if (SSLLayer::IsSSLMessage(0, 0, m_Data + headerLen, m_DataLen - headerLen, true))
 		m_NextLayer = SSLLayer::createSSLMessage(m_Data + headerLen, m_DataLen - headerLen, this, m_Packet);
 }
 
 
 // -------------------------
 // SSLHandshakeLayer methods
 // -------------------------
diff --git a/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5165927376355328 b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5165927376355328
new file mode 100644
index 00000000..8010df91
Binary files /dev/null and b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5165927376355328 differ
diff --git a/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5723611632762880 b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5723611632762880
new file mode 100644
index 00000000..f8ba85fa
Binary files /dev/null and b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5723611632762880 differ
diff --git a/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5758569646653440 b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5758569646653440
new file mode 100644
index 00000000..7ad0aa81
Binary files /dev/null and b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5758569646653440 differ
