commit 2015c7a48ee6266d7b0c9f752e7e96e078ede480
Author: Máté Kocsis <kocsismate@woohoolabs.com>
Date:   Sun Feb 2 23:18:45 2020 +0100

    Fix another batch of indentation in tests

diff --git a/ext/dom/tests/DOMDocument_savexml_basic.phpt b/ext/dom/tests/DOMDocument_savexml_basic.phpt
index f08fc4e582..e7f47e952c 100644
--- a/ext/dom/tests/DOMDocument_savexml_basic.phpt
+++ b/ext/dom/tests/DOMDocument_savexml_basic.phpt
@@ -1,38 +1,38 @@
 --TEST--
 DOM Document : save and saveXML
 --CREDITS--
 Sami Greenbury (sami@patabugen.co.uk)
 # TestFest 2008
 --SKIPIF--
 <?php
 require_once('skipif.inc');
 ?>
 --FILE--
 <?php
 
 $xml = <<< EOXML
 <?xml version="1.0" encoding="utf-8"?>
 <courses>
-	<!-- Hello World! -->
-	<aNode>
-		<childNode>
-			<childlessNode />
-		</childNode>
-	</aNode>
+    <!-- Hello World! -->
+    <aNode>
+        <childNode>
+            <childlessNode />
+        </childNode>
+    </aNode>
 </courses>
 EOXML;
 
 $dom = new DOMDocument();
 $dom->loadXML($xml);
 $root = $dom->documentElement;
 $directory = __DIR__;
 
 $filename = $directory."/tmp_dom_savexml".time();
 var_dump($dom->save($filename));
 $result = file_get_contents($filename);
 var_dump($result == $dom->saveXML());
 
 unlink($filename);
 --EXPECT--
-int(151)
+int(181)
 bool(true)
diff --git a/ext/dom/tests/DOMNode_cloneNode_basic.phpt b/ext/dom/tests/DOMNode_cloneNode_basic.phpt
index 538ba968f4..d0503630f3 100644
--- a/ext/dom/tests/DOMNode_cloneNode_basic.phpt
+++ b/ext/dom/tests/DOMNode_cloneNode_basic.phpt
@@ -1,105 +1,105 @@
 --TEST--
 DOM cloneNode : Basic Functionality
 --SKIPIF--
 <?php
 require_once('skipif.inc');
 ?>
 --CREDITS--
 Simon Hughes <odbc3@hotmail.com>
 --FILE--
 <?php
 
 $xml = <<< EOXML
 <?xml version="1.0" encoding="ISO-8859-1"?>
 <courses>
-	<course title="one">
-		<notes>
-			<note>c1n1</note>
-			<note>c1n2</note>
-		</notes>
-	</course>
-	<course title="two">
-		<notes>
-			<note>c2n1</note>
-			<note>c2n2</note>
-		</notes>
-	</course>
+    <course title="one">
+        <notes>
+            <note>c1n1</note>
+            <note>c1n2</note>
+        </notes>
+    </course>
+    <course title="two">
+        <notes>
+            <note>c2n1</note>
+            <note>c2n2</note>
+        </notes>
+    </course>
 </courses>
 EOXML;
 
 function dumpcourse($current) {
 	$title = ($current->nodeType != XML_TEXT_NODE && $current->hasAttribute('title')) ? $current->getAttribute('title'):"no title";
 	echo "Course: $title:";echo(get_class($current)), "\n";
 	echo "~";var_dump($current->textContent);
 }
 
 $dom = new DOMDocument();
 $dom->loadXML($xml);
 $root = $dom->documentElement;
 
 // strip all text nodes from this tree
 $children = $root->childNodes;
 $len = $children->length;
 for ($index = $children->length - 1; $index >=0; $index--) {
 	$current = $children->item($index);
 	if ($current->nodeType == XML_TEXT_NODE) {
 		$noderemoved = $root->removeChild($current);
 	}
 }
 
 echo "Start cloneNode test\n";
 $first_course = $children->item(0);
 $cloned_first_course_default = $first_course->cloneNode();
 $first_course->setAttribute('title', 'new title1');
 
 $cloned_first_course_true = $first_course->cloneNode(true);
 $first_course->setAttribute('title', 'new title2');
 
 $cloned_first_course_false = $first_course->cloneNode(false);
 $first_course->setAttribute('title', 'new title3');
 
 $cloned_first_course_default->setAttribute('title', 'new title default');
 $cloned_first_course_true->setAttribute('title', 'new title true');
 $cloned_first_course_false->setAttribute('title', 'new title false');
 
 $root->appendChild($cloned_first_course_default);
 $root->appendChild($cloned_first_course_true);
 $root->appendChild($cloned_first_course_false);
 
 $children = $root->childNodes;
 for ($index = 0; $index < $children->length; $index++) {
 	echo "node $index\n";
 	dumpcourse($children->item($index));
 }
 --EXPECT--
 Start cloneNode test
 node 0
 Course: new title3:DOMElement
-~string(24) "
-		
-			c1n1
-			c1n2
-		
-	"
+~string(57) "
+        
+            c1n1
+            c1n2
+        
+    "
 node 1
 Course: two:DOMElement
-~string(24) "
-		
-			c2n1
-			c2n2
-		
-	"
+~string(57) "
+        
+            c2n1
+            c2n2
+        
+    "
 node 2
 Course: new title default:DOMElement
 ~string(0) ""
 node 3
 Course: new title true:DOMElement
-~string(24) "
-		
-			c1n1
-			c1n2
-		
-	"
+~string(57) "
+        
+            c1n1
+            c1n2
+        
+    "
 node 4
 Course: new title false:DOMElement
 ~string(0) ""
diff --git a/ext/dom/tests/DOMNode_removeChild_basic.phpt b/ext/dom/tests/DOMNode_removeChild_basic.phpt
index a4b3917d29..8dcecb52c8 100644
--- a/ext/dom/tests/DOMNode_removeChild_basic.phpt
+++ b/ext/dom/tests/DOMNode_removeChild_basic.phpt
@@ -1,105 +1,105 @@
 --TEST--
 DOM removeChild : Basic Functionality
 --SKIPIF--
 <?php
 require_once('skipif.inc');
 ?>
 --CREDITS--
 Simon Hughes <odbc3@hotmail.com>
 --FILE--
 <?php
 
 $xml = <<< EOXML
 <?xml version="1.0" encoding="ISO-8859-1"?>
 <courses>
-	<course title="one">
-		<notes>
-			<note>c1n1</note>
-			<note>c1n2</note>
-		</notes>
-	</course>
-	<course title="two">
-		<notes>
-			<note>c2n1</note>
-			<note>c2n2</note>
-		</notes>
-	</course>
+    <course title="one">
+        <notes>
+            <note>c1n1</note>
+            <note>c1n2</note>
+        </notes>
+    </course>
+    <course title="two">
+        <notes>
+            <note>c2n1</note>
+            <note>c2n2</note>
+        </notes>
+    </course>
 </courses>
 EOXML;
 
 function dumpcourse($current) {
 	$title = ($current->nodeType != XML_TEXT_NODE && $current->hasAttribute('title')) ? $current->getAttribute('title'):"no title";
 	echo "Course: $title:";echo get_class($current), "\n";
 	echo "~";var_dump($current->textContent);
 }
 
 $dom = new DOMDocument();
 $dom->loadXML($xml);
 $root = $dom->documentElement;
 
 $children = $root->childNodes;
 $len = $children->length;
 echo "original has $len nodes\n";
 for ($index = $children->length - 1; $index >=0; $index--) {
 	echo "node $index\n";
 	$current = $children->item($index);
 	dumpcourse($current);
 	if ($current->nodeType == XML_TEXT_NODE) {
 		$noderemoved = $root->removeChild($current);
 	}
 }
 $children = $root->childNodes;
 $len = $children->length;
 echo "after text removed it now has $len nodes\n";
 for ($index = 0; $index < $children->length; $index++) {
 	echo "node $index\n";
 	$current = $children->item($index);
 	dumpcourse($current);
 }
 --EXPECT--
 original has 5 nodes
 node 4
 Course: no title:DOMText
 ~string(1) "
 "
 node 3
 Course: two:DOMElement
-~string(24) "
-		
-			c2n1
-			c2n2
-		
-	"
+~string(57) "
+        
+            c2n1
+            c2n2
+        
+    "
 node 2
 Course: no title:DOMText
-~string(2) "
-	"
+~string(5) "
+    "
 node 1
 Course: one:DOMElement
-~string(24) "
-		
-			c1n1
-			c1n2
-		
-	"
+~string(57) "
+        
+            c1n1
+            c1n2
+        
+    "
 node 0
 Course: no title:DOMText
-~string(2) "
-	"
+~string(5) "
+    "
 after text removed it now has 2 nodes
 node 0
 Course: one:DOMElement
-~string(24) "
-		
-			c1n1
-			c1n2
-		
-	"
+~string(57) "
+        
+            c1n1
+            c1n2
+        
+    "
 node 1
 Course: two:DOMElement
-~string(24) "
-		
-			c2n1
-			c2n2
-		
-	"
+~string(57) "
+        
+            c2n1
+            c2n2
+        
+    "
diff --git a/ext/dom/tests/dom_comment_basic.phpt b/ext/dom/tests/dom_comment_basic.phpt
index e9d0f89bf8..7c436a747a 100644
--- a/ext/dom/tests/dom_comment_basic.phpt
+++ b/ext/dom/tests/dom_comment_basic.phpt
@@ -1,41 +1,41 @@
 --TEST--
 DOM Comment : Basic Functionality
 --SKIPIF--
 <?php
 require_once('skipif.inc');
 ?>
 --FILE--
 <?php
 
 $xml = <<< EOXML
 <?xml version="1.0" encoding="ISO-8859-1"?>
 <courses>
-	<!-- Hello World! -->
+    <!-- Hello World! -->
 </courses>
 EOXML;
 
 $dom = new DOMDocument();
 $dom->loadXML($xml);
 $root = $dom->documentElement;
 var_dump($root->hasChildNodes());
 $children = $root->childNodes;
 
 for ($index = 0; $index < $children->length; $index++) {
 	echo "--- child $index ---\n";
 	$current = $children->item($index);
 	echo get_class($current), "\n";
 	var_dump($current->textContent);
 }
 --EXPECT--
 bool(true)
 --- child 0 ---
 DOMText
-string(2) "
-	"
+string(5) "
+    "
 --- child 1 ---
 DOMComment
 string(14) " Hello World! "
 --- child 2 ---
 DOMText
 string(1) "
 "
diff --git a/ext/dom/tests/domobject_debug_handler.phpt b/ext/dom/tests/domobject_debug_handler.phpt
index 57d4a66ebb..d2834e815c 100644
--- a/ext/dom/tests/domobject_debug_handler.phpt
+++ b/ext/dom/tests/domobject_debug_handler.phpt
@@ -1,60 +1,60 @@
 --TEST--
 Objects of DOM extension: debug info object handler.
 --SKIPIF--
 <?php require_once('skipif.inc'); ?>
 --FILE--
 <?php
 $xml = <<<XML
 <foo>
-	<bar>foobar</bar>
+    <bar>foobar</bar>
 </foo>
 XML;
 $d = new domdocument;
 $d->dynamicProperty = new stdclass;
 $d->loadXML($xml);
 print_r($d);
 --EXPECTF--
 DOMDocument Object
 (
     [dynamicProperty] => stdClass Object
         (
         )
 
     [doctype] => 
     [implementation] => (object value omitted)
     [documentElement] => (object value omitted)
     [actualEncoding] => 
     [encoding] => 
     [xmlEncoding] => 
     [standalone] => 1
     [xmlStandalone] => 1
     [version] => 1.0
     [xmlVersion] => 1.0
     [strictErrorChecking] => 1
     [documentURI] => %s
     [config] => 
     [formatOutput] => 
     [validateOnParse] => 
     [resolveExternals] => 
     [preserveWhiteSpace] => 1
     [recover] => 
     [substituteEntities] => 
     [nodeName] => #document
     [nodeValue] => 
     [nodeType] => 9
     [parentNode] => 
     [childNodes] => (object value omitted)
     [firstChild] => (object value omitted)
     [lastChild] => (object value omitted)
     [previousSibling] => 
     [nextSibling] => 
     [attributes] => 
     [ownerDocument] => 
     [namespaceURI] => 
     [prefix] => 
     [localName] => 
     [baseURI] => %s
     [textContent] => 
-	foobar
+    foobar
 
 )
diff --git a/ext/standard/tests/strings/highlight_file.phpt b/ext/standard/tests/strings/highlight_file.phpt
index ac78aa38fd..4f82bfd949 100644
--- a/ext/standard/tests/strings/highlight_file.phpt
+++ b/ext/standard/tests/strings/highlight_file.phpt
@@ -1,57 +1,57 @@
 --TEST--
 highlight_file() tests
 --INI--
 highlight.string=#DD0000
 highlight.comment=#FF9900
 highlight.keyword=#007700
 highlight.default=#0000BB
 highlight.html=#000000
 allow_url_include=1
 allow_url_fopen=1
 --FILE--
 <?php
 
 $filename = __DIR__."/highlight_file.dat";
 
 var_dump(highlight_file($filename));
 
 var_dump(highlight_file('data:,<?php echo "test"; ?>'));
 
 var_dump(highlight_file('data:,<?php echo "test ?>'));
 
 $data = '
-<?php 
- class test { 
-	 public $var = 1; 
-	 private function foo() { echo "foo"; }
-	 public function bar() { var_dump(test::foo()); }
- }  
+<?php
+class test {
+    public $var = 1; 
+    private function foo() { echo "foo"; }
+    public function bar() { var_dump(test::foo()); }
+}
 ?>';
 
 file_put_contents($filename, $data);
 var_dump(highlight_file($filename));
 
 
 @unlink($filename);
 echo "Done\n";
 ?>
 --EXPECTF--
 Deprecated: Directive 'allow_url_include' is deprecated in Unknown on line 0
 
 Warning: highlight_file(%shighlight_file.dat): Failed to open stream: No such file or directory in %s on line %d
 
 Warning: highlight_file(): Failed opening '%shighlight_file.dat' for highlighting in %s on line %d
 bool(false)
 <code><span style="color: #000000">
 <span style="color: #0000BB">&lt;?php&nbsp;</span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"test"</span><span style="color: #007700">;&nbsp;</span><span style="color: #0000BB">?&gt;</span>
 </span>
 </code>bool(true)
 <code><span style="color: #000000">
 <span style="color: #0000BB">&lt;?php&nbsp;</span><span style="color: #007700">echo&nbsp;</span><span style="color: #DD0000">"test&nbsp;?&gt;</span>
 </span>
 </code>bool(true)
 <code><span style="color: #000000">
-<br /><span style="color: #0000BB">&lt;?php&nbsp;<br />&nbsp;</span><span style="color: #007700">class&nbsp;</span><span style="color: #0000BB">test&nbsp;</span><span style="color: #007700">{&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;</span><span style="color: #0000BB">$var&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">1</span><span style="color: #007700">;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;function&nbsp;</span><span style="color: #0000BB">foo</span><span style="color: #007700">()&nbsp;{&nbsp;echo&nbsp;</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #0000BB">bar</span><span style="color: #007700">()&nbsp;{&nbsp;</span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">test</span><span style="color: #007700">::</span><span style="color: #0000BB">foo</span><span style="color: #007700">());&nbsp;}<br />&nbsp;}&nbsp;&nbsp;<br /></span><span style="color: #0000BB">?&gt;</span>
+<br /><span style="color: #0000BB">&lt;?php<br /></span><span style="color: #007700">class&nbsp;</span><span style="color: #0000BB">test&nbsp;</span><span style="color: #007700">{<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;</span><span style="color: #0000BB">$var&nbsp;</span><span style="color: #007700">=&nbsp;</span><span style="color: #0000BB">1</span><span style="color: #007700">;&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;function&nbsp;</span><span style="color: #0000BB">foo</span><span style="color: #007700">()&nbsp;{&nbsp;echo&nbsp;</span><span style="color: #DD0000">"foo"</span><span style="color: #007700">;&nbsp;}<br />&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;</span><span style="color: #0000BB">bar</span><span style="color: #007700">()&nbsp;{&nbsp;</span><span style="color: #0000BB">var_dump</span><span style="color: #007700">(</span><span style="color: #0000BB">test</span><span style="color: #007700">::</span><span style="color: #0000BB">foo</span><span style="color: #007700">());&nbsp;}<br />}<br /></span><span style="color: #0000BB">?&gt;</span>
 </span>
 </code>bool(true)
 Done
diff --git a/ext/standard/tests/strings/vfprintf_variation12_64bit.phpt b/ext/standard/tests/strings/vfprintf_variation12_64bit.phpt
index 60c3614dec..d6c28bc78e 100644
--- a/ext/standard/tests/strings/vfprintf_variation12_64bit.phpt
+++ b/ext/standard/tests/strings/vfprintf_variation12_64bit.phpt
@@ -1,123 +1,123 @@
 --TEST--
 Test vfprintf() function : usage variations - octal formats with non-octal values
 --SKIPIF--
 <?php
 if (PHP_INT_SIZE != 8) die("skip this test is for 64bit platform only");
 ?>
 --FILE--
 <?php
 /* Prototype  : int vfprintf  ( resource $handle  , string $format , array $args  )
  * Description: Write a formatted string to a stream
  * Source code: ext/standard/formatted_print.c
 */
 
 /*
  * Test vfprintf() when different octal formats and non-octal values are passed to
  * the '$format' and '$args' arguments of the function
 */
 
 echo "*** Testing vfprintf() : octal formats and non-octal values ***\n";
 
 // defining array of octal formats
 $formats =
-  '%o %+o %-o
-   %lo %Lo %4o %-4o
-   %10.4o %-10.4o %.4o 
-   %\'#2o %\'2o %\'$2o %\'_2o
-   %3$o %4$o %1$o %2$o';
+    '%o %+o %-o
+    %lo %Lo %4o %-4o
+    %10.4o %-10.4o %.4o
+    %\'#2o %\'2o %\'$2o %\'_2o
+    %3$o %4$o %1$o %2$o';
 
 // Arrays of non octal values for the format defined in $format.
 // Each sub array contains non octal values which correspond to each format in $format
 $args_array = array(
 
   // array of float values
   array(2.2, .2, 10.2,
         123456.234, 123456.234, -1234.6789, +1234.6789,
         2e10, +2e12, 22e+12,
         12345.780, 12.000000011111, -12.00000111111, -123456.234,
         3.33, +4.44, 1.11,-2.22 ),
 
   // array of int values
   array(2, -2, +2,
         123456, 123456234, -12346789, +12346789,
         123200, +20000, 22212,
         12345780, 1211111, -12111111, -12345634,
         3, +4, 1,-2 ),
 
   // array of strings
   array(" ", ' ', 'hello',
         '123hello', "123hello", '-123hello', '+123hello',
         "\12345678hello", "-\12345678hello", 'h123456ello',
         "1234hello", "hello\0world", "NULL", "true",
         "3", "4", '1', '2'),
 
   // different arrays
   array( array(0), array(1, 2), array(-1, -1),
          array("123"), array('123'), array('-123'), array("-123"),
          array(true), array(false), array(FALSE),
          array("123hello"), array("1", "2"), array('123hello'), array(12=>"12twelve"),
          array("3"), array("4"), array("1"), array("2") ),
 
   // array of boolean data
   array( true, TRUE, false,
          TRUE, 0, FALSE, 1,
          true, false, TRUE,
          0, 1, 1, 0,
          1, TRUE, 0, FALSE),
 
 );
 
 /* creating dumping file */
 $data_file = __DIR__ . '/vfprintf_variation12_64bit.txt';
 if (!($fp = fopen($data_file, 'wt')))
    return;
 
 // looping to test vfprintf() with different octal formats from the above $format array
 // and with non-octal values from the above $args_array array
 $counter = 1;
 foreach($args_array as $args) {
   fprintf($fp, "\n-- Iteration %d --\n",$counter);
   vfprintf($fp, $formats, $args);
   $counter++;
 }
 
 fclose($fp);
 print_r(file_get_contents($data_file));
 echo "\n";
 
 unlink($data_file);
 
 ?>
 --EXPECT--
 *** Testing vfprintf() : octal formats and non-octal values ***
 
 -- Iteration 1 --
 2 0 12
-   361100 o 1777777777777777775456 2322
+    361100 o 1777777777777777775456 2322
                           
-   30071 14 1777777777777777777764 1777777777777777416700
-   12 361100 2 0
+    30071 14 1777777777777777777764 1777777777777777416700
+    12 361100 2 0
 -- Iteration 2 --
 2 1777777777777777777776 2
-   361100 o 1777777777777720715133 57062645
+    361100 o 1777777777777720715133 57062645
                           
-   57060664 4475347 1777777777777721631371 1777777777777720717336
-   2 361100 2 1777777777777777777776
+    57060664 4475347 1777777777777721631371 1777777777777720717336
+    2 361100 2 1777777777777777777776
 -- Iteration 3 --
 0 0 0
-   173 o 1777777777777777777605 173 
+    173 o 1777777777777777777605 173 
                           
-   2322 0 $0 _0
-   0 173 0 0
+    2322 0 $0 _0
+    0 173 0 0
 -- Iteration 4 --
 1 1 1
-   1 o    1 1   
+    1 o    1 1   
                           
-   #1 1 $1 _1
-   1 1 1 1
+    #1 1 $1 _1
+    1 1 1 1
 -- Iteration 5 --
 1 1 0
-   1 o    0 1   
+    1 o    0 1   
                           
-   #0 1 $1 _0
-   0 1 1 1
+    #0 1 $1 _0
+    0 1 1 1
diff --git a/ext/standard/tests/strings/vfprintf_variation14_64bit.phpt b/ext/standard/tests/strings/vfprintf_variation14_64bit.phpt
index a763b1c89f..c7443a1544 100644
--- a/ext/standard/tests/strings/vfprintf_variation14_64bit.phpt
+++ b/ext/standard/tests/strings/vfprintf_variation14_64bit.phpt
@@ -1,123 +1,123 @@
 --TEST--
 Test vfprintf() function : usage variations - hexa formats with non-hexa values
 --SKIPIF--
 <?php
 if (PHP_INT_SIZE != 8) die("skip this test is for 64bit platform only");
 ?>
 --FILE--
 <?php
 /* Prototype  : int vfprintf  ( resource $handle  , string $format , array $args  )
  * Description: Write a formatted string to a stream
  * Source code: ext/standard/formatted_print.c
 */
 
 /*
  * Test vfprintf() when different hexa formats and non-hexa values are passed to
  * the '$format' and '$args' arguments of the function
 */
 
 echo "*** Testing vfprintf() : hexa formats and non-hexa values ***\n";
 
 // defining array of different hexa formats
 $formats =
-  '%x %+x %-x
-   %lx %Lx %4x %-4x
-   %10.4x %-10.4x %.4x 
-   %\'#2x %\'2x %\'$2x %\'_2x
-   %3$x %4$x %1$x %2$x';
+    '%x %+x %-x
+    %lx %Lx %4x %-4x
+    %10.4x %-10.4x %.4x
+    %\'#2x %\'2x %\'$2x %\'_2x
+    %3$x %4$x %1$x %2$x';
 
 // Arrays of non hexa values for the format defined in $format.
 // Each sub array contains non hexa values which correspond to each format in $format
 $args_array = array(
 
   // array of float values
   array(2.2, .2, 10.2,
         123456.234, 123456.234, -1234.6789, +1234.6789,
         2e10, +2e12, 22e+12,
         12345.780, 12.000000011111, -12.00000111111, -123456.234,
         3.33, +4.44, 1.11,-2.22 ),
 
   // array of int values
   array(2, -2, +2,
         123456, 123456234, -12346789, +12346789,
         123200, +20000, 22212,
         12345780, 1211111, -12111111, -12345634,
         3, +4, 1,-2 ),
 
   // array of strings
   array(" ", ' ', 'hello',
         '123hello', "123hello", '-123hello', '+123hello',
         "\12345678hello", "-\12345678hello", 'h123456ello',
         "1234hello", "hello\0world", "NULL", "true",
         "3", "4", '1', '2'),
 
   // different arrays
   array( array(0), array(1, 2), array(-1, -1),
          array("123"), array('123'), array('-123'), array("-123"),
          array(true), array(TRUE), array(FALSE),
          array("123hello"), array("1", "2"), array('123hello'), array(12=>"12twelve"),
          array("3"), array("4"), array("1"), array("2") ),
 
   // array of boolean data
   array( true, TRUE, false,
          TRUE, 0, FALSE, 1,
          true, TRUE, FALSE,
          0, 1, 1, 0,
          1, TRUE, 0, FALSE),
 
 );
 
 /* creating dumping file */
 $data_file = __DIR__ . '/vfprintf_variation14_64bit.txt';
 if (!($fp = fopen($data_file, 'wt')))
    return;
 
 // looping to test vfprintf() with different hexa formats from the above $format array
 // and with non-hexa values from the above $args_array array
 $counter = 1;
 foreach($args_array as $args) {
   fprintf($fp, "\n-- Iteration %d --\n",$counter);
   vfprintf($fp, $formats, $args);
   $counter++;
 }
 
 fclose($fp);
 print_r(file_get_contents($data_file));
 echo "\n";
 
 unlink($data_file);
 
 ?>
 --EXPECT--
 *** Testing vfprintf() : hexa formats and non-hexa values ***
 
 -- Iteration 1 --
 2 0 a
-   1e240 x fffffffffffffb2e 4d2 
+    1e240 x fffffffffffffb2e 4d2 
                           
-   3039 c fffffffffffffff4 fffffffffffe1dc0
-   a 1e240 2 0
+    3039 c fffffffffffffff4 fffffffffffe1dc0
+    a 1e240 2 0
 -- Iteration 2 --
 2 fffffffffffffffe 2
-   1e240 x ffffffffff439a5b bc65a5
+    1e240 x ffffffffff439a5b bc65a5
                           
-   bc61b4 127ae7 ffffffffff4732f9 ffffffffff439ede
-   2 1e240 2 fffffffffffffffe
+    bc61b4 127ae7 ffffffffff4732f9 ffffffffff439ede
+    2 1e240 2 fffffffffffffffe
 -- Iteration 3 --
 0 0 0
-   7b x ffffffffffffff85 7b  
+    7b x ffffffffffffff85 7b  
                           
-   4d2 0 $0 _0
-   0 7b 0 0
+    4d2 0 $0 _0
+    0 7b 0 0
 -- Iteration 4 --
 1 1 1
-   1 x    1 1   
+    1 x    1 1   
                           
-   #1 1 $1 _1
-   1 1 1 1
+    #1 1 $1 _1
+    1 1 1 1
 -- Iteration 5 --
 1 1 0
-   1 x    0 1   
+    1 x    0 1   
                           
-   #0 1 $1 _0
-   0 1 1 1
+    #0 1 $1 _0
+    0 1 1 1
diff --git a/ext/standard/tests/strings/vprintf_variation4_64bit.phpt b/ext/standard/tests/strings/vprintf_variation4_64bit.phpt
index 0e5f4d6d6d..35f0663b52 100644
--- a/ext/standard/tests/strings/vprintf_variation4_64bit.phpt
+++ b/ext/standard/tests/strings/vprintf_variation4_64bit.phpt
@@ -1,108 +1,108 @@
 --TEST--
 Test vprintf() function : usage variations - int formats with non-integer values
 --SKIPIF--
 <?php
 if (PHP_INT_SIZE != 8) die("skip this test is for 64bit platform only");
 ?>
 --FILE--
 <?php
 /* Prototype  : string vprintf(string format, array args)
  * Description: Output a formatted string
  * Source code: ext/standard/formatted_print.c
 */
 
 /*
  * Test vprintf() when different int formats and non-int values are passed to
  * the '$format' and '$args' arguments of the function
 */
 
 echo "*** Testing vprintf() : int formats and non-integer values ***\n";
 
 // defining array of int formats
 $formats =
-  '%d %+d %-d 
+    '%d %+d %-d
     %ld %Ld %4d %-4d
     %10.4d %-10.4d %.4d %04.4d
     %\'#2d %\'2d %\'$2d %\'_2d
     %3$d %4$d %1$d %2$d';
 
 // Arrays of non int values for the format defined in $format.
 // Each sub array contains non int values which correspond to each format in $format
 $args_array = array(
 
   // array of float values
   array(2.2, .2, 10.2,
         123456.234, 123456.234, -1234.6789, +1234.6789,
         2e10, +2e5, 4e3, 22e+6,
         12345.780, 12.000000011111, -12.00000111111, -123456.234,
         3.33, +4.44, 1.11,-2.22 ),
 
   // array of strings
   array(" ", ' ', 'hello',
         '123hello', "123hello", '-123hello', '+123hello',
         "\12345678hello", "-\12345678hello", '0123456hello', 'h123456ello',
         "1234hello", "hello\0world", "NULL", "true",
         "3", "4", '1', '2'),
 
   // different arrays
   array( array(0), array(1, 2), array(-1, -1),
          array("123"), array('123'), array('-123'), array("-123"),
          array(true), array(false), array(TRUE), array(FALSE),
          array("123hello"), array("1", "2"), array('123hello'), array(12=>"12twelve"),
          array("3"), array("4"), array("1"), array("2") ),
 
   // array of boolean data
   array( true, TRUE, false,
          TRUE, 0, FALSE, 1,
          true, false, TRUE, FALSE,
          0, 1, 1, 0,
          1, TRUE, 0, FALSE),
 
 );
 
 // looping to test vprintf() with different int formats from the above $format array
 // and with non-int values from the above $args_array array
 $counter = 1;
 foreach($args_array as $args) {
   echo "\n-- Iteration $counter --\n";
   $result = vprintf($formats, $args);
   echo "\n";
   var_dump($result);
   $counter++;
 }
 
 ?>
 --EXPECT--
 *** Testing vprintf() : int formats and non-integer values ***
 
 -- Iteration 1 --
-2 +0 10 
+2 +0 10
     123456 d -1234 1234
     20000000000 200000     4000 22000000
     12345 12 -12 -123456
     10 123456 2 0
-int(116)
+int(115)
 
 -- Iteration 2 --
-0 +0 0 
+0 +0 0
     123 d -123 123 
              0 0          123456 0000
     1234 0 $0 _0
     0 123 0 0
-int(96)
+int(95)
 
 -- Iteration 3 --
-1 +1 1 
+1 +1 1
     1 d    1 1   
              1 1          1 0001
     #1 1 $1 _1
     1 1 1 1
-int(85)
+int(84)
 
 -- Iteration 4 --
-1 +1 0 
+1 +1 0
     1 d    0 1   
              1 0          1 0000
     #0 1 $1 _0
     0 1 1 1
-int(85)
+int(84)
diff --git a/ext/standard/tests/strings/vsprintf_variation16_64bit.phpt b/ext/standard/tests/strings/vsprintf_variation16_64bit.phpt
index 112276654c..e6cbd84484 100644
--- a/ext/standard/tests/strings/vsprintf_variation16_64bit.phpt
+++ b/ext/standard/tests/strings/vsprintf_variation16_64bit.phpt
@@ -1,104 +1,104 @@
 --TEST--
 Test vsprintf() function : usage variations - unsigned formats with signed and other types of values
 --SKIPIF--
 <?php
 if (PHP_INT_SIZE != 8) die("skip this test is for 64bit platform only");
 ?>
 --FILE--
 <?php
 /* Prototype  : string vsprintf(string format, array args)
  * Description: Return a formatted string
  * Source code: ext/standard/formatted_print.c
 */
 
 /*
  * Test vsprintf() when different unsigned formats and signed values and other types of values
  * are passed to the '$format' and '$args' arguments of the function
 */
 
 echo "*** Testing vsprintf() : unsigned formats and signed & other types of values ***\n";
 
 // defining array of unsigned formats
 $formats =
-  '%u %+u %-u
-   %lu %Lu %4u %-4u
-   %10.4u %-10.4u %.4u 
-   %\'#2u %\'2u %\'$2u %\'_2u
-   %3$u %4$u %1$u %2$u';
+    '%u %+u %-u
+    %lu %Lu %4u %-4u
+    %10.4u %-10.4u %.4u
+    %\'#2u %\'2u %\'$2u %\'_2u
+    %3$u %4$u %1$u %2$u';
 
 // Arrays of signed and other type of values for the format defined in $format.
 // Each sub array contains signed values which correspond to each format in $format
 $args_array = array(
 
   // array of float values
   array(+2.2, +.2, +10.2,
         +123456.234, +123456.234, +1234.6789,
         +2e10, +2e12, +22e+12,
         +12345.780, +12.000000011111, -12.00000111111, -123456.234,
         +3.33, +4.44, +1.11,-2.22 ),
 
   // array of strings
   array(" ", ' ', 'hello',
         '123hello', "123hello", '-123hello', '+123hello',
         "\12345678hello", "-\12345678hello", 'h123456ello',
         "1234hello", "hello\0world", "NULL", "true",
         "3", "4", '1', '2'),
 
   // different arrays
   array( array(0), array(1, 2), array(-1, -1),
          array("123"), array('123'), array('-123'), array("-123"),
          array(true), array(TRUE), array(FALSE),
          array("123hello"), array("1", "2"), array('123hello'), array(12=>"12twelve"),
          array("3"), array("4"), array("1"), array("2") ),
 
   // array of boolean data
   array( true, TRUE, false,
          TRUE, 0, FALSE, 1,
          true, TRUE, FALSE,
          0, 1, 1, 0,
          1, TRUE, 0, FALSE),
 
 );
 
 // looping to test vsprintf() with different unsigned formats from the above $format array
 // and with signed and other types of  values from the above $args_array array
 $counter = 1;
 foreach($args_array as $args) {
   echo "\n-- Iteration $counter --\n";
   var_dump( vsprintf($formats, $args) );
   $counter++;
 }
 
 echo "Done";
 ?>
 --EXPECT--
 *** Testing vsprintf() : unsigned formats and signed & other types of values ***
 
 -- Iteration 1 --
-string(142) "2 0 10
-   123456 u 1234 20000000000
-   2000000000000 22000000000000 12345 
-   12 18446744073709551604 18446744073709428160 _3
-   10 123456 2 0"
+string(145) "2 0 10
+    123456 u 1234 20000000000
+    2000000000000 22000000000000 12345
+    12 18446744073709551604 18446744073709428160 _3
+    10 123456 2 0"
 
 -- Iteration 2 --
-string(97) "0 0 0
-   123 u 18446744073709551493 123 
-            0 0          0 
-   1234 0 $0 _0
-   0 123 0 0"
+string(100) "0 0 0
+    123 u 18446744073709551493 123 
+             0 0          0
+    1234 0 $0 _0
+    0 123 0 0"
 
 -- Iteration 3 --
-string(75) "1 1 1
-   1 u    1 1   
-            1 1          1 
-   #1 1 $1 _1
-   1 1 1 1"
+string(78) "1 1 1
+    1 u    1 1   
+             1 1          1
+    #1 1 $1 _1
+    1 1 1 1"
 
 -- Iteration 4 --
-string(75) "1 1 0
-   1 u    0 1   
-            1 1          0 
-   #0 1 $1 _0
-   0 1 1 1"
+string(78) "1 1 0
+    1 u    0 1   
+             1 1          0
+    #0 1 $1 _0
+    0 1 1 1"
 Done
diff --git a/ext/standard/tests/strings/vsprintf_variation8.phpt b/ext/standard/tests/strings/vsprintf_variation8.phpt
index 5eba007423..061e628c02 100644
--- a/ext/standard/tests/strings/vsprintf_variation8.phpt
+++ b/ext/standard/tests/strings/vsprintf_variation8.phpt
@@ -1,135 +1,135 @@
 --TEST--
 Test vsprintf() function : usage variations - string formats with non-string values
 --FILE--
 <?php
 /* Prototype  : string vsprintf(string format, array args)
  * Description: Return a formatted string
  * Source code: ext/standard/formatted_print.c
 */
 
 /*
  * Test vsprintf() when different string formats and non-string values are passed to
  * the '$format' and '$args' arguments of the function
 */
 
 echo "*** Testing vsprintf() : string formats and non-string values ***\n";
 
 // defining array of string formats
 $formats =
-  '%s %+s %-s
-   %ls %4s %-4s
-   %10.4s %-10.4s %04s %04.4s
-   %\'#2s %\'2s %\'$2s %\'_2s
-   %3$s %4$s %1$s %2$s';
+    '%s %+s %-s
+    %ls %4s %-4s
+    %10.4s %-10.4s %04s %04.4s
+    %\'#2s %\'2s %\'$2s %\'_2s
+    %3$s %4$s %1$s %2$s';
 
 // Arrays of non string values for the format defined in $format.
 // Each sub array contains non string values which correspond to each format in $format
 $args_array = array(
 
   // array of float values
   array(2.2, .2, 10.2,
         123456.234, -1234.6789, +1234.6789,
         2.1234567e10, +2.7654321e10, -2.7654321e10, 2.1234567e10,
         12345.780, 12.000000011111, -12.00000111111, -123456.234,
         3.33, +4.44, 1.11,-2.22 ),
 
  // array of int values
  array(2, -2, +2,
        123456, -12346789, +12346789,
        123200, +20000, -40000, 22212,
        12345780, 1211111, -12111111, -12345634,
        3, +4, 1,-2 ),
 
 
   // different arrays
   array( array(0), array(1, 2), array(-1, -1),
          array("123"), array('-123'), array("-123"),
          array(true), array(false), array(TRUE), array(FALSE),
          array("123hello"), array("1", "2"), array('123hello'), array(12=>"12twelve"),
          array("3"), array("4"), array("1"), array("2") ),
 
   // array of boolean data
   array( true, TRUE, false,
          TRUE, FALSE, 1,
          true, false, TRUE, FALSE,
          0, 1, 1, 0,
          1, TRUE, 0, FALSE),
 
 );
 
 // looping to test vsprintf() with different string formats from the above $format array
 // and with non-string values from the above $args_array array
 $counter = 1;
 foreach($args_array as $args) {
   echo "\n-- Iteration $counter --\n";
   var_dump( vsprintf($formats, $args) );
   $counter++;
 }
 
 ?>
 --EXPECTF--
 *** Testing vsprintf() : string formats and non-string values ***
 
 -- Iteration 1 --
-string(173) "2.2 0.2 10.2
-   123456.234 -1234.6789 1234.6789
-         2123 2765       -27654321000 2123
-   12345.78 12.000000011111 -12.00000111111 -123456.234
-   10.2 123456.234 2.2 0.2"
+string(177) "2.2 0.2 10.2
+    123456.234 -1234.6789 1234.6789
+          2123 2765       -27654321000 2123
+    12345.78 12.000000011111 -12.00000111111 -123456.234
+    10.2 123456.234 2.2 0.2"
 
 -- Iteration 2 --
-string(129) "2 -2 2
-   123456 -12346789 12346789
-         1232 2000       -40000 2221
-   12345780 1211111 -12111111 -12345634
-   2 123456 2 -2"
+string(133) "2 -2 2
+    123456 -12346789 12346789
+          1232 2000       -40000 2221
+    12345780 1211111 -12111111 -12345634
+    2 123456 2 -2"
 
 -- Iteration 3 --
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
 
 Warning: Array to string conversion in %s on line %d
-string(128) "Array Array Array
-   Array Array Array
-         Arra Arra       Array Arra
-   Array Array Array Array
-   Array Array Array Array"
+string(132) "Array Array Array
+    Array Array Array
+          Arra Arra       Array Arra
+    Array Array Array Array
+    Array Array Array Array"
 
 -- Iteration 4 --
-string(78) "1 1 
-   1      1   
-            1            0001 0000
-   #0 1 $1 _0
-    1 1 1"
+string(82) "1 1 
+    1      1   
+             1            0001 0000
+    #0 1 $1 _0
+     1 1 1"
diff --git a/ext/tokenizer/tests/token_get_all_variation11.phpt b/ext/tokenizer/tests/token_get_all_variation11.phpt
index e3add6ed3a..3a22a194b7 100644
--- a/ext/tokenizer/tests/token_get_all_variation11.phpt
+++ b/ext/tokenizer/tests/token_get_all_variation11.phpt
@@ -1,1149 +1,1140 @@
 --TEST--
 Test token_get_all() function : usage variations - with control structure tokens
 --SKIPIF--
 <?php if (!extension_loaded("tokenizer")) print "skip"; ?>
 --FILE--
 <?php
 /* Prototype  : array token_get_all(string $source)
  * Description: splits the given source into an array of PHP language tokens
  * Source code: ext/tokenizer/tokenizer.c
 */
 
 /*
  * Using different control structure keywords
  *   if..else, elseif - T_IF(301), T_ELSEIF(302), T_ELSE(303)
  *   while - T_WHILE(318)
  *   do...while - T_DO(317)
  *   for - T_ENDFOR(320)
  *   foreach - T_ENDFOREACH(322)
  *   switch...case - T_ENDSWITCH(327), T_CASE(329)
  *   break - T_BREAK(331)
  *   continue - T_CONTINUE(332)
 */
 
 echo "*** Testing token_get_all() : for control structure tokens ***\n";
 
 // if..elseif....else
 echo "-- with if..elseif..else..tokens --\n";
 
-$source = '<?php 
+$source = '<?php
 if($a == true) {
      echo "$a = true";
 }
 elseif($a == false) {
   echo false;
 }
 else
   echo 1;
 ?>';
 
 var_dump( token_get_all($source));
 
 // while..., do..while, break, continue
 echo "-- with while..., do..while, switch & continue tokens --\n";
 
 $source = "<?php while(true) {
 echo 'True';
 break;
 }
 do {
 continue;
 }while(false); ?>";
 
 var_dump( token_get_all($source));
 
 // for..., foreach( as )
 echo "-- with for..foreach( as ) tokens --\n";
 
 $source = '<?php for($count=0; $count < 5; $count++) {
 echo $count;
 }
 foreach($values as $index) {
 continue;
 } ?>';
 
 var_dump( token_get_all($source));
 
 // switch..case, default
 echo "-- with switch...case tokens --\n";
 
 $source = '<?php switch($var)
 case 1: break;
 default: echo "default"; ?>';
 
 var_dump( token_get_all($source));
 
 echo "Done"
 ?>
 --EXPECTF--
 *** Testing token_get_all() : for control structure tokens ***
 -- with if..elseif..else..tokens --
-array(49) {
+array(48) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
-    string(6) "<?php "
-    [2]=>
-    int(1)
-  }
-  [1]=>
-  array(3) {
-    [0]=>
-    int(%d)
-    [1]=>
-    string(1) "
+    string(6) "<?php
 "
     [2]=>
     int(1)
   }
-  [2]=>
+  [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "if"
     [2]=>
     int(2)
   }
-  [3]=>
+  [2]=>
   string(1) "("
-  [4]=>
+  [3]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(2)
   }
-  [5]=>
+  [4]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [6]=>
+  [5]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "=="
     [2]=>
     int(2)
   }
-  [7]=>
+  [6]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [8]=>
+  [7]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "true"
     [2]=>
     int(2)
   }
-  [9]=>
+  [8]=>
   string(1) ")"
-  [10]=>
+  [9]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [11]=>
+  [10]=>
   string(1) "{"
-  [12]=>
+  [11]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "
      "
     [2]=>
     int(2)
   }
-  [13]=>
+  [12]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(%d)
   }
-  [14]=>
+  [13]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
-  [15]=>
+  [14]=>
   string(1) """
-  [16]=>
+  [15]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(%d)
   }
-  [17]=>
+  [16]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) " = true"
     [2]=>
     int(%d)
   }
-  [18]=>
+  [17]=>
   string(1) """
-  [19]=>
+  [18]=>
   string(1) ";"
-  [20]=>
+  [19]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(%d)
   }
-  [21]=>
+  [20]=>
   string(1) "}"
-  [22]=>
+  [21]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(4)
   }
-  [23]=>
+  [22]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "elseif"
     [2]=>
     int(5)
   }
-  [24]=>
+  [23]=>
   string(1) "("
-  [25]=>
+  [24]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(5)
   }
-  [26]=>
+  [25]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(5)
   }
-  [27]=>
+  [26]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "=="
     [2]=>
     int(5)
   }
-  [28]=>
+  [27]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(5)
   }
-  [29]=>
+  [28]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "false"
     [2]=>
     int(5)
   }
-  [30]=>
+  [29]=>
   string(1) ")"
-  [31]=>
+  [30]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(5)
   }
-  [32]=>
+  [31]=>
   string(1) "{"
-  [33]=>
+  [32]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(5)
   }
-  [34]=>
+  [33]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(6)
   }
-  [35]=>
+  [34]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
-  [36]=>
+  [35]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "false"
     [2]=>
     int(6)
   }
-  [37]=>
+  [36]=>
   string(1) ";"
-  [38]=>
+  [37]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(6)
   }
-  [39]=>
+  [38]=>
   string(1) "}"
-  [40]=>
+  [39]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(7)
   }
-  [41]=>
+  [40]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "else"
     [2]=>
     int(8)
   }
-  [42]=>
+  [41]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(8)
   }
-  [43]=>
+  [42]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(9)
   }
-  [44]=>
+  [43]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
-  [45]=>
+  [44]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "1"
     [2]=>
     int(9)
   }
-  [46]=>
+  [45]=>
   string(1) ";"
-  [47]=>
+  [46]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(9)
   }
-  [48]=>
+  [47]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(10)
   }
 }
 -- with while..., do..while, switch & continue tokens --
 array(33) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "<?php "
     [2]=>
     int(1)
   }
   [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "while"
     [2]=>
     int(1)
   }
   [2]=>
   string(1) "("
   [3]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "true"
     [2]=>
     int(1)
   }
   [4]=>
   string(1) ")"
   [5]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(1)
   }
   [6]=>
   string(1) "{"
   [7]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(1)
   }
   [8]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(2)
   }
   [9]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
   [10]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "'True'"
     [2]=>
     int(2)
   }
   [11]=>
   string(1) ";"
   [12]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(2)
   }
   [13]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "break"
     [2]=>
     int(%d)
   }
   [14]=>
   string(1) ";"
   [15]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(%d)
   }
   [16]=>
   string(1) "}"
   [17]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(4)
   }
   [18]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "do"
     [2]=>
     int(5)
   }
   [19]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(5)
   }
   [20]=>
   string(1) "{"
   [21]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(5)
   }
   [22]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "continue"
     [2]=>
     int(6)
   }
   [23]=>
   string(1) ";"
   [24]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(6)
   }
   [25]=>
   string(1) "}"
   [26]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "while"
     [2]=>
     int(7)
   }
   [27]=>
   string(1) "("
   [28]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "false"
     [2]=>
     int(7)
   }
   [29]=>
   string(1) ")"
   [30]=>
   string(1) ";"
   [31]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(7)
   }
   [32]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(7)
   }
 }
 -- with for..foreach( as ) tokens --
 array(45) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "<?php "
     [2]=>
     int(1)
   }
   [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "for"
     [2]=>
     int(1)
   }
   [2]=>
   string(1) "("
   [3]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "$count"
     [2]=>
     int(1)
   }
   [4]=>
   string(1) "="
   [5]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "0"
     [2]=>
     int(1)
   }
   [6]=>
   string(1) ";"
   [7]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(1)
   }
   [8]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "$count"
     [2]=>
     int(1)
   }
   [9]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(1)
   }
   [10]=>
   string(1) "<"
   [11]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(1)
   }
   [12]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "5"
     [2]=>
     int(1)
   }
   [13]=>
   string(1) ";"
   [14]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(1)
   }
   [15]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "$count"
     [2]=>
     int(1)
   }
   [16]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "++"
     [2]=>
     int(1)
   }
   [17]=>
   string(1) ")"
   [18]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(1)
   }
   [19]=>
   string(1) "{"
   [20]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(1)
   }
   [21]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(2)
   }
   [22]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
   [23]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "$count"
     [2]=>
     int(2)
   }
   [24]=>
   string(1) ";"
   [25]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(2)
   }
   [26]=>
   string(1) "}"
   [27]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(%d)
   }
   [28]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "foreach"
     [2]=>
     int(4)
   }
   [29]=>
   string(1) "("
   [30]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "$values"
     [2]=>
     int(4)
   }
   [31]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
   [32]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "as"
     [2]=>
     int(4)
   }
   [33]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
   [34]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "$index"
     [2]=>
     int(4)
   }
   [35]=>
   string(1) ")"
   [36]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
   [37]=>
   string(1) "{"
   [38]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(4)
   }
   [39]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "continue"
     [2]=>
     int(5)
   }
   [40]=>
   string(1) ";"
   [41]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(5)
   }
   [42]=>
   string(1) "}"
   [43]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
   [44]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(6)
   }
 }
 -- with switch...case tokens --
 array(23) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "<?php "
     [2]=>
     int(1)
   }
   [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "switch"
     [2]=>
     int(1)
   }
   [2]=>
   string(1) "("
   [3]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "$var"
     [2]=>
     int(1)
   }
   [4]=>
   string(1) ")"
   [5]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(1)
   }
   [6]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "case"
     [2]=>
     int(2)
   }
   [7]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
   [8]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "1"
     [2]=>
     int(2)
   }
   [9]=>
   string(1) ":"
   [10]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
   [11]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "break"
     [2]=>
     int(2)
   }
   [12]=>
   string(1) ";"
   [13]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(2)
   }
   [14]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "default"
     [2]=>
     int(%d)
   }
   [15]=>
   string(1) ":"
   [16]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
   [17]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(%d)
   }
   [18]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
   [19]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(9) ""default""
     [2]=>
     int(%d)
   }
   [20]=>
   string(1) ";"
   [21]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
   [22]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(%d)
   }
 }
 Done
diff --git a/ext/tokenizer/tests/token_get_all_variation12.phpt b/ext/tokenizer/tests/token_get_all_variation12.phpt
index 368fb0867c..4684edf7f7 100644
--- a/ext/tokenizer/tests/token_get_all_variation12.phpt
+++ b/ext/tokenizer/tests/token_get_all_variation12.phpt
@@ -1,33 +1,33 @@
 --TEST--
 Test token_get_all() function : usage variations - with predefined language constants
 --SKIPIF--
 <?php if (!extension_loaded("tokenizer")) print "skip"; ?>
 --FILE--
 <?php
 /* Prototype  : array token_get_all(string $source)
  * Description: splits the given source into an array of PHP language tokens
  * Source code: ext/tokenizer/tokenizer.c
 */
 
 /*
  * Testing token_get_all() with following predefined language constants:
  *   __FILE__     - T_FILE
  *   __CLASS__    - T_CLASS_C
  *   __TRAIT__    - T_TRAIT_C
  *   __FUNCTION__ - T_FUNC_C
  *   __LINE__     - T_LINE
  *   __METHOD__   - T_METHOD_C
 */
 
 echo "*** Testing token_get_all() : with language constants ***\n";
 
 // parsing __FILE__ token
 echo "-- with FILE --\n";
-$source = "<?php 
+$source = "<?php
 \$fp =  fopen(__FILE__, 'r');
 ?>";
 var_dump( token_get_all($source));
 
 // parsing __CLASS__, __TRAIT__ and __FUNCTION__ tokens
 echo "-- with CLASS, TRAIT and FUNCTION --\n";
 $source = '<?php
@@ -35,541 +35,532 @@ class MyClass
 {
   echo  __CLASS__;
   echo  __TRAIT__;
   function myFunction()
   {  echo  __FUNCTION__; }
 }
 ?>';
 var_dump( token_get_all($source));
 
 // parsing __LINE__ and __METHOD__ tokens
 echo "-- with LINE and METHOD --\n";
 $source = '<?php
   $a = __LINE__;
   $b = $b.__METHOD__;
 ?>';
 var_dump( token_get_all($source));
 
 echo "Done"
 ?>
 --EXPECTF--
 *** Testing token_get_all() : with language constants ***
 -- with FILE --
-array(16) {
+array(15) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
-    string(6) "<?php "
-    [2]=>
-    int(1)
-  }
-  [1]=>
-  array(3) {
-    [0]=>
-    int(%d)
-    [1]=>
-    string(1) "
+    string(6) "<?php
 "
     [2]=>
     int(1)
   }
-  [2]=>
+  [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "$fp"
     [2]=>
     int(2)
   }
-  [3]=>
+  [2]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [4]=>
+  [3]=>
   string(1) "="
-  [5]=>
+  [4]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "  "
     [2]=>
     int(2)
   }
-  [6]=>
+  [5]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "fopen"
     [2]=>
     int(2)
   }
-  [7]=>
+  [6]=>
   string(1) "("
-  [8]=>
+  [7]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "__FILE__"
     [2]=>
     int(2)
   }
-  [9]=>
+  [8]=>
   string(1) ","
-  [10]=>
+  [9]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [11]=>
+  [10]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "'r'"
     [2]=>
     int(2)
   }
-  [12]=>
+  [11]=>
   string(1) ")"
-  [13]=>
+  [12]=>
   string(1) ";"
-  [14]=>
+  [13]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(2)
   }
-  [15]=>
+  [14]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(%d)
   }
 }
 -- with CLASS, TRAIT and FUNCTION --
 array(35) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "<?php
 "
     [2]=>
     int(1)
   }
   [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "class"
     [2]=>
     int(2)
   }
   [2]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
   [3]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "MyClass"
     [2]=>
     int(2)
   }
   [4]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(2)
   }
   [5]=>
   string(1) "{"
   [6]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(%d)
   }
   [7]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(4)
   }
   [8]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "  "
     [2]=>
     int(4)
   }
   [9]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(9) "__CLASS__"
     [2]=>
     int(4)
   }
   [10]=>
   string(1) ";"
   [11]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(%d)
   }
   [12]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(5)
   }
   [13]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "  "
     [2]=>
     int(5)
   }
   [14]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(9) "__TRAIT__"
     [2]=>
     int(5)
   }
   [15]=>
   string(1) ";"
   [16]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(5)
   }
   [17]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "function"
     [2]=>
     int(6)
   }
   [18]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
   [19]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(10) "myFunction"
     [2]=>
     int(6)
   }
   [20]=>
   string(1) "("
   [21]=>
   string(1) ")"
   [22]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(6)
   }
   [23]=>
   string(1) "{"
   [24]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "  "
     [2]=>
     int(7)
   }
   [25]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(7)
   }
   [26]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "  "
     [2]=>
     int(7)
   }
   [27]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(12) "__FUNCTION__"
     [2]=>
     int(7)
   }
   [28]=>
   string(1) ";"
   [29]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(7)
   }
   [30]=>
   string(1) "}"
   [31]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(7)
   }
   [32]=>
   string(1) "}"
   [33]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(8)
   }
   [34]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(9)
   }
 }
 -- with LINE and METHOD --
 array(19) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "<?php
 "
     [2]=>
     int(1)
   }
   [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "  "
     [2]=>
     int(2)
   }
   [2]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(2)
   }
   [3]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
   [4]=>
   string(1) "="
   [5]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
   [6]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "__LINE__"
     [2]=>
     int(2)
   }
   [7]=>
   string(1) ";"
   [8]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(2)
   }
   [9]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(%d)
   }
   [10]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
   [11]=>
   string(1) "="
   [12]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
   [13]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(%d)
   }
   [14]=>
   string(1) "."
   [15]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(10) "__METHOD__"
     [2]=>
     int(%d)
   }
   [16]=>
   string(1) ";"
   [17]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(%d)
   }
   [18]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(4)
   }
 }
 Done
diff --git a/ext/tokenizer/tests/token_get_all_variation13.phpt b/ext/tokenizer/tests/token_get_all_variation13.phpt
index 9f3fcd8240..6779048cf0 100644
--- a/ext/tokenizer/tests/token_get_all_variation13.phpt
+++ b/ext/tokenizer/tests/token_get_all_variation13.phpt
@@ -28,14 +28,14 @@ interface MyInterface
 {
   public const var $var = 10;
 }
 abstract class MyClass
 {
   private var $a;
   public var $b;
   protected var $c;
   static $d;
   final $e = 10;
-  
+
   abstract public function myFunction($a);
 }
 class ChildClass extends MyClass implements MyInterface
@@ -42,1128 +42,1128 @@ class ChildClass extends MyClass implements MyInterface
 {
   global $value;
   function myFunction($a)
   {
     $a = new ChildClass();
     if($a instanceof MyClass)
       echo "object created";
   }
 }
 ChildClass::myFunction(10);
 ?>';
 $tokens =  token_get_all($source);
 var_dump($tokens);
 
 echo "Done"
 ?>
 --EXPECTF--
 *** Testing token_get_all() : with class/object constructs ***
 array(145) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "<?php
 "
     [2]=>
     int(1)
   }
   [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(9) "interface"
     [2]=>
     int(2)
   }
   [2]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
   [3]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(11) "MyInterface"
     [2]=>
     int(2)
   }
   [4]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(2)
   }
   [5]=>
   string(1) "{"
   [6]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(%d)
   }
   [7]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "public"
     [2]=>
     int(4)
   }
   [8]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
   [9]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "const"
     [2]=>
     int(4)
   }
   [10]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
   [11]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "var"
     [2]=>
     int(4)
   }
   [12]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
   [13]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "$var"
     [2]=>
     int(4)
   }
   [14]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
   [15]=>
   string(1) "="
   [16]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
   [17]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "10"
     [2]=>
     int(4)
   }
   [18]=>
   string(1) ";"
   [19]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(4)
   }
   [20]=>
   string(1) "}"
   [21]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(5)
   }
   [22]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "abstract"
     [2]=>
     int(6)
   }
   [23]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
   [24]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "class"
     [2]=>
     int(6)
   }
   [25]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
   [26]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "MyClass"
     [2]=>
     int(6)
   }
   [27]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(6)
   }
   [28]=>
   string(1) "{"
   [29]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(7)
   }
   [30]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "private"
     [2]=>
     int(8)
   }
   [31]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
   [32]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "var"
     [2]=>
     int(8)
   }
   [33]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
   [34]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(8)
   }
   [35]=>
   string(1) ";"
   [36]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(8)
   }
   [37]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "public"
     [2]=>
     int(9)
   }
   [38]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
   [39]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "var"
     [2]=>
     int(9)
   }
   [40]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
   [41]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(9)
   }
   [42]=>
   string(1) ";"
   [43]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(9)
   }
   [44]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(9) "protected"
     [2]=>
     int(10)
   }
   [45]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(10)
   }
   [46]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "var"
     [2]=>
     int(10)
   }
   [47]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(10)
   }
   [48]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$c"
     [2]=>
     int(10)
   }
   [49]=>
   string(1) ";"
   [50]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(10)
   }
   [51]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "static"
     [2]=>
     int(11)
   }
   [52]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(11)
   }
   [53]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$d"
     [2]=>
     int(11)
   }
   [54]=>
   string(1) ";"
   [55]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(11)
   }
   [56]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "final"
     [2]=>
     int(12)
   }
   [57]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(12)
   }
   [58]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$e"
     [2]=>
     int(12)
   }
   [59]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(12)
   }
   [60]=>
   string(1) "="
   [61]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(12)
   }
   [62]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "10"
     [2]=>
     int(12)
   }
   [63]=>
   string(1) ";"
   [64]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
-    string(6) "
-  
+    string(4) "
+
   "
     [2]=>
     int(12)
   }
   [65]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "abstract"
     [2]=>
     int(14)
   }
   [66]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(14)
   }
   [67]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "public"
     [2]=>
     int(14)
   }
   [68]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(14)
   }
   [69]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "function"
     [2]=>
     int(14)
   }
   [70]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(14)
   }
   [71]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(10) "myFunction"
     [2]=>
     int(14)
   }
   [72]=>
   string(1) "("
   [73]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(14)
   }
   [74]=>
   string(1) ")"
   [75]=>
   string(1) ";"
   [76]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(14)
   }
   [77]=>
   string(1) "}"
   [78]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(15)
   }
   [79]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "class"
     [2]=>
     int(16)
   }
   [80]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(16)
   }
   [81]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(10) "ChildClass"
     [2]=>
     int(16)
   }
   [82]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(16)
   }
   [83]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "extends"
     [2]=>
     int(16)
   }
   [84]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(16)
   }
   [85]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "MyClass"
     [2]=>
     int(16)
   }
   [86]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(16)
   }
   [87]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(10) "implements"
     [2]=>
     int(16)
   }
   [88]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(16)
   }
   [89]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(11) "MyInterface"
     [2]=>
     int(16)
   }
   [90]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(16)
   }
   [91]=>
   string(1) "{"
   [92]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(17)
   }
   [93]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "global"
     [2]=>
     int(18)
   }
   [94]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(18)
   }
   [95]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "$value"
     [2]=>
     int(18)
   }
   [96]=>
   string(1) ";"
   [97]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(18)
   }
   [98]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "function"
     [2]=>
     int(19)
   }
   [99]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(19)
   }
   [100]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(10) "myFunction"
     [2]=>
     int(19)
   }
   [101]=>
   string(1) "("
   [102]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(19)
   }
   [103]=>
   string(1) ")"
   [104]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(19)
   }
   [105]=>
   string(1) "{"
   [106]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "
     "
     [2]=>
     int(20)
   }
   [107]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(21)
   }
   [108]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(21)
   }
   [109]=>
   string(1) "="
   [110]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(21)
   }
   [111]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "new"
     [2]=>
     int(21)
   }
   [112]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(21)
   }
   [113]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(10) "ChildClass"
     [2]=>
     int(21)
   }
   [114]=>
   string(1) "("
   [115]=>
   string(1) ")"
   [116]=>
   string(1) ";"
   [117]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "
     "
     [2]=>
     int(21)
   }
   [118]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "if"
     [2]=>
     int(22)
   }
   [119]=>
   string(1) "("
   [120]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(22)
   }
   [121]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(22)
   }
   [122]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(10) "instanceof"
     [2]=>
     int(22)
   }
   [123]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(22)
   }
   [124]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "MyClass"
     [2]=>
     int(22)
   }
   [125]=>
   string(1) ")"
   [126]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "
       "
     [2]=>
     int(22)
   }
   [127]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(23)
   }
   [128]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(23)
   }
   [129]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(16) ""object created""
     [2]=>
     int(23)
   }
   [130]=>
   string(1) ";"
   [131]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(23)
   }
   [132]=>
   string(1) "}"
   [133]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(24)
   }
   [134]=>
   string(1) "}"
   [135]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(25)
   }
   [136]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(10) "ChildClass"
     [2]=>
     int(26)
   }
   [137]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "::"
     [2]=>
     int(26)
   }
   [138]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(10) "myFunction"
     [2]=>
     int(26)
   }
   [139]=>
   string(1) "("
   [140]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "10"
     [2]=>
     int(26)
   }
   [141]=>
   string(1) ")"
   [142]=>
   string(1) ";"
   [143]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(26)
   }
   [144]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(27)
   }
 }
 Done
diff --git a/ext/tokenizer/tests/token_get_all_variation14.phpt b/ext/tokenizer/tests/token_get_all_variation14.phpt
index 9c1d16a44e..aa41f066fd 100644
--- a/ext/tokenizer/tests/token_get_all_variation14.phpt
+++ b/ext/tokenizer/tests/token_get_all_variation14.phpt
@@ -1,282 +1,273 @@
 --TEST--
 Test token_get_all() function : usage variations - invalid token values
 --SKIPIF--
 <?php if (!extension_loaded("tokenizer")) print "skip"; ?>
 --FILE--
 <?php
 /* Prototype  : array token_get_all(string $source)
  * Description: splits the given source into an array of PHP language tokens
  * Source code: ext/tokenizer/tokenizer.c
 */
 
 /*
  * Testing token_get_all() with 'source' string containing invalid/unknown token value
  *  unknown tokens - T_UNKNOWN(307)
 */
 
 echo "*** Testing token_get_all() : with invalid/unknown tokens ***\n";
 
 // with valid php tags and invalid tokens
 echo "-- with valid PHP tags & invlid tokens --\n";
-$source = '<?php 
+$source = '<?php
 struct myStruct {
   variable $a;
   method() { display $a; }
 }
 ?>';
 var_dump( token_get_all($source));
 
 // with invalid open tag for testing entire source to be unknown token
 echo "-- with invlalid PHP open tag & valid tokens --\n";
-$source = '<pli 
+$source = '<pli
 echo "hello world"; ?>';
 var_dump( token_get_all($source));
 
 // with invalid PHP tags and invalid tokens
 echo "-- with invalid PHP tags and tokens --\n";
 $source = '<PDP display  $a; <';
 var_dump( token_get_all($source));
 
 echo "Done"
 ?>
 --EXPECTF--
 *** Testing token_get_all() : with invalid/unknown tokens ***
 -- with valid PHP tags & invlid tokens --
-array(29) {
+array(28) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
-    string(6) "<?php "
-    [2]=>
-    int(1)
-  }
-  [1]=>
-  array(3) {
-    [0]=>
-    int(%d)
-    [1]=>
-    string(1) "
+    string(6) "<?php
 "
     [2]=>
     int(1)
   }
-  [2]=>
+  [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "struct"
     [2]=>
     int(2)
   }
-  [3]=>
+  [2]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [4]=>
+  [3]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "myStruct"
     [2]=>
     int(2)
   }
-  [5]=>
+  [4]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [6]=>
+  [5]=>
   string(1) "{"
-  [7]=>
+  [6]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(2)
   }
-  [8]=>
+  [7]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "variable"
     [2]=>
     int(%d)
   }
-  [9]=>
+  [8]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
-  [10]=>
+  [9]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(%d)
   }
-  [11]=>
+  [10]=>
   string(1) ";"
-  [12]=>
+  [11]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(%d)
   }
-  [13]=>
+  [12]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "method"
     [2]=>
     int(4)
   }
-  [14]=>
+  [13]=>
   string(1) "("
-  [15]=>
+  [14]=>
   string(1) ")"
-  [16]=>
+  [15]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
-  [17]=>
+  [16]=>
   string(1) "{"
-  [18]=>
+  [17]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
-  [19]=>
+  [18]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "display"
     [2]=>
     int(4)
   }
-  [20]=>
+  [19]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
-  [21]=>
+  [20]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(4)
   }
-  [22]=>
+  [21]=>
   string(1) ";"
-  [23]=>
+  [22]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
-  [24]=>
+  [23]=>
   string(1) "}"
-  [25]=>
+  [24]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(4)
   }
-  [26]=>
+  [25]=>
   string(1) "}"
-  [27]=>
+  [26]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(5)
   }
-  [28]=>
+  [27]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(6)
   }
 }
 -- with invlalid PHP open tag & valid tokens --
 array(1) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
-    string(28) "<pli 
+    string(27) "<pli
 echo "hello world"; ?>"
     [2]=>
     int(1)
   }
 }
 -- with invalid PHP tags and tokens --
 array(1) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(19) "<PDP display  $a; <"
     [2]=>
     int(1)
   }
 }
 Done
diff --git a/ext/tokenizer/tests/token_get_all_variation15.phpt b/ext/tokenizer/tests/token_get_all_variation15.phpt
index 5b7fcec66a..c72bbe41b9 100644
--- a/ext/tokenizer/tests/token_get_all_variation15.phpt
+++ b/ext/tokenizer/tests/token_get_all_variation15.phpt
@@ -1,778 +1,778 @@
 --TEST--
 Test token_get_all() function : usage variations - heredoc string for 'source'
 --SKIPIF--
 <?php if (!extension_loaded("tokenizer")) print "skip"; ?>
 --FILE--
 <?php
 /* Prototype  : array token_get_all(string $source)
  * Description: splits the given source into an array of PHP language tokens
  * Source code: ext/tokenizer/tokenizer.c
 */
 
 /*
  * Testing token_get_all() with heredoc 'source' string with all different types of token and heredoc string within
  *     <<<EOT - T_START_HEREDOC(371)
  *     EOT - T_END_HEREDOC(372)
 */
 
 echo "*** Testing token_get_all() : with heredoc source string ***\n";
 
 $source = <<<EOT
-<?= 
+<?=
   \$a = 2;
   \$b = 1;
   \$c = <<<EOS
-  This is to test 
+  This is to test
   heredoc string
 EOS;
   echo \$a + \$b;
   function myFunction(\$a)
   {
     var_dump(\$a);
   }
   if(\$b < 10) {
     \$b++;
   }
   else
     \$b--;
   while(\$a > 0) {
     echo "*";
     \$a--;
   }
   myFunction(10);
 ?>
 EOT;
 var_dump( token_get_all($source));
 
 echo "Done"
 ?>
 --EXPECTF--
 *** Testing token_get_all() : with heredoc source string ***
 array(103) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "<?="
     [2]=>
     int(1)
   }
   [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
-    string(4) " 
+    string(3) "
   "
     [2]=>
     int(1)
   }
   [2]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(2)
   }
   [3]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
   [4]=>
   string(1) "="
   [5]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
   [6]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "2"
     [2]=>
     int(2)
   }
   [7]=>
   string(1) ";"
   [8]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(2)
   }
   [9]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(%d)
   }
   [10]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
   [11]=>
   string(1) "="
   [12]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
   [13]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "1"
     [2]=>
     int(%d)
   }
   [14]=>
   string(1) ";"
   [15]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(%d)
   }
   [16]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$c"
     [2]=>
     int(4)
   }
   [17]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
   [18]=>
   string(1) "="
   [19]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
   [20]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "<<<EOS
 "
     [2]=>
     int(4)
   }
   [21]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
-    string(36) "  This is to test 
+    string(35) "  This is to test
   heredoc string
 "
     [2]=>
     int(5)
   }
   [22]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "EOS"
     [2]=>
     int(7)
   }
   [23]=>
   string(1) ";"
   [24]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(7)
   }
   [25]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(8)
   }
   [26]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
   [27]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(8)
   }
   [28]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
   [29]=>
   string(1) "+"
   [30]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
   [31]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(8)
   }
   [32]=>
   string(1) ";"
   [33]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(8)
   }
   [34]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "function"
     [2]=>
     int(9)
   }
   [35]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
   [36]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(10) "myFunction"
     [2]=>
     int(9)
   }
   [37]=>
   string(1) "("
   [38]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(9)
   }
   [39]=>
   string(1) ")"
   [40]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(9)
   }
   [41]=>
   string(1) "{"
   [42]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "
     "
     [2]=>
     int(10)
   }
   [43]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "var_dump"
     [2]=>
     int(11)
   }
   [44]=>
   string(1) "("
   [45]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(11)
   }
   [46]=>
   string(1) ")"
   [47]=>
   string(1) ";"
   [48]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(11)
   }
   [49]=>
   string(1) "}"
   [50]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(12)
   }
   [51]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "if"
     [2]=>
     int(13)
   }
   [52]=>
   string(1) "("
   [53]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(13)
   }
   [54]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(13)
   }
   [55]=>
   string(1) "<"
   [56]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(13)
   }
   [57]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "10"
     [2]=>
     int(13)
   }
   [58]=>
   string(1) ")"
   [59]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(13)
   }
   [60]=>
   string(1) "{"
   [61]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "
     "
     [2]=>
     int(13)
   }
   [62]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(14)
   }
   [63]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "++"
     [2]=>
     int(14)
   }
   [64]=>
   string(1) ";"
   [65]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(14)
   }
   [66]=>
   string(1) "}"
   [67]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(15)
   }
   [68]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "else"
     [2]=>
     int(16)
   }
   [69]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "
     "
     [2]=>
     int(16)
   }
   [70]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(17)
   }
   [71]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "--"
     [2]=>
     int(17)
   }
   [72]=>
   string(1) ";"
   [73]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(17)
   }
   [74]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "while"
     [2]=>
     int(18)
   }
   [75]=>
   string(1) "("
   [76]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(18)
   }
   [77]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(18)
   }
   [78]=>
   string(1) ">"
   [79]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(18)
   }
   [80]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "0"
     [2]=>
     int(18)
   }
   [81]=>
   string(1) ")"
   [82]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(18)
   }
   [83]=>
   string(1) "{"
   [84]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "
     "
     [2]=>
     int(18)
   }
   [85]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(19)
   }
   [86]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(19)
   }
   [87]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) ""*""
     [2]=>
     int(19)
   }
   [88]=>
   string(1) ";"
   [89]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "
     "
     [2]=>
     int(19)
   }
   [90]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(20)
   }
   [91]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "--"
     [2]=>
     int(20)
   }
   [92]=>
   string(1) ";"
   [93]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(20)
   }
   [94]=>
   string(1) "}"
   [95]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(21)
   }
   [96]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(10) "myFunction"
     [2]=>
     int(22)
   }
   [97]=>
   string(1) "("
   [98]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "10"
     [2]=>
     int(22)
   }
   [99]=>
   string(1) ")"
   [100]=>
   string(1) ";"
   [101]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(22)
   }
   [102]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(23)
   }
 }
 Done
diff --git a/ext/tokenizer/tests/token_get_all_variation4.phpt b/ext/tokenizer/tests/token_get_all_variation4.phpt
index 3bd05295fe..66e3cb413d 100644
--- a/ext/tokenizer/tests/token_get_all_variation4.phpt
+++ b/ext/tokenizer/tests/token_get_all_variation4.phpt
@@ -1,749 +1,740 @@
 --TEST--
 Test token_get_all() function : usage variations - with comparison operators
 --SKIPIF--
 <?php if (!extension_loaded("tokenizer")) print "skip"; ?>
 --FILE--
 <?php
 /* Prototype  : array token_get_all(string $source)
  * Description: splits the given source into an array of PHP language tokens
  * Source code: ext/tokenizer/tokenizer.c
 */
 
 /*
  * Passing 'source' argument with different comparison operators to test them for tokens
  *  == - T_IS_EQUAL(283), === - T_IS_IDENTICAL(281),
  *  >= - T_IS_GREATER_OR_EQUAL(284), <= - T_IS_LESS_OR_EQUAL(285)
  *  != - T_IS_NOT_EQUAL, <> - T_IS_NOT_EQUAL(282), !== - T_IS_NOT_IDENTICAL(280)
 */
 
 echo "*** Testing token_get_all() : 'source' string with different comparison operators ***\n";
 
 // comparison operators : '==', '===', '>=', '<=', '!=', '!==', '<>'
-$source = '<?php 
-if($a == 0) 
+$source = '<?php
+if($a == 0)
   echo "== 0";
 elseif($a === 2)
   echo "=== 2";
 elseif($a >= 10 && $a <= 20)
   echo ">= 10 & <=20";
 elseif($a != 1 || $a <> 1)
   echo "!= 1";
 elseif($a !== 1)
   echo "!==1";
 ?>';
 var_dump( token_get_all($source));
 
 echo "Done"
 ?>
 --EXPECTF--
 *** Testing token_get_all() : 'source' string with different comparison operators ***
-array(89) {
+array(88) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
-    string(6) "<?php "
-    [2]=>
-    int(1)
-  }
-  [1]=>
-  array(3) {
-    [0]=>
-    int(%d)
-    [1]=>
-    string(1) "
+    string(6) "<?php
 "
     [2]=>
     int(1)
   }
-  [2]=>
+  [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "if"
     [2]=>
     int(2)
   }
-  [3]=>
+  [2]=>
   string(1) "("
-  [4]=>
+  [3]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(2)
   }
-  [5]=>
+  [4]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [6]=>
+  [5]=>
   array(3) {
     [0]=>
-    int(%d)
+    int(286)
     [1]=>
     string(2) "=="
     [2]=>
     int(2)
   }
-  [7]=>
+  [6]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [8]=>
+  [7]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "0"
     [2]=>
     int(2)
   }
-  [9]=>
+  [8]=>
   string(1) ")"
-  [10]=>
+  [9]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
-    string(4) " 
+    string(3) "
   "
     [2]=>
     int(2)
   }
-  [11]=>
+  [10]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(%d)
   }
-  [12]=>
+  [11]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
-  [13]=>
+  [12]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) ""== 0""
     [2]=>
     int(%d)
   }
-  [14]=>
+  [13]=>
   string(1) ";"
-  [15]=>
+  [14]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(%d)
   }
-  [16]=>
+  [15]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "elseif"
     [2]=>
     int(4)
   }
-  [17]=>
+  [16]=>
   string(1) "("
-  [18]=>
+  [17]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(4)
   }
-  [19]=>
+  [18]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
-  [20]=>
+  [19]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "==="
     [2]=>
     int(4)
   }
-  [21]=>
+  [20]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
-  [22]=>
+  [21]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "2"
     [2]=>
     int(4)
   }
-  [23]=>
+  [22]=>
   string(1) ")"
-  [24]=>
+  [23]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(4)
   }
-  [25]=>
+  [24]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(5)
   }
-  [26]=>
+  [25]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(5)
   }
-  [27]=>
+  [26]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) ""=== 2""
     [2]=>
     int(5)
   }
-  [28]=>
+  [27]=>
   string(1) ";"
-  [29]=>
+  [28]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(5)
   }
-  [30]=>
+  [29]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "elseif"
     [2]=>
     int(6)
   }
-  [31]=>
+  [30]=>
   string(1) "("
-  [32]=>
+  [31]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(6)
   }
-  [33]=>
+  [32]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
-  [34]=>
+  [33]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) ">="
     [2]=>
     int(6)
   }
-  [35]=>
+  [34]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
-  [36]=>
+  [35]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "10"
     [2]=>
     int(6)
   }
-  [37]=>
+  [36]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
-  [38]=>
+  [37]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "&&"
     [2]=>
     int(6)
   }
-  [39]=>
+  [38]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
-  [40]=>
+  [39]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(6)
   }
-  [41]=>
+  [40]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
-  [42]=>
+  [41]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "<="
     [2]=>
     int(6)
   }
-  [43]=>
+  [42]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
-  [44]=>
+  [43]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "20"
     [2]=>
     int(6)
   }
-  [45]=>
+  [44]=>
   string(1) ")"
-  [46]=>
+  [45]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(6)
   }
-  [47]=>
+  [46]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(7)
   }
-  [48]=>
+  [47]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(7)
   }
-  [49]=>
+  [48]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(14) "">= 10 & <=20""
     [2]=>
     int(7)
   }
-  [50]=>
+  [49]=>
   string(1) ";"
-  [51]=>
+  [50]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(7)
   }
-  [52]=>
+  [51]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "elseif"
     [2]=>
     int(8)
   }
-  [53]=>
+  [52]=>
   string(1) "("
-  [54]=>
+  [53]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(8)
   }
-  [55]=>
+  [54]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [56]=>
+  [55]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "!="
     [2]=>
     int(8)
   }
-  [57]=>
+  [56]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [58]=>
+  [57]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "1"
     [2]=>
     int(8)
   }
-  [59]=>
+  [58]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [60]=>
+  [59]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "||"
     [2]=>
     int(8)
   }
-  [61]=>
+  [60]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [62]=>
+  [61]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(8)
   }
-  [63]=>
+  [62]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [64]=>
+  [63]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "<>"
     [2]=>
     int(8)
   }
-  [65]=>
+  [64]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [66]=>
+  [65]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "1"
     [2]=>
     int(8)
   }
-  [67]=>
+  [66]=>
   string(1) ")"
-  [68]=>
+  [67]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(8)
   }
-  [69]=>
+  [68]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(9)
   }
-  [70]=>
+  [69]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
-  [71]=>
+  [70]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) ""!= 1""
     [2]=>
     int(9)
   }
-  [72]=>
+  [71]=>
   string(1) ";"
-  [73]=>
+  [72]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(9)
   }
-  [74]=>
+  [73]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "elseif"
     [2]=>
     int(10)
   }
-  [75]=>
+  [74]=>
   string(1) "("
-  [76]=>
+  [75]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(10)
   }
-  [77]=>
+  [76]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(10)
   }
-  [78]=>
+  [77]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "!=="
     [2]=>
     int(10)
   }
-  [79]=>
+  [78]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(10)
   }
-  [80]=>
+  [79]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "1"
     [2]=>
     int(10)
   }
-  [81]=>
+  [80]=>
   string(1) ")"
-  [82]=>
+  [81]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "
   "
     [2]=>
     int(10)
   }
-  [83]=>
+  [82]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(11)
   }
-  [84]=>
+  [83]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(11)
   }
-  [85]=>
+  [84]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) ""!==1""
     [2]=>
     int(11)
   }
-  [86]=>
+  [85]=>
   string(1) ";"
-  [87]=>
+  [86]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(11)
   }
-  [88]=>
+  [87]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(12)
   }
 }
 Done
diff --git a/ext/tokenizer/tests/token_get_all_variation5.phpt b/ext/tokenizer/tests/token_get_all_variation5.phpt
index d81562060a..3eed767665 100644
--- a/ext/tokenizer/tests/token_get_all_variation5.phpt
+++ b/ext/tokenizer/tests/token_get_all_variation5.phpt
@@ -1,800 +1,791 @@
 --TEST--
 Test token_get_all() function : usage variations - with assignment operators
 --SKIPIF--
 <?php if (!extension_loaded("tokenizer")) print "skip"; ?>
 --FILE--
 <?php
 /* Prototype  : array token_get_all(string $source)
  * Description: splits the given source into an array of PHP language tokens
  * Source code: ext/tokenizer/tokenizer.c
 */
 
 /*
  * Passing 'source' argument with different assignment operators to test them for tokens
  *  += - T_PLUS_EQUAL(277), -= - T_MINUS-EQUAL(276),
  *  *= - T_MUL_EQUAL(275), /= - T_DIVIDE_EQUAL(274),
  *  %= - T_MOD_EQUAL(272), &= - T_AND_EQUAL(271),
  *  |= - T_OR_EQUAL(271), ^= - T_EXOR_EQUAL(269),
  *  >>= - T_SR_EQUAL(267), <<= - T_SL_EQUAL(268), .= - T_CONCAT_EQUAL(273)
 */
 
 echo "*** Testing token_get_all() : 'source' string with different assignment operators ***\n";
 
 // assignment operators : '+=', '-=', '*=', '/=', '%=', '&=', '|=', '^=', '>>=', '<<=', '.='
-$source = '<?php 
+$source = '<?php
 $a = 1, $b = 2;
 $c += $b;
 $b -= $a;
 $a *= 2;
 $d /= 10.50;
 $a %= 10.50;
 $b &= $c;
 $c |= 1;
 $d ^= 5;
 $a >>= 1;
 $b <<= 2;
 $d .= "hello world";
 ?>';
 var_dump( token_get_all($source));
 
 echo "Done"
 ?>
 --EXPECTF--
 *** Testing token_get_all() : 'source' string with different assignment operators ***
-array(94) {
+array(93) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
-    string(6) "<?php "
-    [2]=>
-    int(1)
-  }
-  [1]=>
-  array(3) {
-    [0]=>
-    int(%d)
-    [1]=>
-    string(1) "
+    string(6) "<?php
 "
     [2]=>
     int(1)
   }
-  [2]=>
+  [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(2)
   }
-  [3]=>
+  [2]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [4]=>
+  [3]=>
   string(1) "="
-  [5]=>
+  [4]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [6]=>
+  [5]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "1"
     [2]=>
     int(2)
   }
-  [7]=>
+  [6]=>
   string(1) ","
-  [8]=>
+  [7]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [9]=>
+  [8]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(2)
   }
-  [10]=>
+  [9]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [11]=>
+  [10]=>
   string(1) "="
-  [12]=>
+  [11]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [13]=>
+  [12]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "2"
     [2]=>
     int(2)
   }
-  [14]=>
+  [13]=>
   string(1) ";"
-  [15]=>
+  [14]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(2)
   }
-  [16]=>
+  [15]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$c"
     [2]=>
     int(%d)
   }
-  [17]=>
+  [16]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
-  [18]=>
+  [17]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "+="
     [2]=>
     int(%d)
   }
-  [19]=>
+  [18]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
-  [20]=>
+  [19]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(%d)
   }
-  [21]=>
+  [20]=>
   string(1) ";"
-  [22]=>
+  [21]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(%d)
   }
-  [23]=>
+  [22]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(4)
   }
-  [24]=>
+  [23]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
-  [25]=>
+  [24]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "-="
     [2]=>
     int(4)
   }
-  [26]=>
+  [25]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
-  [27]=>
+  [26]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(4)
   }
-  [28]=>
+  [27]=>
   string(1) ";"
-  [29]=>
+  [28]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(4)
   }
-  [30]=>
+  [29]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(5)
   }
-  [31]=>
+  [30]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(5)
   }
-  [32]=>
+  [31]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "*="
     [2]=>
     int(5)
   }
-  [33]=>
+  [32]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(5)
   }
-  [34]=>
+  [33]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "2"
     [2]=>
     int(5)
   }
-  [35]=>
+  [34]=>
   string(1) ";"
-  [36]=>
+  [35]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(5)
   }
-  [37]=>
+  [36]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$d"
     [2]=>
     int(6)
   }
-  [38]=>
+  [37]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
-  [39]=>
+  [38]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "/="
     [2]=>
     int(6)
   }
-  [40]=>
+  [39]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
-  [41]=>
+  [40]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "10.50"
     [2]=>
     int(6)
   }
-  [42]=>
+  [41]=>
   string(1) ";"
-  [43]=>
+  [42]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(6)
   }
-  [44]=>
+  [43]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(7)
   }
-  [45]=>
+  [44]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(7)
   }
-  [46]=>
+  [45]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "%="
     [2]=>
     int(7)
   }
-  [47]=>
+  [46]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(7)
   }
-  [48]=>
+  [47]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "10.50"
     [2]=>
     int(7)
   }
-  [49]=>
+  [48]=>
   string(1) ";"
-  [50]=>
+  [49]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(7)
   }
-  [51]=>
+  [50]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(8)
   }
-  [52]=>
+  [51]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [53]=>
+  [52]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "&="
     [2]=>
     int(8)
   }
-  [54]=>
+  [53]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [55]=>
+  [54]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$c"
     [2]=>
     int(8)
   }
-  [56]=>
+  [55]=>
   string(1) ";"
-  [57]=>
+  [56]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(8)
   }
-  [58]=>
+  [57]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$c"
     [2]=>
     int(9)
   }
-  [59]=>
+  [58]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
-  [60]=>
+  [59]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "|="
     [2]=>
     int(9)
   }
-  [61]=>
+  [60]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
-  [62]=>
+  [61]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "1"
     [2]=>
     int(9)
   }
-  [63]=>
+  [62]=>
   string(1) ";"
-  [64]=>
+  [63]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(9)
   }
-  [65]=>
+  [64]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$d"
     [2]=>
     int(10)
   }
-  [66]=>
+  [65]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(10)
   }
-  [67]=>
+  [66]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "^="
     [2]=>
     int(10)
   }
-  [68]=>
+  [67]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(10)
   }
-  [69]=>
+  [68]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "5"
     [2]=>
     int(10)
   }
-  [70]=>
+  [69]=>
   string(1) ";"
-  [71]=>
+  [70]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(10)
   }
-  [72]=>
+  [71]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(11)
   }
-  [73]=>
+  [72]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(11)
   }
-  [74]=>
+  [73]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) ">>="
     [2]=>
     int(11)
   }
-  [75]=>
+  [74]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(11)
   }
-  [76]=>
+  [75]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "1"
     [2]=>
     int(11)
   }
-  [77]=>
+  [76]=>
   string(1) ";"
-  [78]=>
+  [77]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(11)
   }
-  [79]=>
+  [78]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(12)
   }
-  [80]=>
+  [79]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(12)
   }
-  [81]=>
+  [80]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(3) "<<="
     [2]=>
     int(12)
   }
-  [82]=>
+  [81]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(12)
   }
-  [83]=>
+  [82]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "2"
     [2]=>
     int(12)
   }
-  [84]=>
+  [83]=>
   string(1) ";"
-  [85]=>
+  [84]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(12)
   }
-  [86]=>
+  [85]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$d"
     [2]=>
     int(13)
   }
-  [87]=>
+  [86]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(13)
   }
-  [88]=>
+  [87]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) ".="
     [2]=>
     int(13)
   }
-  [89]=>
+  [88]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(13)
   }
-  [90]=>
+  [89]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(13) ""hello world""
     [2]=>
     int(13)
   }
-  [91]=>
+  [90]=>
   string(1) ";"
-  [92]=>
+  [91]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(13)
   }
-  [93]=>
+  [92]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(14)
   }
 }
 Done
diff --git a/ext/tokenizer/tests/token_get_all_variation7.phpt b/ext/tokenizer/tests/token_get_all_variation7.phpt
index 8ba8db8b7e..6d976a4054 100644
--- a/ext/tokenizer/tests/token_get_all_variation7.phpt
+++ b/ext/tokenizer/tests/token_get_all_variation7.phpt
@@ -1,261 +1,252 @@
 --TEST--
 Test token_get_all() function : usage variations - with increment/decrement operators
 --SKIPIF--
 <?php if (!extension_loaded("tokenizer")) print "skip"; ?>
 --FILE--
 <?php
 /* Prototype  : array token_get_all(string $source)
  * Description: splits the given source into an array of PHP language tokens
  * Source code: ext/tokenizer/tokenizer.c
 */
 
 /*
  * Passing 'source' argument with different increment/decrement operators to test them for token
  *  ++ - T_INC(297)
  *  -- - T_DEC(296)
 */
 
 echo "*** Testing token_get_all() : 'source' string with different increment/decrement operators ***\n";
 
 // increment/decrement operators : '++' , '--'
-$source = '<?php 
+$source = '<?php
 $a = 10, $b = 5;
 $a++;
 $b--;
 echo $a;
 ?>';
-var_dump( token_get_all($source));
+var_dump(token_get_all($source));
 
 echo "Done"
 ?>
 --EXPECTF--
 *** Testing token_get_all() : 'source' string with different increment/decrement operators ***
-array(30) {
+array(29) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
-    string(6) "<?php "
-    [2]=>
-    int(1)
-  }
-  [1]=>
-  array(3) {
-    [0]=>
-    int(%d)
-    [1]=>
-    string(1) "
+    string(6) "<?php
 "
     [2]=>
     int(1)
   }
-  [2]=>
+  [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(2)
   }
-  [3]=>
+  [2]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [4]=>
+  [3]=>
   string(1) "="
-  [5]=>
+  [4]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [6]=>
+  [5]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "10"
     [2]=>
     int(2)
   }
-  [7]=>
+  [6]=>
   string(1) ","
-  [8]=>
+  [7]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [9]=>
+  [8]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(2)
   }
-  [10]=>
+  [9]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [11]=>
+  [10]=>
   string(1) "="
-  [12]=>
+  [11]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [13]=>
+  [12]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "5"
     [2]=>
     int(2)
   }
-  [14]=>
+  [13]=>
   string(1) ";"
-  [15]=>
+  [14]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(2)
   }
-  [16]=>
+  [15]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(%d)
   }
-  [17]=>
+  [16]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "++"
     [2]=>
     int(%d)
   }
-  [18]=>
+  [17]=>
   string(1) ";"
-  [19]=>
+  [18]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(%d)
   }
-  [20]=>
+  [19]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(4)
   }
-  [21]=>
+  [20]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "--"
     [2]=>
     int(4)
   }
-  [22]=>
+  [21]=>
   string(1) ";"
-  [23]=>
+  [22]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(4)
   }
-  [24]=>
+  [23]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(5)
   }
-  [25]=>
+  [24]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(5)
   }
-  [26]=>
+  [25]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(5)
   }
-  [27]=>
+  [26]=>
   string(1) ";"
-  [28]=>
+  [27]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(5)
   }
-  [29]=>
+  [28]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(6)
   }
 }
 Done
diff --git a/ext/tokenizer/tests/token_get_all_variation8.phpt b/ext/tokenizer/tests/token_get_all_variation8.phpt
index f1c3ff15e0..015e60d6e3 100644
--- a/ext/tokenizer/tests/token_get_all_variation8.phpt
+++ b/ext/tokenizer/tests/token_get_all_variation8.phpt
@@ -1,834 +1,825 @@
 --TEST--
 Test token_get_all() function : usage variations - with type casting operators
 --SKIPIF--
 <?php if (!extension_loaded("tokenizer")) print "skip"; ?>
 --FILE--
 <?php
 /* Prototype  : array token_get_all(string $source)
  * Description: splits the given source into an array of PHP language tokens
  * Source code: ext/tokenizer/tokenizer.c
 */
 
 /*
  * Passing 'source' argument with different type casting operators to test them for token
  *  (int)/(integer) - T_INT_CAST(295), (float)/(real)/(double) - T_DOUBLE_CAST(294),
  *  (string) - T_STRING_CAST(293), (bool)/(boolean) - T_BOOL_CAST(290),
  *  (unset) - T_UNSET_CAST(289)
 */
 
 echo "*** Testing token_get_all() : 'source' string with different type casting operators ***\n";
 
 // type casting operators : (int), (integer), (float), (real), (double), (string), (array), (object), (bool), (boolean),(unset)
-$source = '<?php 
+$source = '<?php
 $a = 1, $b = 10.5
 $c = (int)$b + $a;
 $d = (float)$a + $b;
 $e = (string)$a.(string)$b;
 if((bool)$a) echo "true";
 if(!(boolean)$b) echo "false";
 $c = $c + (integer) 123.4e2;
 $d = $c - (real) 12;
 $b = (unset)$a;
 ?>';
 var_dump( token_get_all($source));
 
 echo "Done"
 ?>
 --EXPECTF--
 *** Testing token_get_all() : 'source' string with different type casting operators ***
-array(108) {
+array(107) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
-    string(6) "<?php "
-    [2]=>
-    int(1)
-  }
-  [1]=>
-  array(3) {
-    [0]=>
-    int(%d)
-    [1]=>
-    string(1) "
+    string(6) "<?php
 "
     [2]=>
     int(1)
   }
-  [2]=>
+  [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(2)
   }
-  [3]=>
+  [2]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [4]=>
+  [3]=>
   string(1) "="
-  [5]=>
+  [4]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [6]=>
+  [5]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "1"
     [2]=>
     int(2)
   }
-  [7]=>
+  [6]=>
   string(1) ","
-  [8]=>
+  [7]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [9]=>
+  [8]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(2)
   }
-  [10]=>
+  [9]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [11]=>
+  [10]=>
   string(1) "="
-  [12]=>
+  [11]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(2)
   }
-  [13]=>
+  [12]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "10.5"
     [2]=>
     int(2)
   }
-  [14]=>
+  [13]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(2)
   }
-  [15]=>
+  [14]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$c"
     [2]=>
     int(%d)
   }
-  [16]=>
+  [15]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
-  [17]=>
+  [16]=>
   string(1) "="
-  [18]=>
+  [17]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
-  [19]=>
+  [18]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(5) "(int)"
     [2]=>
     int(%d)
   }
-  [20]=>
+  [19]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(%d)
   }
-  [21]=>
+  [20]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
-  [22]=>
+  [21]=>
   string(1) "+"
-  [23]=>
+  [22]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(%d)
   }
-  [24]=>
+  [23]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(%d)
   }
-  [25]=>
+  [24]=>
   string(1) ";"
-  [26]=>
+  [25]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(%d)
   }
-  [27]=>
+  [26]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$d"
     [2]=>
     int(4)
   }
-  [28]=>
+  [27]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
-  [29]=>
+  [28]=>
   string(1) "="
-  [30]=>
+  [29]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
-  [31]=>
+  [30]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "(float)"
     [2]=>
     int(4)
   }
-  [32]=>
+  [31]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(4)
   }
-  [33]=>
+  [32]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
-  [34]=>
+  [33]=>
   string(1) "+"
-  [35]=>
+  [34]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(4)
   }
-  [36]=>
+  [35]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(4)
   }
-  [37]=>
+  [36]=>
   string(1) ";"
-  [38]=>
+  [37]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(4)
   }
-  [39]=>
+  [38]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$e"
     [2]=>
     int(5)
   }
-  [40]=>
+  [39]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(5)
   }
-  [41]=>
+  [40]=>
   string(1) "="
-  [42]=>
+  [41]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(5)
   }
-  [43]=>
+  [42]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "(string)"
     [2]=>
     int(5)
   }
-  [44]=>
+  [43]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(5)
   }
-  [45]=>
+  [44]=>
   string(1) "."
-  [46]=>
+  [45]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "(string)"
     [2]=>
     int(5)
   }
-  [47]=>
+  [46]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(5)
   }
-  [48]=>
+  [47]=>
   string(1) ";"
-  [49]=>
+  [48]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(5)
   }
-  [50]=>
+  [49]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "if"
     [2]=>
     int(6)
   }
-  [51]=>
+  [50]=>
   string(1) "("
-  [52]=>
+  [51]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "(bool)"
     [2]=>
     int(6)
   }
-  [53]=>
+  [52]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(6)
   }
-  [54]=>
+  [53]=>
   string(1) ")"
-  [55]=>
+  [54]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
-  [56]=>
+  [55]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(6)
   }
-  [57]=>
+  [56]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(6)
   }
-  [58]=>
+  [57]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) ""true""
     [2]=>
     int(6)
   }
-  [59]=>
+  [58]=>
   string(1) ";"
-  [60]=>
+  [59]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(6)
   }
-  [61]=>
+  [60]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "if"
     [2]=>
     int(7)
   }
-  [62]=>
+  [61]=>
   string(1) "("
-  [63]=>
+  [62]=>
   string(1) "!"
-  [64]=>
+  [63]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(9) "(boolean)"
     [2]=>
     int(7)
   }
-  [65]=>
+  [64]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(7)
   }
-  [66]=>
+  [65]=>
   string(1) ")"
-  [67]=>
+  [66]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(7)
   }
-  [68]=>
+  [67]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "echo"
     [2]=>
     int(7)
   }
-  [69]=>
+  [68]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(7)
   }
-  [70]=>
+  [69]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) ""false""
     [2]=>
     int(7)
   }
-  [71]=>
+  [70]=>
   string(1) ";"
-  [72]=>
+  [71]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(7)
   }
-  [73]=>
+  [72]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$c"
     [2]=>
     int(8)
   }
-  [74]=>
+  [73]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [75]=>
+  [74]=>
   string(1) "="
-  [76]=>
+  [75]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [77]=>
+  [76]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$c"
     [2]=>
     int(8)
   }
-  [78]=>
+  [77]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [79]=>
+  [78]=>
   string(1) "+"
-  [80]=>
+  [79]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [81]=>
+  [80]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(9) "(integer)"
     [2]=>
     int(8)
   }
-  [82]=>
+  [81]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [83]=>
+  [82]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "123.4e2"
     [2]=>
     int(8)
   }
-  [84]=>
+  [83]=>
   string(1) ";"
-  [85]=>
+  [84]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(8)
   }
-  [86]=>
+  [85]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$d"
     [2]=>
     int(9)
   }
-  [87]=>
+  [86]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
-  [88]=>
+  [87]=>
   string(1) "="
-  [89]=>
+  [88]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
-  [90]=>
+  [89]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$c"
     [2]=>
     int(9)
   }
-  [91]=>
+  [90]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
-  [92]=>
+  [91]=>
   string(1) "-"
-  [93]=>
+  [92]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
-  [94]=>
+  [93]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(6) "(real)"
     [2]=>
     int(9)
   }
-  [95]=>
+  [94]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
-  [96]=>
+  [95]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "12"
     [2]=>
     int(9)
   }
-  [97]=>
+  [96]=>
   string(1) ";"
-  [98]=>
+  [97]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(9)
   }
-  [99]=>
+  [98]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(10)
   }
-  [100]=>
+  [99]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(10)
   }
-  [101]=>
+  [100]=>
   string(1) "="
-  [102]=>
+  [101]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(10)
   }
-  [103]=>
+  [102]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(7) "(unset)"
     [2]=>
     int(10)
   }
-  [104]=>
+  [103]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(10)
   }
-  [105]=>
+  [104]=>
   string(1) ";"
-  [106]=>
+  [105]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(10)
   }
-  [107]=>
+  [106]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(11)
   }
 }
 Done
diff --git a/ext/tokenizer/tests/token_get_all_variation9.phpt b/ext/tokenizer/tests/token_get_all_variation9.phpt
index e61093304b..45660e984c 100644
--- a/ext/tokenizer/tests/token_get_all_variation9.phpt
+++ b/ext/tokenizer/tests/token_get_all_variation9.phpt
@@ -1,443 +1,434 @@
 --TEST--
 Test token_get_all() function : usage variations - with different types of comments
 --SKIPIF--
 <?php if (!extension_loaded("tokenizer")) print "skip"; ?>
 --FILE--
 <?php
 /* Prototype  : array token_get_all(string $source)
  * Description: splits the given source into an array of PHP language tokens
  * Source code: ext/tokenizer/tokenizer.c
 */
 
 /*
  * Passing 'source' argument with different style of comments
  */
 //  '//', '/* */', '#' - T_COMMENT(365)
 // '/** */' - T_DOC_COMMENT(366)
 
 
 echo "*** Testing token_get_all() : 'source' string with different comments ***\n";
 
 // types of comments: '//', '/* */', '#' & /** */
 
-$source = '<?php 
+$source = '<?php
 /** Performing addition operation on given values :
   * a, b
   */
 
 // int value
 $a = 10;
 $b = 20;
 $c = true; // bool value
 
-/* 
- * Performing operation on $a,$b 
+/*
+ * Performing operation on $a,$b
  * display result
  */
 $c = $a + $b;
 var_dump($c); # expected: int(30)
 
 # end of program
 ?>';
 var_dump( token_get_all($source));
 
 echo "Done"
 ?>
 --EXPECTF--
 *** Testing token_get_all() : 'source' string with different comments ***
-array(51) {
+array(50) {
   [0]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
-    string(6) "<?php "
-    [2]=>
-    int(1)
-  }
-  [1]=>
-  array(3) {
-    [0]=>
-    int(%d)
-    [1]=>
-    string(1) "
+    string(6) "<?php
 "
     [2]=>
     int(1)
   }
-  [2]=>
+  [1]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(65) "/** Performing addition operation on given values :
   * a, b
   */"
     [2]=>
     int(2)
   }
-  [3]=>
+  [2]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "
 
 "
     [2]=>
     int(4)
   }
-  [4]=>
+  [3]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(13) "// int value
 "
     [2]=>
     int(6)
   }
-  [5]=>
+  [4]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(7)
   }
-  [6]=>
+  [5]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(7)
   }
-  [7]=>
+  [6]=>
   string(1) "="
-  [8]=>
+  [7]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(7)
   }
-  [9]=>
+  [8]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "10"
     [2]=>
     int(7)
   }
-  [10]=>
+  [9]=>
   string(1) ";"
-  [11]=>
+  [10]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(7)
   }
-  [12]=>
+  [11]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(8)
   }
-  [13]=>
+  [12]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [14]=>
+  [13]=>
   string(1) "="
-  [15]=>
+  [14]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(8)
   }
-  [16]=>
+  [15]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "20"
     [2]=>
     int(8)
   }
-  [17]=>
+  [16]=>
   string(1) ";"
-  [18]=>
+  [17]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(8)
   }
-  [19]=>
+  [18]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$c"
     [2]=>
     int(9)
   }
-  [20]=>
+  [19]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
-  [21]=>
+  [20]=>
   string(1) "="
-  [22]=>
+  [21]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
-  [23]=>
+  [22]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(4) "true"
     [2]=>
     int(9)
   }
-  [24]=>
+  [23]=>
   string(1) ";"
-  [25]=>
+  [24]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(9)
   }
-  [26]=>
+  [25]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(14) "// bool value
 "
     [2]=>
     int(9)
   }
-  [27]=>
+  [26]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(10)
   }
-  [28]=>
+  [27]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
-    string(59) "/* 
- * Performing operation on $a,$b 
+    string(57) "/*
+ * Performing operation on $a,$b
  * display result
  */"
     [2]=>
     int(11)
   }
-  [29]=>
+  [28]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(14)
   }
-  [30]=>
+  [29]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$c"
     [2]=>
     int(15)
   }
-  [31]=>
+  [30]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(15)
   }
-  [32]=>
+  [31]=>
   string(1) "="
-  [33]=>
+  [32]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(15)
   }
-  [34]=>
+  [33]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$a"
     [2]=>
     int(15)
   }
-  [35]=>
+  [34]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(15)
   }
-  [36]=>
+  [35]=>
   string(1) "+"
-  [37]=>
+  [36]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(15)
   }
-  [38]=>
+  [37]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$b"
     [2]=>
     int(15)
   }
-  [39]=>
+  [38]=>
   string(1) ";"
-  [40]=>
+  [39]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(15)
   }
-  [41]=>
+  [40]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(8) "var_dump"
     [2]=>
     int(16)
   }
-  [42]=>
+  [41]=>
   string(1) "("
-  [43]=>
+  [42]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "$c"
     [2]=>
     int(16)
   }
-  [44]=>
+  [43]=>
   string(1) ")"
-  [45]=>
+  [44]=>
   string(1) ";"
-  [46]=>
+  [45]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) " "
     [2]=>
     int(16)
   }
-  [47]=>
+  [46]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(20) "# expected: int(%d)
 "
     [2]=>
     int(16)
   }
-  [48]=>
+  [47]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(1) "
 "
     [2]=>
     int(17)
   }
-  [49]=>
+  [48]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(17) "# end of program
 "
     [2]=>
     int(18)
   }
-  [50]=>
+  [49]=>
   array(3) {
     [0]=>
     int(%d)
     [1]=>
     string(2) "?>"
     [2]=>
     int(19)
   }
 }
 Done
diff --git a/ext/xml/tests/bug26614_libxml.phpt b/ext/xml/tests/bug26614_libxml.phpt
index 3ddd35ed0e..e479699a8f 100644
--- a/ext/xml/tests/bug26614_libxml.phpt
+++ b/ext/xml/tests/bug26614_libxml.phpt
@@ -1,54 +1,54 @@
 --TEST--
 Bug #26614 (CDATA sections skipped on line count)
 --SKIPIF--
 <?php
 require_once("skipif.inc");
 if (!defined("LIBXML_VERSION")) die('skip libxml2 test');
 ?>
 --FILE--
 <?php
 /*
 this test works fine with Expat but fails with libxml
 which we now use as default
 
 further investigation has shown that not only line count
-is skippet on CDATA sections but that libxml does also
+is skipped on CDATA sections but that libxml does also
 show different column numbers and byte positions depending
 on context and in opposition to what one would expect to
 see and what good old Expat reported just fine ...
 */
 
 $xmls = array();
 
 // Case 1: CDATA Sections
 $xmls["CDATA"] ='<?xml version="1.0" encoding="iso-8859-1" ?>
 <data>
 <![CDATA[
 multi
-line 
+line
 CDATA
 block
 ]]>
 </data>';
 
 // Case 2: replace some characters so that we get comments instead
 $xmls["Comment"] ='<?xml version="1.0" encoding="iso-8859-1" ?>
 <data>
 <!-- ATA[
 multi
-line 
+line
 CDATA
 block
 -->
 </data>';
 
 // Case 3: replace even more characters so that only textual data is left
 $xmls["Text"] ='<?xml version="1.0" encoding="iso-8859-1" ?>
 <data>
 -!-- ATA[
 multi
-line 
+line
 CDATA
 block
 ---
 </data>';
@@ -70,24 +70,24 @@ function endElement($parser, $name) {
 function characterData($parser, $data) {
   // dummy
 }
 
 foreach ($xmls as $desc => $xml) {
   echo "$desc\n";
 	$xml_parser = xml_parser_create();
 	xml_set_element_handler($xml_parser, "startElement", "endElement");
 	xml_set_character_data_handler($xml_parser, "characterData");
 	if (!xml_parse($xml_parser, $xml, true))
 		echo "Error: ".xml_error_string(xml_get_error_code($xml_parser))."\n";
 	xml_parser_free($xml_parser);
 }
 ?>
 --EXPECTF--
 CDATA
 <DATA> at line 2, col %d (byte 9)
-</DATA> at line 9, col %d (byte 56)
+</DATA> at line 9, col %d (byte 55)
 Comment
 <DATA> at line 2, col %d (byte 9)
-</DATA> at line 9, col %d (byte 56)
+</DATA> at line 9, col %d (byte 55)
 Text
 <DATA> at line 2, col %d (byte 9)
-</DATA> at line 9, col %d (byte 56)
+</DATA> at line 9, col %d (byte 55)
