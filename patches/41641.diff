commit 46f1847dd9732e3b4a91bfc0842467da6d2b47de
Author: zvonand <azvonov@altinity.com>
Date:   Mon Oct 31 23:18:08 2022 +0300

    fix segfaults invalid mem access, add tests

diff --git a/src/Functions/FunctionsDecimalArithmetics.h b/src/Functions/FunctionsDecimalArithmetics.h
index 57f392468b5..a09e4a881a1 100644
--- a/src/Functions/FunctionsDecimalArithmetics.h
+++ b/src/Functions/FunctionsDecimalArithmetics.h
@@ -29,88 +29,91 @@ namespace ErrorCodes
 
 struct DecimalOpHerpers
 {
+//    constexpr const static UInt256 MAX_INT256 = UInt256(-1) >> 1;
     static std::vector<UInt8> multiply(const std::vector<UInt8> & num1, const std::vector<UInt8> & num2)
     {
-        int len1 = num1.size();
-        int len2 = num2.size();
+        int const len1 = static_cast<int>(num1.size());
+        int const len2 = static_cast<int>(num2.size());
         if (len1 == 0 || len2 == 0)
             return {0};
 
         std::vector<UInt8> result(76, 0);
         int i_n1 = 0;
         int i_n2;
 
-        for (int i = len1 - 1; i >= 0; --i)
+        for (auto i = len1 - 1; i >= 0; --i)
         {
             int carry = 0;
             i_n2 = 0;
-            for (int j = len2 - 1; j >= 0; --j)
+            for (auto j = len2 - 1; j >= 0; --j)
             {
-                int sum = num1[i] * num2[j] + result[i_n1 + i_n2] + carry;
+                if (unlikely(i_n1 + i_n2 >= 76))
+                    throw DB::Exception("Numeric overflow: result bigger that Decimal256", ErrorCodes::DECIMAL_OVERFLOW);
+                int const sum = num1[i] * num2[j] + result[i_n1 + i_n2] + carry;
                 carry = sum / 10;
                 result[i_n1 + i_n2] = sum % 10;
                 ++i_n2;
             }
 
             if (carry > 0)
                 result[i_n1 + i_n2] += carry;
 
             ++i_n1;
         }
 
-        int i = result.size() - 1;
+        int i = static_cast<int>(result.size()) - 1;
         while (i >= 0 && result[i] == 0)
         {
             result.pop_back();
             --i;
         }
         if (i == -1)
             return {0};
 
         std::reverse(result.begin(), result.end());
         return result;
     }
 
     static std::vector<UInt8> divide(const std::vector<UInt8> & number, const Int256 & divisor)
     {
         std::vector<UInt8> result;
 
         int idx = 0;
-        Int256 temp = number[idx];
+        UInt256 temp = number[idx];
         while (temp < divisor)
             temp = temp * 10 + (number[++idx]);
 
         while (int(number.size()) > idx)
         {
             result.push_back(temp / divisor);
             temp = (temp % divisor) * 10 + number[++idx];
         }
 
         if (result.empty())
             return {0};
 
         return result;
     }
 
     static std::vector<UInt8> toDigits(Int256 x)
     {
         std::vector<UInt8> result;
         if (x >= 10)
             result = toDigits(x / 10);
 
         result.push_back(x % 10);
         return result;
     }
 
-    static Int256 fromDigits(const std::vector<UInt8> & digits)
+    static UInt256 fromDigits(const std::vector<UInt8> & digits)
     {
         Int256 result = 0;
         Int256 scale = 0;
         for (auto i = digits.rbegin(); i != digits.rend(); ++i)
         {
             result += DecimalUtils::scaleMultiplier<Decimal256>(scale) * (*i);
             ++scale;
         }
         return result;
     }
 };
@@ -119,36 +122,37 @@ struct DecimalOpHerpers
 struct DivideDecimalsImpl
 {
     static constexpr auto name = "divideDecimal";
 
     template <typename FirstType, typename SecondType>
     static inline NO_SANITIZE_UNDEFINED Decimal256
     execute(FirstType a, SecondType b, UInt16 scale_a, UInt16 scale_b, UInt16 result_scale)
     {
         if (b.value == 0)
             throw DB::Exception("Division by zero", ErrorCodes::ILLEGAL_DIVISION);
         if (a.value == 0)
             return Decimal256(0);
 
         Int8 sign_a = a.value < 0 ? -1 : 1;
         Int8 sign_b = b.value < 0 ? -1 : 1;
 
-        std::vector<UInt8> a_digits = DecimalOpHerpers::toDigits(sign_a * a.value);
+        std::vector<UInt8> a_digits = DecimalOpHerpers::toDigits(a.value * sign_a);
 
-        while (scale_a < scale_b + result_scale) {
+        while (scale_a < scale_b + result_scale)
+        {
             a_digits.push_back(0);
             ++scale_a;
         }
 
-        std::vector<UInt8> divided = DecimalOpHerpers::divide(a_digits, b.value);
+        std::vector<UInt8> divided = DecimalOpHerpers::divide(a_digits, b.value * sign_b);
 
         while (scale_a > + scale_b + result_scale)
         {
             --scale_a;
             divided.pop_back();
         }
 
         if (divided.size() > 76)
             throw DB::Exception("Numeric overflow: result bigger that Decimal256", ErrorCodes::DECIMAL_OVERFLOW);
         return Decimal256(sign_a * sign_b * DecimalOpHerpers::fromDigits(divided));
     }
 };
@@ -157,44 +161,37 @@ struct DivideDecimalsImpl
 struct MultiplyDecimalsImpl
 {
     static constexpr auto name = "multiplyDecimal";
 
     template <typename FirstType, typename SecondType>
     static inline NO_SANITIZE_UNDEFINED Decimal256
     execute(FirstType a, SecondType b, UInt16 scale_a, UInt16 scale_b, UInt16 result_scale)
     {
+        if (a.value == 0 || b.value == 0)
+            return Decimal256(0);
+
         Int8 sign_a = a.value < 0 ? -1 : 1;
         Int8 sign_b = b.value < 0 ? -1 : 1;
         std::vector<UInt8> a_digits = DecimalOpHerpers::toDigits(a.value * sign_a);
         std::vector<UInt8> b_digits = DecimalOpHerpers::toDigits(b.value * sign_b);
 
-        for (int i = a_digits.size() - 1; a_digits[i] == 0; --i)
-        {
-            a_digits.pop_back();
-            --scale_a;
-        }
+        std::vector<UInt8> multiplied = DecimalOpHerpers::multiply(a_digits, b_digits);
 
-        for (int i = b_digits.size() - 1; b_digits[i] == 0; --i)
+        UInt16 product_scale = scale_a + scale_b;
+        while (product_scale < result_scale)
         {
-            b_digits.pop_back();
-            --scale_b;
+            multiplied.push_back(0);
+            ++product_scale;
         }
 
-        auto multiplied = DecimalOpHerpers::multiply(a_digits, b_digits);
-
-        auto product_scale = scale_a + scale_b;
-        for (int i = product_scale; i < result_scale; ++i)
-        {
-            a_digits.push_back(0);
-        }
-
-        for (int i = product_scale; i > result_scale; --i)
+        while (product_scale > result_scale)
         {
-            a_digits.pop_back();
+            multiplied.pop_back();
+            --product_scale;
         }
 
-//        if (multiplied.size() > 76)
-//            throw DB::Exception("Numeric overflow: result bigger that Decimal256", ErrorCodes::DECIMAL_OVERFLOW);
+        if (multiplied.size() > 76)
+            throw DB::Exception("Numeric overflow: result bigger that Decimal256", ErrorCodes::DECIMAL_OVERFLOW);
 
         return Decimal256(sign_a * sign_b * DecimalOpHerpers::fromDigits(multiplied));
     }
 };
diff --git a/tests/queries/0_stateless/02422_precise_decimal_arithmetics.reference b/tests/queries/0_stateless/02422_precise_decimal_arithmetics.reference
index 237dab7cceb..f67fa493f84 100644
--- a/tests/queries/0_stateless/02422_precise_decimal_arithmetics.reference
+++ b/tests/queries/0_stateless/02422_precise_decimal_arithmetics.reference
@@ -1,3 +1,9 @@
-11
-11.068502451
-11.0685
+0
+0
+0
+1
+1
+11.126038
+10.8
+1376.638914
+1403.6
diff --git a/tests/queries/0_stateless/02422_precise_decimal_arithmetics.sql b/tests/queries/0_stateless/02422_precise_decimal_arithmetics.sql
index d917d6d2660..98f59e31c61 100644
--- a/tests/queries/0_stateless/02422_precise_decimal_arithmetics.sql
+++ b/tests/queries/0_stateless/02422_precise_decimal_arithmetics.sql
@@ -1,3 +1,20 @@
-SELECT divideDecimal(toDecimal32(123.123, 2), toDecimal128(11.123456, 6), 0);
-SELECT divideDecimal(toDecimal64(123.123, 2), toDecimal64(11.123456, 6), 10);
-SELECT divideDecimal(toDecimal256(123.123, 2), toDecimal128(11.123456, 6), 5);
\ No newline at end of file
+-- Check corner cases: divide/multiply by zero
+SELECT divideDecimal(toDecimal32(0, 2), toDecimal128(11.123456, 6));
+SELECT divideDecimal(toDecimal64(123.123, 3), toDecimal64(0, 1)); -- { serverError 153 }
+SELECT multiplyDecimal(toDecimal32(0, 2), toDecimal128(11.123456, 6));
+SELECT multiplyDecimal(toDecimal32(123.123, 3), toDecimal128(0, 1));
+
+-- check cornercase: close to Decimal256 bounds
+SELECT (toDecimal256(bitShiftRight(toUInt256(-1), 4), 0) - multiplyDecimal(divideDecimal(toDecimal256(bitShiftRight(toUInt256(-1), 4), 0), toDecimal32(2, 0)), toDecimal32(2, 0))) == 1;
+SELECT (toDecimal256(bitShiftRight(-1 * toUInt256(-1), 4), 0) - multiplyDecimal(divideDecimal(toDecimal256(bitShiftRight(-1 * toUInt256(-1), 4), 0), toDecimal32(2, 0)), toDecimal32(2, 0))) == 0;
+
+-- check out of scale
+SELECT multiplyDecimal(toDecimal256(bitShiftRight(toUInt256(-1), 4), 0), toDecimal128(1000000000000000000, 2)); -- { serverError 407 }
+SELECT divideDecimal(toDecimal256(bitShiftRight(toUInt256(-1), 4), 0), toDecimal128(1e-15, 20)); -- { serverError 407 }
+
+-- Check scaling: if scale specified, must be of scale, otherwise greatest scale is taken
+SELECT divideDecimal(toDecimal128(123.76, 2), toDecimal128(11.123456, 6));
+SELECT divideDecimal(toDecimal32(123.123, 3), toDecimal128(11.4, 1), 2);
+
+SELECT multiplyDecimal(toDecimal64(123.76, 2), toDecimal128(11.123456, 6));
+SELECT multiplyDecimal(toDecimal32(123.123, 3), toDecimal128(11.4, 1), 2);
