commit b03c9f252526bb42fbd1b87b9f5e339c3cf2390a
Author: jeanlf <jeanlf@gpac.io>
Date:   Mon Aug 30 15:55:13 2021 +0200

    fixed #1890

diff --git a/src/isomedia/box_code_meta.c b/src/isomedia/box_code_meta.c
index e3f0556c0..cdd0948a6 100644
--- a/src/isomedia/box_code_meta.c
+++ b/src/isomedia/box_code_meta.c
@@ -262,76 +262,78 @@ void iloc_box_del(GF_Box *s)
 GF_Err iloc_box_read(GF_Box *s, GF_BitStream *bs)
 {
 	u32 item_count, extent_count, i, j;
 	GF_ItemLocationBox *ptr = (GF_ItemLocationBox *)s;
 
 	ISOM_DECREASE_SIZE(ptr, 2)
 	ptr->offset_size = gf_bs_read_int(bs, 4);
 	ptr->length_size = gf_bs_read_int(bs, 4);
 	ptr->base_offset_size = gf_bs_read_int(bs, 4);
 	if (ptr->version == 1 || ptr->version == 2) {
 		ptr->index_size = gf_bs_read_int(bs, 4);
 	} else {
 		gf_bs_read_int(bs, 4);
 	}
 	if (ptr->version < 2) {
 		ISOM_DECREASE_SIZE(ptr, 2)
 		item_count = gf_bs_read_u16(bs);
 	} else {
 		ISOM_DECREASE_SIZE(ptr, 4)
 		item_count = gf_bs_read_u32(bs);
 	}
 
 	for (i = 0; i < item_count; i++) {
-		GF_ItemLocationEntry *location_entry = (GF_ItemLocationEntry *)gf_malloc(sizeof(GF_ItemLocationEntry));
+		GF_ItemLocationEntry *location_entry;
+		GF_SAFEALLOC(location_entry, GF_ItemLocationEntry);
 		if (!location_entry) return GF_OUT_OF_MEM;
 
 		gf_list_add(ptr->location_entries, location_entry);
 		if (ptr->version < 2) {
 			ISOM_DECREASE_SIZE(ptr, 2)
 			location_entry->item_ID = gf_bs_read_u16(bs);
 		} else {
 			ISOM_DECREASE_SIZE(ptr, 4)
 			location_entry->item_ID = gf_bs_read_u32(bs);
 		}
 		if (ptr->version == 1 || ptr->version == 2) {
 			ISOM_DECREASE_SIZE(ptr, 2)
 			location_entry->construction_method = gf_bs_read_u16(bs);
 		}
 		else {
 			location_entry->construction_method = 0;
 		}
 		ISOM_DECREASE_SIZE(ptr, (2 + ptr->base_offset_size) )
 		location_entry->data_reference_index = gf_bs_read_u16(bs);
 		location_entry->base_offset = gf_bs_read_int(bs, 8*ptr->base_offset_size);
 #ifndef GPAC_DISABLE_ISOM_WRITE
 		location_entry->original_base_offset = location_entry->base_offset;
 #endif
 
 		ISOM_DECREASE_SIZE(ptr, 2)
 		extent_count = gf_bs_read_u16(bs);
 		location_entry->extent_entries = gf_list_new();
 		for (j = 0; j < extent_count; j++) {
-			GF_ItemExtentEntry *extent_entry = (GF_ItemExtentEntry *)gf_malloc(sizeof(GF_ItemExtentEntry));
+			GF_ItemExtentEntry *extent_entry;
+			GF_SAFEALLOC(extent_entry, GF_ItemExtentEntry);
 			if (!extent_entry) return GF_OUT_OF_MEM;
 			
 			gf_list_add(location_entry->extent_entries, extent_entry);
 			if ((ptr->version == 1 || ptr->version == 2) && ptr->index_size > 0) {
 				ISOM_DECREASE_SIZE(ptr, ptr->index_size)
 				extent_entry->extent_index = gf_bs_read_int(bs, 8 * ptr->index_size);
 			}
 			else {
 				extent_entry->extent_index = 0;
 			}
 			ISOM_DECREASE_SIZE(ptr, (ptr->offset_size+ptr->length_size) )
 
 			extent_entry->extent_offset = gf_bs_read_int(bs, 8*ptr->offset_size);
 			extent_entry->extent_length = gf_bs_read_int(bs, 8*ptr->length_size);
 #ifndef GPAC_DISABLE_ISOM_WRITE
 			extent_entry->original_extent_offset = extent_entry->extent_offset;
 #endif
 		}
 	}
 	return GF_OK;
 }
 
 #ifndef GPAC_DISABLE_ISOM_WRITE
