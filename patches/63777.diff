commit a6f9ad60124c4dd355084240019abc1e7d62baba
Author: Tim Ledbetter <timledbetter@gmail.com>
Date:   Sun Oct 29 12:02:32 2023 +0000

    LibGfx/OpenType: Ensure offsets are strictly less than the file size
    
    Previously, an offset that was equal to the size of the file would
    cause a crash.

diff --git a/Userland/Libraries/LibGfx/Font/OpenType/Font.cpp b/Userland/Libraries/LibGfx/Font/OpenType/Font.cpp
index 50b4662615..a090b31b94 100644
--- a/Userland/Libraries/LibGfx/Font/OpenType/Font.cpp
+++ b/Userland/Libraries/LibGfx/Font/OpenType/Font.cpp
@@ -384,187 +384,187 @@ ErrorOr<NonnullRefPtr<Font>> Font::try_load_from_externally_owned_memory(Readonl
 // FIXME: "loca" and "glyf" are not available for CFF fonts.
 ErrorOr<NonnullRefPtr<Font>> Font::try_load_from_offset(ReadonlyBytes buffer, u32 offset)
 {
     if (Checked<u32>::addition_would_overflow(offset, (u32)Sizes::OffsetTable))
         return Error::from_string_literal("Invalid offset in font header");
 
-    if (buffer.size() < offset + (u32)Sizes::OffsetTable)
+    if (buffer.size() <= offset + (u32)Sizes::OffsetTable)
         return Error::from_string_literal("Font file too small");
 
     Optional<ReadonlyBytes> opt_head_slice = {};
     Optional<ReadonlyBytes> opt_name_slice = {};
     Optional<ReadonlyBytes> opt_hhea_slice = {};
     Optional<ReadonlyBytes> opt_maxp_slice = {};
     Optional<ReadonlyBytes> opt_hmtx_slice = {};
     Optional<ReadonlyBytes> opt_cmap_slice = {};
     Optional<ReadonlyBytes> opt_loca_slice = {};
     Optional<ReadonlyBytes> opt_glyf_slice = {};
     Optional<ReadonlyBytes> opt_os2_slice = {};
     Optional<ReadonlyBytes> opt_kern_slice = {};
     Optional<ReadonlyBytes> opt_fpgm_slice = {};
     Optional<ReadonlyBytes> opt_prep_slice = {};
 
     Optional<Head> opt_head = {};
     Optional<Name> opt_name = {};
     Optional<Hhea> opt_hhea = {};
     Optional<Maxp> opt_maxp = {};
     Optional<Hmtx> opt_hmtx = {};
     Optional<Cmap> opt_cmap = {};
     Optional<OS2> opt_os2 = {};
     Optional<Kern> opt_kern = {};
     Optional<Fpgm> opt_fpgm = {};
     Optional<Prep> opt_prep = {};
     Optional<CBLC> cblc;
     Optional<CBDT> cbdt;
     Optional<GPOS> gpos;
 
     auto num_tables = be_u16(buffer.offset(offset + (u32)Offsets::NumTables));
-    if (buffer.size() < offset + (u32)Sizes::OffsetTable + num_tables * (u32)Sizes::TableRecord)
+    if (buffer.size() <= offset + (u32)Sizes::OffsetTable + num_tables * (u32)Sizes::TableRecord)
         return Error::from_string_literal("Font file too small");
 
     for (auto i = 0; i < num_tables; i++) {
         u32 record_offset = offset + (u32)Sizes::OffsetTable + i * (u32)Sizes::TableRecord;
         u32 tag = be_u32(buffer.offset(record_offset));
         u32 table_offset = be_u32(buffer.offset(record_offset + (u32)Offsets::TableRecord_Offset));
         u32 table_length = be_u32(buffer.offset(record_offset + (u32)Offsets::TableRecord_Length));
 
-        if (Checked<u32>::addition_would_overflow(table_offset, table_length))
+        if (table_length == 0 || Checked<u32>::addition_would_overflow(table_offset, table_length))
             return Error::from_string_literal("Invalid table offset or length in font");
 
         if (buffer.size() < table_offset + table_length)
             return Error::from_string_literal("Font file too small");
 
         auto buffer_here = ReadonlyBytes(buffer.offset(table_offset), table_length);
 
         // Get the table offsets we need.
         if (tag == tag_from_str("head")) {
             opt_head_slice = buffer_here;
         } else if (tag == tag_from_str("name")) {
             opt_name_slice = buffer_here;
         } else if (tag == tag_from_str("hhea")) {
             opt_hhea_slice = buffer_here;
         } else if (tag == tag_from_str("maxp")) {
             opt_maxp_slice = buffer_here;
         } else if (tag == tag_from_str("hmtx")) {
             opt_hmtx_slice = buffer_here;
         } else if (tag == tag_from_str("cmap")) {
             opt_cmap_slice = buffer_here;
         } else if (tag == tag_from_str("loca")) {
             opt_loca_slice = buffer_here;
         } else if (tag == tag_from_str("glyf")) {
             opt_glyf_slice = buffer_here;
         } else if (tag == tag_from_str("OS/2")) {
             opt_os2_slice = buffer_here;
         } else if (tag == tag_from_str("kern")) {
             opt_kern_slice = buffer_here;
         } else if (tag == tag_from_str("fpgm")) {
             opt_fpgm_slice = buffer_here;
         } else if (tag == tag_from_str("prep")) {
             opt_prep_slice = buffer_here;
         } else if (tag == tag_from_str("CBLC")) {
             cblc = TRY(CBLC::from_slice(buffer_here));
         } else if (tag == tag_from_str("CBDT")) {
             cbdt = TRY(CBDT::from_slice(buffer_here));
         } else if (tag == tag_from_str("GPOS")) {
             gpos = TRY(GPOS::from_slice(buffer_here));
         }
     }
 
     if (!opt_head_slice.has_value() || !(opt_head = Head::from_slice(opt_head_slice.value())).has_value())
         return Error::from_string_literal("Could not load Head");
     auto head = opt_head.value();
 
     if (!opt_name_slice.has_value() || !(opt_name = Name::from_slice(opt_name_slice.value())).has_value())
         return Error::from_string_literal("Could not load Name");
     auto name = opt_name.value();
 
     if (!opt_hhea_slice.has_value() || !(opt_hhea = Hhea::from_slice(opt_hhea_slice.value())).has_value())
         return Error::from_string_literal("Could not load Hhea");
     auto hhea = opt_hhea.value();
 
     if (!opt_maxp_slice.has_value() || !(opt_maxp = Maxp::from_slice(opt_maxp_slice.value())).has_value())
         return Error::from_string_literal("Could not load Maxp");
     auto maxp = opt_maxp.value();
 
     if (!opt_hmtx_slice.has_value() || !(opt_hmtx = Hmtx::from_slice(opt_hmtx_slice.value(), maxp.num_glyphs(), hhea.number_of_h_metrics())).has_value())
         return Error::from_string_literal("Could not load Hmtx");
     auto hmtx = opt_hmtx.value();
 
     if (!opt_cmap_slice.has_value() || !(opt_cmap = Cmap::from_slice(opt_cmap_slice.value())).has_value())
         return Error::from_string_literal("Could not load Cmap");
     auto cmap = opt_cmap.value();
 
     Optional<Loca> loca;
     if (opt_loca_slice.has_value()) {
         loca = Loca::from_slice(opt_loca_slice.value(), maxp.num_glyphs(), head.index_to_loc_format());
         if (!loca.has_value())
             return Error::from_string_literal("Could not load Loca");
     }
 
     Optional<Glyf> glyf;
     if (opt_glyf_slice.has_value()) {
         glyf = Glyf(opt_glyf_slice.value());
     }
 
     Optional<OS2> os2;
     if (opt_os2_slice.has_value())
         os2 = OS2(opt_os2_slice.value());
 
     Optional<Kern> kern {};
     if (opt_kern_slice.has_value())
         kern = TRY(Kern::from_slice(opt_kern_slice.value()));
 
     Optional<Fpgm> fpgm;
     if (opt_fpgm_slice.has_value())
         fpgm = Fpgm(opt_fpgm_slice.value());
 
     Optional<Prep> prep;
     if (opt_prep_slice.has_value())
         prep = Prep(opt_prep_slice.value());
 
     // Select cmap table. FIXME: Do this better. Right now, just looks for platform "Windows"
     // and corresponding encoding "Unicode full repertoire", or failing that, "Unicode BMP"
     for (u32 i = 0; i < cmap.num_subtables(); i++) {
         auto opt_subtable = cmap.subtable(i);
         if (!opt_subtable.has_value()) {
             continue;
         }
         auto subtable = opt_subtable.value();
         auto platform = subtable.platform_id();
         if (!platform.has_value())
             return Error::from_string_literal("Invalid Platform ID");
 
         /* NOTE: The encoding records are sorted first by platform ID, then by encoding ID.
            This means that the Windows platform will take precedence over Macintosh, which is
            usually what we want here. */
         if (platform.value() == Cmap::Subtable::Platform::Windows) {
             if (subtable.encoding_id() == (u16)Cmap::Subtable::WindowsEncoding::UnicodeFullRepertoire) {
                 cmap.set_active_index(i);
                 break;
             }
             if (subtable.encoding_id() == (u16)Cmap::Subtable::WindowsEncoding::UnicodeBMP) {
                 cmap.set_active_index(i);
                 break;
             }
         } else if (platform.value() == Cmap::Subtable::Platform::Macintosh) {
             cmap.set_active_index(i);
         }
     }
 
     return adopt_ref(*new Font(
         move(buffer),
         move(head),
         move(name),
         move(hhea),
         move(maxp),
         move(hmtx),
         move(cmap),
         move(loca),
         move(glyf),
         move(os2),
         move(kern),
         move(fpgm),
         move(prep),
         move(cblc),
         move(cbdt),
         move(gpos)));
 }
