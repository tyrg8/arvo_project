commit c0572443dcfe544071ef2f66f0059ebd7b01311b
Author: Jon Shallow <supjps-libcoap@jpshallow.com>
Date:   Fri Sep 23 09:40:10 2022 +0100

    uri.c: Fix oss-fuzz issue 48362
    
    Introduced by fix #818 Feb 7 2022.

diff --git a/src/uri.c b/src/uri.c
index d66038c0..21b8a53d 100644
--- a/src/uri.c
+++ b/src/uri.c
@@ -55,184 +55,184 @@ static int
 coap_split_uri_sub(const uint8_t *str_var,
                    size_t len,
                    coap_uri_t *uri,
                    coap_uri_check_t check_proxy) {
   const uint8_t *p, *q;
   int res = 0;
   int is_http_proxy_scheme = 0;
   size_t keep_len = len;
 
-  if (!str_var || !uri)
+  if (!str_var || !uri || len == 0)
     return -1;
 
   memset(uri, 0, sizeof(coap_uri_t));
   uri->port = COAP_DEFAULT_PORT;
 
   /* search for scheme */
   p = str_var;
   if (*p == '/') {
     if (check_proxy == COAP_URI_CHECK_PROXY)
       return -1;
     q = p;
     goto path;
   }
 
   q = (const uint8_t *)COAP_DEFAULT_SCHEME;
   while (len && *q && ISEQUAL_CI(*p, *q)) {
     ++p; ++q; --len;
   }
   if (*q && check_proxy == COAP_URI_CHECK_PROXY) {
     /* Scheme could be something other than coap */
     len = keep_len;
     p = str_var;
     q = (const uint8_t *)"http";
     while (len && *q && ISEQUAL_CI(*p, *q)) {
       ++p; ++q; --len;
     }
     if (*q == 0) {
       if (len && ISEQUAL_CI(*p, 's')) {
         /* https:// */
         ++p; --len;
         uri->scheme = COAP_URI_SCHEME_HTTPS;
         uri->port = 443;
       }
       else {
         /* http:// */
         uri->scheme = COAP_URI_SCHEME_HTTP;
         uri->port = 80;
       }
     }
     else {
       /* Unknown scheme */
       res = -1;
       goto error;
     }
     is_http_proxy_scheme = 1;
   }
 
   /* If q does not point to the string end marker '\0', the schema
    * identifier is wrong. */
   if (*q) {
     res = -1;
     goto error;
   }
 
   if (is_http_proxy_scheme == 0) {
     /* There might be an additional 's', indicating the secure version: */
     if (len && (*p == 's')) {
       ++p; --len;
       uri->scheme = COAP_URI_SCHEME_COAPS;
       uri->port = COAPS_DEFAULT_PORT;
     } else {
       uri->scheme = COAP_URI_SCHEME_COAP;
     }
 
     /* There might be an addition "+tcp", indicating reliable transport: */
     if (len>=4 && p[0] == '+' && p[1] == 't' && p[2] == 'c' && p[3] == 'p' ) {
       p += 4;
       len -= 4;
       if (uri->scheme == COAP_URI_SCHEME_COAPS)
         uri->scheme = COAP_URI_SCHEME_COAPS_TCP;
       else
         uri->scheme = COAP_URI_SCHEME_COAP_TCP;
     }
   }
   q = (const uint8_t *)"://";
   while (len && *q && *p == *q) {
     ++p; ++q; --len;
   }
 
   if (*q) {
     res = -2;
     goto error;
   }
 
   /* p points to beginning of Uri-Host */
   q = p;
   if (len && *p == '[') {        /* IPv6 address reference */
     ++p;
 
     while (len && *q != ']') {
       ++q; --len;
     }
 
     if (!len || *q != ']' || p == q) {
       res = -3;
       goto error;
     }
 
     COAP_SET_STR(&uri->host, q - p, p);
     ++q; --len;
   } else {                        /* IPv4 address or FQDN */
     while (len && *q != ':' && *q != '/' && *q != '?') {
       ++q;
       --len;
     }
 
     if (p == q) {
       res = -3;
       goto error;
     }
 
     COAP_SET_STR(&uri->host, q - p, p);
   }
 
   /* check for Uri-Port */
   if (len && *q == ':') {
     p = ++q;
     --len;
 
     while (len && isdigit(*q)) {
       ++q;
       --len;
     }
 
     if (p < q) {                /* explicit port number given */
       int uri_port = 0;
 
       while ((p < q) && (uri_port <= UINT16_MAX))
               uri_port = uri_port * 10 + (*p++ - '0');
 
       /* check if port number is in allowed range */
       if (uri_port > UINT16_MAX) {
               res = -4;
               goto error;
       }
 
       uri->port = (uint16_t)uri_port;
     }
   }
 
  path:                 /* at this point, p must point to an absolute path */
 
   if (!len)
     goto end;
 
   if (*q == '/') {
     p = ++q;
     --len;
 
     while (len && *q != '?') {
       ++q;
       --len;
     }
 
     if (p < q) {
       COAP_SET_STR(&uri->path, q - p, p);
       p = q;
     }
   }
 
   /* Uri_Query */
   if (len && *p == '?') {
     ++p;
     --len;
     COAP_SET_STR(&uri->query, len, p);
     len = 0;
   }
 
   end:
   return len ? -1 : 0;
 
   error:
   return res;
 }
