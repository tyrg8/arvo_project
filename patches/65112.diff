commit 69d88566b6063b6e11f473fccddaa0174b60d6a6
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Fri Dec 15 14:46:35 2023 +0100

    malloc-fail: Fix OOM error handling in xmlSwitchInputEncoding
    
    Make sure that in->buffer won't be set to NULL if a memory allocation fails.
    
    Short-lived regression.

diff --git a/parserInternals.c b/parserInternals.c
index 241329cd..cf7a9e0a 100644
--- a/parserInternals.c
+++ b/parserInternals.c
@@ -1308,91 +1308,94 @@ int
 xmlSwitchInputEncoding(xmlParserCtxtPtr ctxt, xmlParserInputPtr input,
                        xmlCharEncodingHandlerPtr handler)
 {
     int nbchars;
     xmlParserInputBufferPtr in;
 
     if ((input == NULL) || (input->buf == NULL)) {
         xmlCharEncCloseFunc(handler);
 	return (-1);
     }
     in = input->buf;
 
     input->flags |= XML_INPUT_HAS_ENCODING;
 
     /*
      * UTF-8 requires no encoding handler.
      */
     if ((handler != NULL) &&
         (xmlStrcasecmp(BAD_CAST handler->name, BAD_CAST "UTF-8") == 0)) {
         xmlCharEncCloseFunc(handler);
         handler = NULL;
     }
 
     if (in->encoder == handler)
         return (0);
 
     if (in->encoder != NULL) {
         /*
          * Switching encodings during parsing is a really bad idea,
          * but Chromium can switch between ISO-8859-1 and UTF-16 before
          * separate calls to xmlParseChunk.
          *
          * TODO: We should check whether the "raw" input buffer is empty and
          * convert the old content using the old encoder.
          */
 
         xmlCharEncCloseFunc(in->encoder);
         in->encoder = handler;
         return (0);
     }
 
     in->encoder = handler;
 
     /*
      * Is there already some content down the pipe to convert ?
      */
     if (xmlBufIsEmpty(in->buffer) == 0) {
+        xmlBufPtr buf;
         size_t processed;
 
+        buf = xmlBufCreate();
+        if (buf == NULL) {
+            xmlErrMemory(ctxt, NULL);
+            return(-1);
+        }
+
         /*
          * Shrink the current input buffer.
          * Move it as the raw buffer and create a new input buffer
          */
         processed = input->cur - input->base;
         xmlBufShrink(in->buffer, processed);
         input->consumed += processed;
         in->raw = in->buffer;
-        in->buffer = xmlBufCreate();
-        if (in->buffer == NULL) {
-            xmlErrMemory(ctxt, NULL);
-            return(-1);
-        }
+        in->buffer = buf;
         in->rawconsumed = processed;
 
         nbchars = xmlCharEncInput(in);
         xmlBufResetInput(in->buffer, input);
         if (nbchars == XML_ENC_ERR_MEMORY) {
             xmlErrMemory(ctxt, NULL);
         } else if (nbchars < 0) {
             xmlErrInternal(ctxt,
                            "switching encoding: encoder error\n",
                            NULL);
             xmlHaltParser(ctxt);
             return (-1);
         }
     }
     return (0);
 }
 
 /**
  * xmlSwitchToEncoding:
  * @ctxt:  the parser context
  * @handler:  the encoding handler
  *
  * Use encoding handler to decode input data.
  *
  * This function can be used to enforce the encoding of chunks passed
  * to xmlParseChunk.
  *
  * Returns 0 in case of success, -1 otherwise
  */
