commit 744df7b2443032e9d342055da12c634150b17c29
Author: Sergey Lyubka <cpq@users.noreply.github.com>
Date:   Fri Dec 29 11:59:02 2023 +0000

    Better checks in skip_chunk()

diff --git a/mongoose.c b/mongoose.c
index aa93c86c..ca0effd5 100644
--- a/mongoose.c
+++ b/mongoose.c
@@ -2817,12 +2817,13 @@ static bool is_hex_digit(int c) {
 static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
   int i = 0, n = 0;
   if (len < 3) return 0;
   while (i < len && is_hex_digit(buf[i])) i++;
+  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
   if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
-  n = (int) mg_unhexn(buf, (size_t) i);  // Decode hex length
+  n = (int) mg_unhexn(buf, (size_t) i);  // Decode chunk length
   if (n < 0) return -1;                  // Error
-  if (len < i + n + 4) return 0;         // Chunk not yet fully buffered
+  if (n > len - i - 4) return 0;         // Chunk not yet fully buffered
   if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
   *pl = i + 2, *dl = n;
   return i + 2 + n + 2;
 }
@@ -2830,64 +2831,64 @@ static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 static void http_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
   if (ev == MG_EV_READ || ev == MG_EV_CLOSE) {
     struct mg_http_message hm;
     size_t ofs = 0;  // Parsing offset
 
     while (c->is_resp == 0 && ofs < c->recv.len) {
       const char *buf = (char *) c->recv.buf + ofs;
       int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
       struct mg_str *te;  // Transfer - encoding header
       bool is_chunked = false;
       if (n < 0) {
         mg_error(c, "HTTP parse, %lu bytes", c->recv.len);
         mg_hexdump(c->recv.buf, c->recv.len > 16 ? 16 : c->recv.len);
         return;
       }
       if (n == 0) break;        // Request is not buffered yet
       if (ev == MG_EV_CLOSE) {  // If client did not set Content-Length
         hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
         hm.body.len = hm.message.len - (size_t) (hm.body.ptr - hm.message.ptr);
       }
       if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
         if (mg_vcasecmp(te, "chunked") == 0) {
           is_chunked = true;
         } else {
-          mg_error(c, "Invalid Transfer-Encoding"); // See #2460
+          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
           return;
         }
       }
 
       if (is_chunked) {
         // For chunked data, strip off prefixes and suffixes from chunks
         // and relocate them right after the headers, then report a message
         char *s = (char *) c->recv.buf + ofs + n;
         int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 
         // Find zero-length chunk (the end of the body)
         while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
         if (cl == 0) break;  // No zero-len chunk, buffer more data
         if (cl < 0) {
           mg_error(c, "Invalid chunk");
           break;
         }
 
         // Zero chunk found. Second pass: strip + relocate
         o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
         while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
           memmove(s + hm.body.len, s + o + pl, (size_t) dl);
           o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
           if (dl == 0) break;
         }
         ofs += (size_t) (n + o);
       } else {  // Normal, non-chunked data
         size_t len = c->recv.len - ofs - (size_t) n;
         if (hm.body.len > len) break;  // Buffer more data
         ofs += (size_t) n + hm.body.len;
       }
 
       if (c->is_accepted) c->is_resp = 1;  // Start generating response
       mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
     }
     if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
   }
   (void) evd, (void) fnd;
 }
diff --git a/src/http.c b/src/http.c
index f0b8453d..c9488683 100644
--- a/src/http.c
+++ b/src/http.c
@@ -962,12 +962,13 @@ static bool is_hex_digit(int c) {
 static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
   int i = 0, n = 0;
   if (len < 3) return 0;
   while (i < len && is_hex_digit(buf[i])) i++;
+  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
   if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
-  n = (int) mg_unhexn(buf, (size_t) i);  // Decode hex length
+  n = (int) mg_unhexn(buf, (size_t) i);  // Decode chunk length
   if (n < 0) return -1;                  // Error
-  if (len < i + n + 4) return 0;         // Chunk not yet fully buffered
+  if (n > len - i - 4) return 0;         // Chunk not yet fully buffered
   if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
   *pl = i + 2, *dl = n;
   return i + 2 + n + 2;
 }
@@ -975,64 +976,64 @@ static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 static void http_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
   if (ev == MG_EV_READ || ev == MG_EV_CLOSE) {
     struct mg_http_message hm;
     size_t ofs = 0;  // Parsing offset
 
     while (c->is_resp == 0 && ofs < c->recv.len) {
       const char *buf = (char *) c->recv.buf + ofs;
       int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
       struct mg_str *te;  // Transfer - encoding header
       bool is_chunked = false;
       if (n < 0) {
         mg_error(c, "HTTP parse, %lu bytes", c->recv.len);
         mg_hexdump(c->recv.buf, c->recv.len > 16 ? 16 : c->recv.len);
         return;
       }
       if (n == 0) break;        // Request is not buffered yet
       if (ev == MG_EV_CLOSE) {  // If client did not set Content-Length
         hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
         hm.body.len = hm.message.len - (size_t) (hm.body.ptr - hm.message.ptr);
       }
       if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
         if (mg_vcasecmp(te, "chunked") == 0) {
           is_chunked = true;
         } else {
-          mg_error(c, "Invalid Transfer-Encoding"); // See #2460
+          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
           return;
         }
       }
 
       if (is_chunked) {
         // For chunked data, strip off prefixes and suffixes from chunks
         // and relocate them right after the headers, then report a message
         char *s = (char *) c->recv.buf + ofs + n;
         int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 
         // Find zero-length chunk (the end of the body)
         while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
         if (cl == 0) break;  // No zero-len chunk, buffer more data
         if (cl < 0) {
           mg_error(c, "Invalid chunk");
           break;
         }
 
         // Zero chunk found. Second pass: strip + relocate
         o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
         while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
           memmove(s + hm.body.len, s + o + pl, (size_t) dl);
           o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
           if (dl == 0) break;
         }
         ofs += (size_t) (n + o);
       } else {  // Normal, non-chunked data
         size_t len = c->recv.len - ofs - (size_t) n;
         if (hm.body.len > len) break;  // Buffer more data
         ofs += (size_t) n + hm.body.len;
       }
 
       if (c->is_accepted) c->is_resp = 1;  // Start generating response
       mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
     }
     if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
   }
   (void) evd, (void) fnd;
 }
