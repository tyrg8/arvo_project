commit 3f79357ef0291f2c053d5a69842a72a4ec47124e
Author: Victor Zverovich <viz@fb.com>
Date:   Wed Apr 22 07:10:06 2020 -0700

    Fix a recent regression in handling max packed arguments

diff --git a/include/fmt/core.h b/include/fmt/core.h
index e301f1f5..7c37837c 100644
--- a/include/fmt/core.h
+++ b/include/fmt/core.h
@@ -1531,114 +1531,114 @@ class dynamic_format_arg_store
     void vlog(string_view format_str, format_args args);  // OK
     format_args args = make_format_args(42);  // Error: dangling reference
   \endrst
  */
 template <typename Context> class basic_format_args {
  public:
   using size_type = int;
   using format_arg = basic_format_arg<Context>;
 
  private:
   // A descriptor that contains information about formatting arguments.
   // If the number of arguments is less or equal to max_packed_args then
   // argument types are passed in the descriptor. This reduces binary code size
   // per formatting function call.
   unsigned long long desc_;
   union {
     // If is_packed() returns true then argument values are stored in values_;
     // otherwise they are stored in args_. This is done to improve cache
     // locality and reduce compiled code size since storing larger objects
     // may require more code (at least on x86-64) even if the same amount of
     // data is actually copied to stack. It saves ~10% on the bloat test.
     const internal::value<Context>* values_;
     const format_arg* args_;
   };
 
   bool is_packed() const { return (desc_ & internal::is_unpacked_bit) == 0; }
   bool has_named_args() const {
     return (desc_ & internal::has_named_args_bit) != 0;
   }
 
   internal::type type(int index) const {
     int shift = index * internal::packed_arg_bits;
     unsigned int mask = (1 << internal::packed_arg_bits) - 1;
     return static_cast<internal::type>((desc_ >> shift) & mask);
   }
 
   friend class internal::arg_map<Context>;
 
   basic_format_args(unsigned long long desc,
                     const internal::value<Context>* values)
       : desc_(desc), values_(values) {}
   basic_format_args(unsigned long long desc, const format_arg* args)
       : desc_(desc), args_(args) {}
 
   format_arg do_get(int index) const {
     format_arg arg;
     if (!is_packed()) {
       if (index < max_size()) arg = args_[index];
       return arg;
     }
-    if (index > internal::max_packed_args) return arg;
+    if (index >= internal::max_packed_args) return arg;
     arg.type_ = type(index);
     if (arg.type_ == internal::type::none_type) return arg;
     arg.value_ = values_[index];
     return arg;
   }
 
  public:
   basic_format_args() : desc_(0) {}
 
   /**
    \rst
    Constructs a `basic_format_args` object from `~fmt::format_arg_store`.
    \endrst
    */
   template <typename... Args>
   FMT_INLINE basic_format_args(const format_arg_store<Context, Args...>& store)
       : basic_format_args(store.desc, store.data_.args()) {}
 
   /**
    \rst
    Constructs a `basic_format_args` object from
    `~fmt::dynamic_format_arg_store`.
    \endrst
    */
   FMT_INLINE basic_format_args(const dynamic_format_arg_store<Context>& store)
       : basic_format_args(store.get_types(), store.data_.data()) {}
 
   /**
    \rst
    Constructs a `basic_format_args` object from a dynamic set of arguments.
    \endrst
    */
   basic_format_args(const format_arg* args, int count)
       : basic_format_args(
             internal::is_unpacked_bit | internal::to_unsigned(count), args) {}
 
   /** Returns the argument with the specified id. */
   format_arg get(int id) const {
     format_arg arg = do_get(id);
     if (arg.type_ == internal::type::named_arg_type)
       arg = arg.value_.named_arg->template deserialize<Context>();
     return arg;
   }
 
   template <typename Char> format_arg get(basic_string_view<Char> name) const {
     if (!has_named_args()) return {};
     const auto& named_args =
         (is_packed() ? values_[-1] : args_[-1].value_).named_args;
     for (size_t i = 0; i < named_args.size; ++i) {
       if (named_args.data[i].name == name) return get(named_args.data[i].id);
     }
     return {};
   }
 
   int max_size() const {
     unsigned long long max_packed = internal::max_packed_args;
     return static_cast<int>(is_packed() ? max_packed
                                         : desc_ & ~internal::is_unpacked_bit);
   }
 };
 
 /** An alias to ``basic_format_args<context>``. */
 // It is a separate type rather than an alias to make symbols readable.
