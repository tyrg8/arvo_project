commit 2592a04d8ab25ae5377b6c0443293eb708be3ef4
Author: Jacob Barthelmeh <jacob@wolfssl.com>
Date:   Tue Jul 13 15:49:40 2021 +0700

    fix for build with wpas and disable tls13

diff --git a/src/internal.c b/src/internal.c
index 76b927c04..c91c172a8 100644
--- a/src/internal.c
+++ b/src/internal.c
@@ -213,235 +213,237 @@ static const byte tls13Downgrade[7] = {
 #if !defined(NO_OLD_TLS) && !defined(WOLFSSL_AEAD_ONLY)
 static int SSL_hmac(WOLFSSL* ssl, byte* digest, const byte* in, word32 sz,
                     int padSz, int content, int verify, int epochOrder);
 
 #endif
 
 #endif /* !WOLFSSL_NO_TLS12 */
 
 #ifdef HAVE_QSH
     int QSH_Init(WOLFSSL* ssl);
 #endif
 
 #ifdef WOLFSSL_RENESAS_TSIP_TLS
     int tsip_useable(const WOLFSSL *ssl);
     int tsip_generatePremasterSecret();
     int tsip_generateEncryptPreMasterSecret(WOLFSSL *ssl, byte *out, word32 *outSz);
 #endif
 #if defined(OPENSSL_EXTRA) && defined(HAVE_SECRET_CALLBACK)
 
     static int  SessionSecret_callback(WOLFSSL* ssl, void* secret,
                                                   int* secretSz, void* ctx);
+#ifdef WOLFSSL_TLS13
     static int  SessionSecret_callback_Tls13(WOLFSSL* ssl, int id,
                        const unsigned char* secret, int secretSz, void* ctx);
+#endif
 
     /*
      * This function builds up string for key-logging then call user's
      * key-log-callback to pass the string for TLS1.2 and older.
      * The user's key-logging callback has been set via
      * wolfSSL_CTX_set_keylog_callback function. The logging string format is:
      * "CLIENT_RANDOM <hex-encoded client random> <hex-encoded master-secret>"
      * parameter
      *  - ssl: WOLFSSL object
      *  - secret: pointer to the buffer holding master-secret
      *  - secretSz: size of secret
      *  - ctx: not used
      * returns 0 on success, negative value on failure.
      */
     static int SessionSecret_callback(WOLFSSL* ssl, void* secret,
                     int* secretSz, void* ctx)
     {
         wolfSSL_CTX_keylog_cb_func logCb = NULL;
         int msSz;
         int hasVal;
         int i;
         const char* label = "CLIENT_RANDOM";
         int labelSz = sizeof("CLIENT_RANDOM");
         int buffSz;
         byte* log = NULL;
         word32 outSz;
         int idx;
         int ret;
         (void)ctx;
 
         if (ssl == NULL || secret == NULL || *secretSz == 0)
             return BAD_FUNC_ARG;
         if (ssl->arrays == NULL)
             return BAD_FUNC_ARG;
 
         /* get the user-callback func from CTX*/
         logCb = ssl->ctx->keyLogCb;
         if (logCb == NULL)
             return 0;
 
         /* need to make sure the given master-secret has a meaningful value */
         msSz   = *secretSz;
         hasVal = 0;
         for (i = 0; i < msSz; i++) {
             if (*((byte*)secret) != 0) {
                 hasVal = 1;
                 break;
             }
         }
         if (hasVal == 0)
             return 0; /* master-secret looks invalid */
 
         /* build up a hex-decoded keylog string
            "CLIENT_RANDOM <hex-encoded client random> <hex-encoded master-secret>"
            note that each keylog string does not have LF.
         */
         buffSz  = labelSz + (RAN_LEN * 2) + 1 + ((*secretSz) * 2) + 1;
         log     = XMALLOC(buffSz, ssl->heap, DYNAMIC_TYPE_SECRET);
 
         if (log == NULL)
             return MEMORY_E;
 
         XMEMSET(log, 0, buffSz);
         XMEMCPY(log, label, labelSz -1);     /* put label w/o terminator */
         XMEMSET(log + labelSz - 1, ' ', 1);               /* '\0' -> ' ' */
         idx = labelSz;
         outSz = buffSz - idx;
         if ((ret = Base16_Encode(ssl->arrays->clientRandom, RAN_LEN,
                                             log + idx, &outSz)) == 0) {
             idx += (outSz - 1); /* reduce terminator byte */
             outSz = buffSz - idx;
 
             if (outSz > 1) {
                 XMEMSET(log + idx, ' ', 1);  /* add space*/
                 idx++;
                 outSz = buffSz - idx;
 
                 if ((ret = Base16_Encode((byte*)secret, *secretSz,
                                              log + idx, &outSz)) == 0) {
                     /* pass the log to the client callback*/
                     logCb(ssl, (char*)log);
                     ret = 0;
                 }
             }
             else
                 ret = MEMORY_E;
         }
         XFREE(log, ssl->heap, DYNAMIC_TYPE_SECRET);
         return ret;
     }
 #if defined(WOLFSSL_TLS13)
     /*
      * This function builds up string for key-logging then call user's
      * key-log-callback to pass the string for TLS1.3.
      * The user's key-logging callback has been set via
      * wolfSSL_CTX_set_keylog_callback function. The logging string format is:
      * "<Lable> <hex-encoded client random> <hex-encoded secret>"
      *
      * parameter
      *  - ssl: WOLFSSL object
      *  - id: type of secret for logging
      *  - secret: pointer to the buffer holding secret
      *  - secretSz: size of secret
      *  - ctx: not used
      * returns 0 on success, negative value on failure.
      */
     static int SessionSecret_callback_Tls13(WOLFSSL* ssl, int id,
         const unsigned char* secret, int secretSz, void* ctx)
     {
         wolfSSL_CTX_keylog_cb_func logCb = NULL;
         char  label[50];
         int   labelSz = 0;
         int   buffSz  = 0;
         byte* log     = NULL;
         word32 outSz;
         int idx;
         int ret;
 
         (void)ctx;
 
         if (ssl == NULL || secret == NULL || secretSz == 0)
             return BAD_FUNC_ARG;
         if (ssl->arrays == NULL)
             return BAD_FUNC_ARG;
 
         /* get the user-callback func from CTX*/
         logCb = ssl->ctx->keyLogCb;
         if (logCb == NULL)
             return 0;
 
         switch (id) {
             case CLIENT_EARLY_TRAFFIC_SECRET:
 
                 labelSz = sizeof("CLIENT_EARLY_TRAFFIC_SECRET");
                 XSTRNCPY(label,"CLIENT_EARLY_TRAFFIC_SECRET", labelSz);
                 break;
 
             case CLIENT_HANDSHAKE_TRAFFIC_SECRET:
 
                 labelSz = sizeof("CLIENT_HANDSHAKE_TRAFFIC_SECRET");
                 XSTRNCPY(label, "CLIENT_HANDSHAKE_TRAFFIC_SECRET", labelSz);
                 break;
 
             case SERVER_HANDSHAKE_TRAFFIC_SECRET:
 
                 labelSz = sizeof("SERVER_HANDSHAKE_TRAFFIC_SECRET");
                 XSTRNCPY(label, "SERVER_HANDSHAKE_TRAFFIC_SECRET", labelSz);
                 break;
 
             case CLIENT_TRAFFIC_SECRET:
 
                 labelSz = sizeof("CLIENT_TRAFFIC_SECRET_0");
                 XSTRNCPY(label, "CLIENT_TRAFFIC_SECRET_0", labelSz);
                 break;
 
             case SERVER_TRAFFIC_SECRET:
 
                 labelSz = sizeof("SERVER_TRAFFIC_SECRET_0");
                 XSTRNCPY(label, "SERVER_TRAFFIC_SECRET_0", labelSz);
                 break;
 
             case EARLY_EXPORTER_SECRET:
 
                 labelSz = sizeof("EARLY_EXPORTER_SECRET");
                 XSTRNCPY(label, "EARLY_EXPORTER_SECRET", labelSz);
                 break;
 
             case EXPORTER_SECRET:
 
                 labelSz = sizeof("EXPORTER_SECRET");
                 XSTRNCPY(label, "EXPORTER_SECRET", labelSz);
                 break;
 
             default:
                 return BAD_FUNC_ARG;
         }
         /* prepare a log string for passing user callback */
         buffSz = labelSz + (RAN_LEN * 2) + 1 + secretSz * 2 + 1;
         log    = XMALLOC(buffSz, ssl->heap, DYNAMIC_TYPE_SECRET);
         if (log == NULL)
             return MEMORY_E;
 
         XMEMSET(log, 0, buffSz);
         XMEMCPY(log, label, labelSz - 1);     /* put label w/o terminator */
         XMEMSET(log + labelSz - 1, ' ', 1);               /* '\0' -> ' ' */
 
         idx = labelSz;
         outSz = buffSz - idx;
         if ((ret = Base16_Encode(ssl->arrays->clientRandom, RAN_LEN,
                                             log + idx, &outSz)) == 0) {
             idx  += (outSz -1); /* reduce terminator byte */
             outSz = buffSz - idx;
 
             if (outSz >1) {
                 XMEMSET(log + idx, ' ', 1);        /* add space*/
                 idx++;
                 outSz = buffSz - idx;
 
                 if ((ret = Base16_Encode((byte*)secret, secretSz,
                                 log + idx, &outSz)) == 0) {
                     logCb(ssl, (char*)log);
                     ret = 0;
                 }
             }
             else
                 ret = MEMORY_E;
         }
         XFREE(log, ssl->heap, DYNAMIC_TYPE_SECRET);
         return ret;
     }
 #endif /* WOLFSSL_TLS13*/
 #endif /* OPENSSL_EXTRA && HAVE_SECRET_CALLBACK*/
diff --git a/tests/api.c b/tests/api.c
index 7c78694c5..746c75cd0 100644
--- a/tests/api.c
+++ b/tests/api.c
@@ -30600,124 +30600,125 @@ static void test_wolfSSL_Tls12_Key_Logging_test(void)
 #endif /* OPENSSL_EXTRA && HAVE_SECRET_CALLBACK */
 }
 static void test_wolfSSL_Tls13_Key_Logging_test(void)
 {
- #if defined(OPENSSL_EXTRA) && defined(HAVE_SECRET_CALLBACK)
+ #if defined(WOLFSSL_TLS13) && defined(OPENSSL_EXTRA) && \
+    defined(HAVE_SECRET_CALLBACK)
  /* This test is intended for checking whether keylog callback is called
   * in client during TLS handshake between the client and a server.
   */
 
     tcp_ready ready;
     func_args client_args;
     func_args server_args;
     THREAD_TYPE serverThread;
     callback_functions server_cbf;
     callback_functions client_cbf;
     SOCKET_T sockfd = 0;
     WOLFSSL_CTX* ctx;
     WOLFSSL*     ssl;
     XFILE fp;
     char msg[64] = "hello wolfssl!";
     char reply[1024];
     int  msgSz = (int)XSTRLEN(msg);
 
     printf(testingFmt, "wolfSSL_Tls13_Key_Logging_test()");
 
 #ifdef WOLFSSL_TIRTOS
     fdOpenSession(Task_self());
 #endif
 
     InitTcpReady(&ready);
     ready.port = 22222;
 
     XMEMSET(&client_args, 0, sizeof(func_args));
     XMEMSET(&server_args, 0, sizeof(func_args));
     XMEMSET(&server_cbf, 0, sizeof(callback_functions));
     XMEMSET(&client_cbf, 0, sizeof(callback_functions));
     server_cbf.method     = wolfTLSv1_3_server_method;  /* TLS1.3 */
 
     server_args.callbacks = &server_cbf;
     server_args.signal    = &ready;
 
     /* clean up keylog file */
     fp = XFOPEN("./MyKeyLog.txt", "w");
     XFCLOSE(fp);
 
     /* start server task */
     start_thread(server_task, &server_args, &serverThread);
     wait_tcp_ready(&server_args);
 
 
     /* run as a TLS1.2 client */
     AssertNotNull(ctx = wolfSSL_CTX_new(wolfTLSv1_3_client_method()));
     AssertIntEQ(WOLFSSL_SUCCESS,
             wolfSSL_CTX_load_verify_locations(ctx, caCertFile, 0));
     AssertIntEQ(WOLFSSL_SUCCESS,
         wolfSSL_CTX_use_certificate_file(ctx, cliCertFile, SSL_FILETYPE_PEM));
     AssertIntEQ(WOLFSSL_SUCCESS,
         wolfSSL_CTX_use_PrivateKey_file(ctx, cliKeyFile, SSL_FILETYPE_PEM));
 
     tcp_connect(&sockfd, wolfSSLIP, server_args.signal->port, 0, 0, NULL);
 
     /* set keylog callback */
     wolfSSL_CTX_set_keylog_callback(ctx,keyLog_callback);
 
     /* get connected the server task */
     AssertNotNull(ssl = wolfSSL_new(ctx));
     AssertIntEQ(wolfSSL_set_fd(ssl, sockfd), WOLFSSL_SUCCESS);
     AssertIntEQ(wolfSSL_connect(ssl), WOLFSSL_SUCCESS);
     AssertIntEQ(wolfSSL_write(ssl, msg, msgSz), msgSz);
     AssertIntGT(wolfSSL_read(ssl, reply, sizeof(reply)), 0);
     wolfSSL_free(ssl);
     wolfSSL_CTX_free(ctx);
 
     join_thread(serverThread);
 
     FreeTcpReady(&ready);
 
 #ifdef WOLFSSL_TIRTOS
     fdOpenSession(Task_self());
 #endif
 
     /* check if the keylog file exists */
 
     char  buff[300] = {0};
     int  found[4]   = {0};
 
     fp = XFOPEN("./MyKeyLog.txt", "r");
 
     AssertNotNull(fp);
 
     while(XFGETS( buff, (int)sizeof(buff),fp) != NULL ) {
         if(0 == strncmp(buff,"CLIENT_HANDSHAKE_TRAFFIC_SECRET ",
                     sizeof("CLIENT_HANDSHAKE_TRAFFIC_SECRET ")-1)) {
             found[0] = 1;
             continue;
         }
         else if(0 == strncmp(buff,"SERVER_HANDSHAKE_TRAFFIC_SECRET ",
                     sizeof("SERVER_HANDSHAKE_TRAFFIC_SECRET ")-1)) {
             found[1] = 1;
             continue;
         }
         else if(0 == strncmp(buff,"CLIENT_TRAFFIC_SECRET_0 ",
                     sizeof("CLIENT_TRAFFIC_SECRET_0 ")-1)) {
             found[2] = 1;
             continue;
         }
         else if(0 == strncmp(buff,"SERVER_TRAFFIC_SECRET_0 ",
                     sizeof("SERVER_TRAFFIC_SECRET_0 ")-1)) {
             found[3] = 1;
             continue;
         }
     }
     XFCLOSE(fp);
     int numfnd = 0;
     for( uint i = 0; i < 4; i++) {
         if( found[i] != 0)
             numfnd++;
     }
     AssertIntEQ( numfnd,4 );
 
     printf(resultFmt, passed);
 
 #endif /* OPENSSL_EXTRA && HAVE_SECRET_CALLBACK */
 }
