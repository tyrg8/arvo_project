commit d280c44fe00092d240f4da19b1247124069371c7
Merge: 1412078d c733067d
Author: Doron Somech <somdoron@gmail.com>
Date:   Sat Aug 15 17:06:58 2020 +0300

    Merge pull request #4011 from bluca/fuzzers
    
    Problem: use-after-free in WS

diff --git a/src/stream_engine_base.cpp b/src/stream_engine_base.cpp
index 275be24d..9b9563a9 100644
--- a/src/stream_engine_base.cpp
+++ b/src/stream_engine_base.cpp
@@ -329,62 +329,68 @@ bool zmq::stream_engine_base_t::in_event_internal ()
 void zmq::stream_engine_base_t::out_event ()
 {
     zmq_assert (!_io_error);
 
     //  If write buffer is empty, try to read new data from the encoder.
     if (!_outsize) {
         //  Even when we stop polling as soon as there is no
         //  data to send, the poller may invoke out_event one
         //  more time due to 'speculative write' optimisation.
         if (unlikely (_encoder == NULL)) {
             zmq_assert (_handshaking);
             return;
         }
 
         _outpos = NULL;
         _outsize = _encoder->encode (&_outpos, 0);
 
         while (_outsize < static_cast<size_t> (_options.out_batch_size)) {
-            if ((this->*_next_msg) (&_tx_msg) == -1)
-                break;
+            if ((this->*_next_msg) (&_tx_msg) == -1) {
+                //  ws_engine can cause an engine error and delete it, so
+                //  bail out immediately to avoid use-after-free
+                if (errno == ECONNRESET)
+                    return;
+                else
+                    break;
+            }
             _encoder->load_msg (&_tx_msg);
             unsigned char *bufptr = _outpos + _outsize;
             const size_t n =
               _encoder->encode (&bufptr, _options.out_batch_size - _outsize);
             zmq_assert (n > 0);
             if (_outpos == NULL)
                 _outpos = bufptr;
             _outsize += n;
         }
 
         //  If there is no data to send, stop polling for output.
         if (_outsize == 0) {
             _output_stopped = true;
             reset_pollout ();
             return;
         }
     }
 
     //  If there are any data to write in write buffer, write as much as
     //  possible to the socket. Note that amount of data to write can be
     //  arbitrarily large. However, we assume that underlying TCP layer has
     //  limited transmission buffer and thus the actual number of bytes
     //  written should be reasonably modest.
     const int nbytes = write (_outpos, _outsize);
 
     //  IO error has occurred. We stop waiting for output events.
     //  The engine is not terminated until we detect input error;
     //  this is necessary to prevent losing incoming messages.
     if (nbytes == -1) {
         reset_pollout ();
         return;
     }
 
     _outpos += nbytes;
     _outsize -= nbytes;
 
     //  If we are still handshaking and there are no data
     //  to send, stop polling for output.
     if (unlikely (_handshaking))
         if (_outsize == 0)
             reset_pollout ();
 }
