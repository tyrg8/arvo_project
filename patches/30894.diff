commit 888fab501b2f1e43bb99143b4ec58f01fe72a4ae
Merge: 742731a65 e4f8545e3
Author: toddouska <todd@wolfssl.com>
Date:   Mon Feb 15 12:23:28 2021 -0800

    Merge pull request #3758 from SparkiDev/sp_exch_fix
    
    SP math all: sp_exch fixed up

diff --git a/wolfcrypt/src/dh.c b/wolfcrypt/src/dh.c
index 0c9f18275..3315c2dfa 100644
--- a/wolfcrypt/src/dh.c
+++ b/wolfcrypt/src/dh.c
@@ -2332,166 +2332,171 @@ int wc_DhSetKey(DhKey* key, const byte* p, word32 pSz, const byte* g,
 /* modulus_size in bits */
 int wc_DhGenerateParams(WC_RNG *rng, int modSz, DhKey *dh)
 {
     mp_int  tmp, tmp2;
     int     groupSz = 0, bufSz = 0,
             primeCheckCount = 0,
             primeCheck = MP_NO,
             ret = 0;
     unsigned char *buf = NULL;
 
     if (rng == NULL || dh == NULL)
         ret = BAD_FUNC_ARG;
 
     /* set group size in bytes from modulus size
      * FIPS 186-4 defines valid values (1024, 160) (2048, 256) (3072, 256)
      */
     if (ret == 0) {
         switch (modSz) {
             case 1024:
                 groupSz = 20;
                 break;
             case 2048:
             case 3072:
                 groupSz = 32;
                 break;
             default:
                 ret = BAD_FUNC_ARG;
                 break;
         }
     }
 
     if (ret == 0) {
         /* modulus size in bytes */
         modSz /= WOLFSSL_BIT_SIZE;
         bufSz = modSz - groupSz;
 
         /* allocate ram */
         buf = (unsigned char *)XMALLOC(bufSz,
                                        dh->heap, DYNAMIC_TYPE_TMP_BUFFER);
         if (buf == NULL)
             ret = MEMORY_E;
     }
 
     /* make a random string that will be multiplied against q */
     if (ret == 0)
         ret = wc_RNG_GenerateBlock(rng, buf, bufSz);
 
     if (ret == 0) {
         /* force magnitude */
         buf[0] |= 0xC0;
         /* force even */
         buf[bufSz - 1] &= ~1;
 
         if (mp_init_multi(&tmp, &tmp2, &dh->p, &dh->q, &dh->g, 0)
                 != MP_OKAY) {
             ret = MP_INIT_E;
         }
     }
 
     if (ret == 0) {
         if (mp_read_unsigned_bin(&tmp2, buf, bufSz) != MP_OKAY)
             ret = MP_READ_E;
     }
 
     /* make our prime q */
     if (ret == 0) {
         if (mp_rand_prime(&dh->q, groupSz, rng, NULL) != MP_OKAY)
             ret = PRIME_GEN_E;
     }
 
     /* p = random * q */
     if (ret == 0) {
         if (mp_mul(&dh->q, &tmp2, &dh->p) != MP_OKAY)
             ret = MP_MUL_E;
     }
 
     /* p = random * q + 1, so q is a prime divisor of p-1 */
     if (ret == 0) {
         if (mp_add_d(&dh->p, 1, &dh->p) != MP_OKAY)
             ret = MP_ADD_E;
     }
 
     /* tmp = 2q  */
     if (ret == 0) {
         if (mp_add(&dh->q, &dh->q, &tmp) != MP_OKAY)
             ret = MP_ADD_E;
     }
 
     /* loop until p is prime */
     if (ret == 0) {
         do {
             if (mp_prime_is_prime_ex(&dh->p, 8, &primeCheck, rng) != MP_OKAY)
                 ret = PRIME_GEN_E;
 
             if (primeCheck != MP_YES) {
                 /* p += 2q */
                 if (mp_add(&tmp, &dh->p, &dh->p) != MP_OKAY)
                     ret = MP_ADD_E;
                 else
                     primeCheckCount++;
             }
         } while (ret == 0 && primeCheck == MP_NO);
     }
 
     /* tmp2 += (2*loop_check_prime)
      * to have p = (q * tmp2) + 1 prime
      */
     if ((ret == 0) && (primeCheckCount)) {
         if (mp_add_d(&tmp2, 2 * primeCheckCount, &tmp2) != MP_OKAY)
             ret = MP_ADD_E;
     }
 
     /* find a value g for which g^tmp2 != 1 */
     if ((ret == 0) && (mp_set(&dh->g, 1) != MP_OKAY))
         ret = MP_ZERO_E;
 
     if (ret == 0) {
         do {
             if (mp_add_d(&dh->g, 1, &dh->g) != MP_OKAY)
                 ret = MP_ADD_E;
             else if (mp_exptmod(&dh->g, &tmp2, &dh->p, &tmp) != MP_OKAY)
                 ret = MP_EXPTMOD_E;
         } while (ret == 0 && mp_cmp_d(&tmp, 1) == MP_EQ);
     }
 
     if (ret == 0) {
         /* at this point tmp generates a group of order q mod p */
+#ifndef USE_FAST_MATH
+        /* Exchanging is quick when the data pointer can be copied. */
         mp_exch(&tmp, &dh->g);
+#else
+        mp_copy(&tmp, &dh->g);
+#endif
     }
 
     /* clear the parameters if there was an error */
     if ((ret != 0) && (dh != NULL)) {
         mp_clear(&dh->q);
         mp_clear(&dh->p);
         mp_clear(&dh->g);
     }
 
     if (buf != NULL) {
         ForceZero(buf, bufSz);
         if (dh != NULL) {
             XFREE(buf, dh->heap, DYNAMIC_TYPE_TMP_BUFFER);
         }
     }
     mp_clear(&tmp);
     mp_clear(&tmp2);
 
     return ret;
 }
 
 
 /* Export raw DH parameters from DhKey structure
  *
  * dh   - pointer to initialized DhKey structure
  * p    - output location for DH (p) parameter
  * pSz  - [IN/OUT] size of output buffer for p, size of p
  * q    - output location for DH (q) parameter
  * qSz  - [IN/OUT] size of output buffer for q, size of q
  * g    - output location for DH (g) parameter
  * gSz  - [IN/OUT] size of output buffer for g, size of g
  *
  * If p, q, and g pointers are all passed in as NULL, the function
  * will set pSz, qSz, and gSz to the required output buffer sizes for p,
  * q, and g. In this case, the function will return LENGTH_ONLY_E.
  *
  * returns 0 on success, negative upon failure
  */
diff --git a/wolfcrypt/src/dsa.c b/wolfcrypt/src/dsa.c
index f62cec92d..dbfa010ef 100644
--- a/wolfcrypt/src/dsa.c
+++ b/wolfcrypt/src/dsa.c
@@ -224,199 +224,204 @@ int wc_MakeDsaKey(WC_RNG *rng, DsaKey *dsa)
 /* modulus_size in bits */
 int wc_MakeDsaParameters(WC_RNG *rng, int modulus_size, DsaKey *dsa)
 {
     mp_int  tmp, tmp2;
     int     err, msize, qsize,
             loop_check_prime = 0,
             check_prime = MP_NO;
     unsigned char   *buf;
 
     if (rng == NULL || dsa == NULL)
         return BAD_FUNC_ARG;
 
     /* set group size in bytes from modulus size
      * FIPS 186-4 defines valid values (1024, 160) (2048, 256) (3072, 256)
      */
     switch (modulus_size) {
         case 1024:
             qsize = 20;
             break;
         case 2048:
         case 3072:
             qsize = 32;
             break;
         default:
             return BAD_FUNC_ARG;
     }
 
     /* modulus size in bytes */
     msize = modulus_size / WOLFSSL_BIT_SIZE;
 
     /* allocate ram */
     buf = (unsigned char *)XMALLOC(msize - qsize,
                                    dsa->heap, DYNAMIC_TYPE_TMP_BUFFER);
     if (buf == NULL) {
         return MEMORY_E;
     }
 
     /* make a random string that will be multiplied against q */
     err = wc_RNG_GenerateBlock(rng, buf, msize - qsize);
     if (err != MP_OKAY) {
         XFREE(buf, dsa->heap, DYNAMIC_TYPE_TMP_BUFFER);
         return err;
     }
 
     /* force magnitude */
     buf[0] |= 0xC0;
 
     /* force even */
     buf[msize - qsize - 1] &= ~1;
 
     if (mp_init_multi(&tmp2, &dsa->p, &dsa->q, 0, 0, 0) != MP_OKAY) {
         mp_clear(&dsa->q);
         XFREE(buf, dsa->heap, DYNAMIC_TYPE_TMP_BUFFER);
         return MP_INIT_E;
     }
 
     err = mp_read_unsigned_bin(&tmp2, buf, msize - qsize);
     if (err != MP_OKAY) {
         mp_clear(&dsa->q);
         mp_clear(&dsa->p);
         mp_clear(&tmp2);
         XFREE(buf, dsa->heap, DYNAMIC_TYPE_TMP_BUFFER);
         return err;
     }
     XFREE(buf, dsa->heap, DYNAMIC_TYPE_TMP_BUFFER);
 
     /* make our prime q */
     err = mp_rand_prime(&dsa->q, qsize, rng, NULL);
     if (err != MP_OKAY) {
         mp_clear(&dsa->q);
         mp_clear(&dsa->p);
         mp_clear(&tmp2);
         return err;
     }
 
     /* p = random * q */
     err = mp_mul(&dsa->q, &tmp2, &dsa->p);
     if (err != MP_OKAY) {
         mp_clear(&dsa->q);
         mp_clear(&dsa->p);
         mp_clear(&tmp2);
         return err;
     }
 
     /* p = random * q + 1, so q is a prime divisor of p-1 */
     err = mp_add_d(&dsa->p, 1, &dsa->p);
     if (err != MP_OKAY) {
         mp_clear(&dsa->q);
         mp_clear(&dsa->p);
         mp_clear(&tmp2);
         return err;
     }
 
     if (mp_init(&tmp) != MP_OKAY) {
         mp_clear(&dsa->q);
         mp_clear(&dsa->p);
         mp_clear(&tmp2);
         return MP_INIT_E;
     }
 
     /* tmp = 2q  */
     err = mp_add(&dsa->q, &dsa->q, &tmp);
     if (err != MP_OKAY) {
         mp_clear(&dsa->q);
         mp_clear(&dsa->p);
         mp_clear(&tmp);
         mp_clear(&tmp2);
         return err;
     }
 
     /* loop until p is prime */
     while (check_prime == MP_NO) {
         err = mp_prime_is_prime_ex(&dsa->p, 8, &check_prime, rng);
         if (err != MP_OKAY) {
             mp_clear(&dsa->q);
             mp_clear(&dsa->p);
             mp_clear(&tmp);
             mp_clear(&tmp2);
             return err;
         }
 
         if (check_prime != MP_YES) {
             /* p += 2q */
             err = mp_add(&tmp, &dsa->p, &dsa->p);
             if (err != MP_OKAY) {
                 mp_clear(&dsa->q);
                 mp_clear(&dsa->p);
                 mp_clear(&tmp);
                 mp_clear(&tmp2);
                 return err;
             }
 
             loop_check_prime++;
         }
     }
 
     /* tmp2 += (2*loop_check_prime)
      * to have p = (q * tmp2) + 1 prime
      */
     if (loop_check_prime) {
         err = mp_add_d(&tmp2, 2*loop_check_prime, &tmp2);
         if (err != MP_OKAY) {
             mp_clear(&dsa->q);
             mp_clear(&dsa->p);
             mp_clear(&tmp);
             mp_clear(&tmp2);
             return err;
         }
     }
 
     if (mp_init(&dsa->g) != MP_OKAY) {
         mp_clear(&dsa->q);
         mp_clear(&dsa->p);
         mp_clear(&tmp);
         mp_clear(&tmp2);
         return MP_INIT_E;
     }
 
     /* find a value g for which g^tmp2 != 1 */
     if (mp_set(&dsa->g, 1) != MP_OKAY) {
         mp_clear(&dsa->q);
         mp_clear(&dsa->p);
         mp_clear(&tmp);
         mp_clear(&tmp2);
         return MP_INIT_E;
     }
 
     do {
         err = mp_add_d(&dsa->g, 1, &dsa->g);
         if (err != MP_OKAY) {
             mp_clear(&dsa->q);
             mp_clear(&dsa->p);
             mp_clear(&dsa->g);
             mp_clear(&tmp);
             mp_clear(&tmp2);
             return err;
         }
 
         err = mp_exptmod(&dsa->g, &tmp2, &dsa->p, &tmp);
         if (err != MP_OKAY) {
             mp_clear(&dsa->q);
             mp_clear(&dsa->p);
             mp_clear(&dsa->g);
             mp_clear(&tmp);
             mp_clear(&tmp2);
             return err;
         }
 
     } while (mp_cmp_d(&tmp, 1) == MP_EQ);
 
     /* at this point tmp generates a group of order q mod p */
+#ifndef USE_FAST_MATH
+    /* Exchanging is quick when the data pointer can be copied. */
     mp_exch(&tmp, &dsa->g);
+#else
+    mp_copy(&tmp, &dsa->g);
+#endif
 
     mp_clear(&tmp);
     mp_clear(&tmp2);
 
     return MP_OKAY;
 }
 #endif /* WOLFSSL_KEY_GEN */
diff --git a/wolfcrypt/src/sp_int.c b/wolfcrypt/src/sp_int.c
index d51ab9a57..4b760631d 100644
--- a/wolfcrypt/src/sp_int.c
+++ b/wolfcrypt/src/sp_int.c
@@ -2409,35 +2409,42 @@ int sp_init_copy(sp_int* r, sp_int* a)
 #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
     !defined(NO_DH) || !defined(NO_DSA)
 /* Exchange the values in a and b.
  *
  * @param  [in,out]  a  SP integer to swap.
  * @param  [in,out]  b  SP integer to swap.
  *
  * @return  MP_OKAY on success.
  * @return  MP_VAL when a or b is NULL.
  * @return  MP_MEM when dynamic memory allocation fails.
  */
 int sp_exch(sp_int* a, sp_int* b)
 {
     int err = MP_OKAY;
     DECL_SP_INT(t, (a != NULL) ? a->used : 1);
 
     if ((a == NULL) || (b == NULL)) {
         err = MP_VAL;
     }
+    if ((err == MP_OKAY) && ((a->size < b->used) || (b->size < a->used))) {
+        err = MP_VAL;
+    }
 
     ALLOC_SP_INT(t, a->used, err, NULL);
     if (err == MP_OKAY) {
+        int asize = a->size;
+        int bsize = b->size;
         XMEMCPY(t, a, MP_INT_SIZEOF(a->used));
         XMEMCPY(a, b, MP_INT_SIZEOF(b->used));
-        XMEMCPY(b, t, MP_INT_SIZEOF(a->used));
+        XMEMCPY(b, t, MP_INT_SIZEOF(t->used));
+        a->size = asize;
+        b->size = bsize;
     }
 
     FREE_SP_INT(t, NULL);
     return err;
 }
 #endif /* (WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY) || !NO_DH ||
         * !NO_DSA */
 
 #if defined(HAVE_ECC) && defined(ECC_TIMING_RESISTANT) && \
     !defined(WC_NO_CACHE_RESISTANT)
