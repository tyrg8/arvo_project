commit 7a98246a075d55f2eb5bad40028a28f3cfdd97c1
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sat Feb 10 12:38:53 2018 -0500

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6196

diff --git a/MagickCore/string.c b/MagickCore/string.c
index 9a0853dab..cafe63c26 100644
--- a/MagickCore/string.c
+++ b/MagickCore/string.c
@@ -182,95 +182,95 @@ static StringInfo *AcquireStringInfoContainer()
 MagickExport StringInfo *AcquireStringInfo(const size_t length)
 {
   StringInfo
     *string_info;
 
   string_info=AcquireStringInfoContainer();
   string_info->length=length;
   if (~string_info->length >= (MagickPathExtent-1))
     string_info->datum=(unsigned char *) AcquireQuantumMemory(
       string_info->length+MagickPathExtent,sizeof(*string_info->datum));
   if (string_info->datum == (unsigned char *) NULL)
     ThrowFatalException(ResourceLimitFatalError,"MemoryAllocationFailed");
+  (void) memset(string_info->datum,0,length+MagickPathExtent);
   return(string_info);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   B l o b T o S t r i n g I n f o                                           %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  BlobToStringInfo() returns the contents of a blob as a StringInfo structure
 %  with MagickPathExtent extra space.
 %
 %  The format of the BlobToStringInfo method is:
 %
 %      StringInfo *BlobToStringInfo(const void *blob,const size_t length)
 %
 %  A description of each parameter follows:
 %
 %    o blob: the blob.
 %
 %    o length: the length of the blob.
 %
 */
 MagickExport StringInfo *BlobToStringInfo(const void *blob,const size_t length)
 {
   StringInfo
     *string_info;
 
   if (~length < MagickPathExtent)
     ThrowFatalException(ResourceLimitFatalError,"MemoryAllocationFailed");
   string_info=AcquireStringInfoContainer();
   string_info->length=length;
   string_info->datum=(unsigned char *) AcquireQuantumMemory(length+
     MagickPathExtent,sizeof(*string_info->datum));
   if (string_info->datum == (unsigned char *) NULL)
     {
       string_info=DestroyStringInfo(string_info);
       return((StringInfo *) NULL);
     }
   if (blob != (const void *) NULL)
     (void) memcpy(string_info->datum,blob,length);
-  else
-    (void) memset(string_info->datum,0,length);
+  (void) memset(string_info->datum+length,0,MagickPathExtent);
   return(string_info);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   C l o n e S t r i n g                                                     %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  CloneString() replaces or frees the destination string to make it
-%  a clone of the input string plus MagickPathExtent more space so the string 
+%  a clone of the input string plus MagickPathExtent more space so the string
 %  may be worked on.
 %
 %  If source is a NULL pointer the destination string will be freed and set to
 %  a NULL pointer.  A pointer to the stored in the destination is also returned.
 %
 %  When finished the non-NULL string should be freed using DestoryString()
 %  or using CloneString() with a NULL pointed for the source.
 %
 %  The format of the CloneString method is:
 %
 %      char *CloneString(char **destination,const char *source)
 %
 %  A description of each parameter follows:
 %
 %    o destination:  A pointer to a character string.
 %
 %    o source: A character string.
 %
 */
@@ -1507,125 +1507,125 @@ MagickExport MagickBooleanType IsStringFalse(const char *value)
 {
   if (value == (const char *) NULL)
     return(MagickFalse);
   if (LocaleCompare(value,"false") == 0)
     return(MagickTrue);
   if (LocaleCompare(value,"off") == 0)
     return(MagickTrue);
   if (LocaleCompare(value,"no") == 0)
     return(MagickTrue);
   if (LocaleCompare(value,"0") == 0)
     return(MagickTrue);
   return(MagickFalse);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   P r i n t S t r i n g I n f o                                             %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  PrintStringInfo() prints the string.
 %
 %  The format of the PrintStringInfo method is:
 %
 %      void PrintStringInfo(FILE *file,const char *id,
 %        const StringInfo *string_info)
 %
 %  A description of each parameter follows:
 %
 %    o file: the file, typically stdout.
 %
 %    o id: the string id.
 %
 %    o string_info: the string info.
 %
 */
 MagickExport void PrintStringInfo(FILE *file,const char *id,
   const StringInfo *string_info)
 {
   register const char
     *p;
 
   register size_t
     i,
     j;
 
   assert(id != (const char *) NULL);
   assert(string_info != (StringInfo *) NULL);
   assert(string_info->signature == MagickCoreSignature);
   p=(char *) string_info->datum;
   for (i=0; i < string_info->length; i++)
   {
     if (((int) ((unsigned char) *p) < 32) &&
         (isspace((int) ((unsigned char) *p)) == 0))
       break;
     p++;
   }
-  (void) FormatLocaleFile(file,"%s(%.20g): ",id,(double) string_info->length);
+  (void) FormatLocaleFile(file,"%s(%.20g):\n",id,(double) string_info->length);
   if (i == string_info->length)
     {
       for (i=0; i < string_info->length; i++)
         (void) fputc(string_info->datum[i],file);
       (void) fputc('\n',file);
       return;
     }
   /*
     Convert string to a HEX list.
   */
   p=(char *) string_info->datum;
   for (i=0; i < string_info->length; i+=0x14)
   {
     (void) FormatLocaleFile(file,"0x%08lx: ",(unsigned long) (0x14*i));
     for (j=1; j <= MagickMin(string_info->length-i,0x14); j++)
     {
       (void) FormatLocaleFile(file,"%02lx",(unsigned long) (*(p+j)) & 0xff);
       if ((j % 0x04) == 0)
         (void) fputc(' ',file);
     }
     for ( ; j <= 0x14; j++)
     {
       (void) fputc(' ',file);
       (void) fputc(' ',file);
       if ((j % 0x04) == 0)
         (void) fputc(' ',file);
     }
     (void) fputc(' ',file);
     for (j=1; j <= MagickMin(string_info->length-i,0x14); j++)
     {
       if (isprint((int) ((unsigned char) *p)) != 0)
         (void) fputc(*p,file);
       else
         (void) fputc('-',file);
       p++;
     }
     (void) fputc('\n',file);
   }
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   R e s e t S t r i n g I n f o                                             %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ResetStringInfo() reset the string to all null bytes.
 %
 %  The format of the ResetStringInfo method is:
 %
 %      void ResetStringInfo(StringInfo *string_info)
 %
 %  A description of each parameter follows:
 %
 %    o string_info: the string info.
 %
 */
@@ -1633,79 +1633,79 @@ MagickExport void ResetStringInfo(StringInfo *string_info)
 {
   assert(string_info != (StringInfo *) NULL);
   assert(string_info->signature == MagickCoreSignature);
   (void) ResetMagickMemory(string_info->datum,0,string_info->length);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   S a n t i z e S t r i n g                                                 %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  SanitizeString() returns an new string removes all characters except
 %  letters, digits and !#$%&'*+-=?^_`{|}~@.[].
 %
 %  The returned string shoud be freed using DestoryString().
 %
 %  The format of the SanitizeString method is:
 %
 %      char *SanitizeString(const char *source)
 %
 %  A description of each parameter follows:
 %
 %    o source: A character string.
 %
 */
 MagickExport char *SanitizeString(const char *source)
 {
   char
     *sanitize_source;
 
   const char
     *q;
-  
+
   register char
     *p;
-  
+
   static char
     whitelist[] =
       "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 "
       "$-_.+!*'(),{}|\\^~[]`\"><#%;/?:@&=";
-  
+
   sanitize_source=AcquireString(source);
   p=sanitize_source;
   q=sanitize_source+strlen(sanitize_source);
   for (p+=strspn(p,whitelist); p != q; p+=strspn(p,whitelist))
     *p='_';
   return(sanitize_source);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   S e t S t r i n g I n f o                                                 %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  SetStringInfo() copies the source string to the destination string.
 %
 %  The format of the SetStringInfo method is:
 %
 %      void SetStringInfo(StringInfo *string_info,const StringInfo *source)
 %
 %  A description of each parameter follows:
 %
 %    o string_info: the string info.
 %
 %    o source: the source string.
 %
 */
