commit 5314a4996cc76e2a8534c74a66f5181e95ac64fc
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Wed Feb 10 22:28:20 2021 +0100

    avcodec/pnm_parser: Check av_image_get_buffer_size() for failure
    
    Fixes: out of array access
    Fixes: 30135/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_PBM_fuzzer-4997145650397184
    Fixes: 30208/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_PGMYUV_fuzzer-5605891665690624.fuzz
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Reviewed-by: Paul B Mahol <onemda@gmail.com>
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/pnm_parser.c b/libavcodec/pnm_parser.c
index d19dbfe98c..f3be6d640c 100644
--- a/libavcodec/pnm_parser.c
+++ b/libavcodec/pnm_parser.c
@@ -61,60 +61,62 @@ static int pnm_parse(AVCodecParserContext *s, AVCodecContext *avctx,
 retry:
     if (pc->index) {
         pnmctx.bytestream_start =
         pnmctx.bytestream       = pc->buffer;
         pnmctx.bytestream_end   = pc->buffer + pc->index;
     } else {
         pnmctx.bytestream_start =
         pnmctx.bytestream       = (uint8_t *) buf + skip; /* casts avoid warnings */
         pnmctx.bytestream_end   = (uint8_t *) buf + buf_size - skip;
     }
     if (ff_pnm_decode_header(avctx, &pnmctx) < 0) {
         if (pnmctx.bytestream < pnmctx.bytestream_end) {
             if (pc->index) {
                 pc->index = 0;
                 pnmpc->ascii_scan = 0;
             } else {
                 unsigned step = FFMAX(1, pnmctx.bytestream - pnmctx.bytestream_start);
 
                 skip += step;
             }
             goto retry;
         }
     } else if (pnmctx.type < 4) {
               uint8_t *bs  = pnmctx.bytestream;
         const uint8_t *end = pnmctx.bytestream_end;
         uint8_t *sync      = bs;
 
         if (pc->index) {
             av_assert0(pnmpc->ascii_scan <= end - bs);
             bs += pnmpc->ascii_scan;
         }
 
         while (bs < end) {
             int c;
             sync = bs;
             c = *bs++;
             if (c == '#')  {
                 uint8_t *match = memchr(bs, '\n', end-bs);
                 if (match)
                     bs = match + 1;
                 else
                     break;
             } else if (c == 'P') {
                 next = bs - pnmctx.bytestream_start + skip - 1;
                 pnmpc->ascii_scan = 0;
                 break;
             }
         }
         if (next == END_NOT_FOUND)
             pnmpc->ascii_scan = sync - pnmctx.bytestream + skip;
     } else {
-        next = pnmctx.bytestream - pnmctx.bytestream_start + skip
-               + av_image_get_buffer_size(avctx->pix_fmt, avctx->width, avctx->height, 1);
+        int ret = av_image_get_buffer_size(avctx->pix_fmt, avctx->width, avctx->height, 1);
+        next = pnmctx.bytestream - pnmctx.bytestream_start + skip;
+        if (ret >= 0)
+            next += ret;
     }
     if (next != END_NOT_FOUND && pnmctx.bytestream_start != buf + skip)
         next -= pc->index;
     if (next > buf_size) {
         pnmpc->remaining_bytes = next - buf_size;
         next = END_NOT_FOUND;
     }
