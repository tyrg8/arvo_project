commit 96e034530e092e8b746e00d13086c1138a84504b
Author: Alan Modra <amodra@gmail.com>
Date:   Thu Feb 2 22:39:31 2023 +1030

    Add ECOFF Symbolic Header sanity checks
    
    Anti-fuzzer measures.  The checks don't ensure the various elements in
    the header are distinct, but that isn't important as far as making
    sure we don't overrun the buffer containing all the elements.  Also,
    we now don't care about offsets where the corresponding count is zero.
    
            * ecoff.c (_bfd_ecoff_slurp_symbolic_info): Sanity check offsets
            in debug->symbolic_header.

diff --git a/bfd/ecoff.c b/bfd/ecoff.c
index 717d2fa2c75..48f33df630e 100644
--- a/bfd/ecoff.c
+++ b/bfd/ecoff.c
@@ -486,143 +486,156 @@ bool
 _bfd_ecoff_slurp_symbolic_info (bfd *abfd,
 				asection *ignore ATTRIBUTE_UNUSED,
 				struct ecoff_debug_info *debug)
 {
   const struct ecoff_backend_data * const backend = ecoff_backend (abfd);
   HDRR *internal_symhdr;
   bfd_size_type raw_base;
   bfd_size_type raw_size;
   void * raw;
   bfd_size_type external_fdr_size;
   char *fraw_src;
   char *fraw_end;
   struct fdr *fdr_ptr;
   bfd_size_type raw_end;
   bfd_size_type cb_end;
   file_ptr pos;
   size_t amt;
 
   BFD_ASSERT (debug == &ecoff_data (abfd)->debug_info);
 
   /* Check whether we've already gotten it, and whether there's any to
      get.  */
   if (ecoff_data (abfd)->raw_syments != NULL)
     return true;
   if (ecoff_data (abfd)->sym_filepos == 0)
     {
       abfd->symcount = 0;
       return true;
     }
 
   if (! ecoff_slurp_symbolic_header (abfd))
     return false;
 
   internal_symhdr = &debug->symbolic_header;
 
   /* Read all the symbolic information at once.  */
   raw_base = (ecoff_data (abfd)->sym_filepos
 	      + backend->debug_swap.external_hdr_size);
 
   /* Alpha ecoff makes the determination of raw_size difficult. It has
      an undocumented debug data section between the symhdr and the first
      documented section. And the ordering of the sections varies between
      statically and dynamically linked executables.
      If bfd supports SEEK_END someday, this code could be simplified.  */
-  raw_end = 0;
+  raw_end = raw_base;
 
 #define UPDATE_RAW_END(start, count, size) \
-  cb_end = internal_symhdr->start + internal_symhdr->count * (size); \
-  if (cb_end > raw_end) \
-    raw_end = cb_end
+  do									\
+    if (internal_symhdr->count != 0)					\
+      {									\
+	if (internal_symhdr->start < raw_base)				\
+	  goto err;							\
+	if (_bfd_mul_overflow ((unsigned long) internal_symhdr->count,	\
+			       (size), &amt))				\
+	  goto err;							\
+	cb_end = internal_symhdr->start + amt;				\
+	if (cb_end < internal_symhdr->start)				\
+	  goto err;							\
+	if (cb_end > raw_end)						\
+	  raw_end = cb_end;						\
+      }									\
+  while (0)
 
   UPDATE_RAW_END (cbLineOffset, cbLine, sizeof (unsigned char));
   UPDATE_RAW_END (cbDnOffset, idnMax, backend->debug_swap.external_dnr_size);
   UPDATE_RAW_END (cbPdOffset, ipdMax, backend->debug_swap.external_pdr_size);
   UPDATE_RAW_END (cbSymOffset, isymMax, backend->debug_swap.external_sym_size);
   /* eraxxon@alumni.rice.edu: ioptMax refers to the size of the
      optimization symtab, not the number of entries.  */
   UPDATE_RAW_END (cbOptOffset, ioptMax, sizeof (char));
   UPDATE_RAW_END (cbAuxOffset, iauxMax, sizeof (union aux_ext));
   UPDATE_RAW_END (cbSsOffset, issMax, sizeof (char));
   UPDATE_RAW_END (cbSsExtOffset, issExtMax, sizeof (char));
   UPDATE_RAW_END (cbFdOffset, ifdMax, backend->debug_swap.external_fdr_size);
   UPDATE_RAW_END (cbRfdOffset, crfd, backend->debug_swap.external_rfd_size);
   UPDATE_RAW_END (cbExtOffset, iextMax, backend->debug_swap.external_ext_size);
 
 #undef UPDATE_RAW_END
 
   raw_size = raw_end - raw_base;
   if (raw_size == 0)
     {
       ecoff_data (abfd)->sym_filepos = 0;
       return true;
     }
   pos = ecoff_data (abfd)->sym_filepos;
   pos += backend->debug_swap.external_hdr_size;
   if (bfd_seek (abfd, pos, SEEK_SET) != 0)
     return false;
   raw = _bfd_alloc_and_read (abfd, raw_size, raw_size);
   if (raw == NULL)
     return false;
 
   ecoff_data (abfd)->raw_syments = raw;
 
   /* Get pointers for the numeric offsets in the HDRR structure.  */
 #define FIX(off1, off2, type)				\
   if (internal_symhdr->off1 == 0)			\
     debug->off2 = NULL;					\
   else							\
     debug->off2 = (type) ((char *) raw			\
 			  + (internal_symhdr->off1	\
 			     - raw_base))
 
   FIX (cbLineOffset, line, unsigned char *);
   FIX (cbDnOffset, external_dnr, void *);
   FIX (cbPdOffset, external_pdr, void *);
   FIX (cbSymOffset, external_sym, void *);
   FIX (cbOptOffset, external_opt, void *);
   FIX (cbAuxOffset, external_aux, union aux_ext *);
   FIX (cbSsOffset, ss, char *);
   FIX (cbSsExtOffset, ssext, char *);
   FIX (cbFdOffset, external_fdr, void *);
   FIX (cbRfdOffset, external_rfd, void *);
   FIX (cbExtOffset, external_ext, void *);
 #undef FIX
 
   /* I don't want to always swap all the data, because it will just
      waste time and most programs will never look at it.  The only
      time the linker needs most of the debugging information swapped
      is when linking big-endian and little-endian MIPS object files
      together, which is not a common occurrence.
 
      We need to look at the fdr to deal with a lot of information in
      the symbols, so we swap them here.  */
   if (_bfd_mul_overflow ((unsigned long) internal_symhdr->ifdMax,
 			 sizeof (struct fdr), &amt))
     {
+    err:
       bfd_set_error (bfd_error_file_too_big);
       return false;
     }
   debug->fdr = (FDR *) bfd_alloc (abfd, amt);
   if (debug->fdr == NULL)
     return false;
   external_fdr_size = backend->debug_swap.external_fdr_size;
   fdr_ptr = debug->fdr;
   fraw_src = (char *) debug->external_fdr;
   /* PR 17512: file: 3372-1243-0.004.  */
   if (fraw_src == NULL && internal_symhdr->ifdMax > 0)
     return false;
   fraw_end = fraw_src + internal_symhdr->ifdMax * external_fdr_size;
   for (; fraw_src < fraw_end; fraw_src += external_fdr_size, fdr_ptr++)
     (*backend->debug_swap.swap_fdr_in) (abfd, (void *) fraw_src, fdr_ptr);
 
   return true;
 }
 
 /* ECOFF symbol table routines.  The ECOFF symbol table is described
    in gcc/mips-tfile.c.  */
 
 /* ECOFF uses two common sections.  One is the usual one, and the
    other is for small objects.  All the small objects are kept
    together, and then referenced via the gp pointer, which yields
    faster assembler code.  This is what we use for the small common
    section.  */
