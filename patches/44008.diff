commit f694a026b400a5f501f055e536eff2bfaa3c1bc1
Author: danblooomberg <dan.bloomberg@gmail.com>
Date:   Sun Jan 23 23:39:59 2022 -0800

    Fix oss-fuzz issue 44008: overflow in pixCountArbInRect() in pix3_fuzzer.cc
    * Bug in pixel access in pixCountArbInRect(): using wrong depth
    * Now allow use on all pix with depth <= 8

diff --git a/src/pix3.c b/src/pix3.c
index 0b2d86d..b85a608 100644
--- a/src/pix3.c
+++ b/src/pix3.c
@@ -3268,73 +3268,73 @@ l_int32    w, h, i, j, dir, size, sum;
 l_uint32   val0, val1;
 
     PROCNAME("pixAbsDiffOnLine");
 
     if (!pabsdiff)
         return ERROR_INT("&absdiff not defined", procName, 1);
     *pabsdiff = 0.0;
     if (!pix || pixGetDepth(pix) != 8)
         return ERROR_INT("pix undefined or not 8 bpp", procName, 1);
     if (y1 == y2) {
         dir = L_HORIZONTAL_LINE;
     } else if (x1 == x2) {
         dir = L_VERTICAL_LINE;
     } else {
         return ERROR_INT("line is neither horiz nor vert", procName, 1);
     }
     if (pixGetColormap(pix) != NULL)
         return ERROR_INT("pix is colormapped", procName, 1);
 
     pixGetDimensions(pix, &w, &h, NULL);
     sum = 0;
     if (dir == L_HORIZONTAL_LINE) {
         x1 = L_MAX(x1, 0);
         x2 = L_MIN(x2, w - 1);
         if (x1 >= x2)
             return ERROR_INT("x1 >= x2", procName, 1);
         size = x2 - x1;
         pixGetPixel(pix, x1, y1, &val0);
         for (j = x1 + 1; j <= x2; j++) {
             pixGetPixel(pix, j, y1, &val1);
             sum += L_ABS((l_int32)val1 - (l_int32)val0);
             val0 = val1;
         }
     } else {  /* vertical */
         y1 = L_MAX(y1, 0);
         y2 = L_MIN(y2, h - 1);
         if (y1 >= y2)
             return ERROR_INT("y1 >= y2", procName, 1);
         size = y2 - y1;
         pixGetPixel(pix, x1, y1, &val0);
         for (i = y1 + 1; i <= y2; i++) {
             pixGetPixel(pix, x1, i, &val1);
             sum += L_ABS((l_int32)val1 - (l_int32)val0);
             val0 = val1;
         }
     }
     *pabsdiff = (l_float32)sum / (l_float32)size;
     return 0;
 }
 
 
 /*-------------------------------------------------------------*
  *              Count of pixels with specific value            *
  *-------------------------------------------------------------*/
 /*!
  * \brief   pixCountArbInRect()
  *
- * \param[in]    pixs     8 bpp, or colormapped
+ * \param[in]    pixs     1,2,4,8 bpp; can be colormapped
  * \param[in]    box      [optional] over which count is made;
  *                        use entire image if NULL
  * \param[in]    val      pixel value to count
  * \param[in]    factor   subsampling factor; integer >= 1
  * \param[out]   pcount   count; estimate it if factor > 1
  * \return  na histogram, or NULL on error
  *
  * <pre>
  * Notes:
  *      (1) If pixs is cmapped, %val is compared to the colormap index;
  *          otherwise, %val is compared to the grayscale value.
  *      (2) Set the subsampling %factor > 1 to reduce the amount of computation.
  *          If %factor > 1, multiply the count by %factor * %factor.
  * </pre>
  */
@@ -3343,76 +3343,91 @@ pixCountArbInRect(PIX      *pixs,
                   BOX      *box,
                   l_int32   val,
                   l_int32   factor,
                   l_int32  *pcount)
 {
-l_int32    i, j, bx, by, bw, bh, w, h, wpl, pixval;
+l_int32    i, j, bx, by, bw, bh, w, h, d, wpl, pixval;
 l_uint32  *data, *line;
 
     PROCNAME("pixCountArbInRect");
 
     if (!pcount)
         return ERROR_INT("&count not defined", procName, 1);
     *pcount = 0;
     if (!pixs)
         return ERROR_INT("pixs not defined", procName, 1);
-    if (pixGetDepth(pixs) != 8 && !pixGetColormap(pixs))
-        return ERROR_INT("pixs neither 8 bpp nor colormapped",
-                                 procName, 1);
+    d = pixGetDepth(pixs);
+    if (d != 1 && d != 2 && d != 4 && d != 8)
+        return ERROR_INT("pixs not 1, 2, 4 or 8 bpp", procName, 1);
     if (factor < 1)
         return ERROR_INT("sampling factor < 1", procName, 1);
 
     pixGetDimensions(pixs, &w, &h, NULL);
     data = pixGetData(pixs);
     wpl = pixGetWpl(pixs);
-
     if (!box) {
         for (i = 0; i < h; i += factor) {
             line = data + i * wpl;
             for (j = 0; j < w; j += factor) {
-                pixval = GET_DATA_BYTE(line, j);
+                if (d == 8) {
+                    pixval = GET_DATA_BYTE(line, j);
+                } else if (d == 1) {
+                    pixval = GET_DATA_BIT(line, j);
+                } else if (d == 2) {
+                    pixval = GET_DATA_DIBIT(line, j);
+                } else  /* d == 4 */  {
+                    pixval = GET_DATA_QBIT(line, j);
+                }
                 if (pixval == val) (*pcount)++;
             }
         }
     } else {
         boxGetGeometry(box, &bx, &by, &bw, &bh);
         for (i = 0; i < bh; i += factor) {
             if (by + i < 0 || by + i >= h) continue;
             line = data + (by + i) * wpl;
             for (j = 0; j < bw; j += factor) {
                 if (bx + j < 0 || bx + j >= w) continue;
-                pixval = GET_DATA_BYTE(line, bx + j);
+                if (d == 8) {
+                    pixval = GET_DATA_BYTE(line, bx + j);
+                } else if (d == 1) {
+                    pixval = GET_DATA_BIT(line, bx + j);
+                } else if (d == 2) {
+                    pixval = GET_DATA_DIBIT(line, bx + j);
+                } else  /* d == 4 */  {
+                    pixval = GET_DATA_QBIT(line, bx + j);
+                }
                 if (pixval == val) (*pcount)++;
             }
         }
     }
 
     if (factor > 1)  /* assume pixel color is randomly distributed */
         *pcount = *pcount * factor * factor;
     return 0;
 }
 
 
 /*-------------------------------------------------------------*
  *              Mirrored tiling of a smaller image             *
  *-------------------------------------------------------------*/
 /*!
  * \brief   pixMirroredTiling()
  *
  * \param[in]   pixs   8 or 32 bpp, small tile; to be replicated
  * \param[in]   w, h   dimensions of output pix
  * \return  pixd usually larger pix, mirror-tiled with pixs,
  *              or NULL on error
  *
  * <pre>
  * Notes:
  *      (1) This uses mirrored tiling, where each row alternates
  *          with LR flips and every column alternates with TB
  *          flips, such that the result is a tiling with identical
  *          2 x 2 tiles, each of which is composed of these transforms:
  *                  -----------------
  *                  | 1    |  LR    |
  *                  -----------------
  *                  | TB   |  LR/TB |
  *                  -----------------
  * </pre>
  */
