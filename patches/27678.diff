commit 6c1191d749a3b9fe144466f473ca222d57898f11
Author: Michael Ludwig <michaelludwig@google.com>
Date:   Fri Nov 20 17:08:15 2020 +0000

    Revert "Simplify layer bounds syncing and no-device error handling in SkCanvas::internalSaveLayer"
    
    This reverts commit b27ba538ecd0bb52981c33a9f5731022cd165bdd.
    
    Reason for revert: causes invalid memory accesses due to replaceClip use, and replaceClip() is probably not the right operation to use
    to emulate a layer when no layer was the strategy or failed to allocate.
    
    Original change's description:
    > Simplify layer bounds syncing and no-device error handling in SkCanvas::internalSaveLayer
    >
    > This corrects some subtle bugs that can occur with recording canvas or
    > if a device fails to be created for a new layer, where the stashed
    > matrix would not be restored properly. Since no new DeviceCM would get
    > added in those cases, the canvas' total matrix wouldn't get fixed in the
    > paired onRestore() and it would remain dirty for the remainder of the
    > canvas's lifetime.
    >
    > After this change, the underlying SkDevice's bounds are also kept in
    > sync with the intent of the saveLayer when kNoLayer_Strategy is used.
    > Previously, the bounds would be applied to the canvas' conservative clip
    > and quick reject bounds, but the device would remain un-updated. As we
    > move towards SkNoPixelsDevice taking over the conservative clip bounds,
    > this ensures bounds remain up to date within a saveLayer/restore pair
    > even if no layer was allocated.
    >
    > Change-Id: I5ca389bdd624ea7278106da863a96e9d8f90e2d1
    > Reviewed-on: https://skia-review.googlesource.com/c/skia/+/335861
    > Reviewed-by: Mike Reed <reed@google.com>
    > Commit-Queue: Michael Ludwig <michaelludwig@google.com>
    
    TBR=mtklein@google.com,bsalomon@google.com,reed@google.com,michaelludwig@google.com
    
    No-Presubmit: true
    No-Tree-Checks: true
    No-Try: true
    Bug: chromium:1151195, chromium:1151270, chromium:1151294, chromium:1151320, chromium:1151322
    Change-Id: I9db07916ffc450cc6ecc9188d72bb7c35770a974
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/337117
    Reviewed-by: Michael Ludwig <michaelludwig@google.com>
    Commit-Queue: Michael Ludwig <michaelludwig@google.com>

diff --git a/include/core/SkCanvas.h b/include/core/SkCanvas.h
index 755fa9f495..c81c279164 100644
--- a/include/core/SkCanvas.h
+++ b/include/core/SkCanvas.h
@@ -2461,107 +2461,107 @@ public:
 protected:
     // default impl defers to getDevice()->newSurface(info)
     virtual sk_sp<SkSurface> onNewSurface(const SkImageInfo& info, const SkSurfaceProps& props);
 
     // default impl defers to its device
     virtual bool onPeekPixels(SkPixmap* pixmap);
     virtual bool onAccessTopLayerPixels(SkPixmap* pixmap);
     virtual SkImageInfo onImageInfo() const;
     virtual bool onGetProps(SkSurfaceProps* props) const;
     virtual void onFlush();
 
     // Subclass save/restore notifiers.
     // Overriders should call the corresponding INHERITED method up the inheritance chain.
     // getSaveLayerStrategy()'s return value may suppress full layer allocation.
     enum SaveLayerStrategy {
         kFullLayer_SaveLayerStrategy,
         kNoLayer_SaveLayerStrategy,
     };
 
     virtual void willSave() {}
     // Overriders should call the corresponding INHERITED method up the inheritance chain.
     virtual SaveLayerStrategy getSaveLayerStrategy(const SaveLayerRec& ) {
         return kFullLayer_SaveLayerStrategy;
     }
 
     // returns true if we should actually perform the saveBehind, or false if we should just save.
     virtual bool onDoSaveBehind(const SkRect*) { return true; }
     virtual void willRestore() {}
     virtual void didRestore() {}
 
     virtual void onMarkCTM(const char*) {}
     virtual void didConcat44(const SkM44&) {}
     virtual void didConcat(const SkMatrix& ) {}
     virtual void didSetMatrix(const SkMatrix& ) {}
     virtual void didTranslate(SkScalar, SkScalar) {}
     virtual void didScale(SkScalar, SkScalar) {}
 
     // NOTE: If you are adding a new onDraw virtual to SkCanvas, PLEASE add an override to
     // SkCanvasVirtualEnforcer (in SkCanvasVirtualEnforcer.h). This ensures that subclasses using
     // that mechanism  will be required to implement the new function.
     virtual void onDrawPaint(const SkPaint& paint);
     virtual void onDrawBehind(const SkPaint& paint);
     virtual void onDrawRect(const SkRect& rect, const SkPaint& paint);
     virtual void onDrawRRect(const SkRRect& rrect, const SkPaint& paint);
     virtual void onDrawDRRect(const SkRRect& outer, const SkRRect& inner, const SkPaint& paint);
     virtual void onDrawOval(const SkRect& rect, const SkPaint& paint);
     virtual void onDrawArc(const SkRect& rect, SkScalar startAngle, SkScalar sweepAngle,
                            bool useCenter, const SkPaint& paint);
     virtual void onDrawPath(const SkPath& path, const SkPaint& paint);
     virtual void onDrawRegion(const SkRegion& region, const SkPaint& paint);
 
     virtual void onDrawTextBlob(const SkTextBlob* blob, SkScalar x, SkScalar y,
                                 const SkPaint& paint);
 
     virtual void onDrawPatch(const SkPoint cubics[12], const SkColor colors[4],
                            const SkPoint texCoords[4], SkBlendMode mode, const SkPaint& paint);
     virtual void onDrawPoints(PointMode mode, size_t count, const SkPoint pts[],
                               const SkPaint& paint);
 
     virtual void onDrawVerticesObject(const SkVertices* vertices, SkBlendMode mode,
                                       const SkPaint& paint);
     virtual void onDrawImage(const SkImage* image, SkScalar dx, SkScalar dy, const SkPaint* paint);
     virtual void onDrawImageRect(const SkImage* image, const SkRect* src, const SkRect& dst,
                                  const SkPaint* paint, SrcRectConstraint constraint);
     virtual void onDrawImageNine(const SkImage* image, const SkIRect& center, const SkRect& dst,
                                  const SkPaint* paint);
     virtual void onDrawImageLattice(const SkImage* image, const Lattice& lattice, const SkRect& dst,
                                     const SkPaint* paint);
 
     virtual void onDrawAtlas(const SkImage* atlas, const SkRSXform xform[], const SkRect rect[],
                              const SkColor colors[], int count, SkBlendMode mode,
                              const SkRect* cull, const SkPaint* paint);
 
     virtual void onDrawAnnotation(const SkRect& rect, const char key[], SkData* value);
     virtual void onDrawShadowRec(const SkPath&, const SkDrawShadowRec&);
 
     virtual void onDrawDrawable(SkDrawable* drawable, const SkMatrix* matrix);
     virtual void onDrawPicture(const SkPicture* picture, const SkMatrix* matrix,
                                const SkPaint* paint);
 
     virtual void onDrawEdgeAAQuad(const SkRect& rect, const SkPoint clip[4], QuadAAFlags aaFlags,
                                   const SkColor4f& color, SkBlendMode mode);
     virtual void onDrawEdgeAAImageSet(const ImageSetEntry imageSet[], int count,
                                       const SkPoint dstClips[], const SkMatrix preViewMatrices[],
                                       const SkPaint* paint, SrcRectConstraint constraint);
 
     enum ClipEdgeStyle {
         kHard_ClipEdgeStyle,
         kSoft_ClipEdgeStyle
     };
 
     virtual void onClipRect(const SkRect& rect, SkClipOp op, ClipEdgeStyle edgeStyle);
     virtual void onClipRRect(const SkRRect& rrect, SkClipOp op, ClipEdgeStyle edgeStyle);
     virtual void onClipPath(const SkPath& path, SkClipOp op, ClipEdgeStyle edgeStyle);
     virtual void onClipShader(sk_sp<SkShader>, SkClipOp);
     virtual void onClipRegion(const SkRegion& deviceRgn, SkClipOp op);
 
     virtual void onDiscard();
 
     // Clip rectangle bounds. Called internally by saveLayer.
     // returns false if the entire rectangle is entirely clipped out
     // If non-NULL, The imageFilter parameter will be used to expand the clip
     // and offscreen bounds for any margin required by the filter DAG.
-    bool clipRectBounds(const SkRect* bounds, SkIRect* intersection,
+    bool clipRectBounds(const SkRect* bounds, SaveLayerFlags flags, SkIRect* intersection,
                         const SkImageFilter* imageFilter = nullptr);
 
     SkBaseDevice* getTopDevice() const;
@@ -2569,106 +2569,108 @@ protected:
 private:
     /** After calling saveLayer(), there can be any number of devices that make
      up the top-most drawing area. LayerIter can be used to iterate through
      those devices. Note that the iterator is only valid until the next API
      call made on the canvas. Ownership of all pointers in the iterator stays
      with the canvas, so none of them should be modified or deleted.
      */
     class LayerIter /*: SkNoncopyable*/ {
     public:
         /** Initialize iterator with canvas, and set values for 1st device */
         LayerIter(SkCanvas*);
         ~LayerIter();
 
         /** Return true if the iterator is done */
         bool done() const { return fDone; }
         /** Cycle to the next device */
         void next();
 
         // These reflect the current device in the iterator
 
         SkBaseDevice*   device() const;
         const SkMatrix& matrix() const;
         SkIRect clipBounds() const;
         const SkPaint&  paint() const;
         int             x() const;
         int             y() const;
 
     private:
         // used to embed the SkDrawIter object directly in our instance, w/o
         // having to expose that class def to the public. There is an assert
         // in our constructor to ensure that fStorage is large enough
         // (though needs to be a compile-time-assert!). We use intptr_t to work
         // safely with 32 and 64 bit machines (to ensure the storage is enough)
         intptr_t          fStorage[32];
         class SkDrawIter* fImpl;    // this points at fStorage
         SkPaint           fDefaultPaint;
         SkIPoint          fDeviceOrigin;
         bool              fDone;
     };
 
+    static bool BoundsAffectsClip(SaveLayerFlags);
+
     static void DrawDeviceWithFilter(SkBaseDevice* src, const SkImageFilter* filter,
                                      SkBaseDevice* dst, const SkIPoint& dstOrigin,
                                      const SkMatrix& ctm);
 
     enum ShaderOverrideOpacity {
         kNone_ShaderOverrideOpacity,        //!< there is no overriding shader (bitmap or image)
         kOpaque_ShaderOverrideOpacity,      //!< the overriding shader is opaque
         kNotOpaque_ShaderOverrideOpacity,   //!< the overriding shader may not be opaque
     };
 
     // notify our surface (if we have one) that we are about to draw, so it
     // can perform copy-on-write or invalidate any cached images
     void predrawNotify(bool willOverwritesEntireSurface = false);
     void predrawNotify(const SkRect* rect, const SkPaint* paint, ShaderOverrideOpacity);
     void predrawNotify(const SkRect* rect, const SkPaint* paint, bool shaderOverrideIsOpaque) {
         this->predrawNotify(rect, paint, shaderOverrideIsOpaque ? kOpaque_ShaderOverrideOpacity
                                                                 : kNotOpaque_ShaderOverrideOpacity);
     }
 
     SkBaseDevice* getDevice() const;
 
     class MCRec;
 
     SkDeque     fMCStack;
     // points to top of stack
     MCRec*      fMCRec;
 
     sk_sp<SkMarkerStack> fMarkerStack;
 
     // the first N recs that can fit here mean we won't call malloc
     static constexpr int kMCRecSize      = 128;  // most recent measurement
     static constexpr int kMCRecCount     = 32;   // common depth for save/restores
     static constexpr int kDeviceCMSize   = 64;   // most recent measurement
 
     intptr_t fMCRecStorage[kMCRecSize * kMCRecCount / sizeof(intptr_t)];
     intptr_t fDeviceCMStorage[kDeviceCMSize / sizeof(intptr_t)];
 
     const SkSurfaceProps fProps;
 
     int         fSaveCount;         // value returned by getSaveCount()
 
     std::unique_ptr<SkRasterHandleAllocator> fAllocator;
 
     SkSurface_Base*  fSurfaceBase;
     SkSurface_Base* getSurfaceBase() const { return fSurfaceBase; }
     void setSurfaceBase(SkSurface_Base* sb) {
         fSurfaceBase = sb;
     }
     friend class SkSurface_Base;
     friend class SkSurface_Gpu;
 
     SkIRect fClipRestrictionRect = SkIRect::MakeEmpty();
 
     void doSave();
     void checkForDeferredSave();
     void internalSetMatrix(const SkMatrix&);
 
     friend class SkAndroidFrameworkUtils;
     friend class SkCanvasPriv;      // needs kDontClipToLayer_PrivateSaveLayerFlag
     friend class SkDrawIter;        // needs setupDrawForLayerDevice()
     friend class AutoLayerForImageFilter;
     friend class SkSurface_Raster;  // needs getDevice()
     friend class SkNoDrawCanvas;    // needs resetForNextPicture()
     friend class SkPictureRecord;   // predrawNotify (why does it need it? <reed>)
     friend class SkOverdrawCanvas;
     friend class SkRasterHandleAllocator;
diff --git a/src/core/SkCanvas.cpp b/src/core/SkCanvas.cpp
index c703a04947..404f4e5ef8 100644
--- a/src/core/SkCanvas.cpp
+++ b/src/core/SkCanvas.cpp
@@ -790,72 +790,87 @@ void SkCanvas::internalSave() {
     FOR_EACH_TOP_DEVICE(device->save());
 }
 
-bool SkCanvas::clipRectBounds(const SkRect* bounds, SkIRect* intersection,
-                              const SkImageFilter* imageFilter) {
+bool SkCanvas::BoundsAffectsClip(SaveLayerFlags saveLayerFlags) {
+    return !(saveLayerFlags & SkCanvasPriv::kDontClipToLayer_SaveLayerFlag);
+}
+
+bool SkCanvas::clipRectBounds(const SkRect* bounds, SaveLayerFlags saveLayerFlags,
+                              SkIRect* intersection, const SkImageFilter* imageFilter) {
     // clipRectBounds() is called to determine the input layer size needed for a given image filter.
     // The coordinate space of the rectangle passed to filterBounds(kReverse) is meant to be in the
     // filtering layer space. Here, 'clipBounds' is always in the true device space. When an image
     // filter does not require a decomposed CTM matrix, the filter space and device space are the
     // same. When it has been decomposed, we want the original image filter node to process the
     // bounds in the layer space represented by the decomposed scale matrix. 'imageFilter' is no
     // longer the original filter, but has the remainder matrix baked into it, and passing in the
     // the true device clip bounds ensures that the matrix image filter provides a layer clip bounds
     // to the original filter node (barring inflation from consecutive calls to mapRect). While
     // initially counter-intuitive given the apparent inconsistency of coordinate spaces, always
     // passing getDeviceClipBounds() to 'imageFilter' is correct.
     // FIXME (michaelludwig) - When the remainder matrix is instead applied as a final draw, it will
     // be important to more accurately calculate the clip bounds in the layer space for the original
     // image filter (similar to how matrix image filter does it, but ideally without the inflation).
     SkIRect clipBounds = this->getDeviceClipBounds();
     if (clipBounds.isEmpty()) {
         return false;
     }
 
     const SkMatrix& ctm = fMCRec->fMatrix.asM33();  // this->getTotalMatrix()
 
     if (imageFilter && bounds && !imageFilter->canComputeFastBounds()) {
         // If the image filter DAG affects transparent black then we will need to render
         // out to the clip bounds
         bounds = nullptr;
     }
 
     SkIRect inputSaveLayerBounds;
     if (bounds) {
         SkRect r;
         ctm.mapRect(&r, *bounds);
         r.roundOut(&inputSaveLayerBounds);
     } else {    // no user bounds, so just use the clip
         inputSaveLayerBounds = clipBounds;
     }
 
     if (imageFilter) {
         // expand the clip bounds by the image filter DAG to include extra content that might
         // be required by the image filters.
         clipBounds = imageFilter->filterBounds(clipBounds, ctm,
                                                SkImageFilter::kReverse_MapDirection,
                                                &inputSaveLayerBounds);
     }
 
     SkIRect clippedSaveLayerBounds;
     if (bounds) {
         // For better or for worse, user bounds currently act as a hard clip on the layer's
         // extent (i.e., they implement the CSS filter-effects 'filter region' feature).
         clippedSaveLayerBounds = inputSaveLayerBounds;
     } else {
         // If there are no user bounds, we don't want to artificially restrict the resulting
         // layer bounds, so allow the expanded clip bounds free reign.
         clippedSaveLayerBounds = clipBounds;
     }
 
     // early exit if the layer's bounds are clipped out
     if (!clippedSaveLayerBounds.intersect(clipBounds)) {
+        if (BoundsAffectsClip(saveLayerFlags)) {
+            fMCRec->fTopLayer->fDevice->clipRegion(SkRegion(), SkClipOp::kIntersect); // empty
+            fMCRec->fRasterClip.setEmpty();
+            fQuickRejectBounds.setEmpty();
+        }
         return false;
     }
     SkASSERT(!clippedSaveLayerBounds.isEmpty());
 
+    if (BoundsAffectsClip(saveLayerFlags)) {
+        // Simplify the current clips since they will be applied properly during restore()
+        fMCRec->fRasterClip.setRect(clippedSaveLayerBounds);
+        fQuickRejectBounds = qr_clip_bounds(clippedSaveLayerBounds);
+    }
+
     if (intersection) {
         *intersection = clippedSaveLayerBounds;
     }
 
     return true;
 }
@@ -1064,136 +1079,131 @@ static SkImageInfo make_layer_info(const SkImageInfo& prev, int w, int h, const
 void SkCanvas::internalSaveLayer(const SaveLayerRec& rec, SaveLayerStrategy strategy) {
     TRACE_EVENT0("skia", TRACE_FUNC);
     const SkRect* bounds = rec.fBounds;
     SaveLayerFlags saveLayerFlags = rec.fSaveLayerFlags;
 
     SkTCopyOnFirstWrite<SkPaint> paint(rec.fPaint);
     // saveLayer ignores mask filters, so force it to null
     if (paint.get() && paint->getMaskFilter()) {
         paint.writable()->setMaskFilter(nullptr);
     }
 
     // If we have a backdrop filter, then we must apply it to the entire layer (clip-bounds)
     // regardless of any hint-rect from the caller. skbug.com/8783
     if (rec.fBackdrop) {
         bounds = nullptr;
     }
 
     SkImageFilter* imageFilter = paint.get() ? paint->getImageFilter() : nullptr;
     SkMatrix stashedMatrix = fMCRec->fMatrix.asM33();
     MCRec* modifiedRec = nullptr;
 
     /*
      *  Many ImageFilters (so far) do not (on their own) correctly handle matrices (CTM) that
      *  contain rotation/skew/etc. We rely on applyCTM to create a new image filter DAG as needed to
      *  accommodate this, but it requires update the CTM we use when drawing into the layer.
      *
      *  1. Stash off the current CTM
      *  2. Apply the CTM to imagefilter, which decomposes it into simple and complex transforms
      *     if necessary.
      *  3. Wack the CTM to be the remaining scale matrix and use the modified imagefilter, which
      *     is a MatrixImageFilter that contains the complex matrix.
      *  4. Proceed as usual, allowing the client to draw into the layer (now with a scale-only CTM)
      *  5. During restore, the MatrixImageFilter automatically applies complex stage to the output
      *     of the original imagefilter, and draw that (via drawSprite)
      *  6. Unwack the CTM to its original state (i.e. stashedMatrix)
      *
      *  Perhaps in the future we could augment #5 to apply REMAINDER as part of the draw (no longer
      *  a sprite operation) to avoid the extra buffer/overhead of MatrixImageFilter.
      */
     if (imageFilter) {
         SkMatrix modifiedCTM;
         sk_sp<SkImageFilter> modifiedFilter = as_IFB(imageFilter)->applyCTM(stashedMatrix,
                                                                             &modifiedCTM);
         if (as_IFB(modifiedFilter)->uniqueID() != as_IFB(imageFilter)->uniqueID()) {
             // The original filter couldn't support the CTM entirely
             SkASSERT(modifiedCTM.isScaleTranslate() || as_IFB(imageFilter)->canHandleComplexCTM());
             modifiedRec = fMCRec;
             this->internalSetMatrix(modifiedCTM);
             imageFilter = modifiedFilter.get();
             paint.writable()->setImageFilter(std::move(modifiedFilter));
         }
         // Else the filter didn't change, so modifiedCTM == stashedMatrix and there's nothing
         // left to do since the stack already has that as the CTM.
     }
 
     // do this before we create the layer. We don't call the public save() since
     // that would invoke a possibly overridden virtual
     this->internalSave();
 
     SkIRect ir;
-    if (!this->clipRectBounds(bounds, &ir, imageFilter)) {
-        // No layer to draw
-        ir.setEmpty();
-        strategy = kNoLayer_SaveLayerStrategy;
+    if (!this->clipRectBounds(bounds, saveLayerFlags, &ir, imageFilter)) {
+        if (modifiedRec) {
+            // In this case there will be no layer in which to stash the matrix so we need to
+            // revert the prior MCRec to its earlier state.
+            modifiedRec->fMatrix = SkM44(stashedMatrix);
+        }
+        return;
+    }
+
+    // FIXME: do willSaveLayer() overriders returning kNoLayer_SaveLayerStrategy really care about
+    // the clipRectBounds() call above?
+    if (kNoLayer_SaveLayerStrategy == strategy) {
+        return;
     }
 
     SkBaseDevice* priorDevice = this->getTopDevice();
+    if (nullptr == priorDevice) {   // Do we still need this check???
+        SkDebugf("Unable to find device for layer.");
+        return;
+    }
+
+    SkImageInfo info = make_layer_info(priorDevice->imageInfo(), ir.width(), ir.height(), paint);
+    if (rec.fSaveLayerFlags & kF16ColorType) {
+        info = info.makeColorType(kRGBA_F16_SkColorType);
+    }
+
     sk_sp<SkBaseDevice> newDevice;
-    if (strategy == kFullLayer_SaveLayerStrategy && priorDevice) {
-        SkASSERT(!ir.isEmpty());
-        SkImageInfo info = make_layer_info(priorDevice->imageInfo(), ir.width(), ir.height(),
-                                           paint);
-        if (rec.fSaveLayerFlags & kF16ColorType) {
-            info = info.makeColorType(kRGBA_F16_SkColorType);
-        }
+    {
         SkASSERT(info.alphaType() != kOpaque_SkAlphaType);
 
         SkPixelGeometry geo = saveLayerFlags & kPreserveLCDText_SaveLayerFlag
                                       ? fProps.pixelGeometry()
                                       : kUnknown_SkPixelGeometry;
         const bool trackCoverage =
                 SkToBool(saveLayerFlags & kMaskAgainstCoverage_EXPERIMENTAL_DONT_USE_SaveLayerFlag);
         const auto createInfo = SkBaseDevice::CreateInfo(info,
                                                          geo,
                                                          SkBaseDevice::kNever_TileUsage,
                                                          trackCoverage,
                                                          fAllocator.get());
         newDevice.reset(priorDevice->onCreateDevice(createInfo, paint));
-    }
-
-    bool boundsAffectsClip = !(saveLayerFlags & SkCanvasPriv::kDontClipToLayer_SaveLayerFlag);
-    if (!newDevice) {
-        if (modifiedRec) {
-            // In this case there will be no layer in which to stash the matrix so we need to
-            // revert the prior MCRec to its earlier state.
-            modifiedRec->fMatrix = SkM44(stashedMatrix);
-        }
-        // Replacing the clip on the older top devices simulates the area where the layer would have
-        // been drawn to, and keeps state sync'ed between canvas and device
-        if (boundsAffectsClip) {
-            UPDATE_DEVICE_CLIP(device->replaceClip(ir),
-                               setRect(ir));
+        if (!newDevice) {
+            return;
         }
-        return;
+        newDevice->setMarkerStack(fMarkerStack.get());
     }
-
-    newDevice->setMarkerStack(fMarkerStack.get());
     DeviceCM* layer = new DeviceCM(newDevice, paint, stashedMatrix);
 
     // only have a "next" if this new layer doesn't affect the clip (rare)
-    layer->fNext = boundsAffectsClip ? nullptr : fMCRec->fTopLayer;
+    layer->fNext = BoundsAffectsClip(saveLayerFlags) ? nullptr : fMCRec->fTopLayer;
     fMCRec->fLayer = layer;
     fMCRec->fTopLayer = layer;    // this field is NOT an owner of layer
 
     if ((rec.fSaveLayerFlags & kInitWithPrevious_SaveLayerFlag) || rec.fBackdrop) {
         DrawDeviceWithFilter(priorDevice, rec.fBackdrop, newDevice.get(), { ir.fLeft, ir.fTop },
                              fMCRec->fMatrix.asM33());
     }
 
     newDevice->setOrigin(fMCRec->fMatrix, ir.fLeft, ir.fTop);
-    newDevice->androidFramework_setDeviceClipRestriction(&fClipRestrictionRect);
-    if (boundsAffectsClip) {
-        fMCRec->fRasterClip.setRect(ir);
-        fQuickRejectBounds = qr_clip_bounds(ir);
-    }
 
+    newDevice->androidFramework_setDeviceClipRestriction(&fClipRestrictionRect);
     if (layer->fNext) {
         // need to punch a hole in the previous device, so we don't draw there, given that
         // the new top-layer will allow drawing to happen "below" it.
         SkRegion hole(ir);
         do {
             layer = layer->fNext;
             layer->fDevice->clipRegion(hole, SkClipOp::kDifference);
         } while (layer->fNext);
     }
 }
