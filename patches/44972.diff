commit eddb87b2f0828320f3a05bd4bdbee12f25270251
Author: Brian Kelley <fustigator@gmail.com>
Date:   Sat Jun 18 03:06:08 2022 -0400

    Fixes #5324 (#5355)

diff --git a/Code/GraphMol/ChemReactions/catch_tests.cpp b/Code/GraphMol/ChemReactions/catch_tests.cpp
index 09b2b4ecd..2e5a8bf6a 100644
--- a/Code/GraphMol/ChemReactions/catch_tests.cpp
+++ b/Code/GraphMol/ChemReactions/catch_tests.cpp
@@ -1,26 +1,29 @@
 //
 //  Copyright (c) 2018-2021 Greg Landrum and other RDKit contributors
 //
 //   @@ All Rights Reserved @@
 //  This file is part of the RDKit.
 //  The contents are covered by the terms of the BSD license
 //  which is included in the file license.txt, found at the root
 //  of the RDKit source tree.
 ///
 #include "catch.hpp"
 
 #include <GraphMol/RDKitBase.h>
 #include <GraphMol/QueryOps.h>
 #include <GraphMol/QueryAtom.h>
 #include <GraphMol/MonomerInfo.h>
+#include <GraphMol/FileParsers/FileParsers.h>
+#include <GraphMol/FileParsers/MolSupplier.h>
 #include <GraphMol/SmilesParse/SmilesParse.h>
 #include <GraphMol/SmilesParse/SmilesWrite.h>
 #include <GraphMol/FileParsers/SequenceParsers.h>
 #include <GraphMol/ChemReactions/Reaction.h>
 #include <GraphMol/ChemReactions/ReactionParser.h>
 #include <GraphMol/ChemReactions/ReactionRunner.h>
 #include <GraphMol/ChemReactions/ReactionUtils.h>
 #include <GraphMol/FileParsers/PNGParser.h>
+#include <GraphMol/FileParsers/FileParserUtils.h>
 
 using namespace RDKit;
 using std::unique_ptr;
@@ -1180,23 +1183,36 @@ TEST_CASE("CXSMILES for reactions", "[cxsmiles]") {
 }
 
 TEST_CASE("V3K rxn blocks") {
+    
   SECTION("writing basics") {
     // clang-format off
     auto rxn =
         "[cH:1]1[cH:2][cH:3][cH:4][cH:5][c:6]1-[Br].[#6:7]B(O)O>>[cH:1]1[cH:2][cH:3][cH:4][cH:5][c:6]1-[#6:7]"_rxnsmarts;
     // clang-format off
     REQUIRE(rxn);
     auto rxnb = ChemicalReactionToV3KRxnBlock(*rxn);
     bool separateAgents=false;
     bool forceV3000=true;
     auto rxnb2 = ChemicalReactionToRxnBlock(*rxn,separateAgents,forceV3000);
     CHECK(rxnb==rxnb2);
 
     std::unique_ptr<ChemicalReaction> rxn2{RxnBlockToChemicalReaction(rxnb)};
     REQUIRE(rxn2);
     CHECK(rxn->getNumAgentTemplates()==rxn2->getNumAgentTemplates());
     CHECK(rxn->getNumReactantTemplates()==rxn2->getNumReactantTemplates());
     CHECK(rxn->getNumProductTemplates()==rxn2->getNumProductTemplates());   
   }
+     
+  SECTION("github5324") {
+    // Test sgroup in a ring - this example failed with improperr tail crossings
+    auto mol = "C-1-C-C-C-C-O-1 |Sg:n:4:n:ht|"_smarts;
+    MolOps::findSSSR(*mol);
+    auto mbk = FileParserUtils::getV3000CTAB(*mol, -1);
+    CHECK(mbk.find("ATOMS=(1 5) XBONDS=(2 4 5) XBHEAD=(1 4) XBCORR=(2 4 5)")!=std::string::npos);
+    std::unique_ptr<ChemicalReaction> rxn(RxnSmartsToChemicalReaction(
+      				          ">>C-1-C-C-C-C-O-1 |Sg:n:4:n:ht|"));
+    auto rxnb = ChemicalReactionToV3KRxnBlock(*rxn);
+    CHECK(rxnb.find("ATOMS=(1 5) XBONDS=(2 4 5) XBHEAD=(1 4) XBCORR=(2 4 5)")!=std::string::npos);
+  }
+}
 
-}
\ No newline at end of file
diff --git a/Code/GraphMol/SmilesParse/CXSmilesOps.cpp b/Code/GraphMol/SmilesParse/CXSmilesOps.cpp
index 4c6e47bf6..e95137e93 100644
--- a/Code/GraphMol/SmilesParse/CXSmilesOps.cpp
+++ b/Code/GraphMol/SmilesParse/CXSmilesOps.cpp
@@ -239,89 +239,67 @@ void setupUnmarkedPolymerSGroup(RWMol &mol, SubstanceGroup &sgroup,
 // deal with setting up the crossing bonds, etc.
 void finalizePolymerSGroup(RWMol &mol, SubstanceGroup &sgroup) {
   bool isFlipped = false;
   std::string connect = "EU";
   if (sgroup.getPropIfPresent("CONNECT", connect)) {
     if (connect.find(",f") != std::string::npos) {
       isFlipped = true;
       boost::replace_all(connect, ",f", "");
     }
   }
   if (connect == "hh") {
     connect = "HH";
   } else if (connect == "ht") {
     connect = "HT";
   } else if (connect == "eu") {
     connect = "EU";
   } else {
     BOOST_LOG(rdWarningLog) << "unrecognized CXSMILES CONNECT value: '"
                             << connect << "'. Assuming 'eu'" << std::endl;
     connect = "EU";
   }
   sgroup.setProp("CONNECT", connect);
 
   std::vector<unsigned int> headCrossings;
   std::vector<unsigned int> tailCrossings;
   sgroup.getPropIfPresent(_headCrossings, headCrossings);
   sgroup.clearProp(_headCrossings);
   sgroup.getPropIfPresent(_tailCrossings, tailCrossings);
   sgroup.clearProp(_tailCrossings);
   if (headCrossings.empty() && tailCrossings.empty()) {
     setupUnmarkedPolymerSGroup(mol, sgroup, headCrossings, tailCrossings);
   }
   if (headCrossings.empty() && tailCrossings.empty()) {
     // we tried... nothing more we can do
     return;
   }
-  // bondIndexMap uses the position in the vector for the SMILES index and
-  // the value in that position as the actual bond index.
-  std::vector<int> bondIndexMap(mol.getNumBonds(), -1);
-  for (const auto bond : mol.bonds()) {
-    unsigned int smilesIdx;
-    if (bond->getPropIfPresent("_cxsmilesBondIdx", smilesIdx)) {
-      bondIndexMap[smilesIdx] = bond->getIdx();
-    }
-  }
-  for (auto &smilesIdx : headCrossings) {
-    int bondIdx = bondIndexMap[smilesIdx];
-    if (bondIdx < 0) {
-      throw RDKit::SmilesParseException(
-          "could not find SGroup bond index in molecule");
-    }
+
+  for (auto &bondIdx : headCrossings) {
     sgroup.addBondWithIdx(bondIdx);
-    // and replace the original value
-    smilesIdx = bondIdx;
   }
   sgroup.setProp("XBHEAD", headCrossings);
 
-  for (auto &smilesIdx : tailCrossings) {
-    int bondIdx = bondIndexMap[smilesIdx];
-    if (bondIdx < 0) {
-      throw RDKit::SmilesParseException(
-          "could not find SGroup bond index in molecule");
-    }
+  for (auto &bondIdx : tailCrossings) {
     sgroup.addBondWithIdx(bondIdx);
-    // and replace the original value
-    smilesIdx = bondIdx;
   }
 
   // now we can setup XBCORR
   std::vector<unsigned int> xbcorr;
   for (unsigned int i = 0;
        i < std::min(headCrossings.size(), tailCrossings.size()); ++i) {
     unsigned headIdx = headCrossings[i];
     unsigned tailIdx = tailCrossings[i];
     if (isFlipped) {
       tailIdx = tailCrossings[tailCrossings.size() - i - 1];
     }
     xbcorr.push_back(headIdx);
     xbcorr.push_back(tailIdx);
   }
   sgroup.setProp("XBCORR", xbcorr);
 }
 
 }  // end of anonymous namespace
 
 // we use this pattern a lot and it's a long function call, but a very short
 // #define
 #define VALID_ATIDX(_atidx_) \
   ((_atidx_) >= startAtomIdx && (_atidx_) < startAtomIdx + mol.getNumAtoms())
