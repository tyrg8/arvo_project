commit c9267d665c30fa78023bd70b8e9c6f02450777e2
Author: Grzegorz Antoniak <ga@anadoxin.org>
Date:   Wed Dec 18 19:28:12 2019 +0100

    RAR5 reader: verify window size for multivolume archives
    
    RAR5 archives can contain files that span across multiple .rar files. If the
    archive contains a big file that doesn't fit to first .rar file, then this file
    is continued in another .rar file.
    
    In this case, the RAR compressor first emits the FILE base block for this big
    file in the first .rar file. Then, it finishes first .rar file, and creates the
    new .rar file. In this new file, it emits the continuation FILE block that
    marks start of the continuation data for the rest of the huge file.
    
    The problem was that the RAR5 reader didn't ignore the window size declaration
    when parsing through the continuation FILE base block. The malicious file could
    declare a different window size inside the continuation base block than was
    declared in the primary FILE base block in the previous volume. The window size
    from continuation block was applied, but the actual window buffer was not
    reallocated. This resulted in a potential SIGSEGV error, since bounary checks
    for accessing the window buffer were working incorrectly (the window size
    variable didn't match the actual window buffer size).
    
    The commit fixes the issue by ignoring the window size declaration in the
    continuation FILE base block when switching volumes.
    
    The commit also contains a test case and OSSFuzz sample #19509.

diff --git a/Makefile.am b/Makefile.am
index 6d864fb6..188c9fc7 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -649,311 +649,312 @@ libarchive_TESTS_ENVIRONMENT= LIBARCHIVE_TEST_FILES=`cd $(top_srcdir);/bin/pwd`/
 libarchive_test_EXTRA_DIST=\
 	libarchive/test/list.h \
 	libarchive/test/test_acl_pax_posix1e.tar.uu \
 	libarchive/test/test_acl_pax_nfs4.tar.uu \
 	libarchive/test/test_archive_string_conversion.txt.Z.uu \
 	libarchive/test/test_compat_bzip2_1.tbz.uu \
 	libarchive/test/test_compat_bzip2_2.tbz.uu \
 	libarchive/test/test_compat_cpio_1.cpio.uu \
 	libarchive/test/test_compat_gtar_1.tar.uu \
 	libarchive/test/test_compat_gtar_2.tar.uu \
 	libarchive/test/test_compat_gzip_1.tgz.uu \
 	libarchive/test/test_compat_gzip_2.tgz.uu \
 	libarchive/test/test_compat_lz4_1.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_2.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_3.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B4.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B4BD.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B4BDBX.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B5.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B5BD.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B6.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B6BD.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B7.tar.lz4.uu \
 	libarchive/test/test_compat_lz4_B7BD.tar.lz4.uu \
 	libarchive/test/test_compat_lzip_1.tlz.uu \
 	libarchive/test/test_compat_lzip_2.tlz.uu \
 	libarchive/test/test_compat_lzma_1.tlz.uu \
 	libarchive/test/test_compat_lzma_2.tlz.uu \
 	libarchive/test/test_compat_lzma_3.tlz.uu \
 	libarchive/test/test_compat_lzop_1.tar.lzo.uu \
 	libarchive/test/test_compat_lzop_2.tar.lzo.uu \
 	libarchive/test/test_compat_lzop_3.tar.lzo.uu \
 	libarchive/test/test_compat_mac-1.tar.Z.uu \
 	libarchive/test/test_compat_mac-2.tar.Z.uu \
 	libarchive/test/test_compat_perl_archive_tar.tar.uu \
 	libarchive/test/test_compat_plexus_archiver_tar.tar.uu \
 	libarchive/test/test_compat_solaris_pax_sparse_1.pax.Z.uu \
 	libarchive/test/test_compat_solaris_pax_sparse_2.pax.Z.uu \
 	libarchive/test/test_compat_solaris_tar_acl.tar.uu \
 	libarchive/test/test_compat_star_acl_nfs4.tar.uu \
 	libarchive/test/test_compat_star_acl_posix1e.tar.uu \
 	libarchive/test/test_compat_tar_hardlink_1.tar.uu \
 	libarchive/test/test_compat_uudecode_large.tar.Z.uu \
 	libarchive/test/test_compat_xz_1.txz.uu \
 	libarchive/test/test_compat_zip_1.zip.uu \
 	libarchive/test/test_compat_zip_2.zip.uu \
 	libarchive/test/test_compat_zip_3.zip.uu \
 	libarchive/test/test_compat_zip_4.zip.uu \
 	libarchive/test/test_compat_zip_5.zip.uu \
 	libarchive/test/test_compat_zip_6.zip.uu \
 	libarchive/test/test_compat_zip_7.xps.uu \
 	libarchive/test/test_compat_zip_8.zip.uu \
 	libarchive/test/test_compat_zstd_1.tar.zst.uu \
 	libarchive/test/test_fuzz.cab.uu \
 	libarchive/test/test_fuzz.lzh.uu \
 	libarchive/test/test_fuzz_1.iso.Z.uu \
 	libarchive/test/test_pax_filename_encoding.tar.uu \
 	libarchive/test/test_pax_xattr_header_all.tar.uu \
 	libarchive/test/test_pax_xattr_header_libarchive.tar.uu \
 	libarchive/test/test_pax_xattr_header_schily.tar.uu \
 	libarchive/test/test_rar_multivolume_multiple_files.part1.rar.uu \
 	libarchive/test/test_rar_multivolume_multiple_files.part2.rar.uu \
 	libarchive/test/test_rar_multivolume_multiple_files.part3.rar.uu \
 	libarchive/test/test_rar_multivolume_multiple_files.part4.rar.uu \
 	libarchive/test/test_rar_multivolume_multiple_files.part5.rar.uu \
 	libarchive/test/test_rar_multivolume_multiple_files.part6.rar.uu \
 	libarchive/test/test_rar_multivolume_single_file.part1.rar.uu \
 	libarchive/test/test_rar_multivolume_single_file.part2.rar.uu \
 	libarchive/test/test_rar_multivolume_single_file.part3.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part01.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part02.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part03.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part04.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part05.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part06.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part07.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part08.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part09.rar.uu \
 	libarchive/test/test_rar_multivolume_uncompressed_files.part10.rar.uu \
 	libarchive/test/test_read_filter_grzip.tar.grz.uu \
 	libarchive/test/test_read_filter_lrzip.tar.lrz.uu \
 	libarchive/test/test_read_filter_lzop.tar.lzo.uu \
 	libarchive/test/test_read_filter_lzop_multiple_parts.tar.lzo.uu \
 	libarchive/test/test_read_format_mtree_crash747.mtree.bz2.uu \
 	libarchive/test/test_read_format_mtree_noprint.mtree.uu \
 	libarchive/test/test_read_format_7zip_bcj2_bzip2.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_copy_1.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_copy_2.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_copy_lzma.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_deflate.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_lzma1_1.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_lzma1_2.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_lzma2_1.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj2_lzma2_2.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj_bzip2.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj_copy.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj_deflate.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj_lzma1.7z.uu \
 	libarchive/test/test_read_format_7zip_bcj_lzma2.7z.uu \
 	libarchive/test/test_read_format_7zip_bzip2.7z.uu \
 	libarchive/test/test_read_format_7zip_copy.7z.uu \
 	libarchive/test/test_read_format_7zip_copy_2.7z.uu \
 	libarchive/test/test_read_format_7zip_deflate.7z.uu \
 	libarchive/test/test_read_format_7zip_delta_lzma1.7z.uu \
 	libarchive/test/test_read_format_7zip_delta_lzma2.7z.uu \
 	libarchive/test/test_read_format_7zip_empty_archive.7z.uu \
 	libarchive/test/test_read_format_7zip_empty_file.7z.uu \
 	libarchive/test/test_read_format_7zip_encryption.7z.uu \
 	libarchive/test/test_read_format_7zip_encryption_header.7z.uu \
 	libarchive/test/test_read_format_7zip_encryption_partially.7z.uu \
 	libarchive/test/test_read_format_7zip_lzma1.7z.uu \
 	libarchive/test/test_read_format_7zip_lzma1_2.7z.uu \
 	libarchive/test/test_read_format_7zip_lzma1_lzma2.7z.uu \
 	libarchive/test/test_read_format_7zip_lzma2.7z.uu \
 	libarchive/test/test_read_format_7zip_malformed.7z.uu \
 	libarchive/test/test_read_format_7zip_malformed2.7z.uu \
 	libarchive/test/test_read_format_7zip_ppmd.7z.uu \
 	libarchive/test/test_read_format_7zip_symbolic_name.7z.uu \
 	libarchive/test/test_read_format_ar.ar.uu \
 	libarchive/test/test_read_format_cab_1.cab.uu \
 	libarchive/test/test_read_format_cab_2.cab.uu \
 	libarchive/test/test_read_format_cab_3.cab.uu \
 	libarchive/test/test_read_format_cab_filename_cp932.cab.uu \
 	libarchive/test/test_read_format_cpio_bin_be.cpio.uu \
 	libarchive/test/test_read_format_cpio_bin_le.cpio.uu \
 	libarchive/test/test_read_format_cpio_filename_cp866.cpio.uu \
 	libarchive/test/test_read_format_cpio_filename_eucjp.cpio.uu \
 	libarchive/test/test_read_format_cpio_filename_koi8r.cpio.uu \
 	libarchive/test/test_read_format_cpio_filename_utf8_jp.cpio.uu \
 	libarchive/test/test_read_format_cpio_filename_utf8_ru.cpio.uu \
 	libarchive/test/test_read_format_cpio_svr4_bzip2_rpm.rpm.uu \
 	libarchive/test/test_read_format_cpio_svr4_gzip_rpm.rpm.uu \
 	libarchive/test/test_read_format_gtar_filename_cp866.tar.Z.uu \
 	libarchive/test/test_read_format_gtar_filename_eucjp.tar.Z.uu \
 	libarchive/test/test_read_format_gtar_filename_koi8r.tar.Z.uu \
 	libarchive/test/test_read_format_gtar_sparse_1_13.tar.uu \
 	libarchive/test/test_read_format_gtar_sparse_1_17.tar.uu \
 	libarchive/test/test_read_format_gtar_sparse_1_17_posix00.tar.uu \
 	libarchive/test/test_read_format_gtar_sparse_1_17_posix01.tar.uu \
 	libarchive/test/test_read_format_gtar_sparse_1_17_posix10.tar.uu \
 	libarchive/test/test_read_format_gtar_sparse_1_17_posix10_modified.tar.uu \
 	libarchive/test/test_read_format_gtar_sparse_skip_entry.tar.Z.uu \
 	libarchive/test/test_read_format_iso.iso.Z.uu \
 	libarchive/test/test_read_format_iso_2.iso.Z.uu \
 	libarchive/test/test_read_format_iso_joliet.iso.Z.uu \
 	libarchive/test/test_read_format_iso_joliet_by_nero.iso.Z.uu \
 	libarchive/test/test_read_format_iso_joliet_long.iso.Z.uu \
 	libarchive/test/test_read_format_iso_joliet_rockridge.iso.Z.uu \
 	libarchive/test/test_read_format_iso_multi_extent.iso.Z.uu \
 	libarchive/test/test_read_format_iso_rockridge.iso.Z.uu \
 	libarchive/test/test_read_format_iso_rockridge_ce.iso.Z.uu \
 	libarchive/test/test_read_format_iso_rockridge_new.iso.Z.uu \
 	libarchive/test/test_read_format_iso_rockridge_rr_moved.iso.Z.uu \
 	libarchive/test/test_read_format_iso_xorriso.iso.Z.uu \
 	libarchive/test/test_read_format_iso_zisofs.iso.Z.uu \
 	libarchive/test/test_read_format_lha_bugfix_0.lzh.uu \
 	libarchive/test/test_read_format_lha_filename_cp932.lzh.uu \
 	libarchive/test/test_read_format_lha_filename_utf16.lzh.uu \
 	libarchive/test/test_read_format_lha_header0.lzh.uu \
 	libarchive/test/test_read_format_lha_header1.lzh.uu \
 	libarchive/test/test_read_format_lha_header2.lzh.uu \
 	libarchive/test/test_read_format_lha_header3.lzh.uu \
 	libarchive/test/test_read_format_lha_lh0.lzh.uu \
 	libarchive/test/test_read_format_lha_lh6.lzh.uu \
 	libarchive/test/test_read_format_lha_lh7.lzh.uu \
 	libarchive/test/test_read_format_lha_withjunk.lzh.uu \
 	libarchive/test/test_read_format_mtree.mtree.uu \
 	libarchive/test/test_read_format_mtree_nomagic.mtree.uu \
 	libarchive/test/test_read_format_mtree_nomagic2.mtree.uu \
 	libarchive/test/test_read_format_mtree_nomagic3.mtree.uu \
 	libarchive/test/test_read_format_rar.rar.uu \
 	libarchive/test/test_read_format_rar_binary_data.rar.uu \
 	libarchive/test/test_read_format_rar_compress_best.rar.uu \
 	libarchive/test/test_read_format_rar_compress_normal.rar.uu \
 	libarchive/test/test_read_format_rar_encryption_data.rar.uu \
 	libarchive/test/test_read_format_rar_encryption_header.rar.uu \
 	libarchive/test/test_read_format_rar_encryption_partially.rar.uu \
 	libarchive/test/test_read_format_rar_invalid1.rar.uu \
 	libarchive/test/test_read_format_rar_multi_lzss_blocks.rar.uu \
 	libarchive/test/test_read_format_rar_multivolume.part0001.rar.uu \
 	libarchive/test/test_read_format_rar_multivolume.part0002.rar.uu \
 	libarchive/test/test_read_format_rar_multivolume.part0003.rar.uu \
 	libarchive/test/test_read_format_rar_multivolume.part0004.rar.uu \
 	libarchive/test/test_read_format_rar_noeof.rar.uu \
 	libarchive/test/test_read_format_rar_ppmd_lzss_conversion.rar.uu \
 	libarchive/test/test_read_format_rar_ppmd_use_after_free.rar.uu \
 	libarchive/test/test_read_format_rar_ppmd_use_after_free2.rar.uu \
 	libarchive/test/test_read_format_rar_sfx.exe.uu \
 	libarchive/test/test_read_format_rar_subblock.rar.uu \
 	libarchive/test/test_read_format_rar_unicode.rar.uu \
 	libarchive/test/test_read_format_rar_windows.rar.uu \
 	libarchive/test/test_read_format_rar5_arm.rar.uu \
 	libarchive/test/test_read_format_rar5_blake2.rar.uu \
 	libarchive/test/test_read_format_rar5_compressed.rar.uu \
 	libarchive/test/test_read_format_rar5_different_window_size.rar.uu \
 	libarchive/test/test_read_format_rar5_different_solid_window_size.rar.uu \
 	libarchive/test/test_read_format_rar5_distance_overflow.rar.uu \
 	libarchive/test/test_read_format_rar5_extra_field_version.rar.uu \
 	libarchive/test/test_read_format_rar5_fileattr.rar.uu \
 	libarchive/test/test_read_format_rar5_hardlink.rar.uu \
 	libarchive/test/test_read_format_rar5_invalid_dict_reference.rar.uu \
 	libarchive/test/test_read_format_rar5_leftshift1.rar.uu \
 	libarchive/test/test_read_format_rar5_leftshift2.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part01.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part02.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part03.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part04.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part05.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part06.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part07.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive.part08.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive_solid.part01.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive_solid.part02.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive_solid.part03.rar.uu \
 	libarchive/test/test_read_format_rar5_multiarchive_solid.part04.rar.uu \
 	libarchive/test/test_read_format_rar5_multiple_files.rar.uu \
 	libarchive/test/test_read_format_rar5_multiple_files_solid.rar.uu \
 	libarchive/test/test_read_format_rar5_nonempty_dir_stream.rar.uu \
 	libarchive/test/test_read_format_rar5_owner.rar.uu \
 	libarchive/test/test_read_format_rar5_readtables_overflow.rar.uu \
 	libarchive/test/test_read_format_rar5_solid.rar.uu \
 	libarchive/test/test_read_format_rar5_stored.rar.uu \
 	libarchive/test/test_read_format_rar5_stored_manyfiles.rar.uu \
 	libarchive/test/test_read_format_rar5_symlink.rar.uu \
 	libarchive/test/test_read_format_rar5_truncated_huff.rar.uu \
 	libarchive/test/test_read_format_rar5_win32.rar.uu \
 	libarchive/test/test_read_format_rar5_arm_filter_on_window_boundary.rar.uu \
+	libarchive/test/test_read_format_rar5_different_winsize_on_merge.rar.uu \
 	libarchive/test/test_read_format_raw.bufr.uu \
 	libarchive/test/test_read_format_raw.data.gz.uu \
 	libarchive/test/test_read_format_raw.data.Z.uu \
 	libarchive/test/test_read_format_raw.data.uu \
 	libarchive/test/test_read_format_tar_concatenated.tar.uu \
 	libarchive/test/test_read_format_tar_empty_filename.tar.uu \
 	libarchive/test/test_read_format_tar_empty_with_gnulabel.tar.uu \
 	libarchive/test/test_read_format_tar_empty_pax.tar.Z.uu \
 	libarchive/test/test_read_format_tar_filename_koi8r.tar.Z.uu \
 	libarchive/test/test_read_format_ustar_filename_cp866.tar.Z.uu \
 	libarchive/test/test_read_format_ustar_filename_eucjp.tar.Z.uu \
 	libarchive/test/test_read_format_ustar_filename_koi8r.tar.Z.uu \
 	libarchive/test/test_read_format_warc.warc.uu \
 	libarchive/test/test_read_format_zip.zip.uu \
 	libarchive/test/test_read_format_zip_7075_utf8_paths.zip.uu \
 	libarchive/test/test_read_format_zip_bz2_hang.zip.uu \
 	libarchive/test/test_read_format_zip_bzip2.zipx.uu \
 	libarchive/test/test_read_format_zip_bzip2_multi.zipx.uu \
 	libarchive/test/test_read_format_zip_comment_stored_1.zip.uu \
 	libarchive/test/test_read_format_zip_comment_stored_2.zip.uu \
 	libarchive/test/test_read_format_zip_encryption_data.zip.uu \
 	libarchive/test/test_read_format_zip_encryption_header.zip.uu \
 	libarchive/test/test_read_format_zip_encryption_partially.zip.uu \
 	libarchive/test/test_read_format_zip_extra_padding.zip.uu \
 	libarchive/test/test_read_format_zip_filename_cp866.zip.uu \
 	libarchive/test/test_read_format_zip_filename_cp932.zip.uu \
 	libarchive/test/test_read_format_zip_filename_koi8r.zip.uu \
 	libarchive/test/test_read_format_zip_filename_utf8_jp.zip.uu \
 	libarchive/test/test_read_format_zip_filename_utf8_ru.zip.uu \
 	libarchive/test/test_read_format_zip_filename_utf8_ru2.zip.uu \
 	libarchive/test/test_read_format_zip_high_compression.zip.uu \
 	libarchive/test/test_read_format_zip_length_at_end.zip.uu \
 	libarchive/test/test_read_format_zip_lzma.zipx.uu \
 	libarchive/test/test_read_format_zip_lzma_alone_leak.zipx.uu \
 	libarchive/test/test_read_format_zip_lzma_multi.zipx.uu \
 	libarchive/test/test_read_format_zip_jar.jar.uu \
 	libarchive/test/test_read_format_zip_mac_metadata.zip.uu \
 	libarchive/test/test_read_format_zip_malformed1.zip.uu \
 	libarchive/test/test_read_format_zip_msdos.zip.uu \
 	libarchive/test/test_read_format_zip_nested.zip.uu \
 	libarchive/test/test_read_format_zip_nofiletype.zip.uu \
 	libarchive/test/test_read_format_zip_padded1.zip.uu \
 	libarchive/test/test_read_format_zip_padded2.zip.uu \
 	libarchive/test/test_read_format_zip_padded3.zip.uu \
 	libarchive/test/test_read_format_zip_ppmd8.zipx.uu \
 	libarchive/test/test_read_format_zip_ppmd8_crash_1.zipx.uu \
 	libarchive/test/test_read_format_zip_ppmd8_crash_2.zipx.uu \
 	libarchive/test/test_read_format_zip_ppmd8_multi.zipx.uu \
 	libarchive/test/test_read_format_zip_sfx.uu \
 	libarchive/test/test_read_format_zip_symlink.zip.uu \
 	libarchive/test/test_read_format_zip_traditional_encryption_data.zip.uu \
 	libarchive/test/test_read_format_zip_ux.zip.uu \
 	libarchive/test/test_read_format_zip_winzip_aes128.zip.uu \
 	libarchive/test/test_read_format_zip_winzip_aes256.zip.uu \
 	libarchive/test/test_read_format_zip_winzip_aes256_large.zip.uu \
 	libarchive/test/test_read_format_zip_winzip_aes256_stored.zip.uu \
 	libarchive/test/test_read_format_zip_with_invalid_traditional_eocd.zip.uu \
 	libarchive/test/test_read_format_zip_xz_multi.zipx.uu \
 	libarchive/test/test_read_format_zip_zip64a.zip.uu \
 	libarchive/test/test_read_format_zip_zip64b.zip.uu \
 	libarchive/test/test_read_large_splitted_rar_aa.uu \
 	libarchive/test/test_read_large_splitted_rar_ab.uu \
 	libarchive/test/test_read_large_splitted_rar_ac.uu \
 	libarchive/test/test_read_large_splitted_rar_ad.uu \
 	libarchive/test/test_read_large_splitted_rar_ae.uu \
 	libarchive/test/test_read_pax_schily_xattr.tar.uu \
 	libarchive/test/test_read_splitted_rar_aa.uu \
 	libarchive/test/test_read_splitted_rar_ab.uu \
 	libarchive/test/test_read_splitted_rar_ac.uu \
 	libarchive/test/test_read_splitted_rar_ad.uu \
 	libarchive/test/test_read_too_many_filters.gz.uu \
 	libarchive/test/test_splitted_rar_seek_support_aa.uu \
 	libarchive/test/test_splitted_rar_seek_support_ab.uu \
 	libarchive/test/test_splitted_rar_seek_support_ac.uu \
 	libarchive/test/test_write_disk_appledouble.cpio.gz.uu \
 	libarchive/test/test_write_disk_hfs_compression.tgz.uu \
 	libarchive/test/test_write_disk_mac_metadata.tar.gz.uu \
 	libarchive/test/test_write_disk_no_hfs_compression.tgz.uu \
 	libarchive/test/CMakeLists.txt \
 	libarchive/test/README
 
 #
 # Common code for libarchive frontends (cpio, tar)
 #
diff --git a/libarchive/archive_read_support_format_rar5.c b/libarchive/archive_read_support_format_rar5.c
index ec31bc79..ce38b1fc 100644
--- a/libarchive/archive_read_support_format_rar5.c
+++ b/libarchive/archive_read_support_format_rar5.c
@@ -1,80 +1,81 @@
 /*-
 * Copyright (c) 2018 Grzegorz Antoniak (http://antoniak.org)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 #include "archive_platform.h"
 #include "archive_endian.h"
 
 #ifdef HAVE_ERRNO_H
 #include <errno.h>
 #endif
 #include <time.h>
 #ifdef HAVE_ZLIB_H
 #include <zlib.h> /* crc32 */
 #endif
 #ifdef HAVE_LIMITS_H
 #include <limits.h>
 #endif
 
 #include "archive.h"
 #ifndef HAVE_ZLIB_H
 #include "archive_crc32.h"
 #endif
 
 #include "archive_entry.h"
 #include "archive_entry_locale.h"
 #include "archive_ppmd7_private.h"
 #include "archive_entry_private.h"
 
 #ifdef HAVE_BLAKE2_H
 #include <blake2.h>
 #else
 #include "archive_blake2.h"
 #endif
 
 /*#define CHECK_CRC_ON_SOLID_SKIP*/
 /*#define DONT_FAIL_ON_CRC_ERROR*/
 /*#define DEBUG*/
 
 #define rar5_min(a, b) (((a) > (b)) ? (b) : (a))
 #define rar5_max(a, b) (((a) > (b)) ? (a) : (b))
 #define rar5_countof(X) ((const ssize_t) (sizeof(X) / sizeof(*X)))
 
 #if defined DEBUG
 #define DEBUG_CODE if(1)
+#define LOG(...) do { printf("rar5: " __VA_ARGS__); puts(""); } while(0)
 #else
 #define DEBUG_CODE if(0)
 #endif
 
 /* Real RAR5 magic number is:
  *
  * 0x52, 0x61, 0x72, 0x21, 0x1a, 0x07, 0x01, 0x00
  * "Rar!→•☺·\x00"
  *
  * It's stored in `rar5_signature` after XOR'ing it with 0xA1, because I don't
  * want to put this magic sequence in each binary that uses libarchive, so
  * applications that scan through the file for this marker won't trigger on
  * this "false" one.
  *
  * The array itself is decrypted in `rar5_init` function. */
@@ -1572,292 +1573,296 @@ static int process_head_file_extra(struct archive_read* a,
 static int process_head_file(struct archive_read* a, struct rar5* rar,
     struct archive_entry* entry, size_t block_flags)
 {
 	ssize_t extra_data_size = 0;
 	size_t data_size = 0;
 	size_t file_flags = 0;
 	size_t file_attr = 0;
 	size_t compression_info = 0;
 	size_t host_os = 0;
 	size_t name_size = 0;
 	uint64_t unpacked_size, window_size;
 	uint32_t mtime = 0, crc = 0;
 	int c_method = 0, c_version = 0;
 	char name_utf8_buf[MAX_NAME_IN_BYTES];
 	const uint8_t* p;
 
 	archive_entry_clear(entry);
 
 	/* Do not reset file context if we're switching archives. */
 	if(!rar->cstate.switch_multivolume) {
 		reset_file_context(rar);
 	}
 
 	if(block_flags & HFL_EXTRA_DATA) {
 		size_t edata_size = 0;
 		if(!read_var_sized(a, &edata_size, NULL))
 			return ARCHIVE_EOF;
 
 		/* Intentional type cast from unsigned to signed. */
 		extra_data_size = (ssize_t) edata_size;
 	}
 
 	if(block_flags & HFL_DATA) {
 		if(!read_var_sized(a, &data_size, NULL))
 			return ARCHIVE_EOF;
 
 		rar->file.bytes_remaining = data_size;
 	} else {
 		rar->file.bytes_remaining = 0;
 
 		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
 				"no data found in file/service block");
 		return ARCHIVE_FATAL;
 	}
 
 	enum FILE_FLAGS {
 		DIRECTORY = 0x0001, UTIME = 0x0002, CRC32 = 0x0004,
 		UNKNOWN_UNPACKED_SIZE = 0x0008,
 	};
 
 	enum FILE_ATTRS {
 		ATTR_READONLY = 0x1, ATTR_HIDDEN = 0x2, ATTR_SYSTEM = 0x4,
 		ATTR_DIRECTORY = 0x10,
 	};
 
 	enum COMP_INFO_FLAGS {
 		SOLID = 0x0040,
 	};
 
 	if(!read_var_sized(a, &file_flags, NULL))
 		return ARCHIVE_EOF;
 
 	if(!read_var(a, &unpacked_size, NULL))
 		return ARCHIVE_EOF;
 
 	if(file_flags & UNKNOWN_UNPACKED_SIZE) {
 		archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
 		    "Files with unknown unpacked size are not supported");
 		return ARCHIVE_FATAL;
 	}
 
 	rar->file.dir = (uint8_t) ((file_flags & DIRECTORY) > 0);
 
 	if(!read_var_sized(a, &file_attr, NULL))
 		return ARCHIVE_EOF;
 
 	if(file_flags & UTIME) {
 		if(!read_u32(a, &mtime))
 			return ARCHIVE_EOF;
 	}
 
 	if(file_flags & CRC32) {
 		if(!read_u32(a, &crc))
 			return ARCHIVE_EOF;
 	}
 
 	if(!read_var_sized(a, &compression_info, NULL))
 		return ARCHIVE_EOF;
 
 	c_method = (int) (compression_info >> 7) & 0x7;
 	c_version = (int) (compression_info & 0x3f);
 
 	/* RAR5 seems to limit the dictionary size to 64MB. */
 	window_size = (rar->file.dir > 0) ?
 		0 :
 		g_unpack_window_size << ((compression_info >> 10) & 15);
 	rar->cstate.method = c_method;
 	rar->cstate.version = c_version + 50;
 	rar->file.solid = (compression_info & SOLID) > 0;
 
 	/* Archives which declare solid files without initializing the window
 	 * buffer first are invalid. */
 
 	if(rar->file.solid > 0 && rar->cstate.window_buf == NULL) {
 		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
 				  "Declared solid file, but no window buffer "
 				  "initialized yet.");
 		return ARCHIVE_FATAL;
 	}
 
 	/* Check if window_size is a sane value. Also, if the file is not
 	 * declared as a directory, disallow window_size == 0. */
 	if(window_size > (64 * 1024 * 1024) ||
 	    (rar->file.dir == 0 && window_size == 0))
 	{
 		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
 		    "Declared dictionary size is not supported.");
 		return ARCHIVE_FATAL;
 	}
 
 	if(rar->file.solid > 0) {
 		/* Re-check if current window size is the same as previous
 		 * window size (for solid files only). */
 		if(rar->file.solid_window_size > 0 &&
 		    rar->file.solid_window_size != (ssize_t) window_size)
 		{
 			archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
 			    "Window size for this solid file doesn't match "
 			    "the window size used in previous solid file. ");
 			return ARCHIVE_FATAL;
 		}
 	}
 
-	/* Values up to 64M should fit into ssize_t on every
-	 * architecture. */
-	rar->cstate.window_size = (ssize_t) window_size;
+	/* If we're currently switching volumes, ignore the new definition of
+	 * window_size. */
+	if(rar->cstate.switch_multivolume == 0) {
+		/* Values up to 64M should fit into ssize_t on every
+		 * architecture. */
+		rar->cstate.window_size = (ssize_t) window_size;
+	}
 
 	if(rar->file.solid > 0 && rar->file.solid_window_size == 0) {
 		/* Solid files have to have the same window_size across
 		   whole archive. Remember the window_size parameter
 		   for first solid file found. */
 		rar->file.solid_window_size = rar->cstate.window_size;
 	}
 
 	init_window_mask(rar);
 
 	rar->file.service = 0;
 
 	if(!read_var_sized(a, &host_os, NULL))
 		return ARCHIVE_EOF;
 
 	enum HOST_OS {
 		HOST_WINDOWS = 0,
 		HOST_UNIX = 1,
 	};
 
 	if(host_os == HOST_WINDOWS) {
 		/* Host OS is Windows */
 
 		__LA_MODE_T mode;
 
 		if(file_attr & ATTR_DIRECTORY) {
 			if (file_attr & ATTR_READONLY) {
 				mode = 0555 | AE_IFDIR;
 			} else {
 				mode = 0755 | AE_IFDIR;
 			}
 		} else {
 			if (file_attr & ATTR_READONLY) {
 				mode = 0444 | AE_IFREG;
 			} else {
 				mode = 0644 | AE_IFREG;
 			}
 		}
 
 		archive_entry_set_mode(entry, mode);
 
 		if (file_attr & (ATTR_READONLY | ATTR_HIDDEN | ATTR_SYSTEM)) {
 			char *fflags_text, *ptr;
 			/* allocate for "rdonly,hidden,system," */
 			fflags_text = malloc(22 * sizeof(char));
 			if (fflags_text != NULL) {
 				ptr = fflags_text;
 				if (file_attr & ATTR_READONLY) {
 					strcpy(ptr, "rdonly,");
 					ptr = ptr + 7;
 				}
 				if (file_attr & ATTR_HIDDEN) {
 					strcpy(ptr, "hidden,");
 					ptr = ptr + 7;
 				}
 				if (file_attr & ATTR_SYSTEM) {
 					strcpy(ptr, "system,");
 					ptr = ptr + 7;
 				}
 				if (ptr > fflags_text) {
 					/* Delete trailing comma */
 					*(ptr - 1) = '\0';
 					archive_entry_copy_fflags_text(entry,
 					    fflags_text);
 				}
 				free(fflags_text);
 			}
 		}
 	} else if(host_os == HOST_UNIX) {
 		/* Host OS is Unix */
 		archive_entry_set_mode(entry, (__LA_MODE_T) file_attr);
 	} else {
 		/* Unknown host OS */
 		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
 				"Unsupported Host OS: 0x%x", (int) host_os);
 
 		return ARCHIVE_FATAL;
 	}
 
 	if(!read_var_sized(a, &name_size, NULL))
 		return ARCHIVE_EOF;
 
 	if(!read_ahead(a, name_size, &p))
 		return ARCHIVE_EOF;
 
 	if(name_size > (MAX_NAME_IN_CHARS - 1)) {
 		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
 				"Filename is too long");
 
 		return ARCHIVE_FATAL;
 	}
 
 	if(name_size == 0) {
 		archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
 				"No filename specified");
 
 		return ARCHIVE_FATAL;
 	}
 
 	memcpy(name_utf8_buf, p, name_size);
 	name_utf8_buf[name_size] = 0;
 	if(ARCHIVE_OK != consume(a, name_size)) {
 		return ARCHIVE_EOF;
 	}
 
 	archive_entry_update_pathname_utf8(entry, name_utf8_buf);
 
 	if(extra_data_size > 0) {
 		int ret = process_head_file_extra(a, entry, rar,
 		    extra_data_size);
 
 		/* Sanity check. */
 		if(extra_data_size < 0) {
 			archive_set_error(&a->archive, ARCHIVE_ERRNO_PROGRAMMER,
 			    "File extra data size is not zero");
 			return ARCHIVE_FATAL;
 		}
 
 		if(ret != ARCHIVE_OK)
 			return ret;
 	}
 
 	if((file_flags & UNKNOWN_UNPACKED_SIZE) == 0) {
 		rar->file.unpacked_size = (ssize_t) unpacked_size;
 		if(rar->file.redir_type == REDIR_TYPE_NONE)
 			archive_entry_set_size(entry, unpacked_size);
 	}
 
 	if(file_flags & UTIME) {
 		archive_entry_set_mtime(entry, (time_t) mtime, 0);
 	}
 
 	if(file_flags & CRC32) {
 		rar->file.stored_crc32 = crc;
 	}
 
 	if(!rar->cstate.switch_multivolume) {
 		/* Do not reinitialize unpacking state if we're switching
 		 * archives. */
 		rar->cstate.block_parsing_finished = 1;
 		rar->cstate.all_filters_applied = 1;
 		rar->cstate.initialized = 0;
 	}
 
 	if(rar->generic.split_before > 0) {
 		/* If now we're standing on a header that has a 'split before'
 		 * mark, it means we're standing on a 'continuation' file
 		 * header. Signal the caller that if it wants to move to
 		 * another file, it must call rar5_read_header() function
 		 * again. */
 
 		return ARCHIVE_RETRY;
 	} else {
 		return ARCHIVE_OK;
 	}
 }
diff --git a/libarchive/test/test_read_format_rar5.c b/libarchive/test/test_read_format_rar5.c
index f44b55ae..bb94d4e3 100644
--- a/libarchive/test/test_read_format_rar5.c
+++ b/libarchive/test/test_read_format_rar5.c
@@ -1241,3 +1241,18 @@ DEFINE_TEST(test_read_format_rar5_different_solid_window_size)
 
 	EPILOGUE();
 }
+
+DEFINE_TEST(test_read_format_rar5_different_winsize_on_merge)
+{
+	char buf[4096];
+	PROLOGUE("test_read_format_rar5_different_winsize_on_merge.rar");
+
+	/* Return codes of those calls are ignored, because this sample file
+	 * is invalid. However, the unpacker shouldn't produce any SIGSEGV
+	 * errors during processing. */
+
+	(void) archive_read_next_header(a, &ae);
+	while(0 < archive_read_data(a, buf, sizeof(buf))) {}
+
+	EPILOGUE();
+}
diff --git a/libarchive/test/test_read_format_rar5_different_winsize_on_merge.rar.uu b/libarchive/test/test_read_format_rar5_different_winsize_on_merge.rar.uu
new file mode 100644
index 00000000..85391fa4
--- /dev/null
+++ b/libarchive/test/test_read_format_rar5_different_winsize_on_merge.rar.uu
@@ -0,0 +1,16 @@
+begin 644 test_read_format_rar5_different_winsize_on_merge.rar.uu
+M4F%R(1H'`0"-[P+2``+''QP,!`H``"0`N)$#`0(H$"<"``X`/3Q/`0"V````
+MQ@$````V`/^%02`H^B7&,NX``"F&AK%M-50O<WY2!P$`C>\"T@`"_[6U,1"U
+MM;6UM[BU45)A<K6UM;6UM+6U```\______?______________P`&80"-[P+2
+MT@`#TA________\`M,-:!`8``(0A_^\"TE)A<J$?Y@<!`(WO`BCZ)<8R[@``
+M*8:&L6TU5"]S?E('`0"-[P+2``+_M0`````````DM3$0M;6UM;>XM5%287*U
+MM;6UM;2UM0``//_____W______________\`!F$`C>\"TM(``](?________
+M`+3#6@0&D0,!`B@0)P(`#@`]/$\!`+8```#&`0```#8`_X5!("CZ)<8R[@``
+M*8:&L6TU5"]S?E(`````````````````````````````````````````````
+M````````````````````````````````````````````````````````````
+M``````````````````````````````````````````````````<!`(WO````
+M`````````````````````````````````````````````````````$``````
+M`````````````````````````````````#$S-S4V-#<`_P0$!`0G!`0$!`0$
+"!`0`
+`
+end
