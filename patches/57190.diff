commit f5e0f52dd3ba8152c0ec37c2113586ce2e6bcff3
Author: Daniel Stenberg <daniel@haxx.se>
Date:   Fri Mar 17 15:26:00 2023 +0100

    Revert "rtsp: use dynbuf instead of custom reallocs"
    
    This reverts commit 1b9ea3239d22147e00d8 because of OSS-fuzz reports.
    I'll do another take after the pending release.
    
    Closes #10785

diff --git a/lib/rtsp.c b/lib/rtsp.c
index 6dd69a245..aef3560a9 100644
--- a/lib/rtsp.c
+++ b/lib/rtsp.c
@@ -96,46 +96,44 @@ CURLcode rtp_client_write(struct Curl_easy *data, char *ptr, size_t len);
 /*
  * RTSP handler interface.
  */
 const struct Curl_handler Curl_handler_rtsp = {
   "RTSP",                               /* scheme */
   rtsp_setup_connection,                /* setup_connection */
   rtsp_do,                              /* do_it */
   rtsp_done,                            /* done */
   ZERO_NULL,                            /* do_more */
   rtsp_connect,                         /* connect_it */
   ZERO_NULL,                            /* connecting */
   ZERO_NULL,                            /* doing */
   ZERO_NULL,                            /* proto_getsock */
   rtsp_getsock_do,                      /* doing_getsock */
   ZERO_NULL,                            /* domore_getsock */
   ZERO_NULL,                            /* perform_getsock */
   rtsp_disconnect,                      /* disconnect */
   rtsp_rtp_readwrite,                   /* readwrite */
   rtsp_conncheck,                       /* connection_check */
   ZERO_NULL,                            /* attach connection */
   PORT_RTSP,                            /* defport */
   CURLPROTO_RTSP,                       /* protocol */
   CURLPROTO_RTSP,                       /* family */
   PROTOPT_NONE                          /* flags */
 };
 
-#define MAX_RTP_BUFFERSIZE 1000000 /* arbitrary */
 
 static CURLcode rtsp_setup_connection(struct Curl_easy *data,
                                       struct connectdata *conn)
 {
   struct RTSP *rtsp;
   (void)conn;
 
   data->req.p.rtsp = rtsp = calloc(1, sizeof(struct RTSP));
   if(!rtsp)
     return CURLE_OUT_OF_MEMORY;
 
-  Curl_dyn_init(&conn->proto.rtspc.buf, MAX_RTP_BUFFERSIZE);
   return CURLE_OK;
 }
 
 
 /*
  * Function to check on various aspects of a connection.
  */
@@ -176,9 +174,9 @@ static CURLcode rtsp_connect(struct Curl_easy *data, bool *done)
 static CURLcode rtsp_disconnect(struct Curl_easy *data,
                                 struct connectdata *conn, bool dead)
 {
   (void) dead;
   (void) data;
-  Curl_dyn_free(&conn->proto.rtspc.buf);
+  Curl_safefree(conn->proto.rtspc.rtp_buf);
   return CURLE_OK;
 }
 
@@ -593,101 +591,123 @@ static CURLcode rtsp_do(struct Curl_easy *data, bool *done)
 static CURLcode rtsp_rtp_readwrite(struct Curl_easy *data,
                                    struct connectdata *conn,
                                    ssize_t *nread,
                                    bool *readmore) {
   struct SingleRequest *k = &data->req;
   struct rtsp_conn *rtspc = &(conn->proto.rtspc);
 
   char *rtp; /* moving pointer to rtp data */
   ssize_t rtp_dataleft; /* how much data left to parse in this round */
+  char *scratch;
   CURLcode result;
 
-  if(Curl_dyn_len(&rtspc->buf)) {
-    /* There was some leftover data the last time. Append new buffers */
-    if(Curl_dyn_addn(&rtspc->buf, k->str, *nread))
+  if(rtspc->rtp_buf) {
+    /* There was some leftover data the last time. Merge buffers */
+    char *newptr = Curl_saferealloc(rtspc->rtp_buf,
+                                    rtspc->rtp_bufsize + *nread);
+    if(!newptr) {
+      rtspc->rtp_buf = NULL;
+      rtspc->rtp_bufsize = 0;
       return CURLE_OUT_OF_MEMORY;
-    rtp = Curl_dyn_ptr(&rtspc->buf);
-    rtp_dataleft = Curl_dyn_len(&rtspc->buf);
+    }
+    rtspc->rtp_buf = newptr;
+    memcpy(rtspc->rtp_buf + rtspc->rtp_bufsize, k->str, *nread);
+    rtspc->rtp_bufsize += *nread;
+    rtp = rtspc->rtp_buf;
+    rtp_dataleft = rtspc->rtp_bufsize;
   }
   else {
     /* Just parse the request buffer directly */
     rtp = k->str;
     rtp_dataleft = *nread;
   }
 
   while((rtp_dataleft > 0) &&
         (rtp[0] == '$')) {
     if(rtp_dataleft > 4) {
       int rtp_length;
 
       /* Parse the header */
       /* The channel identifier immediately follows and is 1 byte */
       rtspc->rtp_channel = RTP_PKT_CHANNEL(rtp);
 
       /* The length is two bytes */
       rtp_length = RTP_PKT_LENGTH(rtp);
 
       if(rtp_dataleft < rtp_length + 4) {
         /* Need more - incomplete payload */
         *readmore = TRUE;
         break;
       }
       /* We have the full RTP interleaved packet
        * Write out the header including the leading '$' */
       DEBUGF(infof(data, "RTP write channel %d rtp_length %d",
-                   rtspc->rtp_channel, rtp_length));
+             rtspc->rtp_channel, rtp_length));
       result = rtp_client_write(data, &rtp[0], rtp_length + 4);
       if(result) {
         failf(data, "Got an error writing an RTP packet");
         *readmore = FALSE;
+        Curl_safefree(rtspc->rtp_buf);
+        rtspc->rtp_buf = NULL;
+        rtspc->rtp_bufsize = 0;
         return result;
       }
 
       /* Move forward in the buffer */
       rtp_dataleft -= rtp_length + 4;
       rtp += rtp_length + 4;
 
       if(data->set.rtspreq == RTSPREQ_RECEIVE) {
         /* If we are in a passive receive, give control back
          * to the app as often as we can.
          */
         k->keepon &= ~KEEP_RECV;
       }
     }
     else {
       /* Need more - incomplete header */
       *readmore = TRUE;
       break;
     }
   }
 
   if(rtp_dataleft && rtp[0] == '$') {
     DEBUGF(infof(data, "RTP Rewinding %zd %s", rtp_dataleft,
-                 *readmore ? "(READMORE)" : ""));
+          *readmore ? "(READMORE)" : ""));
 
     /* Store the incomplete RTP packet for a "rewind" */
-    Curl_dyn_reset(&rtspc->buf);
-    if(Curl_dyn_addn(&rtspc->buf, rtp, rtp_dataleft))
+    scratch = malloc(rtp_dataleft);
+    if(!scratch) {
+      Curl_safefree(rtspc->rtp_buf);
+      rtspc->rtp_buf = NULL;
+      rtspc->rtp_bufsize = 0;
       return CURLE_OUT_OF_MEMORY;
+    }
+    memcpy(scratch, rtp, rtp_dataleft);
+    Curl_safefree(rtspc->rtp_buf);
+    rtspc->rtp_buf = scratch;
+    rtspc->rtp_bufsize = rtp_dataleft;
 
     /* As far as the transfer is concerned, this data is consumed */
     *nread = 0;
     return CURLE_OK;
   }
   /* Fix up k->str to point just after the last RTP packet */
   k->str += *nread - rtp_dataleft;
 
   /* either all of the data has been read or...
    * rtp now points at the next byte to parse
    */
   if(rtp_dataleft > 0)
     DEBUGASSERT(k->str[0] == rtp[0]);
 
   DEBUGASSERT(rtp_dataleft <= *nread); /* sanity check */
 
   *nread = rtp_dataleft;
 
   /* If we get here, we have finished with the leftover/merge buffer */
-  Curl_dyn_free(&rtspc->buf);
+  Curl_safefree(rtspc->rtp_buf);
+  rtspc->rtp_buf = NULL;
+  rtspc->rtp_bufsize = 0;
 
   return CURLE_OK;
 }
diff --git a/lib/rtsp.h b/lib/rtsp.h
index 6bce41a61..6e55616b3 100644
--- a/lib/rtsp.h
+++ b/lib/rtsp.h
@@ -1,36 +1,34 @@
 #ifndef HEADER_CURL_RTSP_H
 #define HEADER_CURL_RTSP_H
 /***************************************************************************
  *                                  _   _ ____  _
  *  Project                     ___| | | |  _ \| |
  *                             / __| | | | |_) | |
  *                            | (__| |_| |  _ <| |___
  *                             \___|\___/|_| \_\_____|
  *
  * Copyright (C) Daniel Stenberg, <daniel@haxx.se>, et al.
  *
  * This software is licensed as described in the file COPYING, which
  * you should have received as part of this distribution. The terms
  * are also available at https://curl.se/docs/copyright.html.
  *
  * You may opt to use, copy, modify, merge, publish, distribute and/or sell
  * copies of the Software, and permit persons to whom the Software is
  * furnished to do so, under the terms of the COPYING file.
  *
  * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
  * KIND, either express or implied.
  *
  * SPDX-License-Identifier: curl
  *
  ***************************************************************************/
 #ifdef USE_HYPER
 #define CURL_DISABLE_RTSP 1
 #endif
 
 #ifndef CURL_DISABLE_RTSP
 
-#include "dynbuf.h"
-
 extern const struct Curl_handler Curl_handler_rtsp;
 
 CURLcode Curl_rtsp_parseheader(struct Curl_easy *data, char *header);
@@ -44,13 +42,14 @@ CURLcode Curl_rtsp_parseheader(struct Curl_easy *data, char *header);
 /*
  * RTSP Connection data
  *
  * Currently, only used for tracking incomplete RTP data reads
  */
 struct rtsp_conn {
-  struct dynbuf buf;
+  char *rtp_buf;
+  ssize_t rtp_bufsize;
   int rtp_channel;
 };
 
 /****************************************************************************
  * RTSP unique setup
  ***************************************************************************/
