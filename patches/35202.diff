commit 1c3811ba12bf924a96c916e2409a0d41c336debf
Author: David Korczynski <david@adalogics.com>
Date:   Wed Nov 24 20:25:03 2021 +0000

    tests: internal: fuzzer: extend config fuzzer
    
    Splits config fuzzer in two and adds multi-line parser in config template.
    
    Signed-off-by: David Korczynski <david@adalogics.com>

diff --git a/tests/internal/fuzzers/CMakeLists.txt b/tests/internal/fuzzers/CMakeLists.txt
index af8eb16a5..3a44b8162 100644
--- a/tests/internal/fuzzers/CMakeLists.txt
+++ b/tests/internal/fuzzers/CMakeLists.txt
@@ -1,21 +1,22 @@
 set(UNIT_TESTS_FILES
   engine_fuzzer.c
   config_fuzzer.c
+  config_random_fuzzer.c
   signv4_fuzzer.c
   flb_json_fuzzer.c
   parser_fuzzer.c
   parse_json_fuzzer.c
   parse_logfmt_fuzzer.c
   parse_ltsv_fuzzer.c
   msgpack_parse_fuzzer.c
   msgpack_to_gelf_fuzzer.c
   multiline_fuzzer.c
   pack_json_state_fuzzer.c
   http_fuzzer.c
   strp_fuzzer.c
   utils_fuzzer.c
   config_map_fuzzer.c
   record_ac_fuzzer.c
   )
 
 # Prepare list of unit tests
diff --git a/tests/internal/fuzzers/config_fuzzer.c b/tests/internal/fuzzers/config_fuzzer.c
index bf6fc0612..300fe8581 100644
--- a/tests/internal/fuzzers/config_fuzzer.c
+++ b/tests/internal/fuzzers/config_fuzzer.c
@@ -8,417 +8,405 @@
 /* A sample of configurations */
 char conf_file[] = "# Parser: no_year\n"
 "# ===============\n"
 "# the given format don't contain the Year, this is a common\n"
 "# case on old Syslog implementations.\n"
 "#\n"
 "[PARSER]\n"
 "    Name        no_year\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %b %d %H:%M:%S\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: no_year_N\n"
 "# =================\n"
 "# Just for compatibility, check a string with no year but including Nanoseconds.\n"
 "#\n"
 "[PARSER]\n"
 "    Name        no_year_N\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %b %d %H:%M:%S.%L\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: no_year_NC\n"
 "# =================\n"
 "# Just for compatibility, check a string with no year but including Nanoseconds with comma as fractional separator.\n"
 "#\n"
 "[PARSER]\n"
 "    Name        no_year_NC\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %b %d %H:%M:%S,%L\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: no_year_TZ\n"
 "# =================\n"
 "# Time string with no year and including timezone\n"
 "#\n"
 "[PARSER]\n"
 "    Name        no_year_TZ\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %b %d %H:%M:%S %z\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: no_year_N_TZ\n"
 "# ====================\n"
 "# Time string with no year, nanoseconds and timezone\n"
 "#\n"
 "[PARSER]\n"
 "    Name        no_year_N_TZ\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %b %d %H:%M:%S.%L %z\n"
 "    Time_Keep   On\n"
 "\n"
 "\n"
 "# Parser: no_year_NC_TZ\n"
 "# ====================\n"
 "# Time string with no year, nanoseconds and timezone with comma as fractional separator.\n"
 "#\n"
 "[PARSER]\n"
 "    Name        no_year_NC_TZ\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %b %d %H:%M:%S,%L %z\n"
 "    Time_Keep   On\n"
 "\n"
 "\n"
 "# Parser: default_UTC\n"
 "# ===================\n"
 "# Time string with timezone in UTC\n"
 "#\n"
 "[PARSER]\n"
 "    Name        default_UTC\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %m/%d/%Y %H:%M:%S\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: default_UTC_Z\n"
 "# =====================\n"
 "# Time string with timezone in UTC and ending Z\n"
 "#\n"
 "[PARSER]\n"
 "    Name        default_UTC_Z\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %m/%d/%Y %H:%M:%SZ\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: default_UTC_N_Z\n"
 "# =======================\n"
 "# Time string with timezone in UTC, nanoseconds and ending Z\n"
 "#\n"
 "[PARSER]\n"
 "    Name        default_UTC_N_Z\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %m/%d/%Y %H:%M:%S.%LZ\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: default_UTC_NC_Z\n"
 "# =======================\n"
 "# Time string with timezone in UTC, nanoseconds with comma as fractional separator and ending Z\n"
 "#\n"
 "[PARSER]\n"
 "    Name        default_UTC_NC_Z\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %m/%d/%Y %H:%M:%S,%LZ\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: generic_TZ\n"
 "# ==================\n"
 "# Generic date with timezone\n"
 "#\n"
 "[PARSER]\n"
 "    Name        generic_TZ\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %m/%d/%Y %H:%M:%S %z\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: generic\n"
 "# ===============\n"
 "# Generic date\n"
 "#\n"
 "[PARSER]\n"
 "    Name        generic\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %m/%d/%Y %H:%M:%S\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: generic_N\n"
 "# ===============\n"
 "# Generic date with nanoseconds\n"
 "#\n"
 "[PARSER]\n"
 "    Name        generic_N\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %m/%d/%Y %H:%M:%S.%L\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: generic_NC\n"
 "# ===============\n"
 "# Generic date with nanoseconds with comma as fractional separator\n"
 "#\n"
 "[PARSER]\n"
 "    Name        generic_NC\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %m/%d/%Y %H:%M:%S,%L\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: generic_N_TZ\n"
 "# ====================\n"
 "# Generic date with nanoseconds and timezone\n"
 "#\n"
 "[PARSER]\n"
 "    Name        generic_N_TZ\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %m/%d/%Y %H:%M:%S.%L %z\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: generic_NC_TZ\n"
 "# ====================\n"
 "# Generic date with nanoseconds with comma as fractional separator and timezone\n"
 "#\n"
 "[PARSER]\n"
 "    Name        generic_NC_TZ\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %m/%d/%Y %H:%M:%S,%L %z\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: apache_error\n"
 "# ====================\n"
 "# Apache error log time format\n"
 "#\n"
 "[PARSER]\n"
 "    Name        apache_error\n"
 "    Format      json\n"
 "    Time_Key    time\n"
 "    Time_Format %a %b %d %H:%M:%S.%L %Y\n"
 "    Time_Keep   On\n"
 "# Parser: mysql_quoted_stuff\n"
 "# ====================\n"
 "# Apache error log time format\n"
 "#\n"
 "[PARSER]\n"
 "    Name        mysql_quoted_stuff\n"
 "    Format      regex\n"
 "    Regex       ^(?<time>.*?),(?<key001>.*)$\n"
 "    Time_Key    time\n"
 "    Time_Format %Y-%M-%S %H:%M:%S\n"
 "    Time_Keep   On\n"
 "    Decode_Field_As   mysql_quoted key001\n"
 "# Parser: REGEX_generic_NC_TZ\n"
 "# ====================\n"
 "# Generic date with nanoseconds with comma as fractional separator and timezone\n"
 "#\n"
 "[PARSER]\n"
 "    Name        REGEX_generic_NC_TZ\n"
 "    Format      regex\n"
 "    Regex       ^(?<key001>[^ ]*) (?<key002>[^ ]*) (?<time>.+)$\n"
 "    Time_Key    time\n"
 "    Time_Format %m/%d/%Y %H:%M:%S,%L %z\n"
 "    Time_Keep   On\n"
 "\n"
 "# Parser: REGEX_apache_error\n"
 "# ====================\n"
 "# Apache error log time format\n"
 "#\n"
 "[PARSER]\n"
 "    Name        REGEX_apache_error\n"
 "    Format      regex\n"
 "    Regex       ^(?<key001>[^ ]*) (?<key002>[^ ]*) (?<time>.+)$\n"
 "    Time_Key    time\n"
 "    Time_Format %a %b %d %H:%M:%S.%L %Y\n"
 "    Time_Keep   On\n"
 "\n"
 "\n"
 "\n"
 "# Parser: REGEX_mysql_quoted_stuff\n"
 "# ====================\n"
 "# Apache error log time format\n"
 "#\n"
 "[PARSER]\n"
 "    Name        REGEX_mysql_quoted_stuff\n"
 "    Format      regex\n"
 "    Regex       ^(?<time>.*?),(?<key001>.*)$\n"
 "    Time_Key    time\n"
 "    Time_Format %Y-%M-%S %H:%M:%S\n"
 "    Time_Keep   On\n"
 "    Decode_Field_As   mysql_quoted key001\n"
 "\n"
 "\n"
 "\n"
 "# Parser: REGEX2_mysql_quoted_stuff\n"
 "# ====================\n"
 "# Apache error log time format\n"
 "#\n"
 "[PARSER]\n"
 "    Name        REGEX2_mysql_quoted_stuff\n"
 "    Format      logfmt\n"
 "    Regex       ^(?<time>.*?),(?<key001>.*)$\n"
 "    Time_Key    time\n"
 "    Time_Format %Y-%M-%S %H:%M:%S\n"
 "    Time_Keep   On\n"
 "    Decode_Field_As   mysql_quoted key001\n"
 "    Types A1:integer A2:string A3:bool A4:float A5:hex\n"
 "\n"
 "\n"
 "\n"
 "# Parser: REGEX3_mysql_quoted_stuff\n"
 "# ====================\n"
 "# Apache error log time format\n"
 "#\n"
 "[PARSER]\n"
 "    Name        REGEX3_mysql_quoted_stuff\n"
 "    Format      json\n"
 "    Regex       ^(?<time>.*?),(?<key001>.*)$\n"
 "    Time_Key    time\n"
 "    Time_Format %Y-%M-%S %H:%M:%S\n"
 "    Time_Keep   On\n"
 "    Decode_Field_As   escaped_utf8 key001\n"
 "    Types A1:integer A2:string A3:bool A4:float A5:hex\n"
 "\n"
 "\n"
 "\n"
 "# Parser: REGEX33_mysql_quoted_stuff\n"
 "# ====================\n"
 "# Apache error log time format\n"
 "#\n"
 "[PARSER]\n"
 "    Name        REGEX33_mysql_quoted_stuff\n"
 "    Format      json\n"
 "    Regex       ^(?<time>.*?),(?<key001>.*)$\n"
 "    Time_Key    time\n"
 "    Time_Format %Y-%M-%S %H:%M:%S\n"
 "    Time_Keep   On\n"
 "    Decode_Field_As   escaped key001\n"
 "    Types A1:integer A2:string A3:bool A4:float A5:hex\n"
 "\n"
 "\n"
 "\n"
 "# Parser: REGEX4_mysql_quoted_stuff\n"
 "# ====================\n"
 "# Apache error log time format\n"
 "#\n"
 "[PARSER]\n"
 "    Name        REGEX4_mysql_quoted_stuff\n"
 "    Format      json\n"
 "    Regex       ^(?<time>.*?),(?<key001>.*)$\n"
 "    Time_Key    time\n"
 "    Time_Format %Y-%M-%S %H:%M:%S\n"
 "    Time_Keep   On\n"
 "    Decode_Field_As   json key001\n"
-"    Types A1:integer A2:string A3:bool A4:float A5:hex\n";
-
+"    Types A1:integer A2:string A3:bool A4:float A5:hex\n"
+"[MULTILINE_PARSER]\n"
+"    name          exception_test\n"
+"    type          regex\n"
+"    flush_timeout 1000\n"
+"    rule          \"start_state\"  \"/(Dec \d+ \d+\:\d+\:\d+)(.*)/\" \"cont\"\n"
+"    rule          \"cont\" \"/^\s+at.*/\" \"cont\"\n";
 
 
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
     /* Limit the size of the config files to 32KB. */
     if (size > 32768) {
         return 0;
     }
 
     /* Write the config file to a location we know OSS-Fuzz has */
     char filename[256];
     sprintf(filename, "/tmp/libfuzzer.%d", getpid());
     FILE *fp = fopen(filename, "wb");
     if (!fp) {
         return 0;
     }
     fwrite(conf_file, strlen(conf_file), 1, fp);
     fclose(fp);
 
 
     /* Now parse random data based on the config files */
     struct flb_config *config = NULL;
     config = flb_config_init();
     int ret = flb_parser_conf_file(filename, config);
     if (ret == 0) {
         struct mk_list *head = NULL;
         mk_list_foreach(head, &config->parsers) {
             size_t out_size;
             char *out_buf = NULL;
             struct flb_parser *parser = NULL;
             struct flb_time out_time;
             parser = mk_list_entry(head, struct flb_parser, _head);
             flb_parser_do(parser, data, size, &out_buf,
                           &out_size, &out_time);
             if (out_buf != NULL) {
                 free(out_buf);
             }
         }
     }
     flb_parser_exit(config);
     flb_config_exit(config);
 
     if (size > 100) {
         /* Now let's do a second run where we also call flb_config_set_property */
         config = flb_config_init();
         ret = flb_parser_conf_file(filename, config);
         char *key_1 = get_null_terminated(15, &data, &size);
         char *val_1 = get_null_terminated(15, &data, &size);
         char *key_2 = get_null_terminated(15, &data, &size);
         char *val_2 = get_null_terminated(15, &data, &size);
         char *progname = get_null_terminated(15, &data, &size);
 
         flb_config_set_property(config, key_1, val_1);
         flb_config_set_property(config, key_2, val_2);
         flb_config_set_program_name(config, progname);
         set_log_level_from_env(config);
 
         struct mk_list prop;
         flb_kv_init(&prop);
         flb_kv_item_create(&prop, key_1, val_1);
         flb_config_prop_get(progname, &prop);
         flb_slist_entry_get(&prop, (int)data[0]);
         flb_slist_dump(&prop);
         
         if (ret == 0) {
             struct mk_list *head = NULL;
             mk_list_foreach(head, &config->parsers) {
                 size_t out_size;
                 char *out_buf = NULL;
                 struct flb_parser *parser = NULL;
                 struct flb_time out_time;
                 
                 parser = mk_list_entry(head, struct flb_parser, _head);
                 flb_parser_do(parser, data, size, &out_buf,
                               &out_size, &out_time);
                 if (out_buf != NULL) {
                     free(out_buf);
                 }
             }
         }
         flb_parser_exit(config);
         flb_config_exit(config);
         flb_free(key_1);
         flb_free(val_1);
         flb_free(key_2);
         flb_free(val_2);
         flb_free(progname);
         flb_kv_release(&prop);
     }
 
     /* clean up the file */
     unlink(filename);
 
-    /* finally try to parser a random file */
-    fp = fopen(filename, "wb");
-    if (!fp) {
-        return 0;
-    }
-    fwrite(data, size, 1, fp);
-    fclose(fp);
-
-    config = NULL;
-    config = flb_config_init();
-    flb_parser_conf_file(filename, config);
-    flb_parser_exit(config);
-    flb_config_exit(config);
-
-    /* Cleanup written config file */
-    unlink(filename);
-
     return 0;
 }
diff --git a/tests/internal/fuzzers/config_random_fuzzer.c b/tests/internal/fuzzers/config_random_fuzzer.c
new file mode 100644
index 000000000..df635b6bf
--- /dev/null
+++ b/tests/internal/fuzzers/config_random_fuzzer.c
@@ -0,0 +1,53 @@
+/*  Fluent Bit
+ *  ==========
+ *  Copyright (C) 2019-2021 The Fluent Bit Authors
+ *  Copyright (C) 2015-2018 Treasure Data Inc.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+#include <stdint.h>
+#include <string.h>
+#include <stdlib.h>
+#include <fluent-bit/flb_parser.h>
+#include <fluent-bit/flb_slist.h>
+#include "flb_fuzz_header.h"
+
+int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
+{
+    /* Limit the size of the config files to 32KB. */
+    if (size > 32768) {
+        return 0;
+    }
+
+    /* Write the config file to a location we know OSS-Fuzz has */
+    char filename[256];
+    sprintf(filename, "/tmp/libfuzzer.%d", getpid());
+    FILE *fp = fopen(filename, "wb");
+    if (!fp) {
+        return 0;
+    }
+    fwrite(data, size, 1, fp);
+    fclose(fp);
+
+    /* Now parse a random config file */
+    struct flb_config *config = NULL;
+    config = flb_config_init();
+    flb_parser_conf_file(filename, config);
+    flb_parser_exit(config);
+    flb_config_exit(config);
+
+    /* Cleanup written config file */
+    unlink(filename);
+
+    return 0;
+}
