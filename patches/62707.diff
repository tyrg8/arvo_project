commit 3c8329953cd596b4f5b2163910be223fb6a52e3c
Author: Shashank Pathmudi <shashank.pathmudi@ittiam.com>
Date:   Fri Sep 29 17:43:26 2023 +0530

    Fix for index-out-of-bounds in ixheaacd_res_ctns_apply
    
    These changes handle the index-out-of-bounds runtime error
    reported when the value of residual sampling frequency index
    is greater than max residual sampling frequency index.
    
    Bug: ossFuzz:62707
    Test: poc in bug

diff --git a/decoder/ixheaacd_config.h b/decoder/ixheaacd_config.h
index 59bacf0..5c7bd59 100644
--- a/decoder/ixheaacd_config.h
+++ b/decoder/ixheaacd_config.h
@@ -68,6 +68,8 @@
   (MAX_OUTPUT_CHANNELS * (1 << MAX_ARBITRARY_TREE_LEVELS))
 #define MAX_ARBITRARY_TREE_INDEX ((1 << (MAX_ARBITRARY_TREE_LEVELS + 1)) - 1)
 
+#define MAX_RES_SAMP_FREQ_IDX 11
+
 typedef UWORD8 UINT8;
 typedef UWORD32 UINT32;
 
diff --git a/decoder/ixheaacd_ld_mps_config.c b/decoder/ixheaacd_ld_mps_config.c
index 346c028..850b128 100644
--- a/decoder/ixheaacd_ld_mps_config.c
+++ b/decoder/ixheaacd_ld_mps_config.c
@@ -51,131 +51,137 @@ static ia_ld_mps_dec_tree_properties_struct ixheaacd_tree_property_table[] = {
 static IA_ERRORCODE ixheaacd_ld_spatial_extension_config(
     ia_bit_buf_struct *it_bit_buff, ia_usac_dec_mps_config_struct *config,
     WORD32 bits_available) {
   WORD32 j, ch, idx, tmp, tmp_open, sac_ext_len, bits_read, n_fill_bits;
   UWORD32 i;
   WORD32 ba = bits_available;
 
   config->sac_ext_cnt = 0;
 
   tmp = it_bit_buff->cnt_bits;
 
   while (ba >= 8) {
     if (config->sac_ext_cnt >= MAX_NUM_EXT_TYPES) return IA_FATAL_ERROR;
 
     config->bs_sac_ext_type[config->sac_ext_cnt] =
         ixheaacd_read_bits_buf(it_bit_buff, 4);
     ba -= 4;
 
     sac_ext_len = ixheaacd_read_bits_buf(it_bit_buff, 4);
     ba -= 4;
 
     if ((ba >= 6) && (sac_ext_len > 0)) {
       if (sac_ext_len == 15) {
         sac_ext_len += ixheaacd_read_bits_buf(it_bit_buff, 8);
         ba -= 8;
         if (sac_ext_len == 15 + 255) {
           sac_ext_len += ixheaacd_read_bits_buf(it_bit_buff, 16);
           ba -= 16;
         }
       }
 
       switch (config->bs_sac_ext_type[config->sac_ext_cnt]) {
         case 0:
           config->bs_residual_coding = 1;
 
           config->bs_residual_sampling_freq_index =
               ixheaacd_read_bits_buf(it_bit_buff, 4);
+          if (config->bs_residual_sampling_freq_index > MAX_RES_SAMP_FREQ_IDX) {
+            return IA_FATAL_ERROR;
+          }
           config->bs_residual_frames_per_spatial_frame =
               ixheaacd_read_bits_buf(it_bit_buff, 2);
 
           if ((config->num_ott_boxes + config->num_ttt_boxes) >
               MAX_RESIDUAL_CHANNELS)
             return IA_FATAL_ERROR;
           for (j = 0; j < config->num_ott_boxes + config->num_ttt_boxes; j++) {
             config->bs_residual_present[j] =
                 ixheaacd_read_bits_buf(it_bit_buff, 1);
             if (config->bs_residual_present[j]) {
               config->bs_residual_bands_ld_mps[j] =
                   ixheaacd_read_bits_buf(it_bit_buff, 5);
               if (config->bs_residual_bands_ld_mps[j] > MAX_PARAMETER_BANDS)
               {
                 return IA_FATAL_ERROR;
               }
             }
           }
           break;
 
         case 1:
           config->bs_arbitrary_downmix = 2;
 
           config->bs_arbitrary_downmix_residual_sampling_freq_index =
               ixheaacd_read_bits_buf(it_bit_buff, 4);
+          if (config->bs_arbitrary_downmix_residual_sampling_freq_index > MAX_RES_SAMP_FREQ_IDX) {
+            return IA_FATAL_ERROR;
+          }
           config->bs_arbitrary_downmix_residual_frames_per_spatial_frame =
               ixheaacd_read_bits_buf(it_bit_buff, 2);
           config->bs_arbitrary_downmix_residual_bands =
               ixheaacd_read_bits_buf(it_bit_buff, 5);
 
           break;
 
         case 2:
           config->num_out_chan_AT = 0;
           config->num_ott_boxes_AT = 0;
           if (config->num_output_channels > MAX_OUTPUT_CHANNELS)
             return IA_FATAL_ERROR;
           for (ch = 0; ch < config->num_output_channels; ch++) {
             tmp_open = 1;
             idx = 0;
             while ((tmp_open > 0) && (idx < MAX_ARBITRARY_TREE_INDEX)) {
               config->bs_ott_box_present_AT[ch][idx] =
                   ixheaacd_read_bits_buf(it_bit_buff, 1);
               if (config->bs_ott_box_present_AT[ch][idx]) {
                 config->num_ott_boxes_AT++;
                 tmp_open++;
               } else {
                 config->num_out_chan_AT++;
                 tmp_open--;
               }
               idx++;
             }
           }
 
           for (i = 0; i < config->num_ott_boxes_AT; i++) {
             config->bs_ott_default_cld_AT[i] =
                 ixheaacd_read_bits_buf(it_bit_buff, 1);
             config->bs_ott_mode_lfe_AT[i] =
                 ixheaacd_read_bits_buf(it_bit_buff, 1);
             if (config->bs_ott_mode_lfe_AT[i]) {
               config->bs_ott_bands_AT[i] =
                   ixheaacd_read_bits_buf(it_bit_buff, 5);
             } else {
               config->bs_ott_bands_AT[i] = ixheaacd_freq_res_table[config->bs_freq_res];
             }
           }
 
           for (i = 0; i < config->num_out_chan_AT; i++) {
             config->bs_output_channel_pos_AT[i] =
                 ixheaacd_read_bits_buf(it_bit_buff, 5);
           }
 
           break;
 
         default:;
       }
     }
 
     bits_read = tmp - it_bit_buff->cnt_bits;
     n_fill_bits = 8 * sac_ext_len - bits_read;
 
     while (n_fill_bits > 7) {
       ixheaacd_read_bits_buf(it_bit_buff, 8);
       n_fill_bits -= 8;
     }
     if (n_fill_bits > 0) {
       ixheaacd_read_bits_buf(it_bit_buff, n_fill_bits);
     }
 
     ba -= 8 * sac_ext_len;
     config->sac_ext_cnt++;
   }
   return IA_NO_ERROR;
 }
diff --git a/decoder/ixheaacd_mps_bitdec.c b/decoder/ixheaacd_mps_bitdec.c
index a8aa783..4d9e1ce 100644
--- a/decoder/ixheaacd_mps_bitdec.c
+++ b/decoder/ixheaacd_mps_bitdec.c
@@ -74,123 +74,129 @@ static VOID ixheaacd_mps_check_index_bounds(
 static IA_ERRORCODE ixheaacd_parse_extension_config(
     ia_mps_spatial_bs_config_struct *config, WORD32 num_ott_boxes, WORD32 num_ttt_boxes,
     WORD32 num_out_chan, WORD32 bits_available, ia_bit_buf_struct *it_bit_buff,
     ia_mps_dec_bitdec_tables_struct *ixheaacd_mps_dec_bitdec_tables) {
   WORD32 i, ch, idx, tmp, tmp_open, sac_ext_len, bits_read, n_fill_bits, temp;
   WORD32 ba = bits_available;
 
   config->sac_ext_cnt = 0;
 
   while (ba >= 8) {
     ba -= 8;
     temp = ixheaacd_read_bits_buf(it_bit_buff, 8);
     config->bs_sac_ext_type[config->sac_ext_cnt] = (temp >> 4) & FOUR_BIT_MASK;
     sac_ext_len = temp & FOUR_BIT_MASK;
     if (sac_ext_len == 15) {
       sac_ext_len += ixheaacd_read_bits_buf(it_bit_buff, 8);
       ba -= 8;
       if (sac_ext_len == 15 + 255) {
         sac_ext_len += ixheaacd_read_bits_buf(it_bit_buff, 16);
         ba -= 16;
       }
     }
 
     tmp = (WORD32)(((it_bit_buff->ptr_read_next - it_bit_buff->ptr_bit_buf_base + 1) << 3) -
                    (it_bit_buff->bit_pos + 1));
 
     switch (config->bs_sac_ext_type[config->sac_ext_cnt]) {
       case EXT_TYPE_0:
         config->bs_residual_coding = 1;
         temp = ixheaacd_read_bits_buf(it_bit_buff, 6);
         config->bs_residual_sampling_freq_index = (temp >> 2) & FOUR_BIT_MASK;
+        if (config->bs_residual_sampling_freq_index > MAX_RES_SAMP_FREQ_IDX) {
+          return IA_FATAL_ERROR;
+        }
         config->bs_residual_frames_per_spatial_frame = temp & TWO_BIT_MASK;
 
         for (i = 0; i < num_ott_boxes + num_ttt_boxes; i++) {
           config->bs_residual_present[i] = ixheaacd_read_bits_buf(it_bit_buff, 1);
           if (config->bs_residual_present[i]) {
             config->bs_residual_bands[i] = ixheaacd_read_bits_buf(it_bit_buff, 5);
             if (config->bs_residual_bands[i] > MAX_PARAMETER_BANDS)
             {
               return IA_FATAL_ERROR;
             }
           }
         }
         break;
 
       case EXT_TYPE_1:
         config->bs_arbitrary_downmix = 2;
 
         temp = ixheaacd_read_bits_buf(it_bit_buff, 11);
         config->bs_arbitrary_downmix_residual_sampling_freq_index = (temp >> 7) & FOUR_BIT_MASK;
+        if (config->bs_arbitrary_downmix_residual_sampling_freq_index > MAX_RES_SAMP_FREQ_IDX) {
+          return IA_FATAL_ERROR;
+        }
         config->bs_arbitrary_downmix_residual_frames_per_spatial_frame =
             (temp >> 5) & TWO_BIT_MASK;
         config->bs_arbitrary_downmix_residual_bands = temp & FIVE_BIT_MASK;
 
         break;
 
       case EXT_TYPE_2:
         config->arbitrary_tree = 1;
         config->num_out_chan_at = 0;
         config->num_ott_boxes_at = 0;
         for (ch = 0; ch < num_out_chan; ch++) {
           tmp_open = 1;
           idx = 0;
           while (tmp_open > 0) {
             config->bs_ott_box_present_at[ch][idx] = ixheaacd_read_bits_buf(it_bit_buff, 1);
             if (config->bs_ott_box_present_at[ch][idx]) {
               config->num_ott_boxes_at++;
               tmp_open++;
             } else {
               config->num_out_chan_at++;
               tmp_open--;
             }
             if (config->num_ott_boxes_at >= 56) return IA_FATAL_ERROR;
             if (config->num_out_chan_at > MAX_OUTPUT_CHANNELS_AT_MPS) return IA_FATAL_ERROR;
             idx++;
             if (idx >= MAX_ARBITRARY_TREE_INDEX) return IA_FATAL_ERROR;
           }
         }
 
         for (i = 0; i < config->num_ott_boxes_at; i++) {
           temp = ixheaacd_read_bits_buf(it_bit_buff, 2);
           config->bs_ott_default_cld_at[i] = (temp >> 1) & ONE_BIT_MASK;
           config->bs_ott_mode_lfe_at[i] = temp & ONE_BIT_MASK;
           if (config->bs_ott_mode_lfe_at[i]) {
             config->bs_ott_bands_at[i] = ixheaacd_read_bits_buf(it_bit_buff, 5);
             if (config->bs_ott_bands_at[i] > MAX_PARAMETER_BANDS) return IA_FATAL_ERROR;
           } else {
             config->bs_ott_bands_at[i] =
                 ixheaacd_mps_dec_bitdec_tables->freq_res_table[config->bs_freq_res];
           }
         }
 
         for (i = 0; i < config->num_out_chan_at; i++) {
           config->bs_output_channel_pos_at[i] = ixheaacd_read_bits_buf(it_bit_buff, 5);
         }
 
         break;
 
       default:
         return IA_XHEAAC_MPS_DEC_EXE_NONFATAL_INVALID_EXTENSION_TYPE;
     }
 
     bits_read = (WORD32)(((it_bit_buff->ptr_read_next - it_bit_buff->ptr_bit_buf_base + 1) << 3) -
                          (it_bit_buff->bit_pos + 1) - tmp);
     n_fill_bits = 8 * sac_ext_len - bits_read;
 
     while (n_fill_bits > 7) {
       ixheaacd_read_bits_buf(it_bit_buff, 8);
       n_fill_bits -= 8;
     }
     if (n_fill_bits > 0) {
       ixheaacd_read_bits_buf(it_bit_buff, n_fill_bits);
     }
 
     ba -= 8 * sac_ext_len;
     config->sac_ext_cnt++;
     if (config->sac_ext_cnt >= MAX_NUM_EXT_TYPES) {
       return IA_FATAL_ERROR;
     }
   }
 
   return IA_NO_ERROR;
 }
