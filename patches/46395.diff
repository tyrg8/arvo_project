commit 2dc319b1b1610e4c8ae95b8ca47b46926cd41ce1
Author: John Cupitt <jcupitt@gmail.com>
Date:   Tue Apr 5 08:34:45 2022 +0100

    Revert "stop JPEG load after 20 warnings"
    
    This reverts commit 89bd46d1c4e0465974b886ef5b5021e988f111a2.

diff --git a/libvips/foreign/jpeg2vips.c b/libvips/foreign/jpeg2vips.c
index e3f69ef60..067d4efcd 100644
--- a/libvips/foreign/jpeg2vips.c
+++ b/libvips/foreign/jpeg2vips.c
@@ -476,282 +476,276 @@ static int
 read_jpeg_header( ReadJpeg *jpeg, VipsImage *out )
 {
 	struct jpeg_decompress_struct *cinfo = &jpeg->cinfo;
 
 	jpeg_saved_marker_ptr p;
 	VipsInterpretation interpretation;
 	double xres, yres;
 
 	/* Capture app2 sections here for assembly.
 	 */
 	void *app2_data[MAX_APP2_SECTIONS] = { 0 };
 	size_t app2_data_length[MAX_APP2_SECTIONS] = { 0 };
 	size_t data_length;
 	int i;
 
-	/* Trace level 3 means emit warning messages as they happen. This
-	 * lets us spot files with crazy numbers of warnings early and
-	 * prevents some DoS attacks.
-	 */
-	jpeg->eman.pub.trace_level = 3;
-
 	/* Read JPEG header. libjpeg will set out_color_space sanely for us 
 	 * for YUV YCCK etc.
 	 */
 	jpeg_read_header( cinfo, TRUE );
 	cinfo->scale_denom = jpeg->shrink;
 	cinfo->scale_num = 1;
 	jpeg_calc_output_dimensions( cinfo );
 
 	jpeg->invert_pels = FALSE;
 	switch( cinfo->out_color_space ) {
 	case JCS_GRAYSCALE:
 		interpretation = VIPS_INTERPRETATION_B_W;
 		break;
 
 	case JCS_CMYK:
 		interpretation = VIPS_INTERPRETATION_CMYK;
 
 		/* CMYKs are almost always returned inverted, but see below.
 		 */
 		jpeg->invert_pels = TRUE;
 		break;
 
 	case JCS_RGB:
 	default:
 		interpretation = VIPS_INTERPRETATION_sRGB;
 		break;
 	}
 
 #ifdef DEBUG
 	if( cinfo->saw_JFIF_marker )
 		printf( "read_jpeg_header: jfif _density %d, %d, unit %d\n",
 			cinfo->X_density, cinfo->Y_density,
 			cinfo->density_unit );
 #endif /*DEBUG*/
 
 	/* Get the jfif resolution. exif may overwrite this later. Default to
 	 * 72dpi (as EXIF does).
 	 */
 	xres = 72.0 / 25.4;
 	yres = 72.0 / 25.4;
 	if( cinfo->saw_JFIF_marker &&
 		cinfo->X_density != 1U && 
 		cinfo->Y_density != 1U ) {
 		switch( cinfo->density_unit ) {
 		case 0:
 			/* X_density / Y_density gives the pixel aspect ratio.
 			 * Leave xres, but adjust yres.
 			 */
 			if( cinfo->Y_density > 0 )
 				yres = xres * cinfo->X_density / 
 					cinfo->Y_density;
 			break;
 
 		case 1:
 			/* Pixels per inch.
 			 */
 			xres = cinfo->X_density / 25.4;
 			yres = cinfo->Y_density / 25.4;
 			vips_image_set_string( out, 
 				VIPS_META_RESOLUTION_UNIT, "in" );
 			break;
 
 		case 2:
 			/* Pixels per cm.
 			 */
 			xres = cinfo->X_density / 10.0;
 			yres = cinfo->Y_density / 10.0;
 			vips_image_set_string( out, 
 				VIPS_META_RESOLUTION_UNIT, "cm" );
 			break;
 
 		default:
 			g_warning( "%s", _( "unknown JFIF resolution unit" ) );
 			break;
 		}
 
 #ifdef DEBUG
 		printf( "read_jpeg_header: seen jfif resolution %g, %g p/mm\n",
 			       xres, yres );
 #endif /*DEBUG*/
 	}
 
 	/* Set VIPS header.
 	 */
 	vips_image_init_fields( out,
 		cinfo->output_width, cinfo->output_height,
 		cinfo->output_components,
 		VIPS_FORMAT_UCHAR, VIPS_CODING_NONE,
 		interpretation,
 		xres, yres );
 
 	VIPS_SETSTR( out->filename, 
 		vips_connection_filename( VIPS_CONNECTION( jpeg->source ) ) );
 
 	if( vips_image_pipelinev( out, VIPS_DEMAND_STYLE_FATSTRIP, NULL ) )
 		return( -1 );
 
 	/* cinfo->output_width and cinfo->output_height round up with
 	 * shrink-on-load. For example, if the image is 1801 pixels across and
 	 * we shrink by 4, the output will be 450.25 pixels across, 
 	 * cinfo->output_width with be 451, and libjpeg will write a black
 	 * column of pixels down the right.
 	 *
 	 * We must strictly round down, since we don't want fractional pixels
 	 * along the bottom and right.
 	 */
 	jpeg->output_width = cinfo->image_width / jpeg->shrink;
 	jpeg->output_height = cinfo->image_height / jpeg->shrink;
 
 	/* Interlaced jpegs need lots of memory to read, so our caller needs
 	 * to know.
 	 */
 	(void) vips_image_set_int( out, "jpeg-multiscan", 
 		jpeg_has_multiple_scans( cinfo ) );
 
 	/* 8.7 adds this for PNG as well, so we have a new format-neutral name.
 	 */
 	if( jpeg_has_multiple_scans( cinfo ) )
 		vips_image_set_int( out, "interlaced", 1 ); 
 
 	(void) vips_image_set_string( out, "jpeg-chroma-subsample", 
 		find_chroma_subsample( cinfo ) );
 
 	/* Look for EXIF and ICC profile.
 	 */
 	for( p = cinfo->marker_list; p; p = p->next ) {
 #ifdef DEBUG
 {
 		printf( "read_jpeg_header: seen %u bytes of APP%d\n",
 			p->data_length,
 			p->marker - JPEG_APP0 );
 
 		for( i = 0; i < 10; i++ ) 
 			printf( "\t%d) '%c' (%d)\n", 
 				i, p->data[i], p->data[i] );
 }
 #endif /*DEBUG*/
 
 		switch( p->marker ) {
 		case JPEG_APP0 + 1:
 			/* Possible EXIF or XMP data.
 			 */
 			if( p->data_length > 4 &&
 				vips_isprefix( "Exif", (char *) p->data ) &&
 				attach_blob( out, VIPS_META_EXIF_NAME, 
 					p->data, p->data_length ) )
 				return( -1 );
 
 			if( p->data_length > 4 &&
 				vips_isprefix( "http", (char *) p->data ) &&
 				attach_xmp_blob( out, 
 					p->data, p->data_length ) )
 				return( -1 );
 
 			break;
 
 		case JPEG_APP0 + 2:
 			/* Possible ICC profile.
 			 */
 			if( p->data_length > 14 &&
 				vips_isprefix( "ICC_PROFILE", 
 					(char *) p->data ) ) {
 				/* cur_marker numbers from 1, according to
 				 * spec.
 				 */
 				int cur_marker = p->data[12] - 1;
 
 				if( cur_marker >= 0 &&
 					cur_marker < MAX_APP2_SECTIONS ) {
 					app2_data[cur_marker] = p->data + 14;
 					app2_data_length[cur_marker] = 
 						p->data_length - 14;
 				}
 			}
 			break;
 
 		case JPEG_APP0 + 13:
 			/* Possible IPTC data block.
 			 */
 			if( p->data_length > 5 &&
 				vips_isprefix( "Photo", (char *) p->data ) ) {
 				if( attach_blob( out, VIPS_META_IPTC_NAME,
 					p->data, p->data_length ) )
 					return( -1 );
 
 				/* Older versions of libvips used this misspelt
 				 * name :-( attach under this name too for
 				 * compatibility.
 				 */
 				if( attach_blob( out, "ipct-data",
 					p->data, p->data_length ) )
 					return( -1 );
 			}
 			break;
 
 		case JPEG_APP0 + 14:
 			/* Adobe block. There's a lot of confusion about
 			 * whether or not CMYK jpg images are inverted. For
 			 * the images we have, it seems they should always
 			 * invert.
 			 *
 			 * See: https://sno.phy.queensu.ca/~phil/exiftool/\
 			 * 	TagNames/JPEG.html#Adobe
 			 *
 			 * data[11] == 0 - unknown
 			 * data[11] == 1 - YCbCr
 			 * data[11] == 2 - YCCK
 			 *
 			 * Leave this code here in case we come up with a
 			 * better rule.
 			 */
 			if( p->data_length >= 12 &&
 				vips_isprefix( "Adobe", (char *) p->data ) ) {
 				if( p->data[11] == 0 ) {
 #ifdef DEBUG
 					printf( "complete Adobe block, not YCCK image\n" );
 #endif /*DEBUG*/
 					//jpeg->invert_pels = FALSE;
 				}
 			}
 			break;
 
 		default:
 #ifdef DEBUG
 			printf( "read_jpeg_header: "
 				"ignoring %u byte APP%d block\n", 
 				p->data_length, p->marker - JPEG_APP0 );
 #endif /*DEBUG*/
 			break;
 		}
 	}
 
 	/* Assemble ICC sections.
 	 */
 	data_length = 0;
 	for( i = 0; i < MAX_APP2_SECTIONS && app2_data[i]; i++ )
 		data_length += app2_data_length[i];
 	if( data_length ) {
 		unsigned char *data;
 		int p;
 
 #ifdef DEBUG
 		printf( "read_jpeg_header: assembled %zd byte ICC profile\n",
 			data_length );
 #endif /*DEBUG*/
 
 		if( !(data = vips_malloc( NULL, data_length )) ) 
 			return( -1 );
 
 		p = 0;
 		for( i = 0; i < MAX_APP2_SECTIONS && app2_data[i]; i++ ) {
 			memcpy( data + p, app2_data[i], app2_data_length[i] );
 			p += app2_data_length[i];
 		}
 
 		vips_image_set_blob( out, VIPS_META_ICC_NAME, 
 			(VipsCallbackFn) vips_area_free_cb, data, data_length );
 	}
 
 	return( 0 );
 }
diff --git a/libvips/foreign/vips2jpeg.c b/libvips/foreign/vips2jpeg.c
index bfe99f4fe..56e6617cd 100644
--- a/libvips/foreign/vips2jpeg.c
+++ b/libvips/foreign/vips2jpeg.c
@@ -165,35 +165,21 @@
 void
 vips__new_output_message( j_common_ptr cinfo )
 {
-	/* Some DoS attacks use jpg files with thousands of warnings. Try to
-	 * limit the effect these have.
-	 */
-	if( cinfo->err->num_warnings >= 20 ) {
-		if( cinfo->err->num_warnings == 20 ) {
-			vips_error( "VipsJpeg", 
-				"%s", _( "too many warnings" ) );
-		}
-
-		jpeg_abort( cinfo );
-	}
-	else {
-		char buffer[JMSG_LENGTH_MAX];
+	char buffer[JMSG_LENGTH_MAX];
 
-		(*cinfo->err->format_message)( cinfo, buffer );
-		vips_error( "VipsJpeg", _( "%s" ), buffer );
+	(*cinfo->err->format_message)( cinfo, buffer );
+	vips_error( "VipsJpeg", _( "%s" ), buffer );
 
 #ifdef DEBUG
-		printf( "vips__new_output_message: \"%s\"\n", buffer );
+	printf( "vips__new_output_message: \"%s\"\n", buffer );
 #endif /*DEBUG*/
 
-		/* This is run for things like file truncated. Signal 
-		 * invalidate to force this op out of cache. 
-		 */
-		if( cinfo->client_data )
-			vips_foreign_load_invalidate( 
-				VIPS_IMAGE( cinfo->client_data ) );
-	}
+	/* This is run for things like file truncated. Signal invalidate to
+	 * force this op out of cache. 
+	 */
+        if( cinfo->client_data )
+		vips_foreign_load_invalidate( VIPS_IMAGE( cinfo->client_data ) );
 }
 
 /* New error_exit handler.
  */
