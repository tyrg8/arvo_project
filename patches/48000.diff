commit 367c3ad2ef2c10cb29602f72163e7fb23c3f5827
Author: Veronika Hanulikova <vhanulik@redhat.com>
Date:   Thu Jun 30 13:42:29 2022 +0200

    pkcs15-myeid: Path buffer overflow
    
    Thanks oss-fuzz
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=47655
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=47769
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48000

diff --git a/src/pkcs15init/pkcs15-myeid.c b/src/pkcs15init/pkcs15-myeid.c
index 75652f6e..6105c8b8 100644
--- a/src/pkcs15init/pkcs15-myeid.c
+++ b/src/pkcs15init/pkcs15-myeid.c
@@ -372,63 +372,67 @@ static int
 myeid_new_file(sc_profile_t *profile, sc_card_t *card,
 		unsigned int type, unsigned int num,
 		sc_file_t **out) {
 	sc_file_t *file;
 	sc_path_t *p;
 	char name[64];
 	const char *tag = NULL;
 	int r;
 
 	LOG_FUNC_CALLED(card->ctx);
 	switch (type) {
 	case SC_PKCS15_TYPE_PRKEY_RSA:
 	case SC_PKCS15_TYPE_PRKEY_EC:
 		tag = "private-key";
 		break;
 	case SC_PKCS15_TYPE_PUBKEY_RSA:
 	case SC_PKCS15_TYPE_PUBKEY_EC:
 		tag = "public-key";
 		break;
 	case SC_PKCS15_TYPE_SKEY_GENERIC:
 	case SC_PKCS15_TYPE_SKEY_DES:
 	case SC_PKCS15_TYPE_SKEY_3DES:
 		tag = "secret-key";
 		break;
 	default:
 		if ((type & SC_PKCS15_TYPE_CLASS_MASK) == SC_PKCS15_TYPE_CERT)
 			tag = "certificate";
 		else if ((type & SC_PKCS15_TYPE_CLASS_MASK) == SC_PKCS15_TYPE_DATA_OBJECT)
 			tag = "data";
 		break;
 	}
 
 	if (!tag) {
 		sc_log(card->ctx, "Unsupported file type");
 		return SC_ERROR_INVALID_ARGUMENTS;
 	}
 
 	/* Get template from profile  */
 	snprintf(name, sizeof (name), "template-%s", tag);
 	if (sc_profile_get_file(profile, name, &file) < 0) {
 		sc_log(card->ctx, "Profile doesn't define %s", name);
 		return SC_ERROR_NOT_SUPPORTED;
 	}
 
 	/* Auto-increment FID for next object */
 	file->id += num;
 	p = &file->path;
 	*p = profile->df_info->file->path;
+	if (p->len >= SC_MAX_PATH_SIZE) {
+		sc_log(card->ctx, "Wrong path length");
+		return SC_ERROR_INTERNAL;
+	}
 	p->value[p->len++] = (u8) (file->id / 256);
 	p->value[p->len++] = (u8) (file->id % 256);
 
 	/* Increment FID until there's no file with such path */
 	r = sc_select_file(card, p, NULL);
 	while (r == 0) {
 		file->id++;
 		p->value[p->len - 2] = (u8) (file->id / 256);
 		p->value[p->len - 1] = (u8) (file->id % 256);
 		r = sc_select_file(card, p, NULL);
 	}
 
 	*out = file;
 	LOG_FUNC_RETURN(card->ctx, 0);
 }
@@ -525,148 +529,150 @@ static int
 myeid_create_key(struct sc_profile *profile, struct sc_pkcs15_card *p15card,
 		struct sc_pkcs15_object *object) {
 	struct sc_context *ctx = p15card->card->ctx;
 	struct sc_card *card = p15card->card;
 	struct sc_pkcs15_prkey_info *prkey_info = (struct sc_pkcs15_prkey_info *) object->data;
 	struct sc_pkcs15_skey_info *skey_info = (struct sc_pkcs15_skey_info *) object->data;
 	struct sc_pkcs15_id *id;
 	struct sc_path *path;
 	int *key_reference;
 	struct sc_file *file = NULL;
 	struct sc_pkcs15_object *pin_object = NULL;
 	struct sc_pkcs15_auth_info *pkcs15_auth_info = NULL;
 	unsigned char sec_attrs[] = {0xFF, 0xFF, 0xFF};
 	int r, ef_structure = 0, keybits = 0, pin_reference = -1;
 	unsigned char prop_info[] = {0x00, 0x00};
 	int extractable = FALSE;
 
 	LOG_FUNC_CALLED(card->ctx);
 
 	switch (object->type) {
 		case SC_PKCS15_TYPE_PRKEY_RSA:
 			ef_structure = SC_CARDCTL_MYEID_KEY_RSA;
 			keybits = prkey_info->modulus_length;
 			break;
 		case SC_PKCS15_TYPE_PRKEY_EC:
 			ef_structure = SC_CARDCTL_MYEID_KEY_EC;
 			keybits = prkey_info->field_length;
 			break;
 		case SC_PKCS15_TYPE_SKEY_DES:
 		case SC_PKCS15_TYPE_SKEY_3DES:
 			ef_structure = SC_CARDCTL_MYEID_KEY_DES;
 			keybits = skey_info->value_len;
 			if ((skey_info->access_flags & SC_PKCS15_PRKEY_ACCESS_EXTRACTABLE) == SC_PKCS15_PRKEY_ACCESS_EXTRACTABLE)
 				extractable = TRUE;
 			break;
 		case SC_PKCS15_TYPE_SKEY_GENERIC:
 			keybits = skey_info->value_len;
 			if ((skey_info->access_flags & SC_PKCS15_PRKEY_ACCESS_EXTRACTABLE) == SC_PKCS15_PRKEY_ACCESS_EXTRACTABLE)
 				extractable = TRUE;
 			switch (skey_info->key_type) {
 			case CKK_AES:
 				ef_structure = SC_CARDCTL_MYEID_KEY_AES;
 				break;
 			case CKK_DES:
 				ef_structure = SC_CARDCTL_MYEID_KEY_DES;
 				break;
 			default:
 				if (object->type == SC_PKCS15_TYPE_SKEY_GENERIC)
 					ef_structure = SC_CARDCTL_MYEID_KEY_GENERIC_SECRET;
 				break;
 			}
 			break;
 	}
 	if (!ef_structure) {
 		LOG_TEST_RET(ctx, SC_ERROR_INVALID_ARGUMENTS,
 				"Unsupported key type");
 	}
 
 	myeid_fixup_supported_algos(profile, p15card, object);
 
 	if ((object->type & SC_PKCS15_TYPE_CLASS_MASK) == SC_PKCS15_TYPE_PRKEY) {
 		id = &prkey_info->id;
 		path = &prkey_info->path;
 		key_reference = &prkey_info->key_reference;
 	} else {
 		id = &skey_info->id;
 		path = &skey_info->path;
 		key_reference = &skey_info->key_reference;
 	}
 
 	sc_log(ctx, "create MyEID key ID:%s", sc_pkcs15_print_id(id));
 
 	/* Get the private key file */
 	r = myeid_new_file(profile, card, object->type, *key_reference, &file);
 	LOG_TEST_RET(ctx, r, "Cannot get new MyEID key file");
 
-	if (!file || !file->path.len)
+	if (!file || !file->path.len || file->path.len > SC_MAX_PATH_SIZE) {
+		sc_file_free(file);
 		LOG_TEST_RET(ctx, SC_ERROR_INVALID_ARGUMENTS, "Cannot determine key file");
+	}
 
 	sc_log(ctx, "Key file size %d", keybits);
 	file->size = keybits;
 	file->ef_structure = ef_structure;
 
 	memcpy(path->value, &file->path.value, file->path.len);
 	*key_reference = file->path.value[file->path.len - 1] & 0xFF;
 
 	sc_log(ctx, "Path of MyEID key file to create %s",
 			sc_print_path(&file->path));
 
 	if (object->auth_id.len >= 1) {
 		r = sc_pkcs15_find_pin_by_auth_id(p15card, &object->auth_id, &pin_object);
 
 		if (r != SC_SUCCESS)
 			sc_file_free(file);
 		LOG_TEST_RET(ctx, r, "Failed to get pin object by auth_id");
 
 		if (pin_object->type != SC_PKCS15_TYPE_AUTH_PIN) {
 			sc_file_free(file);
 			LOG_TEST_RET(ctx, SC_ERROR_OBJECT_NOT_VALID, "Invalid object returned when locating pin object.");
 		}
 
 		pkcs15_auth_info =  (struct sc_pkcs15_auth_info*) pin_object->data;
 
 		if (pkcs15_auth_info == NULL || pkcs15_auth_info->auth_type != SC_PKCS15_PIN_AUTH_TYPE_PIN) {
 			sc_file_free(file);
 			LOG_TEST_RET(ctx, SC_ERROR_OBJECT_NOT_VALID, "NULL or invalid sc_pkcs15_auth_info in pin object");
 		}
 
 		pin_reference = pkcs15_auth_info->attrs.pin.reference;
 
 		if (pin_reference >= 1 && pin_reference < MYEID_MAX_PINS) {
 			sec_attrs[0] = (pin_reference << 4 | (pin_reference & 0x0F));
 			sec_attrs[1] = (pin_reference << 4 | (pin_reference & 0x0F));
 			sc_file_set_sec_attr(file, sec_attrs, sizeof(sec_attrs));
 		}
 	}
 	else {
 		sc_file_free(file);
 		LOG_TEST_RET(ctx, SC_ERROR_INVALID_ARGUMENTS, "Invalid AuthID value for a private key.");
 	}
 
 	/* TODO: fill all proprietary attributes here based on the object */
 
 	if (object->user_consent != 0 && pin_reference >= 1)
 	    prop_info[0] |= (pin_reference << 4);
 
 	if (extractable)
 	    prop_info[1] |= MYEID_PROP_INFO_2_EXCTRACTABLE;
 
 	if (object->session_object != 0) /* Object will be removed during next reset. */
 		prop_info[1] |= MYEID_PROP_INFO_2_SESSION_OBJECT;
 
 	/* TODO: add other flags, like CKA_TRUSTED and CKA_WRAP_WITH_TRUSTED */
 
 	r = sc_file_set_prop_attr(file, prop_info, 2);
 	LOG_TEST_RET(ctx, r, "Cannot create MyEID key file");
 
 	/* Now create the key file */
 	r = sc_pkcs15init_create_file(profile, p15card, file);
 	sc_file_free(file);
 	LOG_TEST_RET(ctx, r, "Cannot create MyEID key file");
 
 	LOG_FUNC_RETURN(ctx, r);
 }
 
 /*
  * Store a private key
  */
