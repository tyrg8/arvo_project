commit f126e71e362dad0f7f1841cbc56b5d85e16e8cc4
Author: Qian Matteo Chen <chqmatteo@fb.com>
Date:   Thu Jul 9 02:18:26 2020 -0700

    Fix out of bound read on invalid code points
    
    Summary:
    Fix a heap out of bounds read from curCharPtr_ in JSLexer::consumeBracedCodePoint.
    
    An invalid code point can trigger a call to forceEOF in JSLexer::error and set the curCharPtr_ pointer to the end of the buffer, and JSLexer::consumeBracedCodePoint continues to use curCharPtr_ past the end of the buffer.
    
    JSLexer::error calls forceEOF and returns false when the error limit is reached.
    This commit adds checks in JSLexer::consumeBracedCodePoint to return llvh::None when JSLexer::error returns false.
    
    Reviewed By: tmikov
    
    Differential Revision: D22256409
    
    fbshipit-source-id: ca90a8cf3729b0c5239cd17a420f344eea14c4a5

diff --git a/lib/Parser/JSLexer.cpp b/lib/Parser/JSLexer.cpp
index c31c2cf6d..5caa1509e 100644
--- a/lib/Parser/JSLexer.cpp
+++ b/lib/Parser/JSLexer.cpp
@@ -945,66 +945,73 @@ llvh::Optional<uint32_t> JSLexer::consumeHex(
 llvh::Optional<uint32_t> JSLexer::consumeBracedCodePoint(bool errorOnFail) {
   assert(*curCharPtr_ == '{' && "braced codepoint must begin with {");
   ++curCharPtr_;
   const char *start = curCharPtr_;
 
   // Set to true if we failed to get a code point that is in bounds or saw
   // an invalid character.
   bool failed = false;
 
   // Loop until we hit the } or eof, max out the value, or see an invalid char.
   uint32_t cp = 0;
   for (; *curCharPtr_ != '}'; ++curCharPtr_) {
     int ch = *curCharPtr_;
     if (ch >= '0' && ch <= '9') {
       ch -= '0';
     } else if (ch >= 'a' && ch <= 'f') {
       ch -= 'a' - 10;
     } else if (ch >= 'A' && ch <= 'F') {
       ch -= 'A' - 10;
     } else {
       // The only way this can be the end of the buffer is if this is a \0.
       // Check if this is the end of the buffer, else continue so that we
       // may report more errors after this braced code point.
       if (curCharPtr_ == bufferEnd_) {
         if (!failed && errorOnFail) {
           error(
               SMLoc::getFromPointer(start),
               "non-terminated unicode codepoint escape");
         }
         return llvh::None;
       }
       // Invalid character, set the failed flag and continue.
       if (!failed && errorOnFail) {
-        error(
-            SMLoc::getFromPointer(curCharPtr_),
-            "invalid character in unicode codepoint escape");
+        if (!error(
+                SMLoc::getFromPointer(curCharPtr_),
+                "invalid character in unicode codepoint escape")) {
+          return llvh::None;
+        }
       }
       failed = true;
       continue;
     }
     cp = (cp << 4) + ch;
     if (cp > UNICODE_MAX_VALUE) {
       // Number grew too big, set the failed flag and continue.
       if (!failed && errorOnFail) {
-        error(
-            SMLoc::getFromPointer(start),
-            "unicode codepoint escape is too large");
+        if (!error(
+                SMLoc::getFromPointer(start),
+                "unicode codepoint escape is too large")) {
+          return llvh::None;
+        }
       }
       failed = true;
     }
   }
 
   assert(curCharPtr_ < bufferEnd_ && "bufferEnd_ should cause early return");
 
   // An empty escape sequence is invalid.
   if (curCharPtr_ == start) {
     if (!failed && errorOnFail) {
-      error(SMLoc::getFromPointer(start), "empty unicode codepoint escape");
+      if (!error(
+              SMLoc::getFromPointer(start), "empty unicode codepoint escape")) {
+        return llvh::None;
+      }
     }
     failed = true;
   }
 
   // Consume the final } and return.
   ++curCharPtr_;
   return failed ? llvh::None : llvh::Optional<uint32_t>{cp};
 }
diff --git a/unittests/Parser/JSLexerTest.cpp b/unittests/Parser/JSLexerTest.cpp
index 40fb8657a..33b53a8ba 100644
--- a/unittests/Parser/JSLexerTest.cpp
+++ b/unittests/Parser/JSLexerTest.cpp
@@ -957,6 +957,25 @@ TEST(JSLexerTest, RegressConsumeBadHexTest) {
   ASSERT_EQ(0, diag.getErrCountClear());
 }
 
+TEST(JSLexerTest, ConsumeBadBracedCodePoint) {
+  JSLexer::Allocator alloc;
+  SourceErrorManager sm;
+  DiagContext diag(sm);
+
+  // Test an invalid curly brace escape without a terminating curly brace
+  // This catches an out of bounds read where we hit the error limit and
+  // curCharPtr_ was set to eof, but JSLexer::consumeBracedCodePoint continued
+  // to operate on curCharPtr_
+  // We configure a low error limit to reach the interesting code path faster
+  // then we use invalid characters in a non terminated curly brace code point
+  // to trigger JSLexer:error
+  sm.setErrorLimit(1);
+  JSLexer lex("'\\u{12XXXXXXXXXXX'", sm, alloc);
+
+  ASSERT_EQ(TokenKind::string_literal, lex.advance()->getKind());
+  ASSERT_EQ(TokenKind::eof, lex.advance()->getKind());
+}
+
 TEST(JSLexerTest, JSXTest) {
   JSLexer::Allocator alloc;
   SourceErrorManager sm;
