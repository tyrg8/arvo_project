commit 040cd827d395f46a8515a7d2a7c7ab101f7f1de1
Author: Pierre-Antoine <brameret@systerel.fr>
Date:   Fri Aug 19 11:58:02 2022 +0200

    Ticket #999: Fix use of unitialized variable
    
    Credit to OSS-Fuzz

diff --git a/src/PubSub/network/sopc_network_layer.c b/src/PubSub/network/sopc_network_layer.c
index a9d527ea5..f85b8509a 100644
--- a/src/PubSub/network/sopc_network_layer.c
+++ b/src/PubSub/network/sopc_network_layer.c
@@ -1225,197 +1225,196 @@ static inline SOPC_ReturnStatus Decode_SecurityHeader(SOPC_Buffer* buffer,
 static inline SOPC_ReturnStatus Decode_Message_V1(SOPC_Buffer* buffer,
                                                   uint32_t payload_sign_position,
                                                   SOPC_Dataset_LL_NetworkMessage* nm,
                                                   SOPC_Dataset_LL_NetworkMessage_Header* header,
                                                   const SOPC_UADP_NetworkMessage_Reader_Configuration* readerConf,
                                                   const SOPC_ReaderGroup* group)
 {
     assert(NULL != header && NULL != nm && NULL != group && NULL != readerConf &&
            NULL != readerConf->callbacks.pGetReader_Func && NULL != readerConf->callbacks.pSetDsm_Func);
 
     const uint16_t group_id = SOPC_ReaderGroup_Get_GroupId(group);
     const SOPC_DataSetReader** dsmReaders = NULL;
     SOPC_ReturnStatus status = SOPC_STATUS_OK;
     // number of DataSetMessage. Should be one
     SOPC_Byte msg_count = 0;
     SOPC_Buffer* buffer_payload = NULL;
 
     SOPC_UADP_Configuration* conf = SOPC_Dataset_LL_NetworkMessage_GetHeaderConfig(header);
 
     // Payload Header
     // Only DataSetMessage is managed
     if (conf->PayloadHeaderFlag && SOPC_STATUS_OK == status)
     {
         status = SOPC_Byte_Read(&msg_count, buffer, 0);
         check_status_and_set_default(status, SOPC_UADP_NetworkMessage_Error_Read_Byte_Failed);
     }
     else if (SOPC_STATUS_OK == status)
     {
         msg_count = 1;
     }
 
     if (SOPC_STATUS_OK == status)
     {
         status = valid_bool_to_status(SOPC_Dataset_LL_NetworkMessage_Allocate_DataSetMsg_Array(nm, msg_count));
         check_status_and_set_default(status, SOPC_UADP_NetworkMessage_Error_Read_Alloc_Failed);
     }
 
     if (SOPC_STATUS_OK == status)
     {
         dsmReaders = SOPC_Calloc(msg_count, sizeof(SOPC_DataSetReader*));
         assert(NULL != dsmReaders);
     }
 
     // DataSetMessage Writer Ids (Payload Header)
     if (SOPC_STATUS_OK == status)
     {
         bool mustDecode = false;
         for (int i = 0; i < msg_count && SOPC_STATUS_OK == status; i++)
         {
             SOPC_Dataset_LL_DataSetMessage* dsm = SOPC_Dataset_LL_NetworkMessage_Get_DataSetMsg_At(nm, i);
             uint16_t writer_id;
             status = SOPC_UInt16_Read(&writer_id, buffer, 0);
             check_status_and_set_default(status, SOPC_UADP_NetworkMessage_Error_Read_Short_Failed);
 
             if (SOPC_STATUS_OK == status)
             {
                 SOPC_Dataset_LL_DataSetMsg_Set_WriterId(dsm, writer_id);
+                dsmReaders[i] = readerConf->callbacks.pGetReader_Func(group, conf, writer_id, (uint8_t) i);
             }
 
-            dsmReaders[i] = readerConf->callbacks.pGetReader_Func(group, conf, writer_id, (uint8_t) i);
-
             // Check if there is at last one DSM to read, otherwise decoding can be canceled
             if (dsmReaders[i] != NULL)
             {
                 mustDecode = true;
             }
         }
         if (!mustDecode)
         {
             set_status_default(&status, SOPC_UADP_NetworkMessage_Error_Read_NoMatchingReader);
         }
     }
 
     // Timestamp
     if (conf->TimestampFlag && SOPC_STATUS_OK == status)
     {
         // not managed yet
         set_status_default(&status, SOPC_UADP_NetworkMessage_Error_Unsupported_Timestamp);
     }
 
     // Picoseconds
     if (conf->PicoSecondsFlag && SOPC_STATUS_OK == status)
     {
         // not managed yet
         set_status_default(&status, SOPC_UADP_NetworkMessage_Error_Unsupported_Picoseconds);
     }
 
     // Promoted fields
     if (conf->PromotedFieldsFlag && SOPC_STATUS_OK == status)
     {
         // not managed yet
         set_status_default(&status, SOPC_UADP_NetworkMessage_Error_Unsupported_PromotedFields);
     }
 
     // Security Header
     if (conf->SecurityFlag && SOPC_STATUS_OK == status)
     {
         status = Decode_SecurityHeader(buffer, &buffer_payload, payload_sign_position, group_id,
                                        readerConf->pGetSecurity_Func, header, conf);
     }
     else
     {
         // check that subscriber expects security mode is none
         if (NULL != readerConf->pGetSecurity_Func && SOPC_STATUS_OK == status) // if NULL, security mode is None
         {
             SOPC_PubSub_SecurityType* security = readerConf->pGetSecurity_Func(
                 SOPC_PUBSUB_SKS_DEFAULT_TOKENID,
                 Network_Layer_Convert_PublisherId(SOPC_Dataset_LL_NetworkMessage_Get_PublisherId(header)), group_id);
             // if security is NULL, there is no reader configured with security sign or encrypt/sign
             if (NULL != security && !Network_Check_ReceivedSecurityMode(security->mode, false, false))
             {
                 set_status_default(&status, SOPC_UADP_NetworkMessage_Error_Read_SecurityNone_Failed);
             }
         }
     }
 
     // Payload
     if (NULL == buffer_payload && SOPC_STATUS_OK == status)
     {
         buffer_payload = buffer;
     }
 
     // Store DMS size to check it later
     uint16_t* dsmSizes = NULL;
 
     // No size if there is only one DataSetMessage
     if (msg_count > 1 && conf->PayloadHeaderFlag && SOPC_STATUS_OK == status)
     {
         dsmSizes = SOPC_Calloc(msg_count, sizeof(uint16_t));
         if (NULL == dsmSizes)
         {
             status = SOPC_STATUS_OUT_OF_MEMORY;
         }
 
         for (int i = 0; i < msg_count && SOPC_STATUS_OK == status; i++)
         {
             status = SOPC_UInt16_Read(&dsmSizes[i], buffer_payload, 0);
         }
         check_status_and_set_default(status, SOPC_UADP_NetworkMessage_Error_Read_DsmSize_Failed);
     }
 
     // Decode DataSetMessages
 
     // Bit 0: DataSetMessage is valid.
     // Bit range 1-2: Field Encoding
     // Bit 3: DataSetMessageSequenceNumber enabled
     // Bit 4: Status enabled
     // Bit 5: ConfigurationVersionMajorVersion enabled
     // Bit 6: ConfigurationVersionMinorVersion enable
     // Bit 7: DataSetFlags2 enabled
     for (int i = 0; i < msg_count && SOPC_STATUS_OK == status; i++)
     {
         SOPC_Dataset_LL_DataSetMessage* dsm = SOPC_Dataset_LL_NetworkMessage_Get_DataSetMsg_At(nm, i);
         const uint16_t size = (NULL == dsmSizes ? 0 : dsmSizes[i]);
         const SOPC_DataSetReader* reader = dsmReaders[i];
         if (NULL != reader)
         {
             status = decode_dataSetMessage(dsm, buffer_payload, size);
             if (SOPC_STATUS_OK == status)
             {
                 status = readerConf->callbacks.pSetDsm_Func(dsm, readerConf->targetConfig, reader);
                 check_status_and_set_default(status, SOPC_UADP_NetworkMessage_Error_Read_BadMetaData);
             }
         }
         else
         {
             // Message has no matchign reader, simply skip the DSM using its given size
             if (dsmSizes == 0)
             {
                 set_status_default(&status, SOPC_UADP_NetworkMessage_Error_Read_DsmSizeCheck_Failed);
             }
             else
             {
                 SOPC_Buffer_Read(NULL, buffer_payload, size);
                 check_status_and_set_default(status, SOPC_UADP_NetworkMessage_Error_Read_DsmSkip_Failed);
             }
         }
     }
 
     if (NULL != dsmSizes)
     {
         SOPC_Free(dsmSizes);
     }
 
     if (NULL != dsmReaders)
     {
         SOPC_Free(dsmReaders);
     }
 
     // delete the Payload if it has been decrypted
     if (NULL != buffer_payload && buffer != buffer_payload)
     {
         SOPC_Buffer_Delete(buffer_payload);
     }
 
     return status;
 }
