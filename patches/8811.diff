commit af4d5f31705dcfd65319da430f87744b5c1f3616
Author: Albert Astals Cid <aacid@kde.org>
Date:   Fri Jun 22 23:55:09 2018 +0200

    SplashFTFont::makeGlyph: Bail out if constructor returned early
    
    fixes oss-fuzz/8811

diff --git a/splash/SplashFTFont.cc b/splash/SplashFTFont.cc
index 301be9a7..2432811d 100644
--- a/splash/SplashFTFont.cc
+++ b/splash/SplashFTFont.cc
@@ -60,175 +60,178 @@ static int glyphPathCubicTo(const FT_Vector *ctrl1, const FT_Vector *ctrl2,
 SplashFTFont::SplashFTFont(SplashFTFontFile *fontFileA, SplashCoord *matA,
 			   SplashCoord *textMatA):
   SplashFont(fontFileA, matA, textMatA, fontFileA->engine->aa), 
   textScale(0),
   enableFreeTypeHinting(fontFileA->engine->enableFreeTypeHinting),
-  enableSlightHinting(fontFileA->engine->enableSlightHinting)
+  enableSlightHinting(fontFileA->engine->enableSlightHinting),
+  isOk(false)
 {
   FT_Face face;
   int div;
   int x, y;
 #ifdef USE_FIXEDPOINT
   SplashCoord scale;
 #endif
 
   face = fontFileA->face;
   if (FT_New_Size(face, &sizeObj)) {
     return;
   }
   face->size = sizeObj;
   size = splashRound(splashDist(0, 0, mat[2], mat[3]));
   if (size < 1) {
     size = 1;
   }
   if (FT_Set_Pixel_Sizes(face, 0, size)) {
     return;
   }
   // if the textMat values are too small, FreeType's fixed point
   // arithmetic doesn't work so well
   textScale = splashDist(0, 0, textMat[2], textMat[3]) / size;
 
   if (unlikely(textScale == 0 || face->units_per_EM == 0)) {
     return;
   }
 
   div = face->bbox.xMax > 20000 ? 65536 : 1;
 
 #ifdef USE_FIXEDPOINT
   scale = (SplashCoord)1 / (SplashCoord)face->units_per_EM;
 
   // transform the four corners of the font bounding box -- the min
   // and max values form the bounding box of the transformed font
   x = (int)(mat[0] * (scale * (face->bbox.xMin / div)) +
 	    mat[2] * (scale * (face->bbox.yMin / div)));
   xMin = xMax = x;
   y = (int)(mat[1] * (scale * (face->bbox.xMin / div)) +
 	    mat[3] * (scale * (face->bbox.yMin / div)));
   yMin = yMax = y;
   x = (int)(mat[0] * (scale * (face->bbox.xMin / div)) +
 	    mat[2] * (scale * (face->bbox.yMax / div)));
   if (x < xMin) {
     xMin = x;
   } else if (x > xMax) {
     xMax = x;
   }
   y = (int)(mat[1] * (scale * (face->bbox.xMin / div)) +
 	    mat[3] * (scale * (face->bbox.yMax / div)));
   if (y < yMin) {
     yMin = y;
   } else if (y > yMax) {
     yMax = y;
   }
   x = (int)(mat[0] * (scale * (face->bbox.xMax / div)) +
 	    mat[2] * (scale * (face->bbox.yMin / div)));
   if (x < xMin) {
     xMin = x;
   } else if (x > xMax) {
     xMax = x;
   }
   y = (int)(mat[1] * (scale * (face->bbox.xMax / div)) +
 	    mat[3] * (scale * (face->bbox.yMin / div)));
   if (y < yMin) {
     yMin = y;
   } else if (y > yMax) {
     yMax = y;
   }
   x = (int)(mat[0] * (scale * (face->bbox.xMax / div)) +
 	    mat[2] * (scale * (face->bbox.yMax / div)));
   if (x < xMin) {
     xMin = x;
   } else if (x > xMax) {
     xMax = x;
   }
   y = (int)(mat[1] * (scale * (face->bbox.xMax / div)) +
 	    mat[3] * (scale * (face->bbox.yMax / div)));
   if (y < yMin) {
     yMin = y;
   } else if (y > yMax) {
     yMax = y;
   }
 #else // USE_FIXEDPOINT
   // transform the four corners of the font bounding box -- the min
   // and max values form the bounding box of the transformed font
   x = (int)((mat[0] * face->bbox.xMin + mat[2] * face->bbox.yMin) /
 	    (div * face->units_per_EM));
   xMin = xMax = x;
   y = (int)((mat[1] * face->bbox.xMin + mat[3] * face->bbox.yMin) /
 	    (div * face->units_per_EM));
   yMin = yMax = y;
   x = (int)((mat[0] * face->bbox.xMin + mat[2] * face->bbox.yMax) /
 	    (div * face->units_per_EM));
   if (x < xMin) {
     xMin = x;
   } else if (x > xMax) {
     xMax = x;
   }
   y = (int)((mat[1] * face->bbox.xMin + mat[3] * face->bbox.yMax) /
 	    (div * face->units_per_EM));
   if (y < yMin) {
     yMin = y;
   } else if (y > yMax) {
     yMax = y;
   }
   x = (int)((mat[0] * face->bbox.xMax + mat[2] * face->bbox.yMin) /
 	    (div * face->units_per_EM));
   if (x < xMin) {
     xMin = x;
   } else if (x > xMax) {
     xMax = x;
   }
   y = (int)((mat[1] * face->bbox.xMax + mat[3] * face->bbox.yMin) /
 	    (div * face->units_per_EM));
   if (y < yMin) {
     yMin = y;
   } else if (y > yMax) {
     yMax = y;
   }
   x = (int)((mat[0] * face->bbox.xMax + mat[2] * face->bbox.yMax) /
 	    (div * face->units_per_EM));
   if (x < xMin) {
     xMin = x;
   } else if (x > xMax) {
     xMax = x;
   }
   y = (int)((mat[1] * face->bbox.xMax + mat[3] * face->bbox.yMax) /
 	    (div * face->units_per_EM));
   if (y < yMin) {
     yMin = y;
   } else if (y > yMax) {
     yMax = y;
   }
 #endif // USE_FIXEDPOINT
   // This is a kludge: some buggy PDF generators embed fonts with
   // zero bounding boxes.
   if (xMax == xMin) {
     xMin = 0;
     xMax = size;
   }
   if (yMax == yMin) {
     yMin = 0;
     yMax = (int)((SplashCoord)1.2 * size);
   }
 
   // compute the transform matrix
 #ifdef USE_FIXEDPOINT
   matrix.xx = (FT_Fixed)((mat[0] / size).get16Dot16());
   matrix.yx = (FT_Fixed)((mat[1] / size).get16Dot16());
   matrix.xy = (FT_Fixed)((mat[2] / size).get16Dot16());
   matrix.yy = (FT_Fixed)((mat[3] / size).get16Dot16());
   textMatrix.xx = (FT_Fixed)((textMat[0] / (textScale * size)).get16Dot16());
   textMatrix.yx = (FT_Fixed)((textMat[1] / (textScale * size)).get16Dot16());
   textMatrix.xy = (FT_Fixed)((textMat[2] / (textScale * size)).get16Dot16());
   textMatrix.yy = (FT_Fixed)((textMat[3] / (textScale * size)).get16Dot16());
 #else
   matrix.xx = (FT_Fixed)((mat[0] / size) * 65536);
   matrix.yx = (FT_Fixed)((mat[1] / size) * 65536);
   matrix.xy = (FT_Fixed)((mat[2] / size) * 65536);
   matrix.yy = (FT_Fixed)((mat[3] / size) * 65536);
   textMatrix.xx = (FT_Fixed)((textMat[0] / (textScale * size)) * 65536);
   textMatrix.yx = (FT_Fixed)((textMat[1] / (textScale * size)) * 65536);
   textMatrix.xy = (FT_Fixed)((textMat[2] / (textScale * size)) * 65536);
   textMatrix.yy = (FT_Fixed)((textMat[3] / (textScale * size)) * 65536);
 #endif
+
+  isOk = true;
 }
 
 SplashFTFont::~SplashFTFont() {
@@ -271,84 +274,84 @@ static FT_Int32 getFTLoadFlags(GBool type1, GBool trueType, GBool aa, GBool enab
 GBool SplashFTFont::makeGlyph(int c, int xFrac, int yFrac,
 			      SplashGlyphBitmap *bitmap, int x0, int y0, SplashClip *clip, SplashClipResult *clipRes) {
   SplashFTFontFile *ff;
   FT_Vector offset;
   FT_GlyphSlot slot;
   FT_UInt gid;
   int rowSize;
   Guchar *p, *q;
   int i;
 
-  if (unlikely(textScale == 0)) {
+  if (unlikely(!isOk)) {
     return gFalse;
   }
 
   ff = (SplashFTFontFile *)fontFile;
 
   ff->face->size = sizeObj;
   offset.x = (FT_Pos)(int)((SplashCoord)xFrac * splashFontFractionMul * 64);
   offset.y = 0;
   FT_Set_Transform(ff->face, &matrix, &offset);
   slot = ff->face->glyph;
 
   if (ff->codeToGID && c < ff->codeToGIDLen && c >= 0) {
     gid = (FT_UInt)ff->codeToGID[c];
   } else {
     gid = (FT_UInt)c;
   }
 
   if (FT_Load_Glyph(ff->face, gid, getFTLoadFlags(ff->type1, ff->trueType, aa, enableFreeTypeHinting, enableSlightHinting))) {
     return gFalse;
   }
 
   // prelimirary values based on FT_Outline_Get_CBox
   // we add two pixels to each side to be in the safe side
   FT_BBox cbox;
   FT_Outline_Get_CBox(&ff->face->glyph->outline, &cbox);
   bitmap->x = -(cbox.xMin / 64) + 2;
   bitmap->y =  (cbox.yMax / 64) + 2;
   bitmap->w = ((cbox.xMax - cbox.xMin) / 64) + 4;
   bitmap->h = ((cbox.yMax - cbox.yMin) / 64) + 4;
 
   *clipRes = clip->testRect(x0 - bitmap->x,
                             y0 - bitmap->y,
                             x0 - bitmap->x + bitmap->w,
                             y0 - bitmap->y + bitmap->h);
   if (*clipRes == splashClipAllOutside) {
     bitmap->freeData = gFalse;
     return gTrue;
   }
 
   if (FT_Render_Glyph(slot, aa ? ft_render_mode_normal
 		               : ft_render_mode_mono)) {
     return gFalse;
   }
 
   if (slot->bitmap.width == 0 || slot->bitmap.rows == 0) {
     // this can happen if (a) the glyph is really tiny or (b) the
     // metrics in the TrueType file are broken
     return gFalse;
   }
 
   bitmap->x = -slot->bitmap_left;
   bitmap->y = slot->bitmap_top;
   bitmap->w = slot->bitmap.width;
   bitmap->h = slot->bitmap.rows;
   bitmap->aa = aa;
   if (aa) {
     rowSize = bitmap->w;
   } else {
     rowSize = (bitmap->w + 7) >> 3;
   }
   bitmap->data = (Guchar *)gmallocn_checkoverflow(rowSize, bitmap->h);
   if (!bitmap->data) {
     return gFalse;
   }
   bitmap->freeData = gTrue;
   for (i = 0, p = bitmap->data, q = slot->bitmap.buffer;
        i < bitmap->h;
        ++i, p += rowSize, q += slot->bitmap.pitch) {
     memcpy(p, q, rowSize);
   }
 
   return gTrue;
 }
diff --git a/splash/SplashFTFont.h b/splash/SplashFTFont.h
index 5f0d1976..44e1fc6b 100644
--- a/splash/SplashFTFont.h
+++ b/splash/SplashFTFont.h
@@ -1,35 +1,35 @@
 //========================================================================
 //
 // SplashFTFont.h
 //
 //========================================================================
 
 //========================================================================
 //
 // Modified under the Poppler project - http://poppler.freedesktop.org
 //
 // All changes made under the Poppler project to this file are licensed
 // under GPL version 2 or later
 //
-// Copyright (C) 2007-2009, 2011 Albert Astals Cid <aacid@kde.org>
+// Copyright (C) 2007-2009, 2011, 2018 Albert Astals Cid <aacid@kde.org>
 // Copyright (C) 2009 Petr Gajdos <pgajdos@novell.com>
 // Copyright (C) 2011 Andreas Hartmetz <ahartmetz@gmail.com>
 // Copyright (C) 2017 Adrian Johnson <ajohnson@redneon.com>
 //
 // To see a description of the changes please see the Changelog file that
 // came with your tarball or type make ChangeLog if you are building from git
 //
 //========================================================================
 
 #ifndef SPLASHFTFONT_H
 #define SPLASHFTFONT_H
 
 #include "poppler-config.h"
 
 #ifdef USE_GCC_PRAGMAS
 #pragma interface
 #endif
 
 #include <ft2build.h>
 #include FT_FREETYPE_H
 #include "SplashFont.h"
@@ -66,12 +66,13 @@ public:
 private:
 
   FT_Size sizeObj;
   FT_Matrix matrix;
   FT_Matrix textMatrix;
   SplashCoord textScale;
   int size;
   GBool enableFreeTypeHinting;
   GBool enableSlightHinting;
+  GBool isOk;
 };
 
 #endif
