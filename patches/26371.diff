commit 238fded2d8d6288429810573c2b27dc73898134f
Author: Olaf Bergmann <bergmann@tzi.org>
Date:   Wed Jan 13 15:34:09 2021 +0100

    pdu.c: fix heap overflow in coap_pdu_parse_opt()
    
    coap_opt_length() must be called next_option_safe() to avoid
    out-of-bound reads for malformed options.
    
    Thanks to Marten Geuking for providing a detailed bug report.

diff --git a/src/pdu.c b/src/pdu.c
index 82be8de1..6828911f 100644
--- a/src/pdu.c
+++ b/src/pdu.c
@@ -679,65 +679,66 @@ int
 coap_pdu_parse_opt(coap_pdu_t *pdu) {
 
   int good = 1;
   /* sanity checks */
   if (pdu->code == 0) {
     if (pdu->used_size != 0 || pdu->token_length) {
       coap_log(LOG_DEBUG, "coap_pdu_parse: empty message is not empty\n");
       return 0;
     }
   }
 
   if (pdu->token_length > pdu->used_size || pdu->token_length > 8) {
     coap_log(LOG_DEBUG, "coap_pdu_parse: invalid Token\n");
     return 0;
   }
 
   pdu->max_opt = 0;
   if (pdu->code == 0) {
     /* empty packet */
     pdu->used_size = 0;
     pdu->data = NULL;
   } else {
     /* skip header + token */
     coap_opt_t *opt = pdu->token + pdu->token_length;
     size_t length = pdu->used_size - pdu->token_length;
-    uint32_t len;
 
     while (length > 0 && *opt != COAP_PAYLOAD_START) {
-      len = coap_opt_length(opt);
-      if ( !next_option_safe( &opt, &length, &pdu->max_opt ) ) {
-        coap_log(LOG_DEBUG, "coap_pdu_parse: missing payload start code\n");
+      size_t optsize = next_option_safe(&opt, &length, &pdu->max_opt);
+      const uint32_t len =
+        optsize ? coap_opt_length((const uint8_t *)opt - optsize) : 0;
+      if (optsize == 0) {
+        coap_log(LOG_DEBUG, "coap_pdu_parse: malformed option\n");
         return 0;
       }
       if (COAP_PDU_IS_SIGNALING(pdu)) {
         if (!coap_pdu_parse_opt_csm(pdu, len))
           goto bad;
         continue;
       }
       switch (pdu->max_opt) {
       case COAP_OPTION_IF_MATCH:      if (len > 8) goto bad;              break;
       case COAP_OPTION_URI_HOST:      if (len < 1 || len > 255) goto bad; break;
       case COAP_OPTION_ETAG:          if (len < 1 || len > 8) goto bad;   break;
       case COAP_OPTION_IF_NONE_MATCH: if (len != 0) goto bad;             break;
       case COAP_OPTION_OBSERVE:       if (len > 3) goto bad;              break;
       case COAP_OPTION_URI_PORT:      if (len > 2) goto bad;              break;
       case COAP_OPTION_LOCATION_PATH: if (len > 255) goto bad;            break;
       case COAP_OPTION_OSCORE:        if (len > 255) goto bad;            break;
       case COAP_OPTION_URI_PATH:      if (len > 255) goto bad;            break;
       case COAP_OPTION_CONTENT_FORMAT:if (len > 2) goto bad;              break;
       case COAP_OPTION_MAXAGE:        if (len > 4) goto bad;              break;
       case COAP_OPTION_URI_QUERY:     if (len < 1 || len > 255) goto bad; break;
       case COAP_OPTION_HOP_LIMIT:     if (len < 1 || len > 1) goto bad;   break;
       case COAP_OPTION_ACCEPT:        if (len > 2) goto bad;              break;
       case COAP_OPTION_LOCATION_QUERY:if (len > 255) goto bad;            break;
       case COAP_OPTION_BLOCK2:        if (len > 3) goto bad;              break;
       case COAP_OPTION_BLOCK1:        if (len > 3) goto bad;              break;
       case COAP_OPTION_SIZE2:         if (len > 4) goto bad;              break;
       case COAP_OPTION_PROXY_URI:    if (len < 1 || len > 1034) goto bad; break;
       case COAP_OPTION_PROXY_SCHEME:  if (len < 1 || len > 255) goto bad; break;
       case COAP_OPTION_SIZE1:         if (len > 4) goto bad;              break;
       case COAP_OPTION_NORESPONSE:    if (len > 1) goto bad;              break;
       default:
         ;
       }
       continue;
