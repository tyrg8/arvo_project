commit af3fdf1f9e09fb7e47d4528d81fd510730b80745
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Sun Jun 4 09:22:42 2023 -0600

    [subset/glyf] Simplify error handling

diff --git a/src/OT/glyf/glyf.hh b/src/OT/glyf/glyf.hh
index ef748af87..92387f41a 100644
--- a/src/OT/glyf/glyf.hh
+++ b/src/OT/glyf/glyf.hh
@@ -28,148 +28,137 @@ namespace OT {
 struct glyf
 {
   friend struct glyf_accelerator_t;
 
   static constexpr hb_tag_t tableTag = HB_OT_TAG_glyf;
 
   static bool has_valid_glyf_format(const hb_face_t* face)
   {
     const OT::head &head = *face->table.head;
     return head.indexToLocFormat <= 1 && head.glyphDataFormat <= 1;
   }
 
   bool sanitize (hb_sanitize_context_t *c HB_UNUSED) const
   {
     TRACE_SANITIZE (this);
     /* Runtime checks as eager sanitizing each glyph is costy */
     return_trace (true);
   }
 
   /* requires source of SubsetGlyph complains the identifier isn't declared */
   template <typename Iterator>
   bool serialize (hb_serialize_context_t *c,
 		  Iterator it,
                   bool use_short_loca,
 		  const hb_subset_plan_t *plan)
   {
     TRACE_SERIALIZE (this);
 
     unsigned init_len = c->length ();
     for (auto &_ : it)
       if (unlikely (!_.serialize (c, use_short_loca, plan)))
         return false;
 
     /* As a special case when all glyph in the font are empty, add a zero byte
      * to the table, so that OTS doesnâ€™t reject it, and to make the table work
      * on Windows as well.
      * See https://github.com/khaledhosny/ots/issues/52 */
     if (init_len == c->length ())
     {
       HBUINT8 empty_byte;
       empty_byte = 0;
       c->copy (empty_byte);
     }
     return_trace (true);
   }
 
   /* Byte region(s) per glyph to output
      unpadded, hints removed if so requested
      If we fail to process a glyph we produce an empty (0-length) glyph */
   bool subset (hb_subset_context_t *c) const
   {
     TRACE_SUBSET (this);
 
     if (!has_valid_glyf_format (c->plan->source)) {
       // glyf format is unknown don't attempt to subset it.
       DEBUG_MSG (SUBSET, nullptr,
                  "unkown glyf format, dropping from subset.");
       return_trace (false);
     }
 
     hb_font_t *font = nullptr;
     if (c->plan->normalized_coords)
     {
       font = _create_font_for_instancing (c->plan);
       if (unlikely (!font))
 	return_trace (false);
     }
 
+    hb_vector_t<unsigned> padded_offsets;
+    if (unlikely (!padded_offsets.alloc (c->plan->new_to_old_gid_list.length, true)))
+      return_trace (false);
+
     hb_vector_t<glyf_impl::SubsetGlyph> glyphs;
     if (!_populate_subset_glyphs (c->plan, font, glyphs))
     {
       hb_font_destroy (font);
       return_trace (false);
     }
 
     if (font)
       hb_font_destroy (font);
 
-    hb_vector_t<unsigned> padded_offsets;
-    if (unlikely (!padded_offsets.alloc (glyphs.length, true)))
-    {
-      _free_compiled_subset_glyphs (glyphs);
-      return_trace (false);
-    }
-
     unsigned max_offset = 0;
     for (auto &g : glyphs)
     {
       unsigned size = g.padded_size ();
       padded_offsets.push (size);
       max_offset += size;
     }
 
     bool use_short_loca = false;
     if (likely (!c->plan->force_long_loca))
       use_short_loca = max_offset < 0x1FFFF;
 
     if (!use_short_loca)
     {
       padded_offsets.resize (0);
       for (auto &g : glyphs)
 	padded_offsets.push (g.length ());
     }
 
+    glyf *glyf_prime = c->serializer->start_embed <glyf> ();
+    bool result = glyf_prime &&
+		  glyf_prime->serialize (c->serializer, hb_iter (glyphs), use_short_loca, c->plan);
+    if (c->plan->normalized_coords && !c->plan->pinned_at_default)
+      _free_compiled_subset_glyphs (glyphs);
+
     if (unlikely (!c->serializer->check_success (glyf_impl::_add_loca_and_head (c,
 						 padded_offsets.iter (),
 						 use_short_loca))))
-    {
-      _free_compiled_subset_glyphs (glyphs);
-      return_trace (false);
-    }
-
-    glyf *glyf_prime = c->serializer->start_embed <glyf> ();
-    if (unlikely (!glyf_prime))
-    {
-      _free_compiled_subset_glyphs (glyphs);
       return_trace (false);
-    }
-
-    bool result = glyf_prime->serialize (c->serializer, hb_iter (glyphs), use_short_loca, c->plan);
-    if (c->plan->normalized_coords && !c->plan->pinned_at_default)
-      _free_compiled_subset_glyphs (glyphs);
 
     return result;
   }
 
   bool
   _populate_subset_glyphs (const hb_subset_plan_t   *plan,
 			   hb_font_t                *font,
 			   hb_vector_t<glyf_impl::SubsetGlyph>& glyphs /* OUT */) const;
 
   hb_font_t *
   _create_font_for_instancing (const hb_subset_plan_t *plan) const;
 
   void _free_compiled_subset_glyphs (hb_vector_t<glyf_impl::SubsetGlyph> &glyphs) const
   {
     for (auto &g : glyphs)
       g.free_compiled_bytes ();
   }
 
   protected:
   UnsizedArrayOf<HBUINT8>
 		dataZ;	/* Glyphs data. */
   public:
   DEFINE_SIZE_MIN (0);	/* In reality, this is UNBOUNDED() type; but since we always
 			 * check the size externally, allow Null() object of it by
 			 * defining it _MIN instead. */
 };
