commit 30858f49ad57b9a888e6768b0ae1558e5f895176
Author: Ram Mohan <ram.mohan@ittiam.com>
Date:   Mon Aug 28 16:43:04 2023 +0530

    libavcenc: do not reset status before all threads are made aware
    
    At the end of encoding of a frame, the entropy thread communicates
    the encoded bit stream size to rc module for update. After this
    update, if rc decides to skip the frame due to vbv overflow, the
    bitstream context is reset and frame is marked for skip.
    
    Due to an oversight, if entropy encoding sees an error, then this
    update is happening at the end of each row. Now rc has decided to
    skip the frame and the context is reset. As the bitstream context is
    reset, other threads are unaware of this problem and continue encoding.
    
    This is causing issues.
    
    Restrict the rc update to the thread that entropy code the last row.
    
    Bug: oss-fuzz:59543
    Bug: 285891354
    Test: avc_enc_fuzzer
    
    Change-Id: If45a5f34abb59ece812733af8f54f72ae5474d03

diff --git a/encoder/ih264e_process.c b/encoder/ih264e_process.c
index cba5023..a0a04e0 100644
--- a/encoder/ih264e_process.c
+++ b/encoder/ih264e_process.c
@@ -2590,61 +2590,61 @@ WORD32 ih264e_process_thread(void *pv_proc)
 WORKER:
         /* choose appropriate proc context based on proc_base_idx */
         ps_proc = &ps_codec->as_process[ps_proc->i4_id + s_job.i2_proc_base_idx];
 
         switch (s_job.i4_cmd)
         {
             case CMD_PROCESS:
                 ps_proc->i4_mb_cnt = s_job.i2_mb_cnt;
                 ps_proc->i4_mb_x = s_job.i2_mb_x;
                 ps_proc->i4_mb_y = s_job.i2_mb_y;
 
                 /* init process context */
                 ih264e_init_proc_ctxt(ps_proc);
 
                 /* core code all mbs enlisted under the current job */
                 error_status = ih264e_process(ps_proc);
                 if(error_status !=IH264_SUCCESS)
                 {
                     ps_proc->i4_error_code = error_status;
                     return ret;
                 }
                 break;
 
             case CMD_ENTROPY:
                 ps_proc->s_entropy.i4_mb_x = s_job.i2_mb_x;
                 ps_proc->s_entropy.i4_mb_y = s_job.i2_mb_y;
                 ps_proc->s_entropy.i4_mb_cnt = s_job.i2_mb_cnt;
 
                 /* init entropy */
                 ih264e_init_entropy_ctxt(ps_proc);
 
                 /* entropy code all mbs enlisted under the current job */
                 error_status = ih264e_entropy(ps_proc);
 
-                if ((s_job.i2_mb_y == ps_proc->i4_ht_mbs - 1) || error_status != IH264_SUCCESS)
+                if (s_job.i2_mb_y == ps_proc->i4_ht_mbs - 1)
                 {
                     error_status |= ih264e_update_rc_post_enc(ps_codec, ctxt_sel,
                                                               (ps_codec->i4_poc == 0));
                 }
 
                 /* Dont execute any further instructions until store synchronization took place */
                 DATA_SYNC();
 
                 /* allow threads to dequeue entropy jobs */
                 ps_codec->au4_entropy_thread_active[ctxt_sel] = 0;
 
                 if (error_status != IH264_SUCCESS)
                 {
                     ps_proc->i4_error_code = error_status;
                     return ret;
                 }
                 break;
 
             default:
                 ps_proc->i4_error_code = IH264_FAIL;
                 return ret;
         }
     }
 
     return ret;
 }
