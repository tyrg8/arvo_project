commit c6d900cfd5d10c428008dc40f804b9d9319cec87
Author: Caol√°n McNamara <caolanm@redhat.com>
Date:   Tue Mar 7 12:44:07 2023 +0000

    ofz#56737 use int instead of short in free_flag

diff --git a/src/hunspell/hashmgr.cxx b/src/hunspell/hashmgr.cxx
index 1818da5..ca4a71a 100644
--- a/src/hunspell/hashmgr.cxx
+++ b/src/hunspell/hashmgr.cxx
@@ -106,7 +106,7 @@ HashMgr::HashMgr(const char* tpath, const char* apath, const char* key)
   }
 }
 
-void HashMgr::free_flag(unsigned short* astr, short alen) {
+void HashMgr::free_flag(unsigned short* astr, int alen) {
   if (astr && (aliasf.empty() || TESTAFF(astr, ONLYUPCASEFLAG, alen)))
     delete[] astr;
 }
diff --git a/src/hunspell/hashmgr.hxx b/src/hunspell/hashmgr.hxx
index eb8c21f..fb465d2 100644
--- a/src/hunspell/hashmgr.hxx
+++ b/src/hunspell/hashmgr.hxx
@@ -90,69 +90,69 @@ enum flag { FLAG_CHAR, FLAG_LONG, FLAG_NUM, FLAG_UNI };
 class HashMgr {
   std::vector<struct hentry*> tableptr;
   flag flag_mode;
   int complexprefixes;
   int utf8;
   unsigned short forbiddenword;
   int langnum;
   std::string enc;
   std::string lang;
   struct cs_info* csconv;
   std::string ignorechars;
   std::vector<w_char> ignorechars_utf16;
   std::vector<unsigned short*> aliasf; // flag vector `compression' with aliases
   std::vector<unsigned short> aliasflen;
   std::vector<char*> aliasm; // morphological desciption `compression' with aliases
   // reptable created from REP table of aff file and from "ph:" fields
   // of the dic file. It contains phonetic and other common misspellings
   // (letters, letter groups and words) for better suggestions
   std::vector<replentry> reptable;
 
  public:
   HashMgr(const char* tpath, const char* apath, const char* key = NULL);
   ~HashMgr();
 
   struct hentry* lookup(const char* word, size_t len) const;
   int hash(const char* word, size_t len) const;
   struct hentry* walk_hashtable(int& col, struct hentry* hp) const;
 
   int add(const std::string& word);
   int add_with_flags(const std::string& word, const std::string& flags, const std::string& desc = NULL);
   int add_with_affix(const std::string& word, const std::string& pattern);
   int remove(const std::string& word);
   int decode_flags(unsigned short** result, const std::string& flags, FileMgr* af) const;
   bool decode_flags(std::vector<unsigned short>& result, const std::string& flags, FileMgr* af) const;
   unsigned short decode_flag(const std::string& flag) const;
   std::string encode_flag(unsigned short flag) const;
   int is_aliasf() const;
   int get_aliasf(int index, unsigned short** fvec, FileMgr* af) const;
   int is_aliasm() const;
   char* get_aliasm(int index) const;
   const std::vector<replentry>& get_reptable() const;
 
  private:
   int get_clen_and_captype(const std::string& word, int* captype);
   int get_clen_and_captype(const std::string& word, int* captype, std::vector<w_char> &workbuf);
   int load_tables(const char* tpath, const char* key);
   int add_word(const std::string& word,
                int wcl,
                unsigned short* ap,
                int al,
                const std::string* desc,
                bool onlyupcase,
                int captype);
   int load_config(const char* affpath, const char* key);
   bool parse_aliasf(const std::string& line, FileMgr* af);
   int add_hidden_capitalized_word(const std::string& word,
                                   int wcl,
                                   unsigned short* flags,
                                   int al,
                                   const std::string* dp,
                                   int captype);
   bool parse_aliasm(const std::string& line, FileMgr* af);
   bool parse_reptable(const std::string& line, FileMgr* af);
   int remove_forbidden_flag(const std::string& word);
   void free_table();
-  void free_flag(unsigned short* astr, short alen);
+  void free_flag(unsigned short* astr, int alen);
 };
 
 #endif
