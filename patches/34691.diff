commit 9a72869043e0377ec549a325a074e592f82ef5ed
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Thu May 27 08:13:49 2021 +0900

    array.c: check for negative shift size.

diff --git a/src/array.c b/src/array.c
index 739b2b3e1..a49c2399c 100644
--- a/src/array.c
+++ b/src/array.c
@@ -582,44 +582,45 @@ static mrb_value
 mrb_ary_shift_m(mrb_state *mrb, mrb_value self)
 {
   struct RArray *a = mrb_ary_ptr(self);
   mrb_int len = ARY_LEN(a);
   mrb_int n;
   mrb_value val;
 
   if (mrb_get_args(mrb, "|i", &n) == 0) {
     return mrb_ary_shift(mrb, self);
   };
   ary_modify_check(mrb, a);
   if (len == 0 || n == 0) return mrb_ary_new(mrb);
+  if (n < 0) mrb_raise(mrb, E_ARGUMENT_ERROR, "negative array shift");
   if (n > len) n = len;
   val = mrb_ary_new_from_values(mrb, n, ARY_PTR(a));
   if (ARY_SHARED_P(a)) {
   L_SHIFT:
     a->as.heap.ptr+=n;
     a->as.heap.len-=n;
     return val;
   }
   if (len > ARY_SHIFT_SHARED_MIN) {
     ary_make_shared(mrb, a);
     goto L_SHIFT;
   }
   else if (len == n) {
     ARY_SET_LEN(a, 0);
   }
   else {
     mrb_value *ptr = ARY_PTR(a);
     mrb_int size = len-n;
 
     while (size--) {
       *ptr = *(ptr+n);
       ++ptr;
     }
     ARY_SET_LEN(a, len-n);
   }
   return val;
 }
 
 /* self = [1,2,3]
    item = 0
    self.unshift item
    p self #=> [0, 1, 2, 3] */
