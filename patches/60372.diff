commit 2a00fecd38857cad686cf150dfe499ee15d6e220
Author: DRC <information@libjpeg-turbo.org>
Date:   Thu Jul 6 10:29:27 2023 -0400

    Restore xform fuzzer behavior from before 655450bb
    
    The intent was for the final transform operation to be the same as the
    first transform operation but without TJXOPT_COPYNONE or
    TJFLAG_NOREALLOC.  Unrolling the transform operations in
    655450bbde5d8a5b63447b8e30256f221a0481c7 accidentally changed that.

diff --git a/fuzz/transform.cc b/fuzz/transform.cc
index 99d1584c..6fd94b4d 100644
--- a/fuzz/transform.cc
+++ b/fuzz/transform.cc
@@ -35,119 +35,122 @@
 extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
   tjhandle handle = NULL;
   unsigned char *dstBufs[1] = { NULL };
   unsigned long dstSizes[1] = { 0 }, maxBufSize;
   int width = 0, height = 0, jpegSubsamp, jpegColorspace, i;
   tjtransform transforms[1];
 #if defined(__has_feature) && __has_feature(memory_sanitizer)
   char env[18] = "JSIMD_FORCENONE=1";
 
   /* The libjpeg-turbo SIMD extensions produce false positives with
      MemorySanitizer. */
   putenv(env);
 #endif
 
   if ((handle = tjInitTransform()) == NULL)
     goto bailout;
 
   /* We ignore the return value of tjDecompressHeader3(), because some JPEG
      images may have unusual subsampling configurations that the TurboJPEG API
      cannot identify but can still transform. */
   tjDecompressHeader3(handle, data, size, &width, &height, &jpegSubsamp,
                       &jpegColorspace);
 
   /* Ignore 0-pixel images and images larger than 1 Megapixel.  Casting width
      to (uint64_t) prevents integer overflow if width * height > INT_MAX. */
   if (width < 1 || height < 1 || (uint64_t)width * height > 1048576)
     goto bailout;
 
   if (jpegSubsamp < 0 || jpegSubsamp >= TJ_NUMSAMP)
     jpegSubsamp = TJSAMP_444;
 
   memset(&transforms[0], 0, sizeof(tjtransform));
 
   transforms[0].op = TJXOP_NONE;
   transforms[0].options = TJXOPT_PROGRESSIVE | TJXOPT_COPYNONE;
   dstBufs[0] = (unsigned char *)malloc(tjBufSize(width, height, jpegSubsamp));
   if (!dstBufs[0])
     goto bailout;
 
   maxBufSize = tjBufSize(width, height, jpegSubsamp);
 
   if (tjTransform(handle, data, size, 1, dstBufs, dstSizes, transforms,
                   TJFLAG_LIMITSCANS | TJFLAG_NOREALLOC) == 0) {
     /* Touch all of the output pixels in order to catch uninitialized reads
        when using MemorySanitizer. */
     int sum = 0;
 
     for (i = 0; i < dstSizes[0]; i++)
       sum += dstBufs[0][i];
 
     /* Prevent the code above from being optimized out.  This test should
        never be true, but the compiler doesn't know that. */
     if (sum > 255 * maxBufSize)
       goto bailout;
   }
 
   free(dstBufs[0]);
   dstBufs[0] = NULL;
 
   transforms[0].r.w = (height + 1) / 2;
   transforms[0].r.h = (width + 1) / 2;
   transforms[0].op = TJXOP_TRANSPOSE;
   transforms[0].options = TJXOPT_GRAY | TJXOPT_CROP | TJXOPT_COPYNONE;
   dstBufs[0] =
     (unsigned char *)malloc(tjBufSize((height + 1) / 2, (width + 1) / 2,
                                       jpegSubsamp));
   if (!dstBufs[0])
     goto bailout;
 
   maxBufSize = tjBufSize((height + 1) / 2, (width + 1) / 2, jpegSubsamp);
 
   if (tjTransform(handle, data, size, 1, dstBufs, dstSizes, transforms,
                   TJFLAG_LIMITSCANS | TJFLAG_NOREALLOC) == 0) {
     int sum = 0;
 
     for (i = 0; i < dstSizes[0]; i++)
       sum += dstBufs[0][i];
 
     if (sum > 255 * maxBufSize)
       goto bailout;
   }
 
   free(dstBufs[0]);
   dstBufs[0] = NULL;
 
   transforms[0].op = TJXOP_ROT90;
   transforms[0].options = TJXOPT_TRIM;
   dstBufs[0] = (unsigned char *)malloc(tjBufSize(height, width, jpegSubsamp));
   if (!dstBufs[0])
     goto bailout;
 
   maxBufSize = tjBufSize(height, width, jpegSubsamp);
 
   if (tjTransform(handle, data, size, 1, dstBufs, dstSizes, transforms,
                   TJFLAG_LIMITSCANS | TJFLAG_NOREALLOC) == 0) {
     int sum = 0;
 
     for (i = 0; i < dstSizes[0]; i++)
       sum += dstBufs[0][i];
 
     if (sum > 255 * maxBufSize)
       goto bailout;
   }
 
   free(dstBufs[0]);
   dstBufs[0] = NULL;
+
+  transforms[0].op = TJXOP_NONE;
+  transforms[0].options = TJXOPT_PROGRESSIVE;
   dstSizes[0] = 0;
 
   if (tjTransform(handle, data, size, 1, dstBufs, dstSizes, transforms,
                   TJFLAG_LIMITSCANS) == 0) {
     int sum = 0;
 
     for (i = 0; i < dstSizes[0]; i++)
       sum += dstBufs[0][i];
 
     if (sum > 255 * maxBufSize)
       goto bailout;
   }
