commit d6f15361ee63ff13dfb57f3eac119e3d50e65c56
Author: James Bonfield <jkb@sanger.ac.uk>
Date:   Fri Feb 14 10:04:30 2020 +0000

    Protect against CRAM compression headers having negative ref_seq_start.
    
    This could trigger buffer read overruns in the MD5 calculation code
    (and perhaps more).
    
    Credit to OSS-Fuzz
    Fixes oss-fuzz 20694

diff --git a/cram/cram_decode.c b/cram/cram_decode.c
index 4638fac4..8cf3403b 100644
--- a/cram/cram_decode.c
+++ b/cram/cram_decode.c
@@ -949,100 +949,106 @@ void cram_decode_estimate_sizes(cram_block_compression_hdr *hdr, cram_slice *s,
 /*
  * Decodes a CRAM (un)mapped slice header block.
  * Returns slice header ptr on success
  *         NULL on failure
  */
 cram_block_slice_hdr *cram_decode_slice_header(cram_fd *fd, cram_block *b) {
     cram_block_slice_hdr *hdr;
     unsigned char *cp;
     unsigned char *cp_end;
     int i;
 
     if (b->method != RAW) {
         /* Spec. says slice header should be RAW, but we can future-proof
            by trying to decode it if it isn't. */
         if (cram_uncompress_block(b) < 0)
             return NULL;
     }
     cp =  (unsigned char *)BLOCK_DATA(b);
     cp_end = cp + b->uncomp_size;
 
     if (b->content_type != MAPPED_SLICE &&
         b->content_type != UNMAPPED_SLICE)
         return NULL;
 
     if (!(hdr  = calloc(1, sizeof(*hdr))))
         return NULL;
 
     hdr->content_type = b->content_type;
 
     if (b->content_type == MAPPED_SLICE) {
         cp += safe_itf8_get((char *)cp,  (char *)cp_end, &hdr->ref_seq_id);
 #ifdef LARGE_POS
         cp += safe_ltf8_get((char *)cp,  (char *)cp_end, &hdr->ref_seq_start);
         cp += safe_ltf8_get((char *)cp,  (char *)cp_end, &hdr->ref_seq_span);
 #else
         int32_t i32;
         cp += safe_itf8_get((char *)cp,  (char *)cp_end, &i32);
         hdr->ref_seq_start = i32;
         cp += safe_itf8_get((char *)cp,  (char *)cp_end, &i32);
         hdr->ref_seq_span = i32;
 #endif
+        if (hdr->ref_seq_start < 0 || hdr->ref_seq_span < 0) {
+            free(hdr);
+            hts_log_error("Negative values not permitted for header "
+                          "sequence start or span fields");
+            return NULL;
+        }
     }
     cp += safe_itf8_get((char *)cp,  (char *)cp_end, &hdr->num_records);
     hdr->record_counter = 0;
     if (CRAM_MAJOR_VERS(fd->version) == 2) {
         int32_t i32 = 0;
         cp += safe_itf8_get((char *)cp, (char *)cp_end, &i32);
         hdr->record_counter = i32;
     } else if (CRAM_MAJOR_VERS(fd->version) >= 3) {
         cp += safe_ltf8_get((char *)cp, (char *)cp_end, &hdr->record_counter);
     }
 
     cp += safe_itf8_get((char *)cp, (char *)cp_end, &hdr->num_blocks);
 
     cp += safe_itf8_get((char *)cp, (char *)cp_end, &hdr->num_content_ids);
     if (hdr->num_content_ids < 1 ||
         hdr->num_content_ids >= SIZE_MAX / sizeof(int32_t)) {
         /* Slice must have at least one data block,
            and malloc'd size shouldn't wrap. */
         free(hdr);
         return NULL;
     }
     hdr->block_content_ids = malloc(hdr->num_content_ids * sizeof(int32_t));
     if (!hdr->block_content_ids) {
         free(hdr);
         return NULL;
     }
 
     for (i = 0; i < hdr->num_content_ids; i++) {
         int l = safe_itf8_get((char *)cp, (char *)cp_end,
                               &hdr->block_content_ids[i]);
         if (l <= 0) {
             free(hdr->block_content_ids);
             free(hdr);
             return NULL;
         }
         cp += l;
     }
 
     if (b->content_type == MAPPED_SLICE) {
         cp += safe_itf8_get((char *)cp, (char *) cp_end, &hdr->ref_base_id);
     }
 
     if (CRAM_MAJOR_VERS(fd->version) != 1) {
         if (cp_end - cp < 16) {
             free(hdr->block_content_ids);
             free(hdr);
             return NULL;
         }
         memcpy(hdr->md5, cp, 16);
     } else {
         memset(hdr->md5, 0, 16);
     }
 
     return hdr;
 }
 
 
 #if 0
 /* Returns the number of bits set in val; it the highest bit used */
