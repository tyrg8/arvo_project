commit 22f05d620f428c0769227f0173876c95fb9aead4
Author: Michael Mann <mmann78@netscape.net>
Date:   Wed Apr 19 21:43:49 2017 -0400

    packet-quakeworld.c: Fix potential out of bounds error.
    
    Overflow can occur while writing to a buffer.
    
    Link: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1179
    Bug: 13624
    Change-Id: I7511c43ed67f81d246e3eb66e092353e2ab4924c
    Reviewed-on: https://code.wireshark.org/review/21235
    Petri-Dish: Michael Mann <mmann78@netscape.net>
    Tested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>
    Reviewed-by: Peter Wu <peter@lekensteyn.nl>
    Reviewed-by: Michael Mann <mmann78@netscape.net>

diff --git a/epan/dissectors/packet-quakeworld.c b/epan/dissectors/packet-quakeworld.c
index d3e1e84037..59a16585c1 100644
--- a/epan/dissectors/packet-quakeworld.c
+++ b/epan/dissectors/packet-quakeworld.c
@@ -85,78 +85,76 @@ static expert_field ei_quakeworld_connectionless_command_invalid = EI_INIT;
 
 #define MAX_TEXT_SIZE	2048
 
-static	char	com_token[MAX_TEXT_SIZE+1];
-static	int	com_token_start;
-static	int	com_token_length;
-
 static const char *
-COM_Parse (const char *data)
+COM_Parse (const char *data, int data_len, int* token_start, int* token_len)
 {
-	int	c;
-	int	len;
+	int c;
+	char* com_token = (char*)wmem_alloc(wmem_packet_scope(), data_len+1);
 
-	len = 0;
 	com_token[0] = '\0';
-	com_token_start = 0;
-	com_token_length = 0;
+	*token_start = 0;
+	*token_len = 0;
 
 	if (data == NULL)
 		return NULL;
 
 	/* skip whitespace */
 skipwhite:
 	while (TRUE) {
 		c = *data;
 		if (c == '\0')
 			return NULL;	/* end of file; */
 		if ((c != ' ') && (!g_ascii_iscntrl(c)))
 		    break;
 		data++;
-		com_token_start++;
+		(*token_start)++;
 	}
 
 	/* skip // comments */
 	if ((c=='/') && (data[1]=='/')) {
 		while (*data && *data != '\n'){
 			data++;
-			com_token_start++;
+			(*token_start)++;
 		}
 		goto skipwhite;
 	}
 
 	/* handle quoted strings specially */
 	if (c == '\"') {
 		data++;
-		com_token_start++;
-		while (TRUE) {
+		(*token_start)++;
+		while (*token_len < data_len) {
 			c = *data++;
 			if ((c=='\"') || (c=='\0')) {
-				com_token[len] = '\0';
+				com_token[*token_len] = '\0';
 				return data;
 			}
-			com_token[len] = c;
-			len++;
-			com_token_length++;
+			com_token[*token_len] = c;
+			(*token_len)++;
 		}
 	}
 
+	if (*token_len == data_len) {
+		com_token[*token_len] = '\0';
+		return data;
+	}
+
 	/* parse a regular word */
 	do {
-		com_token[len] = c;
+		com_token[*token_len] = c;
 		data++;
-		len++;
-		com_token_length++;
+		(*token_len)++;
 		c = *data;
-	} while (( c != ' ') && (!g_ascii_iscntrl(c)));
+	} while (( c != ' ') && (!g_ascii_iscntrl(c)) && (*token_len < data_len));
 
-	com_token[len] = '\0';
+	com_token[*token_len] = '\0';
 	return data;
 }
 
 
 #define			MAX_ARGS 80
 static	int		cmd_argc = 0;
-static	char		*cmd_argv[MAX_ARGS];
+static	const char	*cmd_argv[MAX_ARGS];
 static	const char	*cmd_null_string = "";
 static	int		cmd_argv_start[MAX_ARGS];
 static	int		cmd_argv_length[MAX_ARGS];
@@ -198,41 +196,42 @@ Cmd_Argv_length(int arg)
 
 
 static void
-Cmd_TokenizeString(const char* text)
+Cmd_TokenizeString(const char* text, int text_len)
 {
 	int start;
-
+	int com_token_start;
+	int com_token_length;
 	cmd_argc = 0;
 
 	start = 0;
-	while (TRUE) {
+	while (start < text_len) {
 
 		/* skip whitespace up to a \n */
-		while (*text && *text <= ' ' && *text != '\n') {
+		while (*text && *text <= ' ' && *text != '\n' && start < text_len) {
 			text++;
 			start++;
 		}
 
 		if (*text == '\n') {
 			/* a newline separates commands in the buffer */
 			text++;
 			break;
 		}
 
-		if (!*text)
+		if ((!*text) || (start == text_len))
 			return;
 
-		text = COM_Parse (text);
+		text = COM_Parse (text, text_len-start, &com_token_start, &com_token_length);
 		if (!text)
 			return;
 
 		if (cmd_argc < MAX_ARGS) {
-			cmd_argv[cmd_argc] = wmem_strdup(wmem_packet_scope(), com_token);
+			cmd_argv[cmd_argc] = (char*)text;
 			cmd_argv_start[cmd_argc] = start + com_token_start;
 			cmd_argv_length[cmd_argc] = com_token_length;
 			cmd_argc++;
 		}
 
 		start += com_token_start + com_token_length;
 	}
 }
@@ -347,201 +346,201 @@ static void
 dissect_quakeworld_ConnectionlessPacket(tvbuff_t *tvb, packet_info *pinfo,
 	proto_tree *tree, int direction)
 {
 	proto_tree	*cl_tree;
 	proto_tree	*text_tree = NULL;
 	proto_item	*pi = NULL;
 	guint8		*text;
 	int		len;
 	int		offset;
 	guint32		marker;
 	int		command_len;
 	const char	*command = "";
 	gboolean	command_finished = FALSE;
 
 	marker = tvb_get_ntohl(tvb, 0);
 	cl_tree = proto_tree_add_subtree(tree, tvb, 0, -1, ett_quakeworld_connectionless, NULL, "Connectionless");
 
 	proto_tree_add_uint(cl_tree, hf_quakeworld_connectionless_marker,
 				tvb, 0, 4, marker);
 
 	/* all the rest of the packet is just text */
 	offset = 4;
 
 	text = tvb_get_stringz_enc(wmem_packet_scope(), tvb, offset, &len, ENC_ASCII|ENC_NA);
 	/* actually, we should look for a eol char and stop already there */
 
 	if (cl_tree) {
 		proto_item *text_item;
 		text_item = proto_tree_add_string(cl_tree, hf_quakeworld_connectionless_text,
 						  tvb, offset, len, text);
 		text_tree = proto_item_add_subtree(text_item, ett_quakeworld_connectionless_text);
 	}
 
 	if (direction == DIR_C2S) {
 		/* client to server commands */
 		const char *c;
 
-		Cmd_TokenizeString(text);
+		Cmd_TokenizeString(text, len);
 		c = Cmd_Argv(0);
 
 		/* client to sever commands */
 		if (strcmp(c,"ping") == 0) {
 			command = "Ping";
 			command_len = 4;
 		} else if (strcmp(c,"status") == 0) {
 			command = "Status";
 			command_len = 6;
 		} else if (strcmp(c,"log") == 0) {
 			command = "Log";
 			command_len = 3;
 		} else if (strcmp(c,"connect") == 0) {
 			guint32 version = 0;
 			guint16 qport = 0;
 			guint32 challenge = 0;
 			gboolean version_valid = TRUE;
 			gboolean qport_valid = TRUE;
 			gboolean challenge_valid = TRUE;
 			const char *infostring;
 			proto_tree *argument_tree = NULL;
 			command = "Connect";
 			command_len = Cmd_Argv_length(0);
 			if (text_tree) {
 				proto_item *argument_item;
 				pi = proto_tree_add_string(text_tree, hf_quakeworld_connectionless_command,
 					tvb, offset, command_len, command);
 				argument_item = proto_tree_add_string(text_tree,
 					hf_quakeworld_connectionless_arguments,
 					tvb, offset + Cmd_Argv_start(1), len + 1 - Cmd_Argv_start(1),
 					text + Cmd_Argv_start(1));
 				argument_tree = proto_item_add_subtree(argument_item,
 								       ett_quakeworld_connectionless_arguments);
 				command_finished=TRUE;
 			}
 			version_valid = ws_strtou32(Cmd_Argv(1), NULL, &version);
 			qport_valid = ws_strtou16(Cmd_Argv(2), NULL, &qport);
 			challenge_valid = ws_strtou32(Cmd_Argv(3), NULL, &challenge);
 			infostring = Cmd_Argv(4);
 
 			if (text_tree && (!version_valid || !qport_valid || !challenge_valid))
 				expert_add_info(pinfo, pi, &ei_quakeworld_connectionless_command_invalid);
 
 			if (argument_tree) {
 				proto_item *info_item;
 				proto_tree *info_tree;
 				proto_tree_add_uint(argument_tree,
 					hf_quakeworld_connectionless_connect_version,
 					tvb,
 					offset + Cmd_Argv_start(1),
 					Cmd_Argv_length(1), version);
 				proto_tree_add_uint(argument_tree,
 					hf_quakeworld_connectionless_connect_qport,
 					tvb,
 					offset + Cmd_Argv_start(2),
 					Cmd_Argv_length(2), qport);
 				proto_tree_add_int(argument_tree,
 					hf_quakeworld_connectionless_connect_challenge,
 					tvb,
 					offset + Cmd_Argv_start(3),
 					Cmd_Argv_length(3), challenge);
 				info_item = proto_tree_add_string(argument_tree,
 					hf_quakeworld_connectionless_connect_infostring,
 					tvb,
 					offset + Cmd_Argv_start(4),
 					Cmd_Argv_length(4), infostring);
 				info_tree = proto_item_add_subtree(
 					info_item, ett_quakeworld_connectionless_connect_infostring);
 				dissect_id_infostring(tvb, info_tree, offset + Cmd_Argv_start(4),
 					wmem_strdup(wmem_packet_scope(), infostring),
 					ett_quakeworld_connectionless_connect_infostring_key_value,
 					hf_quakeworld_connectionless_connect_infostring_key_value,
 					hf_quakeworld_connectionless_connect_infostring_key,
 					hf_quakeworld_connectionless_connect_infostring_value);
 			}
 		} else if (strcmp(c,"getchallenge") == 0) {
 			command = "Get Challenge";
 			command_len = Cmd_Argv_length(0);
 		} else if (strcmp(c,"rcon") == 0) {
 			const char* password;
 			int i;
 			char remaining[MAX_TEXT_SIZE+1];
 			proto_tree *argument_tree = NULL;
 			command = "Remote Command";
 			command_len = Cmd_Argv_length(0);
 			if (text_tree) {
 				proto_item *argument_item;
 				proto_tree_add_string(text_tree, hf_quakeworld_connectionless_command,
 					tvb, offset, command_len, command);
 				argument_item = proto_tree_add_string(text_tree,
 					hf_quakeworld_connectionless_arguments,
 					tvb, offset + Cmd_Argv_start(1), len - Cmd_Argv_start(1),
 					text + Cmd_Argv_start(1));
 				argument_tree =	proto_item_add_subtree(argument_item,
 								       ett_quakeworld_connectionless_arguments);
 				command_finished=TRUE;
 			}
 			password = Cmd_Argv(1);
 			if (argument_tree) {
 				proto_tree_add_string(argument_tree,
 					hf_quakeworld_connectionless_rcon_password,
 					tvb,
 					offset + Cmd_Argv_start(1),
 					Cmd_Argv_length(1), password);
 			}
 			remaining[0] = '\0';
 			for (i=2; i<Cmd_Argc() ; i++) {
 				g_strlcat (remaining, Cmd_Argv(i), MAX_TEXT_SIZE+1);
 				g_strlcat (remaining, " ", MAX_TEXT_SIZE+1);
 			}
 			if (text_tree) {
 				proto_tree_add_string(argument_tree,
 					hf_quakeworld_connectionless_rcon_command,
 					tvb, offset + Cmd_Argv_start(2),
 					Cmd_Argv_start(Cmd_Argc()-1) + Cmd_Argv_length(Cmd_Argc()-1) -
 					Cmd_Argv_start(2),
 					remaining);
 			}
 		} else if (c[0]==A2A_PING && ( c[1]=='\0' || c[1]=='\n')) {
 			command = "Ping";
 			command_len = 1;
 		} else if (c[0]==A2A_ACK && ( c[1]=='\0' || c[1]=='\n')) {
 			command = "Ack";
 			command_len = 1;
 		} else {
 			command = "Unknown";
 			command_len = len - 1;
 		}
 	}
 	else {
 		/* server to client commands */
 		if (text[0] == S2C_CONNECTION) {
 			command = "Connected";
 			command_len = 1;
 		} else if (text[0] == A2C_CLIENT_COMMAND) {
 			command = "Client Command";
 			command_len = 1;
 			/* stringz (command), stringz (localid) */
 		} else if (text[0] == A2C_PRINT) {
 			command = "Print";
 			command_len = 1;
 			/* string */
 		} else if (text[0] == A2A_PING) {
 			command = "Ping";
 			command_len = 1;
 		} else if (text[0] == S2C_CHALLENGE) {
 			command = "Challenge";
 			command_len = 1;
 			/* string, conversion */
 		} else {
 			command = "Unknown";
 			command_len = len - 1;
 		}
 	}
 
 	col_append_fstr(pinfo->cinfo, COL_INFO, " %s", command);
 
 	if (!command_finished) {
 		proto_tree_add_string(text_tree, hf_quakeworld_connectionless_command,
 			tvb, offset, command_len, command);
 	}
 	/*offset += len;*/
 }
