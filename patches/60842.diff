commit a85502d98221974d90feab27db9453b0d2cc16eb
Author: Vladimir Davydov <vdavydov@tarantool.org>
Date:   Wed Aug 23 15:27:09 2023 +0300

    msgpack: remove dead code handling invalid MP_EXT
    
    We have a few functions that decode MsgPack data assuming it was
    previously checked with mp_check(). This means it's safe to expect
    that MP_EXT contains valid data because we install a custom checker
    for MP_EXT in msgpack_init. So let's replace errors with assertions,
    removing the dead code.
    
    NO_DOC=code cleanup
    NO_TEST=code cleanup
    NO_CHANGELOG=code cleanup

diff --git a/src/box/bind.c b/src/box/bind.c
index 579659ad6..5d26f86b7 100644
--- a/src/box/bind.c
+++ b/src/box/bind.c
@@ -52,106 +52,93 @@ int
 sql_bind_decode(struct sql_bind *bind, int i, const char **packet)
 {
 	bind->pos = i + 1;
 	if (mp_typeof(**packet) == MP_MAP) {
 		uint32_t len = mp_decode_map(packet);
 		/*
 		 * A named parameter is an MP_MAP with
 		 * one key - {'name': value}.
 		 * Report parse error otherwise.
 		 */
 		if (len != 1 || mp_typeof(**packet) != MP_STR) {
 			diag_set(ClientError, ER_INVALID_MSGPACK,
 				 "SQL bind parameter");
 			return -1;
 		}
 		bind->name = mp_decode_str(packet, &bind->name_len);
 	} else {
 		bind->name = NULL;
 		bind->name_len = 0;
 	}
 	enum mp_type type = mp_typeof(**packet);
 	switch (type) {
 	case MP_UINT: {
 		uint64_t n = mp_decode_uint(packet);
 		bind->u64 = n;
 		bind->bytes = sizeof(bind->u64);
 		break;
 	}
 	case MP_INT:
 		bind->i64 = mp_decode_int(packet);
 		bind->bytes = sizeof(bind->i64);
 		break;
 	case MP_STR:
 		bind->s = mp_decode_str(packet, &bind->bytes);
 		break;
 	case MP_DOUBLE:
 		bind->d = mp_decode_double(packet);
 		bind->bytes = sizeof(bind->d);
 		break;
 	case MP_FLOAT:
 		bind->d = mp_decode_float(packet);
 		bind->bytes = sizeof(bind->d);
 		break;
 	case MP_NIL:
 		mp_decode_nil(packet);
 		bind->bytes = 1;
 		break;
 	case MP_BOOL:
 		bind->b = mp_decode_bool(packet);
 		bind->bytes = sizeof(bind->b);
 		break;
 	case MP_BIN:
 		bind->s = mp_decode_bin(packet, &bind->bytes);
 		break;
 	case MP_EXT: {
 		int8_t ext_type;
 		uint32_t size = mp_decode_extl(packet, &ext_type);
 		switch (ext_type) {
 		case MP_UUID:
-			if (uuid_unpack(packet, size, &bind->uuid) == NULL) {
-				diag_set(ClientError, ER_INVALID_MSGPACK,
-					 "Invalid MP_UUID MsgPack format");
-				return -1;
-			}
+			VERIFY(uuid_unpack(packet, size, &bind->uuid) != NULL);
 			break;
 		case MP_DECIMAL:
-			if (decimal_unpack(packet, size, &bind->dec) == NULL) {
-				diag_set(ClientError, ER_INVALID_MSGPACK,
-					 "Invalid MP_DECIMAL MsgPack format");
-				return -1;
-			}
+			VERIFY(decimal_unpack(packet, size,
+					      &bind->dec) != NULL);
 			break;
 		case MP_DATETIME:
-			if (datetime_unpack(packet, size, &bind->dt) == NULL) {
-				diag_set(ClientError, ER_INVALID_MSGPACK,
-					 "Invalid MP_DATETIME MsgPack format");
-				return -1;
-			}
+			VERIFY(datetime_unpack(packet, size,
+					       &bind->dt) != NULL);
 			break;
 		case MP_INTERVAL:
-			if (interval_unpack(packet, size, &bind->itv) == NULL) {
-				diag_set(ClientError, ER_INVALID_MSGPACK,
-					 "Invalid MP_INTERVAL MsgPack format");
-				return -1;
-			}
+			VERIFY(interval_unpack(packet, size,
+					       &bind->itv) != NULL);
 			break;
 		default:
 			diag_set(ClientError, ER_SQL_BIND_TYPE, "USERDATA",
 				 sql_bind_name(bind));
 			return -1;
 		}
 		bind->ext_type = ext_type;
 		break;
 	}
 	case MP_ARRAY:
 	case MP_MAP:
 		bind->s = *packet;
 		mp_next(packet);
 		bind->bytes = *packet - bind->s;
 		break;
 	default:
 		unreachable();
 	}
 	bind->type = type;
 	return 0;
 }
diff --git a/src/box/sql/mem.c b/src/box/sql/mem.c
index aa46d551f..4e1ad4188 100644
--- a/src/box/sql/mem.c
+++ b/src/box/sql/mem.c
@@ -2676,89 +2676,83 @@ int
 mem_cmp_msgpack(const struct Mem *a, const char **b, int *result,
 		const struct coll *coll)
 {
 	struct Mem mem;
 	switch (mp_typeof(**b)) {
 	case MP_NIL:
 		mem.type = MEM_TYPE_NULL;
 		mp_decode_nil(b);
 		break;
 	case MP_BOOL:
 		mem.type = MEM_TYPE_BOOL;
 		mem.u.b = mp_decode_bool(b);
 		break;
 	case MP_UINT:
 		mem.type = MEM_TYPE_UINT;
 		mem.u.u = mp_decode_uint(b);
 		break;
 	case MP_INT:
 		mem.type = MEM_TYPE_INT;
 		mem.u.i = mp_decode_int(b);
 		break;
 	case MP_FLOAT:
 		mem.type = MEM_TYPE_DOUBLE;
 		mem.u.r = mp_decode_float(b);
 		break;
 	case MP_DOUBLE:
 		mem.type = MEM_TYPE_DOUBLE;
 		mem.u.r = mp_decode_double(b);
 		break;
 	case MP_STR:
 		mem.type = MEM_TYPE_STR;
 		mem.n = mp_decode_strl(b);
 		mem.z = (char *)*b;
 		*b += mem.n;
 		mem.flags = MEM_Ephem;
 		break;
 	case MP_BIN:
 		mem.type = MEM_TYPE_BIN;
 		mem.n = mp_decode_binl(b);
 		mem.z = (char *)*b;
 		*b += mem.n;
 		mem.flags = MEM_Ephem;
 		break;
 	case MP_ARRAY:
 	case MP_MAP:
 		mp_next(b);
 		*result = -1;
 		return 0;
 	case MP_EXT: {
 		int8_t type;
 		const char *buf = *b;
 		uint32_t len = mp_decode_extl(b, &type);
 		if (type == MP_UUID) {
 			assert(len == UUID_LEN);
 			mem.type = MEM_TYPE_UUID;
-			if (uuid_unpack(b, len, &mem.u.uuid) == NULL)
-				return -1;
+			VERIFY(uuid_unpack(b, len, &mem.u.uuid) != NULL);
 			break;
 		} else if (type == MP_DECIMAL) {
 			mem.type = MEM_TYPE_DEC;
-			if (decimal_unpack(b, len, &mem.u.d) == 0)
-				return -1;
+			VERIFY(decimal_unpack(b, len, &mem.u.d) != NULL);
 			break;
 		} else if (type == MP_DATETIME) {
 			mem.type = MEM_TYPE_DATETIME;
-			if (datetime_unpack(b, len, &mem.u.dt) == 0) {
-				diag_set(ClientError, ER_INVALID_MSGPACK,
-					 "Invalid MP_DATETIME MsgPack format");
-				return -1;
-			}
+			VERIFY(datetime_unpack(b, len, &mem.u.dt) != NULL);
 			break;
 		} else if (type == MP_INTERVAL) {
 			diag_set(ClientError, ER_SQL_TYPE_MISMATCH, mp_str(*b),
 				 "comparable type");
 			return -1;
 		}
 		*b += len;
 		mem.type = MEM_TYPE_BIN;
 		mem.z = (char *)buf;
 		mem.n = *b - buf;
 		mem.flags = MEM_Ephem;
 		break;
 	}
 	default:
 		unreachable();
 	}
 	*result = mem_cmp_scalar(a, &mem, coll);
 	return 0;
 }
@@ -3020,138 +3014,124 @@ int
 mem_from_mp_ephemeral(struct Mem *mem, const char *buf, uint32_t *len)
 {
 	const char *start_buf = buf;
 	switch (mp_typeof(*buf)) {
 	case MP_ARRAY: {
 		mem->z = (char *)buf;
 		mp_next(&buf);
 		mem->n = buf - mem->z;
 		mem->type = MEM_TYPE_ARRAY;
 		mem->flags = MEM_Ephem;
 		break;
 	}
 	case MP_MAP: {
 		mem->z = (char *)buf;
 		mp_next(&buf);
 		mem->n = buf - mem->z;
 		mem->type = MEM_TYPE_MAP;
 		mem->flags = MEM_Ephem;
 		break;
 	}
 	case MP_EXT: {
 		int8_t type;
 		const char *svp = buf;
 		uint32_t size = mp_decode_extl(&buf, &type);
 		if (type == MP_UUID) {
 			assert(size == UUID_LEN);
-			buf = svp;
-			if (mp_decode_uuid(&buf, &mem->u.uuid) == NULL) {
-				diag_set(ClientError, ER_INVALID_MSGPACK,
-					 "Invalid MP_UUID MsgPack format");
-				return -1;
-			}
+			VERIFY(uuid_unpack(&buf, size, &mem->u.uuid) != NULL);
 			mem->type = MEM_TYPE_UUID;
 			mem->flags = 0;
 			break;
 		} else if (type == MP_DECIMAL) {
-			buf = svp;
-			if (mp_decode_decimal(&buf, &mem->u.d) == NULL)
-				return -1;
+			VERIFY(decimal_unpack(&buf, size, &mem->u.d) != NULL);
 			mem->type = MEM_TYPE_DEC;
 			mem->flags = 0;
 			break;
 		} else if (type == MP_DATETIME) {
-			if (datetime_unpack(&buf, size, &mem->u.dt) == NULL) {
-				diag_set(ClientError, ER_INVALID_MSGPACK,
-					 "Invalid MP_DATETIME MsgPack format");
-				return -1;
-			}
+			VERIFY(datetime_unpack(&buf, size, &mem->u.dt) != NULL);
 			mem->type = MEM_TYPE_DATETIME;
 			mem->flags = 0;
 			break;
 		} else if (type == MP_INTERVAL) {
-			if (interval_unpack(&buf, size, &mem->u.itv) == NULL) {
-				diag_set(ClientError, ER_INVALID_MSGPACK,
-					 "Invalid MP_INTERVAL MsgPack format");
-				return -1;
-			}
+			VERIFY(interval_unpack(&buf, size,
+					       &mem->u.itv) != NULL);
 			mem->type = MEM_TYPE_INTERVAL;
 			mem->flags = 0;
 			break;
 		}
 		buf += size;
 		mem->z = (char *)svp;
 		mem->n = buf - svp;
 		mem->type = MEM_TYPE_BIN;
 		mem->flags = MEM_Ephem;
 		break;
 	}
 	case MP_NIL: {
 		mp_decode_nil(&buf);
 		mem->type = MEM_TYPE_NULL;
 		mem->flags = 0;
 		break;
 	}
 	case MP_BOOL: {
 		mem->u.b = mp_decode_bool(&buf);
 		mem->type = MEM_TYPE_BOOL;
 		mem->flags = 0;
 		break;
 	}
 	case MP_UINT: {
 		uint64_t v = mp_decode_uint(&buf);
 		mem->u.u = v;
 		mem->type = MEM_TYPE_UINT;
 		mem->flags = 0;
 		break;
 	}
 	case MP_INT: {
 		mem->u.i = mp_decode_int(&buf);
 		mem->type = MEM_TYPE_INT;
 		mem->flags = 0;
 		break;
 	}
 	case MP_STR: {
 		/* XXX u32->int */
 		mem->n = (int) mp_decode_strl(&buf);
 		mem->type = MEM_TYPE_STR;
 		mem->flags = MEM_Ephem;
 install_blob:
 		mem->z = (char *)buf;
 		buf += mem->n;
 		break;
 	}
 	case MP_BIN: {
 		/* XXX u32->int */
 		mem->n = (int) mp_decode_binl(&buf);
 		mem->type = MEM_TYPE_BIN;
 		mem->flags = MEM_Ephem;
 		goto install_blob;
 	}
 	case MP_FLOAT: {
 		mem->u.r = mp_decode_float(&buf);
 		if (sqlIsNaN(mem->u.r)) {
 			mem->type = MEM_TYPE_NULL;
 			mem->flags = 0;
 		} else {
 			mem->type = MEM_TYPE_DOUBLE;
 			mem->flags = 0;
 		}
 		break;
 	}
 	case MP_DOUBLE: {
 		mem->u.r = mp_decode_double(&buf);
 		if (sqlIsNaN(mem->u.r)) {
 			mem->type = MEM_TYPE_NULL;
 			mem->flags = 0;
 		} else {
 			mem->type = MEM_TYPE_DOUBLE;
 			mem->flags = 0;
 		}
 		break;
 	}
 	default:
 		unreachable();
 	}
 	*len = (uint32_t)(buf - start_buf);
 	return 0;
 }
@@ -3605,145 +3585,124 @@ struct Mem *
 port_c_get_vdbemem(struct port *base, uint32_t *size)
 {
 	struct port_c *port = (struct port_c *)base;
 	*size = port->size;
 	if (*size == 0 || *size > 1) {
 		diag_set(ClientError, ER_SQL_FUNC_WRONG_RET_COUNT, "C", *size);
 		return NULL;
 	}
 	/** FIXME: Implement an ability to return a vector. */
 	assert(*size == 1);
 	struct region *region = &fiber()->gc;
 	size_t region_svp = region_used(region);
 	struct Mem *val = vdbemem_alloc_on_region(port->size);
 	int i = 0;
 	const char *data;
 	struct port_c_entry *pe;
 	for (pe = port->first; pe != NULL; pe = pe->next) {
 		if (pe->mp_size == 0) {
 			data = tuple_data(pe->tuple);
 			if (mp_decode_array(&data) != 1) {
 				diag_set(ClientError, ER_SQL_EXECUTE,
 					 "Unsupported type passed from C");
 				goto error;
 			}
 		} else {
 			data = pe->mp;
 		}
 		uint32_t len;
 		mem_clear(&val[i]);
 		const char *str;
 		double d;
 		switch (mp_typeof(*data)) {
 		case MP_BOOL:
 			val[i].type = MEM_TYPE_BOOL;
 			assert(val[i].flags == 0);
 			val[i].u.b = mp_decode_bool(&data);
 			break;
 		case MP_FLOAT:
 			d = mp_decode_float(&data);
 			assert(val[i].flags == 0);
 			if (sqlIsNaN(d)) {
 				val[i].type = MEM_TYPE_NULL;
 				break;
 			}
 			val[i].type = MEM_TYPE_DOUBLE;
 			val[i].u.r = d;
 			break;
 		case MP_DOUBLE:
 			d = mp_decode_double(&data);
 			assert(val[i].flags == 0);
 			if (sqlIsNaN(d)) {
 				val[i].type = MEM_TYPE_NULL;
 				break;
 			}
 			val[i].type = MEM_TYPE_DOUBLE;
 			val[i].u.r = d;
 			break;
 		case MP_INT:
 			val[i].type = MEM_TYPE_INT;
 			assert(val[i].flags == 0);
 			val[i].u.i = mp_decode_int(&data);
 			break;
 		case MP_UINT:
 			val[i].type = MEM_TYPE_UINT;
 			assert(val[i].flags == 0);
 			val[i].u.u = mp_decode_uint(&data);
 			break;
 		case MP_STR:
 			str = mp_decode_str(&data, &len);
 			if (mem_copy_str(&val[i], str, len) != 0)
 				goto error;
 			break;
 		case MP_BIN:
 			str = mp_decode_bin(&data, &len);
 			if (mem_copy_bin(&val[i], str, len) != 0)
 				goto error;
 			break;
 		case MP_EXT:
 			str = data;
 			int8_t type;
 			len = mp_decode_extl(&data, &type);
 			if (type == MP_UUID) {
 				assert(len == UUID_LEN);
 				struct tt_uuid *uuid = &val[i].u.uuid;
-				data = str;
-				if (mp_decode_uuid(&data, uuid) == NULL) {
-					diag_set(ClientError,
-						 ER_INVALID_MSGPACK, "Invalid "
-						 "MP_UUID MsgPack format");
-					goto error;
-				}
+				VERIFY(uuid_unpack(&data, len, uuid) != NULL);
 				val[i].type = MEM_TYPE_UUID;
 				break;
 			} else if (type == MP_DECIMAL) {
 				decimal_t *d = &val[i].u.d;
-				data = str;
-				if (mp_decode_decimal(&data, d) == NULL) {
-					diag_set(ClientError,
-						 ER_INVALID_MSGPACK, "Invalid "
-						 "MP_DECIMAL MsgPack format");
-					goto error;
-				}
+				VERIFY(decimal_unpack(&data, len, d) != NULL);
 				val[i].type = MEM_TYPE_DEC;
 				break;
 			} else if (type == MP_DATETIME) {
 				struct datetime *dt = &val[i].u.dt;
-				if (datetime_unpack(&data, len, dt) == 0) {
-					diag_set(ClientError,
-						 ER_INVALID_MSGPACK, "Invalid "
-						 "MP_DATETIME MsgPack format");
-					goto error;
-				}
+				VERIFY(datetime_unpack(&data, len, dt) != NULL);
 				val[i].type = MEM_TYPE_DATETIME;
 				break;
 			} else if (type == MP_INTERVAL) {
 				struct interval *itv = &val[i].u.itv;
-				if (interval_unpack(&data, len, itv) == NULL) {
-					diag_set(ClientError,
-						 ER_INVALID_MSGPACK, "Invalid "
-						 "MP_INTERVAL MsgPack format");
-					goto error;
-				}
+				VERIFY(interval_unpack(&data, len,
+						       itv) != NULL);
 				val[i].type = MEM_TYPE_INTERVAL;
 				break;
 			}
 			data += len;
 			if (mem_copy_bin(&val[i], str, data - str) != 0)
 				goto error;
 			break;
 		case MP_NIL:
 			break;
 		default:
 			diag_set(ClientError, ER_SQL_EXECUTE,
 				 "Unsupported type passed from C");
 			goto error;
 		}
 		i++;
 	}
 	return val;
 error:
 	for (int i = 0; i < port->size; i++)
 		mem_destroy(&val[i]);
 	region_truncate(region, region_svp);
 	return NULL;
 }
diff --git a/src/lua/msgpack.c b/src/lua/msgpack.c
index cd7f6f460..dd25017b3 100644
--- a/src/lua/msgpack.c
+++ b/src/lua/msgpack.c
@@ -410,125 +410,113 @@ void
 luamp_decode(struct lua_State *L, struct luaL_serializer *cfg,
 	     const char **data)
 {
 	double d;
 	switch (mp_typeof(**data)) {
 	case MP_UINT:
 		luaL_pushuint64(L, mp_decode_uint(data));
 		break;
 	case MP_INT:
 		luaL_pushint64(L, mp_decode_int(data));
 		break;
 	case MP_FLOAT:
 		d = mp_decode_float(data);
 		luaL_checkfinite(L, cfg, d);
 		lua_pushnumber(L, d);
 		return;
 	case MP_DOUBLE:
 		d = mp_decode_double(data);
 		luaL_checkfinite(L, cfg, d);
 		lua_pushnumber(L, d);
 		return;
 	case MP_STR:
 	{
 		uint32_t len = 0;
 		const char *str = mp_decode_str(data, &len);
 		lua_pushlstring(L, str, len);
 		return;
 	}
 	case MP_BIN:
 	{
 		uint32_t len = 0;
 		const char *str = mp_decode_bin(data, &len);
 		if (msgpack_decode_binary_as_string)
 			lua_pushlstring(L, str, len);
 		else
 			luaT_pushvarbinary(L, str, len);
 		return;
 	}
 	case MP_BOOL:
 		lua_pushboolean(L, mp_decode_bool(data));
 		return;
 	case MP_NIL:
 		mp_decode_nil(data);
 		luaL_pushnull(L);
 		return;
 	case MP_ARRAY:
 	{
 		uint32_t size = mp_decode_array(data);
 		lua_createtable(L, size, 0);
 		for (uint32_t i = 0; i < size; i++) {
 			luamp_decode(L, cfg, data);
 			lua_rawseti(L, -2, i + 1);
 		}
 		if (cfg->decode_save_metatables)
 			luaL_setarrayhint(L, -1);
 		return;
 	}
 	case MP_MAP:
 	{
 		uint32_t size = mp_decode_map(data);
 		lua_createtable(L, 0, size);
 		for (uint32_t i = 0; i < size; i++) {
 			luamp_decode(L, cfg, data);
 			luamp_decode(L, cfg, data);
 			lua_settable(L, -3);
 		}
 		if (cfg->decode_save_metatables)
 			luaL_setmaphint(L, -1);
 		return;
 	}
 	case MP_EXT:
 	{
 		int8_t ext_type;
 		const char *svp = *data;
 		uint32_t len = mp_decode_extl(data, &ext_type);
 		switch (ext_type) {
 		case MP_DECIMAL:
 		{
 			decimal_t *dec = luaT_newdecimal(L);
-			dec = decimal_unpack(data, len, dec);
-			if (dec == NULL)
-				goto ext_decode_err;
+			VERIFY(decimal_unpack(data, len, dec) != NULL);
 			return;
 		}
 		case MP_UUID:
 		{
 			struct tt_uuid *uuid = luaT_newuuid(L);
-			*data = svp;
-			uuid = mp_decode_uuid(data, uuid);
-			if (uuid == NULL)
-				goto ext_decode_err;
+			VERIFY(uuid_unpack(data, len, uuid) != NULL);
 			return;
 		}
 		case MP_DATETIME:
 		{
 			struct datetime *date = luaT_newdatetime(L);
-			date = datetime_unpack(data, len, date);
-			if (date == NULL)
-				goto ext_decode_err;
+			VERIFY(datetime_unpack(data, len, date) != NULL);
 			return;
 		}
 		case MP_INTERVAL:
 		{
 			struct interval *itv = luaT_newinterval(L);
-			itv = interval_unpack(data, len, itv);
-			if (itv == NULL)
-				goto ext_decode_err;
+			VERIFY(interval_unpack(data, len, itv) != NULL);
 			return;
 		}
 		default:
 			/* reset data to the extension header */
 			*data = svp;
 			luamp_decode_extension(L, data);
 			break;
 		}
 		break;
 	}
 	}
 	return;
-ext_decode_err:
-	lua_pop(L, -1);
-	luaL_error(L, "msgpack.decode: invalid MsgPack");
 }
 
 
