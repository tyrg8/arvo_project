commit 1f291651e70ebe7a2b808e1f6ae4f15770aeeea8
Author: Reini Urban <rurban@cpan.org>
Date:   Tue Mar 9 19:31:17 2021 +0100

    indxf: better dxf_skip_ws overflow protection
    
    May fix oss-fuzz issue 31789, but not repro

diff --git a/src/in_dxf.c b/src/in_dxf.c
index bb6e56d6..30af5d33 100644
--- a/src/in_dxf.c
+++ b/src/in_dxf.c
@@ -227,43 +227,45 @@ static inline void
 dxf_skip_ws (Bit_Chain *dat)
 {
   const int is_binary = dat->opts & DWG_OPTS_DXFB;
   if (is_binary)
     return;
+  if (dat->byte >= dat->size)
+    return;
   // clang-format off
   for (; (!dat->chain[dat->byte] ||
           dat->chain[dat->byte] == ' ' ||
           dat->chain[dat->byte] == '\t' ||
           dat->chain[dat->byte] == '\r');
        )
     // clang-format on
     {
       dat->byte++;
       if (dat->byte >= dat->size)
         return;
     }
 }
 
 #define SAFER_STRTOL(num, rettype, ret)                                       \
   if (dat->byte + 3 >= dat->size                                              \
       || !memchr (&dat->chain[dat->byte], '\n', dat->size - dat->byte))       \
     {                                                                         \
       LOG_ERROR ("Premature DXF end");                                        \
       dat->byte = dat->size;                                                  \
       return (rettype)ret;                                                    \
     }                                                                         \
   else                                                                        \
     num = strtol ((char *)&dat->chain[dat->byte], &endptr, 10);               \
   if (endptr)                                                                 \
     {                                                                         \
       if (endptr == (char *)&dat->chain[dat->byte])                           \
         {                                                                     \
           LOG_ERROR ("Expected DXF integer value");                           \
           dat->byte = dat->size;                                              \
           return (rettype)ret;                                                \
         }                                                                     \
       dat->byte += (unsigned char *)endptr - &dat->chain[dat->byte];          \
     }                                                                         \
   if (errno == ERANGE)                                                        \
     return (rettype)num;                                                      \
   if (dat->byte + 1 >= dat->size)                                             \
   return (rettype)num
