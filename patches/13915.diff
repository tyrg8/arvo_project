commit 118bf6a693ef0a349959919fd6217e70a26ddf62
Author: pancake <pancake@nopcode.org>
Date:   Wed Mar 27 11:23:50 2019 +0100

    Fix build

diff --git a/libr/bin/p/bin_dex.c b/libr/bin/p/bin_dex.c
index 60b769df48..631dfa7a4c 100644
--- a/libr/bin/p/bin_dex.c
+++ b/libr/bin/p/bin_dex.c
@@ -1441,187 +1441,187 @@ static ut64 get_method_flags(ut64 MA) {
 static void parse_class(RBinFile *binfile, RBinDexObj *bin, RBinDexClass *c,
 			 int class_index, int *methods, int *sym_count) {
 	struct r_bin_t *rbin = binfile->rbin;
 
 	char *class_name;
 	int z;
 	const ut8 *p, *p_end;
 
 	if (!c) {
 		return;
 	}
 	class_name = dex_class_name (bin, c);
 	if (!class_name || !*class_name) {
 		return;
 	}
 	const char *superClass = dex_class_super_name (bin, c);
 	if (!superClass) {
 		return;
 	}
 	class_name = strdup (class_name);
 	r_str_replace_char (class_name, ';', 0);
 
 	if (!class_name || !*class_name) {
 		return;
 	}
 	RBinClass *cls = R_NEW0 (RBinClass);
 	if (!cls) {
 		free (class_name);
 		return;
 	}
 	cls->name = class_name;
 	cls->index = class_index;
 	cls->addr = bin->header.class_offset + class_index * DEX_CLASS_SIZE;
 	cls->methods = r_list_new ();
 	cls->super = strdup (superClass);
 	if (!cls->methods) {
 		free (cls);
 		free (class_name);
 		return;
 	}
 	cls->fields = r_list_new ();
 	if (!cls->fields) {
 		r_list_free (cls->methods);
 		free (class_name);
 		free (cls);
 		return;
 	}
 	r_list_append (bin->classes_list, cls);
 	if (dexdump) {
 		rbin->cb_printf ("  Class descriptor  : '%s;'\n", class_name);
 		rbin->cb_printf (
 			"  Access flags      : 0x%04x (%s)\n", c->access_flags,
 			createAccessFlagStr (c->access_flags, kAccessForClass));
 		rbin->cb_printf ("  Superclass        : '%s'\n",
 				 dex_class_super_name (bin, c));
 		rbin->cb_printf ("  Interfaces        -\n");
 	}
 
 	if (c->interfaces_offset > 0 &&
 	    bin->header.data_offset < c->interfaces_offset &&
 	    c->interfaces_offset <
 		    bin->header.data_offset + bin->header.data_size) {
 		int left;
 		p = r_buf_get_at (binfile->buf, c->interfaces_offset, &left);
 		if (left < 4) {
 			return;
 		}
 		int types_list_size = r_read_le32 (p);
 		if (types_list_size < 0 || types_list_size >= bin->header.types_size ) {
 			return;
 		}
 		for (z = 0; z < types_list_size; z++) {
 			ut16 le16;
 			ut32 off = c->interfaces_offset + 4 + (z * 2);
 			r_buf_read_at (binfile->buf, off, (ut8*)&le16, sizeof (le16));
 			int t = r_read_le16 (&le16);
 			if (t > 0 && t < bin->header.types_size ) {
 				int tid = bin->types[t].descriptor_id;
 				if (dexdump) {
 					rbin->cb_printf (
 						"    #%d              : '%s'\n",
 						z, getstr (bin, tid));
 				}
 			}
 		}
 	}
 	// TODO: this is quite ugly
 	if (!c || !c->class_data_offset) {
 		if (dexdump) {
 			rbin->cb_printf (
 				"  Static fields     -\n"
 				"  Instance fields   -\n"
 				"  Direct methods    -\n"
 				"  Virtual methods   -\n");
 		}
 	} else {
 		// TODO: move to func, def or inline
 		// class_data_offset => [class_offset, class_defs_off+class_defs_size*32]
 		if (bin->header.class_offset > c->class_data_offset ||
 		    c->class_data_offset <
 			    bin->header.class_offset +
 				    bin->header.class_size * DEX_CLASS_SIZE) {
 			return;
 		}
 
 		const ut8 *bufbuf = r_buf_buffer (binfile->buf);
 		p = bufbuf + c->class_data_offset;
 		// XXX may overflow
 		if (r_buf_size (binfile->buf) < c->class_data_offset) {
 			return;
 		}
 		ut32 p_size = (r_buf_size (binfile->buf) - c->class_data_offset);
 		p_end = p + p_size;
 		//XXX check for NULL!!
 		c->class_data = (struct dex_class_data_item_t *)malloc (
 			sizeof (struct dex_class_data_item_t));
-		if (!p->class_data) {
+		if (!c->class_data) {
 			return;
 		}
 		if (p >= p_end) {
 			free (c->class_data);
 			return;
 		}
 		p = r_uleb128 (p, p_end - p, &c->class_data->static_fields_size);
 		if (p >= p_end) {
 			free (c->class_data);
 			return;
 		}
 		p = r_uleb128 (p, p_end - p, &c->class_data->instance_fields_size);
 		if (p >= p_end) {
 			free (c->class_data);
 			return;
 		}
 		p = r_uleb128 (p, p_end - p, &c->class_data->direct_methods_size);
 		if (p >= p_end) {
 			free (c->class_data);
 			return;
 		}
 		p = r_uleb128 (p, p_end - p, &c->class_data->virtual_methods_size);
 		if (p >= p_end) {
 			free (c->class_data);
 			return;
 		}
 
 		if (dexdump) {
 			rbin->cb_printf ("  Static fields     -\n");
 		}
 		p = parse_dex_class_fields (
 			binfile, bin, c, cls, p, p_end, sym_count,
 			c->class_data->static_fields_size, true);
 
 		if (dexdump) {
 			rbin->cb_printf ("  Instance fields   -\n");
 		}
 		p = parse_dex_class_fields (
 			binfile, bin, c, cls, p, p_end, sym_count,
 			c->class_data->instance_fields_size, false);
 
 		if (dexdump) {
 			rbin->cb_printf ("  Direct methods    -\n");
 		}
 		p = parse_dex_class_method (
 			binfile, bin, c, cls, p, p_end, sym_count,
 			c->class_data->direct_methods_size, methods, true, bufbuf);
 
 		if (dexdump) {
 			rbin->cb_printf ("  Virtual methods   -\n");
 		}
 		parse_dex_class_method (
 			binfile, bin, c, cls, p, p_end, sym_count,
 			c->class_data->virtual_methods_size, methods, false, bufbuf);
 	}
 
 	if (dexdump) {
 		char *source_file = getstr (bin, c->source_file);
 		if (!source_file) {
 			rbin->cb_printf (
 				"  source_file_idx   : %d (unknown)\n\n",
 				c->source_file);
 		} else {
 			rbin->cb_printf ("  source_file_idx   : %d (%s)\n\n",
 					 c->source_file, source_file);
 		}
 	}
 	// TODO: fix memleaks
 	//free (class_name);
 }
