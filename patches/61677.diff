commit f1917fc63166d73a9d0930d96468e486a49c666d
Author: Paul Iannetta <piannetta@kalrayinc.com>
Date:   Thu Aug 24 10:39:14 2023 +0200

    kvx: fix kvx_reassemble_bundle index 8 out of bounds
    
    opcodes/
            * kvx-dis.c (print_insn_kvx): Change the loop condition so that
            wordcount is always less than KVXMAXBUNDLEWORDS.
            (decode_prologue_epilogue_bundle): Likewise.

diff --git a/opcodes/kvx-dis.c b/opcodes/kvx-dis.c
index 7fef4c7543d..ec9c7718b06 100644
--- a/opcodes/kvx-dis.c
+++ b/opcodes/kvx-dis.c
@@ -1013,199 +1013,199 @@ int
 print_insn_kvx (bfd_vma memaddr, struct disassemble_info *info)
 {
   static int insnindex = 0;
   static int insncount = 0;
   insn_t *insn;
   int readsofar = 0;
   int found = 0;
   int invalid_bundle = 0;
 
   if (!env.initialized_p)
     kvx_dis_init (info);
 
   /* Clear instruction information field.  */
   info->insn_info_valid = 0;
   info->branch_delay_insns = 0;
   info->data_size = 0;
   info->insn_type = dis_noninsn;
   info->target = 0;
   info->target2 = 0;
 
   /* Set line length.  */
   info->bytes_per_line = 16;
 
 
   /* If this is the beginning of the bundle, read BUNDLESIZE words and apply
      decentrifugate function.  */
   if (insnindex == 0)
     {
       int wordcount = 0;
       do
 	{
 	  int status;
 	  assert (wordcount < KVXMAXBUNDLEWORDS);
 	  status =
 	    (*info->read_memory_func) (memaddr + 4 * wordcount,
 				       (bfd_byte *) (bundle_words +
 						     wordcount), 4, info);
 	  if (status != 0)
 	    {
 	      (*info->memory_error_func) (status, memaddr + 4 * wordcount,
 					  info);
 	      return -1;
 	    }
 	  wordcount++;
 	}
       while (kvx_has_parallel_bit (bundle_words[wordcount - 1])
-	     && wordcount < KVXMAXBUNDLEWORDS);
+	     && wordcount < KVXMAXBUNDLEWORDS - 1);
       invalid_bundle = kvx_reassemble_bundle (wordcount, &insncount);
     }
 
   assert (insnindex < KVXMAXBUNDLEISSUE);
   insn = &(bundle_insn[insnindex]);
   readsofar = insn->len * 4;
   insnindex++;
 
   if (opt_pretty)
     {
       (*info->fprintf_func) (info->stream, "[ ");
       for (int i = 0; i < insn->len; i++)
 	(*info->fprintf_func) (info->stream, "%08x ", insn->syllables[i]);
       (*info->fprintf_func) (info->stream, "] ");
     }
 
   /* Check for extension to right iff this is not the end of bundle.  */
 
   struct decoded_insn dec;
   memset (&dec, 0, sizeof dec);
   if (!invalid_bundle && (found = decode_insn (memaddr, insn, &dec)))
     {
       int ch;
       (*info->fprintf_func) (info->stream, "%s", dec.opc->as_op);
       const char *fmtp = dec.opc->fmtstring;
       for (int i = 0; i < dec.nb_ops; ++i)
 	{
 	  /* Print characters in the format string up to the following % or nul.  */
 	  while ((ch = *fmtp) && ch != '%')
 	    {
 	      (*info->fprintf_func) (info->stream, "%c", ch);
 	      fmtp++;
 	    }
 
 	  /* Skip past %s.  */
 	  if (ch == '%')
 	    {
 	      ch = *fmtp++;
 	      fmtp++;
 	    }
 
 	  switch (dec.operands[i].type)
 	    {
 	    case CAT_REGISTER:
 	      (*info->fprintf_func) (info->stream, "%s",
 				     env.kvx_registers[dec.operands[i].val].name);
 	      break;
 	    case CAT_MODIFIER:
 	      {
 		const char *mod = env.kvx_modifiers[dec.operands[i].mod_idx][dec.operands[i].val];
 		(*info->fprintf_func) (info->stream, "%s", !mod || !strcmp (mod, ".") ? "" : mod);
 	      }
 	      break;
 	    case CAT_IMMEDIATE:
 	      {
 		if (dec.operands[i].pcrel)
 		  {
 		    /* Fill in instruction information.  */
 		    info->insn_info_valid = 1;
 		    info->insn_type =
 		      dec.operands[i].width ==
 		      17 ? dis_condbranch : dis_branch;
 		    info->target = dec.operands[i].val;
 
 		    info->print_address_func (dec.operands[i].val, info);
 		  }
 		else if (dec.operands[i].sign)
 		  {
 		    if (dec.operands[i].width <= 32)
 		      {
 			(*info->fprintf_func) (info->stream, "%" PRId32 " (0x%" PRIx32 ")",
 					       (int32_t) dec.operands[i].val,
 					       (int32_t) dec.operands[i].val);
 		      }
 		    else
 		      {
 			(*info->fprintf_func) (info->stream, "%" PRId64 " (0x%" PRIx64 ")",
 					       dec.operands[i].val,
 					       dec.operands[i].val);
 		      }
 		  }
 		else
 		  {
 		    if (dec.operands[i].width <= 32)
 		      {
 			(*info->fprintf_func) (info->stream, "%" PRIu32 " (0x%" PRIx32 ")",
 					       (uint32_t) dec.operands[i].
 					       val,
 					       (uint32_t) dec.operands[i].
 					       val);
 		      }
 		    else
 		      {
 			(*info->fprintf_func) (info->stream, "%" PRIu64 " (0x%" PRIx64 ")",
 					       (uint64_t) dec.
 					       operands[i].val,
 					       (uint64_t) dec.
 					       operands[i].val);
 		      }
 		  }
 	      }
 	      break;
 	    default:
 	      break;
 
 	    }
 	}
 
       while ((ch = *fmtp))
 	{
 	  (*info->fprintf_styled_func) (info->stream, dis_style_text, "%c",
 					ch);
 	  fmtp++;
 	}
     }
   else
     {
       (*info->fprintf_func) (info->stream, "*** invalid opcode ***\n");
       insnindex = 0;
       readsofar = 4;
     }
 
   if (found && (insnindex == insncount))
     {
       (*info->fprintf_func) (info->stream, ";;");
       if (!opt_compact_assembly)
 	(*info->fprintf_func) (info->stream, "\n");
       insnindex = 0;
     }
 
   return readsofar;
 }
 
 /* This function searches in the current bundle for the instructions required
    by unwinding. For prologue:
      (1) addd $r12 = $r12, <res_stack>
      (2) get <gpr_ra_reg> = $ra
      (3) sd <ofs>[$r12] = <gpr_ra_reg> or sq/so containing <gpr_ra_reg>
      (4) sd <ofs>[$r12] = $r14 or sq/so containing r14
      (5) addd $r14 = $r12, <fp_ofs> or copyd $r14 = $r12
 	 The only difference seen between the code generated by gcc and clang
 	 is the setting/resetting r14. gcc could also generate copyd $r14=$r12
 	 instead of add addd $r14 = $r12, <ofs> when <ofs> is 0.
 	 Vice-versa, <ofs> is not guaranteed to be 0 for clang, so, clang
 	 could also generate addd instead of copyd
      (6) call, icall, goto, igoto, cb., ret
   For epilogue:
      (1) addd $r12 = $r12, <res_stack>
      (2) addd $r12 = $r14, <offset> or copyd $r12 = $r14
 	 Same comment as prologue (5).
      (3) ret, goto
      (4) call, icall, igoto, cb.  */
@@ -1214,370 +1214,370 @@ int
 decode_prologue_epilogue_bundle (bfd_vma memaddr,
 				 struct disassemble_info *info,
 				 struct kvx_prologue_epilogue_bundle *peb)
 {
   int i, nb_insn, nb_syl;
 
   peb->nb_insn = 0;
 
   if (info->arch != bfd_arch_kvx)
     return -1;
 
   if (!env.initialized_p)
     kvx_dis_init (info);
 
   /* Read the bundle.  */
   nb_syl = 0;
   do
     {
       if (nb_syl >= KVXMAXBUNDLEWORDS)
 	return -1;
       if ((*info->read_memory_func) (memaddr + 4 * nb_syl,
 				     (bfd_byte *) &bundle_words[nb_syl], 4,
 				     info))
 	return -1;
       nb_syl++;
     }
   while (kvx_has_parallel_bit (bundle_words[nb_syl - 1])
-	 && nb_syl < KVXMAXBUNDLEWORDS);
+	 && nb_syl < KVXMAXBUNDLEWORDS - 1);
   if (kvx_reassemble_bundle (nb_syl, &nb_insn))
     return -1;
 
   /* Check for extension to right if this is not the end of bundle
      find the format of this insn.  */
   for (int idx_insn = 0; idx_insn < nb_insn; idx_insn++)
     {
       insn_t *insn = &bundle_insn[idx_insn];
       int is_add = 0, is_get = 0, is_a_peb_insn = 0, is_copyd = 0;
 
       struct decoded_insn dec;
       memset (&dec, 0, sizeof dec);
       if (!decode_insn (memaddr, insn, &dec))
 	continue;
 
       const char *op_name = dec.opc->as_op;
       struct kvx_prologue_epilogue_insn *crt_peb_insn;
 
       crt_peb_insn = &peb->insn[peb->nb_insn];
       crt_peb_insn->nb_gprs = 0;
 
       if (!strcmp (op_name, "addd"))
 	is_add = 1;
       else if (!strcmp (op_name, "copyd"))
 	is_copyd = 1;
       else if (!strcmp (op_name, "get"))
 	is_get = 1;
       else if (!strcmp (op_name, "sd"))
 	{
 	  crt_peb_insn->insn_type = KVX_PROL_EPIL_INSN_SD;
 	  is_a_peb_insn = 1;
 	}
       else if (!strcmp (op_name, "sq"))
 	{
 	  crt_peb_insn->insn_type = KVX_PROL_EPIL_INSN_SQ;
 	  is_a_peb_insn = 1;
 	}
       else if (!strcmp (op_name, "so"))
 	{
 	  crt_peb_insn->insn_type = KVX_PROL_EPIL_INSN_SO;
 	  is_a_peb_insn = 1;
 	}
       else if (!strcmp (op_name, "ret"))
 	{
 	  crt_peb_insn->insn_type = KVX_PROL_EPIL_INSN_RET;
 	  is_a_peb_insn = 1;
 	}
       else if (!strcmp (op_name, "goto"))
 	{
 	  crt_peb_insn->insn_type = KVX_PROL_EPIL_INSN_GOTO;
 	  is_a_peb_insn = 1;
 	}
       else if (!strcmp (op_name, "igoto"))
 	{
 	  crt_peb_insn->insn_type = KVX_PROL_EPIL_INSN_IGOTO;
 	  is_a_peb_insn = 1;
 	}
       else if (!strcmp (op_name, "call") || !strcmp (op_name, "icall"))
 	{
 	  crt_peb_insn->insn_type = KVX_PROL_EPIL_INSN_CALL;
 	  is_a_peb_insn = 1;
 	}
       else if (!strncmp (op_name, "cb", 2))
 	{
 	  crt_peb_insn->insn_type = KVX_PROL_EPIL_INSN_CB;
 	  is_a_peb_insn = 1;
 	}
       else
 	continue;
 
       for (i = 0; dec.opc->format[i]; i++)
 	{
 	  struct kvx_operand *fmt = dec.opc->format[i];
 	  struct kvx_bitfield *bf = fmt->bfield;
 	  int bf_nb = fmt->bitfields;
 	  int width = fmt->width;
 	  int type = fmt->type;
 	  int flags = fmt->flags;
 	  int shift = fmt->shift;
 	  int bias = fmt->bias;
 	  uint64_t encoded_value, value = 0;
 
 	  for (int bf_idx = 0; bf_idx < bf_nb; bf_idx++)
 	    {
 	      int insn_idx = (int) bf[bf_idx].to_offset / 32;
 	      int to_offset = bf[bf_idx].to_offset % 32;
 	      encoded_value = insn->syllables[insn_idx] >> to_offset;
 	      encoded_value &= (1LL << bf[bf_idx].size) - 1;
 	      value |= encoded_value << bf[bf_idx].from_offset;
 	    }
 	  if (flags & kvxSIGNED)
 	    {
 	      uint64_t signbit = 1LL << (width - 1);
 	      value = (value ^ signbit) - signbit;
 	    }
 	  value = (value << shift) + bias;
 
 #define chk_type(core_, val_) \
       (env.opc_table == kvx_## core_ ##_optab && type == (val_))
 
 	  if (chk_type (kv3_v1, RegClass_kv3_v1_singleReg)
 	      || chk_type (kv3_v2, RegClass_kv3_v2_singleReg)
 	      || chk_type (kv4_v1, RegClass_kv4_v1_singleReg))
 	    {
 	      if (env.kvx_regfiles[KVX_REGFILE_DEC_GPR] + value
 		  >= env.kvx_max_dec_registers)
 		return -1;
 	      if (is_add && i < 2)
 		{
 		  if (i == 0)
 		    {
 		      if (value == KVX_GPR_REG_SP)
 			crt_peb_insn->insn_type = KVX_PROL_EPIL_INSN_ADD_SP;
 		      else if (value == KVX_GPR_REG_FP)
 			crt_peb_insn->insn_type = KVX_PROL_EPIL_INSN_ADD_FP;
 		      else
 			is_add = 0;
 		    }
 		  else if (i == 1)
 		    {
 		      if (value == KVX_GPR_REG_SP)
 			is_a_peb_insn = 1;
 		      else if (value == KVX_GPR_REG_FP
 			       && crt_peb_insn->insn_type
 			       == KVX_PROL_EPIL_INSN_ADD_SP)
 			{
 			  crt_peb_insn->insn_type
 			    = KVX_PROL_EPIL_INSN_RESTORE_SP_FROM_FP;
 			  is_a_peb_insn = 1;
 			}
 		      else
 			is_add = 0;
 		    }
 		}
 	      else if (is_copyd && i < 2)
 		{
 		  if (i == 0)
 		    {
 		      if (value == KVX_GPR_REG_FP)
 			{
 			  crt_peb_insn->insn_type = KVX_PROL_EPIL_INSN_ADD_FP;
 			  crt_peb_insn->immediate = 0;
 			}
 		      else if (value == KVX_GPR_REG_SP)
 			{
 			  crt_peb_insn->insn_type
 			    = KVX_PROL_EPIL_INSN_RESTORE_SP_FROM_FP;
 			  crt_peb_insn->immediate = 0;
 			}
 		      else
 			is_copyd = 0;
 		    }
 		  else if (i == 1)
 		    {
 		      if (value == KVX_GPR_REG_SP
 			  && crt_peb_insn->insn_type
 			  == KVX_PROL_EPIL_INSN_ADD_FP)
 			is_a_peb_insn = 1;
 		      else if (value == KVX_GPR_REG_FP
 			       && crt_peb_insn->insn_type
 			       == KVX_PROL_EPIL_INSN_RESTORE_SP_FROM_FP)
 			is_a_peb_insn = 1;
 		      else
 			is_copyd = 0;
 		    }
 		}
 	      else
 		crt_peb_insn->gpr_reg[crt_peb_insn->nb_gprs++] = value;
 	    }
 	  else if (chk_type (kv3_v1, RegClass_kv3_v1_pairedReg)
 		   || chk_type (kv3_v2, RegClass_kv3_v2_pairedReg)
 		   || chk_type (kv4_v1, RegClass_kv4_v1_pairedReg))
 	    crt_peb_insn->gpr_reg[crt_peb_insn->nb_gprs++] = value * 2;
 	  else if (chk_type (kv3_v1, RegClass_kv3_v1_quadReg)
 		   || chk_type (kv3_v2, RegClass_kv3_v2_quadReg)
 		   || chk_type (kv4_v1, RegClass_kv4_v1_quadReg))
 	    crt_peb_insn->gpr_reg[crt_peb_insn->nb_gprs++] = value * 4;
 	  else if (chk_type (kv3_v1, RegClass_kv3_v1_systemReg)
 		   || chk_type (kv3_v2, RegClass_kv3_v2_systemReg)
 		   || chk_type (kv4_v1, RegClass_kv4_v1_systemReg)
 		   || chk_type (kv3_v1, RegClass_kv3_v1_aloneReg)
 		   || chk_type (kv3_v2, RegClass_kv3_v2_aloneReg)
 		   || chk_type (kv4_v1, RegClass_kv4_v1_aloneReg)
 		   || chk_type (kv3_v1, RegClass_kv3_v1_onlyraReg)
 		   || chk_type (kv3_v2, RegClass_kv3_v2_onlyraReg)
 		   || chk_type (kv4_v1, RegClass_kv4_v1_onlygetReg)
 		   || chk_type (kv3_v1, RegClass_kv3_v1_onlygetReg)
 		   || chk_type (kv3_v2, RegClass_kv3_v2_onlygetReg)
 		   || chk_type (kv4_v1, RegClass_kv4_v1_onlygetReg)
 		   || chk_type (kv3_v1, RegClass_kv3_v1_onlysetReg)
 		   || chk_type (kv3_v2, RegClass_kv3_v2_onlysetReg)
 		   || chk_type (kv4_v1, RegClass_kv4_v1_onlysetReg)
 		   || chk_type (kv3_v1, RegClass_kv3_v1_onlyfxReg)
 		   || chk_type (kv3_v2, RegClass_kv3_v2_onlyfxReg)
 		   || chk_type (kv4_v1, RegClass_kv4_v1_onlyfxReg))
 	    {
 	      if (env.kvx_regfiles[KVX_REGFILE_DEC_GPR] + value
 		  >= env.kvx_max_dec_registers)
 		return -1;
 	      if (is_get && !strcmp (env.kvx_registers[env.kvx_dec_registers[env.kvx_regfiles[KVX_REGFILE_DEC_SFR] + value]].name, "$ra"))
 		{
 		  crt_peb_insn->insn_type = KVX_PROL_EPIL_INSN_GET_RA;
 		  is_a_peb_insn = 1;
 		}
 	    }
 	  else if (chk_type (kv3_v1, RegClass_kv3_v1_coproReg)
 		   || chk_type (kv3_v2, RegClass_kv3_v2_coproReg)
 		   || chk_type (kv4_v1, RegClass_kv4_v1_coproReg)
 		   || chk_type (kv3_v1, RegClass_kv3_v1_blockReg)
 		   || chk_type (kv3_v2, RegClass_kv3_v2_blockReg)
 		   || chk_type (kv4_v1, RegClass_kv4_v1_blockReg)
 		   || chk_type (kv3_v1, RegClass_kv3_v1_vectorReg)
 		   || chk_type (kv3_v2, RegClass_kv3_v2_vectorReg)
 		   || chk_type (kv4_v1, RegClass_kv4_v1_vectorReg)
 		   || chk_type (kv3_v1, RegClass_kv3_v1_tileReg)
 		   || chk_type (kv3_v2, RegClass_kv3_v2_tileReg)
 		   || chk_type (kv4_v1, RegClass_kv4_v1_tileReg)
 		   || chk_type (kv3_v1, RegClass_kv3_v1_matrixReg)
 		   || chk_type (kv3_v2, RegClass_kv3_v2_matrixReg)
 		   || chk_type (kv4_v1, RegClass_kv4_v1_matrixReg)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_scalarcond)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_column)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_comparison)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_doscale)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_exunum)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_floatcomp)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_qindex)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_rectify)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_rounding)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_roundint)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_saturate)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_scalarcond)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_silent)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_simplecond)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_speculate)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_splat32)
 		   || chk_type (kv3_v1, Modifier_kv3_v1_variant)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_accesses)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_boolcas)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_cachelev)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_channel)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_coherency)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_comparison)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_conjugate)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_doscale)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_exunum)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_floatcomp)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_hindex)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_lsomask)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_lsumask)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_lsupack)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_qindex)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_rounding)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_scalarcond)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_shuffleV)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_shuffleX)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_silent)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_simplecond)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_speculate)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_splat32)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_transpose)
 		   || chk_type (kv3_v2, Modifier_kv3_v2_variant)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_accesses)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_boolcas)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_cachelev)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_channel)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_coherency)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_comparison)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_conjugate)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_doscale)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_exunum)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_floatcomp)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_hindex)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_lsomask)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_lsumask)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_lsupack)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_qindex)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_rounding)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_scalarcond)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_shuffleV)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_shuffleX)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_silent)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_simplecond)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_speculate)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_splat32)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_transpose)
 		   || chk_type (kv4_v1, Modifier_kv4_v1_variant))
 	    {
 	      /* Do nothing.  */
 	    }
 	  else if (chk_type (kv3_v1, Immediate_kv3_v1_sysnumber)
 		   || chk_type (kv3_v2, Immediate_kv3_v2_sysnumber)
 		   || chk_type (kv4_v1, Immediate_kv4_v1_sysnumber)
 		   || chk_type (kv3_v2, Immediate_kv3_v2_wrapped8)
 		   || chk_type (kv4_v1, Immediate_kv4_v1_wrapped8)
 		   || chk_type (kv3_v1, Immediate_kv3_v1_signed10)
 		   || chk_type (kv3_v2, Immediate_kv3_v2_signed10)
 		   || chk_type (kv4_v1, Immediate_kv4_v1_signed10)
 		   || chk_type (kv3_v1, Immediate_kv3_v1_signed16)
 		   || chk_type (kv3_v2, Immediate_kv3_v2_signed16)
 		   || chk_type (kv4_v1, Immediate_kv4_v1_signed16)
 		   || chk_type (kv3_v1, Immediate_kv3_v1_signed27)
 		   || chk_type (kv3_v2, Immediate_kv3_v2_signed27)
 		   || chk_type (kv4_v1, Immediate_kv4_v1_signed27)
 		   || chk_type (kv3_v1, Immediate_kv3_v1_wrapped32)
 		   || chk_type (kv3_v2, Immediate_kv3_v2_wrapped32)
 		   || chk_type (kv4_v1, Immediate_kv4_v1_wrapped32)
 		   || chk_type (kv3_v1, Immediate_kv3_v1_signed37)
 		   || chk_type (kv3_v2, Immediate_kv3_v2_signed37)
 		   || chk_type (kv4_v1, Immediate_kv4_v1_signed37)
 		   || chk_type (kv3_v1, Immediate_kv3_v1_signed43)
 		   || chk_type (kv3_v2, Immediate_kv3_v2_signed43)
 		   || chk_type (kv4_v1, Immediate_kv4_v1_signed43)
 		   || chk_type (kv3_v1, Immediate_kv3_v1_signed54)
 		   || chk_type (kv3_v2, Immediate_kv3_v2_signed54)
 		   || chk_type (kv4_v1, Immediate_kv4_v1_signed54)
 		   || chk_type (kv3_v1, Immediate_kv3_v1_wrapped64)
 		   || chk_type (kv3_v2, Immediate_kv3_v2_wrapped64)
 		   || chk_type (kv4_v1, Immediate_kv4_v1_wrapped64)
 		   || chk_type (kv3_v1, Immediate_kv3_v1_unsigned6)
 		   || chk_type (kv3_v2, Immediate_kv3_v2_unsigned6)
 		   || chk_type (kv4_v1, Immediate_kv4_v1_unsigned6))
 	    crt_peb_insn->immediate = value;
 	  else if (chk_type (kv3_v1, Immediate_kv3_v1_pcrel17)
 		   || chk_type (kv3_v2, Immediate_kv3_v2_pcrel17)
 		   || chk_type (kv4_v1, Immediate_kv4_v1_pcrel17)
 		   || chk_type (kv3_v1, Immediate_kv3_v1_pcrel27)
 		   || chk_type (kv3_v2, Immediate_kv3_v2_pcrel27)
 		   || chk_type (kv4_v1, Immediate_kv4_v1_pcrel27))
 	    crt_peb_insn->immediate = value + memaddr;
 	  else
 	    return -1;
 	}
 
       if (is_a_peb_insn)
 	peb->nb_insn++;
       continue;
     }
 
   return nb_syl * 4;
 #undef chk_type
 }
