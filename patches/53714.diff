commit 4c49daf7cd961fb47126baf04240243736cae606
Author: Garret Rieger <grieger@google.com>
Date:   Wed Nov 23 22:33:57 2022 +0000

    [subset] actually use the preprocessed face in hb-subset.
    
    Tests weren't actually using the preprocessed face due to this typo in util/hb-subset.

diff --git a/src/hb-subset-input.cc b/src/hb-subset-input.cc
index 18a07fead..232ab0493 100644
--- a/src/hb-subset-input.cc
+++ b/src/hb-subset-input.cc
@@ -464,51 +464,56 @@ HB_EXTERN hb_face_t *
 hb_subset_preprocess (hb_face_t *source)
 {
   hb_subset_input_t* input = hb_subset_input_create_or_fail ();
 
   hb_set_clear (hb_subset_input_set(input, HB_SUBSET_SETS_UNICODE));
   hb_set_invert (hb_subset_input_set(input, HB_SUBSET_SETS_UNICODE));
 
   hb_set_clear (hb_subset_input_set(input,
                                     HB_SUBSET_SETS_LAYOUT_FEATURE_TAG));
   hb_set_invert (hb_subset_input_set(input,
                                      HB_SUBSET_SETS_LAYOUT_FEATURE_TAG));
 
   hb_set_clear (hb_subset_input_set(input,
                                     HB_SUBSET_SETS_LAYOUT_SCRIPT_TAG));
   hb_set_invert (hb_subset_input_set(input,
                                      HB_SUBSET_SETS_LAYOUT_SCRIPT_TAG));
 
   hb_set_clear (hb_subset_input_set(input,
                                     HB_SUBSET_SETS_NAME_ID));
   hb_set_invert (hb_subset_input_set(input,
                                      HB_SUBSET_SETS_NAME_ID));
 
+  hb_set_clear (hb_subset_input_set(input,
+                                    HB_SUBSET_SETS_NAME_LANG_ID));
+  hb_set_invert (hb_subset_input_set(input,
+                                     HB_SUBSET_SETS_NAME_LANG_ID));
+
   hb_subset_input_set_flags(input,
                             HB_SUBSET_FLAGS_NOTDEF_OUTLINE |
                             HB_SUBSET_FLAGS_GLYPH_NAMES |
                             HB_SUBSET_FLAGS_RETAIN_GIDS);
   input->attach_accelerator_data = true;
 
   // Always use long loca in the preprocessed version. This allows
   // us to store the glyph bytes unpadded which allows the future subset
   // operation to run faster by skipping the trim padding step.
   input->force_long_loca = true;
 
   hb_face_t* new_source = hb_subset_or_fail (source, input);
   hb_subset_input_destroy (input);
 
   return new_source;
 }
 #endif
 
 #ifdef HB_EXPERIMENTAL_API
 /**
  * hb_subset_input_override_name_table:
  * @input: a #hb_subset_input_t object.
  * @name_id: name_id of a nameRecord
  * @name_str: pointer to name string new value or null to indicate should remove
  * @str_len: the size of @name_str, or -1 if it is `NULL`-terminated
  *
  * Override the name string of a nameRecord with specified name_id
  * Since: EXPERIMENTAL
  **/
diff --git a/util/hb-subset.cc b/util/hb-subset.cc
index f2606c767..171f27c8c 100644
--- a/util/hb-subset.cc
+++ b/util/hb-subset.cc
@@ -48,133 +48,133 @@ static hb_face_t* preprocess_face(hb_face_t* face)
 struct subset_main_t : option_parser_t, face_options_t, output_options_t<false>
 {
   subset_main_t ()
   : input (hb_subset_input_create_or_fail ())
   {}
   ~subset_main_t ()
   {
     hb_subset_input_destroy (input);
   }
 
   void parse_face (int argc, const char * const *argv)
   {
     option_parser_t parser;
     face_options_t face_opts;
 
     face_opts.add_options (&parser);
 
     GOptionEntry entries[] =
     {
       {G_OPTION_REMAINING,	0, G_OPTION_FLAG_IN_MAIN,
 				G_OPTION_ARG_CALLBACK,	(gpointer) &collect_face,	nullptr,	"[FONT-FILE] [TEXT]"},
       {nullptr}
     };
     parser.add_main_group (entries, &face_opts);
     parser.add_options ();
 
     g_option_context_set_ignore_unknown_options (parser.context, true);
     g_option_context_set_help_enabled (parser.context, false);
 
     char **args = (char **)
 #if GLIB_CHECK_VERSION (2, 68, 0)
       g_memdup2
 #else
       g_memdup
 #endif
       (argv, argc * sizeof (*argv));
     parser.parse (&argc, &args);
     g_free (args);
 
     set_face (face_opts.face);
   }
 
   void parse (int argc, char **argv)
   {
     bool help = false;
     for (auto i = 1; i < argc; i++)
       if (!strncmp ("--help", argv[i], 6))
       {
 	help = true;
 	break;
       }
 
     if (likely (!help))
     {
       /* Do a preliminary parse to load font-face, such that we can use it
        * during main option parsing. */
       parse_face (argc, argv);
     }
 
     add_options ();
     option_parser_t::parse (&argc, &argv);
   }
 
   int operator () (int argc, char **argv)
   {
     parse (argc, argv);
 
     hb_face_t* orig_face = face;
     if (preprocess)
       orig_face = preprocess_face (face);
 
     hb_face_t *new_face = nullptr;
     for (unsigned i = 0; i < num_iterations; i++)
     {
       hb_face_destroy (new_face);
-      new_face = hb_subset_or_fail (face, input);
+      new_face = hb_subset_or_fail (orig_face, input);
     }
 
     bool success = new_face;
     if (success)
     {
       hb_blob_t *result = hb_face_reference_blob (new_face);
       write_file (output_file, result);
       hb_blob_destroy (result);
     }
 
     hb_face_destroy (new_face);
     if (preprocess)
       hb_face_destroy (orig_face);
 
     return success ? 0 : 1;
   }
 
   bool
   write_file (const char *output_file, hb_blob_t *blob)
   {
     assert (out_fp);
 
     unsigned int size;
     const char* data = hb_blob_get_data (blob, &size);
 
     while (size)
     {
       size_t ret = fwrite (data, 1, size, out_fp);
       size -= ret;
       data += ret;
       if (size && ferror (out_fp))
         fail (false, "Failed to write output: %s", strerror (errno));
     }
 
     return true;
   }
 
   void add_options ();
 
   protected:
   static gboolean
   collect_face (const char *name,
 		const char *arg,
 		gpointer    data,
 		GError    **error);
   static gboolean
   collect_rest (const char *name,
 		const char *arg,
 		gpointer    data,
 		GError    **error);
 
   public:
 
   unsigned num_iterations = 1;
   gboolean preprocess;
   hb_subset_input_t *input = nullptr;
 };
