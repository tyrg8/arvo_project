commit 4d57a04409301a2a6a2564a54dcc22da3419c9e5
Author: Diego F. Aranha <dfaranha@gmail.com>
Date:   Thu Dec 1 01:32:16 2022 +0100

    Fix more type issues.

diff --git a/include/relic_dv.h b/include/relic_dv.h
index 5694794e..cb7244cf 100644
--- a/include/relic_dv.h
+++ b/include/relic_dv.h
@@ -138,84 +138,84 @@ typedef dig_t *dv_t;
 /**
  * Prints a temporary digit vector.
  *
  * @param[in] a				- the temporary digit vector to print.
  * @param[in] digits		- the number of digits to print.
  */
-void dv_print(const dig_t *a, int digits);
+void dv_print(const dig_t *a, size_t digits);
 
 /**
  * Assigns zero to a temporary double-precision digit vector.
  *
  * @param[out] a			- the temporary digit vector to assign.
  * @param[in] digits		- the number of words to initialize with zero.
  */
-void dv_zero(dig_t *a, int digits);
+void dv_zero(dig_t *a, size_t digits);
 
 /**
  * Copies some digits from a digit vector to another digit vector.
  *
  * @param[out] c			- the destination.
  * @param[in] a				- the source.
  * @param[in] digits		- the number of digits to copy.
  */
-void dv_copy(dig_t *c, const dig_t *a, int digits);
+void dv_copy(dig_t *c, const dig_t *a, size_t digits);
 
 /**
  * Conditionally copies some digits from a digit vector to another digit vector.
  *
  * @param[out] c			- the destination.
  * @paraim[in] a			- the source.
  * @param[in] digits		- the number of digits to copy.
  * @param[in] cond			- the condition to evaluate.
  */
-void dv_copy_cond(dig_t *c, const dig_t *a, int digits, dig_t cond);
+void dv_copy_cond(dig_t *c, const dig_t *a, size_t digits, dig_t cond);
 
 /**
  * Conditionally swap two digit vectors.
  *
  * @param[in,out] c			- the destination.
  * @paraim[in,out] a		- the source.
  * @param[in] digits		- the number of digits to copy.
  * @param[in] cond			- the condition to evaluate.
  */
-void dv_swap_cond(dig_t *c, dig_t *a, int digits, dig_t cond);
+void dv_swap_cond(dig_t *c, dig_t *a, size_t digits, dig_t cond);
 
 /**
  * Returns the result of a comparison between two digit vectors.
  *
  * @param[in] a				- the first digit vector.
  * @param[in] b				- the second digit vector.
  * @param[in] size			- the length in digits of the vectors.
  * @return RLC_LT if a < b, RLC_EQ if a == b and RLC_GT if a > b.
  */
-int dv_cmp(const dig_t *a, const dig_t *b, int size);
+int dv_cmp(const dig_t *a, const dig_t *b, size_t size);
 
 /**
  * Compares two digit vectors in constant time.
  *
  * @param[in] a				- the first digit vector.
  * @param[in] b				- the second digit vector.
  * @param[in] size			- the length in digits of the vectors.
  * @return RLC_EQ if they are equal and RLC_NE otherwise.
  */
-int dv_cmp_const(const dig_t *a, const dig_t *b, int size);
+int dv_cmp_const(const dig_t *a, const dig_t *b, size_t size);
 
 /**
  * Allocates and initializes a temporary double-precision digit vector.
  *
  * @param[out] a			- the new temporary digit vector.
  * @param[in] digits		- the required precision in digits.
  * @throw ERR_NO_MEMORY		- if there is no available memory.
  * @throw ERR_PRECISION		- if the required precision cannot be represented
  * 							by the library.
  */
 #if ALLOC == DYNAMIC
-void dv_new_dynam(dv_t *a, int digits);
+void dv_new_dynam(dv_t *a, size_t digits);
 #endif
 
 /**
  * Cleans and frees a temporary double-precision digit vector.
  *
  * @param[out] a			- the temporary digit vector to clean and free.
  */
 #if ALLOC == DYNAMIC
@@ -225,23 +225,23 @@ void dv_free_dynam(dv_t *a);
 /**
  * Shifts a digit vector to the left by some digits.
  * Computes c = a << (digits * RLC_DIG).
  *
  * @param[out] c			- the result.
  * @param[in] a				- the digit vector to shift.
  * @param[in] size			- the number of digits to shift.
  * @param[in] digits		- the shift amount.
  */
-void dv_lshd(dig_t *c, const dig_t *a, int size, int digits);
+void dv_lshd(dig_t *c, const dig_t *a, size_t size, uint_t digits);
 
 /**
  * Shifts a digit vector to the right by some digits.
  * Computes c = a >> (digits * RLC_DIG).
  *
  * @param[out] c			- the result.
  * @param[in] a				- the digit vector to shift.
  * @param[in] size			- the number of digits to shift.
  * @param[in] digits		- the shift amount.
  */
-void dv_rshd(dig_t *c, const dig_t *a, int size, int digits);
+void dv_rshd(dig_t *c, const dig_t *a, size_t size, uint_t digits);
 
 #endif /* !RLC_DV_H */
diff --git a/include/relic_util.h b/include/relic_util.h
index e70b0fef..d24737bb 100644
--- a/include/relic_util.h
+++ b/include/relic_util.h
@@ -290,24 +290,24 @@ size_t util_bits_dig(dig_t a);
 /**
  * Compares two buffers in constant time.
  *
  * @param[in] a				- the first buffer.
  * @param[in] b				- the second buffer.
  * @param[in] n				- the length in bytes of the buffers.
  * @return RLC_EQ if they are equal and RLC_NE otherwise.
  */
-int util_cmp_const(const void *a, const void *b, int n);
+int util_cmp_const(const void *a, const void *b, size_t n);
 
 /**
  * Computes a random permutation in [0, n-1].
  *
  * @param[out] p 			- the resulting permutation.
  * @param[in] n 			- the size of the permutation.
  */
-void util_perm(uint_t p[], int n);
+void util_perm(uint_t p[], size_t n);
 
 /**
  * Formats and prints data following a printf-like syntax.
  *
  * @param[in] format		- the format.
  * @param[in] ...			- the list of arguments matching the format.
  */
diff --git a/src/bn/relic_bn_shift.c b/src/bn/relic_bn_shift.c
index 5da273d2..e4de4c3d 100644
--- a/src/bn/relic_bn_shift.c
+++ b/src/bn/relic_bn_shift.c
@@ -66,33 +66,30 @@ void bn_hlv(bn_t c, const bn_t a) {
 void bn_lsh(bn_t c, const bn_t a, uint_t bits) {
 	int digits;
 	dig_t carry;
 
-	bn_copy(c, a);
-
 	RLC_RIP(bits, digits, bits);
 
 	RLC_TRY {
 		bn_grow(c, c->used + digits + (bits > 0));
 
 		c->used = a->used + digits;
-		c->sign = a->sign;
 		if (digits > 0) {
 			dv_lshd(c->dp, a->dp, c->used, digits);
+		} else {
+			dv_copy(c->dp, a->dp, a->used);
 		}
+		c->sign = a->sign;
 
 		if (bits > 0) {
-			if (c != a) {
-				carry = bn_lshb_low(c->dp + digits, a->dp, a->used, bits);
-			} else {
-				carry = bn_lshb_low(c->dp + digits, c->dp + digits, c->used - digits, bits);
-			}
+			carry = bn_lshb_low(c->dp + digits, c->dp + digits,
+				c->used - digits, bits);
 			if (carry != 0) {
 				c->dp[c->used] = carry;
 				(c->used)++;
 			}
 		}
 		bn_trim(c);
 	} RLC_CATCH_ANY {
 		RLC_THROW(ERR_CAUGHT);
 	}
 }
@@ -100,27 +97,29 @@ void bn_lsh(bn_t c, const bn_t a, uint_t bits) {
 void bn_rsh(bn_t c, const bn_t a, uint_t bits) {
 	uint_t digits = 0;
 
-	bn_copy(c, a);
-
 	RLC_RIP(bits, digits, bits);
 
-	if (digits > 0) {
-		dv_rshd(c->dp, a->dp, a->used, digits);
-	}
-
-	if (a->used > digits) {
-		c->used = a->used - digits;
-	} else {
-		c->used = 0;
-	}
-	c->sign = a->sign;
+	RLC_TRY {
+		bn_grow(c, a->used);
 
-	if (c->used > 0 && bits > 0) {
-		if (digits == 0 && c != a) {
-			bn_rshb_low(c->dp, a->dp + digits, a->used - digits, bits);
+		if (digits > 0) {
+			if (a->used > digits) {
+				dv_rshd(c->dp, a->dp, a->used, digits);
+				c->used = a->used - digits;
+			} else {
+				c->used = 0;
+			}
 		} else {
+			dv_copy(c->dp, a->dp, a->used);
+			c->used = a->used;
+		}
+		c->sign = a->sign;
+
+		if (c->used > 0 && bits > 0) {
 			bn_rshb_low(c->dp, c->dp, c->used, bits);
 		}
+		bn_trim(c);
+	} RLC_CATCH_ANY {
+		RLC_THROW(ERR_CAUGHT);
 	}
-	bn_trim(c);
 }
diff --git a/src/cp/relic_cp_pbpsi.c b/src/cp/relic_cp_pbpsi.c
index ec294754..52f2cdeb 100644
--- a/src/cp/relic_cp_pbpsi.c
+++ b/src/cp/relic_cp_pbpsi.c
@@ -122,47 +122,47 @@ int cp_pbpsi_ask(g2_t d[], bn_t r, const bn_t x[], const g2_t s[], size_t m) {
 int cp_pbpsi_ans(gt_t t[], g1_t u[], const g1_t ss, const g2_t d,
 		const bn_t y[], size_t n) {
 	int j, result = RLC_OK;
 	bn_t q, tj;
 	g1_t g1;
 	g2_t g2;
-	uint_t *shuffle = RLC_ALLOCA(unsigned int, n);
+	uint_t *shuffle = RLC_ALLOCA(uint_t, n);
 
 	bn_null(q);
 	bn_null(tj);
 	g1_null(g1);
 	g2_null(g2);
 
 	RLC_TRY {
 		bn_new(q);
 		bn_new(tj);
 		g1_new(g1);
 		g2_new(g2);
 		if (shuffle == NULL) {
 			RLC_THROW(ERR_NO_MEMORY);
 		}
 
 		util_perm(shuffle, n);
 
 		pc_get_ord(q);
 		g2_get_gen(g2);
 		for (j = 0; j < n; j++) {
 			bn_rand_mod(tj, q);
 			g1_mul_gen(g1, tj);
 			pc_map(t[j], g1, d);
 			g1_mul_gen(u[j], y[shuffle[j]]);
 			g1_sub(u[j], ss, u[j]);
 			g1_mul(u[j], u[j], tj);
 		}
 	}
 	RLC_CATCH_ANY {
 		result = RLC_ERR;
 	}
 	RLC_FINALLY {
 		bn_free(q);
 		bn_free(tj);
 		g1_free(g1);
 		g2_free(g2);
 		RLC_FREE(shuffle);
 	}
 	return result;
 }
diff --git a/src/cp/relic_cp_rsapsi.c b/src/cp/relic_cp_rsapsi.c
index 646f0632..26cb6f3e 100644
--- a/src/cp/relic_cp_rsapsi.c
+++ b/src/cp/relic_cp_rsapsi.c
@@ -106,42 +106,42 @@ int cp_rsapsi_ask(bn_t d, bn_t r, bn_t p[], const bn_t g, const bn_t n,
 int cp_rsapsi_ans(bn_t t[], bn_t u[], const bn_t d, const bn_t g, const bn_t n,
 		const bn_t y[], size_t l) {
 	int j, result = RLC_OK, len = RLC_CEIL(RLC_BN_BITS, 8);
 	uint8_t h[RLC_MD_LEN], bin[RLC_CEIL(RLC_BN_BITS, 8)];
-	uint_t *shuffle = RLC_ALLOCA(unsigned int, l);
+	uint_t *shuffle = RLC_ALLOCA(uint_t, l);
 	bn_t p;
 
 	bn_null(p);
 
 	RLC_TRY {
 		bn_new(p);
 		if (shuffle == NULL) {
 			RLC_THROW(ERR_NO_MEMORY);
 		}
 
 		util_perm(shuffle, l);
 
 		for (j = 0; j < l; j++) {
 			bn_write_bin(bin, len, y[shuffle[j]]);
 			md_map(h, bin, len);
 			bn_read_bin(p, h, 2 * STAT_SEC / 8);
 			if (bn_is_even(p)) {
 				bn_add_dig(p, p, 1);
 			}
 			do {
 				bn_add_dig(p, p, 2);
 			} while (!bn_is_prime(p));
 			bn_mxp(p, g, p, n);
 			bn_rand_mod(t[j], n);
 			bn_mxp(u[j], p, t[j], n);
 			bn_mxp(t[j], d, t[j], n);
 		}
 	}
 	RLC_CATCH_ANY {
 		result = RLC_ERR;
 	}
 	RLC_FINALLY {
 		bn_free(p);
 		RLC_FREE(shuffle);
 	}
 	return result;
 }
diff --git a/src/cp/relic_cp_shipsi.c b/src/cp/relic_cp_shipsi.c
index d737300b..2bfb8726 100644
--- a/src/cp/relic_cp_shipsi.c
+++ b/src/cp/relic_cp_shipsi.c
@@ -103,69 +103,69 @@ int cp_shipsi_ask(bn_t d, bn_t r, bn_t p[], const bn_t g, const bn_t n,
 int cp_shipsi_ans(bn_t t[], bn_t u, bn_t d, const bn_t g, const crt_t crt,
 		const bn_t y[], size_t n) {
 	int j, result = RLC_OK, len = RLC_CEIL(RLC_BN_BITS, 8);
 	uint8_t h[RLC_MD_LEN], bin[RLC_CEIL(RLC_BN_BITS, 8)];
-	uint_t *shuffle = RLC_ALLOCA(unsigned int, n);
+	uint_t *shuffle = RLC_ALLOCA(uint_t, n);
 	bn_t p, q;
 
 	bn_null(p);
 	bn_null(q);
 
 	RLC_TRY {
 		bn_new(p);
 		bn_new(q);
 		if (shuffle == NULL) {
 			RLC_THROW(ERR_NO_MEMORY);
 		}
 
 		util_perm(shuffle, n);
 
 		bn_rand_mod(u, crt->n);
 		for (j = 0; j < n; j++) {
 			bn_write_bin(bin, len, y[shuffle[j]]);
 			md_map(h, bin, len);
 			bn_read_bin(p, h, 2 * STAT_SEC / 8);
 			if (bn_is_even(p)) {
 				bn_add_dig(p, p, 1);
 			}
 			do {
 				bn_add_dig(p, p, 2);
 			} while (!bn_is_prime(p));
 
 #if !defined(CP_CRT)
 			bn_mul(q, crt->dp, crt->dq);
 			bn_mod_inv(p, p, q);
 			bn_mul(p, p, u);
 			bn_mod(p, p, q);
 			bn_mxp(t[j], d, p, crt->n);
 #else
 			bn_mod_inv(q, p, crt->dq);
 			bn_mul(q, q, u);
 			bn_mod(q, q, crt->dq);
 
 			bn_mod_inv(p, p, crt->dp);
 			bn_mul(p, p, u);
 			bn_mod(p, p, crt->dp);
 
 			bn_mxp_crt(t[j], d, p, q, crt, 0);
 #endif /* CP_CRT */
 		}
 
 #if !defined(CP_CRT)
 		bn_mxp(u, g, u, crt->n);
 #else
 		bn_mod(p, u, crt->dp);
 		bn_mod(q, u, crt->dq);
 
 		bn_mxp_crt(u, g, p, q, crt, 0);
 #endif
 	}
 	RLC_CATCH_ANY {
 		result = RLC_ERR;
 	}
 	RLC_FINALLY {
 		bn_free(p);
 		bn_free(q);
 		RLC_FREE(shuffle);
 	}
 	return result;
 }
diff --git a/src/dv/relic_dv_mem.c b/src/dv/relic_dv_mem.c
index 59373822..4dd47ed4 100644
--- a/src/dv/relic_dv_mem.c
+++ b/src/dv/relic_dv_mem.c
@@ -47,26 +47,26 @@
 
 #if ALLOC == DYNAMIC
 
-void dv_new_dynam(dv_t *a, int digits) {
+void dv_new_dynam(dv_t *a, size_t digits) {
 	if (digits > RLC_DV_DIGS) {
 		RLC_THROW(ERR_NO_PRECI);
 		return;
 	}
 #if ALIGN == 1
 	*a = malloc(digits * (RLC_DIG / 8));
 #elif OPSYS == WINDOWS
 	*a = _aligned_malloc(digits * (RLC_DIG / 8), ALIGN);
 #else
 	int r = posix_memalign((void **)a, ALIGN, digits * (RLC_DIG / 8));
 	if (r == ENOMEM) {
 		RLC_THROW(ERR_NO_MEMORY);
 	}
 	if (r == EINVAL) {
 		RLC_THROW(ERR_NO_CONFIG);
 	}
 #endif
 
 	if (*a == NULL) {
 		RLC_THROW(ERR_NO_MEMORY);
 	}
 }
diff --git a/src/dv/relic_dv_util.c b/src/dv/relic_dv_util.c
index a26eec03..5084472a 100644
--- a/src/dv/relic_dv_util.c
+++ b/src/dv/relic_dv_util.c
@@ -38,114 +38,112 @@
 /* Public definitions                                                         */
 /*============================================================================*/
 
-void dv_print(const dig_t *a, int digits) {
-	int i;
-
+void dv_print(const dig_t *a, size_t digits) {
 	/* Suppress possible unused parameter warning. */
 	(void)a;
-	for (i = digits - 1; i >= 0; i--) {
-		util_print_dig(a[i], 1);
+	for (size_t i = digits; i > 0; i--) {
+		util_print_dig(a[i-1], 1);
 	}
 	util_print("\n");
 
 	return;
 }
 
-void dv_zero(dig_t *a, int digits) {
+void dv_zero(dig_t *a, size_t digits) {
 	int i;
 
 #if ALLOC != DYNAMIC
 	if (digits > RLC_DV_DIGS) {
 		RLC_THROW(ERR_NO_PRECI);
 		return;
 	}
 #endif
 
 	for (i = 0; i < digits; i++, a++) {
 		(*a) = 0;
 	}
 
 	return;
 }
 
-void dv_copy(dig_t *c, const dig_t *a, int digits) {
+void dv_copy(dig_t *c, const dig_t *a, size_t digits) {
 	memcpy(c, a, digits * sizeof(dig_t));
 }
 
-void dv_copy_cond(dig_t *c, const dig_t *a, int digits, dig_t cond) {
+void dv_copy_cond(dig_t *c, const dig_t *a, size_t digits, dig_t cond) {
 	dig_t mask, t;
 
 	mask = -cond;
-	for (int i = 0; i < digits; i++) {
+	for (size_t i = 0; i < digits; i++) {
 		t = (a[i] ^ c[i]) & mask;
 		c[i] ^= t;
 	}
 }
 
-void dv_swap_cond(dig_t *c, dig_t *a, int digits, dig_t cond) {
+void dv_swap_cond(dig_t *c, dig_t *a, size_t digits, dig_t cond) {
 	dig_t mask, t;
 
 	mask = -cond;
-	for (int i = 0; i < digits; i++) {
+	for (size_t i = 0; i < digits; i++) {
 		t = (a[i] ^ c[i]) & mask;
 		a[i] ^= t;
 		c[i] ^= t;
 	}
 }
 
-int dv_cmp(const dig_t *a, const dig_t *b, int size) {
-	int i, r;
+int dv_cmp(const dig_t *a, const dig_t *b, size_t size) {
+	int r;
 
 	a += (size - 1);
 	b += (size - 1);
 
 	r = RLC_EQ;
-	for (i = 0; i < size; i++, --a, --b) {
+	for (size_t i = 0; i < size; i++, --a, --b) {
 		if (*a != *b && r == RLC_EQ) {
 			r = (*a > *b ? RLC_GT : RLC_LT);
 		}
 	}
 	return r;
 }
 
-int dv_cmp_const(const dig_t *a, const dig_t *b, int size) {
+int dv_cmp_const(const dig_t *a, const dig_t *b, size_t size) {
 	dig_t r = 0;
 
-	for (int i = 0; i < size; i++) {
+	for (size_t i = 0; i < size; i++) {
 		r |= a[i] ^ b[i];
 	}
 
 	return (r == 0 ? RLC_EQ : RLC_NE);
 }
 
-void dv_rshd(dig_t *c, const dig_t *a, int size, int digits) {
+void dv_rshd(dig_t *c, const dig_t *a, size_t size, uint_t digits) {
 	const dig_t *top;
 	dig_t *bot;
-	int i;
+	size_t i;
 
 	top = a + digits;
 	bot = c;
 
 	for (i = 0; i < size - digits; i++, top++, bot++) {
 		*bot = *top;
 	}
 	for (; i < size; i++, bot++) {
 		*bot = 0;
 	}
 }
 
-void dv_lshd(dig_t *c, const dig_t *a, int size, int digits) {
+void dv_lshd(dig_t *c, const dig_t *a, size_t size, uint_t digits) {
 	dig_t *top;
 	const dig_t *bot;
-	int i;
+	size_t i;
 
 	top = c + size - 1;
 	bot = a + size - 1 - digits;
 
 	for (i = 0; i < size - digits; i++, top--, bot--) {
 		*top = *bot;
 	}
 	for (i = 0; i < digits; i++, c++) {
 		*c = 0;
 	}
 }
diff --git a/src/relic_util.c b/src/relic_util.c
index 8bef8382..16108489 100644
--- a/src/relic_util.c
+++ b/src/relic_util.c
@@ -138,28 +138,28 @@ size_t util_bits_dig(dig_t a) {
     return RLC_DIG - arch_lzcnt(a);
 }
 
-int util_cmp_const(const void *a, const void *b, int size) {
+int util_cmp_const(const void *a, const void *b, size_t size) {
 	const uint8_t *_a = (const uint8_t *)a;
 	const uint8_t *_b = (const uint8_t *)b;
 	uint8_t result = 0;
 	int i;
 
 	for (i = 0; i < size; i++) {
 		result |= _a[i] ^ _b[i];
 	}
 
 	return (result == 0 ? RLC_EQ : RLC_NE);
 }
 
-void util_perm(uint_t p[], int n) {
+void util_perm(uint_t p[], size_t n) {
 	size_t i, j, k;
 
 	for (i = 0; i < n; i++) {
 		rand_bytes((uint8_t *)&k, sizeof(size_t));
 		j = k % (i+1);
 		p[i] = p[j];
 		p[j] = i;
 	}
 }
 
 #ifndef QUIET
