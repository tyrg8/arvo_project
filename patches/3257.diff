commit 7d47c5de57aa4abdc6e7426756601a0a55efc7df
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Fri Sep 1 17:35:02 2017 +0300

    SamsungV0Decompressor: upward prediction is invalid for the last block
    
    We are processing 16 pixels of the row at the time, but
    the line size is not guaranteed to be a multiple of 16...
    Thus, we need to check here.
    
    In downward case, we are conditionally writing, so that should be fine.

diff --git a/src/librawspeed/decompressors/SamsungV0Decompressor.cpp b/src/librawspeed/decompressors/SamsungV0Decompressor.cpp
index d3bc5008..891d0dbb 100644
--- a/src/librawspeed/decompressors/SamsungV0Decompressor.cpp
+++ b/src/librawspeed/decompressors/SamsungV0Decompressor.cpp
@@ -125,100 +125,104 @@ int32 SamsungV0Decompressor::calcAdj(BitPumpMSB32* bits, int b) {
 void SamsungV0Decompressor::decompressStrip(uint32 y,
                                             const ByteStream& bs) const {
   const uint32 width = mRaw->dim.x;
 
   BitPumpMSB32 bits(bs);
 
   int len[4];
   for (int& i : len)
     i = y < 2 ? 7 : 4;
 
   auto* img = reinterpret_cast<ushort16*>(mRaw->getData(0, y));
   const auto* const past_last =
       reinterpret_cast<ushort16*>(mRaw->getData(width - 1, y) + mRaw->getBpp());
   ushort16* img_up = reinterpret_cast<ushort16*>(
       mRaw->getData(0, std::max(0, static_cast<int>(y) - 1)));
   ushort16* img_up2 = reinterpret_cast<ushort16*>(
       mRaw->getData(0, std::max(0, static_cast<int>(y) - 2)));
 
   // Image is arranged in groups of 16 pixels horizontally
   for (uint32 x = 0; x < width; x += 16) {
     bits.fill();
     bool dir = !!bits.getBitsNoFill(1);
 
     int op[4];
     for (int& i : op)
       i = bits.getBitsNoFill(2);
 
     for (int i = 0; i < 4; i++) {
       assert(op[i] >= 0 && op[i] <= 3);
 
       switch (op[i]) {
       case 3:
         len[i] = bits.getBits(4);
         break;
       case 2:
         len[i]--;
         break;
       case 1:
         len[i]++;
         break;
       default:
         // FIXME: it can be zero too.
         break;
       }
 
       if (len[i] < 0)
         ThrowRDE("Bit length less than 0.");
       if (len[i] > 16)
         ThrowRDE("Bit Length more than 16.");
     }
 
     if (dir) {
       // Upward prediction
+
+      if (x + 16 >= width)
+        ThrowRDE("Upward prediction for the last block of pixels. Raw corrupt");
+
       // First we decode even pixels
       for (int c = 0; c < 16; c += 2) {
         int b = len[c >> 3];
         int32 adj = calcAdj(&bits, b);
 
         img[c] = adj + img_up[c];
       }
 
       // Now we decode odd pixels
       // Why on earth upward prediction only looks up 1 line above
       // is beyond me, it will hurt compression a deal.
       for (int c = 1; c < 16; c += 2) {
         int b = len[2 | (c >> 3)];
         int32 adj = calcAdj(&bits, b);
 
         img[c] = adj + img_up2[c];
       }
     } else {
       // Left to right prediction
       // First we decode even pixels
       int pred_left = x != 0 ? img[-2] : 128;
       for (int c = 0; c < 16; c += 2) {
         int b = len[c >> 3];
         int32 adj = calcAdj(&bits, b);
 
         if (img + c < past_last)
           img[c] = adj + pred_left;
       }
 
       // Now we decode odd pixels
       pred_left = x != 0 ? img[-1] : 128;
       for (int c = 1; c < 16; c += 2) {
         int b = len[2 | (c >> 3)];
         int32 adj = calcAdj(&bits, b);
 
         if (img + c < past_last)
           img[c] = adj + pred_left;
       }
     }
 
     img += 16;
     img_up += 16;
     img_up2 += 16;
   }
 }
 
 } // namespace rawspeed
