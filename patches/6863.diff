commit cdf05e931164dfdfc75031aa17591d09af8f9766
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Tue Mar 13 19:59:08 2018 -0400

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6853

diff --git a/MagickCore/draw.c b/MagickCore/draw.c
index 7417ab858..165ff1c8e 100644
--- a/MagickCore/draw.c
+++ b/MagickCore/draw.c
@@ -1659,39 +1659,39 @@ static MagickBooleanType DrawDashPolygon(const DrawInfo *draw_info,
 static size_t EllipsePoints(const PrimitiveInfo *primitive_info,
   const PointInfo start,const PointInfo stop,const PointInfo degrees)
 {
   double
     delta,
     step,
     y;
 
   PointInfo
     angle;
 
   register const PrimitiveInfo
     *p;
 
   size_t
     number_points;
 
   /*
     Ellipses are just short segmented polys.
   */
-  if ((fabs(stop.x) < DrawEpsilon) && (fabs(stop.y) < DrawEpsilon))
+  if ((fabs(stop.x) < DrawEpsilon) || (fabs(stop.y) < DrawEpsilon))
     return(1);
   delta=2.0/MagickMax(stop.x,stop.y);
   step=MagickPI/8.0;
   if ((delta >= 0.0) && (delta < (MagickPI/8.0)))
     step=MagickPI/(4*(MagickPI/delta/2+0.5));
   angle.x=DegreesToRadians(degrees.x);
   y=degrees.y;
   while (y < degrees.x)
     y+=360.0;
   angle.y=DegreesToRadians(y);
   number_points=0;
   for (p=primitive_info; angle.x < angle.y; angle.x+=step)
   {
     number_points++;
     p+=p->coordinates;
   }
   return(number_points+1);
 }
@@ -5480,53 +5480,53 @@ static void TraceCircle(PrimitiveInfo *primitive_info,const PointInfo start,
 static void TraceEllipse(PrimitiveInfo *primitive_info,const PointInfo start,
   const PointInfo stop,const PointInfo degrees)
 {
   double
     delta,
     step,
     y;
 
   PointInfo
     angle,
     point;
 
   register PrimitiveInfo
     *p;
 
   register ssize_t
     i;
 
   /*
     Ellipses are just short segmented polys.
   */
-  if ((fabs(stop.x) < DrawEpsilon) && (fabs(stop.y) < DrawEpsilon))
+  if ((fabs(stop.x) < DrawEpsilon) || (fabs(stop.y) < DrawEpsilon))
     {
       TracePoint(primitive_info,start);
       return;
     }
   delta=2.0/MagickMax(stop.x,stop.y);
   step=MagickPI/8.0;
   if ((delta >= 0.0) && (delta < (MagickPI/8.0)))
     step=MagickPI/(4*(MagickPI/delta/2+0.5));
   angle.x=DegreesToRadians(degrees.x);
   y=degrees.y;
   while (y < degrees.x)
     y+=360.0;
   angle.y=DegreesToRadians(y);
   for (p=primitive_info; angle.x < angle.y; angle.x+=step)
   {
     point.x=cos(fmod(angle.x,DegreesToRadians(360.0)))*stop.x+start.x;
     point.y=sin(fmod(angle.x,DegreesToRadians(360.0)))*stop.y+start.y;
     TracePoint(p,point);
     p+=p->coordinates;
   }
   point.x=cos(fmod(angle.y,DegreesToRadians(360.0)))*stop.x+start.x;
   point.y=sin(fmod(angle.y,DegreesToRadians(360.0)))*stop.y+start.y;
   TracePoint(p,point);
   p+=p->coordinates;
   primitive_info->coordinates=(size_t) (p-primitive_info);
   for (i=0; i < (ssize_t) primitive_info->coordinates; i++)
   {
     p->primitive=primitive_info->primitive;
     p--;
   }
 }
