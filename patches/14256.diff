commit 912eb73afb7aef98723e1ee0ace0c9f78898878c
Author: Dirk Lemstra <dirk@lemstra.org>
Date:   Fri Jul 12 10:46:33 2019 +0200

    Added missing EOF checks.

diff --git a/coders/jpeg.c b/coders/jpeg.c
index 9db3461c5..2d62c9954 100644
--- a/coders/jpeg.c
+++ b/coders/jpeg.c
@@ -277,7 +277,11 @@ static boolean FillInputBuffer(j_decompress_ptr cinfo)
 static int GetCharacter(j_decompress_ptr jpeg_info)
 {
   if (jpeg_info->src->bytes_in_buffer == 0)
-    (void) (*jpeg_info->src->fill_input_buffer)(jpeg_info);
+    {
+      (void) (*jpeg_info->src->fill_input_buffer)(jpeg_info);
+      if (jpeg_info->err->msg_code == JWRN_JPEG_EOF)
+        return EOF;
+    }
   jpeg_info->src->bytes_in_buffer--;
   return((int) GETJOCTET(*jpeg_info->src->next_input_byte++));
 }
@@ -412,63 +416,71 @@ static MagickBooleanType JPEGWarningHandler(j_common_ptr jpeg_info,int level)
 static boolean ReadComment(j_decompress_ptr jpeg_info)
 {
   ErrorManager
     *error_manager;
 
   ExceptionInfo
     *exception;
 
   Image
     *image;
 
   register unsigned char
     *p;
 
   register ssize_t
     i;
 
   size_t
     length;
 
   StringInfo
     *comment;
 
   /*
     Determine length of comment.
   */
   error_manager=(ErrorManager *) jpeg_info->client_data;
   exception=error_manager->exception;
   image=error_manager->image;
   length=(size_t) ((size_t) GetCharacter(jpeg_info) << 8);
   length+=GetCharacter(jpeg_info);
   if (length <= 2)
     return(TRUE);
   length-=2;
   comment=BlobToStringInfo((const void *) NULL,length);
   if (comment == (StringInfo *) NULL)
     {
       (void) ThrowMagickException(exception,GetMagickModule(),
         ResourceLimitError,"MemoryAllocationFailed","`%s'",image->filename);
       return(FALSE);
     }
   /*
     Read comment.
   */
   error_manager->profile=comment;
   p=GetStringInfoDatum(comment);
-  for (i=0; i < (ssize_t) GetStringInfoLength(comment); i++)
+  for (i=0; i < (ssize_t) length; i++)
   {
     int
       c;
 
     c=GetCharacter(jpeg_info);
     if (c == EOF)
       break;
     *p++=(unsigned char) c;
   }
   *p='\0';
   error_manager->profile=NULL;
+  if (i != (ssize_t) length)
+    {
+      comment=DestroyStringInfo(comment);
+      (void) ThrowMagickException(exception,GetMagickModule(),
+        CorruptImageError,"InsufficientImageDataInFile","`%s'",
+        image->filename);
+      return(FALSE);
+    }
   p=GetStringInfoDatum(comment);
   (void) SetImageProperty(image,"comment",(const char *) p,exception);
   comment=DestroyStringInfo(comment);
   return(TRUE);
 }
@@ -476,103 +488,111 @@ static boolean ReadComment(j_decompress_ptr jpeg_info)
 static boolean ReadICCProfile(j_decompress_ptr jpeg_info)
 {
   char
     magick[12];
 
   ErrorManager
     *error_manager;
 
   ExceptionInfo
     *exception;
 
   Image
     *image;
 
   MagickBooleanType
     status;
 
   register ssize_t
     i;
 
   register unsigned char
     *p;
 
   size_t
     length;
 
   StringInfo
     *icc_profile,
     *profile;
 
   /*
     Read color profile.
   */
   length=(size_t) ((size_t) GetCharacter(jpeg_info) << 8);
   length+=(size_t) GetCharacter(jpeg_info);
   length-=2;
   if (length <= 14)
     {
       while (length-- > 0)
         if (GetCharacter(jpeg_info) == EOF)
           break;
       return(TRUE);
     }
   for (i=0; i < 12; i++)
     magick[i]=(char) GetCharacter(jpeg_info);
   if (LocaleCompare(magick,ICC_PROFILE) != 0)
     {
       /*
         Not a ICC profile, return.
       */
       for (i=0; i < (ssize_t) (length-12); i++)
         if (GetCharacter(jpeg_info) == EOF)
           break;
       return(TRUE);
     }
   (void) GetCharacter(jpeg_info);  /* id */
   (void) GetCharacter(jpeg_info);  /* markers */
   length-=14;
   error_manager=(ErrorManager *) jpeg_info->client_data;
   exception=error_manager->exception;
   image=error_manager->image;
   profile=BlobToStringInfo((const void *) NULL,length);
   if (profile == (StringInfo *) NULL)
     {
       (void) ThrowMagickException(exception,GetMagickModule(),
         ResourceLimitError,"MemoryAllocationFailed","`%s'",image->filename);
       return(FALSE);
     }
   error_manager->profile=profile;
   p=GetStringInfoDatum(profile);
-  for (i=(ssize_t) GetStringInfoLength(profile)-1; i >= 0; i--)
+  for (i=0; i < (ssize_t) length; i++)
   {
     int
       c;
 
     c=GetCharacter(jpeg_info);
     if (c == EOF)
       break;
     *p++=(unsigned char) c;
   }
+  if (i != (ssize_t) length)
+    {
+      profile=DestroyStringInfo(profile);
+      (void) ThrowMagickException(exception,GetMagickModule(),
+        CorruptImageError,"InsufficientImageDataInFile","`%s'",
+        image->filename);
+      return(FALSE);
+    }
   error_manager->profile=NULL;
   icc_profile=(StringInfo *) GetImageProfile(image,"icc");
   if (icc_profile != (StringInfo *) NULL)
     {
       ConcatenateStringInfo(icc_profile,profile);
       profile=DestroyStringInfo(profile);
     }
   else
     {
       status=SetImageProfile(image,"icc",profile,exception);
       profile=DestroyStringInfo(profile);
       if (status == MagickFalse)
         {
           (void) ThrowMagickException(exception,GetMagickModule(),
             ResourceLimitError,"MemoryAllocationFailed","`%s'",image->filename);
           return(FALSE);
         }
     }
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(CoderEvent,GetMagickModule(),
       "Profile: ICC, %.20g bytes",(double) length);
   return(TRUE);
 }
@@ -580,117 +600,125 @@ static boolean ReadICCProfile(j_decompress_ptr jpeg_info)
 static boolean ReadIPTCProfile(j_decompress_ptr jpeg_info)
 {
   char
     magick[MagickPathExtent];
 
   ErrorManager
     *error_manager;
 
   ExceptionInfo
     *exception;
 
   Image
     *image;
 
   MagickBooleanType
     status;
 
   register ssize_t
     i;
 
   register unsigned char
     *p;
 
   size_t
     length;
 
   StringInfo
     *iptc_profile,
     *profile;
 
   /*
     Determine length of binary data stored here.
   */
   length=(size_t) ((size_t) GetCharacter(jpeg_info) << 8);
   length+=(size_t) GetCharacter(jpeg_info);
   length-=2;
   if (length <= 14)
     {
       while (length-- > 0)
         if (GetCharacter(jpeg_info) == EOF)
           break;
       return(TRUE);
     }
   /*
     Validate that this was written as a Photoshop resource format slug.
   */
   for (i=0; i < 10; i++)
     magick[i]=(char) GetCharacter(jpeg_info);
   magick[10]='\0';
   length-=10;
   if (length <= 10)
     return(TRUE);
   if (LocaleCompare(magick,"Photoshop ") != 0)
     {
       /*
         Not a IPTC profile, return.
       */
       for (i=0; i < (ssize_t) length; i++)
         if (GetCharacter(jpeg_info) == EOF)
           break;
       return(TRUE);
     }
   /*
     Remove the version number.
   */
   for (i=0; i < 4; i++)
     if (GetCharacter(jpeg_info) == EOF)
       break;
   if (length <= 11)
     return(TRUE);
   length-=4;
   error_manager=(ErrorManager *) jpeg_info->client_data;
   exception=error_manager->exception;
   image=error_manager->image;
   profile=BlobToStringInfo((const void *) NULL,length);
   if (profile == (StringInfo *) NULL)
     {
       (void) ThrowMagickException(exception,GetMagickModule(),
         ResourceLimitError,"MemoryAllocationFailed","`%s'",image->filename);
       return(FALSE);
     }
   error_manager->profile=profile;
   p=GetStringInfoDatum(profile);
-  for (i=0;  i < (ssize_t) GetStringInfoLength(profile); i++)
+  for (i=0; i < (ssize_t) length; i++)
   {
     int
       c;
 
     c=GetCharacter(jpeg_info);
     if (c == EOF)
       break;
     *p++=(unsigned char) c;
   }
   error_manager->profile=NULL;
+  if (i != (ssize_t) length)
+    {
+      profile=DestroyStringInfo(profile);
+      (void) ThrowMagickException(exception,GetMagickModule(),
+        CorruptImageError,"InsufficientImageDataInFile","`%s'",
+        image->filename);
+      return(FALSE);
+    }
   /* The IPTC profile is actually an 8bim */
   iptc_profile=(StringInfo *) GetImageProfile(image,"8bim");
   if (iptc_profile != (StringInfo *) NULL)
     {
       ConcatenateStringInfo(iptc_profile,profile);
       profile=DestroyStringInfo(profile);
     }
   else
     {
       status=SetImageProfile(image,"8bim",profile,exception);
       profile=DestroyStringInfo(profile);
       if (status == MagickFalse)
         {
           (void) ThrowMagickException(exception,GetMagickModule(),
             ResourceLimitError,"MemoryAllocationFailed","`%s'",image->filename);
           return(FALSE);
         }
     }
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(CoderEvent,GetMagickModule(),
       "Profile: iptc, %.20g bytes",(double) length);
   return(TRUE);
 }
@@ -698,124 +726,132 @@ static boolean ReadIPTCProfile(j_decompress_ptr jpeg_info)
 static boolean ReadProfile(j_decompress_ptr jpeg_info)
 {
   char
     name[MagickPathExtent];
 
   const StringInfo
     *previous_profile;
 
   ErrorManager
     *error_manager;
 
   ExceptionInfo
     *exception;
 
   Image
     *image;
 
   int
     marker;
 
   MagickBooleanType
     status;
 
   register ssize_t
     i;
 
   register unsigned char
     *p;
 
   size_t
     length;
 
   StringInfo
     *profile;
 
   /*
     Read generic profile.
   */
   length=(size_t) ((size_t) GetCharacter(jpeg_info) << 8);
   length+=(size_t) GetCharacter(jpeg_info);
   if (length <= 2)
     return(TRUE);
   length-=2;
   marker=jpeg_info->unread_marker-JPEG_APP0;
   (void) FormatLocaleString(name,MagickPathExtent,"APP%d",marker);
   error_manager=(ErrorManager *) jpeg_info->client_data;
   exception=error_manager->exception;
   image=error_manager->image;
   profile=BlobToStringInfo((const void *) NULL,length);
   if (profile == (StringInfo *) NULL)
     {
       (void) ThrowMagickException(exception,GetMagickModule(),
         ResourceLimitError,"MemoryAllocationFailed","`%s'",image->filename);
       return(FALSE);
     }
   error_manager->profile=profile;
   p=GetStringInfoDatum(profile);
-  for (i=0; i < (ssize_t) GetStringInfoLength(profile); i++)
+  for (i=0; i < (ssize_t) length; i++)
   {
     int
       c;
 
     c=GetCharacter(jpeg_info);
     if (c == EOF)
       break;
     *p++=(unsigned char) c;
   }
   error_manager->profile=NULL;
+  if (i != (ssize_t) length)
+    {
+      profile=DestroyStringInfo(profile);
+      (void) ThrowMagickException(exception,GetMagickModule(),
+        CorruptImageError,"InsufficientImageDataInFile","`%s'",
+        image->filename);
+      return(FALSE);
+    }
   if (marker == 1)
     {
       p=GetStringInfoDatum(profile);
       if ((length > 4) && (LocaleNCompare((char *) p,"exif",4) == 0))
         (void) CopyMagickString(name,"exif",MagickPathExtent);
       else if ((length > XmpNamespaceExtent) &&
           (LocaleNCompare((char *) p,xmp_namespace,XmpNamespaceExtent-1) == 0))
         {
           ssize_t
             j;
 
           /*
             Extract namespace from XMP profile.
           */
           p=GetStringInfoDatum(profile)+XmpNamespaceExtent;
           for (j=XmpNamespaceExtent; j < (ssize_t) GetStringInfoLength(profile); j++)
           {
             if (*p == '\0')
               break;
             p++;
           }
           if (j < (ssize_t) GetStringInfoLength(profile))
             (void) DestroyStringInfo(SplitStringInfo(profile,(size_t) (j+1)));
           (void) CopyMagickString(name,"xmp",MagickPathExtent);
         }
     }
   previous_profile=GetImageProfile(image,name);
   if ((previous_profile != (const StringInfo *) NULL) &&
       (CompareStringInfo(previous_profile,profile) != 0))
     {
       size_t
         profile_length;
 
       profile_length=GetStringInfoLength(profile);
       SetStringInfoLength(profile,GetStringInfoLength(profile)+
         GetStringInfoLength(previous_profile));
       (void) memmove(GetStringInfoDatum(profile)+
         GetStringInfoLength(previous_profile),GetStringInfoDatum(profile),
         profile_length);
       (void) memcpy(GetStringInfoDatum(profile),
         GetStringInfoDatum(previous_profile),
         GetStringInfoLength(previous_profile));
     }
   status=SetImageProfile(image,name,profile,exception);
   profile=DestroyStringInfo(profile);
   if (status == MagickFalse)
     {
       (void) ThrowMagickException(exception,GetMagickModule(),
         ResourceLimitError,"MemoryAllocationFailed","`%s'",image->filename);
       return(FALSE);
     }
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(CoderEvent,GetMagickModule(),
       "Profile: %s, %.20g bytes",name,(double) length);
   return(TRUE);
 }
