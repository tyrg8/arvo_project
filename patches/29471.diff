commit 1e9394d5a80b4f565c7bc3b5a5df40b3126a3af7
Merge: 563e3c6b6 8fec1de07
Author: toddouska <todd@wolfssl.com>
Date:   Mon Jan 18 15:13:55 2021 -0800

    Merge pull request #3627 from elms/EVP/ofb_rc4_size
    
    EVP: return proper cipher type and block size

diff --git a/tests/api.c b/tests/api.c
index 386526106..bff422882 100644
--- a/tests/api.c
+++ b/tests/api.c
@@ -34620,6 +34620,78 @@ static void test_wolfSSL_EVP_X_STATE_LEN(void)
     printf(resultFmt, passed);
 #endif
 }
+
+static void test_wolfSSL_EVP_CIPHER_block_size(void)
+{
+#if defined(OPENSSL_ALL)
+
+#ifdef HAVE_AES_CBC
+    #ifdef WOLFSSL_AES_128
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_128_cbc()), AES_BLOCK_SIZE);
+    #endif
+    #ifdef WOLFSSL_AES_192
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_192_cbc()), AES_BLOCK_SIZE);
+    #endif
+    #ifdef WOLFSSL_AES_256
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_256_cbc()), AES_BLOCK_SIZE);
+    #endif
+#endif
+
+#ifdef HAVE_AES_GCM
+    #ifdef WOLFSSL_AES_128
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_128_gcm()), 1);
+    #endif
+    #ifdef WOLFSSL_AES_192
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_192_gcm()), 1);
+    #endif
+    #ifdef WOLFSSL_AES_256
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_256_gcm()), 1);
+    #endif
+#endif
+
+#ifdef WOLFSSL_AES_COUNTER
+    #ifdef WOLFSSL_AES_128
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_128_ctr()), 1);
+    #endif
+    #ifdef WOLFSSL_AES_192
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_192_ctr()), 1);
+    #endif
+    #ifdef WOLFSSL_AES_256
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_256_ctr()), 1);
+    #endif
+#endif
+
+#ifdef WOLFSSL_AES_ECB
+    #ifdef WOLFSSL_AES_128
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_128_ecb()), AES_BLOCK_SIZE);
+    #endif
+    #ifdef WOLFSSL_AES_192
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_192_ecb()), AES_BLOCK_SIZE);
+    #endif
+    #ifdef WOLFSSL_AES_256
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_256_ecb()), AES_BLOCK_SIZE);
+    #endif
+#endif
+
+#ifdef WOLFSSL_AES_OFB
+    #ifdef WOLFSSL_AES_128
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_128_ofb()), 1);
+    #endif
+    #ifdef WOLFSSL_AES_192
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_192_ofb()), 1);
+    #endif
+    #ifdef WOLFSSL_AES_256
+    AssertIntEQ(EVP_CIPHER_block_size(EVP_aes_256_ofb()), 1);
+    #endif
+#endif
+
+#ifndef NO_RC4
+    AssertIntEQ(EVP_CIPHER_block_size(wolfSSL_EVP_rc4()), 1);
+#endif
+
+#endif /* OPENSSL_ALL */
+}
+
 static void test_wolfSSL_EVP_CIPHER_iv_length(void)
 {
 #if defined(OPENSSL_ALL)
@@ -39856,730 +39928,731 @@ static int test_various_pathlen_chains(void)
 void ApiTest(void)
 {
     printf("\n-----------------Porting tests------------------\n");
     AssertTrue(test_fileAccess());
 
     printf(" Begin API Tests\n");
     AssertIntEQ(test_wolfSSL_Init(), WOLFSSL_SUCCESS);
     /* wolfcrypt initialization tests */
     test_wolfSSL_Method_Allocators();
 #ifndef NO_WOLFSSL_SERVER
     test_wolfSSL_CTX_new(wolfSSLv23_server_method());
 #endif
 #if (!defined(NO_WOLFSSL_CLIENT) || !defined(NO_WOLFSSL_SERVER)) && \
 (!defined(NO_RSA) || defined(HAVE_ECC))
     test_for_double_Free();
 #endif
     test_wolfSSL_CTX_use_certificate_file();
     AssertIntEQ(test_wolfSSL_CTX_use_certificate_buffer(), WOLFSSL_SUCCESS);
     test_wolfSSL_CTX_use_PrivateKey_file();
     test_wolfSSL_CTX_load_verify_locations();
     test_wolfSSL_CertManagerLoadCABuffer();
     test_wolfSSL_CertManagerGetCerts();
     test_wolfSSL_CertManagerSetVerify();
     test_wolfSSL_CertManagerNameConstraint();
     test_wolfSSL_CertManagerNameConstraint2();
     test_wolfSSL_CertManagerCRL();
     test_wolfSSL_CTX_load_verify_locations_ex();
     test_wolfSSL_CTX_load_verify_buffer_ex();
     test_wolfSSL_CTX_load_verify_chain_buffer_format();
     test_wolfSSL_CTX_use_certificate_chain_file_format();
     test_wolfSSL_CTX_trust_peer_cert();
     test_wolfSSL_CTX_SetTmpDH_file();
     test_wolfSSL_CTX_SetTmpDH_buffer();
     test_wolfSSL_CTX_SetMinMaxDhKey_Sz();
     test_wolfSSL_CTX_der_load_verify_locations();
     test_wolfSSL_CTX_enable_disable();
     test_server_wolfSSL_new();
     test_client_wolfSSL_new();
     test_wolfSSL_SetTmpDH_file();
     test_wolfSSL_SetTmpDH_buffer();
     test_wolfSSL_SetMinMaxDhKey_Sz();
     test_SetTmpEC_DHE_Sz();
     test_wolfSSL_dtls_set_mtu();
 #if !defined(NO_WOLFSSL_CLIENT) && !defined(NO_WOLFSSL_SERVER) && \
     defined(HAVE_IO_TESTS_DEPENDENCIES)
     test_wolfSSL_read_write();
 #if defined(OPENSSL_EXTRA) && !defined(NO_SESSION_CACHE) && !defined(WOLFSSL_TLS13)
     test_wolfSSL_reuse_WOLFSSLobj();
 #endif
     test_wolfSSL_dtls_export();
 #endif
     AssertIntEQ(test_wolfSSL_SetMinVersion(), WOLFSSL_SUCCESS);
     AssertIntEQ(test_wolfSSL_CTX_SetMinVersion(), WOLFSSL_SUCCESS);
 
     /* TLS extensions tests */
 #ifdef HAVE_IO_TESTS_DEPENDENCIES
     test_wolfSSL_UseSNI();
 #endif
     test_wolfSSL_UseTrustedCA();
     test_wolfSSL_UseMaxFragment();
     test_wolfSSL_UseTruncatedHMAC();
     test_wolfSSL_UseSupportedCurve();
     test_wolfSSL_UseALPN();
     test_wolfSSL_DisableExtendedMasterSecret();
     test_wolfSSL_wolfSSL_UseSecureRenegotiation();
 
     /* X509 tests */
     test_wolfSSL_X509_NAME_get_entry();
     test_wolfSSL_PKCS12();
     test_wolfSSL_no_password_cb();
     test_wolfSSL_PKCS8();
     test_wolfSSL_PKCS8_ED25519();
     test_wolfSSL_PKCS8_ED448();
     test_wolfSSL_PKCS5();
     test_wolfSSL_URI();
     test_wolfSSL_TBS();
     test_wolfSSL_X509_verify();
     test_wolfSSL_X509_TLS_version();
 
     test_wc_PemToDer();
     test_wc_AllocDer();
     test_wc_CertPemToDer();
     test_wc_PubKeyPemToDer();
     test_wc_PemPubKeyToDer();
 
     /*OCSP Stapling. */
     AssertIntEQ(test_wolfSSL_UseOCSPStapling(), WOLFSSL_SUCCESS);
     AssertIntEQ(test_wolfSSL_UseOCSPStaplingV2(), WOLFSSL_SUCCESS);
 
     /* Multicast */
     test_wolfSSL_mcast();
 
     /* compatibility tests */
     test_wolfSSL_lhash();
     test_wolfSSL_X509_NAME();
 #ifndef NO_BIO
     test_wolfSSL_X509_INFO();
 #endif
     test_wolfSSL_X509_subject_name_hash();
     test_wolfSSL_X509_issuer_name_hash();
     test_wolfSSL_X509_check_host();
     test_wolfSSL_DES();
     test_wolfSSL_certs();
     test_wolfSSL_X509_check_private_key();
     test_wolfSSL_ASN1_TIME_print();
     test_wolfSSL_ASN1_UTCTIME_print();
     test_wolfSSL_ASN1_GENERALIZEDTIME_free();
     test_wolfSSL_private_keys();
     test_wolfSSL_PEM_PrivateKey();
 #ifndef NO_BIO
     test_wolfSSL_PEM_bio_RSAKey();
     test_wolfSSL_PEM_bio_DSAKey();
     test_wolfSSL_PEM_bio_ECKey();
     test_wolfSSL_PEM_RSAPrivateKey();
     test_wolfSSL_PEM_PUBKEY();
 #endif
     test_DSA_do_sign_verify();
     test_wolfSSL_tmp_dh();
     test_wolfSSL_ctrl();
     test_wolfSSL_EVP_MD_size();
     test_wolfSSL_EVP_Digest();
     test_wolfSSL_EVP_PKEY_new_mac_key();
     test_wolfSSL_EVP_MD_hmac_signing();
     test_wolfSSL_EVP_MD_rsa_signing();
     test_wolfSSL_EVP_MD_ecc_signing();
     test_wolfSSL_CTX_add_extra_chain_cert();
 #if !defined(NO_WOLFSSL_CLIENT) && !defined(NO_WOLFSSL_SERVER)
     test_wolfSSL_ERR_peek_last_error_line();
 #endif
 #ifndef NO_BIO
     test_wolfSSL_ERR_print_errors_cb();
     AssertFalse(test_wolfSSL_GetLoggingCb());
     AssertFalse(test_WOLFSSL_ERROR_MSG());
     AssertFalse(test_wc_ERR_remove_state());
     AssertFalse(test_wc_ERR_print_errors_fp());
 #endif
     test_wolfSSL_set_options();
     test_wolfSSL_sk_SSL_CIPHER();
     test_wolfSSL_PKCS7_certs();
     test_wolfSSL_X509_STORE_CTX();
     test_wolfSSL_X509_STORE_CTX_get0_current_issuer();
     test_wolfSSL_msgCb();
     test_wolfSSL_either_side();
     test_wolfSSL_DTLS_either_side();
     test_generate_cookie();
     test_wolfSSL_X509_STORE_set_flags();
     test_wolfSSL_X509_LOOKUP_load_file();
     test_wolfSSL_X509_NID();
     test_wolfSSL_X509_STORE_CTX_set_time();
     test_wolfSSL_get0_param();
     test_wolfSSL_X509_VERIFY_PARAM_set1_host();
     test_wolfSSL_X509_STORE_CTX_get0_store();
     test_wolfSSL_X509_STORE();
     test_wolfSSL_X509_STORE_load_locations();
     test_wolfSSL_BN();
 #ifndef NO_BIO
     test_wolfSSL_PEM_read_bio();
     test_wolfSSL_BIO();
 #endif
     test_wolfSSL_ASN1_STRING();
     test_wolfSSL_ASN1_BIT_STRING();
     test_wolfSSL_X509();
     test_wolfSSL_X509_VERIFY_PARAM();
     test_wolfSSL_X509_sign();
     test_wolfSSL_X509_get0_tbs_sigalg();
     test_wolfSSL_X509_ALGOR_get0();
     test_wolfSSL_X509_get_X509_PUBKEY();
     test_wolfSSL_X509_PUBKEY();
     test_wolfSSL_RAND();
     test_wolfSSL_BUF();
     test_wolfSSL_set_tlsext_status_type();
     test_wolfSSL_ASN1_TIME_adj();
     test_wolfSSL_X509_cmp_time();
     test_wolfSSL_X509_time_adj();
     test_wolfSSL_CTX_set_client_CA_list();
     test_wolfSSL_CTX_add_client_CA();
     test_wolfSSL_CTX_set_srp_username();
     test_wolfSSL_CTX_set_srp_password();
     test_wolfSSL_pseudo_rand();
     test_wolfSSL_PKCS8_Compat();
     test_wolfSSL_PKCS8_d2i();
     test_wolfSSL_ERR_put_error();
 #ifndef NO_BIO
     test_wolfSSL_ERR_print_errors();
 #endif
     test_wolfSSL_HMAC();
     test_wolfSSL_OBJ();
     test_wolfSSL_i2a_ASN1_OBJECT();
     test_wolfSSL_OBJ_cmp();
     test_wolfSSL_OBJ_txt2nid();
     test_wolfSSL_OBJ_txt2obj();
     test_wolfSSL_X509_NAME_ENTRY();
     test_wolfSSL_X509_set_name();
     test_wolfSSL_X509_set_notAfter();
     test_wolfSSL_X509_set_notBefore();
     test_wolfSSL_X509_set_version();
 #ifndef NO_BIO
     test_wolfSSL_BIO_gets();
     test_wolfSSL_BIO_puts();
     test_wolfSSL_BIO_should_retry();
     test_wolfSSL_d2i_PUBKEY();
     test_wolfSSL_BIO_write();
     test_wolfSSL_BIO_printf();
     test_wolfSSL_BIO_f_md();
 #endif
     test_wolfSSL_SESSION();
     test_wolfSSL_DES_ecb_encrypt();
     test_wolfSSL_sk_GENERAL_NAME();
     test_wolfSSL_MD4();
     test_wolfSSL_RSA();
     test_wolfSSL_RSA_DER();
     test_wolfSSL_RSA_get0_key();
     test_wolfSSL_RSA_meth();
     test_wolfSSL_verify_depth();
     test_wolfSSL_HMAC_CTX();
     test_wolfSSL_msg_callback();
     test_wolfSSL_SHA();
     test_wolfSSL_DH_1536_prime();
     test_wolfSSL_PEM_write_DHparams();
     test_wolfSSL_AES_ecb_encrypt();
     test_wolfSSL_SHA256();
     test_wolfSSL_X509_get_serialNumber();
     test_wolfSSL_X509_CRL();
     test_wolfSSL_d2i_X509_REQ();
     test_wolfSSL_PEM_read_X509();
     test_wolfSSL_PEM_read();
 #ifndef NO_BIO
     test_wolfSSL_PEM_X509_INFO_read_bio();
     test_wolfSSL_PEM_read_bio_ECPKParameters();
 #endif
     test_wolfSSL_X509_NAME_ENTRY_get_object();
     test_wolfSSL_OpenSSL_add_all_algorithms();
     test_wolfSSL_ASN1_STRING_print_ex();
     test_wolfSSL_ASN1_TIME_to_generalizedtime();
     test_wolfSSL_ASN1_INTEGER_set();
     test_wolfSSL_IMPLEMENT_ASN1_FUNCTIONS();
     test_wolfSSL_i2c_ASN1_INTEGER();
     test_wolfSSL_X509_check_ca();
     test_wolfSSL_X509_check_ip_asc();
     test_wolfSSL_DC_cert();
     test_wolfSSL_DES_ncbc();
     test_wolfSSL_AES_cbc_encrypt();
     test_wolfssl_EVP_aes_gcm_AAD_2_parts();
     test_wolfssl_EVP_aes_gcm();
     test_wolfSSL_PKEY_up_ref();
     test_wolfSSL_i2d_PrivateKey();
     test_wolfSSL_OCSP_id_get0_info();
     test_wolfSSL_i2d_OCSP_CERTID();
     test_wolfSSL_OCSP_SINGLERESP_get0_id();
     test_wolfSSL_OCSP_single_get0_status();
     test_wolfSSL_OCSP_resp_count();
     test_wolfSSL_OCSP_resp_get0();
     test_wolfSSL_EVP_PKEY_derive();
     test_wolfSSL_RSA_padding_add_PKCS1_PSS();
 
 #if defined(OPENSSL_ALL)
     test_wolfSSL_X509_PUBKEY_get();
     test_wolfSSL_sk_CIPHER_description();
     test_wolfSSL_get_ciphers_compat();
     test_wolfSSL_d2i_DHparams();
     test_wolfSSL_i2d_DHparams();
     test_wolfSSL_ASN1_STRING_to_UTF8();
     test_wolfSSL_ASN1_UNIVERSALSTRING_to_string();
     test_wolfSSL_EC_KEY_dup();
     test_wolfSSL_EVP_PKEY_set1_get1_DSA();
     test_wolfSSL_EVP_PKEY_set1_get1_EC_KEY();
     test_wolfSSL_EVP_PKEY_set1_get1_DH();
     test_wolfSSL_CTX_ctrl();
     test_wolfSSL_DH_check();
     test_wolfSSL_EVP_PKEY_assign();
     test_wolfSSL_EVP_PKEY_base_id();
     test_wolfSSL_EVP_PKEY_id();
     test_wolfSSL_EVP_PKEY_keygen();
     test_wolfSSL_EVP_PKEY_keygen_init();
     test_wolfSSL_EVP_PKEY_missing_parameters();
     test_wolfSSL_EVP_PKEY_CTX_set_rsa_keygen_bits();
     test_wolfSSL_EVP_CIPHER_CTX_iv_length();
     test_wolfSSL_EVP_CIPHER_CTX_key_length();
     test_wolfSSL_EVP_CIPHER_CTX_set_key_length();
     test_wolfSSL_EVP_CIPHER_CTX_set_iv();
     test_wolfSSL_EVP_PKEY_CTX_new_id();
     test_wolfSSL_EVP_rc4();
     test_wolfSSL_EVP_enc_null();
     test_wolfSSL_EVP_rc2_cbc();
     test_wolfSSL_EVP_mdc2();
     test_wolfSSL_EVP_md4();
     test_wolfSSL_EVP_aes_256_gcm();
     test_wolfSSL_EVP_aes_192_gcm();
     test_wolfSSL_EVP_ripemd160();
     test_wolfSSL_EVP_get_digestbynid();
     test_wolfSSL_EVP_PKEY_get0_EC_KEY();
     test_wolfSSL_EVP_X_STATE();
     test_wolfSSL_EVP_X_STATE_LEN();
+    test_wolfSSL_EVP_CIPHER_block_size();
     test_wolfSSL_EVP_CIPHER_iv_length();
     test_wolfSSL_EVP_SignInit_ex();
     test_wolfSSL_EVP_DigestFinal_ex();
     test_wolfSSL_EVP_PKEY_assign_DH();
     test_wolfSSL_EVP_BytesToKey();
     test_IncCtr();
     test_wolfSSL_OBJ_ln();
     test_wolfSSL_OBJ_sn();
     test_wolfSSL_TXT_DB();
     test_wolfSSL_NCONF();
 
 #endif /* OPENSSL_ALL */
 
 #if (defined(OPENSSL_ALL) || defined(WOLFSSL_ASIO)) && !defined(NO_RSA)
     AssertIntEQ(test_wolfSSL_CTX_use_certificate_ASN1(), WOLFSSL_SUCCESS);
 #ifndef NO_BIO
     test_wolfSSL_d2i_PrivateKeys_bio();
 #endif
 #endif /* OPENSSL_ALL || WOLFSSL_ASIO */
 
     test_wolfSSL_X509_CA_num();
     test_wolfSSL_X509_get_version();
 #ifndef NO_BIO
     test_wolfSSL_X509_print();
     test_wolfSSL_BIO_get_len();
 #endif
     test_wolfSSL_RSA_verify();
     test_wolfSSL_X509V3_EXT_get();
     test_wolfSSL_X509V3_EXT();
     test_wolfSSL_X509_get_ext();
     test_wolfSSL_X509_get_ext_by_NID();
     test_wolfSSL_X509_get_ext_count();
     test_wolfSSL_X509_EXTENSION_new();
     test_wolfSSL_X509_EXTENSION_get_object();
     test_wolfSSL_X509_EXTENSION_get_data();
     test_wolfSSL_X509_EXTENSION_get_critical();
     test_wolfSSL_X509V3_EXT_print();
     test_wolfSSL_X509_cmp();
 #ifndef NO_BIO
     test_wolfSSL_RSA_print();
     test_wolfSSL_ASN1_STRING_print();
 #endif
     test_wolfSSL_ASN1_get_object();
     test_openssl_generate_key_and_cert();
 
     test_wolfSSL_EC_get_builtin_curves();
 
     test_wolfSSL_CRYPTO_memcmp();
 
     /* test the no op functions for compatibility */
     test_no_op_functions();
 
     /* OpenSSL EVP_PKEY API tests */
     test_EVP_PKEY_rsa();
     test_wolfSSL_EVP_PKEY_encrypt();
     test_wolfSSL_EVP_PKEY_sign();
     test_EVP_PKEY_ec();
     test_EVP_PKEY_cmp();
     /* OpenSSL error API tests */
     test_ERR_load_crypto_strings();
     /* OpenSSL sk_X509 API test */
     test_sk_X509();
     /* OpenSSL X509 API test */
     test_X509_get_signature_nid();
     /* OpenSSL X509 REQ API test */
     test_X509_REQ();
     /* OpenSSL PKCS7 API test */
     test_wolfssl_PKCS7();
     test_wolfSSL_PKCS7_SIGNED_new();
 #ifndef NO_BIO
     test_wolfSSL_PEM_write_bio_PKCS7();
 #endif
 
     /* wolfCrypt ASN tests */
     test_wc_GetPkcs8TraditionalOffset();
     test_wc_SetSubjectRaw();
     test_wc_GetSubjectRaw();
     test_wc_SetIssuerRaw();
     test_wc_SetIssueBuffer();
     test_wc_SetSubjectKeyId();
     test_wc_SetSubject();
     test_CheckCertSignature();
 
     /* wolfCrypt ECC tests */
     test_wc_ecc_get_curve_size_from_name();
     test_wc_ecc_get_curve_id_from_name();
     test_wc_ecc_get_curve_id_from_params();
 #ifdef WOLFSSL_TLS13
     /* TLS v1.3 API tests */
     test_tls13_apis();
 #endif
 
 #if !defined(NO_CERTS) && (!defined(NO_WOLFSSL_CLIENT) || \
                            !defined(WOLFSSL_NO_CLIENT_AUTH))
     /* Use the Cert Manager(CM) API to generate the error ASN_SIG_CONFIRM_E */
     /* Bad certificate signature tests */
     AssertIntEQ(test_EccSigFailure_cm(), ASN_SIG_CONFIRM_E);
     AssertIntEQ(test_RsaSigFailure_cm(), ASN_SIG_CONFIRM_E);
 #endif /* NO_CERTS */
 
 #ifdef HAVE_PK_CALLBACKS
     /* public key callback tests */
     test_DhCallbacks();
 #endif
 
     /*wolfcrypt */
     printf("\n-----------------wolfcrypt unit tests------------------\n");
     AssertFalse(test_wolfCrypt_Init());
     AssertFalse(test_wc_InitMd5());
     AssertFalse(test_wc_Md5Update());
     AssertFalse(test_wc_Md5Final());
     AssertFalse(test_wc_InitSha());
     AssertFalse(test_wc_ShaUpdate());
     AssertFalse(test_wc_ShaFinal());
     AssertFalse(test_wc_InitSha256());
     AssertFalse(test_wc_Sha256Update());
     AssertFalse(test_wc_Sha256Final());
     AssertFalse(test_wc_Sha256FinalRaw());
     AssertFalse(test_wc_Sha256GetFlags());
     AssertFalse(test_wc_Sha256Free());
     AssertFalse(test_wc_Sha256GetHash());
     AssertFalse(test_wc_Sha256Copy());
     AssertFalse(test_wc_InitSha512());
     AssertFalse(test_wc_Sha512Update());
     AssertFalse(test_wc_Sha512Final());
     AssertFalse(test_wc_Sha512GetFlags());
     AssertFalse(test_wc_Sha512FinalRaw());
     AssertFalse(test_wc_Sha512Free());
     AssertFalse(test_wc_Sha512GetHash());
     AssertFalse(test_wc_Sha512Copy());
     AssertFalse(test_wc_InitSha384());
     AssertFalse(test_wc_Sha384Update());
     AssertFalse(test_wc_Sha384Final());
     AssertFalse(test_wc_Sha384GetFlags());
     AssertFalse(test_wc_Sha384FinalRaw());
     AssertFalse(test_wc_Sha384Free());
     AssertFalse(test_wc_Sha384GetHash());
     AssertFalse(test_wc_Sha384Copy());
     AssertFalse(test_wc_InitSha224());
     AssertFalse(test_wc_Sha224Update());
     AssertFalse(test_wc_Sha224Final());
     AssertFalse(test_wc_Sha224SetFlags());
     AssertFalse(test_wc_Sha224GetFlags());
     AssertFalse(test_wc_Sha224Free());
     AssertFalse(test_wc_Sha224GetHash());
     AssertFalse(test_wc_Sha224Copy());
     AssertFalse(test_wc_InitBlake2b());
     AssertFalse(test_wc_InitBlake2b_WithKey());
     AssertFalse(test_wc_InitBlake2s_WithKey());
     AssertFalse(test_wc_InitRipeMd());
     AssertFalse(test_wc_RipeMdUpdate());
     AssertFalse(test_wc_RipeMdFinal());
 
     AssertIntEQ(test_wc_InitSha3(), 0);
     AssertIntEQ(testing_wc_Sha3_Update(), 0);
     AssertIntEQ(test_wc_Sha3_224_Final(), 0);
     AssertIntEQ(test_wc_Sha3_256_Final(), 0);
     AssertIntEQ(test_wc_Sha3_384_Final(), 0);
     AssertIntEQ(test_wc_Sha3_512_Final(), 0);
     AssertIntEQ(test_wc_Sha3_224_Copy(), 0);
     AssertIntEQ(test_wc_Sha3_256_Copy(), 0);
     AssertIntEQ(test_wc_Sha3_384_Copy(), 0);
     AssertIntEQ(test_wc_Sha3_512_Copy(), 0);
     AssertIntEQ(test_wc_Sha3_GetFlags(), 0);
     AssertIntEQ(test_wc_InitShake256(), 0);
     AssertIntEQ(testing_wc_Shake256_Update(), 0);
     AssertIntEQ(test_wc_Shake256_Final(), 0);
     AssertIntEQ(test_wc_Shake256_Copy(), 0);
     AssertIntEQ(test_wc_Shake256Hash(), 0);
 
     AssertFalse(test_wc_Md5HmacSetKey());
     AssertFalse(test_wc_Md5HmacUpdate());
     AssertFalse(test_wc_Md5HmacFinal());
     AssertFalse(test_wc_ShaHmacSetKey());
     AssertFalse(test_wc_ShaHmacUpdate());
     AssertFalse(test_wc_ShaHmacFinal());
     AssertFalse(test_wc_Sha224HmacSetKey());
     AssertFalse(test_wc_Sha224HmacUpdate());
     AssertFalse(test_wc_Sha224HmacFinal());
     AssertFalse(test_wc_Sha256HmacSetKey());
     AssertFalse(test_wc_Sha256HmacUpdate());
     AssertFalse(test_wc_Sha256HmacFinal());
     AssertFalse(test_wc_Sha384HmacSetKey());
     AssertFalse(test_wc_Sha384HmacUpdate());
     AssertFalse(test_wc_Sha384HmacFinal());
 
     AssertIntEQ(test_wc_HashInit(), 0);
     AssertIntEQ(test_wc_HashSetFlags(), 0);
     AssertIntEQ(test_wc_HashGetFlags(), 0);
 
     AssertIntEQ(test_wc_InitCmac(), 0);
     AssertIntEQ(test_wc_CmacUpdate(), 0);
     AssertIntEQ(test_wc_CmacFinal(), 0);
     AssertIntEQ(test_wc_AesCmacGenerate(), 0);
 
     AssertIntEQ(test_wc_Des3_SetIV(), 0);
     AssertIntEQ(test_wc_Des3_SetKey(), 0);
     AssertIntEQ(test_wc_Des3_CbcEncryptDecrypt(), 0);
     AssertIntEQ(test_wc_Des3_CbcEncryptDecryptWithKey(), 0);
     AssertIntEQ(test_wc_Des3_EcbEncrypt(), 0);
     AssertIntEQ(test_wc_IdeaSetKey(), 0);
     AssertIntEQ(test_wc_IdeaSetIV(), 0);
     AssertIntEQ(test_wc_IdeaCipher(), 0);
     AssertIntEQ(test_wc_IdeaCbcEncyptDecrypt(), 0);
     AssertIntEQ(test_wc_Chacha_SetKey(), 0);
     AssertIntEQ(test_wc_Chacha_Process(), 0);
     AssertIntEQ(test_wc_ChaCha20Poly1305_aead(), 0);
     AssertIntEQ(test_wc_Poly1305SetKey(), 0);
 
     AssertIntEQ(test_wc_CamelliaSetKey(), 0);
     AssertIntEQ(test_wc_CamelliaSetIV(), 0);
     AssertIntEQ(test_wc_CamelliaEncryptDecryptDirect(), 0);
     AssertIntEQ(test_wc_CamelliaCbcEncryptDecrypt(), 0);
 
 
     AssertIntEQ(test_wc_RabbitSetKey(), 0);
     AssertIntEQ(test_wc_RabbitProcess(), 0);
 
     AssertIntEQ(test_wc_Arc4SetKey(), 0);
     AssertIntEQ(test_wc_Arc4Process(), 0);
 
     AssertIntEQ(test_wc_Rc2SetKey(), 0);
     AssertIntEQ(test_wc_Rc2SetIV(), 0);
     AssertIntEQ(test_wc_Rc2EcbEncryptDecrypt(), 0);
     AssertIntEQ(test_wc_Rc2CbcEncryptDecrypt(), 0);
 
     AssertIntEQ(test_wc_AesSetKey(), 0);
     AssertIntEQ(test_wc_AesSetIV(), 0);
     AssertIntEQ(test_wc_AesCbcEncryptDecrypt(), 0);
     AssertIntEQ(test_wc_AesCtrEncryptDecrypt(), 0);
     AssertIntEQ(test_wc_AesGcmSetKey(), 0);
     AssertIntEQ(test_wc_AesGcmEncryptDecrypt(), 0);
     AssertIntEQ(test_wc_GmacSetKey(), 0);
     AssertIntEQ(test_wc_GmacUpdate(), 0);
     AssertIntEQ(test_wc_InitRsaKey(), 0);
     AssertIntEQ(test_wc_RsaPrivateKeyDecode(), 0);
     AssertIntEQ(test_wc_RsaPublicKeyDecode(), 0);
     AssertIntEQ(test_wc_RsaPublicKeyDecodeRaw(), 0);
     AssertIntEQ(test_wc_MakeRsaKey(), 0);
     AssertIntEQ(test_wc_SetKeyUsage (), 0);
 
     AssertIntEQ(test_wc_CheckProbablePrime (), 0);
     AssertIntEQ(test_wc_RsaPSS_Verify (), 0);
     AssertIntEQ(test_wc_RsaPSS_VerifyCheck (), 0);
     AssertIntEQ(test_wc_RsaPSS_VerifyCheckInline (), 0);
 
     AssertIntEQ(test_wc_SetMutexCb(), 0);
     AssertIntEQ(test_wc_LockMutex_ex(), 0);
 
     AssertIntEQ(test_wc_RsaKeyToDer(), 0);
     AssertIntEQ(test_wc_RsaKeyToPublicDer(), 0);
     AssertIntEQ(test_wc_RsaPublicEncryptDecrypt(), 0);
     AssertIntEQ(test_wc_RsaPublicEncryptDecrypt_ex(), 0);
     AssertIntEQ(test_wc_RsaEncryptSize(), 0);
     AssertIntEQ(test_wc_RsaSSL_SignVerify(), 0);
     AssertIntEQ(test_wc_RsaFlattenPublicKey(), 0);
     AssertIntEQ(test_RsaDecryptBoundsCheck(), 0);
     AssertIntEQ(test_wc_AesCcmSetKey(), 0);
     AssertIntEQ(test_wc_AesCcmEncryptDecrypt(), 0);
     AssertIntEQ(test_wc_Hc128_SetKey(), 0);
     AssertIntEQ(test_wc_Hc128_Process(), 0);
     AssertIntEQ(test_wc_InitDsaKey(), 0);
     AssertIntEQ(test_wc_DsaSignVerify(), 0);
     AssertIntEQ(test_wc_DsaPublicPrivateKeyDecode(), 0);
     AssertIntEQ(test_wc_MakeDsaKey(), 0);
     AssertIntEQ(test_wc_DsaKeyToDer(), 0);
     AssertIntEQ(test_wc_DsaKeyToPublicDer(), 0);
     AssertIntEQ(test_wc_DsaImportParamsRaw(), 0);
     AssertIntEQ(test_wc_DsaImportParamsRawCheck(), 0);
     AssertIntEQ(test_wc_DsaExportParamsRaw(), 0);
     AssertIntEQ(test_wc_DsaExportKeyRaw(), 0);
     AssertIntEQ(test_wc_SignatureGetSize_ecc(), 0);
     AssertIntEQ(test_wc_SignatureGetSize_rsa(), 0);
     wolfCrypt_Cleanup();
 
 #ifdef OPENSSL_EXTRA
     /*wolfSSL_EVP_get_cipherbynid test*/
     test_wolfSSL_EVP_get_cipherbynid();
     test_wolfSSL_EVP_CIPHER_CTX();
 #if !defined(HAVE_FIPS) || (defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION>2))
     test_wolfSSL_EC();
 #endif
     test_wolfSSL_ECDSA_SIG();
     test_ECDSA_size_sign();
     test_ED25519();
     test_ED448();
     test_EC_i2d();
 #endif
 #if defined(OPENSSL_EXTRA) && defined(HAVE_ECC) && \
     !defined(HAVE_SELFTEST) && \
     !(defined(HAVE_FIPS) || defined(HAVE_FIPS_VERSION))
     test_wc_ecc_get_curve_id_from_dp_params();
 #endif
 
 #ifdef HAVE_HASHDRBG
     #ifdef TEST_RESEED_INTERVAL
     AssertIntEQ(test_wc_RNG_GenerateBlock_Reseed(), 0);
     #endif
     AssertIntEQ(test_wc_RNG_GenerateBlock(), 0);
 
 #endif
     AssertIntEQ(test_get_rand_digit(), 0);
     AssertIntEQ(test_get_digit_count(), 0);
     AssertIntEQ(test_mp_cond_copy(), 0);
     AssertIntEQ(test_mp_rand(), 0);
     AssertIntEQ(test_get_digit(), 0);
     AssertIntEQ(test_wc_export_int(), 0);
     AssertIntEQ(test_wc_InitRngNonce(), 0);
     AssertIntEQ(test_wc_InitRngNonce_ex(), 0);
     AssertIntEQ(test_wc_ed25519_make_key(), 0);
     AssertIntEQ(test_wc_ed25519_init(), 0);
     AssertIntEQ(test_wc_ed25519_sign_msg(), 0);
     AssertIntEQ(test_wc_ed25519_import_public(), 0);
     AssertIntEQ(test_wc_ed25519_import_private_key(), 0);
     AssertIntEQ(test_wc_ed25519_export(), 0);
     AssertIntEQ(test_wc_ed25519_size(), 0);
     AssertIntEQ(test_wc_ed25519_exportKey(), 0);
     AssertIntEQ(test_wc_Ed25519PublicKeyToDer(), 0);
     AssertIntEQ(test_wc_curve25519_init(), 0);
     AssertIntEQ(test_wc_curve25519_size(), 0);
     AssertIntEQ(test_wc_curve25519_export_key_raw(), 0);
     AssertIntEQ(test_wc_curve25519_export_key_raw_ex(), 0);
     AssertIntEQ(test_wc_curve25519_size (), 0);
     AssertIntEQ(test_wc_curve25519_make_key (), 0);
     AssertIntEQ(test_wc_curve25519_shared_secret_ex (), 0);
     AssertIntEQ(test_wc_curve25519_make_pub (), 0);
     AssertIntEQ(test_wc_curve25519_export_public_ex (), 0);
     AssertIntEQ(test_wc_curve25519_export_private_raw_ex (), 0);
     AssertIntEQ(test_wc_curve25519_import_private_raw_ex (), 0);
     AssertIntEQ(test_wc_curve25519_import_private (), 0);
     AssertIntEQ(test_wc_ed448_make_key(), 0);
     AssertIntEQ(test_wc_ed448_init(), 0);
     AssertIntEQ(test_wc_ed448_sign_msg(), 0);
     AssertIntEQ(test_wc_ed448_import_public(), 0);
     AssertIntEQ(test_wc_ed448_import_private_key(), 0);
     AssertIntEQ(test_wc_ed448_export(), 0);
     AssertIntEQ(test_wc_ed448_size(), 0);
     AssertIntEQ(test_wc_ed448_exportKey(), 0);
     AssertIntEQ(test_wc_Ed448PublicKeyToDer(), 0);
     AssertIntEQ(test_wc_curve448_make_key (), 0);
     AssertIntEQ(test_wc_curve448_shared_secret_ex (), 0);
     AssertIntEQ(test_wc_curve448_export_public_ex (), 0);
     AssertIntEQ(test_wc_curve448_export_private_raw_ex (), 0);
     AssertIntEQ(test_wc_curve448_export_key_raw (), 0);
     AssertIntEQ(test_wc_curve448_import_private_raw_ex (), 0);
     AssertIntEQ(test_wc_curve448_import_private (), 0);
     AssertIntEQ(test_wc_curve448_init(), 0);
     AssertIntEQ(test_wc_curve448_size (), 0);
     AssertIntEQ(test_wc_ecc_make_key(), 0);
     AssertIntEQ(test_wc_ecc_init(), 0);
     AssertIntEQ(test_wc_ecc_check_key(), 0);
     AssertIntEQ(test_wc_ecc_get_generator(), 0);
     AssertIntEQ(test_wc_ecc_size(), 0);
     test_wc_ecc_params();
     AssertIntEQ(test_wc_ecc_signVerify_hash(), 0);
     AssertIntEQ(test_wc_ecc_shared_secret(), 0);
     AssertIntEQ(test_wc_ecc_export_x963(), 0);
     AssertIntEQ(test_wc_ecc_export_x963_ex(), 0);
     AssertIntEQ(test_wc_ecc_import_x963(), 0);
     AssertIntEQ(ecc_import_private_key(), 0);
     AssertIntEQ(test_wc_ecc_export_private_only(), 0);
     AssertIntEQ(test_wc_ecc_rs_to_sig(), 0);
     AssertIntEQ(test_wc_ecc_import_raw(), 0);
     AssertIntEQ(test_wc_ecc_import_unsigned(), 0);
     AssertIntEQ(test_wc_ecc_sig_size(), 0);
     AssertIntEQ(test_wc_ecc_ctx_new(), 0);
     AssertIntEQ(test_wc_ecc_ctx_reset(), 0);
     AssertIntEQ(test_wc_ecc_ctx_set_peer_salt(), 0);
     AssertIntEQ(test_wc_ecc_ctx_set_info(), 0);
     AssertIntEQ(test_wc_ecc_encryptDecrypt(), 0);
     AssertIntEQ(test_wc_ecc_del_point(), 0);
     AssertIntEQ(test_wc_ecc_pointFns(), 0);
     AssertIntEQ(test_wc_ecc_shared_secret_ssh(), 0);
     AssertIntEQ(test_wc_ecc_verify_hash_ex(), 0);
     AssertIntEQ(test_wc_ecc_mulmod(), 0);
     AssertIntEQ(test_wc_ecc_is_valid_idx(), 0);
     AssertIntEQ(test_wc_ecc_get_curve_id_from_oid(), 0);
     AssertIntEQ(test_wc_ecc_sig_size_calc(), 0);
 
 
     AssertIntEQ(test_ToTraditional(), 0);
     AssertIntEQ(test_wc_EccPrivateKeyToDer(), 0);
     AssertIntEQ(test_wc_Ed25519KeyToDer(), 0);
     AssertIntEQ(test_wc_Ed25519PrivateKeyToDer(), 0);
     AssertIntEQ(test_wc_Ed448KeyToDer(), 0);
     AssertIntEQ(test_wc_Ed448PrivateKeyToDer(), 0);
     AssertIntEQ(test_wc_SetAuthKeyIdFromPublicKey_ex(), 0);
     AssertIntEQ(test_wc_SetSubjectBuffer(), 0);
     AssertIntEQ(test_wc_SetSubjectKeyIdFromPublicKey_ex(), 0);
 
     test_wc_PKCS7_New();
     test_wc_PKCS7_Init();
     test_wc_PKCS7_InitWithCert();
     test_wc_PKCS7_EncodeData();
     test_wc_PKCS7_EncodeSignedData();
     test_wc_PKCS7_EncodeSignedData_ex();
     test_wc_PKCS7_VerifySignedData();
     test_wc_PKCS7_EncodeDecodeEnvelopedData();
     test_wc_PKCS7_EncodeEncryptedData();
     test_wc_PKCS7_Degenerate();
     test_wc_PKCS7_BER();
     test_PKCS7_signed_enveloped();
     test_wc_PKCS7_NoDefaultSignedAttribs();
     test_wc_PKCS7_SetOriEncryptCtx();
     test_wc_PKCS7_SetOriDecryptCtx();
     test_wc_PKCS7_DecodeCompressedData();
 
 
     test_wc_i2d_PKCS12();
 
     test_wolfSSL_CTX_LoadCRL();
 
     AssertIntEQ(test_ForceZero(), 0);
 
     AssertIntEQ(test_wolfSSL_Cleanup(), WOLFSSL_SUCCESS);
 
 #if !defined(NO_RSA) && !defined(NO_SHA) && !defined(NO_FILESYSTEM) && \
     !defined(NO_CERTS) && (!defined(NO_WOLFSSL_CLIENT) || \
                            !defined(WOLFSSL_NO_CLIENT_AUTH))
     AssertIntEQ(test_various_pathlen_chains(), WOLFSSL_SUCCESS);
 #endif
 
     /* If at some point a stub get implemented this test should fail indicating
      * a need to implement a new test case
      */
     test_stubs_are_stubs();
 #if defined(HAVE_ECC) && defined(FP_ECC) && defined(HAVE_THREAD_LS) \
                       && (defined(NO_MAIN_DRIVER) || defined(HAVE_STACK_SIZE))
     wc_ecc_fp_free();  /* free per thread cache */
 #endif
     wolfSSL_Cleanup();
 
     (void)devId;
 
     printf(" End API Tests\n");
 
 }
diff --git a/wolfcrypt/src/evp.c b/wolfcrypt/src/evp.c
index 01844cc7e..f93fe03af 100644
--- a/wolfcrypt/src/evp.c
+++ b/wolfcrypt/src/evp.c
@@ -1005,187 +1005,212 @@ int wolfSSL_EVP_CIPHER_CTX_block_size(const WOLFSSL_EVP_CIPHER_CTX *ctx)
 static unsigned int cipherType(const WOLFSSL_EVP_CIPHER *cipher)
 {
     if (cipher == NULL) return 0; /* dummy for #ifdef */
 #ifndef NO_DES3
     else if (XSTRNCMP(cipher, EVP_DES_CBC, EVP_DES_SIZE) == 0)
         return DES_CBC_TYPE;
     else if (XSTRNCMP(cipher, EVP_DES_EDE3_CBC, EVP_DES_EDE3_SIZE) == 0)
         return DES_EDE3_CBC_TYPE;
 #if !defined(NO_DES3)
     else if (XSTRNCMP(cipher, EVP_DES_ECB, EVP_DES_SIZE) == 0)
         return DES_ECB_TYPE;
     else if (XSTRNCMP(cipher, EVP_DES_EDE3_ECB, EVP_DES_EDE3_SIZE) == 0)
         return DES_EDE3_ECB_TYPE;
 #endif /* NO_DES3 && HAVE_AES_ECB */
 #endif
 #if !defined(NO_AES)
 #if defined(HAVE_AES_CBC)
     #ifdef WOLFSSL_AES_128
     else if (XSTRNCMP(cipher, EVP_AES_128_CBC, EVP_AES_SIZE) == 0)
         return AES_128_CBC_TYPE;
     #endif
     #ifdef WOLFSSL_AES_192
     else if (XSTRNCMP(cipher, EVP_AES_192_CBC, EVP_AES_SIZE) == 0)
         return AES_192_CBC_TYPE;
     #endif
     #ifdef WOLFSSL_AES_256
     else if (XSTRNCMP(cipher, EVP_AES_256_CBC, EVP_AES_SIZE) == 0)
         return AES_256_CBC_TYPE;
     #endif
 #endif /* HAVE_AES_CBC */
 #if defined(HAVE_AESGCM)
     #ifdef WOLFSSL_AES_128
     else if (XSTRNCMP(cipher, EVP_AES_128_GCM, EVP_AES_SIZE) == 0)
         return AES_128_GCM_TYPE;
     #endif
     #ifdef WOLFSSL_AES_192
     else if (XSTRNCMP(cipher, EVP_AES_192_GCM, EVP_AES_SIZE) == 0)
         return AES_192_GCM_TYPE;
     #endif
     #ifdef WOLFSSL_AES_256
     else if (XSTRNCMP(cipher, EVP_AES_256_GCM, EVP_AES_SIZE) == 0)
         return AES_256_GCM_TYPE;
     #endif
 #endif /* HAVE_AESGCM */
 #if defined(WOLFSSL_AES_COUNTER)
     #ifdef WOLFSSL_AES_128
     else if (XSTRNCMP(cipher, EVP_AES_128_CTR, EVP_AES_SIZE) == 0)
         return AES_128_CTR_TYPE;
     #endif
     #ifdef WOLFSSL_AES_192
     else if (XSTRNCMP(cipher, EVP_AES_192_CTR, EVP_AES_SIZE) == 0)
         return AES_192_CTR_TYPE;
     #endif
     #ifdef WOLFSSL_AES_256
     else if (XSTRNCMP(cipher, EVP_AES_256_CTR, EVP_AES_SIZE) == 0)
         return AES_256_CTR_TYPE;
     #endif
 #endif /* HAVE_AES_CBC */
 #if defined(HAVE_AES_ECB)
     #ifdef WOLFSSL_AES_128
     else if (XSTRNCMP(cipher, EVP_AES_128_ECB, EVP_AES_SIZE) == 0)
         return AES_128_ECB_TYPE;
     #endif
     #ifdef WOLFSSL_AES_192
     else if (XSTRNCMP(cipher, EVP_AES_192_ECB, EVP_AES_SIZE) == 0)
         return AES_192_ECB_TYPE;
     #endif
     #ifdef WOLFSSL_AES_256
     else if (XSTRNCMP(cipher, EVP_AES_256_ECB, EVP_AES_SIZE) == 0)
         return AES_256_ECB_TYPE;
     #endif
 #endif /*HAVE_AES_CBC */
 #if defined(WOLFSSL_AES_XTS)
     #ifdef WOLFSSL_AES_128
     else if (XSTRNCMP(cipher, EVP_AES_128_XTS, EVP_AES_SIZE) == 0)
         return AES_128_XTS_TYPE;
     #endif
     #ifdef WOLFSSL_AES_256
     else if (XSTRNCMP(cipher, EVP_AES_256_XTS, EVP_AES_SIZE) == 0)
         return AES_256_XTS_TYPE;
     #endif
 #endif /* WOLFSSL_AES_XTS */
 #if defined(WOLFSSL_AES_CFB)
     #ifdef WOLFSSL_AES_128
     else if (XSTRNCMP(cipher, EVP_AES_128_CFB1, EVP_AESCFB_SIZE) == 0)
         return AES_128_CFB1_TYPE;
     #endif
     #ifdef WOLFSSL_AES_192
     else if (XSTRNCMP(cipher, EVP_AES_192_CFB1, EVP_AESCFB_SIZE) == 0)
         return AES_192_CFB1_TYPE;
     #endif
     #ifdef WOLFSSL_AES_256
     else if (XSTRNCMP(cipher, EVP_AES_256_CFB1, EVP_AESCFB_SIZE) == 0)
         return AES_256_CFB1_TYPE;
     #endif
     #ifdef WOLFSSL_AES_128
     else if (XSTRNCMP(cipher, EVP_AES_128_CFB8, EVP_AESCFB_SIZE) == 0)
         return AES_128_CFB8_TYPE;
     #endif
     #ifdef WOLFSSL_AES_192
     else if (XSTRNCMP(cipher, EVP_AES_192_CFB8, EVP_AESCFB_SIZE) == 0)
         return AES_192_CFB8_TYPE;
     #endif
     #ifdef WOLFSSL_AES_256
     else if (XSTRNCMP(cipher, EVP_AES_256_CFB8, EVP_AESCFB_SIZE) == 0)
         return AES_256_CFB8_TYPE;
     #endif
     #ifdef WOLFSSL_AES_128
     else if (XSTRNCMP(cipher, EVP_AES_128_CFB128, EVP_AESCFB_SIZE) == 0)
         return AES_128_CFB128_TYPE;
     #endif
     #ifdef WOLFSSL_AES_192
     else if (XSTRNCMP(cipher, EVP_AES_192_CFB128, EVP_AESCFB_SIZE) == 0)
         return AES_192_CFB128_TYPE;
     #endif
     #ifdef WOLFSSL_AES_256
     else if (XSTRNCMP(cipher, EVP_AES_256_CFB128, EVP_AESCFB_SIZE) == 0)
         return AES_256_CFB128_TYPE;
     #endif
 #endif /*HAVE_AES_CBC */
+#if defined(WOLFSSL_AES_OFB)
+    #ifdef WOLFSSL_AES_128
+    else if (XSTRNCMP(cipher, EVP_AES_128_OFB, EVP_AES_SIZE) == 0)
+      return AES_128_OFB_TYPE;
+    #endif
+    #ifdef WOLFSSL_AES_192
+    else if (XSTRNCMP(cipher, EVP_AES_192_OFB, EVP_AES_SIZE) == 0)
+      return AES_192_OFB_TYPE;
+    #endif
+    #ifdef WOLFSSL_AES_256
+    else if (XSTRNCMP(cipher, EVP_AES_256_OFB, EVP_AES_SIZE) == 0)
+      return AES_256_OFB_TYPE;
+    #endif
+#endif
 #endif /* !NO_AES */
+
+#ifndef NO_RC4
+    else if (XSTRNCMP(cipher, EVP_ARC4, EVP_ARC4_SIZE) == 0)
+      return ARC4_TYPE;
+#endif
       else return 0;
 }
 
 int wolfSSL_EVP_CIPHER_block_size(const WOLFSSL_EVP_CIPHER *cipher)
 {
   if (cipher == NULL) return BAD_FUNC_ARG;
   switch (cipherType(cipher)) {
 #if !defined(NO_AES)
   #if defined(HAVE_AES_CBC)
       case AES_128_CBC_TYPE:
       case AES_192_CBC_TYPE:
       case AES_256_CBC_TYPE:
           return AES_BLOCK_SIZE;
   #endif
   #if defined(HAVE_AESGCM)
       case AES_128_GCM_TYPE:
       case AES_192_GCM_TYPE:
       case AES_256_GCM_TYPE:
           return 1;
   #endif
   #if defined(WOLFSSL_AES_COUNTER)
       case AES_128_CTR_TYPE:
       case AES_192_CTR_TYPE:
       case AES_256_CTR_TYPE:
-          return AES_BLOCK_SIZE;
+          return 1;
   #endif
   #if defined(HAVE_AES_ECB)
       case AES_128_ECB_TYPE:
       case AES_192_ECB_TYPE:
       case AES_256_ECB_TYPE:
           return AES_BLOCK_SIZE;
   #endif
   #if defined(WOLFSSL_AES_CFB)
       case AES_128_CFB1_TYPE:
       case AES_192_CFB1_TYPE:
       case AES_256_CFB1_TYPE:
       case AES_128_CFB8_TYPE:
       case AES_192_CFB8_TYPE:
       case AES_256_CFB8_TYPE:
       case AES_128_CFB128_TYPE:
       case AES_192_CFB128_TYPE:
       case AES_256_CFB128_TYPE:
           return 1;
   #endif
   #if defined(WOLFSSL_AES_OFB)
       case AES_128_OFB_TYPE:
       case AES_192_OFB_TYPE:
       case AES_256_OFB_TYPE:
           return 1;
   #endif
   #if defined(WOLFSSL_AES_XTS)
       case AES_128_XTS_TYPE:
       case AES_256_XTS_TYPE:
           return 1;
   #endif
 #endif /* NO_AES */
-  #ifndef NO_DES3
+
+#ifndef NO_RC4
+      case ARC4_TYPE:
+          return 1;
+#endif
+
+#ifndef NO_DES3
       case DES_CBC_TYPE: return 8;
       case DES_EDE3_CBC_TYPE: return 8;
       case DES_ECB_TYPE: return 8;
       case DES_EDE3_ECB_TYPE: return 8;
-  #endif
+#endif
       default:
           return 0;
       }
 }
