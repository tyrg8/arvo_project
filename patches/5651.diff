commit 3d5a6b5f25b0e1c0bf23106f55e736b1bf0d9be8
Author: Mike Reed <reed@google.com>
Date:   Wed Jan 31 15:55:47 2018 -0500

    add saturate helper for float2int64
    
    Bug: skia:
    Change-Id: I157f8c047145874c4585ae870018163908389b26
    Reviewed-on: https://skia-review.googlesource.com/102321
    Reviewed-by: Mike Klein <mtklein@google.com>
    Reviewed-by: Florin Malita <fmalita@chromium.org>

diff --git a/include/core/SkTypes.h b/include/core/SkTypes.h
index 50efbaea0e..afab728666 100644
--- a/include/core/SkTypes.h
+++ b/include/core/SkTypes.h
@@ -186,32 +186,34 @@ typedef uint8_t SkBool8;
 #include "../private/SkTFitsIn.h"
 template <typename D, typename S> constexpr D SkTo(S s) {
     return SkASSERT(SkTFitsIn<D>(s)),
            static_cast<D>(s);
 }
 #define SkToS8(x)    SkTo<int8_t>(x)
 #define SkToU8(x)    SkTo<uint8_t>(x)
 #define SkToS16(x)   SkTo<int16_t>(x)
 #define SkToU16(x)   SkTo<uint16_t>(x)
 #define SkToS32(x)   SkTo<int32_t>(x)
 #define SkToU32(x)   SkTo<uint32_t>(x)
 #define SkToInt(x)   SkTo<int>(x)
 #define SkToUInt(x)  SkTo<unsigned>(x)
 #define SkToSizeT(x) SkTo<size_t>(x)
 
 /** Returns 0 or 1 based on the condition
 */
 #define SkToBool(cond)  ((cond) != 0)
 
 #define SK_MaxS16   32767
 #define SK_MinS16   -32767
 #define SK_MaxU16   0xFFFF
 #define SK_MinU16   0
 #define SK_MaxS32   0x7FFFFFFF
 #define SK_MinS32   -SK_MaxS32
 #define SK_MaxU32   0xFFFFFFFF
 #define SK_MinU32   0
 #define SK_NaN32    ((int) (1U << 31))
 #define SK_MaxSizeT SIZE_MAX
+static constexpr int64_t SK_MaxS64 = 0x7FFFFFFFFFFFFFFF;
+static constexpr int64_t SK_MinS64 = -SK_MaxS64;
 
 static inline int32_t SkLeftShift(int32_t value, int32_t shift) {
     return (int32_t) ((uint32_t) value << shift);
diff --git a/include/private/SkFixed.h b/include/private/SkFixed.h
index 05e1de49c9..75514d8f1e 100644
--- a/include/private/SkFixed.h
+++ b/include/private/SkFixed.h
@@ -124,16 +124,16 @@ static inline SkFixed SkFixedMul(SkFixed a, SkFixed b) {
 
 typedef int64_t SkFixed3232;   // 32.32
 
-#define SkFixed3232Max            (0x7FFFFFFFFFFFFFFFLL)
+#define SkFixed3232Max            SK_MaxS64
 #define SkFixed3232Min            (-SkFixed3232Max)
 
 #define SkIntToFixed3232(x)       (SkLeftShift((SkFixed3232)(x), 32))
 #define SkFixed3232ToInt(x)       ((int)((x) >> 32))
 #define SkFixedToFixed3232(x)     (SkLeftShift((SkFixed3232)(x), 16))
 #define SkFixed3232ToFixed(x)     ((SkFixed)((x) >> 16))
-#define SkFloatToFixed3232(x)     ((SkFixed3232)((x) * (65536.0f * 65536.0f)))
+#define SkFloatToFixed3232(x)     sk_float_saturate2int64((x) * (65536.0f * 65536.0f))
 #define SkFixed3232ToFloat(x)     (x * (1 / (65536.0f * 65536.0f)))
 
 #define SkScalarToFixed3232(x)    SkFloatToFixed3232(x)
 
 #endif
diff --git a/include/private/SkFloatingPoint.h b/include/private/SkFloatingPoint.h
index 05191e651d..bbb117982f 100644
--- a/include/private/SkFloatingPoint.h
+++ b/include/private/SkFloatingPoint.h
@@ -27,60 +27,63 @@
 // C++98 cmath std::pow seems to be the earliest portable way to get float pow.
 // However, on Linux including cmath undefines isfinite.
 // http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14608
 static inline float sk_float_pow(float base, float exp) {
     return powf(base, exp);
 }
 
 #define sk_float_sqrt(x)        sqrtf(x)
 #define sk_float_sin(x)         sinf(x)
 #define sk_float_cos(x)         cosf(x)
 #define sk_float_tan(x)         tanf(x)
 #define sk_float_floor(x)       floorf(x)
 #define sk_float_ceil(x)        ceilf(x)
 #define sk_float_trunc(x)       truncf(x)
 #ifdef SK_BUILD_FOR_MAC
 #    define sk_float_acos(x)    static_cast<float>(acos(x))
 #    define sk_float_asin(x)    static_cast<float>(asin(x))
 #else
 #    define sk_float_acos(x)    acosf(x)
 #    define sk_float_asin(x)    asinf(x)
 #endif
 #define sk_float_atan2(y,x)     atan2f(y,x)
 #define sk_float_abs(x)         fabsf(x)
 #define sk_float_copysign(x, y) copysignf(x, y)
 #define sk_float_mod(x,y)       fmodf(x,y)
 #define sk_float_exp(x)         expf(x)
 #define sk_float_log(x)         logf(x)
 
 #define sk_float_round(x) sk_float_floor((x) + 0.5f)
 
 // can't find log2f on android, but maybe that just a tool bug?
 #ifdef SK_BUILD_FOR_ANDROID
     static inline float sk_float_log2(float x) {
         const double inv_ln_2 = 1.44269504088896;
         return (float)(log(x) * inv_ln_2);
     }
 #else
     #define sk_float_log2(x)        log2f(x)
 #endif
 
 #ifdef SK_BUILD_FOR_WIN
     #define sk_float_isfinite(x)    _finite(x)
     #define sk_float_isnan(x)       _isnan(x)
     static inline int sk_float_isinf(float x) {
         return x && (x + x == x);
     }
 #else
     #define sk_float_isfinite(x)    isfinite(x)
     #define sk_float_isnan(x)       isnan(x)
     #define sk_float_isinf(x)       isinf(x)
 #endif
 
 #define sk_double_isnan(a)          sk_float_isnan(a)
 
 #define SK_MaxS32FitsInFloat    2147483520
 #define SK_MinS32FitsInFloat    -SK_MaxS32FitsInFloat
 
+#define SK_MaxS64FitsInFloat    (SK_MaxS64 >> (63-24) << (63-24))   // 0x7fffff8000000000
+#define SK_MinS64FitsInFloat    -SK_MaxS64FitsInFloat
+
 /**
  *  Return the closest int for the given float. Returns SK_MaxS32FitsInFloat for NaN.
  */
@@ -93,28 +96,37 @@ static inline int sk_float_saturate2int(float x) {
 /**
  *  Return the closest int for the given double. Returns SK_MaxS32 for NaN.
  */
 static inline int sk_double_saturate2int(double x) {
     x = SkTMin<double>(x, SK_MaxS32);
     x = SkTMax<double>(x, SK_MinS32);
     return (int)x;
 }
 
+/**
+ *  Return the closest int64_t for the given float. Returns SK_MaxS64FitsInFloat for NaN.
+ */
+static inline int64_t sk_float_saturate2int64(float x) {
+    x = SkTMin<float>(x, SK_MaxS64FitsInFloat);
+    x = SkTMax<float>(x, SK_MinS64FitsInFloat);
+    return (int64_t)x;
+}
+
 #define sk_float_floor2int(x)   sk_float_saturate2int(sk_float_floor(x))
 #define sk_float_round2int(x)   sk_float_saturate2int(sk_float_floor((x) + 0.5f))
 #define sk_float_ceil2int(x)    sk_float_saturate2int(sk_float_ceil(x))
 
 #define sk_float_floor2int_no_saturate(x)   (int)sk_float_floor(x)
 #define sk_float_round2int_no_saturate(x)   (int)sk_float_floor((x) + 0.5f)
 #define sk_float_ceil2int_no_saturate(x)    (int)sk_float_ceil(x)
 
 #define sk_double_floor(x)          floor(x)
 #define sk_double_round(x)          floor((x) + 0.5)
 #define sk_double_ceil(x)           ceil(x)
 #define sk_double_floor2int(x)      (int)floor(x)
 #define sk_double_round2int(x)      (int)floor((x) + 0.5f)
 #define sk_double_ceil2int(x)       (int)ceil(x)
 
 // Cast double to float, ignoring any warning about too-large finite values being cast to float.
 // Clang thinks this is undefined, but it's actually implementation defined to return either
 // the largest float or infinity (one of the two bracketing representable floats).  Good enough!
 #if defined(__clang__) && (__clang_major__ * 1000 + __clang_minor__) >= 3007
diff --git a/tests/MathTest.cpp b/tests/MathTest.cpp
index 0d0bdce67d..31bb45308c 100644
--- a/tests/MathTest.cpp
+++ b/tests/MathTest.cpp
@@ -672,48 +672,70 @@ DEF_TEST(GrNextSizePow2, reporter) {
     test_nextsizepow2(reporter, SIZE_MAX, SIZE_MAX);
 }
 
-DEF_TEST(FloatSaturate, reporter) {
+DEF_TEST(FloatSaturate32, reporter) {
     const struct {
         float   fFloat;
         int     fExpectedInt;
     } recs[] = {
         { 0, 0 },
         { 100.5f, 100 },
         { (float)SK_MaxS32, SK_MaxS32FitsInFloat },
         { (float)SK_MinS32, SK_MinS32FitsInFloat },
         { SK_MaxS32 * 100.0f, SK_MaxS32FitsInFloat },
         { SK_MinS32 * 100.0f, SK_MinS32FitsInFloat },
         { SK_ScalarInfinity, SK_MaxS32FitsInFloat },
         { SK_ScalarNegativeInfinity, SK_MinS32FitsInFloat },
         { SK_ScalarNaN, SK_MaxS32FitsInFloat },
     };
 
     for (auto r : recs) {
         int i = sk_float_saturate2int(r.fFloat);
         REPORTER_ASSERT(reporter, r.fExpectedInt == i);
     }
 }
 
-DEF_TEST(DoubleSaturate, reporter) {
+DEF_TEST(FloatSaturate64, reporter) {
+    const struct {
+        float   fFloat;
+        int64_t fExpected64;
+    } recs[] = {
+        { 0, 0 },
+        { 100.5f, 100 },
+        { (float)SK_MaxS64, SK_MaxS64FitsInFloat },
+        { (float)SK_MinS64, SK_MinS64FitsInFloat },
+        { SK_MaxS64 * 100.0f, SK_MaxS64FitsInFloat },
+        { SK_MinS64 * 100.0f, SK_MinS64FitsInFloat },
+        { SK_ScalarInfinity, SK_MaxS64FitsInFloat },
+        { SK_ScalarNegativeInfinity, SK_MinS64FitsInFloat },
+        { SK_ScalarNaN, SK_MaxS64FitsInFloat },
+    };
+
+    for (auto r : recs) {
+        int64_t i = sk_float_saturate2int64(r.fFloat);
+        REPORTER_ASSERT(reporter, r.fExpected64 == i);
+    }
+}
+
+DEF_TEST(DoubleSaturate32, reporter) {
     const struct {
         double  fDouble;
         int     fExpectedInt;
     } recs[] = {
         { 0, 0 },
         { 100.5, 100 },
         { SK_MaxS32, SK_MaxS32 },
         { SK_MinS32, SK_MinS32 },
         { SK_MaxS32 - 1, SK_MaxS32 - 1 },
         { SK_MinS32 + 1, SK_MinS32 + 1 },
         { SK_MaxS32 * 100.0, SK_MaxS32 },
         { SK_MinS32 * 100.0, SK_MinS32 },
         { SK_ScalarInfinity, SK_MaxS32 },
         { SK_ScalarNegativeInfinity, SK_MinS32 },
         { SK_ScalarNaN, SK_MaxS32 },
     };
 
     for (auto r : recs) {
         int i = sk_double_saturate2int(r.fDouble);
         REPORTER_ASSERT(reporter, r.fExpectedInt == i);
     }
 }
