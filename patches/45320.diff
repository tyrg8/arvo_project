commit 9540f5183c8aa358264afcc9b72c2f2e00e8260a
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Mon Mar 7 15:44:40 2022 +0000

    OSS-fuzz 45320 - illegal colour in CharProc before d0/d1
    
    The file has a (fuzzed) CharProc which does an 'RG' operation before
    executing either d0 or d1, which is illegal according to the spec.
    
    In addition, because of the gstate hackery we are required to do to deal
    with the possibility of setcachedevice potentially pushing a new device
    and the 'helpfulness' of setcachedevice, this messes up the reference
    counting of the colour space, because it decrements the stroke colour
    space reference. See the comments in pdfi_d0 in pdf_font.c.
    
    To deal with this, we extend the existing code to check (and ignore, as
    per the spec) any colour space changes in the course of a CharProc
    which executes a d1. The 'd1' flag has changed into an enumerated type
    and we now start a CharProc by setting the flag to 'none' to indicate
    that we haven't encountered any d0 or d1. If we get any colour space
    or colour changes before we get a d0 or d1, then we ignore them. If we
    get a colour or space change, and we are in a d1, we also ignore them.
    
    This resolves the problem, though it is possible there are other kinds
    of graphics state changes we need to guard similarly.

diff --git a/pdf/ghostpdf.h b/pdf/ghostpdf.h
index c20fd23af..49c918084 100644
--- a/pdf/ghostpdf.h
+++ b/pdf/ghostpdf.h
@@ -69,14 +69,19 @@ typedef enum pdf_warning_e {
 typedef enum pdf_crypt_filter_e {
     CRYPT_NONE,     /* Not an encrypted file */
     CRYPT_IDENTITY, /* Encrypted file, but no encryption on this object type */
     CRYPT_V1,     /* 40-bit RC4 */
     CRYPT_V2,     /* 128-bit RC4 */
     CRYPT_AESV2,  /* 128-bit AES */
     CRYPT_AESV3,  /* 256-bit AES */
 } pdf_crypt_filter;
 
+typedef enum pdf_type3_d_type_e {
+    pdf_type3_d_none,
+    pdf_type3_d0,
+    pdf_type3_d1
+} pdf_type3_d_type;
 
 #define INITIAL_STACK_SIZE 32
 #define MAX_STACK_SIZE 524288
 #define MAX_OBJECT_CACHE_SIZE 200
 #define INITIAL_LOOP_TRACKER_SIZE 32
@@ -213,29 +218,35 @@ typedef struct page_state_s {
 typedef struct text_state_s {
     /* we need the text enumerator in order to call gs_text_setcharwidth() for d0 and d1 */
     gs_text_enum_t *current_enum;
     /* Detect if we are inside a text block at any time. Nested text blocks are illegal and certain
      * marking operations are illegal inside text blocks. We also manipulate this when rendering
      * type 3 BuildChar procedures, as those marking operations are legal in a BuildChar, even
      * when we are in a text block.
      */
     int BlockDepth;
     /* This is to determine if we get Type 3 Charproc operators (d0 and d1) outside
      * a Type 3 BuildChar.
      */
     bool inside_CharProc;
     /* We need to know if we're in a type 3 CharProc which has executed a 'd1' operator.
      * Colour operators are technically invalid if we are in a 'd1' context and we must
      * ignore them.
+     * OSS-fuzz #45320 has a type 3 font with a BuildChar which has a 'RG' before the
+     * d1. This is (obviously) illegal because the spec says the first operation must
+     * be either a d0 or d1, in addition because of the graphics state depth hackery
+     * (see comments in pdf_d0() in pdf_font.c) this messes up the reference counting
+     * of the colour spaces, leading to a crash. So what was a boolean flag is now an
+     * enumerated type; pdf_type3_d_none, pdf_type3_d0 or pdf_type3_d1.
      */
-    bool CharProc_is_d1;
+    pdf_type3_d_type CharProc_d_type;
     /* If there is no current point when we do a BT we start by doing a 0 0 moveto in order
      * to establish an initial point. However, this also starts a path. When we finish
      * off with a BT we need to clear that path by doing a newpath, otherwise we might
      * end up drawing it. See /tests_private/comparefiles/Bug692867.pdf
      * We store the initial current poitn validity and if t was not initially valid
      * (ie no path) then we do a newpath on a ET.
      * BT/ET are not supposed to be nested, and path construction is not permitted inside
      * a BT/ET block.
      */
     bool initial_current_point_valid;
 } text_state_t;
diff --git a/pdf/pdf_colour.c b/pdf/pdf_colour.c
index 94c7af214..a3fe8049c 100644
--- a/pdf/pdf_colour.c
+++ b/pdf/pdf_colour.c
@@ -339,25 +339,25 @@ static void pdfi_cspace_free_callback(gs_memory_t * mem, void *cs)
 int pdfi_gs_setgray(pdf_context *ctx, double d)
 {
     int code = 0;
 
     /* PDF Reference 1.7 p423, any colour operators in a CharProc, following a d1, should be ignored */
-    if (ctx->text.inside_CharProc && ctx->text.CharProc_is_d1)
+    if (ctx->text.inside_CharProc && ctx->text.CharProc_d_type != pdf_type3_d0)
         return 0;
 
     if (ctx->page.DefaultGray_cs != NULL) {
         gs_client_color cc;
 
         code = gs_setcolorspace(ctx->pgs, ctx->page.DefaultGray_cs);
         if (code < 0)
             return code;
         cc.paint.values[0] = d;
         cc.pattern = 0;
         return gs_setcolor(ctx->pgs, &cc);
     } else {
         code = gs_setgray(ctx->pgs, d);
         if (code < 0)
             return code;
     }
     pdfi_set_colour_callback(ctx->pgs->color[0].color_space, ctx, pdfi_cspace_free_callback);
     return 0;
 }
@@ -365,28 +365,28 @@ int pdfi_gs_setgray(pdf_context *ctx, double d)
 int pdfi_gs_setrgbcolor(pdf_context *ctx, double r, double g, double b)
 {
     int code = 0;
 
     /* PDF Reference 1.7 p423, any colour operators in a CharProc, following a d1, should be ignored */
-    if (ctx->text.inside_CharProc && ctx->text.CharProc_is_d1)
+    if (ctx->text.inside_CharProc && ctx->text.CharProc_d_type != pdf_type3_d0)
         return 0;
 
     if (ctx->page.DefaultRGB_cs != NULL) {
         gs_client_color cc;
 
         code = gs_setcolorspace(ctx->pgs, ctx->page.DefaultRGB_cs);
         if (code < 0)
             return code;
         pdfi_set_colour_callback(ctx->pgs->color[0].color_space, ctx, NULL);
         cc.paint.values[0] = r;
         cc.paint.values[1] = g;
         cc.paint.values[2] = b;
         cc.pattern = 0;
         return gs_setcolor(ctx->pgs, &cc);
     } else {
         code = gs_setrgbcolor(ctx->pgs, r, g, b);
         if (code < 0)
             return code;
         pdfi_set_colour_callback(ctx->pgs->color[0].color_space, ctx, pdfi_cspace_free_callback);
     }
     return 0;
 }
@@ -394,28 +394,28 @@ int pdfi_gs_setrgbcolor(pdf_context *ctx, double r, double g, double b)
 static int pdfi_gs_setcmykcolor(pdf_context *ctx, double c, double m, double y, double k)
 {
     int code = 0;
 
     /* PDF Reference 1.7 p423, any colour operators in a CharProc, following a d1, should be ignored */
-    if (ctx->text.inside_CharProc && ctx->text.CharProc_is_d1)
+    if (ctx->text.inside_CharProc && ctx->text.CharProc_d_type != pdf_type3_d0)
         return 0;
 
     if (ctx->page.DefaultCMYK_cs != NULL) {
         gs_client_color cc;
 
         code = gs_setcolorspace(ctx->pgs, ctx->page.DefaultCMYK_cs);
         if (code < 0)
             return code;
         cc.paint.values[0] = c;
         cc.paint.values[1] = m;
         cc.paint.values[2] = y;
         cc.paint.values[3] = k;
         cc.pattern = 0;
         return gs_setcolor(ctx->pgs, &cc);
     } else {
         code = gs_setcmykcolor(ctx->pgs, c, m, y, k);
         if (code < 0)
             return code;
     }
     pdfi_set_colour_callback(ctx->pgs->color[0].color_space, ctx, pdfi_cspace_free_callback);
     return 0;
 }
@@ -423,17 +423,17 @@ static int pdfi_gs_setcmykcolor(pdf_context *ctx, double c, double m, double y,
 int pdfi_gs_setcolorspace(pdf_context *ctx, gs_color_space *pcs)
 {
     /* If the target colour space is already the current colour space, don't
      * bother to do anything.
      */
     if (ctx->pgs->color[0].color_space->id != pcs->id) {
         /* PDF Reference 1.7 p423, any colour operators in a CharProc, following a d1, should be ignored */
-        if (ctx->text.inside_CharProc && ctx->text.CharProc_is_d1)
+        if (ctx->text.inside_CharProc && ctx->text.CharProc_d_type != pdf_type3_d0)
             return 0;
 
         pdfi_set_colour_callback(pcs, ctx, pdfi_cspace_free_callback);
         return gs_setcolorspace(ctx->pgs, pcs);
     }
     return 0;
 }
 
 /* Start with the simple cases, where we set the colour space and colour in a single operation */
diff --git a/pdf/pdf_font.c b/pdf/pdf_font.c
index 49e194c1e..a34ef231b 100644
--- a/pdf/pdf_font.c
+++ b/pdf/pdf_font.c
@@ -1164,74 +1164,76 @@ cleanup:
 int pdfi_d0(pdf_context *ctx)
 {
     int code = 0, gsave_level = 0;
     double width[2];
 
     if (ctx->text.inside_CharProc == false)
         pdfi_set_warning(ctx, 0, NULL, W_PDF_NOTINCHARPROC, "pdfi_d0", NULL);
 
+    ctx->text.CharProc_d_type = pdf_type3_d0;
+
     if (pdfi_count_stack(ctx) < 2) {
         code = gs_note_error(gs_error_stackunderflow);
         goto d0_error;
     }
 
     if (ctx->stack_top[-1]->type != PDF_INT && ctx->stack_top[-1]->type != PDF_REAL) {
         code = gs_note_error(gs_error_typecheck);
         goto d0_error;
     }
     if (ctx->stack_top[-2]->type != PDF_INT && ctx->stack_top[-2]->type != PDF_REAL) {
         code = gs_note_error(gs_error_typecheck);
         goto d0_error;
     }
     if(ctx->text.current_enum == NULL) {
         code = gs_note_error(gs_error_undefined);
         goto d0_error;
     }
 
     if (ctx->stack_top[-1]->type == PDF_INT)
         width[0] = (double)((pdf_num *)ctx->stack_top[-1])->value.i;
     else
         width[0] = ((pdf_num *)ctx->stack_top[-1])->value.d;
     if (ctx->stack_top[-2]->type == PDF_INT)
         width[1] = (double)((pdf_num *)ctx->stack_top[-1])->value.i;
     else
         width[1] = ((pdf_num *)ctx->stack_top[-1])->value.d;
 
     gsave_level = ctx->pgs->level;
 
     /*
      * We don't intend to retain this, instead we will use (effectively) xyshow to apply
      * width overrides at the text level.
     if (font && font->Widths && ctx->current_chr >= font->FirstChar && ctx->current_chr <= font->LastChar)
         width[0] = font->Widths[font->ctx->current_chr - font->FirstChar];
      */
 
     if (ctx->text.current_enum == NULL) {
         code = gs_note_error(gs_error_unknownerror);
         goto d0_error;
     }
 
     code = gs_text_setcharwidth(ctx->text.current_enum, width);
 
     /* Nasty hackery. setcachedevice potentially pushes a new device into the graphics state
      * and there's no way to remove that device again without grestore'ing back to a point
      * before the device was loaded. To facilitate this, setcachedevice will do a gs_gsave()
      * before changing the device. Note, the grestore for this is done back in show_update()
      * which is not reached until after the CharProc has been executed.
      *
      * This is a problem for us when running a PDF content stream, because after running the
      * stream we check the gsave level and, if its not the same as it was when we started
      * the stream, we pdfi_grestore() back until it is. This mismatch of the gsave levels
      * causes all sorts of trouble with the font and we can end up counting the pdf_font
      * object down and discarding the font we're tryign to use.
      *
      * The solution (ugly though it is) is to patch up the saved gsave_level in the
      * context to expect that we have one more gsave level on exit. That wasy we won't
      * try and pdf_grestore() back to an earlier point.
      */
     if (ctx->pgs->level > gsave_level)
         ctx->current_stream_save.gsave_level += ctx->pgs->level - gsave_level;
 
     if (code < 0)
         goto d0_error;
     pdfi_pop(ctx, 2);
     return 0;
@@ -1244,50 +1246,50 @@ d0_error:
 int pdfi_d1(pdf_context *ctx)
 {
     int code = 0, i, gsave_level;
     double wbox[6];
 
     if (ctx->text.inside_CharProc == false)
         pdfi_set_warning(ctx, 0, NULL, W_PDF_NOTINCHARPROC, "pdfi_d1", NULL);
 
-    ctx->text.CharProc_is_d1 = true;
+    ctx->text.CharProc_d_type = pdf_type3_d1;
 
     if (pdfi_count_stack(ctx) < 6) {
         code = gs_note_error(gs_error_stackunderflow);
         goto d1_error;
     }
 
     for (i=-6;i < 0;i++) {
         if (ctx->stack_top[i]->type != PDF_INT && ctx->stack_top[i]->type != PDF_REAL) {
             code = gs_note_error(gs_error_typecheck);
             goto d1_error;
         }
         if (ctx->stack_top[i]->type == PDF_INT)
             wbox[i + 6] = (double)((pdf_num *)ctx->stack_top[i])->value.i;
         else
             wbox[i + 6] = ((pdf_num *)ctx->stack_top[i])->value.d;
     }
 
     /*
      * We don't intend to retain this, instead we will use (effectively) xyshow to apply
      * width overrides at the text level.
     if (font && font->Widths && ctx->current_chr >= font->FirstChar && ctx->current_chr <= font->LastChar)
         wbox[0] = font->Widths[font->ctx->current_chr - font->FirstChar];
      */
 
     gsave_level = ctx->pgs->level;
 
     if (ctx->text.current_enum == NULL) {
         code = gs_note_error(gs_error_unknownerror);
         goto d1_error;
     }
 
     code = gs_text_setcachedevice(ctx->text.current_enum, wbox);
 
     /* See the comment immediately after gs_text_setcachedvice() in pdfi_d0 above */
     if (ctx->pgs->level > gsave_level)
         ctx->current_stream_save.gsave_level += ctx->pgs->level - gsave_level;
 
     if (code < 0)
         goto d1_error;
     pdfi_pop(ctx, 6);
     return 0;
diff --git a/pdf/pdf_font3.c b/pdf/pdf_font3.c
index 9cb3d2885..7ecd3bfff 100644
--- a/pdf/pdf_font3.c
+++ b/pdf/pdf_font3.c
@@ -42,87 +42,87 @@ static int
 pdfi_type3_build_char(gs_show_enum * penum, gs_gstate * pgs, gs_font * pfont,
                      gs_char chr, gs_glyph glyph)
 {
     int code = 0;
     pdf_font_type3 *font;
     pdf_name *GlyphName = NULL;
     pdf_stream *CharProc = NULL;
     int SavedTextBlockDepth = 0;
     char Notdef[8] = {".notdef"};
 
     font = (pdf_font_type3 *)pfont->client_data;
 
     SavedTextBlockDepth = OBJ_CTX(font)->text.BlockDepth;
     code = pdfi_array_get(OBJ_CTX(font), font->Encoding, (uint64_t)chr, (pdf_obj **)&GlyphName);
     if (code < 0)
         return code;
 
     code = pdfi_dict_get_by_key(OBJ_CTX(font), font->CharProcs, GlyphName, (pdf_obj **)&CharProc);
     if (code == gs_error_undefined) {
         byte *Key = NULL;
         /* Can't find the named glyph, try to find a /.notdef as a substitute */
         Key = gs_alloc_bytes(OBJ_MEMORY(font), 8, "working buffer for BuildChar");
         if (Key == NULL)
             goto build_char_error;
         memset(Key, 0x00, 8);
         memcpy(Key, Notdef, 8);
         code = pdfi_dict_get(OBJ_CTX(font), font->CharProcs, (const char *)Key, (pdf_obj **)&CharProc);
         gs_free_object(OBJ_MEMORY(font), Key, "working buffer for BuildChar");
         if (code == gs_error_undefined) {
             code = 0;
             goto build_char_error;
         }
     }
     if (code < 0)
         goto build_char_error;
     if (CharProc->type != PDF_STREAM) {
         code = gs_note_error(gs_error_typecheck);
         goto build_char_error;
     }
 
     OBJ_CTX(font)->text.BlockDepth = 0;
     OBJ_CTX(font)->text.inside_CharProc = true;
-    OBJ_CTX(font)->text.CharProc_is_d1 = false;
+    OBJ_CTX(font)->text.CharProc_d_type = pdf_type3_d_none;
 
     {
         /* It turns out that if a type 3 font uses a stroke to draw, and does not
          * acrually set the stroke colour, then we must use the fill colour instead.
          * In effect we start a type 3 BuildChar with stroke colour = fill colour.
          * That is annoyingly difficult to set up. We need to copy the existing
          * colour values from the structures in the gs_gstate_color structures into
          * temporary copies and copy the colour space pointer (and keep its reference
          * count correct). Then copy the fill colour values and ponter to the stroke
          * structures. Finally, after drawing the character, copy the temporary
          * saved copies back again.
          */
         gs_gstate_color tmp_color;
         gs_client_color tmp_cc;
         gx_device_color tmp_dc;
 
         /* Set up the pointers in the gs_gstate_color structure to point to
          * the temporary structures we have on the stack.
          */
         tmp_color.ccolor = &tmp_cc;
         tmp_color.dev_color = &tmp_dc;
 
         /* Use the utility routine above to copy the stroke colour to the temporary copy */
         pdfi_type3_copy_color(&OBJ_CTX(font)->pgs->color[1], &tmp_color);
         rc_increment_cs(tmp_color.color_space);
         /* Use the utility routine above to copy the fill colour to the stroke colour */
         pdfi_type3_copy_color(&OBJ_CTX(font)->pgs->color[0], &OBJ_CTX(font)->pgs->color[1]);
 
         code = pdfi_gsave(OBJ_CTX(font));
         if (code >= 0) {
             code = pdfi_run_context(OBJ_CTX(font), CharProc, font->PDF_font, true, "CharProc");
             (void)pdfi_grestore(OBJ_CTX(font));
         }
 
         /* Use the utility routine above to copy the temporary copy to the stroke colour */
         pdfi_type3_copy_color(&tmp_color, &OBJ_CTX(font)->pgs->color[1]);
         rc_decrement_cs(tmp_color.color_space, "pdfi_type3_build_char");
     }
 
     OBJ_CTX(font)->text.inside_CharProc = false;
-    OBJ_CTX(font)->text.CharProc_is_d1 = false;
+    OBJ_CTX(font)->text.CharProc_d_type = pdf_type3_d_none;
     OBJ_CTX(font)->text.BlockDepth = SavedTextBlockDepth;
 
 build_char_error:
