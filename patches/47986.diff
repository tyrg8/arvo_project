commit d86a86dbcddba0414f0dea13c3357f1c38826cb2
Author: Allen Winter <allen.winter@kdab.com>
Date:   Sun Jun 12 15:17:08 2022 -0400

    Fix Stack-buffer-overflow in simple_str_to_doublestr

diff --git a/src/libical/icalvalue.c b/src/libical/icalvalue.c
index c41a69a3..84be221d 100644
--- a/src/libical/icalvalue.c
+++ b/src/libical/icalvalue.c
@@ -359,66 +359,66 @@ static icalvalue *icalvalue_new_enum(icalvalue_kind kind, int x_type, const char
 /**
  * Extracts a simple floating point number as a substring.
  * The decimal separator (if any) of the double has to be '.'
  * The code is locale *independent* and does *not* change the locale.
  * It should be thread safe.
  */
-static int simple_str_to_doublestr(const char *from, char *result, char **to)
+static int simple_str_to_doublestr(const char *from, char *result, int result_len, char **to)
 {
     char *start = NULL, *end = NULL, *cur = (char *)from;
 
 #if !defined(HAVE_GETNUMBERFORMAT)
     struct lconv *loc_data = localeconv();
 #endif
     int i = 0;
     double dtest;
 
     /*sanity checks */
     if (!from || !result) {
         return 1;
     }
 
     /*skip the white spaces at the beginning */
     while (*cur && isspace((int)*cur))
         cur++;
 
     start = cur;
     /* copy the part that looks like a double into result.
      * during the copy, we give ourselves a chance to convert the '.'
      * into the decimal separator of the current locale.
      */
     while (*cur && (isdigit((int)*cur) || *cur == '.' || *cur == '+' || *cur == '-')) {
         ++cur;
     }
     end = cur;
-    if (end - start + 1 > 100) {
+    if (end - start + 1 > result_len) {
         /*huh hoh, number is too big. getting out */
         return 1;
     }
 
     /* copy the float number string into tmp_buf, and take
      * care to have the (optional) decimal separator be the one
      * of the current locale.
      */
 #if !defined(HAVE_GETNUMBERFORMAT)
-    for (i = 0; i < end - from; ++i) {
+    for (i = 0; i < end - start; ++i) {
         if (start[i] == '.' && loc_data && loc_data->decimal_point && loc_data->decimal_point[0]
             && loc_data->decimal_point[0] != '.') {
             /*replace '.' by the digit separator of the current locale */
             result[i] = loc_data->decimal_point[0];
         } else {
             result[i] = start[i];
         }
     }
 #else
-    GetNumberFormat(LOCALE_SYSTEM_DEFAULT, 0, start, NULL, result, TMP_NUM_SIZE);
+    GetNumberFormat(LOCALE_SYSTEM_DEFAULT, 0, start, NULL, result, result_len);
 #endif
     if (to) {
         *to = end;
     }
 
     /* now try to convert to a floating point number, to check for validity only */
     if (sscanf(result, "%lf", &dtest) != 1) {
         return 1;
     }
     return 0;
 }
@@ -432,329 +432,329 @@ static void free_icalvalue_attach_data(char *data, void *user_data)
 static icalvalue *icalvalue_new_from_string_with_error(icalvalue_kind kind,
                                                        const char *str, icalproperty ** error)
 {
     struct icalvalue_impl *value = 0;
 
     icalerror_check_arg_rz(str != 0, "str");
 
     if (error != 0) {
         *error = 0;
     }
 
     switch (kind) {
 
     case ICAL_ATTACH_VALUE:
         {
             icalattach *attach;
 
             attach = icalattach_new_from_url(str);
             if (!attach)
                 break;
 
             value = icalvalue_new_attach(attach);
             icalattach_unref(attach);
             break;
         }
 
     case ICAL_BINARY_VALUE:
         {
             icalattach *attach;
 
             attach = icalattach_new_from_data(strdup(str), free_icalvalue_attach_data, 0);
             if (!attach)
               break;
 
             value = icalvalue_new_attach(attach);
             icalattach_unref(attach);
             break;
         }
     case ICAL_BOOLEAN_VALUE:
         {
             if (!strcmp(str, "TRUE")) {
                 value = icalvalue_new_boolean(1);
             } else if (!strcmp(str, "FALSE")) {
                 value = icalvalue_new_boolean(0);
             } else if (error != 0) {
                 char temp[TMP_BUF_SIZE];
                 icalparameter *errParam;
 
                 snprintf(temp, sizeof(temp),
                          "Could not parse %s as a %s property",
                          str, icalvalue_kind_to_string(kind));
                 errParam = icalparameter_new_xlicerrortype(ICAL_XLICERRORTYPE_VALUEPARSEERROR);
                 *error = icalproperty_vanew_xlicerror(temp, errParam, 0);
                 icalparameter_free(errParam);
             }
             break;
         }
 
     case ICAL_TRANSP_VALUE:
         value = icalvalue_new_enum(kind, (int)ICAL_TRANSP_X, str);
         break;
     case ICAL_METHOD_VALUE:
         value = icalvalue_new_enum(kind, (int)ICAL_METHOD_X, str);
         break;
     case ICAL_STATUS_VALUE:
         value = icalvalue_new_enum(kind, (int)ICAL_STATUS_X, str);
         break;
     case ICAL_ACTION_VALUE:
         value = icalvalue_new_enum(kind, (int)ICAL_ACTION_X, str);
         break;
 
     case ICAL_QUERY_VALUE:
         value = icalvalue_new_query(str);
         break;
 
     case ICAL_CLASS_VALUE:
         value = icalvalue_new_enum(kind, (int)ICAL_CLASS_X, str);
         break;
     case ICAL_CMD_VALUE:
         value = icalvalue_new_enum(kind, ICAL_CMD_X, str);
         break;
     case ICAL_QUERYLEVEL_VALUE:
         value = icalvalue_new_enum(kind, ICAL_QUERYLEVEL_X, str);
         break;
     case ICAL_CARLEVEL_VALUE:
         value = icalvalue_new_enum(kind, ICAL_CARLEVEL_X, str);
         break;
     case ICAL_BUSYTYPE_VALUE:
         value = icalvalue_new_enum(kind, ICAL_BUSYTYPE_X, str);
         break;
     case ICAL_POLLMODE_VALUE:
         value = icalvalue_new_enum(kind, ICAL_POLLMODE_X, str);
         break;
     case ICAL_POLLCOMPLETION_VALUE:
         value = icalvalue_new_enum(kind, ICAL_POLLCOMPLETION_X, str);
         break;
 
     case ICAL_INTEGER_VALUE:
         value = icalvalue_new_integer(atoi(str));
         break;
 
     case ICAL_FLOAT_VALUE:
         value = icalvalue_new_float((float)atof(str));
         break;
 
     case ICAL_UTCOFFSET_VALUE:
         {
             int t, utcoffset, hours, minutes, seconds;
 
             /* treat the UTCOFSET string as a decimal number, disassemble its digits
                and reconstruct it as sections */
             t = strtol(str, 0, 10);
             /* add phantom seconds field */
             if (strlen(str) < 7) {
                 t *= 100;
             }
             hours = (t / 10000);
             minutes = (t - hours * 10000) / 100;
             seconds = (t - hours * 10000 - minutes * 100);
             utcoffset = hours * 3600 + minutes * 60 + seconds;
 
             value = icalvalue_new_utcoffset(utcoffset);
 
             break;
         }
 
     case ICAL_TEXT_VALUE:
         {
             char *dequoted_str = icalmemory_strdup_and_dequote(str);
 
             value = icalvalue_new_text(dequoted_str);
             icalmemory_free_buffer(dequoted_str);
             break;
         }
 
     case ICAL_STRING_VALUE:
         value = icalvalue_new_string(str);
         break;
 
     case ICAL_CALADDRESS_VALUE:
         value = icalvalue_new_caladdress(str);
         break;
 
     case ICAL_URI_VALUE:
         value = icalvalue_new_uri(str);
         break;
 
     case ICAL_GEO_VALUE:
         {
             char *cur = NULL;
             struct icalgeotype geo;
             memset(geo.lat, 0, ICAL_GEO_LEN);
             memset(geo.lon, 0, ICAL_GEO_LEN);
 
-            if (simple_str_to_doublestr(str, geo.lat, &cur)) {
+            if (simple_str_to_doublestr(str, geo.lat, ICAL_GEO_LEN, &cur)) {
                 goto geo_parsing_error;
             }
             /* skip white spaces */
             while (cur && isspace((int)*cur)) {
                 ++cur;
             }
 
             /*there is a ';' between the latitude and longitude parts */
             if (!cur || *cur != ';') {
                 goto geo_parsing_error;
             }
 
             ++cur;
 
             /* skip white spaces */
             while (cur && isspace((int)*cur)) {
                 ++cur;
             }
 
-            if (simple_str_to_doublestr(cur, geo.lon, &cur)) {
+            if (simple_str_to_doublestr(cur, geo.lon, ICAL_GEO_LEN, &cur)) {
                 goto geo_parsing_error;
             }
             value = icalvalue_new_geo(geo);
             break;
 
           geo_parsing_error:
             if (error != 0) {
                 char temp[TMP_BUF_SIZE];
                 icalparameter *errParam;
 
                 snprintf(temp, sizeof(temp),
                          "Could not parse %s as a %s property",
                          str, icalvalue_kind_to_string(kind));
                 errParam = icalparameter_new_xlicerrortype(ICAL_XLICERRORTYPE_VALUEPARSEERROR);
                 *error = icalproperty_vanew_xlicerror(temp, errParam, 0);
                 icalparameter_free(errParam);
             }
         }
         break;
 
     case ICAL_RECUR_VALUE:
         {
             struct icalrecurrencetype rt;
 
             rt = icalrecurrencetype_from_string(str);
             if (rt.freq != ICAL_NO_RECURRENCE) {
                 value = icalvalue_new_recur(rt);
             }
             icalmemory_free_buffer(rt.rscale);
             break;
         }
 
     case ICAL_DATE_VALUE:
     case ICAL_DATETIME_VALUE:
         {
             struct icaltimetype tt;
 
             tt = icaltime_from_string(str);
             if (!icaltime_is_null_time(tt)) {
                 value = icalvalue_new_impl(kind);
                 value->data.v_time = tt;
 
                 icalvalue_reset_kind(value);
             }
             break;
         }
 
     case ICAL_DATETIMEPERIOD_VALUE:
         {
             struct icaltimetype tt;
             struct icalperiodtype p;
 
             tt = icaltime_from_string(str);
 
             if (!icaltime_is_null_time(tt)) {
                 value = icalvalue_new_datetime(tt);
                 break;
             }
 
             p = icalperiodtype_from_string(str);
             if (!icalperiodtype_is_null_period(p)) {
                 value = icalvalue_new_period(p);
             }
 
             break;
         }
 
     case ICAL_DURATION_VALUE:
         {
             struct icaldurationtype dur = icaldurationtype_from_string(str);
 
             if (!icaldurationtype_is_bad_duration(dur)) {       /* failed to parse */
                 value = icalvalue_new_duration(dur);
             }
 
             break;
         }
 
     case ICAL_PERIOD_VALUE:
         {
             struct icalperiodtype p;
 
             p = icalperiodtype_from_string(str);
 
             if (!icalperiodtype_is_null_period(p)) {
                 value = icalvalue_new_period(p);
             }
             break;
         }
 
     case ICAL_TRIGGER_VALUE:
         {
             struct icaltriggertype tr = icaltriggertype_from_string(str);
 
             if (!icaltriggertype_is_bad_trigger(tr)) {
                 value = icalvalue_new_trigger(tr);
             }
             break;
         }
 
     case ICAL_REQUESTSTATUS_VALUE:
         {
             struct icalreqstattype rst = icalreqstattype_from_string(str);
 
             if (rst.code != ICAL_UNKNOWN_STATUS) {
                 value = icalvalue_new_requeststatus(rst);
             }
             break;
         }
 
     case ICAL_X_VALUE:
         {
             char *dequoted_str = icalmemory_strdup_and_dequote(str);
 
             value = icalvalue_new_x(dequoted_str);
             icalmemory_free_buffer(dequoted_str);
         }
         break;
 
     default:
         {
             char temp[TMP_BUF_SIZE];
             icalparameter *errParam;
 
             if (error != 0) {
 
                 snprintf(temp, TMP_BUF_SIZE, "Unknown type for \'%s\'", str);
 
                 errParam = icalparameter_new_xlicerrortype(ICAL_XLICERRORTYPE_VALUEPARSEERROR);
                 *error = icalproperty_vanew_xlicerror(temp, errParam, 0);
                 icalparameter_free(errParam);
             }
 
             snprintf(temp, TMP_BUF_SIZE,
                      "icalvalue_new_from_string got an unknown value type (%s) for \'%s\'",
                      icalvalue_kind_to_string(kind), str);
             icalerror_warn(temp);
             value = 0;
         }
     }
 
     if (error != 0 && *error == 0 && value == 0) {
         char temp[TMP_BUF_SIZE];
         icalparameter *errParam;
 
         snprintf(temp, TMP_BUF_SIZE, "Failed to parse value: \'%s\'", str);
 
         errParam = icalparameter_new_xlicerrortype(ICAL_XLICERRORTYPE_VALUEPARSEERROR);
         *error = icalproperty_vanew_xlicerror(temp, errParam, 0);
         icalparameter_free(errParam);
     }
 
     return value;
 }
diff --git a/src/test/regression.c b/src/test/regression.c
index da3ba9af..8f036110 100644
--- a/src/test/regression.c
+++ b/src/test/regression.c
@@ -4380,44 +4380,56 @@ void test_comma_in_quoted_value(void)
 void test_geo_props(void)
 {
     int estate;
     icalcomponent *c;
     icalproperty *p;
 
     c = icalparser_parse_string("BEGIN:VEVENT\n" "GEO:49.42612;7.75473\n" "END:VEVENT\n");
     ok("icalparser_parse_string()", (c != NULL));
     if (!c) {
         exit(EXIT_FAILURE);
     }
     if (VERBOSE)
         printf("%s", icalcomponent_as_ical_string(c));
     p = icalcomponent_get_first_property(c, ICAL_GEO_PROPERTY);
     str_is("icalproperty_get_value_as_string() works",
            icalproperty_get_value_as_string(p), "49.42612;7.75473");
     icalcomponent_free(c);
 
     c = icalparser_parse_string("BEGIN:VEVENT\n" "GEO:-0;+0\n" "END:VEVENT\n");
     ok("icalparser_parse_string()", (c != NULL));
     if (!c) {
         exit(EXIT_FAILURE);
     }
     if (VERBOSE)
         printf("%s", icalcomponent_as_ical_string(c));
     p = icalcomponent_get_first_property(c, ICAL_GEO_PROPERTY);
     str_is("icalproperty_get_value_as_string() works",
            icalproperty_get_value_as_string(p), "-0;+0");
     icalcomponent_free(c);
 
+    /* failure situations */
     estate = icalerror_get_errors_are_fatal();
     icalerror_set_errors_are_fatal(0);
     c = icalparser_parse_string("BEGIN:VEVENT\n" "GEO:-0a;+0\n" "END:VEVENT\n");
     if (!c) {
         exit(EXIT_FAILURE);
     }
     if (VERBOSE)
         printf("%s", icalcomponent_as_ical_string(c));
     p = icalcomponent_get_first_property(c, ICAL_GEO_PROPERTY);
     ok("expected fail icalcomponent_get_first_property()", (p == NULL));
     icalcomponent_free(c);
+
+    c = icalparser_parse_string("BEGIN:VEVENT\n" "GEO:16.815151515151515151;+0\n" "END:VEVENT\n");
+    if (!c) {
+        exit(EXIT_FAILURE);
+    }
+    if (VERBOSE)
+        printf("%s", icalcomponent_as_ical_string(c));
+    p = icalcomponent_get_first_property(c, ICAL_GEO_PROPERTY);
+    ok("expected fail icalcomponent_get_first_property()", (p == NULL));
+    icalcomponent_free(c);
+
     icalerror_set_errors_are_fatal(estate);
 }
 
