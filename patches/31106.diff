commit 742e67080586e212f3c6adbdc1c59bf56b0712b1
Merge: 11e404ca b04f8acb
Author: Thomas Adam <thomas@xteddy.org>
Date:   Fri Feb 19 10:01:19 2021 +0000

    Merge branch 'obsd-master' into master

diff --git a/job.c b/job.c
index 6c1a3e09..5bf53a76 100644
--- a/job.c
+++ b/job.c
@@ -71,108 +71,108 @@ struct job *
 job_run(const char *cmd, struct session *s, const char *cwd,
     job_update_cb updatecb, job_complete_cb completecb, job_free_cb freecb,
     void *data, int flags, int sx, int sy)
 {
 	struct job	*job;
 	struct environ	*env;
 	pid_t		 pid;
 	int		 nullfd, out[2], master;
 	const char	*home;
 	sigset_t	 set, oldset;
 	struct winsize	 ws;
 
 	/*
 	 * Do not set TERM during .tmux.conf, it is nice to be able to use
 	 * if-shell to decide on default-terminal based on outside TERM.
 	 */
 	env = environ_for_session(s, !cfg_finished);
 
 	sigfillset(&set);
 	sigprocmask(SIG_BLOCK, &set, &oldset);
 
 	if (flags & JOB_PTY) {
 		memset(&ws, 0, sizeof ws);
 		ws.ws_col = sx;
 		ws.ws_row = sy;
 		pid = fdforkpty(ptm_fd, &master, NULL, NULL, &ws);
 	} else {
 		if (socketpair(AF_UNIX, SOCK_STREAM, PF_UNSPEC, out) != 0)
 			goto fail;
 		pid = fork();
 	}
 	log_debug("%s: cmd=%s, cwd=%s", __func__, cmd, cwd == NULL ? "" : cwd);
 
 	switch (pid) {
 	case -1:
 		if (~flags & JOB_PTY) {
 			close(out[0]);
 			close(out[1]);
 		}
 		goto fail;
 	case 0:
 		proc_clear_signals(server_proc, 1);
 		sigprocmask(SIG_SETMASK, &oldset, NULL);
 
-		if (cwd == NULL || chdir(cwd) != 0) {
-			if ((home = find_home()) == NULL || chdir(home) != 0)
-				chdir("/");
-		}
+		if ((cwd == NULL || chdir(cwd) != 0) &&
+		    ((home = find_home()) == NULL || chdir(home) != 0) &&
+		    chdir("/") != 0)
+			fatal("chdir failed");
 
 		environ_push(env);
 		environ_free(env);
 
 		if (~flags & JOB_PTY) {
 			if (dup2(out[1], STDIN_FILENO) == -1)
 				fatal("dup2 failed");
 			if (dup2(out[1], STDOUT_FILENO) == -1)
 				fatal("dup2 failed");
 			if (out[1] != STDIN_FILENO && out[1] != STDOUT_FILENO)
 				close(out[1]);
 			close(out[0]);
 
 			nullfd = open(_PATH_DEVNULL, O_RDWR, 0);
 			if (nullfd == -1)
 				fatal("open failed");
 			if (dup2(nullfd, STDERR_FILENO) == -1)
 				fatal("dup2 failed");
 			if (nullfd != STDERR_FILENO)
 				close(nullfd);
 		}
 		closefrom(STDERR_FILENO + 1);
 
 		execl(_PATH_BSHELL, "sh", "-c", cmd, (char *) NULL);
 		fatal("execl failed");
 	}
 
 	sigprocmask(SIG_SETMASK, &oldset, NULL);
 	environ_free(env);
 
 	job = xmalloc(sizeof *job);
 	job->state = JOB_RUNNING;
 	job->flags = flags;
 
 	job->cmd = xstrdup(cmd);
 	job->pid = pid;
 	job->status = 0;
 
 	LIST_INSERT_HEAD(&all_jobs, job, entry);
 
 	job->updatecb = updatecb;
 	job->completecb = completecb;
 	job->freecb = freecb;
 	job->data = data;
 
 	if (~flags & JOB_PTY) {
 		close(out[1]);
 		job->fd = out[0];
 	} else
 		job->fd = master;
 	setblocking(job->fd, 0);
 
 	job->event = bufferevent_new(job->fd, job_read_callback,
 	    job_write_callback, job_error_callback, job);
 	if (job->event == NULL)
 		fatalx("out of memory");
 	bufferevent_enable(job->event, EV_READ|EV_WRITE);
 
 	log_debug("run job %p: %s, pid %ld", job, job->cmd, (long) job->pid);
 	return (job);
diff --git a/spawn.c b/spawn.c
index 7c279eff..b9fe2a2d 100644
--- a/spawn.c
+++ b/spawn.c
@@ -201,240 +201,240 @@ struct window_pane *
 spawn_pane(struct spawn_context *sc, char **cause)
 {
 	struct cmdq_item	 *item = sc->item;
 	struct cmd_find_state	 *target = cmdq_get_target(item);
 	struct client		 *c = cmdq_get_client(item);
 	struct session		 *s = sc->s;
 	struct window		 *w = sc->wl->window;
 	struct window_pane	 *new_wp;
 	struct environ		 *child;
 	struct environ_entry	 *ee;
 	char			**argv, *cp, **argvp, *argv0, *cwd;
 	const char		 *cmd, *tmp;
 	int			  argc;
 	u_int			  idx;
 	struct termios		  now;
 	u_int			  hlimit;
 	struct winsize		  ws;
 	sigset_t		  set, oldset;
 	key_code		  key;
 
 	spawn_log(__func__, sc);
 
 	/*
 	 * Work out the current working directory. If respawning, use
 	 * the pane's stored one unless specified.
 	 */
 	if (sc->cwd != NULL)
 		cwd = format_single(item, sc->cwd, c, target->s, NULL, NULL);
 	else if (~sc->flags & SPAWN_RESPAWN)
 		cwd = xstrdup(server_client_get_cwd(c, target->s));
 	else
 		cwd = NULL;
 
 	/*
 	 * If we are respawning then get rid of the old process. Otherwise
 	 * either create a new cell or assign to the one we are given.
 	 */
 	hlimit = options_get_number(s->options, "history-limit");
 	if (sc->flags & SPAWN_RESPAWN) {
 		if (sc->wp0->fd != -1 && (~sc->flags & SPAWN_KILL)) {
 			window_pane_index(sc->wp0, &idx);
 			xasprintf(cause, "pane %s:%d.%u still active",
 			    s->name, sc->wl->idx, idx);
 			free(cwd);
 			return (NULL);
 		}
 		if (sc->wp0->fd != -1) {
 			bufferevent_free(sc->wp0->event);
 			close(sc->wp0->fd);
 		}
 		window_pane_reset_mode_all(sc->wp0);
 		screen_reinit(&sc->wp0->base);
 		input_free(sc->wp0->ictx);
 		sc->wp0->ictx = NULL;
 		new_wp = sc->wp0;
 		new_wp->flags &= ~(PANE_STATUSREADY|PANE_STATUSDRAWN);
 	} else if (sc->lc == NULL) {
 		new_wp = window_add_pane(w, NULL, hlimit, sc->flags);
 		layout_init(w, new_wp);
 	} else {
 		new_wp = window_add_pane(w, sc->wp0, hlimit, sc->flags);
 		layout_assign_pane(sc->lc, new_wp);
 	}
 
 	/*
 	 * Now we have a pane with nothing running in it ready for the new process.
 	 * Work out the command and arguments and store the working directory.
 	 */
 	if (sc->argc == 0 && (~sc->flags & SPAWN_RESPAWN)) {
 		cmd = options_get_string(s->options, "default-command");
 		if (cmd != NULL && *cmd != '\0') {
 			argc = 1;
 			argv = (char **)&cmd;
 		} else {
 			argc = 0;
 			argv = NULL;
 		}
 	} else {
 		argc = sc->argc;
 		argv = sc->argv;
 	}
 	if (cwd != NULL) {
 		free(new_wp->cwd);
 		new_wp->cwd = cwd;
 	}
 
 	/*
 	 * Replace the stored arguments if there are new ones. If not, the
 	 * existing ones will be used (they will only exist for respawn).
 	 */
 	if (argc > 0) {
 		cmd_free_argv(new_wp->argc, new_wp->argv);
 		new_wp->argc = argc;
 		new_wp->argv = cmd_copy_argv(argc, argv);
 	}
 
 	/* Create an environment for this pane. */
 	child = environ_for_session(s, 0);
 	if (sc->environ != NULL)
 		environ_copy(sc->environ, child);
 	environ_set(child, "TMUX_PANE", 0, "%%%u", new_wp->id);
 
 	/*
 	 * Then the PATH environment variable. The session one is replaced from
 	 * the client if there is one because otherwise running "tmux new
 	 * myprogram" wouldn't work if myprogram isn't in the session's path.
 	 */
 	if (c != NULL && c->session == NULL) { /* only unattached clients */
 		ee = environ_find(c->environ, "PATH");
 		if (ee != NULL)
 			environ_set(child, "PATH", 0, "%s", ee->value);
 	}
 	if (environ_find(child, "PATH") == NULL)
 		environ_set(child, "PATH", 0, "%s", _PATH_DEFPATH);
 
 	/* Then the shell. If respawning, use the old one. */
 	if (~sc->flags & SPAWN_RESPAWN) {
 		tmp = options_get_string(s->options, "default-shell");
 		if (!checkshell(tmp))
 			tmp = _PATH_BSHELL;
 		free(new_wp->shell);
 		new_wp->shell = xstrdup(tmp);
 	}
 	environ_set(child, "SHELL", 0, "%s", new_wp->shell);
 
 	/* Log the arguments we are going to use. */
 	log_debug("%s: shell=%s", __func__, new_wp->shell);
 	if (new_wp->argc != 0) {
 		cp = cmd_stringify_argv(new_wp->argc, new_wp->argv);
 		log_debug("%s: cmd=%s", __func__, cp);
 		free(cp);
 	}
 	if (cwd != NULL)
 		log_debug("%s: cwd=%s", __func__, cwd);
 	cmd_log_argv(new_wp->argc, new_wp->argv, "%s", __func__);
 	environ_log(child, "%s: environment ", __func__);
 
 	/* Initialize the window size. */
 	memset(&ws, 0, sizeof ws);
 	ws.ws_col = screen_size_x(&new_wp->base);
 	ws.ws_row = screen_size_y(&new_wp->base);
 	ws.ws_xpixel = w->xpixel * ws.ws_col;
 	ws.ws_ypixel = w->ypixel * ws.ws_row;
 
 	/* Block signals until fork has completed. */
 	sigfillset(&set);
 	sigprocmask(SIG_BLOCK, &set, &oldset);
 
 	/* If the command is empty, don't fork a child process. */
 	if (sc->flags & SPAWN_EMPTY) {
 		new_wp->flags |= PANE_EMPTY;
 		new_wp->base.mode &= ~MODE_CURSOR;
 		new_wp->base.mode |= MODE_CRLF;
 		goto complete;
 	}
 
 	/* Fork the new process. */
 	new_wp->pid = fdforkpty(ptm_fd, &new_wp->fd, new_wp->tty, NULL, &ws);
 	if (new_wp->pid == -1) {
 		xasprintf(cause, "fork failed: %s", strerror(errno));
 		new_wp->fd = -1;
 		if (~sc->flags & SPAWN_RESPAWN) {
 			server_client_remove_pane(new_wp);
 			layout_close_pane(new_wp);
 			window_remove_pane(w, new_wp);
 		}
 		sigprocmask(SIG_SETMASK, &oldset, NULL);
 		environ_free(child);
 		return (NULL);
 	}
 
 	/* In the parent process, everything is done now. */
 	if (new_wp->pid != 0)
 		goto complete;
 
 	/*
 	 * Child process. Change to the working directory or home if that
 	 * fails.
 	 */
-	if (chdir(new_wp->cwd) != 0) {
-		if ((tmp = find_home()) == NULL || chdir(tmp) != 0)
-			chdir("/");
-	}
+	if (chdir(new_wp->cwd) != 0 &&
+	    ((tmp = find_home()) == NULL || chdir(tmp) != 0) &&
+	    chdir("/") != 0)
+		fatal("chdir failed");
 
 	/*
 	 * Update terminal escape characters from the session if available and
 	 * force VERASE to tmux's backspace.
 	 */
 	if (tcgetattr(STDIN_FILENO, &now) != 0)
 		_exit(1);
 	if (s->tio != NULL)
 		memcpy(now.c_cc, s->tio->c_cc, sizeof now.c_cc);
 	key = options_get_number(global_options, "backspace");
 	if (key >= 0x7f)
 		now.c_cc[VERASE] = '\177';
 	else
 		now.c_cc[VERASE] = key;
 #ifdef IUTF8
 	now.c_iflag |= IUTF8;
 #endif
 	if (tcsetattr(STDIN_FILENO, TCSANOW, &now) != 0)
 		_exit(1);
 
 	/* Clean up file descriptors and signals and update the environment. */
 	closefrom(STDERR_FILENO + 1);
 	proc_clear_signals(server_proc, 1);
 	sigprocmask(SIG_SETMASK, &oldset, NULL);
 	log_close();
 	environ_push(child);
 
 	/*
 	 * If given multiple arguments, use execvp(). Copy the arguments to
 	 * ensure they end in a NULL.
 	 */
 	if (new_wp->argc != 0 && new_wp->argc != 1) {
 		argvp = cmd_copy_argv(new_wp->argc, new_wp->argv);
 		execvp(argvp[0], argvp);
 		_exit(1);
 	}
 
 	/*
 	 * If one argument, pass it to $SHELL -c. Otherwise create a login
 	 * shell.
 	 */
 	cp = strrchr(new_wp->shell, '/');
 	if (new_wp->argc == 1) {
 		tmp = new_wp->argv[0];
 		if (cp != NULL && cp[1] != '\0')
 			xasprintf(&argv0, "%s", cp + 1);
 		else
 			xasprintf(&argv0, "%s", new_wp->shell);
 		execl(new_wp->shell, argv0, "-c", tmp, (char *)NULL);
 		_exit(1);
 	}
 	if (cp != NULL && cp[1] != '\0')
 		xasprintf(&argv0, "-%s", cp + 1);
 	else
 		xasprintf(&argv0, "-%s", new_wp->shell);
 	execl(new_wp->shell, argv0, (char *)NULL);
 	_exit(1);
