commit adcb898a00746c8aa886eb06cc9f5a1cb1834fca
Author: Alex Tutubalin <lexa@lexa.ru>
Date:   Tue Feb 15 19:37:27 2022 +0300

    OM-1 support

diff --git a/internal/libraw_cameraids.h b/internal/libraw_cameraids.h
index 538d1057..90652e30 100644
--- a/internal/libraw_cameraids.h
+++ b/internal/libraw_cameraids.h
@@ -7,310 +7,311 @@ LibRaw is free software; you can redistribute it and/or modify
 it under the terms of the one of two licenses as you choose:
 
 1. GNU LESSER GENERAL PUBLIC LICENSE version 2.1
    (See file LICENSE.LGPL provided in LibRaw distribution archive for details).
 
 2. COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0
    (See file LICENSE.CDDL provided in LibRaw distribution archive for details).
 
  */
 
 #ifndef LIBRAW_CONST_H
 #define LIBRAW_CONST_H
 
 #define CanonID_EOS_M50            0x00000412ULL
 #define CanonID_EOS_M6_Mark_II     0x00000811ULL
 #define CanonID_EOS_M200           0x00000812ULL
 #define CanonID_EOS_D30            0x01140000ULL
 #define CanonID_EOS_D60            0x01668000ULL
 #define CanonID_EOS_M3             0x03740000ULL
 #define CanonID_EOS_M10            0x03840000ULL
 #define CanonID_EOS_M5             0x03940000ULL
 #define CanonID_EOS_M100           0x03980000ULL
 #define CanonID_EOS_M6             0x04070000ULL
 #define CanonID_EOS_1D            (0x80000000ULL + 0x001ULL)
 #define CanonID_EOS_1Ds           (0x80000000ULL + 0x167ULL)
 #define CanonID_EOS_10D           (0x80000000ULL + 0x168ULL)
 #define CanonID_EOS_1D_Mark_III   (0x80000000ULL + 0x169ULL)
 #define CanonID_EOS_300D          (0x80000000ULL + 0x170ULL)
 #define CanonID_EOS_1D_Mark_II    (0x80000000ULL + 0x174ULL)
 #define CanonID_EOS_20D           (0x80000000ULL + 0x175ULL)
 #define CanonID_EOS_450D          (0x80000000ULL + 0x176ULL)
 #define CanonID_EOS_1Ds_Mark_II   (0x80000000ULL + 0x188ULL)
 #define CanonID_EOS_350D          (0x80000000ULL + 0x189ULL)
 #define CanonID_EOS_40D           (0x80000000ULL + 0x190ULL)
 #define CanonID_EOS_5D            (0x80000000ULL + 0x213ULL)
 #define CanonID_EOS_1Ds_Mark_III  (0x80000000ULL + 0x215ULL)
 #define CanonID_EOS_5D_Mark_II    (0x80000000ULL + 0x218ULL)
 #define CanonID_EOS_1D_Mark_II_N  (0x80000000ULL + 0x232ULL)
 #define CanonID_EOS_30D           (0x80000000ULL + 0x234ULL)
 #define CanonID_EOS_400D          (0x80000000ULL + 0x236ULL)
 #define CanonID_EOS_7D            (0x80000000ULL + 0x250ULL)
 #define CanonID_EOS_500D          (0x80000000ULL + 0x252ULL)
 #define CanonID_EOS_1000D         (0x80000000ULL + 0x254ULL)
 #define CanonID_EOS_50D           (0x80000000ULL + 0x261ULL)
 #define CanonID_EOS_1D_X          (0x80000000ULL + 0x269ULL)
 #define CanonID_EOS_550D          (0x80000000ULL + 0x270ULL)
 #define CanonID_EOS_1D_Mark_IV    (0x80000000ULL + 0x281ULL)
 #define CanonID_EOS_5D_Mark_III   (0x80000000ULL + 0x285ULL)
 #define CanonID_EOS_600D          (0x80000000ULL + 0x286ULL)
 #define CanonID_EOS_60D           (0x80000000ULL + 0x287ULL)
 #define CanonID_EOS_1100D         (0x80000000ULL + 0x288ULL)
 #define CanonID_EOS_7D_Mark_II    (0x80000000ULL + 0x289ULL)
 #define CanonID_EOS_650D          (0x80000000ULL + 0x301ULL)
 #define CanonID_EOS_6D            (0x80000000ULL + 0x302ULL)
 #define CanonID_EOS_1D_C          (0x80000000ULL + 0x324ULL)
 #define CanonID_EOS_70D           (0x80000000ULL + 0x325ULL)
 #define CanonID_EOS_700D          (0x80000000ULL + 0x326ULL)
 #define CanonID_EOS_1200D         (0x80000000ULL + 0x327ULL)
 #define CanonID_EOS_1D_X_Mark_II  (0x80000000ULL + 0x328ULL)
 #define CanonID_EOS_M             (0x80000000ULL + 0x331ULL)
 #define CanonID_EOS_100D          (0x80000000ULL + 0x346ULL)
 #define CanonID_EOS_760D          (0x80000000ULL + 0x347ULL)
 #define CanonID_EOS_5D_Mark_IV    (0x80000000ULL + 0x349ULL)
 #define CanonID_EOS_80D           (0x80000000ULL + 0x350ULL)
 #define CanonID_EOS_M2            (0x80000000ULL + 0x355ULL)
 #define CanonID_EOS_5DS           (0x80000000ULL + 0x382ULL)
 #define CanonID_EOS_750D          (0x80000000ULL + 0x393ULL)
 #define CanonID_EOS_5DS_R         (0x80000000ULL + 0x401ULL)
 #define CanonID_EOS_1300D         (0x80000000ULL + 0x404ULL)
 #define CanonID_EOS_800D          (0x80000000ULL + 0x405ULL)
 #define CanonID_EOS_6D_Mark_II    (0x80000000ULL + 0x406ULL)
 #define CanonID_EOS_77D           (0x80000000ULL + 0x408ULL)
 #define CanonID_EOS_200D          (0x80000000ULL + 0x417ULL)
 #define CanonID_EOS_R5            (0x80000000ULL + 0x421ULL)
 #define CanonID_EOS_3000D         (0x80000000ULL + 0x422ULL)
 #define CanonID_EOS_R             (0x80000000ULL + 0x424ULL)
 #define CanonID_EOS_1D_X_Mark_III (0x80000000ULL + 0x428ULL)
 #define CanonID_EOS_1500D         (0x80000000ULL + 0x432ULL)
 #define CanonID_EOS_RP            (0x80000000ULL + 0x433ULL)
 #define CanonID_EOS_850D          (0x80000000ULL + 0x435ULL)
 #define CanonID_EOS_250D          (0x80000000ULL + 0x436ULL)
 #define CanonID_EOS_90D           (0x80000000ULL + 0x437ULL)
 #define CanonID_EOS_R3            (0x80000000ULL + 0x450ULL)
 #define CanonID_EOS_R6            (0x80000000ULL + 0x453ULL)
 #define CanonID_EOS_M50_Mark_II   (0x80000000ULL + 0x468ULL)
 
 // CanonID_EOS_D2000C after Canon's TIFF2CR2 convertor:
 #define CanonID_EOS_D2000C        (0x80000000ULL + 0x520ULL)
 // CanonID_EOS_D6000C id after Canon's TIFF2CR2 convertor:
 #define CanonID_EOS_D6000C        (0x80000000ULL + 0x560ULL)
 
 #define OlyID_str2hex(str) ((unsigned long long)str[0]<<32 | str[1]<<24 | str[2]<<16 | str[3]<<8 | str[4])
 #define OlyID_E_20            OlyID_str2hex("D4029")
 #define OlyID_E_1             OlyID_str2hex("D4040")
 #define OlyID_E_300           OlyID_str2hex("D4041")
 #define OlyID_SP_550UZ        OlyID_str2hex("D4321")
 #define OlyID_SP_510UZ        OlyID_str2hex("D4322")
 #define OlyID_SP_560UZ        OlyID_str2hex("D4355")
 #define OlyID_SP_570UZ        OlyID_str2hex("D4364")
 #define OlyID_SP_565UZ        OlyID_str2hex("D4374")
 #define OlyID_XZ_1            OlyID_str2hex("D4401")
 #define OlyID_XZ_2            OlyID_str2hex("D4531")
 #define OlyID_XZ_10           OlyID_str2hex("D4546")
 #define OlyID_STYLUS_1        OlyID_str2hex("D4572")
 #define OlyID_SH_2            OlyID_str2hex("D4585")
 #define OlyID_TG_4            OlyID_str2hex("D4586")
 #define OlyID_TG_5            OlyID_str2hex("D4593")
 #define OlyID_TG_6            OlyID_str2hex("D4603")
 #define OlyID_E_10            OlyID_str2hex("D4842")
 #define OlyID_AIR_A01         OlyID_str2hex("K0055")
 #define OlyID_NORMA           OlyID_str2hex("NORMA")
 #define OlyID_E_330           OlyID_str2hex("S0003")
 #define OlyID_E_500           OlyID_str2hex("S0004")
 #define OlyID_E_400           OlyID_str2hex("S0009")
 #define OlyID_E_510           OlyID_str2hex("S0010")
 #define OlyID_E_3             OlyID_str2hex("S0011")
 #define OlyID_E_410           OlyID_str2hex("S0013")
 #define OlyID_E_420           OlyID_str2hex("S0016")
 #define OlyID_E_30            OlyID_str2hex("S0017")
 #define OlyID_E_520           OlyID_str2hex("S0018")
 #define OlyID_E_P1            OlyID_str2hex("S0019")
 #define OlyID_E_620           OlyID_str2hex("S0023")
 #define OlyID_E_P2            OlyID_str2hex("S0026")
 #define OlyID_E_PL1           OlyID_str2hex("S0027")
 #define OlyID_E_450           OlyID_str2hex("S0029")
 #define OlyID_E_600           OlyID_str2hex("S0030")
 #define OlyID_E_P3            OlyID_str2hex("S0032")
 #define OlyID_E_5             OlyID_str2hex("S0033")
 #define OlyID_E_PL2           OlyID_str2hex("S0034")
 #define OlyID_E_M5            OlyID_str2hex("S0036")
 #define OlyID_E_PL3           OlyID_str2hex("S0038")
 #define OlyID_E_PM1           OlyID_str2hex("S0039")
 #define OlyID_E_PL1s          OlyID_str2hex("S0040")
 #define OlyID_E_PL5           OlyID_str2hex("S0042")
 #define OlyID_E_PM2           OlyID_str2hex("S0043")
 #define OlyID_E_P5            OlyID_str2hex("S0044")
 #define OlyID_E_PL6           OlyID_str2hex("S0045")
 #define OlyID_E_PL7           OlyID_str2hex("S0046")
 #define OlyID_E_M1            OlyID_str2hex("S0047")
 #define OlyID_E_M10           OlyID_str2hex("S0051")
 #define OlyID_E_M5_Mark_II    OlyID_str2hex("S0052")
 #define OlyID_E_M10_Mark_II   OlyID_str2hex("S0059")
 #define OlyID_PEN_F           OlyID_str2hex("S0061")
 #define OlyID_E_PL8           OlyID_str2hex("S0065")
 #define OlyID_E_M1_Mark_II    OlyID_str2hex("S0067")
 #define OlyID_E_M10_Mark_III  OlyID_str2hex("S0068")
 #define OlyID_E_PL9           OlyID_str2hex("S0076")
 #define OlyID_E_M1X           OlyID_str2hex("S0080")
 #define OlyID_E_PL10          OlyID_str2hex("S0085")
 #define OlyID_E_M10_Mark_IV   OlyID_str2hex("S0088")
 #define OlyID_E_M5_Mark_III   OlyID_str2hex("S0089")
 #define OlyID_E_M1_Mark_III   OlyID_str2hex("S0092")
 #define OlyID_E_P7            OlyID_str2hex("S0093")
+#define OlyID_OM_1            OlyID_str2hex("S0095")
 #define OlyID_C_3030Z         OlyID_str2hex("SX351")
 #define OlyID_C_5050Z         OlyID_str2hex("SX558")
 #define OlyID_C_350Z          OlyID_str2hex("SX751")
 #define OlyID_C_740UZ         OlyID_str2hex("SX754")
 #define OlyID_C_5060WZ        OlyID_str2hex("SX756")
 #define OlyID_C_8080WZ        OlyID_str2hex("SX757")
 #define OlyID_C_770UZ         OlyID_str2hex("SX772")
 #define OlyID_C_7070WZ        OlyID_str2hex("SX851")
 #define OlyID_C_7000Z         OlyID_str2hex("SX852")
 #define OlyID_SP_500UZ        OlyID_str2hex("SX853")
 #define OlyID_SP_310          OlyID_str2hex("SX854")
 #define OlyID_SP_350          OlyID_str2hex("SX855")
 #define OlyID_SP_320          OlyID_str2hex("SX873")
 
 #define PentaxID_Optio_S      0x1296cULL
 #define PentaxID_Optio_S_V101 0x12971ULL
 #define PentaxID_staristD     0x12994ULL
 #define PentaxID_Optio_33WR   0x129c6ULL
 #define PentaxID_Optio_S4     0x129d5ULL
 #define PentaxID_Optio_750Z   0x12a66ULL
 #define PentaxID_staristDS    0x12aa2ULL
 #define PentaxID_staristDL    0x12b1aULL
 #define PentaxID_staristDS2   0x12b60ULL
 #define PentaxID_GX_1S        0x12b62ULL
 #define PentaxID_staristDL2   0x12b7eULL
 #define PentaxID_GX_1L        0x12b80ULL
 #define PentaxID_K100D        0x12b9cULL
 #define PentaxID_K110D        0x12b9dULL
 #define PentaxID_K100D_Super  0x12ba2ULL
 #define PentaxID_K10D         0x12c1eULL
 #define PentaxID_GX10         0x12c20ULL
 #define PentaxID_K20D         0x12cd2ULL
 #define PentaxID_GX20         0x12cd4ULL
 #define PentaxID_K200D        0x12cfaULL
 #define PentaxID_K2000        0x12d72ULL
 #define PentaxID_K_m          0x12d73ULL
 #define PentaxID_K_7          0x12db8ULL
 #define PentaxID_K_x          0x12dfeULL
 #define PentaxID_645D         0x12e08ULL
 #define PentaxID_K_r          0x12e6cULL
 #define PentaxID_K_5          0x12e76ULL
 #define PentaxID_Q            0x12ee4ULL
 #define PentaxID_K_01         0x12ef8ULL
 #define PentaxID_K_30         0x12f52ULL
 #define PentaxID_Q10          0x12f66ULL
 #define PentaxID_K_5_II       0x12f70ULL
 #define PentaxID_K_5_II_s     0x12f71ULL
 #define PentaxID_Q7           0x12f7aULL
 #define PentaxID_MX_1         0x12f84ULL
 #define PentaxID_K_50         0x12fb6ULL
 #define PentaxID_K_3          0x12fc0ULL
 #define PentaxID_K_500        0x12fcaULL
 #define PentaxID_645Z         0x13010ULL
 #define PentaxID_K_S1         0x1301aULL
 #define PentaxID_K_S2         0x13024ULL
 #define PentaxID_Q_S1         0x1302eULL
 #define PentaxID_K_1          0x13092ULL
 #define PentaxID_K_3_II       0x1309cULL
 #define PentaxID_GR_III       0x1320eULL
 #define PentaxID_K_70         0x13222ULL
 #define PentaxID_KP           0x1322cULL
 #define PentaxID_K_1_Mark_II  0x13240ULL
 #define PentaxID_K_3_III      0x13254ULL
 #define PentaxID_GR_IIIx      0x1329aULL
 
 #define SonyID_DSC_R1           0x002ULL
 #define SonyID_DSLR_A100        0x100ULL
 #define SonyID_DSLR_A900        0x101ULL
 #define SonyID_DSLR_A700        0x102ULL
 #define SonyID_DSLR_A200        0x103ULL
 #define SonyID_DSLR_A350        0x104ULL
 #define SonyID_DSLR_A300        0x105ULL
 #define SonyID_DSLR_A900_APSC   0x106ULL
 #define SonyID_DSLR_A380        0x107ULL
 #define SonyID_DSLR_A330        0x108ULL
 #define SonyID_DSLR_A230        0x109ULL
 #define SonyID_DSLR_A290        0x10aULL
 #define SonyID_DSLR_A850        0x10dULL
 #define SonyID_DSLR_A850_APSC   0x10eULL
 #define SonyID_DSLR_A550        0x111ULL
 #define SonyID_DSLR_A500        0x112ULL
 #define SonyID_DSLR_A450        0x113ULL
 #define SonyID_NEX_5            0x116ULL
 #define SonyID_NEX_3            0x117ULL
 #define SonyID_SLT_A33          0x118ULL
 #define SonyID_SLT_A55          0x119ULL
 #define SonyID_DSLR_A560        0x11aULL
 #define SonyID_DSLR_A580        0x11bULL
 #define SonyID_NEX_C3           0x11cULL
 #define SonyID_SLT_A35          0x11dULL
 #define SonyID_SLT_A65          0x11eULL
 #define SonyID_SLT_A77          0x11fULL
 #define SonyID_NEX_5N           0x120ULL
 #define SonyID_NEX_7            0x121ULL
 #define SonyID_NEX_VG20         0x122ULL
 #define SonyID_SLT_A37          0x123ULL
 #define SonyID_SLT_A57          0x124ULL
 #define SonyID_NEX_F3           0x125ULL
 #define SonyID_SLT_A99          0x126ULL
 #define SonyID_NEX_6            0x127ULL
 #define SonyID_NEX_5R           0x128ULL
 #define SonyID_DSC_RX100        0x129ULL
 #define SonyID_DSC_RX1          0x12aULL
 #define SonyID_NEX_VG900        0x12bULL
 #define SonyID_NEX_VG30         0x12cULL
 #define SonyID_ILCE_3000        0x12eULL
 #define SonyID_SLT_A58          0x12fULL
 #define SonyID_NEX_3N           0x131ULL
 #define SonyID_ILCE_7           0x132ULL
 #define SonyID_NEX_5T           0x133ULL
 #define SonyID_DSC_RX100M2      0x134ULL
 #define SonyID_DSC_RX10         0x135ULL
 #define SonyID_DSC_RX1R         0x136ULL
 #define SonyID_ILCE_7R          0x137ULL
 #define SonyID_ILCE_6000        0x138ULL
 #define SonyID_ILCE_5000        0x139ULL
 #define SonyID_DSC_RX100M3      0x13dULL
 #define SonyID_ILCE_7S          0x13eULL
 #define SonyID_ILCA_77M2        0x13fULL
 #define SonyID_ILCE_5100        0x153ULL
 #define SonyID_ILCE_7M2         0x154ULL
 #define SonyID_DSC_RX100M4      0x155ULL
 #define SonyID_DSC_RX10M2       0x156ULL
 #define SonyID_DSC_RX1RM2       0x158ULL
 #define SonyID_ILCE_QX1         0x15aULL
 #define SonyID_ILCE_7RM2        0x15bULL
 #define SonyID_ILCE_7SM2        0x15eULL
 #define SonyID_ILCA_68          0x161ULL
 #define SonyID_ILCA_99M2        0x162ULL
 #define SonyID_DSC_RX10M3       0x163ULL
 #define SonyID_DSC_RX100M5      0x164ULL
 #define SonyID_ILCE_6300        0x165ULL
 #define SonyID_ILCE_9           0x166ULL
 #define SonyID_ILCE_6500        0x168ULL
 #define SonyID_ILCE_7RM3        0x16aULL
 #define SonyID_ILCE_7M3         0x16bULL
 #define SonyID_DSC_RX0          0x16cULL
 #define SonyID_DSC_RX10M4       0x16dULL
 #define SonyID_DSC_RX100M6      0x16eULL
 #define SonyID_DSC_HX99         0x16fULL
 #define SonyID_DSC_RX100M5A     0x171ULL
 #define SonyID_ILCE_6400        0x173ULL
 #define SonyID_DSC_RX0M2        0x174ULL
 #define SonyID_DSC_RX100M7      0x176ULL
 #define SonyID_ILCE_7RM4        0x177ULL
 #define SonyID_ILCE_9M2         0x178ULL
 #define SonyID_ILCE_6600        0x17aULL
 #define SonyID_ILCE_6100        0x17bULL
 #define SonyID_ZV_1             0x17cULL
 #define SonyID_ILCE_7C          0x17dULL
 #define SonyID_ZV_E10           0x17eULL
 #define SonyID_ILCE_7SM3        0x17fULL
 #define SonyID_ILCE_1           0x180ULL
 #define SonyID_ILME_FX3         0x181ULL
 #define SonyID_ILCE_7RM3A       0x182ULL
 #define SonyID_ILCE_7RM4A       0x183ULL
 #endif
diff --git a/libraw/libraw_const.h b/libraw/libraw_const.h
index fd6ba741..81d42b68 100644
--- a/libraw/libraw_const.h
+++ b/libraw/libraw_const.h
@@ -285,83 +285,85 @@ enum LibRaw_colorspace {
 enum LibRaw_cameramaker_index
 {
   LIBRAW_CAMERAMAKER_Unknown = 0,
   LIBRAW_CAMERAMAKER_Agfa,
   LIBRAW_CAMERAMAKER_Alcatel,
   LIBRAW_CAMERAMAKER_Apple,
   LIBRAW_CAMERAMAKER_Aptina,
   LIBRAW_CAMERAMAKER_AVT,
   LIBRAW_CAMERAMAKER_Baumer,
   LIBRAW_CAMERAMAKER_Broadcom,
   LIBRAW_CAMERAMAKER_Canon,
   LIBRAW_CAMERAMAKER_Casio,
   LIBRAW_CAMERAMAKER_CINE,
   LIBRAW_CAMERAMAKER_Clauss,
   LIBRAW_CAMERAMAKER_Contax,
   LIBRAW_CAMERAMAKER_Creative,
   LIBRAW_CAMERAMAKER_DJI,
   LIBRAW_CAMERAMAKER_DXO,
   LIBRAW_CAMERAMAKER_Epson,
   LIBRAW_CAMERAMAKER_Foculus,
   LIBRAW_CAMERAMAKER_Fujifilm,
   LIBRAW_CAMERAMAKER_Generic,
   LIBRAW_CAMERAMAKER_Gione,
   LIBRAW_CAMERAMAKER_GITUP,
   LIBRAW_CAMERAMAKER_Google,
   LIBRAW_CAMERAMAKER_GoPro,
   LIBRAW_CAMERAMAKER_Hasselblad,
   LIBRAW_CAMERAMAKER_HTC,
   LIBRAW_CAMERAMAKER_I_Mobile,
   LIBRAW_CAMERAMAKER_Imacon,
   LIBRAW_CAMERAMAKER_JK_Imaging,
   LIBRAW_CAMERAMAKER_Kodak,
   LIBRAW_CAMERAMAKER_Konica,
   LIBRAW_CAMERAMAKER_Leaf,
   LIBRAW_CAMERAMAKER_Leica,
   LIBRAW_CAMERAMAKER_Lenovo,
   LIBRAW_CAMERAMAKER_LG,
   LIBRAW_CAMERAMAKER_Logitech,
   LIBRAW_CAMERAMAKER_Mamiya,
   LIBRAW_CAMERAMAKER_Matrix,
   LIBRAW_CAMERAMAKER_Meizu,
   LIBRAW_CAMERAMAKER_Micron,
   LIBRAW_CAMERAMAKER_Minolta,
   LIBRAW_CAMERAMAKER_Motorola,
   LIBRAW_CAMERAMAKER_NGM,
   LIBRAW_CAMERAMAKER_Nikon,
   LIBRAW_CAMERAMAKER_Nokia,
   LIBRAW_CAMERAMAKER_Olympus,
   LIBRAW_CAMERAMAKER_OmniVison,
   LIBRAW_CAMERAMAKER_Panasonic,
   LIBRAW_CAMERAMAKER_Parrot,
   LIBRAW_CAMERAMAKER_Pentax,
   LIBRAW_CAMERAMAKER_PhaseOne,
   LIBRAW_CAMERAMAKER_PhotoControl,
   LIBRAW_CAMERAMAKER_Photron,
   LIBRAW_CAMERAMAKER_Pixelink,
   LIBRAW_CAMERAMAKER_Polaroid,
   LIBRAW_CAMERAMAKER_RED,
   LIBRAW_CAMERAMAKER_Ricoh,
   LIBRAW_CAMERAMAKER_Rollei,
   LIBRAW_CAMERAMAKER_RoverShot,
   LIBRAW_CAMERAMAKER_Samsung,
   LIBRAW_CAMERAMAKER_Sigma,
   LIBRAW_CAMERAMAKER_Sinar,
   LIBRAW_CAMERAMAKER_SMaL,
   LIBRAW_CAMERAMAKER_Sony,
   LIBRAW_CAMERAMAKER_ST_Micro,
   LIBRAW_CAMERAMAKER_THL,
   LIBRAW_CAMERAMAKER_VLUU,
   LIBRAW_CAMERAMAKER_Xiaomi,
   LIBRAW_CAMERAMAKER_XIAOYI,
   LIBRAW_CAMERAMAKER_YI,
   LIBRAW_CAMERAMAKER_Yuneec,
   LIBRAW_CAMERAMAKER_Zeiss,
   LIBRAW_CAMERAMAKER_OnePlus,
   LIBRAW_CAMERAMAKER_ISG,
   LIBRAW_CAMERAMAKER_VIVO,
   LIBRAW_CAMERAMAKER_HMD_Global,
   LIBRAW_CAMERAMAKER_HUAWEI,
   LIBRAW_CAMERAMAKER_RaspberryPi,
+  LIBRAW_CAMERAMAKER_OmDigital,
+
   // Insert additional indexes here
   LIBRAW_CAMERAMAKER_TheLastOne
 };
diff --git a/src/metadata/identify.cpp b/src/metadata/identify.cpp
index a3d9b021..f17bb229 100644
--- a/src/metadata/identify.cpp
+++ b/src/metadata/identify.cpp
@@ -22,86 +22,87 @@
 // clang-format on
 static const struct
 {
     const int CorpId;
     const char *CorpName;
 } CorpTable[] = {
     {LIBRAW_CAMERAMAKER_Agfa,           "AgfaPhoto"},
     {LIBRAW_CAMERAMAKER_Apple,          "Apple"},
     {LIBRAW_CAMERAMAKER_Broadcom,       "Broadcom"},
     {LIBRAW_CAMERAMAKER_Canon,          "Canon"},
     {LIBRAW_CAMERAMAKER_Casio,          "Casio"},
     {LIBRAW_CAMERAMAKER_CINE,           "CINE"},
     {LIBRAW_CAMERAMAKER_Epson,          "Epson"},
     {LIBRAW_CAMERAMAKER_Fujifilm,       "Fujifilm"},
     {LIBRAW_CAMERAMAKER_Mamiya,         "Mamiya"},
     {LIBRAW_CAMERAMAKER_Motorola,       "Motorola"},
     {LIBRAW_CAMERAMAKER_Kodak,          "Kodak"},
     {LIBRAW_CAMERAMAKER_Konica,         "Konica"},
     {LIBRAW_CAMERAMAKER_Minolta,        "Minolta"},
     {LIBRAW_CAMERAMAKER_Leica,          "Leica"},
     {LIBRAW_CAMERAMAKER_Nikon,          "Nikon"},
     {LIBRAW_CAMERAMAKER_Nokia,          "Nokia"},
     {LIBRAW_CAMERAMAKER_Olympus,        "Olympus"},
-    {LIBRAW_CAMERAMAKER_Ricoh,          "Ricoh"},
+    {LIBRAW_CAMERAMAKER_OmDigital,		"OM Digital"},
+    {LIBRAW_CAMERAMAKER_Ricoh,			"Ricoh"},
     {LIBRAW_CAMERAMAKER_Pentax,         "Pentax"},
     {LIBRAW_CAMERAMAKER_PhaseOne,       "Phase One"},
     {LIBRAW_CAMERAMAKER_PhaseOne,       "PhaseOne"},
     {LIBRAW_CAMERAMAKER_Samsung,        "Samsung"},
     {LIBRAW_CAMERAMAKER_Sigma,          "Sigma"},
     {LIBRAW_CAMERAMAKER_Sinar,          "Sinar"},
     {LIBRAW_CAMERAMAKER_Sony,           "Sony"},
     {LIBRAW_CAMERAMAKER_YI,             "YI"},
     // add corp. names below
     {LIBRAW_CAMERAMAKER_Alcatel,        "Alcatel"},
     {LIBRAW_CAMERAMAKER_Aptina,         "Aptina"},
     {LIBRAW_CAMERAMAKER_AVT,            "AVT"},
     {LIBRAW_CAMERAMAKER_Baumer,         "Baumer"},
     {LIBRAW_CAMERAMAKER_Clauss,         "Clauss"},
     {LIBRAW_CAMERAMAKER_Contax,         "Contax"},
     {LIBRAW_CAMERAMAKER_Creative,       "Creative"},
     {LIBRAW_CAMERAMAKER_DJI,            "DJI"},
     {LIBRAW_CAMERAMAKER_Foculus,        "Foculus"},
     {LIBRAW_CAMERAMAKER_Generic,        "Generic"},
     {LIBRAW_CAMERAMAKER_Gione,          "Gione"},
     {LIBRAW_CAMERAMAKER_GITUP,          "GITUP"},
     {LIBRAW_CAMERAMAKER_Hasselblad,     "Hasselblad"},
     {LIBRAW_CAMERAMAKER_HTC,            "HTC"},
     {LIBRAW_CAMERAMAKER_I_Mobile,       "I_Mobile"},
     {LIBRAW_CAMERAMAKER_Imacon,         "Imacon"},
     {LIBRAW_CAMERAMAKER_ISG,            "ISG"},
     {LIBRAW_CAMERAMAKER_JK_Imaging,     "JK Imaging"}, // Kodak
     {LIBRAW_CAMERAMAKER_Leaf,           "Leaf"},
     {LIBRAW_CAMERAMAKER_Lenovo,         "Lenovo"},
     {LIBRAW_CAMERAMAKER_LG,             "LG"},
     {LIBRAW_CAMERAMAKER_Logitech,       "Logitech"},
     {LIBRAW_CAMERAMAKER_Matrix,         "Matrix"},
     {LIBRAW_CAMERAMAKER_Meizu,          "Meizu"},
     {LIBRAW_CAMERAMAKER_Micron,         "Micron"},
     {LIBRAW_CAMERAMAKER_NGM,            "NGM"},
     {LIBRAW_CAMERAMAKER_OmniVison,      "OmniVison"},
     {LIBRAW_CAMERAMAKER_Panasonic,      "Panasonic"},
     {LIBRAW_CAMERAMAKER_Photron,        "Photron"},
     {LIBRAW_CAMERAMAKER_Pixelink,       "Pixelink"},
     {LIBRAW_CAMERAMAKER_Polaroid,       "Polaroid"},
     {LIBRAW_CAMERAMAKER_Rollei,         "Rollei"},
     {LIBRAW_CAMERAMAKER_RoverShot,      "RoverShot"},
     {LIBRAW_CAMERAMAKER_SMaL,           "SMaL"},
     {LIBRAW_CAMERAMAKER_ST_Micro,       "ST Micro"},
     {LIBRAW_CAMERAMAKER_THL,            "THL"},
     {LIBRAW_CAMERAMAKER_Xiaomi,         "Xiaomi"},
     {LIBRAW_CAMERAMAKER_XIAOYI,         "Xiayi"},
     {LIBRAW_CAMERAMAKER_Yuneec,         "Yuneec"},
     {LIBRAW_CAMERAMAKER_DXO,            "DxO"},
     {LIBRAW_CAMERAMAKER_RED,            "Red"},
     {LIBRAW_CAMERAMAKER_PhotoControl,   "Photo Control"},
     {LIBRAW_CAMERAMAKER_Google,         "Google"},
     {LIBRAW_CAMERAMAKER_GoPro,          "GoPro"},
     {LIBRAW_CAMERAMAKER_Parrot,         "Parrot"},
     {LIBRAW_CAMERAMAKER_Zeiss,          "Zeiss"},
     {LIBRAW_CAMERAMAKER_OnePlus,        "OnePlus"},
     {LIBRAW_CAMERAMAKER_VIVO,           "Vivo"},
     {LIBRAW_CAMERAMAKER_HMD_Global,     "HMD Global"},
     {LIBRAW_CAMERAMAKER_HUAWEI,         "Huawei"},
     {LIBRAW_CAMERAMAKER_RaspberryPi,    "RaspberryPi"},
 };
 // clang-format on
@@ -1811,1319 +1812,1322 @@ void LibRaw::identify_finetune_by_filesize(int fsize)
 void LibRaw::identify_finetune_dcr(char head[64], int fsize, int flen)
 {
 	static const short pana[][6] = {
 		// raw_width, raw_height, left_margin, top_margin, width_increment,
 		// height_increment
 		{3130, 1743, 4, 0, -6, 0},      /* 00 */
 		{3130, 2055, 4, 0, -6, 0},      /* 01 */
 		{3130, 2319, 4, 0, -6, 0},      /* 02 DMC-FZ8 */
 		{3170, 2103, 18, 0, -42, 20},   /* 03 */
 		{3170, 2367, 18, 13, -42, -21}, /* 04 */
 		{3177, 2367, 0, 0, -1, 0},      /* 05 DMC-L1 */
 		{3304, 2458, 0, 0, -1, 0},      /* 06 DMC-FZ30 */
 		{3330, 2463, 9, 0, -5, 0},      /* 07 DMC-FZ18 */
 		{3330, 2479, 9, 0, -17, 4},     /* 08 */
 		{3370, 1899, 15, 0, -44, 20},   /* 09 */
 		{3370, 2235, 15, 0, -44, 20},   /* 10 */
 		{3370, 2511, 15, 10, -44, -21}, /* 11 */
 		{3690, 2751, 3, 0, -8, -3},     /* 12 DMC-FZ50 */
 		{3710, 2751, 0, 0, -3, 0},      /* 13 DMC-L10 */
 		{3724, 2450, 0, 0, 0, -2},      /* 14 */
 		{3770, 2487, 17, 0, -44, 19},   /* 15 */
 		{3770, 2799, 17, 15, -44, -19}, /* 16 */
 		{3880, 2170, 6, 0, -6, 0},      /* 17 DMC-LX1 */
 		{4060, 3018, 0, 0, 0, -2},      /* 18 DMC-FZ35, DMC-FZ38 */
 		{4290, 2391, 3, 0, -8, -1},     /* 19 DMC-LX2 */
 		{4330, 2439, 17, 15, -44, -19}, /* 20 "D-LUX 3" */
 		{4508, 2962, 0, 0, -3, -4},     /* 21 */
 		{4508, 3330, 0, 0, -3, -6},     /* 22 */
 		{10480, 7794, 0, 0, -2, 0},     /* 23: G9 in high-res */
 	};
 	int i,c;
 	struct jhead jh;
 
 	if (makeIs(LIBRAW_CAMERAMAKER_Canon) 
         && ( !tiff_flip || unique_id == CanonID_EOS_40D)
         && imCanon.MakernotesFlip)
 	{
 		tiff_flip = imCanon.MakernotesFlip;
 	}
 
 	else if (makeIs(LIBRAW_CAMERAMAKER_Nikon))
 	{
 		if (!load_raw)
 			load_raw = &LibRaw::packed_load_raw;
 		if (model[0] == 'E') // Nikon E8800, E8700, E8400, E5700, E5400, E5000,
 							 // others are diag hacks?
 			load_flags |= !data_offset << 2 | 2;
 	}
 	/* Set parameters based on camera name (for non-DNG files). */
 
 	/* Always 512 for arw2_load_raw */
 	else if (makeIs(LIBRAW_CAMERAMAKER_Sony) &&
 		(raw_width > 3888) && !black && !cblack[0])
 	{
 		black = (load_raw == &LibRaw::sony_arw2_load_raw)
 			? 512
 			: (128 << (tiff_bps - 12));
 	}
 
 	if (is_foveon) {
 		if (height * 2 < width)
 			pixel_aspect = 0.5;
 		if (height > width)
 			pixel_aspect = 2;
 		filters = 0;
 
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Pentax)) {
 		if ((unique_id == PentaxID_K_1) ||
 			(unique_id == PentaxID_K_1_Mark_II)) {
 			top_margin = 18;
 			height = raw_height - top_margin;
 			if (raw_width == 7392) {
 				left_margin = 6;
 				width = 7376;
 			}
 
 		}
 		else if (unique_id == PentaxID_Optio_S_V101) { // (fsize == 3178560)
 			cam_mul[0] *= 4;
 			cam_mul[2] *= 4;
 
 		}
 		else if (unique_id == PentaxID_Optio_33WR) { // (fsize == 4775936)
 			flip = 1;
 			filters = 0x16161616;
 
 		}
 		else if (unique_id == PentaxID_staristD) {
 			load_raw = &LibRaw::unpacked_load_raw;
 			/* data_error = -1; */ /* No way to know why data_error was raised in dcraw.c, looks not needed esp. for unpacked_load_raw */
 		}
 		else if (unique_id == PentaxID_staristDS) {
 			height -= 2;
 		}
 
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Canon)) {
 		if (tiff_bps == 15) { // Canon sRAW
 			if (width == 3344)
 				width = 3272;
 			else if (width == 3872)
 				width = 3866;
 
 			if (height > width) {
 				SWAP(height, width);
 				SWAP(raw_height, raw_width);
 			}
 			if (width == 7200 &&
 				height == 3888) { // Canon EOS 5DS (R);
 				raw_width = width = 6480;
 				raw_height = height = 4320;
 			}
 			filters = 0;
 			tiff_samples = colors = 3;
 			load_raw = &LibRaw::canon_sraw_load_raw;
 		}
 
 		if (!strcmp(normalized_model, "PowerShot 600")) {
 			height = 613;
 			width = 854;
 			raw_width = 896;
 			colors = 4;
 			filters = 0xe1e4e1e4;
 			load_raw = &LibRaw::canon_600_load_raw;
 
 		}
 		else if (!strcmp(normalized_model, "PowerShot A5") ||
 			!strcmp(normalized_model, "PowerShot A5 Zoom")) {
 			height = 773;
 			width = 960;
 			raw_width = 992;
 			pixel_aspect = 256 / 235.0;
 			filters = 0x1e4e1e4e;
 			goto canon_a5;
 
 		}
 		else if (!strcmp(normalized_model, "PowerShot A50")) {
 			height = 968;
 			width = 1290;
 			raw_width = 1320;
 			filters = 0x1b4e4b1e;
 			goto canon_a5;
 
 		}
 		else if (!strcmp(normalized_model, "PowerShot Pro70")) {
 			height = 1024;
 			width = 1552;
 			filters = 0x1e4b4e1b;
 		canon_a5:
 			colors = 4;
 			tiff_bps = 10;
 			load_raw = &LibRaw::packed_load_raw;
 			load_flags = 40;
 
 		}
 		else if (!strcmp(normalized_model, "PowerShot Pro90 IS") ||
 			!strcmp(normalized_model, "PowerShot G1")) {
 			colors = 4;
 			filters = 0xb4b4b4b4;
 
 		}
 		else if (!strcmp(normalized_model, "PowerShot A610")) { // chdk hack
 			if (canon_s2is()) {
 				strcpy(model + 10, "S2 IS");
 				strcpy(normalized_model + 10, "S2 IS");
 			}
 
 		}
 		else if (!strcmp(normalized_model, "PowerShot SX220 HS")) { // chdk hack
 			mask[1][3] = -4;
 			top_margin = 16;
 			left_margin = 92;
 
 		}
 		else if (!strcmp(normalized_model, "PowerShot S120")) { // chdk hack
 			raw_width = 4192;
 			raw_height = 3062;
 			width = 4022;
 			height = 3016;
 			mask[0][0] = top_margin = 31;
 			mask[0][2] = top_margin + height;
 			left_margin = 120;
 			mask[0][1] = 23;
 			mask[0][3] = 72;
 
 		}
 		else if (!strcmp(normalized_model, "PowerShot G16")) {
 			mask[0][0] = 0;
 			mask[0][2] = 80;
 			mask[0][1] = 0;
 			mask[0][3] = 16;
 			top_margin = 29;
 			left_margin = 120;
 			width = raw_width - left_margin - 48;
 			height = raw_height - top_margin - 14;
 
 		}
 		else if (!strcmp(normalized_model, "PowerShot SX50 HS")) {
 			top_margin = 17;
 		}
 
 	}
 
 	else if (makeIs(LIBRAW_CAMERAMAKER_Nikon)) {
 		if (!strcmp(model, "D1"))
 		{
 			imgdata.other.analogbalance[0] = cam_mul[0];
 			imgdata.other.analogbalance[2] = cam_mul[2];
 			imgdata.other.analogbalance[1] = imgdata.other.analogbalance[3] =
 				cam_mul[1];
 			cam_mul[0] = cam_mul[1] = cam_mul[2] = 1.0f;
 		}
 
 		else if (!strcmp(model, "D1X"))
 		{
 			width -= 4;
 			pixel_aspect = 0.5;
 		}
 		else if (!strcmp(model, "D40X") ||
 			!strcmp(model, "D60") ||
 			!strcmp(model, "D80") ||
 			!strcmp(model, "D3000"))
 		{
 			height -= 3;
 			width -= 4;
 		}
 		else if (!strcmp(model, "D3") ||
 			!strcmp(model, "D3S") ||
 			!strcmp(model, "D700"))
 		{
 			width -= 4;
 			left_margin = 2;
 		}
 		else if (!strcmp(model, "D3100"))
 		{
 			width -= 28;
 			left_margin = 6;
 		}
 		else if (!strcmp(model, "D5000") ||
 			!strcmp(model, "D90"))
 		{
 			width -= 42;
 		}
 		else if (!strcmp(model, "D5100") ||
 			!strcmp(model, "D7000") ||
 			!strcmp(model, "COOLPIX A"))
 		{
 			width -= 44;
 		}
 		else if (!strcmp(model, "D3200") ||
 			!strcmp(model, "D600") ||
 			!strcmp(model, "D610") ||
 			!strncmp(model, "D800", 4)) // Nikons: D800, D800E
 		{
 			width -= 46;
 		}
 		else if (!strcmp(model, "D4") ||
 			!strcmp(model, "Df"))
 		{
 			width -= 52;
 			left_margin = 2;
 		}
 		else if (!strcmp(model, "D500"))
 		{
 			// Empty - to avoid width-1 below
 		}
 		else if (!strncmp(model, "D40", 3) ||
 			!strncmp(model, "D50", 3) ||
 			!strncmp(model, "D70", 3))
 		{
 			width--;
 		}
 		else if (!strcmp(model, "D100"))
 		{
 			if (load_flags) // compressed NEF
 				raw_width = (width += 3) + 3;
 		}
 		else if (!strcmp(model, "D200"))
 		{
 			left_margin = 1;
 			width -= 4;
 			filters = 0x94949494;
 		}
 		else if (!strncmp(model, "D2H", 3)) // Nikons: D2H, D2Hs
 		{
 			left_margin = 6;
 			width -= 14;
 		}
 		else if (!strncmp(model, "D2X", 3)) // Nikons: D2X, D2Xs
 		{
 			if (width == 3264) // in-camera Hi-speed crop: On
 				width -= 32;
 			else
 				width -= 8;
 		}
 		else if (!strncmp(model, "D300", 4)) // Nikons: D300, D300s
 		{
 			width -= 32;
 		}
 		else if (raw_width == 4032) // Nikon "COOLPIX P7700", "COOLPIX P7800",
 									// "COOLPIX P330", "COOLPIX P340"
 		{
 			if (!strcmp(normalized_model, "COOLPIX P7700"))
 			{
 				maximum = 65504;
 				load_flags = 0;
 			}
 			else if (!strcmp(normalized_model, "COOLPIX P7800"))
 			{
 				maximum = 65504;
 				load_flags = 0;
 			}
 			else if (!strcmp(model, "COOLPIX P340"))
 			{
 				load_flags = 0;
 			}
 		}
 		else if (!strncmp(model, "COOLPIX P", 9) &&
 			raw_width != 4032) // Nikon "COOLPIX P1000", "COOLPIX P6000",
 							   // "COOLPIX P7000", "COOLPIX P7100"
 		{
 			load_flags = 24;
 			filters = 0x94949494;
 			/* the following 'if' is most probably obsolete, because we now read black
 			 * level from metadata */
 			if ((model[9] == '7') && /* P7000, P7100 */
 				((iso_speed >= 400) || (iso_speed == 0)) &&
 				!strstr(software, "V1.2")) /* v. 1.2 seen for P7000 only */
 				black = 255;
 		}
 		else if (!strncmp(model, "COOLPIX B700", 12))
 		{
 			load_flags = 24;
 		}
 		else if (!strncmp(model, "1 ",
 			2)) // Nikons: "1 AW1", "1 J1", "1 J2", "1 J3", "1 J4",
 				// "1 J5", "1 S1", "1 S2", "1 V1", "1 V2", "1 V3"
 		{
 			height -= 2;
 		}
 		else if (fsize == 1581060) // hack Nikon 1mpix: E900
 		{
 			simple_coeff(3);
 			pre_mul[0] = 1.2085;
 			pre_mul[1] = 1.0943;
 			pre_mul[3] = 1.1103;
 		}
 		else if ((fsize == 4771840) &&  // hack Nikon 3mpix: E880, E885, E990
 			strcmp(model, "E995")) // but not E995
 		{
 			filters = 0xb4b4b4b4;
 			simple_coeff(3);
 			pre_mul[0] = 1.196;
 			pre_mul[1] = 1.246;
 			pre_mul[2] = 1.018;
 		}
 		else if ((fsize == 4775936) && // hack Nikon 3mpix: E3100, E3200, E3500
 			(atoi(model + 1) < 3700)) // but not E3700;
 		{
 			filters = 0x49494949;
 		}
 		else if (fsize == 5869568) // hack Nikon 4mpix: E4300;
 		{
 			load_flags = 6;
 		}
 		else if (!strcmp(model, "E2500"))
 		{
 			height -= 2;
 			load_flags = 6;
 			colors = 4;
 			filters = 0x4b4b4b4b;
 		}
 	}
 
 	else if (makeIs(LIBRAW_CAMERAMAKER_Olympus)) {
 		if (OlyID == OlyID_C_740UZ) { // (fsize == 4775936)
 			i = find_green(12, 32, 1188864, 3576832);
 			c = find_green(12, 32, 2383920, 2387016);
 			if (abs(i) < abs(c)) {
 				SWAP(i, c);
 				load_flags = 24;
 			}
 			if (i < 0)
 				filters = 0x61616161;
 		}
 		else if (OlyID == OlyID_C_770UZ) {
 			height = 1718;
 			width = 2304;
 			filters = 0x16161616;
 			load_raw = &LibRaw::packed_load_raw;
 			load_flags = 30;
 		}
 		else {
 			height += height & 1;
 			if (exif_cfa)
 				filters = exif_cfa;
 
 			if (width == 4100) // Olympus E-PL2, E-PL1, E-P2, E-P1, E-620, E-600, E-5, E-30;
 				width -= 4;
 
 			if (width == 4080) // Olympus E-PM1, E-PL3, E-P3;
 				width -= 24;
 
-			if (width == 10400) // Olympus PEN-F, E-M1-II, E-M1-III, E-M1X
+			if (width == 10400) // Olympus PEN-F, E-M1-II, E-M1-III, E-M1X, OM-1
 				width -= 12;
 
 			if (width == 8200) // E-M1-III in 50Mp mode, E-M1X
 				width -= 30;
 
+			if (width == 8180) // OM-1 in 50Mp
+              width -= 10;
+
 			if (width == 9280) { // Olympus E-M5 Mark II;
 				width -= 6;
 				height -= 6;
 			}
 
 			if (load_raw == &LibRaw::unpacked_load_raw) {
 				load_flags = 4;
         if (imOly.ValidBits == 10) load_flags += 2;
 			}
       tiff_bps = imOly.ValidBits;
 
 			if ((OlyID == OlyID_E_300) ||
 				(OlyID == OlyID_E_500)) {
 				width -= 20;
 				if (load_raw == &LibRaw::unpacked_load_raw) {
 					maximum = 0xfc3;
 					memset(cblack, 0, sizeof cblack);
 				}
 			}
 			else if (OlyID == OlyID_STYLUS_1) {
 				width -= 16;
 				maximum = 0xfff;
 
 			}
 			else if (OlyID == OlyID_E_330) {
 				width -= 30;
 				if (load_raw == &LibRaw::unpacked_load_raw)
 					maximum = 0xf79;
 
 			}
 			else if (OlyID == OlyID_SP_550UZ) {
 				thumb_length = flen - (thumb_offset = 0xa39800);
 				thumb_height = 480;
 				thumb_width = 640;
 
 			}
 			else if (OlyID == OlyID_TG_4) {
 				width -= 16;
 
 			}
 			else if ((OlyID == OlyID_TG_5) ||
 				(OlyID == OlyID_TG_6)) {
 				width -= 26;
 			}
 		}
 
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_RoverShot) &&
 		(fsize == 6291456)) { // RoverShot 3320AF
 		fseek(ifp, 0x300000, SEEK_SET);
 		if ((order = guess_byte_order(0x10000)) == 0x4d4d)
 		{
 			height -= (top_margin = 16);
 			width -= (left_margin = 28);
 			maximum = 0xf5c0;
 			strcpy(make, "ISG");
 			maker_index = LIBRAW_CAMERAMAKER_ISG;
 			model[0] = 0;
 		}
 
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Fujifilm)) {
     if (!imFuji.RAFDataGeneration && (raw_width == 2944)) // S2Pro
 		{
 			height = 2144;
 			width = 2880;
 			flip = 6;
 		}
 		else if (load_raw != &LibRaw::packed_load_raw &&
 		         strncmp(model, "X-", 2)              &&
 			       filters >= 1000) // Bayer and not an X-model
 			maximum = (is_raw == 2 && shot_select) ? 0x2f00 : 0x3e00;
 
     if (!FujiCropMode && imFuji.RAFDataGeneration && (imFuji.RAFDataGeneration != 4096))
     {
       width  = imFuji.RAFData_ImageSizeTable[0];
       height = imFuji.RAFData_ImageSizeTable[1];
     }
 		else if (FujiCropMode == 1) // FF crop on GFX
 		{
 			width = raw_width;
 			height = raw_height;
 		}
         // Do we need set height = raw_height for CropMode == 2 for all cameras??
 		else if (FujiCropMode == 4) // electronic shutter, high speed mode (1.25x crop)
 		{
 			height = raw_height;
 		}
 
 		top_margin = (raw_height >= height) ? (raw_height - height) >> 2 << 1 : 0;
 		left_margin = (raw_width >= width) ? (raw_width - width) >> 2 << 1 : 0;
 
     if (imFuji.RAFDataGeneration && (imFuji.RAFDataGeneration != 4096)) {
       switch (raw_width) {
       case 2944:                // X-S1, X10, XF1
         filters = 0x16161616;
         break;
       case 4096:                // X20, X30, XQ1, XQ2
       case 5120:                // X-Pro1, X-E1, X-A1, X-A2, X-M1
       case 6048:                // lossless compressed X100F, X-T2, X-T20, X-Pro2, X-H1, X-E3
       case 6160:                // uncompressed (unpacked) X100F, X-T2, X-T20, X-Pro2, X-H1, X-E3
         left_margin = 0;
         break;
       case 4992:                // X-E2S, X-E2, X-T10, X-T1, X100S, X100T, X70
         left_margin = 4;
         break;
       case 6384:                // X-T3, X-T4, X100V, X-S10, X-T30, X-Pro3
         top_margin = 0;
         switch (FujiCropMode) {
         case 0:        // no crop
 				  left_margin = 0;
 				  top_margin = 6;
 				  width = 6246;
 				  height = 4170;
 				  break;
 				case 2:        // sports finder mode
 				  left_margin = 624;
 				  width = 5004;
 				  height = raw_height;
 				  break;
 				case 4:        // electronic shutter, high speed mode (1.25x crop)
           left_margin = 624;
 				  width = 5004;
 				  break;
         }
         break;
       case 6912:                // GFX 50S, GFX 50R; FF crop
       case 9216:                // GFX 50S, GFX 50R; no crop
 			  left_margin = 0;
 			  top_margin = 0;
         break;
       case 8472:                // GFX 50S II
         left_margin = 0;
 			  top_margin  = 0;
 			  width = raw_width - 192;
         break;
       case 9696:                // GFX 100; FF crop
       case 11808:               // GFX 100; no crop
 			  left_margin = 0;
 			  width = raw_width - 146;
 			  height = raw_height - (top_margin = 2);
 			  if (tiff_bps == 16)
 				  maximum = 0xffff;
       default:
       /* insert model name-based width/height/margins/etc. assignments */
         break;
       }
 
     } else if (!imFuji.RAFDataGeneration) {
       switch (raw_width) {
       case 2304:                // S5100
         height -= (top_margin = 6);
         break;
       case 3328:                // F550EXR, F600EXR, F770EXR, F800EXR, F900EXR,
                                 // HS20EXR, HS30EXR, HS33EXR, HS50EXR
         if ((width = raw_width - 66))
           left_margin = 34;
         if (imgdata.sizes.raw_inset_crops[0].cleft == 8) // HS50EXR, F900EXR
         {
 			    left_margin = 0;
 			    width += 2;
 			    filters = 0x16161616;
         }
         break;
       case 3664:                // "HS10 HS11"
         filters = 0x16161616;
         break;
       case 5504:                // DBP for GX680 aka DX-2000
 
 //         7712 2752 -> 5504 3856
 //         width = 688;
 //         height = 30848;
 //         raw_width = 688;
 //         raw_height = 30848;
 
         left_margin = 32; // imgdata.sizes.raw_inset_crops[0].cleft
         top_margin = 8;
         width = raw_width - 2*left_margin;
         height = raw_height - 2*top_margin;
 
         load_raw = &LibRaw::unpacked_load_raw_FujiDBP;
         //  maximum = 0x0fff;
         filters = 0x16161616;
         load_flags = 0;
         flip = 6;
         break;
       default:
       /* insert model name-based width/height/margins/etc. assignments */
         break;
       }
     }
 		if (fuji_layout)
 			raw_width *= is_raw;
 		if (filters == 9)
 			FORC(36)
 			((char *)xtrans)[c] =
 			xtrans_abs[(c / 6 + top_margin) % 6][(c + left_margin) % 6];
 	}
 
 	else if (makeIs(LIBRAW_CAMERAMAKER_Konica)) {
 		if (!strcmp(model, "KD-400Z")) {
 			height = 1711; // 1712
 			width = 2312;
 			raw_width = 2336;
 			goto konica_400z;
 		}
 		else if (!strcmp(model, "KD-510Z")) {
 			goto konica_510z;
 		}
 
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Minolta)) {
 		if (fsize == 5869568) { // hack "DiMAGE Z2"
 			load_flags = 30;
 		}
 
 		if (imSony.prd_StorageMethod == LIBRAW_MINOLTA_UNPACKED) {
 			load_raw = &LibRaw::unpacked_load_raw;
 		} else if (imSony.prd_StorageMethod == LIBRAW_MINOLTA_PACKED) {
 			load_raw = &LibRaw::packed_load_raw;
       } else if (!load_raw && (maximum = 0xfff)) {
 			load_raw = &LibRaw::unpacked_load_raw;
 		}
 
       if (imSony.prd_BayerPattern == LIBRAW_MINOLTA_G2BRG1) {
 			filters = 0x49494949;
       } else if (imSony.prd_BayerPattern == LIBRAW_MINOLTA_RGGB) {
 			filters = 0x94949494;
       }
 
       if (imSony.prd_Active_bps && imSony.prd_Total_bps) {
 			tiff_bps = imSony.prd_Active_bps;
       }
 
 		if (!strncmp(model, "DiMAGE G", 8)) // hack "DiMAGE G400", "DiMAGE G500",
                                                // "DiMAGE G530", "DiMAGE G600"
 		{
 			if (model[8] == '4') // DiMAGE G400
 			{
 				height = 1716;
 				width = 2304;
 			}
 			else if (model[8] == '5') // DiMAGE G500 / G530
 			{
 			konica_510z:
 				height = 1956;
 				width = 2607;
 				raw_width = 2624;
 			}
 			else if (model[8] == '6') // DiMAGE G600
 			{
 				height = 2136;
 				width = 2848;
 			}
 			data_offset += 14;
 			filters = 0x61616161;
 		konica_400z:
 			load_raw = &LibRaw::unpacked_load_raw;
 			maximum = 0x3df;
 			order = 0x4d4d;
 		}
 
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Samsung)) {
 		if (raw_width == 4704) // Samsung NX100, NX10, NX11,
 		{
 			height -= top_margin = 8;
 			width -= 2 * (left_margin = 8);
 			load_flags = 32;
 		}
 		else if (!strcmp(model, "NX3000")) // Samsung NX3000; raw_width: 5600
 		{
 			top_margin = 38;
 			left_margin = 92;
 			width = 5456;
 			height = 3634;
 			filters = 0x61616161;
 			colors = 3;
 		}
 		else if (raw_height == 3714) // Samsung NX2000, NX300M, NX300, NX30,
 		                             // "NX U" (aka:
 		                             //         "EK-GN100", "EK-GN110", "EK-GN120",
 		                             //         "EK-KN120", "Galaxy NX")
 		{
 			height -= top_margin = 18;
 			left_margin = raw_width - (width = 5536);
 			if (raw_width != 5600)
 				left_margin = top_margin = 0;
 			filters = 0x61616161;
 			colors = 3;
 		}
 		else if (raw_width == 5632) // Samsung NX1000, NX200, NX20, NX210
 		{
 			order = 0x4949;
 			height = 3694;
 			top_margin = 2;
 			width = 5574 - (left_margin = 32 + tiff_bps);
 			if (tiff_bps == 12)
 				load_flags = 80;
 		}
 		else if (raw_width == 5664) // Samsung "NX mini"
 		{
 			height -= top_margin = 17;
 			left_margin = 96;
 			width = 5544;
 			filters = 0x49494949;
 		}
 		else if (raw_width == 6496) // Samsung NX1, NX500
 		{
 			filters = 0x61616161;
 			if (!black && !cblack[0] && !cblack[1] && !cblack[2] && !cblack[3])
 				black = 1 << (tiff_bps - 7);
 		}
 		else if (!strcmp(normalized_model, "EX1")) // Samsung EX1; raw_width: 3688
 		{
 			order = 0x4949;
 			height -= 20;
 			top_margin = 2;
 			if ((width -= 6) > 3682)
 			{
 				height -= 10;
 				width -= 46;
 				top_margin = 8;
 			}
 		}
 		else if (!strcmp(normalized_model, "WB2000")) // Samsung WB2000; raw_width: 3728
 		{
 			order = 0x4949;
 			height -= 3;
 			top_margin = 2;
 			if ((width -= 10) > 3718)
 			{
 				height -= 28;
 				width -= 56;
 				top_margin = 8;
 			}
 		}
 		else if (!strcmp(model, "WB550")) // Samsung WB550; raw_width: 4000
 		{
 			order = 0x4949;
 		}
 		else if (!strcmp(model, "EX2F")) // Samsung EX2F; raw_width: 4176
 		{
 			height = 3030;
 			width = 4040;
 			top_margin = 15;
 			left_margin = 24;
 			order = 0x4949;
 			filters = 0x49494949;
 			load_raw = &LibRaw::unpacked_load_raw;
 		}
 	}
 
 	else if (makeIs(LIBRAW_CAMERAMAKER_ST_Micro) && !strcmp(model, "STV680 VGA"))
 	{
 		black = 16;
 	}
 	else if (!strcmp(model, "N95"))
 	{
 		height = raw_height - (top_margin = 2);
 	}
 	else if (!strcmp(model, "640x480"))
 	{
 		gamma_curve(0.45, 4.5, 1, 255);
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Hasselblad))
 	{
 		if (load_raw == &LibRaw::lossless_jpeg_load_raw)
 			load_raw = &LibRaw::hasselblad_load_raw;
 
 		if ((imHassy.SensorCode == 4) && !strncmp(model, "V96C", 4)) { // Hasselblad V96C
 			strcpy(model, "V96C");
 			strcpy(normalized_model, model);
 			height -= (top_margin = 6);
 			width -= (left_margin = 3) + 7;
 			filters = 0x61616161;
 
 		}
 		else if ((imHassy.SensorCode == 9) && imHassy.uncropped) { // various Hasselblad '-39'
 			height = 5444;
 			width = 7248;
 			top_margin = 4;
 			left_margin = 7;
 			filters = 0x61616161;
 
 		}
 		else if ((imHassy.SensorCode == 13) && imHassy.uncropped) { // Hasselblad H4D-40, H5D-40
 			height -= 84;
 			width -= 82;
 			top_margin = 4;
 			left_margin = 41;
 			filters = 0x61616161;
 
 		}
 		else if ((imHassy.SensorCode == 11) && imHassy.uncropped) { // Hasselblad H5D-50
 			height -= 84;
 			width -= 82;
 			top_margin = 4;
 			left_margin = 41;
 			filters = 0x61616161;
 
 		}
 		else if ((imHassy.SensorCode == 15) &&
 			!imHassy.SensorSubCode && // Hasselblad H5D-50c
 			imHassy.uncropped) {
 			left_margin = 52;
 			top_margin = 100;
 			width = 8272;
 			height = 6200;
 			black = 256;
 
 		}
 		else if ((imHassy.SensorCode == 15) &&
 			(imHassy.SensorSubCode == 2) && // various Hasselblad X1D cameras
 			imHassy.uncropped) {
 			top_margin = 96;
 			height -= 96;
 			left_margin = 48;
 			width -= 106;
 			maximum = 0xffff;
 			tiff_bps = 16;
 
 		}
 		else if ((imHassy.SensorCode == 12) && imHassy.uncropped) { // Hasselblad H4D-60
 			if (black > 500) { // (imHassy.format == LIBRAW_HF_FFF)
 				top_margin = 12;
 				left_margin = 44;
 				width = 8956;
 				height = 6708;
 				memset(cblack, 0, sizeof(cblack));
 				black = 512;
 			}
 			else { // (imHassy.format == LIBRAW_HF_3FR)
 				top_margin = 8;
 				left_margin = 40;
 				width = 8964;
 				height = 6716;
 				black += load_flags = 256;
 				maximum = 0x8101;
 			}
 
 		}
 		else if ((imHassy.SensorCode == 17) && imHassy.uncropped) { // Hasselblad H6D-100c, A6D-100c
 			left_margin = 64;
 			width = 11608;
 			top_margin = 108;
 			height = raw_height - top_margin;
 		}
 
 		if (tiff_samples > 1)
 		{
 			is_raw = tiff_samples + 1;
 			if (!shot_select && !half_size)
 				filters = 0;
 		}
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Sinar))
 	{
 		if (!load_raw)
 			load_raw = &LibRaw::unpacked_load_raw;
 		if (is_raw > 1 && !shot_select)
 			filters = 0;
 		maximum = 0x3fff;
 	}
 
 	if (load_raw == &LibRaw::sinar_4shot_load_raw)
 	{
 		if (is_raw > 1 && !shot_select)
 			filters = 0;
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Leaf))
 	{
 		maximum = 0x3fff;
 		fseek(ifp, data_offset, SEEK_SET);
 		if (ljpeg_start(&jh, 1) && jh.bits == 15)
 			maximum = 0x1fff;
 		if (tiff_samples > 1)
 			filters = 0;
 		if (tiff_samples > 1 || tile_length < raw_height)
 		{
 			load_raw = &LibRaw::leaf_hdr_load_raw;
 			raw_width = tile_width;
 		}
 		if ((width | height) == 2048)
 		{
 			if (tiff_samples == 1)
 			{
 				filters = 1;
 				strcpy(cdesc, "RBTG");
 				strcpy(model, "CatchLight");
 				strcpy(normalized_model, model);
 				top_margin = 8;
 				left_margin = 18;
 				height = 2032;
 				width = 2016;
 			}
 			else
 			{
 				strcpy(model, "DCB2");
 				strcpy(normalized_model, model);
 				top_margin = 10;
 				left_margin = 16;
 				height = 2028;
 				width = 2022;
 			}
 		}
 		else if (width + height == 3144 + 2060)
 		{
 			if (!model[0])
 			{
 				strcpy(model, "Cantare");
 				strcpy(normalized_model, model);
 			}
 			if (width > height)
 			{
 				top_margin = 6;
 				left_margin = 32;
 				height = 2048;
 				width = 3072;
 				filters = 0x61616161;
 			}
 			else
 			{
 				left_margin = 6;
 				top_margin = 32;
 				width = 2048;
 				height = 3072;
 				filters = 0x16161616;
 			}
 			if (!cam_mul[0] || model[0] == 'V')
 				filters = 0;
 			else
 				is_raw = tiff_samples;
 		}
 		else if (width == 2116) // Leaf "Valeo 6"
 		{
 			strcpy(model, "Valeo 6");
 			strcpy(normalized_model, model);
 			height -= 2 * (top_margin = 30);
 			width -= 2 * (left_margin = 55);
 			filters = 0x49494949;
 		}
 		else if (width == 3171) // Leaf "Valeo 6"
 		{
 			strcpy(model, "Valeo 6");
 			strcpy(normalized_model, model);
 			height -= 2 * (top_margin = 24);
 			width -= 2 * (left_margin = 24);
 			filters = 0x16161616;
 		}
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Panasonic))
 	{
 		if (raw_width > 0 &&
 			((flen - data_offset) / (raw_width * 8 / 7) == raw_height))
 			load_raw = &LibRaw::panasonic_load_raw;
 		if (!load_raw)
 		{
 			load_raw = &LibRaw::unpacked_load_raw;
 			load_flags = 4;
 		}
 		zero_is_bad = 1;
 		if ((height += 12) > raw_height)
 			height = raw_height;
 		for (i = 0; i < int(sizeof pana / sizeof *pana); i++)
 			if (raw_width == pana[i][0] && raw_height == pana[i][1])
 			{
 				left_margin = pana[i][2];
 				top_margin = pana[i][3];
 				width += pana[i][4];
 				height += pana[i][5];
 			}
 		if (!tiff_bps && pana_bpp >= 12 && pana_bpp <= 14)
 			tiff_bps = pana_bpp;
 
         if (!strcmp(model, "DC-LX100M2") && raw_height == 3568 && raw_width == 4816 && filters == 3)
             filters = 4;
 
 		filters = 0x01010101U *
 			(uchar) "\x94\x61\x49\x16"[((filters - 1) ^ (left_margin & 1) ^
 			(top_margin << 1)) &
 			3];
 
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Contax) &&
 		!strcmp(model, "N Digital")) {
 		height = 2047;
 		width = 3072;
 		filters = 0x61616161;
 		data_offset = 0x1a00;
 		load_raw = &LibRaw::packed_load_raw;
 
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Sony)) {
 		if (!strcmp(model, "DSC-F828")) { // Sony DSC-F828
 			width = 3288;
 			left_margin = 5;
 			mask[1][3] = -17;
 			data_offset = 862144;
 			load_raw = &LibRaw::sony_load_raw;
 			filters = 0x9c9c9c9c;
 			colors = 4;
 			strcpy(cdesc, "RGBE");
 
 		}
 		else if (!strcmp(model, "DSC-V3")) { // Sony DSC-V3
 			width = 3109;
 			left_margin = 59;
 			mask[0][1] = 9;
 			data_offset = 787392;
 			load_raw = &LibRaw::sony_load_raw;
 
 		}
 		else if (raw_width == 3984) { // Sony DSC-R1;
 			width = 3925;
 			order = 0x4d4d;
 
 		}
 		else if (raw_width == 4288) { // Sony ILCE-7S, ILCE-7SM2, ILCE-7SM3, DSLR-A700, DSLR-A500;
 			width -= 32;
 		}
 		else if (raw_width == 4600) { // Sony DSLR-A290, DSLR-A350, DSLR-A380;
 			if (!strcmp(model, "DSLR-A350"))
 				height -= 4;
 			black = 0;
 
 		}
 		else if (raw_width == 4928) {
 			// Sony DSLR-A580, NEX-C3, SLT-A35, DSC-HX99, SLT-A55,
 			// NEX-5N, SLT-A37, SLT-A57, NEX-F3, NEX-6, NEX-5R, NEX-3N, NEX-5T;
 			if (height < 3280)
 				width -= 8;
 
 		}
 		else if (raw_width == 5504) {
 			// Sony ILCE-3000, SLT-A58, DSC-RX100M3, ILCE-QX1,
 			// DSC-RX10M4, DSC-RX100M6, DSC-RX100, DSC-RX100M2, DSC-RX10,
 			// ILCE-5000, DSC-RX100M4, DSC-RX10M2, DSC-RX10M3,
 			// DSC-RX100M5, DSC-RX100M5A;
 			width -= height > 3664 ? 8 : 32;
 
 		}
 		else if (raw_width == 6048) {
 			// Sony SLT-A65, DSC-RX1, SLT-A77, DSC-RX1, ILCA-77M2,
 			// ILCE-7M3, NEX-7, SLT-A99, ILCE-7, DSC-RX1R, ILCE-6000,
 			// ILCE-5100, ILCE-7M2, ILCA-68, ILCE-6300, ILCE-9,
 			// ILCE-6500, ILCE-6400;
 			width -= 24;
 			if (strstr(normalized_model, "RX1") ||
 				strstr(normalized_model, "A99"))
 				width -= 6;
 
 		}
 		else if (raw_width == 7392) { // Sony ILCE-7R;
 			width -= 30;
 
 		}
 		else if (raw_width == 8000) {
 			// Sony ILCE-7RM2, ILCE-7RM2, ILCE-7RM3, DSC-RX1RM2, ILCA-99M2;
 			width -= 32;
 
 		}
 		else if (raw_width == 9600) { // Sony ILCE-7RM4
 			width -= 32;
 
 		}
         else if(unique_id == SonyID_ILCE_1)
         {
           if (raw_width == 8704 && raw_height == 6144) // ILCE-1 FF@Compressed
           {
             width = 8660;
             height = 5784;
           }
           else if (raw_width == 8672) // FF uncompressed/lossy
           {
             width -= 12;
           }
           else if (raw_width == 6144 && raw_height == 4096) // APSC/Lossless
           {
             width = 5636;
             height = 3768;
           }
           else if (raw_width == 5664) // APS-C/Uncompressed or lossy
           {
               width -= 28;
           }
         }
 		else if (!strcmp(model, "DSLR-A100")) {
 			if (width == 3880) {
 				height--;
 				width = ++raw_width;
 			}
 			else {
 				height -= 4;
 				width -= 4;
 				order = 0x4d4d;
 				load_flags = 2;
 			}
 			filters = 0x61616161;
 		}
 	}
 
 	else if (!strcmp(model, "PIXL")) {
 		height -= top_margin = 4;
 		width -= left_margin = 32;
 		gamma_curve(0, 7, 1, 255);
 
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Kodak)) {
 
 		if (!strncasecmp(model, "EasyShare", 9)) {
 			data_offset = data_offset < 0x15000 ? 0x15000 : 0x17000;
 			load_raw = &LibRaw::packed_load_raw;
 
 		}
 		else if (!strcmp(model, "C603") ||
 			!strcmp(model, "C330") ||
 			!strcmp(model, "12MP")) {
 			order = 0x4949;
 			if (filters && data_offset) {
 				fseek(ifp, data_offset < 4096 ? 168 : 5252, SEEK_SET);
 				read_shorts(curve, 256);
 			}
 			else
 				gamma_curve(0, 3.875, 1, 255);
 
 			load_raw = filters ? &LibRaw::eight_bit_load_raw
 				: strcmp(model, "C330") ? &LibRaw::kodak_c603_load_raw
 				: &LibRaw::kodak_c330_load_raw;
 			load_flags = tiff_bps > 16;
 			tiff_bps = 8;
 
 		}
 		else {
 			if (!strncmp(model, "NC2000", 6) ||
 				!strncmp(model, "EOSDCS", 6) ||
 				!strncmp(model, "DCS4", 4)) {
 				width -= 4;
 				left_margin = 2;
 
 			}
 			else if (!strcmp(model, "DCS660M")) {
 				black = 214;
 
 			}
 			else if (!strcmp(model, "EOS D2000C")) {
 				filters = 0x61616161;
 				if (!black) black = curve[200];
 			}
 
 			if (filters == UINT_MAX) filters = 0x61616161;
 
 			if (!strcmp(model + 4, "20X"))
 				strcpy(cdesc, "MYCY");
 			if (!strcmp(model, "DC25")) {
 				data_offset = 15424;
 			}
 
 			if (!strncmp(model, "DC2", 3)) {
 				raw_height = 2 + (height = 242);
 				if (!strncmp(model, "DC290", 5))
 					iso_speed = 100;
 				if (!strncmp(model, "DC280", 5))
 					iso_speed = 70;
 				if (flen < 100000) {
 					raw_width = 256;
 					width = 249;
 					pixel_aspect = (4.0 * height) / (3.0 * width);
 				}
 				else {
 					raw_width = 512;
 					width = 501;
 					pixel_aspect = (493.0 * height) / (373.0 * width);
 				}
 				top_margin = left_margin = 1;
 				colors = 4;
 				filters = 0x8d8d8d8d;
 				simple_coeff(1);
 				pre_mul[1] = 1.179;
 				pre_mul[2] = 1.209;
 				pre_mul[3] = 1.036;
 				load_raw = &LibRaw::eight_bit_load_raw;
 			}
 			else if (!strcmp(model, "DC40")) {
 				height = 512;
 				width = 768;
 				data_offset = 1152;
 				load_raw = &LibRaw::kodak_radc_load_raw;
 				tiff_bps = 12;
 				FORC4 cam_mul[c] = 1.0f;
 
 			}
 			else if (!strcmp(model, "DC50")) {
 				height = 512;
 				width = 768;
 				iso_speed = 84;
 				data_offset = 19712;
 				load_raw = &LibRaw::kodak_radc_load_raw;
 				FORC4 cam_mul[c] = 1.0f;
 
 			}
 			else if (!strcmp(model, "DC120")) {
 				raw_height = height = 976;
 				raw_width = width = 848;
 				iso_speed = 160;
 				pixel_aspect = height / 0.75 / width;
 				load_raw = tiff_compress == 7 ? &LibRaw::kodak_jpeg_load_raw
 					: &LibRaw::kodak_dc120_load_raw;
 
 			}
 			else if (!strcmp(model, "DCS200")) {
 				thumb_height = 128;
 				thumb_width = 192;
 				thumb_offset = 6144;
 				thumb_misc = 360;
 				iso_speed = 140;
 				write_thumb = &LibRaw::layer_thumb;
 				black = 17;
 			}
 		}
 
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Logitech) &&
 		!strcmp(model, "Fotoman Pixtura")) {
 		height = 512;
 		width = 768;
 		data_offset = 3632;
 		load_raw = &LibRaw::kodak_radc_load_raw;
 		filters = 0x61616161;
 		simple_coeff(2);
 
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Apple) &&
 		!strncmp(model, "QuickTake", 9)) {
 		if (head[5]) {
 			strcpy(model + 10, "200");
 			strcpy(normalized_model, model);
 		}
 		fseek(ifp, 544, SEEK_SET);
 		height = get2();
 		width = get2();
 		data_offset = (get4(), get2()) == 30 ? 738 : 736;
 		if (height > width) {
 			SWAP(height, width);
 			fseek(ifp, data_offset - 6, SEEK_SET);
 			flip = ~get2() & 3 ? 5 : 6;
 		}
 		filters = 0x61616161;
 
 	}
 	else if (makeIs(LIBRAW_CAMERAMAKER_Rollei) &&
 		!load_raw) {
 		switch (raw_width) {
 		case 1316: // Rollei d530flex
 			height = 1030;
 			width = 1300;
 			top_margin = 1;
 			left_margin = 6;
 			break;
 		case 2568:
 			height = 1960;
 			width = 2560;
 			top_margin = 2;
 			left_margin = 8;
 		}
 		filters = 0x16161616;
 		load_raw = &LibRaw::rollei_load_raw;
 
 	}
 	else if (!strcmp(model, "GRAS-50S5C")) {
 		height = 2048;
 		width = 2440;
 		load_raw = &LibRaw::unpacked_load_raw;
 		data_offset = 0;
 		filters = 0x49494949;
 		order = 0x4949;
 		maximum = 0xfffC;
 
 	}
 	else if (!strcmp(model, "BB-500CL")) {
 		height = 2058;
 		width = 2448;
 		load_raw = &LibRaw::unpacked_load_raw;
 		data_offset = 0;
 		filters = 0x94949494;
 		order = 0x4949;
 		maximum = 0x3fff;
 
 	}
 	else if (!strcmp(model, "BB-500GE")) {
 		height = 2058;
 		width = 2456;
 		load_raw = &LibRaw::unpacked_load_raw;
 		data_offset = 0;
 		filters = 0x94949494;
 		order = 0x4949;
 		maximum = 0x3fff;
 
 	}
 	else if (!strcmp(model, "SVS625CL")) {
 		height = 2050;
 		width = 2448;
 		load_raw = &LibRaw::unpacked_load_raw;
 		data_offset = 0;
 		filters = 0x94949494;
 		order = 0x4949;
 		maximum = 0x0fff;
 	}
 }
diff --git a/src/metadata/makernotes.cpp b/src/metadata/makernotes.cpp
index f4bb2cc7..feb36bd6 100644
--- a/src/metadata/makernotes.cpp
+++ b/src/metadata/makernotes.cpp
@@ -60,273 +60,273 @@ unsigned wb_table1 [] = {
 void LibRaw::parse_makernote_0xc634(int base, int uptag, unsigned dng_writer)
 {
 
   if (metadata_blocks++ > LIBRAW_MAX_METADATA_BLOCKS)
     throw LIBRAW_EXCEPTION_IO_CORRUPT;
 
   if (!strncmp(make, "NIKON", 5))
   {
     parseNikonMakernote(base, uptag, AdobeDNG);
     return;
   }
   else if (!strncasecmp(make, "LEICA", 5))
   {
     parseLeicaMakernote(base, uptag, is_0xc634);
     return;
   }
 
   short morder, sorder = order;
   char buf[10];
   INT64 fsize = ifp->size();
 
   fread(buf, 1, 10, ifp);
 
   if (!strcmp(buf, "EPSON"))
   {
     parseEpsonMakernote(base, uptag, AdobeDNG);
     return;
   }
   else if (!strcmp(buf, "SIGMA"))
   {
     parseSigmaMakernote(base, uptag, AdobeDNG);
     return;
   }
 
   unsigned entries, tag, type, len, save, c;
 
   uchar *CanonCameraInfo;
   unsigned lenCanonCameraInfo = 0;
   unsigned typeCanonCameraInfo = 0;
 
   uchar *table_buf_0x0116;
   ushort table_buf_0x0116_len = 0;
   uchar *table_buf_0x2010;
   ushort table_buf_0x2010_len = 0;
   uchar *table_buf_0x9050;
   ushort table_buf_0x9050_len = 0;
   uchar *table_buf_0x9400;
   ushort table_buf_0x9400_len = 0;
   uchar *table_buf_0x9402;
   ushort table_buf_0x9402_len = 0;
   uchar *table_buf_0x9403;
   ushort table_buf_0x9403_len = 0;
   uchar *table_buf_0x9406;
   ushort table_buf_0x9406_len = 0;
   uchar *table_buf_0x940c;
   ushort table_buf_0x940c_len = 0;
   uchar *table_buf_0x940e;
   ushort table_buf_0x940e_len = 0;
 
-  if (!strcmp(buf, "OLYMPUS") || !strcmp(buf, "PENTAX ") ||
+  if (!strcmp(buf, "OLYMPUS") || !strcmp(buf, "PENTAX ") || !strncmp(buf,"OM SYS",6)||
       (!strncmp(make, "SAMSUNG", 7) && (dng_writer == CameraDNG)))
   {
     base = ftell(ifp) - 10;
     fseek(ifp, -2, SEEK_CUR);
     order = get2();
     if (buf[0] == 'O')
       get2();
     else if (buf[0] == 'P')
       is_PentaxRicohMakernotes = 1;
   }
   else if (is_PentaxRicohMakernotes && (dng_writer == CameraDNG))
   {
     base = ftell(ifp) - 10;
     fseek(ifp, -4, SEEK_CUR);
     order = get2();
   }
   else if (!strncmp(buf, "SONY", 4) ||
            !strcmp(buf, "Panasonic"))
   {
     order = 0x4949;
     fseek(ifp, 2, SEEK_CUR);
   }
   else if (!strncmp(buf, "FUJIFILM", 8))
   {
     base = ftell(ifp) - 10;
     order = 0x4949;
     fseek(ifp, 2, SEEK_CUR);
   }
   else if (!strcmp(buf, "OLYMP") ||
            !strcmp(buf, "Ricoh"))
   {
     fseek(ifp, -2, SEEK_CUR);
   }
   else if (!strcmp(buf, "AOC") || !strcmp(buf, "QVC"))
   {
     fseek(ifp, -4, SEEK_CUR);
   }
   else
   {
     fseek(ifp, -10, SEEK_CUR);
     if ((!strncmp(make, "SAMSUNG", 7) && (dng_writer == AdobeDNG)))
       base = ftell(ifp);
   }
 
   entries = get2();
   if (entries > 1000)
     return;
 
   if (!strncasecmp(make, "SONY", 4) ||
       !strncasecmp(make, "Konica", 6) ||
       !strncasecmp(make, "Minolta", 7) ||
       (!strncasecmp(make, "Hasselblad", 10) &&
        (!strncasecmp(model, "Stellar", 7) ||
         !strncasecmp(model, "Lunar", 5) ||
         !strncasecmp(model, "Lusso", 5) ||
         !strncasecmp(model, "HV", 2))))
     is_Sony = 1;
 
   if (!is_Olympus &&
-      (!strncmp(make, "OLYMPUS", 7) ||
+      (!strncmp(make, "OLYMPUS", 7) || !strncmp(make, "OM Digi", 7) ||
       (!strncasecmp(make, "CLAUSS", 6) && !strncasecmp(model, "piX 5oo", 7)))) {
     is_Olympus = 1;
     OlympusDNG_SubDirOffsetValid =
           strncmp(model, "E-300", 5) && strncmp(model, "E-330", 5) &&
           strncmp(model, "E-400", 5) && strncmp(model, "E-500", 5) &&
           strncmp(model, "E-1", 3);
   }
 
   morder = order;
   while (entries--)
   {
     order = morder;
 
     tiff_get(base, &tag, &type, &len, &save);
 
     INT64 pos = ifp->tell();
     if (len > 8 && pos + len > 2 * fsize)
     {
       fseek(ifp, save, SEEK_SET); // Recover tiff-read position!!
       continue;
     }
     tag |= uptag << 16;
     if (len > 100 * 1024 * 1024)
       goto next; // 100Mb tag? No!
 
     if (!strncmp(make, "Canon", 5))
     {
       if (tag == 0x000d && len < 256000)
       { // camera info
         if (!tagtypeIs(LIBRAW_EXIFTAG_TYPE_LONG))
         {
           CanonCameraInfo = (uchar *)malloc(MAX(16, len));
           fread(CanonCameraInfo, len, 1, ifp);
         }
         else
         {
           CanonCameraInfo = (uchar *)malloc(MAX(16, len * 4));
           fread(CanonCameraInfo, len, 4, ifp);
         }
         lenCanonCameraInfo = len;
         typeCanonCameraInfo = type;
       }
 
       else if (tag == 0x0010) // Canon ModelID
       {
         unique_id = get4();
         setCanonBodyFeatures(unique_id);
         if (lenCanonCameraInfo)
         {
           processCanonCameraInfo(unique_id, CanonCameraInfo, lenCanonCameraInfo,
                                  typeCanonCameraInfo, AdobeDNG);
           free(CanonCameraInfo);
           CanonCameraInfo = 0;
           lenCanonCameraInfo = 0;
         }
       }
 
       else
         parseCanonMakernotes(tag, type, len, AdobeDNG);
     }
 
     else if (!strncmp(make, "FUJI", 4)) {
       parseFujiMakernotes(tag, type, len, AdobeDNG);
 
     } else if (!strncasecmp(make, "Hasselblad", 10) && !is_Sony) {
       if (tag == 0x0011) {
         imHassy.SensorCode = getint(type);
       } else if ((tag == 0x0015) && tagtypeIs(LIBRAW_EXIFTAG_TYPE_ASCII)) {
         stmread (imHassy.SensorUnitConnector, len, ifp);
         for (int i=0; i<(int)len; i++) {
           if(!isalnum(imHassy.SensorUnitConnector[i]) &&
              (imHassy.SensorUnitConnector[i]!=' ')    &&
              (imHassy.SensorUnitConnector[i]!='/')    &&
              (imHassy.SensorUnitConnector[i]!='-')) {
             imHassy.SensorUnitConnector[0] = 0;
             break;
           }
         }
       } else if (tag == 0x0016) {
         imHassy.CoatingCode = getint(type);
       } else if ((tag == 0x002a) &&
                  tagtypeIs(LIBRAW_EXIFTAG_TYPE_SRATIONAL) &&
                  (len == 12) &&
                  imHassy.SensorUnitConnector[0]) {
         FORC4 for (int i = 0; i < 3; i++)
                 imHassy.mnColorMatrix[c][i] = getreal(type);
 
       } else if ((tag == 0x0031) &&
                  imHassy.SensorUnitConnector[0]) {
         imHassy.RecommendedCrop[0] = getint(type);
         imHassy.RecommendedCrop[1] = getint(type);
       }
 
     } else if (is_Olympus) {
 
       if ((tag == 0x2010) || (tag == 0x2020) || (tag == 0x2030) ||
           (tag == 0x2031) || (tag == 0x2040) || (tag == 0x2050) ||
           (tag == 0x3000))
       {
         fseek(ifp, save - 4, SEEK_SET);
         fseek(ifp, base + get4(), SEEK_SET);
         parse_makernote_0xc634(base, tag, dng_writer);
       }
 
       if (!OlympusDNG_SubDirOffsetValid &&
           ((len > 4) ||
            ((tagtypeIs(LIBRAW_EXIFTAG_TYPE_SHORT) ||
             tagtypeIs(LIBRAW_EXIFTAG_TYPE_SSHORT)) && (len > 2)) ||
            ((tagtypeIs(LIBRAW_EXIFTAG_TYPE_LONG) ||
              tagtypeIs(LIBRAW_EXIFTAG_TYPE_SLONG)) && (len > 1)) ||
            tagtypeIs(LIBRAW_EXIFTAG_TYPE_RATIONAL) ||
            (type > LIBRAW_EXIFTAG_TYPE_SLONG))) {
         goto skip_Oly_broken_tags;
       }
       else {
         parseOlympusMakernotes(base, tag, type, len, AdobeDNG);
       }
     skip_Oly_broken_tags:;
     }
 
     else if (!strncmp(make, "PENTAX", 6)  ||
              !strncmp(model, "PENTAX", 6) ||
              is_PentaxRicohMakernotes)
     {
       parsePentaxMakernotes(base, tag, type, len, dng_writer);
     }
     else if (!strncmp(make, "SAMSUNG", 7))
     {
       if (dng_writer == AdobeDNG)
         parseSamsungMakernotes(base, tag, type, len, dng_writer);
       else
         parsePentaxMakernotes(base, tag, type, len, dng_writer);
     }
     else if (is_Sony)
     {
       parseSonyMakernotes(
           base, tag, type, len, AdobeDNG,
           table_buf_0x0116, table_buf_0x0116_len,
           table_buf_0x2010, table_buf_0x2010_len,
           table_buf_0x9050, table_buf_0x9050_len,
           table_buf_0x9400, table_buf_0x9400_len,
           table_buf_0x9402, table_buf_0x9402_len,
           table_buf_0x9403, table_buf_0x9403_len,
           table_buf_0x9406, table_buf_0x9406_len,
           table_buf_0x940c, table_buf_0x940c_len,
           table_buf_0x940e, table_buf_0x940e_len);
     }
   next:
     fseek(ifp, save, SEEK_SET);
   }
 
   order = sorder;
 }
@@ -334,446 +334,448 @@ void LibRaw::parse_makernote_0xc634(int base, int uptag, unsigned dng_writer)
 void LibRaw::parse_makernote(int base, int uptag)
 {
 
   if (metadata_blocks++ > LIBRAW_MAX_METADATA_BLOCKS)
     throw LIBRAW_EXCEPTION_IO_CORRUPT;
 
   if (!strncmp(make, "NIKON", 5))
   {
     parseNikonMakernote(base, uptag, nonDNG);
     return;
   }
   else if (!strncasecmp(make, "LEICA", 5))
   {
     parseLeicaMakernote(base, uptag, is_0x927c);
     return;
   }
 
   if (!strncmp(make, "Nokia", 5))
     return;
 
   char buf[10];
   char another_buf[128];
 
   fseek(ifp, -12, SEEK_CUR);
   fread (another_buf, 1, 12, ifp);
   if (!strncmp(another_buf, "SONY", 4) ||
       !strncmp(another_buf, "VHAB", 4)) { // Sony branded as Hasselblad
     is_Sony = 1;
   }
 
   fread(buf, 1, 10, ifp);
 
   if (!strncmp(buf, "KDK", 3)  || /* these aren't TIFF tables */
       !strncmp(buf, "VER", 3)  ||
       !strncmp(buf, "IIII", 4) ||
       !strncmp(buf, "MMMM", 4))
     return;
 
   if (!strcmp(buf, "EPSON"))
   {
     parseEpsonMakernote(base, uptag, nonDNG);
     return;
   }
   else if (!strcmp(buf, "SIGMA"))
   {
     parseSigmaMakernote(base, uptag, CameraDNG);
     return;
   }
 
 
   unsigned entries, tag, type, len, save, c;
   unsigned i, wb[4] = {0, 0, 0, 0};
   short morder, sorder = order;
 
   uchar *CanonCameraInfo = 0;;
   unsigned lenCanonCameraInfo = 0;
   unsigned typeCanonCameraInfo = 0;
   imCanon.wbi = 0;
 
   uchar *table_buf_0x0116;
   ushort table_buf_0x0116_len = 0;
   uchar *table_buf_0x2010;
   ushort table_buf_0x2010_len = 0;
   uchar *table_buf_0x9050;
   ushort table_buf_0x9050_len = 0;
   uchar *table_buf_0x9400;
   ushort table_buf_0x9400_len = 0;
   uchar *table_buf_0x9402;
   ushort table_buf_0x9402_len = 0;
   uchar *table_buf_0x9403;
   ushort table_buf_0x9403_len = 0;
   uchar *table_buf_0x9406;
   ushort table_buf_0x9406_len = 0;
   uchar *table_buf_0x940c;
   ushort table_buf_0x940c_len = 0;
   uchar *table_buf_0x940e;
   ushort table_buf_0x940e_len = 0;
 
   INT64 fsize = ifp->size();
 
   /*
        The MakerNote might have its own TIFF header (possibly with
        its own byte-order!), or it might just be a table.
   */
 
   if (!strncmp(buf, "KC", 2) || /* Konica KD-400Z, KD-510Z */
       !strncmp(buf, "MLY", 3))  /* Minolta DiMAGE G series */
   {
     order = 0x4d4d;
     while ((i = ftell(ifp)) < data_offset && i < 16384)
     {
       wb[0] = wb[2];
       wb[2] = wb[1];
       wb[1] = wb[3];
       wb[3] = get2();
       if (wb[1] == 256 && wb[3] == 256 && wb[0] > 256 && wb[0] < 640 &&
           wb[2] > 256 && wb[2] < 640)
         FORC4 cam_mul[c] = wb[c];
     }
     goto quit;
   }
 
-  if (!strcmp(buf, "OLYMPUS") ||
+  if (!strcmp(buf, "OLYMPUS") || !strncmp(buf, "OM SYS",6) ||
       !strcmp(buf, "PENTAX "))
   {
     base = ftell(ifp) - 10;
     fseek(ifp, -2, SEEK_CUR);
+	if (buf[1] == 'M')
+		get4();
     order = get2();
     if (buf[0] == 'O')
       get2();
   }
   else if (!strncmp(buf, "SONY", 4) || // DSLR-A100
            !strcmp(buf, "Panasonic")) {
     if (buf[0] == 'S')
       is_Sony = 1;
     goto nf;
   }
   else if (!strncmp(buf, "FUJIFILM", 8))
   {
     base = ftell(ifp) - 10;
   nf:
     order = 0x4949;
     fseek(ifp, 2, SEEK_CUR);
   }
   else if (!strcmp (buf, "OLYMP")    ||
            !strncmp(buf, "LEICA", 5) ||
            !strcmp (buf, "Ricoh"))
   {
     fseek(ifp, -2, SEEK_CUR);
   }
   else if (!strcmp(buf, "AOC") || // Pentax, tribute to Asahi Optical Co.
            !strcmp(buf, "QVC"))   // Casio, from "QV-Camera"
   {
     fseek(ifp, -4, SEEK_CUR);
   }
   else if (!strncmp(buf, "CMT3", 4))
   {
     order = sget2((uchar *)(buf + 4));
     fseek(ifp, 2L, SEEK_CUR);
   }
   else if (libraw_internal_data.unpacker_data.CR3_CTMDtag)
   {
     order = sget2((uchar *)buf);
     fseek(ifp, -2L, SEEK_CUR);
   }
   else
   {
     fseek(ifp, -10, SEEK_CUR);
     if (!strncmp(make, "SAMSUNG", 7))
       base = ftell(ifp);
   }
 
   if (!is_Olympus &&
-      (!strncasecmp(make, "Olympus", 7) ||
+      (!strncasecmp(make, "Olympus", 7) || !strncmp(make, "OM Digi", 7) ||
       (!strncasecmp(make, "CLAUSS", 6) && !strncasecmp(model, "piX 5oo", 7)))) {
     is_Olympus = 1;
   }
 
   if (!is_Sony &&
       (!strncasecmp(make, "SONY", 4) ||
        !strncasecmp(make, "Konica", 6) ||
        !strncasecmp(make, "Minolta", 7) ||
        (!strncasecmp(make, "Hasselblad", 10) &&
         (!strncasecmp(model, "Stellar", 7) ||
          !strncasecmp(model, "Lunar", 5) ||
          !strncasecmp(model, "Lusso", 5) ||
          !strncasecmp(model, "HV", 2))))) {
     is_Sony = 1;
   }
 
   if (strcasestr(make, "Kodak") &&
       (sget2((uchar *)buf) > 1) && // check number of entries
       (sget2((uchar *)buf) < 128) &&
       (sget2((uchar *)(buf + 4)) > 0) && // check type
       (sget2((uchar *)(buf + 4)) < 13) &&
       (sget4((uchar *)(buf + 6)) < 256) // check count
   )
     imKodak.MakerNoteKodak8a = 1; // Kodak P712 / P850 / P880
 
   entries = get2();
   if (entries > 1000)
     return;
 
   morder = order;
   while (entries--)
   {
     order = morder;
     tiff_get(base, &tag, &type, &len, &save);
     tag |= uptag << 16;
 
     INT64 _pos = ftell(ifp);
     if (len > 100 * 1024 * 1024)
 	goto next; // 100Mb tag? No!
     if (len > 8 && _pos + len > 2 * fsize)
     {
       fseek(ifp, save, SEEK_SET); // Recover tiff-read position!!
       continue;
     }
     if (imKodak.MakerNoteKodak8a)
     {
       if ((tag == 0xff00) && tagtypeIs(LIBRAW_EXIFTAG_TYPE_LONG) && (len == 1))
       {
         INT64 _pos1 = get4();
         if ((_pos1 < fsize) && (_pos1 > 0))
         {
           fseek(ifp, _pos1, SEEK_SET);
           parse_makernote(base, tag);
         }
       }
       else if (tag == 0xff00f90b)
       {
         imKodak.clipBlack = get2();
       }
       else if (tag == 0xff00f90c)
       {
         imKodak.clipWhite = imgdata.color.linear_max[0] =
             imgdata.color.linear_max[1] = imgdata.color.linear_max[2] =
                 imgdata.color.linear_max[3] = get2();
       }
     }
     else if (!strncmp(make, "Canon", 5))
     {
       if (tag == 0x000d && len < 256000) // camera info
       {
         if (!tagtypeIs(LIBRAW_EXIFTAG_TYPE_LONG))
         {
           CanonCameraInfo = (uchar *)malloc(MAX(16, len));
           fread(CanonCameraInfo, len, 1, ifp);
         }
         else
         {
           CanonCameraInfo = (uchar *)malloc(MAX(16, len * 4));
           fread(CanonCameraInfo, len, 4, ifp);
         }
         lenCanonCameraInfo = len;
         typeCanonCameraInfo = type;
       }
 
       else if (tag == 0x0010) // Canon ModelID
       {
         unique_id = get4();
         setCanonBodyFeatures(unique_id);
         if (lenCanonCameraInfo)
         {
           processCanonCameraInfo(unique_id, CanonCameraInfo, lenCanonCameraInfo,
                                  typeCanonCameraInfo, nonDNG);
 	  if(CanonCameraInfo)
             free(CanonCameraInfo);
           CanonCameraInfo = 0;
           lenCanonCameraInfo = 0;
         }
       }
 
       else
         parseCanonMakernotes(tag, type, len, nonDNG);
     }
 
     else if (!strncmp(make, "FUJI", 4))
       parseFujiMakernotes(tag, type, len, nonDNG);
 
     else if (!strncasecmp(model, "Hasselblad X1D", 14) ||
              !strncasecmp(model, "Hasselblad H6D", 14) ||
              !strncasecmp(model, "Hasselblad A6D", 14))
     {
       if (tag == 0x0045)
       {
         imHassy.BaseISO = get4();
       }
       else if (tag == 0x0046)
       {
         imHassy.Gain = getreal(type);
       }
     }
 
     else if (!strncmp(make, "PENTAX", 6) ||
              !strncmp(make, "RICOH", 5) ||
              !strncmp(model, "PENTAX", 6))
     {
       if (!strncmp(model, "GR", 2) ||
           !strncmp(model, "GXR", 3))
       {
         parseRicohMakernotes(base, tag, type, len, CameraDNG);
       }
       else
       {
         parsePentaxMakernotes(base, tag, type, len, nonDNG);
       }
     }
 
     else if (!strncmp(make, "SAMSUNG", 7))
     {
       if (!dng_version)
         parseSamsungMakernotes(base, tag, type, len, nonDNG);
       else
         parsePentaxMakernotes(base, tag, type, len, CameraDNG);
     }
 
     else if (is_Sony)
     {
       if ((tag == 0xb028) && (len == 1) && tagtypeIs(LIBRAW_EXIFTAG_TYPE_LONG)) // DSLR-A100
       {
         if ((c = get4()))
         {
           fseek(ifp, c, SEEK_SET);
           parse_makernote(base, tag);
         }
       }
       else
       {
         parseSonyMakernotes(
             base, tag, type, len, nonDNG,
             table_buf_0x0116, table_buf_0x0116_len,
             table_buf_0x2010, table_buf_0x2010_len,
             table_buf_0x9050, table_buf_0x9050_len,
             table_buf_0x9400, table_buf_0x9400_len,
             table_buf_0x9402, table_buf_0x9402_len,
             table_buf_0x9403, table_buf_0x9403_len,
             table_buf_0x9406, table_buf_0x9406_len,
             table_buf_0x940c, table_buf_0x940c_len,
             table_buf_0x940e, table_buf_0x940e_len);
       }
     }
     fseek(ifp, _pos, SEEK_SET);
 
     if (!strncasecmp(make, "Hasselblad", 10) && !is_Sony) {
       if (tag == 0x0011)
         imHassy.SensorCode = getint(type);
       else if (tag == 0x0016)
         imHassy.CoatingCode = getint(type);
       else if ((tag == 0x002a) &&
                tagtypeIs(LIBRAW_EXIFTAG_TYPE_SRATIONAL) &&
                (len == 12)) {
         FORC4 for (int i = 0; i < 3; i++)
                 imHassy.mnColorMatrix[c][i] = getreal(type);
 
       } else if (tag == 0x0031) {
         imHassy.RecommendedCrop[0] = getint(type);
         imHassy.RecommendedCrop[1] = getint(type);
       }
     }
 
     if ((tag == 0x0004 || tag == 0x0114) && !strncmp(make, "KONICA", 6))
     {
       fseek(ifp, tag == 0x0004 ? 140 : 160, SEEK_CUR);
       switch (get2())
       {
       case 72:
         flip = 0;
         break;
       case 76:
         flip = 6;
         break;
       case 82:
         flip = 5;
         break;
       }
     }
 
     if (is_Olympus) {
       INT64 _pos2 = ftell(ifp);
       if ((tag == 0x2010) || (tag == 0x2020) || (tag == 0x2030) ||
           (tag == 0x2031) || (tag == 0x2040) || (tag == 0x2050) ||
           (tag == 0x3000))
       {
         if (tagtypeIs(LIBRAW_EXIFTOOLTAGTYPE_binary)) {
           parse_makernote(base, tag);
 
         } else if (tagtypeIs(LIBRAW_EXIFTOOLTAGTYPE_ifd) ||
                    tagtypeIs(LIBRAW_EXIFTOOLTAGTYPE_int32u)) {
           fseek(ifp, base + get4(), SEEK_SET);
           parse_makernote(base, tag);
         }
 
       } else {
         parseOlympusMakernotes(base, tag, type, len, nonDNG);
       }
       fseek(ifp, _pos2, SEEK_SET);
     }
 
     if ((tag == 0x0015) &&
         tagtypeIs(LIBRAW_EXIFTAG_TYPE_ASCII) &&
         is_raw)
     { // Hasselblad
       stmread (imHassy.SensorUnitConnector, len, ifp);
     }
 
     if (tagtypeIs(LIBRAW_EXIFTAG_TYPE_UNDEFINED) &&
         ((tag == 0x0081) || // Minolta
          (tag == 0x0100)))  // Olympus
     {
       thumb_offset = ftell(ifp);
       thumb_length = len;
     }
     if ((tag == 0x0088) && // Minolta, possibly Olympus too
         tagtypeIs(LIBRAW_EXIFTAG_TYPE_LONG) &&
         (thumb_offset = get4()))
       thumb_offset += base;
 
     if ((tag == 0x0089) && // Minolta, possibly Olympus too
         tagtypeIs(LIBRAW_EXIFTAG_TYPE_LONG))
       thumb_length = get4();
 
     if (tagtypeIs(LIBRAW_EXIFTAG_TYPE_UNDEFINED) &&  // Nikon
         ((tag == 0x008c) ||
          (tag == 0x0096))) {
       meta_offset = ftell(ifp);
     }
 
     if ((tag == 0x00a1) &&
         tagtypeIs(LIBRAW_EXIFTAG_TYPE_UNDEFINED) &&
         strncasecmp(make, "Samsung", 7))
     {
       order = 0x4949;
       fseek(ifp, 140, SEEK_CUR);
       FORC3 cam_mul[c] = get4();
     }
 
     if (tag == 0xb001 && tagtypeIs(LIBRAW_EXIFTAG_TYPE_SHORT)) // Sony ModelID
     {
       unique_id = get2();
     }
     if (tag == 0x0200 && len == 3) // Olympus
       shot_order = (get4(), get4());
 
     if (tag == 0x0f00 && tagtypeIs(LIBRAW_EXIFTAG_TYPE_UNDEFINED))
     {
       if (len == 614)
         fseek(ifp, 176, SEEK_CUR);
       else if (len == 734 || len == 1502) // Kodak, Minolta, Olympus
         fseek(ifp, 148, SEEK_CUR);
       else
         goto next;
       goto get2_256;
     }
 
     if (tag == 0x2011 && len == 2) // Casio
     {
     get2_256:
       order = 0x4d4d;
       cam_mul[0] = get2() / 256.0;
       cam_mul[2] = get2() / 256.0;
     }
 
   next:
     fseek(ifp, save, SEEK_SET);
   }
diff --git a/src/metadata/normalize_model.cpp b/src/metadata/normalize_model.cpp
index e3de0dbb..10fad987 100644
--- a/src/metadata/normalize_model.cpp
+++ b/src/metadata/normalize_model.cpp
@@ -19,1398 +19,1401 @@
 void LibRaw::GetNormalizedModel()
 {
 
   int i, j;
   char *ps;
   int try_xml = 0;
 
   static const struct
   {
     unsigned long long id;
     char t_model[20];
   } unique[] =
 // clang-format off
     {
       { CanonID_EOS_M50,           "EOS M50"}, // Kiss M
       { CanonID_EOS_M6_Mark_II,    "EOS M6 Mark II"},
       { CanonID_EOS_M200,          "EOS M200"},
       { CanonID_EOS_D30,           "EOS D30"},
       { CanonID_EOS_D60,           "EOS D60"},
       { CanonID_EOS_M3,            "EOS M3"},
       { CanonID_EOS_M10,           "EOS M10"},
       { CanonID_EOS_M5,            "EOS M5"},
       { CanonID_EOS_M100,          "EOS M100"},
       { CanonID_EOS_M6,            "EOS M6"},
       { CanonID_EOS_1D,            "EOS-1D"},
       { CanonID_EOS_1Ds,           "EOS-1Ds"},
       { CanonID_EOS_10D,           "EOS 10D"},
       { CanonID_EOS_1D_Mark_III,   "EOS-1D Mark III"},
       { CanonID_EOS_300D,          "EOS 300D"}, // Digital Rebel / Kiss Digital
       { CanonID_EOS_1D_Mark_II,    "EOS-1D Mark II"},
       { CanonID_EOS_20D,           "EOS 20D"},
       { CanonID_EOS_450D,          "EOS 450D"}, // Digital Rebel XSi / Kiss X2
       { CanonID_EOS_1Ds_Mark_II,   "EOS-1Ds Mark II"},
       { CanonID_EOS_350D,          "EOS 350D"}, // Digital Rebel XT / Kiss Digital N
       { CanonID_EOS_40D,           "EOS 40D"},
       { CanonID_EOS_5D,            "EOS 5D"},
       { CanonID_EOS_1Ds_Mark_III,  "EOS-1Ds Mark III"},
       { CanonID_EOS_5D_Mark_II,    "EOS 5D Mark II"},
       { CanonID_EOS_1D_Mark_II_N,  "EOS-1D Mark II N"},
       { CanonID_EOS_30D,           "EOS 30D"},
       { CanonID_EOS_400D,          "EOS 400D"}, // Digital Rebel XTi / Kiss Digital X
       { CanonID_EOS_7D,            "EOS 7D"},
       { CanonID_EOS_500D,          "EOS 500D"},   // Rebel T1i / Kiss X3
       { CanonID_EOS_1000D,         "EOS 1000D"}, // Digital Rebel XS / Kiss F
       { CanonID_EOS_50D,           "EOS 50D"},
       { CanonID_EOS_1D_X,          "EOS-1D X"},
       { CanonID_EOS_550D,          "EOS 550D"}, // Rebel T2i / Kiss X4
       { CanonID_EOS_1D_Mark_IV,    "EOS-1D Mark IV"},
       { CanonID_EOS_5D_Mark_III,   "EOS 5D Mark III"},
       { CanonID_EOS_600D,          "EOS 600D"}, // Rebel T3i / Kiss X5
       { CanonID_EOS_60D,           "EOS 60D"},
       { CanonID_EOS_1100D,         "EOS 1100D"}, // Rebel T3 / Kiss X50
       { CanonID_EOS_7D_Mark_II,    "EOS 7D Mark II"},
       { CanonID_EOS_650D,          "EOS 650D"}, // Rebel T4i / Kiss X6i
       { CanonID_EOS_6D,            "EOS 6D"},
       { CanonID_EOS_1D_C,          "EOS-1D C"},
       { CanonID_EOS_70D,           "EOS 70D"},
       { CanonID_EOS_700D,          "EOS 700D"},   // Rebel T5i / Kiss X7i
       { CanonID_EOS_1200D,         "EOS 1200D"}, // Rebel T5 / Kiss X70 / Hi
       { CanonID_EOS_1D_X_Mark_II,  "EOS-1D X Mark II"},
       { CanonID_EOS_M,             "EOS M"},
       { CanonID_EOS_100D,          "EOS 100D"}, // Rebel SL1 / Kiss X7
       { CanonID_EOS_760D,          "EOS 760D"}, // Rebel T6s / 8000D
       { CanonID_EOS_5D_Mark_IV,    "EOS 5D Mark IV"},
       { CanonID_EOS_80D,           "EOS 80D"},
       { CanonID_EOS_M2,            "EOS M2"},
       { CanonID_EOS_5DS,           "EOS 5DS"},
       { CanonID_EOS_750D,          "EOS 750D"}, // Rebel T6i / Kiss X8i
       { CanonID_EOS_5DS_R,         "EOS 5DS R"},
       { CanonID_EOS_1300D,         "EOS 1300D"}, // Rebel T6 / Kiss X80
       { CanonID_EOS_800D,          "EOS 800D"},   // Rebel T7i / Kiss X9i
       { CanonID_EOS_6D_Mark_II,    "EOS 6D Mark II"},
       { CanonID_EOS_77D,           "EOS 77D"},     // 9000D
       { CanonID_EOS_200D,          "EOS 200D"},   // Rebel SL2 / Kiss X9
       { CanonID_EOS_R5,            "EOS R5"},
       { CanonID_EOS_3000D,         "EOS 3000D"}, // Rebel T100 / 4000D
       { CanonID_EOS_R,             "EOS R"},
       { CanonID_EOS_1D_X_Mark_III, "EOS-1D X Mark III"},
       { CanonID_EOS_1500D,         "EOS 1500D"}, // Rebel T7 / 2000D / Kiss X90
       { CanonID_EOS_RP,            "EOS RP"},
       { CanonID_EOS_850D,          "EOS 850D"},  // EOS Rebel T8i / X10i
       { CanonID_EOS_250D,          "EOS 250D"}, // Rebel SL3 / 200D II / Kiss X10
       { CanonID_EOS_90D,           "EOS 90D"},
       { CanonID_EOS_R3,            "EOS R3"},
       { CanonID_EOS_R6,            "EOS R6"},
       { CanonID_EOS_M50_Mark_II,   "EOS M50 Mark II"}, // M50m2, Kiss M2
     },
 #if 0
     olyque[] = {
       { OlyID_E_20,            "E-20"},
       { OlyID_E_20,            "E-20,E-20N,E-20P"},
       { OlyID_E_1,             "E-1"},
       { OlyID_E_300,           "E-300"},
       { OlyID_SP_550UZ,        "SP-550UZ"},
       { OlyID_SP_550UZ,        "SP550UZ"},
       { OlyID_SP_510UZ,        "SP-510UZ"},
       { OlyID_SP_510UZ,        "SP510UZ"},
       { OlyID_SP_560UZ,        "SP-560UZ"},
       { OlyID_SP_560UZ,        "SP560UZ"},
       { OlyID_SP_570UZ,        "SP-570UZ"},
       { OlyID_SP_570UZ,        "SP570UZ"},
       { OlyID_SP_565UZ,        "SP-565UZ"},
       { OlyID_SP_565UZ,        "SP565UZ"},
       { OlyID_XZ_1,            "XZ-1"},
       { OlyID_XZ_2,            "XZ-2"},
       { OlyID_XZ_10,           "XZ-10"},
       { OlyID_STYLUS_1,        "Stylus 1"},
       { OlyID_STYLUS_1,        "STYLUS1"},
       { OlyID_STYLUS_1,        "STYLUS1,1s"},
       { OlyID_SH_2,            "SH-2"},
       { OlyID_TG_4,            "TG-4"},
       { OlyID_TG_5,            "TG-5"},
       { OlyID_TG_6,            "TG-6"},
       { OlyID_E_10,            "E-10"},
       { OlyID_AIR_A01,         "AIR A01"},
       { OlyID_AIR_A01,         "AIR-A01"},
       { OlyID_E_330,           "E-330"},
       { OlyID_E_500,           "E-500"},
       { OlyID_E_400,           "E-400"},
       { OlyID_E_510,           "E-510"},
       { OlyID_E_3,             "E-3"},
       { OlyID_E_410,           "E-410"},
       { OlyID_E_420,           "E-420"},
       { OlyID_E_30,            "E-30"},
       { OlyID_E_520,           "E-520"},
       { OlyID_E_P1,            "E-P1"},
       { OlyID_E_620,           "E-620"},
       { OlyID_E_P2,            "E-P2"},
       { OlyID_E_PL1,           "E-PL1"},
       { OlyID_E_450,           "E-450"},
       { OlyID_E_600,           "E-600"},
       { OlyID_E_P3,            "E-P3"},
       { OlyID_E_5,             "E-5"},
       { OlyID_E_PL2,           "E-PL2"},
       { OlyID_E_M5,            "E-M5"},
       { OlyID_E_PL3,           "E-PL3"},
       { OlyID_E_PM1,           "E-PM1"},
       { OlyID_E_PL1s,          "E-PL1s"},
       { OlyID_E_PL5,           "E-PL5"},
       { OlyID_E_PM2,           "E-PM2"},
       { OlyID_E_P5,            "E-P5"},
       { OlyID_E_PL6,           "E-PL6"},
       { OlyID_E_PL7,           "E-PL7"},
       { OlyID_E_M1,            "E-M1"},
       { OlyID_E_M10,           "E-M10"},
       { OlyID_E_M5_Mark_II,    "E-M5 Mark II"},
       { OlyID_E_M5_Mark_II,    "E-M5MarkII"},
       { OlyID_E_M5_Mark_II,    "E-M5_M2"},
       { OlyID_E_M10_Mark_II,   "E-M10 Mark II"}, // Clauss piX 5oo
       { OlyID_E_M10_Mark_II,   "E-M10MarkII"},
       { OlyID_E_M10_Mark_II,   "E-M10_M2"},
       { OlyID_PEN_F,           "PEN-F"},
       { OlyID_E_PL8,           "E-PL8"},
       { OlyID_E_M1_Mark_II,    "E-M1 Mark II"},
       { OlyID_E_M1_Mark_II,    "E-M1MarkII"},
       { OlyID_E_M1_Mark_II,    "E-M1_M2"},
       { OlyID_E_M10_Mark_III,  "E-M10 Mark III"},
       { OlyID_E_M10_Mark_III,  "E-M10_M3"},
       { OlyID_E_PL9,           "E-PL9"},
       { OlyID_E_M1X,           "E-M1X"},
       { OlyID_E_PL10,          "E-PL10"},
       { OlyID_E_M10_Mark_IV,   "E-M10 Mark IV"},
       { OlyID_E_M10_Mark_IV,   "E-M10MarkIV"},
       { OlyID_E_M10_Mark_IV,   "E-M10_M4"},
       { OlyID_E_M5_Mark_III,   "E-M5 Mark III"},
       { OlyID_E_M5_Mark_III,   "E-M5MarkIII"},
       { OlyID_E_M5_Mark_III,   "E-M5_M3"},
       { OlyID_E_M1_Mark_III,   "E-M1 Mark III"},
       { OlyID_E_M1_Mark_III,   "E-M1MarkIII"},
       { OlyID_E_M1_Mark_III,   "E-M1_M3"},
       { OlyID_E_P7             "E-P7"},
       { OlyID_C_3030Z,         "C-3030Z"},
       { OlyID_C_3030Z,         "C3030Z"},
       { OlyID_C_5050Z,         "C-5050Z"},
       { OlyID_C_5050Z,         "C5050Z"},
       { OlyID_C_350Z,          "C-350Z"},
       { OlyID_C_350Z,          "X200,D560Z,C350Z"},
       { OlyID_C_740UZ,         "C-740UZ"},
       { OlyID_C_740UZ,         "C740UZ"},
       { OlyID_C_5060WZ,        "C-5060WZ"},
       { OlyID_C_5060WZ,        "C5060WZ"},
       { OlyID_C_8080WZ,        "C-8080WZ"},
       { OlyID_C_8080WZ,        "C8080WZ"},
       { OlyID_C_770UZ,         "C-770UZ"},
       { OlyID_C_770UZ,         "C770UZ"},
       { OlyID_C_7070WZ,        "C-7070WZ"},
       { OlyID_C_7070WZ,        "C7070WZ"},
       { OlyID_C_7000Z,         "C-7000Z"},
       { OlyID_C_7000Z,         "C70Z,C7000Z"},
       { OlyID_SP_500UZ,        "SP-500UZ"},
       { OlyID_SP_500UZ,        "SP500UZ"},
       { OlyID_SP_310,          "SP-310"},
       { OlyID_SP_310,          "SP310"},
       { OlyID_SP_350,          "SP-350"},
       { OlyID_SP_350,          "SP350"},
       { OlyID_SP_320,          "SP-320"},
       { OlyID_SP_320,          "SP320"},
     },
 
     penique[] = {
       { PentaxID_Optio_S,      "Optio S"},
       { PentaxID_Optio_S_V101, "Optio S V1.01"},
       { PentaxID_staristD,     "*istD"},
       { PentaxID_staristD,     "*ist D"},
       { PentaxID_Optio_33WR,   "Optio 33WR"},
       { PentaxID_Optio_S4,     "Optio S4"},
       { PentaxID_Optio_750Z,   "Optio 750Z"},
       { PentaxID_staristDS,    "*istDS"},
       { PentaxID_staristDS,    "*ist DS"},
       { PentaxID_staristDL,    "*istDL"},
       { PentaxID_staristDL,    "*ist DL"},
       { PentaxID_staristDS2,   "*istDS2"},
       { PentaxID_staristDS2,   "*ist DS2"},
       { PentaxID_GX_1S,        "GX-1S"},        // Samsung
       { PentaxID_staristDL2,   "*istDL2"},
       { PentaxID_staristDL2,   "*ist DL2"},
       { PentaxID_GX_1L,        "GX-1L"},        // Samsung
       { PentaxID_K100D,        "K100D"},
       { PentaxID_K110D,        "K110D"},
       { PentaxID_K100D_Super,  "K100D Super"},
       { PentaxID_K10D,         "K10D"},
       { PentaxID_GX10,         "GX10"},         // Samsung
       { PentaxID_GX10,         "GX-10"},        // Samsung
       { PentaxID_K20D,         "K20D"},
       { PentaxID_GX20,         "GX20"},         // Samsung
       { PentaxID_GX20,         "GX-20"},        // Samsung
       { PentaxID_K200D,        "K200D"},
       { PentaxID_K2000,        "K2000"},
       { PentaxID_K_m,          "K-m"},
       { PentaxID_K_7,          "K-7"},
       { PentaxID_K_x,          "K-x"},
       { PentaxID_645D,         "645D"},
       { PentaxID_K_r,          "K-r"},
       { PentaxID_K_5,          "K-5"},
       { PentaxID_Q,            "Q"},
       { PentaxID_K_01,         "K-01"},
       { PentaxID_K_30,         "K-30"},
       { PentaxID_Q10,          "Q10"},
       { PentaxID_K_5_II,       "K-5 II"},
       { PentaxID_K_5_II_s,     "K-5 II s"},
       { PentaxID_Q7,           "Q7"},
       { PentaxID_MX_1,         "MX-1"},
       { PentaxID_K_50,         "K-50"},
       { PentaxID_K_3,          "K-3"},
       { PentaxID_K_500,        "K-500"},
       { PentaxID_645Z,         "645Z"},
       { PentaxID_K_S1,         "K-S1"},
       { PentaxID_K_S2,         "K-S2"},         // Ricoh
       { PentaxID_Q_S1,         "Q-S1"},
       { PentaxID_K_1,          "K-1"},          // Ricoh
       { PentaxID_K_3_II,       "K-3 II"},       // Ricoh
       { PentaxID_GR_III,       "GR III"},       // Ricoh
       { PentaxID_K_70,         "K-70"},         // Ricoh
       { PentaxID_KP,           "KP"},           // Ricoh
       { PentaxID_K_1_Mark_II,  "K-1 Mark II"},  // Ricoh
       { PentaxID_K_3_III,      "K-3 Mark III"}, // Ricoh
       { PentaxID_GR_IIIx,      "GR IIIx"},
     },
 #endif
     sonique[] = {
       { SonyID_DSC_R1,         "DSC-R1"},
       { SonyID_DSLR_A100,      "DSLR-A100"},
       { SonyID_DSLR_A900,      "DSLR-A900"},
       { SonyID_DSLR_A700,      "DSLR-A700"},
       { SonyID_DSLR_A200,      "DSLR-A200"},
       { SonyID_DSLR_A350,      "DSLR-A350"},
       { SonyID_DSLR_A300,      "DSLR-A300"},
       { SonyID_DSLR_A900_APSC, "DSLR-A900"},
       { SonyID_DSLR_A380,      "DSLR-A380"},    // DSLR-A390
       { SonyID_DSLR_A330,      "DSLR-A330"},
       { SonyID_DSLR_A230,      "DSLR-A230"},
       { SonyID_DSLR_A290,      "DSLR-A290"},
       { SonyID_DSLR_A850,      "DSLR-A850"},
       { SonyID_DSLR_A850_APSC, "DSLR-A850"},
       { SonyID_DSLR_A550,      "DSLR-A550"},
       { SonyID_DSLR_A500,      "DSLR-A500"},
       { SonyID_DSLR_A450,      "DSLR-A450"},
       { SonyID_NEX_5,          "NEX-5"},
       { SonyID_NEX_3,          "NEX-3"},
       { SonyID_SLT_A33,        "SLT-A33"},
       { SonyID_SLT_A55,        "SLT-A55"},      // SLT-A55V
       { SonyID_DSLR_A560,      "DSLR-A560"},
       { SonyID_DSLR_A580,      "DSLR-A580"},
       { SonyID_NEX_C3,         "NEX-C3"},
       { SonyID_SLT_A35,        "SLT-A35"},
       { SonyID_SLT_A65,        "SLT-A65"},      // SLT-A65V
       { SonyID_SLT_A77,        "SLT-A77"},      // SLT-A77V
       { SonyID_NEX_5N,         "NEX-5N"},
       { SonyID_NEX_7,          "NEX-7"},        // Hasselblad Lunar
       { SonyID_NEX_VG20,       "NEX-VG20"},
       { SonyID_SLT_A37,        "SLT-A37"},
       { SonyID_SLT_A57,        "SLT-A57"},
       { SonyID_NEX_F3,         "NEX-F3"},
       { SonyID_SLT_A99,        "SLT-A99"},      // SLT-A99V / Hasselblad HV
       { SonyID_NEX_6,          "NEX-6"},
       { SonyID_NEX_5R,         "NEX-5R"},
       { SonyID_DSC_RX100,      "DSC-RX100"},    // Hasselblad Stellar
       { SonyID_DSC_RX1,        "DSC-RX1"},
       { SonyID_NEX_VG900,      "NEX-VG900"},
       { SonyID_NEX_VG30,       "NEX-VG30"},
       { SonyID_ILCE_3000,      "ILCE-3000"},    // ILCE-3500
       { SonyID_SLT_A58,        "SLT-A58"},
       { SonyID_NEX_3N,         "NEX-3N"},
       { SonyID_ILCE_7,         "ILCE-7"},
       { SonyID_NEX_5T,         "NEX-5T"},
       { SonyID_DSC_RX100M2,    "DSC-RX100M2"},  // Hasselblad Stellar II
       { SonyID_DSC_RX10,       "DSC-RX10"},
       { SonyID_DSC_RX1R,       "DSC-RX1R"},
       { SonyID_ILCE_7R,        "ILCE-7R"},      // Hasselblad Lusso
       { SonyID_ILCE_6000,      "ILCE-6000"},
       { SonyID_ILCE_5000,      "ILCE-5000"},
       { SonyID_DSC_RX100M3,    "DSC-RX100M3"},
       { SonyID_ILCE_7S,        "ILCE-7S"},
       { SonyID_ILCA_77M2,      "ILCA-77M2"},
       { SonyID_ILCE_5100,      "ILCE-5100"},
       { SonyID_ILCE_7M2,       "ILCE-7M2"},
       { SonyID_DSC_RX100M4,    "DSC-RX100M4"},
       { SonyID_DSC_RX10M2,     "DSC-RX10M2"},
       { SonyID_DSC_RX1RM2,     "DSC-RX1RM2"},
       { SonyID_ILCE_QX1,       "ILCE-QX1"},
       { SonyID_ILCE_7RM2,      "ILCE-7RM2"},
       { SonyID_ILCE_7SM2,      "ILCE-7SM2"},
       { SonyID_ILCA_68,        "ILCA-68"},
       { SonyID_ILCA_99M2,      "ILCA-99M2"},
       { SonyID_DSC_RX10M3,     "DSC-RX10M3"},
       { SonyID_DSC_RX100M5,    "DSC-RX100M5"},
       { SonyID_ILCE_6300,      "ILCE-6300"},
       { SonyID_ILCE_9,         "ILCE-9"},
       { SonyID_ILCE_6500,      "ILCE-6500"},
       { SonyID_ILCE_7RM3,      "ILCE-7RM3"},
       { SonyID_ILCE_7M3,       "ILCE-7M3"},
       { SonyID_DSC_RX0,        "DSC-RX0"},
       { SonyID_DSC_RX10M4,     "DSC-RX10M4"},
       { SonyID_DSC_RX100M6,    "DSC-RX100M6"},
       { SonyID_DSC_HX99,       "DSC-HX99"},
       { SonyID_DSC_RX100M5A,   "DSC-RX100M5A"},
       { SonyID_ILCE_6400,      "ILCE-6400"},
       { SonyID_DSC_RX0M2,      "DSC-RX0M2"},
       { SonyID_DSC_RX100M7,    "DSC-RX100M7"},
       { SonyID_ILCE_7RM4,      "ILCE-7RM4"},
       { SonyID_ILCE_9M2,       "ILCE-9M2"},
       { SonyID_ILCE_6600,      "ILCE-6600"},
       { SonyID_ILCE_6100,      "ILCE-6100"},
       { SonyID_ZV_1,           "ZV-1"},
       { SonyID_ILCE_7C,        "ILCE-7C"},
       { SonyID_ZV_E10,         "ZV-E10"},
       { SonyID_ILCE_7SM3,      "ILCE-7SM3"},
       { SonyID_ILCE_1,         "ILCE-1"},
       { SonyID_ILME_FX3,       "ILME-FX3"},
       { SonyID_ILCE_7RM3A,     "ILCE-7RM3A"},
       { SonyID_ILCE_7RM4A,     "ILCE-7RM4A"},
     };
 
   static const char *orig;
 
   static const char fujialias[][16] = {
     "@DBP for GX680", "DX-2000",
     "@F500EXR", "F505EXR",
     "@F600EXR", "F605EXR",
     "@F770EXR", "F775EXR",
     "@HS10", "HS10 HS11",
     "@HS20EXR", "HS22EXR",
     "@HS30EXR", "HS33EXR", "HS35EXR",
     "@S5100", "S5500",
     "@S5200", "S5600",
     "@S6000fd", "S6500fd",
     "@S9000", "S9500",
     "@S9100", "S9600",
     "@S200EXR", "S205EXR",
     "@X-T1 IR", "X-T1IR",
     "@GFX 100S", "GFX100S",
     "@GFX 50S II", "GFX50S II"
   };
 
   static const char kodakalias[][16] = {
     "@DCS Pro 14N", "Camerz ZDS 14", // Camerz rebadge make: "Photo Control"
     "@DCS720X", "SCS2000",
     "@DCS520C", "EOS D2000C", "EOS D2000", // EOS rebadge make: Canon
     "@DCS560C", "EOS D6000C", "EOS D6000", // EOS rebadge make: Canon
     "@DCS460M", "DCS460A", // 'A' was supposed to stand for 'achromatic', marketing changed it to 'M'
     "@DCS460",  "DCS460C", "DCS460D",
     "@DCS465",  "DCS465C", "DCS465D",
     "@EOSDCS1", "EOSDCS1B", "EOSDCS1C",
     "@EOSDCS3", "EOSDCS3B", "EOSDCS3C",
   };
 
   static const struct
   {
     const char *Kmodel;
     ushort mount;
   } Kodak_mounts[] = {
       {"DCS465", LIBRAW_MOUNT_DigitalBack},
       {"DCS5", LIBRAW_MOUNT_Canon_EF},
       {"DCS Pro SLR/c", LIBRAW_MOUNT_Canon_EF},
       {"DCS", LIBRAW_MOUNT_Nikon_F},
       {"EOS", LIBRAW_MOUNT_Canon_EF},
       {"NC2000", LIBRAW_MOUNT_Nikon_F}, // AP "News Camera"
       {"Pixpro S-1", LIBRAW_MOUNT_mFT},
       {"ProBack", LIBRAW_MOUNT_DigitalBack},
       {"SCS1000", LIBRAW_MOUNT_Canon_EF},
   };
 
   static const char *KodakMonochrome[] = {
       "DCS420M",    "DCS420A",  "DCS420I",
       "DCS460M",    "DCS460A",  "DCS460I",
       "DCS465M",    "DCS465A",  "DCS465I",
       "DCS560M",    "DCS660M",  "DCS760M", "EOS D2000M", "EOS D6000M",
       "EOSDCS1M",   "EOSDCS1I",
       "EOSDCS3M",   "EOSDCS3I",
       "EOSDCS5M",   "EOSDCS5I",
       "NC2000M",    "NC2000A",  "NC2000I",
   };
 
   static const char leafalias[][16] = {
       // Leaf re-badged to Mamiya
     "@Aptus-II 5",  "DM22",
     "@Aptus-II 6",  "DM28",
     "@Aptus-II 7",  "DM33",
     "@Aptus-II 8",  "DM40",
     "@Aptus-II 10", "DM56",
   };
 
   static const char KonicaMinolta_aliases[][24] = {
     "@DG-5D", "DYNAX 5D", "MAXXUM 5D", "ALPHA-5 DIGITAL", "ALPHA SWEET DIGITAL",
     "@DG-7D", "DYNAX 7D", "MAXXUM 7D", "ALPHA-7 DIGITAL",
   };
 
   static const char nikonalias[][16] = {
       "@COOLPIX 2100",  "E2100",         "@COOLPIX 2500",  "E2500",
       "@COOLPIX 3200",  "E3200",         "@COOLPIX 3700",  "E3700",
       "@COOLPIX 4300",  "E4300",         "@COOLPIX 4500",  "E4500",
       "@COOLPIX 5000",  "E5000",         "@COOLPIX 5400",  "E5400",
       "@COOLPIX 5700",  "E5700",         "@COOLPIX 8400",  "E8400",
       "@COOLPIX 8700",  "E8700",         "@COOLPIX 8800",  "E8800",
       "@COOLPIX 700",   "E700",          "@COOLPIX 800",   "E800",
       "@COOLPIX 880",   "E880",          "@COOLPIX 900",   "E900",
       "@COOLPIX 950",   "E950",          "@COOLPIX 990",   "E990",
       "@COOLPIX 995",   "E995",          "@COOLPIX P7700", "COOLPIX Deneb",
       "@COOLPIX P7800", "COOLPIX Kalon",
   };
 
   static const char olyalias[][32] = { // Olympus
     "@AIR A01", "AIR-A01",
     "@C-3030Z", "C3030Z",
     "@C-5050Z", "C5050Z",
     "@C-5060WZ", "C5060WZ",
     "@C-7000Z", "C7000Z", "C70Z,C7000Z", "C70Z",
     "@C-7070WZ", "C7070WZ",
     "@C-8080WZ", "C8080WZ",
     "@C-350Z", "C350Z", "X200,D560Z,C350Z", "X200", "D560Z",
     "@C-740UZ", "C740UZ",
     "@C-770UZ", "C770UZ",
     "@E-20", "E-20,E-20N,E-20P", "E-20N", "E-20P",
     "@E-M10 Mark II", "E-M10MarkII", "E-M10_M2", "piX 5oo",
     "@E-M10 Mark III", "E-M10MarkIII", "E-M10_M3",
     "@E-M10 Mark IV", "E-M10MarkIV", "E-M10_M4",
     "@E-M1 Mark II", "E-M1MarkII", "E-M1_M2",
     "@E-M1 Mark III", "E-M1MarkIII", "E-M1_M3",
     "@E-M5 Mark II", "E-M5MarkII", "E-M5_M2",
     "@E-M5 Mark III", "E-M5MarkIII", "E-M5_M3",
     "@SH-2", "SH-3",
     "@SP-310", "SP310",
     "@SP-320", "SP320",
     "@SP-350", "SP350",
     "@SP-500UZ", "SP500UZ",
     "@SP-510UZ", "SP510UZ",
     "@SP-550UZ", "SP550UZ",
     "@SP-560UZ", "SP560UZ",
     "@SP-565UZ", "SP565UZ",
     "@SP-570UZ", "SP570UZ",
     "@Stylus 1", "STYLUS1", "STYLUS1s", "STYLUS1,1s",
   };
 
   static const char panalias[][16] = { // Panasonic, PanaLeica
 // fixed lens
     "@DMC-FX150", "DMC-FX180",
     "@DC-FZ1000M2", "DC-FZ10002", "V-Lux 5",
     "@DMC-FZ1000", "V-LUX (Typ 114)",
     "@DMC-FZ2500", "DMC-FZ2000", "DMC-FZH1",
     "@DMC-FZ100", "V-LUX 2",
     "@DMC-FZ150", "V-LUX 3",
     "@DMC-FZ200", "V-LUX 4",
     "@DMC-FZ300", "DMC-FZ330",
     "@DMC-FZ35", "DMC-FZ38",
     "@DMC-FZ40", "DMC-FZ42", "DMC-FZ45", "DC-FZ40", "DC-FZ42", "DC-FZ45",
     "@DMC-FZ50", "V-LUX 1", "V-LUX1",
     "@DMC-FZ70", "DMC-FZ72",
     "@DC-FZ80", "DC-FZ81", "DC-FZ82", "DC-FZ83", "DC-FZ85",
     "@DMC-LC1", "DIGILUX 2", "Digilux 2", "DIGILUX2",
     "@DMC-LF1", "C (Typ 112)",
     "@DC-LX100M2", "D-Lux 7",
     "@DMC-LX100", "D-LUX (Typ 109)", "D-Lux (Typ 109)",
     "@DMC-LX1", "D-Lux2", "D-LUX2", "D-LUX 2",
     "@DMC-LX2", "D-LUX 3", "D-LUX3",
     "@DMC-LX3", "D-LUX 4",
     "@DMC-LX5", "D-LUX 5",
     "@DMC-LX7", "D-LUX 6",
     "@DMC-LX9", "DMC-LX10", "DMC-LX15",
     "@DMC-ZS100", "DMC-ZS110", "DMC-TZ100", "DMC-TZ101", "DMC-TZ110", "DMC-TX1",
     "@DC-ZS200", "DC-ZS220", "DC-TZ200", "DC-TZ202", "DC-TZ220", "DC-TX2", "C-Lux", "CAM-DC25",
     "@DMC-ZS40", "DMC-TZ60", "DMC-TZ61",
     "@DMC-ZS50", "DMC-TZ70", "DMC-TZ71",
     "@DMC-ZS60", "DMC-TZ80", "DMC-TZ81", "DMC-TZ82", "DMC-TZ85",
     "@DC-ZS70", "DC-TZ90", "DC-TZ91", "DC-TZ92", "DC-TZ93",
     "@DC-ZS80", "DC-TZ95", "DC-TZ96", "DC-TZ97",
 
 // interchangeable lens
     "@DC-G100",  "DC-G110",
     "@DC-G99",   "DC-G90",   "DC-G91",  "DC-G95",
     "@DMC-G7",   "DMC-G70",
     "@DMC-G8",   "DMC-G80",  "DMC-G81", "DMC-G85",
     "@DMC-GH4",  "AG-GH4",   "CGO4",
     "@DC-GF10",  "DC-GF90",  "DC-GX880",
     "@DC-GF9",   "DC-GX850", "DC-GX800",
     "@DMC-GM1",  "DMC-GM1S",
     "@DMC-GX85", "DMC-GX80", "DMC-GX7MK2",
     "@DC-GX9",   "DC-GX7MK3",
     "@DMC-L1",   "DIGILUX 3", "DIGILUX3", // full 4/3 mount, not m43
   };
 
   static const char phase1alias[][16] = {
     "@H20",  "H 20",
     "@H25",  "H 25",
     "@P20+", "P 20+",
     "@P20",  "P 20",
     "@P21+", "P 21+", "M18", // "Mamiya M18"
     "@P21",  "P 21",
     "@P25+", "P 25+", "M22", // "Mamiya M22"
     "@P25",  "P 25",
     "@P30+", "P 30+", "M31", // "Mamiya M31"
     "@P30",  "P 30",
     "@P40+", "P 40+",
     "@P40",  "P 40",
     "@P45+", "P 45+",
     "@P45",  "P 45",
     "@P65+", "P 65+",
     "@P65",  "P 65",
   };
 
   static const char SamsungPentax_aliases[][16] = {
     "@*istDL2", "*ist DL2", "GX-1L",
     "@*istDS2", "*ist DS2", "GX-1S",
     "@*istDL",  "*ist DL",
     "@*istDS",  "*ist DS",
     "@*istD",   "*ist D",
     "@K10D", "GX10", "GX-10",
     "@K20D", "GX20", "GX-20",
     "@K-m", "K2000",
   };
 
   static const char samsungalias[][64] = {
     "@EX1", "TL500",
     "@NX U", "EK-GN100", "EK-GN110", "EK-GN120", "EK-KN120", "Galaxy NX",
     "@NX mini", "NXF1",
     "@WB2000", "TL350",
       //    "@WB5000", "WB5000/HZ25W", // no spaces around the slash separating names
       //    "@WB5500", "WB5500 / VLUU WB5500 / SAMSUNG HZ50W",
       //    "@WB500", "WB510 / VLUU WB500 / SAMSUNG HZ10W",
       //    "@WB550", "WB560 / VLUU WB550 / SAMSUNG HZ15W",
       //    "@WB650", "SAMSUNG WB650 / VLUU WB650 / SAMSUNG WB660" aka HZ35W
   };
 
 //clang-format on
   if (makeIs(LIBRAW_CAMERAMAKER_VLUU)) {
 	  setMakeFromIndex(LIBRAW_CAMERAMAKER_Samsung);
   }
 
   if (makeIs(LIBRAW_CAMERAMAKER_Samsung) &&
       (ilm.CameraMount == LIBRAW_MOUNT_Pentax_K)) {
 	  setMakeFromIndex(LIBRAW_CAMERAMAKER_Pentax);
 
   } else if (makeIs(LIBRAW_CAMERAMAKER_Unknown)) {
     if (strcasestr(model, "Google")) {
 		  setMakeFromIndex(LIBRAW_CAMERAMAKER_Google);
     }
 #ifdef USE_6BY9RPI
 	else if(strcasestr(make,"RaspberryPi"))
 		setMakeFromIndex(LIBRAW_CAMERAMAKER_RaspberryPi);
 #endif
   }
   else if (makeIs(LIBRAW_CAMERAMAKER_Hasselblad) && is_Sony)
   {
 	  setMakeFromIndex(LIBRAW_CAMERAMAKER_Sony);
   }
+  else if (makeIs(LIBRAW_CAMERAMAKER_OmDigital))
+  {
+	  setMakeFromIndex(LIBRAW_CAMERAMAKER_Olympus);
+  }
   else if (makeIs(LIBRAW_CAMERAMAKER_Clauss) && (OlyID == OlyID_E_M10_Mark_II))
   {
 	  setMakeFromIndex(LIBRAW_CAMERAMAKER_Olympus);
-
   } else if (makeIs(LIBRAW_CAMERAMAKER_Canon) &&
              (!strncmp(model, "EOS D2000", 9) || // don't use unique_id here
               !strncmp(model, "EOS D6000", 9) || // because ids for Monochrome models are unknown
               !strncmp(model, "EOSDCS", 6))) {
     setMakeFromIndex(LIBRAW_CAMERAMAKER_Kodak);
 //    if (unique_id == CanonID_EOS_D2000C) {
 //
 //    } else if (unique_id  == CanonID_EOS_D6000C) {
 ///
 //    }
 
   } else if (makeIs(LIBRAW_CAMERAMAKER_PhotoControl) &&
              !strncasecmp(model, "Camerz ZDS 14", 13)) {
 	  setMakeFromIndex(LIBRAW_CAMERAMAKER_Kodak);
 
   } else {
     strcpy(normalized_make, make);
   }
 
   if (makeIs(LIBRAW_CAMERAMAKER_Apple)) {
     if ((imgdata.color.UniqueCameraModel[0]) &&
         (!strncmp(model, "iPad", 4) || !strncmp(model, "iPhone", 6)))
     strcpy(model, imgdata.color.UniqueCameraModel);
 
   } else if (makeIs(LIBRAW_CAMERAMAKER_Kodak)) {
     if ((model[6] == ' ') &&
         (!strncmp(model, "DCS4", 4) ||
          !strncmp(model, "NC2000", 6)))
     {
       model[6] = 0;
     }
     if ((model[6] != 'A') &&
         (model[6] != 'I') &&
         (model[6] != 'M') &&
         !strncmp(model, "NC2000", 6))
     {
       model[6] = 0;
     }
   }
 
   else if (makeIs(LIBRAW_CAMERAMAKER_Ricoh) &&
            !strncmp(model, "GXR", 3)) {
     strcpy(ilm.body, "Ricoh GXR");
     if (!imgdata.lens.Lens[0] && imgdata.color.UniqueCameraModel[0]) {
       strcpy (imgdata.lens.Lens, imgdata.color.UniqueCameraModel);
       remove_caseSubstr (imgdata.lens.Lens, (char *)"Ricoh");
       remove_caseSubstr (imgdata.lens.Lens, (char *)"Lens");
       removeExcessiveSpaces (imgdata.lens.Lens);
     }
     if (ilm.LensID == LIBRAW_LENS_NOT_SET) {
       if (strstr(imgdata.lens.Lens, "50mm"))
         ilm.LensID = 1;
       else if (strstr(imgdata.lens.Lens, "S10"))
         ilm.LensID = 2;
       else if (strstr(imgdata.lens.Lens, "P10"))
         ilm.LensID = 3;
       else if (strstr(imgdata.lens.Lens, "28mm"))
         ilm.LensID = 5;
       else if (strstr(imgdata.lens.Lens, "A16"))
         ilm.LensID = 6;
     }
     switch (ilm.LensID) {
     case 1: // GR Lens A12 50mm F2.5 Macro
       strcpy(model, "GXR A12 50mm");
       ilm.CameraFormat = ilm.LensFormat = LIBRAW_FORMAT_APSC;
       ilm.CameraMount = LIBRAW_MOUNT_RicohModule;
       ilm.LensMount = LIBRAW_MOUNT_FixedLens;
       ilm.FocalType = LIBRAW_FT_PRIME_LENS;
       break;
     case 2:
       strcpy(model, "GXR S10");
       ilm.CameraFormat = ilm.LensFormat = LIBRAW_FORMAT_1div1p7INCH;
       ilm.CameraMount = LIBRAW_MOUNT_RicohModule;
       ilm.LensMount = LIBRAW_MOUNT_FixedLens;
       ilm.FocalType = LIBRAW_FT_ZOOM_LENS;
       break;
     case 3: // Ricoh Lens P10 28-300mm F3.5-5.6 VC
       strcpy(model, "GXR P10");
       ilm.CameraFormat = ilm.LensFormat = LIBRAW_FORMAT_1div2p3INCH;
       ilm.CameraMount = LIBRAW_MOUNT_RicohModule;
       ilm.LensMount = LIBRAW_MOUNT_FixedLens;
       ilm.FocalType = LIBRAW_FT_ZOOM_LENS;
       break;
     case 5: // GR Lens A12 28mm F2.5
       strcpy(model, "GXR A12 28mm");
       ilm.CameraFormat = ilm.LensFormat = LIBRAW_FORMAT_APSC;
       ilm.CameraMount = LIBRAW_MOUNT_RicohModule;
       ilm.LensMount = LIBRAW_MOUNT_FixedLens;
       ilm.FocalType = LIBRAW_FT_PRIME_LENS;
       break;
     case 6: // Ricoh Lens A16 24-85mm F3.5-5.5
       strcpy(model, "GXR A16");
       ilm.CameraFormat = ilm.LensFormat = LIBRAW_FORMAT_APSC;
       ilm.CameraMount = LIBRAW_MOUNT_RicohModule;
       ilm.LensMount = LIBRAW_MOUNT_FixedLens;
       ilm.FocalType = LIBRAW_FT_ZOOM_LENS;
       break;
     case 8: // Ricoh Mount A12 (Leica M lenses)
       strcpy(model, "GXR Mount A12");
       ilm.CameraFormat = LIBRAW_FORMAT_APSC;
       ilm.CameraMount = LIBRAW_MOUNT_Leica_M;
       ilm.LensID = LIBRAW_LENS_NOT_SET;
       break;
     }
   }
 
   strcpy(normalized_model, model);
 
   if (makeIs(LIBRAW_CAMERAMAKER_Canon))
   {
     if (unique_id)
     {
       if ((unique_id != CanonID_EOS_D2000C) &&
           (unique_id != CanonID_EOS_D6000C))
       {
         for (i = 0; i < int(sizeof unique / sizeof *unique); i++)
         {
           if (unique_id == unique[i].id)
           {
             strcpy(model, unique[i].t_model);
             strcpy(normalized_model, unique[i].t_model);
             break;
           }
         }
       }
     }
     else
     {
       if ((dng_version) &&
           (strlen(imgdata.color.UniqueCameraModel) > 6) &&
           strncmp(imgdata.color.UniqueCameraModel+6, "PowerShot", 9))
       {
         for (i = 0; i < int(sizeof unique / sizeof *unique); i++)
         {
           if (!strcmp(unique[i].t_model, imgdata.color.UniqueCameraModel+6))
           {
             ilm.CamID = unique_id = unique[i].id;
             strcpy(normalized_model, unique[i].t_model);
             try_xml = 1;
             break;
           }
         }
       }
     }
   }
   else if (makeIs(LIBRAW_CAMERAMAKER_Fujifilm))
   {
     for (i = 0; i < int(sizeof fujialias / sizeof *fujialias); i++)
     {
       if (fujialias[i][0] == '@')
       {
         orig = fujialias[i] + 1;
         if (!strcmp(model, orig)) break;
       }
       else if (!strcmp(model, fujialias[i]))
       {
         strcpy(normalized_model, orig);
         break;
       }
     }
 
   } else if (makeIs(LIBRAW_CAMERAMAKER_Hasselblad)) {
     parseHassyModel();
   }
   else if (makeIs(LIBRAW_CAMERAMAKER_Mamiya))
   {
     for (i = 0; i < int(sizeof phase1alias / sizeof *phase1alias); i++)
     { // re-badged Phase One backs
       if (phase1alias[i][0] == '@') orig = phase1alias[i] + 1;
       else if (!strcmp(model, phase1alias[i]))
       {
         setMakeFromIndex(LIBRAW_CAMERAMAKER_PhaseOne);
         strcpy(normalized_model, orig);
         break;
       }
     }
     for (i = 0; i < int(sizeof leafalias / sizeof *leafalias); i++)
     { // re-badged Leaf backs
       if (leafalias[i][0] == '@') orig = leafalias[i] + 1;
       else if (!strcmp(model, leafalias[i]))
       {
         setMakeFromIndex(LIBRAW_CAMERAMAKER_Leaf);
         strcpy(normalized_model, orig);
         break;
       }
     }
 
     /* repeating, because make for some Mamiya re-badged Leaf backs is set to
      * Leaf */
   }
   else if (makeIs(LIBRAW_CAMERAMAKER_Leaf))
   {
     for (i = 0; i < int(sizeof leafalias / sizeof *leafalias); i++)
     { // re-badged Leaf backs
       if (leafalias[i][0] == '@')
       {
         orig = leafalias[i] + 1;
         if (!strcmp(model, orig)) break;
       }
       else if (!strcmp(model, leafalias[i]))
       { // maybe to change regular "make" to "Mamiya" too
         strcpy(normalized_model, orig);
         break;
       }
     }
     if ((ps = strchr(normalized_model, '(')))
       *ps = 0;
   }
   else if (makeIs(LIBRAW_CAMERAMAKER_Minolta) ||
            makeIs(LIBRAW_CAMERAMAKER_Konica))
   {
     if (makeIs(LIBRAW_CAMERAMAKER_Konica) && !strncasecmp(model, "DiMAGE", 6))
     {
       setMakeFromIndex(LIBRAW_CAMERAMAKER_Minolta);
       strcpy(make, "Minolta");
     }
     else
     {
       for (i = 0;
            i<int(sizeof KonicaMinolta_aliases / sizeof *KonicaMinolta_aliases);
            i++)
       {
         if (KonicaMinolta_aliases[i][0] == '@')
         {
           orig = KonicaMinolta_aliases[i] + 1;
           if (!strcmp(model, orig))
           {
             setMakeFromIndex(LIBRAW_CAMERAMAKER_Minolta);
             strcpy(make, "Minolta");
             break;
           }
         }
         else if (!strcasecmp(model, KonicaMinolta_aliases[i]))
         {
           setMakeFromIndex(LIBRAW_CAMERAMAKER_Minolta);
           strcpy(make, "Minolta");
           strcpy(normalized_model, orig);
           break;
         }
       }
     }
   }
   else if (makeIs(LIBRAW_CAMERAMAKER_Nikon))
   {
     for (i = 0; i < int(sizeof nikonalias / sizeof *nikonalias); i++)
     {
       if (nikonalias[i][0] == '@')
       {
         orig = nikonalias[i] + 1;
         if (!strcmp(model, orig)) break;
       }
       else if (!strcmp(model, nikonalias[i]))
       {
         strcpy(normalized_model, orig);
         break;
       }
     }
 
   } else if (makeIs(LIBRAW_CAMERAMAKER_Olympus)) {
     for (i = 0; i < int(sizeof olyalias / sizeof *olyalias); i++) {
       if (olyalias[i][0] == '@') {
         orig = olyalias[i] + 1;
         if (!strcmp(model, orig)) break;
       } else if (!strcmp(model, olyalias[i])) {
         strcpy(normalized_model, orig);
         break;
       }
     }
 
     if (!OlyID) {
       if (!strcmp(normalized_model, "C-740UZ")) {
         ilm.CamID = OlyID = unique_id = OlyID_C_740UZ;
 
       } else if (!strcmp(normalized_model, "C-770UZ")) {
         ilm.CamID = OlyID = unique_id = OlyID_C_770UZ;
       }
     }
 
   } else if (makeIs(LIBRAW_CAMERAMAKER_Panasonic) ||
              makeIs(LIBRAW_CAMERAMAKER_Leica) ||
              makeIs(LIBRAW_CAMERAMAKER_Yuneec))
   {
     for (i = 0; i < int(sizeof panalias / sizeof *panalias); i++)
     {
       if (panalias[i][0] == '@')
       {
         orig = panalias[i] + 1;
         if (!strcmp(model, orig)) break;
       }
       else if (!strcmp(model, panalias[i]))
       {
         setMakeFromIndex(LIBRAW_CAMERAMAKER_Panasonic);
         strcpy(normalized_model, orig);
         break;
       }
     }
   } else if (makeIs(LIBRAW_CAMERAMAKER_Pentax)) {
     if (!unique_id) {
       if (!strcmp(model, "Optio S")) {
         ilm.CamID = unique_id = PentaxID_Optio_S;
       } else if (!strcmp(model, "Optio S V1.01")) {
         ilm.CamID = unique_id = PentaxID_Optio_S_V101;
       } else if (!strcmp(model, "Optio S4")) {
         ilm.CamID = unique_id = PentaxID_Optio_S4;
       } else if (!strcmp(model, "Optio 750Z")) {
         ilm.CamID = unique_id = PentaxID_Optio_750Z;
       } else if (!strcmp(model, "Optio 33WR")) {
         ilm.CamID = unique_id = PentaxID_Optio_33WR;
       }
     }
 
     for (i = 0;
     i < int(sizeof SamsungPentax_aliases / sizeof *SamsungPentax_aliases);
     i++) {
       if (SamsungPentax_aliases[i][0] == '@') {
         orig = SamsungPentax_aliases[i] + 1;
         if (!strcmp(model, orig)) break;
       } else if (!strcmp(model, SamsungPentax_aliases[i])) {
         strcpy(normalized_model, orig);
         break;
       }
     }
     if (!strncmp(model, "GR", 2)) {
 	  setMakeFromIndex(LIBRAW_CAMERAMAKER_Ricoh);
       strcpy(make, "Ricoh");
     }
 
   } else if (makeIs(LIBRAW_CAMERAMAKER_PhaseOne))
   {
     for (i = 0; i < int(sizeof phase1alias / sizeof *phase1alias); i++)
     {
       if (phase1alias[i][0] == '@')
       {
         orig = phase1alias[i] + 1;
         if (!strcmp(model, orig)) break;
       }
       else if (!strcmp(model, phase1alias[i]))
       {
         strcpy(normalized_model, orig);
         break;
       }
     }
   }
   else if (makeIs(LIBRAW_CAMERAMAKER_Samsung))
   {
     j = 0;
     if (strstr(model, "WB5500") || strstr(model, "HZ50W"))
     {
       strcpy(model, "WB5500");
       j++;
     }
     else if (strstr(model, "WB5000") || strstr(model, "HZ25W"))
     {
       strcpy(model, "WB5000");
       j++;
     }
     else if (strstr(model, "WB550") || strstr(model, "HZ15W"))
     {
       strcpy(model, "WB550");
       j++;
     }
     else if (strstr(model, "WB500") || strstr(model, "HZ10W"))
     {
       strcpy(model, "WB500");
       j++;
     }
     if (j)
     {
       strcpy(normalized_model, model);
     }
     else
     {
       for (i = 0; i < int(sizeof samsungalias / sizeof *samsungalias); i++)
       {
         if (samsungalias[i][0] == '@')
         {
           orig = samsungalias[i] + 1;
           if (!strcmp(model, orig)) break;
         }
         else if (!strcmp(model, samsungalias[i]))
         {
           strcpy(normalized_model, orig);
           break;
         }
       }
     }
 
   } else if (makeIs(LIBRAW_CAMERAMAKER_Sony)) {
     if (unique_id)
     {
       for (i = 0; i < int(sizeof sonique / sizeof *sonique); i++)
       {
         if (unique_id == sonique[i].id)
         {
           if (!strcmp(make, "Sony"))
             strcpy(model, sonique[i].t_model);
           strcpy(normalized_model, sonique[i].t_model);
           break;
         }
       }
     }
 
   } else if (makeIs(LIBRAW_CAMERAMAKER_Kodak)) {
     remove_caseSubstr (normalized_model, (char *)"EasyShare");
     remove_caseSubstr (normalized_model, (char *)"ZOOM");
     removeExcessiveSpaces (normalized_model);
     for (i = 0; i < int(sizeof kodakalias / sizeof *kodakalias); i++)
     {
       if (kodakalias[i][0] == '@')
       {
         orig = kodakalias[i] + 1;
         if (!strcmp(model, orig)) break;
       }
       else if (!strcmp(model, kodakalias[i]))
       {
         strcpy(normalized_model, orig);
         break;
       }
     }
 
     if (strstr(model, "DC25"))
     {
       strcpy(model, "DC25");
       strcpy(normalized_model, model);
     }
     else if (!strcmp(model, "40"))
     {
       strcpy(model, "DC40");
       strcpy(normalized_model, model);
     }
     else if (strstr(model, "DC50"))
     {
       strcpy(model, "DC50");
       strcpy(normalized_model, model);
     }
     else if (strstr(model, "DC120"))
     {
       strcpy(model, "DC120");
       strcpy(normalized_model, model);
     }
 
     for (i = 0; i < int(sizeof KodakMonochrome / sizeof *KodakMonochrome); i++)
     {
       if (!strncmp(model, KodakMonochrome[i], strlen(KodakMonochrome[i])))
       {
         colors = 1;
         filters = 0;
       }
     }
   }
 
   if (ilm.body[0])
   {
     if ((ilm.CameraMount != LIBRAW_MOUNT_Hasselblad_V) &&
         !strncmp(ilm.body, "Hasselblad ", 11) &&
         ((ilm.body[11] == 'C') || (ilm.body[11] == '2') ||
          (ilm.body[11] == '5') || (ilm.body[11] == '9')))
     {
       ilm.CameraFormat = LIBRAW_FORMAT_66;
       ilm.CameraMount = LIBRAW_MOUNT_Hasselblad_V;
     }
     else if (!strncmp(ilm.body, "XF", 2) || !strncmp(ilm.body, "645DF", 5))
     {
       ilm.CameraMount = LIBRAW_MOUNT_Mamiya645;
       ilm.CameraFormat = LIBRAW_FORMAT_645;
     }
     else if (!strncmp(ilm.body, "Sinarcam", 2))
     {
       ilm.CameraMount = LIBRAW_MOUNT_LF;
       ilm.CameraFormat = LIBRAW_FORMAT_LF;
       strcat(ilm.body, " shutter system");
     }
   }
 
   if (makeIs(LIBRAW_CAMERAMAKER_Kodak))
   {
     if (((ilm.CameraMount == LIBRAW_MOUNT_DigitalBack) ||
          (ilm.CameraMount == LIBRAW_MOUNT_Unknown)) &&
         !strncmp(model2, "PB645", 5))
     {
       ilm.CameraFormat = LIBRAW_FORMAT_645;
       if (model2[5] == 'C')
       {
         ilm.CameraMount = LIBRAW_MOUNT_Contax645;
         strcpy(ilm.body, "Contax 645");
       }
       else if (model2[5] == 'H')
       {
         ilm.CameraMount = LIBRAW_MOUNT_Hasselblad_H;
         strcpy(ilm.body, "Hasselblad H1/H2");
       }
       else if (model2[5] == 'M')
       {
         ilm.CameraMount = LIBRAW_MOUNT_Mamiya645;
         strcpy(ilm.body, "Mamiya 645");
       }
 
     } else if (!strncasecmp(model, "PIXPRO S-1", 10)) {
       ilm.CameraFormat = LIBRAW_FORMAT_FT;
     } else if (!strncasecmp(model, "PIXPRO ", 7)) {
       ilm.CameraFormat = LIBRAW_FORMAT_1div2p3INCH;
     }
   }
 
   else if (makeIs(LIBRAW_CAMERAMAKER_Fujifilm))
   {
     if (!strncmp(normalized_model, "DBP", 3))
     {
       strcpy(ilm.body, "Fujifilm GX680");
     }
   }
 
   if ((ilm.CameraFormat == LIBRAW_FORMAT_Unknown) ||
       (ilm.CameraMount == LIBRAW_MOUNT_Unknown) ||
       (ilm.CameraMount == LIBRAW_MOUNT_IL_UM))
   {
 
     if (makeIs(LIBRAW_CAMERAMAKER_Canon))
     {
       if (strncmp(normalized_model, "EOS", 3))
       {
         ilm.CameraMount = LIBRAW_MOUNT_FixedLens;
       }
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Nikon))
     {
       if (normalized_model[0] == 'D')
       {
         ilm.CameraMount = LIBRAW_MOUNT_Nikon_F;
       }
       else
       {
         ilm.CameraMount = LIBRAW_MOUNT_FixedLens;
       }
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Panasonic))
     {
       if (!strncmp(normalized_model, "DC-S", 4))
       {
         ilm.CameraFormat = LIBRAW_FORMAT_FF;
         ilm.CameraMount = LIBRAW_MOUNT_LPS_L;
       }
       else if (!strncmp(normalized_model, "DMC-L1", 6) ||
                !strncmp(normalized_model, "DMC-L10", 7))
       {
         ilm.CameraFormat = ilm.CameraMount = LIBRAW_FORMAT_FT;
       }
       else if (!strncmp(normalized_model + 2, "-G", 2) ||
                !strncmp(normalized_model + 3, "-G", 2))
       {
         ilm.CameraFormat = LIBRAW_FORMAT_FT;
         ilm.CameraMount = LIBRAW_MOUNT_mFT;
       }
       else
       {
         ilm.CameraMount = LIBRAW_MOUNT_FixedLens;
         ilm.FocalType = LIBRAW_FT_ZOOM_LENS;
         if (!strncmp(normalized_model + 2, "-LX100", 6) || // DC-LX100M2
             !strncmp(normalized_model + 3, "-LX100", 6))
         { // DMC-LX100
           ilm.CameraFormat = ilm.LensFormat = LIBRAW_FORMAT_FT;
         }
         else if (!strncmp(normalized_model, "DMC-CM1", 7))
         {
           ilm.FocalType = LIBRAW_FT_PRIME_LENS;
         }
       }
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Fujifilm))
     {
       if (!strncmp(normalized_model, "GFX ", 4))
       {
         ilm.CameraFormat = LIBRAW_FORMAT_CROP645;
         ilm.CameraMount = LIBRAW_MOUNT_Fuji_GF;
       }
       else if (!strncmp(normalized_model, "X-", 2) &&
                (strncmp(normalized_model, "X-S1", 4) || !strncmp(normalized_model, "X-S10", 5)))
       {
         ilm.CameraFormat = LIBRAW_FORMAT_APSC;
         ilm.CameraMount = LIBRAW_MOUNT_Fuji_X;
       }
       else if (((normalized_model[0] == 'S') && // S2Pro, S3Pro, S5Pro
                 (normalized_model[2] == 'P')) ||
                !strncasecmp(normalized_model, "IS Pro", 6))
       {
         ilm.CameraFormat = LIBRAW_FORMAT_APSC;
         ilm.CameraMount = LIBRAW_MOUNT_Nikon_F;
       }
       else if (!strncmp(normalized_model, "DBP", 3))
       {
         ilm.CameraFormat = LIBRAW_FORMAT_68;
         ilm.CameraMount = LIBRAW_MOUNT_Fuji_GX;
       }
       else
       {
         ilm.CameraMount = LIBRAW_MOUNT_FixedLens;
       }
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Samsung))
     {
       if ((normalized_model[0] == 'N') &&
           (normalized_model[1] == 'X')) // DNG converters delete makernotes
       {
         if ((normalized_model[2] == 'F') && (normalized_model[3] == '1'))
         {
           ilm.CameraMount = LIBRAW_MOUNT_Samsung_NX_M;
           ilm.CameraFormat = LIBRAW_FORMAT_1INCH;
         }
         else
         {
           ilm.CameraMount = LIBRAW_MOUNT_Samsung_NX;
           ilm.CameraFormat = LIBRAW_FORMAT_APSC;
         }
       }
       else
       {
         ilm.CameraMount = LIBRAW_MOUNT_FixedLens;
       }
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Kodak))
     {
       ilm.CameraMount = LIBRAW_MOUNT_FixedLens;
       for (i = 0; i < int(sizeof Kodak_mounts / sizeof *Kodak_mounts); i++)
       {
         if (!strncmp(normalized_model, Kodak_mounts[i].Kmodel,
                      strlen(Kodak_mounts[i].Kmodel)))
         {
           ilm.CameraMount = Kodak_mounts[i].mount;
           break;
         }
       }
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Minolta))
     {
       if (!strcmp(normalized_model, "DG-5D") ||
           !strcmp(normalized_model, "DG-7D"))
       {
         ilm.CameraFormat = LIBRAW_FORMAT_APSC;
         ilm.CameraMount = LIBRAW_MOUNT_Minolta_A;
       }
       else if (!strncasecmp(normalized_model, "DiMAGE", 6))
       {
         ilm.CameraMount = LIBRAW_MOUNT_FixedLens;
       }
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Casio) ||
              makeIs(LIBRAW_CAMERAMAKER_Creative))
     {
       ilm.CameraMount = LIBRAW_MOUNT_FixedLens;
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Sigma))
     {
       if (!strncmp(normalized_model, "fp", 2))
       {
         ilm.CameraFormat = LIBRAW_FORMAT_FF;
         ilm.CameraMount = LIBRAW_MOUNT_LPS_L;
       }
       else if (!strncasecmp(normalized_model, "SD", 2))
       {
         ilm.CameraMount = LIBRAW_MOUNT_Sigma_X3F;
         if (!strcmp(normalized_model, "SD1") || (normalized_model[4] == 'M'))
         {
           ilm.CameraFormat = LIBRAW_FORMAT_SigmaMerrill;
         }
         else if (normalized_model[11] == 'H')
         { // 'sd Quattro H'
           ilm.CameraFormat = LIBRAW_FORMAT_SigmaAPSH;
         }
         else if (normalized_model[4] == 'Q')
         { // 'sd Quattro'
           ilm.CameraFormat = LIBRAW_FORMAT_APSC;
         }
         else
         {
           ilm.CameraFormat = LIBRAW_FORMAT_SigmaAPSC;
         }
       }
       else if (!strncasecmp(normalized_model, "DP", 2))
       {
         ilm.CameraMount = LIBRAW_MOUNT_FixedLens;
         if (normalized_model[4] == 'M')
         {
           ilm.CameraFormat = LIBRAW_FORMAT_SigmaMerrill;
         }
         else if (normalized_model[4] == 'Q')
         {
           ilm.CameraFormat = LIBRAW_FORMAT_APSC;
         }
         else
         {
           ilm.CameraFormat = LIBRAW_FORMAT_SigmaAPSC;
         }
       }
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Konica))
     {
       if (!strncmp(model, "KD-", 3))
       { // Konica KD-400Z, KD-510Z
         ilm.CameraMount = LIBRAW_MOUNT_FixedLens;
       }
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Mamiya))
     {
       if (!strncmp(normalized_model, "ZD", 2))
       {
         ilm.CameraFormat = LIBRAW_FORMAT_3648;
         ilm.CameraMount = LIBRAW_MOUNT_Mamiya645;
       }
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Sony))
     {
       if (!strncmp(normalized_model, "XCD-", 4))
       {
         ilm.CameraMount = LIBRAW_MOUNT_C;
       }
       else if (!strncmp(normalized_model, "DSC-V3", 6) ||
                !strncmp(normalized_model, "DSC-F828", 8))
       {
         ilm.CameraMount = LIBRAW_MOUNT_FixedLens;
         imSony.CameraType = LIBRAW_SONY_DSC;
       }
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Polaroid) &&
              !strncmp(normalized_model, "x530", 4))
     {
       ilm.CameraMount = LIBRAW_MOUNT_FixedLens;
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Rollei) &&
              !strncmp(normalized_model, "d530flex", 8))
     {
       ilm.CameraMount = LIBRAW_MOUNT_FixedLens;
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Pentax) &&
              !strncmp(normalized_model, "Optio", 5)) {
         ilm.CameraMount = LIBRAW_MOUNT_FixedLens;
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Epson) &&
              !strncmp(normalized_model, "R-D1", 4))
     {
       ilm.CameraMount = LIBRAW_MOUNT_Leica_M;
       ilm.CameraFormat = LIBRAW_FORMAT_APSC;
     }
   }
 
   if ((ilm.LensMount == LIBRAW_MOUNT_Canon_RF) &&
       (ilm.LensID == 61182)                    &&
       (imCanon.RF_lensID != 0))                {
     ilm.LensID = imCanon.RF_lensID;
   }
 
   if (ilm.LensMount == LIBRAW_MOUNT_Unknown)
   {
     if (makeIs(LIBRAW_CAMERAMAKER_Samsung))
     {
       if ((imgdata.lens.Lens[0] == 'N') &&
           (imgdata.lens.Lens[1] == 'X')) // same DNG problem
       {
         if (imgdata.lens.Lens[2] == '-')
         {
           ilm.LensMount = LIBRAW_MOUNT_Samsung_NX_M;
           ilm.LensFormat = LIBRAW_FORMAT_1INCH;
         }
         else
         {
           ilm.LensMount = LIBRAW_MOUNT_Samsung_NX;
           ilm.LensFormat = LIBRAW_FORMAT_APSC;
         }
       }
     }
   }
 
   if ((ilm.LensID == LIBRAW_LENS_NOT_SET) &&
       xmpdata &&
       (strlen(xmpdata) > 9))
   {
     if (makeIs(LIBRAW_CAMERAMAKER_Canon) &&
         try_xml &&
         (ps = strstr(xmpdata, "LensID=\"")))
     {
       ilm.LensID = atoi(ps + 8);
       if (ilm.LensID == 61182)
       {
         ilm.LensMount = ilm.CameraMount = LIBRAW_MOUNT_Canon_RF;
       }
     }
     else if (makeIs(LIBRAW_CAMERAMAKER_Samsung))
     {
       if ((ilm.LensMount == LIBRAW_MOUNT_Samsung_NX) &&
           (ps = strstr(xmpdata, "LensID=\"(")))
       {
         ilm.LensID = atoi(ps + 9);
       }
     }
   }
 
   if (ilm.CameraMount == LIBRAW_MOUNT_FixedLens)
   {
     if (ilm.CameraFormat)
       ilm.LensFormat = ilm.CameraFormat;
     if (ilm.LensMount == LIBRAW_MOUNT_Unknown)
       ilm.LensMount = LIBRAW_MOUNT_FixedLens;
   }
 
   if ((ilm.CameraMount != LIBRAW_MOUNT_Unknown) &&
       (ilm.CameraMount != LIBRAW_MOUNT_FixedLens) &&
       (ilm.LensMount == LIBRAW_MOUNT_Unknown)) {
     if (ilm.LensID == LIBRAW_LENS_NOT_SET) ilm.LensMount = LIBRAW_MOUNT_IL_UM;
     else ilm.LensMount = ilm.CameraMount;
     }
 }
@@ -1418,23 +1421,23 @@ void LibRaw::GetNormalizedModel()
 void LibRaw::SetStandardIlluminants (unsigned makerIdx, const char* normModel) {
   int i = -1;
   int c;
   if (!icWBC[LIBRAW_WBI_Ill_A][0] &&
       !icWBC[LIBRAW_WBI_D65][0]) {
-    if (makerIdx == LIBRAW_CAMERAMAKER_Olympus) {
+    if (makerIdx == LIBRAW_CAMERAMAKER_Olympus ) {
       while (++i, icWBCCTC[i][0]) {
         if (icWBCCTC[i][0] == 3000)
           FORC4 icWBC[LIBRAW_WBI_Ill_A][c] = icWBCCTC[i][c+1];
         else if (icWBCCTC[i][0] == 6600)
           FORC4 icWBC[LIBRAW_WBI_D65][c] = icWBCCTC[i][c+1];
       }
     }
   }
 
   if (!icWBC[LIBRAW_WBI_Ill_A][0] && icWBC[LIBRAW_WBI_Tungsten][0])
     FORC4 icWBC[LIBRAW_WBI_Ill_A][c] = icWBC[LIBRAW_WBI_Tungsten][c];
 
   if (!icWBC[LIBRAW_WBI_D65][0] && icWBC[LIBRAW_WBI_FL_N][0])
     FORC4 icWBC[LIBRAW_WBI_D65][c] = icWBC[LIBRAW_WBI_FL_N][c];
 
   return;
 }
diff --git a/src/metadata/tiff.cpp b/src/metadata/tiff.cpp
index 29523f53..9e5357b2 100644
--- a/src/metadata/tiff.cpp
+++ b/src/metadata/tiff.cpp
@@ -1568,553 +1568,553 @@ int ifd_size_t_cmp(const void *a, const void *b)
 void LibRaw::apply_tiff()
 {
   int max_samp = 0, ties = 0, raw = -1, thm = -1, i;
   unsigned long long ns, os;
   struct jhead jh;
 
   thumb_misc = 16;
   if (thumb_offset)
   {
     fseek(ifp, thumb_offset, SEEK_SET);
     if (ljpeg_start(&jh, 1))
     {
       if ((unsigned)jh.bits < 17 && (unsigned)jh.wide < 0x10000 &&
           (unsigned)jh.high < 0x10000)
       {
         thumb_misc = jh.bits;
         thumb_width = jh.wide;
         thumb_height = jh.high;
       }
     }
   }
   for (i = tiff_nifds; i--;)
   {
     if (tiff_ifd[i].t_shutter)
       shutter = tiff_ifd[i].t_shutter;
     tiff_ifd[i].t_shutter = shutter;
   }
 
   if (dng_version)
   {
     int ifdc = 0;
     for (i = 0; i < (int)tiff_nifds; i++)
     {
       if (tiff_ifd[i].t_width < 1 || tiff_ifd[i].t_width > 65535 ||
           tiff_ifd[i].t_height < 1 || tiff_ifd[i].t_height > 65535)
         continue; /* wrong image dimensions */
 
       int samp = tiff_ifd[i].samples;
       if (samp == 2)
         samp = 1; // Fuji 2-frame
       max_samp = LIM(MAX(max_samp, samp), 1,
                      3); // max_samp is needed for thumbnail selection below
 
       if (tiff_ifd[i].phint != 32803 && tiff_ifd[i].phint != 34892)
         continue;
 
       if ((tiff_ifd[i].newsubfiletype == 0) // main image
                                             // Enhanced demosaiced:
           || (tiff_ifd[i].newsubfiletype == 16 &&
               (imgdata.rawparams.options & LIBRAW_RAWOPTIONS_DNG_ADD_ENHANCED))
           // Preview: 0x1 or 0x10001
           || ((tiff_ifd[i].newsubfiletype & 0xffff) == 1 &&
               (imgdata.rawparams.options & LIBRAW_RAWOPTIONS_DNG_ADD_PREVIEWS)))
       {
         // Add this IFD to dng_frames
         libraw_internal_data.unpacker_data.dng_frames[ifdc] =
             ((tiff_ifd[i].newsubfiletype & 0xffff) << 16) | ((i << 8) & 0xff00);
         ifdc++;
         // Fuji SuperCCD: second frame:
         if ((tiff_ifd[i].newsubfiletype == 0) && tiff_ifd[i].samples == 2)
         {
           libraw_internal_data.unpacker_data.dng_frames[ifdc] =
               ((tiff_ifd[i].newsubfiletype & 0xffff) << 16) |
               ((i << 8) & 0xff00) | 1;
           ifdc++;
         }
       }
     }
     if (ifdc)
     {
       if (ifdc > 1 && (imgdata.rawparams.options & LIBRAW_RAWOPTIONS_DNG_PREFER_LARGEST_IMAGE))
       {
         ifd_size_t arr[LIBRAW_IFD_MAXCOUNT * 2];
         memset(arr, 0, sizeof(arr));
         for (int i = 0; i < ifdc && i < LIBRAW_IFD_MAXCOUNT * 2; i++)
         {
           int ifdidx =
               (libraw_internal_data.unpacker_data.dng_frames[i] >> 8) & 0xff;
           arr[i].ifdi = libraw_internal_data.unpacker_data.dng_frames[i];
           arr[i].databits =
               tiff_ifd[ifdidx].t_width * tiff_ifd[ifdidx].t_height *
                   tiff_ifd[ifdidx].samples * tiff_ifd[ifdidx].bps +
               (0x100 -
                (arr[i].ifdi & 0xff)); // add inverted frame # to ensure same
                                       // sort order for similar sized frames.
         }
         qsort(arr, MIN(ifdc, LIBRAW_IFD_MAXCOUNT * 2), sizeof(arr[0]),
               ifd_size_t_cmp);
         for (int i = 0; i < ifdc && i < LIBRAW_IFD_MAXCOUNT * 2; i++)
           libraw_internal_data.unpacker_data.dng_frames[i] = arr[i].ifdi;
       }
 
       int idx = LIM((int)shot_select, 0, ifdc - 1);
       i = (libraw_internal_data.unpacker_data.dng_frames[idx] >> 8) &
           0xff; // extract frame# back
 
       raw_width = tiff_ifd[i].t_width;
       raw_height = tiff_ifd[i].t_height;
       tiff_bps = tiff_ifd[i].bps;
       tiff_compress = tiff_ifd[i].comp;
       tiff_sampleformat = tiff_ifd[i].sample_format;
       data_offset = tiff_ifd[i].offset;
       data_size = tiff_ifd[i].bytes;
       tiff_flip = tiff_ifd[i].t_flip;
       tiff_samples = tiff_ifd[i].samples;
       tile_width = tiff_ifd[i].t_tile_width;
       tile_length = tiff_ifd[i].t_tile_length;
       fuji_width = tiff_ifd[i].t_fuji_width;
       if (tiff_samples != 2) /* special case: Fuji SuperCCD */
       {
         if (tiff_ifd[i].phint == 34892)
           filters = 0;
         else if (i > 0 && tiff_ifd[i].phint == 32803 &&
                  tiff_ifd[0].phint == 32803 && !tiff_ifd[i].t_filters &&
                  tiff_ifd[0].t_filters)
           filters = tiff_ifd[0].t_filters;
         else
           filters = tiff_ifd[i].t_filters;
         width = tiff_ifd[i].t_vwidth;
         height = tiff_ifd[i].t_vheight;
         top_margin = tiff_ifd[i].t_tm;
         left_margin = tiff_ifd[i].t_lm;
         shutter = tiff_ifd[i].t_shutter;
         if (tiff_ifd[i].dng_levels.dng_whitelevel[0])
           maximum = tiff_ifd[i].dng_levels.dng_whitelevel[0];
         else if (tiff_ifd[i].sample_format <= 2 && tiff_bps > 0 &&
                  tiff_bps < 32) // SampleFormat: 0-default(1), 1 - Uint, 2 - Int
           maximum = (1 << tiff_bps) - 1;
         else if (tiff_ifd[i].sample_format == 3)
           maximum = 1; // Defaults for FP
       }
       raw = i;
       is_raw = ifdc;
     }
     else
       is_raw = 0;
   }
   else
   {
     // Fix for broken Sony bps tag
     if (!strncasecmp(make, "Sony", 4))
     {
         for (i = 0; i < (int)tiff_nifds; i++)
         {
             if (tiff_ifd[i].bps > 33 && tiff_ifd[i].samples == 1)
             {
                 int bps = 14; // default
                 if (tiff_ifd[i].dng_levels.dng_whitelevel[0] > 0)
                 {
                     for(int c = 0,j=1; c < 16; c++, j<<=1)
                         if (j > (int)tiff_ifd[i].dng_levels.dng_whitelevel[0])
                         {
                             bps = c; break;
                         }
                 }
                 tiff_ifd[i].bps = bps;
             }
         }
     }
 
     for (i = 0; i < (int)tiff_nifds; i++)
     {
       if (tiff_ifd[i].t_width < 1 || tiff_ifd[i].t_width > 65535 ||
           tiff_ifd[i].t_height < 1 || tiff_ifd[i].t_height > 65535)
         continue; /* wrong image dimensions */
       if (max_samp < tiff_ifd[i].samples)
         max_samp = tiff_ifd[i].samples;
       if (max_samp > 3)
         max_samp = 3;
 
       os = unsigned(raw_width) * unsigned(raw_height);
       ns = unsigned(tiff_ifd[i].t_width) * unsigned(tiff_ifd[i].t_height);
       if (tiff_bps)
       {
         os *= tiff_bps;
         ns *= tiff_ifd[i].bps;
       }
       /* too complex if below, so separate if to skip RGB+Alpha TIFFs*/
       if (tiff_ifd[i].phint == 2 && tiff_ifd[i].extrasamples > 0 && tiff_ifd[i].samples > 3)
           continue; // SKIP RGB+Alpha IFDs
 
       if ((tiff_ifd[i].comp != 6 || tiff_ifd[i].samples != 3) &&
             unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&
             (unsigned)tiff_ifd[i].bps < 33 &&
             (unsigned)tiff_ifd[i].samples < 13 && ns &&
             ((ns > os && (ties = 1)) || (ns == os && (int)shot_select == ties++)))
       {
         raw_width = tiff_ifd[i].t_width;
         raw_height = tiff_ifd[i].t_height;
         tiff_bps = tiff_ifd[i].bps;
         tiff_compress = tiff_ifd[i].comp;
         tiff_sampleformat = tiff_ifd[i].sample_format;
         data_offset = tiff_ifd[i].offset;
         data_size = tiff_ifd[i].bytes;
         tiff_flip = tiff_ifd[i].t_flip;
         tiff_samples = tiff_ifd[i].samples;
         tile_width = tiff_ifd[i].t_tile_width;
         tile_length = tiff_ifd[i].t_tile_length;
         shutter = tiff_ifd[i].t_shutter;
         raw = i;
       }
     }
     if (is_raw == 1 && ties)
       is_raw = ties;
   }
   if (is_NikonTransfer && raw >= 0)
   {
     if (tiff_ifd[raw].bps == 16)
     {
       if (tiff_compress == 1)
       {
         if ((raw_width * raw_height * 3) == (tiff_ifd[raw].bytes << 1))
         {
           tiff_bps = tiff_ifd[raw].bps = 12;
         }
         else
         {
           tiff_bps = tiff_ifd[raw].bps = 14;
         }
       }
     }
     else if (tiff_ifd[raw].bps == 8)
     {
       if (tiff_compress == 1)
       {
         is_NikonTransfer = 2; // 8-bit debayered TIFF, like CoolScan NEFs
         imgdata.rawparams.coolscan_nef_gamma = 2.2f;
       }
     }
   }
 
   if (!tile_width)
     tile_width = INT_MAX;
   if (!tile_length)
     tile_length = INT_MAX;
   for (i = tiff_nifds; i--;)
     if (tiff_ifd[i].t_flip)
       tiff_flip = tiff_ifd[i].t_flip;
 
 #if 0
   if (raw < 0 && is_raw)
       is_raw = 0;
 #endif
 
   if (raw >= 0 && !load_raw)
     switch (tiff_compress)
     {
     case 32767:
       if (!dng_version &&
           INT64(tiff_ifd[raw].bytes) == INT64(raw_width) * INT64(raw_height))
       {
         tiff_bps = 14;
         load_raw = &LibRaw::sony_arw2_load_raw;
         break;
       }
       if (!dng_version && !strncasecmp(make, "Sony", 4) &&
           INT64(tiff_ifd[raw].bytes) ==
               INT64(raw_width) * INT64(raw_height) * 2LL)
       {
         tiff_bps = 14;
         load_raw = &LibRaw::unpacked_load_raw;
         break;
       }
       if (INT64(tiff_ifd[raw].bytes) * 8ULL !=
           INT64(raw_width) * INT64(raw_height) * INT64(tiff_bps))
       {
         raw_height += 8;
         load_raw = &LibRaw::sony_arw_load_raw;
         break;
       }
       load_flags = 79;
     case 32769:
       load_flags++;
     case 32770:
     case 32773:
       goto slr;
     case 0:
     case 1:
         if (dng_version && tiff_sampleformat == 3 &&
           (tiff_bps > 8 && (tiff_bps % 8 == 0) && (tiff_bps <= 32))) // only 16,24, and 32 are allowed
         {
             load_raw = &LibRaw::uncompressed_fp_dng_load_raw;
             break;
         }
       // Sony 14-bit uncompressed
       if (!dng_version && !strncasecmp(make, "Sony", 4) &&
           INT64(tiff_ifd[raw].bytes) ==
               INT64(raw_width) * INT64(raw_height) * 2LL)
       {
         tiff_bps = 14;
         load_raw = &LibRaw::unpacked_load_raw;
         break;
       }
       if (!dng_version && !strncasecmp(make, "Sony", 4) &&
           tiff_ifd[raw].samples == 4 &&
           INT64(tiff_ifd[raw].bytes) ==
               INT64(raw_width) * INT64(raw_height) * 8LL) // Sony ARQ
       {
         // maybe to detect ARQ with the following:
         // if (tiff_ifd[raw].phint == 32892)
         tiff_bps = 14;
         tiff_samples = 4;
         load_raw = &LibRaw::sony_arq_load_raw;
         filters = 0;
         strcpy(cdesc, "RGBG");
         break;
       }
       if (!strncasecmp(make, "Nikon", 5) &&
           (!strncmp(software, "Nikon Scan", 10) || (is_NikonTransfer == 2) ||
            strcasestr(model, "COOLSCAN")))
       {
         load_raw = &LibRaw::nikon_coolscan_load_raw;
         raw_color = 1;
         filters = 0;
         break;
       }
-      if ((!strncmp(make, "OLYMPUS", 7) ||
+      if ((!strncmp(make, "OLYMPUS", 7) || !strncmp(make, "OM Digi", 7) ||
            (!strncasecmp(make, "CLAUSS", 6) &&
             !strncasecmp(model, "piX 5oo", 7))) && // 0x5330303539 works here
           (INT64(tiff_ifd[raw].bytes) * 2ULL ==
            INT64(raw_width) * INT64(raw_height) * 3ULL))
         load_flags = 24;
       if (!dng_version && INT64(tiff_ifd[raw].bytes) * 5ULL ==
                               INT64(raw_width) * INT64(raw_height) * 8ULL)
       {
         load_flags = 81;
         tiff_bps = 12;
       }
     slr:
       switch (tiff_bps)
       {
       case 8:
         load_raw = &LibRaw::eight_bit_load_raw;
         break;
       case 12:
         if (tiff_ifd[raw].phint == 2)
           load_flags = 6;
         if (!strncasecmp(make, "NIKON", 5) &&
             !strncasecmp(model, "COOLPIX A1000", 13) &&
             data_size == raw_width * raw_height * 2)
           load_raw = &LibRaw::unpacked_load_raw;
         else
           load_raw = &LibRaw::packed_load_raw;
         break;
       case 14:
         load_flags = 0;
       case 16:
         load_raw = &LibRaw::unpacked_load_raw;
-        if ((!strncmp(make, "OLYMPUS", 7) ||
+        if ((!strncmp(make, "OLYMPUS", 7) || !strncmp(make, "OM Digi", 7) ||
              (!strncasecmp(make, "CLAUSS", 6) &&
               !strncasecmp(model, "piX 5oo", 7))) && // 0x5330303539 works here
             (INT64(tiff_ifd[raw].bytes) * 7ULL >
              INT64(raw_width) * INT64(raw_height)))
           load_raw = &LibRaw::olympus_load_raw;
       }
       break;
     case 6:
     case 7:
     case 99:
       if (!dng_version && tiff_compress == 6 && !strcasecmp(make, "SONY"))
         load_raw = &LibRaw::sony_ljpeg_load_raw;
       else
         load_raw = &LibRaw::lossless_jpeg_load_raw;
       break;
     case 262:
       load_raw = &LibRaw::kodak_262_load_raw;
       break;
     case 34713:
       if ((INT64(raw_width) + 9LL) / 10LL * 16LL * INT64(raw_height) ==
           INT64(tiff_ifd[raw].bytes))
       {
         load_raw = &LibRaw::packed_load_raw;
         load_flags = 1;
       }
       else if (INT64(raw_width) * INT64(raw_height) * 3LL ==
                INT64(tiff_ifd[raw].bytes) * 2LL)
       {
         load_raw = &LibRaw::packed_load_raw;
         if (model[0] == 'N')
           load_flags = 80;
       }
       else if (INT64(raw_width) * INT64(raw_height) * 3LL ==
                INT64(tiff_ifd[raw].bytes))
       {
         load_raw = &LibRaw::nikon_yuv_load_raw;
         gamma_curve(1 / 2.4, 12.92, 1, 4095);
         memset(cblack, 0, sizeof cblack);
         filters = 0;
       }
       else if (INT64(raw_width) * INT64(raw_height) * 2LL ==
                INT64(tiff_ifd[raw].bytes))
       {
         load_raw = &LibRaw::unpacked_load_raw;
         load_flags = 4;
         order = 0x4d4d;
       }
 #if 0 /* Never used because of same condition above, but need to recheck */
       else if (INT64(raw_width) * INT64(raw_height) * 3LL ==
                INT64(tiff_ifd[raw].bytes) * 2LL)
       {
         load_raw = &LibRaw::packed_load_raw;
         load_flags = 80;
       }
 #endif
       else if (tiff_ifd[raw].rows_per_strip &&
                tiff_ifd[raw].strip_offsets_count &&
                tiff_ifd[raw].strip_offsets_count ==
                    tiff_ifd[raw].strip_byte_counts_count)
       {
         int fit = 1;
         for (int i = 0; i < tiff_ifd[raw].strip_byte_counts_count - 1;
              i++) // all but last
           if (INT64(tiff_ifd[raw].strip_byte_counts[i]) * 2LL !=
               INT64(tiff_ifd[raw].rows_per_strip) * INT64(raw_width) * 3LL)
           {
             fit = 0;
             break;
           }
         if (fit)
           load_raw = &LibRaw::nikon_load_striped_packed_raw;
         else
           load_raw = &LibRaw::nikon_load_raw; // fallback
       }
       else if ((((INT64(raw_width) * 3LL / 2LL) + 15LL) / 16LL) * 16LL *
                    INT64(raw_height) ==
                INT64(tiff_ifd[raw].bytes))
       {
         load_raw = &LibRaw::nikon_load_padded_packed_raw;
         load_flags = (((INT64(raw_width) * 3ULL / 2ULL) + 15ULL) / 16ULL) *
                      16ULL; // bytes per row
       }
       else
         load_raw = &LibRaw::nikon_load_raw;
       break;
     case 65535:
       load_raw = &LibRaw::pentax_load_raw;
       break;
     case 65000:
       switch (tiff_ifd[raw].phint)
       {
       case 2:
         load_raw = &LibRaw::kodak_rgb_load_raw;
         filters = 0;
         break;
       case 6:
         load_raw = &LibRaw::kodak_ycbcr_load_raw;
         filters = 0;
         break;
       case 32803:
         load_raw = &LibRaw::kodak_65000_load_raw;
       }
     case 32867:
     case 34892:
       break;
     case 8:
       break;
 #ifdef USE_GPRSDK
     case 9:
       if (dng_version)
         break; /* Compression=9 supported for dng if we compiled with GPR SDK */
                /* Else: fallthrough */
 #endif
     default:
       is_raw = 0;
     }
   if (!dng_version)
   {
       if (((tiff_samples == 3 && tiff_ifd[raw].bytes &&
           !(tiff_bps == 16 &&
               !strncmp(make, "Leaf", 4)) && // Allow Leaf/16bit/3color files
           tiff_bps != 14 &&
           (tiff_compress & -16) != 32768) ||
           (tiff_bps == 8 && strncmp(make, "Phase", 5) &&
               strncmp(make, "Leaf", 4) && !strcasestr(make, "Kodak") &&
               !strstr(model2, "DEBUG RAW"))) &&
           !strcasestr(model, "COOLSCAN") && strncmp(software, "Nikon Scan", 10) &&
           is_NikonTransfer != 2)
           is_raw = 0;
 
       if (is_raw && raw >= 0 && tiff_ifd[raw].phint == 2 && tiff_ifd[raw].extrasamples > 0 && tiff_ifd[raw].samples > 3)
           is_raw = 0; // SKIP RGB+Alpha IFDs
   }
 
   INT64 fsizecheck = 0ULL;
 
   if (imgdata.rawparams.options & LIBRAW_RAWOPTIONS_CHECK_THUMBNAILS_ALL_VENDORS)
       fsizecheck = ifp->size();
   else if ((imgdata.rawparams.options & LIBRAW_RAWOPTIONS_CHECK_THUMBNAILS_KNOWN_VENDORS)
       && !strncasecmp(make,"Ricoh",5))
       fsizecheck = ifp->size();
 
   for (i = 0; i < (int)tiff_nifds; i++)
     if (i != raw &&
         (tiff_ifd[i].samples == max_samp ||
          (tiff_ifd[i].comp == 7 &&
           tiff_ifd[i].samples == 1)) /* Allow 1-bps JPEGs */
         && tiff_ifd[i].bps > 0 && tiff_ifd[i].bps < 33 &&
         tiff_ifd[i].phint != 32803 && tiff_ifd[i].phint != 34892 &&
         unsigned(tiff_ifd[i].t_width | tiff_ifd[i].t_height) < 0x10000 &&
         unsigned(tiff_ifd[i].t_width * tiff_ifd[i].t_height /
                 (SQR(tiff_ifd[i].bps) + 1)) >
             unsigned(thumb_width * thumb_height / (SQR(thumb_misc) + 1)) &&
         tiff_ifd[i].comp != 34892)
     {
         if (fsizecheck > 0LL)
         {
             bool ok = true;
             if (tiff_ifd[i].strip_byte_counts_count && tiff_ifd[i].strip_offsets_count)
                 for (int s = 0; s < MIN(tiff_ifd[i].strip_byte_counts_count, tiff_ifd[i].strip_offsets_count); s++)
                 {
                     if (tiff_ifd[i].strip_offsets[s] + tiff_ifd[i].strip_byte_counts[s] > fsizecheck)
                     {
                         ok = false;
                         break;
                     }
                 }
             else if (tiff_ifd[i].bytes > 0)
                 if (tiff_ifd[i].offset + tiff_ifd[i].bytes > fsizecheck)
                     ok = false;
 
             if(!ok)
                 continue;
         }
 
       thumb_width = tiff_ifd[i].t_width;
       thumb_height = tiff_ifd[i].t_height;
       thumb_offset = tiff_ifd[i].offset;
       thumb_length = tiff_ifd[i].bytes;
       thumb_misc = tiff_ifd[i].bps;
       thm = i;
     }
   if (thm >= 0)
   {
     thumb_misc |= tiff_ifd[thm].samples << 5;
     switch (tiff_ifd[thm].comp)
     {
     case 0:
       write_thumb = &LibRaw::layer_thumb;
       break;
     case 1:
       if (tiff_ifd[thm].bps <= 8)
         write_thumb = &LibRaw::ppm_thumb;
       else if (!strncmp(make, "Imacon", 6))
         write_thumb = &LibRaw::ppm16_thumb;
       else
         thumb_load_raw = &LibRaw::kodak_thumb_load_raw;
       break;
     case 65000:
       thumb_load_raw = tiff_ifd[thm].phint == 6 ? &LibRaw::kodak_ycbcr_load_raw
                                                 : &LibRaw::kodak_rgb_load_raw;
     }
   }
 }
diff --git a/src/tables/cameralist.cpp b/src/tables/cameralist.cpp
index cc25b527..c2522833 100644
--- a/src/tables/cameralist.cpp
+++ b/src/tables/cameralist.cpp
@@ -20,1234 +20,1235 @@ const int RAWSPEED_DATA_COUNT =
     (sizeof(_rawspeed_data_xml) / sizeof(_rawspeed_data_xml[0]));
 #endif
 // clang-format off
 // Supported cameras:
 static const char *static_camera_list[] = {
 	"Adobe Digital Negative (DNG)",
 	"AgfaPhoto DC-833m",
 	"Alcatel 5035D",
 	"Apple iPad Pro",
 	"Apple iPhone SE",
 	"Apple iPhone 6s",
 	"Apple iPhone 6 plus",
 	"Apple iPhone 7",
 	"Apple iPhone 7 plus",
 	"Apple iPhone 8",
 	"Apple iPhone 8 plus",
 	"Apple iPhone X",
 	"Apple iPhone 12 Pro",
 	"Apple iPhone 12 Pro Max",
 	"Apple iPhone 13 Pro",
 	"Apple QuickTake 100",
 	"Apple QuickTake 150",
 	"Apple QuickTake 200",
 #ifdef LIBRAW_OLD_VIDEO_SUPPORT
 	"ARRI ALEXA",
 	"ARRI ALEXA65",
 	"ARRI ALEXA LF",
 	"ARRI ALEXA XT",
 	"ARRI ALEXA SXT",
 #endif
 	"ASUS ZenPhone4",
 	"ASUS ZenPhone6",
 	"AutelRobotics XB015",
 	"AutelRobotics XT705 (EVO II)",
 	"AVT F-080C",
 	"AVT F-145C",
 	"AVT F-201C",
 	"AVT F-510C",
 	"AVT F-810C",
 	"Baumer TXG14",
 	"BlackMagic Cinema Camera",
 	"BlackMagic Micro Cinema Camera",
 	"BlackMagic Pocket Cinema Camera",
 	"BlackMagic Production Camera 4k",
 	"BlackMagic URSA",
 	"BlackMagic URSA Mini 4k",
 	"BlackMagic URSA Mini 4.6k",
 	"BlackMagic URSA Mini Pro 4.6k",
 	"BQ Aquarius U",
 	"Canon PowerShot 600",
 	"Canon PowerShot A5",
 	"Canon PowerShot A5 Zoom",
 	"Canon PowerShot A50",
 	"Canon PowerShot A410 (CHDK hack)",
 	"Canon PowerShot A460 (CHDK hack)",
 	"Canon PowerShot A470 (CHDK hack)",
 	"Canon PowerShot A480 (CHDK hack)",
 	"Canon PowerShot A530 (CHDK hack)",
 	"Canon PowerShot A540 (CHDK hack)",
 	"Canon PowerShot A550 (CHDK hack)",
 	"Canon PowerShot A560 (CHDK hack)",
 	"Canon PowerShot A570 IS (CHDK hack)",
 	"Canon PowerShot A590 IS (CHDK hack)",
 	"Canon PowerShot A610 (CHDK hack)",
 	"Canon PowerShot A620 (CHDK hack)",
 	"Canon PowerShot A630 (CHDK hack)",
 	"Canon PowerShot A640 (CHDK hack)",
 	"Canon PowerShot A650 IS (CHDK hack)",
 	"Canon PowerShot A710 IS (CHDK hack)",
 	"Canon PowerShot A720 IS (CHDK hack)",
 	"Canon PowerShot A3300 IS (CHDK hack)",
 	"Canon PowerShot D10 (CHDK hack)",
 	"Canon PowerShot ELPH 130 IS / IXUS 140 / IXY 110F (CHDK hack)",
 	"Canon PowerShot ELPH 160 / IXUS 160 (CHDK hack)",
 	"Canon PowerShot Pro70",
 	"Canon PowerShot Pro90 IS",
 	"Canon PowerShot Pro1",
 	"Canon PowerShot G1",
 	"Canon PowerShot G1 X",
 	"Canon PowerShot G1 X Mark II",
 	"Canon PowerShot G1 X Mark III",
 	"Canon PowerShot G2",
 	"Canon PowerShot G3",
 	"Canon PowerShot G3 X",
 	"Canon PowerShot G5",
 	"Canon PowerShot G5 X",
 	"Canon PowerShot G5 X Mark II",
 	"Canon PowerShot G6",
 	"Canon PowerShot G7 (CHDK hack)",
 	"Canon PowerShot G7 X",
 	"Canon PowerShot G7 X Mark II",
 	"Canon PowerShot G7 X Mark III",
 	"Canon PowerShot G9",
 	"Canon PowerShot G9 X",
 	"Canon PowerShot G9 X Mark II",
 	"Canon PowerShot G10",
 	"Canon PowerShot G11",
 	"Canon PowerShot G12",
 	"Canon PowerShot G15",
 	"Canon PowerShot G16",
 	"Canon PowerShot S2 IS (CHDK hack)",
 	"Canon PowerShot S3 IS (CHDK hack)",
 	"Canon PowerShot S5 IS (CHDK hack)",
 	"Canon PowerShot SD300 / IXUS 40 / IXY Digital 50 (CHDK hack)",
 	"Canon PowerShot SD750 / IXUS 75 / IXY Digital 90 (CHDK hack)",
 	"Canon PowerShot SD900 / Digital IXUS 900 Ti / IXY Digital 1000 (CHDK hack)",
 	"Canon PowerShot SD950 IS / Digital IXUS 960 IS / IXY Digital 2000 IS (CHDK hack)",
 	"Canon PowerShot SD1200 IS / Digital IXUS 95 IS / IXY Digital 110 IS (CHDK hack)",
 	"Canon PowerShot S30",
 	"Canon PowerShot S40",
 	"Canon PowerShot S45",
 	"Canon PowerShot S50",
 	"Canon PowerShot S60",
 	"Canon PowerShot S70",
 	"Canon PowerShot S90",
 	"Canon PowerShot S95",
 	"Canon PowerShot S100",
 	"Canon PowerShot S110",
 	"Canon PowerShot S120",
 	"Canon PowerShot SX1 IS",
 	"Canon PowerShot SX40 HS (CHDK hack, CR2)",
 	"Canon PowerShot SX50 HS",
 	"Canon PowerShot SX60 HS",
 	"Canon PowerShot SX70 HS",
 	"Canon PowerShot SX100 IS (CHDK hack)",
 	"Canon PowerShot SX110 IS (CHDK hack)",
 	"Canon PowerShot SX120 IS (CHDK hack)",
 	"Canon PowerShot SX130 IS (CHDK hack)",
 	"Canon PowerShot SX160 IS (CHDK hack)",
 	"Canon PowerShot SX220 HS (CHDK hack)",
 	"Canon PowerShot SX510 HS (CHDK hack)",
 	"Canon PowerShot SX710 HS (CHDK hack)",
 	"Canon PowerShot SX10 IS (CHDK hack)",
 	"Canon PowerShot SX20 IS (CHDK hack)",
 	"Canon PowerShot SX30 IS (CHDK hack)",
 	"Canon EOS R",
 	"Canon EOS RP",
 	"Canon EOS R5",
 	"Canon EOS R6",
 	"Canon EOS D30",
 	"Canon EOS D60",
 	"Canon EOS 5DS",
 	"Canon EOS 5DS R",
 	"Canon EOS 5D",
 	"Canon EOS 5D Mark II",
 	"Canon EOS 5D Mark III",
 	"Canon EOS 5D Mark IV",
 	"Canon EOS 6D",
 	"Canon EOS 6D Mark II",
 	"Canon EOS 7D",
 	"Canon EOS 7D Mark II",
 	"Canon EOS 10D",
 	"Canon EOS 20D",
 	"Canon EOS 20Da",
 	"Canon EOS 30D",
 	"Canon EOS 40D",
 	"Canon EOS 50D",
 	"Canon EOS 60D",
 	"Canon EOS 60Da",
 	"Canon EOS 70D",
 	"Canon EOS 77D / 9000D",
 	"Canon EOS 80D",
 	"Canon EOS 90D",
 	"Canon EOS 100D / Rebel SL1 / Kiss X7",
 	"Canon EOS 200D / Rebel SL2 / Kiss X9",
 	"Canon EOS 250D / 200D II / Rebel SL3 / Kiss X10",
 	"Canon EOS 300D / Digital Rebel / Kiss Digital",
 	"Canon EOS 350D / Digital Rebel XT / Kiss Digital N",
 	"Canon EOS 400D / Digital Rebel XTi / Kiss Digital X",
 	"Canon EOS 450D / Digital Rebel XSi / Kiss X2",
 	"Canon EOS 500D / Rebel T1i / Kiss X3",
 	"Canon EOS 550D / Rebel T2i / Kiss X4",
 	"Canon EOS 600D / Rebel T3i / Kiss X5",
 	"Canon EOS 650D / Rebel T4i / Kiss X6i",
 	"Canon EOS 700D / Rebel T5i / Kiss X7i",
 	"Canon EOS 750D / Rebel T6i / Kiss X8i",
 	"Canon EOS 760D / Rebel T6S / 8000D",
 	"Canon EOS 800D / Rebel T7i / Kiss X9i",
 	"Canon EOS 850D / Rebel T8i / Kiss X10i",
 	"Canon EOS 1000D / Digital Rebel XS / Kiss F",
 	"Canon EOS 1100D / Rebel T3 / Kiss X50",
 	"Canon EOS 1200D / Kiss X70 / REBEL T5 / Hi",
 	"Canon EOS 1300D / Rebel T6 / Kiss X80",
 	"Canon EOS 1500D / 2000D / Rebel T7 / Kiss X90",
 	"Canon EOS 3000D / 4000D / Rebel T100",
 #ifdef LIBRAW_OLD_VIDEO_SUPPORT
 	"Canon EOS C500",
 #endif
 	"Canon EOS D2000",
 	"Canon EOS M",
 	"Canon EOS M2",
 	"Canon EOS M3",
 	"Canon EOS M5",
 	"Canon EOS M6",
 	"Canon EOS M6 Mark II",
 	"Canon EOS M10",
 	"Canon EOS M50 / Kiss M",
 	"Canon EOS M50 Mark II",
 	"Canon EOS M100",
 	"Canon EOS M200",
 	"Canon EOS-1D C",
 	"Canon EOS-1D X",
 	"Canon EOS-1D X Mark II",
 	"Canon EOS-1D X Mark III",
 	"Canon EOS-1D",
 	"Canon EOS-1D Mark II",
 	"Canon EOS-1D Mark II N",
 	"Canon EOS-1D Mark III",
 	"Canon EOS-1D Mark IV",
 	"Canon EOS-1Ds",
 	"Canon EOS-1Ds Mark II",
 	"Canon EOS-1Ds Mark III",
 	"Casio QV-2000UX (secret menu hack)",
 	"Casio QV-3000EX (secret menu hack)",
 	"Casio QV-3500EX (secret menu hack)",
 	"Casio QV-4000 (secret menu hack)",
 	"Casio QV-5700 (secret menu hack)",
 	"Casio QV-R41",
 	"Casio QV-R51",
 	"Casio QV-R61",
 	"Casio EX-F1",
 	"Casio EX-FC300S",
 	"Casio EX-FC400S",
 	"Casio EX-FH20",
 	"Casio EX-FH25",
 	"Casio EX-FH100",
 	"Casio EX-S20 / M20",
 	"Casio EX-S100",
 	"Casio EX-Z4",
 	"Casio EX-Z50",
 	"Casio EX-Z500",
 	"Casio EX-Z55",
 	"Casio EX-Z60",
 	"Casio EX-Z75",
 	"Casio EX-Z750",
 	"Casio EX-Z8",
 	"Casio EX-Z850",
 	"Casio EX-Z1050",
 	"Casio EX-ZR100",
 	"Casio EX-Z1080",
 	"Casio EX-ZR700",
 	"Casio EX-ZR710",
 	"Casio EX-ZR750",
 	"Casio EX-ZR800",
 	"Casio EX-ZR850",
 	"Casio EX-ZR1000",
 	"Casio EX-ZR1100",
 	"Casio EX-ZR1200",
 	"Casio EX-ZR1300",
 	"Casio EX-ZR1500",
 	"Casio EX-ZR3000",
 	"Casio EX-ZR3100",
 	"Casio EX-ZR3200",
 	"Casio EX-ZR3500",
 	"Casio EX-ZR3600",
 	"Casio EX-ZR3700",
 	"Casio EX-ZR4000 / 5000",
 	"Casio EX-ZR4100 / 5100",
 	"Casio EX-100",
 	"Casio EX-100F",
 	"Casio EX-100PRO",
 	"Casio EX-10",
 	"Casio EX-P505 (secret menu hack)",
 	"Casio EX-P600 (secret menu hack)",
 	"Casio EX-P700 (secret menu hack)",
 	"CLAUSS pix500",
 	"Contax N Digital",
 	"Creative PC-CAM 600",
 	"Digital Bolex D16",
 	"Digital Bolex D16M",
 	"DJI 4384x3288",
 	"DJI Mavic Air",
 	"DJI Mavic Air2",
 	"DJI Mavic Air 2S",
 	"DJI Mavic Mini2",
 	"DJI Osmo Action",
 	"DJI Pocket",
 	"DJI Phantom4 Pro/Pro+",
 	"DJI Zenmuse X5",
 	"DJI Zenmuse X5R",
 	"DXO One",
 	"Epson R-D1",
 	"Epson R-D1s",
 	"Epson R-D1x",
 	"Eyedeas E1",
 	"Foculus 531C",
 	"FujiFilm DBP for GX680 / DX-2000",
 	"FujiFilm E550",
 	"FujiFilm E900",
 	"FujiFilm F500EXR / F505EXR",
 	"FujiFilm F550EXR",
 	"FujiFilm F600EXR / F605EXR",
 	"FujiFilm F700",
 	"FujiFilm F710",
 	"FujiFilm F770EXR / F775EXR",
 	"FujiFilm F800EXR",
 	"FujiFilm F810",
 	"FujiFilm F900EXR",
 	"FujiFilm S2Pro",
 	"FujiFilm S3Pro",
 	"FujiFilm S5Pro",
 	"FujiFilm S20Pro",
 	"FujiFilm S1",
 	"FujiFilm S100FS",
 	"FujiFilm S5000",
 	"FujiFilm S5100 / S5500",
 	"FujiFilm S5200 / S5600",
 	"FujiFilm S6000fd / S6500fd",
 	"FujiFilm S7000",
 	"FujiFilm S9000 / S9500",
 	"FujiFilm S9100 / S9600",
 	"FujiFilm S200EXR / S205EXR",
 	"FujiFilm SL1000",
 	"FujiFilm HS10/HS11",
 	"FujiFilm HS20EXR / HS22EXR",
 	"FujiFilm HS30EXR / HS33EXR / HS35EXR",
 	"FujiFilm HS50EXR",
 	"FujiFilm GFX 50S",
 	"FujiFilm GFX 50S II",
 	"FujiFilm GFX 50R",
 	"FujiFilm GFX 100",
 	"FujiFilm GFX 100S",
 	"FujiFilm X-Pro1",
 	"FujiFilm X-Pro2",
 	"FujiFilm X-Pro3",
 	"FujiFilm X-S1",
 	"FujiFilm XQ1",
 	"FujiFilm XQ2",
 	"FujiFilm X100",
 	"FujiFilm X100F",
 	"FujiFilm X100S",
 	"FujiFilm X100T",
 	"FujiFilm X100V",
 	"FujiFilm X10",
 	"FujiFilm X20",
 	"FujiFilm X30",
 	"FujiFilm X70",
 	"FujiFilm X-A1",
 	"FujiFilm X-A2",
 	"FujiFilm X-A3",
 	"FujiFilm X-A5",
 	"FujiFilm X-A7",
 	"FujiFilm X-A10",
 	"FujiFilm X-A20",
 	"FujiFilm X-E1",
 	"FujiFilm X-E2",
 	"FujiFilm X-E2S",
 	"FujiFilm X-E3",
 	"FujiFilm X-E4",
 	"FujiFilm X-M1",
 	"FujiFilm XF1",
 	"FujiFilm XF10",
 	"FujiFilm X-H1",
 	"FujiFilm X-T1",
 	"FujiFilm X-S10",
 	"FujiFilm X-T1 Graphite Silver",
 	"FujiFilm X-T2",
 	"FujiFilm X-T3",
 	"FujiFilm X-T4",
 	"FujiFilm X-T10",
 	"FujiFilm X-T20",
 	"FujiFilm X-T30",
 	"FujiFilm X-T100",
 	"FujiFilm X-T200",
 	"FujiFilm IS-1",
 	"Gione E7",
 	"GITUP GIT2",
 	"GITUP GIT2P",
 	"GITUP G3 DUO (16:9 mode only)",
 	"Google Pixel",
 	"Google Pixel XL",
 	"Google Pixel 3a",
 	"Google Pixel 4 XL",
 	"Google Pixel 4a (5G)",
 	"Google Pixel 5",
 #ifdef  USE_GPRSDK
 	"GoPro Fusion",
 	"GoPro HERO5",
 	"GoPro HERO6",
 	"GoPro HERO7",
 	"GoPro HERO8",
 	"GoPro HERO9",
 	"GoPro HERO10",
 #endif
 	"Hasselblad H2D-22",
 	"Hasselblad H2D-39",
 	"Hasselblad H3DII-22",
 	"Hasselblad H3DII-31",
 	"Hasselblad H3DII-39",
 	"Hasselblad H3DII-50",
 	"Hasselblad H3D-22",
 	"Hasselblad H3D-31",
 	"Hasselblad H3D-39",
 	"Hasselblad H4D-60",
 	"Hasselblad H4D-50",
 	"Hasselblad H4D-40",
 	"Hasselblad H4D-31",
 	"Hasselblad H5D-60",
 	"Hasselblad H5D-50",
 	"Hasselblad H5D-50c",
 	"Hasselblad H5D-40",
 	"Hasselblad H6D-100c",
 	"Hasselblad A6D-100c", // Aerial camera
 	"Hasselblad CFV",
 	"Hasselblad CFV-50",
 	"Hasselblad CFV II 50C",
 	"Hasselblad CFH",
 	"Hasselblad CF-22",
 	"Hasselblad CF-31",
 	"Hasselblad CF-39",
 	"Hasselblad V96C",
 	"Hasselblad L1D-20c (DJI Mavic 2 Pro)",
 	"Hasselblad Lusso",
 	"Hasselblad Lunar",
 	"Hasselblad True Zoom",
 	"Hasselblad Stellar",
 	"Hasselblad Stellar II",
 	"Hasselblad HV",
 	"Hasselblad X1D",
 	"Hasselblad X1D II 50C",
 	"HTC UltraPixel",
 	"HTC MyTouch 4G",
 	"HTC One (A9)",
 	"HTC One (M9)",
 	"HTC 10",
 	"HTC U12",
 	"Huawei P8 Lite (PRA-LX1)",
 	"Huawei P9 (EVA-L09/AL00)",
 	"Huawei P10 (VTR-L09)",
 	"Huawei P10+ (VKY-L09)",
 	"Huawei P10 Lite (WAS-LX1A)",
 	"Huawei P20 (EML-L09)",
 	"Huawei P20 Lite (ANE-LX1)",
 	"Huawei P20 Pro (CLT-L29/L09)",
 	"Huawei P30 Pro (VOG-L29)",
 	"Huawei Honor6a",
 	"Huawei Honor7a pro",
 	"Huawei Honor8 (FRD-L09)",
 	"Huawei Honor9",
 	"Huawei Honor10",
 	"Huawei Honor20",
 	"Huawei Honor View 10 (BKL-L09)",
 	"Huawei Honor View 20 (PCT-L29)",
 	"Huawei Honor 20 Pro (YAL-L41)",
 	"Huawei Mate8 (NXT-L29)",
 	"Huawei Mate10 (BLA-L29)",
 	"Huawei Mate20 Pro (LYA-L29)",
 	"Huawei Mate20 Lite (SNE-LX1)",
 	"Imacon Ixpress 96, 96C",
 	"Imacon Ixpress 384, 384C (single shot only)",
 	"Imacon Ixpress 132C",
 	"Imacon Ixpress 528C (single shot only)",
 	"ISG 2020x1520",
 	"Ikonoskop A-Cam dII Panchromatic",
 	"Ikonoskop A-Cam dII",
 	"Kandao QooCam 8K",
 	"Kinefinity KineMINI",
 	"Kinefinity KineRAW Mini",
 	"Kinefinity KineRAW S35",
 	"Kodak DC20",
 	"Kodak DC25",
 	"Kodak DC40",
 	"Kodak DC50",
 	"Kodak DC120",
 	"Kodak DCS200",
 	"Kodak DCS315C",
 	"Kodak DCS330C",
 	"Kodak DCS420",
 	"Kodak DCS460",
 	"Kodak DCS460M",
 	"Kodak DCS460",
 	"Kodak DCS520C",
 	"Kodak DCS560C",
 	"Kodak DCS620C",
 	"Kodak DCS620X",
 	"Kodak DCS660C",
 	"Kodak DCS660M",
 	"Kodak DCS720X",
 	"Kodak DCS760C",
 	"Kodak DCS760M",
 	"Kodak EOSDCS1",
 	"Kodak EOSDCS3",
 	"Kodak NC2000",
 	"Kodak ProBack",
 	"Kodak PB645C",
 	"Kodak PB645H",
 	"Kodak PB645M",
 	"Kodak DCS Pro 14n",
 	"Kodak DCS Pro 14nx",
 	"Kodak DCS Pro SLR/c",
 	"Kodak DCS Pro SLR/n",
 	"Kodak C330",
 	"Kodak C603",
 	"Kodak P850",
 	"Kodak P880",
 	"Kodak PIXPRO AZ901",
 	"Kodak PIXPRO S-1",
 	"Kodak Z980",
 	"Kodak Z981",
 	"Kodak Z990",
 	"Kodak Z1015",
 	"Kodak KAI-0340",
 	"Konica KD-400Z",
 	"Konica KD-510Z",
 	"Leaf AFi 5",
 	"Leaf AFi 6",
 	"Leaf AFi 7",
 	"Leaf AFi-II 6",
 	"Leaf AFi-II 7",
 	"Leaf AFi-II 10",
 	"Leaf AFi-II 10R",
 	"Leaf Aptus-II 5",
 	"Leaf Aptus-II 6",
 	"Leaf Aptus-II 7",
 	"Leaf Aptus-II 8",
 	"Leaf Aptus-II 10",
 	"Leaf Aptus-II 12",
 	"Leaf Aptus-II 12R",
 	"Leaf Aptus 17",
 	"Leaf Aptus 22",
 	"Leaf Aptus 54S",
 	"Leaf Aptus 65",
 	"Leaf Aptus 65S",
 	"Leaf Aptus 75",
 	"Leaf Aptus 75S",
 	"Leaf Cantare",
 	"Leaf Cantare XY",
 	"Leaf CatchLight",
 	"Leaf CMost",
 	"Leaf Credo 40",
 	"Leaf Credo 50",
 	"Leaf Credo 60",
 	"Leaf Credo 80 (low compression mode only)",
 	"Leaf DCB-II",
 	"Leaf Valeo 6",
 	"Leaf Valeo 11",
 	"Leaf Valeo 17",
 	"Leaf Valeo 17wi",
 	"Leaf Valeo 22",
 	"Leaf Valeo 22wi",
 	"Leaf Volare",
 	"Lenovo a820",
 	"Leica C (Typ 112)",
 	"Leica CL",
 	"Leica C-Lux / CAM-DC25",
 	"Leica Digilux 2",
 	"Leica Digilux 3",
 	"Leica Digital-Modul-R",
 	"Leica D-LUX2",
 	"Leica D-LUX3",
 	"Leica D-LUX4",
 	"Leica D-LUX5",
 	"Leica D-LUX6",
 	"Leica D-LUX7",
 	"Leica D-Lux (Typ 109)",
 	"Leica M8",
 	"Leica M8.2",
 	"Leica M9",
 	"Leica M10",
 	"Leica M10-D",
 	"Leica M10-P",
 	"Leica M10-R",
 	"Leica M10 Monochrom",
 	"Leica M (Typ 240)",
 	"Leica M (Typ 262)",
 	"Leica Monochrom (Typ 240)",
 	"Leica Monochrom (Typ 246)",
 	"Leica M-D (Typ 262)",
 	"Leica M-E",
 	"Leica M-P",
 	"Leica R8",
 	"Leica Q (Typ 116)",
 	"Leica Q-P",
 	"Leica Q2",
 	"Leica Q2 Monochrom",
 	"Leica S",
 	"Leica S2",
 	"Leica S3",
 	"Leica S (Typ 007)",
 	"Leica SL (Typ 601)",
 	"Leica SL2",
 	"Leica SL2-S",
 	"Leica T (Typ 701)",
 	"Leica TL",
 	"Leica TL2",
 	"Leica X1",
 	"Leica X (Typ 113)",
 	"Leica X2",
 	"Leica X-E (Typ 102)",
 	"Leica X-U (Typ 113)",
 	"Leica V-LUX1",
 	"Leica V-LUX2",
 	"Leica V-LUX3",
 	"Leica V-LUX4",
 	"Leica V-LUX5",
 	"Leica V-Lux (Typ 114)",
 	"Leica X VARIO (Typ 107)",
 	"LG G3",
 	"LG G4",
 	"LG G5 (H850)",
 	"LG G6",
 	"LG V20 (F800K)",
 	"LG V20 (H910)",
 	"LG VS995",
 	"Logitech Fotoman Pixtura",
 	"Mamiya ZD",
 	"Matrix 4608x3288",
 	"Meizy MX4",
 	"Micron 2010",
 	"Minolta RD175 / Agfa ActionCam",
 	"Minolta DiMAGE 5",
 	"Minolta DiMAGE 7",
 	"Minolta DiMAGE 7i",
 	"Minolta DiMAGE 7Hi",
 	"Minolta DiMAGE A1",
 	"Minolta DiMAGE A2",
 	"Minolta DiMAGE A200",
 	"Minolta DiMAGE G400",
 	"Minolta DiMAGE G500",
 	"Minolta DiMAGE G530",
 	"Minolta DiMAGE G600",
 	"Minolta DiMAGE Z2",
 	"Minolta Alpha/Dynax/Maxxum 5D",
 	"Minolta Alpha/Dynax/Maxxum 7D",
 	"Motorola PIXL",
 	"Motorola Moto G (5S)",
 	"Motorola Moto G7 Play",
 	"Nikon D1",
 	"Nikon D1H",
 	"Nikon D1X",
 	"Nikon D2H",
 	"Nikon D2Hs",
 	"Nikon D2X",
 	"Nikon D2Xs",
 	"Nikon D3",
 	"Nikon D3s",
 	"Nikon D3X",
 	"Nikon D4",
 	"Nikon D4s",
 	"Nikon D40",
 	"Nikon D40X",
 	"Nikon D5",
 	"Nikon D50",
 	"Nikon D6",
 	"Nikon D60",
 	"Nikon D70",
 	"Nikon D70s",
 	"Nikon D80",
 	"Nikon D90",
 	"Nikon D100",
 	"Nikon D200",
 	"Nikon D300",
 	"Nikon D300s",
 	"Nikon D500",
 	"Nikon D600",
 	"Nikon D610",
 	"Nikon D700",
 	"Nikon D750",
 	"Nikon D780",
 	"Nikon D800",
 	"Nikon D800E",
 	"Nikon D810",
 	"Nikon D810A",
 	"Nikon D850",
 	"Nikon D3000",
 	"Nikon D3100",
 	"Nikon D3200",
 	"Nikon D3300",
 	"Nikon D3400",
 	"Nikon D3500",
 	"Nikon D5000",
 	"Nikon D5100",
 	"Nikon D5200",
 	"Nikon D5300",
 	"Nikon D5500",
 	"Nikon D5600",
 	"Nikon D7000",
 	"Nikon D7100",
 	"Nikon D7200",
 	"Nikon D7500",
 	"Nikon Df",
 	"Nikon Z 5",
 	"Nikon Z 6",
 	"Nikon Z 6 II",
 	"Nikon Z 7",
 	"Nikon Z 7 II",
 	"Nikon Z 50",
 	"Nikon Z fc",
 	"Nikon 1 AW1",
 	"Nikon 1 J1",
 	"Nikon 1 J2",
 	"Nikon 1 J3",
 	"Nikon 1 J4",
 	"Nikon 1 J5",
 	"Nikon 1 S1",
 	"Nikon 1 S2",
 	"Nikon 1 V1",
 	"Nikon 1 V2",
 	"Nikon 1 V3",
 	"Nikon Coolpix 700 (\"DIAG RAW\" hack)",
 	"Nikon Coolpix 800 (\"DIAG RAW\" hack)",
 	"Nikon Coolpix 880 (\"DIAG RAW\" hack)",
 	"Nikon Coolpix 900 (\"DIAG RAW\" hack)",
 	"Nikon Coolpix 950 (\"DIAG RAW\" hack)",
 	"Nikon Coolpix 990 (\"DIAG RAW\" hack)",
 	"Nikon Coolpix 995 (\"DIAG RAW\" hack)",
 	"Nikon Coolpix 2100 (\"DIAG RAW\" hack)",
 	"Nikon Coolpix 2500 (\"DIAG RAW\" hack)",
 	"Nikon Coolpix 3200 (\"DIAG RAW\" hack)",
 	"Nikon Coolpix 3700 (\"DIAG RAW\" hack)",
 	"Nikon Coolpix 4300 (\"DIAG RAW\" hack)",
 	"Nikon Coolpix 4500 (\"DIAG RAW\" hack)",
 	"Nikon Coolpix 5000",
 	"Nikon Coolpix 5400",
 	"Nikon Coolpix 5700",
 	"Nikon Coolpix 8400",
 	"Nikon Coolpix 8700",
 	"Nikon Coolpix 8800",
 	"Nikon Coolpix A",
 	"Nikon Coolpix A1000",
 	"Nikon Coolpix B700",
 	"Nikon Coolpix P330",
 	"Nikon Coolpix P340",
 	"Nikon Coolpix P950",
 	"Nikon Coolpix P6000",
 	"Nikon Coolpix P1000",
 	"Nikon Coolpix P7000",
 	"Nikon Coolpix P7100",
 	"Nikon Coolpix P7700",
 	"Nikon Coolpix P7800",
 	"Nikon Coolpix S6 (\"DIAG RAW\" hack)",
 	"Nikon Coolscan NEF",
 	"Nokia 7 Plus",
 	"Nokia 8.3 5G",
 	"Nokia 9",
 	"Nokia N95",
 	"Nokia X2",
 	"Nokia 1200x1600",
 	"Nokia Lumia 930",
 	"Nokia Lumia 950 XL",
 	"Nokia Lumia 1020",
 	"Nokia Lumia 1520",
 	"Olympus AIR A01",
 	"Olympus C-3030Z",
 	"Olympus C-5050Z",
 	"Olympus C-5060WZ",
 	"Olympus C-7070WZ",
 	"Olympus C-70Z / C-7000Z",
 	"Olympus C-740UZ",
 	"Olympus C-770UZ",
 	"Olympus C-8080WZ",
 	"Olympus X200 / D-560Z / C-350Z",
 	"Olympus E-1",
 	"Olympus E-3",
 	"Olympus E-5",
 	"Olympus E-10",
 	"Olympus E-20 / E-20N / E-20P",
 	"Olympus E-30",
 	"Olympus E-300",
 	"Olympus E-330",
 	"Olympus E-400",
 	"Olympus E-410",
 	"Olympus E-420",
 	"Olympus E-450",
 	"Olympus E-500",
 	"Olympus E-510",
 	"Olympus E-520",
 	"Olympus E-600",
 	"Olympus E-620",
 	"Olympus E-P1",
 	"Olympus E-P2",
 	"Olympus E-P3",
 	"Olympus E-P5",
 	"Olympus E-P7",
 	"Olympus E-PL1",
 	"Olympus E-PL1s",
 	"Olympus E-PL2",
 	"Olympus E-PL3",
 	"Olympus E-PL5",
 	"Olympus E-PL6",
 	"Olympus E-PL7",
 	"Olympus E-PL8",
 	"Olympus E-PL9",
 	"Olympus E-PL10",
 	"Olympus E-PM1",
 	"Olympus E-PM2",
 	"Olympus E-M1",
 	"Olympus E-M1 Mark II",
 	"Olympus E-M1 Mark III",
 	"Olympus E-M1X",
 	"Olympus E-M10",
 	"Olympus E-M10 Mark II",
 	"Olympus E-M10 Mark III",
 	"Olympus E-M10 Mark IV",
 	"Olympus E-M5",
 	"Olympus E-M5 Mark II",
 	"Olympus E-M5 Mark III",
 	"Olympus Pen-F",
 	"Olympus SP-310",
 	"Olympus SP-320",
 	"Olympus SP-350",
 	"Olympus SP-500UZ",
 	"Olympus SP-510UZ",
 	"Olympus SP-550UZ",
 	"Olympus SP-560UZ",
 	"Olympus SP-565UZ",
 	"Olympus SP-570UZ",
 	"Olympus Stylus 1",
 	"Olympus Stylus 1s",
 	"Olympus SH-2",
 	"Olympus SH-3",
 	"Olympus TG-4",
 	"Olympus TG-5",
 	"Olympus TG-6",
 	"Olympus XZ-1",
 	"Olympus XZ-2",
 	"Olympus XZ-10",
+	"OM Digital OM-1",
 	"OmniVision 4688",
 	"OmniVision OV5647",
 	"OmniVision OV5648",
 	"OmniVision OV8850",
 	"OmniVision 13860",
 	"OnePlus 6 (A6003)",
 	"OnePlus 6T",
 	"OnePlus 7 Pro (GM1913)",
 	"OnePlus 8 Pro (IN2023)",
 	"OnePlus One",
 	"OnePlus A3303",
 	"OnePlus A5000",
 	"Panasonic DMC-CM1",
 	"Panasonic DMC-FZ8",
 	"Panasonic DMC-FZ18",
 	"Panasonic DMC-FZ28",
 	"Panasonic DMC-FZ30",
 	"Panasonic DMC-FZ35 / FZ38",
 	"Panasonic DMC-FZ40 / FZ42 / FZ45",
 	"Panasonic DMC-FZ50",
 	"Panasonic DMC-FZ70 / FZ72",
 	"Panasonic DC-FZ80 / FZ81 / FZ82 / FZ83 / FZ85",
 	"Panasonic DMC-FZ100",
 	"Panasonic DMC-FZ150",
 	"Panasonic DMC-FZ200",
 	"Panasonic DMC-FZ300 / FZ330",
 	"Panasonic DMC-FZ1000",
 	"Panasonic DC-FZ1000 II / FZ1000M2 / DC-FZ10002",
 	"Panasonic DMC-FZ2000 / FZ2500 / FZH1",
 	"Panasonic DMC-FX150 / FX180",
 	"Panasonic DMC-G1",
 	"Panasonic DMC-G10",
 	"Panasonic DMC-G2",
 	"Panasonic DMC-G3",
 	"Panasonic DMC-G5",
 	"Panasonic DMC-G6",
 	"Panasonic DMC-G7 / G70",
 	"Panasonic DMC-G8 / G80 / G81 / G85",
 	"Panasonic DC-G9",
 	"Panasonic DC-G90 / G95 / G91 / G99",
 	"Panasonic DC-G100 / G110",
 	"Panasonic DMC-GF1",
 	"Panasonic DMC-GF2",
 	"Panasonic DMC-GF3",
 	"Panasonic DMC-GF5",
 	"Panasonic DMC-GF6",
 	"Panasonic DMC-GF7",
 	"Panasonic DC-GF10 / GF90",
 	"Panasonic DMC-GH1",
 	"Panasonic DMC-GH2",
 	"Panasonic DMC-GH3",
 	"Panasonic DMC-GH4",
 	"Panasonic AG-GH4",
 	"Panasonic DC-GH5",
 	"Panasonic DC-GH5S",
 	"Panasonic DC-GH5 Mark II",
 	"Panasonic DMC-GM1",
 	"Panasonic DMC-GM1s",
 	"Panasonic DMC-GM5",
 	"Panasonic DMC-GX1",
 	"Panasonic DMC-GX7",
 	"Panasonic DMC-GX8",
 	"Panasonic DC-GX9 / GX7mkIII",
 	"Panasonic DMC-GX80 / GX85, DMC-GX7mkII",
 	"Panasonic DC-GX800 / GX850, DC-GF9",
 	"Panasonic DMC-L1",
 	"Panasonic DMC-L10",
 	"Panasonic DMC-LC1",
 	"Panasonic DMC-LF1",
 	"Panasonic DMC-LX1",
 	"Panasonic DMC-LX2",
 	"Panasonic DMC-LX3",
 	"Panasonic DMC-LX5",
 	"Panasonic DMC-LX7",
 	"Panasonic DMC-LX9 / LX10 / LX15",
 	"Panasonic DMC-LX100",
 	"Panasonic DC-LX100M2",
 	"Panasonic DC-S1",
 	"Panasonic DC-S1H",
 	"Panasonic DC-S1R",
 	"Panasonic DC-S5",
 	"Panasonic DMC-ZS40, DMC-TZ60 / TZ61",
 	"Panasonic DMC-ZS50, DMC-TZ70 / TZ71",
 	"Panasonic DMC-ZS60, DMC-TZ80 / TZ81 / TZ82 / TZ85",
 	"Panasonic DC-ZS70, DC-TZ90 / TZ91 / TZ92 / TZ93",
 	"Panasonic DC-ZS80, DC-TZ95 / TZ96 / TZ97",
 	"Panasonic DMC-ZS100 / ZS110, DMC-TZ100 / TZ101 / TZ110, DMC-TX1",
 	"Panasonic DC-ZS200 / ZS220, DC-TZ200 / TZ202 / TZ220, DC-TX2",
 	"PARROT Anafi",
 	"PARROT Bebop 2",
 	"PARROT Bebop Drone",
 	"Pentax *ist D",
 	"Pentax *ist DL",
 	"Pentax *ist DL2",
 	"Pentax *ist DS",
 	"Pentax *ist DS2",
 	"Pentax K10D",
 	"Pentax K20D",
 	"Pentax K100D",
 	"Pentax K100D Super",
 	"Pentax K110D",
 	"Pentax K200D",
 	"Pentax K2000/K-m",
 	"Pentax KP",
 	"Pentax K-x",
 	"Pentax K-r",
 	"Pentax K-01",
 	"Pentax K-1",
 	"Pentax K-1 Mark II",
 	"Pentax K-3",
 	"Pentax K-3 Mark II",
 	"Pentax K-3 Mark III",
 	"Pentax K-30",
 	"Pentax K-5",
 	"Pentax K-5 II",
 	"Pentax K-5 IIs",
 	"Pentax K-50",
 	"Pentax K-500",
 	"Pentax K-7",
 	"Pentax K-70",
 	"Pentax K-S1",
 	"Pentax K-S2",
 	"Pentax MX-1",
 	"Pentax Q",
 	"Pentax Q7",
 	"Pentax Q10",
 	"Pentax QS-1",
 	"Pentax Optio S (secret menu or hack)",
 	"Pentax Optio S4 (secret menu or hack)",
 	"Pentax Optio 33WR (secret menu or hack)",
 	"Pentax Optio 750Z (secret menu or hack)",
 	"Pentax 645D",
 	"Pentax 645Z",
 	"PhaseOne IQ140",
 	"PhaseOne IQ150",
 	"PhaseOne IQ160",
 	"PhaseOne IQ180",
 	"PhaseOne IQ180 IR",
 	"PhaseOne IQ250",
 	"PhaseOne IQ260",
 	"PhaseOne IQ260 Achromatic",
 	"PhaseOne IQ280",
 	"PhaseOne IQ3 50MP",
 	"PhaseOne IQ3 60MP",
 	"PhaseOne IQ3 80MP",
 	"PhaseOne IQ3 100MP",
 	"PhaseOne IQ3 100MP Trichromatic",
 	"PhaseOne IQ4 150MP",
 	"PhaseOne LightPhase",
 	"PhaseOne Achromatic+",
 	"PhaseOne H 10",
 	"PhaseOne H 20",
 	"PhaseOne H 25",
 	"PhaseOne P 20",
 	"PhaseOne P 20+",
 	"PhaseOne P 21",
 	"PhaseOne P 25",
 	"PhaseOne P 25+",
 	"PhaseOne P 30",
 	"PhaseOne P 30+",
 	"PhaseOne P 40+",
 	"PhaseOne P 45",
 	"PhaseOne P 45+",
 	"PhaseOne P 65",
 	"PhaseOne P 65+",
 	"Photron BC2-HD",
 	"Pixelink A782",
 #ifdef USE_X3FTOOLS
 	"Polaroid x530",
 #endif
 	"RaspberryPi Camera",
 	"RaspberryPi Camera V2",
 #ifdef USE_6BY9RPI
 	"RaspberryPi HQ Camera",
 #endif
 	"Ricoh GR",
 	"Realme 3 Pro",
 	"Ricoh GR II",
 	"Ricoh GR III",
 	"Ricoh GR IIIx",
 	"Ricoh GR Digital",
 	"Ricoh GR Digital II",
 	"Ricoh GR Digital III",
 	"Ricoh GR Digital IV",
 	"Ricoh Caplio GX100",
 	"Ricoh Caplio GX200",
 	"Ricoh GXR Mount A12",
 	"Ricoh GXR GR Lens A12 50mm F2.5 Macro",
 	"Ricoh GXR GR Lens A12 28mm F2.5",
 	"Ricoh GXR Ricoh Lens A16 24-85mm F3.5-5.5",
 	"Ricoh GXR Ricoh Lens S10 24-72mm F2.5-4.4 VC",
 	"Ricoh GXR Ricoh Lens P10 28-300 mm F3.5-5.6 VC",
 #ifdef LIBRAW_OLD_VIDEO_SUPPORT
 #ifndef NO_JASPER
 	"Redcode R3D format",
 #endif
 #endif
 	"Rollei d530flex",
 	"RoverShot 3320af",
 	"Samsung EX1 / TL500",
 	"Samsung EX2F",
 	"Samsung GX-1L",
 	"Samsung GX-1S",
 	"Samsung GX10",
 	"Samsung GX20",
 	"Samsung Galaxy Nexus",
 	"Samsung Galaxy Note 9",
 	"Samsung Galaxy NX (EK-GN120)",
 	"Samsung Galaxy S3",
 	"Samsung Galaxy S6 (SM-G920F)",
 	"Samsung Galaxy S7",
 	"Samsung Galaxy S7 Edge",
 	"Samsung Galaxy S8 (SM-G950U)",
 	"Samsung Galaxy S9 (SM-G960F)",
 	"Samsung Galaxy S9+ (SM-G965U / 965F)",
 	"Samsung Galaxy S10 (SM-G973F)",
 	"Samsung Galaxy S10+ (SM-G975U)",
 	"Samsung NX1",
 	"Samsung NX5",
 	"Samsung NX10",
 	"Samsung NX11",
 	"Samsung NX100",
 	"Samsung NX1000",
 	"Samsung NX1100",
 	"Samsung NX20",
 	"Samsung NX200",
 	"Samsung NX210",
 	"Samsung NX2000",
 	"Samsung NX30",
 	"Samsung NX300",
 	"Samsung NX300M",
 	"Samsung NX3000",
 	"Samsung NX500",
 	"Samsung NX mini / NXF1",
 	"Samsung Pro815",
 	"Samsung WB550 / WB560 / HZ15W",
 	"Samsung WB2000 / TL350",
 	"Samsung WB5000 / HZ25W",
 	"Samsung S85 (hacked)",
 	"Samsung S850 (hacked)",
 	"Sarnoff 4096x5440",
 	"Seitz 6x17",
 	"Seitz Roundshot D3",
 	"Seitz Roundshot D2X",
 	"Seitz Roundshot D2Xs",
 	"Sigma fp",
 #ifdef USE_X3FTOOLS
 	"Sigma SD9 (raw decode only)",
 	"Sigma SD10 (raw decode only)",
 	"Sigma SD14 (raw decode only)",
 	"Sigma SD15 (raw decode only)",
 	"Sigma SD1",
 	"Sigma SD1 Merrill",
 	"Sigma DP1",
 	"Sigma DP1 Merrill",
 	"Sigma DP1S",
 	"Sigma DP1X",
 	"Sigma DP2",
 	"Sigma DP2 Merrill",
 	"Sigma DP2S",
 	"Sigma DP2X",
 	"Sigma DP3 Merrill",
 	"Sigma dp0 Quattro",
 	"Sigma dp1 Quattro",
 	"Sigma dp2 Quattro",
 	"Sigma dp3 Quattro",
 	"Sigma sd Quattro",
 	"Sigma sd Quattro H",
 #else
 		"Sigma dp0 Quattro (DNG only)",
 		"Sigma dp1 Quattro (DNG only)",
 		"Sigma dp2 Quattro (DNG only)",
 		"Sigma dp3 Quattro (DNG only)",
 		"Sigma sd Quattro (DNG only)",
 		"Sigma sd Quattro H (DNG only)",
 #endif
 	"Sinar eMotion 22",
 	"Sinar eMotion 54",
 	"Sinar eSpirit 65",
 	"Sinar eMotion 75",
 	"Sinar eVolution 75",
 	"Sinar 3072x2048 (Sinarback 23)",
 	"Sinar 4080x4080 (Sinarback 44)",
 	"Sinar 4080x5440",
 	"Sinar STI format",
 	"Sinar Sinarback 54",
 	"SMaL Ultra-Pocket 3",
 	"SMaL Ultra-Pocket 4",
 	"SMaL Ultra-Pocket 5",
 	"Sony ILCE-1 (A1)",
 	"Sony ILCE-7 (A7)",
 	"Sony ILCE-7M2 (A7 II)",
 	"Sony ILCE-7M3 (A7 III)",
 	"Sony ILCE-7C (A7C)",
 	"Sony ILCE-7R (A7R",
 	"Sony ILCE-7RM2 (A7R II)",
 	"Sony ILCE-7RM3 (A7R III)",
 	"Sony ILCE-7RM3A (A7R IIIA)",
 	"Sony ILCE-7RM4 (A7R IV)",
 	"Sony ILCE-7RM4A (A7R IVA)",
 	"Sony ILCE-7S (A7S)",
 	"Sony ILCE-7SM2 (A7S II)",
 	"Sony ILCE-7SM3 (A7S III)",
 	"Sony ILCE-9 (A9)",
 	"Sony ILCE-9M2 (A9 II)",
 	"Sony ILCA-68 (A68)",
 	"Sony ILCA-77M2 (A77-II)",
 	"Sony ILCA-99M2 (A99-II)",
 	"Sony ILCE-3000 / 3500",
 	"Sony ILCE-5000",
 	"Sony ILCE-5100",
 	"Sony ILCE-6000",
 	"Sony ILCE-6100",
 	"Sony ILCE-6300",
 	"Sony ILCE-6400",
 	"Sony ILCE-6500",
 	"Sony ILCE-6600",
 	"Sony ILCE-QX1",
 	"Sony DSC-F828",
 	"Sony DSC-HX95",
 	"Sony DSC-HX99",
 	"Sony DSC-R1",
 	"Sony DSC-RX0",
 	"Sony DSC-RX0 II",
 	"Sony DSC-RX1",
 	"Sony DSC-RX1R",
 	"Sony DSC-RX1R II",
 	"Sony DSC-RX10",
 	"Sony DSC-RX10 II",
 	"Sony DSC-RX10 III",
 	"Sony DSC-RX10 IV",
 	"Sony DSC-RX100",
 	"Sony DSC-RX100 II",
 	"Sony DSC-RX100 III",
 	"Sony DSC-RX100 IV",
 	"Sony DSC-RX100 V",
 	"Sony DSC-RX100 VA",
 	"Sony DSC-RX100 VI",
 	"Sony DSC-RX100 VII",
 	"Sony DSC-V3",
 	"Sony DSLR-A100",
 	"Sony DSLR-A200",
 	"Sony DSLR-A230",
 	"Sony DSLR-A290",
 	"Sony DSLR-A300",
 	"Sony DSLR-A330",
 	"Sony DSLR-A350",
 	"Sony DSLR-A380 / A390",
 	"Sony DSLR-A450",
 	"Sony DSLR-A500",
 	"Sony DSLR-A550",
 	"Sony DSLR-A560",
 	"Sony DSLR-A580",
 	"Sony DSLR-A700",
 	"Sony DSLR-A850",
 	"Sony DSLR-A900",
 	"Sony NEX-3",
 	"Sony NEX-3N",
 	"Sony NEX-5",
 	"Sony NEX-5N",
 	"Sony NEX-5R",
 	"Sony NEX-5T",
 	"Sony NEX-6",
 	"Sony NEX-7",
 	"Sony NEX-C3",
 	"Sony NEX-F3",
 	"Sony NEX-VG20",
 	"Sony NEX-VG30",
 	"Sony NEX-VG900",
 	"Sony SLT-A33",
 	"Sony SLT-A35",
 	"Sony SLT-A37",
 	"Sony SLT-A55(V)",
 	"Sony SLT-A57",
 	"Sony SLT-A58",
 	"Sony SLT-A65(V)",
 	"Sony SLT-A77(V)",
 	"Sony SLT-A99(V)",
 	"Sony XCD-SX910CR",
 	"Sony IMX135-mipi 13mp",
 	"Sony IMX135-QCOM",
 	"Sony IMX072-mipi",
 	"Sony IMX214",
 	"Sony IMX219",
 	"Sony IMX230",
 	"Sony IMX298-mipi 16mp",
 	"Sony IMX219-mipi 8mp",
 	"Sony Xperia 5 II (XQ-AS52)",
 	"Sony Xperia L",
 	"Sony Xperia 1 III",
 	"Sony ZV-1 (DCZV1/B)",
 	"Sony ZV-E10",
 	"STV680 VGA",
 	"PtGrey GRAS-50S5C",
 	"JaiPulnix BB-500CL",
 	"JaiPulnix BB-500GE",
 	"SVS SVS625CL",
 	"Vivo X51 5G (V2006)",
 	"Yi M1",
 	"YUNEEC CGO3",
 	"YUNEEC CGO3P",
 	"YUNEEC CGO4",
 	"Xiaomi MI3",
 	"Xiaomi MI 8",
 	"Xiaomi MI 9 Lite",
 	"Xiaomi MI MAX",
 	"Xiaomi POCO M3",
 	"Xiaomi RedMi Note3 Pro",
 	"Xiaomi RedMi Note7",
 	"Xiaomi RedMi Note 8T",
 	"Xiaomi FIMI X8SE",
 	"Xiaoyi YIAC3 (YI 4k)",
 	"Zeiss ZX1",
 	"Zenit M",
 	NULL
 };
 // clang-format on
diff --git a/src/tables/colordata.cpp b/src/tables/colordata.cpp
index 7e7f5e10..060d374d 100644
--- a/src/tables/colordata.cpp
+++ b/src/tables/colordata.cpp
@@ -21,1788 +21,1791 @@
 /*
    All matrices are from Adobe DNG Converter unless otherwise noted.
  */
 int LibRaw::adobe_coeff(unsigned make_idx, const char *t_model,
                         int internal_only)
 {
   // clang-format off
   static const struct
   {
 	  unsigned m_idx;
 	  const char *prefix;
 	  int t_black, t_maximum, trans[12];
   } table[] = {
     { LIBRAW_CAMERAMAKER_Agfa, "DC-833m", 0, 0,
       { 11438,-3762,-1115,-2409,9914,2497,-1227,2295,5300 } }, /* DJC */
 
     { LIBRAW_CAMERAMAKER_Apple, "QuickTake", 0, 0,
       { 21392,-5653,-3353,2406,8010,-415,7166,1427,2078 } }, /* DJC */
 
     { LIBRAW_CAMERAMAKER_Broadcom, "RPi IMX219", 66, 0x3ff,
       { 5302,1083,-728,-5320,14112,1699,-863,2371,5136 } }, /* LibRaw */
     { LIBRAW_CAMERAMAKER_Broadcom, "RPi OV5647", 16, 0x3ff,
       { 12782,-4059,-379,-478,9066,1413,1340,1513,5176 } }, /* DJC */
 	{ LIBRAW_CAMERAMAKER_Broadcom, "Pi", 16, 0x3ff,
 	  { 12782,-4059,-379,-478,9066,1413,1340,1513,5176 } }, /* DJC */
 
 #ifdef USE_6BY9RPI // this code normalizes model to LIBRAW_CAMERAMAKER_RaspberryPi
     { LIBRAW_CAMERAMAKER_RaspberryPi, "RP_imx477", 0, 0, // Do not set black, it is set at parser to 256 or 64
       { 5603, -1351, -600, -2872, 11180, 2132, 600, 453, 5821 } }, /* PyDNG */
     { LIBRAW_CAMERAMAKER_RaspberryPi, "RP_imx", 66, 0x3ff,
       { 5302,1083,-728,-5320,14112,1699,-863,2371,5136 } }, /* LibRaw */
     { LIBRAW_CAMERAMAKER_RaspberryPi, "ov5647", 16, 0x3ff,
       { 12782,-4059,-379,-478,9066,1413,1340,1513,5176 } }, /* DJC */
 #endif
     { LIBRAW_CAMERAMAKER_Canon, "EOS D30", 0, 0,
       { 9900,-2771,-1324,-7072,14229,3140,-2790,3344,8861 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS D60", 0, 0xfa0,
       { 6211,-1358,-896,-8557,15766,3012,-3001,3507,8567 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 5DS", 0, 0x3c96, // same CMs: 5DS, "5DS R" */
       { 6250,-711,-808,-5153,12794,2636,-1249,2198,5610 } }, // v.2
     { LIBRAW_CAMERAMAKER_Canon, "EOS 5D Mark IV", 0, 0,
       { 6446,-366,-864,-4436,12204,2513,-952,2496,6348 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 5D Mark III", 0, 0x3c80,
       { 6722,-635,-963,-4287,12460,2028,-908,2162,5668 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 5D Mark II", 0, 0x3cf0,
       { 4716,603,-830,-7798,15474,2480,-1496,1937,6651 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 5D", 0, 0xe6c,
       { 6347,-479,-972,-8297,15954,2480,-1968,2131,7649 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 6D Mark II", 0, 0x38de,
       { 6875,-970,-932,-4691,12459,2501,-874,1953,5809 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 6D", 0, 0x3c82,
       { 7034,-804,-1014,-4420,12564,2058,-851,1994,5758 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 77D", 0, 0,
       { 7377,-742,-998,-4235,11981,2549,-673,1918,5538 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 7D Mark II", 0, 0x3510,
       { 7268,-1082,-969,-4186,11839,2663,-825,2029,5839 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 7D", 0, 0x3510,
       { 6844,-996,-856,-3876,11761,2396,-593,1772,6198 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 850D", 0, 0,
       { 9079,-1923,-1236,-4677,12454,2492,-922,2319,5565}},
     { LIBRAW_CAMERAMAKER_Canon, "EOS 800D", 0, 0,
       { 6970,-512,-968,-4425,12161,2553,-739,1982,5601 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 80D", 0, 0,
       { 7457,-671,-937,-4849,12495,2643,-1213,2354,5492 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 10D", 0, 0xfa0,
       { 8250,-2044,-1127,-8092,15606,2664,-2893,3453,8348 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 250D", 0, 0,
       { 9079,-1923,-1236,-4677,12454,2492,-922,2319,5565 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 200D", 0, 0,
       { 7377,-742,-998,-4235,11981,2549,-673,1918,5538 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 20Da", 0, 0,
       { 14155,-5065,-1382,-6550,14633,2039,-1623,1824,6561 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 20D", 0, 0xfff,
       { 6599,-537,-891,-8071,15783,2424,-1983,2234,7462 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 30D", 0, 0,
       { 6257,-303,-1000,-7880,15621,2396,-1714,1904,7046 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 40D", 0, 0x3f60,
       { 6071,-747,-856,-7653,15365,2441,-2025,2553,7315 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 50D", 0, 0x3d93,
       { 4920,616,-593,-6493,13964,2784,-1774,3178,7005 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 60Da", 0, 0x2ff7,
       { 17492,-7240,-2023,-1791,10323,1701,-186,1329,5406 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 60D", 0, 0x2ff7,
       { 6719,-994,-925,-4408,12426,2211,-887,2129,6051 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 70D", 0, 0x3bc7,
       { 7034,-804,-1014,-4420,12564,2058,-851,1994,5758 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 100D", 0, 0x350f,
       { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 300D", 0, 0xfa0,
       { 8250,-2044,-1127,-8092,15606,2664,-2893,3453,8348 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 350D", 0, 0xfff,
       { 6018,-617,-965,-8645,15881,2975,-1530,1719,7642 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 3000D", 0, 0,
       { 6939,-1016,-866,-4428,12473,2177,-1175,2178,6162 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 400D", 0, 0xe8e,
       { 7054,-1501,-990,-8156,15544,2812,-1278,1414,7796 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 450D", 0, 0x390d,
       { 5784,-262,-821,-7539,15064,2672,-1982,2681,7427 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 500D", 0, 0x3479,
       { 4763,712,-646,-6821,14399,2640,-1921,3276,6561 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 550D", 0, 0x3dd7,
       { 6941,-1164,-857,-3825,11597,2534,-416,1540,6039 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 600D", 0, 0x3510,
       { 6461,-907,-882,-4300,12184,2378,-819,1944,5931 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 650D", 0, 0x354d,
       { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 750D", 0, 0x3c00,
       { 6362,-823,-847,-4426,12109,2616,-743,1857,5635 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 760D", 0, 0x3c00,
       { 6362,-823,-847,-4426,12109,2616,-743,1857,5635 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 700D", 0, 0x3c00,
       { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 90D", 0, 0,
       { 11498, -3759, -1516, -5073, 12954,  2349,  -892,  1867,  6118}},
     { LIBRAW_CAMERAMAKER_Canon, "EOS 1000D", 0, 0xe43,
       { 6771,-1139,-977,-7818,15123,2928,-1244,1437,7533 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 1100D", 0, 0x3510,
       { 6444,-904,-893,-4563,12308,2535,-903,2016,6728 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 1200D", 0, 0x37c2,
       { 6461,-907,-882,-4300,12184,2378,-819,1944,5931 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 1300D", 0, 0x37c2,
       { 6939,-1016,-866,-4428,12473,2177,-1175,2178,6162 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS 1500D", 0, 0,
       { 8300,-2110,-1120,-4917,12694,2482,-938,2141,5666 } }, // v.2
 
     { LIBRAW_CAMERAMAKER_Canon, "EOS RP", 0, 0,
       { 8608,-2097,-1178,-5425,13265,2383,-1149,2238,5680 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS R5", 0, 0,
       { 9766,-2953,-1254,-4276,12116,2433,-437,1336,5131 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS R6", 0, 0,
       { 8293,-1611,-1132,-4759,12711,2275,-1013,2415,5509 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS R", 0, 0,
       { 8293,-1789,-1094,-5025,12925,2327,-1199,2769,6108 } }, // v.2
 
     { LIBRAW_CAMERAMAKER_Canon, "EOS M6 Mark II", 0, 0,
       { 11498,-3759,-1516,-5073,12954,2349,-892,1867,6118 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS M6", 0, 0,
       { 8532,-701,-1167,-4095,11879,2508,-797,2424,7010 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS M50 Mark II", 0, 0,
       { 10463,-2173,-1437,-4856,12635,2482,-1216,2915,7237 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS M50", 0, 0,
       { 8532,-701,-1167,-4095,11879,2508,-797,2424,7010 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS M5", 0, 0,
       { 8532,-701,-1167,-4095,11879,2508,-797,2424,7010 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS M3", 0, 0,
       { 6362,-823,-847,-4426,12109,2616,-743,1857,5635 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS M200", 0, 0,
       { 10463,-2173,-1437,-4856,12635,2482,-1216,2915,7237 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS M2", 0, 0,
       { 6400,-480,-888,-5294,13416,2047,-1296,2203,6137 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS M100", 0, 0,
       { 8532,-701,-1167,-4095,11879,2508,-797,2424,7010 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS M10", 0, 0,
       { 6400,-480,-888,-5294,13416,2047,-1296,2203,6137 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS M", 0, 0,
       { 6602,-841,-939,-4472,12458,2247,-975,2039,6148 } },
 
     { LIBRAW_CAMERAMAKER_Canon, "EOS-1Ds Mark III", 0, 0x3bb0,
       { 5859,-211,-930,-8255,16017,2353,-1732,1887,7448 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS-1Ds Mark II", 0, 0xe80,
       { 6517,-602,-867,-8180,15926,2378,-1618,1771,7633 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS-1D Mark IV", 0, 0x3bb0,
       { 6014,-220,-795,-4109,12014,2361,-561,1824,5787 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS-1D Mark III", 0, 0x3bb0,
       { 6291,-540,-976,-8350,16145,2311,-1714,1858,7326 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS-1D Mark II N", 0, 0xe80,
       { 6240,-466,-822,-8180,15825,2500,-1801,1938,8042 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS-1D Mark II", 0, 0xe80,
       { 6264,-582,-724,-8312,15948,2504,-1744,1919,8664 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS-1Ds", 0, 0xe20,
       { 3925,4060,-1739,-8973,16552,2545,-3287,3945,8243 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS-1D C", 0, 0x3c4e,
       { 6847,-614,-1014,-4669,12737,2139,-1197,2488,6846 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS-1D X Mark III", 0, 0,
       {  8971, -2022, -1242, -5405, 13249,  2380, -1280,  2483,  6072}},
     { LIBRAW_CAMERAMAKER_Canon, "EOS-1D X Mark II", 0, 0x3c4e,
       { 7596,-978,-967,-4808,12571,2503,-1398,2567,5752 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS-1D X", 0, 0x3c4e,
       { 6847,-614,-1014,-4669,12737,2139,-1197,2488,6846 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS-1D", 0, 0xe20,
       { 6806,-179,-1020,-8097,16415,1687,-3267,4236,7690 } },
     { LIBRAW_CAMERAMAKER_Canon, "EOS C500", 853, 0,
       { 17851,-10604,922,-7425,16662,763,-3660,3636,22278 } }, /* DJC */
 
     { LIBRAW_CAMERAMAKER_Canon, "IXUS 160", 0, 0,
       { 11657,-3781,-1136,-3544,11262,2283,-160,1219,4700 } }, /* DJC */
     {LIBRAW_CAMERAMAKER_Canon, "PowerShot 600", 0, 0,
       { -3822,10019,1311,4085,-157,3386,-5341,10829,4812,-1969,10969,1126 } },
 
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot A3300 IS", 0, 0,
       { 10826,-3654,-1023,-3215,11310,1906,0,999,4960 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot A460", 0, 0,
       { 6493,-2338,-885,-1589,5934,697,-445,1368,2543 } }, // CHDK
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot A470", 0, 0,
       { 12513,-4407,-1242,-2680,10276,2405,-878,2215,4734 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot A530", 0, 0,
       { 7252,-2405,-1223,-2102,6560,523,-112,704,3007 } }, // CHDK
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot A50", 0, 0,
       { -6233,10706,1825,3260,821,3980,-6512,10745,6287,-2539,12232,262 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot A5", 0, 0,
       { -5707,10308,2002,2662,1829,4139,-6265,11063,6033,-2659,11911,593 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot A610", 0, 0,
       { 15591,-6402,-1592,-5365,13198,2168,-1300,1824,5075 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot A620", 0, 0,
       { 15265,-6193,-1558,-4125,12116,2010,-888,1639,5220 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot A630", 0, 0,
       { 14201,-5308,-1757,-6087,14472,1617,-2191,3105,5348 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot A640", 0, 0,
       { 13124,-5329,-1390,-3602,11658,1944,-1612,2863,4885 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot A650 IS", 0, 0,
       { 9427,-3036,-959,-2581,10671,1911,-1039,1982,4430 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot A720 IS", 0, 0,
       { 14573,-5482,-1546,-1266,9799,1468,-1040,1912,3810 } }, /* DJC */
 
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot D10", 127, 0,
       { 14052,-5229,-1156,-1325,9420,2252,-498,1957,4116 } }, /* DJC */
 
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G10", 0, 0,
       { 11093,-3906,-1028,-5047,12492,2879,-1003,1750,5561 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G11", 0, 0,
       { 12177,-4817,-1069,-1612,9864,2049,-98,850,4471 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G12", 0, 0,
       { 13244,-5501,-1248,-1508,9858,1935,-270,1083,4366 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G15", 0, 0,
       { 7474,-2301,-567,-4056,11456,2975,-222,716,4181 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G16", 0, 0,
       { 8020,-2687,-682,-3704,11879,2052,-965,1921,5556 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G1 X Mark III", 0, 0,
       { 8532,-701,-1167,-4095,11879,2508,-797,2424,7010 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G1 X Mark II", 0, 0,
       { 7378,-1255,-1043,-4088,12251,2048,-876,1946,5805 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G1 X", 0, 0,
       { 7378,-1255,-1043,-4088,12251,2048,-876,1946,5805 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G1", 0, 0,
       { -5686,10300,2223,4725,-1157,4383,-6128,10783,6163,-2688,12093,604 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G2", 0, 0,
       { 9194,-2787,-1059,-8098,15657,2608,-2610,3064,7867 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G3 X", 0, 0,
       { 9701,-3857,-921,-3149,11537,1817,-786,1817,5147 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G3", 0, 0,
       { 9326,-2882,-1084,-7940,15447,2677,-2620,3090,7740 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G5 X Mark II",0, 0,
       { 11629, -5713, -914, -2706, 11090, 1842, -206, 1225, 5515 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G5 X",0, 0,
       { 9602,-3823,-937,-2984,11495,1675,-407,1415,5049 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G5", 0, 0,
       { 9869,-2972,-942,-7314,15098,2369,-1898,2536,7282 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G6", 0, 0,
       { 9876,-3774,-871,-7613,14807,3071,-1448,1305,7485 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G7 X Mark III", 0, 0,
       { 11629, -5713, -914, -2706, 11090, 1842, -206, 1225, 5515 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G7 X Mark II", 0, 0,
       { 9602,-3823,-937,-2984,11495,1675,-407,1415,5049 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G7 X", 0, 0,
       { 9602,-3823,-937,-2984,11495,1675,-407,1415,5049 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G9 X Mark II", 0, 0,
       { 10056,-4131,-944,-2576,11143,1625,-238,1294,5179 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G9 X",0, 0,
       { 9602,-3823,-937,-2984,11495,1675,-407,1415,5049 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot G9", 0, 0,
       { 7368,-2141,-598,-5621,13254,2625,-1418,1696,5743 } },
 
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot S2 IS", 0, 0,
       { 5477,-1435,-992,-1868,6639,510,-58,792,2670 } }, // CHDK
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot S3 IS", 0, 0,
       { 14062,-5199,-1446,-4712,12470,2243,-1286,2028,4836 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot S30", 0, 0,
       { 10744,-3813,-1142,-7962,15966,2075,-2492,2805,7744 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot S40", 0, 0,
       { 8606,-2573,-949,-8237,15489,2974,-2649,3076,9100 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot S45", 0, 0, // +
       { 8251,-2410,-964,-8047,15430,2823,-2380,2824,8119 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot S50", 0, 0,
       { 8979,-2658,-871,-7721,15500,2357,-1773,2366,6634 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot S60", 0, 0,
       { 8794,-2482,-797,-7804,15403,2572,-1422,1996,7083 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot S70", 0, 0,
       { 9976,-3810,-832,-7115,14463,2906,-901,989,7889 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot S90", 0, 0,
       { 12374,-5016,-1049,-1677,9902,2078,-83,852,4683 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot S95", 0, 0,
       { 13440,-5896,-1279,-1236,9598,1931,-180,1001,4651 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot S120", 0, 0,
       { 6961,-1685,-695,-4625,12945,1836,-1114,2152,5518 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot S110", 0, 0,
       { 8039,-2643,-654,-3783,11230,2930,-206,690,4194 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot S100", 0, 0,
       { 7968,-2565,-636,-2873,10697,2513,180,667,4211 } },
 
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot SD300", 0, 0,
       { 6526,-1720,-1075,-1390,5945,602,-90,820,2380 } }, // CHDK
 
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot SX1 IS", 0, 0,
       { 6578,-259,-502,-5974,13030,3309,-308,1058,4970 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot SX20 IS", 0, 0,
       { 8275,-2904,-1260,-128,5305,505,51,481,2450 } }, // CHDK
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot SX30 IS", 0, 0,
       { 13014,-4698,-1026,-2001,9615,2386,-164,1423,3759 } }, // CHDK
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot SX40 HS", 0, 0,
       { 54480,-17404,-8039,-7505,44044,1136,-580,7158,11891 } }, // CHDK
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot SX50 HS", 0, 0,
       { 12432,-4753,-1247,-2110,10691,1629,-412,1623,4926 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot SX60 HS", 0, 0,
       { 13161,-5451,-1344,-1989,10654,1531,-47,1271,4955 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot SX70 HS", 0, 0,
       { 18285,-8907,-1951,-1845,10688,1323,364,1101,5139 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot SX110 IS", 0, 0,
       { 14134,-5576,-1527,-1991,10719,1273,-1158,1929,3581 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot SX120 IS", 0, 0,
       { 7286,-2242,-1047,41,4401,457,269,684,1864 } }, // CHDK
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot SX220 HS", 0, 0,
       { 13898,-5076,-1447,-1405,10109,1297,-244,1860,3687 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot SX710 HS", 0, 0,
       { 13161,-5451,-1344,-1989,10654,1531,-47,1271,4955 } },
 
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot Pro1", 0, 0,
       { 10062,-3522,-1000,-7643,15117,2730,-765,817,7322 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot Pro70", 34, 0,
       { -5106,10695,1576,3820,53,4566,-6497,10736,6701,-3336,11887,1394 } },
     { LIBRAW_CAMERAMAKER_Canon, "PowerShot Pro90", 0, 0,
       { -5912,10768,2288,4612,-989,4333,-6153,10897,5944,-2907,12288,624 } },
 
     { LIBRAW_CAMERAMAKER_Casio, "EX-F1", 0, 0,
       { 9084,-2016,-848,-6711,14351,2570,-1059,1725,6135 } },
     { LIBRAW_CAMERAMAKER_Casio, "EX-FH100", 0, 0,
       { 12771,-4179,-1558,-2149,10938,1375,-453,1751,4494 } },
     { LIBRAW_CAMERAMAKER_Casio, "EX-S20", 0, 0,
       { 11634,-3924,-1128,-4968,12954,2015,-1588,2648,7206 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Casio, "EX-Z750", 0, 0,
       { 10819,-3873,-1099,-4903,13730,1175,-1755,3751,4632 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Casio, "EX-Z10", 128, 0xfff,
       { 9790,-3338,-603,-2321,10222,2099,-344,1273,4799 } }, /* DJC */
 
     { LIBRAW_CAMERAMAKER_CINE, "650", 0, 0,
       { 3390,480,-500,-800,3610,340,-550,2336,1192 } },
     { LIBRAW_CAMERAMAKER_CINE, "660", 0, 0,
       { 3390,480,-500,-800,3610,340,-550,2336,1192 } },
 	  { LIBRAW_CAMERAMAKER_CINE, "", 0, 0, /* empty camera name*/
       { 20183,-4295,-423,-3940,15330,3985,-280,4870,9800 } },
 
     { LIBRAW_CAMERAMAKER_Contax, "N Digital", 0, 0xf1e,
       { 7777,1285,-1053,-9280,16543,2916,-3677,5679,7060 } },
 
     { LIBRAW_CAMERAMAKER_DXO, "ONE", 0, 0,
       { 6596,-2079,-562,-4782,13016,1933,-970,1581,5181 } },
 
     { LIBRAW_CAMERAMAKER_Epson, "R-D1", 0, 0, // same CMs: R-D1, R-D1s, R-D1x
       { 6827,-1878,-732,-8429,16012,2564,-704,592,7145 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "DBP for GX680", -128, 0x0fff,
       { 12741,-4916,-1420,-8510,16791,1715,-1767,2302,7771 } }, /* temp, copy from S2Pro */
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "E550", 0, 0,
       { 11044,-3888,-1120,-7248,15167,2208,-1531,2276,8069 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "E900", 0, 0,
       { 9183,-2526,-1078,-7461,15071,2574,-2022,2440,8639 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "F5", 0, 0, // F500EXR/F505EXR; F550EXR
       { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "F6", 0, 0, // F600EXR/F605EXR; F660EXR
       { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "F77", 0, 0xfe9, // F770EXR/F775EXR
       { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "F7", 0, 0, // same CMs: F700, F710EXR
       { 10004,-3219,-1201,-7036,15047,2107,-1863,2565,7736 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "F810", 0, 0,
       { 11044,-3888,-1120,-7248,15167,2208,-1531,2276,8069 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "F8", 0, 0, // F800EXR
       { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "F900EXR", 0, 0,
       { 12085,-4727,-953,-3257,11489,2002,-511,2046,4592 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "GFX 100", 0, 0, // same CMs: "GFX 100", "GFX 100S"/"GFX100S", "GFX 100 IR"
       { 16212,-8423,-1583,-4336,12583,1937,-195,726,6199 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "GFX 50", 0, 0,  // same CMs: "GFX 50S", "GFX 50R", "GFX 50S II"
       { 11756,-4754,-874,-3056,11045,2305,-381,1457,6006 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "HS10", 0, 0xf68,
       { 12440,-3954,-1183,-1123,9674,1708,-83,1614,4086 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "HS2", 0, 0, // HS20EXR/HS22EXR
       { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "HS3", 0, 0, // HS30EXR/HS33EXR/HS35EXR
       { 13690,-5358,-1474,-3369,11600,1998,-132,1554,4395 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "HS50EXR", 0, 0,
       { 12085,-4727,-953,-3257,11489,2002,-511,2046,4592 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "IS-1", 0, 0,
       { 21461,-10807,-1441,-2332,10599,1999,289,875,7703 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "IS Pro", 0, 0,
       { 12300,-5110,-1304,-9117,17143,1998,-1947,2448,8100 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "S5000", 0, 0,
       { 8754,-2732,-1019,-7204,15069,2276,-1702,2334,6982 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "S5100", 0, 0,
       { 11940,-4431,-1255,-6766,14428,2542,-993,1165,7421 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "S5200", 0, 0, // S5200/S5600
       { 9636,-2804,-988,-7442,15040,2589,-1803,2311,8621 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "S6", 0, 0, // S6000fd/S6500fd
       { 12628,-4887,-1401,-6861,14996,1962,-2198,2782,7091 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "S7000", 0, 0,
       { 10190,-3506,-1312,-7153,15051,2238,-2003,2399,7505 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "S9000", 0, 0, // S9000/S9500
       { 10491,-3423,-1145,-7385,15027,2538,-1809,2275,8692 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "S9100", 0, 0, // S9100/S9600
       { 12343,-4515,-1285,-7165,14899,2435,-1895,2496,8800 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "S100FS", -514, 0,
       { 11521,-4355,-1065,-6524,13767,3058,-1466,1984,6045 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "S20Pro", 0, 0,
       { 10004,-3219,-1201,-7036,15047,2107,-1863,2565,7736 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "S20", -512, 0x3fff, // S200EXR/S205EXR
       { 11401,-4498,-1312,-5088,12751,2613,-838,1568,5941 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "SL1000", 0, 0,
       { 11705,-4262,-1107,-2282,10791,1709,-555,1713,4945 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "S1", 0, 0,
       { 12297,-4882,-1202,-2106,10691,1623,-88,1312,4790 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "S2Pro", -128, 0,
       { 12741,-4916,-1420,-8510,16791,1715,-1767,2302,7771 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "S3Pro", 0, 0,
       { 11807,-4612,-1294,-8927,16968,1988,-2120,2741,8006 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "S5Pro", 0, 0,
       { 12300,-5110,-1304,-9117,17143,1998,-1947,2448,8100 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "X100F", 0, 0,
       { 11434,-4948,-1210,-3746,12042,1903,-666,1479,5235 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X100S", 0, 0,
       { 10592,-4262,-1008,-3514,11355,2465,-870,2025,6386 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X100T", 0, 0,
       { 10592,-4262,-1008,-3514,11355,2465,-870,2025,6386 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X100V", 0, 0,
       { 13426,-6334,-1177,-4244,12136,2371,580,1303,5980 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X100", 0, 0,
       { 12161,-4457,-1069,-5034,12874,2400,-795,1724,6904 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "X10", 0, 0,
       { 13509,-6199,-1254,-4430,12733,1865,-331,1441,5022 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X20", 0, 0,
       { 11768,-4971,-1133,-4904,12927,2183,-480,1723,4605 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X30", 0, 0,
       { 12328,-5256,-1144,-4469,12927,1675,-87,1291,4351 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X70", 0, 0,
       { 10450,-4329,-878,-3217,11105,2421,-752,1758,6519 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "XF10", 0, 0,
       { 11673,-4760,-1041,-3988,12058,2166,-771,1417,5569 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "XF1", 0, 0,
       { 13509,-6199,-1254,-4430,12733,1865,-331,1441,5022 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "XQ", 0, 0,  // same CMs: XQ1, XQ2
       { 9252,-2704,-1064,-5893,14265,1717,-1101,2341,4349 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-Pro1", 0, 0,
       { 10413,-3996,-993,-3721,11640,2361,-733,1540,6011 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-Pro2", 0, 0,
       { 11434,-4948,-1210,-3746,12042,1903,-666,1479,5235 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-Pro3", 0, 0,
       { 13426,-6334,-1177,-4244,12136,2371,580,1303,5980 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-A10", 0, 0,
       { 11540,-4999,-991,-2949,10963,2278,-382,1049,5605} },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-A20", 0, 0,
       { 11540,-4999,-991,-2949,10963,2278,-382,1049,5605} },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-A1", 0, 0,
       { 11086,-4555,-839,-3512,11310,2517,-815,1341,5940 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-A2", 0, 0,
       { 10763,-4560,-917,-3346,11311,2322,-475,1135,5843 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-A3", 0, 0,
       { 12407,-5222,-1086,-2971,11116,2120,-294,1029,5284 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-A5", 0, 0,
       { 11673,-4760,-1041,-3988,12058,2166,-771,1417,5569 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-A7", 0, 0,
       { 15055,-7391,-1274,-4062,12071,2238,-610,1217,6147 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-E1", 0, 0,
       { 10413,-3996,-993,-3721,11640,2361,-733,1540,6011 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-E2S", 0, 0,
       { 11562,-5118,-961,-3022,11007,2311,-525,1569,6097 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-E2", 0, 0,
       { 8458,-2451,-855,-4597,12447,2407,-1475,2482,6526 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-E3", 0, 0,
       { 11434,-4948,-1210,-3746,12042,1903,-666,1479,5235 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-E4", 0, 0,
       { 13426, -6334, -1177, -4244, 12136, 2371, -580, 1303, 5980 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-H1", 0, 0,
       { 11434,-4948,-1210,-3746,12042,1903,-666,1479,5235 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-M1", 0, 0,
       { 10413,-3996,-993,-3721,11640,2361,-733,1540,6011 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-S10", 0, 0,
       { 13426,-6334,-1177,-4244,12136,2371,-580,1303,5980 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-S1", 0, 0,
       { 13509,-6199,-1254,-4430,12733,1865,-331,1441,5022 } },
 
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-T100", 0, 0,
       { 11673,-4760,-1041,-3988,12058,2166,-771,1417,5569 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-T1", 0, 0, /* same CMs: X-T1, "X-T1IR", "X-T1 IR", X-T10 */
       { 8458,-2451,-855,-4597,12447,2407,-1475,2482,6526 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-T200", 0, 0,
       { 15055,-7391,-1274,-4062,12071,2238,-610,1217,6147 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-T2", 0, 0,  // same CMs: X-T2, X-T20
       { 11434,-4948,-1210,-3746,12042,1903,-666,1479,5235 } },
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-T3", 0, 0,   // same CMs: X-T3, X-T30
       { 13426,-6334,-1177,-4244,12136,2371,580,1303,5980 } }, // v.2
     { LIBRAW_CAMERAMAKER_Fujifilm, "X-T4", 0, 0,
       { 13426,-6334,-1177,-4244,12136,2371,580,1303,5980 } },
 
     { LIBRAW_CAMERAMAKER_GITUP, "G3DUO", 130, 62000,
        { 8489,-2583,-1036,-8051,15583,2643,-1307,1407,7354 } },
 
     { LIBRAW_CAMERAMAKER_GITUP, "GIT2P", 4160, 0,
       { 8489,-2583,-1036,-8051,15583,2643,-1307,1407,7354 } },
     { LIBRAW_CAMERAMAKER_GITUP, "GIT2", 3200, 0,
       { 8489,-2583,-1036,-8051,15583,2643,-1307,1407,7354 } },
 
     { LIBRAW_CAMERAMAKER_GoPro, "HERO5 Black", 0, 0,
 	    { 10344,-4210,-620,-2315,10625,1948,93,1058,5541 } },
 
     {LIBRAW_CAMERAMAKER_Hasselblad, "L1D-20c", 0, 0,
       {  7310, -2746,  -646, -2991, 10847,  2469,   163,   585,  6324}},
 
     { LIBRAW_CAMERAMAKER_Hasselblad, "16-Uncoated-3FR", 0, 0,
       {  8519, -3260,  -280, -5081, 13459,  1738, -1449,  2960,  7809}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "16-Uncoated-FFF", 0, 0,
       {  8068, -2959,  -108, -5788, 13608,  2389, -1002,  2237,  8162}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "16-Uncoated", 0, 0,
       {  8519, -3260,  -280, -5081, 13459,  1738, -1449,  2960,  7809}},
 
     { LIBRAW_CAMERAMAKER_Hasselblad, "22-Uncoated-3FR", 0, 0,
       {  8523, -3257,  -280, -5078, 13458,  1743, -1449,  2961,  7809}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "22-Uncoated-FFF", 0, 0,
       {  8068, -2959,  -108, -5788, 13608,  2389, -1002,  2237,  8162}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "22-Uncoated", 0, 0,
       {  8519, -3260,  -280, -5081, 13459,  1738, -1449,  2960,  7809}},
 
     {LIBRAW_CAMERAMAKER_Hasselblad, "31-Uncoated-FFF", 0, 0,
       {  5155, -1201,   200, -5841, 13197,  2950, -1101,  2317,  6988}},
     {LIBRAW_CAMERAMAKER_Hasselblad, "31-Uncoated", 0, 0,
       {  5458, -1448,   145, -4479, 12338,  2401, -1659,  3086,  6710}},
 
     {LIBRAW_CAMERAMAKER_Hasselblad, "39-Uncoated-3FR", 0, 0,
       {  3904,  -100,   262, -4318, 12407,  2128, -1598,  3594,  6233}},
     {LIBRAW_CAMERAMAKER_Hasselblad, "39-Uncoated-FFF", 0, 0,
       {  4739,  -932,   295, -4829, 12220,  2952, -1027,  2341,  7083}},
     {LIBRAW_CAMERAMAKER_Hasselblad, "39-Uncoated", 0, 0,
       {  3894,  -110,   287, -4672, 12610,  2295, -2092,  4100,  6196}},
 
     { LIBRAW_CAMERAMAKER_Hasselblad, "39-Coated-3FR", 0, 0,
       {  5427, -1147,   173, -3834, 12073,  1969, -1444,  3320,  5621}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "39-Coated-FFF", 0, 0,
       {  5323, -1233,   399, -4926, 12362,  2894,  -856,  2471,  5961}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "39-Coated", 0, 0,
       {  3857,   452,   -46, -6008, 14477,  1596, -2627,  4481,  5718}},
 
     {LIBRAW_CAMERAMAKER_Hasselblad, "40-Coated5-3FR", 0, 0,
       {  7014, -2067,  -540, -4821, 13016,  1980, -1663,  3089,  6940}},
     {LIBRAW_CAMERAMAKER_Hasselblad, "40-Coated5-FFF", 0, 0,
       {  5963, -1357,  -172, -5439, 12762,  3007,  -964,  2222,  7172}},
     {LIBRAW_CAMERAMAKER_Hasselblad, "40-Coated5", 0, 0,
       {  6159, -1402,  -177, -5439, 12762,  3007,  -955,  2200,  7104}},
 
     { LIBRAW_CAMERAMAKER_Hasselblad, "40-Coated-3FR", 0, 0,
       {  6550, -1681,  -399, -4626, 12598,  2257, -1807,  3354,  6486}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "40-Coated-FFF", 0, 0,
       {  6041, -1375,  -174, -5439, 10000,  3007,  -930,  2145,  6923}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "40-Coated", 0, 0,
 	    {  6159, -1402,  -177, -5439, 12762,  3007,  -955,  2200,  7104}},
 
     { LIBRAW_CAMERAMAKER_Hasselblad, "50-Coated5-3FR", 0, 0,
       {  5707,  -693,  -382, -4285, 12669,  1773, -1615,  3519,  5410}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "50-Coated5-FFF", 0, 0,
       {  5263,  -612,    39, -4950, 12426,  2843,  -935,  2423,  5941}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "50-Coated5", 0, 0,
       {  5656,  -659,  -346, -3923, 12306,  1791, -1602,  3509,  5442}},
 
     { LIBRAW_CAMERAMAKER_Hasselblad, "50-Coated-3FR", 0, 0,
       {  5656,  -659,  -346, -3923, 12305,  1790, -1602,  3509,  5442}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "50-Coated-FFF", 0, 0,
       {  5280,  -614,    39, -4950, 12426,  2843,  -939,  2434,  5968}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "50-Coated", 0, 0,
 	    {  5656,  -659,  -346, -3923, 12306, 1791,  -1602,  3509,  5442}},
 
     { LIBRAW_CAMERAMAKER_Hasselblad, "50-15-Coated5-II-3FR", 0, 0,
       { 10887, -6152,  1034, -3564, 12412,  4224,    63,   626, 10123}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "50-15-Coated5-II-FFF", 0, 0,
       {  4932,  -835,   141, -4878, 11868,  3437, -1138,  1961,  7067}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "50-15-Coated5-II", 0, 0,
       {  8737, -4937,   830, -2860,  9961,  3390,    51,   502,  8124}},
 
     { LIBRAW_CAMERAMAKER_Hasselblad, "50-15-Coated5", 0, 0,
 	    { 4932,-835,141,-4878,11868,3437,-1138,1961,7067 } },
 
     { LIBRAW_CAMERAMAKER_Hasselblad, "60-Coated-3FR", 0, 0,
       {  9296,   336, -1088, -6442, 14323,  2289, -1433,  2942,  5756}},
     { LIBRAW_CAMERAMAKER_Hasselblad, "60-Coated", 0, 0,
 	    {  9662,  -684,  -279, -4903, 12293,  2950,  -344,  1669,  6024}},
 
     { LIBRAW_CAMERAMAKER_Hasselblad, "100-17-Coated5", 0, 0,
       {  5110, -1357,  -308, -5573, 12835,  3077, -1279,  2025,  7010}},
 
     { LIBRAW_CAMERAMAKER_HTC, "One A9", 64, 1023,
       { 101,-20,-2,-11,145,41,-24,1,56 } }, /* this is FM1 transposed */
 
     { LIBRAW_CAMERAMAKER_Imacon, "Ixpress", 0, 0,
       { 7025,-1415,-704,-5188,13765,1424,-1248,2742,6038 } }, /* DJC */
 
     { LIBRAW_CAMERAMAKER_Kodak, "NC2000", 0, 0, // AP Nikon
       { 13891,-6055,-803,-465,9919,642,2121,82,1291 } },
     { LIBRAW_CAMERAMAKER_Kodak, "DCS315C", -8, 0,
       { 17523,-4827,-2510,756,8546,-137,6113,1649,2250 } },
     { LIBRAW_CAMERAMAKER_Kodak, "DCS330C", -8, 0,
       { 20620,-7572,-2801,-103,10073,-396,3551,-233,2220 } },
     { LIBRAW_CAMERAMAKER_Kodak, "DCS420", 0, 0,
       { 10868,-1852,-644,-1537,11083,484,2343,628,2216 } },
     { LIBRAW_CAMERAMAKER_Kodak, "DCS46", 0, 0, // same CM as EOSDCS1 and DCS465 DB
       { 10592,-2206,-967,-1944,11685,230,2206,670,1273 } },
     { LIBRAW_CAMERAMAKER_Kodak, "DCS520C", -178, 0, // same CamID: DCS520C, "EOS D2000C"
       { 24542,-10860,-3401,-1490,11370,-297,2858,-605,3225 } },
     { LIBRAW_CAMERAMAKER_Kodak, "DCS560C", -177, 0, // same CamID: DCS560C, "EOS D6000C"
       { 20482,-7172,-3125,-1033,10410,-285,2542,226,3136 } },
     { LIBRAW_CAMERAMAKER_Kodak, "DCS620C", -177, 0,
       { 23617,-10175,-3149,-2054,11749,-272,2586,-489,3453 } },
     { LIBRAW_CAMERAMAKER_Kodak, "DCS620X", -176, 0,
       { 13095,-6231,154,12221,-21,-2137,895,4602,2258 } },
     { LIBRAW_CAMERAMAKER_Kodak, "DCS660C", -173, 0,
       { 18244,-6351,-2739,-791,11193,-521,3711,-129,2802 } },
     { LIBRAW_CAMERAMAKER_Kodak, "DCS720X", 0, 0,
       { 11775,-5884,950,9556,1846,-1286,-1019,6221,2728 } },
     { LIBRAW_CAMERAMAKER_Kodak, "DCS760C", 0, 0,
       { 16623,-6309,-1411,-4344,13923,323,2285,274,2926 } },
     { LIBRAW_CAMERAMAKER_Kodak, "DCS Pro SLR", 0, 0,
       { 5494,2393,-232,-6427,13850,2846,-1876,3997,5445 } },
     { LIBRAW_CAMERAMAKER_Kodak, "DCS Pro 14nx", 0, 0,
       { 5494,2393,-232,-6427,13850,2846,-1876,3997,5445 } },
     { LIBRAW_CAMERAMAKER_Kodak, "DCS Pro 14", 0, 0, // same CamID: "DCS Pro 14N", "Photo Control Camerz ZDS 14"
       { 7791,3128,-776,-8588,16458,2039,-2455,4006,6198 } },
     { LIBRAW_CAMERAMAKER_Kodak, "EOSDCS1", 0, 0,
       { 10592,-2206,-967,-1944,11685,230,2206,670,1273 } },
     { LIBRAW_CAMERAMAKER_Kodak, "EOSDCS3", 0, 0,
       { 9898,-2700,-940,-2478,12219,206,1985,634,1031 } },
     { LIBRAW_CAMERAMAKER_Kodak, "ProBack645", 0, 0,
       { 16414,-6060,-1470,-3555,13037,473,2545,122,4948 } },
     { LIBRAW_CAMERAMAKER_Kodak, "ProBack", 0, 0,
       { 21179,-8316,-2918,-915,11019,-165,3477,-180,4210 } },
 
     {LIBRAW_CAMERAMAKER_Kodak, "PIXPRO AZ901", 0, 0,	// dng
       { 21875, -8006, -2558,   634,  8194,  1104,  1535,   951,  6969}},
     { LIBRAW_CAMERAMAKER_Kodak, "P712", 0, 3963,
       { 9658,-3314,-823,-5163,12695,2768,-1342,1843,6044 } },
     { LIBRAW_CAMERAMAKER_Kodak, "P850", 0, 3964,
       { 10511,-3836,-1102,-6946,14587,2558,-1481,1792,6246 } },
     { LIBRAW_CAMERAMAKER_Kodak, "P880", 0, 3963,
       { 12805,-4662,-1376,-7480,15267,2360,-1626,2194,7904 } },
     { LIBRAW_CAMERAMAKER_Kodak, "Z980", 0, 0,
       { 11313,-3559,-1101,-3893,11891,2257,-1214,2398,4908 } },
     { LIBRAW_CAMERAMAKER_Kodak, "Z981", 0, 0,
       { 12729,-4717,-1188,-1367,9187,2582,274,860,4411 } },
     { LIBRAW_CAMERAMAKER_Kodak, "Z990", 0, 0xfed,
       { 11749,-4048,-1309,-1867,10572,1489,-138,1449,4522 } },
     { LIBRAW_CAMERAMAKER_Kodak, "Z1015", 0, 0xef1,
       { 11265,-4286,-992,-4694,12343,2647,-1090,1523,5447 } },
 
     {LIBRAW_CAMERAMAKER_Leaf, "AFi 54S", 0, 0,
       {  8236,  1746, -1313, -8251, 15953,  2428, -3672,  5786,  5771}},
     {LIBRAW_CAMERAMAKER_Leaf, "AFi 65S", 0, 0,
       {  7914,  1414, -1190, -8776, 16582,  2280, -2811,  4605,  5562}},
     {LIBRAW_CAMERAMAKER_Leaf, "AFi 75S", 0, 0,
       {  7914,  1414, -1190, -8776, 16582,  2280, -2811,  4605,  5562}},
     {LIBRAW_CAMERAMAKER_Leaf, "Aptus 17", 0, 0,
       {  8236,  1746, -1313, -8251, 15953,  2428, -3672,  5786,  5771}},
     {LIBRAW_CAMERAMAKER_Leaf, "Aptus 22", 0, 0,
       {  8236,  1746, -1313, -8251, 15953,  2428, -3672,  5786,  5771}},
     {LIBRAW_CAMERAMAKER_Leaf, "Aptus 54S", 0, 0,
       {  8236,  1746, -1313, -8251, 15953,  2428, -3672,  5786,  5771}},
     {LIBRAW_CAMERAMAKER_Leaf, "Aptus 65S", 0, 0,
       {  7914,  1414, -1190, -8776, 16582,  2280, -2811,  4605,  5562}},
     {LIBRAW_CAMERAMAKER_Leaf, "Aptus 65", 0, 0,
       {  7914,  1414, -1190, -8776, 16582,  2280, -2811,  4605,  5562}},
     {LIBRAW_CAMERAMAKER_Leaf, "Aptus 75S", 0, 0,
       {  7914,  1414, -1190, -8776, 16582,  2280, -2811,  4605,  5562}},
     {LIBRAW_CAMERAMAKER_Leaf, "Aptus 75", 0, 0,
       {  7914,  1414, -1190, -8776, 16582,  2280, -2811,  4605,  5562}},
     {LIBRAW_CAMERAMAKER_Leaf, "C-Most", 0, 0,
       {  3952,  2188,   449, -6701, 14584,  2275, -4536,  7349,  6535}},
     {LIBRAW_CAMERAMAKER_Leaf, "Credo 40", 0, 0,
       {  8035,   435,  -962, -6001, 13872,  2320, -1159,  3065,  5434}},
     {LIBRAW_CAMERAMAKER_Leaf, "Credo 50", 0, 0, // emb
       { 10325,   845,  -604, -4113, 13385,   481, -1791,  4163,  6924}},
     {LIBRAW_CAMERAMAKER_Leaf, "Credo 60", 0, 0,
       {  8035,   435,  -962, -6001, 13872,  2320, -1159,  3065,  5434}},
     {LIBRAW_CAMERAMAKER_Leaf, "Credo 80", 0, 0,
       {  6294,   686,  -712, -5435, 13417,  2211, -1006,  2435,  5042}},
     {LIBRAW_CAMERAMAKER_Leaf, "Valeo 11", 0, 0,
       {  8236,  1746, -1313, -8251, 15953,  2428, -3672,  5786,  5771}},
     {LIBRAW_CAMERAMAKER_Leaf, "Valeo 17", 0, 0,
       {  8236,  1746, -1313, -8251, 15953,  2428, -3672,  5786,  5771}},
     {LIBRAW_CAMERAMAKER_Leaf, "Valeo 22", 0, 0,
       {  8236,  1746, -1313, -8251, 15953,  2428, -3672,  5786,  5771}},
     {LIBRAW_CAMERAMAKER_Leaf, "Valeo 6", 0, 0,
       {  3952,  2188,   449, -6701, 14584,  2275, -4536,  7349,  6535}},
 
 //     { LIBRAW_CAMERAMAKER_Leaf, "AFi-II 6", 0, 0,
     { LIBRAW_CAMERAMAKER_Leaf, "AFi-II 7", 0, 0,
       { 7691,-108,-339,-6185,13627,2833,-2046,3899,5952 } },
     { LIBRAW_CAMERAMAKER_Leaf, "AFi-II 10", 0, 0,
       { 6719,1147,-148,-6929,14061,3176,-1781,3343,5424 } },
 
     { LIBRAW_CAMERAMAKER_Leaf, "Aptus-II 5", 0, 0,
       { 7914,1414,-1190,-8777,16582,2280,-2811,4605,5562 } },
     { LIBRAW_CAMERAMAKER_Leaf, "Aptus-II 6", 0, 0,
       { 7989,-113,-352,-6185,13627,2833,-2028,3866,5901 } },
     { LIBRAW_CAMERAMAKER_Leaf, "Aptus-II 7", 0, 0,
       { 8209,-116,-362,-6185,13627,2833,-1962,3740,5709 } },
     { LIBRAW_CAMERAMAKER_Leaf, "Aptus-II 8", 0, 0,
       { 7361,1257,-163,-6929,14061,3176,-1839,3454,5603 } },
     { LIBRAW_CAMERAMAKER_Leaf, "Aptus-II 10R", 0, 0,
       { 7167,1224,-158,-6929,14061,3176,-1826,3429,5562 } },
     { LIBRAW_CAMERAMAKER_Leaf, "Aptus-II 10", 0, 0,
       { 7527,1285,-166,-6929,14061,3176,-1995,3747,6077 } },
 //     { LIBRAW_CAMERAMAKER_Leaf, "Aptus-II 12R", 0, 0,
     { LIBRAW_CAMERAMAKER_Leaf, "Aptus-II 12", 0, 0,
       { 7361,1257,-163,-6929,14061,3176,-1695,3182,5162 } },
 
     { LIBRAW_CAMERAMAKER_Leica, "CL", 0, 0,
       { 7743,-2896,-921,-4211,12271,2169,-697,1562,5491 } },
 
     { LIBRAW_CAMERAMAKER_Leica, "M8", 0, 0,
       { 7675,-2196,-305,-5860,14119,1856,-2425,4006,6578 } },
     { LIBRAW_CAMERAMAKER_Leica, "M9", 0, 0,
       { 6687,-1751,-291,-3556,11373,2492,-548,2204,7146 } },
     { LIBRAW_CAMERAMAKER_Leica, "M10", 0, 0, // same CMs: M10, M10-D, M10-P
       { 9090,-3342,-740,-4006,13456,493,-569,2266,6871 } },
     { LIBRAW_CAMERAMAKER_Leica, "M (Typ 2", 0, 0, // same CMs: "M (Typ 240)", "M (Typ 262)", "M-D (Typ 262)"
       { 7199,-2140,-712,-4005,13327,649,-810,2521,6673 } },
 
     { LIBRAW_CAMERAMAKER_Leica, "Q (Typ 116)", 0, 0,
       { 10068,-4043,-1068,-5319,14268,1044,-765,1701,6522 } },
     { LIBRAW_CAMERAMAKER_Leica, "Q2", 0, 0,
       { 12312,-5440,-1307,-6408,15499,824,-1075,1677,7220 } },
 
     { LIBRAW_CAMERAMAKER_Leica, "SL (Typ 601)", 0, 0,
       { 11865,-4523,-1441,-5423,14458,935,-1587,2687,4830 } },
     { LIBRAW_CAMERAMAKER_Leica, "S (Typ 007)", 0, 0,
       { 6063,-2234,-231,-5210,13787,1500,-1043,2866,6997 } },
     { LIBRAW_CAMERAMAKER_Leica, "S2", 0, 0,
       { 5627,-721,-447,-4423,12456,2192,-1048,2948,7379 } },
     { LIBRAW_CAMERAMAKER_Leica, "S3", 0, 0,
 //      { 5147,-1464,-318,-5374,13263,2325,-1425,2918,6450 } },
       { 5092,-1630,-470,-6313,14297,2170,-1603,3135,5982 } },
     {LIBRAW_CAMERAMAKER_Leica, "S", 0, 0, // same CMs: "S-E (Typ 006)", "S (Typ 006)"
       { 5749,-1072,-382,-4274,12432,2048,-1166,3104,7105 } },
 
     { LIBRAW_CAMERAMAKER_Leica, "TL2", 0, 0,
       { 6375,-2062,-732,-4878,12838,2262,-877,1705,6204 } },
     { LIBRAW_CAMERAMAKER_Leica, "T", 0, 0, // same CMs: TL, "T (Typ 701)"
       { 6295,-1679,-475,-5586,13046,2837,-1410,1889,7075 } },
 
     { LIBRAW_CAMERAMAKER_Leica, "X2", 0, 0,
       { 8336,-2853,-699,-4425,11989,2760,-954,1625,6396 } },
     { LIBRAW_CAMERAMAKER_Leica, "X1", 0, 0,
       { 9055,-2611,-666,-4906,12652,2519,-555,1384,7417 } },
     { LIBRAW_CAMERAMAKER_Leica, "X", 0, 0, /*  same CMs: "X (Typ 113)", "X-U (Typ 113)", XV, "X Vario (Typ 107)" */
       { 9062,-3198,-828,-4065,11772,2603,-761,1468,6458 } },
 
     { LIBRAW_CAMERAMAKER_Mamiya,"ZD", 0, 0,
       { 7645,2579,-1363,-8689,16717,2015,-3712,5941,5961 } },
 
     { LIBRAW_CAMERAMAKER_Micron, "2010", 110, 0,
       { 16695,-3761,-2151,155,9682,163,3433,951,4904 } }, /* DJC */
 
     { LIBRAW_CAMERAMAKER_Minolta, "DiMAGE 5", 0, 0xf7d,
       { 9117,-3063,-973,-7949,15763,2306,-2752,3136,8093 } },
     { LIBRAW_CAMERAMAKER_Minolta, "DiMAGE 7Hi", 0, 0xf7d,
       { 11555,-4064,-1256,-7903,15633,2409,-2811,3320,7358 } },
     { LIBRAW_CAMERAMAKER_Minolta, "DiMAGE 7i", 0, 0xf7d,
       { 11050,-3791,-1199,-7875,15585,2434,-2797,3359,7560 } },
     { LIBRAW_CAMERAMAKER_Minolta, "DiMAGE 7", 0, 0xf7d,
       { 9258,-2879,-1008,-8076,15847,2351,-2806,3280,7821 } },
     { LIBRAW_CAMERAMAKER_Minolta, "DiMAGE A1", 0, 0xf8b,
       { 9274,-2548,-1167,-8220,16324,1943,-2273,2721,8340 } },
     { LIBRAW_CAMERAMAKER_Minolta, "DiMAGE A200", 0, 0,
       { 8560,-2487,-986,-8112,15535,2771,-1209,1324,7743 } },
     { LIBRAW_CAMERAMAKER_Minolta, "DiMAGE A2", 0, 0xf8f,
       { 9097,-2726,-1053,-8073,15506,2762,-966,981,7763 } },
     { LIBRAW_CAMERAMAKER_Minolta, "DiMAGE Z2", 0, 0,
       { 11280,-3564,-1370,-4655,12374,2282,-1423,2168,5396 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Minolta, "DG-5D", 0, 0xffb, // same CamID: "ALPHA 5D", "DYNAX 5D", "MAXXUM 5D", "Alpha Sweet Digital"
       { 10284,-3283,-1086,-7957,15762,2316,-829,882,6644 } },
     { LIBRAW_CAMERAMAKER_Minolta, "DG-7D", 0, 0xffb, // same CamID: "ALPHA 7D", "DYNAX 7D", "MAXXUM 7D"
       { 10239,-3104,-1099,-8037,15727,2451,-927,925,6871 } },
 
     { LIBRAW_CAMERAMAKER_Motorola, "PIXL", 0, 0,
       { 8898,-989,-1033,-3292,11619,1674,-661,3178,5216 } }, /* DJC */
 
     { LIBRAW_CAMERAMAKER_Nikon, "1 AW1", 0, 0,
       { 6588,-1305,-693,-3277,10987,2634,-355,2016,5106 } },
     { LIBRAW_CAMERAMAKER_Nikon, "1 J3", 0, 0,
       { 6588,-1305,-693,-3277,10987,2634,-355,2016,5106 } },
     { LIBRAW_CAMERAMAKER_Nikon, "1 J4", 0, 0,
       { 5958,-1559,-571,-4021,11453,2939,-634,1548,5087 } },
     { LIBRAW_CAMERAMAKER_Nikon, "1 J5", 0, 0,
       { 7520,-2518,-645,-3844,12102,1945,-913,2249,6835 } },
     { LIBRAW_CAMERAMAKER_Nikon, "1 S2", -200, 0,
       { 6612,-1342,-618,-3338,11055,2623,-174,1792,5075 } },
     { LIBRAW_CAMERAMAKER_Nikon, "1 V2", 0, 0,
       { 6588,-1305,-693,-3277,10987,2634,-355,2016,5106 } },
     { LIBRAW_CAMERAMAKER_Nikon, "1 V3", -200, 0,
       { 5958,-1559,-571,-4021,11453,2939,-634,1548,5087 } },
     { LIBRAW_CAMERAMAKER_Nikon, "1 ", 0, 0,      /* same CMs: "1 J1", "1 J2", "1 S1", "1 V1" */
       { 8994,-2667,-865,-4594,12324,2552,-699,1786,6260 } },
 
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 2100", 0, 0, // a.k.a. E2100
       { 13142,-4152,-1596,-4655,12374,2282,-1769,2696,6711 } }, /* DJC, copied from Z2, new white balance */
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 2500", 0, 0, // a.k.a. E2500, possibly same CM as for E5000
       { -5547,11762,2189,5814,-558,3342,-4924,9840,5949,688,9083,96 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 3200", 0, 0, // a.k.a. E3200
       { 9846,-2085,-1019,-3278,11109,2170,-774,2134,5745 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 4300", 0, 0, // a.k.a. E4300
       { 11280,-3564,-1370,-4655,12374,2282,-1423,2168,5396 } }, /* DJC, copied from Minolta DiMAGE Z2 */
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 4500", 0, 0, // a.k.a. E4500, possibly same CM as for E5000
       { -5547,11762,2189,5814,-558,3342,-4924,9840,5949,688,9083,96 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 5000", 0, 0, // a.k.a. E5000
       { -6678,12805,2248,5725,-499,3375,-5903,10713,6034,-270,9976,134 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 5400", 0, 0, // a.k.a. E5400
       { 9349,-2988,-1001,-7918,15766,2266,-2097,2680,6839 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 5700", 0, 0, // a.k.a. E5700
       { -6475,12496,2428,5409,-16,3180,-5965,10912,5866,-177,9918,248 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 8400", 0, 0, // a.k.a. E8400
       { 7842,-2320,-992,-8154,15718,2599,-1098,1342,7560 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 8700", 0, 0, // a.k.a. E8700
       { 8489,-2583,-1036,-8051,15583,2643,-1307,1407,7354 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 8800", 0, 0, // a.k.a. E8800
       { 7971,-2314,-913,-8451,15762,2894,-1442,1520,7610 } },
 
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 700", 0, 0x3dd, // a.k.a. E700
       { -3746,10611,1665,9621,-1734,2114,-2389,7082,3064,3406,6116,-244 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 800", 0, 0x3dd, // a.k.a. E800
       { -3746,10611,1665,9621,-1734,2114,-2389,7082,3064,3406,6116,-244 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 950", 0, 0x3dd, // a.k.a. E950
       { -3746,10611,1665,9621,-1734,2114,-2389,7082,3064,3406,6116,-244 } }, /* DJC */
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX 995", 0, 0,     // a.k.a. E995
       { -5547,11762,2189,5814,-558,3342,-4924,9840,5949,688,9083,96 } }, /* DJC, copied from E5000 */
 
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX A1000", 0, 0,
       { 10601,-3487,-1127,-2931,11443,1676,-587,1740,5278 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX B700", 0, 0,
       { 14387,-6014,-1299,-1357,9975,1616,467,1047,4744 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX A", 0, 0,
       { 8198,-2239,-724,-4871,12389,2798,-1043,2050,7181 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX P1000", 0, 0,
       { 14294,-6116,-1333,-1628,10219,1637,-14,1158,5022 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX P6000", 0, 0,
       { 9698,-3367,-914,-4706,12584,2368,-837,968,5801 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX P7000", 0, 0,
       { 11432,-3679,-1111,-3169,11239,2202,-791,1380,4455 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX P7100", 0, 0,
       { 11053,-4269,-1024,-1976,10182,2088,-526,1263,4469 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX P7700", -3200, 0, // same CamID: "COOLPIX P7700", "COOLPIX Deneb"
       { 10321,-3920,-931,-2750,11146,1824,-442,1545,5539 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX P7800", -3200, 0, // same CamID: "COOLPIX P7800", "COOLPIX Kalon"
       { 10321,-3920,-931,-2750,11146,1824,-442,1545,5539 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX P330", -200, 0,
       { 10321,-3920,-931,-2750,11146,1824,-442,1545,5539 } },
     { LIBRAW_CAMERAMAKER_Nikon, "COOLPIX P340", -200, 0,
       { 10321,-3920,-931,-2750,11146,1824,-442,1545,5539 } },
     { LIBRAW_CAMERAMAKER_Nikon, "Coolpix P950", 0, 0,
       { 13307, -5641, -1290, -2048, 10581,  1689,   -64,  1222,  5176}},
 
     { LIBRAW_CAMERAMAKER_Nikon, "D3000", 0, 0,
       { 8736,-2458,-935,-9075,16894,2251,-1354,1242,8263 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D3100", 0, 0,
       { 7911,-2167,-813,-5327,13150,2408,-1288,2483,7968 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D3200", 0, 0xfb9,
       { 7013,-1408,-635,-5268,12902,2640,-1470,2801,7379 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D3300", 0, 0,
       { 6988,-1384,-714,-5631,13410,2447,-1485,2204,7318 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D3400", 0, 0,
       { 6988,-1384,-714,-5631,13410,2447,-1485,2204,7318 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D3500", 0, 0,
       { 8821,-2938,-785,-4178,12142,2287,-824,1651,6860 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D5000", 0, 0xf00,
       { 7309,-1403,-519,-8474,16008,2622,-2433,2826,8064 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D5100", 0, 0x3de6,
       { 8198,-2239,-724,-4871,12389,2798,-1043,2050,7181 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D5200", 0, 0,
       { 8322,-3112,-1047,-6367,14342,2179,-988,1638,6394 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D5300", 0, 0,
       { 6988,-1384,-714,-5631,13410,2447,-1485,2204,7318 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D5500", 0, 0,
       { 8821,-2938,-785,-4178,12142,2287,-824,1651,6860 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D5600", 0, 0,
       { 8821,-2938,-785,-4178,12142,2287,-824,1651,6860 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D7000", 0, 0,
       { 8198,-2239,-724,-4871,12389,2798,-1043,2050,7181 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D7100", 0, 0,
       { 8322,-3112,-1047,-6367,14342,2179,-988,1638,6394 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D7200", 0, 0,
       { 8322,-3112,-1047,-6367,14342,2179,-988,1638,6394 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D7500", 0, 0,
       { 8813,-3210,-1036,-4703,12868,2021,-1054,1940,6129 } },
 
     { LIBRAW_CAMERAMAKER_Nikon, "D100", 0, 0,
       { 5902,-933,-782,-8983,16719,2354,-1402,1455,6464 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D200", 0, 0xfbc,
       { 8367,-2248,-763,-8758,16447,2422,-1527,1550,8053 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D300", 0, 0,    // same CMs: D300, D300s
       { 9030,-1992,-715,-8465,16302,2255,-2689,3217,8069 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D500", 0, 0,
       { 8813,-3210,-1036,-4703,12868,2021,-1054,1940,6129 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D600", 0, 0x3e07,
       { 8178,-2245,-609,-4857,12394,2776,-1207,2086,7298 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D610",0, 0,
       { 8178,-2245,-609,-4857,12394,2776,-1207,2086,7298 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D700", 0, 0,
       { 8139,-2171,-663,-8747,16541,2295,-1925,2008,8093 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D750", -600, 0,
       { 9020,-2890,-715,-4535,12436,2348,-934,1919,7086 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D780", -600, 0,
       { 9943,-3269,-839,-5323,13269,2259,-1198,2083,7557 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D800", 0, 0,    // same CMs: D800, D800E
       { 7866,-2108,-555,-4869,12483,2681,-1176,2069,7501 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D810A", 0, 0,
       { 11973,-5685,-888,-1965,10326,1901,-115,1123,7169 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D810", 0, 0,
       { 9369,-3195,-791,-4488,12430,2301,-893,1796,6872 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D850", 0, 0,
       { 10405,-3755,-1270,-5461,13787,1793,-1040,2015,6785 } },
 
     { LIBRAW_CAMERAMAKER_Nikon, "D40X", 0, 0,
       { 8819,-2543,-911,-9025,16928,2151,-1329,1213,8449 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D40", 0, 0,
       { 6992,-1668,-806,-8138,15748,2543,-874,850,7897 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D50", 0, 0,
       { 7732,-2422,-789,-8238,15884,2498,-859,783,7330 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D60", 0, 0,
       { 8736,-2458,-935,-9075,16894,2251,-1354,1242,8263 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D70", 0, 0,     // same CMs: D70, D70s
       { 7732,-2422,-789,-8238,15884,2498,-859,783,7330 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D80", 0, 0,
       { 8629,-2410,-883,-9055,16940,2171,-1490,1363,8520 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D90", 0, 0xf00,
       { 7309,-1403,-519,-8474,16008,2622,-2434,2826,8064 } },
 
     { LIBRAW_CAMERAMAKER_Nikon, "D1H", 0, 0,
       { 7659,-2238,-935,-8942,16969,2004,-2701,3051,8690 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D1X", 0, 0,
       { 7702,-2245,-975,-9114,17242,1875,-2679,3055,8521 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D1", 0, 0,
 //      { 16772,-4726,-2141,-7611,15713,1972,-2846,3494,9521 } }, /* multiplied by 2.218750, 1.0, 1.148438 */
       { 7637,-2199,-974,-9109,17099,2043,-2822,3306,8372 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D2H", 0, 0,     // same CMs: D2H, D2Hs
       { 5733,-911,-629,-7967,15987,2055,-3050,4013,7048 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D2X", 0, 0,     // same CMs: D2X, D2Xs
       { 10231,-2768,-1254,-8302,15900,2551,-797,681,7148 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D3S", 0, 0,
       { 8828,-2406,-694,-4874,12603,2541,-660,1509,7587 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D3X", 0, 0,
       { 7171,-1986,-648,-8085,15555,2718,-2170,2512,7457 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D3", 0, 0,
       { 8139,-2171,-663,-8747,16541,2295,-1925,2008,8093 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D4", 0, 0,      // same CMs: D4, D4S (and Df)
       { 8598,-2848,-857,-5618,13606,2195,-1002,1773,7137 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D5", 0, 0,
       { 9200,-3522,-992,-5755,13803,2117,-753,1486,6338 } },
     { LIBRAW_CAMERAMAKER_Nikon, "D6", 0, 0,
       { 9028,-3423,-1035,-6321,14265,2217,-1013,1683,6928 } },
     { LIBRAW_CAMERAMAKER_Nikon, "Df", 0, 0,
       { 8598,-2848,-857,-5618,13606,2195,-1002,1773,7137 } },
 
     { LIBRAW_CAMERAMAKER_Nikon, "Z 50", 0, 0,
       { 11640,-4829,-1079,-5107,13006,2325,-972,1711,7380 } },
     { LIBRAW_CAMERAMAKER_Nikon, "Z 5", 0, 0,
       { 8695,-2558,-648,-5015,12711,2575,-1279,2215,7514 } },
     { LIBRAW_CAMERAMAKER_Nikon, "Z 6", 0, 0,
       { 9943,-3269,-839,-5323,13269,2259,-1198,2083,7557 } },  // 'Z 6'(v.2), 'Z 6_2'
     { LIBRAW_CAMERAMAKER_Nikon, "Z 7", 0, 0,
       { 13705,-6004,-1400,-5464,13568,2062,-940,1706,7618 } }, // 'Z 7'(v.2), 'Z 7_2'
     { LIBRAW_CAMERAMAKER_Nikon, "Z fc", 0, 0,
       { 11640,-4829,-1079,-5107,13006,2325,-972,1711,7380 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "AIR A01", 0, 0xfe1,
       { 8992,-3093,-639,-2563,10721,2122,-437,1270,5473 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "C-5050Z", 0, 0,
       { 10633,-3234,-1285,-7460,15570,1967,-1917,2510,6299 } },
     { LIBRAW_CAMERAMAKER_Olympus, "C-5060WZ", 0, 0,
       { 10445,-3362,-1307,-7662,15690,2058,-1135,1176,7602 } },
     { LIBRAW_CAMERAMAKER_Olympus, "C-7070WZ", 0, 0,
       { 10252,-3531,-1095,-7114,14850,2436,-1451,1723,6365 } },
     { LIBRAW_CAMERAMAKER_Olympus, "C-7000Z", 0, 0,
       { 10793,-3791,-1146,-7498,15177,2488,-1390,1577,7321 } },
     { LIBRAW_CAMERAMAKER_Olympus, "C-8080WZ", 0, 0,
       { 8606,-2509,-1014,-8238,15714,2703,-942,979,7760 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "E-300", 0, 0,
       { 7828,-1761,-348,-5788,14071,1830,-2853,4518,6557 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-330", 0, 0,
       { 8961,-2473,-1084,-7979,15990,2067,-2319,3035,8249 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-400", 0, 0,
       { 6169,-1483,-21,-7107,14761,2536,-2904,3580,8568 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-410", 0, 0xf6a,
       { 8856,-2582,-1026,-7761,15766,2082,-2009,2575,7469 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-420", 0, 0xfd7,
       { 8746,-2425,-1095,-7594,15612,2073,-1780,2309,7416 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-450", 0, 0xfd2,
       { 8745,-2425,-1095,-7594,15613,2073,-1780,2309,7416 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-500", 0, 0,
       { 8136,-1968,-299,-5481,13742,1871,-2556,4205,6630 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-510", 0, 0xf6a,
       { 8785,-2529,-1033,-7639,15624,2112,-1783,2300,7817 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-520", 0, 0xfd2,
       { 8344,-2322,-1020,-7596,15635,2048,-1748,2269,7287 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-600", 0, 0xfaf,
       { 8453,-2198,-1092,-7609,15681,2008,-1725,2337,7824 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-620", 0, 0xfaf,
       { 8453,-2198,-1092,-7609,15681,2008,-1725,2337,7824 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "E-10", 0, 0x3ff,
       { 12970,-4703,-1433,-7466,15843,1644,-2191,2451,6668 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-20", 0, 0x3ff,  // model is "E-20,E-20N,E-20P"
       { 13414,-4950,-1517,-7166,15293,1960,-2325,2664,7212 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-30", 0, 0xfbc,
       { 8144,-1861,-1111,-7763,15894,1929,-1865,2542,7607 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "E-1", 0, 0,
       { 11846,-4767,-945,-7027,15878,1089,-2699,4122,8311 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-3", 0, 0xf99,
       { 9487,-2875,-1115,-7533,15606,2010,-1618,2100,7389 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-5", 0, 0xeec,
       { 11200,-3783,-1325,-4576,12593,2206,-695,1742,7504 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "E-P1", 0, 0xffd,
       { 8343,-2050,-1021,-7715,15705,2103,-1831,2380,8235 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-P2", 0, 0xffd,
       { 8343,-2050,-1021,-7715,15705,2103,-1831,2380,8235 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-P3", 0, 0,
       { 7575,-2159,-571,-3722,11341,2725,-1434,2819,6271 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-P5", 0, 0,
       { 8380,-2630,-639,-2887,10725,2496,-627,1427,5438 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-P7", 0, 0,
       { 9476,-3182,-765,-2613,10958,1893,-449,1315,5268 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "E-PL10", 0, 0,
       { 9197,-3190,-659,-2606,10830,2039,-458,1250,5458 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-PL1s", 0, 0,
       { 11409,-3872,-1393,-4572,12757,2003,-709,1810,7415 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-PL1", 0, 0,
       { 11408,-4289,-1215,-4286,12385,2118,-387,1467,7787 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-PL2", 0, 0xcf3,
       { 15030,-5552,-1806,-3987,12387,1767,-592,1670,7023 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-PL3", 0, 0,
       { 7575,-2159,-571,-3722,11341,2725,-1434,2819,6271 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-PL5", 0, 0xfcb,
       { 8380,-2630,-639,-2887,10725,2496,-627,1427,5438 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-PL6", 0, 0,
       { 8380,-2630,-639,-2887,10725,2496,-627,1427,5438 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-PL7", 0, 0,
       { 9197,-3190,-659,-2606,10830,2039,-458,1250,5458 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-PL8", 0, 0,
       { 9197,-3190,-659,-2606,10830,2039,-458,1250,5458 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-PL9", 0, 0,
       { 8380,-2630,-639,-2887,10725,2496,-627,1427,5438 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "E-PM1", 0, 0,
       { 7575,-2159,-571,-3722,11341,2725,-1434,2819,6271 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-PM2", 0, 0,
       { 8380,-2630,-639,-2887,10725,2496,-627,1427,5438 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "E-M10 Mark IV", 0, 0,
       { 9476,-3182,-765,-2613,10958,1893,-449,1315,5268 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-M10", 0, 0,	  // Same CMs: E-M10, E-M10 Mark II, E-M10 Mark III; "CLAUSS piX 5oo"
       { 8380,-2630,-639,-2887,10725,2496,-627,1427,5438 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-M1X", 0, 0,
       { 11896,-5110,-1076,-3181,11378,2048,-519,1224,5166 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "E-M1 Mark III", 0, 0,
       { 11896,-5110,-1076,-3181,11378,2048,-519,1224,5166 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-M1 Mark II", 0, 0,
       { 9383,-3170,-763,-2457,10702,2020,-384,1236,5552 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-M1", 0, 0,
       { 7687,-1984,-606,-4327,11928,2721,-1381,2339,6452 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "E-M5 Mark III", 0, 0,
       { 11896,-5110,-1076,-3181,11378,2048,-519,1224,5166 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-M5 Mark II", 0, 0,
       { 9422,-3258,-711,-2655,10898,2015,-512,1354,5512 } },
     { LIBRAW_CAMERAMAKER_Olympus, "E-M5", 0, 0xfe1,
       { 8380,-2630,-639,-2887,10725,2496,-627,1427,5438 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "PEN-F",0, 0,
       { 9476,-3182,-765,-2613,10958,1893,-449,1315,5268 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "SH-2", 0, 0, // same CamID: SH-2, SH-3
      { 10156,-3425,-1077,-2611,11177,1624,-385,1592,5080 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "SP-350", 0, 0,
       { 12078,-4836,-1069,-6671,14306,2578,-786,939,7418 } },
     { LIBRAW_CAMERAMAKER_Olympus, "SP-3", 0, 0,	// Same CMs: SP310, SP320
       { 11766,-4445,-1067,-6901,14421,2707,-1029,1217,7572 } },
     { LIBRAW_CAMERAMAKER_Olympus, "SP-500UZ", 0, 0xfff,
       { 9493,-3415,-666,-5211,12334,3260,-1548,2262,6482 } },
     { LIBRAW_CAMERAMAKER_Olympus, "SP-510UZ", 0, 0xffe,
       { 10593,-3607,-1010,-5881,13127,3084,-1200,1805,6721 } },
     { LIBRAW_CAMERAMAKER_Olympus, "SP-550UZ", 0, 0xffe,
       { 11597,-4006,-1049,-5432,12799,2957,-1029,1750,6516 } },
     { LIBRAW_CAMERAMAKER_Olympus, "SP-560UZ", 0, 0xff9,
       { 10915,-3677,-982,-5587,12986,2911,-1168,1968,6223 } },
     { LIBRAW_CAMERAMAKER_Olympus, "SP-565UZ", 0, 0,
       { 11856,-4469,-1159,-4814,12368,2756,-993,1779,5589 } },
     { LIBRAW_CAMERAMAKER_Olympus, "SP-570UZ", 0, 0,
       { 11522,-4044,-1146,-4736,12172,2904,-988,1829,6039 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "STYLUS 1",0, 0,	// Olympus "STYLUS 1 and STYLUS 1s have the same CamID, cameras are slightly different
       { 8360,-2420,-880,-3928,12353,1739,-1381,2416,5173 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "TG-4", 0, 0,
      { 11426,-4159,-1126,-2066,10678,1593,-120,1327,4998 } },
     { LIBRAW_CAMERAMAKER_Olympus, "TG-", 0, 0, // same CMs: TG-5, TG-6
      { 10899,-3833,-1082,-2112,10736,1575,-267,1452,5269 } },
 
     { LIBRAW_CAMERAMAKER_Olympus, "XZ-10", 0, 0,
       { 9777,-3483,-925,-2886,11297,1800,-602,1663,5134 } },
     { LIBRAW_CAMERAMAKER_Olympus, "XZ-1", 0, 0,
       { 10901,-4095,-1074,-1141,9208,2293,-62,1417,5158 } },
     { LIBRAW_CAMERAMAKER_Olympus, "XZ-2", 0, 0,
       { 9777,-3483,-925,-2886,11297,1800,-602,1663,5134 } },
 
+	  { LIBRAW_CAMERAMAKER_Olympus, "OM-1", 0, 0,
+		{ 9488, -3984, -714, -2887, 10945, 2229, -137, 960, 5786 } },
+
 	{ LIBRAW_CAMERAMAKER_OmniVison, "", 16, 0x3ff,
       { 12782,-4059,-379,-478,9066,1413,1340,1513,5176 } }, /* DJC */
 
     { LIBRAW_CAMERAMAKER_Pentax, "*istDL2", 0, 0,
       { 10504,-2438,-1189,-8603,16207,2531,-1022,863,12242 } },
     { LIBRAW_CAMERAMAKER_Pentax, "*istDL", 0, 0,
       { 10829,-2838,-1115,-8339,15817,2696,-837,680,11939 } },
     { LIBRAW_CAMERAMAKER_Pentax, "*istDS2", 0, 0,
       { 10504,-2438,-1189,-8603,16207,2531,-1022,863,12242 } },
     { LIBRAW_CAMERAMAKER_Pentax, "*istDS", 0, 0,
       { 10371,-2333,-1206,-8688,16231,2602,-1230,1116,11282 } },
     { LIBRAW_CAMERAMAKER_Pentax, "*istD", 0, 0,
       { 9651,-2059,-1189,-8881,16512,2487,-1460,1345,10687 } },
 
     { LIBRAW_CAMERAMAKER_Pentax, "K-01", 0, 0,
       { 8134,-2728,-645,-4365,11987,2694,-838,1509,6498 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K10D", 0, 0,
       { 9679,-2965,-811,-8622,16514,2182,-975,883,9793 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K1", 0, 0, // same CMs: K100D, "K100D Super", K110D
       { 11095,-3157,-1324,-8377,15834,2720,-1108,947,11688 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K20D", 0, 0,
       { 9427,-2714,-868,-7493,16092,1373,-2199,3264,7180 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K200D", 0, 0,
       { 9186,-2678,-907,-8693,16517,2260,-1129,1094,8524 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-m", 0, 0,
       { 9730,-2989,-970,-8527,16258,2381,-1060,970,8362 } },
     { LIBRAW_CAMERAMAKER_Pentax, "KP", 0, 0,
       { 7825,-2160,-1403,-4841,13555,1349,-1559,2449,5814 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-x", 0, 0,
       { 8843,-2837,-625,-5025,12644,2668,-411,1234,7410 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-r", 0, 0,
       { 9895,-3077,-850,-5304,13035,2521,-883,1768,6936 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-1", 0, 0, // same CMs: K-1, "K-1 Mark II"
       { 8596,-2981,-639,-4202,12046,2431,-685,1424,6122 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-30", 0, 0,
       { 8134,-2728,-645,-4365,11987,2694,-838,1509,6498 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-3 Mark III", 0, 0,
       {  9251, -3817, -1069, -4627, 12667,  2175,  -798,  1660,  5633 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-3", 0, 0, // same CMs: K-3, "K-3 II"
       { 7415,-2052,-721,-5186,12788,2682,-1446,2157,6773 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-500", 0, 0,
       { 8109,-2740,-608,-4593,12175,2731,-1006,1515,6545 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-50", 0, 0,
       { 8109,-2740,-608,-4593,12175,2731,-1006,1515,6545 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-5 II", 0, 0, // same CMs: "K-5 II" and "K-5 IIs"
       { 8170,-2725,-639,-4440,12017,2744,-771,1465,6599 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-5", 0, 0,
       { 8713,-2833,-743,-4342,11900,2772,-722,1543,6247 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-70", 0, 0,
       { 8766,-3149,-747,-3976,11943,2292,-517,1259,5552 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-7", 0, 0,
       { 9142,-2947,-678,-8648,16967,1663,-2224,2898,8615 } },
     { LIBRAW_CAMERAMAKER_Pentax, "KP", 0, 0,
       { 8617,-3228,-1034,-4674,12821,2044,-803,1577,5728 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-S1", 0, 0,
       { 8512,-3211,-787,-4167,11966,2487,-638,1288,6054 } },
     { LIBRAW_CAMERAMAKER_Pentax, "K-S2", 0, 0,
       { 8662,-3280,-798,-3928,11771,2444,-586,1232,6054 } },
 
     { LIBRAW_CAMERAMAKER_Pentax, "Q-S1", 0, 0,
       { 12995,-5593,-1107,-1879,10139,2027,-64,1233,4919 } },
     { LIBRAW_CAMERAMAKER_Pentax, "Q7", 0, 0,
       { 10901,-3938,-1025,-2743,11210,1738,-823,1805,5344 } },
     { LIBRAW_CAMERAMAKER_Pentax, "Q10", 0, 0,
       { 11562,-4183,-1172,-2357,10919,1641,-582,1726,5112 } },
     { LIBRAW_CAMERAMAKER_Pentax, "Q", 0, 0,
       { 11731,-4169,-1267,-2015,10727,1473,-217,1492,4870 } },
 
     { LIBRAW_CAMERAMAKER_Pentax, "MX-1", 0, 0,
       { 9296,-3146,-888,-2860,11287,1783,-618,1698,5151 } },
 
     { LIBRAW_CAMERAMAKER_Pentax, "645D", 0, 0x3e00,
       { 10646,-3593,-1158,-3329,11699,1831,-667,2874,6287 } },
     { LIBRAW_CAMERAMAKER_Pentax, "645Z", 0, 0,
       { 9519,-3591,-664,-4074,11725,2671,-624,1501,6653 } },
 
 
     {LIBRAW_CAMERAMAKER_Panasonic, "DC-S1R", 0, 0,
       { 11822,-5321,-1249,-5958,15114,766,-614,1264,7043 } },
     {LIBRAW_CAMERAMAKER_Panasonic, "DC-S1H", 0, 0,
       { 9397,-3719,-805,-5425,13326,2309,-972,1715,6034 } },
     {LIBRAW_CAMERAMAKER_Panasonic, "DC-S1", 0, 0,
       { 9744,-3905,-779,-4899,12807,2324,-798,1630,5827 } },
     {LIBRAW_CAMERAMAKER_Panasonic, "DC-S5", 0, 0,
       { 9744,-3905,-779,-4899,12807,2324,-798,1630,5827 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-CM1", -15, 0, // same CMs: DMC-CM1, DMC-CM10
       { 8770,-3194,-820,-2871,11281,1803,-513,1552,4434 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-FZ1000M2", -15, 0,
       { 9803,-4185,-992,-4066,12578,1628,-838,1824,5288 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FZ1000", -15, 0,
       { 7830,-2696,-763,-3325,11667,1866,-641,1712,4824 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FZ2500", -15, 0,
       { 7386,-2443,-743,-3437,11864,1757,-608,1660,4766 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FZ100", -15, 0xfff,
       { 16197,-6146,-1761,-2393,10765,1869,366,2238,5248 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FZ150", -15, 0xfff,
       { 11904,-4541,-1189,-2355,10899,1662,-296,1586,4289 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FZ200", -15, 0xfff,
       { 8112,-2563,-740,-3730,11784,2197,-941,2075,4933 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FZ300", -15, 0xfff,
       { 8378,-2798,-769,-3068,11410,1877,-538,1792,4623 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FZ18", 0, 0,
       { 9932,-3060,-935,-5809,13331,2753,-1267,2155,5575 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FZ28", -15, 0xf96,
       { 10109,-3488,-993,-5412,12812,2916,-1305,2140,5543 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FZ30", 0, 0xf94,
       { 10976,-4029,-1141,-7918,15491,2600,-1670,2071,8246 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FZ35", -15, 0,
       { 9938,-2780,-890,-4604,12393,2480,-1117,2304,4620 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FZ40", -15, 0,
       { 13639,-5535,-1371,-1698,9633,2430,316,1152,4108 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FZ50", 0, 0,
       { 7906,-2709,-594,-6231,13351,3220,-1922,2631,6537 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FZ70", -15, 0,
       { 11532,-4324,-1066,-2375,10847,1749,-564,1699,4351 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-FZ80", -15, 0,
       { 8550,-2908,-842,-3195,11529,1881,-338,1603,4631 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FZ8", 0, 0xf7f,
       { 8986,-2755,-802,-6341,13575,3077,-1476,2144,6379 } },
 
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-L10", -15, 0xf96,
       { 8025,-1942,-1050,-7920,15904,2100,-2456,3005,7039 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-L1", 0, 0xf7f,
       { 8054,-1885,-1025,-8349,16367,2040,-2805,3542,7629 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-LC1", 0, 0,
       { 11340,-4069,-1275,-7555,15266,2448,-2960,3426,7685 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-LF1", -15, 0,
       { 9379,-3267,-816,-3227,11560,1881,-926,1928,5340 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-LX100M2", -15, 0,
       { 8585,-3127,-833,-4005,12250,1953,-650,1494,4862 } }, // v.2
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-LX100", -15, 0,
       { 8844,-3538,-768,-3709,11762,2200,-698,1792,5220 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-LX1", 0, 0xf7f,
       { 10704,-4187,-1230,-8314,15952,2501,-920,945,8927 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-LX2", 0, 0,
       { 8048,-2810,-623,-6450,13519,3272,-1700,2146,7049 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-LX3", -15, 0,
       { 8128,-2668,-655,-6134,13307,3161,-1782,2568,6083 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-LX5", -15, 0,
       { 10909,-4295,-948,-1333,9306,2399,22,1738,4582 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-LX7", -15, 0,
       { 10148,-3743,-991,-2837,11366,1659,-701,1893,4899 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-LX9", -15, 0,
       { 7790,-2736,-755,-3452,11870,1769,-628,1647,4898 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-FX150", -15, 0xfff,
       { 9082,-2907,-925,-6119,13377,3058,-1797,2641,5609 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-G99", -15, 0,
       { 9657,-3963,-748,-3361,11378,2258,-568,1415,5158 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-G100", -15, 0,
       { 8370,-2869,-710,-3389,11372,2298,-640,1599,4887 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-G10", 0, 0,
       { 10113,-3400,-1114,-4765,12683,2317,-377,1437,6710 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-G1", -15, 0xf94,
       { 8199,-2065,-1056,-8124,16156,2033,-2458,3022,7220 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-G2", -15, 0xf3c,
       { 10113,-3400,-1114,-4765,12683,2317,-377,1437,6710 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-G3", -15, 0xfff,
       { 6763,-1919,-863,-3868,11515,2684,-1216,2387,5879 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-G5", -15, 0xfff,
       { 7798,-2562,-740,-3879,11584,2613,-1055,2248,5434 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-G6", -15, 0xfff,
       { 8294,-2891,-651,-3869,11590,2595,-1183,2267,5352 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-G7", -15, 0xfff,
       { 7610,-2780,-576,-4614,12195,2733,-1375,2393,6490 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-G8", -15, 0xfff,
       { 7610,-2780,-576,-4614,12195,2733,-1375,2393,6490 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-G9", -15, 0,
       { 7685,-2375,-634,-3687,11700,2249,-748,1546,5111 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GH1", -15, 0xf92,
       { 6299,-1466,-532,-6535,13852,2969,-2331,3112,5984 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GH2", -15, 0xf95,
       { 7780,-2410,-806,-3913,11724,2484,-1018,2390,5298 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GH3", -15, 0,
       { 6559,-1752,-491,-3672,11407,2586,-962,1875,5130 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GH4", -15, 0,
       { 7122,-2108,-512,-3155,11201,2231,-541,1423,5045 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-GH5s", -15, 0,
       { 6929,-2355,-708,-4192,12534,1828,-1097,1989,5195 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-GH5M2", 0, 0,
       {  9300, -3659,  -755, -2981, 10988,  2287,  -190,  1077,  5016 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-GH5", -15, 0,
       { 7641,-2336,-605,-3218,11299,2187,-485,1338,5121 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GM1", -15, 0,
       { 6770,-1895,-744,-5232,13145,2303,-1664,2691,5703 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GM5", -15, 0,
       { 8238,-3244,-679,-3921,11814,2384,-836,2022,5852 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-GF10", -15, 0,
       { 7610,-2780,-576,-4614,12195,2733,-1375,2393,6490 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GF1", -15, 0xf92,
       { 7888,-1902,-1011,-8106,16085,2099,-2353,2866,7330 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GF2", -15, 0xfff,
       { 7888,-1902,-1011,-8106,16085,2099,-2353,2866,7330 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GF3", -15, 0xfff,
       { 9051,-2468,-1204,-5212,13276,2121,-1197,2510,6890 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GF5", -15, 0xfff,
       { 8228,-2945,-660,-3938,11792,2430,-1094,2278,5793 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GF6", -15, 0,
       { 8130,-2801,-946,-3520,11289,2552,-1314,2511,5791 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GF7", -15, 0,
       { 7610,-2780,-576,-4614,12195,2733,-1375,2393,6490 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GF8", -15, 0,
       { 7610,-2780,-576,-4614,12195,2733,-1375,2393,6490 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-GF9", -15, 0,
       { 7610,-2780,-576,-4614,12195,2733,-1375,2393,6490 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GX85", -15, 0,
       { 7771,-3020,-629,-4029,11950,2345,-821,1977,6119 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GX1", -15, 0,
       { 6763,-1919,-863,-3868,11515,2684,-1216,2387,5879 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GX7", -15,0,
       { 7610,-2780,-576,-4614,12195,2733,-1375,2393,6490 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-GX8", -15,0,
       { 7564,-2263,-606,-3148,11239,2177,-540,1435,4853 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-GX9", -15, 0,
       { 7564,-2263,-606,-3148,11239,2177,-540,1435,4853 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-ZS100", -15, 0,
       { 7790,-2736,-755,-3452,11870,1769,-628,1647,4898 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-ZS200", -15, 0,
       { 7790,-2736,-755,-3452,11870,1769,-628,1647,4898 } },
 
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-ZS40", -15, 0,
       { 8607,-2822,-808,-3755,11930,2049,-820,2060,5224 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-ZS50", -15, 0,
       { 8802,-3135,-789,-3151,11468,1904,-550,1745,4810 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DMC-ZS60", -15, 0,
       { 8550,-2908,-842,-3195,11529,1881,-338,1603,4631 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-ZS70", -15, 0,
       { 9052,-3117,-883,-3045,11346,1927,-205,1520,4730 } },
     { LIBRAW_CAMERAMAKER_Panasonic, "DC-ZS80", -15, 0,
       { 12194,-5340,-1329,-3035,11394,1858,-50,1418,5219 } },
 
     { LIBRAW_CAMERAMAKER_PhaseOne, "H20", 0, 0,
       { 3906,1422,-467,-9953,18472,1365,-3307,4496,6406 } },
     { LIBRAW_CAMERAMAKER_PhaseOne, "H25", 0, 0,
       { 2905,732,-237,-8134,16626,1476,-3038,4253,7517 } },
     { LIBRAW_CAMERAMAKER_PhaseOne, "IQ4 150MP", 0, 0,
       {  6644, -2257,  -804, -6459, 14562,  2019, -1221,  1876,  6411}},
     { LIBRAW_CAMERAMAKER_PhaseOne, "IQ140", 0, 0,
       { 8035,435,-962,-6001,13872,2320,-1159,3065,5434 } },
     { LIBRAW_CAMERAMAKER_PhaseOne, "IQ150", 0, 0,
       {10325,845,-604,-4113,13385,481,-1791,4163,6924}}, /* temp */ /* emb */
 //      { 3984,0,0,0,10000,0,0,0,7666 } },
     { LIBRAW_CAMERAMAKER_PhaseOne, "IQ160", 0, 0,
       { 8035,435,-962,-6001,13872,2320,-1159,3065,5434 } },
     { LIBRAW_CAMERAMAKER_PhaseOne, "IQ180", 0, 0,
       { 6294,686,-712,-5435,13417,2211,-1006,2435,5042 } },
 
     { LIBRAW_CAMERAMAKER_PhaseOne, "IQ250",0, 0,
 //    {3984,0,0,0,10000,0,0,0,7666}},
       {10325,845,-604,-4113,13385,481,-1791,4163,6924}}, /* emb */
     { LIBRAW_CAMERAMAKER_PhaseOne, "IQ260", 0, 0,
       { 8035,435,-962,-6001,13872,2320,-1159,3065,5434 } },
     { LIBRAW_CAMERAMAKER_PhaseOne, "IQ280", 0, 0,
       { 6294,686,-712,-5435,13417,2211,-1006,2435,5042 } },
 
     { LIBRAW_CAMERAMAKER_PhaseOne, "IQ3 100MP", 0, 0,
 //    {2423,0,0,0,9901,0,0,0,7989}},
       { 10999,354,-742,-4590,13342,937,-1060,2166,8120} }, /* emb */
     { LIBRAW_CAMERAMAKER_PhaseOne, "IQ3 50MP", 0, 0,
 //      { 3984,0,0,0,10000,0,0,0,7666 } },
       {10058,1079,-587,-4135,12903,944,-916,2726,7480}}, /* emb */
     { LIBRAW_CAMERAMAKER_PhaseOne, "IQ3 60MP", 0, 0,
       { 8035,435,-962,-6001,13872,2320,-1159,3065,5434 } },
     { LIBRAW_CAMERAMAKER_PhaseOne, "IQ3 80MP", 0, 0,
       { 6294,686,-712,-5435,13417,2211,-1006,2435,5042 } },
 
     { LIBRAW_CAMERAMAKER_PhaseOne, "P21", 0, 0,
       { 6516,-2050,-507,-8217,16703,1479,-3492,4741,8489 } },
     { LIBRAW_CAMERAMAKER_PhaseOne, "P30", 0, 0,
       { 4516,-244,-36,-7020,14976,2174,-3206,4670,7087 } },
     { LIBRAW_CAMERAMAKER_PhaseOne, "P40", 0, 0,
       { 8035,435,-962,-6001,13872,2320,-1159,3065,5434 } },
     { LIBRAW_CAMERAMAKER_PhaseOne, "P45", 0, 0,
       { 5053,-24,-117,-5685,14077,1703,-2619,4491,5850 } },
     { LIBRAW_CAMERAMAKER_PhaseOne, "P65", 0, 0,
       { 8035,435,-962,-6001,13872,2320,-1159,3065,5434 } },
     { LIBRAW_CAMERAMAKER_PhaseOne, "P2", 0, 0,
       { 2905,732,-237,-8134,16626,1476,-3038,4253,7517 } },
 
     { LIBRAW_CAMERAMAKER_Photron, "BC2-HD", 0, 0,
       { 14603,-4122,-528,-1810,9794,2017,-297,2763,5936 } }, /* DJC */
 
 	  { LIBRAW_CAMERAMAKER_Polaroid, "x530", 0, 0,
       { 13458,-2556,-510,-5444,15081,205,0,0,12120 } },
 
 	  { LIBRAW_CAMERAMAKER_RED, "One", 704, 0xffff,
       { 21014,-7891,-2613,-3056,12201,856,-2203,5125,8042 } }, /* DJC */
 
     { LIBRAW_CAMERAMAKER_Ricoh, "S10 24-72mm F2.5-4.4 VC", 0, 0,
       { 10531,-4043,-878,-2038,10270,2052,-107,895,4577 } },
     { LIBRAW_CAMERAMAKER_Ricoh, "GR A12 50mm F2.5 MACRO", 0, 0,
       { 8849,-2560,-689,-5092,12831,2520,-507,1280,7104 } },
     { LIBRAW_CAMERAMAKER_Ricoh, "GR DIGITAL 2", 0, 0,
       { 8846,-2704,-729,-5265,12708,2871,-1471,1955,6218 } },
     { LIBRAW_CAMERAMAKER_Ricoh, "GR DIGITAL 3", 0, 0,
       { 8170,-2496,-655,-5147,13056,2312,-1367,1859,5265 } },
     { LIBRAW_CAMERAMAKER_Ricoh, "GR DIGITAL 4", 0, 0,
       { 8771,-3151,-837,-3097,11015,2389,-703,1343,4924 } },
     { LIBRAW_CAMERAMAKER_Ricoh, "GR III", 0, 0,
       { 6127,-1777,-585,-5913,13699,2428,-1088,1780,6017 } },
     { LIBRAW_CAMERAMAKER_Ricoh, "GR II", 0, 0,
       { 5329,-1459,-390,-5407,12930,2768,-1119,1772,6046 } },
     { LIBRAW_CAMERAMAKER_Ricoh, "GR", 0, 0,
       { 5329,-1459,-390,-5407,12930,2768,-1119,1772,6046 } },
     { LIBRAW_CAMERAMAKER_Ricoh, "GX200", 0, 0,
       { 8040,-2368,-626,-4659,12543,2363,-1125,1581,5660 } },
     { LIBRAW_CAMERAMAKER_Ricoh, "GXR Mount A12", 0, 0,
       { 7834,-2182,-739,-5453,13409,2241,-952,2005,6620 } },
     { LIBRAW_CAMERAMAKER_Ricoh, "GXR A12 50mm", 0, 0,
       { 8849,-2560,-689,-5092,12831,2520,-507,1280,7104 } },
     { LIBRAW_CAMERAMAKER_Ricoh, "GXR A12 28mm", 0, 0,
       { 10228,-3159,-933,-5304,13158,2371,-943,1873,6685 } },
     { LIBRAW_CAMERAMAKER_Ricoh, "GXR A16", 0, 0,
       { 7837,-2538,-730,-4370,12184,2461,-868,1648,5830 } },
     { LIBRAW_CAMERAMAKER_Ricoh, "GXR P10", 0, 0,
       { 13168,-5128,-1663,-3006,11569,1611,-373,1244,4907 } },
     { LIBRAW_CAMERAMAKER_Ricoh, "GXR S10", 0, 0,
       { 8963,-2926,-754,-4881,12921,2164,-1464,1944,4901 } },
 
     { LIBRAW_CAMERAMAKER_Samsung, "EX1", 0, 0x3e00,
       { 8898,-2498,-994,-3144,11328,2066,-760,1381,4576 } },
     { LIBRAW_CAMERAMAKER_Samsung, "EX2F", 0, 0x7ff,
       { 10648,-3897,-1055,-2022,10573,1668,-492,1611,4742 } },
 //    { LIBRAW_CAMERAMAKER_Samsung, "GX20", 0, 0,
 //      { 23213,-14575,-4840,-7077,16564,316,385,-1656,9398 } }, // Adobe DNG
 //      { 27717,-17403,-5779,-8450,19778,377,459,1978,11221 } }, // Samsung DNG
 //      { 9427,-2714,-868,-7493,16092,1373,-2199,3264,7180 } },  // Adobe DCP
 
 //    { LIBRAW_CAMERAMAKER_Samsung, "Galaxy S6 Edge Rear Camera", 0, 0,
 //    { LIBRAW_CAMERAMAKER_Samsung, "Galaxy S6 Rear Camera", 0, 0,
     { LIBRAW_CAMERAMAKER_Samsung, "Galaxy S6", 0, 0, // same CMs: "Galaxy S6", "Galaxy S6 Edge"
       { 13699,-5767,-1384,-4449,13879,499,-467,1691,5892 } },
 
 //    { LIBRAW_CAMERAMAKER_Samsung, "Galaxy S7 Edge Rear Camera", 0, 0,
 //    { LIBRAW_CAMERAMAKER_Samsung, "Galaxy S7 Rear Camera", 0, 0,
     { LIBRAW_CAMERAMAKER_Samsung, "Galaxy S7", 0, 0, // same CMs: "Galaxy S7", "Galaxy S7 Edge"
       { 9927,-3704,-1024,-3935,12758,1257,-389,1512,4993 } },
 
 //    { LIBRAW_CAMERAMAKER_Samsung, "Galaxy S8+ Rear Camera", 0, 0,
 //    { LIBRAW_CAMERAMAKER_Samsung, "Galaxy S8 Rear Camera", 0, 0,
     { LIBRAW_CAMERAMAKER_Samsung, "Galaxy S8", 0, 0, // same CMs: "Galaxy S8", "Galaxy S8+"
       { 9927,-3704,-1024,-3935,12758,1257,-389,1512,4993 } },
 
 //    { LIBRAW_CAMERAMAKER_Samsung, "Galaxy S9+ Rear Camera", 0, 0,
 //    { LIBRAW_CAMERAMAKER_Samsung, "Galaxy S9 Rear Camera", 0, 0,
     { LIBRAW_CAMERAMAKER_Samsung, "Galaxy S9", 0, 0, // same CMs: "Galaxy S9", "Galaxy S9+"
       { 13292,-6142,-1268,-4095,12890,1283,-557,1930,5163 } },
 //    { LIBRAW_CAMERAMAKER_Samsung, "Galaxy Note 9 Rear Telephoto Camera", 0, 0,
     { LIBRAW_CAMERAMAKER_Samsung, "Galaxy Note 9 Rear Camera", 0, 0,
       { 13292,-6142,-1268,-4095,12890,1283,-557,1930,5163 } },
 
     { LIBRAW_CAMERAMAKER_Samsung, "NX U", 0, 0,
       { 7557,-2522,-739,-4679,12949,1894,-840,1777,5311 } },
     { LIBRAW_CAMERAMAKER_Samsung, "NX3300", 0, 0,
       { 8060,-2933,-761,-4504,12890,1762,-630,1489,5227 } },
     { LIBRAW_CAMERAMAKER_Samsung, "NX3000", 0, 0,
       { 8060,-2933,-761,-4504,12890,1762,-630,1489,5227 } },
     { LIBRAW_CAMERAMAKER_Samsung, "NX30", 0, 0, // same CMs: NX30, NX300, NX300M
       { 7557,-2522,-739,-4679,12949,1894,-840,1777,5311 } },
     { LIBRAW_CAMERAMAKER_Samsung, "NX2000", 0, 0,
       { 7557,-2522,-739,-4679,12949,1894,-840,1777,5311 } },
     { LIBRAW_CAMERAMAKER_Samsung, "NX2", 0, 0xfff, // same CMs: NX20, NX200, NX210
       { 6933,-2268,-753,-4921,13387,1647,-803,1641,6096 } },
     { LIBRAW_CAMERAMAKER_Samsung, "NX1000", 0, 0,
       { 6933,-2268,-753,-4921,13387,1647,-803,1641,6096 } },
     { LIBRAW_CAMERAMAKER_Samsung, "NX1100", 0, 0,
       { 6933,-2268,-753,-4921,13387,1647,-803,1641,6096 } },
     { LIBRAW_CAMERAMAKER_Samsung, "NX11", 0, 0,
       { 10332,-3234,-1168,-6111,14639,1520,-1352,2647,8331 } },
     { LIBRAW_CAMERAMAKER_Samsung, "NX10", 0, 0, // same CMs: NX10, NX100
       { 10332,-3234,-1168,-6111,14639,1520,-1352,2647,8331 } },
     { LIBRAW_CAMERAMAKER_Samsung, "NX500", 0, 0,
       { 10686,-4042,-1052,-3595,13238,276,-464,1259,5931 } },
     { LIBRAW_CAMERAMAKER_Samsung, "NX5", 0, 0,
       { 10332,-3234,-1168,-6111,14639,1520,-1352,2647,8331 } },
     { LIBRAW_CAMERAMAKER_Samsung, "NX1", 0, 0,
       { 10686,-4042,-1052,-3595,13238,276,-464,1259,5931 } },
     { LIBRAW_CAMERAMAKER_Samsung, "NX mini", 0, 0,
       { 5222,-1196,-550,-6540,14649,2009,-1666,2819,5657 } },
 
     { LIBRAW_CAMERAMAKER_Samsung, "WB2000", 0, 0xfff,
       { 12093,-3557,-1155,-1000,9534,1733,-22,1787,4576 } },
     { LIBRAW_CAMERAMAKER_Samsung, "WB5000", 0, 0,
       {  7675, -2195,  -305, -5860, 14118,  1857, -2425,  4007,  6578}},
     { LIBRAW_CAMERAMAKER_Samsung, "S85", 0, 0,
       { 11885,-3968,-1473,-4214,12299,1916,-835,1655,5549 } }, /* DJC */
 
 // Foveon: LibRaw color data
     { LIBRAW_CAMERAMAKER_Sigma, "dp0 Quattro", 2047, 0,
       { 13801,-3390,-1016,5535,3802,877,1848,4245,3730 } },
     { LIBRAW_CAMERAMAKER_Sigma, "dp1 Quattro", 2047, 0,
       { 13801,-3390,-1016,5535,3802,877,1848,4245,3730 } },
     { LIBRAW_CAMERAMAKER_Sigma, "dp2 Quattro", 2047, 0,
       { 13801,-3390,-1016,5535,3802,877,1848,4245,3730 } },
     { LIBRAW_CAMERAMAKER_Sigma, "dp3 Quattro", 2047, 0,
       { 13801,-3390,-1016,5535,3802,877,1848,4245,3730 } },
     { LIBRAW_CAMERAMAKER_Sigma, "sd Quattro H", 256, 0,
       { 1295,108,-311,256,828,-65,-28,750,254 } }, /* temp */
     { LIBRAW_CAMERAMAKER_Sigma, "sd Quattro", 2047, 0,
       { 1295,108,-311,256,828,-65,-28,750,254 } }, /* temp */
     { LIBRAW_CAMERAMAKER_Sigma, "SD9", 15, 4095,
       { 13564,-2537,-751,-5465,15154,194,-67,116,10425 } },
     { LIBRAW_CAMERAMAKER_Sigma, "SD10", 15, 16383,
       { 6787,-1682,575,-3091,8357,160,217,-369,12314 } },
     { LIBRAW_CAMERAMAKER_Sigma, "SD14", 15, 16383,
       { 13589,-2509,-739,-5440,15104,193,-61,105,10554 } },
     { LIBRAW_CAMERAMAKER_Sigma, "SD15", 15, 4095,
       { 13556,-2537,-730,-5462,15144,195,-61,106,10577 } },
 // Merrills + SD1
     { LIBRAW_CAMERAMAKER_Sigma, "SD1", 31, 4095,
       { 5133,-1895,-353,4978,744,144,3837,3069,2777 } }, /* LibRaw */
     { LIBRAW_CAMERAMAKER_Sigma, "DP1 Merrill", 31, 4095,
       { 5133,-1895,-353,4978,744,144,3837,3069,2777 } }, /* LibRaw */
     { LIBRAW_CAMERAMAKER_Sigma, "DP2 Merrill", 31, 4095,
       { 5133,-1895,-353,4978,744,144,3837,3069,2777 } }, /* LibRaw */
     { LIBRAW_CAMERAMAKER_Sigma, "DP3 Merrill", 31, 4095,
       { 5133,-1895,-353,4978,744,144,3837,3069,2777 } }, /* LibRaw */
 // Sigma DP (non-Merrill Versions)
     { LIBRAW_CAMERAMAKER_Sigma, "DP1X", 0, 4095,
       { 13704,-2452,-857,-5413,15073,186,-89,151,9820 } },
     { LIBRAW_CAMERAMAKER_Sigma, "DP1", 0, 4095,
       { 12774,-2591,-394,-5333,14676,207,15,-21,12127 } },
     { LIBRAW_CAMERAMAKER_Sigma, "DP", 0, 4095,
       //  { 7401,-1169,-567,2059,3769,1510,664,3367,5328 } },
       { 13100,-3638,-847,6855,2369,580,2723,3218,3251 } }, /* LibRaw */
 
 	{ LIBRAW_CAMERAMAKER_Sinar, "", 0, 0,
       { 16442,-2956,-2422,-2877,12128,750,-1136,6066,4559 } }, /* DJC */
 
     { LIBRAW_CAMERAMAKER_Sony, "DSC-F828", 0, 0,
       { 7924,-1910,-777,-8226,15459,2998,-1517,2199,6818,-7242,11401,3481 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSC-R1", 0, 0,
       { 8512,-2641,-694,-8042,15670,2526,-1821,2117,7414 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSC-V3", 0, 0,
       { 7511,-2571,-692,-7894,15088,3060,-948,1111,8128 } },
 
     { LIBRAW_CAMERAMAKER_Sony, "DSC-HX9", -800, 0, // same CMs: DSC-HX95, DSC-HX99
       { 13076,-5686,-1481,-4027,12851,1251,-167,725,4937 } },
 
     { LIBRAW_CAMERAMAKER_Sony, "ZV-1", -800, 0,
       {8280,-2987,-703,-3531,11645,2133,-550,1542,5312 } },
 
     { LIBRAW_CAMERAMAKER_Sony, "ZV-E10", 0, 0,
       { 7657,-2847,-607,-4083,11966,2389,-684,1418,5844 } }, // a la ILCE-6100
 
     { LIBRAW_CAMERAMAKER_Sony, "DSC-RX100M7", -800, 0,
       {10315, -4390, -937, -4859, 12734, 2365, -734, 1537, 5997 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSC-RX100M6", -800, 0,
       { 7325,-2321,-596,-3494,11674,2055,-668,1562,5031 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSC-RX100M5A", -800, 0,
       { 11176,-4700,-965,-4004,12184,2032,-763,1726,5876 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSC-RX100M", -800, 0, // same CMs: DSC-RX100M2, DSC-RX100M3, DSC-RX100M4, DSC-RX100M5
       { 6596,-2079,-562,-4782,13016,1933,-970,1581,5181 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSC-RX100", 0, 0,
       { 8651,-2754,-1057,-3464,12207,1373,-568,1398,4434 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSC-RX10M4", -800, 0,
       { 7699,-2566,-629,-2967,11270,1928,-378,1286,4807 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSC-RX10",0, 0, // same CMs: DSC-RX10, DSC-RX10M2, DSC-RX10M3
       { 6679,-1825,-745,-5047,13256,1953,-1580,2422,5183 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSC-RX1RM2", 0, 0,
       { 6629,-1900,-483,-4618,12349,2550,-622,1381,6514 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSC-RX1R", 0, 0,
       { 6344,-1612,-462,-4863,12477,2681,-865,1786,6899 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSC-RX1", 0, 0,
       { 6344,-1612,-462,-4863,12477,2681,-865,1786,6899 } },
 
     { LIBRAW_CAMERAMAKER_Sony, "DSC-RX0", -800, 0, // same CMs: DSC-RX0, DSC-RX0M2
       { 9396,-3507,-843,-2497,11111,1572,-343,1355,5089 } },
 
     { LIBRAW_CAMERAMAKER_Sony, "DSLR-A100", 0, 0xfeb,
       { 9437,-2811,-774,-8405,16215,2290,-710,596,7181 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSLR-A290", 0, 0,
       { 6038,-1484,-579,-9145,16746,2512,-875,746,7218 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSLR-A2", 0, 0, // same CMs: DSLR-A200, DSLR-A230
       { 9847,-3091,-928,-8485,16345,2225,-715,595,7103 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSLR-A300", 0, 0,
       { 9847,-3091,-928,-8485,16345,2225,-715,595,7103 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSLR-A330", 0, 0,
       { 9847,-3091,-929,-8485,16346,2225,-714,595,7103 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSLR-A3", 0, 0, // same CMs: DSLR-A350, DSLR-A380, DSLR-A390
       { 6038,-1484,-579,-9145,16746,2512,-875,746,7218 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSLR-A450", 0, 0, // close to 16596 if arw is 14-bit
       { 4950,-580,-103,-5228,12542,3029,-709,1435,7371 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSLR-A580", 0, 16596,
       { 5932,-1492,-411,-4813,12285,2856,-741,1524,6739 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSLR-A500", 0, 16596,
       { 6046,-1127,-278,-5574,13076,2786,-691,1419,7625 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSLR-A5", 0, 16596,  // same CMs: DSLR-A550, DSLR-A560
       { 4950,-580,-103,-5228,12542,3029,-709,1435,7371 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSLR-A700", 0, 0,
       { 5775,-805,-359,-8574,16295,2391,-1943,2341,7249 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSLR-A850", 0, 0,
       { 5413,-1162,-365,-5665,13098,2866,-608,1179,8440 } },
     { LIBRAW_CAMERAMAKER_Sony, "DSLR-A900", 0, 0,
       { 5209,-1072,-397,-8845,16120,2919,-1618,1803,8654 } },
 
     { LIBRAW_CAMERAMAKER_Sony, "ILCA-68", 0, 0,
       { 6435,-1903,-536,-4722,12449,2550,-663,1363,6517 } },
     { LIBRAW_CAMERAMAKER_Sony, "ILCA-77M2", 0, 0,
       { 5991,-1732,-443,-4100,11989,2381,-704,1467,5992 } },
     { LIBRAW_CAMERAMAKER_Sony, "ILCA-99M2", 0, 0,
       { 6660,-1918,-471,-4613,12398,2485,-649,1433,6447 } },
 
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-1", 0, 0,
       { 8161, -2947, -739, -4811, 12668, 2389, -437, 1229, 6524}},
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-7RM4", 0, 0, // same CMs: ILCE-7RM4, ILCE-7RM4A
       { 7662, -2686,-660,-5240, 12965,2530, -796, 1508, 6167 } },
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-7RM3", 0, 0, // same CMs: ILCE-7RM3, ILCE-7RM3A
       { 6640,-1847,-503,-5238,13010,2474,-993,1673,6527 } },
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-7RM2", 0, 0,
       { 6629,-1900,-483,-4618,12349,2550,-622,1381,6514 } },
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-7R", 0, 0,
       { 4913,-541,-202,-6130,13513,2906,-1564,2151,7183 } },
 
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-7SM3", 0, 0,
       { 6912,-2127,-469,-4470,12175,2587,-398,1478,6492 } },
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-7S", 0, 0, // same CMs: ILCE-7S, ILCE-7SM2
       { 5838,-1430,-246,-3497,11477,2297,-748,1885,5778 } },
 
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-7C", 0, 0,
       { 7374,-2389,-551,-5435,13162,2519,-1006,1795,6552 } },
 
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-7M3", 0, 0,
       { 7374,-2389,-551,-5435,13162,2519,-1006,1795,6552 } },
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-7", 0, 0, // same CMs: ILCE-7, ILCE-7M2
       { 5271,-712,-347,-6153,13653,2763,-1601,2366,7242 } },
 
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-9", 0, 0, // same CMs: ILCE-9, ILCE-9M2
       { 6389,-1703,-378,-4562,12265,2587,-670,1489,6550 } },
 
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-6100", 0, 0,
       { 7657,-2847,-607,-4083,11966,2389,-684,1418,5844 } },
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-6300", 0, 0,
       { 5973,-1695,-419,-3826,11797,2293,-639,1398,5789 } },
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-6400", 0, 0,
       { 7657,-2847,-607,-4083,11966,2389,-684,1418,5844 } },
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-6500", 0, 0,
       { 5973,-1695,-419,-3826,11797,2293,-639,1398,5789 } },
     { LIBRAW_CAMERAMAKER_Sony, "ILCE-6600", 0, 0,
       { 7657,-2847,-607,-4083,11966,2389,-684,1418,5844 } },
     { LIBRAW_CAMERAMAKER_Sony, "ILCE", 0, 0, // same CMs: ILCE-3000, ILCE-5000, ILCE-5100, ILCE-6000, ILCE-QX1
       { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },
 
     { LIBRAW_CAMERAMAKER_Sony, "ILME-FX3", 0, 0,
       { 6912, -2127, -469, -4470, 12175, 2587, -398, 1478, 6492 } },
 
     { LIBRAW_CAMERAMAKER_Sony, "NEX-5N", 0, 0,
       { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },
     { LIBRAW_CAMERAMAKER_Sony, "NEX-5R", 0, 0,
       { 6129,-1545,-418,-4930,12490,2743,-977,1693,6615 } },
     { LIBRAW_CAMERAMAKER_Sony, "NEX-5T", 0, 0,
       { 6129,-1545,-418,-4930,12490,2743,-977,1693,6615 } },
     { LIBRAW_CAMERAMAKER_Sony, "NEX-5", 0, 0,
       { 6549,-1550,-436,-4880,12435,2753,-854,1868,6976 } },
     { LIBRAW_CAMERAMAKER_Sony, "NEX-3N", 0, 0,
       { 6129,-1545,-418,-4930,12490,2743,-977,1693,6615 } },
     { LIBRAW_CAMERAMAKER_Sony, "NEX-3", 0, 0,
       { 6549,-1550,-436,-4880,12435,2753,-854,1868,6976 } },
     { LIBRAW_CAMERAMAKER_Sony, "NEX-6", 0, 0,
       { 6129,-1545,-418,-4930,12490,2743,-977,1693,6615 } },
     { LIBRAW_CAMERAMAKER_Sony, "NEX-7", 0, 0,
       { 5491,-1192,-363,-4951,12342,2948,-911,1722,7192 } },
     { LIBRAW_CAMERAMAKER_Sony, "NEX-VG30", 0, 0,
       { 6129,-1545,-418,-4930,12490,2743,-977,1693,6615 } },
     { LIBRAW_CAMERAMAKER_Sony, "NEX-VG900", 0, 0,
       { 6344,-1612,-462,-4863,12477,2681,-865,1786,6899 } },
     { LIBRAW_CAMERAMAKER_Sony, "NEX", 0, 0, // same CMs: NEX-C3, NEX-F3, NEX-VG20
       { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },
     { LIBRAW_CAMERAMAKER_Sony, "SLT-A33", 0, 0,
       { 6069,-1221,-366,-5221,12779,2734,-1024,2066,6834 } },
     { LIBRAW_CAMERAMAKER_Sony, "SLT-A35", 0, 0,
       { 5986,-1618,-415,-4557,11820,3120,-681,1404,6971 } },
     { LIBRAW_CAMERAMAKER_Sony, "SLT-A37", 0, 0,
       { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },
     { LIBRAW_CAMERAMAKER_Sony, "SLT-A55", 0, 0,
       { 5932,-1492,-411,-4813,12285,2856,-741,1524,6739 } },
     { LIBRAW_CAMERAMAKER_Sony, "SLT-A5", 0, 0, // same CMs: SLT-A57, SLT-A58
       { 5991,-1456,-455,-4764,12135,2980,-707,1425,6701 } },
     { LIBRAW_CAMERAMAKER_Sony, "SLT-A65", 0, 0,
       { 5491,-1192,-363,-4951,12342,2948,-911,1722,7192 } },
     { LIBRAW_CAMERAMAKER_Sony, "SLT-A77", 0, 0,
       { 5491,-1192,-363,-4951,12342,2948,-911,1722,7192 } },
     { LIBRAW_CAMERAMAKER_Sony, "SLT-A99", 0, 0,
       { 6344,-1612,-462,-4863,12477,2681,-865,1786,6899 } },
     { LIBRAW_CAMERAMAKER_Sony, "MODEL-NAME", 0, 0,
       { 5491,-1192,-363,-4951,12342,2948,-911,1722,7192 } },
 
     { LIBRAW_CAMERAMAKER_YI, "M1", 0, 0,
       { 7712,-2059,-653,-3882,11494,2726,-710,1332,5958 } },
   };
   // clang-format on
 
   double cam_xyz[4][3];
   //char name[130];
   int i, j;
 
   if (colors > 4 || colors < 1)
     return 1;
 
   int bl4 = (cblack[0] + cblack[1] + cblack[2] + cblack[3]) / 4, bl64 = 0;
   if (cblack[4] * cblack[5] > 0)
   {
     for (unsigned c = 0; c < 4096 && c < cblack[4] * cblack[5]; c++)
       bl64 += cblack[c + 6];
     bl64 /= cblack[4] * cblack[5];
   }
   int rblack = black + bl4 + bl64;
 
   for (i = 0; i < int(sizeof table / sizeof *table); i++)
   {
 	  if (table[i].m_idx == make_idx)
 	  {
 		  size_t l = strlen(table[i].prefix);
 		  if (!l ||  !strncasecmp(t_model, table[i].prefix, l))
 		  {
 			  if (!dng_version)
 			  {
 				  if (table[i].t_black > 0)
 				  {
 					  black = (ushort)table[i].t_black;
 					  memset(cblack, 0, sizeof(cblack));
 				  }
 				  else if (table[i].t_black < 0 && rblack == 0)
 				  {
 					  black = (ushort)(-table[i].t_black);
 					  memset(cblack, 0, sizeof(cblack));
 				  }
 				  if (table[i].t_maximum)
 					  maximum = (ushort)table[i].t_maximum;
 			  }
 			  if (table[i].trans[0])
 			  {
 				  for (raw_color = j = 0; j < 12; j++)
 					  if (internal_only)
 						  imgdata.color.cam_xyz[j / 3][j % 3] = table[i].trans[j] / 10000.f;
 					  else
                           ((double *)cam_xyz)[j] = imgdata.color.cam_xyz[j / 3][j % 3] = table[i].trans[j] / 10000.f;
 				  if (!internal_only)
 					  cam_xyz_coeff(rgb_cam, cam_xyz);
 			  }
 			  return 1; // CM found
 		  }
 	  }
   }
   return 0; // CM not found
 }
