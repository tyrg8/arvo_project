commit 2b8ac667b8eba0a7f828341bc4262693d7e47b96
Author: Michael Vrhel <michael.vrhel@artifex.com>
Date:   Thu Apr 14 14:26:41 2022 -0700

    Add L* threshold for is_white check
    
    -dBlackVector -dBlackText use a compile time setting on the
    L* value of the fill value to decide if value should be a
    gray value of 0 (black) or a gray value of 1 (white).
    Currently set to a value of 95 (L* varies from 0 to 100)

diff --git a/base/gsicc_blacktext.c b/base/gsicc_blacktext.c
index 14e0dc995..f11e166d4 100644
--- a/base/gsicc_blacktext.c
+++ b/base/gsicc_blacktext.c
@@ -1,26 +1,31 @@
 /* Copyright (C) 2001-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 /*  Handling of color spaces stored during replacement of all
  *  text with black.
 */
 
 #include "gsmemory.h"
 #include "gsstruct.h"
 #include "gzstate.h"
 #include "gsicc_blacktext.h"
+#include "gsicc_cache.h"
+
+/* L* value.  Above this value things are mapped to pure white.
+   Below this value things are mapped to pure black. */
+#define WHITE_THRESHOLD 95
 
 /* gsicc_blacktextvec_state_t is going to be storing GCed items
    (color spaces and client colors) and so will need to be GCed */
@@ -63,40 +68,91 @@ gsicc_blacktextvec_state_new(gs_memory_t *memory, bool is_text)
 
 /* Crude white color check. Only valid for ICC based RGB, CMYK, Gray, and LAB CS.
   Makes some assumptions about profile.  Also may want some tolerance check. */
-static inline bool is_white(gs_color_space* pcs, gs_client_color* pcc)
+static inline bool is_white(gs_gstate *pgs, gs_color_space* pcs, gs_client_color* pcc)
 {
+    double Lstar = 0;
+
     if (gs_color_space_get_index(pcs) == gs_color_space_index_ICC) {
-        switch (pcs->cmm_icc_profile_data->data_cs) {
-            case gsGRAY:
-                if (pcc->paint.values[0] == 1.0)
-                    return true;
-                else
-                    return false;
-                break;
-            case gsRGB:
-                if (pcc->paint.values[0] == 1.0 && pcc->paint.values[1] == 1.0 &&
-                    pcc->paint.values[2] == 1.0)
-                    return true;
-                else
-                    return false;
-                break;
-            case gsCMYK:
-                if (pcc->paint.values[0] == 0.0 && pcc->paint.values[1] == 0.0 &&
-                    pcc->paint.values[2] == 0.0 && pcc->paint.values[3] == 0.0)
-                    return true;
-                else
-                    return false;
-                break;
-            case gsCIELAB:
-                if (pcc->paint.values[0] == 100.0 && pcc->paint.values[1] == 0.0 &&
-                    pcc->paint.values[2] == 0.0)
-                    return true;
-                else
+        if (pcs->cmm_icc_profile_data->data_cs == gsCIELAB) {
+            if (pcc->paint.values[0] >= WHITE_THRESHOLD)
+                return true;
+            else
+                return false;
+        }
+        /* For all others, lets get to CIELAB value */
+        if (pgs->icc_manager->lab_profile != NULL) {
+            gsicc_link_t *icc_link;
+            gsicc_rendering_param_t rendering_params;
+            unsigned short psrc[4];
+            unsigned short pdes[3];
+
+            rendering_params.black_point_comp = gsBLACKPTCOMP_ON;
+            rendering_params.graphics_type_tag = GS_UNKNOWN_TAG;
+            rendering_params.override_icc = false;
+            rendering_params.preserve_black = gsBKPRESNOTSPECIFIED;
+            rendering_params.rendering_intent = gsRELATIVECOLORIMETRIC;
+            rendering_params.cmm = gsCMM_DEFAULT;
+
+            icc_link = gsicc_get_link_profile(pgs, NULL, pcs->cmm_icc_profile_data,
+                                          pgs->icc_manager->lab_profile, &rendering_params,
+                                          pgs->memory, false);
+            if (icc_link == NULL)
+                return false;
+
+            switch (pcs->cmm_icc_profile_data->data_cs) {
+                case gsGRAY:
+                    psrc[0] = pcc->paint.values[0] * 65535;
+                    break;
+                case gsRGB:
+                    psrc[0] = pcc->paint.values[0] * 65535;
+                    psrc[1] = pcc->paint.values[1] * 65535;
+                    psrc[2] = pcc->paint.values[2] * 65535;
+                    break;
+                case gsCMYK:
+                    psrc[0] = pcc->paint.values[0] * 65535;
+                    psrc[1] = pcc->paint.values[1] * 65535;
+                    psrc[2] = pcc->paint.values[2] * 65535;
+                    psrc[3] = pcc->paint.values[3] * 65535;
+                    break;
+                default:
+                    gsicc_release_link(icc_link);
                     return false;
-                break;
-            default:
+            }
+            (icc_link->procs.map_color)(NULL, icc_link, psrc, pdes, 2);
+            gsicc_release_link(icc_link);
+
+            Lstar = pdes[0] * 100.0 / 65535.0;
+            if (Lstar >= WHITE_THRESHOLD)
+                return true;
+            else
                 return false;
+        } else {
+            /* Something to fall back on */
+            switch (pcs->cmm_icc_profile_data->data_cs) {
+                case gsGRAY:
+                    if (pcc->paint.values[0] == 1.0)
+                        return true;
+                    else
+                        return false;
+                    break;
+                case gsRGB:
+                    if (pcc->paint.values[0] == 1.0 && pcc->paint.values[1] == 1.0 &&
+                        pcc->paint.values[2] == 1.0)
+                        return true;
+                    else
+                        return false;
+                    break;
+                case gsCMYK:
+                    if (pcc->paint.values[0] == 0.0 && pcc->paint.values[1] == 0.0 &&
+                        pcc->paint.values[2] == 0.0 && pcc->paint.values[3] == 0.0)
+                        return true;
+                    else
+                        return false;
+                    break;
+                default:
+                    return false;
+            }
         }
     } else
         return false;
 }
@@ -104,48 +160,48 @@ static inline bool is_white(gs_color_space* pcs, gs_client_color* pcc)
 bool gsicc_setup_black_textvec(gs_gstate *pgs, gx_device *dev, bool is_text)
 {
     gs_color_space *pcs_curr = gs_currentcolorspace_inline(pgs);
     gs_color_space *pcs_alt = gs_swappedcolorspace_inline(pgs);
 
     /* If neither space is ICC then we are not doing anything */
     if (!gs_color_space_is_ICC(pcs_curr) && !gs_color_space_is_ICC(pcs_alt))
         return false;
 
     /* Create a new object to hold the cs details */
     pgs->black_textvec_state = gsicc_blacktextvec_state_new(pgs->memory, is_text);
     if (pgs->black_textvec_state == NULL)
         return false; /* No error just move on */
 
     /* If curr space is ICC then store it */
     if  (gs_color_space_is_ICC(pcs_curr)) {
         rc_increment_cs(pcs_curr);  /* We are storing the cs. Will decrement when structure is released */
         pgs->black_textvec_state->pcs = pcs_curr;
         pgs->black_textvec_state->pcc = pgs->color[0].ccolor;
         cs_adjust_color_count(pgs, 1); /* The set_gray will do a decrement, only need if pattern */
         pgs->black_textvec_state->value[0] = pgs->color[0].ccolor->paint.values[0];
 
-        if (is_white(pcs_curr, pgs->color[0].ccolor))
+        if (is_white(pgs, pcs_curr, pgs->color[0].ccolor))
             gs_setgray(pgs, 1.0);
         else
             gs_setgray(pgs, 0.0);
     }
 
     /* If alt space is ICC then store it */
     if (gs_color_space_is_ICC(pcs_alt)) {
         rc_increment_cs(pcs_alt);  /* We are storing the cs. Will decrement when structure is released */
         pgs->black_textvec_state->pcs_alt = pcs_alt;
 
         gs_swapcolors_quick(pgs);  /* Have to swap for set_gray and adjust color count */
         pgs->black_textvec_state->pcc_alt = pgs->color[0].ccolor;
         cs_adjust_color_count(pgs, 1); /* The set_gray will do a decrement, only need if pattern */
         pgs->black_textvec_state->value[1] = pgs->color[0].ccolor->paint.values[0];
 
-        if (is_white(pcs_alt, pgs->color[0].ccolor))
+        if (is_white(pgs, pcs_alt, pgs->color[0].ccolor))
             gs_setgray(pgs, 1.0);
         else
             gs_setgray(pgs, 0.0);
         gs_swapcolors_quick(pgs);
     }
 
     pgs->black_textvec_state->is_fill = pgs->is_fill_color;
     return true; /* Need to clean up */
 }
diff --git a/base/lib.mak b/base/lib.mak
index 4dc6c26e9..5dfada2f4 100644
--- a/base/lib.mak
+++ b/base/lib.mak
@@ -3000,7 +3000,7 @@ $(GLOBJ)gsicc_profilecache.$(OBJ) : $(GLSRC)gsicc_profilecache.c $(AK)\
 
 $(GLOBJ)gsicc_blacktext.$(OBJ) : $(GLSRC)gsicc_blacktext.c $(AK)\
  $(gsmemory_h) $(gsstruct_h) $(gzstate_h) $(gsicc_blacktext_h)\
- $(LIB_MAK) $(MAKEDIRS)
+ $(gsicc_cache_h) $(LIB_MAK) $(MAKEDIRS)
 	$(GLCC) $(GLO_)gsicc_blacktext.$(OBJ) $(C_) $(GLSRC)gsicc_blacktext.c
 
 $(GLOBJ)gsicc_lcms2mt_1_0.$(OBJ) : $(GLSRC)gsicc_lcms2mt.c\
