commit 067986fa674f0811614dab4c4572f5f7ff483400
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Sat Mar 18 14:44:28 2023 +0100

    parser: Fix regressions from previous commits
    
    - Fix memory leak in xmlParseNmtoken.
    - Fix buffer overread after htmlParseCharDataInternal.

diff --git a/HTMLparser.c b/HTMLparser.c
index 0e79dffd..ca3ebc41 100644
--- a/HTMLparser.c
+++ b/HTMLparser.c
@@ -3188,82 +3188,82 @@ static void
 htmlParseCharDataInternal(htmlParserCtxtPtr ctxt, int readahead) {
     xmlChar buf[HTML_PARSER_BIG_BUFFER_SIZE + 6];
     int nbchar = 0;
     int cur, l;
 
     if (readahead)
         buf[nbchar++] = readahead;
 
     cur = CUR_CHAR(l);
     while (((cur != '<') || (ctxt->token == '<')) &&
            ((cur != '&') || (ctxt->token == '&')) &&
 	   (cur != 0)) {
 	if (!(IS_CHAR(cur))) {
 	    htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,
 	                "Invalid char in CDATA 0x%X\n", cur);
 	} else {
 	    COPY_BUF(l,buf,nbchar,cur);
 	}
+	NEXTL(l);
 	if (nbchar >= HTML_PARSER_BIG_BUFFER_SIZE) {
             buf[nbchar] = 0;
 
 	    /*
 	     * Ok the segment is to be consumed as chars.
 	     */
 	    if ((ctxt->sax != NULL) && (!ctxt->disableSAX)) {
 		if (areBlanks(ctxt, buf, nbchar)) {
 		    if (ctxt->keepBlanks) {
 			if (ctxt->sax->characters != NULL)
 			    ctxt->sax->characters(ctxt->userData, buf, nbchar);
 		    } else {
 			if (ctxt->sax->ignorableWhitespace != NULL)
 			    ctxt->sax->ignorableWhitespace(ctxt->userData,
 			                                   buf, nbchar);
 		    }
 		} else {
 		    htmlCheckParagraph(ctxt);
 		    if (ctxt->sax->characters != NULL)
 			ctxt->sax->characters(ctxt->userData, buf, nbchar);
 		}
 	    }
 	    nbchar = 0;
             SHRINK;
 	}
-	NEXTL(l);
 	cur = CUR_CHAR(l);
     }
     if (ctxt->instate == XML_PARSER_EOF)
         return;
     if (nbchar != 0) {
         buf[nbchar] = 0;
 
 	/*
 	 * Ok the segment is to be consumed as chars.
 	 */
 	if ((ctxt->sax != NULL) && (!ctxt->disableSAX)) {
 	    if (areBlanks(ctxt, buf, nbchar)) {
 		if (ctxt->keepBlanks) {
 		    if (ctxt->sax->characters != NULL)
 			ctxt->sax->characters(ctxt->userData, buf, nbchar);
 		} else {
 		    if (ctxt->sax->ignorableWhitespace != NULL)
 			ctxt->sax->ignorableWhitespace(ctxt->userData,
 			                               buf, nbchar);
 		}
 	    } else {
 		htmlCheckParagraph(ctxt);
 		if (ctxt->sax->characters != NULL)
 		    ctxt->sax->characters(ctxt->userData, buf, nbchar);
 	    }
 	}
     }
 }
 
 /**
  * htmlParseCharData:
  * @ctxt:  an HTML parser context
  *
  * parse a CharData section.
  * if we are within a CDATA section ']]>' marks an end of section.
  *
  * [14] CharData ::= [^<&]* - ([^<&]* ']]>' [^<&]*)
  */
diff --git a/parser.c b/parser.c
index f69231d5..8e548cda 100644
--- a/parser.c
+++ b/parser.c
@@ -3631,85 +3631,87 @@ xmlChar *
 xmlParseNmtoken(xmlParserCtxtPtr ctxt) {
     xmlChar buf[XML_MAX_NAMELEN + 5];
     int len = 0, l;
     int c;
     int maxLength = (ctxt->options & XML_PARSE_HUGE) ?
                     XML_MAX_TEXT_LENGTH :
                     XML_MAX_NAME_LENGTH;
 
 #ifdef DEBUG
     nbParseNmToken++;
 #endif
 
     c = CUR_CHAR(l);
 
     while (xmlIsNameChar(ctxt, c)) {
 	COPY_BUF(l,buf,len,c);
 	NEXTL(l);
 	c = CUR_CHAR(l);
 	if (len >= XML_MAX_NAMELEN) {
 	    /*
 	     * Okay someone managed to make a huge token, so he's ready to pay
 	     * for the processing speed.
 	     */
 	    xmlChar *buffer;
 	    int max = len * 2;
 
 	    buffer = (xmlChar *) xmlMallocAtomic(max);
 	    if (buffer == NULL) {
 	        xmlErrMemory(ctxt, NULL);
 		return(NULL);
 	    }
 	    memcpy(buffer, buf, len);
 	    while (xmlIsNameChar(ctxt, c)) {
 		if (len + 10 > max) {
 		    xmlChar *tmp;
 
 		    max *= 2;
 		    tmp = (xmlChar *) xmlRealloc(buffer, max);
 		    if (tmp == NULL) {
 			xmlErrMemory(ctxt, NULL);
 			xmlFree(buffer);
 			return(NULL);
 		    }
 		    buffer = tmp;
 		}
 		COPY_BUF(l,buffer,len,c);
                 if (len > maxLength) {
                     xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "NmToken");
                     xmlFree(buffer);
                     return(NULL);
                 }
 		NEXTL(l);
 		c = CUR_CHAR(l);
 	    }
 	    buffer[len] = 0;
-            if (ctxt->instate == XML_PARSER_EOF)
+            if (ctxt->instate == XML_PARSER_EOF) {
+                xmlFree(buffer);
                 return(NULL);
+            }
 	    return(buffer);
 	}
     }
     if (ctxt->instate == XML_PARSER_EOF)
         return(NULL);
     if (len == 0)
         return(NULL);
     if (len > maxLength) {
         xmlFatalErr(ctxt, XML_ERR_NAME_TOO_LONG, "NmToken");
         return(NULL);
     }
     return(xmlStrndup(buf, len));
 }
 
 /**
  * xmlParseEntityValue:
  * @ctxt:  an XML parser context
  * @orig:  if non-NULL store a copy of the original entity value
  *
  * DEPRECATED: Internal function, don't use.
  *
  * parse a value for ENTITY declarations
  *
  * [9] EntityValue ::= '"' ([^%&"] | PEReference | Reference)* '"' |
  *	               "'" ([^%&'] | PEReference | Reference)* "'"
  *
  * Returns the EntityValue parsed with reference substituted or NULL
  */
