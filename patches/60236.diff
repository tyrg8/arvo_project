commit 52b5adb54a379ecfb46313ac36bc3556634226af
Merge: 4d25faafe fb9e036d5
Author: Sean Parkinson <sean@wolfssl.com>
Date:   Fri Jul 7 10:54:18 2023 +1000

    Merge pull request #6581 from kareem-wolfssl/eccNullKCheck
    
    Fixed crash in wc_ecc_free.

diff --git a/wolfcrypt/src/ecc.c b/wolfcrypt/src/ecc.c
index 359bcee76..9124234c9 100644
--- a/wolfcrypt/src/ecc.c
+++ b/wolfcrypt/src/ecc.c
@@ -7596,100 +7596,103 @@ WOLFSSL_ABI
 int wc_ecc_free(ecc_key* key)
 {
     if (key == NULL) {
         return 0;
     }
 
 #if defined(WOLFSSL_ECDSA_SET_K) || defined(WOLFSSL_ECDSA_SET_K_ONE_LOOP)
 #ifndef WOLFSSL_NO_MALLOC
     if (key->sign_k != NULL)
 #endif
     {
         mp_forcezero(key->sign_k);
         mp_free(key->sign_k);
 #ifndef WOLFSSL_NO_MALLOC
         XFREE(key->sign_k, key->heap, DYNAMIC_TYPE_ECC);
 #endif
     }
 #endif
 
 #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_ECC)
     #ifdef WC_ASYNC_ENABLE_ECC
     wolfAsync_DevCtxFree(&key->asyncDev, WOLFSSL_ASYNC_MARKER_ECC);
     #endif
     wc_ecc_free_async(key);
 #endif
 
 #if defined(WOLFSSL_QNX_CAAM) || defined(WOLFSSL_IMXRT1170_CAAM)
     /* free secure memory */
     if ((key->blackKey != CAAM_BLACK_KEY_CCM &&
          key->blackKey != CAAM_BLACK_KEY_ECB) && key->blackKey > 0) {
        caamFreePart(key->partNum);
     }
 #endif
 
 #ifdef WOLFSSL_SE050
     se050_ecc_free_key(key);
 #endif
 
 #if defined(WOLFSSL_ATECC508A) || defined(WOLFSSL_ATECC608A)
     atmel_ecc_free(key->slot);
     key->slot = ATECC_INVALID_SLOT;
 #endif /* WOLFSSL_ATECC508A */
 
 #ifdef WOLFSSL_KCAPI_ECC
     KcapiEcc_Free(key);
 #endif
 
 #if defined(WOLFSSL_XILINX_CRYPT_VERSAL)
     key->privKey = NULL;
     ForceZero(key->keyRaw, sizeof(key->keyRaw));
     ForceZero(&key->xSec, sizeof(key->xSec));
 #endif
 
 #ifdef WOLFSSL_MAXQ10XX_CRYPTO
     wc_MAXQ10XX_EccFree(key);
 #endif
 
     mp_clear(key->pubkey.x);
     mp_clear(key->pubkey.y);
     mp_clear(key->pubkey.z);
 
-    mp_forcezero(key->k);
+#ifdef ALT_ECC_SIZE
+    if (key->k)
+#endif
+        mp_forcezero(key->k);
 
 #ifdef WOLFSSL_CUSTOM_CURVES
     if (key->deallocSet && key->dp != NULL)
         wc_ecc_free_curve(key->dp, key->heap);
 #endif
 
 #ifdef WOLFSSL_CHECK_MEM_ZERO
     wc_MemZero_Check(key, sizeof(ecc_key));
 #endif
 
     return 0;
 }
 
 #if !defined(WOLFSSL_ATECC508A) && !defined(WOLFSSL_ATECC608A) && \
     !defined(WOLFSSL_CRYPTOCELL) && !defined(WOLFSSL_SP_MATH) && \
     !defined(WOLF_CRYPTO_CB_ONLY_ECC)
 /* Handles add failure cases:
  *
  * Before add:
  *   Case 1: A is infinity
  *        -> Copy B into result.
  *   Case 2: B is infinity
  *        -> Copy A into result.
  *   Case 3: x and z are the same in A and B (same x value in affine)
  *     Case 3a: y values the same - same point
  *           -> Double instead of add.
  *     Case 3b: y values different - negative of the other when points on curve
  *           -> Need to set result to infinity.
  *
  * After add:
  *   Case 1: A and B are the same point (maybe different z)
  *           (Result was: x == y == z == 0)
  *        -> Need to double instead.
  *
  *   Case 2: A + B = <infinity> = 0.
  *           (Result was: z == 0, x and/or y not 0)
  *        -> Need to set result to infinity.
  */
diff --git a/wolfcrypt/src/tfm.c b/wolfcrypt/src/tfm.c
index 4c1fa9aac..b4a224a05 100644
--- a/wolfcrypt/src/tfm.c
+++ b/wolfcrypt/src/tfm.c
@@ -4398,17 +4398,20 @@ void fp_clear(fp_int *a)
 
 void fp_forcezero (mp_int * a)
 {
+    if (a == NULL)
+      return;
+
     int size;
     a->used = 0;
     a->sign = FP_ZPOS;
 #if defined(ALT_ECC_SIZE) || defined(HAVE_WOLF_BIGINT)
     size = a->size;
 #else
     size = FP_SIZE;
 #endif
     ForceZero(a->dp, size * sizeof(fp_digit));
 #ifdef HAVE_WOLF_BIGINT
     wc_bigint_zero(&a->raw);
 #endif
     fp_free(a);
 }
