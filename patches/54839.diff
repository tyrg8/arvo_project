commit 84d938b1d28d514eead8fdc21e7eec4fdfe053f5
Author: Reini Urban <rurban@cpan.org>
Date:   Wed Nov 23 08:07:53 2022 +0100

    decode_r11: failing dwg_get_first_object TABLE_CONTROL
    
    Fixed GH #524.

diff --git a/src/decode_r11.c b/src/decode_r11.c
index 7db9052c..6d14edc7 100644
--- a/src/decode_r11.c
+++ b/src/decode_r11.c
@@ -226,393 +226,393 @@ static int
 decode_preR13_section (Dwg_Section_Type_r11 id, Bit_Chain *restrict dat,
                        Dwg_Data *restrict dwg)
 {
   Dwg_Section *tbl = &dwg->header.section[id];
   Bit_Chain *hdl_dat = dat;
   int i;
   BITCODE_BL vcount;
   int error = 0;
   long unsigned int num = dwg->num_objects;
   long unsigned int pos = tbl->address;
   BITCODE_RC flag;
   BITCODE_TF name;
 
   LOG_TRACE ("contents table %-8s [%2d]: size:%-4u num:%-3ld (0x%lx-0x%lx)\n",
              tbl->name, id, tbl->size, (long)tbl->number, (unsigned long)tbl->address,
              (unsigned long)(tbl->address + ((unsigned long long)tbl->number * tbl->size)))
   dat->byte = tbl->address;
   dat->bit = 0;
   if ((unsigned long)(tbl->number * tbl->size) > dat->size - dat->byte)
     {
       LOG_ERROR ("Overlarge table num_entries %ld or size %ld for %-8s [%2d]",
                  (long)tbl->number, (long)tbl->size, tbl->name, id);
       return DWG_ERR_INVALIDDWG;
     }
   tbl->objid_r11 = num;
   if (dwg->num_alloced_objects < dwg->num_objects + tbl->number)
     {
       dwg->num_alloced_objects = dwg->num_objects + tbl->number;
       dwg->object = (Dwg_Object*)realloc (dwg->object,
           dwg->num_alloced_objects * sizeof (Dwg_Object));
       dwg->dirty_refs = 1;
     }
 
   // TODO: use the dwg.spec instead
   // MAYBE: move to a spec dwg_r11.spec, and dwg_decode_r11_NAME
 #define PREP_TABLE(token)                                                     \
   Dwg_Object *obj;                                                            \
   Dwg_Object_##token *_obj;                                                   \
   Dwg_Object *ctrl = dwg_get_first_object (dwg, DWG_TYPE_##token##_CONTROL);  \
   Dwg_Object_##token##_CONTROL *_ctrl                                         \
-      = ctrl->tio.object->tio.token##_CONTROL;                                \
-  if (dat->byte > dat->size || (num + i) > dwg->num_objects)                  \
+    = ctrl ? ctrl->tio.object->tio.token##_CONTROL : NULL;                    \
+  if (!ctrl || dat->byte > dat->size || (num + i) > dwg->num_objects)         \
     return DWG_ERR_INVALIDDWG;                                                \
   flag = bit_read_RC (dat);                                                   \
   name = bit_read_TF (dat, 32);                                               \
   _obj = dwg_add_##token (dwg, (const char *)name);                           \
   obj = dwg_obj_generic_to_object (_obj, &error);                             \
   _ctrl->entries[i] = dwg_add_handleref (dwg, 2, obj->handle.value, obj);     \
   obj->size = tbl->size;                                                      \
   obj->address = pos;                                                         \
   _obj->flag = flag;                                                          \
   LOG_TRACE ("\n-- table entry " #token " [%d]: 0x%lx\n", i, pos);            \
   LOG_TRACE ("flag: %u [RC 70]\n", flag);                                     \
   LOG_TRACE ("name: \"%s\" [TF 32 2]\n", name);                               \
   free (name)
 
 #define CHK_ENDPOS                                                            \
   SINCE (R_11) {                                                              \
     BITCODE_RS crc16 = bit_read_RS (dat);                                     \
     LOG_TRACE ("crc16: %04X\n", crc16);                                       \
   }                                                                           \
   pos = tbl->address + (long)((i + 1) * tbl->size);                           \
   if (pos != dat->byte)                                                       \
     {                                                                         \
       LOG_ERROR ("offset %ld", pos - dat->byte);                              \
       /*return DWG_ERR_SECTIONNOTFOUND;*/                                     \
     }                                                                         \
   dat->byte = pos
 
   switch (id)
     {
     case SECTION_BLOCK:
       for (i = 0; i < tbl->number; i++)
         {
             Dwg_Object *obj;
             Dwg_Object_BLOCK_HEADER *_obj;
             Dwg_Object *ctrl;
             Dwg_Object_BLOCK_CONTROL *_ctrl;
             if (dat->byte > dat->size || (num + i) > dwg->num_objects)
               return DWG_ERR_INVALIDDWG;
             flag = bit_read_RC (dat);
             name = bit_read_TF (dat, 32);
             _obj = dwg_add_BLOCK_HEADER (dwg, (const char *)name);
             _obj->flag = flag;
             LOG_TRACE ("\n-- table entry BLOCK_HEADER [%d]: 0x%lx\n", i, pos);
             LOG_TRACE ("flag: %u [RC 70]\n", flag);
             LOG_TRACE ("name: \"%s\" [TF 32 2]\n", name);
             free (name);
             obj = dwg_obj_generic_to_object (_obj, &error);
             if (obj)
               {
                 obj->size = tbl->size;
                 obj->address = pos;
               }
             ctrl = dwg_get_first_object (dwg, DWG_TYPE_BLOCK_CONTROL);
             if (ctrl)
               {
                 _ctrl = ctrl->tio.object->tio.BLOCK_CONTROL;
                 _ctrl->entries[i]
                     = dwg_add_handleref (dwg, 2, obj->handle.value, obj);
               }
 
             // TODO move to => dwg.spec
             FIELD_RC (block_scaling, 0);
             PRE (R_11) {
               FIELD_CAST (num_owned, RS, BL, 0);
               FIELD_RC (flag2, 0);
               if (dwg->header.numheader_vars == 74)
                   FIELD_CAST (unknown_r11, RC, RS, 0);
             }
             SINCE (R_11) { // r10 not
               FIELD_RS (unknown_r11, 0);
               FIELD_HANDLE (block_entity, 2, 0); // index?
               FIELD_RC (flag2, 0);
               FIELD_RSd (used, 0);
               FIELD_RSd (unknown1_r11, 0);
             }
             CHK_ENDPOS;
           }
       break;
 
     case SECTION_LAYER:
         for (i = 0; i < tbl->number; i++)
           {
             Bit_Chain *str_dat = dat;
             PREP_TABLE (LAYER);
             FIELD_CMC (color, 62); // off if negative
             PRE (R_11) {
               FIELD_HANDLE (ltype, 2, 6);
               if (dwg->header.numheader_vars == 74)
                 FIELD_RC (flag0, 0);
             }
             LATER_VERSIONS {
               FIELD_RS (linewt, 370);
               FIELD_HANDLE (ltype, 2, 6);
             }
             CHK_ENDPOS;
           }
       break;
 
     // was a text STYLE table, became a STYLE object
     case SECTION_STYLE:
         for (i = 0; i < tbl->number; i++)
           {
             PREP_TABLE (STYLE);
             FIELD_RD (text_size, 40); // ok
             FIELD_RD (width_factor, 41);
             FIELD_RD (oblique_angle, 50);
             FIELD_RC (generation, 71);
             FIELD_RD (last_height, 42);
             SINCE (R_11)
               FIELD_RS (unknown, 0);
             FIELD_TFv (font_file, 64, 3)    // 8ed
             SINCE (R_11)
               FIELD_TFv (bigfont_file, 64, 4); // 92d
             CHK_ENDPOS;
           }
       break;
 
     case SECTION_LTYPE:
       {
         for (i = 0; i < tbl->number; i++)
           {
             Bit_Chain abs_dat = *dat;
             bit_reset_chain (dat);
             {
               PREP_TABLE (LTYPE);
               if (dwg->header.version == R_11)
                 FIELD_RSd (used, 0); // -1
               FIELD_TFv (description, 48, 3);
               FIELD_RC (alignment, 72);
               FIELD_RCu (num_dashes, 73); //
               FIELD_RD (pattern_len, 40);
 #ifndef IS_JSON
               FIELD_RD (dashes_r11[0], 49);
               FIELD_RD (dashes_r11[1], 49);
               FIELD_RD (dashes_r11[2], 49);
               FIELD_RD (dashes_r11[3], 49);
               FIELD_RD (dashes_r11[4], 49);
               FIELD_RD (dashes_r11[5], 49);
               FIELD_RD (dashes_r11[6], 49);
               FIELD_RD (dashes_r11[7], 49);
               FIELD_RD (dashes_r11[8], 49);
               FIELD_RD (dashes_r11[9], 49);
               FIELD_RD (dashes_r11[10], 49);
               FIELD_RD (dashes_r11[11], 49);
 #else
               FIELD_VECTOR_N (dashes_r11, RD, 12, 49);
 #endif
               if (dwg->header.version < R_11 && tbl->size > 187)
                 FIELD_RC (unknown_r11, 0);
             }
             pos = dat->byte;
             *dat = abs_dat;
             dat->byte += pos;
             CHK_ENDPOS;
           }
       }
       break;
 
     case SECTION_VIEW:
       {
         for (i = 0; i < tbl->number; i++)
           {
             PREP_TABLE (VIEW);
             FIELD_RD (VIEWSIZE, 40);
             FIELD_2RD (VIEWCTR, 10);
             if (tbl->size > 58)
               FIELD_RD (view_width, 41);
             if (tbl->size > 66)
               FIELD_3RD (VIEWDIR, 11);
             if (tbl->size > 89)
               FIELD_RS (flag_3d, 0);
             PRE (R_10) {
               if (dwg->header.numheader_vars == 74)
                 FIELD_RC (unknown_r2, 0);
             }
             SINCE (R_10) {
               FIELD_3RD (view_target, 12);
               FIELD_CAST (VIEWMODE, RS, 4BITS, 71);
               FIELD_RD (lens_length, 42);
               FIELD_RD (front_clip_z, 43);
               FIELD_RD (back_clip_z, 44);
               FIELD_RD (twist_angle, 50);
             }
             CHK_ENDPOS;
           }
       }
       break;
 
     // SINCE R_11
     case SECTION_UCS:
       {
         for (i = 0; i < tbl->number; i++)
           {
             //PREP_TABLE (UCS);
             Dwg_Object *obj;
             Dwg_Object_UCS *_obj;
             dwg_point_3d ucsorg, ucsxdir, ucsydir;
             Dwg_Object *ctrl
                 = dwg_get_first_object (dwg, DWG_TYPE_UCS_CONTROL);
             Dwg_Object_UCS_CONTROL *_ctrl
-                = ctrl->tio.object->tio.UCS_CONTROL;
-            if (dat->byte > dat->size || (num + i) > dwg->num_objects)
+                = ctrl ? ctrl->tio.object->tio.UCS_CONTROL : NULL;
+            if (!ctrl || dat->byte > dat->size || (num + i) > dwg->num_objects)
               return DWG_ERR_INVALIDDWG;
             flag = bit_read_RC (dat);
             name = bit_read_TF (dat, 32);
             ucsorg.x = bit_read_RD (dat);
             ucsorg.y = bit_read_RD (dat);
             ucsxdir.x = bit_read_RD (dat);
             ucsxdir.y = bit_read_RD (dat);
             ucsydir.x = bit_read_RD (dat);
             ucsydir.y = bit_read_RD (dat);
             _obj = dwg_add_UCS (dwg, &ucsorg, &ucsxdir, &ucsydir, (const char *)name);
             obj = dwg_obj_generic_to_object (_obj, &error);
             _ctrl->entries[i]
                 = dwg_add_handleref (dwg, 2, obj->handle.value, obj);
             obj->size = tbl->size;
             obj->address = pos;
             _obj->flag = flag;
             LOG_TRACE ("\n-- table entry UCS [%d]: 0x%lx\n", i, pos);
             LOG_TRACE ("flag: %u [RC 70]\n", flag);
             LOG_TRACE ("name: \"%s\" [TF 32 2]\n", name);
             free (name);
 
             CHK_ENDPOS;
           }
         break;
 
       // SINCE R_11
       case SECTION_VPORT:
         {
           for (i = 0; i < tbl->number; i++)
             {
               PREP_TABLE (VPORT);
               FIELD_RD (VIEWSIZE, 40);
               FIELD_RD (aspect_ratio, 41);
               FIELD_2RD (VIEWCTR, 12);
               FIELD_3RD (view_target, 17);
               FIELD_3RD (VIEWDIR, 16);
               FIELD_RD (view_twist, 50);
               FIELD_RD (lens_length, 42);
               FIELD_RD (front_clip_z, 43);
               FIELD_RD (back_clip_z, 33);
               FIELD_CAST (VIEWMODE, RS, 4BITS, 71);
 
               FIELD_2RD (lower_left, 10);
               FIELD_2RD (upper_right, 11);
               FIELD_RC (UCSFOLLOW, 71);
               FIELD_RS (circle_zoom, 72);
               FIELD_RC (FASTZOOM, 73);
               FIELD_RC (UCSICON, 74);
               FIELD_RC (GRIDMODE, 76);
               FIELD_2RD (GRIDUNIT, 15);
               FIELD_CAST (SNAPMODE, RS, B, 70); // 75
               FIELD_RC (SNAPSTYLE, 70);         // 77
               FIELD_RS (SNAPISOPAIR, 78);
               FIELD_RD (SNAPANG, 50);
               FIELD_2RD (SNAPBASE, 13);
               FIELD_2RD (SNAPUNIT, 14);
               // ... 74 byte
 
               CHK_ENDPOS;
             }
         }
         break;
 
       // SINCE R_11
       case SECTION_APPID:
         {
           for (i = 0; i < tbl->number; i++)
             {
               PREP_TABLE (APPID);
               CHK_ENDPOS;
             }
         }
         break;
 
       // SINCE R_11
       case SECTION_DIMSTYLE:
         {
           for (i = 0; i < tbl->number; i++)
             {
               // unsigned long off;
               PREP_TABLE (DIMSTYLE); // d1f
               FIELD_RD (DIMSCALE, 40); // d42
               FIELD_RD (DIMASZ, 41);
               FIELD_RD (DIMEXO, 42);
               FIELD_RD (DIMDLI, 43);
               FIELD_RD (DIMEXE, 44);
               FIELD_RD (DIMRND, 45);
               FIELD_RD (DIMDLE, 46);
               FIELD_RD (DIMTP, 47);
               FIELD_RD (DIMTM, 48); // ok
               FIELD_RD (DIMTXT, 140);
               FIELD_RD (DIMCEN, 141); // ok
               FIELD_RD (DIMTSZ, 142);
               FIELD_RD (DIMALTF, 143);
               FIELD_RD (DIMLFAC, 144);
               FIELD_RD (DIMTVP, 145); // db2
               FIELD_RC (DIMTOL, 71);  // dba
               FIELD_RC (DIMLIM, 72);  // dbb
               FIELD_RC (DIMTIH, 73);
               FIELD_RC (DIMTOH, 74);
               FIELD_RC (DIMSE1, 75);
               FIELD_RC (DIMSE2, 76);
               FIELD_CAST (DIMTAD, RC, RS, 77); // ok
               FIELD_CAST (DIMZIN, RC, BS, 78); // dc1
               FIELD_RC (DIMALT, 170);
               FIELD_CAST (DIMALTD, RC, BS, 171); // ok
               FIELD_RC (DIMTOFL, 172);           // ok
               FIELD_RC (DIMSAH, 173);            // ok
               FIELD_RC (DIMTIX, 174);            // ok
               FIELD_RC (DIMSOXD, 175);           // ok
               FIELD_TFv (DIMPOST, 16, 3);        // ok dc8
               FIELD_TFv (DIMAPOST, 16, 4);       // dd8
               FIELD_TFv (DIMBLK_T, 16, 5);       //?? unsupported by ODA
               FIELD_TFv (DIMBLK1_T, 16, 6);      //?? unsupported by ODA
               FIELD_TFv (DIMBLK2_T, 66, 7);      //?? unsupported by ODA
               // DEBUG_HERE; //e18
               // dat->byte += 50; //unknown: DIMSHO, DIMASO (global)
               FIELD_RS (DIMCLRD_N, 176); // e4a
               FIELD_RS (DIMCLRE_N, 177);
               FIELD_RS (DIMCLRT_N, 178); // e4e
               FIELD_RC (DIMUPT, 0);      //??
               FIELD_RD (DIMTFAC, 146);   // e51
               FIELD_RD (DIMGAP, 147);    // e59
               CHK_ENDPOS;                //-e63
             }
         }
         break;
 
       // SINCE R_11
       case SECTION_VX:
         {
           if (tbl->number)
             {
               LOG_WARN ("VX table ignored");
               tbl->number = 0;
             }
         }
         break;
 
       case SECTION_HEADER_R11:
       default:
         LOG_ERROR ("Invalid table id %d", id);
         tbl->number = 0;
         break;
       }
       dat->byte = tbl->address + (tbl->number * tbl->size);
     }
   return error;
 }
