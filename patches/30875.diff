commit 4b1c89ab381861e87a2fa43809438f040782f475
Author: Sean Parkinson <sean@wolfssl.com>
Date:   Mon Feb 15 09:04:43 2021 +1000

    DH SP math: return key size error with DH Agree
    
    SP math requires SP to support DH operations.
    When SP doesn't support bit size, WC_KEY_SIZE_E must be returned.

diff --git a/wolfcrypt/src/dh.c b/wolfcrypt/src/dh.c
index 0c9f18275..ebfb8683e 100644
--- a/wolfcrypt/src/dh.c
+++ b/wolfcrypt/src/dh.c
@@ -1851,164 +1851,166 @@ int wc_DhGenerateKeyPair(DhKey* key, WC_RNG* rng,
 static int wc_DhAgree_Sync(DhKey* key, byte* agree, word32* agreeSz,
     const byte* priv, word32 privSz, const byte* otherPub, word32 pubSz)
 {
     int ret = 0;
 #ifdef WOLFSSL_SMALL_STACK
     mp_int* y = NULL;
 #if !defined(WOLFSSL_SP_MATH)
     mp_int* x = NULL;
     mp_int* z = NULL;
 #endif
 #else
     mp_int y[1];
 #if !defined(WOLFSSL_SP_MATH)
     mp_int x[1];
     mp_int z[1];
 #endif
 #endif
 
 #ifdef WOLFSSL_VALIDATE_FFC_IMPORT
     if (wc_DhCheckPrivKey(key, priv, privSz) != 0) {
         WOLFSSL_MSG("wc_DhAgree wc_DhCheckPrivKey failed");
         return DH_CHECK_PRIV_E;
     }
 
     if (wc_DhCheckPubKey(key, otherPub, pubSz) != 0) {
         WOLFSSL_MSG("wc_DhAgree wc_DhCheckPubKey failed");
         return DH_CHECK_PUB_E;
     }
 #endif
 
 #ifdef WOLFSSL_SMALL_STACK
     y = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
     if (y == NULL)
         return MEMORY_E;
 #if !defined(WOLFSSL_SP_MATH)
     x = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
     if (x == NULL) {
         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
         return MEMORY_E;
     }
     z = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
     if (z == NULL) {
         XFREE(x, key->heap, DYNAMIC_TYPE_DH);
         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
         return MEMORY_E;
     }
 #endif
 #endif
 
 #ifdef WOLFSSL_HAVE_SP_DH
 #ifndef WOLFSSL_SP_NO_2048
     if (mp_count_bits(&key->p) == 2048) {
         if (mp_init(y) != MP_OKAY)
             return MP_INIT_E;
 
         if (ret == 0 && mp_read_unsigned_bin(y, otherPub, pubSz) != MP_OKAY)
             ret = MP_READ_E;
 
         if (ret == 0)
             ret = sp_DhExp_2048(y, priv, privSz, &key->p, agree, agreeSz);
 
         mp_clear(y);
     #ifdef WOLFSSL_SMALL_STACK
     #if !defined(WOLFSSL_SP_MATH)
         XFREE(z, key->heap, DYNAMIC_TYPE_DH);
         XFREE(x, key->heap, DYNAMIC_TYPE_DH);
     #endif
         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
     #endif
         return ret;
     }
 #endif
 #ifndef WOLFSSL_SP_NO_3072
     if (mp_count_bits(&key->p) == 3072) {
         if (mp_init(y) != MP_OKAY)
             return MP_INIT_E;
 
         if (ret == 0 && mp_read_unsigned_bin(y, otherPub, pubSz) != MP_OKAY)
             ret = MP_READ_E;
 
         if (ret == 0)
             ret = sp_DhExp_3072(y, priv, privSz, &key->p, agree, agreeSz);
 
         mp_clear(y);
     #ifdef WOLFSSL_SMALL_STACK
     #if !defined(WOLFSSL_SP_MATH)
         XFREE(z, key->heap, DYNAMIC_TYPE_DH);
         XFREE(x, key->heap, DYNAMIC_TYPE_DH);
     #endif
         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
     #endif
         return ret;
     }
 #endif
 #ifdef WOLFSSL_SP_4096
     if (mp_count_bits(&key->p) == 4096) {
         if (mp_init(y) != MP_OKAY)
             return MP_INIT_E;
 
         if (ret == 0 && mp_read_unsigned_bin(y, otherPub, pubSz) != MP_OKAY)
             ret = MP_READ_E;
 
         if (ret == 0)
             ret = sp_DhExp_4096(y, priv, privSz, &key->p, agree, agreeSz);
 
         mp_clear(y);
     #ifdef WOLFSSL_SMALL_STACK
     #if !defined(WOLFSSL_SP_MATH)
         XFREE(z, key->heap, DYNAMIC_TYPE_DH);
         XFREE(x, key->heap, DYNAMIC_TYPE_DH);
     #endif
         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
     #endif
         return ret;
     }
 #endif
 #endif
 
 #if !defined(WOLFSSL_SP_MATH)
     if (mp_init_multi(x, y, z, 0, 0, 0) != MP_OKAY) {
     #ifdef WOLFSSL_SMALL_STACK
         XFREE(z, key->heap, DYNAMIC_TYPE_DH);
         XFREE(x, key->heap, DYNAMIC_TYPE_DH);
         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
     #endif
         return MP_INIT_E;
     }
 
     if (mp_read_unsigned_bin(x, priv, privSz) != MP_OKAY)
         ret = MP_READ_E;
 
     if (ret == 0 && mp_read_unsigned_bin(y, otherPub, pubSz) != MP_OKAY)
         ret = MP_READ_E;
 
     if (ret == 0 && mp_exptmod(y, x, &key->p, z) != MP_OKAY)
         ret = MP_EXPTMOD_E;
 
     /* make sure z is not one (SP800-56A, 5.7.1.1) */
     if (ret == 0 && (mp_cmp_d(z, 1) == MP_EQ))
         ret = MP_VAL;
 
     if (ret == 0 && mp_to_unsigned_bin(z, agree) != MP_OKAY)
         ret = MP_TO_E;
 
     if (ret == 0)
         *agreeSz = mp_unsigned_bin_size(z);
 
     mp_clear(z);
     mp_clear(y);
     mp_forcezero(x);
+#else
+    ret = WC_KEY_SIZE_E;
 #endif
 
 #ifdef WOLFSSL_SMALL_STACK
 #if !defined(WOLFSSL_SP_MATH)
     XFREE(z, key->heap, DYNAMIC_TYPE_DH);
     XFREE(x, key->heap, DYNAMIC_TYPE_DH);
 #endif
     XFREE(y, key->heap, DYNAMIC_TYPE_DH);
 #endif
 
     return ret;
 }
 
 #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_DH)
