commit 6a3ac623b960905b3450b78e7614453dae0540ed
Author: Alex Rebert <alexandre.rebert@gmail.com>
Date:   Thu Oct 28 23:13:29 2021 -0400

    Fix out-of-bounds reads in OpenDDLParser
    
    Fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=31795
    Fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=24463
    Fix https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=36594

diff --git a/contrib/openddlparser/code/OpenDDLParser.cpp b/contrib/openddlparser/code/OpenDDLParser.cpp
index 0c9e0bd98..e2bef97a7 100644
--- a/contrib/openddlparser/code/OpenDDLParser.cpp
+++ b/contrib/openddlparser/code/OpenDDLParser.cpp
@@ -262,66 +262,71 @@ static void dumpId(Identifier *id) {
 char *OpenDDLParser::parseHeader(char *in, char *end) {
     if (nullptr == in || in == end) {
         return in;
     }
 
     Text *id(nullptr);
     in = OpenDDLParser::parseIdentifier(in, end, &id);
 
 #ifdef DEBUG_HEADER_NAME
     dumpId(id);
 #endif // DEBUG_HEADER_NAME
 
     in = lookForNextToken(in, end);
     if (nullptr != id) {
         // store the node
         DDLNode *node(createDDLNode(id, this));
         if (nullptr != node) {
             pushNode(node);
         } else {
             std::cerr << "nullptr returned by creating DDLNode." << std::endl;
         }
         delete id;
 
         Name *name(nullptr);
         in = OpenDDLParser::parseName(in, end, &name);
         if (nullptr != name && nullptr != node && nullptr != name->m_id->m_buffer) {
             const std::string nodeName(name->m_id->m_buffer);
             node->setName(nodeName);
             delete name;
         }
 
         Property *first(nullptr);
         in = lookForNextToken(in, end);
-        if (*in == Grammar::OpenPropertyToken[0]) {
+        if (in != end && *in == Grammar::OpenPropertyToken[0]) {
             in++;
             Property *prop(nullptr), *prev(nullptr);
-            while (*in != Grammar::ClosePropertyToken[0] && in != end) {
+            while (in != end && *in != Grammar::ClosePropertyToken[0]) {
                 in = OpenDDLParser::parseProperty(in, end, &prop);
                 in = lookForNextToken(in, end);
+                if(in == end) {
+                    break;
+                }
 
                 if (*in != Grammar::CommaSeparator[0] && *in != Grammar::ClosePropertyToken[0]) {
                     logInvalidTokenError(in, Grammar::ClosePropertyToken, m_logCallback);
                     return nullptr;
                 }
 
                 if (nullptr != prop && *in != Grammar::CommaSeparator[0]) {
                     if (nullptr == first) {
                         first = prop;
                     }
                     if (nullptr != prev) {
                         prev->m_next = prop;
                     }
                     prev = prop;
                 }
             }
-            ++in;
+            if(in != end) {
+                ++in;
+            }
         }
 
         // set the properties
         if (nullptr != first && nullptr != node) {
             node->setProperties(first);
         }
     }
 
     return in;
 }
@@ -469,31 +474,31 @@ Context *OpenDDLParser::getContext() const {
 void OpenDDLParser::normalizeBuffer(std::vector<char> &buffer) {
     if (buffer.empty()) {
         return;
     }
 
     std::vector<char> newBuffer;
     const size_t len(buffer.size());
     char *end(&buffer[len - 1] + 1);
     for (size_t readIdx = 0; readIdx < len; ++readIdx) {
         char *c(&buffer[readIdx]);
         // check for a comment
         if (isCommentOpenTag(c, end)) {
             ++readIdx;
-            while (!isCommentCloseTag(&buffer[readIdx], end)) {
+            while (readIdx < len && !isCommentCloseTag(&buffer[readIdx], end)) {
                 ++readIdx;
             }
             ++readIdx;
         } else if (!isComment<char>(c, end) && !isNewLine(*c)) {
             newBuffer.push_back(buffer[readIdx]);
         } else {
             if (isComment<char>(c, end)) {
                 ++readIdx;
                 // skip the comment and the rest of the line
-                while (!isEndofLine(buffer[readIdx])) {
+                while (readIdx < len && !isEndofLine(buffer[readIdx])) {
                     ++readIdx;
                 }
             }
         }
     }
     buffer = newBuffer;
 }
@@ -531,34 +536,33 @@ char *OpenDDLParser::parseName(char *in, char *end, Name **name) {
 char *OpenDDLParser::parseIdentifier(char *in, char *end, Text **id) {
     *id = nullptr;
     if (nullptr == in || in == end) {
         return in;
     }
 
     // ignore blanks
     in = lookForNextToken(in, end);
     if (in == end) {
         return in;
     }
 
     // staring with a number is forbidden
     if (isNumeric<const char>(*in)) {
         return in;
     }
 
     // get size of id
     size_t idLen(0);
     char *start(in);
-    while (!isSeparator(*in) &&
-            !isNewLine(*in) && (in != end) &&
+    while ((in != end) && !isSeparator(*in) && !isNewLine(*in) &&
             *in != Grammar::OpenPropertyToken[0] &&
             *in != Grammar::ClosePropertyToken[0] &&
             *in != '$') {
         ++in;
         ++idLen;
     }
 
     const size_t len(idLen);
     *id = new Text(start, len);
 
     return in;
 }
@@ -853,40 +857,40 @@ char *OpenDDLParser::parseHexaLiteral(char *in, char *end, Value **data) {
 char *OpenDDLParser::parseProperty(char *in, char *end, Property **prop) {
     *prop = nullptr;
     if (nullptr == in || in == end) {
         return in;
     }
 
     in = lookForNextToken(in, end);
     Text *id = nullptr;
     in = parseIdentifier(in, end, &id);
     if (nullptr != id) {
         in = lookForNextToken(in, end);
-        if (*in == '=') {
+        if (in != end && *in == '=') {
             ++in;
             in = getNextToken(in, end);
             Value *primData(nullptr);
             if (isInteger(in, end)) {
                 in = parseIntegerLiteral(in, end, &primData);
                 createPropertyWithData(id, primData, prop);
             } else if (isFloat(in, end)) {
                 in = parseFloatingLiteral(in, end, &primData);
                 createPropertyWithData(id, primData, prop);
             } else if (isStringLiteral(*in)) { // string data
                 in = parseStringLiteral(in, end, &primData);
                 createPropertyWithData(id, primData, prop);
             } else { // reference data
                 std::vector<Name *> names;
                 in = parseReference(in, end, names);
                 if (!names.empty()) {
                     Reference *ref = new Reference(names.size(), &names[0]);
                     (*prop) = new Property(id);
                     (*prop)->m_ref = ref;
                 }
             }
         } else {
             delete id;
         }
     }
 
     return in;
 }
diff --git a/contrib/openddlparser/include/openddlparser/OpenDDLParserUtils.h b/contrib/openddlparser/include/openddlparser/OpenDDLParserUtils.h
index 5f177f252..42ad675f8 100644
--- a/contrib/openddlparser/include/openddlparser/OpenDDLParserUtils.h
+++ b/contrib/openddlparser/include/openddlparser/OpenDDLParserUtils.h
@@ -318,7 +318,8 @@ static const unsigned char chartype_table[256] = {
 
 template <class T>
 inline bool isNumeric(const T in) {
-    return (chartype_table[static_cast<size_t>(in)] == 1);
+    size_t idx = static_cast<size_t>(in);
+    return idx < sizeof(chartype_table) && (chartype_table[idx] == 1);
 }
 
 template <class T>
