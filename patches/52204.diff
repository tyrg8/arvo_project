commit 2a6f8c67aa15ebf507cc9ff2bd881d771858fed7
Author: Liviu Chircu <liviu@opensips.org>
Date:   Sat Oct 8 19:58:37 2022 +0300

    parse_msg(): Fix heap buffer overflow edge-case (OSS-Fuzz)
    
    This patch fixes a SIP message parsing error log which could lead to an
    unsafe printing of a non-NULL terminated string.  Fortunately, the
    OpenSIPS PKG memory allocator minimizes the severity of this overflow,
    thanks to its pre-allocated, large chunk of heap memory.
    
    Severity: Low
    Fixes OSS-Fuzz#52204

diff --git a/parser/msg_parser.c b/parser/msg_parser.c
index e85a94561..f32f4e928 100644
--- a/parser/msg_parser.c
+++ b/parser/msg_parser.c
@@ -69,198 +69,199 @@ int via_cnt;
 /* returns pointer to next header line, and fill hdr_f ;
  * if at end of header returns pointer to the last crlf  (always buf)*/
 char* get_hdr_field(char* buf, char* end, struct hdr_field* hdr)
 {
 
 	char* tmp;
 	char *match;
 	struct via_body *vb;
 	struct cseq_body* cseq_b;
 	struct to_body* to_b;
 	int integer;
 
 	if ((*buf)=='\n' || (*buf)=='\r'){
 		/* double crlf or lflf or crcr */
 		LM_DBG("found end of header\n");
 		hdr->type=HDR_EOH_T;
 		return buf;
 	}
 
 	tmp=parse_hname(buf, end, hdr);
 	if (hdr->type==HDR_ERROR_T){
 		LM_ERR("bad header\n");
 		goto error_bad_hdr;
 	}
 
 	/* eliminate leading whitespace */
 	tmp=eat_lws_end(tmp, end);
 	if (tmp>=end) {
 		LM_ERR("hf empty\n");
 		goto error_bad_hdr;
 	}
 
 	/* if header-field well-known, parse it, find its end otherwise ;
 	 * after leaving the hdr->type switch, tmp should be set to the
 	 * next header field
 	 */
 	switch(hdr->type){
 		case HDR_VIA_T:
 			/* keep number of vias parsed -- we want to report it in
 			   replies for diagnostic purposes */
 			via_cnt++;
 			vb=pkg_malloc(sizeof(struct via_body));
 			if (vb==0){
 				LM_ERR("out of pkg memory\n");
 				goto error;
 			}
 			memset(vb,0,sizeof(struct via_body));
 			hdr->body.s=tmp;
 			tmp=parse_via(tmp, end, vb);
 			if (vb->error==PARSE_ERROR){
 				LM_ERR("bad via\n");
 				free_via_list(vb);
 				set_err_info(OSER_EC_PARSER, OSER_EL_MEDIUM,
 					"error parsing Via");
 				set_err_reply(400, "bad Via header");
 				goto error;
 			}
 			hdr->parsed=vb;
 			vb->hdr.s=hdr->name.s;
 			vb->hdr.len=hdr->name.len;
 			hdr->body.len=tmp-hdr->body.s;
 			break;
 		case HDR_CSEQ_T:
 			cseq_b=pkg_malloc(sizeof(struct cseq_body));
 			if (cseq_b==0){
 				LM_ERR("out of pkg memory\n");
 				goto error;
 			}
 			memset(cseq_b, 0, sizeof(struct cseq_body));
 			hdr->body.s=tmp;
 			tmp=parse_cseq(tmp, end, cseq_b);
 			if (cseq_b->error==PARSE_ERROR){
 				LM_ERR("bad cseq\n");
 				pkg_free(cseq_b);
 				set_err_info(OSER_EC_PARSER, OSER_EL_MEDIUM,
 					"error parsing CSeq`");
 				set_err_reply(400, "bad CSeq header");
 				goto error;
 			}
 			hdr->parsed=cseq_b;
 			hdr->body.len=tmp-hdr->body.s;
 			LM_DBG("cseq <%.*s>: <%.*s> <%.*s>\n",
 					hdr->name.len, ZSW(hdr->name.s),
 					cseq_b->number.len, ZSW(cseq_b->number.s),
 					cseq_b->method.len, cseq_b->method.s);
 			break;
 		case HDR_TO_T:
 			to_b=pkg_malloc(sizeof(struct to_body));
 			if (to_b==0){
 				LM_ERR("out of pkg memory\n");
 				goto error;
 			}
 			memset(to_b, 0, sizeof(struct to_body));
 			hdr->body.s=tmp;
 			tmp=parse_to(tmp, end,to_b);
 			if (to_b->error==PARSE_ERROR){
 				LM_ERR("bad to header\n");
 				pkg_free(to_b);
 				set_err_info(OSER_EC_PARSER, OSER_EL_MEDIUM,
 					"error parsing To header");
 				set_err_reply(400, "bad header");
 				goto error;
 			}
 			hdr->parsed=to_b;
 			hdr->body.len=tmp-hdr->body.s;
 			LM_DBG("<%.*s> [%d]; uri=[%.*s] \n",
 				hdr->name.len, ZSW(hdr->name.s),
 				hdr->body.len, to_b->uri.len,ZSW(to_b->uri.s));
 			LM_DBG("to body [%.*s]\n",to_b->body.len, ZSW(to_b->body.s));
 			break;
 		case HDR_CONTENTLENGTH_T:
 			hdr->body.s=tmp;
 			tmp=parse_content_length(tmp,end, &integer);
 			if (tmp==0){
 				LM_ERR("bad content_length header\n");
 				set_err_info(OSER_EC_PARSER, OSER_EL_MEDIUM,
 					"error parsing Content-Length");
 				set_err_reply(400, "bad Content-Length header");
 				goto error;
 			}
 			hdr->parsed=(void*)(long)integer;
 			hdr->body.len=tmp-hdr->body.s;
 			LM_DBG("content_length=%d\n", (int)(long)hdr->parsed);
 			break;
 		case HDR_SUPPORTED_T:
 		case HDR_CONTENTTYPE_T:
 		case HDR_FROM_T:
 		case HDR_CALLID_T:
 		case HDR_CONTACT_T:
 		case HDR_ROUTE_T:
 		case HDR_RECORDROUTE_T:
 		case HDR_PATH_T:
 		case HDR_MAXFORWARDS_T:
 		case HDR_AUTHORIZATION_T:
 		case HDR_EXPIRES_T:
 		case HDR_PROXYAUTH_T:
 		case HDR_PROXYREQUIRE_T:
 		case HDR_UNSUPPORTED_T:
 		case HDR_ALLOW_T:
 		case HDR_EVENT_T:
 		case HDR_ACCEPT_T:
 		case HDR_ACCEPTLANGUAGE_T:
 		case HDR_ORGANIZATION_T:
 		case HDR_PRIORITY_T:
 		case HDR_SUBJECT_T:
 		case HDR_USERAGENT_T:
 		case HDR_CONTENTDISPOSITION_T:
 		case HDR_ACCEPTDISPOSITION_T:
 		case HDR_DIVERSION_T:
 		case HDR_RPID_T:
 		case HDR_REFER_TO_T:
 		case HDR_SESSION_EXPIRES_T:
 		case HDR_MIN_SE_T:
 		case HDR_MIN_EXPIRES_T:
 		case HDR_PPI_T:
 		case HDR_PAI_T:
 		case HDR_PRIVACY_T:
 		case HDR_RETRY_AFTER_T:
 		case HDR_CALL_INFO_T:
 		case HDR_WWW_AUTHENTICATE_T:
 		case HDR_PROXY_AUTHENTICATE_T:
 		case HDR_FEATURE_CAPS_T:
 		case HDR_REPLACES_T:
 		case HDR_TO_PATH_T:
 		case HDR_FROM_PATH_T:
 		case HDR_MESSAGE_ID_T:
 		case HDR_BYTE_RANGE_T:
 		case HDR_FAILURE_REPORT_T:
 		case HDR_SUCCESS_REPORT_T:
 		case HDR_STATUS_T:
 		case HDR_USE_PATH_T:
 		case HDR_OTHER_T:
 			/* just skip over it */
 			hdr->body.s=tmp;
 			/* find end of header */
 			/* find lf */
 			do{
 				match=q_memchr(tmp, '\n', end-tmp);
 				if (match){
 					match++;
 				}else {
-					LM_ERR("bad body for <%s>(%d)\n", hdr->name.s, hdr->type);
+					LM_ERR("bad body for <%.*s>(%d)\n",
+					         hdr->name.len, hdr->name.s, hdr->type);
 					tmp=end;
 					goto error_bad_hdr;
 				}
 				tmp=match;
 			}while( match<end &&( (*match==' ')||(*match=='\t') ) );
 			tmp=match;
 			hdr->body.len=match-hdr->body.s;
 			break;
 		default:
 			LM_CRIT("unknown header type %d\n", hdr->type);
 			goto error;
 	}
 	/* jku: if \r covered by current length, shrink it */
 	trim_r( hdr->body );
 	hdr->len=tmp-hdr->name.s;
 	return tmp;
diff --git a/parser/test/test_parser.c b/parser/test/test_parser.c
index 3c3904415..d1dc0549d 100644
--- a/parser/test/test_parser.c
+++ b/parser/test/test_parser.c
@@ -146,18 +146,20 @@ void test_parse_uri(void)
 static const struct tts {
 	const char *tmsg;
 	int tres;
 } tset[] = {
 	{
 		/* test for read overflows on EoH parsing */
 		"e \xff\xff\xff\xff     \xff\n\xff\xff  ",
 		-1,
-	},
-
-	{
+	}, {
 		/* test for read overflows on To header param parsing */
 		"d  \x02\x80\0\nt\0:G;150=\"a8",
 		-1,
+	}, {
+		/* test for read overflows on bad header body (no \n ending) */
+		"m  r\nu:c \x1b\r   : ]",
+		-1,
 	},
 
 	{"\0", 0},
 };
@@ -165,15 +167,15 @@ static const struct tts {
 void test_parse_msg(void)
 {
 	int i;
 
 	for (i = 0; tset[i].tmsg[0]; i++) {
 		struct sip_msg msg;
 
 		memset(&msg, 0, sizeof msg);
 		msg.buf = (char *)tset[i].tmsg;
 		msg.len = strlen(msg.buf);
 
-		ok(parse_msg(msg.buf, msg.len, &msg) == tset[i].tres, "parse-msg-0");
+		ok(parse_msg(msg.buf, msg.len, &msg) == tset[i].tres, "parse-msg-t%d", i);
 	}
 }
 
