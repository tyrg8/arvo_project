commit 97f1b3cc11c5881f7412687d0aaa1b24ee98da2f
Author: Lucas <lmiller@imageworks.com>
Date:   Sat Aug 29 13:05:45 2020 -0700

    Change up the throw message for bad meta data to make it easier to test.
    Fuzzer Issue 25081 correctly throws.
    
    Fuzzer Issues 25166, 25175, 25185, 25204, and 25236 all seem to be different
    variations on an illegal meta data index value coming through.  We more
    carefully check for that now.
    
    Fuzzer Issue 25192 turned up a leak in OrData where the raw pointer allocated
    for the children was not being released because the constructor threw.
    Putting it into a unique_ptr fixes this problem.

diff --git a/lib/Alembic/AbcCoreOgawa/OrData.cpp b/lib/Alembic/AbcCoreOgawa/OrData.cpp
index b2ea761f..48a32666 100644
--- a/lib/Alembic/AbcCoreOgawa/OrData.cpp
+++ b/lib/Alembic/AbcCoreOgawa/OrData.cpp
@@ -47,47 +47,46 @@ namespace ALEMBIC_VERSION_NS {
 //-*****************************************************************************
 OrData::OrData( Ogawa::IGroupPtr iGroup,
                 const std::string & iParentName,
                 std::size_t iThreadId,
                 AbcA::ArchiveReader & iArchive,
                 const std::vector< AbcA::MetaData > & iIndexedMetaData )
-    : m_children( NULL )
 {
     ABCA_ASSERT( iGroup, "Invalid object data group" );
 
     m_group = iGroup;
 
     std::size_t numChildren = m_group->getNumChildren();
 
     if ( numChildren > 0 && m_group->isChildData( numChildren - 1 ) )
     {
         std::vector< ObjectHeaderPtr > headers;
         ReadObjectHeaders( m_group, numChildren - 1, iThreadId,
                            iParentName, iIndexedMetaData, headers );
 
         if ( !headers.empty() )
         {
-            m_children = new Child[ headers.size() ];
+            m_children = Alembic::Util::unique_ptr< Child[] > (
+                new Child[ headers.size() ] );
         }
 
         for ( std::size_t i = 0; i < headers.size(); ++i )
         {
             m_childrenMap[headers[i]->getName()] = i;
             m_children[i].header = headers[i];
         }
     }
 
     if ( numChildren > 0 && m_group->isChildGroup( 0 ) )
     {
         Ogawa::IGroupPtr group = m_group->getGroup( 0, false, iThreadId );
         m_data = Alembic::Util::shared_ptr<CprData>(
             new CprData( group, iThreadId, iArchive, iIndexedMetaData ) );
     }
 }
 
 //-*****************************************************************************
 OrData::~OrData()
 {
-    delete [] m_children;
 }
 
 //-*****************************************************************************
diff --git a/lib/Alembic/AbcCoreOgawa/OrData.h b/lib/Alembic/AbcCoreOgawa/OrData.h
index 1df699b8..e6dc161e 100644
--- a/lib/Alembic/AbcCoreOgawa/OrData.h
+++ b/lib/Alembic/AbcCoreOgawa/OrData.h
@@ -83,22 +83,22 @@ public:
 private:
 
     Ogawa::IGroupPtr m_group;
 
     struct Child
     {
         ObjectHeaderPtr header;
         WeakOrPtr made;
         Alembic::Util::mutex lock;
     };
 
     typedef std::map<std::string, size_t> ChildrenMap;
 
     // The children
-    Child * m_children;
+    Alembic::Util::unique_ptr< Child[] > m_children;
     ChildrenMap m_childrenMap;
 
     // Our "top" property.
     Alembic::Util::weak_ptr< AbcA::CompoundPropertyReader > m_top;
     Alembic::Util::shared_ptr < CprData > m_data;
     Alembic::Util::mutex m_cprlock;
 };
diff --git a/lib/Alembic/AbcCoreOgawa/ReadUtil.cpp b/lib/Alembic/AbcCoreOgawa/ReadUtil.cpp
index c9d0f3ea..b492ac7c 100644
--- a/lib/Alembic/AbcCoreOgawa/ReadUtil.cpp
+++ b/lib/Alembic/AbcCoreOgawa/ReadUtil.cpp
@@ -1632,200 +1632,204 @@ void
 ReadPropertyHeaders( Ogawa::IGroupPtr iGroup,
                      size_t iIndex,
                      size_t iThreadId,
                      AbcA::ArchiveReader & iArchive,
                      const std::vector< AbcA::MetaData > & iMetaDataVec,
                      PropertyHeaderPtrs & oHeaders )
 {
 
     // Our bitmasks look like this:
     //
     // Property Type mask (Scalar, Array, or Compound) 0x0003
     // 0000 0000 0000 0000 0000 0000 0000 0011
     //
     // Our Pod type mask 0x003c
     // 0000 0000 0000 0000 0000 0000 0011 1100
     //
     // Has a time sampling index mask 0x0040
     // 0000 0000 0000 0000 0000 0000 0100 0000
     //
     // no repeats mask 0x0080
     // 0000 0000 0000 0000 0000 0000 1000 0000
     //
     // Extent value mask 0xff00
     // 0000 0000 0000 0000 1111 1111 0000 0000
     //
     // Our bitmasks look like this:
     //
     // Property Type mask (Scalar, Array, or Compound) 0x0003
     // 0000 0000 0000 0000 0000 0000 0000 0011
     //
     // Byte size hint for first/last non repeated sample 0x000c
     // 0000 0000 0000 0000 0000 0000 0000 1100
     //
     // Our Pod type mask 0x00f0
     // 0000 0000 0000 0000 0000 0000 1111 0000
     //
     // Has a time sampling index mask 0x0100
     // 0000 0000 0000 0000 0000 0001 0000 0000
     //
     // Whether the first/last index exists mask 0x200
     // 0000 0000 0000 0000 0000 0010 0000 0000
     //
     // Whether the size of the data changes from sample to sample mask 0x400
     // 0000 0000 0000 0000 0000 0100 0000 0000
     //
     // Mask for whether the data is the same over all samples 0x800
     // 0000 0000 0000 0000 0000 1000 0000 0000
     //
     // Extent value mask 0xff000
     // 0000 0000 0000 1111 1111 0000 0000 0000
     //
     // Meta data index mask 0xff00000
     // 0000 1111 1111 0000 0000 0000 0000 0000
 
     Ogawa::IDataPtr data = iGroup->getData( iIndex, iThreadId );
     ABCA_ASSERT( data, "ReadObjectHeaders Invalid data at index " << iIndex );
 
     if ( data->getSize() == 0 )
     {
         return;
     }
 
     std::vector< char > buf( data->getSize() );
     data->read( data->getSize(), &( buf.front() ), 0, iThreadId );
     std::size_t pos = 0;
     std::size_t bufSize = buf.size();
     while ( pos < bufSize )
     {
         PropertyHeaderPtr header( new PropertyHeaderAndFriends() );
 
         if (pos + 4 > bufSize)
         {
             ABCA_THROW("Read invalid: Property header start.");
         }
 
         // first 4 bytes is always info
         Util::uint32_t info =  *( (Util::uint32_t *)( &buf[pos] ) );
         pos += 4;
 
         Util::uint32_t ptype = info & 0x0003;
         header->isScalarLike = ptype & 1;
         if ( ptype == 0 )
         {
             header->header.setPropertyType( AbcA::kCompoundProperty );
         }
         else if ( ptype == 1 )
         {
             header->header.setPropertyType( AbcA::kScalarProperty );
         }
         else
         {
             header->header.setPropertyType( AbcA::kArrayProperty );
         }
 
         Util::uint32_t sizeHint = ( info & 0x000c ) >> 2;
 
         // if we aren't a compound we may need to do a bunch of other work
         if ( !header->header.isCompound() )
         {
             // Read the pod type out of bits 4-7
             char podt = ( char )( ( info &  0x00f0 ) >> 4 );
             if ( podt != ( char )Alembic::Util::kBooleanPOD &&
                  podt != ( char )Alembic::Util::kUint8POD &&
                  podt != ( char )Alembic::Util::kInt8POD &&
                  podt != ( char )Alembic::Util::kUint16POD &&
                  podt != ( char )Alembic::Util::kInt16POD &&
                  podt != ( char )Alembic::Util::kUint32POD &&
                  podt != ( char )Alembic::Util::kInt32POD &&
                  podt != ( char )Alembic::Util::kUint64POD &&
                  podt != ( char )Alembic::Util::kInt64POD &&
                  podt != ( char )Alembic::Util::kFloat16POD &&
                  podt != ( char )Alembic::Util::kFloat32POD &&
                  podt != ( char )Alembic::Util::kFloat64POD &&
                  podt != ( char )Alembic::Util::kStringPOD &&
                  podt != ( char )Alembic::Util::kWstringPOD )
             {
                 ABCA_THROW(
                     "Read invalid POD type: " << ( Util::int32_t )podt );
             }
 
             Util::uint8_t extent = ( info & 0xff000 ) >> 12;
             header->header.setDataType( AbcA::DataType(
                 ( Util::PlainOldDataType ) podt, extent ) );
 
             header->isHomogenous = ( info & 0x400 ) != 0;
 
             header->nextSampleIndex = GetUint32WithHint( buf, bufSize, sizeHint, pos );
 
             if ( ( info & 0x0200 ) != 0 )
             {
                 header->firstChangedIndex =
                     GetUint32WithHint( buf, bufSize, sizeHint, pos );
 
                 header->lastChangedIndex =
                     GetUint32WithHint( buf, bufSize, sizeHint, pos );
             }
             else if ( ( info & 0x800 ) != 0 )
             {
                 header->firstChangedIndex = 0;
                 header->lastChangedIndex = 0;
             }
             else
             {
                 header->firstChangedIndex = 1;
                 header->lastChangedIndex = header->nextSampleIndex - 1;
             }
 
             if ( ( info & 0x0100 ) != 0 )
             {
                 header->timeSamplingIndex =
                     GetUint32WithHint( buf, bufSize, sizeHint, pos );
 
                 header->header.setTimeSampling(
                     iArchive.getTimeSampling( header->timeSamplingIndex ) );
             }
             else
             {
                 header->header.setTimeSampling( iArchive.getTimeSampling( 0 ) );
             }
         }
 
         Util::uint32_t nameSize = GetUint32WithHint( buf, bufSize, sizeHint, pos );
 
         if (pos + nameSize > bufSize)
         {
             ABCA_THROW("Read invalid: Property Headers name.");
         }
 
         std::string name( &buf[pos], nameSize );
         header->header.setName( name );
         pos += nameSize;
 
         Util::uint32_t metaDataIndex = ( info & 0xff00000 ) >> 20;
 
         if ( metaDataIndex == 0xff )
         {
             Util::uint32_t metaDataSize =
                 GetUint32WithHint( buf, bufSize, sizeHint, pos );
 
             if (pos + metaDataSize > bufSize)
             {
                 ABCA_THROW("Read invalid: Property Header MetaData string.");
             }
 
             std::string metaData( &buf[pos], metaDataSize );
             pos += metaDataSize;
 
             AbcA::MetaData md;
             md.deserialize( metaData );
             header->header.setMetaData( md );
         }
-        else
+        else if (metaDataIndex < iMetaDataVec.size())
         {
             header->header.setMetaData( iMetaDataVec[metaDataIndex] );
         }
+        else
+        {
+            ABCA_THROW("Read invalid: Property Header MetaData index.");
+        }
 
         oHeaders.push_back( header );
 
     }
 }
diff --git a/lib/Alembic/AbcCoreOgawa/Tests/CMakeLists.txt b/lib/Alembic/AbcCoreOgawa/Tests/CMakeLists.txt
index 81d44439..fa7e1f5a 100644
--- a/lib/Alembic/AbcCoreOgawa/Tests/CMakeLists.txt
+++ b/lib/Alembic/AbcCoreOgawa/Tests/CMakeLists.txt
@@ -92,4 +92,9 @@ file(COPY fuzzer_issue24846.abc DESTINATION .)
 file(COPY fuzzer_issue24853.abc DESTINATION .)
 file(COPY fuzzer_issue24598.abc DESTINATION .)
 file(COPY fuzzer_issue25051.abc DESTINATION .)
-file(COPY fuzzer_issue25081.abc DESTINATION .)
\ No newline at end of file
+file(COPY fuzzer_issue25081.abc DESTINATION .)
+file(COPY fuzzer_issue25166.abc DESTINATION .)
+file(COPY fuzzer_issue25175.abc DESTINATION .)
+file(COPY fuzzer_issue25185.abc DESTINATION .)
+file(COPY fuzzer_issue25192.abc DESTINATION .)
+file(COPY fuzzer_issue25236.abc DESTINATION .)
\ No newline at end of file
diff --git a/lib/Alembic/AbcCoreOgawa/Tests/fuzzTest.cpp b/lib/Alembic/AbcCoreOgawa/Tests/fuzzTest.cpp
index 4e324245..7a1c9cdc 100644
--- a/lib/Alembic/AbcCoreOgawa/Tests/fuzzTest.cpp
+++ b/lib/Alembic/AbcCoreOgawa/Tests/fuzzTest.cpp
@@ -118,17 +118,19 @@ void walkObj(ABCA::ObjectReaderPtr parent)
 void testIssue254(bool iUseMMap)
 {
     Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
     ABCA::ArchiveReaderPtr ar = r("issue254.abc");
     try
     {
         walkObj(ar->getTop());
     }
     catch(const std::exception& e)
     {
         std::string msg = "Ogawa IData illegal size.";
         TESTING_ASSERT(msg == e.what());
+        return;
     }
 
+    TESTING_ASSERT(1);
 }
 
 void testIssue255(bool iUseMMap)
@@ -142,60 +144,71 @@ void testIssue255(bool iUseMMap)
 void testIssue256(bool iUseMMap)
 {
     Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
     try
     {
         r("issue256.abc");
     }
     catch(const std::exception& e)
     {
         std::string msg = "Read invalid: TimeSamples sample times.";
         TESTING_ASSERT(msg == e.what());
+        return;
     }
 
+    TESTING_ASSERT(1);
 }
 
 void testIssue257(bool iUseMMap)
 {
     Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
     ABCA::ArchiveReaderPtr ar = r("issue257.abc");
     try
     {
         walkObj(ar->getTop());
     }
     catch(const std::exception& e)
     {
         std::string msg = "Read invalid: Object Headers name and MetaData index.";
         TESTING_ASSERT(msg == e.what());
+        return;
     }
+
+    TESTING_ASSERT(1);
 }
 
 void testIssue258(bool iUseMMap)
 {
     Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
     try
     {
         r("issue258.abc");
     }
     catch(const std::exception& e)
     {
         std::string msg = "Read invalid: Indexed MetaData string.";
         TESTING_ASSERT(msg == e.what());
+        return;
     }
+
+    TESTING_ASSERT(1);
 }
 
 void testIssue269(bool iUseMMap)
 {
     Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
     ABCA::ArchiveReaderPtr ar = r("issue269.abc");
     try
     {
         walkObj(ar->getTop());
     }
     catch(const std::exception& e)
     {
         std::string msg = "ReadData invalid: Null IDataPtr.";
         TESTING_ASSERT(msg == e.what());
+        return;
     }
+
+    TESTING_ASSERT(1);
 }
 
 void testIssue270(bool iUseMMap)
@@ -215,16 +228,19 @@ void testIssue271(bool iUseMMap)
 void testIssue272(bool iUseMMap)
 {
     Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
     ABCA::ArchiveReaderPtr ar = r("issue272.abc");
     try
     {
         walkObj(ar->getTop());
     }
     catch(const std::exception& e)
     {
         std::string msg = "Read invalid: Object Headers MetaData index.";
         TESTING_ASSERT(msg == e.what());
+        return;
     }
+
+    TESTING_ASSERT(1);
 }
 
 void testIssue282(bool iUseMMap)
@@ -237,138 +253,290 @@ void testIssue282(bool iUseMMap)
 void testIssue283(bool iUseMMap)
 {
     Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
     try
     {
         ABCA::ArchiveReaderPtr ar = r("issue283.abc");
     }
     catch(const std::exception& e)
     {
         std::string msg = "Invalid Alembic file.";
         TESTING_ASSERT(msg == e.what());
+        return;
     }
+
+    TESTING_ASSERT(1);
 }
 
 void testFuzzer24846(bool iUseMMap)
 {
     Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
     try
     {
         ABCA::ArchiveReaderPtr ar = r("fuzzer_issue24846.abc");
     }
     catch(const std::exception& e)
     {
         std::string msg = "Ogawa IData illegal size.";
         TESTING_ASSERT(msg == e.what());
+        return;
     }
+
+    TESTING_ASSERT(1);
 }
 
 void testFuzzer24853(bool iUseMMap)
 {
     Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
     try
     {
         ABCA::ArchiveReaderPtr ar = r("fuzzer_issue24853.abc");
     }
     catch(const std::exception& e)
     {
         std::string msg = "Ogawa IData illegal size.";
         TESTING_ASSERT(msg == e.what());
+        return;
     }
+
+    TESTING_ASSERT(1);
 }
 
 
 void testFuzzer24598(bool iUseMMap)
 {
     Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
     try
     {
         ABCA::ArchiveReaderPtr ar = r("fuzzer_issue24598.abc");
     }
     catch(const std::exception& e)
     {
         std::string msg = "Ogawa IData illegal size.";
         TESTING_ASSERT(msg == e.what());
+        return;
     }
+
+    TESTING_ASSERT(1);
 }
 
 void testFuzzer25051(bool iUseMMap)
 {
     Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
     try
     {
         ABCA::ArchiveReaderPtr ar = r("fuzzer_issue25051.abc");
     }
     catch(const std::exception& e)
     {
         std::string msg = "Ogawa IData illegal size.";
         TESTING_ASSERT(msg == e.what());
+        return;
     }
+
+    TESTING_ASSERT(1);
 }
 
 void testFuzzer25081(bool iUseMMap)
 {
     Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
     ABCA::ArchiveReaderPtr ar = r("fuzzer_issue25081.abc");
     try
     {
         walkObj(ar->getTop());
     }
     catch(const std::exception& e)
     {
         std::string msg = "Invalid data in CprImpl(Object)";
         TESTING_ASSERT(msg == e.what());
     }
+
+    ABCA::MetaData ph = ar->getTop()->getHeader().getMetaData();
+    try
+    {
+        ph.serialize();
+    }
+    catch(const std::exception& e)
+    {
+        std::string msg = "TokenMap::get: Token-Value pair  contains separator characters: ; or = for ";
+        std::string err = e.what();
+        TESTING_ASSERT(msg == err.substr(0, msg.size()));
+        return;
+    }
+    TESTING_ASSERT(1);
+}
+
+void testFuzzer25166(bool iUseMMap)
+{
+    // found issue with illegal meta data index
+    Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
+    try
+    {
+        ABCA::ArchiveReaderPtr ar = r("fuzzer_issue25166.abc");
+    }
+    catch(const std::exception& e)
+    {
+        std::string msg = "Read invalid: Property Header MetaData index.";
+        TESTING_ASSERT(msg == e.what());
+        return;
+    }
+    TESTING_ASSERT(1);
+}
+
+void testFuzzer25175(bool iUseMMap)
+{
+    // seems to be fixed by fix for 25166 (bad meta data index)
+    Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
+
+    try
+    {
+        ABCA::ArchiveReaderPtr ar = r("fuzzer_issue25175.abc");
+    }
+    catch(const std::exception& e)
+    {
+        std::string msg = "Read invalid: Property Header MetaData index.";
+        TESTING_ASSERT(msg == e.what());
+        return;
+    }
+    TESTING_ASSERT(1);
+}
+
+void testFuzzer25185(bool iUseMMap)
+{
+    // seems to be fixed by fix for 25166 (bad meta data index)
+    Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
+    try
+    {
+        ABCA::ArchiveReaderPtr ar = r("fuzzer_issue25185.abc");
+    }
+    catch(const std::exception& e)
+    {
+        std::string msg = "Read invalid: Property Header MetaData index.";
+        TESTING_ASSERT(msg == e.what());
+        return;
+    }
+    TESTING_ASSERT(1);
+}
+
+void testFuzzer25192(bool iUseMMap)
+{
+    // found leak in AbcOgawa::OrData with raw pointer
+    // to m_children
+    Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
+    try
+    {
+        ABCA::ArchiveReaderPtr ar = r("fuzzer_issue25192.abc");
+    }
+    catch(const std::exception& e)
+    {
+        std::string msg = "Ogawa IStreams::read failed.";
+        TESTING_ASSERT(msg == e.what());
+        return;
+    }
+    TESTING_ASSERT(1);
+
+}
+
+void testFuzzer25204(bool iUseMMap)
+{
+    // seems to be fixed by fix for 25166 (bad meta data index)
+    Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
+    try
+    {
+        ABCA::ArchiveReaderPtr ar = r("fuzzer_issue25204.abc");
+    }
+    catch(const std::exception& e)
+    {
+        std::string msg = "Read invalid: Property Header MetaData index.";
+        TESTING_ASSERT(msg == e.what());
+        return;
+    }
+    TESTING_ASSERT(1);
+}
+
+void testFuzzer25236(bool iUseMMap)
+{
+    // seems to be fixed by fix for 25166 (bad meta data index)
+    Alembic::AbcCoreOgawa::ReadArchive r(1, iUseMMap);
+    try
+    {
+        ABCA::ArchiveReaderPtr ar = r("fuzzer_issue25236.abc");
+    }
+    catch(const std::exception& e)
+    {
+        std::string msg = "Read invalid: Property Header MetaData index.";
+        TESTING_ASSERT(msg == e.what());
+        return;
+    }
+    TESTING_ASSERT(1);
 }
 
 int main ( int argc, char *argv[] )
 {
     testIssue254(true);
     testIssue254(false);
 
     testIssue255(true);
     testIssue255(false);
 
     testIssue256(true);
     testIssue256(false);
 
     testIssue257(true);
     testIssue257(false);
 
     testIssue258(true);
     testIssue258(false);
 
     testIssue269(true);
     testIssue269(false);
 
     testIssue270(true);
     testIssue270(false);
 
     testIssue271(true);
     testIssue271(false);
 
     testIssue272(true);
     testIssue272(false);
 
     testIssue282(true);
     testIssue282(false);
 
     testIssue283(true);
     testIssue283(false);
 
     testFuzzer24846(true);
     testFuzzer24846(false);
 
     testFuzzer24853(true);
     testFuzzer24853(false);
 
     testFuzzer24598(true);
     testFuzzer24598(false);
 
     testFuzzer25051(true);
     testFuzzer25051(false);
 
     testFuzzer25081(true);
     testFuzzer25081(false);
 
+    testFuzzer25166(true);
+    testFuzzer25166(false);
+
+    testFuzzer25175(true);
+    testFuzzer25175(false);
+
+    testFuzzer25185(true);
+    testFuzzer25185(false);
+
+    testFuzzer25192(true);
+    testFuzzer25192(false);
+
+    testFuzzer25204(true);
+    testFuzzer25204(false);
+
+    testFuzzer25236(true);
+    testFuzzer25236(false);
+
     return 0;
 }
diff --git a/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25081.abc b/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25081.abc
index 852277a9..0dcb4206 100644
Binary files a/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25081.abc and b/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25081.abc differ
diff --git a/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25166.abc b/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25166.abc
new file mode 100644
index 00000000..1b84fee4
Binary files /dev/null and b/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25166.abc differ
diff --git a/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25175.abc b/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25175.abc
new file mode 100644
index 00000000..31d26557
Binary files /dev/null and b/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25175.abc differ
diff --git a/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25185.abc b/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25185.abc
new file mode 100644
index 00000000..28773ba6
Binary files /dev/null and b/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25185.abc differ
diff --git a/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25192.abc b/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25192.abc
new file mode 100644
index 00000000..b239b73e
Binary files /dev/null and b/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25192.abc differ
diff --git a/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25204.abc b/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25204.abc
new file mode 100644
index 00000000..d2c980e8
Binary files /dev/null and b/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25204.abc differ
diff --git a/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25236.abc b/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25236.abc
new file mode 100644
index 00000000..26307422
Binary files /dev/null and b/lib/Alembic/AbcCoreOgawa/Tests/fuzzer_issue25236.abc differ
diff --git a/lib/Alembic/Util/TokenMap.cpp b/lib/Alembic/Util/TokenMap.cpp
index 83fedb0a..518968fb 100644
--- a/lib/Alembic/Util/TokenMap.cpp
+++ b/lib/Alembic/Util/TokenMap.cpp
@@ -125,59 +125,58 @@ void TokenMap::setUnique( const std::string &config,
 //-*****************************************************************************
 std::string TokenMap::get( char pairSep,
                            char assignSep,
                            bool check ) const
 {
     char buf[2] = { 0, 0 };
-    
+
     buf[0] = pairSep;
     std::string pairSepStr( ( const char * )buf );
-    
+
     buf[0] = assignSep;
     std::string assignSepStr( ( const char * )buf );
 
     std::stringstream output;
 
     bool start = true;
-    
+
     for ( const_iterator iter = m_map.begin();
           iter != m_map.end(); ++iter )
     {
         std::string token = (*iter).first;
         std::string value = (*iter).second;
 
         if ( check &&
              ( token.find( pairSep ) != std::string::npos ||
                token.find( assignSep ) != std::string::npos ||
                value.find( pairSep ) != std::string::npos ||
                value.find( assignSep ) != std::string::npos ) )
         {
-            ALEMBIC_THROW( "TokenMap::get: Token-Value pair: "
-                           << token << ", " << value
-                           << " contains separator characters: "
-                           << pairSepStr << " or "
-                           << assignSepStr );
+            ALEMBIC_THROW( "TokenMap::get: Token-Value pair " <<
+                " contains separator characters: " <<
+                pairSepStr << " or " << assignSepStr <<
+                " for " << token << " or "  << value);
         }
 
         if ( value == "" )
         {
             continue;
         }
 
         if ( !start )
         {
             output << pairSepStr;
         }
 
         output << token << assignSepStr << value;
 
         start = false;
     }
 
     return output.str();
 }
 
 } // End namespace ALEMBIC_VERSION_NS
 } // End namespace Util
 } // End namespace Alembic
 
 
