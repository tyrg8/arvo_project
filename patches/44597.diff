commit 1f3c6f4534c6411313361697d98d1145a1f030fa
Author: Roberto Ierusalimschy <roberto@inf.puc-rio.br>
Date:   Tue Feb 15 12:28:46 2022 -0300

    Bug: Lua can generate wrong code when _ENV is <const>

diff --git a/lparser.c b/lparser.c
index 3abe3d75..a5cd5525 100644
--- a/lparser.c
+++ b/lparser.c
@@ -459,22 +459,23 @@ static void singlevaraux (FuncState *fs, TString *n, expdesc *var, int base) {
 /*
 ** Find a variable with the given name 'n', handling global variables
 ** too.
 */
 static void singlevar (LexState *ls, expdesc *var) {
   TString *varname = str_checkname(ls);
   FuncState *fs = ls->fs;
   singlevaraux(fs, varname, var, 1);
   if (var->k == VVOID) {  /* global name? */
     expdesc key;
     singlevaraux(fs, ls->envn, var, 1);  /* get environment variable */
     lua_assert(var->k != VVOID);  /* this one must exist */
+    luaK_exp2anyregup(fs, var);  /* but could be a constant */
     codestring(&key, varname);  /* key is variable name */
     luaK_indexed(fs, var, &key);  /* env[varname] */
   }
 }
 
 
 /*
 ** Adjust the number of results from an expression list 'e' with 'nexps'
 ** expressions to 'nvars' values.
 */
diff --git a/testes/attrib.lua b/testes/attrib.lua
index b1076c76..83821c06 100644
--- a/testes/attrib.lua
+++ b/testes/attrib.lua
@@ -433,8 +433,18 @@ assert(foo() == 10 and
 a.aVeryLongName012345678901234567890123456789012345678901234567890123456789 ==
 10)
 
 
+do
+  -- _ENV constant
+  local function foo ()
+    local _ENV <const> = 11
+    X = "hi"
+  end
+  local st, msg = pcall(foo)
+  assert(not st and string.find(msg, "number"))
+end
+
 
 -- test of large float/integer indices 
 
 -- compute maximum integer where all bits fit in a float
