commit ad88f6c24e49b751a272074ef8c0aa6dc2df3523
Author: Catena cyber <35799796+catenacyber@users.noreply.github.com>
Date:   Sat Jun 16 00:15:12 2018 +0200

    EVM initialize regs_read and regs_write (#1180)

diff --git a/arch/EVM/EVMDisassembler.c b/arch/EVM/EVMDisassembler.c
index 6cf68857..6fde18b4 100644
--- a/arch/EVM/EVMDisassembler.c
+++ b/arch/EVM/EVMDisassembler.c
@@ -268,110 +268,112 @@ static short opcodes[] = {
 bool EVM_getInstruction(csh ud, const uint8_t *code, size_t code_len,
 	MCInst *MI, uint16_t *size, uint64_t address, void *inst_info)
 {
 	unsigned char opcode;
 
 	if (code_len == 0)
 		return false;
 
 	opcode = code[0];
 	if (opcodes[opcode] == -1) {
 		// invalid opcode
 		return false;
 	}
 
 	// valid opcode
 	MI->address = address;
 	MI->OpcodePub = MI->Opcode = opcode;
 
 	if (opcode >= EVM_INS_PUSH1 && opcode <= EVM_INS_PUSH32) {
 		unsigned char len = (opcode - EVM_INS_PUSH1 + 1);
 		if (code_len < 1 + len) {
 			// not enough data
 			return false;
 		}
 
 		*size = 1 + len;
 		memcpy(MI->evm_data, code + 1, len);
 	} else
 		*size = 1;
 
 	if (MI->flat_insn->detail) {
 		memset(&MI->flat_insn->detail->evm, 0, sizeof(cs_evm));
 		EVM_get_insn_id((cs_struct *)ud, MI->flat_insn, opcode);
 
+		MI->flat_insn->detail->regs_read_count = 0;
+		MI->flat_insn->detail->regs_write_count = 0;
 		MI->flat_insn->detail->groups_count = 0;
 
 		if (MI->flat_insn->detail->evm.pop) {
 			MI->flat_insn->detail->groups[MI->flat_insn->detail->groups_count] = EVM_GRP_STACK_READ;
 			MI->flat_insn->detail->groups_count++;
 		}
 
 		if (MI->flat_insn->detail->evm.push) {
 			MI->flat_insn->detail->groups[MI->flat_insn->detail->groups_count] = EVM_GRP_STACK_WRITE;
 			MI->flat_insn->detail->groups_count++;
 		}
 
 		// setup groups
 		switch(opcode) {
 			case EVM_INS_ADD:
 			case EVM_INS_MUL:
 			case EVM_INS_SUB:
 			case EVM_INS_DIV:
 			case EVM_INS_SDIV:
 			case EVM_INS_MOD:
 			case EVM_INS_SMOD:
 			case EVM_INS_ADDMOD:
 			case EVM_INS_MULMOD:
 			case EVM_INS_EXP:
 			case EVM_INS_SIGNEXTEND:
 				MI->flat_insn->detail->groups[MI->flat_insn->detail->groups_count] = EVM_GRP_MATH;
 				MI->flat_insn->detail->groups_count++;
 				break;
 
 			case EVM_INS_MSTORE:
 			case EVM_INS_MSTORE8:
 			case EVM_INS_CALLDATACOPY:
 			case EVM_INS_CODECOPY:
 			case EVM_INS_EXTCODECOPY:
 				MI->flat_insn->detail->groups[MI->flat_insn->detail->groups_count] = EVM_GRP_MEM_WRITE;
 				MI->flat_insn->detail->groups_count++;
 				break;
 
 			case EVM_INS_MLOAD:
 			case EVM_INS_CREATE:
 			case EVM_INS_CALL:
 			case EVM_INS_CALLCODE:
 			case EVM_INS_RETURN:
 			case EVM_INS_DELEGATECALL:
 			case EVM_INS_REVERT:
 				MI->flat_insn->detail->groups[MI->flat_insn->detail->groups_count] = EVM_GRP_MEM_READ;
 				MI->flat_insn->detail->groups_count++;
 				break;
 
 			case EVM_INS_SSTORE:
 				MI->flat_insn->detail->groups[MI->flat_insn->detail->groups_count] = EVM_GRP_STORE_WRITE;
 				MI->flat_insn->detail->groups_count++;
 				break;
 
 			case EVM_INS_SLOAD:
 				MI->flat_insn->detail->groups[MI->flat_insn->detail->groups_count] = EVM_GRP_STORE_READ;
 				MI->flat_insn->detail->groups_count++;
 				break;
 
 			case EVM_INS_JUMP:
 			case EVM_INS_JUMPI:
 				MI->flat_insn->detail->groups[MI->flat_insn->detail->groups_count] = EVM_GRP_JUMP;
 				MI->flat_insn->detail->groups_count++;
 				break;
 
 			case EVM_INS_STOP:
 			case EVM_INS_SUICIDE:
 				MI->flat_insn->detail->groups[MI->flat_insn->detail->groups_count] = EVM_GRP_HALT;
 				MI->flat_insn->detail->groups_count++;
 				break;
 
 		}
 	}
 
 	return true;
 }
