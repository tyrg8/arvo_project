commit b401e24093d8b3405a8a349d926131fb56cad631
Author: Albert Astals Cid <aacid@kde.org>
Date:   Sun Apr 14 18:08:47 2019 +0200

    Fix double delete on broken files
    
    Summary:
    findOrCreate has some code that tries to recover broken files.
    
    That code will delete an empty file if later it looks like it should be a directory.
    
    The problem is that that code, was doing
    
    entry = rootDir->get(path)
    if (entry is not dir and it's 0 size) {
            rootDir->remove(entry)
            delete entry;
    }
    
    But unfortunately get() and remove() are not equally stubborn.
    
    get will try to see if the path lives in a subdir while remove only will remove entries in the exact dir.
    
    So it might happen that the old code did call remove() on the root dir but that did nothing since the entry didn't belong to the root dir.
    
    This failure would result in a double delete when the dir that actually contains the entry would be deleted.
    
    This patch introduces a private get that will also return which directory entry exactly lives on so remove succeeds and no double delete happens.
    
    Reviewers: dfaure
    
    Reviewed By: dfaure
    
    Subscribers: dfaure, kde-frameworks-devel
    
    Tags: #frameworks
    
    Differential Revision: https://phabricator.kde.org/D20519

diff --git a/autotests/karchivetest.cpp b/autotests/karchivetest.cpp
index 085aaa9..bdaa269 100644
--- a/autotests/karchivetest.cpp
+++ b/autotests/karchivetest.cpp
@@ -757,6 +757,24 @@ void KArchiveTest::testTarDirectoryForgotten()
     QVERIFY(tar.close());
 }
 
+void KArchiveTest::testTarEmptyFileMissingDir()
+{
+    KTar tar(QFINDTESTDATA(QLatin1String("tar_emptyfile_missingdir.tar.gz")));
+    QVERIFY(tar.open(QIODevice::ReadOnly));
+
+    const KArchiveDirectory *dir = tar.directory();
+    QVERIFY(dir != nullptr);
+
+    const QStringList listing = recursiveListEntries(dir, QLatin1String(""), 0);
+
+    QCOMPARE(listing[0], QString("mode=40777 path=dir type=dir"));
+    QCOMPARE(listing[1], QString("mode=40777 path=dir/foo type=dir"));
+    QCOMPARE(listing[2], QString("mode=644 path=dir/foo/file type=file size=0"));
+    QCOMPARE(listing.count(), 3);
+
+    QVERIFY(tar.close());
+}
+
 void KArchiveTest::testTarRootDir() // bug 309463
 {
     KTar tar(QFINDTESTDATA(QLatin1String("tar_rootdir.tar.gz")));
diff --git a/autotests/karchivetest.h b/autotests/karchivetest.h
index 8dc0f98..079cfca 100644
--- a/autotests/karchivetest.h
+++ b/autotests/karchivetest.h
@@ -34,104 +34,105 @@ class KArchiveTest : public QObject
 private Q_SLOTS:
     void initTestCase();
 
     void testEmptyFilename();
     void testNullDevice();
     void testNonExistentFile();
     void testCreateTar_data();
     void testCreateTar();
     void testCreateTarXXX_data()
     {
         setupData();
     }
     void testCreateTarXXX();
     void testReadTar_data()
     {
         setupData();
     }
     void testReadTar();
     void testUncompress_data()
     {
         setupData();
     }
     void testUncompress();
     void testTarFileData_data()
     {
         setupData();
     }
     void testTarFileData();
     void testTarCopyTo_data()
     {
         setupData();
     }
     void testTarCopyTo();
     void testTarReadWrite_data()
     {
         setupData();
     }
     void testTarReadWrite();
     void testTarMaxLength_data();
     void testTarMaxLength();
     void testTarGlobalHeader();
     void testTarPrefix();
     void testTarDirectoryForgotten();
+    void testTarEmptyFileMissingDir();
     void testTarRootDir();
     void testTarDirectoryTwice();
     void testTarIgnoreRelativePathOutsideArchive();
     void testTarLongNonASCIINames();
     void testTarShortNonASCIINames();
 
     void testCreateZip();
     void testCreateZipError();
     void testReadZipError();
     void testReadZip();
     void testZipFileData();
     void testZipCopyTo();
     void testZipMaxLength();
     void testZipWithNonLatinFileNames();
     void testZipWithOverwrittenFileName();
     void testZipAddLocalDirectory();
     void testZipReadRedundantDataDescriptor_data();
     void testZipReadRedundantDataDescriptor();
     void testZipDirectoryPermissions();
     void testZipUnusualButValid();
     void testZipDuplicateNames();
 
     void testRcc();
 
 #if HAVE_XZ_SUPPORT
     void testCreate7Zip_data()
     {
         setup7ZipData();
     }
     void testCreate7Zip();
     void testRead7Zip_data()
     {
         setup7ZipData();
     }
     void testRead7Zip();
     void test7ZipFileData_data()
     {
         setup7ZipData();
     }
     void test7ZipFileData();
     void test7ZipCopyTo_data()
     {
         setup7ZipData();
     }
     void test7ZipCopyTo();
     void test7ZipReadWrite_data()
     {
         setup7ZipData();
     }
     void test7ZipReadWrite();
     void test7ZipMaxLength_data()
     {
         setup7ZipData();
     }
     void test7ZipMaxLength();
 #endif
 
     void cleanupTestCase();
 };
 
 #endif
diff --git a/autotests/tar_emptyfile_missingdir.tar.gz b/autotests/tar_emptyfile_missingdir.tar.gz
new file mode 100644
index 0000000..12aac6e
Binary files /dev/null and b/autotests/tar_emptyfile_missingdir.tar.gz differ
diff --git a/src/karchive.cpp b/src/karchive.cpp
index e83eaf5..5bf0af3 100644
--- a/src/karchive.cpp
+++ b/src/karchive.cpp
@@ -1,55 +1,120 @@
 /* This file is part of the KDE libraries
    Copyright (C) 2000-2005 David Faure <faure@kde.org>
    Copyright (C) 2003 Leo Savernik <l.savernik@aon.at>
 
    Moved from ktar.cpp by Roberto Teixeira <maragato@kde.org>
 
    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License version 2 as published by the Free Software Foundation.
 
    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.
 
    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
 */
 
 #include "karchive.h"
 #include "karchive_p.h"
 #include "klimitediodevice_p.h"
 #include "loggingcategory.h"
 
 #include <qplatformdefs.h> // QT_STATBUF, QT_LSTAT
 
 #include <QStack>
 #include <QMap>
 #include <QDebug>
 #include <QDir>
 #include <QFile>
 
 #include <stdio.h>
 #include <stdlib.h>
 #include <errno.h>
 
 #include <assert.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 
 #ifdef Q_OS_UNIX
 #include <grp.h>
 #include <pwd.h>
 #include <limits.h>  // PATH_MAX
 #include <unistd.h>
 #endif
 #ifdef Q_OS_WIN
 #include <windows.h> // DWORD, GetUserNameW
 #endif // Q_OS_WIN
 
+////////////////////////////////////////////////////////////////////////
+/////////////////// KArchiveDirectoryPrivate ///////////////////////////
+////////////////////////////////////////////////////////////////////////
+
+class KArchiveDirectoryPrivate
+{
+public:
+    KArchiveDirectoryPrivate(KArchiveDirectory *parent) : q(parent)
+    {
+    }
+
+    ~KArchiveDirectoryPrivate()
+    {
+        qDeleteAll(entries);
+    }
+
+    KArchiveDirectoryPrivate(const KArchiveDirectoryPrivate &) = delete;
+    KArchiveDirectoryPrivate &operator=(const KArchiveDirectoryPrivate &) = delete;
+
+    static KArchiveDirectoryPrivate *get(KArchiveDirectory *directory)
+    {
+        return directory->d;
+    }
+
+    // Returns in containingDirectory the directory that actually contains the returned entry
+    const KArchiveEntry *entry(const QString &_name, KArchiveDirectory **containingDirectory) const
+    {
+        *containingDirectory = q;
+
+        QString name = QDir::cleanPath(_name);
+        int pos = name.indexOf(QLatin1Char('/'));
+        if (pos == 0) { // ouch absolute path (see also KArchive::findOrCreate)
+            if (name.length() > 1) {
+                name = name.mid(1);   // remove leading slash
+                pos = name.indexOf(QLatin1Char('/'));   // look again
+            } else { // "/"
+                return q;
+            }
+        }
+        // trailing slash ? -> remove
+        if (pos != -1 && pos == name.length() - 1) {
+            name = name.left(pos);
+            pos = name.indexOf(QLatin1Char('/'));   // look again
+        }
+        if (pos != -1) {
+            const QString left = name.left(pos);
+            const QString right = name.mid(pos + 1);
+
+            //qCDebug(KArchiveLog) << "left=" << left << "right=" << right;
+
+            KArchiveEntry *e = entries.value(left);
+            if (!e || !e->isDirectory()) {
+                return nullptr;
+            }
+            *containingDirectory = static_cast<KArchiveDirectory *>(e);
+            return (*containingDirectory)->d->entry(right, containingDirectory);
+        }
+
+        return entries.value(name);
+    }
+
+    KArchiveDirectory *q;
+    QHash<QString, KArchiveEntry *> entries;
+};
+
 ////////////////////////////////////////////////////////////////////////
 /////////////////////////// KArchive ///////////////////////////////////
 ////////////////////////////////////////////////////////////////////////
@@ -452,71 +517,72 @@ KArchiveDirectory *KArchive::findOrCreate(const QString &path)
 KArchiveDirectory *KArchivePrivate::findOrCreate(const QString &path, int recursionCounter)
 {
     // Check we're not in a path that is ultra deep, this is most probably fine since PATH_MAX on Linux
     // is defined as 4096, so even on /a/a/a/a/a/a 2500 recursions puts us over that limit
     // an ultra deep recursion will makes us crash due to not enough stack. Tests show that 1MB stack
     // (default on Linux seems to be 8MB) gives us up to around 4000 recursions
     if (recursionCounter > 2500) {
         qCWarning(KArchiveLog) << "path recursion limit exceeded, bailing out";
         return nullptr;
     }
     //qCDebug(KArchiveLog) << path;
     if (path.isEmpty() || path == QLatin1String("/") || path == QLatin1String(".")) { // root dir => found
         //qCDebug(KArchiveLog) << "returning rootdir";
         return q->rootDir();
     }
     // Important note : for tar files containing absolute paths
     // (i.e. beginning with "/"), this means the leading "/" will
     // be removed (no KDirectory for it), which is exactly the way
     // the "tar" program works (though it displays a warning about it)
     // See also KArchiveDirectory::entry().
 
     // Already created ? => found
-    const KArchiveEntry *ent = q->rootDir()->entry(path);
-    if (ent) {
-        if (ent->isDirectory())
+    KArchiveDirectory *existingEntryParentDirectory;
+    const KArchiveEntry *existingEntry = KArchiveDirectoryPrivate::get(q->rootDir())->entry(path, &existingEntryParentDirectory);
+    if (existingEntry) {
+        if (existingEntry->isDirectory())
             //qCDebug(KArchiveLog) << "found it";
         {
-            const KArchiveDirectory *dir = static_cast<const KArchiveDirectory *>(ent);
+            const KArchiveDirectory *dir = static_cast<const KArchiveDirectory *>(existingEntry);
             return const_cast<KArchiveDirectory *>(dir);
         } else {
-            const KArchiveFile *file = static_cast<const KArchiveFile *>(ent);
+            const KArchiveFile *file = static_cast<const KArchiveFile *>(existingEntry);
             if (file->size() > 0) {
                 qCWarning(KArchiveLog) << path << "is normal file, but there are file paths in the archive assuming it is a directory, bailing out";
                 return nullptr;
             }
 
             qCDebug(KArchiveLog) << path << " is an empty file, assuming it is actually a directory and replacing";
-            KArchiveEntry *myEntry = const_cast<KArchiveEntry*>(ent);
-            q->rootDir()->removeEntry(myEntry);
+            KArchiveEntry *myEntry = const_cast<KArchiveEntry*>(existingEntry);
+            existingEntryParentDirectory->removeEntry(myEntry);
             delete myEntry;
         }
     }
 
     // Otherwise go up and try again
     int pos = path.lastIndexOf(QLatin1Char('/'));
     KArchiveDirectory *parent;
     QString dirname;
     if (pos == -1) { // no more slash => create in root dir
         parent =  q->rootDir();
         dirname = path;
     } else {
         QString left = path.left(pos);
         dirname = path.mid(pos + 1);
         parent = findOrCreate(left, recursionCounter + 1);   // recursive call... until we find an existing dir.
     }
 
     if (!parent) {
         return nullptr;
     }
 
     //qCDebug(KArchiveLog) << "found parent " << parent->name() << " adding " << dirname << " to ensure " << path;
     // Found -> add the missing piece
     KArchiveDirectory *e = new KArchiveDirectory(q, dirname, rootDir->permissions(),
                                                  rootDir->date(), rootDir->user(),
                                                  rootDir->group(), QString());
     if (parent->addEntryV2(e)) {
         return e; // now a directory to <path> exists
     } else {
         return nullptr;
     }
 }
@@ -780,30 +846,12 @@ bool KArchiveFile::copyTo(const QString &dest) const
 //////////////////////// KArchiveDirectory /////////////////////////////////
 ////////////////////////////////////////////////////////////////////////
 
-class KArchiveDirectoryPrivate
-{
-public:
-    KArchiveDirectoryPrivate()
-    {
-    }
-
-    ~KArchiveDirectoryPrivate()
-    {
-        qDeleteAll(entries);
-    }
-
-    KArchiveDirectoryPrivate(const KArchiveDirectoryPrivate &) = delete;
-    KArchiveDirectoryPrivate &operator=(const KArchiveDirectoryPrivate &) = delete;
-
-    QHash<QString, KArchiveEntry *> entries;
-};
-
 KArchiveDirectory::KArchiveDirectory(KArchive *t, const QString &name, int access,
                                      const QDateTime &date,
                                      const QString &user, const QString &group,
                                      const QString &symlink)
     : KArchiveEntry(t, name, access, date, user, group, symlink)
-    , d(new KArchiveDirectoryPrivate)
+    , d(new KArchiveDirectoryPrivate(this))
 {
 }
 
@@ -819,35 +867,8 @@ QStringList KArchiveDirectory::entries() const
 
 const KArchiveEntry *KArchiveDirectory::entry(const QString &_name) const
 {
-    QString name = QDir::cleanPath(_name);
-    int pos = name.indexOf(QLatin1Char('/'));
-    if (pos == 0) { // ouch absolute path (see also KArchive::findOrCreate)
-        if (name.length() > 1) {
-            name = name.mid(1);   // remove leading slash
-            pos = name.indexOf(QLatin1Char('/'));   // look again
-        } else { // "/"
-            return this;
-        }
-    }
-    // trailing slash ? -> remove
-    if (pos != -1 && pos == name.length() - 1) {
-        name = name.left(pos);
-        pos = name.indexOf(QLatin1Char('/'));   // look again
-    }
-    if (pos != -1) {
-        const QString left = name.left(pos);
-        const QString right = name.mid(pos + 1);
-
-        //qCDebug(KArchiveLog) << "left=" << left << "right=" << right;
-
-        const KArchiveEntry *e = d->entries.value(left);
-        if (!e || !e->isDirectory()) {
-            return nullptr;
-        }
-        return static_cast<const KArchiveDirectory *>(e)->entry(right);
-    }
-
-    return d->entries.value(name);
+    KArchiveDirectory *dummy;
+    return d->entry(_name, &dummy);
 }
 
 const KArchiveFile *KArchiveDirectory::file(const QString &name) const
diff --git a/src/karchivedirectory.h b/src/karchivedirectory.h
index 25c7dbd..96d471f 100644
--- a/src/karchivedirectory.h
+++ b/src/karchivedirectory.h
@@ -127,7 +127,8 @@ public:
 protected:
     void virtual_hook(int id, void *data) override;
 private:
+    friend class KArchiveDirectoryPrivate;
     KArchiveDirectoryPrivate *const d;
 };
 
 #endif
