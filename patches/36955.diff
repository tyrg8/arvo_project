commit 3bb323fbd6d56ec5d78e3c512bbb12c61e767530
Merge: 2afcaa044 74858daf6
Author: eugene7646 <elivis@basistech.com>
Date:   Wed Aug 17 14:13:10 2022 -0400

    Merge pull request #2727 from sashashura/patch-3
    
    Fixes Heap-buffer-overflow READ in tsk_stack_pop

diff --git a/tsk/fs/fs_dir.c b/tsk/fs/fs_dir.c
index f0c5673c6..c59804a41 100644
--- a/tsk/fs/fs_dir.c
+++ b/tsk/fs/fs_dir.c
@@ -642,303 +642,303 @@ static TSK_WALK_RET_ENUM
 tsk_fs_dir_walk_recursive(TSK_FS_INFO * a_fs, DENT_DINFO * a_dinfo,
     TSK_INUM_T a_addr, TSK_FS_DIR_WALK_FLAG_ENUM a_flags,
     TSK_FS_DIR_WALK_CB a_action, void *a_ptr, int macro_recursion_depth)
 {
     TSK_FS_DIR *fs_dir;
     TSK_FS_FILE *fs_file;
     size_t i;
     int* indexToOrderedIndex = NULL;
 
     // get the list of entries in the directory
     if ((fs_dir = tsk_fs_dir_open_meta_internal(a_fs, a_addr, macro_recursion_depth + 1)) == NULL) {
         return TSK_WALK_ERROR;
     }
 
     // If we're in the root folder, sort the files/folders to prioritize user content
     if (a_addr == a_fs->root_inum) {
         indexToOrderedIndex = (int *)tsk_malloc(fs_dir->names_used * sizeof(int));
         if (indexToOrderedIndex == NULL) {
             tsk_fs_dir_close(fs_dir);
             return TSK_WALK_ERROR;
         }
         if (TSK_OK != prioritizeDirNames(fs_dir->names, fs_dir->names_used, indexToOrderedIndex)) {
             tsk_fs_dir_close(fs_dir);
             return TSK_WALK_ERROR;
         }
     }
 
     /* Allocate a file structure for the callbacks.  We
      * will allocate fs_meta structures as needed and
      * point into the fs_dir structure for the names. */
     if ((fs_file = tsk_fs_file_alloc(a_fs)) == NULL) {
         tsk_fs_dir_close(fs_dir);
         if (indexToOrderedIndex != NULL) {
             free(indexToOrderedIndex);
         }
         return TSK_WALK_ERROR;
     }
 
     for (i = 0; i < fs_dir->names_used; i++) {
         TSK_WALK_RET_ENUM retval;
 
         /* Point name to the buffer of names.  We need to be
          * careful about resetting this before we free fs_file */
         if (indexToOrderedIndex != NULL) {
             // If we have a priortized list, use it
             fs_file->name = (TSK_FS_NAME *)& fs_dir->names[indexToOrderedIndex[i]];
         }
         else {
             fs_file->name = (TSK_FS_NAME *)& fs_dir->names[i];
         }
 
         /* load the fs_meta structure if possible.
          * Must have non-zero inode addr or have allocated name (if inode is 0) */
         if (((fs_file->name->meta_addr)
                 || (fs_file->name->flags & TSK_FS_NAME_FLAG_ALLOC))) {
 
             /* Note that the NTFS code behind here has a slight hack to use the
              * correct sequence number based on the data in fs_file->name */
             if (a_fs->file_add_meta(a_fs, fs_file,
                     fs_file->name->meta_addr)) {
                 if (tsk_verbose)
                     tsk_error_print(stderr);
                 tsk_error_reset();
             }
         }
 
         // call the action if we have the right flags.
         if ((fs_file->name->flags & a_flags) == fs_file->name->flags) {
 
             retval = a_action(fs_file, a_dinfo->dirs, a_ptr);
             if (retval == TSK_WALK_STOP) {
                 tsk_fs_dir_close(fs_dir);
                 fs_file->name = NULL;
                 tsk_fs_file_close(fs_file);
 
                 if (indexToOrderedIndex != NULL) {
                     free(indexToOrderedIndex);
                 }
 
                 /* free the list -- fs_dir_walk has no way
                  * of knowing that we stopped early w/out error.
                  */
                 if (a_dinfo->save_inum_named) {
                     tsk_list_free(a_dinfo->list_inum_named);
                     a_dinfo->list_inum_named = NULL;
                     a_dinfo->save_inum_named = 0;
                 }
                 return TSK_WALK_STOP;
             }
             else if (retval == TSK_WALK_ERROR) {
                 tsk_fs_dir_close(fs_dir);
                 fs_file->name = NULL;
                 tsk_fs_file_close(fs_file);
                 if (indexToOrderedIndex != NULL) {
                     free(indexToOrderedIndex);
                 }
                 return TSK_WALK_ERROR;
             }
         }
 
         // save the inode info for orphan finding - if requested
         if ((a_dinfo->save_inum_named) && (fs_file->meta)
             && (fs_file->meta->flags & TSK_FS_META_FLAG_UNALLOC)) {
 
             if (tsk_list_add(&a_dinfo->list_inum_named,
                     fs_file->meta->addr)) {
 
                 // if there is an error, then clear the list
                 tsk_list_free(a_dinfo->list_inum_named);
                 a_dinfo->list_inum_named = NULL;
                 a_dinfo->save_inum_named = 0;
             }
         }
 
 
         /* Optimization. If we are about to recurse into the
          * orphan directory and we are the last item in the
          * directory and the flag has been set to save inum_named,
          * then save inum_named now to FS_INFO so that we can use
          * it for the orphan folder.  Otherwise, we do a full
          * inode walk again for nothing. */
         if ((fs_file->name->meta_addr == TSK_FS_ORPHANDIR_INUM(a_fs)) && 
             (i == fs_dir->names_used-1) && 
             (a_dinfo->save_inum_named == 1)) {
             save_inum_named(a_fs, a_dinfo);
             a_dinfo->save_inum_named = 0;
         }
 
         /* Recurse into a directory if:
          * - Both dir entry and inode have DIR type (or name is undefined)
          * - Recurse flag is set
          * - dir entry is allocated OR both are unallocated
          * - not one of the '.' or '..' entries
          * - A Non-Orphan Dir or the Orphan Dir with the NOORPHAN flag not set.
          */
         if ((TSK_FS_IS_DIR_NAME(fs_file->name->type)
                 || (fs_file->name->type == TSK_FS_NAME_TYPE_UNDEF))
             && (fs_file->meta)
             && (TSK_FS_IS_DIR_META(fs_file->meta->type))
             && (a_flags & TSK_FS_DIR_WALK_FLAG_RECURSE)
             && ((fs_file->name->flags & TSK_FS_NAME_FLAG_ALLOC)
                 || ((fs_file->name->flags & TSK_FS_NAME_FLAG_UNALLOC)
                     && (fs_file->meta->flags & TSK_FS_META_FLAG_UNALLOC))
             )
             && (!TSK_FS_ISDOT(fs_file->name->name))
             && ((fs_file->name->meta_addr != TSK_FS_ORPHANDIR_INUM(a_fs))
                 || ((a_flags & TSK_FS_DIR_WALK_FLAG_NOORPHAN) == 0))
             ) {
 
             /* Make sure we do not get into an infinite loop */
             if (0 == tsk_stack_find(a_dinfo->stack_seen,
                     fs_file->name->meta_addr)) {
                 int depth_added = 0;
                 uint8_t save_bak = 0;
 
                 if (tsk_stack_push(a_dinfo->stack_seen,
                         fs_file->name->meta_addr)) {
                     tsk_fs_dir_close(fs_dir);
                     fs_file->name = NULL;
                     tsk_fs_file_close(fs_file);
                     if (indexToOrderedIndex != NULL) {
                         free(indexToOrderedIndex);
                     }
                     return TSK_WALK_ERROR;
                 }
 
                 /* If we've exceeded the max depth or max length, don't
                  * recurse any further into this directory 
                  * NOTE: We have two concepts of recursion detection in
                  * here.  This one is based on within a top-level call
                  * to dir_walk.  The macro_recursion_depth value allows
                  * us to detect when file systems need to call dir_walk
                  * to resolve things and they get into an infinite loop.
                  * Perhaps they can be unified some day. 
                  */
                 if ((a_dinfo->depth >= MAX_DEPTH) ||
                     (DIR_STRSZ <=
                         strlen(a_dinfo->dirs) +
                         strlen(fs_file->name->name))) {   
                     if (tsk_verbose) {
                         tsk_fprintf(stdout,
                             "tsk_fs_dir_walk_recursive: directory : %"
                             PRIuINUM " exceeded max length / depth\n", fs_file->name->meta_addr);
                     }
 
                     tsk_fs_dir_close(fs_dir);
                     fs_file->name = NULL;
                     tsk_fs_file_close(fs_file);
                     if (indexToOrderedIndex != NULL) {
                         free(indexToOrderedIndex);
                     }
                     return TSK_WALK_ERROR;
                 }
 
                 a_dinfo->didx[a_dinfo->depth] =
                     &a_dinfo->dirs[strlen(a_dinfo->dirs)];
                 strncpy(a_dinfo->didx[a_dinfo->depth],
                     fs_file->name->name,
                     DIR_STRSZ - strlen(a_dinfo->dirs));
-                strncat(a_dinfo->dirs, "/", DIR_STRSZ-1);
+                strncat(a_dinfo->dirs, "/", DIR_STRSZ - strlen(a_dinfo->dirs) - 1);
                 depth_added = 1;
                 a_dinfo->depth++;
 
                 /* We do not want to save info about named unalloc files
                  * when we go into the Orphan directory (because then we have
                  * no orphans).  So, disable it for this recursion.
                  */
                 if (fs_file->name->meta_addr ==
                     TSK_FS_ORPHANDIR_INUM(a_fs)) {
                     save_bak = a_dinfo->save_inum_named;
                     a_dinfo->save_inum_named = 0;
                 }
                 retval = tsk_fs_dir_walk_recursive(a_fs,
                     a_dinfo, fs_file->name->meta_addr, a_flags,
                     a_action, a_ptr, macro_recursion_depth + 1);
                 if (retval == TSK_WALK_ERROR) {
                     /* In most cases we want to continue if a directory 
                      * did not load, but if we ran out
                      * of memory we should stop */
                     if (tsk_error_get_errno() & TSK_ERR_AUX) {
                         tsk_fs_dir_close(fs_dir);
                         fs_file->name = NULL;
                         tsk_fs_file_close(fs_file);
 
                         if (indexToOrderedIndex != NULL) {
                             free(indexToOrderedIndex);
                         }
                         return TSK_WALK_ERROR;
                     }
 
                     if (tsk_verbose) {
                         tsk_fprintf(stderr,
                             "tsk_fs_dir_walk_recursive: error reading directory: %"
                             PRIuINUM "\n", fs_file->name->meta_addr);
                         tsk_error_print(stderr);
                     }
 
                     tsk_error_reset();
                 }
                 else if (retval == TSK_WALK_STOP) {
                     tsk_fs_dir_close(fs_dir);
                     fs_file->name = NULL;
                     tsk_fs_file_close(fs_file);
 
                     if (indexToOrderedIndex != NULL) {
                         free(indexToOrderedIndex);
                     }
                     return TSK_WALK_STOP;
                 }
 
                 // reset the save status
                 if (fs_file->name->meta_addr ==
                     TSK_FS_ORPHANDIR_INUM(a_fs)) {
                     a_dinfo->save_inum_named = save_bak;
                 }
 
                 tsk_stack_pop(a_dinfo->stack_seen);
                 a_dinfo->depth--;
                 if (depth_added)
                     *a_dinfo->didx[a_dinfo->depth] = '\0';
             }
             else {
                 if (tsk_verbose)
                     fprintf(stderr,
                         "tsk_fs_dir_walk_recursive: Loop detected with address %"
                         PRIuINUM, fs_file->name->meta_addr);
             }
         }
 
         // remove the pointer to name buffer
         fs_file->name = NULL;
 
         // free the metadata if we allocated it
         if (fs_file->meta) {
             tsk_fs_meta_close(fs_file->meta);
             fs_file->meta = NULL;
         }
     }
 
     tsk_fs_dir_close(fs_dir);
     fs_file->name = NULL;
     tsk_fs_file_close(fs_file);
 
     if (indexToOrderedIndex != NULL) {
         free(indexToOrderedIndex);
     }
     return TSK_WALK_CONT;
 }
 
 
 /** \internal
 * Internal version of the tsk_fs_dir_walk function with recursion depth.
 * This should be called by file systems when they need to start a new dir_walk
 * to resolve something and they may already be inside of a walk. 
 *
 * @param a_fs File system to analyze
 * @param a_addr Metadata address of the directory to analyze
 * @param a_flags Flags used during analysis
 * @param a_action Callback function that is called for each file name
 * @param a_ptr Pointer to data that is passed to the callback function each time
 * @param macro_recursion_depth Recursion depth to limit the number of self-calls in case the underlying file system also needs to make calls into dir_walk
 * @returns 1 on error and 0 on success
 */
