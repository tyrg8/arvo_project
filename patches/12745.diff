commit 8f15ebed65ceea5c856fce055b5d83fb0c4b597b
Author: Dario Lombardo <lomato@gmail.com>
Date:   Fri Mar 1 11:18:53 2019 +0100

    srvloc: check buffer index to prevent heap overflow.
    
    Bug: 15546
    Change-Id: I35eee1f6e1127db74339ec7218d7681bd93de59c
    Reviewed-on: https://code.wireshark.org/review/32285
    Petri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Anders Broman <a.broman58@gmail.com>

diff --git a/epan/dissectors/packet-srvloc.c b/epan/dissectors/packet-srvloc.c
index 3aea0fdb57..f7a13f7e5d 100644
--- a/epan/dissectors/packet-srvloc.c
+++ b/epan/dissectors/packet-srvloc.c
@@ -428,57 +428,61 @@ static const guint8*
 unicode_to_bytes(tvbuff_t *tvb, int offset, int length, gboolean endianness)
 {
     const guint8 *ascii_text = tvb_get_string_enc(wmem_packet_scope(), tvb, offset, length, ENC_ASCII);
     int           i, j       = 0;
     guint8        c_char, c_char1;
     guint8       *byte_array;
 
     /* XXX - Is this the correct behavior? */
     if (length < 1)
         return "";
 
     if (endianness) {
         byte_array = (guint8 *)wmem_alloc(wmem_packet_scope(), length*2 + 1);
         for (i = length; i > 0; i--) {
             c_char = ascii_text[i];
             if (c_char != 0) {
+                if (i == 0)
+                    break;
                 i--;
                 c_char1 = ascii_text[i];
                 if (c_char1 == 0) {
+                    if (i == 0)
+                        break;
                     i--;
                     c_char1 = ascii_text[i];
                 }
                 byte_array[j] = c_char1;
                 j++;
                 byte_array[j] = c_char;
                 j++;
             }
         }
     }
     else
     {
         byte_array = (guint8 *)wmem_alloc(wmem_packet_scope(), length + 1);
         for (i = 0; i < length; i++) {
             c_char = ascii_text[i];
             if (c_char != 0) {
                 byte_array[j] = c_char;
                 j++;
             }
         }
     }
 
     byte_array[j]=0;
     return byte_array;
 }
 
 /*
  * Format of x-x-x-xxxxxxxx. Each of these entries represents the service binding to UDP, TCP, or IPX.
  * The first digit is the protocol family: 2 for TCP/UPD, 6 for IPX.
  * The second digit is the socket type: 1 for socket stream (TCP), 2 for datagram (UDP and IPX).
  * The third is the protocol: 6 for TCP, 17 for UDP, and 1000 for IPX.
  * Last is the IP address, in hex, of the interface that is registered (or, in the case of IPX, an IPX network number).
  *
  * OpenSLP supports multiple attribute replies so we need to parse the attribute name and then decode accordingly.
  * We currently only parse the (non-utf8) attributes:
  * svcname
  * svcaddr
 */
