commit 272580021ad195598a822cb0916a752ade2ec174
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Fri Nov 11 10:48:54 2022 +0000

    oss-fuzz 52986: pdfwrite - free copied font on error
    
    During the process of copying a font for pdfwrite/ps2write, if we encounter an
    error before the copied font is completed, we'd skip to the "fail" code
    before assocating the copied font with the pdfwrite font object, meaning it
    relied on garbage collection to clean it up (never safe in devices!).
    
    Explicitly free the copied font, before skipping to the "fail" code - later
    error conditions, the copied font is already linked to the pdfwrite font,
    and thus cleaned up correctly with that.

diff --git a/devices/vector/gdevpdtb.c b/devices/vector/gdevpdtb.c
index 77341ccb4..7f424398d 100644
--- a/devices/vector/gdevpdtb.c
+++ b/devices/vector/gdevpdtb.c
@@ -210,186 +210,188 @@ int
 pdf_base_font_alloc(gx_device_pdf *pdev, pdf_base_font_t **ppbfont,
                     gs_font_base *font, const gs_matrix *orig_matrix,
                     bool is_standard)
 {
     gs_memory_t *mem = pdev->pdf_memory;
     gs_font *copied;
     gs_font *complete;
     pdf_base_font_t *pbfont =
         gs_alloc_struct(mem, pdf_base_font_t,
                         &st_pdf_base_font, "pdf_base_font_alloc");
     const gs_font_name *pfname = &font->font_name;
     gs_const_string font_name;
     char fnbuf[2*sizeof(long) + 3]; /* .F########\0 */
     int code, reserve_glyphs = -1;
 
     if (pbfont == 0)
         return_error(gs_error_VMerror);
     memset(pbfont, 0, sizeof(*pbfont));
     switch (font->FontType) {
     case ft_encrypted:
     case ft_encrypted2:
         {
             int index, count;
             gs_glyph glyph;
 
             for (index = 0, count = 0;
                 (font->procs.enumerate_glyph((gs_font *)font, &index,
                                               GLYPH_SPACE_NAME, &glyph),
                   index != 0);
                  )
                     ++count;
             pbfont->num_glyphs = count;
             pbfont->do_subset = (is_standard ? DO_SUBSET_NO : DO_SUBSET_UNKNOWN);
         }
         /* If we find an excessively large type 1 font we won't be able to emit
          * a complete copy. Instead we will emit multiple subsets. Detect that here
          * and only reserve enough space in the font copy for the maximum subset
          * glyphs, 257.
          * This also prevents us making a 'complete' copy of the font below. NB the
          * value 2048 is merely a guess, intended to prevent copying very large fonts.
          */
         if(pbfont->num_glyphs > 2048 && !is_standard) {
             reserve_glyphs = 257;
             if(pbfont->do_subset != DO_SUBSET_NO){
                 char buf[gs_font_name_max + 1];
                 int l = min(font->font_name.size, sizeof(buf) - 1);
 
                 memcpy(buf, font->font_name.chars, l);
                 buf[l] = 0;
                 emprintf1(pdev->memory,
                           "Can't embed the complete font %s as it is too large, embedding a subset.\n",
                           buf);
             }
         }
         break;
     case ft_TrueType:
         pbfont->num_glyphs = ((gs_font_type42 *)font)->data.trueNumGlyphs;
         pbfont->do_subset =
             (pbfont->num_glyphs <= MAX_NO_SUBSET_GLYPHS ?
              DO_SUBSET_UNKNOWN : DO_SUBSET_YES);
         break;
     case ft_CID_encrypted:
         pbfont->num_glyphs = ((gs_font_cid0 *)font)->cidata.common.CIDCount;
         goto cid;
     case ft_CID_TrueType:
         pbfont->num_glyphs = ((gs_font_cid2 *)font)->cidata.common.CIDCount;
     cid:
         pbfont->do_subset = DO_SUBSET_YES;
         pbfont->CIDSet =
             gs_alloc_bytes(mem, (pbfont->num_glyphs + 7) / 8,
                            "pdf_base_font_alloc(CIDSet)");
         if (pbfont->CIDSet == 0) {
             code = gs_note_error(gs_error_VMerror);
             goto fail;
         }
         pbfont->CIDSetLength = (pbfont->num_glyphs + 7) / 8;
         memset(pbfont->CIDSet, 0, (pbfont->num_glyphs + 7) / 8);
         break;
     default:
         code = gs_note_error(gs_error_rangecheck);
         goto fail;
     }
 
     code = gs_copy_font((gs_font *)font, orig_matrix, mem, &copied, reserve_glyphs);
     if (code < 0)
         goto fail;
     gs_notify_register(&copied->notify_list, copied_font_notify, copied);
     {
         /*
          * Adobe Technical Note # 5012 "The Type 42 Font Format Specification" says :
          *
          * There is a known bug in the TrueType rasterizer included in versions of the
          * PostScript interpreter previous to version 2013. The problem is that the
          * translation components of the FontMatrix, as used as an argument to the
          * definefont or makefont operators, are ignored. Translation of user space is
          * not affected by this bug.
          *
          * Besides that, we found that Adobe Acrobat Reader 4 and 5 ignore
          * FontMatrix.ty .
          */
         copied->FontMatrix.tx = copied->FontMatrix.ty = 0;
     }
 
     if (pbfont->do_subset != DO_SUBSET_YES && reserve_glyphs == -1) {
         /* The only possibly non-subsetted fonts are Type 1/2 and Type 42. */
         if (is_standard)
             complete = copied;
         else {
             code = gs_copy_font((gs_font *)font, &font->FontMatrix, mem, &complete, -1);
             if (code < 0)
                 goto fail;
         }
         code = gs_copy_font_complete((gs_font *)font, complete);
         if (code < 0 && pbfont->do_subset == DO_SUBSET_NO) {
             char buf[gs_font_name_max + 1];
             int l = min(copied->font_name.size, sizeof(buf) - 1);
 
             memcpy(buf, copied->font_name.chars, l);
             buf[l] = 0;
             emprintf1(pdev->memory,
                       "Can't embed the complete font %s due to font error.\n",
                       buf);
+            gs_free_copied_font(copied);
+            copied = NULL;
             goto fail;
         }
         if (code < 0) {
             /* A font error happened, but it may be caused by a glyph,
                which is not used in the document. Continue with subsetting the font.
                If the failed glyph will be used in the document,
                another error will hgappen when the glyph is used.
              */
             gs_free_copied_font(complete);
             complete = copied;
         }
     } else
         complete = copied;
     pbfont->copied = (gs_font_base *)copied;
     pbfont->complete = (gs_font_base *)complete;
 
     /* replace the font cache of the copied fonts with our own font cache
      * this is required for PCL, see 'pdf_free_pdf_font_cache' in gdevpdf.c
      * for further details.
      */
     pdev->pdf_font_dir->global_glyph_code = font->dir->global_glyph_code;
 
     pbfont->copied->dir = pbfont->complete->dir = pdev->pdf_font_dir;
 
     if (pbfont->copied->FontType == ft_CID_encrypted) {
         gs_font_cid0 *copied0 = (gs_font_cid0 *)pbfont->copied;
         int i;
         for (i = 0; i < copied0->cidata.FDArray_size; ++i) {
             ((gs_font *)copied0->cidata.FDArray[i])->dir = pdev->pdf_font_dir;
         }
     }
 
     pbfont->is_standard = is_standard;
     if (pfname->size > 0) {
         font_name.data = pfname->chars;
         font_name.size = pfname->size;
         while (pdf_has_subset_prefix(font_name.data, font_name.size)) {
             /* Strip off an existing subset prefix. */
             font_name.data += SUBSET_PREFIX_SIZE;
             font_name.size -= SUBSET_PREFIX_SIZE;
         }
     } else {
         gs_snprintf(fnbuf, sizeof(fnbuf), ".F" PRI_INTPTR, (intptr_t)copied);
         font_name.data = (byte *)fnbuf;
         font_name.size = strlen(fnbuf);
     }
     pbfont->font_name.data =
         gs_alloc_string(mem, font_name.size, "pdf_base_font_alloc(font_name)");
     if (pbfont->font_name.data == 0)
         goto fail;
     memcpy(pbfont->font_name.data, font_name.data, font_name.size);
     pbfont->font_name.size = font_name.size;
     *ppbfont = pbfont;
     return 0;
  fail:
     pdf_base_font_free(pdev, pbfont);
     return code;
 }
 
 /*
  * Return a reference to the name of a base font.  This name is guaranteed
  * not to have a XXXXXX+ prefix.  The client may change the name at will,
  * but must not add a XXXXXX+ prefix.
  */
