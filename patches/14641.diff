commit 503748d8a80dd5db450c8c4dc109f2b97049d989
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Wed May 8 12:45:02 2019 -0700

    [name] Sanitize records for reals
    
    Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=14641

diff --git a/src/hb-ot-name-table.hh b/src/hb-ot-name-table.hh
index 4e4da74bc..1c8f54406 100644
--- a/src/hb-ot-name-table.hh
+++ b/src/hb-ot-name-table.hh
@@ -165,165 +165,165 @@ _hb_ot_name_entry_cmp (const void *pa, const void *pb)
 struct name
 {
   static constexpr hb_tag_t tableTag = HB_OT_TAG_name;
 
   unsigned int get_size () const
   { return min_size + count * nameRecordZ.item_size; }
 
   template <typename Iterator,
 	    hb_requires (hb_is_iterator_of (Iterator, const NameRecord))>
   bool serialize (hb_serialize_context_t *c,
 		  Iterator it,
 		  const void *src_string_pool)
   {
     TRACE_SERIALIZE (this);
 
     if (unlikely (!c->extend_min ((*this))))  return_trace (false);
 
     this->format = 0;
     this->count = it.len ();
 
     auto snap = c->snapshot ();
     this->nameRecordZ.serialize (c, this->count);
     this->stringOffset = c->length ();
     c->revert (snap);
 
     const void *dst_string_pool = &(this + this->stringOffset);
 
     + it
     | hb_apply ([&] (const NameRecord& _) { c->copy (_, src_string_pool, dst_string_pool); })
     ;
 
     if (unlikely (c->ran_out_of_room)) return_trace (false);
 
     assert (this->stringOffset == c->length ());
 
     return_trace (true);
   }
 
   bool subset (hb_subset_context_t *c) const
   {
     TRACE_SUBSET (this);
 
     name *name_prime = c->serializer->start_embed<name> ();
     if (unlikely (!name_prime)) return_trace (false);
 
     auto it =
     + nameRecordZ.as_array (count)
     | hb_filter (c->plan->name_ids, &NameRecord::nameID)
     ;
 
     name_prime->serialize (c->serializer, it, hb_addressof (this + stringOffset));
     return_trace (name_prime->count);
   }
 
   bool sanitize_records (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     const void *string_pool = (this+stringOffset).arrayZ;
-    /* TODO: Move to run-time?! */
     return_trace (nameRecordZ.sanitize (c, count, string_pool));
   }
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (c->check_struct (this) &&
 		  likely (format == 0 || format == 1) &&
 		  c->check_array (nameRecordZ.arrayZ, count) &&
-		  c->check_range (this, stringOffset));
+		  c->check_range (this, stringOffset) &&
+		  sanitize_records (c));
   }
 
   struct accelerator_t
   {
     void init (hb_face_t *face)
     {
       this->table = hb_sanitize_context_t().reference_table<name> (face);
       assert (this->table.get_length () >= this->table->stringOffset);
       this->pool = (const char *) (const void *) (this->table+this->table->stringOffset);
       this->pool_len = this->table.get_length () - this->table->stringOffset;
       const hb_array_t<const NameRecord> all_names (this->table->nameRecordZ.arrayZ,
 						    this->table->count);
 
       this->names.init ();
       this->names.alloc (all_names.length);
 
       for (unsigned int i = 0; i < all_names.length; i++)
       {
 	hb_ot_name_entry_t *entry = this->names.push ();
 
 	entry->name_id = all_names[i].nameID;
 	entry->language = all_names[i].language (face);
 	entry->entry_score =  all_names[i].score ();
 	entry->entry_index = i;
       }
 
       this->names.qsort (_hb_ot_name_entry_cmp);
       /* Walk and pick best only for each name_id,language pair,
        * while dropping unsupported encodings. */
       unsigned int j = 0;
       for (unsigned int i = 0; i < this->names.length; i++)
       {
         if (this->names[i].entry_score == UNSUPPORTED ||
 	    this->names[i].language == HB_LANGUAGE_INVALID)
 	  continue;
         if (i &&
 	    this->names[i - 1].name_id  == this->names[i].name_id &&
 	    this->names[i - 1].language == this->names[i].language)
 	  continue;
 	this->names[j++] = this->names[i];
       }
       this->names.resize (j);
     }
 
     void fini ()
     {
       this->names.fini ();
       this->table.destroy ();
     }
 
     int get_index (hb_ot_name_id_t   name_id,
 			  hb_language_t     language,
 			  unsigned int     *width=nullptr) const
     {
       const hb_ot_name_entry_t key = {name_id, {0}, language};
       const hb_ot_name_entry_t *entry = (const hb_ot_name_entry_t *)
 					hb_bsearch (&key,
 						    (const hb_ot_name_entry_t *) this->names,
 						    this->names.length,
 						    sizeof (key),
 						    _hb_ot_name_entry_cmp_key);
       if (!entry)
         return -1;
 
       if (width)
         *width = entry->entry_score < 10 ? 2 : 1;
 
       return entry->entry_index;
     }
 
     hb_bytes_t get_name (unsigned int idx) const
     {
       const hb_array_t<const NameRecord> all_names (table->nameRecordZ.arrayZ, table->count);
       const NameRecord &record = all_names[idx];
       const hb_bytes_t string_pool (pool, pool_len);
       return string_pool.sub_array (record.offset, record.length);
     }
 
     private:
     const char *pool;
     unsigned int pool_len;
     public:
     hb_blob_ptr_t<name> table;
     hb_vector_t<hb_ot_name_entry_t> names;
   };
 
   /* We only implement format 0 for now. */
   HBUINT16	format;			/* Format selector (=0/1). */
   HBUINT16	count;			/* Number of name records. */
   NNOffsetTo<UnsizedArrayOf<HBUINT8>>
 		stringOffset;		/* Offset to start of string storage (from start of table). */
   UnsizedArrayOf<NameRecord>
 		nameRecordZ;		/* The name records where count is the number of records. */
   public:
   DEFINE_SIZE_ARRAY (6, nameRecordZ);
 };
