commit 730ac94eda1a32c89c1534db8cb4255b818da9b0
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Tue Jul 31 17:27:51 2018 +0200

    RMF: allocate sufficiently large buffer. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=9660. Credit to OSS Fuzz

diff --git a/gdal/frmts/rmf/rmfdataset.cpp b/gdal/frmts/rmf/rmfdataset.cpp
index 89e1738631..a8ee6832d5 100644
--- a/gdal/frmts/rmf/rmfdataset.cpp
+++ b/gdal/frmts/rmf/rmfdataset.cpp
@@ -156,256 +156,257 @@ RMFRasterBand::~RMFRasterBand() {}
 CPLErr RMFRasterBand::IReadBlock( int nBlockXOff, int nBlockYOff,
                                   void * pImage )
 {
     RMFDataset  *poGDS = reinterpret_cast<RMFDataset *>( poDS );
 
     CPLAssert( poGDS != nullptr
                && nBlockXOff >= 0
                && nBlockYOff >= 0
                && pImage != nullptr );
 
     memset(pImage, 0, nBlockBytes);
 
     GUInt32 nRawXSize = nBlockXSize;
     GUInt32 nRawYSize = nBlockYSize;
 
     if( nLastTileWidth && (GUInt32)nBlockXOff == poGDS->nXTiles - 1 )
         nRawXSize = nLastTileWidth;
 
     if( nLastTileHeight && (GUInt32)nBlockYOff == poGDS->nYTiles - 1 )
         nRawYSize = nLastTileHeight;
 
-    GUInt32 nRawBytes = nRawXSize * nRawYSize * poGDS->sHeader.nBitDepth / 8;
+    GUInt32 nRawBytes = nRawXSize * nRawYSize * poGDS->nBands * poGDS->sHeader.nBitDepth / 8;
 
     //Direct read optimization
     if(poGDS->nBands == 1 && poGDS->sHeader.nBitDepth >= 8 &&
        nRawXSize == static_cast<GUInt32>(nBlockXSize) &&
        nRawYSize == static_cast<GUInt32>(nBlockYSize))
     {
         if(CE_None != poGDS->ReadTile(nBlockXOff, nBlockYOff,
                                       reinterpret_cast<GByte*>(pImage),
                                       nRawBytes, nRawXSize, nRawYSize))
         {
             CPLError(CE_Failure, CPLE_FileIO,
                      "Failed to read tile xOff %d yOff %d",
                      nBlockXOff, nBlockYOff);
             return CE_Failure;
         }
         return CE_None;
     }
 #ifdef DEBUG
     CPLDebug("RMF", "IReadBlock nBand %d, RawSize [%d, %d], Bits %d",
              nBand, nRawXSize, nRawYSize, (int)poGDS->sHeader.nBitDepth);
 #endif //DEBUG
     if(poGDS->pabyCurrentTile == nullptr ||
        poGDS->nCurrentTileXOff != nBlockXOff ||
        poGDS->nCurrentTileYOff != nBlockYOff ||
        poGDS->nCurrentTileBytes != nRawBytes)
     {
         if(poGDS->pabyCurrentTile == nullptr)
         {
             GUInt32 nMaxTileBytes = poGDS->sHeader.nTileWidth *
                                     poGDS->sHeader.nTileHeight *
+                                    poGDS->nBands *
                                     poGDS->sHeader.nBitDepth / 8;
             poGDS->pabyCurrentTile =
                reinterpret_cast<GByte*>(VSIMalloc(std::max(1U, nMaxTileBytes)));
             if(!poGDS->pabyCurrentTile)
             {
                 CPLError(CE_Failure, CPLE_OutOfMemory,
                          "Can't allocate tile block of size %lu.\n%s",
                          static_cast<unsigned long>(nMaxTileBytes),
                          VSIStrerror(errno));
                 poGDS->nCurrentTileBytes = 0;
                 return CE_Failure;
             }
         }
 
         poGDS->nCurrentTileXOff = nBlockXOff;
         poGDS->nCurrentTileYOff = nBlockYOff;
         poGDS->nCurrentTileBytes = nRawBytes;
 
         if(CE_None != poGDS->ReadTile(nBlockXOff, nBlockYOff,
                                       poGDS->pabyCurrentTile, nRawBytes,
                                       nRawXSize, nRawYSize))
         {
             CPLError(CE_Failure, CPLE_FileIO,
                      "Failed to read tile xOff %d yOff %d",
                      nBlockXOff, nBlockYOff);
             poGDS->nCurrentTileBytes = 0;
             return CE_Failure;
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*  Deinterleave pixels from input buffer.                              */
 /* -------------------------------------------------------------------- */
 
     if((poGDS->eRMFType == RMFT_RSW &&
         (poGDS->sHeader.nBitDepth == 8 ||
          poGDS->sHeader.nBitDepth == 24 ||
          poGDS->sHeader.nBitDepth == 32)) ||
        (poGDS->eRMFType == RMFT_MTW))
     {
         size_t  nTilePixelSize = poGDS->sHeader.nBitDepth / 8;
         size_t  nTileLineSize = nTilePixelSize * nRawXSize;
         size_t  nBlockLineSize = nDataSize * nBlockXSize;
         int     iDstBand = (poGDS->nBands - nBand);
         for(GUInt32 iLine = 0; iLine != nRawYSize; ++iLine)
         {
             GByte* pabySrc;
             GByte* pabyDst;
             pabySrc = poGDS->pabyCurrentTile +
                       iLine * nTileLineSize +
                       iDstBand * nDataSize;
             pabyDst = reinterpret_cast<GByte*>(pImage) +
                       iLine * nBlockLineSize;
             GDALCopyWords(pabySrc, eDataType, static_cast<int>(nTilePixelSize),
                           pabyDst, eDataType, static_cast<int>(nDataSize),
                           nRawXSize);
         }
         return CE_None;
     }
     else if(poGDS->eRMFType == RMFT_RSW &&
             poGDS->sHeader.nBitDepth == 16 &&
             poGDS->nBands == 3)
     {
         size_t  nTilePixelBits = poGDS->sHeader.nBitDepth;
         size_t  nTileLineSize = nTilePixelBits * nRawXSize / 8;
         size_t  nBlockLineSize = nDataSize * nBlockXSize;
 
         for(GUInt32 iLine = 0; iLine != nRawYSize; ++iLine)
         {
             GUInt16* pabySrc;
             GByte* pabyDst;
             pabySrc = reinterpret_cast<GUInt16*>(poGDS->pabyCurrentTile +
                                                  iLine * nTileLineSize);
             pabyDst = reinterpret_cast<GByte*>(pImage) +
                       iLine * nBlockLineSize;
 
             for( GUInt32 i = 0; i < nRawXSize; i++ )
             {
                 switch( nBand )
                 {
                     case 1:
                         pabyDst[i] =
                             static_cast<GByte>((pabySrc[i] & 0x7c00) >> 7);
                         break;
                     case 2:
                         pabyDst[i] =
                             static_cast<GByte>((pabySrc[i] & 0x03e0) >> 2);
                         break;
                     case 3:
                         pabyDst[i] =
                             static_cast<GByte>((pabySrc[i] & 0x1F) << 3);
                         break;
                     default:
                         break;
                 }
             }
         }
         return CE_None;
     }
     else if(poGDS->eRMFType == RMFT_RSW &&
             poGDS->nBands == 1 &&
             poGDS->sHeader.nBitDepth == 4)
     {
         if( poGDS->nCurrentTileBytes != (nBlockSize+1) / 2 )
         {
             CPLError(CE_Failure, CPLE_AppDefined,
                      "Tile has %d bytes, %d were expected",
                      poGDS->nCurrentTileBytes, (nBlockSize+1) / 2 );
             return CE_Failure;
         }
 
         size_t  nTilePixelBits = poGDS->sHeader.nBitDepth;
         size_t  nTileLineSize = nTilePixelBits * nRawXSize / 8;
         size_t  nBlockLineSize = nDataSize * nBlockXSize;
 
         for(GUInt32 iLine = 0; iLine != nRawYSize; ++iLine)
         {
             GByte* pabySrc;
             GByte* pabyDst;
             pabySrc = poGDS->pabyCurrentTile +
                       iLine * nTileLineSize;
             pabyDst = reinterpret_cast<GByte*>(pImage) +
                       iLine * nBlockLineSize;
             for( GUInt32 i = 0; i < nRawXSize; ++i )
             {
                 if( i & 0x01 )
                     pabyDst[i] = (*pabySrc++ & 0xF0) >> 4;
                 else
                     pabyDst[i] = *pabySrc & 0x0F;
             }
         }
         return CE_None;
     }
     else if(poGDS->eRMFType == RMFT_RSW &&
             poGDS->nBands == 1 &&
             poGDS->sHeader.nBitDepth == 1)
     {
         if( poGDS->nCurrentTileBytes != (nBlockSize+7) / 8 )
         {
             CPLError(CE_Failure, CPLE_AppDefined,
                      "Tile has %d bytes, %d were expected",
                      poGDS->nCurrentTileBytes, (nBlockSize+7) / 8 );
                 return CE_Failure;
         }
 
         size_t  nTilePixelBits = poGDS->sHeader.nBitDepth;
         size_t  nTileLineSize = nTilePixelBits * nRawXSize / 8;
         size_t  nBlockLineSize = nDataSize * nBlockXSize;
 
         for(GUInt32 iLine = 0; iLine != nRawYSize; ++iLine)
         {
             GByte* pabySrc;
             GByte* pabyDst;
             pabySrc = poGDS->pabyCurrentTile +
                       iLine * nTileLineSize;
             pabyDst = reinterpret_cast<GByte*>(pImage) +
                       iLine * nBlockLineSize;
 
             for(GUInt32 i = 0; i < nRawXSize; ++i)
             {
                 switch(i & 0x7)
                 {
                     case 0:
                         pabyDst[i] = (*pabySrc & 0x80) >> 7;
                         break;
                     case 1:
                         pabyDst[i] = (*pabySrc & 0x40) >> 6;
                         break;
                     case 2:
                         pabyDst[i] = (*pabySrc & 0x20) >> 5;
                         break;
                     case 3:
                         pabyDst[i] = (*pabySrc & 0x10) >> 4;
                         break;
                     case 4:
                         pabyDst[i] = (*pabySrc & 0x08) >> 3;
                         break;
                     case 5:
                         pabyDst[i] = (*pabySrc & 0x04) >> 2;
                         break;
                     case 6:
                         pabyDst[i] = (*pabySrc & 0x02) >> 1;
                         break;
                     case 7:
                         pabyDst[i] = *pabySrc++ & 0x01;
                         break;
                     default:
                         break;
                 }
             }
         }
         return CE_None;
     }
 
     CPLError(CE_Failure, CPLE_AppDefined,
              "Invalid block data type. BitDepth %d, nBands %d",
              static_cast<int>(poGDS->sHeader.nBitDepth), poGDS->nBands);
 
     return CE_Failure;
 }
 
 /************************************************************************/
 /*                            IWriteBlock()                             */
 /************************************************************************/
