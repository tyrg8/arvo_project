commit 83fccc68d7b400257cf4d098528e8b36022f2741
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Tue Sep 28 12:16:22 2021 +0200

    Consistently set bailed_out flag
    
    It was not set for some of the bailouts, resulting in timeouts
    in the function JIT fuzzer.
    
    Fixes oss-fuzz #39293.

diff --git a/sapi/fuzzer/fuzzer-execute-common.h b/sapi/fuzzer/fuzzer-execute-common.h
index cc1df1a12f..16834e3038 100644
--- a/sapi/fuzzer/fuzzer-execute-common.h
+++ b/sapi/fuzzer/fuzzer-execute-common.h
@@ -30,13 +30,17 @@ static bool bailed_out = false;
  * we can assume that we don't use global registers / hybrid VM. */
 typedef int (ZEND_FASTCALL *opcode_handler_t)(zend_execute_data *);
 
+static zend_always_inline void fuzzer_bailout(void) {
+	bailed_out = true;
+	zend_bailout();
+}
+
 static zend_always_inline void fuzzer_step(void) {
 	if (--steps_left == 0) {
 		/* Reset steps before bailing out, so code running after bailout (e.g. in
 		 * destructors) will get another MAX_STEPS, rather than UINT32_MAX steps. */
 		steps_left = MAX_STEPS;
-		bailed_out = true;
-		zend_bailout();
+		fuzzer_bailout();
 	}
 }
 
@@ -61,8 +65,8 @@ static zend_op_array *(*orig_compile_string)(zend_string *source_string, const c
 static zend_op_array *fuzzer_compile_string(zend_string *str, const char *filename) {
 	if (ZSTR_LEN(str) > MAX_SIZE) {
 		/* Avoid compiling huge inputs via eval(). */
-		zend_bailout();
+		fuzzer_bailout();
 	}
 
 	return orig_compile_string(str, filename);
 }
@@ -72,15 +76,15 @@ static void (*orig_execute_internal)(zend_execute_data *execute_data, zval *retu
 static void fuzzer_execute_internal(zend_execute_data *execute_data, zval *return_value) {
 	fuzzer_step();
 
 	uint32_t num_args = ZEND_CALL_NUM_ARGS(execute_data);
 	for (uint32_t i = 0; i < num_args; i++) {
 		/* Some internal functions like preg_replace() may be slow on large inputs.
 		 * Limit the maximum size of string inputs. */
 		zval *arg = ZEND_CALL_VAR_NUM(execute_data, i);
 		if (Z_TYPE_P(arg) == IS_STRING && Z_STRLEN_P(arg) > MAX_SIZE) {
-			zend_bailout();
+			fuzzer_bailout();
 		}
 	}
 
 	orig_execute_internal(execute_data, return_value);
 }
