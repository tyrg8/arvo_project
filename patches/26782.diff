commit dbb0f62cdcc62858b705b64e75f87787cdf82004
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Wed Dec 2 11:38:14 2020 +0100

    Bug 703219: Handle short skips in the subarea stream.
    
    The subarea stream will skip over a number of bytes before it
    starts returning bytes from the underlying stream. Previously
    when the underlying stream did not successfully skip over the
    desired number of bytes subarea_next would return 0, which is not
    related to the value of the first byte of the underlying stream.
    
    The subarea stream has now been changed so that it, instead of
    returning 0, will retry skipping the remaining number of bytes.
    This repeats until all bytes have been skipped, or the underlying
    stream failed to skip over any bytes at all. The latter case is
    treated as if the underlying stream returned EOF, hence the
    subarea stream itself also returns EOF.

diff --git a/source/fitz/image.c b/source/fitz/image.c
index af9bdbd73..a0bd6c12c 100644
--- a/source/fitz/image.c
+++ b/source/fitz/image.c
@@ -341,36 +341,37 @@ static int
 subarea_next(fz_context *ctx, fz_stream *stm, size_t len)
 {
 	subarea_state *state = stm->state;
 	size_t n;
 
 	stm->wp = stm->rp = NULL;
-	if (state->nskip > 0)
+
+	while (state->nskip > 0)
 	{
 		n = fz_skip(ctx, state->src, state->nskip);
+		if (n == 0)
+			return EOF;
 		state->nskip -= n;
-		if (state->nskip > 0)
-			return 0;
 	}
 	if (state->lines == 0)
 		return EOF;
 	n = fz_available(ctx, state->src, state->nread);
 	if (n > state->nread)
 		n = state->nread;
 	if (n == 0)
 		return EOF;
 	stm->rp = state->src->rp;
 	stm->wp = stm->rp + n;
 	stm->pos += n;
 	state->src->rp = stm->wp;
 	state->nread -= n;
 	if (state->nread == 0)
 	{
 		state->lines--;
 		if (state->lines == 0)
 			state->nskip = state->r_skip + state->b_skip;
 		else
 			state->nskip = state->l_skip + state->r_skip;
 		state->nread = state->stride;
 	}
 	return *stm->rp++;
 }
