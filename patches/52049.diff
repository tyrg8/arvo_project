commit 94ab139266a2d2d39f7254644f69fb699559e8e2
Author: Willy Tarreau <w@1wt.eu>
Date:   Mon Oct 3 08:27:55 2022 +0200

    BUG/MEDIUM: config: count line arguments without dereferencing the output
    
    Previous commit 8a6767d26 ("BUG/MINOR: config: don't count trailing spaces
    as empty arg (v2)") was still not enough. As reported by ClusterFuzz in
    issue 52049 (https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=52049),
    there remains a case where for the sake of reporting the correct argument
    count, the function may produce virtual args that span beyond the end of
    the output buffer if that one is too short. That's what's happening with
    a config file of one empty line followed by a large number of args.
    
    This means that what args[] points to cannot be relied on and that a
    different approach is needed. Since no output is produced for spaces and
    comments, we know that args[arg] continues to point to out+outpos as long
    as only comments or spaces are found, which is what we're interested in.
    
    As such it's safe to check the last arg's pointer against the one before
    the trailing zero was emitted, in order to decide to count one final arg.
    
    No backport is needed, unless the commit above is backported.

diff --git a/src/tools.c b/src/tools.c
index 3796c98b1..5f44a2f0c 100644
--- a/src/tools.c
+++ b/src/tools.c
@@ -5459,334 +5459,335 @@ void ha_generate_uuid(struct buffer *output)
 /* Parse <in>, copy it into <out> split into isolated words whose pointers
  * are put in <args>. If more than <outlen> bytes have to be emitted, the
  * extraneous ones are not emitted but <outlen> is updated so that the caller
  * knows how much to realloc. Similarly, <args> are not updated beyond <nbargs>
  * but the returned <nbargs> indicates how many were found. All trailing args
  * up to <nbargs> point to the trailing zero, and as long as <nbargs> is > 0,
  * it is guaranteed that at least one arg will point to the zero. It is safe
  * to call it with a NULL <args> if <nbargs> is 0.
  *
  * <out> may overlap with <in> provided that it never goes further, in which
  * case the parser will accept to perform in-place parsing and unquoting/
  * unescaping but only if environment variables do not lead to expansion that
  * causes overlapping, otherwise the input string being destroyed, the error
  * will not be recoverable. Note that even during out-of-place <in> will
  * experience temporary modifications in-place for variable resolution and must
  * be writable, and will also receive zeroes to delimit words when using
  * in-place copy. Parsing options <opts> taken from PARSE_OPT_*. Return value
  * is zero on success otherwise a bitwise-or of PARSE_ERR_*. Upon error, the
  * starting point of the first invalid character sequence or unmatched
  * quote/brace is reported in <errptr> if not NULL. When using in-place parsing
  * error reporting might be difficult since zeroes will have been inserted into
  * the string. One solution for the caller may consist in replacing all args
  * delimiters with spaces in this case.
  */
 uint32_t parse_line(char *in, char *out, size_t *outlen, char **args, int *nbargs, uint32_t opts, const char **errptr)
 {
 	char *quote = NULL;
 	char *brace = NULL;
 	char *word_expand = NULL;
 	unsigned char hex1, hex2;
 	size_t outmax = *outlen;
 	int argsmax = *nbargs - 1;
 	size_t outpos = 0;
 	int squote = 0;
 	int dquote = 0;
 	int arg = 0;
 	uint32_t err = 0;
 
 	*nbargs = 0;
 	*outlen = 0;
 
 	/* argsmax may be -1 here, protecting args[] from any write */
 	if (arg < argsmax)
 		args[arg] = out;
 
 	while (1) {
 		if (*in >= '-' && *in != '\\') {
 			/* speedup: directly send all regular chars starting
 			 * with '-', '.', '/', alnum etc...
 			 */
 			EMIT_CHAR(*in++);
 			continue;
 		}
 		else if (*in == '\0' || *in == '\n' || *in == '\r') {
 			/* end of line */
 			break;
 		}
 		else if (*in == '#' && (opts & PARSE_OPT_SHARP) && !squote && !dquote) {
 			/* comment */
 			break;
 		}
 		else if (*in == '"' && !squote && (opts & PARSE_OPT_DQUOTE)) {  /* double quote outside single quotes */
 			if (dquote) {
 				dquote = 0;
 				quote = NULL;
 			}
 			else {
 				dquote = 1;
 				quote = in;
 			}
 			in++;
 			continue;
 		}
 		else if (*in == '\'' && !dquote && (opts & PARSE_OPT_SQUOTE)) { /* single quote outside double quotes */
 			if (squote) {
 				squote = 0;
 				quote = NULL;
 			}
 			else {
 				squote = 1;
 				quote = in;
 			}
 			in++;
 			continue;
 		}
 		else if (*in == '\\' && !squote && (opts & PARSE_OPT_BKSLASH)) {
 			/* first, we'll replace \\, \<space>, \#, \r, \n, \t, \xXX with their
 			 * C equivalent value but only when they have a special meaning and within
 			 * double quotes for some of them. Other combinations left unchanged (eg: \1).
 			 */
 			char tosend = *in;
 
 			switch (in[1]) {
 			case ' ':
 			case '\\':
 				tosend = in[1];
 				in++;
 				break;
 
 			case 't':
 				tosend = '\t';
 				in++;
 				break;
 
 			case 'n':
 				tosend = '\n';
 				in++;
 				break;
 
 			case 'r':
 				tosend = '\r';
 				in++;
 				break;
 
 			case '#':
 				/* escaping of "#" only if comments are supported */
 				if (opts & PARSE_OPT_SHARP)
 					in++;
 				tosend = *in;
 				break;
 
 			case '\'':
 				/* escaping of "'" only outside single quotes and only if single quotes are supported */
 				if (opts & PARSE_OPT_SQUOTE && !squote)
 					in++;
 				tosend = *in;
 				break;
 
 			case '"':
 				/* escaping of '"' only outside single quotes and only if double quotes are supported */
 				if (opts & PARSE_OPT_DQUOTE && !squote)
 					in++;
 				tosend = *in;
 				break;
 
 			case '$':
 				/* escaping of '$' only inside double quotes and only if env supported */
 				if (opts & PARSE_OPT_ENV && dquote)
 					in++;
 				tosend = *in;
 				break;
 
 			case 'x':
 				if (!ishex(in[2]) || !ishex(in[3])) {
 					/* invalid or incomplete hex sequence */
 					err |= PARSE_ERR_HEX;
 					if (errptr)
 						*errptr = in;
 					goto leave;
 				}
 				hex1 = toupper((unsigned char)in[2]) - '0';
 				hex2 = toupper((unsigned char)in[3]) - '0';
 				if (hex1 > 9) hex1 -= 'A' - '9' - 1;
 				if (hex2 > 9) hex2 -= 'A' - '9' - 1;
 				tosend = (hex1 << 4) + hex2;
 				in += 3;
 				break;
 
 			default:
 				/* other combinations are not escape sequences */
 				break;
 			}
 
 			in++;
 			EMIT_CHAR(tosend);
 		}
 		else if (isspace((unsigned char)*in) && !squote && !dquote) {
 			/* a non-escaped space is an argument separator */
 			while (isspace((unsigned char)*in))
 				in++;
 			EMIT_CHAR(0);
 			arg++;
 			if (arg < argsmax)
 				args[arg] = out + outpos;
 			else
 				err |= PARSE_ERR_TOOMANY;
 		}
 		else if (*in == '$' && (opts & PARSE_OPT_ENV) && (dquote || !(opts & PARSE_OPT_DQUOTE))) {
 			/* environment variables are evaluated anywhere, or only
 			 * inside double quotes if they are supported.
 			 */
 			char *var_name;
 			char save_char;
 			const char *value;
 
 			in++;
 
 			if (*in == '{')
 				brace = in++;
 
 			if (!isalpha((unsigned char)*in) && *in != '_' && *in != '.') {
 				/* unacceptable character in variable name */
 				err |= PARSE_ERR_VARNAME;
 				if (errptr)
 					*errptr = in;
 				goto leave;
 			}
 
 			var_name = in;
 			if (*in == '.')
 				in++;
 			while (isalnum((unsigned char)*in) || *in == '_')
 				in++;
 
 			save_char = *in;
 			*in = '\0';
 			if (unlikely(*var_name == '.')) {
 				/* internal pseudo-variables */
 				if (strcmp(var_name, ".LINE") == 0)
 					value = ultoa(global.cfg_curr_line);
 				else if (strcmp(var_name, ".FILE") == 0)
 					value = global.cfg_curr_file;
 				else if (strcmp(var_name, ".SECTION") == 0)
 					value = global.cfg_curr_section;
 				else {
 					/* unsupported internal variable name */
 					err |= PARSE_ERR_VARNAME;
 					if (errptr)
 						*errptr = var_name;
 					goto leave;
 				}
 			} else {
 				value = getenv(var_name);
 			}
 			*in = save_char;
 
 			/* support for '[*]' sequence to force word expansion,
 			 * only available inside braces */
 			if (*in == '[' && brace && (opts & PARSE_OPT_WORD_EXPAND)) {
 				word_expand = in++;
 
 				if (*in++ != '*' || *in++ != ']') {
 					err |= PARSE_ERR_WRONG_EXPAND;
 					if (errptr)
 						*errptr = word_expand;
 					goto leave;
 				}
 			}
 
 			if (brace) {
 				if (*in == '-') {
 					/* default value starts just after the '-' */
 					if (!value)
 						value = in + 1;
 
 					while (*in && *in != '}')
 						in++;
 					if (!*in)
 						goto no_brace;
 					*in = 0; // terminate the default value
 				}
 				else if (*in != '}') {
 				no_brace:
 					/* unmatched brace */
 					err |= PARSE_ERR_BRACE;
 					if (errptr)
 						*errptr = brace;
 					goto leave;
 				}
 
 				/* brace found, skip it */
 				in++;
 				brace = NULL;
 			}
 
 			if (value) {
 				while (*value) {
 					/* expand as individual parameters on a space character */
 					if (word_expand && isspace((unsigned char)*value)) {
 						EMIT_CHAR(0);
 						++arg;
 						if (arg < argsmax)
 							args[arg] = out + outpos;
 						else
 							err |= PARSE_ERR_TOOMANY;
 
 						/* skip consecutive spaces */
 						while (isspace((unsigned char)*++value))
 							;
 					} else {
 						EMIT_CHAR(*value++);
 					}
 				}
 			}
 			word_expand = NULL;
 		}
 		else {
 			/* any other regular char */
 			EMIT_CHAR(*in++);
 		}
 	}
 
 	/* end of output string */
 	EMIT_CHAR(0);
 
-	/* don't add empty arg after trailing spaces. Note that args[arg]
-	 * may contain some distances relative to NULL if <out> was NULL,
-	 * so we test <out> instead of args[arg].
+	/* Don't add an empty arg after trailing spaces. Note that args[arg]
+	 * may contain some distances relative to NULL if <out> was NULL, or
+	 * pointers beyond the end of <out> in case <outlen> is too short, thus
+	 * we must not dereference it.
 	 */
-	if (arg < argsmax && out && *(args[arg]))
+	if (arg < argsmax && args[arg] != out + outpos - 1)
 		arg++;
 
 	if (quote) {
 		/* unmatched quote */
 		err |= PARSE_ERR_QUOTE;
 		if (errptr)
 			*errptr = quote;
 		goto leave;
 	}
  leave:
 	*nbargs = arg;
 	*outlen = outpos;
 
 	/* empty all trailing args by making them point to the trailing zero,
 	 * at least the last one in any case.
 	 */
 	if (arg > argsmax)
 		arg = argsmax;
 
 	while (arg >= 0 && arg <= argsmax)
 		args[arg++] = out + outpos - 1;
 
 	return err;
 }
 #undef EMIT_CHAR
 
 /* This is used to sanitize an input line that's about to be used for error reporting.
  * It will adjust <line> to print approximately <width> chars around <pos>, trying to
  * preserve the beginning, with leading or trailing "..." when the line is truncated.
  * If non-printable chars are present in the output. It returns the new offset <pos>
  * in the modified line. Non-printable characters are replaced with '?'. <width> must
  * be at least 6 to support two "..." otherwise the result is undefined. The line
  * itself must have at least 7 chars allocated for the same reason.
  */
