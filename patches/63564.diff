commit 60b65345813bfd0c07f9646e4924ec18e15aa8a9
Author: Shashank Pathmudi <shashank.pathmudi@ittiam.com>
Date:   Thu Oct 26 09:40:36 2023 +0530

    Fix for index-out-of-bounds in ixheaacd_smooth_m1m2
    
    These changes handle the index-out-of-bounds runtime error reported
    when the value of arbitrary downmix residual bands is greater than or equal
    to the number of parameter bands.
    
    Bug: ossFuzz:63564
    Test: poc in bug

diff --git a/decoder/ixheaacd_config.h b/decoder/ixheaacd_config.h
index 5c7bd59..aa3a871 100644
--- a/decoder/ixheaacd_config.h
+++ b/decoder/ixheaacd_config.h
@@ -93,151 +93,151 @@ typedef struct {
 typedef struct {
   UINT32 bs_freq_res;
   UINT32 bs_fixed_gain_dmx;
   UINT32 bs_temp_shape_config;
   UINT32 bs_decorr_config;
   UINT32 bs_high_rate_mode;
   UINT32 bs_phase_coding;
   UINT32 bs_ott_bands_phase_present;
   UINT32 bs_ott_bands_phase;
   UINT32 bs_residual_bands;
   UINT32 bs_pseudo_lr;
   UINT32 bs_env_quant_mode;
   UINT32 ldmps_present_flag;
 
   UINT32 bs_sampling_freq_index;
   UINT32 bs_fampling_frequency;
   UINT32 bs_frame_length;
   UINT32 bs_tree_config;
   UINT32 bs_quant_mode;
   UINT32 bs_one_icc;
   UINT32 bs_arbitrary_downmix;
   UINT32 bs_residual_coding;
   UINT32 bs_fixed_gain_sur;
   UINT32 bs_fixed_gain_LFE;
   UINT32 bs_matrix_mode;
   UINT32 bs_3D_audio_mode;
   UINT32 bs_3D_audio_HRTF_set;
   UINT32 bs_HRTF_freq_res;
   UINT32 HRTF_num_band;
   UINT32 HRTF_num_phase;  // new
   UINT32 bs_HRTF_num_chan;
   UINT32 bs_HRTF_asymmetric;
   UINT32 bs_HRTF_level_left[MAX_OUTPUT_CHANNELS][MAX_PARAMETER_BANDS];
   UINT32 bs_HRTF_level_right[MAX_OUTPUT_CHANNELS][MAX_PARAMETER_BANDS];
   UINT32 bs_HRTF_phase[MAX_OUTPUT_CHANNELS];
   UINT32 bs_HRTF_phase_LR[MAX_OUTPUT_CHANNELS][MAX_PARAMETER_BANDS];
   UINT32 bs_HRTF_icc[MAX_OUTPUT_CHANNELS];
   UINT32 bs_HRTF_icc_LR[MAX_OUTPUT_CHANNELS][MAX_PARAMETER_BANDS];
   UINT32 bs_ott_bands[MAX_NUM_OTT];
   UINT32 bs_ttt_dual_mode[MAX_NUM_TTT];
   UINT32 bs_ttt_mode_low[MAX_NUM_TTT];
   UINT32 bs_ttt_mode_high[MAX_NUM_TTT];
   UINT32 bs_ttt_bands_low[MAX_NUM_TTT];
   UINT32 bs_ttt_bands_high[MAX_NUM_TTT];
 
   UINT32 bs_sac_ext_type[MAX_NUM_EXT_TYPES];
   UINT32 sac_ext_cnt;
 
   UINT32 bs_residual_present[MAX_RESIDUAL_CHANNELS];
   UINT32 bs_residual_sampling_freq_index;
   UINT32 bs_residual_frames_per_spatial_frame;
 
   UINT32 bs_residual_bands_ld_mps[MAX_RESIDUAL_CHANNELS];
 
   UINT32 bs_arbitrary_downmix_residual_sampling_freq_index;
   UINT32 bs_arbitrary_downmix_residual_frames_per_spatial_frame;
-  UINT32 bs_arbitrary_downmix_residual_bands;
+  WORD32 bs_arbitrary_downmix_residual_bands;
 
   UINT32 num_out_chan_AT;
   UINT32 num_ott_boxes_AT;
   UINT32 bs_output_channel_pos_AT[MAX_OUTPUT_CHANNELS_AT];
   UINT32 bs_ott_box_present_AT[MAX_OUTPUT_CHANNELS][MAX_ARBITRARY_TREE_INDEX];
   UINT32 bs_ott_default_cld_AT[MAX_OUTPUT_CHANNELS * MAX_ARBITRARY_TREE_INDEX];
   UINT32 bs_ott_mode_lfe_AT[MAX_OUTPUT_CHANNELS * MAX_ARBITRARY_TREE_INDEX];
   UINT32 bs_ott_bands_AT[MAX_OUTPUT_CHANNELS * MAX_ARBITRARY_TREE_INDEX];
 
   WORD32 num_ott_boxes;
   WORD32 num_ttt_boxes;
   WORD32 num_input_channels;
   WORD32 num_output_channels;
   WORD32 ott_mode_lfe[MAX_NUM_OTT];  // new
   WORD32 no_ldsbr_present;
 } ia_usac_dec_mps_config_struct;
 
 #define BS_OUTPUT_CHANNEL_POS_NA -1   /* n/a                                */
 #define BS_OUTPUT_CHANNEL_POS_L 0     /* Left Front                          */
 #define BS_OUTPUT_CHANNEL_POS_R 1     /* Right Front                         */
 #define BS_OUTPUT_CHANNEL_POS_C 2     /* Center Front                        */
 #define BS_OUTPUT_CHANNEL_POS_LFE 3   /* Low Frequency Enhancement           */
 #define BS_OUTPUT_CHANNEL_POS_LS 4    /* Left Surround                       */
 #define BS_OUTPUT_CHANNEL_POS_RS 5    /* Right Surround                      */
 #define BS_OUTPUT_CHANNEL_POS_LC 6    /* Left Front Center                   */
 #define BS_OUTPUT_CHANNEL_POS_RC 7    /* Right Front Center                  */
 #define BS_OUTPUT_CHANNEL_POS_LSR 8   /* Rear Surround Left                  */
 #define BS_OUTPUT_CHANNEL_POS_RSR 9   /* Rear Surround Right                 */
 #define BS_OUTPUT_CHANNEL_POS_CS 10   /* Rear Center                         */
 #define BS_OUTPUT_CHANNEL_POS_LSD 11  /* Left Surround Direct                */
 #define BS_OUTPUT_CHANNEL_POS_RSD 12  /* Right Surround Direct               */
 #define BS_OUTPUT_CHANNEL_POS_LSS 13  /* Left Side Surround                  */
 #define BS_OUTPUT_CHANNEL_POS_RSS 14  /* Right Side Surround                 */
 #define BS_OUTPUT_CHANNEL_POS_LW 15   /* Left Wide Front                     */
 #define BS_OUTPUT_CHANNEL_POS_RW 16   /* Right Wide Front                    */
 #define BS_OUTPUT_CHANNEL_POS_LV 17   /* Left Front Vertical Height          */
 #define BS_OUTPUT_CHANNEL_POS_RV 18   /* Right Front Vertical Height         */
 #define BS_OUTPUT_CHANNEL_POS_CV 19   /* Center Front Vertical Height        */
 #define BS_OUTPUT_CHANNEL_POS_LVR 20  /* Left Surround Vertical Height Rear  */
 #define BS_OUTPUT_CHANNEL_POS_RVR 21  /* Right Surround Vertical Height Rear */
 #define BS_OUTPUT_CHANNEL_POS_CVR 22  /* Center Vertical Height Rear         */
 #define BS_OUTPUT_CHANNEL_POS_LVSS 23 /* Left Vertical Height Side Surround */
 #define BS_OUTPUT_CHANNEL_POS_RVSS                                             \
   24                                /* Right Vertical Height Side Surround \ \ \
                                        */
 #define BS_OUTPUT_CHANNEL_POS_TS 25 /* Top Center Surround                 */
 #define BS_OUTPUT_CHANNEL_POS_LFE2 26 /* Low Frequency Enhancement 2 */
 #define BS_OUTPUT_CHANNEL_POS_LB 27   /* Left Front Vertical Bottom          */
 #define BS_OUTPUT_CHANNEL_POS_RB 28   /* Right Front Vertical Bottom         */
 #define BS_OUTPUT_CHANNEL_POS_CB 29   /* Center Front Vertical Bottom        */
 #define BS_OUTPUT_CHANNEL_POS_LVS 30  /* Left Vertical Height Surround       */
 #define BS_OUTPUT_CHANNEL_POS_RVS 31  /* Right Vertical Height Surround      */
 
 #define BS_MAX_NUM_OUT_CHANNELS (255)
 
 #define EXT_COUNT_MAX (2)
 #define MAX_CHANNEL_COUNT (128)
 #define SEQUENCE_COUNT_MAX (24)
 #define PARAM_DRC_TYPE_FF_NODE_COUNT_MAX (9)
 #define PARAM_DRC_INSTRUCTIONS_COUNT_MAX (8)
 #define DOWNMIX_ID_COUNT_MAX (8)
 #define DRC_SET_ID_COUNT_MAX (16)
 #define EQ_SET_ID_COUNT_MAX (8)
 #define LOUD_EQ_GAIN_SEQUENCE_COUNT_MAX (4)
 #define LOUD_EQ_INSTRUCTIONS_COUNT_MAX (8)
 #define FILTER_ELEMENT_COUNT_MAX (16)
 #define FILTER_BLOCK_COUNT_MAX (16)
 #define REAL_ZERO_RADIUS_ONE_COUNT_MAX (14)
 #define REAL_ZERO_COUNT_MAX (64)
 #define COMPLEX_ZERO_COUNT_MAX (64)
 #define REAL_POLE_COUNT_MAX (16)
 #define COMPLEX_POLE_COUNT_MAX (16)
 #define FIR_ORDER_MAX (128)
 #define EQ_NODE_COUNT_MAX (33)
 #define UNIQUE_SUBBAND_GAIN_COUNT_MAX (16)
 #define EQ_SUBBAND_GAIN_COUNT_MAX (135)
 #define EQ_CHANNEL_GROUP_COUNT_MAX (4)
 #define EQ_FILTER_BLOCK_COUNT_MAX (4)
 #define EQ_INSTRUCTIONS_COUNT_MAX (8)
 #define DRC_COEFF_COUNT_MAX (8)
 #define DOWNMIX_INSTRUCTION_COUNT_MAX (16)
 #define DRC_INSTRUCTIONS_COUNT_MAX (DOWNMIX_INSTRUCTION_COUNT_MAX + 20)
 #define BAND_COUNT_MAX (8)
 
 #define N_DELTA_TIME_CODE_TABLE_ENTRIES_MAX (512 + 14)
 #define GAIN_SET_COUNT_MAX SEQUENCE_COUNT_MAX
 #define SPLIT_CHARACTERISTIC_NODE_COUNT_MAX (4)
 #define SPLIT_CHARACTERISTIC_COUNT_MAX (8)
 #define SHAPE_FILTER_COUNT_MAX (8)
 #define CHANNEL_GROUP_COUNT_MAX SEQUENCE_COUNT_MAX
 #define DRC_BAND_COUNT_MAX BAND_COUNT_MAX
 #define SPEAKER_POS_COUNT_MAX (128)
 #define DOWNMIX_COEFF_COUNT_MAX (32 * 32)
 #define MAX_AUDIO_PREROLLS 3
diff --git a/decoder/ixheaacd_ld_mps_config.c b/decoder/ixheaacd_ld_mps_config.c
index 850b128..162b876 100644
--- a/decoder/ixheaacd_ld_mps_config.c
+++ b/decoder/ixheaacd_ld_mps_config.c
@@ -51,137 +51,141 @@ static ia_ld_mps_dec_tree_properties_struct ixheaacd_tree_property_table[] = {
 static IA_ERRORCODE ixheaacd_ld_spatial_extension_config(
     ia_bit_buf_struct *it_bit_buff, ia_usac_dec_mps_config_struct *config,
     WORD32 bits_available) {
   WORD32 j, ch, idx, tmp, tmp_open, sac_ext_len, bits_read, n_fill_bits;
   UWORD32 i;
   WORD32 ba = bits_available;
 
   config->sac_ext_cnt = 0;
 
   tmp = it_bit_buff->cnt_bits;
 
   while (ba >= 8) {
     if (config->sac_ext_cnt >= MAX_NUM_EXT_TYPES) return IA_FATAL_ERROR;
 
     config->bs_sac_ext_type[config->sac_ext_cnt] =
         ixheaacd_read_bits_buf(it_bit_buff, 4);
     ba -= 4;
 
     sac_ext_len = ixheaacd_read_bits_buf(it_bit_buff, 4);
     ba -= 4;
 
     if ((ba >= 6) && (sac_ext_len > 0)) {
       if (sac_ext_len == 15) {
         sac_ext_len += ixheaacd_read_bits_buf(it_bit_buff, 8);
         ba -= 8;
         if (sac_ext_len == 15 + 255) {
           sac_ext_len += ixheaacd_read_bits_buf(it_bit_buff, 16);
           ba -= 16;
         }
       }
 
       switch (config->bs_sac_ext_type[config->sac_ext_cnt]) {
         case 0:
           config->bs_residual_coding = 1;
 
           config->bs_residual_sampling_freq_index =
               ixheaacd_read_bits_buf(it_bit_buff, 4);
           if (config->bs_residual_sampling_freq_index > MAX_RES_SAMP_FREQ_IDX) {
             return IA_FATAL_ERROR;
           }
           config->bs_residual_frames_per_spatial_frame =
               ixheaacd_read_bits_buf(it_bit_buff, 2);
 
           if ((config->num_ott_boxes + config->num_ttt_boxes) >
               MAX_RESIDUAL_CHANNELS)
             return IA_FATAL_ERROR;
           for (j = 0; j < config->num_ott_boxes + config->num_ttt_boxes; j++) {
             config->bs_residual_present[j] =
                 ixheaacd_read_bits_buf(it_bit_buff, 1);
             if (config->bs_residual_present[j]) {
               config->bs_residual_bands_ld_mps[j] =
                   ixheaacd_read_bits_buf(it_bit_buff, 5);
               if (config->bs_residual_bands_ld_mps[j] > MAX_PARAMETER_BANDS)
               {
                 return IA_FATAL_ERROR;
               }
             }
           }
           break;
 
         case 1:
           config->bs_arbitrary_downmix = 2;
 
           config->bs_arbitrary_downmix_residual_sampling_freq_index =
               ixheaacd_read_bits_buf(it_bit_buff, 4);
           if (config->bs_arbitrary_downmix_residual_sampling_freq_index > MAX_RES_SAMP_FREQ_IDX) {
             return IA_FATAL_ERROR;
           }
           config->bs_arbitrary_downmix_residual_frames_per_spatial_frame =
               ixheaacd_read_bits_buf(it_bit_buff, 2);
           config->bs_arbitrary_downmix_residual_bands =
               ixheaacd_read_bits_buf(it_bit_buff, 5);
+          if (config->bs_arbitrary_downmix_residual_bands >=
+              ixheaacd_freq_res_table[config->bs_freq_res]) {
+            return IA_FATAL_ERROR;
+          }
 
           break;
 
         case 2:
           config->num_out_chan_AT = 0;
           config->num_ott_boxes_AT = 0;
           if (config->num_output_channels > MAX_OUTPUT_CHANNELS)
             return IA_FATAL_ERROR;
           for (ch = 0; ch < config->num_output_channels; ch++) {
             tmp_open = 1;
             idx = 0;
             while ((tmp_open > 0) && (idx < MAX_ARBITRARY_TREE_INDEX)) {
               config->bs_ott_box_present_AT[ch][idx] =
                   ixheaacd_read_bits_buf(it_bit_buff, 1);
               if (config->bs_ott_box_present_AT[ch][idx]) {
                 config->num_ott_boxes_AT++;
                 tmp_open++;
               } else {
                 config->num_out_chan_AT++;
                 tmp_open--;
               }
               idx++;
             }
           }
 
           for (i = 0; i < config->num_ott_boxes_AT; i++) {
             config->bs_ott_default_cld_AT[i] =
                 ixheaacd_read_bits_buf(it_bit_buff, 1);
             config->bs_ott_mode_lfe_AT[i] =
                 ixheaacd_read_bits_buf(it_bit_buff, 1);
             if (config->bs_ott_mode_lfe_AT[i]) {
               config->bs_ott_bands_AT[i] =
                   ixheaacd_read_bits_buf(it_bit_buff, 5);
             } else {
               config->bs_ott_bands_AT[i] = ixheaacd_freq_res_table[config->bs_freq_res];
             }
           }
 
           for (i = 0; i < config->num_out_chan_AT; i++) {
             config->bs_output_channel_pos_AT[i] =
                 ixheaacd_read_bits_buf(it_bit_buff, 5);
           }
 
           break;
 
         default:;
       }
     }
 
     bits_read = tmp - it_bit_buff->cnt_bits;
     n_fill_bits = 8 * sac_ext_len - bits_read;
 
     while (n_fill_bits > 7) {
       ixheaacd_read_bits_buf(it_bit_buff, 8);
       n_fill_bits -= 8;
     }
     if (n_fill_bits > 0) {
       ixheaacd_read_bits_buf(it_bit_buff, n_fill_bits);
     }
 
     ba -= 8 * sac_ext_len;
     config->sac_ext_cnt++;
   }
   return IA_NO_ERROR;
 }
diff --git a/decoder/ixheaacd_mps_bitdec.c b/decoder/ixheaacd_mps_bitdec.c
index 4d9e1ce..d8a10e4 100644
--- a/decoder/ixheaacd_mps_bitdec.c
+++ b/decoder/ixheaacd_mps_bitdec.c
@@ -47,6 +47,8 @@
 #include "ixheaacd_mps_mdct_2_qmf.h"
 #include "ixheaac_sbr_const.h"
 
+static const WORD32 ixheaacd_freq_res_table[] = {0, 28, 20, 14, 10, 7, 5, 4};
+
 static WORD32 ixheaacd_bound_check(WORD32 var, WORD32 lower_bound, WORD32 upper_bound) {
   var = min(var, upper_bound);
   var = max(var, lower_bound);
@@ -74,129 +76,133 @@ static VOID ixheaacd_mps_check_index_bounds(
 static IA_ERRORCODE ixheaacd_parse_extension_config(
     ia_mps_spatial_bs_config_struct *config, WORD32 num_ott_boxes, WORD32 num_ttt_boxes,
     WORD32 num_out_chan, WORD32 bits_available, ia_bit_buf_struct *it_bit_buff,
     ia_mps_dec_bitdec_tables_struct *ixheaacd_mps_dec_bitdec_tables) {
   WORD32 i, ch, idx, tmp, tmp_open, sac_ext_len, bits_read, n_fill_bits, temp;
   WORD32 ba = bits_available;
 
   config->sac_ext_cnt = 0;
 
   while (ba >= 8) {
     ba -= 8;
     temp = ixheaacd_read_bits_buf(it_bit_buff, 8);
     config->bs_sac_ext_type[config->sac_ext_cnt] = (temp >> 4) & FOUR_BIT_MASK;
     sac_ext_len = temp & FOUR_BIT_MASK;
     if (sac_ext_len == 15) {
       sac_ext_len += ixheaacd_read_bits_buf(it_bit_buff, 8);
       ba -= 8;
       if (sac_ext_len == 15 + 255) {
         sac_ext_len += ixheaacd_read_bits_buf(it_bit_buff, 16);
         ba -= 16;
       }
     }
 
     tmp = (WORD32)(((it_bit_buff->ptr_read_next - it_bit_buff->ptr_bit_buf_base + 1) << 3) -
                    (it_bit_buff->bit_pos + 1));
 
     switch (config->bs_sac_ext_type[config->sac_ext_cnt]) {
       case EXT_TYPE_0:
         config->bs_residual_coding = 1;
         temp = ixheaacd_read_bits_buf(it_bit_buff, 6);
         config->bs_residual_sampling_freq_index = (temp >> 2) & FOUR_BIT_MASK;
         if (config->bs_residual_sampling_freq_index > MAX_RES_SAMP_FREQ_IDX) {
           return IA_FATAL_ERROR;
         }
         config->bs_residual_frames_per_spatial_frame = temp & TWO_BIT_MASK;
 
         for (i = 0; i < num_ott_boxes + num_ttt_boxes; i++) {
           config->bs_residual_present[i] = ixheaacd_read_bits_buf(it_bit_buff, 1);
           if (config->bs_residual_present[i]) {
             config->bs_residual_bands[i] = ixheaacd_read_bits_buf(it_bit_buff, 5);
             if (config->bs_residual_bands[i] > MAX_PARAMETER_BANDS)
             {
               return IA_FATAL_ERROR;
             }
           }
         }
         break;
 
       case EXT_TYPE_1:
         config->bs_arbitrary_downmix = 2;
 
         temp = ixheaacd_read_bits_buf(it_bit_buff, 11);
         config->bs_arbitrary_downmix_residual_sampling_freq_index = (temp >> 7) & FOUR_BIT_MASK;
         if (config->bs_arbitrary_downmix_residual_sampling_freq_index > MAX_RES_SAMP_FREQ_IDX) {
           return IA_FATAL_ERROR;
         }
         config->bs_arbitrary_downmix_residual_frames_per_spatial_frame =
             (temp >> 5) & TWO_BIT_MASK;
         config->bs_arbitrary_downmix_residual_bands = temp & FIVE_BIT_MASK;
+        if (config->bs_arbitrary_downmix_residual_bands >=
+            ixheaacd_freq_res_table[config->bs_freq_res]) {
+          return IA_FATAL_ERROR;
+        }
 
         break;
 
       case EXT_TYPE_2:
         config->arbitrary_tree = 1;
         config->num_out_chan_at = 0;
         config->num_ott_boxes_at = 0;
         for (ch = 0; ch < num_out_chan; ch++) {
           tmp_open = 1;
           idx = 0;
           while (tmp_open > 0) {
             config->bs_ott_box_present_at[ch][idx] = ixheaacd_read_bits_buf(it_bit_buff, 1);
             if (config->bs_ott_box_present_at[ch][idx]) {
               config->num_ott_boxes_at++;
               tmp_open++;
             } else {
               config->num_out_chan_at++;
               tmp_open--;
             }
             if (config->num_ott_boxes_at >= 56) return IA_FATAL_ERROR;
             if (config->num_out_chan_at > MAX_OUTPUT_CHANNELS_AT_MPS) return IA_FATAL_ERROR;
             idx++;
             if (idx >= MAX_ARBITRARY_TREE_INDEX) return IA_FATAL_ERROR;
           }
         }
 
         for (i = 0; i < config->num_ott_boxes_at; i++) {
           temp = ixheaacd_read_bits_buf(it_bit_buff, 2);
           config->bs_ott_default_cld_at[i] = (temp >> 1) & ONE_BIT_MASK;
           config->bs_ott_mode_lfe_at[i] = temp & ONE_BIT_MASK;
           if (config->bs_ott_mode_lfe_at[i]) {
             config->bs_ott_bands_at[i] = ixheaacd_read_bits_buf(it_bit_buff, 5);
             if (config->bs_ott_bands_at[i] > MAX_PARAMETER_BANDS) return IA_FATAL_ERROR;
           } else {
             config->bs_ott_bands_at[i] =
                 ixheaacd_mps_dec_bitdec_tables->freq_res_table[config->bs_freq_res];
           }
         }
 
         for (i = 0; i < config->num_out_chan_at; i++) {
           config->bs_output_channel_pos_at[i] = ixheaacd_read_bits_buf(it_bit_buff, 5);
         }
 
         break;
 
       default:
         return IA_XHEAAC_MPS_DEC_EXE_NONFATAL_INVALID_EXTENSION_TYPE;
     }
 
     bits_read = (WORD32)(((it_bit_buff->ptr_read_next - it_bit_buff->ptr_bit_buf_base + 1) << 3) -
                          (it_bit_buff->bit_pos + 1) - tmp);
     n_fill_bits = 8 * sac_ext_len - bits_read;
 
     while (n_fill_bits > 7) {
       ixheaacd_read_bits_buf(it_bit_buff, 8);
       n_fill_bits -= 8;
     }
     if (n_fill_bits > 0) {
       ixheaacd_read_bits_buf(it_bit_buff, n_fill_bits);
     }
 
     ba -= 8 * sac_ext_len;
     config->sac_ext_cnt++;
     if (config->sac_ext_cnt >= MAX_NUM_EXT_TYPES) {
       return IA_FATAL_ERROR;
     }
   }
 
   return IA_NO_ERROR;
 }
