commit 033754464c63f8c7b131be06d94b74486abcf17f
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Fri Feb 10 00:56:05 2023 +0100

    Fix bug where the wrong xref subsection entry was initialized.
    
    This fixes OSS-fuzz issue 55826.

diff --git a/source/pdf/pdf-xref.c b/source/pdf/pdf-xref.c
index f9b5d9920..08eb24152 100644
--- a/source/pdf/pdf-xref.c
+++ b/source/pdf/pdf-xref.c
@@ -1027,103 +1027,103 @@ static pdf_xref_entry *
 pdf_xref_find_subsection(fz_context *ctx, pdf_document *doc, int start, int len)
 {
 	pdf_xref *xref = &doc->xref_sections[doc->num_xref_sections-1];
 	pdf_xref_subsec *sub, *extend = NULL;
 	int num_objects;
 	int solidify = 0;
 
 	if (len == 0)
 		return NULL;
 
 	/* Different cases here.
 	 * Case 1) We might be asking for a subsection (or a subset of a
 	 *         subsection) that we already have - Just return it.
 	 * Case 2) We might be asking for a subsection that overlaps (or
 	 *         extends) a subsection we already have - extend the existing one.
 	 * Case 3) We might be asking for a subsection that overlaps multiple
 	 *         existing subsections - solidify the whole set.
 	 * Case 4) We might be asking for a completely new subsection - just
 	 *         allocate it.
 	 */
 
 	/* Sanity check */
 	for (sub = xref->subsec; sub != NULL; sub = sub->next)
 	{
 		if (start >= sub->start && start <= sub->start + sub->len)
 		{
 			/* 'start' is in (or immediately after) 'sub' */
 			if (start + len <= sub->start + sub->len)
 			{
 				/* And so is start+len-1 - just return this! Case 1. */
 				return &sub->table[start-sub->start];
 			}
 			/* So we overlap with sub. */
 			if (extend == NULL)
 			{
 				/* Maybe we can extend sub? */
 				extend = sub;
 			}
 			else
 			{
 				/* OK, so we've already found an overlapping one. We'll need to solidify. Case 3. */
 				solidify = 1;
 				break;
 			}
 		}
 		else if (start + len > sub->start && start + len < sub->start + sub->len)
 		{
 			/* The end of the start+len range is in 'sub'. */
 			/* For now, we won't support extending sub backwards. Just take this as
 			 * needing to solidify. Case 3. */
 			solidify = 1;
 			break;
 		}
 	}
 
 	num_objects = xref->num_objects;
 	if (num_objects < start + len)
 		num_objects = start + len;
 
 	if (solidify)
 	{
 		/* Case 3: Solidify the xref */
 		ensure_solid_xref(ctx, doc, num_objects, doc->num_xref_sections-1);
 		xref = &doc->xref_sections[doc->num_xref_sections-1];
 		sub = xref->subsec;
 	}
 	else if (extend)
 	{
 		/* Case 2: Extend the subsection */
 		int newlen = start + len - extend->start;
 		sub = extend;
 		sub->table = fz_realloc_array(ctx, sub->table, newlen, pdf_xref_entry);
-		memset(&sub->table[start - sub->start], 0, sizeof(pdf_xref_entry) * (newlen - sub->len));
+		memset(&sub->table[sub->len], 0, sizeof(pdf_xref_entry) * (newlen - sub->len));
 		sub->len = newlen;
 		if (xref->num_objects < sub->start + sub->len)
 			xref->num_objects = sub->start + sub->len;
 		if (doc->max_xref_len < sub->start + sub->len)
 			extend_xref_index(ctx, doc, sub->start + sub->len);
 	}
 	else
 	{
 		/* Case 4 */
 		sub = fz_malloc_struct(ctx, pdf_xref_subsec);
 		fz_try(ctx)
 		{
 			sub->table = fz_malloc_struct_array(ctx, len, pdf_xref_entry);
 			sub->start = start;
 			sub->len = len;
 			sub->next = xref->subsec;
 			xref->subsec = sub;
 		}
 		fz_catch(ctx)
 		{
 			fz_free(ctx, sub);
 			fz_rethrow(ctx);
 		}
 		if (xref->num_objects < num_objects)
 			xref->num_objects = num_objects;
 		if (doc->max_xref_len < num_objects)
 			extend_xref_index(ctx, doc, num_objects);
 	}
 	return &sub->table[start-sub->start];
 }
