commit d09ab036733583a0d2ddd3d556a93ba47a73b0b3
Author: Julius Pfrommer <julius.pfrommer@web.de>
Date:   Wed Aug 21 21:07:14 2019 +0200

    JSON: Fix an out-of-bounds access uncovered by oss-fuzz

diff --git a/src/ua_types_encoding_json.c b/src/ua_types_encoding_json.c
index f4bd8ee79..5d19d4a8b 100644
--- a/src/ua_types_encoding_json.c
+++ b/src/ua_types_encoding_json.c
@@ -2248,62 +2248,56 @@ static status
 searchObjectForKeyRec(const char *searchKey, CtxJson *ctx, 
                       ParseCtx *parseCtx, size_t *resultIndex, UA_UInt16 depth) {
     UA_StatusCode ret = UA_STATUSCODE_BADNOTFOUND;
     
     CHECK_TOKEN_BOUNDS;
     
     if(parseCtx->tokenArray[parseCtx->index].type == JSMN_OBJECT) {
         size_t objectCount = (size_t)(parseCtx->tokenArray[parseCtx->index].size);
-        
         parseCtx->index++; /*Object to first Key*/
-        CHECK_TOKEN_BOUNDS;
         
-        size_t i;
-        for(i = 0; i < objectCount; i++) {
-            
+        for(size_t i = 0; i < objectCount; i++) {
             CHECK_TOKEN_BOUNDS;
             if(depth == 0) { /* we search only on first layer */
                 if(jsoneq((char*)ctx->pos, &parseCtx->tokenArray[parseCtx->index], searchKey) == 0) {
                     /*found*/
                     parseCtx->index++; /*We give back a pointer to the value of the searched key!*/
                     *resultIndex = parseCtx->index;
                     ret = UA_STATUSCODE_GOOD;
                     break;
                 }
             }
                
             parseCtx->index++; /* value */
             CHECK_TOKEN_BOUNDS;
             
             if(parseCtx->tokenArray[parseCtx->index].type == JSMN_OBJECT) {
                ret = searchObjectForKeyRec(searchKey, ctx, parseCtx, resultIndex,
                                            (UA_UInt16)(depth + 1));
             } else if(parseCtx->tokenArray[parseCtx->index].type == JSMN_ARRAY) {
                ret = searchObjectForKeyRec(searchKey, ctx, parseCtx, resultIndex,
                                            (UA_UInt16)(depth + 1));
             } else {
                 /* Only Primitive or string */
                 parseCtx->index++;
             }
         }
     } else if(parseCtx->tokenArray[parseCtx->index].type == JSMN_ARRAY) {
         size_t arraySize = (size_t)(parseCtx->tokenArray[parseCtx->index].size);
-        
         parseCtx->index++; /*Object to first element*/
-        CHECK_TOKEN_BOUNDS;
         
-        size_t i;
-        for(i = 0; i < arraySize; i++) {
+        for(size_t i = 0; i < arraySize; i++) {
+            CHECK_TOKEN_BOUNDS;
             if(parseCtx->tokenArray[parseCtx->index].type == JSMN_OBJECT) {
                ret = searchObjectForKeyRec(searchKey, ctx, parseCtx, resultIndex,
                                            (UA_UInt16)(depth + 1));
             } else if(parseCtx->tokenArray[parseCtx->index].type == JSMN_ARRAY) {
                ret = searchObjectForKeyRec(searchKey, ctx, parseCtx, resultIndex,
                                            (UA_UInt16)(depth + 1));
             } else {
                 /* Only Primitive or string */
                 parseCtx->index++;
             }
         }
     }
     return ret;
 }
