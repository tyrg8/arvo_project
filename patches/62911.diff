commit 71aae4e98b7e325463e528242ca363b0380a6c92
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Mon Oct 2 14:42:51 2023 +0200

    dict: Compare strings with strncmp
    
    Using memcmp can result in OOB reads.
    
    Short-lived regression found by OSS-Fuzz.

diff --git a/dict.c b/dict.c
index 36b49541..a6a3c9bf 100644
--- a/dict.c
+++ b/dict.c
@@ -516,60 +516,61 @@ static xmlDictEntry *
 xmlDictFindEntry(const xmlDict *dict, const xmlChar *prefix,
                  const xmlChar *name, int len, unsigned hashValue,
                  int *pfound) {
     xmlDictEntry *entry;
     unsigned mask, pos, displ;
     int found = 0;
 
     mask = dict->size - 1;
     pos = hashValue & mask;
     entry = &dict->table[pos];
 
     if (entry->hashValue != 0) {
         /*
          * Robin hood hashing: abort if the displacement of the entry
          * is smaller than the displacement of the key we look for.
          * This also stops at the correct position when inserting.
          */
         displ = 0;
 
         do {
             if (entry->hashValue == hashValue) {
                 if (prefix == NULL) {
                     /*
                      * name is not necessarily null-terminated.
                      */
-                    if ((memcmp(entry->name, name, len) == 0) &&
+                    if ((strncmp((const char *) entry->name,
+                                 (const char *) name, len) == 0) &&
                         (entry->name[len] == 0)) {
                         found = 1;
                         break;
                     }
                 } else {
                     if (xmlStrQEqual(prefix, name, entry->name)) {
                         found = 1;
                         break;
                     }
                 }
             }
 
             displ++;
             pos++;
             entry++;
             if ((pos & mask) == 0)
                 entry = dict->table;
         } while ((entry->hashValue != 0) &&
                  (((pos - entry->hashValue) & mask) >= displ));
     }
 
     *pfound = found;
     return(entry);
 }
 
 /**
  * xmlDictGrow:
  * @dict: dictionary
  * @size: new size of the dictionary
  *
  * Resize the dictionary hash table.
  *
  * Returns 0 in case of success, -1 if a memory allocation failed.
  */
