commit bcd1c6fa54908199b1fba6d0dd38f9bf6c51a4ce
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Fri Dec 29 00:20:59 2017 +0300

    DcrDecoder::decodeRawInternal(): don't catch IOException.

diff --git a/src/librawspeed/decoders/DcrDecoder.cpp b/src/librawspeed/decoders/DcrDecoder.cpp
index 8655a76a..0b563c72 100644
--- a/src/librawspeed/decoders/DcrDecoder.cpp
+++ b/src/librawspeed/decoders/DcrDecoder.cpp
@@ -57,48 +57,44 @@ void DcrDecoder::checkImageDimensions() {
 RawImage DcrDecoder::decodeRawInternal() {
   SimpleTiffDecoder::prepareForRawDecoding();
 
   ByteStream input(mFile, off);
 
   int compression = raw->getEntry(COMPRESSION)->getU32();
   if (65000 == compression) {
     TiffEntry *ifdoffset = mRootIFD->getEntryRecursive(KODAK_IFD);
     if (!ifdoffset)
       ThrowRDE("Couldn't find the Kodak IFD offset");
 
     NORangesSet<Buffer> ifds;
 
     assert(ifdoffset != nullptr);
     TiffRootIFD kodakifd(nullptr, &ifds, ifdoffset->getRootIfdData(),
                          ifdoffset->getU32());
 
     TiffEntry *linearization = kodakifd.getEntryRecursive(KODAK_LINEARIZATION);
     if (!linearization || linearization->count != 1024 ||
         linearization->type != TIFF_SHORT)
       ThrowRDE("Couldn't find the linearization table");
 
     assert(linearization != nullptr);
     auto linTable = linearization->getU16Array(1024);
 
     RawImageCurveGuard curveHandler(&mRaw, linTable, uncorrectedRawValues);
 
     // FIXME: dcraw does all sorts of crazy things besides this to fetch
     //        WB from what appear to be presets and calculate it in weird ways
     //        The only file I have only uses this method, if anybody careas look
     //        in dcraw.c parse_kodak_ifd() for all that weirdness
     TiffEntry* blob = kodakifd.getEntryRecursive(static_cast<TiffTag>(0x03fd));
     if (blob && blob->count == 72) {
       mRaw->metadata.wbCoeffs[0] = 2048.0F / blob->getU16(20);
       mRaw->metadata.wbCoeffs[1] = 2048.0F / blob->getU16(21);
       mRaw->metadata.wbCoeffs[2] = 2048.0F / blob->getU16(22);
     }
 
-    try {
-      decodeKodak65000(&input, width, height);
-    } catch (IOException &) {
-      mRaw->setError("IO error occurred while reading image. Returning partial result.");
-    }
+    decodeKodak65000(&input, width, height);
   } else
     ThrowRDE("Unsupported compression %d", compression);
 
   return mRaw;
 }
