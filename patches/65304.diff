commit 5c7200f2bb763bfcd4e0636aebb88573e97bbcf3
Author: Luca Deri <deri@ntop.org>
Date:   Sat Dec 23 08:07:28 2023 +0100

    Buffer overflow fix

diff --git a/src/lib/protocols/tls.c b/src/lib/protocols/tls.c
index 71f6eb0b..e3e10330 100644
--- a/src/lib/protocols/tls.c
+++ b/src/lib/protocols/tls.c
@@ -1747,1124 +1747,1125 @@ static void ndpi_compute_ja4(struct ndpi_detection_module_struct *ndpi_struct,
 int processClientServerHello(struct ndpi_detection_module_struct *ndpi_struct,
 			     struct ndpi_flow_struct *flow, u_int32_t quic_version) {
   struct ndpi_packet_struct *packet = &ndpi_struct->packet;
   union ja_info ja;
   u_int8_t invalid_ja = 0;
   u_int16_t tls_version, ja_str_len;
   char ja_str[JA_STR_LEN];
   ndpi_MD5_CTX ctx;
   u_char md5_hash[16];
   u_int32_t i, j;
   u_int16_t total_len;
   u_int8_t handshake_type;
   bool is_quic = (quic_version != 0);
   bool is_dtls = packet->udp && (!is_quic);
 
 #ifdef DEBUG_TLS
   printf("TLS %s() called\n", __FUNCTION__);
 #endif
 
   handshake_type = packet->payload[0];
   total_len = (packet->payload[1] << 16) +  (packet->payload[2] << 8) + packet->payload[3];
 
   if((total_len > packet->payload_packet_len) || (packet->payload[1] != 0x0))
     return(0); /* Not found */
 
   total_len = packet->payload_packet_len;
 
   /* At least "magic" 3 bytes, null for string end, otherwise no need to waste cpu cycles */
   if(total_len > 4) {
     u_int16_t base_offset    = (!is_dtls) ? 38 : 46;
     u_int16_t version_offset = (!is_dtls) ? 4 : 12;
     u_int16_t offset = (!is_dtls) ? 38 : 46;
     u_int32_t tot_extension_len;
     u_int8_t  session_id_len =  0;
 
     if((base_offset >= total_len) ||
        (version_offset + 1) >= total_len)
       return 0; /* Not found */
 
     session_id_len = packet->payload[base_offset];
 
 #ifdef DEBUG_TLS
     printf("TLS [len: %u][handshake_type: %02X]\n", packet->payload_packet_len, handshake_type);
 #endif
 
     tls_version = ntohs(*((u_int16_t*)&packet->payload[version_offset]));
 
     if(handshake_type == 0x02 /* Server Hello */) {
       int rc;
 
       ja.server.num_ciphers = 0;
       ja.server.num_tls_extensions = 0;
       ja.server.num_elliptic_curve_point_format = 0;
       ja.server.alpn[0] = '\0';
 
       ja.server.tls_handshake_version = tls_version;
 
 #ifdef DEBUG_TLS
       printf("TLS Server Hello [version: 0x%04X]\n", tls_version);
 #endif
 
       /*
 	The server hello decides about the TLS version of this flow
 	https://networkengineering.stackexchange.com/questions/55752/why-does-wireshark-show-version-tls-1-2-here-instead-of-tls-1-3
       */
       if(packet->udp)
 	offset += session_id_len + 1;
       else {
 	if(tls_version < 0x7F15 /* TLS 1.3 lacks of session id */)
 	  offset += session_id_len+1;
       }
 
       if((offset+3) > packet->payload_packet_len)
 	return(0); /* Not found */
 
       ja.server.num_ciphers = 1, ja.server.cipher[0] = ntohs(*((u_int16_t*)&packet->payload[offset]));
       if((flow->protos.tls_quic.server_unsafe_cipher = ndpi_is_safe_ssl_cipher(ja.server.cipher[0])) == 1) {
 	char str[64];
 	char unknown_cipher[8];
 
 	snprintf(str, sizeof(str), "Cipher %s", ndpi_cipher2str(ja.server.cipher[0], unknown_cipher));
 	ndpi_set_risk(ndpi_struct, flow, NDPI_TLS_WEAK_CIPHER, str);
       }
 
       flow->protos.tls_quic.server_cipher = ja.server.cipher[0];
 
 #ifdef DEBUG_TLS
       printf("TLS [server][session_id_len: %u][cipher: %04X]\n", session_id_len, ja.server.cipher[0]);
 #endif
 
       offset += 2 + 1;
 
       if((offset + 1) < packet->payload_packet_len) /* +1 because we are goint to read 2 bytes */
 	tot_extension_len = ntohs(*((u_int16_t*)&packet->payload[offset]));
       else
 	tot_extension_len = 0;
 
 #ifdef DEBUG_TLS
       printf("TLS [server][tot_extension_len: %u]\n", tot_extension_len);
 #endif
       offset += 2;
 
       for(i=0; i<tot_extension_len; ) {
         u_int16_t extension_id;
         u_int32_t extension_len;
 
 	if((offset+4) > packet->payload_packet_len) break;
 
 	extension_id  = ntohs(*((u_int16_t*)&packet->payload[offset]));
 	extension_len = ntohs(*((u_int16_t*)&packet->payload[offset+2]));
 	if(offset+4+extension_len > packet->payload_packet_len) {
 	  break;
 	}
 
 	if(ja.server.num_tls_extensions < MAX_NUM_JA)
 	  ja.server.tls_extension[ja.server.num_tls_extensions++] = extension_id;
 
 #ifdef DEBUG_TLS
 	printf("TLS [server][extension_id: %u/0x%04X][len: %u]\n",
 	       extension_id, extension_id, extension_len);
 #endif
 	checkExtensions(ndpi_struct, flow, is_dtls, extension_id, extension_len, offset + 4);
 
 	if(extension_id == 43 /* supported versions */) {
 	  if(extension_len >= 2) {
 	    u_int16_t tls_version = ntohs(*((u_int16_t*)&packet->payload[offset+4]));
 
 #ifdef DEBUG_TLS
 	    printf("TLS [server] [TLS version: 0x%04X]\n", tls_version);
 #endif
 
 	    flow->protos.tls_quic.ssl_version = ja.server.tls_supported_version = tls_version;
 	  }
 	} else if(extension_id == 16 /* application_layer_protocol_negotiation (ALPN) */ &&
 	          offset + 6 < packet->payload_packet_len) {
 	  u_int16_t s_offset = offset+4;
 	  u_int16_t tot_alpn_len = ntohs(*((u_int16_t*)&packet->payload[s_offset]));
 	  char alpn_str[256];
 	  u_int16_t alpn_str_len = 0, i;
 
 #ifdef DEBUG_TLS
 	  printf("Server TLS [ALPN: block_len=%u/len=%u]\n", extension_len, tot_alpn_len);
 #endif
 	  s_offset += 2;
 	  tot_alpn_len += s_offset;
 
 	  if(tot_alpn_len > packet->payload_packet_len)
 	    return 0;
 
 	  while(s_offset < tot_alpn_len && s_offset < total_len) {
 	    u_int8_t alpn_i, alpn_len = packet->payload[s_offset++];
 
 	    if((s_offset + alpn_len) <= tot_alpn_len) {
 #ifdef DEBUG_TLS
 	      printf("Server TLS [ALPN: %u]\n", alpn_len);
 #endif
 
 	      if(((uint32_t)alpn_str_len+alpn_len+1) < (sizeof(alpn_str)-1)) {
 	        if(alpn_str_len > 0) {
 	          alpn_str[alpn_str_len] = ',';
 	          alpn_str_len++;
 	        }
 
 	        for(alpn_i=0; alpn_i<alpn_len; alpn_i++) {
 		    alpn_str[alpn_str_len+alpn_i] = packet->payload[s_offset+alpn_i];
 		  }
 
 	        s_offset += alpn_len, alpn_str_len += alpn_len;;
 	      } else {
 	        alpn_str[alpn_str_len] = '\0';
 	        ndpi_set_risk(ndpi_struct, flow, NDPI_TLS_UNCOMMON_ALPN, alpn_str);
 	        break;
 	      }
 	    } else {
 	      alpn_str[alpn_str_len] = '\0';
 	      ndpi_set_risk(ndpi_struct, flow, NDPI_TLS_UNCOMMON_ALPN, alpn_str);
 	      break;
 	    }
 	  } /* while */
 
 	  alpn_str[alpn_str_len] = '\0';
 
 #ifdef DEBUG_TLS
 	  printf("Server TLS [ALPN: %s][len: %u]\n", alpn_str, alpn_str_len);
 #endif
 	  if(ndpi_normalize_printable_string(alpn_str, alpn_str_len) == 0)
 	    ndpi_set_risk(ndpi_struct, flow, NDPI_INVALID_CHARACTERS, alpn_str);
 
 	  if(flow->protos.tls_quic.negotiated_alpn == NULL)
 	    flow->protos.tls_quic.negotiated_alpn = ndpi_strdup(alpn_str);
 
 	  /* Check ALPN only if not already checked (client-side) */
 	  if(flow->protos.tls_quic.negotiated_alpn != NULL &&
 	     flow->protos.tls_quic.advertised_alpns == NULL)
 	    tlsCheckUncommonALPN(ndpi_struct, flow, flow->protos.tls_quic.negotiated_alpn);
 
 	  alpn_str_len = ndpi_min(sizeof(ja.server.alpn), (size_t)alpn_str_len);
 	  memcpy(ja.server.alpn, alpn_str, alpn_str_len);
 	  if(alpn_str_len > 0)
 	    ja.server.alpn[alpn_str_len - 1] = '\0';
 
 	  /* Replace , with - as in JA3 */
 	  for(i=0; ja.server.alpn[i] != '\0'; i++)
 	    if(ja.server.alpn[i] == ',') ja.server.alpn[i] = '-';
 	} else if(extension_id == 11 /* ec_point_formats groups */) {
 	  u_int16_t s_offset = offset+4 + 1;
 
 #ifdef DEBUG_TLS
 	  printf("Server TLS [EllipticCurveFormat: len=%u]\n", extension_len);
 #endif
 	  if((s_offset+extension_len-1) <= total_len) {
 	    for(i=0; i<extension_len-1 && s_offset+i<packet->payload_packet_len; i++) {
 	      u_int8_t s_group = packet->payload[s_offset+i];
 
 #ifdef DEBUG_TLS
 	      printf("Server TLS [EllipticCurveFormat: %u]\n", s_group);
 #endif
 
 	      if(ja.server.num_elliptic_curve_point_format < MAX_NUM_JA)
 		ja.server.elliptic_curve_point_format[ja.server.num_elliptic_curve_point_format++] = s_group;
 	      else {
 		invalid_ja = 1;
 #ifdef DEBUG_TLS
 		printf("Server TLS Invalid num elliptic %u\n", ja.server.num_elliptic_curve_point_format);
 #endif
 	      }
 	    }
 	  } else {
 	    invalid_ja = 1;
 #ifdef DEBUG_TLS
 	    printf("Server TLS Invalid len %u vs %u\n", s_offset+extension_len, total_len);
 #endif
 	  }
 	}
 
 	i += 4 + extension_len, offset += 4 + extension_len;
       } /* for */
 
       /* If the CH is not available and if "supported_versions" extension is not present in the SH
          (i.e. (D)TLS <= 1.2), use the version field present in the record layer */
       if(flow->protos.tls_quic.ssl_version == 0)
         flow->protos.tls_quic.ssl_version = tls_version;
 
       ja_str_len = ndpi_snprintf(ja_str, JA_STR_LEN, "%u,", ja.server.tls_handshake_version);
 
       for(i=0; (i<ja.server.num_ciphers) && (JA_STR_LEN > ja_str_len); i++) {
 	rc = ndpi_snprintf(&ja_str[ja_str_len], JA_STR_LEN-ja_str_len, "%s%u", (i > 0) ? "-" : "", ja.server.cipher[i]);
 
 	if(rc <= 0) break; else ja_str_len += rc;
       }
 
       if(JA_STR_LEN > ja_str_len) {
 	rc = ndpi_snprintf(&ja_str[ja_str_len], JA_STR_LEN-ja_str_len, ",");
 	if(rc > 0 && ja_str_len + rc < JA_STR_LEN) ja_str_len += rc;
       }
 
       /* ********** */
 
       for(i=0; (i<ja.server.num_tls_extensions) && (JA_STR_LEN > ja_str_len); i++) {
 	int rc = ndpi_snprintf(&ja_str[ja_str_len], JA_STR_LEN-ja_str_len, "%s%u", (i > 0) ? "-" : "", ja.server.tls_extension[i]);
 
 	if(rc <= 0) break; else ja_str_len += rc;
       }
 
 #ifdef DEBUG_TLS
       printf("[JA3] Server: %s \n", ja_str);
 #endif
 
       ndpi_MD5Init(&ctx);
       ndpi_MD5Update(&ctx, (const unsigned char *)ja_str, strlen(ja_str));
       ndpi_MD5Final(md5_hash, &ctx);
 
       for(i=0, j=0; i<16; i++) {
 	int rc = ndpi_snprintf(&flow->protos.tls_quic.ja3_server[j],
 			       sizeof(flow->protos.tls_quic.ja3_server)-j, "%02x", md5_hash[i]);
 	if(rc <= 0) break; else j += rc;
       }
 
 #ifdef DEBUG_TLS
       printf("[JA3] Server: %s \n", flow->protos.tls_quic.ja3_server);
 #endif
     } else if(handshake_type == 0x01 /* Client Hello */) {
       u_int16_t cipher_len, cipher_offset;
       u_int8_t cookie_len = 0;
 
       ja.client.num_ciphers = 0;
       ja.client.num_tls_extensions = 0;
       ja.client.num_elliptic_curve = 0;
       ja.client.num_elliptic_curve_point_format = 0;
       ja.client.num_signature_algorithms = 0;
       ja.client.num_supported_versions = 0;
       ja.client.signature_algorithms_str[0] = '\0';
       ja.client.alpn[0] = '\0';
 
       flow->protos.tls_quic.ssl_version = ja.client.tls_handshake_version = tls_version;
       if(flow->protos.tls_quic.ssl_version < 0x0303) /* < TLSv1.2 */ {
 	char str[32], buf[32];
 	u_int8_t unknown_tls_version;
 
 	snprintf(str, sizeof(str), "%s", ndpi_ssl_version2str(buf, sizeof(buf),
 							      flow->protos.tls_quic.ssl_version,
 							      &unknown_tls_version));
 	ndpi_set_risk(ndpi_struct, flow, NDPI_TLS_OBSOLETE_VERSION, str);
       }
 
       if((session_id_len+base_offset+3) > packet->payload_packet_len)
 	return(0); /* Not found */
 
       if(!is_dtls) {
 	cipher_len = packet->payload[session_id_len+base_offset+2] + (packet->payload[session_id_len+base_offset+1] << 8);
 	cipher_offset = base_offset + session_id_len + 3;
       } else {
 	cookie_len = packet->payload[base_offset+session_id_len+1];
 #ifdef DEBUG_TLS
 	printf("[JA3] Client: DTLS cookie len %d\n", cookie_len);
 #endif
 	if((session_id_len+base_offset+cookie_len+4) > packet->payload_packet_len)
 	  return(0); /* Not found */
 	cipher_len = ntohs(*((u_int16_t*)&packet->payload[base_offset+session_id_len+cookie_len+2]));
 	cipher_offset = base_offset + session_id_len + cookie_len + 4;
       }
 
 #ifdef DEBUG_TLS
       printf("Client TLS [client cipher_len: %u][tls_version: 0x%04X]\n", cipher_len, tls_version);
 #endif
 
       if((cipher_offset+cipher_len) <= total_len - 1) { /* -1 because variable "id" is a u_int16_t */
 	u_int8_t safari_ciphers = 0, chrome_ciphers = 0, this_is_not_safari = 0, looks_like_safari_on_big_sur = 0;
 
 	for(i=0; i<cipher_len;) {
 	  u_int16_t *id = (u_int16_t*)&packet->payload[cipher_offset+i];
 	  u_int16_t cipher_id = ntohs(*id);
 
 	  if(cipher_offset+i+1 < packet->payload_packet_len &&
 	     ((packet->payload[cipher_offset+i] != packet->payload[cipher_offset+i+1]) ||
 	      ((packet->payload[cipher_offset+i] & 0xF) != 0xA)) /* Skip Grease */) {
 	    /*
 	      Skip GREASE [https://tools.ietf.org/id/draft-ietf-tls-grease-01.html]
 	      https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967
 	    */
 
 #if defined(DEBUG_TLS) || defined(DEBUG_HEURISTIC)
 	    printf("Client TLS [non-GREASE cipher suite: %u/0x%04X] [%d/%u]\n", cipher_id, cipher_id, i, cipher_len);
 #endif
 
 	    if(ja.client.num_ciphers < MAX_NUM_JA)
 	      ja.client.cipher[ja.client.num_ciphers++] = cipher_id;
 	    else {
 	      invalid_ja = 1;
 #ifdef DEBUG_TLS
 	      printf("Client TLS Invalid cipher %u\n", ja.client.num_ciphers);
 #endif
 	    }
 
 #if defined(DEBUG_TLS) || defined(DEBUG_HEURISTIC)
 	    printf("Client TLS [cipher suite: %u/0x%04X] [%d/%u]\n", cipher_id, cipher_id, i, cipher_len);
 #endif
 
 	    switch(cipher_id) {
 	    case TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:
 	    case TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:
 	      safari_ciphers++;
 	      break;
 
 	    case TLS_AES_128_GCM_SHA256:
 	    case TLS_AES_256_GCM_SHA384:
 	    case TLS_CHACHA20_POLY1305_SHA256:
 	      chrome_ciphers++;
 	      break;
 
 	    case TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:
 	    case TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:
 	    case TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:
 	    case TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
 	    case TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:
 	    case TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:
 	    case TLS_RSA_WITH_AES_128_CBC_SHA:
 	    case TLS_RSA_WITH_AES_256_CBC_SHA:
 	    case TLS_RSA_WITH_AES_128_GCM_SHA256:
 	    case TLS_RSA_WITH_AES_256_GCM_SHA384:
 	      safari_ciphers++, chrome_ciphers++;
 	      break;
 
 	    case TLS_RSA_WITH_3DES_EDE_CBC_SHA:
 	      looks_like_safari_on_big_sur = 1;
 	      break;
 	    }
 	  } else {
 #if defined(DEBUG_TLS) || defined(DEBUG_HEURISTIC)
 	    printf("Client TLS [GREASE cipher suite: %u/0x%04X] [%d/%u]\n", cipher_id, cipher_id, i, cipher_len);
 #endif
 
 	    this_is_not_safari = 1; /* NOTE: BugSur and up have grease support */
 	  }
 
 	  i += 2;
 	} /* for */
 
 	/* NOTE:
 	   we do not check for duplicates as with signatures because
 	   this is time consuming and we want to avoid overhead whem possible
 	*/
 	if(this_is_not_safari)
 	  flow->protos.tls_quic.browser_heuristics.is_safari_tls = 0;
 	else if((safari_ciphers == 12) || (this_is_not_safari && looks_like_safari_on_big_sur))
 	  flow->protos.tls_quic.browser_heuristics.is_safari_tls = 1;
 
 	if(chrome_ciphers == 13)
 	  flow->protos.tls_quic.browser_heuristics.is_chrome_tls = 1;
 
 	/* Note that both Safari and Chrome can overlap */
 #ifdef DEBUG_HEURISTIC
 	printf("[CIPHERS] [is_chrome_tls: %u (%u)][is_safari_tls: %u (%u)][this_is_not_safari: %u]\n",
 	       flow->protos.tls_quic.browser_heuristics.is_chrome_tls,
 	       chrome_ciphers,
 	       flow->protos.tls_quic.browser_heuristics.is_safari_tls,
 	       safari_ciphers,
 	       this_is_not_safari);
 #endif
       } else {
 	invalid_ja = 1;
 #ifdef DEBUG_TLS
 	printf("Client TLS Invalid len %u vs %u\n", (cipher_offset+cipher_len), total_len);
 #endif
       }
 
       offset = base_offset + session_id_len + cookie_len + cipher_len + 2;
       offset += (!is_dtls) ? 1 : 2;
 
       if(offset < total_len) {
 	u_int16_t compression_len;
 	u_int16_t extensions_len;
 
 	compression_len = packet->payload[offset];
 	offset++;
 
 #ifdef DEBUG_TLS
 	printf("Client TLS [compression_len: %u]\n", compression_len);
 #endif
 
 	// offset += compression_len + 3;
 	offset += compression_len;
 
 	if(offset+1 < total_len) {
 	  extensions_len = ntohs(*((u_int16_t*)&packet->payload[offset]));
 	  offset += 2;
 
 #ifdef DEBUG_TLS
 	  printf("Client TLS [extensions_len: %u]\n", extensions_len);
 #endif
 
 	  if((extensions_len+offset) <= total_len) {
 	    /* Move to the first extension
 	       Type is u_int to avoid possible overflow on extension_len addition */
 	    u_int extension_offset = 0;
 
 	    while(extension_offset < extensions_len &&
 		  offset+extension_offset+4 <= total_len) {
 	      u_int16_t extension_id, extension_len, extn_off = offset+extension_offset;
 
 
 	      extension_id = ntohs(*((u_int16_t*)&packet->payload[offset+extension_offset]));
 	      extension_offset += 2;
 
 	      extension_len = ntohs(*((u_int16_t*)&packet->payload[offset+extension_offset]));
 	      extension_offset += 2;
 
 #ifdef DEBUG_TLS
 	      printf("Client TLS [extension_id: %u][extension_len: %u]\n", extension_id, extension_len);
 #endif
 	      checkExtensions(ndpi_struct, flow, is_dtls,
 			      extension_id, extension_len, offset + extension_offset);
 
 	      if(offset + 4 + extension_len > total_len) {
 #ifdef DEBUG_TLS
 	        printf("[TLS] extension length %u too long (%u, offset %u)\n",
 	               extension_len, total_len, offset);
 #endif
 	        break;
 	      }
 
 	      if((extension_id == 0) || (packet->payload[extn_off] != packet->payload[extn_off+1]) ||
 		 ((packet->payload[extn_off] & 0xF) != 0xA)) {
 		/* Skip GREASE */
 
 		if(ja.client.num_tls_extensions < MAX_NUM_JA)
 		  ja.client.tls_extension[ja.client.num_tls_extensions++] = extension_id;
 		else {
 		  invalid_ja = 1;
 #ifdef DEBUG_TLS
 		  printf("Client TLS Invalid extensions %u\n", ja.client.num_tls_extensions);
 #endif
 		}
 	      }
 
 	      if(extension_id == 0 /* server name */) {
 		u_int16_t len;
 
 #ifdef DEBUG_TLS
 		printf("[TLS] Extensions: found server name\n");
 #endif
 		if((offset+extension_offset+4) < packet->payload_packet_len) {
 		  len = (packet->payload[offset+extension_offset+3] << 8) + packet->payload[offset+extension_offset+4];
 
 		  if((offset+extension_offset+5+len) <= packet->payload_packet_len) {
 		    char *sni = ndpi_hostname_sni_set(flow, &packet->payload[offset+extension_offset+5], len);
 		    int sni_len = strlen(sni);
 #ifdef DEBUG_TLS
 		    printf("[TLS] SNI: [%s]\n", sni);
 #endif
 		    if(ndpi_is_valid_hostname(sni, sni_len) == 0) {
 		      ndpi_set_risk(ndpi_struct, flow, NDPI_INVALID_CHARACTERS, sni);
 
 		      /* This looks like an attack */
 		      ndpi_set_risk(ndpi_struct, flow, NDPI_POSSIBLE_EXPLOIT, NULL);
 		    }
 
 		    if(!is_quic) {
 		      if(ndpi_match_hostname_protocol(ndpi_struct, flow, __get_master(ndpi_struct, flow), sni, sni_len))
 		        flow->protos.tls_quic.subprotocol_detected = 1;
 		    } else {
 		      if(ndpi_match_hostname_protocol(ndpi_struct, flow, NDPI_PROTOCOL_QUIC, sni, sni_len))
 		        flow->protos.tls_quic.subprotocol_detected = 1;
 		    }
 
 		    if((flow->protos.tls_quic.subprotocol_detected == 0)
 		       && (check_sni_is_numeric_ip(sni) == 1)) {
 		      ndpi_set_risk(ndpi_struct, flow, NDPI_NUMERIC_IP_HOST, sni);
 		    }
 
 		    if(ndpi_check_dga_name(ndpi_struct, flow, sni, 1, 0)) {
 #ifdef DEBUG_TLS
 		      printf("[TLS] SNI: (DGA) [%s]\n", sni);
 #endif
 
 		      if((sni_len >= 4)
 		         /* Check if it ends in .com or .net */
 		         && ((strcmp(&sni[sni_len-4], ".com") == 0) || (strcmp(&sni[sni_len-4], ".net") == 0))
 		         && (strncmp(sni, "www.", 4) == 0)) /* Not starting with www.... */
 		        ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_TOR, __get_master(ndpi_struct, flow), NDPI_CONFIDENCE_DPI);
 		    } else {
 #ifdef DEBUG_TLS
 		      printf("[TLS] SNI: (NO DGA) [%s]\n", sni);
 #endif
 		    }
 		  } else {
 #ifdef DEBUG_TLS
 		    printf("[TLS] Extensions server len too short: %u vs %u\n",
 			   offset+extension_offset+5+len,
 			   packet->payload_packet_len);
 #endif
 		  }
 		}
 	      } else if(extension_id == 10 /* supported groups */) {
 		u_int16_t s_offset = offset+extension_offset + 2;
 
 #ifdef DEBUG_TLS
 		printf("Client TLS [EllipticCurveGroups: len=%u]\n", extension_len);
 #endif
 
 		if((s_offset+extension_len-2) <= total_len) {
 		  for(i=0; i<(u_int32_t)extension_len-2 && s_offset + i + 1 < total_len; i += 2) {
 		    u_int16_t s_group = ntohs(*((u_int16_t*)&packet->payload[s_offset+i]));
 
 #ifdef DEBUG_TLS
 		    printf("Client TLS [EllipticCurve: %u/0x%04X]\n", s_group, s_group);
 #endif
 		    if((s_group == 0) || (packet->payload[s_offset+i] != packet->payload[s_offset+i+1])
 		       || ((packet->payload[s_offset+i] & 0xF) != 0xA)) {
 		      /* Skip GREASE */
 		      if(ja.client.num_elliptic_curve < MAX_NUM_JA)
 			ja.client.elliptic_curve[ja.client.num_elliptic_curve++] = s_group;
 		      else {
 			invalid_ja = 1;
 #ifdef DEBUG_TLS
 			printf("Client TLS Invalid num elliptic %u\n", ja.client.num_elliptic_curve);
 #endif
 		      }
 		    }
 		  }
 		} else {
 		  invalid_ja = 1;
 #ifdef DEBUG_TLS
 		  printf("Client TLS Invalid len %u vs %u\n", (s_offset+extension_len-1), total_len);
 #endif
 		}
 	      } else if(extension_id == 11 /* ec_point_formats groups */) {
 		u_int16_t s_offset = offset+extension_offset + 1;
 
 #ifdef DEBUG_TLS
 		printf("Client TLS [EllipticCurveFormat: len=%u]\n", extension_len);
 #endif
 		if((s_offset+extension_len-1) <= total_len) {
 		  for(i=0; i<(u_int32_t)extension_len-1 && s_offset+i < total_len; i++) {
 		    u_int8_t s_group = packet->payload[s_offset+i];
 
 #ifdef DEBUG_TLS
 		    printf("Client TLS [EllipticCurveFormat: %u]\n", s_group);
 #endif
 
 		    if(ja.client.num_elliptic_curve_point_format < MAX_NUM_JA)
 		      ja.client.elliptic_curve_point_format[ja.client.num_elliptic_curve_point_format++] = s_group;
 		    else {
 		      invalid_ja = 1;
 #ifdef DEBUG_TLS
 		      printf("Client TLS Invalid num elliptic %u\n", ja.client.num_elliptic_curve_point_format);
 #endif
 		    }
 		  }
 		} else {
 		  invalid_ja = 1;
 #ifdef DEBUG_TLS
 		  printf("Client TLS Invalid len %u vs %u\n", s_offset+extension_len, total_len);
 #endif
 		}
 	      } else if(extension_id == 13 /* signature algorithms */ &&
 	                offset+extension_offset+1 < total_len) {
 		int s_offset = offset+extension_offset, safari_signature_algorithms = 0,
 		  chrome_signature_algorithms = 0, duplicate_found = 0, last_signature = 0, id;
 		u_int16_t tot_signature_algorithms_len = ntohs(*((u_int16_t*)&packet->payload[s_offset]));
 
 #ifdef DEBUG_TLS
 		printf("Client TLS [SIGNATURE_ALGORITHMS: block_len=%u/len=%u]\n", extension_len, tot_signature_algorithms_len);
 #endif
 
 		s_offset += 2;
 		tot_signature_algorithms_len = ndpi_min((sizeof(ja.client.signature_algorithms_str) / 2) - 1, tot_signature_algorithms_len);
 
 		size_t sa_size = ndpi_min(tot_signature_algorithms_len / 2, MAX_NUM_TLS_SIGNATURE_ALGORITHMS);
 
 #ifdef TLS_HANDLE_SIGNATURE_ALGORITMS
 		if (s_offset + 2 * sa_size <= packet->payload_packet_len) {
 		  flow->protos.tls_quic.num_tls_signature_algorithms = sa_size;
 		  memcpy(flow->protos.tls_quic.client_signature_algorithms,
 			 &packet->payload[s_offset], 2 /* 16 bit */ * sa_size);
 		}
 #endif
 
 		ja.client.num_signature_algorithms = ndpi_min(sa_size, MAX_NUM_JA);
-
+		for(i=0, id=0; i<tot_signature_algorithms_len && s_offset+i<total_len; i += 2) {
+		  ja.client.signature_algorithms[id++] = ntohs(*(u_int16_t*)&packet->payload[s_offset+i]);
+		}
+		
 		for(i=0, id=0; i<tot_signature_algorithms_len && s_offset+i<total_len; i++) {
 		  int rc = ndpi_snprintf(&ja.client.signature_algorithms_str[i*2],
 					 sizeof(ja.client.signature_algorithms_str)-i*2,
 					 "%02X", packet->payload[s_offset+i]);
-		  ja.client.signature_algorithms[id++] = ntohs(*(u_int16_t*)&packet->payload[s_offset+i*2]);
-
 		  if(rc < 0) break;
 		}
 
 		for(i=0; i<tot_signature_algorithms_len && s_offset + (int)i + 2 < packet->payload_packet_len; i+=2) {
 		  u_int16_t signature_algo = (u_int16_t)ntohs(*((u_int16_t*)&packet->payload[s_offset+i]));
 
 		  if(last_signature == signature_algo) {
 		    /* Consecutive duplication */
 		    duplicate_found = 1;
 		    continue;
 		  } else {
 		    /* Check for other duplications */
 		    u_int all_ok = 1;
 
 		    for(j=0; j<tot_signature_algorithms_len; j+=2) {
 		      if(j != i && s_offset + (int)j + 2 < packet->payload_packet_len) {
 			u_int16_t j_signature_algo = (u_int16_t)ntohs(*((u_int16_t*)&packet->payload[s_offset+j]));
 
 			if((signature_algo == j_signature_algo)
 			   && (i < j) /* Don't skip both of them */) {
 #ifdef DEBUG_HEURISTIC
 			  printf("[SIGNATURE] [TLS Signature Algorithm] Skipping duplicate 0x%04X\n", signature_algo);
 #endif
 
 			  duplicate_found = 1, all_ok = 0;
 			  break;
 			}
 		      }
 		    }
 
 		    if(!all_ok)
 		      continue;
 		  }
 
 		  last_signature = signature_algo;
 
 #ifdef DEBUG_HEURISTIC
 		  printf("[SIGNATURE] [TLS Signature Algorithm] 0x%04X\n", signature_algo);
 #endif
 		  switch(signature_algo) {
 		  case ECDSA_SECP521R1_SHA512:
 		    flow->protos.tls_quic.browser_heuristics.is_firefox_tls = 1;
 		    break;
 
 		  case ECDSA_SECP256R1_SHA256:
 		  case ECDSA_SECP384R1_SHA384:
 		  case RSA_PKCS1_SHA256:
 		  case RSA_PKCS1_SHA384:
 		  case RSA_PKCS1_SHA512:
 		  case RSA_PSS_RSAE_SHA256:
 		  case RSA_PSS_RSAE_SHA384:
 		  case RSA_PSS_RSAE_SHA512:
 		    chrome_signature_algorithms++, safari_signature_algorithms++;
 #ifdef DEBUG_HEURISTIC
 		    printf("[SIGNATURE] [Chrome/Safari] Found 0x%04X [chrome: %u][safari: %u]\n",
 			   signature_algo, chrome_signature_algorithms, safari_signature_algorithms);
 #endif
 
 		    break;
 		  }
 		}
 
 #ifdef DEBUG_HEURISTIC
 		printf("[SIGNATURE] [safari_signature_algorithms: %u][chrome_signature_algorithms: %u]\n",
 		       safari_signature_algorithms, chrome_signature_algorithms);
 #endif
 
 		if(flow->protos.tls_quic.browser_heuristics.is_firefox_tls)
 		  flow->protos.tls_quic.browser_heuristics.is_safari_tls = 0,
 		    flow->protos.tls_quic.browser_heuristics.is_chrome_tls = 0;
 
 		if(safari_signature_algorithms != 8)
 		  flow->protos.tls_quic.browser_heuristics.is_safari_tls = 0;
 
 		if((chrome_signature_algorithms != 8) || duplicate_found)
 		  flow->protos.tls_quic.browser_heuristics.is_chrome_tls = 0;
 
 		/* Avoid Chrome and Safari overlaps, thing that cannot happen with Firefox */
 		if(flow->protos.tls_quic.browser_heuristics.is_safari_tls)
 		  flow->protos.tls_quic.browser_heuristics.is_chrome_tls = 0;
 
 		if((flow->protos.tls_quic.browser_heuristics.is_chrome_tls == 0)
 		   && duplicate_found)
 		  flow->protos.tls_quic.browser_heuristics.is_safari_tls = 1; /* Safari */
 
 #ifdef DEBUG_HEURISTIC
 		printf("[SIGNATURE] [is_firefox_tls: %u][is_chrome_tls: %u][is_safari_tls: %u][duplicate_found: %u]\n",
 		       flow->protos.tls_quic.browser_heuristics.is_firefox_tls,
 		       flow->protos.tls_quic.browser_heuristics.is_chrome_tls,
 		       flow->protos.tls_quic.browser_heuristics.is_safari_tls,
 		       duplicate_found);
 #endif
 
 		if(i > 0 && i >= tot_signature_algorithms_len) {
 		  ja.client.signature_algorithms_str[i*2 - 1] = '\0';
 		} else {
 		  ja.client.signature_algorithms_str[i*2] = '\0';
 		}
 
 #ifdef DEBUG_TLS
 		printf("Client TLS [SIGNATURE_ALGORITHMS: %s]\n", ja.client.signature_algorithms_str);
 #endif
 	      } else if(extension_id == 16 /* application_layer_protocol_negotiation */ &&
 	                offset+extension_offset+1 < total_len) {
 		u_int16_t s_offset = offset+extension_offset;
 		u_int16_t tot_alpn_len = ntohs(*((u_int16_t*)&packet->payload[s_offset]));
 		char alpn_str[256];
 		u_int16_t alpn_str_len = 0, i;
 
 #ifdef DEBUG_TLS
 		printf("Client TLS [ALPN: block_len=%u/len=%u]\n", extension_len, tot_alpn_len);
 #endif
 		s_offset += 2;
 		tot_alpn_len += s_offset;
 
 		while(s_offset < tot_alpn_len && s_offset < total_len) {
 		  u_int8_t alpn_i, alpn_len = packet->payload[s_offset++];
 
 		  if((s_offset + alpn_len) <= tot_alpn_len &&
 		     (s_offset + alpn_len) <= total_len) {
 #ifdef DEBUG_TLS
 		    printf("Client TLS [ALPN: %u]\n", alpn_len);
 #endif
 
 		    if(((uint32_t)alpn_str_len+alpn_len+1) < (sizeof(alpn_str)-1)) {
 		      if(alpn_str_len > 0) {
 			alpn_str[alpn_str_len] = ',';
 			alpn_str_len++;
 		      }
 
 		      for(alpn_i=0; alpn_i<alpn_len; alpn_i++)
 			alpn_str[alpn_str_len+alpn_i] = packet->payload[s_offset+alpn_i];
 
 		      s_offset += alpn_len, alpn_str_len += alpn_len;;
 		    } else
 		      break;
 		  } else
 		    break;
 		} /* while */
 
 		alpn_str[alpn_str_len] = '\0';
 
 #ifdef DEBUG_TLS
 		printf("Client TLS [ALPN: %s][len: %u]\n", alpn_str, alpn_str_len);
 #endif
 		if(flow->protos.tls_quic.advertised_alpns == NULL) {
 		  flow->protos.tls_quic.advertised_alpns = ndpi_strdup(alpn_str);
 		  if(flow->protos.tls_quic.advertised_alpns) {
 		    tlsCheckUncommonALPN(ndpi_struct, flow, flow->protos.tls_quic.advertised_alpns);
 
 		    /* Without SNI matching we can try to sub-classify the flow via ALPN.
 		       Note that this happens only on very rare cases, not the common ones
 		       ("h2", "http/1.1", ...). Usefull for asymmetric traffic */
 		    if(!flow->protos.tls_quic.subprotocol_detected)
 	              tls_subclassify_by_alpn(ndpi_struct, flow);
 		  }
 		}
 
                 alpn_str_len = ndpi_min(sizeof(ja.client.alpn), (size_t)alpn_str_len);
 		memcpy(ja.client.alpn, alpn_str, alpn_str_len);
 		if(alpn_str_len > 0)
 		  ja.client.alpn[alpn_str_len - 1] = '\0';
 
 		/* Replace , with - as in JA3 */
 		for(i=0; ja.client.alpn[i] != '\0'; i++)
 		  if(ja.client.alpn[i] == ',') ja.client.alpn[i] = '-';
 
 	      } else if(extension_id == 43 /* supported versions */ &&
 	                offset+extension_offset < total_len) {
 		u_int16_t s_offset = offset+extension_offset;
 		u_int8_t version_len = packet->payload[s_offset];
 		char version_str[256];
 		char buf_ver_tmp[16];
 		size_t version_str_len = 0;
 		version_str[0] = 0;
 #ifdef DEBUG_TLS
 		printf("Client TLS [TLS version len: %u]\n", version_len);
 #endif
 
 		if(version_len == (extension_len-1)) {
 		  u_int8_t j;
 
 		  s_offset++;
 
 		  // careful not to overflow and loop forever with u_int8_t
 		  for(j=0; j+1<version_len && s_offset + j + 1 < packet->payload_packet_len; j += 2) {
 		    u_int16_t tls_version = ntohs(*((u_int16_t*)&packet->payload[s_offset+j]));
 		    u_int8_t unknown_tls_version;
 
 #ifdef DEBUG_TLS
 		    printf("Client TLS [TLS version: %s/0x%04X]\n",
 			   ndpi_ssl_version2str(buf_ver_tmp, sizeof(buf_ver_tmp), tls_version, &unknown_tls_version), tls_version);
 #endif
 
 		    if((version_str_len+8) < sizeof(version_str)) {
 		      int rc = ndpi_snprintf(&version_str[version_str_len],
 					     sizeof(version_str) - version_str_len, "%s%s",
 					     (version_str_len > 0) ? "," : "",
 					     ndpi_ssl_version2str(buf_ver_tmp, sizeof(buf_ver_tmp), tls_version, &unknown_tls_version));
 		      if(rc <= 0)
 			break;
 		      else
 			version_str_len += rc;
 
 		      if(ja.client.num_supported_versions < MAX_NUM_JA)
 			ja.client.supported_versions[ja.client.num_supported_versions++] = tls_version;
 		    }
 		  }
 
 #ifdef DEBUG_TLS
 		  printf("Client TLS [SUPPORTED_VERSIONS: %s]\n", ja.client.supported_versions_str);
 #endif
 
 		  if(flow->protos.tls_quic.tls_supported_versions == NULL)
 		    flow->protos.tls_quic.tls_supported_versions = ndpi_strdup(version_str);
 		}
 	      } else if(extension_id == 65486 /* encrypted server name */ &&
 	                offset+extension_offset+1 < total_len) {
 		/*
 		  - https://tools.ietf.org/html/draft-ietf-tls-esni-06
 		  - https://blog.cloudflare.com/encrypted-sni/
 		*/
 		int e_offset = offset+extension_offset;
 		int e_sni_len;
 		int initial_offset = e_offset;
 		u_int16_t cipher_suite = ntohs(*((u_int16_t*)&packet->payload[e_offset]));
 
 		flow->protos.tls_quic.encrypted_sni.cipher_suite = cipher_suite;
 
 		e_offset += 2; /* Cipher suite len */
 
 		/* Key Share Entry */
 		e_offset += 2; /* Group */
 		if(e_offset + 2 < packet->payload_packet_len) {
 		  e_offset += ntohs(*((u_int16_t*)&packet->payload[e_offset])) + 2; /* Lenght */
 
 		  if((e_offset+4) < packet->payload_packet_len) {
 		    /* Record Digest */
 		    e_offset +=  ntohs(*((u_int16_t*)&packet->payload[e_offset])) + 2; /* Lenght */
 
 		    if((e_offset+4) < packet->payload_packet_len) {
 		      e_sni_len = ntohs(*((u_int16_t*)&packet->payload[e_offset]));
 		      e_offset += 2;
 
 		      if((e_offset+e_sni_len-(int)extension_len-initial_offset) >= 0 &&
 			 e_offset+e_sni_len < packet->payload_packet_len) {
 #ifdef DEBUG_ENCRYPTED_SNI
 			printf("Client TLS [Encrypted Server Name len: %u]\n", e_sni_len);
 #endif
 
 			if(flow->protos.tls_quic.encrypted_sni.esni == NULL) {
 			  flow->protos.tls_quic.encrypted_sni.esni = (char*)ndpi_malloc(e_sni_len*2+1);
 
 			  if(flow->protos.tls_quic.encrypted_sni.esni) {
 			    u_int16_t off;
 			    int i;
 
 			    for(i=e_offset, off=0; i<(e_offset+e_sni_len); i++) {
 			      int rc = sprintf(&flow->protos.tls_quic.encrypted_sni.esni[off], "%02X", packet->payload[i] & 0XFF);
 
 			      if(rc <= 0) {
 				break;
 			      } else
 				off += rc;
 			    }
 			    flow->protos.tls_quic.encrypted_sni.esni[off] = '\0';
 			  }
 			}
 		      }
 		    }
 		  }
 		}
 	      } else if(extension_id == 65037 /* ECH: latest drafts */) {
 #ifdef DEBUG_TLS
 		printf("Client TLS: ECH version 0x%x\n", extension_id);
 #endif
 		/* Beginning with draft-08, the version is the same as the code point
 		   for the "encrypted_client_hello" extension. */
 		flow->protos.tls_quic.encrypted_ch.version = extension_id;
 	      } else if(extension_id == 65445 || /* QUIC transport parameters (drafts version) */
 		        extension_id == 57) { /* QUIC transport parameters (final version) */
 		u_int16_t s_offset = offset+extension_offset;
 		uint16_t final_offset;
 		int using_var_int = is_version_with_var_int_transport_params(quic_version);
 
 		if(!using_var_int) {
 		  if(s_offset+1 >= total_len) {
 		    final_offset = 0; /* Force skipping extension */
 		  } else {
 		    u_int16_t seq_len = ntohs(*((u_int16_t*)&packet->payload[s_offset]));
 		    s_offset += 2;
 	            final_offset = ndpi_min(total_len, s_offset + seq_len);
 		  }
 		} else {
 	          final_offset = ndpi_min(total_len, s_offset + extension_len);
 		}
 
 		while(s_offset < final_offset) {
 		  u_int64_t param_type, param_len;
 
                   if(!using_var_int) {
 		    if(s_offset+3 >= final_offset)
 		      break;
 		    param_type = ntohs(*((u_int16_t*)&packet->payload[s_offset]));
 		    param_len = ntohs(*((u_int16_t*)&packet->payload[s_offset + 2]));
 		    s_offset += 4;
 		  } else {
 		    if(s_offset >= final_offset ||
 		       (s_offset + quic_len_buffer_still_required(packet->payload[s_offset])) >= final_offset)
 		      break;
 		    s_offset += quic_len(&packet->payload[s_offset], &param_type);
 
 		    if(s_offset >= final_offset ||
 		       (s_offset + quic_len_buffer_still_required(packet->payload[s_offset])) >= final_offset)
 		      break;
 		    s_offset += quic_len(&packet->payload[s_offset], &param_len);
 		  }
 
 #ifdef DEBUG_TLS
 		  printf("Client TLS [QUIC TP: Param 0x%x Len %d]\n", (int)param_type, (int)param_len);
 #endif
 		  if(s_offset+param_len > final_offset)
 		    break;
 
 		  if(param_type==0x3129) {
 #ifdef DEBUG_TLS
 		    printf("UA [%.*s]\n", (int)param_len, &packet->payload[s_offset]);
 #endif
 		    http_process_user_agent(ndpi_struct, flow,
 					    &packet->payload[s_offset], param_len);
 		    break;
 		  }
 		  s_offset += param_len;
 		}
 	      }
 
 	      extension_offset += extension_len; /* Move to the next extension */
 
 #ifdef DEBUG_TLS
 	      printf("Client TLS [extension_offset/len: %u/%u]\n", extension_offset, extension_len);
 #endif
 	    } /* while */
 
 	    if(!invalid_ja) {
 	      /* Compute JA3 client */
 	      int rc;
 
 	    compute_ja3c:
 	      ja_str_len = ndpi_snprintf(ja_str, JA_STR_LEN, "%u,", ja.client.tls_handshake_version);
 
 	      for(i=0; i<ja.client.num_ciphers; i++) {
 		rc = ndpi_snprintf(&ja_str[ja_str_len], JA_STR_LEN-ja_str_len, "%s%u",
 				   (i > 0) ? "-" : "", ja.client.cipher[i]);
 		if((rc > 0) && (ja_str_len + rc < JA_STR_LEN)) ja_str_len += rc; else break;
 	      }
 
 	      rc = ndpi_snprintf(&ja_str[ja_str_len], JA_STR_LEN-ja_str_len, ",");
 	      if((rc > 0) && (ja_str_len + rc < JA_STR_LEN)) ja_str_len += rc;
 
 	      /* ********** */
 
 	      for(i=0; i<ja.client.num_tls_extensions; i++) {
 		rc = ndpi_snprintf(&ja_str[ja_str_len], JA_STR_LEN-ja_str_len, "%s%u",
 				   (i > 0) ? "-" : "", ja.client.tls_extension[i]);
 		if((rc > 0) && (ja_str_len + rc < JA_STR_LEN)) ja_str_len += rc; else break;
 	      }
 
 	      rc = ndpi_snprintf(&ja_str[ja_str_len], JA_STR_LEN-ja_str_len, ",");
 	      if((rc > 0) && (ja_str_len + rc < JA_STR_LEN)) ja_str_len += rc;
 
 	      /* ********** */
 
 	      for(i=0; i<ja.client.num_elliptic_curve; i++) {
 		rc = ndpi_snprintf(&ja_str[ja_str_len], JA_STR_LEN-ja_str_len, "%s%u",
 				   (i > 0) ? "-" : "", ja.client.elliptic_curve[i]);
 		if((rc > 0) && (ja_str_len + rc < JA_STR_LEN)) ja_str_len += rc; else break;
 	      }
 
 	      rc = ndpi_snprintf(&ja_str[ja_str_len], JA_STR_LEN-ja_str_len, ",");
 	      if((rc > 0) && (ja_str_len + rc < JA_STR_LEN)) ja_str_len += rc;
 
 	      for(i=0; i<ja.client.num_elliptic_curve_point_format; i++) {
 		rc = ndpi_snprintf(&ja_str[ja_str_len], JA_STR_LEN-ja_str_len, "%s%u",
 				   (i > 0) ? "-" : "", ja.client.elliptic_curve_point_format[i]);
 		if((rc > 0) && (ja_str_len + rc < JA_STR_LEN)) ja_str_len += rc; else break;
 	      }
 
 	      ndpi_MD5Init(&ctx);
 	      ndpi_MD5Update(&ctx, (const unsigned char *)ja_str, strlen(ja_str));
 	      ndpi_MD5Final(md5_hash, &ctx);
 
 	      for(i=0, j=0; i<16; i++) {
 		rc = ndpi_snprintf(&flow->protos.tls_quic.ja3_client[j],
 				   sizeof(flow->protos.tls_quic.ja3_client)-j, "%02x",
 				   md5_hash[i]);
 		if(rc > 0) j += rc; else break;
 	      }
 
 #ifdef DEBUG_JA
 	      printf("[JA3] Client: %s \n", flow->protos.tls_quic.ja3_client);
 #endif
 
 	      if(ndpi_struct->malicious_ja3_hashmap != NULL) {
 	        u_int16_t rc1 = ndpi_hash_find_entry(ndpi_struct->malicious_ja3_hashmap,
 	                                             flow->protos.tls_quic.ja3_client,
 	                                             NDPI_ARRAY_LENGTH(flow->protos.tls_quic.ja3_client) - 1,
 	                                             NULL);
 
 	      if(rc1 == 0)
 	        ndpi_set_risk(ndpi_struct, flow, NDPI_MALICIOUS_JA3, flow->protos.tls_quic.ja3_client);
 	      }
 
 	      ndpi_compute_ja4(ndpi_struct, flow, quic_version, &ja);
 	      /* End JA3/JA4 */
 	    }
 
 	    /* Before returning to the caller we need to make a final check */
 	    if((flow->protos.tls_quic.ssl_version >= 0x0303) /* >= TLSv1.2 */
 	       && (flow->protos.tls_quic.advertised_alpns == NULL) /* No ALPN */) {
 	      ndpi_set_risk(ndpi_struct, flow, NDPI_TLS_NOT_CARRYING_HTTPS, "No ALPN");
 	    }
 
 	    /* Suspicious Domain Fronting:
 	       https://github.com/SixGenInc/Noctilucent/blob/master/docs/ */
 	    if(flow->protos.tls_quic.encrypted_sni.esni &&
 	       flow->host_server_name[0] != '\0') {
 	      ndpi_set_risk(ndpi_struct, flow, NDPI_TLS_SUSPICIOUS_ESNI_USAGE, "Found ESNI w/o SNI");
 	    }
 
 	    /* Add check for missing SNI */
 	    if(flow->host_server_name[0] == '\0'
 	       && (flow->protos.tls_quic.ssl_version >= 0x0302) /* TLSv1.1 */
 	       && (flow->protos.tls_quic.encrypted_sni.esni == NULL) /* No ESNI */
 	       ) {
 	      /* This is a bit suspicious */
 	      ndpi_set_risk(ndpi_struct, flow, NDPI_TLS_MISSING_SNI, NULL);
 
 	      if(flow->protos.tls_quic.advertised_alpns != NULL) {
 		char buf[256], *tmp, *item;
 
 		snprintf(buf, sizeof(buf), "%s", flow->protos.tls_quic.advertised_alpns);
 
 		item = strtok_r(buf, ",", &tmp);
 
 		while(item != NULL) {
 		  if(item[0] == 'h') {
 		    /* Example 'h2' */
 		    ndpi_set_risk(ndpi_struct, flow, NDPI_TLS_ALPN_SNI_MISMATCH, NULL);
 		    break;
 		  } else
 		    item = strtok_r(NULL, ",", &tmp);
 		}
 	      }
 	    }
 
 	    return(2 /* Client Certificate */);
 	  } else {
 #ifdef DEBUG_TLS
 	    printf("[TLS] Client: too short [%u vs %u]\n",
 		   (extensions_len+offset), total_len);
 #endif
 	  }
 	} else if(offset == total_len) {
 	  /* TLS does not have extensions etc */
 	  goto compute_ja3c;
 	}
       } else {
 #ifdef DEBUG_TLS
 	printf("[JA3] Client: invalid length detected\n");
 #endif
       }
     }
   }
 
   return(0); /* Not found */
 }
 
 /* **************************************** */
