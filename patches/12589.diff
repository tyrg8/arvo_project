commit a00c53883001654444f45db8c15aff38e15b4a04
Author: Jonathan Hui <jonhui@nestlabs.com>
Date:   Wed Jan 23 21:49:37 2019 -0800

    [network-data] add prefix length checks (#3498)

diff --git a/src/core/thread/network_data_local.cpp b/src/core/thread/network_data_local.cpp
index 65b85a23e..3e63250a7 100644
--- a/src/core/thread/network_data_local.cpp
+++ b/src/core/thread/network_data_local.cpp
@@ -54,38 +54,40 @@ Local::Local(Instance &aInstance)
 otError Local::AddOnMeshPrefix(const uint8_t *aPrefix, uint8_t aPrefixLength, int8_t aPrf, uint8_t aFlags, bool aStable)
 {
     otError          error             = OT_ERROR_NONE;
     uint8_t          prefixLengthBytes = BitVectorBytes(aPrefixLength);
     uint8_t          appendLength;
     PrefixTlv *      prefixTlv;
     BorderRouterTlv *brTlv;
 
+    VerifyOrExit(prefixLengthBytes <= sizeof(Ip6::Address), error = OT_ERROR_INVALID_ARGS);
+
     VerifyOrExit(Ip6::Address::PrefixMatch(aPrefix, GetNetif().GetMle().GetMeshLocalPrefix().m8, prefixLengthBytes) <
                      Ip6::Address::kMeshLocalPrefixLength,
                  error = OT_ERROR_INVALID_ARGS);
 
     RemoveOnMeshPrefix(aPrefix, aPrefixLength);
 
     appendLength = sizeof(PrefixTlv) + prefixLengthBytes + sizeof(BorderRouterTlv) + sizeof(BorderRouterEntry);
     VerifyOrExit(mLength + appendLength <= sizeof(mTlvs), error = OT_ERROR_NO_BUFS);
 
     prefixTlv = reinterpret_cast<PrefixTlv *>(mTlvs + mLength);
     Insert(reinterpret_cast<uint8_t *>(prefixTlv), appendLength);
     prefixTlv->Init(0, aPrefixLength, aPrefix);
     prefixTlv->SetSubTlvsLength(sizeof(BorderRouterTlv) + sizeof(BorderRouterEntry));
 
     brTlv = static_cast<BorderRouterTlv *>(prefixTlv->GetSubTlvs());
     brTlv->Init();
     brTlv->SetLength(brTlv->GetLength() + sizeof(BorderRouterEntry));
     brTlv->GetEntry(0)->Init();
     brTlv->GetEntry(0)->SetPreference(aPrf);
     brTlv->GetEntry(0)->SetFlags(aFlags);
 
     if (aStable)
     {
         prefixTlv->SetStable();
         brTlv->SetStable();
     }
 
     ClearResubmitDelayTimer();
 
     otDumpDebgNetData("add prefix done", mTlvs, mLength);
@@ -111,33 +113,36 @@ exit:
 
 otError Local::AddHasRoutePrefix(const uint8_t *aPrefix, uint8_t aPrefixLength, int8_t aPrf, bool aStable)
 {
-    otError      error = OT_ERROR_NONE;
+    otError      error             = OT_ERROR_NONE;
+    uint8_t      prefixLengthBytes = BitVectorBytes(aPrefixLength);
     PrefixTlv *  prefixTlv;
     HasRouteTlv *hasRouteTlv;
     uint8_t      appendLength;
 
+    VerifyOrExit(prefixLengthBytes <= sizeof(Ip6::Address), error = OT_ERROR_INVALID_ARGS);
+
     RemoveHasRoutePrefix(aPrefix, aPrefixLength);
 
-    appendLength = sizeof(PrefixTlv) + BitVectorBytes(aPrefixLength) + sizeof(HasRouteTlv) + sizeof(HasRouteEntry);
+    appendLength = sizeof(PrefixTlv) + prefixLengthBytes + sizeof(HasRouteTlv) + sizeof(HasRouteEntry);
     VerifyOrExit(mLength + appendLength <= sizeof(mTlvs), error = OT_ERROR_NO_BUFS);
 
     prefixTlv = reinterpret_cast<PrefixTlv *>(mTlvs + mLength);
     Insert(reinterpret_cast<uint8_t *>(prefixTlv), appendLength);
     prefixTlv->Init(0, aPrefixLength, aPrefix);
     prefixTlv->SetSubTlvsLength(sizeof(HasRouteTlv) + sizeof(HasRouteEntry));
 
     hasRouteTlv = static_cast<HasRouteTlv *>(prefixTlv->GetSubTlvs());
     hasRouteTlv->Init();
     hasRouteTlv->SetLength(hasRouteTlv->GetLength() + sizeof(HasRouteEntry));
     hasRouteTlv->GetEntry(0)->Init();
     hasRouteTlv->GetEntry(0)->SetPreference(aPrf);
 
     if (aStable)
     {
         prefixTlv->SetStable();
         hasRouteTlv->SetStable();
     }
 
     ClearResubmitDelayTimer();
 
     otDumpDebgNetData("add route done", mTlvs, mLength);
