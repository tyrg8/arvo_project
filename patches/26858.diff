commit 0b82f071157db9848f45dd8cf07ced05c8eb8022
Author: Paul Dreik <github@pauldreik.se>
Date:   Sun Nov 1 18:27:21 2020 +0100

    fix segfault in numberparsing #1273 (#1274)
    
    This was a read overflow.

diff --git a/include/simdjson/generic/numberparsing.h b/include/simdjson/generic/numberparsing.h
index 934e57e3..098a90b0 100644
--- a/include/simdjson/generic/numberparsing.h
+++ b/include/simdjson/generic/numberparsing.h
@@ -30,263 +30,265 @@ simdjson_really_inline double to_double(uint64_t mantissa, uint64_t real_exponen
     double d;
     mantissa &= ~(1ULL << 52);
     mantissa |= real_exponent << 52;
     mantissa |= (((uint64_t)negative) << 63);
     std::memcpy(&d, &mantissa, sizeof(d));
     return d;
 }
 }
 // Attempts to compute i * 10^(power) exactly; and if "negative" is
 // true, negate the result.
 // This function will only work in some cases, when it does not work, success is
 // set to false. This should work *most of the time* (like 99% of the time).
 // We assume that power is in the [smallest_power,
 // largest_power] interval: the caller is responsible for this check.
 simdjson_really_inline bool compute_float_64(int64_t power, uint64_t i, bool negative, double &d) {
+  assert(power>=simdjson::internal::smallest_power);
+  assert(power<=simdjson::internal::largest_power);
   // we start with a fast path
   // It was described in
   // Clinger WD. How to read floating point numbers accurately.
   // ACM SIGPLAN Notices. 1990
 #ifndef FLT_EVAL_METHOD
 #error "FLT_EVAL_METHOD should be defined, please include cfloat."
 #endif
 #if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   // We cannot be certain that x/y is rounded to nearest.
   if (0 <= power && power <= 22 && i <= 9007199254740991) {
 #else
   if (-22 <= power && power <= 22 && i <= 9007199254740991) {
 #endif
     // convert the integer into a double. This is lossless since
     // 0 <= i <= 2^53 - 1.
     d = double(i);
     //
     // The general idea is as follows.
     // If 0 <= s < 2^53 and if 10^0 <= p <= 10^22 then
     // 1) Both s and p can be represented exactly as 64-bit floating-point
     // values
     // (binary64).
     // 2) Because s and p can be represented exactly as floating-point values,
     // then s * p
     // and s / p will produce correctly rounded values.
     //
     if (power < 0) {
       d = d / simdjson::internal::power_of_ten[-power];
     } else {
       d = d * simdjson::internal::power_of_ten[power];
     }
     if (negative) {
       d = -d;
     }
     return true;
   }
   // When 22 < power && power <  22 + 16, we could
   // hope for another, secondary fast path.  It was
   // described by David M. Gay in  "Correctly rounded
   // binary-decimal and decimal-binary conversions." (1990)
   // If you need to compute i * 10^(22 + x) for x < 16,
   // first compute i * 10^x, if you know that result is exact
   // (e.g., when i * 10^x < 2^53),
   // then you can still proceed and do (i * 10^x) * 10^22.
   // Is this worth your time?
   // You need  22 < power *and* power <  22 + 16 *and* (i * 10^(x-22) < 2^53)
   // for this second fast path to work.
   // If you you have 22 < power *and* power <  22 + 16, and then you
   // optimistically compute "i * 10^(x-22)", there is still a chance that you
   // have wasted your time if i * 10^(x-22) >= 2^53. It makes the use cases of
   // this optimization maybe less common than we would like. Source:
   // http://www.exploringbinary.com/fast-path-decimal-to-floating-point-conversion/
   // also used in RapidJSON: https://rapidjson.org/strtod_8h_source.html
 
   // The fast path has now failed, so we are failing back on the slower path.
 
   // In the slow path, we need to adjust i so that it is > 1<<63 which is always
   // possible, except if i == 0, so we handle i == 0 separately.
   if(i == 0) {
     d = 0.0;
     return true;
   }
 
 
   // The exponent is 1024 + 63 + power
   //     + floor(log(5**power)/log(2)).
   // The 1024 comes from the ieee64 standard.
   // The 63 comes from the fact that we use a 64-bit word.
   //
   // Computing floor(log(5**power)/log(2)) could be
   // slow. Instead we use a fast function.
   //
   // For power in (-400,350), we have that
   // (((152170 + 65536) * power ) >> 16);
   // is equal to
   //  floor(log(5**power)/log(2)) + power
   //
   // The 65536 is (1<<16) and corresponds to
   // (65536 * power) >> 16 ---> power
   //
   // ((152170 * power ) >> 16) is equal to
   // floor(log(5**power)/log(2))
   //
   // Note that this is not magic: 152170/(1<<16) is
   // approximatively equal to log(5)/log(2).
   // The 1<<16 value is a power of two; we could use a
   // larger power of 2 if we wanted to.
   //
   int64_t exponent = (((152170 + 65536) * power) >> 16) + 1024 + 63;
 
 
   // We want the most significant bit of i to be 1. Shift if needed.
   int lz = leading_zeroes(i);
   i <<= lz;
 
 
   // We are going to need to do some 64-bit arithmetic to get a precise product.
   // We use a table lookup approach.
   // It is safe because
   // power >= smallest_power
   // and power <= largest_power
   // We recover the mantissa of the power, it has a leading 1. It is always
   // rounded down.
   //
   // We want the most significant 64 bits of the product. We know
   // this will be non-zero because the most significant bit of i is
   // 1.
   const uint32_t index = 2 * uint32_t(power - simdjson::internal::smallest_power); 
   // Optimization: It may be that materializing the index as a variable might confuse some compilers and prevent effective complex-addressing loads. (Done for code clarity.)
   //
   // The full_multiplication function computes the 128-bit product of two 64-bit words
   // with a returned value of type value128 with a "low component" corresponding to the
   // 64-bit least significant bits of the product and with a "high component" corresponding
   // to the 64-bit most significant bits of the product.
   simdjson::internal::value128 firstproduct = jsoncharutils::full_multiplication(i, simdjson::internal::power_of_five_128[index]);
   // Both i and power_of_five_128[index] have their most significant bit set to 1 which
   // implies that the either the most or the second most significant bit of the product 
   // is 1. We pack values in this manner for efficiency reasons: it maximizes the use
   // we make of the product. It also makes it easy to reason aboutthe product: there
   // 0 or 1 leading zero in the product.
 
   // Unless the least significant 9 bits of the high (64-bit) part of the full
   // product are all 1s, then we know that the most significant 55 bits are
   // exact and no further work is needed. Having 55 bits is necessary because
   // we need 53 bits for the mantissa but we have to have one rounding bit and
   // we can waste a bit if the most significant bit of the product is zero.
   if((firstproduct.high & 0x1FF) == 0x1FF) {
     // We want to compute i * 5^q, but only care about the top 55 bits at most.
     // Consider the scenario where q>=0. Then 5^q may not fit in 64-bits. Doing
     // the full computation is wasteful. So we do what is called a "truncated
     // multiplication".
     // We take the most significant 64-bits, and we put them in 
     // power_of_five_128[index]. Usually, that's good enough to approximate i * 5^q
     // to the desired approximation using one multiplication. Sometimes it does not suffice. 
     // Then we store the next most significant 64 bits in power_of_five_128[index + 1], and
     // then we get a better approximation to i * 5^q. In very rare cases, even that
     // will not suffice, though it is seemingly very hard to find such a scenario.
     // 
     // That's for when q>=0. The logic for q<0 is somewhat similar but it is somewhat
     // more complicated.
     //
     // There is an extra layer of complexity in that we need more than 55 bits of 
     // accuracy in the round-to-even scenario.
     //
     // The full_multiplication function computes the 128-bit product of two 64-bit words
     // with a returned value of type value128 with a "low component" corresponding to the
     // 64-bit least significant bits of the product and with a "high component" corresponding
     // to the 64-bit most significant bits of the product.
     simdjson::internal::value128 secondproduct = jsoncharutils::full_multiplication(i, simdjson::internal::power_of_five_128[index + 1]);
     firstproduct.low += secondproduct.high;
     if(secondproduct.high > firstproduct.low) { firstproduct.high++; }
     // At this point, we might need to add at most one to firstproduct, but this
     // can only change the value of firstproduct.high if firstproduct.low is maximal.
     if(simdjson_unlikely(firstproduct.low  == 0xFFFFFFFFFFFFFFFF)) {
       // This is very unlikely, but if so, we need to do much more work!
       return false;
     }
   }
   uint64_t lower = firstproduct.low;
   uint64_t upper = firstproduct.high;
   // The final mantissa should be 53 bits with a leading 1.
   // We shift it so that it occupies 54 bits with a leading 1.
   ///////
   uint64_t upperbit = upper >> 63;
   uint64_t mantissa = upper >> (upperbit + 9);
   lz += int(1 ^ upperbit);
 
   // Here we have mantissa < (1<<54).
   int64_t real_exponent = exponent - lz;
   if (simdjson_unlikely(real_exponent <= 0)) { // we have a subnormal?
     // Here have that real_exponent <= 0 so -real_exponent >= 0
     if(-real_exponent + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
       d = 0.0;
       return true;
     } 
     // next line is safe because -real_exponent + 1 < 0
     mantissa >>= -real_exponent + 1;
     // Thankfully, we can't have both "round-to-even" and subnormals because
     // "round-to-even" only occurs for powers close to 0.
     mantissa += (mantissa & 1); // round up
     mantissa >>= 1;
     // There is a weird scenario where we don't have a subnormal but just.
     // Suppose we start with 2.2250738585072013e-308, we end up
     // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
     // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
     // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
     // subnormal, but we can only know this after rounding.
     // So we only declare a subnormal if we are smaller than the threshold.    
     real_exponent = (mantissa < (uint64_t(1) << 52)) ? 0 : 1;
     d = to_double(mantissa, real_exponent, negative);
     return true;
   }
   // We have to round to even. The "to even" part
   // is only a problem when we are right in between two floats
   // which we guard against.
   // If we have lots of trailing zeros, we may fall right between two
   // floating-point values.
   // 
   // The round-to-even cases take the form of a number 2m+1 which is in (2^53,2^54]
   // times a power of two. That is, it is right between a number with binary significand
   // m and another number with binary significand m+1; and it must be the case
   // that it cannot be represented by a float itself.
   //
   // We must have that w * 10 ^q == (2m+1) * 2^p for some power of two 2^p.
   // Recall that 10^q = 5^q * 2^q.
   // When q >= 0, we must have that (2m+1) is divible by 5^q, so 5^q <= 2^54. We have that
   //  5^23 <=  2^54 and it is the last power of five to qualify, so q <= 23.
   // When q<0, we have  w  >=  (2m+1) x 5^{-q}.  We must have that w<2^{64} so
   // (2m+1) x 5^{-q} < 2^{64}. We have that 2m+1>2^{53}. Hence, we must have 
   // 2^{53} x 5^{-q} < 2^{64}.
   // Hence we have 5^{-q} < 2^{11}$ or q>= -4. 
   //
   // We require lower <= 1 and not lower == 0 because we could not prove that 
   // that lower == 0 is implied; but we could prove that lower <= 1 is a necessary and sufficient test.
   if (simdjson_unlikely((lower <= 1) && (power >= -4) && (power <= 23) && ((mantissa & 3) == 1))) {
     if((mantissa  << (upperbit + 64 - 53 - 2)) ==  upper) {
       mantissa &= ~1;             // flip it so that we do not round up
     }
   }
 
   mantissa += mantissa & 1;
   mantissa >>= 1;
 
   // Here we have mantissa < (1<<53), unless there was an overflow
   if (mantissa >= (1ULL << 53)) {
     //////////
     // This will happen when parsing values such as 7.2057594037927933e+16
     ////////
     mantissa = (1ULL << 52);
     real_exponent++;
   }
   mantissa &= ~(1ULL << 52);
   // we have to check that real_exponent is in range, otherwise we bail out
   if (simdjson_unlikely(real_exponent > 2046)) {
     // We have an infinte value!!! We could actually throw an error here if we could.
     return false;
   }
   d = to_double(mantissa, real_exponent, negative);
   return true;
 }
 
 // We call a fallback floating-point parser that might be slow. Note
 // it will accept JSON numbers, but the JSON spec. is more restrictive so
 // before you call parse_float_fallback, you need to have validated the input
 // string with the JSON grammar.
 // It will return an error (false) if the parsed number is infinite.
 // The string parsing itself always succeeds. We know that there is at least
 // one digit.
@@ -679,82 +681,83 @@ simdjson_unused simdjson_really_inline simdjson_result<int64_t> parse_integer(co
 simdjson_unused simdjson_really_inline simdjson_result<double> parse_double(const uint8_t * src) noexcept {
   //
   // Check for minus sign
   //
   bool negative = (*src == '-');
   src += negative;
 
   //
   // Parse the integer part.
   //
   uint64_t i = 0;
   const uint8_t *p = src;
   p += parse_digit(*p, i);
   bool leading_zero = (i == 0);
   while (parse_digit(*p, i)) { p++; }
   // no integer digits, or 0123 (zero must be solo)
   if ( p == src || (leading_zero && p != src+1)) { return NUMBER_ERROR; }
 
   //
   // Parse the decimal part.
   //
   int64_t exponent = 0;
   bool overflow;
   if (simdjson_likely(*p == '.')) {
     p++;
     const uint8_t *start_decimal_digits = p;
     if (!parse_digit(*p, i)) { return NUMBER_ERROR; } // no decimal digits
     p++;
     while (parse_digit(*p, i)) { p++; }
     exponent = -(p - start_decimal_digits);
 
     // Overflow check. More than 19 digits (minus the decimal) may be overflow.
     overflow = p-src-1 > 19;
     if (simdjson_unlikely(overflow && leading_zero)) {
       // Skip leading 0.00000 and see if it still overflows
       const uint8_t *start_digits = src + 2;
       while (*start_digits == '0') { start_digits++; }
       overflow = start_digits-src > 19;
     }
   } else {
     overflow = p-src > 19;
   }
 
   //
   // Parse the exponent
   //
   if (*p == 'e' || *p == 'E') {
     p++;
     bool exp_neg = *p == '-';
     p += exp_neg || *p == '+';
 
     uint64_t exp = 0;
     const uint8_t *start_exp_digits = p;
     while (parse_digit(*p, exp)) { p++; }
     // no exp digits, or 20+ exp digits
     if (p-start_exp_digits == 0 || p-start_exp_digits > 19) { return NUMBER_ERROR; }
 
     exponent += exp_neg ? 0-exp : exp;
-    overflow = overflow || exponent < simdjson::internal::smallest_power || exponent > simdjson::internal::largest_power;
   }
 
   if (jsoncharutils::is_not_structural_or_whitespace(*p)) { return NUMBER_ERROR; }
 
+  overflow = overflow || exponent < simdjson::internal::smallest_power || exponent > simdjson::internal::largest_power;
+
   //
   // Assemble (or slow-parse) the float
   //
   double d;
   if (simdjson_likely(!overflow)) {
     if (compute_float_64(exponent, i, negative, d)) { return d; }
   }
   if (!parse_float_fallback(src-negative, &d)) {
     return NUMBER_ERROR;
   }
   return d;
 }
 } //namespace {}
 #endif // SIMDJSON_SKIPNUMBERPARSING
 
 } // namespace numberparsing
 } // unnamed namespace
 } // namespace SIMDJSON_IMPLEMENTATION
 } // namespace simdjson
diff --git a/tests/ondemand/ondemand_basictests.cpp b/tests/ondemand/ondemand_basictests.cpp
index 58766088..a7994b13 100644
--- a/tests/ondemand/ondemand_basictests.cpp
+++ b/tests/ondemand/ondemand_basictests.cpp
@@ -175,161 +175,176 @@ namespace active_tests {
 }
 namespace number_tests {
 
   // ulp distance
   // Marc B. Reynolds, 2016-2019
   // Public Domain under http://unlicense.org, see link for details.
   // adapted by D. Lemire
   inline uint64_t f64_ulp_dist(double a, double b) {
     uint64_t ua, ub;
     memcpy(&ua, &a, sizeof(ua));
     memcpy(&ub, &b, sizeof(ub));
     if ((int64_t)(ub ^ ua) >= 0)
       return (int64_t)(ua - ub) >= 0 ? (ua - ub) : (ub - ua);
     return ua + ub + 0x80000000;
   }
 
   bool small_integers() {
     std::cout << __func__ << std::endl;
     for (int64_t m = 10; m < 20; m++) {
       for (int64_t i = -1024; i < 1024; i++) {
         return test_ondemand<int64_t>(std::to_string(i), [&](int64_t actual) {
           ASSERT_EQUAL(actual, i);
           return true;
         });
       }
     }
     return true;
   }
 
   bool powers_of_two() {
     std::cout << __func__ << std::endl;
     char buf[1024];
     uint64_t maxulp = 0;
     for (int i = -1075; i < 1024; ++i) {// large negative values should be zero.
       double expected = pow(2, i);
       size_t n = snprintf(buf, sizeof(buf), "%.*e", std::numeric_limits<double>::max_digits10 - 1, expected);
       if (n >= sizeof(buf)) { abort(); }
       fflush(NULL);
       return test_ondemand<double>(padded_string(buf, n), [&](double actual) {
         uint64_t ulp = f64_ulp_dist(actual,expected);
         if(ulp > maxulp) maxulp = ulp;
         if(ulp > 0) {
           std::cerr << "JSON '" << buf << " parsed to ";
           fprintf( stderr," %18.18g instead of %18.18g\n", actual, expected); // formatting numbers is easier with printf
           SIMDJSON_SHOW_DEFINE(FLT_EVAL_METHOD);
           return false;
         }
         return true;
       });
     }
     return true;
   }
 
   static const double testing_power_of_ten[] = {
       1e-307, 1e-306, 1e-305, 1e-304, 1e-303, 1e-302, 1e-301, 1e-300, 1e-299,
       1e-298, 1e-297, 1e-296, 1e-295, 1e-294, 1e-293, 1e-292, 1e-291, 1e-290,
       1e-289, 1e-288, 1e-287, 1e-286, 1e-285, 1e-284, 1e-283, 1e-282, 1e-281,
       1e-280, 1e-279, 1e-278, 1e-277, 1e-276, 1e-275, 1e-274, 1e-273, 1e-272,
       1e-271, 1e-270, 1e-269, 1e-268, 1e-267, 1e-266, 1e-265, 1e-264, 1e-263,
       1e-262, 1e-261, 1e-260, 1e-259, 1e-258, 1e-257, 1e-256, 1e-255, 1e-254,
       1e-253, 1e-252, 1e-251, 1e-250, 1e-249, 1e-248, 1e-247, 1e-246, 1e-245,
       1e-244, 1e-243, 1e-242, 1e-241, 1e-240, 1e-239, 1e-238, 1e-237, 1e-236,
       1e-235, 1e-234, 1e-233, 1e-232, 1e-231, 1e-230, 1e-229, 1e-228, 1e-227,
       1e-226, 1e-225, 1e-224, 1e-223, 1e-222, 1e-221, 1e-220, 1e-219, 1e-218,
       1e-217, 1e-216, 1e-215, 1e-214, 1e-213, 1e-212, 1e-211, 1e-210, 1e-209,
       1e-208, 1e-207, 1e-206, 1e-205, 1e-204, 1e-203, 1e-202, 1e-201, 1e-200,
       1e-199, 1e-198, 1e-197, 1e-196, 1e-195, 1e-194, 1e-193, 1e-192, 1e-191,
       1e-190, 1e-189, 1e-188, 1e-187, 1e-186, 1e-185, 1e-184, 1e-183, 1e-182,
       1e-181, 1e-180, 1e-179, 1e-178, 1e-177, 1e-176, 1e-175, 1e-174, 1e-173,
       1e-172, 1e-171, 1e-170, 1e-169, 1e-168, 1e-167, 1e-166, 1e-165, 1e-164,
       1e-163, 1e-162, 1e-161, 1e-160, 1e-159, 1e-158, 1e-157, 1e-156, 1e-155,
       1e-154, 1e-153, 1e-152, 1e-151, 1e-150, 1e-149, 1e-148, 1e-147, 1e-146,
       1e-145, 1e-144, 1e-143, 1e-142, 1e-141, 1e-140, 1e-139, 1e-138, 1e-137,
       1e-136, 1e-135, 1e-134, 1e-133, 1e-132, 1e-131, 1e-130, 1e-129, 1e-128,
       1e-127, 1e-126, 1e-125, 1e-124, 1e-123, 1e-122, 1e-121, 1e-120, 1e-119,
       1e-118, 1e-117, 1e-116, 1e-115, 1e-114, 1e-113, 1e-112, 1e-111, 1e-110,
       1e-109, 1e-108, 1e-107, 1e-106, 1e-105, 1e-104, 1e-103, 1e-102, 1e-101,
       1e-100, 1e-99,  1e-98,  1e-97,  1e-96,  1e-95,  1e-94,  1e-93,  1e-92,
       1e-91,  1e-90,  1e-89,  1e-88,  1e-87,  1e-86,  1e-85,  1e-84,  1e-83,
       1e-82,  1e-81,  1e-80,  1e-79,  1e-78,  1e-77,  1e-76,  1e-75,  1e-74,
       1e-73,  1e-72,  1e-71,  1e-70,  1e-69,  1e-68,  1e-67,  1e-66,  1e-65,
       1e-64,  1e-63,  1e-62,  1e-61,  1e-60,  1e-59,  1e-58,  1e-57,  1e-56,
       1e-55,  1e-54,  1e-53,  1e-52,  1e-51,  1e-50,  1e-49,  1e-48,  1e-47,
       1e-46,  1e-45,  1e-44,  1e-43,  1e-42,  1e-41,  1e-40,  1e-39,  1e-38,
       1e-37,  1e-36,  1e-35,  1e-34,  1e-33,  1e-32,  1e-31,  1e-30,  1e-29,
       1e-28,  1e-27,  1e-26,  1e-25,  1e-24,  1e-23,  1e-22,  1e-21,  1e-20,
       1e-19,  1e-18,  1e-17,  1e-16,  1e-15,  1e-14,  1e-13,  1e-12,  1e-11,
       1e-10,  1e-9,   1e-8,   1e-7,   1e-6,   1e-5,   1e-4,   1e-3,   1e-2,
       1e-1,   1e0,    1e1,    1e2,    1e3,    1e4,    1e5,    1e6,    1e7,
       1e8,    1e9,    1e10,   1e11,   1e12,   1e13,   1e14,   1e15,   1e16,
       1e17,   1e18,   1e19,   1e20,   1e21,   1e22,   1e23,   1e24,   1e25,
       1e26,   1e27,   1e28,   1e29,   1e30,   1e31,   1e32,   1e33,   1e34,
       1e35,   1e36,   1e37,   1e38,   1e39,   1e40,   1e41,   1e42,   1e43,
       1e44,   1e45,   1e46,   1e47,   1e48,   1e49,   1e50,   1e51,   1e52,
       1e53,   1e54,   1e55,   1e56,   1e57,   1e58,   1e59,   1e60,   1e61,
       1e62,   1e63,   1e64,   1e65,   1e66,   1e67,   1e68,   1e69,   1e70,
       1e71,   1e72,   1e73,   1e74,   1e75,   1e76,   1e77,   1e78,   1e79,
       1e80,   1e81,   1e82,   1e83,   1e84,   1e85,   1e86,   1e87,   1e88,
       1e89,   1e90,   1e91,   1e92,   1e93,   1e94,   1e95,   1e96,   1e97,
       1e98,   1e99,   1e100,  1e101,  1e102,  1e103,  1e104,  1e105,  1e106,
       1e107,  1e108,  1e109,  1e110,  1e111,  1e112,  1e113,  1e114,  1e115,
       1e116,  1e117,  1e118,  1e119,  1e120,  1e121,  1e122,  1e123,  1e124,
       1e125,  1e126,  1e127,  1e128,  1e129,  1e130,  1e131,  1e132,  1e133,
       1e134,  1e135,  1e136,  1e137,  1e138,  1e139,  1e140,  1e141,  1e142,
       1e143,  1e144,  1e145,  1e146,  1e147,  1e148,  1e149,  1e150,  1e151,
       1e152,  1e153,  1e154,  1e155,  1e156,  1e157,  1e158,  1e159,  1e160,
       1e161,  1e162,  1e163,  1e164,  1e165,  1e166,  1e167,  1e168,  1e169,
       1e170,  1e171,  1e172,  1e173,  1e174,  1e175,  1e176,  1e177,  1e178,
       1e179,  1e180,  1e181,  1e182,  1e183,  1e184,  1e185,  1e186,  1e187,
       1e188,  1e189,  1e190,  1e191,  1e192,  1e193,  1e194,  1e195,  1e196,
       1e197,  1e198,  1e199,  1e200,  1e201,  1e202,  1e203,  1e204,  1e205,
       1e206,  1e207,  1e208,  1e209,  1e210,  1e211,  1e212,  1e213,  1e214,
       1e215,  1e216,  1e217,  1e218,  1e219,  1e220,  1e221,  1e222,  1e223,
       1e224,  1e225,  1e226,  1e227,  1e228,  1e229,  1e230,  1e231,  1e232,
       1e233,  1e234,  1e235,  1e236,  1e237,  1e238,  1e239,  1e240,  1e241,
       1e242,  1e243,  1e244,  1e245,  1e246,  1e247,  1e248,  1e249,  1e250,
       1e251,  1e252,  1e253,  1e254,  1e255,  1e256,  1e257,  1e258,  1e259,
       1e260,  1e261,  1e262,  1e263,  1e264,  1e265,  1e266,  1e267,  1e268,
       1e269,  1e270,  1e271,  1e272,  1e273,  1e274,  1e275,  1e276,  1e277,
       1e278,  1e279,  1e280,  1e281,  1e282,  1e283,  1e284,  1e285,  1e286,
       1e287,  1e288,  1e289,  1e290,  1e291,  1e292,  1e293,  1e294,  1e295,
       1e296,  1e297,  1e298,  1e299,  1e300,  1e301,  1e302,  1e303,  1e304,
       1e305,  1e306,  1e307,  1e308};
 
 
 
   bool powers_of_ten() {
     std::cout << __func__ << std::endl;
     char buf[1024];
 
     bool is_pow_correct{1e-308 == std::pow(10,-308)};
     int start_point = is_pow_correct ? -10000 : -307;
     if(!is_pow_correct) {
       std::cout << "On your system, the pow function is busted. Sorry about that. " << std::endl;
     }
     for (int i = start_point; i <= 308; ++i) {// large negative values should be zero.
       size_t n = snprintf(buf, sizeof(buf), "1e%d", i);
       if (n >= sizeof(buf)) { abort(); }
       fflush(NULL);
       double expected = ((i >= -307) ? testing_power_of_ten[i + 307]: std::pow(10, i));
       return test_ondemand<double>(padded_string(buf, n), [&](double actual) {
         int ulp = (int) f64_ulp_dist(actual, expected);
         if(ulp > 0) {
           std::cerr << "JSON '" << buf << " parsed to ";
           fprintf( stderr," %18.18g instead of %18.18g\n", actual, expected); // formatting numbers is easier with printf
           SIMDJSON_SHOW_DEFINE(FLT_EVAL_METHOD);
           return false;
         }
         return true;
       });
     }
     printf("Powers of 10 can be parsed.\n");
     return true;
   }
+
+  void github_issue_1273() {
+    padded_string bad(std::string_view("0.0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000122978293824"));
+    simdjson::builtin::ondemand::parser parser;
+    simdjson_unused auto blah=parser.iterate(bad);
+    double x;
+    simdjson_unused auto blah2=blah.get(x);
+  }
+
+  bool old_crashes() {
+    github_issue_1273();
+    return true;
+  }
+
   bool run() {
     return small_integers() &&
            powers_of_two() &&
-           powers_of_ten();
+           powers_of_ten() &&
+           old_crashes();
   }
 }
 
