commit c745108a1b72b7b14899e048ee76b99ee49d9d80
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Tue Nov 22 14:11:49 2022 +0000

    GhostPDF - cgeck base space for Indexed colour spaces
    
    OSS-fuzz 53619
    
    The fuzzed file has a /Indexed space with a base space which is an array
    [/Pattern]. Pattern spaces (and Indexed spaces) are not valid as the
    base space for an Indexed space.
    
    Check the base space and exit with an error if it is not a valid space.

diff --git a/pdf/pdf_colour.c b/pdf/pdf_colour.c
index ebd95e152..fd873f9df 100644
--- a/pdf/pdf_colour.c
+++ b/pdf/pdf_colour.c
@@ -2066,112 +2066,116 @@ static int
 pdfi_create_indexed(pdf_context *ctx, pdf_array *color_array, int index,
                     pdf_dict *stream_dict, pdf_dict *page_dict, gs_color_space **ppcs, bool inline_image)
 {
     pdf_obj *space=NULL, *lookup=NULL;
     int code;
     int64_t hival, lookup_length = 0;
     int num_values;
     gs_color_space *pcs=NULL, *pcs_base=NULL;
     gs_color_space_index base_type;
     byte *Buffer = NULL;
 
     if (index != 0)
         return_error(gs_error_syntaxerror);
 
     code = pdfi_array_get_int(ctx, color_array, index + 2, &hival);
     if (code < 0)
         return code;
 
     if (hival > 255 || hival < 0)
         return_error(gs_error_syntaxerror);
 
     code = pdfi_array_get(ctx, color_array, index + 1, &space);
     if (code < 0)
         goto exit;
 
     code = pdfi_create_colorspace(ctx, space, stream_dict, page_dict, &pcs_base, inline_image);
     if (code < 0)
         goto exit;
 
-    (void)pcs_base->type->install_cspace(pcs_base, ctx->pgs);
-
     base_type = gs_color_space_get_index(pcs_base);
+    if (base_type == gs_color_space_index_Pattern || base_type == gs_color_space_index_Indexed) {
+        code = gs_note_error(gs_error_typecheck);
+        goto exit;
+    }
+
+    (void)pcs_base->type->install_cspace(pcs_base, ctx->pgs);
 
     code = pdfi_array_get(ctx, color_array, index + 3, &lookup);
     if (code < 0)
         goto exit;
 
     num_values = (hival+1) * cs_num_components(pcs_base);
     lookup_length = num_values;
 
     switch (pdfi_type_of(lookup)) {
     case PDF_STREAM:
         code = pdfi_stream_to_buffer(ctx, (pdf_stream *)lookup, &Buffer, &lookup_length);
         if (code < 0)
             goto exit;
         break;
     case PDF_STRING:
     {
         /* This is not legal, but Acrobat seems to accept it */
         pdf_string *lookup_string = (pdf_string *)lookup; /* alias */
 
         Buffer = gs_alloc_bytes(ctx->memory, lookup_string->length, "pdfi_create_indexed (lookup buffer)");
         if (Buffer == NULL) {
             code = gs_note_error(gs_error_VMerror);
             goto exit;
         }
 
         memcpy(Buffer, lookup_string->data, lookup_string->length);
         lookup_length = lookup_string->length;
         break;
     }
     default:
         code = gs_note_error(gs_error_typecheck);
         goto exit;
     }
 
     if (num_values > lookup_length) {
         dmprintf2(ctx->memory, "WARNING: pdfi_create_indexed() got %"PRIi64" values, expected at least %d values\n",
                   lookup_length, num_values);
         code = gs_note_error(gs_error_rangecheck);
         goto exit;
     }
 
     /* If we have a named color profile and the base space is DeviceN or
        Separation use a different set of procedures to ensure the named
        color remapping code is used */
     if (ctx->pgs->icc_manager->device_named != NULL &&
         (base_type == gs_color_space_index_Separation ||
          base_type == gs_color_space_index_DeviceN))
         pcs = gs_cspace_alloc(ctx->memory, &gs_color_space_type_Indexed_Named);
     else
         pcs = gs_cspace_alloc(ctx->memory, &gs_color_space_type_Indexed);
 
     /* NOTE: we don't need to increment the reference to pcs_base, since it is already 1 */
     pcs->base_space = pcs_base;
 
     pcs->params.indexed.lookup.table.size = num_values;
     pcs->params.indexed.use_proc = 0;
     pcs->params.indexed.hival = hival;
     pcs->params.indexed.n_comps = cs_num_components(pcs_base);
     pcs->params.indexed.lookup.table.data = Buffer;
     Buffer = NULL;
 
     if (ppcs != NULL) {
         *ppcs = pcs;
         pdfi_set_colour_callback(pcs, ctx, pdfi_cspace_free_callback);
     }
     else {
         code = pdfi_gs_setcolorspace(ctx, pcs);
         /* release reference from construction */
         rc_decrement_only_cs(pcs, "setindexedspace");
     }
 
  exit:
     if (code != 0)
         rc_decrement(pcs_base, "pdfi_create_indexed(pcs_base) error");
     if (Buffer)
         gs_free_object(ctx->memory, Buffer, "pdfi_create_indexed (decompression buffer)");
     pdfi_countdown(space);
     pdfi_countdown(lookup);
     return code;
 }
