commit efb25fd8093b5c9bfca38e7c43bc1bbbbd2b6fb9
Author: Mike Reed <reed@google.com>
Date:   Mon Feb 5 12:43:18 2018 -0500

    check for failure to make local-matrix
    
    Bug: skia:7569
    Change-Id: Idc00f756f1882824f9927f3ca23dc5dbe8c62d2f
    Reviewed-on: https://skia-review.googlesource.com/103721
    Commit-Queue: Mike Reed <reed@google.com>
    Reviewed-by: Florin Malita <fmalita@chromium.org>

diff --git a/src/core/SkDraw_vertices.cpp b/src/core/SkDraw_vertices.cpp
index 799e430ac2..4c71d65e8d 100644
--- a/src/core/SkDraw_vertices.cpp
+++ b/src/core/SkDraw_vertices.cpp
@@ -55,15 +55,16 @@ static SkScan::HairRCProc ChooseHairProc(bool doAntiAlias) {
     return doAntiAlias ? SkScan::AntiHairLine : SkScan::HairLine;
 }
 
-static bool texture_to_matrix(const VertState& state, const SkPoint verts[],
-                              const SkPoint texs[], SkMatrix* matrix) {
+static bool SK_WARN_UNUSED_RESULT
+texture_to_matrix(const VertState& state, const SkPoint verts[], const SkPoint texs[],
+                  SkMatrix* matrix) {
     SkPoint src[3], dst[3];
 
     src[0] = texs[state.f0];
     src[1] = texs[state.f1];
     src[2] = texs[state.f2];
     dst[0] = verts[state.f0];
     dst[1] = verts[state.f1];
     dst[2] = verts[state.f2];
     return matrix->setPolyToPoly(src, dst, 3);
 }
@@ -108,42 +109,42 @@ void SkTriColorShader::toString(SkString* str) const {
 }
 #endif
 
-static bool update_tricolor_matrix(const SkMatrix& ctmInv,
-                                   const SkPoint pts[], const SkPM4f colors[],
-                                   int index0, int index1, int index2, Matrix43* result) {
+static bool SK_WARN_UNUSED_RESULT
+update_tricolor_matrix(const SkMatrix& ctmInv, const SkPoint pts[], const SkPM4f colors[],
+                       int index0, int index1, int index2, Matrix43* result) {
     SkMatrix m, im;
     m.reset();
     m.set(0, pts[index1].fX - pts[index0].fX);
     m.set(1, pts[index2].fX - pts[index0].fX);
     m.set(2, pts[index0].fX);
     m.set(3, pts[index1].fY - pts[index0].fY);
     m.set(4, pts[index2].fY - pts[index0].fY);
     m.set(5, pts[index0].fY);
     if (!m.invert(&im)) {
         return false;
     }
 
     SkMatrix dstToUnit;
     dstToUnit.setConcat(im, ctmInv);
 
     Sk4f c0 = colors[index0].to4f(),
          c1 = colors[index1].to4f(),
          c2 = colors[index2].to4f();
 
     Matrix43 colorm;
     (c1 - c0).store(&colorm.fMat[0]);
     (c2 - c0).store(&colorm.fMat[4]);
     c0.store(&colorm.fMat[8]);
     result->setConcat(colorm, dstToUnit);
     return true;
 }
 
 // Convert the SkColors into float colors. The conversion depends on some conditions:
 // - If the pixmap has a dst colorspace, we have to be "color-correct".
 //   Do we map into dst-colorspace before or after we interpolate?
 // - We have to decide when to apply per-color alpha (before or after we interpolate)
 //
 // For now, we will take a simple approach, but recognize this is just a start:
 // - convert colors into dst colorspace before interpolation (matches gradients)
 // - apply per-color alpha before interpolation (matches old version of vertices)
 //
@@ -175,136 +176,138 @@ static bool compute_is_opaque(const SkColor colors[], int count) {
 void SkDraw::drawVertices(SkVertices::VertexMode vmode, int count,
                           const SkPoint vertices[], const SkPoint textures[],
                           const SkColor colors[], SkBlendMode bmode,
                           const uint16_t indices[], int indexCount,
                           const SkPaint& paint) const {
     SkASSERT(0 == count || vertices);
 
     // abort early if there is nothing to draw
     if (count < 3 || (indices && indexCount < 3) || fRC->isEmpty()) {
         return;
     }
     SkMatrix ctmInv;
     if (!fMatrix->invert(&ctmInv)) {
         return;
     }
 
     // make textures and shader mutually consistent
     SkShader* shader = paint.getShader();
     if (!(shader && textures)) {
         shader = nullptr;
         textures = nullptr;
     }
 
     // We can simplify things for certain blendmodes. This is for speed, and SkComposeShader
     // itself insists we don't pass kSrc or kDst to it.
     //
     if (colors && textures) {
         switch (bmode) {
             case SkBlendMode::kSrc:
                 colors = nullptr;
                 break;
             case SkBlendMode::kDst:
                 textures = nullptr;
                 break;
             default: break;
         }
     }
 
     // we don't use the shader if there are no textures
     if (!textures) {
         shader = nullptr;
     }
 
     constexpr size_t defCount = 16;
     constexpr size_t outerSize = sizeof(SkTriColorShader) +
                                  sizeof(SkComposeShader) +
                                  (sizeof(SkPoint) + sizeof(SkPM4f)) * defCount;
     SkSTArenaAlloc<outerSize> outerAlloc;
 
     SkPoint* devVerts = outerAlloc.makeArray<SkPoint>(count);
     fMatrix->mapPoints(devVerts, vertices, count);
 
     VertState       state(count, indices, indexCount);
     VertState::Proc vertProc = state.chooseProc(vmode);
 
     if (colors || textures) {
         SkPM4f*     dstColors = nullptr;
         Matrix43*   matrix43 = nullptr;
 
         if (colors) {
             dstColors = convert_colors(colors, count, fDst.colorSpace(), &outerAlloc);
 
             SkTriColorShader* triShader = outerAlloc.make<SkTriColorShader>(
                                                                 compute_is_opaque(colors, count));
             matrix43 = triShader->getMatrix43();
             if (shader) {
                 shader = outerAlloc.make<SkComposeShader>(sk_ref_sp(triShader), sk_ref_sp(shader),
                                                           bmode, 1);
             } else {
                 shader = triShader;
             }
         }
 
         SkPaint p(paint);
         p.setShader(sk_ref_sp(shader));
 
         if (!textures) {    // only tricolor shader
             SkASSERT(matrix43);
             auto blitter = SkCreateRasterPipelineBlitter(fDst, p, *fMatrix, &outerAlloc);
             while (vertProc(&state)) {
                 if (!update_tricolor_matrix(ctmInv, vertices, dstColors,
                                             state.f0, state.f1, state.f2,
                                             matrix43)) {
                     continue;
                 }
 
                 SkPoint tmp[] = {
                     devVerts[state.f0], devVerts[state.f1], devVerts[state.f2]
                 };
                 SkScan::FillTriangle(tmp, *fRC, blitter);
             }
         } else {
             while (vertProc(&state)) {
                 SkSTArenaAlloc<2048> innerAlloc;
 
                 const SkMatrix* ctm = fMatrix;
                 SkMatrix tmpCtm;
                 if (textures) {
                     SkMatrix localM;
-                    texture_to_matrix(state, vertices, textures, &localM);
+                    if (!texture_to_matrix(state, vertices, textures, &localM)) {
+                        continue;
+                    }
                     tmpCtm = SkMatrix::Concat(*fMatrix, localM);
                     ctm = &tmpCtm;
                 }
 
                 if (matrix43 && !update_tricolor_matrix(ctmInv, vertices, dstColors,
                                                         state.f0, state.f1, state.f2,
                                                         matrix43)) {
                     continue;
                 }
 
                 SkPoint tmp[] = {
                     devVerts[state.f0], devVerts[state.f1], devVerts[state.f2]
                 };
                 auto blitter = SkCreateRasterPipelineBlitter(fDst, p, *ctm, &innerAlloc);
                 SkScan::FillTriangle(tmp, *fRC, blitter);
             }
         }
     } else {
         // no colors[] and no texture, stroke hairlines with paint's color.
         SkPaint p;
         p.setStyle(SkPaint::kStroke_Style);
         SkAutoBlitterChoose blitter(fDst, *fMatrix, p);
         // Abort early if we failed to create a shader context.
         if (blitter->isNullBlitter()) {
             return;
         }
         SkScan::HairRCProc hairProc = ChooseHairProc(paint.isAntiAlias());
         const SkRasterClip& clip = *fRC;
         while (vertProc(&state)) {
             SkPoint array[] = {
                 devVerts[state.f0], devVerts[state.f1], devVerts[state.f2], devVerts[state.f0]
             };
             hairProc(array, 4, clip, blitter.get());
         }
     }
 }
