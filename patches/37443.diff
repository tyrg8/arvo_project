commit 7056f9405a0f317152529c3cc6e5692250402ddc
Author: Victor M. Alvarez <vmalvarez@virustotal.com>
Date:   Mon Aug 23 11:59:26 2021 +0200

    Fix buffer overrun caused by wrong type signedness.

diff --git a/libyara/modules/pe/pe.c b/libyara/modules/pe/pe.c
index f343e9be..0c5249bf 100644
--- a/libyara/modules/pe/pe.c
+++ b/libyara/modules/pe/pe.c
@@ -601,88 +601,88 @@ static int pe_iterate_resources(
 static void pe_parse_version_info(PIMAGE_RESOURCE_DATA_ENTRY rsrc_data, PE* pe)
 {
   PVERSION_INFO version_info;
 
   int64_t version_info_offset = pe_rva_to_offset(
       pe, yr_le32toh(rsrc_data->OffsetToData));
 
   if (version_info_offset < 0)
     return;
 
   version_info = (PVERSION_INFO)(pe->data + version_info_offset);
 
   if (!struct_fits_in_pe(pe, version_info, VERSION_INFO))
     return;
 
   if (!fits_in_pe(pe, version_info->Key, sizeof("VS_VERSION_INFO") * 2))
     return;
 
   if (strcmp_w(version_info->Key, "VS_VERSION_INFO") != 0)
     return;
 
   version_info = ADD_OFFSET(version_info, sizeof(VERSION_INFO) + 86);
 
   while (fits_in_pe(pe, version_info->Key, sizeof("VarFileInfo") * 2) &&
          strcmp_w(version_info->Key, "VarFileInfo") == 0 &&
          yr_le16toh(version_info->Length) != 0)
   {
     version_info = ADD_OFFSET(version_info, yr_le16toh(version_info->Length));
   }
 
   while (fits_in_pe(pe, version_info->Key, sizeof("StringFileInfo") * 2) &&
          strcmp_w(version_info->Key, "StringFileInfo") == 0 &&
          yr_le16toh(version_info->Length) != 0)
   {
     PVERSION_INFO string_table = ADD_OFFSET(
         version_info, sizeof(VERSION_INFO) + 30);
 
     version_info = ADD_OFFSET(version_info, yr_le16toh(version_info->Length));
 
     while (struct_fits_in_pe(pe, string_table, VERSION_INFO) &&
            wide_string_fits_in_pe(pe, string_table->Key) &&
            yr_le16toh(string_table->Length) != 0 && string_table < version_info)
     {
       PVERSION_INFO string = ADD_OFFSET(
           string_table,
           sizeof(VERSION_INFO) + 2 * (strnlen_w(string_table->Key) + 1));
 
       string_table = ADD_OFFSET(string_table, yr_le16toh(string_table->Length));
 
       while (struct_fits_in_pe(pe, string, VERSION_INFO) &&
              wide_string_fits_in_pe(pe, string->Key) &&
              yr_le16toh(string->Length) != 0 && string < string_table)
       {
         char* string_value = (char*) ADD_OFFSET(
             string, sizeof(VERSION_INFO) + 2 * (strnlen_w(string->Key) + 1));
 
         if (wide_string_fits_in_pe(pe, string_value))
         {
           char key[64];
           char value[256];
 
           strlcpy_w(key, string->Key, sizeof(key));
           strlcpy_w(value, string_value, sizeof(value));
 
-          // null terminator of string is not included in version value when ValueLength is zero
+          // null terminator of string is not included in version value when
+          // ValueLength is zero
           if (yr_le16toh(string->ValueLength) == 0)
             value[yr_le16toh(string->ValueLength)] = '\0';
 
           set_string(value, pe->object, "version_info[%s]", key);
 
           set_string(
-                key,
-                pe->object,
-                "version_info_list[%i].key",
-                pe->version_infos);
+              key, pe->object, "version_info_list[%i].key", pe->version_infos);
+
           set_string(
-                value,
-                pe->object,
-                "version_info_list[%i].value",
-                pe->version_infos);
+              value,
+              pe->object,
+              "version_info_list[%i].value",
+              pe->version_infos);
+
           pe->version_infos += 1;
         }
 
         string = ADD_OFFSET(string, yr_le16toh(string->Length));
       }
     }
   }
 }
@@ -1165,30 +1165,32 @@ int pe_is_termination_delay_import_entry(
 
 char* pe_parse_delay_import_dll_name(PE* pe, uint64_t rva)
 {
-  const uint64_t offset = pe_rva_to_offset(pe, rva);
+  const int64_t offset = pe_rva_to_offset(pe, rva);
 
   if (offset < 0)
     return NULL;
 
   char* dll_name = (char*) (pe->data + offset);
+
   if (!pe_valid_dll_name(dll_name, pe->data_size - (size_t) offset))
     return NULL;
+
   return yr_strdup(dll_name);
 }
 
 uint64_t pe_parse_delay_import_pointer(
     PE* pe,
     uint64_t pointerSize,
     uint64_t rva)
 {
-  const uint64_t offset = pe_rva_to_offset(pe, rva);
+  const int64_t offset = pe_rva_to_offset(pe, rva);
   const uint8_t* data = pe->data + offset;
 
   if (!fits_in_pe(pe, data, pointerSize))
     return YR_UNDEFINED;
 
   if (IS_64BITS_PE(pe))
     return yr_le64toh(*(uint64_t*) data);
   else
     return yr_le32toh(*(uint32_t*) data);
 }
@@ -3118,383 +3120,383 @@ define_function(rva_to_offset)
 begin_declarations
   declare_integer("MACHINE_UNKNOWN");
   declare_integer("MACHINE_AM33");
   declare_integer("MACHINE_AMD64");
   declare_integer("MACHINE_ARM");
   declare_integer("MACHINE_ARMNT");
   declare_integer("MACHINE_ARM64");
   declare_integer("MACHINE_EBC");
   declare_integer("MACHINE_I386");
   declare_integer("MACHINE_IA64");
   declare_integer("MACHINE_M32R");
   declare_integer("MACHINE_MIPS16");
   declare_integer("MACHINE_MIPSFPU");
   declare_integer("MACHINE_MIPSFPU16");
   declare_integer("MACHINE_POWERPC");
   declare_integer("MACHINE_POWERPCFP");
   declare_integer("MACHINE_R4000");
   declare_integer("MACHINE_SH3");
   declare_integer("MACHINE_SH3DSP");
   declare_integer("MACHINE_SH4");
   declare_integer("MACHINE_SH5");
   declare_integer("MACHINE_THUMB");
   declare_integer("MACHINE_WCEMIPSV2");
   declare_integer("MACHINE_TARGET_HOST");
   declare_integer("MACHINE_R3000");
   declare_integer("MACHINE_R10000");
   declare_integer("MACHINE_ALPHA");
   declare_integer("MACHINE_SH3E");
   declare_integer("MACHINE_ALPHA64");
   declare_integer("MACHINE_AXP64");
   declare_integer("MACHINE_TRICORE");
   declare_integer("MACHINE_CEF");
   declare_integer("MACHINE_CEE");
 
   declare_integer("SUBSYSTEM_UNKNOWN");
   declare_integer("SUBSYSTEM_NATIVE");
   declare_integer("SUBSYSTEM_WINDOWS_GUI");
   declare_integer("SUBSYSTEM_WINDOWS_CUI");
   declare_integer("SUBSYSTEM_OS2_CUI");
   declare_integer("SUBSYSTEM_POSIX_CUI");
   declare_integer("SUBSYSTEM_NATIVE_WINDOWS");
   declare_integer("SUBSYSTEM_WINDOWS_CE_GUI");
   declare_integer("SUBSYSTEM_EFI_APPLICATION");
   declare_integer("SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER");
   declare_integer("SUBSYSTEM_EFI_RUNTIME_DRIVER");
   declare_integer("SUBSYSTEM_EFI_ROM_IMAGE");
   declare_integer("SUBSYSTEM_XBOX");
   declare_integer("SUBSYSTEM_WINDOWS_BOOT_APPLICATION");
 
   declare_integer("HIGH_ENTROPY_VA");
   declare_integer("DYNAMIC_BASE");
   declare_integer("FORCE_INTEGRITY");
   declare_integer("NX_COMPAT");
   declare_integer("NO_ISOLATION");
   declare_integer("NO_SEH");
   declare_integer("NO_BIND");
   declare_integer("APPCONTAINER");
   declare_integer("WDM_DRIVER");
   declare_integer("GUARD_CF");
   declare_integer("TERMINAL_SERVER_AWARE");
 
   declare_integer("RELOCS_STRIPPED");
   declare_integer("EXECUTABLE_IMAGE");
   declare_integer("LINE_NUMS_STRIPPED");
   declare_integer("LOCAL_SYMS_STRIPPED");
   declare_integer("AGGRESIVE_WS_TRIM");
   declare_integer("LARGE_ADDRESS_AWARE");
   declare_integer("BYTES_REVERSED_LO");
   declare_integer("MACHINE_32BIT");
   declare_integer("DEBUG_STRIPPED");
   declare_integer("REMOVABLE_RUN_FROM_SWAP");
   declare_integer("NET_RUN_FROM_SWAP");
   declare_integer("SYSTEM");
   declare_integer("DLL");
   declare_integer("UP_SYSTEM_ONLY");
   declare_integer("BYTES_REVERSED_HI");
 
   declare_integer("IMAGE_DIRECTORY_ENTRY_EXPORT");
   declare_integer("IMAGE_DIRECTORY_ENTRY_IMPORT");
   declare_integer("IMAGE_DIRECTORY_ENTRY_RESOURCE");
   declare_integer("IMAGE_DIRECTORY_ENTRY_EXCEPTION");
   declare_integer("IMAGE_DIRECTORY_ENTRY_SECURITY");
   declare_integer("IMAGE_DIRECTORY_ENTRY_BASERELOC");
   declare_integer("IMAGE_DIRECTORY_ENTRY_DEBUG");
   declare_integer("IMAGE_DIRECTORY_ENTRY_ARCHITECTURE");
   declare_integer("IMAGE_DIRECTORY_ENTRY_COPYRIGHT");
   declare_integer("IMAGE_DIRECTORY_ENTRY_GLOBALPTR");
   declare_integer("IMAGE_DIRECTORY_ENTRY_TLS");
   declare_integer("IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG");
   declare_integer("IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT");
   declare_integer("IMAGE_DIRECTORY_ENTRY_IAT");
   declare_integer("IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT");
   declare_integer("IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR");
 
   declare_integer("IMAGE_NT_OPTIONAL_HDR32_MAGIC");
   declare_integer("IMAGE_NT_OPTIONAL_HDR64_MAGIC");
   declare_integer("IMAGE_ROM_OPTIONAL_HDR_MAGIC");
 
   declare_integer("SECTION_NO_PAD");
   declare_integer("SECTION_CNT_CODE");
   declare_integer("SECTION_CNT_INITIALIZED_DATA");
   declare_integer("SECTION_CNT_UNINITIALIZED_DATA");
   declare_integer("SECTION_LNK_OTHER");
   declare_integer("SECTION_LNK_INFO");
   declare_integer("SECTION_LNK_REMOVE");
   declare_integer("SECTION_LNK_COMDAT");
   declare_integer("SECTION_NO_DEFER_SPEC_EXC");
   declare_integer("SECTION_GPREL");
   declare_integer("SECTION_MEM_FARDATA");
   declare_integer("SECTION_MEM_PURGEABLE");
   declare_integer("SECTION_MEM_16BIT");
   declare_integer("SECTION_MEM_LOCKED");
   declare_integer("SECTION_MEM_PRELOAD");
   declare_integer("SECTION_ALIGN_1BYTES");
   declare_integer("SECTION_ALIGN_2BYTES");
   declare_integer("SECTION_ALIGN_4BYTES");
   declare_integer("SECTION_ALIGN_8BYTES");
   declare_integer("SECTION_ALIGN_16BYTES");
   declare_integer("SECTION_ALIGN_32BYTES");
   declare_integer("SECTION_ALIGN_64BYTES");
   declare_integer("SECTION_ALIGN_128BYTES");
   declare_integer("SECTION_ALIGN_256BYTES");
   declare_integer("SECTION_ALIGN_512BYTES");
   declare_integer("SECTION_ALIGN_1024BYTES");
   declare_integer("SECTION_ALIGN_2048BYTES");
   declare_integer("SECTION_ALIGN_4096BYTES");
   declare_integer("SECTION_ALIGN_8192BYTES");
   declare_integer("SECTION_ALIGN_MASK");
   declare_integer("SECTION_LNK_NRELOC_OVFL");
   declare_integer("SECTION_MEM_DISCARDABLE");
   declare_integer("SECTION_MEM_NOT_CACHED");
   declare_integer("SECTION_MEM_NOT_PAGED");
   declare_integer("SECTION_MEM_SHARED");
   declare_integer("SECTION_MEM_EXECUTE");
   declare_integer("SECTION_MEM_READ");
   declare_integer("SECTION_MEM_WRITE");
   declare_integer("SECTION_SCALE_INDEX");
 
   declare_integer("RESOURCE_TYPE_CURSOR");
   declare_integer("RESOURCE_TYPE_BITMAP");
   declare_integer("RESOURCE_TYPE_ICON");
   declare_integer("RESOURCE_TYPE_MENU");
   declare_integer("RESOURCE_TYPE_DIALOG");
   declare_integer("RESOURCE_TYPE_STRING");
   declare_integer("RESOURCE_TYPE_FONTDIR");
   declare_integer("RESOURCE_TYPE_FONT");
   declare_integer("RESOURCE_TYPE_ACCELERATOR");
   declare_integer("RESOURCE_TYPE_RCDATA");
   declare_integer("RESOURCE_TYPE_MESSAGETABLE");
   declare_integer("RESOURCE_TYPE_GROUP_CURSOR");
   declare_integer("RESOURCE_TYPE_GROUP_ICON");
   declare_integer("RESOURCE_TYPE_VERSION");
   declare_integer("RESOURCE_TYPE_DLGINCLUDE");
   declare_integer("RESOURCE_TYPE_PLUGPLAY");
   declare_integer("RESOURCE_TYPE_VXD");
   declare_integer("RESOURCE_TYPE_ANICURSOR");
   declare_integer("RESOURCE_TYPE_ANIICON");
   declare_integer("RESOURCE_TYPE_HTML");
   declare_integer("RESOURCE_TYPE_MANIFEST");
 
   declare_integer("IMAGE_DEBUG_TYPE_UNKNOWN");
   declare_integer("IMAGE_DEBUG_TYPE_COFF");
   declare_integer("IMAGE_DEBUG_TYPE_CODEVIEW");
   declare_integer("IMAGE_DEBUG_TYPE_FPO");
   declare_integer("IMAGE_DEBUG_TYPE_MISC");
   declare_integer("IMAGE_DEBUG_TYPE_EXCEPTION");
   declare_integer("IMAGE_DEBUG_TYPE_FIXUP");
   declare_integer("IMAGE_DEBUG_TYPE_OMAP_TO_SRC");
   declare_integer("IMAGE_DEBUG_TYPE_OMAP_FROM_SRC");
   declare_integer("IMAGE_DEBUG_TYPE_BORLAND");
   declare_integer("IMAGE_DEBUG_TYPE_RESERVED10");
   declare_integer("IMAGE_DEBUG_TYPE_CLSID");
   declare_integer("IMAGE_DEBUG_TYPE_VC_FEATURE");
   declare_integer("IMAGE_DEBUG_TYPE_POGO");
   declare_integer("IMAGE_DEBUG_TYPE_ILTCG");
   declare_integer("IMAGE_DEBUG_TYPE_MPX");
   declare_integer("IMAGE_DEBUG_TYPE_REPRO");
 
   declare_integer("is_pe");
   declare_integer("machine");
   declare_integer("number_of_sections");
   declare_integer("timestamp");
   declare_integer("pointer_to_symbol_table");
   declare_integer("number_of_symbols");
   declare_integer("size_of_optional_header");
   declare_integer("characteristics");
 
   declare_integer("entry_point");
   declare_integer("entry_point_raw");
   declare_integer("image_base");
   declare_integer("number_of_rva_and_sizes");
   declare_integer("number_of_version_infos");
 
   declare_string_dictionary("version_info");
 
-  begin_struct_array("version_info_list");
+  begin_struct_array("version_info_list")
     declare_string("key");
     declare_string("value");
   end_struct_array("version_info_list");
 
   declare_integer("opthdr_magic");
   declare_integer("size_of_code");
   declare_integer("size_of_initialized_data");
   declare_integer("size_of_uninitialized_data");
   declare_integer("base_of_code");
   declare_integer("base_of_data");
   declare_integer("section_alignment");
   declare_integer("file_alignment");
 
   begin_struct("linker_version")
     declare_integer("major");
     declare_integer("minor");
   end_struct("linker_version");
 
   begin_struct("os_version")
     declare_integer("major");
     declare_integer("minor");
   end_struct("os_version");
 
   begin_struct("image_version")
     declare_integer("major");
     declare_integer("minor");
   end_struct("image_version");
 
   begin_struct("subsystem_version")
     declare_integer("major");
     declare_integer("minor");
   end_struct("subsystem_version");
 
   declare_integer("win32_version_value");
   declare_integer("size_of_image");
   declare_integer("size_of_headers");
 
   declare_integer("checksum");
   declare_function("calculate_checksum", "", "i", calculate_checksum);
   declare_integer("subsystem");
 
   declare_integer("dll_characteristics");
   declare_integer("size_of_stack_reserve");
   declare_integer("size_of_stack_commit");
   declare_integer("size_of_heap_reserve");
   declare_integer("size_of_heap_commit");
   declare_integer("loader_flags");
 
   begin_struct_array("data_directories")
     declare_integer("virtual_address");
     declare_integer("size");
   end_struct_array("data_directories");
 
   begin_struct_array("sections")
     declare_string("name");
     declare_integer("characteristics");
     declare_integer("virtual_address");
     declare_integer("virtual_size");
     declare_integer("raw_data_offset");
     declare_integer("raw_data_size");
     declare_integer("pointer_to_relocations");
     declare_integer("pointer_to_line_numbers");
     declare_integer("number_of_relocations");
     declare_integer("number_of_line_numbers");
   end_struct_array("sections");
 
   begin_struct("overlay")
     declare_integer("offset");
     declare_integer("size");
   end_struct("overlay");
 
   begin_struct("rich_signature")
     declare_integer("offset");
     declare_integer("length");
     declare_integer("key");
     declare_string("raw_data");
     declare_string("clear_data");
     declare_function("version", "i", "i", rich_version);
     declare_function("version", "ii", "i", rich_version_toolid);
     declare_function("toolid", "i", "i", rich_toolid);
     declare_function("toolid", "ii", "i", rich_toolid_version);
   end_struct("rich_signature");
 
 #if defined(HAVE_LIBCRYPTO) || defined(HAVE_WINCRYPT_H) || \
     defined(HAVE_COMMONCRYPTO_COMMONCRYPTO_H)
   declare_function("imphash", "", "s", imphash);
 #endif
 
   declare_integer("IMPORT_DELAYED");
   declare_integer("IMPORT_STANDARD");
   declare_integer("IMPORT_ANY");
 
   declare_function("section_index", "s", "i", section_index_name);
   declare_function("section_index", "i", "i", section_index_addr);
   declare_function("exports", "s", "i", exports);
   declare_function("exports", "r", "i", exports_regexp);
   declare_function("exports", "i", "i", exports_ordinal);
   declare_function("exports_index", "s", "i", exports_index_name);
   declare_function("exports_index", "i", "i", exports_index_ordinal);
   declare_function("exports_index", "r", "i", exports_index_regex);
   declare_function("imports", "ss", "i", imports_standard);
   declare_function("imports", "si", "i", imports_standard_ordinal);
   declare_function("imports", "s", "i", imports_standard_dll);
   declare_function("imports", "rr", "i", imports_standard_regex);
   declare_function("imports", "iss", "i", imports);
   declare_function("imports", "isi", "i", imports_ordinal);
   declare_function("imports", "is", "i", imports_dll);
   declare_function("imports", "irr", "i", imports_regex);
   declare_function("locale", "i", "i", locale);
   declare_function("language", "i", "i", language);
   declare_function("is_dll", "", "i", is_dll);
   declare_function("is_32bit", "", "i", is_32bit);
   declare_function("is_64bit", "", "i", is_64bit);
 
   declare_integer("number_of_imports");
   declare_integer("number_of_imported_functions");
   declare_integer("number_of_delayed_imports");
   declare_integer("number_of_delayed_imported_functions");
   declare_integer("number_of_exports");
 
   declare_string("dll_name");
   declare_integer("export_timestamp");
   begin_struct_array("export_details")
     declare_integer("offset");
     declare_string("name");
     declare_string("forward_name");
     declare_integer("ordinal");
   end_struct_array("export_details")
 
-  begin_struct_array("import_details");
+  begin_struct_array("import_details")
     declare_string("library_name");
     declare_integer("number_of_functions");
-    begin_struct_array("functions");
+    begin_struct_array("functions")
       declare_string("name");
       declare_integer("ordinal");
     end_struct_array("functions");
   end_struct_array("import_details");
 
-  begin_struct_array("delay_import_details");
+  begin_struct_array("delay_import_details")
     declare_string("library_name");
     declare_integer("number_of_function");
-    begin_struct_array("functions");
+    begin_struct_array("functions")
       declare_string("name");
       declare_integer("ordinal");
     end_struct_array("functions");
   end_struct_array("delay_import_details");
 
   declare_integer("resource_timestamp");
 
   begin_struct("resource_version")
     declare_integer("major");
     declare_integer("minor");
   end_struct("resource_version")
 
   begin_struct_array("resources")
     declare_integer("rva");
     declare_integer("offset");
     declare_integer("length");
     declare_integer("type");
     declare_integer("id");
     declare_integer("language");
     declare_string("type_string");
     declare_string("name_string");
     declare_string("language_string");
   end_struct_array("resources")
 
   declare_integer("number_of_resources");
   declare_string("pdb_path");
 
 #if defined(HAVE_LIBCRYPTO) && !defined(BORINGSSL)
   begin_struct_array("signatures")
     declare_string("thumbprint");
     declare_string("issuer");
     declare_string("subject");
     declare_integer("version");
     declare_string("algorithm");
     declare_string("algorithm_oid");
     declare_string("serial");
     declare_integer("not_before");
     declare_integer("not_after");
     declare_function("valid_on", "i", "i", valid_on);
   end_struct_array("signatures")
 
   declare_integer("number_of_signatures");
 #endif
 
   declare_function("rva_to_offset", "i", "i", rva_to_offset);
