commit 0e6c3ff9bb4390d2b426a4cddbb638c19811055d
Author: Albert Astals Cid <aacid@kde.org>
Date:   Tue Jan 5 00:09:43 2021 +0100

    Check obj1 is a stream before getting the stream
    
    It seems we already did this check a few lines above, and indeed we did,
    but on very broken documents, if arr[1] is a Ref, getting objects may
    end up in a reconstruct xref call which may end up changing the type of
    arr[1] the next time we ask for it
    
    oss-fuzz/29260

diff --git a/poppler/GfxState.cc b/poppler/GfxState.cc
index cffa7c43..a9ce7a89 100644
--- a/poppler/GfxState.cc
+++ b/poppler/GfxState.cc
@@ -1,73 +1,73 @@
 //========================================================================
 //
 // GfxState.cc
 //
 // Copyright 1996-2003 Glyph & Cog, LLC
 //
 //========================================================================
 
 //========================================================================
 //
 // Modified under the Poppler project - http://poppler.freedesktop.org
 //
 // All changes made under the Poppler project to this file are licensed
 // under GPL version 2 or later
 //
 // Copyright (C) 2005 Kristian Høgsberg <krh@redhat.com>
 // Copyright (C) 2006, 2007 Jeff Muizelaar <jeff@infidigm.net>
 // Copyright (C) 2006, 2010 Carlos Garcia Campos <carlosgc@gnome.org>
-// Copyright (C) 2006-2020 Albert Astals Cid <aacid@kde.org>
+// Copyright (C) 2006-2021 Albert Astals Cid <aacid@kde.org>
 // Copyright (C) 2009, 2012 Koji Otani <sho@bbr.jp>
 // Copyright (C) 2009, 2011-2016, 2020 Thomas Freitag <Thomas.Freitag@alfa.de>
 // Copyright (C) 2009, 2019 Christian Persch <chpe@gnome.org>
 // Copyright (C) 2010 Paweł Wiejacha <pawel.wiejacha@gmail.com>
 // Copyright (C) 2010 Christian Feuersänger <cfeuersaenger@googlemail.com>
 // Copyright (C) 2011 Andrea Canciani <ranma42@gmail.com>
 // Copyright (C) 2012, 2020 William Bader <williambader@hotmail.com>
 // Copyright (C) 2013 Lu Wang <coolwanglu@gmail.com>
 // Copyright (C) 2013 Hib Eris <hib@hiberis.nl>
 // Copyright (C) 2013 Fabio D'Urso <fabiodurso@hotmail.it>
 // Copyright (C) 2015, 2020 Adrian Johnson <ajohnson@redneon.com>
 // Copyright (C) 2016 Marek Kasik <mkasik@redhat.com>
 // Copyright (C) 2017, 2019 Oliver Sander <oliver.sander@tu-dresden.de>
 // Copyright (C) 2018 Klarälvdalens Datakonsult AB, a KDAB Group company, <info@kdab.com>. Work sponsored by the LiMux project of the city of Munich
 // Copyright (C) 2018 Volker Krause <vkrause@kde.org>
 // Copyright (C) 2018, 2019 Adam Reichold <adam.reichold@t-online.de>
 // Copyright (C) 2019 LE GARREC Vincent <legarrec.vincent@gmail.com>
 // Copyright (C) 2020 Philipp Knechtges <philipp-dev@knechtges.com>
 // Copyright (C) 2020 Lluís Batlle i Rossell <viric@viric.name>
 //
 // To see a description of the changes please see the Changelog file that
 // came with your tarball or type make ChangeLog if you are building from git
 //
 //========================================================================
 
 #include <config.h>
 
 #include <algorithm>
 #include <memory>
 #include <cstddef>
 #include <cmath>
 #include <cstring>
 #include "goo/gfile.h"
 #include "goo/gmem.h"
 #include "Error.h"
 #include "Object.h"
 #include "Array.h"
 #include "Page.h"
 #include "Gfx.h"
 #include "GfxState.h"
 #include "GfxState_helpers.h"
 #include "GfxFont.h"
 #include "GlobalParams.h"
 #include "PopplerCache.h"
 #include "OutputDev.h"
 #include "splash/SplashTypes.h"
 
 //------------------------------------------------------------------------
 
 // Max depth of nested color spaces.  This is used to catch infinite
 // loops in the color space object structure.
 #define colorSpaceRecursionLimit 8
 
 //------------------------------------------------------------------------
@@ -1635,103 +1635,107 @@ GfxColorSpace *GfxICCBasedColorSpace::copy() const
 GfxColorSpace *GfxICCBasedColorSpace::parse(Array *arr, OutputDev *out, GfxState *state, int recursion)
 {
     GfxICCBasedColorSpace *cs;
     int nCompsA;
     GfxColorSpace *altA;
     Dict *dict;
     Object obj1, obj2;
     int i;
 
     if (arr->getLength() < 2) {
         error(errSyntaxError, -1, "Bad ICCBased color space");
         return nullptr;
     }
     const Object &obj1Ref = arr->getNF(1);
     const Ref iccProfileStreamA = obj1Ref.isRef() ? obj1Ref.getRef() : Ref::INVALID();
 #ifdef USE_CMS
     // check cache
     if (out && iccProfileStreamA != Ref::INVALID()) {
         if (auto *item = out->getIccColorSpaceCache()->lookup(iccProfileStreamA)) {
             cs = static_cast<GfxICCBasedColorSpace *>(item->copy());
             int transformIntent = cs->getIntent();
             int cmsIntent = INTENT_RELATIVE_COLORIMETRIC;
             if (state != nullptr) {
                 cmsIntent = state->getCmsRenderingIntent();
             }
             if (transformIntent == cmsIntent) {
                 return cs;
             }
             delete cs;
         }
     }
 #endif
     obj1 = arr->get(1);
     if (!obj1.isStream()) {
         error(errSyntaxWarning, -1, "Bad ICCBased color space (stream)");
         return nullptr;
     }
     dict = obj1.streamGetDict();
     obj2 = dict->lookup("N");
     if (!obj2.isInt()) {
         error(errSyntaxWarning, -1, "Bad ICCBased color space (N)");
         return nullptr;
     }
     nCompsA = obj2.getInt();
     if (nCompsA > 4) {
         error(errSyntaxError, -1, "ICCBased color space with too many ({0:d} > 4) components", nCompsA);
         nCompsA = 4;
     }
     obj2 = dict->lookup("Alternate");
     if (obj2.isNull() || !(altA = GfxColorSpace::parse(nullptr, &obj2, out, state, recursion + 1))) {
         switch (nCompsA) {
         case 1:
             altA = new GfxDeviceGrayColorSpace();
             break;
         case 3:
             altA = new GfxDeviceRGBColorSpace();
             break;
         case 4:
             altA = new GfxDeviceCMYKColorSpace();
             break;
         default:
             error(errSyntaxWarning, -1, "Bad ICCBased color space - invalid N");
             return nullptr;
         }
     }
     if (altA->getNComps() != nCompsA) {
         error(errSyntaxWarning, -1, "Bad ICCBased color space - N doesn't match alt color space");
         delete altA;
         return nullptr;
     }
     cs = new GfxICCBasedColorSpace(nCompsA, altA, &iccProfileStreamA);
     obj2 = dict->lookup("Range");
     if (obj2.isArray() && obj2.arrayGetLength() == 2 * nCompsA) {
         for (i = 0; i < nCompsA; ++i) {
             cs->rangeMin[i] = obj2.arrayGet(2 * i).getNumWithDefaultValue(0);
             cs->rangeMax[i] = obj2.arrayGet(2 * i + 1).getNumWithDefaultValue(1);
         }
     }
 
 #ifdef USE_CMS
     obj1 = arr->get(1);
+    if (!obj1.isStream()) {
+        error(errSyntaxWarning, -1, "Bad ICCBased color space (stream)");
+        return nullptr;
+    }
     unsigned char *profBuf;
     Stream *iccStream = obj1.getStream();
     int length = 0;
 
     profBuf = iccStream->toUnsignedChars(&length, 65536, 65536);
     auto hp = make_GfxLCMSProfilePtr(cmsOpenProfileFromMem(profBuf, length));
     cs->profile = hp;
     gfree(profBuf);
     if (!hp) {
         error(errSyntaxWarning, -1, "read ICCBased color space profile error");
     } else {
         cs->buildTransforms(state);
     }
     // put this colorSpace into cache
     if (out && iccProfileStreamA != Ref::INVALID()) {
         out->getIccColorSpaceCache()->put(iccProfileStreamA, static_cast<GfxICCBasedColorSpace *>(cs->copy()));
     }
 #endif
     return cs;
 }
 
 #ifdef USE_CMS
