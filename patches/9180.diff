commit 77a1a1f0b7b7367b345afd484a22d5585ee410d6
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Wed Jul 4 16:25:30 2018 +0300

    ArwDecoder::GetWB(): round encrypted area down to multiple of 4.
    
    And yet another issue that is detected by MSAN, but would be
    so much more meaningful with
    https://github.com/google/sanitizers/issues/883

diff --git a/src/librawspeed/decoders/ArwDecoder.cpp b/src/librawspeed/decoders/ArwDecoder.cpp
index ff973605..b2b1e903 100644
--- a/src/librawspeed/decoders/ArwDecoder.cpp
+++ b/src/librawspeed/decoders/ArwDecoder.cpp
@@ -402,63 +402,64 @@ void ArwDecoder::SonyDecrypt(const uint32* ibuf, uint32* obuf, uint32 len,
 void ArwDecoder::GetWB() {
   // Set the whitebalance for all the modern ARW formats (everything after A100)
   if (mRootIFD->hasEntryRecursive(DNGPRIVATEDATA)) {
     NORangesSet<Buffer> ifds_undecoded;
 
     TiffEntry *priv = mRootIFD->getEntryRecursive(DNGPRIVATEDATA);
     TiffRootIFD makerNoteIFD(nullptr, &ifds_undecoded, priv->getRootIfdData(),
                              priv->getU32());
 
     TiffEntry *sony_offset = makerNoteIFD.getEntryRecursive(SONY_OFFSET);
     TiffEntry *sony_length = makerNoteIFD.getEntryRecursive(SONY_LENGTH);
     TiffEntry *sony_key = makerNoteIFD.getEntryRecursive(SONY_KEY);
     if(!sony_offset || !sony_length || !sony_key || sony_key->count != 4)
       ThrowRDE("couldn't find the correct metadata for WB decoding");
 
     assert(sony_offset != nullptr);
     uint32 off = sony_offset->getU32();
 
     assert(sony_length != nullptr);
-    uint32 len = sony_length->getU32();
+    // The Decryption is done in blocks of 4 bytes.
+    uint32 len = roundDown(sony_length->getU32(), 4);
 
     assert(sony_key != nullptr);
     uint32 key = getU32LE(sony_key->getData(4));
 
     // "Decrypt" IFD
     const auto& ifd_crypt = priv->getRootIfdData();
     const auto EncryptedBuffer = ifd_crypt.getSubView(off, len);
     // We do have to prepend 'off' padding, because TIFF uses absolute offsets.
     const auto DecryptedBufferSize = off + EncryptedBuffer.getSize();
     auto DecryptedBuffer = Buffer::Create(DecryptedBufferSize);
 
     SonyDecrypt(reinterpret_cast<const uint32*>(EncryptedBuffer.begin()),
                 reinterpret_cast<uint32*>(DecryptedBuffer.get() + off), len / 4,
                 key);
 
     NORangesSet<Buffer> ifds_decoded;
     Buffer decIFD(std::move(DecryptedBuffer), DecryptedBufferSize);
     const Buffer Padding(decIFD.getSubView(0, off));
     // The Decrypted Root Ifd can not point to preceding padding buffer.
     ifds_decoded.emplace(Padding);
 
     DataBuffer dbIDD(decIFD, priv->getRootIfdData().getByteOrder());
     TiffRootIFD encryptedIFD(nullptr, &ifds_decoded, dbIDD, off);
 
     if (encryptedIFD.hasEntry(SONYGRBGLEVELS)){
       TiffEntry *wb = encryptedIFD.getEntry(SONYGRBGLEVELS);
       if (wb->count != 4)
         ThrowRDE("WB has %d entries instead of 4", wb->count);
       mRaw->metadata.wbCoeffs[0] = wb->getFloat(1);
       mRaw->metadata.wbCoeffs[1] = wb->getFloat(0);
       mRaw->metadata.wbCoeffs[2] = wb->getFloat(2);
     } else if (encryptedIFD.hasEntry(SONYRGGBLEVELS)){
       TiffEntry *wb = encryptedIFD.getEntry(SONYRGGBLEVELS);
       if (wb->count != 4)
         ThrowRDE("WB has %d entries instead of 4", wb->count);
       mRaw->metadata.wbCoeffs[0] = wb->getFloat(0);
       mRaw->metadata.wbCoeffs[1] = wb->getFloat(1);
       mRaw->metadata.wbCoeffs[2] = wb->getFloat(3);
     }
   }
 }
 
 } // namespace rawspeed
