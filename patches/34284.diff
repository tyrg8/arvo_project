commit fc8dbfdb441f618441eb7ccb3ea97e92ab445e60
Merge: 257e01ece 1562ba695
Author: John Cupitt <jcupitt@gmail.com>
Date:   Mon May 17 11:32:03 2021 +0100

    Merge pull request #2257 from kleisauke/cygwin-compatibility
    
    Ensure compatibility with Cygwin

diff --git a/libvips/iofuncs/source.c b/libvips/iofuncs/source.c
index 25ea18fe9..844135eb3 100644
--- a/libvips/iofuncs/source.c
+++ b/libvips/iofuncs/source.c
@@ -1,103 +1,103 @@
 /* A byte source/sink .. it can be a pipe, file descriptor, memory area, 
  * socket, node.js stream, etc.
  * 
  * 19/6/14
  *
  * 3/2/20
  * 	- add vips_pipe_read_limit_set()
  * 3/10/20
  * 	- improve behaviour with read and seek on pipes
  * 26/11/20
  * 	- use _setmode() on win to force binary read for previously opened
  * 	  descriptors
  */
 
 /*
 
     This file is part of VIPS.
     
     VIPS is free software; you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
 
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
 
     You should have received a copy of the GNU Lesser General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
     02110-1301  USA
 
  */
 
 /*
 
     These files are distributed with VIPS - http://www.vips.ecs.soton.ac.uk
 
  */
 
 /* TODO
  *
  * - can we map and then close the fd? how about on Windows?
  */
 
 /*
 #define VIPS_DEBUG
 #define TEST_SANITY
  */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif /*HAVE_CONFIG_H*/
 #include <vips/intl.h>
 
 #include <stdio.h>
 #include <stdlib.h>
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif /*HAVE_UNISTD_H*/
 #include <string.h>
 #include <errno.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
 #include <unistd.h>
 
 #include <vips/vips.h>
 #include <vips/internal.h>
 #include <vips/debug.h>
 
 #ifdef G_OS_WIN32
 #include <io.h>
 #endif /*G_OS_WIN32*/
 
 /* Try to make an O_BINARY ... sometimes need the leading '_'.
  */
-#ifdef G_PLATFORM_WIN32
+#if defined(G_PLATFORM_WIN32) || defined(G_WITH_CYGWIN)
 #ifndef O_BINARY
 #ifdef _O_BINARY
 #define O_BINARY _O_BINARY
 #endif /*_O_BINARY*/
 #endif /*!O_BINARY*/
-#endif /*G_PLATFORM_WIN32*/
+#endif /*defined(G_PLATFORM_WIN32) || defined(G_WITH_CYGWIN)*/
 
 /* If we have O_BINARY, add it to a mode flags set.
  */
 #ifdef O_BINARY
 #define BINARYIZE(M) ((M) | O_BINARY)
 #else /*!O_BINARY*/
 #define BINARYIZE(M) (M)
 #endif /*O_BINARY*/
 
 #define MODE_READ BINARYIZE (O_RDONLY)
 #define MODE_READWRITE BINARYIZE (O_RDWR)
 #define MODE_WRITE BINARYIZE (O_WRONLY | O_CREAT | O_TRUNC)
 
 /* -1 on a pipe isn't actually unbounded. Have a limit to prevent
  * huge sources accidentally filling memory.
  *
  * This can be configured with vips_pipe_read_limit_set().
  */
diff --git a/libvips/iofuncs/target.c b/libvips/iofuncs/target.c
index 667edff17..29270261a 100644
--- a/libvips/iofuncs/target.c
+++ b/libvips/iofuncs/target.c
@@ -1,87 +1,87 @@
 /* A byte source/sink .. it can be a pipe, file descriptor, memory area, 
  * socket, node.js stream, etc.
  * 
  * J.Cupitt, 19/6/14
  *
  * 26/11/20
  * 	- use _setmode() on win to force binary write for previously opened
  * 	  descriptors
  */
 
 /*
 
     This file is part of VIPS.
     
     VIPS is free software; you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
 
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
 
     You should have received a copy of the GNU Lesser General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
     02110-1301  USA
 
  */
 
 /*
 
     These files are distributed with VIPS - http://www.vips.ecs.soton.ac.uk
 
  */
 
 /*
 #define VIPS_DEBUG
  */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif /*HAVE_CONFIG_H*/
 #include <vips/intl.h>
 
 #include <stdio.h>
 #include <stdlib.h>
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif /*HAVE_UNISTD_H*/
 #include <string.h>
 #include <errno.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
 #include <unistd.h>
 
 #include <vips/vips.h>
 #include <vips/internal.h>
 #include <vips/debug.h>
 
 #ifdef G_OS_WIN32
 #include <io.h>
 #endif /*G_OS_WIN32*/
 
 /* Try to make an O_BINARY ... sometimes need the leading '_'.
  */
-#ifdef G_PLATFORM_WIN32
+#if defined(G_PLATFORM_WIN32) || defined(G_WITH_CYGWIN)
 #ifndef O_BINARY
 #ifdef _O_BINARY
 #define O_BINARY _O_BINARY
 #endif /*_O_BINARY*/
 #endif /*!O_BINARY*/
-#endif /*G_PLATFORM_WIN32*/
+#endif /*defined(G_PLATFORM_WIN32) || defined(G_WITH_CYGWIN)*/
 
 /* If we have O_BINARY, add it to a mode flags set.
  */
 #ifdef O_BINARY
 #define BINARYIZE(M) ((M) | O_BINARY)
 #else /*!O_BINARY*/
 #define BINARYIZE(M) (M)
 #endif /*O_BINARY*/
 
 #define MODE_READ BINARYIZE (O_RDONLY)
 #define MODE_READWRITE BINARYIZE (O_RDWR)
 #define MODE_WRITE BINARYIZE (O_WRONLY | O_CREAT | O_TRUNC)
diff --git a/libvips/iofuncs/util.c b/libvips/iofuncs/util.c
index cab002987..5a420fb08 100644
--- a/libvips/iofuncs/util.c
+++ b/libvips/iofuncs/util.c
@@ -1,99 +1,99 @@
 /* Some basic util functions.
  */
 
 /*
 
     Copyright (C) 1991-2003 The National Gallery
 
     This library is free software; you can redistribute it and/or
     modify it under the terms of the GNU Lesser General Public
     License as published by the Free Software Foundation; either
     version 2.1 of the License, or (at your option) any later version.
 
     This library is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
     Lesser General Public License for more details.
 
     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
     02110-1301  USA
 
  */
 
 /*
 
     These files are distributed with VIPS - http://www.vips.ecs.soton.ac.uk
 
  */
 
 /*
 #define DEBUG
  */
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif /*HAVE_CONFIG_H*/
 #include <vips/intl.h>
 
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <ctype.h>
 #include <errno.h>
 
 #include <sys/types.h>
 #include <sys/stat.h>
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif /*HAVE_UNISTD_H*/
 #ifdef HAVE_IO_H
 #include <io.h>
 #endif /*HAVE_IO_H*/
 #include <fcntl.h>
 
 #include <vips/vips.h>
 #include <vips/debug.h>
 #include <vips/internal.h>
 
 #ifdef G_OS_WIN32
 #include <windows.h>
 #endif /*G_OS_WIN32*/
 
 /* Temp buffer for snprintf() layer on old systems.
  */
 #define MAX_BUF (100000)
 
 /* Try to make an O_BINARY ... sometimes need the leading '_'.
  */
-#ifdef G_PLATFORM_WIN32
+#if defined(G_PLATFORM_WIN32) || defined(G_WITH_CYGWIN)
 #ifndef O_BINARY
 #ifdef _O_BINARY
 #define O_BINARY _O_BINARY
 #endif /*_O_BINARY*/
 #endif /*!O_BINARY*/
-#endif /*G_PLATFORM_WIN32*/
+#endif /*defined(G_PLATFORM_WIN32) || defined(G_WITH_CYGWIN)*/
 
 /* If we have O_BINARY, add it to a mode flags set.
  */
 #ifdef O_BINARY
 #define BINARYIZE(M) ((M) | O_BINARY)
 #else /*!O_BINARY*/
 #define BINARYIZE(M) (M)
 #endif /*O_BINARY*/
 
 /* Open mode for image write ... on some systems, have to set BINARY too.
  */
 #define MODE_WRITE BINARYIZE (O_WRONLY | O_CREAT | O_TRUNC)
 
 /* Mode for read/write. This is if we might later want to mmaprw () the file.
  */
 #define MODE_READWRITE BINARYIZE (O_RDWR)
 
 /* Mode for read only. This is the fallback if READWRITE fails.
  */
 #define MODE_READONLY BINARYIZE (O_RDONLY)
 
 /* Test two lists for eqality.
  */
@@ -695,35 +695,35 @@ FILE *
 vips__file_open_read( const char *filename, const char *fallback_dir, 
 	gboolean text_mode )
 {
 	char *mode;
 	FILE *fp;
 
-#ifdef G_PLATFORM_WIN32
+#if defined(G_PLATFORM_WIN32) || defined(G_WITH_CYGWIN)
 	if( text_mode )
 		mode = "r";
 	else
 		mode = "rb";
-#else /*!G_PLATFORM_WIN32*/
+#else /*!defined(G_PLATFORM_WIN32) && !defined(G_WITH_CYGWIN)*/
 	mode = "r";
-#endif /*G_PLATFORM_WIN32*/
+#endif /*defined(G_PLATFORM_WIN32) || defined(G_WITH_CYGWIN)*/
 
 	if( (fp = vips__fopen( filename, mode )) )
 		return( fp );
 
 	if( fallback_dir && 
 		!filename_hasdir( filename ) ) {
 		char *path;
 
 		path = g_build_filename( fallback_dir, filename, NULL );
 	        fp = vips__fopen( path, mode );
 		g_free( path );
 
 		if( fp )
 			return( fp );
 	}
 
 	vips_error_system( errno, "vips__file_open_read", 
 		_( "unable to open file \"%s\" for reading" ), filename );
 
 	return( NULL );
 }
@@ -732,26 +732,26 @@ FILE *
 vips__file_open_write( const char *filename, gboolean text_mode )
 {
 	char *mode;
 	FILE *fp;
 
-#ifdef G_PLATFORM_WIN32
+#if defined(G_PLATFORM_WIN32) || defined(G_WITH_CYGWIN)
 	if( text_mode )
 		mode = "w";
 	else
 		mode = "wb";
-#else /*!G_PLATFORM_WIN32*/
+#else /*!defined(G_PLATFORM_WIN32) && !defined(G_WITH_CYGWIN)*/
 	mode = "w";
-#endif /*G_PLATFORM_WIN32*/
+#endif /*defined(G_PLATFORM_WIN32) || defined(G_WITH_CYGWIN)*/
 
         if( !(fp = vips__fopen( filename, mode )) ) {
 		vips_error_system( errno, "vips__file_open_write", 
 			_( "unable to open file \"%s\" for writing" ), 
 			filename );
 		return( NULL );
 	}
 
 	return( fp );
 }
 
 /* Load up a file as a string.
  */
diff --git a/libvips/iofuncs/vips.c b/libvips/iofuncs/vips.c
index 743620844..8d25c2bb7 100644
--- a/libvips/iofuncs/vips.c
+++ b/libvips/iofuncs/vips.c
@@ -1,154 +1,154 @@
 /* Read and write a vips file.
  * 
  * 22/5/08
  * 	- from im_open.c, im_openin.c, im_desc_hd.c, im_readhist.c,
  * 	  im_openout.c
  * 19/3/09
  *	- block mmaps of nodata images
  * 12/5/09
  *	- fix signed/unsigned warnings
  * 12/10/09
  *	- heh argh reading history always stopped after the first line
  * 9/12/09
  * 	- only wholly map input files on im_incheck() ... this reduces VM use,
  * 	  especially with large numbers of small files
  * 14/2/11
  * 	- renamed to vips.c from im_open_vips.c, some stuff chopped out for 
  * 	  image.c ... this file now just does read / write to disc
  * 28/3/11
  * 	- moved to vips_ namespace
  * 25/2/17
  * 	- use expat for xml read, printf for xml write
  * 16/8/17
  * 	- validate strs as being utf-8 before we write
  * 9/4/18 Alexander--
  * 	- use O_TMPFILE, if available
  * 23/7/18
  * 	- escape ASCII control characters in XML
  * 29/8/19
  * 	- verify bands/format for coded images
  */
 
 /*
 
     This file is part of VIPS.
     
     VIPS is free software; you can redistribute it and/or modify
     it under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
 
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU Lesser General Public License for more details.
 
     You should have received a copy of the GNU Lesser General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
     02110-1301  USA
 
  */
 
 /*
 
     These files are distributed with VIPS - http://www.vips.ecs.soton.ac.uk
 
  */
 
 /*
 #define SHOW_HEADER
 #define DEBUG
  */
 
 /* Enable linux extensions like O_TMPFILE, if available.
  */
 #define _GNU_SOURCE
 
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif /*HAVE_CONFIG_H*/
 #include <vips/intl.h>
 
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <ctype.h>
 
 #include <stdio.h>
 #include <assert.h>
 #include <stdlib.h>
 #include <string.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
 #ifdef HAVE_SYS_FILE_H
 #include <sys/file.h>
 #endif /*HAVE_SYS_FILE_H*/
 #ifdef HAVE_UNISTD_H
 #include <unistd.h>
 #endif /*HAVE_UNISTD_H*/
 #ifdef HAVE_IO_H
 #include <io.h>
 #endif /*HAVE_IO_H*/
 #include <expat.h>
 #include <errno.h>
 
 #include <vips/vips.h>
 #include <vips/internal.h>
 #include <vips/debug.h>
 
 /**
  * SECTION: vips
  * @short_description: startup, shutdown, version
  * @stability: Stable
  * @see_also: <link linkend="VipsOperation">VipsOperation</link>
  * @include: vips/vips.h
  *
  * Start VIPS up, shut VIPS down, get version information, relocation. 
  *
  * VIPS is a relocatable package, meaning you can move the directory tree you
  * compiled it to at runtime and it will still be able to find all data files.
  * This is required for OS X and Windows, but slightly unusual in the Unix
  * world. See vips_init() and vips_guess_prefix().
  */
 
 /* Try to make an O_BINARY ... sometimes need the leading '_'.
  */
-#ifdef G_PLATFORM_WIN32
+#if defined(G_PLATFORM_WIN32) || defined(G_WITH_CYGWIN)
 #ifndef O_BINARY
 #ifdef _O_BINARY
 #define O_BINARY _O_BINARY
 #endif /*_O_BINARY*/
 #endif /*!O_BINARY*/
-#endif /*G_PLATFORM_WIN32*/
+#endif /*defined(G_PLATFORM_WIN32) || defined(G_WITH_CYGWIN)*/
 
 /* If we have O_BINARY, add it to a mode flags set.
  */
 #ifdef O_BINARY
 #define BINARYIZE(M) ((M) | O_BINARY)
 #else /*!O_BINARY*/
 #define BINARYIZE(M) (M)
 #endif /*O_BINARY*/
 
 /* Open mode for image write ... on some systems, have to set BINARY too.
  *
  * We use O_RDWR not O_WRONLY since after writing we may want to rewind the 
  * image and read from it.
  */
 #define MODE_WRITE BINARYIZE (O_RDWR | O_CREAT | O_TRUNC)
 
 /* Mode for read/write. This is if we might later want to mmaprw () the file.
  */
 #define MODE_READWRITE BINARYIZE (O_RDWR)
 
 /* Mode for read only. This is the fallback if READWRITE fails.
  */
 #define MODE_READONLY BINARYIZE (O_RDONLY)
 
 /* Our XML namespace.
  */
 #define NAMESPACE_URI "http://www.vips.ecs.soton.ac.uk/" 
 
 /* Open for read for image files. 
  */
