commit 61a4c7d507322c9f494f5880d4c94b60e4ce9590
Merge: db39dbc eb2b8c4
Author: Lee Thomason <leethomason@gmail.com>
Date:   Sun Mar 17 18:19:04 2019 -0700

    Merge branch 'master' of github.com:leethomason/tinyxml2

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 378b48a..9372762 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -120,9 +120,15 @@ configure_package_config_file(
   "Config.cmake.in"
   "${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}Config.cmake"
   INSTALL_DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${CMAKE_PROJECT_NAME}"
 )
+write_basic_package_version_file(
+  "${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}ConfigVersion.cmake"
+  VERSION ${GENERIC_LIB_VERSION}
+  COMPATIBILITY SameMajorVersion
+)
 install(FILES
         ${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}Config.cmake
+        ${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}ConfigVersion.cmake
         DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${CMAKE_PROJECT_NAME})
 
 install(EXPORT ${CMAKE_PROJECT_NAME}Targets NAMESPACE tinyxml2::
diff --git a/dox b/dox
index fd50e79..e04ebac 100644
--- a/dox
+++ b/dox
@@ -35,15 +35,11 @@ DOXYFILE_ENCODING      = UTF-8
 PROJECT_NAME           = "TinyXML-2"
 
 # The PROJECT_NUMBER tag can be used to enter a project or revision number. This
 # could be handy for archiving the generated documentation or if some version
 # control system is used.
 
-<<<<<<< HEAD
 PROJECT_NUMBER = 7.0.1
-=======
-PROJECT_NUMBER = 7.0.1
->>>>>>> master
 
 # Using the PROJECT_BRIEF tag one can provide an optional one line description
 # for a project that appears at the top of each page and should give viewer a
 # quick idea about the purpose of the project. Keep the description short.
diff --git a/tinyxml2.cpp b/tinyxml2.cpp
index fd27f78..1c74279 100755
--- a/tinyxml2.cpp
+++ b/tinyxml2.cpp
@@ -20,82 +20,82 @@ must not be misrepresented as being the original software.
 3. This notice may not be removed or altered from any source
 distribution.
 */
 
 #include "tinyxml2.h"
 
 #include <new>		// yes, this one new style header, is in the Android SDK.
 #if defined(ANDROID_NDK) || defined(__BORLANDC__) || defined(__QNXNTO__)
 #   include <stddef.h>
 #   include <stdarg.h>
 #else
 #   include <cstddef>
 #   include <cstdarg>
 #endif
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1400 ) && (!defined WINCE)
 	// Microsoft Visual Studio, version 2005 and higher. Not WinCE.
 	/*int _snprintf_s(
 	   char *buffer,
 	   size_t sizeOfBuffer,
 	   size_t count,
 	   const char *format [,
 		  argument] ...
 	);*/
 	static inline int TIXML_SNPRINTF( char* buffer, size_t size, const char* format, ... )
 	{
 		va_list va;
 		va_start( va, format );
-		int result = vsnprintf_s( buffer, size, _TRUNCATE, format, va );
+		const int result = vsnprintf_s( buffer, size, _TRUNCATE, format, va );
 		va_end( va );
 		return result;
 	}
 
 	static inline int TIXML_VSNPRINTF( char* buffer, size_t size, const char* format, va_list va )
 	{
-		int result = vsnprintf_s( buffer, size, _TRUNCATE, format, va );
+		const int result = vsnprintf_s( buffer, size, _TRUNCATE, format, va );
 		return result;
 	}
 
 	#define TIXML_VSCPRINTF	_vscprintf
 	#define TIXML_SSCANF	sscanf_s
 #elif defined _MSC_VER
 	// Microsoft Visual Studio 2003 and earlier or WinCE
 	#define TIXML_SNPRINTF	_snprintf
 	#define TIXML_VSNPRINTF _vsnprintf
 	#define TIXML_SSCANF	sscanf
 	#if (_MSC_VER < 1400 ) && (!defined WINCE)
 		// Microsoft Visual Studio 2003 and not WinCE.
 		#define TIXML_VSCPRINTF   _vscprintf // VS2003's C runtime has this, but VC6 C runtime or WinCE SDK doesn't have.
 	#else
 		// Microsoft Visual Studio 2003 and earlier or WinCE.
 		static inline int TIXML_VSCPRINTF( const char* format, va_list va )
 		{
 			int len = 512;
 			for (;;) {
 				len = len*2;
 				char* str = new char[len]();
 				const int required = _vsnprintf(str, len, format, va);
 				delete[] str;
 				if ( required != -1 ) {
 					TIXMLASSERT( required >= 0 );
 					len = required;
 					break;
 				}
 			}
 			TIXMLASSERT( len >= 0 );
 			return len;
 		}
 	#endif
 #else
 	// GCC version 3 and higher
 	//#warning( "Using sn* functions." )
 	#define TIXML_SNPRINTF	snprintf
 	#define TIXML_VSNPRINTF	vsnprintf
 	static inline int TIXML_VSCPRINTF( const char* format, va_list va )
 	{
 		int len = vsnprintf( 0, 0, format, va );
 		TIXMLASSERT( len >= 0 );
 		return len;
 	}
 	#define TIXML_SSCANF   sscanf
 #endif
@@ -193,23 +193,23 @@ void StrPair::SetStr( const char* str, int flags )
 char* StrPair::ParseText( char* p, const char* endTag, int strFlags, int* curLineNumPtr )
 {
     TIXMLASSERT( p );
     TIXMLASSERT( endTag && *endTag );
 	TIXMLASSERT(curLineNumPtr);
 
     char* start = p;
-    char  endChar = *endTag;
+    const char  endChar = *endTag;
     size_t length = strlen( endTag );
 
     // Inner loop of text parsing.
     while ( *p ) {
         if ( *p == endChar && strncmp( p, endTag, length ) == 0 ) {
             Set( start, p, strFlags );
             return p + length;
         } else if (*p == '\n') {
             ++(*curLineNumPtr);
         }
         ++p;
         TIXMLASSERT( p );
     }
     return 0;
 }
@@ -267,104 +267,104 @@ void StrPair::CollapseWhitespace()
 const char* StrPair::GetStr()
 {
     TIXMLASSERT( _start );
     TIXMLASSERT( _end );
     if ( _flags & NEEDS_FLUSH ) {
         *_end = 0;
         _flags ^= NEEDS_FLUSH;
 
         if ( _flags ) {
             const char* p = _start;	// the read pointer
             char* q = _start;	// the write pointer
 
             while( p < _end ) {
                 if ( (_flags & NEEDS_NEWLINE_NORMALIZATION) && *p == CR ) {
                     // CR-LF pair becomes LF
                     // CR alone becomes LF
                     // LF-CR becomes LF
                     if ( *(p+1) == LF ) {
                         p += 2;
                     }
                     else {
                         ++p;
                     }
                     *q = LF;
                     ++q;
                 }
                 else if ( (_flags & NEEDS_NEWLINE_NORMALIZATION) && *p == LF ) {
                     if ( *(p+1) == CR ) {
                         p += 2;
                     }
                     else {
                         ++p;
                     }
                     *q = LF;
                     ++q;
                 }
                 else if ( (_flags & NEEDS_ENTITY_PROCESSING) && *p == '&' ) {
                     // Entities handled by tinyXML2:
                     // - special entities in the entity table [in/out]
                     // - numeric character reference [in]
                     //   &#20013; or &#x4e2d;
 
                     if ( *(p+1) == '#' ) {
                         const int buflen = 10;
                         char buf[buflen] = { 0 };
                         int len = 0;
-                        char* adjusted = const_cast<char*>( XMLUtil::GetCharacterRef( p, buf, &len ) );
+                        const char* adjusted = const_cast<char*>( XMLUtil::GetCharacterRef( p, buf, &len ) );
                         if ( adjusted == 0 ) {
                             *q = *p;
                             ++p;
                             ++q;
                         }
                         else {
                             TIXMLASSERT( 0 <= len && len <= buflen );
                             TIXMLASSERT( q + len <= adjusted );
                             p = adjusted;
                             memcpy( q, buf, len );
                             q += len;
                         }
                     }
                     else {
                         bool entityFound = false;
                         for( int i = 0; i < NUM_ENTITIES; ++i ) {
                             const Entity& entity = entities[i];
                             if ( strncmp( p + 1, entity.pattern, entity.length ) == 0
                                     && *( p + entity.length + 1 ) == ';' ) {
                                 // Found an entity - convert.
                                 *q = entity.value;
                                 ++q;
                                 p += entity.length + 2;
                                 entityFound = true;
                                 break;
                             }
                         }
                         if ( !entityFound ) {
                             // fixme: treat as error?
                             ++p;
                             ++q;
                         }
                     }
                 }
                 else {
                     *q = *p;
                     ++p;
                     ++q;
                 }
             }
             *q = 0;
         }
         // The loop below has plenty going on, and this
         // is a less useful mode. Break it out.
         if ( _flags & NEEDS_WHITESPACE_COLLAPSING ) {
             CollapseWhitespace();
         }
         _flags = (_flags & NEEDS_DELETE);
     }
     TIXMLASSERT( _start );
     return _start;
 }
 
 
 
 
 // --------- XMLUtil ----------- //
@@ -988,128 +988,128 @@ const XMLElement* XMLNode::PreviousSiblingElement( const char* name ) const
 char* XMLNode::ParseDeep( char* p, StrPair* parentEndTag, int* curLineNumPtr )
 {
     // This is a recursive method, but thinking about it "at the current level"
     // it is a pretty simple flat list:
     //		<foo/>
     //		<!-- comment -->
     //
     // With a special case:
     //		<foo>
     //		</foo>
     //		<!-- comment -->
     //
     // Where the closing element (/foo) *must* be the next thing after the opening
     // element, and the names must match. BUT the tricky bit is that the closing
     // element will be read by the child.
     //
     // 'endTag' is the end tag for this node, it is returned by a call to a child.
     // 'parentEnd' is the end tag for the parent, which is filled in and returned.
 
 	XMLDocument::DepthTracker tracker(_document);
 	if (_document->Error())
 		return 0;
 
 	while( p && *p ) {
         XMLNode* node = 0;
 
         p = _document->Identify( p, &node );
         TIXMLASSERT( p );
         if ( node == 0 ) {
             break;
         }
 
-        int initialLineNum = node->_parseLineNum;
+       const int initialLineNum = node->_parseLineNum;
 
         StrPair endTag;
         p = node->ParseDeep( p, &endTag, curLineNumPtr );
         if ( !p ) {
             DeleteNode( node );
             if ( !_document->Error() ) {
                 _document->SetError( XML_ERROR_PARSING, initialLineNum, 0);
             }
             break;
         }
 
-        XMLDeclaration* decl = node->ToDeclaration();
+        const XMLDeclaration* const decl = node->ToDeclaration();
         if ( decl ) {
             // Declarations are only allowed at document level
             //
             // Multiple declarations are allowed but all declarations
             // must occur before anything else. 
             //
             // Optimized due to a security test case. If the first node is 
             // a declaration, and the last node is a declaration, then only 
-            // declarations have so far been addded.
+            // declarations have so far been added.
             bool wellLocated = false;
 
             if (ToDocument()) {
                 if (FirstChild()) {
                     wellLocated =
                         FirstChild() &&
                         FirstChild()->ToDeclaration() &&
                         LastChild() &&
                         LastChild()->ToDeclaration();
                 }
                 else {
                     wellLocated = true;
                 }
             }
             if ( !wellLocated ) {
                 _document->SetError( XML_ERROR_PARSING_DECLARATION, initialLineNum, "XMLDeclaration value=%s", decl->Value());
                 DeleteNode( node );
                 break;
             }
         }
 
         XMLElement* ele = node->ToElement();
         if ( ele ) {
             // We read the end tag. Return it to the parent.
             if ( ele->ClosingType() == XMLElement::CLOSING ) {
                 if ( parentEndTag ) {
                     ele->_value.TransferTo( parentEndTag );
                 }
                 node->_memPool->SetTracked();   // created and then immediately deleted.
                 DeleteNode( node );
                 return p;
             }
 
             // Handle an end tag returned to this level.
             // And handle a bunch of annoying errors.
             bool mismatch = false;
             if ( endTag.Empty() ) {
                 if ( ele->ClosingType() == XMLElement::OPEN ) {
                     mismatch = true;
                 }
             }
             else {
                 if ( ele->ClosingType() != XMLElement::OPEN ) {
                     mismatch = true;
                 }
                 else if ( !XMLUtil::StringEqual( endTag.GetStr(), ele->Name() ) ) {
                     mismatch = true;
                 }
             }
             if ( mismatch ) {
                 _document->SetError( XML_ERROR_MISMATCHED_ELEMENT, initialLineNum, "XMLElement name=%s", ele->Name());
                 DeleteNode( node );
                 break;
             }
         }
         InsertEndChild( node );
     }
     return 0;
 }
 
 /*static*/ void XMLNode::DeleteNode( XMLNode* node )
 {
     if ( node == 0 ) {
         return;
     }
 	TIXMLASSERT(node->_document);
 	if (!node->ToDocument()) {
 		node->_document->MarkInUse(node);
 	}
 
     MemPool* pool = node->_memPool;
     node->~XMLNode();
     pool->Free( node );
 }
@@ -1356,26 +1356,26 @@ const char* XMLAttribute::Value() const
 char* XMLAttribute::ParseDeep( char* p, bool processEntities, int* curLineNumPtr )
 {
     // Parse using the name rules: bug fix, was using ParseText before
     p = _name.ParseName( p );
     if ( !p || !*p ) {
         return 0;
     }
 
     // Skip white space before =
     p = XMLUtil::SkipWhiteSpace( p, curLineNumPtr );
     if ( *p != '=' ) {
         return 0;
     }
 
     ++p;	// move up to opening quote
     p = XMLUtil::SkipWhiteSpace( p, curLineNumPtr );
     if ( *p != '\"' && *p != '\'' ) {
         return 0;
     }
 
-    char endTag[2] = { *p, 0 };
+    const char endTag[2] = { *p, 0 };
     ++p;	// move past opening quote
 
     p = _value.ParseText( p, endTag, processEntities ? StrPair::ATTRIBUTE_VALUE : StrPair::ATTRIBUTE_VALUE_LEAVE_ENTITIES, curLineNumPtr );
     return p;
 }
@@ -1815,58 +1815,58 @@ void XMLElement::DeleteAttribute( const char* name )
 char* XMLElement::ParseAttributes( char* p, int* curLineNumPtr )
 {
     XMLAttribute* prevAttribute = 0;
 
     // Read the attributes.
     while( p ) {
         p = XMLUtil::SkipWhiteSpace( p, curLineNumPtr );
         if ( !(*p) ) {
             _document->SetError( XML_ERROR_PARSING_ELEMENT, _parseLineNum, "XMLElement name=%s", Name() );
             return 0;
         }
 
         // attribute.
         if (XMLUtil::IsNameStartChar( *p ) ) {
             XMLAttribute* attrib = CreateAttribute();
             TIXMLASSERT( attrib );
             attrib->_parseLineNum = _document->_parseCurLineNum;
 
-            int attrLineNum = attrib->_parseLineNum;
+            const int attrLineNum = attrib->_parseLineNum;
 
             p = attrib->ParseDeep( p, _document->ProcessEntities(), curLineNumPtr );
             if ( !p || Attribute( attrib->Name() ) ) {
                 DeleteAttribute( attrib );
                 _document->SetError( XML_ERROR_PARSING_ATTRIBUTE, attrLineNum, "XMLElement name=%s", Name() );
                 return 0;
             }
             // There is a minor bug here: if the attribute in the source xml
             // document is duplicated, it will not be detected and the
             // attribute will be doubly added. However, tracking the 'prevAttribute'
             // avoids re-scanning the attribute list. Preferring performance for
             // now, may reconsider in the future.
             if ( prevAttribute ) {
                 TIXMLASSERT( prevAttribute->_next == 0 );
                 prevAttribute->_next = attrib;
             }
             else {
                 TIXMLASSERT( _rootAttribute == 0 );
                 _rootAttribute = attrib;
             }
             prevAttribute = attrib;
         }
         // end of the tag
         else if ( *p == '>' ) {
             ++p;
             break;
         }
         // end of the tag
         else if ( *p == '/' && *(p+1) == '>' ) {
             _closingType = CLOSED;
             return p+2;	// done; sealed element.
         }
         else {
             _document->SetError( XML_ERROR_PARSING_ELEMENT, _parseLineNum, 0 );
             return 0;
         }
     }
     return p;
 }
@@ -2133,15 +2133,15 @@ XMLUnknown* XMLDocument::NewUnknown( const char* str )
 static FILE* callfopen( const char* filepath, const char* mode )
 {
     TIXMLASSERT( filepath );
     TIXMLASSERT( mode );
 #if defined(_MSC_VER) && (_MSC_VER >= 1400 ) && (!defined WINCE)
     FILE* fp = 0;
-    errno_t err = fopen_s( &fp, filepath, mode );
+    const errno_t err = fopen_s( &fp, filepath, mode );
     if ( err ) {
         return 0;
     }
 #else
     FILE* fp = fopen( filepath, mode );
 #endif
     return fp;
 }
@@ -2209,44 +2209,44 @@ struct LongFitsIntoSizeTMinusOne<false> {
 XMLError XMLDocument::LoadFile( FILE* fp )
 {
     Clear();
 
     fseek( fp, 0, SEEK_SET );
     if ( fgetc( fp ) == EOF && ferror( fp ) != 0 ) {
         SetError( XML_ERROR_FILE_READ_ERROR, 0, 0 );
         return _errorID;
     }
 
     fseek( fp, 0, SEEK_END );
     const long filelength = ftell( fp );
     fseek( fp, 0, SEEK_SET );
     if ( filelength == -1L ) {
         SetError( XML_ERROR_FILE_READ_ERROR, 0, 0 );
         return _errorID;
     }
     TIXMLASSERT( filelength >= 0 );
 
     if ( !LongFitsIntoSizeTMinusOne<>::Fits( filelength ) ) {
         // Cannot handle files which won't fit in buffer together with null terminator
         SetError( XML_ERROR_FILE_READ_ERROR, 0, 0 );
         return _errorID;
     }
 
     if ( filelength == 0 ) {
         SetError( XML_ERROR_EMPTY_DOCUMENT, 0, 0 );
         return _errorID;
     }
 
     const size_t size = filelength;
     TIXMLASSERT( _charBuffer == 0 );
     _charBuffer = new char[size+1];
-    size_t read = fread( _charBuffer, 1, size, fp );
+    const size_t read = fread( _charBuffer, 1, size, fp );
     if ( read != size ) {
         SetError( XML_ERROR_FILE_READ_ERROR, 0, 0 );
         return _errorID;
     }
 
     _charBuffer[size] = 0;
 
     Parse();
     return _errorID;
 }
@@ -2328,35 +2328,35 @@ void XMLDocument::Print( XMLPrinter* streamer ) const
 void XMLDocument::SetError( XMLError error, int lineNum, const char* format, ... )
 {
     TIXMLASSERT( error >= 0 && error < XML_ERROR_COUNT );
     _errorID = error;
     _errorLineNum = lineNum;
 	_errorStr.Reset();
 
-    size_t BUFFER_SIZE = 1000;
+    const size_t BUFFER_SIZE = 1000;
     char* buffer = new char[BUFFER_SIZE];
 
     TIXMLASSERT(sizeof(error) <= sizeof(int));
     TIXML_SNPRINTF(buffer, BUFFER_SIZE, "Error=%s ErrorID=%d (0x%x) Line number=%d", ErrorIDToName(error), int(error), int(error), lineNum);
 
 	if (format) {
 		size_t len = strlen(buffer);
 		TIXML_SNPRINTF(buffer + len, BUFFER_SIZE - len, ": ");
 		len = strlen(buffer);
 
 		va_list va;
 		va_start(va, format);
 		TIXML_VSNPRINTF(buffer + len, BUFFER_SIZE - len, format, va);
 		va_end(va);
 	}
 	_errorStr.SetStr(buffer);
 	delete[] buffer;
 }
 
 
 /*static*/ const char* XMLDocument::ErrorIDToName(XMLError errorID)
 {
 	TIXMLASSERT( errorID >= 0 && errorID < XML_ERROR_COUNT );
     const char* errorName = _errorNames[errorID];
     TIXMLASSERT( errorName && errorName[0] );
     return errorName;
 }
diff --git a/tinyxml2.h b/tinyxml2.h
index ee83d2c..c7d4070 100755
--- a/tinyxml2.h
+++ b/tinyxml2.h
@@ -298,31 +298,31 @@ public:
 private:
     DynArray( const DynArray& ); // not supported
     void operator=( const DynArray& ); // not supported
 
     void EnsureCapacity( int cap ) {
         TIXMLASSERT( cap > 0 );
         if ( cap > _allocated ) {
             TIXMLASSERT( cap <= INT_MAX / 2 );
-            int newAllocated = cap * 2;
+            const int newAllocated = cap * 2;
             T* newMem = new T[newAllocated];
             TIXMLASSERT( newAllocated >= _size );
             memcpy( newMem, _mem, sizeof(T)*_size );	// warning: not using constructors, only works for PODs
             if ( _mem != _pool ) {
                 delete [] _mem;
             }
             _mem = newMem;
             _allocated = newAllocated;
         }
     }
 
     T*  _mem;
     T   _pool[INITIAL_SIZE];
     int _allocated;		// objects allocated
     int _size;			// number objects in use
 };
 
 
 /*
 	Parent virtual class of a pool for fast allocation
 	and deallocation of objects.
 */
