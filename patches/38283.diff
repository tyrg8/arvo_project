commit 3b49098069f85d9d725a7657dcd09df1ee38f25e
Author: Alan T. DeKok <aland@freeradius.org>
Date:   Wed Oct 6 16:47:21 2021 -0400

    check for overflow before decoding anything

diff --git a/src/protocols/tacacs/decode.c b/src/protocols/tacacs/decode.c
index 26488c5327..4d0c4997c3 100644
--- a/src/protocols/tacacs/decode.c
+++ b/src/protocols/tacacs/decode.c
@@ -73,147 +73,155 @@
 /**
  *	Decode a TACACS+ 'arg_N' fields.
  */
 static int tacacs_decode_args(TALLOC_CTX *ctx, fr_dcursor_t *cursor, fr_dict_attr_t const *parent,
 			      uint8_t arg_cnt, uint8_t const *arg_list, uint8_t const **data, uint8_t const *end)
 {
 	uint8_t i;
 	uint8_t const *p = *data;
 	fr_pair_t *vp;
 
 	/*
 	 *	No one? Just get out!
 	 */
 	if (!arg_cnt) return 0;
 
 	if ((p + arg_cnt) > end) {
 		fr_strerror_printf("Argument count %u overflows the remaining data in the packet", arg_cnt);
 		return -1;
 	}
 
 	/*
-	 *	Then, do the dirty job...
+	 *	Check for malformed packets before anything else.
+	 */
+	for (i = 0; i < arg_cnt; i++) {
+		if ((p + arg_list[i]) > end) {
+			fr_strerror_printf("'%s' argument %u length %u overflows the remaining data (%zu) in the packet",
+					   parent->name, i, arg_list[i], end - p);
+			return -1;
+		}
+
+		p += arg_list[i];
+	}
+	p = *data;
+
+	/*
+	 *	Then, do the dirty job of creating attributes.
 	 */
 	for (i = 0; i < arg_cnt; i++) {
 		uint8_t const *value, *name_end, *arg_end;
 		fr_dict_attr_t const *da;
 		uint8_t buffer[256];
 
 		if (arg_list[i] < 2) goto next; /* skip malformed */
 
-		if (p + arg_list[i] > end) {
-			fr_strerror_printf("'%s' argument %u length %u overflows the remaining data in the packet",
-					   parent->name, i, arg_list[i]);
-			return -1;
-		}
-
 		memcpy(buffer, p, arg_list[i]);
 		buffer[arg_list[i]] = '\0';
 
 		arg_end = buffer + arg_list[i];
 
 		for (value = buffer, name_end = NULL; value < arg_end; value++) {
 			/*
 			 *	RFC 8907 Section 3.7 says control
 			 *	characters MUST be excluded.
 			 */
 			if (*value < ' ') goto next;
 
 			if ((*value == '=') || (*value == '*')) {
 				name_end = value;
 				buffer[value - buffer] = '\0';
 				value++;
 				break;
 			}
 		}
 
 		/*
 		 *	Skip fields which aren't in "name=value" or "name*value" format.
 		 */
 		if (!name_end) goto next;
 
 		da = fr_dict_attr_by_name(NULL, fr_dict_root(dict_tacacs), (char *) buffer);
 		if (!da) {
 		raw:
 			/*
 			 *	Dupe the whole thing so that we have:
 			 *
 			 *	Argument-List += "name=value"
 			 */
 			da = parent;
 			value = p;
 			arg_end = p + arg_list[i];
 		}
 
 		vp = fr_pair_afrom_da(ctx, da);
 		if (!vp) {
 			fr_strerror_const("Out of Memory");
 			return -1;
 
 		}
 
 		/*
 		 *	Parse the string, and try to convert it to the
 		 *	underlying data type.  If it can't be
 		 *	converted as a data type, just convert it as
 		 *	Argument-List.
 		 *
 		 *	And if that fails, just ignore it completely.
 		 */
 		if (fr_pair_value_from_str(vp, (char const *) value, arg_end - value, 0, true) < 0) {
 			talloc_free(vp);
 			if (da != parent) goto raw;
 
 			goto next;
 		}
 
 		fr_dcursor_append(cursor, vp);
 
 	next:
 		p += arg_list[i];
 		*data  = p;
 	}
 
 	return 0;
 }
 
 /**
  *	Decode a TACACS+ field.
  */
 static int tacacs_decode_field(TALLOC_CTX *ctx, fr_dcursor_t *cursor, fr_dict_attr_t const *da,
 				uint8_t const **field_data, uint16_t field_len, uint8_t const *end)
 {
 	uint8_t const *p = *field_data;
 	fr_pair_t *vp;
 
 	if ((p + field_len) > end) {
-		fr_strerror_printf("'%s' length %u overflows the remaining data in the packet",
-				   da->name, field_len);
+		fr_strerror_printf("'%s' length %u overflows the remaining data (%zu) in the packet",
+				   da->name, field_len, p - end);
 		return -1;
 	}
 
 	vp = fr_pair_afrom_da(ctx, da);
 	if (!vp) {
 		fr_strerror_const("Out of Memory");
 		return -1;
 	}
 
 	if (field_len) {
 		if (da->type == FR_TYPE_STRING) {
 			fr_pair_value_bstrndup(vp, (char const *)p, field_len, true);
 		} else if (da->type == FR_TYPE_OCTETS) {
 			fr_pair_value_memdup(vp, p, field_len, true);
 		} else {
 			fr_assert(0);
 		}
 		p += field_len;
 		*field_data = p;
 	}
 
 	fr_dcursor_append(cursor, vp);
 
 	return 0;
 }
 
 /**
  *	Decode a TACACS+ packet
  */
