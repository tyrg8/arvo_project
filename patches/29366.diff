commit 1acd6dfab2590ecb999bb3e94a1cb5019caa0cbf
Merge: a8cfc2368 129f3fd13
Author: toddouska <todd@wolfssl.com>
Date:   Thu Jan 21 15:57:30 2021 -0800

    Merge pull request #3635 from SparkiDev/hmac_openssl_fix
    
    HMAC OpenSSL API: initialise HMAC ctx on new and allow key length of 0

diff --git a/src/ssl.c b/src/ssl.c
index 319b632fd..238d335cf 100644
--- a/src/ssl.c
+++ b/src/ssl.c
@@ -33321,8 +33321,12 @@ int wolfSSL_RSA_GenAdd(WOLFSSL_RSA* rsa)
 
 WOLFSSL_HMAC_CTX* wolfSSL_HMAC_CTX_new(void)
 {
-    return (WOLFSSL_HMAC_CTX*)XMALLOC(sizeof(WOLFSSL_HMAC_CTX), NULL,
-        DYNAMIC_TYPE_OPENSSL);
+    WOLFSSL_HMAC_CTX* hmac_ctx = (WOLFSSL_HMAC_CTX*)XMALLOC(
+        sizeof(WOLFSSL_HMAC_CTX), NULL, DYNAMIC_TYPE_OPENSSL);
+    if (hmac_ctx != NULL) {
+        XMEMSET(hmac_ctx, 0, sizeof(WOLFSSL_HMAC_CTX));
+    }
+    return hmac_ctx;
 }
 
 int wolfSSL_HMAC_CTX_Init(WOLFSSL_HMAC_CTX* ctx)
@@ -33558,139 +33562,145 @@ static int _HMAC_Init(Hmac* hmac, int type, void* heap)
 int wolfSSL_HMAC_Init(WOLFSSL_HMAC_CTX* ctx, const void* key, int keylen,
                   const EVP_MD* type)
 {
     int hmac_error = 0;
     void* heap = NULL;
+    int inited;
 
     WOLFSSL_MSG("wolfSSL_HMAC_Init");
 
     if (ctx == NULL) {
         WOLFSSL_MSG("no ctx on init");
         return WOLFSSL_FAILURE;
     }
 
 #ifndef HAVE_FIPS
     heap = ctx->hmac.heap;
 #endif
 
     if (type) {
         WOLFSSL_MSG("init has type");
 
 #ifndef NO_MD5
         if (XSTRNCMP(type, "MD5", 3) == 0) {
             WOLFSSL_MSG("md5 hmac");
             ctx->type = WC_MD5;
         }
         else
 #endif
 #ifdef WOLFSSL_SHA224
         if (XSTRNCMP(type, "SHA224", 6) == 0) {
             WOLFSSL_MSG("sha224 hmac");
             ctx->type = WC_SHA224;
         }
         else
 #endif
 #ifndef NO_SHA256
         if (XSTRNCMP(type, "SHA256", 6) == 0) {
             WOLFSSL_MSG("sha256 hmac");
             ctx->type = WC_SHA256;
         }
         else
 #endif
 #ifdef WOLFSSL_SHA384
         if (XSTRNCMP(type, "SHA384", 6) == 0) {
             WOLFSSL_MSG("sha384 hmac");
             ctx->type = WC_SHA384;
         }
         else
 #endif
 #ifdef WOLFSSL_SHA512
         if (XSTRNCMP(type, "SHA512", 6) == 0) {
             WOLFSSL_MSG("sha512 hmac");
             ctx->type = WC_SHA512;
         }
         else
 #endif
 #ifdef WOLFSSL_SHA3
     #ifndef WOLFSSL_NOSHA3_224
         if (XSTRNCMP(type, "SHA3_224", 8) == 0) {
             WOLFSSL_MSG("sha3_224 hmac");
             ctx->type = WC_SHA3_224;
         }
         else
     #endif
     #ifndef WOLFSSL_NOSHA3_256
         if (XSTRNCMP(type, "SHA3_256", 8) == 0) {
             WOLFSSL_MSG("sha3_256 hmac");
             ctx->type = WC_SHA3_256;
         } 
         else
     #endif
         if (XSTRNCMP(type, "SHA3_384", 8) == 0) {
             WOLFSSL_MSG("sha3_384 hmac");
             ctx->type = WC_SHA3_384;
         }
         else
     #ifndef WOLFSSL_NOSHA3_512
         if (XSTRNCMP(type, "SHA3_512", 8) == 0) {
             WOLFSSL_MSG("sha3_512 hmac");
             ctx->type = WC_SHA3_512;
         }
         else
     #endif
 #endif
 
 #ifndef NO_SHA
         /* has to be last since would pick or 256, 384, or 512 too */
         if (XSTRNCMP(type, "SHA", 3) == 0) {
             WOLFSSL_MSG("sha hmac");
             ctx->type = WC_SHA;
         }
         else
 #endif
         {
             WOLFSSL_MSG("bad init type");
             return WOLFSSL_FAILURE;
         }
     }
 
-    /* Make sure and free if needed */
-    if (ctx->hmac.macType != WC_HASH_TYPE_NONE) {
+    /* Check if init has been called before */
+    inited = (ctx->hmac.macType != WC_HASH_TYPE_NONE);
+    /* Free if needed */
+    if (inited) {
         wc_HmacFree(&ctx->hmac);
     }
-    if (key && keylen) {
+    if (key != NULL) {
         WOLFSSL_MSG("keying hmac");
 
         if (wc_HmacInit(&ctx->hmac, NULL, INVALID_DEVID) == 0) {
             hmac_error = wc_HmacSetKey(&ctx->hmac, ctx->type, (const byte*)key,
                                        (word32)keylen);
             if (hmac_error < 0){
                 wc_HmacFree(&ctx->hmac);
                 return WOLFSSL_FAILURE;
             }
             XMEMCPY((byte *)&ctx->save_ipad, (byte *)&ctx->hmac.ipad,
                                         WC_HMAC_BLOCK_SIZE);
             XMEMCPY((byte *)&ctx->save_opad, (byte *)&ctx->hmac.opad,
                                         WC_HMAC_BLOCK_SIZE);
         }
         /* OpenSSL compat, no error */
     }
+    else if (!inited) {
+        return WOLFSSL_FAILURE;
+    }
     else if (ctx->type >= 0) { /* MD5 == 0 */
         WOLFSSL_MSG("recover hmac");
         if (wc_HmacInit(&ctx->hmac, NULL, INVALID_DEVID) == 0) {
             ctx->hmac.macType = (byte)ctx->type;
             ctx->hmac.innerHashKeyed = 0;
             XMEMCPY((byte *)&ctx->hmac.ipad, (byte *)&ctx->save_ipad,
                                        WC_HMAC_BLOCK_SIZE);
             XMEMCPY((byte *)&ctx->hmac.opad, (byte *)&ctx->save_opad,
                                        WC_HMAC_BLOCK_SIZE);
             if ((hmac_error = _HMAC_Init(&ctx->hmac, ctx->hmac.macType, heap))
                     !=0) {
                return hmac_error;
             }
         }
     }
 
     (void)hmac_error;
 
     return WOLFSSL_SUCCESS;
 }
