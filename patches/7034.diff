commit 8239e79ee4c8cc34034838eefe4f34bab02c5fc7
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Tue Mar 20 19:44:04 2018 -0400

    https://mail.google.com/mail/#inbox/162426a98e65ed90

diff --git a/MagickCore/draw.c b/MagickCore/draw.c
index 0c78a06fc..24bf95b5f 100644
--- a/MagickCore/draw.c
+++ b/MagickCore/draw.c
@@ -1418,241 +1418,241 @@ MagickExport MagickBooleanType DrawClipPath(Image *image,
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
   assert(draw_info != (const DrawInfo *) NULL);
   (void) FormatLocaleString(filename,MagickPathExtent,"%s",name);
   value=GetImageArtifact(image,filename);
   if (value == (const char *) NULL)
     return(MagickFalse);
   clip_mask=CloneImage(image,image->columns,image->rows,MagickTrue,exception);
   if (clip_mask == (Image *) NULL)
     return(MagickFalse);
   (void) SetImageMask(clip_mask,ReadPixelMask,(Image *) NULL,exception);
   (void) SetImageMask(clip_mask,WritePixelMask,(Image *) NULL,exception);
   (void) QueryColorCompliance("#0000",AllCompliance,
     &clip_mask->background_color,exception);
   clip_mask->background_color.alpha=(MagickRealType) TransparentAlpha;
   clip_mask->background_color.alpha_trait=BlendPixelTrait;
   (void) SetImageBackgroundColor(clip_mask,exception);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(DrawEvent,GetMagickModule(),"\nbegin clip-path %s",
       draw_info->clip_mask);
   clone_info=CloneDrawInfo((ImageInfo *) NULL,draw_info);
   (void) CloneString(&clone_info->primitive,value);
   (void) QueryColorCompliance("#ffffff",AllCompliance,&clone_info->fill,
     exception);
   clone_info->clip_mask=(char *) NULL;
   status=DrawImage(clip_mask,clone_info,exception);
   (void) SetImageMask(image,WritePixelMask,clip_mask,exception);
   clip_mask=DestroyImage(clip_mask);
   clone_info=DestroyDrawInfo(clone_info);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(DrawEvent,GetMagickModule(),"end clip-path");
   return(status != 0 ? MagickTrue : MagickFalse);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +   D r a w D a s h P o l y g o n                                             %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  DrawDashPolygon() draws a dashed polygon (line, rectangle, ellipse) on the
 %  image while respecting the dash offset and dash pattern attributes.
 %
 %  The format of the DrawDashPolygon method is:
 %
 %      MagickBooleanType DrawDashPolygon(const DrawInfo *draw_info,
 %        const PrimitiveInfo *primitive_info,Image *image,
 %        ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o draw_info: the draw info.
 %
 %    o primitive_info: Specifies a pointer to a PrimitiveInfo structure.
 %
 %    o image: the image.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 static MagickBooleanType DrawDashPolygon(const DrawInfo *draw_info,
   const PrimitiveInfo *primitive_info,Image *image,ExceptionInfo *exception)
 {
   DrawInfo
     *clone_info;
 
   double
     length,
     maximum_length,
     offset,
     scale,
     total_length;
 
   MagickStatusType
     status;
 
   PrimitiveInfo
     *dash_polygon;
 
   register ssize_t
     i;
 
   register double
     dx,
     dy;
 
   size_t
     number_vertices;
 
   ssize_t
     j,
     n;
 
   assert(draw_info != (const DrawInfo *) NULL);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(DrawEvent,GetMagickModule(),"    begin draw-dash");
   for (i=0; primitive_info[i].primitive != UndefinedPrimitive; i++) ;
   number_vertices=(size_t) i;
   dash_polygon=(PrimitiveInfo *) AcquireQuantumMemory((size_t)
-    (2UL*(number_vertices+3UL)+1UL),sizeof(*dash_polygon));
+    (2UL*(number_vertices+3UL)+3UL),sizeof(*dash_polygon));
   if (dash_polygon == (PrimitiveInfo *) NULL)
     return(MagickFalse);
   clone_info=CloneDrawInfo((ImageInfo *) NULL,draw_info);
   clone_info->miterlimit=0;
   dash_polygon[0]=primitive_info[0];
   scale=ExpandAffine(&draw_info->affine);
   length=scale*(draw_info->dash_pattern[0]-0.5);
   offset=fabs(draw_info->dash_offset) >= DrawEpsilon ?
     scale*draw_info->dash_offset : 0.0;
   j=1;
   for (n=0; offset > 0.0; j=0)
   {
     if (draw_info->dash_pattern[n] <= 0.0)
       break;
     length=scale*(draw_info->dash_pattern[n]+(n == 0 ? -0.5 : 0.5));
     if (offset > length)
       {
         offset-=length;
         n++;
         length=scale*(draw_info->dash_pattern[n]+0.5);
         continue;
       }
     if (offset < length)
       {
         length-=offset;
         offset=0.0;
         break;
       }
     offset=0.0;
     n++;
   }
   status=MagickTrue;
   maximum_length=0.0;
   total_length=0.0;
   for (i=1; (i < (ssize_t) number_vertices) && (length >= 0.0); i++)
   {
     dx=primitive_info[i].point.x-primitive_info[i-1].point.x;
     dy=primitive_info[i].point.y-primitive_info[i-1].point.y;
     maximum_length=hypot((double) dx,dy);
     if (fabs(length) < DrawEpsilon)
       {
         n++;
         if (fabs(draw_info->dash_pattern[n]) < DrawEpsilon)
           n=0;
         length=scale*(draw_info->dash_pattern[n]+(n == 0 ? -0.5 : 0.5));
       }
     for (total_length=0.0; (length >= 0.0) && (maximum_length >= (total_length+length)); )
     {
       total_length+=length;
       if ((n & 0x01) != 0)
         {
           dash_polygon[0]=primitive_info[0];
           dash_polygon[0].point.x=(double) (primitive_info[i-1].point.x+dx*
             total_length/maximum_length);
           dash_polygon[0].point.y=(double) (primitive_info[i-1].point.y+dy*
             total_length/maximum_length);
           j=1;
         }
       else
         {
           if ((j+1) > (ssize_t) (2*number_vertices))
             break;
           dash_polygon[j]=primitive_info[i-1];
           dash_polygon[j].point.x=(double) (primitive_info[i-1].point.x+dx*
             total_length/maximum_length);
           dash_polygon[j].point.y=(double) (primitive_info[i-1].point.y+dy*
             total_length/maximum_length);
           dash_polygon[j].coordinates=1;
           j++;
           dash_polygon[0].coordinates=(size_t) j;
           dash_polygon[j].primitive=UndefinedPrimitive;
           status&=DrawStrokePolygon(image,clone_info,dash_polygon,exception);
         }
       n++;
       if (fabs(draw_info->dash_pattern[n]) < DrawEpsilon)
         n=0;
       length=scale*(draw_info->dash_pattern[n]+(n == 0 ? -0.5 : 0.5));
     }
     length-=(maximum_length-total_length);
     if ((n & 0x01) != 0)
       continue;
     dash_polygon[j]=primitive_info[i];
     dash_polygon[j].coordinates=1;
     j++;
   }
   if ((total_length <= maximum_length) && ((n & 0x01) == 0) && (j > 1))
     {
       dash_polygon[j]=primitive_info[i-1];
       dash_polygon[j].point.x+=DrawEpsilon;
       dash_polygon[j].point.y+=DrawEpsilon;
       dash_polygon[j].coordinates=1;
       j++;
       dash_polygon[0].coordinates=(size_t) j;
       dash_polygon[j].primitive=UndefinedPrimitive;
       status&=DrawStrokePolygon(image,clone_info,dash_polygon,exception);
     }
   dash_polygon=(PrimitiveInfo *) RelinquishMagickMemory(dash_polygon);
   clone_info=DestroyDrawInfo(clone_info);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(DrawEvent,GetMagickModule(),"    end draw-dash");
   return(status != 0 ? MagickTrue : MagickFalse);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   D r a w I m a g e                                                         %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  DrawImage() draws a graphic primitive on your image.  The primitive
 %  may be represented as a string or filename.  Precede the filename with an
 %  "at" sign (@) and the contents of the file are drawn on the image.  You
 %  can affect how text is drawn by setting one or more members of the draw
 %  info structure.
 %
 %  The format of the DrawImage method is:
 %
 %      MagickBooleanType DrawImage(Image *image,const DrawInfo *draw_info,
 %        ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image: the image.
 %
 %    o draw_info: the draw info.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
