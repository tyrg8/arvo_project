commit 1a42fcd4473577cb8558b5609672a02388dabd39
Merge: c91ed64c 2f2ffb58
Author: Francesc Alted <francesc@blosc.org>
Date:   Fri Jan 29 09:15:40 2021 +0100

    Merge pull request #204 from nmoinvaz/fixes/metalayers-leak
    
    Fixed frame metalayer loading memory leaks

diff --git a/blosc/blosc2.h b/blosc/blosc2.h
index dba0e506..e0d25ee3 100644
--- a/blosc/blosc2.h
+++ b/blosc/blosc2.h
@@ -1037,63 +1037,64 @@ typedef struct blosc2_metalayer {
 /**
  * @brief This struct is the standard container for Blosc 2 compressed data.
  *
  * This is essentially a container for Blosc 1 chunks of compressed data,
  * and it allows to overcome the 32-bit limitation in Blosc 1. Optionally,
  * a #blosc2_frame can be attached so as to store the compressed chunks contiguously.
  */
 typedef struct blosc2_schunk {
   uint8_t version;
   uint8_t compcode;
   //!< The default compressor. Each chunk can override this.
   uint8_t clevel;
   //!< The compression level and other compress params.
   int32_t typesize;
   //!< The type size.
   int32_t blocksize;
   //!< The requested size of the compressed blocks (0; meaning automatic).
   int32_t chunksize;
   //!< Size of each chunk. 0 if not a fixed chunksize.
   uint8_t filters[BLOSC2_MAX_FILTERS];
   //!< The (sequence of) filters.  8-bit per filter.
   uint8_t filters_meta[BLOSC2_MAX_FILTERS];
   //!< Metadata for filters. 8-bit per meta-slot.
   int32_t nchunks;
   //!< Number of chunks in super-chunk.
   int64_t nbytes;
   //!< The data size + metadata size + header size (uncompressed).
   int64_t cbytes;
   //!< The data size + metadata size + header size (compressed).
   uint8_t** data;
   //!< Pointer to chunk data pointers buffer.
   size_t data_len;
   //!< Length of the chunk data pointers buffer.
   blosc2_storage* storage;
   //!< Pointer to storage info.
   blosc2_frame* frame;
   //!< Pointer to frame used as store for chunks.
+  bool avoid_frame_free;   //!< Whether the frame can be freed (false) or not (true).
   //!<uint8_t* ctx;
   //!< Context for the thread holder. NULL if not acquired.
   blosc2_context* cctx;
   //!< Context for compression
   blosc2_context* dctx;
   //!< Context for decompression.
   struct blosc2_metalayer *metalayers[BLOSC2_MAX_METALAYERS];
   //!< The array of metalayers.
   int16_t nmetalayers;
   //!< The number of metalayers in the frame
   uint8_t* usermeta;
   //<! The user-defined metadata.
   int32_t usermeta_len;
   //<! The (compressed) length of the user-defined metadata.
 } blosc2_schunk;
 
 /**
  * @brief Create a new super-chunk.
  *
  * @param storage The storage properties.
  *
  * @remark In case that storage.urlpath is not NULL, the data is stored
  * on-disk.  If the data file(s) exist, they are *overwritten*.
  *
  * @return The new super-chunk.
  */
diff --git a/blosc/frame.c b/blosc/frame.c
index ca52cfad..6ba27de7 100644
--- a/blosc/frame.c
+++ b/blosc/frame.c
@@ -116,265 +116,268 @@ int blosc2_frame_free(blosc2_frame *frame) {
 void *new_header_frame(blosc2_schunk *schunk, blosc2_frame *frame) {
   if (frame == NULL) {
     return NULL;
   }
   uint8_t* h2 = calloc(FRAME_HEADER_MINLEN, 1);
   uint8_t* h2p = h2;
 
   // The msgpack header starts here
   *h2p = 0x90;  // fixarray...
   *h2p += 13;   // ...with 13 elements
   h2p += 1;
 
   // Magic number
   *h2p = 0xa0 + 8;  // str with 8 elements
   h2p += 1;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
   strcpy((char*)h2p, "b2frame");
   h2p += 8;
 
   // Header size
   *h2p = 0xd2;  // int32
   h2p += 1 + 4;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   // Total frame size
   *h2p = 0xcf;  // uint64
   // Fill it with frame->len which is known *after* the creation of the frame (e.g. when updating the header)
   int64_t flen = frame->len;
   swap_store(h2 + FRAME_LEN, &flen, sizeof(flen));
   h2p += 1 + 8;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   // Flags
   *h2p = 0xa0 + 4;  // str with 4 elements
   h2p += 1;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   // General flags
   *h2p = BLOSC2_VERSION_FRAME_FORMAT;  // version
   *h2p += 0x10;  // 64-bit offsets.  We only support this for now.
   h2p += 1;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   // Reserved flags
   h2p += 1;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   // Codec flags
   *h2p = schunk->compcode;
   *h2p += (schunk->clevel) << 4u;  // clevel
   h2p += 1;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   // Reserved flags
   *h2p = 0;
   h2p += 1;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   // Uncompressed size
   *h2p = 0xd3;  // int64
   h2p += 1;
   int64_t nbytes = schunk->nbytes;
   swap_store(h2p, &nbytes, sizeof(nbytes));
   h2p += 8;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   // Compressed size
   *h2p = 0xd3;  // int64
   h2p += 1;
   int64_t cbytes = schunk->cbytes;
   swap_store(h2p, &cbytes, sizeof(cbytes));
   h2p += 8;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   // Type size
   *h2p = 0xd2;  // int32
   h2p += 1;
   int32_t typesize = schunk->typesize;
   swap_store(h2p, &typesize, sizeof(typesize));
   h2p += 4;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   // Chunk size
   *h2p = 0xd2;  // int32
   h2p += 1;
   int32_t chunksize = schunk->chunksize;
   swap_store(h2p, &chunksize, sizeof(chunksize));
   h2p += 4;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   // Number of threads for compression
   *h2p = 0xd1;  // int16
   h2p += 1;
   int16_t nthreads = (int16_t)schunk->cctx->nthreads;
   swap_store(h2p, &nthreads, sizeof(nthreads));
   h2p += 2;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   // Number of threads for decompression
   *h2p = 0xd1;  // int16
   h2p += 1;
   nthreads = (int16_t)schunk->dctx->nthreads;
   swap_store(h2p, &nthreads, sizeof(nthreads));
   h2p += 2;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   // The boolean for FRAME_HAS_USERMETA
   *h2p = (schunk->usermeta_len > 0) ? (uint8_t)0xc3 : (uint8_t)0xc2;
   h2p += 1;
   if (h2p - h2 >= FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   // The space for FRAME_FILTER_PIPELINE
   *h2p = 0xd8;  //  fixext 16
   h2p += 1;
   if (BLOSC2_MAX_FILTERS > FRAME_FILTER_PIPELINE_MAX) {
     return NULL;
   }
   // Store the filter pipeline in header
   uint8_t* mp_filters = h2 + FRAME_FILTER_PIPELINE + 1;
   uint8_t* mp_meta = h2 + FRAME_FILTER_PIPELINE + 1 + FRAME_FILTER_PIPELINE_MAX;
   int nfilters = 0;
   for (int i = 0; i < BLOSC2_MAX_FILTERS; i++) {
     if (schunk->filters[i] != BLOSC_NOFILTER) {
       mp_filters[nfilters] = schunk->filters[i];
       mp_meta[nfilters] = schunk->filters_meta[i];
       nfilters++;
     }
   }
   *h2p = (uint8_t)nfilters;
   h2p += 1;
   h2p += 16;
   if (h2p - h2 != FRAME_HEADER_MINLEN) {
     return NULL;
   }
 
   int32_t hsize = FRAME_HEADER_MINLEN;
 
   // Now, deal with metalayers
   int16_t nmetalayers = schunk->nmetalayers;
+  if (nmetalayers < 0 || nmetalayers > BLOSC2_MAX_METALAYERS) {
+    return NULL;
+  }
 
   // Make space for the header of metalayers (array marker, size, map of offsets)
   h2 = realloc(h2, (size_t)hsize + 1 + 1 + 2 + 1 + 2);
   h2p = h2 + hsize;
 
   // The msgpack header for the metalayers (array_marker, size, map of offsets, list of metalayers)
   *h2p = 0x90 + 3;  // array with 3 elements
   h2p += 1;
 
   // Size for the map (index) of offsets, including this uint16 size (to be filled out later on)
   *h2p = 0xcd;  // uint16
   h2p += 1 + 2;
 
   // Map (index) of offsets for optional metalayers
   *h2p = 0xde;  // map 16 with N keys
   h2p += 1;
   swap_store(h2p, &nmetalayers, sizeof(nmetalayers));
   h2p += sizeof(nmetalayers);
   int32_t current_header_len = (int32_t)(h2p - h2);
   int32_t *offtooff = malloc(nmetalayers * sizeof(int32_t));
   for (int nmetalayer = 0; nmetalayer < nmetalayers; nmetalayer++) {
     if (frame == NULL) {
       return NULL;
     }
     blosc2_metalayer *metalayer = schunk->metalayers[nmetalayer];
     uint8_t namelen = (uint8_t) strlen(metalayer->name);
     h2 = realloc(h2, (size_t)current_header_len + 1 + namelen + 1 + 4);
     h2p = h2 + current_header_len;
     // Store the metalayer
     if (namelen >= (1U << 5U)) {  // metalayer strings cannot be longer than 32 bytes
       free(offtooff);
       return NULL;
     }
     *h2p = (uint8_t)0xa0 + namelen;  // str
     h2p += 1;
     memcpy(h2p, metalayer->name, namelen);
     h2p += namelen;
     // Space for storing the offset for the value of this metalayer
     *h2p = 0xd2;  // int32
     h2p += 1;
     offtooff[nmetalayer] = (int32_t)(h2p - h2);
     h2p += 4;
     current_header_len += 1 + namelen + 1 + 4;
   }
   int32_t hsize2 = (int32_t)(h2p - h2);
   if (hsize2 != current_header_len) {  // sanity check
     return NULL;
   }
 
   // Map size + int16 size
   if ((uint32_t) (hsize2 - hsize) >= (1U << 16U)) {
     return NULL;
   }
   uint16_t map_size = (uint16_t) (hsize2 - hsize);
   swap_store(h2 + FRAME_IDX_SIZE, &map_size, sizeof(map_size));
 
   // Make space for an (empty) array
   hsize = (int32_t)(h2p - h2);
   h2 = realloc(h2, (size_t)hsize + 2 + 1 + 2);
   h2p = h2 + hsize;
 
   // Now, store the values in an array
   *h2p = 0xdc;  // array 16 with N elements
   h2p += 1;
   swap_store(h2p, &nmetalayers, sizeof(nmetalayers));
   h2p += sizeof(nmetalayers);
   current_header_len = (int32_t)(h2p - h2);
   for (int nmetalayer = 0; nmetalayer < nmetalayers; nmetalayer++) {
     if (frame == NULL) {
       return NULL;
     }
     blosc2_metalayer *metalayer = schunk->metalayers[nmetalayer];
     h2 = realloc(h2, (size_t)current_header_len + 1 + 4 + metalayer->content_len);
     h2p = h2 + current_header_len;
     // Store the serialized contents for this metalayer
     *h2p = 0xc6;  // bin32
     h2p += 1;
     swap_store(h2p, &(metalayer->content_len), sizeof(metalayer->content_len));
     h2p += 4;
     memcpy(h2p, metalayer->content, metalayer->content_len);  // buffer, no need to swap
     h2p += metalayer->content_len;
     // Update the offset now that we know it
     swap_store(h2 + offtooff[nmetalayer], &current_header_len, sizeof(current_header_len));
     current_header_len += 1 + 4 + metalayer->content_len;
   }
   free(offtooff);
   hsize = (int32_t)(h2p - h2);
   if (hsize != current_header_len) {  // sanity check
     return NULL;
   }
 
   // Set the length of the whole header now that we know it
   swap_store(h2 + FRAME_HEADER_LEN, &hsize, sizeof(hsize));
 
   return h2;
 }
@@ -1054,487 +1057,434 @@ int frame_update_header(blosc2_frame* frame, blosc2_schunk* schunk, bool new) {
 /* Get the (compressed) usermeta chunk out of a frame */
 int32_t frame_get_usermeta(blosc2_frame* frame, uint8_t** usermeta) {
   int32_t header_len;
   int64_t frame_len;
   int64_t nbytes;
   int64_t cbytes;
   int32_t chunksize;
   int32_t nchunks;
   int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
                             NULL, NULL, NULL, NULL, NULL);
   if (ret < 0) {
     BLOSC_TRACE_ERROR("Unable to get the header info from frame.");
     return -1;
   }
   int64_t trailer_offset = get_trailer_offset(frame, header_len, nbytes > 0);
   if (trailer_offset < 0) {
     BLOSC_TRACE_ERROR("Unable to get the trailer offset from frame.");
     return -1;
   }
   if (trailer_offset + FRAME_TRAILER_USERMETA_LEN_OFFSET + (signed)sizeof(int32_t) > frame_len) {
     BLOSC_TRACE_ERROR("Invalid trailer offset exceeds frame length.");
     return -1;
   }
 
   // Get the size of usermeta (inside the trailer)
   int32_t usermeta_len_network;
   if (frame->sdata != NULL) {
     memcpy(&usermeta_len_network, frame->sdata + trailer_offset + FRAME_TRAILER_USERMETA_LEN_OFFSET, sizeof(int32_t));
   }
   else {
     FILE* fp = NULL;
     if (frame->eframe) {
       char* eframe_name = malloc(strlen(frame->urlpath) + strlen("/chunks.b2frame") + 1);
       sprintf(eframe_name, "%s/chunks.b2frame", frame->urlpath);
       fp = fopen(eframe_name, "rb");
       free(eframe_name);
     }
     else {
       fp = fopen(frame->urlpath, "rb");
     }
     fseek(fp, trailer_offset + FRAME_TRAILER_USERMETA_LEN_OFFSET, SEEK_SET);
     size_t rbytes = fread(&usermeta_len_network, 1, sizeof(int32_t), fp);
     fclose(fp);
     if (rbytes != sizeof(int32_t)) {
       BLOSC_TRACE_ERROR("Cannot access the usermeta_len out of the fileframe.");
       return -1;
     }
   }
   int32_t usermeta_len;
   swap_store(&usermeta_len, &usermeta_len_network, sizeof(int32_t));
 
   if (usermeta_len < 0) {
     BLOSC_TRACE_ERROR("Invalid usermeta length.");
     return -1;
   }
   if (usermeta_len == 0) {
     *usermeta = NULL;
     return 0;
   }
 
   *usermeta = malloc(usermeta_len);
   if (frame->sdata != NULL) {
     memcpy(*usermeta, frame->sdata + trailer_offset + FRAME_TRAILER_USERMETA_OFFSET, usermeta_len);
   }
   else {
     FILE* fp = NULL;
     if (frame->eframe) {
       char* eframe_name = malloc(strlen(frame->urlpath) + strlen("/chunks.b2frame") + 1);
       sprintf(eframe_name, "%s/chunks.b2frame", frame->urlpath);
       fp = fopen(eframe_name, "rb+");
       free(eframe_name);
     }
     else {
       fp = fopen(frame->urlpath, "rb+");
     }
     fseek(fp, trailer_offset + FRAME_TRAILER_USERMETA_OFFSET, SEEK_SET);
     size_t rbytes = fread(*usermeta, 1, usermeta_len, fp);
     fclose(fp);
     if (rbytes != (size_t)usermeta_len) {
       BLOSC_TRACE_ERROR("Cannot read the complete usermeta chunk in frame. %ld != %ld.",
               (long)rbytes, (long)usermeta_len);
       return -1;
     }
   }
 
   return usermeta_len;
 }
 
-
-int frame_get_metalayers(blosc2_frame* frame, blosc2_schunk* schunk) {
-  int32_t header_len;
-  int64_t frame_len;
-  int64_t frame_pos = FRAME_IDX_SIZE;
-  int64_t nbytes;
-  int64_t cbytes;
-  int32_t chunksize;
-  int32_t nchunks;
-  int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
-                            NULL, NULL, NULL, NULL, NULL);
-  if (ret < 0) {
-    BLOSC_TRACE_ERROR("Unable to get the header info from frame.");
-    return -1;
-  }
-
-  // Get the header
-  uint8_t* header = NULL;
-  if (frame->sdata != NULL) {
-    header = frame->sdata;
-  } else {
-    size_t rbytes = 0;
-    header = malloc(header_len);
-    FILE* fp = NULL;
-    if (frame->eframe) {
-      char* eframe_name = malloc(strlen(frame->urlpath) + strlen("/chunks.b2frame") + 1);
-      sprintf(eframe_name, "%s/chunks.b2frame", frame->urlpath);
-      fp = fopen(eframe_name, "rb");
-      free(eframe_name);
-    }
-    else {
-      fp = fopen(frame->urlpath, "rb");
-    }
-    if (fp != NULL) {
-      rbytes = fread(header, 1, header_len, fp);
-      fclose(fp);
-    }
-    if (rbytes != (size_t) header_len) {
-      BLOSC_TRACE_ERROR("Cannot access the header out of the fileframe.");
-      free(header);
-      return -2;
-    }
-  }
+static int frame_get_metalayers_from_header(blosc2_frame* frame, blosc2_schunk* schunk, uint8_t* header,
+                                            int32_t header_len) {
+  int64_t header_pos = FRAME_IDX_SIZE;
 
   // Get the size for the index of metalayers
   uint16_t idx_size;
-  frame_pos += sizeof(idx_size);
-  if (frame_len < frame_pos) {
-    if (frame->sdata == NULL) {
-      free(header);
-    }
+  header_pos += sizeof(idx_size);
+  if (header_len < header_pos) {
     return -1;
   }
   swap_store(&idx_size, header + FRAME_IDX_SIZE, sizeof(idx_size));
 
   // Get the actual index of metalayers
   uint8_t* metalayers_idx = header + FRAME_IDX_SIZE + 2;
-  frame_pos += 1;
-  if (frame_len < frame_pos) {
-    if (frame->sdata == NULL) {
-      free(header);
-    }
+  header_pos += 1;
+  if (header_len < header_pos) {
     return -1;
   }
   if (metalayers_idx[0] != 0xde) {   // sanity check
-    if (frame->sdata == NULL) {
-      free(header);
-    }
     return -1;
   }
   uint8_t* idxp = metalayers_idx + 1;
   uint16_t nmetalayers;
-  frame_pos += sizeof(nmetalayers);
-  if (frame_len < frame_pos) {
-    if (frame->sdata == NULL) {
-      free(header);
-    }
+  header_pos += sizeof(nmetalayers);
+  if (header_len < header_pos) {
     return -1;
   }
   swap_store(&nmetalayers, idxp, sizeof(uint16_t));
   idxp += 2;
+  if (nmetalayers < 0 || nmetalayers > BLOSC2_MAX_METALAYERS) {
+    return -1;
+  }
   schunk->nmetalayers = nmetalayers;
 
   // Populate the metalayers and its serialized values
   for (int nmetalayer = 0; nmetalayer < nmetalayers; nmetalayer++) {
-    frame_pos += 1;
-    if (frame_len < frame_pos) {
-      if (frame->sdata == NULL) {
-        free(header);
-      }
+    header_pos += 1;
+    if (header_len < header_pos) {
       return -1;
     }
     if ((*idxp & 0xe0u) != 0xa0u) {   // sanity check
-      if (frame->sdata == NULL) {
-        free(header);
-      }
       return -1;
     }
     blosc2_metalayer* metalayer = calloc(sizeof(blosc2_metalayer), 1);
     schunk->metalayers[nmetalayer] = metalayer;
 
     // Populate the metalayer string
     int8_t nslen = *idxp & (uint8_t)0x1F;
     idxp += 1;
-    frame_pos += nslen;
-    if (frame_len < frame_pos) {
-      if (frame->sdata == NULL) {
-        free(header);
-      }
+    header_pos += nslen;
+    if (header_len < header_pos) {
       return -1;
     }
     char* ns = malloc((size_t)nslen + 1);
     memcpy(ns, idxp, nslen);
     ns[nslen] = '\0';
     idxp += nslen;
     metalayer->name = ns;
 
     // Populate the serialized value for this metalayer
     // Get the offset
-    frame_pos += 1;
-    if (frame_len < frame_pos) {
-      if (frame->sdata == NULL) {
-        free(header);
-      }
-      free(ns);
+    header_pos += 1;
+    if (header_len < header_pos) {
       return -1;
     }
     if ((*idxp & 0xffu) != 0xd2u) {   // sanity check
-      if (frame->sdata == NULL) {
-        free(header);
-      }
-      free(ns);
       return -1;
     }
     idxp += 1;
     int32_t offset;
-    frame_pos += sizeof(offset);
-    if (frame_len < frame_pos) {
-      if (frame->sdata == NULL) {
-        free(header);
-      }
-      free(ns);
+    header_pos += sizeof(offset);
+    if (header_len < header_pos) {
       return -1;
     }
     swap_store(&offset, idxp, sizeof(offset));
     idxp += 4;
-
     if (offset >= header_len) {
       // Offset exceeds header length
-      if (frame->sdata == NULL) {
-        free(header);
-      }
-      free(ns);
       return -1;
     }
     // Go to offset and see if we have the correct marker
     uint8_t* content_marker = header + offset;
     if (*content_marker != 0xc6) {
-      if (frame->sdata == NULL) {
-        free(header);
-      }
-      free(ns);
       return -1;
     }
 
     // Read the size of the content
     int32_t content_len;
-    frame_pos += sizeof(content_len);
-    if (frame_len < frame_pos) {
-      if (frame->sdata == NULL) {
-        free(header);
-      }
-      free(ns);
+    header_pos += sizeof(content_len);
+    if (header_len < header_pos) {
       return -1;
     }
     swap_store(&content_len, content_marker + 1, sizeof(content_len));
     metalayer->content_len = content_len;
 
     // Finally, read the content
-    frame_pos += content_len;
-    if (frame_len < frame_pos) {
-      if (frame->sdata == NULL) {
-        free(header);
-      }
-      free(ns);
+    header_pos += content_len;
+    if (header_len < header_pos) {
       return -1;
     }
     char* content = malloc((size_t)content_len);
     memcpy(content, content_marker + 1 + 4, (size_t)content_len);
     metalayer->content = (uint8_t*)content;
   }
 
+  return 1;
+}
+
+int frame_get_metalayers(blosc2_frame* frame, blosc2_schunk* schunk) {
+  int32_t header_len;
+  int64_t frame_len;
+  int64_t nbytes;
+  int64_t cbytes;
+  int32_t chunksize;
+  int32_t nchunks;
+  int ret = get_header_info(frame, &header_len, &frame_len, &nbytes, &cbytes, &chunksize, &nchunks,
+                            NULL, NULL, NULL, NULL, NULL);
+  if (ret < 0) {
+    BLOSC_TRACE_ERROR("Unable to get the header info from frame.");
+    return -1;
+  }
+
+  // Get the header
+  uint8_t* header = NULL;
+  if (frame->sdata != NULL) {
+    header = frame->sdata;
+  } else {
+    size_t rbytes = 0;
+    header = malloc(header_len);
+    FILE* fp = NULL;
+    if (frame->eframe) {
+      char* eframe_name = malloc(strlen(frame->urlpath) + strlen("/chunks.b2frame") + 1);
+      sprintf(eframe_name, "%s/chunks.b2frame", frame->urlpath);
+      fp = fopen(eframe_name, "rb");
+      free(eframe_name);
+    }
+    else {
+      fp = fopen(frame->urlpath, "rb");
+    }
+    if (fp != NULL) {
+      rbytes = fread(header, 1, header_len, fp);
+      fclose(fp);
+    }
+    if (rbytes != (size_t) header_len) {
+      BLOSC_TRACE_ERROR("Cannot access the header out of the fileframe.");
+      free(header);
+      return -2;
+    }
+  }
+
+  ret = frame_get_metalayers_from_header(frame, schunk, header, header_len);
+
   if (frame->sdata == NULL) {
     free(header);
   }
-  return 1;
+
+  return ret;
 }
 
 
 /* Get a super-chunk out of a frame */
 blosc2_schunk* blosc2_frame_to_schunk(blosc2_frame* frame, bool copy) {
   int32_t header_len;
   int64_t frame_len;
 
   blosc2_schunk* schunk = calloc(1, sizeof(blosc2_schunk));
   schunk->frame = frame;
+  schunk->avoid_frame_free = !copy;
   int ret = get_header_info(frame, &header_len, &frame_len, &schunk->nbytes, &schunk->cbytes,
                             &schunk->chunksize, &schunk->nchunks, &schunk->typesize,
                             &schunk->compcode, &schunk->clevel, schunk->filters, schunk->filters_meta);
   if (ret < 0) {
     BLOSC_TRACE_ERROR("Unable to get meta info from frame.");
-    free(schunk);
+    blosc2_schunk_free(schunk);
     return NULL;
   }
   int32_t nchunks = schunk->nchunks;
   int64_t nbytes = schunk->nbytes;
   (void) nbytes;
   int64_t cbytes = schunk->cbytes;
 
   // Compression and decompression contexts
   blosc2_cparams *cparams;
   blosc2_schunk_get_cparams(schunk, &cparams);
   schunk->cctx = blosc2_create_cctx(*cparams);
   free(cparams);
   blosc2_dparams *dparams;
   blosc2_schunk_get_dparams(schunk, &dparams);
   schunk->dctx = blosc2_create_dctx(*dparams);
   free(dparams);
 
   if (!copy) {
     goto out;
   }
 
   // We are not attached to a frame anymore
   schunk->frame = NULL;
 
   if (nchunks == 0) {
     goto out;
   }
 
   // Get the compressed offsets
   int32_t coffsets_cbytes = 0;
   uint8_t* coffsets = get_coffsets(frame, header_len, cbytes, &coffsets_cbytes);
   if (coffsets == NULL) {
-    blosc2_free_ctx(schunk->cctx);
-    blosc2_free_ctx(schunk->dctx);
-    free(schunk);
+    blosc2_schunk_free(schunk);
     BLOSC_TRACE_ERROR("Cannot get the offsets for the frame.");
     return NULL;
   }
 
   // Decompress offsets
   blosc2_dparams off_dparams = BLOSC2_DPARAMS_DEFAULTS;
   blosc2_context *dctx = blosc2_create_dctx(off_dparams);
   int64_t* offsets = (int64_t *) malloc((size_t)nchunks * 8);
   int32_t off_nbytes = blosc2_decompress_ctx(dctx, coffsets, coffsets_cbytes,
                                              offsets, nchunks * sizeof(int64_t));
   blosc2_free_ctx(dctx);
   if (off_nbytes < 0) {
     free(offsets);
-    blosc2_free_ctx(schunk->cctx);
-    blosc2_free_ctx(schunk->dctx);
-    free(schunk);
+    blosc2_schunk_free(schunk);
     BLOSC_TRACE_ERROR("Cannot decompress the offsets chunk.");
     return NULL;
   }
 
   // We want the sequential schunk, so create the actual data chunks (and, while doing this,
   // get a guess at the blocksize used in this frame)
   int64_t acc_nbytes = 0;
   int64_t acc_cbytes = 0;
   int32_t blocksize = 0;
   int32_t csize = 0;
   uint8_t* data_chunk = NULL;
   int32_t prev_alloc = BLOSC_MIN_HEADER_LENGTH;
   FILE* fp = NULL;
   if (frame->sdata == NULL) {
     data_chunk = malloc((size_t)prev_alloc);
     if (!frame->eframe) {
       // If not the chunks won't be in the frame
       fp = fopen(frame->urlpath, "rb");
       if (fp == NULL) {
+        free(data_chunk);
         free(offsets);
-        blosc2_free_ctx(schunk->cctx);
-        blosc2_free_ctx(schunk->dctx);
-        free(schunk);
+        blosc2_schunk_free(schunk);
         return NULL;
       }
     }
   }
   schunk->data = malloc(nchunks * sizeof(void*));
   for (int i = 0; i < nchunks; i++) {
     if (frame->sdata != NULL) {
       data_chunk = frame->sdata + header_len + offsets[i];
       csize = sw32_(data_chunk + BLOSC2_CHUNK_CBYTES);
     }
     else {
       size_t rbytes;
       bool needs_free = false;
       if (frame->eframe) {
         rbytes = eframe_get_chunk(frame, offsets[i], &data_chunk, &needs_free);
       }
       else {
         fseek(fp, header_len + offsets[i], SEEK_SET);
         rbytes = fread(data_chunk, 1, BLOSC_MIN_HEADER_LENGTH, fp);
         if (rbytes != BLOSC_MIN_HEADER_LENGTH) {
           fclose(fp);
           return NULL;
         }
       }
       if (rbytes != BLOSC_MIN_HEADER_LENGTH) {
         if (frame->eframe) {
           free(data_chunk);
         }
         else {
           fclose(fp);
         }
         free(offsets);
-        blosc2_free_ctx(schunk->cctx);
-        blosc2_free_ctx(schunk->dctx);
-        free(schunk);
+        blosc2_schunk_free(schunk);
         return NULL;
       }
       csize = sw32_(data_chunk + BLOSC2_CHUNK_CBYTES);
       if (csize > prev_alloc) {
         data_chunk = realloc(data_chunk, (size_t)csize);
         prev_alloc = csize;
       }
       if (!frame->eframe) {
         fseek(fp, header_len + offsets[i], SEEK_SET);
         rbytes = fread(data_chunk, 1, (size_t)csize, fp);
         if (rbytes != (size_t)csize) {
           fclose(fp);
           free(offsets);
-          blosc2_free_ctx(schunk->cctx);
-          blosc2_free_ctx(schunk->dctx);
-          free(schunk);
+          blosc2_schunk_free(schunk);
           return NULL;
         }
       }
     }
     uint8_t* new_chunk = malloc((size_t)csize);
     memcpy(new_chunk, data_chunk, (size_t)csize);
     schunk->data[i] = new_chunk;
     acc_nbytes += sw32_(data_chunk + BLOSC2_CHUNK_NBYTES);
     acc_cbytes += csize;
     int32_t blocksize_ = sw32_(data_chunk + BLOSC2_CHUNK_BLOCKSIZE);
     if (i == 0) {
       blocksize = blocksize_;
     }
     else if (blocksize != blocksize_) {
       // Blocksize varies
       blocksize = 0;
     }
   }
   schunk->blocksize = blocksize;
 
   if (frame->sdata == NULL) {
     free(data_chunk);
     if (!frame->eframe) {
       fclose(fp);
     }
   }
   free(offsets);
 
   if (acc_nbytes != nbytes || acc_cbytes != cbytes) {
-    blosc2_free_ctx(schunk->cctx);
-    blosc2_free_ctx(schunk->dctx);
-    free(schunk);
+    blosc2_schunk_free(schunk);
     return NULL;
   }
 
   uint8_t* usermeta;
   int32_t usermeta_len;
 
   int rc;
   out:
   rc = frame_get_metalayers(frame, schunk);
   if (rc < 0) {
-    blosc2_free_ctx(schunk->cctx);
-    blosc2_free_ctx(schunk->dctx);
-    free(schunk);
+    blosc2_schunk_free(schunk);
     BLOSC_TRACE_ERROR("Cannot access the metalayers.");
     return NULL;
   }
 
   usermeta_len = frame_get_usermeta(frame, &usermeta);
   if (usermeta_len < 0) {
-    blosc2_free_ctx(schunk->cctx);
-    blosc2_free_ctx(schunk->dctx);
-    free(schunk);
+    blosc2_schunk_free(schunk);
     BLOSC_TRACE_ERROR("Cannot access the usermeta chunk.");
     return NULL;
   }
   schunk->usermeta = usermeta;
   schunk->usermeta_len = usermeta_len;
 
   return schunk;
 }
diff --git a/blosc/schunk.c b/blosc/schunk.c
index 42ab7f0a..488412a4 100644
--- a/blosc/schunk.c
+++ b/blosc/schunk.c
@@ -241,59 +241,64 @@ blosc2_schunk* blosc2_schunk_open(const blosc2_storage storage) {
 /* Free all memory from a super-chunk. */
 int blosc2_schunk_free(blosc2_schunk *schunk) {
   if (schunk->data != NULL) {
     for (int i = 0; i < schunk->nchunks; i++) {
       free(schunk->data[i]);
     }
     free(schunk->data);
   }
-  blosc2_free_ctx(schunk->cctx);
-  blosc2_free_ctx(schunk->dctx);
+  if (schunk->cctx != NULL)
+    blosc2_free_ctx(schunk->cctx);
+  if (schunk->dctx != NULL)
+    blosc2_free_ctx(schunk->dctx);
 
   if (schunk->nmetalayers > 0) {
     for (int i = 0; i < schunk->nmetalayers; i++) {
-      free(schunk->metalayers[i]->name);
-      free(schunk->metalayers[i]->content);
-      free(schunk->metalayers[i]);
+      if (schunk->metalayers[i] != NULL) {
+        if (schunk->metalayers[i]->name != NULL)
+          free(schunk->metalayers[i]->name);
+        if (schunk->metalayers[i]->content != NULL)
+          free(schunk->metalayers[i]->content);
+        free(schunk->metalayers[i]);
+      }
     }
     schunk->nmetalayers = 0;
   }
 
   if (schunk->storage != NULL) {
     if (schunk->storage->urlpath != NULL) {
       free(schunk->storage->urlpath);
     }
     free(schunk->storage->cparams);
     free(schunk->storage->dparams);
     free(schunk->storage);
   }
 
-  if (schunk->frame != NULL) {
+  if (schunk->frame != NULL && !schunk->avoid_frame_free) {
     blosc2_frame_free(schunk->frame);
   }
 
   if (schunk->usermeta_len > 0) {
     free(schunk->usermeta);
   }
 
   free(schunk);
 
   return 0;
 }
 
 
 /* Create a super-chunk out of a serialized frame (no copy is made). */
 blosc2_schunk* blosc2_schunk_open_sframe(uint8_t *sframe, int64_t len) {
   blosc2_frame* frame = blosc2_frame_from_sframe(sframe, len, false);
   if (frame == NULL) {
     return NULL;
   }
   blosc2_schunk* schunk = blosc2_frame_to_schunk(frame, false);
   if (schunk == NULL) {
-    /* Use free instead of blosc2_frame_free since no copy */
-    free(frame);
+    blosc2_frame_free(frame);
   }
   return schunk;
 }
 
 
 /* Append an existing chunk into a super-chunk. */
