commit 99b5b3f1b125010aea0cbb9183950fa18fe089b5
Author: Ebrahim Byagowi <ebrahim@gnu.org>
Date:   Wed Mar 4 11:15:46 2020 +0330

    [gvar] Make sure TupleVarHeader has the needed size
    
    Fixes https://crbug.com/oss-fuzz/21026

diff --git a/src/hb-ot-var-gvar-table.hh b/src/hb-ot-var-gvar-table.hh
index 7861bd47b..9cf319a36 100644
--- a/src/hb-ot-var-gvar-table.hh
+++ b/src/hb-ot-var-gvar-table.hh
@@ -199,176 +199,176 @@ struct TupleVarCount : HBUINT16
 struct GlyphVarData
 {
   const TupleVarHeader &get_tuple_var_header (void) const
   { return StructAfter<TupleVarHeader> (data); }
 
   struct tuple_iterator_t
   {
     void init (hb_bytes_t var_data_bytes_, unsigned int axis_count_)
     {
       var_data_bytes = var_data_bytes_;
       var_data = var_data_bytes_.as<GlyphVarData> ();
       index = 0;
       axis_count = axis_count_;
       current_tuple = &var_data->get_tuple_var_header ();
       data_offset = 0;
     }
 
     bool get_shared_indices (hb_vector_t<unsigned int> &shared_indices /* OUT */)
     {
       if (var_data->has_shared_point_numbers ())
       {
 	const HBUINT8 *base = &(var_data+var_data->data);
 	const HBUINT8 *p = base;
 	if (!unpack_points (p, shared_indices, var_data_bytes)) return false;
 	data_offset = p - base;
       }
       return true;
     }
 
     bool is_valid () const
     {
       return (index < var_data->tupleVarCount.get_count ()) &&
 	     var_data_bytes.check_range (current_tuple, TupleVarHeader::min_size) &&
-	     var_data_bytes.check_range (current_tuple, current_tuple->get_data_size ()) &&
+	     var_data_bytes.check_range (current_tuple, hb_max (current_tuple->get_data_size (), current_tuple->get_size (axis_count))) &&
 	     current_tuple->get_size (axis_count);
     }
 
     bool move_to_next ()
     {
       data_offset += current_tuple->get_data_size ();
       current_tuple = &current_tuple->get_next (axis_count);
       index++;
       return is_valid ();
     }
 
     const HBUINT8 *get_serialized_data () const
     { return &(var_data+var_data->data) + data_offset; }
 
     private:
     const GlyphVarData *var_data;
     unsigned int index;
     unsigned int axis_count;
     unsigned int data_offset;
 
     public:
     hb_bytes_t var_data_bytes;
     const TupleVarHeader *current_tuple;
   };
 
   static bool get_tuple_iterator (hb_bytes_t var_data_bytes, unsigned axis_count,
 				  hb_vector_t<unsigned int> &shared_indices /* OUT */,
 				  tuple_iterator_t *iterator /* OUT */)
   {
     iterator->init (var_data_bytes, axis_count);
     if (!iterator->get_shared_indices (shared_indices))
       return false;
     return iterator->is_valid ();
   }
 
   bool has_shared_point_numbers () const { return tupleVarCount.has_shared_point_numbers (); }
 
   static bool unpack_points (const HBUINT8 *&p /* IN/OUT */,
 			     hb_vector_t<unsigned int> &points /* OUT */,
 			     const hb_bytes_t &bytes)
   {
     enum packed_point_flag_t
     {
       POINTS_ARE_WORDS     = 0x80,
       POINT_RUN_COUNT_MASK = 0x7F
     };
 
     if (unlikely (!bytes.check_range (p))) return false;
 
     uint16_t count = *p++;
     if (count & POINTS_ARE_WORDS)
     {
       if (unlikely (!bytes.check_range (p))) return false;
       count = ((count & POINT_RUN_COUNT_MASK) << 8) | *p++;
     }
     points.resize (count);
 
     unsigned int n = 0;
     uint16_t i = 0;
     while (i < count)
     {
       if (unlikely (!bytes.check_range (p))) return false;
       uint16_t j;
       uint8_t control = *p++;
       uint16_t run_count = (control & POINT_RUN_COUNT_MASK) + 1;
       if (control & POINTS_ARE_WORDS)
       {
 	for (j = 0; j < run_count && i < count; j++, i++)
 	{
 	  if (unlikely (!bytes.check_range ((const HBUINT16 *) p)))
 	    return false;
 	  n += *(const HBUINT16 *)p;
 	  points[i] = n;
 	  p += HBUINT16::static_size;
 	}
       }
       else
       {
 	for (j = 0; j < run_count && i < count; j++, i++)
 	{
 	  if (unlikely (!bytes.check_range (p))) return false;
 	  n += *p++;
 	  points[i] = n;
 	}
       }
       if (j < run_count) return false;
     }
     return true;
   }
 
   static bool unpack_deltas (const HBUINT8 *&p /* IN/OUT */,
 			     hb_vector_t<int> &deltas /* IN/OUT */,
 			     const hb_bytes_t &bytes)
   {
     enum packed_delta_flag_t
     {
       DELTAS_ARE_ZERO      = 0x80,
       DELTAS_ARE_WORDS     = 0x40,
       DELTA_RUN_COUNT_MASK = 0x3F
     };
 
     unsigned int i = 0;
     unsigned int count = deltas.length;
     while (i < count)
     {
       if (unlikely (!bytes.check_range (p))) return false;
       uint8_t control = *p++;
       unsigned int run_count = (control & DELTA_RUN_COUNT_MASK) + 1;
       unsigned int j;
       if (control & DELTAS_ARE_ZERO)
 	for (j = 0; j < run_count && i < count; j++, i++)
 	  deltas[i] = 0;
       else if (control & DELTAS_ARE_WORDS)
 	for (j = 0; j < run_count && i < count; j++, i++)
 	{
 	  if (unlikely (!bytes.check_range ((const HBUINT16 *) p)))
 	    return false;
 	  deltas[i] = *(const HBINT16 *) p;
 	  p += HBUINT16::static_size;
 	}
       else
 	for (j = 0; j < run_count && i < count; j++, i++)
 	{
 	  if (unlikely (!bytes.check_range (p)))
 	    return false;
 	  deltas[i] = *(const HBINT8 *) p++;
 	}
       if (j < run_count)
 	return false;
     }
     return true;
   }
 
   bool has_data () const { return tupleVarCount; }
 
   protected:
   TupleVarCount		tupleVarCount;
   OffsetTo<HBUINT8>	data;
   /* TupleVarHeader tupleVarHeaders[] */
   public:
   DEFINE_SIZE_MIN (4);
 };
diff --git a/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-draw-fuzzer-5703524300357632 b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-draw-fuzzer-5703524300357632
new file mode 100644
index 000000000..baff79fd1
Binary files /dev/null and b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-draw-fuzzer-5703524300357632 differ
