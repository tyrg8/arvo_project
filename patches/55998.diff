commit a97e702bb8e66b4f5b6230b9962b7d36869237bc
Author: Marco HÃ¼nseler <marco.huenseler@h-brs.de>
Date:   Mon Mar 6 13:23:52 2023 +0100

    sm-eac: mark cryptographic mechanism field as optional and fix asn.1 encode error in encode_mse_cdata during terminal authentication. Fixes #2726

diff --git a/src/sm/sm-eac.c b/src/sm/sm-eac.c
index 4ca94a35..ea1256bb 100644
--- a/src/sm/sm-eac.c
+++ b/src/sm/sm-eac.c
@@ -179,80 +179,80 @@ static int get_ef_card_access(sc_card_t *card,
 /*
  * MSE:Set AT
  */
 static int encode_mse_cdata(struct sc_context *ctx, int protocol,
 		const unsigned char *key_reference1, size_t key_reference1_len,
 		const unsigned char *key_reference2, size_t key_reference2_len,
 		const unsigned char *eph_pub_key, size_t eph_pub_key_len,
 		const unsigned char *auxiliary_data, size_t auxiliary_data_len,
 		const CVC_CHAT *chat, unsigned char **cdata)
 {
 	unsigned char *data = NULL, *encoded_chat = NULL, oid[16], *p = NULL;
 	size_t data_len = 0, oid_len = 0;
 	int r, encoded_chat_len = 0;
 
 	struct sc_asn1_entry capdu_eac_mse[] = {
 		{ "Cryptographic mechanism reference",
-			SC_ASN1_OCTET_STRING, SC_ASN1_CTX|0x00, 0, NULL, NULL },
+			SC_ASN1_OCTET_STRING, SC_ASN1_CTX|0x00, SC_ASN1_OPTIONAL, NULL, NULL },
 		{ "Reference of a public key / secret key",
 			SC_ASN1_OCTET_STRING, SC_ASN1_CTX|0x03, SC_ASN1_OPTIONAL, NULL, NULL },
 		{ "Reference of a private key / Reference for computing a session key",
 			SC_ASN1_OCTET_STRING, SC_ASN1_CTX|0x04, SC_ASN1_OPTIONAL, NULL, NULL },
 		{ "Ephemeral Public Key",
 			SC_ASN1_OCTET_STRING, SC_ASN1_CTX|0x11, SC_ASN1_OPTIONAL, NULL, NULL },
 		{ "Auxiliary authenticated data",
 			SC_ASN1_OCTET_STRING, SC_ASN1_APP|SC_ASN1_CONS|0x07, SC_ASN1_OPTIONAL, NULL, NULL },
 		/* "Certificate Holder Authorization Template", */
 		{ NULL , 0 , 0 , 0 , NULL , NULL }
 	};
 
 	if (!cdata) {
 		r = SC_ERROR_INVALID_ARGUMENTS;
 		goto err;
 	}
 
 	if (protocol) {
 		ASN1_OBJECT *object = NULL;
 #ifndef HAVE_EAC_OBJ_NID2OBJ
 		object = OBJ_nid2obj(protocol);
 #else
 		object = EAC_OBJ_nid2obj(protocol);
 #endif
 		if (!object) {
 			sc_debug(ctx, SC_LOG_DEBUG_VERBOSE, "Error setting Cryptographic mechanism reference of MSE:Set AT data");
 			r = SC_ERROR_INTERNAL;
 			goto err;
 		}
 		oid_len = OBJ_length(object);
 		memcpy(oid, OBJ_get0_data(object), oid_len);
 	}
 
 	sc_format_asn1_entry(capdu_eac_mse + 0, oid, &oid_len, oid_len > 0);
 	sc_format_asn1_entry(capdu_eac_mse + 1, (unsigned char *) key_reference1, &key_reference1_len, key_reference1 && key_reference1_len);
 	sc_format_asn1_entry(capdu_eac_mse + 2, (unsigned char *) key_reference2, &key_reference2_len, key_reference2 && key_reference2_len);
 	sc_format_asn1_entry(capdu_eac_mse + 3, (unsigned char *) eph_pub_key, &eph_pub_key_len, eph_pub_key && eph_pub_key_len);
 	sc_format_asn1_entry(capdu_eac_mse + 4, (unsigned char *) auxiliary_data, &auxiliary_data_len, auxiliary_data && auxiliary_data_len);
 
 	r = sc_asn1_encode(ctx, capdu_eac_mse, &data, &data_len);
 	SC_TEST_GOTO_ERR(ctx, SC_LOG_DEBUG_VERBOSE, r, "Error encoding MSE:Set AT APDU data");
 
 	if (chat) {
 		encoded_chat_len = i2d_CVC_CHAT((CVC_CHAT *) chat, &encoded_chat);
 		if (encoded_chat_len < 0) {
 			ssl_error(ctx);
 			r = SC_ERROR_INTERNAL;
 			goto err;
 		}
 	}
 
 
 	p = realloc(*cdata, data_len + encoded_chat_len);
 	if (!p) {
 		r = SC_ERROR_OUT_OF_MEMORY;
 		goto err;
 	}
 	memcpy(p, data, data_len);
 	memcpy(p+data_len, encoded_chat, encoded_chat_len);
 	*cdata = p;
 	r = data_len + encoded_chat_len;
 
 	sc_debug_hex(ctx, SC_LOG_DEBUG_SM, "MSE command data", p, r);
