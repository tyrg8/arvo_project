commit ddfd3a99268136d4c321fa9e2fc38c2d2b8e329d
Author: Arran Cudbard-Bell <a.cudbardb@freeradius.org>
Date:   Thu Jun 16 08:54:45 2022 -0500

    Fix fuzzer crash

diff --git a/src/lib/util/size.c b/src/lib/util/size.c
index f4fed21499..bc4c82a70a 100644
--- a/src/lib/util/size.c
+++ b/src/lib/util/size.c
@@ -30,106 +30,109 @@ RCSID("$Id$")
 /** Parse a size string with optional unit
  *
  * Default scale with no suffix is bytes.
  *
  * @param[out] out	Parsed and scaled size
  * @param[in] in	sbuff to parse.
  * @return
  *	- >0 on success.
  *	- <0 on error.
  */
 fr_slen_t fr_size_from_str(size_t *out, fr_sbuff_t *in)
 {
 	static uint64_t	base2_units[]= {
 		['k'] = (uint64_t)1024,
 		['m'] = (uint64_t)1024 * 1024,
 		['g'] = (uint64_t)1024 * 1024 * 1024,
 		['t'] = (uint64_t)1024 * 1024 * 1024 * 1024,
 		['p'] = (uint64_t)1024 * 1024 * 1024 * 1024 * 1024,
 		['e'] = (uint64_t)1024 * 1024 * 1024 * 1024 * 1024 * 1024,
 	};
 	static size_t base2_units_len = NUM_ELEMENTS(base2_units);
 
 	static uint64_t base10_units[] = {
 		['k'] = (uint64_t)1000,
 		['m'] = (uint64_t)1000 * 1000,
 		['g'] = (uint64_t)1000 * 1000 * 1000,
 		['t'] = (uint64_t)1000 * 1000 * 1000 * 1000,
 		['p'] = (uint64_t)1000 * 1000 * 1000 * 1000 * 1000,
 		['e'] = (uint64_t)1000 * 1000 * 1000 * 1000 * 1000 * 1000,
 	};
 	static size_t base10_units_len = NUM_ELEMENTS(base10_units);
 
 	fr_sbuff_t	our_in = FR_SBUFF(in);
 	char		c = '\0';
 	uint64_t	size;
 
 	*out = 0;
 
 	if (fr_sbuff_out(NULL, &size, &our_in) < 0) return fr_sbuff_error(&our_in);
+	if (!fr_sbuff_extend(&our_in)) goto done;
+
 	c = tolower(*fr_sbuff_current(&our_in));
 
 	/*
 	 *	Special cases first...
 	 */
 	switch (c) {
 	case 'n':		/* nibble */
 		fr_sbuff_next(&our_in);
 		if (size & 0x01) {
 			fr_strerror_const("Sizes specified in nibbles must be an even number");
 			fr_sbuff_set_to_start(&our_in);
 			return fr_sbuff_error(&our_in);
 		}
 		size /= 2;
 		break;
 
 	case '\0':
 		break;
 
 	case 'b':		/* byte */
 		fr_sbuff_next(&our_in);
 		break;
 
 	default:
 	{
 		uint64_t	*units;
 		size_t		units_len;
 		bool		is_base2;
 
 		fr_sbuff_next(&our_in);
 		is_base2 = fr_sbuff_next_if_char(&our_in, 'i') || fr_sbuff_next_if_char(&our_in, 'I');
 
 		if (!fr_sbuff_next_if_char(&our_in, 'b')) (void)fr_sbuff_next_if_char(&our_in, 'B');	/* Optional */
 
 		if (is_base2) {
 			units = base2_units;
 			units_len = base2_units_len;
 		} else {
 			units = base10_units;
 			units_len = base10_units_len;
 		}
 
 		if (((size_t)c >= units_len) || units[(uint8_t)c] == 0) {
 			fr_strerror_printf("Unknown unit '%c'", c);
 			return fr_sbuff_error(&our_in);
 		}
 
 		if (!fr_multiply(&size, size, units[(uint8_t)c])) {
 		overflow:
 			fr_strerror_printf("Value must be less than %zu", (size_t)SIZE_MAX);
 			fr_sbuff_set_to_start(&our_in);
 			return fr_sbuff_error(&our_in);
 		}
 	}
 	}
 
 	if (size > SIZE_MAX) {
 		fr_strerror_printf("Value %" PRIu64 " is greater than the maximum "
 				   "file/memory size of this system (%zu)", size, (size_t)SIZE_MAX);
 
 		goto overflow;
 	}
 
+done:
 	*out = (size_t)size;
 
 	return fr_sbuff_set(in, &our_in);
 }
