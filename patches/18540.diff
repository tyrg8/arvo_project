commit 026b6ab43dfb52b768ad15123dc698e05c52be20
Author: Frank Morgner <frankmorgner@gmail.com>
Date:   Sat Oct 26 23:56:19 2019 +0200

    fuzzing: validate PIN only if it's a PIN
    
    https://oss-fuzz.com/testcase-detail/5693809152753664

diff --git a/src/tests/fuzzing/fuzz_pkcs15_reader.c b/src/tests/fuzzing/fuzz_pkcs15_reader.c
index 9bac1309..16578bf1 100644
--- a/src/tests/fuzzing/fuzz_pkcs15_reader.c
+++ b/src/tests/fuzzing/fuzz_pkcs15_reader.c
@@ -174,91 +174,93 @@ void fuzz_add_reader(struct sc_context *ctx, const uint8_t *Data, size_t Size)
 int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size)
 {
     struct sc_context *ctx = NULL;
     struct sc_card *card = NULL;
     struct sc_pkcs15_card *p15card = NULL;
     struct sc_reader *reader;
     struct sc_pkcs15_object *obj;
 
     sc_establish_context(&ctx, "fuzz");
     if (!ctx)
         return 0;
     /* copied from sc_release_context() */
     while (list_size(&ctx->readers)) {
         sc_reader_t *rdr = (sc_reader_t *) list_get_at(&ctx->readers, 0);
         _sc_delete_reader(ctx, rdr);
     }
     if (ctx->reader_driver->ops->finish != NULL)
         ctx->reader_driver->ops->finish(ctx);
 
     ctx->reader_driver = sc_get_fuzz_driver();
 
     fuzz_add_reader(ctx, Data, Size);
 
     reader = sc_ctx_get_reader(ctx, 0);
     sc_connect_card(reader, &card);
     sc_pkcs15_bind(card, NULL, &p15card);
 
     if (p15card) {
         const uint8_t *in, *param;
         uint16_t in_len, param_len;
         fuzz_get_chunk(reader, &in, &in_len);
         fuzz_get_chunk(reader, &param, &param_len);
         for (obj = p15card->obj_list; obj != NULL; obj = obj->next) {
             u8 buf[0xFFFF];
             size_t i;
 
             int decipher_flags[] = {SC_ALGORITHM_RSA_RAW,
                 SC_ALGORITHM_RSA_PAD_PKCS1, SC_ALGORITHM_RSA_PAD_ANSI,
                 SC_ALGORITHM_RSA_PAD_ISO9796};
             for (i = 0; i < sizeof decipher_flags/sizeof *decipher_flags; i++) {
                 sc_pkcs15_decipher(p15card, obj, decipher_flags[i],
                         in, in_len, buf, sizeof buf);
             }
 
             i = sizeof buf;
             sc_pkcs15_derive(p15card, obj, 0,
                     in, in_len, buf, &i);
 
             int wrap_flags[] = {0, SC_ALGORITHM_AES_ECB, SC_ALGORITHM_AES_CBC_PAD,
                 SC_ALGORITHM_AES_CBC};
             for (i = 0; i < sizeof wrap_flags/sizeof *wrap_flags; i++) {
                 struct sc_pkcs15_object target_key;
                 sc_pkcs15_unwrap(p15card, obj, &target_key, wrap_flags[i],
                         in, in_len, param, param_len);
                 unsigned long l = sizeof buf;
                 sc_pkcs15_wrap(p15card, obj, &target_key, wrap_flags[i],
                         buf, &l, in, in_len);
             }
 
             int signature_flags[] = {SC_ALGORITHM_RSA_RAW,
                 SC_ALGORITHM_RSA_PAD_PKCS1, SC_ALGORITHM_RSA_PAD_ANSI,
                 SC_ALGORITHM_RSA_PAD_ISO9796,
                 SC_ALGORITHM_RSA_PAD_PSS|SC_ALGORITHM_MGF1_SHA1,
                 SC_ALGORITHM_RSA_PAD_PSS|SC_ALGORITHM_MGF1_SHA256,
                 SC_ALGORITHM_RSA_PAD_PSS|SC_ALGORITHM_MGF1_SHA384,
                 SC_ALGORITHM_RSA_PAD_PSS|SC_ALGORITHM_MGF1_SHA512,
                 SC_ALGORITHM_RSA_PAD_PSS|SC_ALGORITHM_MGF1_SHA224,
                 SC_ALGORITHM_ECDSA_RAW, SC_ALGORITHM_ECDSA_HASH_SHA1,
                 SC_ALGORITHM_ECDSA_HASH_SHA224, SC_ALGORITHM_ECDSA_HASH_SHA256,
                 SC_ALGORITHM_ECDSA_HASH_SHA384, SC_ALGORITHM_ECDSA_HASH_SHA512,
                 SC_ALGORITHM_GOSTR3410_RAW, SC_ALGORITHM_GOSTR3410_HASH_GOSTR3411,
                 SC_ALGORITHM_GOSTR3410_HASHES,
             };
             for (i = 0; i < sizeof signature_flags/sizeof *signature_flags; i++) {
                 sc_pkcs15_compute_signature(p15card, obj, signature_flags[i],
                         in, in_len, buf, sizeof buf);
             }
 
-            sc_pkcs15_verify_pin(p15card, obj, in, in_len);
-            sc_pkcs15_change_pin(p15card, obj, in, in_len, param, param_len);
-            sc_pkcs15_unblock_pin(p15card, obj, in, in_len, param, param_len);
-            sc_pkcs15_get_pin_info(p15card, obj);
+            if (obj->type == SC_PKCS15_TYPE_AUTH_PIN) {
+                sc_pkcs15_verify_pin(p15card, obj, in, in_len);
+                sc_pkcs15_change_pin(p15card, obj, in, in_len, param, param_len);
+                sc_pkcs15_unblock_pin(p15card, obj, in, in_len, param, param_len);
+                sc_pkcs15_get_pin_info(p15card, obj);
+            }
         }
         sc_pkcs15_card_free(p15card);
     }
 
     sc_disconnect_card(card);
     sc_release_context(ctx);
 
     return 0;
 }
