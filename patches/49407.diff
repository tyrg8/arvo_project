commit 32c85b8c8c1994e318dce49b928a7298a0b23560
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Sat Jul 23 10:50:26 2022 -0600

    [avar2] Fix mapping when coords length don't match
    
    Ouch.
    
    Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=49407

diff --git a/src/hb-ot-var-avar-table.hh b/src/hb-ot-var-avar-table.hh
index 18510d36a..5946aef63 100644
--- a/src/hb-ot-var-avar-table.hh
+++ b/src/hb-ot-var-avar-table.hh
@@ -129,114 +129,117 @@ struct SegmentMaps : Array16Of<AxisValueMap>
 struct avar
 {
   static constexpr hb_tag_t tableTag = HB_OT_TAG_avar;
 
   bool has_data () const { return version.to_int (); }
 
   const SegmentMaps* get_segment_maps () const
   { return &firstAxisSegmentMaps; }
 
   unsigned get_axis_count () const
   { return axisCount; }
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     if (!(version.sanitize (c) &&
 	  (version.major == 1
 #ifndef HB_NO_VARIATIONS2
 	   || version.major == 2
 #endif
 	   ) &&
 	  c->check_struct (this)))
       return_trace (false);
 
     const SegmentMaps *map = &firstAxisSegmentMaps;
     unsigned int count = axisCount;
     for (unsigned int i = 0; i < count; i++)
     {
       if (unlikely (!map->sanitize (c)))
 	return_trace (false);
       map = &StructAfter<SegmentMaps> (*map);
     }
 
 #ifndef HB_NO_VARIATIONS2
     if (version.major < 2)
       return_trace (true);
 
     const auto &v2 = * (const avarV2Tail *) map;
     if (unlikely (!v2.sanitize (c, this)))
       return_trace (false);
 #endif
 
     return_trace (true);
   }
 
   void map_coords (int *coords, unsigned int coords_length) const
   {
     unsigned int count = hb_min (coords_length, axisCount);
 
     const SegmentMaps *map = &firstAxisSegmentMaps;
     for (unsigned int i = 0; i < count; i++)
     {
       coords[i] = map->map (coords[i]);
       map = &StructAfter<SegmentMaps> (*map);
     }
 
 #ifndef HB_NO_VARIATIONS2
     if (version.major < 2)
       return;
 
+    for (; count < axisCount; count++)
+      map = &StructAfter<SegmentMaps> (*map);
+
     const auto &v2 = * (const avarV2Tail *) map;
 
     const auto &varidx_map = this+v2.varIdxMap;
     const auto &var_store = this+v2.varStore;
     auto *var_store_cache = var_store.create_cache ();
 
     hb_vector_t<int> out;
     out.alloc (coords_length);
     for (unsigned i = 0; i < coords_length; i++)
     {
       int v = coords[i];
       uint32_t varidx = varidx_map.map (i);
       float delta = var_store.get_delta (varidx, coords, coords_length, var_store_cache);
       v += roundf (delta);
       v = hb_clamp (v, -(1<<14), +(1<<14));
       out.push (v);
     }
 
     OT::VariationStore::destroy_cache (var_store_cache);
 
     for (unsigned i = 0; i < coords_length; i++)
       coords[i] = out[i];
 #endif
   }
 
   void unmap_coords (int *coords, unsigned int coords_length) const
   {
     unsigned int count = hb_min (coords_length, axisCount);
 
     const SegmentMaps *map = &firstAxisSegmentMaps;
     for (unsigned int i = 0; i < count; i++)
     {
       coords[i] = map->unmap (coords[i]);
       map = &StructAfter<SegmentMaps> (*map);
     }
   }
 
   protected:
   FixedVersion<>version;	/* Version of the avar table
 				 * initially set to 0x00010000u */
   HBUINT16	reserved;	/* This field is permanently reserved. Set to 0. */
   HBUINT16	axisCount;	/* The number of variation axes in the font. This
 				 * must be the same number as axisCount in the
 				 * 'fvar' table. */
   SegmentMaps	firstAxisSegmentMaps;
 
   public:
   DEFINE_SIZE_MIN (8);
 };
 
 } /* namespace OT */
 
 
 #endif /* HB_OT_VAR_AVAR_TABLE_HH */
diff --git a/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-shape-fuzzer-4523349576908800 b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-shape-fuzzer-4523349576908800
new file mode 100644
index 000000000..d66fb2af5
Binary files /dev/null and b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-shape-fuzzer-4523349576908800 differ
