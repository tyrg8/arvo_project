commit 155f73bdd261622323491df4aebb840cde8bfee1
Author: Albert Astals Cid <aacid@kde.org>
Date:   Tue Apr 7 17:54:22 2020 +0200

    Fix crash in destruction of standalone forms
    
    If we just give the Dict to Object() it doesn't increase the ref
    so on destruction we do one unref too much (because we had done one ref
    too few) and crash

diff --git a/poppler/Annot.h b/poppler/Annot.h
index 7e911f28..47d8b48b 100644
--- a/poppler/Annot.h
+++ b/poppler/Annot.h
@@ -1,51 +1,51 @@
 //========================================================================
 //
 // Annot.h
 //
 // Copyright 2000-2003 Glyph & Cog, LLC
 //
 //========================================================================
 
 //========================================================================
 //
 // Modified under the Poppler project - http://poppler.freedesktop.org
 //
 // All changes made under the Poppler project to this file are licensed
 // under GPL version 2 or later
 //
 // Copyright (C) 2006 Scott Turner <scotty1024@mac.com>
 // Copyright (C) 2007, 2008 Julien Rebetez <julienr@svn.gnome.org>
 // Copyright (C) 2007-2011, 2013, 2015, 2018 Carlos Garcia Campos <carlosgc@gnome.org>
 // Copyright (C) 2007, 2008 Iñigo Martínez <inigomartinez@gmail.com>
 // Copyright (C) 2008 Michael Vrable <mvrable@cs.ucsd.edu>
 // Copyright (C) 2008 Hugo Mercier <hmercier31@gmail.com>
 // Copyright (C) 2008 Pino Toscano <pino@kde.org>
 // Copyright (C) 2008 Tomas Are Haavet <tomasare@gmail.com>
-// Copyright (C) 2009-2011, 2013, 2016-2019 Albert Astals Cid <aacid@kde.org>
+// Copyright (C) 2009-2011, 2013, 2016-2020 Albert Astals Cid <aacid@kde.org>
 // Copyright (C) 2012, 2013 Fabio D'Urso <fabiodurso@hotmail.it>
 // Copyright (C) 2012, 2015 Tobias Koenig <tokoe@kdab.com>
 // Copyright (C) 2013 Thomas Freitag <Thomas.Freitag@alfa.de>
 // Copyright (C) 2013, 2017 Adrian Johnson <ajohnson@redneon.com>
 // Copyright (C) 2018 Klarälvdalens Datakonsult AB, a KDAB Group company, <info@kdab.com>. Work sponsored by the LiMux project of the city of Munich
 // Copyright (C) 2018 Dileep Sankhla <sankhla.dileep96@gmail.com>
 // Copyright (C) 2018, 2019 Tobias Deiminger <haxtibal@posteo.de>
 // Copyright (C) 2018, 2020 Oliver Sander <oliver.sander@tu-dresden.de>
 // Copyright (C) 2018 Adam Reichold <adam.reichold@t-online.de>
 // Copyright (C) 2019 Umang Malik <umang99m@gmail.com>
 // Copyright (C) 2019 João Netto <joaonetto901@gmail.com>
 // Copyright (C) 2020 Nelson Benítez León <nbenitezl@gmail.com>
 //
 // To see a description of the changes please see the Changelog file that
 // came with your tarball or type make ChangeLog if you are building from git
 //
 //========================================================================
 
 #ifndef ANNOT_H
 #define ANNOT_H
 
 #include <memory>
 #include <atomic>
 #include <mutex>
 #include <vector>
 
 #include "Object.h"
@@ -591,132 +591,132 @@ class Annot {
   friend class Annots;
   friend class Page;
 public:
   enum AnnotFlag {
     flagUnknown        = 0x0000,
     flagInvisible      = 0x0001,
     flagHidden         = 0x0002,
     flagPrint          = 0x0004,
     flagNoZoom         = 0x0008,
     flagNoRotate       = 0x0010,
     flagNoView         = 0x0020,
     flagReadOnly       = 0x0040,
     flagLocked         = 0x0080,
     flagToggleNoView   = 0x0100,
     flagLockedContents = 0x0200
   };
 
   enum AnnotSubtype {
     typeUnknown,        //                 0
     typeText,           // Text            1
     typeLink,           // Link            2
     typeFreeText,       // FreeText        3
     typeLine,           // Line            4
     typeSquare,         // Square          5
     typeCircle,         // Circle          6
     typePolygon,        // Polygon         7
     typePolyLine,       // PolyLine        8
     typeHighlight,      // Highlight       9
     typeUnderline,      // Underline      10
     typeSquiggly,       // Squiggly       11
     typeStrikeOut,      // StrikeOut      12
     typeStamp,          // Stamp          13
     typeCaret,          // Caret          14
     typeInk,            // Ink            15
     typePopup,          // Popup          16
     typeFileAttachment, // FileAttachment 17
     typeSound,          // Sound          18
     typeMovie,          // Movie          19
     typeWidget,         // Widget         20
     typeScreen,         // Screen         21
     typePrinterMark,    // PrinterMark    22
     typeTrapNet,        // TrapNet        23
     typeWatermark,      // Watermark      24
     type3D,             // 3D             25
     typeRichMedia       // RichMedia      26
   };
 
   /**
    * Describes the additional actions of a screen or widget annotation.
    */
   enum AdditionalActionsType {
     actionCursorEntering, ///< Performed when the cursor enters the annotation's active area
     actionCursorLeaving,  ///< Performed when the cursor exists the annotation's active area
     actionMousePressed,   ///< Performed when the mouse button is pressed inside the annotation's active area
     actionMouseReleased,  ///< Performed when the mouse button is released inside the annotation's active area
     actionFocusIn,        ///< Performed when the annotation receives the input focus
     actionFocusOut,       ///< Performed when the annotation loses the input focus
     actionPageOpening,    ///< Performed when the page containing the annotation is opened
     actionPageClosing,    ///< Performed when the page containing the annotation is closed
     actionPageVisible,    ///< Performed when the page containing the annotation becomes visible
     actionPageInvisible   ///< Performed when the page containing the annotation becomes invisible
   };
 
   enum FormAdditionalActionsType {
     actionFieldModified,   ///< Performed when the when the user modifies the field
     actionFormatField,     ///< Performed before the field is formatted to display its value
     actionValidateField,   ///< Performed when the field value changes
     actionCalculateField,  ///< Performed when the field needs to be recalculated
   };
 
   Annot(PDFDoc *docA, PDFRectangle *rectA);
   Annot(PDFDoc *docA, Object &&dictObject);
   Annot(PDFDoc *docA, Object &&dictObject, const Object *obj);
   bool isOk() { return ok; }
 
   void incRefCnt();
   void decRefCnt();
 
   virtual void draw(Gfx *gfx, bool printing);
   // Get the resource dict of the appearance stream
   virtual Object getAppearanceResDict();
 
   bool match(const Ref *refA) const
     { return ref == *refA; }
 
   double getXMin();
   double getYMin();
   double getXMax();
   double getYMax();
 
   void setRect(PDFRectangle *rect);
   void setRect(double x1, double y1, double x2, double y2);
 
   // Sets the annot contents to new_content
   // new_content should never be NULL
   virtual void setContents(GooString *new_content);
   void setName(GooString *new_name);
   void setModified(GooString *new_modified);
   void setFlags(unsigned int new_flags);
 
   void setBorder(std::unique_ptr<AnnotBorder> &&new_border);
   void setColor(std::unique_ptr<AnnotColor> &&new_color);
 
   void setAppearanceState(const char *state);
 
   // getters
   PDFDoc *getDoc() const { return doc; }
   bool getHasRef() const { return hasRef; }
   Ref getRef() const { return ref; }
-  Dict *getDict() const { return annotObj.getDict(); }
+  const Object &getAnnotObj() const { return annotObj; }
   AnnotSubtype getType() const { return type; }
   PDFRectangle *getRect() const { return rect.get(); }
   void getRect(double *x1, double *y1, double *x2, double *y2) const;
   const GooString *getContents() const { return contents.get(); }
   int getPageNum() const { return page; }
   const GooString *getName() const { return name.get(); }
   const GooString *getModified() const { return modified.get(); }
   unsigned int getFlags() const { return flags; }
   AnnotAppearance *getAppearStreams() const { return appearStreams.get(); }
   const GooString *getAppearState() const { return appearState.get(); }
   AnnotBorder *getBorder() const { return border.get(); }
   AnnotColor *getColor() const { return color.get(); }
   int getTreeKey() const { return treeKey; }
 
   int getId() { return ref.num; }
 
   // Check if point is inside the annot rectangle.
   bool inRect(double x, double y) const;
 
   static void layoutText(const GooString *text, GooString *outBuf, int *i, const GfxFont *font,
 		  double *width, double widthLimit, int *charCount,
 		  bool noReencode);
diff --git a/poppler/Page.cc b/poppler/Page.cc
index babc63d1..5140174a 100644
--- a/poppler/Page.cc
+++ b/poppler/Page.cc
@@ -1,65 +1,65 @@
 //========================================================================
 //
 // Page.cc
 //
 // Copyright 1996-2007 Glyph & Cog, LLC
 //
 //========================================================================
 
 //========================================================================
 //
 // Modified under the Poppler project - http://poppler.freedesktop.org
 //
 // All changes made under the Poppler project to this file are licensed
 // under GPL version 2 or later
 //
 // Copyright (C) 2005 Kristian Høgsberg <krh@redhat.com>
 // Copyright (C) 2005 Jeff Muizelaar <jeff@infidigm.net>
-// Copyright (C) 2005-2013, 2016-2019 Albert Astals Cid <aacid@kde.org>
+// Copyright (C) 2005-2013, 2016-2020 Albert Astals Cid <aacid@kde.org>
 // Copyright (C) 2006-2008 Pino Toscano <pino@kde.org>
 // Copyright (C) 2006 Nickolay V. Shmyrev <nshmyrev@yandex.ru>
 // Copyright (C) 2006 Scott Turner <scotty1024@mac.com>
 // Copyright (C) 2006-2011, 2015 Carlos Garcia Campos <carlosgc@gnome.org>
 // Copyright (C) 2007 Julien Rebetez <julienr@svn.gnome.org>
 // Copyright (C) 2008 Iñigo Martínez <inigomartinez@gmail.com>
 // Copyright (C) 2008 Brad Hards <bradh@kde.org>
 // Copyright (C) 2008 Ilya Gorenbein <igorenbein@finjan.com>
 // Copyright (C) 2012, 2013 Fabio D'Urso <fabiodurso@hotmail.it>
 // Copyright (C) 2013, 2014 Thomas Freitag <Thomas.Freitag@alfa.de>
 // Copyright (C) 2013 Jason Crain <jason@aquaticape.us>
 // Copyright (C) 2013, 2017 Adrian Johnson <ajohnson@redneon.com>
 // Copyright (C) 2015 Philipp Reinkemeier <philipp.reinkemeier@offis.de>
 // Copyright (C) 2018, 2019 Adam Reichold <adam.reichold@t-online.de>
 // Copyright (C) 2020 Oliver Sander <oliver.sander@tu-dresden.de>
 // Copyright (C) 2020 Nelson Benítez León <nbenitezl@gmail.com>
 //
 // To see a description of the changes please see the Changelog file that
 // came with your tarball or type make ChangeLog if you are building from git
 //
 //========================================================================
 
 #include <config.h>
 
 #include <cstddef>
 #include <climits>
 #include "GlobalParams.h"
 #include "Object.h"
 #include "Array.h"
 #include "Dict.h"
 #include "PDFDoc.h"
 #include "XRef.h"
 #include "Link.h"
 #include "OutputDev.h"
 #include "Gfx.h"
 #include "GfxState.h"
 #include "Annot.h"
 #include "TextOutputDev.h"
 #include "Form.h"
 #include "Error.h"
 #include "Page.h"
 #include "Catalog.h"
 #include "Form.h"
 
 //------------------------------------------------------------------------
 // PDFRectangle
 //------------------------------------------------------------------------
@@ -362,37 +362,37 @@ void Page::replaceXRef(XRef *xrefA) {
 /* Loads standalone fields into Page, should be called once per page only */
 void Page::loadStandaloneFields(Annots *annotations, Form *form) {
   const int numAnnots = annotations ? annotations->getNumAnnots() : 0;
   if (numAnnots < 1)
     return;
 
   /* Look for standalone annots, identified by being: 1) of type Widget
    * 2) of subtype Button 3) not referenced from the Catalog's Form Field array */
   for (int i = 0; i < numAnnots; ++i) {
     Annot *annot = annotations->getAnnot(i);
 
     if (annot->getType() != Annot::typeWidget || !annot->getHasRef())
       continue;
 
     const Ref r = annot->getRef();
     if (form && form->findWidgetByRef(r))
       continue; // this annot is referenced inside Form, skip it
 
     std::set<int> parents;
-    FormField *field = Form::createFieldFromDict (Object(annot->getDict()),
+    FormField *field = Form::createFieldFromDict (annot->getAnnotObj().copy(),
                                                   annot->getDoc(), r, nullptr, &parents);
 
     if (field && field->getType() == formButton && field->getNumWidgets() == 1) {
 
       field->setStandAlone(true);
       FormWidget *formWidget = field->getWidget(0);
 
       if (!formWidget->getWidgetAnnotation())
         formWidget->createWidgetAnnotation();
 
       standaloneFields.push_back(field);
 
     } else if (field) {
       delete field;
     }
   }
 }
