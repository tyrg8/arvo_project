commit f7b8f522ff4084d584628811a02a621736c3a731
Merge: f6aa9ac304 6c575e8826
Author: Alexander Alekhin <alexander.a.alekhin@gmail.com>
Date:   Mon Sep 21 20:33:30 2020 +0000

    Merge pull request #18374 from alalek:openjpeg_extra_checks

diff --git a/modules/imgcodecs/src/grfmt_jpeg2000_openjpeg.cpp b/modules/imgcodecs/src/grfmt_jpeg2000_openjpeg.cpp
index 8a9096b8d5..149b34c927 100644
--- a/modules/imgcodecs/src/grfmt_jpeg2000_openjpeg.cpp
+++ b/modules/imgcodecs/src/grfmt_jpeg2000_openjpeg.cpp
@@ -590,52 +590,69 @@ bool Jpeg2KOpjDecoder::readHeader()
 bool Jpeg2KOpjDecoder::readData( Mat& img )
 {
     using DecodeFunc = bool(*)(const opj_image_t&, cv::Mat&, uint8_t shift);
 
     if (!opj_decode(codec_.get(), stream_.get(), image_.get()))
     {
         CV_Error(Error::StsError, "OpenJPEG2000: Decoding is failed");
     }
 
     if (img.channels() == 2)
     {
         CV_Error(Error::StsNotImplemented,
                  cv::format("OpenJPEG2000: Unsupported number of output channels. IN: %d OUT: 2", image_->numcomps));
     }
 
     DecodeFunc decode = nullptr;
     switch (image_->color_space)
     {
     case OPJ_CLRSPC_UNKNOWN:
         CV_LOG_WARNING(NULL, "OpenJPEG2000: Image has unknown color space, SRGB is assumed");
         /* FALLTHRU */
     case OPJ_CLRSPC_SRGB:
         decode = decodeSRGBData;
         break;
     case OPJ_CLRSPC_GRAY:
         decode = decodeGrayscaleData;
         break;
     case OPJ_CLRSPC_SYCC:
         decode = decodeSYCCData;
         break;
     case OPJ_CLRSPC_UNSPECIFIED:
         CV_Error(Error::StsNotImplemented, "OpenJPEG2000: Image has unspecified color space");
     default:
         CV_Error(Error::StsNotImplemented,
                  cv::format("OpenJPEG2000: Unsupported color space conversion: %s -> %s",
                             colorspaceName(image_->color_space).c_str(),
                             (img.channels() == 1) ? "gray" : "BGR"));
     }
 
     const int depth = img.depth();
     const OPJ_UINT32 outPrec = [depth]() {
         if (depth == CV_8U) return 8;
         if (depth == CV_16U) return 16;
         CV_Error(Error::StsNotImplemented,
                  cv::format("OpenJPEG2000: output precision > 16 not supported: target depth %d", depth));
     }();
     const uint8_t shift = outPrec > m_maxPrec ? 0 : (uint8_t)(m_maxPrec - outPrec); // prec <= 64
+
+    const int inChannels = image_->numcomps;
+
+    CV_Assert(inChannels > 0);
+    CV_Assert(image_->comps);
+    for (int c = 0; c < inChannels; c++)
+    {
+        const opj_image_comp_t& comp = image_->comps[c];
+        CV_CheckEQ((int)comp.dx, 1, "OpenJPEG2000: tiles are not supported");
+        CV_CheckEQ((int)comp.dy, 1, "OpenJPEG2000: tiles are not supported");
+        CV_CheckEQ((int)comp.x0, 0, "OpenJPEG2000: tiles are not supported");
+        CV_CheckEQ((int)comp.y0, 0, "OpenJPEG2000: tiles are not supported");
+        CV_CheckEQ((int)comp.w, img.cols, "OpenJPEG2000: tiles are not supported");
+        CV_CheckEQ((int)comp.h, img.rows, "OpenJPEG2000: tiles are not supported");
+        CV_Assert(comp.data && "OpenJPEG2000: missing component data (unsupported / broken input)");
+    }
+
     return decode(*image_, img, shift);
 }
 
 
 /////////////////////// Jpeg2KOpjEncoder ///////////////////
