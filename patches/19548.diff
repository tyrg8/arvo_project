commit 333c41c5d51450177553b8fd8cb2d710a7f7dec5
Author: Frank Morgner <frankmorgner@gmail.com>
Date:   Wed Dec 18 14:55:46 2019 +0100

    pgp: don't write beyond oid object
    
    fixes Stack-buffer-overflow
    https://oss-fuzz.com/testcase-detail/6329203163398144

diff --git a/src/libopensc/card-openpgp.c b/src/libopensc/card-openpgp.c
index b8cdd452..27128cf7 100644
--- a/src/libopensc/card-openpgp.c
+++ b/src/libopensc/card-openpgp.c
@@ -692,56 +692,56 @@ static int
 pgp_parse_algo_attr_blob(const pgp_blob_t *blob, sc_cardctl_openpgp_keygen_info_t *key_info)
 {
 	struct sc_object_id oid;
 	unsigned int j;
 
 	if (blob == NULL || blob->data == NULL || blob->len == 0 ||
 	    blob->id < 0x00c1 || blob->id > 0x00c3 || key_info == NULL)
 		return SC_ERROR_INCORRECT_PARAMETERS;
 
 	key_info->key_id = blob->id - 0x00c0;	/* attribute algorithm blobs are C1 - C3 */
 
 	switch (blob->data[0]) {
 		case SC_OPENPGP_KEYALGO_RSA:
 			if (blob->len < 5)
 				return SC_ERROR_INCORRECT_PARAMETERS;
 
 			key_info->algorithm = SC_OPENPGP_KEYALGO_RSA;
 			key_info->u.rsa.modulus_len = bebytes2ushort(blob->data + 1);
 			key_info->u.rsa.exponent_len = bebytes2ushort(blob->data + 3);
 
 			key_info->u.rsa.keyformat = (blob->len > 5)
 						  ? blob->data[5]
 						  : SC_OPENPGP_KEYFORMAT_RSA_STD;
 			break;
 		case SC_OPENPGP_KEYALGO_ECDH:
 		case SC_OPENPGP_KEYALGO_ECDSA:
 
 			/* SC_OPENPGP_KEYALGO_ECDH || SC_OPENPGP_KEYALGO_ECDSA */
 			key_info->algorithm = blob->data[0];
 
 			sc_init_oid(&oid);
 			/* Create copy of oid from blob */
-			for (j=0; j < (blob->len-1); j++) {
+			for (j=0; j < (blob->len-1) && j < SC_MAX_OBJECT_ID_OCTETS; j++) {
 				oid.value[j] = blob->data[j+1]; /* ignore first byte of blob (algo ID) */
 			}
 
 			/* compare with list of supported ec_curves */
 			for (j=0; ec_curves[j].oid.value[0] >= 0; j++){
 				if (sc_compare_oid(&ec_curves[j].oid_binary, &oid)){
 					key_info->u.ec.oid = ec_curves[j].oid;
 					key_info->u.ec.key_length = ec_curves[j].size;
 					break;
 				}
 			}
 			break;
 		default:
 			return SC_ERROR_NOT_IMPLEMENTED;
 	}
 
 	return SC_SUCCESS;
 }
 
 
 /**
  * Internal: get features of the card: capabilities, ...
  */
