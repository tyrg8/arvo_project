commit d24332f4f33029ddb5a5d9ab3f07461f60905390
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Mon Mar 19 20:41:20 2018 +0300

    Cr2Decompressor::decodeN_X_Y(): use c-p-p when checking slice widths

diff --git a/src/librawspeed/decompressors/Cr2Decompressor.cpp b/src/librawspeed/decompressors/Cr2Decompressor.cpp
index 91a20a96..54cfed9f 100644
--- a/src/librawspeed/decompressors/Cr2Decompressor.cpp
+++ b/src/librawspeed/decompressors/Cr2Decompressor.cpp
@@ -134,110 +134,110 @@ template <int N_COMP, int X_S_F, int Y_S_F>
 void Cr2Decompressor::decodeN_X_Y()
 {
   // To understand the CR2 slice handling and sampling factor behavior, see
   // https://github.com/lclevy/libcraw2/blob/master/docs/cr2_lossless.pdf?raw=true
 
   // inner loop decodes one group of pixels at a time
   //  * for <N,1,1>: N  = N*1*1 (full raw)
   //  * for <3,2,1>: 6  = 3*2*1
   //  * for <3,2,2>: 12 = 3*2*2
   // and advances x by N_COMP*X_S_F and y by Y_S_F
   constexpr int xStepSize = N_COMP * X_S_F;
   constexpr int yStepSize = Y_S_F;
 
   auto ht = getHuffmanTables<N_COMP>();
   auto pred = getInitialPredictors<N_COMP>();
   auto predNext = reinterpret_cast<ushort16*>(mRaw->getDataUncropped(0, 0));
 
   BitPumpJPEG bitStream(input);
 
   uint32 pixelPitch = mRaw->pitch / 2; // Pitch in pixel
   if (frame.cps != 3 && frame.w * frame.cps > 2 * frame.h) {
     // Fix Canon double height issue where Canon doubled the width and halfed
     // the height (e.g. with 5Ds), ask Canon. frame.w needs to stay as is here
     // because the number of pixels after which the predictor gets updated is
     // still the doubled width.
     // see: FIX_CANON_HALF_HEIGHT_DOUBLE_WIDTH
     frame.h *= 2;
   }
 
   if (X_S_F == 2 && Y_S_F == 1)
   {
     // fix the inconsistent slice width in sRaw mode, ask Canon.
     for (auto& sliceWidth : slicesWidths)
       sliceWidth = sliceWidth * 3 / 2;
   }
 
   for (const auto& slicesWidth : slicesWidths) {
     if (slicesWidth > mRaw->dim.x)
       ThrowRDE("Slice is longer than image's height, which is unsupported.");
     if (slicesWidth % xStepSize != 0) {
       ThrowRDE("Slice width (%u) should be multiple of pixel group size (%u)",
                slicesWidth, xStepSize);
     }
   }
 
   if (frame.h * std::accumulate(slicesWidths.begin(), slicesWidths.end(), 0) <
-      mRaw->dim.area())
+      mRaw->getCpp() * mRaw->dim.area())
     ThrowRDE("Incorrrect slice height / slice widths! Less than image size.");
 
   unsigned processedPixels = 0;
   unsigned processedLineSlices = 0;
   for (unsigned sliceWidth : slicesWidths) {
     assert(frame.h % yStepSize == 0);
     for (unsigned y = 0; y < frame.h; y += yStepSize) {
       // Fix for Canon 80D mraw format.
       // In that format, `frame` is 4032x3402, while `mRaw` is 4536x3024.
       // Consequently, the slices in `frame` wrap around plus there are few
       // 'extra' sliced lines because sum(slicesW) * sliceH > mRaw->dim.area()
       // Those would overflow, hence the break.
       // see FIX_CANON_FRAME_VS_IMAGE_SIZE_MISMATCH
       unsigned destY = processedLineSlices % mRaw->dim.y;
       unsigned destX =
           processedLineSlices / mRaw->dim.y * slicesWidths[0] / mRaw->getCpp();
       if (destX >= static_cast<unsigned>(mRaw->dim.x))
         break;
       auto dest =
           reinterpret_cast<ushort16*>(mRaw->getDataUncropped(destX, destY));
 
       assert(sliceWidth % xStepSize == 0);
       if (X_S_F == 1) {
         if (destX + sliceWidth > static_cast<unsigned>(mRaw->dim.x))
           ThrowRDE("Bad slice width / frame size / image size combination.");
       } else {
         // FIXME.
       }
       for (unsigned x = 0; x < sliceWidth; x += xStepSize) {
         // check if we processed one full raw row worth of pixels
         if (processedPixels == frame.w) {
           // if yes -> update predictor by going back exactly one row,
           // no matter where we are right now.
           // makes no sense from an image compression point of view, ask Canon.
           copy_n(predNext, N_COMP, pred.data());
           predNext = dest;
           processedPixels = 0;
         }
 
         if (X_S_F == 1) { // will be optimized out
           unroll_loop<N_COMP>([&](int i) {
             dest[i] = pred[i] += ht[i]->decodeNext(bitStream);
           });
         } else {
           unroll_loop<Y_S_F>([&](int i) {
             dest[0 + i*pixelPitch] = pred[0] += ht[0]->decodeNext(bitStream);
             dest[3 + i*pixelPitch] = pred[0] += ht[0]->decodeNext(bitStream);
           });
 
           dest[1] = pred[1] += ht[1]->decodeNext(bitStream);
           dest[2] = pred[2] += ht[2]->decodeNext(bitStream);
         }
 
         dest += xStepSize;
         processedPixels += X_S_F;
       }
 
       processedLineSlices += yStepSize;
     }
   }
 }
 
 } // namespace rawspeed
