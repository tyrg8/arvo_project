commit 03c519ff5831ba75120e00ebebbf1d5a1f7220ab
Author: Michael Hanselmann <public@hansmi.ch>
Date:   Sun Aug 8 15:35:58 2021 +0200

    Avoid use-after-free in serialization
    
    Serializing parsers with large amounts of buffered write data (e.g. in case of
    a slow or blocked write destination) would cause "serialize_data" to reallocate
    the state buffer whose default size is 64kB (USBREDIRPARSER_SERIALIZE_BUF_SIZE).
    The pointer to the position for the write buffer count would then point to
    a location outside the buffer where the number of write buffers would be written
    as a 32-bit value.
    
    As of QEMU 5.2.0 the serializer is invoked for migrations. Serializations for
    migrations may happen regularily such as when using the COLO feature[1].
    Serialization happens under QEMU's I/O lock. The guest can't control the state
    while the serialization is happening. The value written is the number of
    outstanding buffers which would be suceptible to timing and host system system
    load. The guest would have to continously groom the write buffers. A useful
    value needs to be allocated in the exact position freed during the buffer size
    increase, but before the buffer count is written. The author doesn't consider it
    realistic to exploit this use-after-free reliably.
    
    [1] https://wiki.qemu.org/Features/COLO
    
    Signed-off-by: Michael Hanselmann <public@hansmi.ch>

diff --git a/usbredirparser/usbredirparser.c b/usbredirparser/usbredirparser.c
index 774e2b7..784f2e1 100644
--- a/usbredirparser/usbredirparser.c
+++ b/usbredirparser/usbredirparser.c
@@ -1,51 +1,52 @@
 /* usbredirparser.c usb redirection protocol parser
 
    Copyright 2010-2012 Red Hat, Inc.
 
    Red Hat Authors:
    Hans de Goede <hdegoede@redhat.com>
 
    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.
 
    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.
 
    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */
 #include "config.h"
 
 #include <stdbool.h>
+#include <stddef.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <stdarg.h>
 #include <string.h>
 #include "usbredirproto-compat.h"
 #include "usbredirparser.h"
 #include "usbredirfilter.h"
 
 /* Put *some* upper limit on bulk transfer sizes */
 #define MAX_BULK_TRANSFER_SIZE (128u * 1024u * 1024u)
 
 /* Upper limit for accepted packet sizes including headers; makes the assumption
  * that no header is longer than 1kB
  */
 #define MAX_PACKET_SIZE (1024u + MAX_BULK_TRANSFER_SIZE)
 
 /* Locking convenience macros */
 #define LOCK(parser) \
     do { \
         if ((parser)->lock) \
             (parser)->callb.lock_func((parser)->lock); \
     } while (0)
 
 #define UNLOCK(parser) \
     do { \
         if ((parser)->lock) \
             (parser)->callb.unlock_func((parser)->lock); \
     } while (0)
@@ -1653,78 +1654,79 @@ USBREDIR_VISIBLE
 int usbredirparser_serialize(struct usbredirparser *parser_pub,
                              uint8_t **state_dest, int *state_len)
 {
     struct usbredirparser_priv *parser =
         (struct usbredirparser_priv *)parser_pub;
     struct usbredirparser_buf *wbuf;
-    uint8_t *write_buf_count_pos, *state = NULL, *pos = NULL;
+    uint8_t *state = NULL, *pos = NULL;
     uint32_t write_buf_count = 0, len, remain = 0;
+    ptrdiff_t write_buf_count_pos;
 
     *state_dest = NULL;
     *state_len = 0;
 
     if (serialize_int(parser, &state, &pos, &remain,
                                    USBREDIRPARSER_SERIALIZE_MAGIC, "magic"))
         return -1;
 
     /* To be replaced with length later */
     if (serialize_int(parser, &state, &pos, &remain, 0, "length"))
         return -1;
 
     if (serialize_data(parser, &state, &pos, &remain,
                        (uint8_t *)parser->our_caps,
                        USB_REDIR_CAPS_SIZE * sizeof(int32_t), "our_caps"))
         return -1;
 
     if (parser->have_peer_caps) {
         if (serialize_data(parser, &state, &pos, &remain,
                            (uint8_t *)parser->peer_caps,
                            USB_REDIR_CAPS_SIZE * sizeof(int32_t), "peer_caps"))
             return -1;
     } else {
         if (serialize_int(parser, &state, &pos, &remain, 0, "peer_caps_len"))
             return -1;
     }
 
     if (serialize_int(parser, &state, &pos, &remain, parser->to_skip, "skip"))
         return -1;
 
     if (serialize_data(parser, &state, &pos, &remain,
                        (uint8_t *)&parser->header, parser->header_read,
                        "header"))
         return -1;
 
     if (serialize_data(parser, &state, &pos, &remain,
                        parser->type_header, parser->type_header_read,
                        "type_header"))
         return -1;
 
     if (serialize_data(parser, &state, &pos, &remain,
                        parser->data, parser->data_read, "packet-data"))
         return -1;
 
-    write_buf_count_pos = pos;
+    write_buf_count_pos = pos - state;
     /* To be replaced with write_buf_count later */
     if (serialize_int(parser, &state, &pos, &remain, 0, "write_buf_count"))
         return -1;
 
     wbuf = parser->write_buf;
     while (wbuf) {
         if (serialize_data(parser, &state, &pos, &remain,
                            wbuf->buf + wbuf->pos, wbuf->len - wbuf->pos,
                            "write-buf"))
             return -1;
         write_buf_count++;
         wbuf = wbuf->next;
     }
     /* Patch in write_buf_count */
-    memcpy(write_buf_count_pos, &write_buf_count, sizeof(int32_t));
+    memcpy(state + write_buf_count_pos, &write_buf_count, sizeof(int32_t));
 
     /* Patch in length */
     len = pos - state;
     memcpy(state + sizeof(int32_t), &len, sizeof(int32_t));
 
     *state_dest = state;
     *state_len = len;
 
     return 0;
 }
