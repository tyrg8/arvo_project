commit 62a8ea711329477ec0e22f17df77a37ceaff9322
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Wed Mar 15 19:09:02 2023 +0900

    mruby-bigint/bigint.c: mrb_bint_add_d, mrb_bint_sub_d only take int
    
    Where mrb_bint_add and mrb_bint_sub may take float numbers.

diff --git a/mrbgems/mruby-bigint/core/bigint.c b/mrbgems/mruby-bigint/core/bigint.c
index 3af5b2da9..7e01d16a4 100644
--- a/mrbgems/mruby-bigint/core/bigint.c
+++ b/mrbgems/mruby-bigint/core/bigint.c
@@ -1183,17 +1183,10 @@ mrb_bint_as_uint64(mrb_state *mrb, mrb_value x)
 mrb_value
 mrb_bint_add_d(mrb_state *mrb, mrb_value x, mrb_value y)
 {
-#ifndef MRB_NO_FLOAT
-  if (mrb_float_p(y)) {
-    mrb_float v1 = mrb_bint_as_float(mrb, x);
-    mrb_float v2 = mrb_float(y);
-    return mrb_float_value(mrb,v1+v2);
-  }
-#endif
   y = mrb_as_bint(mrb, y);
   struct RBigint *b = RBIGINT(x);
   struct RBigint *b2 = RBIGINT(y);
   struct RBigint *b3 = bint_new(mrb);
   mpz_add(mrb, &b3->mp, &b->mp, &b2->mp);
   return mrb_obj_value(b3);
 }
@@ -1201,25 +1194,25 @@ mrb_bint_add_d(mrb_state *mrb, mrb_value x, mrb_value y)
 mrb_value
 mrb_bint_add(mrb_state *mrb, mrb_value x, mrb_value y)
 {
+#ifndef MRB_NO_FLOAT
+  if (mrb_float_p(y)) {
+    mrb_float v1 = mrb_bint_as_float(mrb, x);
+    mrb_float v2 = mrb_float(y);
+    return mrb_float_value(mrb,v1+v2);
+  }
+#endif
   x = mrb_bint_add_d(mrb, x, y);
   return bint_norm(mrb, RBIGINT(x));
 }
 
 /* unnormalize version of mrb_bint_sub */
 mrb_value
 mrb_bint_sub_d(mrb_state *mrb, mrb_value x, mrb_value y)
 {
-#ifndef MRB_NO_FLOAT
-  if (mrb_float_p(y)) {
-    mrb_float v1 = mrb_bint_as_float(mrb, x);
-    mrb_float v2 = mrb_float(y);
-    return mrb_float_value(mrb,v1-v2);
-  }
-#endif
   y = mrb_as_bint(mrb, y);
   struct RBigint *b = RBIGINT(x);
   struct RBigint *b2 = RBIGINT(y);
   struct RBigint *b3 = bint_new(mrb);
   mpz_sub(mrb, &b3->mp, &b->mp, &b2->mp);
   return mrb_obj_value(b3);
 }
@@ -1227,6 +1220,13 @@ mrb_bint_sub_d(mrb_state *mrb, mrb_value x, mrb_value y)
 mrb_value
 mrb_bint_sub(mrb_state *mrb, mrb_value x, mrb_value y)
 {
+#ifndef MRB_NO_FLOAT
+  if (mrb_float_p(y)) {
+    mrb_float v1 = mrb_bint_as_float(mrb, x);
+    mrb_float v2 = mrb_float(y);
+    return mrb_float_value(mrb,v1-v2);
+  }
+#endif
   x = mrb_bint_sub_d(mrb, x, y);
   return bint_norm(mrb, RBIGINT(x));
 }
