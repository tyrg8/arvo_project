commit 00eb62012dbcf7154e5abc4704051e9c604680e9
Author: Aurelien David <aurelien.david@telecom-paristech.fr>
Date:   Wed Feb 7 14:59:02 2024 +0100

    prevent stack overflow in RTSP_UnpackURL
    
    ossfuzz issue 66415

diff --git a/src/ietf/rtsp_session.c b/src/ietf/rtsp_session.c
index 6e4f432af..83f61da71 100644
--- a/src/ietf/rtsp_session.c
+++ b/src/ietf/rtsp_session.c
@@ -83,87 +83,87 @@ GF_Err RTSP_UnpackURL(char *sURL, char Server[1024], u16 *Port, char Service[102
 found:
 	schema[i] = 0;
 	if (stricmp(schema, "rtsp") && stricmp(schema, "rtspu") && stricmp(schema, "rtsph")  && stricmp(schema, "rtsps") && stricmp(schema, "satip")) return GF_URL_ERROR;
 	//check for user/pass - not allowed
 	/*
 		test = strstr(sURL, "@");
 		if (test) return GF_NOT_SUPPORTED;
 	*/
 	test = strstr(sURL, "://");
 	if (!test) {
 		if (sep) sep[0] = '?';
 		return GF_URL_ERROR;
 	}
 	test += 3;
 	//check for service
 	retest = strstr(test, "/");
 	if (!retest) {
 		if (sep) sep[0] = '?';
 		return GF_URL_ERROR;
 	}
 	if (!stricmp(schema, "rtsp") || !stricmp(schema, "satip") || !stricmp(schema, "rtsph") || !stricmp(schema, "rtsps"))
 		*useTCP = GF_TRUE;
 
 	service_start = retest;
 	//check for port
 	char *port = strrchr(test, ':');
 	retest = (port<retest) ? port : NULL;
 	/*IPV6 address*/
 	if (retest && strchr(retest, ']')) retest = NULL;
 
 	if (retest && strstr(retest, "/")) {
 		retest += 1;
 		i=0;
-		while (i<strlen(retest)) {
+		while (i<strlen(retest) && i<1023) {
 			if (retest[i] == '/') break;
 			text[i] = retest[i];
 			i += 1;
 		}
 		text[i] = 0;
 		*Port = atoi(text);
 	}
 
 	char *sep_auth = strchr(test, '@');
 	if (sep_auth>service_start) sep_auth=NULL;
 	if (sep_auth) {
 		sep_auth[0] = 0;
 		char *psep = strchr(test, ':');
 		if (psep) psep[0] = 0;
 		strncpy(User, test, 1023);
 		User[1023]=0;
 		if (psep) {
 			strncpy(Pass, psep+1, 1023);
 			Pass[1023]=0;
 			if (psep) psep[0] = ':';
 		}
 
 		sep_auth[0] = '@';
 		test = sep_auth+1;
 	}
 
 	//get the server name
 	is_ipv6 = GF_FALSE;
 	len = (u32) strlen(test);
 	i=0;
 	while (i<len) {
 		if (test[i]=='[') is_ipv6 = GF_TRUE;
 		else if (test[i]==']') is_ipv6 = GF_FALSE;
 		if ( (test[i] == '/') || (!is_ipv6 && (test[i] == ':')) ) break;
 		text[i] = test[i];
 		i += 1;
 	}
 	text[i] = 0;
-	strncpy(Server, text, 1023);
+	strncpy(Server, text, 1024);
 	Server[1023]=0;
 	if (sep) sep[0] = '?';
 
 	if (service_start) {
 		strncpy(Service, service_start+1, 1023);
 		Service[1023]=0;
 	} else {
 		Service[0]=0;
 	}
 	return GF_OK;
 }
 
 
 //create a new GF_RTSPSession from URL - DO NOT USE WITH SDP
@@ -912,73 +912,73 @@ GF_EXPORT
 GF_RTSPSession *gf_rtsp_session_new_server(GF_Socket *rtsp_listener, Bool allow_http_tunnel, void *ssl_ctx)
 {
 	GF_RTSPSession *sess;
 	GF_Socket *new_conn;
 	GF_Err e;
 	u32 fam;
 	u16 port;
 #ifdef GPAC_HAS_SSL
 	SSL *ssl = NULL;
 #endif
 
 	if (!rtsp_listener) return NULL;
 
 
 	e = gf_sk_accept(rtsp_listener, &new_conn);
 	if (!new_conn || e) return NULL;
 
 #ifdef GPAC_HAS_SSL
 	if (ssl_ctx) {
 		ssl = gf_ssl_new(ssl_ctx, new_conn, &e);
 		if (e) {
 			GF_LOG(GF_LOG_ERROR, GF_LOG_RTP, ("[SSL] Failed to create TLS session: %s\n", gf_error_to_string(e) ));
 			gf_sk_del(new_conn);
 			return NULL;
 		}
 		SSL_set_mode(ssl, SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER|SSL_MODE_ENABLE_PARTIAL_WRITE);
 	}
 #endif
 
 	e = gf_sk_get_local_info(new_conn, &port, &fam);
 	if (e) {
 		gf_sk_del(new_conn);
 		return NULL;
 	}
 	e = gf_sk_set_block_mode(new_conn, GF_TRUE);
 	if (e) {
 		gf_sk_del(new_conn);
 		return NULL;
 	}
 	e = gf_sk_server_mode(new_conn, GF_TRUE);
 	if (e) {
 		gf_sk_del(new_conn);
 		return NULL;
 	}
 
 	//OK create a new session
 	GF_SAFEALLOC(sess, GF_RTSPSession);
 	if (!sess) return NULL;
-	
+
 	sess->connection = new_conn;
 	sess->Port = port;
 	sess->ConnectionType = fam;
 #ifdef GPAC_HAS_SSL
 	sess->ssl_ctx = ssl_ctx;
 	sess->ssl = ssl;
 #endif
 	const char *name = gf_opts_get_key("core", "user-agent");
 	if (name) {
 		sess->Server = gf_strdup(name);
 	} else {
 		sess->Server = gf_strdup("GPAC-");
 		gf_dynstrcat(&sess->Server, gf_gpac_version(), NULL);
 	}
 	gf_rtsp_set_buffer_size(sess, 4096);
 	sess->TCPChannels = gf_list_new();
 	if (!allow_http_tunnel)
 		sess->tunnel_mode = RTSP_HTTP_DISABLE;
 
 	return sess;
 }
 
 
 #if 0 //unused
