commit 8a6483f13a18b3841af4fa00732735c2f414205b
Merge: 4edb7e26b dea123f88
Author: David Garske <david@wolfssl.com>
Date:   Fri Feb 17 12:08:11 2023 -0800

    Merge pull request #6080 from tim-weller-wolfssl/zd15632-oob-in-cert-parsing
    
    zd15632 - OSS-Fuzz #55810: Out-of-bounds read in certificate parsing

diff --git a/tests/api.c b/tests/api.c
index 8a67c22a5..e863f4ddb 100644
--- a/tests/api.c
+++ b/tests/api.c
@@ -25602,83 +25602,81 @@ static int test_wc_ecc_export_private_only(void)
 /*
  * Testing wc_ecc_rs_to_sig()
  */
 static int test_wc_ecc_rs_to_sig(void)
 {
     int res = TEST_SKIPPED;
 #if defined(HAVE_ECC) && !defined(NO_ASN)
     /* first [P-192,SHA-1] vector from FIPS 186-3 NIST vectors */
     const char*   R = "6994d962bdd0d793ffddf855ec5bf2f91a9698b46258a63e";
     const char*   S = "02ba6465a234903744ab02bc8521405b73cf5fc00e1a9f41";
     const char*   zeroStr = "0";
     byte          sig[ECC_MAX_SIG_SIZE];
     word32        siglen = (word32)sizeof(sig);
     /*R and S max size is the order of curve. 2^192.*/
     int           keySz = KEY24;
     byte          r[KEY24];
     byte          s[KEY24];
     word32        rlen = (word32)sizeof(r);
     word32        slen = (word32)sizeof(s);
     int           ret;
 
     /* Init stack variables. */
     XMEMSET(sig, 0, ECC_MAX_SIG_SIZE);
     XMEMSET(r, 0, keySz);
     XMEMSET(s, 0, keySz);
 
     ret = wc_ecc_rs_to_sig(R, S, sig, &siglen);
+    if (ret == 0) {
+        ret = wc_ecc_sig_to_rs(sig, siglen, r, &rlen, s, &slen);
+    #if !defined(HAVE_SELFTEST) && !defined(HAVE_FIPS) || \
+        (defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION > 2))
+        if (ret == ASN_PARSE_E) {
+            ret = 0;
+        }
+    #endif
+    }
     /* Test bad args. */
     if (ret == 0) {
         ret = wc_ecc_rs_to_sig(NULL, S, sig, &siglen);
         if (ret == ECC_BAD_ARG_E) {
             ret = wc_ecc_rs_to_sig(R, NULL, sig, &siglen);
         }
         if (ret == ECC_BAD_ARG_E) {
             ret = wc_ecc_rs_to_sig(R, S, sig, NULL);
         }
         if (ret == ECC_BAD_ARG_E) {
             ret = wc_ecc_rs_to_sig(R, S, NULL, &siglen);
         }
         if (ret == ECC_BAD_ARG_E) {
             ret = wc_ecc_rs_to_sig(R, zeroStr, sig, &siglen);
         }
         if (ret == MP_ZERO_E) {
             ret = wc_ecc_rs_to_sig(zeroStr, S, sig, &siglen);
         }
         if (ret == MP_ZERO_E) {
-            ret = 0;
+            ret = wc_ecc_sig_to_rs(NULL, siglen, r, &rlen, s, &slen);
         }
-        else {
-            ret = WOLFSSL_FATAL_ERROR;
-        }
-    }
-
-    if (ret == 0) {
-        ret = wc_ecc_sig_to_rs(sig, siglen, r, &rlen, s, &slen);
-    }
-    /* Test bad args. */
-    if (ret == 0) {
-        ret = wc_ecc_sig_to_rs(NULL, siglen, r, &rlen, s, &slen);
         if (ret == ECC_BAD_ARG_E) {
             ret = wc_ecc_sig_to_rs(sig, siglen, NULL, &rlen, s, &slen);
         }
         if (ret == ECC_BAD_ARG_E) {
             ret = wc_ecc_sig_to_rs(sig, siglen, r, NULL, s, &slen);
         }
         if (ret == ECC_BAD_ARG_E) {
             ret = wc_ecc_sig_to_rs(sig, siglen, r, &rlen, NULL, &slen);
         }
         if (ret == ECC_BAD_ARG_E) {
             ret = wc_ecc_sig_to_rs(sig, siglen, r, &rlen, s, NULL);
         }
         if (ret == ECC_BAD_ARG_E) {
             ret = 0;
         }
         else if (ret == 0) {
             ret = WOLFSSL_FATAL_ERROR;
         }
     }
 
     res = TEST_RES_CHECK(ret == 0);
 #endif
     return res;
 } /* END test_wc_ecc_rs_to_sig */
@@ -48286,6 +48284,51 @@ static int test_wc_ParseCert(void)
     return res;
 }
 
+/* Test wc_ParseCert decoding of various encodings and scenarios ensuring that
+ * the API safely errors out on badly-formed ASN input.
+ * NOTE: Test not compatible with released FIPS implementations!
+ */
+static int test_wc_ParseCert_Error(void)
+{
+    int res = TEST_SKIPPED;
+#if !defined(NO_CERTS) && !defined(NO_RSA) && !defined(HAVE_SELFTEST) && \
+    (!defined(HAVE_FIPS) || \
+    (defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION > 2)))
+    DecodedCert decodedCert;
+
+    /* Certificate data */
+    const byte c0[] = { 0x30, 0x04, 0x30, 0x02, 0x02, 0x80, 0x00, 0x00};
+    const byte c1[] = { 0x30, 0x04, 0x30, 0x04, 0x02, 0x80, 0x00, 0x00};
+    const byte c2[] = { 0x30, 0x06, 0x30, 0x04, 0x02, 0x80, 0x00, 0x00};
+    const byte c3[] = { 0x30, 0x07, 0x30, 0x05, 0x02, 0x80, 0x10, 0x00, 0x00};
+    const byte c4[] = { 0x02, 0x80, 0x10, 0x00, 0x00};
+
+    /* Test data */
+    const struct testStruct {
+        const byte* c;
+        const int cSz;
+        const int expRet;
+    } t[] = {
+        {c0, sizeof(c0), ASN_PARSE_E}, /* Invalid bit-string length */
+        {c1, sizeof(c1), ASN_PARSE_E}, /* Invalid bit-string length */
+        {c2, sizeof(c2), ASN_PARSE_E}, /* Invalid integer length (zero) */
+        {c3, sizeof(c3), ASN_PARSE_E}, /* Valid INTEGER, but buffer too short */
+        {c4, sizeof(c4), ASN_PARSE_E}, /* Valid INTEGER, but not in bit-string */
+    };
+    const int tSz = (int)(sizeof(t) / sizeof(struct testStruct));
+
+    for (int i = 0; i < tSz; i++) {
+        WOLFSSL_MSG_EX("i == %d", i);
+        wc_InitDecodedCert(&decodedCert, t[i].c, t[i].cSz, NULL);
+        AssertIntEQ(wc_ParseCert(&decodedCert, CERT_TYPE, NO_VERIFY, NULL), t[i].expRet);
+        wc_FreeDecodedCert(&decodedCert);
+    }
+
+    res = TEST_RES_CHECK(1);
+#endif
+    return res;
+}
+
 static int test_MakeCertWithPathLen(void)
 {
     int res = TEST_SKIPPED;
@@ -61841,991 +61884,992 @@ int testAll = 1;
 TEST_CASE testCases[] = {
     TEST_DECL(test_fileAccess),
     TEST_DECL(test_wolfSSL_Init),
     TEST_DECL(test_wolfSSL_Method_Allocators),
 #ifndef NO_WOLFSSL_SERVER
     TEST_DECL(test_wolfSSL_CTX_new),
 #endif
 #if (!defined(NO_WOLFSSL_CLIENT) || !defined(NO_WOLFSSL_SERVER)) && \
     (!defined(NO_RSA) || defined(HAVE_ECC)) && !defined(NO_FILESYSTEM)
     TEST_DECL(test_for_double_Free),
 #endif
 #ifdef HAVE_IO_TESTS_DEPENDENCIES
     TEST_DECL(test_wolfSSL_get_finished),
     TEST_DECL(test_wolfSSL_CTX_add_session),
 #endif
     TEST_DECL(test_SSL_CIPHER_get_xxx),
     TEST_DECL(test_wolfSSL_ERR_strings),
     TEST_DECL(test_wolfSSL_EVP_shake128),
     TEST_DECL(test_wolfSSL_EVP_shake256),
     TEST_DECL(test_EVP_blake2),
     TEST_DECL(test_EVP_MD_do_all),
     TEST_DECL(test_OBJ_NAME_do_all),
     TEST_DECL(test_wolfSSL_CTX_set_cipher_list_bytes),
     TEST_DECL(test_wolfSSL_CTX_use_certificate_file),
     TEST_DECL(test_wolfSSL_CTX_use_certificate_buffer),
     TEST_DECL(test_wolfSSL_CTX_use_PrivateKey_file),
     TEST_DECL(test_wolfSSL_CTX_load_verify_locations),
     TEST_DECL(test_wolfSSL_CTX_load_system_CA_certs),
     TEST_DECL(test_wolfSSL_CertManagerCheckOCSPResponse),
     TEST_DECL(test_wolfSSL_CheckOCSPResponse),
     TEST_DECL(test_wolfSSL_CertManagerLoadCABuffer),
     TEST_DECL(test_wolfSSL_CertManagerLoadCABuffer_ex),
     TEST_DECL(test_wolfSSL_CertManagerGetCerts),
     TEST_DECL(test_wolfSSL_CertManagerSetVerify),
     TEST_DECL(test_wolfSSL_CertManagerNameConstraint),
     TEST_DECL(test_wolfSSL_CertManagerNameConstraint2),
     TEST_DECL(test_wolfSSL_CertManagerNameConstraint3),
     TEST_DECL(test_wolfSSL_CertManagerNameConstraint4),
     TEST_DECL(test_wolfSSL_CertManagerNameConstraint5),
     TEST_DECL(test_wolfSSL_FPKI),
     TEST_DECL(test_wolfSSL_OtherName),
     TEST_DECL(test_wolfSSL_CertRsaPss),
     TEST_DECL(test_wolfSSL_CertManagerCRL),
     TEST_DECL(test_wolfSSL_CTX_load_verify_locations_ex),
     TEST_DECL(test_wolfSSL_CTX_load_verify_buffer_ex),
     TEST_DECL(test_wolfSSL_CTX_load_verify_chain_buffer_format),
     TEST_DECL(test_wolfSSL_CTX_add1_chain_cert),
     TEST_DECL(test_wolfSSL_CTX_use_certificate_chain_file_format),
     TEST_DECL(test_wolfSSL_CTX_trust_peer_cert),
     TEST_DECL(test_wolfSSL_CTX_SetTmpDH_file),
     TEST_DECL(test_wolfSSL_CTX_SetTmpDH_buffer),
     TEST_DECL(test_wolfSSL_CTX_SetMinMaxDhKey_Sz),
     TEST_DECL(test_wolfSSL_CTX_der_load_verify_locations),
     TEST_DECL(test_wolfSSL_CTX_enable_disable),
     TEST_DECL(test_wolfSSL_CTX_ticket_API),
     TEST_DECL(test_server_wolfSSL_new),
     TEST_DECL(test_client_wolfSSL_new),
     TEST_DECL(test_wolfSSL_SetTmpDH_file),
     TEST_DECL(test_wolfSSL_SetTmpDH_buffer),
     TEST_DECL(test_wolfSSL_SetMinMaxDhKey_Sz),
     TEST_DECL(test_SetTmpEC_DHE_Sz),
     TEST_DECL(test_wolfSSL_CTX_get0_privatekey),
     TEST_DECL(test_wolfSSL_dtls_set_mtu),
     TEST_DECL(test_wolfSSL_dtls_plaintext),
 #if !defined(NO_WOLFSSL_CLIENT) && !defined(NO_WOLFSSL_SERVER) && \
     defined(HAVE_IO_TESTS_DEPENDENCIES)
     TEST_DECL(test_wolfSSL_read_write),
     TEST_DECL(test_wolfSSL_reuse_WOLFSSLobj),
     TEST_DECL(test_wolfSSL_CTX_verifyDepth_ServerClient),
     TEST_DECL(test_wolfSSL_CTX_set_cipher_list),
     TEST_DECL(test_wolfSSL_dtls_export),
     TEST_DECL(test_wolfSSL_tls_export),
 #endif
     TEST_DECL(test_wolfSSL_SetMinVersion),
     TEST_DECL(test_wolfSSL_CTX_SetMinVersion),
 
     /* TLS extensions tests */
 #ifdef HAVE_IO_TESTS_DEPENDENCIES
 #ifdef HAVE_SNI
     TEST_DECL(test_wolfSSL_UseSNI_params),
     TEST_DECL(test_wolfSSL_UseSNI_connection),
     TEST_DECL(test_wolfSSL_SNI_GetFromBuffer),
 #endif /* HAVE_SNI */
 #endif
     TEST_DECL(test_wolfSSL_UseTrustedCA),
     TEST_DECL(test_wolfSSL_UseMaxFragment),
     TEST_DECL(test_wolfSSL_UseTruncatedHMAC),
     TEST_DECL(test_wolfSSL_UseSupportedCurve),
 #if defined(HAVE_ALPN) && defined(HAVE_IO_TESTS_DEPENDENCIES)
     TEST_DECL(test_wolfSSL_UseALPN_connection),
     TEST_DECL(test_wolfSSL_UseALPN_params),
 #endif
 #ifdef HAVE_ALPN_PROTOS_SUPPORT
     TEST_DECL(test_wolfSSL_set_alpn_protos),
 #endif
     TEST_DECL(test_wolfSSL_DisableExtendedMasterSecret),
     TEST_DECL(test_wolfSSL_wolfSSL_UseSecureRenegotiation),
     TEST_DECL(test_wolfSSL_SCR_Reconnect),
     TEST_DECL(test_tls_ext_duplicate),
 #if defined(WOLFSSL_TLS13) && defined(HAVE_ECH)
     TEST_DECL(test_wolfSSL_Tls13_ECH_params),
     TEST_DECL(test_wolfSSL_Tls13_ECH),
 #endif
 
     /* X509 tests */
     TEST_DECL(test_wolfSSL_X509_NAME_get_entry),
     TEST_DECL(test_wolfSSL_PKCS12),
     TEST_DECL(test_wolfSSL_no_password_cb),
     TEST_DECL(test_wolfSSL_PKCS8),
     TEST_DECL(test_wolfSSL_PKCS8_ED25519),
     TEST_DECL(test_wolfSSL_PKCS8_ED448),
     TEST_DECL(test_wolfSSL_PKCS5),
     TEST_DECL(test_wolfSSL_URI),
     TEST_DECL(test_wolfSSL_TBS),
     TEST_DECL(test_wolfSSL_X509_verify),
     TEST_DECL(test_wolfSSL_X509_TLS_version),
 
     TEST_DECL(test_wc_PemToDer),
     TEST_DECL(test_wc_AllocDer),
     TEST_DECL(test_wc_CertPemToDer),
     TEST_DECL(test_wc_PubKeyPemToDer),
     TEST_DECL(test_wc_PemPubKeyToDer),
     TEST_DECL(test_wc_GetPubKeyDerFromCert),
     TEST_DECL(test_wc_CheckCertSigPubKey),
 
     /* OCSP Stapling */
     TEST_DECL(test_wolfSSL_UseOCSPStapling),
     TEST_DECL(test_wolfSSL_UseOCSPStaplingV2),
 
     /* Multicast */
     TEST_DECL(test_wolfSSL_mcast),
 
     /* compatibility tests */
     TEST_DECL(test_wolfSSL_lhash),
     TEST_DECL(test_wolfSSL_X509_NAME),
     TEST_DECL(test_wolfSSL_X509_NAME_hash),
     TEST_DECL(test_wolfSSL_X509_NAME_print_ex),
 #ifndef NO_BIO
     TEST_DECL(test_wolfSSL_X509_INFO_multiple_info),
     TEST_DECL(test_wolfSSL_X509_INFO),
 #endif
     TEST_DECL(test_wolfSSL_X509_subject_name_hash),
     TEST_DECL(test_wolfSSL_X509_issuer_name_hash),
     TEST_DECL(test_wolfSSL_X509_check_host),
     TEST_DECL(test_wolfSSL_X509_check_email),
     TEST_DECL(test_wolfSSL_DES),
     TEST_DECL(test_wolfSSL_certs),
     TEST_DECL(test_wolfSSL_X509_check_private_key),
     TEST_DECL(test_wolfSSL_ASN1_TIME_print),
     TEST_DECL(test_wolfSSL_ASN1_UTCTIME_print),
     TEST_DECL(test_wolfSSL_ASN1_TIME_diff_compare),
     TEST_DECL(test_wolfSSL_ASN1_GENERALIZEDTIME_free),
     TEST_DECL(test_wolfSSL_private_keys),
     TEST_DECL(test_wolfSSL_PEM_read_PrivateKey),
 #ifndef NO_BIO
     TEST_DECL(test_wolfSSL_PEM_read_RSA_PUBKEY),
 #endif
     TEST_DECL(test_wolfSSL_PEM_read_PUBKEY),
     TEST_DECL(test_wolfSSL_PEM_PrivateKey),
     TEST_DECL(test_wolfSSL_PEM_file_RSAKey),
     TEST_DECL(test_wolfSSL_PEM_file_RSAPrivateKey),
 #ifndef NO_BIO
     TEST_DECL(test_wolfSSL_PEM_bio_RSAKey),
     TEST_DECL(test_wolfSSL_PEM_bio_DSAKey),
     TEST_DECL(test_wolfSSL_PEM_bio_ECKey),
     TEST_DECL(test_wolfSSL_PEM_bio_RSAPrivateKey),
     TEST_DECL(test_wolfSSL_PEM_PUBKEY),
 #endif
     TEST_DECL(test_DSA_do_sign_verify),
     TEST_DECL(test_wolfSSL_tmp_dh),
     TEST_DECL(test_wolfSSL_ctrl),
     TEST_DECL(test_wolfSSL_EVP_MD_size),
     TEST_DECL(test_wolfSSL_EVP_MD_pkey_type),
     TEST_DECL(test_wolfSSL_EVP_Digest),
     TEST_DECL(test_wolfSSL_EVP_Digest_all),
     TEST_DECL(test_wolfSSL_EVP_PKEY_new_mac_key),
     TEST_DECL(test_wolfSSL_EVP_PKEY_new_CMAC_key),
     TEST_DECL(test_wolfSSL_EVP_MD_hmac_signing),
     TEST_DECL(test_wolfSSL_EVP_MD_rsa_signing),
     TEST_DECL(test_wolfSSL_EVP_MD_ecc_signing),
     TEST_DECL(test_wolfSSL_EVP_PKEY_print_public),
     TEST_DECL(test_wolfSSL_EVP_ENCODE_CTX_new),
     TEST_DECL(test_wolfSSL_EVP_ENCODE_CTX_free),
     TEST_DECL(test_wolfSSL_EVP_EncodeInit),
     TEST_DECL(test_wolfSSL_EVP_EncodeUpdate),
     TEST_DECL(test_wolfSSL_EVP_EncodeFinal),
     TEST_DECL(test_wolfSSL_EVP_DecodeInit),
     TEST_DECL(test_wolfSSL_EVP_DecodeUpdate),
     TEST_DECL(test_wolfSSL_EVP_DecodeFinal),
     TEST_DECL(test_wolfSSL_CTX_add_extra_chain_cert),
 #if !defined(NO_WOLFSSL_CLIENT) && !defined(NO_WOLFSSL_SERVER)
     TEST_DECL(test_wolfSSL_ERR_peek_last_error_line),
 #endif
 #ifndef NO_BIO
     TEST_DECL(test_wolfSSL_ERR_print_errors_cb),
     TEST_DECL(test_wolfSSL_GetLoggingCb),
     TEST_DECL(test_WOLFSSL_ERROR_MSG),
     TEST_DECL(test_wc_ERR_remove_state),
     TEST_DECL(test_wc_ERR_print_errors_fp),
 #endif
     TEST_DECL(test_wolfSSL_set_options),
     TEST_DECL(test_wolfSSL_sk_SSL_CIPHER),
     TEST_DECL(test_wolfSSL_set1_curves_list),
     TEST_DECL(test_wolfSSL_set1_sigalgs_list),
     TEST_DECL(test_wolfSSL_PKCS7_certs),
     TEST_DECL(test_wolfSSL_X509_STORE_CTX),
     TEST_DECL(test_wolfSSL_X509_STORE_CTX_trusted_stack_cleanup),
     TEST_DECL(test_wolfSSL_X509_STORE_CTX_get0_current_issuer),
     TEST_DECL(test_wolfSSL_msgCb),
     TEST_DECL(test_wolfSSL_either_side),
     TEST_DECL(test_wolfSSL_DTLS_either_side),
     TEST_DECL(test_wolfSSL_dtls_fragments),
     TEST_DECL(test_wolfSSL_dtls_AEAD_limit),
     TEST_DECL(test_wolfSSL_ignore_alert_before_cookie),
     TEST_DECL(test_wolfSSL_dtls_bad_record),
     TEST_DECL(test_wolfSSL_dtls_stateless),
     TEST_DECL(test_generate_cookie),
     TEST_DECL(test_wolfSSL_X509_STORE_set_flags),
     TEST_DECL(test_wolfSSL_X509_LOOKUP_load_file),
     TEST_DECL(test_wolfSSL_X509_Name_canon),
     TEST_DECL(test_wolfSSL_X509_LOOKUP_ctrl_file),
     TEST_DECL(test_wolfSSL_X509_LOOKUP_ctrl_hash_dir),
     TEST_DECL(test_wolfSSL_X509_NID),
     TEST_DECL(test_wolfSSL_X509_STORE_CTX_set_time),
     TEST_DECL(test_wolfSSL_get0_param),
     TEST_DECL(test_wolfSSL_X509_VERIFY_PARAM_set1_host),
     TEST_DECL(test_wolfSSL_set1_host),
     TEST_DECL(test_wolfSSL_X509_VERIFY_PARAM_set1_ip),
     TEST_DECL(test_wolfSSL_X509_STORE_CTX_get0_store),
     TEST_DECL(test_wolfSSL_X509_STORE),
     TEST_DECL(test_wolfSSL_X509_STORE_load_locations),
     TEST_DECL(test_X509_STORE_get0_objects),
     TEST_DECL(test_wolfSSL_X509_load_crl_file),
     TEST_DECL(test_wolfSSL_BN),
     TEST_DECL(test_wolfSSL_CTX_get0_set1_param),
 #ifndef NO_BIO
     TEST_DECL(test_wolfSSL_PEM_read_bio),
     TEST_DECL(test_wolfSSL_BIO),
 #endif
     TEST_DECL(test_wolfSSL_ASN1_STRING),
     TEST_DECL(test_wolfSSL_ASN1_BIT_STRING),
     TEST_DECL(test_wolfSSL_a2i_ASN1_INTEGER),
     TEST_DECL(test_wolfSSL_a2i_IPADDRESS),
     TEST_DECL(test_wolfSSL_X509),
     TEST_DECL(test_wolfSSL_X509_VERIFY_PARAM),
     TEST_DECL(test_wolfSSL_X509_sign),
     TEST_DECL(test_wolfSSL_X509_sign2),
     TEST_DECL(test_wolfSSL_X509_get0_tbs_sigalg),
     TEST_DECL(test_wolfSSL_X509_ALGOR_get0),
 #if defined(OPENSSL_EXTRA) && defined(HAVE_IO_TESTS_DEPENDENCIES)
     TEST_DECL(test_wolfSSL_check_domain),
 #endif
     TEST_DECL(test_wolfSSL_X509_get_X509_PUBKEY),
     TEST_DECL(test_wolfSSL_X509_PUBKEY_RSA),
     TEST_DECL(test_wolfSSL_X509_PUBKEY_EC),
     TEST_DECL(test_wolfSSL_X509_PUBKEY_DSA),
     TEST_DECL(test_wolfSSL_RAND),
     TEST_DECL(test_wolfSSL_BUF),
     TEST_DECL(test_wolfSSL_set_tlsext_status_type),
     TEST_DECL(test_wolfSSL_ASN1_TIME_adj),
     TEST_DECL(test_wolfSSL_ASN1_TIME_to_tm),
     TEST_DECL(test_wolfSSL_X509_cmp_time),
     TEST_DECL(test_wolfSSL_X509_time_adj),
     TEST_DECL(test_wolfSSL_CTX_set_client_CA_list),
     TEST_DECL(test_wolfSSL_CTX_add_client_CA),
     TEST_DECL(test_wolfSSL_CTX_set_srp_username),
     TEST_DECL(test_wolfSSL_CTX_set_srp_password),
     TEST_DECL(test_wolfSSL_CTX_set_keylog_callback),
     TEST_DECL(test_wolfSSL_CTX_get_keylog_callback),
     TEST_DECL(test_wolfSSL_Tls12_Key_Logging_test),
     TEST_DECL(test_wolfSSL_Tls13_Key_Logging_test),
     TEST_DECL(test_wolfSSL_Tls13_postauth),
     TEST_DECL(test_wolfSSL_CTX_set_ecdh_auto),
     TEST_DECL(test_wolfSSL_set_minmax_proto_version),
     TEST_DECL(test_wolfSSL_CTX_set_max_proto_version),
     TEST_DECL(test_wolfSSL_THREADID_hash),
     TEST_DECL(test_wolfSSL_RAND_set_rand_method),
     TEST_DECL(test_wolfSSL_RAND_bytes),
     TEST_DECL(test_wolfSSL_BN_rand),
     TEST_DECL(test_wolfSSL_pseudo_rand),
     TEST_DECL(test_wolfSSL_PKCS8_Compat),
     TEST_DECL(test_wolfSSL_PKCS8_d2i),
     TEST_DECL(test_error_queue_per_thread),
     TEST_DECL(test_wolfSSL_ERR_put_error),
     TEST_DECL(test_wolfSSL_ERR_get_error_order),
 #ifndef NO_BIO
     TEST_DECL(test_wolfSSL_ERR_print_errors),
 #endif
     TEST_DECL(test_wolfSSL_HMAC),
     TEST_DECL(test_wolfSSL_CMAC),
     TEST_DECL(test_wolfSSL_OBJ),
     TEST_DECL(test_wolfSSL_i2a_ASN1_OBJECT),
     TEST_DECL(test_wolfSSL_OBJ_cmp),
     TEST_DECL(test_wolfSSL_OBJ_txt2nid),
     TEST_DECL(test_wolfSSL_OBJ_txt2obj),
     TEST_DECL(test_wolfSSL_i2t_ASN1_OBJECT),
     TEST_DECL(test_wolfSSL_PEM_write_bio_X509),
     TEST_DECL(test_wolfSSL_X509_NAME_ENTRY),
     TEST_DECL(test_wolfSSL_X509_set_name),
     TEST_DECL(test_wolfSSL_X509_set_notAfter),
     TEST_DECL(test_wolfSSL_X509_set_notBefore),
     TEST_DECL(test_wolfSSL_X509_set_version),
 #ifndef NO_BIO
     TEST_DECL(test_wolfSSL_BIO_gets),
     TEST_DECL(test_wolfSSL_BIO_puts),
     TEST_DECL(test_wolfSSL_BIO_dump),
     TEST_DECL(test_wolfSSL_BIO_should_retry),
     TEST_DECL(test_wolfSSL_d2i_PUBKEY),
     TEST_DECL(test_wolfSSL_BIO_write),
     TEST_DECL(test_wolfSSL_BIO_connect),
     TEST_DECL(test_wolfSSL_BIO_accept),
     TEST_DECL(test_wolfSSL_BIO_printf),
     TEST_DECL(test_wolfSSL_BIO_f_md),
     TEST_DECL(test_wolfSSL_BIO_up_ref),
     TEST_DECL(test_wolfSSL_BIO_tls),
     TEST_DECL(test_wolfSSL_BIO_reset),
 #endif
     TEST_DECL(test_wolfSSL_cert_cb),
     TEST_DECL(test_wolfSSL_SESSION),
     TEST_DECL(test_wolfSSL_CTX_sess_set_remove_cb),
     TEST_DECL(test_wolfSSL_ticket_keys),
     TEST_DECL(test_wolfSSL_DES_ecb_encrypt),
     TEST_DECL(test_wolfSSL_sk_GENERAL_NAME),
     TEST_DECL(test_wolfSSL_GENERAL_NAME_print),
     TEST_DECL(test_wolfSSL_sk_DIST_POINT),
     TEST_DECL(test_wolfSSL_MD4),
     TEST_DECL(test_wolfSSL_verify_mode),
     TEST_DECL(test_wolfSSL_verify_depth),
     TEST_DECL(test_wolfSSL_HMAC_CTX),
     TEST_DECL(test_wolfSSL_msg_callback),
     TEST_DECL(test_wolfSSL_SHA),
     TEST_DECL(test_wolfSSL_AES_ecb_encrypt),
     TEST_DECL(test_wolfSSL_MD5),
     TEST_DECL(test_wolfSSL_MD5_Transform),
     TEST_DECL(test_wolfSSL_SHA_Transform),
     TEST_DECL(test_wolfSSL_SHA256),
     TEST_DECL(test_wolfSSL_SHA256_Transform),
     TEST_DECL(test_wolfSSL_SHA224),
     TEST_DECL(test_wolfSSL_SHA512_Transform),
     TEST_DECL(test_wolfSSL_X509_get_serialNumber),
     TEST_DECL(test_wolfSSL_X509_CRL),
     TEST_DECL(test_wolfSSL_d2i_X509_REQ),
     TEST_DECL(test_wolfSSL_PEM_read_X509),
     TEST_DECL(test_wolfSSL_PEM_read),
 #ifndef NO_BIO
     TEST_DECL(test_wolfSSL_PEM_X509_INFO_read_bio),
 #endif
     TEST_DECL(test_wolfSSL_X509_STORE_get1_certs),
     TEST_DECL(test_wolfSSL_X509_NAME_ENTRY_get_object),
     TEST_DECL(test_wolfSSL_OpenSSL_add_all_algorithms),
     TEST_DECL(test_wolfSSL_OPENSSL_hexstr2buf),
     TEST_DECL(test_wolfSSL_ASN1_STRING_print_ex),
     TEST_DECL(test_wolfSSL_ASN1_TIME_to_generalizedtime),
     TEST_DECL(test_wolfSSL_ASN1_INTEGER_get_set),
     TEST_DECL(test_wolfSSL_d2i_ASN1_INTEGER),
     TEST_DECL(test_wolfSSL_IMPLEMENT_ASN1_FUNCTIONS),
     TEST_DECL(test_wolfSSL_i2c_ASN1_INTEGER),
     TEST_DECL(test_wolfSSL_X509_check_ca),
     TEST_DECL(test_wolfSSL_X509_check_ip_asc),
     TEST_DECL(test_wolfSSL_make_cert),
     TEST_DECL(test_wolfSSL_DES_ncbc),
     TEST_DECL(test_wolfSSL_AES_cbc_encrypt),
     TEST_DECL(test_wolfSSL_CRYPTO_cts128),
     TEST_DECL(test_wolfssl_EVP_aes_gcm_AAD_2_parts),
     TEST_DECL(test_wolfssl_EVP_aes_gcm),
     TEST_DECL(test_wolfssl_EVP_aes_gcm_zeroLen),
     TEST_DECL(test_wolfssl_EVP_aes_ccm),
     TEST_DECL(test_wolfssl_EVP_aes_ccm_zeroLen),
     TEST_DECL(test_wolfssl_EVP_chacha20_poly1305),
     TEST_DECL(test_wolfssl_EVP_chacha20),
     TEST_DECL(test_wolfSSL_EVP_PKEY_hkdf),
     TEST_DECL(test_wolfSSL_PKEY_up_ref),
     TEST_DECL(test_wolfSSL_EVP_Cipher_extra),
     TEST_DECL(test_wolfSSL_d2i_and_i2d_PublicKey),
     TEST_DECL(test_wolfSSL_d2i_and_i2d_DSAparams),
     TEST_DECL(test_wolfSSL_i2d_PrivateKey),
     TEST_DECL(test_wolfSSL_OCSP_id_get0_info),
     TEST_DECL(test_wolfSSL_i2d_OCSP_CERTID),
     TEST_DECL(test_wolfSSL_d2i_OCSP_CERTID),
     TEST_DECL(test_wolfSSL_OCSP_id_cmp),
     TEST_DECL(test_wolfSSL_OCSP_SINGLERESP_get0_id),
     TEST_DECL(test_wolfSSL_OCSP_single_get0_status),
     TEST_DECL(test_wolfSSL_OCSP_resp_count),
     TEST_DECL(test_wolfSSL_OCSP_resp_get0),
     TEST_DECL(test_wolfSSL_EVP_PKEY_derive),
     TEST_DECL(test_wolfSSL_EVP_PBE_scrypt),
     TEST_DECL(test_CONF_modules_xxx),
     TEST_DECL(test_CRYPTO_set_dynlock_xxx),
     TEST_DECL(test_CRYPTO_THREADID_xxx),
     TEST_DECL(test_ENGINE_cleanup),
 #ifdef OPENSSL_ALL
     TEST_DECL(test_wolfSSL_X509_PUBKEY_get),
     TEST_DECL(test_wolfSSL_sk_CIPHER_description),
     TEST_DECL(test_wolfSSL_get_ciphers_compat),
     TEST_DECL(test_wolfSSL_ASN1_STRING_to_UTF8),
     TEST_DECL(test_wolfSSL_ASN1_UNIVERSALSTRING_to_string),
     TEST_DECL(test_wolfSSL_EVP_PKEY_set1_get1_DSA),
     TEST_DECL(test_wolfSSL_DSA_SIG),
     TEST_DECL(test_wolfSSL_EVP_PKEY_set1_get1_EC_KEY),
     TEST_DECL(test_wolfSSL_EVP_PKEY_set1_get1_DH),
     TEST_DECL(test_wolfSSL_CTX_ctrl),
     TEST_DECL(test_wolfSSL_EVP_PKEY_assign),
     TEST_DECL(test_wolfSSL_EVP_PKEY_base_id),
     TEST_DECL(test_wolfSSL_EVP_PKEY_id),
     TEST_DECL(test_wolfSSL_EVP_PKEY_paramgen),
     TEST_DECL(test_wolfSSL_EVP_PKEY_keygen),
     TEST_DECL(test_wolfSSL_EVP_PKEY_keygen_init),
     TEST_DECL(test_wolfSSL_EVP_PKEY_missing_parameters),
     TEST_DECL(test_wolfSSL_EVP_PKEY_copy_parameters),
     TEST_DECL(test_wolfSSL_EVP_PKEY_CTX_set_rsa_keygen_bits),
     TEST_DECL(test_wolfSSL_EVP_CIPHER_CTX_iv_length),
     TEST_DECL(test_wolfSSL_EVP_CIPHER_CTX_key_length),
     TEST_DECL(test_wolfSSL_EVP_CIPHER_CTX_set_key_length),
     TEST_DECL(test_wolfSSL_EVP_CIPHER_CTX_set_iv),
     TEST_DECL(test_wolfSSL_EVP_PKEY_CTX_new_id),
     TEST_DECL(test_wolfSSL_EVP_rc4),
     TEST_DECL(test_wolfSSL_EVP_enc_null),
     TEST_DECL(test_wolfSSL_EVP_rc2_cbc),
     TEST_DECL(test_wolfSSL_EVP_mdc2),
     TEST_DECL(test_wolfSSL_EVP_md4),
     TEST_DECL(test_wolfSSL_EVP_aes_256_gcm),
     TEST_DECL(test_wolfSSL_EVP_aes_192_gcm),
     TEST_DECL(test_wolfSSL_EVP_aes_256_ccm),
     TEST_DECL(test_wolfSSL_EVP_aes_192_ccm),
     TEST_DECL(test_wolfSSL_EVP_aes_128_ccm),
     TEST_DECL(test_wolfSSL_EVP_ripemd160),
     TEST_DECL(test_wolfSSL_EVP_get_digestbynid),
     TEST_DECL(test_wolfSSL_EVP_MD_nid),
     TEST_DECL(test_wolfSSL_EVP_PKEY_get0_EC_KEY),
     TEST_DECL(test_wolfSSL_EVP_X_STATE),
     TEST_DECL(test_wolfSSL_EVP_X_STATE_LEN),
     TEST_DECL(test_wolfSSL_EVP_CIPHER_block_size),
     TEST_DECL(test_wolfSSL_EVP_CIPHER_iv_length),
     TEST_DECL(test_wolfSSL_EVP_SignInit_ex),
     TEST_DECL(test_wolfSSL_EVP_DigestFinal_ex),
     TEST_DECL(test_wolfSSL_EVP_PKEY_assign_DH),
     TEST_DECL(test_wolfSSL_EVP_BytesToKey),
     TEST_DECL(test_wolfSSL_EVP_PKEY_param_check),
     TEST_DECL(test_wolfSSL_QT_EVP_PKEY_CTX_free),
     TEST_DECL(test_evp_cipher_aes_gcm),
     TEST_DECL(test_wolfSSL_OBJ_ln),
     TEST_DECL(test_wolfSSL_OBJ_sn),
     TEST_DECL(test_wolfSSL_TXT_DB),
     TEST_DECL(test_wolfSSL_NCONF),
 #endif /* OPENSSL_ALL */
 #if (defined(OPENSSL_ALL) || defined(WOLFSSL_ASIO)) && !defined(NO_RSA)
     TEST_DECL(test_wolfSSL_CTX_use_certificate_ASN1),
 #ifndef NO_BIO
     TEST_DECL(test_wolfSSL_d2i_PrivateKeys_bio),
 #endif /* !NO_BIO */
 #endif /* (OPENSSL_ALL || WOLFSSL_ASIO) && !NO_RSA */
     TEST_DECL(test_wolfSSL_X509_CA_num),
     TEST_DECL(test_wolfSSL_X509_get_version),
 #ifndef NO_BIO
     TEST_DECL(test_wolfSSL_X509_print),
     TEST_DECL(test_wolfSSL_X509_CRL_print),
     TEST_DECL(test_wolfSSL_BIO_get_len),
 #endif
 
     TEST_DECL(test_wolfSSL_RSA),
     TEST_DECL(test_wolfSSL_RSA_DER),
     TEST_DECL(test_wolfSSL_RSA_print),
 #ifndef NO_RSA
     TEST_DECL(test_wolfSSL_RSA_padding_add_PKCS1_PSS),
 #endif
     TEST_DECL(test_wolfSSL_RSA_sign_sha3),
     TEST_DECL(test_wolfSSL_RSA_get0_key),
     TEST_DECL(test_wolfSSL_RSA_meth),
     TEST_DECL(test_wolfSSL_RSA_verify),
     TEST_DECL(test_wolfSSL_RSA_sign),
     TEST_DECL(test_wolfSSL_RSA_sign_ex),
     TEST_DECL(test_wolfSSL_RSA_public_decrypt),
     TEST_DECL(test_wolfSSL_RSA_private_encrypt),
     TEST_DECL(test_wolfSSL_RSA_public_encrypt),
     TEST_DECL(test_wolfSSL_RSA_private_decrypt),
     TEST_DECL(test_wolfSSL_RSA_GenAdd),
     TEST_DECL(test_wolfSSL_RSA_blinding_on),
     TEST_DECL(test_wolfSSL_RSA_ex_data),
     TEST_DECL(test_wolfSSL_RSA_LoadDer),
     TEST_DECL(test_wolfSSL_RSA_To_Der),
     TEST_DECL(test_wolfSSL_PEM_read_RSAPublicKey),
     TEST_DECL(test_wolfSSL_PEM_write_RSA_PUBKEY),
     TEST_DECL(test_wolfSSL_PEM_write_RSAPrivateKey),
     TEST_DECL(test_wolfSSL_PEM_write_mem_RSAPrivateKey),
 
     TEST_DECL(test_wolfSSL_DH),
     TEST_DECL(test_wolfSSL_DH_dup),
     TEST_DECL(test_wolfSSL_DH_check),
     TEST_DECL(test_wolfSSL_DH_prime),
     TEST_DECL(test_wolfSSL_DH_1536_prime),
     TEST_DECL(test_wolfSSL_DH_get_2048_256),
     TEST_DECL(test_wolfSSL_PEM_write_DHparams),
     TEST_DECL(test_wolfSSL_PEM_read_DHparams),
     TEST_DECL(test_wolfSSL_d2i_DHparams),
     TEST_DECL(test_wolfSSL_DH_LoadDer),
     TEST_DECL(test_wolfSSL_i2d_DHparams),
 
 #if defined(HAVE_ECC) && !defined(OPENSSL_NO_PK)
     TEST_DECL(test_wolfSSL_EC_GROUP),
     TEST_DECL(test_wolfSSL_PEM_read_bio_ECPKParameters),
     TEST_DECL(test_wolfSSL_EC_POINT),
     TEST_DECL(test_wolfSSL_EC_KEY_generate),
     TEST_DECL(test_EC_i2d),
     TEST_DECL(test_wolfSSL_EC_curve),
     TEST_DECL(test_wolfSSL_EC_KEY_dup),
     TEST_DECL(test_wolfSSL_EC_KEY_set_group),
     TEST_DECL(test_wolfSSL_EC_KEY_set_conv_form),
     TEST_DECL(test_wolfSSL_EC_KEY_private_key),
     TEST_DECL(test_wolfSSL_EC_KEY_public_key),
     TEST_DECL(test_wolfSSL_EC_KEY_print_fp),
     TEST_DECL(test_wolfSSL_EC_get_builtin_curves),
     TEST_DECL(test_wolfSSL_ECDSA_SIG),
     TEST_DECL(test_ECDSA_size_sign),
     TEST_DECL(test_ECDH_compute_key),
 #endif
 
     TEST_DECL(test_wolfSSL_X509V3_EXT_get),
     TEST_DECL(test_wolfSSL_X509V3_EXT_nconf),
     TEST_DECL(test_wolfSSL_X509V3_EXT),
     TEST_DECL(test_wolfSSL_X509_get_extension_flags),
     TEST_DECL(test_wolfSSL_X509_get_ext),
     TEST_DECL(test_wolfSSL_X509_get_ext_by_NID),
     TEST_DECL(test_wolfSSL_X509_get_ext_subj_alt_name),
     TEST_DECL(test_wolfSSL_X509_get_ext_count),
     TEST_DECL(test_wolfSSL_X509_EXTENSION_new),
     TEST_DECL(test_wolfSSL_X509_EXTENSION_get_object),
     TEST_DECL(test_wolfSSL_X509_EXTENSION_get_data),
     TEST_DECL(test_wolfSSL_X509_EXTENSION_get_critical),
     TEST_DECL(test_wolfSSL_X509V3_EXT_print),
     TEST_DECL(test_wolfSSL_X509_cmp),
 #ifndef NO_BIO
     TEST_DECL(test_wolfSSL_ASN1_STRING_print),
 #endif
     TEST_DECL(test_wolfSSL_ASN1_get_object),
     TEST_DECL(test_openssl_generate_key_and_cert),
     TEST_DECL(test_wolfSSL_CRYPTO_memcmp),
     TEST_DECL(test_wolfSSL_read_detect_TCP_disconnect),
     /* test the no op functions for compatibility */
     TEST_DECL(test_no_op_functions),
 
     /* OpenSSL EVP_PKEY API tests */
     TEST_DECL(test_EVP_PKEY_rsa),
     TEST_DECL(test_wolfSSL_EVP_PKEY_encrypt),
     TEST_DECL(test_wolfSSL_EVP_PKEY_sign_verify),
     TEST_DECL(test_EVP_PKEY_ec),
     TEST_DECL(test_EVP_PKEY_cmp),
     /* OpenSSL error API tests */
     TEST_DECL(test_ERR_load_crypto_strings),
     /* OpenSSL sk_X509 API test */
     TEST_DECL(test_sk_X509),
     /* OpenSSL sk_X509_CRL API test */
     TEST_DECL(test_sk_X509_CRL),
     /* OpenSSL X509 API test */
     TEST_DECL(test_X509_get_signature_nid),
     /* OpenSSL X509 REQ API test */
     TEST_DECL(test_X509_REQ),
     /* OpenSSL PKCS7 API test */
     TEST_DECL(test_wolfssl_PKCS7),
     TEST_DECL(test_wolfSSL_PKCS7_sign),
     TEST_DECL(test_wolfSSL_PKCS7_SIGNED_new),
 #ifndef NO_BIO
     TEST_DECL(test_wolfSSL_PEM_write_bio_PKCS7),
 #ifdef HAVE_SMIME
     TEST_DECL(test_wolfSSL_SMIME_read_PKCS7),
     TEST_DECL(test_wolfSSL_SMIME_write_PKCS7),
 #endif /* HAVE_SMIME */
 #endif /* !NO_BIO */
 
     /* OpenSSL compatibility outside SSL context w/ CRL lookup directory */
     TEST_DECL(test_X509_STORE_No_SSL_CTX),
     TEST_DECL(test_X509_LOOKUP_add_dir),
 
     /* wolfCrypt ASN tests */
     TEST_DECL(test_wc_CreateEncryptedPKCS8Key),
     TEST_DECL(test_wc_GetPkcs8TraditionalOffset),
     TEST_DECL(test_wc_SetSubjectRaw),
     TEST_DECL(test_wc_GetSubjectRaw),
     TEST_DECL(test_wc_SetIssuerRaw),
     TEST_DECL(test_wc_SetIssueBuffer),
     TEST_DECL(test_wc_SetSubjectKeyId),
     TEST_DECL(test_wc_SetSubject),
     TEST_DECL(test_CheckCertSignature),
     TEST_DECL(test_wc_ParseCert),
+    TEST_DECL(test_wc_ParseCert_Error),
     TEST_DECL(test_MakeCertWithPathLen),
 
     /* wolfCrypt ECC tests */
     TEST_DECL(test_wc_ecc_get_curve_size_from_name),
     TEST_DECL(test_wc_ecc_get_curve_id_from_name),
     TEST_DECL(test_wc_ecc_get_curve_id_from_params),
 
 #ifdef WOLFSSL_TLS13
     /* TLS v1.3 API tests */
     TEST_DECL(test_tls13_apis),
     TEST_DECL(test_tls13_cipher_suites),
 #endif
 
 #if !defined(NO_CERTS) && (!defined(NO_WOLFSSL_CLIENT) || \
     !defined(WOLFSSL_NO_CLIENT_AUTH)) && !defined(NO_FILESYSTEM)
     /* Use the Cert Manager(CM) API to generate the error ASN_SIG_CONFIRM_E */
     /* Bad certificate signature tests */
     TEST_DECL(test_EccSigFailure_cm),
     TEST_DECL(test_RsaSigFailure_cm),
 #endif /* NO_CERTS */
 
 #if defined(HAVE_PK_CALLBACKS) && (!defined(WOLFSSL_NO_TLS12) || \
     !defined(NO_OLD_TLS))
     TEST_DECL(test_DhCallbacks),
 #endif
 
 #if defined(HAVE_KEYING_MATERIAL) && defined(HAVE_IO_TESTS_DEPENDENCIES)
     TEST_DECL(test_export_keying_material),
 #endif
 
     TEST_DECL(test_wolfSSL_CTX_get_min_proto_version),
 #if defined(OPENSSL_ALL) || (defined(OPENSSL_EXTRA) && \
     (defined(HAVE_STUNNEL) || defined(WOLFSSL_NGINX) || \
     defined(HAVE_LIGHTY) || defined(WOLFSSL_HAPROXY) || \
     defined(WOLFSSL_OPENSSH) || defined(HAVE_SBLIM_SFCB)))
     TEST_DECL(test_wolfSSL_set_SSL_CTX),
 #endif
 
     TEST_DECL(test_wolfSSL_security_level),
     TEST_DECL(test_wolfSSL_SSL_in_init),
     TEST_DECL(test_wolfSSL_CTX_set_timeout),
     TEST_DECL(test_wolfSSL_OpenSSL_version),
     TEST_DECL(test_wolfSSL_set_psk_use_session_callback),
     TEST_DECL(test_ticket_and_psk_mixing),
     TEST_DECL(test_prioritize_psk),
 
     TEST_DECL(test_CONF_CTX_FILE),
     TEST_DECL(test_CONF_CTX_CMDLINE),
     TEST_DECL(test_wolfSSL_CRYPTO_get_ex_new_index),
     TEST_DECL(test_wolfSSL_SESSION_get_ex_new_index),
 
     /* wolfcrypt */
     TEST_DECL(test_wolfCrypt_Init),
     TEST_DECL(test_wc_InitMd5),
     TEST_DECL(test_wc_Md5Update),
     TEST_DECL(test_wc_Md5Final),
     TEST_DECL(test_wc_InitSha),
     TEST_DECL(test_wc_ShaUpdate),
     TEST_DECL(test_wc_ShaFinal),
     TEST_DECL(test_wc_InitSha256),
     TEST_DECL(test_wc_Sha256Update),
     TEST_DECL(test_wc_Sha256Final),
     TEST_DECL(test_wc_Sha256FinalRaw),
     TEST_DECL(test_wc_Sha256GetFlags),
     TEST_DECL(test_wc_Sha256Free),
     TEST_DECL(test_wc_Sha256GetHash),
     TEST_DECL(test_wc_Sha256Copy),
     TEST_DECL(test_wc_InitSha512),
     TEST_DECL(test_wc_Sha512Update),
     TEST_DECL(test_wc_Sha512Final),
     TEST_DECL(test_wc_Sha512GetFlags),
     TEST_DECL(test_wc_Sha512FinalRaw),
     TEST_DECL(test_wc_Sha512Free),
     TEST_DECL(test_wc_Sha512GetHash),
     TEST_DECL(test_wc_Sha512Copy),
 
     TEST_DECL(test_wc_InitSha512_224),
     TEST_DECL(test_wc_Sha512_224Update),
     TEST_DECL(test_wc_Sha512_224Final),
     TEST_DECL(test_wc_Sha512_224GetFlags),
     TEST_DECL(test_wc_Sha512_224FinalRaw),
     TEST_DECL(test_wc_Sha512_224Free),
     TEST_DECL(test_wc_Sha512_224GetHash),
     TEST_DECL(test_wc_Sha512_224Copy),
     TEST_DECL(test_wc_InitSha512_256),
     TEST_DECL(test_wc_Sha512_256Update),
     TEST_DECL(test_wc_Sha512_256Final),
     TEST_DECL(test_wc_Sha512_256GetFlags),
     TEST_DECL(test_wc_Sha512_256FinalRaw),
     TEST_DECL(test_wc_Sha512_256Free),
     TEST_DECL(test_wc_Sha512_256GetHash),
     TEST_DECL(test_wc_Sha512_256Copy),
 
     TEST_DECL(test_wc_InitSha384),
     TEST_DECL(test_wc_Sha384Update),
     TEST_DECL(test_wc_Sha384Final),
     TEST_DECL(test_wc_Sha384GetFlags),
     TEST_DECL(test_wc_Sha384FinalRaw),
     TEST_DECL(test_wc_Sha384Free),
     TEST_DECL(test_wc_Sha384GetHash),
     TEST_DECL(test_wc_Sha384Copy),
     TEST_DECL(test_wc_InitSha224),
     TEST_DECL(test_wc_Sha224Update),
     TEST_DECL(test_wc_Sha224Final),
     TEST_DECL(test_wc_Sha224SetFlags),
     TEST_DECL(test_wc_Sha224GetFlags),
     TEST_DECL(test_wc_Sha224Free),
     TEST_DECL(test_wc_Sha224GetHash),
     TEST_DECL(test_wc_Sha224Copy),
     TEST_DECL(test_wc_InitBlake2b),
     TEST_DECL(test_wc_InitBlake2b_WithKey),
     TEST_DECL(test_wc_InitBlake2s_WithKey),
     TEST_DECL(test_wc_InitRipeMd),
     TEST_DECL(test_wc_RipeMdUpdate),
     TEST_DECL(test_wc_RipeMdFinal),
 
     TEST_DECL(test_wc_InitSha3),
     TEST_DECL(testing_wc_Sha3_Update),
     TEST_DECL(test_wc_Sha3_224_Final),
     TEST_DECL(test_wc_Sha3_256_Final),
     TEST_DECL(test_wc_Sha3_384_Final),
     TEST_DECL(test_wc_Sha3_512_Final),
     TEST_DECL(test_wc_Sha3_224_Copy),
     TEST_DECL(test_wc_Sha3_256_Copy),
     TEST_DECL(test_wc_Sha3_384_Copy),
     TEST_DECL(test_wc_Sha3_512_Copy),
     TEST_DECL(test_wc_Sha3_GetFlags),
     TEST_DECL(test_wc_InitShake256),
     TEST_DECL(testing_wc_Shake256_Update),
     TEST_DECL(test_wc_Shake256_Final),
     TEST_DECL(test_wc_Shake256_Copy),
     TEST_DECL(test_wc_Shake256Hash),
 
     TEST_DECL(test_wc_Md5HmacSetKey),
     TEST_DECL(test_wc_Md5HmacUpdate),
     TEST_DECL(test_wc_Md5HmacFinal),
     TEST_DECL(test_wc_ShaHmacSetKey),
     TEST_DECL(test_wc_ShaHmacUpdate),
     TEST_DECL(test_wc_ShaHmacFinal),
     TEST_DECL(test_wc_Sha224HmacSetKey),
     TEST_DECL(test_wc_Sha224HmacUpdate),
     TEST_DECL(test_wc_Sha224HmacFinal),
     TEST_DECL(test_wc_Sha256HmacSetKey),
     TEST_DECL(test_wc_Sha256HmacUpdate),
     TEST_DECL(test_wc_Sha256HmacFinal),
     TEST_DECL(test_wc_Sha384HmacSetKey),
     TEST_DECL(test_wc_Sha384HmacUpdate),
     TEST_DECL(test_wc_Sha384HmacFinal),
 
     TEST_DECL(test_wc_HashInit),
     TEST_DECL(test_wc_HashSetFlags),
     TEST_DECL(test_wc_HashGetFlags),
 
     TEST_DECL(test_wc_InitCmac),
     TEST_DECL(test_wc_CmacUpdate),
     TEST_DECL(test_wc_CmacFinal),
     TEST_DECL(test_wc_AesCmacGenerate),
     TEST_DECL(test_wc_AesGcmStream),
 
     TEST_DECL(test_wc_Des3_SetIV),
     TEST_DECL(test_wc_Des3_SetKey),
     TEST_DECL(test_wc_Des3_CbcEncryptDecrypt),
     TEST_DECL(test_wc_Des3_CbcEncryptDecryptWithKey),
     TEST_DECL(test_wc_Des3_EcbEncrypt),
     TEST_DECL(test_wc_Chacha_SetKey),
     TEST_DECL(test_wc_Chacha_Process),
     TEST_DECL(test_wc_ChaCha20Poly1305_aead),
     TEST_DECL(test_wc_Poly1305SetKey),
 
     TEST_DECL(test_wc_CamelliaSetKey),
     TEST_DECL(test_wc_CamelliaSetIV),
     TEST_DECL(test_wc_CamelliaEncryptDecryptDirect),
     TEST_DECL(test_wc_CamelliaCbcEncryptDecrypt),
 
     TEST_DECL(test_wc_Arc4SetKey),
     TEST_DECL(test_wc_Arc4Process),
 
     TEST_DECL(test_wc_Rc2SetKey),
     TEST_DECL(test_wc_Rc2SetIV),
     TEST_DECL(test_wc_Rc2EcbEncryptDecrypt),
     TEST_DECL(test_wc_Rc2CbcEncryptDecrypt),
 
     TEST_DECL(test_wc_AesSetKey),
     TEST_DECL(test_wc_AesSetIV),
     TEST_DECL(test_wc_AesCbcEncryptDecrypt),
     TEST_DECL(test_wc_AesCtrEncryptDecrypt),
     TEST_DECL(test_wc_AesGcmSetKey),
     TEST_DECL(test_wc_AesGcmEncryptDecrypt),
     TEST_DECL(test_wc_AesGcmMixedEncDecLongIV),
     TEST_DECL(test_wc_GmacSetKey),
     TEST_DECL(test_wc_GmacUpdate),
     TEST_DECL(test_wc_InitRsaKey),
     TEST_DECL(test_wc_RsaPrivateKeyDecode),
     TEST_DECL(test_wc_RsaPublicKeyDecode),
     TEST_DECL(test_wc_RsaPublicKeyDecodeRaw),
     TEST_DECL(test_wc_MakeRsaKey),
     TEST_DECL(test_wc_SetKeyUsage),
 
     TEST_DECL(test_wc_CheckProbablePrime),
     TEST_DECL(test_wc_RsaPSS_Verify),
     TEST_DECL(test_wc_RsaPSS_VerifyCheck),
     TEST_DECL(test_wc_RsaPSS_VerifyCheckInline),
 
     TEST_DECL(test_wc_SetMutexCb),
     TEST_DECL(test_wc_LockMutex_ex),
 
     TEST_DECL(test_wc_RsaKeyToDer),
     TEST_DECL(test_wc_RsaKeyToPublicDer),
     TEST_DECL(test_wc_RsaPublicEncryptDecrypt),
     TEST_DECL(test_wc_RsaPublicEncryptDecrypt_ex),
     TEST_DECL(test_wc_RsaEncryptSize),
     TEST_DECL(test_wc_RsaSSL_SignVerify),
     TEST_DECL(test_wc_RsaFlattenPublicKey),
     TEST_DECL(test_RsaDecryptBoundsCheck),
     TEST_DECL(test_wc_AesCcmSetKey),
     TEST_DECL(test_wc_AesCcmEncryptDecrypt),
     TEST_DECL(test_wc_InitDsaKey),
     TEST_DECL(test_wc_DsaSignVerify),
     TEST_DECL(test_wc_DsaPublicPrivateKeyDecode),
     TEST_DECL(test_wc_MakeDsaKey),
     TEST_DECL(test_wc_DsaKeyToDer),
     TEST_DECL(test_wc_DsaKeyToPublicDer),
     TEST_DECL(test_wc_DsaImportParamsRaw),
     TEST_DECL(test_wc_DsaImportParamsRawCheck),
     TEST_DECL(test_wc_DsaExportParamsRaw),
     TEST_DECL(test_wc_DsaExportKeyRaw),
 
     TEST_DECL(test_wc_SignatureGetSize_ecc),
     TEST_DECL(test_wc_SignatureGetSize_rsa),
     /*
      * test_wolfCrypt_Cleanup needs to come after the above wolfCrypt tests to
      * avoid memory leaks.
      */
     TEST_DECL(test_wolfCrypt_Cleanup),
 
 #ifdef OPENSSL_EXTRA
     TEST_DECL(test_wolfSSL_EVP_get_cipherbynid),
     TEST_DECL(test_wolfSSL_EVP_CIPHER_CTX),
     TEST_DECL(test_ED25519),
     TEST_DECL(test_ED448),
 #endif
 #if defined(OPENSSL_EXTRA) && defined(HAVE_ECC) && \
     !defined(HAVE_SELFTEST) && \
     !(defined(HAVE_FIPS) || defined(HAVE_FIPS_VERSION))
     TEST_DECL(test_wc_ecc_get_curve_id_from_dp_params),
 #endif
 
 #ifdef HAVE_HASHDRBG
 #ifdef TEST_RESEED_INTERVAL
     TEST_DECL(test_wc_RNG_GenerateBlock_Reseed),
 #endif
     TEST_DECL(test_wc_RNG_GenerateBlock),
 #endif
     TEST_DECL(test_get_rand_digit),
     TEST_DECL(test_get_digit_count),
     TEST_DECL(test_mp_cond_copy),
     TEST_DECL(test_mp_rand),
     TEST_DECL(test_get_digit),
     TEST_DECL(test_wc_export_int),
     TEST_DECL(test_wc_InitRngNonce),
     TEST_DECL(test_wc_InitRngNonce_ex),
 
     TEST_DECL(test_wc_ed25519_make_key),
     TEST_DECL(test_wc_ed25519_init),
     TEST_DECL(test_wc_ed25519_sign_msg),
     TEST_DECL(test_wc_ed25519_import_public),
     TEST_DECL(test_wc_ed25519_import_private_key),
     TEST_DECL(test_wc_ed25519_export),
     TEST_DECL(test_wc_ed25519_size),
     TEST_DECL(test_wc_ed25519_exportKey),
     TEST_DECL(test_wc_Ed25519PublicKeyToDer),
     TEST_DECL(test_wc_curve25519_init),
     TEST_DECL(test_wc_curve25519_size),
     TEST_DECL(test_wc_curve25519_export_key_raw),
     TEST_DECL(test_wc_curve25519_export_key_raw_ex),
     TEST_DECL(test_wc_curve25519_make_key),
     TEST_DECL(test_wc_curve25519_shared_secret_ex),
     TEST_DECL(test_wc_curve25519_make_pub),
     TEST_DECL(test_wc_curve25519_export_public_ex),
     TEST_DECL(test_wc_curve25519_export_private_raw_ex),
     TEST_DECL(test_wc_curve25519_import_private_raw_ex),
     TEST_DECL(test_wc_curve25519_import_private),
 
     TEST_DECL(test_wc_ed448_make_key),
     TEST_DECL(test_wc_ed448_init),
     TEST_DECL(test_wc_ed448_sign_msg),
     TEST_DECL(test_wc_ed448_import_public),
     TEST_DECL(test_wc_ed448_import_private_key),
     TEST_DECL(test_wc_ed448_export),
     TEST_DECL(test_wc_ed448_size),
     TEST_DECL(test_wc_ed448_exportKey),
     TEST_DECL(test_wc_Ed448PublicKeyToDer),
     TEST_DECL(test_wc_curve448_make_key),
     TEST_DECL(test_wc_curve448_shared_secret_ex),
     TEST_DECL(test_wc_curve448_export_public_ex),
     TEST_DECL(test_wc_curve448_export_private_raw_ex),
     TEST_DECL(test_wc_curve448_export_key_raw),
     TEST_DECL(test_wc_curve448_import_private_raw_ex),
     TEST_DECL(test_wc_curve448_import_private),
     TEST_DECL(test_wc_curve448_init),
     TEST_DECL(test_wc_curve448_size),
     TEST_DECL(test_wc_ecc_make_key),
     TEST_DECL(test_wc_ecc_init),
     TEST_DECL(test_wc_ecc_check_key),
     TEST_DECL(test_wc_ecc_get_generator),
     TEST_DECL(test_wc_ecc_size),
     TEST_DECL(test_wc_ecc_params),
     TEST_DECL(test_wc_ecc_signVerify_hash),
     TEST_DECL(test_wc_ecc_shared_secret),
     TEST_DECL(test_wc_ecc_export_x963),
     TEST_DECL(test_wc_ecc_export_x963_ex),
     TEST_DECL(test_wc_ecc_import_x963),
     TEST_DECL(ecc_import_private_key),
     TEST_DECL(test_wc_ecc_export_private_only),
     TEST_DECL(test_wc_ecc_rs_to_sig),
     TEST_DECL(test_wc_ecc_import_raw),
     TEST_DECL(test_wc_ecc_import_unsigned),
     TEST_DECL(test_wc_ecc_sig_size),
     TEST_DECL(test_wc_ecc_ctx_new),
     TEST_DECL(test_wc_ecc_ctx_reset),
     TEST_DECL(test_wc_ecc_ctx_set_peer_salt),
     TEST_DECL(test_wc_ecc_ctx_set_info),
     TEST_DECL(test_wc_ecc_encryptDecrypt),
     TEST_DECL(test_wc_ecc_del_point),
     TEST_DECL(test_wc_ecc_pointFns),
     TEST_DECL(test_wc_ecc_shared_secret_ssh),
     TEST_DECL(test_wc_ecc_verify_hash_ex),
     TEST_DECL(test_wc_ecc_mulmod),
     TEST_DECL(test_wc_ecc_is_valid_idx),
     TEST_DECL(test_wc_ecc_get_curve_id_from_oid),
     TEST_DECL(test_wc_ecc_sig_size_calc),
 
     TEST_DECL(test_ToTraditional),
     TEST_DECL(test_wc_EccPrivateKeyToDer),
     TEST_DECL(test_wc_DhPublicKeyDecode),
     TEST_DECL(test_wc_Ed25519KeyToDer),
     TEST_DECL(test_wc_Ed25519PrivateKeyToDer),
     TEST_DECL(test_wc_Ed448KeyToDer),
     TEST_DECL(test_wc_Ed448PrivateKeyToDer),
     TEST_DECL(test_wc_SetAuthKeyIdFromPublicKey_ex),
     TEST_DECL(test_wc_SetSubjectBuffer),
     TEST_DECL(test_wc_SetSubjectKeyIdFromPublicKey_ex),
 
     TEST_DECL(test_wc_PKCS7_New),
     TEST_DECL(test_wc_PKCS7_Init),
     TEST_DECL(test_wc_PKCS7_InitWithCert),
     TEST_DECL(test_wc_PKCS7_EncodeData),
     TEST_DECL(test_wc_PKCS7_EncodeSignedData),
     TEST_DECL(test_wc_PKCS7_EncodeSignedData_ex),
     TEST_DECL(test_wc_PKCS7_VerifySignedData),
     TEST_DECL(test_wc_PKCS7_EncodeDecodeEnvelopedData),
     TEST_DECL(test_wc_PKCS7_EncodeEncryptedData),
     TEST_DECL(test_wc_PKCS7_Degenerate),
     TEST_DECL(test_wc_PKCS7_BER),
     TEST_DECL(test_PKCS7_signed_enveloped),
     TEST_DECL(test_wc_PKCS7_NoDefaultSignedAttribs),
     TEST_DECL(test_wc_PKCS7_SetOriEncryptCtx),
     TEST_DECL(test_wc_PKCS7_SetOriDecryptCtx),
     TEST_DECL(test_wc_PKCS7_DecodeCompressedData),
     TEST_DECL(test_wc_i2d_PKCS12),
     TEST_DECL(test_wolfSSL_CTX_LoadCRL),
     TEST_DECL(test_openssl_FIPS_drbg),
     TEST_DECL(test_wc_CryptoCb),
     TEST_DECL(test_wolfSSL_CTX_StaticMemory),
     TEST_DECL(test_wolfSSL_FIPS_mode),
 #ifdef WOLFSSL_DTLS
     TEST_DECL(test_wolfSSL_DtlsUpdateWindow),
     TEST_DECL(test_wolfSSL_DTLS_fragment_buckets),
 #endif
 #if !defined(NO_FILESYSTEM) &&                                                 \
      defined(WOLFSSL_DTLS) && !defined(WOLFSSL_NO_TLS12) &&                    \
     !defined(NO_WOLFSSL_CLIENT) && !defined(NO_WOLFSSL_SERVER)
 #ifdef WOLFSSL_DTLS_NO_HVR_ON_RESUME
     TEST_DECL(test_wolfSSL_dtls_stateless_resume),
 #endif /* WOLFSSL_DTLS_NO_HVR_ON_RESUME */
 #ifdef HAVE_MAX_FRAGMENT
     TEST_DECL(test_wolfSSL_dtls_stateless_maxfrag),
 #endif /* HAVE_MAX_FRAGMENT */
     TEST_DECL(test_wolfSSL_dtls_stateless2),
 #if !defined(NO_OLD_TLS)
     TEST_DECL(test_wolfSSL_dtls_stateless_downgrade),
 #endif /* !defined(NO_OLD_TLS) */
 #endif /* defined(WOLFSSL_DTLS) && !defined(WOLFSSL_NO_TLS12) &&     \
         *  !defined(NO_WOLFSSL_CLIENT) && !defined(NO_WOLFSSL_SERVER) */
     TEST_DECL(test_wolfSSL_CTX_set_ciphersuites),
     TEST_DECL(test_wolfSSL_CRL_CERT_REVOKED_alert),
     TEST_DECL(test_WOLFSSL_dtls_version_alert),
     TEST_DECL(test_ForceZero),
 
     TEST_DECL(test_wolfSSL_Cleanup),
 #if defined(WOLFSSL_TICKET_NONCE_MALLOC) && defined(HAVE_SESSION_TICKET)       \
     && defined(WOLFSSL_TLS13) &&                                               \
     (!defined(HAVE_FIPS) || (defined(FIPS_VERSION_GE) && FIPS_VERSION_GE(5,3)))
     TEST_DECL(test_ticket_nonce_malloc),
 #endif
 #if !defined(NO_RSA) && !defined(NO_SHA) && !defined(NO_FILESYSTEM) && \
     !defined(NO_CERTS) && (!defined(NO_WOLFSSL_CLIENT) || \
                            !defined(WOLFSSL_NO_CLIENT_AUTH))
     TEST_DECL(test_various_pathlen_chains),
 #endif
     TEST_DECL(test_ticket_ret_create),
     /* If at some point a stub get implemented this test should fail indicating
      * a need to implement a new test case
      */
     TEST_DECL(test_stubs_are_stubs)
 };
 
 #define TEST_CASE_CNT (int)(sizeof(testCases) / sizeof(*testCases))
diff --git a/wolfcrypt/src/asn.c b/wolfcrypt/src/asn.c
index f046e4794..67c4bd2be 100644
--- a/wolfcrypt/src/asn.c
+++ b/wolfcrypt/src/asn.c
@@ -1013,79 +1013,99 @@ static int GetOID(const byte* input, word32* inOutIdx, word32* oid,
 /* Check an INTEGER's first byte - must be a positive number.
  *
  * @param [in] input    BER encoded data.
  * @param [in] idx      Index of BIT_STRING data.
  * @param [in] length   Length of input data.
  * @param [in] positive Indicates number must be positive.
  * @return  0 on success.
  * @return  ASN_PARSE_E when 0 is not required but seen.
  * @return  ASN_EXPECT_0_E when 0 is required and not seen.
  */
 static int GetASN_Integer(const byte* input, word32 idx, int length,
                           int positive)
 {
+#if !defined(HAVE_SELFTEST) && !defined(HAVE_FIPS) || \
+    (defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION > 2))
+    /* Check contents consist of one or more octets. */
+    if (length == 0) {
+    #ifdef WOLFSSL_DEBUG_ASN_TEMPLATE
+        WOLFSSL_MSG("Zero length INTEGER not allowed");
+    #endif
+        return ASN_PARSE_E;
+    }
+#endif
     if (input[idx] == 0) {
         /* Check leading zero byte required. */
         if ((length > 1) && ((input[idx + 1] & 0x80) == 0)) {
         #ifdef WOLFSSL_DEBUG_ASN_TEMPLATE
             WOLFSSL_MSG("Zero not required on INTEGER");
         #endif
             return ASN_PARSE_E;
         }
     }
     /* Check whether a leading zero byte was required. */
     else if (positive && (input[idx] & 0x80)) {
     #ifdef WOLFSSL_DEBUG_ASN_TEMPLATE
         WOLFSSL_MSG("INTEGER is negative");
     #endif
         return ASN_EXPECT_0_E;
     }
 
     return 0;
 }
 
 /* Check a BIT_STRING's first byte - unused bits.
  *
  * @param [in] input   BER encoded data.
  * @param [in] idx     Index of BIT_STRING data.
  * @param [in] length  Length of input data.
  * @return  0 on success.
  * @return  ASN_PARSE_E when unused bits is invalid.
  */
 static int GetASN_BitString(const byte* input, word32 idx, int length)
 {
+#if !defined(HAVE_SELFTEST) && !defined(HAVE_FIPS) || \
+    (defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION > 2))
+    /* Check contents consist of one or more octets. */
+    if (length == 0) {
+    #ifdef WOLFSSL_DEBUG_ASN_TEMPLATE
+        WOLFSSL_MSG("Zero length BIT STRING not allowed");
+    #endif
+        return ASN_PARSE_E;
+    }
+#endif
     /* Ensure unused bits value is valid range. */
     if (input[idx] > 7) {
     #ifdef WOLFSSL_DEBUG_ASN_TEMPLATE
         WOLFSSL_MSG_VSNPRINTF("BIT STRING unused bits too big: %d > 7",
                 input[idx]);
     #endif
         return ASN_PARSE_E;
     }
     /* Ensure unused bits are zero. */
     if ((byte)(input[idx + length - 1] << (8 - input[idx])) != 0) {
     #ifdef WOLFSSL_DEBUG_ASN_TEMPLATE
         WOLFSSL_MSG_VSNPRINTF("BIT STRING unused bits used: %d %02x",
                 input[idx], input[idx + length - 1]);
     #endif
         return ASN_PARSE_E;
     }
 
     return 0;
 }
 
 /* Get the ASN.1 items from the BER encoding.
  *
  * @param [in] asn         ASN.1 item expected.
  * @param [in] data        Data array to place found item into.
  * @param [in] input       BER encoded data.
  * @param [in] idx         Starting index of item data.
  * @param [in] len         Length of input buffer upto end of this item's data.
  * @param [in] zeroPadded  INTEGER was zero padded to make positive.
  * @return  0 on success.
  * @return  ASN_PARSE_E when BER encoded data is invalid.
  * @return  ASN_EXPECT_0_E when NULL tagged item has a non-zero length.
  * @return  MP_INIT_E when the unable to initialize an mp_int.
  * @return  ASN_GETINT_E when the unable to convert data to an mp_int.
  * @return  BAD_STATE_E when the data type is not supported.
  * @return  ASN_UNKNOWN_OID_E when the OID cannot be verified.
  */
@@ -2072,119 +2092,119 @@ int GetLength(const byte* input, word32* inOutIdx, int* len, word32 maxIdx)
 /* Decode the BER/DER length field and check the length is valid on request.
  *
  * BER/DER has Type-Length-Value triplets.
  * When requested will check that the Length decoded, indicating the number
  * of bytes in the Value, is available in the buffer after the Length bytes.
  *
  * Only supporting a length upto INT_MAX.
  *
  * @param [in]      input     BER encoded data.
  * @param [in, out] inOutIdx  On in, starting index of length.
  *                            On out, end of parsed length.
  * @param [out]     len       Length value decoded.
  * @param [in]      maxIdx    Maximum index of input data.
  * @param [in]      check     Whether to check the buffer has at least the
  *                            decoded length of bytes remaining.
  * @return  Length on success.
  * @return  ASN_PARSE_E if the encoding is invalid.
  * @return  BUFFER_E when not enough data to complete decode.
  */
 int GetLength_ex(const byte* input, word32* inOutIdx, int* len, word32 maxIdx,
                  int check)
 {
     int     length = 0;
     word32  idx = *inOutIdx;
     byte    b;
 
     /* Ensure zero return length on error. */
     *len = 0;
 
-    /* Check there is at least on byte available containing length information.
+    /* Check there is at least one byte available containing length information.
      */
     if ((idx + 1) > maxIdx) {
         WOLFSSL_MSG("GetLength - bad index on input");
         return BUFFER_E;
     }
 
     /* Get the first length byte. */
     b = input[idx++];
     /* Check if the first byte indicates the count of bytes. */
     if (b >= ASN_LONG_LENGTH) {
         /* Bottom 7 bits are the number of bytes to calculate length with.
          * Note: 0 indicates indefinite length encoding *not* 0 bytes of length.
          */
         word32 bytes = b & 0x7F;
         int minLen;
 
         /* Calculate minimum length to be encoded with bytes. */
-        if (b == 0x80) {
+        if (b == ASN_INDEF_LENGTH) {
             /* Indefinite length encoding - no length bytes. */
             minLen = 0;
         }
         else if (bytes == 1) {
             minLen = 0x80;
         }
         /* Only support up to the number of bytes that fit into return var. */
         else if (bytes > sizeof(length)) {
             WOLFSSL_MSG("GetLength - overlong data length spec");
             return ASN_PARSE_E;
         } else {
             minLen = 1 << ((bytes - 1) * 8);
         }
 
         /* Check the number of bytes required are available. */
         if ((idx + bytes) > maxIdx) {
             WOLFSSL_MSG("GetLength - bad long length");
             return BUFFER_E;
         }
 
         /* Big-endian encoding of number. */
         while (bytes--) {
             b = input[idx++];
             length = (length << 8) | b;
         }
         /* Negative value indicates we overflowed the signed int. */
         if (length < 0) {
             return ASN_PARSE_E;
         }
         /* Don't allow lengths that are longer than strictly required. */
         if (length < minLen) {
             return ASN_PARSE_E;
         }
     }
     else {
         /* Length in first byte. */
         length = b;
     }
 
-    /* When request, check the buffer has at least length bytes left. */
+    /* When requested, check the buffer has at least length bytes left. */
     if (check && ((idx + length) > maxIdx)) {
         WOLFSSL_MSG("GetLength - value exceeds buffer length");
         return BUFFER_E;
     }
 
     /* Return index after length encoding. */
     *inOutIdx = idx;
     /* Return length if valid. */
     if (length > 0) {
         *len = length;
     }
 
     /* Return length calculated or error code. */
     return length;
 }
 
 
 /* Gets the tag of next BER/DER encoded item.
  *
  * Checks there is enough data in the buffer for the tag byte.
  *
  * @param [in]      input     BER encoded data.
  * @param [in, out] inOutIdx  On in, starting index of tag.
  *                            On out, end of parsed tag.
  * @param [out]     tag       Tag value found.
  * @param [in]      maxIdx    Maximum index of input data.
  *
  * return  0 on success
  * return  BAD_FUNC_ARG when tag, inOutIdx or input is NULL.
  * return  BUFFER_E when not enough space in buffer for tag.
  */
