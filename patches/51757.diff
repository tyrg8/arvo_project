commit 9680b8ccb396d0a49b309b3d23787c092c2f6cd7
Author: cpq <valenok@gmail.com>
Date:   Thu Sep 29 16:53:11 2022 +0100

    Fix overflow in rx_icmp

diff --git a/Makefile b/Makefile
index 2eb5f160..67037e88 100644
--- a/Makefile
+++ b/Makefile
@@ -81,6 +81,10 @@ fuzz: mongoose.c mongoose.h Makefile test/fuzz.c
 	$(CXX) test/fuzz.c $(OPTS) $(WARN) $(INCS) $(TFLAGS) $(ASAN) -o fuzzer
 	$(RUN) ./fuzzer
 
+fuzz2: mongoose.c mongoose.h Makefile test/fuzz.c
+	$(CC) test/fuzz.c test/packed_fs.c -DMAIN $(CFLAGS) -o fuzzer
+	$(RUN) ./fuzzer /tmp/fuzzdata
+
 test: Makefile mongoose.h $(SRCS)
 	$(CC) $(SRCS) $(CFLAGS) $(LDFLAGS) -o unit_test
 	ASAN_OPTIONS=$(ASAN_OPTIONS) $(RUN) ./unit_test
diff --git a/mip/mip.c b/mip/mip.c
index c2b464f7..37723361 100644
--- a/mip/mip.c
+++ b/mip/mip.c
@@ -446,14 +446,14 @@ static void rx_arp(struct mip_if *ifp, struct pkt *pkt) {
 static void rx_icmp(struct mip_if *ifp, struct pkt *pkt) {
   // MG_DEBUG(("ICMP %d", (int) len));
   if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
     struct ip *ip = tx_ip(ifp, 1, ifp->ip, pkt->ip->src,
                           sizeof(struct icmp) + pkt->pay.len);
     struct icmp *icmp = (struct icmp *) (ip + 1);
     size_t len = PDIFF(ifp->tx.buf, icmp + 1), left = ifp->tx.len - len;
     if (left > pkt->pay.len) left = pkt->pay.len;  // Don't overflow TX
     memset(icmp, 0, sizeof(*icmp));                // Set csum to 0
     memcpy(icmp + 1, pkt->pay.buf, left);          // Copy RX payload to TX
-    icmp->csum = ipcsum(icmp, sizeof(*icmp) + pkt->pay.len);
+    icmp->csum = ipcsum(icmp, sizeof(*icmp) + left);
     ifp->driver->tx(ifp->tx.buf, len + left, ifp->driver_data);
   }
 }
diff --git a/mongoose.c b/mongoose.c
index fdd2f866..bd1292ac 100644
--- a/mongoose.c
+++ b/mongoose.c
@@ -90,23 +90,23 @@ int mg_base64_encode(const unsigned char *p, int n, char *to) {
 }
 
 int mg_base64_decode(const char *src, int n, char *dst) {
-  const char *end = src + n;
+  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
   int len = 0;
-  while (src + 3 < end) {
+  while (src != NULL && src + 3 < end) {
     int a = mg_b64rev(src[0]), b = mg_b64rev(src[1]), c = mg_b64rev(src[2]),
         d = mg_b64rev(src[3]);
     if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) return 0;
     dst[len++] = (char) ((a << 2) | (b >> 4));
     if (src[2] != '=') {
       dst[len++] = (char) ((b << 4) | (c >> 2));
       if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
     }
     src += 4;
   }
   dst[len] = '\0';
   return len;
 }
 
 #ifdef MG_ENABLE_LINES
 #line 1 "src/dns.c"
 #endif
@@ -1542,66 +1542,66 @@ static void mg_http_parse_headers(const char *s, const char *end,
 
 int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
   int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
-  const char *end = s + req_len, *qs;
+  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
   struct mg_str *cl;
 
   memset(hm, 0, sizeof(*hm));
   if (req_len <= 0) return req_len;
 
   hm->message.ptr = hm->head.ptr = s;
   hm->body.ptr = end;
   hm->head.len = (size_t) req_len;
   hm->chunk.ptr = end;
   hm->message.len = hm->body.len = (size_t) ~0;  // Set body length to infinite
 
   // Parse request line
   s = skip(s, end, " ", &hm->method);
   s = skip(s, end, " ", &hm->uri);
   s = skip(s, end, "\r\n", &hm->proto);
 
   // Sanity check. Allow protocol/reason to be empty
   if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 
   // If URI contains '?' character, setup query string
   if ((qs = (const char *) memchr(hm->uri.ptr, '?', hm->uri.len)) != NULL) {
     hm->query.ptr = qs + 1;
     hm->query.len = (size_t) (&hm->uri.ptr[hm->uri.len] - (qs + 1));
     hm->uri.len = (size_t) (qs - hm->uri.ptr);
   }
 
   mg_http_parse_headers(s, end, hm->headers,
                         sizeof(hm->headers) / sizeof(hm->headers[0]));
   if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
     hm->body.len = (size_t) mg_to64(*cl);
     hm->message.len = (size_t) req_len + hm->body.len;
   }
 
   // mg_http_parse() is used to parse both HTTP requests and HTTP
   // responses. If HTTP response does not have Content-Length set, then
   // body is read until socket is closed, i.e. body.len is infinite (~0).
   //
   // For HTTP requests though, according to
   // http://tools.ietf.org/html/rfc7231#section-8.1.3,
   // only POST and PUT methods have defined body semantics.
   // Therefore, if Content-Length is not specified and methods are
   // not one of PUT or POST, set body length to 0.
   //
   // So, if it is HTTP request, and Content-Length is not set,
   // and method is not (PUT or POST) then reset body length to zero.
   is_response = mg_ncasecmp(hm->method.ptr, "HTTP/", 5) == 0;
   if (hm->body.len == (size_t) ~0 && !is_response &&
       mg_vcasecmp(&hm->method, "PUT") != 0 &&
       mg_vcasecmp(&hm->method, "POST") != 0) {
     hm->body.len = 0;
     hm->message.len = (size_t) req_len;
   }
 
   // The 204 (No content) responses also have 0 body length
   if (hm->body.len == (size_t) ~0 && is_response &&
       mg_vcasecmp(&hm->uri, "204") == 0) {
     hm->body.len = 0;
     hm->message.len = (size_t) req_len;
   }
 
   return req_len;
 }
@@ -1882,42 +1882,42 @@ struct printdirentrydata {
 static void printdirentry(const char *name, void *userdata) {
   struct printdirentrydata *d = (struct printdirentrydata *) userdata;
   struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
   size_t size = 0;
   time_t t = 0;
   char path[MG_PATH_MAX], sz[40], mod[40];
   int flags, n = 0;
 
   // MG_DEBUG(("[%s] [%s]", d->dir, name));
   if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
       sizeof(path)) {
     MG_ERROR(("%s truncated", name));
   } else if ((flags = fs->st(path, &size, &t)) == 0) {
     MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
   } else {
     const char *slash = flags & MG_FS_DIR ? "/" : "";
     if (flags & MG_FS_DIR) {
       mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
     } else {
       mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
     }
 #if defined(MG_HTTP_DIRLIST_TIME)
     char time_str[30];
-    struct tm * time_info = localtime(&t);
+    struct tm *time_info = localtime(&t);
     strftime(time_str, sizeof time_str, "%Y/%m/%d %H:%M:%S", time_info);
     mg_snprintf(mod, sizeof(mod), "%s", time_str);
 #elif defined(MG_HTTP_DIRLIST_TIME_UTC)
     char time_str[30];
-    struct tm * time_info = gmtime(&t);
+    struct tm *time_info = gmtime(&t);
     strftime(time_str, sizeof time_str, "%Y/%m/%d %H:%M:%S", time_info);
     mg_snprintf(mod, sizeof(mod), "%s", time_str);
 #else
     mg_snprintf(mod, sizeof(mod), "%ld", (unsigned long) t);
 #endif
     n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
     mg_printf(d->c,
               "  <tr><td><a href=\"%.*s%s\">%s%s</a></td>"
               "<td name=%lu>%s</td><td name=%lld>%s</td></tr>\n",
               n, path, slash, name, slash, (unsigned long) t, mod,
               flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
   }
 }
@@ -6711,14 +6711,14 @@ static void rx_arp(struct mip_if *ifp, struct pkt *pkt) {
 static void rx_icmp(struct mip_if *ifp, struct pkt *pkt) {
   // MG_DEBUG(("ICMP %d", (int) len));
   if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
     struct ip *ip = tx_ip(ifp, 1, ifp->ip, pkt->ip->src,
                           sizeof(struct icmp) + pkt->pay.len);
     struct icmp *icmp = (struct icmp *) (ip + 1);
     size_t len = PDIFF(ifp->tx.buf, icmp + 1), left = ifp->tx.len - len;
-    if (left > pkt->pay.len) left = pkt->pay.len;
-    memset(icmp, 0, sizeof(*icmp));  // Important - set csum to 0
-    memcpy(icmp + 1, pkt->pay.buf, left);
-    icmp->csum = ipcsum(icmp, sizeof(*icmp) + pkt->pay.len);
+    if (left > pkt->pay.len) left = pkt->pay.len;  // Don't overflow TX
+    memset(icmp, 0, sizeof(*icmp));                // Set csum to 0
+    memcpy(icmp + 1, pkt->pay.buf, left);          // Copy RX payload to TX
+    icmp->csum = ipcsum(icmp, sizeof(*icmp) + left);
     ifp->driver->tx(ifp->tx.buf, len + left, ifp->driver_data);
   }
 }
diff --git a/src/base64.c b/src/base64.c
index 1f8a74c8..d7526e1b 100644
--- a/src/base64.c
+++ b/src/base64.c
@@ -1,5 +1,5 @@
-#include "base64.h"
 #include "arch.h"
+#include "base64.h"
 
 static int mg_b64idx(int c) {
   if (c < 26) {
@@ -66,19 +66,19 @@ int mg_base64_encode(const unsigned char *p, int n, char *to) {
 }
 
 int mg_base64_decode(const char *src, int n, char *dst) {
-  const char *end = src + n;
+  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
   int len = 0;
-  while (src + 3 < end) {
+  while (src != NULL && src + 3 < end) {
     int a = mg_b64rev(src[0]), b = mg_b64rev(src[1]), c = mg_b64rev(src[2]),
         d = mg_b64rev(src[3]);
     if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) return 0;
     dst[len++] = (char) ((a << 2) | (b >> 4));
     if (src[2] != '=') {
       dst[len++] = (char) ((b << 4) | (c >> 2));
       if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
     }
     src += 4;
   }
   dst[len] = '\0';
   return len;
 }
diff --git a/src/http.c b/src/http.c
index fb046e1f..d6857441 100644
--- a/src/http.c
+++ b/src/http.c
@@ -1,26 +1,26 @@
-#include "http.h"
 #include "arch.h"
 #include "base64.h"
 #include "fmt.h"
+#include "http.h"
 #include "log.h"
 #include "net.h"
 #include "ssi.h"
 #include "util.h"
 #include "version.h"
 #include "ws.h"
 
 // Chunk deletion marker is the MSB in the "processed" counter
 #define MG_DMARK ((size_t) 1 << (sizeof(size_t) * 8 - 1))
 
 // Multipart POST example:
 // --xyz
 // Content-Disposition: form-data; name="val"
 //
 // abcdef
 // --xyz
 // Content-Disposition: form-data; name="foo"; filename="a.txt"
 // Content-Type: text/plain
 //
 // hello world
 //
 // --xyz--
@@ -202,66 +202,66 @@ static void mg_http_parse_headers(const char *s, const char *end,
 
 int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
   int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
-  const char *end = s + req_len, *qs;
+  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
   struct mg_str *cl;
 
   memset(hm, 0, sizeof(*hm));
   if (req_len <= 0) return req_len;
 
   hm->message.ptr = hm->head.ptr = s;
   hm->body.ptr = end;
   hm->head.len = (size_t) req_len;
   hm->chunk.ptr = end;
   hm->message.len = hm->body.len = (size_t) ~0;  // Set body length to infinite
 
   // Parse request line
   s = skip(s, end, " ", &hm->method);
   s = skip(s, end, " ", &hm->uri);
   s = skip(s, end, "\r\n", &hm->proto);
 
   // Sanity check. Allow protocol/reason to be empty
   if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 
   // If URI contains '?' character, setup query string
   if ((qs = (const char *) memchr(hm->uri.ptr, '?', hm->uri.len)) != NULL) {
     hm->query.ptr = qs + 1;
     hm->query.len = (size_t) (&hm->uri.ptr[hm->uri.len] - (qs + 1));
     hm->uri.len = (size_t) (qs - hm->uri.ptr);
   }
 
   mg_http_parse_headers(s, end, hm->headers,
                         sizeof(hm->headers) / sizeof(hm->headers[0]));
   if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
     hm->body.len = (size_t) mg_to64(*cl);
     hm->message.len = (size_t) req_len + hm->body.len;
   }
 
   // mg_http_parse() is used to parse both HTTP requests and HTTP
   // responses. If HTTP response does not have Content-Length set, then
   // body is read until socket is closed, i.e. body.len is infinite (~0).
   //
   // For HTTP requests though, according to
   // http://tools.ietf.org/html/rfc7231#section-8.1.3,
   // only POST and PUT methods have defined body semantics.
   // Therefore, if Content-Length is not specified and methods are
   // not one of PUT or POST, set body length to 0.
   //
   // So, if it is HTTP request, and Content-Length is not set,
   // and method is not (PUT or POST) then reset body length to zero.
   is_response = mg_ncasecmp(hm->method.ptr, "HTTP/", 5) == 0;
   if (hm->body.len == (size_t) ~0 && !is_response &&
       mg_vcasecmp(&hm->method, "PUT") != 0 &&
       mg_vcasecmp(&hm->method, "POST") != 0) {
     hm->body.len = 0;
     hm->message.len = (size_t) req_len;
   }
 
   // The 204 (No content) responses also have 0 body length
   if (hm->body.len == (size_t) ~0 && is_response &&
       mg_vcasecmp(&hm->uri, "204") == 0) {
     hm->body.len = 0;
     hm->message.len = (size_t) req_len;
   }
 
   return req_len;
 }
@@ -542,42 +542,42 @@ struct printdirentrydata {
 static void printdirentry(const char *name, void *userdata) {
   struct printdirentrydata *d = (struct printdirentrydata *) userdata;
   struct mg_fs *fs = d->opts->fs == NULL ? &mg_fs_posix : d->opts->fs;
   size_t size = 0;
   time_t t = 0;
   char path[MG_PATH_MAX], sz[40], mod[40];
   int flags, n = 0;
 
   // MG_DEBUG(("[%s] [%s]", d->dir, name));
   if (mg_snprintf(path, sizeof(path), "%s%c%s", d->dir, '/', name) >
       sizeof(path)) {
     MG_ERROR(("%s truncated", name));
   } else if ((flags = fs->st(path, &size, &t)) == 0) {
     MG_ERROR(("%lu stat(%s): %d", d->c->id, path, errno));
   } else {
     const char *slash = flags & MG_FS_DIR ? "/" : "";
     if (flags & MG_FS_DIR) {
       mg_snprintf(sz, sizeof(sz), "%s", "[DIR]");
     } else {
       mg_snprintf(sz, sizeof(sz), "%lld", (uint64_t) size);
     }
 #if defined(MG_HTTP_DIRLIST_TIME)
     char time_str[30];
-    struct tm * time_info = localtime(&t);
+    struct tm *time_info = localtime(&t);
     strftime(time_str, sizeof time_str, "%Y/%m/%d %H:%M:%S", time_info);
     mg_snprintf(mod, sizeof(mod), "%s", time_str);
 #elif defined(MG_HTTP_DIRLIST_TIME_UTC)
     char time_str[30];
-    struct tm * time_info = gmtime(&t);
+    struct tm *time_info = gmtime(&t);
     strftime(time_str, sizeof time_str, "%Y/%m/%d %H:%M:%S", time_info);
     mg_snprintf(mod, sizeof(mod), "%s", time_str);
 #else
     mg_snprintf(mod, sizeof(mod), "%ld", (unsigned long) t);
 #endif
     n = (int) mg_url_encode(name, strlen(name), path, sizeof(path));
     mg_printf(d->c,
               "  <tr><td><a href=\"%.*s%s\">%s%s</a></td>"
               "<td name=%lu>%s</td><td name=%lld>%s</td></tr>\n",
               n, path, slash, name, slash, (unsigned long) t, mod,
               flags & MG_FS_DIR ? (int64_t) -1 : (int64_t) size, sz);
   }
 }
diff --git a/test/fuzz.c b/test/fuzz.c
index 920d9220..212c413d 100644
--- a/test/fuzz.c
+++ b/test/fuzz.c
@@ -16,72 +16,84 @@ int LLVMFuzzerTestOneInput(const uint8_t *, size_t);
 int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
   mg_log_set(MG_LL_NONE);
 
   struct mg_dns_message dm;
   mg_dns_parse(data, size, &dm);
   mg_dns_parse(NULL, 0, &dm);
 
   struct mg_http_message hm;
   mg_http_parse((const char *) data, size, &hm);
   mg_http_parse(NULL, 0, &hm);
 
   struct mg_str body = mg_str_n((const char *) data, size);
   char tmp[256];
   mg_http_get_var(&body, "key", tmp, sizeof(tmp));
   mg_http_get_var(&body, "key", NULL, 0);
   mg_url_decode((char *) data, size, tmp, sizeof(tmp), 1);
   mg_url_decode((char *) data, size, tmp, 1, 1);
   mg_url_decode(NULL, 0, tmp, 1, 1);
 
   struct mg_mqtt_message mm;
   mg_mqtt_parse(data, size, 0, &mm);
   mg_mqtt_parse(NULL, 0, 0, &mm);
   mg_mqtt_parse(data, size, 5, &mm);
   mg_mqtt_parse(NULL, 0, 5, &mm);
 
   mg_sntp_parse(data, size);
   mg_sntp_parse(NULL, 0);
 
   char buf[size * 4 / 3 + 5];  // At least 4 chars and nul termination
   mg_base64_decode((char *) data, (int) size, buf);
   mg_base64_decode(NULL, 0, buf);
   mg_base64_encode(data, (int) size, buf);
   mg_base64_encode(NULL, 0, buf);
 
   mg_globmatch((char *) data, size, (char *) data, size);
 
   struct mg_str k, v, s = mg_str_n((char *) data, size);
   while (mg_commalist(&s, &k, &v)) k.len = v.len = 0;
 
   int n;
   mg_json_get(mg_str_n((char *) data, size), "$", &n);
   mg_json_get(mg_str_n((char *) data, size), "$.a.b", &n);
   mg_json_get(mg_str_n((char *) data, size), "$[0]", &n);
 
   if (size > 0) {
-    struct mip_cfg cfg = {};
+    struct mip_cfg cfg = {0};
     size_t pktlen = 1540;
     char t[sizeof(struct mip_if) + pktlen * 2 + 0 /* qlen */];
     struct mip_if *ifp = (struct mip_if *) t;
     struct mg_mgr mgr;
     mg_mgr_init(&mgr);
     if_init(ifp, &mgr, &cfg, &mip_driver_mock, NULL, pktlen, 0);
 
     // Make a copy of the random data, in order to modify it
     uint8_t pkt[size];
     struct eth *eth = (struct eth *) pkt;
     memcpy(pkt, data, size);
     if (size > sizeof(*eth)) {
       static size_t i;
       uint16_t eth_types[] = {0x800, 0x800, 0x806, 0x86dd};
       memcpy(eth->dst, ifp->mac, 6);  // Set valid destination MAC
       eth->type = mg_htons(eth_types[i++]);
       if (i >= sizeof(eth_types) / sizeof(eth_types[0])) i = 0;
     }
 
     mip_rx(ifp, (void *) pkt, size);
     mgr.priv = NULL;  // Don't let Mongoose free() ifp
     mg_mgr_free(&mgr);
   }
 
   return 0;
 }
+
+#if defined(MAIN)
+int main(int argc, char *argv[]) {
+  if (argc > 1) {
+    size_t len = 0;
+    char *buf = mg_file_read(&mg_fs_posix, argv[1], &len);
+    if (buf != NULL) LLVMFuzzerTestOneInput((uint8_t *) buf, len);
+    free(buf);
+  }
+  return 0;
+}
+#endif
