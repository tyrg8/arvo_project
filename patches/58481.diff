commit 183b22ac320c5e59f1d14b0fda395cecad38b932
Author: Martijn van Beurden <mvanb1@gmail.com>
Date:   Sun May 7 21:21:23 2023 +0200

    When outputting partial frame, emulate verbatim frame
    
    After seeking, a partial frame is passed to the write callback.
    The FLAC__Frame passed there only has its blocksize and sample
    number changed to accomodate. This results in several 'rules'
    being violated. For example, the predictor order can be larger
    than the blocksize. This caused integer underflow in the analysis
    output of the flac command line program, causing heap overflow.
    Also, the output analysis data is junk, because the residual and
    rice parameters are not changed accordingly, as this would
    violate other things that are otherwise given, like the number
    of rice partitions being a power of 2.
    
    To remedy this, a FLAC__Frame is now output stating that all
    subframes are of the verbatim type, which has no restrictions
    like fixed and lpc subframes have.
    
    A better remedy will have to wait to the next API change, to
    introduce a few new subframe types for this case and the case
    of conveying an unreadable frame.
    
    Credit: Oss-Fuzz
    Issue: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=58481

diff --git a/src/libFLAC/stream_decoder.c b/src/libFLAC/stream_decoder.c
index 104d0d5d..400aef14 100644
--- a/src/libFLAC/stream_decoder.c
+++ b/src/libFLAC/stream_decoder.c
@@ -3208,52 +3208,56 @@ FLAC__OggDecoderAspectReadStatus read_callback_proxy_(const void *void_decoder,
 FLAC__StreamDecoderWriteStatus write_audio_frame_to_client_(FLAC__StreamDecoder *decoder, const FLAC__Frame *frame, const FLAC__int32 * const buffer[])
 {
 	decoder->private_->last_frame = *frame; /* save the frame */
 	decoder->private_->last_frame_is_set = true;
 	if(decoder->private_->is_seeking) {
 		FLAC__uint64 this_frame_sample = frame->header.number.sample_number;
 		FLAC__uint64 next_frame_sample = this_frame_sample + (FLAC__uint64)frame->header.blocksize;
 		FLAC__uint64 target_sample = decoder->private_->target_sample;
 
 		FLAC__ASSERT(frame->header.number_type == FLAC__FRAME_NUMBER_TYPE_SAMPLE_NUMBER);
 
 #if FLAC__HAS_OGG
 		decoder->private_->got_a_frame = true;
 #endif
 		if(this_frame_sample <= target_sample && target_sample < next_frame_sample) { /* we hit our target frame */
 			uint32_t delta = (uint32_t)(target_sample - this_frame_sample);
 			/* kick out of seek mode */
 			decoder->private_->is_seeking = false;
 			/* shift out the samples before target_sample */
 			if(delta > 0) {
 				uint32_t channel;
 				const FLAC__int32 *newbuffer[FLAC__MAX_CHANNELS];
-				for(channel = 0; channel < frame->header.channels; channel++)
+				for(channel = 0; channel < frame->header.channels; channel++) {
 					newbuffer[channel] = buffer[channel] + delta;
+					decoder->private_->last_frame.subframes[channel].type = FLAC__SUBFRAME_TYPE_VERBATIM;
+					decoder->private_->last_frame.subframes[channel].data.verbatim.data_type = FLAC__VERBATIM_SUBFRAME_DATA_TYPE_INT32;
+					decoder->private_->last_frame.subframes[channel].data.verbatim.data.int32 = newbuffer[channel];
+				}
 				decoder->private_->last_frame.header.blocksize -= delta;
 				decoder->private_->last_frame.header.number.sample_number += (FLAC__uint64)delta;
 				/* write the relevant samples */
 				return decoder->private_->write_callback(decoder, &decoder->private_->last_frame, newbuffer, decoder->private_->client_data);
 			}
 			else {
 				/* write the relevant samples */
 				return decoder->private_->write_callback(decoder, frame, buffer, decoder->private_->client_data);
 			}
 		}
 		else {
 			return FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE;
 		}
 	}
 	else {
 		/*
 		 * If we never got STREAMINFO, turn off MD5 checking to save
 		 * cycles since we don't have a sum to compare to anyway
 		 */
 		if(!decoder->private_->has_stream_info)
 			decoder->private_->do_md5_checking = false;
 		if(decoder->private_->do_md5_checking) {
 			if(!FLAC__MD5Accumulate(&decoder->private_->md5context, buffer, frame->header.channels, frame->header.blocksize, (frame->header.bits_per_sample+7) / 8))
 				return FLAC__STREAM_DECODER_WRITE_STATUS_ABORT;
 		}
 		return decoder->private_->write_callback(decoder, frame, buffer, decoder->private_->client_data);
 	}
 }
