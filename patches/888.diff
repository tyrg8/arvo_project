commit 60aac84fc83ca6d527d06cf4ce031d7ef5ffee48
Author: Caolán McNamara <caolanm@redhat.com>
Date:   Thu Mar 16 21:22:36 2017 +0000

    ofz#888: use after free
    
    Change-Id: I6d3f9108b02149165b020fc9c6677880456a1ef4
    Reviewed-on: https://gerrit.libreoffice.org/35298
    Tested-by: Jenkins <ci@libreoffice.org>
    Reviewed-by: Caolán McNamara <caolanm@redhat.com>
    Tested-by: Caolán McNamara <caolanm@redhat.com>

diff --git a/filter/source/msfilter/svdfppt.cxx b/filter/source/msfilter/svdfppt.cxx
index dfd8148bf699..92d9025f75f9 100644
--- a/filter/source/msfilter/svdfppt.cxx
+++ b/filter/source/msfilter/svdfppt.cxx
@@ -2737,214 +2737,225 @@ void ImportComment10( SvxMSDffManager& rMan, SvStream& rStCtrl, SdrPage* pPage,
 // be sure not to import masterpages with this method
 void SdrPowerPointImport::ImportPage( SdrPage* pRet, const PptSlidePersistEntry* pMasterPersist )
 {
     sal_uInt32 nMerk = rStCtrl.Tell();
     PptSlidePersistList* pList = GetPageList( eAktPageKind );
     if ( ( !pList ) || ( pList->size() <= nAktPageNum ) )
         return;
     PptSlidePersistEntry& rSlidePersist = (*pList)[ nAktPageNum ];
     if ( rSlidePersist.bStarDrawFiller )
         return;
 
     DffRecordHeader aPageHd;
     if ( SeekToAktPage( &aPageHd ) )
     {
         rSlidePersist.pHeaderFooterEntry = new HeaderFooterEntry( pMasterPersist );
         ProcessData aProcessData( rSlidePersist, SdPageCapsule(pRet) );
         auto nEndRecPos = SanitizeEndPos(rStCtrl, aPageHd.GetRecEndFilePos());
         while ( ( rStCtrl.GetError() == 0 ) && ( rStCtrl.Tell() < nEndRecPos ) )
         {
             DffRecordHeader aHd;
             ReadDffRecordHeader( rStCtrl, aHd );
             switch ( aHd.nRecType )
             {
                 case PPT_PST_HeadersFooters :
                 {
                     ImportHeaderFooterContainer( aHd, *rSlidePersist.pHeaderFooterEntry );
                 }
                 break;
 
                 case PPT_PST_ProgTags :
                 {
                     DffRecordHeader aContentDataHd;
                     if ( SeekToContentOfProgTag( 10, rStCtrl, aHd, aContentDataHd ) )
                     {
                         DffRecordHeader aComment10Hd;
                         while( ( rStCtrl.GetError() == 0 ) && SeekToRec( rStCtrl, PPT_PST_Comment10, aContentDataHd.GetRecEndFilePos(), &aComment10Hd ) )
                         {
                             ImportComment10( *this, rStCtrl, pRet, aComment10Hd );
                             if (!aComment10Hd.SeekToEndOfRecord(rStCtrl))
                                 break;
                         }
                     }
                 }
                 break;
 
                 case PPT_PST_PPDrawing :
                 {
                     DffRecordHeader aPPDrawHd;
                     if ( SeekToRec( rStCtrl, DFF_msofbtDgContainer, aHd.GetRecEndFilePos(), &aPPDrawHd ) )
                     {
                         sal_uInt32 nPPDrawOfs = rStCtrl.Tell();
 
                         // importing the background object before importing the page
                         auto nPPEndRecPos = SanitizeEndPos(rStCtrl, aPPDrawHd.GetRecEndFilePos());
                         while ( ( rStCtrl.GetError() == 0 ) && ( rStCtrl.Tell() < nPPEndRecPos ) )
                         {
                             DffRecordHeader aEscherObjListHd;
                             ReadDffRecordHeader( rStCtrl, aEscherObjListHd );
                             switch ( aEscherObjListHd.nRecType )
                             {
                                 case DFF_msofbtSpContainer :
                                 {
                                     tools::Rectangle aPageSize( Point(), pRet->GetSize() );
                                     if ( rSlidePersist.aSlideAtom.nFlags & 4 )          // follow master background?
                                     {
                                         if ( HasMasterPage( nAktPageNum, eAktPageKind ) )
                                         {
                                             sal_uInt16 nMasterNum = GetMasterPageIndex( nAktPageNum, eAktPageKind );
                                             PptSlidePersistList* pPageList = GetPageList( PPT_MASTERPAGE );
                                             PptSlidePersistEntry* pE = &(*pPageList)[ nMasterNum ];
                                             while( ( pE->aSlideAtom.nFlags & 4 ) && pE->aSlideAtom.nMasterId )
                                             {
                                                 auto nOrigMasterId = pE->aSlideAtom.nMasterId;
                                                 sal_uInt16 nNextMaster = m_pMasterPages->FindPage(nOrigMasterId);
                                                 if ( nNextMaster == PPTSLIDEPERSIST_ENTRY_NOTFOUND )
                                                     break;
                                                 else
                                                     pE = &(*pPageList)[ nNextMaster ];
                                                 if (pE->aSlideAtom.nMasterId == nOrigMasterId)
                                                 {
                                                     SAL_WARN("filter.ms", "loop in atom chain");
                                                     break;
                                                 }
                                             }
                                             if ( pE->nBackgroundOffset )
                                             {
                                                 // do not follow master colorscheme?
                                                 bool bTemporary = ( rSlidePersist.aSlideAtom.nFlags & 2 ) != 0;
                                                 sal_uInt32 nPos = rStCtrl.Tell();
                                                 rStCtrl.Seek( pE->nBackgroundOffset );
                                                 rSlidePersist.pBObj = ImportObj( rStCtrl, static_cast<void*>(&aProcessData), aPageSize, aPageSize );
                                                 rSlidePersist.bBObjIsTemporary = bTemporary;
                                                 rStCtrl.Seek( nPos );
                                             }
                                         }
                                     }
                                     else
                                     {
                                         DffRecordHeader aShapeHd;
                                         ReadDffRecordHeader( rStCtrl, aShapeHd );
                                         if ( aShapeHd.nRecType == DFF_msofbtSp )
                                         {
                                             sal_uInt32 nSpFlags;
                                             rStCtrl.ReadUInt32( nSpFlags ).ReadUInt32( nSpFlags );
                                             if ( nSpFlags & SP_FBACKGROUND )
                                             {
                                                 aEscherObjListHd.SeekToBegOfRecord( rStCtrl );
                                                 rSlidePersist.pBObj = ImportObj( rStCtrl, static_cast<void*>(&aProcessData), aPageSize, aPageSize );
                                                 rSlidePersist.bBObjIsTemporary = false;
                                             }
                                         }
                                     }
                                 }
                                 break;
                             }
                             if ( aEscherObjListHd.nRecType == DFF_msofbtSpContainer )
                                 break;
                             if (!aEscherObjListHd.SeekToEndOfRecord(rStCtrl))
                                 break;
                         }
 
                         // now importing page
                         rStCtrl.Seek( nPPDrawOfs );
                         auto nHdEndRecPos = SanitizeEndPos(rStCtrl, aPPDrawHd.GetRecEndFilePos());
                         while ( ( rStCtrl.GetError() == 0 ) && ( rStCtrl.Tell() < nHdEndRecPos ) )
                         {
                             DffRecordHeader aEscherObjListHd;
                             ReadDffRecordHeader( rStCtrl, aEscherObjListHd );
                             switch ( aEscherObjListHd.nRecType )
                             {
                                 case DFF_msofbtSpgrContainer :
                                 {
                                     DffRecordHeader aShapeHd;
                                     if ( SeekToRec( rStCtrl, DFF_msofbtSpContainer, aEscherObjListHd.GetRecEndFilePos(), &aShapeHd ) )
                                     {
                                         aShapeHd.SeekToEndOfRecord( rStCtrl );
                                         auto nListEndRecPos = SanitizeEndPos(rStCtrl, aEscherObjListHd.GetRecEndFilePos());
                                         while ( ( rStCtrl.GetError() == 0 ) && ( rStCtrl.Tell() < nListEndRecPos ) )
                                         {
                                             ReadDffRecordHeader( rStCtrl, aShapeHd );
                                             if ( ( aShapeHd.nRecType == DFF_msofbtSpContainer ) || ( aShapeHd.nRecType == DFF_msofbtSpgrContainer ) )
                                             {
                                                 tools::Rectangle aEmpty;
                                                 aShapeHd.SeekToBegOfRecord( rStCtrl );
                                                 sal_Int32 nShapeId;
                                                 aProcessData.pTableRowProperties.reset();
                                                 SdrObject* pObj = ImportObj( rStCtrl, static_cast<void*>(&aProcessData), aEmpty, aEmpty, 0, &nShapeId );
                                                 if ( pObj )
                                                 {
                                                     if ( aProcessData.pTableRowProperties )
                                                         pObj = CreateTable( pObj, aProcessData.pTableRowProperties.get(), aProcessData.rPersistEntry.pSolverContainer );
 
                                                     pRet->NbcInsertObject( pObj );
 
                                                     if( nShapeId )
                                                         insertShapeId( nShapeId, pObj );
                                                 }
                                             }
                                             bool bSuccess = aShapeHd.SeekToEndOfRecord(rStCtrl);
                                             if (!bSuccess)
                                                 break;
                                         }
                                     }
                                 }
                                 break;
                             }
                             if ( aEscherObjListHd.nRecType == DFF_msofbtSpgrContainer )
                                 break;
                             if (!aEscherObjListHd.SeekToEndOfRecord(rStCtrl))
                                 break;
                         }
 
                         // Handle shapes where the fill matches the background
                         // fill (mso_fillBackground).
                         if (rSlidePersist.ePageKind == PPT_SLIDEPAGE)
                         {
                             if (!aProcessData.aBackgroundColoredObjects.empty())
                             {
                                 if (!rSlidePersist.pBObj)
                                 {
                                     for (auto pObject : aProcessData.aBackgroundColoredObjects)
                                     {
                                         // The shape wants a background, but the slide doesn't have
                                         // one: default to white.
                                         SfxItemSet aNewSet(*pObject->GetMergedItemSet().GetPool());
                                         aNewSet.Put(XFillStyleItem(css::drawing::FillStyle_SOLID));
                                         aNewSet.Put(XFillColorItem(OUString(), Color(COL_WHITE)));
                                         pObject->SetMergedItemSet(aNewSet);
                                     }
                                 }
                             }
                         }
 
                         if ( rSlidePersist.pBObj )
                         {
                             // #i99386# transfer the attributes from the temporary BackgroundObject
                             // to the Page and delete it. Maybe rSlidePersist.bBObjIsTemporary is
                             // obsolete here, too.
                             pRet->getSdrPageProperties().ClearItem();
                             pRet->getSdrPageProperties().PutItemSet(rSlidePersist.pBObj->GetMergedItemSet());
-                            SdrObject::Free( rSlidePersist.pBObj );
+                            if (rSlidePersist.pSolverContainer)
+                            {
+                                for (SvxMSDffConnectorRule* pPtr : rSlidePersist.pSolverContainer->aCList)
+                                {
+                                    // check connections to the group object
+                                    if (pPtr->pAObj == rSlidePersist.pBObj)
+                                        pPtr->pAObj = nullptr;
+                                    if (pPtr->pBObj == rSlidePersist.pBObj)
+                                        pPtr->pBObj = nullptr;
+                                }
+                            }
+                            SdrObject::Free(rSlidePersist.pBObj);
                         }
                     }
                 }
                 break;
             }
             if (!aHd.SeekToEndOfRecord(rStCtrl))
                 break;
         }
         if ( rSlidePersist.pSolverContainer )
             SolveSolver( *rSlidePersist.pSolverContainer );
     }
     rStCtrl.Seek( nMerk );
 }
