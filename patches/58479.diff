commit df9c5cdb9f69e88354a78ca1a4667508c1a2a275
Merge: aa5b41446 79dcc289d
Author: Kim Kulling <kimkulling@users.noreply.github.com>
Date:   Wed Aug 9 21:17:15 2023 +0200

    Merge pull request #5191 from sashashura/823345681268736
    
    Fix UNKNOWN READ in Assimp::MDLImporter::InternReadFile_Quake1

diff --git a/code/AssetLib/MDL/MDLLoader.cpp b/code/AssetLib/MDL/MDLLoader.cpp
index 098b53e76..7b2ec7115 100644
--- a/code/AssetLib/MDL/MDLLoader.cpp
+++ b/code/AssetLib/MDL/MDLLoader.cpp
@@ -153,158 +153,164 @@ const aiImporterDesc *MDLImporter::GetInfo() const {
 // ------------------------------------------------------------------------------------------------
 // Imports the given file into the given scene structure.
 void MDLImporter::InternReadFile(const std::string &pFile,
         aiScene *_pScene, IOSystem *pIOHandler) {
     pScene = _pScene;
     mIOHandler = pIOHandler;
     std::unique_ptr<IOStream> file(pIOHandler->Open(pFile));
 
     // Check whether we can read from the file
     if (file == nullptr) {
         throw DeadlyImportError("Failed to open MDL file ", pFile, ".");
     }
 
     // This should work for all other types of MDL files, too ...
     // the HL1 sequence group header is one of the smallest, afaik
     iFileSize = (unsigned int)file->FileSize();
     if (iFileSize < sizeof(MDL::HalfLife::SequenceHeader_HL1)) {
         throw DeadlyImportError("MDL File is too small.");
     }
 
     // delete the file buffer and cleanup.
     auto DeleteBufferAndCleanup = [&]() {
         if (mBuffer) {
             delete[] mBuffer;
             mBuffer = nullptr;
         }
         AI_DEBUG_INVALIDATE_PTR(mIOHandler);
         AI_DEBUG_INVALIDATE_PTR(pScene);
     };
 
     try {
         // Allocate storage and copy the contents of the file to a memory buffer
         mBuffer = new unsigned char[iFileSize + 1];
         file->Read((void *)mBuffer, 1, iFileSize);
 
         // Append a binary zero to the end of the buffer.
         // this is just for safety that string parsing routines
         // find the end of the buffer ...
         mBuffer[iFileSize] = '\0';
         const uint32_t iMagicWord = *((uint32_t *)mBuffer);
 
         // Determine the file subtype and call the appropriate member function
         bool is_half_life = false;
 
         // Original Quake1 format
         if (AI_MDL_MAGIC_NUMBER_BE == iMagicWord || AI_MDL_MAGIC_NUMBER_LE == iMagicWord) {
             ASSIMP_LOG_DEBUG("MDL subtype: Quake 1, magic word is IDPO");
             iGSFileVersion = 0;
             InternReadFile_Quake1();
         }
         // GameStudio A<old> MDL2 format - used by some test models that come with 3DGS
         else if (AI_MDL_MAGIC_NUMBER_BE_GS3 == iMagicWord || AI_MDL_MAGIC_NUMBER_LE_GS3 == iMagicWord) {
             ASSIMP_LOG_DEBUG("MDL subtype: 3D GameStudio A2, magic word is MDL2");
             iGSFileVersion = 2;
             InternReadFile_Quake1();
         }
         // GameStudio A4 MDL3 format
         else if (AI_MDL_MAGIC_NUMBER_BE_GS4 == iMagicWord || AI_MDL_MAGIC_NUMBER_LE_GS4 == iMagicWord) {
             ASSIMP_LOG_DEBUG("MDL subtype: 3D GameStudio A4, magic word is MDL3");
             iGSFileVersion = 3;
             InternReadFile_3DGS_MDL345();
         }
         // GameStudio A5+ MDL4 format
         else if (AI_MDL_MAGIC_NUMBER_BE_GS5a == iMagicWord || AI_MDL_MAGIC_NUMBER_LE_GS5a == iMagicWord) {
             ASSIMP_LOG_DEBUG("MDL subtype: 3D GameStudio A4, magic word is MDL4");
             iGSFileVersion = 4;
             InternReadFile_3DGS_MDL345();
         }
         // GameStudio A5+ MDL5 format
         else if (AI_MDL_MAGIC_NUMBER_BE_GS5b == iMagicWord || AI_MDL_MAGIC_NUMBER_LE_GS5b == iMagicWord) {
             ASSIMP_LOG_DEBUG("MDL subtype: 3D GameStudio A5, magic word is MDL5");
             iGSFileVersion = 5;
             InternReadFile_3DGS_MDL345();
         }
         // GameStudio A7 MDL7 format
         else if (AI_MDL_MAGIC_NUMBER_BE_GS7 == iMagicWord || AI_MDL_MAGIC_NUMBER_LE_GS7 == iMagicWord) {
             ASSIMP_LOG_DEBUG("MDL subtype: 3D GameStudio A7, magic word is MDL7");
             iGSFileVersion = 7;
             InternReadFile_3DGS_MDL7();
         }
         // IDST/IDSQ Format (CS:S/HL^2, etc ...)
         else if (AI_MDL_MAGIC_NUMBER_BE_HL2a == iMagicWord || AI_MDL_MAGIC_NUMBER_LE_HL2a == iMagicWord ||
                  AI_MDL_MAGIC_NUMBER_BE_HL2b == iMagicWord || AI_MDL_MAGIC_NUMBER_LE_HL2b == iMagicWord) {
             iGSFileVersion = 0;
             is_half_life = true;
 
             HalfLife::HalfLifeMDLBaseHeader *pHeader = (HalfLife::HalfLifeMDLBaseHeader *)mBuffer;
             if (pHeader->version == AI_MDL_HL1_VERSION) {
                 ASSIMP_LOG_DEBUG("MDL subtype: Half-Life 1/Goldsrc Engine, magic word is IDST/IDSQ");
                 InternReadFile_HL1(pFile, iMagicWord);
             } else {
                 ASSIMP_LOG_DEBUG("MDL subtype: Source(tm) Engine, magic word is IDST/IDSQ");
                 InternReadFile_HL2();
             }
         } else {
             // print the magic word to the log file
             throw DeadlyImportError("Unknown MDL subformat ", pFile,
                                     ". Magic word (", ai_str_toprintable((const char *)&iMagicWord, sizeof(iMagicWord)), ") is not known");
         }
 
         if (is_half_life){
             // Now rotate the whole scene 90 degrees around the z and x axes to convert to internal coordinate system
             pScene->mRootNode->mTransformation = aiMatrix4x4(
                     0.f, -1.f, 0.f, 0.f,
                     0.f, 0.f, 1.f, 0.f,
                     -1.f, 0.f, 0.f, 0.f,
                     0.f, 0.f, 0.f, 1.f);
         }
         else {
             // Now rotate the whole scene 90 degrees around the x axis to convert to internal coordinate system
             pScene->mRootNode->mTransformation = aiMatrix4x4(1.f, 0.f, 0.f, 0.f,
                     0.f, 0.f, 1.f, 0.f, 0.f, -1.f, 0.f, 0.f, 0.f, 0.f, 0.f, 1.f);
         }
 
         DeleteBufferAndCleanup();
     } catch (...) {
         DeleteBufferAndCleanup();
         throw;
     }
 }
 
+// ------------------------------------------------------------------------------------------------
+// Check whether we're still inside the valid file range
+bool MDLImporter::IsPosValid(const void *szPos) const {
+    return szPos && (const unsigned char *)szPos <= this->mBuffer + this->iFileSize && szPos >= this->mBuffer;
+}
+
 // ------------------------------------------------------------------------------------------------
 // Check whether we're still inside the valid file range
 void MDLImporter::SizeCheck(const void *szPos) {
-    if (!szPos || (const unsigned char *)szPos > this->mBuffer + this->iFileSize || szPos < this->mBuffer) {
+    if (!IsPosValid(szPos)) {
         throw DeadlyImportError("Invalid MDL file. The file is too small "
                                 "or contains invalid data.");
     }
 }
 
 // ------------------------------------------------------------------------------------------------
 // Just for debugging purposes
 void MDLImporter::SizeCheck(const void *szPos, const char *szFile, unsigned int iLine) {
     ai_assert(nullptr != szFile);
-    if (!szPos || (const unsigned char *)szPos > mBuffer + iFileSize) {
+    if (!IsPosValid(szPos)) {
         // remove a directory if there is one
         const char *szFilePtr = ::strrchr(szFile, '\\');
         if (!szFilePtr) {
             szFilePtr = ::strrchr(szFile, '/');
             if (nullptr == szFilePtr) {
                 szFilePtr = szFile;
             }
         }
         if (szFilePtr) {
             ++szFilePtr;
         }
 
         char szBuffer[1024];
         ::snprintf(szBuffer, sizeof(szBuffer), "Invalid MDL file. The file is too small "
                             "or contains invalid data (File: %s Line: %u)",
                 szFilePtr, iLine);
 
         throw DeadlyImportError(szBuffer);
     }
 }
 
 // ------------------------------------------------------------------------------------------------
 // Validate a quake file header
diff --git a/code/AssetLib/MDL/MDLLoader.h b/code/AssetLib/MDL/MDLLoader.h
index 433100938..44ff21e3e 100644
--- a/code/AssetLib/MDL/MDLLoader.h
+++ b/code/AssetLib/MDL/MDLLoader.h
@@ -105,315 +105,316 @@ public:
 protected:
     // -------------------------------------------------------------------
     /** Return importer meta information.
      * See #BaseImporter::GetInfo for the details
      */
     const aiImporterDesc* GetInfo () const override;
 
     // -------------------------------------------------------------------
     /** Imports the given file into the given scene structure.
     * See BaseImporter::InternReadFile() for details
     */
     void InternReadFile( const std::string& pFile, aiScene* pScene,
         IOSystem* pIOHandler) override;
 
     // -------------------------------------------------------------------
     /** Import a quake 1 MDL file (IDPO)
     */
     void InternReadFile_Quake1( );
 
     // -------------------------------------------------------------------
     /** Import a GameStudio A4/A5 file (MDL 3,4,5)
     */
     void InternReadFile_3DGS_MDL345( );
 
     // -------------------------------------------------------------------
     /** Import a GameStudio A7 file (MDL 7)
     */
     void InternReadFile_3DGS_MDL7( );
 
     // -------------------------------------------------------------------
     /** Import a Half-Life 1 MDL file
     */
     void InternReadFile_HL1(const std::string& pFile, const uint32_t iMagicWord);
 
     // -------------------------------------------------------------------
     /** Import a CS:S/HL2 MDL file (not fully implemented)
     */
     AI_WONT_RETURN void InternReadFile_HL2( ) AI_WONT_RETURN_SUFFIX;
 
     // -------------------------------------------------------------------
     /** Check whether a given position is inside the valid range
      *  Throw a DeadlyImportError if it is not
      * \param szPos Cursor position
      * \param szFile Name of the source file from which the function was called
      * \param iLine Source code line from which the function was called
     */
     void SizeCheck(const void* szPos);
     void SizeCheck(const void* szPos, const char* szFile, unsigned int iLine);
+    bool IsPosValid(const void* szPos) const;
 
     // -------------------------------------------------------------------
     /** Validate the header data structure of a game studio MDL7 file
      * \param pcHeader Input header to be validated
      */
     void ValidateHeader_3DGS_MDL7(const MDL::Header_MDL7* pcHeader);
 
     // -------------------------------------------------------------------
     /** Validate the header data structure of a Quake 1 model
      * \param pcHeader Input header to be validated
      */
     void ValidateHeader_Quake1(const MDL::Header* pcHeader);
 
     // -------------------------------------------------------------------
     /** Try to load a  palette from the current directory (colormap.lmp)
      *  If it is not found the default palette of Quake1 is returned
      */
     void SearchPalette(const unsigned char** pszColorMap);
 
     // -------------------------------------------------------------------
     /** Free a palette created with a previous call to SearchPalette()
      */
     void FreePalette(const unsigned char* pszColorMap);
 
     // -------------------------------------------------------------------
     /** Load a palletized texture from the file and convert it to 32bpp
     */
     void CreateTextureARGB8_3DGS_MDL3(const unsigned char* szData);
 
     // -------------------------------------------------------------------
     /** Used to load textures from MDL3/4
      * \param szData Input data
      * \param iType Color data type
      * \param piSkip Receive: Size to skip, in bytes
     */
     void CreateTexture_3DGS_MDL4(const unsigned char* szData,
         unsigned int iType,
         unsigned int* piSkip);
 
     // -------------------------------------------------------------------
     /** Used to load textures from MDL5
      * \param szData Input data
      * \param iType Color data type
      * \param piSkip Receive: Size to skip, in bytes
     */
     void CreateTexture_3DGS_MDL5(const unsigned char* szData,
         unsigned int iType,
         unsigned int* piSkip);
 
     // -------------------------------------------------------------------
     /** Checks whether a texture can be replaced with a single color
      * This is useful for all file formats before MDL7 (all those
      * that are not containing material colors separate from textures).
      * MED seems to write dummy 8x8 monochrome images instead.
      * \param pcTexture Input texture
      * \return aiColor.r is set to qnan if the function fails and no
      *   color can be found.
     */
     aiColor4D ReplaceTextureWithColor(const aiTexture* pcTexture);
 
     // -------------------------------------------------------------------
     /** Converts the absolute texture coordinates in MDL5 files to
      *  relative in a range between 0 and 1
     */
     void CalculateUVCoordinates_MDL5();
 
     // -------------------------------------------------------------------
     /** Read an UV coordinate from the file. If the file format is not
      * MDL5, the function calculates relative texture coordinates
      * \param vOut Receives the output UV coord
      * \param pcSrc UV coordinate buffer
      * \param UV coordinate index
     */
     void ImportUVCoordinate_3DGS_MDL345( aiVector3D& vOut,
         const MDL::TexCoord_MDL3* pcSrc,
         unsigned int iIndex);
 
     // -------------------------------------------------------------------
     /** Setup the material properties for Quake and MDL<7 models.
      * These formats don't support more than one material per mesh,
      * therefore the method processes only ONE skin and removes
      * all others.
      */
     void SetupMaterialProperties_3DGS_MDL5_Quake1( );
 
     // -------------------------------------------------------------------
     /** Parse a skin lump in a MDL7/HMP7 file with all of its features
      *  variant 1: Current cursor position is the beginning of the skin header
      * \param szCurrent Current data pointer
      * \param szCurrentOut Output data pointer
      * \param pcMats Material list for this group. To be filled ...
      */
     void ParseSkinLump_3DGS_MDL7(
         const unsigned char* szCurrent,
         const unsigned char** szCurrentOut,
         std::vector<aiMaterial*>& pcMats);
 
     // -------------------------------------------------------------------
     /** Parse a skin lump in a MDL7/HMP7 file with all of its features
      *  variant 2: Current cursor position is the beginning of the skin data
      * \param szCurrent Current data pointer
      * \param szCurrentOut Output data pointer
      * \param pcMatOut Output material
      * \param iType header.typ
      * \param iWidth header.width
      * \param iHeight header.height
      */
     void ParseSkinLump_3DGS_MDL7(
         const unsigned char* szCurrent,
         const unsigned char** szCurrentOut,
         aiMaterial* pcMatOut,
         unsigned int iType,
         unsigned int iWidth,
         unsigned int iHeight);
 
     // -------------------------------------------------------------------
     /** Skip a skin lump in a MDL7/HMP7 file
      * \param szCurrent Current data pointer
      * \param szCurrentOut Output data pointer. Points to the byte just
      * behind the last byte of the skin.
      * \param iType header.typ
      * \param iWidth header.width
      * \param iHeight header.height
      */
     void SkipSkinLump_3DGS_MDL7(const unsigned char* szCurrent,
         const unsigned char** szCurrentOut,
         unsigned int iType,
         unsigned int iWidth,
         unsigned int iHeight);
 
     // -------------------------------------------------------------------
     /** Parse texture color data for MDL5, MDL6 and MDL7 formats
      * \param szData Current data pointer
      * \param iType type of the texture data. No DDS or external
      * \param piSkip Receive the number of bytes to skip
      * \param pcNew Must point to fully initialized data. Width and
      *        height must be set. If pcNew->pcData is set to UINT_MAX,
      *        piSkip will receive the size of the texture, in bytes, but no
      *        color data will be read.
      */
     void ParseTextureColorData(const unsigned char* szData,
         unsigned int iType,
         unsigned int* piSkip,
         aiTexture* pcNew);
 
     // -------------------------------------------------------------------
     /** Join two materials / skins. Setup UV source ... etc
      * \param pcMat1 First input material
      * \param pcMat2 Second input material
      * \param pcMatOut Output material instance to be filled. Must be empty
      */
     void JoinSkins_3DGS_MDL7(aiMaterial* pcMat1,
         aiMaterial* pcMat2,
         aiMaterial* pcMatOut);
 
     // -------------------------------------------------------------------
     /** Add a bone transformation key to an animation
      * \param iTrafo Index of the transformation (always==frame index?)
      * No need to validate this index, it is always valid.
      * \param pcBoneTransforms Bone transformation for this index
      * \param apcOutBones Output bones array
      */
     void AddAnimationBoneTrafoKey_3DGS_MDL7(unsigned int iTrafo,
         const MDL::BoneTransform_MDL7* pcBoneTransforms,
         MDL::IntBone_MDL7** apcBonesOut);
 
     // -------------------------------------------------------------------
     /** Load the bone list of a MDL7 file
      * \return If the bones could be loaded successfully, a valid
      *   array containing pointers to a temporary bone
      *   representation. nullptr if the bones could not be loaded.
      */
     MDL::IntBone_MDL7** LoadBones_3DGS_MDL7();
 
     // -------------------------------------------------------------------
     /** Load bone transformation keyframes from a file chunk
      * \param groupInfo -> doc of data structure
      * \param frame -> doc of data structure
      * \param shared -> doc of data structure
      */
     void ParseBoneTrafoKeys_3DGS_MDL7(
         const MDL::IntGroupInfo_MDL7& groupInfo,
         IntFrameInfo_MDL7& frame,
         MDL::IntSharedData_MDL7& shared);
 
     // -------------------------------------------------------------------
     /** Calculate absolute bone animation matrices for each bone
      * \param apcOutBones Output bones array
      */
     void CalcAbsBoneMatrices_3DGS_MDL7(MDL::IntBone_MDL7** apcOutBones);
 
     // -------------------------------------------------------------------
     /** Add all bones to the nodegraph (as children of the root node)
      * \param apcBonesOut List of bones
      * \param pcParent Parent node. New nodes will be added to this node
      * \param iParentIndex Index of the parent bone
      */
     void AddBonesToNodeGraph_3DGS_MDL7(const MDL::IntBone_MDL7** apcBonesOut,
         aiNode* pcParent,uint16_t iParentIndex);
 
     // -------------------------------------------------------------------
     /** Build output animations
      * \param apcBonesOut List of bones
      */
     void BuildOutputAnims_3DGS_MDL7(const MDL::IntBone_MDL7** apcBonesOut);
 
     // -------------------------------------------------------------------
     /** Handles materials that are just referencing another material
      * There is no test file for this feature, but Conitec's doc
      * say it is used.
      */
     void HandleMaterialReferences_3DGS_MDL7();
 
     // -------------------------------------------------------------------
     /** Copies only the material that are referenced by at least one
      * mesh to the final output material list. All other materials
      * will be discarded.
      * \param shared -> doc of data structure
      */
     void CopyMaterials_3DGS_MDL7(MDL::IntSharedData_MDL7 &shared);
 
     // -------------------------------------------------------------------
     /** Process the frame section at the end of a group
      * \param groupInfo -> doc of data structure
      * \param shared -> doc of data structure
      * \param szCurrent Pointer to the start of the frame section
      * \param szCurrentOut Receives a pointer to the first byte of the
      *   next data section.
      * \return false to read no further groups (a small workaround for
      *   some tiny and unsolved problems ... )
      */
     bool ProcessFrames_3DGS_MDL7(const MDL::IntGroupInfo_MDL7& groupInfo,
         MDL::IntGroupData_MDL7& groupData,
         MDL::IntSharedData_MDL7& shared,
         const unsigned char* szCurrent,
         const unsigned char** szCurrentOut);
 
     // -------------------------------------------------------------------
     /** Sort all faces by their materials. If the mesh is using
      * multiple materials per face (that are blended together) the function
      * might create new materials.
      * \param groupInfo -> doc of data structure
      * \param groupData -> doc of data structure
      * \param splitGroupData -> doc of data structure
      */
     void SortByMaterials_3DGS_MDL7(
         const MDL::IntGroupInfo_MDL7& groupInfo,
         MDL::IntGroupData_MDL7& groupData,
         MDL::IntSplitGroupData_MDL7& splitGroupData);
 
     // -------------------------------------------------------------------
     /** Read all faces and vertices from a MDL7 group. The function fills
      *  preallocated memory buffers.
      * \param groupInfo -> doc of data structure
      * \param groupData -> doc of data structure
      */
     void ReadFaces_3DGS_MDL7(const MDL::IntGroupInfo_MDL7& groupInfo,
         MDL::IntGroupData_MDL7& groupData);
 
     // -------------------------------------------------------------------
     /** Generate the final output meshes for a7 models
      * \param groupData -> doc of data structure
      * \param splitGroupData -> doc of data structure
      */
     void GenerateOutputMeshes_3DGS_MDL7(
         MDL::IntGroupData_MDL7& groupData,
         MDL::IntSplitGroupData_MDL7& splitGroupData);
