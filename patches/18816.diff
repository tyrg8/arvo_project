commit d7d1686a95868d5df1f8e2ba5e6097c622ba1b64
Author: Pascal Quantin <pascal@wireshark.org>
Date:   Mon Nov 11 15:02:23 2019 +0100

    SNMP: fix out of bounds access to snmp_PDUs_vals array
    
    Bug: 16196
    Change-Id: I5bf9a405f1d0c026ac5a29f10f4cf655d3d1441e
    Reviewed-on: https://code.wireshark.org/review/35049
    Petri-Dish: Pascal Quantin <pascal@wireshark.org>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Pascal Quantin <pascal@wireshark.org>

diff --git a/epan/dissectors/asn1/snmp/snmp.cnf b/epan/dissectors/asn1/snmp/snmp.cnf
index cf22403dc9..d1fc181daf 100644
--- a/epan/dissectors/asn1/snmp/snmp.cnf
+++ b/epan/dissectors/asn1/snmp/snmp.cnf
@@ -19,236 +19,237 @@ Messagev2u/datav2u/plaintext v2u_plaintext
 BulkPDU/request-id bulkPDU_request-id
 
 #.FN_PARS Version    VAL_PTR = &snmp_version
 
 #.FN_PARS PDUs
 
 	VAL_PTR = &pdu_type
 
 #.FN_BODY PDUs
 	gint pdu_type=-1;
 
 	snmp_request_response_t *srrp;
 	snmp_conv_info_t *snmp_info = (snmp_conv_info_t *)actx->private_data;
 
 	col_clear(actx->pinfo->cinfo, COL_INFO);
 
 %(DEFAULT_BODY)s
 	if( (pdu_type!=-1) && snmp_PDUs_vals[pdu_type].strptr ){
 		col_prepend_fstr(actx->pinfo->cinfo, COL_INFO, "%%s", snmp_PDUs_vals[pdu_type].strptr);
-	}
 
-	/* pdu_type is the index, not the tag so convert it to the tag value */
-	pdu_type = snmp_PDUs_vals[pdu_type].value;
+		/* pdu_type is the index, not the tag so convert it to the tag value */
+		pdu_type = snmp_PDUs_vals[pdu_type].value;
 
-	srrp=snmp_match_request_response(tvb, actx->pinfo, tree, RequestID, pdu_type, snmp_info);
-	if (srrp) {
-		tap_queue_packet(snmp_tap, actx->pinfo, srrp);
+		srrp=snmp_match_request_response(tvb, actx->pinfo, tree, RequestID, pdu_type, snmp_info);
+		if (srrp) {
+			tap_queue_packet(snmp_tap, actx->pinfo, srrp);
+		}
 	}
 
+
 #.END
 
 #.FN_BODY PDU/request-id VAL_PTR = &RequestID
 
 %(DEFAULT_BODY)s
 
 #.FN_BODY Integer32 VAL_PTR = &RequestID
 
 %(DEFAULT_BODY)s
 
 #.FN_BODY Trap-PDU/_untag
 	generic_trap = 0;
 	enterprise_oid = NULL;
 
 %(DEFAULT_BODY)s
 
   if (snmp_version != 0) {
     expert_add_info(actx->pinfo, tree, &ei_snmp_trap_pdu_obsolete);
   }
 
 #.FN_PARS Trap-PDU/_untag/generic-trap    VAL_PTR = &generic_trap
 
 #.FN_BODY Trap-PDU/_untag/specific-trap   VAL_PTR = &specific_trap
   guint specific_trap;
 
 %(DEFAULT_BODY)s
 
 	if (generic_trap == 6) { /* enterprise specific */
 		const gchar *specific_str = snmp_lookup_specific_trap (specific_trap);
 		if (specific_str) {
 		proto_item_append_text(actx->created_item, " (%%s)", specific_str);
 		}
 	}
 #.END
 
 
 #.FN_PARS EnterpriseOID  FN_VARIANT = _str  VAL_PTR = &enterprise_oid
 
 #.FN_BODY EnterpriseOID
 	const gchar* name;
 
 %(DEFAULT_BODY)s
 
 	if (display_oid && enterprise_oid) {
 		name = oid_resolved_from_string(wmem_packet_scope(), enterprise_oid);
 		if (name) {
 		col_append_fstr (actx->pinfo->cinfo, COL_INFO, " %%s", name);
 		}
 	}
 
 #.END
 
 #.FN_PARS HeaderData/msgSecurityModel
 
 	VAL_PTR = &MsgSecurityModel
 
 #.FN_PARS UsmSecurityParameters/msgAuthoritativeEngineBoots
 
 	VAL_PTR = &usm_p.boots
 
 #.FN_PARS UsmSecurityParameters/msgAuthoritativeEngineTime
 
 	VAL_PTR = &usm_p.snmp_time
 
 #.FN_BODY UsmSecurityParameters/msgAuthoritativeEngineID
 
 	offset = dissect_ber_octet_string(implicit_tag, actx, tree, tvb, offset, hf_index, &usm_p.engine_tvb);
 	 if (usm_p.engine_tvb) {
 		proto_tree* engine_tree = proto_item_add_subtree(%(ACTX)s->created_item,ett_engineid);
 		dissect_snmp_engineid(engine_tree, actx->pinfo, usm_p.engine_tvb, 0, tvb_reported_length_remaining(usm_p.engine_tvb,0));
 	}
 
 #.FN_BODY SnmpEngineID
 	tvbuff_t* param_tvb = NULL;
 
 	offset = dissect_ber_octet_string(implicit_tag, actx, tree, tvb, offset, hf_index, &param_tvb);
 	 if (param_tvb) {
 		proto_tree* engine_tree = proto_item_add_subtree(%(ACTX)s->created_item,ett_engineid);
 		dissect_snmp_engineid(engine_tree, actx->pinfo, param_tvb, 0, tvb_reported_length_remaining(param_tvb,0));
 	}
 
 #.FN_PARS UsmSecurityParameters/msgUserName
 	VAL_PTR = &usm_p.user_tvb
 
 #.FN_BODY UsmSecurityParameters/msgAuthenticationParameters
 	offset = dissect_ber_octet_string(FALSE, actx, tree, tvb, offset, hf_index, &usm_p.auth_tvb);
 	if (usm_p.auth_tvb) {
 		usm_p.auth_item = %(ACTX)s->created_item;
 		usm_p.auth_offset = tvb_offset_from_real_beginning(usm_p.auth_tvb);
 	}
 #.FN_PARS UsmSecurityParameters/msgPrivacyParameters
 	VAL_PTR = &usm_p.priv_tvb
 
 #.FN_BODY ScopedPduData/encryptedPDU
 	tvbuff_t* crypt_tvb;
 	offset = dissect_ber_octet_string(FALSE, actx, tree, tvb, offset, hf_snmp_encryptedPDU, &crypt_tvb);
 
 	if( usm_p.encrypted && crypt_tvb
 		&& usm_p.user_assoc
 		&& usm_p.user_assoc->user.privProtocol ) {
 
 		const gchar* error = NULL;
 		proto_tree* encryptedpdu_tree = proto_item_add_subtree(%(ACTX)s->created_item,ett_encryptedPDU);
 		tvbuff_t* cleartext_tvb = usm_p.user_assoc->user.privProtocol(&usm_p, crypt_tvb, actx->pinfo, &error );
 
 		if (! cleartext_tvb) {
 			proto_tree_add_expert_format(encryptedpdu_tree, actx->pinfo, &ei_snmp_failed_decrypted_data_pdu,
 				crypt_tvb, 0, -1, "Failed to decrypt encryptedPDU: %%s", error);
 
 			col_set_str(actx->pinfo->cinfo, COL_INFO, "encryptedPDU: Failed to decrypt");
 
 			return offset;
 		} else {
 			proto_item* decrypted_item;
 			proto_tree* decrypted_tree;
 
 			if (! check_ScopedPdu(cleartext_tvb)) {
 				proto_tree_add_expert(encryptedpdu_tree, actx->pinfo, &ei_snmp_decrypted_data_bad_formatted, cleartext_tvb, 0, -1);
 
 				col_set_str(actx->pinfo->cinfo, COL_INFO, "encryptedPDU: Decrypted data not formatted as expected");
 
 				return offset;
 			}
 
 
 			add_new_data_source(actx->pinfo, cleartext_tvb, "Decrypted ScopedPDU");
 
 			decrypted_item = proto_tree_add_item(encryptedpdu_tree, hf_snmp_decryptedPDU,cleartext_tvb,0,-1,ENC_NA);
 			decrypted_tree = proto_item_add_subtree(decrypted_item,ett_decrypted);
 			dissect_snmp_ScopedPDU(FALSE, cleartext_tvb, 0, actx, decrypted_tree, -1);
 			}
 	} else {
 			col_set_str(actx->pinfo->cinfo, COL_INFO, "encryptedPDU: privKey Unknown");
 	}
 
 #.FN_BODY SNMPv3Message/msgSecurityParameters
 
 	switch(MsgSecurityModel){
 		case SNMP_SEC_USM:	/* 3 */
 			offset = get_ber_identifier(tvb, offset, NULL, NULL, NULL);
 			offset = get_ber_length(tvb, offset, NULL, NULL);
 			offset = dissect_snmp_UsmSecurityParameters(FALSE, tvb, offset, actx, tree, -1);
 			usm_p.user_assoc = get_user_assoc(usm_p.engine_tvb, usm_p.user_tvb);
 			break;
 		case SNMP_SEC_ANY:	/* 0 */
 		case SNMP_SEC_V1:	/* 1 */
 		case SNMP_SEC_V2C:	/* 2 */
 		default:
 			%(DEFAULT_BODY)s
 			break;
 	}
 
 #.FN_FTR SNMPv3Message
 
 	if( usm_p.authenticated
 		&& usm_p.user_assoc
 		&& usm_p.user_assoc->user.authModel ) {
 		const gchar* error = NULL;
 		proto_item* authen_item;
 		proto_tree* authen_tree = proto_item_add_subtree(usm_p.auth_item,ett_authParameters);
 		guint8* calc_auth = NULL;
 		guint calc_auth_len = 0;
 
 		usm_p.authOK = snmp_usm_auth(usm_p.user_assoc->user.authModel, &usm_p, &calc_auth, &calc_auth_len, &error );
 
 		if (error) {
 			expert_add_info_format( actx->pinfo, usm_p.auth_item, &ei_snmp_verify_authentication_error, "Error while verifying Message authenticity: %s", error );
 		} else {
 			expert_field* expert;
 
 			authen_item = proto_tree_add_boolean(authen_tree, hf_snmp_msgAuthentication, tvb, 0, 0, usm_p.authOK);
 			proto_item_set_generated(authen_item);
 
 			if (usm_p.authOK) {
 				expert = &ei_snmp_authentication_ok;
 			} else {
 				const gchar* calc_auth_str = bytestring_to_str(wmem_packet_scope(), calc_auth,calc_auth_len,' ');
 				proto_item_append_text(authen_item, " calculated = %s", calc_auth_str);
 				expert = &ei_snmp_authentication_error;
 			}
 
 			expert_add_info( actx->pinfo, authen_item, expert);
 		}
 	}
 
 #.END
 
 
 
 #.FN_BODY HeaderData/msgFlags  VAL_PTR = &parameter_tvb
 	tvbuff_t *parameter_tvb = NULL;
 
  %(DEFAULT_BODY)s
 	if (parameter_tvb){
 		guint8 v3_flags = tvb_get_guint8(parameter_tvb, 0);
 		proto_tree* flags_tree = proto_item_add_subtree(%(ACTX)s->created_item,ett_msgFlags);
 
 		proto_tree_add_item(flags_tree, hf_snmp_v3_flags_report, parameter_tvb, 0, 1, ENC_BIG_ENDIAN);
 		proto_tree_add_item(flags_tree, hf_snmp_v3_flags_crypt, parameter_tvb, 0, 1, ENC_BIG_ENDIAN);
 		proto_tree_add_item(flags_tree, hf_snmp_v3_flags_auth, parameter_tvb, 0, 1, ENC_BIG_ENDIAN);
 
 		usm_p.encrypted = v3_flags & TH_CRYPT ? TRUE : FALSE;
 		usm_p.authenticated = v3_flags & TH_AUTH ? TRUE : FALSE;
 	}
 
 
 #.TYPE_ATTR
diff --git a/epan/dissectors/packet-snmp.c b/epan/dissectors/packet-snmp.c
index 359809b02b..a16e8a7d64 100644
--- a/epan/dissectors/packet-snmp.c
+++ b/epan/dissectors/packet-snmp.c
@@ -2029,20 +2029,20 @@ check_ScopedPdu(tvbuff_t* tvb)
 
 static int
 dissect_snmp_EnterpriseOID(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 87 "./asn1/snmp/snmp.cnf"
+#line 88 "./asn1/snmp/snmp.cnf"
 	const gchar* name;
 
   offset = dissect_ber_object_identifier_str(implicit_tag, actx, tree, tvb, offset, hf_index, &enterprise_oid);
 
 
 	if (display_oid && enterprise_oid) {
 		name = oid_resolved_from_string(wmem_packet_scope(), enterprise_oid);
 		if (name) {
 		col_append_fstr (actx->pinfo->cinfo, COL_INFO, " %s", name);
 		}
 	}
 
 
 
   return offset;
 }
@@ -2091,13 +2091,13 @@ dissect_snmp_TimeTicks(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset
 
 static int
 dissect_snmp_Integer32(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 55 "./asn1/snmp/snmp.cnf"
+#line 56 "./asn1/snmp/snmp.cnf"
 
   offset = dissect_ber_integer(implicit_tag, actx, tree, tvb, offset, hf_index,
                                                 &RequestID);
 
 
 
 
   return offset;
 }
@@ -2143,13 +2143,13 @@ dissect_snmp_Community(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset
 
 static int
 dissect_snmp_T_request_id(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 51 "./asn1/snmp/snmp.cnf"
+#line 52 "./asn1/snmp/snmp.cnf"
 
   offset = dissect_ber_integer(implicit_tag, actx, tree, tvb, offset, hf_index,
                                                 &RequestID);
 
 
 
 
   return offset;
 }
@@ -2293,20 +2293,20 @@ dissect_snmp_GenericTrap(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offse
 
 static int
 dissect_snmp_SpecificTrap(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 71 "./asn1/snmp/snmp.cnf"
+#line 72 "./asn1/snmp/snmp.cnf"
   guint specific_trap;
 
   offset = dissect_ber_integer(implicit_tag, actx, tree, tvb, offset, hf_index,
                                                 &specific_trap);
 
 
 	if (generic_trap == 6) { /* enterprise specific */
 		const gchar *specific_str = snmp_lookup_specific_trap (specific_trap);
 		if (specific_str) {
 		proto_item_append_text(actx->created_item, " (%s)", specific_str);
 		}
 	}
 
 
   return offset;
 }
@@ -2324,19 +2324,19 @@ static const ber_sequence_t Trap_PDU_U_sequence[] = {
 
 static int
 dissect_snmp_Trap_PDU_U(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 59 "./asn1/snmp/snmp.cnf"
+#line 60 "./asn1/snmp/snmp.cnf"
 	generic_trap = 0;
 	enterprise_oid = NULL;
 
   offset = dissect_ber_sequence(implicit_tag, actx, tree, tvb, offset,
                                    Trap_PDU_U_sequence, hf_index, ett_snmp_Trap_PDU_U);
 
 
   if (snmp_version != 0) {
     expert_add_info(actx->pinfo, tree, &ei_snmp_trap_pdu_obsolete);
   }
 
 
 
   return offset;
 }
@@ -2449,30 +2449,31 @@ static int
 dissect_snmp_PDUs(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
 #line 28 "./asn1/snmp/snmp.cnf"
 	gint pdu_type=-1;
 
 	snmp_request_response_t *srrp;
 	snmp_conv_info_t *snmp_info = (snmp_conv_info_t *)actx->private_data;
 
 	col_clear(actx->pinfo->cinfo, COL_INFO);
 
   offset = dissect_ber_choice(actx, tree, tvb, offset,
                                  PDUs_choice, hf_index, ett_snmp_PDUs,
                                  &pdu_type);
 
 	if( (pdu_type!=-1) && snmp_PDUs_vals[pdu_type].strptr ){
 		col_prepend_fstr(actx->pinfo->cinfo, COL_INFO, "%s", snmp_PDUs_vals[pdu_type].strptr);
-	}
 
-	/* pdu_type is the index, not the tag so convert it to the tag value */
-	pdu_type = snmp_PDUs_vals[pdu_type].value;
+		/* pdu_type is the index, not the tag so convert it to the tag value */
+		pdu_type = snmp_PDUs_vals[pdu_type].value;
 
-	srrp=snmp_match_request_response(tvb, actx->pinfo, tree, RequestID, pdu_type, snmp_info);
-	if (srrp) {
-		tap_queue_packet(snmp_tap, actx->pinfo, srrp);
+		srrp=snmp_match_request_response(tvb, actx->pinfo, tree, RequestID, pdu_type, snmp_info);
+		if (srrp) {
+			tap_queue_packet(snmp_tap, actx->pinfo, srrp);
+		}
 	}
 
 
 
+
   return offset;
 }
 
@@ -2544,16 +2545,16 @@ dissect_snmp_Messagev2u(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset
 
 static int
 dissect_snmp_SnmpEngineID(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 121 "./asn1/snmp/snmp.cnf"
+#line 122 "./asn1/snmp/snmp.cnf"
 	tvbuff_t* param_tvb = NULL;
 
 	offset = dissect_ber_octet_string(implicit_tag, actx, tree, tvb, offset, hf_index, &param_tvb);
 	 if (param_tvb) {
 		proto_tree* engine_tree = proto_item_add_subtree(actx->created_item,ett_engineid);
 		dissect_snmp_engineid(engine_tree, actx->pinfo, param_tvb, 0, tvb_reported_length_remaining(param_tvb,0));
 	}
 
 
 
   return offset;
 }
@@ -2562,15 +2563,15 @@ dissect_snmp_SnmpEngineID(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offs
 
 static int
 dissect_snmp_T_msgAuthoritativeEngineID(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 113 "./asn1/snmp/snmp.cnf"
+#line 114 "./asn1/snmp/snmp.cnf"
 
 	offset = dissect_ber_octet_string(implicit_tag, actx, tree, tvb, offset, hf_index, &usm_p.engine_tvb);
 	 if (usm_p.engine_tvb) {
 		proto_tree* engine_tree = proto_item_add_subtree(actx->created_item,ett_engineid);
 		dissect_snmp_engineid(engine_tree, actx->pinfo, usm_p.engine_tvb, 0, tvb_reported_length_remaining(usm_p.engine_tvb,0));
 	}
 
 
 
   return offset;
 }
@@ -2609,13 +2610,13 @@ dissect_snmp_T_msgUserName(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int off
 
 static int
 dissect_snmp_T_msgAuthenticationParameters(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 133 "./asn1/snmp/snmp.cnf"
+#line 134 "./asn1/snmp/snmp.cnf"
 	offset = dissect_ber_octet_string(FALSE, actx, tree, tvb, offset, hf_index, &usm_p.auth_tvb);
 	if (usm_p.auth_tvb) {
 		usm_p.auth_item = actx->created_item;
 		usm_p.auth_offset = tvb_offset_from_real_beginning(usm_p.auth_tvb);
 	}
 
 
   return offset;
 }
@@ -2663,26 +2664,26 @@ dissect_snmp_INTEGER_484_2147483647(gboolean implicit_tag _U_, tvbuff_t *tvb _U_
 
 static int
 dissect_snmp_T_msgFlags(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 238 "./asn1/snmp/snmp.cnf"
+#line 239 "./asn1/snmp/snmp.cnf"
 	tvbuff_t *parameter_tvb = NULL;
 
    offset = dissect_ber_octet_string(implicit_tag, actx, tree, tvb, offset, hf_index,
                                        &parameter_tvb);
 
 	if (parameter_tvb){
 		guint8 v3_flags = tvb_get_guint8(parameter_tvb, 0);
 		proto_tree* flags_tree = proto_item_add_subtree(actx->created_item,ett_msgFlags);
 
 		proto_tree_add_item(flags_tree, hf_snmp_v3_flags_report, parameter_tvb, 0, 1, ENC_BIG_ENDIAN);
 		proto_tree_add_item(flags_tree, hf_snmp_v3_flags_crypt, parameter_tvb, 0, 1, ENC_BIG_ENDIAN);
 		proto_tree_add_item(flags_tree, hf_snmp_v3_flags_auth, parameter_tvb, 0, 1, ENC_BIG_ENDIAN);
 
 		usm_p.encrypted = v3_flags & TH_CRYPT ? TRUE : FALSE;
 		usm_p.authenticated = v3_flags & TH_AUTH ? TRUE : FALSE;
 	}
 
 
 
 
   return offset;
 }
@@ -2718,26 +2719,26 @@ dissect_snmp_HeaderData(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset
 
 static int
 dissect_snmp_T_msgSecurityParameters(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 184 "./asn1/snmp/snmp.cnf"
+#line 185 "./asn1/snmp/snmp.cnf"
 
 	switch(MsgSecurityModel){
 		case SNMP_SEC_USM:	/* 3 */
 			offset = get_ber_identifier(tvb, offset, NULL, NULL, NULL);
 			offset = get_ber_length(tvb, offset, NULL, NULL);
 			offset = dissect_snmp_UsmSecurityParameters(FALSE, tvb, offset, actx, tree, -1);
 			usm_p.user_assoc = get_user_assoc(usm_p.engine_tvb, usm_p.user_tvb);
 			break;
 		case SNMP_SEC_ANY:	/* 0 */
 		case SNMP_SEC_V1:	/* 1 */
 		case SNMP_SEC_V2C:	/* 2 */
 		default:
 			  offset = dissect_ber_octet_string(implicit_tag, actx, tree, tvb, offset, hf_index,
                                        NULL);
 
 			break;
 	}
 
 
 
   return offset;
 }
@@ -2762,49 +2763,49 @@ dissect_snmp_ScopedPDU(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset
 
 static int
 dissect_snmp_T_encryptedPDU(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
-#line 142 "./asn1/snmp/snmp.cnf"
+#line 143 "./asn1/snmp/snmp.cnf"
 	tvbuff_t* crypt_tvb;
 	offset = dissect_ber_octet_string(FALSE, actx, tree, tvb, offset, hf_snmp_encryptedPDU, &crypt_tvb);
 
 	if( usm_p.encrypted && crypt_tvb
 		&& usm_p.user_assoc
 		&& usm_p.user_assoc->user.privProtocol ) {
 
 		const gchar* error = NULL;
 		proto_tree* encryptedpdu_tree = proto_item_add_subtree(actx->created_item,ett_encryptedPDU);
 		tvbuff_t* cleartext_tvb = usm_p.user_assoc->user.privProtocol(&usm_p, crypt_tvb, actx->pinfo, &error );
 
 		if (! cleartext_tvb) {
 			proto_tree_add_expert_format(encryptedpdu_tree, actx->pinfo, &ei_snmp_failed_decrypted_data_pdu,
 				crypt_tvb, 0, -1, "Failed to decrypt encryptedPDU: %s", error);
 
 			col_set_str(actx->pinfo->cinfo, COL_INFO, "encryptedPDU: Failed to decrypt");
 
 			return offset;
 		} else {
 			proto_item* decrypted_item;
 			proto_tree* decrypted_tree;
 
 			if (! check_ScopedPdu(cleartext_tvb)) {
 				proto_tree_add_expert(encryptedpdu_tree, actx->pinfo, &ei_snmp_decrypted_data_bad_formatted, cleartext_tvb, 0, -1);
 
 				col_set_str(actx->pinfo->cinfo, COL_INFO, "encryptedPDU: Decrypted data not formatted as expected");
 
 				return offset;
 			}
 
 
 			add_new_data_source(actx->pinfo, cleartext_tvb, "Decrypted ScopedPDU");
 
 			decrypted_item = proto_tree_add_item(encryptedpdu_tree, hf_snmp_decryptedPDU,cleartext_tvb,0,-1,ENC_NA);
 			decrypted_tree = proto_item_add_subtree(decrypted_item,ett_decrypted);
 			dissect_snmp_ScopedPDU(FALSE, cleartext_tvb, 0, actx, decrypted_tree, -1);
 			}
 	} else {
 			col_set_str(actx->pinfo->cinfo, COL_INFO, "encryptedPDU: privKey Unknown");
 	}
 
 
 
   return offset;
 }
@@ -2844,40 +2845,40 @@ static int
 dissect_snmp_SNMPv3Message(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {
   offset = dissect_ber_sequence(implicit_tag, actx, tree, tvb, offset,
                                    SNMPv3Message_sequence, hf_index, ett_snmp_SNMPv3Message);
 
-#line 201 "./asn1/snmp/snmp.cnf"
+#line 202 "./asn1/snmp/snmp.cnf"
 
 	if( usm_p.authenticated
 		&& usm_p.user_assoc
 		&& usm_p.user_assoc->user.authModel ) {
 		const gchar* error = NULL;
 		proto_item* authen_item;
 		proto_tree* authen_tree = proto_item_add_subtree(usm_p.auth_item,ett_authParameters);
 		guint8* calc_auth = NULL;
 		guint calc_auth_len = 0;
 
 		usm_p.authOK = snmp_usm_auth(usm_p.user_assoc->user.authModel, &usm_p, &calc_auth, &calc_auth_len, &error );
 
 		if (error) {
 			expert_add_info_format( actx->pinfo, usm_p.auth_item, &ei_snmp_verify_authentication_error, "Error while verifying Message authenticity: %s", error );
 		} else {
 			expert_field* expert;
 
 			authen_item = proto_tree_add_boolean(authen_tree, hf_snmp_msgAuthentication, tvb, 0, 0, usm_p.authOK);
 			proto_item_set_generated(authen_item);
 
 			if (usm_p.authOK) {
 				expert = &ei_snmp_authentication_ok;
 			} else {
 				const gchar* calc_auth_str = bytestring_to_str(wmem_packet_scope(), calc_auth,calc_auth_len,' ');
 				proto_item_append_text(authen_item, " calculated = %s", calc_auth_str);
 				expert = &ei_snmp_authentication_error;
 			}
 
 			expert_add_info( actx->pinfo, authen_item, expert);
 		}
 	}
 
 
   return offset;
 }
