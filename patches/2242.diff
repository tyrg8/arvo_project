commit 55cb70a24a58fc73b7a2b9d1b2a49845668342cc
Author: Christos Zoulas <christos@zoulas.com>
Date:   Mon Jun 19 18:30:25 2017 +0000

    Add another bounds check: OSS-FUZZ issue 2242

diff --git a/src/softmagic.c b/src/softmagic.c
index b7d69938..b9e97537 100644
--- a/src/softmagic.c
+++ b/src/softmagic.c
@@ -32,13 +32,13 @@
 #include "file.h"
 
 #ifndef	lint
-FILE_RCSID("@(#)$File: softmagic.c,v 1.248 2017/04/21 16:54:57 christos Exp $")
+FILE_RCSID("@(#)$File: softmagic.c,v 1.249 2017/06/19 18:30:25 christos Exp $")
 #endif	/* lint */
 
 #include "magic.h"
 #include <assert.h>
 #include <string.h>
 #include <ctype.h>
 #include <stdlib.h>
 #include <time.h>
 #include "der.h"
@@ -1176,123 +1176,123 @@ private int
 mcopy(struct magic_set *ms, union VALUETYPE *p, int type, int indir,
     const unsigned char *s, uint32_t offset, size_t nbytes, struct magic *m)
 {
 	/*
 	 * Note: FILE_SEARCH and FILE_REGEX do not actually copy
 	 * anything, but setup pointers into the source
 	 */
 	if (indir == 0) {
 		switch (type) {
 		case FILE_DER:
 		case FILE_SEARCH:
 			if (offset > nbytes)
 				offset = CAST(uint32_t, nbytes);
 			ms->search.s = RCAST(const char *, s) + offset;
 			ms->search.s_len = nbytes - offset;
 			ms->search.offset = offset;
 			return 0;
 
 		case FILE_REGEX: {
 			const char *b;
 			const char *c;
 			const char *last;	/* end of search region */
 			const char *buf;	/* start of search region */
 			const char *end;
 			size_t lines, linecnt, bytecnt;
 
-			if (s == NULL) {
+			if (s == NULL || nbytes < offset) {
 				ms->search.s_len = 0;
 				ms->search.s = NULL;
 				return 0;
 			}
 
 			if (m->str_flags & REGEX_LINE_COUNT) {
 				linecnt = m->str_range;
 				bytecnt = linecnt * 80;
 			} else {
 				linecnt = 0;
 				bytecnt = m->str_range;
 			}
 
 			if (bytecnt == 0 || bytecnt > nbytes - offset)
 				bytecnt = nbytes - offset;
 			if (bytecnt > ms->regex_max)
 				bytecnt = ms->regex_max;
 
 			buf = RCAST(const char *, s) + offset;
 			end = last = RCAST(const char *, s) + bytecnt + offset;
 			/* mget() guarantees buf <= last */
 			for (lines = linecnt, b = buf; lines && b < end &&
 			     ((b = CAST(const char *,
 				 memchr(c = b, '\n', CAST(size_t, (end - b)))))
 			     || (b = CAST(const char *,
 				 memchr(c, '\r', CAST(size_t, (end - c))))));
 			     lines--, b++) {
 				last = b;
 				if (b < end - 1 && b[0] == '\r' && b[1] == '\n')
 					b++;
 			}
 			if (lines)
 				last = RCAST(const char *, s) + bytecnt;
 
 			ms->search.s = buf;
 			ms->search.s_len = last - buf;
 			ms->search.offset = offset;
 			ms->search.rm_len = 0;
 			return 0;
 		}
 		case FILE_BESTRING16:
 		case FILE_LESTRING16: {
 			const unsigned char *src = s + offset;
 			const unsigned char *esrc = s + nbytes;
 			char *dst = p->s;
 			char *edst = &p->s[sizeof(p->s) - 1];
 
 			if (type == FILE_BESTRING16)
 				src++;
 
 			/* check that offset is within range */
 			if (offset >= nbytes)
 				break;
 			for (/*EMPTY*/; src < esrc; src += 2, dst++) {
 				if (dst < edst)
 					*dst = *src;
 				else
 					break;
 				if (*dst == '\0') {
 					if (type == FILE_BESTRING16 ?
 					    *(src - 1) != '\0' :
 					    ((src + 1 < esrc) &&
 					    *(src + 1) != '\0'))
 						*dst = ' ';
 				}
 			}
 			*edst = '\0';
 			return 0;
 		}
 		case FILE_STRING:	/* XXX - these two should not need */
 		case FILE_PSTRING:	/* to copy anything, but do anyway. */
 		default:
 			break;
 		}
 	}
 
 	if (offset >= nbytes) {
 		(void)memset(p, '\0', sizeof(*p));
 		return 0;
 	}
 	if (nbytes - offset < sizeof(*p))
 		nbytes = nbytes - offset;
 	else
 		nbytes = sizeof(*p);
 
 	(void)memcpy(p, s + offset, nbytes);
 
 	/*
 	 * the usefulness of padding with zeroes eludes me, it
 	 * might even cause problems
 	 */
 	if (nbytes < sizeof(*p))
 		(void)memset(((char *)(void *)p) + nbytes, '\0',
 		    sizeof(*p) - nbytes);
 	return 0;
 }
