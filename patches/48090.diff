commit f1cc4b96a8df146f327d71cd8e8aee47ca8487fa
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sat Jun 18 17:00:29 2022 -0400

    fix improper close when opening zipped file

diff --git a/MagickCore/blob.c b/MagickCore/blob.c
index 950f297be..3cefeb482 100644
--- a/MagickCore/blob.c
+++ b/MagickCore/blob.c
@@ -3235,365 +3235,369 @@ static inline gzFile gzopen_utf8(const char *path,const char *mode)
 MagickExport MagickBooleanType OpenBlob(const ImageInfo *image_info,
   Image *image,const BlobMode mode,ExceptionInfo *exception)
 {
   BlobInfo
     *magick_restrict blob_info;
 
   char
     extension[MagickPathExtent],
     filename[MagickPathExtent];
 
   const char
     *type;
 
   MagickBooleanType
     status;
 
   PolicyRights
     rights;
 
   assert(image_info != (ImageInfo *) NULL);
   assert(image_info->signature == MagickCoreSignature);
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (IsEventLogging() != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",
       image_info->filename);
   blob_info=image->blob;
   if (image_info->blob != (void *) NULL)
     {
       if (image_info->stream != (StreamHandler) NULL)
         blob_info->stream=(StreamHandler) image_info->stream;
       AttachBlob(blob_info,image_info->blob,image_info->length);
       return(MagickTrue);
     }
   if ((image_info->custom_stream != (CustomStreamInfo *) NULL) &&
       (*image->filename == '\0'))
     {
       blob_info->type=CustomStream;
       blob_info->custom_stream=image_info->custom_stream;
       return(MagickTrue);
     }
   (void) DetachBlob(blob_info);
   blob_info->mode=mode;
   switch (mode)
   {
     default: type="r"; break;
     case ReadBlobMode: type="r"; break;
     case ReadBinaryBlobMode: type="rb"; break;
     case WriteBlobMode: type="w"; break;
     case WriteBinaryBlobMode: type="w+b"; break;
     case AppendBlobMode: type="a"; break;
     case AppendBinaryBlobMode: type="a+b"; break;
   }
   if (*type != 'r')
     blob_info->synchronize=image_info->synchronize;
   if (image_info->stream != (StreamHandler) NULL)
     {
       blob_info->stream=image_info->stream;
       if (*type == 'w')
         {
           blob_info->type=FifoStream;
           return(MagickTrue);
         }
     }
   /*
     Open image file.
   */
   *filename='\0';
   (void) CopyMagickString(filename,image->filename,MagickPathExtent);
   rights=ReadPolicyRights;
   if (*type == 'w')
     rights=WritePolicyRights;
   if (IsRightsAuthorized(PathPolicyDomain,rights,filename) == MagickFalse)
     {
       errno=EPERM;
       (void) ThrowMagickException(exception,GetMagickModule(),PolicyError,
         "NotAuthorized","`%s'",filename);
       return(MagickFalse);
     }
   if ((LocaleCompare(filename,"-") == 0) ||
       ((*filename == '\0') && (image_info->file == (FILE *) NULL)))
     {
       blob_info->file_info.file=(*type == 'r') ? stdin : stdout;
 #if defined(MAGICKCORE_WINDOWS_SUPPORT) || defined(__OS2__)
       if (strchr(type,'b') != (char *) NULL)
         (void) setmode(fileno(blob_info->file_info.file),_O_BINARY);
 #endif
       blob_info->type=StandardStream;
       blob_info->exempt=MagickTrue;
       return(SetStreamBuffering(image_info,blob_info));
     }
   if ((LocaleNCompare(filename,"fd:",3) == 0) &&
       (IsGeometry(filename+3) != MagickFalse))
     {
       char
         fileMode[2];
 
       *fileMode =(*type);
       fileMode[1]='\0';
       blob_info->file_info.file=fdopen(StringToLong(filename+3),fileMode);
       if (blob_info->file_info.file == (FILE *) NULL)
         {
           ThrowFileException(exception,BlobError,"UnableToOpenBlob",filename);
           return(MagickFalse);
         }
 #if defined(MAGICKCORE_WINDOWS_SUPPORT) || defined(__OS2__)
       if (strchr(type,'b') != (char *) NULL)
         (void) setmode(fileno(blob_info->file_info.file),_O_BINARY);
 #endif
       blob_info->type=FileStream;
       blob_info->exempt=MagickTrue;
       return(SetStreamBuffering(image_info,blob_info));
     }
 #if defined(MAGICKCORE_HAVE_POPEN) && defined(MAGICKCORE_PIPES_SUPPORT)
   if (*filename == '|')
     {
       char
         fileMode[MagickPathExtent],
         *sanitize_command;
 
       /*
         Pipe image to or from a system command.
       */
 #if defined(SIGPIPE)
       if (*type == 'w')
         (void) signal(SIGPIPE,SIG_IGN);
 #endif
       *fileMode =(*type);
       fileMode[1]='\0';
       sanitize_command=SanitizeString(filename+1);
       blob_info->file_info.file=(FILE *) popen_utf8(sanitize_command,fileMode);
       sanitize_command=DestroyString(sanitize_command);
       if (blob_info->file_info.file == (FILE *) NULL)
         {
           ThrowFileException(exception,BlobError,"UnableToOpenBlob",filename);
           return(MagickFalse);
         }
       blob_info->type=PipeStream;
       blob_info->exempt=MagickTrue;
       return(SetStreamBuffering(image_info,blob_info));
     }
 #endif
   status=GetPathAttributes(filename,&blob_info->properties);
 #if defined(S_ISFIFO)
   if ((status != MagickFalse) && S_ISFIFO(blob_info->properties.st_mode))
     {
       blob_info->file_info.file=(FILE *) fopen_utf8(filename,type);
       if (blob_info->file_info.file == (FILE *) NULL)
         {
           ThrowFileException(exception,BlobError,"UnableToOpenBlob",filename);
           return(MagickFalse);
         }
       blob_info->type=FileStream;
       blob_info->exempt=MagickTrue;
       return(SetStreamBuffering(image_info,blob_info));
     }
 #endif
   GetPathComponent(image->filename,ExtensionPath,extension);
   if (*type == 'w')
     {
       (void) CopyMagickString(filename,image->filename,MagickPathExtent);
       if ((image_info->adjoin == MagickFalse) ||
           (strchr(filename,'%') != (char *) NULL))
         {
           /*
             Form filename for multi-part images.
           */
           (void) InterpretImageFilename(image_info,image,image->filename,(int)
             image->scene,filename,exception);
           if ((LocaleCompare(filename,image->filename) == 0) &&
               ((GetPreviousImageInList(image) != (Image *) NULL) ||
                (GetNextImageInList(image) != (Image *) NULL)))
             {
               char
                 path[MagickPathExtent];
 
               GetPathComponent(image->filename,RootPath,path);
               if (*extension == '\0')
                 (void) FormatLocaleString(filename,MagickPathExtent,"%s-%.20g",
                   path,(double) image->scene);
               else
                 (void) FormatLocaleString(filename,MagickPathExtent,
                   "%s-%.20g.%s",path,(double) image->scene,extension);
             }
           (void) CopyMagickString(image->filename,filename,MagickPathExtent);
         }
     }
   if (image_info->file != (FILE *) NULL)
     {
       blob_info->file_info.file=image_info->file;
       blob_info->type=FileStream;
       blob_info->exempt=MagickTrue;
     }
   else
     if (*type == 'r')
       {
         blob_info->file_info.file=(FILE *) fopen_utf8(filename,type);
         if (blob_info->file_info.file != (FILE *) NULL)
           {
             size_t
               count;
 
             unsigned char
               magick[3];
 
             blob_info->type=FileStream;
             (void) SetStreamBuffering(image_info,blob_info);
             (void) memset(magick,0,sizeof(magick));
             count=fread(magick,1,sizeof(magick),blob_info->file_info.file);
             (void) fseek(blob_info->file_info.file,-((off_t) count),SEEK_CUR);
 #if defined(MAGICKCORE_POSIX_SUPPORT)
             (void) fflush(blob_info->file_info.file);
 #endif
             (void) LogMagickEvent(BlobEvent,GetMagickModule(),
                "  read %.20g magic header bytes",(double) count);
 #if defined(MAGICKCORE_ZLIB_DELEGATE)
             if (((int) magick[0] == 0x1F) && ((int) magick[1] == 0x8B) &&
                 ((int) magick[2] == 0x08))
               {
-                blob_info->file_info.gzfile=gzopen_utf8(filename,"rb");
-                if (blob_info->file_info.gzfile != (gzFile) NULL)
+                gzFile
+                  gzfile = gzopen_utf8(filename,"rb");
+
+                if (gzfile != (gzFile) NULL)
                   {
                     if (blob_info->file_info.file != (FILE *) NULL)
                       (void) fclose(blob_info->file_info.file);
-                    blob_info->file_info.file=(FILE *) NULL;
+                    blob_info->file_info.gzfile=gzfile;
                     blob_info->type=ZipStream;
                   }
-               }
+              }
 #endif
 #if defined(MAGICKCORE_BZLIB_DELEGATE)
             if (strncmp((char *) magick,"BZh",3) == 0)
               {
-                blob_info->file_info.bzfile=BZ2_bzopen(filename,"r");
-                if (blob_info->file_info.bzfile != (BZFILE *) NULL)
+                BZFILE
+                  *bzfile = BZ2_bzopen(filename,"r");
+
+                if (bzfile != (BZFILE *) NULL)
                   {
                     if (blob_info->file_info.file != (FILE *) NULL)
                       (void) fclose(blob_info->file_info.file);
-                    blob_info->file_info.file=(FILE *) NULL;
+                    blob_info->file_info.bzfile=bzfile;
                     blob_info->type=BZipStream;
                   }
               }
 #endif
             if (blob_info->type == FileStream)
               {
                 const MagickInfo
                   *magick_info;
 
                 ExceptionInfo
                   *sans_exception;
 
                 size_t
                   length;
 
                 sans_exception=AcquireExceptionInfo();
                 magick_info=GetMagickInfo(image_info->magick,sans_exception);
                 sans_exception=DestroyExceptionInfo(sans_exception);
                 length=(size_t) blob_info->properties.st_size;
                 if ((magick_info != (const MagickInfo *) NULL) &&
                     (GetMagickBlobSupport(magick_info) != MagickFalse) &&
                     (length > MagickMaxBufferExtent) &&
                     (AcquireMagickResource(MapResource,length) != MagickFalse))
                   {
                     void
                       *blob;
 
                     blob=MapBlob(fileno(blob_info->file_info.file),ReadMode,0,
                       length);
                     if (blob == (void *) NULL)
                       RelinquishMagickResource(MapResource,length);
                     else
                       {
                         /*
                           Format supports blobs-- use memory-mapped I/O.
                         */
                         if (image_info->file != (FILE *) NULL)
                           blob_info->exempt=MagickFalse;
                         else
                           {
                             (void) fclose(blob_info->file_info.file);
                             blob_info->file_info.file=(FILE *) NULL;
                           }
                         AttachBlob(blob_info,blob,length);
                         blob_info->mapped=MagickTrue;
                       }
                   }
               }
           }
       }
     else
 #if defined(MAGICKCORE_ZLIB_DELEGATE)
       if ((LocaleCompare(extension,"Z") == 0) ||
           (LocaleCompare(extension,"gz") == 0) ||
           (LocaleCompare(extension,"wmz") == 0) ||
           (LocaleCompare(extension,"svgz") == 0))
         {
           blob_info->file_info.gzfile=gzopen_utf8(filename,"wb");
           if (blob_info->file_info.gzfile != (gzFile) NULL)
             blob_info->type=ZipStream;
         }
       else
 #endif
 #if defined(MAGICKCORE_BZLIB_DELEGATE)
         if (LocaleCompare(extension,"bz2") == 0)
           {
             blob_info->file_info.bzfile=BZ2_bzopen(filename,"w");
             if (blob_info->file_info.bzfile != (BZFILE *) NULL)
               blob_info->type=BZipStream;
           }
         else
 #endif
           {
             blob_info->file_info.file=(FILE *) fopen_utf8(filename,type);
             if (blob_info->file_info.file != (FILE *) NULL)
               {
                 blob_info->type=FileStream;
                 (void) SetStreamBuffering(image_info,blob_info);
               }
           }
   blob_info->status=MagickFalse;
   blob_info->error_number=MagickFalse;
   if (blob_info->type != UndefinedStream)
     blob_info->size=GetBlobSize(image);
   else
     {
       ThrowFileException(exception,BlobError,"UnableToOpenBlob",filename);
       return(MagickFalse);
     }
   return(MagickTrue);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +   P i n g B l o b                                                           %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  PingBlob() returns all the attributes of an image or image sequence except
 %  for the pixels.  It is much faster and consumes far less memory than
 %  BlobToImage().  On failure, a NULL image is returned and exception
 %  describes the reason for the failure.
 %
 %  The format of the PingBlob method is:
 %
 %      Image *PingBlob(const ImageInfo *image_info,const void *blob,
 %        const size_t length,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image_info: the image info.
 %
 %    o blob: the address of a character stream in one of the image formats
 %      understood by ImageMagick.
 %
 %    o length: This size_t integer reflects the length in bytes of the blob.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 
 #if defined(__cplusplus) || defined(c_plusplus)
diff --git a/coders/vicar.c b/coders/vicar.c
index 3b025abd4..b18701331 100644
--- a/coders/vicar.c
+++ b/coders/vicar.c
@@ -102,274 +102,274 @@ static MagickBooleanType IsVICAR(const unsigned char *magick,
   const size_t length)
 {
   if (length < 14)
     return(MagickFalse);
   if (LocaleNCompare((const char *) magick,"LBLSIZE",7) == 0)
     return(MagickTrue);
   if (LocaleNCompare((const char *) magick,"NJPL1I",6) == 0)
     return(MagickTrue);
   if (LocaleNCompare((const char *) magick,"PDS_VERSION_ID",14) == 0)
     return(MagickTrue);
   return(MagickFalse);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   R e a d V I C A R I m a g e                                               %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ReadVICARImage() reads a VICAR image file and returns it.  It
 %  allocates the memory necessary for the new Image structure and returns a
 %  pointer to the new image.
 %
 %  The format of the ReadVICARImage method is:
 %
 %      Image *ReadVICARImage(const ImageInfo *image_info,
 %        ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image: Method ReadVICARImage returns a pointer to the image after
 %      reading.  A null image is returned if there is a memory shortage or if
 %      the image cannot be read.
 %
 %    o image_info: the image info.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 %
 */
 static Image *ReadVICARImage(const ImageInfo *image_info,
   ExceptionInfo *exception)
 {
   char
     keyword[MagickPathExtent],
     value[MagickPathExtent];
 
   Image
     *image;
 
   int
     c;
 
   MagickBooleanType
     status,
     value_expected;
 
   QuantumInfo
     *quantum_info;
 
   QuantumType
     quantum_type;
 
   Quantum
     *q;
 
   size_t
     length;
 
   ssize_t
     count,
     y;
 
   unsigned char
     *pixels;
 
   /*
     Open image file.
   */
   assert(image_info != (const ImageInfo *) NULL);
   assert(image_info->signature == MagickCoreSignature);
   assert(exception != (ExceptionInfo *) NULL);
   assert(exception->signature == MagickCoreSignature);
   if (IsEventLogging() != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",
       image_info->filename);
   image=AcquireImage(image_info,exception);
   status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);
   if (status == MagickFalse)
     {
       image=DestroyImageList(image);
       return((Image *) NULL);
     }
   /*
     Decode image header.
   */
   c=ReadBlobByte(image);
   count=1;
   if (c == EOF)
     {
       image=DestroyImage(image);
       return((Image *) NULL);
     }
   length=0;
   image->columns=0;
   image->rows=0;
-  while ((isgraph((int) ((unsigned char) c) != 0)) &&
+  while ((isgraph((int) ((unsigned char) c)) != 0) &&
          ((image->columns == 0) || (image->rows == 0)))
   {
     if (isalnum((int) ((unsigned char) c)) == MagickFalse)
       {
         c=ReadBlobByte(image);
         count++;
       }
     else
       {
         char
           *p,
           property[MagickPathExtent];
 
         /*
           Determine a keyword and its value.
         */
         p=keyword;
         do
         {
           if ((size_t) (p-keyword) < (MagickPathExtent-1))
             *p++=c;
           c=ReadBlobByte(image);
           count++;
         } while (isalnum((int) ((unsigned char) c)) || (c == '_'));
         *p='\0';
         value_expected=MagickFalse;
         while ((isspace((int) ((unsigned char) c)) != 0) || (c == '='))
         {
           if (c == '=')
             value_expected=MagickTrue;
           c=ReadBlobByte(image);
           count++;
         }
         if (value_expected == MagickFalse)
           continue;
         p=value;
         if (c != '\'')
           while (isalnum((int) ((unsigned char) c)))
           {
             if ((size_t) (p-value) < (MagickPathExtent-1))
               *p++=c;
             c=ReadBlobByte(image);
             count++;
           }
        else
           {
             c=ReadBlobByte(image);
             count++;
             while (c != '\'')
             {
               if ((size_t) (p-value) < (MagickPathExtent-1))
                 *p++=c;
               c=ReadBlobByte(image);
               count++;
             }
           }
         *p='\0';
         /*
           Assign a value to the specified keyword.
         */
         (void) FormatLocaleString(property,MagickPathExtent,"vicar:%s",keyword);
         LocaleLower(property);
         (void) SetImageProperty(image,property,value,exception);
+        if (LocaleCompare(keyword,"END") == 0)
+          break;
         if (LocaleCompare(keyword,"LABEL_RECORDS") == 0)
           length*=(ssize_t) StringToLong(value);
         if (LocaleCompare(keyword,"LBLSIZE") == 0)
           length=(ssize_t) StringToLong(value);
         if (LocaleCompare(keyword,"LINES") == 0)
           image->rows=StringToUnsignedLong(value);
         if (LocaleCompare(keyword,"NL") == 0)
           image->rows=StringToUnsignedLong(value);
         if (LocaleCompare(keyword,"NS") == 0)
           image->columns=StringToUnsignedLong(value);
-        if (LocaleCompare(keyword,"END") == 0)
-          break;
       }
     while (isspace((int) ((unsigned char) c)) != 0)
     {
       c=ReadBlobByte(image);
       count++;
     }
   }
   while (count < (ssize_t) length)
   {
     c=ReadBlobByte(image);
     if (c == EOF)
       break;
     count++;
   }
   if ((image->columns == 0) || (image->rows == 0))
     ThrowReaderException(CorruptImageError,"NegativeOrZeroImageSize");
   image->depth=8;
   if (image_info->ping != MagickFalse)
     {
       (void) CloseBlob(image);
       return(GetFirstImageInList(image));
     }
   status=SetImageExtent(image,image->columns,image->rows,exception);
   if (status == MagickFalse)
     return(DestroyImageList(image));
   /*
     Read VICAR pixels.
   */
   (void) SetImageColorspace(image,GRAYColorspace,exception);
   quantum_type=GrayQuantum;
   quantum_info=AcquireQuantumInfo(image_info,image);
   if (quantum_info == (QuantumInfo *) NULL)
     ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
   length=GetQuantumExtent(image,quantum_info,quantum_type);
   pixels=GetQuantumPixels(quantum_info);
   for (y=0; y < (ssize_t) image->rows; y++)
   {
     const void
       *stream;
 
     q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);
     if (q == (Quantum *) NULL)
       break;
     stream=ReadBlobStream(image,length,pixels,&count);
     if (count != (ssize_t) length)
       break;
     (void) ImportQuantumPixels(image,(CacheView *) NULL,quantum_info,
       quantum_type,(unsigned char *) stream,exception);
     if (SyncAuthenticPixels(image,exception) == MagickFalse)
       break;
     status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,
       image->rows);
     if (status == MagickFalse)
       break;
   }
   SetQuantumImageType(image,quantum_type);
   quantum_info=DestroyQuantumInfo(quantum_info);
   if (EOFBlob(image) != MagickFalse)
     ThrowFileException(exception,CorruptImageError,"UnexpectedEndOfFile",
       image->filename);
   (void) CloseBlob(image);
   return(GetFirstImageInList(image));
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   R e g i s t e r V I C A R I m a g e                                       %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  RegisterVICARImage() adds attributes for the VICAR image format to
 %  the list of supported formats.  The attributes include the image format
 %  tag, a method to read and/or write the format, whether the format
 %  supports the saving of more than one frame to the same file or blob,
 %  whether the format supports native in-memory I/O, and a brief
 %  description of the format.
 %
 %  The format of the RegisterVICARImage method is:
 %
 %      size_t RegisterVICARImage(void)
 %
 */
