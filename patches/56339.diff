commit e2faeb80ec7757391a7c913532e69a96607fdcf6
Author: Martijn van Beurden <mvanb1@gmail.com>
Date:   Mon Mar 6 22:18:05 2023 +0100

    Check for 0 samples before outputting gnuplot data
    
    Credit: Oss-Fuzz
    Issue: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=56339
    Issue: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=56374

diff --git a/src/flac/analyze.c b/src/flac/analyze.c
index 053c7731..ff1b170d 100644
--- a/src/flac/analyze.c
+++ b/src/flac/analyze.c
@@ -65,106 +65,108 @@ void flac__analyze_init(analysis_options aopts)
 void flac__analyze_frame(const FLAC__Frame *frame, uint32_t frame_number, FLAC__uint64 frame_offset, FLAC__uint64 frame_bytes, analysis_options aopts, FILE *fout)
 {
 	const uint32_t channels = frame->header.channels;
 	char outfilename[1024];
 	subframe_stats_t stats;
 	uint32_t i, channel, partitions;
 
 	/* do the human-readable part first */
 	fprintf(fout, "frame=%u\toffset=%" PRIu64 "\tbits=%" PRIu64 "\tblocksize=%u\tsample_rate=%u\tchannels=%u\tchannel_assignment=%s\n", frame_number, frame_offset, frame_bytes*8, frame->header.blocksize, frame->header.sample_rate, channels, FLAC__ChannelAssignmentString[frame->header.channel_assignment]);
 	for(channel = 0; channel < channels; channel++) {
 		const FLAC__Subframe *subframe = frame->subframes+channel;
 		const FLAC__bool is_rice2 = subframe->data.fixed.entropy_coding_method.type == FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2;
 		const uint32_t pesc = is_rice2? FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2_ESCAPE_PARAMETER : FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE_ESCAPE_PARAMETER;
 		fprintf(fout, "\tsubframe=%u\twasted_bits=%u\ttype=%s", channel, subframe->wasted_bits, FLAC__SubframeTypeString[subframe->type]);
 		switch(subframe->type) {
 			case FLAC__SUBFRAME_TYPE_CONSTANT:
 				fprintf(fout, "\tvalue=%" PRId64 "\n", subframe->data.constant.value);
 				break;
 			case FLAC__SUBFRAME_TYPE_FIXED:
 				FLAC__ASSERT(subframe->data.fixed.entropy_coding_method.type <= FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2);
 				fprintf(fout, "\torder=%u\tresidual_type=%s\tpartition_order=%u\n", subframe->data.fixed.order, is_rice2? "RICE2":"RICE", subframe->data.fixed.entropy_coding_method.data.partitioned_rice.order);
 				for(i = 0; i < subframe->data.fixed.order; i++)
 					fprintf(fout, "\t\twarmup[%u]=%" PRId64 "\n", i, subframe->data.fixed.warmup[i]);
 				partitions = (1u << subframe->data.fixed.entropy_coding_method.data.partitioned_rice.order);
 				for(i = 0; i < partitions; i++) {
 					uint32_t parameter = subframe->data.fixed.entropy_coding_method.data.partitioned_rice.contents->parameters[i];
 					if(parameter == pesc)
 						fprintf(fout, "\t\tparameter[%u]=ESCAPE, raw_bits=%u\n", i, subframe->data.fixed.entropy_coding_method.data.partitioned_rice.contents->raw_bits[i]);
 					else
 						fprintf(fout, "\t\tparameter[%u]=%u\n", i, parameter);
 				}
 				if(aopts.do_residual_text) {
 					for(i = 0; i < frame->header.blocksize-subframe->data.fixed.order; i++)
 						fprintf(fout, "\t\tresidual[%u]=%d\n", i, subframe->data.fixed.residual[i]);
 				}
 				break;
 			case FLAC__SUBFRAME_TYPE_LPC:
 				FLAC__ASSERT(subframe->data.lpc.entropy_coding_method.type <= FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2);
 				fprintf(fout, "\torder=%u\tqlp_coeff_precision=%u\tquantization_level=%d\tresidual_type=%s\tpartition_order=%u\n", subframe->data.lpc.order, subframe->data.lpc.qlp_coeff_precision, subframe->data.lpc.quantization_level, is_rice2? "RICE2":"RICE", subframe->data.lpc.entropy_coding_method.data.partitioned_rice.order);
 				for(i = 0; i < subframe->data.lpc.order; i++)
 					fprintf(fout, "\t\tqlp_coeff[%u]=%d\n", i, subframe->data.lpc.qlp_coeff[i]);
 				for(i = 0; i < subframe->data.lpc.order; i++)
 					fprintf(fout, "\t\twarmup[%u]=%" PRId64 "\n", i, subframe->data.lpc.warmup[i]);
 				partitions = (1u << subframe->data.lpc.entropy_coding_method.data.partitioned_rice.order);
 				for(i = 0; i < partitions; i++) {
 					uint32_t parameter = subframe->data.lpc.entropy_coding_method.data.partitioned_rice.contents->parameters[i];
 					if(parameter == pesc)
 						fprintf(fout, "\t\tparameter[%u]=ESCAPE, raw_bits=%u\n", i, subframe->data.lpc.entropy_coding_method.data.partitioned_rice.contents->raw_bits[i]);
 					else
 						fprintf(fout, "\t\tparameter[%u]=%u\n", i, parameter);
 				}
 				if(aopts.do_residual_text) {
 					for(i = 0; i < frame->header.blocksize-subframe->data.lpc.order; i++)
 						fprintf(fout, "\t\tresidual[%u]=%d\n", i, subframe->data.lpc.residual[i]);
 				}
 				break;
 			case FLAC__SUBFRAME_TYPE_VERBATIM:
 				fprintf(fout, "\n");
 				break;
 		}
 	}
 
 	/* now do the residual distributions if requested */
 	if(aopts.do_residual_gnuplot) {
 		for(channel = 0; channel < channels; channel++) {
 			const FLAC__Subframe *subframe = frame->subframes+channel;
 			uint32_t residual_samples;
 
 			init_stats(&stats);
 
 			switch(subframe->type) {
 				case FLAC__SUBFRAME_TYPE_FIXED:
 					residual_samples = frame->header.blocksize - subframe->data.fixed.order;
 					for(i = 0; i < residual_samples; i++)
 						update_stats(&stats, subframe->data.fixed.residual[i], 1);
 					break;
 				case FLAC__SUBFRAME_TYPE_LPC:
 					residual_samples = frame->header.blocksize - subframe->data.lpc.order;
 					for(i = 0; i < residual_samples; i++)
 						update_stats(&stats, subframe->data.lpc.residual[i], 1);
 					break;
 				default:
 					break;
 			}
 
 			/* update all_ */
 			for(i = 0; i < stats.nbuckets; i++) {
 				update_stats(&all_, stats.buckets[i].residual, stats.buckets[i].count);
 			}
 
-			/* write the subframe */
-			flac_snprintf(outfilename, sizeof (outfilename), "f%06u.s%u.gp", frame_number, channel);
-			compute_stats(&stats);
+			if(stats.nsamples > 0) {
+				/* write the subframe */
+				flac_snprintf(outfilename, sizeof (outfilename), "f%06u.s%u.gp", frame_number, channel);
+				compute_stats(&stats);
 
-			(void)dump_stats(&stats, outfilename);
+				(void)dump_stats(&stats, outfilename);
+			}
 		}
 	}
 }
 
 void flac__analyze_finish(analysis_options aopts)
 {
-	if(aopts.do_residual_gnuplot) {
+	if(aopts.do_residual_gnuplot && all_.nsamples > 0) {
 		compute_stats(&all_);
 		(void)dump_stats(&all_, "all");
 	}
 }
