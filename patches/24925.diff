commit dba82a8c0453b7d4d138167a771c1c2988b889be
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Sun Aug 16 23:02:20 2020 +0200

    Fix XInclude regression introduced with recent commit
    
    The change to xmlXIncludeLoadFallback in commit 11b57459 could
    process already freed nodes if text nodes were merged after deleting
    nodes with an empty fallback.
    
    Found by OSS-Fuzz.

diff --git a/xinclude.c b/xinclude.c
index 41ff4e5f..ff265eb9 100644
--- a/xinclude.c
+++ b/xinclude.c
@@ -91,18 +91,19 @@ struct _xmlXIncludeCtxt {
 };
 
 static int
-xmlXIncludeDoProcess(xmlXIncludeCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr tree);
+xmlXIncludeDoProcess(xmlXIncludeCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr tree,
+                     int skipRoot);
 
 
 /************************************************************************
  *									*
  *			XInclude error handler				*
  *									*
  ************************************************************************/
 
 /**
  * xmlXIncludeErrMemory:
  * @extra:  extra information
  *
  * Handle an out of memory condition
  */
@@ -670,95 +671,95 @@ static void
 xmlXIncludeRecurseDoc(xmlXIncludeCtxtPtr ctxt, xmlDocPtr doc,
 	              const xmlURL url ATTRIBUTE_UNUSED) {
     xmlXIncludeCtxtPtr newctxt;
     int i;
 
     /*
      * Avoid recursion in already substituted resources
     for (i = 0;i < ctxt->urlNr;i++) {
 	if (xmlStrEqual(doc->URL, ctxt->urlTab[i]))
 	    return;
     }
      */
 
 #ifdef DEBUG_XINCLUDE
     xmlGenericError(xmlGenericErrorContext, "Recursing in doc %s\n", doc->URL);
 #endif
     /*
      * Handle recursion here.
      */
 
     newctxt = xmlXIncludeNewContext(doc);
     if (newctxt != NULL) {
 	/*
 	 * Copy the private user data
 	 */
 	newctxt->_private = ctxt->_private;
 	/*
 	 * Copy the existing document set
 	 */
 	newctxt->incMax = ctxt->incMax;
 	newctxt->incNr = ctxt->incNr;
         newctxt->incTab = (xmlXIncludeRefPtr *) xmlMalloc(newctxt->incMax *
 		                          sizeof(newctxt->incTab[0]));
         if (newctxt->incTab == NULL) {
 	    xmlXIncludeErrMemory(ctxt, (xmlNodePtr) doc, "processing doc");
 	    xmlFree(newctxt);
 	    return;
 	}
 	/*
 	 * copy the urlTab
 	 */
 	newctxt->urlMax = ctxt->urlMax;
 	newctxt->urlNr = ctxt->urlNr;
 	newctxt->urlTab = ctxt->urlTab;
 
 	/*
 	 * Inherit the existing base
 	 */
 	newctxt->base = xmlStrdup(ctxt->base);
 
 	/*
 	 * Inherit the documents already in use by other includes
 	 */
 	newctxt->incBase = ctxt->incNr;
 	for (i = 0;i < ctxt->incNr;i++) {
 	    newctxt->incTab[i] = ctxt->incTab[i];
 	    newctxt->incTab[i]->count++; /* prevent the recursion from
 					    freeing it */
 	}
 	/*
 	 * The new context should also inherit the Parse Flags
 	 * (bug 132597)
 	 */
 	newctxt->parseFlags = ctxt->parseFlags;
         newctxt->incTotal = ctxt->incTotal;
-	xmlXIncludeDoProcess(newctxt, doc, xmlDocGetRootElement(doc));
+	xmlXIncludeDoProcess(newctxt, doc, xmlDocGetRootElement(doc), 0);
         ctxt->incTotal = newctxt->incTotal;
 	for (i = 0;i < ctxt->incNr;i++) {
 	    newctxt->incTab[i]->count--;
 	    newctxt->incTab[i] = NULL;
 	}
 
 	/* urlTab may have been reallocated */
 	ctxt->urlTab = newctxt->urlTab;
 	ctxt->urlMax = newctxt->urlMax;
 
 	newctxt->urlMax = 0;
 	newctxt->urlNr = 0;
 	newctxt->urlTab = NULL;
 
 	xmlXIncludeFreeContext(newctxt);
     }
 #ifdef DEBUG_XINCLUDE
     xmlGenericError(xmlGenericErrorContext, "Done recursing in doc %s\n", url);
 #endif
 }
 
 /**
  * xmlXIncludeAddTxt:
  * @ctxt:  the XInclude context
  * @txt:  the new text node
  * @url:  the associated URL
  *
  * Add a new text node to the list
  */
@@ -1978,57 +1979,52 @@ static int
 xmlXIncludeLoadFallback(xmlXIncludeCtxtPtr ctxt, xmlNodePtr fallback, int nr) {
     xmlXIncludeCtxtPtr newctxt;
     int ret = 0;
     int oldNbErrors = ctxt->nbErrors;
 
     if ((fallback == NULL) || (fallback->type == XML_NAMESPACE_DECL) ||
         (ctxt == NULL))
 	return(-1);
     if (fallback->children != NULL) {
-        xmlNodePtr child, next;
-
 	/*
 	 * It's possible that the fallback also has 'includes'
 	 * (Bug 129969), so we re-process the fallback just in case
 	 */
 	newctxt = xmlXIncludeNewContext(ctxt->doc);
 	if (newctxt == NULL)
 	    return (-1);
 	newctxt->_private = ctxt->_private;
 	newctxt->base = xmlStrdup(ctxt->base);	/* Inherit the base from the existing context */
 	xmlXIncludeSetFlags(newctxt, ctxt->parseFlags);
         newctxt->incTotal = ctxt->incTotal;
-        for (child = fallback->children; child != NULL; child = next) {
-            next = child->next;
-	    if (xmlXIncludeDoProcess(newctxt, ctxt->doc, child) < 0)
-                ret = -1;
-        }
+        if (xmlXIncludeDoProcess(newctxt, ctxt->doc, fallback, 1) < 0)
+            ret = -1;
         ctxt->incTotal = newctxt->incTotal;
 	if (ctxt->nbErrors > oldNbErrors)
 	    ret = -1;
 	xmlXIncludeFreeContext(newctxt);
 
 	ctxt->incTab[nr]->inc = xmlDocCopyNodeList(ctxt->doc,
 	                                           fallback->children);
     } else {
         ctxt->incTab[nr]->inc = NULL;
 	ctxt->incTab[nr]->emptyFb = 1;	/* flag empty callback */
     }
     return(ret);
 }
 
 /************************************************************************
  *									*
  *			XInclude Processing				*
  *									*
  ************************************************************************/
 
 /**
  * xmlXIncludePreProcessNode:
  * @ctxt: an XInclude context
  * @node: an XInclude node
  *
  * Implement the XInclude preprocessing, currently just adding the element
  * for further processing.
  *
  * Returns the result list or NULL in case of error
  */
@@ -2318,170 +2314,177 @@ static int
 xmlXIncludeTestNode(xmlXIncludeCtxtPtr ctxt, xmlNodePtr node) {
     if (node == NULL)
 	return(0);
     if (node->type != XML_ELEMENT_NODE)
 	return(0);
     if (node->ns == NULL)
 	return(0);
     if ((xmlStrEqual(node->ns->href, XINCLUDE_NS)) ||
         (xmlStrEqual(node->ns->href, XINCLUDE_OLD_NS))) {
 	if (xmlStrEqual(node->ns->href, XINCLUDE_OLD_NS)) {
 	    if (ctxt->legacy == 0) {
 #if 0 /* wait for the XML Core Working Group to get something stable ! */
 		xmlXIncludeWarn(ctxt, node, XML_XINCLUDE_DEPRECATED_NS,
 	               "Deprecated XInclude namespace found, use %s",
 		                XINCLUDE_NS);
 #endif
 	        ctxt->legacy = 1;
 	    }
 	}
 	if (xmlStrEqual(node->name, XINCLUDE_NODE)) {
 	    xmlNodePtr child = node->children;
 	    int nb_fallback = 0;
 
 	    while (child != NULL) {
 		if ((child->type == XML_ELEMENT_NODE) &&
 		    (child->ns != NULL) &&
 		    ((xmlStrEqual(child->ns->href, XINCLUDE_NS)) ||
 		     (xmlStrEqual(child->ns->href, XINCLUDE_OLD_NS)))) {
 		    if (xmlStrEqual(child->name, XINCLUDE_NODE)) {
 			xmlXIncludeErr(ctxt, node,
 			               XML_XINCLUDE_INCLUDE_IN_INCLUDE,
 				       "%s has an 'include' child\n",
 				       XINCLUDE_NODE);
 			return(0);
 		    }
 		    if (xmlStrEqual(child->name, XINCLUDE_FALLBACK)) {
 			nb_fallback++;
 		    }
 		}
 		child = child->next;
 	    }
 	    if (nb_fallback > 1) {
 		xmlXIncludeErr(ctxt, node, XML_XINCLUDE_FALLBACKS_IN_INCLUDE,
 			       "%s has multiple fallback children\n",
 		               XINCLUDE_NODE);
 		return(0);
 	    }
 	    return(1);
 	}
 	if (xmlStrEqual(node->name, XINCLUDE_FALLBACK)) {
 	    if ((node->parent == NULL) ||
 		(node->parent->type != XML_ELEMENT_NODE) ||
 		(node->parent->ns == NULL) ||
 		((!xmlStrEqual(node->parent->ns->href, XINCLUDE_NS)) &&
 		 (!xmlStrEqual(node->parent->ns->href, XINCLUDE_OLD_NS))) ||
 		(!xmlStrEqual(node->parent->name, XINCLUDE_NODE))) {
 		xmlXIncludeErr(ctxt, node,
 		               XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE,
 			       "%s is not the child of an 'include'\n",
 			       XINCLUDE_FALLBACK);
 	    }
 	}
     }
     return(0);
 }
 
 /**
  * xmlXIncludeDoProcess:
  * @ctxt: the XInclude processing context
  * @doc: an XML document
  * @tree: the top of the tree to process
+ * @skipRoot: don't process the root node of the tree
  *
  * Implement the XInclude substitution on the XML document @doc
  *
  * Returns 0 if no substitution were done, -1 if some processing failed
  *    or the number of substitutions done.
  */
 static int
-xmlXIncludeDoProcess(xmlXIncludeCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr tree) {
+xmlXIncludeDoProcess(xmlXIncludeCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr tree,
+                     int skipRoot) {
     xmlNodePtr cur;
     int ret = 0;
     int i, start;
 
     if ((doc == NULL) || (tree == NULL) || (tree->type == XML_NAMESPACE_DECL))
 	return(-1);
+    if ((skipRoot) && (tree->children == NULL))
+        return(-1);
     if (ctxt == NULL)
 	return(-1);
 
     if (doc->URL != NULL) {
 	ret = xmlXIncludeURLPush(ctxt, doc->URL);
 	if (ret < 0)
 	    return(-1);
     }
     start = ctxt->incNr;
 
     /*
      * First phase: lookup the elements in the document
      */
-    cur = tree;
+    if (skipRoot)
+        cur = tree->children;
+    else
+        cur = tree;
     do {
 	/* TODO: need to work on entities -> stack */
         if (xmlXIncludeTestNode(ctxt, cur) == 1) {
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
             /*
              * Avoid superlinear expansion by limiting the total number
              * of replacements.
              */
             if (ctxt->incTotal >= 20)
                 return(-1);
 #endif
             ctxt->incTotal++;
             xmlXIncludePreProcessNode(ctxt, cur);
         } else if ((cur->children != NULL) &&
                    (cur->children->type != XML_ENTITY_DECL) &&
                    (cur->children->type != XML_XINCLUDE_START) &&
                    (cur->children->type != XML_XINCLUDE_END)) {
             cur = cur->children;
             continue;
         }
         do {
             if (cur == tree)
                 break;
             if (cur->next != NULL) {
                 cur = cur->next;
                 break;
             }
             cur = cur->parent;
         } while (cur != NULL);
     } while ((cur != NULL) && (cur != tree));
 
     /*
      * Second Phase : collect the infosets fragments
      */
     for (i = start;i < ctxt->incNr; i++) {
         xmlXIncludeLoadNode(ctxt, i);
 	ret++;
     }
 
     /*
      * Third phase: extend the original document infoset.
      *
      * Originally we bypassed the inclusion if there were any errors
      * encountered on any of the XIncludes.  A bug was raised (bug
      * 132588) requesting that we output the XIncludes without error,
      * so the check for inc!=NULL || xptr!=NULL was put in.  This may
      * give some other problems in the future, but for now it seems to
      * work ok.
      *
      */
     for (i = ctxt->incBase;i < ctxt->incNr; i++) {
 	if ((ctxt->incTab[i]->inc != NULL) ||
 		(ctxt->incTab[i]->xptr != NULL) ||
 		(ctxt->incTab[i]->emptyFb != 0))	/* (empty fallback) */
 	    xmlXIncludeIncludeNode(ctxt, i);
     }
 
     if (doc->URL != NULL)
 	xmlXIncludeURLPop(ctxt);
     return(ret);
 }
 
 /**
  * xmlXIncludeSetFlags:
  * @ctxt:  an XInclude processing context
  * @flags: a set of xmlParserOption used for parsing XML includes
  *
  * Set the flags used for further processing of XML resources.
  *
  * Returns 0 in case of success and -1 in case of error.
  */
@@ -2510,34 +2513,34 @@ int
 xmlXIncludeProcessTreeFlagsData(xmlNodePtr tree, int flags, void *data) {
     xmlXIncludeCtxtPtr ctxt;
     int ret = 0;
 
     if ((tree == NULL) || (tree->type == XML_NAMESPACE_DECL) ||
         (tree->doc == NULL))
         return(-1);
 
     ctxt = xmlXIncludeNewContext(tree->doc);
     if (ctxt == NULL)
         return(-1);
     ctxt->_private = data;
     ctxt->base = xmlStrdup((xmlChar *)tree->doc->URL);
     xmlXIncludeSetFlags(ctxt, flags);
-    ret = xmlXIncludeDoProcess(ctxt, tree->doc, tree);
+    ret = xmlXIncludeDoProcess(ctxt, tree->doc, tree, 0);
     if ((ret >= 0) && (ctxt->nbErrors > 0))
         ret = -1;
 
     xmlXIncludeFreeContext(ctxt);
     return(ret);
 }
 
 /**
  * xmlXIncludeProcessFlagsData:
  * @doc: an XML document
  * @flags: a set of xmlParserOption used for parsing XML includes
  * @data: application data that will be passed to the parser context
  *        in the _private field of the parser context(s)
  *
  * Implement the XInclude substitution on the XML document @doc
  *
  * Returns 0 if no substitution were done, -1 if some processing failed
  *    or the number of substitutions done.
  */
@@ -2596,29 +2599,29 @@ int
 xmlXIncludeProcessTreeFlags(xmlNodePtr tree, int flags) {
     xmlXIncludeCtxtPtr ctxt;
     int ret = 0;
 
     if ((tree == NULL) || (tree->type == XML_NAMESPACE_DECL) ||
         (tree->doc == NULL))
 	return(-1);
     ctxt = xmlXIncludeNewContext(tree->doc);
     if (ctxt == NULL)
 	return(-1);
     ctxt->base = xmlNodeGetBase(tree->doc, tree);
     xmlXIncludeSetFlags(ctxt, flags);
-    ret = xmlXIncludeDoProcess(ctxt, tree->doc, tree);
+    ret = xmlXIncludeDoProcess(ctxt, tree->doc, tree, 0);
     if ((ret >= 0) && (ctxt->nbErrors > 0))
 	ret = -1;
 
     xmlXIncludeFreeContext(ctxt);
     return(ret);
 }
 
 /**
  * xmlXIncludeProcessTree:
  * @tree: a node in an XML document
  *
  * Implement the XInclude substitution for the given subtree
  *
  * Returns 0 if no substitution were done, -1 if some processing failed
  *    or the number of substitutions done.
  */
@@ -2642,16 +2645,16 @@ int
 xmlXIncludeProcessNode(xmlXIncludeCtxtPtr ctxt, xmlNodePtr node) {
     int ret = 0;
 
     if ((node == NULL) || (node->type == XML_NAMESPACE_DECL) ||
         (node->doc == NULL) || (ctxt == NULL))
 	return(-1);
-    ret = xmlXIncludeDoProcess(ctxt, node->doc, node);
+    ret = xmlXIncludeDoProcess(ctxt, node->doc, node, 0);
     if ((ret >= 0) && (ctxt->nbErrors > 0))
 	ret = -1;
     return(ret);
 }
 
 #else /* !LIBXML_XINCLUDE_ENABLED */
 #endif
 #define bottom_xinclude
 #include "elfgcchack.h"
