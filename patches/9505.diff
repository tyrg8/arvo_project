commit c6a186860fea8711852d3c6ea32b2ee439ed96a3
Author: drons <drons@list.ru>
Date:   Sun Jul 22 20:33:55 2018 +0300

    RMF: Fix issues #779 & #780 (#784)
    
    * RMF: Fix buffer overflow (refs #779)
    
    * RMF: Add tile table size check (refs #779)
    
    * RMF: Additional tile size check. Fix possible tile size integer overflow (refs #779).
    
    * RMF: Add strict raster bit depth check at open (refs #779).
    
    * RMF: Add last tile size check (refs #779)

diff --git a/gdal/frmts/rmf/rmfdataset.cpp b/gdal/frmts/rmf/rmfdataset.cpp
index 93aff98335..55153521c2 100644
--- a/gdal/frmts/rmf/rmfdataset.cpp
+++ b/gdal/frmts/rmf/rmfdataset.cpp
@@ -1158,565 +1158,622 @@ do {                                                                    \
 #define RMF_READ_DOUBLE(ptr, value, offset)                             \
 do {                                                                    \
     (value) = *reinterpret_cast<double*>((ptr) + (offset));             \
     if( poDS->bBigEndian )                                              \
     {                                                                   \
         CPL_MSBPTR64(&(value));                                         \
     }                                                                   \
     else                                                                \
     {                                                                   \
         CPL_LSBPTR64(&(value));                                         \
     }                                                                   \
 } while( false );
 
 /* -------------------------------------------------------------------- */
 /*  Read the main header.                                               */
 /* -------------------------------------------------------------------- */
 
     {
         GByte abyHeader[RMF_HEADER_SIZE] = {};
 
         VSIFSeekL( poDS->fp, nNextHeaderOffset, SEEK_SET );
         if( VSIFReadL( abyHeader, 1, sizeof(abyHeader),
                        poDS->fp ) != sizeof(abyHeader) )
         {
             delete poDS;
             return nullptr;
         }
 
         if( memcmp(abyHeader, RMF_SigMTW, sizeof(RMF_SigMTW)) == 0 )
         {
             poDS->eRMFType = RMFT_MTW;
         }
         else if( memcmp(abyHeader, RMF_SigRSW_BE, sizeof(RMF_SigRSW_BE)) == 0 )
         {
             poDS->eRMFType = RMFT_RSW;
             poDS->bBigEndian = true;
         }
         else
         {
             poDS->eRMFType = RMFT_RSW;
         }
 
         memcpy( poDS->sHeader.bySignature, abyHeader, RMF_SIGNATURE_SIZE );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.iVersion, 4 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nSize, 8 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nOvrOffset, 12 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.iUserID, 16 );
         memcpy( poDS->sHeader.byName, abyHeader + 20,
                 sizeof(poDS->sHeader.byName) );
         poDS->sHeader.byName[sizeof(poDS->sHeader.byName) - 1] = '\0';
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nBitDepth, 52 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nHeight, 56 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nWidth, 60 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nXTiles, 64 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nYTiles, 68 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nTileHeight, 72 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nTileWidth, 76 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nLastTileHeight, 80 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nLastTileWidth, 84 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nROIOffset, 88 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nROISize, 92 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nClrTblOffset, 96 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nClrTblSize, 100 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nTileTblOffset, 104 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nTileTblSize, 108 );
         RMF_READ_LONG( abyHeader, poDS->sHeader.iMapType, 124 );
         RMF_READ_LONG( abyHeader, poDS->sHeader.iProjection, 128 );
         RMF_READ_LONG( abyHeader, poDS->sHeader.iEPSGCode, 132 );
         RMF_READ_DOUBLE( abyHeader, poDS->sHeader.dfScale, 136 );
         RMF_READ_DOUBLE( abyHeader, poDS->sHeader.dfResolution, 144 );
         RMF_READ_DOUBLE( abyHeader, poDS->sHeader.dfPixelSize, 152 );
         RMF_READ_DOUBLE( abyHeader, poDS->sHeader.dfLLY, 160 );
         RMF_READ_DOUBLE( abyHeader, poDS->sHeader.dfLLX, 168 );
         RMF_READ_DOUBLE( abyHeader, poDS->sHeader.dfStdP1, 176 );
         RMF_READ_DOUBLE( abyHeader, poDS->sHeader.dfStdP2, 184 );
         RMF_READ_DOUBLE( abyHeader, poDS->sHeader.dfCenterLong, 192 );
         RMF_READ_DOUBLE( abyHeader, poDS->sHeader.dfCenterLat, 200 );
         poDS->sHeader.iCompression = *(abyHeader + 208);
         poDS->sHeader.iMaskType = *(abyHeader + 209);
         poDS->sHeader.iMaskStep = *(abyHeader + 210);
         poDS->sHeader.iFrameFlag = *(abyHeader + 211);
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nFlagsTblOffset, 212 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nFlagsTblSize, 216 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nFileSize0, 220 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nFileSize1, 224 );
         poDS->sHeader.iUnknown = *(abyHeader + 228);
         poDS->sHeader.iGeorefFlag = *(abyHeader + 244);
         poDS->sHeader.iInverse = *(abyHeader + 245);
         poDS->sHeader.iJpegQuality = *(abyHeader + 246);
         memcpy( poDS->sHeader.abyInvisibleColors,
                 abyHeader + 248, sizeof(poDS->sHeader.abyInvisibleColors) );
         RMF_READ_DOUBLE( abyHeader, poDS->sHeader.adfElevMinMax[0], 280 );
         RMF_READ_DOUBLE( abyHeader, poDS->sHeader.adfElevMinMax[1], 288 );
         RMF_READ_DOUBLE(abyHeader, poDS->sHeader.dfNoData, 296);
 
         RMF_READ_ULONG( abyHeader, poDS->sHeader.iElevationUnit, 304 );
         poDS->sHeader.iElevationType = *(abyHeader + 308);
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nExtHdrOffset, 312 );
         RMF_READ_ULONG( abyHeader, poDS->sHeader.nExtHdrSize, 316 );
     }
 
+    if(poDS->sHeader.nTileTblSize % (sizeof(GUInt32)*2))
+    {
+        CPLError( CE_Warning, CPLE_IllegalArg,
+                  "Invalid tile table size." );
+        delete poDS;
+        return nullptr;
+    }
+
+    GUInt64 nMaxTileBits = 2ULL *
+                           static_cast<GUInt64>(poDS->sHeader.nTileWidth) *
+                           static_cast<GUInt64>(poDS->sHeader.nTileHeight) *
+                           static_cast<GUInt64>(poDS->sHeader.nBitDepth);
+    if(nMaxTileBits > static_cast<GUInt64>(std::numeric_limits<GUInt32>::max()))
+    {
+        CPLError(CE_Warning, CPLE_IllegalArg,
+                 "Invalid tile size. Width %lu, height %lu, bit depth %lu.",
+                 static_cast<unsigned long>(poDS->sHeader.nTileWidth),
+                 static_cast<unsigned long>(poDS->sHeader.nTileHeight),
+                 static_cast<unsigned long>(poDS->sHeader.nBitDepth));
+        delete poDS;
+        return nullptr;
+    }
+
+    if(poDS->sHeader.nLastTileWidth > poDS->sHeader.nTileWidth ||
+       poDS->sHeader.nLastTileHeight > poDS->sHeader.nTileHeight)
+    {
+        CPLError(CE_Warning, CPLE_IllegalArg,
+                 "Invalid last tile size %lu x %lu. "
+                 "It can't be greater than %lu x %lu.",
+                 static_cast<unsigned long>(poDS->sHeader.nLastTileWidth),
+                 static_cast<unsigned long>(poDS->sHeader.nLastTileHeight),
+                 static_cast<unsigned long>(poDS->sHeader.nTileWidth),
+                 static_cast<unsigned long>(poDS->sHeader.nTileHeight));
+        delete poDS;
+        return nullptr;
+    }
+
     if( poParentDS != nullptr )
     {
         if( 0 != memcmp( poDS->sHeader.bySignature,
                          poParentDS->sHeader.bySignature,
                          RMF_SIGNATURE_SIZE ) )
         {
             CPLError( CE_Warning, CPLE_IllegalArg,
                       "Invalid subheader signature." );
             delete poDS;
             return nullptr;
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*  Read the extended header.                                           */
 /* -------------------------------------------------------------------- */
 
     if( poDS->sHeader.nExtHdrOffset && poDS->sHeader.nExtHdrSize )
     {
         if( poDS->sHeader.nExtHdrSize > 1000000 )
         {
             delete poDS;
             return nullptr;
         }
         GByte *pabyExtHeader = reinterpret_cast<GByte *>(
             CPLCalloc( poDS->sHeader.nExtHdrSize, 1 ) );
         if( pabyExtHeader == nullptr )
         {
             delete poDS;
             return nullptr;
         }
 
         VSIFSeekL( poDS->fp, poDS->GetFileOffset( poDS->sHeader.nExtHdrOffset ),
                    SEEK_SET );
         VSIFReadL( pabyExtHeader, 1, poDS->sHeader.nExtHdrSize, poDS->fp );
 
         if( poDS->sHeader.nExtHdrSize >= 36 + 4 )
         {
             RMF_READ_LONG( pabyExtHeader, poDS->sExtHeader.nEllipsoid, 24 );
             RMF_READ_LONG( pabyExtHeader, poDS->sExtHeader.nDatum, 32 );
             RMF_READ_LONG( pabyExtHeader, poDS->sExtHeader.nZone, 36 );
         }
 
         CPLFree( pabyExtHeader );
     }
 
 #undef RMF_READ_DOUBLE
 #undef RMF_READ_LONG
 #undef RMF_READ_ULONG
 
     CPLDebug( "RMF", "Version %d", poDS->sHeader.iVersion );
 
 #ifdef DEBUG
 
     CPLDebug( "RMF", "%s image has width %d, height %d, bit depth %d, "
               "compression scheme %d, %s, nodata %f",
               (poDS->eRMFType == RMFT_MTW) ? "MTW" : "RSW",
               poDS->sHeader.nWidth, poDS->sHeader.nHeight,
               poDS->sHeader.nBitDepth, poDS->sHeader.iCompression,
               poDS->bBigEndian ? "big endian" : "little endian",
               poDS->sHeader.dfNoData );
     CPLDebug( "RMF", "Size %d, offset to overview %#lx, user ID %d, "
               "ROI offset %#lx, ROI size %d",
               poDS->sHeader.nSize,
               static_cast<unsigned long>( poDS->sHeader.nOvrOffset ),
               poDS->sHeader.iUserID,
               static_cast<unsigned long>( poDS->sHeader.nROIOffset ),
               poDS->sHeader.nROISize );
     CPLDebug( "RMF", "Map type %d, projection %d, scale %f, resolution %f, ",
               poDS->sHeader.iMapType, poDS->sHeader.iProjection,
               poDS->sHeader.dfScale, poDS->sHeader.dfResolution );
     CPLDebug( "RMF", "EPSG %d ", (int)poDS->sHeader.iEPSGCode );
     CPLDebug( "RMF", "Georeferencing: pixel size %f, LLX %f, LLY %f",
               poDS->sHeader.dfPixelSize,
               poDS->sHeader.dfLLX, poDS->sHeader.dfLLY );
     if( poDS->sHeader.nROIOffset && poDS->sHeader.nROISize )
     {
         GInt32 nValue = 0;
 
         CPLDebug( "RMF", "ROI coordinates:" );
         /* coverity[tainted_data] */
         for( GUInt32 i = 0; i < poDS->sHeader.nROISize; i += sizeof(nValue) )
         {
             if( VSIFSeekL( poDS->fp,
                            poDS->GetFileOffset( poDS->sHeader.nROIOffset + i ),
                            SEEK_SET ) != 0 ||
                 VSIFReadL( &nValue, 1, sizeof(nValue),
                            poDS->fp ) != sizeof(nValue) )
             {
                 CPLDebug("RMF", "Cannot read ROI at index %u", i);
                 break;
                 //delete poDS;
                 //return nullptr;
             }
 
             CPLDebug( "RMF", "%d", nValue );
         }
     }
 #endif
     if( poDS->sHeader.nWidth >= INT_MAX ||
         poDS->sHeader.nHeight >= INT_MAX ||
         !GDALCheckDatasetDimensions(poDS->sHeader.nWidth, poDS->sHeader.nHeight) )
     {
         delete poDS;
         return nullptr;
     }
 
 /* -------------------------------------------------------------------- */
 /*  Read array of blocks offsets/sizes.                                 */
 /* -------------------------------------------------------------------- */
 
     // To avoid useless excessive memory allocation
     if( poDS->sHeader.nTileTblSize > 1000000 )
     {
         VSIFSeekL( poDS->fp, 0, SEEK_END );
         vsi_l_offset nFileSize = VSIFTellL( poDS->fp );
         if( nFileSize < poDS->sHeader.nTileTblSize )
         {
             delete poDS;
             return nullptr;
         }
     }
 
     if( VSIFSeekL( poDS->fp,
                    poDS->GetFileOffset( poDS->sHeader.nTileTblOffset ),
                    SEEK_SET ) < 0 )
     {
         delete poDS;
         return nullptr;
     }
 
     poDS->paiTiles = reinterpret_cast<GUInt32 *>(
         VSIMalloc( poDS->sHeader.nTileTblSize ) );
     if( !poDS->paiTiles )
     {
         delete poDS;
         return nullptr;
     }
 
     if( VSIFReadL( poDS->paiTiles, 1, poDS->sHeader.nTileTblSize,
                    poDS->fp ) < poDS->sHeader.nTileTblSize )
     {
         CPLDebug( "RMF", "Can't read tiles offsets/sizes table." );
         delete poDS;
         return nullptr;
     }
 
 #ifdef CPL_MSB
     if( !poDS->bBigEndian )
     {
         for( GUInt32 i = 0;
              i < poDS->sHeader.nTileTblSize / sizeof(GUInt32);
              i++ )
             CPL_SWAP32PTR( poDS->paiTiles + i );
     }
 #else
     if( poDS->bBigEndian )
     {
         for( GUInt32 i = 0;
              i < poDS->sHeader.nTileTblSize / sizeof(GUInt32);
              i++ )
             CPL_SWAP32PTR( poDS->paiTiles + i );
     }
 #endif
 
 #ifdef DEBUG
     CPLDebug( "RMF", "List of block offsets/sizes:" );
 
     for( GUInt32 i = 0;
          i < poDS->sHeader.nTileTblSize / sizeof(GUInt32);
          i += 2 )
     {
         CPLDebug( "RMF", "    %u / %u",
                   poDS->paiTiles[i], poDS->paiTiles[i + 1] );
     }
 #endif
 
 /* -------------------------------------------------------------------- */
 /*  Set up essential image parameters.                                  */
 /* -------------------------------------------------------------------- */
     GDALDataType eType = GDT_Byte;
 
     poDS->nRasterXSize = poDS->sHeader.nWidth;
     poDS->nRasterYSize = poDS->sHeader.nHeight;
 
     if( poDS->eRMFType == RMFT_RSW )
     {
         switch( poDS->sHeader.nBitDepth )
         {
             case 32:
             case 24:
             case 16:
                 poDS->nBands = 3;
                 break;
             case 1:
             case 4:
             case 8:
                 if( poParentDS != nullptr && poParentDS->poColorTable != nullptr )
                 {
                     poDS->poColorTable = poParentDS->poColorTable->Clone();
                 }
                 else
                 {
                     // Allocate memory for colour table and read it
                     poDS->nColorTableSize = 1 << poDS->sHeader.nBitDepth;
                     GUInt32 nExpectedColorTableBytes = poDS->nColorTableSize * 4;
                     if(nExpectedColorTableBytes > poDS->sHeader.nClrTblSize )
                     {
                         // We could probably test for strict equality in
                         // the above test ???
                         CPLDebug( "RMF",
                                   "Wrong color table size. "
                                   "Expected %u, got %u.",
                                   nExpectedColorTableBytes,
                                   poDS->sHeader.nClrTblSize );
                         delete poDS;
                         return nullptr;
                     }
                     poDS->pabyColorTable = reinterpret_cast<GByte *>(
                         VSIMalloc( nExpectedColorTableBytes ) );
                     if( poDS->pabyColorTable == nullptr )
                     {
                         CPLDebug( "RMF", "Can't allocate color table." );
                         delete poDS;
                         return nullptr;
                     }
                     if( VSIFSeekL( poDS->fp,
                                    poDS->GetFileOffset( poDS->sHeader.nClrTblOffset ),
                                    SEEK_SET ) < 0 )
                     {
                         CPLDebug( "RMF",
                                   "Can't seek to color table location." );
                         delete poDS;
                         return nullptr;
                     }
                     if( VSIFReadL( poDS->pabyColorTable, 1,
                                    nExpectedColorTableBytes, poDS->fp )
                         < nExpectedColorTableBytes )
                     {
                         CPLDebug( "RMF", "Can't read color table." );
                         delete poDS;
                         return nullptr;
                     }
 
                     poDS->poColorTable = new GDALColorTable();
                     for( GUInt32 i = 0; i < poDS->nColorTableSize; i++ )
                     {
                         const GDALColorEntry oEntry = {
                             poDS->pabyColorTable[i * 4],     // Red
                             poDS->pabyColorTable[i * 4 + 1], // Green
                             poDS->pabyColorTable[i * 4 + 2], // Blue
                             255                              // Alpha
                         };
 
                         poDS->poColorTable->SetColorEntry( i, &oEntry );
                     }
                 }
                 poDS->nBands = 1;
                 break;
             default:
-                break;
+                CPLError(CE_Warning, CPLE_IllegalArg,
+                         "Invalid RSW bit depth %lu.",
+                         static_cast<unsigned long>(poDS->sHeader.nBitDepth));
+                delete poDS;
+                return nullptr;
         }
         eType = GDT_Byte;
     }
     else
     {
         poDS->nBands = 1;
         if( poDS->sHeader.nBitDepth == 8 )
+        {
             eType = GDT_Byte;
+        }
         else if( poDS->sHeader.nBitDepth == 16 )
+        {
             eType = GDT_Int16;
+        }
         else if( poDS->sHeader.nBitDepth == 32 )
+        {
             eType = GDT_Int32;
+        }
         else if( poDS->sHeader.nBitDepth == 64 )
+        {
             eType = GDT_Float64;
+        }
+        else
+        {
+            CPLError(CE_Warning, CPLE_IllegalArg,
+                     "Invalid MTW bit depth %lu.",
+                     static_cast<unsigned long>(poDS->sHeader.nBitDepth));
+            delete poDS;
+            return nullptr;
+        }
     }
 
     if( poDS->sHeader.nTileWidth == 0 || poDS->sHeader.nTileWidth > INT_MAX ||
         poDS->sHeader.nTileHeight == 0 || poDS->sHeader.nTileHeight > INT_MAX )
     {
         CPLDebug("RMF", "Invalid tile dimension : %u x %u",
                  poDS->sHeader.nTileWidth, poDS->sHeader.nTileHeight);
         delete poDS;
         return nullptr;
     }
 
     const int nDataSize = GDALGetDataTypeSizeBytes( eType );
     const int nBlockXSize = static_cast<int>(poDS->sHeader.nTileWidth);
     const int nBlockYSize = static_cast<int>(poDS->sHeader.nTileHeight);
     if( nDataSize == 0 ||
         nBlockXSize > INT_MAX / nBlockYSize ||
         nBlockYSize > INT_MAX / nDataSize ||
         nBlockXSize > INT_MAX / (nBlockYSize * nDataSize) )
     {
         CPLDebug ("RMF", "Too big raster / tile dimension");
         delete poDS;
         return nullptr;
     }
 
     poDS->nXTiles = DIV_ROUND_UP( poDS->nRasterXSize, nBlockXSize );
     poDS->nYTiles = DIV_ROUND_UP( poDS->nRasterYSize, nBlockYSize );
 
 #ifdef DEBUG
     CPLDebug( "RMF", "Image is %d tiles wide, %d tiles long",
               poDS->nXTiles, poDS->nYTiles );
 #endif
 
 /* -------------------------------------------------------------------- */
 /*  Choose compression scheme.                                          */
 /* -------------------------------------------------------------------- */
     if(CE_None != poDS->SetupCompression(eType, poOpenInfo->pszFilename))
     {
         delete poDS;
         return nullptr;
     }
 
     if(poOpenInfo->eAccess == GA_Update)
     {
         if(poParentDS == nullptr)
         {
             if(CE_None != poDS->InitCompressorData(poOpenInfo->papszOpenOptions))
             {
                 delete poDS;
                 return nullptr;
             }
         }
         else
         {
             poDS->poCompressData = poParentDS->poCompressData;
         }
     }
 /* -------------------------------------------------------------------- */
 /*  Create band information objects.                                    */
 /* -------------------------------------------------------------------- */
     for( int iBand = 1; iBand <= poDS->nBands; iBand++ )
         poDS->SetBand( iBand, new RMFRasterBand( poDS, iBand, eType ) );
 
     poDS->SetupNBits();
 
     if(poDS->nBands > 1)
     {
         poDS->SetMetadataItem("INTERLEAVE", "PIXEL", "IMAGE_STRUCTURE");
     }
 /* -------------------------------------------------------------------- */
 /*  Set up projection.                                                  */
 /*                                                                      */
 /*  XXX: If projection value is not specified, but image still have     */
 /*  georeferencing information, assume Gauss-Kruger projection.         */
 /* -------------------------------------------------------------------- */
     if(poDS->sHeader.iEPSGCode > RMF_EPSG_MIN_CODE ||
        poDS->sHeader.iProjection > 0 ||
        (poDS->sHeader.dfPixelSize != 0.0 &&
         poDS->sHeader.dfLLX != 0.0 &&
         poDS->sHeader.dfLLY != 0.0))
     {
         OGRSpatialReference oSRS;
         GInt32 nProj =
             (poDS->sHeader.iProjection) ? poDS->sHeader.iProjection : 1;
         double padfPrjParams[8] = {
             poDS->sHeader.dfStdP1,
             poDS->sHeader.dfStdP2,
             poDS->sHeader.dfCenterLat,
             poDS->sHeader.dfCenterLong,
             1.0,
             0.0,
             0.0,
             0.0
           };
 
         // XXX: Compute zone number for Gauss-Kruger (Transverse Mercator)
         // projection if it is not specified.
         if( nProj == 1L && poDS->sHeader.dfCenterLong == 0.0 )
         {
             if( poDS->sExtHeader.nZone == 0 )
             {
                 double centerXCoord = poDS->sHeader.dfLLX +
                     (poDS->nRasterXSize * poDS->sHeader.dfPixelSize / 2.0);
                 padfPrjParams[7] =
                     floor((centerXCoord - 500000.0 ) / 1000000.0);
             }
             else
             {
                 padfPrjParams[7] = poDS->sExtHeader.nZone;
             }
         }
 
         OGRErr  res = OGRERR_FAILURE;
         if(nProj >= 0 &&
            (poDS->sExtHeader.nDatum >= 0 || poDS->sExtHeader.nEllipsoid >= 0))
         {
             res = oSRS.importFromPanorama( nProj, poDS->sExtHeader.nDatum,
                                  poDS->sExtHeader.nEllipsoid, padfPrjParams );
         }
 
         if(poDS->sHeader.iEPSGCode > RMF_EPSG_MIN_CODE &&
            (OGRERR_NONE != res || oSRS.IsLocal()))
         {
             oSRS.importFromEPSG(poDS->sHeader.iEPSGCode);
         }
 
         if( poDS->pszProjection )
             CPLFree( poDS->pszProjection );
         oSRS.exportToWkt( &poDS->pszProjection );
     }
 
 /* -------------------------------------------------------------------- */
 /*  Set up georeferencing.                                              */
 /* -------------------------------------------------------------------- */
     if( (poDS->eRMFType == RMFT_RSW && poDS->sHeader.iGeorefFlag) ||
         (poDS->eRMFType == RMFT_MTW && poDS->sHeader.dfPixelSize != 0.0) )
     {
         poDS->adfGeoTransform[0] = poDS->sHeader.dfLLX;
         poDS->adfGeoTransform[3] = poDS->sHeader.dfLLY
             + poDS->nRasterYSize * poDS->sHeader.dfPixelSize;
         poDS->adfGeoTransform[1] = poDS->sHeader.dfPixelSize;
         poDS->adfGeoTransform[5] = - poDS->sHeader.dfPixelSize;
         poDS->adfGeoTransform[2] = 0.0;
         poDS->adfGeoTransform[4] = 0.0;
     }
 
 /* -------------------------------------------------------------------- */
 /*  Set units.                                                          */
 /* -------------------------------------------------------------------- */
 
     if( poDS->eRMFType == RMFT_MTW )
     {
         CPLFree(poDS->pszUnitType);
         poDS->pszUnitType = RMFUnitTypeToStr(poDS->sHeader.iElevationUnit);
     }
 
 /* -------------------------------------------------------------------- */
 /*  Report some other dataset related information.                      */
 /* -------------------------------------------------------------------- */
 
     if( poDS->eRMFType == RMFT_MTW )
     {
         char szTemp[256] = {};
 
         snprintf(szTemp, sizeof(szTemp), "%g", poDS->sHeader.adfElevMinMax[0]);
         poDS->SetMetadataItem( "ELEVATION_MINIMUM", szTemp );
 
         snprintf(szTemp, sizeof(szTemp), "%g", poDS->sHeader.adfElevMinMax[1]);
         poDS->SetMetadataItem( "ELEVATION_MAXIMUM", szTemp );
 
         poDS->SetMetadataItem( "ELEVATION_UNITS", poDS->pszUnitType );
 
         snprintf(szTemp, sizeof(szTemp), "%d", poDS->sHeader.iElevationType);
         poDS->SetMetadataItem( "ELEVATION_TYPE", szTemp );
     }
 
 /* -------------------------------------------------------------------- */
 /*      Check for overviews.                                            */
 /* -------------------------------------------------------------------- */
     if( nNextHeaderOffset == 0 && poParentDS == nullptr )
     {
         poDS->oOvManager.Initialize( poDS, poOpenInfo->pszFilename );
     }
 
     return poDS;
 }
 
 /************************************************************************/
 /*                               Create()                               */
 /************************************************************************/
@@ -2804,128 +2861,140 @@ CPLErr RMFDataset::WriteRawTile(int nBlockXOff, int nBlockYOff,
 CPLErr RMFDataset::ReadTile(int nBlockXOff, int nBlockYOff,
                             GByte* pabyData, size_t nRawBytes,
                             GUInt32 nRawXSize, GUInt32 nRawYSize)
 {
     const GUInt32 nTile = nBlockYOff * nXTiles + nBlockXOff;
     if(2 * nTile + 1 >= sHeader.nTileTblSize / sizeof(GUInt32))
     {
         return CE_Failure;
     }
-
-    GUInt32 nTileBytes = paiTiles[2 * nTile + 1];
     vsi_l_offset nTileOffset = GetFileOffset(paiTiles[2 * nTile]);
+    GUInt32 nTileBytes = paiTiles[2 * nTile + 1];
+    // RMF doesn't store compresed tiles with size greater than 80% of
+    // uncompressed size. But just in case, select twice as many.
+    GUInt32 nMaxTileBytes = 2 * sHeader.nTileWidth * sHeader.nTileHeight *
+                            sHeader.nBitDepth / 8;
+
+    if(nTileBytes >= nMaxTileBytes)
+    {
+        CPLError(CE_Failure, CPLE_AppDefined,
+                 "Invalid tile size %lu at offset %ld. Must be less than %lu",
+                 static_cast<unsigned long>(nTileBytes),
+                 static_cast<long>(nTileOffset),
+                 static_cast<unsigned long>(nMaxTileBytes));
+        return CE_Failure;
+    }
+
 
     if(nTileOffset == 0)
     {
         return CE_None;
     }
 
 #ifdef DEBUG
     CPLDebug("RMF", "Read RawSize [%d, %d], nTileBytes %d, nRawBytes %d",
              nRawXSize, nRawYSize,
              static_cast<int>(nTileBytes),
              static_cast<int>(nRawBytes));
 #endif // DEBUG
 
     if(VSIFSeekL(fp, nTileOffset, SEEK_SET) < 0)
     {
         // XXX: We will not report error here, because file just may be
         // in update state and data for this block will be available later
         if(eAccess == GA_Update)
             return CE_None;
 
         CPLError(CE_Failure, CPLE_FileIO,
                  "Can't seek to offset %ld in input file to read data.\n%s",
                  static_cast<long>(nTileOffset),
                  VSIStrerror( errno ));
         return CE_Failure;
     }
 
     if(Decompress == nullptr ||
        nTileBytes == nRawBytes)
     {
         if(nTileBytes != nRawBytes)
         {
             CPLError(CE_Failure, CPLE_AppDefined,
                      "RMF: Invalid tile size %lu, expected %lu",
                      static_cast<unsigned long>(nTileBytes),
                      static_cast<unsigned long>(nRawBytes));
             return CE_Failure;
         }
 
         if(VSIFReadL(pabyData, 1, nRawBytes, fp) < nRawBytes)
         {
             CPLError( CE_Failure, CPLE_FileIO,
                       "RMF: Can't read at offset %lu from input file.\n%s",
                       static_cast<unsigned long>(nTileOffset),
                       VSIStrerror(errno));
             return CE_Failure;
         }
 
 #ifdef CPL_MSB
     if(eRMFType == RMFT_MTW)
     {
         if(sHeader.nBitDepth == 16)
         {
             for(GUInt32 i = 0; i < nRawBytes; i += 2)
                 CPL_SWAP16PTR(pabyData + i);
         }
         else if(sHeader.nBitDepth == 32)
         {
             for(GUInt32 i = 0; i < nRawBytes; i += 4)
                 CPL_SWAP32PTR(pabyData + i);
         }
         else if(sHeader.nBitDepth == 64)
         {
             for( GUInt32 i = 0; i < nRawBytes; i += 8)
                 CPL_SWAPDOUBLE(pabyData + i);
         }
     }
 #endif
         return CE_None;
     }
 
     if(pabyDecompressBuffer == nullptr)
     {
-        GUInt32 nMaxTileBytes = sHeader.nTileWidth * sHeader.nTileHeight *
-                                sHeader.nBitDepth / 8;
         pabyDecompressBuffer =
            reinterpret_cast<GByte*>(VSIMalloc(std::max(1U, nMaxTileBytes)));
         if(!pabyDecompressBuffer)
         {
             CPLError(CE_Failure, CPLE_OutOfMemory,
                      "Can't allocate decompress buffer of size %lu.\n%s",
                      static_cast<unsigned long>(nMaxTileBytes),
                      VSIStrerror(errno));
             return CE_Failure;
         }
     }
 
     if(VSIFReadL(pabyDecompressBuffer, 1, nTileBytes, fp) < nTileBytes)
     {
         CPLError( CE_Failure, CPLE_FileIO,
                   "RMF: Can't read at offset %lu from input file.\n%s",
                   static_cast<unsigned long>(nTileOffset), VSIStrerror(errno));
         return CE_Failure;
     }
 
     size_t  nDecompressedSize =
                     Decompress(pabyDecompressBuffer, nTileBytes,
                                pabyData, static_cast<GUInt32>(nRawBytes),
                                nRawXSize, nRawYSize);
 
     if(nDecompressedSize != (size_t)nRawBytes)
     {
         CPLError( CE_Failure, CPLE_FileIO,
                   "Can't decompress tile xOff %d yOff %d. "
                   "Raw tile size is %lu but decompressed is %lu. "
                   "Compressed tile size is %lu",
                   nBlockXOff, nBlockYOff,
                   static_cast<unsigned long>(nRawBytes),
                   static_cast<unsigned long>(nDecompressedSize),
                   static_cast<unsigned long>(nTileBytes));
         return CE_Failure;
     }
     // We don't need to swap bytes here,
     // because decompressed data is in proper byte order
     return CE_None;
 }
