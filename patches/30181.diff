commit af1c98b16ef3fb90c7c1714d61f069b38d479588
Merge: d7ac40b 9af08af
Author: David Garske <david@wolfssl.com>
Date:   Thu Feb 4 16:15:26 2021 -0800

    Merge pull request #199 from embhorn/zd11619
    
    NULL username does not require extra length

diff --git a/src/mqtt_packet.c b/src/mqtt_packet.c
index 321518f..815bf7d 100755
--- a/src/mqtt_packet.c
+++ b/src/mqtt_packet.c
@@ -610,155 +610,145 @@ int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
 /* Packet Type Encoders/Decoders */
 int MqttEncode_Connect(byte *tx_buf, int tx_buf_len, MqttConnect *mc_connect)
 {
     int header_len, remain_len;
 #ifdef WOLFMQTT_V5
     word32 props_len = 0, lwt_props_len = 0;
 #endif
     MqttConnectPacket packet = MQTT_CONNECT_INIT;
     byte *tx_payload;
 
     /* Validate required arguments */
     if (tx_buf == NULL || mc_connect == NULL || mc_connect->client_id == NULL) {
         return MQTT_CODE_ERROR_BAD_ARG;
     }
 
     /* Determine packet length */
     /* MQTT Version 4/5 header is 10 bytes */
     remain_len = sizeof(MqttConnectPacket);
 
 #ifdef WOLFMQTT_V5
     if (mc_connect->protocol_level >= MQTT_CONNECT_PROTOCOL_LEVEL_5) {
         /* Determine length of properties */
         remain_len += props_len = MqttEncode_Props(MQTT_PACKET_TYPE_CONNECT,
                 mc_connect->props, NULL);
 
         /* Determine the length of the "property length" */
         remain_len += MqttEncode_Vbi(NULL, props_len);
     }
 #endif
 
     remain_len += (int)XSTRLEN(mc_connect->client_id) + MQTT_DATA_LEN_SIZE;
     if (mc_connect->enable_lwt) {
         /* Verify all required fields are present */
         if (mc_connect->lwt_msg == NULL ||
             mc_connect->lwt_msg->topic_name == NULL ||
             (mc_connect->lwt_msg->buffer == NULL &&
              mc_connect->lwt_msg->total_len != 0))
         {
             return MQTT_CODE_ERROR_BAD_ARG;
         }
 
         remain_len += (int)XSTRLEN(mc_connect->lwt_msg->topic_name);
         remain_len += MQTT_DATA_LEN_SIZE;
         remain_len += mc_connect->lwt_msg->total_len;
         remain_len += MQTT_DATA_LEN_SIZE;
 #ifdef WOLFMQTT_V5
     if (mc_connect->protocol_level >= MQTT_CONNECT_PROTOCOL_LEVEL_5) {
         /* Determine length of properties */
         remain_len += lwt_props_len = MqttEncode_Props(MQTT_PACKET_TYPE_CONNECT,
                 mc_connect->lwt_msg->props, NULL);
 
         /* Determine the length of the "lwt property length" */
         remain_len += MqttEncode_Vbi(NULL, lwt_props_len);
     }
 #endif
     }
     if (mc_connect->username) {
         remain_len += (int)XSTRLEN(mc_connect->username) + MQTT_DATA_LEN_SIZE;
     }
     if (mc_connect->password) {
         remain_len += (int)XSTRLEN(mc_connect->password) + MQTT_DATA_LEN_SIZE;
     }
 
     /* Encode fixed header */
     header_len = MqttEncode_FixedHeader(tx_buf, tx_buf_len, remain_len,
         MQTT_PACKET_TYPE_CONNECT, 0, 0, 0);
     if (header_len < 0) {
         return header_len;
     }
     /* Check for buffer room */
     if (tx_buf_len < header_len + remain_len) {
         return MQTT_CODE_ERROR_OUT_OF_BUFFER;
     }
     tx_payload = &tx_buf[header_len];
 
     /* Encode variable header */
     /* Protocol version */
     if (mc_connect->protocol_level != 0) {
         packet.protocol_level = mc_connect->protocol_level;
     }
 
     /* Set connection flags */
     if (mc_connect->clean_session) {
         packet.flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
     }
     if (mc_connect->enable_lwt) {
         packet.flags |= MQTT_CONNECT_FLAG_WILL_FLAG;
 
         if (mc_connect->lwt_msg->qos) {
             packet.flags |= MQTT_CONNECT_FLAG_SET_QOS(mc_connect->lwt_msg->qos);
         }
         if (mc_connect->lwt_msg->retain) {
             packet.flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
         }
     }
     if (mc_connect->username) {
         packet.flags |= MQTT_CONNECT_FLAG_USERNAME;
     }
     if (mc_connect->password) {
         packet.flags |= MQTT_CONNECT_FLAG_PASSWORD;
     }
     MqttEncode_Num((byte*)&packet.keep_alive, mc_connect->keep_alive_sec);
     XMEMCPY(tx_payload, &packet, sizeof(MqttConnectPacket));
     tx_payload += sizeof(MqttConnectPacket);
 
 #ifdef WOLFMQTT_V5
     if (mc_connect->protocol_level >= MQTT_CONNECT_PROTOCOL_LEVEL_5) {
         /* Encode the property length */
         tx_payload += MqttEncode_Vbi(tx_payload, props_len);
 
         /* Encode properties */
         tx_payload += MqttEncode_Props(MQTT_PACKET_TYPE_CONNECT, mc_connect->props,
                         tx_payload);
     }
 #endif
 
     /* Encode payload */
     tx_payload += MqttEncode_String(tx_payload, mc_connect->client_id);
     if (mc_connect->enable_lwt) {
 #ifdef WOLFMQTT_V5
     if (mc_connect->protocol_level >= MQTT_CONNECT_PROTOCOL_LEVEL_5) {
         /* Encode the lwt property length */
         tx_payload += MqttEncode_Vbi(tx_payload, lwt_props_len);
 
         /* Encode lwt properties */
         tx_payload += MqttEncode_Props(MQTT_PACKET_TYPE_CONNECT,
                 mc_connect->lwt_msg->props, tx_payload);
     }
 #endif
         tx_payload += MqttEncode_String(tx_payload,
             mc_connect->lwt_msg->topic_name);
         tx_payload += MqttEncode_Data(tx_payload,
             mc_connect->lwt_msg->buffer, (word16)mc_connect->lwt_msg->total_len);
     }
     if (mc_connect->username) {
         tx_payload += MqttEncode_String(tx_payload, mc_connect->username);
     }
-    else {
-        /* A Server MAY allow a Client to supply a ClientID that has a length
-         * of zero bytes, however if it does so the Server MUST treat this as a
-         * special case and assign a unique ClientID to that Client
-         * [MQTT-3.1.3-6]. It MUST then process the CONNECT packet as if the
-         * Client had provided that unique ClientID, and MUST return the
-         * Assigned Client Identifier in the CONNACK packet [MQTT-3.1.3-7].
-         */
-        tx_payload += MqttEncode_Num(tx_payload, (word16)0);
-    }
     if (mc_connect->password) {
         tx_payload += MqttEncode_String(tx_payload, mc_connect->password);
     }
     (void)tx_payload;
 
     /* Return total length of packet */
     return header_len + remain_len;
 }
