commit 66e59da0336526c1f2d2d49aa12838b26d0e8240
Author: Alan T. DeKok <aland@freeradius.org>
Date:   Thu Oct 7 18:00:15 2021 -0400

    do additional validation in dns_label_decode()

diff --git a/src/lib/util/dns.c b/src/lib/util/dns.c
index 0359083eda..c8f71f86aa 100644
--- a/src/lib/util/dns.c
+++ b/src/lib/util/dns.c
@@ -1135,159 +1135,184 @@ ssize_t fr_dns_labels_network_verify(uint8_t const *packet, uint8_t const *buf,
 	return label - buf;
 }
 
-static ssize_t dns_label_decode(uint8_t const *buf, uint8_t const **start, uint8_t const **next)
+static ssize_t dns_label_decode(uint8_t const *packet, uint8_t const *end, uint8_t const **start, uint8_t const **next)
 {
-	uint8_t const *p;
+	uint8_t const *p, *q;
 
 	p = *start;
 
+	if (end == packet) return 0;
+
 	if (*p == 0x00) {
 		*next = p + 1;
 		return 0;
 	}
 
 	/*
-	 *	Pointer, which MUST point to a valid label, but we don't
-	 *	check.
+	 *	Pointer, which points somewhere in the packet.
 	 */
 	if (*p > 63) {
 		uint16_t offset;
 
+		if ((end - packet) < 2) {
+			return -(p - packet);
+		}
+
 		offset = p[1];
 		offset += ((*p & ~0xc0) << 8);
 
-		p = buf + offset;
+		q = packet + offset;
+		if (q >= p) {
+			return -(p - packet);
+		}
+		p = q;
+	}
+
+	/*
+	 *	Note that the label can point to anywhere in the
+	 *	packet, including things we haven't checked yet.
+	 *	While the caller checks against the dns_labels_t
+	 *	buffer, it only checks that the pointer points within
+	 *	the correct offset.  It doesn't check that the pointer
+	 *	points to the start of a label string.  It could
+	 *	instead point to the 'e' of 'example.com'.
+	 *
+	 *	As a result, we have to re-validate everything here,
+	 *	too.
+	 */
+	if (*p >= 0xc0) return -(p - packet);
+
+	if ((p + *p + 1) > end) {
+		return -(p - packet);
 	}
 
 	/*
 	 *	Tell the caller where the actual label is located.
 	 */
 	*start = p;
 	*next = p + *p + 1;
 	return *p;
 }
 
 
 /** Decode a #fr_value_box_t from one DNS label
  *
  * The output type is always FR_TYPE_STRING
  *
  * Note that the caller MUST call fr_dns_labels_network_verify(src, len, start)
  * before calling this function.  Otherwise bad things will happen.
  *
  * @param[in] ctx	Where to allocate any talloc buffers required.
  * @param[out] dst	value_box to write the result to.
  * @param[in] src	Start of the buffer containing DNS labels
  * @param[in] len	Length of the buffer to decode
  * @param[in] label	This particular label
  * @param[in] tainted	Whether the value came from a trusted source.
  * @param[in] lb	label tracking data structure
  * @return
  *	- >= 0 The number of network bytes consumed.
  *	- <0 on error.
  */
 ssize_t fr_dns_label_to_value_box(TALLOC_CTX *ctx, fr_value_box_t *dst,
 				  uint8_t const *src, size_t len, uint8_t const *label,
 				  bool tainted, fr_dns_labels_t *lb)
 {
 	ssize_t slen;
 	uint8_t const *after = label;
 	uint8_t const *current, *next;
 	uint8_t const *packet = src;
+	uint8_t const *end = packet + len;
 	uint8_t *p;
 	char *q;
 
 	if (lb) packet = lb->start;
 
 	/*
 	 *	Get the uncompressed length of the label, and the
 	 *	label after this one.
 	 */
 	slen = fr_dns_label_uncompressed_length(packet, src, len, &after, lb);
 	if (slen <= 0) {
 		FR_PROTO_TRACE("dns_label_to_value_box - Failed getting length");
 		return slen;
 	}
 
 	fr_value_box_init_null(dst);
 
 	/*
 	 *	An empty label is a 0x00 byte.  Just create an empty
 	 *	string.
 	 */
 	if (slen == 1) {
 		if (fr_value_box_bstr_alloc(ctx, &q, dst, NULL, 1, tainted) < 0) return -1;
 		q[0] = '.';
 		return after - label;
 	}
 
 	/*
 	 *	Allocate the string and set up the value_box
 	 */
 	if (fr_value_box_bstr_alloc(ctx, &q, dst, NULL, slen, tainted) < 0) return -1;
 
 	current = label;
 	p = (uint8_t *) q;
 	q += slen;
 
 	while ((current < after) && (*current != 0x00)) {
 		/*
 		 *	Get how many bytes this label has, and where
 		 *	we will go to obtain the next label.
-		 *
-		 *	Note that slen > 0 here, as dns_label_decode()
-		 *	only returns 0 when the current byte is 0x00,
-		 *	which it can't be.
 		 */
-		slen = dns_label_decode(packet, &current, &next);
+		slen = dns_label_decode(packet, end, &current, &next);
+		if (slen < 0) return slen;
 
 		/*
 		 *	As a sanity check, ensure we don't have a
 		 *	buffer overflow.
 		 */
 		if ((p + slen) > (uint8_t *) q) {
 			FR_PROTO_TRACE("dns_label_to_value_box - length %zd Failed at %d", slen, __LINE__);
 
 		fail:
 			fr_value_box_clear(dst);
 			return -1;
 		}
 
 		/*
 		 *	Add '.' before the label, but only for the
 		 *	second and subsequent labels.
 		 */
 		if (p != (uint8_t const *) dst->vb_strvalue) {
 			*(p++) = '.';
 		}
 
 		/*
 		 *	Copy the raw bytes from the network.
 		 */
 		memcpy(p, current + 1, slen);
 
 		/*
 		 *	Go ahead in the output string, and go to the
 		 *	next label for decoding.
 		 */
 		p += slen;
 		current = next;
 	}
 
 	/*
 	 *	As a last sanity check, ensure that we've filled the
 	 *	buffer exactly.
 	 */
 	if (p != (uint8_t *) q) {
 		FR_PROTO_TRACE("dns_label_to_value_box - Failed at %d", __LINE__);
 		goto fail;
 	}
 
 	*p = '\0';
 
 	/*
 	 *	Return the number of network bytes used to parse this
 	 *	part of the label.
 	 */
 	return after - label;
 }
