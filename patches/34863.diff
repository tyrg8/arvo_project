commit 3c7e775a9a4af177cd999066ec3656387d337d6a
Author: Max Wipfli <max.wipfli@serenityos.org>
Date:   Tue Jun 8 15:19:09 2021 +0200

    AK: Utf8CodePointIterator: Don't output full string to debug output
    
    When a code point is invalid, the full string was outputted to the debug
    output. For large strings, this can make the system quite slow.
    Furthermore, one of the cases incorrectly assumed the data to be null
    terminated. This patch modifies the debug statements not to print the
    full string.
    
    This fixes oss-fuzz issue 35050.

diff --git a/AK/Utf8View.cpp b/AK/Utf8View.cpp
index f967781644..9023cc50da 100644
--- a/AK/Utf8View.cpp
+++ b/AK/Utf8View.cpp
@@ -238,34 +238,34 @@ ReadonlyBytes Utf8CodePointIterator::underlying_code_point_bytes() const
 u32 Utf8CodePointIterator::operator*() const
 {
     VERIFY(m_length > 0);
 
     u32 code_point_value_so_far = 0;
     size_t code_point_length_in_bytes = 0;
 
     bool first_byte_makes_sense = decode_first_byte(m_ptr[0], code_point_length_in_bytes, code_point_value_so_far);
 
     if (!first_byte_makes_sense) {
         // The first byte of the code point doesn't make sense: output a replacement character
-        dbgln("First byte doesn't make sense, bytes: {}", StringView { (const char*)m_ptr, m_length });
+        dbgln("First byte doesn't make sense: {:#02x}.", m_ptr[0]);
         return 0xFFFD;
     }
 
     if (code_point_length_in_bytes > m_length) {
         // There is not enough data left for the full code point: output a replacement character
-        dbgln("Not enough bytes (need {}, have {}), first byte is: {:#02x}, '{}'", code_point_length_in_bytes, m_length, m_ptr[0], (const char*)m_ptr);
+        dbgln("Not enough bytes (need {}, have {}), first byte is: {:#02x}.", code_point_length_in_bytes, m_length, m_ptr[0]);
         return 0xFFFD;
     }
 
     for (size_t offset = 1; offset < code_point_length_in_bytes; offset++) {
         if (m_ptr[offset] >> 6 != 2) {
             // One of the extension bytes of the code point doesn't make sense: output a replacement character
             dbgln("Extension byte {:#02x} in {} position after first byte {:#02x} doesn't make sense.", m_ptr[offset], offset, m_ptr[0]);
             return 0xFFFD;
         }
 
         code_point_value_so_far <<= 6;
         code_point_value_so_far |= m_ptr[offset] & 63;
     }
 
     return code_point_value_so_far;
 }
