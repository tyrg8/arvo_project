commit 4149bcde427b331fdfc2cb16c6ded991cd8315cc
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Fri Jan 14 17:32:16 2022 -0500

    check for runlength overrun

diff --git a/coders/qoi.c b/coders/qoi.c
index abb026fbd..c9fa8f06c 100644
--- a/coders/qoi.c
+++ b/coders/qoi.c
@@ -120,240 +120,241 @@ static unsigned int IsQOI(const unsigned char *magick,const size_t length)
 {
   if (length < 4)
     return(MagickFalse);
   if (LocaleNCompare((const char *) magick, "qoif", 4) == 0)
     return(MagickTrue);
   return(MagickFalse);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   R e a d Q O I I m a g e                                                   %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ReadQOIImage() reads a Quite OK Image Format image file and returns it. It
 %  allocates the memory necessary for the new Image structure and returns a
 %  pointer to the new image.
 %
 %  The format of the ReadQOIImage method is:
 %
 %      Image *ReadQOIImage(image_info,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image_info: the image info.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
-static Image *ReadQOIImage(const ImageInfo *image_info,
-  ExceptionInfo *exception)
+static Image *ReadQOIImage(const ImageInfo *image_info,ExceptionInfo *exception)
 {
   Image
     *image;
 
   Quantum
     *q;
 
   MagickBooleanType
     status;
 
   size_t
      colorspace,
      channels;
 
   ssize_t
     count,
-    p;
+    i;
 
   unsigned char
     magick[4];
 
   qoi_rgba_t
     px,
     lut[64];
 
   int
     b,
     vg,
     run;
 
   /*
     Open image file.
   */
   assert(image_info != (const ImageInfo *) NULL);
   assert(image_info->signature == MagickCoreSignature);
   if (image_info->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",
       image_info->filename);
   assert(exception != (ExceptionInfo *) NULL);
   assert(exception->signature == MagickCoreSignature);
   image=AcquireImage(image_info,exception);
   status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);
   if (status == MagickFalse)
     {
       image=DestroyImageList(image);
       return((Image *) NULL);
     }
   /*
     Initialize image structure.
   */
   image->endian=MSBEndian;
   image->depth=8;
   count=ReadBlob(image,4,magick);
   if ((count != 4) || (LocaleNCompare((char *) magick, "qoif", 4) != 0))
     ThrowReaderException(CorruptImageError,"ImproperImageHeader");
   image->columns=(size_t) ReadBlobMSBLong(image);
   image->rows=(size_t) ReadBlobMSBLong(image);
   if (image->columns == 0 || image->rows == 0)
     ThrowReaderException(CorruptImageError,"NegativeOrZeroImageSize");
   if (image->ping != MagickFalse) {
     (void) CloseBlob(image);
     return(GetFirstImageInList(image));
   }
 
-  channels=ReadBlobByte(image);
+  channels=(size_t) ReadBlobByte(image);
   if (channels == 3)
     SetQuantumImageType(image,RGBQuantum);
   else if (channels == 4)
     {
       SetQuantumImageType(image,RGBAQuantum);
       image->alpha_trait=BlendPixelTrait;
     }
   else
     ThrowReaderException(CorruptImageError,"ImproperImageHeader");
 
-  colorspace=ReadBlobByte(image);
+  colorspace=(size_t) ReadBlobByte(image);
   if (colorspace == QOI_SRGB)
-    SetImageColorspace(image,sRGBColorspace,exception);
+    (void) SetImageColorspace(image,sRGBColorspace,exception);
   else if (colorspace == QOI_LINEAR)
-    SetImageColorspace(image,RGBColorspace,exception);
+    (void) SetImageColorspace(image,RGBColorspace,exception);
   else
     ThrowReaderException(CorruptImageError,"ImproperImageHeader");
 
   status=SetImageExtent(image,image->columns,image->rows,exception);
   if (status == MagickFalse)
     return(DestroyImageList(image));
 
   /*
     Get a write pointer for the whole image.
   */
   q=QueueAuthenticPixels(image,0,0,image->columns,image->rows,exception);
   if (q == (Quantum *) NULL)
     ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
   /*
     Initialize decoding state.
   */
   px.rgba.r=0;
   px.rgba.g=0;
   px.rgba.b=0;
   px.rgba.a=255;
   memset(lut,0,sizeof(lut));
   /*
     Actual decoding.
   */
-  for (p=0; p < (image->rows * image->columns);)
+  for (i=0; i < (ssize_t) (image->rows * image->columns);)
   {
     run = 0;
 
     if ((b=ReadBlobByte(image)) == EOF)
       break;
     if (b == QOI_OP_RGB) {
       if ((b=ReadBlobByte(image)) == EOF)
         break;
-      px.rgba.r=b;
+      px.rgba.r=(unsigned char) b;
       if ((b=ReadBlobByte(image)) == EOF)
         break;
-      px.rgba.g=b;
+      px.rgba.g=(unsigned char) b;
       if ((b=ReadBlobByte(image)) == EOF)
         break;
-      px.rgba.b=b;
+      px.rgba.b=(unsigned char) b;
     }
     else if (b == QOI_OP_RGBA) {
       if ((b=ReadBlobByte(image)) == EOF)
         break;
-      px.rgba.r=b;
+      px.rgba.r=(unsigned char) b;
       if ((b=ReadBlobByte(image)) == EOF)
         break;
-      px.rgba.g=b;
+      px.rgba.g=(unsigned char) b;
       if ((b=ReadBlobByte(image)) == EOF)
         break;
-      px.rgba.b=b;
+      px.rgba.b=(unsigned char) b;
       if ((b=ReadBlobByte(image)) == EOF)
         break;
-      px.rgba.a=b;
+      px.rgba.a=(unsigned char) b;
     }
     else if ((b & QOI_MASK_2) == QOI_OP_INDEX) {
       px=lut[b & ~QOI_MASK_2];
     }
     else if ((b & QOI_MASK_2) == QOI_OP_DIFF) {
       px.rgba.r+=((b >> 4) & 0x03) - 2;
       px.rgba.g+=((b >> 2) & 0x03) - 2;
       px.rgba.b+=( b       & 0x03) - 2;
     }
     else if ((b & QOI_MASK_2) == QOI_OP_LUMA) {
       vg=(b & ~QOI_MASK_2) - 32;
       if ((b=ReadBlobByte(image)) == EOF)
         break;
       px.rgba.r+=vg - 8 + ((b >> 4) & 0x0f);
       px.rgba.g+=vg;
       px.rgba.b+=vg - 8 +  (b       & 0x0f);
     }
     else if ((b & QOI_MASK_2) == QOI_OP_RUN) {
       run=b & ~QOI_MASK_2;
     }
     lut[QOI_COLOR_HASH(px) % 64]=px;
     do {
-      SetPixelRed(image,ScaleCharToQuantum((unsigned char)px.rgba.r),q);
-      SetPixelGreen(image,ScaleCharToQuantum((unsigned char)px.rgba.g),q);
-      SetPixelBlue(image,ScaleCharToQuantum((unsigned char)px.rgba.b),q);
-      if (channels == 4)
-        SetPixelAlpha(image,ScaleCharToQuantum((unsigned char) px.rgba.a),q);
+      if (i < (ssize_t) (image->columns*image->rows))
+        {
+          SetPixelRed(image,ScaleCharToQuantum((unsigned char)px.rgba.r),q);
+          SetPixelGreen(image,ScaleCharToQuantum((unsigned char)px.rgba.g),q);
+          SetPixelBlue(image,ScaleCharToQuantum((unsigned char)px.rgba.b),q);
+          if (channels == 4)
+            SetPixelAlpha(image,ScaleCharToQuantum((unsigned char) px.rgba.a),q);
+        }
       q+=GetPixelChannels(image);
-      p++;
+      i++;
     } while (run-- > 0);
-    status=SetImageProgress(image,LoadImageTag,p,image->rows * image->columns);
+    status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) i,image->rows * image->columns);
     if (status == MagickFalse)
       break;
   }
+  status=SyncAuthenticPixels(image,exception);
+  if (i < (ssize_t) (image->columns*image->rows))
+    ThrowReaderException(CorruptImageError,"NotEnoughPixelData");
   if (EOFBlob(image) != MagickFalse)
     ThrowFileException(exception,CorruptImageError,
       "UnexpectedEndOfFile",image->filename);
-  if (status != MagickFalse) {
-    status=SyncAuthenticPixels(image,exception);
-    SyncImage(image,exception);
-  }
   (void) CloseBlob(image);
   if (status == MagickFalse)
     return(DestroyImageList(image));
   return(GetFirstImageInList(image));
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   R e g i s t e r Q O I I m a g e                                           %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  RegisterQOIImage() adds properties for the QOI image format to
 %  the list of supported formats.  The properties include the image format
 %  tag, a method to read and/or write the format, whether the format
 %  supports the saving of more than one frame to the same file or blob,
 %  whether the format supports native in-memory I/O, and a brief
 %  description of the format.
 %
 %  The format of the RegisterQOIImage method is:
 %
 %      size_t RegisterQOIImage(void)
 %
 */
