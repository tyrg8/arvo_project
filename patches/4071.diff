commit c272d0842c43b5bbde4ccce5189fd196b5359ed9
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Mon Nov 6 12:27:30 2017 +0000

    gdal_translate_fuzzer: avoid situations with excessive memory allocation. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4071. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@40654 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/fuzzers/gdal_translate_fuzzer.cpp b/gdal/fuzzers/gdal_translate_fuzzer.cpp
index a3b70793d5..2fe6c4d5da 100644
--- a/gdal/fuzzers/gdal_translate_fuzzer.cpp
+++ b/gdal/fuzzers/gdal_translate_fuzzer.cpp
@@ -56,71 +56,119 @@ int LLVMFuzzerInitialize(int* /*argc*/, char*** argv)
 int LLVMFuzzerTestOneInput(const uint8_t *buf, size_t len)
 {
     VSILFILE* fp = VSIFileFromMemBuffer( "/vsimem/test.tar",
             reinterpret_cast<GByte*>(const_cast<uint8_t*>(buf)), len, FALSE );
     VSIFCloseL(fp);
 
     CPLPushErrorHandler(CPLQuietErrorHandler);
 
     char** papszArgv = NULL;
 
     // Prevent generating too big output raster. Make sure they are set at
     // the beginning to avoid being accidentally eaten by invalid arguments
     // afterwards.
     papszArgv = CSLAddString(papszArgv, "-limit_outsize");
     papszArgv = CSLAddString(papszArgv, "1000000");
 
     fp = VSIFOpenL("/vsitar//vsimem/test.tar/cmd.txt", "rb");
     if( fp != NULL )
     {
         const char* pszLine = NULL;
         while( (pszLine = CPLReadLineL(fp)) != NULL )
         {
             if( !EQUAL(pszLine, "-limit_outsize") )
                 papszArgv = CSLAddString(papszArgv, pszLine);
         }
         VSIFCloseL(fp);
     }
 
+    int nXDim = -1;
+    int nYDim = -1;
+    bool bXDimPct = false;
+    bool bYDimPct = false;
+    bool bNonNearestResampling = false;
+    if( papszArgv != NULL )
+    {
+        int nCount = CSLCount(papszArgv);
+        for( int i = 0; i < nCount; i++ )
+        {
+            if( EQUAL(papszArgv[i], "-outsize") && i + 2 < nCount )
+            {
+                nXDim = atoi(papszArgv[i+1]);
+                bXDimPct = (papszArgv[i+1][0] != '\0' &&
+                            papszArgv[i+1][strlen(papszArgv[i+1])-1] == '%');
+                nYDim = atoi(papszArgv[i+2]);
+                bYDimPct = (papszArgv[i+2][0] != '\0' &&
+                            papszArgv[i+2][strlen(papszArgv[i+2])-1] == '%');
+            }
+            else if( EQUAL(papszArgv[i], "-r") && i + 1 < nCount )
+            {
+                bNonNearestResampling = !STARTS_WITH_CI(papszArgv[i+1], "NEAR");
+            }
+        }
+    }
+
     if( papszArgv != NULL )
     {
         GDALTranslateOptions* psOptions = GDALTranslateOptionsNew(papszArgv, NULL);
         if( psOptions )
         {
             GDALDatasetH hSrcDS = GDALOpen( "/vsitar//vsimem/test.tar/in", GA_ReadOnly );
             if( hSrcDS != NULL )
             {
                 // Also check that reading the source doesn't involve too
                 // much memory
                 GDALDataset* poSrcDS = reinterpret_cast<GDALDataset*>(hSrcDS);
                 int nBands = poSrcDS->GetRasterCount();
                 if( nBands < 10 )
                 {
                     vsi_l_offset nSize =
                         static_cast<vsi_l_offset>(nBands) *
                         poSrcDS->GetRasterXSize() *
                         poSrcDS->GetRasterYSize();
                     if( nBands )
                         nSize *= GDALGetDataTypeSizeBytes(
                                 poSrcDS->GetRasterBand(1)->GetRasterDataType() );
-                    if( nSize < 10 * 1024 * 1024 )
+
+                    // Prevent excessive downsampling which might require huge
+                    // memory allocation
+                    bool bOKForResampling = true;
+                    if( bNonNearestResampling && nXDim >= 0 && nYDim >= 0 )
+                    {
+                        if( bXDimPct && nXDim > 0 )
+                        {
+                            nXDim = static_cast<int>(
+                                poSrcDS->GetRasterXSize() / 100.0 * nXDim);
+                        }
+                        if( bYDimPct && nYDim > 0 )
+                        {
+                            nYDim = static_cast<int>(
+                                poSrcDS->GetRasterYSize() / 100.0 * nYDim);
+                        }
+                        if( nXDim > 0 && poSrcDS->GetRasterXSize() / nXDim > 100 )
+                            bOKForResampling = false;
+                        if( nYDim > 0 && poSrcDS->GetRasterYSize() / nYDim > 100 )
+                            bOKForResampling = false;
+                    }
+
+                    if( nSize < 10 * 1024 * 1024 && bOKForResampling )
                     {
                         GDALDatasetH hOutDS = GDALTranslate("/vsimem/out", hSrcDS,
                                                             psOptions, NULL);
                         if( hOutDS )
                             GDALClose(hOutDS);
                     }
                 }
                 GDALClose(hSrcDS);
             }
             GDALTranslateOptionsFree(psOptions);
         }
     }
     CSLDestroy(papszArgv);
 
     VSIUnlink("/vsimem/test.tar");
     VSIUnlink("/vsimem/out");
 
     CPLPopErrorHandler();
 
     return 0;
 }
