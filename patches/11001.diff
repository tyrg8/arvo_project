commit 4c27da7638f6d072c3ff93223488c4ab316236c1
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Mon Oct 15 19:46:45 2018 -0700

    [CBDT] Fix more offsetting
    
    Fixes https://oss-fuzz.com/v2/testcase-detail/5750379279548416

diff --git a/src/hb-ot-color-cbdt-table.hh b/src/hb-ot-color-cbdt-table.hh
index 304596840..1e1fe0956 100644
--- a/src/hb-ot-color-cbdt-table.hh
+++ b/src/hb-ot-color-cbdt-table.hh
@@ -202,32 +202,33 @@ struct IndexSubtable
 struct IndexSubtableRecord
 {
   inline bool sanitize (hb_sanitize_context_t *c, const void *base) const
   {
     TRACE_SANITIZE (this);
     return_trace (c->check_struct (this) &&
 		  firstGlyphIndex <= lastGlyphIndex &&
 		  offsetToSubtable.sanitize (c, base, lastGlyphIndex - firstGlyphIndex + 1));
   }
 
-  inline bool get_extents (hb_glyph_extents_t *extents) const
+  inline bool get_extents (hb_glyph_extents_t *extents,
+			   const void *base) const
   {
-    return (this+offsetToSubtable).get_extents (extents);
+    return (base+offsetToSubtable).get_extents (extents);
   }
 
   bool get_image_data (unsigned int  gid,
 		       const void   *base,
 		       unsigned int *offset,
 		       unsigned int *length,
 		       unsigned int *format) const
   {
     if (gid < firstGlyphIndex || gid > lastGlyphIndex) return false;
     return (base+offsetToSubtable).get_image_data (gid - firstGlyphIndex,
 						   offset, length, format);
   }
 
   GlyphID			firstGlyphIndex;
   GlyphID			lastGlyphIndex;
   LOffsetTo<IndexSubtable>	offsetToSubtable;
   public:
   DEFINE_SIZE_STATIC(8);
 };
@@ -374,156 +375,156 @@ struct CBLC
 struct CBDT
 {
   static const hb_tag_t tableTag = HB_OT_TAG_CBDT;
 
   inline bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (c->check_struct (this) &&
 		  likely (version.major == 2 || version.major == 3));
   }
 
   struct accelerator_t
   {
     inline void init (hb_face_t *face)
     {
       upem = hb_face_get_upem (face);
 
       cblc_blob = hb_sanitize_context_t().reference_table<CBLC> (face);
       cbdt_blob = hb_sanitize_context_t().reference_table<CBDT> (face);
       cbdt_len = hb_blob_get_length (cbdt_blob);
 
       if (hb_blob_get_length (cblc_blob) == 0) {
 	cblc = nullptr;
 	cbdt = nullptr;
 	return;  /* Not a bitmap font. */
       }
       cblc = cblc_blob->as<CBLC> ();
       cbdt = cbdt_blob->as<CBDT> ();
 
     }
 
     inline void fini (void)
     {
       hb_blob_destroy (this->cblc_blob);
       hb_blob_destroy (this->cbdt_blob);
     }
 
     inline bool get_extents (hb_codepoint_t glyph, hb_glyph_extents_t *extents) const
     {
       unsigned int x_ppem = upem, y_ppem = upem; /* TODO Use font ppem if available. */
 
       if (!cblc)
 	return false;  // Not a color bitmap font.
 
       const void *base;
       const IndexSubtableRecord *subtable_record = this->cblc->find_table (glyph, &x_ppem, &y_ppem, &base);
       if (!subtable_record || !x_ppem || !y_ppem)
 	return false;
 
-      if (subtable_record->get_extents (extents))
+      if (subtable_record->get_extents (extents, base))
 	return true;
 
       unsigned int image_offset = 0, image_length = 0, image_format = 0;
       if (!subtable_record->get_image_data (glyph, base, &image_offset, &image_length, &image_format))
 	return false;
 
       {
 	if (unlikely (image_offset > cbdt_len || cbdt_len - image_offset < image_length))
 	  return false;
 
 	switch (image_format)
 	{
 	  case 17: {
 	    if (unlikely (image_length < GlyphBitmapDataFormat17::min_size))
 	      return false;
 
 	    const GlyphBitmapDataFormat17& glyphFormat17 =
 		StructAtOffset<GlyphBitmapDataFormat17> (this->cbdt, image_offset);
 	    glyphFormat17.glyphMetrics.get_extents (extents);
 	  }
 	  break;
 	  default:
 	    // TODO: Support other image formats.
 	    return false;
 	}
       }
 
       /* Convert to the font units. */
       extents->x_bearing *= upem / (float) x_ppem;
       extents->y_bearing *= upem / (float) y_ppem;
       extents->width *= upem / (float) x_ppem;
       extents->height *= upem / (float) y_ppem;
 
       return true;
     }
 
     inline void dump (void (*callback) (const uint8_t* data, unsigned int length,
         unsigned int group, unsigned int gid)) const
     {
       if (!cblc)
 	return;  // Not a color bitmap font.
 
       for (unsigned int i = 0; i < cblc->sizeTables.len; ++i)
       {
         const BitmapSizeTable &sizeTable = cblc->sizeTables[i];
         const IndexSubtableArray &subtable_array = cblc+sizeTable.indexSubtableArrayOffset;
         for (unsigned int j = 0; j < sizeTable.numberOfIndexSubtables; ++j)
         {
           const IndexSubtableRecord &subtable_record = subtable_array.indexSubtablesZ[j];
           for (unsigned int gid = subtable_record.firstGlyphIndex;
                 gid <= subtable_record.lastGlyphIndex; ++gid)
           {
             unsigned int image_offset = 0, image_length = 0, image_format = 0;
 
             if (!subtable_record.get_image_data (gid, &subtable_array,
                   &image_offset, &image_length, &image_format))
               continue;
 
             switch (image_format)
             {
             case 17: {
               const GlyphBitmapDataFormat17& glyphFormat17 =
                 StructAtOffset<GlyphBitmapDataFormat17> (this->cbdt, image_offset);
               callback ((const uint8_t *) &glyphFormat17.data.arrayZ,
                 glyphFormat17.data.len, i, gid);
             }
             break;
             case 18: {
               const GlyphBitmapDataFormat18& glyphFormat18 =
                 StructAtOffset<GlyphBitmapDataFormat18> (this->cbdt, image_offset);
               callback ((const uint8_t *) &glyphFormat18.data.arrayZ,
                 glyphFormat18.data.len, i, gid);
             }
             break;
             case 19: {
               const GlyphBitmapDataFormat19& glyphFormat19 =
                 StructAtOffset<GlyphBitmapDataFormat19> (this->cbdt, image_offset);
               callback ((const uint8_t *) &glyphFormat19.data.arrayZ,
                 glyphFormat19.data.len, i, gid);
             }
             break;
             default:
               continue;
             }
           }
         }
       }
     }
 
     private:
     hb_blob_t *cblc_blob;
     hb_blob_t *cbdt_blob;
     const CBLC *cblc;
     const CBDT *cbdt;
 
     unsigned int cbdt_len;
     unsigned int upem;
   };
 
 
   protected:
   FixedVersion<>		version;
   UnsizedArrayOf<HBUINT8>	dataZ;
   public:
   DEFINE_SIZE_ARRAY(4, dataZ);
 };
