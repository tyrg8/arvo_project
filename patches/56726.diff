commit d64c8f7181fd21f90983f8d55369f6f9a2960c43
Author: Alan Modra <amodra@gmail.com>
Date:   Tue Mar 7 22:21:28 2023 +1030

    z8 and z80 coff_reloc16_extra_cases sanity checks
    
            * reloc16.c (bfd_coff_reloc16_get_relocated_section_contents):
            Use size_t variables.  Sanity check reloc address.  Handle
            errors from bfd_coff_reloc16_extra_cases.
            * coffcode.h (_bfd_coff_reloc16_extra_cases): Return bool, take
            size_t* args.
            (dummy_reloc16_extra_cases): Adjust to suit.  Don't abort.
            * coff-z80.c (extra_case): Sanity check reloc address.  Return
            errors.  Tidy formatting.  Use bfd_signed_vma temp var to
            check for reloc overflow.  Don't abort on unexpected reloc type,
            instead print an error and return false.
            * coff-z8k.c (extra_case): Likewise.
            * libcoff.h: Regenerate.

diff --git a/bfd/coff-z80.c b/bfd/coff-z80.c
index c782e326bdb..702fe6550b5 100644
--- a/bfd/coff-z80.c
+++ b/bfd/coff-z80.c
@@ -330,131 +330,155 @@ reloc_processing (arelent *relent,
   relent->address -= section->vma;
 }
 
-static void
+static bool
 extra_case (bfd *in_abfd,
 	    struct bfd_link_info *link_info,
 	    struct bfd_link_order *link_order,
 	    arelent *reloc,
 	    bfd_byte *data,
-	    unsigned int *src_ptr,
-	    unsigned int *dst_ptr)
+	    size_t *src_ptr,
+	    size_t *dst_ptr)
 {
   asection * input_section = link_order->u.indirect.section;
-  int val = bfd_coff_reloc16_get_value (reloc, link_info, input_section);
+  bfd_size_type end = bfd_get_section_limit_octets (in_abfd, input_section);
+  bfd_size_type reloc_size = bfd_get_reloc_size (reloc->howto);
+
+  if (*src_ptr > end
+      || reloc_size > end - *src_ptr)
+    {
+      link_info->callbacks->einfo
+	/* xgettext:c-format */
+	(_("%X%P: %pB(%pA): relocation \"%pR\" goes out of range\n"),
+	 in_abfd, input_section, reloc);
+      return false;
+    }
 
+  int val = bfd_coff_reloc16_get_value (reloc, link_info, input_section);
   switch (reloc->howto->type)
     {
     case R_OFF8:
       if (reloc->howto->partial_inplace)
-        val += (signed char)(bfd_get_8 ( in_abfd, data+*src_ptr)
-                             & reloc->howto->src_mask);
-      if (val>127 || val<-128) /* Test for overflow.  */
-	  (*link_info->callbacks->reloc_overflow)
+	val += (signed char) (bfd_get_8 (in_abfd, data + *src_ptr)
+			      & reloc->howto->src_mask);
+      if (val > 127 || val < -128)
+	{
+	  link_info->callbacks->reloc_overflow
 	    (link_info, NULL, bfd_asymbol_name (*reloc->sym_ptr_ptr),
 	     reloc->howto->name, reloc->addend, input_section->owner,
 	     input_section, reloc->address);
+	  return false;
+	}
 
-	bfd_put_8 (in_abfd, val, data + *dst_ptr);
-	(*dst_ptr) += 1;
-	(*src_ptr) += 1;
+      bfd_put_8 (in_abfd, val, data + *dst_ptr);
+      *dst_ptr += 1;
+      *src_ptr += 1;
       break;
 
     case R_BYTE3:
       bfd_put_8 (in_abfd, val >> 24, data + *dst_ptr);
-      (*dst_ptr) += 1;
-      (*src_ptr) += 1;
+      *dst_ptr += 1;
+      *src_ptr += 1;
       break;
 
     case R_BYTE2:
       bfd_put_8 (in_abfd, val >> 16, data + *dst_ptr);
-      (*dst_ptr) += 1;
-      (*src_ptr) += 1;
+      *dst_ptr += 1;
+      *src_ptr += 1;
       break;
 
     case R_BYTE1:
       bfd_put_8 (in_abfd, val >> 8, data + *dst_ptr);
-      (*dst_ptr) += 1;
-      (*src_ptr) += 1;
+      *dst_ptr += 1;
+      *src_ptr += 1;
       break;
 
     case R_IMM8:
       if (reloc->howto->partial_inplace)
-        val += bfd_get_8 ( in_abfd, data+*src_ptr) & reloc->howto->src_mask;
+	val += bfd_get_8 (in_abfd, data + *src_ptr) & reloc->howto->src_mask;
       /* Fall through.  */
     case R_BYTE0:
       bfd_put_8 (in_abfd, val, data + *dst_ptr);
-      (*dst_ptr) += 1;
-      (*src_ptr) += 1;
+      *dst_ptr += 1;
+      *src_ptr += 1;
       break;
 
     case R_WORD1:
       bfd_put_16 (in_abfd, val >> 16, data + *dst_ptr);
-      (*dst_ptr) += 2;
-      (*src_ptr) += 2;
+      *dst_ptr += 2;
+      *src_ptr += 2;
       break;
 
     case R_IMM16:
       if (reloc->howto->partial_inplace)
-        val += bfd_get_16 ( in_abfd, data+*src_ptr) & reloc->howto->src_mask;
+	val += bfd_get_16 (in_abfd, data + *src_ptr) & reloc->howto->src_mask;
       /* Fall through.  */
     case R_WORD0:
       bfd_put_16 (in_abfd, val, data + *dst_ptr);
-      (*dst_ptr) += 2;
-      (*src_ptr) += 2;
+      *dst_ptr += 2;
+      *src_ptr += 2;
       break;
 
     case R_IMM24:
       if (reloc->howto->partial_inplace)
 	val += (bfd_get_24 (in_abfd, data + *src_ptr)
 		& reloc->howto->src_mask);
       bfd_put_24 (in_abfd, val, data + *dst_ptr);
-      (*dst_ptr) += 3;
-      (*src_ptr) += 3;
+      *dst_ptr += 3;
+      *src_ptr += 3;
       break;
 
     case R_IMM32:
       if (reloc->howto->partial_inplace)
-        val += bfd_get_32 ( in_abfd, data+*src_ptr) & reloc->howto->src_mask;
+	val += bfd_get_32 (in_abfd, data + *src_ptr) & reloc->howto->src_mask;
       bfd_put_32 (in_abfd, val, data + *dst_ptr);
-      (*dst_ptr) += 4;
-      (*src_ptr) += 4;
+      *dst_ptr += 4;
+      *src_ptr += 4;
       break;
 
     case R_JR:
       {
-        if (reloc->howto->partial_inplace)
-          val += (signed char)(bfd_get_8 ( in_abfd, data+*src_ptr) 
-                               & reloc->howto->src_mask);
+	if (reloc->howto->partial_inplace)
+	  val += (signed char) (bfd_get_8 (in_abfd, data + *src_ptr)
+				& reloc->howto->src_mask);
 	bfd_vma dot = (*dst_ptr
 		       + input_section->output_offset
 		       + input_section->output_section->vma);
-	int gap = val - dot;
+	bfd_signed_vma gap = val - dot;
 	if (gap >= 128 || gap < -128)
-	  (*link_info->callbacks->reloc_overflow)
-	    (link_info, NULL, bfd_asymbol_name (*reloc->sym_ptr_ptr),
-	     reloc->howto->name, reloc->addend, input_section->owner,
-	     input_section, reloc->address);
+	  {
+	    link_info->callbacks->reloc_overflow
+	      (link_info, NULL, bfd_asymbol_name (*reloc->sym_ptr_ptr),
+	       reloc->howto->name, reloc->addend, input_section->owner,
+	       input_section, reloc->address);
+	    return false;
+	  }
 
 	bfd_put_8 (in_abfd, gap, data + *dst_ptr);
-	(*dst_ptr)++;
-	(*src_ptr)++;
+	*dst_ptr += 1;
+	*src_ptr += 1;
 	break;
       }
 
     case R_IMM16BE:
       if (reloc->howto->partial_inplace)
-	val += (bfd_get_8 ( in_abfd, data+*src_ptr+0) * 0x100 +
-		bfd_get_8 ( in_abfd, data+*src_ptr+1)) & reloc->howto->src_mask;
+	val += ((bfd_get_8 (in_abfd, data + *src_ptr + 0) * 0x100
+		 + bfd_get_8 (in_abfd, data + *src_ptr + 1))
+		& reloc->howto->src_mask);
       
-      bfd_put_8 (in_abfd, val >> 8, data + *dst_ptr+0);
-      bfd_put_8 (in_abfd, val, data + *dst_ptr+1);
-      (*dst_ptr) += 2;
-      (*src_ptr) += 2;
+      bfd_put_8 (in_abfd, val >> 8, data + *dst_ptr + 0);
+      bfd_put_8 (in_abfd, val, data + *dst_ptr + 1);
+      *dst_ptr += 2;
+      *src_ptr += 2;
       break;
 
     default:
-      abort ();
+      link_info->callbacks->einfo
+	/* xgettext:c-format */
+	(_("%X%P: %pB(%pA): relocation \"%pR\" is not supported\n"),
+	 in_abfd, input_section, reloc);
+      return false;
     }
+  return true;
 }
 
 static bool
diff --git a/bfd/coff-z8k.c b/bfd/coff-z8k.c
index d030056f372..f50e1c819ae 100644
--- a/bfd/coff-z8k.c
+++ b/bfd/coff-z8k.c
@@ -193,188 +193,208 @@ reloc_processing (arelent *relent,
   relent->address -= section->vma;
 }
 
-static void
+static bool
 extra_case (bfd *in_abfd,
 	    struct bfd_link_info *link_info,
 	    struct bfd_link_order *link_order,
 	    arelent *reloc,
 	    bfd_byte *data,
-	    unsigned int *src_ptr,
-	    unsigned int *dst_ptr)
+	    size_t *src_ptr,
+	    size_t *dst_ptr)
 {
   asection * input_section = link_order->u.indirect.section;
+  bfd_size_type end = bfd_get_section_limit_octets (in_abfd, input_section);
+  bfd_size_type reloc_size = bfd_get_reloc_size (reloc->howto);
+
+  if (*src_ptr > end
+      || reloc_size > end - *src_ptr)
+    {
+      link_info->callbacks->einfo
+	/* xgettext:c-format */
+	(_("%X%P: %pB(%pA): relocation \"%pR\" goes out of range\n"),
+	 in_abfd, input_section, reloc);
+      return false;
+    }
 
   switch (reloc->howto->type)
     {
     case R_IMM8:
       bfd_put_8 (in_abfd,
 		 bfd_coff_reloc16_get_value (reloc, link_info, input_section),
 		 data + *dst_ptr);
-      (*dst_ptr) += 1;
-      (*src_ptr) += 1;
+      *dst_ptr += 1;
+      *src_ptr += 1;
       break;
 
     case R_IMM32:
       /* If no flags are set, assume immediate value.  */
       if (! (*reloc->sym_ptr_ptr)->section->flags)
 	{
 	  bfd_put_32 (in_abfd,
 		      bfd_coff_reloc16_get_value (reloc, link_info,
 						  input_section),
 		      data + *dst_ptr);
 	}
       else
 	{
 	  bfd_vma dst = bfd_coff_reloc16_get_value (reloc, link_info,
 						    input_section);
 	  /* Addresses are 23 bit, and the layout of those in a 32-bit
 	     value is as follows:
 	       1AAAAAAA xxxxxxxx AAAAAAAA AAAAAAAA
 	     (A - address bits,  x - ignore).  */
 	  dst = (dst & 0xffff) | ((dst & 0xff0000) << 8) | 0x80000000;
 	  bfd_put_32 (in_abfd, dst, data + *dst_ptr);
 	}
-      (*dst_ptr) += 4;
-      (*src_ptr) += 4;
+      *dst_ptr += 4;
+      *src_ptr += 4;
       break;
 
     case R_IMM4L:
       bfd_put_8 (in_abfd,
 		 ((bfd_get_8 (in_abfd, data + *dst_ptr) & 0xf0)
-		  | (0x0f
-		     & bfd_coff_reloc16_get_value (reloc, link_info,
-						   input_section))),
+		  | (0x0f & bfd_coff_reloc16_get_value (reloc, link_info,
+							input_section))),
 		 data + *dst_ptr);
-      (*dst_ptr) += 1;
-      (*src_ptr) += 1;
+      *dst_ptr += 1;
+      *src_ptr += 1;
       break;
 
     case R_IMM16:
       bfd_put_16 (in_abfd,
 		  bfd_coff_reloc16_get_value (reloc, link_info, input_section),
 		  data + *dst_ptr);
-      (*dst_ptr) += 2;
-      (*src_ptr) += 2;
+      *dst_ptr += 2;
+      *src_ptr += 2;
       break;
 
     case R_JR:
       {
 	bfd_vma dst = bfd_coff_reloc16_get_value (reloc, link_info,
 						  input_section);
 	bfd_vma dot = (*dst_ptr
 		       + input_section->output_offset
 		       + input_section->output_section->vma);
-	int gap = dst - dot - 1;  /* -1, since we're in the odd byte of the
-				     word and the pc's been incremented.  */
-
-	if (gap & 1)
-	  abort ();
-	gap /= 2;
-	if (gap > 127 || gap < -128)
-	  (*link_info->callbacks->reloc_overflow)
-	    (link_info, NULL, bfd_asymbol_name (*reloc->sym_ptr_ptr),
-	     reloc->howto->name, reloc->addend, input_section->owner,
-	     input_section, reloc->address);
-
-	bfd_put_8 (in_abfd, gap, data + *dst_ptr);
-	(*dst_ptr)++;
-	(*src_ptr)++;
+	/* -1, since we're in the odd byte of the word and the pc has
+	   been incremented.  */
+	bfd_signed_vma gap = dst - dot - 1;
+
+	if ((gap & 1) != 0 || gap > 254 || gap < -256)
+	  {
+	    link_info->callbacks->reloc_overflow
+	      (link_info, NULL, bfd_asymbol_name (*reloc->sym_ptr_ptr),
+	       reloc->howto->name, reloc->addend, input_section->owner,
+	       input_section, reloc->address);
+	    return false;
+	  }
+
+	bfd_put_8 (in_abfd, gap / 2, data + *dst_ptr);
+	*dst_ptr += 1;
+	*src_ptr += 1;
 	break;
       }
 
     case R_DISP7:
       {
 	bfd_vma dst = bfd_coff_reloc16_get_value (reloc, link_info,
 						  input_section);
 	bfd_vma dot = (*dst_ptr
 		       + input_section->output_offset
 		       + input_section->output_section->vma);
-	int gap = dst - dot - 1;  /* -1, since we're in the odd byte of the
-				     word and the pc's been incremented.  */
-
-	if (gap & 1)
-	  abort ();
-	gap /= 2;
+	bfd_signed_vma gap = dst - dot - 1;
 
-	if (gap > 0 || gap < -127)
-	  (*link_info->callbacks->reloc_overflow)
-	    (link_info, NULL, bfd_asymbol_name (*reloc->sym_ptr_ptr),
-	     reloc->howto->name, reloc->addend, input_section->owner,
-	     input_section, reloc->address);
+	if ((gap & 1) != 0 || gap > 0 || gap < -254)
+	  {
+	    link_info->callbacks->reloc_overflow
+	      (link_info, NULL, bfd_asymbol_name (*reloc->sym_ptr_ptr),
+	       reloc->howto->name, reloc->addend, input_section->owner,
+	       input_section, reloc->address);
+	    return false;
+	  }
 
 	bfd_put_8 (in_abfd,
-		   (bfd_get_8 ( in_abfd, data + *dst_ptr) & 0x80) + (-gap & 0x7f),
+		   ((bfd_get_8 (in_abfd, data + *dst_ptr) & 0x80)
+		    + (-gap / 2 & 0x7f)),
 		   data + *dst_ptr);
-	(*dst_ptr)++;
-	(*src_ptr)++;
+	*dst_ptr += 1;
+	*src_ptr += 1;
 	break;
       }
 
     case R_CALLR:
       {
 	bfd_vma dst = bfd_coff_reloc16_get_value (reloc, link_info,
 						  input_section);
 	bfd_vma dot = (*dst_ptr
 		       + input_section->output_offset
 		       + input_section->output_section->vma);
-	int gap = dst - dot - 2;
+	bfd_signed_vma gap = dst - dot - 2;
 
-	if (gap & 1)
-	  abort ();
-	if (gap > 4096 || gap < -4095)
-	  (*link_info->callbacks->reloc_overflow)
-	    (link_info, NULL, bfd_asymbol_name (*reloc->sym_ptr_ptr),
-	     reloc->howto->name, reloc->addend, input_section->owner,
-	     input_section, reloc->address);
+	if ((gap & 1) != 0 || gap > 4096 || gap < -4095)
+	  {
+	    link_info->callbacks->reloc_overflow
+	      (link_info, NULL, bfd_asymbol_name (*reloc->sym_ptr_ptr),
+	       reloc->howto->name, reloc->addend, input_section->owner,
+	       input_section, reloc->address);
+	    return false;
+	  }
 
-	gap /= 2;
 	bfd_put_16 (in_abfd,
-		    (bfd_get_16 ( in_abfd, data + *dst_ptr) & 0xf000) | (-gap & 0x0fff),
+		    ((bfd_get_16 (in_abfd, data + *dst_ptr) & 0xf000)
+		     | (-gap / 2 & 0x0fff)),
 		    data + *dst_ptr);
-	(*dst_ptr) += 2;
-	(*src_ptr) += 2;
+	*dst_ptr += 2;
+	*src_ptr += 2;
 	break;
       }
 
     case R_REL16:
       {
 	bfd_vma dst = bfd_coff_reloc16_get_value (reloc, link_info,
 						  input_section);
 	bfd_vma dot = (*dst_ptr
 		       + input_section->output_offset
 		       + input_section->output_section->vma);
-	int gap = dst - dot - 2;
+	bfd_signed_vma gap = dst - dot - 2;
 
 	if (gap > 32767 || gap < -32768)
-	  (*link_info->callbacks->reloc_overflow)
-	    (link_info, NULL, bfd_asymbol_name (*reloc->sym_ptr_ptr),
-	     reloc->howto->name, reloc->addend, input_section->owner,
-	     input_section, reloc->address);
-
-	bfd_put_16 (in_abfd, (bfd_vma) gap, data + *dst_ptr);
-	(*dst_ptr) += 2;
-	(*src_ptr) += 2;
+	  {
+	    link_info->callbacks->reloc_overflow
+	      (link_info, NULL, bfd_asymbol_name (*reloc->sym_ptr_ptr),
+	       reloc->howto->name, reloc->addend, input_section->owner,
+	       input_section, reloc->address);
+	    return false;
+	  }
+
+	bfd_put_16 (in_abfd, gap, data + *dst_ptr);
+	*dst_ptr += 2;
+	*src_ptr += 2;
 	break;
       }
 
     default:
-      abort ();
+      link_info->callbacks->einfo
+	/* xgettext:c-format */
+	(_("%X%P: %pB(%pA): relocation \"%pR\" is not supported\n"),
+	 in_abfd, input_section, reloc);
+      return false;
     }
+  return true;
 }
 
 #define coff_reloc16_extra_cases    extra_case
 #define coff_bfd_reloc_type_lookup  coff_z8k_reloc_type_lookup
 #define coff_bfd_reloc_name_lookup coff_z8k_reloc_name_lookup
 
 #ifndef bfd_pe_print_pdata
 #define bfd_pe_print_pdata	NULL
 #endif
 
 #include "coffcode.h"
 
 #undef  coff_bfd_get_relocated_section_contents
 #define coff_bfd_get_relocated_section_contents \
   bfd_coff_reloc16_get_relocated_section_contents
 
 #undef  coff_bfd_relax_section
 #define coff_bfd_relax_section bfd_coff_reloc16_relax_section
diff --git a/bfd/coffcode.h b/bfd/coffcode.h
index c4f7d199c82..7a4c409a756 100644
--- a/bfd/coffcode.h
+++ b/bfd/coffcode.h
@@ -1385,305 +1385,305 @@ CODE_FRAGMENT
 .{* COFF symbol classifications.  *}
 .
 .enum coff_symbol_classification
 .{
 .  {* Global symbol.  *}
 .  COFF_SYMBOL_GLOBAL,
 .  {* Common symbol.  *}
 .  COFF_SYMBOL_COMMON,
 .  {* Undefined symbol.  *}
 .  COFF_SYMBOL_UNDEFINED,
 .  {* Local symbol.  *}
 .  COFF_SYMBOL_LOCAL,
 .  {* PE section symbol.  *}
 .  COFF_SYMBOL_PE_SECTION
 .};
 .
 .typedef asection * (*coff_gc_mark_hook_fn)
 .  (asection *, struct bfd_link_info *, struct internal_reloc *,
 .   struct coff_link_hash_entry *, struct internal_syment *);
 .
 Special entry points for gdb to swap in coff symbol table parts:
 .typedef struct
 .{
 .  void (*_bfd_coff_swap_aux_in)
 .    (bfd *, void *, int, int, int, int, void *);
 .
 .  void (*_bfd_coff_swap_sym_in)
 .    (bfd *, void *, void *);
 .
 .  void (*_bfd_coff_swap_lineno_in)
 .    (bfd *, void *, void *);
 .
 .  unsigned int (*_bfd_coff_swap_aux_out)
 .    (bfd *, void *, int, int, int, int, void *);
 .
 .  unsigned int (*_bfd_coff_swap_sym_out)
 .    (bfd *, void *, void *);
 .
 .  unsigned int (*_bfd_coff_swap_lineno_out)
 .    (bfd *, void *, void *);
 .
 .  unsigned int (*_bfd_coff_swap_reloc_out)
 .    (bfd *, void *, void *);
 .
 .  unsigned int (*_bfd_coff_swap_filehdr_out)
 .    (bfd *, void *, void *);
 .
 .  unsigned int (*_bfd_coff_swap_aouthdr_out)
 .    (bfd *, void *, void *);
 .
 .  unsigned int (*_bfd_coff_swap_scnhdr_out)
 .    (bfd *, void *, void *);
 .
 .  unsigned int _bfd_filhsz;
 .  unsigned int _bfd_aoutsz;
 .  unsigned int _bfd_scnhsz;
 .  unsigned int _bfd_symesz;
 .  unsigned int _bfd_auxesz;
 .  unsigned int _bfd_relsz;
 .  unsigned int _bfd_linesz;
 .  unsigned int _bfd_filnmlen;
 .  bool _bfd_coff_long_filenames;
 .
 .  bool _bfd_coff_long_section_names;
 .  bool (*_bfd_coff_set_long_section_names)
 .    (bfd *, int);
 .
 .  unsigned int _bfd_coff_default_section_alignment_power;
 .  bool _bfd_coff_force_symnames_in_strings;
 .  unsigned int _bfd_coff_debug_string_prefix_length;
 .  unsigned int _bfd_coff_max_nscns;
 .
 .  void (*_bfd_coff_swap_filehdr_in)
 .    (bfd *, void *, void *);
 .
 .  void (*_bfd_coff_swap_aouthdr_in)
 .    (bfd *, void *, void *);
 .
 .  void (*_bfd_coff_swap_scnhdr_in)
 .    (bfd *, void *, void *);
 .
 .  void (*_bfd_coff_swap_reloc_in)
 .    (bfd *abfd, void *, void *);
 .
 .  bool (*_bfd_coff_bad_format_hook)
 .    (bfd *, void *);
 .
 .  bool (*_bfd_coff_set_arch_mach_hook)
 .    (bfd *, void *);
 .
 .  void * (*_bfd_coff_mkobject_hook)
 .    (bfd *, void *, void *);
 .
 .  bool (*_bfd_styp_to_sec_flags_hook)
 .    (bfd *, void *, const char *, asection *, flagword *);
 .
 .  void (*_bfd_set_alignment_hook)
 .    (bfd *, asection *, void *);
 .
 .  bool (*_bfd_coff_slurp_symbol_table)
 .    (bfd *);
 .
 .  bool (*_bfd_coff_symname_in_debug)
 .    (bfd *, struct internal_syment *);
 .
 .  bool (*_bfd_coff_pointerize_aux_hook)
 .    (bfd *, combined_entry_type *, combined_entry_type *,
 .     unsigned int, combined_entry_type *);
 .
 .  bool (*_bfd_coff_print_aux)
 .    (bfd *, FILE *, combined_entry_type *, combined_entry_type *,
 .     combined_entry_type *, unsigned int);
 .
-.  void (*_bfd_coff_reloc16_extra_cases)
+.  bool (*_bfd_coff_reloc16_extra_cases)
 .    (bfd *, struct bfd_link_info *, struct bfd_link_order *, arelent *,
-.     bfd_byte *, unsigned int *, unsigned int *);
+.     bfd_byte *, size_t *, size_t *);
 .
 .  int (*_bfd_coff_reloc16_estimate)
 .    (bfd *, asection *, arelent *, unsigned int,
 .     struct bfd_link_info *);
 .
 .  enum coff_symbol_classification (*_bfd_coff_classify_symbol)
 .    (bfd *, struct internal_syment *);
 .
 .  bool (*_bfd_coff_compute_section_file_positions)
 .    (bfd *);
 .
 .  bool (*_bfd_coff_start_final_link)
 .    (bfd *, struct bfd_link_info *);
 .
 .  bool (*_bfd_coff_relocate_section)
 .    (bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
 .     struct internal_reloc *, struct internal_syment *, asection **);
 .
 .  reloc_howto_type *(*_bfd_coff_rtype_to_howto)
 .    (bfd *, asection *, struct internal_reloc *,
 .     struct coff_link_hash_entry *, struct internal_syment *, bfd_vma *);
 .
 .  bool (*_bfd_coff_adjust_symndx)
 .    (bfd *, struct bfd_link_info *, bfd *, asection *,
 .     struct internal_reloc *, bool *);
 .
 .  bool (*_bfd_coff_link_add_one_symbol)
 .    (struct bfd_link_info *, bfd *, const char *, flagword,
 .     asection *, bfd_vma, const char *, bool, bool,
 .     struct bfd_link_hash_entry **);
 .
 .  bool (*_bfd_coff_link_output_has_begun)
 .    (bfd *, struct coff_final_link_info *);
 .
 .  bool (*_bfd_coff_final_link_postscript)
 .    (bfd *, struct coff_final_link_info *);
 .
 .  bool (*_bfd_coff_print_pdata)
 .    (bfd *, void *);
 .
 .} bfd_coff_backend_data;
 .
 .#define coff_backend_info(abfd) \
 .  ((const bfd_coff_backend_data *) (abfd)->xvec->backend_data)
 .
 .#define bfd_coff_swap_aux_in(a,e,t,c,ind,num,i) \
 .  ((coff_backend_info (a)->_bfd_coff_swap_aux_in) (a,e,t,c,ind,num,i))
 .
 .#define bfd_coff_swap_sym_in(a,e,i) \
 .  ((coff_backend_info (a)->_bfd_coff_swap_sym_in) (a,e,i))
 .
 .#define bfd_coff_swap_lineno_in(a,e,i) \
 .  ((coff_backend_info ( a)->_bfd_coff_swap_lineno_in) (a,e,i))
 .
 .#define bfd_coff_swap_reloc_out(abfd, i, o) \
 .  ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_out) (abfd, i, o))
 .
 .#define bfd_coff_swap_lineno_out(abfd, i, o) \
 .  ((coff_backend_info (abfd)->_bfd_coff_swap_lineno_out) (abfd, i, o))
 .
 .#define bfd_coff_swap_aux_out(a,i,t,c,ind,num,o) \
 .  ((coff_backend_info (a)->_bfd_coff_swap_aux_out) (a,i,t,c,ind,num,o))
 .
 .#define bfd_coff_swap_sym_out(abfd, i,o) \
 .  ((coff_backend_info (abfd)->_bfd_coff_swap_sym_out) (abfd, i, o))
 .
 .#define bfd_coff_swap_scnhdr_out(abfd, i,o) \
 .  ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_out) (abfd, i, o))
 .
 .#define bfd_coff_swap_filehdr_out(abfd, i,o) \
 .  ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_out) (abfd, i, o))
 .
 .#define bfd_coff_swap_aouthdr_out(abfd, i,o) \
 .  ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_out) (abfd, i, o))
 .
 .#define bfd_coff_filhsz(abfd) (coff_backend_info (abfd)->_bfd_filhsz)
 .#define bfd_coff_aoutsz(abfd) (coff_backend_info (abfd)->_bfd_aoutsz)
 .#define bfd_coff_scnhsz(abfd) (coff_backend_info (abfd)->_bfd_scnhsz)
 .#define bfd_coff_symesz(abfd) (coff_backend_info (abfd)->_bfd_symesz)
 .#define bfd_coff_auxesz(abfd) (coff_backend_info (abfd)->_bfd_auxesz)
 .#define bfd_coff_relsz(abfd)  (coff_backend_info (abfd)->_bfd_relsz)
 .#define bfd_coff_linesz(abfd) (coff_backend_info (abfd)->_bfd_linesz)
 .#define bfd_coff_filnmlen(abfd) (coff_backend_info (abfd)->_bfd_filnmlen)
 .#define bfd_coff_long_filenames(abfd) \
 .  (coff_backend_info (abfd)->_bfd_coff_long_filenames)
 .#define bfd_coff_long_section_names(abfd) \
 .  (coff_data (abfd)->long_section_names)
 .#define bfd_coff_set_long_section_names(abfd, enable) \
 .  ((coff_backend_info (abfd)->_bfd_coff_set_long_section_names) (abfd, enable))
 .#define bfd_coff_default_section_alignment_power(abfd) \
 .  (coff_backend_info (abfd)->_bfd_coff_default_section_alignment_power)
 .#define bfd_coff_max_nscns(abfd) \
 .  (coff_backend_info (abfd)->_bfd_coff_max_nscns)
 .
 .#define bfd_coff_swap_filehdr_in(abfd, i,o) \
 .  ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_in) (abfd, i, o))
 .
 .#define bfd_coff_swap_aouthdr_in(abfd, i,o) \
 .  ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_in) (abfd, i, o))
 .
 .#define bfd_coff_swap_scnhdr_in(abfd, i,o) \
 .  ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_in) (abfd, i, o))
 .
 .#define bfd_coff_swap_reloc_in(abfd, i, o) \
 .  ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_in) (abfd, i, o))
 .
 .#define bfd_coff_bad_format_hook(abfd, filehdr) \
 .  ((coff_backend_info (abfd)->_bfd_coff_bad_format_hook) (abfd, filehdr))
 .
 .#define bfd_coff_set_arch_mach_hook(abfd, filehdr)\
 .  ((coff_backend_info (abfd)->_bfd_coff_set_arch_mach_hook) (abfd, filehdr))
 .#define bfd_coff_mkobject_hook(abfd, filehdr, aouthdr)\
 .  ((coff_backend_info (abfd)->_bfd_coff_mkobject_hook)\
 .   (abfd, filehdr, aouthdr))
 .
 .#define bfd_coff_styp_to_sec_flags_hook(abfd, scnhdr, name, section, flags_ptr)\
 .  ((coff_backend_info (abfd)->_bfd_styp_to_sec_flags_hook)\
 .   (abfd, scnhdr, name, section, flags_ptr))
 .
 .#define bfd_coff_set_alignment_hook(abfd, sec, scnhdr)\
 .  ((coff_backend_info (abfd)->_bfd_set_alignment_hook) (abfd, sec, scnhdr))
 .
 .#define bfd_coff_slurp_symbol_table(abfd)\
 .  ((coff_backend_info (abfd)->_bfd_coff_slurp_symbol_table) (abfd))
 .
 .#define bfd_coff_symname_in_debug(abfd, sym)\
 .  ((coff_backend_info (abfd)->_bfd_coff_symname_in_debug) (abfd, sym))
 .
 .#define bfd_coff_force_symnames_in_strings(abfd)\
 .  (coff_backend_info (abfd)->_bfd_coff_force_symnames_in_strings)
 .
 .#define bfd_coff_debug_string_prefix_length(abfd)\
 .  (coff_backend_info (abfd)->_bfd_coff_debug_string_prefix_length)
 .
 .#define bfd_coff_print_aux(abfd, file, base, symbol, aux, indaux)\
 .  ((coff_backend_info (abfd)->_bfd_coff_print_aux)\
 .   (abfd, file, base, symbol, aux, indaux))
 .
 .#define bfd_coff_reloc16_extra_cases(abfd, link_info, link_order,\
 .				      reloc, data, src_ptr, dst_ptr)\
 .  ((coff_backend_info (abfd)->_bfd_coff_reloc16_extra_cases)\
 .   (abfd, link_info, link_order, reloc, data, src_ptr, dst_ptr))
 .
 .#define bfd_coff_reloc16_estimate(abfd, section, reloc, shrink, link_info)\
 .  ((coff_backend_info (abfd)->_bfd_coff_reloc16_estimate)\
 .   (abfd, section, reloc, shrink, link_info))
 .
 .#define bfd_coff_classify_symbol(abfd, sym)\
 .  ((coff_backend_info (abfd)->_bfd_coff_classify_symbol)\
 .   (abfd, sym))
 .
 .#define bfd_coff_compute_section_file_positions(abfd)\
 .  ((coff_backend_info (abfd)->_bfd_coff_compute_section_file_positions)\
 .   (abfd))
 .
 .#define bfd_coff_start_final_link(obfd, info)\
 .  ((coff_backend_info (obfd)->_bfd_coff_start_final_link)\
 .   (obfd, info))
 .#define bfd_coff_relocate_section(obfd,info,ibfd,o,con,rel,isyms,secs)\
 .  ((coff_backend_info (ibfd)->_bfd_coff_relocate_section)\
 .   (obfd, info, ibfd, o, con, rel, isyms, secs))
 .#define bfd_coff_rtype_to_howto(abfd, sec, rel, h, sym, addendp)\
 .  ((coff_backend_info (abfd)->_bfd_coff_rtype_to_howto)\
 .   (abfd, sec, rel, h, sym, addendp))
 .#define bfd_coff_adjust_symndx(obfd, info, ibfd, sec, rel, adjustedp)\
 .  ((coff_backend_info (abfd)->_bfd_coff_adjust_symndx)\
 .   (obfd, info, ibfd, sec, rel, adjustedp))
 .#define bfd_coff_link_add_one_symbol(info, abfd, name, flags, section,\
 .				      value, string, cp, coll, hashp)\
 .  ((coff_backend_info (abfd)->_bfd_coff_link_add_one_symbol)\
 .   (info, abfd, name, flags, section, value, string, cp, coll, hashp))
 .
 .#define bfd_coff_link_output_has_begun(a,p) \
 .  ((coff_backend_info (a)->_bfd_coff_link_output_has_begun) (a, p))
 .#define bfd_coff_final_link_postscript(a,p) \
 .  ((coff_backend_info (a)->_bfd_coff_final_link_postscript) (a, p))
 .
 .#define bfd_coff_have_print_pdata(a) \
 .  (coff_backend_info (a)->_bfd_coff_print_pdata)
 .#define bfd_coff_print_pdata(a,p) \
 .  ((coff_backend_info (a)->_bfd_coff_print_pdata) (a, p))
 .
 .{* Macro: Returns true if the bfd is a PE executable as opposed to a
 .   PE object file.  *}
 .#define bfd_pei_p(abfd) \
 .  (startswith ((abfd)->xvec->name, "pei-"))
 */
 
 /* See whether the magic number matches.  */
@@ -5318,79 +5318,77 @@ static int
 dummy_reloc16_estimate (bfd *abfd ATTRIBUTE_UNUSED,
 			asection *input_section ATTRIBUTE_UNUSED,
 			arelent *reloc ATTRIBUTE_UNUSED,
 			unsigned int shrink ATTRIBUTE_UNUSED,
 			struct bfd_link_info *link_info ATTRIBUTE_UNUSED)
 {
   abort ();
   return 0;
 }
 
 #endif
 
 #ifndef coff_reloc16_extra_cases
 
 #define coff_reloc16_extra_cases dummy_reloc16_extra_cases
 
-/* This works even if abort is not declared in any header file.  */
-
-static void
+static bool
 dummy_reloc16_extra_cases (bfd *abfd ATTRIBUTE_UNUSED,
 			   struct bfd_link_info *link_info ATTRIBUTE_UNUSED,
 			   struct bfd_link_order *link_order ATTRIBUTE_UNUSED,
 			   arelent *reloc ATTRIBUTE_UNUSED,
 			   bfd_byte *data ATTRIBUTE_UNUSED,
-			   unsigned int *src_ptr ATTRIBUTE_UNUSED,
-			   unsigned int *dst_ptr ATTRIBUTE_UNUSED)
+			   size_t *src_ptr ATTRIBUTE_UNUSED,
+			   size_t *dst_ptr ATTRIBUTE_UNUSED)
 {
-  abort ();
+  return false;
 }
 #endif
 
 /* If coff_relocate_section is defined, we can use the optimized COFF
    backend linker.  Otherwise we must continue to use the old linker.  */
 
 #ifdef coff_relocate_section
 
 #ifndef coff_bfd_link_hash_table_create
 #define coff_bfd_link_hash_table_create _bfd_coff_link_hash_table_create
 #endif
 #ifndef coff_bfd_link_add_symbols
 #define coff_bfd_link_add_symbols _bfd_coff_link_add_symbols
 #endif
 #ifndef coff_bfd_final_link
 #define coff_bfd_final_link _bfd_coff_final_link
 #endif
 
 #else /* ! defined (coff_relocate_section) */
 
 #define coff_relocate_section NULL
 #ifndef coff_bfd_link_hash_table_create
 #define coff_bfd_link_hash_table_create _bfd_generic_link_hash_table_create
 #endif
 #ifndef coff_bfd_link_add_symbols
 #define coff_bfd_link_add_symbols _bfd_generic_link_add_symbols
 #endif
 #define coff_bfd_final_link _bfd_generic_final_link
 
 #endif /* ! defined (coff_relocate_section) */
 
 #define coff_bfd_link_just_syms      _bfd_generic_link_just_syms
 #define coff_bfd_copy_link_hash_symbol_type \
   _bfd_generic_copy_link_hash_symbol_type
 #define coff_bfd_link_split_section  _bfd_generic_link_split_section
 
 #define coff_bfd_link_check_relocs   _bfd_generic_link_check_relocs
 
 #ifndef coff_start_final_link
 #define coff_start_final_link NULL
 #endif
 
 #ifndef coff_adjust_symndx
 #define coff_adjust_symndx NULL
 #endif
 
 #ifndef coff_link_add_one_symbol
 #define coff_link_add_one_symbol _bfd_generic_link_add_one_symbol
 #endif
 
 #ifndef coff_link_output_has_begun
diff --git a/bfd/libcoff.h b/bfd/libcoff.h
index c2c1f4add3a..b7a4f677411 100644
--- a/bfd/libcoff.h
+++ b/bfd/libcoff.h
@@ -712,285 +712,285 @@ typedef asection * (*coff_gc_mark_hook_fn)
 typedef struct
 {
   void (*_bfd_coff_swap_aux_in)
     (bfd *, void *, int, int, int, int, void *);
 
   void (*_bfd_coff_swap_sym_in)
     (bfd *, void *, void *);
 
   void (*_bfd_coff_swap_lineno_in)
     (bfd *, void *, void *);
 
   unsigned int (*_bfd_coff_swap_aux_out)
     (bfd *, void *, int, int, int, int, void *);
 
   unsigned int (*_bfd_coff_swap_sym_out)
     (bfd *, void *, void *);
 
   unsigned int (*_bfd_coff_swap_lineno_out)
     (bfd *, void *, void *);
 
   unsigned int (*_bfd_coff_swap_reloc_out)
     (bfd *, void *, void *);
 
   unsigned int (*_bfd_coff_swap_filehdr_out)
     (bfd *, void *, void *);
 
   unsigned int (*_bfd_coff_swap_aouthdr_out)
     (bfd *, void *, void *);
 
   unsigned int (*_bfd_coff_swap_scnhdr_out)
     (bfd *, void *, void *);
 
   unsigned int _bfd_filhsz;
   unsigned int _bfd_aoutsz;
   unsigned int _bfd_scnhsz;
   unsigned int _bfd_symesz;
   unsigned int _bfd_auxesz;
   unsigned int _bfd_relsz;
   unsigned int _bfd_linesz;
   unsigned int _bfd_filnmlen;
   bool _bfd_coff_long_filenames;
 
   bool _bfd_coff_long_section_names;
   bool (*_bfd_coff_set_long_section_names)
     (bfd *, int);
 
   unsigned int _bfd_coff_default_section_alignment_power;
   bool _bfd_coff_force_symnames_in_strings;
   unsigned int _bfd_coff_debug_string_prefix_length;
   unsigned int _bfd_coff_max_nscns;
 
   void (*_bfd_coff_swap_filehdr_in)
     (bfd *, void *, void *);
 
   void (*_bfd_coff_swap_aouthdr_in)
     (bfd *, void *, void *);
 
   void (*_bfd_coff_swap_scnhdr_in)
     (bfd *, void *, void *);
 
   void (*_bfd_coff_swap_reloc_in)
     (bfd *abfd, void *, void *);
 
   bool (*_bfd_coff_bad_format_hook)
     (bfd *, void *);
 
   bool (*_bfd_coff_set_arch_mach_hook)
     (bfd *, void *);
 
   void * (*_bfd_coff_mkobject_hook)
     (bfd *, void *, void *);
 
   bool (*_bfd_styp_to_sec_flags_hook)
     (bfd *, void *, const char *, asection *, flagword *);
 
   void (*_bfd_set_alignment_hook)
     (bfd *, asection *, void *);
 
   bool (*_bfd_coff_slurp_symbol_table)
     (bfd *);
 
   bool (*_bfd_coff_symname_in_debug)
     (bfd *, struct internal_syment *);
 
   bool (*_bfd_coff_pointerize_aux_hook)
     (bfd *, combined_entry_type *, combined_entry_type *,
      unsigned int, combined_entry_type *);
 
   bool (*_bfd_coff_print_aux)
     (bfd *, FILE *, combined_entry_type *, combined_entry_type *,
      combined_entry_type *, unsigned int);
 
-  void (*_bfd_coff_reloc16_extra_cases)
+  bool (*_bfd_coff_reloc16_extra_cases)
     (bfd *, struct bfd_link_info *, struct bfd_link_order *, arelent *,
-     bfd_byte *, unsigned int *, unsigned int *);
+     bfd_byte *, size_t *, size_t *);
 
   int (*_bfd_coff_reloc16_estimate)
     (bfd *, asection *, arelent *, unsigned int,
      struct bfd_link_info *);
 
   enum coff_symbol_classification (*_bfd_coff_classify_symbol)
     (bfd *, struct internal_syment *);
 
   bool (*_bfd_coff_compute_section_file_positions)
     (bfd *);
 
   bool (*_bfd_coff_start_final_link)
     (bfd *, struct bfd_link_info *);
 
   bool (*_bfd_coff_relocate_section)
     (bfd *, struct bfd_link_info *, bfd *, asection *, bfd_byte *,
      struct internal_reloc *, struct internal_syment *, asection **);
 
   reloc_howto_type *(*_bfd_coff_rtype_to_howto)
     (bfd *, asection *, struct internal_reloc *,
      struct coff_link_hash_entry *, struct internal_syment *, bfd_vma *);
 
   bool (*_bfd_coff_adjust_symndx)
     (bfd *, struct bfd_link_info *, bfd *, asection *,
      struct internal_reloc *, bool *);
 
   bool (*_bfd_coff_link_add_one_symbol)
     (struct bfd_link_info *, bfd *, const char *, flagword,
      asection *, bfd_vma, const char *, bool, bool,
      struct bfd_link_hash_entry **);
 
   bool (*_bfd_coff_link_output_has_begun)
     (bfd *, struct coff_final_link_info *);
 
   bool (*_bfd_coff_final_link_postscript)
     (bfd *, struct coff_final_link_info *);
 
   bool (*_bfd_coff_print_pdata)
     (bfd *, void *);
 
 } bfd_coff_backend_data;
 
 #define coff_backend_info(abfd) \
   ((const bfd_coff_backend_data *) (abfd)->xvec->backend_data)
 
 #define bfd_coff_swap_aux_in(a,e,t,c,ind,num,i) \
   ((coff_backend_info (a)->_bfd_coff_swap_aux_in) (a,e,t,c,ind,num,i))
 
 #define bfd_coff_swap_sym_in(a,e,i) \
   ((coff_backend_info (a)->_bfd_coff_swap_sym_in) (a,e,i))
 
 #define bfd_coff_swap_lineno_in(a,e,i) \
   ((coff_backend_info ( a)->_bfd_coff_swap_lineno_in) (a,e,i))
 
 #define bfd_coff_swap_reloc_out(abfd, i, o) \
   ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_out) (abfd, i, o))
 
 #define bfd_coff_swap_lineno_out(abfd, i, o) \
   ((coff_backend_info (abfd)->_bfd_coff_swap_lineno_out) (abfd, i, o))
 
 #define bfd_coff_swap_aux_out(a,i,t,c,ind,num,o) \
   ((coff_backend_info (a)->_bfd_coff_swap_aux_out) (a,i,t,c,ind,num,o))
 
 #define bfd_coff_swap_sym_out(abfd, i,o) \
   ((coff_backend_info (abfd)->_bfd_coff_swap_sym_out) (abfd, i, o))
 
 #define bfd_coff_swap_scnhdr_out(abfd, i,o) \
   ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_out) (abfd, i, o))
 
 #define bfd_coff_swap_filehdr_out(abfd, i,o) \
   ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_out) (abfd, i, o))
 
 #define bfd_coff_swap_aouthdr_out(abfd, i,o) \
   ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_out) (abfd, i, o))
 
 #define bfd_coff_filhsz(abfd) (coff_backend_info (abfd)->_bfd_filhsz)
 #define bfd_coff_aoutsz(abfd) (coff_backend_info (abfd)->_bfd_aoutsz)
 #define bfd_coff_scnhsz(abfd) (coff_backend_info (abfd)->_bfd_scnhsz)
 #define bfd_coff_symesz(abfd) (coff_backend_info (abfd)->_bfd_symesz)
 #define bfd_coff_auxesz(abfd) (coff_backend_info (abfd)->_bfd_auxesz)
 #define bfd_coff_relsz(abfd)  (coff_backend_info (abfd)->_bfd_relsz)
 #define bfd_coff_linesz(abfd) (coff_backend_info (abfd)->_bfd_linesz)
 #define bfd_coff_filnmlen(abfd) (coff_backend_info (abfd)->_bfd_filnmlen)
 #define bfd_coff_long_filenames(abfd) \
   (coff_backend_info (abfd)->_bfd_coff_long_filenames)
 #define bfd_coff_long_section_names(abfd) \
   (coff_data (abfd)->long_section_names)
 #define bfd_coff_set_long_section_names(abfd, enable) \
   ((coff_backend_info (abfd)->_bfd_coff_set_long_section_names) (abfd, enable))
 #define bfd_coff_default_section_alignment_power(abfd) \
   (coff_backend_info (abfd)->_bfd_coff_default_section_alignment_power)
 #define bfd_coff_max_nscns(abfd) \
   (coff_backend_info (abfd)->_bfd_coff_max_nscns)
 
 #define bfd_coff_swap_filehdr_in(abfd, i,o) \
   ((coff_backend_info (abfd)->_bfd_coff_swap_filehdr_in) (abfd, i, o))
 
 #define bfd_coff_swap_aouthdr_in(abfd, i,o) \
   ((coff_backend_info (abfd)->_bfd_coff_swap_aouthdr_in) (abfd, i, o))
 
 #define bfd_coff_swap_scnhdr_in(abfd, i,o) \
   ((coff_backend_info (abfd)->_bfd_coff_swap_scnhdr_in) (abfd, i, o))
 
 #define bfd_coff_swap_reloc_in(abfd, i, o) \
   ((coff_backend_info (abfd)->_bfd_coff_swap_reloc_in) (abfd, i, o))
 
 #define bfd_coff_bad_format_hook(abfd, filehdr) \
   ((coff_backend_info (abfd)->_bfd_coff_bad_format_hook) (abfd, filehdr))
 
 #define bfd_coff_set_arch_mach_hook(abfd, filehdr)\
   ((coff_backend_info (abfd)->_bfd_coff_set_arch_mach_hook) (abfd, filehdr))
 #define bfd_coff_mkobject_hook(abfd, filehdr, aouthdr)\
   ((coff_backend_info (abfd)->_bfd_coff_mkobject_hook)\
    (abfd, filehdr, aouthdr))
 
 #define bfd_coff_styp_to_sec_flags_hook(abfd, scnhdr, name, section, flags_ptr)\
   ((coff_backend_info (abfd)->_bfd_styp_to_sec_flags_hook)\
    (abfd, scnhdr, name, section, flags_ptr))
 
 #define bfd_coff_set_alignment_hook(abfd, sec, scnhdr)\
   ((coff_backend_info (abfd)->_bfd_set_alignment_hook) (abfd, sec, scnhdr))
 
 #define bfd_coff_slurp_symbol_table(abfd)\
   ((coff_backend_info (abfd)->_bfd_coff_slurp_symbol_table) (abfd))
 
 #define bfd_coff_symname_in_debug(abfd, sym)\
   ((coff_backend_info (abfd)->_bfd_coff_symname_in_debug) (abfd, sym))
 
 #define bfd_coff_force_symnames_in_strings(abfd)\
   (coff_backend_info (abfd)->_bfd_coff_force_symnames_in_strings)
 
 #define bfd_coff_debug_string_prefix_length(abfd)\
   (coff_backend_info (abfd)->_bfd_coff_debug_string_prefix_length)
 
 #define bfd_coff_print_aux(abfd, file, base, symbol, aux, indaux)\
   ((coff_backend_info (abfd)->_bfd_coff_print_aux)\
    (abfd, file, base, symbol, aux, indaux))
 
 #define bfd_coff_reloc16_extra_cases(abfd, link_info, link_order,\
                                      reloc, data, src_ptr, dst_ptr)\
   ((coff_backend_info (abfd)->_bfd_coff_reloc16_extra_cases)\
    (abfd, link_info, link_order, reloc, data, src_ptr, dst_ptr))
 
 #define bfd_coff_reloc16_estimate(abfd, section, reloc, shrink, link_info)\
   ((coff_backend_info (abfd)->_bfd_coff_reloc16_estimate)\
    (abfd, section, reloc, shrink, link_info))
 
 #define bfd_coff_classify_symbol(abfd, sym)\
   ((coff_backend_info (abfd)->_bfd_coff_classify_symbol)\
    (abfd, sym))
 
 #define bfd_coff_compute_section_file_positions(abfd)\
   ((coff_backend_info (abfd)->_bfd_coff_compute_section_file_positions)\
    (abfd))
 
 #define bfd_coff_start_final_link(obfd, info)\
   ((coff_backend_info (obfd)->_bfd_coff_start_final_link)\
    (obfd, info))
 #define bfd_coff_relocate_section(obfd,info,ibfd,o,con,rel,isyms,secs)\
   ((coff_backend_info (ibfd)->_bfd_coff_relocate_section)\
    (obfd, info, ibfd, o, con, rel, isyms, secs))
 #define bfd_coff_rtype_to_howto(abfd, sec, rel, h, sym, addendp)\
   ((coff_backend_info (abfd)->_bfd_coff_rtype_to_howto)\
    (abfd, sec, rel, h, sym, addendp))
 #define bfd_coff_adjust_symndx(obfd, info, ibfd, sec, rel, adjustedp)\
   ((coff_backend_info (abfd)->_bfd_coff_adjust_symndx)\
    (obfd, info, ibfd, sec, rel, adjustedp))
 #define bfd_coff_link_add_one_symbol(info, abfd, name, flags, section,\
                                      value, string, cp, coll, hashp)\
   ((coff_backend_info (abfd)->_bfd_coff_link_add_one_symbol)\
    (info, abfd, name, flags, section, value, string, cp, coll, hashp))
 
 #define bfd_coff_link_output_has_begun(a,p) \
   ((coff_backend_info (a)->_bfd_coff_link_output_has_begun) (a, p))
 #define bfd_coff_final_link_postscript(a,p) \
   ((coff_backend_info (a)->_bfd_coff_final_link_postscript) (a, p))
 
 #define bfd_coff_have_print_pdata(a) \
   (coff_backend_info (a)->_bfd_coff_print_pdata)
 #define bfd_coff_print_pdata(a,p) \
   ((coff_backend_info (a)->_bfd_coff_print_pdata) (a, p))
 
 /* Macro: Returns true if the bfd is a PE executable as opposed to a
    PE object file.  */
 #define bfd_pei_p(abfd) \
   (startswith ((abfd)->xvec->name, "pei-"))
 #ifdef __cplusplus
 }
 #endif
 #endif
diff --git a/bfd/reloc16.c b/bfd/reloc16.c
index fb4c04d558e..3b4e483f75e 100644
--- a/bfd/reloc16.c
+++ b/bfd/reloc16.c
@@ -243,96 +243,104 @@ bfd_byte *
 bfd_coff_reloc16_get_relocated_section_contents
   (bfd *in_abfd,
    struct bfd_link_info *link_info,
    struct bfd_link_order *link_order,
    bfd_byte *data,
    bool relocatable,
    asymbol **symbols)
 {
   /* Get enough memory to hold the stuff.  */
   bfd *input_bfd = link_order->u.indirect.section->owner;
   asection *input_section = link_order->u.indirect.section;
   long reloc_size;
   arelent **reloc_vector;
   long reloc_count;
 
   reloc_size = bfd_get_reloc_upper_bound (input_bfd, input_section);
   if (reloc_size < 0)
     return NULL;
 
   /* If producing relocatable output, don't bother to relax.  */
   if (relocatable)
     return bfd_generic_get_relocated_section_contents (in_abfd, link_info,
 						       link_order,
 						       data, relocatable,
 						       symbols);
 
   /* Read in the section.  */
   bfd_byte *orig_data = data;
   if (!bfd_get_full_section_contents (input_bfd, input_section, &data))
     return NULL;
 
   if (data == NULL)
     return NULL;
 
   if (reloc_size == 0)
     return data;
 
   reloc_vector = (arelent **) bfd_malloc (reloc_size);
   if (reloc_vector == NULL)
     goto error_return;
 
   reloc_count = bfd_canonicalize_reloc (input_bfd,
 					input_section,
 					reloc_vector,
 					symbols);
   if (reloc_count < 0)
     goto error_return;
 
   if (reloc_count > 0)
     {
       arelent **parent = reloc_vector;
       arelent *reloc;
-      unsigned int dst_address = 0;
-      unsigned int src_address = 0;
-      unsigned int run;
-      unsigned int idx;
+      size_t dst_address = 0;
+      size_t src_address = 0;
+      size_t run;
+      size_t idx;
 
       /* Find how long a run we can do.  */
       while (dst_address < link_order->size)
 	{
 	  reloc = *parent;
 	  if (reloc)
 	    {
 	      /* Note that the relaxing didn't tie up the addresses in the
 		 relocation, so we use the original address to work out the
 		 run of non-relocated data.  */
+	      if (reloc->address > link_order->size
+		  || reloc->address < src_address)
+		{
+		  link_info->callbacks->einfo
+		    /* xgettext:c-format */
+		    (_("%X%P: %pB(%pA): relocation \"%pR\" goes out of range\n"),
+		     input_bfd, input_section, reloc);
+		  goto error_return;
+		}
 	      run = reloc->address - src_address;
 	      parent++;
 	    }
 	  else
 	    {
 	      run = link_order->size - dst_address;
 	    }
 
 	  /* Copy the bytes.  */
 	  for (idx = 0; idx < run; idx++)
 	    data[dst_address++] = data[src_address++];
 
 	  /* Now do the relocation.  */
-	  if (reloc)
-	    {
-	      bfd_coff_reloc16_extra_cases (input_bfd, link_info, link_order,
-					    reloc, data, &src_address,
-					    &dst_address);
-	    }
+	  if (reloc
+	      && !bfd_coff_reloc16_extra_cases (input_bfd, link_info,
+						link_order, reloc, data,
+						&src_address, &dst_address))
+	    goto error_return;
 	}
     }
   free (reloc_vector);
   return data;
 
  error_return:
   free (reloc_vector);
   if (orig_data == NULL)
     free (data);
   return NULL;
 }
