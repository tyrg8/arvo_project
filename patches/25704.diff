commit e192b62aa44e0f509435595246b0013487aadc92
Author: Nathan Moinvaziri <nathan@nathanm.com>
Date:   Wed Sep 16 20:00:33 2020 -0700

    Check block offset to ensure it is not negative during decompression.

diff --git a/blosc/blosc2.c b/blosc/blosc2.c
index cc5a7cda..91fc0503 100644
--- a/blosc/blosc2.c
+++ b/blosc/blosc2.c
@@ -964,220 +964,227 @@ int pipeline_d(blosc2_context* context, const int32_t bsize, uint8_t* dest,
 /* Decompress & unshuffle a single block */
 static int blosc_d(
     struct thread_context* thread_context, int32_t bsize,
-    int32_t leftoverblock, const uint8_t* src, int32_t srcsize, uint8_t* dest,
-    int32_t offset, uint8_t* tmp, uint8_t* tmp2) {
+    int32_t leftoverblock, const uint8_t* src, int32_t srcsize, int32_t src_offset,
+    uint8_t* dest, int32_t dest_offset, uint8_t* tmp, uint8_t* tmp2) {
   blosc2_context* context = thread_context->parent_context;
   uint8_t* filters = context->filters;
   uint8_t *tmp3 = thread_context->tmp4;
   int32_t compformat = (context->header_flags & 0xe0) >> 5;
   uint8_t *src_end = (uint8_t *)src + srcsize;
   int dont_split = (context->header_flags & 0x10) >> 4;
   //uint8_t blosc_version_format = src[0];
   int nstreams;
   int32_t neblock;
   int32_t nbytes;                /* number of decompressed bytes in split */
   int32_t cbytes;                /* number of compressed bytes in split */
   int32_t ctbytes = 0;           /* number of compressed bytes in block */
   int32_t ntbytes = 0;           /* number of uncompressed bytes in block */
   uint8_t* _dest;
   int32_t typesize = context->typesize;
-  int32_t nblock = offset / context->blocksize;
+  int32_t nblock = dest_offset / context->blocksize;
   const char* compname;
 
   if (context->block_maskout != NULL && context->block_maskout[nblock]) {
     // Do not decompress, but act as if we successfully decompressed everything
     return bsize;
   }
 
+  if (src_offset <= 0 || src_offset >= srcsize) {
+    /* Invalid block src offset encountered */
+    return -1;
+  }
+
+  src += src_offset;
+
   int last_filter_index = last_filter(filters, 'd');
 
   if ((last_filter_index >= 0) &&
           (next_filter(filters, BLOSC2_MAX_FILTERS, 'd') != BLOSC_DELTA)) {
    // We are making use of some filter, so use a temp for destination
    _dest = tmp;
   } else {
     // If no filters, or only DELTA in pipeline
-   _dest = dest + offset;
+   _dest = dest + dest_offset;
   }
 
   /* The number of compressed data streams for this block */
   if (!dont_split && !leftoverblock && !context->use_dict) {
     // We don't want to split when in a training dict state
     nstreams = (int32_t)typesize;
   }
   else {
     nstreams = 1;
   }
 
   neblock = bsize / nstreams;
   for (int j = 0; j < nstreams; j++) {
-    if (src + sizeof(int32_t) >= src_end) {
+    if (src + sizeof(int32_t) > src_end) {
       /* Not enough input to read compressed size */
       return -1;
     }
     cbytes = sw32_(src);      /* amount of compressed bytes */
     src += sizeof(int32_t);
-    if (src + cbytes >= src_end) {
+    if (src + cbytes > src_end) {
       /* Not enough input to read compressed size */
       return -1;
     }
     ctbytes += (int32_t)sizeof(int32_t);
 
     /* Uncompress */
     if (cbytes <= 0) {
       // A run
       if (cbytes < -255) {
         // Runs can only encode a byte
         return -2;
       }
       uint8_t value = -cbytes;
       memset(_dest, value, (unsigned int)neblock);
       nbytes = neblock;
       cbytes = 0;  // everything is encoded in the cbytes token
     }
     else if (cbytes == neblock) {
       memcpy(_dest, src, (unsigned int)neblock);
       nbytes = (int32_t)neblock;
     }
     else {
       if (compformat == BLOSC_BLOSCLZ_FORMAT) {
         nbytes = blosclz_decompress(src, cbytes, _dest, (int)neblock);
       }
   #if defined(HAVE_LZ4)
       else if (compformat == BLOSC_LZ4_FORMAT) {
         nbytes = lz4_wrap_decompress((char*)src, (size_t)cbytes,
                                      (char*)_dest, (size_t)neblock);
       }
   #endif /*  HAVE_LZ4 */
   #if defined(HAVE_LIZARD)
       else if (compformat == BLOSC_LIZARD_FORMAT) {
         nbytes = lizard_wrap_decompress((char*)src, (size_t)cbytes,
                                         (char*)_dest, (size_t)neblock);
       }
   #endif /*  HAVE_LIZARD */
   #if defined(HAVE_SNAPPY)
       else if (compformat == BLOSC_SNAPPY_FORMAT) {
         nbytes = snappy_wrap_decompress((char*)src, (size_t)cbytes,
                                         (char*)_dest, (size_t)neblock);
       }
   #endif /*  HAVE_SNAPPY */
   #if defined(HAVE_ZLIB)
       else if (compformat == BLOSC_ZLIB_FORMAT) {
         nbytes = zlib_wrap_decompress((char*)src, (size_t)cbytes,
                                       (char*)_dest, (size_t)neblock);
       }
   #endif /*  HAVE_ZLIB */
   #if defined(HAVE_ZSTD)
       else if (compformat == BLOSC_ZSTD_FORMAT) {
         nbytes = zstd_wrap_decompress(thread_context,
                                       (char*)src, (size_t)cbytes,
                                       (char*)_dest, (size_t)neblock);
       }
   #endif /*  HAVE_ZSTD */
       else {
         compname = clibcode_to_clibname(compformat);
         fprintf(stderr,
                 "Blosc has not been compiled with decompression "
                     "support for '%s' format. ", compname);
         fprintf(stderr, "Please recompile for adding this support.\n");
         return -5;    /* signals no decompression support */
       }
 
       /* Check that decompressed bytes number is correct */
       if (nbytes != neblock) {
         return -2;
       }
 
     }
     src += cbytes;
     ctbytes += cbytes;
     _dest += nbytes;
     ntbytes += nbytes;
   } /* Closes j < nstreams */
 
   if (last_filter_index >= 0) {
-    int errcode = pipeline_d(context, bsize, dest, offset, tmp, tmp2, tmp3,
+    int errcode = pipeline_d(context, bsize, dest, dest_offset, tmp, tmp2, tmp3,
                              last_filter_index);
     if (errcode < 0)
       return errcode;
   }
 
   /* Return the number of uncompressed bytes */
   return (int)ntbytes;
 }
 
 
 /* Serial version for compression/decompression */
 static int serial_blosc(struct thread_context* thread_context) {
   blosc2_context* context = thread_context->parent_context;
   int32_t j, bsize, leftoverblock;
   int32_t cbytes;
   int32_t ntbytes = (int32_t)context->output_bytes;
   int32_t* bstarts = context->bstarts;
   uint8_t* tmp = thread_context->tmp;
   uint8_t* tmp2 = thread_context->tmp2;
   int dict_training = context->use_dict && (context->dict_cdict == NULL);
   bool memcpyed = context->header_flags & (uint8_t)BLOSC_MEMCPYED;
 
   for (j = 0; j < context->nblocks; j++) {
     if (context->do_compress && !memcpyed && !dict_training) {
       _sw32(bstarts + j, ntbytes);
     }
     bsize = context->blocksize;
     leftoverblock = 0;
     if ((j == context->nblocks - 1) && (context->leftover > 0)) {
       bsize = context->leftover;
       leftoverblock = 1;
     }
     if (context->do_compress) {
       if (memcpyed && !context->prefilter) {
         /* We want to memcpy only */
         memcpy(context->dest + BLOSC_MAX_OVERHEAD + j * context->blocksize,
                  context->src + j * context->blocksize,
                  (unsigned int)bsize);
         cbytes = (int32_t)bsize;
       }
       else {
         /* Regular compression */
         cbytes = blosc_c(thread_context, bsize, leftoverblock, ntbytes,
                          context->destsize, context->src, j * context->blocksize,
                          context->dest + ntbytes, tmp, tmp2);
         if (cbytes == 0) {
           ntbytes = 0;              /* uncompressible data */
           break;
         }
       }
     }
     else {
       if (memcpyed) {
         // Check that sizes in header are compatible, otherwise there is a header corruption
         int32_t csize = sw32_(context->src + 12);   /* compressed buffer size */
         if (context->sourcesize + BLOSC_MAX_OVERHEAD != csize) {
           return -1;
         }
         if (context->srcsize < BLOSC_MAX_OVERHEAD + (j * context->blocksize) + bsize) {
           /* Not enough input to copy block */
           return -1;
         }
         memcpy(context->dest + j * context->blocksize,
                context->src + BLOSC_MAX_OVERHEAD + j * context->blocksize,
                (unsigned int)bsize);
         cbytes = (int32_t)bsize;
       }
       else {
         /* Regular decompression */
         cbytes = blosc_d(thread_context, bsize, leftoverblock,
-                         context->src + sw32_(bstarts + j), context->srcsize,
+                         context->src, context->srcsize, sw32_(bstarts + j),
                          context->dest, j * context->blocksize, tmp, tmp2);
       }
     }
 
     if (cbytes < 0) {
       ntbytes = cbytes;         /* error in blosc_c or blosc_d */
       break;
     }
     ntbytes += cbytes;
   }
 
   return ntbytes;
 }
@@ -2207,158 +2214,158 @@ int blosc_decompress(const void* src, void* dest, size_t destsize) {
 /* Specific routine optimized for decompression a small number of
    items out of a compressed chunk.  This does not use threads because
    it would affect negatively to performance. */
 int _blosc_getitem(blosc2_context* context, const void* src, int32_t srcsize,
                    int start, int nitems, void* dest) {
   uint8_t* _src = NULL;             /* current pos for source buffer */
   uint8_t flags;                    /* flags for header */
   int32_t ntbytes = 0;              /* the number of uncompressed bytes */
   int32_t nblocks;                   /* number of total blocks in buffer */
   int32_t leftover;                  /* extra bytes at end of buffer */
   int32_t* bstarts;                /* start pointers for each block */
   int32_t typesize, blocksize, nbytes;
   int32_t bsize, bsize2, ebsize, leftoverblock;
   int32_t cbytes;
   int32_t startb, stopb;
   int32_t stop = start + nitems;
   int j;
 
   if (srcsize < BLOSC_MIN_HEADER_LENGTH) {
     /* Not enough input to parse Blosc1 header */
     return -1;
   }
   _src = (uint8_t*)(src);
 
   /* Read the header block */
   flags = _src[2];                  /* flags */
   bool memcpyed = flags & (uint8_t)BLOSC_MEMCPYED;
   typesize = (int32_t)_src[3];      /* typesize */
   nbytes = sw32_(_src + 4);         /* buffer size */
   blocksize = sw32_(_src + 8);      /* block size */
   cbytes = sw32_(_src + 12);    /* compressed buffer size */
 
   ebsize = blocksize + typesize * (int32_t)sizeof(int32_t);
 
   if ((context->header_flags & BLOSC_DOSHUFFLE) &&
       (context->header_flags & BLOSC_DOBITSHUFFLE)) {
     /* Extended header */
     if (srcsize < BLOSC_EXTENDED_HEADER_LENGTH) {
       /* Not enough input to parse Blosc2 header */
       return -1;
     }
     uint8_t* filters = _src + BLOSC_MIN_HEADER_LENGTH;
     uint8_t* filters_meta = filters + 8;
     for (int i = 0; i < BLOSC2_MAX_FILTERS; i++) {
       context->filters[i] = filters[i];
       context->filters_meta[i] = filters_meta[i];
     }
     bstarts = (int32_t*)(_src + BLOSC_EXTENDED_HEADER_LENGTH);
   } else {
     /* Minimal header */
     flags_to_filters(flags, context->filters);
     bstarts = (int32_t*)(_src + BLOSC_MIN_HEADER_LENGTH);
   }
 
   // Some checks for malformed buffers
   if (blocksize <= 0 || blocksize > nbytes || typesize <= 0 || typesize > BLOSC_MAX_TYPESIZE) {
     return -1;
   }
 
   /* Compute some params */
   /* Total blocks */
   nblocks = nbytes / blocksize;
   leftover = nbytes % blocksize;
   nblocks = (leftover > 0) ? nblocks + 1 : nblocks;
 
   /* Check region boundaries */
   if ((start < 0) || (start * typesize > nbytes)) {
     fprintf(stderr, "`start` out of bounds");
     return -1;
   }
 
   if ((stop < 0) || (stop * typesize > nbytes)) {
     fprintf(stderr, "`start`+`nitems` out of bounds");
     return -1;
   }
 
   if (_src + srcsize < (uint8_t *)(bstarts + nblocks)) {
     /* Not enough input to read all `bstarts` */
     return -1;
   }
 
   for (j = 0; j < nblocks; j++) {
     bsize = blocksize;
     leftoverblock = 0;
     if ((j == nblocks - 1) && (leftover > 0)) {
       bsize = leftover;
       leftoverblock = 1;
     }
 
     /* Compute start & stop for each block */
     startb = start * (int)typesize - j * (int)blocksize;
     stopb = stop * (int)typesize - j * (int)blocksize;
     if ((startb >= (int)blocksize) || (stopb <= 0)) {
       continue;
     }
     if (startb < 0) {
       startb = 0;
     }
     if (stopb > (int)blocksize) {
       stopb = (int)blocksize;
     }
     bsize2 = stopb - startb;
 
     /* Do the actual data copy */
     if (memcpyed) {
       // Check that sizes in header are compatible, otherwise there is a header corruption
       if (nbytes + BLOSC_MAX_OVERHEAD != cbytes) {
          return -1;
       }
       if (srcsize < BLOSC_MAX_OVERHEAD + j * blocksize + startb + bsize2) {
         /* Not enough input to copy data */
         return -1;
       }
       memcpy((uint8_t*)dest + ntbytes,
              (uint8_t*)src + BLOSC_MAX_OVERHEAD + j * blocksize + startb,
              (unsigned int)bsize2);
       cbytes = (int)bsize2;
     }
     else {
       struct thread_context* scontext = context->serial_context;
 
       /* Resize the temporaries in serial context if needed */
       if (blocksize != scontext->tmp_blocksize) {
         my_free(scontext->tmp);
         scontext->tmp_nbytes = (size_t)3 * context->blocksize + ebsize;
         scontext->tmp = my_malloc(scontext->tmp_nbytes);
         scontext->tmp2 = scontext->tmp + blocksize;
         scontext->tmp3 = scontext->tmp + blocksize + ebsize;
         scontext->tmp4 = scontext->tmp + 2 * blocksize + ebsize;
         scontext->tmp_blocksize = (int32_t)blocksize;
       }
 
       // Regular decompression.  Put results in tmp2.
       // If the block is aligned and the worst case fits in destination, let's avoid a copy
       bool get_single_block = ((startb == 0) && (bsize == nitems * typesize));
       uint8_t* tmp2 = get_single_block ? dest : scontext->tmp2;
       cbytes = blosc_d(context->serial_context, bsize, leftoverblock,
-                       (uint8_t*)src + sw32_(bstarts + j), srcsize,
+                       src, srcsize, sw32_(bstarts + j),
                        tmp2, 0, scontext->tmp, scontext->tmp3);
       if (cbytes < 0) {
         ntbytes = cbytes;
         break;
       }
       if (!get_single_block) {
         /* Copy to destination */
         memcpy((uint8_t *) dest + ntbytes, tmp2 + startb, (unsigned int) bsize2);
       }
       cbytes = (int)bsize2;
     }
     ntbytes += cbytes;
   }
 
   return ntbytes;
 }
 
 
 /* Specific routine optimized for decompression a small number of
    items out of a compressed chunk.  Public non-contextual API. */
@@ -2416,196 +2423,196 @@ int blosc2_getitem_ctx(blosc2_context* context, const void* src, int32_t srcsize
 /* execute single compression/decompression job for a single thread_context */
 static void t_blosc_do_job(void *ctxt)
 {
   struct thread_context* thcontext = (struct thread_context*)ctxt;
   blosc2_context* context = thcontext->parent_context;
   int32_t cbytes;
   int32_t ntdest;
   int32_t tblocks;               /* number of blocks per thread */
   int32_t tblock;                /* limit block on a thread */
   int32_t nblock_;              /* private copy of nblock */
   int32_t bsize;
   int32_t leftoverblock;
   /* Parameters for threads */
   int32_t blocksize;
   int32_t ebsize;
   int32_t srcsize;
   bool compress = context->do_compress != 0;
   int32_t maxbytes;
   int32_t nblocks;
   int32_t leftover;
   int32_t leftover2;
   int32_t* bstarts;
   const uint8_t* src;
   uint8_t* dest;
   uint8_t* tmp;
   uint8_t* tmp2;
   uint8_t* tmp3;
 
   /* Get parameters for this thread before entering the main loop */
   blocksize = context->blocksize;
   ebsize = blocksize + context->typesize * sizeof(int32_t);
   maxbytes = context->destsize;
   nblocks = context->nblocks;
   leftover = context->leftover;
   bstarts = context->bstarts;
   src = context->src;
   srcsize = context->srcsize;
   dest = context->dest;
 
   /* Resize the temporaries if needed */
   if (blocksize != thcontext->tmp_blocksize) {
     my_free(thcontext->tmp);
     thcontext->tmp_nbytes = (size_t)3 * context->blocksize + ebsize;
     thcontext->tmp = my_malloc(thcontext->tmp_nbytes);
     thcontext->tmp2 = thcontext->tmp + blocksize;
     thcontext->tmp3 = thcontext->tmp + blocksize + ebsize;
     thcontext->tmp4 = thcontext->tmp + 2 * blocksize + ebsize;
     thcontext->tmp_blocksize = blocksize;
   }
 
   tmp = thcontext->tmp;
   tmp2 = thcontext->tmp2;
   tmp3 = thcontext->tmp3;
 
   // Determine whether we can do a static distribution of workload among different threads
   bool memcpyed = context->header_flags & (uint8_t)BLOSC_MEMCPYED;
   bool static_schedule = (!compress || memcpyed) && context->block_maskout == NULL;
   if (static_schedule) {
       /* Blocks per thread */
       tblocks = nblocks / context->nthreads;
       leftover2 = nblocks % context->nthreads;
       tblocks = (leftover2 > 0) ? tblocks + 1 : tblocks;
       nblock_ = thcontext->tid * tblocks;
       tblock = nblock_ + tblocks;
       if (tblock > nblocks) {
           tblock = nblocks;
       }
   }
   else {
     // Use dynamic schedule via a queue.  Get the next block.
     pthread_mutex_lock(&context->count_mutex);
     context->thread_nblock++;
     nblock_ = context->thread_nblock;
     pthread_mutex_unlock(&context->count_mutex);
     tblock = nblocks;
   }
 
   /* Loop over blocks */
   leftoverblock = 0;
   while ((nblock_ < tblock) && (context->thread_giveup_code > 0)) {
     bsize = blocksize;
     if (nblock_ == (nblocks - 1) && (leftover > 0)) {
       bsize = leftover;
       leftoverblock = 1;
     }
     if (compress) {
       if (memcpyed) {
         if (!context->prefilter) {
           /* We want to memcpy only */
           memcpy(dest + BLOSC_MAX_OVERHEAD + nblock_ * blocksize,
                  src + nblock_ * blocksize, (unsigned int) bsize);
           cbytes = (int32_t) bsize;
         }
         else {
           /* Only the prefilter has to be executed, and this is done in blosc_c().
            * However, no further actions are needed, so we can put the result
            * directly in dest. */
           cbytes = blosc_c(thcontext, bsize, leftoverblock, 0,
                            ebsize, src, nblock_ * blocksize,
                            dest + BLOSC_MAX_OVERHEAD + nblock_ * blocksize,
                            tmp, tmp3);
         }
       }
       else {
         /* Regular compression */
         cbytes = blosc_c(thcontext, bsize, leftoverblock, 0,
                           ebsize, src, nblock_ * blocksize, tmp2, tmp, tmp3);
       }
     }
     else {
       if (memcpyed) {
         /* We want to memcpy only */
         if (srcsize < BLOSC_MAX_OVERHEAD + (nblock_ * blocksize) + bsize) {
           /* Not enough input to copy data */
 
           cbytes = -1;
         } else {
           memcpy(dest + nblock_ * blocksize,
                   src + BLOSC_MAX_OVERHEAD + nblock_ * blocksize, (unsigned int)bsize);
           cbytes = (int32_t)bsize;
         }
       }
       else {
         if (srcsize < BLOSC_MAX_OVERHEAD + (sizeof(int32_t) * nblocks)) {
           /* Not enough input to read all `bstarts` */
           cbytes = -1;
         } else {
           cbytes = blosc_d(thcontext, bsize, leftoverblock,
-                            src + sw32_(bstarts + nblock_), srcsize,
+                            src, srcsize, sw32_(bstarts + nblock_),
                             dest, nblock_ * blocksize, tmp, tmp2);
         }
       }
     }
 
     /* Check whether current thread has to giveup */
     if (context->thread_giveup_code <= 0) {
       break;
     }
 
     /* Check results for the compressed/decompressed block */
     if (cbytes < 0) {            /* compr/decompr failure */
       /* Set giveup_code error */
       pthread_mutex_lock(&context->count_mutex);
       context->thread_giveup_code = cbytes;
       pthread_mutex_unlock(&context->count_mutex);
       break;
     }
 
     if (compress && !memcpyed) {
       /* Start critical section */
       pthread_mutex_lock(&context->count_mutex);
       ntdest = context->output_bytes;
       // Note: do not use a typical local dict_training variable here
       // because it is probably cached from previous calls if the number of
       // threads does not change (the usual thing).
       if (!(context->use_dict && context->dict_cdict == NULL)) {
         _sw32(bstarts + nblock_, (int32_t) ntdest);
       }
 
       if ((cbytes == 0) || (ntdest + cbytes > maxbytes)) {
         context->thread_giveup_code = 0;  /* uncompressible buf */
         pthread_mutex_unlock(&context->count_mutex);
         break;
       }
       context->thread_nblock++;
       nblock_ = context->thread_nblock;
       context->output_bytes += cbytes;
       pthread_mutex_unlock(&context->count_mutex);
       /* End of critical section */
 
       /* Copy the compressed buffer to destination */
       memcpy(dest + ntdest, tmp2, (unsigned int) cbytes);
     }
     else if (static_schedule) {
       nblock_++;
     }
     else {
       pthread_mutex_lock(&context->count_mutex);
       context->thread_nblock++;
       nblock_ = context->thread_nblock;
       context->output_bytes += cbytes;
       pthread_mutex_unlock(&context->count_mutex);
     }
 
   } /* closes while (nblock_) */
 
   if (static_schedule) {
     context->output_bytes = context->sourcesize;
     if (compress) {
       context->output_bytes += BLOSC_MAX_OVERHEAD;
     }
   }
 
 }
 
 /* Decompress & unshuffle several blocks in a single thread */
