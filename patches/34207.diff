commit 78370ed7849e09bd946b96aa78e1f34683f74665
Author: David Garske <david@wolfssl.com>
Date:   Wed Jun 2 15:35:50 2021 -0700

    Fixes for three multi-thread issues:
    1) The client lock is needed earlier to protect the "reset the packet state".
    2) The subscribe ack was using an unprotected pointer to response code list. Now it makes a copy of those codes.
    3) Add protection to multi-thread example "stop" variable.
    Thanks to Fatimah Aljaafari (@fatimahkj) for the report.
    ZD 12379 and PR #198

diff --git a/examples/multithread/multithread.c b/examples/multithread/multithread.c
index fc1926b..7e54bd9 100755
--- a/examples/multithread/multithread.c
+++ b/examples/multithread/multithread.c
@@ -67,7 +67,7 @@ static int mNumMsgsRecvd;
     #define THREAD_EXIT(e)         pthread_exit((void*)e)
 #endif
 
-static wm_Sem packetIdLock; /* Protect access to mqtt_get_packetid() */
+static wm_Sem mtLock; /* Protect "packetId" and "stop" */
 static wm_Sem pingSignal;
 
 static MQTTCtx gMqttCtx;
@@ -75,12 +75,28 @@ static MQTTCtx gMqttCtx;
 static word16 mqtt_get_packetid_threadsafe(void)
 {
     word16 packet_id;
-    wm_SemLock(&packetIdLock);
+    wm_SemLock(&mtLock);
     packet_id = mqtt_get_packetid();
-    wm_SemUnlock(&packetIdLock);
+    wm_SemUnlock(&mtLock);
     return packet_id;
 }
 
+static void mqtt_stop_set(void)
+{
+    wm_SemLock(&mtLock);
+    mStopRead = 1;
+    wm_SemUnlock(&mtLock);
+}
+
+static int mqtt_stop_get(void)
+{
+    int rc;
+    wm_SemLock(&mtLock);
+    rc = mStopRead;
+    wm_SemUnlock(&mtLock);
+    return rc;
+}
+
 #ifdef WOLFMQTT_DISCONNECT_CB
 /* callback indicates a network error occurred */
 static int mqtt_disconnect_cb(MqttClient* client, int error_code, void* ctx)
@@ -96,53 +112,53 @@ static int mqtt_disconnect_cb(MqttClient* client, int error_code, void* ctx)
 static int mqtt_message_cb(MqttClient *client, MqttMessage *msg,
     byte msg_new, byte msg_done)
 {
     byte buf[PRINT_BUFFER_SIZE+1];
     word32 len;
     MQTTCtx* mqttCtx = (MQTTCtx*)client->ctx;
     (void)mqttCtx;
 
     if (msg_new) {
         /* Determine min size to dump */
         len = msg->topic_name_len;
         if (len > PRINT_BUFFER_SIZE) {
             len = PRINT_BUFFER_SIZE;
         }
         XMEMCPY(buf, msg->topic_name, len);
         buf[len] = '\0'; /* Make sure its null terminated */
 
         /* Print incoming message */
         PRINTF("MQTT Message: Topic %s, Qos %d, Id %d, Len %u",
             buf, msg->qos, msg->packet_id, msg->total_len);
 
         /* for test mode: count the number of TEST_MESSAGE matches received */
         if (mqttCtx->test_mode) {
             if (XSTRLEN(TEST_MESSAGE) == msg->buffer_len &&
                 /* Only compare the "test" part */
                 XSTRNCMP(TEST_MESSAGE, (char*)msg->buffer,
                          msg->buffer_len-2) == 0)
             {
                 mNumMsgsRecvd++;
                 if (mNumMsgsRecvd == NUM_PUB_TASKS) {
-                    mStopRead = 1;
+                    mqtt_stop_set();
                 }
             }
         }
     }
 
     /* Print message payload */
     len = msg->buffer_len;
     if (len > PRINT_BUFFER_SIZE) {
         len = PRINT_BUFFER_SIZE;
     }
     XMEMCPY(buf, msg->buffer, len);
     buf[len] = '\0'; /* Make sure its null terminated */
     PRINTF("Payload (%d - %d): %s",
         msg->buffer_pos, msg->buffer_pos + len, buf);
 
     if (msg_done) {
         PRINTF("MQTT Message: Done");
     }
 
     /* Return negative to terminate publish processing */
     return MQTT_CODE_SUCCESS;
 }
@@ -189,117 +205,117 @@ static void client_disconnect(MQTTCtx *mqttCtx)
 static int multithread_test_init(MQTTCtx *mqttCtx)
 {
     int rc = MQTT_CODE_SUCCESS;
 
     mNumMsgsRecvd = 0;
 
     /* Create a demo mutex for making packet id values */
-    rc = wm_SemInit(&packetIdLock);
+    rc = wm_SemInit(&mtLock);
     if (rc != 0) {
         client_exit(mqttCtx);
     }
     rc = wm_SemInit(&pingSignal);
     if (rc != 0) {
-        wm_SemFree(&packetIdLock);
+        wm_SemFree(&mtLock);
         client_exit(mqttCtx);
     }
     wm_SemLock(&pingSignal); /* default to locked */
 
     PRINTF("MQTT Client: QoS %d, Use TLS %d", mqttCtx->qos,
             mqttCtx->use_tls);
 
     PRINTF("Use \"Ctrl+c\" to exit.");
 
     /* Initialize Network */
     rc = MqttClientNet_Init(&mqttCtx->net, mqttCtx);
     PRINTF("MQTT Net Init: %s (%d)",
         MqttClient_ReturnCodeToString(rc), rc);
     if (rc != MQTT_CODE_SUCCESS) {
         client_exit(mqttCtx);
     }
 
     /* setup tx/rx buffers */
     mqttCtx->tx_buf = (byte*)WOLFMQTT_MALLOC(MAX_BUFFER_SIZE);
     mqttCtx->rx_buf = (byte*)WOLFMQTT_MALLOC(MAX_BUFFER_SIZE);
 
     /* Initialize MqttClient structure */
     rc = MqttClient_Init(&mqttCtx->client, &mqttCtx->net,
         mqtt_message_cb,
         mqttCtx->tx_buf, MAX_BUFFER_SIZE,
         mqttCtx->rx_buf, MAX_BUFFER_SIZE,
         mqttCtx->cmd_timeout_ms);
 
     PRINTF("MQTT Init: %s (%d)",
         MqttClient_ReturnCodeToString(rc), rc);
     if (rc != MQTT_CODE_SUCCESS) {
         client_exit(mqttCtx);
     }
     /* The client.ctx will be stored in the cert callback ctx during
        MqttSocket_Connect for use by mqtt_tls_verify_cb */
     mqttCtx->client.ctx = mqttCtx;
 
 #ifdef WOLFMQTT_DISCONNECT_CB
     /* setup disconnect callback */
     rc = MqttClient_SetDisconnectCallback(&mqttCtx->client,
         mqtt_disconnect_cb, NULL);
     if (rc != MQTT_CODE_SUCCESS) {
         client_exit(mqttCtx);
     }
 #endif
 
     /* Connect to broker */
     rc = MqttClient_NetConnect(&mqttCtx->client, mqttCtx->host,
            mqttCtx->port,
         DEFAULT_CON_TIMEOUT_MS, mqttCtx->use_tls, mqtt_tls_cb);
 
     PRINTF("MQTT Socket Connect: %s (%d)",
         MqttClient_ReturnCodeToString(rc), rc);
     if (rc != MQTT_CODE_SUCCESS) {
         client_exit(mqttCtx);
     }
 
     /* Build connect packet */
     XMEMSET(&mqttCtx->connect, 0, sizeof(MqttConnect));
     mqttCtx->connect.keep_alive_sec = mqttCtx->keep_alive_sec;
     mqttCtx->connect.clean_session = mqttCtx->clean_session;
     mqttCtx->connect.client_id = mqttCtx->client_id;
 
     /* Last will and testament sent by broker to subscribers
         of topic when broker connection is lost */
     XMEMSET(&mqttCtx->lwt_msg, 0, sizeof(mqttCtx->lwt_msg));
     mqttCtx->connect.lwt_msg = &mqttCtx->lwt_msg;
     mqttCtx->connect.enable_lwt = mqttCtx->enable_lwt;
     if (mqttCtx->enable_lwt) {
         /* Send client id in LWT payload */
         mqttCtx->lwt_msg.qos = mqttCtx->qos;
         mqttCtx->lwt_msg.retain = 0;
         mqttCtx->lwt_msg.topic_name = WOLFMQTT_TOPIC_NAME"lwttopic";
         mqttCtx->lwt_msg.buffer = (byte*)mqttCtx->client_id;
         mqttCtx->lwt_msg.total_len =
           (word16)XSTRLEN(mqttCtx->client_id);
     }
     /* Optional authentication */
     mqttCtx->connect.username = mqttCtx->username;
     mqttCtx->connect.password = mqttCtx->password;
 
     /* Send Connect and wait for Connect Ack */
     do {
         rc = MqttClient_Connect(&mqttCtx->client, &mqttCtx->connect);
     } while (rc == MQTT_CODE_CONTINUE || rc == MQTT_CODE_STDIN_WAKE);
 
     PRINTF("MQTT Connect: Proto (%s), %s (%d)",
         MqttClient_GetProtocolVersionString(&mqttCtx->client),
         MqttClient_ReturnCodeToString(rc), rc);
     if (rc != MQTT_CODE_SUCCESS) {
         client_disconnect(mqttCtx);
     }
 
     /* Validate Connect Ack info */
     PRINTF("MQTT Connect Ack: Return Code %u, Session Present %d",
         mqttCtx->connect.ack.return_code,
         (mqttCtx->connect.ack.flags &
             MQTT_CONNECT_ACK_FLAG_SESSION_PRESENT) ?
             1 : 0
     );
 
     return rc;
 }
@@ -307,12 +323,12 @@ static int multithread_test_init(MQTTCtx *mqttCtx)
 static int multithread_test_finish(MQTTCtx *mqttCtx)
 {
     client_disconnect(mqttCtx);
 
     wm_SemFree(&pingSignal);
-    wm_SemFree(&packetIdLock);
+    wm_SemFree(&mtLock);
 
     return mqttCtx->return_code;
 }
 
 /* this task subscribes to topic */
 #ifdef USE_WINDOWS_API
@@ -378,76 +394,76 @@ static DWORD WINAPI waitMessage_task( LPVOID param )
 #else
 static void *waitMessage_task(void *param)
 #endif
 {
     int rc;
     MQTTCtx *mqttCtx = (MQTTCtx*)param;
 
     /* Read Loop */
     PRINTF("MQTT Waiting for message...");
 
     do {
         /* Try and read packet */
         rc = MqttClient_WaitMessage(&mqttCtx->client, mqttCtx->cmd_timeout_ms);
 
         /* check for test mode */
-        if (mStopRead) {
+        if (mqtt_stop_get()) {
             rc = MQTT_CODE_SUCCESS;
             PRINTF("MQTT Exiting...");
             break;
         }
 
         /* check return code */
     #ifdef WOLFMQTT_ENABLE_STDIN_CAP
         else if (rc == MQTT_CODE_STDIN_WAKE) {
             XMEMSET(mqttCtx->rx_buf, 0, MAX_BUFFER_SIZE);
             if (XFGETS((char*)mqttCtx->rx_buf, MAX_BUFFER_SIZE - 1,
                     stdin) != NULL)
             {
                 rc = (int)XSTRLEN((char*)mqttCtx->rx_buf);
 
                 /* Publish Topic */
                 mqttCtx->stat = WMQ_PUB;
                 XMEMSET(&mqttCtx->publish, 0, sizeof(MqttPublish));
                 mqttCtx->publish.retain = 0;
                 mqttCtx->publish.qos = mqttCtx->qos;
                 mqttCtx->publish.duplicate = 0;
                 mqttCtx->publish.topic_name = mqttCtx->topic_name;
                 mqttCtx->publish.packet_id = mqtt_get_packetid_threadsafe();
                 mqttCtx->publish.buffer = mqttCtx->rx_buf;
                 mqttCtx->publish.total_len = (word16)rc;
                 rc = MqttClient_Publish(&mqttCtx->client,
                        &mqttCtx->publish);
                 PRINTF("MQTT Publish: Topic %s, %s (%d)",
                     mqttCtx->publish.topic_name,
                     MqttClient_ReturnCodeToString(rc), rc);
             }
         }
     #endif
         else if (rc == MQTT_CODE_ERROR_TIMEOUT) {
             if (mqttCtx->test_mode) {
                 /* timeout in test mode should exit */
                 PRINTF("MQTT Exiting timeout...");
                 break;
             }
 
             /* Keep Alive handled in ping thread */
             /* Signal keep alive thread */
             wm_SemUnlock(&pingSignal);
         }
         else if (rc != MQTT_CODE_SUCCESS) {
             /* There was an error */
             PRINTF("MQTT Message Wait Error: %s (%d)",
                 MqttClient_ReturnCodeToString(rc), rc);
             break;
         }
-    } while (!mStopRead);
+    } while (!mqtt_stop_get());
 
     mqttCtx->return_code = rc;
     wm_SemUnlock(&pingSignal); /* wake ping thread */
 
     THREAD_EXIT(0);
 }
 
 /* This task publishes a message to the broker. The task will be created
    NUM_PUB_TASKS times, sending a unique message each time. */
 #ifdef USE_WINDOWS_API
@@ -488,28 +504,28 @@ static DWORD WINAPI ping_task( LPVOID param )
 #else
 static void *ping_task(void *param)
 #endif
 {
     int rc;
     MQTTCtx *mqttCtx = (MQTTCtx*)param;
     MqttPing ping;
 
     XMEMSET(&ping, 0, sizeof(ping));
 
     do {
         wm_SemLock(&pingSignal);
-        if (mStopRead)
+        if (mqtt_stop_get())
             break;
 
         /* Keep Alive Ping */
         PRINTF("Sending ping keep-alive");
 
         rc = MqttClient_Ping_ex(&mqttCtx->client, &ping);
         if (rc != MQTT_CODE_SUCCESS) {
             PRINTF("MQTT Ping Keep Alive Error: %s (%d)",
                 MqttClient_ReturnCodeToString(rc), rc);
             break;
         }
-    } while (!mStopRead);
+    } while (!mqtt_stop_get());
 
     THREAD_EXIT(0);
 }
@@ -538,86 +554,86 @@ static int unsubscribe_do(MQTTCtx *mqttCtx)
 int multithread_test(MQTTCtx *mqttCtx)
 {
     int rc = 0;
     int i;
     THREAD_T threadList[NUM_PUB_TASKS+3];
     int threadCount = 0;
 
     rc = multithread_test_init(mqttCtx);
     if (rc == 0) {
         if (THREAD_CREATE(&threadList[threadCount++], subscribe_task, mqttCtx)) {
             PRINTF("THREAD_CREATE failed: %d\n", errno);
             return -1;
         }
         /* for test mode, we must complete subscribe to track number of pubs received */
         if (mqttCtx->test_mode) {
             if (THREAD_JOIN(threadList, threadCount)) {
                 PRINTF("THREAD_JOIN failed: %d\n", errno);
                 return -1;
             }
             threadCount = 0;
         }
         /* Create the thread that waits for messages */
         if (THREAD_CREATE(&threadList[threadCount++], waitMessage_task, mqttCtx)) {
             PRINTF("THREAD_CREATE failed: %d\n", errno);
             return -1;
         }
         /* Ping */
         if (THREAD_CREATE(&threadList[threadCount++], ping_task, mqttCtx)) {
             PRINTF("THREAD_CREATE failed: %d\n", errno);
             return -1;
         }
         /* Create threads that publish unique messages */
         for (i = 0; i < NUM_PUB_TASKS; i++) {
             if (THREAD_CREATE(&threadList[threadCount++], publish_task, mqttCtx)) {
                 PRINTF("THREAD_CREATE failed: %d\n", errno);
                 return -1;
             }
         }
         
         /* Join threads - wait for completion */
         if (THREAD_JOIN(threadList, threadCount)) {
 #ifdef __GLIBC__
             PRINTF("THREAD_JOIN failed: %m\n"); /* %m is specific to glibc/uclibc/musl, and recently (2018) added to FreeBSD */
 #else
             PRINTF("THREAD_JOIN failed: %d\n",errno);
 #endif
         }
 
         (void)unsubscribe_do(mqttCtx);
 
         rc = multithread_test_finish(mqttCtx);
     }
     return rc;
 }
 #endif /* WOLFMQTT_MULTITHREAD */
 
 /* so overall tests can pull in test function */
 #if !defined(NO_MAIN_DRIVER) && !defined(MICROCHIP_MPLAB_HARMONY)
     #ifdef USE_WINDOWS_API
         #include <windows.h> /* for ctrl handler */
 
         static BOOL CtrlHandler(DWORD fdwCtrlType)
         {
             if (fdwCtrlType == CTRL_C_EVENT) {
-                mStopRead = 1;
+                mqtt_stop_set();
                 PRINTF("Received Ctrl+c");
             #ifdef WOLFMQTT_ENABLE_STDIN_CAP
                 MqttClientNet_Wake(&gMqttCtx.net);
             #endif
                 return TRUE;
             }
             return FALSE;
         }
     #elif HAVE_SIGNAL
         #include <signal.h>
         static void sig_handler(int signo)
         {
             if (signo == SIGINT) {
-                mStopRead = 1;
+                mqtt_stop_set();
                 PRINTF("Received SIGINT");
             #ifdef WOLFMQTT_ENABLE_STDIN_CAP
                 MqttClientNet_Wake(&gMqttCtx.net);
             #endif
             }
         }
     #endif
diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index d5a8577..741dd58 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -748,224 +748,228 @@ static int MqttClient_WaitType(MqttClient *client, void *packet_obj,
 wait_again:
 
     /* initialize variables */
     packet_id = 0;
     packet_type = MQTT_PACKET_TYPE_RESERVED;
 #ifdef WOLFMQTT_MULTITHREAD
     pendResp = NULL;
     readLocked = 0;
 #endif
     waitMatchFound = 0;
 
 #ifdef WOLFMQTT_DEBUG_CLIENT
     PRINTF("MqttClient_WaitType: Type %s (%d), ID %d",
         MqttPacket_TypeDesc((MqttPacketType)wait_type),
             wait_type, wait_packet_id);
 #endif
 
     switch ((int)*mms_stat)
     {
         case MQTT_MSG_BEGIN:
         {
+        #ifdef WOLFMQTT_MULTITHREAD
+            /* Lock recv socket mutex */
+            rc = wm_SemLock(&client->lockRecv);
+            if (rc != 0) {
+                PRINTF("MqttClient_WaitType: recv lock error!\n");
+                return rc;
+            }
+            readLocked = 1;
+
+            /* Lock client */
+            rc = wm_SemLock(&client->lockClient);
+            if (rc != 0) {
+                PRINTF("MqttClient_WaitType: click lock error!\n");
+                wm_SemUnlock(&client->lockRecv);
+                return rc;
+            }
+        #endif
+
             /* reset the packet state */
             client->packet.stat = MQTT_PK_BEGIN;
             client->read.pos = 0;
 
             FALL_THROUGH;
         }
     #ifdef WOLFMQTT_V5
         case MQTT_MSG_AUTH:
     #endif
         case MQTT_MSG_WAIT:
         {
         #ifdef WOLFMQTT_MULTITHREAD
-            /* Lock recv socket mutex */
-            rc = wm_SemLock(&client->lockRecv);
-            if (rc != 0) {
-                PRINTF("!!!!LOCK ERROR!!!!\n");
-                return rc;
-            }
-            readLocked = 1;
-
             /* Check to see if packet type and id have already completed */
             pendResp = NULL;
-            rc = wm_SemLock(&client->lockClient);
-            if (rc == 0) {
-                if (MqttClient_RespList_Find(client, (MqttPacketType)wait_type, 
-                        wait_packet_id, &pendResp)) {
-                    if (pendResp->packetDone) {
-                        /* pending response is already done, so return */
-                        rc = pendResp->packet_ret;
-                    #ifdef WOLFMQTT_DEBUG_CLIENT
-                        PRINTF("PendResp already Done %p: Rc %d", pendResp, rc);
-                    #endif
-                        MqttClient_RespList_Remove(client, pendResp);
-                        wm_SemUnlock(&client->lockClient);
-                        wm_SemUnlock(&client->lockRecv);
-                        return rc;
-                    }
+            if (MqttClient_RespList_Find(client, (MqttPacketType)wait_type, 
+                    wait_packet_id, &pendResp)) {
+                if (pendResp->packetDone) {
+                    /* pending response is already done, so return */
+                    rc = pendResp->packet_ret;
+                #ifdef WOLFMQTT_DEBUG_CLIENT
+                    PRINTF("PendResp already Done %p: Rc %d", pendResp, rc);
+                #endif
+                    MqttClient_RespList_Remove(client, pendResp);
+                    wm_SemUnlock(&client->lockClient);
+                    wm_SemUnlock(&client->lockRecv);
+                    return rc;
                 }
-                wm_SemUnlock(&client->lockClient);
-            }
-            else {
-                wm_SemUnlock(&client->lockRecv);
-                return rc;
             }
+            wm_SemUnlock(&client->lockClient);
         #endif /* WOLFMQTT_MULTITHREAD */
 
             *mms_stat = MQTT_MSG_WAIT;
 
             /* Wait for packet */
             rc = MqttPacket_Read(client, client->rx_buf, client->rx_buf_len,
                     timeout_ms);
             /* handle failure */
             if (rc <= 0) {
                 break;
             }
+
             /* capture length read */
             client->packet.buf_len = rc;
 
             /* Decode Packet - get type and id */
             rc = MqttClient_DecodePacket(client, client->rx_buf,
                 client->packet.buf_len, NULL, &packet_type, NULL, &packet_id);
             if (rc < 0) {
                 break;
             }
 
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("Read Packet: Len %d, Type %d, ID %d",
                 client->packet.buf_len, packet_type, packet_id);
         #endif
 
             *mms_stat = MQTT_MSG_READ;
 
             FALL_THROUGH;
         }
 
         case MQTT_MSG_READ:
         case MQTT_MSG_READ_PAYLOAD:
         {
             MqttPacketType use_packet_type;
             void* use_packet_obj;
 
         #ifdef WOLFMQTT_MULTITHREAD
             readLocked = 1; /* if in this state read is locked */
         #endif
 
             /* read payload state only happens for publish messages */
             if (*mms_stat == MQTT_MSG_READ_PAYLOAD) {
                 packet_type = MQTT_PACKET_TYPE_PUBLISH;
             }
 
             /* Determine if we received data for this request */
             if ((wait_type == MQTT_PACKET_TYPE_ANY ||
                  wait_type == packet_type) &&
                (wait_packet_id == 0 || wait_packet_id == packet_id))
             {
                 use_packet_obj = packet_obj;
                 waitMatchFound = 1;
             }
             else {
                 /* use generic packet object */
                 use_packet_obj = &client->msg;
             }
             use_packet_type = packet_type;
 
         #ifdef WOLFMQTT_MULTITHREAD
             /* Check to see if we have a pending response for this packet */
             pendResp = NULL;
             rc = wm_SemLock(&client->lockClient);
             if (rc == 0) {
                 if (MqttClient_RespList_Find(client, packet_type, packet_id,
                                                                &pendResp)) {
                     /* we found packet match this incoming read packet */
                     pendResp->packetProcessing = 1;
                     use_packet_obj = pendResp->packet_obj;
                     use_packet_type = pendResp->packet_type;
                     /* req from another thread... not a match */
                     waitMatchFound = 0;
                 }
                 wm_SemUnlock(&client->lockClient);
             }
             else {
                 break; /* error */
             }
         #endif /* WOLFMQTT_MULTITHREAD */
 
             /* Perform packet handling for publish callback and QoS */
             rc = MqttClient_HandlePacket(client, use_packet_type,
                 use_packet_obj, timeout_ms);
 
         #ifdef WOLFMQTT_NONBLOCK
             if (rc == MQTT_CODE_CONTINUE) {
                 /* we have received some data, so keep the recv
                     mutex lock active and return */
                 return rc;
             }
         #endif
 
             /* handle success case */
             if (rc >= 0) {
                 rc = MQTT_CODE_SUCCESS;
             }
 
         #ifdef WOLFMQTT_MULTITHREAD
             if (pendResp) {
                 /* Mark pending response entry done */
                 if (wm_SemLock(&client->lockClient) == 0) {
                     pendResp->packetDone = 1;
                     pendResp->packet_ret = rc;
                 #ifdef WOLFMQTT_DEBUG_CLIENT
                     PRINTF("PendResp Done %p", pendResp);
                 #endif
                     pendResp = NULL;
                     wm_SemUnlock(&client->lockClient);
                 }
             }
         #endif /* WOLFMQTT_MULTITHREAD */
             break;
         }
 
         case MQTT_MSG_WRITE:
         case MQTT_MSG_WRITE_PAYLOAD:
         default:
         {
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("MqttClient_WaitType: Invalid state %d!", *mms_stat);
         #endif
             rc = MQTT_CODE_ERROR_STAT;
             break;
         }
     } /* switch (*mms_stat) */
 
 #ifdef WOLFMQTT_MULTITHREAD
     if (readLocked) {
         wm_SemUnlock(&client->lockRecv);
     }
 #endif
 
 #ifdef WOLFMQTT_NONBLOCK
     if (rc != MQTT_CODE_CONTINUE)
 #endif
     {
         /* reset state */
         *mms_stat = MQTT_MSG_BEGIN;
     }
 
     if (rc < 0) {
     #ifdef WOLFMQTT_DEBUG_CLIENT
         PRINTF("MqttClient_WaitType: Failure: %s (%d)",
             MqttClient_ReturnCodeToString(rc), rc);
     #endif
         return rc;
     }
 
     if (!waitMatchFound) {
         /* if we get here, then the we are still waiting for a packet */
         goto wait_again;
     }
 
     return rc;
 }
 
 
 /* Public Functions */
@@ -1624,103 +1628,101 @@ int MqttClient_Publish_ex(MqttClient *client, MqttPublish *publish,
 int MqttClient_Subscribe(MqttClient *client, MqttSubscribe *subscribe)
 {
     int rc, len, i;
     MqttTopic* topic;
 
     /* Validate required arguments */
     if (client == NULL || subscribe == NULL) {
         return MQTT_CODE_ERROR_BAD_ARG;
     }
 
 #ifdef WOLFMQTT_V5
     /* Use specified protocol version if set */
     subscribe->protocol_level = client->protocol_level;
 #endif
 
     if (subscribe->stat == MQTT_MSG_BEGIN) {
     #ifdef WOLFMQTT_MULTITHREAD
         /* Lock send socket mutex */
         rc = wm_SemLock(&client->lockSend);
         if (rc != 0) {
             return rc;
         }
     #endif
 
         /* Encode the subscribe packet */
         rc = MqttEncode_Subscribe(client->tx_buf, client->tx_buf_len,
                 subscribe);
     #ifdef WOLFMQTT_DEBUG_CLIENT
         PRINTF("MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d",
             rc, MqttPacket_TypeDesc(MQTT_PACKET_TYPE_SUBSCRIBE),
             MQTT_PACKET_TYPE_SUBSCRIBE, subscribe->packet_id);
     #endif
         if (rc <= 0) {
         #ifdef WOLFMQTT_MULTITHREAD
             wm_SemUnlock(&client->lockSend);
         #endif
             return rc;
         }
         len = rc;
 
     #ifdef WOLFMQTT_MULTITHREAD
         rc = wm_SemLock(&client->lockClient);
         if (rc == 0) {
             /* inform other threads of expected response */
             rc = MqttClient_RespList_Add(client, MQTT_PACKET_TYPE_SUBSCRIBE_ACK,
                 subscribe->packet_id, &subscribe->pendResp, &subscribe->ack);
             wm_SemUnlock(&client->lockClient);
         }
         if (rc != 0) {
             wm_SemUnlock(&client->lockSend);
             return rc; /* Error locking client */
         }
     #endif
 
         /* Send subscribe packet */
         rc = MqttPacket_Write(client, client->tx_buf, len);
     #ifdef WOLFMQTT_MULTITHREAD
         wm_SemUnlock(&client->lockSend);
     #endif
         if (rc != len) {
         #ifdef WOLFMQTT_MULTITHREAD
             if (wm_SemLock(&client->lockClient) == 0) {
                 MqttClient_RespList_Remove(client, &subscribe->pendResp);
                 wm_SemUnlock(&client->lockClient);
             }
         #endif
             return rc;
         }
 
         subscribe->stat = MQTT_MSG_WAIT;
     }
 
     /* Wait for subscribe ack packet */
     rc = MqttClient_WaitType(client, &subscribe->ack,
         MQTT_PACKET_TYPE_SUBSCRIBE_ACK, subscribe->packet_id,
         client->cmd_timeout_ms);
 #ifdef WOLFMQTT_NONBLOCK
     if (rc == MQTT_CODE_CONTINUE)
         return rc;
 #endif
 
 #ifdef WOLFMQTT_MULTITHREAD
     if (wm_SemLock(&client->lockClient) == 0) {
         MqttClient_RespList_Remove(client, &subscribe->pendResp);
         wm_SemUnlock(&client->lockClient);
     }
 #endif
 
     /* Populate return codes */
     if (rc == MQTT_CODE_SUCCESS) {
-        for (i = 0; i < subscribe->topic_count; i++) {
+        for (i = 0; i < subscribe->topic_count && i < MAX_MQTT_TOPICS; i++) {
             topic = &subscribe->topics[i];
-            if (subscribe->ack.return_codes) {
-                topic->return_code = subscribe->ack.return_codes[i];
-            }
+            topic->return_code = subscribe->ack.return_codes[i];
         }
     }
 
     /* reset state */
     subscribe->stat = MQTT_MSG_BEGIN;
 
     return rc;
 }
diff --git a/src/mqtt_packet.c b/src/mqtt_packet.c
index 2bdc150..8206ca7 100755
--- a/src/mqtt_packet.c
+++ b/src/mqtt_packet.c
@@ -1226,59 +1226,62 @@ int MqttEncode_Subscribe(byte *tx_buf, int tx_buf_len,
 int MqttDecode_SubscribeAck(byte* rx_buf, int rx_buf_len,
     MqttSubscribeAck *subscribe_ack)
 {
     int header_len, remain_len;
     byte *rx_payload;
 
     /* Validate required arguments */
     if (rx_buf == NULL || rx_buf_len <= 0 || subscribe_ack == NULL) {
         return MQTT_CODE_ERROR_BAD_ARG;
     }
 
     /* Decode fixed header */
     header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
         MQTT_PACKET_TYPE_SUBSCRIBE_ACK, NULL, NULL, NULL);
     if (header_len < 0) {
         return header_len;
     }
     rx_payload = &rx_buf[header_len];
 
     /* Decode variable header */
     if (subscribe_ack) {
         rx_payload += MqttDecode_Num(rx_payload, &subscribe_ack->packet_id);
 
 #ifdef WOLFMQTT_V5
         if ((subscribe_ack->protocol_level >= MQTT_CONNECT_PROTOCOL_LEVEL_5) &&
             (remain_len > MQTT_DATA_LEN_SIZE)) {
             word32 props_len = 0;
             int tmp;
 
             /* Decode Length of Properties */
             tmp = MqttDecode_Vbi(rx_payload, &props_len,
                     (word32)(rx_buf_len - (rx_payload - rx_buf)));
             if (tmp < 0)
                 return tmp;
 
             if (props_len <= (word32)(rx_buf_len - (rx_payload - rx_buf))) {
                 rx_payload += tmp;
                 if (props_len > 0) {
                     /* Decode the Properties */
                     tmp = MqttDecode_Props(MQTT_PACKET_TYPE_SUBSCRIBE_ACK,
                                 &subscribe_ack->props, rx_payload,
                                 (word32)(rx_buf_len - (rx_payload - rx_buf)),
                                 props_len);
                     if (tmp < 0)
                         return tmp;
                     rx_payload += tmp;
                 }
             }
             else
                 return MQTT_CODE_ERROR_OUT_OF_BUFFER;
         }
 #endif
 
-        subscribe_ack->return_codes = rx_payload; /* List of return codes */
+        /* payload is list of return codes (MqttSubscribeAckReturnCodes) */
+        if (remain_len > MAX_MQTT_TOPICS)
+            remain_len = MAX_MQTT_TOPICS;
+        XMEMCMP(subscribe_ack->return_codes, rx_payload, remain_len);
     }
 
     /* Return total length of packet */
     return header_len + remain_len;
 }
diff --git a/wolfmqtt/mqtt_packet.h b/wolfmqtt/mqtt_packet.h
index f1e5bd0..8bb1b69 100644
--- a/wolfmqtt/mqtt_packet.h
+++ b/wolfmqtt/mqtt_packet.h
@@ -1,50 +1,55 @@
 /* mqtt_packet.h
  *
  * Copyright (C) 2006-2021 wolfSSL Inc.
  *
  * This file is part of wolfMQTT.
  *
  * wolfMQTT is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
  *
  * wolfMQTT is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  */
 
 /* Implementation by: David Garske
  * Based on specification for MQTT v3.1.1 and v5.0
  * See http://mqtt.org/documentation for additional MQTT documentation.
  */
 
 #ifndef WOLFMQTT_PACKET_H
 #define WOLFMQTT_PACKET_H
 
 #ifdef __cplusplus
     extern "C" {
 #endif
 
 #include "wolfmqtt/mqtt_types.h"
 #include "wolfmqtt/mqtt_socket.h"
 
 
 /* Size of a data length elements in protocol */
 #define MQTT_DATA_LEN_SIZE   2
 #define MQTT_DATA_INT_SIZE   4
 
 #ifndef MAX_PACKET_ID
-#define MAX_PACKET_ID           ((1 << 16) - 1)
+#define MAX_PACKET_ID        ((1 << 16) - 1)
+#endif
+
+/* maximum list of topics to subscribe at once */
+#ifndef MAX_MQTT_TOPICS
+#define MAX_MQTT_TOPICS      12
 #endif
 
 #ifdef WOLFMQTT_V5
 
 #define MQTT_PACKET_SZ_MAX  0xA0000005
 
 /* DATA TYPES */
@@ -503,18 +508,18 @@ enum MqttSubscribeAckReturnCodes {
     MQTT_SUBSCRIBE_ACK_CODE_SUCCESS_MAX_QOS0 = 0,
     MQTT_SUBSCRIBE_ACK_CODE_SUCCESS_MAX_QOS1 = 1,
     MQTT_SUBSCRIBE_ACK_CODE_SUCCESS_MAX_QOS2 = 2,
     MQTT_SUBSCRIBE_ACK_CODE_FAILURE = 0x80,
 };
 typedef struct _MqttSubscribeAck {
     MqttMsgStat stat; /* must be first member at top */
 
     word16      packet_id;
-    byte       *return_codes; /* MqttSubscribeAckReturnCodes */
+    byte        return_codes[MAX_MQTT_TOPICS];
 #ifdef WOLFMQTT_V5
     MqttProp* props;
     byte protocol_level;
 #endif
 } MqttSubscribeAck;
 
 /* SUBSCRIBE */
 /* Packet Id followed by contiguous list of topics w/Qos to subscribe to. */
