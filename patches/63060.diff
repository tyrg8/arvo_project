commit 7672814a9c93550e00e0461e61d52a9950fdd387
Author: Luca Deri <deri@ntop.org>
Date:   Sat Oct 7 10:38:07 2023 +0200

    Added boundary check to prevent heap overflow

diff --git a/src/Flow.cpp b/src/Flow.cpp
index 82e9b5d76..629662043 100644
--- a/src/Flow.cpp
+++ b/src/Flow.cpp
@@ -6051,210 +6051,213 @@ void Flow::dissectHTTP(bool src2dst_direction, char *payload,
 void Flow::dissectMDNS(u_int8_t *payload, u_int16_t payload_len) {
   u_int16_t answers, i = 0;
 
   PACK_ON
   struct mdns_rsp_entry {
     u_int16_t rsp_type, rsp_class;
     u_int32_t ttl;
     u_int16_t data_len;
   } PACK_OFF;
 
   if (((payload[2] & 0x80) != 0x80) || (payload_len < 12))
     return; /* This is a not MDNS response */
 
   answers = ntohs(*((u_int16_t *)&payload[6])) +
             ntohs(*((u_int16_t *)&payload[8])) +
             ntohs(*((u_int16_t *)&payload[10]));
 
   payload = &payload[12], payload_len -= 12;
 
   while ((answers > 0) && (i < payload_len)) {
     char _name[256], *name;
     struct mdns_rsp_entry rsp;
     u_int j;
     u_int16_t rsp_type, data_len;
     DeviceType dtype = device_unknown;
     bool first_char = true;
 
     memset(_name, 0, sizeof(_name));
 
     for (j = 0; (i < payload_len) && (j < (sizeof(_name) - 1)); i++) {
       if (payload[i] == 0x0) {
         i++;
         break;
       } else if (payload[i] < 32) {
         if (j > 0) _name[j++] = '.';
       } else if (payload[i] == 0x22) {
         _name[j++] = 'a';
         _name[j++] = 'r';
         _name[j++] = 'p';
         _name[j++] = 'a';
         i++;
         break;
       } else if (payload[i] == 0xC0) {
         u_int8_t offset;
         u_int16_t i_save = i;
         u_int8_t num_loops = 0;
         const u_int8_t max_nested_loops = 8;
 
       nested_dns_definition:
         offset = payload[i + 1] - 12;
         i = offset;
 
         if ((offset > i) || (i > payload_len) ||
             (num_loops > max_nested_loops)) {
 #ifdef DEBUG_DISCOVERY
           ntop->getTrace()->traceEvent(TRACE_WARNING, "Invalid MDNS packet");
 #endif
           return; /* Invalid packet */
         } else {
           /* Pointer back */
           while ((i < payload_len) && (payload[i] != 0) &&
                  (j < (sizeof(_name) - 1))) {
             if (payload[i] == 0)
               break;
             else if (payload[i] == 0xC0) {
               num_loops++;
               goto nested_dns_definition;
             } else if (payload[i] < 32) {
               if (j > 0) _name[j++] = '.';
               i++;
             } else
               _name[j++] = payload[i++];
           }
 
           if (i_save > 0) {
             i = i_save;
             i_save = 0;
           }
 
           i += 2;
           /*  ntop->getTrace()->traceEvent(TRACE_NORMAL, "===>>> [%d] %s", i,
            * &payload[i-12]); */
           break;
         }
       } else if (!first_char)
         _name[j++] = payload[i];
 
       first_char = false;
     }
 
+    if((i+sizeof(rsp)) >= payload_len)
+      return; /* packet too short */
+    
     memcpy(&rsp, &payload[i], sizeof(rsp));
     data_len = ntohs(rsp.data_len), rsp_type = ntohs(rsp.rsp_type);
 
 #if 1
     name = _name;
 #else
     /* Skip lenght for strings >= 32 with head length */
     name = &_name[((data_len <= 32) || (_name[0] >= '0')) ? 0 : 1];
 #endif
 
 #ifdef DEBUG_DISCOVERY
     ntop->getTrace()->traceEvent(TRACE_NORMAL, "===>>> [%u][%s][len=%u]",
                                  ntohs(rsp.rsp_type) & 0xFFFF, name, data_len);
 #endif
 
     if (strstr(name, "._device-info._"))
       ;
     else if (strstr(name, "._airplay._") || strstr(name, "._spotify-connect._"))
       dtype = device_multimedia;
     else if (strstr(name, "_ssh._"))
       dtype = device_workstation;
     else if (strstr(name, "._daap._") || strstr(name, "_afpovertcp._") ||
              strstr(name, "_adisk._") || strstr(name, "_smb._"))
       dtype = device_nas;
     else if (strstr(name, "_hap._"))
       dtype = device_iot;
     else if (strstr(name, "_pdl-datastream._"))
       dtype = device_printer;
 
     if ((dtype != device_unknown) && cli_host && cli_host->getMac()) {
       Mac *m = cli_host->getMac();
 
       if (m->getDeviceType() == device_unknown) m->setDeviceType(dtype);
     }
 
     switch (rsp_type) {
       case 0x1C: /* AAAA */
       case 0x01: /* AA */
       case 0x10: /* TXT */
       {
         int len = strlen(name);
         char *c;
 
         if ((len > 6) && (strcmp(&name[len - 6], ".local") == 0))
           name[len - 6] = 0;
 
         c = strstr(name, "._");
         if (c && (c != name) /* Does not begin with... */) c[0] = '\0';
       }
 
         if (!protos.mdns.name) protos.mdns.name = strdup(name);
 
         if ((rsp_type == 0x10 /* TXT */) && (data_len > 0)) {
 	  u_int16_t base_off = i + sizeof(rsp);
           char *txt = (char *)&payload[base_off], txt_buf[256];
           u_int16_t off = 0;
 
           while((off < data_len) && ((off+base_off) < payload_len)) {
             u_int8_t txt_len = (u_int8_t)txt[off];
 
             if(txt_len < data_len) {
               txt_len = min_val(data_len - off, txt_len);
 
               off++;
 
               if (txt_len > 0) {
                 char *model = NULL;
 
                 strncpy(txt_buf, &txt[off], txt_len);
                 txt_buf[txt_len] = '\0';
                 off += txt_len;
 
 #ifdef DEBUG_DISCOVERY
                 ntop->getTrace()->traceEvent(TRACE_NORMAL, "===>>> [TXT][%s]",
                                              txt_buf);
 #endif
 
                 if (strncmp(txt_buf, "am=", 3 /* Apple Model */) == 0)
                   model = &txt_buf[3];
                 else if (strncmp(txt_buf, "model=", 6) == 0)
                   model = &txt_buf[6];
                 else if (strncmp(txt_buf, "md=", 3) == 0)
                   model = &txt_buf[3];
 
                 if (model && cli_host) {
                   Mac *mac = cli_host->getMac();
 
                   if (mac) {
                     mac->inlineSetModel(model);
                   }
                 }
 
                 if (strncmp(txt_buf, "nm=", 3) == 0)
                   if (!protos.mdns.name_txt)
                     protos.mdns.name_txt = strdup(&txt_buf[3]);
 
                 if (strncmp(txt_buf, "ssid=", 5) == 0) {
                   if (!protos.mdns.ssid) protos.mdns.ssid = strdup(&txt_buf[5]);
 
                   if (cli_host && cli_host->getMac())
                     cli_host->getMac()->inlineSetSSID(&txt_buf[5]);
                 }
               }
             } else
               break;
           }
         }
 
 #ifdef DEBUG_DISCOVERY
         ntop->getTrace()->traceEvent(TRACE_NORMAL, "%u) %u [%s]", answers,
                                      rsp_type, name);
 #endif
         // return; /* It's enough to decode the first name */
     }
 
     i += sizeof(rsp) + data_len, answers--;
   }
 }
 
 /* *************************************** */
