commit 9e5ad8f6126759b7cb1401ced107ea5279fec582
Author: Cristy <mikayla-grace@urban-warrior.org>
Date:   Wed Jun 17 18:55:56 2020 -0400

    https://github.com/ImageMagick/ImageMagick/issues/2153

diff --git a/MagickCore/annotate.c b/MagickCore/annotate.c
index 8b0fa19cd..3c649ae34 100644
--- a/MagickCore/annotate.c
+++ b/MagickCore/annotate.c
@@ -867,203 +867,205 @@ MagickExport MagickBooleanType GetTypeMetrics(Image *image,
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
   assert(draw_info != (DrawInfo *) NULL);
   assert(draw_info->text != (char *) NULL);
   assert(draw_info->signature == MagickCoreSignature);
   annotate_info=CloneDrawInfo((ImageInfo *) NULL,draw_info);
   annotate_info->render=MagickFalse;
   annotate_info->direction=UndefinedDirection;
   (void) memset(metrics,0,sizeof(*metrics));
   offset.x=0.0;
   offset.y=0.0;
   status=RenderType(image,annotate_info,&offset,metrics,exception);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(AnnotateEvent,GetMagickModule(),"Metrics: text: %s; "
       "width: %g; height: %g; ascent: %g; descent: %g; max advance: %g; "
       "bounds: %g,%g  %g,%g; origin: %g,%g; pixels per em: %g,%g; "
       "underline position: %g; underline thickness: %g",annotate_info->text,
       metrics->width,metrics->height,metrics->ascent,metrics->descent,
       metrics->max_advance,metrics->bounds.x1,metrics->bounds.y1,
       metrics->bounds.x2,metrics->bounds.y2,metrics->origin.x,metrics->origin.y,
       metrics->pixels_per_em.x,metrics->pixels_per_em.y,
       metrics->underline_position,metrics->underline_thickness);
   annotate_info=DestroyDrawInfo(annotate_info);
   return(status);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +   R e n d e r T y p e                                                       %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  RenderType() renders text on the image.  It also returns the bounding box of
 %  the text relative to the image.
 %
 %  The format of the RenderType method is:
 %
 %      MagickBooleanType RenderType(Image *image,DrawInfo *draw_info,
 %        const PointInfo *offset,TypeMetric *metrics,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image: the image.
 %
 %    o draw_info: the draw info.
 %
 %    o offset: (x,y) location of text relative to image.
 %
 %    o metrics: bounding box of text.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 static MagickBooleanType RenderType(Image *image,const DrawInfo *draw_info,
   const PointInfo *offset,TypeMetric *metrics,ExceptionInfo *exception)
 {
   const TypeInfo
     *type_info;
 
   DrawInfo
     *annotate_info;
 
   MagickBooleanType
     status;
 
   type_info=(const TypeInfo *) NULL;
   if (draw_info->font != (char *) NULL)
     {
       if (*draw_info->font == '@')
         {
           status=RenderFreetype(image,draw_info,draw_info->encoding,offset,
             metrics,exception);
           return(status);
         }
       if (*draw_info->font == '-')
         return(RenderX11(image,draw_info,offset,metrics,exception));
       if (*draw_info->font == '^')
         return(RenderPostscript(image,draw_info,offset,metrics,exception));
       if (IsPathAccessible(draw_info->font) != MagickFalse)
         {
           status=RenderFreetype(image,draw_info,draw_info->encoding,offset,
             metrics,exception);
           return(status);
         }
       type_info=GetTypeInfo(draw_info->font,exception);
       if (type_info == (const TypeInfo *) NULL)
         (void) ThrowMagickException(exception,GetMagickModule(),TypeWarning,
           "UnableToReadFont","`%s'",draw_info->font);
     }
   if ((type_info == (const TypeInfo *) NULL) &&
       (draw_info->family != (const char *) NULL))
     {
-      type_info=GetTypeInfoByFamily(draw_info->family,draw_info->style,
-        draw_info->stretch,draw_info->weight,exception);
+      if (strchr(draw_info->family,',') == (char *) NULL)
+        type_info=GetTypeInfoByFamily(draw_info->family,draw_info->style,
+          draw_info->stretch,draw_info->weight,exception);
       if (type_info == (const TypeInfo *) NULL)
         {
           char
             **family;
 
           int
             number_families;
 
           register ssize_t
             i;
 
           /*
             Parse font family list.
           */
           family=StringToArgv(draw_info->family,&number_families);
           for (i=1; i < (ssize_t) number_families; i++)
           {
             type_info=GetTypeInfoByFamily(family[i],draw_info->style,
               draw_info->stretch,draw_info->weight,exception);
-            if (type_info != (const TypeInfo *) NULL)
+            if ((type_info != (const TypeInfo *) NULL) &&
+                (LocaleCompare(family[i],type_info->family) == 0))
               break;
           }
           for (i=0; i < (ssize_t) number_families; i++)
             family[i]=DestroyString(family[i]);
           family=(char **) RelinquishMagickMemory(family);
           if (type_info == (const TypeInfo *) NULL)
             (void) ThrowMagickException(exception,GetMagickModule(),TypeWarning,
               "UnableToReadFont","`%s'",draw_info->family);
         }
     }
   if (type_info == (const TypeInfo *) NULL)
     type_info=GetTypeInfoByFamily("Arial",draw_info->style,
       draw_info->stretch,draw_info->weight,exception);
   if (type_info == (const TypeInfo *) NULL)
     type_info=GetTypeInfoByFamily("Helvetica",draw_info->style,
       draw_info->stretch,draw_info->weight,exception);
   if (type_info == (const TypeInfo *) NULL)
     type_info=GetTypeInfoByFamily("Century Schoolbook",draw_info->style,
       draw_info->stretch,draw_info->weight,exception);
   if (type_info == (const TypeInfo *) NULL)
     type_info=GetTypeInfoByFamily("Sans",draw_info->style,
       draw_info->stretch,draw_info->weight,exception);
   if (type_info == (const TypeInfo *) NULL)
     type_info=GetTypeInfoByFamily((const char *) NULL,draw_info->style,
       draw_info->stretch,draw_info->weight,exception);
   if (type_info == (const TypeInfo *) NULL)
     type_info=GetTypeInfo("*",exception);
   if (type_info == (const TypeInfo *) NULL)
     {
       status=RenderFreetype(image,draw_info,draw_info->encoding,offset,metrics,
         exception);
       return(status);
     }
   annotate_info=CloneDrawInfo((ImageInfo *) NULL,draw_info);
   annotate_info->face=type_info->face;
   if (type_info->metrics != (char *) NULL)
     (void) CloneString(&annotate_info->metrics,type_info->metrics);
   if (type_info->glyphs != (char *) NULL)
     (void) CloneString(&annotate_info->font,type_info->glyphs);
   status=RenderFreetype(image,annotate_info,type_info->encoding,offset,metrics,
     exception);
   annotate_info=DestroyDrawInfo(annotate_info);
   return(status);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +   R e n d e r F r e e t y p e                                               %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  RenderFreetype() renders text on the image with a Truetype font.  It also
 %  returns the bounding box of the text relative to the image.
 %
 %  The format of the RenderFreetype method is:
 %
 %      MagickBooleanType RenderFreetype(Image *image,DrawInfo *draw_info,
 %        const char *encoding,const PointInfo *offset,TypeMetric *metrics,
 %        ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image: the image.
 %
 %    o draw_info: the draw info.
 %
 %    o encoding: the font encoding.
 %
 %    o offset: (x,y) location of text relative to image.
 %
 %    o metrics: bounding box of text.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 
 #if defined(MAGICKCORE_FREETYPE_DELEGATE)
diff --git a/MagickCore/type.c b/MagickCore/type.c
index 52c24700e..50f830b3c 100644
--- a/MagickCore/type.c
+++ b/MagickCore/type.c
@@ -231,95 +231,94 @@ static SplayTreeInfo *AcquireTypeCache(const char *filename,
         /*
           Search MAGICK_FONT_PATH.
         */
         (void) FormatLocaleString(path,MagickPathExtent,"%s%s%s",font_path,
           DirectorySeparator,filename);
         xml=FileToString(path,~0UL,exception);
         if (xml != (void *) NULL)
           {
             status&=LoadTypeCache(cache,xml,path,0,exception);
             xml=DestroyString(xml);
           }
         font_path=DestroyString(font_path);
       }
   }
 #endif
   if (GetNumberOfNodesInSplayTree(cache) == 0)
     status&=LoadTypeCache(cache,TypeMap,"built-in",0,exception);
   return(cache);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +   G e t T y p e I n f o                                                     %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  GetTypeInfo searches the type list for the specified name and if found
 %  returns attributes for that type.
 %
 %  The format of the GetTypeInfo method is:
 %
 %      const TypeInfo *GetTypeInfo(const char *name,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o name: the type name.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 MagickExport const TypeInfo *GetTypeInfo(const char *name,
   ExceptionInfo *exception)
 {
   assert(exception != (ExceptionInfo *) NULL);
   if (IsTypeTreeInstantiated(exception) == MagickFalse)
     return((const TypeInfo *) NULL);
   if ((name == (const char *) NULL) || (LocaleCompare(name,"*") == 0))
     return((const TypeInfo *) GetRootValueFromSplayTree(type_cache));
   return((const TypeInfo *) GetValueFromSplayTree(type_cache,name));
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +   G e t T y p e I n f o B y F a m i l y                                     %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  GetTypeInfoByFamily() searches the type list for the specified family and if
 %  found returns attributes for that type.
 %
 %  Type substitution and scoring algorithm contributed by Bob Friesenhahn.
 %
 %  The format of the GetTypeInfoByFamily method is:
 %
 %      const TypeInfo *GetTypeInfoByFamily(const char *family,
 %        const StyleType style,const StretchType stretch,
 %        const size_t weight,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o family: the type family.
 %
 %    o style: the type style.
 %
 %    o stretch: the type stretch.
 %
 %    o weight: the type weight.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
-
 MagickExport const TypeInfo *GetTypeInfoByFamily(const char *family,
   const StyleType style,const StretchType stretch,const size_t weight,
   ExceptionInfo *exception)
