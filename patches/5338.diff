commit 3d3c434aaf107c60a4669a05a38d5cc3b41d96ac
Author: Dirk Lemstra <dirk@git.imagemagick.org>
Date:   Sun Feb 4 17:08:38 2018 +0100

    Clamp pixels to fix colors in the non-hdri builds.

diff --git a/MagickCore/profile.c b/MagickCore/profile.c
index 6c33167b3..15211745d 100644
--- a/MagickCore/profile.c
+++ b/MagickCore/profile.c
@@ -751,460 +751,465 @@ static MagickBooleanType SetsRGBImageProfile(Image *image,
 MagickExport MagickBooleanType ProfileImage(Image *image,const char *name,
   const void *datum,const size_t length,ExceptionInfo *exception)
 {
 #define ProfileImageTag  "Profile/Image"
 #define ThrowProfileException(severity,tag,context) \
 { \
   if (source_profile != (cmsHPROFILE) NULL) \
     (void) cmsCloseProfile(source_profile); \
   if (target_profile != (cmsHPROFILE) NULL) \
     (void) cmsCloseProfile(target_profile); \
   ThrowBinaryException(severity,tag,context); \
 }
 
   MagickBooleanType
     status;
 
   StringInfo
     *profile;
 
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
   assert(name != (const char *) NULL);
   if ((datum == (const void *) NULL) || (length == 0))
     {
       char
         *next;
 
       /*
         Delete image profile(s).
       */
       ResetImageProfileIterator(image);
       for (next=GetNextImageProfile(image); next != (const char *) NULL; )
       {
         if (IsOptionMember(next,name) != MagickFalse)
           {
             (void) DeleteImageProfile(image,next);
             ResetImageProfileIterator(image);
           }
         next=GetNextImageProfile(image);
       }
       return(MagickTrue);
     }
   /*
     Add a ICC, IPTC, or generic profile to the image.
   */
   status=MagickTrue;
   profile=AcquireStringInfo((size_t) length);
   SetStringInfoDatum(profile,(unsigned char *) datum);
   if ((LocaleCompare(name,"icc") != 0) && (LocaleCompare(name,"icm") != 0))
     status=SetImageProfile(image,name,profile,exception);
   else
     {
       const StringInfo
         *icc_profile;
 
       icc_profile=GetImageProfile(image,"icc");
       if ((icc_profile != (const StringInfo *) NULL) &&
           (CompareStringInfo(icc_profile,profile) == 0))
         {
           const char
             *value;
 
           value=GetImageProperty(image,"exif:ColorSpace",exception);
           (void) value;
           if (LocaleCompare(value,"1") != 0)
             (void) SetsRGBImageProfile(image,exception);
           value=GetImageProperty(image,"exif:InteroperabilityIndex",exception);
           if (LocaleCompare(value,"R98.") != 0)
             (void) SetsRGBImageProfile(image,exception);
           /* Future.
           value=GetImageProperty(image,"exif:InteroperabilityIndex",exception);
           if (LocaleCompare(value,"R03.") != 0)
             (void) SetAdobeRGB1998ImageProfile(image,exception);
           */
           icc_profile=GetImageProfile(image,"icc");
         }
       if ((icc_profile != (const StringInfo *) NULL) &&
           (CompareStringInfo(icc_profile,profile) == 0))
         {
           profile=DestroyStringInfo(profile);
           return(MagickTrue);
         }
 #if !defined(MAGICKCORE_LCMS_DELEGATE)
       (void) ThrowMagickException(exception,GetMagickModule(),
         MissingDelegateWarning,"DelegateLibrarySupportNotBuiltIn",
         "'%s' (LCMS)",image->filename);
 #else
       {
         cmsHPROFILE
           source_profile;
 
         CMSExceptionInfo
           cms_exception;
 
         /*
           Transform pixel colors as defined by the color profiles.
         */
         cmsSetLogErrorHandler(CMSExceptionHandler);
         cms_exception.image=image;
         cms_exception.exception=exception;
         (void) cms_exception;
         source_profile=cmsOpenProfileFromMemTHR((cmsContext) &cms_exception,
           GetStringInfoDatum(profile),(cmsUInt32Number)
           GetStringInfoLength(profile));
         if (source_profile == (cmsHPROFILE) NULL)
           ThrowBinaryException(ResourceLimitError,
             "ColorspaceColorProfileMismatch",name);
         if ((cmsGetDeviceClass(source_profile) != cmsSigLinkClass) &&
             (icc_profile == (StringInfo *) NULL))
           status=SetImageProfile(image,name,profile,exception);
         else
           {
             CacheView
               *image_view;
 
             ColorspaceType
               source_colorspace,
               target_colorspace;
 
             cmsColorSpaceSignature
               signature;
 
             cmsHPROFILE
               target_profile;
 
             cmsHTRANSFORM
               *magick_restrict transform;
 
             cmsUInt32Number
               flags,
               source_type,
               target_type;
 
             double
               **magick_restrict source_pixels,
               source_scale,
               **magick_restrict target_pixels,
               target_scale;
 
             int
               intent;
 
             MagickOffsetType
               progress;
 
             size_t
               source_channels,
               target_channels;
 
             ssize_t
               y;
 
             target_profile=(cmsHPROFILE) NULL;
             if (icc_profile != (StringInfo *) NULL)
               {
                 target_profile=source_profile;
                 source_profile=cmsOpenProfileFromMemTHR((cmsContext)
                   &cms_exception,GetStringInfoDatum(icc_profile),
                   (cmsUInt32Number) GetStringInfoLength(icc_profile));
                 if (source_profile == (cmsHPROFILE) NULL)
                   ThrowProfileException(ResourceLimitError,
                     "ColorspaceColorProfileMismatch",name);
               }
             source_scale=1.0;
             source_channels=3;
             switch (cmsGetColorSpace(source_profile))
             {
               case cmsSigCmykData:
               {
                 source_colorspace=CMYKColorspace;
                 source_type=(cmsUInt32Number) TYPE_CMYK_DBL;
                 source_channels=4;
                 source_scale=100.0;
                 break;
               }
               case cmsSigGrayData:
               {
                 source_colorspace=GRAYColorspace;
                 source_type=(cmsUInt32Number) TYPE_GRAY_DBL;
                 source_channels=1;
                 break;
               }
               case cmsSigLabData:
               {
                 source_colorspace=LabColorspace;
                 source_type=(cmsUInt32Number) TYPE_Lab_DBL;
                 source_scale=100.0;
                 break;
                 break;
               }
               case cmsSigRgbData:
               {
                 source_colorspace=sRGBColorspace;
                 source_type=(cmsUInt32Number) TYPE_RGB_DBL;
                 break;
               }
               case cmsSigXYZData:
               {
                 source_colorspace=XYZColorspace;
                 source_type=(cmsUInt32Number) TYPE_XYZ_DBL;
                 break;
               }
               default:
               {
                 source_colorspace=UndefinedColorspace;
                 source_type=(cmsUInt32Number) TYPE_RGB_DBL;
                 break;
               }
             }
             signature=cmsGetPCS(source_profile);
             if (target_profile != (cmsHPROFILE) NULL)
               signature=cmsGetColorSpace(target_profile);
             target_scale=1.0;
             target_channels=3;
             switch (signature)
             {
               case cmsSigCmykData:
               {
                 target_colorspace=CMYKColorspace;
                 target_type=(cmsUInt32Number) TYPE_CMYK_DBL;
                 target_channels=4;
                 target_scale=0.01;
                 break;
               }
               case cmsSigLabData:
               {
                 target_colorspace=LabColorspace;
                 target_type=(cmsUInt32Number) TYPE_Lab_DBL;
                 target_scale=0.01;
                 break;
               }
               case cmsSigGrayData:
               {
                 target_colorspace=GRAYColorspace;
                 target_type=(cmsUInt32Number) TYPE_GRAY_DBL;
                 target_channels=1;
                 break;
               }
               case cmsSigRgbData:
               {
                 target_colorspace=sRGBColorspace;
                 target_type=(cmsUInt32Number) TYPE_RGB_DBL;
                 break;
               }
               case cmsSigXYZData:
               {
                 target_colorspace=XYZColorspace;
                 target_type=(cmsUInt32Number) TYPE_XYZ_DBL;
                 break;
               }
               default:
               {
                 target_colorspace=UndefinedColorspace;
                 target_type=(cmsUInt32Number) TYPE_RGB_DBL;
                 break;
               }
             }
             if ((source_colorspace == UndefinedColorspace) ||
                 (target_colorspace == UndefinedColorspace))
               ThrowProfileException(ImageError,"ColorspaceColorProfileMismatch",
                 name);
             switch (image->rendering_intent)
             {
               case AbsoluteIntent: intent=INTENT_ABSOLUTE_COLORIMETRIC; break;
               case PerceptualIntent: intent=INTENT_PERCEPTUAL; break;
               case RelativeIntent: intent=INTENT_RELATIVE_COLORIMETRIC; break;
               case SaturationIntent: intent=INTENT_SATURATION; break;
               default: intent=INTENT_PERCEPTUAL; break;
             }
             flags=cmsFLAGS_HIGHRESPRECALC;
 #if defined(cmsFLAGS_BLACKPOINTCOMPENSATION)
             if (image->black_point_compensation != MagickFalse)
               flags|=cmsFLAGS_BLACKPOINTCOMPENSATION;
 #endif
             transform=AcquireTransformThreadSet(image,source_profile,
               source_type,target_profile,target_type,intent,flags);
             if (transform == (cmsHTRANSFORM *) NULL)
               ThrowProfileException(ImageError,"UnableToCreateColorTransform",
                 name);
             /*
               Transform image as dictated by the source & target image profiles.
             */
             source_pixels=AcquirePixelThreadSet(image->columns,source_channels);
             target_pixels=AcquirePixelThreadSet(image->columns,target_channels);
             if ((source_pixels == (double **) NULL) ||
                 (target_pixels == (double **) NULL))
               {
                 transform=DestroyTransformThreadSet(transform);
                 ThrowProfileException(ResourceLimitError,
                   "MemoryAllocationFailed",image->filename);
               }
             if (SetImageStorageClass(image,DirectClass,exception) == MagickFalse)
               {
                 target_pixels=DestroyPixelThreadSet(target_pixels);
                 source_pixels=DestroyPixelThreadSet(source_pixels);
                 transform=DestroyTransformThreadSet(transform);
                 if (source_profile != (cmsHPROFILE) NULL)
                   (void) cmsCloseProfile(source_profile);
                 if (target_profile != (cmsHPROFILE) NULL)
                   (void) cmsCloseProfile(target_profile);
                 return(MagickFalse);
               }
             if (target_colorspace == CMYKColorspace)
               (void) SetImageColorspace(image,target_colorspace,exception);
             progress=0;
             image_view=AcquireAuthenticCacheView(image,exception);
 #if defined(MAGICKCORE_OPENMP_SUPPORT)
             #pragma omp parallel for schedule(static,4) shared(status) \
               magick_number_threads(image,image,image->rows,1)
 #endif
             for (y=0; y < (ssize_t) image->rows; y++)
             {
               const int
                 id = GetOpenMPThreadId();
 
               MagickBooleanType
                 sync;
 
               register double
                 *p;
 
               register Quantum
                 *magick_restrict q;
 
               register ssize_t
                 x;
 
               if (status == MagickFalse)
                 continue;
               q=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,
                 exception);
               if (q == (Quantum *) NULL)
                 {
                   status=MagickFalse;
                   continue;
                 }
               p=source_pixels[id];
               for (x=0; x < (ssize_t) image->columns; x++)
               {
                 *p++=source_scale*QuantumScale*GetPixelRed(image,q);
                 if (source_channels > 1)
                   {
                     *p++=source_scale*QuantumScale*GetPixelGreen(image,q);
                     *p++=source_scale*QuantumScale*GetPixelBlue(image,q);
                   }
                 if (source_channels > 3)
                   *p++=source_scale*QuantumScale*GetPixelBlack(image,q);
                 q+=GetPixelChannels(image);
               }
               cmsDoTransform(transform[id],source_pixels[id],target_pixels[id],
                 (unsigned int) image->columns);
               p=target_pixels[id];
               q-=GetPixelChannels(image)*image->columns;
               for (x=0; x < (ssize_t) image->columns; x++)
               {
                 if (target_channels == 1)
-                  SetPixelGray(image,target_scale*QuantumRange*(*p),q);
+                  SetPixelGray(image,ClampToQuantum(target_scale*
+                    QuantumRange*(*p)),q);
                 else
-                  SetPixelRed(image,target_scale*QuantumRange*(*p),q);
+                  SetPixelRed(image,ClampToQuantum(target_scale*
+                    QuantumRange*(*p)),q);
                 p++;
                 if (target_channels > 1)
                   {
-                    SetPixelGreen(image,target_scale*QuantumRange*(*p),q);
+                    SetPixelGreen(image,ClampToQuantum(target_scale*
+                      QuantumRange*(*p)),q);
                     p++;
-                    SetPixelBlue(image,target_scale*QuantumRange*(*p),q);
+                    SetPixelBlue(image,ClampToQuantum(target_scale*
+                      QuantumRange*(*p)),q);
                     p++;
                   }
                 if (target_channels > 3)
                   {
-                    SetPixelBlack(image,target_scale*QuantumRange*(*p),q);
+                    SetPixelBlack(image,ClampToQuantum(target_scale*
+                      QuantumRange*(*p)),q);
                     p++;
                   }
                 q+=GetPixelChannels(image);
               }
               sync=SyncCacheViewAuthenticPixels(image_view,exception);
               if (sync == MagickFalse)
                 status=MagickFalse;
               if (image->progress_monitor != (MagickProgressMonitor) NULL)
                 {
                   MagickBooleanType
                     proceed;
 
 #if defined(MAGICKCORE_OPENMP_SUPPORT)
                   #pragma omp critical (MagickCore_ProfileImage)
 #endif
                   proceed=SetImageProgress(image,ProfileImageTag,progress++,
                     image->rows);
                   if (proceed == MagickFalse)
                     status=MagickFalse;
                 }
             }
             image_view=DestroyCacheView(image_view);
             (void) SetImageColorspace(image,target_colorspace,exception);
             switch (signature)
             {
               case cmsSigRgbData:
               {
                 image->type=image->alpha_trait == UndefinedPixelTrait ?
                   TrueColorType : TrueColorAlphaType;
                 break;
               }
               case cmsSigCmykData:
               {
                 image->type=image->alpha_trait == UndefinedPixelTrait ?
                   ColorSeparationType : ColorSeparationAlphaType;
                 break;
               }
               case cmsSigGrayData:
               {
                 image->type=image->alpha_trait == UndefinedPixelTrait ?
                   GrayscaleType : GrayscaleAlphaType;
                 break;
               }
               default:
                 break;
             }
             target_pixels=DestroyPixelThreadSet(target_pixels);
             source_pixels=DestroyPixelThreadSet(source_pixels);
             transform=DestroyTransformThreadSet(transform);
             if ((status != MagickFalse) &&
                 (cmsGetDeviceClass(source_profile) != cmsSigLinkClass))
               status=SetImageProfile(image,name,profile,exception);
             if (target_profile != (cmsHPROFILE) NULL)
               (void) cmsCloseProfile(target_profile);
           }
         (void) cmsCloseProfile(source_profile);
       }
 #endif
     }
   profile=DestroyStringInfo(profile);
   return(status);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   R e m o v e I m a g e P r o f i l e                                       %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  RemoveImageProfile() removes a named profile from the image and returns its
 %  value.
 %
 %  The format of the RemoveImageProfile method is:
 %
 %      void *RemoveImageProfile(Image *image,const char *name)
 %
 %  A description of each parameter follows:
 %
 %    o image: the image.
 %
 %    o name: the profile name.
 %
 */
