commit 910c489a4a77b297052873be2e018bc98f0f77be
Author: Guy Harris <gharris@sonic.net>
Date:   Sat Feb 6 13:07:12 2021 -0800

    pcapng: fix build without plugins.
    
    Just remove some HAVE_PLUGINS checks.  Those tables will eventually
    handle built-in block and option types as well.

diff --git a/wiretap/pcapng.c b/wiretap/pcapng.c
index c71c1e7fc3..7a10caba98 100644
--- a/wiretap/pcapng.c
+++ b/wiretap/pcapng.c
@@ -235,21 +235,20 @@ typedef struct interface_info_s {
 typedef struct {
     guint current_section_number; /**< Section number of the current section being read sequentially */
     GArray *sections;             /**< Sections found in the capture file. */
     wtap_new_ipv4_callback_t add_new_ipv4;
     wtap_new_ipv6_callback_t add_new_ipv6;
 } pcapng_t;
 
-#ifdef HAVE_PLUGINS
 /*
  * Table for plugins to handle particular block types.
  *
  * A handler has a "read" routine and a "write" routine.
  *
  * A "read" routine returns a block as a libwiretap record, filling
  * in the wtap_rec structure with the appropriate record type and
  * other information, and filling in the supplied Buffer with
  * data for which there's no place in the wtap_rec structure.
  *
  * A "write" routine takes a libwiretap record and Buffer and writes
  * out a block.
  */
@@ -464,33 +463,32 @@ void
 register_pcapng_option_handler(guint block_type, guint option_code,
                                option_parser parser,
                                option_sizer sizer,
                                option_writer writer)
 {
     guint bt_index;
     option_handler *handler;
 
     if (!get_block_type_index(block_type, &bt_index))
         return;
 
     if (option_handlers[bt_index] == NULL) {
         /*
          * Create the table of option handlers for this block type.
          *
          * XXX - there's no "g_uint_hash()" or "g_uint_equal()",
          * so we use "g_direct_hash()" and "g_direct_equal()".
          */
         option_handlers[bt_index] = g_hash_table_new_full(g_direct_hash,
                                                           g_direct_equal,
                                                           NULL, g_free);
     }
     handler = g_new(option_handler, 1);
     handler->parser = parser;
     handler->sizer = sizer;
     handler->writer = writer;
     g_hash_table_insert(option_handlers[bt_index],
                         GUINT_TO_POINTER(option_code), handler);
 }
-#endif /* HAVE_PLUGINS */
 
 static int
 pcapng_read_option(FILE_T fh, const section_info_t *section_info,
