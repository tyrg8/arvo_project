commit 4518aa4e2397957959c280e50010f843d6e6107e
Merge: e2c2570a4 eb18a559f
Author: eugene7646 <elivis@basistech.com>
Date:   Wed Aug 17 14:12:49 2022 -0400

    Merge pull request #2729 from sashashura/patch-5
    
    Fixes heap use after free read

diff --git a/tsk/fs/tsk_apfs.hpp b/tsk/fs/tsk_apfs.hpp
index 29a5e9acf..db3ddf627 100755
--- a/tsk/fs/tsk_apfs.hpp
+++ b/tsk/fs/tsk_apfs.hpp
@@ -101,241 +101,253 @@ template <typename Node>
 class APFSBtreeNodeIterator {
  public:
   using iterator_category = std::forward_iterator_tag;
   using difference_type = uint32_t;
   using value_type = struct {
     typename Node::key_type key;
     typename Node::value_type value;
   };
   using reference = const value_type &;
   using pointer = const value_type *;
 
  protected:
   lw_shared_ptr<Node> _node{};
   uint32_t _index{0};
 
   // Leaf nodes will have values and non-leaf nodes will have iterators
   // to the child node.
   //
   // TODO(JTS): If we ever switch to c++17 then we can use a std::variant
   std::unique_ptr<typename Node::iterator> _child_it{};
   value_type _val{};
 
   inline lw_shared_ptr<Node> own_node(const Node *node) {
     return own_node(node, node->block_num());
   }
 
   inline lw_shared_ptr<Node> own_node(const Node *node,
                                       apfs_block_num block_num) {
     return node->_pool.template get_block<Node>(
         block_num, node->_pool, block_num, node->_decryption_key);
   }
 
   template <typename Void = void>
   auto init_value(int recursion_depth)
       -> std::enable_if_t<Node::is_variable_kv_node::value, Void> {
     if ((recursion_depth < 0) || (recursion_depth > 64)) {
       throw std::runtime_error("init_value exceeds recursion depth");
     }
     if (this->_node->has_fixed_kv_size()) {
       throw std::runtime_error("btree does not have variable sized keys");
     }
     const auto &t = _node->_table_data.toc.variable[_index];
     const auto key_data = _node->_table_data.koff + t.key_offset;
     const auto val_data = _node->_table_data.voff - t.val_offset;
+    if (key_data > _node->_storage.data()) {
+      throw std::runtime_error("init_value: invalid key_offset");
+    }
+    if (val_data < _node->_storage.data()) {
+      throw std::runtime_error("init_value: invalid val_offset");
+    }
 
     memory_view key{key_data, t.key_length};
 
     if (_node->is_leaf()) {
       memory_view value{val_data, t.val_length};
 
       _val = {key, value};
     } else {
       const auto block_num = *((apfs_block_num *)val_data);
 
       _child_it = std::make_unique<typename Node::iterator>(
           own_node(_node.get(), block_num), 0, recursion_depth);
     }
   }
 
   template <typename Void = void>
   auto init_value(int recursion_depth) -> std::enable_if_t<Node::is_fixed_kv_node::value, Void> {
     if ((recursion_depth < 0) || (recursion_depth > 64)) {
       throw std::runtime_error("init_value exceeds recursion depth");
     }
     if (!this->_node->has_fixed_kv_size()) {
       throw std::runtime_error("btree does not have fixed sized keys");
     }
     const auto &t = _node->_table_data.toc.fixed[_index];
     const auto key_data = _node->_table_data.koff + t.key_offset;
     const auto val_data = _node->_table_data.voff - t.val_offset;
+    if (key_data > _node->_storage.data()) {
+      throw std::runtime_error("init_value: invalid key_offset");
+    }
+    if (val_data < _node->_storage.data()) {
+      throw std::runtime_error("init_value: invalid val_offset");
+    }
 
     if (_node->is_leaf()) {
       _val = {(typename Node::key_type)key_data,
               (typename Node::value_type)val_data};
     } else {
       const auto block_num = *((apfs_block_num *)val_data);
 
       _child_it = std::make_unique<typename Node::iterator>(
           own_node(_node.get(), block_num), 0, recursion_depth);
     }
   }
 
  public:
   // Forward iterators must be DefaultConstructible
   APFSBtreeNodeIterator() = default;
 
   APFSBtreeNodeIterator(const Node *node, uint32_t index, int recursion_depth);
 
   APFSBtreeNodeIterator(lw_shared_ptr<Node> &&node, uint32_t index, int recursion_depth);
 
   APFSBtreeNodeIterator(const Node *node, uint32_t index,
                         typename Node::iterator &&child);
 
   virtual ~APFSBtreeNodeIterator() = default;
 
   APFSBtreeNodeIterator(const APFSBtreeNodeIterator &rhs) noexcept
       : _node{rhs._node}, _index{rhs._index} {
     if (_node->is_leaf()) {
       _val = rhs._val;
     } else if (rhs._child_it != nullptr) {
       _child_it = std::make_unique<typename Node::iterator>(*rhs._child_it);
     }
   }
 
   APFSBtreeNodeIterator &operator=(const APFSBtreeNodeIterator &rhs) noexcept {
     if (this != &rhs) {
       this->~APFSBtreeNodeIterator();
       new (this) APFSBtreeNodeIterator(rhs);
     }
 
     return (*this);
   };
 
   APFSBtreeNodeIterator(APFSBtreeNodeIterator &&rhs) noexcept
       : _node{std::move(rhs._node)}, _index{std::move(rhs._index)} {
     if (_node->is_leaf()) {
       _val = std::move(rhs._val);
     } else {
       _child_it = std::move(rhs._child_it);
     }
   };
 
   APFSBtreeNodeIterator &operator=(APFSBtreeNodeIterator &&rhs) noexcept {
     if (this != &rhs) {
       this->~APFSBtreeNodeIterator();
       new (this)
           APFSBtreeNodeIterator(std::forward<APFSBtreeNodeIterator>(rhs));
     }
 
     return (*this);
   }
 
   bool is_valid() const noexcept {
     if (_node == nullptr) {
       return false;
     }
 
     return (_index < _node->key_count());
   }
 
   reference operator*() const noexcept {
     if (_index >= _node->key_count()) {
       return _val;
     }
 
     // Leaf nodes return the value
     if (_node->is_leaf()) {
       return _val;
     }
 
     // Non-Leaf nodes return the pointer
     return _child_it->operator*();
   }
 
   pointer operator->() const noexcept {
     if (_index >= _node->key_count()) {
       return nullptr;
     }
 
     // Leaf nodes return the value
     if (_node->is_leaf()) {
       return &_val;
     }
 
     // Non-Leaf nodes return the pointer
     return _child_it->operator->();
   }
 
   virtual APFSBtreeNodeIterator &operator++() {
     // If we're a leaf node then we just need to iterate the count
     if (_node->is_leaf()) {
       if (_index < _node->key_count()) {
         _index++;
 
         auto node{std::move(_node)};
         auto index{_index};
 
         this->~APFSBtreeNodeIterator();
         new (this) APFSBtreeNodeIterator(std::move(node), index, 0);
       }
       return (*this);
     }
 
     _child_it->operator++();
 
     if (*_child_it != _child_it->_node->end()) {
       return (*this);
     }
 
     _index++;
 
     auto node{std::move(_node)};
     auto index{_index};
 
     this->~APFSBtreeNodeIterator();
     new (this) APFSBtreeNodeIterator(std::move(node), index, 0);
 
     return (*this);
   }
 
   APFSBtreeNodeIterator operator++(int) {
     APFSBtreeNodeIterator it{(*this)};
 
     this->operator++();
 
     return it;
   }
 
   bool operator==(const APFSBtreeNodeIterator &rhs) const noexcept {
     // Self check
     if (this == &rhs) {
       return true;
     }
 
     // If only one of the nodes is nullptr then we're not a match, but if they
     // both are then we are a match
     if (_node == nullptr || rhs._node == nullptr) {
       return (_node == rhs._node);
     }
 
     // Ensure we have equivalent nodes and indexes
     if (*_node != *rhs._node || _index != rhs._index) {
       return false;
     }
 
     // If we're leaves then we're good.
     if (_node->is_leaf()) {
       return true;
     }
 
     // Otherwise, let's compare the child iterators.
     return (*_child_it == *rhs._child_it);
   }
 
   bool operator!=(const APFSBtreeNodeIterator &rhs) const noexcept {
     return !this->operator==(rhs);
   }
 
   friend Node;
   friend APFSJObjBtreeNode;
 };
@@ -1144,24 +1156,30 @@ template <>
 inline void APFSBtreeNodeIterator<APFSJObjBtreeNode>::init_value<void>(int recursion_depth) {
   const auto &t = _node->_table_data.toc.variable[_index];
   const auto key_data = _node->_table_data.koff + t.key_offset;
   const auto val_data = _node->_table_data.voff - t.val_offset;
+  if (key_data > _node->_storage.data()) {
+    throw std::runtime_error("APFSBtreeNodeIterator<APFSJObjBtreeNode>::init_value: invalid key_offset");
+  }
+  if (val_data < _node->_storage.data()) {
+    throw std::runtime_error("APFSBtreeNodeIterator<APFSJObjBtreeNode>::init_value: invalid val_offset");
+  }
 
   memory_view key{key_data, t.key_length};
 
   if (_node->is_leaf()) {
     memory_view value{val_data, t.val_length};
 
     _val = {key, value};
   } else {
     const auto obj_num = *((uint64_t *)val_data);
 
     const auto it = _node->_obj_root->find(obj_num);
 
     if (it == _node->_obj_root->end()) {
       throw std::runtime_error("can not find jobj");
     }
 
     _child_it = std::make_unique<typename APFSJObjBtreeNode::iterator>(
         own_node(_node.get(), it->value->paddr), 0, recursion_depth);
   }
 }
