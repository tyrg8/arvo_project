commit 7eced55b5700c0d2aa2e102ed78f10b0ce755a64
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Thu Apr 6 16:14:20 2023 +0100

    GhostPDF - prevent buffer overrun when evaluating functions
    
    OSS-fuzz bug #57745
    
    The problem in the report is that the BlackGeneration function is a 1-in
    3-out function. It is required to be a 1-in, 1-out function. The result
    was that the evaluation was writing 3 floats to a 1 float buffer.
    
    Check the parameters of the function to make sure it is of the correct
    size before trying to evaluate it.
    
    I also desk-checked all the other uses of functions; most were already
    checking the function parameters but I found two more cases which were
    not. Fix the /Separation and DeviceN tint transform so that we check the
    number of inputs and outputs to make sure they are correct.

diff --git a/pdf/pdf_colour.c b/pdf/pdf_colour.c
index 24610adcd..cdbc73700 100644
--- a/pdf/pdf_colour.c
+++ b/pdf/pdf_colour.c
@@ -1955,88 +1955,93 @@ exit:
 static int pdfi_create_Separation(pdf_context *ctx, pdf_array *color_array, int index, pdf_dict *stream_dict, pdf_dict *page_dict, gs_color_space **ppcs, bool inline_image)
 {
     pdf_obj *o = NULL;
     pdf_name *name = NULL, *NamedAlternate = NULL;
     pdf_array *ArrayAlternate = NULL;
     pdf_obj *transform = NULL;
     int code;
     gs_color_space *pcs = NULL, *pcs_alt = NULL;
     gs_function_t * pfn = NULL;
     separation_type sep_type;
 
     code = pdfi_array_get_type(ctx, color_array, index + 1, PDF_NAME, (pdf_obj **)&name);
     if (code < 0)
         goto pdfi_separation_error;
 
     sep_type = SEP_OTHER;
     if (name->length == 4 && memcmp(name->data, "None", 4) == 0)
         sep_type = SEP_NONE;
     if (name->length == 3 && memcmp(name->data, "All", 3) == 0)
         sep_type = SEP_ALL;
 
     code = pdfi_array_get(ctx, color_array, index + 2, &o);
     if (code < 0)
         goto pdfi_separation_error;
 
     switch (pdfi_type_of(o)) {
         case PDF_NAME:
             NamedAlternate = (pdf_name *)o;
             code = pdfi_create_colorspace_by_name(ctx, NamedAlternate, stream_dict, page_dict, &pcs_alt, inline_image);
             if (code < 0)
                 goto pdfi_separation_error;
             break;
         case PDF_ARRAY:
             ArrayAlternate = (pdf_array *)o;
             code = pdfi_create_colorspace_by_array(ctx, ArrayAlternate, 0, stream_dict, page_dict, &pcs_alt, inline_image);
             if (code < 0)
                 goto pdfi_separation_error;
             break;
         default:
             pdfi_countdown(o);
             code = gs_error_typecheck;
             goto pdfi_separation_error;
     }
 
     code = pdfi_array_get(ctx, color_array, index + 3, &transform);
     if (code < 0)
         goto pdfi_separation_error;
 
     code = pdfi_build_function(ctx, &pfn, NULL, 1, transform, page_dict);
     if (code < 0)
         goto pdfi_separation_error;
 
+    if (pfn->params.m != 1 || pfn->params.n != cs_num_components(pcs_alt)) {
+        code = gs_note_error(gs_error_rangecheck);
+        goto pdfi_separation_error;
+    }
+
     code = gs_cspace_new_Separation(&pcs, pcs_alt, ctx->memory);
     if (code < 0)
         goto pdfi_separation_error;
 
     rc_decrement(pcs_alt, "pdfi_create_Separation");
     pcs_alt = NULL;
     pcs->params.separation.mem = ctx->memory;
     pcs->params.separation.sep_type = sep_type;
     pcs->params.separation.sep_name = (char *)gs_alloc_bytes(ctx->memory->non_gc_memory, name->length + 1, "pdfi_setseparationspace(ink)");
     memcpy(pcs->params.separation.sep_name, name->data, name->length);
     pcs->params.separation.sep_name[name->length] = 0x00;
 
     code = gs_cspace_set_sepr_function(pcs, pfn);
     if (code < 0)
         goto pdfi_separation_error;
 
     if (ppcs!= NULL){
         /* FIXME
          * I can see no justification for this whatever, but if I don't do this then some
          * files with images in a /Separation colour space come out incorrectly. Even surrounding
          * this with a gsave/grestore pair causes differences.
          */
         code = pdfi_gs_setcolorspace(ctx, pcs);
         *ppcs = pcs;
         pdfi_set_colour_callback(pcs, ctx, pdfi_cspace_free_callback);
     } else {
         code = pdfi_gs_setcolorspace(ctx, pcs);
         /* release reference from construction */
         rc_decrement_only_cs(pcs, "setseparationspace");
     }
 
     pdfi_countdown(name);
     pdfi_countdown(NamedAlternate);
     pdfi_countdown(ArrayAlternate);
     pdfi_countdown(transform);
     return_error(0);
@@ -2137,276 +2142,281 @@ static int pdfi_create_DeviceN(pdf_context *ctx, pdf_array *color_array, int ind
             code = pdfi_create_Separation(ctx, sep_color_array, 0, stream_dict, page_dict, ppcs, inline_image);
             if (code < 0)
                 goto all_error;
 all_error:
             pdfi_countdown(ink_name);
             pdfi_countdown(sep_color_array);
             pdfi_countdown(obj);
             pdfi_countdown(inks);
             return code;
         } else
             pdfi_countdown(ink_name);
     }
 
     /* Deal with alternate space */
     code = pdfi_array_get(ctx, color_array, index + 2, &o);
     if (code < 0)
         goto pdfi_devicen_error;
 
     switch (pdfi_type_of(o)) {
         case PDF_NAME:
             NamedAlternate = (pdf_name *)o;
             code = pdfi_create_colorspace_by_name(ctx, NamedAlternate, stream_dict, page_dict, &pcs_alt, inline_image);
             if (code < 0)
                 goto pdfi_devicen_error;
             break;
         case PDF_ARRAY:
             ArrayAlternate = (pdf_array *)o;
             code = pdfi_create_colorspace_by_array(ctx, ArrayAlternate, 0, stream_dict, page_dict, &pcs_alt, inline_image);
             if (code < 0)
                 /* OSS-fuzz error 42973; we don't need to count down 'o' here because
                  * we have assigned it to ArrayAlternate and both the success and error
                  * paths count down ArrayAlternate.
                  */
                 goto pdfi_devicen_error;
             break;
         default:
             code = gs_error_typecheck;
             pdfi_countdown(o);
             goto pdfi_devicen_error;
     }
 
     /* Now the tint transform */
     code = pdfi_array_get(ctx, color_array, index + 3, &transform);
     if (code < 0)
         goto pdfi_devicen_error;
 
     code = pdfi_build_function(ctx, &pfn, NULL, 1, transform, page_dict);
     if (code < 0)
         goto pdfi_devicen_error;
 
+    if (pfn->params.m != pdfi_array_size(inks) || pfn->params.n != cs_num_components(pcs_alt)) {
+        code = gs_note_error(gs_error_rangecheck);
+        goto pdfi_devicen_error;
+    }
+
     code = gs_cspace_new_DeviceN(&pcs, pdfi_array_size(inks), pcs_alt, ctx->memory);
     if (code < 0)
         return code;
 
     rc_decrement(pcs_alt, "pdfi_create_DeviceN");
     pcs_alt = NULL;
     pcs->params.device_n.mem = ctx->memory;
 
     for (ix = 0;ix < pdfi_array_size(inks);ix++) {
         pdf_name *ink_name;
 
         ink_name = NULL;
         code = pdfi_array_get_type(ctx, inks, ix, PDF_NAME, (pdf_obj **)&ink_name);
         if (code < 0)
             goto pdfi_devicen_error;
 
         pcs->params.device_n.names[ix] = (char *)gs_alloc_bytes(ctx->memory->non_gc_memory, ink_name->length + 1, "pdfi_setdevicenspace(ink)");
         memcpy(pcs->params.device_n.names[ix], ink_name->data, ink_name->length);
         pcs->params.device_n.names[ix][ink_name->length] = 0x00;
         pdfi_countdown(ink_name);
     }
 
     code = gs_cspace_set_devn_function(pcs, pfn);
     if (code < 0)
         goto pdfi_devicen_error;
 
     if (pdfi_array_size(color_array) >= index + 5) {
         pdf_obj *ColorSpace = NULL;
         pdf_array *Components = NULL;
         pdf_obj *subtype = NULL;
 
         code = pdfi_array_get_type(ctx, color_array, index + 4, PDF_DICT, (pdf_obj **)&attributes);
         if (code < 0)
             goto pdfi_devicen_error;
 
         code = pdfi_dict_knownget(ctx, attributes, "Subtype", (pdf_obj **)&subtype);
         if (code < 0)
             goto pdfi_devicen_error;
 
         if (code == 0) {
             pcs->params.device_n.subtype = gs_devicen_DeviceN;
         } else {
             switch (pdfi_type_of(subtype)) {
                 case PDF_NAME:
                 case PDF_STRING:
                     if (memcmp(((pdf_name *)subtype)->data, "DeviceN", 7) == 0) {
                         pcs->params.device_n.subtype = gs_devicen_DeviceN;
                     } else {
                         if (memcmp(((pdf_name *)subtype)->data, "NChannel", 8) == 0) {
                             pcs->params.device_n.subtype = gs_devicen_NChannel;
                         } else {
                             pdfi_countdown(subtype);
                             goto pdfi_devicen_error;
                         }
                     }
                     pdfi_countdown(subtype);
                     break;
                 default:
                     pdfi_countdown(subtype);
                     goto pdfi_devicen_error;
             }
         }
 
         code = pdfi_dict_knownget_type(ctx, attributes, "Process", PDF_DICT, (pdf_obj **)&Process);
         if (code < 0)
             goto pdfi_devicen_error;
 
         if (Process != NULL && pdfi_dict_entries(Process) != 0) {
             int ix = 0;
             pdf_obj *name;
 
             code = pdfi_dict_get(ctx, Process, "ColorSpace", (pdf_obj **)&ColorSpace);
             if (code < 0)
                 goto pdfi_devicen_error;
 
             code = pdfi_create_colorspace(ctx, ColorSpace, stream_dict, page_dict, &process_space, inline_image);
             pdfi_countdown(ColorSpace);
             if (code < 0)
                 goto pdfi_devicen_error;
 
             pcs->params.device_n.devn_process_space = process_space;
 
             code = pdfi_dict_get_type(ctx, Process, "Components", PDF_ARRAY, (pdf_obj **)&Components);
             if (code < 0)
                 goto pdfi_devicen_error;
 
             pcs->params.device_n.num_process_names = pdfi_array_size(Components);
             pcs->params.device_n.process_names = (char **)gs_alloc_bytes(pcs->params.device_n.mem->non_gc_memory, pdfi_array_size(Components) * sizeof(char *), "pdfi_devicen(Processnames)");
             if (pcs->params.device_n.process_names == NULL) {
                 code = gs_error_VMerror;
                 goto pdfi_devicen_error;
             }
             memset(pcs->params.device_n.process_names, 0x00, pdfi_array_size(Components) * sizeof(char *));
 
             for (ix = 0; ix < pcs->params.device_n.num_process_names; ix++) {
                 code = pdfi_array_get(ctx, Components, ix, &name);
                 if (code < 0) {
                     pdfi_countdown(Components);
                     goto pdfi_devicen_error;
                 }
 
                 switch (pdfi_type_of(name)) {
                     case PDF_NAME:
                     case PDF_STRING:
                         pcs->params.device_n.process_names[ix] = (char *)gs_alloc_bytes(pcs->params.device_n.mem->non_gc_memory, ((pdf_name *)name)->length + 1, "pdfi_devicen(Processnames)");
                         if (pcs->params.device_n.process_names[ix] == NULL) {
                             pdfi_countdown(Components);
                             pdfi_countdown(name);
                             code = gs_error_VMerror;
                             goto pdfi_devicen_error;
                         }
                         memcpy(pcs->params.device_n.process_names[ix], ((pdf_name *)name)->data, ((pdf_name *)name)->length);
                         pcs->params.device_n.process_names[ix][((pdf_name *)name)->length] = 0x00;
                         pdfi_countdown(name);
                         break;
                     default:
                         pdfi_countdown(Components);
                         pdfi_countdown(name);
                         goto pdfi_devicen_error;
                 }
             }
             pdfi_countdown(Components);
         }
 
         code = pdfi_dict_knownget_type(ctx, attributes, "Colorants", PDF_DICT, (pdf_obj **)&Colorants);
         if (code < 0)
             goto pdfi_devicen_error;
 
         if (Colorants != NULL && pdfi_dict_entries(Colorants) != 0) {
             uint64_t ix = 0;
             pdf_obj *Colorant = NULL, *Space = NULL;
             char *colorant_name;
             gs_color_space *colorant_space = NULL;
 
             code = pdfi_dict_first(ctx, Colorants, &Colorant, &Space, &ix);
             if (code < 0)
                 goto pdfi_devicen_error;
 
             do {
                 switch (pdfi_type_of(Space)) {
                     case PDF_STRING:
                     case PDF_NAME:
                     case PDF_ARRAY:
                         break;
                     default:
                         pdfi_countdown(Space);
                         pdfi_countdown(Colorant);
                         code = gs_note_error(gs_error_typecheck);
                         goto pdfi_devicen_error;
                 }
                 switch (pdfi_type_of(Colorant)) {
                     case PDF_STRING:
                     case PDF_NAME:
                         break;
                     default:
                         pdfi_countdown(Space);
                         pdfi_countdown(Colorant);
                         code = gs_note_error(gs_error_typecheck);
                         goto pdfi_devicen_error;
                 }
 
                 code = pdfi_create_colorspace(ctx, Space, stream_dict, page_dict, &colorant_space, inline_image);
                 if (code < 0) {
                     pdfi_countdown(Space);
                     pdfi_countdown(Colorant);
                     goto pdfi_devicen_error;
                 }
 
                 colorant_name = (char *)gs_alloc_bytes(pcs->params.device_n.mem->non_gc_memory, ((pdf_name *)Colorant)->length + 1, "pdfi_devicen(colorant)");
                 if (colorant_name == NULL) {
                     rc_decrement_cs(colorant_space, "pdfi_devicen(colorant)");
                     pdfi_countdown(Space);
                     pdfi_countdown(Colorant);
                     code = gs_note_error(gs_error_VMerror);
                     goto pdfi_devicen_error;
                 }
                 memcpy(colorant_name, ((pdf_name *)Colorant)->data, ((pdf_name *)Colorant)->length);
                 colorant_name[((pdf_name *)Colorant)->length] = 0x00;
 
                 code = gs_attach_colorant_to_space(colorant_name, pcs, colorant_space, pcs->params.device_n.mem->non_gc_memory);
                 if (code < 0) {
                     gs_free_object(pcs->params.device_n.mem->non_gc_memory, colorant_name, "pdfi_devicen(colorant)");
                     rc_decrement_cs(colorant_space, "pdfi_devicen(colorant)");
                     pdfi_countdown(Space);
                     pdfi_countdown(Colorant);
                     code = gs_note_error(gs_error_VMerror);
                     goto pdfi_devicen_error;
                 }
 
                 /* We've attached the colorant colour space to the DeviceN space, we no longer need this
                  * reference to it, so discard it.
                  */
                 rc_decrement_cs(colorant_space, "pdfi_devicen(colorant)");
                 pdfi_countdown(Space);
                 pdfi_countdown(Colorant);
                 Space = Colorant = NULL;
 
                 code = pdfi_dict_next(ctx, Colorants, &Colorant, &Space, &ix);
                 if (code == gs_error_undefined)
                     break;
 
                 if (code < 0) {
                     pdfi_countdown(Space);
                     pdfi_countdown(Colorant);
                     goto pdfi_devicen_error;
                 }
             }while (1);
         }
     }
 
     if (ppcs!= NULL){
         *ppcs = pcs;
         pdfi_set_colour_callback(pcs, ctx, pdfi_cspace_free_callback);
     } else {
         code = pdfi_gs_setcolorspace(ctx, pcs);
         /* release reference from construction */
         rc_decrement_only_cs(pcs, "setdevicenspace");
     }
     pdfi_countdown(Process);
     pdfi_countdown(Colorants);
     pdfi_countdown(attributes);
     pdfi_countdown(inks);
     pdfi_countdown(NamedAlternate);
     pdfi_countdown(ArrayAlternate);
     pdfi_countdown(transform);
     return_error(0);
diff --git a/pdf/pdf_gstate.c b/pdf/pdf_gstate.c
index 8df271924..f33976356 100644
--- a/pdf/pdf_gstate.c
+++ b/pdf/pdf_gstate.c
@@ -582,53 +582,58 @@ GS_Font_error:
 static int pdfi_set_blackgeneration(pdf_context *ctx, pdf_obj *obj, pdf_dict *page_dict, bool is_BG)
 {
     int code = 0, i;
     gs_function_t *pfn;
 
     switch (pdfi_type_of(obj)) {
         case PDF_NAME:
             if (is_BG) {
                 pdfi_set_error(ctx, 0, NULL, E_PDF_BG_ISNAME, "pdfi_set_blackgeneration", "");
                 if (ctx->args.pdfstoponerror)
                     code = gs_note_error(gs_error_typecheck);
                 else
                     code = 0;
             } else {
                 if (pdfi_name_is((const pdf_name *)obj, "Identity"))
                     code = gs_setblackgeneration_remap(ctx->pgs, gs_identity_transfer, false);
                 else if (pdfi_name_is((const pdf_name *)obj, "Default")) {
                     code = gs_setblackgeneration_remap(ctx->pgs, ctx->page.DefaultBG.proc, false);
                     memcpy(ctx->pgs->black_generation->values, ctx->page.DefaultBG.values, transfer_map_size * sizeof(frac));
                 } else
                     code = gs_note_error(gs_error_rangecheck);
             }
             goto exit;
 
         case PDF_DICT:
         case PDF_STREAM:
             code = pdfi_build_function(ctx, &pfn, NULL, 1, obj, page_dict);
             if (code < 0)
                 return code;
 
+            if (pfn->params.n != 1) {
+                pdfi_free_function(ctx, pfn);
+                return_error(gs_error_rangecheck);
+            }
+
             gs_setblackgeneration_remap(ctx->pgs, gs_mapped_transfer, false);
             for (i = 0; i < transfer_map_size; i++) {
                 float v, f;
 
                 f = (1.0f / (transfer_map_size - 1)) * i;
 
                 code = gs_function_evaluate(pfn, (const float *)&f, &v);
                 if (code < 0) {
                     pdfi_free_function(ctx, pfn);
                     return code;
                 }
 
                 ctx->pgs->black_generation->values[i] =
                     (v < 0.0 ? float2frac(0.0) :
                      v >= 1.0 ? frac_1 :
                      float2frac(v));
             }
             code = pdfi_free_function(ctx, pfn);
             break;
 
         default:
             return_error(gs_error_typecheck);
     }
