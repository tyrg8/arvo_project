commit f336d9ca4fbe7b1ef137c5cfa8ea1cdd3ed1e067
Author: Raphal <gael.raphal@systerel.fr>
Date:   Tue Jan 30 09:53:52 2024 +0100

    Ticket #1364: Fix out of bound acces of builtintype tables

diff --git a/src/Common/opcua_types/sopc_encoder.c b/src/Common/opcua_types/sopc_encoder.c
index b77bad1e8..dc29e2480 100644
--- a/src/Common/opcua_types/sopc_encoder.c
+++ b/src/Common/opcua_types/sopc_encoder.c
@@ -2126,30 +2126,30 @@ static SOPC_ReturnStatus WriteVariantNonArrayBuiltInType(SOPC_Buffer* buf,
 // 0 Means not optimizable and other values represent the size in byte of each element to copy
 static size_t getBuiltinOptimizableSize(SOPC_BuiltinId builtInTypeId)
 {
-    if (builtInTypeId <= 0 || builtInTypeId > SOPC_BUILTINID_MAX + 1)
+    if (builtInTypeId <= 0 || builtInTypeId > SOPC_BUILTINID_MAX)
     {
         return 0;
     }
     switch (builtInTypeId)
     {
     case SOPC_Byte_Id:
     case SOPC_SByte_Id:
     case SOPC_Boolean_Id:
     case SOPC_UInt16_Id:
     case SOPC_Int16_Id:
     case SOPC_Int32_Id:
     case SOPC_UInt32_Id:
     case SOPC_Int64_Id:
     case SOPC_UInt64_Id:
     case SOPC_DateTime_Id:
     case SOPC_StatusCode_Id:
     case SOPC_Float_Id:
         return (SOPC_IS_LITTLE_ENDIAN ? SOPC_BuiltInType_HandlingTable[builtInTypeId].size : 0);
     case SOPC_Double_Id:
         return (SOPC_IS_LITTLE_ENDIAN && (!SOPC_IS_DOUBLE_MIDDLE_ENDIAN)
                     ? SOPC_BuiltInType_HandlingTable[builtInTypeId].size
                     : 0);
     default:
         return 0;
     }
 }
@@ -2157,44 +2157,44 @@ static size_t getBuiltinOptimizableSize(SOPC_BuiltinId builtInTypeId)
 static SOPC_ReturnStatus WriteVariantArrayBuiltInType(SOPC_Buffer* buf,
                                                       SOPC_BuiltinId builtInTypeId,
                                                       const SOPC_VariantArrayValue* array,
                                                       int32_t* length,
                                                       uint32_t nestedStructLevel)
 {
     if (nestedStructLevel >= SOPC_Internal_Common_GetEncodingConstants()->max_nested_struct)
     {
         return SOPC_STATUS_INVALID_STATE;
     }
-    else if (builtInTypeId <= 0 || builtInTypeId > SOPC_BUILTINID_MAX + 1)
+    else if (builtInTypeId <= 0 || builtInTypeId > SOPC_BUILTINID_MAX)
     {
         return SOPC_STATUS_INVALID_PARAMETERS;
     }
     SOPC_ReturnStatus status = SOPC_STATUS_NOK;
     const size_t eltOptimSize = getBuiltinOptimizableSize(builtInTypeId);
     if (eltOptimSize > 0)
     {
         // Note : union fields content are all pointing to the same address.
         // using array->BooleanArr to point array, but any other field would be possible
         if (NULL == buf || NULL == length || NULL == array || (*length > 0 && NULL == array->BooleanArr))
         {
             status = SOPC_STATUS_INVALID_PARAMETERS;
         }
         else
         {
             nestedStructLevel++;
             status = SOPC_Int32_Write(length, buf, nestedStructLevel);
             if (SOPC_STATUS_OK == status)
             {
                 status = SOPC_Buffer_Write(buf, array->BooleanArr, (uint32_t)((uint32_t)(*length) * eltOptimSize));
             }
         }
     }
     else
     {
         // Note : union fields content are all pointing to the same address.
         // using array->BooleanArr to point array, but any other field would be possible
         status = SOPC_Write_Array(buf, length, (const void* const*) &array->BooleanArr,
                                   SOPC_BuiltInType_HandlingTable[builtInTypeId].size,
                                   SOPC_BuiltInType_EncodingTable[builtInTypeId].encode, nestedStructLevel);
     }
     return status;
 }
@@ -2540,77 +2540,77 @@ static SOPC_ReturnStatus ReadVariantNonArrayBuiltInType(SOPC_Buffer* buf,
 static SOPC_ReturnStatus ReadVariantArrayBuiltInType(SOPC_Buffer* buf,
                                                      SOPC_BuiltinId builtInTypeId,
                                                      SOPC_VariantArrayValue* array,
                                                      int32_t* length,
                                                      uint32_t nestedStructLevel)
 {
     if (nestedStructLevel >= SOPC_Internal_Common_GetEncodingConstants()->max_nested_struct)
     {
         return SOPC_STATUS_INVALID_STATE;
     }
-    else if (builtInTypeId <= 0 || builtInTypeId > SOPC_BUILTINID_MAX + 1)
+    else if (builtInTypeId <= 0 || builtInTypeId > SOPC_BUILTINID_MAX)
     {
         return SOPC_STATUS_INVALID_PARAMETERS;
     }
     SOPC_ReturnStatus status = SOPC_STATUS_OK;
     const size_t eltOptimSize = getBuiltinOptimizableSize(builtInTypeId);
     if (eltOptimSize > 0)
     {
         if (NULL == buf || NULL == length || NULL == array || NULL != array->BooleanArr)
         {
             return SOPC_STATUS_INVALID_PARAMETERS;
         }
         else if (nestedStructLevel >= SOPC_Internal_Common_GetEncodingConstants()->max_nested_struct)
         {
             return SOPC_STATUS_INVALID_STATE;
         }
 
         nestedStructLevel++;
         status = SOPC_Int32_Read(length, buf, nestedStructLevel);
 
         if (SOPC_STATUS_OK == status && *length < 0)
         {
             *length = 0;
         }
 
         if (SOPC_STATUS_OK == status && *length > SOPC_Internal_Common_GetEncodingConstants()->max_array_length)
         {
             status = SOPC_STATUS_OUT_OF_MEMORY;
         }
 
         if (SOPC_STATUS_OK == status && *length > 0 && (uint64_t) *length <= SIZE_MAX / eltOptimSize)
         {
             array->BooleanArr = SOPC_Calloc((size_t) *length, eltOptimSize);
 
             if (NULL == array->BooleanArr)
             {
                 status = SOPC_STATUS_OUT_OF_MEMORY;
             }
             else
             {
                 status = SOPC_Buffer_Read(array->BooleanArr, buf, (uint32_t)((uint32_t)(*length) * eltOptimSize));
                 if (SOPC_STATUS_OK != status)
                 {
                     status = SOPC_STATUS_ENCODING_ERROR;
                 }
             }
 
             if (SOPC_STATUS_OK != status)
             {
                 SOPC_Free(array->BooleanArr);
                 array->BooleanArr = NULL;
                 *length = 0;
             }
         }
     }
     else
     {
         // Note : union fields content are all pointing to the same address.
         // using array->BooleanArr to point array, but any other field would be possible
         status = SOPC_Read_Array(buf, length, (void**) &array->BooleanArr,
                                  SOPC_BuiltInType_HandlingTable[builtInTypeId].size,
                                  SOPC_BuiltInType_EncodingTable[builtInTypeId].decode,
                                  SOPC_BuiltInType_HandlingTable[builtInTypeId].initialize,
                                  SOPC_BuiltInType_HandlingTable[builtInTypeId].clear, nestedStructLevel);
     }
     return status;
 }
