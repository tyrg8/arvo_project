commit c59916a5cc0ae7574780555fe5d6cf80160cdae1
Author: Brian Osman <brianosman@google.com>
Date:   Mon Jul 20 09:39:59 2020 -0400

    SkVertices: Fix calculation of size needed for attr marker names
    
    Bug: oss-fuzz:24246
    Change-Id: Ib99a359b2f0c6ee55180734d6ae933b90e4f6ca8
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/303920
    Commit-Queue: Brian Osman <brianosman@google.com>
    Auto-Submit: Brian Osman <brianosman@google.com>
    Reviewed-by: Kevin Lubick <kjlubick@google.com>

diff --git a/src/core/SkVertices.cpp b/src/core/SkVertices.cpp
index e2bb1a8b07..988477fe95 100644
--- a/src/core/SkVertices.cpp
+++ b/src/core/SkVertices.cpp
@@ -111,80 +111,80 @@ struct SkVertices::Desc {
 struct SkVertices::Sizes {
     Sizes(const Desc& desc) {
         desc.validate();
 
         SkSafeMath safe;
 
         fNameSize = 0;
         for (int i = 0; i < desc.fAttributeCount; ++i) {
             const Attribute& attr(desc.fAttributes[i]);
             if (!attr.isValid()) {
                 return;
             }
             if (attr.fMarkerName) {
-                fNameSize = safe.add(fNameSize, strlen(attr.fMarkerName));
+                fNameSize = safe.add(fNameSize, strlen(attr.fMarkerName) + 1 /*null terminator*/);
             }
         }
         fNameSize = SkAlign4(fNameSize);
 
         fAttrSize = safe.mul(desc.fAttributeCount, sizeof(Attribute));
         fVSize = safe.mul(desc.fVertexCount, sizeof(SkPoint));
         fDSize = safe.mul(custom_data_size(desc.fAttributes, desc.fAttributeCount),
                           desc.fVertexCount);
         fTSize = desc.fHasTexs ? safe.mul(desc.fVertexCount, sizeof(SkPoint)) : 0;
         fCSize = desc.fHasColors ? safe.mul(desc.fVertexCount, sizeof(SkColor)) : 0;
 
         fBuilderTriFanISize = 0;
         fISize = safe.mul(desc.fIndexCount, sizeof(uint16_t));
         if (kTriangleFan_VertexMode == desc.fMode) {
             int numFanTris = 0;
             if (desc.fIndexCount) {
                 fBuilderTriFanISize = fISize;
                 numFanTris = desc.fIndexCount - 2;
             } else {
                 numFanTris = desc.fVertexCount - 2;
                 // By forcing this to become indexed we are adding a constraint to the maximum
                 // number of vertices.
                 if (desc.fVertexCount > (SkTo<int>(UINT16_MAX) + 1)) {
                     sk_bzero(this, sizeof(*this));
                     return;
                 }
             }
             if (numFanTris <= 0) {
                 sk_bzero(this, sizeof(*this));
                 return;
             }
             fISize = safe.mul(numFanTris, 3 * sizeof(uint16_t));
         }
 
         fTotal = safe.add(sizeof(SkVertices),
                  safe.add(fAttrSize,
                  safe.add(fNameSize,
                  safe.add(fVSize,
                  safe.add(fDSize,
                  safe.add(fTSize,
                  safe.add(fCSize,
                           fISize)))))));
 
         if (safe.ok()) {
             fArrays = fVSize + fDSize + fTSize + fCSize + fISize;  // just the sum of the arrays
         } else {
             sk_bzero(this, sizeof(*this));
         }
     }
 
     bool isValid() const { return fTotal != 0; }
 
     size_t fTotal = 0;  // size of entire SkVertices allocation (obj + arrays)
     size_t fAttrSize;  // size of attributes
     size_t fNameSize;  // size of attribute marker names
     size_t fArrays; // size of all the data arrays (V + D + T + C + I)
     size_t fVSize;
     size_t fDSize;  // size of all customData = [customDataSize * fVertexCount]
     size_t fTSize;
     size_t fCSize;
     size_t fISize;
 
     // For indexed tri-fans this is the number of amount of space fo indices needed in the builder
     // before conversion to indexed triangles (or zero if not indexed or not a triangle fan).
     size_t fBuilderTriFanISize;
 };
@@ -214,53 +214,53 @@ SkVertices::Builder::Builder(const Desc& desc) {
 void SkVertices::Builder::init(const Desc& desc) {
     Sizes sizes(desc);
     if (!sizes.isValid()) {
         SkASSERT(!this->isValid());
         return;
     }
 
     void* storage = ::operator new (sizes.fTotal);
     if (sizes.fBuilderTriFanISize) {
         fIntermediateFanIndices.reset(new uint8_t[sizes.fBuilderTriFanISize]);
     }
 
     fVertices.reset(new (storage) SkVertices);
 
     // need to point past the object to store the arrays
     char* ptr = (char*)storage + sizeof(SkVertices);
 
     // return the original ptr (or null), but then advance it by size
     auto advance = [&ptr](size_t size) {
         char* new_ptr = size ? ptr : nullptr;
         ptr += size;
         return new_ptr;
     };
 
     fVertices->fAttributes = (Attribute*)advance(sizes.fAttrSize);
     char* markerNames      =             advance(sizes.fNameSize);
 
     // Copy the attributes into our block of memory (immediately after the SkVertices)
     sk_careful_memcpy(fVertices->fAttributes, desc.fAttributes,
                       desc.fAttributeCount * sizeof(Attribute));
 
     // Now copy the marker names, and fix up the pointers in our attributes
     for (int i = 0; i < desc.fAttributeCount; ++i) {
         Attribute& attr(fVertices->fAttributes[i]);
         if (attr.fMarkerName) {
             attr.fMarkerName = strcpy(markerNames, attr.fMarkerName);
-            markerNames += (strlen(markerNames) + 1);
+            markerNames += (strlen(markerNames) + 1 /*null terminator*/);
         }
     }
 
     fVertices->fPositions      = (SkPoint*) advance(sizes.fVSize);
     fVertices->fCustomData     = (void*)    advance(sizes.fDSize);
     fVertices->fTexs           = (SkPoint*) advance(sizes.fTSize);
     fVertices->fColors         = (SkColor*) advance(sizes.fCSize);
     fVertices->fIndices        = (uint16_t*)advance(sizes.fISize);
 
     fVertices->fVertexCount    = desc.fVertexCount;
     fVertices->fIndexCount     = desc.fIndexCount;
     fVertices->fAttributeCount = desc.fAttributeCount;
     fVertices->fMode           = desc.fMode;
 
     // We defer assigning fBounds and fUniqueID until detach() is called
 }
