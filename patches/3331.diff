commit 28094e1ebfa420f9a0bdc7a11b8d4ee5f154db35
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Fri Sep 8 10:56:49 2017 +0200

    opj_tcd_mct_decode(): avoid heap buffer overflow when components have not the same number of resolutions. Also fixes an issue with subtile decoding. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3331. Credit to OSS Fuzz

diff --git a/src/lib/openjp2/tcd.c b/src/lib/openjp2/tcd.c
index 68caf5b0..631a4840 100644
--- a/src/lib/openjp2/tcd.c
+++ b/src/lib/openjp2/tcd.c
@@ -1437,209 +1437,218 @@ OPJ_BOOL opj_tcd_encode_tile(opj_tcd_t *p_tcd,
 OPJ_BOOL opj_tcd_decode_tile(opj_tcd_t *p_tcd,
                              OPJ_UINT32 win_x0,
                              OPJ_UINT32 win_y0,
                              OPJ_UINT32 win_x1,
                              OPJ_UINT32 win_y1,
                              OPJ_BYTE *p_src,
                              OPJ_UINT32 p_max_length,
                              OPJ_UINT32 p_tile_no,
                              opj_codestream_index_t *p_cstr_index,
                              opj_event_mgr_t *p_manager
                             )
 {
     OPJ_UINT32 l_data_read;
     OPJ_UINT32 compno;
 
     p_tcd->tcd_tileno = p_tile_no;
     p_tcd->tcp = &(p_tcd->cp->tcps[p_tile_no]);
     p_tcd->win_x0 = win_x0;
     p_tcd->win_y0 = win_y0;
     p_tcd->win_x1 = win_x1;
     p_tcd->win_y1 = win_y1;
     p_tcd->whole_tile_decoding = OPJ_TRUE;
 
     for (compno = 0; compno < p_tcd->image->numcomps; compno++) {
         if (!opj_tcd_is_whole_tilecomp_decoding(p_tcd, compno)) {
             p_tcd->whole_tile_decoding = OPJ_FALSE;
             break;
         }
     }
 
     if (p_tcd->whole_tile_decoding) {
         for (compno = 0; compno < p_tcd->image->numcomps; compno++) {
             opj_tcd_tilecomp_t* tilec = &(p_tcd->tcd_image->tiles->comps[compno]);
             opj_tcd_resolution_t *l_res = &
                                           (tilec->resolutions[tilec->minimum_num_resolutions - 1]);
             OPJ_SIZE_T l_data_size;
 
             /* compute l_data_size with overflow check */
             OPJ_SIZE_T res_w = (OPJ_SIZE_T)(l_res->x1 - l_res->x0);
             OPJ_SIZE_T res_h = (OPJ_SIZE_T)(l_res->y1 - l_res->y0);
 
             /* issue 733, l_data_size == 0U, probably something wrong should be checked before getting here */
             if (res_h > 0 && res_w > SIZE_MAX / res_h) {
                 opj_event_msg(p_manager, EVT_ERROR,
                               "Size of tile data exceeds system limits\n");
                 return OPJ_FALSE;
             }
             l_data_size = res_w * res_h;
 
             if (SIZE_MAX / sizeof(OPJ_UINT32) < l_data_size) {
                 opj_event_msg(p_manager, EVT_ERROR,
                               "Size of tile data exceeds system limits\n");
                 return OPJ_FALSE;
             }
             l_data_size *= sizeof(OPJ_UINT32);
 
             tilec->data_size_needed = l_data_size;
 
             if (!opj_alloc_tile_component_data(tilec)) {
                 opj_event_msg(p_manager, EVT_ERROR,
                               "Size of tile data exceeds system limits\n");
                 return OPJ_FALSE;
             }
         }
     } else {
         /* Compute restricted tile-component and tile-resolution coordinates */
         /* of the window of interest, but defer the memory allocation until */
         /* we know the resno_decoded */
         for (compno = 0; compno < p_tcd->image->numcomps; compno++) {
             OPJ_UINT32 resno;
             opj_tcd_tilecomp_t* tilec = &(p_tcd->tcd_image->tiles->comps[compno]);
             opj_image_comp_t* image_comp = &(p_tcd->image->comps[compno]);
             /* Compute the intersection of the area of interest, expressed in tile coordinates */
             /* with the tile coordinates */
             tilec->win_x0 = opj_uint_max(
                                 (OPJ_UINT32)tilec->x0,
                                 opj_uint_ceildiv(p_tcd->win_x0, image_comp->dx));
             tilec->win_y0 = opj_uint_max(
                                 (OPJ_UINT32)tilec->y0,
                                 opj_uint_ceildiv(p_tcd->win_y0, image_comp->dy));
             tilec->win_x1 = opj_uint_min(
                                 (OPJ_UINT32)tilec->x1,
                                 opj_uint_ceildiv(p_tcd->win_x1, image_comp->dx));
             tilec->win_y1 = opj_uint_min(
                                 (OPJ_UINT32)tilec->y1,
                                 opj_uint_ceildiv(p_tcd->win_y1, image_comp->dy));
+            if (tilec->win_x1 < tilec->win_x0 ||
+                    tilec->win_y1 < tilec->win_y0) {
+                /* We should not normally go there. The circumstance is when */
+                /* the tile coordinates do not intersect the area of interest */
+                /* Upper level logic should not even try to decode that tile */
+                opj_event_msg(p_manager, EVT_ERROR,
+                              "Invalid tilec->win_xxx values\n");
+                return OPJ_FALSE;
+            }
 
             for (resno = 0; resno < tilec->numresolutions; ++resno) {
                 opj_tcd_resolution_t *res = tilec->resolutions + resno;
                 res->win_x0 = opj_uint_ceildivpow2(tilec->win_x0,
                                                    tilec->numresolutions - 1 - resno);
                 res->win_y0 = opj_uint_ceildivpow2(tilec->win_y0,
                                                    tilec->numresolutions - 1 - resno);
                 res->win_x1 = opj_uint_ceildivpow2(tilec->win_x1,
                                                    tilec->numresolutions - 1 - resno);
                 res->win_y1 = opj_uint_ceildivpow2(tilec->win_y1,
                                                    tilec->numresolutions - 1 - resno);
             }
         }
     }
 
 #ifdef TODO_MSD /* FIXME */
     /* INDEX >>  */
     if (p_cstr_info) {
         OPJ_UINT32 resno, compno, numprec = 0;
         for (compno = 0; compno < (OPJ_UINT32) p_cstr_info->numcomps; compno++) {
             opj_tcp_t *tcp = &p_tcd->cp->tcps[0];
             opj_tccp_t *tccp = &tcp->tccps[compno];
             opj_tcd_tilecomp_t *tilec_idx = &p_tcd->tcd_image->tiles->comps[compno];
             for (resno = 0; resno < tilec_idx->numresolutions; resno++) {
                 opj_tcd_resolution_t *res_idx = &tilec_idx->resolutions[resno];
                 p_cstr_info->tile[p_tile_no].pw[resno] = res_idx->pw;
                 p_cstr_info->tile[p_tile_no].ph[resno] = res_idx->ph;
                 numprec += res_idx->pw * res_idx->ph;
                 p_cstr_info->tile[p_tile_no].pdx[resno] = tccp->prcw[resno];
                 p_cstr_info->tile[p_tile_no].pdy[resno] = tccp->prch[resno];
             }
         }
         p_cstr_info->tile[p_tile_no].packet = (opj_packet_info_t *) opj_malloc(
                 p_cstr_info->numlayers * numprec * sizeof(opj_packet_info_t));
         p_cstr_info->packno = 0;
     }
     /* << INDEX */
 #endif
 
     /*--------------TIER2------------------*/
     /* FIXME _ProfStart(PGROUP_T2); */
     l_data_read = 0;
     if (! opj_tcd_t2_decode(p_tcd, p_src, &l_data_read, p_max_length, p_cstr_index,
                             p_manager)) {
         return OPJ_FALSE;
     }
     /* FIXME _ProfStop(PGROUP_T2); */
 
     /*------------------TIER1-----------------*/
 
     /* FIXME _ProfStart(PGROUP_T1); */
     if (! opj_tcd_t1_decode(p_tcd, p_manager)) {
         return OPJ_FALSE;
     }
     /* FIXME _ProfStop(PGROUP_T1); */
 
 
     /* For subtile decoding, now we know the resno_decoded, we can allocate */
     /* the tile data buffer */
     if (!p_tcd->whole_tile_decoding) {
         for (compno = 0; compno < p_tcd->image->numcomps; compno++) {
             opj_tcd_tilecomp_t* tilec = &(p_tcd->tcd_image->tiles->comps[compno]);
             opj_image_comp_t* image_comp = &(p_tcd->image->comps[compno]);
             opj_tcd_resolution_t *res = tilec->resolutions + image_comp->resno_decoded;
             OPJ_SIZE_T w = res->win_x1 - res->win_x0;
             OPJ_SIZE_T h = res->win_y1 - res->win_y0;
             OPJ_SIZE_T l_data_size;
 
             opj_image_data_free(tilec->data_win);
             tilec->data_win = NULL;
 
             if (w > 0 && h > 0) {
                 if (w > SIZE_MAX / h) {
                     opj_event_msg(p_manager, EVT_ERROR,
                                   "Size of tile data exceeds system limits\n");
                     return OPJ_FALSE;
                 }
                 l_data_size = w * h;
                 if (l_data_size > SIZE_MAX / sizeof(OPJ_INT32)) {
                     opj_event_msg(p_manager, EVT_ERROR,
                                   "Size of tile data exceeds system limits\n");
                     return OPJ_FALSE;
                 }
                 l_data_size *= sizeof(OPJ_INT32);
 
                 tilec->data_win = opj_image_data_alloc(l_data_size);
                 if (tilec->data_win == NULL) {
                     opj_event_msg(p_manager, EVT_ERROR,
                                   "Size of tile data exceeds system limits\n");
                     return OPJ_FALSE;
                 }
             }
         }
     }
 
     /*----------------DWT---------------------*/
 
     /* FIXME _ProfStart(PGROUP_DWT); */
     if
     (! opj_tcd_dwt_decode(p_tcd)) {
         return OPJ_FALSE;
     }
     /* FIXME _ProfStop(PGROUP_DWT); */
 
     /*----------------MCT-------------------*/
     /* FIXME _ProfStart(PGROUP_MCT); */
     if
     (! opj_tcd_mct_decode(p_tcd, p_manager)) {
         return OPJ_FALSE;
     }
     /* FIXME _ProfStop(PGROUP_MCT); */
 
     /* FIXME _ProfStart(PGROUP_DC_SHIFT); */
     if
     (! opj_tcd_dc_level_shift_decode(p_tcd)) {
         return OPJ_FALSE;
     }
     /* FIXME _ProfStop(PGROUP_DC_SHIFT); */
 
 
     /*---------------TILE-------------------*/
     return OPJ_TRUE;
 }
@@ -1956,138 +1965,148 @@ static OPJ_BOOL opj_tcd_dwt_decode(opj_tcd_t *p_tcd)
 static OPJ_BOOL opj_tcd_mct_decode(opj_tcd_t *p_tcd, opj_event_mgr_t *p_manager)
 {
     opj_tcd_tile_t * l_tile = p_tcd->tcd_image->tiles;
     opj_tcp_t * l_tcp = p_tcd->tcp;
     opj_tcd_tilecomp_t * l_tile_comp = l_tile->comps;
     OPJ_UINT32 l_samples, i;
 
     if (! l_tcp->mct) {
         return OPJ_TRUE;
     }
 
     if (p_tcd->whole_tile_decoding) {
         opj_tcd_resolution_t* res_comp0 = l_tile->comps[0].resolutions +
                                           l_tile_comp->minimum_num_resolutions - 1;
 
         /* A bit inefficient: we process more data than needed if */
         /* resno_decoded < l_tile_comp->minimum_num_resolutions-1, */
         /* but we would need to take into account a stride then */
         l_samples = (OPJ_UINT32)((res_comp0->x1 - res_comp0->x0) *
                                  (res_comp0->y1 - res_comp0->y0));
+        if (l_tile->numcomps >= 3) {
+            if (l_tile_comp->minimum_num_resolutions !=
+                    l_tile->comps[1].minimum_num_resolutions ||
+                    l_tile_comp->minimum_num_resolutions !=
+                    l_tile->comps[2].minimum_num_resolutions) {
+                opj_event_msg(p_manager, EVT_ERROR,
+                              "Tiles don't all have the same dimension. Skip the MCT step.\n");
+                return OPJ_FALSE;
+            }
+        }
         if (l_tile->numcomps >= 3) {
             opj_tcd_resolution_t* res_comp1 = l_tile->comps[1].resolutions +
                                               l_tile_comp->minimum_num_resolutions - 1;
             opj_tcd_resolution_t* res_comp2 = l_tile->comps[2].resolutions +
                                               l_tile_comp->minimum_num_resolutions - 1;
             /* testcase 1336.pdf.asan.47.376 */
             if (p_tcd->image->comps[0].resno_decoded !=
                     p_tcd->image->comps[1].resno_decoded ||
                     p_tcd->image->comps[0].resno_decoded !=
                     p_tcd->image->comps[2].resno_decoded ||
                     (OPJ_SIZE_T)(res_comp1->x1 - res_comp1->x0) *
                     (OPJ_SIZE_T)(res_comp1->y1 - res_comp1->y0) != l_samples ||
                     (OPJ_SIZE_T)(res_comp2->x1 - res_comp2->x0) *
                     (OPJ_SIZE_T)(res_comp2->y1 - res_comp2->y0) != l_samples) {
                 opj_event_msg(p_manager, EVT_ERROR,
                               "Tiles don't all have the same dimension. Skip the MCT step.\n");
                 return OPJ_FALSE;
             }
         }
     } else {
         opj_tcd_resolution_t* res_comp0 = l_tile->comps[0].resolutions +
                                           p_tcd->image->comps[0].resno_decoded;
 
         l_samples = (res_comp0->win_x1 - res_comp0->win_x0) *
                     (res_comp0->win_y1 - res_comp0->win_y0);
         if (l_tile->numcomps >= 3) {
             opj_tcd_resolution_t* res_comp1 = l_tile->comps[1].resolutions +
                                               p_tcd->image->comps[1].resno_decoded;
             opj_tcd_resolution_t* res_comp2 = l_tile->comps[2].resolutions +
                                               p_tcd->image->comps[2].resno_decoded;
             /* testcase 1336.pdf.asan.47.376 */
             if (p_tcd->image->comps[0].resno_decoded !=
                     p_tcd->image->comps[1].resno_decoded ||
                     p_tcd->image->comps[0].resno_decoded !=
                     p_tcd->image->comps[2].resno_decoded ||
                     (OPJ_SIZE_T)(res_comp1->win_x1 - res_comp1->win_x0) *
                     (OPJ_SIZE_T)(res_comp1->win_y1 - res_comp1->win_y0) != l_samples ||
                     (OPJ_SIZE_T)(res_comp2->win_x1 - res_comp2->win_x0) *
                     (OPJ_SIZE_T)(res_comp2->win_y1 - res_comp2->win_y0) != l_samples) {
                 opj_event_msg(p_manager, EVT_ERROR,
                               "Tiles don't all have the same dimension. Skip the MCT step.\n");
                 return OPJ_FALSE;
             }
         }
     }
 
     if (l_tile->numcomps >= 3) {
         if (l_tcp->mct == 2) {
             OPJ_BYTE ** l_data;
 
             if (! l_tcp->m_mct_decoding_matrix) {
                 return OPJ_TRUE;
             }
 
             l_data = (OPJ_BYTE **) opj_malloc(l_tile->numcomps * sizeof(OPJ_BYTE*));
             if (! l_data) {
                 return OPJ_FALSE;
             }
 
             for (i = 0; i < l_tile->numcomps; ++i) {
                 if (p_tcd->whole_tile_decoding) {
                     l_data[i] = (OPJ_BYTE*) l_tile_comp->data;
                 } else {
                     l_data[i] = (OPJ_BYTE*) l_tile_comp->data_win;
                 }
                 ++l_tile_comp;
             }
 
             if (! opj_mct_decode_custom(/* MCT data */
                         (OPJ_BYTE*) l_tcp->m_mct_decoding_matrix,
                         /* size of components */
                         l_samples,
                         /* components */
                         l_data,
                         /* nb of components (i.e. size of pData) */
                         l_tile->numcomps,
                         /* tells if the data is signed */
                         p_tcd->image->comps->sgnd)) {
                 opj_free(l_data);
                 return OPJ_FALSE;
             }
 
             opj_free(l_data);
         } else {
             if (l_tcp->tccps->qmfbid == 1) {
                 if (p_tcd->whole_tile_decoding) {
                     opj_mct_decode(l_tile->comps[0].data,
                                    l_tile->comps[1].data,
                                    l_tile->comps[2].data,
                                    l_samples);
                 } else {
                     opj_mct_decode(l_tile->comps[0].data_win,
                                    l_tile->comps[1].data_win,
                                    l_tile->comps[2].data_win,
                                    l_samples);
                 }
             } else {
                 if (p_tcd->whole_tile_decoding) {
                     opj_mct_decode_real((OPJ_FLOAT32*)l_tile->comps[0].data,
                                         (OPJ_FLOAT32*)l_tile->comps[1].data,
                                         (OPJ_FLOAT32*)l_tile->comps[2].data,
                                         l_samples);
                 } else {
                     opj_mct_decode_real((OPJ_FLOAT32*)l_tile->comps[0].data_win,
                                         (OPJ_FLOAT32*)l_tile->comps[1].data_win,
                                         (OPJ_FLOAT32*)l_tile->comps[2].data_win,
                                         l_samples);
                 }
             }
         }
     } else {
         opj_event_msg(p_manager, EVT_ERROR,
                       "Number of components (%d) is inconsistent with a MCT. Skip the MCT step.\n",
                       l_tile->numcomps);
     }
 
     return OPJ_TRUE;
 }
