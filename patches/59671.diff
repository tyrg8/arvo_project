commit adfe003f518dac098ba9cdabcd6158fa55383710
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Thu Jun 8 18:17:46 2023 +0200

    avcodec/mpegvideo_dec: Add NULL pointer checks to MPV_motion_lowres()
    
    This makes the null pointer checks match mpv_motion_internal()
    
    Fixes: NULL pointer dereference
    Fixes: 59671/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_MPEG1VIDEO_fuzzer-4993004566609920
    Fixes: 59678/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_MPEGVIDEO_fuzzer-4893168991338496
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/mpegvideo_dec.c b/libavcodec/mpegvideo_dec.c
index c87ca77ae6..fcca147cd6 100644
--- a/libavcodec/mpegvideo_dec.c
+++ b/libavcodec/mpegvideo_dec.c
@@ -818,144 +818,147 @@ static inline void chroma_4mv_motion_lowres(MpegEncContext *s,
 /**
  * motion compensation of a single macroblock
  * @param s context
  * @param dest_y luma destination pointer
  * @param dest_cb chroma cb/u destination pointer
  * @param dest_cr chroma cr/v destination pointer
  * @param dir direction (0->forward, 1->backward)
  * @param ref_picture array[3] of pointers to the 3 planes of the reference picture
  * @param pix_op halfpel motion compensation function (average or put normally)
  * the motion vectors are taken from s->mv and the MV type from s->mv_type
  */
 static inline void MPV_motion_lowres(MpegEncContext *s,
                                      uint8_t *dest_y, uint8_t *dest_cb,
                                      uint8_t *dest_cr,
                                      int dir, uint8_t *const *ref_picture,
                                      const h264_chroma_mc_func *pix_op)
 {
     int mx, my;
     int mb_x, mb_y;
     const int lowres  = s->avctx->lowres;
     const int block_s = 8 >>lowres;
 
     mb_x = s->mb_x;
     mb_y = s->mb_y;
 
     switch (s->mv_type) {
     case MV_TYPE_16X16:
         mpeg_motion_lowres(s, dest_y, dest_cb, dest_cr,
                            0, 0, 0,
                            ref_picture, pix_op,
                            s->mv[dir][0][0], s->mv[dir][0][1],
                            2 * block_s, mb_y);
         break;
     case MV_TYPE_8X8:
         mx = 0;
         my = 0;
         for (int i = 0; i < 4; i++) {
             hpel_motion_lowres(s, dest_y + ((i & 1) + (i >> 1) *
                                s->linesize) * block_s,
                                ref_picture[0], 0, 0,
                                (2 * mb_x + (i & 1)) * block_s,
                                (2 * mb_y + (i >> 1)) * block_s,
                                s->width, s->height, s->linesize,
                                s->h_edge_pos >> lowres, s->v_edge_pos >> lowres,
                                block_s, block_s, pix_op,
                                s->mv[dir][i][0], s->mv[dir][i][1]);
 
             mx += s->mv[dir][i][0];
             my += s->mv[dir][i][1];
         }
 
         if (!CONFIG_GRAY || !(s->avctx->flags & AV_CODEC_FLAG_GRAY))
             chroma_4mv_motion_lowres(s, dest_cb, dest_cr, ref_picture,
                                      pix_op, mx, my);
         break;
     case MV_TYPE_FIELD:
         if (s->picture_structure == PICT_FRAME) {
             /* top field */
             mpeg_motion_lowres(s, dest_y, dest_cb, dest_cr,
                                1, 0, s->field_select[dir][0],
                                ref_picture, pix_op,
                                s->mv[dir][0][0], s->mv[dir][0][1],
                                block_s, mb_y);
             /* bottom field */
             mpeg_motion_lowres(s, dest_y, dest_cb, dest_cr,
                                1, 1, s->field_select[dir][1],
                                ref_picture, pix_op,
                                s->mv[dir][1][0], s->mv[dir][1][1],
                                block_s, mb_y);
         } else {
-            if (s->picture_structure != s->field_select[dir][0] + 1 &&
-                s->pict_type != AV_PICTURE_TYPE_B && !s->first_field) {
+            if (   s->picture_structure != s->field_select[dir][0] + 1 && s->pict_type != AV_PICTURE_TYPE_B && !s->first_field
+                || !ref_picture[0]) {
                 ref_picture = s->current_picture_ptr->f->data;
-
             }
             mpeg_motion_lowres(s, dest_y, dest_cb, dest_cr,
                                0, 0, s->field_select[dir][0],
                                ref_picture, pix_op,
                                s->mv[dir][0][0],
                                s->mv[dir][0][1], 2 * block_s, mb_y >> 1);
             }
         break;
     case MV_TYPE_16X8:
         for (int i = 0; i < 2; i++) {
             uint8_t *const *ref2picture;
 
-            if (s->picture_structure == s->field_select[dir][i] + 1 ||
-                s->pict_type == AV_PICTURE_TYPE_B || s->first_field) {
+            if ((s->picture_structure == s->field_select[dir][i] + 1 ||
+                 s->pict_type == AV_PICTURE_TYPE_B || s->first_field) &&
+                ref_picture[0]) {
                 ref2picture = ref_picture;
             } else {
                 ref2picture = s->current_picture_ptr->f->data;
             }
 
             mpeg_motion_lowres(s, dest_y, dest_cb, dest_cr,
                                0, 0, s->field_select[dir][i],
                                ref2picture, pix_op,
                                s->mv[dir][i][0], s->mv[dir][i][1] +
                                2 * block_s * i, block_s, mb_y >> 1);
 
             dest_y  +=  2 * block_s *  s->linesize;
             dest_cb += (2 * block_s >> s->chroma_y_shift) * s->uvlinesize;
             dest_cr += (2 * block_s >> s->chroma_y_shift) * s->uvlinesize;
         }
         break;
     case MV_TYPE_DMV:
         if (s->picture_structure == PICT_FRAME) {
             for (int i = 0; i < 2; i++) {
                 for (int j = 0; j < 2; j++) {
                     mpeg_motion_lowres(s, dest_y, dest_cb, dest_cr,
                                        1, j, j ^ i,
                                        ref_picture, pix_op,
                                        s->mv[dir][2 * i + j][0],
                                        s->mv[dir][2 * i + j][1],
                                        block_s, mb_y);
                 }
                 pix_op = s->h264chroma.avg_h264_chroma_pixels_tab;
             }
         } else {
+            if (!ref_picture[0]) {
+                ref_picture = s->current_picture_ptr->f->data;
+            }
             for (int i = 0; i < 2; i++) {
                 mpeg_motion_lowres(s, dest_y, dest_cb, dest_cr,
                                    0, 0, s->picture_structure != i + 1,
                                    ref_picture, pix_op,
                                    s->mv[dir][2 * i][0],s->mv[dir][2 * i][1],
                                    2 * block_s, mb_y >> 1);
 
                 // after put we make avg of the same block
                 pix_op = s->h264chroma.avg_h264_chroma_pixels_tab;
 
                 // opposite parity is always in the same
                 // frame if this is second field
                 if (!s->first_field) {
                     ref_picture = s->current_picture_ptr->f->data;
                 }
             }
         }
         break;
     default:
         av_assert2(0);
     }
 }
 
 /**
  * find the lowest MB row referenced in the MVs
  */
