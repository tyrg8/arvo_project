commit f49375f28ff22af19d8a259bd21def5e876dc97b
Author: Andreas Rheinhardt <andreas.rheinhardt@outlook.com>
Date:   Fri Oct 21 18:59:36 2022 +0200

    avutil/aes: Don't use out-of-bounds index
    
    Up until now, av_aes_init() uses a->round_key[0].u8 + t
    as dst of memcpy where it is intended for t to greater
    than 16 (u8 is an uint8_t[16]); given that round_key itself
    is an array, it is actually intended for the dst to be
    in a latter round_key member. To do this properly,
    just cast a->round_key to unsigned char*.
    
    This fixes the srtp, aes, aes_ctr, mov-3elist-encrypted,
    mov-frag-encrypted and mov-tenc-only-encrypted
    FATE-tests with (Clang-)UBSan.
    
    Signed-off-by: Andreas Rheinhardt <andreas.rheinhardt@outlook.com>

diff --git a/libavutil/aes.c b/libavutil/aes.c
index 8b78daa782..2f08fb4164 100644
--- a/libavutil/aes.c
+++ b/libavutil/aes.c
@@ -200,75 +200,75 @@ static void init_multbl2(uint32_t tbl[][256], const int c[4],
 // this is based on the reference AES code by Paulo Barreto and Vincent Rijmen
 int av_aes_init(AVAES *a, const uint8_t *key, int key_bits, int decrypt)
 {
     int i, j, t, rconpointer = 0;
     uint8_t tk[8][4];
     int KC = key_bits >> 5;
     int rounds = KC + 6;
     uint8_t log8[256];
     uint8_t alog8[512];
 
     a->crypt = decrypt ? aes_decrypt : aes_encrypt;
 
     if (!enc_multbl[FF_ARRAY_ELEMS(enc_multbl) - 1][FF_ARRAY_ELEMS(enc_multbl[0]) - 1]) {
         j = 1;
         for (i = 0; i < 255; i++) {
             alog8[i] = alog8[i + 255] = j;
             log8[j] = i;
             j ^= j + j;
             if (j > 255)
                 j ^= 0x11B;
         }
         for (i = 0; i < 256; i++) {
             j = i ? alog8[255 - log8[i]] : 0;
             j ^= (j << 1) ^ (j << 2) ^ (j << 3) ^ (j << 4);
             j = (j ^ (j >> 8) ^ 99) & 255;
             inv_sbox[j] = i;
             sbox[i]     = j;
         }
         init_multbl2(dec_multbl, (const int[4]) { 0xe, 0x9, 0xd, 0xb },
                      log8, alog8, inv_sbox);
         init_multbl2(enc_multbl, (const int[4]) { 0x2, 0x1, 0x1, 0x3 },
                      log8, alog8, sbox);
     }
 
     if (key_bits != 128 && key_bits != 192 && key_bits != 256)
         return AVERROR(EINVAL);
 
     a->rounds = rounds;
 
     memcpy(tk, key, KC * 4);
     memcpy(a->round_key[0].u8, key, KC * 4);
 
     for (t = KC * 4; t < (rounds + 1) * 16; t += KC * 4) {
         for (i = 0; i < 4; i++)
             tk[0][i] ^= sbox[tk[KC - 1][(i + 1) & 3]];
         tk[0][0] ^= rcon[rconpointer++];
 
         for (j = 1; j < KC; j++) {
             if (KC != 8 || j != KC >> 1)
                 for (i = 0; i < 4; i++)
                     tk[j][i] ^= tk[j - 1][i];
             else
                 for (i = 0; i < 4; i++)
                     tk[j][i] ^= sbox[tk[j - 1][i]];
         }
 
-        memcpy(a->round_key[0].u8 + t, tk, KC * 4);
+        memcpy((unsigned char*)a->round_key + t, tk, KC * 4);
     }
 
     if (decrypt) {
         for (i = 1; i < rounds; i++) {
             av_aes_block tmp[3];
             tmp[2] = a->round_key[i];
             subshift(&tmp[1], 0, sbox);
             mix(tmp, dec_multbl, 1, 3);
             a->round_key[i] = tmp[0];
         }
     } else {
         for (i = 0; i < (rounds + 1) >> 1; i++)
             FFSWAP(av_aes_block, a->round_key[i], a->round_key[rounds - i]);
     }
 
     return 0;
 }
 
