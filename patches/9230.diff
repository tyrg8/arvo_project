commit 5a560f3f6aa2cbfad957cf6223e50c3b61ef575b
Author: Peter Wu <peter@lekensteyn.nl>
Date:   Sun Jul 8 15:10:15 2018 +0200

    dns: fix off-by-one buffer overflow (write)
    
    "maxname" is the size of the buffer which also includes the "null
    label" (represented by the NUL byte). Do not write this past the end.
    
    Bug: 14955
    Change-Id: I51e2237741807aded7ffb82c178d7d7ce5123f78
    Fixes: v2.9.0rc0-1142-g53e04b621c ("DNS: fix in expand_dns_name")
    Reviewed-on: https://code.wireshark.org/review/28657
    Petri-Dish: Peter Wu <peter@lekensteyn.nl>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Erika Szelleov√° <szelleerika@gmail.com>
    Reviewed-by: Peter Wu <peter@lekensteyn.nl>

diff --git a/epan/dissectors/packet-dns.c b/epan/dissectors/packet-dns.c
index d2ddd6646a..b1e0a1e179 100644
--- a/epan/dissectors/packet-dns.c
+++ b/epan/dissectors/packet-dns.c
@@ -1154,182 +1154,182 @@ static int
 expand_dns_name(tvbuff_t *tvb, int offset, int max_len, int dns_data_offset,
     const guchar **name, guint* name_len)
 {
   int     start_offset    = offset;
   guchar *np;
   int     len             = -1;
   int     pointers_count  = 0;
   int     component_len;
   int     indir_offset;
   int     maxname;
 
   const int min_len = 1;        /* Minimum length of encoded name (for root) */
         /* If we're about to return a value (probably negative) which is less
          * than the minimum length, we're looking at bad data and we're liable
          * to put the dissector into a loop.  Instead we throw an exception */
 
   maxname = MAX_DNAME_LEN;
   np=(guchar *)wmem_alloc(wmem_packet_scope(), maxname);
   *name=np;
   (*name_len) = 0;
 
   for (;;) {
     if (max_len && offset - start_offset > max_len - 1) {
       break;
     }
     component_len = tvb_get_guint8(tvb, offset);
     offset++;
     if (component_len == 0) {
       break;
     }
     switch (component_len & 0xc0) {
 
       case 0x00:
         /* Label */
         if (np != *name) {
           /* Not the first component - put in a '.'. */
           if (maxname > 0) {
             *np++ = '.';
             (*name_len)++;
             maxname--;
           }
         }
         else {
           maxname--;
         }
         while (component_len > 0) {
           if (max_len && offset - start_offset > max_len - 1) {
             THROW(ReportedBoundsError);
           }
           if (maxname > 0) {
             *np++ = tvb_get_guint8(tvb, offset);
             (*name_len)++;
             maxname--;
           }
           component_len--;
           offset++;
         }
         break;
 
       case 0x40:
         /* Extended label (RFC 2673) */
         switch (component_len & 0x3f) {
 
           case 0x01:
             /* Bitstring label */
           {
             int bit_count;
             int label_len;
             int print_len;
 
             bit_count = tvb_get_guint8(tvb, offset);
             offset++;
             label_len = (bit_count - 1) / 8 + 1;
 
             if (maxname > 0) {
-              print_len = g_snprintf(np, maxname + 1, "\\[x");
+              print_len = g_snprintf(np, maxname, "\\[x");
               if (print_len <= maxname) {
                 np      += print_len;
                 maxname -= print_len;
               } else {
                 /* Nothing printed, as there's no room.
                    Suppress all subsequent printing. */
                 maxname = 0;
               }
             }
             while (label_len--) {
               if (maxname > 0) {
-                print_len = g_snprintf(np, maxname + 1, "%02x",
+                print_len = g_snprintf(np, maxname, "%02x",
                                        tvb_get_guint8(tvb, offset));
                 if (print_len <= maxname) {
                   np      += print_len;
                   maxname -= print_len;
                 } else {
                   /* Nothing printed, as there's no room.
                      Suppress all subsequent printing. */
                   maxname = 0;
                 }
               }
               offset++;
             }
             if (maxname > 0) {
-              print_len = g_snprintf(np, maxname + 1, "/%d]", bit_count);
+              print_len = g_snprintf(np, maxname, "/%d]", bit_count);
               if (print_len <= maxname) {
                 np      += print_len;
                 maxname -= print_len;
               } else {
                 /* Nothing printed, as there's no room.
                    Suppress all subsequent printing. */
                 maxname = 0;
               }
             }
           }
           break;
 
           default:
             *name="<Unknown extended label>";
             *name_len = (guint)strlen(*name);
             /* Parsing will probably fail from here on, since the */
             /* label length is unknown... */
             len = offset - start_offset;
             if (len < min_len) {
               THROW(ReportedBoundsError);
             }
             return len;
         }
         break;
 
       case 0x80:
         THROW(ReportedBoundsError);
         break;
 
       case 0xc0:
         /* Pointer. */
         indir_offset = dns_data_offset +
           (((component_len & ~0xc0) << 8) | tvb_get_guint8(tvb, offset));
         offset++;
         pointers_count++;
 
         /* If "len" is negative, we are still working on the original name,
            not something pointed to by a pointer, and so we should set "len"
            to the length of the original name. */
         if (len < 0) {
           len = offset - start_offset;
         }
         /*
          * If we find a pointer to itself, it is a trivial loop. Otherwise if we
          * processed a large number of pointers, assume an indirect loop.
          */
         if (indir_offset == offset + 2 || pointers_count > MAX_DNAME_LEN) {
           *name="<Name contains a pointer that loops>";
           *name_len = (guint)strlen(*name);
           if (len < min_len) {
             THROW(ReportedBoundsError);
           }
           return len;
         }
 
         offset = indir_offset;
         break;   /* now continue processing from there */
     }
   }
 
   // Do we have space for the terminating 0?
   if (maxname > 0) {
     *np = '\0';
   }
   else {
     *name="<Name too long>";
     *name_len = (guint)strlen(*name);
   }
 
   /* If "len" is negative, we haven't seen a pointer, and thus haven't
      set the length, so set it. */
   if (len < 0) {
     len = offset - start_offset;
   }
 
   return len;
 }
 
 /* return the bytes in the tvb consumed by the function. The converted string (that
    can contain null bytes, is written in name and its length in name_len. */
