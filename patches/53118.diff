commit aa3dd0bd29d8e29a6b08ba9c35fa3a07cebbfa0c
Author: DRC <information@libjpeg-turbo.org>
Date:   Tue Nov 15 15:41:07 2022 -0600

    TurboJPEG: Nix unneeded setDecodeDefaults ret val
    
    The return value was inherited from setDecompDefaults() in
    34dca052271f4a75b3c0f7b11a2c5024159628d4, but it was never needed.

diff --git a/turbojpeg.c b/turbojpeg.c
index 5293a895..fd5c0574 100644
--- a/turbojpeg.c
+++ b/turbojpeg.c
@@ -1392,44 +1392,42 @@ DLLEXPORT int tjDecompress(tjhandle handle, unsigned char *jpegBuf,
 }
 
 
-static int setDecodeDefaults(struct jpeg_decompress_struct *dinfo,
-                             int pixelFormat, int subsamp, int flags)
+static void setDecodeDefaults(struct jpeg_decompress_struct *dinfo,
+                              int pixelFormat, int subsamp, int flags)
 {
   int i;
 
   dinfo->scale_num = dinfo->scale_denom = 1;
 
   if (subsamp == TJSAMP_GRAY) {
     dinfo->num_components = dinfo->comps_in_scan = 1;
     dinfo->jpeg_color_space = JCS_GRAYSCALE;
   } else {
     dinfo->num_components = dinfo->comps_in_scan = 3;
     dinfo->jpeg_color_space = JCS_YCbCr;
   }
 
   dinfo->comp_info = (jpeg_component_info *)
     (*dinfo->mem->alloc_small) ((j_common_ptr)dinfo, JPOOL_IMAGE,
                                 dinfo->num_components *
                                 sizeof(jpeg_component_info));
 
   for (i = 0; i < dinfo->num_components; i++) {
     jpeg_component_info *compptr = &dinfo->comp_info[i];
 
     compptr->h_samp_factor = (i == 0) ? tjMCUWidth[subsamp] / 8 : 1;
     compptr->v_samp_factor = (i == 0) ? tjMCUHeight[subsamp] / 8 : 1;
     compptr->component_index = i;
     compptr->component_id = i + 1;
     compptr->quant_tbl_no = compptr->dc_tbl_no =
       compptr->ac_tbl_no = (i == 0) ? 0 : 1;
     dinfo->cur_comp_info[i] = compptr;
   }
   dinfo->data_precision = 8;
   for (i = 0; i < 2; i++) {
     if (dinfo->quant_tbl_ptrs[i] == NULL)
       dinfo->quant_tbl_ptrs[i] = jpeg_alloc_quant_table((j_common_ptr)dinfo);
   }
-
-  return 0;
 }
 
 
@@ -1445,134 +1443,132 @@ static void my_reset_marker_reader(j_decompress_ptr dinfo)
 DLLEXPORT int tjDecodeYUVPlanes(tjhandle handle,
                                 const unsigned char **srcPlanes,
                                 const int *strides, int subsamp,
                                 unsigned char *dstBuf, int width, int pitch,
                                 int height, int pixelFormat, int flags)
 {
   JSAMPROW *row_pointer = NULL;
   JSAMPLE *_tmpbuf[MAX_COMPONENTS];
   JSAMPROW *tmpbuf[MAX_COMPONENTS], *inbuf[MAX_COMPONENTS];
   int i, retval = 0, row, pw0, ph0, pw[MAX_COMPONENTS], ph[MAX_COMPONENTS];
   JSAMPLE *ptr;
   jpeg_component_info *compptr;
   int (*old_read_markers) (j_decompress_ptr);
   void (*old_reset_marker_reader) (j_decompress_ptr);
 
   GET_DINSTANCE(handle);
   this->jerr.stopOnWarning = (flags & TJFLAG_STOPONWARNING) ? TRUE : FALSE;
 
   for (i = 0; i < MAX_COMPONENTS; i++) {
     tmpbuf[i] = NULL;  _tmpbuf[i] = NULL;  inbuf[i] = NULL;
   }
 
   if ((this->init & DECOMPRESS) == 0)
     THROW("tjDecodeYUVPlanes(): Instance has not been initialized for decompression");
 
   if (!srcPlanes || !srcPlanes[0] || subsamp < 0 || subsamp >= NUMSUBOPT ||
       dstBuf == NULL || width <= 0 || pitch < 0 || height <= 0 ||
       pixelFormat < 0 || pixelFormat >= TJ_NUMPF)
     THROW("tjDecodeYUVPlanes(): Invalid argument");
   if (subsamp != TJSAMP_GRAY && (!srcPlanes[1] || !srcPlanes[2]))
     THROW("tjDecodeYUVPlanes(): Invalid argument");
 
   if (setjmp(this->jerr.setjmp_buffer)) {
     /* If we get here, the JPEG code has signaled an error. */
     retval = -1;  goto bailout;
   }
 
   if (pixelFormat == TJPF_CMYK)
     THROW("tjDecodeYUVPlanes(): Cannot decode YUV images into CMYK pixels.");
 
   if (pitch == 0) pitch = width * tjPixelSize[pixelFormat];
   dinfo->image_width = width;
   dinfo->image_height = height;
 
 #ifndef NO_PUTENV
   if (flags & TJFLAG_FORCEMMX) PUTENV_S("JSIMD_FORCEMMX", "1");
   else if (flags & TJFLAG_FORCESSE) PUTENV_S("JSIMD_FORCESSE", "1");
   else if (flags & TJFLAG_FORCESSE2) PUTENV_S("JSIMD_FORCESSE2", "1");
 #endif
 
   dinfo->progressive_mode = dinfo->inputctl->has_multiple_scans = FALSE;
   dinfo->Ss = dinfo->Ah = dinfo->Al = 0;
   dinfo->Se = DCTSIZE2 - 1;
-  if (setDecodeDefaults(dinfo, pixelFormat, subsamp, flags) == -1) {
-    retval = -1;  goto bailout;
-  }
+  setDecodeDefaults(dinfo, pixelFormat, subsamp, flags);
   old_read_markers = dinfo->marker->read_markers;
   dinfo->marker->read_markers = my_read_markers;
   old_reset_marker_reader = dinfo->marker->reset_marker_reader;
   dinfo->marker->reset_marker_reader = my_reset_marker_reader;
   jpeg_read_header(dinfo, TRUE);
   dinfo->marker->read_markers = old_read_markers;
   dinfo->marker->reset_marker_reader = old_reset_marker_reader;
 
   this->dinfo.out_color_space = pf2cs[pixelFormat];
   if (flags & TJFLAG_FASTDCT) this->dinfo.dct_method = JDCT_FASTEST;
   dinfo->do_fancy_upsampling = FALSE;
   dinfo->Se = DCTSIZE2 - 1;
   jinit_master_decompress(dinfo);
   (*dinfo->upsample->start_pass) (dinfo);
 
   pw0 = PAD(width, dinfo->max_h_samp_factor);
   ph0 = PAD(height, dinfo->max_v_samp_factor);
 
   if (pitch == 0) pitch = dinfo->output_width * tjPixelSize[pixelFormat];
 
   if ((row_pointer = (JSAMPROW *)malloc(sizeof(JSAMPROW) * ph0)) == NULL)
     THROW("tjDecodeYUVPlanes(): Memory allocation failure");
   for (i = 0; i < height; i++) {
     if (flags & TJFLAG_BOTTOMUP)
       row_pointer[i] = &dstBuf[(height - i - 1) * (size_t)pitch];
     else
       row_pointer[i] = &dstBuf[i * (size_t)pitch];
   }
   if (height < ph0)
     for (i = height; i < ph0; i++) row_pointer[i] = row_pointer[height - 1];
 
   for (i = 0; i < dinfo->num_components; i++) {
     compptr = &dinfo->comp_info[i];
     _tmpbuf[i] =
       (JSAMPLE *)malloc(PAD(compptr->width_in_blocks * DCTSIZE, 32) *
                         compptr->v_samp_factor + 32);
     if (!_tmpbuf[i])
       THROW("tjDecodeYUVPlanes(): Memory allocation failure");
     tmpbuf[i] = (JSAMPROW *)malloc(sizeof(JSAMPROW) * compptr->v_samp_factor);
     if (!tmpbuf[i])
       THROW("tjDecodeYUVPlanes(): Memory allocation failure");
     for (row = 0; row < compptr->v_samp_factor; row++) {
       unsigned char *_tmpbuf_aligned =
         (unsigned char *)PAD((JUINTPTR)_tmpbuf[i], 32);
 
       tmpbuf[i][row] =
         &_tmpbuf_aligned[PAD(compptr->width_in_blocks * DCTSIZE, 32) * row];
     }
     pw[i] = pw0 * compptr->h_samp_factor / dinfo->max_h_samp_factor;
     ph[i] = ph0 * compptr->v_samp_factor / dinfo->max_v_samp_factor;
     inbuf[i] = (JSAMPROW *)malloc(sizeof(JSAMPROW) * ph[i]);
     if (!inbuf[i])
       THROW("tjDecodeYUVPlanes(): Memory allocation failure");
     ptr = (JSAMPLE *)srcPlanes[i];
     for (row = 0; row < ph[i]; row++) {
       inbuf[i][row] = ptr;
       ptr += (strides && strides[i] != 0) ? strides[i] : pw[i];
     }
   }
 
   if (setjmp(this->jerr.setjmp_buffer)) {
     /* If we get here, the JPEG code has signaled an error. */
     retval = -1;  goto bailout;
   }
 
   for (row = 0; row < ph0; row += dinfo->max_v_samp_factor) {
     JDIMENSION inrow = 0, outrow = 0;
 
     for (i = 0, compptr = dinfo->comp_info; i < dinfo->num_components;
          i++, compptr++)
       jcopy_sample_rows(inbuf[i],
         row * compptr->v_samp_factor / dinfo->max_v_samp_factor, tmpbuf[i], 0,
         compptr->v_samp_factor, pw[i]);
     (dinfo->upsample->upsample) (dinfo, tmpbuf, &inrow,
                                  dinfo->max_v_samp_factor, &row_pointer[row],
                                  &outrow, dinfo->max_v_samp_factor);
   }
   jpeg_abort_decompress(dinfo);
