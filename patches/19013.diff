commit 2c9dc72966276f35f9bf697ee49038c1cdee24bb
Author: Leandro Pereira <leandro@hardinfo.org>
Date:   Tue Nov 19 18:39:33 2019 -0800

    Correctly compare with last_chunk when post-processing template
    
    Thanks to OSS-Fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=19013

diff --git a/src/lib/lwan-template.c b/src/lib/lwan-template.c
index 3d68360c..91553db8 100644
--- a/src/lib/lwan-template.c
+++ b/src/lib/lwan-template.c
@@ -997,96 +997,96 @@ void lwan_tpl_free(struct lwan_tpl *tpl)
 static bool post_process_template(struct parser *parser)
 {
     struct chunk *last_chunk =
         chunk_array_get_elem(&parser->chunks, chunk_array_len(&parser->chunks));
     struct chunk *prev_chunk;
     struct chunk *chunk;
 
     LWAN_ARRAY_FOREACH (&parser->chunks, chunk) {
         if (chunk->action == ACTION_IF_VARIABLE_NOT_EMPTY) {
             for (prev_chunk = chunk;; chunk++) {
-                if (chunk > last_chunk)
+                if (chunk == last_chunk)
                     goto error;
                 if (chunk->action == ACTION_LAST) {
                     lwan_status_error("Internal error: Could not find the end "
                                       "var not empty chunk");
                     return false;
                 }
                 if (chunk->action == ACTION_END_IF_VARIABLE_NOT_EMPTY &&
                     chunk->data == prev_chunk->data)
                     break;
             }
 
             struct chunk_descriptor *cd = malloc(sizeof(*cd));
             if (!cd)
                 lwan_status_critical_perror("malloc");
 
             cd->descriptor = prev_chunk->data;
             cd->chunk = chunk;
             prev_chunk->data = cd;
             prev_chunk->flags &= ~FLAGS_NO_FREE;
 
             chunk = prev_chunk + 1;
         } else if (chunk->action == ACTION_START_ITER) {
             enum flags flags = chunk->flags;
 
             for (prev_chunk = chunk;; chunk++) {
-                if (chunk > last_chunk)
+                if (chunk == last_chunk)
                     goto error;
                 if (chunk->action == ACTION_LAST) {
                     lwan_status_error(
                         "Internal error: Could not find the end iter chunk");
                     return false;
                 }
                 if (chunk->action == ACTION_END_ITER) {
                     size_t start_index = (size_t)chunk->data;
                     size_t prev_index =
                         chunk_array_get_elem_index(&parser->chunks, prev_chunk);
 
                     if (prev_index == start_index) {
                         chunk->flags |= flags;
                         chunk->data =
                             chunk_array_get_elem(&parser->chunks, start_index);
                         break;
                     }
                 }
             }
 
             struct chunk_descriptor *cd = malloc(sizeof(*cd));
             if (!cd)
                 lwan_status_critical_perror("malloc");
 
             cd->descriptor = prev_chunk->data;
             prev_chunk->data = cd;
             prev_chunk->flags &= ~FLAGS_NO_FREE;
 
             if (chunk->action == ACTION_LAST)
                 cd->chunk = chunk;
             else
                 cd->chunk = chunk + 1;
 
             chunk = prev_chunk + 1;
         } else if (chunk->action == ACTION_VARIABLE) {
             struct lwan_var_descriptor *descriptor = chunk->data;
             bool escape = chunk->flags & FLAGS_QUOTE;
 
             if (descriptor->append_to_strbuf == lwan_append_str_to_strbuf) {
                 if (escape)
                     chunk->action = ACTION_VARIABLE_STR_ESCAPE;
                 else
                     chunk->action = ACTION_VARIABLE_STR;
                 chunk->data = (void *)(uintptr_t)descriptor->offset;
             } else if (escape) {
                 lwan_status_error("Variable must be string to be escaped");
                 return false;
             } else if (!descriptor->append_to_strbuf) {
                 lwan_status_error("Invalid variable descriptor");
                 return false;
             }
         } else if (chunk->action == ACTION_LAST) {
             break;
         }
     }
 
     parser->tpl->chunks = parser->chunks;
 
     return true;
