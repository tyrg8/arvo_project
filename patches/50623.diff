commit 872e18f660d3a276fc78dc533ec42c7fe43922a4
Author: Timothy Flynn <trflynn89@pm.me>
Date:   Sun May 7 12:47:38 2023 -0400

    LibWeb: Convert Navigable::navigate's csp_navigation_type to an enum
    
    Some versions of clang will have an issue using a consteval function to
    set the optional parameter's default value. For example, see:
    https://stackoverflow.com/questions/68789984/immediate-function-as-default-function-argument-initializer-in-clang
    
    This doesn't need to be a String anyways, so let's make it an enum.

diff --git a/Userland/Libraries/LibWeb/HTML/Navigable.cpp b/Userland/Libraries/LibWeb/HTML/Navigable.cpp
index 3c75e3a493..006fe0719d 100644
--- a/Userland/Libraries/LibWeb/HTML/Navigable.cpp
+++ b/Userland/Libraries/LibWeb/HTML/Navigable.cpp
@@ -687,213 +687,213 @@ WebIDL::ExceptionOr<void> Navigable::populate_session_history_entry_document(JS:
 // https://html.spec.whatwg.org/multipage/browsing-the-web.html#navigate
 WebIDL::ExceptionOr<void> Navigable::navigate(
     AK::URL const& url,
     JS::NonnullGCPtr<DOM::Document> source_document,
     Variant<Empty, String, POSTResource> document_resource,
     JS::GCPtr<Fetch::Infrastructure::Response> response,
     bool exceptions_enabled,
     HistoryHandlingBehavior history_handling,
-    String csp_navigation_type,
+    CSPNavigationType csp_navigation_type,
     ReferrerPolicy::ReferrerPolicy referrer_policy)
 {
     // 1. Let sourceSnapshotParams be the result of snapshotting source snapshot params given sourceDocument.
     auto source_snapshot_params = SourceSnapshotParams {
         .has_transient_activation = false,
         .sandboxing_flags = source_document->active_sandboxing_flag_set(),
         .allows_downloading = true,
         .fetch_client = source_document->relevant_settings_object(),
         .source_policy_container = source_document->policy_container()
     };
 
     // 2. Let initiatorOriginSnapshot be sourceDocument's origin.
     auto initiator_origin_snapshot = source_document->origin();
 
     // FIXME: 3. If sourceDocument's node navigable is not allowed by sandboxing to navigate navigable given and sourceSnapshotParams, then:
     if constexpr (false) {
         // 1. If exceptionsEnabled is true, then throw a "SecurityError" DOMException.
         if (exceptions_enabled) {
             return WebIDL::SecurityError::create(*vm().current_realm(), "Source document's node navigable is not allowed to navigate"sv);
         }
 
         // 2 Return.
         return {};
     }
 
     // 4. Let navigationId be the result of generating a random UUID.
     String navigation_id = TRY_OR_THROW_OOM(vm(), Crypto::generate_random_uuid());
 
     // FIXME: 5. If the surrounding agent is equal to navigable's active document's relevant agent, then continue these steps.
     //           Otherwise, queue a global task on the navigation and traversal task source given navigable's active window to continue these steps.
 
     // FIXME: 6. If navigable's active document's unload counter is greater than 0,
     //           then invoke WebDriver BiDi navigation failed with a WebDriver BiDi navigation status whose id is navigationId,
     //           status is "canceled", and url is url, and return.
 
     // 7. If any of the following are true:
     //    - url equals navigable's active document's URL;
     //    - url's scheme is "javascript"; or
     //    - navigable's active document's is initial about:blank is true
     if (url.equals(active_document()->url())
         || url.scheme() == "javascript"sv
         || active_document()->is_initial_about_blank()) {
         // then set historyHandling to "replace".
         history_handling = HistoryHandlingBehavior::Replace;
     }
 
     // 8. If all of the following are true:
     //    - documentResource is null;
     //    - response is null;
     //    - url equals navigable's active session history entry's URL with exclude fragments set to true; and
     //    - url's fragment is non-null
     if (document_resource.has<Empty>()
         && !response
         && url.equals(active_session_history_entry()->url, AK::URL::ExcludeFragment::Yes)
         && !url.fragment().is_null()) {
         // 1. Navigate to a fragment given navigable, url, historyHandling, and navigationId.
         TRY(navigate_to_a_fragment(url, history_handling, navigation_id));
 
         // 2. Return.
         return {};
     }
 
     // 9. If navigable's parent is non-null, then set navigable's is delaying load events to true.
     if (parent() != nullptr) {
         set_delaying_load_events(true);
     }
 
     // 10. Let targetBrowsingContext be navigable's active browsing context.
     [[maybe_unused]] auto target_browsing_context = active_browsing_context();
 
     // FIXME: 11. Let targetSnapshotParams be the result of snapshotting target snapshot params given navigable.
 
     // FIXME: 12. Invoke WebDriver BiDi navigation started with targetBrowsingContext, and a new WebDriver BiDi navigation status whose id is navigationId, url is url, and status is "pending".
 
     // 13. If navigable's ongoing navigation is "traversal", then:
     if (ongoing_navigation().has<Traversal>()) {
         // FIXME: 1. Invoke WebDriver BiDi navigation failed with targetBrowsingContext and a new WebDriver BiDi navigation status whose id is navigationId, status is "canceled", and url is url.
 
         // 2. Return.
         return {};
     }
 
     // 14. Set navigable's ongoing navigation to navigationId.
     m_ongoing_navigation = navigation_id;
 
     // 15. If url's scheme is "javascript", then:
     if (url.scheme() == "javascript"sv) {
         // 1. Queue a global task on the navigation and traversal task source given navigable's active window to navigate to a javascript: URL given navigable, url, historyHandling, initiatorOriginSnapshot, and cspNavigationType.
         queue_global_task(Task::Source::NavigationAndTraversal, *active_window(), [this, url, history_handling, initiator_origin_snapshot, csp_navigation_type] {
             (void)navigate_to_a_javascript_url(url, history_handling, initiator_origin_snapshot, csp_navigation_type);
         });
 
         // 2. Return.
         return {};
     }
 
     // 16. In parallel, run these steps:
     Platform::EventLoopPlugin::the().deferred_invoke([this, source_snapshot_params = move(source_snapshot_params), document_resource, url, navigation_id, referrer_policy, initiator_origin_snapshot, response, history_handling] {
         // FIXME: 1. Let unloadPromptCanceled be the result of checking if unloading is user-canceled for navigable's active document's inclusive descendant navigables.
 
         // FIXME: 2. If unloadPromptCanceled is true, or navigable's ongoing navigation is no longer navigationId, then:
 
         // 3. Queue a global task on the navigation and traversal task source given navigable's active window to abort navigable's active document.
         queue_global_task(Task::Source::NavigationAndTraversal, *active_window(), [this] {
             VERIFY(active_document());
             active_document()->abort();
         });
 
         // 4. Let documentState be a new document state with
         //    request referrer policy: referrerPolicy
         //    initiator origin: initiatorOriginSnapshot
         //    resource: documentResource
         //    navigable target name: navigable's target name
         JS::NonnullGCPtr<DocumentState> document_state = *heap().allocate_without_realm<DocumentState>();
         document_state->set_request_referrer_policy(referrer_policy);
         document_state->set_resource(document_resource);
         document_state->set_initiator_origin(initiator_origin_snapshot);
         document_state->set_navigable_target_name(target_name());
 
         // 5. If url is about:blank, then set documentState's origin to documentState's initiator origin.
         if (url == "about:blank"sv) {
             document_state->set_origin(document_state->initiator_origin());
         }
 
         // 6. Otherwise, if url is about:srcdoc, then set documentState's origin to navigable's parent's active document's origin.
         else if (url == "about:srcdoc"sv) {
             document_state->set_origin(parent()->active_document()->origin());
         }
 
         // 7. Let historyEntry be a new session history entry, with its URL set to url and its document state set to documentState.
         JS::NonnullGCPtr<SessionHistoryEntry> history_entry = *heap().allocate_without_realm<SessionHistoryEntry>();
         history_entry->url = url;
         history_entry->document_state = document_state;
 
         // 8. Let navigationParams be null.
         Optional<NavigationParams> navigation_params;
 
         // FIXME: 9. If response is non-null:
         if (response) {
         }
 
         // 10. Attempt to populate the history entry's document
         //     for historyEntry, given navigable, "navigate", sourceSnapshotParams,
         //     targetSnapshotParams, navigationId, navigationParams, cspNavigationType, with allowPOST
         //     set to true and completionSteps set to the following step:
         populate_session_history_entry_document(history_entry, navigation_params, navigation_id, source_snapshot_params, [this, history_entry, history_handling] {
             // https://html.spec.whatwg.org/multipage/browsing-the-web.html#finalize-a-cross-document-navigation
 
             // 1. FIXME: Assert: this is running on navigable's traversable navigable's session history traversal queue.
 
             // 2. Set navigable's is delaying load events to false.
             set_delaying_load_events(false);
 
             // 3. If historyEntry's document is null, then return.
             if (!history_entry->document_state->document())
                 return;
 
             // 4. FIXME: If all of the following are true:
             //    - navigable's parent is null;
             //    - historyEntry's document's browsing context is not an auxiliary browsing context whose opener browsing context is non-null; and
             //    - historyEntry's document's origin is not navigable's active document's origin
             //    then set historyEntry's document state's navigable target name to the empty string.
 
             // 5. Let entryToReplace be navigable's active session history entry if historyHandling is "replace", otherwise null.
             auto entry_to_replace = history_handling == HistoryHandlingBehavior::Replace ? active_session_history_entry() : nullptr;
 
             // 6. Let traversable be navigable's traversable navigable.
             auto traversable = traversable_navigable();
 
             // 7. Let targetStep be null.
             int target_step;
 
             // 8. Let targetEntries be the result of getting session history entries for navigable.
             auto& target_entries = get_session_history_entries();
 
             // 9. If entryToReplace is null, then:
             if (entry_to_replace == nullptr) {
                 // FIXME: 1. Clear the forward session history of traversable.
 
                 // 2. Set targetStep to traversable's current session history step + 1.
                 target_step = traversable->current_session_history_step() + 1;
 
                 // 3. Set historyEntry's step to targetStep.
                 history_entry->step = target_step;
 
                 // 4. Append historyEntry to targetEntries.
                 target_entries.append(move(history_entry));
             } else {
                 // 1. Replace entryToReplace with historyEntry in targetEntries.
                 *(target_entries.find(*entry_to_replace)) = history_entry;
 
                 // 2. Set historyEntry's step to entryToReplace's step.
                 history_entry->step = entry_to_replace->step;
 
                 // 3. Set targetStep to traversable's current session history step.
                 target_step = traversable->current_session_history_step();
             }
 
             // FIXME: 10. Apply the history step targetStep to traversable.
         }).release_value_but_fixme_should_propagate_errors();
     });
 
     return {};
 }
@@ -904,11 +904,11 @@ WebIDL::ExceptionOr<void> Navigable::navigate_to_a_fragment(AK::URL const&, Hist
     TODO();
 }
 
-WebIDL::ExceptionOr<void> Navigable::navigate_to_a_javascript_url(AK::URL const&, HistoryHandlingBehavior, Origin const& initiator_origin, String csp_navigation_type)
+WebIDL::ExceptionOr<void> Navigable::navigate_to_a_javascript_url(AK::URL const&, HistoryHandlingBehavior, Origin const& initiator_origin, CSPNavigationType csp_navigation_type)
 {
     (void)initiator_origin;
     (void)csp_navigation_type;
     TODO();
 }
 
 }
diff --git a/Userland/Libraries/LibWeb/HTML/Navigable.h b/Userland/Libraries/LibWeb/HTML/Navigable.h
index f1b041130c..7a57939cfe 100644
--- a/Userland/Libraries/LibWeb/HTML/Navigable.h
+++ b/Userland/Libraries/LibWeb/HTML/Navigable.h
@@ -15,6 +15,11 @@
 
 namespace Web::HTML {
 
+enum class CSPNavigationType {
+    Other,
+    FormSubmission,
+};
+
 // https://html.spec.whatwg.org/multipage/document-sequences.html#navigable
 class Navigable : public JS::Cell {
     JS_CELL(Navigable, JS::Cell);
@@ -22,60 +27,60 @@ class Navigable : public JS::Cell {
 public:
     virtual ~Navigable() override;
 
     ErrorOr<void> initialize_navigable(JS::NonnullGCPtr<DocumentState> document_state, JS::GCPtr<Navigable> parent);
 
     String const& id() const { return m_id; };
     JS::GCPtr<Navigable> parent() const { return m_parent; };
 
     bool is_closing() const { return m_closing; };
     void set_closing(bool value) { m_closing = value; };
 
     bool is_delaying_load_events() const { return m_delaying_load_events; };
     void set_delaying_load_events(bool value) { m_delaying_load_events = value; };
 
     JS::GCPtr<SessionHistoryEntry> active_session_history_entry() const { return m_active_session_history_entry; };
     JS::GCPtr<SessionHistoryEntry> current_session_history_entry() const { return m_current_session_history_entry; };
 
     Vector<JS::NonnullGCPtr<SessionHistoryEntry>>& get_session_history_entries() const;
 
     JS::GCPtr<DOM::Document> active_document();
     JS::GCPtr<BrowsingContext> active_browsing_context();
     JS::GCPtr<WindowProxy> active_window_proxy();
     JS::GCPtr<Window> active_window();
 
     JS::GCPtr<SessionHistoryEntry> get_the_target_history_entry(int target_step) const;
 
     String target_name() const;
 
     JS::GCPtr<NavigableContainer> container() const;
     void set_container(JS::GCPtr<NavigableContainer>);
 
     JS::GCPtr<TraversableNavigable> traversable_navigable() const;
     JS::GCPtr<TraversableNavigable> top_level_traversable();
 
     static JS::GCPtr<Navigable> navigable_with_active_document(JS::NonnullGCPtr<DOM::Document>);
 
     enum class Traversal {
         Tag
     };
 
     Variant<Empty, Traversal, String> ongoing_navigation() const { return m_ongoing_navigation; }
 
     WebIDL::ExceptionOr<void> populate_session_history_entry_document(JS::GCPtr<SessionHistoryEntry>, Optional<NavigationParams>, Optional<String> navigation_id, SourceSnapshotParams const&, Function<void()>);
 
     WebIDL::ExceptionOr<void> navigate(
         AK::URL const&,
         JS::NonnullGCPtr<DOM::Document> source_document,
         Variant<Empty, String, POSTResource> document_resource = Empty {},
         JS::GCPtr<Fetch::Infrastructure::Response> = nullptr,
         bool exceptions_enabled = false,
         HistoryHandlingBehavior = HistoryHandlingBehavior::Push,
-        String csp_navigation_type = String::from_utf8_short_string("other"sv),
+        CSPNavigationType csp_navigation_type = CSPNavigationType::Other,
         ReferrerPolicy::ReferrerPolicy = ReferrerPolicy::ReferrerPolicy::EmptyString);
 
     WebIDL::ExceptionOr<void> navigate_to_a_fragment(AK::URL const&, HistoryHandlingBehavior, String navigation_id);
 
-    WebIDL::ExceptionOr<void> navigate_to_a_javascript_url(AK::URL const&, HistoryHandlingBehavior, Origin const& initiator_origin, String csp_navigation_type);
+    WebIDL::ExceptionOr<void> navigate_to_a_javascript_url(AK::URL const&, HistoryHandlingBehavior, Origin const& initiator_origin, CSPNavigationType csp_navigation_type);
 
 protected:
     Navigable();
