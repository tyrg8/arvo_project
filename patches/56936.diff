commit 450aa4e580314cdd55733858c72dcd4828a234b0
Author: Harald Welte <laforge@osmocom.org>
Date:   Sun Mar 12 13:19:17 2023 +0100

    packet-gsm_rlp: Don't read beyond captured length when computing FCS
    
    Fix #18902

diff --git a/epan/dissectors/packet-gsm_rlp.c b/epan/dissectors/packet-gsm_rlp.c
index 2f0fd7b9ce..b212dbedcc 100644
--- a/epan/dissectors/packet-gsm_rlp.c
+++ b/epan/dissectors/packet-gsm_rlp.c
@@ -204,62 +204,63 @@ static int
 dissect_gsmrlp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_)
 {
 	int reported_len = tvb_reported_length(tvb);
 	proto_tree *rlp_tree;
 	proto_item *ti;
 	guint8 n_s, n_r;
 
 	/* we currently support the 16bit header of RLP v0 + v1 */
 
 	col_set_str(pinfo->cinfo, COL_PROTOCOL, "GSM-RLP");
 
 	n_s = (tvb_get_guint8(tvb, 0)) >> 3 | ((tvb_get_guint8(tvb, 1) & 1) << 5);
 	n_r = (tvb_get_guint8(tvb, 1) >> 2);
 
 	ti = proto_tree_add_protocol_format(tree, proto_gsmrlp, tvb, 0, reported_len,
 					    "GSM RLP");
 	rlp_tree = proto_item_add_subtree(ti, ett_gsmrlp);
 
 	proto_tree_add_item(rlp_tree, hf_gsmrlp_cr, tvb, 0, 1, ENC_BIG_ENDIAN);
 	proto_tree_add_item(rlp_tree, hf_gsmrlp_pf, tvb, 1, 1, ENC_BIG_ENDIAN);
 	if (n_s == 0x3f) { /* U frame */
 		guint u_ftype;
 		proto_tree_add_uint(rlp_tree, hf_gsmrlp_ftype, tvb, 0, 1, RLP_FT_U);
 		proto_tree_add_item_ret_uint(rlp_tree, hf_gsmrlp_u_ftype, tvb, 1, 1, ENC_BIG_ENDIAN, &u_ftype);
 		if ((n_r & 0x1f) == RLP_U_FT_XID)
 			dissect_gsmrlp_xid(tvb, 2, pinfo, rlp_tree);
 		proto_item_append_text(ti, " U-Frame: %s", val_to_str(u_ftype, rlp_ftype_u_vals, "Unknown 0x%02x"));
 	} else if (n_s == 0x3e) { /* S Frame */
 		guint s_ftype;
 		proto_tree_add_uint(rlp_tree, hf_gsmrlp_ftype, tvb, 0, 1, RLP_FT_S);
 		proto_tree_add_item_ret_uint(rlp_tree, hf_gsmrlp_s_ftype, tvb, 0, 1, ENC_BIG_ENDIAN, &s_ftype);
 		proto_tree_add_uint(rlp_tree, hf_gsmrlp_n_r, tvb, 1, 1, n_r);
 		proto_item_append_text(ti, " S-Frame: %s, N(S): %u, N(R): %u",
 				       val_to_str(s_ftype, rlp_ftype_s_vals, "Unknown 0x%02x"), n_s, n_r);
 	} else { /* IS Frame */
 		tvbuff_t *next_tvb;
 		guint s_ftype;
 		int data_len;
 
 		proto_tree_add_uint(rlp_tree, hf_gsmrlp_ftype, tvb, 0, 1, RLP_FT_IS);
 		proto_tree_add_item_ret_uint(rlp_tree, hf_gsmrlp_s_ftype, tvb, 0, 1, ENC_BIG_ENDIAN, &s_ftype);
 		proto_tree_add_uint(rlp_tree, hf_gsmrlp_n_s, tvb, 0, 2, n_s);
 		proto_tree_add_uint(rlp_tree, hf_gsmrlp_n_r, tvb, 1, 1, n_r);
 		proto_item_append_text(ti, " IS-Frame: %s, N(S): %u, N(R): %u",
 				       val_to_str(s_ftype, rlp_ftype_s_vals, "Unknown 0x%02x"), n_s, n_r);
 
 		/* dispatch user data */
 		data_len = reported_len - 2 /* header */ - 3 /* FCS */;
 		next_tvb = tvb_new_subset_length(tvb, 2, data_len);
 		if (decode_as_l2rcop && l2rcop_handle)
 			call_dissector(l2rcop_handle, next_tvb, pinfo, rlp_tree);
 		else
 			call_data_dissector(next_tvb, pinfo, rlp_tree);
 	}
 
 	/* FCS is always the last 3 bytes of the message */
+	tvb_ensure_bytes_exist(tvb, 0, reported_len - 3);
 	guint32 fcs_computed = rlp_fcs_compute(tvb_get_ptr(tvb, 0, reported_len - 3), reported_len - 3);
 	proto_tree_add_checksum(rlp_tree, tvb, reported_len - 3, hf_gsmrlp_fcs, hf_gsmrlp_fcs_status,
 				&ei_gsmrlp_fcs_bad, pinfo, fcs_computed, ENC_BIG_ENDIAN, PROTO_CHECKSUM_VERIFY);
 
 	return tvb_reported_length(tvb);
 }
