commit 459dca6392fd5ad0e3d3f0ee9930e61bddbf795b
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Fri Mar 30 17:26:06 2018 +0200

    OGRCreateMultiPatch(): prevent invalid geometry conversion. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=7218. Credit to OSS Fuzz. master only

diff --git a/gdal/ogr/ogrpgeogeometry.cpp b/gdal/ogr/ogrpgeogeometry.cpp
index a5abbff420..d435da5c9f 100644
--- a/gdal/ogr/ogrpgeogeometry.cpp
+++ b/gdal/ogr/ogrpgeogeometry.cpp
@@ -1404,199 +1404,202 @@ id,WKT
 OGRErr OGRCreateMultiPatch( const OGRGeometry *poGeomConst,
                             int bAllowSHPTTriangle,
                             int& nParts,
                             int*& panPartStart,
                             int*& panPartType,
                             int& nPoints,
                             OGRRawPoint*& poPoints,
                             double*& padfZ )
 {
     const OGRwkbGeometryType eType = wkbFlatten(poGeomConst->getGeometryType());
     if( eType != wkbPolygon && eType != wkbTriangle &&
         eType != wkbMultiPolygon && eType != wkbMultiSurface &&
         eType != wkbTIN &&
         eType != wkbPolyhedralSurface && eType != wkbGeometryCollection )
     {
         return OGRERR_UNSUPPORTED_OPERATION;
     }
 
     std::unique_ptr<OGRGeometry> poGeom(poGeomConst->clone());
     poGeom->closeRings();
 
     OGRMultiPolygon *poMPoly = nullptr;
     std::unique_ptr<OGRGeometry> poGeomToDelete;
     if( eType == wkbMultiPolygon )
         poMPoly = poGeom->toMultiPolygon();
     else
     {
         poGeomToDelete = std::unique_ptr<OGRGeometry>(
                 OGRGeometryFactory::forceToMultiPolygon(poGeom->clone()));
-        if( poGeomToDelete.get() )
+        if( poGeomToDelete.get() &&
+            wkbFlatten(poGeomToDelete->getGeometryType()) == wkbMultiPolygon )
+        {
             poMPoly = poGeomToDelete->toMultiPolygon();
+        }
     }
     if( poMPoly == nullptr )
     {
         return OGRERR_UNSUPPORTED_OPERATION;
     }
 
     nParts = 0;
     panPartStart = nullptr;
     panPartType = nullptr;
     nPoints = 0;
     poPoints = nullptr;
     padfZ = nullptr;
     int nBeginLastPart = 0;
     for( int j = 0; j < poMPoly->getNumGeometries(); j++ )
     {
         OGRPolygon *poPoly = poMPoly->getGeometryRef(j)->toPolygon();
         int nRings = poPoly->getNumInteriorRings() + 1;
 
         // Skip empties.
         if( poPoly->IsEmpty() )
             continue;
 
         OGRLinearRing *poRing = poPoly->getExteriorRing();
         if( nRings == 1 && poRing->getNumPoints() == 4 )
         {
             int nCorrectedPoints = nPoints;
             if( nParts > 0 && poPoints != nullptr &&
                 panPartType[nParts-1] == SHPP_OUTERRING &&
                 nPoints - panPartStart[nParts-1] == 4 )
             {
                 nCorrectedPoints--;
             }
 
             if( nParts > 0 && poPoints != nullptr &&
                 ((panPartType[nParts-1] == SHPP_TRIANGLES &&
                   nPoints - panPartStart[nParts-1] == 3) ||
                  (panPartType[nParts-1] == SHPP_OUTERRING &&
                   nPoints - panPartStart[nParts-1] == 4) ||
                  panPartType[nParts-1] == SHPP_TRIFAN) &&
                 poRing->getX(0) == poPoints[nBeginLastPart].x &&
                 poRing->getY(0) == poPoints[nBeginLastPart].y &&
                 poRing->getZ(0) == padfZ[nBeginLastPart] &&
                 poRing->getX(1) == poPoints[nCorrectedPoints-1].x &&
                 poRing->getY(1) == poPoints[nCorrectedPoints-1].y &&
                 poRing->getZ(1) == padfZ[nCorrectedPoints-1] )
             {
                 nPoints  = nCorrectedPoints;
                 panPartType[nParts-1] = SHPP_TRIFAN;
 
                 poPoints = static_cast<OGRRawPoint *>(
                     CPLRealloc(poPoints, (nPoints + 1) * sizeof(OGRRawPoint)));
                 padfZ = static_cast<double *>(
                     CPLRealloc(padfZ, (nPoints + 1) * sizeof(double)));
                 poPoints[nPoints].x = poRing->getX(2);
                 poPoints[nPoints].y = poRing->getY(2);
                 padfZ[nPoints] = poRing->getZ(2);
                 nPoints++;
             }
             else if( nParts > 0 && poPoints != nullptr &&
                 ((panPartType[nParts-1] == SHPP_TRIANGLES &&
                   nPoints - panPartStart[nParts-1] == 3)||
                  (panPartType[nParts-1] == SHPP_OUTERRING &&
                   nPoints - panPartStart[nParts-1] == 4) ||
                  panPartType[nParts-1] == SHPP_TRISTRIP) &&
                 poRing->getX(0) == poPoints[nCorrectedPoints-2].x &&
                 poRing->getY(0) == poPoints[nCorrectedPoints-2].y &&
                 poRing->getZ(0) == padfZ[nCorrectedPoints-2] &&
                 poRing->getX(1) == poPoints[nCorrectedPoints-1].x &&
                 poRing->getY(1) == poPoints[nCorrectedPoints-1].y &&
                 poRing->getZ(1) == padfZ[nCorrectedPoints-1] )
             {
                 nPoints  = nCorrectedPoints;
                 panPartType[nParts-1] = SHPP_TRISTRIP;
 
                 poPoints = static_cast<OGRRawPoint *>(
                     CPLRealloc(poPoints, (nPoints + 1) * sizeof(OGRRawPoint)));
                 padfZ = static_cast<double *>(
                     CPLRealloc(padfZ, (nPoints + 1) * sizeof(double)));
                 poPoints[nPoints].x = poRing->getX(2);
                 poPoints[nPoints].y = poRing->getY(2);
                 padfZ[nPoints] = poRing->getZ(2);
                 nPoints++;
             }
             else
             {
                 if( nParts == 0 ||
                     panPartType[nParts-1] != SHPP_TRIANGLES ||
                     !bAllowSHPTTriangle )
                 {
                     nBeginLastPart = nPoints;
 
                     panPartStart = static_cast<int *>(
                         CPLRealloc(panPartStart, (nParts + 1) * sizeof(int)));
                     panPartType = static_cast<int *>(
                         CPLRealloc(panPartType, (nParts + 1) * sizeof(int)));
                     panPartStart[nParts] = nPoints;
                     panPartType[nParts] = bAllowSHPTTriangle ? SHPP_TRIANGLES :
                                                                SHPP_OUTERRING;
                     nParts++;
                 }
 
                 poPoints = static_cast<OGRRawPoint *>(
                     CPLRealloc(poPoints, (nPoints + 4) * sizeof(OGRRawPoint)));
                 padfZ = static_cast<double *>(
                     CPLRealloc(padfZ, (nPoints + 4) * sizeof(double)));
                 for( int i = 0; i < 4; i++ )
                 {
                     poPoints[nPoints+i].x = poRing->getX(i);
                     poPoints[nPoints+i].y = poRing->getY(i);
                     padfZ[nPoints+i] = poRing->getZ(i);
                 }
                 nPoints += bAllowSHPTTriangle ? 3 : 4;
             }
         }
         else
         {
             panPartStart = static_cast<int *>(
                 CPLRealloc(panPartStart, (nParts + nRings) * sizeof(int)));
             panPartType = static_cast<int *>(
                 CPLRealloc(panPartType, (nParts + nRings) * sizeof(int)));
 
             for( int i = 0; i < nRings; i++ )
             {
                 panPartStart[nParts + i] = nPoints;
                 if( i == 0 )
                 {
                     poRing = poPoly->getExteriorRing();
                     panPartType[nParts + i] = SHPP_OUTERRING;
                 }
                 else
                 {
                     poRing = poPoly->getInteriorRing(i-1);
                     panPartType[nParts + i] = SHPP_INNERRING;
                 }
                 poPoints = static_cast<OGRRawPoint *>(
                     CPLRealloc(poPoints,
                                (nPoints +
                                 poRing->getNumPoints()) * sizeof(OGRRawPoint)));
                 padfZ = static_cast<double *>(
                     CPLRealloc(padfZ,
                                (nPoints +
                                 poRing->getNumPoints()) * sizeof(double)));
                 for( int k = 0; k < poRing->getNumPoints(); k++ )
                 {
                     poPoints[nPoints+k].x = poRing->getX(k);
                     poPoints[nPoints+k].y = poRing->getY(k);
                     padfZ[nPoints+k] = poRing->getZ(k);
                 }
                 nPoints += poRing->getNumPoints();
             }
 
             nParts += nRings;
         }
     }
 
     if( nParts == 1 && panPartType[0] == SHPP_OUTERRING &&
         nPoints == 4 )
     {
         panPartType[0] = SHPP_TRIFAN;
         nPoints = 3;
     }
 
     return OGRERR_NONE;
 }
 
 /************************************************************************/
 /*                   OGRWriteMultiPatchToShapeBin()                     */
 /************************************************************************/
