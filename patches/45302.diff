commit e715243aa51fa38a89d35ea377d267600217e192
Author: Luis Díaz Más <piponazo@gmail.com>
Date:   Thu Mar 31 19:12:59 2022 +0200

    Fix integer overflow #2179

diff --git a/src/jpgimage.cpp b/src/jpgimage.cpp
index 01b22f33d..efe0050d6 100644
--- a/src/jpgimage.cpp
+++ b/src/jpgimage.cpp
@@ -141,64 +141,67 @@ int Photoshop::locatePreviewIrb(const byte* pPsData, size_t sizePsData, const by
 DataBuf Photoshop::setIptcIrb(const byte* pPsData, size_t sizePsData, const IptcData& iptcData) {
 #ifdef EXIV2_DEBUG_MESSAGES
   std::cerr << "IRB block at the beginning of Photoshop::setIptcIrb\n";
   if (sizePsData == 0)
     std::cerr << "  None.\n";
   else
     hexdump(std::cerr, pPsData, sizePsData);
 #endif
   const byte* record = pPsData;
   uint32_t sizeIptc = 0;
   uint32_t sizeHdr = 0;
   DataBuf rc;
   // Safe to call with zero psData.size_
   if (0 > Photoshop::locateIptcIrb(pPsData, sizePsData, &record, &sizeHdr, &sizeIptc)) {
     return rc;
   }
   Blob psBlob;
   const auto sizeFront = static_cast<size_t>(record - pPsData);
   // Write data before old record.
   if (sizePsData > 0 && sizeFront > 0) {
     append(psBlob, pPsData, sizeFront);
   }
   // Write new iptc record if we have it
   DataBuf rawIptc = IptcParser::encode(iptcData);
   if (!rawIptc.empty()) {
     std::array<byte, 12> tmpBuf;
     std::copy_n(Photoshop::irbId_[0], 4, tmpBuf.data());
     us2Data(tmpBuf.data() + 4, iptc_, bigEndian);
     tmpBuf[6] = 0;
     tmpBuf[7] = 0;
     ul2Data(tmpBuf.data() + 8, static_cast<uint32_t>(rawIptc.size()), bigEndian);
     append(psBlob, tmpBuf.data(), 12);
     append(psBlob, rawIptc.c_data(), rawIptc.size());
     // Data is padded to be even (but not included in size)
     if (rawIptc.size() & 1)
       psBlob.push_back(0x00);
   }
   // Write existing stuff after record,
   // skip the current and all remaining IPTC blocks
   size_t pos = sizeFront;
-  while (0 == Photoshop::locateIptcIrb(pPsData + pos, sizePsData - pos, &record, &sizeHdr, &sizeIptc)) {
+  long nextSizeData = Safe::add<long>(static_cast<long>(sizePsData), -static_cast<long>(pos));
+  enforce(nextSizeData >= 0, ErrorCode::kerCorruptedMetadata);
+  while (0 == Photoshop::locateIptcIrb(pPsData + pos, nextSizeData, &record, &sizeHdr, &sizeIptc)) {
     const auto newPos = static_cast<size_t>(record - pPsData);
-    // Copy data up to the IPTC IRB
-    if (newPos > pos) {
+    if (newPos > pos) {  // Copy data up to the IPTC IRB
       append(psBlob, pPsData + pos, newPos - pos);
     }
-    // Skip the IPTC IRB
-    pos = newPos + sizeHdr + sizeIptc + (sizeIptc & 1);
+    pos = newPos + sizeHdr + sizeIptc + (sizeIptc & 1);  // Skip the IPTC IRB
+    nextSizeData = Safe::add<long>(static_cast<long>(sizePsData), -static_cast<long>(pos));
+    enforce(nextSizeData >= 0, ErrorCode::kerCorruptedMetadata);
   }
   if (pos < sizePsData) {
     append(psBlob, pPsData + pos, sizePsData - pos);
   }
+
   // Data is rounded to be even
   if (!psBlob.empty())
     rc = DataBuf(&psBlob[0], psBlob.size());
 #ifdef EXIV2_DEBUG_MESSAGES
   std::cerr << "IRB block at the end of Photoshop::setIptcIrb\n";
   if (rc.empty())
     std::cerr << "  None.\n";
   else
     hexdump(std::cerr, rc.c_data(), rc.size());
 #endif
   return rc;
 }
