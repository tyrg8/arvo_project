commit e7acaa887997f529182c6cbcd29f144af8b453ba
Author: Jonathan Hui <jonhui@google.com>
Date:   Mon Feb 25 18:57:36 2019 -0800

    [mesh-forwarder] do not allow eviction of message being processed (#3629)
    
    Processing a message may trigger an Address Solicit message to be sent.
    Because Thread control messages have higher priority, it is possible for the
    Address Solicit message to evict the data message that caused the generation
    of the Address Solicit message.
    
    This commit present a message that's being processed from being evicted.
    
    Credit to OSS-Fuzz.

diff --git a/src/core/common/message.hpp b/src/core/common/message.hpp
index 1649411e7..a4712fc3e 100644
--- a/src/core/common/message.hpp
+++ b/src/core/common/message.hpp
@@ -73,55 +73,56 @@ class PriorityQueue;
 /**
  * This structure contains metdata about a Message.
  *
  */
 struct MessageInfo
 {
     enum
     {
         kListAll       = 0, ///< Identifies the all messages list (maintained by the MessagePool).
         kListInterface = 1, ///< Identifies the list for per-interface message queue.
         kNumLists      = 2, ///< Number of lists.
     };
 
     Message *    mNext[kNumLists]; ///< A pointer to the next Message in a doubly linked list.
     Message *    mPrev[kNumLists]; ///< A pointer to the previous Message in a doubly linked list.
     MessagePool *mMessagePool;     ///< Identifies the message pool for this message.
     union
     {
         MessageQueue * mMessage;  ///< Identifies the message queue (if any) where this message is queued.
         PriorityQueue *mPriority; ///< Identifies the priority queue (if any) where this message is queued.
     } mQueue;                     ///< Identifies the queue (if any) where this message is queued.
 
     uint16_t    mReserved;    ///< Number of header bytes reserved for the message.
     uint16_t    mLength;      ///< Number of bytes within the message.
     uint16_t    mOffset;      ///< A byte offset within the message.
     uint16_t    mDatagramTag; ///< The datagram tag used for 6LoWPAN fragmentation.
     RssAverager mRssAverager; ///< The averager maintaining the received signal strength (RSS) average.
 
     uint8_t mChildMask[8]; ///< A bit-vector to indicate which sleepy children need to receive this.
     uint8_t mTimeout;      ///< Seconds remaining before dropping the message.
     int8_t  mInterfaceId;  ///< The interface ID.
     union
     {
         uint16_t mPanId;   ///< Used for MLE Discover Request and Response messages.
         uint8_t  mChannel; ///< Used for MLE Announce.
     } mPanIdChannel;       ///< Used for MLE Discover Request, Response, and Announce messages.
 
     uint8_t mType : 2;         ///< Identifies the type of message.
     uint8_t mSubType : 4;      ///< Identifies the message sub type.
     bool    mDirectTx : 1;     ///< Used to indicate whether a direct transmission is required.
     bool    mLinkSecurity : 1; ///< Indicates whether or not link security is enabled.
     uint8_t mPriority : 2;     ///< Identifies the message priority level (lower value is higher priority).
     bool    mInPriorityQ : 1;  ///< Indicates whether the message is queued in normal or priority queue.
     bool    mTxSuccess : 1;    ///< Indicates whether the direct tx of the message was successful.
+    bool    mDoNotEvict : 1;   ///< Indicates whether or not this message may be evicted.
 #if OPENTHREAD_CONFIG_ENABLE_TIME_SYNC
     bool    mTimeSync : 1;      ///< Indicates whether the message is also used for time sync purpose.
     uint8_t mTimeSyncSeq;       ///< The time sync sequence.
     int64_t mNetworkTimeOffset; ///< The time offset to the Thread network time, in microseconds.
 #endif
 };
 
 /**
  * This class represents a Message buffer.
  *
  */
@@ -208,573 +209,590 @@ class Message : public Buffer
 public:
     enum
     {
         kTypeIp6         = 0, ///< A full uncompressed IPv6 packet
         kType6lowpan     = 1, ///< A 6lowpan frame
         kTypeMacDataPoll = 2, ///< A MAC data poll message
         kTypeSupervision = 3, ///< A child supervision frame.
     };
 
     enum
     {
         kSubTypeNone                   = 0, ///< None
         kSubTypeMleAnnounce            = 1, ///< MLE Announce
         kSubTypeMleDiscoverRequest     = 2, ///< MLE Discover Request
         kSubTypeMleDiscoverResponse    = 3, ///< MLE Discover Response
         kSubTypeJoinerEntrust          = 4, ///< Joiner Entrust
         kSubTypeMplRetransmission      = 5, ///< MPL next retransmission message
         kSubTypeMleGeneral             = 6, ///< General MLE
         kSubTypeJoinerFinalizeResponse = 7, ///< Joiner Finalize Response
         kSubTypeMleChildUpdateRequest  = 8, ///< MLE Child Update Request
         kSubTypeMleDataResponse        = 9, ///< MLE Data Response
     };
 
     enum
     {
         kPriorityLow    = OT_MESSAGE_PRIORITY_LOW,      ///< Low priority level.
         kPriorityNormal = OT_MESSAGE_PRIORITY_NORMAL,   ///< Normal priority level.
         kPriorityHigh   = OT_MESSAGE_PRIORITY_HIGH,     ///< High priority level.
         kPriorityNet    = OT_MESSAGE_PRIORITY_HIGH + 1, ///< Network Control priority level.
 
         kNumPriorities = 4, ///< Number of priority levels.
     };
 
     /**
      * This method frees this message buffer.
      *
      */
     void Free(void);
 
     /**
      * This method returns a pointer to the next message in the same interface list.
      *
      * @returns A pointer to the next message in the same interface list or NULL if at the end of the list.
      *
      */
     Message *GetNext(void) const;
 
     /**
      * This method returns the number of bytes in the message.
      *
      * @returns The number of bytes in the message.
      */
     uint16_t GetLength(void) const { return mBuffer.mHead.mInfo.mLength; }
 
     /**
      * This method sets the number of bytes in the message.
      *
      * @param[in]  aLength  Requested number of bytes in the message.
      *
      * @retval OT_ERROR_NONE     Successfully set the length of the message.
      * @retval OT_ERROR_NO_BUFS  Failed to grow the size of the message because insufficient buffers were available.
      *
      */
     otError SetLength(uint16_t aLength);
 
     /**
      * This method returns the number of buffers in the message.
      *
      */
     uint8_t GetBufferCount(void) const;
 
     /**
      * This method returns the byte offset within the message.
      *
      * @returns A byte offset within the message.
      *
      */
     uint16_t GetOffset(void) const { return mBuffer.mHead.mInfo.mOffset; }
 
     /**
      * This method moves the byte offset within the message.
      *
      * @param[in]  aDelta  The number of bytes to move the current offset, which may be positive or negative.
      *
      * @retval OT_ERROR_NONE          Successfully moved the byte offset.
      * @retval OT_ERROR_INVALID_ARGS  The resulting byte offset is not within the existing message.
      *
      */
     otError MoveOffset(int aDelta);
 
     /**
      * This method sets the byte offset within the message.
      *
      * @param[in]  aOffset  The number of bytes to move the current offset, which may be positive or negative.
      *
      * @retval OT_ERROR_NONE          Successfully moved the byte offset.
      * @retval OT_ERROR_INVALID_ARGS  The requested byte offset is not within the existing message.
      *
      */
     otError SetOffset(uint16_t aOffset);
 
     /**
      * This method returns the type of the message.
      *
      * @returns The type of the message.
      *
      */
     uint8_t GetType(void) const { return mBuffer.mHead.mInfo.mType; }
 
     /**
      * This method sets the message type.
      *
      * @param[in]  aType  The message type.
      *
      */
     void SetType(uint8_t aType) { mBuffer.mHead.mInfo.mType = aType; }
 
     /**
      * This method returns the sub type of the message.
      *
      * @returns The sub type of the message.
      *
      */
     uint8_t GetSubType(void) const { return mBuffer.mHead.mInfo.mSubType; }
 
     /**
      * This method sets the message sub type.
      *
      * @param[in]  aSubType  The message sub type.
      *
      */
     void SetSubType(uint8_t aSubType) { mBuffer.mHead.mInfo.mSubType = aSubType; }
 
     /**
      * This method returns whether or not the message is of MLE subtype.
      *
      * @retval TRUE   If message is of MLE subtype.
      * @retval FALSE  If message is not of MLE subtype.
      *
      */
     bool IsSubTypeMle(void) const;
 
     /**
      * This method returns the message priority level.
      *
      * @returns The priority level associated with this message.
      *
      */
     uint8_t GetPriority(void) const { return mBuffer.mHead.mInfo.mPriority; }
 
     /**
      * This method sets the messages priority.
      * If the message is already queued in a priority queue, changing the priority ensures to
      * update the message in the associated queue.
      *
      * @param[in]  aPriority  The message priority level.
      *
      * @retval OT_ERROR_NONE           Successfully set the priority for the message.
      * @retval OT_ERROR_INVALID_ARGS   Priority level is not invalid.
      *
      */
     otError SetPriority(uint8_t aPriority);
 
     /**
      * This method prepends bytes to the front of the message.
      *
      * On success, this method grows the message by @p aLength bytes.
      *
      * @param[in]  aBuf     A pointer to a data buffer.
      * @param[in]  aLength  The number of bytes to prepend.
      *
      * @retval OT_ERROR_NONE     Successfully prepended the bytes.
      * @retval OT_ERROR_NO_BUFS  Not enough reserved bytes in the message.
      *
      */
     otError Prepend(const void *aBuf, uint16_t aLength);
 
     /**
      * This method removes header bytes from the message.
      *
      * @param[in]  aLength  Number of header bytes to remove.
      *
      */
     void RemoveHeader(uint16_t aLength);
 
     /**
      * This method appends bytes to the end of the message.
      *
      * On success, this method grows the message by @p aLength bytes.
      *
      * @param[in]  aBuf     A pointer to a data buffer.
      * @param[in]  aLength  The number of bytes to append.
      *
      * @retval OT_ERROR_NONE     Successfully appended the bytes.
      * @retval OT_ERROR_NO_BUFS  Insufficient available buffers to grow the message.
      *
      */
     otError Append(const void *aBuf, uint16_t aLength);
 
     /**
      * This method reads bytes from the message.
      *
      * @param[in]  aOffset  Byte offset within the message to begin reading.
      * @param[in]  aLength  Number of bytes to read.
      * @param[in]  aBuf     A pointer to a data buffer.
      *
      * @returns The number of bytes read.
      *
      */
     uint16_t Read(uint16_t aOffset, uint16_t aLength, void *aBuf) const;
 
     /**
      * This method writes bytes to the message.
      *
      * @param[in]  aOffset  Byte offset within the message to begin writing.
      * @param[in]  aLength  Number of bytes to write.
      * @param[in]  aBuf     A pointer to a data buffer.
      *
      * @returns The number of bytes written.
      *
      */
     int Write(uint16_t aOffset, uint16_t aLength, const void *aBuf);
 
     /**
      * This method copies bytes from one message to another.
      *
      * @param[in] aSourceOffset       Byte offset within the source message to begin reading.
      * @param[in] aDestinationOffset  Byte offset within the destination message to begin writing.
      * @param[in] aLength             Number of bytes to copy.
      * @param[in] aMessage            Message to copy to.
      *
      * @returns The number of bytes copied.
      *
      */
     int CopyTo(uint16_t aSourceOffset, uint16_t aDestinationOffset, uint16_t aLength, Message &aMessage) const;
 
     /**
      * This method creates a copy of the message.
      *
      * It allocates the new message from the same message pool as the original one and copies @p aLength octets
      * of the payload. The `Type`, `SubType`, `LinkSecurity`, `Offset`, `InterfaceId`, and `Priority` fields on the
      * cloned message are also copied from the original one.
      *
      * @param[in] aLength  Number of payload bytes to copy.
      *
      * @returns A pointer to the message or NULL if insufficient message buffers are available.
      *
      */
     Message *Clone(uint16_t aLength) const;
 
     /**
      * This method creates a copy of the message.
      *
      * It allocates the new message from the same message pool as the original one and copies the entire payload. The
      * `Type`, `SubType`, `LinkSecurity`, `Offset`, `InterfaceId`, and `Priority` fields on the cloned message are also
      * copied from the original one.
      *
      * @returns A pointer to the message or NULL if insufficient message buffers are available.
      *
      */
     Message *Clone(void) const { return Clone(GetLength()); };
 
     /**
      * This method returns the datagram tag used for 6LoWPAN fragmentation.
      *
      * @returns The 6LoWPAN datagram tag.
      *
      */
     uint16_t GetDatagramTag(void) const { return mBuffer.mHead.mInfo.mDatagramTag; }
 
     /**
      * This method sets the datagram tag used for 6LoWPAN fragmentation.
      *
      * @param[in]  aTag  The 6LoWPAN datagram tag.
      *
      */
     void SetDatagramTag(uint16_t aTag) { mBuffer.mHead.mInfo.mDatagramTag = aTag; }
 
     /**
      * This method returns whether or not the message forwarding is scheduled for the child.
      *
      * @param[in]  aChildIndex  The index into the child table.
      *
      * @retval TRUE   If the message is scheduled to be forwarded to the child.
      * @retval FALSE  If the message is not scheduled to be forwarded to the child.
      *
      */
     bool GetChildMask(uint8_t aChildIndex) const;
 
     /**
      * This method unschedules forwarding of the message to the child.
      *
      * @param[in]  aChildIndex  The index into the child table.
      *
      */
     void ClearChildMask(uint8_t aChildIndex);
 
     /**
      * This method schedules forwarding of the message to the child.
      *
      * @param[in]  aChildIndex  The index into the child table.
      *
      */
     void SetChildMask(uint8_t aChildIndex);
 
     /**
      * This method returns whether or not the message forwarding is scheduled for at least one child.
      *
      * @retval TRUE   If message forwarding is scheduled for at least one child.
      * @retval FALSE  If message forwarding is not scheduled for any child.
      *
      */
     bool IsChildPending(void) const;
 
     /**
      * This method returns the IEEE 802.15.4 Destination PAN ID.
      *
      * @note Only use this when sending MLE Discover Request or Response messages.
      *
      * @returns The IEEE 802.15.4 Destination PAN ID.
      *
      */
     uint16_t GetPanId(void) const { return mBuffer.mHead.mInfo.mPanIdChannel.mPanId; }
 
     /**
      * This method sets the IEEE 802.15.4 Destination PAN ID.
      *
      * @note Only use this when sending MLE Discover Request or Response messages.
      *
      * @param[in]  aPanId  The IEEE 802.15.4 Destination PAN ID.
      *
      */
     void SetPanId(uint16_t aPanId) { mBuffer.mHead.mInfo.mPanIdChannel.mPanId = aPanId; }
 
     /**
      * This method returns the IEEE 802.15.4 Channel to use for transmission.
      *
      * @note Only use this when sending MLE Announce messages.
      *
      * @returns The IEEE 802.15.4 Channel to use for transmission.
      *
      */
     uint8_t GetChannel(void) const { return mBuffer.mHead.mInfo.mPanIdChannel.mChannel; }
 
     /**
      * This method sets the IEEE 802.15.4 Channel to use for transmission.
      *
      * @note Only use this when sending MLE Announce messages.
      *
      * @param[in]  aChannel  The IEEE 802.15.4 Channel to use for transmission.
      *
      */
     void SetChannel(uint8_t aChannel) { mBuffer.mHead.mInfo.mPanIdChannel.mChannel = aChannel; }
 
     /**
      * This method returns the timeout used for 6LoWPAN reassembly.
      *
      * @returns The time remaining in seconds.
      *
      */
     uint8_t GetTimeout(void) const { return mBuffer.mHead.mInfo.mTimeout; }
 
     /**
      * This method sets the timeout used for 6LoWPAN reassembly.
      *
      * @param[in]  aTimeout  The timeout value.
      *
      */
     void SetTimeout(uint8_t aTimeout) { mBuffer.mHead.mInfo.mTimeout = aTimeout; }
 
     /**
      * This method decrements the timeout.
      *
      */
     void DecrementTimeout(void) { mBuffer.mHead.mInfo.mTimeout--; }
 
     /**
      * This method returns the interface ID.
      *
      * @returns The interface ID.
      *
      */
     int8_t GetInterfaceId(void) const { return mBuffer.mHead.mInfo.mInterfaceId; }
 
     /**
      * This method sets the interface ID.
      *
      * @param[in]  aInterfaceId  The interface ID value.
      *
      */
     void SetInterfaceId(int8_t aInterfaceId) { mBuffer.mHead.mInfo.mInterfaceId = aInterfaceId; }
 
     /**
      * This method returns whether or not message forwarding is scheduled for direct transmission.
      *
      * @retval TRUE   If message forwarding is scheduled for direct transmission.
      * @retval FALSE  If message forwarding is not scheduled for direct transmission.
      *
      */
     bool GetDirectTransmission(void) const { return mBuffer.mHead.mInfo.mDirectTx; }
 
     /**
      * This method unschedules forwarding using direct transmission.
      *
      */
     void ClearDirectTransmission(void) { mBuffer.mHead.mInfo.mDirectTx = false; }
 
     /**
      * This method schedules forwarding using direct transmission.
      *
      */
     void SetDirectTransmission(void) { mBuffer.mHead.mInfo.mDirectTx = true; }
 
     /**
-     * This methods indicates whether the direct transmission of message was successful.
+     * This method indicates whether the direct transmission of message was successful.
      *
      * @retval TRUE   If direct transmission of message was successful (all fragments were delivered and acked).
      * @retval FALSE  If direct transmission of message failed (at least one fragment failed).
      *
      */
     bool GetTxSuccess(void) const { return mBuffer.mHead.mInfo.mTxSuccess; }
 
     /**
-     * This methods sets whether the direct transmission of message was successful.
+     * This method sets whether the direct transmission of message was successful.
      *
      * @param[in] aTxSuccess   TRUE if the direct transmission is successful, FALSE otherwise (i.e., at least one
      *                         fragment transmission failed).
      *
      */
     void SetTxSuccess(bool aTxSuccess) { mBuffer.mHead.mInfo.mTxSuccess = aTxSuccess; }
 
+    /**
+     * This method indicates whether the message may be evicted.
+     *
+     * @retval TRUE   If the message must not be evicted.
+     * @retval FALSE  If the message may be evicted.
+     *
+     */
+    bool GetDoNotEvict(void) const { return mBuffer.mHead.mInfo.mDoNotEvict; }
+
+    /**
+     * This method sets whether the message may be evicted.
+     *
+     * @param[in]  aDoNotEvict  TRUE if the message may not be evicted, FALSE otherwise.
+     *
+     */
+    void SetDoNotEvict(bool aDoNotEvict) { mBuffer.mHead.mInfo.mDoNotEvict = aDoNotEvict; }
+
     /**
      * This method indicates whether or not link security is enabled for the message.
      *
      * @retval TRUE   If link security is enabled.
      * @retval FALSE  If link security is not enabled.
      *
      */
     bool IsLinkSecurityEnabled(void) const { return mBuffer.mHead.mInfo.mLinkSecurity; }
 
     /**
      * This method sets whether or not link security is enabled for the message.
      *
      * @param[in]  aEnabled  TRUE if link security is enabled, FALSE otherwise.
      *
      */
     void SetLinkSecurityEnabled(bool aEnabled) { mBuffer.mHead.mInfo.mLinkSecurity = aEnabled; }
 
     /**
      * This method updates the average RSS (Received Signal Strength) associated with the message by adding the given
      * RSS value to the average. Note that a message can be composed of multiple 802.15.4 data frame fragments each
      * received with a different signal strength.
      *
      * @param[in] aRss A new RSS value (in dBm) to be added to average.
      *
      */
     void AddRss(int8_t aRss) { mBuffer.mHead.mInfo.mRssAverager.Add(aRss); }
 
     /**
      * This method returns the average RSS (Received Signal Strength) associated with the message.
      *
      * @returns The current average RSS value (in dBm) or OT_RADIO_RSSI_INVALID if no average is available.
      *
      */
     int8_t GetAverageRss(void) const { return mBuffer.mHead.mInfo.mRssAverager.GetAverage(); }
 
     /**
      * This method returns a const reference to RssAverager of the message.
      *
      * @returns A const reference to the RssAverager of the message.
      *
      */
     const RssAverager &GetRssAverager(void) const { return mBuffer.mHead.mInfo.mRssAverager; }
 
     /**
      * This static method updates a checksum.
      *
      * @param[in]  aChecksum  The checksum value to update.
      * @param[in]  aValue     The 16-bit value to update @p aChecksum with.
      *
      * @returns The updated checksum.
      *
      */
     static uint16_t UpdateChecksum(uint16_t aChecksum, uint16_t aValue);
 
     /**
      * This static method updates a checksum.
      *
      * @param[in]  aChecksum  The checksum value to update.
      * @param[in]  aBuf       A pointer to a buffer.
      * @param[in]  aLength    The number of bytes in @p aBuf.
      *
      * @returns The updated checksum.
      *
      */
     static uint16_t UpdateChecksum(uint16_t aChecksum, const void *aBuf, uint16_t aLength);
 
     /**
      * This method is used to update a checksum value.
      *
      * @param[in]  aChecksum  Initial checksum value.
      * @param[in]  aOffset    Byte offset within the message to begin checksum computation.
      * @param[in]  aLength    Number of bytes to compute the checksum over.
      *
      * @retval The updated checksum value.
      *
      */
     uint16_t UpdateChecksum(uint16_t aChecksum, uint16_t aOffset, uint16_t aLength) const;
 
     /**
      * This method returns a pointer to the message queue (if any) where this message is queued.
      *
      * @returns A pointer to the message queue or NULL if not in any message queue.
      *
      */
     MessageQueue *GetMessageQueue(void) const
     {
         return (!mBuffer.mHead.mInfo.mInPriorityQ) ? mBuffer.mHead.mInfo.mQueue.mMessage : NULL;
     }
 
 #if OPENTHREAD_CONFIG_ENABLE_TIME_SYNC
     /**
      * This method indicates whether or not the message is also used for time sync purpose.
      *
      * @retval TRUE   If the message is also used for time sync purpose.
      * @retval FALSE  If the message is not used for time sync purpose.
      *
      */
     bool IsTimeSync(void) const { return mBuffer.mHead.mInfo.mTimeSync; }
 
     /**
      * This method sets whether or not the message is also used for time sync purpose.
      *
      * @param[in]  aEnabled  TRUE if the message is also used for time sync purpose, FALSE otherwise.
      *
      */
     void SetTimeSync(bool aEnabled) { mBuffer.mHead.mInfo.mTimeSync = aEnabled; }
 
     /**
      * This method sets the offset to network time.
      *
      * @param[in]  aNetworkTimeOffset  The offset to network time.
      *
      */
     void SetNetworkTimeOffset(int64_t aNetworkTimeOffset)
     {
         mBuffer.mHead.mInfo.mNetworkTimeOffset = aNetworkTimeOffset;
     }
 
     /**
      * This method gets the offset to network time.
      *
      * @returns  The offset to network time.
      *
      */
     int64_t GetNetworkTimeOffset(void) const { return mBuffer.mHead.mInfo.mNetworkTimeOffset; }
 
     /**
      * This method sets the time sync sequence.
      *
      * @param[in]  aTimeSyncSeq  The time sync sequence.
      *
      */
     void SetTimeSyncSeq(uint8_t aTimeSyncSeq) { mBuffer.mHead.mInfo.mTimeSyncSeq = aTimeSyncSeq; }
 
     /**
      * This method gets the time sync sequence.
      *
      * @returns  The time sync sequence.
      *
      */
     uint8_t GetTimeSyncSeq(void) const { return mBuffer.mHead.mInfo.mTimeSyncSeq; }
 #endif // OPENTHREAD_CONFIG_ENABLE_TIME_SYNC
diff --git a/src/core/thread/mesh_forwarder.cpp b/src/core/thread/mesh_forwarder.cpp
index f4d12bf85..c20f9cc3c 100644
--- a/src/core/thread/mesh_forwarder.cpp
+++ b/src/core/thread/mesh_forwarder.cpp
@@ -226,64 +226,70 @@ exit:
 Message *MeshForwarder::GetDirectTransmission(void)
 {
     Message *curMessage, *nextMessage;
     otError  error = OT_ERROR_NONE;
 
     for (curMessage = mSendQueue.GetHead(); curMessage; curMessage = nextMessage)
     {
-        nextMessage = curMessage->GetNext();
-
         if (curMessage->GetDirectTransmission() == false)
         {
+            nextMessage = curMessage->GetNext();
             continue;
         }
 
+        curMessage->SetDoNotEvict(true);
+
         switch (curMessage->GetType())
         {
         case Message::kTypeIp6:
             error = UpdateIp6Route(*curMessage);
 
             if (curMessage->GetSubType() == Message::kSubTypeMleDiscoverRequest)
             {
                 error = PrepareDiscoverRequest();
             }
 
             break;
 
         case Message::kTypeMacDataPoll:
             error = PrepareDataPoll();
             break;
 
 #if OPENTHREAD_FTD
 
         case Message::kType6lowpan:
             error = UpdateMeshRoute(*curMessage);
             break;
 
 #endif
 
         default:
             error = OT_ERROR_DROP;
             break;
         }
 
+        curMessage->SetDoNotEvict(false);
+
+        // the next message may have been evicted during processing (e.g. due to Address Solicit)
+        nextMessage = curMessage->GetNext();
+
         switch (error)
         {
         case OT_ERROR_NONE:
             ExitNow();
 
 #if OPENTHREAD_FTD
 
         case OT_ERROR_ADDRESS_QUERY:
             mSendQueue.Dequeue(*curMessage);
             mResolvingQueue.Enqueue(*curMessage);
             continue;
 
 #endif
 
         default:
             mSendQueue.Dequeue(*curMessage);
             LogMessage(kMessageDrop, *curMessage, NULL, error);
             curMessage->Free();
             continue;
         }
     }
diff --git a/src/core/thread/mesh_forwarder_ftd.cpp b/src/core/thread/mesh_forwarder_ftd.cpp
index 95d9ba679..3a0b50a62 100644
--- a/src/core/thread/mesh_forwarder_ftd.cpp
+++ b/src/core/thread/mesh_forwarder_ftd.cpp
@@ -238,29 +238,30 @@ void MeshForwarder::UpdateIndirectMessages(void)
 otError MeshForwarder::EvictMessage(uint8_t aPriority)
 {
     otError  error = OT_ERROR_NOT_FOUND;
     Message *message;
 
     VerifyOrExit((message = mSendQueue.GetTail()) != NULL);
 
     if (message->GetPriority() < aPriority)
     {
+        VerifyOrExit(!message->GetDoNotEvict());
         RemoveMessage(*message);
         ExitNow(error = OT_ERROR_NONE);
     }
     else
     {
         while (aPriority <= Message::kPriorityNet)
         {
             for (message = mSendQueue.GetHeadForPriority(aPriority); message && (message->GetPriority() == aPriority);
                  message = message->GetNext())
             {
                 if (message->IsChildPending())
                 {
                     RemoveMessage(*message);
                     ExitNow(error = OT_ERROR_NONE);
                 }
             }
 
             aPriority++;
         }
     }
