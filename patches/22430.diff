commit ae2fa0be65833e7598ef5e31c2f419c52ec26ad5
Author: Albert Astals Cid <aacid@kde.org>
Date:   Sat May 23 13:03:38 2020 +0200

    cpp: Use push back instead of [] direct access
    
    Otherwise asking for tb_font_info->glyph_to_cache_index.size() always
    returns 0

diff --git a/cpp/poppler-page.cpp b/cpp/poppler-page.cpp
index 8e005ee8..b0b75242 100644
--- a/cpp/poppler-page.cpp
+++ b/cpp/poppler-page.cpp
@@ -393,102 +393,102 @@ std::string text_box::get_font_name(int i) const
 std::vector<text_box> page::text_list(int opt_flag) const
 {
     std::vector<text_box>  output_list;
 
     /* config values are same with Qt5 Page::TextList() */
     auto output_dev = std::make_unique<TextOutputDev>(
 	nullptr, /* char* fileName */
 	false,   /* bool physLayoutA */
 	0,       /* double fixedPitchA */
 	false,   /* bool rawOrderA */
 	false    /* bool append */
     );
 
     /*
      * config values are same with Qt5 Page::TextList(),
      * but rotation is fixed to zero.
      * Few people use non-zero values.
      */
     d->doc->doc->displayPageSlice(output_dev.get(),
                                   d->index + 1,           /* page */
                                   72, 72, 0,              /* hDPI, vDPI, rot */
                                   false, false, false,    /* useMediaBox, crop, printing */
                                   -1, -1, -1, -1,         /* sliceX, sliceY, sliceW, sliceH */
                                   nullptr, nullptr,       /* abortCheckCbk(), abortCheckCbkData */
                                   nullptr, nullptr,       /* annotDisplayDecideCbk(), annotDisplayDecideCbkData */
                                   true);                  /* copyXRef */
 
     if (std::unique_ptr< TextWordList > word_list{output_dev->makeWordList()}) {
 
         output_list.reserve(word_list->getLength());
         for (int i = 0; i < word_list->getLength(); i ++) {
             TextWord *word = word_list->get(i);
 
             std::unique_ptr<GooString> gooWord{word->getText()};
             ustring ustr = ustring::from_utf8(gooWord->c_str());
 
             double xMin, yMin, xMax, yMax;
             word->getBBox(&xMin, &yMin, &xMax, &yMax);
 
             text_box tb{new text_box_data{
                 ustr,
                 {xMin, yMin, xMax-xMin, yMax-yMin},
                 word->getRotation(),
                 {},
                 word->hasSpaceAfter() == true,
                 nullptr
             }};
 
             std::unique_ptr<text_box_font_info_data> tb_font_info = nullptr;
             if (opt_flag & page::text_list_include_font) {
                 d->init_font_info_cache();
 
                 std::unique_ptr<text_box_font_info_data> tb_font{new text_box_font_info_data{
                     word->getFontSize(), // double font_size
                     {},                  // std::vector<text_box::writing_mode> wmodes;
                     d->font_info_cache,  // std::vector<font_info> font_info_cache;
                     {}                   // std::vector<int> glyph_to_cache_index;
                 }};
 
                 tb_font_info = std::move(tb_font);
             };
 
             tb.m_data->char_bboxes.reserve(word->getLength());
             for (int j = 0; j < word->getLength(); j ++) {
                 word->getCharBBox(j, &xMin, &yMin, &xMax, &yMax);
                 tb.m_data->char_bboxes.emplace_back(xMin, yMin, xMax-xMin, yMax-yMin);
             }
 
             if (tb_font_info && d->font_info_cache_initialized) {
                 tb_font_info->glyph_to_cache_index.reserve(word->getLength());
                 for (int j = 0; j < word->getLength(); j++) {
                     const TextFontInfo* cur_text_font_info = word->getFontInfo(j);
 
                     // filter-out the invalid WMode value here.
                     switch (cur_text_font_info->getWMode()) {
                     case 0:
                         tb_font_info->wmodes.push_back(text_box::horizontal_wmode);
                         break;
                     case 1:
                         tb_font_info->wmodes.push_back(text_box::vertical_wmode);
                         break;
                     default:
                         tb_font_info->wmodes.push_back(text_box::invalid_wmode);
                     };
 
-                    tb_font_info->glyph_to_cache_index[j] = -1;
+                    tb_font_info->glyph_to_cache_index.push_back(-1);
                     for (size_t k = 0; k < tb_font_info->font_info_cache.size(); k++) {
                         if (cur_text_font_info->matches(&(tb_font_info->font_info_cache[k].d->ref))) {
                             tb_font_info->glyph_to_cache_index[j] = k;
                             break;
                         }
                     }
                 }
                 tb.m_data->text_box_font = std::move(tb_font_info);
             }
 
             output_list.push_back(std::move(tb));
         }
     }
 
     return output_list;
 }
