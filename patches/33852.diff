commit 70728b49e266e2e71fe69d675d117a2b30435bdb
Author: Ali Mohammad Pur <mpfard@serenityos.org>
Date:   Sat May 1 12:44:09 2021 +0430

    Shell: Move the heredocs vector to a local value before processing it
    
    Otherwise we would end up trying to parse the same heredoc entry, if it
    contained a sequence terminated by a newline.
    e.g. `<<-x\n$({` would attempt to read a heredoc entry after `x`, and
    then after `{` while inside the first heredoc entry.
    To make this work, we can simply empty the instance vector and keep the
    state on the stack.
    Issue found through oss-fuzz:
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=33852

diff --git a/Userland/Shell/Parser.cpp b/Userland/Shell/Parser.cpp
index 7d980909df..410b633eda 100644
--- a/Userland/Shell/Parser.cpp
+++ b/Userland/Shell/Parser.cpp
@@ -1982,96 +1982,96 @@ RefPtr<AST::Node> Parser::parse_heredoc_initiation_record()
 
 bool Parser::parse_heredoc_entries()
 {
+    auto heredocs = move(m_heredoc_initiations);
+    m_heredoc_initiations.clear();
     // Try to parse heredoc entries, as reverse recorded in the initiation records
-    for (auto& record : m_heredoc_initiations) {
+    for (auto& record : heredocs) {
         auto rule_start = push_start();
         if (m_rule_start_offsets.size() > max_allowed_nested_rule_depth) {
             record.node->set_is_syntax_error(*create<AST::SyntaxError>(String::formatted("Expression nested too deep (max allowed is {})", max_allowed_nested_rule_depth)));
             continue;
         }
         bool found_key = false;
         if (!record.interpolate) {
             // Since no interpolation is allowed, just read lines until we hit the key
             Optional<Offset> last_line_offset;
             for (;;) {
                 if (at_end())
                     break;
                 if (peek() == '\n')
                     consume();
                 last_line_offset = current_position();
                 auto line = consume_while(is_not('\n'));
                 if (peek() == '\n')
                     consume();
                 if (line.trim_whitespace() == record.end) {
                     found_key = true;
                     break;
                 }
             }
 
             if (!last_line_offset.has_value())
                 last_line_offset = current_position();
             // Now just wrap it in a StringLiteral and set it as the node's contents
             auto node = create<AST::StringLiteral>(m_input.substring_view(rule_start->offset, last_line_offset->offset - rule_start->offset));
             if (!found_key)
                 node->set_is_syntax_error(*create<AST::SyntaxError>(String::formatted("Expected to find the heredoc key '{}', but found Eof", record.end), true));
             record.node->set_contents(move(node));
         } else {
             // Interpolation is allowed, so we're going to read doublequoted string innards
             // until we find a line that contains the key
             auto end_condition = move(m_end_condition);
             found_key = false;
             set_end_condition([this, end = record.end, &found_key] {
                 if (found_key)
                     return true;
                 auto offset = current_position();
                 auto cond = move(m_end_condition);
                 ScopeGuard guard {
                     [&] {
                         m_end_condition = move(cond);
                     }
                 };
                 if (peek() == '\n') {
                     consume();
                     auto line = consume_while(is_not('\n'));
                     if (peek() == '\n')
                         consume();
                     if (line.trim_whitespace() == end) {
                         restore_to(offset.offset, offset.line);
                         found_key = true;
                         return true;
                     }
                 }
                 restore_to(offset.offset, offset.line);
                 return false;
             });
 
             auto expr = parse_doublequoted_string_inner();
             set_end_condition(move(end_condition));
 
             if (found_key) {
                 auto offset = current_position();
                 if (peek() == '\n')
                     consume();
                 auto line = consume_while(is_not('\n'));
                 if (peek() == '\n')
                     consume();
                 if (line.trim_whitespace() != record.end)
                     restore_to(offset.offset, offset.line);
             }
 
             if (!expr && found_key) {
                 expr = create<AST::StringLiteral>("");
             } else if (!expr) {
                 expr = create<AST::SyntaxError>(String::formatted("Expected to find a valid string inside a heredoc (with end key '{}')", record.end), true);
             } else if (!found_key) {
                 expr->set_is_syntax_error(*create<AST::SyntaxError>(String::formatted("Expected to find the heredoc key '{}'", record.end), true));
             }
 
             record.node->set_contents(create<AST::DoubleQuotedString>(move(expr)));
         }
     }
-
-    m_heredoc_initiations.clear();
     return true;
 }
 
