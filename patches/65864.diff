commit 2767ec54e11ac516e4a2233f183c61843d9789f0
Author: John Reiser <jreiser@BitWagon.com>
Date:   Sat Jan 27 13:06:59 2024 -0800

    more checking of PackUnix::p_info at unpack
    
    https://github.com/upx/upx/issues/781
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65864
            modified:   p_unix.cpp

diff --git a/src/p_unix.cpp b/src/p_unix.cpp
index bbc30b0b..ee08e751 100644
--- a/src/p_unix.cpp
+++ b/src/p_unix.cpp
@@ -602,106 +602,111 @@ static unsigned umax(unsigned a, unsigned b) {return (a < b) ? b : a;}
 void PackUnix::unpack(OutputFile *fo)
 {
     b_info bhdr;
     unsigned c_adler = upx_adler32(nullptr, 0);
     unsigned u_adler = upx_adler32(nullptr, 0);
 
     if (ph.version <= 11) {
         szb_info = sizeof(bhdr.sz_unc) + sizeof(bhdr.sz_cpr);  // old style
     }
     // defaults for ph.version == 8
     unsigned orig_file_size = 0;
     blocksize = 512 * 1024;
 
     fi->seek(overlay_offset, SEEK_SET);
     if (ph.version > 8)
     {
         p_info hbuf;
         fi->readx(&hbuf, sizeof(hbuf));
         orig_file_size = get_te32(&hbuf.p_filesize);
         blocksize = get_te32(&hbuf.p_blocksize);
+        off_t max_inflated = file_size * 273;  // zlib limit (256 + 16 + 1)
 
-        if (file_size > (off_t)orig_file_size || blocksize > orig_file_size)
+        if (max_inflated < orig_file_size
+        ||  max_inflated < blocksize
+        ||  file_size > (off_t)orig_file_size
+        ||  blocksize > orig_file_size) {
             throwCantUnpack("file header corrupted");
+        }
     }
     else
     {
         // skip 4 bytes (program id)
         fi->seek(4, SEEK_CUR);
     }
 
     if ((int)(blocksize + OVERHEAD) < 0)
         throwCantUnpack("blocksize corrupted");
     ibuf.alloc(blocksize + OVERHEAD);
 
     // decompress blocks
     total_in = 0;
     total_out = 0;
     memset(&bhdr, 0, sizeof(bhdr));
     for (;;)
     {
 #define buf ibuf
         int i;
         unsigned sz_unc, sz_cpr;
 
         fi->readx(&bhdr, szb_info);
         ph.u_len = sz_unc = get_te32(&bhdr.sz_unc);
         ph.c_len = sz_cpr = get_te32(&bhdr.sz_cpr);
 
         if (sz_unc == 0)                   // uncompressed size 0 -> EOF
         {
             // note: must reload sz_cpr as magic is always stored le32
             sz_cpr = get_le32(&bhdr.sz_cpr);
             if (sz_cpr != UPX_MAGIC_LE32)  // sz_cpr must be h->magic
                 throwCompressedDataViolation();
             break;
         }
         if (sz_unc <= 0 || sz_cpr <= 0)
             throwCompressedDataViolation();
         if (sz_cpr > sz_unc || sz_unc > blocksize)
             throwCompressedDataViolation();
 
         // Compressed output has control bytes such as the 32-bit
         // first flag bits of NRV_d32, the 5-byte info of LZMA, etc.
         // Fuzzers may try sz_cpr shorter than possible.
         // Use some OVERHEAD for safety.
         i = blocksize + OVERHEAD - umax(12, sz_cpr);
         if (i < 0)
             throwCantUnpack("corrupt b_info");
         fi->readx(buf+i, sz_cpr);
         // update checksum of compressed data
         c_adler = upx_adler32(buf + i, sz_cpr, c_adler);
         // decompress
         if (sz_cpr < sz_unc) {
             decompress(buf+i, buf, false);
             if (0!=bhdr.b_ftid) {
                 Filter ft(ph.level);
                 ft.init(bhdr.b_ftid);
                 ft.cto = bhdr.b_cto8;
                 ft.unfilter(buf, sz_unc);
             }
             i = 0;
         }
         // update checksum of uncompressed data
         u_adler = upx_adler32(buf + i, sz_unc, u_adler);
         total_in  += sz_cpr;
         total_out += sz_unc;
         // write block
         if (fo)
             fo->write(buf + i, sz_unc);
 #undef buf
     }
 
     // update header with totals
     ph.c_len = total_in;
     ph.u_len = total_out;
 
     // all bytes must be written
     if (ph.version > 8 && total_out != orig_file_size)
         throwEOFException();
 
     // finally test the checksums
     if (ph.c_adler != c_adler || ph.u_adler != u_adler)
         throwChecksumError();
 }
 
 /* vim:set ts=4 sw=4 et: */
