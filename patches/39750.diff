commit 362b34afc2584237175a2a592b4741df7104faec
Author: Eric Blankenhorn <eric@wolfssl.com>
Date:   Wed Oct 20 12:59:30 2021 -0500

    Fix fuzzing test issues

diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index 4b4ab24..3da38ac 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -280,41 +280,42 @@ static int MqttClient_RespList_Find(MqttClient *client,
 #ifdef WOLFMQTT_V5
 static int Handle_Props(MqttClient* client, MqttProp* props, byte use_cb)
 {
     int rc = MQTT_CODE_SUCCESS;
 
     /* If no properties, just return */
     if (props != NULL) {
     #ifdef WOLFMQTT_PROPERTY_CB
         /* Check for properties set by the server */
         if ((use_cb == 1) && (client->property_cb != NULL)) {
             /* capture error if returned */
             int rc_err = client->property_cb(client, props,
                     client->property_ctx);
             if (rc_err < 0) {
                 rc = rc_err;
             }
         }
     #else
         (void)client;
+        (void)use_cb;
     #endif
         /* Free the properties */
         MqttProps_Free(props);
     }
     return rc;
 }
 #endif
 
 
 /* Returns length decoded or error (as negative) */
 /*! \brief      Take a received MQTT packet and try and decode it
  *  \param      client       MQTT client context
  *  \param      rx_buf       Incoming buffer data
  *  \param      rx_len       Incoming buffer length
  *  \param      p_decode     Opaque pointer to packet structure based on type
  *  \param      ppacket_type Decoded packet type
  *  \param      ppacket_qos  Decoded QoS level
  *  \param      ppacket_id   Decoded packet id
 
  *  \return     Returns length decoded or error (as negative) MQTT_CODE_ERROR_*
                 (see enum MqttPacketResponseCodes)
  */
diff --git a/src/mqtt_packet.c b/src/mqtt_packet.c
index 4802bc8..b10a6c8 100755
--- a/src/mqtt_packet.c
+++ b/src/mqtt_packet.c
@@ -357,279 +357,289 @@ int MqttEncode_Data(byte *buf, const byte *data, word16 data_len)
 #ifdef WOLFMQTT_V5
 /* Returns the (positive) number of bytes encoded, or a (negative) error code.
    If pointer to buf is NULL, then only calculate the length of properties. */
 int MqttEncode_Props(MqttPacketType packet, MqttProp* props, byte* buf)
 {
     int rc = 0, tmp;
     MqttProp* cur_prop = props;
     int num_props = 0;
 
     /* TODO: Check against max size. Sometimes all properties are not
              expected to be added */
     // TODO: Validate property type is allowed for packet type
 
     /* loop through the list properties */
-    while (cur_prop != NULL)
+    while ((cur_prop != NULL) && (rc >= 0))
     {
         /* TODO: validate packet type */
         (void)packet;
 
         /* Encode the Identifier */
         tmp = MqttEncode_Vbi(buf, (word32)cur_prop->type);
         rc += tmp;
         if (buf != NULL) {
             buf += tmp;
         }
 
         switch (gPropMatrix[cur_prop->type].data)
         {
             case MQTT_DATA_TYPE_BYTE:
             {
                 if (buf != NULL) {
                     *(buf++) = cur_prop->data_byte;
                 }
                 rc++;
                 break;
             }
             case MQTT_DATA_TYPE_SHORT:
             {
                 tmp = MqttEncode_Num(buf, cur_prop->data_short);
                 rc += tmp;
                 if (buf != NULL) {
                     buf += tmp;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_INT:
             {
                 tmp = MqttEncode_Int(buf, cur_prop->data_int);
                 rc += tmp;
                 if (buf != NULL) {
                     buf += tmp;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_STRING:
             {
                 tmp = MqttEncode_String(buf,
                         (const char*)cur_prop->data_str.str);
                 rc += tmp;
                 if (buf != NULL) {
                     buf += tmp;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_VAR_INT:
             {
                 tmp = MqttEncode_Vbi(buf, cur_prop->data_int);
                 rc += tmp;
                 if (buf != NULL) {
                     buf += tmp;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_BINARY:
             {
                 tmp = MqttEncode_Data(buf, (const byte*)cur_prop->data_bin.data,
                         cur_prop->data_bin.len);
                 rc += tmp;
                 if (buf != NULL) {
                     buf += tmp;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_STRING_PAIR:
             {
                 /* String is prefixed with a Two Byte Integer length field that
                    gives the number of bytes */
                 tmp = MqttEncode_String(buf,
                         (const char*)cur_prop->data_str.str);
                 rc += tmp;
                 if (buf != NULL) {
                     buf += tmp;
                 }
 
                 tmp = MqttEncode_String(buf,
                         (const char*)cur_prop->data_str2.str);
                 rc += tmp;
                 if (buf != NULL) {
                     buf += tmp;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_NONE:
             default:
             {
-                /* Do nothing */
+                /* Invalid property data type */
+                rc = MQTT_CODE_ERROR_PROPERTY;
                 break;
             }
         }
 
         num_props++;
 
         cur_prop = cur_prop->next;
     }
 
     return rc;
 }
 
 /* Returns the (positive) number of bytes decoded, or a (negative) error code.
    Allocates MqttProp structures for all properties.
    Head of list is stored in props. */
 int MqttDecode_Props(MqttPacketType packet, MqttProp** props, byte* pbuf,
         word32 buf_len, word32 prop_len)
 {
     /* TODO: Validate property type is allowed for packet type */
 
     int rc = 0;
     int tmp;
     MqttProp* cur_prop;
     byte* buf = pbuf;
 
     *props = NULL;
 
     while ((prop_len > 0) && (rc >= 0))
     {
         /* Allocate a structure and add to head. */
         cur_prop = MqttProps_Add(props);
         if (cur_prop == NULL) {
             rc = MQTT_CODE_ERROR_MEMORY;
             break;
         }
 
         /* Decode the Identifier */
         tmp = MqttDecode_Vbi(buf, (word32*)&cur_prop->type,
                 (word32)(buf_len - (buf - pbuf)));
         if (tmp < 0) {
             return tmp;
         }
         buf += tmp;
         rc += (int)tmp;
         prop_len -= tmp;
 
         /* TODO: validate packet type */
         (void)packet;
 
         if (cur_prop->type >= sizeof(gPropMatrix) / sizeof(gPropMatrix[0])) {
             rc = MQTT_CODE_ERROR_PROPERTY;
             break;
         }
 
         switch (gPropMatrix[cur_prop->type].data)
         {
             case MQTT_DATA_TYPE_BYTE:
             {
                 cur_prop->data_byte = *buf++;
                 tmp++;
                 rc++;
                 prop_len--;
                 break;
             }
             case MQTT_DATA_TYPE_SHORT:
             {
                 tmp = MqttDecode_Num(buf, &cur_prop->data_short);
                 buf += tmp;
                 rc += (int)tmp;
                 prop_len -= tmp;
                 break;
             }
             case MQTT_DATA_TYPE_INT:
             {
                 tmp = MqttDecode_Int(buf, &cur_prop->data_int);
                 buf += tmp;
                 rc += (int)tmp;
                 prop_len -= tmp;
                 break;
             }
             case MQTT_DATA_TYPE_STRING:
             {
                 tmp = MqttDecode_String(buf,
                         (const char**)&cur_prop->data_str.str,
                         &cur_prop->data_str.len);
                 if (cur_prop->data_str.len <= (buf_len - (buf - pbuf))) {
                     buf += tmp;
                     rc += (int)tmp;
                     prop_len -= tmp;
                 }
                 else {
                     /* Invalid length */
                     rc = MQTT_CODE_ERROR_PROPERTY;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_VAR_INT:
             {
                 tmp = MqttDecode_Vbi(buf, &cur_prop->data_int,
                         (word32)(buf_len -(buf - pbuf)));
                 if (tmp < 0) {
                     return tmp;
                 }
                 buf += tmp;
                 rc += (int)tmp;
                 prop_len -= tmp;
                 break;
             }
             case MQTT_DATA_TYPE_BINARY:
             {
                 /* Binary type is a two byte integer "length"
                    followed by that number of bytes */
                 tmp = MqttDecode_Num(buf, &cur_prop->data_bin.len);
                 buf += tmp;
                 rc += (int)tmp;
                 prop_len -= tmp;
 
                 if (cur_prop->data_bin.len <= (buf_len - (buf - pbuf))) {
                     cur_prop->data_bin.data = buf;
                     buf += cur_prop->data_bin.len;
                     rc += (int)cur_prop->data_bin.len;
                     prop_len -= cur_prop->data_bin.len;
                 }
                 else {
                     /* Invalid length */
                     rc = MQTT_CODE_ERROR_PROPERTY;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_STRING_PAIR:
             {
                 /* String is prefixed with a Two Byte Integer length
                    field that gives the number of bytes */
                 tmp = MqttDecode_String(buf,
                         (const char**)&cur_prop->data_str.str,
                         &cur_prop->data_str.len);
-                buf += tmp;
-                rc += (int)tmp;
-                prop_len -= tmp;
+                if (cur_prop->data_str.len <=
+                    (buf_len - (buf + tmp - pbuf))) {
+                    buf += tmp;
+                    rc += (int)tmp;
+                    prop_len -= tmp;
 
-                if (cur_prop->data_str.len <= (buf_len - (buf - pbuf))) {
                     tmp = MqttDecode_String(buf,
                             (const char**)&cur_prop->data_str2.str,
                             &cur_prop->data_str2.len);
-                    buf += tmp;
-                    rc += (int)tmp;
-                    prop_len -= tmp;
+                    if (cur_prop->data_str2.len <=
+                        (buf_len - (buf + tmp - pbuf))) {
+                        buf += tmp;
+                        rc += (int)tmp;
+                        prop_len -= tmp;
+                    }
+                    else {
+                        /* Invalid length */
+                        rc = MQTT_CODE_ERROR_PROPERTY;
+                    }
                 }
                 else {
                     /* Invalid length */
                     rc = MQTT_CODE_ERROR_PROPERTY;
                 }
                 break;
             }
             case MQTT_DATA_TYPE_NONE:
             default:
             {
-                /* Do nothing */
+                /* Invalid property data type */
+                rc = MQTT_CODE_ERROR_PROPERTY;
                 break;
             }
         }
     };
 
     if (rc < 0) {
         /* Free the properties */
         MqttProps_Free(*props);
     }
 
     return rc;
 }
 #endif
 
 /* Packet Type Encoders/Decoders */
@@ -1692,72 +1702,75 @@ int MqttEncode_Auth(byte *tx_buf, int tx_buf_len, MqttAuth *auth)
 int MqttDecode_Auth(byte *rx_buf, int rx_buf_len, MqttAuth *auth)
 {
     int header_len, remain_len, tmp;
     byte *rx_payload;
     word32 props_len = 0;
 
 
     /* Validate required arguments */
     if ((rx_buf == NULL) || (rx_buf_len <= 0) || (auth == NULL)) {
         return MQTT_CODE_ERROR_BAD_ARG;
     }
 
     /* Decode fixed header */
     header_len = MqttDecode_FixedHeader(rx_buf, rx_buf_len, &remain_len,
                   MQTT_PACKET_TYPE_AUTH, NULL, NULL, NULL);
     if (header_len < 0) {
         return header_len;
     }
     rx_payload = &rx_buf[header_len];
 
     /* Decode variable header */
     auth->reason_code = *rx_payload++;
     if ((auth->reason_code == MQTT_REASON_SUCCESS) ||
         (auth->reason_code == MQTT_REASON_CONT_AUTH))
     {
         /* Decode Length of Properties */
         tmp = MqttDecode_Vbi(rx_payload, &props_len,
                 (word32)(rx_buf_len - (rx_payload - rx_buf)));
         if (tmp < 0)
             return tmp;
 
         if (props_len <= (word32)(rx_buf_len - (rx_payload - rx_buf))) {
             rx_payload += tmp;
+            if ((rx_payload - rx_buf) > rx_buf_len) {
+                return MQTT_CODE_ERROR_OUT_OF_BUFFER;
+            }
             if (props_len > 0) {
                 /* Decode the Properties */
                 tmp = MqttDecode_Props(MQTT_PACKET_TYPE_AUTH,
                         &auth->props, rx_payload,
                         (word32)(rx_buf_len - (rx_payload - rx_buf)),
                         props_len);
                 if (tmp < 0)
                     return tmp;
                 rx_payload += tmp;
             }
             else if (auth->reason_code != MQTT_REASON_SUCCESS) {
                 /* The Reason Code and Property Length can be omitted if the
                    Reason Code is 0x00 (Success) and there are no Properties.
                    In this case the AUTH has a Remaining Length of 0. */
                 return MQTT_CODE_ERROR_MALFORMED_DATA;
             }
             if (auth->props != NULL) {
                 /* Must have Authentication Method */
 
                 /* Must have Authentication Data */
 
                 /* May have zero or more User Property pairs */
             }
             else {
                 return MQTT_CODE_ERROR_MALFORMED_DATA;
             }
         }
         else
             return MQTT_CODE_ERROR_OUT_OF_BUFFER;
     }
     else {
         return MQTT_CODE_ERROR_MALFORMED_DATA;
     }
 
     (void)rx_payload;
 
     /* Return total length of packet */
     return header_len + remain_len;
 }
