commit 5663f11795e396511ba895fb80b221e5c370f3b2
Author: Martijn van Beurden <mvanb1@gmail.com>
Date:   Wed Nov 16 20:16:26 2022 +0100

    Check number of metadata blocks
    
    Fixes out-of-bounds access
    
    Credit: Oss-Fuzz

diff --git a/oss-fuzz/fuzzer_reencoder.cc b/oss-fuzz/fuzzer_reencoder.cc
index 002bdb97..93bf68fe 100644
--- a/oss-fuzz/fuzzer_reencoder.cc
+++ b/oss-fuzz/fuzzer_reencoder.cc
@@ -33,92 +33,95 @@
 #include "FLAC++/metadata.h"
 #include "fuzzer_common.h"
 
+#define MAX_NUM_METADATA_BLOCKS 2048
+
 namespace FLAC {
      namespace Encoder {
          class FuzzerStream : public Stream {
             private:
                 // fuzzing::datasource::Datasource& ds;
             public:
                 FuzzerStream(fuzzing::datasource::Datasource&) :
                     Stream() { }
 
                 ::FLAC__StreamEncoderWriteStatus write_callback(const FLAC__byte buffer[], size_t bytes, uint32_t /* samples */, uint32_t /* current_frame */) override {
                     fuzzing::memory::memory_test(buffer, bytes);
                     return FLAC__STREAM_ENCODER_WRITE_STATUS_OK;
                 }
          };
     }
     namespace Decoder {
         class FuzzerDecoder : public Stream {
         private:
             fuzzing::datasource::Datasource& ds;
             FLAC::Encoder::FuzzerStream& encoder;
         public:
             FuzzerDecoder(fuzzing::datasource::Datasource& dsrc, FLAC::Encoder::FuzzerStream& encoder_arg) :
                 Stream(), ds(dsrc), encoder(encoder_arg) { }
 
-            ::FLAC__StreamMetadata * metadata_blocks[16] = {0};
+            ::FLAC__StreamMetadata * metadata_blocks[MAX_NUM_METADATA_BLOCKS] = {0};
             int num_metadata_blocks = 0;
 
             void metadata_callback(const ::FLAC__StreamMetadata *metadata) override {
-                if((metadata_blocks[num_metadata_blocks] = FLAC__metadata_object_clone(metadata)) != NULL)
-			num_metadata_blocks++;
+		if(num_metadata_blocks < MAX_NUM_METADATA_BLOCKS)
+	                if((metadata_blocks[num_metadata_blocks] = FLAC__metadata_object_clone(metadata)) != NULL)
+				num_metadata_blocks++;
             }
 
             ::FLAC__StreamDecoderReadStatus read_callback(FLAC__byte buffer[], size_t *bytes)  override {
                 try {
                     const size_t maxCopySize = *bytes;
 
                     if ( maxCopySize > 0 ) {
                         /* memset just to test if this overwrites anything, and triggers ASAN */
                         memset(buffer, 0, maxCopySize);
                     }
 
                     const auto data = ds.GetData(0);
                     const auto dataSize = data.size();
                     const auto copySize = std::min(maxCopySize, dataSize);
 
                     if ( copySize > 0 ) {
                         memcpy(buffer, data.data(), copySize);
                     }
 
                     *bytes = copySize;
 
                     return FLAC__STREAM_DECODER_READ_STATUS_CONTINUE;
                 } catch ( ... ) {
                         return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
                 }
             }
 
             ::FLAC__StreamDecoderWriteStatus write_callback(const ::FLAC__Frame *frame, const FLAC__int32 * const buffer[])  override {
                 {
                     fuzzing::memory::memory_test(&(frame->header), sizeof(frame->header));
                     fuzzing::memory::memory_test(&(frame->footer), sizeof(frame->footer));
                 }
 
                 {
                     const auto numChannels = get_channels();
                     const size_t bytesPerChannel = frame->header.blocksize * sizeof(FLAC__int32);
                     for (size_t i = 0; i < numChannels; i++) {
                         fuzzing::memory::memory_test(buffer[i], bytesPerChannel);
                     }
                 }
 
 		/* Data is checked, now pass it towards encoder */
                 if(encoder.get_state() == FLAC__STREAM_ENCODER_OK) {
                     if(encoder.get_channels() != get_channels())
                          return FLAC__STREAM_DECODER_WRITE_STATUS_ABORT;
                     if(encoder.get_bits_per_sample() != get_bits_per_sample())
                          return FLAC__STREAM_DECODER_WRITE_STATUS_ABORT;
                     encoder.process(buffer, frame->header.blocksize);
                     return FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE;
                 }
                 else
                     return FLAC__STREAM_DECODER_WRITE_STATUS_ABORT;
             }
             void error_callback(::FLAC__StreamDecoderErrorStatus status)  override {
                 fuzzing::memory::memory_test(status);
             }
         };
     }
 }
