commit 74ca458b14d265b68ad25cf918aa216b3fa51103
Author: Jack Lloyd <jack@randombit.net>
Date:   Tue Feb 27 09:28:13 2018 -0500

    Fix overflow in monty_redc
    
    OSS-Fuzz caught a bug introduced in 5fcc1c70d7a. bigint_monty_redc
    assumes z is 2*p_words+2 words long. Previously the implicit rounding
    up in grow_to ensured a resize would result in a sufficiently large
    value.
    
    OSS-Fuzz 6581 6588 6593

diff --git a/src/lib/pubkey/ec_group/curve_gfp.cpp b/src/lib/pubkey/ec_group/curve_gfp.cpp
index a55741fb0..1bca04d07 100644
--- a/src/lib/pubkey/ec_group/curve_gfp.cpp
+++ b/src/lib/pubkey/ec_group/curve_gfp.cpp
@@ -76,20 +76,20 @@ void CurveGFp_Montgomery::from_curve_rep(BigInt& x, secure_vector<word>& ws) con
 void CurveGFp_Montgomery::curve_mul(BigInt& z, const BigInt& x, const BigInt& y,
                                     secure_vector<word>& ws) const
    {
    if(x.is_zero() || y.is_zero())
       {
       z = 0;
       return;
       }
 
-   const size_t output_size = 2*m_p_words + 1;
+   const size_t output_size = 2*m_p_words + 2;
    ws.resize(2*(m_p_words+2));
 
    if(z.size() < output_size)
       z.grow_to(output_size);
    z.clear();
 
    bigint_monty_mul(z, x, y,
                     m_p.data(), m_p_words, m_p_dash,
                     ws.data(), ws.size());
    }
@@ -97,23 +97,23 @@ void CurveGFp_Montgomery::curve_mul(BigInt& z, const BigInt& x, const BigInt& y,
 void CurveGFp_Montgomery::curve_sqr(BigInt& z, const BigInt& x,
                                     secure_vector<word>& ws) const
    {
    if(x.is_zero())
       {
       z = 0;
       return;
       }
 
    const size_t x_sw = x.sig_words();
    BOTAN_ASSERT(x_sw <= m_p_words, "Input in range");
 
-   const size_t output_size = 2*m_p_words + 1;
+   const size_t output_size = 2*m_p_words + 2;
 
    ws.resize(2*(m_p_words+2));
 
    if(z.size() < output_size)
       z.grow_to(output_size);
    z.clear();
 
    bigint_monty_sqr(z, x, m_p.data(), m_p_words, m_p_dash,
                     ws.data(), ws.size());
    }
@@ -158,22 +158,22 @@ class CurveGFp_NIST : public CurveGFp_Repr
 void CurveGFp_NIST::curve_mul(BigInt& z, const BigInt& x, const BigInt& y,
                               secure_vector<word>& ws) const
    {
    if(x.is_zero() || y.is_zero())
       {
       z = 0;
       return;
       }
 
    const size_t p_words = get_p_words();
-   const size_t output_size = 2*p_words + 1;
+   const size_t output_size = 2*p_words + 2;
 
    ws.resize(2*(p_words+2));
 
    if(z.size() < output_size)
       z.grow_to(output_size);
    z.clear();
 
    bigint_mul(z, x, y, ws.data(), ws.size());
 
    this->redc(z, ws);
    }
@@ -181,30 +181,30 @@ void CurveGFp_NIST::curve_mul(BigInt& z, const BigInt& x, const BigInt& y,
 void CurveGFp_NIST::curve_sqr(BigInt& z, const BigInt& x,
                               secure_vector<word>& ws) const
    {
    if(x.is_zero())
       {
       z = 0;
       return;
       }
 
    const size_t p_words = get_p_words();
-   const size_t output_size = 2*p_words + 1;
+   const size_t output_size = 2*p_words + 2;
 
    ws.resize(2*(p_words+2));
 
    if(z.size() < output_size)
       z.grow_to(output_size);
    z.clear();
 
    bigint_sqr(z.mutable_data(), output_size,
               x.data(), x.size(), x.sig_words(),
               ws.data(), ws.size());
 
    this->redc(z, ws);
    }
 
 #if defined(BOTAN_HAS_NIST_PRIME_REDUCERS_W32)
 
 /**
 * The NIST P-192 curve
 */
