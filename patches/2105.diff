commit d30d55fa06470a028327b7088562f605367f8497
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Mon Jun 5 09:16:01 2017 +0000

    NWT_GRD/NEWT_GRC: avoid division by zero. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=2107. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@38892 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/frmts/northwood/northwood.cpp b/gdal/frmts/northwood/northwood.cpp
index 75f0e737e7..ff88e46d8f 100644
--- a/gdal/frmts/northwood/northwood.cpp
+++ b/gdal/frmts/northwood/northwood.cpp
@@ -39,241 +39,243 @@ CPL_CVSID("$Id$");
 int nwt_ParseHeader( NWT_GRID * pGrd, char *nwtHeader )
 {
     /* double dfTmp; */
 
     if( nwtHeader[4] == '1' )
         pGrd->cFormat = 0x00;        // grd - surface type
     else if( nwtHeader[4] == '8' )
         pGrd->cFormat = 0x80;        //  grc classified type
 
     pGrd->stClassDict = NULL;
 
     memcpy( reinterpret_cast<void *>( &pGrd->fVersion ),
             reinterpret_cast<void *>( &nwtHeader[5] ),
             sizeof( pGrd->fVersion ) );
     CPL_LSBPTR32(&pGrd->fVersion);
 
     unsigned short usTmp;
     memcpy( reinterpret_cast<void *>( &usTmp ),
             reinterpret_cast<void *>( &nwtHeader[9] ),
             2 );
     CPL_LSBPTR16(&usTmp);
     pGrd->nXSide = static_cast<unsigned int>( usTmp );
     if( pGrd->nXSide == 0 )
     {
         memcpy( reinterpret_cast<void *>( &pGrd->nXSide ),
                 reinterpret_cast<void *>( &nwtHeader[128] ),
                 sizeof(pGrd->nXSide) );
         CPL_LSBPTR32(&pGrd->nXSide);
     }
+    if( pGrd->nXSide <= 1 )
+        return FALSE;
 
     memcpy( reinterpret_cast<void *>( &usTmp ),
             reinterpret_cast<void *>( &nwtHeader[11] ),
             2 );
     CPL_LSBPTR16(&usTmp);
     pGrd->nYSide = static_cast<unsigned int>( usTmp );
     if( pGrd->nYSide == 0 )
     {
         memcpy( reinterpret_cast<void *>( &pGrd->nYSide ),
                 reinterpret_cast<void *>( &nwtHeader[132] ),
                 sizeof( pGrd->nYSide ) );
         CPL_LSBPTR32(&pGrd->nYSide);
     }
 
     memcpy( reinterpret_cast<void *>( &pGrd->dfMinX ),
             reinterpret_cast<void *>( &nwtHeader[13] ),
             sizeof(pGrd->dfMinX) );
     CPL_LSBPTR64(&pGrd->dfMinX);
     memcpy( reinterpret_cast<void *>( &pGrd->dfMaxX ),
             reinterpret_cast<void *>( &nwtHeader[21] ),
             sizeof(pGrd->dfMaxX) );
     CPL_LSBPTR64(&pGrd->dfMaxX);
     memcpy( reinterpret_cast<void *>( &pGrd->dfMinY ),
             reinterpret_cast<void *>( &nwtHeader[29] ),
             sizeof(pGrd->dfMinY) );
     CPL_LSBPTR64(&pGrd->dfMinY);
     memcpy( reinterpret_cast<void *>( &pGrd->dfMaxY ),
             reinterpret_cast<void *>( &nwtHeader[37] ),
             sizeof(pGrd->dfMaxY) );
     CPL_LSBPTR64(&pGrd->dfMaxY);
 
     pGrd->dfStepSize = (pGrd->dfMaxX - pGrd->dfMinX) / (pGrd->nXSide - 1);
     /* dfTmp = (pGrd->dfMaxY - pGrd->dfMinY) / (pGrd->nYSide - 1); */
 
     memcpy( reinterpret_cast<void *>( &pGrd->fZMin ),
             reinterpret_cast<void *>( &nwtHeader[45] ),
             sizeof(pGrd->fZMin) );
     CPL_LSBPTR32(&pGrd->fZMin);
     memcpy( reinterpret_cast<void *>( &pGrd->fZMax ),
             reinterpret_cast<void *>( &nwtHeader[49] ),
             sizeof(pGrd->fZMax) );
     CPL_LSBPTR32(&pGrd->fZMax);
     memcpy( reinterpret_cast<void *>( &pGrd->fZMinScale ),
             reinterpret_cast<void *>( &nwtHeader[53] ),
             sizeof(pGrd->fZMinScale) );
     CPL_LSBPTR32(&pGrd->fZMinScale);
     memcpy( reinterpret_cast<void *>( &pGrd->fZMaxScale ),
             reinterpret_cast<void *>( &nwtHeader[57] ),
             sizeof(pGrd->fZMaxScale) );
     CPL_LSBPTR32(&pGrd->fZMaxScale);
 
     memcpy( reinterpret_cast<void *>( &pGrd->cDescription ),
             reinterpret_cast<void *>( &nwtHeader[61] ),
             sizeof(pGrd->cDescription) );
     memcpy( reinterpret_cast<void *>( &pGrd->cZUnits ),
             reinterpret_cast<void *>( &nwtHeader[93] ),
             sizeof(pGrd->cZUnits) );
 
     int i;
     memcpy( reinterpret_cast<void *>( &i ),
             reinterpret_cast<void *>( &nwtHeader[136] ),
             4 );
     CPL_LSBPTR32(&i);
 
     if( i == 1129336130 )
     {                            //BMPC
         if( nwtHeader[140] & 0x01 )
         {
             pGrd->cHillShadeBrightness = nwtHeader[144];
             pGrd->cHillShadeContrast = nwtHeader[145];
         }
     }
 
     memcpy( reinterpret_cast<void *>( &pGrd->cMICoordSys ),
             reinterpret_cast<void *>( &nwtHeader[256] ),
             sizeof(pGrd->cMICoordSys) );
     pGrd->cMICoordSys[sizeof(pGrd->cMICoordSys)-1] = '\0';
 
     pGrd->iZUnits = nwtHeader[512];
 
     if( nwtHeader[513] & 0x80 )
         pGrd->bShowGradient = true;
 
     if( nwtHeader[513] & 0x40 )
         pGrd->bShowHillShade = true;
 
     if( nwtHeader[513] & 0x20 )
         pGrd->bHillShadeExists = true;
 
     memcpy( reinterpret_cast<void *>( &pGrd->iNumColorInflections ),
             reinterpret_cast<void *>( &nwtHeader[516] ),
             2 );
     CPL_LSBPTR16(&pGrd->iNumColorInflections);
 
     if (pGrd->iNumColorInflections > 32)
     {
         CPLError(CE_Failure, CPLE_AppDefined, "Corrupt header");
         pGrd->iNumColorInflections = 0;
         return FALSE;
     }
 
     for( i = 0; i < pGrd->iNumColorInflections; i++ )
     {
         memcpy( reinterpret_cast<void *>( &pGrd->stInflection[i].zVal ),
                 reinterpret_cast<void *>( &nwtHeader[518 + (7 * i)] ), 4 );
         CPL_LSBPTR32(&pGrd->stInflection[i].zVal);
         memcpy( reinterpret_cast<void *>( &pGrd->stInflection[i].r ),
                 reinterpret_cast<void *>( &nwtHeader[522 + (7 * i)] ), 1 );
         memcpy( reinterpret_cast<void *>( &pGrd->stInflection[i].g ),
                 reinterpret_cast<void *>( &nwtHeader[523 + (7 * i)] ), 1 );
         memcpy( reinterpret_cast<void *>( &pGrd->stInflection[i].b ),
                 reinterpret_cast<void *>( &nwtHeader[524 + (7 * i)] ), 1 );
     }
 
     memcpy( reinterpret_cast<void *>( &pGrd->fHillShadeAzimuth ),
             reinterpret_cast<void *>( &nwtHeader[966] ),
             sizeof(pGrd->fHillShadeAzimuth) );
     CPL_LSBPTR32(&pGrd->fHillShadeAzimuth);
     memcpy( reinterpret_cast<void *>( &pGrd->fHillShadeAngle ),
             reinterpret_cast<void *>( &nwtHeader[970] ),
             sizeof(pGrd->fHillShadeAngle) );
     CPL_LSBPTR32(&pGrd->fHillShadeAngle);
 
     pGrd->cFormat += nwtHeader[1023];    // the msb for grd/grc was already set
 
     // there are more types than this - need to build other types for testing
     if( pGrd->cFormat & 0x80 )
     {
         if( nwtHeader[1023] == 0 )
             pGrd->nBitsPerPixel = 16;
         else
             pGrd->nBitsPerPixel = nwtHeader[1023] * 4;
     }
     else
         pGrd->nBitsPerPixel = nwtHeader[1023] * 8;
 
     if( pGrd->cFormat & 0x80 )        // if is GRC load the Dictionary
     {
         VSIFSeekL( pGrd->fp,
-                   1024 + (pGrd->nXSide * pGrd->nYSide) * (pGrd->nBitsPerPixel/8),
+                   1024 + (static_cast<vsi_l_offset>(pGrd->nXSide) * pGrd->nYSide) * (pGrd->nBitsPerPixel/8),
                    SEEK_SET );
 
         if( !VSIFReadL( &usTmp, 2, 1, pGrd->fp) )
         {
             CPLError( CE_Failure, CPLE_FileIO,
                       "Read failure, file short?" );
             return FALSE;
         }
         CPL_LSBPTR16(&usTmp);
         pGrd->stClassDict = reinterpret_cast<NWT_CLASSIFIED_DICT *>(
              calloc( sizeof(NWT_CLASSIFIED_DICT), 1 ) );
 
         pGrd->stClassDict->nNumClassifiedItems = usTmp;
 
         pGrd->stClassDict->stClassifedItem
             = reinterpret_cast<NWT_CLASSIFIED_ITEM **> (
               calloc( sizeof(NWT_CLASSIFIED_ITEM *),
                       pGrd->stClassDict->nNumClassifiedItems + 1 ) );
 
         //load the dictionary
         for( usTmp=0; usTmp < pGrd->stClassDict->nNumClassifiedItems; usTmp++ )
         {
             NWT_CLASSIFIED_ITEM *psItem =
                 pGrd->stClassDict->stClassifedItem[usTmp] =
                 reinterpret_cast<NWT_CLASSIFIED_ITEM *>(
                     calloc(sizeof(NWT_CLASSIFIED_ITEM), 1) );
 
             unsigned char cTmp[256];
             if( !VSIFReadL( &cTmp, 9, 1, pGrd->fp ) )
             {
                 CPLError( CE_Failure, CPLE_FileIO,
                           "Read failure, file short?" );
                 return FALSE;
             }
             memcpy( reinterpret_cast<void *>( &psItem->usPixVal ),
                     reinterpret_cast<void *>( &cTmp[0]) , 2 );
             CPL_LSBPTR16(&psItem->usPixVal);
             memcpy( reinterpret_cast<void *>( &psItem->res1 ),
                     reinterpret_cast<void *>( &cTmp[2] ), 1 );
             memcpy( reinterpret_cast<void *>( &psItem->r ),
                     reinterpret_cast<void *>( &cTmp[3] ), 1 );
             memcpy( reinterpret_cast<void *>( &psItem->g ),
                     reinterpret_cast<void *>( &cTmp[4] ), 1 );
             memcpy( reinterpret_cast<void *>( &psItem->b ),
                     reinterpret_cast<void *>( &cTmp[5] ), 1 );
             memcpy( reinterpret_cast<void *>( &psItem->res2 ),
                     reinterpret_cast<void *>( &cTmp[6] ), 1 );
             memcpy( reinterpret_cast<void *>( &psItem->usLen ),
                     reinterpret_cast<void *>( &cTmp[7] ), 2 );
             CPL_LSBPTR16(&psItem->usLen);
 
             if ( psItem->usLen > sizeof(psItem->szClassName)-1 )
             {
                 CPLError( CE_Failure, CPLE_AppDefined,
                           "Unexpected long class name, %d characters long - unable to read file.",
                           psItem->usLen );
                 return FALSE;
             }
 
             // 0-len class names are possible
             psItem->szClassName[0] = '\0';
             if( psItem->usLen > 0 &&
                 !VSIFReadL( &psItem->szClassName, psItem->usLen, 1, pGrd->fp ) )
                 return FALSE;
         }
     }
 
     return TRUE;
 }
 
 // Create a color gradient ranging from ZMin to Zmax using the color
 // inflections defined in grid
