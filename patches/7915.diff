commit 4a9f1e7fb3ea45dcc70db2319820593373e65e35
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sat Apr 21 12:37:31 2018 -0400

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=7915

diff --git a/MagickCore/draw.c b/MagickCore/draw.c
index 3e229e9fc..13ae5509e 100644
--- a/MagickCore/draw.c
+++ b/MagickCore/draw.c
@@ -715,115 +715,115 @@ static void LogPathInfo(const PathInfo *path_info)
 static PathInfo *ConvertPrimitiveToPath(const PrimitiveInfo *primitive_info)
 {
   PathInfo
     *path_info;
 
   PathInfoCode
     code;
 
   PointInfo
     p,
     q;
 
   register ssize_t
     i,
     n;
 
   ssize_t
     coordinates,
     start;
 
   /*
     Converts a PrimitiveInfo structure into a vector path structure.
   */
   switch (primitive_info->primitive)
   {
     case AlphaPrimitive:
     case ColorPrimitive:
     case ImagePrimitive:
     case PointPrimitive:
     case TextPrimitive:
       return((PathInfo *) NULL);
     default:
       break;
   }
   for (i=0; primitive_info[i].primitive != UndefinedPrimitive; i++) ;
-  path_info=(PathInfo *) AcquireQuantumMemory((size_t) (2UL*i+3UL),
+  path_info=(PathInfo *) AcquireQuantumMemory((size_t) (2UL*i+4UL),
     sizeof(*path_info));
   if (path_info == (PathInfo *) NULL)
     return((PathInfo *) NULL);
   coordinates=0;
   n=0;
   p.x=(-1.0);
   p.y=(-1.0);
   q.x=(-1.0);
   q.y=(-1.0);
   start=0;
   for (i=0; primitive_info[i].primitive != UndefinedPrimitive; i++)
   {
     code=LineToCode;
     if (coordinates <= 0)
       {
         coordinates=(ssize_t) primitive_info[i].coordinates;
         p=primitive_info[i].point;
         start=n;
         code=MoveToCode;
       }
     coordinates--;
     /*
       Eliminate duplicate points.
     */
     if ((code == MoveToCode) || (fabs(q.x-primitive_info[i].point.x) >= DrawEpsilon) ||
         (fabs(q.y-primitive_info[i].point.y) >= DrawEpsilon))
       {
         path_info[n].code=code;
         path_info[n].point=primitive_info[i].point;
         q=primitive_info[i].point;
         n++;
       }
     if (coordinates > 0)
       continue;
     if ((fabs(p.x-primitive_info[i].point.x) < DrawEpsilon) &&
         (fabs(p.y-primitive_info[i].point.y) < DrawEpsilon))
       continue;
     /*
       Mark the p point as open if it does not match the q.
     */
     path_info[start].code=OpenCode;
     path_info[n].code=GhostlineCode;
     path_info[n].point=primitive_info[i].point;
     n++;
     path_info[n].code=LineToCode;
     path_info[n].point=p;
     n++;
   }
   path_info[n].code=EndCode;
   path_info[n].point.x=0.0;
   path_info[n].point.y=0.0;
   if (IsEventLogging() != MagickFalse)
     LogPathInfo(path_info);
   return(path_info);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   D e s t r o y D r a w I n f o                                             %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  DestroyDrawInfo() deallocates memory associated with an DrawInfo
 %  structure.
 %
 %  The format of the DestroyDrawInfo method is:
 %
 %      DrawInfo *DestroyDrawInfo(DrawInfo *draw_info)
 %
 %  A description of each parameter follows:
 %
 %    o draw_info: the draw info.
 %
 */
