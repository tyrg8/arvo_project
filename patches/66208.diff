commit e61a2881a7c9adc895416fdd409e7362130198d3
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Wed Jan 31 07:44:40 2024 +0900

    string.c (mrb_memsearch_ss): fix potential buffer overflow; fix #6158
    
    - stop using `bigint*`
    - stop integer pointer dereferences
    - use `memcpy` to integer variables
    - add reminder search for shorter patterns

diff --git a/src/string.c b/src/string.c
index 5044c1d50..b7e182085 100644
--- a/src/string.c
+++ b/src/string.c
@@ -543,89 +543,113 @@ static mrb_int
 str_index_str_by_char(mrb_state *mrb, mrb_value str, mrb_value sub, mrb_int pos)
 {
   const char *ptr = RSTRING_PTR(sub);
   mrb_int len = RSTRING_LEN(sub);
 
   if (pos > 0) {
     pos = chars2bytes(str, 0, pos);
   }
 
   pos = mrb_str_index(mrb, str, ptr, len, pos);
 
   if (pos > 0) {
     pos = bytes2chars(str, pos);
   }
   return pos;
 }
 
 #else
 #define RSTRING_CHAR_LEN(s) RSTRING_LEN(s)
 #define chars2bytes(s, off, ci) (ci)
 #define bytes2chars(s, bi) (bi)
 #define char_adjust(beg, end, ptr) (ptr)
 #define char_backtrack(ptr, end) ((end) - 1)
 #define str_index_str_by_char(mrb, str, sub, pos) str_index_str((mrb), (str), (sub), (pos))
 #endif
 
 /* The function is taken from http://0x80.pl/articles/simd-strfind.html */
 /* The original source code is under 2-clause BSD license; see LEGAL file.    */
 /* The modifications:
    * port from C++ to C
    * takes unsigned char*
    * returns mrb_int
    * alignment adjustment added
    * support bigendian CPU
+   * fixed potential buffer overflow
 */
 static inline mrb_int
 mrb_memsearch_ss(const unsigned char *xs, long m, const unsigned char *ys, long n)
 {
 #ifdef MRB_64BIT
 #define bitint uint64_t
 #define MASK1 0x0101010101010101ull
 #define MASK2 0x7f7f7f7f7f7f7f7full
 #define MASK3 0x8080808080808080ull
 #else
 #define bitint uint32_t
 #define MASK1 0x01010101ul
 #define MASK2 0x7f7f7f7ful
 #define MASK3 0x80808080ul
 #endif
 #if defined(MRB_ENDIAN_BIG)
 #ifdef MRB_64BIT
 #define MASK4 0x8000000000000000ull
 #else
 #define MASK4 0x80000000ul
 #endif
 #else
 #define MASK4 0x80
 #endif
 
+#define MAX(a,b) ((a) > (b) ? (a) : (b))
+
   const bitint first = MASK1 * (uint8_t)xs[0];
   const bitint last  = MASK1 * (uint8_t)xs[m-1];
 
-  bitint *s0 = (bitint*)(ys);
-  bitint *s1 = (bitint*)(ys+m-1);
+  const unsigned char *s0 = ys;
+  const unsigned char *s1 = ys+m-1;
+
+  const mrb_int lim = n - MAX(m, (mrb_int)sizeof(bitint));
+  mrb_int i;
+
+  for (i=0; i < lim; i+=sizeof(bitint)) {
+    bitint t0, t1;
 
-  for (mrb_int i=0; i < n; i+=sizeof(bitint), s0++, s1++) {
-    const bitint eq = (*s0 ^ first) | (*s1 ^ last);
+    memcpy(&t0, s0+i, sizeof(bitint));
+    memcpy(&t1, s1+i, sizeof(bitint));
+
+    const bitint eq = (t0 ^ first) | (t1 ^ last);
     bitint zeros = ((~eq & MASK2) + MASK1) & (~eq & MASK3);
     size_t j = 0;
 
     while (zeros) {
       if (zeros & MASK4) {
-        const char* substr = (char*)s0 + j + 1;
-        if (memcmp(substr, xs + 1, m - 2) == 0) {
-          return i + j;
+        const mrb_int idx = i + j;
+        const unsigned char* p = s0 + idx + 1;
+        if (memcmp(p, xs + 1, m - 2) == 0) {
+          return idx;
         }
       }
 
 #if defined(MRB_ENDIAN_BIG)
       zeros <<= 8;
 #else
       zeros >>= 8;
 #endif
-      j += 1;
+      j++;
     }
   }
+
+  if (i+m < n) {
+    const unsigned char *p = s0;
+    const unsigned char *e = ys + n;
+    for (;p<e;) {
+      p = (const unsigned char*)memchr(p, *xs, e-p);
+      if (p == NULL) break;
+      if (memcmp(p+1, xs+1, m-1) == 0) return (mrb_int)(p - ys);
+      p++;
+    }
+  }
+
   return -1;
 }
 
