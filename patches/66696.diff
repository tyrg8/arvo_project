commit 07c6c799e741a3a7466fc80964703e6f604f38e4
Author: Aurelien David <aurelien.david@telecom-paristech.fr>
Date:   Wed Feb 14 14:13:28 2024 +0100

    check data size in opus parse header
    
    ossfuzz issue 66696

diff --git a/src/media_tools/av_parsers.c b/src/media_tools/av_parsers.c
index f3db05962..3162c78ca 100644
--- a/src/media_tools/av_parsers.c
+++ b/src/media_tools/av_parsers.c
@@ -9922,337 +9922,337 @@ GF_EXPORT
 u8 gf_opus_parse_packet_header(u8 *data, u32 data_length, Bool self_delimited, GF_OpusPacketHeader *header)
 {
     u32 i;
     u32 nb_read_bytes;
     if (!data || !data_length)
         return 0;
     if (!header)
         return 0;
-    if (!memcmp(data, "OpusHead", sizeof(char)*8))
+    if (data_length>=8 && !memcmp(data, "OpusHead", sizeof(char)*8))
         return 0;
-    if (!memcmp(data, "OpusTags", sizeof(char)*8))
+    if (data_length>=8 && !memcmp(data, "OpusTags", sizeof(char)*8))
         return 0;
 
     GF_LOG(GF_LOG_DEBUG, GF_LOG_CODING, ("Processing Opus packet, self: %d, size %d\n", self_delimited, data_length));
 
     if (data_length < 1) {
         GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, ("Opus packet size must be at least one to parse TOC byte\n"));
         return 0;
     }
     memset(header, 0, sizeof(GF_OpusPacketHeader));
     header->self_delimited = self_delimited;
     header->TOC_config = (data[0] & 0xf8) >> 3;
     header->TOC_stereo = (data[0] & 0x4) >> 2;
     header->TOC_code = data[0] & 0x03;
     header->size = 1;
     if (header->TOC_code == 0) {
         header->nb_frames = 1;
         if (self_delimited) {
             nb_read_bytes = gf_opus_read_length(data, data_length, header->size, &header->self_delimited_length);
             if (nb_read_bytes) {
                 header->size += nb_read_bytes;
             } else {
                 GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, ("Could not read self delimited length in Opus packet code 0\n"));
                 return 0;
             }
 //            0                   1                   2                   3
 //            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //           | config  |s|0|0| N1 (1-2 bytes):                               |
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
 //           |               Compressed frame 1 (N1 bytes)...                :
 //           :                                                               |
 //           |                                                               |
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             header->frame_lengths[0] = header->self_delimited_length;
         } else {
 //            0                   1                   2                   3
 //            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //           | config  |s|0|0|                                               |
 //           +-+-+-+-+-+-+-+-+                                               |
 //           |                    Compressed frame 1 (N-1 bytes)...          :
 //           :                                                               |
 //           |                                                               |
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             header->frame_lengths[0] = data_length - header->size;
         }
         header->packet_size = header->size + header->frame_lengths[0];
     } else if (header->TOC_code == 1) {
         header->nb_frames = 2;
         if (self_delimited) {
             nb_read_bytes = gf_opus_read_length(data, data_length, header->size, &header->self_delimited_length);
             if (nb_read_bytes) {
                 header->size += nb_read_bytes;
             } else {
                 GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, ("Could not read self delimited length in Opus packet code 1\n"));
                 return 0;
             }
 //            0                   1                   2                   3
 //            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //           | config  |s|0|1| N1 (1-2 bytes):                               |
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :
 //           |               Compressed frame 1 (N1 bytes)...                |
 //           :                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //           |                               |                               |
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :
 //           |               Compressed frame 2 (N1 bytes)...                |
 //           :                                               +-+-+-+-+-+-+-+-+
 //           |                                               |
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             header->frame_lengths[0] = header->self_delimited_length;
             header->frame_lengths[1] = header->self_delimited_length;
         } else {
 //            0                   1                   2                   3
 //            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //           | config  |s|0|1|                                               |
 //           +-+-+-+-+-+-+-+-+                                               :
 //           |             Compressed frame 1 ((N-1)/2 bytes)...             |
 //           :                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //           |                               |                               |
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :
 //           |             Compressed frame 2 ((N-1)/2 bytes)...             |
 //           :                                               +-+-+-+-+-+-+-+-+
 //           |                                               |
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             if ((data_length-header->size) % 2) {
                 GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, ("Size of non-self-delimited Opus packet with code 2 must be even but is %d\n",data_length-header->size));
                 return 0;
             }
             header->frame_lengths[0] = (data_length-header->size)/2;
             header->frame_lengths[1] = (data_length-header->size)/2;
         }
         header->packet_size = header->size + header->frame_lengths[0] + header->frame_lengths[1];
     } else if (header->TOC_code == 2) {
         header->nb_frames = 2;
         if (self_delimited) {
             nb_read_bytes = gf_opus_read_length(data, data_length, header->size, &header->self_delimited_length);
             if (nb_read_bytes) {
                 header->size += nb_read_bytes;
             } else {
                 GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, ("Could not read self delimited length in Opus packet code 2\n"));
                 return 0;
             }
         }
         nb_read_bytes = gf_opus_read_length(data, data_length, header->size, &header->code2_frame_length);
         if (nb_read_bytes) {
             header->size += nb_read_bytes;
         } else {
             GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, ("Could not read frame length in Opus packet code 2\n"));
             return 0;
         }
         if (self_delimited) {
 //            0                   1                   2                   3
 //            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //           | config  |s|1|0| N1 (1-2 bytes): N2 (1-2 bytes :               |
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               :
 //           |               Compressed frame 1 (N1 bytes)...                |
 //           :                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //           |                               |                               |
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
 //           |               Compressed frame 2 (N2 bytes)...                :
 //           :                                                               |
 //           |                                                               |
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             header->frame_lengths[0] = header->self_delimited_length;
             header->frame_lengths[1] = header->code2_frame_length;
         } else {
 //            0                   1                   2                   3
 //            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //           | config  |s|1|0| N1 (1-2 bytes):                               |
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :
 //           |               Compressed frame 1 (N1 bytes)...                |
 //           :                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //           |                               |                               |
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |
 //           |                     Compressed frame 2...                     :
 //           :                                                               |
 //           |                                                               |
 //           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             header->frame_lengths[0] = header->code2_frame_length;
             header->frame_lengths[1] = data_length - header->size - header->code2_frame_length;
         }
         header->packet_size = header->size + header->frame_lengths[0] + header->frame_lengths[1];
     } else if (header->TOC_code == 3) {
         u32 sum = 0;
         if (data_length <= header->size) {
             GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, ("Not enough data to parse TOC code 3 data\n"));
             return 0;
         }
         header->code3_vbr = (data[header->size] & 0x80) >> 7;
         header->code3_padding = (data[header->size] & 0x40) >> 6;
         header->nb_frames = data[header->size] & 0x3f;
         header->size++;
         if (header->code3_padding) {
             if (data_length <= header->size) {
                 GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, ("Not enough data to parse TOC code 3 padding length\n"));
                 return 0;
             }
             if (data[header->size] == 255) {
                 header->code3_padding_length = 254 + data[header->size+1];
                 header->size += 2;
             } else {
                 header->code3_padding_length = data[header->size];
                 header->size++;
             }
         } else {
             header->code3_padding_length = 0;
         }
         if (self_delimited) {
             nb_read_bytes = gf_opus_read_length(data, data_length, header->size, &header->self_delimited_length);
             if (nb_read_bytes) {
                 header->size += nb_read_bytes;
             } else {
                 GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, ("Could not read self delimited length in Opus packet code 3\n"));
                 return 0;
             }
         }
         if (header->code3_vbr) {
             u32 max;
             u32 min;
             if (self_delimited) {
 //                0                   1                   2                   3
 //                0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               | config  |s|1|1|1|p|     M     | Padding length (Optional)     :
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               : N1 (1-2 bytes):     ...       :     N[M-1]    |     N[M]      :
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :               Compressed frame 1 (N1 bytes)...                :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :               Compressed frame 2 (N2 bytes)...                :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :                              ...                              :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :              Compressed frame M (N[M] bytes)...               :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               :                  Opus Padding (Optional)...                   |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                 header->frame_lengths[0] = header->self_delimited_length;
                 min = 1;
                 max = header->nb_frames;
                 sum += header->frame_lengths[0];
             } else {
 //                0                   1                   2                   3
 //                0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               | config  |s|1|1|1|p|     M     | Padding length (Optional)     :
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               : N1 (1-2 bytes): N2 (1-2 bytes):     ...       :     N[M-1]    |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :               Compressed frame 1 (N1 bytes)...                :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :               Compressed frame 2 (N2 bytes)...                :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :                              ...                              :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :                     Compressed frame M...                     :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               :                  Opus Padding (Optional)...                   |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                 min = 0;
                 max = header->nb_frames-1;
             }
             for (i = min; i < max; i++) {
                 if (data_length <= header->size) {
                     GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, ("Not enough data to parse TOC code 3 length\n"));
                     return 0;
                 }
                 nb_read_bytes = gf_opus_read_length(data, data_length, header->size, &(header->frame_lengths[i]));
                 if (nb_read_bytes) {
                     header->size += nb_read_bytes;
                 } else {
                     GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, ("Could not read frame length in Opus packet code 3\n"));
                     return 0;
                 }
                 sum += header->frame_lengths[i];
             }
             if (!self_delimited) {
                 header->frame_lengths[header->nb_frames-1] = data_length - header->size - header->code3_padding_length - sum;
                 sum += header->frame_lengths[header->nb_frames-1];
             }
         } else {
             u32 cbr_length;
             if (self_delimited) {
 //                0                   1                   2                   3
 //                0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               | config  |s|1|1|0|p|     M     | Pad len (Opt) : N1 (1-2 bytes):
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :               Compressed frame 1 (N1 bytes)...                :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :               Compressed frame 2 (N1 bytes)...                :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :                              ...                              :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :               Compressed frame M (N1 bytes)...                :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               :                  Opus Padding (Optional)...                   |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                 cbr_length = header->self_delimited_length;
             } else {
 //                0                   1                   2                   3
 //                0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               | config  |s|1|1|0|p|     M     |  Padding length (Optional)    :
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :               Compressed frame 1 (R/M bytes)...               :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :               Compressed frame 2 (R/M bytes)...               :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :                              ...                              :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               |                                                               |
 //               :               Compressed frame M (R/M bytes)...               :
 //               |                                                               |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 //               :                  Opus Padding (Optional)...                   |
 //               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
                 if ((data_length - header->size - header->code3_padding_length) % header->nb_frames) {
                     GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, ("Sum of frame lengths is not a multiple of the number of frames\n"));
                     return 0;
                 }
                 cbr_length = (data_length - header->size - header->code3_padding_length)/header->nb_frames;
             }
             for (i = 0; i < header->nb_frames; i++) {
                 header->frame_lengths[i] = cbr_length;
                 sum += header->frame_lengths[i];
             }
         }
         header->packet_size = header->size + header->code3_padding_length + sum;
     }
     return 1;
 }
