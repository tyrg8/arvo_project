commit 393aaada64a7ec77313ef2516fce1c2052b547c8
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Wed Sep 20 09:51:22 2023 +0900

    mruby-pack/pack.c (read_tmpl): fix out-of-bound access with templates

diff --git a/mrbgems/mruby-pack/src/pack.c b/mrbgems/mruby-pack/src/pack.c
index e60a7e033..26c2890b0 100644
--- a/mrbgems/mruby-pack/src/pack.c
+++ b/mrbgems/mruby-pack/src/pack.c
@@ -29,22 +29,23 @@ struct tmpl {
 enum pack_dir {
   PACK_DIR_CHAR,      /* C */
   PACK_DIR_SHORT,     /* S */
   PACK_DIR_LONG,      /* L */
   PACK_DIR_QUAD,      /* Q */
   //PACK_DIR_INT,     /* i */
   //PACK_DIR_VAX,
   PACK_DIR_BER,       /* w */
   PACK_DIR_UTF8,      /* U */
   PACK_DIR_DOUBLE,    /* E */
   PACK_DIR_FLOAT,     /* f */
   PACK_DIR_STR,       /* A */
   PACK_DIR_HEX,       /* h */
   PACK_DIR_BSTR,      /* b */
   PACK_DIR_BASE64,    /* m */
   PACK_DIR_QENC,      /* M */
   PACK_DIR_NUL,       /* x */
   PACK_DIR_BACK,      /* X */
   PACK_DIR_ABS,       /* @ */
+  PACK_DIR_NONE,      /* - */
 };
 
 enum pack_type {
@@ -1206,288 +1207,289 @@ static enum pack_dir
 read_tmpl(mrb_state *mrb, struct tmpl *tmpl, enum pack_type *typep, int *sizep, int *countp, unsigned int *flagsp)
 {
   mrb_int t, tlen;
   int ch, size = 0;
   enum pack_dir dir;
   enum pack_type type;
   int count = 1;
   unsigned int flags = 0;
   const char *tptr;
 
   tptr = RSTRING_PTR(tmpl->str);
   tlen = RSTRING_LEN(tmpl->str);
 
  restart:
+  if (tmpl->idx >= tlen) return PACK_DIR_NONE;
   t = tptr[tmpl->idx++];
  alias:
   switch (t) {
   case 'A':
     dir = PACK_DIR_STR;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_WIDTH | PACK_FLAG_COUNT2;
     break;
   case 'a':
     dir = PACK_DIR_STR;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_WIDTH | PACK_FLAG_COUNT2 | PACK_FLAG_a;
     break;
   case 'C':
     dir = PACK_DIR_CHAR;
     type = PACK_TYPE_INTEGER;
     size = 1;
     break;
   case 'c':
     dir = PACK_DIR_CHAR;
     type = PACK_TYPE_INTEGER;
     size = 1;
     flags |= PACK_FLAG_SIGNED;
     break;
   case 'D': case 'd':
     dir = PACK_DIR_DOUBLE;
     type = PACK_TYPE_FLOAT;
     size = 8;
     flags |= PACK_FLAG_SIGNED;
     break;
   case 'F': case 'f':
     dir = PACK_DIR_FLOAT;
     type = PACK_TYPE_FLOAT;
     size = 4;
     flags |= PACK_FLAG_SIGNED;
     break;
   case 'E':
     dir = PACK_DIR_DOUBLE;
     type = PACK_TYPE_FLOAT;
     size = 8;
     flags |= PACK_FLAG_SIGNED | PACK_FLAG_LT;
     break;
   case 'e':
     dir = PACK_DIR_FLOAT;
     type = PACK_TYPE_FLOAT;
     size = 4;
     flags |= PACK_FLAG_SIGNED | PACK_FLAG_LT;
     break;
   case 'G':
     dir = PACK_DIR_DOUBLE;
     type = PACK_TYPE_FLOAT;
     size = 8;
     flags |= PACK_FLAG_SIGNED | PACK_FLAG_GT;
     break;
   case 'g':
     dir = PACK_DIR_FLOAT;
     type = PACK_TYPE_FLOAT;
     size = 4;
     flags |= PACK_FLAG_SIGNED | PACK_FLAG_GT;
     break;
   case 'H':
     dir = PACK_DIR_HEX;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_COUNT2;
     break;
   case 'h':
     dir = PACK_DIR_HEX;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_COUNT2 | PACK_FLAG_LSB;
     break;
   case 'B':
     dir = PACK_DIR_BSTR;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_COUNT2;
     break;
   case 'b':
     dir = PACK_DIR_BSTR;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_COUNT2 | PACK_FLAG_LSB;
     break;
   case 'I':
     switch (sizeof(int)) {
       case 2: t = 'S'; goto alias;
       case 4: t = 'L'; goto alias;
       case 8: t = 'Q'; goto alias;
       default:
         mrb_raisef(mrb, E_RUNTIME_ERROR, "mruby-pack does not support sizeof(int) == %d", (int)sizeof(int));
     }
     break;
   case 'i':
     switch (sizeof(int)) {
       case 2: t = 's'; goto alias;
       case 4: t = 'l'; goto alias;
       case 8: t = 'q'; goto alias;
       default:
         mrb_raisef(mrb, E_RUNTIME_ERROR, "mruby-pack does not support sizeof(int) == %d", (int)sizeof(int));
     }
     break;
   case 'J':
     switch (sizeof(intptr_t)) {
       case 4: t = 'L'; goto alias;
       case 8: t = 'Q'; goto alias;
       default:
         mrb_raisef(mrb, E_RUNTIME_ERROR, "mruby-pack does not support sizeof(uintptr_t) == %d", (int)sizeof(uintptr_t));
     }
     break;
   case 'j':
     switch (sizeof(intptr_t)) {
       case 4: t = 'l'; goto alias;
       case 8: t = 'q'; goto alias;
       default:
         mrb_raisef(mrb, E_RUNTIME_ERROR, "mruby-pack does not support sizeof(intptr_t) == %d", (int)sizeof(intptr_t));
     }
     break;
   case 'L':
     dir = PACK_DIR_LONG;
     type = PACK_TYPE_INTEGER;
     size = 4;
     break;
   case 'l':
     dir = PACK_DIR_LONG;
     type = PACK_TYPE_INTEGER;
     size = 4;
     flags |= PACK_FLAG_SIGNED;
     break;
   case 'w':
     dir = PACK_DIR_BER;
     type = PACK_TYPE_INTEGER;
     flags |= PACK_FLAG_SIGNED;
     break;
   case 'm':
     dir = PACK_DIR_BASE64;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_WIDTH | PACK_FLAG_COUNT2;
     break;
   case 'M':
     dir = PACK_DIR_QENC;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_WIDTH | PACK_FLAG_COUNT2;
     break;
   case 'N':  /* = "L>" */
     dir = PACK_DIR_LONG;
     type = PACK_TYPE_INTEGER;
     size = 4;
     flags |= PACK_FLAG_GT;
     break;
   case 'n':  /* = "S>" */
     dir = PACK_DIR_SHORT;
     type = PACK_TYPE_INTEGER;
     size = 2;
     flags |= PACK_FLAG_GT;
     break;
   case 'Q':
     dir = PACK_DIR_QUAD;
     type = PACK_TYPE_INTEGER;
     size = 8;
     break;
   case 'q':
     dir = PACK_DIR_QUAD;
     type = PACK_TYPE_INTEGER;
     size = 8;
     flags |= PACK_FLAG_SIGNED;
     break;
   case 'S':
     dir = PACK_DIR_SHORT;
     type = PACK_TYPE_INTEGER;
     size = 2;
     break;
   case 's':
     dir = PACK_DIR_SHORT;
     type = PACK_TYPE_INTEGER;
     size = 2;
     flags |= PACK_FLAG_SIGNED;
     break;
   case 'U':
     dir = PACK_DIR_UTF8;
     type = PACK_TYPE_INTEGER;
     break;
   case 'V':  /* = "L<" */
     dir = PACK_DIR_LONG;
     type = PACK_TYPE_INTEGER;
     size = 4;
     flags |= PACK_FLAG_LT;
     break;
   case 'v':  /* = "S<" */
     dir = PACK_DIR_SHORT;
     type = PACK_TYPE_INTEGER;
     size = 2;
     flags |= PACK_FLAG_LT;
     break;
   case 'x':
     dir = PACK_DIR_NUL;
     type = PACK_TYPE_NONE;
     break;
   case 'X':
     dir = PACK_DIR_BACK;
     type = PACK_TYPE_NONE;
     break;
   case '@':
     dir = PACK_DIR_ABS;
     type = PACK_TYPE_NONE;
     break;
   case 'Z':
     dir = PACK_DIR_STR;
     type = PACK_TYPE_STRING;
     flags |= PACK_FLAG_WIDTH | PACK_FLAG_COUNT2 | PACK_FLAG_Z;
     break;
   case '#':
     while (++tmpl->idx < tlen && tptr[tmpl->idx] != '\n')
       ;
     goto restart;
 
   case 'p': case 'P':
   case '%':
     mrb_raisef(mrb, E_ARGUMENT_ERROR, "%c is not supported", (char)t);
     break;
   default:
     if (!ISSPACE((char)t)) {
       char c = (char)t;
       mrb_value s = mrb_str_new(mrb, &c, 1);
       mrb_raisef(mrb, E_ARGUMENT_ERROR, "unknown unpack directive %!v", s);
     }
     goto restart;
   }
 
   /* read suffix [0-9*_!<>] */
   while (tmpl->idx < tlen) {
     ch = tptr[tmpl->idx];
     if (ISDIGIT(ch)) {
       char *e;
       mrb_int n;
       if (!mrb_read_int(tptr+tmpl->idx, tptr+tlen, &e, &n) || INT_MAX < n) {
         mrb_raise(mrb, E_RUNTIME_ERROR, "too big template length");
       }
       count = (int)n;
       tmpl->idx = (int)(e - tptr);
       continue;
     }
     else if (ch == '*')  {
       if (type == PACK_TYPE_NONE)
         count = 0;
       else
         count = -1;
     }
     else if (ch == '_' || ch == '!' || ch == '<' || ch == '>') {
       if (strchr("sSiIlLqQ", (int)t) == NULL) {
         mrb_raisef(mrb, E_ARGUMENT_ERROR, "'%c' allowed only after types sSiIlLqQ", ch);
       }
       if (ch == '_' || ch == '!') {
         flags |= PACK_FLAG_s;
       }
       else if (ch == '<') {
         flags |= PACK_FLAG_LT;
       }
       else if (ch == '>') {
         flags |= PACK_FLAG_GT;
       }
     }
     else {
       break;
     }
     tmpl->idx++;
   }
 
   if ((flags & PACK_FLAG_LT) || (!(flags & PACK_FLAG_GT) && littleendian)) {
     flags |= PACK_FLAG_LITTLEENDIAN;
   }
 
   *typep = type;
   *sizep = size;
   *countp = count;
   *flagsp = flags;
   return dir;
 }
@@ -1496,126 +1498,127 @@ static mrb_value
 mrb_pack_pack(mrb_state *mrb, mrb_value ary)
 {
   mrb_value o, result;
   mrb_int aidx;
   struct tmpl tmpl;
   int count;
   unsigned int flags;
   enum pack_dir dir;
   enum pack_type type;
   int ridx, size;
 
   prepare_tmpl(mrb, &tmpl);
 
   result = mrb_str_new(mrb, NULL, 128);  /* allocate initial buffer */
   aidx = 0;
   ridx = 0;
   while (has_tmpl(&tmpl)) {
     dir = read_tmpl(mrb, &tmpl, &type, &size, &count, &flags);
 
+    if (dir == PACK_DIR_NONE) break;
     if (dir == PACK_DIR_NUL) {
     grow:
       if (ridx > INT_MAX - count) goto overflow;
       ridx += pack_nul(mrb, result, ridx, count);
       continue;
     }
     else if (dir == PACK_DIR_BACK) {
       check_x(mrb, ridx, count, 'X');
       ridx -= count;
       continue;
     }
     else if (dir == PACK_DIR_ABS) {
       count -= ridx;
       if (count > 0) goto grow;
       count = -count;
       check_x(mrb, ridx, count, '@');
       ridx -= count;
       continue;
     }
 
     if ((flags & PACK_FLAG_WIDTH) && aidx >= RARRAY_LEN(ary)) {
       mrb_raise(mrb, E_ARGUMENT_ERROR, "too few arguments");
     }
     for (; aidx < RARRAY_LEN(ary); aidx++) {
       if (count == 0 && !(flags & PACK_FLAG_WIDTH))
         break;
 
       o = RARRAY_PTR(ary)[aidx];
       if (type == PACK_TYPE_INTEGER) {
         o = mrb_ensure_int_type(mrb, o);
       }
 #ifndef MRB_NO_FLOAT
       else if (type == PACK_TYPE_FLOAT) {
         if (!mrb_float_p(o)) {
           o = mrb_ensure_float_type(mrb, o);
         }
       }
 #endif
       else if (type == PACK_TYPE_STRING) {
         if (!mrb_string_p(o)) {
           mrb_raisef(mrb, E_TYPE_ERROR, "can't convert %T into String", o);
         }
       }
 
       switch (dir) {
       case PACK_DIR_CHAR:
         ridx += pack_char(mrb, o, result, ridx, flags);
         break;
       case PACK_DIR_SHORT:
         ridx += pack_short(mrb, o, result, ridx, flags);
         break;
       case PACK_DIR_LONG:
         ridx += pack_long(mrb, o, result, ridx, flags);
         break;
       case PACK_DIR_QUAD:
         ridx += pack_quad(mrb, o, result, ridx, flags);
         break;
       case PACK_DIR_BER:
         ridx += pack_BER(mrb, o, result, ridx, flags);
         break;
       case PACK_DIR_BASE64:
         ridx += pack_base64(mrb, o, result, ridx, count);
         break;
       case PACK_DIR_QENC:
         ridx += pack_qenc(mrb, o, result, ridx, count);
         break;
       case PACK_DIR_HEX:
         ridx += pack_hex(mrb, o, result, ridx, count, flags);
         break;
       case PACK_DIR_BSTR:
         ridx += pack_bstr(mrb, o, result, ridx, count, flags);
         break;
       case PACK_DIR_STR:
         ridx += pack_str(mrb, o, result, ridx, count, flags);
         break;
 #ifndef MRB_NO_FLOAT
       case PACK_DIR_DOUBLE:
         ridx += pack_double(mrb, o, result, ridx, flags);
         break;
       case PACK_DIR_FLOAT:
         ridx += pack_float(mrb, o, result, ridx, flags);
         break;
 #endif
       case PACK_DIR_UTF8:
         ridx += pack_utf8(mrb, o, result, ridx, count, flags);
         break;
       default:
         break;
       }
       if (flags & PACK_FLAG_COUNT2) {
         /* always consumes 1 entry */
         aidx++;
         break;
       }
       if (count > 0) {
         count--;
       }
     }
     if (ridx < 0) {
     overflow:
       mrb_raise(mrb, E_RANGE_ERROR, "negative (or overflowed) template size");
     }
   }
 
   mrb_str_resize(mrb, result, ridx);
   return result;
 }
@@ -1624,111 +1627,112 @@ static mrb_value
 pack_unpack(mrb_state *mrb, mrb_value str, int single)
 {
   mrb_value result;
   struct tmpl tmpl;
   int count;
   unsigned int flags;
   enum pack_dir dir;
   enum pack_type type;
   int size;
   int srcidx, srclen;
   const unsigned char *sptr;
 
   prepare_tmpl(mrb, &tmpl);
 
   srcidx = 0;
   srclen = (int)RSTRING_LEN(str);
 
   result = mrb_ary_new(mrb);
   while (has_tmpl(&tmpl)) {
     dir = read_tmpl(mrb, &tmpl, &type, &size, &count, &flags);
 
+    if (dir == PACK_DIR_NONE) break;
     if (dir == PACK_DIR_NUL) {
       check_x(mrb, srclen-srcidx, count, 'x');
       srcidx += count;
       continue;
     }
     else if (dir == PACK_DIR_BACK) {
       check_x(mrb, srcidx, count, 'X');
       srcidx -= count;
       continue;
     }
     else if (dir == PACK_DIR_ABS) {
       check_x(mrb, srclen, count, '@');
       srcidx = count;
       continue;
     }
 
     /* PACK_FLAG_COUNT2 directions */
     sptr = (const unsigned char*)RSTRING_PTR(str) + srcidx;
     switch (dir) {
     case PACK_DIR_HEX:
       srcidx += unpack_hex(mrb, sptr, srclen - srcidx, result, count, flags);
       continue;
     case PACK_DIR_BSTR:
       srcidx += unpack_bstr(mrb, sptr, srclen - srcidx, result, count, flags);
       continue;
     case PACK_DIR_STR:
       srcidx += unpack_str(mrb, sptr, srclen - srcidx, result, count, flags);
       continue;
     case PACK_DIR_BASE64:
       srcidx += unpack_base64(mrb, sptr, srclen - srcidx, result);
       continue;
     case PACK_DIR_QENC:
       srcidx += unpack_qenc(mrb, sptr, srclen - srcidx, result);
       continue;
     default:
       break;
     }
 
     while (count != 0 && srcidx < srclen) {
       if (srclen - srcidx < size) {
         while (count-- > 0) {
           mrb_ary_push(mrb, result, mrb_nil_value());
         }
         break;
       }
 
       sptr = (const unsigned char*)RSTRING_PTR(str) + srcidx;
       switch (dir) {
       case PACK_DIR_CHAR:
         srcidx += unpack_char(mrb, sptr, srclen - srcidx, result, flags);
         break;
       case PACK_DIR_SHORT:
         srcidx += unpack_short(mrb, sptr, srclen - srcidx, result, flags);
         break;
       case PACK_DIR_LONG:
         srcidx += unpack_long(mrb, sptr, srclen - srcidx, result, flags);
         break;
       case PACK_DIR_QUAD:
         srcidx += unpack_quad(mrb, sptr, srclen - srcidx, result, flags);
         break;
       case PACK_DIR_BER:
         srcidx += unpack_BER(mrb, sptr, srclen - srcidx, result, flags);
         break;
 #ifndef MRB_NO_FLOAT
       case PACK_DIR_FLOAT:
         srcidx += unpack_float(mrb, sptr, srclen - srcidx, result, flags);
         break;
       case PACK_DIR_DOUBLE:
         srcidx += unpack_double(mrb, sptr, srclen - srcidx, result, flags);
         break;
 #endif
       case PACK_DIR_UTF8:
         srcidx += unpack_utf8(mrb, sptr, srclen - srcidx, result, flags);
         break;
       default:
         mrb_raise(mrb, E_RUNTIME_ERROR, "mruby-pack's bug");
       }
       if (count > 0) {
         count--;
       }
     }
     if (single) {
       if (RARRAY_LEN(result) > 0) {
         return RARRAY_PTR(result)[0];
       }
       return mrb_nil_value();
     }
   }
   return result;
 }
