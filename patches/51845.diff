commit 8e4a500a5c4cef1aafc2c6e47cadd3dea0bfb99b
Author: Alan Modra <amodra@gmail.com>
Date:   Wed Sep 28 09:52:22 2022 +0930

    asan: _bfd_stab_section_find_nearest_line segv
    
    The segv was on "info->strs[strsize - 1] = 0;" with strsize zero.  OK,
    if strsize is zero we don't have any filenames in stabs so no useful
    info.
    
            * syms.c (_bfd_stab_section_find_nearest_line): Exit if either
            stabsize or strsize is zero.

diff --git a/bfd/syms.c b/bfd/syms.c
index ec62f3457ca..e8077f59bf0 100644
--- a/bfd/syms.c
+++ b/bfd/syms.c
@@ -931,520 +931,523 @@ bool
 _bfd_stab_section_find_nearest_line (bfd *abfd,
 				     asymbol **symbols,
 				     asection *section,
 				     bfd_vma offset,
 				     bool *pfound,
 				     const char **pfilename,
 				     const char **pfnname,
 				     unsigned int *pline,
 				     void **pinfo)
 {
   struct stab_find_info *info;
   bfd_size_type stabsize, strsize;
   bfd_byte *stab, *str;
   bfd_byte *nul_fun, *nul_str;
   bfd_size_type stroff;
   struct indexentry *indexentry;
   char *file_name;
   char *directory_name;
   bool saw_line, saw_func;
 
   *pfound = false;
   *pfilename = bfd_get_filename (abfd);
   *pfnname = NULL;
   *pline = 0;
 
   /* Stabs entries use a 12 byte format:
        4 byte string table index
        1 byte stab type
        1 byte stab other field
        2 byte stab desc field
        4 byte stab value
      FIXME: This will have to change for a 64 bit object format.
 
      The stabs symbols are divided into compilation units.  For the
      first entry in each unit, the type of 0, the value is the length
      of the string table for this unit, and the desc field is the
      number of stabs symbols for this unit.  */
 
 #define STRDXOFF (0)
 #define TYPEOFF (4)
 #define OTHEROFF (5)
 #define DESCOFF (6)
 #define VALOFF (8)
 #define STABSIZE (12)
 
   info = (struct stab_find_info *) *pinfo;
   if (info != NULL)
     {
       if (info->stabsec == NULL || info->strsec == NULL)
 	{
 	  /* No usable stabs debugging information.  */
 	  return true;
 	}
 
       stabsize = (info->stabsec->rawsize
 		  ? info->stabsec->rawsize
 		  : info->stabsec->size);
       strsize = (info->strsec->rawsize
 		 ? info->strsec->rawsize
 		 : info->strsec->size);
     }
   else
     {
       long reloc_size, reloc_count;
       arelent **reloc_vector;
       int i;
       char *function_name;
       bfd_size_type amt = sizeof *info;
 
       info = (struct stab_find_info *) bfd_zalloc (abfd, amt);
       if (info == NULL)
 	return false;
       *pinfo = info;
 
       /* FIXME: When using the linker --split-by-file or
 	 --split-by-reloc options, it is possible for the .stab and
 	 .stabstr sections to be split.  We should handle that.  */
 
       info->stabsec = bfd_get_section_by_name (abfd, ".stab");
       info->strsec = bfd_get_section_by_name (abfd, ".stabstr");
 
       if (info->stabsec == NULL || info->strsec == NULL)
 	{
 	  /* Try SOM section names.  */
 	  info->stabsec = bfd_get_section_by_name (abfd, "$GDB_SYMBOLS$");
 	  info->strsec  = bfd_get_section_by_name (abfd, "$GDB_STRINGS$");
 
 	  if (info->stabsec == NULL || info->strsec == NULL)
 	    return true;
 	}
 
       stabsize = (info->stabsec->rawsize
 		  ? info->stabsec->rawsize
 		  : info->stabsec->size);
       stabsize = (stabsize / STABSIZE) * STABSIZE;
       strsize = (info->strsec->rawsize
 		 ? info->strsec->rawsize
 		 : info->strsec->size);
 
+      if (stabsize == 0 || strsize == 0)
+	goto out;
+
       if (!bfd_malloc_and_get_section (abfd, info->stabsec, &info->stabs))
 	goto out;
       if (!bfd_malloc_and_get_section (abfd, info->strsec, &info->strs))
 	goto out1;
 
       /* Stab strings ought to be nul terminated.  Ensure the last one
 	 is, to prevent running off the end of the buffer.  */
       info->strs[strsize - 1] = 0;
 
       /* If this is a relocatable object file, we have to relocate
 	 the entries in .stab.  This should always be simple 32 bit
 	 relocations against symbols defined in this object file, so
 	 this should be no big deal.  */
       reloc_size = bfd_get_reloc_upper_bound (abfd, info->stabsec);
       if (reloc_size < 0)
 	goto out2;
       reloc_vector = (arelent **) bfd_malloc (reloc_size);
       if (reloc_vector == NULL && reloc_size != 0)
 	goto out2;
       reloc_count = bfd_canonicalize_reloc (abfd, info->stabsec, reloc_vector,
 					    symbols);
       if (reloc_count < 0)
 	{
 	out3:
 	  free (reloc_vector);
 	out2:
 	  free (info->strs);
 	  info->strs = NULL;
 	out1:
 	  free (info->stabs);
 	  info->stabs = NULL;
 	out:
 	  info->stabsec = NULL;
 	  return false;
 	}
       if (reloc_count > 0)
 	{
 	  arelent **pr;
 
 	  for (pr = reloc_vector; *pr != NULL; pr++)
 	    {
 	      arelent *r;
 	      unsigned long val;
 	      asymbol *sym;
 	      bfd_size_type octets;
 
 	      r = *pr;
 	      /* Ignore R_*_NONE relocs.  */
 	      if (r->howto->dst_mask == 0)
 		continue;
 
 	      octets = r->address * bfd_octets_per_byte (abfd, NULL);
 	      if (r->howto->rightshift != 0
 		  || bfd_get_reloc_size (r->howto) != 4
 		  || r->howto->bitsize != 32
 		  || r->howto->pc_relative
 		  || r->howto->bitpos != 0
 		  || r->howto->dst_mask != 0xffffffff
 		  || octets + 4 > stabsize)
 		{
 		  _bfd_error_handler
 		    (_("unsupported .stab relocation"));
 		  bfd_set_error (bfd_error_invalid_operation);
 		  goto out3;
 		}
 
 	      val = bfd_get_32 (abfd, info->stabs + octets);
 	      val &= r->howto->src_mask;
 	      sym = *r->sym_ptr_ptr;
 	      val += sym->value + sym->section->vma + r->addend;
 	      bfd_put_32 (abfd, (bfd_vma) val, info->stabs + octets);
 	    }
 	}
 
       free (reloc_vector);
 
       /* First time through this function, build a table matching
 	 function VM addresses to stabs, then sort based on starting
 	 VM address.  Do this in two passes: once to count how many
 	 table entries we'll need, and a second to actually build the
 	 table.  */
 
       info->indextablesize = 0;
       nul_fun = NULL;
       for (stab = info->stabs; stab < info->stabs + stabsize; stab += STABSIZE)
 	{
 	  if (stab[TYPEOFF] == (bfd_byte) N_SO)
 	    {
 	      /* if we did not see a function def, leave space for one.  */
 	      if (nul_fun != NULL)
 		++info->indextablesize;
 
 	      /* N_SO with null name indicates EOF */
 	      if (bfd_get_32 (abfd, stab + STRDXOFF) == 0)
 		nul_fun = NULL;
 	      else
 		{
 		  nul_fun = stab;
 
 		  /* two N_SO's in a row is a filename and directory. Skip */
 		  if (stab + STABSIZE + TYPEOFF < info->stabs + stabsize
 		      && *(stab + STABSIZE + TYPEOFF) == (bfd_byte) N_SO)
 		    stab += STABSIZE;
 		}
 	    }
 	  else if (stab[TYPEOFF] == (bfd_byte) N_FUN
 		   && bfd_get_32 (abfd, stab + STRDXOFF) != 0)
 	    {
 	      nul_fun = NULL;
 	      ++info->indextablesize;
 	    }
 	}
 
       if (nul_fun != NULL)
 	++info->indextablesize;
 
       if (info->indextablesize == 0)
 	{
 	  free (info->strs);
 	  info->strs = NULL;
 	  free (info->stabs);
 	  info->stabs = NULL;
 	  info->stabsec = NULL;
 	  return true;
 	}
       ++info->indextablesize;
 
       amt = info->indextablesize;
       amt *= sizeof (struct indexentry);
       info->indextable = (struct indexentry *) bfd_malloc (amt);
       if (info->indextable == NULL)
 	goto out3;
 
       file_name = NULL;
       directory_name = NULL;
       nul_fun = NULL;
       stroff = 0;
 
       for (i = 0, stab = info->stabs, nul_str = str = info->strs;
 	   i < info->indextablesize && stab < info->stabs + stabsize;
 	   stab += STABSIZE)
 	{
 	  switch (stab[TYPEOFF])
 	    {
 	    case 0:
 	      /* This is the first entry in a compilation unit.  */
 	      if ((bfd_size_type) ((info->strs + strsize) - str) < stroff)
 		break;
 	      str += stroff;
 	      stroff = bfd_get_32 (abfd, stab + VALOFF);
 	      break;
 
 	    case N_SO:
 	      /* The main file name.  */
 
 	      /* The following code creates a new indextable entry with
 		 a NULL function name if there were no N_FUNs in a file.
 		 Note that a N_SO without a file name is an EOF and
 		 there could be 2 N_SO following it with the new filename
 		 and directory.  */
 	      if (nul_fun != NULL)
 		{
 		  info->indextable[i].val = bfd_get_32 (abfd, nul_fun + VALOFF);
 		  info->indextable[i].stab = nul_fun;
 		  info->indextable[i].str = nul_str;
 		  info->indextable[i].directory_name = directory_name;
 		  info->indextable[i].file_name = file_name;
 		  info->indextable[i].function_name = NULL;
 		  info->indextable[i].idx = i;
 		  ++i;
 		}
 
 	      directory_name = NULL;
 	      file_name = (char *) str + bfd_get_32 (abfd, stab + STRDXOFF);
 	      if (file_name == (char *) str)
 		{
 		  file_name = NULL;
 		  nul_fun = NULL;
 		}
 	      else
 		{
 		  nul_fun = stab;
 		  nul_str = str;
 		  if (file_name >= (char *) info->strs + strsize
 		      || file_name < (char *) str)
 		    file_name = NULL;
 		  if (stab + STABSIZE + TYPEOFF < info->stabs + stabsize
 		      && *(stab + STABSIZE + TYPEOFF) == (bfd_byte) N_SO)
 		    {
 		      /* Two consecutive N_SOs are a directory and a
 			 file name.  */
 		      stab += STABSIZE;
 		      directory_name = file_name;
 		      file_name = ((char *) str
 				   + bfd_get_32 (abfd, stab + STRDXOFF));
 		      if (file_name >= (char *) info->strs + strsize
 			  || file_name < (char *) str)
 			file_name = NULL;
 		    }
 		}
 	      break;
 
 	    case N_SOL:
 	      /* The name of an include file.  */
 	      file_name = (char *) str + bfd_get_32 (abfd, stab + STRDXOFF);
 	      /* PR 17512: file: 0c680a1f.  */
 	      /* PR 17512: file: 5da8aec4.  */
 	      if (file_name >= (char *) info->strs + strsize
 		  || file_name < (char *) str)
 		file_name = NULL;
 	      break;
 
 	    case N_FUN:
 	      /* A function name.  */
 	      function_name = (char *) str + bfd_get_32 (abfd, stab + STRDXOFF);
 	      if (function_name == (char *) str)
 		continue;
 	      if (function_name >= (char *) info->strs + strsize
 		  || function_name < (char *) str)
 		function_name = NULL;
 
 	      nul_fun = NULL;
 	      info->indextable[i].val = bfd_get_32 (abfd, stab + VALOFF);
 	      info->indextable[i].stab = stab;
 	      info->indextable[i].str = str;
 	      info->indextable[i].directory_name = directory_name;
 	      info->indextable[i].file_name = file_name;
 	      info->indextable[i].function_name = function_name;
 	      info->indextable[i].idx = i;
 	      ++i;
 	      break;
 	    }
 	}
 
       if (nul_fun != NULL)
 	{
 	  info->indextable[i].val = bfd_get_32 (abfd, nul_fun + VALOFF);
 	  info->indextable[i].stab = nul_fun;
 	  info->indextable[i].str = nul_str;
 	  info->indextable[i].directory_name = directory_name;
 	  info->indextable[i].file_name = file_name;
 	  info->indextable[i].function_name = NULL;
 	  info->indextable[i].idx = i;
 	  ++i;
 	}
 
       info->indextable[i].val = (bfd_vma) -1;
       info->indextable[i].stab = info->stabs + stabsize;
       info->indextable[i].str = str;
       info->indextable[i].directory_name = NULL;
       info->indextable[i].file_name = NULL;
       info->indextable[i].function_name = NULL;
       info->indextable[i].idx = i;
       ++i;
 
       info->indextablesize = i;
       qsort (info->indextable, (size_t) i, sizeof (struct indexentry),
 	     cmpindexentry);
     }
 
   /* We are passed a section relative offset.  The offsets in the
      stabs information are absolute.  */
   offset += bfd_section_vma (section);
 
 #ifdef ENABLE_CACHING
   if (info->cached_indexentry != NULL
       && offset >= info->cached_offset
       && offset < (info->cached_indexentry + 1)->val)
     {
       stab = info->cached_stab;
       indexentry = info->cached_indexentry;
       file_name = info->cached_file_name;
     }
   else
 #endif
     {
       long low, high;
       long mid = -1;
 
       /* Cache non-existent or invalid.  Do binary search on
 	 indextable.  */
       indexentry = NULL;
 
       low = 0;
       high = info->indextablesize - 1;
       while (low != high)
 	{
 	  mid = (high + low) / 2;
 	  if (offset >= info->indextable[mid].val
 	      && offset < info->indextable[mid + 1].val)
 	    {
 	      indexentry = &info->indextable[mid];
 	      break;
 	    }
 
 	  if (info->indextable[mid].val > offset)
 	    high = mid;
 	  else
 	    low = mid + 1;
 	}
 
       if (indexentry == NULL)
 	return true;
 
       stab = indexentry->stab + STABSIZE;
       file_name = indexentry->file_name;
     }
 
   directory_name = indexentry->directory_name;
   str = indexentry->str;
 
   saw_line = false;
   saw_func = false;
   for (; stab < (indexentry+1)->stab; stab += STABSIZE)
     {
       bool done;
       bfd_vma val;
 
       done = false;
 
       switch (stab[TYPEOFF])
 	{
 	case N_SOL:
 	  /* The name of an include file.  */
 	  val = bfd_get_32 (abfd, stab + VALOFF);
 	  if (val <= offset)
 	    {
 	      file_name = (char *) str + bfd_get_32 (abfd, stab + STRDXOFF);
 	      if (file_name >= (char *) info->strs + strsize
 		  || file_name < (char *) str)
 		file_name = NULL;
 	      *pline = 0;
 	    }
 	  break;
 
 	case N_SLINE:
 	case N_DSLINE:
 	case N_BSLINE:
 	  /* A line number.  If the function was specified, then the value
 	     is relative to the start of the function.  Otherwise, the
 	     value is an absolute address.  */
 	  val = ((indexentry->function_name ? indexentry->val : 0)
 		 + bfd_get_32 (abfd, stab + VALOFF));
 	  /* If this line starts before our desired offset, or if it's
 	     the first line we've been able to find, use it.  The
 	     !saw_line check works around a bug in GCC 2.95.3, which emits
 	     the first N_SLINE late.  */
 	  if (!saw_line || val <= offset)
 	    {
 	      *pline = bfd_get_16 (abfd, stab + DESCOFF);
 
 #ifdef ENABLE_CACHING
 	      info->cached_stab = stab;
 	      info->cached_offset = val;
 	      info->cached_file_name = file_name;
 	      info->cached_indexentry = indexentry;
 #endif
 	    }
 	  if (val > offset)
 	    done = true;
 	  saw_line = true;
 	  break;
 
 	case N_FUN:
 	case N_SO:
 	  if (saw_func || saw_line)
 	    done = true;
 	  saw_func = true;
 	  break;
 	}
 
       if (done)
 	break;
     }
 
   *pfound = true;
 
   if (file_name == NULL || IS_ABSOLUTE_PATH (file_name)
       || directory_name == NULL)
     *pfilename = file_name;
   else
     {
       size_t dirlen;
 
       dirlen = strlen (directory_name);
       if (info->filename == NULL
 	  || filename_ncmp (info->filename, directory_name, dirlen) != 0
 	  || filename_cmp (info->filename + dirlen, file_name) != 0)
 	{
 	  size_t len;
 
 	  /* Don't free info->filename here.  objdump and other
 	     apps keep a copy of a previously returned file name
 	     pointer.  */
 	  len = strlen (file_name) + 1;
 	  info->filename = (char *) bfd_alloc (abfd, dirlen + len);
 	  if (info->filename == NULL)
 	    return false;
 	  memcpy (info->filename, directory_name, dirlen);
 	  memcpy (info->filename + dirlen, file_name, len);
 	}
 
       *pfilename = info->filename;
     }
 
   if (indexentry->function_name != NULL)
     {
       char *s;
 
       /* This will typically be something like main:F(0,1), so we want
 	 to clobber the colon.  It's OK to change the name, since the
 	 string is in our own local storage anyhow.  */
       s = strchr (indexentry->function_name, ':');
       if (s != NULL)
 	*s = '\0';
 
       *pfnname = indexentry->function_name;
     }
 
   return true;
 }
