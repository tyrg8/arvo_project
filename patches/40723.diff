commit b788baad3e9d9ba028d3d115e272e94a30227e17
Author: Andrew Stitcher <astitcher@apache.org>
Date:   Fri Nov 5 14:16:09 2021 +0000

    PROTON-2457: Buffer overrun found by fuzzing

diff --git a/c/src/core/consumers.h b/c/src/core/consumers.h
index 48c3a0a6..930c7c71 100644
--- a/c/src/core/consumers.h
+++ b/c/src/core/consumers.h
@@ -533,21 +533,22 @@ static inline bool consume_atom(pni_consumer_t* consumer, pn_atom_t *atom) {
 // XXX: assuming numeric -
 // if we get a symbol we should map it to the numeric value and dispatch on that
 static inline bool consume_descriptor(pni_consumer_t* consumer, pni_consumer_t *subconsumer, uint64_t *descriptor) {
   *descriptor = 0;
   *subconsumer = (pni_consumer_t){.output_start=consumer->output_start+consumer->position, .position=0, .size=0};
   uint8_t type;
   if (!pni_consumer_readf8(consumer, &type)) return false;
   switch (type) {
     case PNE_DESCRIPTOR: {
       bool lq = consume_ulong(consumer, descriptor);
       size_t sposition = consumer->position;
       uint8_t type;
       consume_single_value_not_described(consumer, &type);
-      *subconsumer = (pni_consumer_t){.output_start=consumer->output_start+sposition, .position=0, .size=consumer->position-sposition};
+      size_t scsize = consumer->position > sposition ? consumer->position-sposition : 0;
+      *subconsumer = (pni_consumer_t){.output_start=consumer->output_start+sposition, .position=0, .size=scsize};
       return lq;
     }
     default:
       pni_consumer_skip_value_not_described(consumer, type);
       return false;
   }
 }
@@ -555,32 +556,34 @@ static inline bool consume_descriptor(pni_consumer_t* consumer, pni_consumer_t *
 static inline bool consume_list(pni_consumer_t* consumer, pni_consumer_t *subconsumer, uint32_t *count) {
   *subconsumer = (pni_consumer_t){.output_start=consumer->output_start+consumer->position, .position=0, .size=0};
   *count = 0;
   uint8_t type;
   if (!pni_consumer_readf8(consumer, &type)) return false;
   switch (type) {
     case PNE_LIST32: {
       uint32_t s;
       if (!pni_consumer_readf32(consumer, &s)) return false;
-      *subconsumer = (pni_consumer_t){.output_start=consumer->output_start+consumer->position, .position=0, .size=s};
-      consumer->position += s;
+      size_t scsize = s < consumer->size-consumer->position ? s : consumer->size-consumer->position;
+      *subconsumer = (pni_consumer_t){.output_start=consumer->output_start+consumer->position, .position=0, .size=scsize};
+      consumer->position += scsize;
       return pni_consumer_readf32(subconsumer, count);
     }
     case PNE_LIST8: {
       uint8_t s;
       if (!pni_consumer_readf8(consumer, &s)) return false;
-      *subconsumer = (pni_consumer_t){.output_start=consumer->output_start+consumer->position, .position=0, .size=s};
-      consumer->position += s;
+      size_t scsize = s < consumer->size-consumer->position ? s : consumer->size-consumer->position;
+      *subconsumer = (pni_consumer_t){.output_start=consumer->output_start+consumer->position, .position=0, .size=scsize};
+      consumer->position += scsize;
       uint8_t c;
       if (!pni_consumer_readf8(subconsumer, &c)) return false;
       *count = c;
       return true;
     }
     case PNE_LIST0:
       return true;
     default:
       pni_consumer_skip_value(consumer, type);
       return false;
   }
 }
 
 // TODO: This is currently a placeholder - maybe not actually needed
@@ -591,30 +594,32 @@ static inline bool consume_end_list(pni_consumer_t *consumer) {
 static inline bool consume_array(pni_consumer_t* consumer, pni_consumer_t *subconsumer, uint32_t *count, uint8_t *element_type) {
   *subconsumer = (pni_consumer_t){.output_start=consumer->output_start+consumer->position, .position=0, .size=0};
   *count = 0;
   *element_type = 0;
   uint8_t type;
   if (!pni_consumer_readf8(consumer, &type)) return false;
   switch (type) {
     case PNE_ARRAY32: {
       uint32_t s;
       if (!pni_consumer_readf32(consumer, &s)) return false;
-      *subconsumer = (pni_consumer_t){.output_start=consumer->output_start+consumer->position, .position=0, .size=s};
-      consumer->position += s;
+      size_t scsize = s < consumer->size-consumer->position ? s : consumer->size-consumer->position;
+      *subconsumer = (pni_consumer_t){.output_start=consumer->output_start+consumer->position, .position=0, .size=scsize};
+      consumer->position += scsize;
       if (!pni_consumer_readf32(subconsumer, count)) return false;
       return pni_consumer_readf8(subconsumer, element_type);
     }
     case PNE_ARRAY8: {
       uint8_t s;
       if (!pni_consumer_readf8(consumer, &s)) return false;
-      *subconsumer = (pni_consumer_t){.output_start=consumer->output_start+consumer->position, .position=0, .size=s};
-      consumer->position += s;
+      size_t scsize = s < consumer->size-consumer->position ? s : consumer->size-consumer->position;
+      *subconsumer = (pni_consumer_t){.output_start=consumer->output_start+consumer->position, .position=0, .size=scsize};
+      consumer->position += scsize;
       uint8_t c;
       if (!pni_consumer_readf8(subconsumer, &c)) return false;
       *count = c;
       return pni_consumer_readf8(subconsumer, element_type);
     }
     default:
       pni_consumer_skip_value(consumer, type);
       return false;
   }
 }
diff --git a/c/tests/fuzz/fuzz-message-decode/minimized-fuzz-message-decode-6101905114267648 b/c/tests/fuzz/fuzz-message-decode/minimized-fuzz-message-decode-6101905114267648
new file mode 100644
index 00000000..a8d73e89
Binary files /dev/null and b/c/tests/fuzz/fuzz-message-decode/minimized-fuzz-message-decode-6101905114267648 differ
