commit 38ea1ba75c7022318596c1be5bc289f0195a2bfd
Merge: b0bda93 99f6b5d
Author: Dirk Farin <dirk.farin@gmail.com>
Date:   Tue Jan 24 11:22:21 2023 +0100

    Merge pull request #770 from strukturag/windows-plugins
    
    plugin support for Windows

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9b29a61..42187bd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -60,9 +60,9 @@ LIST (APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake/modules")
 option(ENABLE_PLUGIN_LOADING "Support loading of plugins" ON)
 set(PLUGIN_DIRECTORY "${CMAKE_INSTALL_FULL_LIBDIR}/libheif" CACHE STRING "Plugin install directory")
 
-if (ENABLE_PLUGIN_LOADING AND UNIX)
+if (ENABLE_PLUGIN_LOADING)
     set(PLUGIN_LOADING_SUPPORTED_AND_ENABLED TRUE)
     install(DIRECTORY DESTINATION ${PLUGIN_DIRECTORY} DIRECTORY_PERMISSIONS 
         OWNER_WRITE OWNER_READ OWNER_EXECUTE
         GROUP_READ GROUP_EXECUTE
         WORLD_READ WORLD_EXECUTE)
diff --git a/README.md b/README.md
index abc23d9..9339abd 100644
--- a/README.md
+++ b/README.md
@@ -213,7 +213,7 @@ You can choose this individually for each codec backend in the CMake settings.
 Compiling a codec backend as dynamic plugin will generate a shared library that is installed in the system together with libheif.
 The advantage is that only the required plugins have to be installed and libheif has fewer dependencies.
 
-The plugins are loaded from the colon-separated list of directories stored in the environment variable `LIBHEIF_PLUGIN_PATH`.
+The plugins are loaded from the colon-separated (semicolon-separated on Windows) list of directories stored in the environment variable `LIBHEIF_PLUGIN_PATH`.
 If this variable is empty, they are loaded from a directory specified in the CMake configuration.
 You can also add plugin directories programmatically.
 
diff --git a/libheif/CMakeLists.txt b/libheif/CMakeLists.txt
index 4c00991..9da6a7b 100644
--- a/libheif/CMakeLists.txt
+++ b/libheif/CMakeLists.txt
@@ -11,39 +11,45 @@ set(libheif_headers
 add_library(heif
     bitstream.cc
     box.cc
     error.cc
     heif.cc
     heif_context.cc
     heif_file.cc
     heif_image.cc
     heif_hevc.cc
     heif_avif.cc
     heif_colorconversion.cc
     heif_plugin_registry.cc
     heif_plugin.cc
     nclx.cc
     bitstream.h
     box.h
     error.h
     heif_api_structs.h
     heif_context.h
     heif_file.h
     heif_image.h
     heif_hevc.h
     heif_avif.h
     heif_colorconversion.h
     heif_plugin_registry.h
     heif_limits.h
     heif_init.cc heif_init.h
     nclx.h
     logging.h
     metadata_compression.cc
     metadata_compression.h
     common_utils.cc
     common_utils.h
     ${libheif_headers}
     )
 
+if (WIN32)
+    target_sources(heif PRIVATE plugins_windows.cc plugins_windows.h)
+else ()
+    target_sources(heif PRIVATE plugins_unix.cc plugins_unix.h)
+endif ()
+
 # Needed to find libheif/heif_version.h while compiling the library
 target_include_directories(heif PRIVATE ${libheif_BINARY_DIR} ${libheif_SOURCE_DIR})
 
diff --git a/libheif/Makefile.am b/libheif/Makefile.am
index 722578c..521447d 100644
--- a/libheif/Makefile.am
+++ b/libheif/Makefile.am
@@ -189,6 +189,9 @@ file_fuzzer_LDFLAGS = $(FUZZING_ENGINE)
 file_fuzzer_LDADD = $(ADDITIONAL_LIBS)
 file_fuzzer_SOURCES = $(libheif_la_SOURCES) file_fuzzer.cc
 
+# hack, plugin_*.h files are not used by autotools, because our autotools build scripts don't support plugins, but we need it anyways
 EXTRA_DIST = \
   CMakeLists.txt \
-  plugins/CMakeLists.txt
+  plugins/CMakeLists.txt \
+  plugins_unix.h \
+  plugins_windows.h
diff --git a/libheif/common_utils.h b/libheif/common_utils.h
index 95c3315..96edc44 100644
--- a/libheif/common_utils.h
+++ b/libheif/common_utils.h
@@ -1,29 +1,36 @@
 /*
  * HEIF codec.
  * Copyright (c) 2023 Dirk Farin <dirk.farin@gmail.com>
  *
  * This file is part of libheif.
  *
  * libheif is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
  * published by the Free Software Foundation, either version 3 of
  * the License, or (at your option) any later version.
  *
  * libheif is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  *
  * You should have received a copy of the GNU Lesser General Public License
  * along with libheif.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef LIBHEIF_COMMON_UTILS_H
 #define LIBHEIF_COMMON_UTILS_H
 
 #include <cinttypes>
 #include <libheif/heif.h>
 
+#ifdef _MSC_VER
+#define MAYBE_UNUSED
+#else
+#define MAYBE_UNUSED __attribute__((unused))
+#endif
+
+
 // Functions for common use in libheif and the plugins.
 
 uint8_t chroma_h_subsampling(heif_chroma c);
diff --git a/libheif/heif_init.cc b/libheif/heif_init.cc
index 6f0df64..a476c64 100644
--- a/libheif/heif_init.cc
+++ b/libheif/heif_init.cc
@@ -1,32 +1,39 @@
 /*
  * HEIF codec.
  * Copyright (c) 2022 Dirk Farin <dirk.farin@gmail.com>
  *
  * This file is part of libheif.
  *
  * libheif is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
  * published by the Free Software Foundation, either version 3 of
  * the License, or (at your option) any later version.
  *
  * libheif is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  *
  * You should have received a copy of the GNU Lesser General Public License
  * along with libheif.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "heif_init.h"
 #include "heif.h"
 #include "error.h"
 #include "heif_plugin_registry.h"
+#include "common_utils.h"
 
 #if ENABLE_MULTITHREADING_SUPPORT
 #include <mutex>
 #endif
 
+#if defined(_WIN32)
+#include "plugins_windows.h"
+#else
+#include "plugins_unix.h"
+#endif
+
 using namespace heif;
 
 void heif_unload_all_plugins();
@@ -35,7 +42,23 @@ void heif_unload_all_plugins();
 
 void heif_unregister_encoder_plugin(const heif_encoder_plugin* plugin);
 
-std::vector<std::string> get_plugin_paths();
+std::vector<std::string> get_plugin_paths()
+{
+#if defined(_WIN32)
+  return get_plugin_directories_from_environment_variable_windows();
+#else
+  return get_plugin_directories_from_environment_variable_unix();
+#endif
+}
+
+std::vector<std::string> list_all_potential_plugins_in_directory(const char* directory)
+{
+#if defined(_WIN32)
+  return list_all_potential_plugins_in_directory_windows(directory);
+#else
+  return list_all_potential_plugins_in_directory_unix(directory);
+#endif
+}
 
 #endif
 
@@ -108,30 +131,27 @@ static void heif_unregister_decoder_plugins()
 static void heif_unregister_encoder_plugins()
 {
   for (const auto& plugin : heif::s_encoder_descriptors) {
     if (plugin->plugin->cleanup_plugin) {
       (*plugin->plugin->cleanup_plugin)();
     }
   }
   heif::s_encoder_descriptors.clear();
 }
 
-#if defined(__linux__) && ENABLE_PLUGIN_LOADING
-
-// Currently only linux, as we don't have dynamic plugins for other systems yet.
+#if ENABLE_PLUGIN_LOADING
 void heif_unregister_encoder_plugin(const heif_encoder_plugin* plugin)
 {
   if (plugin->cleanup_plugin) {
     (*plugin->cleanup_plugin)();
   }
 
   for (auto iter = heif::s_encoder_descriptors.begin() ; iter != heif::s_encoder_descriptors.end(); ++iter) {
     if ((*iter)->plugin == plugin) {
       heif::s_encoder_descriptors.erase(iter);
       return;
     }
   }
 }
-
 #endif
 
 void heif_deinit()
@@ -162,231 +182,182 @@ void heif_deinit()
 #include <string>
 
 #if ENABLE_PLUGIN_LOADING
+
+#if defined(_WIN32)
+typedef PluginLibrary_Windows PluginLibrary_SysDep;
+#else
+typedef PluginLibrary_Unix PluginLibrary_SysDep;
+#endif
+
+
+
 struct loaded_plugin
 {
-  void* plugin_library_handle = nullptr;
+  PluginLibrary_SysDep plugin_library_handle;
   struct heif_plugin_info* info = nullptr;
   int openCnt = 0;
 };
 
 static std::vector<loaded_plugin> sLoadedPlugins;
 
-__attribute__((unused)) static heif_error error_dlopen{heif_error_Plugin_loading_error, heif_suberror_Plugin_loading_error, "Cannot open plugin (dlopen)."};
-__attribute__((unused)) static heif_error error_plugin_not_loaded{heif_error_Plugin_loading_error, heif_suberror_Plugin_is_not_loaded, "Trying to remove a plugin that is not loaded."};
-__attribute__((unused)) static heif_error error_cannot_read_plugin_directory{heif_error_Plugin_loading_error, heif_suberror_Cannot_read_plugin_directory, "Cannot read plugin directory."};
-#endif
-
+MAYBE_UNUSED heif_error error_dlopen{heif_error_Plugin_loading_error, heif_suberror_Plugin_loading_error, "Cannot open plugin (dlopen)."};
+MAYBE_UNUSED heif_error error_plugin_not_loaded{heif_error_Plugin_loading_error, heif_suberror_Plugin_is_not_loaded, "Trying to remove a plugin that is not loaded."};
+MAYBE_UNUSED heif_error error_cannot_read_plugin_directory{heif_error_Plugin_loading_error, heif_suberror_Cannot_read_plugin_directory, "Cannot read plugin directory."};
 
-#if ENABLE_PLUGIN_LOADING
-
-__attribute__((unused)) static void unregister_plugin(const heif_plugin_info* info)
+MAYBE_UNUSED static void unregister_plugin(const heif_plugin_info* info)
 {
   switch (info->type) {
     case heif_plugin_type_encoder: {
       auto* encoder_plugin = static_cast<const heif_encoder_plugin*>(info->plugin);
       heif_unregister_encoder_plugin(encoder_plugin);
       break;
     }
     case heif_plugin_type_decoder: {
       // TODO
     }
   }
 }
 
-#endif
-
-
-#if ENABLE_PLUGIN_LOADING && defined(__linux__)
-
-#include <dlfcn.h>
-#include <dirent.h>
-#include <cstring>
 
 struct heif_error heif_load_plugin(const char* filename, struct heif_plugin_info const** out_plugin)
 {
 #if ENABLE_MULTITHREADING_SUPPORT
   std::lock_guard<std::recursive_mutex> lock(heif_init_mutex());
 #endif
 
-  void* plugin_handle = dlopen(filename, RTLD_LAZY);
-  if (!plugin_handle) {
-    fprintf(stderr, "dlopen: %s\n", dlerror());
-    return error_dlopen;
+  PluginLibrary_SysDep plugin;
+  auto err = plugin.load_from_file(filename);
+  if (err.code) {
+    return err;
   }
 
-  auto* plugin_info = (heif_plugin_info*) dlsym(plugin_handle, "plugin_info");
-  if (!plugin_info) {
-    fprintf(stderr, "dlsym: %s\n", dlerror());
-    return error_dlopen;
-  }
+  heif_plugin_info* plugin_info = plugin.get_plugin_info();
 
   // --- check whether the plugin is already loaded
   // If yes, return pointer to existing plugin.
 
   for (auto& p : sLoadedPlugins) {
-    if (p.plugin_library_handle == plugin_handle) {
+    if (p.plugin_library_handle == plugin) {
       if (out_plugin) {
         *out_plugin = p.info;
         p.openCnt++;
         return heif_error_ok;
       }
     }
   }
 
   loaded_plugin loadedPlugin;
-  loadedPlugin.plugin_library_handle = plugin_handle;
+  loadedPlugin.plugin_library_handle = plugin;
   loadedPlugin.openCnt = 1;
   loadedPlugin.info = plugin_info;
   sLoadedPlugins.push_back(loadedPlugin);
 
   *out_plugin = plugin_info;
 
-  switch (plugin_info->type) {
+  switch (loadedPlugin.info->type) {
     case heif_plugin_type_encoder: {
       auto* encoder_plugin = static_cast<const heif_encoder_plugin*>(plugin_info->plugin);
       struct heif_error err = heif_register_encoder_plugin(encoder_plugin);
       if (err.code) {
         return err;
       }
       break;
     }
 
     case heif_plugin_type_decoder: {
       auto* decoder_plugin = static_cast<const heif_decoder_plugin*>(plugin_info->plugin);
       struct heif_error err = heif_register_decoder_plugin(decoder_plugin);
       if (err.code) {
         return err;
       }
       break;
     }
   }
 
   return heif_error_ok;
 }
 
-
 struct heif_error heif_unload_plugin(const struct heif_plugin_info* plugin)
 {
 #if ENABLE_MULTITHREADING_SUPPORT
   std::lock_guard<std::recursive_mutex> lock(heif_init_mutex());
 #endif
 
   for (size_t i = 0; i < sLoadedPlugins.size(); i++) {
     auto& p = sLoadedPlugins[i];
 
     if (p.info == plugin) {
-      dlclose(p.plugin_library_handle);
+      p.plugin_library_handle.release();
       p.openCnt--;
 
       if (p.openCnt == 0) {
         unregister_plugin(plugin);
 
         sLoadedPlugins[i] = sLoadedPlugins.back();
         sLoadedPlugins.pop_back();
       }
 
       return heif_error_ok;
     }
   }
 
   return error_plugin_not_loaded;
 }
 
-
 void heif_unload_all_plugins()
 {
 #if ENABLE_MULTITHREADING_SUPPORT
   std::lock_guard<std::recursive_mutex> lock(heif_init_mutex());
 #endif
 
   for (auto& p : sLoadedPlugins) {
     unregister_plugin(p.info);
 
     for (int i = 0; i < p.openCnt; i++) {
-      dlclose(p.plugin_library_handle);
+      p.plugin_library_handle.release();
     }
   }
 
   sLoadedPlugins.clear();
 }
 
-
 struct heif_error heif_load_plugins(const char* directory,
                                     const struct heif_plugin_info** out_plugins,
                                     int* out_nPluginsLoaded,
                                     int output_array_size)
 {
-  DIR* dir = opendir(directory);
-  if (dir == nullptr) {
-    return error_cannot_read_plugin_directory;
-  }
+  auto libraryFiles = list_all_potential_plugins_in_directory(directory);
 
   int nPlugins = 0;
 
-  struct dirent* d;
-  for (;;) {
-    d = readdir(dir);
-    if (d == nullptr) {
-      break;
-    }
+  for (const auto& filename : libraryFiles) {
 
-    if ((d->d_type == DT_REG || d->d_type == DT_LNK) && strlen(d->d_name) > 3 &&
-        strcmp(d->d_name + strlen(d->d_name) - 3, ".so") == 0) {
-      std::string filename = directory;
-      filename += '/';
-      filename += d->d_name;
-      //printf("load %s\n", filename.c_str());
-
-      const struct heif_plugin_info* info = nullptr;
-      auto err = heif_load_plugin(filename.c_str(), &info);
-      if (err.code == 0) {
-        if (out_plugins) {
-          if (nPlugins == output_array_size) {
-            break;
-          }
-
-          out_plugins[nPlugins] = info;
+    const struct heif_plugin_info* info = nullptr;
+    auto err = heif_load_plugin(filename.c_str(), &info);
+    if (err.code == 0) {
+      if (out_plugins) {
+        if (nPlugins == output_array_size) {
+          break;
         }
 
-        nPlugins++;
+        out_plugins[nPlugins] = info;
       }
+
+      nPlugins++;
     }
   }
 
   if (nPlugins < output_array_size && out_plugins) {
     out_plugins[nPlugins] = nullptr;
   }
 
   if (out_nPluginsLoaded) {
     *out_nPluginsLoaded = nPlugins;
   }
 
-  closedir(dir);
-
   return heif_error_ok;
 }
 
-
-std::vector<std::string> get_plugin_paths()
-{
-  char* path_variable = getenv("LIBHEIF_PLUGIN_PATH");
-  if (path_variable == nullptr) {
-    return {};
-  }
-
-  // --- split LIBHEIF_PLUGIN_PATH value at ':' into separate directories
-
-  std::vector<std::string> plugin_paths;
-
-  std::istringstream paths(path_variable);
-  std::string dir;
-  while (getline(paths, dir, ':')) {
-    plugin_paths.push_back(dir);
-  }
-
-  return plugin_paths;
-}
-
 #else
 static heif_error heif_error_plugins_unsupported{heif_error_Unsupported_feature, heif_suberror_Unspecified, "Plugins are not supported"};
 
@@ -412,9 +383,4 @@ struct heif_error heif_load_plugins(const char* directory,
   return heif_error_plugins_unsupported;
 }
 
-std::vector<std::string> get_plugin_paths()
-{
-  return {};
-}
-
 #endif
diff --git a/libheif/heif_init.h b/libheif/heif_init.h
index dfb07d5..8f41542 100644
--- a/libheif/heif_init.h
+++ b/libheif/heif_init.h
@@ -22,11 +22,29 @@
 #ifndef LIBHEIF_HEIF_INIT_H
 #define LIBHEIF_HEIF_INIT_H
 
+#include "libheif/heif.h"
+
+extern heif_error error_dlopen;
+extern heif_error error_plugin_not_loaded;
+extern heif_error error_cannot_read_plugin_directory;
+
 namespace heif {
   // TODO: later, we might defer the default plugin initialization to when they are actually used for the first time.
   // That would prevent them from being initialized every time at program start, even when the application software uses heif_init() later on.
 
+  // Note: the loaded plugin is not released automatically then the class is released, because this would require that
+  // we reference-count the handle. We do not really need this since releasing the library explicitly with release() is simple enough.
+  class PluginLibrary
+  {
+  public:
+    virtual struct heif_error load_from_file(const char*) = 0;
+
+    virtual void release() = 0;
+
+    virtual struct heif_plugin_info* get_plugin_info() = 0;
+  };
+
   // void implicit_plugin_registration();
 }
 
 #endif //LIBHEIF_HEIF_INIT_H
diff --git a/libheif/plugins/heif_decoder_aom.h b/libheif/plugins/heif_decoder_aom.h
index de1e9c5..e570c75 100644
--- a/libheif/plugins/heif_decoder_aom.h
+++ b/libheif/plugins/heif_decoder_aom.h
@@ -21,12 +21,14 @@
 #ifndef LIBHEIF_HEIF_DECODER_AOM_H
 #define LIBHEIF_HEIF_DECODER_AOM_H
 
+#include "libheif/common_utils.h"
+
 const struct heif_decoder_plugin* get_decoder_plugin_aom();
 
 #if PLUGIN_AOM_DECODER
 extern "C" {
-__attribute__((unused)) LIBHEIF_API extern heif_plugin_info plugin_info;
+MAYBE_UNUSED LIBHEIF_API extern heif_plugin_info plugin_info;
 }
 #endif
 
 #endif
diff --git a/libheif/plugins/heif_decoder_dav1d.h b/libheif/plugins/heif_decoder_dav1d.h
index 9beff47..5ea2958 100644
--- a/libheif/plugins/heif_decoder_dav1d.h
+++ b/libheif/plugins/heif_decoder_dav1d.h
@@ -21,12 +21,14 @@
 #ifndef LIBHEIF_HEIF_DECODER_DAV1D_H
 #define LIBHEIF_HEIF_DECODER_DAV1D_H
 
+#include "libheif/common_utils.h"
+
 const struct heif_decoder_plugin* get_decoder_plugin_dav1d();
 
 #if PLUGIN_DAV1D
 extern "C" {
-__attribute__((unused)) LIBHEIF_API extern heif_plugin_info plugin_info;
+MAYBE_UNUSED LIBHEIF_API extern heif_plugin_info plugin_info;
 }
 #endif
 
 #endif
diff --git a/libheif/plugins/heif_decoder_libde265.h b/libheif/plugins/heif_decoder_libde265.h
index d023062..5e59da9 100644
--- a/libheif/plugins/heif_decoder_libde265.h
+++ b/libheif/plugins/heif_decoder_libde265.h
@@ -21,12 +21,14 @@
 #ifndef LIBHEIF_HEIF_DECODER_DE265_H
 #define LIBHEIF_HEIF_DECODER_DE265_H
 
+#include "libheif/common_utils.h"
+
 const struct heif_decoder_plugin* get_decoder_plugin_libde265();
 
 #if PLUGIN_LIBDE265
 extern "C" {
-__attribute__((unused)) LIBHEIF_API extern heif_plugin_info plugin_info;
+MAYBE_UNUSED LIBHEIF_API extern heif_plugin_info plugin_info;
 }
 #endif
 
 #endif
diff --git a/libheif/plugins/heif_encoder_aom.h b/libheif/plugins/heif_encoder_aom.h
index 0215ec7..86ae9f9 100644
--- a/libheif/plugins/heif_encoder_aom.h
+++ b/libheif/plugins/heif_encoder_aom.h
@@ -1,33 +1,34 @@
 /*
  * HEIF codec.
  * Copyright (c) 2017 struktur AG, Dirk Farin <farin@struktur.de>
  *
  * This file is part of libheif.
  *
  * libheif is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
  * published by the Free Software Foundation, either version 3 of
  * the License, or (at your option) any later version.
  *
  * libheif is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  *
  * You should have received a copy of the GNU Lesser General Public License
  * along with libheif.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef LIBHEIF_HEIF_ENCODER_AOM_H
 #define LIBHEIF_HEIF_ENCODER_AOM_H
 
+#include "libheif/common_utils.h"
 
 const struct heif_encoder_plugin* get_encoder_plugin_aom();
 
 #if PLUGIN_AOM_ENCODER
 extern "C" {
-__attribute__((unused)) LIBHEIF_API extern heif_plugin_info plugin_info;
+MAYBE_UNUSED LIBHEIF_API extern heif_plugin_info plugin_info;
 }
 #endif
 
 #endif
diff --git a/libheif/plugins/heif_encoder_rav1e.h b/libheif/plugins/heif_encoder_rav1e.h
index 42648a9..63be47c 100644
--- a/libheif/plugins/heif_encoder_rav1e.h
+++ b/libheif/plugins/heif_encoder_rav1e.h
@@ -1,33 +1,34 @@
 /*
  * HEIF codec.
  * Copyright (c) 2017 struktur AG, Dirk Farin <farin@struktur.de>
  *
  * This file is part of libheif.
  *
  * libheif is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
  * published by the Free Software Foundation, either version 3 of
  * the License, or (at your option) any later version.
  *
  * libheif is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  *
  * You should have received a copy of the GNU Lesser General Public License
  * along with libheif.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef LIBHEIF_HEIF_ENCODER_RAV1E_H
 #define LIBHEIF_HEIF_ENCODER_RAV1E_H
 
+#include "libheif/common_utils.h"
 
 const struct heif_encoder_plugin* get_encoder_plugin_rav1e();
 
 #if PLUGIN_RAV1E
 extern "C" {
-__attribute__((unused)) LIBHEIF_API extern heif_plugin_info plugin_info;
+MAYBE_UNUSED LIBHEIF_API extern heif_plugin_info plugin_info;
 }
 #endif
 
 #endif
diff --git a/libheif/plugins/heif_encoder_svt.h b/libheif/plugins/heif_encoder_svt.h
index 2db1662..769c358 100644
--- a/libheif/plugins/heif_encoder_svt.h
+++ b/libheif/plugins/heif_encoder_svt.h
@@ -1,33 +1,34 @@
 /*
  * HEIF codec.
  * Copyright (c) 2022, Dirk Farin <dirk.farin@gmail.com>
  *
  * This file is part of libheif.
  *
  * libheif is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
  * published by the Free Software Foundation, either version 3 of
  * the License, or (at your option) any later version.
  *
  * libheif is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  *
  * You should have received a copy of the GNU Lesser General Public License
  * along with libheif.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef LIBHEIF_HEIF_ENCODER_SVT_H
 #define LIBHEIF_HEIF_ENCODER_SVT_H
 
+#include "libheif/common_utils.h"
 
 const struct heif_encoder_plugin* get_encoder_plugin_svt();
 
 #if PLUGIN_SvtEnc
 extern "C" {
-__attribute__((unused)) LIBHEIF_API extern heif_plugin_info plugin_info;
+MAYBE_UNUSED LIBHEIF_API extern heif_plugin_info plugin_info;
 }
 #endif
 
 #endif
diff --git a/libheif/plugins/heif_encoder_x265.h b/libheif/plugins/heif_encoder_x265.h
index b997a14..c7a6eae 100644
--- a/libheif/plugins/heif_encoder_x265.h
+++ b/libheif/plugins/heif_encoder_x265.h
@@ -1,33 +1,34 @@
 /*
  * HEIF codec.
  * Copyright (c) 2017 struktur AG, Dirk Farin <farin@struktur.de>
  *
  * This file is part of libheif.
  *
  * libheif is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
  * published by the Free Software Foundation, either version 3 of
  * the License, or (at your option) any later version.
  *
  * libheif is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
  *
  * You should have received a copy of the GNU Lesser General Public License
  * along with libheif.  If not, see <http://www.gnu.org/licenses/>.
  */
 
 #ifndef LIBHEIF_HEIF_ENCODER_X265_H
 #define LIBHEIF_HEIF_ENCODER_X265_H
 
+#include "libheif/common_utils.h"
 
 /* Image sizes in HEVC: since HEVC does not allow for odd image dimensions when
    using chroma 4:2:0, our strategy is as follows.
 
    - Images with odd dimensions are extended with an extra row/column which
      contains a copy of the border.
    - The HEVC image size generated by x265 is rounded up to the CTU size (?)
      and the conformance window has to be respected.
    - We add an additional crop transform to remove the extra row/column.
  */
@@ -37,8 +38,8 @@ const struct heif_encoder_plugin* get_encoder_plugin_x265();
 
 #if PLUGIN_X265
 extern "C" {
-__attribute__((unused)) LIBHEIF_API extern heif_plugin_info plugin_info;
+MAYBE_UNUSED LIBHEIF_API extern heif_plugin_info plugin_info;
 }
 #endif
 
 #endif
diff --git a/libheif/plugins_unix.cc b/libheif/plugins_unix.cc
new file mode 100644
index 0000000..9ead31c
--- /dev/null
+++ b/libheif/plugins_unix.cc
@@ -0,0 +1,108 @@
+/*
+ * HEIF codec.
+ * Copyright (c) 2023 Dirk Farin <dirk.farin@gmail.com>
+ *
+ * This file is part of libheif.
+ *
+ * libheif is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation, either version 3 of
+ * the License, or (at your option) any later version.
+ *
+ * libheif is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with libheif.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+
+#include "plugins_unix.h"
+#include "heif_plugin.h"
+#include <sstream>
+
+#include <dlfcn.h>
+#include <dirent.h>
+#include <cstring>
+
+std::vector<std::string> get_plugin_directories_from_environment_variable_unix()
+{
+  char* path_variable = getenv("LIBHEIF_PLUGIN_PATH");
+  if (path_variable == nullptr) {
+    return {};
+  }
+
+  // --- split LIBHEIF_PLUGIN_PATH value at ':' into separate directories
+
+  std::vector<std::string> plugin_paths;
+
+  std::istringstream paths(path_variable);
+  std::string dir;
+  while (getline(paths, dir, ':')) {
+    plugin_paths.push_back(dir);
+  }
+
+  return plugin_paths;
+}
+
+
+std::vector<std::string> list_all_potential_plugins_in_directory_unix(const char* directory)
+{
+  std::vector<std::string> result;
+
+  DIR* dir = opendir(directory);
+  if (dir == nullptr) {
+    return {}; // TODO: return error_cannot_read_plugin_directory;
+  }
+
+  struct dirent* d;
+  for (;;) {
+    d = readdir(dir);
+    if (d == nullptr) {
+      break;
+    }
+
+    if ((d->d_type == DT_REG || d->d_type == DT_LNK) && strlen(d->d_name) > 3 &&
+        strcmp(d->d_name + strlen(d->d_name) - 3, ".so") == 0) {
+      std::string filename = directory;
+      filename += '/';
+      filename += d->d_name;
+      //printf("load %s\n", filename.c_str());
+
+      result.push_back(filename);
+    }
+  }
+
+  closedir(dir);
+
+  return result;
+}
+
+
+heif_error heif::PluginLibrary_Unix::load_from_file(const char* filename)
+{
+  m_library_handle = dlopen(filename, RTLD_LAZY);
+  if (!m_library_handle) {
+    fprintf(stderr, "dlopen: %s\n", dlerror());
+    return error_dlopen;
+  }
+
+  m_plugin_info = (heif_plugin_info*) dlsym(m_library_handle, "plugin_info");
+  if (!m_plugin_info) {
+    fprintf(stderr, "dlsym: %s\n", dlerror());
+    return error_dlopen;
+  }
+
+  return heif_error_ok;
+}
+
+void heif::PluginLibrary_Unix::release()
+{
+  if (m_library_handle) {
+    dlclose(m_library_handle);
+    m_library_handle = nullptr;
+  }
+}
+
diff --git a/libheif/plugins_unix.h b/libheif/plugins_unix.h
new file mode 100644
index 0000000..f5049d9
--- /dev/null
+++ b/libheif/plugins_unix.h
@@ -0,0 +1,52 @@
+/*
+ * HEIF codec.
+ * Copyright (c) 2023 Dirk Farin <dirk.farin@gmail.com>
+ *
+ * This file is part of libheif.
+ *
+ * libheif is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation, either version 3 of
+ * the License, or (at your option) any later version.
+ *
+ * libheif is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with libheif.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef LIBHEIF_PLUGINS_UNIX_H
+#define LIBHEIF_PLUGINS_UNIX_H
+
+#include <vector>
+#include <string>
+#include "heif_init.h"
+
+std::vector<std::string> get_plugin_directories_from_environment_variable_unix();
+
+std::vector<std::string> list_all_potential_plugins_in_directory_unix(const char*);
+
+namespace heif {
+  class PluginLibrary_Unix : public PluginLibrary
+  {
+  public:
+    heif_error load_from_file(const char* filename) override;
+
+    void release() override;
+
+    heif_plugin_info* get_plugin_info() override
+    { return m_plugin_info; }
+
+    bool operator==(const PluginLibrary_Unix& b) const {
+      return m_library_handle == b.m_library_handle;
+    }
+
+  private:
+    void* m_library_handle = nullptr;
+    heif_plugin_info* m_plugin_info = nullptr;
+  };
+}
+#endif //LIBHEIF_PLUGINS_UNIX_H
diff --git a/libheif/plugins_windows.cc b/libheif/plugins_windows.cc
new file mode 100644
index 0000000..0a831ab
--- /dev/null
+++ b/libheif/plugins_windows.cc
@@ -0,0 +1,111 @@
+/*
+ * HEIF codec.
+ * Copyright (c) 2023 Dirk Farin <dirk.farin@gmail.com>
+ *
+ * This file is part of libheif.
+ *
+ * libheif is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation, either version 3 of
+ * the License, or (at your option) any later version.
+ *
+ * libheif is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with libheif.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+
+#include "plugins_windows.h"
+#include "heif_plugin.h"
+#include <sstream>
+
+
+std::vector<std::string> get_plugin_directories_from_environment_variable_windows()
+{
+  char* path_variable = getenv("LIBHEIF_PLUGIN_PATH");
+  if (path_variable == nullptr) {
+    return {};
+  }
+
+  // --- split LIBHEIF_PLUGIN_PATH value at ';' into separate directories
+
+  std::vector<std::string> plugin_paths;
+
+  std::istringstream paths(path_variable);
+  std::string dir;
+  while (getline(paths, dir, ';')) {
+    plugin_paths.push_back(dir);
+  }
+
+  return plugin_paths;
+}
+
+
+std::vector<std::string> list_all_potential_plugins_in_directory_windows(const char* directory)
+{
+  std::vector<std::string> result;
+
+  HANDLE hFind;
+  WIN32_FIND_DATA FindFileData;
+
+  std::string findPattern{directory};
+  findPattern += "\\*.dll";
+
+#if 0
+  DIR* dir = opendir(directory);
+  if (dir == nullptr) {
+    return error_cannot_read_plugin_directory;
+  }
+#endif
+
+  int nPlugins = 0;
+
+  if ((hFind = FindFirstFile(findPattern.c_str(), &FindFileData)) != INVALID_HANDLE_VALUE) {
+    do {
+      std::string filename = directory;
+      filename += '/';
+      filename += FindFileData.cFileName;
+
+      result.push_back(filename);
+    } while (FindNextFile(hFind, &FindFileData));
+
+    FindClose(hFind);
+  }
+
+  return result;
+}
+
+
+
+heif_error heif::PluginLibrary_Windows::load_from_file(const char* filename)
+{
+  m_library_handle = LoadLibraryA(filename);
+  if (!m_library_handle) {
+    fprintf(stderr, "LoadLibraryA error: %lu\n", GetLastError());
+    return error_dlopen;
+  }
+
+  m_plugin_info = (heif_plugin_info*) GetProcAddress(m_library_handle, "plugin_info");
+  if (!m_plugin_info) {
+    fprintf(stderr, "GetProcAddress error for dll '%s': %lu\n", filename, GetLastError());
+    return error_dlopen;
+  }
+
+  // Remember filename for comparison whether the plugin was already loaded.
+  // We need this since LoadLibraryA() returns a separate instance if we load the same DLL twice.
+  m_filename = filename;
+
+  return heif_error_ok;
+}
+
+void heif::PluginLibrary_Windows::release()
+{
+  if (m_library_handle) {
+    FreeLibrary(m_library_handle);
+    m_library_handle = nullptr;
+  }
+}
diff --git a/libheif/plugins_windows.h b/libheif/plugins_windows.h
new file mode 100644
index 0000000..9963684
--- /dev/null
+++ b/libheif/plugins_windows.h
@@ -0,0 +1,56 @@
+/*
+ * HEIF codec.
+ * Copyright (c) 2023 Dirk Farin <dirk.farin@gmail.com>
+ *
+ * This file is part of libheif.
+ *
+ * libheif is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation, either version 3 of
+ * the License, or (at your option) any later version.
+ *
+ * libheif is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with libheif.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+
+#ifndef LIBHEIF_PLUGINS_WINDOWS_H
+#define LIBHEIF_PLUGINS_WINDOWS_H
+
+#include <vector>
+#include <string>
+#include "heif_init.h"
+#include <windows.h>
+
+std::vector<std::string> get_plugin_directories_from_environment_variable_windows();
+
+std::vector<std::string> list_all_potential_plugins_in_directory_windows(const char*);
+
+namespace heif {
+  class PluginLibrary_Windows : public PluginLibrary
+  {
+  public:
+    heif_error load_from_file(const char* filename) override;
+
+    void release() override;
+
+    heif_plugin_info* get_plugin_info() override
+    { return m_plugin_info; }
+
+    bool operator==(const PluginLibrary_Windows& b) const {
+      return m_filename == b.m_filename;
+    }
+
+  private:
+    std::string m_filename;
+    HMODULE m_library_handle = nullptr;
+    heif_plugin_info* m_plugin_info = nullptr;
+  };
+}
+
+#endif //LIBHEIF_PLUGINS_WINDOWS_H
