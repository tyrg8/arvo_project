commit 0db460c9b0aad040ea1ab0335c3f07d18a0bc4cf
Author: Kevin Backhouse <kevinbackhouse@github.com>
Date:   Sun Sep 25 23:16:23 2022 +0100

    nul-terminate string

diff --git a/src/quicktimevideo.cpp b/src/quicktimevideo.cpp
index 5be3b0b0f..d73ed108b 100644
--- a/src/quicktimevideo.cpp
+++ b/src/quicktimevideo.cpp
@@ -793,71 +793,72 @@ void QuickTimeVideo::CameraTagsDecoder(size_t size_external) {
 void QuickTimeVideo::userDataDecoder(size_t size_external) {
   size_t cur_pos = io_->tell();
   const TagVocabulary* td;
   const TagVocabulary *tv, *tv_internal;
 
   const long bufMinSize = 100;
   DataBuf buf(bufMinSize);
   size_t size_internal = size_external;
   std::memset(buf.data(), 0x0, buf.size());
 
   while ((size_internal / 4 != 0) && (size_internal > 0)) {
     buf.data()[4] = '\0';
     io_->readOrThrow(buf.data(), 4);
     const size_t size = buf.read_uint32(0, bigEndian);
     if (size > size_internal)
       break;
     size_internal -= size;
     io_->readOrThrow(buf.data(), 4);
 
     if (buf.data()[0] == 169)
       buf.data()[0] = ' ';
     td = find(userDatatags, Exiv2::toString(buf.data()));
 
     tv = find(userDataReferencetags, Exiv2::toString(buf.data()));
 
     if (size <= 12)
       break;
 
     else if (equalsQTimeTag(buf, "DcMD") || equalsQTimeTag(buf, "NCDT"))
       userDataDecoder(size - 8);
 
     else if (equalsQTimeTag(buf, "NCTG"))
       NikonTagsDecoder(size - 8);
 
     else if (equalsQTimeTag(buf, "TAGS"))
       CameraTagsDecoder(size - 8);
 
     else if (equalsQTimeTag(buf, "CNCV") || equalsQTimeTag(buf, "CNFV") || equalsQTimeTag(buf, "CNMN") ||
              equalsQTimeTag(buf, "NCHD") || equalsQTimeTag(buf, "FFMV")) {
       io_->readOrThrow(buf.data(), size - 8);
       xmpData_[exvGettext(tv->label_)] = Exiv2::toString(buf.data());
     }
 
     else if (equalsQTimeTag(buf, "CMbo") || equalsQTimeTag(buf, "Cmbo")) {
       io_->readOrThrow(buf.data(), 2);
       buf.data()[2] = '\0';
       tv_internal = find(cameraByteOrderTags, Exiv2::toString(buf.data()));
 
       if (tv_internal)
         xmpData_[exvGettext(tv->label_)] = exvGettext(tv_internal->label_);
       else
         xmpData_[exvGettext(tv->label_)] = Exiv2::toString(buf.data());
     }
 
     else if (tv) {
       const size_t tv_size = size - 12;
-      if (tv_size > buf.size()) {
+      if (tv_size >= buf.size()) {
         enforce(tv_size <= io_->size() - io_->tell(), Exiv2::ErrorCode::kerCorruptedMetadata);
-        buf.resize(tv_size);
+        buf.resize(tv_size + 1);
       }
       io_->readOrThrow(buf.data(), 4);
       io_->readOrThrow(buf.data(), tv_size);
+      buf.write_uint8(tv_size, 0); // nul-terminate string
       xmpData_[exvGettext(tv->label_)] = Exiv2::toString(buf.data());
     }
 
     else if (td)
       tagDecoder(buf, size - 8);
   }
 
   io_->seek(cur_pos + size_external, BasicIo::beg);
 }  // QuickTimeVideo::userDataDecoder
