commit f76cc1beb49646169f33437c522df8a14f70633d
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Mon Jan 10 15:19:55 2022 +0000

    OSS-fuzz #43354 - Validate Default* colour spaces
    
    We were not checking that a DefaultGray, DefaultRGB or DefaultCMYK
    space was not one of Lab, Pattern or Indexed nor that it had the correct
    number of components.
    
    This commit checks that, moves the loading of Default* colour spaces
    into pdf_colour.c instead of doing almost exactly the same complex task
    in two different places (neither of them the colour code) and if the
    space is illegal, raies a warning.

diff --git a/pdf/ghostpdf.c b/pdf/ghostpdf.c
index 7f5f353bc..8a306b7d1 100644
--- a/pdf/ghostpdf.c
+++ b/pdf/ghostpdf.c
@@ -1,47 +1,47 @@
-/* Copyright (C) 2018-2021 Artifex Software, Inc.
+/* Copyright (C) 2018-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 /* Top level PDF access routines */
 #include "ghostpdf.h"
 #include "pdf_types.h"
 #include "pdf_dict.h"
 #include "pdf_array.h"
 #include "pdf_int.h"
 #include "pdf_misc.h"
 #include "pdf_stack.h"
 #include "pdf_file.h"
 #include "pdf_loop_detect.h"
 #include "pdf_trans.h"
 #include "pdf_gstate.h"
 #include "stream.h"
 #include "strmio.h"
 #include "pdf_colour.h"
 #include "pdf_font.h"
 #include "pdf_text.h"
 #include "pdf_page.h"
 #include "pdf_check.h"
 #include "pdf_optcontent.h"
 #include "pdf_sec.h"
 #include "pdf_doc.h"
 #include "pdf_repair.h"
 #include "pdf_xref.h"
 #include "pdf_device.h"
 
 #include "gsstate.h"        /* For gs_gstate */
 #include "gsicc_manage.h"  /* For gsicc_init_iccmanager() */
 
 #if PDFI_LEAK_CHECK
 #include "gsmchunk.h"
 #endif
@@ -344,43 +344,44 @@ const char *pdf_error_strings[] = {
 const char *pdf_warning_strings[] = {
     "no warning",
     "incorrect xref size",
     "used inline filter name inappropriately",
     "used inline colour space inappropriately",
     "used inline image key inappropriately",
     "recoverable image error",
     "recoverable error in image dictionary",
     "encountered more Q than q",
     "encountered more q than Q",
     "garbage left on stack",
     "stack underflow",
     "error in group definition",
     "invalid operator used in text block",
     "used invalid operator in CharProc",
     "BT found inside a text block",
     "ET found outside text block",
     "text operator outside text block",
     "degenerate text matrix",
     "bad ICC colour profile, using alternate",
     "bad ICC vs number components, using components",
     "bad value for text rendering mode",
     "error in shading",
     "error in pattern",
     "non standard operator found - ignoring",
     "number uses illegal exponent form",
     "Stream has inappropriate /Contents entry",
     "bad DecodeParms",
     "error in Mask",
     "error in annotation Appearance",
     "badly escaped name",
     "typecheck error",
     "bad trailer dictionary",
     "error in annotation",
     "failed to create ICC profile link",
     "overflowed a real reading a number, assuming 0",
     "failed to read a valid number, assuming 0",
     "A DeviceN space used the /All ink name.",
     "Couldn't retrieve MediaBox for page, using current media size",
     "CA or ca value not in range 0.0 to 1.0, clamped to range.",
+    "Invalid DefaultGray, DefaultRGB or DefaultCMYK space specified, ignored.",
     ""                                                  /* Last warning shuld not be used */
 };
 
diff --git a/pdf/ghostpdf.h b/pdf/ghostpdf.h
index de001f869..836851933 100644
--- a/pdf/ghostpdf.h
+++ b/pdf/ghostpdf.h
@@ -1,38 +1,38 @@
-/* Copyright (C) 2018-2021 Artifex Software, Inc.
+/* Copyright (C) 2018-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 
 #ifndef PDF_CONTEXT
 #define PDF_CONTEXT
 
 #include "gserrors.h"   /* Most files use this to set errors of the gs_error_ form */
 #include "gxgstate.h"
 
 #define BUF_SIZE 2048
 
 #include "pdf_types.h"
 
 #if defined(MEMENTO)
 #define PDFI_LEAK_CHECK 0
 #endif
 
 #ifndef PDFI_LEAK_CHECK
 #define PDFI_LEAK_CHECK 0
 #endif
 
 /* A structure for setting/resetting the interpreter graphics state
  * and some graphics state content when switching between Ghostscript
  * and pdfi, when running under GS.
  */
@@ -95,45 +95,46 @@ typedef enum pdf_error_e {
 typedef enum pdf_warning_e {
     W_PDF_NOWARNING,
     W_PDF_BAD_XREF_SIZE,
     W_PDF_BAD_INLINEFILTER,
     W_PDF_BAD_INLINECOLORSPACE,
     W_PDF_BAD_INLINEIMAGEKEY,
     W_PDF_IMAGE_ERROR,
     W_PDF_BAD_IMAGEDICT,
     W_PDF_TOOMANYQ,
     W_PDF_TOOMANYq,
     W_PDF_STACKGARBAGE,
     W_PDF_STACKUNDERFLOW,
     W_PDF_GROUPERROR,
     W_PDF_OPINVALIDINTEXT,
     W_PDF_NOTINCHARPROC,
     W_PDF_NESTEDTEXTBLOCK,
     W_PDF_ETNOTEXTBLOCK,
     W_PDF_TEXTOPNOBT,
     W_PDF_DEGENERATETM,
     W_PDF_BADICC_USE_ALT,
     W_PDF_BADICC_USECOMPS,
     W_PDF_BADTRSWITCH,
     W_PDF_BADSHADING,
     W_PDF_BADPATTERN,
     W_PDF_NONSTANDARD_OP,
     W_PDF_NUM_EXPONENT,
     W_PDF_STREAM_HAS_CONTENTS,
     W_PDF_STREAM_BAD_DECODEPARMS,
     W_PDF_MASK_ERROR,
     W_PDF_ANNOT_AP_ERROR,
     W_PDF_BAD_NAME_ESCAPE,
     W_PDF_TYPECHECK,
     W_PDF_BAD_TRAILER,
     W_PDF_ANNOT_ERROR,
     W_PDF_BAD_ICC_PROFILE_LINK,
     W_PDF_OVERFLOW_REAL,
     W_PDF_INVALID_REAL,
     W_PDF_DEVICEN_USES_ALL,
     W_PDF_BAD_MEDIABOX,
     W_PDF_CA_OUTOFRANGE,
+    W_PDF_INVALID_DEFAULTSPACE,
     W_PDF_MAX_WARNING               /* Must be last entry, add new warnings immediately before this and update pdf_warning_strings in ghostpdf.c */
 } pdf_warning;
 
 #define PDF_ERROR_BYTE_SIZE ((E_PDF_MAX_ERROR - 1) / (sizeof(char) * 8) + 1)
 #define PDF_WARNING_BYTE_SIZE ((W_PDF_MAX_WARNING - 1) / (sizeof(char) * 8) + 1)
diff --git a/pdf/pdf_colour.c b/pdf/pdf_colour.c
index 185b74cf7..5ca0faee9 100644
--- a/pdf/pdf_colour.c
+++ b/pdf/pdf_colour.c
@@ -1,44 +1,44 @@
-/* Copyright (C) 2018-2021 Artifex Software, Inc.
+/* Copyright (C) 2018-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 /* colour operations for the PDF interpreter */
 
 #include "pdf_int.h"
 #include "pdf_doc.h"
 #include "pdf_colour.h"
 #include "pdf_pattern.h"
 #include "pdf_stack.h"
 #include "pdf_array.h"
 #include "pdf_misc.h"
 #include "gsicc_manage.h"
 #include "gsicc_profilecache.h"
 #include "gsicc_create.h"
 #include "gsptype2.h"
 
 #include "pdf_file.h"
 #include "pdf_dict.h"
 #include "pdf_loop_detect.h"
 #include "pdf_func.h"
 #include "pdf_shading.h"
 #include "gscsepr.h"
 #include "stream.h"
 #include "strmio.h"
 #include "gscdevn.h"
 #include "gxcdevn.h"
 #include "gscolor.h"    /* For gs_setgray() and friends */
 #include "gsicc.h"      /* For gs_cspace_build_ICC() */
 #include "gsstate.h"    /* For gs_gdsvae() and gs_grestore() */
 
 /* Forward definitions for a routine we need */
@@ -2727,3 +2727,171 @@ int pdfi_color_setoutputintent(pdf_context *ctx, pdf_dict *intent_dict, pdf_stre
     pdfi_seek(ctx, ctx->main_stream, savedoffset, SEEK_SET);
     return code;
 }
+
+static int Check_Default_Space(pdf_context *ctx, pdf_obj *space, pdf_dict *source_dict, int num_components)
+{
+    pdf_obj *primary = NULL;
+    pdf_obj *ref_space = NULL;
+    int code = 0;
+
+    if (space->type == PDF_NAME)
+    {
+        if (pdfi_name_is((const pdf_name *)space, "DeviceGray"))
+            return (num_components == 1 ? 0 : gs_error_rangecheck);
+        if (pdfi_name_is((const pdf_name *)space, "DeviceCMYK"))
+            return (num_components == 4 ? 0 : gs_error_rangecheck);
+        if (pdfi_name_is((const pdf_name *)space, "DeviceRGB"))
+            return (num_components == 3 ? 0 : gs_error_rangecheck);
+
+        code = pdfi_find_resource(ctx, (unsigned char *)"ColorSpace", (pdf_name *)space, (pdf_dict *)source_dict,
+                                  NULL, &ref_space);
+        if (code < 0)
+            return code;
+
+        if (ref_space->type == PDF_NAME) {
+            if (ref_space->object_num != 0 && ref_space->object_num == space->object_num) {
+                pdfi_countdown(ref_space);
+                return_error(gs_error_circular_reference);
+            }
+            if (pdfi_name_is((const pdf_name *)ref_space, "DeviceGray")) {
+                pdfi_countdown(ref_space);
+                return (num_components == 1 ? 0 : gs_error_rangecheck);
+            }
+            if (pdfi_name_is((const pdf_name *)ref_space, "DeviceCMYK")) {
+                pdfi_countdown(ref_space);
+                return (num_components == 4 ? 0 : gs_error_rangecheck);
+            }
+            if (pdfi_name_is((const pdf_name *)ref_space, "DeviceRGB")) {
+                pdfi_countdown(ref_space);
+                return (num_components == 3 ? 0 : gs_error_rangecheck);
+            }
+            pdfi_countdown(ref_space);
+            return_error(gs_error_typecheck);
+        }
+        space = ref_space;
+    }
+
+    if (space->type == PDF_ARRAY) {
+        code = pdfi_array_get(ctx, (pdf_array *)space, 0, &primary);
+        if (code < 0)
+            goto exit;
+
+        if (primary->type == PDF_NAME) {
+            if (pdfi_name_is((pdf_name *)primary, "Lab")) {
+                code = gs_note_error(gs_error_typecheck);
+                goto exit;
+            }
+            if (pdfi_name_is((pdf_name *)primary, "Pattern")) {
+                code = gs_note_error(gs_error_typecheck);
+                goto exit;
+            }
+            if (pdfi_name_is((pdf_name *)primary, "Indexed")) {
+                code = gs_note_error(gs_error_typecheck);
+                goto exit;
+            }
+        }
+    } else
+        code = gs_note_error(gs_error_typecheck);
+
+exit:
+    pdfi_countdown(primary);
+    pdfi_countdown(ref_space);
+    return code;
+}
+
+int pdfi_setup_DefaultSpaces(pdf_context *ctx, pdf_dict *source_dict)
+{
+    int code = 0;
+    pdf_dict *resources_dict = NULL, *colorspaces_dict = NULL;
+    pdf_obj *DefaultSpace = NULL;
+
+    if (ctx->args.NOSUBSTDEVICECOLORS)
+        return 0;
+
+    /* Create any required DefaultGray, DefaultRGB or DefaultCMYK
+     * spaces.
+     */
+    code = pdfi_dict_knownget(ctx, source_dict, "Resources", (pdf_obj **)&resources_dict);
+    if (code > 0) {
+        code = pdfi_dict_knownget(ctx, resources_dict, "ColorSpace", (pdf_obj **)&colorspaces_dict);
+        if (code > 0) {
+            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultGray", &DefaultSpace);
+            if (code > 0) {
+                gs_color_space *pcs;
+
+                code = Check_Default_Space(ctx, DefaultSpace, source_dict, 1);
+                if (code >= 0) {
+                    code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, source_dict, &pcs, false);
+                    /* If any given Default* space fails simply ignore it, we wil then use the Device
+                     * space instead, this is as per the spec.
+                     */
+                    if (code >= 0) {
+                        if (gs_color_space_num_components(pcs) == 1) {
+                            ctx->page.DefaultGray_cs = pcs;
+                            pdfi_set_colour_callback(pcs, ctx, NULL);
+                        } else {
+                            pdfi_set_warning(ctx, 0, NULL, W_PDF_INVALID_DEFAULTSPACE, "pdfi_setup_DefaultSpaces", NULL);
+                            rc_decrement(pcs, "setup_DefautSpaces");
+                        }
+                    }
+                } else
+                    pdfi_set_warning(ctx, 0, NULL, W_PDF_INVALID_DEFAULTSPACE, "pdfi_setup_DefaultSpaces", NULL);
+            }
+            pdfi_countdown(DefaultSpace);
+            DefaultSpace = NULL;
+            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultRGB", &DefaultSpace);
+            if (code > 0) {
+                gs_color_space *pcs;
+
+                code = Check_Default_Space(ctx, DefaultSpace, source_dict, 1);
+                if (code >= 0) {
+                    code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, source_dict, &pcs, false);
+                    /* If any given Default* space fails simply ignore it, we wil then use the Device
+                     * space instead, this is as per the spec.
+                     */
+                    if (code >= 0) {
+                        if (gs_color_space_num_components(pcs) == 3) {
+                            ctx->page.DefaultRGB_cs = pcs;
+                            pdfi_set_colour_callback(pcs, ctx, NULL);
+                        } else {
+                            rc_decrement(pcs, "setup_DefautSpaces");
+                            pdfi_set_warning(ctx, 0, NULL, W_PDF_INVALID_DEFAULTSPACE, "pdfi_setup_DefaultSpaces", NULL);
+                        }
+                    }
+                } else
+                    pdfi_set_warning(ctx, 0, NULL, W_PDF_INVALID_DEFAULTSPACE, "pdfi_setup_DefaultSpaces", NULL);
+            }
+            pdfi_countdown(DefaultSpace);
+            DefaultSpace = NULL;
+            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultCMYK", &DefaultSpace);
+            if (code > 0) {
+                gs_color_space *pcs;
+
+                code = Check_Default_Space(ctx, DefaultSpace, source_dict, 1);
+                if (code >= 0) {
+                    code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, source_dict, &pcs, false);
+                    /* If any given Default* space fails simply ignore it, we wil then use the Device
+                     * space instead, this is as per the spec.
+                     */
+                    if (code >= 0) {
+                        if (gs_color_space_num_components(pcs) == 4) {
+                            ctx->page.DefaultCMYK_cs = pcs;
+                            pdfi_set_colour_callback(pcs, ctx, NULL);
+                        } else {
+                            pdfi_set_warning(ctx, 0, NULL, W_PDF_INVALID_DEFAULTSPACE, "pdfi_setup_DefaultSpaces", NULL);
+                            rc_decrement(pcs, "setup_DefautSpaces");
+                        }
+                    }
+                } else
+                    pdfi_set_warning(ctx, 0, NULL, W_PDF_INVALID_DEFAULTSPACE, "pdfi_setup_DefaultSpaces", NULL);
+            }
+            pdfi_countdown(DefaultSpace);
+            DefaultSpace = NULL;
+        }
+    }
+
+    pdfi_countdown(DefaultSpace);
+    pdfi_countdown(resources_dict);
+    pdfi_countdown(colorspaces_dict);
+    return 0;
+}
diff --git a/pdf/pdf_colour.h b/pdf/pdf_colour.h
index 0f49c5849..5a43937eb 100644
--- a/pdf/pdf_colour.h
+++ b/pdf/pdf_colour.h
@@ -1,24 +1,24 @@
-/* Copyright (C) 2018-2021 Artifex Software, Inc.
+/* Copyright (C) 2018-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 /* colour operations for the PDF interpreter */
 
 #ifndef PDF_COLOUR_OPERATORS
 #define PDF_COLOUR_OPERATORS
 
 #include "gscolor1.h"
 #include "gscspace.h"
 #include "pdf_stack.h"  /* for pdfi_countup/countdown */
 #include "pdf_misc.h"   /* for pdf_name_cmp */
@@ -87,4 +87,7 @@ int pdfi_check_ColorSpace_for_spots(pdf_context *ctx, pdf_obj *space, pdf_dict *
 
 int pdfi_color_setoutputintent(pdf_context *ctx, pdf_dict *intent_dict, pdf_stream *profile);
 
+/* Sets up the DefaultRGB, DefaultCMYK and DefaultGray colour spaces if present */
+int pdfi_setup_DefaultSpaces(pdf_context *ctx, pdf_dict *source_dict);
+
 #endif
diff --git a/pdf/pdf_int.c b/pdf/pdf_int.c
index 6575dd61a..e5ff14dbb 100644
--- a/pdf/pdf_int.c
+++ b/pdf/pdf_int.c
@@ -1,51 +1,51 @@
-/* Copyright (C) 2018-2021 Artifex Software, Inc.
+/* Copyright (C) 2018-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 /* The PDF interpreter written in C */
 
 #include "pdf_int.h"
 #include "pdf_file.h"
 #include "strmio.h"
 #include "stream.h"
 #include "pdf_misc.h"
 #include "pdf_path.h"
 #include "pdf_colour.h"
 #include "pdf_image.h"
 #include "pdf_shading.h"
 #include "pdf_font.h"
 #include "pdf_font.h"
 #include "pdf_cmap.h"
 #include "pdf_text.h"
 #include "pdf_gstate.h"
 #include "pdf_stack.h"
 #include "pdf_xref.h"
 #include "pdf_dict.h"
 #include "pdf_array.h"
 #include "pdf_trans.h"
 #include "pdf_optcontent.h"
 #include "pdf_sec.h"
 
 /* we use -ve returns for error, 0 for success and +ve for 'take an action' */
 /* Defining tis return so we do not need to define a new error */
 #define REPAIRED_KEYWORD 1
 
 /***********************************************************************************/
 /* 'token' reading functions. Tokens in this sense are PDF logical objects and the */
 /* related keywords. So that's numbers, booleans, names, strings, dictionaries,    */
 /* arrays, the  null object and indirect references. The keywords are obj/endobj   */
 /* stream/endstream, xref, startxref and trailer.                                  */
 
 /***********************************************************************************/
 /* Some simple functions to find white space, delimiters and hex bytes             */
@@ -1783,126 +1783,52 @@ void initialise_stream_save(pdf_context *ctx)
     ctx->current_stream_save.stack_count = pdfi_count_total_stack(ctx);
 }
 
-static int setup_stream_DefaultSpaces(pdf_context *ctx, pdf_dict *stream_dict)
-{
-    int code = 0;
-    pdf_dict *resources_dict = NULL, *colorspaces_dict = NULL;
-    pdf_obj *DefaultSpace = NULL;
-
-    /* Create any required DefaultGray, DefaultRGB or DefaultCMYK
-     * spaces.
-     */
-
-    if (ctx->args.NOSUBSTDEVICECOLORS)
-        return 0;
-
-    code = pdfi_dict_knownget(ctx, stream_dict, "Resources", (pdf_obj **)&resources_dict);
-    if (code > 0) {
-        code = pdfi_dict_knownget(ctx, resources_dict, "ColorSpace", (pdf_obj **)&colorspaces_dict);
-        if (code > 0) {
-            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultGray", &DefaultSpace);
-            if (code > 0) {
-                gs_color_space *pcs;
-                code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, stream_dict, &pcs, false);
-                /* If any given Default* space fails simply ignore it, we wil then use the Device
-                 * space (or page level Default) instead, this is as per the spec.
-                 */
-                if (code >= 0) {
-                    if (ctx->page.DefaultGray_cs)
-                        rc_decrement_only(ctx->page.DefaultGray_cs, "setup_stream_DefaultSpaces");
-                    ctx->page.DefaultGray_cs = pcs;
-                    pdfi_set_colour_callback(pcs, ctx, NULL);
-                }
-            }
-            pdfi_countdown(DefaultSpace);
-            DefaultSpace = NULL;
-            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultRGB", &DefaultSpace);
-            if (code > 0) {
-                gs_color_space *pcs;
-                code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, stream_dict, &pcs, false);
-                /* If any given Default* space fails simply ignore it, we wil then use the Device
-                 * space (or page level Default) instead, this is as per the spec.
-                 */
-                if (code >= 0) {
-                    if (ctx->page.DefaultRGB_cs)
-                        rc_decrement_only(ctx->page.DefaultRGB_cs, "setup_stream_DefaultSpaces");
-                    ctx->page.DefaultRGB_cs = pcs;
-                    pdfi_set_colour_callback(pcs, ctx, NULL);
-                }
-            }
-            pdfi_countdown(DefaultSpace);
-            DefaultSpace = NULL;
-            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultCMYK", &DefaultSpace);
-            if (code > 0) {
-                gs_color_space *pcs;
-                code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, stream_dict, &pcs, false);
-                /* If any given Default* space fails simply ignore it, we wil then use the Device
-                 * space (or page level Default) instead, this is as per the spec.
-                 */
-                if (code >= 0) {
-                    if (ctx->page.DefaultCMYK_cs)
-                        rc_decrement_only(ctx->page.DefaultCMYK_cs, "setup_stream_DefaultSpaces");
-                    ctx->page.DefaultCMYK_cs = pcs;
-                    pdfi_set_colour_callback(pcs, ctx, NULL);
-                }
-            }
-            pdfi_countdown(DefaultSpace);
-            DefaultSpace = NULL;
-        }
-    }
-
-    pdfi_countdown(DefaultSpace);
-    pdfi_countdown(resources_dict);
-    pdfi_countdown(colorspaces_dict);
-    return 0;
-}
-
 /* Run a stream in a sub-context (saves/restores DefaultQState) */
 int pdfi_run_context(pdf_context *ctx, pdf_stream *stream_obj,
                      pdf_dict *page_dict, bool stoponerror, const char *desc)
 {
     int code;
     gs_gstate *DefaultQState;
     /* Save any existing Default* colour spaces */
     gs_color_space *PageDefaultGray = ctx->page.DefaultGray_cs;
     gs_color_space *PageDefaultRGB = ctx->page.DefaultRGB_cs;
     gs_color_space *PageDefaultCMYK = ctx->page.DefaultCMYK_cs;
 
     /* increment their reference counts because we took a new reference to each */
     rc_increment(ctx->page.DefaultGray_cs);
     rc_increment(ctx->page.DefaultRGB_cs);
     rc_increment(ctx->page.DefaultCMYK_cs);
 
 #if DEBUG_CONTEXT
     dbgmprintf(ctx->memory, "pdfi_run_context BEGIN\n");
 #endif
     /* If the stream has any Default* colour spaces, replace the page level ones.
      * This will derement the reference counts to the current spaces if they are replaced.
      */
-    setup_stream_DefaultSpaces(ctx, stream_obj->stream_dict);
+    pdfi_setup_DefaultSpaces(ctx, stream_obj->stream_dict);
 
     pdfi_copy_DefaultQState(ctx, &DefaultQState);
     pdfi_set_DefaultQState(ctx, ctx->pgs);
     code = pdfi_interpret_inner_content_stream(ctx, stream_obj, page_dict, stoponerror, desc);
     pdfi_restore_DefaultQState(ctx, &DefaultQState);
 
     /* Count down any Default* colour spaces */
     rc_decrement(ctx->page.DefaultGray_cs, "pdfi_run_context");
     rc_decrement(ctx->page.DefaultRGB_cs, "pdfi_run_context");
     rc_decrement(ctx->page.DefaultCMYK_cs, "pdfi_run_context");
 
     /* And restore the page level ones (if any) */
     ctx->page.DefaultGray_cs = PageDefaultGray;
     ctx->page.DefaultRGB_cs = PageDefaultRGB;
     ctx->page.DefaultCMYK_cs = PageDefaultCMYK;
 #if DEBUG_CONTEXT
     dbgmprintf(ctx->memory, "pdfi_run_context END\n");
 #endif
     return code;
 }
 
 
 /* Interpret a sub-content stream, with some handling of error recovery, clearing stack, etc.
  * This temporarily turns on pdfstoponerror if requested.
  * It will make sure the stack is cleared and the gstate is matched.
  */
diff --git a/pdf/pdf_page.c b/pdf/pdf_page.c
index c8b8f7944..aed1eeef6 100644
--- a/pdf/pdf_page.c
+++ b/pdf/pdf_page.c
@@ -1,40 +1,40 @@
-/* Copyright (C) 2019-2021 Artifex Software, Inc.
+/* Copyright (C) 2019-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 /* Page-level operations for the PDF interpreter */
 
 #include "pdf_int.h"
 #include "pdf_stack.h"
 #include "pdf_doc.h"
 #include "pdf_deref.h"
 #include "pdf_page.h"
 #include "pdf_file.h"
 #include "pdf_dict.h"
 #include "pdf_array.h"
 #include "pdf_loop_detect.h"
 #include "pdf_colour.h"
 #include "pdf_trans.h"
 #include "pdf_gstate.h"
 #include "pdf_misc.h"
 #include "pdf_optcontent.h"
 #include "pdf_device.h"
 #include "pdf_annot.h"
 #include "pdf_check.h"
 #include "pdf_mark.h"
 
 #include "gscoord.h"        /* for gs_concat() and others */
 #include "gspaint.h"        /* For gs_erasepage() */
 #include "gsstate.h"        /* For gs_initgraphics() */
 #include "gspath2.h"        /* For gs_rectclip() */
@@ -677,72 +677,10 @@ static void release_page_DefaultSpaces(pdf_context *ctx)
 
 static int setup_page_DefaultSpaces(pdf_context *ctx, pdf_dict *page_dict)
 {
-    int code = 0;
-    pdf_dict *resources_dict = NULL, *colorspaces_dict = NULL;
-    pdf_obj *DefaultSpace = NULL;
-
     /* First off, discard any dangling Default* colour spaces, just in case. */
     release_page_DefaultSpaces(ctx);
 
-    if (ctx->args.NOSUBSTDEVICECOLORS)
-        return 0;
-
-    /* Create any required DefaultGray, DefaultRGB or DefaultCMYK
-     * spaces.
-     */
-    code = pdfi_dict_knownget(ctx, page_dict, "Resources", (pdf_obj **)&resources_dict);
-    if (code > 0) {
-        code = pdfi_dict_knownget(ctx, resources_dict, "ColorSpace", (pdf_obj **)&colorspaces_dict);
-        if (code > 0) {
-            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultGray", &DefaultSpace);
-            if (code > 0) {
-                gs_color_space *pcs;
-                code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, page_dict, &pcs, false);
-                /* If any given Default* space fails simply ignore it, we wil then use the Device
-                 * space instead, this is as per the spec.
-                 */
-                if (code >= 0) {
-                    ctx->page.DefaultGray_cs = pcs;
-                    pdfi_set_colour_callback(pcs, ctx, NULL);
-                }
-            }
-            pdfi_countdown(DefaultSpace);
-            DefaultSpace = NULL;
-            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultRGB", &DefaultSpace);
-            if (code > 0) {
-                gs_color_space *pcs;
-                code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, page_dict, &pcs, false);
-                /* If any given Default* space fails simply ignore it, we wil then use the Device
-                 * space instead, this is as per the spec.
-                 */
-                if (code >= 0) {
-                    ctx->page.DefaultRGB_cs = pcs;
-                    pdfi_set_colour_callback(pcs, ctx, NULL);
-                }
-            }
-            pdfi_countdown(DefaultSpace);
-            DefaultSpace = NULL;
-            code = pdfi_dict_knownget(ctx, colorspaces_dict, "DefaultCMYK", &DefaultSpace);
-            if (code > 0) {
-                gs_color_space *pcs;
-                code = pdfi_create_colorspace(ctx, DefaultSpace, NULL, page_dict, &pcs, false);
-                /* If any given Default* space fails simply ignore it, we wil then use the Device
-                 * space instead, this is as per the spec.
-                 */
-                if (code >= 0) {
-                    ctx->page.DefaultCMYK_cs = pcs;
-                    pdfi_set_colour_callback(pcs, ctx, NULL);
-                }
-            }
-            pdfi_countdown(DefaultSpace);
-            DefaultSpace = NULL;
-        }
-    }
-
-    pdfi_countdown(DefaultSpace);
-    pdfi_countdown(resources_dict);
-    pdfi_countdown(colorspaces_dict);
-    return 0;
+    return(pdfi_setup_DefaultSpaces(ctx, page_dict));
 }
 
 int pdfi_page_render(pdf_context *ctx, uint64_t page_num, bool init_graphics)
