commit ae3a098d2f0988b63a780523a006a3db8e8b3872
Author: Todd C. Miller <Todd.Miller@sudo.ws>
Date:   Tue Feb 16 09:32:34 2021 -0700

    Always dynamically allocate user_cmnd, it is freed in sudo_user_free().
    Instead of setting user_cmnd in the policy functions, always set argv.
    Calling sudoers_policy_main() with argc of 0 is no longer allowed.

diff --git a/plugins/sudoers/policy.c b/plugins/sudoers/policy.c
index e3e0060c0..79572f0dc 100644
--- a/plugins/sudoers/policy.c
+++ b/plugins/sudoers/policy.c
@@ -89,453 +89,454 @@ int
 sudoers_policy_deserialize_info(void *v)
 {
     const int edit_mask = MODE_EDIT|MODE_IGNORE_TICKET|MODE_NONINTERACTIVE;
     struct sudoers_open_info *info = v;
     const char *p, *errstr, *groups = NULL;
     const char *remhost = NULL;
     char * const *cur;
     int flags = 0;
     debug_decl(sudoers_policy_deserialize_info, SUDOERS_DEBUG_PLUGIN);
 
 #define MATCHES(s, v)	\
     (strncmp((s), (v), sizeof(v) - 1) == 0)
 
 #define INVALID(v) do {	\
     sudo_warnx(U_("invalid %.*s set by sudo front-end"), \
 	(int)(sizeof(v) - 2), (v)); \
 } while (0)
 
 #define CHECK(s, v) do {	\
     if ((s)[sizeof(v) - 1] == '\0') { \
 	INVALID(v); \
 	goto bad; \
     } \
 } while (0)
 
     if (sudo_gettime_real(&sudo_user.submit_time) == -1) {
 	sudo_warn("%s", U_("unable to get time of day"));
 	goto bad;
     }
 
     /* Parse sudo.conf plugin args. */
     sudoers_file = _PATH_SUDOERS;
     sudoers_mode = SUDOERS_MODE;
     sudoers_uid = SUDOERS_UID;
     sudoers_gid = SUDOERS_GID;
     if (info->plugin_args != NULL) {
 	for (cur = info->plugin_args; *cur != NULL; cur++) {
 	    if (MATCHES(*cur, "error_recovery=")) {
 		int val = sudo_strtobool(*cur + sizeof("error_recovery=") - 1);
 		if (val == -1) {
 		    INVALID("error_recovery=");	/* Not a fatal error. */
 		} else {
 		    sudoers_recovery = val;
 		}
 		continue;
 	    }
 	    if (MATCHES(*cur, "sudoers_file=")) {
 		CHECK(*cur, "sudoers_file=");
 		sudoers_file = *cur + sizeof("sudoers_file=") - 1;
 		continue;
 	    }
 	    if (MATCHES(*cur, "sudoers_uid=")) {
 		p = *cur + sizeof("sudoers_uid=") - 1;
 		sudoers_uid = (uid_t) sudo_strtoid(p, &errstr);
 		if (errstr != NULL) {
 		    sudo_warnx(U_("%s: %s"), *cur, U_(errstr));
 		    goto bad;
 		}
 		continue;
 	    }
 	    if (MATCHES(*cur, "sudoers_gid=")) {
 		p = *cur + sizeof("sudoers_gid=") - 1;
 		sudoers_gid = (gid_t) sudo_strtoid(p, &errstr);
 		if (errstr != NULL) {
 		    sudo_warnx(U_("%s: %s"), *cur, U_(errstr));
 		    goto bad;
 		}
 		continue;
 	    }
 	    if (MATCHES(*cur, "sudoers_mode=")) {
 		p = *cur + sizeof("sudoers_mode=") - 1;
 		sudoers_mode = sudo_strtomode(p, &errstr);
 		if (errstr != NULL) {
 		    sudo_warnx(U_("%s: %s"), *cur, U_(errstr));
 		    goto bad;
 		}
 		continue;
 	    }
 	    if (MATCHES(*cur, "ldap_conf=")) {
 		CHECK(*cur, "ldap_conf=");
 		path_ldap_conf = *cur + sizeof("ldap_conf=") - 1;
 		continue;
 	    }
 	    if (MATCHES(*cur, "ldap_secret=")) {
 		CHECK(*cur, "ldap_secret=");
 		path_ldap_secret = *cur + sizeof("ldap_secret=") - 1;
 		continue;
 	    }
 	}
     }
 
     /* Parse command line settings. */
     user_closefrom = -1;
     for (cur = info->settings; *cur != NULL; cur++) {
 	if (MATCHES(*cur, "closefrom=")) {
 	    errno = 0;
 	    p = *cur + sizeof("closefrom=") - 1;
 	    user_closefrom = sudo_strtonum(p, 3, INT_MAX, &errstr);
 	    if (user_closefrom == 0) {
 		sudo_warnx(U_("%s: %s"), *cur, U_(errstr));
 		goto bad;
 	    }
 	    continue;
 	}
 	if (MATCHES(*cur, "cmnd_chroot=")) {
 	    CHECK(*cur, "cmnd_chroot=");
 	    user_runchroot = *cur + sizeof("cmnd_chroot=") - 1;
 	    continue;
 	}
 	if (MATCHES(*cur, "cmnd_cwd=")) {
 	    CHECK(*cur, "cmnd_cwd=");
 	    user_runcwd = *cur + sizeof("cmnd_cwd=") - 1;
 	    continue;
 	}
 	if (MATCHES(*cur, "runas_user=")) {
 	    CHECK(*cur, "runas_user=");
 	    sudo_user.runas_user = *cur + sizeof("runas_user=") - 1;
 	    SET(sudo_user.flags, RUNAS_USER_SPECIFIED);
 	    continue;
 	}
 	if (MATCHES(*cur, "runas_group=")) {
 	    CHECK(*cur, "runas_group=");
 	    sudo_user.runas_group = *cur + sizeof("runas_group=") - 1;
 	    SET(sudo_user.flags, RUNAS_GROUP_SPECIFIED);
 	    continue;
 	}
 	if (MATCHES(*cur, "prompt=")) {
 	    /* Allow epmpty prompt. */
 	    user_prompt = *cur + sizeof("prompt=") - 1;
 	    def_passprompt_override = true;
 	    continue;
 	}
 	if (MATCHES(*cur, "set_home=")) {
 	    if (parse_bool(*cur, sizeof("set_home") - 1, &flags,
 		MODE_RESET_HOME) == -1)
 		goto bad;
 	    continue;
 	}
 	if (MATCHES(*cur, "preserve_environment=")) {
 	    if (parse_bool(*cur, sizeof("preserve_environment") - 1, &flags,
 		MODE_PRESERVE_ENV) == -1)
 		goto bad;
 	    continue;
 	}
 	if (MATCHES(*cur, "run_shell=")) {
 	    if (parse_bool(*cur, sizeof("run_shell") -1, &flags,
 		MODE_SHELL) == -1)
 		goto bad;
 	    continue;
 	}
 	if (MATCHES(*cur, "login_shell=")) {
 	    if (parse_bool(*cur, sizeof("login_shell") - 1, &flags,
 		MODE_LOGIN_SHELL) == -1)
 		goto bad;
 	    continue;
 	}
 	if (MATCHES(*cur, "implied_shell=")) {
 	    if (parse_bool(*cur, sizeof("implied_shell") - 1, &flags,
 		MODE_IMPLIED_SHELL) == -1)
 		goto bad;
 	    continue;
 	}
 	if (MATCHES(*cur, "preserve_groups=")) {
 	    if (parse_bool(*cur, sizeof("preserve_groups") - 1, &flags,
 		MODE_PRESERVE_GROUPS) == -1)
 		goto bad;
 	    continue;
 	}
 	if (MATCHES(*cur, "ignore_ticket=")) {
 	    if (parse_bool(*cur, sizeof("ignore_ticket") -1, &flags,
 		MODE_IGNORE_TICKET) == -1)
 		goto bad;
 	    continue;
 	}
 	if (MATCHES(*cur, "noninteractive=")) {
 	    if (parse_bool(*cur, sizeof("noninteractive") - 1, &flags,
 		MODE_NONINTERACTIVE) == -1)
 		goto bad;
 	    continue;
 	}
 	if (MATCHES(*cur, "sudoedit=")) {
 	    if (parse_bool(*cur, sizeof("sudoedit") - 1, &flags,
 		MODE_EDIT) == -1)
 		goto bad;
 	    continue;
 	}
 	if (MATCHES(*cur, "login_class=")) {
 	    CHECK(*cur, "login_class=");
 	    login_class = *cur + sizeof("login_class=") - 1;
 	    def_use_loginclass = true;
 	    continue;
 	}
 #ifdef HAVE_SELINUX
 	if (MATCHES(*cur, "selinux_role=")) {
 	    CHECK(*cur, "selinux_role=");
 	    free(user_role);
 	    user_role = strdup(*cur + sizeof("selinux_role=") - 1);
 	    if (user_role == NULL)
 		goto oom;
 	    continue;
 	}
 	if (MATCHES(*cur, "selinux_type=")) {
 	    CHECK(*cur, "selinux_type=");
 	    free(user_type);
 	    user_type = strdup(*cur + sizeof("selinux_type=") - 1);
 	    if (user_type == NULL)
 		goto oom;
 	    continue;
 	}
 #endif /* HAVE_SELINUX */
 #ifdef HAVE_BSD_AUTH_H
 	if (MATCHES(*cur, "bsdauth_type=")) {
 	    CHECK(*cur, "login_style=");
 	    login_style = *cur + sizeof("bsdauth_type=") - 1;
 	    continue;
 	}
 #endif /* HAVE_BSD_AUTH_H */
 	if (MATCHES(*cur, "network_addrs=")) {
 	    interfaces_string = *cur + sizeof("network_addrs=") - 1;
 	    if (!set_interfaces(interfaces_string)) {
 		sudo_warn("%s", U_("unable to parse network address list"));
 		goto bad;
 	    }
 	    continue;
 	}
 	if (MATCHES(*cur, "max_groups=")) {
 	    errno = 0;
 	    p = *cur + sizeof("max_groups=") - 1;
 	    sudo_user.max_groups = sudo_strtonum(p, 1, INT_MAX, &errstr);
 	    if (sudo_user.max_groups == 0) {
 		sudo_warnx(U_("%s: %s"), *cur, U_(errstr));
 		goto bad;
 	    }
 	    continue;
 	}
 	if (MATCHES(*cur, "remote_host=")) {
 	    CHECK(*cur, "remote_host=");
 	    remhost = *cur + sizeof("remote_host=") - 1;
 	    continue;
 	}
 	if (MATCHES(*cur, "timeout=")) {
 	    p = *cur + sizeof("timeout=") - 1;
 	    user_timeout = parse_timeout(p);
 	    if (user_timeout == -1) {
 		if (errno == ERANGE)
 		    sudo_warnx(U_("%s: %s"), p, U_("timeout value too large"));
 		else
 		    sudo_warnx(U_("%s: %s"), p, U_("invalid timeout value"));
 		goto bad;
 	    }
 	    continue;
 	}
 #ifdef ENABLE_SUDO_PLUGIN_API
 	if (MATCHES(*cur, "plugin_dir=")) {
 	    CHECK(*cur, "plugin_dir=");
 	    path_plugin_dir = *cur + sizeof("plugin_dir=") - 1;
 	    continue;
 	}
 #endif
     }
 
     /* Sudo front-end should restrict mode flags for sudoedit. */
+    /* XXX - also restrict pseudo-commands */
     if (ISSET(flags, MODE_EDIT) && (flags & edit_mask) != flags) {
 	sudo_warnx(U_("invalid mode flags from sudo front end: 0x%x"), flags);
 	goto bad;
     }
 
     user_gid = (gid_t)-1;
     user_sid = (pid_t)-1;
     user_uid = (gid_t)-1;
     user_umask = (mode_t)-1;
     for (cur = info->user_info; *cur != NULL; cur++) {
 	if (MATCHES(*cur, "user=")) {
 	    CHECK(*cur, "user=");
 	    free(user_name);
 	    if ((user_name = strdup(*cur + sizeof("user=") - 1)) == NULL)
 		goto oom;
 	    continue;
 	}
 	if (MATCHES(*cur, "uid=")) {
 	    p = *cur + sizeof("uid=") - 1;
 	    user_uid = (uid_t) sudo_strtoid(p, &errstr);
 	    if (errstr != NULL) {
 		sudo_warnx(U_("%s: %s"), *cur, U_(errstr));
 		goto bad;
 	    }
 	    continue;
 	}
 	if (MATCHES(*cur, "gid=")) {
 	    p = *cur + sizeof("gid=") - 1;
 	    user_gid = (gid_t) sudo_strtoid(p, &errstr);
 	    if (errstr != NULL) {
 		sudo_warnx(U_("%s: %s"), *cur, U_(errstr));
 		goto bad;
 	    }
 	    continue;
 	}
 	if (MATCHES(*cur, "groups=")) {
 	    CHECK(*cur, "groups=");
 	    groups = *cur + sizeof("groups=") - 1;
 	    continue;
 	}
 	if (MATCHES(*cur, "cwd=")) {
 	    CHECK(*cur, "cwd=");
 	    free(user_cwd);
 	    if ((user_cwd = strdup(*cur + sizeof("cwd=") - 1)) == NULL)
 		goto oom;
 	    continue;
 	}
 	if (MATCHES(*cur, "tty=")) {
 	    CHECK(*cur, "tty=");
 	    free(user_ttypath);
 	    if ((user_ttypath = strdup(*cur + sizeof("tty=") - 1)) == NULL)
 		goto oom;
 	    user_tty = user_ttypath;
 	    if (strncmp(user_tty, _PATH_DEV, sizeof(_PATH_DEV) - 1) == 0)
 		user_tty += sizeof(_PATH_DEV) - 1;
 	    continue;
 	}
 	if (MATCHES(*cur, "host=")) {
 	    CHECK(*cur, "host=");
 	    if (user_shost != user_host)
 		free(user_shost);
 	    free(user_host);
 	    if ((user_host = strdup(*cur + sizeof("host=") - 1)) == NULL)
 		goto oom;
 	    if ((p = strchr(user_host, '.')) != NULL) {
 		user_shost = strndup(user_host, (size_t)(p - user_host));
 		if (user_shost == NULL)
 		    goto oom;
 	    } else {
 		user_shost = user_host;
 	    }
 	    continue;
 	}
 	if (MATCHES(*cur, "lines=")) {
 	    errno = 0;
 	    p = *cur + sizeof("lines=") - 1;
 	    sudo_user.lines = sudo_strtonum(p, 1, INT_MAX, &errstr);
 	    if (sudo_user.lines == 0) {
 		sudo_warnx(U_("%s: %s"), *cur, U_(errstr));
 		goto bad;
 	    }
 	    continue;
 	}
 	if (MATCHES(*cur, "cols=")) {
 	    errno = 0;
 	    p = *cur + sizeof("cols=") - 1;
 	    sudo_user.cols = sudo_strtonum(p, 1, INT_MAX, &errstr);
 	    if (sudo_user.cols == 0) {
 		sudo_warnx(U_("%s: %s"), *cur, U_(errstr));
 		goto bad;
 	    }
 	    continue;
 	}
 	if (MATCHES(*cur, "sid=")) {
 	    p = *cur + sizeof("sid=") - 1;
 	    user_sid = (pid_t) sudo_strtoid(p, &errstr);
 	    if (errstr != NULL) {
 		sudo_warnx(U_("%s: %s"), *cur, U_(errstr));
 		goto bad;
 	    }
 	    continue;
 	}
 	if (MATCHES(*cur, "umask=")) {
 	    p = *cur + sizeof("umask=") - 1;
 	    sudo_user.umask = sudo_strtomode(p, &errstr);
 	    if (errstr != NULL) {
 		sudo_warnx(U_("%s: %s"), *cur, U_(errstr));
 		goto bad;
 	    }
 	    continue;
 	}
     }
 
     /* User name, user-ID, group-ID and host name must be specified. */
     if (user_name == NULL) {
 	sudo_warnx("%s", U_("user name not set by sudo front-end"));
 	goto bad;
     }
     if (user_uid == (uid_t)-1) {
 	sudo_warnx("%s", U_("user-ID not set by sudo front-end"));
 	goto bad;
     }
     if (user_gid == (gid_t)-1) {
 	sudo_warnx("%s", U_("group-ID not set by sudo front-end"));
 	goto bad;
     }
     if (user_host == NULL) {
 	sudo_warnx("%s", U_("host name not set by sudo front-end"));
 	goto bad;
     }
 
     if (user_srunhost != user_runhost)
 	free(user_srunhost);
     free(user_runhost);
     if ((user_runhost = strdup(remhost ? remhost : user_host)) == NULL)
 	goto oom;
     if ((p = strchr(user_runhost, '.')) != NULL) {
 	user_srunhost = strndup(user_runhost, (size_t)(p - user_runhost));
 	if (user_srunhost == NULL)
 	    goto oom;
     } else {
 	user_srunhost = user_runhost;
     }
     if (user_cwd == NULL) {
 	if ((user_cwd = strdup("unknown")) == NULL)
 	    goto oom;
     }
     if (user_runcwd == NULL) {
 	/* Unlike user_cwd, user_runcwd is not free()d. */
 	user_runcwd = user_cwd;
     }
     if (user_tty == NULL) {
 	if ((user_tty = strdup("unknown")) == NULL)
 	    goto oom;
 	/* user_ttypath remains NULL */
     }
 
     if (groups != NULL) {
 	/* sudo_parse_gids() will print a warning on error. */
 	user_ngids = sudo_parse_gids(groups, &user_gid, &user_gids);
 	if (user_ngids == -1)
 	    goto bad;
     }
 
     /* umask is only set in user_info[] for API 1.10 and above. */
     if (user_umask == (mode_t)-1) {
 	user_umask = umask(0);
 	umask(user_umask);
     }
 
     /* Always reset the environment for a login shell. */
     if (ISSET(flags, MODE_LOGIN_SHELL))
 	def_env_reset = true;
 
     /* Some systems support fexecve() which we use for digest matches. */
     cmnd_fd = -1;
 
 #ifdef NO_ROOT_MAILER
     eventlog_set_mailuid(user_uid);
 #endif
 
     /* Dump settings and user info (XXX - plugin args) */
     for (cur = info->settings; *cur != NULL; cur++)
 	sudo_debug_printf(SUDO_DEBUG_INFO, "settings: %s", *cur);
     for (cur = info->user_info; *cur != NULL; cur++)
 	sudo_debug_printf(SUDO_DEBUG_INFO, "user_info: %s", *cur);
 
 #undef MATCHES
 #undef INVALID
 #undef CHECK
     debug_return_int(flags);
@@ -951,37 +952,39 @@ static void
 sudoers_policy_close(int exit_status, int error_code)
 {
     debug_decl(sudoers_policy_close, SUDOERS_DEBUG_PLUGIN);
 
     if (session_opened) {
 	/* Close the session we opened in sudoers_policy_init_session(). */
 	(void)sudo_auth_end_session(runas_pw);
 
 	/* We do not currently log the exit status. */
 	if (error_code) {
 	    errno = error_code;
 	    sudo_warn(U_("unable to execute %s"), safe_cmnd);
 	}
     }
 
     /* Deregister the callback for sudo_fatal()/sudo_fatalx(). */
     sudo_fatal_callback_deregister(sudoers_cleanup);
 
     /* Free stashed copy of the environment. */
     (void)env_init(NULL);
 
     /* Free struct sudo_user. */
     sudo_user_free();
 
     /* Free error message passed back to front-end, if any. */
     free(audit_msg);
     audit_msg = NULL;
 
+    /* XXX - leaks NewArgv */
+
     /* sudoers_debug_deregister() calls sudo_debug_exit() for us. */
     sudoers_debug_deregister();
 }
 
 /*
  * The init_session function is called before executing the command
  * and before uid/gid changes occur.
  * Returns 1 on success, 0 on failure and -1 on error.
  */
@@ -1045,18 +1048,18 @@ sudoers_policy_check(int argc, char * const argv[], char *env_add[],
 static int
 sudoers_policy_validate(const char **errstr)
 {
+    char *argv[] = { "validate", NULL };
+    const int argc = 1;
     int ret;
     debug_decl(sudoers_policy_validate, SUDOERS_DEBUG_PLUGIN);
 
-    user_cmnd = "validate";
     SET(sudo_mode, MODE_VALIDATE);
-
-    ret = sudoers_policy_main(0, NULL, I_VERIFYPW, NULL, false, NULL);
+    ret = sudoers_policy_main(argc, argv, I_VERIFYPW, NULL, false, NULL);
 
     /* The audit functions set audit_msg on failure. */
     if (ret != 1 && audit_msg != NULL) {
 	if (sudo_version >= SUDO_API_MKVERSION(1, 15))
 	    *errstr = audit_msg;
     }
     debug_return_int(ret);
 }
@@ -1075,31 +1078,34 @@ static int
 sudoers_policy_list(int argc, char * const argv[], int verbose,
     const char *list_user, const char **errstr)
 {
+    char *list_argv[] = { "list", NULL };
     int ret;
     debug_decl(sudoers_policy_list, SUDOERS_DEBUG_PLUGIN);
 
-    user_cmnd = "list";
-    if (argc)
-	SET(sudo_mode, MODE_CHECK);
-    else
+    if (argc == 0) {
 	SET(sudo_mode, MODE_LIST);
+	argc = 1;
+	argv = list_argv;
+    } else {
+	SET(sudo_mode, MODE_CHECK);
+    }
     if (list_user) {
 	list_pw = sudo_getpwnam(list_user);
 	if (list_pw == NULL) {
 	    sudo_warnx(U_("unknown user: %s"), list_user);
 	    debug_return_int(-1);
 	}
     }
     ret = sudoers_policy_main(argc, argv, I_LISTPW, NULL, verbose, NULL);
     if (list_user) {
 	sudo_pw_delref(list_pw);
 	list_pw = NULL;
     }
 
     /* The audit functions set audit_msg on failure. */
     if (ret != 1 && audit_msg != NULL) {
 	if (sudo_version >= SUDO_API_MKVERSION(1, 15))
 	    *errstr = audit_msg;
     }
     debug_return_int(ret);
 }
diff --git a/plugins/sudoers/regress/fuzz/fuzz_policy.c b/plugins/sudoers/regress/fuzz/fuzz_policy.c
index 37f1df618..7f8b80dc2 100644
--- a/plugins/sudoers/regress/fuzz/fuzz_policy.c
+++ b/plugins/sudoers/regress/fuzz/fuzz_policy.c
@@ -187,178 +187,174 @@ int
 LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
 {
     struct dynamic_array plugin_args = { NULL };
     struct dynamic_array settings = { NULL };
     struct dynamic_array user_info = { NULL };
     struct dynamic_array argv = { NULL };
     struct dynamic_array env_add = { NULL };
     char **command_info = NULL, **argv_out = NULL, **user_env_out = NULL;
     const char *errstr = NULL;
     char *line = NULL;
     size_t linesize = 0;
     ssize_t linelen;
     int res;
     FILE *fp;
 
     fp = open_data(data, size);
     if (fp == NULL)
         return 0;
 
     /* user_info and settings must be non-NULL (even if empty). */
     push(&user_info, NULL);
     push(&settings, NULL);
 
     /* Iterate over each line of data. */
     while ((linelen = getdelim(&line, &linesize, '\n', fp)) != -1) {
 	if (line[linelen - 1] == '\n')
 	    line[linelen - 1] = '\0';
 
 	/* Skip comments and blank lines. */
 	if (line[0] == '#' || line[0] == '\0')
 	    continue;
 
 	/* plugin args */
 	if (strncmp(line, "error_recovery=", sizeof("error_recovery=") - 1) == 0) {
 	    push(&plugin_args, line);
 	    continue;
 	}
 	if (strncmp(line, "sudoers_file=", sizeof("sudoers_file=") - 1) == 0) {
 	    push(&plugin_args, line);
 	    continue;
 	}
 	if (strncmp(line, "sudoers_mode=", sizeof("sudoers_mode=") - 1) == 0) {
 	    push(&plugin_args, line);
 	    continue;
 	}
 	if (strncmp(line, "sudoers_gid=", sizeof("sudoers_gid=") - 1) == 0) {
 	    push(&plugin_args, line);
 	    continue;
 	}
 	if (strncmp(line, "sudoers_uid=", sizeof("sudoers_uid=") - 1) == 0) {
 	    push(&plugin_args, line);
 	    continue;
 	}
 	if (strncmp(line, "ldap_conf=", sizeof("ldap_conf=") - 1) == 0) {
 	    push(&plugin_args, line);
 	    continue;
 	}
 	if (strncmp(line, "ldap_secret=", sizeof("ldap_secret=") - 1) == 0) {
 	    push(&plugin_args, line);
 	    continue;
 	}
 
 	/* user info */
 	if (strncmp(line, "user=", sizeof("user=") - 1) == 0) {
 	    push(&user_info, line);
 	    continue;
 	}
 	if (strncmp(line, "uid=", sizeof("uid=") - 1) == 0) {
 	    push(&user_info, line);
 	    continue;
 	}
 	if (strncmp(line, "gid=", sizeof("gid=") - 1) == 0) {
 	    push(&user_info, line);
 	    continue;
 	}
 	if (strncmp(line, "groups=", sizeof("groups=") - 1) == 0) {
 	    push(&user_info, line);
 	    continue;
 	}
 	if (strncmp(line, "cwd=", sizeof("cwd=") - 1) == 0) {
 	    push(&user_info, line);
 	    continue;
 	}
 	if (strncmp(line, "tty=", sizeof("tty=") - 1) == 0) {
 	    push(&user_info, line);
 	    continue;
 	}
 	if (strncmp(line, "host=", sizeof("host=") - 1) == 0) {
 	    push(&user_info, line);
 	    continue;
 	}
 	if (strncmp(line, "lines=", sizeof("lines=") - 1) == 0) {
 	    push(&user_info, line);
 	    continue;
 	}
 	if (strncmp(line, "cols=", sizeof("cols=") - 1) == 0) {
 	    push(&user_info, line);
 	    continue;
 	}
 	if (strncmp(line, "sid=", sizeof("sid=") - 1) == 0) {
 	    push(&user_info, line);
 	    continue;
 	}
 	if (strncmp(line, "umask=", sizeof("umask=") - 1) == 0) {
 	    push(&user_info, line);
 	    continue;
 	}
 	if (strncmp(line, "rlimit_", sizeof("rlimit_") - 1) == 0) {
 	    push(&user_info, line);
 	    continue;
 	}
 
 	/* First argv entry is the command, the rest are args. */
 	if (strncmp(line, "argv=", sizeof("argv=") - 1) == 0) {
 	    push(&argv, line);
 	    continue;
 	}
 
-	/* First argv entry is the command, the rest are args. */
+	/* Additional environment variables to add. */
 	if (strncmp(line, "env=", sizeof("env=") - 1) == 0) {
 	    push(&env_add, line);
 	    continue;
 	}
 
 	/* Treat anything else as a setting. */
 	push(&settings, line);
     }
     fclose(fp);
     free(line);
     line = NULL;
 
     /* Call policy open function */
     res = sudoers_policy.open(SUDO_API_VERSION, fuzz_conversation, fuzz_printf,
 	settings.entries, user_info.entries, environ, plugin_args.entries,
 	&errstr);
 
     switch (res) {
     case 0:
 	/* failure */
 	break;
     case 1:
 	/* success */
 	if (argv.len == 0) {
 	    /* Must have a command to check. */
 	    push(&argv, "/usr/bin/id");
 	}
 
 	/* Call policy check function */
 	sudoers_policy.check_policy(argv.len, argv.entries, env_add.entries,
 	    &command_info, &argv_out, &user_env_out, &errstr);
 	break;
     default:
 	/* fatal or usage error */
 	break;
     }
 
-    /* Avoid double free of user_cmnd, it will be freed as part of argv. */
-    if (argv.len != 0 && user_cmnd == argv.entries[0])
-	user_cmnd = NULL;
-
     /* Free resources. */
     sudoers_policy.close(0, 0);
 
     /* Call a second time to free old env pointer. */
     env_init(NULL);
 
     sudoers_gc_run();
 
     free_dynamic_array(&plugin_args);
     free_dynamic_array(&settings);
     free_dynamic_array(&user_info);
     free_dynamic_array(&argv);
     free_dynamic_array(&env_add);
 
     return 0;
 }
 
 /* STUB */
@@ -632,14 +628,14 @@ int
 find_path(const char *infile, char **outfile, struct stat *sbp,
     const char *path, const char *runchroot, int ignore_dot,
     char * const *allowlist)
 {
     if (infile[0] == '/') {
 	*outfile = strdup(infile);
     } else {
 	if (asprintf(outfile, "/usr/bin/%s", infile) == -1)
 	    *outfile = NULL;
     }
-    return *outfile ? FOUND : NOT_FOUND;
+    return *outfile ? FOUND : NOT_FOUND_ERROR;
 }
 
 /* STUB */
diff --git a/plugins/sudoers/sudoers.c b/plugins/sudoers/sudoers.c
index 8d1a68fe6..8543ab75d 100644
--- a/plugins/sudoers/sudoers.c
+++ b/plugins/sudoers/sudoers.c
@@ -333,412 +333,405 @@ int
 sudoers_policy_main(int argc, char * const argv[], int pwflag, char *env_add[],
     bool verbose, void *closure)
 {
     char *iolog_path = NULL;
     mode_t cmnd_umask = ACCESSPERMS;
     struct sudo_nss *nss;
     int oldlocale, validated, ret = -1;
     debug_decl(sudoers_policy_main, SUDOERS_DEBUG_PLUGIN);
 
     sudo_warn_set_locale_func(sudoers_warn_setlocale);
 
+    if (argc == 0) {
+	sudo_warnx("%s", U_("no command specified"));
+	debug_return_int(-1);
+    }
+
     unlimit_nproc();
 
     /* Is root even allowed to run sudo? */
     if (user_uid == 0 && !def_root_sudo) {
 	/* Not an audit event (should it be?). */
 	sudo_warnx("%s",
 	    U_("sudoers specifies that root is not allowed to sudo"));
 	goto bad;
     }
 
     if (!set_perms(PERM_INITIAL))
 	goto bad;
 
     /* Environment variables specified on the command line. */
     if (env_add != NULL && env_add[0] != NULL)
 	sudo_user.env_vars = env_add;
 
     /*
      * Make a local copy of argc/argv, with special handling
-     * for pseudo-commands and the '-i' option.
+     * for the '-i' option.
      */
-    if (argc == 0) {
-	NewArgc = 1;
-	NewArgv = reallocarray(NULL, NewArgc + 1, sizeof(char *));
-	if (NewArgv == NULL) {
-	    sudo_warnx(U_("%s: %s"), __func__, U_("unable to allocate memory"));
-	    goto done;
-	}
-	sudoers_gc_add(GC_PTR, NewArgv);
-	NewArgv[0] = user_cmnd;
-	NewArgv[1] = NULL;
-    } else {
-	/* Must leave an extra slot before NewArgv for bash's --login */
-	NewArgc = argc;
-	NewArgv = reallocarray(NULL, NewArgc + 2, sizeof(char *));
-	if (NewArgv == NULL) {
+    /* Must leave an extra slot before NewArgv for bash's --login */
+    NewArgc = argc;
+    NewArgv = reallocarray(NULL, NewArgc + 2, sizeof(char *));
+    if (NewArgv == NULL) {
+	sudo_warnx(U_("%s: %s"), __func__, U_("unable to allocate memory"));
+	goto done;
+    }
+    sudoers_gc_add(GC_PTR, NewArgv);
+    NewArgv++;	/* reserve an extra slot for --login */
+    memcpy(NewArgv, argv, argc * sizeof(char *));
+    NewArgv[NewArgc] = NULL;
+    if (ISSET(sudo_mode, MODE_LOGIN_SHELL) && runas_pw != NULL) {
+	NewArgv[0] = strdup(runas_pw->pw_shell);
+	if (NewArgv[0] == NULL) {
 	    sudo_warnx(U_("%s: %s"), __func__, U_("unable to allocate memory"));
 	    goto done;
 	}
-	sudoers_gc_add(GC_PTR, NewArgv);
-	NewArgv++;	/* reserve an extra slot for --login */
-	memcpy(NewArgv, argv, argc * sizeof(char *));
-	NewArgv[NewArgc] = NULL;
-	if (ISSET(sudo_mode, MODE_LOGIN_SHELL) && runas_pw != NULL) {
-	    NewArgv[0] = strdup(runas_pw->pw_shell);
-	    if (NewArgv[0] == NULL) {
-		sudo_warnx(U_("%s: %s"), __func__, U_("unable to allocate memory"));
-		goto done;
-	    }
-	    sudoers_gc_add(GC_PTR, NewArgv[0]);
-	}
+	sudoers_gc_add(GC_PTR, NewArgv[0]);
     }
 
     /* If given the -P option, set the "preserve_groups" flag. */
     if (ISSET(sudo_mode, MODE_PRESERVE_GROUPS))
 	def_preserve_groups = true;
 
     /* Find command in path and apply per-command Defaults. */
     cmnd_status = set_cmnd();
     if (cmnd_status == NOT_FOUND_ERROR)
 	goto done;
 
     /* Check for -C overriding def_closefrom. */
     if (user_closefrom >= 0 && user_closefrom != def_closefrom) {
 	if (!def_closefrom_override) {
 	    log_warningx(SLOG_NO_STDERR|SLOG_AUDIT,
 		N_("user not allowed to override closefrom limit"));
 	    sudo_warnx("%s", U_("you are not permitted to use the -C option"));
 	    goto bad;
 	}
 	def_closefrom = user_closefrom;
     }
 
     /*
      * Check sudoers sources, using the locale specified in sudoers.
      */
     sudoers_setlocale(SUDOERS_LOCALE_SUDOERS, &oldlocale);
     validated = sudoers_lookup(snl, sudo_user.pw, &cmnd_status, pwflag);
     if (ISSET(validated, VALIDATE_ERROR)) {
 	/* The lookup function should have printed an error. */
 	goto done;
     }
 
     /* Restore user's locale. */
     sudoers_setlocale(oldlocale, NULL);
 
     if (safe_cmnd == NULL) {
 	if ((safe_cmnd = strdup(user_cmnd)) == NULL) {
 	    sudo_warnx(U_("%s: %s"), __func__, U_("unable to allocate memory"));
 	    goto done;
 	}
     }
 
     /* Defer uid/gid checks until after defaults have been updated. */
     if (unknown_runas_uid && !def_runas_allow_unknown_id) {
 	log_warningx(SLOG_AUDIT, N_("unknown user: %s"), runas_pw->pw_name);
 	goto done;
     }
     if (runas_gr != NULL) {
 	if (unknown_runas_gid && !def_runas_allow_unknown_id) {
 	    log_warningx(SLOG_AUDIT, N_("unknown group: %s"),
 		runas_gr->gr_name);
 	    goto done;
 	}
     }
 
     /*
      * Look up the timestamp dir owner if one is specified.
      */
     if (def_timestampowner) {
 	struct passwd *pw = NULL;
 
 	if (*def_timestampowner == '#') {
 	    const char *errstr;
 	    uid_t uid = sudo_strtoid(def_timestampowner + 1, &errstr);
 	    if (errstr == NULL)
 		pw = sudo_getpwuid(uid);
 	}
 	if (pw == NULL)
 	    pw = sudo_getpwnam(def_timestampowner);
 	if (pw != NULL) {
 	    timestamp_uid = pw->pw_uid;
 	    timestamp_gid = pw->pw_gid;
 	    sudo_pw_delref(pw);
 	} else {
 	    /* XXX - audit too? */
 	    log_warningx(SLOG_SEND_MAIL,
 		N_("timestamp owner (%s): No such user"), def_timestampowner);
 	    timestamp_uid = ROOT_UID;
 	    timestamp_gid = ROOT_GID;
 	}
     }
 
     /* If no command line args and "shell_noargs" is not set, error out. */
     if (ISSET(sudo_mode, MODE_IMPLIED_SHELL) && !def_shell_noargs) {
 	/* Not an audit event. */
 	ret = -2; /* usage error */
 	goto done;
     }
 
     /* Bail if a tty is required and we don't have one.  */
     if (def_requiretty && !tty_present()) {
 	log_warningx(SLOG_NO_STDERR|SLOG_AUDIT, N_("no tty"));
 	sudo_warnx("%s", U_("sorry, you must have a tty to run sudo"));
 	goto bad;
     }
 
     /* Check runas user's shell. */
     if (!check_user_shell(runas_pw)) {
 	log_warningx(SLOG_RAW_MSG|SLOG_AUDIT,
 	    N_("invalid shell for user %s: %s"),
 	    runas_pw->pw_name, runas_pw->pw_shell);
 	goto bad;
     }
 
     /*
      * We don't reset the environment for sudoedit or if the user
      * specified the -E command line flag and they have setenv privs.
      */
     if (ISSET(sudo_mode, MODE_EDIT) ||
 	(ISSET(sudo_mode, MODE_PRESERVE_ENV) && def_setenv))
 	def_env_reset = false;
 
     /* Build a new environment that avoids any nasty bits. */
     if (!rebuild_env())
 	goto bad;
 
     /* Require a password if sudoers says so.  */
     switch (check_user(validated, sudo_mode)) {
     case true:
 	/* user authenticated successfully. */
 	break;
     case false:
 	/* Note: log_denial() calls audit for us. */
 	if (!ISSET(validated, VALIDATE_SUCCESS)) {
 	    /* Only display a denial message if no password was read. */
 	    if (!log_denial(validated, def_passwd_tries <= 0))
 		goto done;
 	}
 	goto bad;
     default:
 	/* some other error, ret is -1. */
 	goto done;
     }
 
     /* Check whether user_runchroot is permitted (if specified). */
     switch (check_user_runchroot()) {
     case true:
 	break;
     case false:
 	goto bad;
     default:
 	goto done;
     }
 
     /* Check whether user_runcwd is permitted (if specified). */
     switch (check_user_runcwd()) {
     case true:
 	break;
     case false:
 	goto bad;
     default:
 	goto done;
     }
 
     /* If run as root with SUDO_USER set, set sudo_user.pw to that user. */
     /* XXX - causes confusion when root is not listed in sudoers */
     if (ISSET(sudo_mode, MODE_RUN|MODE_EDIT) && prev_user != NULL) {
 	if (user_uid == 0 && strcmp(prev_user, "root") != 0) {
 	    struct passwd *pw;
 
 	    if ((pw = sudo_getpwnam(prev_user)) != NULL) {
 		    if (sudo_user.pw != NULL)
 			sudo_pw_delref(sudo_user.pw);
 		    sudo_user.pw = pw;
 	    }
 	}
     }
 
     /* If the user was not allowed to run the command we are done. */
     if (!ISSET(validated, VALIDATE_SUCCESS)) {
 	/* Note: log_failure() calls audit for us. */
 	if (!log_failure(validated, cmnd_status))
 	    goto done;
 	goto bad;
     }
 
     /* Create Ubuntu-style dot file to indicate sudo was successful. */
     if (create_admin_success_flag() == -1)
 	goto done;
 
     /* Finally tell the user if the command did not exist. */
     if (cmnd_status == NOT_FOUND_DOT) {
 	audit_failure(NewArgv, N_("command in current directory"));
 	sudo_warnx(U_("ignoring \"%s\" found in '.'\nUse \"sudo ./%s\" if this is the \"%s\" you wish to run."), user_cmnd, user_cmnd, user_cmnd);
 	goto bad;
     } else if (cmnd_status == NOT_FOUND) {
 	if (ISSET(sudo_mode, MODE_CHECK)) {
 	    audit_failure(NewArgv, N_("%s: command not found"),
 		NewArgv[0]);
 	    sudo_warnx(U_("%s: command not found"), NewArgv[0]);
 	} else {
 	    audit_failure(NewArgv, N_("%s: command not found"),
 		user_cmnd);
 	    sudo_warnx(U_("%s: command not found"), user_cmnd);
 	}
 	goto bad;
     }
 
     /* If user specified a timeout make sure sudoers allows it. */
     if (!def_user_command_timeouts && user_timeout > 0) {
 	log_warningx(SLOG_NO_STDERR|SLOG_AUDIT,
 	    N_("user not allowed to set a command timeout"));
 	sudo_warnx("%s",
 	    U_("sorry, you are not allowed set a command timeout"));
 	goto bad;
     }
 
     /* If user specified env vars make sure sudoers allows it. */
     if (ISSET(sudo_mode, MODE_RUN) && !def_setenv) {
 	if (ISSET(sudo_mode, MODE_PRESERVE_ENV)) {
 	    log_warningx(SLOG_NO_STDERR|SLOG_AUDIT,
 		N_("user not allowed to preserve the environment"));
 	    sudo_warnx("%s",
 		U_("sorry, you are not allowed to preserve the environment"));
 	    goto bad;
 	} else {
 	    if (!validate_env_vars(sudo_user.env_vars))
 		goto bad;
 	}
     }
 
     if (ISSET(sudo_mode, (MODE_RUN | MODE_EDIT)) && !remote_iologs) {
 	if ((def_log_input || def_log_output) && def_iolog_file && def_iolog_dir) {
 	    if ((iolog_path = format_iolog_path()) == NULL) {
 		if (!def_ignore_iolog_errors)
 		    goto done;
 		/* Unable to expand I/O log path, disable I/O logging. */
 		def_log_input = false;
 		def_log_output = false;
 	    }
 	}
     }
 
     switch (sudo_mode & MODE_MASK) {
 	case MODE_CHECK:
 	    ret = display_cmnd(snl, list_pw ? list_pw : sudo_user.pw);
 	    break;
 	case MODE_LIST:
 	    ret = display_privs(snl, list_pw ? list_pw : sudo_user.pw, verbose);
 	    break;
 	case MODE_VALIDATE:
 	case MODE_RUN:
 	case MODE_EDIT:
 	    /* ret may be overridden by "goto bad" later */
 	    ret = true;
 	    break;
 	default:
 	    /* Should not happen. */
 	    sudo_warnx("internal error, unexpected sudo mode 0x%x", sudo_mode);
 	    goto done;
     }
 
     if (ISSET(sudo_mode, (MODE_VALIDATE|MODE_CHECK|MODE_LIST))) {
 	/* ret already set appropriately */
 	goto done;
     }
 
     /*
      * Set umask based on sudoers.
      * If user's umask is more restrictive, OR in those bits too
      * unless umask_override is set.
      */
     if (def_umask != ACCESSPERMS) {
 	cmnd_umask = def_umask;
 	if (!def_umask_override)
 	    cmnd_umask |= user_umask;
     }
 
     if (ISSET(sudo_mode, MODE_LOGIN_SHELL)) {
 	char *p;
 
 	/* Convert /bin/sh -> -sh so shell knows it is a login shell */
 	if ((p = strrchr(NewArgv[0], '/')) == NULL)
 	    p = NewArgv[0];
 	*p = '-';
 	NewArgv[0] = p;
 
 	/*
 	 * Newer versions of bash require the --login option to be used
 	 * in conjunction with the -c option even if the shell name starts
 	 * with a '-'.  Unfortunately, bash 1.x uses -login, not --login
 	 * so this will cause an error for that.
 	 */
 	if (NewArgc > 1 && strcmp(NewArgv[0], "-bash") == 0 &&
 	    strcmp(NewArgv[1], "-c") == 0) {
 	    /* Use the extra slot before NewArgv so we can store --login. */
 	    NewArgv--;
 	    NewArgc++;
 	    NewArgv[0] = NewArgv[1];
 	    NewArgv[1] = "--login";
 	}
 
 #if defined(_AIX) || (defined(__linux__) && !defined(HAVE_PAM))
 	/* Insert system-wide environment variables. */
 	if (!read_env_file(_PATH_ENVIRONMENT, true, false))
 	    sudo_warn("%s", _PATH_ENVIRONMENT);
 #endif
 #ifdef HAVE_LOGIN_CAP_H
 	/* Set environment based on login class. */
 	if (login_class) {
 	    login_cap_t *lc = login_getclass(login_class);
 	    if (lc != NULL) {
 		setusercontext(lc, runas_pw, runas_pw->pw_uid, LOGIN_SETPATH|LOGIN_SETENV);
 		login_close(lc);
 	    }
 	}
 #endif /* HAVE_LOGIN_CAP_H */
     }
 
     /* Insert system-wide environment variables. */
     if (def_restricted_env_file) {
 	if (!read_env_file(def_restricted_env_file, false, true))
 	    sudo_warn("%s", def_restricted_env_file);
     }
     if (def_env_file) {
 	if (!read_env_file(def_env_file, false, false))
 	    sudo_warn("%s", def_env_file);
     }
 
     /* Insert user-specified environment variables. */
     if (!insert_env_vars(sudo_user.env_vars))
 	goto done;
 
     /* Note: must call audit before uid change. */
     if (ISSET(sudo_mode, MODE_EDIT)) {
 	char **edit_argv;
 	int edit_argc;
 	const char *env_editor;
 
 	free(safe_cmnd);
 	safe_cmnd = find_editor(NewArgc - 1, NewArgv + 1, &edit_argc,
 	    &edit_argv, NULL, &env_editor, false);
 	if (safe_cmnd == NULL) {
 	    if (errno != ENOENT)
 		goto done;
 	    audit_failure(NewArgv, N_("%s: command not found"),
 		env_editor ? env_editor : def_editor);
 	    sudo_warnx(U_("%s: command not found"),
 		env_editor ? env_editor : def_editor);
 	    goto bad;
 	}
 	sudoers_gc_add(GC_EDIT_ARGS, edit_argv);
 	NewArgv = edit_argv;
 	NewArgc = edit_argc;
 
 	/* We want to run the editor with the unmodified environment. */
 	env_swap_old();
     }
 
     goto done;
@@ -920,75 +913,83 @@ static int
 set_cmnd(void)
 {
     struct sudo_nss *nss;
     int ret = FOUND;
     debug_decl(set_cmnd, SUDOERS_DEBUG_PLUGIN);
 
     /* Allocate user_stat for find_path() and match functions. */
     user_stat = calloc(1, sizeof(struct stat));
     if (user_stat == NULL) {
 	sudo_warnx(U_("%s: %s"), __func__, U_("unable to allocate memory"));
 	debug_return_int(NOT_FOUND_ERROR);
     }
 
-    /* Default value for cmnd, overridden by set_cmnd_path() below. */
-    if (user_cmnd == NULL)
-	user_cmnd = NewArgv[0];
-
     if (ISSET(sudo_mode, MODE_RUN|MODE_EDIT|MODE_CHECK)) {
 	if (!ISSET(sudo_mode, MODE_EDIT)) {
 	    const char *runchroot = user_runchroot;
 	    if (runchroot == NULL && def_runchroot != NULL &&
 		    strcmp(def_runchroot, "*") != 0)
 		runchroot = def_runchroot;
 
 	    ret = set_cmnd_path(runchroot);
 	    if (ret == NOT_FOUND_ERROR) {
 		if (errno == ENAMETOOLONG) {
 		    audit_failure(NewArgv, N_("command too long"));
 		}
 		log_warning(0, "%s", NewArgv[0]);
 		debug_return_int(ret);
 	    }
 	}
 
 	/* set user_args */
 	if (NewArgc > 1) {
 	    if (ISSET(sudo_mode, MODE_SHELL|MODE_LOGIN_SHELL) &&
 		    ISSET(sudo_mode, MODE_RUN)) {
 		/*
 		 * When running a command via a shell, the sudo front-end
 		 * escapes potential meta chars.  We unescape non-spaces
 		 * for sudoers matching and logging purposes.
 		 */
 		user_args = strvec_join(NewArgv + 1, ' ', strlcpy_unescape);
 	    } else {
 		user_args = strvec_join(NewArgv + 1, ' ', NULL);
 	    }
 	    if (user_args == NULL)
 		debug_return_int(NOT_FOUND_ERROR);
 	}
     }
+    if (user_cmnd == NULL) {
+	user_cmnd = strdup(NewArgv[0]);
+	if (user_cmnd == NULL)
+	    debug_return_int(NOT_FOUND_ERROR);
+    }
     user_base = sudo_basename(user_cmnd);
 
     /* Convert "sudo sudoedit" -> "sudoedit" */
     if (ISSET(sudo_mode, MODE_RUN) && strcmp(user_base, "sudoedit") == 0) {
+	char *new_cmnd;
+
 	CLR(sudo_mode, MODE_RUN);
 	SET(sudo_mode, MODE_EDIT);
 	sudo_warnx("%s", U_("sudoedit doesn't need to be run via sudo"));
-	user_base = user_cmnd = "sudoedit";
+	if ((new_cmnd = strdup("sudoedit")) == NULL) {
+	    sudo_warnx(U_("%s: %s"), __func__, U_("unable to allocate memory"));
+	    debug_return_int(NOT_FOUND_ERROR);
+	}
+	free(user_cmnd);
+	user_base = user_cmnd = new_cmnd;
     }
 
     TAILQ_FOREACH(nss, snl, entries) {
 	if (!update_defaults(nss->parse_tree, NULL, SETDEF_CMND, false)) {
 	    log_warningx(SLOG_SEND_MAIL|SLOG_NO_STDERR,
 		N_("problem with defaults entries"));
 	}
     }
 
     debug_return_int(ret);
 }
 
 /*
  * Open sudoers file and check mode/owner/type.
  * Returns a handle to the sudoers file or NULL on error.
  */
