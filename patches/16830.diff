commit d7d4cced14f6107d05b52b5e7758207f79aa3465
Author: Randy <randy408@protonmail.com>
Date:   Thu Aug 29 00:00:06 2019 +0200

    decode: fix filter byte reads when f.zerocopy=1

diff --git a/spng.c b/spng.c
index a7f8dca..4bbe003 100644
--- a/spng.c
+++ b/spng.c
@@ -1766,541 +1766,540 @@ static int get_ancillary2(spng_ctx *ctx)
 int spng_decode_image(spng_ctx *ctx, unsigned char *out, size_t out_size, int fmt, int flags)
 {
     if(ctx == NULL) return 1;
     if(out == NULL) return 1;
 
     int ret;
     size_t out_size_required, out_width;
 
     struct decode_flags f = {0};
 
     ret = spng_decoded_image_size(ctx, fmt, &out_size_required);
     if(ret) return ret;
     if(out_size < out_size_required) return SPNG_EBUFSIZ;
 
     out_width = out_size_required / ctx->ihdr.height;
 
     uint8_t channels = 1; /* grayscale or indexed_color */
 
     if(ctx->ihdr.color_type == SPNG_COLOR_TYPE_TRUECOLOR) channels = 3;
     else if(ctx->ihdr.color_type == SPNG_COLOR_TYPE_GRAYSCALE_ALPHA) channels = 2;
     else if(ctx->ihdr.color_type == SPNG_COLOR_TYPE_TRUECOLOR_ALPHA) channels = 4;
 
     uint8_t bytes_per_pixel;
 
     if(ctx->ihdr.bit_depth < 8) bytes_per_pixel = 1;
     else bytes_per_pixel = channels * (ctx->ihdr.bit_depth / 8);
 
     z_stream stream;
     stream.zalloc = spng__zalloc;
     stream.zfree = spng__zfree;
     stream.opaque = ctx;
 
     if(inflateInit(&stream) != Z_OK) return SPNG_EZLIB;
 #if ZLIB_VERNUM >= 0x1290
     if(inflateValidate(&stream, ctx->flags & SPNG_CTX_IGNORE_ADLER32)) return SPNG_EZLIB;
 #else
     #warning "zlib >= 1.2.11 is required for SPNG_CTX_IGNORE_ADLER32"
 #endif
 
     if(flags & SPNG_DECODE_TRNS && ctx->stored.trns) f.apply_trns = 1;
 
     if(flags & SPNG_DECODE_GAMMA && ctx->stored.gama) f.apply_gamma = 1;
 
     if(flags & SPNG_DECODE_USE_SBIT && ctx->stored.sbit) f.use_sbit = 1;
 
     if(ctx->ihdr.color_type == SPNG_COLOR_TYPE_INDEXED) f.indexed = 1;
 
     if(ctx->ihdr.interlace_method) f.interlaced = 1;
 
     f.do_scaling = 1;
     if(f.indexed) f.do_scaling = 0;
 
     int pass;
     uint8_t filter = 0, next_filter = 0;
     uint32_t i, k, scanline_idx, width;
     uint8_t r_8, g_8, b_8, a_8, gray_8;
     uint16_t r_16, g_16, b_16, a_16, gray_16;
     r_8=0; g_8=0; b_8=0; a_8=0; gray_8=0;
     r_16=0; g_16=0; b_16=0; a_16=0; gray_16=0;
     const uint8_t samples_per_byte = 8 / ctx->ihdr.bit_depth;
     const uint8_t mask = (uint16_t)(1 << ctx->ihdr.bit_depth) - 1;
     const uint8_t initial_shift = 8 - ctx->ihdr.bit_depth;
     size_t pixel_size = 4; /* SPNG_FMT_RGBA8 */
     size_t pixel_offset = 0;
     unsigned char *pixel;
     unsigned depth_target = 8; /* FMT_RGBA8 */
     unsigned processing_depth = ctx->ihdr.bit_depth;
 
     if(f.indexed) processing_depth = 8;
 
     if(fmt == SPNG_FMT_RGBA16)
     {
         depth_target = 16;
         pixel_size = 8;
     }
 
     if(ctx->ihdr.color_type == SPNG_COLOR_TYPE_TRUECOLOR_ALPHA &&
        ctx->ihdr.bit_depth == depth_target)
     {
         f.same_layout = 1;
         if(!flags && !f.interlaced) f.zerocopy = 1;
     }
 
     struct spng_subimage sub[7];
     memset(sub, 0, sizeof(struct spng_subimage) * 7);
 
     size_t scanline_width;
 
     ret = calculate_subimages(sub, &scanline_width, &ctx->ihdr, channels);
     if(ret) return ret;
 
     unsigned char *row = NULL;
     unsigned char *scanline = spng__malloc(ctx, scanline_width);
     unsigned char *prev_scanline = spng__malloc(ctx, scanline_width);
     unsigned char *scanline_buf = scanline;
     unsigned char *prev_scanline_buf = prev_scanline;
 
     if(f.interlaced) row = spng__malloc(ctx, out_width);
     else row = out;
 
     if(f.zerocopy) scanline = row;
 
     if(scanline == NULL || prev_scanline == NULL || row == NULL)
     {
         ret = SPNG_EMEM;
         goto decode_err;
     }
 
     uint16_t *gamma_lut = NULL;
 
     if(f.apply_gamma)
     {
         float file_gamma = (float)ctx->gama / 100000.0f;
         float max;
 
         uint32_t lut_entries;
 
         if(fmt == SPNG_FMT_RGBA8)
         {
             lut_entries = 256;
             max = 255.0f;
 
             gamma_lut = ctx->gamma_lut8;
         }
         else /* SPNG_FMT_RGBA16 */
         {
             lut_entries = 65536;
             max = 65535.0f;
 
             ctx->gamma_lut = spng__malloc(ctx, lut_entries * sizeof(uint16_t));
             if(ctx->gamma_lut == NULL)
             {
                 ret = SPNG_EMEM;
                 goto decode_err;
             }
             gamma_lut = ctx->gamma_lut;
         }
 
         float screen_gamma = 2.2f;
         float exponent = file_gamma * screen_gamma;
 
         if(FP_ZERO == fpclassify(exponent))
         {
             ret = SPNG_EGAMA;
             goto decode_err;
         }
 
         exponent = 1.0f / exponent;
 
         for(i=0; i < lut_entries; i++)
         {
             float c = pow((float)i / max, exponent) * max;
             c = fmin(c, max);
 
             gamma_lut[i] = (uint16_t)c;
         }
     }
 
     struct spng_sbit sb;
 
     sb.red_bits = processing_depth;
     sb.green_bits = processing_depth;
     sb.blue_bits = processing_depth;
     sb.alpha_bits = processing_depth;
     sb.grayscale_bits = processing_depth;
 
     if(f.use_sbit)
     {
         if(ctx->ihdr.color_type == 0)
         {
             sb.grayscale_bits = ctx->sbit.grayscale_bits;
             sb.alpha_bits = ctx->ihdr.bit_depth;
         }
         else if(ctx->ihdr.color_type == 2 || ctx->ihdr.color_type == 3)
         {
             sb.red_bits = ctx->sbit.red_bits;
             sb.green_bits = ctx->sbit.green_bits;
             sb.blue_bits = ctx->sbit.blue_bits;
             sb.alpha_bits = ctx->ihdr.bit_depth;
         }
         else if(ctx->ihdr.color_type == 4)
         {
             sb.grayscale_bits = ctx->sbit.grayscale_bits;
             sb.alpha_bits = ctx->sbit.alpha_bits;
         }
         else /* == 6 */
         {
             sb.red_bits = ctx->sbit.red_bits;
             sb.green_bits = ctx->sbit.green_bits;
             sb.blue_bits = ctx->sbit.blue_bits;
             sb.alpha_bits = ctx->sbit.alpha_bits;
         }
     }
 
     if(ctx->ihdr.bit_depth == 16 && fmt == SPNG_FMT_RGBA8)
     {/* in this case samples are scaled down by 8bits */
         sb.red_bits -= 8;
         sb.green_bits -= 8;
         sb.blue_bits -= 8;
         sb.alpha_bits -= 8;
         sb.grayscale_bits -= 8;
 
         processing_depth = 8;
     }
 
     /* Prevent infinite loops in sample_to_target() */
     if(!depth_target || depth_target > 16 ||
        !processing_depth || processing_depth > 16 ||
        !sb.grayscale_bits || sb.grayscale_bits > processing_depth ||
        !sb.alpha_bits || sb.alpha_bits > processing_depth ||
        !sb.red_bits || sb.red_bits > processing_depth ||
        !sb.green_bits || sb.green_bits > processing_depth ||
        !sb.blue_bits || sb.blue_bits > processing_depth)
     {
         ret = SPNG_ESBIT;
         goto decode_err;
     }
 
     if(sb.red_bits == sb.green_bits &&
        sb.green_bits == sb.blue_bits &&
        sb.blue_bits == sb.alpha_bits &&
        sb.alpha_bits == processing_depth &&
        processing_depth == depth_target) f.do_scaling = 0;
 
     struct spng_plte_entry16 plte[256];
 
     /* Pre-process palette entries */
     if(f.indexed)
     {
         for(i=0; i < 256; i++)
         {
             if(f.apply_trns && i < ctx->trns.n_type3_entries)
                 ctx->plte.entries[i].alpha = ctx->trns.type3_alpha[i];
             else
                 ctx->plte.entries[i].alpha = 255;
 
             plte[i].red = sample_to_target(ctx->plte.entries[i].red, 8, sb.red_bits, depth_target);
             plte[i].green = sample_to_target(ctx->plte.entries[i].green, 8, sb.green_bits, depth_target);
             plte[i].blue = sample_to_target(ctx->plte.entries[i].blue, 8, sb.blue_bits, depth_target);
             plte[i].alpha = sample_to_target(ctx->plte.entries[i].alpha, 8, sb.alpha_bits, depth_target);
 
             if(f.apply_gamma)
             {
                 plte[i].red = gamma_lut[plte[i].red];
                 plte[i].green = gamma_lut[plte[i].green];
                 plte[i].blue = gamma_lut[plte[i].blue];
             }
         }
 
         f.apply_trns = 0;
         f.apply_gamma = 0;
     }
 
     unsigned char trns_px[8];
 
     if(f.apply_trns && ctx->ihdr.color_type == SPNG_COLOR_TYPE_TRUECOLOR)
     {
         if(ctx->ihdr.bit_depth == 16)
         {
             memcpy(trns_px, &ctx->trns.red, 2);
             memcpy(trns_px + 2, &ctx->trns.green, 2);
             memcpy(trns_px + 4, &ctx->trns.blue, 2);
         }
         else
         {
             trns_px[0] = ctx->trns.red;
             trns_px[1] = ctx->trns.green;
             trns_px[2] = ctx->trns.blue;
         }
     }
 
     stream.avail_in = 0;
     stream.next_in = ctx->data;
 
     for(pass=0; pass < 7; pass++)
     {
         /* Skip empty passes */
         if(sub[pass].width == 0 || sub[pass].height == 0) continue;
 
         scanline_width = sub[pass].scanline_width;
 
         /* prev_scanline is all zeros for the first scanline */
         prev_scanline = prev_scanline_buf;
         memset(prev_scanline, 0, scanline_width);
 
         /* Read the first filter byte, offsetting all reads by 1 byte.
            The scanlines will be aligned with the start of the array with
            the next scanline's filter byte at the end,
            the last scanline will end up being 1 byte "shorter". */
         ret = read_scanline_bytes(ctx, &stream, &filter, 1);
         if(ret) goto decode_err;
 
         for(scanline_idx=0; scanline_idx < sub[pass].height; scanline_idx++)
         {
-            /* The last scanline is 1 byte "shorter" */
-            if(scanline_idx == (sub[pass].height - 1))
-                ret = read_scanline_bytes(ctx, &stream, scanline, scanline_width - 1);
-            else
+            if(scanline_idx < (sub[pass].height - 1))
+            {
                 ret = read_scanline_bytes(ctx, &stream, scanline, scanline_width);
+                memcpy(&next_filter, scanline + scanline_width - 1, 1);
+            }
+            else ret = read_scanline_bytes(ctx, &stream, scanline, scanline_width - 1);
 
             if(ret) goto decode_err;
 
-            memcpy(&next_filter, scanline + scanline_width - 1, 1);
-
             if(ctx->ihdr.bit_depth == 16) u16_row_to_host(scanline, scanline_width - 1);
 
             ret = defilter_scanline(prev_scanline, scanline, scanline_width - 1, bytes_per_pixel, filter);
             if(ret) goto decode_err;
 
             filter = next_filter;
 
             pixel_offset = 0;
             width = sub[pass].width;
 
             uint8_t shift_amount = initial_shift;
 
             for(k=0; k < width; k++)
             {
                 pixel = row + pixel_offset;
                 pixel_offset += pixel_size;
 
                 if(f.same_layout)
                 {
                     if(f.zerocopy) break;
 
                     memcpy(row, scanline, scanline_width - 1);
                     break;
                 }
 
                 if(ctx->ihdr.color_type == SPNG_COLOR_TYPE_TRUECOLOR)
                 {
                     if(ctx->ihdr.bit_depth == 16)
                     {
                         memcpy(&r_16, scanline + (k * 6), 2);
                         memcpy(&g_16, scanline + (k * 6) + 2, 2);
                         memcpy(&b_16, scanline + (k * 6) + 4, 2);
 
                         a_16 = 65535;
                     }
                     else /* == 8 */
                     {
                         if(fmt == SPNG_FMT_RGBA8)
                         {
                             rgb8_row_to_rgba8(scanline, row, width);
                             break;
                         }
 
                         memcpy(&r_8, scanline + (k * 3), 1);
                         memcpy(&g_8, scanline + (k * 3) + 1, 1);
                         memcpy(&b_8, scanline + (k * 3) + 2, 1);
 
                         a_8 = 255;
                     }
                 }
                 else if(ctx->ihdr.color_type == SPNG_COLOR_TYPE_INDEXED)
                 {
                     uint8_t entry = 0;
 
                     if(ctx->ihdr.bit_depth == 8)
                     {
                         memcpy(&entry, scanline + k, 1);
                     }
                     else /* < 8 */
                     {
                         memcpy(&entry, scanline + k / samples_per_byte, 1);
 
                         if(shift_amount > 8) shift_amount = initial_shift;
 
                         entry = (entry >> shift_amount) & mask;
 
                         shift_amount -= ctx->ihdr.bit_depth;
                     }
 
                     if(fmt == SPNG_FMT_RGBA8)
                     {
                         pixel[0] = plte[entry].red;
                         pixel[1] = plte[entry].green;
                         pixel[2] = plte[entry].blue;
                         pixel[3] = plte[entry].alpha;
 
                         continue;
                     }
                     else
                     {
                         r_16 = plte[entry].red;
                         g_16 = plte[entry].green;
                         b_16 = plte[entry].blue;
                         a_16 = plte[entry].alpha;
 
                         memcpy(pixel, &r_16, 2);
                         memcpy(pixel + 2, &g_16, 2);
                         memcpy(pixel + 4, &b_16, 2);
                         memcpy(pixel + 6, &a_16, 2);
 
                         continue;
                     }
                 }
                 else if(ctx->ihdr.color_type == SPNG_COLOR_TYPE_TRUECOLOR_ALPHA)
                 {
                     if(ctx->ihdr.bit_depth == 16)
                     {
                         memcpy(&r_16, scanline + (k * 8), 2);
                         memcpy(&g_16, scanline + (k * 8) + 2, 2);
                         memcpy(&b_16, scanline + (k * 8) + 4, 2);
                         memcpy(&a_16, scanline + (k * 8) + 6, 2);
                     }
                     else /* == 8 */
                     {
                         memcpy(&r_8, scanline + (k * 4), 1);
                         memcpy(&g_8, scanline + (k * 4) + 1, 1);
                         memcpy(&b_8, scanline + (k * 4) + 2, 1);
                         memcpy(&a_8, scanline + (k * 4) + 3, 1);
                     }
                 }
                 else if(ctx->ihdr.color_type == SPNG_COLOR_TYPE_GRAYSCALE)
                 {
                     if(ctx->ihdr.bit_depth == 16)
                     {
                         memcpy(&gray_16, scanline + k * 2, 2);
 
                         if(f.apply_trns && ctx->trns.gray == gray_16) a_16 = 0;
                         else a_16 = 65535;
 
                         r_16 = gray_16;
                         g_16 = gray_16;
                         b_16 = gray_16;
                     }
                     else /* <= 8 */
                     {
                         memcpy(&gray_8, scanline + k / samples_per_byte, 1);
 
                         if(shift_amount > 8) shift_amount = initial_shift;
 
                         gray_8 = (gray_8 >> shift_amount) & mask;
 
                         shift_amount -= ctx->ihdr.bit_depth;
 
                         if(f.apply_trns && ctx->trns.gray == gray_8) a_8 = 0;
                         else a_8 = 255;
 
                         r_8 = gray_8; g_8 = gray_8; b_8 = gray_8;
                     }
                 }
                 else if(ctx->ihdr.color_type == SPNG_COLOR_TYPE_GRAYSCALE_ALPHA)
                 {
                     if(ctx->ihdr.bit_depth == 16)
                     {
                         memcpy(&gray_16, scanline + (k * 4), 2);
                         memcpy(&a_16, scanline + (k * 4) + 2, 2);
 
                         r_16 = gray_16;
                         g_16 = gray_16;
                         b_16 = gray_16;
                     }
                     else /* == 8 */
                     {
                         memcpy(&gray_8, scanline + (k * 2), 1);
                         memcpy(&a_8, scanline + (k * 2) + 1, 1);
 
                         r_8 = gray_8;
                         g_8 = gray_8;
                         b_8 = gray_8;
                     }
                 }
 
 
                 if(fmt == SPNG_FMT_RGBA8)
                 {
                     if(ctx->ihdr.bit_depth == 16)
                     {
                         r_8 = r_16 >> 8;
                         g_8 = g_16 >> 8;
                         b_8 = b_16 >> 8;
                         a_8 = a_16 >> 8;
                     }
 
                     memcpy(pixel, &r_8, 1);
                     memcpy(pixel + 1, &g_8, 1);
                     memcpy(pixel + 2, &b_8, 1);
                     memcpy(pixel + 3, &a_8, 1);
                 }
                 else if(fmt == SPNG_FMT_RGBA16)
                 {
                     if(ctx->ihdr.bit_depth != 16)
                     {
                         r_16 = r_8;
                         g_16 = g_8;
                         b_16 = b_8;
                         a_16 = a_8;
                     }
 
                     memcpy(pixel, &r_16, 2);
                     memcpy(pixel + 2, &g_16, 2);
                     memcpy(pixel + 4, &b_16, 2);
                     memcpy(pixel + 6, &a_16, 2);
                 }
             }/* for(k=0; k < sub[pass].width; k++) */
 
             if(f.apply_trns) trns_row(row, scanline, trns_px, width, fmt, ctx->ihdr.color_type, ctx->ihdr.bit_depth);
 
             if(f.do_scaling) scale_row(row, width, fmt, processing_depth, &sb);
 
             if(f.apply_gamma) gamma_correct_row(row, width, fmt, gamma_lut);
 
             /* prev_scanline is always defiltered */
             void *t = prev_scanline;
             prev_scanline = scanline;
             scanline = t;
 
             if(f.interlaced)
             {
                 const unsigned int adam7_x_start[7] = { 0, 4, 0, 2, 0, 1, 0 };
                 const unsigned int adam7_y_start[7] = { 0, 0, 4, 0, 2, 0, 1 };
                 const unsigned int adam7_x_delta[7] = { 8, 8, 4, 4, 2, 2, 1 };
                 const unsigned int adam7_y_delta[7] = { 8, 8, 8, 4, 4, 2, 2 };
 
                 for(k=0; k < width; k++)
                 {
                     size_t ioffset = ((adam7_y_start[pass] + scanline_idx * adam7_y_delta[pass]) *
                                       ctx->ihdr.width + adam7_x_start[pass] + k * adam7_x_delta[pass]) * pixel_size;
 
                     memcpy((unsigned char*)out + ioffset, row + k * pixel_size, pixel_size);
                 }
             }
             else
             {/* avoid creating an invalid reference */
                 if(scanline_idx != (sub[pass].height - 1) )
                 {
                     if(f.zerocopy) prev_scanline = row;
 
                     row += out_width;
                 }
             }
 
         }/* for(scanline_idx=0; scanline_idx < sub[pass].height; scanline_idx++) */
     }/* for(pass=0; pass < 7; pass++) */
 
     if(ctx->cur_chunk_bytes_left) /* zlib stream ended before an IDAT chunk boundary */
     {/* discard the rest of the chunk */
         ret = discard_chunk_bytes(ctx, ctx->cur_chunk_bytes_left);
     }
