commit 73542f3830cb420ade7fd4ecd53cc62f5a38e57e
Merge: a4274930e 9bd2b4da5
Author: Kim Kulling <kimkulling@users.noreply.github.com>
Date:   Sun Jul 24 12:11:18 2022 +0200

    Merge branch 'master' into patch-2

diff --git a/code/AssetLib/NDO/NDOLoader.cpp b/code/AssetLib/NDO/NDOLoader.cpp
index 37c543692..07953b04d 100644
--- a/code/AssetLib/NDO/NDOLoader.cpp
+++ b/code/AssetLib/NDO/NDOLoader.cpp
@@ -103,204 +103,206 @@ void NDOImporter::SetupProperties(const Importer* /*pImp*/)
 // ------------------------------------------------------------------------------------------------
 // Imports the given file into the given scene structure.
 void NDOImporter::InternReadFile( const std::string& pFile,
     aiScene* pScene, IOSystem* pIOHandler)
 {
 
     auto file = pIOHandler->Open( pFile, "rb");
     if (!file) {
         throw DeadlyImportError("Nendo: Could not open ", pFile);
     }
 
     StreamReaderBE reader(file);
 
     // first 9 bytes are nendo file format ("nendo 1.n")
     const char* head = (const char*)reader.GetPtr();
     reader.IncPtr(9);
 
     if (strncmp("nendo ",head,6)) {
         throw DeadlyImportError("Not a Nendo file; magic signature missing");
     }
     // check if this is a supported version. if not, continue, too -- users,
     // please don't complain if it doesn't work then ...
     unsigned int file_format = 12;
     if (!strncmp("1.0",head+6,3)) {
         file_format = 10;
         ASSIMP_LOG_INFO("NDO file format is 1.0");
     }
     else if (!strncmp("1.1",head+6,3)) {
         file_format = 11;
         ASSIMP_LOG_INFO("NDO file format is 1.1");
     }
     else if (!strncmp("1.2",head+6,3)) {
         file_format = 12;
         ASSIMP_LOG_INFO("NDO file format is 1.2");
     }
     else {
-        ASSIMP_LOG_WARN( "Unrecognized nendo file format version, continuing happily ... :", (head+6));
+        char buff[4] = {0};
+        memcpy(buff, head+6, 3);
+        ASSIMP_LOG_WARN( "Unrecognized nendo file format version, continuing happily ... :", buff);
     }
 
     reader.IncPtr(2); /* skip flags */
     if (file_format >= 12) {
         reader.IncPtr(2);
     }
     unsigned int temp = reader.GetU1();
 
     std::vector<Object> objects(temp); /* buffer to store all the loaded objects in */
 
     // read all objects
     for (unsigned int o = 0; o < objects.size(); ++o) {
 
 //      if (file_format < 12) {
             if (!reader.GetI1()) {
                 continue; /* skip over empty object */
             }
         //  reader.GetI2();
 //      }
         Object& obj = objects[o];
 
         temp = file_format >= 12 ? reader.GetU4() : reader.GetU2();
         head = (const char*)reader.GetPtr();
         reader.IncPtr(temp + 76); /* skip unknown stuff */
 
         obj.name = std::string(head, temp);
 
         // read edge table
         temp = file_format >= 12 ? reader.GetU4() : reader.GetU2();
         obj.edges.reserve(temp);
         for (unsigned int e = 0; e < temp; ++e) {
 
             obj.edges.push_back(Edge());
             Edge& edge = obj.edges.back();
 
             for (unsigned int i = 0; i< 8; ++i) {
                 edge.edge[i] = file_format >= 12 ? reader.GetU4() : reader.GetU2();
             }
             edge.hard =  file_format >= 11 ? reader.GetU1() : 0;
             for (unsigned int i = 0; i< 8; ++i) {
                 edge.color[i] = reader.GetU1();
             }
         }
 
         // read face table
         temp = file_format >= 12 ? reader.GetU4() : reader.GetU2();
         obj.faces.reserve(temp);
         for (unsigned int e = 0; e < temp; ++e) {
 
             obj.faces.push_back(Face());
             Face& face = obj.faces.back();
 
             face.elem = file_format >= 12 ? reader.GetU4() : reader.GetU2();
         }
 
         // read vertex table
         temp = file_format >= 12 ? reader.GetU4() : reader.GetU2();
         obj.vertices.reserve(temp);
         for (unsigned int e = 0; e < temp; ++e) {
 
             obj.vertices.push_back(Vertex());
             Vertex& v = obj.vertices.back();
 
             v.num = file_format >= 12 ? reader.GetU4() : reader.GetU2();
             v.val.x = reader.GetF4();
             v.val.y = reader.GetF4();
             v.val.z = reader.GetF4();
         }
 
         // read UVs
         temp = file_format >= 12 ? reader.GetU4() : reader.GetU2();
         for (unsigned int e = 0; e < temp; ++e) {
              file_format >= 12 ? reader.GetU4() : reader.GetU2();
         }
 
         temp = file_format >= 12 ? reader.GetU4() : reader.GetU2();
         for (unsigned int e = 0; e < temp; ++e) {
              file_format >= 12 ? reader.GetU4() : reader.GetU2();
         }
 
         if (reader.GetU1()) {
             const unsigned int x = reader.GetU2(), y = reader.GetU2();
             temp = 0;
             while (temp < x*y)  {
                 unsigned int repeat = reader.GetU1();
                 reader.GetU1();
                 reader.GetU1();
                 reader.GetU1();
                 temp += repeat;
             }
         }
     }
 
     // construct a dummy node graph and add all named objects as child nodes
     aiNode* root = pScene->mRootNode = new aiNode("$NDODummyRoot");
     aiNode** cc = root->mChildren = new aiNode* [ root->mNumChildren = static_cast<unsigned int>( objects.size()) ] ();
     pScene->mMeshes = new aiMesh* [ root->mNumChildren] ();
 
     std::vector<aiVector3D> vertices;
     std::vector<unsigned int> indices;
 
     for(const Object& obj : objects) {
         aiNode* nd = *cc++ = new aiNode(obj.name);
         nd->mParent = root;
 
         // translated from a python dict() - a vector might be sufficient as well
         typedef std::map<unsigned int, unsigned int>  FaceTable;
         FaceTable face_table;
 
         unsigned int n = 0;
         for(const Edge& edge : obj.edges) {
 
             face_table[edge.edge[2]] = n;
             face_table[edge.edge[3]] = n;
 
             ++n;
         }
 
         aiMesh* mesh = new aiMesh();
         mesh->mNumFaces=static_cast<unsigned int>(face_table.size());
         aiFace* faces = mesh->mFaces = new aiFace[mesh->mNumFaces];
 
         vertices.clear();
         vertices.reserve(4 * face_table.size()); // arbitrarily chosen
         for(FaceTable::value_type& v : face_table) {
             indices.clear();
 
             aiFace& f = *faces++;
 
             const unsigned int key = v.first;
             unsigned int cur_edge = v.second;
             while (1) {
                 unsigned int next_edge, next_vert;
                 if (key == obj.edges[cur_edge].edge[3]) {
                     next_edge = obj.edges[cur_edge].edge[5];
                     next_vert = obj.edges[cur_edge].edge[1];
                 }
                 else {
                     next_edge = obj.edges[cur_edge].edge[4];
                     next_vert = obj.edges[cur_edge].edge[0];
                 }
                 indices.push_back( static_cast<unsigned int>(vertices.size()) );
                 vertices.push_back(obj.vertices[ next_vert ].val);
 
                 cur_edge = next_edge;
                 if (cur_edge == v.second) {
                     break;
                 }
             }
 
             f.mIndices = new unsigned int[f.mNumIndices = static_cast<unsigned int>(indices.size())];
             std::copy(indices.begin(),indices.end(),f.mIndices);
         }
 
         mesh->mVertices = new aiVector3D[mesh->mNumVertices = static_cast<unsigned int>(vertices.size())];
         std::copy(vertices.begin(),vertices.end(),mesh->mVertices);
 
         if (mesh->mNumVertices) {
             pScene->mMeshes[pScene->mNumMeshes] = mesh;
 
             (nd->mMeshes = new unsigned int[nd->mNumMeshes=1])[0]=pScene->mNumMeshes++;
         }else
             delete mesh;
     }
 }
 
 #endif
diff --git a/code/AssetLib/Obj/ObjFileMtlImporter.cpp b/code/AssetLib/Obj/ObjFileMtlImporter.cpp
index a73277701..f8ab1b69e 100644
--- a/code/AssetLib/Obj/ObjFileMtlImporter.cpp
+++ b/code/AssetLib/Obj/ObjFileMtlImporter.cpp
@@ -115,140 +115,156 @@ ObjFileMtlImporter::~ObjFileMtlImporter() {
 // -------------------------------------------------------------------
 //  Loads the material description
 void ObjFileMtlImporter::load() {
     if (m_DataIt == m_DataItEnd)
         return;
 
     while (m_DataIt != m_DataItEnd) {
         switch (*m_DataIt) {
             case 'k':
             case 'K': {
                 ++m_DataIt;
                 if (*m_DataIt == 'a') // Ambient color
                 {
                     ++m_DataIt;
-                    getColorRGBA(&m_pModel->m_pCurrentMaterial->ambient);
+                    if (m_pModel->m_pCurrentMaterial != nullptr)
+                        getColorRGBA(&m_pModel->m_pCurrentMaterial->ambient);
                 } else if (*m_DataIt == 'd') {
                     // Diffuse color
                     ++m_DataIt;
-                    getColorRGBA(&m_pModel->m_pCurrentMaterial->diffuse);
+                    if (m_pModel->m_pCurrentMaterial != nullptr)
+                        getColorRGBA(&m_pModel->m_pCurrentMaterial->diffuse);
                 } else if (*m_DataIt == 's') {
                     ++m_DataIt;
-                    getColorRGBA(&m_pModel->m_pCurrentMaterial->specular);
+                    if (m_pModel->m_pCurrentMaterial != nullptr)
+                        getColorRGBA(&m_pModel->m_pCurrentMaterial->specular);
                 } else if (*m_DataIt == 'e') {
                     ++m_DataIt;
-                    getColorRGBA(&m_pModel->m_pCurrentMaterial->emissive);
+                    if (m_pModel->m_pCurrentMaterial != nullptr)
+                        getColorRGBA(&m_pModel->m_pCurrentMaterial->emissive);
                 }
                 m_DataIt = skipLine<DataArrayIt>(m_DataIt, m_DataItEnd, m_uiLine);
             } break;
             case 'T': {
                 ++m_DataIt;
                 // Material transmission color
                 if (*m_DataIt == 'f')  {
                     ++m_DataIt;
-                    getColorRGBA(&m_pModel->m_pCurrentMaterial->transparent);
+                    if (m_pModel->m_pCurrentMaterial != nullptr)
+                        getColorRGBA(&m_pModel->m_pCurrentMaterial->transparent);
                 } else if (*m_DataIt == 'r')  {
                     // Material transmission alpha value
                     ++m_DataIt;
                     ai_real d;
                     getFloatValue(d);
-                    m_pModel->m_pCurrentMaterial->alpha = static_cast<ai_real>(1.0) - d;
+                    if (m_pModel->m_pCurrentMaterial != nullptr)
+                        m_pModel->m_pCurrentMaterial->alpha = static_cast<ai_real>(1.0) - d;
                 }
                 m_DataIt = skipLine<DataArrayIt>(m_DataIt, m_DataItEnd, m_uiLine);
             } break;
             case 'd': {
                 if (*(m_DataIt + 1) == 'i' && *(m_DataIt + 2) == 's' && *(m_DataIt + 3) == 'p') {
                     // A displacement map
                     getTexture();
                 } else {
                     // Alpha value
                     ++m_DataIt;
-                    getFloatValue(m_pModel->m_pCurrentMaterial->alpha);
+                    if (m_pModel->m_pCurrentMaterial != nullptr)
+                        getFloatValue(m_pModel->m_pCurrentMaterial->alpha);
                     m_DataIt = skipLine<DataArrayIt>(m_DataIt, m_DataItEnd, m_uiLine);
                 }
             } break;
 
             case 'N':
             case 'n': {
                 ++m_DataIt;
                 switch (*m_DataIt) {
                     case 's': // Specular exponent
                         ++m_DataIt;
-                        getFloatValue(m_pModel->m_pCurrentMaterial->shineness);
+                        if (m_pModel->m_pCurrentMaterial != nullptr)
+                            getFloatValue(m_pModel->m_pCurrentMaterial->shineness);
                         break;
                     case 'i': // Index Of refraction
                         ++m_DataIt;
-                        getFloatValue(m_pModel->m_pCurrentMaterial->ior);
+                        if (m_pModel->m_pCurrentMaterial != nullptr)
+                            getFloatValue(m_pModel->m_pCurrentMaterial->ior);
                         break;
                     case 'e': // New material
                         createMaterial();
                         break;
                     case 'o': // Norm texture
                         --m_DataIt;
                         getTexture();
                         break;
                 }
                 m_DataIt = skipLine<DataArrayIt>(m_DataIt, m_DataItEnd, m_uiLine);
             } break;
 
             case 'P':
                 {
                     ++m_DataIt;
                     switch(*m_DataIt)
                     {
                     case 'r':
                         ++m_DataIt;
-                        getFloatValue(m_pModel->m_pCurrentMaterial->roughness);
+                        if (m_pModel->m_pCurrentMaterial != nullptr)
+                            getFloatValue(m_pModel->m_pCurrentMaterial->roughness);
                         break;
                     case 'm':
                         ++m_DataIt;
-                        getFloatValue(m_pModel->m_pCurrentMaterial->metallic);
+                        if (m_pModel->m_pCurrentMaterial != nullptr)
+                            getFloatValue(m_pModel->m_pCurrentMaterial->metallic);
                         break;
                     case 's':
                         ++m_DataIt;
-                        getColorRGBA(m_pModel->m_pCurrentMaterial->sheen);
+                        if (m_pModel->m_pCurrentMaterial != nullptr)
+                            getColorRGBA(m_pModel->m_pCurrentMaterial->sheen);
                         break;
                     case 'c':
                         ++m_DataIt;
                         if (*m_DataIt == 'r') {
                             ++m_DataIt;
-                            getFloatValue(m_pModel->m_pCurrentMaterial->clearcoat_roughness);
+                            if (m_pModel->m_pCurrentMaterial != nullptr)
+                                getFloatValue(m_pModel->m_pCurrentMaterial->clearcoat_roughness);
                         } else {
-                            getFloatValue(m_pModel->m_pCurrentMaterial->clearcoat_thickness);
+                            if (m_pModel->m_pCurrentMaterial != nullptr)
+                                getFloatValue(m_pModel->m_pCurrentMaterial->clearcoat_thickness);
                         }
                         break;
                     }
                     m_DataIt = skipLine<DataArrayIt>(m_DataIt, m_DataItEnd, m_uiLine);
                 }
                 break;
 
             case 'm': // Texture
             case 'b': // quick'n'dirty - for 'bump' sections
             case 'r': // quick'n'dirty - for 'refl' sections
             {
                 getTexture();
                 m_DataIt = skipLine<DataArrayIt>(m_DataIt, m_DataItEnd, m_uiLine);
             } break;
 
             case 'i': // Illumination model
             {
                 m_DataIt = getNextToken<DataArrayIt>(m_DataIt, m_DataItEnd);
-                getIlluminationModel(m_pModel->m_pCurrentMaterial->illumination_model);
+                if (m_pModel->m_pCurrentMaterial != nullptr)
+                    getIlluminationModel(m_pModel->m_pCurrentMaterial->illumination_model);
                 m_DataIt = skipLine<DataArrayIt>(m_DataIt, m_DataItEnd, m_uiLine);
             } break;
 
             case 'a': // Anisotropy
             {
                 ++m_DataIt;
                 getFloatValue(m_pModel->m_pCurrentMaterial->anisotropy);
-                m_DataIt = skipLine<DataArrayIt>(m_DataIt, m_DataItEnd, m_uiLine);
+                if (m_pModel->m_pCurrentMaterial != nullptr)
+                    m_DataIt = skipLine<DataArrayIt>(m_DataIt, m_DataItEnd, m_uiLine);
             } break;
 
             default: {
                 m_DataIt = skipLine<DataArrayIt>(m_DataIt, m_DataItEnd, m_uiLine);
             } break;
         }
     }
 }
 
 // -------------------------------------------------------------------
 //  Loads a color definition
diff --git a/code/AssetLib/Obj/ObjFileParser.cpp b/code/AssetLib/Obj/ObjFileParser.cpp
index 4e50d5dae..4dc08edbc 100644
--- a/code/AssetLib/Obj/ObjFileParser.cpp
+++ b/code/AssetLib/Obj/ObjFileParser.cpp
@@ -429,114 +429,115 @@ static const std::string DefaultObjName = "defaultobject";
 void ObjFileParser::getFace(aiPrimitiveType type) {
     m_DataIt = getNextToken<DataArrayIt>(m_DataIt, m_DataItEnd);
     if (m_DataIt == m_DataItEnd || *m_DataIt == '\0') {
         return;
     }
 
     ObjFile::Face *face = new ObjFile::Face(type);
     bool hasNormal = false;
 
     const int vSize = static_cast<unsigned int>(m_pModel->m_Vertices.size());
     const int vtSize = static_cast<unsigned int>(m_pModel->m_TextureCoord.size());
     const int vnSize = static_cast<unsigned int>(m_pModel->m_Normals.size());
 
     const bool vt = (!m_pModel->m_TextureCoord.empty());
     const bool vn = (!m_pModel->m_Normals.empty());
     int iPos = 0;
     while (m_DataIt != m_DataItEnd) {
         int iStep = 1;
 
         if (IsLineEnd(*m_DataIt)) {
             break;
         }
 
         if (*m_DataIt == '/') {
             if (type == aiPrimitiveType_POINT) {
                 ASSIMP_LOG_ERROR("Obj: Separator unexpected in point statement");
             }
             iPos++;
         } else if (IsSpaceOrNewLine(*m_DataIt)) {
             iPos = 0;
         } else {
             //OBJ USES 1 Base ARRAYS!!!!
-            const int iVal(::atoi(&(*m_DataIt)));
+            std::string number(&(*m_DataIt), m_DataItEnd - m_DataIt);
+            const int iVal(::atoi(number.c_str()));
 
             // increment iStep position based off of the sign and # of digits
             int tmp = iVal;
             if (iVal < 0) {
                 ++iStep;
             }
             while ((tmp = tmp / 10) != 0) {
                 ++iStep;
             }
 
             if (iPos == 1 && !vt && vn)
                 iPos = 2; // skip texture coords for normals if there are no tex coords
 
             if (iVal > 0) {
                 // Store parsed index
                 if (0 == iPos) {
                     face->m_vertices.push_back(iVal - 1);
                 } else if (1 == iPos) {
                     face->m_texturCoords.push_back(iVal - 1);
                 } else if (2 == iPos) {
                     face->m_normals.push_back(iVal - 1);
                     hasNormal = true;
                 } else {
                     reportErrorTokenInFace();
                 }
             } else if (iVal < 0) {
                 // Store relatively index
                 if (0 == iPos) {
                     face->m_vertices.push_back(vSize + iVal);
                 } else if (1 == iPos) {
                     face->m_texturCoords.push_back(vtSize + iVal);
                 } else if (2 == iPos) {
                     face->m_normals.push_back(vnSize + iVal);
                     hasNormal = true;
                 } else {
                     reportErrorTokenInFace();
                 }
             } else {
                 //On error, std::atoi will return 0 which is not a valid value
                 delete face;
                 throw DeadlyImportError("OBJ: Invalid face indice");
             }
         }
         m_DataIt += iStep;
     }
 
     if (face->m_vertices.empty()) {
         ASSIMP_LOG_ERROR("Obj: Ignoring empty face");
         // skip line and clean up
         m_DataIt = skipLine<DataArrayIt>(m_DataIt, m_DataItEnd, m_uiLine);
         delete face;
         return;
     }
 
     // Set active material, if one set
     if (nullptr != m_pModel->m_pCurrentMaterial) {
         face->m_pMaterial = m_pModel->m_pCurrentMaterial;
     } else {
         face->m_pMaterial = m_pModel->m_pDefaultMaterial;
     }
 
     // Create a default object, if nothing is there
     if (nullptr == m_pModel->m_pCurrent) {
         createObject(DefaultObjName);
     }
 
     // Assign face to mesh
     if (nullptr == m_pModel->m_pCurrentMesh) {
         createMesh(DefaultObjName);
     }
 
     // Store the face
     m_pModel->m_pCurrentMesh->m_Faces.push_back(face);
     m_pModel->m_pCurrentMesh->m_uiNumIndices += (unsigned int)face->m_vertices.size();
     m_pModel->m_pCurrentMesh->m_uiUVCoordinates[0] += (unsigned int)face->m_texturCoords.size();
     if (!m_pModel->m_pCurrentMesh->m_hasNormals && hasNormal) {
         m_pModel->m_pCurrentMesh->m_hasNormals = true;
     }
     // Skip the rest of the line
     m_DataIt = skipLine<DataArrayIt>(m_DataIt, m_DataItEnd, m_uiLine);
 }
