commit 8ac5bbfbbc5dff69d0344c9aa815669e9a3fa105
Author: Alan T. DeKok <aland@freeradius.org>
Date:   Wed Oct 6 16:59:15 2021 -0400

    let's check availability before dereferencing, m'kay?

diff --git a/src/lib/util/struct.c b/src/lib/util/struct.c
index 4ff7ffa7a5..b74876aa9e 100644
--- a/src/lib/util/struct.c
+++ b/src/lib/util/struct.c
@@ -63,336 +63,341 @@ fr_pair_t *fr_raw_from_network(TALLOC_CTX *ctx, fr_dict_attr_t const *parent, ui
 /** Convert a STRUCT to one or more VPs
  *
  */
 ssize_t fr_struct_from_network(TALLOC_CTX *ctx, fr_dcursor_t *cursor,
 			       fr_dict_attr_t const *parent, uint8_t const *data, size_t data_len,
 			       bool nested, void *decode_ctx,
 			       fr_decode_value_t decode_value, fr_decode_value_t decode_tlv)
 {
 	unsigned int		child_num;
 	uint8_t const		*p = data, *end = data + data_len;
 	fr_dict_attr_t const	*child;
 	fr_pair_list_t		head;
 	fr_dcursor_t		child_cursor;
 	fr_pair_t		*vp, *key_vp, *struct_vp = NULL;
 	unsigned int		offset = 0;
 	TALLOC_CTX		*child_ctx;
 
 	if (data_len == 0) {
 		fr_strerror_const("struct decoder was passed zero bytes of data");
 		return -1; /* at least one byte of data */
 	}
 
 	FR_PROTO_HEX_DUMP(data, data_len, "fr_struct_from_network");
 
 	/*
 	 *	Start a child list.
 	 */
 	if (!nested) {
 		fr_pair_list_init(&head);
 		fr_dcursor_init(&child_cursor, &head);
 		child_ctx = ctx;
 	} else {
 		fr_assert(parent->type == FR_TYPE_STRUCT);
 
 		struct_vp = fr_pair_afrom_da(ctx, parent);
 		if (!struct_vp) {
 		oom:
 			fr_strerror_const("out of memory");
 			return -1;
 		}
 
 		fr_pair_list_init(&head); /* still used elsewhere */
 		fr_dcursor_init(&child_cursor, &struct_vp->vp_group);
 		child_ctx = struct_vp;
 	}
 	child_num = 1;
 	key_vp = NULL;
 
 	/*
 	 *	Decode structs with length prefixes.
 	 */
 	if (da_is_length_field(parent)) {
 		size_t struct_len;
 
+		if ((end - p) < 2) {
+			FR_PROTO_TRACE("Insufficient room for length header");
+			goto unknown;
+		}
+
 		struct_len = (p[0] << 8) | p[1];
 		if ((p + struct_len + 2) > end) {
 			FR_PROTO_TRACE("Length header is larger than remaining data");
 			goto unknown;
 		}
 
 		/*
 		 *	Skip the "length" field, and tell the decoder
 		 *	to stop at the end of the length field.
 		 */
 		p += 2;
 		end = p + struct_len;
 		data_len = struct_len + 2;
 	}
 
 	while (p < end) {
 		size_t child_length;
 
 		/*
 		 *	Go to the next child.  If it doesn't exist, we're done.
 		 */
 		child = fr_dict_attr_child_by_num(parent, child_num);
 		if (!child) break;
 
 		FR_PROTO_HEX_DUMP(p, (end - p), "fr_struct_from_network - child %s (%d)", child->name, child->attr);
 
 		/*
 		 *	Check for bit fields.
 		 */
 		if (da_is_bit_field(child)) {
 			uint8_t array[8];
 			unsigned int num_bits;
 			uint64_t value;
 
 			num_bits = offset + child->flags.length;
 			if ((end - p) < fr_bytes_from_bits(num_bits)) {
 				FR_PROTO_TRACE("not enough data for bit decoder?");
 				goto unknown;
 			}
 
 			memset(array, 0, sizeof(array));
 			memcpy(&array[0], p, fr_bytes_from_bits(num_bits));
 
 			if (offset > 0) array[0] &= (1 << (8 - offset)) - 1; /* mask off bits we don't care about */
 
 			memcpy(&value, &array[0], sizeof(value));
 			value = htonll(value);
 			value >>= (8 - offset); /* move it to the lower bits */
 			value >>= (56 - child->flags.length);
 
 			vp = fr_pair_afrom_da(child_ctx, child);
 			if (!vp) {
 				FR_PROTO_TRACE("fr_struct_from_network - failed allocating child VP");
 				goto unknown;
 			}
 
 			switch (child->type) {
 				case FR_TYPE_BOOL:
 					vp->vp_bool = value;
 					break;
 
 				case FR_TYPE_UINT8:
 					vp->vp_uint8 = value;
 					break;
 
 				case FR_TYPE_UINT16:
 					vp->vp_uint16 = value;
 					break;
 
 				case FR_TYPE_UINT32:
 					vp->vp_uint32 = value;
 					break;
 
 				case FR_TYPE_UINT64:
 					vp->vp_uint64 = value;
 					break;
 
 				default:
 					FR_PROTO_TRACE("Can't decode unknown type?");
 					goto unknown;
 			}
 
 			vp->type = VT_DATA;
 			vp->vp_tainted = true;
 			fr_dcursor_append(&child_cursor, vp);
 			p += (num_bits >> 3); /* go to the LAST bit, not the byte AFTER the last bit */
 			offset = num_bits & 0x07;
 			child_num++;
 			continue;
 		}
 		offset = 0;	/* reset for non-bit-field attributes */
 
 		/*
 		 *	Decode child TLVs, according to the parent attribute.
 		 */
 		if (child->type == FR_TYPE_TLV) {
 			ssize_t slen;
 
 			fr_assert(!key_vp);
 
 			if (!decode_tlv) {
 				fr_strerror_const("Decoding TLVs requires a decode_tlv() function to be passed");
 				return -(p - data);
 			}
 
 			/*
 			 *	Decode EVERYTHING as a TLV.
 			 */
 			while (p < end) {
 				slen = decode_tlv(child_ctx, &child_cursor, fr_dict_by_da(child), child, p, end - p, decode_ctx);
 				if (slen < 0) {
 					FR_PROTO_TRACE("failed decoding TLV?");
 					goto unknown;
 				}
 				p += slen;
 			}
 
 			goto done;
 		}
 
 		child_length = child->flags.length;
 
 		/*
 		 *	If this field overflows the input, then *all*
 		 *	of the input is suspect.
 		 */
 		if ((p + child_length) > end) {
 			FR_PROTO_TRACE("fr_struct_from_network - child length %zd overflows buffer", child_length);
 			goto unknown;
 		}
 
 		if (!child_length) child_length = (end - p);
 
 		/*
 		 *	Magic values get the callback called.
 		 *
 		 *	Note that if this is an *array* of DNS labels,
 		 *	the callback should deal with this.
 		 */
 		if (decode_value) {
 			ssize_t slen;
 
 			slen = decode_value(child_ctx, &child_cursor, fr_dict_by_da(child), child, p, child_length, decode_ctx);
 			if (slen < 0) {
 				FR_PROTO_TRACE("Failed decoding value");
 				return slen - (p - data);
 			}
 
 			p += slen;   	/* not always the same as child->flags.length */
 			child_num++;	/* go to the next child */
 			if (fr_dict_attr_is_key_field(child)) key_vp = fr_dcursor_tail(&child_cursor);
 			continue;
 		}
 
 		/*
 		 *	We only allow a limited number of data types
 		 *	inside of a struct.
 		 */
 		switch (child->type) {
 		default:
 			FR_PROTO_TRACE("fr_struct_from_network - unknown child type");
 			goto unknown;
 
 		case FR_TYPE_LEAF:
 			break;
 		}
 
 		vp = fr_pair_afrom_da(child_ctx, child);
 		if (!vp) {
 			FR_PROTO_TRACE("fr_struct_from_network - failed allocating child VP");
 			goto unknown;
 		}
 
 		/*
 		 *	No protocol-specific data types here (yet).
 		 *
 		 *	If we can't decode this field, then the entire
 		 *	structure is treated as a raw blob.
 		 */
 		if (fr_value_box_from_network(vp, &vp->data, vp->da->type, vp->da,
 					      &FR_DBUFF_TMP(p, child_length), child_length, true) < 0) {
 			FR_PROTO_TRACE("fr_struct_from_network - failed decoding child VP");
 			talloc_free(vp);
 		unknown:
 			if (nested) {
 				TALLOC_FREE(struct_vp);
 			} else {
 				fr_pair_list_free(&head);
 			}
 
 			vp = fr_raw_from_network(ctx, parent, data, data_len);
 			if (!vp) goto oom;
 
 			/*
 			 *	And append this one VP to the output cursor.
 			 */
 			fr_dcursor_append(cursor, vp);
 			return data_len;
 		}
 
 		vp->type = VT_DATA;
 		vp->vp_tainted = true;
 		fr_dcursor_append(&child_cursor, vp);
 
 		if (fr_dict_attr_is_key_field(vp->da)) key_vp = vp;
 
 		/*
 		 *	Note that we're decoding fixed fields here.
 		 *	So we skip the input based on the *known*
 		 *	length, and not on the *decoded* length.
 		 */
 		p += child_length;
 		child_num++;	/* go to the next child */
 	}
 
 	/*
 	 *	Is there a substructure after this one?  If so, go
 	 *	decode it.
 	 */
 	if (key_vp) {
 		ssize_t slen;
 		fr_dict_enum_value_t const *enumv;
 		child = NULL;
 
 		FR_PROTO_HEX_DUMP(p, (end - p), "fr_struct_from_network - substruct");
 
 		/*
 		 *	Nothing more to decode, don't decode it.
 		 */
 		if (p >= end) {
 			FR_PROTO_TRACE("Expected substruct, but there is none. We're done decoding this structure");
 			goto done;
 		}
 
 		enumv = fr_dict_enum_by_value(key_vp->da, &key_vp->data);
 		if (enumv) child = enumv->child_struct[0];
 
 		if (!child) {
 		unknown_child:
 			/*
 			 *	Encode the unknown child as attribute
 			 *	number 0.  This choice means we don't
 			 *	have to look up, or keep track of, the
 			 *	number of children of the key field.
 			 */
 			child = fr_dict_unknown_afrom_fields(child_ctx, key_vp->da,
 							     fr_dict_vendor_num_by_da(key_vp->da), 0);
 			if (!child) {
 				FR_PROTO_TRACE("failed allocating unknown child?");
 				goto unknown;
 			}
 
 			vp = fr_raw_from_network(child_ctx, child, p, end - p);
 			if (!vp) {
 				FR_PROTO_TRACE("Failed creating raw VP from malformed or unknown substruct");
 				fr_dict_unknown_free(&child);
 				goto oom;
 			}
 
 			fr_dcursor_append(&child_cursor, vp);
 			p = end;
 		} else {
 			fr_assert(child->type == FR_TYPE_STRUCT);
 
 			slen = fr_struct_from_network(child_ctx, &child_cursor, child, p, end - p, nested,
 						      decode_ctx, decode_value, decode_tlv);
 			if (slen <= 0) {
 				FR_PROTO_TRACE("substruct %s decoding failed", child->name);
 				goto unknown_child;
 			}
 			p += slen;
 		}
 
 		fr_dict_unknown_free(&child);
 
 		/*
 		 *	Else return whatever we decoded.  Note that if
 		 *	the substruct ends in a TLV, we decode only as
 		 *	many TLVs as the various "length" fields say.
 		 */
 		data_len = p - data;
 	}
