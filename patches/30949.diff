commit 1ef15da77b591594b19a5a81f5c80fb3b34d089f
Author: Alex Hultman <alexhultman@gmail.com>
Date:   Mon Feb 15 20:10:15 2021 +0100

    Catch connect errors

diff --git a/fuzzing/EpollHelloWorld.cpp b/fuzzing/EpollHelloWorld.cpp
index e4c2b93..8ac4263 100644
--- a/fuzzing/EpollHelloWorld.cpp
+++ b/fuzzing/EpollHelloWorld.cpp
@@ -10,94 +10,98 @@ struct us_socket_t *client;
 /* This test is run by libEpollFuzzer */
 void test() {
 	/* ws->getUserData returns one of these */
     struct PerSocketData {
         /* Fill with user data */
     };
 
     {
         /* Keep in mind that uWS::SSLApp({options}) is the same as uWS::App() when compiled without SSL support.
         * You may swap to using uWS:App() if you don't need SSL */
         auto app = uWS::App({
             /* There are example certificates in uWebSockets.js repo */
             .key_file_name = "../misc/key.pem",
             .cert_file_name = "../misc/cert.pem",
             .passphrase = "1234"
         }).ws<PerSocketData>("/*", {
             /* Settings */
             .compression = uWS::SHARED_COMPRESSOR,
             .maxPayloadLength = 16 * 1024,
             .idleTimeout = 10,
             .maxBackpressure = 1 * 1024 * 1024,
             /* Handlers */
             .open = [](auto *ws) {
                 /* Open event here, you may access ws->getUserData() which points to a PerSocketData struct */
                 ws->getNativeHandle();
                 ws->getRemoteAddressAsText();
                 us_poll_ext((struct us_poll_t *) ws);
             },
             .message = [](auto *ws, std::string_view message, uWS::OpCode opCode) {
                 ws->send(message, opCode, true);
             },
             .drain = [](auto *ws) {
                 /* Check ws->getBufferedAmount() here */
             },
             .ping = [](auto *ws) {
                 /* We use this to trigger the async/wakeup feature */
 		uWS::Loop::get()->defer([]() {
 		    /* Do nothing */
                 });
             },
             .pong = [](auto *ws) {
                 /* Not implemented yet */
             },
             .close = [](auto *ws, int code, std::string_view message) {
                 /* You may access ws->getUserData() here */
             }
         }).listen(9001, [](auto *listenSocket) {
             listen_socket = listenSocket;
         });
 
         /* Here we want to stress the connect feature, since nothing else stresses it */
         struct us_loop_t *loop = (struct us_loop_t *) uWS::Loop::get();
         /* This function is stupid */
         us_loop_iteration_number(loop);
         struct us_socket_context_t *client_context = us_create_socket_context(0, loop, 0, {});
         client = us_socket_context_connect(0, client_context, "hostname", 5000, "localhost", 0, 0);
 
+        us_socket_context_on_connect_error(0, client_context, [](struct us_socket_t *s, int code) {
+            return s;
+        });
+
         us_socket_context_on_open(0, client_context, [](struct us_socket_t *s, int is_client, char *ip, int ip_length) {
             us_socket_flush(0, s);
             return s;
         });
 
         us_socket_context_on_end(0, client_context, [](struct us_socket_t *s) {
             return s;
         });
 
         us_socket_context_on_data(0, client_context, [](struct us_socket_t *s, char *data, int length) {
             return s;
         });
 
         us_socket_context_on_writable(0, client_context, [](struct us_socket_t *s) {
             return s;
         });
 
         us_socket_context_on_close(0, client_context, [](struct us_socket_t *s, int code, void *reason) {
             client = NULL;
             return s;
         });
 
         /* Trigger some context functions */
         app.addServerName("", {});
         app.removeServerName("");
         app.missingServerName(nullptr);
         app.getNativeHandle();
 
         app.run();
 
         /* After done we also free the client context */
         us_socket_context_free(0, client_context);
     }
     uWS::Loop::get()->free();
 }
 
 /* Thus function should shutdown the event-loop and let the test fall through */
