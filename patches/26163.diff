commit 413b0d171d6366424e570d5260ccfdcf58ad5e96
Author: John Safranek <john@wolfssl.com>
Date:   Tue Oct 6 17:00:15 2020 -0700

    TFM Read Radix 16 OOB Read
    Change the location of the update of the write index when in
    fp_read_radix_16(). It will do multiple writes into a word, and update
    the index when the word is full and there is more to write. If there
    isn't more to write, the index isn't incremented. This ensures the used
    value in the mp_digit is correct, and not off-by-one when the last word
    is full.

diff --git a/wolfcrypt/src/tfm.c b/wolfcrypt/src/tfm.c
index bdc99cf2a..c211deb41 100644
--- a/wolfcrypt/src/tfm.c
+++ b/wolfcrypt/src/tfm.c
@@ -5269,48 +5269,48 @@ static wcchar fp_s_rmap = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
 #if !defined(NO_DSA) || defined(HAVE_ECC)
 #if DIGIT_BIT == 64 || DIGIT_BIT == 32
 static int fp_read_radix_16(fp_int *a, const char *str)
 {
   int     i, j, k, neg;
   char    ch;
 
   /* if the leading digit is a
    * minus set the sign to negative.
    */
   if (*str == '-') {
     ++str;
     neg = FP_NEG;
   } else {
     neg = FP_ZPOS;
   }
 
   j = 0;
   k = 0;
   for (i = (int)(XSTRLEN(str) - 1); i >= 0; i--) {
       ch = str[i];
       if (ch >= '0' && ch <= '9')
           ch -= (char)'0';
       else if (ch >= 'A' && ch <= 'F')
           ch -= (char)'A' - 10;
       else if (ch >= 'a' && ch <= 'f')
           ch -= (char)'a' - 10;
       else
           return FP_VAL;
 
+      k += j == DIGIT_BIT;
+      j &= DIGIT_BIT - 1;
       if (k >= FP_SIZE)
           return FP_VAL;
 
       a->dp[k] |= ((fp_digit)ch) << j;
       j += 4;
-      k += j == DIGIT_BIT;
-      j &= DIGIT_BIT - 1;
   }
 
   a->used = k + 1;
   fp_clamp(a);
   /* set the sign only if a != 0 */
   if (fp_iszero(a) != FP_YES) {
      a->sign = neg;
   }
   return FP_OKAY;
 }
 #endif
