commit b7d90f09d4a1688f2692f2fa9067d0a07f78cc7d
Merge: 484bf2581c 2e65c8e581
Author: Christoph M. Becker <cmbecker69@gmx.de>
Date:   Fri Oct 15 19:14:00 2021 +0200

    Merge branch 'PHP-8.1'
    
    * PHP-8.1:
      Fix #81500: Interval serialization regression since 7.3.14 / 7.4.2

diff --git a/ext/date/php_date.c b/ext/date/php_date.c
index 1777a5d23b..86e9a91c11 100644
--- a/ext/date/php_date.c
+++ b/ext/date/php_date.c
@@ -3830,38 +3830,38 @@ static zval *date_interval_read_property(zend_object *object, zend_string *name,
 /* {{{ date_interval_write_property */
 static zval *date_interval_write_property(zend_object *object, zend_string *name, zval *value, void **cache_slot)
 {
 	php_interval_obj *obj;
 
 	obj = php_interval_obj_from_obj(object);
 
 	if (!obj->initialized) {
 		return zend_std_write_property(object, name, value, cache_slot);
 	}
 
 #define SET_VALUE_FROM_STRUCT(n,m) \
 	if (zend_string_equals_literal(name, m)) { \
 		obj->diff->n = zval_get_long(value); \
 		break; \
 	}
 
 	do {
 		SET_VALUE_FROM_STRUCT(y, "y");
 		SET_VALUE_FROM_STRUCT(m, "m");
 		SET_VALUE_FROM_STRUCT(d, "d");
 		SET_VALUE_FROM_STRUCT(h, "h");
 		SET_VALUE_FROM_STRUCT(i, "i");
 		SET_VALUE_FROM_STRUCT(s, "s");
 		if (zend_string_equals_literal(name, "f")) {
-			obj->diff->us = zval_get_double(value) * 1000000;
+			obj->diff->us = zend_dval_to_lval(zval_get_double(value) * 1000000.0);
 			break;
 		}
 		SET_VALUE_FROM_STRUCT(invert, "invert");
 		/* didn't find any */
 		value = zend_std_write_property(object, name, value, cache_slot);
 	} while(0);
 
 	return value;
 }
 /* }}} */
 
 /* {{{ date_interval_get_property_ptr_ptr */
@@ -3913,88 +3913,84 @@ PHP_METHOD(DateInterval, __construct)
 static void php_date_interval_initialize_from_hash(zval **return_value, php_interval_obj **intobj, HashTable *myht) /* {{{ */
 {
 	(*intobj)->diff = timelib_rel_time_ctor();
 
 #define PHP_DATE_INTERVAL_READ_PROPERTY(element, member, itype, def) \
 	do { \
 		zval *z_arg = zend_hash_str_find(myht, element, sizeof(element) - 1); \
 		if (z_arg && Z_TYPE_P(z_arg) <= IS_STRING) { \
 			(*intobj)->diff->member = (itype)zval_get_long(z_arg); \
 		} else { \
 			(*intobj)->diff->member = (itype)def; \
 		} \
 	} while (0);
 
 #define PHP_DATE_INTERVAL_READ_PROPERTY_I64(element, member) \
 	do { \
 		zval *z_arg = zend_hash_str_find(myht, element, sizeof(element) - 1); \
 		if (z_arg && Z_TYPE_P(z_arg) <= IS_STRING) { \
 			zend_string *tmp_str; \
 			zend_string *str = zval_get_tmp_string(z_arg, &tmp_str); \
 			DATE_A64I((*intobj)->diff->member, ZSTR_VAL(str)); \
 			zend_tmp_string_release(tmp_str); \
 		} else { \
 			(*intobj)->diff->member = -1LL; \
 		} \
 	} while (0);
 
 #define PHP_DATE_INTERVAL_READ_PROPERTY_DAYS(member) \
 	do { \
 		zval *z_arg = zend_hash_str_find(myht, "days", sizeof("days") - 1); \
 		if (z_arg && Z_TYPE_P(z_arg) == IS_FALSE) { \
 			(*intobj)->diff->member = -99999; \
 		} else if (z_arg && Z_TYPE_P(z_arg) <= IS_STRING) { \
 			zend_string *str = zval_get_string(z_arg); \
 			DATE_A64I((*intobj)->diff->member, ZSTR_VAL(str)); \
 			zend_string_release(str); \
 		} else { \
 			(*intobj)->diff->member = -1LL; \
 		} \
 	} while (0);
 
 #define PHP_DATE_INTERVAL_READ_PROPERTY_DOUBLE(element, member, def) \
 	do { \
 		zval *z_arg = zend_hash_str_find(myht, element, sizeof(element) - 1); \
 		if (z_arg) { \
 			(*intobj)->diff->member = (double)zval_get_double(z_arg); \
 		} else { \
 			(*intobj)->diff->member = (double)def; \
 		} \
 	} while (0);
 
 	PHP_DATE_INTERVAL_READ_PROPERTY("y", y, timelib_sll, -1)
 	PHP_DATE_INTERVAL_READ_PROPERTY("m", m, timelib_sll, -1)
 	PHP_DATE_INTERVAL_READ_PROPERTY("d", d, timelib_sll, -1)
 	PHP_DATE_INTERVAL_READ_PROPERTY("h", h, timelib_sll, -1)
 	PHP_DATE_INTERVAL_READ_PROPERTY("i", i, timelib_sll, -1)
 	PHP_DATE_INTERVAL_READ_PROPERTY("s", s, timelib_sll, -1)
 	{
 		zval *z_arg = zend_hash_str_find(myht, "f", sizeof("f") - 1);
-		(*intobj)->diff->us = -1000000;
 		if (z_arg) {
-			double val = zval_get_double(z_arg) * 1000000;
-			if (val >= 0 && val < 1000000) {
-				(*intobj)->diff->us = val;
-			}
+			(*intobj)->diff->us = zend_dval_to_lval(zval_get_double(z_arg) * 1000000.0);
 		}
 	}
 	PHP_DATE_INTERVAL_READ_PROPERTY("weekday", weekday, int, -1)
 	PHP_DATE_INTERVAL_READ_PROPERTY("weekday_behavior", weekday_behavior, int, -1)
 	PHP_DATE_INTERVAL_READ_PROPERTY("first_last_day_of", first_last_day_of, int, -1)
 	PHP_DATE_INTERVAL_READ_PROPERTY("invert", invert, int, 0);
 	PHP_DATE_INTERVAL_READ_PROPERTY_DAYS(days);
 	PHP_DATE_INTERVAL_READ_PROPERTY("special_type", special.type, unsigned int, 0);
 	PHP_DATE_INTERVAL_READ_PROPERTY_I64("special_amount", special.amount);
 	PHP_DATE_INTERVAL_READ_PROPERTY("have_weekday_relative", have_weekday_relative, unsigned int, 0);
 	PHP_DATE_INTERVAL_READ_PROPERTY("have_special_relative", have_special_relative, unsigned int, 0);
 	{
 		zval *z_arg = zend_hash_str_find(myht, "civil_or_wall", sizeof("civil_or_wall") - 1);
 		(*intobj)->civil_or_wall = PHP_DATE_CIVIL;
 		if (z_arg) {
 			zend_long val = zval_get_long(z_arg);
 			(*intobj)->civil_or_wall = val;
 		}
 	}
 	(*intobj)->initialized = 1;
 } /* }}} */
 
 /* {{{ */
diff --git a/ext/date/tests/bug53437_var3.phpt b/ext/date/tests/bug53437_var3.phpt
index 44e6a80c89..eb043398e2 100644
--- a/ext/date/tests/bug53437_var3.phpt
+++ b/ext/date/tests/bug53437_var3.phpt
@@ -1,47 +1,47 @@
 --TEST--
 Bug #53437 DateInterval unserialize bad data, 32 bit
 --SKIPIF--
 <?php if (PHP_INT_SIZE != 4) { die('skip 32 bit only'); } ?>
 --FILE--
 <?php
 $s = 'O:12:"DateInterval":15:{s:1:"y";s:1:"2";s:1:"m";s:1:"0";s:1:"d";s:3:"bla";s:1:"h";s:1:"6";s:1:"i";s:1:"8";s:1:"s";s:1:"0";s:7:"weekday";i:10;s:16:"weekday_behavior";i:10;s:17:"first_last_day_of";i:0;s:6:"invert";i:0;s:4:"days";s:4:"aoeu";s:12:"special_type";i:0;s:14:"special_amount";s:21:"234523452345234532455";s:21:"have_weekday_relative";i:21474836489;s:21:"have_special_relative";s:3:"bla";}';
 
 $di = unserialize($s);
 var_dump($di);
 
 ?>
 --EXPECTF--
 object(DateInterval)#%d (16) {
   ["y"]=>
   int(2)
   ["m"]=>
   int(0)
   ["d"]=>
   int(0)
   ["h"]=>
   int(6)
   ["i"]=>
   int(8)
   ["s"]=>
   int(0)
   ["weekday"]=>
   int(10)
   ["weekday_behavior"]=>
   int(10)
   ["first_last_day_of"]=>
   int(0)
   ["invert"]=>
   int(0)
   ["days"]=>
   int(0)
   ["special_type"]=>
   int(0)
   ["special_amount"]=>
   int(-1)
   ["have_weekday_relative"]=>
   int(%d)
   ["have_special_relative"]=>
   int(0)
   ["f"]=>
-  float(-1)
+  float(0)
 }
diff --git a/ext/date/tests/bug53437_var5.phpt b/ext/date/tests/bug53437_var5.phpt
index baffbb484a..55bba9ed59 100644
--- a/ext/date/tests/bug53437_var5.phpt
+++ b/ext/date/tests/bug53437_var5.phpt
@@ -1,47 +1,47 @@
 --TEST--
 Bug #53437 DateInterval unserialize bad data, 64 bit
 --SKIPIF--
 <?php if (PHP_INT_SIZE != 8) { die('skip true 64 bit only'); } ?>
 --FILE--
 <?php
 $s = 'O:12:"DateInterval":15:{s:1:"y";s:1:"2";s:1:"m";s:1:"0";s:1:"d";s:3:"bla";s:1:"h";s:1:"6";s:1:"i";s:1:"8";s:1:"s";s:1:"0";s:7:"weekday";i:10;s:16:"weekday_behavior";i:10;s:17:"first_last_day_of";i:0;s:6:"invert";i:0;s:4:"days";s:4:"aoeu";s:12:"special_type";i:0;s:14:"special_amount";s:21:"234523452345234532455";s:21:"have_weekday_relative";i:21474836489;s:21:"have_special_relative";s:3:"bla";}';
 
 $di = unserialize($s);
 var_dump($di);
 
 ?>
 --EXPECTF--
 object(DateInterval)#%d (16) {
   ["y"]=>
   int(2)
   ["m"]=>
   int(0)
   ["d"]=>
   int(0)
   ["h"]=>
   int(6)
   ["i"]=>
   int(8)
   ["s"]=>
   int(0)
   ["weekday"]=>
   int(10)
   ["weekday_behavior"]=>
   int(10)
   ["first_last_day_of"]=>
   int(0)
   ["invert"]=>
   int(0)
   ["days"]=>
   int(0)
   ["special_type"]=>
   int(0)
   ["special_amount"]=>
   int(9223372036854775807)
   ["have_weekday_relative"]=>
   int(9)
   ["have_special_relative"]=>
   int(0)
   ["f"]=>
-  float(-1)
+  float(0)
 }
diff --git a/ext/date/tests/bug73091.phpt b/ext/date/tests/bug73091.phpt
index 14f161afe7..918170d823 100644
--- a/ext/date/tests/bug73091.phpt
+++ b/ext/date/tests/bug73091.phpt
@@ -6,43 +6,43 @@ class foo {
     function __toString() {
         var_dump(0);
         return 'may be a bug';
     }
 }
 
 var_dump(unserialize('O:12:"DateInterval":1:{s:4:"days";O:3:"foo":0:{}}'));
 ?>
 --EXPECTF--
 object(DateInterval)#%d (16) {
   ["days"]=>
   int(-1)
   ["y"]=>
   int(-1)
   ["m"]=>
   int(-1)
   ["d"]=>
   int(-1)
   ["h"]=>
   int(-1)
   ["i"]=>
   int(-1)
   ["s"]=>
   int(-1)
   ["f"]=>
-  float(-1)
+  float(0)
   ["weekday"]=>
   int(-1)
   ["weekday_behavior"]=>
   int(-1)
   ["first_last_day_of"]=>
   int(-1)
   ["invert"]=>
   int(0)
   ["special_type"]=>
   int(0)
   ["special_amount"]=>
   int(-1)
   ["have_weekday_relative"]=>
   int(0)
   ["have_special_relative"]=>
   int(0)
 }
diff --git a/ext/date/tests/bug79015.phpt b/ext/date/tests/bug79015.phpt
index 5ebb13832b..9d752dee72 100644
--- a/ext/date/tests/bug79015.phpt
+++ b/ext/date/tests/bug79015.phpt
@@ -1,42 +1,42 @@
 --TEST--
 Bug #79015 (undefined-behavior in php_date.c)
 --FILE--
 <?php
 $payload = 'O:12:"DateInterval":16:{s:1:"y";i:1;s:1:"m";i:0;s:1:"d";i:4;s:1:"h";i:0;s:1:"i";i:0;s:1:"s";i:0;s:1:"f";i:9999999999990;s:7:"weekday";i:0;s:16:"weekday_behavior";i:0;s:17:"first_last_day_of";i:0;s:6:"invert";i:0;s:4:"days";b:0;s:12:"special_type";i:0;s:14:"special_amount";i:0;s:21:"have_weekday_relative";i:0;s:21:"have_special_relative";i:0;}';
 var_dump(unserialize($payload));
 ?>
 --EXPECTF--
 object(DateInterval)#%d (16) {
   ["y"]=>
   int(1)
   ["m"]=>
   int(0)
   ["d"]=>
   int(4)
   ["h"]=>
   int(0)
   ["i"]=>
   int(0)
   ["s"]=>
   int(0)
   ["f"]=>
-  float(-1)
+  float(%f)
   ["weekday"]=>
   int(0)
   ["weekday_behavior"]=>
   int(0)
   ["first_last_day_of"]=>
   int(0)
   ["invert"]=>
   int(0)
   ["days"]=>
   bool(false)
   ["special_type"]=>
   int(0)
   ["special_amount"]=>
   int(0)
   ["have_weekday_relative"]=>
   int(0)
   ["have_special_relative"]=>
   int(0)
 }
diff --git a/ext/date/tests/bug81500.phpt b/ext/date/tests/bug81500.phpt
new file mode 100644
index 0000000000..0c60c204a3
--- /dev/null
+++ b/ext/date/tests/bug81500.phpt
@@ -0,0 +1,16 @@
+--TEST--
+Bug #81500 (Interval serialization regression since 7.3.14 / 7.4.2)
+--FILE--
+<?php
+$interval = new DateInterval('PT1S');
+$interval->f = -0.000001;
+var_dump($interval->s, $interval->f);
+
+$interval = unserialize(serialize($interval));
+var_dump($interval->s, $interval->f);
+?>
+--EXPECT--
+int(1)
+float(-1.0E-6)
+int(1)
+float(-1.0E-6)
diff --git a/ext/standard/tests/serialize/bug69425.phpt b/ext/standard/tests/serialize/bug69425.phpt
index e080fda7dd..906c7192fb 100644
--- a/ext/standard/tests/serialize/bug69425.phpt
+++ b/ext/standard/tests/serialize/bug69425.phpt
@@ -11,55 +11,55 @@ class test
     function __wakeup()
     {
         $this->ryat = 1;
     }
 }
 
 $data = unserialize('a:2:{i:0;O:4:"test":1:{s:4:"ryat";R:1;}i:1;i:2;}');
 var_dump($data);
 
 // POC 2
 $data = unserialize('a:2:{i:0;O:12:"DateInterval":1:{s:1:"y";R:1;}i:1;i:2;}');
 var_dump($data);
 
 ?>
 --EXPECT--
 int(1)
 array(2) {
   [0]=>
   object(DateInterval)#1 (16) {
     ["y"]=>
     int(-1)
     ["m"]=>
     int(-1)
     ["d"]=>
     int(-1)
     ["h"]=>
     int(-1)
     ["i"]=>
     int(-1)
     ["s"]=>
     int(-1)
     ["f"]=>
-    float(-1)
+    float(0)
     ["weekday"]=>
     int(-1)
     ["weekday_behavior"]=>
     int(-1)
     ["first_last_day_of"]=>
     int(-1)
     ["invert"]=>
     int(0)
     ["days"]=>
     int(-1)
     ["special_type"]=>
     int(0)
     ["special_amount"]=>
     int(-1)
     ["have_weekday_relative"]=>
     int(0)
     ["have_special_relative"]=>
     int(0)
   }
   [1]=>
   int(2)
 }
