commit 22997c77b024c3ee4e6618b44c44dc0f0179add8
Author: Alan Modra <amodra@gmail.com>
Date:   Fri Sep 23 11:26:18 2022 +0930

    pdb: _bfd_generic_close_and_cleanup
    
    Every format that might appear inside a generic archive needs to call
    _bfd_generic_close_and_cleanup, so that the archive element lookup
    htab can be tidied on closing an element.  Otherwise you get stale
    entries in the htab pointing at freed and perhaps reused memory,
    resulting in segfaults when the archive is closed.
    
    Calling _bfd_generic_close_and_cleanup on close means tdata needs to
    be set up too, since pdb claims to be of format bfd_archive.
    
            * pdb.c (pdb_close_and_cleanup): Define as
            _bfd_generic_close_and_cleanup.
            (pdb_archive_p): Set up tdata for bfd_archive format.

diff --git a/bfd/pdb.c b/bfd/pdb.c
index 67d7e73c655..14e1049d03c 100644
--- a/bfd/pdb.c
+++ b/bfd/pdb.c
@@ -39,21 +39,26 @@ static bfd_cleanup
 pdb_archive_p (bfd *abfd)
 {
   int ret;
   char magic[sizeof (pdb_magic)];
 
   ret = bfd_bread (magic, sizeof (magic), abfd);
   if (ret != sizeof (magic))
     {
       bfd_set_error (bfd_error_wrong_format);
       return NULL;
     }
 
   if (memcmp (magic, pdb_magic, sizeof (magic)))
     {
       bfd_set_error (bfd_error_wrong_format);
       return NULL;
     }
 
+  void *tdata = bfd_zalloc (abfd, sizeof (struct artdata));
+  if (tdata == NULL)
+    return NULL;
+  bfd_ardata (abfd) = tdata;
+
   return _bfd_no_cleanup;
 }
 
@@ -671,97 +676,97 @@ static bool
 pdb_write_contents (bfd *abfd)
 {
   char tmp[sizeof (uint32_t)];
   const uint32_t block_size = 0x400;
   uint32_t block_map_addr;
   uint32_t num_blocks;
   uint32_t num_files = 0;
   uint32_t num_directory_bytes = sizeof (uint32_t);
   bfd *arelt;
 
   if (bfd_bwrite (pdb_magic, sizeof (pdb_magic), abfd) != sizeof (pdb_magic))
     return false;
 
   bfd_putl32 (block_size, tmp);
 
   if (bfd_bwrite (tmp, sizeof (uint32_t), abfd) != sizeof (uint32_t))
     return false;
 
   bfd_putl32 (1, tmp); /* Free block map block (always either 1 or 2).  */
 
   if (bfd_bwrite (tmp, sizeof (uint32_t), abfd) != sizeof (uint32_t))
     return false;
 
   arelt = abfd->archive_head;
 
   while (arelt)
     {
       uint32_t blocks_required =
 	(bfd_get_size (arelt) + block_size - 1) / block_size;
 
       num_directory_bytes += sizeof (uint32_t); /* Size.  */
       num_directory_bytes += blocks_required * sizeof (uint32_t); /* Blocks.  */
 
       num_files++;
 
       arelt = arelt->archive_next;
     }
 
   /* Superblock plus two bitmap blocks.  */
   num_blocks = 3;
 
   /* Skip num_blocks for now.  */
   if (bfd_seek (abfd, sizeof (uint32_t), SEEK_CUR))
     return false;
 
   bfd_putl32 (num_directory_bytes, tmp);
 
   if (bfd_bwrite (tmp, sizeof (uint32_t), abfd) != sizeof (uint32_t))
     return false;
 
   /* Skip unknown uint32_t (always 0?).  */
   if (bfd_seek (abfd, sizeof (uint32_t), SEEK_CUR))
     return false;
 
   block_map_addr = pdb_allocate_block (&num_blocks, block_size);
 
   bfd_putl32 (block_map_addr, tmp);
 
   if (bfd_bwrite (tmp, sizeof (uint32_t), abfd) != sizeof (uint32_t))
     return false;
 
   if (!pdb_write_directory
       (abfd, block_size, num_files, block_map_addr, &num_blocks))
     return false;
 
   if (!pdb_write_bitmap (abfd, block_size, num_blocks))
     return false;
 
   /* Write num_blocks now we know it.  */
 
   if (bfd_seek
       (abfd, sizeof (pdb_magic) + sizeof (uint32_t) + sizeof (uint32_t),
        SEEK_SET))
     return false;
 
   bfd_putl32 (num_blocks, tmp);
 
   if (bfd_bwrite (tmp, sizeof (uint32_t), abfd) != sizeof (uint32_t))
     return false;
 
   return true;
 }
 
 #define pdb_bfd_free_cached_info _bfd_generic_bfd_free_cached_info
 #define pdb_new_section_hook _bfd_generic_new_section_hook
 #define pdb_get_section_contents _bfd_generic_get_section_contents
 #define pdb_get_section_contents_in_window _bfd_generic_get_section_contents_in_window
-#define pdb_close_and_cleanup _bfd_bool_bfd_true
+#define pdb_close_and_cleanup _bfd_generic_close_and_cleanup
 
 #define pdb_slurp_armap _bfd_noarchive_slurp_armap
 #define pdb_slurp_extended_name_table _bfd_noarchive_slurp_extended_name_table
 #define pdb_construct_extended_name_table _bfd_noarchive_construct_extended_name_table
 #define pdb_truncate_arname _bfd_noarchive_truncate_arname
 #define pdb_write_armap _bfd_noarchive_write_armap
 #define pdb_read_ar_hdr _bfd_noarchive_read_ar_hdr
 #define pdb_write_ar_hdr _bfd_noarchive_write_ar_hdr
 #define pdb_update_armap_timestamp _bfd_noarchive_update_armap_timestamp
