commit fee7cbaf44553dda1a0dd4bfc87a1dfc0d7dd369
Author: Leon Scroggins III <scroggo@google.com>
Date:   Tue Feb 13 16:41:03 2018 -0500

    Check the length of marker before reading it
    
    Bug: os-fuzz:6295
    Change-Id: I0ea9a3c54d61d41f21f2e9b945ab83fa2beb00d8
    Reviewed-on: https://skia-review.googlesource.com/107025
    Reviewed-by: Mike Klein <mtklein@chromium.org>
    Commit-Queue: Leon Scroggins <scroggo@google.com>

diff --git a/resources/invalid_images/osfuzz6295.webp b/resources/invalid_images/osfuzz6295.webp
new file mode 100644
index 0000000000..bb20aba1a7
Binary files /dev/null and b/resources/invalid_images/osfuzz6295.webp differ
diff --git a/src/codec/SkJpegCodec.cpp b/src/codec/SkJpegCodec.cpp
index d2c023b437..4f48886be2 100644
--- a/src/codec/SkJpegCodec.cpp
+++ b/src/codec/SkJpegCodec.cpp
@@ -62,42 +62,43 @@ static bool is_orientation_marker(jpeg_marker_struct* marker, SkEncodedOrigin* o
 
 bool is_orientation_marker(const uint8_t* data, size_t data_length, SkEncodedOrigin* orientation) {
     bool littleEndian;
-    if (!is_valid_endian_marker(data, &littleEndian)) {
+    // We need eight bytes to read the endian marker and the offset, below.
+    if (data_length < 8 || !is_valid_endian_marker(data, &littleEndian)) {
         return false;
     }
 
     // Get the offset from the start of the marker.
     // Though this only reads four bytes, use a larger int in case it overflows.
     uint64_t offset = get_endian_int(data + 4, littleEndian);
 
     // Require that the marker is at least large enough to contain the number of entries.
     if (data_length < offset + 2) {
         return false;
     }
     uint32_t numEntries = get_endian_short(data + offset, littleEndian);
 
     // Tag (2 bytes), Datatype (2 bytes), Number of elements (4 bytes), Data (4 bytes)
     const uint32_t kEntrySize = 12;
     const auto max = SkTo<uint32_t>((data_length - offset - 2) / kEntrySize);
     numEntries = SkTMin(numEntries, max);
 
     // Advance the data to the start of the entries.
     data += offset + 2;
 
     const uint16_t kOriginTag = 0x112;
     const uint16_t kOriginType = 3;
     for (uint32_t i = 0; i < numEntries; i++, data += kEntrySize) {
         uint16_t tag = get_endian_short(data, littleEndian);
         uint16_t type = get_endian_short(data + 2, littleEndian);
         uint32_t count = get_endian_int(data + 4, littleEndian);
         if (kOriginTag == tag && kOriginType == type && 1 == count) {
             uint16_t val = get_endian_short(data + 8, littleEndian);
             if (0 < val && val <= kLast_SkEncodedOrigin) {
                 *orientation = (SkEncodedOrigin) val;
                 return true;
             }
         }
     }
 
     return false;
 }
diff --git a/tests/CodecTest.cpp b/tests/CodecTest.cpp
index df94547600..8172751cf6 100644
--- a/tests/CodecTest.cpp
+++ b/tests/CodecTest.cpp
@@ -621,36 +621,43 @@ DEF_TEST(Codec_Dimensions, r) {
 }
 
 static void test_invalid(skiatest::Reporter* r, const char path[]) {
-    std::unique_ptr<SkStream> stream(GetResourceAsStream(path));
-    if (!stream) {
+    auto data = GetResourceAsData(path);
+    if (!data) {
+        ERRORF(r, "Failed to get resources %s", path);
         return;
     }
-    REPORTER_ASSERT(r, !SkCodec::MakeFromStream(std::move(stream)));
+
+    REPORTER_ASSERT(r, !SkCodec::MakeFromData(data));
 }
 
 DEF_TEST(Codec_Empty, r) {
+    if (GetResourcePath().isEmpty()) {
+        return;
+    }
+
     // Test images that should not be able to create a codec
     test_invalid(r, "empty_images/zero-dims.gif");
     test_invalid(r, "empty_images/zero-embedded.ico");
     test_invalid(r, "empty_images/zero-width.bmp");
     test_invalid(r, "empty_images/zero-height.bmp");
     test_invalid(r, "empty_images/zero-width.jpg");
     test_invalid(r, "empty_images/zero-height.jpg");
     test_invalid(r, "empty_images/zero-width.png");
     test_invalid(r, "empty_images/zero-height.png");
     test_invalid(r, "empty_images/zero-width.wbmp");
     test_invalid(r, "empty_images/zero-height.wbmp");
     // This image is an ico with an embedded mask-bmp.  This is illegal.
     test_invalid(r, "invalid_images/mask-bmp-ico.ico");
     // It is illegal for a webp frame to not be fully contained by the canvas.
     test_invalid(r, "invalid_images/invalid-offset.webp");
 #if defined(SK_CODEC_DECODES_RAW) && (!defined(_WIN32))
     test_invalid(r, "empty_images/zero_height.tiff");
 #endif
     test_invalid(r, "invalid_images/b37623797.ico");
+    test_invalid(r, "invalid_images/osfuzz6295.webp");
 }
 
 #ifdef PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
 
 #ifndef SK_PNG_DISABLE_TESTS   // reading chunks does not work properly with older versions.
                                // It does not appear that anyone in Google3 is reading chunks.
