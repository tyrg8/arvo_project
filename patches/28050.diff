commit d7cc093f1f33136964383b576d7ce60299eaa41a
Author: John Stiles <johnstiles@google.com>
Date:   Mon Nov 30 12:24:27 2020 -0500

    Fix ASAN error when inlining array constructor expressions.
    
    Constructors such as `float[2](0, 0)` add a type to the symbol table;
    this type needs to be copied into the new symbol table if the
    constructor is cloned by the inliner.
    
    Change-Id: Ifa8d2dec87103c6223ce493e2201a904c14c2137
    Bug: oss-fuzz:28050
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/339168
    Auto-Submit: John Stiles <johnstiles@google.com>
    Commit-Queue: Brian Osman <brianosman@google.com>
    Reviewed-by: Brian Osman <brianosman@google.com>

diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index 2802a5e789..3b38fdfb9f 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -186,100 +186,101 @@ sksl_spirv_tests = [
 sksl_shared_tests = [
   "$_tests/sksl/shared/ArrayConstructors.sksl",
   "$_tests/sksl/shared/ArrayIndexTypes.sksl",
   "$_tests/sksl/shared/ArrayMaxDimensions.sksl",
   "$_tests/sksl/shared/ArrayTypes.sksl",
   "$_tests/sksl/shared/Assignment.sksl",
   "$_tests/sksl/shared/BoolFolding.sksl",
   "$_tests/sksl/shared/Caps.sksl",
   "$_tests/sksl/shared/CastsRoundTowardZero.sksl",
   "$_tests/sksl/shared/Clockwise.sksl",
   "$_tests/sksl/shared/ComplexDelete.sksl",
   "$_tests/sksl/shared/ConstArray.sksl",
   "$_tests/sksl/shared/ConstVariableComparison.sksl",
   "$_tests/sksl/shared/ConstantIf.sksl",
   "$_tests/sksl/shared/Control.sksl",
   "$_tests/sksl/shared/DeadDoWhileLoop.sksl",
   "$_tests/sksl/shared/DeadIfStatement.sksl",
   "$_tests/sksl/shared/DeadLoopVariable.sksl",
   "$_tests/sksl/shared/DeadStripFunctions.sksl",
   "$_tests/sksl/shared/DependentInitializers.sksl",
   "$_tests/sksl/shared/DerivativesUnused.sksl",
   "$_tests/sksl/shared/Discard.sksl",
   "$_tests/sksl/shared/Enum.sksl",
   "$_tests/sksl/shared/FloatFolding.sksl",
   "$_tests/sksl/shared/FrExp.sksl",
   "$_tests/sksl/shared/FragCoordsFlipY.sksl",
   "$_tests/sksl/shared/FragCoordsNew.sksl",
   "$_tests/sksl/shared/FragCoordsOld.sksl",
   "$_tests/sksl/shared/FunctionArgumentMatch.sksl",
   "$_tests/sksl/shared/FunctionPrototype.sksl",
   "$_tests/sksl/shared/Functions.sksl",
   "$_tests/sksl/shared/GaussianBlur.sksl",
   "$_tests/sksl/shared/GeometricIntrinsics.sksl",
   "$_tests/sksl/shared/Geometry.geom",
   "$_tests/sksl/shared/GeometryExtension.geom",
   "$_tests/sksl/shared/GeometryGSInvocations.geom",
   "$_tests/sksl/shared/GeometryNoGSInvocations.geom",
   "$_tests/sksl/shared/GeometryNoGSInvocationsReorder.geom",
   "$_tests/sksl/shared/Height.sksl",
   "$_tests/sksl/shared/HelloWorld.sksl",
   "$_tests/sksl/shared/Hex.sksl",
   "$_tests/sksl/shared/InstanceID.vert",
   "$_tests/sksl/shared/IntFolding.sksl",
   "$_tests/sksl/shared/InterfaceBlockAnonymous.sksl",
   "$_tests/sksl/shared/InterfaceBlockArray.sksl",
   "$_tests/sksl/shared/InterfaceBlockNamed.sksl",
   "$_tests/sksl/shared/Matrices.sksl",
   "$_tests/sksl/shared/MatrixFolding.sksl",
   "$_tests/sksl/shared/MixedTypeCommaOperator.sksl",
   "$_tests/sksl/shared/MultipleAssignments.sksl",
   "$_tests/sksl/shared/NegatedVectorLiteral.sksl",
   "$_tests/sksl/shared/NoFragCoordsPos.vert",
   "$_tests/sksl/shared/NoFragCoordsPosRT.vert",
   "$_tests/sksl/shared/NormalizationGeo.geom",
   "$_tests/sksl/shared/NormalizationVert.vert",
   "$_tests/sksl/shared/NumberConversions.sksl",
   "$_tests/sksl/shared/Offset.sksl",
   "$_tests/sksl/shared/Operators.sksl",
   "$_tests/sksl/shared/Ossfuzz26167.sksl",
   "$_tests/sksl/shared/Ossfuzz27614.sksl",
+  "$_tests/sksl/shared/Ossfuzz28050.sksl",
   "$_tests/sksl/shared/OutParams.sksl",
   "$_tests/sksl/shared/OutParamsTricky.sksl",
   "$_tests/sksl/shared/RectangleTexture.sksl",
   "$_tests/sksl/shared/ResizeMatrix.sksl",
   "$_tests/sksl/shared/SampleMask.sksl",
   "$_tests/sksl/shared/ScopedSymbol.sksl",
   "$_tests/sksl/shared/ShortCircuitBoolFolding.sksl",
   "$_tests/sksl/shared/StackingVectorCasts.sksl",
   "$_tests/sksl/shared/StaticIf.sksl",
   "$_tests/sksl/shared/StaticSwitch.sksl",
   "$_tests/sksl/shared/StaticSwitchWithBreak.sksl",
   "$_tests/sksl/shared/StaticSwitchWithBreakInsideBlock.sksl",
   "$_tests/sksl/shared/StaticSwitchWithConditionalBreak.sksl",
   "$_tests/sksl/shared/StaticSwitchWithConditionalBreakInsideBlock.sksl",
   "$_tests/sksl/shared/StaticSwitchWithFallthroughA.sksl",
   "$_tests/sksl/shared/StaticSwitchWithFallthroughB.sksl",
   "$_tests/sksl/shared/StaticSwitchWithStaticConditionalBreak.sksl",
   "$_tests/sksl/shared/StaticSwitchWithStaticConditionalBreakInsideBlock.sksl",
   "$_tests/sksl/shared/Structs.sksl",
   "$_tests/sksl/shared/StructMaxDepth.sksl",
   "$_tests/sksl/shared/Switch.sksl",
   "$_tests/sksl/shared/SwitchContainingDeadCode.sksl",
   "$_tests/sksl/shared/SwitchWithFallthrough.sksl",
   "$_tests/sksl/shared/SwizzleBoolConstants.sksl",
   "$_tests/sksl/shared/SwizzleConstants.sksl",
   "$_tests/sksl/shared/SwizzleLTRB.sksl",
   "$_tests/sksl/shared/SwizzleOpt.sksl",
   "$_tests/sksl/shared/SwizzleScalar.sksl",
   "$_tests/sksl/shared/TernaryAsLValueEntirelyFoldable.sksl",
   "$_tests/sksl/shared/TernaryAsLValueFoldableTest.sksl",
   "$_tests/sksl/shared/Texture1D.sksl",
   "$_tests/sksl/shared/Texture2D.sksl",
   "$_tests/sksl/shared/TextureSharpen.sksl",
   "$_tests/sksl/shared/UnaryPositiveNegative.sksl",
   "$_tests/sksl/shared/UnusedVariables.sksl",
   "$_tests/sksl/shared/VectorConstructors.sksl",
   "$_tests/sksl/shared/VectorFolding.sksl",
   "$_tests/sksl/shared/VertexID.vert",
   "$_tests/sksl/shared/Width.sksl",
 ]
diff --git a/src/sksl/SkSLInliner.cpp b/src/sksl/SkSLInliner.cpp
index 910194ce86..5e3e906772 100644
--- a/src/sksl/SkSLInliner.cpp
+++ b/src/sksl/SkSLInliner.cpp
@@ -324,95 +324,96 @@ String Inliner::uniqueNameForInlineVar(const String& baseName, SymbolTable* symb
 
 std::unique_ptr<Expression> Inliner::inlineExpression(int offset,
                                                       VariableRewriteMap* varMap,
+                                                      SymbolTable* symbolTableForExpression,
                                                       const Expression& expression) {
     auto expr = [&](const std::unique_ptr<Expression>& e) -> std::unique_ptr<Expression> {
         if (e) {
-            return this->inlineExpression(offset, varMap, *e);
+            return this->inlineExpression(offset, varMap, symbolTableForExpression, *e);
         }
         return nullptr;
     };
     auto argList = [&](const ExpressionArray& originalArgs) -> ExpressionArray {
         ExpressionArray args;
         args.reserve_back(originalArgs.size());
         for (const std::unique_ptr<Expression>& arg : originalArgs) {
             args.push_back(expr(arg));
         }
         return args;
     };
 
     switch (expression.kind()) {
         case Expression::Kind::kBinary: {
             const BinaryExpression& b = expression.as<BinaryExpression>();
             return std::make_unique<BinaryExpression>(offset,
                                                       expr(b.left()),
                                                       b.getOperator(),
                                                       expr(b.right()),
                                                       &b.type());
         }
         case Expression::Kind::kBoolLiteral:
         case Expression::Kind::kIntLiteral:
         case Expression::Kind::kFloatLiteral:
         case Expression::Kind::kNullLiteral:
             return expression.clone();
         case Expression::Kind::kConstructor: {
             const Constructor& constructor = expression.as<Constructor>();
-            return std::make_unique<Constructor>(offset, &constructor.type(),
-                                                 argList(constructor.arguments()));
+            const Type* type = copy_if_needed(&constructor.type(), *symbolTableForExpression);
+            return std::make_unique<Constructor>(offset, type, argList(constructor.arguments()));
         }
         case Expression::Kind::kExternalFunctionCall: {
             const ExternalFunctionCall& externalCall = expression.as<ExternalFunctionCall>();
             return std::make_unique<ExternalFunctionCall>(offset, &externalCall.function(),
                                                           argList(externalCall.arguments()));
         }
         case Expression::Kind::kExternalValue:
             return expression.clone();
         case Expression::Kind::kFieldAccess: {
             const FieldAccess& f = expression.as<FieldAccess>();
             return std::make_unique<FieldAccess>(expr(f.base()), f.fieldIndex(), f.ownerKind());
         }
         case Expression::Kind::kFunctionCall: {
             const FunctionCall& funcCall = expression.as<FunctionCall>();
             return std::make_unique<FunctionCall>(offset, &funcCall.type(), &funcCall.function(),
                                                   argList(funcCall.arguments()));
         }
         case Expression::Kind::kFunctionReference:
             return expression.clone();
         case Expression::Kind::kIndex: {
             const IndexExpression& idx = expression.as<IndexExpression>();
             return std::make_unique<IndexExpression>(*fContext, expr(idx.base()),
                                                      expr(idx.index()));
         }
         case Expression::Kind::kPrefix: {
             const PrefixExpression& p = expression.as<PrefixExpression>();
             return std::make_unique<PrefixExpression>(p.getOperator(), expr(p.operand()));
         }
         case Expression::Kind::kPostfix: {
             const PostfixExpression& p = expression.as<PostfixExpression>();
             return std::make_unique<PostfixExpression>(expr(p.operand()), p.getOperator());
         }
         case Expression::Kind::kSetting:
             return expression.clone();
         case Expression::Kind::kSwizzle: {
             const Swizzle& s = expression.as<Swizzle>();
             return std::make_unique<Swizzle>(*fContext, expr(s.base()), s.components());
         }
         case Expression::Kind::kTernary: {
             const TernaryExpression& t = expression.as<TernaryExpression>();
             return std::make_unique<TernaryExpression>(offset, expr(t.test()),
                                                        expr(t.ifTrue()), expr(t.ifFalse()));
         }
         case Expression::Kind::kTypeReference:
             return expression.clone();
         case Expression::Kind::kVariableReference: {
             const VariableReference& v = expression.as<VariableReference>();
             auto varMapIter = varMap->find(v.variable());
             if (varMapIter != varMap->end()) {
                 return clone_with_ref_kind(*varMapIter->second, v.refKind());
             }
             return v.clone();
         }
         default:
             SkASSERT(false);
             return nullptr;
     }
 }
@@ -420,157 +421,157 @@ std::unique_ptr<Expression> Inliner::inlineExpression(int offset,
 std::unique_ptr<Statement> Inliner::inlineStatement(int offset,
                                                     VariableRewriteMap* varMap,
                                                     SymbolTable* symbolTableForStatement,
                                                     const Expression* resultExpr,
                                                     bool haveEarlyReturns,
                                                     const Statement& statement,
                                                     bool isBuiltinCode) {
     auto stmt = [&](const std::unique_ptr<Statement>& s) -> std::unique_ptr<Statement> {
         if (s) {
             return this->inlineStatement(offset, varMap, symbolTableForStatement, resultExpr,
                                          haveEarlyReturns, *s, isBuiltinCode);
         }
         return nullptr;
     };
     auto blockStmts = [&](const Block& block) {
         StatementArray result;
         result.reserve_back(block.children().size());
         for (const std::unique_ptr<Statement>& child : block.children()) {
             result.push_back(stmt(child));
         }
         return result;
     };
     auto stmts = [&](const StatementArray& ss) {
         StatementArray result;
         result.reserve_back(ss.size());
         for (const auto& s : ss) {
             result.push_back(stmt(s));
         }
         return result;
     };
     auto expr = [&](const std::unique_ptr<Expression>& e) -> std::unique_ptr<Expression> {
         if (e) {
-            return this->inlineExpression(offset, varMap, *e);
+            return this->inlineExpression(offset, varMap, symbolTableForStatement, *e);
         }
         return nullptr;
     };
 
     ++fInlinedStatementCounter;
 
     switch (statement.kind()) {
         case Statement::Kind::kBlock: {
             const Block& b = statement.as<Block>();
             return std::make_unique<Block>(offset, blockStmts(b),
                                            SymbolTable::WrapIfBuiltin(b.symbolTable()),
                                            b.isScope());
         }
 
         case Statement::Kind::kBreak:
         case Statement::Kind::kContinue:
         case Statement::Kind::kDiscard:
             return statement.clone();
 
         case Statement::Kind::kDo: {
             const DoStatement& d = statement.as<DoStatement>();
             return std::make_unique<DoStatement>(offset, stmt(d.statement()), expr(d.test()));
         }
         case Statement::Kind::kExpression: {
             const ExpressionStatement& e = statement.as<ExpressionStatement>();
             return std::make_unique<ExpressionStatement>(expr(e.expression()));
         }
         case Statement::Kind::kFor: {
             const ForStatement& f = statement.as<ForStatement>();
             // need to ensure initializer is evaluated first so that we've already remapped its
             // declarations by the time we evaluate test & next
             std::unique_ptr<Statement> initializer = stmt(f.initializer());
             return std::make_unique<ForStatement>(offset, std::move(initializer), expr(f.test()),
                                                   expr(f.next()), stmt(f.statement()),
                                                   SymbolTable::WrapIfBuiltin(f.symbols()));
         }
         case Statement::Kind::kIf: {
             const IfStatement& i = statement.as<IfStatement>();
             return std::make_unique<IfStatement>(offset, i.isStatic(), expr(i.test()),
                                                  stmt(i.ifTrue()), stmt(i.ifFalse()));
         }
         case Statement::Kind::kInlineMarker:
         case Statement::Kind::kNop:
             return statement.clone();
         case Statement::Kind::kReturn: {
             const ReturnStatement& r = statement.as<ReturnStatement>();
             if (r.expression()) {
                 SkASSERT(resultExpr);
                 auto assignment =
                         std::make_unique<ExpressionStatement>(std::make_unique<BinaryExpression>(
                                 offset,
                                 clone_with_ref_kind(*resultExpr,
                                                     VariableReference::RefKind::kWrite),
                                 Token::Kind::TK_EQ,
                                 expr(r.expression()),
                                 &resultExpr->type()));
                 if (haveEarlyReturns) {
                     StatementArray block;
                     block.reserve_back(2);
                     block.push_back(std::move(assignment));
                     block.push_back(std::make_unique<BreakStatement>(offset));
                     return std::make_unique<Block>(offset, std::move(block), /*symbols=*/nullptr,
                                                    /*isScope=*/true);
                 } else {
                     return std::move(assignment);
                 }
             } else {
                 if (haveEarlyReturns) {
                     return std::make_unique<BreakStatement>(offset);
                 } else {
                     return std::make_unique<Nop>();
                 }
             }
         }
         case Statement::Kind::kSwitch: {
             const SwitchStatement& ss = statement.as<SwitchStatement>();
             std::vector<std::unique_ptr<SwitchCase>> cases;
             cases.reserve(ss.cases().size());
             for (const std::unique_ptr<SwitchCase>& sc : ss.cases()) {
                 cases.push_back(std::make_unique<SwitchCase>(offset, expr(sc->value()),
                                                              stmts(sc->statements())));
             }
             return std::make_unique<SwitchStatement>(offset, ss.isStatic(), expr(ss.value()),
                                                      std::move(cases),
                                                      SymbolTable::WrapIfBuiltin(ss.symbols()));
         }
         case Statement::Kind::kVarDeclaration: {
             const VarDeclaration& decl = statement.as<VarDeclaration>();
             ExpressionArray sizes;
             sizes.reserve_back(decl.sizes().count());
             for (const std::unique_ptr<Expression>& size : decl.sizes()) {
                 sizes.push_back(expr(size));
             }
             std::unique_ptr<Expression> initialValue = expr(decl.value());
             const Variable& old = decl.var();
             // We assign unique names to inlined variables--scopes hide most of the problems in this
             // regard, but see `InlinerAvoidsVariableNameOverlap` for a counterexample where unique
             // names are important.
             auto name = std::make_unique<String>(
                     this->uniqueNameForInlineVar(String(old.name()), symbolTableForStatement));
             const String* namePtr = symbolTableForStatement->takeOwnershipOfString(std::move(name));
             const Type* baseTypePtr = copy_if_needed(&decl.baseType(), *symbolTableForStatement);
             const Type* typePtr = copy_if_needed(&old.type(), *symbolTableForStatement);
             const Variable* clone = symbolTableForStatement->takeOwnershipOfSymbol(
                     std::make_unique<Variable>(offset,
                                                &old.modifiers(),
                                                namePtr->c_str(),
                                                typePtr,
                                                isBuiltinCode,
                                                old.storage(),
                                                initialValue.get()));
             (*varMap)[&old] = std::make_unique<VariableReference>(offset, clone);
             return std::make_unique<VarDeclaration>(clone, baseTypePtr, std::move(sizes),
                                                     std::move(initialValue));
         }
         case Statement::Kind::kWhile: {
             const WhileStatement& w = statement.as<WhileStatement>();
             return std::make_unique<WhileStatement>(offset, expr(w.test()), stmt(w.statement()));
         }
         default:
             SkASSERT(false);
             return nullptr;
     }
 }
diff --git a/src/sksl/SkSLInliner.h b/src/sksl/SkSLInliner.h
index dda410b1ea..f415b8df3a 100644
--- a/src/sksl/SkSLInliner.h
+++ b/src/sksl/SkSLInliner.h
@@ -48,54 +48,55 @@ public:
 private:
     using VariableRewriteMap = std::unordered_map<const Variable*, std::unique_ptr<Expression>>;
 
     String uniqueNameForInlineVar(const String& baseName, SymbolTable* symbolTable);
 
     void buildCandidateList(const std::vector<std::unique_ptr<ProgramElement>>& elements,
                             SymbolTable* symbols, ProgramUsage* usage,
                             InlineCandidateList* candidateList);
 
     std::unique_ptr<Expression> inlineExpression(int offset,
                                                  VariableRewriteMap* varMap,
+                                                 SymbolTable* symbolTableForExpression,
                                                  const Expression& expression);
     std::unique_ptr<Statement> inlineStatement(int offset,
                                                VariableRewriteMap* varMap,
                                                SymbolTable* symbolTableForStatement,
                                                const Expression* resultExpr,
                                                bool haveEarlyReturns,
                                                const Statement& statement,
                                                bool isBuiltinCode);
 
     using InlinabilityCache = std::unordered_map<const FunctionDeclaration*, bool>;
     bool candidateCanBeInlined(const InlineCandidate& candidate, InlinabilityCache* cache);
 
     using FunctionSizeCache = std::unordered_map<const FunctionDeclaration*, int>;
     int getFunctionSize(const FunctionDeclaration& fnDecl, FunctionSizeCache* cache);
 
     /**
      * Processes the passed-in FunctionCall expression. The FunctionCall expression should be
      * replaced with `fReplacementExpr`. If non-null, `fInlinedBody` should be inserted immediately
      * above the statement containing the inlined expression.
      */
     struct InlinedCall {
         std::unique_ptr<Block> fInlinedBody;
         std::unique_ptr<Expression> fReplacementExpr;
     };
     InlinedCall inlineCall(FunctionCall*, SymbolTable*, const FunctionDeclaration* caller);
 
     /** Adds a scope to inlined bodies returned by `inlineCall`, if one is required. */
     void ensureScopedBlocks(Statement* inlinedBody, Statement* parentStmt);
 
     /** Checks whether inlining is viable for a FunctionCall, modulo recursion and function size. */
     bool isSafeToInline(const FunctionDefinition* functionDef);
 
     const Context* fContext = nullptr;
     ModifiersPool* fModifiers = nullptr;
     const Program::Settings* fSettings = nullptr;
     const ShaderCapsClass* fCaps = nullptr;
     int fInlineVarCounter = 0;
     int fInlinedStatementCounter = 0;
 };
 
 }  // namespace SkSL
 
 #endif  // SKSL_INLINER
diff --git a/tests/sksl/shared/Ossfuzz28050.sksl b/tests/sksl/shared/Ossfuzz28050.sksl
new file mode 100644
index 0000000000..4fc38b82ab
--- /dev/null
+++ b/tests/sksl/shared/Ossfuzz28050.sksl
@@ -0,0 +1,4 @@
+float an()  { return 2; }
+void wna()  { an(), float[](); }
+void na()   { wna(); }
+void main() { na(), na(); }
diff --git a/tests/sksl/shared/golden/Ossfuzz28050.asm.frag b/tests/sksl/shared/golden/Ossfuzz28050.asm.frag
new file mode 100644
index 0000000000..b4a67d5d0d
--- /dev/null
+++ b/tests/sksl/shared/golden/Ossfuzz28050.asm.frag
@@ -0,0 +1,18 @@
+OpCapability Shader
+%1 = OpExtInstImport "GLSL.std.450"
+OpMemoryModel Logical GLSL450
+OpEntryPoint Fragment %main "main" %sk_Clockwise
+OpExecutionMode %main OriginUpperLeft
+OpName %sk_Clockwise "sk_Clockwise"
+OpName %main "main"
+OpDecorate %sk_Clockwise RelaxedPrecision
+OpDecorate %sk_Clockwise BuiltIn FrontFacing
+%bool = OpTypeBool
+%_ptr_Input_bool = OpTypePointer Input %bool
+%sk_Clockwise = OpVariable %_ptr_Input_bool Input
+%void = OpTypeVoid
+%7 = OpTypeFunction %void
+%main = OpFunction %void None %7
+%8 = OpLabel
+OpReturn
+OpFunctionEnd
diff --git a/tests/sksl/shared/golden/Ossfuzz28050.glsl b/tests/sksl/shared/golden/Ossfuzz28050.glsl
new file mode 100644
index 0000000000..2933520785
--- /dev/null
+++ b/tests/sksl/shared/golden/Ossfuzz28050.glsl
@@ -0,0 +1,3 @@
+
+void main() {
+}
diff --git a/tests/sksl/shared/golden/Ossfuzz28050.metal b/tests/sksl/shared/golden/Ossfuzz28050.metal
new file mode 100644
index 0000000000..c18cef376a
--- /dev/null
+++ b/tests/sksl/shared/golden/Ossfuzz28050.metal
@@ -0,0 +1,13 @@
+#include <metal_stdlib>
+#include <simd/simd.h>
+using namespace metal;
+struct Inputs {
+};
+struct Outputs {
+    float4 sk_FragColor [[color(0)]];
+};
+fragment Outputs fragmentMain(Inputs _in [[stage_in]], bool _frontFacing [[front_facing]], float4 _fragCoord [[position]]) {
+    Outputs _outputStruct;
+    thread Outputs* _out = &_outputStruct;
+    return *_out;
+}
