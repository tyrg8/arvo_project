commit 14d29a10437205566c4bd7bcfa2282d34d9f4f2f
Author: Michiharu Ariza <ariza@adobe.com>
Date:   Wed Dec 5 21:33:29 2018 -0800

    check number of blends against args on stack

diff --git a/src/hb-cff2-interp-cs.hh b/src/hb-cff2-interp-cs.hh
index d258b8148..18e846803 100644
--- a/src/hb-cff2-interp-cs.hh
+++ b/src/hb-cff2-interp-cs.hh
@@ -197,59 +197,64 @@ template <typename OPSET, typename PARAM, typename PATH=PathProcsNull<CFF2CSInte
 struct CFF2CSOpSet : CSOpSet<BlendArg, OPSET, CFF2CSInterpEnv, PARAM, PATH>
 {
   static inline void process_op (OpCode op, CFF2CSInterpEnv &env, PARAM& param)
   {
     switch (op) {
       case OpCode_callsubr:
       case OpCode_callgsubr:
 	/* a subroutine number shoudln't be a blended value */
 	if (unlikely (env.argStack.peek ().blending ()))
 	{
 	  env.set_error ();
 	  break;
 	}
 	SUPER::process_op (op, env, param);
 	break;
 
       case OpCode_blendcs:
 	OPSET::process_blend (env, param);
 	break;
 
       case OpCode_vsindexcs:
 	if (unlikely (env.argStack.peek ().blending ()))
 	{
 	  env.set_error ();
 	  break;
 	}
 	OPSET::process_vsindex (env, param);
 	break;
 
       default:
 	SUPER::process_op (op, env, param);
     }
   }
 
   static inline void process_blend (CFF2CSInterpEnv &env, PARAM& param)
   {
     unsigned int n, k;
 
     env.process_blend ();
     k = env.get_region_count ();
     n = env.argStack.pop_uint ();
+    if (unlikely (env.argStack.get_count () < ((k+1) * n)))
+    {
+      env.set_error ();
+      return;
+    }
     /* copy the blend values into blend array of the default values */
     unsigned int start = env.argStack.get_count () - ((k+1) * n);
     for (unsigned int i = 0; i < n; i++)
       env.argStack[start + i].set_blends (n, i, k, &env.argStack[start + n + (i * k)]);
 
     /* pop off blend values leaving default values now adorned with blend values */
     env.argStack.pop (k * n);
   }
 
   static inline void process_vsindex (CFF2CSInterpEnv &env, PARAM& param)
   {
     env.process_vsindex ();
     env.clear_args ();
   }
 
   private:
   typedef CSOpSet<BlendArg, OPSET, CFF2CSInterpEnv, PARAM, PATH>  SUPER;
 };
