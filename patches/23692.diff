commit 02d76edc09aadb6366e62b168686fdc2ef4e58ff
Author: Greg Landrum <greg.landrum@gmail.com>
Date:   Mon Aug 17 06:51:24 2020 +0200

    more bug fixes and cleanups from fuzz testing (#3339)
    
    * ossfuzz #22301
    
    * ossfuzz 22307
    
    * memory leak when failing cxsmiles
    
    * MolPickler things found by ossfuzz
    
    * changes in response to review

diff --git a/Code/GraphMol/FileParsers/FileParserUtils.h b/Code/GraphMol/FileParsers/FileParserUtils.h
index b7a1b5300..8d9d391b0 100644
--- a/Code/GraphMol/FileParsers/FileParserUtils.h
+++ b/Code/GraphMol/FileParsers/FileParserUtils.h
@@ -35,6 +35,8 @@ T stripSpacesAndCast(const std::string &input, bool acceptSpaces = false) {
 }
 RDKIT_FILEPARSERS_EXPORT int toInt(const std::string &input,
                                    bool acceptSpaces = true);
+RDKIT_FILEPARSERS_EXPORT unsigned int toUnsigned(const std::string &input,
+                                                 bool acceptSpaces = true);
 RDKIT_FILEPARSERS_EXPORT double toDouble(const std::string &input,
                                          bool acceptSpaces = true);
 
@@ -55,8 +57,9 @@ RDKIT_FILEPARSERS_EXPORT bool ParseV2000CTAB(
     bool strictParsing = true);
 
 //! finishes up the processing (sanitization, etc.) of a molecule read from CTAB
-RDKIT_FILEPARSERS_EXPORT void finishMolProcessing(RWMol *res, bool chiralityPossible, bool sanitize,
-                         bool removeHs);
+RDKIT_FILEPARSERS_EXPORT void finishMolProcessing(RWMol *res,
+                                                  bool chiralityPossible,
+                                                  bool sanitize, bool removeHs);
 
 //! Deprecated, please use QueryOps::replaceAtomWithQueryAtom instead
 RDKIT_FILEPARSERS_EXPORT Atom *replaceAtomWithQueryAtom(RWMol *mol, Atom *atom);
diff --git a/Code/GraphMol/FileParsers/MolFileParser.cpp b/Code/GraphMol/FileParsers/MolFileParser.cpp
index 8f674d30c..97c2c88a3 100644
--- a/Code/GraphMol/FileParsers/MolFileParser.cpp
+++ b/Code/GraphMol/FileParsers/MolFileParser.cpp
@@ -74,6 +74,25 @@ int toInt(const std::string &input, bool acceptSpaces) {
   return res;
 }
 
+unsigned int toUnsigned(const std::string &input, bool acceptSpaces) {
+  unsigned res = 0;
+  // don't need to worry about locale stuff here because
+  // we're not going to have delimiters
+
+  // sanity check on the input since strtol doesn't do it for us:
+  const char *txt = input.c_str();
+  while (*txt != '\x00') {
+    if ((*txt >= '0' && *txt <= '9') || (acceptSpaces && *txt == ' ') ||
+        *txt == '+') {
+      ++txt;
+    } else {
+      throw boost::bad_lexical_cast();
+    }
+  }
+  res = strtoul(input.c_str(), nullptr, 10);
+  return res;
+}
+
 double toDouble(const std::string &input, bool acceptSpaces) {
   // sanity check on the input since strtol doesn't do it for us:
   const char *txt = input.c_str();
@@ -137,67 +156,67 @@ bool startsWith(const std::string &haystack, const char *needle, size_t size) {
 //! parse a collection block to find enhanced stereo groups
 std::string parseEnhancedStereo(std::istream *inStream, unsigned int &line,
                                 RWMol *mol) {
   // Lines like (absolute, relative, racemic):
   // M  V30 MDLV30/STEABS ATOMS=(2 2 3)
   // M  V30 MDLV30/STEREL1 ATOMS=(1 12)
   // M  V30 MDLV30/STERAC1 ATOMS=(1 12)
   const regex stereo_label(
       R"regex(MDLV30/STE(...)[0-9]* +ATOMS=\(([0-9]+) +(.*)\))regex");
 
   smatch match;
   std::vector<StereoGroup> groups;
 
   // Read the collection until the end
   auto tempStr = getV3000Line(inStream, line);
   boost::to_upper(tempStr);
   while (!startsWith(tempStr, "END", 3)) {
     // If this line in the collection is part of a stereo group
     if (regex_match(tempStr, match, stereo_label)) {
       StereoGroupType grouptype = RDKit::StereoGroupType::STEREO_ABSOLUTE;
 
       if (match[1] == "ABS") {
         grouptype = RDKit::StereoGroupType::STEREO_ABSOLUTE;
       } else if (match[1] == "REL") {
         grouptype = RDKit::StereoGroupType::STEREO_OR;
       } else if (match[1] == "RAC") {
         grouptype = RDKit::StereoGroupType::STEREO_AND;
       } else {
         std::ostringstream errout;
         errout << "Unrecognized stereogroup type : '" << tempStr << "' on line"
                << line;
         throw FileParseException(errout.str());
       }
 
-      const unsigned int count = FileParserUtils::toInt(match[2], true);
+      const unsigned int count = FileParserUtils::toUnsigned(match[2], true);
       std::vector<Atom *> atoms;
       std::stringstream ss(match[3]);
       unsigned int index;
       for (size_t i = 0; i < count; ++i) {
         ss >> index;
         // atoms are 1 indexed in molfiles
         atoms.push_back(mol->getAtomWithIdx(index - 1));
       }
       groups.emplace_back(grouptype, std::move(atoms));
     } else {
       // skip collection types we don't know how to read. Only one documented
       // is MDLV30/HILITE
       BOOST_LOG(rdWarningLog) << "Skipping unrecognized collection type at "
                                  "line "
                               << line << ": " << tempStr << std::endl;
     }
     tempStr = getV3000Line(inStream, line);
   }
 
   if (!groups.empty()) {
     mol->setStereoGroups(std::move(groups));
   }
   tempStr = getV3000Line(inStream, line);
   return tempStr;
 }
 
 //*************************************
 //
 // Every effort has been made to adhere to MDL's standard
 // for mol files
 //
 //*************************************
@@ -1514,164 +1533,164 @@ Atom *ParseMolFileAtomLine(const std::string text, RDGeom::Point3D &pos,
 Bond *ParseMolFileBondLine(const std::string &text, unsigned int line) {
   unsigned int idx1, idx2, bType, stereo;
   int spos = 0;
 
   if (text.size() < 9) {
     std::ostringstream errout;
     errout << "Bond line too short: '" << text << "' on line " << line;
     throw FileParseException(errout.str());
   }
 
   try {
-    idx1 = FileParserUtils::toInt(text.substr(spos, 3));
+    idx1 = FileParserUtils::toUnsigned(text.substr(spos, 3));
     spos += 3;
-    idx2 = FileParserUtils::toInt(text.substr(spos, 3));
+    idx2 = FileParserUtils::toUnsigned(text.substr(spos, 3));
     spos += 3;
-    bType = FileParserUtils::toInt(text.substr(spos, 3));
+    bType = FileParserUtils::toUnsigned(text.substr(spos, 3));
   } catch (boost::bad_lexical_cast &) {
     std::ostringstream errout;
     errout << "Cannot convert '" << text.substr(spos, 3) << "' to int on line "
            << line;
     throw FileParseException(errout.str());
   }
 
   // adjust the numbering
   idx1--;
   idx2--;
 
   Bond::BondType type;
   Bond *res = nullptr;
   switch (bType) {
     case 1:
       type = Bond::SINGLE;
       res = new Bond;
       break;
     case 2:
       type = Bond::DOUBLE;
       res = new Bond;
       break;
     case 3:
       type = Bond::TRIPLE;
       res = new Bond;
       break;
     case 4:
       type = Bond::AROMATIC;
       res = new Bond;
       break;
     case 0:
       type = Bond::UNSPECIFIED;
       res = new Bond;
       BOOST_LOG(rdWarningLog)
           << "bond with order 0 found on line " << line
           << ". This is not part of the MDL specification." << std::endl;
       break;
     default:
       type = Bond::UNSPECIFIED;
       // it's a query bond of some type
       res = new QueryBond;
       if (bType == 8) {
         BOND_NULL_QUERY *q;
         q = makeBondNullQuery();
         res->setQuery(q);
       } else if (bType == 6) {
         res->setQuery(makeSingleOrAromaticBondQuery());
         res->setProp(common_properties::_MolFileBondQuery, 1);
       } else if (bType == 5 || bType == 7) {
         BOND_OR_QUERY *q;
         q = new BOND_OR_QUERY;
         if (bType == 5) {
           // single or double
           q->addChild(QueryBond::QUERYBOND_QUERY::CHILD_TYPE(
               makeBondOrderEqualsQuery(Bond::SINGLE)));
           q->addChild(QueryBond::QUERYBOND_QUERY::CHILD_TYPE(
               makeBondOrderEqualsQuery(Bond::DOUBLE)));
           q->setDescription("BondOr");
           res->setProp(common_properties::_MolFileBondQuery, 1);
         } else if (bType == 7) {
           // double or aromatic
           q->addChild(QueryBond::QUERYBOND_QUERY::CHILD_TYPE(
               makeBondOrderEqualsQuery(Bond::DOUBLE)));
           q->addChild(QueryBond::QUERYBOND_QUERY::CHILD_TYPE(
               makeBondOrderEqualsQuery(Bond::AROMATIC)));
           q->setDescription("BondOr");
         }
         res->setQuery(q);
         res->setProp(common_properties::_MolFileBondQuery, 1);
       } else {
         BOND_NULL_QUERY *q;
         q = makeBondNullQuery();
         res->setQuery(q);
         BOOST_LOG(rdWarningLog)
             << "unrecognized query bond type, " << bType << ", found on line "
             << line << ". Using an \"any\" query." << std::endl;
       }
       break;
   }
   res->setBeginAtomIdx(idx1);
   res->setEndAtomIdx(idx2);
   res->setBondType(type);
   res->setProp(common_properties::_MolFileBondType, bType);
 
   if (text.size() >= 12 && text.substr(9, 3) != "  0") {
     try {
-      stereo = FileParserUtils::toInt(text.substr(9, 3));
+      stereo = FileParserUtils::toUnsigned(text.substr(9, 3));
       switch (stereo) {
         case 0:
           res->setBondDir(Bond::NONE);
           break;
         case 1:
           res->setBondDir(Bond::BEGINWEDGE);
           break;
         case 6:
           res->setBondDir(Bond::BEGINDASH);
           break;
         case 3:  // "either" double bond
           res->setBondDir(Bond::EITHERDOUBLE);
           res->setStereo(Bond::STEREOANY);
           break;
         case 4:  // "either" single bond
           res->setBondDir(Bond::UNKNOWN);
           break;
       }
       res->setProp(common_properties::_MolFileBondStereo, stereo);
     } catch (boost::bad_lexical_cast &) {
       ;
     }
   }
   if (text.size() >= 18 && text.substr(15, 3) != "  0") {
     try {
       int topology = FileParserUtils::toInt(text.substr(15, 3));
       if (topology) {
         if (!res->hasQuery()) {
           auto *qBond = new QueryBond(*res);
           delete res;
           res = qBond;
         }
         BOND_EQUALS_QUERY *q = makeBondIsInRingQuery();
         switch (topology) {
           case 1:
             break;
           case 2:
             q->setNegation(true);
             break;
           default:
             std::ostringstream errout;
             errout << "Unrecognized bond topology specifier: " << topology
                    << " on line " << line;
             throw FileParseException(errout.str());
         }
         res->expandQuery(q);
       }
     } catch (boost::bad_lexical_cast &) {
       ;
     }
   }
   if (text.size() >= 21 && text.substr(18, 3) != "  0") {
     try {
       int reactStatus = FileParserUtils::toInt(text.substr(18, 3));
       res->setProp("molReactStatus", reactStatus);
     } catch (boost::bad_lexical_cast &) {
       ;
     }
   }
   return res;
 }
@@ -2654,140 +2673,140 @@ namespace FileParserUtils {
 bool ParseV3000CTAB(std::istream *inStream, unsigned int &line, RWMol *mol,
                     Conformer *&conf, bool &chiralityPossible,
                     unsigned int &nAtoms, unsigned int &nBonds,
                     bool strictParsing, bool expectMEND) {
   PRECONDITION(inStream, "bad stream");
   PRECONDITION(mol, "bad molecule");
 
   std::string tempStr;
   std::vector<std::string> splitLine;
 
   bool fileComplete = false;
 
   tempStr = getV3000Line(inStream, line);
   boost::to_upper(tempStr);
   if (tempStr.length() < 10 || tempStr.substr(0, 10) != "BEGIN CTAB") {
     std::ostringstream errout;
     errout << "BEGIN CTAB line not found on line " << line;
     throw FileParseException(errout.str());
   }
 
   tempStr = getV3000Line(inStream, line);
   boost::to_upper(tempStr);
   if (tempStr.size() < 8 || tempStr.substr(0, 7) != "COUNTS ") {
     std::ostringstream errout;
     errout << "Bad counts line : '" << tempStr << "' on line " << line;
     throw FileParseException(errout.str());
   }
   std::string trimmed =
       boost::trim_copy(tempStr.substr(7, tempStr.length() - 7));
   boost::split(splitLine, trimmed, boost::is_any_of(" \t"),
                boost::token_compress_on);
   if (splitLine.size() < 2) {
     std::ostringstream errout;
     errout << "Bad counts line : '" << tempStr << "' on line " << line;
     throw FileParseException(errout.str());
   }
 
-  nAtoms = FileParserUtils::toInt(splitLine[0]);
-  nBonds = FileParserUtils::toInt(splitLine[1]);
+  nAtoms = FileParserUtils::toUnsigned(splitLine[0]);
+  nBonds = FileParserUtils::toUnsigned(splitLine[1]);
   if (!nAtoms) {
     throw FileParseException("molecule has no atoms");
   }
   conf = new Conformer(nAtoms);
 
   unsigned int nSgroups = 0, n3DConstraints = 0, chiralFlag = 0;
   (void)chiralFlag;  // needs to be read
   if (splitLine.size() > 2) {
-    nSgroups = FileParserUtils::toInt(splitLine[2]);
+    nSgroups = FileParserUtils::toUnsigned(splitLine[2]);
   }
   if (splitLine.size() > 3) {
-    n3DConstraints = FileParserUtils::toInt(splitLine[3]);
+    n3DConstraints = FileParserUtils::toUnsigned(splitLine[3]);
   }
   if (splitLine.size() > 4) {
-    chiralFlag = FileParserUtils::toInt(splitLine[4]);
+    chiralFlag = FileParserUtils::toUnsigned(splitLine[4]);
   }
 
   ParseV3000AtomBlock(inStream, line, nAtoms, mol, conf);
   if (nBonds) {
     ParseV3000BondBlock(inStream, line, nBonds, mol, chiralityPossible);
   }
 
   if (nSgroups) {
     ParseV3000SGroupsBlock(inStream, line, nSgroups, mol, strictParsing);
   }
 
   if (n3DConstraints) {
     BOOST_LOG(rdWarningLog)
         << "3D constraint information in mol block ignored at line " << line
         << std::endl;
     tempStr = getV3000Line(inStream, line);
     boost::to_upper(tempStr);
     if (tempStr.length() < 11 || tempStr.substr(0, 11) != "BEGIN OBJ3D") {
       std::ostringstream errout;
       errout << "BEGIN OBJ3D line not found on line " << line;
       throw FileParseException(errout.str());
     }
     for (unsigned int i = 0; i < n3DConstraints; ++i) {
       tempStr = getV3000Line(inStream, line);
     }
     tempStr = getV3000Line(inStream, line);
     boost::to_upper(tempStr);
     if (tempStr.length() < 9 || tempStr.substr(0, 9) != "END OBJ3D") {
       std::ostringstream errout;
       errout << "END OBJ3D line not found on line " << line;
       throw FileParseException(errout.str());
     }
   }
 
   tempStr = getV3000Line(inStream, line);
   // do link nodes:
   boost::to_upper(tempStr);
   while (tempStr.length() > 8 && tempStr.substr(0, 8) == "LINKNODE") {
     boost::to_upper(tempStr);
     // if the line has nothing on it we just ignore it
     if (tempStr.size() > 9) {
       std::string existing = "";
       if (mol->getPropIfPresent(common_properties::molFileLinkNodes,
                                 existing)) {
         existing += "|";
       }
       existing += tempStr.substr(9);  // skip the "LINKNODE "
       mol->setProp(common_properties::molFileLinkNodes, existing);
     }
     tempStr = getV3000Line(inStream, line);
   }
 
   while (tempStr.length() > 5 && tempStr.substr(0, 5) == "BEGIN") {
     if (tempStr.length() > 15 && tempStr.substr(6, 10) == "COLLECTION") {
       tempStr = parseEnhancedStereo(inStream, line, mol);
     } else {
       // skip blocks we don't know how to read
       BOOST_LOG(rdWarningLog) << "skipping block at line " << line << ": '"
                               << tempStr << "'" << std::endl;
       while (tempStr.length() < 3 || tempStr.substr(0, 3) != "END") {
         tempStr = getV3000Line(inStream, line);
       }
       tempStr = getV3000Line(inStream, line);
     }
   }
 
   boost::to_upper(tempStr);
   if (tempStr.length() < 8 || tempStr.substr(0, 8) != "END CTAB") {
     throw FileParseException("END CTAB line not found");
   }
 
   if (expectMEND) {
     tempStr = getLine(inStream);
     ++line;
     if (tempStr[0] == 'M' && tempStr.substr(0, 6) == "M  END") {
       fileComplete = true;
     }
   } else {
     fileComplete = true;
   }
 
   mol->addConformer(conf, true);
   conf = nullptr;
 
   return fileComplete;
 }  // namespace FileParserUtils
@@ -2902,226 +2921,228 @@ void finishMolProcessing(RWMol *res, bool chiralityPossible, bool sanitize,
 //------------------------------------------------
 //
 //  Read a molecule from a stream
 //
 //------------------------------------------------
 RWMol *MolDataStreamToMol(std::istream *inStream, unsigned int &line,
                           bool sanitize, bool removeHs, bool strictParsing) {
   PRECONDITION(inStream, "no stream");
   std::string tempStr;
   bool fileComplete = false;
   bool chiralityPossible = false;
   Utils::LocaleSwitcher ls;
   // mol name
   line++;
   tempStr = getLine(inStream);
   if (inStream->eof()) {
     return nullptr;
   }
   auto *res = new RWMol();
   res->setProp(common_properties::_Name, tempStr);
 
   // info
   line++;
   tempStr = getLine(inStream);
   res->setProp("_MolFileInfo", tempStr);
   if (tempStr.length() >= 22) {
     std::string dimLabel = tempStr.substr(20, 2);
     // Unless labelled as 3D we assume 2D
     if (dimLabel == "3d" || dimLabel == "3D") {
       res->setProp(common_properties::_3DConf, 1);
     }
   }
   // comments
   line++;
   tempStr = getLine(inStream);
   res->setProp("_MolFileComments", tempStr);
 
   unsigned int nAtoms = 0, nBonds = 0, nLists = 0, chiralFlag = 0, nsText = 0,
                nRxnComponents = 0;
   int nReactants = 0, nProducts = 0, nIntermediates = 0;
   (void)nLists;  // read from the file but unused
   (void)nsText;
   (void)nRxnComponents;
   (void)nReactants;
   (void)nProducts;
   (void)nIntermediates;
   // counts line, this is where we really get started
   line++;
   tempStr = getLine(inStream);
 
   if (tempStr.size() < 6) {
     if (res) {
       delete res;
       res = nullptr;
     }
     std::ostringstream errout;
     errout << "Counts line too short: '" << tempStr << "' on line" << line;
     throw FileParseException(errout.str());
   }
 
   unsigned int spos = 0;
   // this needs to go into a try block because if the lexical_cast throws an
   // exception we want to catch and delete mol before leaving this function
   try {
-    nAtoms = FileParserUtils::toInt(tempStr.substr(spos, 3), true);
+    nAtoms = FileParserUtils::toUnsigned(tempStr.substr(spos, 3), true);
     spos = 3;
-    nBonds = FileParserUtils::toInt(tempStr.substr(spos, 3), true);
+    nBonds = FileParserUtils::toUnsigned(tempStr.substr(spos, 3), true);
     spos = 6;
   } catch (boost::bad_lexical_cast &) {
     if (res) {
       delete res;
       res = nullptr;
     }
     std::ostringstream errout;
     errout << "Cannot convert '" << tempStr.substr(spos, 3)
-           << "' to int on line " << line;
+           << "' to unsigned int on line " << line;
     throw FileParseException(errout.str());
   }
   try {
     spos = 6;
     if (tempStr.size() >= 9) {
-      nLists = FileParserUtils::toInt(tempStr.substr(spos, 3), true);
+      nLists = FileParserUtils::toUnsigned(tempStr.substr(spos, 3), true);
     }
 
     spos = 12;
     if (tempStr.size() >= spos + 3) {
-      chiralFlag = FileParserUtils::toInt(tempStr.substr(spos, 3), true);
+      chiralFlag = FileParserUtils::toUnsigned(tempStr.substr(spos, 3), true);
     }
 
     spos = 15;
     if (tempStr.size() >= spos + 3) {
-      nsText = FileParserUtils::toInt(tempStr.substr(spos, 3), true);
+      nsText = FileParserUtils::toUnsigned(tempStr.substr(spos, 3), true);
     }
 
     spos = 18;
     if (tempStr.size() >= spos + 3) {
-      nRxnComponents = FileParserUtils::toInt(tempStr.substr(spos, 3), true);
+      nRxnComponents =
+          FileParserUtils::toUnsigned(tempStr.substr(spos, 3), true);
     }
 
     spos = 21;
     if (tempStr.size() >= spos + 3) {
-      nReactants = FileParserUtils::toInt(tempStr.substr(spos, 3), true);
+      nReactants = FileParserUtils::toUnsigned(tempStr.substr(spos, 3), true);
     }
 
     spos = 24;
     if (tempStr.size() >= spos + 3) {
-      nProducts = FileParserUtils::toInt(tempStr.substr(spos, 3), true);
+      nProducts = FileParserUtils::toUnsigned(tempStr.substr(spos, 3), true);
     }
 
     spos = 27;
     if (tempStr.size() >= spos + 3) {
-      nIntermediates = FileParserUtils::toInt(tempStr.substr(spos, 3), true);
+      nIntermediates =
+          FileParserUtils::toUnsigned(tempStr.substr(spos, 3), true);
     }
 
   } catch (boost::bad_lexical_cast &) {
     // some SD files (such as some from NCI) lack all the extra information
     // on the header line, so ignore problems parsing there.
   }
 
   unsigned int ctabVersion = 2000;
   if (tempStr.size() > 35) {
     if (tempStr.size() < 39 || tempStr[34] != 'V') {
       std::ostringstream errout;
       errout << "CTAB version string invalid at line " << line;
       if (strictParsing) {
         delete res;
         res = nullptr;
         throw FileParseException(errout.str());
       } else {
         BOOST_LOG(rdWarningLog) << errout.str() << std::endl;
       }
     } else if (tempStr.substr(34, 5) == "V3000") {
       ctabVersion = 3000;
     } else if (tempStr.substr(34, 5) != "V2000") {
       std::ostringstream errout;
       errout << "Unsupported CTAB version: '" << tempStr.substr(34, 5)
              << "' at line " << line;
       if (strictParsing) {
         delete res;
         res = nullptr;
         throw FileParseException(errout.str());
       } else {
         BOOST_LOG(rdWarningLog) << errout.str() << std::endl;
       }
     }
   }
 
   if (chiralFlag) {
     res->setProp(common_properties::_MolFileChiralFlag, chiralFlag);
   }
 
   Conformer *conf = nullptr;
   try {
     if (ctabVersion == 2000) {
       fileComplete = FileParserUtils::ParseV2000CTAB(inStream, line, res, conf,
                                                      chiralityPossible, nAtoms,
                                                      nBonds, strictParsing);
     } else {
       if (nAtoms != 0 || nBonds != 0) {
         std::ostringstream errout;
         errout << "V3000 mol blocks should have 0s in the initial counts line. "
                   "(line: "
                << line << ")";
         if (strictParsing) {
           delete res;
           res = nullptr;
           throw FileParseException(errout.str());
         } else {
           BOOST_LOG(rdWarningLog) << errout.str() << std::endl;
         }
       }
       fileComplete = FileParserUtils::ParseV3000CTAB(inStream, line, res, conf,
                                                      chiralityPossible, nAtoms,
                                                      nBonds, strictParsing);
     }
   } catch (MolFileUnhandledFeatureException &e) {
     // unhandled mol file feature, just delete the result
     delete res;
     delete conf;
     res = nullptr;
     conf = nullptr;
     BOOST_LOG(rdErrorLog) << " Unhandled CTAB feature: '" << e.what()
                           << "'. Molecule skipped." << std::endl;
 
     if (!inStream->eof()) {
       tempStr = getLine(inStream);
     }
     ++line;
     while (!inStream->eof() && !inStream->fail() &&
            tempStr.substr(0, 6) != "M  END" && tempStr.substr(0, 4) != "$$$$") {
       tempStr = getLine(inStream);
       ++line;
     }
     if (!inStream->eof() || tempStr.substr(0, 6) == "M  END" ||
         tempStr.substr(0, 4) == "$$$$") {
       fileComplete = true;
     } else {
       fileComplete = false;
     }
   } catch (FileParseException &e) {
     // catch our exceptions and throw them back after cleanup
     delete res;
     delete conf;
     res = nullptr;
     conf = nullptr;
     throw e;
   }
 
   if (!fileComplete) {
     delete res;
     delete conf;
     res = nullptr;
     conf = nullptr;
     std::ostringstream errout;
     errout
         << "Problems encountered parsing Mol data, M  END missing around line "
         << line;
     throw FileParseException(errout.str());
   }
 
   if (res) {
     FileParserUtils::finishMolProcessing(res, chiralityPossible, sanitize,
                                          removeHs);
   }
   return res;
 }
diff --git a/Code/GraphMol/MolPickler.cpp b/Code/GraphMol/MolPickler.cpp
index eabc50d52..4a4643f6c 100644
--- a/Code/GraphMol/MolPickler.cpp
+++ b/Code/GraphMol/MolPickler.cpp
@@ -50,15 +50,28 @@ void streamWrite(std::ostream &ss, MolPickler::Tags tag, const T &what) {
 void streamRead(std::istream &ss, MolPickler::Tags &tag, int version) {
   if (version < 7000) {
     int32_t tmp;
     streamRead(ss, tmp, version);
+    if (tmp < 0 || tmp >= MolPickler::Tags::INVALID_TAG) {
+      throw MolPicklerException("Invalid tag found.");
+    }
     tag = static_cast<MolPickler::Tags>(tmp);
   } else {
     unsigned char tmp;
     streamRead(ss, tmp, version);
+    if (tmp >= MolPickler::Tags::INVALID_TAG) {
+      throw MolPicklerException("Invalid tag found.");
+    }
     tag = static_cast<MolPickler::Tags>(tmp);
   }
 }
 
+void streamReadPositiveChar(std::istream &ss, char &res, int version) {
+  streamRead(ss, res, version);
+  if (res < 0) {
+    throw MolPicklerException("invalid value in pickle");
+  }
+}
+
 namespace {
 static unsigned int defaultProperties = PicklerOps::NoProps;
 static CustomPropHandlerVec defaultPropHandlers = {};
@@ -862,75 +875,79 @@ void MolPickler::pickleMol(const ROMol &mol, std::string &ss) {
 // NOTE: if the mol passed in here already has atoms and bonds, they will
 // be left intact.  The side effect is that ALL atom and bond bookmarks
 // will be blown out by the end of this process.
 void MolPickler::molFromPickle(std::istream &ss, ROMol *mol) {
   PRECONDITION(mol, "empty molecule");
 
   // Ensure that the exception state of the `istream` is reset to the previous
   // state after we're done.
   // Also enable exceptions here, so we're notified when we've reached EOF or
   // any other problem.
   IOStreamExceptionStateResetter resetter(ss, std::ios_base::eofbit |
                                                   std::ios_base::failbit |
                                                   std::ios_base::badbit);
 
   try {
     int32_t tmpInt;
 
     mol->clearAllAtomBookmarks();
     mol->clearAllBondBookmarks();
 
     streamRead(ss, tmpInt);
     if (tmpInt != endianId) {
       throw MolPicklerException(
           "Bad pickle format: bad endian ID or invalid file format");
     }
 
     streamRead(ss, tmpInt);
     if (static_cast<Tags>(tmpInt) != VERSION) {
       throw MolPicklerException("Bad pickle format: no version tag");
     }
     int32_t majorVersion, minorVersion, patchVersion;
     streamRead(ss, majorVersion);
     streamRead(ss, minorVersion);
     streamRead(ss, patchVersion);
     if (majorVersion > versionMajor ||
         (majorVersion == versionMajor && minorVersion > versionMinor)) {
       BOOST_LOG(rdWarningLog)
           << "Depickling from a version number (" << majorVersion << "."
           << minorVersion << ")"
           << "that is higher than our version (" << versionMajor << "."
           << versionMinor << ").\nThis probably won't work." << std::endl;
     }
+    // version sanity checking
+    if (majorVersion > 1000 || minorVersion > 100 || patchVersion > 100) {
+      throw MolPicklerException("unreasonable version numbers");
+    }
     majorVersion = 1000 * majorVersion + minorVersion * 10 + patchVersion;
     if (majorVersion == 1) {
       _depickleV1(ss, mol);
     } else {
       int32_t numAtoms;
       streamRead(ss, numAtoms, majorVersion);
       if (numAtoms > 255) {
         _depickle<int32_t>(ss, mol, majorVersion, numAtoms);
       } else {
         _depickle<unsigned char>(ss, mol, majorVersion, numAtoms);
       }
     }
     mol->clearAllAtomBookmarks();
     mol->clearAllBondBookmarks();
     if (majorVersion < 4000) {
       // FIX for issue 220 - probably better to change the pickle format later
       MolOps::assignStereochemistry(*mol, true);
     }
   } catch (const std::ios_base::failure &e) {
     if (ss.eof()) {
       throw MolPicklerException(
           "Bad pickle format: unexpected End-of-File while reading");
     } else if (ss.bad()) {
       throw MolPicklerException("Bad pickle format: read error while reading");
     } else if (ss.fail()) {
       throw MolPicklerException(
           "Bad pickle format: logical error while reading");
     } else {
       throw MolPicklerException(
           "Bad pickle format: unexpected error while reading");
     }
   }
 }
@@ -1342,70 +1359,70 @@ int32_t MolPickler::_pickleAtomData(std::ostream &tss, const Atom *atom) {
 void MolPickler::_unpickleAtomData(std::istream &ss, Atom *atom, int version) {
   int propFlags;
   char tmpChar;
   signed char tmpSchar;
 
   streamRead(ss, propFlags, version);
   if (propFlags & 1) {
     float tmpFloat;
     streamRead(ss, tmpFloat, version);
     int iso = static_cast<int>(floor(tmpFloat + atom->getMass() + .0001));
     atom->setIsotope(iso);
   }
 
   if (propFlags & (1 << 1)) {
     streamRead(ss, tmpSchar, version);
   } else {
     tmpSchar = 0;
   }
   atom->setFormalCharge(static_cast<int>(tmpSchar));
 
   if (propFlags & (1 << 2)) {
-    streamRead(ss, tmpChar, version);
+    streamReadPositiveChar(ss, tmpChar, version);
   } else {
     tmpChar = 0;
   }
   atom->setChiralTag(static_cast<Atom::ChiralType>(tmpChar));
 
   if (propFlags & (1 << 3)) {
-    streamRead(ss, tmpChar, version);
+    streamReadPositiveChar(ss, tmpChar, version);
   } else {
     tmpChar = Atom::SP3;
   }
   atom->setHybridization(static_cast<Atom::HybridizationType>(tmpChar));
 
   if (propFlags & (1 << 4)) {
     streamRead(ss, tmpChar, version);
   } else {
     tmpChar = 0;
   }
   atom->setNumExplicitHs(tmpChar);
 
   if (propFlags & (1 << 5)) {
     streamRead(ss, tmpChar, version);
   } else {
     tmpChar = 0;
   }
   atom->d_explicitValence = tmpChar;
 
   if (propFlags & (1 << 6)) {
     streamRead(ss, tmpChar, version);
   } else {
     tmpChar = 0;
   }
   atom->d_implicitValence = tmpChar;
   if (propFlags & (1 << 7)) {
-    streamRead(ss, tmpChar, version);
+    streamReadPositiveChar(ss, tmpChar, version);
   } else {
     tmpChar = 0;
   }
   atom->d_numRadicalElectrons = static_cast<unsigned int>(tmpChar);
 
   atom->d_isotope = 0;
   if (propFlags & (1 << 8)) {
     unsigned int tmpuint;
     streamRead(ss, tmpuint, version);
     atom->setIsotope(tmpuint);
   }
 }
 
 // T refers to the type of the atom indices written
@@ -1498,27 +1515,32 @@ template <typename T, typename C>
 Conformer *MolPickler::_conformerFromPickle(std::istream &ss, int version) {
   C tmpFloat;
   bool is3D = true;
   if (version > 4000) {
     char tmpChr;
     streamRead(ss, tmpChr, version);
     is3D = static_cast<bool>(tmpChr);
   }
   int tmpInt;
   streamRead(ss, tmpInt, version);
   auto cid = static_cast<unsigned int>(tmpInt);
   T tmpT;
   streamRead(ss, tmpT, version);
   auto numAtoms = static_cast<unsigned int>(tmpT);
   auto *conf = new Conformer(numAtoms);
   conf->setId(cid);
   conf->set3D(is3D);
-  for (unsigned int i = 0; i < numAtoms; i++) {
-    streamRead(ss, tmpFloat, version);
-    conf->getAtomPos(i).x = static_cast<double>(tmpFloat);
-    streamRead(ss, tmpFloat, version);
-    conf->getAtomPos(i).y = static_cast<double>(tmpFloat);
-    streamRead(ss, tmpFloat, version);
-    conf->getAtomPos(i).z = static_cast<double>(tmpFloat);
+  try {
+    for (unsigned int i = 0; i < numAtoms; i++) {
+      streamRead(ss, tmpFloat, version);
+      conf->getAtomPos(i).x = static_cast<double>(tmpFloat);
+      streamRead(ss, tmpFloat, version);
+      conf->getAtomPos(i).y = static_cast<double>(tmpFloat);
+      streamRead(ss, tmpFloat, version);
+      conf->getAtomPos(i).z = static_cast<double>(tmpFloat);
+    }
+  } catch (...) {
+    delete conf;
+    throw;
   }
   return conf;
 }
@@ -1764,113 +1786,113 @@ template <typename T>
 Bond *MolPickler::_addBondFromPickle(std::istream &ss, ROMol *mol, int version,
                                      bool directMap) {
   PRECONDITION(mol, "empty molecule");
   char tmpChar;
   char flags;
   int begIdx, endIdx;
   T tmpT;
 
   Bond *bond = nullptr;
   streamRead(ss, tmpT, version);
   if (directMap) {
     begIdx = tmpT;
   } else {
     begIdx = mol->getAtomWithBookmark(static_cast<int>(tmpT))->getIdx();
   }
   streamRead(ss, tmpT, version);
   if (directMap) {
     endIdx = tmpT;
 
   } else {
     endIdx = mol->getAtomWithBookmark(static_cast<int>(tmpT))->getIdx();
   }
   streamRead(ss, flags, version);
   bool hasQuery = flags & 0x1 << 4;
 
   if (version <= 5000 || (version <= 7000 && !hasQuery) || version > 7000) {
     bond = new Bond();
     bond->setIsAromatic(flags & 0x1 << 6);
     bond->setIsConjugated(flags & 0x1 << 5);
 
     if (version < 7000) {
-      streamRead(ss, tmpChar, version);
+      streamReadPositiveChar(ss, tmpChar, version);
       bond->setBondType(static_cast<Bond::BondType>(tmpChar));
-      streamRead(ss, tmpChar, version);
+      streamReadPositiveChar(ss, tmpChar, version);
       bond->setBondDir(static_cast<Bond::BondDir>(tmpChar));
 
       if (version > 3000) {
-        streamRead(ss, tmpChar, version);
+        streamReadPositiveChar(ss, tmpChar, version);
         auto stereo = static_cast<Bond::BondStereo>(tmpChar);
         bond->setStereo(stereo);
         if (stereo != Bond::STEREONONE) {
           streamRead(ss, tmpChar, version);
           for (char i = 0; i < tmpChar; ++i) {
             streamRead(ss, tmpT, version);
             bond->getStereoAtoms().push_back(static_cast<int>(tmpT));
           }
         }
       }
     } else {
       if (flags & (0x1 << 3)) {
-        streamRead(ss, tmpChar, version);
+        streamReadPositiveChar(ss, tmpChar, version);
         bond->setBondType(static_cast<Bond::BondType>(tmpChar));
       } else {
         bond->setBondType(Bond::SINGLE);
       }
 
       if (flags & (0x1 << 2)) {
-        streamRead(ss, tmpChar, version);
+        streamReadPositiveChar(ss, tmpChar, version);
         bond->setBondDir(static_cast<Bond::BondDir>(tmpChar));
       } else {
         bond->setBondDir(Bond::NONE);
       }
 
       if (flags & (0x1 << 1)) {
-        streamRead(ss, tmpChar, version);
+        streamReadPositiveChar(ss, tmpChar, version);
         auto stereo = static_cast<Bond::BondStereo>(tmpChar);
         streamRead(ss, tmpChar, version);
         for (char i = 0; i < tmpChar; ++i) {
           streamRead(ss, tmpT, version);
           bond->getStereoAtoms().push_back(static_cast<int>(tmpT));
         }
         bond->setStereo(stereo);
       } else {
         bond->setStereo(Bond::STEREONONE);
       }
     }
   }
   if (version > 5000 && hasQuery) {
     Tags tag;
     if (bond) {
       Bond *tbond = bond;
       bond = new QueryBond(*bond);
       delete tbond;
     } else {
       bond = new QueryBond();
     }
 
     // we have a query:
     streamRead(ss, tag, version);
     if (tag != BEGINQUERY) {
       delete bond;
       throw MolPicklerException("Bad pickle format: BEGINQUERY tag not found.");
     }
     static_cast<QueryBond *>(bond)->setQuery(unpickleQuery(ss, bond, version));
     streamRead(ss, tag, version);
     if (tag != ENDQUERY) {
       delete bond;
       throw MolPicklerException("Bad pickle format: ENDQUERY tag not found.");
     }
   }
   if (bond) {
     bond->setBeginAtomIdx(begIdx);
     bond->setEndAtomIdx(endIdx);
     mol->addBond(bond, true);
   }
   return bond;
 }
 
 //--------------------------------------
 //
 //            Rings
 //
 //--------------------------------------
diff --git a/Code/GraphMol/MolPickler.h b/Code/GraphMol/MolPickler.h
index 6ae0bf22f..4055a7d0c 100644
--- a/Code/GraphMol/MolPickler.h
+++ b/Code/GraphMol/MolPickler.h
@@ -62,218 +62,220 @@ typedef enum {
 //! handles pickling (serializing) molecules
 class RDKIT_GRAPHMOL_EXPORT MolPickler {
  public:
   static const std::int32_t versionMajor;  //!< mark the pickle major version
   static const std::int32_t versionMinor;  //!< mark the pickle minor version
   static const std::int32_t versionPatch;  //!< mark the pickle patch version
   static const std::int32_t endianId;  //! mark the endian-ness of the pickle
 
   //! the pickle format is tagged using these tags:
   //! NOTE: if you add to this list, be sure to put new entries AT THE BOTTOM,
   // otherwise
   //! you will break old pickles.
   typedef enum {
     VERSION = 0,
     BEGINATOM,
     ATOM_INDEX,
     ATOM_NUMBER,
     ATOM_POS,
     ATOM_CHARGE,
     ATOM_NEXPLICIT,
     ATOM_CHIRALTAG,
     ATOM_MASS,
     ATOM_ISAROMATIC,
     ENDATOM,
     BEGINBOND,
     BOND_INDEX,
     BOND_BEGATOMIDX,
     BOND_ENDATOMIDX,
     BOND_TYPE,
     BOND_DIR,
     ENDBOND,
     BEGINPROPS,
     ENDPROPS,
     BEGINSSSR,
     ENDSSSR,
     ENDMOL,
     BEGINCONFS,
     ATOM_MAPNUMBER,
     BEGINQUERY,
     QUERY_VALUE,
     QUERY_ISNEGATED,
     QUERY_NUMCHILDREN,
     QUERY_BOOL,
     QUERY_AND,
     QUERY_OR,
     QUERY_XOR,
     QUERY_EQUALS,
     QUERY_GREATER,
     QUERY_GREATEREQUAL,
     QUERY_LESS,
     QUERY_LESSEQUAL,
     QUERY_RANGE,
     QUERY_SET,
     QUERY_NULL,
     QUERY_ATOMRING,
     QUERY_RECURSIVE,
     ENDQUERY,
     ATOM_DUMMYLABEL,
     BEGIN_ATOM_MONOMER,
     ATOM_PDB_RESIDUE_SERIALNUMBER,
     ATOM_PDB_RESIDUE_ALTLOC,
     ATOM_PDB_RESIDUE_RESIDUENAME,
     ATOM_PDB_RESIDUE_CHAINID,
     ATOM_PDB_RESIDUE_INSERTIONCODE,
     ATOM_PDB_RESIDUE_OCCUPANCY,
     ATOM_PDB_RESIDUE_TEMPFACTOR,
     ATOM_PDB_RESIDUE_ISHETEROATOM,
     ATOM_PDB_RESIDUE_SECONDARYSTRUCTURE,
     ATOM_PDB_RESIDUE_RESIDUENUMBER,
     ATOM_PDB_RESIDUE_SEGMENTNUMBER,
     END_ATOM_MONOMER,
     BEGINATOMPROPS,
     BEGINBONDPROPS,
     BEGINQUERYATOMDATA,
     BEGINSGROUP,
     BEGINSTEREOGROUP,
     BEGINCONFPROPS,
     BEGINCONFS_DOUBLE,
     QUERY_TYPELABEL,
+    // add new entries above here
+    INVALID_TAG = 255
   } Tags;
 
   static unsigned int getDefaultPickleProperties();
   static void setDefaultPickleProperties(unsigned int);
 
   static const CustomPropHandlerVec &getCustomPropHandlers();
   static void addCustomPropHandler(const CustomPropHandler &handler);
 
   //! pickles a molecule and sends the results to stream \c ss
   static void pickleMol(const ROMol *mol, std::ostream &ss);
   static void pickleMol(const ROMol *mol, std::ostream &ss,
                         unsigned int propertyFlags);
 
   static void pickleMol(const ROMol &mol, std::ostream &ss);
 
   static void pickleMol(const ROMol &mol, std::ostream &ss,
                         unsigned int propertyFlags) {
     MolPickler::pickleMol(&mol, ss, propertyFlags);
   };
 
   //! pickles a molecule and adds the results to string \c res
   static void pickleMol(const ROMol *mol, std::string &res);
   static void pickleMol(const ROMol *mol, std::string &res,
                         unsigned int propertyFlags);
   static void pickleMol(const ROMol &mol, std::string &res);
   static void pickleMol(const ROMol &mol, std::string &res,
                         unsigned int propertyFlags) {
     MolPickler::pickleMol(&mol, res, propertyFlags);
   };
 
   //! constructs a molecule from a pickle stored in a string
   static void molFromPickle(const std::string &pickle, ROMol *mol);
   static void molFromPickle(const std::string &pickle, ROMol &mol) {
     MolPickler::molFromPickle(pickle, &mol);
   };
 
   //! constructs a molecule from a pickle stored in a stream
   static void molFromPickle(std::istream &ss, ROMol *mol);
   static void molFromPickle(std::istream &ss, ROMol &mol) {
     MolPickler::molFromPickle(ss, &mol);
   };
 
  private:
   //! Pickle nonquery atom data
   static std::int32_t _pickleAtomData(std::ostream &tss, const Atom *atom);
   //! depickle nonquery atom data
   static void _unpickleAtomData(std::istream &tss, Atom *atom, int version);
 
   static void _pickleQueryAtomData(std::ostream &tss, const Atom *atom);
 
   //! do the actual work of pickling a molecule
   template <typename T>
   static void _pickle(const ROMol *mol, std::ostream &ss,
                       unsigned int propertyFlags);
 
   //! do the actual work of pickling an Atom
   template <typename T>
   static void _pickleAtom(std::ostream &ss, const Atom *atom);
 
   //! do the actual work of pickling a Bond
   template <typename T>
   static void _pickleBond(std::ostream &ss, const Bond *bond,
                           std::map<int, int> &atomIdxMap);
 
   //! do the actual work of pickling an SSSR structure
   template <typename T>
   static void _pickleSSSR(std::ostream &ss, const RingInfo *ringInfo,
                           std::map<int, int> &atomIdxMap);
 
   //! do the actual work of pickling a SubstanceGroup
   template <typename T>
   static void _pickleSubstanceGroup(std::ostream &ss,
                                     const SubstanceGroup &sgroup,
                                     std::map<int, int> &atomIdxMap,
                                     std::map<int, int> &bondIdxMap);
 
   //! do the actual work of pickling Stereo Group data
   template <typename T>
   static void _pickleStereo(std::ostream &ss,
                             const std::vector<StereoGroup> &groups,
                             std::map<int, int> &atomIdxMap);
 
   //! do the actual work of pickling a Conformer
   template <typename T, typename C>
   static void _pickleConformer(std::ostream &ss, const Conformer *conf);
 
   //! do the actual work of de-pickling a molecule
   template <typename T>
   static void _depickle(std::istream &ss, ROMol *mol, int version,
                         int numAtoms);
 
   //! extract atomic data from a pickle and add the resulting Atom to the
   // molecule
   template <typename T>
   static Atom *_addAtomFromPickle(std::istream &ss, ROMol *mol,
                                   RDGeom::Point3D &pos, int version,
                                   bool directMap = false);
 
   //! extract bond data from a pickle and add the resulting Bond to the molecule
   template <typename T>
   static Bond *_addBondFromPickle(std::istream &ss, ROMol *mol, int version,
                                   bool directMap = false);
 
   //! extract ring info from a pickle and add the resulting RingInfo to the
   // molecule
   template <typename T>
   static void _addRingInfoFromPickle(std::istream &ss, ROMol *mol, int version,
                                      bool directMap = false);
 
   //! extract a SubstanceGroup from a pickle
   template <typename T>
   static SubstanceGroup _getSubstanceGroupFromPickle(std::istream &ss,
                                                      ROMol *mol, int version);
 
   template <typename T>
   static void _depickleStereo(std::istream &ss, ROMol *mol, int version);
 
   //! extract a conformation from a pickle
   template <typename T, typename C>
   static Conformer *_conformerFromPickle(std::istream &ss, int version);
 
   //! pickle standard properties
   static void _pickleProperties(std::ostream &ss, const RDProps &props,
                                 unsigned int pickleFlags);
   //! unpickle standard properties
   static void _unpickleProperties(std::istream &ss, RDProps &props);
 
   //! backwards compatibility
   static void _pickleV1(const ROMol *mol, std::ostream &ss);
   //! backwards compatibility
   static void _depickleV1(std::istream &ss, ROMol *mol);
   //! backwards compatibility
   static void _addAtomFromPickleV1(std::istream &ss, ROMol *mol);
   //! backwards compatibility
   static void _addBondFromPickleV1(std::istream &ss, ROMol *mol);
 };
 };  // namespace RDKit
 
 #endif
diff --git a/Code/GraphMol/SmilesParse/SmilesParse.cpp b/Code/GraphMol/SmilesParse/SmilesParse.cpp
index 25bcb9c05..a23df3026 100644
--- a/Code/GraphMol/SmilesParse/SmilesParse.cpp
+++ b/Code/GraphMol/SmilesParse/SmilesParse.cpp
@@ -350,65 +350,65 @@ Bond *SmilesToBond(const std::string &smiles) {
 RWMol *SmilesToMol(const std::string &smiles,
                    const SmilesParserParams &params) {
   // Calling SmilesToMol in a multithreaded context is generally safe *unless*
   // the value of debugParse is different for different threads. The if
   // statement below avoids a TSAN warning in the case where multiple threads
   // all use the same value for debugParse.
   if (yysmiles_debug != params.debugParse) {
     yysmiles_debug = params.debugParse;
   }
 
   std::string lsmiles, name, cxPart;
   preprocessSmiles(smiles, params, lsmiles, name, cxPart);
   // strip any leading/trailing whitespace:
   // boost::trim_if(smi,boost::is_any_of(" \t\r\n"));
   RWMol *res = nullptr;
   res = toMol(lsmiles, smiles_parse, lsmiles);
 
   if (res && params.allowCXSMILES && !cxPart.empty()) {
     std::string::const_iterator pos = cxPart.cbegin();
     try {
       SmilesParseOps::parseCXExtensions(*res, cxPart, pos);
-    } catch (const SmilesParseException &) {
+    } catch (...) {
       if (params.strictCXSMILES) {
         delete res;
         throw;
       }
     }
     res->setProp("_CXSMILES_Data", std::string(cxPart.cbegin(), pos));
     if (params.parseName && pos != cxPart.cend()) {
       std::string nmpart(pos, cxPart.cend());
       name = boost::trim_copy(nmpart);
     }
   }
   if (res && (params.sanitize || params.removeHs)) {
     try {
       if (params.removeHs) {
         bool implicitOnly = false, updateExplicitCount = true;
         MolOps::removeHs(*res, implicitOnly, updateExplicitCount,
                          params.sanitize);
       } else if (params.sanitize) {
         MolOps::sanitizeMol(*res);
       }
     } catch (...) {
       delete res;
       throw;
     }
     // figure out stereochemistry:
     bool cleanIt = true, force = true, flagPossible = true;
     MolOps::assignStereochemistry(*res, cleanIt, force, flagPossible);
   }
   if (res && res->hasProp(common_properties::_NeedsQueryScan)) {
     res->clearProp(common_properties::_NeedsQueryScan);
     if (!params.sanitize) {
       // we know that this can be the ring bond query, do ring perception if we
       // need to:
       MolOps::fastFindRings(*res);
     }
     QueryOps::completeMolQueries(res, 0xDEADBEEF);
   }
 
   if (res && !name.empty()) {
     res->setProp(common_properties::_Name, name);
   }
   return res;
 };
diff --git a/Code/GraphMol/SmilesParse/smarts.tab.cpp.cmake b/Code/GraphMol/SmilesParse/smarts.tab.cpp.cmake
index 2c84c835b..6d00ca0c9 100644
--- a/Code/GraphMol/SmilesParse/smarts.tab.cpp.cmake
+++ b/Code/GraphMol/SmilesParse/smarts.tab.cpp.cmake
@@ -1,91 +1,94 @@
-/* A Bison parser, made by GNU Bison 3.0.4.  */
+/* A Bison parser, made by GNU Bison 3.5.1.  */
 
 /* Bison implementation for Yacc-like parsers in C
 
-   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.
+   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
+   Inc.
 
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
    under terms of your choice, so long as that work isn't itself a
    parser generator using the skeleton or a modified version thereof
    as a parser skeleton.  Alternatively, if you modify or redistribute
    the parser skeleton itself, you may (at your option) remove this
    special exception, which will cause the skeleton and the resulting
    Bison output files to be licensed under the GNU General Public
    License without this special exception.
 
    This special exception was added by the Free Software Foundation in
    version 2.2 of Bison.  */
 
 /* C LALR(1) parser skeleton written by Richard Stallman, by
    simplifying the original so-called "semantic" parser.  */
 
 /* All symbols defined below should begin with yy or YY, to avoid
    infringing on user name space.  This should be done even for local
    variables, as they might otherwise be expanded by user macros.
    There are some unavoidable exceptions within include files to
    define necessary library symbols; they are noted "INFRINGES ON
    USER NAME SPACE" below.  */
 
+/* Undocumented macros, especially those whose name start with YY_,
+   are private implementation details.  Do not rely on them.  */
+
 /* Identify Bison output.  */
 #define YYBISON 1
 
 /* Bison version.  */
-#define YYBISON_VERSION "3.0.4"
+#define YYBISON_VERSION "3.5.1"
 
 /* Skeleton name.  */
 #define YYSKELETON_NAME "yacc.c"
 
 /* Pure parsers.  */
 #define YYPURE 2
 
 /* Push parsers.  */
 #define YYPUSH 0
 
 /* Pull parsers.  */
 #define YYPULL 1
 
 
 /* Substitute the variable and function names.  */
 #define yyparse         yysmarts_parse
 #define yylex           yysmarts_lex
 #define yyerror         yysmarts_error
 #define yydebug         yysmarts_debug
 #define yynerrs         yysmarts_nerrs
 
-
-/* Copy the first part of user declarations.  */
-#line 1 "smarts.yy" /* yacc.c:339  */
+/* First part of user prologue.  */
+#line 1 "smarts.yy"
 
 
   // $Id$
   //
   //  Copyright (C) 2003-2018 Greg Landrum and Rational Discovery LLC
   //
   //   @@ All Rights Reserved  @@
   //
 #include <cstring>
 #include <iostream>
 #include <vector>
 
 #include <GraphMol/RDKitBase.h>
 #include <GraphMol/RDKitQueries.h>
 #include <GraphMol/SmilesParse/SmilesParse.h>
 #include <GraphMol/SmilesParse/SmilesParseOps.h>
 #include <RDGeneral/RDLog.h>
 
 #define YYDEBUG 1
 #include "smarts.tab.hpp"
@@ -108,114 +111,126 @@ void
 yysmarts_error( const char *input,
                 std::vector<RDKit::RWMol *> *ms,
                 RDKit::Atom* &lastAtom,
                 RDKit::Bond* &lastBond,
 		void *scanner,int start_token, const char * msg )
 {
   RDUNUSED_PARAM(input);
   RDUNUSED_PARAM(lastAtom);
   RDUNUSED_PARAM(lastBond);
   RDUNUSED_PARAM(scanner);
   RDUNUSED_PARAM(start_token);
   yyErrorCleanup(ms);
   BOOST_LOG(rdErrorLog) << "SMARTS Parse Error: " << msg << " while parsing: " << input << std::endl;
 }
 
-#line 123 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:339  */
+#line 127 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
 
+# ifndef YY_CAST
+#  ifdef __cplusplus
+#   define YY_CAST(Type, Val) static_cast<Type> (Val)
+#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
+#  else
+#   define YY_CAST(Type, Val) ((Type) (Val))
+#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
+#  endif
+# endif
 # ifndef YY_NULLPTR
-#  if defined __cplusplus && 201103L <= __cplusplus
-#   define YY_NULLPTR nullptr
+#  if defined __cplusplus
+#   if 201103L <= __cplusplus
+#    define YY_NULLPTR nullptr
+#   else
+#    define YY_NULLPTR 0
+#   endif
 #  else
-#   define YY_NULLPTR 0
+#   define YY_NULLPTR ((void*)0)
 #  endif
 # endif
 
 /* Enabling verbose error messages.  */
 #ifdef YYERROR_VERBOSE
 # undef YYERROR_VERBOSE
 # define YYERROR_VERBOSE 1
 #else
 # define YYERROR_VERBOSE 0
 #endif
 
-/* In a future release of Bison, this section will be replaced
-   by #include "smarts.tab.hpp".  */
+/* Use api.header.include to #include this header
+   instead of duplicating it here.  */
 #ifndef YY_YYSMARTS_SCRATCH_RDKIT_GIT_CODE_GRAPHMOL_SMILESPARSE_SMARTS_TAB_HPP_INCLUDED
 # define YY_YYSMARTS_SCRATCH_RDKIT_GIT_CODE_GRAPHMOL_SMILESPARSE_SMARTS_TAB_HPP_INCLUDED
 /* Debug traces.  */
 #ifndef YYDEBUG
 # define YYDEBUG 0
 #endif
 #if YYDEBUG
 extern int yysmarts_debug;
 #endif
 
 /* Token type.  */
 #ifndef YYTOKENTYPE
 # define YYTOKENTYPE
   enum yytokentype
   {
     START_MOL = 258,
     START_ATOM = 259,
     START_BOND = 260,
     AROMATIC_ATOM_TOKEN = 261,
     ORGANIC_ATOM_TOKEN = 262,
     ATOM_TOKEN = 263,
     SIMPLE_ATOM_QUERY_TOKEN = 264,
     COMPLEX_ATOM_QUERY_TOKEN = 265,
     RINGSIZE_ATOM_QUERY_TOKEN = 266,
     RINGBOND_ATOM_QUERY_TOKEN = 267,
     IMPLICIT_H_ATOM_QUERY_TOKEN = 268,
     HYB_TOKEN = 269,
     HETERONEIGHBOR_ATOM_QUERY_TOKEN = 270,
     ALIPHATIC = 271,
     ALIPHATICHETERONEIGHBOR_ATOM_QUERY_TOKEN = 272,
     ZERO_TOKEN = 273,
     NONZERO_DIGIT_TOKEN = 274,
     GROUP_OPEN_TOKEN = 275,
     GROUP_CLOSE_TOKEN = 276,
     SEPARATOR_TOKEN = 277,
     RANGE_OPEN_TOKEN = 278,
     RANGE_CLOSE_TOKEN = 279,
     HASH_TOKEN = 280,
     MINUS_TOKEN = 281,
     PLUS_TOKEN = 282,
     CHIRAL_MARKER_TOKEN = 283,
     CHI_CLASS_TOKEN = 284,
     CHI_CLASS_OH_TOKEN = 285,
     H_TOKEN = 286,
     AT_TOKEN = 287,
     PERCENT_TOKEN = 288,
     ATOM_OPEN_TOKEN = 289,
     ATOM_CLOSE_TOKEN = 290,
     NOT_TOKEN = 291,
     AND_TOKEN = 292,
     OR_TOKEN = 293,
     SEMI_TOKEN = 294,
     BEGIN_RECURSE = 295,
     END_RECURSE = 296,
     COLON_TOKEN = 297,
     UNDERSCORE_TOKEN = 298,
     BOND_TOKEN = 299,
     EOS_TOKEN = 300
   };
 #endif
 
 /* Value type.  */
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
-
 union YYSTYPE
 {
-#line 67 "smarts.yy" /* yacc.c:355  */
+#line 68 "smarts.yy"
 
   int                      moli;
   RDKit::QueryAtom * atom;
   RDKit::QueryBond * bond;
   int                      ival;
 
-#line 216 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:355  */
-};
+#line 232 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
 
+};
 typedef union YYSTYPE YYSTYPE;
 # define YYSTYPE_IS_TRIVIAL 1
 # define YYSTYPE_IS_DECLARED 1
@@ -225,180 +240,240 @@ typedef union YYSTYPE YYSTYPE;
 
 int yysmarts_parse (const char *input, std::vector<RDKit::RWMol *> *molList, RDKit::Atom* &lastAtom, RDKit::Bond* &lastBond, void *scanner, int& start_token);
 /* "%code provides" blocks.  */
-#line 62 "smarts.yy" /* yacc.c:355  */
+#line 63 "smarts.yy"
 
 #define YY_DECL int yylex \
                (YYSTYPE * yylval_param , yyscan_t yyscanner, int& start_token)
 
-#line 233 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:355  */
+#line 249 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
 
 #endif /* !YY_YYSMARTS_SCRATCH_RDKIT_GIT_CODE_GRAPHMOL_SMILESPARSE_SMARTS_TAB_HPP_INCLUDED  */
 
-/* Copy the second part of user declarations.  */
 
-#line 239 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:358  */
 
 #ifdef short
 # undef short
 #endif
 
-#ifdef YYTYPE_UINT8
-typedef YYTYPE_UINT8 yytype_uint8;
-#else
-typedef unsigned char yytype_uint8;
+/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
+   <limits.h> and (if available) <stdint.h> are included
+   so that the code can choose integer types of a good width.  */
+
+#ifndef __PTRDIFF_MAX__
+# include <limits.h> /* INFRINGES ON USER NAME SPACE */
+# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
+#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
+#  define YY_STDINT_H
+# endif
 #endif
 
-#ifdef YYTYPE_INT8
-typedef YYTYPE_INT8 yytype_int8;
+/* Narrow types that promote to a signed type and that can represent a
+   signed or unsigned integer of at least N bits.  In tables they can
+   save space and decrease cache pressure.  Promoting to a signed type
+   helps avoid bugs in integer arithmetic.  */
+
+#ifdef __INT_LEAST8_MAX__
+typedef __INT_LEAST8_TYPE__ yytype_int8;
+#elif defined YY_STDINT_H
+typedef int_least8_t yytype_int8;
 #else
 typedef signed char yytype_int8;
 #endif
 
-#ifdef YYTYPE_UINT16
-typedef YYTYPE_UINT16 yytype_uint16;
+#ifdef __INT_LEAST16_MAX__
+typedef __INT_LEAST16_TYPE__ yytype_int16;
+#elif defined YY_STDINT_H
+typedef int_least16_t yytype_int16;
+#else
+typedef short yytype_int16;
+#endif
+
+#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
+typedef __UINT_LEAST8_TYPE__ yytype_uint8;
+#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
+       && UINT_LEAST8_MAX <= INT_MAX)
+typedef uint_least8_t yytype_uint8;
+#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
+typedef unsigned char yytype_uint8;
 #else
-typedef unsigned short int yytype_uint16;
+typedef short yytype_uint8;
 #endif
 
-#ifdef YYTYPE_INT16
-typedef YYTYPE_INT16 yytype_int16;
+#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
+typedef __UINT_LEAST16_TYPE__ yytype_uint16;
+#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
+       && UINT_LEAST16_MAX <= INT_MAX)
+typedef uint_least16_t yytype_uint16;
+#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
+typedef unsigned short yytype_uint16;
 #else
-typedef short int yytype_int16;
+typedef int yytype_uint16;
+#endif
+
+#ifndef YYPTRDIFF_T
+# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
+#  define YYPTRDIFF_T __PTRDIFF_TYPE__
+#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
+# elif defined PTRDIFF_MAX
+#  ifndef ptrdiff_t
+#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  endif
+#  define YYPTRDIFF_T ptrdiff_t
+#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
+# else
+#  define YYPTRDIFF_T long
+#  define YYPTRDIFF_MAXIMUM LONG_MAX
+# endif
 #endif
 
 #ifndef YYSIZE_T
 # ifdef __SIZE_TYPE__
 #  define YYSIZE_T __SIZE_TYPE__
 # elif defined size_t
 #  define YYSIZE_T size_t
-# elif ! defined YYSIZE_T
-#  include <cstddef> /* INFRINGES ON USER NAME SPACE */
+# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
+#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
 #  define YYSIZE_T size_t
 # else
-#  define YYSIZE_T unsigned int
+#  define YYSIZE_T unsigned
 # endif
 #endif
 
-#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)
+#define YYSIZE_MAXIMUM                                  \
+  YY_CAST (YYPTRDIFF_T,                                 \
+           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
+            ? YYPTRDIFF_MAXIMUM                         \
+            : YY_CAST (YYSIZE_T, -1)))
+
+#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))
+
+/* Stored state numbers (used for stacks). */
+typedef yytype_uint8 yy_state_t;
+
+/* State numbers in computations.  */
+typedef int yy_state_fast_t;
 
 #ifndef YY_
 # if defined YYENABLE_NLS && YYENABLE_NLS
 #  if ENABLE_NLS
 #   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
 #   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
 #  endif
 # endif
 # ifndef YY_
 #  define YY_(Msgid) Msgid
 # endif
 #endif
 
-#ifndef YY_ATTRIBUTE
-# if (defined __GNUC__                                               \
-      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
-     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
-#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
+#ifndef YY_ATTRIBUTE_PURE
+# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
+#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
 # else
-#  define YY_ATTRIBUTE(Spec) /* empty */
+#  define YY_ATTRIBUTE_PURE
 # endif
 #endif
 
-#ifndef YY_ATTRIBUTE_PURE
-# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
-#endif
-
 #ifndef YY_ATTRIBUTE_UNUSED
-# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
-#endif
-
-#if !defined _Noreturn \
-     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
-# if defined _MSC_VER && 1200 <= _MSC_VER
-#  define _Noreturn __declspec (noreturn)
+# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
+#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
 # else
-#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
+#  define YY_ATTRIBUTE_UNUSED
 # endif
 #endif
 
 /* Suppress unused-variable warnings by "using" E.  */
 #if ! defined lint || defined __GNUC__
 # define YYUSE(E) ((void) (E))
 #else
 # define YYUSE(E) /* empty */
 #endif
 
-#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
+#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
 /* Suppress an incorrect diagnostic about yylval being uninitialized.  */
-# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
-    _Pragma ("GCC diagnostic push") \
-    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
+    _Pragma ("GCC diagnostic push")                                     \
+    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
     _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
-# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
     _Pragma ("GCC diagnostic pop")
 #else
 # define YY_INITIAL_VALUE(Value) Value
 #endif
 #ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
 # define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
 # define YY_IGNORE_MAYBE_UNINITIALIZED_END
 #endif
 #ifndef YY_INITIAL_VALUE
 # define YY_INITIAL_VALUE(Value) /* Nothing. */
 #endif
 
+#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
+# define YY_IGNORE_USELESS_CAST_BEGIN                          \
+    _Pragma ("GCC diagnostic push")                            \
+    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
+# define YY_IGNORE_USELESS_CAST_END            \
+    _Pragma ("GCC diagnostic pop")
+#endif
+#ifndef YY_IGNORE_USELESS_CAST_BEGIN
+# define YY_IGNORE_USELESS_CAST_BEGIN
+# define YY_IGNORE_USELESS_CAST_END
+#endif
+
+
+#define YY_ASSERT(E) ((void) (0 && (E)))
 
 #if ! defined yyoverflow || YYERROR_VERBOSE
 
 /* The parser invokes alloca or malloc; define the necessary symbols.  */
 
 # ifdef YYSTACK_USE_ALLOCA
 #  if YYSTACK_USE_ALLOCA
 #   ifdef __GNUC__
 #    define YYSTACK_ALLOC __builtin_alloca
 #   elif defined __BUILTIN_VA_ARG_INCR
 #    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
 #   elif defined _AIX
 #    define YYSTACK_ALLOC __alloca
 #   elif defined _MSC_VER
 #    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
 #    define alloca _alloca
 #   else
 #    define YYSTACK_ALLOC alloca
 #    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
-#     include <cstdlib> /* INFRINGES ON USER NAME SPACE */
+#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
       /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
 #     ifndef EXIT_SUCCESS
 #      define EXIT_SUCCESS 0
 #     endif
 #    endif
 #   endif
 #  endif
 # endif
 
 # ifdef YYSTACK_ALLOC
    /* Pacify GCC's 'empty if-body' warning.  */
 #  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
 #  ifndef YYSTACK_ALLOC_MAXIMUM
     /* The OS might guarantee only one guard page at the bottom of the stack,
        and a page size can be as small as 4096 bytes.  So we cannot safely
        invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
        to allow for a few compiler-allocated temporary stack slots.  */
 #   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
 #  endif
 # else
 #  define YYSTACK_ALLOC YYMALLOC
 #  define YYSTACK_FREE YYFREE
 #  ifndef YYSTACK_ALLOC_MAXIMUM
 #   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
 #  endif
 #  if (defined __cplusplus && ! defined EXIT_SUCCESS \
        && ! ((defined YYMALLOC || defined malloc) \
              && (defined YYFREE || defined free)))
-#   include <cstdlib> /* INFRINGES ON USER NAME SPACE */
+#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
 #   ifndef EXIT_SUCCESS
 #    define EXIT_SUCCESS 0
 #   endif
 #  endif
 #  ifndef YYMALLOC
 #   define YYMALLOC malloc
 #   if ! defined malloc && ! defined EXIT_SUCCESS
@@ -422,137 +497,138 @@ void free (void *); /* INFRINGES ON USER NAME SPACE */
 /* A type that is properly aligned for any stack member.  */
 union yyalloc
 {
-  yytype_int16 yyss_alloc;
+  yy_state_t yyss_alloc;
   YYSTYPE yyvs_alloc;
 };
 
 /* The size of the maximum gap between one aligned stack and the next.  */
-# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
+# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)
 
 /* The size of an array large to enough to hold all stacks, each with
    N elements.  */
 # define YYSTACK_BYTES(N) \
-     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
+     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE)) \
       + YYSTACK_GAP_MAXIMUM)
 
 # define YYCOPY_NEEDED 1
 
 /* Relocate STACK from its old location to the new one.  The
    local variables YYSIZE and YYSTACKSIZE give the old and new number of
    elements in the stack, and YYPTR gives the new location of the
    stack.  Advance YYPTR to a properly aligned location for the next
    stack.  */
 # define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
     do                                                                  \
       {                                                                 \
-        YYSIZE_T yynewbytes;                                            \
+        YYPTRDIFF_T yynewbytes;                                         \
         YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
         Stack = &yyptr->Stack_alloc;                                    \
-        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
-        yyptr += yynewbytes / sizeof (*yyptr);                          \
+        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
+        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
       }                                                                 \
     while (0)
 
 #endif
 
 #if defined YYCOPY_NEEDED && YYCOPY_NEEDED
 /* Copy COUNT objects from SRC to DST.  The source and destination do
    not overlap.  */
 # ifndef YYCOPY
 #  if defined __GNUC__ && 1 < __GNUC__
 #   define YYCOPY(Dst, Src, Count) \
-      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
+      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
 #  else
 #   define YYCOPY(Dst, Src, Count)              \
       do                                        \
         {                                       \
-          YYSIZE_T yyi;                         \
+          YYPTRDIFF_T yyi;                      \
           for (yyi = 0; yyi < (Count); yyi++)   \
             (Dst)[yyi] = (Src)[yyi];            \
         }                                       \
       while (0)
 #  endif
 # endif
 #endif /* !YYCOPY_NEEDED */
 
 /* YYFINAL -- State number of the termination state.  */
 #define YYFINAL  55
 /* YYLAST -- Last index in YYTABLE.  */
 #define YYLAST   631
 
 /* YYNTOKENS -- Number of terminals.  */
 #define YYNTOKENS  46
 /* YYNNTS -- Number of nonterminals.  */
 #define YYNNTS  21
 /* YYNRULES -- Number of rules.  */
 #define YYNRULES  118
 /* YYNSTATES -- Number of states.  */
 #define YYNSTATES  175
 
-/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
-   by yylex, with out-of-bounds checking.  */
 #define YYUNDEFTOK  2
 #define YYMAXUTOK   300
 
+
+/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
+   as returned by yylex, with out-of-bounds checking.  */
 #define YYTRANSLATE(YYX)                                                \
-  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
+  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
 
 /* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
-   as returned by yylex, without out-of-bounds checking.  */
-static const yytype_uint8 yytranslate[] =
+   as returned by yylex.  */
+static const yytype_int8 yytranslate[] =
 {
        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
        5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
       15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
       25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
       35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
       45
 };
 
 #if YYDEBUG
   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
-static const yytype_uint16 yyrline[] =
+static const yytype_int16 yyrline[] =
 {
-       0,   111,   111,   114,   118,   121,   124,   128,   132,   135,
-     140,   143,   151,   152,   153,   154,   162,   170,   195,   215,
-     220,   251,   271,   284,   285,   296,   297,   298,   302,   325,
-     329,   334,   340,   349,   355,   363,   371,   384,   390,   397,
-     403,   426,   429,   435,   436,   440,   457,   481,   482,   487,
-     488,   493,   494,   499,   500,   501,   502,   503,   504,   505,
-     508,   511,   514,   517,   520,   523,   529,   535,   542,   550,
-     558,   564,   570,   576,   582,   588,   589,   596,   597,   600,
-     603,   606,   609,   612,   617,   625,   637,   642,   647,   651,
-     655,   659,   662,   663,   670,   671,   677,   683,   689,   694,
-     701,   702,   703,   704,   705,   706,   710,   711,   712,   713,
-     714,   715,   716,   721,   722,   726,   727,   730,   731
+       0,   112,   112,   115,   119,   122,   125,   129,   133,   136,
+     141,   144,   152,   153,   154,   155,   163,   171,   196,   216,
+     221,   252,   272,   285,   286,   297,   298,   299,   303,   326,
+     330,   335,   341,   350,   356,   364,   372,   385,   391,   398,
+     404,   427,   430,   436,   437,   441,   458,   482,   483,   488,
+     489,   494,   495,   500,   501,   502,   503,   504,   505,   506,
+     509,   512,   515,   518,   521,   524,   530,   536,   543,   551,
+     559,   565,   571,   577,   583,   589,   590,   597,   598,   601,
+     604,   607,   610,   613,   618,   626,   638,   643,   648,   652,
+     656,   660,   663,   664,   671,   672,   678,   684,   690,   695,
+     702,   703,   704,   705,   706,   707,   711,   712,   713,   714,
+     715,   716,   717,   722,   723,   727,   728,   737,   738
 };
 #endif
 
 #if YYDEBUG || YYERROR_VERBOSE || 0
 /* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
    First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
@@ -582,25 +658,25 @@ static const char *const yytname[] =
 # ifdef YYPRINT
 /* YYTOKNUM[NUM] -- (External) token number corresponding to the
    (internal) symbol number NUM (which must be that of a token).  */
-static const yytype_uint16 yytoknum[] =
+static const yytype_int16 yytoknum[] =
 {
        0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
      285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
      295,   296,   297,   298,   299,   300
 };
 # endif
 
-#define YYPACT_NINF -57
+#define YYPACT_NINF (-57)
 
-#define yypact_value_is_default(Yystate) \
-  (!!((Yystate) == (-57)))
+#define yypact_value_is_default(Yyn) \
+  ((Yyn) == YYPACT_NINF)
 
-#define YYTABLE_NINF -85
+#define YYTABLE_NINF (-85)
 
-#define yytable_value_is_error(Yytable_value) \
+#define yytable_value_is_error(Yyn) \
   0
 
   /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
      STATE-NUM.  */
@@ -629,26 +705,26 @@ static const yytype_int16 yypact[] =
   /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
      Performed when YYTABLE does not specify something else to do.  Zero
      means the default is an error.  */
-static const yytype_uint8 yydefact[] =
+static const yytype_int8 yydefact[] =
 {
        0,     0,     0,     5,     8,     0,    11,    86,    85,    87,
        0,     2,    16,    26,    25,    49,    53,    56,    57,    58,
       75,    54,    55,   113,   115,     0,   105,   102,    71,    74,
        0,     0,     0,     0,     0,     4,     0,    15,    41,    43,
       44,     0,    47,    72,    76,   114,    96,    95,    98,     0,
       97,    94,     7,    91,    92,     1,     0,    10,    71,     0,
       47,    76,   118,   117,     0,     0,     0,    22,    17,     0,
       20,   106,    59,    62,    63,    64,    60,    61,    51,   103,
      104,   100,   101,    70,    73,     0,    12,    15,    13,    42,
        0,    14,     3,     0,     0,     0,    40,     0,    50,     0,
       68,    48,   116,    99,     0,     0,     0,     6,    93,     9,
      105,   102,    29,     0,     0,    27,     0,    68,     0,     0,
       19,     0,     0,    18,    21,    45,    37,    38,    39,     0,
        0,    52,    69,    88,    89,    90,     0,    33,     0,     0,
       31,     0,     0,    23,     0,   107,     0,     0,     0,     0,
       30,     0,    28,     0,    35,     0,    24,   108,     0,    46,
       65,    66,     0,    34,    32,     0,   109,     0,    67,    36,
      110,     0,   111,     0,   112
 };
 
   /* YYPGOTO[NTERM-NUM].  */
@@ -808,104 +884,104 @@ static const yytype_int16 yycheck[] =
 
   /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
      symbol of state STATE-NUM.  */
-static const yytype_uint8 yystos[] =
+static const yytype_int8 yystos[] =
 {
        0,     1,     3,     4,     5,    47,    45,     6,     7,     9,
       34,    49,    51,    52,    58,     8,    10,    11,    12,    13,
       14,    15,    17,    18,    19,    25,    26,    27,    31,    32,
       34,    35,    36,    40,    42,    48,    51,    53,    54,    55,
       56,    57,    58,    62,    64,    65,    25,    26,    32,    36,
       42,    44,    59,    60,    61,     0,     1,    45,    31,    53,
       58,    64,    18,    19,    20,    22,    33,    50,    51,    59,
       63,    66,    64,    64,    64,    64,    64,    64,    64,    26,
       64,    27,    64,    64,    32,    34,    48,    53,    48,    54,
       49,    48,    45,    37,    38,    39,    54,    23,     8,    25,
       31,    58,    66,    61,    37,    38,    39,    45,    61,    45,
       26,    27,    35,    42,    62,    35,    42,    31,    49,    59,
       51,    19,    20,    51,    63,    41,    53,    53,    53,    26,
       64,    64,    64,    59,    59,    59,    64,    35,    42,    64,
       35,    42,    62,    21,    49,    66,    66,    43,    64,    26,
       35,    64,    35,    64,    35,    42,    21,    21,    66,    65,
       24,    24,    64,    35,    35,    64,    21,    66,    24,    35,
       21,    66,    21,    66,    21
 };
 
   /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
-static const yytype_uint8 yyr1[] =
+static const yytype_int8 yyr1[] =
 {
        0,    46,    47,    47,    47,    47,    47,    47,    47,    47,
       47,    47,    48,    48,    48,    48,    49,    49,    49,    49,
       49,    49,    49,    50,    50,    51,    51,    51,    51,    52,
       52,    52,    52,    52,    52,    52,    52,    53,    53,    53,
       53,    53,    54,    54,    54,    55,    55,    56,    56,    56,
       56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
       56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
       56,    56,    56,    56,    56,    56,    56,    57,    57,    57,
       57,    57,    57,    57,    57,    58,    58,    58,    59,    59,
       59,    59,    60,    60,    61,    61,    61,    61,    61,    61,
       62,    62,    62,    62,    62,    62,    63,    63,    63,    63,
       63,    63,    63,    64,    64,    65,    65,    66,    66
 };
 
   /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
-static const yytype_uint8 yyr2[] =
+static const yytype_int8 yyr2[] =
 {
        0,     2,     2,     3,     2,     1,     3,     2,     1,     3,
        2,     2,     2,     2,     2,     1,     1,     2,     3,     3,
        2,     3,     2,     3,     4,     1,     1,     3,     5,     3,
        5,     4,     6,     4,     6,     5,     7,     3,     3,     3,
        2,     1,     2,     1,     1,     3,     5,     1,     2,     1,
        2,     2,     3,     1,     1,     1,     1,     1,     1,     2,
        2,     2,     2,     2,     2,     5,     5,     6,     2,     3,
        2,     1,     1,     2,     1,     1,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
        3,     1,     1,     2,     1,     1,     1,     1,     1,     2,
        2,     2,     1,     2,     2,     1,     1,     3,     4,     5,
        6,     7,     8,     1,     1,     1,     2,     1,     1
 };
 
 
 #define yyerrok         (yyerrstatus = 0)
 #define yyclearin       (yychar = YYEMPTY)
 #define YYEMPTY         (-2)
 #define YYEOF           0
 
 #define YYACCEPT        goto yyacceptlab
 #define YYABORT         goto yyabortlab
 #define YYERROR         goto yyerrorlab
 
 
 #define YYRECOVERING()  (!!yyerrstatus)
 
-#define YYBACKUP(Token, Value)                                  \
-do                                                              \
-  if (yychar == YYEMPTY)                                        \
-    {                                                           \
-      yychar = (Token);                                         \
-      yylval = (Value);                                         \
-      YYPOPSTACK (yylen);                                       \
-      yystate = *yyssp;                                         \
-      goto yybackup;                                            \
-    }                                                           \
-  else                                                          \
-    {                                                           \
-      yyerror (input, molList, lastAtom, lastBond, scanner, start_token, YY_("syntax error: cannot back up")); \
-      YYERROR;                                                  \
-    }                                                           \
-while (0)
+#define YYBACKUP(Token, Value)                                    \
+  do                                                              \
+    if (yychar == YYEMPTY)                                        \
+      {                                                           \
+        yychar = (Token);                                         \
+        yylval = (Value);                                         \
+        YYPOPSTACK (yylen);                                       \
+        yystate = *yyssp;                                         \
+        goto yybackup;                                            \
+      }                                                           \
+    else                                                          \
+      {                                                           \
+        yyerror (input, molList, lastAtom, lastBond, scanner, start_token, YY_("syntax error: cannot back up")); \
+        YYERROR;                                                  \
+      }                                                           \
+  while (0)
 
 /* Error token number */
 #define YYTERROR        1
 #define YYERRCODE       256
 
 
 
 /* Enable debugging if requested.  */
 #if YYDEBUG
 
 # ifndef YYFPRINTF
-#  include <cstdio> /* INFRINGES ON USER NAME SPACE */
+#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
 #  define YYFPRINTF fprintf
 # endif
 
 # define YYDPRINTF(Args)                        \
@@ -923,69 +999,71 @@ do {                                            \
 # define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
 do {                                                                      \
   if (yydebug)                                                            \
     {                                                                     \
       YYFPRINTF (stderr, "%s ", Title);                                   \
       yy_symbol_print (stderr,                                            \
                   Type, Value, input, molList, lastAtom, lastBond, scanner, start_token); \
       YYFPRINTF (stderr, "\n");                                           \
     }                                                                     \
 } while (0)
 
 
-/*----------------------------------------.
-| Print this symbol's value on YYOUTPUT.  |
-`----------------------------------------*/
+/*-----------------------------------.
+| Print this symbol's value on YYO.  |
+`-----------------------------------*/
 
 static void
-yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, const char *input, std::vector<RDKit::RWMol *> *molList, RDKit::Atom* &lastAtom, RDKit::Bond* &lastBond, void *scanner, int& start_token)
+yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, const char *input, std::vector<RDKit::RWMol *> *molList, RDKit::Atom* &lastAtom, RDKit::Bond* &lastBond, void *scanner, int& start_token)
 {
-  FILE *yyo = yyoutput;
-  YYUSE (yyo);
+  FILE *yyoutput = yyo;
+  YYUSE (yyoutput);
   YYUSE (input);
   YYUSE (molList);
   YYUSE (lastAtom);
   YYUSE (lastBond);
   YYUSE (scanner);
   YYUSE (start_token);
   if (!yyvaluep)
     return;
 # ifdef YYPRINT
   if (yytype < YYNTOKENS)
-    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
+    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
 # endif
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   YYUSE (yytype);
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
 }
 
 
-/*--------------------------------.
-| Print this symbol on YYOUTPUT.  |
-`--------------------------------*/
+/*---------------------------.
+| Print this symbol on YYO.  |
+`---------------------------*/
 
 static void
-yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, const char *input, std::vector<RDKit::RWMol *> *molList, RDKit::Atom* &lastAtom, RDKit::Bond* &lastBond, void *scanner, int& start_token)
+yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep, const char *input, std::vector<RDKit::RWMol *> *molList, RDKit::Atom* &lastAtom, RDKit::Bond* &lastBond, void *scanner, int& start_token)
 {
-  YYFPRINTF (yyoutput, "%s %s (",
+  YYFPRINTF (yyo, "%s %s (",
              yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);
 
-  yy_symbol_value_print (yyoutput, yytype, yyvaluep, input, molList, lastAtom, lastBond, scanner, start_token);
-  YYFPRINTF (yyoutput, ")");
+  yy_symbol_value_print (yyo, yytype, yyvaluep, input, molList, lastAtom, lastBond, scanner, start_token);
+  YYFPRINTF (yyo, ")");
 }
 
 /*------------------------------------------------------------------.
 | yy_stack_print -- Print the state stack from its BOTTOM up to its |
 | TOP (included).                                                   |
 `------------------------------------------------------------------*/
 
 static void
-yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
+yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
 {
   YYFPRINTF (stderr, "Stack now");
   for (; yybottom <= yytop; yybottom++)
     {
       int yybot = *yybottom;
       YYFPRINTF (stderr, " %d", yybot);
     }
   YYFPRINTF (stderr, "\n");
 }
 
 # define YY_STACK_PRINT(Bottom, Top)                            \
@@ -1000,23 +1078,23 @@ do {                                                            \
 `------------------------------------------------*/
 
 static void
-yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, const char *input, std::vector<RDKit::RWMol *> *molList, RDKit::Atom* &lastAtom, RDKit::Bond* &lastBond, void *scanner, int& start_token)
+yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, int yyrule, const char *input, std::vector<RDKit::RWMol *> *molList, RDKit::Atom* &lastAtom, RDKit::Bond* &lastBond, void *scanner, int& start_token)
 {
-  unsigned long int yylno = yyrline[yyrule];
+  int yylno = yyrline[yyrule];
   int yynrhs = yyr2[yyrule];
   int yyi;
-  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
+  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
              yyrule - 1, yylno);
   /* The symbols being reduced.  */
   for (yyi = 0; yyi < yynrhs; yyi++)
     {
       YYFPRINTF (stderr, "   $%d = ", yyi + 1);
       yy_symbol_print (stderr,
-                       yystos[yyssp[yyi + 1 - yynrhs]],
-                       &(yyvsp[(yyi + 1) - (yynrhs)])
+                       yystos[+yyssp[yyi + 1 - yynrhs]],
+                       &yyvsp[(yyi + 1) - (yynrhs)]
                                               , input, molList, lastAtom, lastBond, scanner, start_token);
       YYFPRINTF (stderr, "\n");
     }
 }
 
 # define YY_REDUCE_PRINT(Rule)          \
@@ -1028,52 +1106,52 @@ do {                                    \
 /* Nonzero means print parse trace.  It is left uninitialized so that
    multiple parsers can coexist.  */
 int yydebug;
 #else /* !YYDEBUG */
 # define YYDPRINTF(Args)
 # define YY_SYMBOL_PRINT(Title, Type, Value, Location)
 # define YY_STACK_PRINT(Bottom, Top)
 # define YY_REDUCE_PRINT(Rule)
 #endif /* !YYDEBUG */
 
 
 /* YYINITDEPTH -- initial size of the parser's stacks.  */
 #ifndef YYINITDEPTH
 # define YYINITDEPTH 200
 #endif
 
 /* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
    if the built-in stack extension method is used).
 
    Do not make this value too large; the results are undefined if
    YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
    evaluated with infinite-precision integer arithmetic.  */
 
 #ifndef YYMAXDEPTH
 # define YYMAXDEPTH 10000
 #endif
 
 
 #if YYERROR_VERBOSE
 
 # ifndef yystrlen
 #  if defined __GLIBC__ && defined _STRING_H
-#   define yystrlen strlen
+#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
 #  else
 /* Return the length of YYSTR.  */
-static YYSIZE_T
+static YYPTRDIFF_T
 yystrlen (const char *yystr)
 {
-  YYSIZE_T yylen;
+  YYPTRDIFF_T yylen;
   for (yylen = 0; yystr[yylen]; yylen++)
     continue;
   return yylen;
 }
 #  endif
 # endif
 
 # ifndef yystpcpy
 #  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
 #   define yystpcpy stpcpy
 #  else
 /* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
    YYDEST.  */
@@ -1094,187 +1172,197 @@ yystpcpy (char *yydest, const char *yysrc)
 # ifndef yytnamerr
 /* Copy to YYRES the contents of YYSTR after stripping away unnecessary
    quotes and backslashes, so that it's suitable for yyerror.  The
    heuristic is that double-quoting is unnecessary unless the string
    contains an apostrophe, a comma, or backslash (other than
    backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
    null, do not copy; instead, return the length of what the result
    would have been.  */
-static YYSIZE_T
+static YYPTRDIFF_T
 yytnamerr (char *yyres, const char *yystr)
 {
   if (*yystr == '"')
     {
-      YYSIZE_T yyn = 0;
+      YYPTRDIFF_T yyn = 0;
       char const *yyp = yystr;
 
       for (;;)
         switch (*++yyp)
           {
           case '\'':
           case ',':
             goto do_not_strip_quotes;
 
           case '\\':
             if (*++yyp != '\\')
               goto do_not_strip_quotes;
-            /* Fall through.  */
+            else
+              goto append;
+
+          append:
           default:
             if (yyres)
               yyres[yyn] = *yyp;
             yyn++;
             break;
 
           case '"':
             if (yyres)
               yyres[yyn] = '\0';
             return yyn;
           }
     do_not_strip_quotes: ;
     }
 
-  if (! yyres)
+  if (yyres)
+    return yystpcpy (yyres, yystr) - yyres;
+  else
     return yystrlen (yystr);
-
-  return yystpcpy (yyres, yystr) - yyres;
 }
 # endif
 
 /* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
    about the unexpected token YYTOKEN for the state stack whose top is
    YYSSP.
 
    Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
    not large enough to hold the message.  In that case, also set
    *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
    required number of bytes is too large to store.  */
 static int
-yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
-                yytype_int16 *yyssp, int yytoken)
+yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
+                yy_state_t *yyssp, int yytoken)
 {
-  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
-  YYSIZE_T yysize = yysize0;
   enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
   /* Internationalized format string. */
   const char *yyformat = YY_NULLPTR;
-  /* Arguments of yyformat. */
+  /* Arguments of yyformat: reported tokens (one for the "unexpected",
+     one per "expected"). */
   char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
-  /* Number of reported tokens (one for the "unexpected", one per
-     "expected"). */
+  /* Actual size of YYARG. */
   int yycount = 0;
+  /* Cumulated lengths of YYARG.  */
+  YYPTRDIFF_T yysize = 0;
 
   /* There are many possibilities here to consider:
      - If this state is a consistent state with a default action, then
        the only way this function was invoked is if the default action
        is an error action.  In that case, don't check for expected
        tokens because there are none.
      - The only way there can be no lookahead present (in yychar) is if
        this state is a consistent state with a default action.  Thus,
        detecting the absence of a lookahead is sufficient to determine
        that there is no unexpected or expected token to report.  In that
        case, just report a simple "syntax error".
      - Don't assume there isn't a lookahead just because this state is a
        consistent state with a default action.  There might have been a
        previous inconsistent state, consistent state with a non-default
        action, or user semantic action that manipulated yychar.
      - Of course, the expected token list depends on states to have
        correct lookahead information, and it depends on the parser not
        to perform extra reductions after fetching a lookahead from the
        scanner and before detecting a syntax error.  Thus, state merging
        (from LALR or IELR) and default reductions corrupt the expected
        token list.  However, the list is correct for canonical LR with
        one exception: it will still contain any token that will not be
        accepted due to an error action in a later state.
   */
   if (yytoken != YYEMPTY)
     {
-      int yyn = yypact[*yyssp];
+      int yyn = yypact[+*yyssp];
+      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
+      yysize = yysize0;
       yyarg[yycount++] = yytname[yytoken];
       if (!yypact_value_is_default (yyn))
         {
           /* Start YYX at -YYN if negative to avoid negative indexes in
              YYCHECK.  In other words, skip the first -YYN actions for
              this state because they are default actions.  */
           int yyxbegin = yyn < 0 ? -yyn : 0;
           /* Stay within bounds of both yycheck and yytname.  */
           int yychecklim = YYLAST - yyn + 1;
           int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
           int yyx;
 
           for (yyx = yyxbegin; yyx < yyxend; ++yyx)
             if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                 && !yytable_value_is_error (yytable[yyx + yyn]))
               {
                 if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                   {
                     yycount = 1;
                     yysize = yysize0;
                     break;
                   }
                 yyarg[yycount++] = yytname[yyx];
                 {
-                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
-                  if (! (yysize <= yysize1
-                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+                  YYPTRDIFF_T yysize1
+                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
+                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
+                    yysize = yysize1;
+                  else
                     return 2;
-                  yysize = yysize1;
                 }
               }
         }
     }
 
   switch (yycount)
     {
 # define YYCASE_(N, S)                      \
       case N:                               \
         yyformat = S;                       \
       break
+    default: /* Avoid compiler warnings. */
       YYCASE_(0, YY_("syntax error"));
       YYCASE_(1, YY_("syntax error, unexpected %s"));
       YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
       YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
       YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
       YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
 # undef YYCASE_
     }
 
   {
-    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
-    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+    /* Don't count the "%s"s in the final size, but reserve room for
+       the terminator.  */
+    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
+    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
+      yysize = yysize1;
+    else
       return 2;
-    yysize = yysize1;
   }
 
   if (*yymsg_alloc < yysize)
     {
       *yymsg_alloc = 2 * yysize;
       if (! (yysize <= *yymsg_alloc
              && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
         *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
       return 1;
     }
 
   /* Avoid sprintf, as that infringes on the user's name space.
      Don't have undefined behavior even if the translation
      produced a string with the wrong number of "%s"s.  */
   {
     char *yyp = *yymsg;
     int yyi = 0;
     while ((*yyp = *yyformat) != '\0')
       if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
         {
           yyp += yytnamerr (yyp, yyarg[yyi++]);
           yyformat += 2;
         }
       else
         {
-          yyp++;
-          yyformat++;
+          ++yyp;
+          ++yyformat;
         }
   }
   return 0;
 }
 #endif /* YYERROR_VERBOSE */
 
 /*-----------------------------------------------.
 | Release the memory associated to this symbol.  |
 `-----------------------------------------------*/
@@ -1283,161 +1371,160 @@ static void
 yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, const char *input, std::vector<RDKit::RWMol *> *molList, RDKit::Atom* &lastAtom, RDKit::Bond* &lastBond, void *scanner, int& start_token)
 {
   YYUSE (yyvaluep);
   YYUSE (input);
   YYUSE (molList);
   YYUSE (lastAtom);
   YYUSE (lastBond);
   YYUSE (scanner);
   YYUSE (start_token);
   if (!yymsg)
     yymsg = "Deleting";
   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
 
   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   switch (yytype)
     {
-          case 8: /* ATOM_TOKEN  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1302 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+    case 8: /* ATOM_TOKEN  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1391 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 9: /* SIMPLE_ATOM_QUERY_TOKEN  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1308 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1397 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 10: /* COMPLEX_ATOM_QUERY_TOKEN  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1314 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1403 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 11: /* RINGSIZE_ATOM_QUERY_TOKEN  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1320 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1409 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 12: /* RINGBOND_ATOM_QUERY_TOKEN  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1326 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1415 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 13: /* IMPLICIT_H_ATOM_QUERY_TOKEN  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1332 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1421 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 14: /* HYB_TOKEN  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1338 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1427 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 15: /* HETERONEIGHBOR_ATOM_QUERY_TOKEN  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1344 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1433 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 16: /* ALIPHATIC  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1350 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1439 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 17: /* ALIPHATICHETERONEIGHBOR_ATOM_QUERY_TOKEN  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1356 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1445 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 44: /* BOND_TOKEN  */
-#line 103 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).bond); }
-#line 1362 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 104 "smarts.yy"
+            { delete ((*yyvaluep).bond); }
+#line 1451 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 51: /* atomd  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1368 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1457 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 52: /* hydrogen_atom  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1374 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1463 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 53: /* atom_expr  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1380 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1469 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 54: /* point_query  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1386 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1475 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 55: /* recursive_query  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1392 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1481 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 56: /* atom_query  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1398 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1487 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 57: /* possible_range_query  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1404 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1493 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 58: /* simple_atom  */
-#line 102 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).atom); }
-#line 1410 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 103 "smarts.yy"
+            { delete ((*yyvaluep).atom); }
+#line 1499 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 59: /* bond_expr  */
-#line 103 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).bond); }
-#line 1416 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 104 "smarts.yy"
+            { delete ((*yyvaluep).bond); }
+#line 1505 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 60: /* bond_query  */
-#line 103 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).bond); }
-#line 1422 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 104 "smarts.yy"
+            { delete ((*yyvaluep).bond); }
+#line 1511 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
     case 61: /* bondd  */
-#line 103 "smarts.yy" /* yacc.c:1257  */
-      { delete ((*yyvaluep).bond); }
-#line 1428 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1257  */
+#line 104 "smarts.yy"
+            { delete ((*yyvaluep).bond); }
+#line 1517 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
         break;
 
-
       default:
         break;
     }
   YY_IGNORE_MAYBE_UNINITIALIZED_END
 }
 
 
 
 
 /*----------.
 | yyparse.  |
 `----------*/
@@ -1456,1329 +1543,1340 @@ YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
 YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);
 
     /* Number of syntax errors so far.  */
     int yynerrs;
 
-    int yystate;
+    yy_state_fast_t yystate;
     /* Number of tokens to shift before error messages enabled.  */
     int yyerrstatus;
 
     /* The stacks and their tools:
        'yyss': related to states.
        'yyvs': related to semantic values.
 
        Refer to the stacks through separate pointers, to allow yyoverflow
        to reallocate them elsewhere.  */
 
     /* The state stack.  */
-    yytype_int16 yyssa[YYINITDEPTH];
-    yytype_int16 *yyss;
-    yytype_int16 *yyssp;
+    yy_state_t yyssa[YYINITDEPTH];
+    yy_state_t *yyss;
+    yy_state_t *yyssp;
 
     /* The semantic value stack.  */
     YYSTYPE yyvsa[YYINITDEPTH];
     YYSTYPE *yyvs;
     YYSTYPE *yyvsp;
 
-    YYSIZE_T yystacksize;
+    YYPTRDIFF_T yystacksize;
 
   int yyn;
   int yyresult;
   /* Lookahead token as an internal (translated) token number.  */
   int yytoken = 0;
   /* The variables used to return semantic value and location from the
      action routines.  */
   YYSTYPE yyval;
 
 #if YYERROR_VERBOSE
   /* Buffer for error messages, and its allocated size.  */
   char yymsgbuf[128];
   char *yymsg = yymsgbuf;
-  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
+  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
 #endif
 
 #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
 
   /* The number of symbols on the RHS of the reduced rule.
      Keep to zero when no symbol should be popped.  */
   int yylen = 0;
 
   yyssp = yyss = yyssa;
   yyvsp = yyvs = yyvsa;
   yystacksize = YYINITDEPTH;
 
   YYDPRINTF ((stderr, "Starting parse\n"));
 
   yystate = 0;
   yyerrstatus = 0;
   yynerrs = 0;
   yychar = YYEMPTY; /* Cause a token to be read.  */
   goto yysetstate;
 
+
 /*------------------------------------------------------------.
-| yynewstate -- Push a new state, which is found in yystate.  |
+| yynewstate -- push a new state, which is found in yystate.  |
 `------------------------------------------------------------*/
- yynewstate:
+yynewstate:
   /* In all cases, when you get here, the value and location stacks
      have just been pushed.  So pushing a state here evens the stacks.  */
   yyssp++;
 
- yysetstate:
-  *yyssp = yystate;
+
+/*--------------------------------------------------------------------.
+| yysetstate -- set current state (the top of the stack) to yystate.  |
+`--------------------------------------------------------------------*/
+yysetstate:
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
+  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
+  YY_IGNORE_USELESS_CAST_BEGIN
+  *yyssp = YY_CAST (yy_state_t, yystate);
+  YY_IGNORE_USELESS_CAST_END
 
   if (yyss + yystacksize - 1 <= yyssp)
+#if !defined yyoverflow && !defined YYSTACK_RELOCATE
+    goto yyexhaustedlab;
+#else
     {
       /* Get the current used size of the three stacks, in elements.  */
-      YYSIZE_T yysize = yyssp - yyss + 1;
+      YYPTRDIFF_T yysize = yyssp - yyss + 1;
 
-#ifdef yyoverflow
+# if defined yyoverflow
       {
         /* Give user a chance to reallocate the stack.  Use copies of
            these so that the &'s don't force the real ones into
            memory.  */
+        yy_state_t *yyss1 = yyss;
         YYSTYPE *yyvs1 = yyvs;
-        yytype_int16 *yyss1 = yyss;
 
         /* Each stack pointer address is followed by the size of the
            data in use in that stack, in bytes.  This used to be a
            conditional around just the two extra args, but that might
            be undefined if yyoverflow is a macro.  */
         yyoverflow (YY_("memory exhausted"),
-                    &yyss1, yysize * sizeof (*yyssp),
-                    &yyvs1, yysize * sizeof (*yyvsp),
+                    &yyss1, yysize * YYSIZEOF (*yyssp),
+                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                     &yystacksize);
-
         yyss = yyss1;
         yyvs = yyvs1;
       }
-#else /* no yyoverflow */
-# ifndef YYSTACK_RELOCATE
-      goto yyexhaustedlab;
-# else
+# else /* defined YYSTACK_RELOCATE */
       /* Extend the stack our own way.  */
       if (YYMAXDEPTH <= yystacksize)
         goto yyexhaustedlab;
       yystacksize *= 2;
       if (YYMAXDEPTH < yystacksize)
         yystacksize = YYMAXDEPTH;
 
       {
-        yytype_int16 *yyss1 = yyss;
+        yy_state_t *yyss1 = yyss;
         union yyalloc *yyptr =
-          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
+          YY_CAST (union yyalloc *,
+                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
         if (! yyptr)
           goto yyexhaustedlab;
         YYSTACK_RELOCATE (yyss_alloc, yyss);
         YYSTACK_RELOCATE (yyvs_alloc, yyvs);
-#  undef YYSTACK_RELOCATE
+# undef YYSTACK_RELOCATE
         if (yyss1 != yyssa)
           YYSTACK_FREE (yyss1);
       }
 # endif
-#endif /* no yyoverflow */
 
       yyssp = yyss + yysize - 1;
       yyvsp = yyvs + yysize - 1;
 
-      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
-                  (unsigned long int) yystacksize));
+      YY_IGNORE_USELESS_CAST_BEGIN
+      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
+                  YY_CAST (long, yystacksize)));
+      YY_IGNORE_USELESS_CAST_END
 
       if (yyss + yystacksize - 1 <= yyssp)
         YYABORT;
     }
-
-  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
+#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */
 
   if (yystate == YYFINAL)
     YYACCEPT;
 
   goto yybackup;
 
+
 /*-----------.
 | yybackup.  |
 `-----------*/
 yybackup:
-
   /* Do appropriate processing given the current state.  Read a
      lookahead token if we need one and don't already have one.  */
 
   /* First try to decide what to do without reference to lookahead token.  */
   yyn = yypact[yystate];
   if (yypact_value_is_default (yyn))
     goto yydefault;
 
   /* Not known => get a lookahead token if don't already have one.  */
 
   /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
   if (yychar == YYEMPTY)
     {
       YYDPRINTF ((stderr, "Reading a token: "));
       yychar = yylex (&yylval, scanner, start_token);
     }
 
   if (yychar <= YYEOF)
     {
       yychar = yytoken = YYEOF;
       YYDPRINTF ((stderr, "Now at end of input.\n"));
     }
   else
     {
       yytoken = YYTRANSLATE (yychar);
       YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
     }
 
   /* If the proper action on seeing token YYTOKEN is to reduce or to
      detect an error, take that action.  */
   yyn += yytoken;
   if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
     goto yydefault;
   yyn = yytable[yyn];
   if (yyn <= 0)
     {
       if (yytable_value_is_error (yyn))
         goto yyerrlab;
       yyn = -yyn;
       goto yyreduce;
     }
 
   /* Count tokens shifted since error; after three, turn off error
      status.  */
   if (yyerrstatus)
     yyerrstatus--;
 
   /* Shift the lookahead token.  */
   YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
-
-  /* Discard the shifted token.  */
-  yychar = YYEMPTY;
-
   yystate = yyn;
   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   *++yyvsp = yylval;
   YY_IGNORE_MAYBE_UNINITIALIZED_END
 
+  /* Discard the shifted token.  */
+  yychar = YYEMPTY;
   goto yynewstate;
 
 
 /*-----------------------------------------------------------.
 | yydefault -- do the default action for the current state.  |
 `-----------------------------------------------------------*/
 yydefault:
   yyn = yydefact[yystate];
   if (yyn == 0)
     goto yyerrlab;
   goto yyreduce;
 
 
 /*-----------------------------.
-| yyreduce -- Do a reduction.  |
+| yyreduce -- do a reduction.  |
 `-----------------------------*/
 yyreduce:
   /* yyn is the number of a rule to reduce with.  */
   yylen = yyr2[yyn];
 
   /* If YYLEN is nonzero, implement the default value of the action:
      '$$ = $1'.
 
      Otherwise, the following line sets YYVAL to garbage.
      This behavior is undocumented and Bison
      users should not rely upon it.  Assigning to YYVAL
      unconditionally makes the parser a bit smaller, and it avoids a
      GCC warning that YYVAL may be used uninitialized.  */
   yyval = yyvsp[1-yylen];
 
 
   YY_REDUCE_PRINT (yyn);
   switch (yyn)
     {
-        case 2:
-#line 111 "smarts.yy" /* yacc.c:1646  */
-    {
+  case 2:
+#line 112 "smarts.yy"
+              {
 // the molList has already been updated, no need to do anything
 }
-#line 1698 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1793 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 3:
-#line 114 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 115 "smarts.yy"
+                             {
   lastAtom = (yyvsp[-1].atom);
   YYACCEPT;
 }
-#line 1707 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1802 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 4:
-#line 118 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 119 "smarts.yy"
+                          {
   YYABORT;
 }
-#line 1715 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1810 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 5:
-#line 121 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 122 "smarts.yy"
+             {
   YYABORT;
 }
-#line 1723 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1818 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 6:
-#line 124 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 125 "smarts.yy"
+                                 {
   lastBond = (yyvsp[-1].bond);
   YYACCEPT;
 }
-#line 1732 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1827 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 7:
-#line 128 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 129 "smarts.yy"
+                       {
   delete (yyvsp[0].bond);
   YYABORT;
 }
-#line 1741 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1836 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 8:
-#line 132 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 133 "smarts.yy"
+             {
   YYABORT;
 }
-#line 1749 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1844 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 9:
-#line 135 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 136 "smarts.yy"
+                            {
   yyerrok;
   yyErrorCleanup(molList);
   YYABORT;
 }
-#line 1759 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1854 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 10:
-#line 140 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 141 "smarts.yy"
+                       {
   YYACCEPT;
 }
-#line 1767 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1862 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 11:
-#line 143 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 144 "smarts.yy"
+                  {
   yyerrok;
   yyErrorCleanup(molList);
   YYABORT;
 }
-#line 1777 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1872 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 15:
-#line 154 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 155 "smarts.yy"
+            {
   delete (yyvsp[0].atom);
   YYABORT;
 }
-#line 1786 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1881 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 16:
-#line 162 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 163 "smarts.yy"
+           {
   int sz     = molList->size();
   molList->resize( sz + 1);
   (*molList)[ sz ] = new RWMol();
   (*molList)[ sz ]->addAtom((yyvsp[0].atom),true,true);
   //delete $1;
   (yyval.moli) = sz;
 }
-#line 1799 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1894 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 17:
-#line 170 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 171 "smarts.yy"
+                  {
   RWMol *mp = (*molList)[(yyval.moli)];
   Atom *a1 = mp->getActiveAtom();
   int atomIdx1=a1->getIdx();
   int atomIdx2=mp->addAtom((yyvsp[0].atom),true,true);
 
   QueryBond *newB;
   // this is a bit of a hack to try and get nicer "SMILES" from
   // a SMARTS molecule:
   if(!(a1->getIsAromatic() && (yyvsp[0].atom)->getIsAromatic())){
     newB = new QueryBond(Bond::SINGLE);
     newB->setQuery(makeSingleOrAromaticBondQuery());
   } else {
     newB = new QueryBond(Bond::AROMATIC);
     newB->setQuery(makeSingleOrAromaticBondQuery());
   }
   newB->setProp(RDKit::common_properties::_unspecifiedOrder,1);
   newB->setOwningMol(mp);
   newB->setBeginAtomIdx(atomIdx1);
   newB->setEndAtomIdx(atomIdx2);
   mp->addBond(newB);
   delete newB;
   //delete $2;
 }
-#line 1828 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1923 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 18:
-#line 195 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 196 "smarts.yy"
+                       {
   RWMol *mp = (*molList)[(yyval.moli)];
   int atomIdx1 = mp->getActiveAtom()->getIdx();
   int atomIdx2 = mp->addAtom((yyvsp[0].atom),true,true);
   if( (yyvsp[-1].bond)->getBondType() == Bond::DATIVER ){
     (yyvsp[-1].bond)->setBeginAtomIdx(atomIdx1);
     (yyvsp[-1].bond)->setEndAtomIdx(atomIdx2);
     (yyvsp[-1].bond)->setBondType(Bond::DATIVE);
   }else if ( (yyvsp[-1].bond)->getBondType() == Bond::DATIVEL ){
     (yyvsp[-1].bond)->setBeginAtomIdx(atomIdx2);
     (yyvsp[-1].bond)->setEndAtomIdx(atomIdx1);
     (yyvsp[-1].bond)->setBondType(Bond::DATIVE);
   } else {
     (yyvsp[-1].bond)->setBeginAtomIdx(atomIdx1);
     (yyvsp[-1].bond)->setEndAtomIdx(atomIdx2);
   }
   mp->addBond((yyvsp[-1].bond));
   delete (yyvsp[-1].bond);
 }
-#line 1852 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1947 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 19:
-#line 215 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 216 "smarts.yy"
+                            {
   RWMol *mp = (*molList)[(yyval.moli)];
   mp->addAtom((yyvsp[0].atom),true,true);
 }
-#line 1861 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1956 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 20:
-#line 220 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 221 "smarts.yy"
+                  {
   RWMol * mp = (*molList)[(yyval.moli)];
   Atom *atom=mp->getActiveAtom();
 
   // this is a bit of a hack to try and get nicer "SMILES" from
   // a SMARTS molecule:
   QueryBond * newB;
   if(!atom->getIsAromatic()){
     newB = new QueryBond(Bond::SINGLE);
     newB->setQuery(makeSingleOrAromaticBondQuery());
   } else {
     newB = new QueryBond(Bond::AROMATIC);
     newB->setQuery(makeSingleOrAromaticBondQuery());
   }
   newB->setProp(RDKit::common_properties::_unspecifiedOrder,1);
   newB->setOwningMol(mp);
   newB->setBeginAtomIdx(atom->getIdx());
   mp->setBondBookmark(newB,(yyvsp[0].ival));
   mp->setAtomBookmark(atom,(yyvsp[0].ival));
 
   SmilesParseOps::CheckRingClosureBranchStatus(atom,mp);
 
   INT_VECT tmp;
   if(atom->hasProp(RDKit::common_properties::_RingClosures)){
     atom->getProp(RDKit::common_properties::_RingClosures,tmp);
   }
   tmp.push_back(-((yyvsp[0].ival)+1));
   atom->setProp(RDKit::common_properties::_RingClosures,tmp);
 
 }
-#line 1896 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 1991 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 21:
-#line 251 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 252 "smarts.yy"
+                            {
   RWMol * mp = (*molList)[(yyval.moli)];
   Atom *atom=mp->getActiveAtom();
 
   mp->setBondBookmark((yyvsp[-1].bond),(yyvsp[0].ival));
   (yyvsp[-1].bond)->setOwningMol(mp);
   (yyvsp[-1].bond)->setBeginAtomIdx(atom->getIdx());
   mp->setAtomBookmark(atom,(yyvsp[0].ival));
 
   SmilesParseOps::CheckRingClosureBranchStatus(atom,mp);
 
   INT_VECT tmp;
   if(atom->hasProp(RDKit::common_properties::_RingClosures)){
     atom->getProp(RDKit::common_properties::_RingClosures,tmp);
   }
   tmp.push_back(-((yyvsp[0].ival)+1));
   atom->setProp(RDKit::common_properties::_RingClosures,tmp);
 
 }
-#line 1920 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2015 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 22:
-#line 271 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 272 "smarts.yy"
+             {
   RWMol *m1_p = (*molList)[(yyval.moli)],*m2_p=(*molList)[(yyvsp[0].moli)];
   // FIX: handle generic bonds here
   SmilesParseOps::AddFragToMol(m1_p,m2_p,Bond::UNSPECIFIED,Bond::NONE);
   delete m2_p;
   int sz = molList->size();
   if ( sz==(yyvsp[0].moli)+1) {
     molList->resize( sz-1 );
   }
 }
-#line 1935 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2030 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 23:
-#line 284 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.moli) = (yyvsp[-1].moli); }
-#line 1941 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 285 "smarts.yy"
+                                               { (yyval.moli) = (yyvsp[-1].moli); }
+#line 2036 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 24:
-#line 285 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 286 "smarts.yy"
+                                                   {
   // FIX: this needs to handle arbitrary bond_exprs
   (yyval.moli) = (yyvsp[-1].moli);
   int sz     = molList->size();
   (yyvsp[-2].bond)->setOwningMol((*molList)[ sz-1 ]);
   (yyvsp[-2].bond)->setBeginAtomIdx(0);
   (*molList)[ sz-1 ]->setBondBookmark((yyvsp[-2].bond),ci_LEADING_BOND);
 }
-#line 1954 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2049 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 27:
-#line 299 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 300 "smarts.yy"
+{
   (yyval.atom) = (yyvsp[-1].atom);
 }
-#line 1962 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2057 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 28:
-#line 303 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 304 "smarts.yy"
+{
   (yyval.atom) = (yyvsp[-3].atom);
   (yyval.atom)->setProp(RDKit::common_properties::molAtomMapNumber,(yyvsp[-1].ival));
 }
-#line 1971 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2066 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 29:
-#line 326 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 327 "smarts.yy"
+{
   (yyval.atom) = new QueryAtom(1);
 }
-#line 1979 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2074 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 30:
-#line 330 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 331 "smarts.yy"
+{
   (yyval.atom) = new QueryAtom(1);
   (yyval.atom)->setProp(RDKit::common_properties::molAtomMapNumber,(yyvsp[-1].ival));
 }
-#line 1988 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2083 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 31:
-#line 334 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 335 "smarts.yy"
+                                                  {
   QueryAtom *newQ = new QueryAtom(1);
   newQ->setIsotope((yyvsp[-2].ival));
   newQ->expandQuery(makeAtomIsotopeQuery((yyvsp[-2].ival)),Queries::COMPOSITE_AND,true);
   (yyval.atom)=newQ;
 }
-#line 1999 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2094 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 32:
-#line 340 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 341 "smarts.yy"
+                                                                     {
   QueryAtom *newQ = new QueryAtom(1);
   newQ->setIsotope((yyvsp[-4].ival));
   newQ->expandQuery(makeAtomIsotopeQuery((yyvsp[-4].ival)),Queries::COMPOSITE_AND,true);
   newQ->setProp(RDKit::common_properties::molAtomMapNumber,(yyvsp[-1].ival));
 
   (yyval.atom)=newQ;
 }
-#line 2012 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2107 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 33:
-#line 349 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 350 "smarts.yy"
+                                                       {
   QueryAtom *newQ = new QueryAtom(1);
   newQ->setFormalCharge((yyvsp[-1].ival));
   newQ->expandQuery(makeAtomFormalChargeQuery((yyvsp[-1].ival)),Queries::COMPOSITE_AND,true);
   (yyval.atom)=newQ;
 }
-#line 2023 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2118 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 34:
-#line 355 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 356 "smarts.yy"
+                                                                          {
   QueryAtom *newQ = new QueryAtom(1);
   newQ->setFormalCharge((yyvsp[-3].ival));
   newQ->expandQuery(makeAtomFormalChargeQuery((yyvsp[-3].ival)),Queries::COMPOSITE_AND,true);
   newQ->setProp(RDKit::common_properties::molAtomMapNumber,(yyvsp[-1].ival));
 
   (yyval.atom)=newQ;
 }
-#line 2036 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2131 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 35:
-#line 363 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 364 "smarts.yy"
+                                                              {
   QueryAtom *newQ = new QueryAtom(1);
   newQ->setIsotope((yyvsp[-3].ival));
   newQ->setFormalCharge((yyvsp[-1].ival));
   newQ->expandQuery(makeAtomIsotopeQuery((yyvsp[-3].ival)),Queries::COMPOSITE_AND,true);
   newQ->expandQuery(makeAtomFormalChargeQuery((yyvsp[-1].ival)),Queries::COMPOSITE_AND,true);
   (yyval.atom)=newQ;
 }
-#line 2049 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2144 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 36:
-#line 371 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 372 "smarts.yy"
+                                                                                 {
   QueryAtom *newQ = new QueryAtom(1);
   newQ->setIsotope((yyvsp[-5].ival));
   newQ->setFormalCharge((yyvsp[-3].ival));
   newQ->expandQuery(makeAtomIsotopeQuery((yyvsp[-5].ival)),Queries::COMPOSITE_AND,true);
   newQ->expandQuery(makeAtomFormalChargeQuery((yyvsp[-3].ival)),Queries::COMPOSITE_AND,true);
   newQ->setProp(RDKit::common_properties::molAtomMapNumber,(yyvsp[-1].ival));
 
   (yyval.atom)=newQ;
 }
-#line 2064 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2159 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 37:
-#line 384 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 385 "smarts.yy"
+                                         {
   (yyvsp[-2].atom)->expandQuery((yyvsp[0].atom)->getQuery()->copy(),Queries::COMPOSITE_AND,true);
   if((yyvsp[-2].atom)->getChiralTag()==Atom::CHI_UNSPECIFIED) (yyvsp[-2].atom)->setChiralTag((yyvsp[0].atom)->getChiralTag());
   SmilesParseOps::ClearAtomChemicalProps((yyvsp[-2].atom));
   delete (yyvsp[0].atom);
 }
-#line 2075 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2170 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 38:
-#line 390 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 391 "smarts.yy"
+                               {
   (yyvsp[-2].atom)->expandQuery((yyvsp[0].atom)->getQuery()->copy(),Queries::COMPOSITE_OR,true);
   if((yyvsp[-2].atom)->getChiralTag()==Atom::CHI_UNSPECIFIED) (yyvsp[-2].atom)->setChiralTag((yyvsp[0].atom)->getChiralTag());
   SmilesParseOps::ClearAtomChemicalProps((yyvsp[-2].atom));
   (yyvsp[-2].atom)->setAtomicNum(0);
   delete (yyvsp[0].atom);
 }
-#line 2087 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2182 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 39:
-#line 397 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 398 "smarts.yy"
+                                 {
   (yyvsp[-2].atom)->expandQuery((yyvsp[0].atom)->getQuery()->copy(),Queries::COMPOSITE_AND,true);
   if((yyvsp[-2].atom)->getChiralTag()==Atom::CHI_UNSPECIFIED) (yyvsp[-2].atom)->setChiralTag((yyvsp[0].atom)->getChiralTag());
   SmilesParseOps::ClearAtomChemicalProps((yyvsp[-2].atom));
   delete (yyvsp[0].atom);
 }
-#line 2098 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2193 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 40:
-#line 403 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 404 "smarts.yy"
+                        {
   (yyvsp[-1].atom)->expandQuery((yyvsp[0].atom)->getQuery()->copy(),Queries::COMPOSITE_AND,true);
   if((yyvsp[-1].atom)->getChiralTag()==Atom::CHI_UNSPECIFIED) (yyvsp[-1].atom)->setChiralTag((yyvsp[0].atom)->getChiralTag());
   if((yyvsp[0].atom)->getNumExplicitHs()){
     if(!(yyvsp[-1].atom)->getNumExplicitHs()){
       (yyvsp[-1].atom)->setNumExplicitHs((yyvsp[0].atom)->getNumExplicitHs());
       (yyvsp[-1].atom)->setNoImplicit(true);
     } else if((yyvsp[-1].atom)->getNumExplicitHs()!=(yyvsp[0].atom)->getNumExplicitHs()){
       // conflicting queries...
       (yyvsp[-1].atom)->setNumExplicitHs(0);
       (yyvsp[-1].atom)->setNoImplicit(false);
     }
   }
   if((yyvsp[0].atom)->getFormalCharge()){
     if(!(yyvsp[-1].atom)->getFormalCharge()){
       (yyvsp[-1].atom)->setFormalCharge((yyvsp[0].atom)->getFormalCharge());
     } else if((yyvsp[-1].atom)->getFormalCharge()!=(yyvsp[0].atom)->getFormalCharge()){
       // conflicting queries...
       (yyvsp[-1].atom)->setFormalCharge(0);
     }
   }
   delete (yyvsp[0].atom);
 }
-#line 2126 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2221 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 42:
-#line 429 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 430 "smarts.yy"
+                                   {
   (yyvsp[0].atom)->getQuery()->setNegation(!((yyvsp[0].atom)->getQuery()->getNegation()));
   (yyvsp[0].atom)->setAtomicNum(0);
   SmilesParseOps::ClearAtomChemicalProps((yyvsp[0].atom));
   (yyval.atom) = (yyvsp[0].atom);
 }
-#line 2137 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2232 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 45:
-#line 440 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 441 "smarts.yy"
+                                               {
   // this is a recursive SMARTS expression
   QueryAtom *qA = new QueryAtom();
   //  FIX: there's maybe a leak here
   RWMol *molP = (*molList)[(yyvsp[-1].moli)];
   // close any rings in the molecule:
   SmilesParseOps::CloseMolRings(molP,0);
 
   //molP->debugMol(std::cout);
   qA->setQuery(new RecursiveStructureQuery(molP));
   //std::cout << "qA: " << qA << " " << qA->getQuery() << std::endl;
   int sz = molList->size();
   if ( sz==(yyvsp[-1].moli)+1) {
     molList->resize( sz-1 );
   }
   (yyval.atom) = qA;
 }
-#line 2159 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2254 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 46:
-#line 457 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 458 "smarts.yy"
+                                                                {
   // UNDOCUMENTED EXTENSION:
   // this is a recursive SMARTS expression with a serial number
   // please don't write your own SMARTS that include this extension:
   // the RDKit smarts parsing code will automatically insert serial
   // numbers for recursive smarts patterns.
   QueryAtom *qA = new QueryAtom();
   //  FIX: there's maybe a leak here
   RWMol *molP = (*molList)[(yyvsp[-3].moli)];
   // close any rings in the molecule:
   SmilesParseOps::CloseMolRings(molP,0);
 
   //molP->debugMol(std::cout);
   qA->setQuery(new RecursiveStructureQuery(molP,(yyvsp[0].ival)));
   //std::cout << "qA: " << qA << " " << qA->getQuery() << std::endl;
   int sz = molList->size();
   if ( sz==(yyvsp[-3].moli)+1) {
     molList->resize( sz-1 );
   }
   (yyval.atom) = qA;
 }
-#line 2185 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2280 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 48:
-#line 482 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 483 "smarts.yy"
+                     {
   (yyvsp[0].atom)->setIsotope((yyvsp[-1].ival));
   (yyvsp[0].atom)->expandQuery(makeAtomIsotopeQuery((yyvsp[-1].ival)),Queries::COMPOSITE_AND,true);
   (yyval.atom)=(yyvsp[0].atom);
 }
-#line 2195 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2290 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 50:
-#line 488 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 489 "smarts.yy"
+                    {
   (yyvsp[0].atom)->setIsotope((yyvsp[-1].ival));
   (yyvsp[0].atom)->expandQuery(makeAtomIsotopeQuery((yyvsp[-1].ival)),Queries::COMPOSITE_AND,true);
   (yyval.atom)=(yyvsp[0].atom);
 }
-#line 2205 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2300 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 51:
-#line 493 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.atom) = new QueryAtom((yyvsp[0].ival)); }
-#line 2211 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 494 "smarts.yy"
+                    { (yyval.atom) = new QueryAtom((yyvsp[0].ival)); }
+#line 2306 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 52:
-#line 494 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 495 "smarts.yy"
+                           {
   (yyval.atom) = new QueryAtom((yyvsp[0].ival));
   (yyval.atom)->setIsotope((yyvsp[-2].ival));
   (yyval.atom)->expandQuery(makeAtomIsotopeQuery((yyvsp[-2].ival)),Queries::COMPOSITE_AND,true);
 }
-#line 2221 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2316 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 59:
-#line 505 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 506 "smarts.yy"
+                                  {
   static_cast<ATOM_EQUALS_QUERY *>((yyvsp[-1].atom)->getQuery())->setVal((yyvsp[0].ival));
 }
-#line 2229 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2324 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 60:
-#line 508 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 509 "smarts.yy"
+                                         {
   (yyvsp[-1].atom)->setQuery(makeAtomNumHeteroatomNbrsQuery((yyvsp[0].ival)));
 }
-#line 2237 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2332 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 61:
-#line 511 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 512 "smarts.yy"
+                                                  {
   (yyvsp[-1].atom)->setQuery(makeAtomNumAliphaticHeteroatomNbrsQuery((yyvsp[0].ival)));
 }
-#line 2245 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2340 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 62:
-#line 514 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 515 "smarts.yy"
+                                   {
   (yyvsp[-1].atom)->setQuery(makeAtomMinRingSizeQuery((yyvsp[0].ival)));
 }
-#line 2253 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2348 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 63:
-#line 517 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 518 "smarts.yy"
+                                   {
   (yyvsp[-1].atom)->setQuery(makeAtomRingBondCountQuery((yyvsp[0].ival)));
 }
-#line 2261 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2356 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 64:
-#line 520 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 521 "smarts.yy"
+                                     {
   (yyvsp[-1].atom)->setQuery(makeAtomImplicitHCountQuery((yyvsp[0].ival)));
 }
-#line 2269 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2364 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 65:
-#line 523 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 524 "smarts.yy"
+                                                                             {
   ATOM_EQUALS_QUERY *oq = static_cast<ATOM_EQUALS_QUERY *>((yyvsp[-4].atom)->getQuery());
   ATOM_GREATEREQUAL_QUERY *nq = makeAtomSimpleQuery<ATOM_GREATEREQUAL_QUERY>((yyvsp[-1].ival),oq->getDataFunc(),
     std::string("greater_")+oq->getDescription());
   (yyvsp[-4].atom)->setQuery(nq);
 }
-#line 2280 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2375 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 66:
-#line 529 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 530 "smarts.yy"
+                                                                             {
   ATOM_EQUALS_QUERY *oq = static_cast<ATOM_EQUALS_QUERY *>((yyvsp[-4].atom)->getQuery());
   ATOM_LESSEQUAL_QUERY *nq = makeAtomSimpleQuery<ATOM_LESSEQUAL_QUERY>((yyvsp[-2].ival),oq->getDataFunc(),
     std::string("less_")+oq->getDescription());
   (yyvsp[-4].atom)->setQuery(nq);
 }
-#line 2291 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2386 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 67:
-#line 535 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 536 "smarts.yy"
+                                                                                    {
   ATOM_EQUALS_QUERY *oq = static_cast<ATOM_EQUALS_QUERY *>((yyvsp[-5].atom)->getQuery());
   ATOM_RANGE_QUERY *nq = makeAtomRangeQuery((yyvsp[-3].ival),(yyvsp[-1].ival),false,false,
     oq->getDataFunc(),
     std::string("range_")+oq->getDescription());
   (yyvsp[-5].atom)->setQuery(nq);
 }
-#line 2303 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2398 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 68:
-#line 542 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 543 "smarts.yy"
+                 {
   QueryAtom *newQ = new QueryAtom();
   newQ->setQuery(makeAtomIsotopeQuery((yyvsp[-1].ival)));
   newQ->setIsotope((yyvsp[-1].ival));
   newQ->expandQuery(makeAtomHCountQuery(1),Queries::COMPOSITE_AND,true);
   newQ->setNumExplicitHs(1);
   (yyval.atom)=newQ;
 }
-#line 2316 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2411 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 69:
-#line 550 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 551 "smarts.yy"
+                        {
   QueryAtom *newQ = new QueryAtom();
   newQ->setQuery(makeAtomIsotopeQuery((yyvsp[-2].ival)));
   newQ->setIsotope((yyvsp[-2].ival));
   newQ->expandQuery(makeAtomHCountQuery((yyvsp[0].ival)),Queries::COMPOSITE_AND,true);
   newQ->setNumExplicitHs((yyvsp[0].ival));
   (yyval.atom)=newQ;
 }
-#line 2329 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2424 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 70:
-#line 558 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 559 "smarts.yy"
+                 {
   QueryAtom *newQ = new QueryAtom();
   newQ->setQuery(makeAtomHCountQuery((yyvsp[0].ival)));
   newQ->setNumExplicitHs((yyvsp[0].ival));
   (yyval.atom)=newQ;
 }
-#line 2340 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2435 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 71:
-#line 564 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 565 "smarts.yy"
+          {
   QueryAtom *newQ = new QueryAtom();
   newQ->setQuery(makeAtomHCountQuery(1));
   newQ->setNumExplicitHs(1);
   (yyval.atom)=newQ;
 }
-#line 2351 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2446 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 72:
-#line 570 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 571 "smarts.yy"
+              {
   QueryAtom *newQ = new QueryAtom();
   newQ->setQuery(makeAtomFormalChargeQuery((yyvsp[0].ival)));
   newQ->setFormalCharge((yyvsp[0].ival));
   (yyval.atom)=newQ;
 }
-#line 2362 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2457 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 73:
-#line 576 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 577 "smarts.yy"
+                    {
   QueryAtom *newQ = new QueryAtom();
   newQ->setQuery(makeAtomNullQuery());
   newQ->setChiralTag(Atom::CHI_TETRAHEDRAL_CW);
   (yyval.atom)=newQ;
 }
-#line 2373 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2468 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 74:
-#line 582 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 583 "smarts.yy"
+           {
   QueryAtom *newQ = new QueryAtom();
   newQ->setQuery(makeAtomNullQuery());
   newQ->setChiralTag(Atom::CHI_TETRAHEDRAL_CCW);
   (yyval.atom)=newQ;
 }
-#line 2384 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2479 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 76:
-#line 589 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 590 "smarts.yy"
+         {
   QueryAtom *newQ = new QueryAtom();
   newQ->setQuery(makeAtomIsotopeQuery((yyvsp[0].ival)));
   (yyval.atom)=newQ;
 }
-#line 2394 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2489 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 78:
-#line 597 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 598 "smarts.yy"
+                                  {
   (yyvsp[0].atom)->setQuery(makeAtomNumHeteroatomNbrsQuery(0));
 }
-#line 2402 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2497 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 79:
-#line 600 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 601 "smarts.yy"
+                                           {
   (yyvsp[0].atom)->setQuery(makeAtomNumAliphaticHeteroatomNbrsQuery(0));
 }
-#line 2410 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2505 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 80:
-#line 603 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 604 "smarts.yy"
+                            {
   (yyvsp[0].atom)->setQuery(makeAtomMinRingSizeQuery(5)); // this is going to be ignored anyway
 }
-#line 2418 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2513 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 81:
-#line 606 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 607 "smarts.yy"
+                            {
   (yyvsp[0].atom)->setQuery(makeAtomRingBondCountQuery(0));
 }
-#line 2426 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2521 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 82:
-#line 609 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 610 "smarts.yy"
+                              {
   (yyvsp[0].atom)->setQuery(makeAtomImplicitHCountQuery(0));
 }
-#line 2434 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2529 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 83:
-#line 612 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 613 "smarts.yy"
+             {
   QueryAtom *newQ = new QueryAtom();
   newQ->setQuery(makeAtomFormalChargeQuery(0));
   (yyval.atom) = newQ;
 }
-#line 2444 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2539 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 84:
-#line 617 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 618 "smarts.yy"
+              {
   QueryAtom *newQ = new QueryAtom();
   newQ->setQuery(makeAtomNegativeFormalChargeQuery(0));
   (yyval.atom) = newQ;
 }
-#line 2454 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2549 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 85:
-#line 625 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 626 "smarts.yy"
+                                   {
   //
   // This construction (and some others) may seem odd, but the
   // SMARTS definition requires that an atom which is aliphatic on
   // input (i.e. something in the "organic subset" that is given with
   // a capital letter) only match aliphatic atoms.
   //
   // The following rule applies a similar logic to aromatic atoms.
   //
   (yyval.atom) = new QueryAtom((yyvsp[0].ival));
   (yyval.atom)->setQuery(makeAtomTypeQuery((yyvsp[0].ival),false));
 }
-#line 2471 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2566 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 86:
-#line 637 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 638 "smarts.yy"
+                      {
   (yyval.atom) = new QueryAtom((yyvsp[0].ival));
   (yyval.atom)->setIsAromatic(true);
   (yyval.atom)->setQuery(makeAtomTypeQuery((yyvsp[0].ival),true));
 }
-#line 2481 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2576 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 88:
-#line 647 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 648 "smarts.yy"
+                                        {
   (yyvsp[-2].bond)->expandQuery((yyvsp[0].bond)->getQuery()->copy(),Queries::COMPOSITE_AND,true);
   delete (yyvsp[0].bond);
 }
-#line 2490 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2585 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 89:
-#line 651 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 652 "smarts.yy"
+                               {
   (yyvsp[-2].bond)->expandQuery((yyvsp[0].bond)->getQuery()->copy(),Queries::COMPOSITE_OR,true);
   delete (yyvsp[0].bond);
 }
-#line 2499 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2594 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 90:
-#line 655 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 656 "smarts.yy"
+                                 {
   (yyvsp[-2].bond)->expandQuery((yyvsp[0].bond)->getQuery()->copy(),Queries::COMPOSITE_AND,true);
   delete (yyvsp[0].bond);
 }
-#line 2508 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2603 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 93:
-#line 663 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 664 "smarts.yy"
+                   {
   (yyvsp[-1].bond)->expandQuery((yyvsp[0].bond)->getQuery()->copy(),Queries::COMPOSITE_AND,true);
   delete (yyvsp[0].bond);
 }
-#line 2517 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2612 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 95:
-#line 671 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 672 "smarts.yy"
+              {
   QueryBond *newB= new QueryBond();
   newB->setBondType(Bond::SINGLE);
   newB->setQuery(makeBondOrderEqualsQuery(Bond::SINGLE));
   (yyval.bond) = newB;
 }
-#line 2528 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2623 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 96:
-#line 677 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 678 "smarts.yy"
+             {
   QueryBond *newB= new QueryBond();
   newB->setBondType(Bond::TRIPLE);
   newB->setQuery(makeBondOrderEqualsQuery(Bond::TRIPLE));
   (yyval.bond) = newB;
 }
-#line 2539 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2634 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 97:
-#line 683 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 684 "smarts.yy"
+              {
   QueryBond *newB= new QueryBond();
   newB->setBondType(Bond::AROMATIC);
   newB->setQuery(makeBondOrderEqualsQuery(Bond::AROMATIC));
   (yyval.bond) = newB;
 }
-#line 2550 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2645 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 98:
-#line 689 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 690 "smarts.yy"
+           {
   QueryBond *newB= new QueryBond();
   newB->setQuery(makeBondIsInRingQuery());
   (yyval.bond) = newB;
 }
-#line 2560 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2655 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 99:
-#line 694 "smarts.yy" /* yacc.c:1646  */
-    {
+#line 695 "smarts.yy"
+                  {
   (yyvsp[0].bond)->getQuery()->setNegation(!((yyvsp[0].bond)->getQuery()->getNegation()));
   (yyval.bond) = (yyvsp[0].bond);
 }
-#line 2569 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2664 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 100:
-#line 701 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.ival)=2; }
-#line 2575 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 702 "smarts.yy"
+                                   { (yyval.ival)=2; }
+#line 2670 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 101:
-#line 702 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.ival)=(yyvsp[0].ival); }
-#line 2581 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 703 "smarts.yy"
+                    { (yyval.ival)=(yyvsp[0].ival); }
+#line 2676 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 102:
-#line 703 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.ival)=1; }
-#line 2587 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 704 "smarts.yy"
+             { (yyval.ival)=1; }
+#line 2682 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 103:
-#line 704 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.ival)=-2; }
-#line 2593 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 705 "smarts.yy"
+                          { (yyval.ival)=-2; }
+#line 2688 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 104:
-#line 705 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.ival)=-(yyvsp[0].ival); }
-#line 2599 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 706 "smarts.yy"
+                     { (yyval.ival)=-(yyvsp[0].ival); }
+#line 2694 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 105:
-#line 706 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.ival)=-1; }
-#line 2605 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 707 "smarts.yy"
+              { (yyval.ival)=-1; }
+#line 2700 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 107:
-#line 711 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.ival) = (yyvsp[-1].ival)*10+(yyvsp[0].ival); }
-#line 2611 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 712 "smarts.yy"
+                                          { (yyval.ival) = (yyvsp[-1].ival)*10+(yyvsp[0].ival); }
+#line 2706 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 108:
-#line 712 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.ival) = (yyvsp[-1].ival); }
-#line 2617 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 713 "smarts.yy"
+                                                         { (yyval.ival) = (yyvsp[-1].ival); }
+#line 2712 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 109:
-#line 713 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.ival) = (yyvsp[-2].ival)*10+(yyvsp[-1].ival); }
-#line 2623 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 714 "smarts.yy"
+                                                               { (yyval.ival) = (yyvsp[-2].ival)*10+(yyvsp[-1].ival); }
+#line 2718 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 110:
-#line 714 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.ival) = (yyvsp[-3].ival)*100+(yyvsp[-2].ival)*10+(yyvsp[-1].ival); }
-#line 2629 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 715 "smarts.yy"
+                                                                     { (yyval.ival) = (yyvsp[-3].ival)*100+(yyvsp[-2].ival)*10+(yyvsp[-1].ival); }
+#line 2724 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 111:
-#line 715 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.ival) = (yyvsp[-4].ival)*1000+(yyvsp[-3].ival)*100+(yyvsp[-2].ival)*10+(yyvsp[-1].ival); }
-#line 2635 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 716 "smarts.yy"
+                                                                           { (yyval.ival) = (yyvsp[-4].ival)*1000+(yyvsp[-3].ival)*100+(yyvsp[-2].ival)*10+(yyvsp[-1].ival); }
+#line 2730 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 112:
-#line 716 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.ival) = (yyvsp[-5].ival)*10000+(yyvsp[-4].ival)*1000+(yyvsp[-3].ival)*100+(yyvsp[-2].ival)*10+(yyvsp[-1].ival); }
-#line 2641 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 717 "smarts.yy"
+                                                                                 { (yyval.ival) = (yyvsp[-5].ival)*10000+(yyvsp[-4].ival)*1000+(yyvsp[-3].ival)*100+(yyvsp[-2].ival)*10+(yyvsp[-1].ival); }
+#line 2736 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
   case 116:
-#line 727 "smarts.yy" /* yacc.c:1646  */
-    { (yyval.ival) = (yyvsp[-1].ival)*10 + (yyvsp[0].ival); }
-#line 2647 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 728 "smarts.yy"
+                       { 
+    if((yyvsp[-1].ival) >= std::numeric_limits<std::int32_t>::max()/10 || 
+     (yyvsp[-1].ival)*10 >= std::numeric_limits<std::int32_t>::max()-(yyvsp[0].ival) ){
+     yysmarts_error(input,molList,lastAtom,lastBond,scanner,start_token,"number too large");
+     YYABORT;
+  }
+  (yyval.ival) = (yyvsp[-1].ival)*10 + (yyvsp[0].ival); }
+#line 2748 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
     break;
 
 
-#line 2651 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp" /* yacc.c:1646  */
+#line 2752 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.cpp"
+
       default: break;
     }
   /* User semantic actions sometimes alter yychar, and that requires
      that yytoken be updated with the new translation.  We take the
      approach of translating immediately before every use of yytoken.
      One alternative is translating here after every semantic action,
      but that translation would be missed if the semantic action invokes
      YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
      if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
      incorrect destructor might then be invoked immediately.  In the
      case of YYERROR or YYBACKUP, subsequent parser actions might lead
      to an incorrect destructor call or verbose syntax error message
      before the lookahead is translated.  */
   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
 
   YYPOPSTACK (yylen);
   yylen = 0;
   YY_STACK_PRINT (yyss, yyssp);
 
   *++yyvsp = yyval;
 
   /* Now 'shift' the result of the reduction.  Determine what state
      that goes to, based on the state we popped back to and the rule
      number reduced by.  */
-
-  yyn = yyr1[yyn];
-
-  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
-  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
-    yystate = yytable[yystate];
-  else
-    yystate = yydefgoto[yyn - YYNTOKENS];
+  {
+    const int yylhs = yyr1[yyn] - YYNTOKENS;
+    const int yyi = yypgoto[yylhs] + *yyssp;
+    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
+               ? yytable[yyi]
+               : yydefgoto[yylhs]);
+  }
 
   goto yynewstate;
 
 
 /*--------------------------------------.
 | yyerrlab -- here on detecting error.  |
 `--------------------------------------*/
 yyerrlab:
   /* Make sure we have latest lookahead translation.  See comments at
      user semantic actions for why this is necessary.  */
   yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
 
   /* If not already recovering from an error, report this error.  */
   if (!yyerrstatus)
     {
       ++yynerrs;
 #if ! YYERROR_VERBOSE
       yyerror (input, molList, lastAtom, lastBond, scanner, start_token, YY_("syntax error"));
 #else
 # define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                         yyssp, yytoken)
       {
         char const *yymsgp = YY_("syntax error");
         int yysyntax_error_status;
         yysyntax_error_status = YYSYNTAX_ERROR;
         if (yysyntax_error_status == 0)
           yymsgp = yymsg;
         else if (yysyntax_error_status == 1)
           {
             if (yymsg != yymsgbuf)
               YYSTACK_FREE (yymsg);
-            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
+            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
             if (!yymsg)
               {
                 yymsg = yymsgbuf;
                 yymsg_alloc = sizeof yymsgbuf;
                 yysyntax_error_status = 2;
               }
             else
               {
                 yysyntax_error_status = YYSYNTAX_ERROR;
                 yymsgp = yymsg;
               }
           }
         yyerror (input, molList, lastAtom, lastBond, scanner, start_token, yymsgp);
         if (yysyntax_error_status == 2)
           goto yyexhaustedlab;
       }
 # undef YYSYNTAX_ERROR
 #endif
     }
 
 
 
   if (yyerrstatus == 3)
     {
       /* If just tried and failed to reuse lookahead token after an
          error, discard it.  */
 
       if (yychar <= YYEOF)
         {
           /* Return failure if at end of input.  */
           if (yychar == YYEOF)
             YYABORT;
         }
       else
         {
           yydestruct ("Error: discarding",
                       yytoken, &yylval, input, molList, lastAtom, lastBond, scanner, start_token);
           yychar = YYEMPTY;
         }
     }
 
   /* Else will try to reuse lookahead token after shifting the error
      token.  */
   goto yyerrlab1;
 
 
 /*---------------------------------------------------.
 | yyerrorlab -- error raised explicitly by YYERROR.  |
 `---------------------------------------------------*/
 yyerrorlab:
-
-  /* Pacify compilers like GCC when the user code never invokes
-     YYERROR and the label yyerrorlab therefore never appears in user
-     code.  */
-  if (/*CONSTCOND*/ 0)
-     goto yyerrorlab;
+  /* Pacify compilers when the user code never invokes YYERROR and the
+     label yyerrorlab therefore never appears in user code.  */
+  if (0)
+    YYERROR;
 
   /* Do not reclaim the symbols of the rule whose action triggered
      this YYERROR.  */
   YYPOPSTACK (yylen);
   yylen = 0;
   YY_STACK_PRINT (yyss, yyssp);
   yystate = *yyssp;
   goto yyerrlab1;
 
 
 /*-------------------------------------------------------------.
 | yyerrlab1 -- common code for both syntax error and YYERROR.  |
 `-------------------------------------------------------------*/
@@ -2826,18 +2924,20 @@ yyerrlab1:
 /*-------------------------------------.
 | yyacceptlab -- YYACCEPT comes here.  |
 `-------------------------------------*/
 yyacceptlab:
   yyresult = 0;
   goto yyreturn;
 
+
 /*-----------------------------------.
 | yyabortlab -- YYABORT comes here.  |
 `-----------------------------------*/
 yyabortlab:
   yyresult = 1;
   goto yyreturn;
 
+
 #if !defined yyoverflow || YYERROR_VERBOSE
 /*-------------------------------------------------.
 | yyexhaustedlab -- memory exhaustion comes here.  |
 `-------------------------------------------------*/
@@ -2847,34 +2947,38 @@ yyexhaustedlab:
   /* Fall through.  */
 #endif
 
+
+/*-----------------------------------------------------.
+| yyreturn -- parsing is finished, return the result.  |
+`-----------------------------------------------------*/
 yyreturn:
   if (yychar != YYEMPTY)
     {
       /* Make sure we have latest lookahead translation.  See comments at
          user semantic actions for why this is necessary.  */
       yytoken = YYTRANSLATE (yychar);
       yydestruct ("Cleanup: discarding lookahead",
                   yytoken, &yylval, input, molList, lastAtom, lastBond, scanner, start_token);
     }
   /* Do not reclaim the symbols of the rule whose action triggered
      this YYABORT or YYACCEPT.  */
   YYPOPSTACK (yylen);
   YY_STACK_PRINT (yyss, yyssp);
   while (yyssp != yyss)
     {
       yydestruct ("Cleanup: popping",
-                  yystos[*yyssp], yyvsp, input, molList, lastAtom, lastBond, scanner, start_token);
+                  yystos[+*yyssp], yyvsp, input, molList, lastAtom, lastBond, scanner, start_token);
       YYPOPSTACK (1);
     }
 #ifndef yyoverflow
   if (yyss != yyssa)
     YYSTACK_FREE (yyss);
 #endif
 #if YYERROR_VERBOSE
   if (yymsg != yymsgbuf)
     YYSTACK_FREE (yymsg);
 #endif
   return yyresult;
 }
-#line 734 "smarts.yy" /* yacc.c:1906  */
+#line 741 "smarts.yy"
 
diff --git a/Code/GraphMol/SmilesParse/smarts.tab.hpp.cmake b/Code/GraphMol/SmilesParse/smarts.tab.hpp.cmake
index 99ec0ae8a..46fb6115b 100644
--- a/Code/GraphMol/SmilesParse/smarts.tab.hpp.cmake
+++ b/Code/GraphMol/SmilesParse/smarts.tab.hpp.cmake
@@ -1,111 +1,114 @@
-/* A Bison parser, made by GNU Bison 3.0.4.  */
+/* A Bison parser, made by GNU Bison 3.5.1.  */
 
 /* Bison interface for Yacc-like parsers in C
 
-   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.
+   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
+   Inc.
 
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
    under terms of your choice, so long as that work isn't itself a
    parser generator using the skeleton or a modified version thereof
    as a parser skeleton.  Alternatively, if you modify or redistribute
    the parser skeleton itself, you may (at your option) remove this
    special exception, which will cause the skeleton and the resulting
    Bison output files to be licensed under the GNU General Public
    License without this special exception.
 
    This special exception was added by the Free Software Foundation in
    version 2.2 of Bison.  */
 
+/* Undocumented macros, especially those whose name start with YY_,
+   are private implementation details.  Do not rely on them.  */
+
 #ifndef YY_YYSMARTS_SCRATCH_RDKIT_GIT_CODE_GRAPHMOL_SMILESPARSE_SMARTS_TAB_HPP_INCLUDED
 # define YY_YYSMARTS_SCRATCH_RDKIT_GIT_CODE_GRAPHMOL_SMILESPARSE_SMARTS_TAB_HPP_INCLUDED
 /* Debug traces.  */
 #ifndef YYDEBUG
 # define YYDEBUG 0
 #endif
 #if YYDEBUG
 extern int yysmarts_debug;
 #endif
 
 /* Token type.  */
 #ifndef YYTOKENTYPE
 # define YYTOKENTYPE
   enum yytokentype
   {
     START_MOL = 258,
     START_ATOM = 259,
     START_BOND = 260,
     AROMATIC_ATOM_TOKEN = 261,
     ORGANIC_ATOM_TOKEN = 262,
     ATOM_TOKEN = 263,
     SIMPLE_ATOM_QUERY_TOKEN = 264,
     COMPLEX_ATOM_QUERY_TOKEN = 265,
     RINGSIZE_ATOM_QUERY_TOKEN = 266,
     RINGBOND_ATOM_QUERY_TOKEN = 267,
     IMPLICIT_H_ATOM_QUERY_TOKEN = 268,
     HYB_TOKEN = 269,
     HETERONEIGHBOR_ATOM_QUERY_TOKEN = 270,
     ALIPHATIC = 271,
     ALIPHATICHETERONEIGHBOR_ATOM_QUERY_TOKEN = 272,
     ZERO_TOKEN = 273,
     NONZERO_DIGIT_TOKEN = 274,
     GROUP_OPEN_TOKEN = 275,
     GROUP_CLOSE_TOKEN = 276,
     SEPARATOR_TOKEN = 277,
     RANGE_OPEN_TOKEN = 278,
     RANGE_CLOSE_TOKEN = 279,
     HASH_TOKEN = 280,
     MINUS_TOKEN = 281,
     PLUS_TOKEN = 282,
     CHIRAL_MARKER_TOKEN = 283,
     CHI_CLASS_TOKEN = 284,
     CHI_CLASS_OH_TOKEN = 285,
     H_TOKEN = 286,
     AT_TOKEN = 287,
     PERCENT_TOKEN = 288,
     ATOM_OPEN_TOKEN = 289,
     ATOM_CLOSE_TOKEN = 290,
     NOT_TOKEN = 291,
     AND_TOKEN = 292,
     OR_TOKEN = 293,
     SEMI_TOKEN = 294,
     BEGIN_RECURSE = 295,
     END_RECURSE = 296,
     COLON_TOKEN = 297,
     UNDERSCORE_TOKEN = 298,
     BOND_TOKEN = 299,
     EOS_TOKEN = 300
   };
 #endif
 
 /* Value type.  */
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
-
 union YYSTYPE
 {
-#line 67 "smarts.yy" /* yacc.c:1909  */
+#line 68 "smarts.yy"
 
   int                      moli;
   RDKit::QueryAtom * atom;
   RDKit::QueryBond * bond;
   int                      ival;
 
-#line 107 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.hpp" /* yacc.c:1909  */
-};
+#line 110 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.hpp"
 
+};
 typedef union YYSTYPE YYSTYPE;
 # define YYSTYPE_IS_TRIVIAL 1
 # define YYSTYPE_IS_DECLARED 1
@@ -115,11 +118,11 @@ typedef union YYSTYPE YYSTYPE;
 
 int yysmarts_parse (const char *input, std::vector<RDKit::RWMol *> *molList, RDKit::Atom* &lastAtom, RDKit::Bond* &lastBond, void *scanner, int& start_token);
 /* "%code provides" blocks.  */
-#line 62 "smarts.yy" /* yacc.c:1909  */
+#line 63 "smarts.yy"
 
 #define YY_DECL int yylex \
                (YYSTYPE * yylval_param , yyscan_t yyscanner, int& start_token)
 
-#line 124 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.hpp" /* yacc.c:1909  */
+#line 127 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smarts.tab.hpp"
 
 #endif /* !YY_YYSMARTS_SCRATCH_RDKIT_GIT_CODE_GRAPHMOL_SMILESPARSE_SMARTS_TAB_HPP_INCLUDED  */
diff --git a/Code/GraphMol/SmilesParse/smarts.yy b/Code/GraphMol/SmilesParse/smarts.yy
index d9d0ba648..735e84865 100644
--- a/Code/GraphMol/SmilesParse/smarts.yy
+++ b/Code/GraphMol/SmilesParse/smarts.yy
@@ -725,7 +725,13 @@ number:  ZERO_TOKEN
 
 /* --------------------------------------------------------------- */
 nonzero_number:  NONZERO_DIGIT_TOKEN
-| nonzero_number digit { $$ = $1*10 + $2; }
+| nonzero_number digit { 
+    if($1 >= std::numeric_limits<std::int32_t>::max()/10 || 
+     $1*10 >= std::numeric_limits<std::int32_t>::max()-$2 ){
+     yysmarts_error(input,molList,lastAtom,lastBond,scanner,start_token,"number too large");
+     YYABORT;
+  }
+  $$ = $1*10 + $2; }
 ;
 
 digit: NONZERO_DIGIT_TOKEN
diff --git a/Code/GraphMol/SmilesParse/smatest.cpp b/Code/GraphMol/SmilesParse/smatest.cpp
index 32cafed03..78f037710 100644
--- a/Code/GraphMol/SmilesParse/smatest.cpp
+++ b/Code/GraphMol/SmilesParse/smatest.cpp
@@ -147,36 +147,38 @@ void testPass() {
 void testFail() {
   int i = 0;
   Mol *mol;
 
   BOOST_LOG(rdInfoLog) << "-------------------------------------" << std::endl;
   BOOST_LOG(rdInfoLog) << "Testing patterns which should fail to parse."
                        << std::endl;
   BOOST_LOG(rdInfoLog) << "\tExpect Parse error messages" << std::endl;
 
   // alternate good and bad smiles here to ensure that the parser can resume
   // parsing
   // on good input:
-  string smis[] = {"CC=(CO)C", "CC(=CO)C", "C1CC",  "C1CC1", "fff", "C1CC1",
+  string smis[] = {"CC=(CO)C", "CC(=CO)C", "C1CC",  "C1CC1",
+                   "fff",      "C1CC1",
                    "C=0",  // part of sf.net issue 2525792
                    "C1CC1",
                    "C0",  // part of sf.net issue 2525792
                    "C1CC1",
                    "C-0",  // part of sf.net issue 2525792
                    "C1CC1",
                    "C+0",  // part of sf.net issue 2525792
-                   "C1CC1",    "[HQ]",     "C1CC1", "EOS"};
+                   "C1CC1",    "[HQ]",     "C1CC1", "[55555555555555C]",
+                   "C1CC1",    "EOS"};
   while (smis[i] != "EOS") {
     string smi = smis[i];
     boost::logging::disable_logs("rdApp.error");
     mol = SmartsToMol(smi);
     boost::logging::enable_logs("rdApp.error");
     if (!(i % 2)) {
       CHECK_INVARIANT(!mol, smi);
     } else {
       CHECK_INVARIANT(mol, smi);
     }
     delete mol;
     i++;
   }
   BOOST_LOG(rdInfoLog) << "\tdone" << std::endl;
 }
diff --git a/Code/GraphMol/SmilesParse/smiles.tab.cpp.cmake b/Code/GraphMol/SmilesParse/smiles.tab.cpp.cmake
index c6b6457dc..b85438e81 100644
--- a/Code/GraphMol/SmilesParse/smiles.tab.cpp.cmake
+++ b/Code/GraphMol/SmilesParse/smiles.tab.cpp.cmake
@@ -1,95 +1,96 @@
 /* A Bison parser, made by GNU Bison 3.5.1.  */
 
 /* Bison implementation for Yacc-like parsers in C
 
    Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
    Inc.
 
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
    under terms of your choice, so long as that work isn't itself a
    parser generator using the skeleton or a modified version thereof
    as a parser skeleton.  Alternatively, if you modify or redistribute
    the parser skeleton itself, you may (at your option) remove this
    special exception, which will cause the skeleton and the resulting
    Bison output files to be licensed under the GNU General Public
    License without this special exception.
 
    This special exception was added by the Free Software Foundation in
    version 2.2 of Bison.  */
 
 /* C LALR(1) parser skeleton written by Richard Stallman, by
    simplifying the original so-called "semantic" parser.  */
 
 /* All symbols defined below should begin with yy or YY, to avoid
    infringing on user name space.  This should be done even for local
    variables, as they might otherwise be expanded by user macros.
    There are some unavoidable exceptions within include files to
    define necessary library symbols; they are noted "INFRINGES ON
    USER NAME SPACE" below.  */
 
 /* Undocumented macros, especially those whose name start with YY_,
    are private implementation details.  Do not rely on them.  */
 
 /* Identify Bison output.  */
 #define YYBISON 1
 
 /* Bison version.  */
 #define YYBISON_VERSION "3.5.1"
 
 /* Skeleton name.  */
 #define YYSKELETON_NAME "yacc.c"
 
 /* Pure parsers.  */
 #define YYPURE 2
 
 /* Push parsers.  */
 #define YYPUSH 0
 
 /* Pull parsers.  */
 #define YYPULL 1
 
 
 /* Substitute the variable and function names.  */
 #define yyparse         yysmiles_parse
 #define yylex           yysmiles_lex
 #define yyerror         yysmiles_error
 #define yydebug         yysmiles_debug
 #define yynerrs         yysmiles_nerrs
 
 /* First part of user prologue.  */
 #line 1 "smiles.yy"
 
 
   // $Id$
   //
   //  Copyright (C) 2001-2016 Randal Henne, Greg Landrum and Rational Discovery LLC
   //
   //   @@ All Rights Reserved  @@
   //
 
 #include <cstring>
 #include <iostream>
 #include <vector>
 #include <list>
+#include <limits>
 
 #include <GraphMol/RDKitBase.h>
 #include <GraphMol/SmilesParse/SmilesParse.h>
 #include <GraphMol/SmilesParse/SmilesParseOps.h>
 #include <RDGeneral/RDLog.h>
 
 #define YYDEBUG 1
 #include "smiles.tab.hpp"
@@ -130,55 +131,55 @@ void
 yysmiles_error( const char *input,
                 std::vector<RDKit::RWMol *> *ms,
                 std::list<unsigned int> *branchPoints,
 		void *scanner,int start_token, const char * msg )
 {
   RDUNUSED_PARAM(input);
   RDUNUSED_PARAM(branchPoints);
   RDUNUSED_PARAM(scanner);
   RDUNUSED_PARAM(start_token);
   yyErrorCleanup(ms);
   BOOST_LOG(rdErrorLog) << "SMILES Parse Error: " << msg << " while parsing: " << input << std::endl;
 }
 
 
 
-#line 146 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 147 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
 
 # ifndef YY_CAST
 #  ifdef __cplusplus
 #   define YY_CAST(Type, Val) static_cast<Type> (Val)
 #   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
 #  else
 #   define YY_CAST(Type, Val) ((Type) (Val))
 #   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
 #  endif
 # endif
 # ifndef YY_NULLPTR
 #  if defined __cplusplus
 #   if 201103L <= __cplusplus
 #    define YY_NULLPTR nullptr
 #   else
 #    define YY_NULLPTR 0
 #   endif
 #  else
 #   define YY_NULLPTR ((void*)0)
 #  endif
 # endif
 
 /* Enabling verbose error messages.  */
 #ifdef YYERROR_VERBOSE
 # undef YYERROR_VERBOSE
 # define YYERROR_VERBOSE 1
 #else
 # define YYERROR_VERBOSE 0
 #endif
 
 /* Use api.header.include to #include this header
    instead of duplicating it here.  */
 #ifndef YY_YYSMILES_SCRATCH_RDKIT_GIT_CODE_GRAPHMOL_SMILESPARSE_SMILES_TAB_HPP_INCLUDED
 # define YY_YYSMILES_SCRATCH_RDKIT_GIT_CODE_GRAPHMOL_SMILESPARSE_SMILES_TAB_HPP_INCLUDED
 /* Debug traces.  */
 #ifndef YYDEBUG
 # define YYDEBUG 0
 #endif
 #if YYDEBUG
@@ -222,15 +223,15 @@ extern int yysmiles_debug;
 /* Value type.  */
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 union YYSTYPE
 {
-#line 88 "smiles.yy"
+#line 89 "smiles.yy"
 
   int                      moli;
   RDKit::Atom * atom;
   RDKit::Bond * bond;
   int                      ival;
 
-#line 234 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 235 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
 
 };
 typedef union YYSTYPE YYSTYPE;
@@ -242,36 +243,36 @@ typedef union YYSTYPE YYSTYPE;
 
 int yysmiles_parse (const char *input, std::vector<RDKit::RWMol *> *molList, RDKit::Atom* &lastAtom, RDKit::Bond* &lastBond, std::list<unsigned int> *branchPoints, void *scanner, int& start_token);
 /* "%code provides" blocks.  */
-#line 83 "smiles.yy"
+#line 84 "smiles.yy"
 
 #define YY_DECL int yylex \
                (YYSTYPE * yylval_param , yyscan_t yyscanner, int& start_token)
 
-#line 251 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 252 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
 
 #endif /* !YY_YYSMILES_SCRATCH_RDKIT_GIT_CODE_GRAPHMOL_SMILESPARSE_SMILES_TAB_HPP_INCLUDED  */
 
 
 
 #ifdef short
 # undef short
 #endif
 
 /* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
    <limits.h> and (if available) <stdint.h> are included
    so that the code can choose integer types of a good width.  */
 
 #ifndef __PTRDIFF_MAX__
 # include <limits.h> /* INFRINGES ON USER NAME SPACE */
 # if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
 #  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
 #  define YY_STDINT_H
 # endif
 #endif
 
 /* Narrow types that promote to a signed type and that can represent a
    signed or unsigned integer of at least N bits.  In tables they can
    save space and decrease cache pressure.  Promoting to a signed type
    helps avoid bugs in integer arithmetic.  */
 
 #ifdef __INT_LEAST8_MAX__
@@ -613,18 +614,18 @@ static const yytype_int8 yytranslate[] =
 #if YYDEBUG
   /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
 static const yytype_int16 yyrline[] =
 {
-       0,   118,   118,   121,   125,   128,   132,   136,   139,   144,
-     147,   155,   156,   157,   158,   166,   177,   187,   207,   215,
-     221,   239,   260,   276,   286,   306,   314,   327,   328,   334,
-     335,   341,   349,   350,   351,   352,   353,   354,   355,   359,
-     360,   361,   362,   363,   364,   365,   366,   367,   371,   372,
-     373,   377,   378,   379,   380,   381,   382,   386,   387,   391,
-     392,   393,   394,   395,   396,   397,   401,   402,   406,   407,
-     410,   411
+       0,   119,   119,   122,   126,   129,   133,   137,   140,   145,
+     148,   156,   157,   158,   159,   167,   178,   188,   208,   216,
+     222,   240,   261,   277,   287,   307,   315,   328,   329,   335,
+     336,   342,   350,   351,   352,   353,   354,   355,   356,   360,
+     361,   362,   363,   364,   365,   366,   367,   368,   372,   373,
+     374,   378,   379,   380,   381,   382,   383,   387,   388,   392,
+     393,   394,   395,   396,   397,   398,   402,   403,   407,   408,
+     419,   420
 };
 #endif
 
 #if YYDEBUG || YYERROR_VERBOSE || 0
 /* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
    First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
@@ -1230,95 +1231,95 @@ static void
 yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, const char *input, std::vector<RDKit::RWMol *> *molList, RDKit::Atom* &lastAtom, RDKit::Bond* &lastBond, std::list<unsigned int> *branchPoints, void *scanner, int& start_token)
 {
   YYUSE (yyvaluep);
   YYUSE (input);
   YYUSE (molList);
   YYUSE (lastAtom);
   YYUSE (lastBond);
   YYUSE (branchPoints);
   YYUSE (scanner);
   YYUSE (start_token);
   if (!yymsg)
     yymsg = "Deleting";
   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
 
   YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   switch (yytype)
     {
     case 6: /* AROMATIC_ATOM_TOKEN  */
-#line 109 "smiles.yy"
+#line 110 "smiles.yy"
             { delete ((*yyvaluep).atom); }
-#line 1251 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1252 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
         break;
 
     case 7: /* ATOM_TOKEN  */
-#line 109 "smiles.yy"
+#line 110 "smiles.yy"
             { delete ((*yyvaluep).atom); }
-#line 1257 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1258 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
         break;
 
     case 8: /* ORGANIC_ATOM_TOKEN  */
-#line 109 "smiles.yy"
+#line 110 "smiles.yy"
             { delete ((*yyvaluep).atom); }
-#line 1263 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1264 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
         break;
 
     case 25: /* BOND_TOKEN  */
-#line 110 "smiles.yy"
+#line 111 "smiles.yy"
             { delete ((*yyvaluep).bond); }
-#line 1269 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1270 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
         break;
 
     case 33: /* bondd  */
-#line 110 "smiles.yy"
+#line 111 "smiles.yy"
             { delete ((*yyvaluep).bond); }
-#line 1275 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1276 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
         break;
 
     case 34: /* atomd  */
-#line 109 "smiles.yy"
+#line 110 "smiles.yy"
             { delete ((*yyvaluep).atom); }
-#line 1281 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1282 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
         break;
 
     case 35: /* charge_element  */
-#line 109 "smiles.yy"
+#line 110 "smiles.yy"
             { delete ((*yyvaluep).atom); }
-#line 1287 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1288 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
         break;
 
     case 36: /* h_element  */
-#line 109 "smiles.yy"
+#line 110 "smiles.yy"
             { delete ((*yyvaluep).atom); }
-#line 1293 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1294 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
         break;
 
     case 37: /* chiral_element  */
-#line 109 "smiles.yy"
+#line 110 "smiles.yy"
             { delete ((*yyvaluep).atom); }
-#line 1299 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1300 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
         break;
 
     case 38: /* element  */
-#line 109 "smiles.yy"
+#line 110 "smiles.yy"
             { delete ((*yyvaluep).atom); }
-#line 1305 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1306 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
         break;
 
     case 39: /* simple_atom  */
-#line 109 "smiles.yy"
+#line 110 "smiles.yy"
             { delete ((*yyvaluep).atom); }
-#line 1311 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1312 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
         break;
 
       default:
         break;
     }
   YY_IGNORE_MAYBE_UNINITIALIZED_END
 }
 
 
 
 
 /*----------.
 | yyparse.  |
 `----------*/
@@ -1560,549 +1561,557 @@ yydefault:
 /*-----------------------------.
 | yyreduce -- do a reduction.  |
 `-----------------------------*/
 yyreduce:
   /* yyn is the number of a rule to reduce with.  */
   yylen = yyr2[yyn];
 
   /* If YYLEN is nonzero, implement the default value of the action:
      '$$ = $1'.
 
      Otherwise, the following line sets YYVAL to garbage.
      This behavior is undocumented and Bison
      users should not rely upon it.  Assigning to YYVAL
      unconditionally makes the parser a bit smaller, and it avoids a
      GCC warning that YYVAL may be used uninitialized.  */
   yyval = yyvsp[1-yylen];
 
 
   YY_REDUCE_PRINT (yyn);
   switch (yyn)
     {
   case 2:
-#line 118 "smiles.yy"
+#line 119 "smiles.yy"
               {
 // the molList has already been updated, no need to do anything
 }
-#line 1587 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1588 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 3:
-#line 121 "smiles.yy"
+#line 122 "smiles.yy"
                              {
   lastAtom = (yyvsp[-1].atom);
   YYACCEPT;
 }
-#line 1596 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1597 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 4:
-#line 125 "smiles.yy"
+#line 126 "smiles.yy"
                           {
   YYABORT;
 }
-#line 1604 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1605 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 5:
-#line 128 "smiles.yy"
+#line 129 "smiles.yy"
                              {
   lastBond = (yyvsp[-1].bond);
   YYACCEPT;
 }
-#line 1613 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1614 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 6:
-#line 132 "smiles.yy"
+#line 133 "smiles.yy"
                    {
   delete (yyvsp[0].bond);
   YYABORT;
 }
-#line 1622 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1623 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 7:
-#line 136 "smiles.yy"
+#line 137 "smiles.yy"
              {
   YYABORT;
 }
-#line 1630 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1631 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 8:
-#line 139 "smiles.yy"
+#line 140 "smiles.yy"
                             {
   yyerrok;
   yyErrorCleanup(molList);
   YYABORT;
 }
-#line 1640 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1641 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 9:
-#line 144 "smiles.yy"
+#line 145 "smiles.yy"
                        {
   YYACCEPT;
 }
-#line 1648 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1649 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 10:
-#line 147 "smiles.yy"
+#line 148 "smiles.yy"
                   {
   yyerrok;
   yyErrorCleanup(molList);
   YYABORT;
 }
-#line 1658 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1659 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 14:
-#line 158 "smiles.yy"
+#line 159 "smiles.yy"
                  {
   delete (yyvsp[0].atom);
   YYABORT;
 }
-#line 1667 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1668 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 15:
-#line 166 "smiles.yy"
+#line 167 "smiles.yy"
            {
   int sz     = molList->size();
   molList->resize( sz + 1);
   (*molList)[ sz ] = new RWMol();
   RDKit::RWMol *curMol = (*molList)[ sz ];
   (yyvsp[0].atom)->setProp(RDKit::common_properties::_SmilesStart,1);
   curMol->addAtom((yyvsp[0].atom), true, true);
   //delete $1;
   (yyval.moli) = sz;
 }
-#line 1682 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1683 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 16:
-#line 177 "smiles.yy"
+#line 178 "smiles.yy"
                   {
   RWMol *mp = (*molList)[(yyval.moli)];
   Atom *a1 = mp->getActiveAtom();
   int atomIdx1=a1->getIdx();
   int atomIdx2=mp->addAtom((yyvsp[0].atom),true,true);
   mp->addBond(atomIdx1,atomIdx2,
 	      SmilesParseOps::GetUnspecifiedBondType(mp,a1,mp->getAtomWithIdx(atomIdx2)));
   //delete $2;
 }
-#line 1696 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1697 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 17:
-#line 187 "smiles.yy"
+#line 188 "smiles.yy"
                         {
   RWMol *mp = (*molList)[(yyval.moli)];
   int atomIdx1 = mp->getActiveAtom()->getIdx();
   int atomIdx2 = mp->addAtom((yyvsp[0].atom),true,true);
   if( (yyvsp[-1].bond)->getBondType() == Bond::DATIVER ){
     (yyvsp[-1].bond)->setBeginAtomIdx(atomIdx1);
     (yyvsp[-1].bond)->setEndAtomIdx(atomIdx2);
     (yyvsp[-1].bond)->setBondType(Bond::DATIVE);
   }else if ( (yyvsp[-1].bond)->getBondType() == Bond::DATIVEL ){
     (yyvsp[-1].bond)->setBeginAtomIdx(atomIdx2);
     (yyvsp[-1].bond)->setEndAtomIdx(atomIdx1);
     (yyvsp[-1].bond)->setBondType(Bond::DATIVE);
   } else {
     (yyvsp[-1].bond)->setBeginAtomIdx(atomIdx1);
     (yyvsp[-1].bond)->setEndAtomIdx(atomIdx2);
   }
   mp->addBond((yyvsp[-1].bond),true);
   //delete $3;
 }
-#line 1720 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1721 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 18:
-#line 207 "smiles.yy"
+#line 208 "smiles.yy"
                         {
   RWMol *mp = (*molList)[(yyval.moli)];
   int atomIdx1 = mp->getActiveAtom()->getIdx();
   int atomIdx2 = mp->addAtom((yyvsp[0].atom),true,true);
   mp->addBond(atomIdx1,atomIdx2,Bond::SINGLE);
   //delete $3;
 }
-#line 1732 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1733 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 19:
-#line 215 "smiles.yy"
+#line 216 "smiles.yy"
                             {
   RWMol *mp = (*molList)[(yyval.moli)];
   (yyvsp[0].atom)->setProp(RDKit::common_properties::_SmilesStart,1,true);
   mp->addAtom((yyvsp[0].atom),true,true);
 }
-#line 1742 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1743 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 20:
-#line 221 "smiles.yy"
+#line 222 "smiles.yy"
                   {
   RWMol * mp = (*molList)[(yyval.moli)];
   Atom *atom=mp->getActiveAtom();
   mp->setAtomBookmark(atom,(yyvsp[0].ival));
 
   Bond *newB = mp->createPartialBond(atom->getIdx(),
 				     Bond::UNSPECIFIED);
   mp->setBondBookmark(newB,(yyvsp[0].ival));
   newB->setProp(RDKit::common_properties::_unspecifiedOrder,1);
 
   SmilesParseOps::CheckRingClosureBranchStatus(atom,mp);
 
   INT_VECT tmp;
   atom->getPropIfPresent(RDKit::common_properties::_RingClosures,tmp);
   tmp.push_back(-((yyvsp[0].ival)+1));
   atom->setProp(RDKit::common_properties::_RingClosures,tmp);
 }
-#line 1764 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1765 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 21:
-#line 239 "smiles.yy"
+#line 240 "smiles.yy"
                              {
   RWMol * mp = (*molList)[(yyval.moli)];
   Atom *atom=mp->getActiveAtom();
   Bond *newB = mp->createPartialBond(atom->getIdx(),
 				     (yyvsp[-1].bond)->getBondType());
   if((yyvsp[-1].bond)->hasProp(RDKit::common_properties::_unspecifiedOrder)){
     newB->setProp(RDKit::common_properties::_unspecifiedOrder,1);
   }
   newB->setBondDir((yyvsp[-1].bond)->getBondDir());
   mp->setAtomBookmark(atom,(yyvsp[0].ival));
   mp->setBondBookmark(newB,(yyvsp[0].ival));
 
   SmilesParseOps::CheckRingClosureBranchStatus(atom,mp);
 
   INT_VECT tmp;
   atom->getPropIfPresent(RDKit::common_properties::_RingClosures,tmp);
   tmp.push_back(-((yyvsp[0].ival)+1));
   atom->setProp(RDKit::common_properties::_RingClosures,tmp);
   delete (yyvsp[-1].bond);
 }
-#line 1789 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1790 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 22:
-#line 260 "smiles.yy"
+#line 261 "smiles.yy"
                               {
   RWMol * mp = (*molList)[(yyval.moli)];
   Atom *atom=mp->getActiveAtom();
   Bond *newB = mp->createPartialBond(atom->getIdx(),
 				     Bond::SINGLE);
   mp->setAtomBookmark(atom,(yyvsp[0].ival));
   mp->setBondBookmark(newB,(yyvsp[0].ival));
 
   SmilesParseOps::CheckRingClosureBranchStatus(atom,mp);
 
   INT_VECT tmp;
   atom->getPropIfPresent(RDKit::common_properties::_RingClosures,tmp);
   tmp.push_back(-((yyvsp[0].ival)+1));
   atom->setProp(RDKit::common_properties::_RingClosures,tmp);
 }
-#line 1809 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1810 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 23:
-#line 276 "smiles.yy"
+#line 277 "smiles.yy"
                              {
   RWMol *mp = (*molList)[(yyval.moli)];
   Atom *a1 = mp->getActiveAtom();
   int atomIdx1=a1->getIdx();
   int atomIdx2=mp->addAtom((yyvsp[0].atom),true,true);
   mp->addBond(atomIdx1,atomIdx2,
 	      SmilesParseOps::GetUnspecifiedBondType(mp,a1,mp->getAtomWithIdx(atomIdx2)));
   //delete $3;
   branchPoints->push_back(atomIdx1);
 }
-#line 1824 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1825 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 24:
-#line 286 "smiles.yy"
+#line 287 "smiles.yy"
                                          {
   RWMol *mp = (*molList)[(yyval.moli)];
   int atomIdx1 = mp->getActiveAtom()->getIdx();
   int atomIdx2 = mp->addAtom((yyvsp[0].atom),true,true);
   if( (yyvsp[-1].bond)->getBondType() == Bond::DATIVER ){
     (yyvsp[-1].bond)->setBeginAtomIdx(atomIdx1);
     (yyvsp[-1].bond)->setEndAtomIdx(atomIdx2);
     (yyvsp[-1].bond)->setBondType(Bond::DATIVE);
   }else if ( (yyvsp[-1].bond)->getBondType() == Bond::DATIVEL ){
     (yyvsp[-1].bond)->setBeginAtomIdx(atomIdx2);
     (yyvsp[-1].bond)->setEndAtomIdx(atomIdx1);
     (yyvsp[-1].bond)->setBondType(Bond::DATIVE);
   } else {
     (yyvsp[-1].bond)->setBeginAtomIdx(atomIdx1);
     (yyvsp[-1].bond)->setEndAtomIdx(atomIdx2);
   }
   mp->addBond((yyvsp[-1].bond),true);
   //delete $4;
   branchPoints->push_back(atomIdx1);
 }
-#line 1849 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1850 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 25:
-#line 306 "smiles.yy"
+#line 307 "smiles.yy"
                                          {
   RWMol *mp = (*molList)[(yyval.moli)];
   int atomIdx1 = mp->getActiveAtom()->getIdx();
   int atomIdx2 = mp->addAtom((yyvsp[0].atom),true,true);
   mp->addBond(atomIdx1,atomIdx2,Bond::SINGLE);
   //delete $4;
   branchPoints->push_back(atomIdx1);
 }
-#line 1862 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1863 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 26:
-#line 314 "smiles.yy"
+#line 315 "smiles.yy"
                         {
   if(branchPoints->empty()){
      yyerror(input,molList,branchPoints,scanner,start_token,"extra close parentheses");
      yyErrorCleanup(molList);
      YYABORT;
   }
   RWMol *mp = (*molList)[(yyval.moli)];
   mp->setActiveAtom(branchPoints->back());
   branchPoints->pop_back();
 }
-#line 1877 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1878 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 28:
-#line 328 "smiles.yy"
+#line 329 "smiles.yy"
                         {
           (yyval.bond) = new Bond(Bond::SINGLE);
           }
-#line 1885 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1886 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 30:
-#line 336 "smiles.yy"
+#line 337 "smiles.yy"
 {
   (yyval.atom) = (yyvsp[-3].atom);
   (yyval.atom)->setNoImplicit(true);
   (yyval.atom)->setProp(RDKit::common_properties::molAtomMapNumber,(yyvsp[-1].ival));
 }
-#line 1895 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1896 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 31:
-#line 342 "smiles.yy"
+#line 343 "smiles.yy"
 {
   (yyval.atom) = (yyvsp[-1].atom);
   (yyvsp[-1].atom)->setNoImplicit(true);
 }
-#line 1904 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1905 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 33:
-#line 350 "smiles.yy"
+#line 351 "smiles.yy"
                        { (yyvsp[-1].atom)->setFormalCharge(1); }
-#line 1910 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1911 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 34:
-#line 351 "smiles.yy"
+#line 352 "smiles.yy"
                                   { (yyvsp[-2].atom)->setFormalCharge(2); }
-#line 1916 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1917 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 35:
-#line 352 "smiles.yy"
+#line 353 "smiles.yy"
                               { (yyvsp[-2].atom)->setFormalCharge((yyvsp[0].ival)); }
-#line 1922 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1923 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 36:
-#line 353 "smiles.yy"
+#line 354 "smiles.yy"
                         { (yyvsp[-1].atom)->setFormalCharge(-1); }
-#line 1928 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1929 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 37:
-#line 354 "smiles.yy"
+#line 355 "smiles.yy"
                                     { (yyvsp[-2].atom)->setFormalCharge(-2); }
-#line 1934 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1935 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 38:
-#line 355 "smiles.yy"
+#line 356 "smiles.yy"
                                { (yyvsp[-2].atom)->setFormalCharge(-(yyvsp[0].ival)); }
-#line 1940 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1941 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 39:
-#line 359 "smiles.yy"
+#line 360 "smiles.yy"
                         { (yyval.atom) = new Atom(1); }
-#line 1946 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1947 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 40:
-#line 360 "smiles.yy"
+#line 361 "smiles.yy"
                                  { (yyval.atom) = new Atom(1); (yyval.atom)->setIsotope((yyvsp[-1].ival)); }
-#line 1952 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1953 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 41:
-#line 361 "smiles.yy"
+#line 362 "smiles.yy"
                                   { (yyval.atom) = new Atom(1); (yyval.atom)->setNumExplicitHs(1); }
-#line 1958 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1959 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 42:
-#line 362 "smiles.yy"
+#line 363 "smiles.yy"
                                          { (yyval.atom) = new Atom(1); (yyval.atom)->setIsotope((yyvsp[-2].ival)); (yyval.atom)->setNumExplicitHs(1);}
-#line 1964 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1965 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 43:
-#line 363 "smiles.yy"
+#line 364 "smiles.yy"
                                          { (yyval.atom) = new Atom(1); (yyval.atom)->setNumExplicitHs((yyvsp[0].ival)); }
-#line 1970 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1971 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 44:
-#line 364 "smiles.yy"
+#line 365 "smiles.yy"
                                                 { (yyval.atom) = new Atom(1); (yyval.atom)->setIsotope((yyvsp[-3].ival)); (yyval.atom)->setNumExplicitHs((yyvsp[0].ival));}
-#line 1976 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1977 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 46:
-#line 366 "smiles.yy"
+#line 367 "smiles.yy"
                                                         { (yyval.atom) = (yyvsp[-1].atom); (yyvsp[-1].atom)->setNumExplicitHs(1);}
-#line 1982 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1983 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 47:
-#line 367 "smiles.yy"
+#line 368 "smiles.yy"
                                                 { (yyval.atom) = (yyvsp[-2].atom); (yyvsp[-2].atom)->setNumExplicitHs((yyvsp[0].ival));}
-#line 1988 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1989 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 49:
-#line 372 "smiles.yy"
+#line 373 "smiles.yy"
                    { (yyvsp[-1].atom)->setChiralTag(Atom::CHI_TETRAHEDRAL_CCW); }
-#line 1994 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 1995 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 50:
-#line 373 "smiles.yy"
+#line 374 "smiles.yy"
                             { (yyvsp[-2].atom)->setChiralTag(Atom::CHI_TETRAHEDRAL_CW); }
-#line 2000 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 2001 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 52:
-#line 378 "smiles.yy"
+#line 379 "smiles.yy"
                                            { (yyvsp[0].atom)->setIsotope( (yyvsp[-1].ival) ); (yyval.atom) = (yyvsp[0].atom); }
-#line 2006 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 2007 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 54:
-#line 380 "smiles.yy"
+#line 381 "smiles.yy"
                                                    { (yyvsp[0].atom)->setIsotope( (yyvsp[-1].ival) ); (yyval.atom) = (yyvsp[0].atom); }
-#line 2012 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 2013 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 55:
-#line 381 "smiles.yy"
+#line 382 "smiles.yy"
                                                  { (yyval.atom) = new Atom((yyvsp[0].ival)); }
-#line 2018 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 2019 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 56:
-#line 382 "smiles.yy"
+#line 383 "smiles.yy"
                                                          { (yyval.atom) = new Atom((yyvsp[0].ival)); (yyval.atom)->setIsotope((yyvsp[-2].ival)); }
-#line 2024 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 2025 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 60:
-#line 392 "smiles.yy"
+#line 393 "smiles.yy"
                                           { (yyval.ival) = (yyvsp[-1].ival)*10+(yyvsp[0].ival); }
-#line 2030 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 2031 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 61:
-#line 393 "smiles.yy"
+#line 394 "smiles.yy"
                                                          { (yyval.ival) = (yyvsp[-1].ival); }
-#line 2036 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 2037 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 62:
-#line 394 "smiles.yy"
+#line 395 "smiles.yy"
                                                                { (yyval.ival) = (yyvsp[-2].ival)*10+(yyvsp[-1].ival); }
-#line 2042 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 2043 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 63:
-#line 395 "smiles.yy"
+#line 396 "smiles.yy"
                                                                      { (yyval.ival) = (yyvsp[-3].ival)*100+(yyvsp[-2].ival)*10+(yyvsp[-1].ival); }
-#line 2048 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 2049 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 64:
-#line 396 "smiles.yy"
+#line 397 "smiles.yy"
                                                                            { (yyval.ival) = (yyvsp[-4].ival)*1000+(yyvsp[-3].ival)*100+(yyvsp[-2].ival)*10+(yyvsp[-1].ival); }
-#line 2054 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 2055 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 65:
-#line 397 "smiles.yy"
+#line 398 "smiles.yy"
                                                                                  { (yyval.ival) = (yyvsp[-5].ival)*10000+(yyvsp[-4].ival)*1000+(yyvsp[-3].ival)*100+(yyvsp[-2].ival)*10+(yyvsp[-1].ival); }
-#line 2060 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 2061 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
   case 69:
-#line 407 "smiles.yy"
-                       { (yyval.ival) = (yyvsp[-1].ival)*10 + (yyvsp[0].ival); }
-#line 2066 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 408 "smiles.yy"
+                       { 
+  if((yyvsp[-1].ival) >= std::numeric_limits<std::int32_t>::max()/10 || 
+     (yyvsp[-1].ival)*10 >= std::numeric_limits<std::int32_t>::max()-(yyvsp[0].ival) ){
+     yyerror(input,molList,branchPoints,scanner,start_token,"number too large");
+     yyErrorCleanup(molList);
+     YYABORT;
+  }
+  (yyval.ival) = (yyvsp[-1].ival)*10 + (yyvsp[0].ival); 
+  }
+#line 2075 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
     break;
 
 
-#line 2070 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
+#line 2079 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.cpp"
 
       default: break;
     }
   /* User semantic actions sometimes alter yychar, and that requires
      that yytoken be updated with the new translation.  We take the
      approach of translating immediately before every use of yytoken.
      One alternative is translating here after every semantic action,
      but that translation would be missed if the semantic action invokes
      YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
      if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
      incorrect destructor might then be invoked immediately.  In the
      case of YYERROR or YYBACKUP, subsequent parser actions might lead
      to an incorrect destructor call or verbose syntax error message
      before the lookahead is translated.  */
   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
 
   YYPOPSTACK (yylen);
   yylen = 0;
   YY_STACK_PRINT (yyss, yyssp);
 
   *++yyvsp = yyval;
 
   /* Now 'shift' the result of the reduction.  Determine what state
      that goes to, based on the state we popped back to and the rule
      number reduced by.  */
   {
     const int yylhs = yyr1[yyn] - YYNTOKENS;
     const int yyi = yypgoto[yylhs] + *yyssp;
     yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
                ? yytable[yyi]
                : yydefgoto[yylhs]);
   }
 
   goto yynewstate;
 
 
 /*--------------------------------------.
 | yyerrlab -- here on detecting error.  |
 `--------------------------------------*/
@@ -2269,34 +2278,34 @@ yyexhaustedlab:
 /*-----------------------------------------------------.
 | yyreturn -- parsing is finished, return the result.  |
 `-----------------------------------------------------*/
 yyreturn:
   if (yychar != YYEMPTY)
     {
       /* Make sure we have latest lookahead translation.  See comments at
          user semantic actions for why this is necessary.  */
       yytoken = YYTRANSLATE (yychar);
       yydestruct ("Cleanup: discarding lookahead",
                   yytoken, &yylval, input, molList, lastAtom, lastBond, branchPoints, scanner, start_token);
     }
   /* Do not reclaim the symbols of the rule whose action triggered
      this YYABORT or YYACCEPT.  */
   YYPOPSTACK (yylen);
   YY_STACK_PRINT (yyss, yyssp);
   while (yyssp != yyss)
     {
       yydestruct ("Cleanup: popping",
                   yystos[+*yyssp], yyvsp, input, molList, lastAtom, lastBond, branchPoints, scanner, start_token);
       YYPOPSTACK (1);
     }
 #ifndef yyoverflow
   if (yyss != yyssa)
     YYSTACK_FREE (yyss);
 #endif
 #if YYERROR_VERBOSE
   if (yymsg != yymsgbuf)
     YYSTACK_FREE (yymsg);
 #endif
   return yyresult;
 }
-#line 421 "smiles.yy"
+#line 430 "smiles.yy"
 
diff --git a/Code/GraphMol/SmilesParse/smiles.tab.hpp.cmake b/Code/GraphMol/SmilesParse/smiles.tab.hpp.cmake
index 4191ae976..29aec5062 100644
--- a/Code/GraphMol/SmilesParse/smiles.tab.hpp.cmake
+++ b/Code/GraphMol/SmilesParse/smiles.tab.hpp.cmake
@@ -81,14 +81,14 @@ extern int yysmiles_debug;
 /* Value type.  */
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 union YYSTYPE
 {
-#line 88 "smiles.yy"
+#line 89 "smiles.yy"
 
   int                      moli;
   RDKit::Atom * atom;
   RDKit::Bond * bond;
   int                      ival;
 
 #line 93 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.hpp"
 
 };
@@ -101,11 +101,11 @@ typedef union YYSTYPE YYSTYPE;
 
 int yysmiles_parse (const char *input, std::vector<RDKit::RWMol *> *molList, RDKit::Atom* &lastAtom, RDKit::Bond* &lastBond, std::list<unsigned int> *branchPoints, void *scanner, int& start_token);
 /* "%code provides" blocks.  */
-#line 83 "smiles.yy"
+#line 84 "smiles.yy"
 
 #define YY_DECL int yylex \
                (YYSTYPE * yylval_param , yyscan_t yyscanner, int& start_token)
 
 #line 110 "/scratch/RDKit_git/Code/GraphMol/SmilesParse/smiles.tab.hpp"
 
 #endif /* !YY_YYSMILES_SCRATCH_RDKIT_GIT_CODE_GRAPHMOL_SMILESPARSE_SMILES_TAB_HPP_INCLUDED  */
diff --git a/Code/GraphMol/SmilesParse/smiles.yy b/Code/GraphMol/SmilesParse/smiles.yy
index 22dd26228..47da09f7c 100644
--- a/Code/GraphMol/SmilesParse/smiles.yy
+++ b/Code/GraphMol/SmilesParse/smiles.yy
@@ -1,21 +1,22 @@
 %{
 
   // $Id$
   //
   //  Copyright (C) 2001-2016 Randal Henne, Greg Landrum and Rational Discovery LLC
   //
   //   @@ All Rights Reserved  @@
   //
 
 #include <cstring>
 #include <iostream>
 #include <vector>
 #include <list>
+#include <limits>
 
 #include <GraphMol/RDKitBase.h>
 #include <GraphMol/SmilesParse/SmilesParse.h>
 #include <GraphMol/SmilesParse/SmilesParseOps.h>
 #include <RDGeneral/RDLog.h>
 
 #define YYDEBUG 1
 #include "smiles.tab.hpp"
@@ -404,7 +405,15 @@ number:  ZERO_TOKEN
 
 /* --------------------------------------------------------------- */
 nonzero_number:  NONZERO_DIGIT_TOKEN
-| nonzero_number digit { $$ = $1*10 + $2; }
+| nonzero_number digit { 
+  if($1 >= std::numeric_limits<std::int32_t>::max()/10 || 
+     $1*10 >= std::numeric_limits<std::int32_t>::max()-$2 ){
+     yyerror(input,molList,branchPoints,scanner,start_token,"number too large");
+     yyErrorCleanup(molList);
+     YYABORT;
+  }
+  $$ = $1*10 + $2; 
+  }
 ;
 
 digit: NONZERO_DIGIT_TOKEN
diff --git a/Code/GraphMol/SmilesParse/test.cpp b/Code/GraphMol/SmilesParse/test.cpp
index a15c6dcda..25edf98c7 100644
--- a/Code/GraphMol/SmilesParse/test.cpp
+++ b/Code/GraphMol/SmilesParse/test.cpp
@@ -136,46 +136,48 @@ void testPass() {
 void testFail() {
   int i = 0;
   Mol *mol;
 
   BOOST_LOG(rdInfoLog) << "-------------------------------------" << std::endl;
   BOOST_LOG(rdInfoLog)
       << "Testing molecules which should fail to parse/sanitize." << std::endl;
 
   // alternate good and bad smiles here to ensure that the parser can resume
   // parsing
   // on good input:
   string smis[] = {
       "CC=(CO)C",    "CC(=CO)C", "C1CC",  "C1CC1", "Ccc",   "CCC",
       "fff",  // tests the situation where the parser cannot do anything at all
       "CCC",
       "N(=O)(=O)=O",  // bad sanitization failure
       "C1CC1",
       "C=0",  // part of sf.net issue 2525792
       "C1CC1",
       "C0",  // part of sf.net issue 2525792
       "C1CC1",
       "C-0",  // part of sf.net issue 2525792
       "C1CC1",
       "C+0",  // part of sf.net issue 2525792
-      "C1CC1",       "[H2H]",    "C1CC1", "[HH2]", "C1CC1", "EOS"};
+      "C1CC1",       "[H2H]",    "C1CC1", "[HH2]", "C1CC1", 
+      "[555555555555555555C]", "C1CC1",
+      "EOS"};
 
   // turn off the error log temporarily:
   while (smis[i] != "EOS") {
     string smi = smis[i];
     boost::logging::disable_logs("rdApp.error");
     try {
       mol = SmilesToMol(smi);
     } catch (MolSanitizeException &) {
       mol = (Mol *)nullptr;
     }
     boost::logging::enable_logs("rdApp.error");
     if (!(i % 2)) {
       CHECK_INVARIANT(!mol, smi);
     } else {
       CHECK_INVARIANT(mol, smi);
       delete mol;
     }
     i++;
   }
   BOOST_LOG(rdInfoLog) << "\tdone" << std::endl;
 }
