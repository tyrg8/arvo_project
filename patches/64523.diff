commit 3cc9ff94db44f8739905d8ea9bff1723c19c2745
Author: Mallikarjun Kamble <Mallikarjun.Kamble@ittiam.com>
Date:   Mon Dec 11 16:23:04 2023 +0530

    Update intra resamp flags

diff --git a/decoder/svc/isvcd_intra_resamp.c b/decoder/svc/isvcd_intra_resamp.c
index 34e3779..326dd5c 100644
--- a/decoder/svc/isvcd_intra_resamp.c
+++ b/decoder/svc/isvcd_intra_resamp.c
@@ -4825,137 +4825,176 @@ WORD32 isvcd_populate_res_prms(void *pv_svc_dec)
 /*****************************************************************************/
 /*                                                                           */
 /*  Function Name : isvcd_crop_wnd_flag_res_int                               */
 /*                                                                           */
 /*  Description   : This routine computes the crop window flag for entire    */
 /*                  dependency layer and places it in the crop window flag   */
 /*                  buffer                                                   */
 /*  Inputs        : 1. ECD context structure                                 */
 /*                  2. Crop offset structure                                 */
 /*  Globals       : None                                                     */
 /*  Processing    : For Mbs within the crop window, flag set to 1 and for    */
 /*                  others it is set to 0                                    */
 /*                                                                           */
 /*  Outputs       : Updates crop window flag buffer                          */
 /*  Returns       : status                                                   */
 /*                                                                           */
 /*  Issues        : None                                                     */
 /*                                                                           */
 /*  Revision History:                                                        */
 /*                                                                           */
 /*         DD MM YYYY   Author(s)       Changes (Describe the changes made)  */
 /*         06 09 2021   Vijay      Draft                                     */
 /*                                                                           */
 /*****************************************************************************/
 void isvcd_crop_wnd_flag_res_int(void *pv_svc_dec)
 {
     UWORD8 *pu1_crop_wnd_flag;
     WORD32 i4_num_mbs;
     WORD32 i4_crop_mbs_x;
     WORD32 i4_crop_mbs_y;
     WORD32 i4_cnt;
     WORD32 i4_left_offset, i4_rt_offset;
     WORD32 i4_top_offset, i4_bot_offset;
     WORD32 i4_frm_wd_in_mbs;
     WORD32 i4_frm_ht_in_mbs;
     dec_struct_t *ps_dec;
     svc_dec_lyr_struct_t *ps_svc_lyr_dec;
     res_prms_t *ps_res_prms;
 
     ps_svc_lyr_dec = (svc_dec_lyr_struct_t *) pv_svc_dec;
     ps_dec = &ps_svc_lyr_dec->s_dec;
     ps_res_prms = &ps_svc_lyr_dec->s_res_prms;
     i4_frm_wd_in_mbs = ps_dec->u2_frm_wd_in_mbs;
     i4_frm_ht_in_mbs = ps_dec->u2_frm_ht_in_mbs;
 
     /* Initializations */
     pu1_crop_wnd_flag = ps_svc_lyr_dec->pu1_crop_wnd_flag;
     i4_num_mbs = i4_frm_wd_in_mbs * i4_frm_ht_in_mbs;
 
     /* bottom most layer in a resolution */
     if(ps_res_prms->s_ref_lyr_scaled_offset.i2_left >= 0)
     {
         /* check for offset greater than 0 */
         i4_left_offset = (ps_res_prms->s_ref_lyr_scaled_offset.i2_left + 15) >> 4;
     }
     else
     {
         /* if negative set it to 0*/
         i4_left_offset = 0;
     }
 
     if(ps_res_prms->s_ref_lyr_scaled_offset.i2_rt >= 0)
     {
         /* check for offset greater than 0 */
         i4_rt_offset =
             (ps_res_prms->i4_res_width - ps_res_prms->s_ref_lyr_scaled_offset.i2_rt) >> 4;
     }
     else
     {
         /* if negative set it to framewidth in MBs */
         i4_rt_offset = (ps_res_prms->i4_res_width >> 4);
     }
 
     if(ps_res_prms->s_ref_lyr_scaled_offset.i2_top >= 0)
     {
         /* check for offset greater than 0 */
         i4_top_offset = (ps_res_prms->s_ref_lyr_scaled_offset.i2_top + 15) >> 4;
     }
     else
     {
         /* if negative set it to 0 */
         i4_top_offset = 0;
     }
 
     if(ps_res_prms->s_ref_lyr_scaled_offset.i2_bot >= 0)
     {
         /* check for offset greater than 0 */
         i4_bot_offset =
             (ps_res_prms->i4_res_height - ps_res_prms->s_ref_lyr_scaled_offset.i2_bot) >> 4;
     }
     else
     {
         /* if negative set it to frameheight in MBs */
         i4_bot_offset = (ps_res_prms->i4_res_height >> 4);
     }
 
     i4_crop_mbs_x = i4_rt_offset - i4_left_offset;
     i4_crop_mbs_y = i4_bot_offset - i4_top_offset;
 
     /* Set crop window flag to 0 for all mbs */
     memset(pu1_crop_wnd_flag, 0, i4_num_mbs);
 
     pu1_crop_wnd_flag += (i4_frm_wd_in_mbs * i4_top_offset);
     pu1_crop_wnd_flag += i4_left_offset;
     /* Loop over MBs in crop window */
     for(i4_cnt = 0; i4_cnt < i4_crop_mbs_y; i4_cnt++)
     {
         memset(pu1_crop_wnd_flag, 1, i4_crop_mbs_x);
         pu1_crop_wnd_flag += i4_frm_wd_in_mbs;
     }
 }
 
+/*****************************************************************************/
+/*                                                                           */
+/*  Function Name : isvcd_intra_resamp_res_init                                 */
+/*                                                                           */
+/*  Description   : this function calculates the scale factors and initialise*/
+/*                  the context structure                                    */
+/*                                                                           */
+/*  Inputs        : pv_intra_samp_ctxt: handle to private structure          */
+/*                  ps_curr_lyr_res_prms: pointer to current resolution      */
+/*                                               params                      */
+/*                  ps_ref_lyr_res_prms : pointer to ref resolution params   */
+/*  Globals       : none                                                     */
+/*  Processing    : it stores the layer dimensions                           */
+/*                                                                           */
+/*  Outputs       : none                                                     */
+/*  Returns       : none                                                     */
+/*                                                                           */
+/*  Issues        : none                                                     */
+/*                                                                           */
+/*  Revision History:                                                        */
+/*                                                                           */
+/*         DD MM YYYY   Author(s)       Changes (Describe the changes made)  */
+/*         26 08 2021   vijayakumar          creation                        */
+/*                                                                           */
+/*****************************************************************************/
+void isvcd_intra_resamp_res_init_update_flags(void *pv_svc_dec)
+{
+    intra_sampling_ctxt_t *ps_ctxt;
+    intra_samp_lyr_ctxt *ps_lyr_ctxt;
+    svc_dec_lyr_struct_t *ps_svc_lyr_dec = (svc_dec_lyr_struct_t *) pv_svc_dec;
+
+    ps_ctxt = (intra_sampling_ctxt_t *) ps_svc_lyr_dec->pv_intra_sample_ctxt;;
+    /* get the current layer ctxt */
+    ps_lyr_ctxt = &ps_ctxt->as_res_lyrs[ps_svc_lyr_dec->u1_layer_id - 1];
+
+    ps_lyr_ctxt->i1_constrained_intra_rsmpl_flag =
+        ps_svc_lyr_dec->s_svc_slice_params.u1_constrained_intra_resampling_flag;
+}
+
 /*****************************************************************************/
 /*                                                                           */
 /*  Function Name : isvcd_intra_resamp_res_init                                 */
 /*                                                                           */
 /*  Description   : this function calculates the scale factors and initialise*/
 /*                  the context structure                                    */
 /*                                                                           */
 /*  Inputs        : pv_intra_samp_ctxt: handle to private structure          */
 /*                  ps_curr_lyr_res_prms: pointer to current resolution      */
 /*                                               params                      */
 /*                  ps_ref_lyr_res_prms : pointer to ref resolution params   */
 /*  Globals       : none                                                     */
 /*  Processing    : it stores the layer dimensions                           */
 /*                                                                           */
 /*  Outputs       : none                                                     */
 /*  Returns       : none                                                     */
 /*                                                                           */
 /*  Issues        : none                                                     */
 /*                                                                           */
 /*  Revision History:                                                        */
 /*                                                                           */
 /*         DD MM YYYY   Author(s)       Changes (Describe the changes made)  */
 /*         26 08 2021   vijayakumar          creation                        */
 /*                                                                           */
 /*****************************************************************************/
diff --git a/decoder/svc/isvcd_intra_resamp.h b/decoder/svc/isvcd_intra_resamp.h
index 9b15a6d..7f09117 100644
--- a/decoder/svc/isvcd_intra_resamp.h
+++ b/decoder/svc/isvcd_intra_resamp.h
@@ -628,4 +628,6 @@ void isvcd_crop_wnd_flag_res_int(void *ps_svc_dec);
 
 WORD32 isvcd_intra_resamp_res_init(void *ps_svc_dec);
 
+void isvcd_intra_resamp_res_init_update_flags(void *ps_svc_dec);
+
 #endif /* _ISVCD_INTRA_RESAMPLE_H_ */
diff --git a/decoder/svc/isvcd_parse_slice.c b/decoder/svc/isvcd_parse_slice.c
index 05d89ef..226a6e4 100644
--- a/decoder/svc/isvcd_parse_slice.c
+++ b/decoder/svc/isvcd_parse_slice.c
@@ -1610,286 +1610,291 @@ WORD32 isvcd_set_default_slice_header_ext(svc_dec_lyr_struct_t *ps_svc_lyr_dec)
 /*!
 **************************************************************************
 * \if Function name : isvcd_parse_slice_header \endif
 *
 * \brief
 *    parses the svc slice header attr
 *
 * \return
 *    0 on Success and Error code otherwise
 **************************************************************************
 */
 WORD32 isvcd_parse_slice_header(svc_dec_lyr_struct_t *ps_svc_lyr_dec)
 {
     dec_struct_t *ps_dec = &ps_svc_lyr_dec->s_dec;
     dec_pic_params_t *ps_pps = ps_dec->ps_cur_pps;
     dec_bit_stream_t *ps_bitstrm = ps_dec->ps_bitstrm;
     dec_seq_params_t *ps_seq;
     dec_svc_seq_params_t *ps_subset_seq;
     dec_slice_svc_ext_params_t *ps_svc_slice_params = NULL;
     dec_subset_seq_params_t *ps_sps_svc_ext = NULL;
     svc_dec_ctxt_t *ps_svcd_ctxt;
     UWORD32 *pu4_bitstrm_buf = ps_dec->ps_bitstrm->pu4_buffer;
     UWORD32 *pu4_bitstrm_ofst = &ps_dec->ps_bitstrm->u4_ofst;
     ps_svcd_ctxt = ps_svc_lyr_dec->ps_svcd_ctxt;
     ps_seq = ps_pps->ps_sps;
     ps_seq += MAX_NUM_SEQ_PARAMS;
     ps_subset_seq =
         &ps_svc_lyr_dec->ps_subset_sps[MAX_NUM_SEQ_PARAMS + ps_seq->u1_seq_parameter_set_id];
     ps_sps_svc_ext = &ps_subset_seq->s_sps_svc_ext;
     ps_svc_slice_params = &ps_svc_lyr_dec->s_svc_slice_params;
 
     if(!ps_svc_lyr_dec->ps_nal_svc_ext->u1_no_inter_layer_pred_flag &&
        (0 == ps_svc_lyr_dec->ps_nal_svc_ext->u1_quality_id))
     {
         ps_svc_slice_params->u4_ref_layer_dq_id = ih264d_uev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
         COPYTHECONTEXT("Slice Header SVC ext: u4_ref_layer_dq_id",
                        ps_svc_slice_params->u4_ref_layer_dq_id);
         if(ps_svc_slice_params->u4_ref_layer_dq_id > MAX_REF_DEP_ID)
         {
             return ERROR_INV_SLICE_HDR_T;
         }
         /* Reference layer id update is taken care during resolution init */
         /*
         ps_svc_lyr_dec->u1_ref_layer_id = ps_svc_slice_params->u4_ref_layer_dq_id >> 4;
         if(ps_svc_lyr_dec->u1_ref_layer_id >= ps_svc_lyr_dec->u1_layer_id)
         {
             return ERROR_INV_SLICE_HDR_T;
         }
         */
         ps_svc_lyr_dec->ps_dec_svc_ref_layer =
             &ps_svcd_ctxt->ps_svc_dec_lyr[ps_svc_lyr_dec->u1_ref_layer_id];
 
         if(ps_sps_svc_ext->u1_inter_layer_deblocking_filter_control_present_flag)
         {
             ps_svc_slice_params->u4_disable_inter_layer_deblk_filter_idc =
                 ih264d_uev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
             COPYTHECONTEXT("Slice Header SVC ext: u4_disable_inter_layer_deblk_filter_idc",
                            ps_svc_slice_params->u4_disable_inter_layer_deblk_filter_idc);
 
             if(ps_svc_slice_params->u4_disable_inter_layer_deblk_filter_idc > 6)
             {
                 return ERROR_INV_SLICE_HDR_T;
             }
 
             if(1 != ps_svc_slice_params->u4_disable_inter_layer_deblk_filter_idc)
             {
                 ps_svc_slice_params->i4_inter_layer_slice_alpha_c0_offset_div2 =
                     ih264d_sev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
                 COPYTHECONTEXT("Slice Header SVC ext: i4_inter_layer_slice_alpha_c0_offset_div2",
                                ps_svc_slice_params->i4_inter_layer_slice_alpha_c0_offset_div2);
 
                 if(ps_svc_slice_params->i4_inter_layer_slice_alpha_c0_offset_div2 > 6 ||
                    ps_svc_slice_params->i4_inter_layer_slice_alpha_c0_offset_div2 < -6)
                 {
                     return ERROR_INV_SLICE_HDR_T;
                 }
 
                 ps_svc_slice_params->i4_inter_layer_slice_beta_offset_div2 =
                     ih264d_sev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
                 COPYTHECONTEXT("Slice Header SVC ext: i4_inter_layer_slice_beta_offset_div2",
                                ps_svc_slice_params->i4_inter_layer_slice_beta_offset_div2);
 
                 if(ps_svc_slice_params->i4_inter_layer_slice_beta_offset_div2 > 6 ||
                    ps_svc_slice_params->i4_inter_layer_slice_beta_offset_div2 < -6)
                 {
                     return ERROR_INV_SLICE_HDR_T;
                 }
             }
         }
 
         ps_svc_slice_params->u1_constrained_intra_resampling_flag = ih264d_get_bit_h264(ps_bitstrm);
         COPYTHECONTEXT("Slice Header SVC ext: u1_constrained_intra_resampling_flag",
                        ps_svc_slice_params->u1_constrained_intra_resampling_flag);
+
+        ps_svc_lyr_dec->s_res_prms.i1_constrained_intra_rsmpl_flag =
+            ps_svc_lyr_dec->s_svc_slice_params.u1_constrained_intra_resampling_flag;
+        isvcd_intra_resamp_res_init_update_flags(ps_svc_lyr_dec);
+
         if(2 == ps_sps_svc_ext->u1_extended_spatial_scalability_idc)
         {
             /* ChromaArrayType = i4_chroma_format_idc  if  separate_colour_plane_flag
              * = 0 for all chroma format except 4:4:4 */
             if(ps_dec->ps_cur_sps->i4_chroma_format_idc >= 0)
             {
                 ps_svc_slice_params->u1_ref_layer_chroma_phase_x_plus1_flag =
                     ih264d_get_bit_h264(ps_bitstrm);
                 COPYTHECONTEXT("Slice Header SVC ext: u1_ref_layer_chroma_phase_x_plus1_flag",
                                ps_svc_slice_params->u1_ref_layer_chroma_phase_x_plus1_flag);
 
                 ps_svc_slice_params->u1_ref_layer_chroma_phase_y_plus1 =
                     ih264d_get_bits_h264(ps_bitstrm, 2);
                 COPYTHECONTEXT("Slice Header SVC ext: u1_ref_layer_chroma_phase_y_plus1",
                                ps_svc_slice_params->u1_ref_layer_chroma_phase_y_plus1);
 
                 if(ps_svc_slice_params->u1_ref_layer_chroma_phase_y_plus1 > 2)
                 {
                     return ERROR_INV_SLICE_HDR_T;
                 }
             }
             else
             {
                 if(0 == ps_svc_lyr_dec->ps_nal_svc_ext->u1_quality_id)
                 {
                     ps_svc_slice_params->u1_ref_layer_chroma_phase_y_plus1 =
                         ps_sps_svc_ext->u1_seq_ref_layer_chroma_phase_y_plus1;
                 }
             }
 
             ps_svc_slice_params->i4_scaled_ref_layer_left_offset =
                 ih264d_sev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
             COPYTHECONTEXT("Slice Header SVC ext: i4_scaled_ref_layer_left_offset",
                            ps_svc_slice_params->i4_scaled_ref_layer_left_offset);
 
             if(ps_svc_slice_params->i4_scaled_ref_layer_left_offset != 0)
             {
                 return ERROR_INV_SLICE_HDR_T;
             }
 
             if(ps_svc_slice_params->i4_scaled_ref_layer_left_offset >= MAX_SCLD_REF_LAYER_OFFSET ||
                ps_svc_slice_params->i4_scaled_ref_layer_left_offset < MIN_SCLD_REF_LAYER_OFFSET)
             {
                 return ERROR_INV_SLICE_HDR_T;
             }
 
             ps_svc_slice_params->i4_scaled_ref_layer_top_offset =
                 ih264d_sev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
             COPYTHECONTEXT("Slice Header SVC ext: i4_scaled_ref_layer_top_offset",
                            ps_svc_slice_params->i4_scaled_ref_layer_top_offset);
 
             if(ps_svc_slice_params->i4_scaled_ref_layer_top_offset != 0)
             {
                 return ERROR_INV_SLICE_HDR_T;
             }
 
             if(ps_svc_slice_params->i4_scaled_ref_layer_top_offset >= MAX_SCLD_REF_LAYER_OFFSET ||
                ps_svc_slice_params->i4_scaled_ref_layer_top_offset < MIN_SCLD_REF_LAYER_OFFSET)
             {
                 return ERROR_INV_SLICE_HDR_T;
             }
 
             ps_svc_slice_params->i4_scaled_ref_layer_right_offset =
                 ih264d_sev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
             COPYTHECONTEXT("Slice Header SVC ext: i4_scaled_ref_layer_right_offset",
                            ps_svc_slice_params->i4_scaled_ref_layer_right_offset);
 
             if(ps_svc_slice_params->i4_scaled_ref_layer_right_offset >= MAX_SCLD_REF_LAYER_OFFSET ||
                ps_svc_slice_params->i4_scaled_ref_layer_right_offset < MIN_SCLD_REF_LAYER_OFFSET)
             {
                 return ERROR_INV_SLICE_HDR_T;
             }
 
             ps_svc_slice_params->i4_scaled_ref_layer_bottom_offset =
                 ih264d_sev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
             COPYTHECONTEXT("Slice Header SVC ext: i4_scaled_ref_layer_bottom_offset",
                            ps_svc_slice_params->i4_scaled_ref_layer_bottom_offset);
 
             if(ps_svc_slice_params->i4_scaled_ref_layer_bottom_offset >=
                    MAX_SCLD_REF_LAYER_OFFSET ||
                ps_svc_slice_params->i4_scaled_ref_layer_bottom_offset < MIN_SCLD_REF_LAYER_OFFSET)
             {
                 return ERROR_INV_SLICE_HDR_T;
             }
         }
         else
         {
             ps_svc_slice_params->i4_scaled_ref_layer_left_offset =
                 ps_sps_svc_ext->i4_seq_scaled_ref_layer_left_offset;
             ps_svc_slice_params->i4_scaled_ref_layer_top_offset =
                 ps_sps_svc_ext->i4_seq_scaled_ref_layer_top_offset;
             ps_svc_slice_params->i4_scaled_ref_layer_right_offset =
                 ps_sps_svc_ext->i4_seq_scaled_ref_layer_right_offset;
             ps_svc_slice_params->i4_scaled_ref_layer_bottom_offset =
                 ps_sps_svc_ext->i4_seq_scaled_ref_layer_bottom_offset;
         }
     }
 
     if(!ps_svc_lyr_dec->ps_nal_svc_ext->u1_no_inter_layer_pred_flag)
     {
         ps_svc_slice_params->u1_slice_skip_flag = ih264d_get_bit_h264(ps_bitstrm);
         COPYTHECONTEXT("Slice Header SVC ext: u1_slice_skip_flag",
                        ps_svc_slice_params->u1_slice_skip_flag);
 
         if(ps_svc_slice_params->u1_slice_skip_flag)
         {
             ps_svc_slice_params->u4_num_mbs_in_slice_minus1 =
                 ih264d_uev(pu4_bitstrm_ofst, pu4_bitstrm_buf);
             COPYTHECONTEXT("Slice Header SVC ext: u4_num_mbs_in_slice_minus1",
                            ps_svc_slice_params->u4_num_mbs_in_slice_minus1);
         }
         else
         {
             ps_svc_slice_params->u1_adaptive_base_mode_flag = ih264d_get_bit_h264(ps_bitstrm);
             COPYTHECONTEXT("Slice Header SVC ext: u1_adaptive_base_mode_flag",
                            ps_svc_slice_params->u1_adaptive_base_mode_flag);
 
             if(!ps_svc_slice_params->u1_adaptive_base_mode_flag)
             {
                 ps_svc_slice_params->u1_default_base_mode_flag = ih264d_get_bit_h264(ps_bitstrm);
                 COPYTHECONTEXT("Slice Header SVC ext: u1_default_base_mode_flag",
                                ps_svc_slice_params->u1_default_base_mode_flag);
             }
             if(!ps_svc_slice_params->u1_default_base_mode_flag)
             {
                 ps_svc_slice_params->u1_adaptive_motion_prediction_flag =
                     ih264d_get_bit_h264(ps_bitstrm);
                 COPYTHECONTEXT("Slice Header SVC ext: u1_adaptive_motion_prediction_flag",
                                ps_svc_slice_params->u1_adaptive_motion_prediction_flag);
 
                 if(!ps_svc_slice_params->u1_adaptive_motion_prediction_flag)
                 {
                     ps_svc_slice_params->u1_default_motion_prediction_flag =
                         ih264d_get_bit_h264(ps_bitstrm);
                     COPYTHECONTEXT("Slice Header SVC ext: u1_default_motion_prediction_flag",
                                    ps_svc_slice_params->u1_default_motion_prediction_flag);
                 }
             }
             ps_svc_slice_params->u1_adaptive_residual_prediction_flag =
                 ih264d_get_bit_h264(ps_bitstrm);
             COPYTHECONTEXT("Slice Header SVC ext: u1_adaptive_residual_prediction_flag",
                            ps_svc_slice_params->u1_adaptive_residual_prediction_flag);
 
             if(!ps_svc_slice_params->u1_adaptive_residual_prediction_flag)
             {
                 ps_svc_slice_params->u1_default_residual_prediction_flag =
                     ih264d_get_bit_h264(ps_bitstrm);
                 COPYTHECONTEXT("Slice Header SVC ext: u1_default_residual_prediction_flag",
                                ps_svc_slice_params->u1_default_residual_prediction_flag);
             }
         }
 
         if(ps_sps_svc_ext->u1_adaptive_tcoeff_level_prediction_flag)
         {
             ps_svc_slice_params->u1_tcoeff_level_prediction_flag = ih264d_get_bit_h264(ps_bitstrm);
             COPYTHECONTEXT("Slice Header SVC ext: u1_tcoeff_level_prediction_flag",
                            ps_svc_slice_params->u1_tcoeff_level_prediction_flag);
 
             if(ps_svc_slice_params->u1_tcoeff_level_prediction_flag != 0)
             {
                 return ERROR_INV_SPS_PPS_T;
             }
         }
     }
 
     if(!ps_sps_svc_ext->u1_slice_header_restriction_flag &&
        !ps_svc_slice_params->u1_slice_skip_flag)
     {
         ps_svc_slice_params->u1_scan_idx_start = ih264d_get_bits_h264(ps_bitstrm, 4);
         COPYTHECONTEXT("Slice Header SVC ext: u1_scan_idx_start",
                        ps_svc_slice_params->u1_scan_idx_start);
         ps_svc_slice_params->u1_scan_idx_end = ih264d_get_bits_h264(ps_bitstrm, 4);
         COPYTHECONTEXT("Slice Header SVC ext: u1_scan_idx_end",
                        ps_svc_slice_params->u1_scan_idx_end);
 
         if(0 != ps_svc_slice_params->u1_scan_idx_start &&
            15 != ps_svc_slice_params->u1_scan_idx_end)
             return ERROR_SVC_INV_SCAN_IDX;
     }
     return OK;
 }
 
 /*!
 **************************************************************************
 * \if Function name : DecodeSlice \endif
 *
 * \brief
 *    Parses a slice
 *
 * \return
 *    0 on Success and Error code otherwise
 **************************************************************************
 */
