commit e8df98c5c6629b75402b8ea5e5a44797fb3ae4b3
Author: David Anderson <davea42@linuxmail.org>
Date:   Sat Sep 30 12:01:37 2023 -0700

    Remove left-over printf debug output.
            modified:   src/lib/libdwarf/dwarf_machoread.c

diff --git a/src/lib/libdwarf/dwarf_machoread.c b/src/lib/libdwarf/dwarf_machoread.c
index 549d8cfd..a442c6b2 100644
--- a/src/lib/libdwarf/dwarf_machoread.c
+++ b/src/lib/libdwarf/dwarf_machoread.c
@@ -409,66 +409,57 @@ static int
 load_segment_command_content32(
     dwarf_macho_object_access_internals_t *mfp,
     struct generic_macho_command *mmp,
     struct generic_macho_segment_command *msp,
     Dwarf_Unsigned mmpindex,
     int *errcode)
 {
     struct segment_command sc;
     int res = 0;
     Dwarf_Unsigned filesize = mfp->mo_filesize;
     Dwarf_Unsigned segoffset = mmp->offset_this_command;
     Dwarf_Unsigned afterseghdr = segoffset + sizeof(sc);
     Dwarf_Unsigned inner = mfp->mo_inner_offset;
 
     if (segoffset > filesize ||
         mmp->cmdsize > filesize ||
         (mmp->cmdsize + segoffset) > filesize ) {
         *errcode = DW_DLE_MACH_O_SEGOFFSET_BAD;
         return DW_DLV_ERROR;
     }
     res = RRMOA(mfp->mo_fd, &sc, (off_t)(inner+segoffset),
         sizeof(sc), (off_t)(inner+filesize), errcode);
     if (res != DW_DLV_OK) {
         return res;
     }
     ASNAR(mfp->mo_copy_word,msp->cmd,sc.cmd);
     ASNAR(mfp->mo_copy_word,msp->cmdsize,sc.cmdsize);
     _dwarf_safe_strcpy(msp->segname,
         sizeof(msp->segname),
         sc.segname,sizeof(sc.segname));
     ASNAR(mfp->mo_copy_word,msp->vmaddr,sc.vmaddr);
     ASNAR(mfp->mo_copy_word,msp->vmsize,sc.vmsize);
     ASNAR(mfp->mo_copy_word,msp->fileoff,sc.fileoff);
     ASNAR(mfp->mo_copy_word,msp->filesize,sc.filesize);
     if (msp->fileoff > mfp->mo_filesize ||
         msp->filesize > mfp->mo_filesize) {
         /* corrupt */
         *errcode = DW_DLE_MACHO_CORRUPT_COMMAND;
         return DW_DLV_ERROR;
     }
     if ((msp->fileoff+msp->filesize ) > filesize) {
         /* corrupt */
         *errcode = DW_DLE_MACHO_CORRUPT_COMMAND;
         return DW_DLV_ERROR;
     }
     ASNAR(mfp->mo_copy_word,msp->maxprot,sc.maxprot);
     ASNAR(mfp->mo_copy_word,msp->initprot,sc.initprot);
     ASNAR(mfp->mo_copy_word,msp->nsects,sc.nsects);
     if (msp->nsects >= mfp->mo_filesize) {
-#if 0
-        printf("Reading sections macho32 fails,"
-            " mmp_offset %lu,"
-            " number of sections %lu,"
-            " filesize %lu\n",
-            (unsigned long)segoffset,
-            (unsigned long)msp->nsects,
-            (unsigned long)mfp->mo_filesize);
-#endif
         *errcode = DW_DLE_MACHO_CORRUPT_COMMAND;
         return DW_DLV_ERROR;
     }
     ASNAR(mfp->mo_copy_word,msp->flags,sc.flags);
     msp->macho_command_index = mmpindex;
     msp->sectionsoffset = afterseghdr;
     return DW_DLV_OK;
 }
@@ -477,64 +468,55 @@ static int
 load_segment_command_content64(
     dwarf_macho_object_access_internals_t *mfp,
     struct generic_macho_command *mmp,
     struct generic_macho_segment_command *msp,
     Dwarf_Unsigned mmpindex,int *errcode)
 {
     struct segment_command_64 sc;
     int res = 0;
     Dwarf_Unsigned filesize = mfp->mo_filesize;
     Dwarf_Unsigned segoffset = mmp->offset_this_command;
     Dwarf_Unsigned afterseghdr = segoffset + sizeof(sc);
     Dwarf_Unsigned inner = mfp->mo_inner_offset;
 
     if (segoffset > filesize ||
         mmp->cmdsize > filesize ||
         (mmp->cmdsize + segoffset) > filesize ) {
         *errcode = DW_DLE_MACHO_CORRUPT_COMMAND;
         return DW_DLV_ERROR;
     }
     res = RRMOA(mfp->mo_fd,&sc,inner+segoffset,
         sizeof(sc), (off_t)(inner+filesize), errcode);
     if (res != DW_DLV_OK) {
         return res;
     }
     ASNAR(mfp->mo_copy_word,msp->cmd,sc.cmd);
     ASNAR(mfp->mo_copy_word,msp->cmdsize,sc.cmdsize);
     _dwarf_safe_strcpy(msp->segname,sizeof(msp->segname),
         sc.segname,sizeof(sc.segname));
     ASNAR(mfp->mo_copy_word,msp->vmaddr,sc.vmaddr);
     ASNAR(mfp->mo_copy_word,msp->vmsize,sc.vmsize);
     ASNAR(mfp->mo_copy_word,msp->fileoff,sc.fileoff);
     ASNAR(mfp->mo_copy_word,msp->filesize,sc.filesize);
     if (msp->fileoff > filesize ||
         msp->filesize > filesize) {
         /* corrupt */
         *errcode = DW_DLE_MACHO_CORRUPT_COMMAND;
         return DW_DLV_ERROR;
     }
     if ((msp->fileoff+msp->filesize ) > filesize) {
         /* corrupt */
         *errcode = DW_DLE_MACHO_CORRUPT_COMMAND;
         return DW_DLV_ERROR;
     }
     ASNAR(mfp->mo_copy_word,msp->maxprot,sc.maxprot);
     ASNAR(mfp->mo_copy_word,msp->initprot,sc.initprot);
     ASNAR(mfp->mo_copy_word,msp->nsects,sc.nsects);
     if (msp->nsects >= mfp->mo_filesize) {
-#if 0
-        printf("Reading sections macho 64 fails,"
-            " mmp_offset %lu,"
-            " number of sections %lu,"
-            " filesize %lu\n",
-            (unsigned long)segoffset,
-            (unsigned long)msp->nsects,
-            (unsigned long)mfp->mo_filesize);
-#endif
         *errcode = DW_DLE_MACHO_CORRUPT_COMMAND;
         return DW_DLV_ERROR;
     }
     ASNAR(mfp->mo_copy_word,msp->flags,sc.flags);
     msp->macho_command_index = mmpindex;
     msp->sectionsoffset = afterseghdr;
     return DW_DLV_OK;
 }
@@ -587,88 +569,80 @@ static int
 _dwarf_macho_load_dwarf_section_details32(
     dwarf_macho_object_access_internals_t *mfp,
     struct generic_macho_segment_command *segp,
     Dwarf_Unsigned segi, int *errcode)
 {
     Dwarf_Unsigned seci = 0;
     Dwarf_Unsigned seccount = segp->nsects;
     Dwarf_Unsigned secalloc = seccount+1;
     Dwarf_Unsigned curoff = segp->sectionsoffset;
     Dwarf_Unsigned shdrlen = sizeof(struct section);
 
     struct generic_macho_section *secs = 0;
 
     secs = (struct generic_macho_section *)calloc(
         sizeof(struct generic_macho_section),
         (size_t)secalloc);
     if (!secs) {
         *errcode = DW_DLE_ALLOC_FAIL;
         return DW_DLV_OK;
     }
     mfp->mo_dwarf_sections = secs;
     mfp->mo_dwarf_sectioncount = secalloc;
     if ((curoff  > mfp->mo_filesize) ||
         (seccount > mfp->mo_filesize) ||
         (curoff+(seccount*sizeof(struct section)) >
             mfp->mo_filesize)) {
         *errcode = DW_DLE_FILE_TOO_SMALL;
         return DW_DLV_ERROR;
     }
     secs->offset_of_sec_rec = curoff;
     /*  Leave 0 section all zeros except our offset,
         elf-like in a sense */
     secs->dwarfsectname = "";
     ++secs;
     seci = 1;
     for (; seci < secalloc; ++seci,++secs,curoff += shdrlen ) {
         struct section mosec;
         int res = 0;
         Dwarf_Unsigned endoffset = 0;
         Dwarf_Unsigned inner = mfp->mo_inner_offset;
 
         endoffset = curoff + sizeof(mosec);
         if (curoff >=  mfp->mo_filesize ||
             endoffset > mfp->mo_filesize) {
-#if 0
-            printf("Reading sections details32 fails,"
-                " fileoffset %lu,"
-                " end-read offset %lu,"
-                " filesize %lu\n",
-                (unsigned long)curoff,
-                (unsigned long)endoffset,
-                (unsigned long)mfp->mo_filesize);
-#endif
             *errcode  = DW_DLE_MACHO_CORRUPT_SECTIONDETAILS;
             return DW_DLV_ERROR;
         }
-        res = RRMOA(mfp->mo_fd, &mosec, (off_t)(inner+curoff), sizeof(mosec),
+        res = RRMOA(mfp->mo_fd, &mosec, 
+            (off_t)(inner+curoff), sizeof(mosec),
             (off_t)(inner+mfp->mo_filesize), errcode);
         if (res != DW_DLV_OK) {
             return res;
         }
         _dwarf_safe_strcpy(secs->sectname,
             sizeof(secs->sectname),
             mosec.sectname,sizeof(mosec.sectname));
         _dwarf_safe_strcpy(secs->segname,
             sizeof(secs->segname),
             mosec.segname,sizeof(mosec.segname));
         ASNAR(mfp->mo_copy_word,secs->addr,mosec.addr);
         ASNAR(mfp->mo_copy_word,secs->size,mosec.size);
         ASNAR(mfp->mo_copy_word,secs->offset,mosec.offset);
         ASNAR(mfp->mo_copy_word,secs->align,mosec.align);
         ASNAR(mfp->mo_copy_word,secs->reloff,mosec.reloff);
         ASNAR(mfp->mo_copy_word,secs->nreloc,mosec.nreloc);
         ASNAR(mfp->mo_copy_word,secs->flags,mosec.flags);
         if (secs->offset > mfp->mo_filesize ||
             secs->size > mfp->mo_filesize ||
             (secs->offset+secs->size) > mfp->mo_filesize) {
             *errcode  = DW_DLE_MACHO_CORRUPT_SECTIONDETAILS;
             return DW_DLV_ERROR;
         }
         secs->reserved1 = 0;
         secs->reserved2 = 0;
         secs->reserved3 = 0;
         secs->generic_segment_num  = segi;
         secs->offset_of_sec_rec = curoff;
     }
     return DW_DLV_OK;
 }
@@ -676,90 +650,81 @@ static int
 _dwarf_macho_load_dwarf_section_details64(
     dwarf_macho_object_access_internals_t *mfp,
     struct generic_macho_segment_command *segp,
     Dwarf_Unsigned segi,
     int *errcode)
 {
     Dwarf_Unsigned seci = 0;
     Dwarf_Unsigned seccount = segp->nsects;
     Dwarf_Unsigned secalloc = seccount+1;
     Dwarf_Unsigned curoff = segp->sectionsoffset;
     Dwarf_Unsigned shdrlen = sizeof(struct section_64);
     struct generic_macho_section *secs = 0;
 
     secs = (struct generic_macho_section *)calloc(
         sizeof(struct generic_macho_section),
         (size_t)secalloc);
     if (!secs) {
         *errcode = DW_DLE_ALLOC_FAIL;
         return DW_DLV_ERROR;
     }
     mfp->mo_dwarf_sections = secs;
     mfp->mo_dwarf_sectioncount = secalloc;
     secs->offset_of_sec_rec = curoff;
     /*  Leave 0 section all zeros except our offset,
         elf-like in a sense */
     secs->dwarfsectname = "";
     ++secs;
     if ((curoff  > mfp->mo_filesize) ||
         (seccount > mfp->mo_filesize) ||
         (curoff+(seccount*sizeof(struct section_64)) >
             mfp->mo_filesize)) {
         *errcode = DW_DLE_FILE_TOO_SMALL;
         return DW_DLV_ERROR;
     }
     seci = 1;
     for (; seci < secalloc; ++seci,++secs,curoff += shdrlen ) {
         int res = 0;
         struct section_64 mosec;
         Dwarf_Unsigned endoffset = 0;
         Dwarf_Unsigned inner = mfp->mo_inner_offset;
 
         endoffset = curoff + sizeof(mosec);
         if (curoff >=  mfp->mo_filesize ||
             endoffset > mfp->mo_filesize) {
-#if 0
-            printf("Reading sections details64 fails,"
-                " fileoffset %lu,"
-                " end-read offset %lu,"
-                " filesize %lu\n",
-                (unsigned long)curoff,
-                (unsigned long)endoffset,
-                (unsigned long)mfp->mo_filesize);
-#endif
             *errcode = DW_DLE_MACHO_CORRUPT_SECTIONDETAILS;
             return DW_DLV_ERROR;
         }
 
         res = RRMOA(mfp->mo_fd, &mosec,
             (off_t)(inner+curoff), sizeof(mosec),
             (off_t)(inner+mfp->mo_filesize), errcode);
         if (res != DW_DLV_OK) {
             return res;
         }
         _dwarf_safe_strcpy(secs->sectname,
             sizeof(secs->sectname),
             mosec.sectname,sizeof(mosec.sectname));
         _dwarf_safe_strcpy(secs->segname,
             sizeof(secs->segname),
             mosec.segname,sizeof(mosec.segname));
         ASNAR(mfp->mo_copy_word,secs->addr,mosec.addr);
         ASNAR(mfp->mo_copy_word,secs->size,mosec.size);
         ASNAR(mfp->mo_copy_word,secs->offset,mosec.offset);
         ASNAR(mfp->mo_copy_word,secs->align,mosec.align);
         ASNAR(mfp->mo_copy_word,secs->reloff,mosec.reloff);
         ASNAR(mfp->mo_copy_word,secs->nreloc,mosec.nreloc);
         ASNAR(mfp->mo_copy_word,secs->flags,mosec.flags);
         if (secs->offset > mfp->mo_filesize ||
             secs->size > mfp->mo_filesize ||
             (secs->offset+secs->size) > mfp->mo_filesize) {
             *errcode = DW_DLE_MACHO_CORRUPT_SECTIONDETAILS;
             return DW_DLV_ERROR;
         }
         secs->reserved1 = 0;
         secs->reserved2 = 0;
         secs->reserved3 = 0;
         secs->offset_of_sec_rec = curoff;
         secs->generic_segment_num  = segi;
     }
     return DW_DLV_OK;
 }
@@ -1222,141 +1187,152 @@ static int
 _dwarf_object_detector_universal_head_fd(
     int fd,
     Dwarf_Unsigned      dw_filesize,
     unsigned int      *dw_contentcount,
     Dwarf_Universal_Head * dw_head,
     int                *errcode)
 {
     struct Dwarf_Universal_Head_s  duhd;
     struct Dwarf_Universal_Head_s *duhdp = 0;
     struct  fat_header fh;
     int     res = 0;
     void (*word_swap) (void *, const void *, size_t);
     int     locendian = 0;
     int     locoffsetsize = 0;
 
     duhd = duhzero;
     fh = fhzero;
     /*  A universal head is always at offset zero. */
     res = RRMOA(fd,&fh,0,sizeof(fh), dw_filesize,errcode);
     if (res != DW_DLV_OK) {
-        printf("Reading struct for universal binary "
-            "header failed\n");
         return res;
     }
     duhd.au_magic = magic_copy((unsigned char *)&fh.magic[0],4);
     if (duhd.au_magic == FAT_MAGIC) {
         locendian = DW_END_big;
         locoffsetsize = 32;
     } else if (duhd.au_magic == FAT_CIGAM) {
         locendian = DW_END_little;
         locoffsetsize = 32;
     }else if (duhd.au_magic == FAT_MAGIC_64) {
         locendian = DW_END_big;
         locoffsetsize = 64;
     } else if (duhd.au_magic == FAT_CIGAM_64) {
         locendian = DW_END_little;
         locoffsetsize = 64;
     } else {
-printf("Reading magic number universal compare failed " "Inconsistent\n");
         *errcode = DW_DLE_FILE_WRONG_TYPE;
         return DW_DLV_ERROR;
     }
 #ifdef WORDS_BIGENDIAN
     if (locendian == DW_END_little) {
         word_swap = _dwarf_memcpy_swap_bytes;
     } else {
         word_swap = _dwarf_memcpy_noswap_bytes;
     }
 #else  /* LITTLE ENDIAN */
     if (locendian == DW_END_little) {
         word_swap = _dwarf_memcpy_noswap_bytes;
     } else {
         word_swap = _dwarf_memcpy_swap_bytes;
     }
 #endif /* LITTLE- BIG-ENDIAN */
 
     ASNAR(word_swap,duhd.au_count,fh.nfat_arch);
     /*  The limit is a first-cut safe heuristic. */
     if (duhd.au_count >= (dw_filesize/2) ) {
         *errcode = DW_DLE_UNIVERSAL_BINARY_ERROR ;
         return DW_DLV_ERROR;
     }
     duhd.au_arches = (struct  Dwarf_Universal_Arch_s*)
         calloc(duhd.au_count, sizeof(struct Dwarf_Universal_Arch_s));
     if (!duhd.au_arches) {
         *errcode = DW_DLE_ALLOC_FAIL;
         return DW_DLV_ERROR;
     }
     if (locoffsetsize == 32) {
         struct fat_arch * fa = 0;
         fa = (struct fat_arch *)calloc(duhd.au_count,
             sizeof(struct fat_arch));
         if (!fa) {
             *errcode = DW_DLE_ALLOC_FAIL;
             free(duhd.au_arches);
             duhd.au_arches = 0;
             free(fa);
             return res;
         }
+        if (duhd.au_count*sizeof(*fa) >= dw_filesize) {
+            free(duhd.au_arches);
+            duhd.au_arches = 0;
+            free(fa);
+            *errcode = DW_DLE_FILE_OFFSET_BAD;
+            return DW_DLV_ERROR;
+        }
         res = RRMOA(fd,fa,/*offset=*/sizeof(fh),
             duhd.au_count*sizeof(*fa),
             dw_filesize,errcode);
         if (res != DW_DLV_OK) {
             free(duhd.au_arches);
             duhd.au_arches = 0;
             free(fa);
             return res;
         }
         res = fill_in_uni_arch_32(fa,&duhd,word_swap);
         if (res != DW_DLV_OK) {
             free(duhd.au_arches);
             duhd.au_arches = 0;
             free(fa);
             return res;
         }
         free(fa);
         fa = 0;
     } else { /* 64 */
         struct fat_arch_64 * fa = 0;
         fa = (struct fat_arch_64 *)calloc(duhd.au_count,
             sizeof(struct fat_arch));
         if (!fa) {
             *errcode = DW_DLE_ALLOC_FAIL;
             free(duhd.au_arches);
             duhd.au_arches = 0;
             return res;
         }
+        if (duhd.au_count*sizeof(*fa) >= dw_filesize) {
+            free(duhd.au_arches);
+            duhd.au_arches = 0;
+            free(fa);
+            *errcode = DW_DLE_FILE_OFFSET_BAD ;
+            return DW_DLV_ERROR;
+        }
         res = RRMOA(fd,fa,/*offset*/sizeof(fh),
             duhd.au_count*sizeof(fa),
             dw_filesize,errcode);
         if (res == DW_DLV_ERROR) {
             free(duhd.au_arches);
             duhd.au_arches = 0;
             free(fa);
             return res;
         }
         res = fill_in_uni_arch_64(fa,&duhd,word_swap);
         if (res != DW_DLV_OK) {
             free(duhd.au_arches);
             duhd.au_arches = 0;
             return res;
         }
         free(fa);
         fa = 0;
     }
 
     duhdp = malloc(sizeof(*duhdp));
     if (!duhdp) {
         free(duhd.au_arches);
         duhd.au_arches = 0;
         *errcode = DW_DLE_ALLOC_FAIL;
         return res;
     }
     memcpy(duhdp,&duhd,sizeof(duhd));
     *dw_contentcount = duhd.au_count;
     duhdp->au_arches = duhd.au_arches;
     *dw_head = duhdp;
     return res;
 }
 
 #if 0
@@ -1377,38 +1353,28 @@ int
 _dwarf_object_detector_universal_instance(
     Dwarf_Universal_Head dw_head,
     Dwarf_Unsigned  dw_index_of,
     Dwarf_Unsigned *dw_cpu_type,
     Dwarf_Unsigned *dw_cpusubtype,
     Dwarf_Unsigned *dw_offset,
     Dwarf_Unsigned *dw_size,
     Dwarf_Unsigned *dw_align,
     int         *errcode)
 {
     struct  Dwarf_Universal_Arch_s* arch = 0;
 
     if (!dw_head) {
-        printf("Missing argument to "
-            "dwarf_object_detector_universal_instance");
         *errcode = DW_DLE_UNIVERSAL_BINARY_ERROR;
         return DW_DLV_ERROR;
     }
     if (dw_index_of >= dw_head->au_count){
-printf("Requested index 0x%lu"
-" to specific binary "
-"is too larg: valid: 0 to 0x%lu\n",
-(unsigned long)dw_index_of,
-(unsigned long)dw_head->au_count);
         return DW_DLV_NO_ENTRY;
     }
     arch =  dw_head->au_arches +dw_index_of;
     *dw_cpu_type = arch->au_cputype;
     *dw_cpusubtype = arch->au_cpusubtype;
     *dw_offset = arch->au_offset;
     *dw_size = arch->au_size;
     *dw_align = arch->au_align;
-#if 0
-    print_arch_item(dw_index_of,arch);
-#endif
     return DW_DLV_OK;
 }
 
