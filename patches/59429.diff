commit a2f7352f3e809cb1b267e769d00ea84e4ef46bf0
Author: Kadir Cetinkaya <kadircet@google.com>
Date:   Wed May 24 14:22:43 2023 +0200

    [clangd] Dont run raw-lexer for OOB source locations
    
    We can get stale source locations from preamble, make sure we don't
    access those locations without checking first.
    
    Fixes https://github.com/clangd/clangd/issues/1636.
    
    Differential Revision: https://reviews.llvm.org/D151321

diff --git a/clang-tools-extra/clangd/Diagnostics.cpp b/clang-tools-extra/clangd/Diagnostics.cpp
index b708f9c3d3b0..4c5def3063f1 100644
--- a/clang-tools-extra/clangd/Diagnostics.cpp
+++ b/clang-tools-extra/clangd/Diagnostics.cpp
@@ -96,34 +96,40 @@ bool locationInRange(SourceLocation L, CharSourceRange R,
 
 // Clang diags have a location (shown as ^) and 0 or more ranges (~~~~).
 // LSP needs a single range.
-Range diagnosticRange(const clang::Diagnostic &D, const LangOptions &L) {
+std::optional<Range> diagnosticRange(const clang::Diagnostic &D,
+                                     const LangOptions &L) {
   auto &M = D.getSourceManager();
   auto PatchedRange = [&M](CharSourceRange &R) {
     R.setBegin(translatePreamblePatchLocation(R.getBegin(), M));
     R.setEnd(translatePreamblePatchLocation(R.getEnd(), M));
     return R;
   };
   auto Loc = M.getFileLoc(D.getLocation());
   for (const auto &CR : D.getRanges()) {
     auto R = Lexer::makeFileCharRange(CR, M, L);
     if (locationInRange(Loc, R, M))
       return halfOpenToRange(M, PatchedRange(R));
   }
   // The range may be given as a fixit hint instead.
   for (const auto &F : D.getFixItHints()) {
     auto R = Lexer::makeFileCharRange(F.RemoveRange, M, L);
     if (locationInRange(Loc, R, M))
       return halfOpenToRange(M, PatchedRange(R));
   }
+  // Source locations from stale preambles might become OOB.
+  // FIXME: These diagnostics might point to wrong locations even when they're
+  // not OOB.
+  auto [FID, Offset] = M.getDecomposedLoc(Loc);
+  if (Offset > M.getBufferData(FID).size())
+    return std::nullopt;
   // If the token at the location is not a comment, we use the token.
   // If we can't get the token at the location, fall back to using the location
   auto R = CharSourceRange::getCharRange(Loc);
   Token Tok;
-  if (!Lexer::getRawToken(Loc, Tok, M, L, true) && Tok.isNot(tok::comment)) {
+  if (!Lexer::getRawToken(Loc, Tok, M, L, true) && Tok.isNot(tok::comment))
     R = CharSourceRange::getTokenRange(Tok.getLocation(), Tok.getEndLoc());
-  }
   return halfOpenToRange(M, PatchedRange(R));
 }
 
 // Try to find a location in the main-file to report the diagnostic D.
 // Returns a description like "in included file", or nullptr on failure.
@@ -648,195 +654,198 @@ static void fillNonLocationData(DiagnosticsEngine::Level DiagLevel,
 void StoreDiags::HandleDiagnostic(DiagnosticsEngine::Level DiagLevel,
                                   const clang::Diagnostic &Info) {
   // If the diagnostic was generated for a different SourceManager, skip it.
   // This happens when a module is imported and needs to be implicitly built.
   // The compilation of that module will use the same StoreDiags, but different
   // SourceManager.
   if (OrigSrcMgr && Info.hasSourceManager() &&
       OrigSrcMgr != &Info.getSourceManager()) {
     IgnoreDiagnostics::log(DiagLevel, Info);
     return;
   }
 
   DiagnosticConsumer::HandleDiagnostic(DiagLevel, Info);
   bool OriginallyError =
       Info.getDiags()->getDiagnosticIDs()->isDefaultMappingAsError(
           Info.getID());
 
   if (Info.getLocation().isInvalid()) {
     // Handle diagnostics coming from command-line arguments. The source manager
     // is *not* available at this point, so we cannot use it.
     if (!OriginallyError) {
       IgnoreDiagnostics::log(DiagLevel, Info);
       return; // non-errors add too much noise, do not show them.
     }
 
     flushLastDiag();
 
     LastDiag = Diag();
     LastDiagLoc.reset();
     LastDiagOriginallyError = OriginallyError;
     LastDiag->ID = Info.getID();
     fillNonLocationData(DiagLevel, Info, *LastDiag);
     LastDiag->InsideMainFile = true;
     // Put it at the start of the main file, for a lack of a better place.
     LastDiag->Range.start = Position{0, 0};
     LastDiag->Range.end = Position{0, 0};
     return;
   }
 
   if (!LangOpts || !Info.hasSourceManager()) {
     IgnoreDiagnostics::log(DiagLevel, Info);
     return;
   }
 
   SourceManager &SM = Info.getSourceManager();
 
   auto FillDiagBase = [&](DiagBase &D) {
     fillNonLocationData(DiagLevel, Info, D);
 
     SourceLocation PatchLoc =
         translatePreamblePatchLocation(Info.getLocation(), SM);
     D.InsideMainFile = isInsideMainFile(PatchLoc, SM);
-    D.Range = diagnosticRange(Info, *LangOpts);
+    if (auto DRange = diagnosticRange(Info, *LangOpts))
+      D.Range = *DRange;
+    else
+      D.Severity = DiagnosticsEngine::Ignored;
     auto FID = SM.getFileID(Info.getLocation());
     if (const auto FE = SM.getFileEntryRefForID(FID)) {
       D.File = FE->getName().str();
       D.AbsFile = getCanonicalPath(*FE, SM);
     }
     D.ID = Info.getID();
     return D;
   };
 
   auto AddFix = [&](bool SyntheticMessage) -> bool {
     assert(!Info.getFixItHints().empty() &&
            "diagnostic does not have attached fix-its");
     // No point in generating fixes, if the diagnostic is for a different file.
     if (!LastDiag->InsideMainFile)
       return false;
     // Copy as we may modify the ranges.
     auto FixIts = Info.getFixItHints().vec();
     llvm::SmallVector<TextEdit, 1> Edits;
     for (auto &FixIt : FixIts) {
       // Allow fixits within a single macro-arg expansion to be applied.
       // This can be incorrect if the argument is expanded multiple times in
       // different contexts. Hopefully this is rare!
       if (FixIt.RemoveRange.getBegin().isMacroID() &&
           FixIt.RemoveRange.getEnd().isMacroID() &&
           SM.getFileID(FixIt.RemoveRange.getBegin()) ==
               SM.getFileID(FixIt.RemoveRange.getEnd())) {
         FixIt.RemoveRange = CharSourceRange(
             {SM.getTopMacroCallerLoc(FixIt.RemoveRange.getBegin()),
              SM.getTopMacroCallerLoc(FixIt.RemoveRange.getEnd())},
             FixIt.RemoveRange.isTokenRange());
       }
       // Otherwise, follow clang's behavior: no fixits in macros.
       if (FixIt.RemoveRange.getBegin().isMacroID() ||
           FixIt.RemoveRange.getEnd().isMacroID())
         return false;
       if (!isInsideMainFile(FixIt.RemoveRange.getBegin(), SM))
         return false;
       Edits.push_back(toTextEdit(FixIt, SM, *LangOpts));
     }
 
     llvm::SmallString<64> Message;
     // If requested and possible, create a message like "change 'foo' to 'bar'".
     if (SyntheticMessage && FixIts.size() == 1) {
       const auto &FixIt = FixIts.front();
       bool Invalid = false;
       llvm::StringRef Remove =
           Lexer::getSourceText(FixIt.RemoveRange, SM, *LangOpts, &Invalid);
       llvm::StringRef Insert = FixIt.CodeToInsert;
       if (!Invalid) {
         llvm::raw_svector_ostream M(Message);
         if (!Remove.empty() && !Insert.empty()) {
           M << "change '";
           writeCodeToFixMessage(M, Remove);
           M << "' to '";
           writeCodeToFixMessage(M, Insert);
           M << "'";
         } else if (!Remove.empty()) {
           M << "remove '";
           writeCodeToFixMessage(M, Remove);
           M << "'";
         } else if (!Insert.empty()) {
           M << "insert '";
           writeCodeToFixMessage(M, Insert);
           M << "'";
         }
         // Don't allow source code to inject newlines into diagnostics.
         std::replace(Message.begin(), Message.end(), '\n', ' ');
       }
     }
     if (Message.empty()) // either !SyntheticMessage, or we failed to make one.
       Info.FormatDiagnostic(Message);
     LastDiag->Fixes.push_back(
         Fix{std::string(Message.str()), std::move(Edits), {}});
     return true;
   };
 
   if (!isNote(DiagLevel)) {
     // Handle the new main diagnostic.
     flushLastDiag();
 
     LastDiag = Diag();
     // FIXME: Merge with feature modules.
     if (Adjuster)
       DiagLevel = Adjuster(DiagLevel, Info);
 
     FillDiagBase(*LastDiag);
     if (isExcluded(LastDiag->ID))
       LastDiag->Severity = DiagnosticsEngine::Ignored;
     if (DiagCB)
       DiagCB(Info, *LastDiag);
     // Don't bother filling in the rest if diag is going to be dropped.
     if (LastDiag->Severity == DiagnosticsEngine::Ignored)
       return;
 
     LastDiagLoc.emplace(Info.getLocation(), Info.getSourceManager());
     LastDiagOriginallyError = OriginallyError;
     if (!Info.getFixItHints().empty())
       AddFix(true /* try to invent a message instead of repeating the diag */);
     if (Fixer) {
       auto ExtraFixes = Fixer(LastDiag->Severity, Info);
       LastDiag->Fixes.insert(LastDiag->Fixes.end(), ExtraFixes.begin(),
                              ExtraFixes.end());
     }
   } else {
     // Handle a note to an existing diagnostic.
     if (!LastDiag) {
       assert(false && "Adding a note without main diagnostic");
       IgnoreDiagnostics::log(DiagLevel, Info);
       return;
     }
 
     // If a diagnostic was suppressed due to the suppression filter,
     // also suppress notes associated with it.
     if (LastDiag->Severity == DiagnosticsEngine::Ignored)
       return;
 
     // Give include-fixer a chance to replace a note with a fix.
     if (Fixer) {
       auto ReplacementFixes = Fixer(LastDiag->Severity, Info);
       if (!ReplacementFixes.empty()) {
         assert(Info.getNumFixItHints() == 0 &&
                "Include-fixer replaced a note with clang fix-its attached!");
         LastDiag->Fixes.insert(LastDiag->Fixes.end(), ReplacementFixes.begin(),
                                ReplacementFixes.end());
         return;
       }
     }
 
     if (!Info.getFixItHints().empty()) {
       // A clang note with fix-it is not a separate diagnostic in clangd. We
       // attach it as a Fix to the main diagnostic instead.
       if (!AddFix(false /* use the note as the message */))
         IgnoreDiagnostics::log(DiagLevel, Info);
     } else {
       // A clang note without fix-its corresponds to clangd::Note.
       Note N;
       FillDiagBase(N);
 
       LastDiag->Notes.push_back(std::move(N));
     }
   }
 }
diff --git a/clang-tools-extra/clangd/unittests/PreambleTests.cpp b/clang-tools-extra/clangd/unittests/PreambleTests.cpp
index 23ba0fc3e52f..4f2cc3e0abe7 100644
--- a/clang-tools-extra/clangd/unittests/PreambleTests.cpp
+++ b/clang-tools-extra/clangd/unittests/PreambleTests.cpp
@@ -787,48 +787,79 @@ o>]])");
     Annotations NewCode(R"(#include <fo\
 x>)");
     auto AST = createPatchedAST(Code.code(), NewCode.code());
     EXPECT_THAT(*AST->getDiagnostics(), IsEmpty());
   }
   {
     // Preserves notes.
     Annotations Code(R"(
 #define $note[[BAR]] 1
 #define $main[[BAR]] 2)");
     Annotations NewCode(R"(
 #define BAZ 0
 #define $note[[BAR]] 1
 #define BAZ 0
 #define $main[[BAR]] 2)");
     auto AST = createPatchedAST(Code.code(), NewCode.code());
     EXPECT_THAT(
         *AST->getDiagnostics(),
         ElementsAre(AllOf(Diag(NewCode.range("main"), "-Wmacro-redefined"),
                           withNote(Diag(NewCode.range("note"))))));
   }
   {
     // Preserves diag without note.
     Annotations Code(R"(
 #define $note[[BAR]] 1
 #define $main[[BAR]] 2)");
     Annotations NewCode(R"(
 #define $main[[BAR]] 2)");
     auto AST = createPatchedAST(Code.code(), NewCode.code());
     EXPECT_THAT(
         *AST->getDiagnostics(),
         ElementsAre(AllOf(Diag(NewCode.range("main"), "-Wmacro-redefined"),
                           Field(&Diag::Notes, IsEmpty()))));
   }
   {
     // Make sure orphaned notes are not promoted to diags.
     Annotations Code(R"(
 #define $note[[BAR]] 1
 #define $main[[BAR]] 2)");
     Annotations NewCode(R"(
 #define BAZ 0
 #define BAR 1)");
     auto AST = createPatchedAST(Code.code(), NewCode.code());
     EXPECT_THAT(*AST->getDiagnostics(), IsEmpty());
   }
+  {
+    Annotations Code(R"(
+#ifndef FOO
+#define FOO
+void foo();
+#endif)");
+    // This code will emit a diagnostic for unterminated #ifndef (as stale
+    // preamble has the conditional but main file doesn't terminate it).
+    // We shouldn't emit any diagnotiscs (and shouldn't crash).
+    Annotations NewCode("");
+    auto AST = createPatchedAST(Code.code(), NewCode.code());
+    EXPECT_THAT(*AST->getDiagnostics(), IsEmpty());
+  }
+  {
+    Annotations Code(R"(
+#ifndef FOO
+#define FOO
+void foo();
+#endif)");
+    // This code will emit a diagnostic for unterminated #ifndef (as stale
+    // preamble has the conditional but main file doesn't terminate it).
+    // We shouldn't emit any diagnotiscs (and shouldn't crash).
+    // FIXME: Patch/ignore diagnostics in such cases.
+    Annotations NewCode(R"(
+i[[nt]] xyz;
+    )");
+    auto AST = createPatchedAST(Code.code(), NewCode.code());
+    EXPECT_THAT(
+        *AST->getDiagnostics(),
+        ElementsAre(Diag(NewCode.range(), "pp_unterminated_conditional")));
+  }
 }
 
 MATCHER_P2(Mark, Range, Text, "") {
