commit c247a8351f4d2be224e8cc424e104d8823450f5d
Author: Dario Lombardo <lomato@gmail.com>
Date:   Sun Dec 15 21:48:01 2019 +0100

    wcp: skip buffer too long.
    
    Fix overflow WCP buffer error.
    Slight change in integer increments while here, to improve
    readability.
    
    Bug: 16276
    Change-Id: Icadd0d051676e6eeeec1569d7c4b269e461a986a
    Reviewed-on: https://code.wireshark.org/review/35461
    Petri-Dish: Alexis La Goutte <alexis.lagoutte@gmail.com>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Anders Broman <a.broman58@gmail.com>

diff --git a/epan/dissectors/packet-wcp.c b/epan/dissectors/packet-wcp.c
index 82028b673a..07db5c8d05 100644
--- a/epan/dissectors/packet-wcp.c
+++ b/epan/dissectors/packet-wcp.c
@@ -159,6 +159,7 @@ static gint ett_wcp_field = -1;
 static expert_field ei_wcp_compressed_data_exceeds = EI_INIT;
 static expert_field ei_wcp_uncompressed_data_exceeds = EI_INIT;
 static expert_field ei_wcp_invalid_window_offset = EI_INIT;
+static expert_field ei_wcp_buffer_too_long = EI_INIT;
 /* static expert_field ei_wcp_invalid_match_length = EI_INIT; */
 
 static dissector_handle_t fr_uncompressed_handle;
@@ -262,24 +263,28 @@ dissect_wcp_reset(tvbuff_t *tvb, int offset, proto_tree *tree) {
 }
 
 
-static void wcp_save_data(tvbuff_t *tvb, packet_info *pinfo) {
+static void wcp_save_data(tvbuff_t *tvb, packet_info *pinfo, proto_tree* tree) {
 
 	wcp_window_t *buf_ptr = 0;
 	size_t len;
 
 	/* discard first 2 bytes, header and last byte (check byte) */
 	len = tvb_reported_length(tvb) - 3;
 	buf_ptr = get_wcp_window_ptr(pinfo);
 
 	if ((buf_ptr->buf_cur + len) <= (buf_ptr->buffer + MAX_WIN_BUF_LEN)) {
 		tvb_memcpy(tvb, buf_ptr->buf_cur, 2, len);
-		buf_ptr->buf_cur = buf_ptr->buf_cur + len;
+		buf_ptr->buf_cur += len;
 	} else {
 		guint8 *buf_end = buf_ptr->buffer + MAX_WIN_BUF_LEN;
 		tvb_memcpy(tvb, buf_ptr->buf_cur, 2, buf_end - buf_ptr->buf_cur);
-		tvb_memcpy(tvb, buf_ptr->buffer, (gint) (buf_end - buf_ptr->buf_cur-2),
-			len - (buf_end - buf_ptr->buf_cur));
-		buf_ptr->buf_cur = buf_ptr->buf_cur + len - MAX_WIN_BUF_LEN;
+		if (buf_ptr->buf_cur + len <= buf_end) {
+			tvb_memcpy(tvb, buf_ptr->buffer, (gint) (buf_end - buf_ptr->buf_cur-2),
+				len - (buf_end - buf_ptr->buf_cur));
+			buf_ptr->buf_cur += len - MAX_WIN_BUF_LEN;
+		} else {
+			proto_tree_add_expert(tree, pinfo, &ei_wcp_buffer_too_long, tvb, 0, -1);
+		}
 	}
 }
 
@@ -287,85 +292,85 @@ static void wcp_save_data(tvbuff_t *tvb, packet_info *pinfo) {
 static int dissect_wcp(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void* data _U_) {
 
 	proto_tree	*wcp_tree;
 	proto_item	*ti;
 	int		wcp_header_len;
 	guint16		temp, cmd, ext_cmd, seq;
 	tvbuff_t	*next_tvb;
 
 	col_set_str(pinfo->cinfo, COL_PROTOCOL, "WCP");
 	col_clear(pinfo->cinfo, COL_INFO);
 
 	temp = tvb_get_ntohs(tvb, 0);
 
 	cmd = (temp & 0xf000) >> 12;
 	ext_cmd = (temp & 0x0f00) >> 8;
 
 	if (cmd == 0xf)
 		wcp_header_len = 1;
 	else
 		wcp_header_len = 2;
 
 	seq = temp & 0x0fff;
 
 	/* XXX should test seq to be sure it the last + 1 !! */
 
 	col_set_str(pinfo->cinfo, COL_INFO, val_to_str_const(cmd, cmd_string, "Unknown"));
 	if (cmd == 0xf)
 		col_append_fstr(pinfo->cinfo, COL_INFO, ", %s",
 				val_to_str_const(ext_cmd, ext_cmd_string, "Unknown"));
 
 	ti = proto_tree_add_item(tree, proto_wcp, tvb, 0, wcp_header_len, ENC_NA);
 	wcp_tree = proto_item_add_subtree(ti, ett_wcp);
 
 	proto_tree_add_item(wcp_tree, hf_wcp_cmd, tvb, 0, 1, ENC_NA);
 	if (cmd == 0xf) {
 		proto_tree_add_item(wcp_tree, hf_wcp_ext_cmd, tvb, 1, 1, ENC_NA);
 		switch (ext_cmd) {
 		case CONNECT_REQ:
 			dissect_wcp_con_req(tvb, 1, wcp_tree);
 			break;
 
 		case CONNECT_ACK:
 			dissect_wcp_con_ack(tvb, 1, wcp_tree);
 			break;
 		case INIT_REQ:
 		case INIT_ACK:
 			dissect_wcp_init(tvb, 1, wcp_tree);
 			break;
 		case RESET_REQ:
 		case RESET_ACK:
 			dissect_wcp_reset(tvb, 1, wcp_tree);
 			break;
 		default:
 			break;
 		}
 	} else {
 		proto_tree_add_uint(wcp_tree, hf_wcp_seq, tvb, 0, 2, seq);
 	}
 
 
 	/* exit if done */
 	if (cmd != 1 && cmd != 0 && !(cmd == 0xf && ext_cmd == 0))
 		return 2;
 
 	if (cmd == 1) { /* uncompressed data */
 		if (!pinfo->fd->visited) {	/* if first pass */
-			wcp_save_data(tvb, pinfo);
+			wcp_save_data(tvb, pinfo, wcp_tree);
 		}
 		next_tvb = tvb_new_subset_remaining(tvb, wcp_header_len);
 	} else { /* cmd == 0 || (cmd == 0xf && ext_cmd == 0) */
 
 		next_tvb = wcp_uncompress(tvb, wcp_header_len, pinfo, wcp_tree);
 
 		if (!next_tvb) {
 			return tvb_captured_length(tvb);
 		}
 	}
 
 	/* add the check byte */
 	proto_tree_add_checksum(wcp_tree, tvb, tvb_reported_length(tvb) - 1, hf_wcp_chksum, -1, NULL, pinfo, 0, ENC_NA, PROTO_CHECKSUM_NO_FLAGS);
 
 	call_dissector(fr_uncompressed_handle, next_tvb, pinfo, tree);
 
 	return tvb_captured_length(tvb);
 }
@@ -655,112 +660,113 @@ void
 proto_register_wcp(void)
 {
 	static hf_register_info hf[] = {
 		{ &hf_wcp_cmd,
 		  { "Command", "wcp.cmd", FT_UINT8, BASE_HEX, VALS(cmd_string), WCP_CMD,
 		    "Compression Command", HFILL }},
 		{ &hf_wcp_ext_cmd,
 		  { "Extended Command", "wcp.ext_cmd", FT_UINT8, BASE_HEX, VALS(ext_cmd_string), WCP_EXT_CMD,
 		    "Extended Compression Command", HFILL }},
 		{ &hf_wcp_seq,
 		  { "SEQ", "wcp.seq", FT_UINT16, BASE_HEX, NULL, WCP_SEQ,
 		    "Sequence Number", HFILL }},
 		{ &hf_wcp_chksum,
 		  { "Checksum", "wcp.checksum", FT_UINT8, BASE_DEC, NULL, 0,
 		    "Packet Checksum", HFILL }},
 		{ &hf_wcp_tid,
 		  { "TID", "wcp.tid", FT_UINT16, BASE_DEC, NULL, 0,
 		    NULL, HFILL }},
 		{ &hf_wcp_rev,
 		  { "Revision", "wcp.rev", FT_UINT8, BASE_DEC, NULL, 0,
 		    NULL, HFILL }},
 		{ &hf_wcp_init,
 		  { "Initiator", "wcp.init", FT_UINT8, BASE_DEC, NULL, 0,
 		    NULL, HFILL }},
 		{ &hf_wcp_seq_size,
 		  { "Seq Size", "wcp.seq_size", FT_UINT8, BASE_DEC, NULL, 0,
 		    "Sequence Size", HFILL }},
 		{ &hf_wcp_alg_cnt,
 		  { "Alg Count", "wcp.alg_cnt", FT_UINT8, BASE_DEC, NULL, 0,
 		    "Algorithm Count", HFILL }},
 		{ &hf_wcp_alg_a,
 		  { "Alg 1", "wcp.alg1", FT_UINT8, BASE_DEC, NULL, 0,
 		    "Algorithm #1", HFILL }},
 		{ &hf_wcp_alg_b,
 		  { "Alg 2", "wcp.alg2", FT_UINT8, BASE_DEC, NULL, 0,
 		    "Algorithm #2", HFILL }},
 		{ &hf_wcp_alg_c,
 		  { "Alg 3", "wcp.alg3", FT_UINT8, BASE_DEC, NULL, 0,
 		    "Algorithm #3", HFILL }},
 		{ &hf_wcp_alg_d,
 		  { "Alg 4", "wcp.alg4", FT_UINT8, BASE_DEC, NULL, 0,
 		    "Algorithm #4", HFILL }},
 		{ &hf_wcp_alg,
 		  { "Alg", "wcp.alg", FT_UINT8, BASE_DEC, NULL, 0,
 		    "Algorithm", HFILL }},
 #if 0
 		{ &hf_wcp_rexmit,
 		  { "Rexmit", "wcp.rexmit", FT_UINT8, BASE_DEC, NULL, 0,
 		    "Retransmit", HFILL }},
 #endif
 		{ &hf_wcp_hist_size,
 		  { "History", "wcp.hist", FT_UINT8, BASE_DEC, NULL, 0,
 		    "History Size", HFILL }},
 		{ &hf_wcp_ppc,
 		  { "PerPackComp", "wcp.ppc", FT_UINT8, BASE_DEC, NULL, 0,
 		    "Per Packet Compression", HFILL }},
 		{ &hf_wcp_pib,
 		  { "PIB", "wcp.pib", FT_UINT8, BASE_DEC, NULL, 0,
 		    NULL, HFILL }},
 		{ &hf_wcp_compressed_data,
 		  { "Compressed Data", "wcp.compressed_data", FT_NONE, BASE_NONE, NULL, 0,
 		    "Raw compressed data", HFILL }},
 		{ &hf_wcp_comp_bits,
 		  { "Compress Flag", "wcp.flag", FT_UINT8, BASE_HEX, NULL, 0,
 		    "Compressed byte flag", HFILL }},
 #if 0
 		{ &hf_wcp_comp_marker,
 		  { "Compress Marker", "wcp.mark", FT_UINT8, BASE_DEC, NULL, 0,
 		    "Compressed marker", HFILL }},
 #endif
 		{ &hf_wcp_offset,
 		  { "Source offset", "wcp.off", FT_UINT16, BASE_HEX, NULL, WCP_OFFSET_MASK,
 		    "Data source offset", HFILL }},
 		{ &hf_wcp_short_len,
 		  { "Compress Length", "wcp.short_len", FT_UINT8, BASE_HEX, NULL, 0xf0,
 		    "Compressed length", HFILL }},
 		{ &hf_wcp_long_len,
 		  { "Compress Length", "wcp.long_len", FT_UINT8, BASE_HEX, NULL, 0,
 		    "Compressed length", HFILL }},
 		{ &hf_wcp_long_run,
 		  { "Long Compression", "wcp.long_comp", FT_BYTES, BASE_NONE, NULL, 0,
 		    "Long Compression type", HFILL }},
 		{ &hf_wcp_short_run,
 		  { "Short Compression", "wcp.short_comp", FT_BYTES, BASE_NONE, NULL, 0,
 		    "Short Compression type", HFILL }},
 
 	};
 
 
 	static gint *ett[] = {
 		&ett_wcp,
 		&ett_wcp_comp_data,
 		&ett_wcp_field,
 	};
 
 	static ei_register_info ei[] = {
 		{ &ei_wcp_compressed_data_exceeds, { "wcp.compressed_data.exceeds", PI_MALFORMED, PI_ERROR, "Compressed data exceeds maximum buffer length", EXPFILL }},
 		{ &ei_wcp_uncompressed_data_exceeds, { "wcp.uncompressed_data.exceeds", PI_MALFORMED, PI_ERROR, "Uncompressed data exceeds maximum buffer length", EXPFILL }},
 		{ &ei_wcp_invalid_window_offset, { "wcp.off.invalid", PI_MALFORMED, PI_ERROR, "Offset points outside of visible window", EXPFILL }},
+		{ &ei_wcp_buffer_too_long, { "wcp.buffer_too_long", PI_MALFORMED, PI_ERROR, "Buffer too long", EXPFILL }},
 #if 0
 		{ &ei_wcp_invalid_match_length, { "wcp.len.invalid", PI_MALFORMED, PI_ERROR, "Length greater than offset", EXPFILL }},
 #endif
 	};
 
 	expert_module_t* expert_wcp;
 
 	proto_wcp = proto_register_protocol ("Wellfleet Compression", "WCP", "wcp");
 	proto_register_field_array (proto_wcp, hf, array_length(hf));
 	proto_register_subtree_array(ett, array_length(ett));
 	expert_wcp = expert_register_protocol(proto_wcp);
 	expert_register_field_array(expert_wcp, ei, array_length(ei));
 }
