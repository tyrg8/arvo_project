commit 2c35b9a24bd6abf17b1f135ced20611f4ad7fa17
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sat Mar 26 10:49:01 2022 -0400

    cosmetic

diff --git a/MagickCore/quantum.c b/MagickCore/quantum.c
index 305fd8edd..dae709536 100644
--- a/MagickCore/quantum.c
+++ b/MagickCore/quantum.c
@@ -628,106 +628,106 @@ MagickExport void SetQuantumAlphaType(QuantumInfo *quantum_info,
   const QuantumAlphaType type)
 {
   assert(quantum_info != (QuantumInfo *) NULL);
   assert(quantum_info->signature == MagickCoreSignature);
   quantum_info->alpha_type=type;
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   S e t Q u a n t u m D e p t h                                             %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  SetQuantumDepth() sets the quantum depth.
 %
 %  The format of the SetQuantumDepth method is:
 %
 %      MagickBooleanType SetQuantumDepth(const Image *image,
 %        QuantumInfo *quantum_info,const size_t depth)
 %
 %  A description of each parameter follows:
 %
 %    o image: the image.
 %
 %    o quantum_info: the quantum info.
 %
 %    o depth: the quantum depth.
 %
 */
 MagickExport MagickBooleanType SetQuantumDepth(const Image *image,
   QuantumInfo *quantum_info,const size_t depth)
 {
   size_t
     extent,
     quantum;
 
   /*
     Allocate the quantum pixel buffer.
   */
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
   assert(quantum_info != (QuantumInfo *) NULL);
   assert(quantum_info->signature == MagickCoreSignature);
   quantum_info->depth=MagickMin(depth,64);
   if (quantum_info->format == FloatingPointQuantumFormat)
     {
       if (quantum_info->depth > 32)
         quantum_info->depth=64;
       else
         if (quantum_info->depth > 24)
           quantum_info->depth=32;
         else
           if (quantum_info->depth > 16)
             quantum_info->depth=24;
           else
             quantum_info->depth=16;
     }
   quantum=(GetPixelChannels(image)+quantum_info->pad)*
-    ((quantum_info->depth+7)/8)*sizeof(double);
-  extent=MagickMax(image->columns,image->rows)*quantum;
+    ((quantum_info->depth+7)/8);
+  extent=MagickMax(image->columns,image->rows)*quantum*sizeof(double);
   if ((MagickMax(image->columns,image->rows) != 0) &&
       (quantum != (extent/MagickMax(image->columns,image->rows))))
     return(MagickFalse);
   if (quantum_info->pixels != (MemoryInfo **) NULL)
     {
       if (extent <= quantum_info->extent)
         return(MagickTrue);
       DestroyQuantumPixels(quantum_info);
     }
   return(AcquireQuantumPixels(quantum_info,extent));
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   S e t Q u a n t u m E n d i a n                                           %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  SetQuantumEndian() sets the quantum endian.
 %
 %  The endian of the SetQuantumEndian method is:
 %
 %      MagickBooleanType SetQuantumEndian(const Image *image,
 %        QuantumInfo *quantum_info,const EndianType endian)
 %
 %  A description of each parameter follows:
 %
 %    o image: the image.
 %
 %    o quantum_info: the quantum info.
 %
 %    o endian: the quantum endian.
 %
 */
