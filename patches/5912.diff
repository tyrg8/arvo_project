commit dca5cca4e129ab1e424ec86f5ceb325e7ee3d8cd
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Sat Feb 3 01:21:14 2018 +0100

    Bug 698986: Remember to fz_var() variable dropped in fz_catch().

diff --git a/source/pdf/pdf-stream.c b/source/pdf/pdf-stream.c
index c6ba7ad3b..fb5178721 100644
--- a/source/pdf/pdf-stream.c
+++ b/source/pdf/pdf-stream.c
@@ -283,54 +283,56 @@ static fz_stream *
 pdf_open_raw_filter(fz_context *ctx, fz_stream *chain, pdf_document *doc, pdf_obj *stmobj, int num, int *orig_num, int *orig_gen, int64_t offset)
 {
 	pdf_xref_entry *x = NULL;
 	fz_stream *chain2;
 	int hascrypt;
 	int len;
 
 	if (num > 0 && num < pdf_xref_len(ctx, doc))
 	{
 		x = pdf_get_xref_entry(ctx, doc, num);
 		*orig_num = x->num;
 		*orig_gen = x->gen;
 		if (x->stm_buf)
 			return fz_open_buffer(ctx, x->stm_buf);
 	}
 	else
 	{
 		/* We only end up here when called from pdf_open_stream_with_offset to parse new format XRef sections. */
 		/* New style XRef sections must have generation number 0. */
 		*orig_num = num;
 		*orig_gen = 0;
 	}
 
 	chain = fz_keep_stream(ctx, chain);
 
+	fz_var(chain);
+
 	fz_try(ctx)
 	{
 		len = pdf_to_int(ctx, pdf_dict_get(ctx, stmobj, PDF_NAME_Length));
 
 		chain2 = chain;
 		chain = NULL;
 		chain = fz_open_null(ctx, chain2, len, offset);
 
 		hascrypt = pdf_stream_has_crypt(ctx, stmobj);
 		if (doc->crypt && !hascrypt)
 		{
 			chain2 = chain;
 			chain = NULL;
 			chain = pdf_open_crypt(ctx, chain2, doc->crypt, *orig_num, *orig_gen);
 		}
 	}
 	fz_catch(ctx)
 	{
 		fz_drop_stream(ctx, chain);
 		fz_rethrow(ctx);
 	}
 
 	return chain;
 }
 
 /*
  * Construct a filter to decode a stream, constraining
  * to stream length and decrypting.
  */
