commit ee8c35a236eb1ce7997bcd7a0c20bbb8efbe1254
Author: Brian Kelley <fustigator@gmail.com>
Date:   Tue Nov 21 02:01:37 2023 -0500

    Removing stereoatoms requires removing CIS/Trans stereo flags (#6901)
    
    * Removing stereoatoms requires removing CIS/Trans stereo flags
    
    * Added test when removing nbrs of cis/trans bonds
    
    ---------
    
    Co-authored-by: Brian Kelley <bkelley@relaytx.com>

diff --git a/Code/GraphMol/MMPA/MMPA_UnitTest.cpp b/Code/GraphMol/MMPA/MMPA_UnitTest.cpp
index 962d2558e..a82c17007 100644
--- a/Code/GraphMol/MMPA/MMPA_UnitTest.cpp
+++ b/Code/GraphMol/MMPA/MMPA_UnitTest.cpp
@@ -1,60 +1,61 @@
 // $Id: MMPA_UnitTest.cpp $
 //
 //  Copyright (c) 2015, Novartis Institutes for BioMedical Research Inc.
 //  All rights reserved.
 //
 // Redistribution and use in source and binary forms, with or without
 // modification, are permitted provided that the following conditions are
 // met:
 //
 //     * Redistributions of source code must retain the above copyright
 //       notice, this list of conditions and the following disclaimer.
 //     * Redistributions in binary form must reproduce the above
 //       copyright notice, this list of conditions and the following
 //       disclaimer in the documentation and/or other materials provided
 //       with the distribution.
 //     * Neither the name of Novartis Institutes for BioMedical Research Inc.
 //       nor the names of its contributors may be used to endorse or promote
 //       products derived from this software without specific prior written
 //       permission.
 //
 // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 // "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 //
 #ifndef _MSC_VER
 #include <RDGeneral/test.h>
 #include <unistd.h>
 #include <fcntl.h>
 #include <sys/time.h>
 #endif
 #ifdef _WIN32
 #include <windows.h>
 #else
 #include <sys/resource.h>
 #endif
 
 #include <cstdio>
 #include <cstring>
 #include <ctime>
 #include <string>
 #include <iostream>
 #include <RDGeneral/RDLog.h>
 #include <RDGeneral/utils.h>
+#include <GraphMol/Chirality.h>
 #include "../RDKitBase.h"
 #include "../FileParsers/FileParsers.h"  //MOL single molecule !
 #include "../FileParsers/MolSupplier.h"  //SDF
 #include "../SmilesParse/SmilesParse.h"
 #include "../SmilesParse/SmilesWrite.h"
 #include "../SmilesParse/SmartsWrite.h"
 #include "../Substruct/SubstructMatch.h"
 
 #include "MMPA.h"
@@ -690,45 +691,54 @@ std::endl;
 //====================================================================================================
 //====================================================================================================
 
+void testGithub6900 () {
+  RDKit::Chirality::setUseLegacyStereoPerception(false);
+  //auto mol = "CN1CCCN=C1/C=C/c1cccs1"_smiles;
+  auto mol = "N/C=C/C"_smiles;
+  std::vector<std::pair<ROMOL_SPTR, ROMOL_SPTR>> res;
+  RDKit::MMPA::fragmentMol(*mol, res, 3);
+  RDKit::Chirality::setUseLegacyStereoPerception(true);
+}
 int main() {
   BOOST_LOG(rdInfoLog)
       << "*******************************************************\n";
   BOOST_LOG(rdInfoLog) << "MMPA Unit Test \n";
 
 // use maximum CPU resoures to increase time measuring accuracy and stability in
 // multi process environment
 #ifdef _WIN32
   //    SetPriorityClass (GetCurrentProcess(), REALTIME_PRIORITY_CLASS );
   SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_HIGHEST);
 #else
   setpriority(PRIO_PROCESS, getpid(), -20);
 #endif
-
+  testGithub6900();
   T0 = nanoClock();
   t0 = nanoClock();
 
   testCase_1();
   // /*
   test2();
   test3();
+    
   //    test4();
   // */
   //    debugTest1("C[*:1].O=C(NCCO)c1c([*:1])n([O-])c2ccccc2[n+]1=O");
   //    debugTest1("C[*:1].O=C(NCCO)c1c(n([O-])c2ccccc2[n+]1=O)[*:1]");
   /*
       unsigned long long t1 = nanoClock();
       double sec = double(t1-T0) / 1000000.;
       printf("TOTAL Time elapsed %.4lf seconds\n", sec);
   */
   BOOST_LOG(rdInfoLog)
       << "*******************************************************\n";
   if (0 != n_failed) {
     std::cout << n_failed << " TEST CASES FAILED \n";
     TEST_ASSERT(0 != n_failed);
   } else {
     std::cout << " --- ALL TEST CASES PASSED --- \n";
   }
   BOOST_LOG(rdInfoLog)
       << "*******************************************************\n";
   return 0;
 }
diff --git a/Code/GraphMol/RWMol.cpp b/Code/GraphMol/RWMol.cpp
index e92e6cc5e..d102bacaf 100644
--- a/Code/GraphMol/RWMol.cpp
+++ b/Code/GraphMol/RWMol.cpp
@@ -422,93 +422,105 @@ unsigned int RWMol::addBond(Atom *atom1, Atom *atom2, Bond::BondType bondType) {
 void RWMol::removeBond(unsigned int aid1, unsigned int aid2) {
   URANGE_CHECK(aid1, getNumAtoms());
   URANGE_CHECK(aid2, getNumAtoms());
   Bond *bnd = getBondBetweenAtoms(aid1, aid2);
   if (!bnd) {
     return;
   }
   unsigned int idx = bnd->getIdx();
   if (dp_delBonds) {
     // we're in a batch edit
     // if bonds have been added since we started, resize dp_delBonds
     if (dp_delBonds->size() < getNumBonds()) {
       dp_delBonds->resize(getNumBonds());
     }
     dp_delBonds->set(idx);
     return;
   }
 
   // remove any bookmarks which point to this bond:
   BOND_BOOKMARK_MAP *marks = getBondBookmarks();
   auto markI = marks->begin();
   while (markI != marks->end()) {
     BOND_PTR_LIST &bonds = markI->second;
     // we need to copy the iterator then increment it, because the
     // deletion we're going to do in clearBondBookmark will invalidate
     // it.
     auto tmpI = markI;
     ++markI;
     if (std::find(bonds.begin(), bonds.end(), bnd) != bonds.end()) {
       clearBondBookmark(tmpI->first, bnd);
     }
   }
 
   // loop over neighboring double bonds and remove their stereo atom
   //  information. This is definitely now invalid (was github issue 8)
   ADJ_ITER a1, a2;
   boost::tie(a1, a2) = boost::adjacent_vertices(aid1, d_graph);
   while (a1 != a2) {
     auto oIdx = rdcast<unsigned int>(*a1);
     ++a1;
     if (oIdx == aid2) {
       continue;
     }
     Bond *obnd = getBondBetweenAtoms(aid1, oIdx);
     if (!obnd) {
       continue;
     }
     if (std::find(obnd->getStereoAtoms().begin(), obnd->getStereoAtoms().end(),
                   aid2) != obnd->getStereoAtoms().end()) {
+      // github #6900 if we remove stereo atoms we need to remove
+      //  the CIS and or TRANS since this requires stereo atoms
+      if (obnd->getStereo() == Bond::BondStereo::STEREOCIS ||
+          obnd->getStereo() == Bond::BondStereo::STEREOTRANS ) {
+          obnd->setStereo(Bond::BondStereo::STEREONONE);
+      }
       obnd->getStereoAtoms().clear();
     }
   }
   boost::tie(a1, a2) = boost::adjacent_vertices(aid2, d_graph);
   while (a1 != a2) {
     auto oIdx = rdcast<unsigned int>(*a1);
     ++a1;
     if (oIdx == aid1) {
       continue;
     }
     Bond *obnd = getBondBetweenAtoms(aid2, oIdx);
     if (!obnd) {
       continue;
     }
     if (std::find(obnd->getStereoAtoms().begin(), obnd->getStereoAtoms().end(),
                   aid1) != obnd->getStereoAtoms().end()) {
+      // github #6900 if we remove stereo atoms we need to remove
+      //  the CIS and or TRANS since this requires stereo atoms
+      if (obnd->getStereo() == Bond::BondStereo::STEREOCIS ||
+        obnd->getStereo() == Bond::BondStereo::STEREOTRANS ) {
+        obnd->setStereo(Bond::BondStereo::STEREONONE);
+      }
       obnd->getStereoAtoms().clear();
     }
   }
 
   // reset our ring info structure, because it is pretty likely
   // to be wrong now:
   dp_ringInfo->reset();
 
   removeSubstanceGroupsReferencingBond(*this, idx);
 
   // loop over all bonds with higher indices and update their indices
   ROMol::EDGE_ITER firstB, lastB;
   boost::tie(firstB, lastB) = this->getEdges();
   while (firstB != lastB) {
     Bond *bond = (*this)[*firstB];
     if (bond->getIdx() > idx) {
       bond->setIdx(bond->getIdx() - 1);
     }
     ++firstB;
   }
   bnd->setOwningMol(nullptr);
 
   MolGraph::vertex_descriptor vd1 = boost::vertex(aid1, d_graph);
   MolGraph::vertex_descriptor vd2 = boost::vertex(aid2, d_graph);
   boost::remove_edge(vd1, vd2, d_graph);
   delete bnd;
   --numBonds;
 }
diff --git a/Code/GraphMol/catch_chirality.cpp b/Code/GraphMol/catch_chirality.cpp
index bad3a3f1b..2d2c832d7 100644
--- a/Code/GraphMol/catch_chirality.cpp
+++ b/Code/GraphMol/catch_chirality.cpp
@@ -973,330 +973,350 @@ TEST_CASE("findPotentialStereo problems related to #3490", "[chirality][bug]") {
   SECTION("example 1") {
     auto mol = "CC1CC(O)C1"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 2);
     CHECK(stereoInfo[0].type == Chirality::StereoType::Atom_Tetrahedral);
     CHECK(stereoInfo[0].centeredOn == 1);
     CHECK(stereoInfo[0].specified == Chirality::StereoSpecified::Unspecified);
     CHECK(stereoInfo[1].type == Chirality::StereoType::Atom_Tetrahedral);
     CHECK(stereoInfo[1].centeredOn == 3);
     CHECK(stereoInfo[1].specified == Chirality::StereoSpecified::Unspecified);
   }
   SECTION("example 2a") {
     auto mol = "C(C(C)C1)C12CCN2"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 2);
   }
   SECTION("example 2b") {
     auto mol = "CC(C1)CC12CCN2"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 2);
   }
   SECTION("example 2c") {
     auto mol = "C([C@H](C)C1)[C@]12CCN2"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 2);
   }
   SECTION("example 2d") {
     auto mol = "C[C@H](C1)C[C@]12CCN2"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 2);
   }
   SECTION("example 3") {
     auto mol = "C(C(C)C1)C12CN(C3)CCCCC23"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 4);  // [1, 4, 6, 12]
     CHECK(stereoInfo[0].type == Chirality::StereoType::Atom_Tetrahedral);
     CHECK(stereoInfo[0].centeredOn == 1);
     CHECK(stereoInfo[0].specified == Chirality::StereoSpecified::Unspecified);
     CHECK(stereoInfo[1].type == Chirality::StereoType::Atom_Tetrahedral);
     CHECK(stereoInfo[1].centeredOn == 4);
     CHECK(stereoInfo[1].specified == Chirality::StereoSpecified::Unspecified);
     CHECK(stereoInfo[2].type == Chirality::StereoType::Atom_Tetrahedral);
     CHECK(stereoInfo[2].centeredOn == 6);
     CHECK(stereoInfo[2].specified == Chirality::StereoSpecified::Unspecified);
     CHECK(stereoInfo[3].type == Chirality::StereoType::Atom_Tetrahedral);
     CHECK(stereoInfo[3].centeredOn == 12);
     CHECK(stereoInfo[3].specified == Chirality::StereoSpecified::Unspecified);
   }
 }
 TEST_CASE("ring stereo finding is overly aggressive", "[chirality][bug]") {
   SECTION("Finding too much 1a") {
     auto mol = "CC1CCCCC1"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 0);
   }
   SECTION("Finding too much 1b") {
     auto mol = "CC1CCC(C)CC1"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 2);
   }
   SECTION("Finding too much 1c") {
     auto mol = "C[C@H]1CCC(C)CC1"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 2);
   }
   SECTION("Finding too much 1d") {
     auto mol = "CC1(C)CCCCC1"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 0);
   }
   SECTION("Finding too much 1e") {
     auto mol = "CC1(C)CCC(C)CC1"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 0);
   }
   SECTION("Finding too much 1f") {
     auto mol = "C2CC2C1(C2CC2)CCCCC1"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 0);
   }
   SECTION("Finding too much 1g") {
     auto mol = "CC1CC2(CCC2)C1"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 0);
   }
   SECTION("Finding too much 1h") {
     auto mol = "CC1CC2(CC(C)C2)C1"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 3);
   }
 
   SECTION("Finding too much 2a") {
     auto mol = "CC1CCNCC1"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 0);
   }
   SECTION("Finding too much 2b") {
     auto mol = "CC1CCN(C)CC1"_smiles;  // 3-coordinate N is not stereogenic
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 0);
   }
   SECTION("Finding too much 3a") {
     auto mol = "CC1CCC1"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 0);
   }
 
   SECTION("Finding too much 3b") {
     auto mol = "CC1CC(C)C1"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 2);
   }
   SECTION("fused rings 1") {
     auto mol = "C1CCC2CCCCC2C1"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 2);
   }
 
   SECTION("fused rings 2") {
     auto mol = "C1CC2CCCC2C1"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 2);
   }
 
   SECTION("cages 1") {
     auto mol = "CC1CN2CCC1CC2"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 3);
     CHECK(stereoInfo[0].centeredOn == 1);
     CHECK(stereoInfo[1].centeredOn == 3);
     CHECK(stereoInfo[2].centeredOn == 6);
   }
   SECTION("cages 1b") {
     auto mol = "O1CN2CCC1CC2"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 2);
     CHECK(stereoInfo[0].centeredOn == 2);
     CHECK(stereoInfo[1].centeredOn == 5);
   }
   SECTION("cages 2") {
     auto mol = "C1CC2(O)CCC1(C)CC2"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 2);
     CHECK(stereoInfo[0].centeredOn == 2);
     CHECK(stereoInfo[1].centeredOn == 6);
   }
   SECTION("cages 3") {
     auto mol = "C1CC2(O)CCC1CC2"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 2);
     CHECK(stereoInfo[0].centeredOn == 2);
     CHECK(stereoInfo[1].centeredOn == 6);
   }
   SECTION("adamantyl") {
     auto mol = "CC12CC3CC(CC(C3)C1)C2"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 4);
   }
   SECTION("bug 1a") {
     // example that came up during testing
     auto mol = "C(=O)C(C(C)N2C=C2)C(=O)"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     REQUIRE(stereoInfo.size() == 1);
     CHECK(stereoInfo[0].centeredOn == 3);
   }
   SECTION("bug 1b") {
     // example that came up during testing
     auto mol = "C(=O)C(C(CC)c2ccc(Cl)cc2)C(=O)"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     REQUIRE(stereoInfo.size() == 1);
     CHECK(stereoInfo[0].centeredOn == 3);
   }
 
   SECTION("bug 1c") {
     // example that came up during testing
     auto mol = "O=CC(C=O)C(C)n2cccc2"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     REQUIRE(stereoInfo.size() == 1);
     CHECK(stereoInfo[0].centeredOn == 5);
   }
 
   SECTION("bug 1c") {
     // example that came up during testing
     auto mol = "C(=O)C(C(C)n2cccc2)C(=O)"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     REQUIRE(stereoInfo.size() == 1);
     CHECK(stereoInfo[0].centeredOn == 3);
   }
 
   SECTION("bug 1d") {
     // example that came up during testing
     auto mol = "C(O)C(C(C)n2cccc2)C(O)"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     REQUIRE(stereoInfo.size() == 1);
     CHECK(stereoInfo[0].centeredOn == 3);
   }
   SECTION("just a bug") {
     // example that came up during testing
 
     auto mol = "CC1=CN(C2OC(CNC(=O)C3c4ccccc4Sc4ccccc43)CC2)C(=O)NC1=O"_smiles;
     REQUIRE(mol);
     bool cleanIt = true;
     bool flagPossible = true;
     auto stereoInfo =
         Chirality::findPotentialStereo(*mol, cleanIt, flagPossible);
     CHECK(stereoInfo.size() == 2);
   }
+  SECTION("Removal of stereoatoms requires removing CIS/TRANS when using legacy stereo") {
+      UseLegacyStereoPerceptionFixture reset_stereo_perception;
+      Chirality::setUseLegacyStereoPerception(false);
+
+    {
+      auto mol = "N/C=C/C"_smiles;
+      CHECK(mol->getBondWithIdx(1)->getStereo() == Bond::BondStereo::STEREOTRANS);
+      auto rwmol = dynamic_cast<RWMol*>(mol.get());
+      rwmol->removeBond(0,1);
+      CHECK(mol->getBondWithIdx(0)->getStereo() == Bond::BondStereo::STEREONONE);
+    }
+    {
+      auto mol = "N/C=C/C"_smiles;
+      CHECK(mol->getBondWithIdx(1)->getStereo() == Bond::BondStereo::STEREOTRANS);
+      auto rwmol = dynamic_cast<RWMol*>(mol.get());
+      rwmol->removeBond(2,3);
+      CHECK(mol->getBondWithIdx(1)->getStereo() == Bond::BondStereo::STEREONONE);
+    }
+	  
+  }
 }
 
 TEST_CASE(
