commit 2624ae15b4d115a02623ec9f231237c429337a02
Author: Shashank Pathmudi <shashank.pathmudi@ittiam.com>
Date:   Mon Dec 18 16:04:32 2023 +0530

    Fix for Heap-buffer-overflow WRITE 8 in ixheaacd_init_sbr
    
    These changes handle the Heap-buffer-overflow WRITE 8 runtime error reported
    due to unsupported channel configuration for USAC.
    
    Bug: ossFuzz:64960
    Test: poc in bug

diff --git a/decoder/ixheaacd_headerdecode.c b/decoder/ixheaacd_headerdecode.c
index 41c4594..03fb067 100644
--- a/decoder/ixheaacd_headerdecode.c
+++ b/decoder/ixheaacd_headerdecode.c
@@ -485,342 +485,347 @@ WORD32 ixheaacd_eld_sbr_header(ia_bit_buf_struct *it_bit_buff, WORD32 channels,
 WORD32 ixheaacd_ga_hdr_dec(ia_aac_dec_state_struct *aac_state_struct,
                            WORD32 header_len, WORD32 *bytes_consumed,
                            ia_sampling_rate_info_struct *pstr_samp_rate_info,
                            struct ia_bit_buf_struct *it_bit_buff) {
   WORD32 tmp;
   WORD32 cnt_bits = it_bit_buff->cnt_bits;
   UWORD32 aot_init;
   UWORD32 tmp_aot;
 
   ia_audio_specific_config_struct *pstr_audio_specific_config;
 
   memset(aac_state_struct->ia_audio_specific_config, 0,
          sizeof(ia_audio_specific_config_struct));
 
   memset(&(aac_state_struct->eld_specific_config), 0,
          sizeof(ia_eld_specific_config_struct));
 
   pstr_audio_specific_config = aac_state_struct->ia_audio_specific_config;
 
   aac_state_struct->p_config->str_prog_config.alignment_bits =
       it_bit_buff->bit_pos;
 
   aot_init = aac_state_struct->audio_object_type;
   aac_state_struct->frame_length = FRAME_SIZE;
 
   tmp_aot = ixheaacd_read_bits_buf(it_bit_buff, 5);
 
   if (tmp_aot == 31) {
     tmp = ixheaacd_read_bits_buf(it_bit_buff, 6);
     tmp_aot = 32 + tmp;
   }
 
   if (aac_state_struct->header_dec_done || aac_state_struct->ui_init_done) {
     if (tmp_aot != aot_init && tmp_aot != AOT_SBR && tmp_aot != AOT_PS)
       return IA_FATAL_ERROR;
   }
 
   pstr_audio_specific_config->audio_object_type =
       aac_state_struct->audio_object_type = tmp_aot;
 
   tmp = ixheaacd_get_samp_rate(it_bit_buff, pstr_samp_rate_info,
                                pstr_audio_specific_config);
   pstr_audio_specific_config->sampling_frequency = tmp;
 
   if (tmp == -1) {
     *bytes_consumed = 1;
     return IA_XHEAAC_DEC_INIT_FATAL_DEC_INIT_FAIL;
   } else
     aac_state_struct->sampling_rate = tmp;
   aac_state_struct->p_config->ui_samp_freq = tmp;
 
   aac_state_struct->ch_config = ixheaacd_read_bits_buf(it_bit_buff, 4);
 
+  if (aac_state_struct->audio_object_type == AOT_USAC &&
+      ((aac_state_struct->ch_config >= 3) && (aac_state_struct->ch_config != 8))) {
+    return IA_XHEAAC_DEC_INIT_FATAL_DEC_INIT_FAIL;
+  }
+
   pstr_audio_specific_config->channel_configuration =
       aac_state_struct->ch_config;
 
   if (aac_state_struct->audio_object_type == AOT_SBR ||
       aac_state_struct->audio_object_type == AOT_PS) {
     tmp = ixheaacd_get_samp_rate(it_bit_buff, pstr_samp_rate_info,
                                  pstr_audio_specific_config);
     aac_state_struct->sbr_present_flag = 1;
     if (tmp == -1) {
       *bytes_consumed = 1;
       return IA_XHEAAC_DEC_INIT_FATAL_DEC_INIT_FAIL;
     } else
       aac_state_struct->extension_samp_rate = tmp;
 
     aac_state_struct->audio_object_type =
         ixheaacd_read_bits_buf(it_bit_buff, 5);
   }
 
   if (aac_state_struct->header_dec_done || aac_state_struct->ui_init_done) {
     if (aac_state_struct->audio_object_type != aot_init) return IA_FATAL_ERROR;
   }
 
   if (((aac_state_struct->audio_object_type >= AOT_AAC_MAIN &&
         aac_state_struct->audio_object_type <= AOT_AAC_LTP) ||
        aac_state_struct->audio_object_type == AOT_AAC_SCAL ||
        aac_state_struct->audio_object_type == AOT_TWIN_VQ ||
        aac_state_struct->audio_object_type == AOT_ER_AAC_LD ||
        aac_state_struct->audio_object_type == AOT_ER_AAC_ELD ||
        aac_state_struct->audio_object_type == AOT_ER_AAC_SCAL ||
        aac_state_struct->audio_object_type == AOT_ER_AAC_LC) &&
       aac_state_struct->audio_object_type != AOT_USAC)
 
   {
     aac_state_struct->usac_flag = 0;
 
     aac_state_struct->frame_len_flag = ixheaacd_read_bits_buf(it_bit_buff, 1);
     if (aac_state_struct->audio_object_type != AOT_ER_AAC_ELD) {
       aac_state_struct->depends_on_core_coder =
           ixheaacd_read_bits_buf(it_bit_buff, 1);
       aac_state_struct->extension_flag = ixheaacd_read_bits_buf(it_bit_buff, 1);
 
       if (aac_state_struct->ch_config == 0) {
         WORD32 error_code;
         error_code = ixheaacd_read_prog_config_element(
             &aac_state_struct->p_config->str_prog_config, it_bit_buff);
         if (error_code != 0) {
           *bytes_consumed = 1;
           return error_code;
         }
         aac_state_struct->p_config->ui_pce_found_in_hdr = 1;
       }
     }
     if (aac_state_struct->audio_object_type == AOT_ER_AAC_ELD ||
         aac_state_struct->audio_object_type == AOT_ER_AAC_LD ||
         aac_state_struct->audio_object_type == AOT_ER_AAC_LC ||
         aac_state_struct->audio_object_type == AOT_ER_AAC_SCAL) {
       aac_state_struct->eld_specific_config.aac_sect_data_resil_flag = 0;
       aac_state_struct->eld_specific_config.aac_sf_data_resil_flag = 0;
       aac_state_struct->eld_specific_config.aac_spect_data_resil_flag = 0;
       aac_state_struct->eld_specific_config.ep_config = 0;
       if ((aac_state_struct->extension_flag == 1) ||
           aac_state_struct->audio_object_type == AOT_ER_AAC_ELD) {
         if (aac_state_struct->audio_object_type >= ER_OBJECT_START) {
           aac_state_struct->eld_specific_config.aac_sect_data_resil_flag =
               ixheaacd_read_bits_buf(it_bit_buff, 1);
           aac_state_struct->eld_specific_config.aac_sf_data_resil_flag =
               ixheaacd_read_bits_buf(it_bit_buff, 1);
           aac_state_struct->eld_specific_config.aac_spect_data_resil_flag =
               ixheaacd_read_bits_buf(it_bit_buff, 1);
           if (aac_state_struct->audio_object_type == AOT_ER_AAC_LD)
             aac_state_struct->eld_specific_config.ep_config =
                 ixheaacd_read_bits_buf(it_bit_buff, 2);
           if (aac_state_struct->audio_object_type == AOT_ER_AAC_ELD)
             aac_state_struct->eld_specific_config.ld_sbr_flag_present =
                 ixheaacd_read_bits_buf(it_bit_buff, 1);
         }
       }
     }
   }
   if (pstr_audio_specific_config->audio_object_type == AOT_USAC) {
     {
       pstr_audio_specific_config->sbr_present_flag = 0;
       pstr_audio_specific_config->ext_audio_object_type = 0;
     }
 
     {
       {
         SIZE_T tmp = 0xf;
         UWORD32 i;
         WORD32 err = 0;
 
         aac_state_struct->usac_flag = 1;
 
         ixheaacd_conf_default(&(pstr_audio_specific_config->str_usac_config));
         err = ixheaacd_config(it_bit_buff, &(pstr_audio_specific_config->str_usac_config),
                               &(pstr_audio_specific_config->channel_configuration),
                               aac_state_struct->ec_enable);
         if (err != 0) return err;
 
         pstr_audio_specific_config->sampling_frequency =
             pstr_audio_specific_config->str_usac_config.usac_sampling_frequency;
 
         if (pstr_audio_specific_config->audio_object_type == AOT_USAC) {
           pstr_audio_specific_config->sbr_present_flag = 1;
           pstr_audio_specific_config->ext_audio_object_type = AOT_SBR;
           pstr_audio_specific_config->ext_sampling_frequency =
               pstr_audio_specific_config->sampling_frequency;
           pstr_audio_specific_config->ext_samp_frequency_index =
               pstr_audio_specific_config->samp_frequency_index;
 
           for (i = 0; i < sizeof(ixheaacd_sampl_freq_idx_table) /
                               sizeof(ixheaacd_sampl_freq_idx_table[0]);
                i++) {
             if (ixheaacd_sampl_freq_idx_table[i] ==
                 (int)(pstr_audio_specific_config->sampling_frequency)) {
               tmp = i;
               break;
             }
           }
           pstr_audio_specific_config->samp_frequency_index = (UINT32)tmp;
         } else {
           pstr_audio_specific_config->sbr_present_flag = 0;
         }
       }
     }
 
     if (aac_state_struct->bs_format != LOAS_BSFORMAT) {
       ixheaacd_skip_bits_buf(it_bit_buff, it_bit_buff->cnt_bits);
 
       if ((SIZE_T)it_bit_buff->ptr_read_next ==
           (SIZE_T)it_bit_buff->ptr_bit_buf_base) {
         *bytes_consumed = ((WORD32)it_bit_buff->size) >> 3;
       } else {
         *bytes_consumed = (WORD32)((((((SIZE_T)it_bit_buff->ptr_read_next -
                               (SIZE_T)it_bit_buff->ptr_bit_buf_base))
                             << 3) +
                             7 - it_bit_buff->bit_pos + 7) >>
                             3);
       }
     }
     return 0;
   }
 
   aac_state_struct->frame_length = FRAME_SIZE;
   if (aac_state_struct->frame_len_flag)
     aac_state_struct->frame_length = FRAME_SIZE_SMALL;
 
   if (aac_state_struct->extension_flag)
     aac_state_struct->extension_flag_3 = ixheaacd_read_bits_buf(it_bit_buff, 1);
 
   if (aac_state_struct->audio_object_type == AOT_ER_AAC_LD)
     aac_state_struct->frame_length >>= 1;
 
   if (aac_state_struct->audio_object_type == AOT_ER_AAC_ELD) {
     aac_state_struct->frame_length >>= 1;
     if (aac_state_struct->eld_specific_config.ld_sbr_flag_present) {
       aac_state_struct->eld_specific_config.ld_sbr_samp_rate =
           ixheaacd_read_bits_buf(it_bit_buff, 1);
       aac_state_struct->eld_specific_config.ld_sbr_crc_flag =
           ixheaacd_read_bits_buf(it_bit_buff, 1);
 
       ixheaacd_eld_sbr_header(it_bit_buff, aac_state_struct->ch_config,
                               &aac_state_struct->str_sbr_config);
 
       aac_state_struct->dwnsmp_signal =
           !aac_state_struct->eld_specific_config.ld_sbr_samp_rate;
     }
 
     {
       UWORD16 len, eld_ext_type;
       WORD32 err;
       UWORD16 cnt;
 
       if (ixheaacd_show_bits_buf(it_bit_buff, 4) != ELDEXT_TERM) {
         while ((eld_ext_type = ixheaacd_read_bits_buf(it_bit_buff, 4)) !=
                ELDEXT_TERM) {
           len = ixheaacd_read_bits_buf(it_bit_buff, 4);
           if (len == 15) {
             len += ixheaacd_read_bits_buf(it_bit_buff, 8);
           }
           if (len == 15 + 255) {
             len += ixheaacd_read_bits_buf(it_bit_buff, 16);
           }
 
           switch (eld_ext_type) {
             case ELDEXT_SAOC:
               break;
             case ELDEXT_LDSAC:
               aac_state_struct->ldmps_present = 1;
               aac_state_struct->mps_dec_handle.ldmps_config.ldmps_present_flag =
                   1;
               aac_state_struct->mps_dec_handle.object_type =
                   aac_state_struct->audio_object_type;
               aac_state_struct->mps_dec_handle.ec_flag = aac_state_struct->ec_enable;
               err = ixheaacd_ld_spatial_specific_config(
                   &(aac_state_struct->mps_dec_handle.ldmps_config), it_bit_buff);
               if (err) return err;
 
               if (ixheaacd_mps_create(
                       &aac_state_struct->mps_dec_handle,
                       aac_state_struct->mps_dec_handle.ldmps_config
                           .bs_frame_length,
                       0, &(aac_state_struct->mps_dec_handle.ldmps_config))) {
                 return -1;
               }
               break;
             default:
               for (cnt = 0; cnt < len; cnt++) {
                 ixheaacd_read_bits_buf(it_bit_buff, 8);
               }
 
               break;
           }
           break;
         }
       }
     }
     if (!((aac_state_struct->ldmps_present == 1) &&
           !(it_bit_buff->cnt_bits >= 1)))
     ixheaacd_read_bits_buf(it_bit_buff, 1);
   }
   if (!((aac_state_struct->ldmps_present == 1) && !(it_bit_buff->cnt_bits > 0))) {
     if (aac_state_struct->audio_object_type == AOT_ER_AAC_ELD ||
         aac_state_struct->audio_object_type == AOT_ER_AAC_LC ||
         aac_state_struct->audio_object_type == AOT_ER_AAC_SCAL) {
       WORD32 ep_config = ixheaacd_read_bits_buf(it_bit_buff, 2);
       if (ep_config == 2 || ep_config == 3) {
       }
       if (ep_config == 3) {
         WORD32 direct_map = ixheaacd_read_bits_buf(it_bit_buff, 1);
         if (!direct_map) {
         }
       }
     }
 
     tmp = (header_len * 8) - it_bit_buff->cnt_bits;
 
     if (aac_state_struct->audio_object_type != AOT_SBR &&
         (it_bit_buff->cnt_bits >= 16)) {
       tmp = ixheaacd_read_bits_buf(it_bit_buff, 11);
 
       if (tmp == 0x2b7) {
         tmp = ixheaacd_read_bits_buf(it_bit_buff, 5);
 
         if (tmp == AOT_SBR) {
           WORD32 sbr_present_flag = ixheaacd_read_bits_buf(it_bit_buff, 1);
           if (sbr_present_flag) {
             tmp = ixheaacd_get_samp_rate(it_bit_buff, pstr_samp_rate_info,
                                          pstr_audio_specific_config);
             if (tmp == -1) {
               *bytes_consumed = 1;
               return IA_XHEAAC_DEC_INIT_FATAL_DEC_INIT_FAIL;
             } else
               aac_state_struct->extension_samp_rate = tmp;
 
             if (it_bit_buff->cnt_bits >= 12) {
               tmp = ixheaacd_read_bits_buf(it_bit_buff, 11);
               if (tmp == 0x548) {
                 tmp = ixheaacd_read_bits_buf(it_bit_buff, 1);
               }
             }
           }
         }
       } else if (aac_state_struct->bs_format == LOAS_BSFORMAT) {
         ixheaacd_read_bidirection(it_bit_buff, -11);
       }
     }
   }
 
   if (aac_state_struct->audio_object_type != AOT_AAC_LC &&
       aac_state_struct->audio_object_type != AOT_SBR &&
       aac_state_struct->audio_object_type != AOT_PS &&
       aac_state_struct->audio_object_type != AOT_ER_AAC_LC &&
       aac_state_struct->audio_object_type != AOT_ER_AAC_LD &&
       aac_state_struct->audio_object_type != AOT_ER_AAC_ELD &&
       aac_state_struct->audio_object_type != AOT_AAC_LTP) {
     *bytes_consumed = 1;
     return IA_XHEAAC_DEC_INIT_FATAL_AUDIOOBJECTTYPE_NOT_SUPPORTED;
   } else {
     if (aac_state_struct->bs_format == LOAS_BSFORMAT) {
       *bytes_consumed = (cnt_bits - it_bit_buff->cnt_bits) >> 3;
       if (it_bit_buff->bit_pos < 7) *bytes_consumed += 1;
 
     } else
       *bytes_consumed = header_len;
 
     return 0;
   }
 }
diff --git a/decoder/ixheaacd_init_config.c b/decoder/ixheaacd_init_config.c
index d5373a8..f58b72e 100644
--- a/decoder/ixheaacd_init_config.c
+++ b/decoder/ixheaacd_init_config.c
@@ -583,93 +583,96 @@ WORD32 ixheaacd_config_extension(ia_bit_buf_struct *it_bit_buff,
 WORD32 ixheaacd_config(ia_bit_buf_struct *it_bit_buff, ia_usac_config_struct *pstr_usac_conf,
                        UINT32 *chan, WORD32 ec_flag) {
   WORD32 tmp, err;
   err = 0;
 
   pstr_usac_conf->usac_sampling_frequency_index =
       ixheaacd_read_bits_buf(it_bit_buff, 5);
 
   if (pstr_usac_conf->usac_sampling_frequency_index == 0x1f) {
     pstr_usac_conf->usac_sampling_frequency =
         ixheaacd_read_bits_buf(it_bit_buff, 24);
 
     if (pstr_usac_conf->usac_sampling_frequency > USAC_MAX_SAMPLE_RATE) {
       if (ec_flag) {
         longjmp(*(it_bit_buff->xaac_jmp_buf),
                 IA_XHEAAC_DEC_EXE_NONFATAL_INSUFFICIENT_INPUT_BYTES);
       } else {
         return IA_FATAL_ERROR;
       }
     }
 
   } else {
     pstr_usac_conf->usac_sampling_frequency =
         sampling_rate_tbl[pstr_usac_conf->usac_sampling_frequency_index];
   }
 
   if (pstr_usac_conf->usac_sampling_frequency == 0) {
     if (ec_flag) {
       longjmp(*(it_bit_buff->xaac_jmp_buf), IA_XHEAAC_DEC_EXE_NONFATAL_INSUFFICIENT_INPUT_BYTES);
     } else {
       return IA_FATAL_ERROR;
     }
   }
   pstr_usac_conf->core_sbr_framelength_index =
       ixheaacd_read_bits_buf(it_bit_buff, 3);
 
   if (pstr_usac_conf->core_sbr_framelength_index > MAX_CORE_SBR_FRAME_LEN_IDX) {
     if (ec_flag) {
       longjmp(*(it_bit_buff->xaac_jmp_buf), IA_XHEAAC_DEC_EXE_NONFATAL_INSUFFICIENT_INPUT_BYTES);
     } else {
       return IA_FATAL_ERROR;
     }
   }
 
   pstr_usac_conf->channel_configuration_index =
       ixheaacd_read_bits_buf(it_bit_buff, 5);
   if ((pstr_usac_conf->channel_configuration_index >= 3) &&
       (pstr_usac_conf->channel_configuration_index != 8)) {
     if (ec_flag) {
       longjmp(*(it_bit_buff->xaac_jmp_buf), IA_XHEAAC_DEC_EXE_NONFATAL_INSUFFICIENT_INPUT_BYTES);
     } else {
       return IA_FATAL_ERROR;
     }
   }
 
   if (pstr_usac_conf->channel_configuration_index == 0) {
     UWORD32 i;
 
     ixheaacd_read_escape_value(it_bit_buff,
                                (UWORD32 *)(&(pstr_usac_conf->num_out_channels)),
                                5, 8, 16);
     if (BS_MAX_NUM_OUT_CHANNELS < pstr_usac_conf->num_out_channels) {
       return IA_XHEAAC_DEC_INIT_FATAL_STREAM_CHAN_GT_MAX;
     }
+    if (pstr_usac_conf->num_out_channels < 1) {
+      return IA_XHEAAC_DEC_INIT_FATAL_DEC_INIT_FAIL;
+    }
     for (i = 0; i < pstr_usac_conf->num_out_channels; i++)
       pstr_usac_conf->output_channel_pos[i] =
           ixheaacd_read_bits_buf(it_bit_buff, 5);
 
     if (ec_flag) {
       longjmp(*(it_bit_buff->xaac_jmp_buf), IA_XHEAAC_DEC_EXE_NONFATAL_INSUFFICIENT_INPUT_BYTES);
     }
   } else {
     err = ixheaacd_get_usac_chan_conf(pstr_usac_conf, pstr_usac_conf->channel_configuration_index,
                                       it_bit_buff, ec_flag);
     if (err != 0)
       return err;
   }
 
   err = ixheaacd_decoder_config(
       it_bit_buff, &(pstr_usac_conf->str_usac_dec_config),
       ixheaacd_sbr_ratio(pstr_usac_conf->core_sbr_framelength_index), chan, ec_flag);
   if (err != 0) return err;
 
   tmp = ixheaacd_read_bits_buf(it_bit_buff, 1);
 
   if (tmp) {
     err = ixheaacd_config_extension(it_bit_buff,
                                     &pstr_usac_conf->str_usac_dec_config, ec_flag);
     if (err != 0) return -1;
   }
 
   return err;
 }
