commit 8f87dc8ec3545afbe8c7062346c930fb5b2e0a5d
Author: Peter Hillman <peterh@wetafx.co.nz>
Date:   Sun Sep 6 06:30:07 2020 +1200

    lighter weight reading of Luma-only images via RgbaInputFile (#827)
    
    Signed-off-by: Peter Hillman <peterh@wetafx.co.nz>
    
    Co-authored-by: Cary Phillips <cary@ilm.com>

diff --git a/OpenEXR/IlmImf/ImfRgbaFile.cpp b/OpenEXR/IlmImf/ImfRgbaFile.cpp
index 1b7c8670..68fa51cb 100644
--- a/OpenEXR/IlmImf/ImfRgbaFile.cpp
+++ b/OpenEXR/IlmImf/ImfRgbaFile.cpp
@@ -1176,11 +1176,11 @@ RgbaInputFile::FromYca::padTmpBuf ()
 RgbaInputFile::RgbaInputFile (const char name[], int numThreads):
     _inputFile (new InputFile (name, numThreads)),
     _fromYca (0),
     _channelNamePrefix ("")
 {
     RgbaChannels rgbaChannels = channels();
 
-    if (rgbaChannels & (WRITE_Y | WRITE_C))
+    if (rgbaChannels & WRITE_C)
 	_fromYca = new FromYca (*_inputFile, rgbaChannels);
 }
 
@@ -1188,11 +1188,11 @@ RgbaInputFile::RgbaInputFile (const char name[], int numThreads):
 RgbaInputFile::RgbaInputFile (OPENEXR_IMF_INTERNAL_NAMESPACE::IStream &is, int numThreads):
     _inputFile (new InputFile (is, numThreads)),
     _fromYca (0),
     _channelNamePrefix ("")
 {
     RgbaChannels rgbaChannels = channels();
 
-    if (rgbaChannels & (WRITE_Y | WRITE_C))
+    if (rgbaChannels & WRITE_C)
 	_fromYca = new FromYca (*_inputFile, rgbaChannels);
 }
 
@@ -1200,14 +1200,14 @@ RgbaInputFile::RgbaInputFile (OPENEXR_IMF_INTERNAL_NAMESPACE::IStream &is, int n
 RgbaInputFile::RgbaInputFile (const char name[],
 			      const string &layerName,
 			      int numThreads)
 :
     _inputFile (new InputFile (name, numThreads)),
     _fromYca (0),
     _channelNamePrefix (prefixFromLayerName (layerName, _inputFile->header()))
 {
     RgbaChannels rgbaChannels = channels();
 
-    if (rgbaChannels & (WRITE_Y | WRITE_C))
+    if (rgbaChannels & WRITE_C)
 	_fromYca = new FromYca (*_inputFile, rgbaChannels);
 }
 
@@ -1215,14 +1215,14 @@ RgbaInputFile::RgbaInputFile (const char name[],
 RgbaInputFile::RgbaInputFile (OPENEXR_IMF_INTERNAL_NAMESPACE::IStream &is,
 			      const string &layerName,
 			      int numThreads)
 :
     _inputFile (new InputFile (is, numThreads)),
     _fromYca (0),
     _channelNamePrefix (prefixFromLayerName (layerName, _inputFile->header()))
 {
     RgbaChannels rgbaChannels = channels();
 
-    if (rgbaChannels & (WRITE_Y | WRITE_C))
+    if (rgbaChannels & WRITE_C)
 	_fromYca = new FromYca (*_inputFile, rgbaChannels);
 }
 
@@ -1238,45 +1238,60 @@ void
 RgbaInputFile::setFrameBuffer (Rgba *base, size_t xStride, size_t yStride)
 {
     if (_fromYca)
     {
 	Lock lock (*_fromYca);
 	_fromYca->setFrameBuffer (base, xStride, yStride, _channelNamePrefix);
     }
     else
     {
 	size_t xs = xStride * sizeof (Rgba);
 	size_t ys = yStride * sizeof (Rgba);
 
 	FrameBuffer fb;
 
-	fb.insert (_channelNamePrefix + "R",
-		   Slice (HALF,
-			  (char *) &base[0].r,
-			  xs, ys,
-			  1, 1,		// xSampling, ySampling
-			  0.0));	// fillValue
-
-	fb.insert (_channelNamePrefix + "G",
-		   Slice (HALF,
-			  (char *) &base[0].g,
-			  xs, ys,
-			  1, 1,		// xSampling, ySampling
-			  0.0));	// fillValue
-
-	fb.insert (_channelNamePrefix + "B",
-		   Slice (HALF,
-			  (char *) &base[0].b,
-			  xs, ys,
-			  1, 1,		// xSampling, ySampling
-			  0.0));	// fillValue
-
+        if( channels() & WRITE_Y )
+        {
+            fb.insert (_channelNamePrefix + "Y",
+                    Slice (HALF,
+                            (char *) &base[0].r,
+                            xs, ys,
+                            1, 1,		// xSampling, ySampling
+                            0.0));	// fillValue
+        }
+        else
+        {
+
+
+            fb.insert (_channelNamePrefix + "R",
+                    Slice (HALF,
+                            (char *) &base[0].r,
+                            xs, ys,
+                            1, 1,		// xSampling, ySampling
+                            0.0));	// fillValue
+
+
+
+            fb.insert (_channelNamePrefix + "G",
+                    Slice (HALF,
+                            (char *) &base[0].g,
+                            xs, ys,
+                            1, 1,		// xSampling, ySampling
+                            0.0));	// fillValue
+
+            fb.insert (_channelNamePrefix + "B",
+                    Slice (HALF,
+                            (char *) &base[0].b,
+                            xs, ys,
+                            1, 1,		// xSampling, ySampling
+                            0.0));	// fillValue
+        }
 	fb.insert (_channelNamePrefix + "A",
 		   Slice (HALF,
 			  (char *) &base[0].a,
 			  xs, ys,
 			  1, 1,		// xSampling, ySampling
 			  1.0));	// fillValue
 
 	_inputFile->setFrameBuffer (fb);
     }
 }
@@ -1286,15 +1301,15 @@ void
 RgbaInputFile::setLayerName (const string &layerName)
 {
     delete _fromYca;
     _fromYca = 0;
 
     _channelNamePrefix = prefixFromLayerName (layerName, _inputFile->header());
 
     RgbaChannels rgbaChannels = channels();
 
-    if (rgbaChannels & (WRITE_Y | WRITE_C))
+    if (rgbaChannels & WRITE_C)
 	_fromYca = new FromYca (*_inputFile, rgbaChannels);
 
     FrameBuffer fb;
     _inputFile->setFrameBuffer (fb);
 }
@@ -1304,13 +1319,35 @@ void
 RgbaInputFile::readPixels (int scanLine1, int scanLine2)
 {
     if (_fromYca)
     {
 	Lock lock (*_fromYca);
 	_fromYca->readPixels (scanLine1, scanLine2);
     }
     else
     {
 	_inputFile->readPixels (scanLine1, scanLine2);
+
+        if (channels() & WRITE_Y)
+        {
+            //
+            // Luma channel has been written into red channel
+            // Duplicate into green and blue channel to create gray image
+            //
+            const Slice* s = _inputFile->frameBuffer().findSlice(_channelNamePrefix + "Y");
+            Box2i dataWindow = _inputFile->header().dataWindow();
+
+            for( int scanLine = scanLine1  ; scanLine <= scanLine2 ; scanLine++ )
+            {
+                char* rowBase = s->base + scanLine*s->yStride;
+                for(int x = dataWindow.min.x ; x <= dataWindow.max.x ; ++x )
+                {
+                    Rgba* pixel = reinterpret_cast<Rgba*>(rowBase+x*s->xStride);
+                    pixel->g = pixel->r;
+                    pixel->b = pixel->r;
+                }
+
+            }
+        }
     }
 }
 
diff --git a/OpenEXR/IlmImfTest/testYca.cpp b/OpenEXR/IlmImfTest/testYca.cpp
index 573abd26..0c00e143 100644
--- a/OpenEXR/IlmImfTest/testYca.cpp
+++ b/OpenEXR/IlmImfTest/testYca.cpp
@@ -102,109 +102,110 @@ void
 writeReadYca (const char fileName[],
 	      const Box2i &dw,
 	      RgbaChannels channels,
 	      LineOrder writeOrder,
 	      LineOrder readOrder,
 	      void (* fillPixels) (Array2D <Rgba> &pixels, int w, int h))
 {
     int w = dw.max.x - dw.min.x + 1;
     int h = dw.max.y - dw.min.y + 1;
     Array2D <Rgba> pixels1 (h, w);
     Array2D <Rgba> pixels2 (h, w);
 
     cout << w << " by " << h << " pixels, "
 	    "channels " << channels << ", "
 	    "write order " << writeOrder << ", "
 	    "read order " << readOrder <<
 	    endl;
 
     fillPixels (pixels1, w, h);
 
     cout << "writing " << flush;
 
     {
 	RgbaOutputFile out (fileName,
 			    dw, dw,	// display window, data window
 			    channels,
 			    1,		// pixelAspectRatio
 			    V2f (0, 0),	// screenWindowCenter
 			    1,		// screenWindowWidth
 			    writeOrder);
 
 	out.setYCRounding (9, 9);
 	out.setFrameBuffer (&pixels1[-dw.min.y][-dw.min.x], 1, w);
 	out.writePixels (h);
     }
 
     cout << "reading " << flush;
 
     {
 	RgbaInputFile in (fileName);
 
 	in.setFrameBuffer (&pixels2[-dw.min.y][-dw.min.x], 1, w);
 
 	switch (readOrder)
 	{
 	  case INCREASING_Y:
 
 	    for (int y = dw.min.y; y <= dw.max.y; ++y)
 		in.readPixels (y);
 
 	    break;
 
 	  case DECREASING_Y:
 
 	    for (int y = dw.max.y; y >= dw.min.y; --y)
 		in.readPixels (y);
 
 	    break;
 
 	  case RANDOM_Y:
 
 	    assert (h % 5 != 0);
 
 	    for (int i = 0; i < h; ++i)
 	    {
 		int y = dw.min.y + (i * 5) % h;
 		in.readPixels (y);
 	    }
 
 	    break;
 		case NUM_LINEORDERS:
 		default:
 			cerr << "invalid line order " << int(readOrder) << std::endl;
 			break;
 	}
     }
 
     cout << "comparing" << endl;
 
     for (int y = 0; y < h; ++y)
     {
 	for (int x = 0; x < w; ++x)
 	{
 	    const Rgba &p1 = pixels1[y][x];
 	    const Rgba &p2 = pixels2[y][x];
 
 	    if (channels & WRITE_C)
 	    {
 		float p1Max = max (p1.r, max (p1.g, p1.b));
 		float p2Max = max (p2.r, max (p2.g, p2.b));
 
 		assert (equalWithAbsError (p1Max, p2Max, 0.03f));
 	    }
 	    else
 	    {
 		assert (p1.g == p2.g);
+		assert (p1.b == p2.b);
 	    }
 
 	    if (channels & WRITE_A)
 	    {
 		assert (p1.a == p2.a);
 	    }
 	}
     }
 
     remove (fileName);
 }
 
 } // namespace
