commit 2a33f24dc91ba8678359599fc0de0d6e343ac6f4
Author: Sean Parkinson <sean@wolfssl.com>
Date:   Mon Feb 27 15:05:50 2023 +1000

    RSA padding - no pad length check fix
    
    Perform correct length check of input bytes based on bits in key in
    wc_RsaPad_ex when no padding to be done.

diff --git a/wolfcrypt/src/rsa.c b/wolfcrypt/src/rsa.c
index 958089b82..b521c8a8c 100644
--- a/wolfcrypt/src/rsa.c
+++ b/wolfcrypt/src/rsa.c
@@ -1547,81 +1547,85 @@ static int RsaPad(const byte* input, word32 inputLen, byte* pkcsBlock,
 /* helper function to direct which padding is used */
 int wc_RsaPad_ex(const byte* input, word32 inputLen, byte* pkcsBlock,
     word32 pkcsBlockLen, byte padValue, WC_RNG* rng, int padType,
     enum wc_HashType hType, int mgf, byte* optLabel, word32 labelLen,
     int saltLen, int bits, void* heap)
 {
     int ret;
 
     switch (padType)
     {
         case WC_RSA_PKCSV15_PAD:
             /*WOLFSSL_MSG("wolfSSL Using RSA PKCSV15 padding");*/
             ret = RsaPad(input, inputLen, pkcsBlock, pkcsBlockLen,
                                                                  padValue, rng);
             break;
 
 #ifndef WC_NO_RNG
     #ifndef WC_NO_RSA_OAEP
         case WC_RSA_OAEP_PAD:
             WOLFSSL_MSG("wolfSSL Using RSA OAEP padding");
             ret = RsaPad_OAEP(input, inputLen, pkcsBlock, pkcsBlockLen,
                            padValue, rng, hType, mgf, optLabel, labelLen, heap);
             break;
     #endif
 
     #ifdef WC_RSA_PSS
         case WC_RSA_PSS_PAD:
             WOLFSSL_MSG("wolfSSL Using RSA PSS padding");
             ret = RsaPad_PSS(input, inputLen, pkcsBlock, pkcsBlockLen, rng,
                                                hType, mgf, saltLen, bits, heap);
             break;
     #endif
 #endif /* !WC_NO_RNG */
 
     #ifdef WC_RSA_NO_PADDING
         case WC_RSA_NO_PAD:
+        {
+            int bytes = (bits + WOLFSSL_BIT_SIZE - 1) / WOLFSSL_BIT_SIZE;
+
             WOLFSSL_MSG("wolfSSL Using NO padding");
 
             /* In the case of no padding being used check that input is exactly
              * the RSA key length */
-            if (bits <= 0 || inputLen != ((word32)bits/WOLFSSL_BIT_SIZE)) {
+            if ((bits <= 0) || (inputLen != (word32)bytes)) {
                 WOLFSSL_MSG("Bad input size");
                 ret = RSA_PAD_E;
             }
             else {
                 XMEMCPY(pkcsBlock, input, inputLen);
                 ret = 0;
             }
             break;
+        }
     #endif
 
         default:
             WOLFSSL_MSG("Unknown RSA Pad Type");
             ret = RSA_PAD_E;
     }
 
     /* silence warning if not used with padding scheme */
     (void)input;
     (void)inputLen;
     (void)pkcsBlock;
     (void)pkcsBlockLen;
     (void)padValue;
     (void)rng;
     (void)padType;
     (void)hType;
     (void)mgf;
     (void)optLabel;
     (void)labelLen;
     (void)saltLen;
     (void)bits;
     (void)heap;
 
     return ret;
 }
 #endif /* WOLFSSL_RSA_VERIFY_ONLY */
 
 
 /* UnPadding */
 #if !defined(WC_NO_RSA_OAEP) && !defined(NO_HASH_WRAPPER)
 /* UnPad plaintext, set start to *output, return length of plaintext,
  * < 0 on error */
