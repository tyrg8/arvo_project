commit a07ec0812de0aa2402f4bf74aea3a49248a7aa48
Author: Victor M. Alvarez <vmalvarez@virustotal.com>
Date:   Fri Jan 29 12:15:59 2021 +0100

    Fix regression introduced in 94299eee3819d7cef18faaae52251596888e22cd.

diff --git a/libyara/modules/macho/macho.c b/libyara/modules/macho/macho.c
index 73544cc5..e27f7e5d 100644
--- a/libyara/modules/macho/macho.c
+++ b/libyara/modules/macho/macho.c
@@ -521,122 +521,117 @@ void macho_handle_segment_64(
 void macho_parse_file(
     const uint8_t* data,
     const uint64_t size,
     YR_OBJECT* object,
     YR_SCAN_CONTEXT* context)
 {
   // Size must be large enough the hold yr_mach_header_64_t, which is larger
   // than yr_mach_header_32_t.
   if (size < sizeof(yr_mach_header_64_t))
     return;
 
   size_t header_size = macho_is_32(data) ? sizeof(yr_mach_header_32_t)
                                          : sizeof(yr_mach_header_64_t);
 
   // yr_mach_header_64_t is used for storing the header for both for 32-bits and
   // 64-bits files. yr_mach_header_64_t is exactly like yr_mach_header_32_t
   // but with an extra "reserved" field at the end.
   yr_mach_header_64_t header;
 
   memcpy(&header, data, header_size);
 
   int should_swap = should_swap_bytes(header.magic);
 
   if (should_swap)
     swap_mach_header(&header);
 
   set_integer(header.magic, object, "magic");
   set_integer(header.cputype, object, "cputype");
   set_integer(header.cpusubtype, object, "cpusubtype");
   set_integer(header.filetype, object, "filetype");
   set_integer(header.ncmds, object, "ncmds");
   set_integer(header.sizeofcmds, object, "sizeofcmds");
   set_integer(header.flags, object, "flags");
 
   // The "reserved" field exists only in 64 bits files.
   if (!macho_is_32(data))
-  {
-    yr_mach_header_64_t* header64 = (yr_mach_header_64_t*) data;
-    if (should_swap)
-      header64->reserved = yr_bswap32(header64->reserved);
-    set_integer(header64->reserved, object, "reserved");
-  }
+    set_integer(header.reserved, object, "reserved");
 
-  /* The first command parsing pass handles only segments. */
+  // The first command parsing pass handles only segments.
   uint64_t seg_count = 0;
   uint64_t parsed_size = header_size;
   uint8_t* command = (uint8_t*) (data + header_size);
 
   yr_load_command_t command_struct;
 
   for (unsigned i = 0; i < header.ncmds; i++)
   {
     if (data + size < command + sizeof(yr_load_command_t))
       break;
 
     memcpy(&command_struct, command, sizeof(yr_load_command_t));
 
     if (should_swap)
       swap_load_command(&command_struct);
 
     if (size - parsed_size < command_struct.cmdsize)
       break;
 
     if (command_struct.cmdsize < sizeof(yr_load_command_t))
       break;
 
     switch (command_struct.cmd)
     {
     case LC_SEGMENT:
       if (command_struct.cmdsize >= sizeof(yr_segment_command_32_t))
         macho_handle_segment(command, seg_count++, object);
       break;
     case LC_SEGMENT_64:
       if (command_struct.cmdsize >= sizeof(yr_segment_command_64_t))
         macho_handle_segment_64(command, seg_count++, object);
       break;
     }
 
     command += command_struct.cmdsize;
     parsed_size += command_struct.cmdsize;
   }
 
   set_integer(seg_count, object, "number_of_segments");
 
   // The second command parsing pass handles others, who use segment count.
   parsed_size = header_size;
   command = (uint8_t*) (data + header_size);
 
   for (unsigned i = 0; i < header.ncmds; i++)
   {
     if (data + size < command + sizeof(yr_load_command_t))
       break;
 
     memcpy(&command_struct, command, sizeof(yr_load_command_t));
 
     if (should_swap)
       swap_load_command(&command_struct);
 
     if (size - parsed_size < command_struct.cmdsize)
       break;
 
     if (command_struct.cmdsize < sizeof(yr_load_command_t))
       break;
 
     switch (command_struct.cmd)
     {
     case LC_UNIXTHREAD:
       if (command_struct.cmdsize >= sizeof(yr_thread_command_t))
         macho_handle_unixthread(command, object, context);
       break;
     case LC_MAIN:
       if (command_struct.cmdsize >= sizeof(yr_entry_point_command_t))
         macho_handle_main(command, object, context);
       break;
     }
 
     command += command_struct.cmdsize;
     parsed_size += command_struct.cmdsize;
   }
 }
 
 // Parse Mach-O fat file.
diff --git a/tests/blob.h b/tests/blob.h
index db08df61..4b1ed125 100644
--- a/tests/blob.h
+++ b/tests/blob.h
@@ -2560,107 +2560,109 @@ uint8_t MACHO_X86_OBJECT_FILE[] = {
 };
 
 
+
+
 uint8_t MACHO_X86_64_DYLIB_FILE[] = {
   0xcf, 0xfa, 0xed, 0xfe, 0x07, 0x00, 0x00, 0x01,
   0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
   0x0d, 0x00, 0x00, 0x00, 0xe8, 0x02, 0x00, 0x00,
-  0x85, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x85, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
   0x19, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00,
   0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x07, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
   0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x5f, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x50, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x50, 0x0f, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x5f, 0x5f, 0x75, 0x6e, 0x77, 0x69, 0x6e, 0x64,
   0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x00, 0x00, 0x00,
   0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x98, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x98, 0x0f, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x5f, 0x5f, 0x65, 0x68, 0x5f, 0x66, 0x72, 0x61,
   0x6d, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x5f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xe0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xe0, 0x0f, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x19, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
   0x5f, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x44,
   0x49, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x0d, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
   0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x66, 0x61, 0x63, 0x74, 0x5f, 0x78, 0x38, 0x36,
   0x5f, 0x36, 0x34, 0x2e, 0x64, 0x79, 0x6c, 0x69,
   0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x22, 0x00, 0x00, 0x80, 0x30, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
   0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
   0x38, 0x10, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
   0x58, 0x10, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
   0x0b, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
   0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x1b, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
   0x8c, 0x90, 0x46, 0x12, 0x62, 0x53, 0x3f, 0xa1,
   0xb8, 0xd2, 0xd5, 0x82, 0x98, 0x48, 0xa8, 0xfc,
   0x24, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
   0x00, 0x09, 0x0a, 0x00, 0x00, 0x0a, 0x0a, 0x00,
   0x2a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x0c, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
   0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
   0x00, 0x00, 0xbd, 0x04, 0x00, 0x00, 0x01, 0x00,
   0x2f, 0x75, 0x73, 0x72, 0x2f, 0x6c, 0x69, 0x62,
   0x2f, 0x6c, 0x69, 0x62, 0x53, 0x79, 0x73, 0x74,
   0x65, 0x6d, 0x2e, 0x42, 0x2e, 0x64, 0x79, 0x6c,
   0x69, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x26, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
   0x18, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
   0x29, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
   0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x2b, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
   0x20, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00
 };
diff --git a/tests/test-macho.c b/tests/test-macho.c
index 871252d3..f4a8c13d 100644
--- a/tests/test-macho.c
+++ b/tests/test-macho.c
@@ -8,265 +8,293 @@
 int main(int argc, char** argv)
 {
   int result = 0;
 
   YR_DEBUG_INITIALIZE();
   YR_DEBUG_FPRINTF(1, stderr, "+ %s() { // in %s\n", __FUNCTION__, argv[0]);
 
   chdir_if_env_top_srcdir();
 
   yr_initialize();
 
   //  Tests for executable files
 
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.cputype == macho.CPU_TYPE_X86 }",
       MACHO_X86_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.filetype == macho.MH_EXECUTE }",
       MACHO_X86_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.flags & macho.MH_PIE }",
       MACHO_X86_FILE);
 
   // Segments
 
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.number_of_segments == 4 }",
       MACHO_X86_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.segments[0].segname == \"__PAGEZERO\" and \
     macho.segments[1].segname == \"__TEXT\" and \
     macho.segments[2].segname == \"__DATA\" and \
     macho.segments[3].segname == \"__LINKEDIT\" }",
       MACHO_X86_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.segments[0].vmaddr == 0 and \
     macho.segments[0].vmsize == 0x1000 and \
     macho.segments[2].nsects == 2 and \
     macho.segments[3].fsize == 0x118 }",
       MACHO_X86_FILE);
+
   assert_true_rule_file(
       "import \"macho\" rule test { condition: \
     macho.number_of_segments == 1 }",
       "tests/data/tiny-macho");
 
   // Sections
 
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.segments[1].sections[0].addr == 0x1e90 and \
     macho.segments[1].sections[0].size == 0xa6 and \
     macho.segments[1].sections[0].offset == 0x0e90 }",
       MACHO_X86_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.segments[1].sections[0].sectname == \"__text\" and \
     macho.segments[1].sections[0].segname == \"__TEXT\" }",
       MACHO_X86_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.segments[1].sections[1].sectname == \"__symbol_stub\" and \
     macho.segments[1].sections[2].sectname == \"__stub_helper\" and \
     macho.segments[1].sections[3].sectname == \"__cstring\" and \
     macho.segments[1].sections[4].sectname == \"__unwind_info\" and \
     macho.segments[2].sections[0].sectname == \"__nl_symbol_ptr\" and \
     macho.segments[2].sections[1].sectname == \"__la_symbol_ptr\" }",
       MACHO_X86_FILE);
 
   // Entry point (LC_MAIN)
 
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.entry_point == 0xe90 }",
       MACHO_X86_FILE);
 
   // Tests for object files
 
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.cputype == macho.CPU_TYPE_X86 }",
       MACHO_X86_OBJECT_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.filetype == macho.MH_OBJECT }",
       MACHO_X86_OBJECT_FILE);
 
   // Segments and sections
 
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.number_of_segments == 1 and macho.segments[0].segname == \"\" and \
     macho.segments[0].sections[0].sectname == \"__text\" and \
     macho.segments[0].sections[0].segname == \"__TEXT\" }",
       MACHO_X86_OBJECT_FILE);
 
   // Tests for big-endian byte order
 
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.cputype == macho.CPU_TYPE_POWERPC }",
       MACHO_PPC_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.filetype == macho.MH_EXECUTE }",
       MACHO_PPC_FILE);
 
   // Segments
 
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.number_of_segments == 4 and \
     macho.segments[0].segname == \"__PAGEZERO\" and \
     macho.segments[2].segname == \"__DATA\" and \
     macho.segments[2].nsects == 6 and \
     macho.segments[0].vmaddr == 0 and \
     macho.segments[0].vmsize == 0x1000 and \
     macho.segments[3].fileoff == 65536 and \
     macho.segments[3].fsize == 46032 }",
       MACHO_PPC_FILE);
 
   // Entry point (LC_UNIXTHREAD)
 
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.entry_point == 0xeb8 }",
       MACHO_PPC_FILE);
 
   // Tests for 64-bit and shared library files
 
+  assert_true_rule_blob(
+      "import \"macho\" rule test { condition: \
+    macho.flags == 0x000002000 }",
+      MACHO_X86_64_DYLIB_FILE);
+
+  assert_true_rule_blob(
+      "import \"macho\" rule test { condition: \
+    macho.reserved == 0x00000001 }",
+      MACHO_X86_64_DYLIB_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.cputype == macho.CPU_TYPE_X86_64 }",
       MACHO_X86_64_DYLIB_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.filetype == macho.MH_DYLIB }",
       MACHO_X86_64_DYLIB_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.flags & macho.MH_DYLDLINK and \
     macho.flags & macho.MH_NOUNDEFS and \
     macho.flags & macho.MH_NO_REEXPORTED_DYLIBS and \
     macho.flags & macho.MH_TWOLEVEL }",
       MACHO_X86_64_DYLIB_FILE);
 
   // Segments and sections
 
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.number_of_segments == 2 }",
       MACHO_X86_64_DYLIB_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.segments[0].segname == \"__TEXT\" and \
     macho.segments[1].segname == \"__LINKEDIT\" }",
       MACHO_X86_64_DYLIB_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.segments[1].vmaddr == 0x0000000000001000 and \
     macho.segments[1].vmsize == 0x0000000000001000 and \
     macho.segments[1].nsects == 0 and \
     macho.segments[1].fsize == 128 }",
       MACHO_X86_64_DYLIB_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.segments[0].sections[0].sectname == \"__text\" and \
     macho.segments[0].sections[0].segname == \"__TEXT\" }",
       MACHO_X86_64_DYLIB_FILE);
+
   assert_true_rule_blob(
       "import \"macho\" rule test { condition: \
     macho.segments[0].sections[1].addr == 0x0000000000000f98 and \
     macho.segments[0].sections[1].size == 0x0000000000000048 and \
     macho.segments[0].sections[1].offset == 3992 }",
       MACHO_X86_64_DYLIB_FILE);
 
   // Mach-O Universal Binaries tests
 
   assert_true_rule_file(
       "import \"macho\" rule test { condition: \
     macho.fat_magic == macho.FAT_MAGIC and macho.nfat_arch == 2 }",
       "tests/data/tiny-universal");
+
   assert_true_rule_file(
       "import \"macho\" rule test { condition: \
     macho.fat_arch[0].cputype == macho.CPU_TYPE_I386 and \
     macho.fat_arch[0].cpusubtype == macho.CPU_SUBTYPE_I386_ALL and \
     macho.fat_arch[0].offset == 4096 and \
     macho.fat_arch[1].cputype == macho.CPU_TYPE_X86_64 and \
     macho.fat_arch[1].cpusubtype == macho.CPU_SUBTYPE_X86_64_ALL | \
     macho.CPU_SUBTYPE_LIB64 and macho.fat_arch[1].align == 12 }",
       "tests/data/tiny-universal");
+
   assert_true_rule_file(
       "import \"macho\" rule test { condition: \
     macho.file[0].cputype == macho.fat_arch[0].cputype and \
     macho.file[1].cputype == macho.fat_arch[1].cputype }",
       "tests/data/tiny-universal");
 
   // Entry points for files (LC_MAIN)
 
   assert_true_rule_file(
       "import \"macho\" rule test { \
     strings: $1 = { 55 89 e5 56 83 ec 34 } \
     condition: $1 at macho.file[0].entry_point + macho.fat_arch[0].offset }",
       "tests/data/tiny-universal");
 
   assert_true_rule_file(
       "import \"macho\" rule test { \
     strings: $1 = { 55 48 89 e5 48 83 ec 20 } \
     condition: $1 at macho.file[1].entry_point + macho.fat_arch[1].offset }",
       "tests/data/tiny-universal");
 
   // Helper functions
 
   assert_true_rule_file(
       "import \"macho\" rule test { condition: \
     macho.file[macho.file_index_for_arch(macho.CPU_TYPE_I386)].entry_point == \
     macho.file[0].entry_point }",
       "tests/data/tiny-universal");
   assert_true_rule_file(
       "import \"macho\" rule test { condition: \
     macho.file[macho.file_index_for_arch(macho.CPU_TYPE_X86_64)].entry_point == \
     macho.file[1].entry_point }",
       "tests/data/tiny-universal");
 
   assert_true_rule_file(
       "import \"macho\" rule test { condition: \
     macho.file[macho.file_index_for_arch(macho.CPU_TYPE_I386, \
                macho.CPU_SUBTYPE_I386_ALL)].entry_point == \
     macho.file[0].entry_point }",
       "tests/data/tiny-universal");
+
   assert_true_rule_file(
       "import \"macho\" rule test { condition: \
     macho.file[macho.file_index_for_arch(macho.CPU_TYPE_X86_64, \
                macho.CPU_SUBTYPE_X86_64_ALL | \
                macho.CPU_SUBTYPE_LIB64)].entry_point == \
     macho.file[1].entry_point }",
       "tests/data/tiny-universal");
 
   // Entry point for specific architecture
 
   assert_true_rule_file(
       "import \"macho\" rule test { \
     strings: $1 = { 55 89 e5 56 83 ec 34 } \
     condition: $1 at macho.entry_point_for_arch(macho.CPU_TYPE_I386, \
                                        macho.CPU_SUBTYPE_I386_ALL) }",
       "tests/data/tiny-universal");
 
   assert_true_rule_file(
       "import \"macho\" rule test { \
     strings: $1 = { 55 48 89 e5 48 83 ec 20 } \
     condition: $1 at macho.entry_point_for_arch(macho.CPU_TYPE_X86_64) }",
       "tests/data/tiny-universal");
 
   yr_finalize();
 
   YR_DEBUG_FPRINTF(
       1, stderr, "} = %d // %s() in %s\n", result, __FUNCTION__, argv[0]);
 
   return result;
 }
