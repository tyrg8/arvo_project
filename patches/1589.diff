commit 76821fd24a49e07680929bc3fe6e20f1ee083a87
Author: Kurt Schwehr <schwehr@gmail.com>
Date:   Mon May 15 13:51:26 2017 +0000

    Add const and remove redundant parens in TABMAPCoordBlock::ReadCoordSecHdrs().
    
    
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@38392 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/ogr/ogrsf_frmts/mitab/mitab_mapcoordblock.cpp b/gdal/ogr/ogrsf_frmts/mitab/mitab_mapcoordblock.cpp
index 5066eba2a2..2a09222ffe 100644
--- a/gdal/ogr/ogrsf_frmts/mitab/mitab_mapcoordblock.cpp
+++ b/gdal/ogr/ogrsf_frmts/mitab/mitab_mapcoordblock.cpp
@@ -382,169 +382,169 @@ int     TABMAPCoordBlock::ReadIntCoords(GBool bCompressed, int numCoordPairs,
 /**********************************************************************
  *                   TABMAPObjectBlock::ReadCoordSecHdrs()
  *
  * Read a set of coordinate section headers for PLINE MULTIPLE or REGIONs
  * and store the result in the array of structures pasHdrs[].  It is assumed
  * that pasHdrs points to an allocated array of at least numSections
  * TABMAPCoordSecHdr structures.
  *
  * The function will also set the values of numVerticesTotal to the
  * total number of coordinates in the object (the sum of all sections
  * headers read).
  *
  * At the end of the call, this TABMAPCoordBlock object will be located
  * at the beginning of the coordinate data.
  *
  * In V450 the numVertices is stored on an int32 instead of an int16
  *
  * In V800 the numHoles is stored on an int32 instead of an int16
  *
  * IMPORTANT: This function makes the assumption that coordinates for all
  *            the sections are grouped together immediately after the
  *            last section header block (i.e. that the coord. data is not
  *            located all over the place).  If it is not the case then
  *            an error will be produced and the code to read region and
  *            multipline objects will have to be updated.
  *
  * Returns 0 if successful or -1 if an error happened, in which case
  * CPLError() will have been called.
  **********************************************************************/
 int     TABMAPCoordBlock::ReadCoordSecHdrs(GBool bCompressed,
                                            int nVersion,
                                            int numSections,
                                            TABMAPCoordSecHdr *pasHdrs,
                                            GInt32    &numVerticesTotal)
 {
     CPLErrorReset();
 
     /*-------------------------------------------------------------
      * Note about header+vertices size vs compressed coordinates:
      * The uncompressed header sections are actually 16 bytes, but the
      * offset calculations are based on prior decompression of the
      * coordinates.  Our coordinate offset calculations have
      * to take this fact into account.
      * Also, V450 header section uses int32 instead of int16 for numVertices
      * and we add another 2 bytes to align with a 4 bytes boundary.
      * V800 header section uses int32 for numHoles but there is no need
      * for the 2 alignment bytes so the size is the same as V450
      *------------------------------------------------------------*/
     const int nSectionSize = (nVersion >= 450) ? 28 : 24;
     if( numSections > INT_MAX / nSectionSize )
     {
         CPLError(CE_Failure, CPLE_AssertionFailed,
                  "Invalid numSections");
         return -1;
     }
-    int nTotalHdrSizeUncompressed = nSectionSize * numSections;
+    const int nTotalHdrSizeUncompressed = nSectionSize * numSections;
 
     const int nVertexSize =
-                (bCompressed) ? 2 * sizeof(GUInt16) : 2 * sizeof(GUInt32);
+                bCompressed ? 2 * sizeof(GUInt16) : 2 * sizeof(GUInt32);
     numVerticesTotal = 0;
 
     for( int i = 0;  i < numSections; i++ )
     {
         /*-------------------------------------------------------------
          * Read the coord. section header blocks
          *------------------------------------------------------------*/
 #ifdef TABDUMP
         int nHdrAddress = GetCurAddress();
 #endif
         if (nVersion >= 450)
             pasHdrs[i].numVertices = ReadInt32();
         else
             pasHdrs[i].numVertices = ReadInt16();
 
         if( pasHdrs[i].numVertices < 0 ||
             pasHdrs[i].numVertices > INT_MAX / nVertexSize )
         {
             CPLError(CE_Failure, CPLE_AssertionFailed,
                      "Invalid number of vertices for section %d", i);
             return -1;
         }
         if (nVersion >= 800)
             pasHdrs[i].numHoles = ReadInt32();
         else
             pasHdrs[i].numHoles = ReadInt16();
         if( pasHdrs[i].numHoles < 0 )
         {
             CPLError(CE_Failure, CPLE_AssertionFailed,
                      "Invalid number of holes for section %d", i);
             return -1;
         }
         ReadIntCoord(bCompressed, pasHdrs[i].nXMin, pasHdrs[i].nYMin);
         ReadIntCoord(bCompressed, pasHdrs[i].nXMax, pasHdrs[i].nYMax);
         pasHdrs[i].nDataOffset = ReadInt32();
         if( pasHdrs[i].nDataOffset < nTotalHdrSizeUncompressed )
         {
             CPLError(CE_Failure, CPLE_AssertionFailed,
                      "Invalid data offset for section %d", i);
             return -1;
         }
 
         if (CPLGetLastErrorType() != 0)
             return -1;
 
         if( numVerticesTotal > INT_MAX / nVertexSize - pasHdrs[i].numVertices )
         {
             CPLError(CE_Failure, CPLE_AssertionFailed,
                      "Invalid number of vertices for section %d", i);
             return -1;
         }
         numVerticesTotal += pasHdrs[i].numVertices;
 
         pasHdrs[i].nVertexOffset = (pasHdrs[i].nDataOffset -
                                     nTotalHdrSizeUncompressed ) / 8;
 #ifdef TABDUMP
         printf("READING pasHdrs[%d] @ %d = \n"/*ok*/
                "              { numVertices = %d, numHoles = %d, \n"
                "                nXMin=%d, nYMin=%d, nXMax=%d, nYMax=%d,\n"
                "                nDataOffset=%d, nVertexOffset=%d }\n",
                i, nHdrAddress, pasHdrs[i].numVertices, pasHdrs[i].numHoles,
                pasHdrs[i].nXMin, pasHdrs[i].nYMin, pasHdrs[i].nXMax,
                pasHdrs[i].nYMax, pasHdrs[i].nDataOffset,
                pasHdrs[i].nVertexOffset);
         printf("                dX = %d, dY = %d  (center = %d , %d)\n",/*ok*/
                pasHdrs[i].nXMax - pasHdrs[i].nXMin,
                pasHdrs[i].nYMax - pasHdrs[i].nYMin,
                m_nComprOrgX, m_nComprOrgY);
 #endif
     }
 
     for( int i = 0; i < numSections; i++ )
     {
         /*-------------------------------------------------------------
          * Make sure all coordinates are grouped together
          * (Well... at least check that all the vertex indices are enclosed
          * inside the [0..numVerticesTotal] range.)
          *------------------------------------------------------------*/
         if ( pasHdrs[i].nVertexOffset < 0 ||
              pasHdrs[i].nVertexOffset > INT_MAX - pasHdrs[i].numVertices ||
              (pasHdrs[i].nVertexOffset +
                            pasHdrs[i].numVertices ) > numVerticesTotal)
         {
             CPLError(CE_Failure, CPLE_AssertionFailed,
                      "Unsupported case or corrupt file: MULTIPLINE/REGION "
                      "object vertices do not appear to be grouped together.");
             return -1;
         }
     }
 
     return 0;
 }
 
 /**********************************************************************
  *                   TABMAPObjectBlock::WriteCoordSecHdrs()
  *
  * Write a set of coordinate section headers for PLINE MULTIPLE or REGIONs.
  * pasHdrs should point to an array of numSections TABMAPCoordSecHdr
  * structures that have been properly initialized.
  *
  * In V450 the numVertices is stored on an int32 instead of an int16
  *
  * In V800 the numHoles is stored on an int32 instead of an int16
  *
  * At the end of the call, this TABMAPCoordBlock object will be ready to
  * receive the coordinate data.
  *
  * Returns 0 if successful or -1 if an error happened, in which case
  * CPLError() will have been called.
  **********************************************************************/
