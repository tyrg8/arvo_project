commit ad236bb7590e423b4c69fe6028f2f3495977f48b
Author: Jeremy Allison <jra@samba.org>
Date:   Fri Jan 17 13:49:48 2020 -0800

    s3: lib: nmblib. Clean up and harden nmb packet processing.
    
    BUG: https://bugzilla.samba.org/show_bug.cgi?id=14239
    OSS-FUZZ: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=20156
    OSS-FUZZ: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=20157
    
    Credit to oss-fuzz.
    No security implications.
    
    Signed-off-by: Jeremy Allison <jra@samba.org>
    Pair programmed with: Douglas Bagnall <douglas.bagnall@catalyst.net.nz>
    Reviewed-by: Douglas Bagnall <douglas.bagnall@catalyst.net.nz>
    
    Autobuild-User(master): Jeremy Allison <jra@samba.org>
    Autobuild-Date(master): Tue Jan 21 23:33:41 UTC 2020 on sn-devel-184

diff --git a/source3/libsmb/nmblib.c b/source3/libsmb/nmblib.c
index b6dca800e94..84cbb054b8e 100644
--- a/source3/libsmb/nmblib.c
+++ b/source3/libsmb/nmblib.c
@@ -177,99 +177,103 @@ static bool handle_name_ptrs(unsigned char *ubuf,int *offset,int length,
 static int parse_nmb_name(char *inbuf,int ofs,int length, struct nmb_name *name)
 {
 	size_t m,n=0;
 	unsigned char *ubuf = (unsigned char *)inbuf;
 	int ret = 0;
 	bool got_pointer=False;
 	size_t loop_count=0;
 	int offset = ofs;
 
 	if (length - offset < 2)
 		return(0);
 
 	/* handle initial name pointers */
 	if (!handle_name_ptrs(ubuf,&offset,length,&got_pointer,&ret))
 		return(0);
 
 	m = ubuf[offset];
 
-	if (!m)
-		return(0);
-	if ((m & 0xC0) || offset+m+2 > length)
-		return(0);
+	/* m must be 32 to exactly fill in the 16 bytes of the netbios name */
+	if (m != 32) {
+		return 0;
+	}
+	/* Cannot go past length. */
+	if (offset+m+2 > length) {
+		return 0;
+	}
 
 	memset((char *)name,'\0',sizeof(*name));
 
 	/* the "compressed" part */
 	if (!got_pointer)
 		ret += m + 2;
 	offset++;
 	while (m > 0) {
 		unsigned char c1,c2;
 		c1 = ubuf[offset++]-'A';
 		c2 = ubuf[offset++]-'A';
 		if ((c1 & 0xF0) || (c2 & 0xF0)) {
 			return(0);
 		}
 		if (n >= sizeof(name->name)) {
 			return 0;
 		}
 		name->name[n++] = (c1<<4) | c2;
 		m -= 2;
 	}
 	/*
 	 * RFC1002: For a valid NetBIOS name, exiting from the above,
 	 * n *must* be MAX_NETBIOSNAME_LEN (16).
 	 */
 	if (n != MAX_NETBIOSNAME_LEN) {
 		return 0;
 	}
 
 	/* parse out the name type, its always
 	 * in the 16th byte of the name */
 	name->name_type = ((unsigned char)name->name[15]) & 0xff;
 
 	/* remove trailing spaces */
 	name->name[15] = 0;
 	n = 14;
 	while (n && name->name[n]==' ')
 		name->name[n--] = 0;
 
 	/* now the domain parts (if any) */
 	n = 0;
 	while (ubuf[offset]) {
 		/* we can have pointers within the domain part as well */
 		if (!handle_name_ptrs(ubuf,&offset,length,&got_pointer,&ret))
 			return(0);
 
 		m = ubuf[offset];
 		/*
 		 * Don't allow null domain parts.
 		 */
 		if (!m)
 			return(0);
 		if (!got_pointer)
 			ret += m+1;
 		if (n)
 			name->scope[n++] = '.';
 		if (m+2+offset>length || n+m+1>sizeof(name->scope))
 			return(0);
 		offset++;
 		while (m--)
 			name->scope[n++] = (char)ubuf[offset++];
 
 		/*
 		 * Watch for malicious loops.
 		 */
 		if (loop_count++ == 10)
 			return 0;
 	}
 	name->scope[n++] = 0;
 
 	return(ret);
 }
 
 /****************************************************************************
  Put a netbios name, padding(s) and a name type into a 16 character buffer.
  name is already in DOS charset.
  [15 bytes name + padding][1 byte name type].
 ****************************************************************************/
