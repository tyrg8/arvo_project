commit ed5b4655ba6f1a641bc340322874d720f4494baf
Author: Guido Vranken <guidovranken@gmail.com>
Date:   Sat Nov 4 22:11:40 2023 +0100

    libecc: Prevent calling fp_uninit on uninitialized fp

diff --git a/modules/libecc/module.cpp b/modules/libecc/module.cpp
index f16fb68..0fbe3ae 100644
--- a/modules/libecc/module.cpp
+++ b/modules/libecc/module.cpp
@@ -413,67 +413,70 @@ end:
 std::optional<bool> libecc::OpECC_ValidatePubkey(operation::ECC_ValidatePubkey& op) {
     std::optional<bool> ret = std::nullopt;
     Datasource ds(op.modifier.GetPtr(), op.modifier.GetSize());
     libecc_detail::global_ds = &ds;
 
     const ec_str_params* curve_params;
     ec_params params;
     ec_pub_key pub_key;
 
     /* Load curve.
      * NOTE: this will be WEI25519 or WEI448 (libecc uses isogenies for ed25519, ed448, x25519 and x448)
      * for EdDSA and X25519/X448
      */
     CF_CHECK_NE(curve_params = libecc_detail::GetCurve(op.curveType), nullptr);
     CF_ASSERT(!import_params(&params, curve_params), "import_params error " __FILE__ ":" TOSTRING(__LINE__));
 
     /* Skip the ed25519, ed448, x25519 and x448 special cases */
     if ( op.curveType.Is(CF_ECC_CURVE("ed25519")) || op.curveType.Is(CF_ECC_CURVE("ed448")) ) {
         /* XXX: see if OpECC_ValidatePubkey is called on x coordinates only, or points on Edwards curves? */
         goto end;
     }
     if ( op.curveType.Is(CF_ECC_CURVE("x25519")) || op.curveType.Is(CF_ECC_CURVE("x448")) ) {
         /* XXX: see if OpECC_ValidatePubkey is called on x coordinates only encoded strings? */
         goto end;
     }
 
     {
         /* Generic case, extract X and Y, and check the point on the curve */
         const auto ax_bin = util::DecToBin(op.pub.first.ToTrimmedString());
         const auto ay_bin = util::DecToBin(op.pub.second.ToTrimmedString());
         fp x, y;
+        bool x_inited = false, y_inited = false;
         u8 *pub_buff = NULL;
         u16 coord_len = (u16)BYTECEIL(params.ec_fp.p_bitlen);
 
         if(fp_init_from_buf(&x, &(params.ec_fp), ax_bin->data(), ax_bin->size())){
             ret = false;
             goto end1;
         }
+        x_inited = true;
 
         if(fp_init_from_buf(&y, &(params.ec_fp), ay_bin->data(), ay_bin->size())){
             ret = false;
             goto end1;
         }
+        y_inited = true;
 
         /* Allocate a buffer for our stringified public key */
         pub_buff = util::malloc(coord_len * 2);
 
         if(fp_export_to_buf(&pub_buff[0], coord_len, &x)){
             ret = false;
             goto end1;
         }
         if(fp_export_to_buf(&pub_buff[coord_len], coord_len, &y)){
             ret = false;
             goto end1;
         }
 
         /* Try to import the public key on the curve (and perform the underlying checks).
          * This will return an error if the public key is rejected!
          * NOTE: we choose randomly ECDSA as the signature algorithm type as all the signatures expect
 	 * a point on their curve anyways!
          */
         if(ec_pub_key_import_from_aff_buf(&pub_key, &params, &pub_buff[0], coord_len * 2, ECDSA)){
             ret = false;
             goto end1;
         }
 
         ret = true;
@@ -481,9 +484,13 @@ std::optional<bool> libecc::OpECC_ValidatePubkey(operation::ECC_ValidatePubkey&
 end1:
         if(pub_buff != NULL){
             util::free(pub_buff);
         }
-        fp_uninit(&x);
-        fp_uninit(&y);
+        if ( x_inited == true ) {
+            fp_uninit(&x);
+        }
+        if ( y_inited == true ) {
+            fp_uninit(&y);
+        }
     }
 
 end:
