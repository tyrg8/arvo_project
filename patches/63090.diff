commit 37b5f4a1f6a9c7c8f3620c6b1f7f2b0bb997e5d7
Author: Andreas Rheinhardt <andreas.rheinhardt@outlook.com>
Date:   Mon Oct 9 00:16:08 2023 +0200

    avformat/matroskadec, mov: Fix declaration-after-statement warnings
    
    Reviewed-by: Michael Niedermayer <michael@niedermayer.cc>
    Signed-off-by: Andreas Rheinhardt <andreas.rheinhardt@outlook.com>

diff --git a/libavformat/matroskadec.c b/libavformat/matroskadec.c
index af0e5d7c0b..8f000f86be 100644
--- a/libavformat/matroskadec.c
+++ b/libavformat/matroskadec.c
@@ -4521,103 +4521,102 @@ static int buffer_size_after_time_downloaded(int64_t time_ns, double search_sec,
 /* This function computes the bandwidth of the WebM file with the help of
  * buffer_size_after_time_downloaded() function. Both of these functions are
  * adapted from WebM Tools project and are adapted to work with FFmpeg's
  * Matroska parsing mechanism.
  *
  * Returns the bandwidth of the file on success; -1 on error.
  * */
 static int64_t webm_dash_manifest_compute_bandwidth(AVFormatContext *s, int64_t cues_start)
 {
     MatroskaDemuxContext *matroska = s->priv_data;
     AVStream *st = s->streams[0];
     FFStream *const sti = ffstream(st);
     double bandwidth = 0.0;
 
     for (int i = 0; i < sti->nb_index_entries; i++) {
         int64_t prebuffer_ns = 1000000000;
         int64_t time_ns = sti->index_entries[i].timestamp * matroska->time_scale;
         double nano_seconds_per_second = 1000000000.0;
         int64_t prebuffered_ns;
         double prebuffer_bytes = 0.0;
         int64_t temp_prebuffer_ns = prebuffer_ns;
         int64_t pre_bytes, pre_ns;
         double pre_sec, prebuffer, bits_per_second;
         CueDesc desc_beg = get_cue_desc(s, time_ns, cues_start);
+        // Start with the first Cue.
+        CueDesc desc_end = desc_beg;
 
         if (time_ns > INT64_MAX - prebuffer_ns)
             return -1;
         prebuffered_ns = time_ns + prebuffer_ns;
 
-        // Start with the first Cue.
-        CueDesc desc_end = desc_beg;
-
         // Figure out how much data we have downloaded for the prebuffer. This will
         // be used later to adjust the bits per sample to try.
         while (desc_end.start_time_ns != -1 && desc_end.end_time_ns < prebuffered_ns) {
             // Prebuffered the entire Cue.
             prebuffer_bytes += desc_end.end_offset - desc_end.start_offset;
             temp_prebuffer_ns -= desc_end.end_time_ns - desc_end.start_time_ns;
             desc_end = get_cue_desc(s, desc_end.end_time_ns, cues_start);
         }
         if (desc_end.start_time_ns == -1) {
             // The prebuffer is larger than the duration.
             if (matroska->duration * matroska->time_scale >= prebuffered_ns)
               return -1;
             bits_per_second = 0.0;
         } else {
             // The prebuffer ends in the last Cue. Estimate how much data was
             // prebuffered.
             pre_bytes = desc_end.end_offset - desc_end.start_offset;
             pre_ns = desc_end.end_time_ns - desc_end.start_time_ns;
             if (pre_ns <= 0)
                 return -1;
             pre_sec = pre_ns / nano_seconds_per_second;
             prebuffer_bytes +=
                 pre_bytes * ((temp_prebuffer_ns / nano_seconds_per_second) / pre_sec);
 
             prebuffer = prebuffer_ns / nano_seconds_per_second;
 
             // Set this to 0.0 in case our prebuffer buffers the entire video.
             bits_per_second = 0.0;
             do {
                 int64_t desc_bytes = desc_end.end_offset - desc_beg.start_offset;
                 int64_t desc_ns = desc_end.end_time_ns - desc_beg.start_time_ns;
                 double desc_sec, calc_bits_per_second, percent, mod_bits_per_second;
                 if (desc_bytes <= 0)
                     return -1;
 
                 desc_sec = desc_ns / nano_seconds_per_second;
                 calc_bits_per_second = (desc_bytes * 8) / desc_sec;
 
                 // Drop the bps by the percentage of bytes buffered.
                 percent = (desc_bytes - prebuffer_bytes) / desc_bytes;
                 mod_bits_per_second = calc_bits_per_second * percent;
 
                 if (prebuffer < desc_sec) {
                     double search_sec =
                         (double)(matroska->duration * matroska->time_scale) / nano_seconds_per_second;
 
                     // Add 1 so the bits per second should be a little bit greater than file
                     // datarate.
                     int64_t bps = (int64_t)(mod_bits_per_second) + 1;
                     const double min_buffer = 0.0;
                     double buffer = prebuffer;
                     double sec_to_download = 0.0;
 
                     int rv = buffer_size_after_time_downloaded(prebuffered_ns, search_sec, bps,
                                                                min_buffer, &buffer, &sec_to_download,
                                                                s, cues_start);
                     if (rv < 0) {
                         return -1;
                     } else if (rv == 0) {
                         bits_per_second = (double)(bps);
                         break;
                     }
                 }
 
                 desc_end = get_cue_desc(s, desc_end.end_time_ns, cues_start);
             } while (desc_end.start_time_ns != -1);
         }
         if (bandwidth < bits_per_second) bandwidth = bits_per_second;
     }
     return (int64_t)bandwidth;
 }
diff --git a/libavformat/mov.c b/libavformat/mov.c
index 1bd224f390..2f29487beb 100644
--- a/libavformat/mov.c
+++ b/libavformat/mov.c
@@ -4902,64 +4902,64 @@ static int mov_read_custom(MOVContext *c, AVIOContext *pb, MOVAtom atom)
 static int avif_add_stream(MOVContext *c, int item_id)
 {
     MOVStreamContext *sc;
     AVStream *st;
+    int item_index = -1;
     if (c->fc->nb_streams)
         return AVERROR_INVALIDDATA;
-    int item_index = -1;
     for (int i = 0; i < c->avif_info_size; i++)
         if (c->avif_info[i].item_id == item_id) {
             item_index = i;
             break;
         }
     if (item_index < 0)
         return AVERROR_INVALIDDATA;
     st = avformat_new_stream(c->fc, NULL);
     if (!st)
         return AVERROR(ENOMEM);
     st->id = c->fc->nb_streams;
     sc = av_mallocz(sizeof(MOVStreamContext));
     if (!sc)
         return AVERROR(ENOMEM);
 
     st->priv_data = sc;
     st->codecpar->codec_type = AVMEDIA_TYPE_VIDEO;
     st->codecpar->codec_id = AV_CODEC_ID_AV1;
     sc->ffindex = st->index;
     c->trak_index = st->index;
     st->avg_frame_rate.num = st->avg_frame_rate.den = 1;
     st->time_base.num = st->time_base.den = 1;
     st->nb_frames = 1;
     sc->time_scale = 1;
     sc = st->priv_data;
     sc->pb = c->fc->pb;
     sc->pb_is_copied = 1;
 
     // Populate the necessary fields used by mov_build_index.
     sc->stsc_count = 1;
     sc->stsc_data = av_malloc_array(1, sizeof(*sc->stsc_data));
     if (!sc->stsc_data)
         return AVERROR(ENOMEM);
     sc->stsc_data[0].first = 1;
     sc->stsc_data[0].count = 1;
     sc->stsc_data[0].id = 1;
     sc->chunk_count = 1;
     sc->chunk_offsets = av_malloc_array(1, sizeof(*sc->chunk_offsets));
     if (!sc->chunk_offsets)
         return AVERROR(ENOMEM);
     sc->sample_count = 1;
     sc->sample_sizes = av_malloc_array(1, sizeof(*sc->sample_sizes));
     if (!sc->sample_sizes)
         return AVERROR(ENOMEM);
     sc->stts_count = 1;
     sc->stts_data = av_malloc_array(1, sizeof(*sc->stts_data));
     if (!sc->stts_data)
         return AVERROR(ENOMEM);
     sc->stts_data[0].count = 1;
     // Not used for still images. But needed by mov_build_index.
     sc->stts_data[0].duration = 0;
     sc->sample_sizes[0] = c->avif_info[item_index].extent_length;
     sc->chunk_offsets[0] = c->avif_info[item_index].extent_offset;
 
     mov_build_index(c, st);
     return 0;
 }
