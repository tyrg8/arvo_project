commit 9b54b561858b3fb265f57d2b4ddf35fba2603069
Author: Alan Modra <amodra@gmail.com>
Date:   Fri Dec 17 13:32:36 2021 +1030

    asan: heap-buffer-overflow in bpf_elf_generic_reloc
    
    The bpf reloc howtos are a bit weird, using bitpos to specify an
    offset from r_offset that is outside the size of the reloc as given by
    howto.size.  That means bfd_get_reloc_size gives the wrong answer for
    range checking, and thus bfd_reloc_offset_in_range can't be used.
    
            * elf64-bpf.c (bpf_elf_generic_reloc): Handle bitpos offset reloc
            range checking.

diff --git a/bfd/elf64-bpf.c b/bfd/elf64-bpf.c
index beabad79aff..4e5f9d1e2f7 100644
--- a/bfd/elf64-bpf.c
+++ b/bfd/elf64-bpf.c
@@ -600,101 +600,102 @@ static bfd_reloc_status_type
 bpf_elf_generic_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,
 		       void *data, asection *input_section,
 		       bfd *output_bfd ATTRIBUTE_UNUSED,
 		       char **error_message ATTRIBUTE_UNUSED)
 {
 
   bfd_signed_vma relocation;
   bfd_reloc_status_type status;
   bfd_byte *where;
 
   /* Sanity check that the address is in range.  */
+  bfd_size_type end = bfd_get_section_limit_octets (abfd, input_section);
+  bfd_size_type reloc_size;
   if (reloc_entry->howto->type == R_BPF_INSN_64)
-    {
-      bfd_size_type end = bfd_get_section_limit_octets (abfd, input_section);
-      if (reloc_entry->address > end
-	  || end - reloc_entry->address < 16)
-	return bfd_reloc_outofrange;
-    }
-  else if (!bfd_reloc_offset_in_range (reloc_entry->howto, abfd, input_section,
-				       reloc_entry->address))
+    reloc_size = 16;
+  else
+    reloc_size = (reloc_entry->howto->bitsize
+		  + reloc_entry->howto->bitpos) / 8;
+
+  if (reloc_entry->address > end
+      || end - reloc_entry->address < reloc_size)
     return bfd_reloc_outofrange;
 
   /*  Get the symbol value.  */
   if (bfd_is_com_section (symbol->section))
     relocation = 0;
   else
     relocation = symbol->value;
 
   if (symbol->flags & BSF_SECTION_SYM)
     /* Relocation against a section symbol: add in the section base address.  */
     relocation += BASEADDR (symbol->section);
 
   relocation += reloc_entry->addend;
 
   where = (bfd_byte *) data + reloc_entry->address;
 
   status = bfd_check_overflow (reloc_entry->howto->complain_on_overflow,
 			       reloc_entry->howto->bitsize,
 			       reloc_entry->howto->rightshift, 64, relocation);
 
   if (status != bfd_reloc_ok)
     return status;
 
   /* Now finally install the relocation.  */
   if (reloc_entry->howto->type == R_BPF_INSN_64)
     {
       /* lddw is a 128-bit (!) instruction that allows loading a 64-bit
 	 immediate into a register. the immediate is split in half, with the
 	 lower 32 bits in the same position as the imm32 field of other
 	 instructions, and the upper 32 bits placed at the very end of the
 	 instruction. that is, there are 32 unused bits between them. */
 
       bfd_put_32 (abfd, (relocation & 0xFFFFFFFF), where + 4);
       bfd_put_32 (abfd, (relocation >> 32), where + 12);
     }
   else
     {
       /* For other kinds of relocations, the relocated value simply goes
 	 BITPOS bits from the start of the entry. This is always a multiple
 	 of 8, i.e. whole bytes.  */
       bfd_put (reloc_entry->howto->bitsize, abfd, relocation,
 	       where + reloc_entry->howto->bitpos / 8);
     }
 
   reloc_entry->addend = relocation;
   reloc_entry->address += input_section->output_offset;
 
   return bfd_reloc_ok;
 }
 
 
 /* The macros below configure the architecture.  */
 
 #define TARGET_LITTLE_SYM bpf_elf64_le_vec
 #define TARGET_LITTLE_NAME "elf64-bpfle"
 
 #define TARGET_BIG_SYM bpf_elf64_be_vec
 #define TARGET_BIG_NAME "elf64-bpfbe"
 
 #define ELF_ARCH bfd_arch_bpf
 #define ELF_MACHINE_CODE EM_BPF
 
 #define ELF_MAXPAGESIZE 0x100000
 
 #define elf_info_to_howto_rel bpf_info_to_howto
 #define elf_info_to_howto bpf_info_to_howto
 
 #define elf_backend_may_use_rel_p		1
 #define elf_backend_may_use_rela_p		0
 #define elf_backend_default_use_rela_p		0
 #define elf_backend_relocate_section		bpf_elf_relocate_section
 
 #define elf_backend_can_gc_sections		0
 
 #define elf_symbol_leading_char			'_'
 #define bfd_elf64_bfd_reloc_type_lookup		bpf_reloc_type_lookup
 #define bfd_elf64_bfd_reloc_name_lookup		bpf_reloc_name_lookup
 
 #define bfd_elf64_bfd_merge_private_bfd_data elf64_bpf_merge_private_bfd_data
 
 #include "elf64-target.h"
