commit 75f9c33cef261046f75c6fe3a02f9912e55211ee
Author: Frederik Deweerdt <fdeweerdt@fastly.com>
Date:   Fri Apr 12 10:30:49 2019 -0700

    Check that there was no previous decode error

diff --git a/lib/minicrypto-pem.c b/lib/minicrypto-pem.c
index f40d225..8e068d3 100644
--- a/lib/minicrypto-pem.c
+++ b/lib/minicrypto-pem.c
@@ -36,130 +36,130 @@
 /*
  * This function could be declared as static, but we want to access it
  * in the unit tests.
  */
 size_t ptls_minicrypto_asn1_decode_private_key(ptls_asn1_pkcs8_private_key_t *pkey, int *decode_error,
                                                ptls_minicrypto_log_ctx_t *log_ctx)
 {
     uint8_t *bytes = pkey->vec.base;
     size_t bytes_max = pkey->vec.len;
 
     /* read the ASN1 messages */
     size_t byte_index = 0;
     uint32_t seq0_length = 0;
     size_t last_byte0;
     uint32_t seq1_length = 0;
     size_t last_byte1 = 0;
     uint32_t oid_length;
     size_t last_oid_byte;
     uint32_t key_data_length;
     size_t key_data_last;
 
     /* start with sequence */
     byte_index = ptls_asn1_get_expected_type_and_length(bytes, bytes_max, byte_index, 0x30, &seq0_length, NULL, &last_byte0,
                                                         decode_error, log_ctx);
 
     if (*decode_error == 0 && bytes_max != last_byte0) {
         byte_index = ptls_asn1_error_message("Length larger than message", bytes_max, byte_index, 0, log_ctx);
         *decode_error = PTLS_ERROR_BER_EXCESSIVE_LENGTH;
     }
 
     if (*decode_error == 0) {
         /* get first component: version, INTEGER, expect value 0 */
         if (byte_index + 3 > bytes_max) {
             byte_index = ptls_asn1_error_message("Cannot find key version", bytes_max, byte_index, 0, log_ctx);
             *decode_error = PTLS_ERROR_INCORRECT_PEM_KEY_VERSION;
         } else if (bytes[byte_index] != 0x02 || bytes[byte_index + 1] != 0x01 || bytes[byte_index + 2] != 0x00) {
             *decode_error = PTLS_ERROR_INCORRECT_PEM_KEY_VERSION;
             byte_index = ptls_asn1_error_message("Incorrect PEM Version", bytes_max, byte_index, 0, log_ctx);
         } else {
             byte_index += 3;
             if (log_ctx != NULL) {
                 log_ctx->fn(log_ctx->ctx, "   Version = 1,\n");
             }
         }
     }
 
     if (*decode_error == 0) {
         /* open embedded sequence */
         byte_index = ptls_asn1_get_expected_type_and_length(bytes, bytes_max, byte_index, 0x30, &seq1_length, NULL, &last_byte1,
                                                             decode_error, log_ctx);
     }
 
     if (*decode_error == 0) {
         if (log_ctx != NULL) {
             log_ctx->fn(log_ctx->ctx, "   Algorithm Identifier:\n");
         }
         /* get length of OID */
         byte_index = ptls_asn1_get_expected_type_and_length(bytes, last_byte1, byte_index, 0x06, &oid_length, NULL, &last_oid_byte,
                                                             decode_error, log_ctx);
 
         if (*decode_error == 0) {
             if (log_ctx != NULL) {
                 /* print the OID value */
                 log_ctx->fn(log_ctx->ctx, "      Algorithm:");
                 ptls_asn1_dump_content(bytes + byte_index, oid_length, 0, log_ctx);
                 log_ctx->fn(log_ctx->ctx, ",\n");
             }
             pkey->algorithm_index = byte_index;
             pkey->algorithm_length = oid_length;
             byte_index += oid_length;
         }
     }
 
-    if (last_byte1 < byte_index) {
+    if (*decode_error == 0 && last_byte1 < byte_index) {
         byte_index = ptls_asn1_error_message("Length larger than message", bytes_max, byte_index, 0, log_ctx);
         *decode_error = PTLS_ERROR_BER_EXCESSIVE_LENGTH;
     }
     if (*decode_error == 0) {
         /* get parameters, ANY */
         if (log_ctx != NULL) {
             log_ctx->fn(log_ctx->ctx, "      Parameters:\n");
         }
 
         pkey->parameters_index = byte_index;
 
         pkey->parameters_length =
             (uint32_t)ptls_asn1_validation_recursive(bytes + byte_index, last_byte1 - byte_index, decode_error, 2, log_ctx);
 
         byte_index += pkey->parameters_length;
 
         if (log_ctx != NULL) {
             log_ctx->fn(log_ctx->ctx, "\n");
         }
         /* close sequence */
         if (byte_index != last_byte1) {
             byte_index = ptls_asn1_error_message("Length larger than element", bytes_max, byte_index, 2, log_ctx);
             *decode_error = PTLS_ERROR_BER_ELEMENT_TOO_SHORT;
         }
     }
 
     /* get octet string, key */
     if (*decode_error == 0) {
         byte_index = ptls_asn1_get_expected_type_and_length(bytes, last_byte0, byte_index, 0x04, &key_data_length, NULL,
                                                             &key_data_last, decode_error, log_ctx);
 
         if (*decode_error == 0) {
             pkey->key_data_index = byte_index;
             pkey->key_data_length = key_data_length;
             byte_index += key_data_length;
 
             if (log_ctx != NULL) {
                 log_ctx->fn(log_ctx->ctx, "   Key data (%d bytes):\n", key_data_length);
 
                 (void)ptls_asn1_validation_recursive(bytes + pkey->key_data_index, key_data_length, decode_error, 1, log_ctx);
                 log_ctx->fn(log_ctx->ctx, "\n");
             }
         }
     }
 
     if (*decode_error == 0 && byte_index != last_byte0) {
         byte_index = ptls_asn1_error_message("Length larger than element", bytes_max, byte_index, 0, log_ctx);
         *decode_error = PTLS_ERROR_BER_ELEMENT_TOO_SHORT;
     }
 
     if (log_ctx != NULL) {
         log_ctx->fn(log_ctx->ctx, "\n");
     }
 
     return byte_index;
 }
