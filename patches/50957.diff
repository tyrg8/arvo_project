commit be25a63be953dbfeef41cfec42550739ba74ea63
Author: Marti Maria <marti.maria@littlecms.com>
Date:   Wed Sep 7 19:03:11 2022 +0200

    sanitize cgats parser
    
    I don't know why people keeps fuzzing this code, but they do, and then they make a lot of noise. So let's make it less permissive and abort early when some wrong characters are found.
    I apologize if someone got hurt in the process.
    Otherwise this is harmless because is not used on ICC profile handling.

diff --git a/src/cmscgats.c b/src/cmscgats.c
index b59eafd..845c18a 100644
--- a/src/cmscgats.c
+++ b/src/cmscgats.c
@@ -785,244 +785,251 @@ static
 void InSymbol(cmsIT8* it8)
 {
     SYMBOL key;
     
     do {
 
         while (isseparator(it8->ch))
             NextCh(it8);
 
         if (isfirstidchar(it8->ch)) {          // Identifier
 
             StringClear(it8->id);
 
             do {
 
                 StringAppend(it8->id, (char) it8->ch);
 
                 NextCh(it8);
 
             } while (isidchar(it8->ch));
 
 
             key = BinSrchKey(StringPtr(it8->id));
             if (key == SUNDEFINED) it8->sy = SIDENT;
             else it8->sy = key;
 
         }
         else                         // Is a number?
             if (isdigit(it8->ch) || it8->ch == '.' || it8->ch == '-' || it8->ch == '+')
             {
                 int sign = 1;
 
                 if (it8->ch == '-') {
                     sign = -1;
                     NextCh(it8);
                 }
 
                 it8->inum = 0;
                 it8->sy   = SINUM;
 
                 if (it8->ch == '0') {          // 0xnnnn (Hexa) or 0bnnnn (Binary)
 
                     NextCh(it8);
                     if (toupper(it8->ch) == 'X') {
 
                         int j;
 
                         NextCh(it8);
                         while (isxdigit(it8->ch))
                         {
                             it8->ch = toupper(it8->ch);
                             if (it8->ch >= 'A' && it8->ch <= 'F')  j = it8->ch -'A'+10;
                             else j = it8->ch - '0';
 
                             if ((cmsFloat64Number) it8->inum * 16.0 + (cmsFloat64Number) j > (cmsFloat64Number)+2147483647.0)
                             {
                                 SynError(it8, "Invalid hexadecimal number");
+                                it8->sy = SEOF;
                                 return;
                             }
 
                             it8->inum = it8->inum * 16 + j;
                             NextCh(it8);
                         }
                         return;
                     }
 
                     if (toupper(it8->ch) == 'B') {  // Binary
 
                         int j;
 
                         NextCh(it8);
                         while (it8->ch == '0' || it8->ch == '1')
                         {
                             j = it8->ch - '0';
 
                             if ((cmsFloat64Number) it8->inum * 2.0 + j > (cmsFloat64Number)+2147483647.0)
                             {
                                 SynError(it8, "Invalid binary number");
+                                it8->sy = SEOF;
                                 return;
                             }
 
                             it8->inum = it8->inum * 2 + j;
                             NextCh(it8);
                         }
                         return;
                     }
                 }
 
 
                 while (isdigit(it8->ch)) {
 
                     cmsInt32Number digit = (it8->ch - '0');
 
                     if ((cmsFloat64Number) it8->inum * 10.0 + (cmsFloat64Number) digit > (cmsFloat64Number) +2147483647.0) {
                         ReadReal(it8, it8->inum);
                         it8->sy = SDNUM;
                         it8->dnum *= sign;
                         return;
                     }
 
                     it8->inum = it8->inum * 10 + digit;
                     NextCh(it8);
                 }
 
                 if (it8->ch == '.') {
 
                     ReadReal(it8, it8->inum);
                     it8->sy = SDNUM;
                     it8->dnum *= sign;
                     return;
                 }
 
                 it8 -> inum *= sign;
 
                 // Special case. Numbers followed by letters are taken as identifiers
 
                 if (isidchar(it8 ->ch)) {
 
                     char buffer[127];
 
                     if (it8 ->sy == SINUM) {
 
                         snprintf(buffer, sizeof(buffer), "%d", it8->inum);
                     }
                     else {
 
                         snprintf(buffer, sizeof(buffer), it8 ->DoubleFormatter, it8->dnum);
                     }
 
                     StringCat(it8->id, buffer);
 
                     do {
 
                         StringAppend(it8->id, (char) it8->ch);
 
                         NextCh(it8);
 
                     } while (isidchar(it8->ch));
 
                     it8->sy = SIDENT;
                 }
                 return;
 
             }
             else
                 switch ((int) it8->ch) {
-
-        // EOF marker -- ignore it
-        case '\x1a':
-            NextCh(it8);
-            break;
-
+        
         // Eof stream markers
+        case '\x1a':
         case 0:
         case -1:
             it8->sy = SEOF;
             break;
 
 
         // Next line
         case '\r':
             NextCh(it8);
             if (it8 ->ch == '\n') 
                 NextCh(it8);
             it8->sy = SEOLN;
             it8->lineno++;
             break;
 
         case '\n':
             NextCh(it8);
             it8->sy = SEOLN;
             it8->lineno++;
             break;
 
         // Comment
         case '#':
             NextCh(it8);
             while (it8->ch && it8->ch != '\n' && it8->ch != '\r')
                 NextCh(it8);
 
             it8->sy = SCOMMENT;
             break;
 
         // String.
         case '\'':
         case '\"':
             InStringSymbol(it8);
             break;
 
 
         default:
             SynError(it8, "Unrecognized character: 0x%x", it8 ->ch);
+            it8->sy = SEOF;
             return;
             }
 
     } while (it8->sy == SCOMMENT);
 
     // Handle the include special token
 
     if (it8 -> sy == SINCLUDE) {
 
                 FILECTX* FileNest;
 
                 if(it8 -> IncludeSP >= (MAXINCLUDE-1)) {
 
                     SynError(it8, "Too many recursion levels");
+                    it8->sy = SEOF;
                     return;
                 }
 
                 InStringSymbol(it8);
-                if (!Check(it8, SSTRING, "Filename expected")) return;
+                if (!Check(it8, SSTRING, "Filename expected"))
+                {
+                    it8->sy = SEOF;
+                    return;
+                }
 
                 FileNest = it8 -> FileStack[it8 -> IncludeSP + 1];
                 if(FileNest == NULL) {
 
                     FileNest = it8 ->FileStack[it8 -> IncludeSP + 1] = (FILECTX*)AllocChunk(it8, sizeof(FILECTX));
                     if (FileNest == NULL) {
                         SynError(it8, "Out of memory");
+                        it8->sy = SEOF;
                         return;
                     }
                 }
 
                 if (BuildAbsolutePath(StringPtr(it8->str),
                                       it8->FileStack[it8->IncludeSP]->FileName,
                                       FileNest->FileName, cmsMAX_PATH-1) == FALSE) {
                     SynError(it8, "File path too long");
+                    it8->sy = SEOF;
                     return;
                 }
 
                 FileNest->Stream = fopen(FileNest->FileName, "rt");
                 if (FileNest->Stream == NULL) {
 
                         SynError(it8, "File %s not found", FileNest->FileName);
+                        it8->sy = SEOF;
                         return;
                 }
                 it8->IncludeSP++;
 
                 it8 ->ch = ' ';
                 InSymbol(it8);
     }
 
 }
 
 // Checks end of line separator
@@ -1159,33 +1166,34 @@ static
 void* AllocChunk(cmsIT8* it8, cmsUInt32Number size)
 {
     cmsUInt32Number Free = it8 ->Allocator.BlockSize - it8 ->Allocator.Used;
     cmsUInt8Number* ptr;
 
     size = _cmsALIGNMEM(size);
 
     if (size > Free) {
 
         if (it8 -> Allocator.BlockSize == 0)
 
                 it8 -> Allocator.BlockSize = 20*1024;
         else
                 it8 ->Allocator.BlockSize *= 2;
 
         if (it8 ->Allocator.BlockSize < size)
                 it8 ->Allocator.BlockSize = size;
 
         it8 ->Allocator.Used = 0;
         it8 ->Allocator.Block = (cmsUInt8Number*) AllocBigBlock(it8, it8 ->Allocator.BlockSize);       
     }
 
-    if (it8->Allocator.Block == NULL) return NULL;
+    if (it8->Allocator.Block == NULL)
+        return NULL;
 
     ptr = it8 ->Allocator.Block + it8 ->Allocator.Used;
     it8 ->Allocator.Used += size;
 
     return (void*) ptr;
 
 }
 
 
 // Allocates a string
@@ -1537,26 +1545,28 @@ cmsInt32Number satoi(const char* b)
 
 
 static
-void AllocateDataFormat(cmsIT8* it8)
+cmsBool AllocateDataFormat(cmsIT8* it8)
 {
     TABLE* t = GetTable(it8);
 
-    if (t -> DataFormat) return;    // Already allocated
+    if (t -> DataFormat) return TRUE;    // Already allocated
 
     t -> nSamples  = satoi(cmsIT8GetProperty(it8, "NUMBER_OF_FIELDS"));
 
     if (t -> nSamples <= 0) {
 
         SynError(it8, "AllocateDataFormat: Unknown NUMBER_OF_FIELDS");
-        t -> nSamples = 10;
+        return FALSE;        
         }
 
     t -> DataFormat = (char**) AllocChunk (it8, ((cmsUInt32Number) t->nSamples + 1) * sizeof(char *));
     if (t->DataFormat == NULL) {
 
         SynError(it8, "AllocateDataFormat: Unable to allocate dataFormat array");
+        return FALSE;
     }
 
+    return TRUE;
 }
 
 static
@@ -1574,18 +1584,22 @@ static
 cmsBool SetDataFormat(cmsIT8* it8, int n, const char *label)
 {
     TABLE* t = GetTable(it8);
 
-    if (!t->DataFormat)
-        AllocateDataFormat(it8);
+    if (!t->DataFormat) {
+
+        if (!AllocateDataFormat(it8))
+            return FALSE;
+    }
 
     if (n > t -> nSamples) {
         SynError(it8, "More than NUMBER_OF_FIELDS fields.");
         return FALSE;
     }
 
     if (t->DataFormat) {
         t->DataFormat[n] = AllocString(it8, label);
+        if (t->DataFormat[n] == NULL) return FALSE;
     }
 
     return TRUE;
 }
@@ -1617,28 +1631,31 @@ const char* satob(const char* v)
 
 
 static
-void AllocateDataSet(cmsIT8* it8)
+cmsBool AllocateDataSet(cmsIT8* it8)
 {
     TABLE* t = GetTable(it8);
 
-    if (t -> Data) return;    // Already allocated
+    if (t -> Data) return TRUE;    // Already allocated
 
     t-> nSamples   = satoi(cmsIT8GetProperty(it8, "NUMBER_OF_FIELDS"));
     t-> nPatches   = satoi(cmsIT8GetProperty(it8, "NUMBER_OF_SETS"));
 
     if (t -> nSamples < 0 || t->nSamples > 0x7ffe || t->nPatches < 0 || t->nPatches > 0x7ffe)
     {
         SynError(it8, "AllocateDataSet: too much data");
+        return FALSE;
     }
     else {
         // Some dumb analizers warns of possible overflow here, just take a look couple of lines above.
         t->Data = (char**)AllocChunk(it8, ((cmsUInt32Number)t->nSamples + 1) * ((cmsUInt32Number)t->nPatches + 1) * sizeof(char*));
         if (t->Data == NULL) {
 
             SynError(it8, "AllocateDataSet: Unable to allocate data array");
+            return FALSE;
         }
     }
 
+    return TRUE;
 }
 
 static
@@ -1659,28 +1676,29 @@ static
 cmsBool SetData(cmsIT8* it8, int nSet, int nField, const char *Val)
 {
     TABLE* t = GetTable(it8);
 
-    if (!t->Data)
-        AllocateDataSet(it8);
+    if (!t->Data) {
+        if (!AllocateDataSet(it8)) return FALSE;
+    }
 
     if (!t->Data) return FALSE;
 
     if (nSet > t -> nPatches || nSet < 0) {
 
             return SynError(it8, "Patch %d out of range, there are %d patches", nSet, t -> nPatches);
     }
 
     if (nField > t ->nSamples || nField < 0) {
             return SynError(it8, "Sample %d out of range, there are %d samples", nField, t ->nSamples);
 
     }
 
     t->Data [nSet * t -> nSamples + nField] = AllocString(it8, Val);
     return TRUE;
 }
 
 
 // --------------------------------------------------------------- File I/O
 
 
 // Writes a string to file
@@ -1997,64 +2015,65 @@ static
 cmsBool DataSection (cmsIT8* it8)
 {
     int  iField = 0;
     int  iSet   = 0;
     char Buffer[256];
     TABLE* t = GetTable(it8);
 
     InSymbol(it8);   // Eats "BEGIN_DATA"
     CheckEOLN(it8);
 
-    if (!t->Data)
-        AllocateDataSet(it8);
+    if (!t->Data) {
+        if (!AllocateDataSet(it8)) return FALSE;
+    }
 
     while (it8->sy != SEND_DATA && it8->sy != SEOF)
     {
         if (iField >= t -> nSamples) {
             iField = 0;
             iSet++;
 
         }
 
         if (it8->sy != SEND_DATA && it8->sy != SEOF) {
 
             switch (it8->sy)
             {
 
             // To keep very long data
             case SIDENT:  
                 if (!SetData(it8, iSet, iField, StringPtr(it8->id)))
                     return FALSE;
                 break;
 
             case SSTRING:
                 if (!SetData(it8, iSet, iField, StringPtr(it8->str)))
                     return FALSE;
                 break;
 
             default:
 
             if (!GetVal(it8, Buffer, 255, "Sample data expected"))
                 return FALSE;
 
             if (!SetData(it8, iSet, iField, Buffer))
                 return FALSE;
             }
 
             iField++;
 
             InSymbol(it8);
             SkipEOLN(it8);
         }
     }
 
     SkipEOLN(it8);
     Skip(it8, SEND_DATA);
     SkipEOLN(it8);
 
     // Check for data completion.
 
     if ((iSet+1) != t -> nPatches)
         return SynError(it8, "Count mismatch. NUMBER_OF_SETS was %d, found %d\n", t ->nPatches, iSet+1);
 
     return TRUE;
 }
@@ -2279,82 +2298,82 @@ static
 void CookPointers(cmsIT8* it8)
 {
     int idField, i;
     char* Fld;
     cmsUInt32Number j;
     cmsUInt32Number nOldTable = it8 ->nTable;
 
     for (j=0; j < it8 ->TablesCount; j++) {
 
     TABLE* t = it8 ->Tab + j;
 
     t -> SampleID = 0;
     it8 ->nTable = j;
 
     for (idField = 0; idField < t -> nSamples; idField++)
     {
         if (t ->DataFormat == NULL){
             SynError(it8, "Undefined DATA_FORMAT");
             return;
         }
 
         Fld = t->DataFormat[idField];
         if (!Fld) continue;
 
 
         if (cmsstrcasecmp(Fld, "SAMPLE_ID") == 0) {
 
             t -> SampleID = idField;            
         }
 
         // "LABEL" is an extension. It keeps references to forward tables
 
         if ((cmsstrcasecmp(Fld, "LABEL") == 0) || Fld[0] == '$') {
 
             // Search for table references...
             for (i = 0; i < t->nPatches; i++) {
 
                 char* Label = GetData(it8, i, idField);
 
                 if (Label) {
 
                     cmsUInt32Number k;
 
                     // This is the label, search for a table containing
                     // this property
 
                     for (k = 0; k < it8->TablesCount; k++) {
 
                         TABLE* Table = it8->Tab + k;
                         KEYVALUE* p;
 
                         if (IsAvailableOnList(Table->HeaderList, Label, NULL, &p)) {
 
                             // Available, keep type and table
                             char Buffer[256];
 
                             char* Type = p->Value;
                             int  nTable = (int)k;
 
                             snprintf(Buffer, 255, "%s %d %s", Label, nTable, Type);
 
                             SetData(it8, i, idField, Buffer);
-                        }
-                    }
+						}
+					}
 
 
-                }
+				}
 
-            }
+			}
 
 
-        }
+		}
 
-    }
-    }
+	}
+	}
 
     it8 ->nTable = nOldTable;
 }
 
 // Try to infere if the file is a CGATS/IT8 file at all. Read first line
 // that should be something like some printable characters plus a \n
 // returns 0 if this is not like a CGATS, or an integer otherwise. This integer is the number of words in first line?
@@ -2764,40 +2783,44 @@ cmsFloat64Number CMSEXPORT cmsIT8GetDataDbl(cmsHANDLE  it8, const char* cPatch,
 cmsBool CMSEXPORT cmsIT8SetData(cmsHANDLE hIT8, const char* cPatch, const char* cSample, const char *Val)
 {
     cmsIT8* it8 = (cmsIT8*) hIT8;
     int iField, iSet;
     TABLE* t;
 
     _cmsAssert(hIT8 != NULL);
 
     t = GetTable(it8);
 
     iField = LocateSample(it8, cSample);
 
     if (iField < 0)
         return FALSE;
 
     if (t-> nPatches == 0) {
 
-        AllocateDataFormat(it8);
-        AllocateDataSet(it8);
+        if (!AllocateDataFormat(it8))
+            return FALSE;
+
+        if (!AllocateDataSet(it8))
+            return FALSE;
+
         CookPointers(it8);
     }
 
     if (cmsstrcasecmp(cSample, "SAMPLE_ID") == 0) {
 
         iSet   = LocateEmptyPatch(it8);
         if (iSet < 0) {
             return SynError(it8, "Couldn't add more patches '%s'\n", cPatch);
         }
 
         iField = t -> SampleID;
     }
     else {
         iSet = LocatePatch(it8, cPatch);
         if (iSet < 0) {
             return FALSE;
         }
     }
 
     return SetData(it8, iSet, iField, Val);
 }
