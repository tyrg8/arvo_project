commit 05d1c66aaae2b1ce3eaac7d241f24be121fddb39
Author: James Carter <jwcart2@gmail.com>
Date:   Fri Aug 27 10:12:42 2021 -0400

    libsepol/cil: Properly check for parameter when inserting name
    
    File names for typetransition rules are stored in their own datums.
    This allows them to be passed as a parameter, but there needs to be
    a check in __cil_insert_name() so that parameter names are not
    mistaken for file name strings. This check did not verify that a
    matching parameter name had the flavor of CIL_NAME.
    
    Check that the parameter flavor is CIL_NAME and that the paramter
    name matches the file name to be stored in the datum.
    
    This bug was found by the secilc-fuzzer.
    
    Signed-off-by: James Carter <jwcart2@gmail.com>

diff --git a/libsepol/cil/src/cil_resolve_ast.c b/libsepol/cil/src/cil_resolve_ast.c
index 18007324..a4de1c75 100644
--- a/libsepol/cil/src/cil_resolve_ast.c
+++ b/libsepol/cil/src/cil_resolve_ast.c
@@ -69,41 +69,42 @@ struct cil_args_resolve {
 static struct cil_name * __cil_insert_name(struct cil_db *db, hashtab_key_t key, struct cil_tree_node *ast_node)
 {
 	/* Currently only used for typetransition file names.
 	   But could be used for any string that is passed as a parameter.
 	*/
 	struct cil_tree_node *parent = ast_node->parent;
 	struct cil_macro *macro = NULL;
 	struct cil_name *name;
 	symtab_t *symtab;
 	enum cil_sym_index sym_index;
 	struct cil_symtab_datum *datum = NULL;
 
 	if (parent->flavor == CIL_CALL) {
 		struct cil_call *call = parent->data;
 		macro = call->macro;	
 	} else if (parent->flavor == CIL_MACRO) {
 		macro = parent->data;
 	}
 	if (macro != NULL && macro->params != NULL) {
 		struct cil_list_item *item;
 		cil_list_for_each(item, macro->params) {
-			if (((struct cil_param*)item->data)->str == key) {
+			struct cil_param *param = item->data;
+			if (param->flavor == CIL_NAME && param->str == key) {
 				return NULL;
 			}
 		}
 	}
 
 	cil_flavor_to_symtab_index(CIL_NAME, &sym_index);
 	symtab = &((struct cil_root *)db->ast->root->data)->symtab[sym_index];
 
 	cil_symtab_get_datum(symtab, key, &datum);
 	if (datum != NULL) {
 		return (struct cil_name *)datum;
 	}
 
 	cil_name_init(&name);
 	cil_symtab_insert(symtab, key, (struct cil_symtab_datum *)name, ast_node);
 	cil_list_append(db->names, CIL_NAME, name);
 
 	return name;
 }
