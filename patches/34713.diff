commit cfef249041313a0b6a5229fca4a414aa8c053fa8
Author: Guido Vranken <guidovranken@gmail.com>
Date:   Wed May 26 20:15:32 2021 +0200

    Several ASN decoder fixes
    
    See ZD 12349

diff --git a/wolfcrypt/src/asn.c b/wolfcrypt/src/asn.c
index 51ef95c16..81e3eeeec 100644
--- a/wolfcrypt/src/asn.c
+++ b/wolfcrypt/src/asn.c
@@ -17184,139 +17184,143 @@ static int GetEnumerated(const byte* input, word32* inOutIdx, int *value,
 static int DecodeSingleResponse(byte* source, word32* ioIndex, word32 size,
                                 int wrapperSz, OcspEntry* single)
 {
     word32 idx = *ioIndex, prevIndex, oid, localIdx, certIdIdx;
     int length;
     int ret;
     byte tag;
 
     WOLFSSL_ENTER("DecodeSingleResponse");
 
     prevIndex = idx;
 
     /* Wrapper around the Single Response */
     if (GetSequence(source, &idx, &length, size) < 0)
         return ASN_PARSE_E;
 
     /* Wrapper around the CertID */
     certIdIdx = idx;
     if (GetSequence(source, &idx, &length, size) < 0)
         return ASN_PARSE_E;
     single->rawCertId = source + certIdIdx;
     /* Hash algorithm */
     ret = GetAlgoId(source, &idx, &oid, oidIgnoreType, size);
     if (ret < 0)
         return ret;
     single->hashAlgoOID = oid;
     /* Save reference to the hash of CN */
     ret = GetOctetString(source, &idx, &length, size);
     if (ret < 0)
         return ret;
+    if (length > (int)sizeof(single->issuerHash))
+        return BUFFER_E;
     XMEMCPY(single->issuerHash, source + idx, length);
     idx += length;
     /* Save reference to the hash of the issuer public key */
     ret = GetOctetString(source, &idx, &length, size);
     if (ret < 0)
         return ret;
+    if (length > (int)sizeof(single->issuerKeyHash))
+        return BUFFER_E;
     XMEMCPY(single->issuerKeyHash, source + idx, length);
     idx += length;
 
     /* Get serial number */
     if (GetSerialNumber(source, &idx, single->status->serial, &single->status->serialSz, size) < 0)
         return ASN_PARSE_E;
     single->rawCertIdSize = idx - certIdIdx;
 
     if (idx >= size)
         return BUFFER_E;
 
     /* CertStatus */
     switch (source[idx++])
     {
         case (ASN_CONTEXT_SPECIFIC | CERT_GOOD):
             single->status->status = CERT_GOOD;
             idx++;
             break;
         case (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | CERT_REVOKED):
             single->status->status = CERT_REVOKED;
             if (GetLength(source, &idx, &length, size) < 0)
                 return ASN_PARSE_E;
             idx += length;
             break;
         case (ASN_CONTEXT_SPECIFIC | CERT_UNKNOWN):
             single->status->status = CERT_UNKNOWN;
             idx++;
             break;
         default:
             return ASN_PARSE_E;
     }
 
 #if defined(OPENSSL_ALL) || defined(WOLFSSL_NGINX) || defined(WOLFSSL_HAPROXY)
     single->status->thisDateAsn = source + idx;
     localIdx = 0;
     if (GetDateInfo(single->status->thisDateAsn, &localIdx, NULL,
                     (byte*)&single->status->thisDateParsed.type,
                     &single->status->thisDateParsed.length, size) < 0)
         return ASN_PARSE_E;
     XMEMCPY(single->status->thisDateParsed.data,
             single->status->thisDateAsn + localIdx - single->status->thisDateParsed.length,
             single->status->thisDateParsed.length);
 #endif
     if (GetBasicDate(source, &idx, single->status->thisDate,
                                                 &single->status->thisDateFormat, size) < 0)
         return ASN_PARSE_E;
 
 #ifndef NO_ASN_TIME
 #ifndef WOLFSSL_NO_OCSP_DATE_CHECK
     if (!XVALIDATE_DATE(single->status->thisDate, single->status->thisDateFormat, BEFORE))
         return ASN_BEFORE_DATE_E;
 #endif
 #endif
 
     /* The following items are optional. Only check for them if there is more
      * unprocessed data in the singleResponse wrapper. */
     localIdx = idx;
     if (((int)(idx - prevIndex) < wrapperSz) &&
         GetASNTag(source, &localIdx, &tag, size) == 0 &&
         tag == (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC | 0))
     {
         idx++;
         if (GetLength(source, &idx, &length, size) < 0)
             return ASN_PARSE_E;
 #if defined(OPENSSL_ALL) || defined(WOLFSSL_NGINX) || defined(WOLFSSL_HAPROXY)
         single->status->nextDateAsn = source + idx;
         localIdx = 0;
         if (GetDateInfo(single->status->nextDateAsn, &localIdx, NULL,
                         (byte*)&single->status->nextDateParsed.type,
                         &single->status->nextDateParsed.length, size) < 0)
             return ASN_PARSE_E;
         XMEMCPY(single->status->nextDateParsed.data,
                 single->status->nextDateAsn + localIdx - single->status->nextDateParsed.length,
                 single->status->nextDateParsed.length);
 #endif
         if (GetBasicDate(source, &idx, single->status->nextDate,
                                                 &single->status->nextDateFormat, size) < 0)
             return ASN_PARSE_E;
 
 #ifndef NO_ASN_TIME
 #ifndef WOLFSSL_NO_OCSP_DATE_CHECK
         if (!XVALIDATE_DATE(single->status->nextDate, single->status->nextDateFormat, AFTER))
             return ASN_AFTER_DATE_E;
 #endif
 #endif
     }
 
     /* Skip the optional extensions in singleResponse. */
     localIdx = idx;
     if (((int)(idx - prevIndex) < wrapperSz) &&
         GetASNTag(source, &localIdx, &tag, size) == 0 &&
         tag == (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC | 1))
     {
         idx++;
         if (GetLength(source, &idx, &length, size) < 0)
             return ASN_PARSE_E;
         idx += length;
     }
 
     *ioIndex = idx;
 
     return 0;
 }
@@ -17403,88 +17407,90 @@ static int DecodeOcspRespExtensions(byte* source,
 static int DecodeResponseData(byte* source,
                             word32* ioIndex, OcspResponse* resp, word32 size)
 {
     word32 idx = *ioIndex, prev_idx, localIdx;
     int length;
     int version;
     int ret;
     byte tag;
     int wrapperSz;
     OcspEntry* single;
 
     WOLFSSL_ENTER("DecodeResponseData");
 
     resp->response = source + idx;
     prev_idx = idx;
     if (GetSequence(source, &idx, &length, size) < 0)
         return ASN_PARSE_E;
     resp->responseSz = length + idx - prev_idx;
 
     /* Get version. It is an EXPLICIT[0] DEFAULT(0) value. If this
      * item isn't an EXPLICIT[0], then set version to zero and move
      * onto the next item.
      */
     localIdx = idx;
     if (GetASNTag(source, &localIdx, &tag, size) == 0 &&
             tag == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED))
     {
         idx += 2; /* Eat the value and length */
         if (GetMyVersion(source, &idx, &version, size) < 0)
             return ASN_PARSE_E;
     } else
         version = 0;
 
     localIdx = idx;
     if (GetASNTag(source, &localIdx, &tag, size) == 0 &&
         ( tag == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | 1) ||
           tag == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | 2) ))
     {
         idx++; /* advance past ASN tag */
         if (GetLength(source, &idx, &length, size) < 0)
             return ASN_PARSE_E;
         idx += length;
     }
     else
         return ASN_PARSE_E;
 
     /* save pointer to the producedAt time */
     if (GetBasicDate(source, &idx, resp->producedDate,
                                         &resp->producedDateFormat, size) < 0)
         return ASN_PARSE_E;
 
     /* Outer wrapper of the SEQUENCE OF Single Responses. */
     if (GetSequence(source, &idx, &wrapperSz, size) < 0)
         return ASN_PARSE_E;
 
     localIdx = idx;
     single = resp->single;
 
     while (idx - localIdx < (word32)wrapperSz) {
         ret = DecodeSingleResponse(source, &idx, size, wrapperSz, single);
         if (ret < 0)
             return ret; /* ASN_PARSE_E, ASN_BEFORE_DATE_E, ASN_AFTER_DATE_E */
         if (idx - localIdx < (word32)wrapperSz) {
             single->next = (OcspEntry*)XMALLOC(sizeof(OcspEntry), resp->heap, 
                 DYNAMIC_TYPE_OCSP_ENTRY);
             if (single->next == NULL) {
                 return MEMORY_E;
             }
+            CertStatus* status = single->status;
             single = single->next;
             XMEMSET(single, 0, sizeof(OcspEntry));
+            single->status = status;
             single->isDynamic = 1;
         }
     }
 
     /*
      * Check the length of the ResponseData against the current index to
      * see if there are extensions, they are optional.
      */
     if (idx - prev_idx < resp->responseSz)
         if (DecodeOcspRespExtensions(source, &idx, resp, size) < 0)
             return ASN_PARSE_E;
 
     *ioIndex = idx;
     return 0;
 }
 
 
 #ifndef WOLFSSL_NO_OCSP_OPTIONAL_CERTS
