commit f1fb7816a60c7c68d7ac037975c5aa95b6dcf8dd
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Thu Mar 1 07:25:49 2018 -0500

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6616

diff --git a/MagickCore/property.c b/MagickCore/property.c
index ac3494c15..66470643a 100644
--- a/MagickCore/property.c
+++ b/MagickCore/property.c
@@ -2247,556 +2247,557 @@ MagickExport const char *GetImageProperty(const Image *image,
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
   p=(const char *) NULL;
   if (image->properties != (void *) NULL)
     {
       if (property == (const char *) NULL)
         return((const char *) GetRootValueFromSplayTree((SplayTreeInfo *)
           image->properties));
       p=(const char *) GetValueFromSplayTree((SplayTreeInfo *)
         image->properties,property);
       if (p != (const char *) NULL)
         return(p);
     }
   if ((property == (const char *) NULL) ||
       (strchr(property,':') == (char *) NULL))
     return(p);
   switch (*property)
   {
     case '8':
     {
       if (LocaleNCompare("8bim:",property,5) == 0)
         {
           (void) Get8BIMProperty(image,property,exception);
           break;
         }
       break;
     }
     case 'E':
     case 'e':
     {
       if (LocaleNCompare("exif:",property,5) == 0)
         {
           (void) GetEXIFProperty(image,property,exception);
           break;
         }
       break;
     }
     case 'I':
     case 'i':
     {
       if ((LocaleNCompare("icc:",property,4) == 0) ||
           (LocaleNCompare("icm:",property,4) == 0))
         {
           (void) GetICCProperty(image,property,exception);
           break;
         }
       if (LocaleNCompare("iptc:",property,5) == 0)
         {
           (void) GetIPTCProperty(image,property,exception);
           break;
         }
       break;
     }
     case 'X':
     case 'x':
     {
       if (LocaleNCompare("xmp:",property,4) == 0)
         {
           (void) GetXMPProperty(image,property);
           break;
         }
       break;
     }
     default:
       break;
   }
   if (image->properties != (void *) NULL)
     {
       p=(const char *) GetValueFromSplayTree((SplayTreeInfo *)
         image->properties,property);
       return(p);
     }
   return((const char *) NULL);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +   G e t M a g i c k P r o p e r t y                                         %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  GetMagickProperty() gets attributes or calculated values that is associated
 %  with a fixed known property name, or single letter property. It may be
 %  called if no image is defined (IMv7), in which case only global image_info
 %  values are available:
 %
 %    \n   newline
 %    \r   carriage return
 %    <    less-than character.
 %    >    greater-than character.
 %    &    ampersand character.
 %    %%   a percent sign
 %    %b   file size of image read in
 %    %c   comment meta-data property
 %    %d   directory component of path
 %    %e   filename extension or suffix
 %    %f   filename (including suffix)
 %    %g   layer canvas page geometry   (equivalent to "%Wx%H%X%Y")
 %    %h   current image height in pixels
 %    %i   image filename (note: becomes output filename for "info:")
 %    %k   CALCULATED: number of unique colors
 %    %l   label meta-data property
 %    %m   image file format (file magic)
 %    %n   number of images in current image sequence
 %    %o   output filename  (used for delegates)
 %    %p   index of image in current image list
 %    %q   quantum depth (compile-time constant)
 %    %r   image class and colorspace
 %    %s   scene number (from input unless re-assigned)
 %    %t   filename without directory or extension (suffix)
 %    %u   unique temporary filename (used for delegates)
 %    %w   current width in pixels
 %    %x   x resolution (density)
 %    %y   y resolution (density)
 %    %z   image depth (as read in unless modified, image save depth)
 %    %A   image transparency channel enabled (true/false)
 %    %C   image compression type
 %    %D   image GIF dispose method
 %    %G   original image size (%wx%h; before any resizes)
 %    %H   page (canvas) height
 %    %M   Magick filename (original file exactly as given,  including read mods)
 %    %O   page (canvas) offset ( = %X%Y )
 %    %P   page (canvas) size ( = %Wx%H )
 %    %Q   image compression quality ( 0 = default )
 %    %S   ?? scenes ??
 %    %T   image time delay (in centi-seconds)
 %    %U   image resolution units
 %    %W   page (canvas) width
 %    %X   page (canvas) x offset (including sign)
 %    %Y   page (canvas) y offset (including sign)
 %    %Z   unique filename (used for delegates)
 %    %@   CALCULATED: trim bounding box (without actually trimming)
 %    %#   CALCULATED: 'signature' hash of image values
 %
 %  This routine only handles specifically known properties.  It does not
 %  handle special prefixed properties, profiles, or expressions. Nor does
 %  it return any free-form property strings.
 %
 %  The returned string is stored in a structure somewhere, and should not be
 %  directly freed.  If the string was generated (common) the string will be
 %  stored as as either as artifact or option 'get-property'.  These may be
 %  deleted (cleaned up) when no longer required, but neither artifact or
 %  option is guranteed to exist.
 %
 %  The format of the GetMagickProperty method is:
 %
 %      const char *GetMagickProperty(ImageInfo *image_info,Image *image,
 %        const char *property,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image_info: the image info (optional)
 %
 %    o image: the image (optional)
 %
 %    o key: the key.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 static const char *GetMagickPropertyLetter(ImageInfo *image_info,
   Image *image,const char letter,ExceptionInfo *exception)
 {
 #define WarnNoImageReturn(format,arg) \
   if (image == (Image *) NULL ) { \
     (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning, \
       "NoImageForProperty",format,arg); \
     return((const char *) NULL); \
   }
 #define WarnNoImageInfoReturn(format,arg) \
   if (image_info == (ImageInfo *) NULL ) { \
     (void) ThrowMagickException(exception,GetMagickModule(),OptionWarning, \
       "NoImageInfoForProperty",format,arg); \
     return((const char *) NULL); \
   }
 
   char
     value[MagickPathExtent];  /* formatted string to store as an artifact */
 
   const char
     *string;     /* return a string already stored somewher */
 
   if ((image != (Image *) NULL) && (image->debug != MagickFalse))
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
   else
     if ((image_info != (ImageInfo *) NULL) &&
         (image_info->debug != MagickFalse))
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s","no-images");
   *value='\0';           /* formatted string */
   string=(char *) NULL;  /* constant string reference */
   /*
     Get properities that are directly defined by images.
   */
   switch (letter)
   {
     case 'b':  /* image size read in - in bytes */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatMagickSize(image->extent,MagickFalse,"B",MagickPathExtent,
         value);
       if (image->extent == 0)
         (void) FormatMagickSize(GetBlobSize(image),MagickFalse,"B",
           MagickPathExtent,value);
       break;
     }
     case 'c':  /* image comment property - empty string by default */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       string=GetImageProperty(image,"comment",exception);
       if ( string == (const char *) NULL )
         string="";
       break;
     }
     case 'd':  /* Directory component of filename */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       GetPathComponent(image->magick_filename,HeadPath,value);
       if (*value == '\0')
         string="";
       break;
     }
     case 'e': /* Filename extension (suffix) of image file */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       GetPathComponent(image->magick_filename,ExtensionPath,value);
       if (*value == '\0')
         string="";
       break;
     }
     case 'f': /* Filename without directory component */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       GetPathComponent(image->magick_filename,TailPath,value);
       if (*value == '\0')
         string="";
       break;
     }
     case 'g': /* Image geometry, canvas and offset  %Wx%H+%X+%Y */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,
         "%.20gx%.20g%+.20g%+.20g",(double) image->page.width,(double)
         image->page.height,(double) image->page.x,(double) image->page.y);
       break;
     }
     case 'h': /* Image height (current) */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
         (image->rows != 0 ? image->rows : image->magick_rows));
       break;
     }
     case 'i': /* Filename last used for an image (read or write) */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       string=image->filename;
       break;
     }
     case 'k': /* Number of unique colors  */
     {
       /*
         FUTURE: ensure this does not generate the formatted comment!
       */
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
         GetNumberColors(image,(FILE *) NULL,exception));
       break;
     }
     case 'l': /* Image label property - empty string by default */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       string=GetImageProperty(image,"label",exception);
       if (string == (const char *) NULL)
         string="";
       break;
     }
     case 'm': /* Image format (file magick) */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       string=image->magick;
       break;
     }
     case 'n': /* Number of images in the list.  */
     {
       if ( image != (Image *) NULL )
         (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
           GetImageListLength(image));
       else
         string="0";    /* no images or scenes */
       break;
     }
     case 'o': /* Output Filename - for delegate use only */
       WarnNoImageInfoReturn("\"%%%c\"",letter);
       string=image_info->filename;
       break;
     case 'p': /* Image index in current image list */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
         GetImageIndexInList(image));
       break;
     }
     case 'q': /* Quantum depth of image in memory */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
         MAGICKCORE_QUANTUM_DEPTH);
       break;
     }
     case 'r': /* Image storage class, colorspace, and alpha enabled.  */
     {
       ColorspaceType
         colorspace;
 
       WarnNoImageReturn("\"%%%c\"",letter);
       colorspace=image->colorspace;
       if ((image->columns != 0) && (image->rows != 0) &&
           (SetImageGray(image,exception) != MagickFalse))
         colorspace=GRAYColorspace;   /* FUTURE: this is IMv6 not IMv7 */
       (void) FormatLocaleString(value,MagickPathExtent,"%s %s %s",
         CommandOptionToMnemonic(MagickClassOptions,(ssize_t)
         image->storage_class),CommandOptionToMnemonic(MagickColorspaceOptions,
         (ssize_t) colorspace),image->alpha_trait != UndefinedPixelTrait ?
         "Alpha" : "");
       break;
     }
     case 's': /* Image scene number */
     {
 #if 0  /* this seems non-sensical -- simplifing */
       if (image_info->number_scenes != 0)
         (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
           image_info->scene);
       else if (image != (Image *) NULL)
         (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
           image->scene);
       else
           string="0";
 #else
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
          image->scene);
 #endif
       break;
     }
     case 't': /* Base filename without directory or extention */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       GetPathComponent(image->magick_filename,BasePath,value);
       if (*value == '\0')
         string="";
       break;
     }
     case 'u': /* Unique filename */
     {
       WarnNoImageInfoReturn("\"%%%c\"",letter);
       string=image_info->unique;
       break;
     }
     case 'w': /* Image width (current) */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
         (image->columns != 0 ? image->columns : image->magick_columns));
       break;
     }
     case 'x': /* Image horizontal resolution (with units) */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20g",
         fabs(image->resolution.x) > MagickEpsilon ? image->resolution.x : 72.0);
       break;
     }
     case 'y': /* Image vertical resolution (with units) */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20g",
         fabs(image->resolution.y) > MagickEpsilon ? image->resolution.y : 72.0);
       break;
     }
     case 'z': /* Image depth as read in */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
         image->depth);
       break;
     }
     case 'A': /* Image alpha channel  */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       string=CommandOptionToMnemonic(MagickPixelTraitOptions,(ssize_t)
         image->alpha_trait);
       break;
     }
     case 'C': /* Image compression method.  */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       string=CommandOptionToMnemonic(MagickCompressOptions,(ssize_t)
         image->compression);
       break;
     }
     case 'D': /* Image dispose method.  */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       string=CommandOptionToMnemonic(MagickDisposeOptions,(ssize_t)
         image->dispose);
       break;
     }
     case 'G': /* Image size as geometry = "%wx%h" */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20gx%.20g",(double)
         image->magick_columns,(double) image->magick_rows);
       break;
     }
     case 'H': /* layer canvas height */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
         image->page.height);
       break;
     }
     case 'M': /* Magick filename - filename given incl. coder & read mods */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       string=image->magick_filename;
       break;
     }
     case 'O': /* layer canvas offset with sign = "+%X+%Y" */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%+ld%+ld",(long)
         image->page.x,(long) image->page.y);
       break;
     }
     case 'P': /* layer canvas page size = "%Wx%H" */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20gx%.20g",(double)
         image->page.width,(double) image->page.height);
       break;
     }
     case 'Q': /* image compression quality */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
         (image->quality == 0 ? 92 : image->quality));
       break;
     }
     case 'S': /* Number of scenes in image list.  */
     {
       WarnNoImageInfoReturn("\"%%%c\"",letter);
 #if 0 /* What is this number? -- it makes no sense - simplifing */
       if (image_info->number_scenes == 0)
          string="2147483647";
       else if ( image != (Image *) NULL )
         (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
                 image_info->scene+image_info->number_scenes);
       else
         string="0";
 #else
       (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
         (image_info->number_scenes == 0 ? 2147483647 :
          image_info->number_scenes));
 #endif
       break;
     }
     case 'T': /* image time delay for animations */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
         image->delay);
       break;
     }
     case 'U': /* Image resolution units. */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       string=CommandOptionToMnemonic(MagickResolutionOptions,(ssize_t)
         image->units);
       break;
     }
     case 'W': /* layer canvas width */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
         image->page.width);
       break;
     }
     case 'X': /* layer canvas X offset */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%+.20g",(double)
         image->page.x);
       break;
     }
     case 'Y': /* layer canvas Y offset */
     {
       WarnNoImageReturn("\"%%%c\"",letter);
       (void) FormatLocaleString(value,MagickPathExtent,"%+.20g",(double)
         image->page.y);
       break;
     }
     case '%': /* percent escaped */
     {
       string="%";
       break;
     }
     case '@': /* Trim bounding box, without actually Trimming! */
     {
       RectangleInfo
         page;
 
       WarnNoImageReturn("\"%%%c\"",letter);
       page=GetImageBoundingBox(image,exception);
       (void) FormatLocaleString(value,MagickPathExtent,
         "%.20gx%.20g%+.20g%+.20g",(double) page.width,(double) page.height,
         (double) page.x,(double)page.y);
       break;
     }
     case '#':
     {
       /*
         Image signature.
       */
       WarnNoImageReturn("\"%%%c\"",letter);
-      (void) SignatureImage(image,exception);
+      if ((image->columns != 0) && (image->rows != 0))
+        (void) SignatureImage(image,exception);
       string=GetImageProperty(image,"signature",exception);
       break;
     }
   }
   if (string != (char *) NULL)
     return(string);
   if (*value != '\0')
     {
       /*
         Create a cloned copy of result.
       */
       if (image != (Image *) NULL)
         {
           (void) SetImageArtifact(image,"get-property",value);
           return(GetImageArtifact(image,"get-property"));
         }
       else
         {
           (void) SetImageOption(image_info,"get-property",value);
           return(GetImageOption(image_info,"get-property"));
         }
     }
   return((char *) NULL);
 }
diff --git a/coders/label.c b/coders/label.c
index e4b9b707d..4ae206b28 100644
--- a/coders/label.c
+++ b/coders/label.c
@@ -1,288 +1,290 @@
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %                     L       AAA   BBBB   EEEEE  L                           %
 %                     L      A   A  B   B  E      L                           %
 %                     L      AAAAA  BBBB   EEE    L                           %
 %                     L      A   A  B   B  E      L                           %
 %                     LLLLL  A   A  BBBB   EEEEE  LLLLL                       %
 %                                                                             %
 %                                                                             %
 %                      Read ASCII String As An Image.                         %
 %                                                                             %
 %                              Software Design                                %
 %                                   Cristy                                    %
 %                                 July 1992                                   %
 %                                                                             %
 %                                                                             %
 %  Copyright 1999-2018 ImageMagick Studio LLC, a non-profit organization      %
 %  dedicated to making software imaging solutions freely available.           %
 %                                                                             %
 %  You may not use this file except in compliance with the License.  You may  %
 %  obtain a copy of the License at                                            %
 %                                                                             %
 %    https://www.imagemagick.org/script/license.php                           %
 %                                                                             %
 %  Unless required by applicable law or agreed to in writing, software        %
 %  distributed under the License is distributed on an "AS IS" BASIS,          %
 %  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   %
 %  See the License for the specific language governing permissions and        %
 %  limitations under the License.                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %
 */
 
 /*
   Include declarations.
 */
 #include "MagickCore/studio.h"
 #include "MagickCore/annotate.h"
 #include "MagickCore/artifact.h"
 #include "MagickCore/blob.h"
 #include "MagickCore/blob-private.h"
 #include "MagickCore/draw.h"
 #include "MagickCore/exception.h"
 #include "MagickCore/exception-private.h"
 #include "MagickCore/image.h"
 #include "MagickCore/image-private.h"
 #include "MagickCore/list.h"
 #include "MagickCore/magick.h"
 #include "MagickCore/memory_.h"
 #include "MagickCore/property.h"
 #include "MagickCore/quantum-private.h"
 #include "MagickCore/static.h"
 #include "MagickCore/string_.h"
 #include "MagickCore/module.h"
 #include "MagickCore/utility.h"
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   R e a d L A B E L I m a g e                                               %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ReadLABELImage() reads a LABEL image file and returns it.  It
 %  allocates the memory necessary for the new Image structure and returns a
 %  pointer to the new image.
 %
 %  The format of the ReadLABELImage method is:
 %
 %      Image *ReadLABELImage(const ImageInfo *image_info,
 %        ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image_info: the image info.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 static Image *ReadLABELImage(const ImageInfo *image_info,
   ExceptionInfo *exception)
 {
   char
     geometry[MagickPathExtent],
     *property;
 
   const char
     *label;
 
   DrawInfo
     *draw_info;
 
   Image
     *image;
 
   MagickBooleanType
     status;
 
   TypeMetric
     metrics;
 
   size_t
     height,
     width;
 
   /*
     Initialize Image structure.
   */
   assert(image_info != (const ImageInfo *) NULL);
   assert(image_info->signature == MagickCoreSignature);
   if (image_info->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",
       image_info->filename);
   assert(exception != (ExceptionInfo *) NULL);
   assert(exception->signature == MagickCoreSignature);
   image=AcquireImage(image_info,exception);
   (void) ResetImagePage(image,"0x0+0+0");
+  if ((image->columns != 0) && (image->rows != 0))
+    (void) SetImageBackgroundColor(image,exception);
   property=InterpretImageProperties((ImageInfo *) image_info,image,
     image_info->filename,exception);
   if (property == (char *) NULL)
     return(DestroyImageList(image));
   (void) SetImageProperty(image,"label",property,exception);
   property=DestroyString(property);
   label=GetImageProperty(image,"label",exception);
   draw_info=CloneDrawInfo(image_info,(DrawInfo *) NULL);
   draw_info->text=ConstantString(label);
   metrics.width=0;
   metrics.ascent=0.0;
   status=GetMultilineTypeMetrics(image,draw_info,&metrics,exception);
   if ((image->columns == 0) && (image->rows == 0))
     {
       image->columns=(size_t) floor(metrics.width+draw_info->stroke_width+0.5);
       image->rows=(size_t) floor(metrics.height+draw_info->stroke_width+0.5);
     }
   else
     if ((strlen(label) > 0) &&
         (((image->columns == 0) || (image->rows == 0)) ||
          (fabs(image_info->pointsize) < MagickEpsilon)))
       {
         double
           high,
           low;
 
         ssize_t
           n;
 
         /*
           Auto fit text into bounding box.
         */
         for (n=0; n < 32; n++, draw_info->pointsize*=2.0)
         {
           (void) FormatLocaleString(geometry,MagickPathExtent,"%+g%+g",
             -metrics.bounds.x1,metrics.ascent);
           if (draw_info->gravity == UndefinedGravity)
             (void) CloneString(&draw_info->geometry,geometry);
           status=GetMultilineTypeMetrics(image,draw_info,&metrics,exception);
           if (status == MagickFalse)
             break;
           width=(size_t) floor(metrics.width+draw_info->stroke_width+0.5);
           height=(size_t) floor(metrics.height+draw_info->stroke_width+0.5);
           if ((image->columns != 0) && (image->rows != 0))
             {
               if ((width >= image->columns) && (height >= image->rows))
                 break;
             }
           else
             if (((image->columns != 0) && (width >= image->columns)) ||
                 ((image->rows != 0) && (height >= image->rows)))
               break;
         }
         high=draw_info->pointsize;
         for (low=1.0; (high-low) > 0.5; )
         {
           draw_info->pointsize=(low+high)/2.0;
           (void) FormatLocaleString(geometry,MagickPathExtent,"%+g%+g",
             -metrics.bounds.x1,metrics.ascent);
           if (draw_info->gravity == UndefinedGravity)
             (void) CloneString(&draw_info->geometry,geometry);
           status=GetMultilineTypeMetrics(image,draw_info,&metrics,exception);
           if (status == MagickFalse)
             break;
           width=(size_t) floor(metrics.width+draw_info->stroke_width+0.5);
           height=(size_t) floor(metrics.height+draw_info->stroke_width+0.5);
           if ((image->columns != 0) && (image->rows != 0))
             {
               if ((width < image->columns) && (height < image->rows))
                 low=draw_info->pointsize+0.5;
               else
                 high=draw_info->pointsize-0.5;
             }
           else
             if (((image->columns != 0) && (width < image->columns)) ||
                 ((image->rows != 0) && (height < image->rows)))
               low=draw_info->pointsize+0.5;
             else
               high=draw_info->pointsize-0.5;
         }
         draw_info->pointsize=(low+high)/2.0-0.5;
       }
    status=GetMultilineTypeMetrics(image,draw_info,&metrics,exception);
    if (status == MagickFalse)
      {
        draw_info=DestroyDrawInfo(draw_info);
        image=DestroyImageList(image);
        return((Image *) NULL);
      }
   if (image->columns == 0)
     image->columns=(size_t) floor(metrics.width+draw_info->stroke_width+0.5);
   if (image->columns == 0)
     image->columns=(size_t) floor(draw_info->pointsize+draw_info->stroke_width+
       0.5);
   if (image->rows == 0)
     image->rows=(size_t) floor(metrics.ascent-metrics.descent+
       draw_info->stroke_width+0.5);
   if (image->rows == 0)
     image->rows=(size_t) floor(draw_info->pointsize+draw_info->stroke_width+
       0.5);
   status=SetImageExtent(image,image->columns,image->rows,exception);
   if (status == MagickFalse)
     {
       draw_info=DestroyDrawInfo(draw_info);
       return(DestroyImageList(image));
     }
   if (SetImageBackgroundColor(image,exception) == MagickFalse)
     {
       draw_info=DestroyDrawInfo(draw_info);
       image=DestroyImageList(image);
       return((Image *) NULL);
     }
   /*
     Draw label.
   */
   (void) FormatLocaleString(geometry,MagickPathExtent,"%+g%+g",
-    draw_info->direction == RightToLeftDirection ? image->columns-
+    draw_info->direction == RightToLeftDirection ? (double) image->columns-
     metrics.bounds.x2 : 0.0,draw_info->gravity == UndefinedGravity ?
     metrics.ascent : 0.0);
   (void) CloneString(&draw_info->geometry,geometry);
   status=AnnotateImage(image,draw_info,exception);
   if (image_info->pointsize == 0.0)
     {
       char
         pointsize[MagickPathExtent];
 
       (void) FormatLocaleString(pointsize,MagickPathExtent,"%.20g",
         draw_info->pointsize);
       (void) SetImageProperty(image,"label:pointsize",pointsize,exception);
     }
   draw_info=DestroyDrawInfo(draw_info);
   if (status == MagickFalse)
     {
       image=DestroyImageList(image);
       return((Image *) NULL);
     }
   return(GetFirstImageInList(image));
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   R e g i s t e r L A B E L I m a g e                                       %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  RegisterLABELImage() adds properties for the LABEL image format to
 %  the list of supported formats.  The properties include the image format
 %  tag, a method to read and/or write the format, whether the format
 %  supports the saving of more than one frame to the same file or blob,
 %  whether the format supports native in-memory I/O, and a brief
 %  description of the format.
 %
 %  The format of the RegisterLABELImage method is:
 %
 %      size_t RegisterLABELImage(void)
 %
 */
