commit 3252bc323c814eb010df011024f06597755b4b7d
Author: Albert Astals Cid <aacid@kde.org>
Date:   Sun Jan 10 20:15:39 2021 +0100

    Don't try to read xref at negative stream positions
    
    oss-fuzz/29460

diff --git a/poppler/XRef.cc b/poppler/XRef.cc
index 79cf25fc..77a6752f 100644
--- a/poppler/XRef.cc
+++ b/poppler/XRef.cc
@@ -447,59 +447,63 @@ int XRef::resize(int newSize)
 /* Read one xref table section.  Also reads the associated trailer
  * dictionary, and returns the prev pointer (if any).
  * Arguments:
  *   pos                Points to a Goffset containing the offset of the XRef
  *                      section to be read. If a prev pointer is found, *pos is
  *                      updated with its value
  *   followedXRefStm    Used in case of nested readXRef calls to spot circular
  *                      references in XRefStm pointers
  *   xrefStreamObjsNum  If not NULL, every time a XRef stream is encountered,
  *                      its object number is appended
  * Return value:
  *   true if a prev pointer is found, otherwise false
  */
 bool XRef::readXRef(Goffset *pos, std::vector<Goffset> *followedXRefStm, std::vector<int> *xrefStreamObjsNum)
 {
     Parser *parser;
     Object obj;
     bool more;
 
     Goffset parsePos;
     if (unlikely(checkedAdd(start, *pos, &parsePos))) {
         ok = false;
         return false;
     }
+    if (parsePos < 0) {
+        ok = false;
+        return false;
+    }
 
     // start up a parser, parse one token
     parser = new Parser(nullptr, str->makeSubStream(parsePos, false, 0, Object(objNull)), true);
     obj = parser->getObj(true);
 
     // parse an old-style xref table
     if (obj.isCmd("xref")) {
         more = readXRefTable(parser, pos, followedXRefStm, xrefStreamObjsNum);
 
         // parse an xref stream
     } else if (obj.isInt()) {
         const int objNum = obj.getInt();
         if (obj = parser->getObj(true), !obj.isInt()) {
             goto err1;
         }
         if (obj = parser->getObj(true), !obj.isCmd("obj")) {
             goto err1;
         }
         if (obj = parser->getObj(), !obj.isStream()) {
             goto err1;
         }
         if (trailerDict.isNone()) {
             xRefStream = true;
         }
         if (xrefStreamObjsNum) {
             xrefStreamObjsNum->push_back(objNum);
         }
         more = readXRefStream(obj.getStream(), pos);
 
     } else {
         goto err1;
     }
 
     delete parser;
     return more;
