commit 238b783a0e267201ef8d0d79dc5fd21423f3316d
Author: Jakub Jelen <jjelen@redhat.com>
Date:   Mon Aug 31 18:41:51 2020 +0200

    card-asepcos: Fix heap-buffer overflow
    
    Thanks oss-fuzz
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=24940

diff --git a/src/libopensc/card-asepcos.c b/src/libopensc/card-asepcos.c
index 6d45acd0..f40b96d5 100644
--- a/src/libopensc/card-asepcos.c
+++ b/src/libopensc/card-asepcos.c
@@ -163,57 +163,57 @@ static int set_sec_attr(sc_file_t *file, unsigned int am, unsigned int ac,
 /* Convert asepcos security attributes to opensc access conditions.
  */
 static int asepcos_parse_sec_attr(sc_card_t *card, sc_file_t *file, const u8 *buf,
 	size_t len)
 {
 	const u8 *p = buf;
 
 	while (len > 0) {
 		unsigned int amode, tlen = 3;
 		if (len < 5 || p[0] != 0x80 || p[1] != 0x01) {
 			sc_log(card->ctx,  "invalid access mode encoding");
 			return SC_ERROR_INTERNAL;
 		}
 		amode = p[2];
 		if (p[3] == 0x90 && p[4] == 0x00) {
 			int r = set_sec_attr(file, amode, 0, SC_AC_NONE);
 			if (r != SC_SUCCESS) 
 				return r;
 			tlen += 2;
 		} else if (p[3] == 0x97 && p[4] == 0x00) {
 			int r = set_sec_attr(file, amode, 0, SC_AC_NEVER);
 			if (r != SC_SUCCESS) 
 				return r;
 			tlen += 2;
-		} else if (p[3] == 0xA0 && len >= 4U + p[4]) {
+		} else if (p[3] == 0xA0 && len >= 5U + p[4]) {
 			if (len < 6) {
 				sc_log(card->ctx,  "invalid access mode encoding");
 				return SC_ERROR_INTERNAL;
 			}
 			/* TODO: support OR expressions */
 			int r = set_sec_attr(file, amode, p[5], SC_AC_CHV);
 			if (r != SC_SUCCESS)
 				return r;
 			tlen += 2 + p[4]; /* FIXME */
-		} else if (p[3] == 0xAF && len >= 4U + p[4]) {
+		} else if (p[3] == 0xAF && len >= 5U + p[4]) {
 			if (len < 6) {
 				sc_log(card->ctx,  "invalid access mode encoding");
 				return SC_ERROR_INTERNAL;
 			}
 			/* TODO: support AND expressions */
 			int r = set_sec_attr(file, amode, p[5], SC_AC_CHV);
 			if (r != SC_SUCCESS)
 				return r;
 			tlen += 2 + p[4];	/* FIXME */
 		} else {
 			sc_log(card->ctx,  "invalid security condition");
 			return SC_ERROR_INTERNAL;
 		}
 		p   += tlen;
 		len -= tlen;
 	}
 
 	return SC_SUCCESS;
 }
 
 /* sets a TLV encoded path as returned from GET DATA in a sc_path_t object
  */
