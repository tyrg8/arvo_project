commit d12b8d620c6aba8e0bf650549949fec1d208a683
Author: Alan Modra <amodra@gmail.com>
Date:   Tue Feb 15 14:35:14 2022 +1030

    asan : use of uninitialized value in buffer_and_nest
    
            * macro.c (buffer_and_nest): Don't read past end of string buffer.

diff --git a/gas/macro.c b/gas/macro.c
index 9327a6dea76..cbb9574fd66 100644
--- a/gas/macro.c
+++ b/gas/macro.c
@@ -112,137 +112,148 @@ int
 buffer_and_nest (const char *from, const char *to, sb *ptr,
 		 size_t (*get_line) (sb *))
 {
   size_t from_len;
   size_t to_len = strlen (to);
   int depth = 1;
   size_t line_start = ptr->len;
   size_t more = get_line (ptr);
 
   if (to_len == 4 && strcasecmp (to, "ENDR") == 0)
     {
       from = NULL;
       from_len = 0;
     }
   else
     from_len = strlen (from);
 
   while (more)
     {
       /* Try to find the first pseudo op on the line.  */
       size_t i = line_start;
       bool had_colon = false;
 
       /* With normal syntax we can suck what we want till we get
 	 to the dot.  With the alternate, labels have to start in
 	 the first column, since we can't tell what's a label and
 	 what's a pseudoop.  */
 
       if (! LABELS_WITHOUT_COLONS)
 	{
 	  /* Skip leading whitespace.  */
 	  while (i < ptr->len && ISWHITE (ptr->ptr[i]))
 	    i++;
 	}
 
       for (;;)
 	{
 	  /* Skip over a label, if any.  */
 	  if (i >= ptr->len || ! is_name_beginner (ptr->ptr[i]))
 	    break;
 	  i++;
 	  while (i < ptr->len && is_part_of_name (ptr->ptr[i]))
 	    i++;
 	  if (i < ptr->len && is_name_ender (ptr->ptr[i]))
 	    i++;
 	  /* Skip whitespace.  */
 	  while (i < ptr->len && ISWHITE (ptr->ptr[i]))
 	    i++;
 	  /* Check for the colon.  */
 	  if (i >= ptr->len || ptr->ptr[i] != ':')
 	    {
 	      /* LABELS_WITHOUT_COLONS doesn't mean we cannot have a
 		 colon after a label.  If we do have a colon on the
 		 first label then handle more than one label on the
 		 line, assuming that each label has a colon.  */
 	      if (LABELS_WITHOUT_COLONS && !had_colon)
 		break;
 	      i = line_start;
 	      break;
 	    }
 	  i++;
 	  line_start = i;
 	  had_colon = true;
 	}
 
       /* Skip trailing whitespace.  */
       while (i < ptr->len && ISWHITE (ptr->ptr[i]))
 	i++;
 
       if (i < ptr->len && (ptr->ptr[i] == '.'
 			   || NO_PSEUDO_DOT
 			   || macro_mri))
 	{
 	  if (! flag_m68k_mri && ptr->ptr[i] == '.')
 	    i++;
-	  if (from == NULL
-	     && strncasecmp (ptr->ptr + i, "IRPC", from_len = 4) != 0
-	     && strncasecmp (ptr->ptr + i, "IRP", from_len = 3) != 0
-	     && strncasecmp (ptr->ptr + i, "IREPC", from_len = 5) != 0
-	     && strncasecmp (ptr->ptr + i, "IREP", from_len = 4) != 0
-	     && strncasecmp (ptr->ptr + i, "REPT", from_len = 4) != 0
-	     && strncasecmp (ptr->ptr + i, "REP", from_len = 3) != 0)
-	    from_len = 0;
+	  if (from == NULL)
+	    {
+	      size_t len = ptr->len - i;
+	      if (len >= 5 && strncasecmp (ptr->ptr + i, "IREPC", 5) == 0)
+		from_len = 5;
+	      else if (len >= 4 && strncasecmp (ptr->ptr + i, "IREP", 4) == 0)
+		from_len = 4;
+	      else if (len >= 4 && strncasecmp (ptr->ptr + i, "IRPC", 4) == 0)
+		from_len = 4;
+	      else if (len >= 4 && strncasecmp (ptr->ptr + i, "REPT", 4) == 0)
+		from_len = 4;
+	      else if (len >= 3 && strncasecmp (ptr->ptr + i, "IRP", 3) == 0)
+		from_len = 3;
+	      else if (len >= 3 && strncasecmp (ptr->ptr + i, "REP", 3) == 0)
+		from_len = 3;
+	      else
+		from_len = 0;
+	    }
 	  if ((from != NULL
 	       ? strncasecmp (ptr->ptr + i, from, from_len) == 0
 	       : from_len > 0)
 	      && (ptr->len == (i + from_len)
 		  || ! (is_part_of_name (ptr->ptr[i + from_len])
 			|| is_name_ender (ptr->ptr[i + from_len]))))
 	    depth++;
-	  if (strncasecmp (ptr->ptr + i, to, to_len) == 0
+	  if (ptr->len - i >= to_len
+	      && strncasecmp (ptr->ptr + i, to, to_len) == 0
 	      && (ptr->len == (i + to_len)
 		  || ! (is_part_of_name (ptr->ptr[i + to_len])
 			|| is_name_ender (ptr->ptr[i + to_len]))))
 	    {
 	      depth--;
 	      if (depth == 0)
 		{
 		  /* Reset the string to not include the ending rune.  */
 		  ptr->len = line_start;
 		  break;
 		}
 	    }
 
 	  /* PR gas/16908
 	     Apply and discard .linefile directives that appear within
 	     the macro.  For long macros, one might want to report the
 	     line number information associated with the lines within
 	     the macro definition, but we would need more infrastructure
 	     to make that happen correctly (e.g. resetting the line
 	     number when expanding the macro), and since for short
 	     macros we clearly prefer reporting the point of expansion
 	     anyway, there's not an obviously better fix here.  */
 	  if (strncasecmp (ptr->ptr + i, "linefile", 8) == 0)
 	    {
 	      char saved_eol_char = ptr->ptr[ptr->len];
 
 	      ptr->ptr[ptr->len] = '\0';
 	      temp_ilp (ptr->ptr + i + 8);
 	      s_app_line (0);
 	      restore_ilp ();
 	      ptr->ptr[ptr->len] = saved_eol_char;
 	      ptr->len = line_start;
 	    }
 	}
 
       /* Add the original end-of-line char to the end and keep running.  */
       sb_add_char (ptr, more);
       line_start = ptr->len;
       more = get_line (ptr);
     }
 
   /* Return 1 on success, 0 on unexpected EOF.  */
   return depth == 0;
 }
 
 /* Pick up a token.  */
