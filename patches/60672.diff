commit 440ca666eff10cc7011901252d20f3fc4ea23651
Author: Jakub Jelen <jjelen@redhat.com>
Date:   Thu Aug 17 13:41:36 2023 +0200

    setcos: Avoid buffer underflow
    
    Thanks oss-fuzz
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=60672

diff --git a/src/pkcs15init/pkcs15-setcos.c b/src/pkcs15init/pkcs15-setcos.c
index 1b56afe6..1907b47f 100644
--- a/src/pkcs15init/pkcs15-setcos.c
+++ b/src/pkcs15init/pkcs15-setcos.c
@@ -324,59 +324,63 @@ static int
 setcos_create_key(sc_profile_t *profile, sc_pkcs15_card_t *p15card,
 		struct sc_pkcs15_object *object)
 {
 	struct sc_context *ctx = p15card->card->ctx;
 	struct sc_pkcs15_prkey_info *key_info = (struct sc_pkcs15_prkey_info *)object->data;
 	struct sc_file *file = NULL;
 	int keybits = key_info->modulus_length, r;
 
 	SC_FUNC_CALLED(ctx, SC_LOG_DEBUG_VERBOSE);
 	if (object->type != SC_PKCS15_TYPE_PRKEY_RSA)
 		LOG_TEST_RET(ctx, SC_ERROR_NOT_SUPPORTED, "Create key failed: RSA only supported");
 
 	/* Parameter check */
 	if ((keybits < 512) || (keybits > 1024) || (keybits & 0x7))
 		LOG_TEST_RET(ctx, SC_ERROR_INVALID_ARGUMENTS, "Invalid key length");
 
 	sc_log(ctx,  "create private key ID:%s\n",  sc_pkcs15_print_id(&key_info->id));
 
 	/* Get the private key file */
 	r = setcos_new_file(profile, p15card->card, SC_PKCS15_TYPE_PRKEY_RSA, key_info->key_reference, &file);
 	LOG_TEST_RET(ctx, r, "Cannot get new private key file");
 
 	/* Take enough room for a 1024 bit key */
 	if (file->size < 512)
 		file->size = 512;
 
 	/* Replace the path of instantiated key template by the path from the object data. */
 	memcpy(&file->path, &key_info->path, sizeof(file->path));
+	if (file->path.len < 2) {
+		sc_file_free(file);
+		LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "Invalid path");
+	}
 	file->id = file->path.value[file->path.len - 2] * 0x100
 			+ file->path.value[file->path.len - 1];
 
 	key_info->key_reference = file->path.value[file->path.len - 1] & 0xFF;
 
 	sc_log(ctx,  "Path of private key file to create %s\n", sc_print_path(&file->path));
 
 	r = sc_select_file(p15card->card, &file->path, NULL);
 	if (!r) {
 		r = sc_pkcs15init_delete_by_path(profile, p15card, &file->path);
 		if (r != SC_SUCCESS)
 			sc_file_free(file);
 		LOG_TEST_RET(ctx, r, "Failed to delete private key file");
 	} else if (r != SC_ERROR_FILE_NOT_FOUND) {
 		sc_file_free(file);
 		file = NULL;
 		LOG_TEST_RET(ctx, r, "Select private key file error");
 	}
 
 	/* Now create the key file */
 	r = sc_pkcs15init_create_file(profile, p15card, file);
 	LOG_TEST_RET(ctx, r, "Cannot create private key file");
 
 	sc_file_free(file);
 	LOG_FUNC_RETURN(ctx, r);
 }
 
 
 /*
  * Store a private key
  */
