commit e5187d467a4560cbd0b74a682fc3e71cb64edcc0
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Tue Jan 18 09:19:28 2022 +0000

    oss-fuzz 43680: Cope with out-of-memory error in stack extension
    
    The minimal PS-like interpreter in pdfi allows the operand stand to be extended,
    but the code was missing handling of the memory allocation failing for the
    extended stack.

diff --git a/pdf/pdf_fontps.h b/pdf/pdf_fontps.h
index 45810a28b..835f00669 100644
--- a/pdf/pdf_fontps.h
+++ b/pdf/pdf_fontps.h
@@ -1,21 +1,21 @@
-/* Copyright (C) 2020-2021 Artifex Software, Inc.
+/* Copyright (C) 2020-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 /* common code for Postscript-type font handling */
 
 #ifndef PDF_FONTPS_H
 #define PDF_FONTPS_H
 
 #include "gxfont1.h"        /* for gs_font_type1_s */
@@ -173,40 +173,43 @@ static inline bool pdf_ps_obj_has_type(pdf_ps_stack_object_t *o, pdf_ps_obj_type
 /* The stack can grow, but doesn't shrink, just gets destroyed
    when we're done interpreting
  */
 static inline int pdf_ps_stack_push(pdf_ps_ctx_t *s)
 {
     /* Extending the stack pretty inefficient, but it shouldn't happen often
        for valid files
      */
     if (s->cur + 1 >= s->toplim - 1) {
         int i, currsize = s->toplim - s->stack;
         int newsize = currsize + PDF_PS_STACK_GROW_SIZE;
         int newsizebytes = newsize * sizeof(pdf_ps_stack_object_t);
         pdf_ps_stack_object_t *nstack;
 
         if (newsize < PDF_PS_STACK_MAX) {
             nstack = (pdf_ps_stack_object_t *)gs_alloc_bytes(s->pdfi_ctx->memory, newsizebytes, "pdf_ps_stack_push(nstack)");
             if (nstack != NULL) {
                 memcpy(nstack, s->stack, (currsize - 1) * sizeof(pdf_ps_stack_object_t));
 
                 for (i = 0; i < PDF_PS_STACK_GUARDS; i++)
                     nstack[newsize - PDF_PS_STACK_GUARDS + i].type = PDF_PS_OBJ_STACK_TOP;
 
                 for (i = currsize - 2; i < newsize - PDF_PS_STACK_GUARDS; i++) {
                     pdf_ps_make_null(&(nstack[i]));
                 }
 
                 gs_free_object(s->pdfi_ctx->memory, s->stack, "pdf_ps_stack_push(s->stack)");
                 s->stack = nstack;
                 s->cur = s->stack + currsize - 1;
                 s->toplim = s->stack + newsize - PDF_PS_STACK_GROW_SIZE;
             }
+            else {
+                return_error(gs_error_VMerror);
+            }
         }
     }
     s->cur++;
     if (pdf_ps_obj_has_type(s->cur, PDF_PS_OBJ_STACK_TOP))
         return_error(gs_error_stackoverflow);
     if (pdf_ps_obj_has_type(s->cur, PDF_PS_OBJ_STACK_BOTTOM))
         return_error(gs_error_stackunderflow);
     return 0;
 }
