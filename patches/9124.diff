commit 1f68feef03dd9d5b5a4cac0a8f69b9f4cb1da915
Author: Yunqing Wang <yunqingwang@google.com>
Date:   Mon Jul 2 12:39:09 2018 -0700

    Set thread_data->error_info.setjmp correctly
    
    This patch fixed the setting of thread_data->error_info.setjmp,
    which was missing in current code.
    
    Also, set the error_info pointer in macroblockd to the error_info
    structure in thread_data.
    
    These changes ultimately fix a decoder fuzzing bug in
    decode_partition().
    
    BUG=oss-fuzz:9188,9124
    
    Change-Id: I9864f85efab2f14dd20ce80d6bc889edb1218715

diff --git a/av1/decoder/decodeframe.c b/av1/decoder/decodeframe.c
index f80966edae..4c9120b0e1 100644
--- a/av1/decoder/decodeframe.c
+++ b/av1/decoder/decodeframe.c
@@ -1403,114 +1403,114 @@ static PARTITION_TYPE read_partition(MACROBLOCKD *xd, int mi_row, int mi_col,
 // TODO(slavarnway): eliminate bsize and subsize in future commits
 static void decode_partition(AV1Decoder *const pbi, MACROBLOCKD *const xd,
                              int mi_row, int mi_col, aom_reader *r,
                              BLOCK_SIZE bsize) {
   AV1_COMMON *const cm = &pbi->common;
   const int bw = mi_size_wide[bsize];
   const int hbs = bw >> 1;
   PARTITION_TYPE partition;
   BLOCK_SIZE subsize;
   const int quarter_step = bw / 4;
   BLOCK_SIZE bsize2 = get_partition_subsize(bsize, PARTITION_SPLIT);
   const int has_rows = (mi_row + hbs) < cm->mi_rows;
   const int has_cols = (mi_col + hbs) < cm->mi_cols;
 
   if (mi_row >= cm->mi_rows || mi_col >= cm->mi_cols) return;
 
   const int num_planes = av1_num_planes(cm);
   for (int plane = 0; plane < num_planes; ++plane) {
     int rcol0, rcol1, rrow0, rrow1;
     if (av1_loop_restoration_corners_in_sb(cm, plane, mi_row, mi_col, bsize,
                                            &rcol0, &rcol1, &rrow0, &rrow1)) {
       const int rstride = cm->rst_info[plane].horz_units_per_tile;
       for (int rrow = rrow0; rrow < rrow1; ++rrow) {
         for (int rcol = rcol0; rcol < rcol1; ++rcol) {
           const int runit_idx = rcol + rrow * rstride;
           loop_restoration_read_sb_coeffs(cm, xd, r, plane, runit_idx);
         }
       }
     }
   }
 
   partition = (bsize < BLOCK_8X8) ? PARTITION_NONE
                                   : read_partition(xd, mi_row, mi_col, r,
                                                    has_rows, has_cols, bsize);
   subsize = get_partition_subsize(bsize, partition);
 
   // Check the bitstream is conformant: if there is subsampling on the
   // chroma planes, subsize must subsample to a valid block size.
   const struct macroblockd_plane *const pd_u = &xd->plane[1];
   if (get_plane_block_size(subsize, pd_u->subsampling_x, pd_u->subsampling_y) ==
       BLOCK_INVALID) {
-    aom_internal_error(&cm->error, AOM_CODEC_CORRUPT_FRAME,
+    aom_internal_error(xd->error_info, AOM_CODEC_CORRUPT_FRAME,
                        "Block size %dx%d invalid with this subsampling mode",
                        block_size_wide[subsize], block_size_high[subsize]);
   }
 
 #define DEC_BLOCK_STX_ARG
 #define DEC_BLOCK_EPT_ARG partition,
 #define DEC_BLOCK(db_r, db_c, db_subsize)                   \
   decode_block(pbi, xd, DEC_BLOCK_STX_ARG(db_r), (db_c), r, \
                DEC_BLOCK_EPT_ARG(db_subsize))
 #define DEC_PARTITION(db_r, db_c, db_subsize) \
   decode_partition(pbi, xd, DEC_BLOCK_STX_ARG(db_r), (db_c), r, (db_subsize))
 
   switch (partition) {
     case PARTITION_NONE: DEC_BLOCK(mi_row, mi_col, subsize); break;
     case PARTITION_HORZ:
       DEC_BLOCK(mi_row, mi_col, subsize);
       if (has_rows) DEC_BLOCK(mi_row + hbs, mi_col, subsize);
       break;
     case PARTITION_VERT:
       DEC_BLOCK(mi_row, mi_col, subsize);
       if (has_cols) DEC_BLOCK(mi_row, mi_col + hbs, subsize);
       break;
     case PARTITION_SPLIT:
       DEC_PARTITION(mi_row, mi_col, subsize);
       DEC_PARTITION(mi_row, mi_col + hbs, subsize);
       DEC_PARTITION(mi_row + hbs, mi_col, subsize);
       DEC_PARTITION(mi_row + hbs, mi_col + hbs, subsize);
       break;
     case PARTITION_HORZ_A:
       DEC_BLOCK(mi_row, mi_col, bsize2);
       DEC_BLOCK(mi_row, mi_col + hbs, bsize2);
       DEC_BLOCK(mi_row + hbs, mi_col, subsize);
       break;
     case PARTITION_HORZ_B:
       DEC_BLOCK(mi_row, mi_col, subsize);
       DEC_BLOCK(mi_row + hbs, mi_col, bsize2);
       DEC_BLOCK(mi_row + hbs, mi_col + hbs, bsize2);
       break;
     case PARTITION_VERT_A:
       DEC_BLOCK(mi_row, mi_col, bsize2);
       DEC_BLOCK(mi_row + hbs, mi_col, bsize2);
       DEC_BLOCK(mi_row, mi_col + hbs, subsize);
       break;
     case PARTITION_VERT_B:
       DEC_BLOCK(mi_row, mi_col, subsize);
       DEC_BLOCK(mi_row, mi_col + hbs, bsize2);
       DEC_BLOCK(mi_row + hbs, mi_col + hbs, bsize2);
       break;
     case PARTITION_HORZ_4:
       for (int i = 0; i < 4; ++i) {
         int this_mi_row = mi_row + i * quarter_step;
         if (i > 0 && this_mi_row >= cm->mi_rows) break;
         DEC_BLOCK(this_mi_row, mi_col, subsize);
       }
       break;
     case PARTITION_VERT_4:
       for (int i = 0; i < 4; ++i) {
         int this_mi_col = mi_col + i * quarter_step;
         if (i > 0 && this_mi_col >= cm->mi_cols) break;
         DEC_BLOCK(mi_row, this_mi_col, subsize);
       }
       break;
     default: assert(0 && "Invalid partition type");
   }
 
 #undef DEC_PARTITION
 #undef DEC_BLOCK
 #undef DEC_BLOCK_EPT_ARG
 #undef DEC_BLOCK_STX_ARG
 
   update_ext_partition_context(xd, mi_row, mi_col, subsize, bsize, partition);
 }
@@ -2731,42 +2731,43 @@ static TileJobsDec *get_dec_job_info(AV1DecTileMT *tile_mt_info) {
 static void tile_worker_hook_init(AV1Decoder *const pbi,
                                   DecWorkerData *const thread_data,
                                   const TileBufferDec *const tile_buffer,
                                   TileDataDec *const tile_data,
                                   uint8_t allow_update_cdf) {
   AV1_COMMON *cm = &pbi->common;
   ThreadData *const td = thread_data->td;
   int tile_row = tile_data->tile_info.tile_row;
   int tile_col = tile_data->tile_info.tile_col;
 
   td->xd = pbi->mb;
   td->xd.corrupted = 0;
   td->xd.mc_buf[0] = td->mc_buf[0];
   td->xd.mc_buf[1] = td->mc_buf[1];
   td->bit_reader = &tile_data->bit_reader;
   av1_zero(td->dqcoeff);
   av1_tile_init(&td->xd.tile, cm, tile_row, tile_col);
   setup_bool_decoder(tile_buffer->data, thread_data->data_end,
                      tile_buffer->size, &cm->error, td->bit_reader,
                      allow_update_cdf);
 #if CONFIG_ACCOUNTING
   if (pbi->acct_enabled) {
     td->bit_reader->accounting = &pbi->accounting;
     td->bit_reader->accounting->last_tell_frac =
         aom_reader_tell_frac(td->bit_reader);
   } else {
     td->bit_reader->accounting = NULL;
   }
 #endif
   av1_init_macroblockd(cm, &td->xd, td->dqcoeff);
+  td->xd.error_info = &thread_data->error_info;
   av1_init_above_context(cm, &td->xd, tile_row);
 
   // Initialise the tile context from the frame context
   tile_data->tctx = *cm->fc;
   td->xd.tile_ctx = &tile_data->tctx;
 #if CONFIG_ACCOUNTING
   if (pbi->acct_enabled) {
     tile_data->bit_reader.accounting->last_tell_frac =
         aom_reader_tell_frac(&tile_data->bit_reader);
   }
 #endif
 }
@@ -2774,36 +2775,38 @@ static void tile_worker_hook_init(AV1Decoder *const pbi,
 static int tile_worker_hook(void *arg1, void *arg2) {
   DecWorkerData *const thread_data = (DecWorkerData *)arg1;
   AV1Decoder *const pbi = (AV1Decoder *)arg2;
   AV1_COMMON *cm = &pbi->common;
   ThreadData *const td = thread_data->td;
   uint8_t allow_update_cdf;
 
   if (setjmp(thread_data->error_info.jmp)) {
     thread_data->error_info.setjmp = 0;
     thread_data->td->xd.corrupted = 1;
     return 0;
   }
+  thread_data->error_info.setjmp = 1;
+
   allow_update_cdf = cm->large_scale_tile ? 0 : 1;
   allow_update_cdf = allow_update_cdf && !cm->disable_cdf_update;
 
   assert(cm->tile_cols > 0);
   while (1) {
     TileJobsDec *cur_job_info = get_dec_job_info(&pbi->tile_mt_info);
 
     if (cur_job_info != NULL && !td->xd.corrupted) {
       const TileBufferDec *const tile_buffer = cur_job_info->tile_buffer;
       TileDataDec *const tile_data = cur_job_info->tile_data;
       tile_worker_hook_init(pbi, thread_data, tile_buffer, tile_data,
                             allow_update_cdf);
       // decode tile
       int tile_row = tile_data->tile_info.tile_row;
       int tile_col = tile_data->tile_info.tile_col;
       decode_tile(pbi, td, tile_row, tile_col);
     } else {
       break;
     }
   }
   return !td->xd.corrupted;
 }
 
 // sorts in descending order
