commit c109ef629deb714cec09e6d23fb71dc6bc29521b
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Fri Oct 13 19:20:30 2017 +0000

    /vsitar/: error out on invalid file size, so as to avoid potenial int overflow later in the chain. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=3636. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@40426 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/port/cpl_vsil_tar.cpp b/gdal/port/cpl_vsil_tar.cpp
index c7cd805df0..856b2ab604 100644
--- a/gdal/port/cpl_vsil_tar.cpp
+++ b/gdal/port/cpl_vsil_tar.cpp
@@ -202,135 +202,141 @@ VSIArchiveEntryFileOffset* VSITarReader::GetFileOffset()
 int VSITarReader::GotoNextFile()
 {
 #ifdef HAVE_FUZZER_FRIENDLY_ARCHIVE
     if( m_bIsFuzzerFriendly )
     {
         const int nNewFileMarkerSize =
                                 static_cast<int>(strlen("***NEWFILE***:"));
         while( true )
         {
             if( m_abyBufferIdx >= m_abyBufferSize )
             {
                 if( m_abyBufferSize == 0 )
                 {
                     m_abyBufferSize = static_cast<int>(
                         VSIFReadL(m_abyBuffer, 1, 2048, fp));
                     if( m_abyBufferSize == 0 )
                         return FALSE;
                 }
                 else
                 {
                     if( m_abyBufferSize < 2048 )
                     {
                         if( nCurOffset > 0 && nCurOffset != m_nCurOffsetOld )
                         {
                             nNextFileSize = VSIFTellL(fp);
                             nNextFileSize -= m_abyBufferSize;
                             nNextFileSize += m_abyBufferIdx;
                             if( nNextFileSize >= nCurOffset )
                             {
                                 nNextFileSize -= nCurOffset;
                                 m_nCurOffsetOld = nCurOffset;
                                 return TRUE;
                             }
                         }
                         return FALSE;
                     }
                     memcpy(m_abyBuffer, m_abyBuffer + 1024, 1024);
                     m_abyBufferSize = static_cast<int>(
                          VSIFReadL(m_abyBuffer + 1024, 1, 1024, fp));
                     if( m_abyBufferSize == 0 )
                         return FALSE;
                     m_abyBufferIdx = 0;
                     m_abyBufferSize += 1024;
                 }
             }
             if( ((m_abyBufferSize == 2048 &&
                   m_abyBufferIdx < m_abyBufferSize -(nNewFileMarkerSize+64)) ||
                  (m_abyBufferSize < 2048 &&
                   m_abyBufferIdx < m_abyBufferSize -(nNewFileMarkerSize+2))) &&
                 m_abyBufferIdx >= 0 &&  // Make CSA happy, but useless.
                 m_abyBufferIdx < 2048 - nNewFileMarkerSize &&
                 memcmp(m_abyBuffer + m_abyBufferIdx,
                        "***NEWFILE***:",
                        strlen("***NEWFILE***:")) == 0 )
             {
                 if( nCurOffset > 0 && nCurOffset != m_nCurOffsetOld )
                 {
                     nNextFileSize = VSIFTellL(fp);
                     nNextFileSize -= m_abyBufferSize;
                     nNextFileSize += m_abyBufferIdx;
                     if( nNextFileSize >= nCurOffset )
                     {
                         nNextFileSize -= nCurOffset;
                         m_nCurOffsetOld = nCurOffset;
                         return TRUE;
                     }
                 }
                 m_abyBufferIdx += nNewFileMarkerSize;
                 const int nFilenameStartIdx = m_abyBufferIdx;
                 for( ; m_abyBufferIdx < m_abyBufferSize &&
                        m_abyBuffer[m_abyBufferIdx] != '\n';
                      ++m_abyBufferIdx)
                 {
                     // Do nothing.
                 }
                 if( m_abyBufferIdx < m_abyBufferSize )
                 {
                     osNextFileName.assign(
                         (const char*)(m_abyBuffer + nFilenameStartIdx),
                         m_abyBufferIdx - nFilenameStartIdx);
                     nCurOffset = VSIFTellL(fp);
                     nCurOffset -= m_abyBufferSize;
                     nCurOffset += m_abyBufferIdx + 1;
                 }
             }
             else
             {
                 m_abyBufferIdx++;
             }
         }
     }
 #endif
     char abyHeader[512] = {};
     if (VSIFReadL(abyHeader, 512, 1, fp) != 1)
         return FALSE;
 
     if (abyHeader[99] != '\0' ||
         abyHeader[107] != '\0' ||
         abyHeader[115] != '\0' ||
         abyHeader[123] != '\0' ||
         (abyHeader[135] != '\0' && abyHeader[135] != ' ') ||
         (abyHeader[147] != '\0' && abyHeader[147] != ' '))
     {
         return FALSE;
     }
     if( abyHeader[124] < '0' || abyHeader[124] > '7' )
         return FALSE;
 
     osNextFileName = abyHeader;
     nNextFileSize = 0;
     for(int i=0;i<11;i++)
         nNextFileSize = nNextFileSize * 8 + (abyHeader[124+i] - '0');
+    if( nNextFileSize > GINTBIG_MAX )
+    {
+        CPLError(CE_Failure, CPLE_AppDefined,
+                 "Invalid file size for %s", osNextFileName.c_str());
+        return FALSE;
+    }
 
     nModifiedTime = 0;
     for(int i=0;i<11;i++)
         nModifiedTime = nModifiedTime * 8 + (abyHeader[136+i] - '0');
 
     nCurOffset = VSIFTellL(fp);
 
     const GUIntBig nBytesToSkip = ((nNextFileSize + 511) / 512) * 512;
     if( nBytesToSkip > (~(static_cast<GUIntBig>(0))) - nCurOffset )
     {
         CPLError(CE_Failure, CPLE_AppDefined, "Bad .tar structure");
         return FALSE;
     }
 
     if( VSIFSeekL(fp, nBytesToSkip, SEEK_CUR) < 0 )
         return FALSE;
 
     return TRUE;
 }
 
 /************************************************************************/
 /*                          GotoFirstFile()                             */
 /************************************************************************/
