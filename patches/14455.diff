commit b506275b36827f194bc15d77bd6d2f8f7b3b935f
Author: Leandro Pereira <leandro@hardinfo.org>
Date:   Fri Apr 26 08:10:53 2019 -0700

    Ensure buffer is big enough when parsing PROXY v2 headers
    
    Credit to OSS-Fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=14455

diff --git a/fuzz/clusterfuzz-testcase-request_fuzzer-5091179189764096 b/fuzz/clusterfuzz-testcase-request_fuzzer-5091179189764096
new file mode 100644
index 00000000..05a45666
Binary files /dev/null and b/fuzz/clusterfuzz-testcase-request_fuzzer-5091179189764096 differ
diff --git a/src/lib/lwan-request.c b/src/lib/lwan-request.c
index 2406d654..016421ca 100644
--- a/src/lib/lwan-request.c
+++ b/src/lib/lwan-request.c
@@ -223,60 +223,62 @@ parse_proxy_protocol_v1(struct lwan_request *request, char *buffer)
 static char *parse_proxy_protocol_v2(struct lwan_request *request, char *buffer)
 {
     struct proxy_header_v2 *hdr = (struct proxy_header_v2 *)buffer;
+    struct lwan_request_parser_helper *helper = request->helper;
     const unsigned int proto_signature_length = 16;
     unsigned int size;
     struct lwan_proxy *const proxy = request->proxy;
 
     enum { LOCAL = 0x20, PROXY = 0x21, TCP4 = 0x11, TCP6 = 0x21 };
 
     size = proto_signature_length + (unsigned int)ntohs(hdr->len);
     if (UNLIKELY(size > (unsigned int)sizeof(*hdr)))
         return NULL;
+    if (UNLIKELY(size >= helper->buffer->len))
+        return NULL;
 
     if (LIKELY(hdr->cmd_ver == PROXY)) {
         if (hdr->fam == TCP4) {
             struct sockaddr_in *from = &proxy->from.ipv4;
             struct sockaddr_in *to = &proxy->to.ipv4;
 
             to->sin_family = from->sin_family = AF_INET;
 
             from->sin_addr.s_addr = hdr->addr.ip4.src_addr;
             from->sin_port = hdr->addr.ip4.src_port;
 
             to->sin_addr.s_addr = hdr->addr.ip4.dst_addr;
             to->sin_port = hdr->addr.ip4.dst_port;
         } else if (hdr->fam == TCP6) {
             struct sockaddr_in6 *from = &proxy->from.ipv6;
             struct sockaddr_in6 *to = &proxy->to.ipv6;
 
             from->sin6_family = to->sin6_family = AF_INET6;
 
             from->sin6_addr = hdr->addr.ip6.src_addr;
             from->sin6_port = hdr->addr.ip6.src_port;
 
             to->sin6_addr = hdr->addr.ip6.dst_addr;
             to->sin6_port = hdr->addr.ip6.dst_port;
         } else {
             return NULL;
         }
     } else if (hdr->cmd_ver == LOCAL) {
         struct sockaddr_in *from = &proxy->from.ipv4;
         struct sockaddr_in *to = &proxy->to.ipv4;
 
         from->sin_family = to->sin_family = AF_UNSPEC;
     } else {
         return NULL;
     }
 
     request->flags |= REQUEST_PROXIED;
 
     buffer += size;
 
     /* helper->crlfcrlf might be pointing to hdr; adjust */
-    struct lwan_request_parser_helper *helper = request->helper;
     const size_t adjusted_size =
         (size_t)(helper->buffer->value + helper->buffer->len - buffer);
     helper->crlfcrlf = memmem(buffer, adjusted_size, "\r\n\r\n", 4);
 
     return buffer;
 }
