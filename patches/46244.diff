commit ef1d91a04d36229332d0aa10d0652a6d91e7d3be
Merge: a367293a 963446e2
Author: LibRaw LLC <info@libraw.org>
Date:   Tue Aug 30 16:23:25 2022 +0300

    Merge pull request #480 from sashashura/patch-4
    
    Fixes Use-of-uninitialized-value in LibRaw::init_fuji_block

diff --git a/src/decoders/fuji_compressed.cpp b/src/decoders/fuji_compressed.cpp
index 5f1dc022..3241cc24 100644
--- a/src/decoders/fuji_compressed.cpp
+++ b/src/decoders/fuji_compressed.cpp
@@ -1089,53 +1089,58 @@ void LibRaw::fuji_decode_strip(fuji_compressed_params *params, int cur_block, IN
 void LibRaw::fuji_compressed_load_raw()
 {
   fuji_compressed_params common_info;
   int cur_block;
   unsigned *block_sizes;
   uchar *q_bases = 0;
   INT64 raw_offset, *raw_block_offsets;
 
   init_fuji_compr(&common_info);
 
   // read block sizes
   block_sizes = (unsigned *)malloc(sizeof(unsigned) * libraw_internal_data.unpacker_data.fuji_total_blocks);
   raw_block_offsets = (INT64 *)malloc(sizeof(INT64) * libraw_internal_data.unpacker_data.fuji_total_blocks);
 
   libraw_internal_data.internal_data.input->seek(libraw_internal_data.unpacker_data.data_offset, SEEK_SET);
-  libraw_internal_data.internal_data.input->read(
-      block_sizes, 1, sizeof(unsigned) * libraw_internal_data.unpacker_data.fuji_total_blocks);
+  int sizesToRead = sizeof(unsigned) * libraw_internal_data.unpacker_data.fuji_total_blocks;
+  if (libraw_internal_data.internal_data.input->read(block_sizes, 1, sizesToRead) != sizesToRead)
+  {
+    free(block_sizes);
+    free(raw_block_offsets);
+    throw LIBRAW_EXCEPTION_IO_EOF;
+  }
 
   raw_offset = ((sizeof(unsigned) * libraw_internal_data.unpacker_data.fuji_total_blocks) + 0xF) & ~0xF;
 
   // read q bases for lossy
   if (!libraw_internal_data.unpacker_data.fuji_lossless)
   {
     int total_q_bases = libraw_internal_data.unpacker_data.fuji_total_blocks *
                         ((libraw_internal_data.unpacker_data.fuji_total_lines + 0xF) & ~0xF);
     q_bases = (uchar *)malloc(total_q_bases);
     libraw_internal_data.internal_data.input->seek(raw_offset + libraw_internal_data.unpacker_data.data_offset,
                                                    SEEK_SET);
     libraw_internal_data.internal_data.input->read(q_bases, 1, total_q_bases);
     raw_offset += total_q_bases;
   }
 
   raw_offset += libraw_internal_data.unpacker_data.data_offset;
 
   // calculating raw block offsets
   raw_block_offsets[0] = raw_offset;
   for (cur_block = 0; cur_block < libraw_internal_data.unpacker_data.fuji_total_blocks; cur_block++)
   {
     unsigned bsize = sgetn(4, (uchar *)(block_sizes + cur_block));
     block_sizes[cur_block] = bsize;
   }
 
   for (cur_block = 1; cur_block < libraw_internal_data.unpacker_data.fuji_total_blocks; cur_block++)
     raw_block_offsets[cur_block] = raw_block_offsets[cur_block - 1] + block_sizes[cur_block - 1];
 
   fuji_decode_loop(&common_info, libraw_internal_data.unpacker_data.fuji_total_blocks, raw_block_offsets, block_sizes,
                    q_bases);
 
   free(q_bases);
   free(block_sizes);
   free(raw_block_offsets);
   free(common_info.buf);
 }
