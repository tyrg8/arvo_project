commit 157d48ccd47a488d419cc50d440a04c2796f1462
Author: Antoine Pitrou <antoine@python.org>
Date:   Tue Oct 12 10:52:37 2021 +0200

    ARROW-14285: [C++] Fix crashes when pretty-printing data from valid IPC file
    
    Should fix the following issues found by OSS-Fuzz:
    
    * https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=39677
    * https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=39703
    * https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=39763
    * https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=39773
    
    Closes #11382 from pitrou/ARROW-14285-oss-fuzz
    
    Authored-by: Antoine Pitrou <antoine@python.org>
    Signed-off-by: Antoine Pitrou <antoine@python.org>

diff --git a/cpp/src/arrow/pretty_print_test.cc b/cpp/src/arrow/pretty_print_test.cc
index 547dfd821..42995de32 100644
--- a/cpp/src/arrow/pretty_print_test.cc
+++ b/cpp/src/arrow/pretty_print_test.cc
@@ -335,153 +335,250 @@ TEST_F(TestPrettyPrint, TestIntervalTypes) {
 TEST_F(TestPrettyPrint, DateTimeTypesWithOutOfRangeValues) {
   // Our vendored date library allows years within [-32767, 32767],
   // which limits the range of values which can be displayed.
   const int32_t min_int32 = std::numeric_limits<int32_t>::min();
   const int32_t max_int32 = std::numeric_limits<int32_t>::max();
   const int64_t min_int64 = std::numeric_limits<int64_t>::min();
   const int64_t max_int64 = std::numeric_limits<int64_t>::max();
 
   const int32_t min_date32 = -12687428;
   const int32_t max_date32 = 11248737;
   const int64_t min_date64 = 86400000LL * min_date32;
   const int64_t max_date64 = 86400000LL * (max_date32 + 1) - 1;
+
+  const int32_t min_time32_seconds = 0;
+  const int32_t max_time32_seconds = 86399;
+  const int32_t min_time32_millis = 0;
+  const int32_t max_time32_millis = 86399999;
+  const int64_t min_time64_micros = 0;
+  const int64_t max_time64_micros = 86399999999LL;
+  const int64_t min_time64_nanos = 0;
+  const int64_t max_time64_nanos = 86399999999999LL;
+
   const int64_t min_timestamp_seconds = -1096193779200LL;
   const int64_t max_timestamp_seconds = 971890963199LL;
   const int64_t min_timestamp_millis = min_timestamp_seconds * 1000;
   const int64_t max_timestamp_millis = max_timestamp_seconds * 1000 + 999;
   const int64_t min_timestamp_micros = min_timestamp_millis * 1000;
   const int64_t max_timestamp_micros = max_timestamp_millis * 1000 + 999;
 
   std::vector<bool> is_valid = {false, false, false, false, true,
                                 true,  true,  true,  true,  true};
 
+  // Dates
   {
     std::vector<int32_t> values = {min_int32,  max_int32, min_date32 - 1, max_date32 + 1,
                                    min_int32,  max_int32, min_date32 - 1, max_date32 + 1,
                                    min_date32, max_date32};
     static const char* expected = R"expected([
   null,
   null,
   null,
   null,
   <value out of range: -2147483648>,
   <value out of range: 2147483647>,
   <value out of range: -12687429>,
   <value out of range: 11248738>,
   -32767-01-01,
   32767-12-31
 ])expected";
     CheckPrimitive<Date32Type, int32_t>({0, 10}, is_valid, values, expected);
   }
-
   {
     std::vector<int64_t> values = {min_int64,  max_int64, min_date64 - 1, max_date64 + 1,
                                    min_int64,  max_int64, min_date64 - 1, max_date64 + 1,
                                    min_date64, max_date64};
     static const char* expected = R"expected([
   null,
   null,
   null,
   null,
   <value out of range: -9223372036854775808>,
   <value out of range: 9223372036854775807>,
   <value out of range: -1096193779200001>,
   <value out of range: 971890963200000>,
   -32767-01-01,
   32767-12-31
 ])expected";
     CheckPrimitive<Date64Type, int64_t>({0, 10}, is_valid, values, expected);
   }
 
-  // TODO time32, time64
+  // Times
+  {
+    std::vector<int32_t> values = {min_int32,
+                                   max_int32,
+                                   min_time32_seconds - 1,
+                                   max_time32_seconds + 1,
+                                   min_int32,
+                                   max_int32,
+                                   min_time32_seconds - 1,
+                                   max_time32_seconds + 1,
+                                   min_time32_seconds,
+                                   max_time32_seconds};
+    static const char* expected = R"expected([
+  null,
+  null,
+  null,
+  null,
+  <value out of range: -2147483648>,
+  <value out of range: 2147483647>,
+  <value out of range: -1>,
+  <value out of range: 86400>,
+  00:00:00,
+  23:59:59
+])expected";
+    CheckPrimitive<Time32Type, int32_t>(time32(TimeUnit::SECOND), {0, 10}, is_valid,
+                                        values, expected);
+  }
+  {
+    std::vector<int32_t> values = {
+        min_int32,         max_int32,        min_time32_millis - 1, max_time32_millis + 1,
+        min_int32,         max_int32,        min_time32_millis - 1, max_time32_millis + 1,
+        min_time32_millis, max_time32_millis};
+    static const char* expected = R"expected([
+  null,
+  null,
+  null,
+  null,
+  <value out of range: -2147483648>,
+  <value out of range: 2147483647>,
+  <value out of range: -1>,
+  <value out of range: 86400000>,
+  00:00:00.000,
+  23:59:59.999
+])expected";
+    CheckPrimitive<Time32Type, int32_t>(time32(TimeUnit::MILLI), {0, 10}, is_valid,
+                                        values, expected);
+  }
+  {
+    std::vector<int64_t> values = {
+        min_int64,         max_int64,        min_time64_micros - 1, max_time64_micros + 1,
+        min_int64,         max_int64,        min_time64_micros - 1, max_time64_micros + 1,
+        min_time64_micros, max_time64_micros};
+    static const char* expected = R"expected([
+  null,
+  null,
+  null,
+  null,
+  <value out of range: -9223372036854775808>,
+  <value out of range: 9223372036854775807>,
+  <value out of range: -1>,
+  <value out of range: 86400000000>,
+  00:00:00.000000,
+  23:59:59.999999
+])expected";
+    CheckPrimitive<Time64Type, int64_t>(time64(TimeUnit::MICRO), {0, 10}, is_valid,
+                                        values, expected);
+  }
+  {
+    std::vector<int64_t> values = {
+        min_int64,        max_int64,       min_time64_nanos - 1, max_time64_nanos + 1,
+        min_int64,        max_int64,       min_time64_nanos - 1, max_time64_nanos + 1,
+        min_time64_nanos, max_time64_nanos};
+    static const char* expected = R"expected([
+  null,
+  null,
+  null,
+  null,
+  <value out of range: -9223372036854775808>,
+  <value out of range: 9223372036854775807>,
+  <value out of range: -1>,
+  <value out of range: 86400000000000>,
+  00:00:00.000000000,
+  23:59:59.999999999
+])expected";
+    CheckPrimitive<Time64Type, int64_t>(time64(TimeUnit::NANO), {0, 10}, is_valid, values,
+                                        expected);
+  }
 
+  // Timestamps
   {
     std::vector<int64_t> values = {min_int64,
                                    max_int64,
                                    min_timestamp_seconds - 1,
                                    max_timestamp_seconds + 1,
                                    min_int64,
                                    max_int64,
                                    min_timestamp_seconds - 1,
                                    max_timestamp_seconds + 1,
                                    min_timestamp_seconds,
                                    max_timestamp_seconds};
     static const char* expected = R"expected([
   null,
   null,
   null,
   null,
   <value out of range: -9223372036854775808>,
   <value out of range: 9223372036854775807>,
   <value out of range: -1096193779201>,
   <value out of range: 971890963200>,
   -32767-01-01 00:00:00,
   32767-12-31 23:59:59
 ])expected";
     CheckPrimitive<TimestampType, int64_t>(timestamp(TimeUnit::SECOND), {0, 10}, is_valid,
                                            values, expected);
   }
   {
     std::vector<int64_t> values = {min_int64,
                                    max_int64,
                                    min_timestamp_millis - 1,
                                    max_timestamp_millis + 1,
                                    min_int64,
                                    max_int64,
                                    min_timestamp_millis - 1,
                                    max_timestamp_millis + 1,
                                    min_timestamp_millis,
                                    max_timestamp_millis};
     static const char* expected = R"expected([
   null,
   null,
   null,
   null,
   <value out of range: -9223372036854775808>,
   <value out of range: 9223372036854775807>,
   <value out of range: -1096193779200001>,
   <value out of range: 971890963200000>,
   -32767-01-01 00:00:00.000,
   32767-12-31 23:59:59.999
 ])expected";
     CheckPrimitive<TimestampType, int64_t>(timestamp(TimeUnit::MILLI), {0, 10}, is_valid,
                                            values, expected);
   }
   {
     std::vector<int64_t> values = {min_int64,
                                    max_int64,
                                    min_timestamp_micros - 1,
                                    max_timestamp_micros + 1,
                                    min_int64,
                                    max_int64,
                                    min_timestamp_micros - 1,
                                    max_timestamp_micros + 1,
                                    min_timestamp_micros,
                                    max_timestamp_micros};
     static const char* expected = R"expected([
   null,
   null,
   null,
   null,
   <value out of range: -9223372036854775808>,
   <value out of range: 9223372036854775807>,
   <value out of range: -1096193779200000001>,
   <value out of range: 971890963200000000>,
   -32767-01-01 00:00:00.000000,
   32767-12-31 23:59:59.999999
 ])expected";
     CheckPrimitive<TimestampType, int64_t>(timestamp(TimeUnit::MICRO), {0, 10}, is_valid,
                                            values, expected);
   }
   // Note that while the values below are legal and correct, they used to
   // trigger an internal signed overflow inside the vendored "date" library
   // (https://github.com/HowardHinnant/date/issues/696).
   {
     std::vector<int64_t> values = {min_int64, max_int64};
     static const char* expected = R"expected([
   1677-09-21 00:12:43.145224192,
   2262-04-11 23:47:16.854775807
 ])expected";
     CheckPrimitive<TimestampType, int64_t>(timestamp(TimeUnit::NANO), {0, 10},
                                            {true, true}, values, expected);
   }
 }
diff --git a/cpp/src/arrow/util/decimal.cc b/cpp/src/arrow/util/decimal.cc
index 5e3e5e4ab..3118db994 100644
--- a/cpp/src/arrow/util/decimal.cc
+++ b/cpp/src/arrow/util/decimal.cc
@@ -386,11 +386,14 @@ static void AdjustIntegerStringWithScale(int32_t scale, std::string* str) {
 }
 
 std::string Decimal128::ToString(int32_t scale) const {
+  if (ARROW_PREDICT_FALSE(scale < -kMaxScale || scale > kMaxScale)) {
+    return "<scale out of range, cannot format Decimal128 value>";
+  }
   std::string str(ToIntegerString());
   AdjustIntegerStringWithScale(scale, &str);
   return str;
 }
 
 // Iterates over input and for each group of kInt64DecimalDigits multiple out by
 // the appropriate power of 10 necessary to add source parsed as uint64 and
 // then adds the parsed value of source.
@@ -695,7 +698,10 @@ std::string Decimal256::ToIntegerString() const {
 }
 
 std::string Decimal256::ToString(int32_t scale) const {
+  if (ARROW_PREDICT_FALSE(scale < -kMaxScale || scale > kMaxScale)) {
+    return "<scale out of range, cannot format Decimal256 value>";
+  }
   std::string str(ToIntegerString());
   AdjustIntegerStringWithScale(scale, &str);
   return str;
 }
diff --git a/cpp/src/arrow/util/formatting.h b/cpp/src/arrow/util/formatting.h
index 32b3d5585..09eb748e4 100644
--- a/cpp/src/arrow/util/formatting.h
+++ b/cpp/src/arrow/util/formatting.h
@@ -349,6 +349,13 @@ bool IsDateTimeInRange(Unit duration) {
 // range, and the {kMinIncl, kMaxExcl} constants above would overflow.
 constexpr bool IsDateTimeInRange(std::chrono::nanoseconds duration) { return true; }
 
+template <typename Unit>
+bool IsTimeInRange(Unit duration) {
+  constexpr Unit kMinIncl = std::chrono::duration_cast<Unit>(std::chrono::seconds{0});
+  constexpr Unit kMaxExcl = std::chrono::duration_cast<Unit>(std::chrono::seconds{86400});
+  return duration >= kMinIncl && duration < kMaxExcl;
+}
+
 template <typename RawValue, typename Appender>
 Return<Appender> FormatOutOfRange(RawValue&& raw_value, Appender&& append) {
   // XXX locale-sensitive but good enough for now
@@ -478,28 +485,31 @@ template <typename T>
 class StringFormatter<T, enable_if_time<T>> {
  public:
   using value_type = typename T::c_type;
 
   explicit StringFormatter(const std::shared_ptr<DataType>& type)
       : unit_(checked_cast<const T&>(*type).unit()) {}
 
   template <typename Duration, typename Appender>
   Return<Appender> operator()(Duration, value_type count, Appender&& append) {
-    Duration since_midnight{count};
+    const Duration since_midnight{count};
+    if (!ARROW_PREDICT_TRUE(detail::IsTimeInRange(since_midnight))) {
+      return detail::FormatOutOfRange(count, append);
+    }
 
     constexpr size_t buffer_size = detail::BufferSizeHH_MM_SS<Duration>();
 
     std::array<char, buffer_size> buffer;
     char* cursor = buffer.data() + buffer_size;
 
     detail::FormatHH_MM_SS(arrow_vendored::date::make_time(since_midnight), &cursor);
     return append(detail::ViewDigitBuffer(buffer, cursor));
   }
 
   template <typename Appender>
   Return<Appender> operator()(value_type value, Appender&& append) {
     return util::VisitDuration(unit_, *this, value, std::forward<Appender>(append));
   }
 
  private:
   TimeUnit::type unit_;
 };
diff --git a/testing b/testing
index 2c29a733a..a60b71526 160000
--- a/testing
+++ b/testing
@@ -1 +1 @@
-Subproject commit 2c29a733ac2c8492d5df3b74ea5ab1a32f892f60
+Subproject commit a60b715263d9bbf7e744527fb0c084b693f58043
