commit 4cb5129c2a9eea3e836bbcd2439ad6077f994dd0
Author: Dan Bloomberg <dan.bloomberg@gmail.com>
Date:   Wed Nov 18 21:28:07 2020 -0800

    Fix oss-fuzz issue 27592: pix_rotate_shear_fuzzer: uninit in jpeg library
    * Also fix comment about jpeg reading hint with bad data.

diff --git a/prog/fuzzing/pix_rotate_shear_fuzzer.cc b/prog/fuzzing/pix_rotate_shear_fuzzer.cc
index 4bf1288..9ae2569 100644
--- a/prog/fuzzing/pix_rotate_shear_fuzzer.cc
+++ b/prog/fuzzing/pix_rotate_shear_fuzzer.cc
@@ -32,35 +32,36 @@ int16_t ReadInt16(const uint8_t** data, size_t* size) {
 extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
   const int16_t angle = ReadInt16(&data, &size);
   const int16_t x_center = ReadInt16(&data, &size);
   const int16_t y_center = ReadInt16(&data, &size);
 
   leptSetStdNullHandler();
 
-  // Check for pnm format; this can cause timeouts.
+  // Don't do pnm format (which can cause timeouts) or
+  // jpeg format (which can have uninitialized variables.
   // The format checker requires at least 12 bytes.
   if (size < 12) return EXIT_SUCCESS;
   int format;
   findFileFormatBuffer(data, &format);
-  if (format == IFF_PNM) return EXIT_SUCCESS;
+  if (format == IFF_PNM || format == IFF_JFIF_JPEG) return EXIT_SUCCESS;
 
   Pix* pix = pixReadMem(reinterpret_cast<const unsigned char*>(data), size);
   if (pix == nullptr) {
     return EXIT_SUCCESS;
   }
 
   // Never in production
   if (DebugOutput) {
     L_INFO("w = %d, h = %d, d = %d\n", "fuzzer",
            pixGetWidth(pix), pixGetHeight(pix), pixGetDepth(pix));
   }
 
   constexpr float deg2rad = M_PI / 180.;
   Pix* pix_rotated = pixRotateShear(pix, x_center, y_center, deg2rad * angle,
                                     L_BRING_IN_WHITE);
   if (pix_rotated) {
     pixDestroy(&pix_rotated);
   }
 
   pixDestroy(&pix);
   return EXIT_SUCCESS;
 }
diff --git a/src/jpegio.c b/src/jpegio.c
index 208cea1..993683d 100644
--- a/src/jpegio.c
+++ b/src/jpegio.c
@@ -1,141 +1,143 @@
 /*====================================================================*
  -  Copyright (C) 2001 Leptonica.  All rights reserved.
  -
  -  Redistribution and use in source and binary forms, with or without
  -  modification, are permitted provided that the following conditions
  -  are met:
  -  1. Redistributions of source code must retain the above copyright
  -     notice, this list of conditions and the following disclaimer.
  -  2. Redistributions in binary form must reproduce the above
  -     copyright notice, this list of conditions and the following
  -     disclaimer in the documentation and/or other materials
  -     provided with the distribution.
  -
  -  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  -  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  -  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  -  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL ANY
  -  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  -  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  -  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  -  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
  -  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  -  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  -  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *====================================================================*/
 
 /*!
  * \file jpegio.c
  * <pre>
  *
  *    Read jpeg from file
  *          PIX             *pixReadJpeg()  [special top level]
  *          PIX             *pixReadStreamJpeg()
  *
  *    Read jpeg metadata from file
  *          l_int32          readHeaderJpeg()
  *          l_int32          freadHeaderJpeg()
  *          l_int32          fgetJpegResolution()
  *          l_int32          fgetJpegComment()
  *
  *    Write jpeg to file
  *          l_int32          pixWriteJpeg()  [special top level]
  *          l_int32          pixWriteStreamJpeg()
  *
  *    Read/write to memory
  *          PIX             *pixReadMemJpeg()
  *          l_int32          readHeaderMemJpeg()
  *          l_int32          readResolutionMemJpeg()
  *          l_int32          pixWriteMemJpeg()
  *
  *    Setting special flag for chroma sampling on write
  *          l_int32          pixSetChromaSampling()
  *
  *    Static system helpers
  *          static void      jpeg_error_catch_all_1()
  *          static void      jpeg_error_catch_all_2()
  *          static l_uint8   jpeg_getc()
  *          static l_int32   jpeg_comment_callback()
  *
  *    Documentation: libjpeg.doc can be found, along with all
  *    source code, at ftp://ftp.uu.net/graphics/jpeg
  *    Download and untar the file:  jpegsrc.v6b.tar.gz
  *    A good paper on jpeg can also be found there: wallace.ps.gz
  *
  *    The functions in libjpeg make it very simple to compress
  *    and decompress images.  On input (decompression from file),
  *    3 component color images can be read into either an 8 bpp Pix
  *    with a colormap or a 32 bpp Pix with RGB components.  For output
  *    (compression to file), all color Pix, whether 8 bpp with a
  *    colormap or 32 bpp, are written compressed as a set of three
  *    8 bpp (rgb) images.
  *
  *    Low-level error handling
  *    ------------------------
  *    The default behavior of the jpeg library is to call exit.
  *    This is often undesirable, and the caller should make the
  *    decision when to abort a process.  To prevent the jpeg library
  *    from calling exit(), setjmp() has been inserted into all
  *    readers and writers, and the cinfo struct has been set up so that
  *    the low-level jpeg library will call a special error handler
  *    that doesn't exit, instead of the default function error_exit().
  *
  *    To avoid race conditions and make these functions thread-safe in
  *    the rare situation where calls to two threads are simultaneously
  *    failing on bad jpegs, we insert a local copy of the jmp_buf struct
  *    into the cinfo.client_data field, and use this on longjmp.
  *    For extracting the jpeg comment, we have the added complication
  *    that the client_data field must also return the jpeg comment,
  *    and we use a different error handler.
  *
  *    How to avoid subsampling the chroma channels
  *    --------------------------------------------
  *    By default, the U,V (chroma) channels use 2x2 subsampling (aka 4.2.0).
  *    Higher quality for color, using full resolution (4.4.4) for the chroma,
  *    is obtained by setting a field in the pix before writing:
  *        pixSetChromaSampling(pix, L_NO_CHROMA_SAMPLING_JPEG);
  *    The field can be reset for default 4.2.0 subsampling with
  *        pixSetChromaSampling(pix, 0);
  *
  *    How to extract just the luminance channel in reading RGB
  *    --------------------------------------------------------
  *    For higher resolution and faster decoding of an RGB image, you
  *    can extract just the 8 bpp luminance channel, using pixReadJpeg(),
  *    where you use L_JPEG_READ_LUMINANCE for the %hint arg.
  *
- *    How to fail to read if the data is corrupted
- *    ---------------------------------------------
- *    By default, if the low-level jpeg library functions do not abort,
- *    a pix will be returned, even if the data is corrupted and warnings
- *    are issued.  In order to be most likely to fail to read when there
- *    is data corruption, use L_JPEG_FAIL_ON_BAD_DATA in the %hint arg.
+ *    How to continue to read if the data is corrupted
+ *    ------------------------------------------------
+ *    By default, if data is corrupted we make every effort to fail
+ *    to return a pix.  (Failure is not always possible with bad
+ *    data, because in some situations, such as during arithmetic
+ *    decoding, the low-level jpeg library will not abort or raise
+ *    a warning.)  To attempt to ignore warnings and get a pix when data
+ *    is corrupted, use L_JPEG_CONTINUE_WITH_BAD_DATA in the %hint arg.
  *
  *    Compressing to memory and decompressing from memory
  *    ---------------------------------------------------
  *    On systems like windows without fmemopen() and open_memstream(),
  *    we write data to a temp file and read it back for operations
  *    between pix and compressed-data, such as pixReadMemJpeg() and
  *    pixWriteMemJpeg().
  * </pre>
  */
 
 #ifdef HAVE_CONFIG_H
 #include <config_auto.h>
 #endif  /* HAVE_CONFIG_H */
 
 #include <string.h>
 #include "allheaders.h"
 
 /* --------------------------------------------*/
 #if  HAVE_LIBJPEG   /* defined in environ.h */
 /* --------------------------------------------*/
 
 #include <setjmp.h>
 
     /* jconfig.h makes the error of setting
      *   #define HAVE_STDLIB_H
      * which conflicts with config_auto.h (where it is set to 1) and results
      * for some gcc compiler versions in a warning.  The conflict is harmless
      * but we suppress it by undefining the variable. */
 #undef HAVE_STDLIB_H
 #include "jpeglib.h"
