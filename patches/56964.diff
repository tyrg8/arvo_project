commit 3eb6bf03869b449bbe990efe7e5101457d40f36e
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Sun Mar 12 16:47:15 2023 +0100

    parser: Stop calling xmlParserInputGrow
    
    Introduce xmlParserGrow which takes a parser context to simplify error
    handling.

diff --git a/HTMLparser.c b/HTMLparser.c
index 7e91384b..76934ce9 100644
--- a/HTMLparser.c
+++ b/HTMLparser.c
@@ -244,104 +244,104 @@ static htmlParserNodeInfo *
 htmlNodeInfoPop(htmlParserCtxtPtr ctxt)
 {
     if (ctxt->nodeInfoNr <= 0)
         return (NULL);
     ctxt->nodeInfoNr--;
     if (ctxt->nodeInfoNr < 0)
         return (NULL);
     if (ctxt->nodeInfoNr > 0)
         ctxt->nodeInfo = &ctxt->nodeInfoTab[ctxt->nodeInfoNr - 1];
     else
         ctxt->nodeInfo = NULL;
     return &ctxt->nodeInfoTab[ctxt->nodeInfoNr];
 }
 
 /*
  * Macros for accessing the content. Those should be used only by the parser,
  * and not exported.
  *
  * Dirty macros, i.e. one need to make assumption on the context to use them
  *
  *   CUR_PTR return the current pointer to the xmlChar to be parsed.
  *   CUR     returns the current xmlChar value, i.e. a 8 bit value if compiled
  *           in ISO-Latin or UTF-8, and the current 16 bit value if compiled
  *           in UNICODE mode. This should be used internally by the parser
  *           only to compare to ASCII values otherwise it would break when
  *           running with UTF-8 encoding.
  *   NXT(n)  returns the n'th next xmlChar. Same as CUR is should be used only
  *           to compare on ASCII based substring.
  *   UPP(n)  returns the n'th next xmlChar converted to uppercase. Same as CUR
  *           it should be used only to compare on ASCII based substring.
  *   SKIP(n) Skip n xmlChar, and must also be used only to skip ASCII defined
  *           strings without newlines within the parser.
  *
  * Clean macros, not dependent of an ASCII context, expect UTF-8 encoding
  *
  *   NEXT    Skip to the next character, this does the proper decoding
  *           in UTF-8 mode. It also pop-up unfinished entities on the fly.
  *   NEXTL(l) Skip the current unicode character of l xmlChars long.
  *   COPY(to) copy one char to *to, increment CUR_PTR and to accordingly
  */
 
 #define UPPER (toupper(*ctxt->input->cur))
 
 #define SKIP(val) ctxt->input->cur += (val),ctxt->input->col+=(val)
 
 #define NXT(val) ctxt->input->cur[(val)]
 
 #define UPP(val) (toupper(ctxt->input->cur[(val)]))
 
 #define CUR_PTR ctxt->input->cur
 #define BASE_PTR ctxt->input->base
 
 #define SHRINK if ((ctxt->input->cur - ctxt->input->base > 2 * INPUT_CHUNK) && \
 		   (ctxt->input->end - ctxt->input->cur < 2 * INPUT_CHUNK)) \
 	xmlParserInputShrink(ctxt->input)
 
 #define GROW if ((ctxt->progressive == 0) &&				\
 		 (ctxt->input->end - ctxt->input->cur < INPUT_CHUNK))	\
-	xmlParserInputGrow(ctxt->input, INPUT_CHUNK)
+	xmlParserGrow(ctxt)
 
 #define SKIP_BLANKS htmlSkipBlankChars(ctxt)
 
 /* Imported from XML */
 
 #define CUR (*ctxt->input->cur)
 #define NEXT xmlNextChar(ctxt)
 
 #define RAW (ctxt->token ? -1 : (*ctxt->input->cur))
 
 
 #define NEXTL(l) do {							\
     if (*(ctxt->input->cur) == '\n') {					\
 	ctxt->input->line++; ctxt->input->col = 1;			\
     } else ctxt->input->col++;						\
     ctxt->token = 0; ctxt->input->cur += l;				\
   } while (0)
 
 /************
     \
     if (*ctxt->input->cur == '%') xmlParserHandlePEReference(ctxt);	\
     if (*ctxt->input->cur == '&') xmlParserHandleReference(ctxt);
  ************/
 
 #define CUR_CHAR(l) htmlCurrentChar(ctxt, &l)
 #define CUR_SCHAR(s, l) xmlStringCurrentChar(ctxt, s, &l)
 
 #define COPY_BUF(l,b,i,v)						\
     if (l == 1) b[i++] = v;						\
     else i += xmlCopyChar(l,&b[i],v)
 
 /**
  * htmlFindEncoding:
  * @the HTML parser context
  *
  * Ty to find and encoding in the current data available in the input
  * buffer this is needed to try to switch to the proper encoding when
  * one face a character error.
  * That's an heuristic, since it's operating outside of parsing it could
  * try to use a meta which had been commented out, that's the reason it
  * should only be used in case of error, not as a default.
  *
  * Returns an encoding string or NULL if not found, the string need to
  *   be freed
  */
@@ -401,138 +401,138 @@ static int
 htmlCurrentChar(xmlParserCtxtPtr ctxt, int *len) {
     const unsigned char *cur;
     unsigned char c;
     unsigned int val;
 
     if (ctxt->instate == XML_PARSER_EOF)
 	return(0);
 
     if (ctxt->token != 0) {
 	*len = 0;
 	return(ctxt->token);
     }
     if (ctxt->charset != XML_CHAR_ENCODING_UTF8) {
         xmlChar * guess;
         xmlCharEncodingHandlerPtr handler;
 
         /*
          * Assume it's a fixed length encoding (1) with
          * a compatible encoding for the ASCII set, since
          * HTML constructs only use < 128 chars
          */
         if (*ctxt->input->cur < 0x80) {
             *len = 1;
             if ((*ctxt->input->cur == 0) &&
                 (ctxt->input->cur < ctxt->input->end)) {
                 htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,
                                 "Char 0x%X out of allowed range\n", 0);
                 return(' ');
             }
             return(*ctxt->input->cur);
         }
 
         /*
          * Humm this is bad, do an automatic flow conversion
          */
         guess = htmlFindEncoding(ctxt);
         if (guess == NULL) {
             xmlSwitchEncoding(ctxt, XML_CHAR_ENCODING_8859_1);
         } else {
             if (ctxt->input->encoding != NULL)
                 xmlFree((xmlChar *) ctxt->input->encoding);
             ctxt->input->encoding = guess;
             handler = xmlFindCharEncodingHandler((const char *) guess);
             if (handler != NULL) {
                 /*
                  * Don't use UTF-8 encoder which isn't required and
                  * can produce invalid UTF-8.
                  */
                 if (!xmlStrEqual(BAD_CAST handler->name, BAD_CAST "UTF-8"))
                     xmlSwitchToEncoding(ctxt, handler);
             } else {
                 htmlParseErr(ctxt, XML_ERR_INVALID_ENCODING,
                              "Unsupported encoding %s", guess, NULL);
             }
         }
         ctxt->charset = XML_CHAR_ENCODING_UTF8;
     }
 
     /*
      * We are supposed to handle UTF8, check it's valid
      * From rfc2044: encoding of the Unicode values on UTF-8:
      *
      * UCS-4 range (hex.)           UTF-8 octet sequence (binary)
      * 0000 0000-0000 007F   0xxxxxxx
      * 0000 0080-0000 07FF   110xxxxx 10xxxxxx
      * 0000 0800-0000 FFFF   1110xxxx 10xxxxxx 10xxxxxx
      *
      * Check for the 0x110000 limit too
      */
     cur = ctxt->input->cur;
     c = *cur;
     if (c & 0x80) {
         if ((c & 0x40) == 0)
             goto encoding_error;
         if (cur[1] == 0) {
-            xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
+            xmlParserGrow(ctxt);
             cur = ctxt->input->cur;
         }
         if ((cur[1] & 0xc0) != 0x80)
             goto encoding_error;
         if ((c & 0xe0) == 0xe0) {
 
             if (cur[2] == 0) {
-                xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
+                xmlParserGrow(ctxt);
                 cur = ctxt->input->cur;
             }
             if ((cur[2] & 0xc0) != 0x80)
                 goto encoding_error;
             if ((c & 0xf0) == 0xf0) {
                 if (cur[3] == 0) {
-                    xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
+                    xmlParserGrow(ctxt);
                     cur = ctxt->input->cur;
                 }
                 if (((c & 0xf8) != 0xf0) ||
                     ((cur[3] & 0xc0) != 0x80))
                     goto encoding_error;
                 /* 4-byte code */
                 *len = 4;
                 val = (cur[0] & 0x7) << 18;
                 val |= (cur[1] & 0x3f) << 12;
                 val |= (cur[2] & 0x3f) << 6;
                 val |= cur[3] & 0x3f;
                 if (val < 0x10000)
                     goto encoding_error;
             } else {
               /* 3-byte code */
                 *len = 3;
                 val = (cur[0] & 0xf) << 12;
                 val |= (cur[1] & 0x3f) << 6;
                 val |= cur[2] & 0x3f;
                 if (val < 0x800)
                     goto encoding_error;
             }
         } else {
           /* 2-byte code */
             *len = 2;
             val = (cur[0] & 0x1f) << 6;
             val |= cur[1] & 0x3f;
             if (val < 0x80)
                 goto encoding_error;
         }
         if (!IS_CHAR(val)) {
             htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,
                             "Char 0x%X out of allowed range\n", val);
         }
         return(val);
     } else {
         if ((*ctxt->input->cur == 0) &&
             (ctxt->input->cur < ctxt->input->end)) {
             htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,
                             "Char 0x%X out of allowed range\n", 0);
             *len = 1;
             return(' ');
         }
         /* 1-byte code */
         *len = 1;
         return(*ctxt->input->cur);
     }
@@ -587,67 +587,62 @@ static int
 htmlSkipBlankChars(xmlParserCtxtPtr ctxt) {
     int res = 0;
 
     while (IS_BLANK_CH(*(ctxt->input->cur))) {
-	if ((*ctxt->input->cur == 0) &&
-	    (xmlParserInputGrow(ctxt->input, INPUT_CHUNK) <= 0)) {
-		xmlPopInput(ctxt);
-	} else {
-	    if (*(ctxt->input->cur) == '\n') {
-		ctxt->input->line++; ctxt->input->col = 1;
-	    } else ctxt->input->col++;
-	    ctxt->input->cur++;
-	    if (*ctxt->input->cur == 0)
-		xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
-	}
+        if (*(ctxt->input->cur) == '\n') {
+            ctxt->input->line++; ctxt->input->col = 1;
+        } else ctxt->input->col++;
+        ctxt->input->cur++;
+        if (*ctxt->input->cur == 0)
+            xmlParserGrow(ctxt);
 	if (res < INT_MAX)
 	    res++;
     }
     return(res);
 }
 
 
 
 /************************************************************************
  *									*
  *	The list of HTML elements and their properties		*
  *									*
  ************************************************************************/
 
 /*
  *  Start Tag: 1 means the start tag can be omitted
  *  End Tag:   1 means the end tag can be omitted
  *             2 means it's forbidden (empty elements)
  *             3 means the tag is stylistic and should be closed easily
  *  Depr:      this element is deprecated
  *  DTD:       1 means that this element is valid only in the Loose DTD
  *             2 means that this element is valid only in the Frameset DTD
  *
  * Name,Start Tag,End Tag,Save End,Empty,Deprecated,DTD,inline,Description
 	, subElements , impliedsubelt , Attributes, userdata
  */
 
 /* Definitions and a couple of vars for HTML Elements */
 
 #define FONTSTYLE "tt", "i", "b", "u", "s", "strike", "big", "small"
 #define NB_FONTSTYLE 8
 #define PHRASE "em", "strong", "dfn", "code", "samp", "kbd", "var", "cite", "abbr", "acronym"
 #define NB_PHRASE 10
 #define SPECIAL "a", "img", "applet", "embed", "object", "font", "basefont", "br", "script", "map", "q", "sub", "sup", "span", "bdo", "iframe"
 #define NB_SPECIAL 16
 #define INLINE FONTSTYLE, PHRASE, SPECIAL, FORMCTRL
 #define NB_INLINE NB_PCDATA + NB_FONTSTYLE + NB_PHRASE + NB_SPECIAL + NB_FORMCTRL
 #define BLOCK HEADING, LIST, "pre", "p", "dl", "div", "center", "noscript", "noframes", "blockquote", "form", "isindex", "hr", "table", "fieldset", "address"
 #define NB_BLOCK NB_HEADING + NB_LIST + 14
 #define FORMCTRL "input", "select", "textarea", "label", "button"
 #define NB_FORMCTRL 5
 #define PCDATA
 #define NB_PCDATA 0
 #define HEADING "h1", "h2", "h3", "h4", "h5", "h6"
 #define NB_HEADING 6
 #define LIST "ul", "ol", "dir", "menu"
 #define NB_LIST 4
 #define MODIFIER
 #define NB_MODIFIER 0
 #define FLOW BLOCK,INLINE
 #define NB_FLOW NB_BLOCK + NB_INLINE
 #define EMPTY NULL
diff --git a/include/private/parser.h b/include/private/parser.h
index 43945f9e..22e1314a 100644
--- a/include/private/parser.h
+++ b/include/private/parser.h
@@ -23,5 +23,7 @@ XML_HIDDEN void
 __xmlErrEncoding(xmlParserCtxtPtr ctxt, xmlParserErrors xmlerr,
                  const char *msg, const xmlChar *str1,
                  const xmlChar *str2) LIBXML_ATTR_FORMAT(3,0);
+XML_HIDDEN int
+xmlParserGrow(xmlParserCtxtPtr ctxt);
 
 #endif /* XML_PARSER_H_PRIVATE__ */
diff --git a/parser.c b/parser.c
index c5b80e52..6a957fed 100644
--- a/parser.c
+++ b/parser.c
@@ -1977,94 +1977,94 @@ static int spacePush(xmlParserCtxtPtr ctxt, int val) {
 static int spacePop(xmlParserCtxtPtr ctxt) {
     int ret;
     if (ctxt->spaceNr <= 0) return(0);
     ctxt->spaceNr--;
     if (ctxt->spaceNr > 0)
 	ctxt->space = &ctxt->spaceTab[ctxt->spaceNr - 1];
     else
         ctxt->space = &ctxt->spaceTab[0];
     ret = ctxt->spaceTab[ctxt->spaceNr];
     ctxt->spaceTab[ctxt->spaceNr] = -1;
     return(ret);
 }
 
 /*
  * Macros for accessing the content. Those should be used only by the parser,
  * and not exported.
  *
  * Dirty macros, i.e. one often need to make assumption on the context to
  * use them
  *
  *   CUR_PTR return the current pointer to the xmlChar to be parsed.
  *           To be used with extreme caution since operations consuming
  *           characters may move the input buffer to a different location !
  *   CUR     returns the current xmlChar value, i.e. a 8 bit value if compiled
  *           This should be used internally by the parser
  *           only to compare to ASCII values otherwise it would break when
  *           running with UTF-8 encoding.
  *   RAW     same as CUR but in the input buffer, bypass any token
  *           extraction that may have been done
  *   NXT(n)  returns the n'th next xmlChar. Same as CUR is should be used only
  *           to compare on ASCII based substring.
  *   SKIP(n) Skip n xmlChar, and must also be used only to skip ASCII defined
  *           strings without newlines within the parser.
  *   NEXT1(l) Skip 1 xmlChar, and must also be used only to skip 1 non-newline ASCII
  *           defined char within the parser.
  * Clean macros, not dependent of an ASCII context, expect UTF-8 encoding
  *
  *   NEXT    Skip to the next character, this does the proper decoding
  *           in UTF-8 mode. It also pop-up unfinished entities on the fly.
  *   NEXTL(l) Skip the current unicode character of l xmlChars long.
  *   CUR_CHAR(l) returns the current unicode character (int), set l
  *           to the number of xmlChars used for the encoding [0-5].
  *   CUR_SCHAR  same but operate on a string instead of the context
  *   COPY_BUF  copy the current unicode char to the target buffer, increment
  *            the index
  *   GROW, SHRINK  handling of input buffers
  */
 
 #define RAW (*ctxt->input->cur)
 #define CUR (*ctxt->input->cur)
 #define NXT(val) ctxt->input->cur[(val)]
 #define CUR_PTR ctxt->input->cur
 #define BASE_PTR ctxt->input->base
 
 #define CMP4( s, c1, c2, c3, c4 ) \
   ( ((unsigned char *) s)[ 0 ] == c1 && ((unsigned char *) s)[ 1 ] == c2 && \
     ((unsigned char *) s)[ 2 ] == c3 && ((unsigned char *) s)[ 3 ] == c4 )
 #define CMP5( s, c1, c2, c3, c4, c5 ) \
   ( CMP4( s, c1, c2, c3, c4 ) && ((unsigned char *) s)[ 4 ] == c5 )
 #define CMP6( s, c1, c2, c3, c4, c5, c6 ) \
   ( CMP5( s, c1, c2, c3, c4, c5 ) && ((unsigned char *) s)[ 5 ] == c6 )
 #define CMP7( s, c1, c2, c3, c4, c5, c6, c7 ) \
   ( CMP6( s, c1, c2, c3, c4, c5, c6 ) && ((unsigned char *) s)[ 6 ] == c7 )
 #define CMP8( s, c1, c2, c3, c4, c5, c6, c7, c8 ) \
   ( CMP7( s, c1, c2, c3, c4, c5, c6, c7 ) && ((unsigned char *) s)[ 7 ] == c8 )
 #define CMP9( s, c1, c2, c3, c4, c5, c6, c7, c8, c9 ) \
   ( CMP8( s, c1, c2, c3, c4, c5, c6, c7, c8 ) && \
     ((unsigned char *) s)[ 8 ] == c9 )
 #define CMP10( s, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10 ) \
   ( CMP9( s, c1, c2, c3, c4, c5, c6, c7, c8, c9 ) && \
     ((unsigned char *) s)[ 9 ] == c10 )
 
 #define SKIP(val) do {							\
     ctxt->input->cur += (val),ctxt->input->col+=(val);			\
     if (*ctxt->input->cur == 0)						\
-        xmlParserInputGrow(ctxt->input, INPUT_CHUNK);			\
+        xmlParserGrow(ctxt);						\
   } while (0)
 
 #define SKIPL(val) do {							\
     int skipl;								\
     for(skipl=0; skipl<val; skipl++) {					\
 	if (*(ctxt->input->cur) == '\n') {				\
 	ctxt->input->line++; ctxt->input->col = 1;			\
 	} else ctxt->input->col++;					\
 	ctxt->input->cur++;						\
     }									\
     if (*ctxt->input->cur == 0)						\
-        xmlParserInputGrow(ctxt->input, INPUT_CHUNK);			\
+        xmlParserGrow(ctxt);						\
   } while (0)
 
 #define SHRINK if ((ctxt->progressive == 0) &&				\
 		   (ctxt->input->cur - ctxt->input->base > 2 * INPUT_CHUNK) && \
 		   (ctxt->input->end - ctxt->input->cur < 2 * INPUT_CHUNK)) \
 	xmlSHRINK (ctxt);
@@ -2072,89 +2072,47 @@ static int spacePop(xmlParserCtxtPtr ctxt) {
 static void xmlSHRINK (xmlParserCtxtPtr ctxt) {
     /* Don't shrink memory buffers. */
     if ((ctxt->input->buf) &&
         ((ctxt->input->buf->encoder) || (ctxt->input->buf->readcallback)))
         xmlParserInputShrink(ctxt->input);
     if (*ctxt->input->cur == 0)
-        xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
+        xmlParserGrow(ctxt);
 }
 
 #define GROW if ((ctxt->progressive == 0) &&				\
 		 (ctxt->input->end - ctxt->input->cur < INPUT_CHUNK))	\
-	xmlGROW (ctxt);
-
-static void xmlGROW (xmlParserCtxtPtr ctxt) {
-    xmlParserInputPtr in = ctxt->input;
-    xmlParserInputBufferPtr buf = in->buf;
-    ptrdiff_t curEnd = in->end - in->cur;
-    ptrdiff_t curBase = in->cur - in->base;
-    int ret;
-
-    if (buf == NULL)
-        return;
-    /* Don't grow memory buffers. */
-    if ((buf->encoder == NULL) && (buf->readcallback == NULL))
-        return;
-
-    if (((curEnd > XML_MAX_LOOKUP_LIMIT) ||
-         (curBase > XML_MAX_LOOKUP_LIMIT)) &&
-        ((ctxt->options & XML_PARSE_HUGE) == 0)) {
-        xmlFatalErr(ctxt, XML_ERR_INTERNAL_ERROR, "Huge input lookup");
-        xmlHaltParser(ctxt);
-	return;
-    }
-
-    if (xmlBufUse(buf->buffer) > (unsigned int) curBase + INPUT_CHUNK)
-        return;
-
-    ret = xmlParserInputBufferGrow(buf, INPUT_CHUNK);
-
-    in->base = xmlBufContent(buf->buffer);
-    if (in->base == NULL) {
-        in->base = BAD_CAST "";
-        in->cur = in->base;
-        in->end = in->base;
-        xmlErrMemory(ctxt, NULL);
-        return;
-    }
-    in->cur = in->base + curBase;
-    in->end = xmlBufEnd(buf->buffer);
-
-    /* TODO: Get error code from xmlParserInputBufferGrow */
-    if (ret < 0)
-        xmlFatalErr(ctxt, XML_ERR_INTERNAL_ERROR, "Growing input buffer");
-}
+	xmlParserGrow(ctxt);
 
 #define SKIP_BLANKS xmlSkipBlankChars(ctxt)
 
 #define NEXT xmlNextChar(ctxt)
 
 #define NEXT1 {								\
 	ctxt->input->col++;						\
 	ctxt->input->cur++;						\
 	if (*ctxt->input->cur == 0)					\
-	    xmlParserInputGrow(ctxt->input, INPUT_CHUNK);		\
+	    xmlParserGrow(ctxt);						\
     }
 
 #define NEXTL(l) do {							\
     if (*(ctxt->input->cur) == '\n') {					\
 	ctxt->input->line++; ctxt->input->col = 1;			\
     } else ctxt->input->col++;						\
     ctxt->input->cur += l;				\
   } while (0)
 
 #define CUR_CHAR(l) xmlCurrentChar(ctxt, &l)
 #define CUR_SCHAR(s, l) xmlStringCurrentChar(ctxt, s, &l)
 
 #define COPY_BUF(l,b,i,v)						\
     if (l == 1) b[i++] = v;						\
     else i += xmlCopyCharMultiByte(&b[i],v)
 
 /**
  * xmlSkipBlankChars:
  * @ctxt:  the XML parser context
  *
  * skip all blanks character found at that point in the input streams.
  * It pops up finished entities in the process if allowable at that point.
  *
  * Returns the number of space chars skipped
  */
@@ -2163,102 +2121,102 @@ int
 xmlSkipBlankChars(xmlParserCtxtPtr ctxt) {
     int res = 0;
 
     /*
      * It's Okay to use CUR/NEXT here since all the blanks are on
      * the ASCII range.
      */
     if (((ctxt->inputNr == 1) && (ctxt->instate != XML_PARSER_DTD)) ||
         (ctxt->instate == XML_PARSER_START)) {
 	const xmlChar *cur;
 	/*
 	 * if we are in the document content, go really fast
 	 */
 	cur = ctxt->input->cur;
 	while (IS_BLANK_CH(*cur)) {
 	    if (*cur == '\n') {
 		ctxt->input->line++; ctxt->input->col = 1;
 	    } else {
 		ctxt->input->col++;
 	    }
 	    cur++;
 	    if (res < INT_MAX)
 		res++;
 	    if (*cur == 0) {
 		ctxt->input->cur = cur;
-		xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
+		xmlParserGrow(ctxt);
 		cur = ctxt->input->cur;
 	    }
 	}
 	ctxt->input->cur = cur;
     } else {
         int expandPE = ((ctxt->external != 0) || (ctxt->inputNr != 1));
 
 	while (ctxt->instate != XML_PARSER_EOF) {
             if (IS_BLANK_CH(CUR)) { /* CHECKED tstblanks.xml */
 		NEXT;
 	    } else if (CUR == '%') {
                 /*
                  * Need to handle support of entities branching here
                  */
 	        if ((expandPE == 0) || (IS_BLANK_CH(NXT(1))) || (NXT(1) == 0))
                     break;
 	        xmlParsePEReference(ctxt);
             } else if (CUR == 0) {
                 unsigned long consumed;
                 xmlEntityPtr ent;
 
                 if (ctxt->inputNr <= 1)
                     break;
 
                 consumed = ctxt->input->consumed;
                 xmlSaturatedAddSizeT(&consumed,
                                      ctxt->input->cur - ctxt->input->base);
 
                 /*
                  * Add to sizeentities when parsing an external entity
                  * for the first time.
                  */
                 ent = ctxt->input->entity;
                 if ((ent->etype == XML_EXTERNAL_PARAMETER_ENTITY) &&
                     ((ent->flags & XML_ENT_PARSED) == 0)) {
                     ent->flags |= XML_ENT_PARSED;
 
                     xmlSaturatedAdd(&ctxt->sizeentities, consumed);
                 }
 
                 xmlParserEntityCheck(ctxt, consumed);
 
                 xmlPopInput(ctxt);
             } else {
                 break;
             }
 
             /*
              * Also increase the counter when entering or exiting a PERef.
              * The spec says: "When a parameter-entity reference is recognized
              * in the DTD and included, its replacement text MUST be enlarged
              * by the attachment of one leading and one following space (#x20)
              * character."
              */
 	    if (res < INT_MAX)
 		res++;
         }
     }
     return(res);
 }
 
 /************************************************************************
  *									*
  *		Commodity functions to handle entities			*
  *									*
  ************************************************************************/
 
 /**
  * xmlPopInput:
  * @ctxt:  an XML parser context
  *
  * xmlPopInput: the current input pointed by ctxt->input came to an end
  *          pop it and return the next char.
  *
  * Returns the current xmlChar in the parser context
  */
@@ -2266,29 +2224,29 @@ xmlChar
 xmlPopInput(xmlParserCtxtPtr ctxt) {
     xmlParserInputPtr input;
 
     if ((ctxt == NULL) || (ctxt->inputNr <= 1)) return(0);
     if (xmlParserDebugEntities)
 	xmlGenericError(xmlGenericErrorContext,
 		"Popping input %d\n", ctxt->inputNr);
     if ((ctxt->inputNr > 1) && (ctxt->inSubset == 0) &&
         (ctxt->instate != XML_PARSER_EOF))
         xmlFatalErr(ctxt, XML_ERR_INTERNAL_ERROR,
                     "Unfinished entity outside the DTD");
     input = inputPop(ctxt);
     if (input->entity != NULL)
         input->entity->flags &= ~XML_ENT_EXPANDING;
     xmlFreeInputStream(input);
     if (*ctxt->input->cur == 0)
-        xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
+        xmlParserGrow(ctxt);
     return(CUR);
 }
 
 /**
  * xmlPushInput:
  * @ctxt:  an XML parser context
  * @input:  an XML parser input fragment (entity, XML fragment ...).
  *
  * xmlPushInput: switch to a new input stream which is stacked on top
  *               of the previous one(s).
  * Returns -1 in case of error or the index in the input stack
  */
diff --git a/parserInternals.c b/parserInternals.c
index f55700e5..1c3fb812 100644
--- a/parserInternals.c
+++ b/parserInternals.c
@@ -271,17 +271,68 @@ int
 xmlParserInputRead(xmlParserInputPtr in ATTRIBUTE_UNUSED, int len ATTRIBUTE_UNUSED) {
     return(-1);
 }
 
+/**
+ * xmlParserGrow:
+ * @ctxt:  an XML parser context
+ */
+int
+xmlParserGrow(xmlParserCtxtPtr ctxt) {
+    xmlParserInputPtr in = ctxt->input;
+    xmlParserInputBufferPtr buf = in->buf;
+    ptrdiff_t curEnd = in->end - in->cur;
+    ptrdiff_t curBase = in->cur - in->base;
+    int ret;
+
+    if (buf == NULL)
+        return(0);
+    /* Don't grow memory buffers. */
+    if ((buf->encoder == NULL) && (buf->readcallback == NULL))
+        return(0);
+
+    if (((curEnd > XML_MAX_LOOKUP_LIMIT) ||
+         (curBase > XML_MAX_LOOKUP_LIMIT)) &&
+        ((ctxt->options & XML_PARSE_HUGE) == 0)) {
+        xmlErrInternal(ctxt, "Huge input lookup", NULL);
+        ctxt->instate = XML_PARSER_EOF;
+	return(-1);
+    }
+
+    if (curEnd >= INPUT_CHUNK)
+        return(0);
+
+    ret = xmlParserInputBufferGrow(buf, INPUT_CHUNK);
+
+    in->base = xmlBufContent(buf->buffer);
+    if (in->base == NULL) {
+        in->base = BAD_CAST "";
+        in->cur = in->base;
+        in->end = in->base;
+        xmlErrMemory(ctxt, NULL);
+        return(-1);
+    }
+    in->cur = in->base + curBase;
+    in->end = xmlBufEnd(buf->buffer);
+
+    /* TODO: Get error code from xmlParserInputBufferGrow */
+    if (ret < 0) {
+        xmlErrInternal(ctxt, "Growing input buffer", NULL);
+        ctxt->instate = XML_PARSER_EOF;
+    }
+
+    return(ret);
+}
+
 /**
  * xmlParserInputGrow:
  * @in:  an XML parser input
  * @len:  an indicative size for the lookahead
  *
  * DEPRECATED: Don't use.
  *
  * This function increase the input for the parser. It tries to
  * preserve pointers to the input buffer, and keep already read data
  *
  * Returns the amount of char read, or -1 in case of error, 0 indicate the
  * end of this entity
  */
@@ -396,117 +447,116 @@ void
 xmlNextChar(xmlParserCtxtPtr ctxt)
 {
     if ((ctxt == NULL) || (ctxt->instate == XML_PARSER_EOF) ||
         (ctxt->input == NULL))
         return;
 
     if (!(VALID_CTXT(ctxt))) {
         xmlErrInternal(ctxt, "Parser input data memory error\n", NULL);
 	ctxt->errNo = XML_ERR_INTERNAL_ERROR;
         xmlStopParser(ctxt);
 	return;
     }
 
-    if ((ctxt->input->cur >= ctxt->input->end) &&
-        (xmlParserInputGrow(ctxt->input, INPUT_CHUNK) <= 0)) {
+    if ((ctxt->input->cur >= ctxt->input->end) && (xmlParserGrow(ctxt) <= 0)) {
         return;
     }
 
     if (ctxt->charset == XML_CHAR_ENCODING_UTF8) {
         const unsigned char *cur;
         unsigned char c;
 
         /*
          *   2.11 End-of-Line Handling
          *   the literal two-character sequence "#xD#xA" or a standalone
          *   literal #xD, an XML processor must pass to the application
          *   the single character #xA.
          */
         if (*(ctxt->input->cur) == '\n') {
             ctxt->input->line++; ctxt->input->col = 1;
         } else
             ctxt->input->col++;
 
         /*
          * We are supposed to handle UTF8, check it's valid
          * From rfc2044: encoding of the Unicode values on UTF-8:
          *
          * UCS-4 range (hex.)           UTF-8 octet sequence (binary)
          * 0000 0000-0000 007F   0xxxxxxx
          * 0000 0080-0000 07FF   110xxxxx 10xxxxxx
          * 0000 0800-0000 FFFF   1110xxxx 10xxxxxx 10xxxxxx
          *
          * Check for the 0x110000 limit too
          */
         cur = ctxt->input->cur;
 
         c = *cur;
         if (c & 0x80) {
             if (c == 0xC0)
 	        goto encoding_error;
             if (cur[1] == 0) {
-                xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
+                xmlParserGrow(ctxt);
                 cur = ctxt->input->cur;
             }
             if ((cur[1] & 0xc0) != 0x80)
                 goto encoding_error;
             if ((c & 0xe0) == 0xe0) {
                 unsigned int val;
 
                 if (cur[2] == 0) {
-                    xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
+                    xmlParserGrow(ctxt);
                     cur = ctxt->input->cur;
                 }
                 if ((cur[2] & 0xc0) != 0x80)
                     goto encoding_error;
                 if ((c & 0xf0) == 0xf0) {
                     if (cur[3] == 0) {
-                        xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
+                        xmlParserGrow(ctxt);
                         cur = ctxt->input->cur;
                     }
                     if (((c & 0xf8) != 0xf0) ||
                         ((cur[3] & 0xc0) != 0x80))
                         goto encoding_error;
                     /* 4-byte code */
                     ctxt->input->cur += 4;
                     val = (cur[0] & 0x7) << 18;
                     val |= (cur[1] & 0x3f) << 12;
                     val |= (cur[2] & 0x3f) << 6;
                     val |= cur[3] & 0x3f;
                 } else {
                     /* 3-byte code */
                     ctxt->input->cur += 3;
                     val = (cur[0] & 0xf) << 12;
                     val |= (cur[1] & 0x3f) << 6;
                     val |= cur[2] & 0x3f;
                 }
                 if (((val > 0xd7ff) && (val < 0xe000)) ||
                     ((val > 0xfffd) && (val < 0x10000)) ||
                     (val >= 0x110000)) {
 		xmlErrEncodingInt(ctxt, XML_ERR_INVALID_CHAR,
 				  "Char 0x%X out of allowed range\n",
 				  val);
                 }
             } else
                 /* 2-byte code */
                 ctxt->input->cur += 2;
         } else
             /* 1-byte code */
             ctxt->input->cur++;
     } else {
         /*
          * Assume it's a fixed length encoding (1) with
          * a compatible encoding for the ASCII set, since
          * XML constructs only use < 128 chars
          */
 
         if (*(ctxt->input->cur) == '\n') {
             ctxt->input->line++; ctxt->input->col = 1;
         } else
             ctxt->input->col++;
         ctxt->input->cur++;
     }
     if (*ctxt->input->cur == 0)
-        xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
+        xmlParserGrow(ctxt);
     return;
 encoding_error:
     /*
@@ -558,112 +608,112 @@ int
 xmlCurrentChar(xmlParserCtxtPtr ctxt, int *len) {
     if ((ctxt == NULL) || (len == NULL) || (ctxt->input == NULL)) return(0);
     if (ctxt->instate == XML_PARSER_EOF)
 	return(0);
 
     if ((*ctxt->input->cur >= 0x20) && (*ctxt->input->cur <= 0x7F)) {
 	    *len = 1;
 	    return(*ctxt->input->cur);
     }
     if (ctxt->charset == XML_CHAR_ENCODING_UTF8) {
 	/*
 	 * We are supposed to handle UTF8, check it's valid
 	 * From rfc2044: encoding of the Unicode values on UTF-8:
 	 *
 	 * UCS-4 range (hex.)           UTF-8 octet sequence (binary)
 	 * 0000 0000-0000 007F   0xxxxxxx
 	 * 0000 0080-0000 07FF   110xxxxx 10xxxxxx
 	 * 0000 0800-0000 FFFF   1110xxxx 10xxxxxx 10xxxxxx
 	 *
 	 * Check for the 0x110000 limit too
 	 */
 	const unsigned char *cur = ctxt->input->cur;
 	unsigned char c;
 	unsigned int val;
 
 	c = *cur;
 	if (c & 0x80) {
 	    if (((c & 0x40) == 0) || (c == 0xC0))
 		goto encoding_error;
 	    if (cur[1] == 0) {
-		xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
+		xmlParserGrow(ctxt);
                 cur = ctxt->input->cur;
             }
 	    if ((cur[1] & 0xc0) != 0x80)
 		goto encoding_error;
 	    if ((c & 0xe0) == 0xe0) {
 		if (cur[2] == 0) {
-		    xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
+		    xmlParserGrow(ctxt);
                     cur = ctxt->input->cur;
                 }
 		if ((cur[2] & 0xc0) != 0x80)
 		    goto encoding_error;
 		if ((c & 0xf0) == 0xf0) {
 		    if (cur[3] == 0) {
-			xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
+			xmlParserGrow(ctxt);
                         cur = ctxt->input->cur;
                     }
 		    if (((c & 0xf8) != 0xf0) ||
 			((cur[3] & 0xc0) != 0x80))
 			goto encoding_error;
 		    /* 4-byte code */
 		    *len = 4;
 		    val = (cur[0] & 0x7) << 18;
 		    val |= (cur[1] & 0x3f) << 12;
 		    val |= (cur[2] & 0x3f) << 6;
 		    val |= cur[3] & 0x3f;
 		    if (val < 0x10000)
 			goto encoding_error;
 		} else {
 		  /* 3-byte code */
 		    *len = 3;
 		    val = (cur[0] & 0xf) << 12;
 		    val |= (cur[1] & 0x3f) << 6;
 		    val |= cur[2] & 0x3f;
 		    if (val < 0x800)
 			goto encoding_error;
 		}
 	    } else {
 	      /* 2-byte code */
 		*len = 2;
 		val = (cur[0] & 0x1f) << 6;
 		val |= cur[1] & 0x3f;
 		if (val < 0x80)
 		    goto encoding_error;
 	    }
 	    if (!IS_CHAR(val)) {
 	        xmlErrEncodingInt(ctxt, XML_ERR_INVALID_CHAR,
 				  "Char 0x%X out of allowed range\n", val);
 	    }
 	    return(val);
 	} else {
 	    /* 1-byte code */
 	    *len = 1;
 	    if (*ctxt->input->cur == 0)
-		xmlParserInputGrow(ctxt->input, INPUT_CHUNK);
+		xmlParserGrow(ctxt);
 	    if ((*ctxt->input->cur == 0) &&
 	        (ctxt->input->end > ctxt->input->cur)) {
 	        xmlErrEncodingInt(ctxt, XML_ERR_INVALID_CHAR,
 				  "Char 0x0 out of allowed range\n", 0);
 	    }
 	    if (*ctxt->input->cur == 0xD) {
 		if (ctxt->input->cur[1] == 0xA) {
 		    ctxt->input->cur++;
 		}
 		return(0xA);
 	    }
 	    return(*ctxt->input->cur);
 	}
     }
     /*
      * Assume it's a fixed length encoding (1) with
      * a compatible encoding for the ASCII set, since
      * XML constructs only use < 128 chars
      */
     *len = 1;
     if (*ctxt->input->cur == 0xD) {
 	if (ctxt->input->cur[1] == 0xA) {
 	    ctxt->input->cur++;
 	}
 	return(0xA);
     }
     return(*ctxt->input->cur);
