commit 361febcf961baa853f34909cd3925ffa7f90e7ea
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Thu Sep 1 10:10:55 2022 +0100

    oss-fuzz 50847: Bounds check points indices in ttfOutliner__BuildGlyphOutlineAux()

diff --git a/base/ttfmain.c b/base/ttfmain.c
index 94f2eb86a..498cc9214 100644
--- a/base/ttfmain.c
+++ b/base/ttfmain.c
@@ -506,340 +506,347 @@ static FontError ttfOutliner__BuildGlyphOutlineAux(ttfOutliner *self, int glyphI
 retry:
     if (r->get_metrics(r, glyphIndex, self->bVertical, &sideBearing, &nAdvance) < 0) {
         /* fixme: the error code is missing due to interface restrictions. */
         goto errex;
     }
     gOutline->sideBearing = shortToF26Dot6(sideBearing);
     gOutline->advance.x = shortToF26Dot6(nAdvance);
     gOutline->advance.y = 0;
     self->bFirst = FALSE;
 
     if (!self->bOutline)
         return fNoError;
     if (!r->LoadGlyph(r, glyphIndex, &glyph, &glyph_size))
         return fGlyphNotFound;
     if (r->Eof(r)) {
         r->ReleaseGlyph(r, glyphIndex);
         gOutline->xMinB = gOutline->yMinB = 0;
         gOutline->xMaxB = gOutline->yMaxB = 0;
         return fNoError;
     }
     if (r->Error(r))
         goto errex;
     nPosBeg = r->Tell(r);
 
     gOutline->contourCount = ttfReader__Short(r);
     subglyph.bbox.xMin = ttfReader__Short(r);
     subglyph.bbox.yMin = ttfReader__Short(r);
     subglyph.bbox.xMax = ttfReader__Short(r);
     subglyph.bbox.yMax = ttfReader__Short(r);
 
     if (exec->metrics.x_scale1 == 0 || exec->metrics.x_scale2 == 0
     ||  exec->metrics.y_scale1 == 0 || exec->metrics.y_scale2 == 0) {
         goto errex;
     }
     gOutline->xMinB = Scale_X(&exec->metrics, subglyph.bbox.xMin);
     gOutline->yMinB = Scale_Y(&exec->metrics, subglyph.bbox.yMin);
     gOutline->xMaxB = Scale_X(&exec->metrics, subglyph.bbox.xMax);
     gOutline->yMaxB = Scale_Y(&exec->metrics, subglyph.bbox.yMax);
 
     /* FreeType stuff beg */
     Init_Glyph_Component(&subglyph, NULL, pFont->exec);
     subglyph.leftBearing = sideBearing;
     subglyph.advanceWidth = nAdvance;
     subglyph.pp1.x = subglyph.bbox.xMin - sideBearing;
     subglyph.pp1.y = 0;
     subglyph.pp2.x = subglyph.pp1.x + nAdvance;
     subglyph.pp2.y = 0;
     /* FreeType stuff end */
 
     if (gOutline->contourCount == 0)
         gOutline->pointCount = 0;
     else if (gOutline->contourCount == -1) {
         unsigned short flags, index, bHaveInstructions = 0;
         unsigned int nUsage = 0;
         unsigned int nPos;
         unsigned int n_ins;
 
         gOutline->bCompound = TRUE;
         if (tti->usage_top + pFont->nMaxComponents > tti->usage_size)
             return fBadFontData;
         gOutline->contourCount = gOutline->pointCount = 0;
         do {
             FixMatrix m;
             ttfSubGlyphUsage *e;
 
             if (nUsage >= pFont->nMaxComponents) {
                 error = fMemoryError; goto ex;
             }
             flags = ttfReader__UShort(r);
             index = ttfReader__UShort(r);
             bHaveInstructions |= (flags & WE_HAVE_INSTRUCTIONS);
             if (flags & ARG_1_AND_2_ARE_WORDS) {
                 arg1 = ttfReader__Short(r);
                 arg2 = ttfReader__Short(r);
             } else {
                 if (flags & ARGS_ARE_XY_VALUES) {
                     /* offsets are signed */
                     arg1 = ttfReader__SignedByte(r);
                     arg2 = ttfReader__SignedByte(r);
                 } else { /* anchor points are unsigned */
                     arg1 = ttfReader__Byte(r);
                     arg2 = ttfReader__Byte(r);
                 }
             }
             m.b = m.c = m.tx = m.ty = 0;
             if (flags & WE_HAVE_A_SCALE)
                 m.a = m.d = (TT_Fixed)ttfReader__Short(r) << 2;
             else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
                 m.a = (TT_Fixed)ttfReader__Short(r) << 2;
                 m.d = (TT_Fixed)ttfReader__Short(r) << 2;
             } else if (flags & WE_HAVE_A_TWO_BY_TWO) {
                 m.a = (TT_Fixed)ttfReader__Short(r)<<2;
                 m.b = (TT_Fixed)ttfReader__Short(r)<<2;
                 m.c = (TT_Fixed)ttfReader__Short(r)<<2;
                 m.d = (TT_Fixed)ttfReader__Short(r)<<2;
             } else
                 m.a = m.d = 65536;
             e = &usage[nUsage];
             e->m = m;
             e->index = index;
             e->arg1 = arg1;
             e->arg2 = arg2;
             e->flags = flags;
             nUsage++;
         } while (flags & MORE_COMPONENTS);
         if (r->Error(r))
             goto errex;
         nPos = r->Tell(r);
         n_ins = ((!r->Eof(r) && (bHaveInstructions)) ? ttfReader__UShort(r) : 0);
         nPos = r->Tell(r);
         r->ReleaseGlyph(r, glyphIndex);
         glyph = NULL;
         for (i = 0; i < nUsage; i++) {
             ttfGlyphOutline out;
             ttfSubGlyphUsage *e = &usage[i];
             int j;
             TT_Error code;
             int nPointsStored = gOutline->pointCount, nContoursStored = gOutline->contourCount;
 
             out.contourCount = 0;
             out.pointCount = 0;
             out.bCompound = FALSE;
             pts->org_x += nPointsStored;
             pts->org_y += nPointsStored;
             pts->cur_x += nPointsStored;
             pts->cur_y += nPointsStored;
             pts->touch += nPointsStored;
             pts->contours += nContoursStored;
             tti->usage_top += nUsage;
             code = ttfOutliner__BuildGlyphOutlineAux(self, e->index, m_orig, &out);
             pts->org_x -= nPointsStored;
             pts->org_y -= nPointsStored;
             pts->cur_x -= nPointsStored;
             pts->cur_y -= nPointsStored;
             pts->touch -= nPointsStored;
             tti->usage_top -= nUsage;
             pts->contours -= nContoursStored;
             if (code == fPatented)
                 error = code;
             else if (code != fNoError) {
                 error = code;
                 goto ex;
             }
             if (flags & ARGS_ARE_XY_VALUES) {
                 e->m.tx = Scale_X( &exec->metrics, e->arg1 ) << 10;
                 e->m.ty = Scale_Y( &exec->metrics, e->arg2 ) << 10;
             } else {
-                e->m.tx = (pts->org_x[e->arg1] - pts->org_x[gOutline->pointCount + e->arg2]) << 10;
-                e->m.ty = (pts->org_y[e->arg1] - pts->org_y[gOutline->pointCount + e->arg2]) << 10;
+                if (e->arg1 < 0 || e->arg1 > pts->n_points
+                 || (gOutline->pointCount + e->arg2) < 0 || (gOutline->pointCount + e->arg2) > pts->n_points) {
+                    error = fBadFontData;
+                    goto ex;
+                }
+                else {
+                    e->m.tx = (pts->org_x[e->arg1] - pts->org_x[gOutline->pointCount + e->arg2]) << 10;
+                    e->m.ty = (pts->org_y[e->arg1] - pts->org_y[gOutline->pointCount + e->arg2]) << 10;
+                }
             }
             MoveGlyphOutline(pts, nPointsStored, &out, &e->m);
             for (j = nContoursStored; j < out.contourCount + nContoursStored; j++)
                 pts->contours[j] += nPointsStored;
             gOutline->contourCount += out.contourCount;
             gOutline->pointCount += out.pointCount;
             if(e->flags & USE_MY_METRICS) {
                 gOutline->advance.x = out.advance.x;
                 gOutline->sideBearing = out.sideBearing;
             }
         }
         if (execute_bytecode && !skip_instructions && n_ins &&
                 !(pFont->inst->GS.instruct_control & 1)) {
             TT_Error code;
 
             r->LoadGlyph(r, glyphIndex, &glyph, &glyph_size);
             if (r->Error(r))
                 goto errex;
             if (nPos + n_ins > glyph_size)
                 goto errex;
             code = Set_CodeRange(exec, TT_CodeRange_Glyph, (byte *)glyph + nPos, n_ins);
             if (!code) {
                 int k;
                 F26Dot6 x;
 
                 nPoints = gOutline->pointCount + 2;
                 exec->pts = subglyph.zone;
                 pts->n_points = nPoints;
                 pts->n_contours = gOutline->contourCount;
                 /* add phantom points : */
                 pts->org_x[nPoints - 2] = Scale_X(&exec->metrics, subglyph.pp1.x);
                 pts->org_y[nPoints - 2] = Scale_Y(&exec->metrics, subglyph.pp1.y);
                 pts->org_x[nPoints - 1] = Scale_X(&exec->metrics, subglyph.pp2.x);
                 pts->org_y[nPoints - 1] = Scale_Y(&exec->metrics, subglyph.pp2.y);
                 pts->touch[nPoints - 1] = 0;
                 pts->touch[nPoints - 2] = 0;
                 /* if hinting, round the phantom points (not sure) : */
                 x = pts->org_x[nPoints - 2];
                 x = ((x + 32) & -64) - x;
                 if (x)
                     for (k = 0; k < nPoints; k++)
                         pts->org_x[k] += x;
                 pts->cur_x[nPoints - 1] = (pts->cur_x[nPoints - 1] + 32) & -64;
                 for (k = 0; k < nPoints; k++)
                     pts->touch[k] = pts->touch[k] & TT_Flag_On_Curve;
                 org_to_cur(nPoints, pts);
                 exec->is_composite = TRUE;
                 if (pFont->patented)
                     code = TT_Err_Invalid_Engine;
                 else
                     code = Context_Run(exec, FALSE);
                 if (!code)
                     cur_to_org(nPoints, pts);
                 else if (code == TT_Err_Invalid_Engine)
                     error = fPatented;
                 else {
                     /* We have a range of errors that can be caused by
                      * bad bytecode
                      */
                     if ((int)code >= TT_Err_Invalid_Opcode
                      && (int)code <= TT_Err_Invalid_Displacement) {
                         error = fBadInstruction;
                     }
                     else {
                         error = fBadFontData;
                     }
                 }
             }
             Unset_CodeRange(exec);
             Clear_CodeRange(exec, TT_CodeRange_Glyph);
         }
     } else if (gOutline->contourCount > 0) {
         int i;
         bool bInsOK;
         byte *onCurve, *stop, flag;
         short *endPoints;
         unsigned int nPos;
         unsigned int n_ins;
 
         if (self->nContoursTotal + gOutline->contourCount > exec->n_contours) {
             error = fBadFontData; goto ex;
         }
         endPoints = pts->contours;
         for (i = 0; i < gOutline->contourCount; i++)
             endPoints[i] = ttfReader__Short(r);
         for (i = 1; i < gOutline->contourCount; i++)
             if (endPoints[i - 1] < 0 || endPoints[i - 1] >= endPoints[i]) {
                 error = fBadFontData; goto ex;
             }
         nPoints = gOutline->pointCount = endPoints[gOutline->contourCount - 1] + 1;
         if (nPoints < 0 || self->nPointsTotal + nPoints + 2 > exec->n_points) {
             error = fBadFontData; goto ex;
         }
         n_ins = ttfReader__Short(r);
         nPos = r->Tell(r);
         r->Seek(r, nPos + n_ins);
         if (r->Error(r))
             goto errex;
         bInsOK = !Set_CodeRange(exec, TT_CodeRange_Glyph, (byte *)glyph + nPos, n_ins);
         onCurve = pts->touch;
         stop = onCurve + gOutline->pointCount;
 
         while (onCurve < stop) {
             *onCurve++ = flag = ttfReader__Byte(r);
             if (flag & REPEAT_FLAGS) {
                 count = ttfReader__Byte(r);
                 for (--count; count >= 0 && onCurve < stop; --count)
                     *onCurve++ = flag;
             }
         }
         /*  Lets do X */
         {   short coord = (self->bVertical ? 0 : sideBearing - subglyph.bbox.xMin);
             F26Dot6* x = pts->org_x;
             onCurve = pts->touch;
             while (onCurve < stop) {
                 if ((flag = *onCurve++) & XSHORT) {
                     if (flag & SHORT_X_IS_POS)
                         coord += ttfReader__Byte(r);
                     else
                     coord -= ttfReader__Byte(r);
                 } else if (!(flag & NEXT_X_IS_ZERO))
                     coord += ttfReader__Short(r);
                 *x++ = Scale_X(&exec->metrics, coord);
             }
         }
         /*  Lets do Y */
         {   short coord = 0;
             F26Dot6* y = pts->org_y;
             onCurve = pts->touch;
             while (onCurve < stop) {
                 if((flag = *onCurve) & YSHORT)
                     if ( flag & SHORT_Y_IS_POS )
                         coord += ttfReader__Byte(r);
                     else
                         coord -= ttfReader__Byte(r);
                 else if(!(flag & NEXT_Y_IS_ZERO))
                     coord += ttfReader__Short(r);
                 *y++ = Scale_Y( &exec->metrics, coord );
 
                 /*  Filter off the extra bits */
                 *onCurve++ = flag & ONCURVE;
             }
         }
         MoveGlyphOutline(pts, 0, gOutline, m_orig);
         self->nContoursTotal += gOutline->contourCount;
         self->nPointsTotal += nPoints;
         if (execute_bytecode && !skip_instructions &&
                 !r->Error(r) && n_ins && bInsOK && !(pFont->inst->GS.instruct_control & 1)) {
             TGlyph_Zone *pts = &exec->pts;
             int k;
             F26Dot6 x;
             TT_Error code;
 
             exec->is_composite = FALSE;
             /* add phantom points : */
             pts->org_x[nPoints    ] = Scale_X(&exec->metrics, subglyph.pp1.x);
             pts->org_y[nPoints    ] = Scale_Y(&exec->metrics, subglyph.pp1.y);
             pts->org_x[nPoints + 1] = Scale_X(&exec->metrics, subglyph.pp2.x);
             pts->org_y[nPoints + 1] = Scale_Y(&exec->metrics, subglyph.pp2.y);
             pts->touch[nPoints    ] = 0;
             pts->touch[nPoints + 1] = 0;
             pts->n_points   = nPoints + 2;
             pts->n_contours = gOutline->contourCount;
             /* if hinting, round the phantom points (not sure) : */
             x = pts->org_x[nPoints];
             x = ((x + 32) & -64) - x;
             if (x)
                 for (k = 0; k < nPoints + 2; k++)
                     pts->org_x[k] += x;
             org_to_cur(nPoints + 2, pts);
             exec->is_composite = FALSE;
             for (k = 0; k < nPoints + 2; k++)
                 pts->touch[k] &= TT_Flag_On_Curve;
             if (pFont->patented)
                 code = TT_Err_Invalid_Engine;
             else
                 code = Context_Run(exec, FALSE );
             if (!code)
                 cur_to_org(nPoints + 2, pts);
             else if (code == TT_Err_Invalid_Engine)
                 error = fPatented;
             else
                 error = fBadInstruction;
             gOutline->sideBearing = subglyph.bbox.xMin - subglyph.pp1.x;
             gOutline->advance.x = subglyph.pp2.x - subglyph.pp1.x;
         }
         Unset_CodeRange(exec);
         Clear_CodeRange(exec, TT_CodeRange_Glyph);
     } else
         error = fBadFontData;
     goto ex;
