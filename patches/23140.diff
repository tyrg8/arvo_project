commit 68fdad82c9a3d1d1fc03975b7b91fdb940c621e0
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Sun Jun 7 10:24:03 2020 +0200

    Fix free of uninitialized memory in attributes
    
    Fixes OSS-Fuzz #23140.

diff --git a/Zend/tests/attributes/018_fatal_error_in_argument.phpt b/Zend/tests/attributes/018_fatal_error_in_argument.phpt
new file mode 100644
index 0000000000..a950c8658a
--- /dev/null
+++ b/Zend/tests/attributes/018_fatal_error_in_argument.phpt
@@ -0,0 +1,11 @@
+--TEST--
+Don't free uninitialized memory if a fatal error occurs in an attribute argument
+--FILE--
+<?php
+
+<<Attr(a->b::c)>>
+function test() {}
+
+?>
+--EXPECTF--
+Fatal error: Dynamic class names are not allowed in compile-time class constant references in %s on line %d
diff --git a/Zend/zend_attributes.c b/Zend/zend_attributes.c
index b9bd467acf..935f37e5b9 100644
--- a/Zend/zend_attributes.c
+++ b/Zend/zend_attributes.c
@@ -97,23 +97,28 @@ static void attr_pfree(zval *v)
 ZEND_API zend_attribute *zend_add_attribute(HashTable **attributes, zend_bool persistent, uint32_t offset, zend_string *name, uint32_t argc)
 {
 	if (*attributes == NULL) {
 		*attributes = pemalloc(sizeof(HashTable), persistent);
 		zend_hash_init(*attributes, 8, NULL, persistent ? attr_pfree : attr_free, persistent);
 	}
 
 	zend_attribute *attr = pemalloc(ZEND_ATTRIBUTE_SIZE(argc), persistent);
 
 	if (persistent == ((GC_FLAGS(name) & IS_STR_PERSISTENT) != 0)) {
 		attr->name = zend_string_copy(name);
 	} else {
 		attr->name = zend_string_dup(name, persistent);
 	}
 
 	attr->lcname = zend_string_tolower_ex(attr->name, persistent);
 	attr->offset = offset;
 	attr->argc = argc;
 
+	/* Initialize arguments to avoid partial initialization in case of fatal errors. */
+	for (uint32_t i = 0; i < argc; i++) {
+		ZVAL_UNDEF(&attr->argv[i]);
+	}
+
 	zend_hash_next_index_insert_ptr(*attributes, attr);
 
 	return attr;
 }
