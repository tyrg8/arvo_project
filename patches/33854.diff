commit f1d49d391ee3b466b758e8d6d2301eccd1eb382c
Author: Ali Mohammad Pur <mpfard@serenityos.org>
Date:   Sat May 1 11:03:18 2021 +0430

    Shell: Disallow non-bareword nodes as part of a heredoc key
    
    Found by oss-fuzz:
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=33854

diff --git a/Userland/Shell/Parser.cpp b/Userland/Shell/Parser.cpp
index 0507f055cd..7d980909df 100644
--- a/Userland/Shell/Parser.cpp
+++ b/Userland/Shell/Parser.cpp
@@ -1913,65 +1913,69 @@ RefPtr<AST::Node> Parser::parse_brace_expansion_spec()
 RefPtr<AST::Node> Parser::parse_heredoc_initiation_record()
 {
     if (!next_is("<<"))
         return nullptr;
 
     auto rule_start = push_start();
 
     // '<' '<'
     consume();
     consume();
 
     HeredocInitiationRecord record;
     record.end = "<error>";
 
     RefPtr<AST::SyntaxError> syntax_error_node;
 
     // '-' | '~'
     switch (peek()) {
     case '-':
         record.deindent = false;
         consume();
         break;
     case '~':
         record.deindent = true;
         consume();
         break;
     default:
         restore_to(*rule_start);
         return nullptr;
     }
 
     // StringLiteral | bareword
     if (auto bareword = parse_bareword()) {
-        if (bareword->is_syntax_error())
-            syntax_error_node = bareword->syntax_error_node();
-        else
-            record.end = static_cast<AST::BarewordLiteral*>(bareword.ptr())->text();
+        if (!bareword->is_bareword()) {
+            syntax_error_node = create<AST::SyntaxError>(String::formatted("Expected a bareword or a quoted string, not {}", bareword->class_name()));
+        } else {
+            if (bareword->is_syntax_error())
+                syntax_error_node = bareword->syntax_error_node();
+            else
+                record.end = static_cast<AST::BarewordLiteral*>(bareword.ptr())->text();
+        }
 
         record.interpolate = true;
     } else if (peek() == '\'') {
         consume();
         auto text = consume_while(is_not('\''));
         bool is_error = false;
         if (!expect('\''))
             is_error = true;
         if (is_error)
             syntax_error_node = create<AST::SyntaxError>("Expected a terminating single quote", true);
 
         record.end = text;
         record.interpolate = false;
     } else {
         syntax_error_node = create<AST::SyntaxError>("Expected a bareword or a single-quoted string literal for heredoc end key", true);
     }
 
     auto node = create<AST::Heredoc>(record.end, record.interpolate, record.deindent);
     if (syntax_error_node)
         node->set_is_syntax_error(*syntax_error_node);
     else
         node->set_is_syntax_error(*create<AST::SyntaxError>(String::formatted("Expected heredoc contents for heredoc with end key '{}'", node->end()), true));
 
     record.node = node;
     m_heredoc_initiations.append(move(record));
 
     return node;
 }
@@ -1979,90 +1983,94 @@ RefPtr<AST::Node> Parser::parse_heredoc_initiation_record()
 bool Parser::parse_heredoc_entries()
 {
     // Try to parse heredoc entries, as reverse recorded in the initiation records
     for (auto& record : m_heredoc_initiations) {
         auto rule_start = push_start();
+        if (m_rule_start_offsets.size() > max_allowed_nested_rule_depth) {
+            record.node->set_is_syntax_error(*create<AST::SyntaxError>(String::formatted("Expression nested too deep (max allowed is {})", max_allowed_nested_rule_depth)));
+            continue;
+        }
         bool found_key = false;
         if (!record.interpolate) {
             // Since no interpolation is allowed, just read lines until we hit the key
             Optional<Offset> last_line_offset;
             for (;;) {
                 if (at_end())
                     break;
                 if (peek() == '\n')
                     consume();
                 last_line_offset = current_position();
                 auto line = consume_while(is_not('\n'));
                 if (peek() == '\n')
                     consume();
                 if (line.trim_whitespace() == record.end) {
                     found_key = true;
                     break;
                 }
             }
 
             if (!last_line_offset.has_value())
                 last_line_offset = current_position();
             // Now just wrap it in a StringLiteral and set it as the node's contents
             auto node = create<AST::StringLiteral>(m_input.substring_view(rule_start->offset, last_line_offset->offset - rule_start->offset));
             if (!found_key)
                 node->set_is_syntax_error(*create<AST::SyntaxError>(String::formatted("Expected to find the heredoc key '{}', but found Eof", record.end), true));
             record.node->set_contents(move(node));
         } else {
             // Interpolation is allowed, so we're going to read doublequoted string innards
             // until we find a line that contains the key
             auto end_condition = move(m_end_condition);
             found_key = false;
             set_end_condition([this, end = record.end, &found_key] {
                 if (found_key)
                     return true;
                 auto offset = current_position();
                 auto cond = move(m_end_condition);
                 ScopeGuard guard {
                     [&] {
                         m_end_condition = move(cond);
                     }
                 };
                 if (peek() == '\n') {
                     consume();
                     auto line = consume_while(is_not('\n'));
                     if (peek() == '\n')
                         consume();
                     if (line.trim_whitespace() == end) {
                         restore_to(offset.offset, offset.line);
                         found_key = true;
                         return true;
                     }
                 }
                 restore_to(offset.offset, offset.line);
                 return false;
             });
 
             auto expr = parse_doublequoted_string_inner();
             set_end_condition(move(end_condition));
 
             if (found_key) {
                 auto offset = current_position();
                 if (peek() == '\n')
                     consume();
                 auto line = consume_while(is_not('\n'));
                 if (peek() == '\n')
                     consume();
                 if (line.trim_whitespace() != record.end)
                     restore_to(offset.offset, offset.line);
             }
 
             if (!expr && found_key) {
                 expr = create<AST::StringLiteral>("");
             } else if (!expr) {
                 expr = create<AST::SyntaxError>(String::formatted("Expected to find a valid string inside a heredoc (with end key '{}')", record.end), true);
             } else if (!found_key) {
                 expr->set_is_syntax_error(*create<AST::SyntaxError>(String::formatted("Expected to find the heredoc key '{}'", record.end), true));
             }
 
             record.node->set_contents(create<AST::DoubleQuotedString>(move(expr)));
         }
     }
 
     m_heredoc_initiations.clear();
     return true;
 }
