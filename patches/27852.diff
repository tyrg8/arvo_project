commit ccaba5d7894ecfb5a8f11e48d3f86e1f14d5a469
Author: DRC <information@libjpeg-turbo.org>
Date:   Wed Nov 25 14:55:55 2020 -0600

    Fix buffer overrun with certain narrow prog JPEGs
    
    Regression introduced by 6d91e950c871103a11bac2f10c63bf998796c719
    
    last_block_column in decompress_smooth_data() can be 0 if, for instance,
    decompressing a 4:4:4 image of width 8 or less or a 4:2:2 or 4:2:0 image
    of width 16 or less.  Since last_block_column is an unsigned int,
    subtracting 1 from it produced 0xFFFFFFFF, the test in line 590 passed,
    and we attempted to access blocks from a second block column that didn't
    actually exist.
    
    Closes #476

diff --git a/ChangeLog.md b/ChangeLog.md
index 6eb06f0e..9084bee0 100644
--- a/ChangeLog.md
+++ b/ChangeLog.md
@@ -1,6 +1,16 @@
+2.1 post-beta
+=============
+
+### Significant changes relative to 2.1 beta1
+
+1. Fixed a regression introduced by 2.1 beta1[6(b)] whereby attempting to
+decompress certain progressive JPEG images with one or more component planes of
+width 8 or less caused a buffer overrun.
+
+
 2.0.90 (2.1 beta1)
 ==================
 
 ### Significant changes relative to 2.0.6:
 
 1. The build system, x86-64 SIMD extensions, and accelerated Huffman codec now
diff --git a/jdcoefct.c b/jdcoefct.c
index 699a4809..a3c6d4e8 100644
--- a/jdcoefct.c
+++ b/jdcoefct.c
@@ -426,383 +426,383 @@ METHODDEF(int)
 decompress_smooth_data(j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
 {
   my_coef_ptr coef = (my_coef_ptr)cinfo->coef;
   JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
   JDIMENSION block_num, last_block_column;
   int ci, block_row, block_rows, access_rows;
   JBLOCKARRAY buffer;
   JBLOCKROW buffer_ptr, prev_prev_block_row, prev_block_row;
   JBLOCKROW next_block_row, next_next_block_row;
   JSAMPARRAY output_ptr;
   JDIMENSION output_col;
   jpeg_component_info *compptr;
   inverse_DCT_method_ptr inverse_DCT;
   boolean change_dc;
   JCOEF *workspace;
   int *coef_bits;
   JQUANT_TBL *quanttbl;
   JLONG Q00, Q01, Q02, Q03 = 0, Q10, Q11, Q12 = 0, Q20, Q21 = 0, Q30 = 0, num;
   int DC01, DC02, DC03, DC04, DC05, DC06, DC07, DC08, DC09, DC10, DC11, DC12,
       DC13, DC14, DC15, DC16, DC17, DC18, DC19, DC20, DC21, DC22, DC23, DC24,
       DC25;
   int Al, pred;
 
   /* Keep a local variable to avoid looking it up more than once */
   workspace = coef->workspace;
 
   /* Force some input to be done if we are getting ahead of the input. */
   while (cinfo->input_scan_number <= cinfo->output_scan_number &&
          !cinfo->inputctl->eoi_reached) {
     if (cinfo->input_scan_number == cinfo->output_scan_number) {
       /* If input is working on current scan, we ordinarily want it to
        * have completed the current row.  But if input scan is DC,
        * we want it to keep two rows ahead so that next two block rows' DC
        * values are up to date.
        */
       JDIMENSION delta = (cinfo->Ss == 0) ? 2 : 0;
       if (cinfo->input_iMCU_row > cinfo->output_iMCU_row + delta)
         break;
     }
     if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
       return JPEG_SUSPENDED;
   }
 
   /* OK, output from the virtual arrays. */
   for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
        ci++, compptr++) {
     /* Don't bother to IDCT an uninteresting component. */
     if (!compptr->component_needed)
       continue;
     /* Count non-dummy DCT block rows in this iMCU row. */
     if (cinfo->output_iMCU_row < last_iMCU_row - 1) {
       block_rows = compptr->v_samp_factor;
       access_rows = block_rows * 3; /* this and next two iMCU rows */
     } else if (cinfo->output_iMCU_row < last_iMCU_row) {
       block_rows = compptr->v_samp_factor;
       access_rows = block_rows * 2; /* this and next iMCU row */
     } else {
       /* NB: can't use last_row_height here; it is input-side-dependent! */
       block_rows = (int)(compptr->height_in_blocks % compptr->v_samp_factor);
       if (block_rows == 0) block_rows = compptr->v_samp_factor;
       access_rows = block_rows; /* this iMCU row only */
     }
     /* Align the virtual buffer for this component. */
     if (cinfo->output_iMCU_row > 1) {
       access_rows += 2 * compptr->v_samp_factor; /* prior two iMCU rows too */
       buffer = (*cinfo->mem->access_virt_barray)
         ((j_common_ptr)cinfo, coef->whole_image[ci],
          (cinfo->output_iMCU_row - 2) * compptr->v_samp_factor,
          (JDIMENSION)access_rows, FALSE);
       buffer += 2 * compptr->v_samp_factor; /* point to current iMCU row */
     } else if (cinfo->output_iMCU_row > 0) {
       buffer = (*cinfo->mem->access_virt_barray)
         ((j_common_ptr)cinfo, coef->whole_image[ci],
          (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
          (JDIMENSION)access_rows, FALSE);
       buffer += compptr->v_samp_factor; /* point to current iMCU row */
     } else {
       buffer = (*cinfo->mem->access_virt_barray)
         ((j_common_ptr)cinfo, coef->whole_image[ci],
          (JDIMENSION)0, (JDIMENSION)access_rows, FALSE);
     }
     /* Fetch component-dependent info.
      * If the current scan is incomplete, then we use the component-dependent
      * info from the previous scan.
      */
     if (cinfo->output_iMCU_row > cinfo->master->last_good_iMCU_row)
       coef_bits =
         coef->coef_bits_latch + ((ci + cinfo->num_components) * SAVED_COEFS);
     else
       coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 
     /* We only do DC interpolation if no AC coefficient data is available. */
     change_dc =
       coef_bits[1] == -1 && coef_bits[2] == -1 && coef_bits[3] == -1 &&
       coef_bits[4] == -1 && coef_bits[5] == -1 && coef_bits[6] == -1 &&
       coef_bits[7] == -1 && coef_bits[8] == -1 && coef_bits[9] == -1;
 
     quanttbl = compptr->quant_table;
     Q00 = quanttbl->quantval[0];
     Q01 = quanttbl->quantval[Q01_POS];
     Q10 = quanttbl->quantval[Q10_POS];
     Q20 = quanttbl->quantval[Q20_POS];
     Q11 = quanttbl->quantval[Q11_POS];
     Q02 = quanttbl->quantval[Q02_POS];
     if (change_dc) {
       Q03 = quanttbl->quantval[Q03_POS];
       Q12 = quanttbl->quantval[Q12_POS];
       Q21 = quanttbl->quantval[Q21_POS];
       Q30 = quanttbl->quantval[Q30_POS];
     }
     inverse_DCT = cinfo->idct->inverse_DCT[ci];
     output_ptr = output_buf[ci];
     /* Loop over all DCT blocks to be processed. */
     for (block_row = 0; block_row < block_rows; block_row++) {
       buffer_ptr = buffer[block_row] + cinfo->master->first_MCU_col[ci];
 
       if (block_row > 0 || cinfo->output_iMCU_row > 0)
         prev_block_row =
           buffer[block_row - 1] + cinfo->master->first_MCU_col[ci];
       else
         prev_block_row = buffer_ptr;
 
       if (block_row > 1 || cinfo->output_iMCU_row > 1)
         prev_prev_block_row =
           buffer[block_row - 2] + cinfo->master->first_MCU_col[ci];
       else
         prev_prev_block_row = prev_block_row;
 
       if (block_row < block_rows - 1 || cinfo->output_iMCU_row < last_iMCU_row)
         next_block_row =
           buffer[block_row + 1] + cinfo->master->first_MCU_col[ci];
       else
         next_block_row = buffer_ptr;
 
       if (block_row < block_rows - 2 ||
           cinfo->output_iMCU_row < last_iMCU_row - 1)
         next_next_block_row =
           buffer[block_row + 2] + cinfo->master->first_MCU_col[ci];
       else
         next_next_block_row = next_block_row;
 
       /* We fetch the surrounding DC values using a sliding-register approach.
        * Initialize all 25 here so as to do the right thing on narrow pics.
        */
       DC01 = DC02 = DC03 = DC04 = DC05 = (int)prev_prev_block_row[0][0];
       DC06 = DC07 = DC08 = DC09 = DC10 = (int)prev_block_row[0][0];
       DC11 = DC12 = DC13 = DC14 = DC15 = (int)buffer_ptr[0][0];
       DC16 = DC17 = DC18 = DC19 = DC20 = (int)next_block_row[0][0];
       DC21 = DC22 = DC23 = DC24 = DC25 = (int)next_next_block_row[0][0];
       output_col = 0;
       last_block_column = compptr->width_in_blocks - 1;
       for (block_num = cinfo->master->first_MCU_col[ci];
            block_num <= cinfo->master->last_MCU_col[ci]; block_num++) {
         /* Fetch current DCT block into workspace so we can modify it. */
         jcopy_block_row(buffer_ptr, (JBLOCKROW)workspace, (JDIMENSION)1);
         /* Update DC values */
         if (block_num == cinfo->master->first_MCU_col[ci] &&
             block_num < last_block_column) {
           DC04 = (int)prev_prev_block_row[1][0];
           DC09 = (int)prev_block_row[1][0];
           DC14 = (int)buffer_ptr[1][0];
           DC19 = (int)next_block_row[1][0];
           DC24 = (int)next_next_block_row[1][0];
         }
-        if (block_num < last_block_column - 1) {
+        if (block_num + 1 < last_block_column) {
           DC05 = (int)prev_prev_block_row[2][0];
           DC10 = (int)prev_block_row[2][0];
           DC15 = (int)buffer_ptr[2][0];
           DC20 = (int)next_block_row[2][0];
           DC25 = (int)next_next_block_row[2][0];
         }
         /* If DC interpolation is enabled, compute coefficient estimates using
          * a Gaussian-like kernel, keeping the averages of the DC values.
          *
          * If DC interpolation is disabled, compute coefficient estimates using
          * an algorithm similar to the one described in Section K.8 of the JPEG
          * standard, except applied to a 5x5 window rather than a 3x3 window.
          *
          * An estimate is applied only if the coefficient is still zero and is
          * not known to be fully accurate.
          */
         /* AC01 */
         if ((Al = coef_bits[1]) != 0 && workspace[1] == 0) {
           num = Q00 * (change_dc ?
                 (-DC01 - DC02 + DC04 + DC05 - 3 * DC06 + 13 * DC07 -
                  13 * DC09 + 3 * DC10 - 3 * DC11 + 38 * DC12 - 38 * DC14 +
                  3 * DC15 - 3 * DC16 + 13 * DC17 - 13 * DC19 + 3 * DC20 -
                  DC21 - DC22 + DC24 + DC25) :
                 (-7 * DC11 + 50 * DC12 - 50 * DC14 + 7 * DC15));
           if (num >= 0) {
             pred = (int)(((Q01 << 7) + num) / (Q01 << 8));
             if (Al > 0 && pred >= (1 << Al))
               pred = (1 << Al) - 1;
           } else {
             pred = (int)(((Q01 << 7) - num) / (Q01 << 8));
             if (Al > 0 && pred >= (1 << Al))
               pred = (1 << Al) - 1;
             pred = -pred;
           }
           workspace[1] = (JCOEF)pred;
         }
         /* AC10 */
         if ((Al = coef_bits[2]) != 0 && workspace[8] == 0) {
           num = Q00 * (change_dc ?
                 (-DC01 - 3 * DC02 - 3 * DC03 - 3 * DC04 - DC05 - DC06 +
                  13 * DC07 + 38 * DC08 + 13 * DC09 - DC10 + DC16 -
                  13 * DC17 - 38 * DC18 - 13 * DC19 + DC20 + DC21 +
                  3 * DC22 + 3 * DC23 + 3 * DC24 + DC25) :
                 (-7 * DC03 + 50 * DC08 - 50 * DC18 + 7 * DC23));
           if (num >= 0) {
             pred = (int)(((Q10 << 7) + num) / (Q10 << 8));
             if (Al > 0 && pred >= (1 << Al))
               pred = (1 << Al) - 1;
           } else {
             pred = (int)(((Q10 << 7) - num) / (Q10 << 8));
             if (Al > 0 && pred >= (1 << Al))
               pred = (1 << Al) - 1;
             pred = -pred;
           }
           workspace[8] = (JCOEF)pred;
         }
         /* AC20 */
         if ((Al = coef_bits[3]) != 0 && workspace[16] == 0) {
           num = Q00 * (change_dc ?
                 (DC03 + 2 * DC07 + 7 * DC08 + 2 * DC09 - 5 * DC12 - 14 * DC13 -
                  5 * DC14 + 2 * DC17 + 7 * DC18 + 2 * DC19 + DC23) :
                 (-DC03 + 13 * DC08 - 24 * DC13 + 13 * DC18 - DC23));
           if (num >= 0) {
             pred = (int)(((Q20 << 7) + num) / (Q20 << 8));
             if (Al > 0 && pred >= (1 << Al))
               pred = (1 << Al) - 1;
           } else {
             pred = (int)(((Q20 << 7) - num) / (Q20 << 8));
             if (Al > 0 && pred >= (1 << Al))
               pred = (1 << Al) - 1;
             pred = -pred;
           }
           workspace[16] = (JCOEF)pred;
         }
         /* AC11 */
         if ((Al = coef_bits[4]) != 0 && workspace[9] == 0) {
           num = Q00 * (change_dc ?
                 (-DC01 + DC05 + 9 * DC07 - 9 * DC09 - 9 * DC17 +
                  9 * DC19 + DC21 - DC25) :
                 (DC10 + DC16 - 10 * DC17 + 10 * DC19 - DC02 - DC20 + DC22 -
                  DC24 + DC04 - DC06 + 10 * DC07 - 10 * DC09));
           if (num >= 0) {
             pred = (int)(((Q11 << 7) + num) / (Q11 << 8));
             if (Al > 0 && pred >= (1 << Al))
               pred = (1 << Al) - 1;
           } else {
             pred = (int)(((Q11 << 7) - num) / (Q11 << 8));
             if (Al > 0 && pred >= (1 << Al))
               pred = (1 << Al) - 1;
             pred = -pred;
           }
           workspace[9] = (JCOEF)pred;
         }
         /* AC02 */
         if ((Al = coef_bits[5]) != 0 && workspace[2] == 0) {
           num = Q00 * (change_dc ?
                 (2 * DC07 - 5 * DC08 + 2 * DC09 + DC11 + 7 * DC12 - 14 * DC13 +
                  7 * DC14 + DC15 + 2 * DC17 - 5 * DC18 + 2 * DC19) :
                 (-DC11 + 13 * DC12 - 24 * DC13 + 13 * DC14 - DC15));
           if (num >= 0) {
             pred = (int)(((Q02 << 7) + num) / (Q02 << 8));
             if (Al > 0 && pred >= (1 << Al))
               pred = (1 << Al) - 1;
           } else {
             pred = (int)(((Q02 << 7) - num) / (Q02 << 8));
             if (Al > 0 && pred >= (1 << Al))
               pred = (1 << Al) - 1;
             pred = -pred;
           }
           workspace[2] = (JCOEF)pred;
         }
         if (change_dc) {
           /* AC03 */
           if ((Al = coef_bits[6]) != 0 && workspace[3] == 0) {
             num = Q00 * (DC07 - DC09 + 2 * DC12 - 2 * DC14 + DC17 - DC19);
             if (num >= 0) {
               pred = (int)(((Q03 << 7) + num) / (Q03 << 8));
               if (Al > 0 && pred >= (1 << Al))
                 pred = (1 << Al) - 1;
             } else {
               pred = (int)(((Q03 << 7) - num) / (Q03 << 8));
               if (Al > 0 && pred >= (1 << Al))
                 pred = (1 << Al) - 1;
               pred = -pred;
             }
             workspace[3] = (JCOEF)pred;
           }
           /* AC12 */
           if ((Al = coef_bits[7]) != 0 && workspace[10] == 0) {
             num = Q00 * (DC07 - 3 * DC08 + DC09 - DC17 + 3 * DC18 - DC19);
             if (num >= 0) {
               pred = (int)(((Q12 << 7) + num) / (Q12 << 8));
               if (Al > 0 && pred >= (1 << Al))
                 pred = (1 << Al) - 1;
             } else {
               pred = (int)(((Q12 << 7) - num) / (Q12 << 8));
               if (Al > 0 && pred >= (1 << Al))
                 pred = (1 << Al) - 1;
               pred = -pred;
             }
             workspace[10] = (JCOEF)pred;
           }
           /* AC21 */
           if ((Al = coef_bits[8]) != 0 && workspace[17] == 0) {
             num = Q00 * (DC07 - DC09 - 3 * DC12 + 3 * DC14 + DC17 - DC19);
             if (num >= 0) {
               pred = (int)(((Q21 << 7) + num) / (Q21 << 8));
               if (Al > 0 && pred >= (1 << Al))
                 pred = (1 << Al) - 1;
             } else {
               pred = (int)(((Q21 << 7) - num) / (Q21 << 8));
               if (Al > 0 && pred >= (1 << Al))
                 pred = (1 << Al) - 1;
               pred = -pred;
             }
             workspace[17] = (JCOEF)pred;
           }
           /* AC30 */
           if ((Al = coef_bits[9]) != 0 && workspace[24] == 0) {
             num = Q00 * (DC07 + 2 * DC08 + DC09 - DC17 - 2 * DC18 - DC19);
             if (num >= 0) {
               pred = (int)(((Q30 << 7) + num) / (Q30 << 8));
               if (Al > 0 && pred >= (1 << Al))
                 pred = (1 << Al) - 1;
             } else {
               pred = (int)(((Q30 << 7) - num) / (Q30 << 8));
               if (Al > 0 && pred >= (1 << Al))
                 pred = (1 << Al) - 1;
               pred = -pred;
             }
             workspace[24] = (JCOEF)pred;
           }
           /* coef_bits[0] is non-negative.  Otherwise this function would not
            * be called.
            */
           num = Q00 *
                 (-2 * DC01 - 6 * DC02 - 8 * DC03 - 6 * DC04 - 2 * DC05 -
                  6 * DC06 + 6 * DC07 + 42 * DC08 + 6 * DC09 - 6 * DC10 -
                  8 * DC11 + 42 * DC12 + 152 * DC13 + 42 * DC14 - 8 * DC15 -
                  6 * DC16 + 6 * DC17 + 42 * DC18 + 6 * DC19 - 6 * DC20 -
                  2 * DC21 - 6 * DC22 - 8 * DC23 - 6 * DC24 - 2 * DC25);
           if (num >= 0) {
             pred = (int)(((Q00 << 7) + num) / (Q00 << 8));
           } else {
             pred = (int)(((Q00 << 7) - num) / (Q00 << 8));
             pred = -pred;
           }
           workspace[0] = (JCOEF)pred;
         }  /* change_dc */
 
         /* OK, do the IDCT */
         (*inverse_DCT) (cinfo, compptr, (JCOEFPTR)workspace, output_ptr,
                         output_col);
         /* Advance for next column */
         DC01 = DC02;  DC02 = DC03;  DC03 = DC04;  DC04 = DC05;
         DC06 = DC07;  DC07 = DC08;  DC08 = DC09;  DC09 = DC10;
         DC11 = DC12;  DC12 = DC13;  DC13 = DC14;  DC14 = DC15;
         DC16 = DC17;  DC17 = DC18;  DC18 = DC19;  DC19 = DC20;
         DC21 = DC22;  DC22 = DC23;  DC23 = DC24;  DC24 = DC25;
         buffer_ptr++, prev_block_row++, next_block_row++,
           prev_prev_block_row++, next_next_block_row++;
         output_col += compptr->_DCT_scaled_size;
       }
       output_ptr += compptr->_DCT_scaled_size;
     }
   }
 
   if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
     return JPEG_ROW_COMPLETED;
   return JPEG_SCAN_COMPLETED;
 }
 
 #endif /* BLOCK_SMOOTHING_SUPPORTED */
 
 
 /*
  * Initialize coefficient buffer controller.
  */
