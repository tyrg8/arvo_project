commit 16d8d54d2e7fbfab7f18cf4da1f7f11bf481396d
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Fri Dec 17 17:03:12 2021 +0000

    OSS-fuzz #42339
    
    Before dereferencing an object in an array or dictionary, make sure it
    isn't trying to reference the enclosing object (self-referencing).

diff --git a/pdf/pdf_array.c b/pdf/pdf_array.c
index 07a90812b..a1b32cc4c 100644
--- a/pdf/pdf_array.c
+++ b/pdf/pdf_array.c
@@ -121,39 +121,42 @@ int pdfi_array_from_stack(pdf_context *ctx, uint32_t indirect_num, uint32_t indi
 /* Fetch object from array, resolving indirect reference if needed
  * setref -- indicates whether to replace indirect ref with the object
  */
 static int pdfi_array_fetch(pdf_context *ctx, pdf_array *a, uint64_t index, pdf_obj **o, bool setref)
 {
     int code;
     pdf_obj *obj;
 
     *o = NULL;
 
     if (a->type != PDF_ARRAY)
         return_error(gs_error_typecheck);
 
     if (index >= a->size)
         return_error(gs_error_rangecheck);
     obj = a->values[index];
 
     if (obj->type == PDF_INDIRECT) {
         pdf_obj *o1 = NULL;
         pdf_indirect_ref *r = (pdf_indirect_ref *)obj;
 
+        if (r->ref_object_num == a->object_num && r->ref_generation_num == a->generation_num)
+            return_error(gs_error_circular_reference);
+
         code = pdfi_deref_loop_detect(ctx, r->ref_object_num, r->ref_generation_num, &o1);
         if (code < 0)
             return code;
 
         if (setref)
             (void)pdfi_array_put(ctx, a, index, o1);
         obj = o1;
     } else {
         pdfi_countup(obj);
     }
 
     *o = obj;
     return 0;
 }
 
 /* The object returned by pdfi_array_get has its reference count incremented by 1 to
  * indicate the reference now held by the caller, in **o.
  */
diff --git a/pdf/pdf_dict.c b/pdf/pdf_dict.c
index 20d7d30a7..0c6d98484 100644
--- a/pdf/pdf_dict.c
+++ b/pdf/pdf_dict.c
@@ -214,51 +214,54 @@ pdfi_dict_get2(pdf_context *ctx, pdf_dict *d, const char *Key1,
 /* The object returned by pdfi_dict_get has its reference count incremented by 1 to
  * indicate the reference now held by the caller, in **o.
  */
 int pdfi_dict_get(pdf_context *ctx, pdf_dict *d, const char *Key, pdf_obj **o)
 {
     int i=0, code;
     pdf_name *t;
 
     *o = NULL;
 
     if (d->type != PDF_DICT)
         return_error(gs_error_typecheck);
 
     for (i=0;i< d->entries;i++) {
         t = (pdf_name *)d->keys[i];
 
         if (t && t->type == PDF_NAME) {
             if (pdfi_name_is((pdf_name *)t, Key)) {
                 if (d->values[i]->type == PDF_INDIRECT) {
                     pdf_indirect_ref *r = (pdf_indirect_ref *)d->values[i];
 
+                    if (r->ref_object_num == d->object_num && r->ref_generation_num == d->generation_num)
+                        return_error(gs_error_circular_reference);
+
                     code = pdfi_deref_loop_detect(ctx, r->ref_object_num, r->ref_generation_num, o);
                     if (code < 0)
                         return code;
                     /* The file Bug690138.pdf has font dictionaries which contain ToUnicode keys where
                      * the value is an indirect reference to the same font object. If we replace the
                      * indirect reference in the dictionary with the font dictionary it becomes self
                      * referencing and never counts down to 0, leading to a memory leak.
                      * This is clearly an error, so flag it and don't replace the indirect reference.
                      */
                     if ((*o)->object_num == 0 || (*o)->object_num != d->object_num)
                     {
                         pdfi_countdown(d->values[i]);
                         d->values[i] = *o;
                     } else {
                         pdfi_set_error(ctx, 0, NULL, E_DICT_SELF_REFERENCE, "pdfi_dict_get", NULL);
                         return 0;
                     }
                 }
                 *o = d->values[i];
                 pdfi_countup(*o);
                 return 0;
             }
         }
     }
     return_error(gs_error_undefined);
 }
 
 /* Get object from dict without resolving indirect references
  * Will inc refcnt by 1
  */
