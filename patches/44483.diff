commit b92d26a26e31b3b6c117b2d80c5ee1c8248e247f
Author: Reini Urban <rurban@cpan.org>
Date:   Mon Oct 30 18:33:46 2023 +0100

    dxf2dwg: honor --force-free also with errors
    
    to repro ../tz/indwg/clusterfuzz-testcase-minimized-llvmfuzz-5075763015057408.dxf

diff --git a/programs/dxf2dwg.c b/programs/dxf2dwg.c
index e4b09240..47671b6f 100644
--- a/programs/dxf2dwg.c
+++ b/programs/dxf2dwg.c
@@ -178,258 +178,264 @@ int
 main (int argc, char *argv[])
 {
   int i = 1;
   int error = 0;
   Dwg_Data dwg;
   char *filename_in;
   const char *version = NULL;
   char *filename_out = NULL;
   Dwg_Version_Type dwg_version = R_2000;
   int do_free = 0;
   int need_free = 0;
   int c;
 #ifdef HAVE_GETOPT_LONG
   int option_index = 0;
   static struct option long_options[]
       = { { "verbose", 1, &opts, 1 }, // optional
           { "file", 1, 0, 'o' },      { "as", 1, 0, 'a' },
           { "overwrite", 0, 0, 'y' }, { "help", 0, 0, 0 },
           { "force-free", 0, 0, 0 },  { "version", 0, 0, 0 },
           { NULL, 0, NULL, 0 } };
 #endif
 
   if (argc < 2)
     return usage ();
 
   while
 #ifdef HAVE_GETOPT_LONG
       ((c = getopt_long (argc, argv, "ya:v::o:h", long_options, &option_index))
        != -1)
 #else
       ((c = getopt (argc, argv, ":a:v::o:hi")) != -1)
 #endif
     {
       if (c == -1)
         break;
       switch (c)
         {
         case ':': // missing arg
           if (optarg && !strcmp (optarg, "v"))
             {
               opts = 1;
               break;
             }
           fprintf (stderr, "%s: option '-%c' requires an argument\n", argv[0],
                    optopt);
           break;
 #ifdef HAVE_GETOPT_LONG
         case 0:
           /* This option sets a flag */
           if (!strcmp (long_options[option_index].name, "verbose"))
             {
               if (opts < 0 || opts > 9)
                 return usage ();
 #  if defined(USE_TRACING) && defined(HAVE_SETENV)
               {
                 char v[2];
                 *v = opts + '0';
                 *(v + 1) = 0;
                 setenv ("LIBREDWG_TRACE", v, 1);
               }
 #  endif
               break;
             }
           if (!strcmp (long_options[option_index].name, "version"))
             return opt_version ();
           if (!strcmp (long_options[option_index].name, "help"))
             return help ();
           if (!strcmp (long_options[option_index].name, "force-free"))
             do_free = 1;
           break;
 #else
         case 'i':
           return opt_version ();
 #endif
         case 'o':
           filename_out = optarg;
           break;
         case 'a':
           dwg_version = dwg_version_as (optarg);
           if (dwg_version == R_INVALID)
             {
               fprintf (stderr, "Invalid version '%s'\n", argv[1]);
               return usage ();
             }
           version = optarg;
           break;
         case 'v': // support -v3 and -v
           i = (optind > 0 && optind < argc) ? optind - 1 : 1;
           if (!memcmp (argv[i], "-v", 2))
             {
               opts = argv[i][2] ? argv[i][2] - '0' : 1;
             }
           if (opts < 0 || opts > 9)
             return usage ();
 #if defined(USE_TRACING) && defined(HAVE_SETENV)
           {
             char v[2];
             *v = opts + '0';
             *(v + 1) = 0;
             setenv ("LIBREDWG_TRACE", v, 1);
           }
 #endif
           break;
         case 'y':
           overwrite = 1;
           break;
         case 'h':
           return help ();
         case '?':
           fprintf (stderr, "%s: invalid option '-%c' ignored\n", argv[0],
                    optopt);
           break;
         default:
           return usage ();
         }
     }
   i = optind;
 
   if (filename_out != NULL && (i + 1) < argc)
     {
       fprintf (stderr, "%s: no -o with multiple input files\n", argv[0]);
       return usage ();
     }
   do_free |= (i + 1) < argc; // if more than one file
 
   while (i < argc)
     {
       filename_in = argv[i];
       i++;
       if (!filename_out)
         {
           need_free = 1;
           filename_out = suffix (filename_in, "dwg");
         }
 
       if (strEQ (filename_in, filename_out))
         {
           if (filename_out != argv[i - 1])
             free (filename_out);
           return usage ();
         }
 
       dwg.opts = opts;
       dwg.header.version = dwg_version;
       printf ("Reading DXF file %s\n", filename_in);
       error = dxf_read_file (filename_in, &dwg);
       if (error >= DWG_ERR_CRITICAL)
         {
           fprintf (stderr, "READ ERROR 0x%x %s\n", error, filename_in);
           if (need_free)
             free (filename_out);
+          if (do_free
+#ifdef HAVE_VALGRIND_VALGRIND_H
+              || (RUNNING_ON_VALGRIND)
+#endif
+              )
+            dwg_free (&dwg);
           continue;
         }
 
       dwg.opts |= opts;
       printf ("Writing DWG file %s", filename_out);
       if (version)
         {
           printf (" as %s\n", version);
           dwg.header.version = dwg_version;
           if (dwg_version > R_2000)
             printf ("Warning: encode currently only works for R13-R2000.\n");
           if (dwg.header.from_version == R_INVALID)
             dwg.header.from_version = dwg.header.version;
         }
       else
         {
           // FIXME: for now only R_13b1 - R_2000. later remove this line.
           if (dwg.header.from_version < R_13b1
               || dwg.header.from_version >= R_2004)
             dwg.header.version = dwg_version;
           if (dwg.header.from_version == R_INVALID)
             dwg.header.from_version = dwg.header.version;
           if (dwg.header.version == R_INVALID)
             dwg.header.version = dwg.header.from_version;
           printf ("\n");
         }
 
 #ifdef USE_WRITE
       {
         struct stat attrib;
         if (!stat (filename_out, &attrib)) // exists
           {
             if (!overwrite)
               {
                 LOG_ERROR ("File not overwritten: %s, use -y.\n",
                            filename_out);
                 error |= DWG_ERR_IOERROR;
               }
             else
               {
                 if (S_ISREG (attrib.st_mode) && // refuse to remove a directory
                     (access (filename_out, W_OK) == 0) // writable
 #  ifndef _WIN32
                     // refuse to remove a symlink. even with overwrite.
                     // security
                     && !S_ISLNK (attrib.st_mode)
 #  endif
                 )
                   {
                     unlink (filename_out);
                     error = dwg_write_file (filename_out, &dwg);
                   }
                 else if (
 #  ifdef _WIN32
                     strEQc (filename_out, "NUL")
 #  else
                     strEQc (filename_out, "/dev/null")
 #  endif
                 )
                   {
                     error = dwg_write_file (filename_out, &dwg);
                   }
                 else
                   {
                     LOG_ERROR ("Not writable file or symlink: %s\n",
                                filename_out);
                     error |= DWG_ERR_IOERROR;
                   }
               }
           }
         else
           error = dwg_write_file (filename_out, &dwg);
       }
 #else
       error = DWG_ERR_IOERROR;
 #  error no DWG write support
 #endif
       if (error)
         fprintf (stderr, "WRITE ERROR 0x%x %s\n", error, filename_out);
 
 #if defined __SANITIZE_ADDRESS__ || __has_feature(address_sanitizer)
       {
         char *asanenv = getenv ("ASAN_OPTIONS");
         if (!asanenv)
           do_free = 1;
         // detect_leaks is enabled by default. see if it's turned off
         else if (strstr (asanenv, "detect_leaks=0") == NULL) /* not found */
           do_free = 1;
       }
 #endif
       // forget about leaks. really huge DWG's need endlessly here.
       if (do_free
 #ifdef HAVE_VALGRIND_VALGRIND_H
           || (RUNNING_ON_VALGRIND)
 #endif
       )
         {
           dwg_free (&dwg);
           if (need_free)
             free (filename_out);
         }
       filename_out = NULL;
     }
 
   // but only the result of the last conversion
   return error >= DWG_ERR_CRITICAL ? 1 : 0;
 }
