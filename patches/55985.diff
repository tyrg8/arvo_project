commit c91714309754e27f7f3a6ffc08ba61739c418532
Author: Alan Modra <amodra@gmail.com>
Date:   Wed Feb 15 16:28:07 2023 +1030

    More ecoff sanity checks
    
    Change FIX so that unused pointers that escape the UPDATE_RAW_END
    sanity checks won't result in overflows.  Also sanity check the local
    sym fdr isymBase and csym values.
    
            * ecoff.c (_bfd_ecoff_slurp_symbolic_info): Define FIX to set
            pointers into swapped internal data to NULL if count is zero.
            Sanity check local sym fdr_ptr->isymBase and fdr_ptr->csym.

diff --git a/bfd/ecoff.c b/bfd/ecoff.c
index 7498766dd3f..1bea7005fee 100644
--- a/bfd/ecoff.c
+++ b/bfd/ecoff.c
@@ -486,156 +486,155 @@ bool
 _bfd_ecoff_slurp_symbolic_info (bfd *abfd,
 				asection *ignore ATTRIBUTE_UNUSED,
 				struct ecoff_debug_info *debug)
 {
   const struct ecoff_backend_data * const backend = ecoff_backend (abfd);
   HDRR *internal_symhdr;
   bfd_size_type raw_base;
   bfd_size_type raw_size;
   void * raw;
   bfd_size_type external_fdr_size;
   char *fraw_src;
   char *fraw_end;
   struct fdr *fdr_ptr;
   bfd_size_type raw_end;
   bfd_size_type cb_end;
   file_ptr pos;
   size_t amt;
 
   BFD_ASSERT (debug == &ecoff_data (abfd)->debug_info);
 
   /* Check whether we've already gotten it, and whether there's any to
      get.  */
   if (ecoff_data (abfd)->raw_syments != NULL)
     return true;
   if (ecoff_data (abfd)->sym_filepos == 0)
     {
       abfd->symcount = 0;
       return true;
     }
 
   if (! ecoff_slurp_symbolic_header (abfd))
     return false;
 
   internal_symhdr = &debug->symbolic_header;
 
   /* Read all the symbolic information at once.  */
   raw_base = (ecoff_data (abfd)->sym_filepos
 	      + backend->debug_swap.external_hdr_size);
 
   /* Alpha ecoff makes the determination of raw_size difficult. It has
      an undocumented debug data section between the symhdr and the first
      documented section. And the ordering of the sections varies between
      statically and dynamically linked executables.
      If bfd supports SEEK_END someday, this code could be simplified.  */
   raw_end = raw_base;
 
 #define UPDATE_RAW_END(start, count, size) \
   do									\
     if (internal_symhdr->count != 0)					\
       {									\
 	if (internal_symhdr->start < raw_base)				\
 	  goto err;							\
 	if (_bfd_mul_overflow ((unsigned long) internal_symhdr->count,	\
 			       (size), &amt))				\
 	  goto err;							\
 	cb_end = internal_symhdr->start + amt;				\
 	if (cb_end < internal_symhdr->start)				\
 	  goto err;							\
 	if (cb_end > raw_end)						\
 	  raw_end = cb_end;						\
       }									\
   while (0)
 
   UPDATE_RAW_END (cbLineOffset, cbLine, sizeof (unsigned char));
   UPDATE_RAW_END (cbDnOffset, idnMax, backend->debug_swap.external_dnr_size);
   UPDATE_RAW_END (cbPdOffset, ipdMax, backend->debug_swap.external_pdr_size);
   UPDATE_RAW_END (cbSymOffset, isymMax, backend->debug_swap.external_sym_size);
   /* eraxxon@alumni.rice.edu: ioptMax refers to the size of the
      optimization symtab, not the number of entries.  */
   UPDATE_RAW_END (cbOptOffset, ioptMax, sizeof (char));
   UPDATE_RAW_END (cbAuxOffset, iauxMax, sizeof (union aux_ext));
   UPDATE_RAW_END (cbSsOffset, issMax, sizeof (char));
   UPDATE_RAW_END (cbSsExtOffset, issExtMax, sizeof (char));
   UPDATE_RAW_END (cbFdOffset, ifdMax, backend->debug_swap.external_fdr_size);
   UPDATE_RAW_END (cbRfdOffset, crfd, backend->debug_swap.external_rfd_size);
   UPDATE_RAW_END (cbExtOffset, iextMax, backend->debug_swap.external_ext_size);
 
 #undef UPDATE_RAW_END
 
   raw_size = raw_end - raw_base;
   if (raw_size == 0)
     {
       ecoff_data (abfd)->sym_filepos = 0;
       return true;
     }
   pos = ecoff_data (abfd)->sym_filepos;
   pos += backend->debug_swap.external_hdr_size;
   if (bfd_seek (abfd, pos, SEEK_SET) != 0)
     return false;
   raw = _bfd_alloc_and_read (abfd, raw_size, raw_size);
   if (raw == NULL)
     return false;
 
   ecoff_data (abfd)->raw_syments = raw;
 
   /* Get pointers for the numeric offsets in the HDRR structure.  */
-#define FIX(off1, off2, type)				\
-  if (internal_symhdr->off1 == 0)			\
-    debug->off2 = NULL;					\
-  else							\
-    debug->off2 = (type) ((char *) raw			\
-			  + (internal_symhdr->off1	\
-			     - raw_base))
-
-  FIX (cbLineOffset, line, unsigned char *);
-  FIX (cbDnOffset, external_dnr, void *);
-  FIX (cbPdOffset, external_pdr, void *);
-  FIX (cbSymOffset, external_sym, void *);
-  FIX (cbOptOffset, external_opt, void *);
-  FIX (cbAuxOffset, external_aux, union aux_ext *);
-  FIX (cbSsOffset, ss, char *);
-  FIX (cbSsExtOffset, ssext, char *);
-  FIX (cbFdOffset, external_fdr, void *);
-  FIX (cbRfdOffset, external_rfd, void *);
-  FIX (cbExtOffset, external_ext, void *);
+#define FIX(start, count, ptr, type) \
+  if (internal_symhdr->start == 0 || internal_symhdr->count == 0)	\
+    debug->ptr = NULL;							\
+  else									\
+    debug->ptr = (type) ((char *) raw					\
+			 + (internal_symhdr->start - raw_base))
+
+  FIX (cbLineOffset, cbLine, line, unsigned char *);
+  FIX (cbDnOffset, idnMax, external_dnr, void *);
+  FIX (cbPdOffset, ipdMax, external_pdr, void *);
+  FIX (cbSymOffset, isymMax, external_sym, void *);
+  FIX (cbOptOffset, ioptMax, external_opt, void *);
+  FIX (cbAuxOffset, iauxMax, external_aux, union aux_ext *);
+  FIX (cbSsOffset, issMax, ss, char *);
+  FIX (cbSsExtOffset, issExtMax, ssext, char *);
+  FIX (cbFdOffset, ifdMax, external_fdr, void *);
+  FIX (cbRfdOffset, crfd, external_rfd, void *);
+  FIX (cbExtOffset, iextMax, external_ext, void *);
 #undef FIX
 
   /* I don't want to always swap all the data, because it will just
      waste time and most programs will never look at it.  The only
      time the linker needs most of the debugging information swapped
      is when linking big-endian and little-endian MIPS object files
      together, which is not a common occurrence.
 
      We need to look at the fdr to deal with a lot of information in
      the symbols, so we swap them here.  */
   if (_bfd_mul_overflow ((unsigned long) internal_symhdr->ifdMax,
 			 sizeof (struct fdr), &amt))
     {
     err:
       bfd_set_error (bfd_error_file_too_big);
       return false;
     }
   debug->fdr = (FDR *) bfd_alloc (abfd, amt);
   if (debug->fdr == NULL)
     return false;
   external_fdr_size = backend->debug_swap.external_fdr_size;
   fdr_ptr = debug->fdr;
   fraw_src = (char *) debug->external_fdr;
   /* PR 17512: file: 3372-1243-0.004.  */
   if (fraw_src == NULL && internal_symhdr->ifdMax > 0)
     return false;
   fraw_end = fraw_src + internal_symhdr->ifdMax * external_fdr_size;
   for (; fraw_src < fraw_end; fraw_src += external_fdr_size, fdr_ptr++)
     (*backend->debug_swap.swap_fdr_in) (abfd, (void *) fraw_src, fdr_ptr);
 
   return true;
 }
 
 /* ECOFF symbol table routines.  The ECOFF symbol table is described
    in gcc/mips-tfile.c.  */
 
 /* ECOFF uses two common sections.  One is the usual one, and the
    other is for small objects.  All the small objects are kept
    together, and then referenced via the gp pointer, which yields
    faster assembler code.  This is what we use for the small common
    section.  */
@@ -847,140 +846,145 @@ bool
 _bfd_ecoff_slurp_symbol_table (bfd *abfd)
 {
   const struct ecoff_backend_data * const backend = ecoff_backend (abfd);
   const bfd_size_type external_ext_size
     = backend->debug_swap.external_ext_size;
   const bfd_size_type external_sym_size
     = backend->debug_swap.external_sym_size;
   void (* const swap_ext_in) (bfd *, void *, EXTR *)
     = backend->debug_swap.swap_ext_in;
   void (* const swap_sym_in) (bfd *, void *, SYMR *)
     = backend->debug_swap.swap_sym_in;
   ecoff_symbol_type *internal;
   ecoff_symbol_type *internal_ptr;
   char *eraw_src;
   char *eraw_end;
   FDR *fdr_ptr;
   FDR *fdr_end;
   size_t amt;
 
   /* If we've already read in the symbol table, do nothing.  */
   if (ecoff_data (abfd)->canonical_symbols != NULL)
     return true;
 
   /* Get the symbolic information.  */
   if (! _bfd_ecoff_slurp_symbolic_info (abfd, NULL,
 					&ecoff_data (abfd)->debug_info))
     return false;
   if (bfd_get_symcount (abfd) == 0)
     return true;
 
   if (_bfd_mul_overflow (bfd_get_symcount (abfd),
 			 sizeof (ecoff_symbol_type), &amt))
     {
       bfd_set_error (bfd_error_file_too_big);
       return false;
     }
   internal = (ecoff_symbol_type *) bfd_alloc (abfd, amt);
   if (internal == NULL)
     return false;
 
   internal_ptr = internal;
   eraw_src = (char *) ecoff_data (abfd)->debug_info.external_ext;
   eraw_end = (eraw_src
 	      + (ecoff_data (abfd)->debug_info.symbolic_header.iextMax
 		 * external_ext_size));
   for (; eraw_src < eraw_end; eraw_src += external_ext_size, internal_ptr++)
     {
       EXTR internal_esym;
 
       (*swap_ext_in) (abfd, (void *) eraw_src, &internal_esym);
 
       /* PR 17512: file: 3372-1000-0.004.  */
       HDRR *symhdr = &ecoff_data (abfd)->debug_info.symbolic_header;
       if (internal_esym.asym.iss >= symhdr->issExtMax
 	  || internal_esym.asym.iss < 0)
 	{
 	  bfd_set_error (bfd_error_bad_value);
 	  return false;
 	}
 
       internal_ptr->symbol.name = (ecoff_data (abfd)->debug_info.ssext
 				   + internal_esym.asym.iss);
 
       if (!ecoff_set_symbol_info (abfd, &internal_esym.asym,
 				  &internal_ptr->symbol, 1,
 				  internal_esym.weakext))
 	return false;
 
       /* The alpha uses a negative ifd field for section symbols.  */
       /* PR 17512: file: 3372-1983-0.004.  */
       if (internal_esym.ifd >= symhdr->ifdMax
 	  || internal_esym.ifd < 0)
 	internal_ptr->fdr = NULL;
       else
 	internal_ptr->fdr = (ecoff_data (abfd)->debug_info.fdr
 			     + internal_esym.ifd);
       internal_ptr->local = false;
       internal_ptr->native = (void *) eraw_src;
     }
 
   /* The local symbols must be accessed via the fdr's, because the
      string and aux indices are relative to the fdr information.  */
   fdr_ptr = ecoff_data (abfd)->debug_info.fdr;
   fdr_end = fdr_ptr + ecoff_data (abfd)->debug_info.symbolic_header.ifdMax;
   for (; fdr_ptr < fdr_end; fdr_ptr++)
     {
       char *lraw_src;
       char *lraw_end;
+      HDRR *symhdr = &ecoff_data (abfd)->debug_info.symbolic_header;
 
+      if (fdr_ptr->isymBase < 0
+	  || fdr_ptr->isymBase > symhdr->isymMax
+	  || fdr_ptr->csym <= 0
+	  || fdr_ptr->csym > symhdr->isymMax - fdr_ptr->isymBase)
+	continue;
       lraw_src = ((char *) ecoff_data (abfd)->debug_info.external_sym
 		  + fdr_ptr->isymBase * external_sym_size);
       lraw_end = lraw_src + fdr_ptr->csym * external_sym_size;
       for (;
 	   lraw_src < lraw_end;
 	   lraw_src += external_sym_size, internal_ptr++)
 	{
 	  SYMR internal_sym;
 
 	  (*swap_sym_in) (abfd, (void *) lraw_src, &internal_sym);
 
-	  HDRR *symhdr = &ecoff_data (abfd)->debug_info.symbolic_header;
 	  if (internal_sym.iss >= symhdr->issMax
 	      || internal_sym.iss < 0)
 	    {
 	      bfd_set_error (bfd_error_bad_value);
 	      return false;
 	    }
 	  internal_ptr->symbol.name = (ecoff_data (abfd)->debug_info.ss
 				       + fdr_ptr->issBase
 				       + internal_sym.iss);
 	  if (!ecoff_set_symbol_info (abfd, &internal_sym,
 				      &internal_ptr->symbol, 0, 0))
 	    return false;
 	  internal_ptr->fdr = fdr_ptr;
 	  internal_ptr->local = true;
 	  internal_ptr->native = (void *) lraw_src;
 	}
     }
 
   /* PR 17512: file: 3372-3080-0.004.
      A discrepancy between ecoff_data (abfd)->debug_info.symbolic_header.isymMax
      and ecoff_data (abfd)->debug_info.symbolic_header.ifdMax can mean that
      we have fewer symbols than we were expecting.  Allow for this by updating
      the symbol count and warning the user.  */
   if (internal_ptr - internal < (ptrdiff_t) bfd_get_symcount (abfd))
     {
       abfd->symcount = internal_ptr - internal;
       _bfd_error_handler
 	/* xgettext:c-format */
 	(_("%pB: warning: isymMax (%ld) is greater than ifdMax (%ld)"),
 	 abfd, ecoff_data (abfd)->debug_info.symbolic_header.isymMax,
 	 ecoff_data (abfd)->debug_info.symbolic_header.ifdMax);
     }
 
   ecoff_data (abfd)->canonical_symbols = internal;
 
   return true;
 }
 
 /* Return the amount of space needed for the canonical symbols.  */
