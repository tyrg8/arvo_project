commit d3651fdbd352cbaf259f89abf7557da343339378
Author: Kevin Backhouse <kevinbackhouse@github.com>
Date:   Mon Sep 5 17:33:43 2022 +0100

    Credit to OSS-Fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=50901
    Resize buf to avoid buffer overflow.

diff --git a/src/quicktimevideo.cpp b/src/quicktimevideo.cpp
index 5362ea1f4..31cb25e0e 100644
--- a/src/quicktimevideo.cpp
+++ b/src/quicktimevideo.cpp
@@ -534,119 +534,131 @@ void QuickTimeVideo::readMetadata() {
 void QuickTimeVideo::decodeBlock(std::string const& entered_from) {
   const long bufMinSize = 4;
   DataBuf buf(bufMinSize + 1);
   uint64_t size = 0;
   buf.data()[4] = '\0';
 
   io_->read(buf.data(), 4);
   if (io_->eof()) {
     continueTraversing_ = false;
     return;
   }
 
   size = buf.read_uint32(0, bigEndian);
 
   io_->readOrThrow(buf.data(), 4);
 
   // we have read 2x 4 bytes
   size_t hdrsize = 8;
 
   if (size == 1) {
     // The box size is encoded as a uint64_t, so we need to read another 8 bytes.
     DataBuf data(8);
     hdrsize += 8;
     io_->readOrThrow(data.data(), data.size());
     size = data.read_uint64(0, bigEndian);
   } else if (size == 0) {
     if (entered_from == "meta") {
       size = buf.read_uint32(0, bigEndian);
       io_->readOrThrow(buf.data(), 4, Exiv2::ErrorCode::kerCorruptedMetadata);
     }
   }
 
   enforce(size >= hdrsize, Exiv2::ErrorCode::kerCorruptedMetadata);
   enforce(size - hdrsize <= io_->size() - io_->tell(), Exiv2::ErrorCode::kerCorruptedMetadata);
   enforce(size - hdrsize <= std::numeric_limits<size_t>::max(), Exiv2::ErrorCode::kerCorruptedMetadata);
 
   // std::cerr<<"Tag=>"<<buf.data()<<"     size=>"<<size-hdrsize << std::endl;
-  tagDecoder(buf, static_cast<size_t>(size - hdrsize));
+  const size_t newsize = static_cast<size_t>(size - hdrsize);
+  if (newsize > buf.size()) {
+    buf.resize(newsize);
+  }
+  tagDecoder(buf, newsize);
 }  // QuickTimeVideo::decodeBlock
 
 void QuickTimeVideo::tagDecoder(Exiv2::DataBuf& buf, size_t size) {
+  assert(buf.size() > 4);
+
   if (ignoreList(buf))
     discard(size);
 
   else if (dataIgnoreList(buf)) {
     decodeBlock(Exiv2::toString(buf.data()));
   } else if (equalsQTimeTag(buf, "ftyp"))
     fileTypeDecoder(size);
 
   else if (equalsQTimeTag(buf, "trak"))
     setMediaStream();
 
   else if (equalsQTimeTag(buf, "mvhd"))
     movieHeaderDecoder(size);
 
   else if (equalsQTimeTag(buf, "tkhd"))
     trackHeaderDecoder(size);
 
   else if (equalsQTimeTag(buf, "mdhd"))
     mediaHeaderDecoder(size);
 
   else if (equalsQTimeTag(buf, "hdlr"))
     handlerDecoder(size);
 
   else if (equalsQTimeTag(buf, "vmhd"))
     videoHeaderDecoder(size);
 
   else if (equalsQTimeTag(buf, "udta"))
     userDataDecoder(size);
 
   else if (equalsQTimeTag(buf, "dref"))
     multipleEntriesDecoder();
 
   else if (equalsQTimeTag(buf, "stsd"))
     sampleDesc(size);
 
   else if (equalsQTimeTag(buf, "stts"))
     timeToSampleDecoder();
 
   else if (equalsQTimeTag(buf, "pnot"))
     previewTagDecoder(size);
 
   else if (equalsQTimeTag(buf, "tapt"))
     trackApertureTagDecoder(size);
 
   else if (equalsQTimeTag(buf, "keys"))
     keysTagDecoder(size);
 
   else if (equalsQTimeTag(buf, "url ")) {
-    io_->readOrThrow(buf.data(), size);
+    Exiv2::DataBuf url(size+1);
+    io_->readOrThrow(url.data(), size);
+    url.write_uint8(size, 0);
     if (currentStream_ == Video)
-      xmpData_["Xmp.video.URL"] = Exiv2::toString(buf.data());
+      xmpData_["Xmp.video.URL"] = Exiv2::toString(url.data());
     else if (currentStream_ == Audio)
-      xmpData_["Xmp.audio.URL"] = Exiv2::toString(buf.data());
+      xmpData_["Xmp.audio.URL"] = Exiv2::toString(url.data());
   }
 
   else if (equalsQTimeTag(buf, "urn ")) {
-    io_->readOrThrow(buf.data(), size);
+    Exiv2::DataBuf urn(size+1);
+    io_->readOrThrow(urn.data(), size);
+    urn.write_uint8(size, 0);
     if (currentStream_ == Video)
-      xmpData_["Xmp.video.URN"] = Exiv2::toString(buf.data());
+      xmpData_["Xmp.video.URN"] = Exiv2::toString(urn.data());
     else if (currentStream_ == Audio)
-      xmpData_["Xmp.audio.URN"] = Exiv2::toString(buf.data());
+      xmpData_["Xmp.audio.URN"] = Exiv2::toString(urn.data());
   }
 
   else if (equalsQTimeTag(buf, "dcom")) {
-    io_->readOrThrow(buf.data(), size);
-    xmpData_["Xmp.video.Compressor"] = Exiv2::toString(buf.data());
+    Exiv2::DataBuf dcom(size+1);
+    io_->readOrThrow(dcom.data(), size);
+    dcom.write_uint8(size, 0);
+    xmpData_["Xmp.video.Compressor"] = Exiv2::toString(dcom.data());
   }
 
   else if (equalsQTimeTag(buf, "smhd")) {
     io_->readOrThrow(buf.data(), 4);
     io_->readOrThrow(buf.data(), 4);
     xmpData_["Xmp.audio.Balance"] = buf.read_uint16(0, bigEndian);
   }
 
   else {
     discard(size);
   }
 }  // QuickTimeVideo::tagDecoder
