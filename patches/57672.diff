commit 93648fc954c0133acc6e89860ba49f78ca60460f
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Fri Jun 2 11:00:13 2023 +0900

    gc.c (mrb_env_unshare): fix a write barrier bug

diff --git a/src/vm.c b/src/vm.c
index 4fc929e2a..732cbe2a8 100644
--- a/src/vm.c
+++ b/src/vm.c
@@ -372,39 +372,40 @@ mrb_bool
 mrb_env_unshare(mrb_state *mrb, struct REnv *e, mrb_bool noraise)
 {
   if (e == NULL) return TRUE;
   if (!MRB_ENV_ONSTACK_P(e)) return TRUE;
   if (e->cxt != mrb->c) return TRUE;
   if (e == CI_ENV(mrb->c->cibase)) return TRUE; /* for mirb */
 
   size_t len = (size_t)MRB_ENV_LEN(e);
   if (len == 0) {
     e->stack = NULL;
     MRB_ENV_CLOSE(e);
     return TRUE;
   }
 
   size_t live = mrb->gc.live;
   mrb_value *p = (mrb_value*)mrb_malloc_simple(mrb, sizeof(mrb_value)*len);
   if (live != mrb->gc.live && mrb_object_dead_p(mrb, (struct RBasic*)e)) {
     // The e object is now subject to GC inside mrb_malloc_simple().
     // Moreover, if NULL is returned due to mrb_malloc_simple() failure, simply ignore it.
     mrb_free(mrb, p);
     return TRUE;
   }
   else if (p) {
     stack_copy(p, e->stack, len);
     e->stack = p;
     MRB_ENV_CLOSE(e);
+    mrb_write_barrier(mrb, (struct RBasic*)e);
     return TRUE;
   }
   else {
     e->stack = NULL;
     MRB_ENV_CLOSE(e);
     MRB_ENV_SET_LEN(e, 0);
     MRB_ENV_SET_BIDX(e, 0);
     if (!noraise) {
       mrb_exc_raise(mrb, mrb_obj_value(mrb->nomem_err));
     }
     return FALSE;
   }
 }
