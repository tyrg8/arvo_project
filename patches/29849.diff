commit e3a91cf31c3680d11d3678150a33024fe36eb577
Author: John Stiles <johnstiles@google.com>
Date:   Tue Jan 26 10:13:58 2021 -0500

    Fix fuzzer-discovered error with variable scoping.
    
    In GLSL and SkSL, control statements don't require explicit braces
    around single-statement children. That is, the `match = true` child
    statement here doesn't need to be braced.
    
        if (condition) match = true;
    
    Because there are no braces, we never create a Block or a dedicated
    SymbolTable here.  This is normally not a problem, but the fuzzer
    discovered that it can dump things into the symbol table inside a child
    statement:
    
        if (condition) int newSymbol;
    
    This becomes problematic because the symbol name now outlives its block.
    This means `newSymbol` can be referred to later, which should be illegal
    (and can cause the optimizer to blow up since the structure is bogus).
    
    There doesn't seem to be any reason to allow this code to compile; the
    user can add an explicit scope here to make it reasonable, and it's
    (almost) meaningless to declare a symbol that's instantly going to fall
    out of scope. This code is now rejected with an error message.
    
    Change-Id: I44778e5b59652d345b10eecd4c88efbf7d86a5e0
    Bug: oss-fuzz:29849
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/358960
    Reviewed-by: Ethan Nicholas <ethannicholas@google.com>
    Reviewed-by: Brian Osman <brianosman@google.com>
    Auto-Submit: John Stiles <johnstiles@google.com>

diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index 62ce54cc9e..6b08449f3b 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -65,103 +65,108 @@ sksl_fp_tests = [
 sksl_error_tests = [
   "/sksl/errors/ArgumentCountMismatch.sksl",
   "/sksl/errors/ArgumentMismatch.sksl",
   "/sksl/errors/ArgumentModifiers.sksl",
   "/sksl/errors/ArrayIndexOutOfRange.sksl",
   "/sksl/errors/ArrayReturnTypes.sksl",
   "/sksl/errors/ArrayTooManyDimensions.sksl",
   "/sksl/errors/ArrayUnspecifiedDimensions.sksl",
   "/sksl/errors/AssignmentTypeMismatch.sksl",
   "/sksl/errors/BadCaps.sksl",
   "/sksl/errors/BadFieldAccess.sksl",
   "/sksl/errors/BadIndex.sksl",
   "/sksl/errors/BadModifiers.sksl",
   "/sksl/errors/BinaryInvalidType.sksl",
   "/sksl/errors/BinaryTypeCoercion.sksl",
   "/sksl/errors/BinaryTypeMismatch.sksl",
   "/sksl/errors/BitShiftFloat.sksl",
   "/sksl/errors/BitShiftFloatMatrix.sksl",
   "/sksl/errors/BitShiftFloatVector.sksl",
   "/sksl/errors/BooleanArithmetic.sksl",
   "/sksl/errors/BreakOutsideLoop.sksl",
   "/sksl/errors/CallNonFunction.sksl",
   "/sksl/errors/CanExitWithoutReturningValue.sksl",
   "/sksl/errors/ConstructorArgumentCount.sksl",
   "/sksl/errors/ConstructorTypeMismatch.sksl",
   "/sksl/errors/ContinueOutsideLoop.sksl",
   "/sksl/errors/DivideByZero.sksl",
   "/sksl/errors/DoTypeMismatch.sksl",
   "/sksl/errors/DuplicateFunction.sksl",
   "/sksl/errors/DuplicateOutput.sksl",
   "/sksl/errors/DuplicateSymbol.sksl",
   "/sksl/errors/EnumValueMustBeConstInt.sksl",
   "/sksl/errors/ErrorsInDeadCode.sksl",
   "/sksl/errors/FloatRemainder.sksl",
   "/sksl/errors/ForTypeMismatch.sksl",
   "/sksl/errors/GenericArgumentMismatch.sksl",
   "/sksl/errors/IfTypeMismatch.sksl",
   "/sksl/errors/InVarWithInitializerExpression.sksl",
   "/sksl/errors/InterfaceBlockScope.sksl",
   "/sksl/errors/InterfaceBlockStorageModifiers.sksl",
   "/sksl/errors/InterfaceBlockWithNoMembers.sksl",
   "/sksl/errors/InvalidAssignment.sksl",
   "/sksl/errors/InvalidOutParams.sksl",
   "/sksl/errors/InvalidToken.sksl",
   "/sksl/errors/InvalidUnary.sksl",
   "/sksl/errors/MismatchedNumbers.sksl",
   "/sksl/errors/ModifiersInStruct.sksl",
   "/sksl/errors/OpaqueTypeAssignment.sksl",
   "/sksl/errors/OpaqueTypeConstruction.sksl",
   "/sksl/errors/OpaqueTypeInArray.sksl",
   "/sksl/errors/OpaqueTypeInInterfaceBlock.sksl",
   "/sksl/errors/OpaqueTypeInStruct.sksl",
   "/sksl/errors/OpenArray.sksl",
   "/sksl/errors/Ossfuzz26700.sksl",
   "/sksl/errors/Ossfuzz26759.sksl",
   "/sksl/errors/Ossfuzz27650.sksl",
   "/sksl/errors/Ossfuzz27663.sksl",
   "/sksl/errors/Ossfuzz29085.sksl",
   "/sksl/errors/Ossfuzz29845.sksl",
+  "/sksl/errors/Ossfuzz29849.sksl",
   "/sksl/errors/OverflowFloatLiteral.sksl",
   "/sksl/errors/OverflowIntLiteral.sksl",
   "/sksl/errors/OverflowParamArraySize.sksl",
   "/sksl/errors/OverflowUintLiteral.sksl",
   "/sksl/errors/PrivateTypes.sksl",
   "/sksl/errors/RedeclareBasicType.sksl",
   "/sksl/errors/RedeclareEnum.sksl",
   "/sksl/errors/RedeclareSamplerType.sksl",
   "/sksl/errors/RedeclareStruct.sksl",
   "/sksl/errors/RedeclareStructTypeWithName.sksl",
   "/sksl/errors/RedeclareUserType.sksl",
   "/sksl/errors/RedeclareVariable.sksl",
   "/sksl/errors/ReturnDifferentType.sksl",
   "/sksl/errors/ReturnFromVoid.sksl",
   "/sksl/errors/ReturnMissingValue.sksl",
   "/sksl/errors/ReturnTypeMismatch.sksl",
   "/sksl/errors/SelfReferentialInitializerExpression.sksl",
   "/sksl/errors/SpuriousFloat.sksl",
   "/sksl/errors/StaticIfTest.sksl",
   "/sksl/errors/StaticSwitchConditionalBreak.sksl",
   "/sksl/errors/StaticSwitchTest.sksl",
   "/sksl/errors/StructTooDeeplyNested.sksl",
   "/sksl/errors/SwitchDuplicateCase.sksl",
   "/sksl/errors/SwitchTypes.sksl",
   "/sksl/errors/SwizzleConstantOutput.sksl",
   "/sksl/errors/SwizzleMatrix.sksl",
   "/sksl/errors/SwizzleOnlyLiterals.sksl",
   "/sksl/errors/SwizzleOutOfBounds.sksl",
   "/sksl/errors/SwizzleTooManyComponents.sksl",
   "/sksl/errors/TernaryMismatch.sksl",
   "/sksl/errors/UndeclaredFunction.sksl",
   "/sksl/errors/UndefinedFunction.sksl",
   "/sksl/errors/UndefinedSymbol.sksl",
   "/sksl/errors/Unreachable.sksl",
   "/sksl/errors/UnsupportedGLSLIdentifiers.sksl",
+  "/sksl/errors/UnscopedVariableInDoWhile.sksl",
+  "/sksl/errors/UnscopedVariableInElse.sksl",
+  "/sksl/errors/UnscopedVariableInIf.sksl",
+  "/sksl/errors/UnscopedVariableInWhile.sksl",
   "/sksl/errors/UseWithoutInitializeArrayIndex.sksl",
   "/sksl/errors/UseWithoutInitializeBinaryExpr.sksl",
   "/sksl/errors/UseWithoutInitializeDeadIf.sksl",
   "/sksl/errors/UseWithoutInitializeDeadSwitch.sksl",
   "/sksl/errors/UseWithoutInitializeReturnValue.sksl",
   "/sksl/errors/UseWithoutInitializeVarDecl.sksl",
   "/sksl/errors/UsingInvalidValue.sksl",
   "/sksl/errors/WhileTypeMismatch.sksl",
 ]
diff --git a/resources/sksl/errors/Ossfuzz29849.sksl b/resources/sksl/errors/Ossfuzz29849.sksl
new file mode 100644
index 0000000000..9e00e9582e
--- /dev/null
+++ b/resources/sksl/errors/Ossfuzz29849.sksl
@@ -0,0 +1,4 @@
+void main() {
+    if (2 < 2) int a;
+    a;
+}
diff --git a/resources/sksl/errors/UnscopedVariableInDoWhile.sksl b/resources/sksl/errors/UnscopedVariableInDoWhile.sksl
new file mode 100644
index 0000000000..39dada807a
--- /dev/null
+++ b/resources/sksl/errors/UnscopedVariableInDoWhile.sksl
@@ -0,0 +1,3 @@
+void main() {
+    do int foo = 1, bar = foo; while (false);
+}
diff --git a/resources/sksl/errors/UnscopedVariableInElse.sksl b/resources/sksl/errors/UnscopedVariableInElse.sksl
new file mode 100644
index 0000000000..5f1a42af83
--- /dev/null
+++ b/resources/sksl/errors/UnscopedVariableInElse.sksl
@@ -0,0 +1,3 @@
+void main() {
+    if (true) ; else half4 color = sk_FragColor;
+}
diff --git a/resources/sksl/errors/UnscopedVariableInIf.sksl b/resources/sksl/errors/UnscopedVariableInIf.sksl
new file mode 100644
index 0000000000..912b58b5e8
--- /dev/null
+++ b/resources/sksl/errors/UnscopedVariableInIf.sksl
@@ -0,0 +1,3 @@
+void main() {
+    if (true) half4 x;
+}
diff --git a/resources/sksl/errors/UnscopedVariableInWhile.sksl b/resources/sksl/errors/UnscopedVariableInWhile.sksl
new file mode 100644
index 0000000000..07da96781a
--- /dev/null
+++ b/resources/sksl/errors/UnscopedVariableInWhile.sksl
@@ -0,0 +1,3 @@
+void main() {
+    while (false) bool b;
+}
diff --git a/src/sksl/SkSLIRGenerator.cpp b/src/sksl/SkSLIRGenerator.cpp
index d7c9e5ccbd..3e7d56441e 100644
--- a/src/sksl/SkSLIRGenerator.cpp
+++ b/src/sksl/SkSLIRGenerator.cpp
@@ -150,6 +150,38 @@ void IRGenerator::popSymbolTable() {
     fSymbolTable = fSymbolTable->fParent;
 }
 
+bool IRGenerator::detectVarDeclarationWithoutScope(const Statement& stmt) {
+    // Parsing an AST node containing a single variable declaration creates a lone VarDeclaration
+    // statement. An AST with multiple variable declarations creates an unscoped Block containing
+    // multiple VarDeclaration statements. We need to detect either case.
+    const Variable* var;
+    if (stmt.is<VarDeclaration>()) {
+        // The single-variable case. No blocks at all.
+        var = &stmt.as<VarDeclaration>().var();
+    } else if (stmt.is<Block>()) {
+        // The multiple-variable case: an unscoped, non-empty block...
+        const Block& block = stmt.as<Block>();
+        if (block.isScope() || block.children().empty()) {
+            return false;
+        }
+        // ... holding a variable declaration.
+        const Statement& innerStmt = *block.children().front();
+        if (!innerStmt.is<VarDeclaration>()) {
+            return false;
+        }
+        var = &innerStmt.as<VarDeclaration>().var();
+    } else {
+        // This statement wasn't a variable declaration. No problem.
+        return false;
+    }
+
+    // Report an error.
+    SkASSERT(var);
+    this->errorReporter().error(stmt.fOffset,
+                                "variable '" + var->name() + "' must be created in a scope");
+    return true;
+}
+
 std::unique_ptr<Extension> IRGenerator::convertExtension(int offset, StringFragment name) {
     if (fKind != Program::kFragment_Kind &&
         fKind != Program::kVertex_Kind &&
@@ -562,22 +594,28 @@ std::unique_ptr<Statement> IRGenerator::convertIf(const ASTNode& n) {
 std::unique_ptr<Statement> IRGenerator::convertIf(int offset, bool isStatic,
                                                   std::unique_ptr<Expression> test,
                                                   std::unique_ptr<Statement> ifTrue,
                                                   std::unique_ptr<Statement> ifFalse) {
     test = this->coerce(std::move(test), *fContext.fTypes.fBool);
     if (!test) {
         return nullptr;
     }
+    if (this->detectVarDeclarationWithoutScope(*ifTrue)) {
+        return nullptr;
+    }
+    if (ifFalse && this->detectVarDeclarationWithoutScope(*ifFalse)) {
+        return nullptr;
+    }
     if (test->is<BoolLiteral>()) {
         // Static Boolean values can fold down to a single branch.
         if (test->as<BoolLiteral>().value()) {
             return ifTrue;
         }
         if (ifFalse) {
             return ifFalse;
         }
         // False, but no else-clause. Not an error, so don't return null!
         return std::make_unique<Nop>();
     }
     return std::make_unique<IfStatement>(offset, isStatic, std::move(test), std::move(ifTrue),
                                          std::move(ifFalse));
 }
@@ -647,14 +685,18 @@ std::unique_ptr<Statement> IRGenerator::convertFor(const ASTNode& f) {
 std::unique_ptr<Statement> IRGenerator::convertWhile(int offset, std::unique_ptr<Expression> test,
                                                      std::unique_ptr<Statement> statement) {
     if (this->strictES2Mode()) {
         this->errorReporter().error(offset, "while loops are not supported");
         return nullptr;
     }
 
     test = this->coerce(std::move(test), *fContext.fTypes.fBool);
     if (!test) {
         return nullptr;
     }
+    if (this->detectVarDeclarationWithoutScope(*statement)) {
+        return nullptr;
+    }
+
     return std::make_unique<ForStatement>(offset, /*initializer=*/nullptr, std::move(test),
                                           /*next=*/nullptr, std::move(statement), fSymbolTable);
 }
@@ -677,14 +719,17 @@ std::unique_ptr<Statement> IRGenerator::convertWhile(const ASTNode& w) {
 std::unique_ptr<Statement> IRGenerator::convertDo(std::unique_ptr<Statement> stmt,
                                                   std::unique_ptr<Expression> test) {
     if (this->strictES2Mode()) {
         this->errorReporter().error(stmt->fOffset, "do-while loops are not supported");
         return nullptr;
     }
 
     test = this->coerce(std::move(test), *fContext.fTypes.fBool);
     if (!test) {
         return nullptr;
     }
+    if (this->detectVarDeclarationWithoutScope(*stmt)) {
+        return nullptr;
+    }
     return std::make_unique<DoStatement>(stmt->fOffset, std::move(stmt), std::move(test));
 }
 
diff --git a/src/sksl/SkSLIRGenerator.h b/src/sksl/SkSLIRGenerator.h
index f05a44a2a4..2e952002d7 100644
--- a/src/sksl/SkSLIRGenerator.h
+++ b/src/sksl/SkSLIRGenerator.h
@@ -151,161 +151,162 @@ public:
 private:
     /**
      * Relinquishes ownership of the Modifiers that have been collected so far and returns them.
      */
     std::unique_ptr<ModifiersPool> releaseModifiers();
 
     void checkModifiers(int offset, const Modifiers& modifiers, int permitted);
     void checkVarDeclaration(int offset, const Modifiers& modifiers, const Type* baseType,
                              Variable::Storage storage);
     std::unique_ptr<Statement> convertVarDeclaration(int offset, const Modifiers& modifiers,
                                                      const Type* baseType, StringFragment name,
                                                      bool isArray,
                                                      std::unique_ptr<Expression> arraySize,
                                                      std::unique_ptr<Expression> value,
                                                      Variable::Storage storage);
     StatementArray convertVarDeclarations(const ASTNode& decl, Variable::Storage storage);
     void convertFunction(const ASTNode& f);
     std::unique_ptr<Statement> convertSingleStatement(const ASTNode& statement);
     std::unique_ptr<Statement> convertStatement(const ASTNode& statement);
     std::unique_ptr<Expression> convertExpression(const ASTNode& expression);
     std::unique_ptr<ModifiersDeclaration> convertModifiersDeclaration(const ASTNode& m);
 
     const Type* convertType(const ASTNode& type, bool allowVoid = false);
     std::unique_ptr<Expression> call(int offset,
                                      std::unique_ptr<Expression> function,
                                      ExpressionArray arguments);
     std::unique_ptr<Expression> call(int offset,
                                      const FunctionDeclaration& function,
                                      ExpressionArray arguments);
     CoercionCost callCost(const FunctionDeclaration& function,
                           const ExpressionArray& arguments);
     std::unique_ptr<Expression> coerce(std::unique_ptr<Expression> expr, const Type& type);
     CoercionCost coercionCost(const Expression& expr, const Type& type);
     int convertArraySize(int offset, const ASTNode& s);
     int convertArraySize(std::unique_ptr<Expression> s);
     std::unique_ptr<Expression> convertBinaryExpression(std::unique_ptr<Expression> left,
                                                         Token::Kind op,
                                                         std::unique_ptr<Expression> right);
     std::unique_ptr<Block> convertBlock(const ASTNode& block);
     std::unique_ptr<Statement> convertBreak(const ASTNode& b);
     std::unique_ptr<Expression> convertScalarConstructor(int offset,
                                                          const Type& type,
                                                          ExpressionArray params);
     std::unique_ptr<Expression> convertCompoundConstructor(int offset,
                                                            const Type& type,
                                                            ExpressionArray params);
     std::unique_ptr<Expression> convertConstructor(int offset,
                                                    const Type& type,
                                                    ExpressionArray params);
     std::unique_ptr<Statement> convertContinue(const ASTNode& c);
     std::unique_ptr<Statement> convertDiscard(const ASTNode& d);
     std::unique_ptr<Statement> convertDo(std::unique_ptr<Statement> stmt,
                                          std::unique_ptr<Expression> test);
     std::unique_ptr<Statement> convertDo(const ASTNode& d);
     std::unique_ptr<Statement> convertSwitch(const ASTNode& s);
     std::unique_ptr<Expression> convertBinaryExpression(const ASTNode& expression);
     std::unique_ptr<Extension> convertExtension(int offset, StringFragment name);
     std::unique_ptr<Statement> convertExpressionStatement(const ASTNode& s);
     std::unique_ptr<Expression> convertField(std::unique_ptr<Expression> base,
                                              StringFragment field);
     std::unique_ptr<Statement> convertFor(int offset,
                                           std::unique_ptr<Statement> initializer,
                                           std::unique_ptr<Expression> test,
                                           std::unique_ptr<Expression> next,
                                           std::unique_ptr<Statement> statement);
     std::unique_ptr<Statement> convertFor(const ASTNode& f);
     std::unique_ptr<Expression> convertIdentifier(int offset, StringFragment identifier);
     std::unique_ptr<Expression> convertIdentifier(const ASTNode& identifier);
     std::unique_ptr<Statement> convertIf(const ASTNode& s);
     std::unique_ptr<Statement> convertIf(int offset, bool isStatic,
                                          std::unique_ptr<Expression> test,
                                          std::unique_ptr<Statement> ifTrue,
                                          std::unique_ptr<Statement> ifFalse);
     std::unique_ptr<InterfaceBlock> convertInterfaceBlock(const ASTNode& s);
     Modifiers convertModifiers(const Modifiers& m);
     std::unique_ptr<Expression> convertPrefixExpression(const ASTNode& expression);
     std::unique_ptr<Statement> convertReturn(const ASTNode& r);
     std::unique_ptr<Section> convertSection(const ASTNode& e);
     std::unique_ptr<Expression> convertCallExpression(const ASTNode& expression);
     std::unique_ptr<Expression> convertFieldExpression(const ASTNode& expression);
     std::unique_ptr<Expression> convertIndexExpression(const ASTNode& expression);
     std::unique_ptr<Expression> convertIndex(std::unique_ptr<Expression> base,
                                              std::unique_ptr<Expression> index);
     std::unique_ptr<Expression> convertPostfixExpression(std::unique_ptr<Expression> base,
                                                          Token::Kind op);
     std::unique_ptr<Expression> convertPostfixExpression(const ASTNode& expression);
     std::unique_ptr<Expression> convertPrefixExpression(Token::Kind op,
                                                         std::unique_ptr<Expression> base);
     std::unique_ptr<Expression> convertScopeExpression(const ASTNode& expression);
     std::unique_ptr<StructDefinition> convertStructDefinition(const ASTNode& expression);
     std::unique_ptr<Expression> convertTypeField(int offset, const Type& type,
                                                  StringFragment field);
     std::unique_ptr<Expression> convertSwizzle(std::unique_ptr<Expression> base, String fields);
     std::unique_ptr<Expression> convertTernaryExpression(std::unique_ptr<Expression> test,
                                                          std::unique_ptr<Expression> ifTrue,
                                                          std::unique_ptr<Expression> ifFalse);
     std::unique_ptr<Expression> convertTernaryExpression(const ASTNode& expression);
     std::unique_ptr<Statement> convertVarDeclarationStatement(const ASTNode& s);
     std::unique_ptr<Statement> convertWhile(int offset, std::unique_ptr<Expression> test,
                                             std::unique_ptr<Statement> statement);
     std::unique_ptr<Statement> convertWhile(const ASTNode& w);
     void convertGlobalVarDeclarations(const ASTNode& decl);
     void convertEnum(const ASTNode& e);
     std::unique_ptr<Block> applyInvocationIDWorkaround(std::unique_ptr<Block> main);
     // returns a statement which converts sk_Position from device to normalized coordinates
     std::unique_ptr<Statement> getNormalizeSkPositionCode();
 
     void checkValid(const Expression& expr);
     bool typeContainsPrivateFields(const Type& type);
     bool setRefKind(Expression& expr, VariableReference::RefKind kind);
     bool getConstantInt(const Expression& value, SKSL_INT* out);
     void copyIntrinsicIfNeeded(const FunctionDeclaration& function);
     void findAndDeclareBuiltinVariables();
+    bool detectVarDeclarationWithoutScope(const Statement& stmt);
 
     // Runtime effects (and the interpreter, which uses the same CPU runtime) require adherence to
     // the strict rules from The OpenGL ES Shading Language Version 1.00. (Including Appendix A).
     bool strictES2Mode() const {
         return fKind == Program::kRuntimeEffect_Kind || fKind == Program::kGeneric_Kind;
     }
 
     Program::Inputs fInputs;
     const Program::Settings* fSettings = nullptr;
     const ShaderCapsClass* fCaps = nullptr;
     Program::Kind fKind;
 
     std::unique_ptr<ASTFile> fFile;
     const FunctionDeclaration* fCurrentFunction = nullptr;
     std::unordered_map<String, Program::Settings::Value> fCapsMap;
     std::shared_ptr<SymbolTable> fSymbolTable = nullptr;
     // additional statements that need to be inserted before the one that convertStatement is
     // currently working on
     StatementArray fExtraStatements;
     // Symbols which have definitions in the include files.
     IRIntrinsicMap* fIntrinsics = nullptr;
     std::unordered_set<const FunctionDeclaration*> fReferencedIntrinsics;
     int fLoopLevel = 0;
     int fSwitchLevel = 0;
     int fInvocations;
     std::vector<std::unique_ptr<ProgramElement>>* fProgramElements = nullptr;
     std::vector<const ProgramElement*>*           fSharedElements = nullptr;
     const Variable* fRTAdjust = nullptr;
     const Variable* fRTAdjustInterfaceBlock = nullptr;
     int fRTAdjustFieldIndex;
     bool fCanInline = true;
     // true if we are currently processing one of the built-in SkSL include files
     bool fIsBuiltinCode = false;
     std::unique_ptr<ModifiersPool> fModifiers;
 
     friend class AutoSymbolTable;
     friend class AutoLoopLevel;
     friend class AutoSwitchLevel;
     friend class AutoDisableInline;
     friend class Compiler;
     friend class dsl::DSLCore;
     friend class dsl::DSLVar;
     friend class dsl::DSLWriter;
 };
 
 }  // namespace SkSL
 
 #endif
diff --git a/tests/sksl/errors/Ossfuzz29849.glsl b/tests/sksl/errors/Ossfuzz29849.glsl
new file mode 100644
index 0000000000..b6529e1838
--- /dev/null
+++ b/tests/sksl/errors/Ossfuzz29849.glsl
@@ -0,0 +1,4 @@
+### Compilation failed:
+
+error: 2: variable 'a' must be created in a scope
+1 error
diff --git a/tests/sksl/errors/UnscopedVariableInDoWhile.glsl b/tests/sksl/errors/UnscopedVariableInDoWhile.glsl
new file mode 100644
index 0000000000..74112d3dc0
--- /dev/null
+++ b/tests/sksl/errors/UnscopedVariableInDoWhile.glsl
@@ -0,0 +1,4 @@
+### Compilation failed:
+
+error: 2: variable 'foo' must be created in a scope
+1 error
diff --git a/tests/sksl/errors/UnscopedVariableInElse.glsl b/tests/sksl/errors/UnscopedVariableInElse.glsl
new file mode 100644
index 0000000000..46151b7629
--- /dev/null
+++ b/tests/sksl/errors/UnscopedVariableInElse.glsl
@@ -0,0 +1,4 @@
+### Compilation failed:
+
+error: 2: variable 'color' must be created in a scope
+1 error
diff --git a/tests/sksl/errors/UnscopedVariableInIf.glsl b/tests/sksl/errors/UnscopedVariableInIf.glsl
new file mode 100644
index 0000000000..3ce2f16f51
--- /dev/null
+++ b/tests/sksl/errors/UnscopedVariableInIf.glsl
@@ -0,0 +1,4 @@
+### Compilation failed:
+
+error: 2: variable 'x' must be created in a scope
+1 error
diff --git a/tests/sksl/errors/UnscopedVariableInWhile.glsl b/tests/sksl/errors/UnscopedVariableInWhile.glsl
new file mode 100644
index 0000000000..77003b65ef
--- /dev/null
+++ b/tests/sksl/errors/UnscopedVariableInWhile.glsl
@@ -0,0 +1,4 @@
+### Compilation failed:
+
+error: 2: variable 'b' must be created in a scope
+1 error
