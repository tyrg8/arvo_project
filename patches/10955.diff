commit 1c76c8f6ff7877e486f6e94d04b2dc65348b26d5
Author: Behdad Esfahbod <behdad@behdad.org>
Date:   Sun Oct 14 19:39:31 2018 -0700

    [morx] Handle end-of-text conditions in Insertion
    
    Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=10955

diff --git a/src/hb-aat-layout-morx-table.hh b/src/hb-aat-layout-morx-table.hh
index b902fd79b..544deddea 100644
--- a/src/hb-aat-layout-morx-table.hh
+++ b/src/hb-aat-layout-morx-table.hh
@@ -522,198 +522,198 @@ struct NoncontextualSubtable
 struct InsertionSubtable
 {
   struct EntryData
   {
     HBUINT16	currentInsertIndex;	/* Zero-based index into the insertion glyph table.
 					 * The number of glyphs to be inserted is contained
 					 * in the currentInsertCount field in the flags.
 					 * A value of 0xFFFF indicates no insertion is to
 					 * be done. */
     HBUINT16	markedInsertIndex;	/* Zero-based index into the insertion glyph table.
 					 * The number of glyphs to be inserted is contained
 					 * in the markedInsertCount field in the flags.
 					 * A value of 0xFFFF indicates no insertion is to
 					 * be done. */
     public:
     DEFINE_SIZE_STATIC (4);
   };
 
   struct driver_context_t
   {
     static const bool in_place = false;
     enum Flags
     {
       SetMark		= 0x8000,	/* If set, mark the current glyph. */
       DontAdvance	= 0x4000,	/* If set, don't advance to the next glyph before
 					 * going to the new state.  This does not mean
 					 * that the glyph pointed to is the same one as
 					 * before. If you've made insertions immediately
 					 * downstream of the current glyph, the next glyph
 					 * processed would in fact be the first one
 					 * inserted. */
       CurrentIsKashidaLike= 0x2000,	/* If set, and the currentInsertList is nonzero,
 					 * then the specified glyph list will be inserted
 					 * as a kashida-like insertion, either before or
 					 * after the current glyph (depending on the state
 					 * of the currentInsertBefore flag). If clear, and
 					 * the currentInsertList is nonzero, then the
 					 * specified glyph list will be inserted as a
 					 * split-vowel-like insertion, either before or
 					 * after the current glyph (depending on the state
 					 * of the currentInsertBefore flag). */
       MarkedIsKashidaLike= 0x1000,	/* If set, and the markedInsertList is nonzero,
 					 * then the specified glyph list will be inserted
 					 * as a kashida-like insertion, either before or
 					 * after the marked glyph (depending on the state
 					 * of the markedInsertBefore flag). If clear, and
 					 * the markedInsertList is nonzero, then the
 					 * specified glyph list will be inserted as a
 					 * split-vowel-like insertion, either before or
 					 * after the marked glyph (depending on the state
 					 * of the markedInsertBefore flag). */
       CurrentInsertBefore= 0x0800,	/* If set, specifies that insertions are to be made
 					 * to the left of the current glyph. If clear,
 					 * they're made to the right of the current glyph. */
       MarkedInsertBefore= 0x0400,	/* If set, specifies that insertions are to be
 					 * made to the left of the marked glyph. If clear,
 					 * they're made to the right of the marked glyph. */
       CurrentInsertCount= 0x3E0,	/* This 5-bit field is treated as a count of the
 					 * number of glyphs to insert at the current
 					 * position. Since zero means no insertions, the
 					 * largest number of insertions at any given
 					 * current location is 31 glyphs. */
       MarkedInsertCount= 0x001F,	/* This 5-bit field is treated as a count of the
 					 * number of glyphs to insert at the marked
 					 * position. Since zero means no insertions, the
 					 * largest number of insertions at any given
 					 * marked location is 31 glyphs. */
     };
 
     inline driver_context_t (const InsertionSubtable *table,
 			     hb_aat_apply_context_t *c_) :
 	ret (false),
 	c (c_),
 	mark_set (false),
 	mark (0),
 	insertionAction (table+table->insertionAction) {}
 
     inline bool is_actionable (StateTableDriver<EntryData> *driver,
 			       const Entry<EntryData> *entry)
     {
       return (entry->flags & (CurrentInsertCount | MarkedInsertCount)) &&
 	     (entry->data.currentInsertIndex != 0xFFFF ||entry->data.markedInsertIndex != 0xFFFF);
     }
     inline bool transition (StateTableDriver<EntryData> *driver,
 			    const Entry<EntryData> *entry)
     {
       hb_buffer_t *buffer = driver->buffer;
       unsigned int flags = entry->flags;
 
       if (entry->data.markedInsertIndex != 0xFFFF && mark_set)
       {
 	unsigned int count = (flags & MarkedInsertCount);
 	unsigned int start = entry->data.markedInsertIndex;
 	const GlyphID *glyphs = &insertionAction[start];
 	if (unlikely (!c->sanitizer.check_array (glyphs, count))) return false;
 
 	bool before = flags & MarkedInsertBefore;
 
 	unsigned int end = buffer->out_len;
 	buffer->move_to (mark);
 
-	if (!before)
+	if (buffer->idx < buffer->len && !before)
 	  buffer->copy_glyph ();
 	/* TODO We ignore KashidaLike setting. */
 	for (unsigned int i = 0; i < count; i++)
 	  buffer->output_glyph (glyphs[i]);
-	if (!before)
+	if (buffer->idx < buffer->len && !before)
 	  buffer->skip_glyph ();
 
 	buffer->move_to (end + count);
 
 	buffer->unsafe_to_break_from_outbuffer (mark, MIN (buffer->idx + 1, buffer->len));
       }
 
       if (entry->data.currentInsertIndex != 0xFFFF)
       {
 	unsigned int count = (flags & CurrentInsertCount) >> 5;
 	unsigned int start = entry->data.currentInsertIndex;
 	const GlyphID *glyphs = &insertionAction[start];
 	if (unlikely (!c->sanitizer.check_array (glyphs, count))) return false;
 
 	bool before = flags & CurrentInsertBefore;
 
 	unsigned int end = buffer->out_len;
 
-	if (!before)
+	if (buffer->idx < buffer->len && !before)
 	  buffer->copy_glyph ();
 	/* TODO We ignore KashidaLike setting. */
 	for (unsigned int i = 0; i < count; i++)
 	  buffer->output_glyph (glyphs[i]);
-	if (!before)
+	if (buffer->idx < buffer->len && !before)
 	  buffer->skip_glyph ();
 
 	/* Humm. Not sure where to move to.  There's this wording under
 	 * DontAdvance flag:
 	 *
 	 * "If set, don't update the glyph index before going to the new state.
 	 * This does not mean that the glyph pointed to is the same one as
 	 * before. If you've made insertions immediately downstream of the
 	 * current glyph, the next glyph processed would in fact be the first
 	 * one inserted."
 	 *
 	 * This suggests that if DontAdvance is NOT set, we should move to
 	 * end+count.  If it *was*, then move to end, such that newly inserted
 	 * glyphs are now visible.
 	 *
 	 * https://github.com/harfbuzz/harfbuzz/issues/1224#issuecomment-427691417
 	 */
 	buffer->move_to ((flags & DontAdvance) ? end : end + count);
       }
 
       if (flags & SetMark)
       {
 	mark_set = true;
 	mark = buffer->out_len;
       }
 
       return true;
     }
 
     public:
     bool ret;
     private:
     hb_aat_apply_context_t *c;
     bool mark_set;
     unsigned int mark;
     const UnsizedArrayOf<GlyphID> &insertionAction;
   };
 
   inline bool apply (hb_aat_apply_context_t *c) const
   {
     TRACE_APPLY (this);
 
     driver_context_t dc (this, c);
 
     StateTableDriver<EntryData> driver (machine, c->buffer, c->face);
     driver.drive (&dc);
 
     return_trace (dc.ret);
   }
 
   inline bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     /* The rest of array sanitizations are done at run-time. */
     return_trace (c->check_struct (this) && machine.sanitize (c) &&
 		  insertionAction);
   }
 
   protected:
   StateTable<EntryData>
 		machine;
   LOffsetTo<UnsizedArrayOf<GlyphID>, false>
 		insertionAction;	/* Byte offset from stateHeader to the start of
 					 * the insertion glyph table. */
   public:
   DEFINE_SIZE_STATIC (20);
 };
