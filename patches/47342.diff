commit 6dfa647f05cc3041b10325b9f3285df60dab1ecc
Merge: 206a3fcea8 a2fc479c0b
Author: Alexander Alekhin <alexander.a.alekhin@gmail.com>
Date:   Sun Feb 5 19:50:45 2023 +0000

    Merge pull request #23067 from sashashura:patch-3

diff --git a/3rdparty/openjpeg/openjp2/jp2.c b/3rdparty/openjpeg/openjp2/jp2.c
index 7c065ba742..d01881471f 100644
--- a/3rdparty/openjpeg/openjp2/jp2.c
+++ b/3rdparty/openjpeg/openjp2/jp2.c
@@ -1035,116 +1035,116 @@ static OPJ_BOOL opj_jp2_check_color(opj_image_t *image, opj_jp2_color_t *color,
 /* file9.jp2 */
 static OPJ_BOOL opj_jp2_apply_pclr(opj_image_t *image,
                                    opj_jp2_color_t *color,
                                    opj_event_mgr_t * p_manager)
 {
     opj_image_comp_t *old_comps, *new_comps;
     OPJ_BYTE *channel_size, *channel_sign;
     OPJ_UINT32 *entries;
     opj_jp2_cmap_comp_t *cmap;
     OPJ_INT32 *src, *dst;
     OPJ_UINT32 j, max;
     OPJ_UINT16 i, nr_channels, cmp, pcol;
     OPJ_INT32 k, top_k;
 
     channel_size = color->jp2_pclr->channel_size;
     channel_sign = color->jp2_pclr->channel_sign;
     entries = color->jp2_pclr->entries;
     cmap = color->jp2_pclr->cmap;
     nr_channels = color->jp2_pclr->nr_channels;
 
     for (i = 0; i < nr_channels; ++i) {
         /* Palette mapping: */
         cmp = cmap[i].cmp;
         if (image->comps[cmp].data == NULL) {
             opj_event_msg(p_manager, EVT_ERROR,
                           "image->comps[%d].data == NULL in opj_jp2_apply_pclr().\n", i);
             return OPJ_FALSE;
         }
     }
 
     old_comps = image->comps;
     new_comps = (opj_image_comp_t*)
                 opj_malloc(nr_channels * sizeof(opj_image_comp_t));
     if (!new_comps) {
         opj_event_msg(p_manager, EVT_ERROR,
                       "Memory allocation failure in opj_jp2_apply_pclr().\n");
         return OPJ_FALSE;
     }
     for (i = 0; i < nr_channels; ++i) {
         pcol = cmap[i].pcol;
         cmp = cmap[i].cmp;
 
         /* Direct use */
         if (cmap[i].mtyp == 0) {
             assert(pcol == 0);
             new_comps[i] = old_comps[cmp];
         } else {
             assert(i == pcol);
             new_comps[pcol] = old_comps[cmp];
         }
 
         /* Palette mapping: */
         new_comps[i].data = (OPJ_INT32*)
                             opj_image_data_alloc(sizeof(OPJ_INT32) * old_comps[cmp].w * old_comps[cmp].h);
         if (!new_comps[i].data) {
             while (i > 0) {
                 -- i;
                 opj_image_data_free(new_comps[i].data);
             }
             opj_free(new_comps);
             opj_event_msg(p_manager, EVT_ERROR,
                           "Memory allocation failure in opj_jp2_apply_pclr().\n");
             return OPJ_FALSE;
         }
         new_comps[i].prec = channel_size[i];
         new_comps[i].sgnd = channel_sign[i];
     }
 
     top_k = color->jp2_pclr->nr_entries - 1;
 
     for (i = 0; i < nr_channels; ++i) {
         /* Palette mapping: */
         cmp = cmap[i].cmp;
         pcol = cmap[i].pcol;
         src = old_comps[cmp].data;
         assert(src); /* verified above */
-        max = new_comps[pcol].w * new_comps[pcol].h;
+        max = new_comps[i].w * new_comps[i].h;
 
         /* Direct use: */
         if (cmap[i].mtyp == 0) {
             dst = new_comps[i].data;
             assert(dst);
             for (j = 0; j < max; ++j) {
                 dst[j] = src[j];
             }
         } else {
             assert(i == pcol);
             dst = new_comps[pcol].data;
             assert(dst);
             for (j = 0; j < max; ++j) {
                 /* The index */
                 if ((k = src[j]) < 0) {
                     k = 0;
                 } else if (k > top_k) {
                     k = top_k;
                 }
 
                 /* The colour */
                 dst[j] = (OPJ_INT32)entries[k * nr_channels + pcol];
             }
         }
     }
 
     max = image->numcomps;
     for (i = 0; i < max; ++i) {
         if (old_comps[i].data) {
             opj_image_data_free(old_comps[i].data);
         }
     }
 
     opj_free(old_comps);
     image->comps = new_comps;
     image->numcomps = nr_channels;
 
     return OPJ_TRUE;
 }/* apply_pclr() */
