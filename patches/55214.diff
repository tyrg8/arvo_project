commit 10d4a6d0941240702b5e8d77d57184a88bb69e6c
Author: Kobrin Eli <kobrineli@ispras.ru>
Date:   Fri Apr 14 00:37:10 2023 +0300

    Fix out of bounds in `hdf5/src/H5Fint.c:2859` (#2691)

diff --git a/release_docs/RELEASE.txt b/release_docs/RELEASE.txt
index 2dcb057e27..63f5a361de 100644
--- a/release_docs/RELEASE.txt
+++ b/release_docs/RELEASE.txt
@@ -150,231 +150,243 @@ Support for new platforms, languages and compilers
 Bug Fixes since HDF5-1.14.0 release
 ===================================
     Library
     -------
     - Fixed memory leaks, aborts, and overflows in H5O EFL decode
 
       The external file list code could call assert(), read past buffer
       boundaries, and not properly clean up resources when parsing malformed
       external data files messages.
 
       This fix cleans up allocated memory, adds buffer bounds checks, and
       converts asserts to HDF5 error checking.
 
       (DER - 2023/04/13 GH-2605)
 
     - Fixed potential heap buffer overflow in decoding of link info message
 
       Detections of buffer overflow were added for decoding version, index
       flags, link creation order value, and the next three addresses.  The
       checkings will remove the potential invalid read of any of these
       values that could be triggered by a malformed file.
 
       (BMR - 2023/04/12 GH-2603)
 
     - Memory leak
 
       Memory leak was detected when running h5dump with "pov".  The memory was allocated
       via H5FL__malloc() in hdf5/src/H5FL.c
 
       The fuzzed file "pov" was an HDF5 file containing an illegal continuation message.
       When deserializing the object header chunks for the file, memory is allocated for the
       array of continuation messages (cont_msg_info->msgs) in continuation message info struct.
       As error is encountered in loading the illegal message, the memory allocated for
       cont_msg_info->msgs needs to be freed.
 
       (VC - 2023/04/11 GH-2599)
 
     - Fixed memory leaks that could occur when reading a dataset from a
       malformed file
 
       When attempting to read layout, pline, and efl information for a
       dataset, memory leaks could occur if attempting to read pline/efl
       information threw an error, which is due to the memory that was 
       allocated for pline and efl not being properly cleaned up on error.  
 
       (GS - 2023/4/11 GH#2602)
 
     - Fixed potential heap buffer overrun in group info header decoding from malformed file
 
       H5O__ginfo_decode could sometimes read past allocated memory when parsing a group info message from the header of a malformed file.
   
       It now checks buffer size before each read to properly throw an error in these cases.
   
       (ML - 2023/4/6, #2601)
       
     - Fixed potential buffer overrun issues in some object header decode routines
 
       Several checks were added to H5O__layout_decode and H5O__sdspace_decode to
       ensure that memory buffers don't get overrun when decoding buffers read from
       a (possibly corrupted) HDF5 file.
 
       (JTH - 2023/04/05)
 
     - Fixed a heap buffer overflow that occurs when reading from
       a dataset with a compact layout within a malformed HDF5 file
 
       During opening of a dataset that has a compact layout, the
       library allocates a buffer that stores the dataset's raw data.
       The dataset's object header that gets written to the file
       contains information about how large of a buffer the library
       should allocate. If this object header is malformed such that
       it causes the library to allocate a buffer that is too small
       to hold the dataset's raw data, future I/O to the dataset can
       result in heap buffer overflows. To fix this issue, an extra
       check is now performed for compact datasets to ensure that
       the size of the allocated buffer matches the expected size
       of the dataset's raw data (as calculated from the dataset's
       dataspace and datatype information). If the two sizes do not
       match, opening of the dataset will fail.
 
       (JTH - 2023/04/04, GH-2606)
 
     - Fixed a memory corruption issue that can occur when reading
       from a dataset using a hyperslab selection in the file
       dataspace and a point selection in the memory dataspace
 
       When reading from a dataset using a hyperslab selection in
       the dataset's file dataspace and a point selection in the
       dataset's memory dataspace where the file dataspace's "rank"
       is greater than the memory dataspace's "rank", memory corruption
       could occur due to an incorrect number of selection points
       being copied when projecting the point selection onto the
       hyperslab selection's dataspace.
 
       (JTH - 2023/03/23)
 
     - Fixed issues in the Subfiling VFD when using the SELECT_IOC_EVERY_NTH_RANK
       or SELECT_IOC_TOTAL I/O concentrator selection strategies
 
       Multiple bugs involving these I/O concentrator selection strategies
       were fixed, including:
 
         * A bug that caused the selection strategy to be altered when
           criteria for the strategy was specified in the
           H5FD_SUBFILING_IOC_SELECTION_CRITERIA environment variable as
           a single value, rather than in the old and undocumented
           'integer:integer' format
         * Two bugs which caused a request for 'N' I/O concentrators to
           result in 'N - 1' I/O concentrators being assigned, which also
           lead to issues if only 1 I/O concentrator was requested
 
       Also added a regression test for these two I/O concentrator selection
       strategies to prevent future issues. 
 
       (JTH - 2023/03/15)
 
     - Fix CVE-2021-37501 / GHSA-rfgw-5vq3-wrjf
 
       Check for overflow when calculating on-disk attribute data size.
 
       A bogus hdf5 file may contain dataspace messages with sizes
       which lead to the on-disk data sizes to exceed what is addressable.
       When calculating the size, make sure, the multiplication does not
       overflow.
       The test case was crafted in a way that the overflow caused the
       size to be 0.
 
       (EFE - 2023/02/11 GH-2458)
 
     - Fixed an issue with collective metadata writes of global heap data
 
       New test failures in parallel netCDF started occurring with debug
       builds of HDF5 due to an assertion failure and this was reported in
       GitHub issue #2433. The assertion failure began happening after the
       collective metadata write pathway in the library was updated to use
       vector I/O so that parallel-enabled HDF5 Virtual File Drivers (other
       than the existing MPI I/O VFD) can support collective metadata writes.
 
       The assertion failure was fixed by updating collective metadata writes
       to treat global heap metadata as raw data, as done elsewhere in the
       library. 
 
       (JTH - 2023/02/16, GH #2433)
 
+    - Fixed buffer overflow error in image decoding function.
+
+      The error occurred in the function for decoding address from the specified
+      buffer, which is called many times from the function responsible for image
+      decoding. The length of the buffer is known in the image decoding function,
+      but no checks are produced, so the buffer overflow can occur in many places,
+      including callee functions for address decoding. 
+
+      The error was fixed by inserting corresponding checks for buffer overflow.
+
+      (KE - 2023/02/07 GH #2432)
+
 
     Java Library
     ------------
     -
 
 
     Configuration
     -------------
     - Fixed improper include of Subfiling VFD build directory
 
       With the release of the Subfiling Virtual File Driver feature, compiler
       flags were added to the Autotools build's CPPFLAGS and AM_CPPFLAGS
       variables to always include the Subfiling VFD source code directory,
       regardless of whether the VFD is enabled and built or not. These flags
       are needed because the header files for the VFD contain macros that are
       assumed to always be available, such as H5FD_SUBFILING_NAME, so the
       header files are unconditionally included in the HDF5 library. However,
       these flags are only needed when building HDF5, so they belong in the
       H5_CPPFLAGS variable instead. Inclusion in the CPPFLAGS and AM_CPPFLAGS
       variables would export these flags to the h5cc and h5c++ wrapper scripts,
       as well as the libhdf5.settings file, which would break builds of software
       that use HDF5 and try to use or parse information out of these files after
       deleting temporary HDF5 build directories.
 
       (JTH - 2023/04/05 GH-2422, GH-2621)
 
     - Correct the CMake generated pkg-config file
 
       The pkg-config file generated by CMake had the order and placement of the
       libraries wrong. Also added support for debug library names.
 
       Changed the order of Libs.private libraries so that dependencies come after
       dependents. Did not move the compression libraries into Requires.private
       because there was not a way to determine if the compression libraries had
       supported pkconfig files. Still recommend that the CMake config file method
       be used for building projects with CMake.
 
       (ADB - 2023/02/16 GH-1546,GH-2259)
 
 
     Tools
     -----
     - In the tools traverse function - an error in either visit call
       will bypass the cleanup of the local data variables.
 
       Replaced the H5TOOLS_GOTO_ERROR with just H5TOOLS_ERROR.
 
       (ADB - 2023/04/06 GH-2598)
 
 
     Performance
     -------------
     -
 
 
     Fortran API
     -----------
     -
 
     High-Level Library
     ------------------
     -
 
 
     Fortran High-Level APIs
     -----------------------
     -
 
 
     Documentation
     -------------
     -
 
 
     F90 APIs
     --------
     -
 
 
     C++ APIs
     --------
     - 
 
 
     Testing
     -------
     -
diff --git a/src/H5Fsuper_cache.c b/src/H5Fsuper_cache.c
index 5d9b62843b..467e2875ac 100644
--- a/src/H5Fsuper_cache.c
+++ b/src/H5Fsuper_cache.c
@@ -412,169 +412,219 @@ static void *
 H5F__cache_superblock_deserialize(const void *_image, size_t H5_ATTR_NDEBUG_UNUSED len, void *_udata,
                                   hbool_t H5_ATTR_UNUSED *dirty)
 {
     H5F_super_t               *sblock    = NULL;                                /* File's superblock */
     H5F_superblock_cache_ud_t *udata     = (H5F_superblock_cache_ud_t *)_udata; /* User data */
     const uint8_t             *image     = _image; /* Pointer into raw data buffer */
     H5F_super_t               *ret_value = NULL;   /* Return value */
 
     FUNC_ENTER_PACKAGE
 
     /* Check arguments */
     HDassert(image);
     HDassert(udata);
     HDassert(udata->f);
     HDassert(len >= H5F_SUPERBLOCK_FIXED_SIZE + 6);
 
     /* Allocate space for the superblock */
     if (NULL == (sblock = H5FL_CALLOC(H5F_super_t)))
         HGOTO_ERROR(H5E_RESOURCE, H5E_NOSPACE, NULL, "memory allocation failed")
 
     /* Deserialize the file superblock's prefix */
     if (H5F__superblock_prefix_decode(sblock, &image, udata, FALSE) < 0)
         HGOTO_ERROR(H5E_FILE, H5E_CANTDECODE, NULL, "can't decode file superblock prefix")
 
+    const uint8_t *image_end = image + len - 1;
+
     /* Check for older version of superblock format */
     if (sblock->super_vers < HDF5_SUPERBLOCK_VERSION_2) {
         uint32_t status_flags;  /* File status flags	   */
         unsigned sym_leaf_k;    /* Symbol table leaf node's 'K' value */
         unsigned snode_btree_k; /* B-tree symbol table internal node 'K' value */
         unsigned chunk_btree_k; /* B-tree chunk internal node 'K' value */
 
+        /* Check whether the image pointer is out of bounds */
+        if (H5_IS_BUFFER_OVERFLOW(image, 1, image_end))
+            HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, NULL, "image pointer is out of bounds")
+
         /* Freespace version (hard-wired) */
         if (HDF5_FREESPACE_VERSION != *image++)
             HGOTO_ERROR(H5E_FILE, H5E_BADVALUE, NULL, "bad free space version number")
 
+        /* Check whether the image pointer is out of bounds */
+        if (H5_IS_BUFFER_OVERFLOW(image, 1, image_end))
+            HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, NULL, "image pointer is out of bounds")
+
         /* Root group version number (hard-wired) */
         if (HDF5_OBJECTDIR_VERSION != *image++)
             HGOTO_ERROR(H5E_FILE, H5E_BADVALUE, NULL, "bad object directory version number")
 
         /* Skip over reserved byte */
         image++;
 
+        /* Check whether the image pointer is out of bounds */
+        if (H5_IS_BUFFER_OVERFLOW(image, 1, image_end))
+            HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, NULL, "image pointer is out of bounds")
+
         /* Shared header version number (hard-wired) */
         if (HDF5_SHAREDHEADER_VERSION != *image++)
             HGOTO_ERROR(H5E_FILE, H5E_BADVALUE, NULL, "bad shared-header format version number")
 
         /* Skip over size of file addresses (already decoded) */
         image++;
         udata->f->shared->sizeof_addr = sblock->sizeof_addr; /* Keep a local copy also */
 
         /* Skip over size of file sizes (already decoded) */
         image++;
         udata->f->shared->sizeof_size = sblock->sizeof_size; /* Keep a local copy also */
 
         /* Skip over reserved byte */
         image++;
 
+        /* Check whether the image pointer is out of bounds */
+        if (H5_IS_BUFFER_OVERFLOW(image, sizeof(uint16_t), image_end))
+            HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, NULL, "image pointer is out of bounds")
+
         /* Various B-tree sizes */
         UINT16DECODE(image, sym_leaf_k);
         if (sym_leaf_k == 0)
             HGOTO_ERROR(H5E_FILE, H5E_BADRANGE, NULL, "bad symbol table leaf node 1/2 rank")
         udata->sym_leaf_k = sym_leaf_k; /* Keep a local copy also */
 
+        /* Check whether the image pointer is out of bounds */
+        if (H5_IS_BUFFER_OVERFLOW(image, sizeof(uint16_t), image_end))
+            HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, NULL, "image pointer is out of bounds")
+
         /* Need 'get' call to set other array values */
         UINT16DECODE(image, snode_btree_k);
         if (snode_btree_k == 0)
             HGOTO_ERROR(H5E_FILE, H5E_BADRANGE, NULL, "bad 1/2 rank for btree internal nodes")
         udata->btree_k[H5B_SNODE_ID] = snode_btree_k;
 
         /*
          * Delay setting the value in the property list until we've checked
          * for the indexed storage B-tree internal 'K' value later.
          */
 
+        /* Check whether the image pointer is out of bounds */
+        if (H5_IS_BUFFER_OVERFLOW(image, sizeof(uint32_t), image_end))
+            HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, NULL, "image pointer is out of bounds")
+
         /* File status flags (not really used yet) */
         UINT32DECODE(image, status_flags);
         HDassert(status_flags <= 255);
         sblock->status_flags = (uint8_t)status_flags;
         if (sblock->status_flags & ~H5F_SUPER_ALL_FLAGS)
             HGOTO_ERROR(H5E_FILE, H5E_BADVALUE, NULL, "bad flag value for superblock")
 
         /*
          * If the superblock version # is greater than 0, read in the indexed
          * storage B-tree internal 'K' value
          */
         if (sblock->super_vers > HDF5_SUPERBLOCK_VERSION_DEF) {
+            /* Check whether the image pointer is out of bounds */
+            if (H5_IS_BUFFER_OVERFLOW(image, sizeof(uint16_t), image_end))
+                HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, NULL, "image pointer is out of bounds")
+
             UINT16DECODE(image, chunk_btree_k);
 
             /* Reserved bytes are present only in version 1 */
-            if (sblock->super_vers == HDF5_SUPERBLOCK_VERSION_1)
+            if (sblock->super_vers == HDF5_SUPERBLOCK_VERSION_1) {
                 image += 2; /* reserved */
-        }                   /* end if */
+
+                /* Check whether the image pointer is out of bounds */
+                if (H5_IS_BUFFER_OVERFLOW(image, 1, image_end))
+                    HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, NULL, "image pointer is out of bounds")
+            }
+        } /* end if */
         else
             chunk_btree_k = HDF5_BTREE_CHUNK_IK_DEF;
         udata->btree_k[H5B_CHUNK_ID] = chunk_btree_k;
 
+        /* Check whether the image pointer will be out of bounds */
+        if (H5_IS_BUFFER_OVERFLOW(image, H5F_SIZEOF_ADDR(udata->f) * 4, image_end))
+            HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, NULL, "image pointer is out of bounds")
+
         /* Remainder of "variable-sized" portion of superblock */
         H5F_addr_decode(udata->f, (const uint8_t **)&image, &sblock->base_addr /*out*/);
         H5F_addr_decode(udata->f, (const uint8_t **)&image, &sblock->ext_addr /*out*/);
         H5F_addr_decode(udata->f, (const uint8_t **)&image, &udata->stored_eof /*out*/);
         H5F_addr_decode(udata->f, (const uint8_t **)&image, &sblock->driver_addr /*out*/);
 
         /* Allocate space for the root group symbol table entry */
         HDassert(!sblock->root_ent);
         if (NULL == (sblock->root_ent = (H5G_entry_t *)H5MM_calloc(sizeof(H5G_entry_t))))
             HGOTO_ERROR(H5E_FILE, H5E_CANTALLOC, NULL,
                         "can't allocate space for root group symbol table entry")
 
         /* decode the root group symbol table entry */
-        if (H5G_ent_decode(udata->f, (const uint8_t **)&image, sblock->root_ent) < 0)
+        if (H5G_ent_decode(udata->f, (const uint8_t **)&image, sblock->root_ent, image_end) < 0)
             HGOTO_ERROR(H5E_FILE, H5E_CANTDECODE, NULL, "can't decode root group symbol table entry")
 
         /* Set the root group address to the correct value */
         sblock->root_addr = sblock->root_ent->header;
 
         /* This step is for h5repart tool only. If user wants to change file driver
          *  from family to sec2 while using h5repart, set the driver address to
          *  undefined to let the library ignore the family driver information saved
          *  in the superblock.
          */
         if (udata->ignore_drvrinfo && H5F_addr_defined(sblock->driver_addr)) {
             /* Eliminate the driver info */
             sblock->driver_addr     = HADDR_UNDEF;
             udata->drvrinfo_removed = TRUE;
         } /* end if */
 
         /* NOTE: Driver info block is decoded separately, later */
 
     } /* end if */
     else {
         uint32_t read_chksum; /* Checksum read from file  */
 
         /* Skip over size of file addresses (already decoded) */
         image++;
         udata->f->shared->sizeof_addr = sblock->sizeof_addr; /* Keep a local copy also */
-
         /* Skip over size of file sizes (already decoded) */
         image++;
         udata->f->shared->sizeof_size = sblock->sizeof_size; /* Keep a local copy also */
 
+        /* Check whether the image pointer is out of bounds */
+        if (H5_IS_BUFFER_OVERFLOW(image, 1, image_end))
+            HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, NULL, "image pointer is out of bounds")
+
         /* File status flags (not really used yet) */
         sblock->status_flags = *image++;
         if (sblock->status_flags & ~H5F_SUPER_ALL_FLAGS)
             HGOTO_ERROR(H5E_FILE, H5E_BADVALUE, NULL, "bad flag value for superblock")
 
+        /* Check whether the image pointer will be out of bounds */
+        if (H5_IS_BUFFER_OVERFLOW(image, H5F_SIZEOF_ADDR(udata->f) * 4, image_end))
+            HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, NULL, "image pointer is out of bounds")
+
         /* Base, superblock extension, end of file & root group object header addresses */
         H5F_addr_decode(udata->f, (const uint8_t **)&image, &sblock->base_addr /*out*/);
         H5F_addr_decode(udata->f, (const uint8_t **)&image, &sblock->ext_addr /*out*/);
         H5F_addr_decode(udata->f, (const uint8_t **)&image, &udata->stored_eof /*out*/);
         H5F_addr_decode(udata->f, (const uint8_t **)&image, &sblock->root_addr /*out*/);
 
         /* checksum verification already done in verify_chksum cb */
 
+        /* Check whether the image pointer will be out of bounds */
+        if (H5_IS_BUFFER_OVERFLOW(image, sizeof(uint32_t), image_end))
+            HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, NULL, "image pointer is out of bounds")
+
         /* Decode checksum */
         UINT32DECODE(image, read_chksum);
 
         /* The Driver Information Block may not appear with the version
          * 2 super block.  Thus we set the driver_addr field of the in
          * core representation of the super block HADDR_UNDEF to prevent
          * any attempt to load the Driver Information Block.
          */
         sblock->driver_addr = HADDR_UNDEF;
     } /* end else */
 
     /* Sanity check */
     HDassert((size_t)(image - (const uint8_t *)_image) <= len);
 
     /* Set return value */
     ret_value = sblock;
diff --git a/src/H5Gent.c b/src/H5Gent.c
index f58ef5c63d..096e13eefd 100644
--- a/src/H5Gent.c
+++ b/src/H5Gent.c
@@ -80,20 +80,20 @@ herr_t
 H5G__ent_decode_vec(const H5F_t *f, const uint8_t **pp, const uint8_t *p_end, H5G_entry_t *ent, unsigned n)
 {
     unsigned u;                   /* Local index variable */
     herr_t   ret_value = SUCCEED; /* Return value */
 
     FUNC_ENTER_PACKAGE
 
     /* check arguments */
     HDassert(f);
     HDassert(pp);
     HDassert(ent);
 
     /* decode entries */
     for (u = 0; u < n; u++) {
         if (*pp > p_end)
             HGOTO_ERROR(H5E_SYM, H5E_CANTDECODE, FAIL, "ran off the end of the image buffer")
-        if (H5G_ent_decode(f, pp, ent + u) < 0)
+        if (H5G_ent_decode(f, pp, ent + u, p_end) < 0)
             HGOTO_ERROR(H5E_SYM, H5E_CANTDECODE, FAIL, "can't decode")
     }
 
@@ -117,45 +117,60 @@ done:
  *-------------------------------------------------------------------------
  */
 herr_t
-H5G_ent_decode(const H5F_t *f, const uint8_t **pp, H5G_entry_t *ent)
+H5G_ent_decode(const H5F_t *f, const uint8_t **pp, H5G_entry_t *ent, const uint8_t *p_end)
 {
     const uint8_t *p_ret = *pp;
     uint32_t       tmp;
     herr_t         ret_value = SUCCEED; /* Return value */
 
     FUNC_ENTER_NOAPI(FAIL)
 
     /* check arguments */
     HDassert(f);
     HDassert(pp);
     HDassert(ent);
 
+    if (H5_IS_BUFFER_OVERFLOW(*pp, ent->name_off, p_end))
+        HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, FAIL, "image pointer is out of bounds")
+
     /* decode header */
     H5F_DECODE_LENGTH(f, *pp, ent->name_off);
+
+    if (H5_IS_BUFFER_OVERFLOW(*pp, H5F_SIZEOF_ADDR(f) + sizeof(uint32_t), p_end))
+        HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, FAIL, "image pointer is out of bounds")
+
     H5F_addr_decode(f, pp, &(ent->header));
     UINT32DECODE(*pp, tmp);
     *pp += 4; /*reserved*/
+
+    if (H5_IS_BUFFER_OVERFLOW(*pp, 1, p_end))
+        HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, FAIL, "image pointer is out of bounds")
+
     ent->type = (H5G_cache_type_t)tmp;
 
     /* decode scratch-pad */
     switch (ent->type) {
         case H5G_NOTHING_CACHED:
             break;
 
         case H5G_CACHED_STAB:
             HDassert(2 * H5F_SIZEOF_ADDR(f) <= H5G_SIZEOF_SCRATCH);
+            if (H5_IS_BUFFER_OVERFLOW(*pp, H5F_SIZEOF_ADDR(f) * 2, p_end))
+                HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, FAIL, "image pointer is out of bounds")
             H5F_addr_decode(f, pp, &(ent->cache.stab.btree_addr));
             H5F_addr_decode(f, pp, &(ent->cache.stab.heap_addr));
             break;
 
         case H5G_CACHED_SLINK:
+            if (H5_IS_BUFFER_OVERFLOW(*pp, sizeof(uint32_t), p_end))
+                HGOTO_ERROR(H5E_FILE, H5E_OVERFLOW, FAIL, "image pointer is out of bounds")
             UINT32DECODE(*pp, ent->cache.slink.lval_offset);
             break;
 
         case H5G_CACHED_ERROR:
         case H5G_NCACHED:
         default:
             HGOTO_ERROR(H5E_SYM, H5E_BADVALUE, FAIL, "unknown symbol table entry cache type")
     } /* end switch */
 
     *pp = p_ret + H5G_SIZEOF_ENTRY_FILE(f);
diff --git a/src/H5Gprivate.h b/src/H5Gprivate.h
index 0042fb2d3b..2819e4f9f9 100644
--- a/src/H5Gprivate.h
+++ b/src/H5Gprivate.h
@@ -248,8 +248,8 @@ H5_DLL herr_t H5G_node_debug(H5F_t *f, haddr_t addr, FILE *stream, int indent, i
  * These functions operate on group object locations.
  */
 H5_DLL herr_t H5G_ent_encode(const H5F_t *f, uint8_t **pp, const H5G_entry_t *ent);
-H5_DLL herr_t H5G_ent_decode(const H5F_t *f, const uint8_t **pp, H5G_entry_t *ent);
+H5_DLL herr_t H5G_ent_decode(const H5F_t *f, const uint8_t **pp, H5G_entry_t *ent, const uint8_t *p_end);
 
 /*
  * These functions operate on group hierarchy names.
  */
