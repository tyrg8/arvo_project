commit c56701690a184c13fa850e9946f09bac7172c604
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Wed Dec 16 17:01:15 2020 +0100

    Detect overlarge step for character range()
    
    This was done for int and float ranges, but not char ranges.
    
    Fixes oss-fuzz #28666.

diff --git a/ext/standard/array.c b/ext/standard/array.c
index f99af84611..3967d83242 100644
--- a/ext/standard/array.c
+++ b/ext/standard/array.c
@@ -2716,189 +2716,189 @@ PHP_FUNCTION(array_fill_keys)
 /* {{{ Create an array containing the range of integers or characters from low to high (inclusive) */
 PHP_FUNCTION(range)
 {
 	zval *zlow, *zhigh, *zstep = NULL, tmp;
 	int err = 0, is_step_double = 0;
 	double step = 1.0;
 
 	ZEND_PARSE_PARAMETERS_START(2, 3)
 		Z_PARAM_ZVAL(zlow)
 		Z_PARAM_ZVAL(zhigh)
 		Z_PARAM_OPTIONAL
 		Z_PARAM_NUMBER(zstep)
 	ZEND_PARSE_PARAMETERS_END();
 
 	if (zstep) {
 		is_step_double = Z_TYPE_P(zstep) == IS_DOUBLE;
 		step = zval_get_double(zstep);
 
 		/* We only want positive step values. */
 		if (step < 0.0) {
 			step *= -1;
 		}
 	}
 
 	/* If the range is given as strings, generate an array of characters. */
 	if (Z_TYPE_P(zlow) == IS_STRING && Z_TYPE_P(zhigh) == IS_STRING && Z_STRLEN_P(zlow) >= 1 && Z_STRLEN_P(zhigh) >= 1) {
 		int type1, type2;
 		unsigned char low, high;
 		zend_long lstep = (zend_long) step;
 
 		type1 = is_numeric_string(Z_STRVAL_P(zlow), Z_STRLEN_P(zlow), NULL, NULL, 0);
 		type2 = is_numeric_string(Z_STRVAL_P(zhigh), Z_STRLEN_P(zhigh), NULL, NULL, 0);
 
 		if (type1 == IS_DOUBLE || type2 == IS_DOUBLE || is_step_double) {
 			goto double_str;
 		} else if (type1 == IS_LONG || type2 == IS_LONG) {
 			goto long_str;
 		}
 
 		low = (unsigned char)Z_STRVAL_P(zlow)[0];
 		high = (unsigned char)Z_STRVAL_P(zhigh)[0];
 
 		if (low > high) {		/* Negative Steps */
-			if (lstep <= 0) {
+			if (low - high < lstep || lstep <= 0) {
 				err = 1;
 				goto err;
 			}
 			/* Initialize the return_value as an array. */
 			array_init_size(return_value, (uint32_t)(((low - high) / lstep) + 1));
 			zend_hash_real_init_packed(Z_ARRVAL_P(return_value));
 			ZEND_HASH_FILL_PACKED(Z_ARRVAL_P(return_value)) {
 				for (; low >= high; low -= (unsigned int)lstep) {
 					ZEND_HASH_FILL_SET_INTERNED_STR(ZSTR_CHAR(low));
 					ZEND_HASH_FILL_NEXT();
 					if (((signed int)low - lstep) < 0) {
 						break;
 					}
 				}
 			} ZEND_HASH_FILL_END();
 		} else if (high > low) {	/* Positive Steps */
-			if (lstep <= 0) {
+			if (high - low < lstep || lstep <= 0) {
 				err = 1;
 				goto err;
 			}
 			array_init_size(return_value, (uint32_t)(((high - low) / lstep) + 1));
 			zend_hash_real_init_packed(Z_ARRVAL_P(return_value));
 			ZEND_HASH_FILL_PACKED(Z_ARRVAL_P(return_value)) {
 				for (; low <= high; low += (unsigned int)lstep) {
 					ZEND_HASH_FILL_SET_INTERNED_STR(ZSTR_CHAR(low));
 					ZEND_HASH_FILL_NEXT();
 					if (((signed int)low + lstep) > 255) {
 						break;
 					}
 				}
 			} ZEND_HASH_FILL_END();
 		} else {
 			array_init(return_value);
 			ZVAL_CHAR(&tmp, low);
 			zend_hash_next_index_insert_new(Z_ARRVAL_P(return_value), &tmp);
 		}
 	} else if (Z_TYPE_P(zlow) == IS_DOUBLE || Z_TYPE_P(zhigh) == IS_DOUBLE || is_step_double) {
 		double low, high, element;
 		uint32_t i, size;
 double_str:
 		low = zval_get_double(zlow);
 		high = zval_get_double(zhigh);
 
 		if (zend_isinf(high) || zend_isinf(low)) {
 			zend_value_error("Invalid range supplied: start=%0.0f end=%0.0f", low, high);
 			RETURN_THROWS();
 		}
 
 		if (low > high) { 		/* Negative steps */
 			if (low - high < step || step <= 0) {
 				err = 1;
 				goto err;
 			}
 
 			RANGE_CHECK_DOUBLE_INIT_ARRAY(low, high);
 
 			ZEND_HASH_FILL_PACKED(Z_ARRVAL_P(return_value)) {
 				for (i = 0, element = low; i < size && element >= high; ++i, element = low - (i * step)) {
 					ZEND_HASH_FILL_SET_DOUBLE(element);
 					ZEND_HASH_FILL_NEXT();
 				}
 			} ZEND_HASH_FILL_END();
 		} else if (high > low) { 	/* Positive steps */
 			if (high - low < step || step <= 0) {
 				err = 1;
 				goto err;
 			}
 
 			RANGE_CHECK_DOUBLE_INIT_ARRAY(high, low);
 
 			ZEND_HASH_FILL_PACKED(Z_ARRVAL_P(return_value)) {
 				for (i = 0, element = low; i < size && element <= high; ++i, element = low + (i * step)) {
 					ZEND_HASH_FILL_SET_DOUBLE(element);
 					ZEND_HASH_FILL_NEXT();
 				}
 			} ZEND_HASH_FILL_END();
 		} else {
 			array_init(return_value);
 			ZVAL_DOUBLE(&tmp, low);
 			zend_hash_next_index_insert_new(Z_ARRVAL_P(return_value), &tmp);
 		}
 	} else {
 		zend_long low, high;
 		/* lstep is a zend_ulong so that comparisons to it don't overflow, i.e. low - high < lstep */
 		zend_ulong lstep;
 		uint32_t i, size;
 long_str:
 		low = zval_get_long(zlow);
 		high = zval_get_long(zhigh);
 
 		if (step <= 0) {
 			err = 1;
 			goto err;
 		}
 
 		lstep = (zend_ulong)step;
 		if (step <= 0) {
 			err = 1;
 			goto err;
 		}
 
 		if (low > high) { 		/* Negative steps */
 			if ((zend_ulong)low - high < lstep) {
 				err = 1;
 				goto err;
 			}
 
 			RANGE_CHECK_LONG_INIT_ARRAY(low, high);
 
 			ZEND_HASH_FILL_PACKED(Z_ARRVAL_P(return_value)) {
 				for (i = 0; i < size; ++i) {
 					ZEND_HASH_FILL_SET_LONG(low - (i * lstep));
 					ZEND_HASH_FILL_NEXT();
 				}
 			} ZEND_HASH_FILL_END();
 		} else if (high > low) { 	/* Positive steps */
 			if ((zend_ulong)high - low < lstep) {
 				err = 1;
 				goto err;
 			}
 
 			RANGE_CHECK_LONG_INIT_ARRAY(high, low);
 
 			ZEND_HASH_FILL_PACKED(Z_ARRVAL_P(return_value)) {
 				for (i = 0; i < size; ++i) {
 					ZEND_HASH_FILL_SET_LONG(low + (i * lstep));
 					ZEND_HASH_FILL_NEXT();
 				}
 			} ZEND_HASH_FILL_END();
 		} else {
 			array_init(return_value);
 			ZVAL_LONG(&tmp, low);
 			zend_hash_next_index_insert_new(Z_ARRVAL_P(return_value), &tmp);
 		}
 	}
 err:
 	if (err) {
 		zend_argument_value_error(3, "must not exceed the specified range");
 		RETURN_THROWS();
 	}
 }
 /* }}} */
 
 #undef RANGE_CHECK_DOUBLE_INIT_ARRAY
 #undef RANGE_CHECK_LONG_INIT_ARRAY
diff --git a/ext/standard/tests/array/range_errors.phpt b/ext/standard/tests/array/range_errors.phpt
index dd8b69a82a..7bc552ee97 100644
--- a/ext/standard/tests/array/range_errors.phpt
+++ b/ext/standard/tests/array/range_errors.phpt
@@ -1,110 +1,132 @@
 --TEST--
 Test range() function (errors)
 --INI--
 precision=14
 --FILE--
 <?php
 
 echo "\n*** Testing error conditions ***\n";
 
 echo "\n-- Testing ( (low < high) && (step = 0) ) --\n";
 try {
     var_dump( range(1, 2, 0) );
 } catch (\ValueError $e) {
     echo $e->getMessage(), "\n";
 }
 
 try {
     var_dump( range("a", "b", 0) );
 } catch (\ValueError $e) {
     echo $e->getMessage(), "\n";
 }
 
 echo "\n\n-- Testing ( (low > high) && (step = 0) ) --\n";
 try {
     var_dump( range(2, 1, 0) );
 } catch (\ValueError $e) {
     echo $e->getMessage(), "\n";
 }
 
 try {
     var_dump( range("b", "a", 0) );
 } catch (\ValueError $e) {
     echo $e->getMessage(), "\n";
 }
 
 echo "\n\n-- Testing ( (low < high) && (high-low < step) ) --\n";
 try {
     var_dump( range(1.0, 7.0, 6.5) );
 } catch (\ValueError $e) {
     echo $e->getMessage(), "\n";
 }
 
 echo "\n\n-- Testing ( (low > high) && (low-high < step) ) --\n";
 try {
     var_dump( range(7.0, 1.0, 6.5) );
 } catch (\ValueError $e) {
     echo $e->getMessage(), "\n";
 }
 
+echo "\n\n-- Testing ( (low < high) && (high-low < step) ) for characters --\n";
+try {
+    var_dump(range('a', 'z', 100));
+} catch (\ValueError $e) {
+    echo $e->getMessage(), "\n";
+}
+
+echo "\n\n-- Testing ( (low > high) && (low-high < step) ) for characters --\n";
+try {
+    var_dump(range('z', 'a', 100));
+} catch (\ValueError $e) {
+    echo $e->getMessage(), "\n";
+}
+
 echo "\n-- Testing other conditions --\n";
 try {
     var_dump( range(-1, -2, 2) );
 } catch (\ValueError $e) {
     echo $e->getMessage(), "\n";
 }
 
 try {
     var_dump( range("a", "j", "z") );
 } catch (\TypeError $e) {
     echo $e->getMessage(), "\n";
 }
 
 try {
     var_dump( range(0, 1, "140962482048819216326.24") );
 } catch (\ValueError $e) {
     echo $e->getMessage(), "\n";
 }
 
 echo "\n-- Testing Invalid steps --\n";
 $step_arr = array( "string", NULL, FALSE, "", "\0" );
 
 foreach( $step_arr as $step ) {
     try {
         var_dump( range( 1, 5, $step ) );
     } catch (\TypeError | \ValueError $e) {
         echo $e->getMessage(), "\n";
     }
 }
 ?>
 --EXPECT--
 *** Testing error conditions ***
 
 -- Testing ( (low < high) && (step = 0) ) --
 range(): Argument #3 ($step) must not exceed the specified range
 range(): Argument #3 ($step) must not exceed the specified range
 
 
 -- Testing ( (low > high) && (step = 0) ) --
 range(): Argument #3 ($step) must not exceed the specified range
 range(): Argument #3 ($step) must not exceed the specified range
 
 
 -- Testing ( (low < high) && (high-low < step) ) --
 range(): Argument #3 ($step) must not exceed the specified range
 
 
 -- Testing ( (low > high) && (low-high < step) ) --
 range(): Argument #3 ($step) must not exceed the specified range
 
+
+-- Testing ( (low < high) && (high-low < step) ) for characters --
+range(): Argument #3 ($step) must not exceed the specified range
+
+
+-- Testing ( (low > high) && (low-high < step) ) for characters --
+range(): Argument #3 ($step) must not exceed the specified range
+
 -- Testing other conditions --
 range(): Argument #3 ($step) must not exceed the specified range
 range(): Argument #3 ($step) must be of type int|float, string given
 range(): Argument #3 ($step) must not exceed the specified range
 
 -- Testing Invalid steps --
 range(): Argument #3 ($step) must be of type int|float, string given
 range(): Argument #3 ($step) must not exceed the specified range
 range(): Argument #3 ($step) must not exceed the specified range
 range(): Argument #3 ($step) must be of type int|float, string given
 range(): Argument #3 ($step) must be of type int|float, string given
