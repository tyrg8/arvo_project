commit 56716426e2087e604ee6267129857b409e53ab09
Author: Akshay Ragir <akshay.ragir@ittiam.com>
Date:   Tue Oct 3 10:15:52 2023 +0530

    Fix for the Global-buffer-overflow READ 4 in iusace_quantize_lines
    
    These changes handle the global-buffer-overflow runtime error
    reported when the tonal difference in the SBR module becomes
    zero.
    
    Bug: ossFuzz: 62261
    Test: poc in bug

diff --git a/encoder/ixheaace_basic_ops.c b/encoder/ixheaace_basic_ops.c
index c18b430..04b727b 100644
--- a/encoder/ixheaace_basic_ops.c
+++ b/encoder/ixheaace_basic_ops.c
@@ -1,27 +1,29 @@
 /******************************************************************************
  *                                                                            *
  * Copyright (C) 2023 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  *****************************************************************************
  * Originally developed and contributed by Ittiam Systems Pvt. Ltd, Bangalore
  */
 
+#include <float.h>
+#include <math.h>
 #include "ixheaac_type_def.h"
 #include "ixheaac_constants.h"
 #include "ixheaace_aac_constants.h"
 #include "ixheaac_basic_ops32.h"
 #include "ixheaac_basic_ops16.h"
 #include "ixheaac_basic_ops40.h"
 #include "ixheaac_basic_ops.h"
@@ -33,3 +35,17 @@ WORD ia_enhaacplus_enc_norm32_arr(const WORD32 *word32_arr, LOOPINDEX n) {
   }
   return (ixheaac_pnorm32(max_bits));
 }
+
+FLOAT32 ixheaace_div32(FLOAT32 num, FLOAT32 den) {
+  if (fabs(den) < FLT_EPSILON) {
+    if (den < 0.0f) {
+      return -num;
+    }
+    else {
+      return num;
+    }
+  }
+  else {
+    return num / den;
+  }
+}
diff --git a/encoder/ixheaace_common_utils.h b/encoder/ixheaace_common_utils.h
index 282ae74..4c03c9f 100644
--- a/encoder/ixheaace_common_utils.h
+++ b/encoder/ixheaace_common_utils.h
@@ -37,3 +37,5 @@
 #define C75 (-0.3408728838f)  //(2 * sin(u) - sin(2 * u) + sin(3 * u)) / 3;
 #define C76 (0.5339693427f)   //(sin(u) - 2 * sin(2 * u) - sin(3 * u)) / 3;
 #define C77 (-0.8748422265f)  //(sin(u) + sin(2 * u) + 2 * sin(3 * u)) / 3;
+
+FLOAT32 ixheaace_div32(FLOAT32 num, FLOAT32 den);
\ No newline at end of file
diff --git a/encoder/ixheaace_cplx_pred.c b/encoder/ixheaace_cplx_pred.c
index a14b8be..a9f3646 100644
--- a/encoder/ixheaace_cplx_pred.c
+++ b/encoder/ixheaace_cplx_pred.c
@@ -1,56 +1,57 @@
 /******************************************************************************
  *                                                                            *
  * Copyright (C) 2023 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  *****************************************************************************
  * Originally developed and contributed by Ittiam Systems Pvt. Ltd, Bangalore
  */
 
 #include <math.h>
 #include <string.h>
 #include <float.h>
 #include "iusace_type_def.h"
 #include "ixheaac_error_standards.h"
 #include "ixheaace_error_codes.h"
 #include "ixheaace_mps_common_define.h"
 #include "iusace_cnst.h"
 #include "iusace_fd_quant.h"
 #include "iusace_bitbuffer.h"
 #include "impd_drc_common_enc.h"
 #include "impd_drc_uni_drc.h"
 #include "impd_drc_api.h"
 #include "impd_drc_uni_drc_eq.h"
 #include "impd_drc_uni_drc_filter_bank.h"
 #include "impd_drc_gain_enc.h"
 #include "impd_drc_struct_def.h"
 
 #include "ixheaace_memory_standards.h"
 #include "iusace_tns_usac.h"
 #include "iusace_psy_mod.h"
 #include "iusace_config.h"
 #include "iusace_block_switch_const.h"
 #include "iusace_block_switch_struct_def.h"
 #include "iusace_signal_classifier.h"
 #include "iusace_ms.h"
 #include "ixheaace_adjust_threshold_data.h"
 #include "iusace_fd_qc_util.h"
 #include "ixheaace_sbr_header.h"
 #include "ixheaace_config.h"
 #include "ixheaace_asc_write.h"
 #include "iusace_main.h"
 #include "iusace_rom.h"
+#include "ixheaace_common_utils.h"
 
 static VOID iusace_compute_pred_coef(WORD32 num_lines, WORD32 complex_coef,
                                      FLOAT64 *ptr_spec_mdct_dmx, FLOAT64 *ptr_spec_mdst_dmx,
@@ -254,148 +255,147 @@ static FLOAT64 iusace_compute_ipd(FLOAT64 *ptr_spec_real1, FLOAT64 *ptr_spec_ima
 static IA_ERRORCODE iusace_cplx_pred_main(
     WORD32 num_sfb, WORD32 num_window_groups, FLOAT64 *ptr_spec_mdct_mid,
     FLOAT64 *ptr_spec_mdct_side, WORD32 pred_coef_q_int_re[MAX_SHORT_WINDOWS][MAX_SFB_LONG],
     WORD32 pred_coef_q_int_im[MAX_SHORT_WINDOWS][MAX_SFB_LONG], WORD32 *pred_dir,
     ia_usac_data_struct *pstr_usac_data, ia_sfb_params_struct *pstr_sfb_prms,
     WORD32 usac_independancy_flag, ia_usac_encoder_config_struct *pstr_usac_config,
     FLOAT64 *ptr_scratch_cmpx_mdct_buf, WORD32 cplx_pred_used[MAX_SHORT_WINDOWS][MAX_SFB_LONG],
     WORD32 chn, const WORD32 *ptr_sfb_offsets, FLOAT32 nrg_mid, FLOAT32 nrg_side,
     WORD32 *ms_mask_flag) {
   LOOPIDX group, sfb, i;
   FLOAT32 pred_coef_re, pred_coef_im, pred_coef_q_re, pred_coef_q_im = 0.0f;
   const WORD32 sfb_per_pred_band = 2;
   WORD32 left = 0, right = 0, save_zeros = 0, condition_2 = 0, samp_per_bk = 0, bins_per_sbk = 0,
          num_sbk = 0;
   FLOAT64 *ptr_dmx_re_prev;
   FLOAT64 *ptr_spec_mdct_res = &ptr_scratch_cmpx_mdct_buf[0];
   const WORD32 sfb_count = num_window_groups * num_sfb;
   const WORD32 sfb_per_group = num_sfb;
   WORD32 sfb_offsets = 0, zero_flag, spec_start, spec_end;
 
   left = chn, right = chn + 1;
 
   /* Number of sub-blocks */
   if (pstr_usac_config->window_sequence[left] == EIGHT_SHORT_SEQUENCE) {
     num_sbk = MAX_SHORT_WINDOWS;
   }
   if (pstr_usac_config->window_sequence[left] == ONLY_LONG_SEQUENCE ||
       pstr_usac_config->window_sequence[left] == LONG_START_SEQUENCE ||
       pstr_usac_config->window_sequence[left] == LONG_STOP_SEQUENCE ||
       pstr_usac_config->window_sequence[left] == STOP_START_SEQUENCE) {
     num_sbk = 1;
   }
 
   if (num_sbk == 0) {
     return IA_EXHEAACE_EXE_FATAL_USAC_INVALID_NUM_SBK;
   }
 
   samp_per_bk = pstr_usac_config->ccfl;
   bins_per_sbk = samp_per_bk / num_sbk;
 
   /* Compute prediction direction */
   if (nrg_mid >= nrg_side) {
     *pred_dir = 0;
   } else {
     *pred_dir = 1;
   }
 
   if (pstr_usac_data->complex_coef[chn] == 1) {
     save_zeros = ((pstr_usac_config->window_sequence[left] == EIGHT_SHORT_SEQUENCE &&
                    pstr_usac_config->window_sequence[right] != EIGHT_SHORT_SEQUENCE) ||
                   (pstr_usac_config->window_sequence[left] != EIGHT_SHORT_SEQUENCE &&
                    pstr_usac_config->window_sequence[right] == EIGHT_SHORT_SEQUENCE));
 
     condition_2 = (usac_independancy_flag || pstr_usac_data->core_mode_prev[left] ||
                    pstr_usac_data->core_mode_prev[right]);
 
     /* Compute current frame's MDST down-mix*/
     ptr_dmx_re_prev = !(usac_independancy_flag) ? pstr_usac_data->ptr_dmx_re_save[chn] : NULL;
 
     memset(pstr_usac_data->ptr_dmx_im[chn], 0, sizeof(FLOAT64) * FRAME_LEN_LONG);
 
     iusace_estimate_dmx_im(*pred_dir == 0 ? ptr_spec_mdct_mid : ptr_spec_mdct_side,
                            ptr_dmx_re_prev, pstr_usac_data->ptr_dmx_im[chn],
                            pstr_usac_config->window_sequence[left],
                            pstr_sfb_prms->window_shape[left],
                            pstr_usac_config->window_shape_prev[left], num_sbk, bins_per_sbk);
 
     /* MCLT of downmix = dmx_re + j*dmx_im */
     /*  Save MDCT down-mix for use as previous frame MDCT down-mix in the next frame */
     iusace_usac_cplx_save_prev(*pred_dir == 0 ? &ptr_spec_mdct_mid[0] : &ptr_spec_mdct_side[0],
                                pstr_usac_data->ptr_dmx_re_save[chn], save_zeros, condition_2,
                                samp_per_bk, bins_per_sbk);
   }
 
   /* Reset buffer to zero */
   for (group = 0; group < MAX_SHORT_WINDOWS; group++) {
     memset(pred_coef_q_int_re, 0, MAX_SFB_LONG * sizeof(WORD32));
     memset(pred_coef_q_int_im, 0, MAX_SFB_LONG * sizeof(WORD32));
   }
 
   group = 0;
   for (sfb = 0; sfb < sfb_count; sfb += sfb_per_group, group++) {
     for (sfb_offsets = 0; sfb_offsets < sfb_per_group; sfb_offsets += sfb_per_pred_band) {
       if (cplx_pred_used[group][sfb_offsets] == 1) {
         zero_flag = (ptr_sfb_offsets[sfb + sfb_offsets + 1] != FRAME_LEN_LONG);
         spec_start = ptr_sfb_offsets[sfb + sfb_offsets];
         spec_end = (zero_flag ? ptr_sfb_offsets[sfb + sfb_offsets + 2]
                               : ptr_sfb_offsets[sfb + sfb_offsets + 1]);
 
         /* Calculate prediction coefficients */
         iusace_compute_pred_coef(
             spec_end - spec_start, pstr_usac_data->complex_coef[chn],
             *pred_dir == 0 ? &ptr_spec_mdct_mid[spec_start] : &ptr_spec_mdct_side[spec_start],
             pstr_usac_data->complex_coef[chn] == 1 ? &pstr_usac_data->ptr_dmx_im[chn][spec_start]
                                                    : NULL,
             *pred_dir == 0 ? &ptr_spec_mdct_side[spec_start] : &ptr_spec_mdct_mid[spec_start],
             &pred_coef_re, pstr_usac_data->complex_coef[chn] == 1 ? &pred_coef_im : NULL,
             &pred_coef_q_re, pstr_usac_data->complex_coef[chn] == 1 ? &pred_coef_q_im : NULL,
             &pred_coef_q_int_re[group][sfb_offsets],
             pstr_usac_data->complex_coef[chn] == 1 ? &pred_coef_q_int_im[group][sfb_offsets]
                                                    : NULL);
 
         /* Calculate residual */
         iusace_compute_res(
             spec_end - spec_start, pstr_usac_data->complex_coef[chn], pred_coef_q_re,
             pstr_usac_data->complex_coef[chn] == 1 ? pred_coef_q_im : 0,
             *pred_dir == 0 ? &ptr_spec_mdct_mid[spec_start] : &ptr_spec_mdct_side[spec_start],
             pstr_usac_data->complex_coef[chn] == 1 ? &pstr_usac_data->ptr_dmx_im[chn][spec_start]
                                                    : NULL,
             *pred_dir == 0 ? &ptr_spec_mdct_side[spec_start] : &ptr_spec_mdct_mid[spec_start],
             &ptr_spec_mdct_res[spec_start]);
       }
     }
   }
 
   /* Compute the prediction gain */
   FLOAT32 pred_gain = 0.f, nrg_res = 0.f;
   for (i = 0; i < pstr_usac_config->ccfl; i++) {
     nrg_res += (FLOAT32)(ptr_spec_mdct_res[i] * ptr_spec_mdct_res[i]);
   }
-  pred_gain =
-      10.f * log10f((*pred_dir == 0 ? nrg_side : nrg_mid) / (nrg_res + FLT_EPSILON));
+  pred_gain = 10.f * log10f(ixheaace_div32((*pred_dir == 0 ? nrg_side : nrg_mid), nrg_res));
       /* Prediction gain in dB */
 
   if (pred_gain > 20.f) /* Retain complex prediction */
   {
     if (*pred_dir == 1) {
       for (i = 0; i < pstr_usac_config->ccfl; i++) {
         ptr_spec_mdct_mid[i] = ptr_spec_mdct_side[i];
         ptr_spec_mdct_side[i] = ptr_spec_mdct_res[i];
       }
     } else {
       for (i = 0; i < pstr_usac_config->ccfl; i++) {
         ptr_spec_mdct_side[i] = ptr_spec_mdct_res[i];
       }
     }
   } else /* Use M/S */
   {
     *ms_mask_flag = 0;
     /* Revert spectra to L and R */
     for (i = 0; i < pstr_usac_config->ccfl; i++) {
       ptr_spec_mdct_mid[i] = pstr_usac_data->left_chan_save[chn][i];
       ptr_spec_mdct_side[i] = pstr_usac_data->right_chan_save[chn][i];
     }
   }
 
   return IA_NO_ERROR;
 }
diff --git a/encoder/ixheaace_sbr_missing_harmonics_det.c b/encoder/ixheaace_sbr_missing_harmonics_det.c
index 7bff257..5527e4a 100644
--- a/encoder/ixheaace_sbr_missing_harmonics_det.c
+++ b/encoder/ixheaace_sbr_missing_harmonics_det.c
@@ -1,55 +1,56 @@
 /******************************************************************************
  *                                                                            *
  * Copyright (C) 2023 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  *****************************************************************************
  * Originally developed and contributed by Ittiam Systems Pvt. Ltd, Bangalore
  */
 
 #include <string.h>
 #include <math.h>
 #include <float.h>
 #include "ixheaac_type_def.h"
 #include "ixheaac_constants.h"
 #include "ixheaac_error_standards.h"
 #include "ixheaace_aac_constants.h"
 #include "ixheaac_basic_ops32.h"
 #include "ixheaac_basic_ops16.h"
 #include "ixheaac_basic_ops40.h"
 #include "ixheaac_basic_ops.h"
 
 #include "ixheaace_sbr_header.h"
 #include "ixheaace_sbr_def.h"
 #include "ixheaace_resampler.h"
 #include "ixheaace_sbr_rom.h"
 #include "ixheaace_common_rom.h"
 #include "ixheaace_sbr_hbe.h"
 #include "ixheaace_sbr_qmf_enc.h"
 #include "ixheaace_sbr_tran_det.h"
 #include "ixheaace_sbr_frame_info_gen.h"
 #include "ixheaace_sbr_env_est.h"
 #include "ixheaace_sbr_code_envelope.h"
 #include "ixheaace_sbr_main.h"
 #include "ixheaace_sbr_missing_harmonics_det.h"
 #include "ixheaace_sbr_inv_filtering_estimation.h"
 #include "ixheaace_sbr_noise_floor_est.h"
 
 #include "ixheaace_sbr_ton_corr.h"
 #include "iusace_esbr_pvc.h"
 #include "iusace_esbr_inter_tes.h"
 #include "ixheaace_sbr.h"
+#include "ixheaace_common_utils.h"
 
 static VOID ia_enhaacplus_enc_diff(FLOAT32 *ptr_tonal_orig, FLOAT32 *ptr_diff_map_2_scfb,
                                    const UWORD8 *ptr_freq_band_tab, WORD32 n_scfb,
@@ -472,96 +473,96 @@ static VOID ia_enhaacplus_enc_detection_with_prediction(
 static VOID ia_enhaacplus_enc_calculate_comp_vector(
     UWORD8 *ptr_add_harmonics_sfbs, FLOAT32 **ptr_tonality, WORD8 *ptr_env_compensation,
     WORD32 num_sfb, const UWORD8 *ptr_freq_band_tab, FLOAT32 **ptr_diff, WORD32 tot_no_est,
     WORD8 *ptr_prev_env_compensation, WORD32 new_detection_allowed) {
   WORD32 i, j, l;
 
   memset(ptr_env_compensation, 0, num_sfb * sizeof(ptr_env_compensation[0]));
 
   FLOAT32 max_val;
   WORD32 lower_band, upper_band;
   WORD32 max_pos_band, max_pos_est;
   WORD8 comp_val;
 
   for (i = 0; i < num_sfb; i++) {
     if (ptr_add_harmonics_sfbs[i]) {
       lower_band = ptr_freq_band_tab[i];
       upper_band = ptr_freq_band_tab[i + 1];
 
       max_pos_band = 0;
       max_pos_est = 0;
       max_val = 0;
 
       for (j = 0; j < tot_no_est; j++) {
         for (l = lower_band; l < upper_band; l++) {
           if (ptr_tonality[j][l] > max_val) {
             max_val = ptr_tonality[j][l];
             max_pos_band = l;
             max_pos_est = j;
           }
         }
       }
 
       if (max_pos_band == lower_band && i) {
         comp_val =
             (WORD8)(fabs(SBR_INV_LOG_2 * log(ptr_diff[max_pos_est][i - 1] + SBR_EPS)) + 0.5f);
         if (comp_val > SBR_MAX_COMP) {
           comp_val = SBR_MAX_COMP;
         }
 
         if (!ptr_add_harmonics_sfbs[i - 1]) {
           if (ptr_tonality[max_pos_est][max_pos_band - 1] >
               SBR_TONALITY_QUOTA * ptr_tonality[max_pos_est][max_pos_band]) {
             ptr_env_compensation[i - 1] = -1 * comp_val;
           }
         }
       }
 
       if (max_pos_band == (upper_band - 1) && (i + 1) < num_sfb) {
         comp_val =
             (WORD8)(fabs(SBR_INV_LOG_2 * log(ptr_diff[max_pos_est][i + 1] + SBR_EPS)) + 0.5f);
         if (comp_val > SBR_MAX_COMP) {
           comp_val = SBR_MAX_COMP;
         }
 
         if (!ptr_add_harmonics_sfbs[i + 1]) {
           if (ptr_tonality[max_pos_est][max_pos_band + 1] >
               SBR_TONALITY_QUOTA * ptr_tonality[max_pos_est][max_pos_band]) {
             ptr_env_compensation[i + 1] = comp_val;
           }
         }
       }
 
       if (i && i < (num_sfb - 1)) {
         comp_val =
             (WORD8)(fabs(SBR_INV_LOG_2 * log(ptr_diff[max_pos_est][i - 1] + SBR_EPS)) + 0.5f);
         if (comp_val > SBR_MAX_COMP) {
           comp_val = SBR_MAX_COMP;
         }
 
-        if ((FLOAT32)1.0f / (ptr_diff[max_pos_est][i - 1] + FLT_EPSILON) >
+        if (ixheaace_div32((FLOAT32)1.0f, ptr_diff[max_pos_est][i - 1]) >
             (SBR_DIFF_QUOTA * ptr_diff[max_pos_est][i])) {
           ptr_env_compensation[i - 1] = -1 * comp_val;
         }
 
         comp_val =
             (WORD8)(fabs(SBR_INV_LOG_2 * log(ptr_diff[max_pos_est][i + 1] + SBR_EPS)) + 0.5f);
         if (comp_val > SBR_MAX_COMP) {
           comp_val = SBR_MAX_COMP;
         }
 
-        if ((FLOAT32)1.0f / (ptr_diff[max_pos_est][i + 1] + FLT_EPSILON) >
+        if (ixheaace_div32((FLOAT32)1.0f, ptr_diff[max_pos_est][i + 1]) >
             (SBR_DIFF_QUOTA * ptr_diff[max_pos_est][i])) {
           ptr_env_compensation[i + 1] = comp_val;
         }
       }
     }
   }
 
   if (!new_detection_allowed) {
     for (i = 0; i < num_sfb; i++) {
       if (ptr_env_compensation[i] != 0 && ptr_prev_env_compensation[i] == 0) {
         ptr_env_compensation[i] = 0;
       }
     }
   }
 }
diff --git a/encoder/ixheaace_sbr_ton_corr_hp.c b/encoder/ixheaace_sbr_ton_corr_hp.c
index c068766..1bcd3c8 100644
--- a/encoder/ixheaace_sbr_ton_corr_hp.c
+++ b/encoder/ixheaace_sbr_ton_corr_hp.c
@@ -1,55 +1,56 @@
 /******************************************************************************
  *                                                                            *
  * Copyright (C) 2023 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  *****************************************************************************
  * Originally developed and contributed by Ittiam Systems Pvt. Ltd, Bangalore
  */
 
+#include <math.h>
 #include <string.h>
 
 #include "ixheaac_type_def.h"
 #include "ixheaac_constants.h"
 #include "ixheaace_aac_constants.h"
 #include "ixheaac_basic_ops32.h"
 #include "ixheaac_basic_ops16.h"
 #include "ixheaac_basic_ops40.h"
 #include "ixheaac_basic_ops.h"
 
 #include "ixheaace_sbr_header.h"
 #include "ixheaace_sbr_def.h"
 #include "ixheaace_resampler.h"
 #include "ixheaace_sbr_rom.h"
 #include "ixheaace_common_rom.h"
 #include "ixheaace_sbr_hbe.h"
 #include "ixheaace_sbr_qmf_enc.h"
 #include "ixheaace_sbr_tran_det.h"
 #include "ixheaace_sbr_frame_info_gen.h"
 #include "ixheaace_sbr_env_est.h"
 #include "ixheaace_sbr_code_envelope.h"
 #include "ixheaace_sbr_main.h"
 #include "ixheaace_sbr_missing_harmonics_det.h"
 #include "ixheaace_sbr_inv_filtering_estimation.h"
 #include "ixheaace_sbr_noise_floor_est.h"
 #include "ixheaace_sbr_ton_corr.h"
 #include "iusace_esbr_pvc.h"
 #include "iusace_esbr_inter_tes.h"
 #include "ixheaace_sbr.h"
 
 #include "ixheaace_sbr_misc.h"
-#include <math.h>
+#include "ixheaace_common_utils.h"
 
 static VOID ixheaace_calc_auto_corr_second_order(ixheaace_acorr_coeffs *pstr_ac,
                                                  FLOAT32 **ptr_real, FLOAT32 **ptr_imag,
@@ -117,80 +118,76 @@ static VOID ixheaace_calc_auto_corr_second_order(ixheaace_acorr_coeffs *pstr_ac,
 VOID ixheaace_calculate_tonality_quotas(ixheaace_pstr_sbr_ton_corr_est pstr_ton_corr,
                                         FLOAT32 **ptr_real, FLOAT32 **ptr_imag, WORD32 usb,
                                         WORD32 num_time_slots, WORD32 is_ld_sbr) {
   WORD32 i, k, r, time_index;
   FLOAT32 alphar[2], alphai[2], r01r, r02r, r11r, r12r, r01i, r02i, r12i, det, r00r;
   ixheaace_acorr_coeffs ac;
   FLOAT32 *ptr_energy_vec = pstr_ton_corr->energy_vec;
   FLOAT32 **ptr_quota_mtx = pstr_ton_corr->ptr_quota_mtx;
 
   WORD32 start_index_matrix = pstr_ton_corr->start_index_matrix;
   WORD32 tot_no_est = pstr_ton_corr->est_cnt;
   WORD32 no_est_per_frame = pstr_ton_corr->est_cnt_per_frame;
   WORD32 move = pstr_ton_corr->move;
   WORD32 num_qmf_ch = pstr_ton_corr->num_qmf_ch;
   WORD32 len = num_time_slots;
   WORD32 qm_len;
   for (i = 0; i < move; i++) {
     memcpy(ptr_quota_mtx[i], ptr_quota_mtx[i + no_est_per_frame],
            num_qmf_ch * sizeof(ptr_quota_mtx[i][0]));
   }
 
   memmove(ptr_energy_vec, ptr_energy_vec + no_est_per_frame, move * sizeof(ptr_energy_vec[0]));
   memset(ptr_energy_vec + start_index_matrix, 0,
          (tot_no_est - start_index_matrix) * sizeof(ptr_energy_vec[0]));
   if (is_ld_sbr) {
     len = num_time_slots / 2;
     qm_len = 2 + len;
   } else {
     qm_len = 18;
   }
 
   for (r = 0; r < usb; r++) {
     k = 2;
     time_index = start_index_matrix;
 
     while (k <= qm_len) {
       ixheaace_calc_auto_corr_second_order(&ac, &ptr_real[k], &ptr_imag[k], r, len);
 
       r00r = ac.r00r;
       r11r = ac.r11r;
       r12r = ac.r12r;
       r12i = ac.r12i;
       r01r = ac.r01r;
       r01i = ac.r01i;
       r02r = ac.r02r;
       r02i = ac.r02i;
       det = ac.det;
 
       if (det == 0) {
         alphar[1] = alphai[1] = 0;
       } else {
         alphar[1] = (r01r * r12r - r01i * r12i - r02r * r11r) / det;
         alphai[1] = (r01i * r12r + r01r * r12i - r02i * r11r) / det;
       }
 
       if (r11r == 0) {
         alphar[0] = alphai[0] = 0;
       } else {
         alphar[0] = -(r01r + alphar[1] * r12r + alphai[1] * r12i) / r11r;
         alphai[0] = -(r01i + alphai[1] * r12r - alphar[1] * r12i) / r11r;
       }
       if (r00r) {
         FLOAT32 tmp =
             -(alphar[0] * r01r + alphai[0] * r01i + alphar[1] * r02r + alphai[1] * r02i) / (r00r);
-        FLOAT32 denum = 1.0f - tmp;
-        if (fabs(denum) < EPS) {
-          denum = (FLOAT32)EPS;
-        }
-        ptr_quota_mtx[time_index][r] = (FLOAT32)(tmp / denum);
+        ptr_quota_mtx[time_index][r] = (FLOAT32)ixheaace_div32(tmp, 1.0f - tmp);
       } else {
         ptr_quota_mtx[time_index][r] = 0;
       }
       ptr_energy_vec[time_index] += r00r;
 
       k += is_ld_sbr ? len : 16;
 
       time_index++;
     }
   }
 }
