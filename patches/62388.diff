commit 5b0bee231b0a1e5ce0e87b2681147fb35bc5518a
Author: Yash Patil <yash.patil@ittiam.com>
Date:   Fri Sep 22 17:30:42 2023 +0530

    Fix for Use-of-uninitialized-value in impd_drc_set_preselection
    
    These changes handles the runtime error reported when
    one of the buffer was not initialized correctly.
    
    Bug: ossFuzz:62388
    Test: poc in bug

diff --git a/decoder/drc_src/impd_drc_selection_process_drcset_selection.c b/decoder/drc_src/impd_drc_selection_process_drcset_selection.c
index 676878b..153e2f5 100644
--- a/decoder/drc_src/impd_drc_selection_process_drcset_selection.c
+++ b/decoder/drc_src/impd_drc_selection_process_drcset_selection.c
@@ -686,411 +686,411 @@ WORD32 impd_match_drc_characteristic(
 WORD32 impd_drc_set_preselection(
     ia_drc_sel_proc_params_struct* pstr_drc_sel_proc_params_struct,
     ia_drc_config* pstr_drc_config,
     ia_drc_loudness_info_set_struct* pstr_loudness_info,
     WORD32 restrict_to_drc_with_album_loudness,
     ia_drc_sel_pro_struct* pstr_drc_uni_sel_proc,
     WORD32* selection_candidate_count,
     ia_selection_candidate_info_struct* selection_candidate_info) {
   WORD32 i, j, k, l, d, n, err;
   WORD32 downmix_id_match = 0;
 
   WORD32 selection_candidate_step_2_count;
   ia_selection_candidate_info_struct
       selection_candidate_info_step_2[SELECTION_CANDIDATE_COUNT_MAX];
 
   WORD32 num_downmix_id_requests =
       pstr_drc_sel_proc_params_struct->num_downmix_id_requests;
   WORD32* requested_dwnmix_id =
       pstr_drc_sel_proc_params_struct->requested_dwnmix_id;
   FLOAT32 output_peak_level_max =
       pstr_drc_sel_proc_params_struct->output_peak_level_max;
   WORD32 loudness_deviation_max =
       pstr_drc_sel_proc_params_struct->loudness_deviation_max;
   WORD32* drc_set_id_valid_flag = pstr_drc_uni_sel_proc->drc_set_id_valid_flag;
   WORD32* eq_set_id_valid_flag = pstr_drc_uni_sel_proc->eq_set_id_valid_flag;
 
   FLOAT32 output_peak_level_min = 1000.0f;
   FLOAT32 adjustment;
   WORD32 loudness_drc_set_id_requested;
 
   WORD32 num_compression_eq_count = 0;
   WORD32 num_compression_eq_id[16];
 
   WORD32 loudness_info_count = 0;
   WORD32 eq_set_id_loudness[16];
   FLOAT32 loudness_normalization_gain_db[16];
   FLOAT32 loudness[16];
   WORD32 peak_info_count;
   WORD32 eq_set_id_Peak[16];
   FLOAT32 signal_peak_level[16];
-  WORD32 explicit_peak_information_present[16];
+  WORD32 explicit_peak_information_present[16] = { 0 };
 
   ia_uni_drc_coeffs_struct* str_p_loc_drc_coefficients_uni_drc = NULL;
   ia_drc_instructions_struct* str_drc_instruction_str = NULL;
 
   impd_select_drc_coeff3(pstr_drc_config, &str_p_loc_drc_coefficients_uni_drc);
   if (str_p_loc_drc_coefficients_uni_drc == NULL) return UNEXPECTED_ERROR;
   k = 0;
   for (d = 0; d < num_downmix_id_requests; d++) {
     err = impd_find_eq_set_no_compression(
         pstr_drc_config, requested_dwnmix_id[d], &num_compression_eq_count,
         num_compression_eq_id);
     if (err) return (err);
     for (i = 0; i < pstr_drc_config->drc_instructions_count_plus; i++) {
       downmix_id_match = 0;
       str_drc_instruction_str = &(pstr_drc_config->str_drc_instruction_str[i]);
 
       for (j = 0; j < str_drc_instruction_str->dwnmix_id_count; j++) {
         if ((str_drc_instruction_str->downmix_id[j] ==
              requested_dwnmix_id[d]) ||
             ((str_drc_instruction_str->downmix_id[j] == ID_FOR_BASE_LAYOUT) &&
              (str_drc_instruction_str->drc_set_id > 0)) ||
             (str_drc_instruction_str->downmix_id[j] == ID_FOR_ANY_DOWNMIX)) {
           downmix_id_match = 1;
         }
       }
       if (downmix_id_match == 1) {
         if (pstr_drc_sel_proc_params_struct->dynamic_range_control_on == 1) {
           if ((str_drc_instruction_str->drc_set_effect != EFFECT_BIT_FADE) &&
               (str_drc_instruction_str->drc_set_effect !=
                EFFECT_BIT_DUCK_OTHER) &&
               (str_drc_instruction_str->drc_set_effect !=
                EFFECT_BIT_DUCK_SELF) &&
               (str_drc_instruction_str->drc_set_effect != 0 ||
                str_drc_instruction_str->drc_set_id < 0) &&
               (((str_drc_instruction_str->depends_on_drc_set_present == 0) &&
                 (str_drc_instruction_str->no_independent_use == 0)) ||
                (str_drc_instruction_str->depends_on_drc_set_present == 1))) {
             WORD32 drc_is_permitted = 1;
             if (str_drc_instruction_str->drc_set_id > 0) {
               drc_is_permitted =
                   drc_set_id_valid_flag[str_drc_instruction_str->drc_set_id];
             }
             if (drc_is_permitted == 1) {
               err = impd_init_loudness_control(
                   pstr_drc_sel_proc_params_struct, pstr_loudness_info,
                   requested_dwnmix_id[d], str_drc_instruction_str->drc_set_id,
 
                   num_compression_eq_count, num_compression_eq_id,
                   &loudness_info_count, eq_set_id_loudness,
                   loudness_normalization_gain_db, loudness);
               if (err) return (err);
 
               if (loudness_info_count > MAX_LOUDNESS_INFO_COUNT)
                 return UNEXPECTED_ERROR;
 
               impd_signal_peak_level_info(
                   pstr_drc_config, pstr_loudness_info, str_drc_instruction_str,
                   requested_dwnmix_id[d],
                   pstr_drc_sel_proc_params_struct->album_mode,
                   num_compression_eq_count, num_compression_eq_id,
                   &peak_info_count, eq_set_id_Peak, signal_peak_level,
                   explicit_peak_information_present);
 
               for (l = 0; l < loudness_info_count; l++) {
                 WORD32 match_found_flag = 0;
                 WORD32 p;
                 if (k >= SELECTION_CANDIDATE_COUNT_MAX) return UNEXPECTED_ERROR;
                 selection_candidate_info[k].loudness_norm_db_gain_adjusted =
                     loudness_normalization_gain_db[l];
 
                 selection_candidate_info[k]
                     .loudness_norm_db_gain_adjusted = min(
                     selection_candidate_info[k].loudness_norm_db_gain_adjusted,
                     pstr_drc_sel_proc_params_struct->loudness_norm_gain_db_max);
 
                 if (loudness[l] != UNDEFINED_LOUDNESS_VALUE) {
                   selection_candidate_info[k].output_loudness =
                       loudness[l] +
                       selection_candidate_info[k]
                           .loudness_norm_db_gain_adjusted;
                 } else {
                   selection_candidate_info[k].output_loudness =
                       UNDEFINED_LOUDNESS_VALUE;
                 }
 
                 for (p = 0; p < peak_info_count; p++) {
                   if (eq_set_id_Peak[p] == eq_set_id_loudness[l]) {
                     if (eq_set_id_valid_flag[eq_set_id_Peak[p]] == 1)
 
                     {
                       match_found_flag = 1;
                       break;
                     }
                   }
                 }
                 if (match_found_flag == 1) {
                   selection_candidate_info[k].output_peak_level =
                       signal_peak_level[p] +
                       selection_candidate_info[k]
                           .loudness_norm_db_gain_adjusted;
                 } else {
                   selection_candidate_info[k].output_peak_level =
                       selection_candidate_info[k]
                           .loudness_norm_db_gain_adjusted;
                 }
                 if ((str_drc_instruction_str->requires_eq == 1) &&
                     (eq_set_id_valid_flag[eq_set_id_loudness[l]] == 0))
                   continue;
                 selection_candidate_info[k].drc_instructions_index = i;
                 selection_candidate_info[k].downmix_id_request_index = d;
                 selection_candidate_info[k].eq_set_id = eq_set_id_loudness[l];
                 if (explicit_peak_information_present[p] == 1) {
                   selection_candidate_info[k].selection_flags =
                       SELECTION_FLAG_EXPLICIT_PEAK_INFO_PRESENT;
                 } else {
                   selection_candidate_info[k].selection_flags = 0;
                 }
                 impd_mixing_level_info(
                     pstr_drc_sel_proc_params_struct, pstr_loudness_info,
                     requested_dwnmix_id[d], str_drc_instruction_str->drc_set_id,
                     eq_set_id_loudness[l],
                     &selection_candidate_info[k].mixing_level);
                 if (str_drc_instruction_str->drc_set_target_loudness_present &&
                     ((pstr_drc_sel_proc_params_struct
                           ->loudness_normalization_on &&
                       str_drc_instruction_str
                               ->drc_set_target_loudness_value_upper >=
                           pstr_drc_sel_proc_params_struct->target_loudness &&
                       str_drc_instruction_str
                               ->drc_set_target_loudness_value_lower <
                           pstr_drc_sel_proc_params_struct->target_loudness) ||
                      !pstr_drc_sel_proc_params_struct
                           ->loudness_normalization_on)) {
                   selection_candidate_info[k].selection_flags |=
                       SELECTION_FLAG_DRC_TARGET_LOUDNESS_MATCH;
                   if (!explicit_peak_information_present[p]) {
                     if (pstr_drc_sel_proc_params_struct
                             ->loudness_normalization_on) {
                       selection_candidate_info[k].output_peak_level =
                           pstr_drc_sel_proc_params_struct->target_loudness -
                           str_drc_instruction_str
                               ->drc_set_target_loudness_value_upper;
                     } else {
                       selection_candidate_info[k].output_peak_level = 0.0f;
                     }
                   }
                 }
                 if ((selection_candidate_info[k].selection_flags &
                          (SELECTION_FLAG_DRC_TARGET_LOUDNESS_MATCH |
                           SELECTION_FLAG_EXPLICIT_PEAK_INFO_PRESENT) ||
                      !str_drc_instruction_str
                           ->drc_set_target_loudness_present)) {
                   k++;
                 }
               }
             }
           }
         } else {
           if (str_drc_instruction_str->drc_set_id < 0) {
             err = impd_init_loudness_control(
                 pstr_drc_sel_proc_params_struct, pstr_loudness_info,
                 requested_dwnmix_id[d], str_drc_instruction_str->drc_set_id,
                 num_compression_eq_count, num_compression_eq_id,
                 &loudness_info_count, eq_set_id_loudness,
                 loudness_normalization_gain_db, loudness);
             if (err) return (err);
 
             impd_signal_peak_level_info(
                 pstr_drc_config, pstr_loudness_info, str_drc_instruction_str,
                 requested_dwnmix_id[d],
                 pstr_drc_sel_proc_params_struct->album_mode,
                 num_compression_eq_count, num_compression_eq_id,
                 &peak_info_count, eq_set_id_Peak, signal_peak_level,
                 explicit_peak_information_present);
             for (l = 0; l < loudness_info_count; l++) {
               WORD32 match_found_flag = 0;
               WORD32 p;
               if (k >= SELECTION_CANDIDATE_COUNT_MAX) return UNEXPECTED_ERROR;
               for (p = 0; p < peak_info_count; p++) {
                 if (eq_set_id_Peak[p] == eq_set_id_loudness[l]) {
                   if (eq_set_id_valid_flag[eq_set_id_Peak[p]] == 1) {
                     match_found_flag = 1;
                     break;
                   }
                 }
               }
               if (match_found_flag == 1) {
                 adjustment = max(
                     0.0f,
                     signal_peak_level[p] + loudness_normalization_gain_db[l] -
                         pstr_drc_sel_proc_params_struct->output_peak_level_max);
                 adjustment = min(adjustment, max(0.0f, loudness_deviation_max));
                 selection_candidate_info[k].loudness_norm_db_gain_adjusted =
                     loudness_normalization_gain_db[l] - adjustment;
 
                 selection_candidate_info[k]
                     .loudness_norm_db_gain_adjusted = min(
                     selection_candidate_info[k].loudness_norm_db_gain_adjusted,
                     pstr_drc_sel_proc_params_struct->loudness_norm_gain_db_max);
 
                 selection_candidate_info[k].output_peak_level =
                     signal_peak_level[p] +
                     selection_candidate_info[k].loudness_norm_db_gain_adjusted;
                 if (loudness[l] != UNDEFINED_LOUDNESS_VALUE) {
                   selection_candidate_info[k].output_loudness =
                       loudness[l] +
                       selection_candidate_info[k]
                           .loudness_norm_db_gain_adjusted;
                 } else {
                   selection_candidate_info[k].output_loudness =
                       UNDEFINED_LOUDNESS_VALUE;
                 }
                 selection_candidate_info[k].drc_instructions_index = i;
                 selection_candidate_info[k].downmix_id_request_index = d;
                 selection_candidate_info[k].eq_set_id = eq_set_id_loudness[l];
                 if (explicit_peak_information_present[p] == 1) {
                   selection_candidate_info[k].selection_flags =
                       SELECTION_FLAG_EXPLICIT_PEAK_INFO_PRESENT;
                 } else {
                   selection_candidate_info[k].selection_flags = 0;
                 }
                 impd_mixing_level_info(
                     pstr_drc_sel_proc_params_struct, pstr_loudness_info,
                     requested_dwnmix_id[d], str_drc_instruction_str->drc_set_id,
                     eq_set_id_loudness[l],
                     &selection_candidate_info[k].mixing_level);
                 k++;
               }
             }
           }
         }
       }
     }
   }
   if (k > SELECTION_CANDIDATE_COUNT_MAX) return UNEXPECTED_ERROR;
   *selection_candidate_count = k;
   if (pstr_drc_sel_proc_params_struct->dynamic_range_control_on == 1) {
     n = 0;
     for (k = 0; k < *selection_candidate_count; k++) {
       str_drc_instruction_str =
           &(pstr_drc_config->str_drc_instruction_str
                 [selection_candidate_info[k].drc_instructions_index]);
 
       if (pstr_drc_sel_proc_params_struct->eq_set_purpose_request !=
           EQ_PURPOSE_EQ_OFF) {
         WORD32 matching_eq_set_count = 0;
         WORD32 matching_eq_instrucions_index[64];
         err = impd_match_eq_set(
             pstr_drc_config, requested_dwnmix_id[selection_candidate_info[k]
                                                      .downmix_id_request_index],
             str_drc_instruction_str->drc_set_id, eq_set_id_valid_flag,
             &matching_eq_set_count, matching_eq_instrucions_index);
         if (err) return (err);
         for (j = 0; j < matching_eq_set_count; j++) {
           if (n >= SELECTION_CANDIDATE_COUNT_MAX) return UNEXPECTED_ERROR;
           memcpy(&selection_candidate_info_step_2[n],
                  &selection_candidate_info[k],
                  sizeof(ia_selection_candidate_info_struct));
           selection_candidate_info_step_2[n].eq_set_id =
               pstr_drc_config->str_drc_config_ext
                   .str_eq_instructions[matching_eq_instrucions_index[j]]
                   .eq_set_id;
           n++;
         }
       }
       if (str_drc_instruction_str->requires_eq == 0) {
         if (n >= SELECTION_CANDIDATE_COUNT_MAX) return UNEXPECTED_ERROR;
         memcpy(&selection_candidate_info_step_2[n],
                &selection_candidate_info[k],
                sizeof(ia_selection_candidate_info_struct));
         selection_candidate_info_step_2[n].eq_set_id = 0;
         n++;
       }
     }
     if (n > SELECTION_CANDIDATE_COUNT_MAX) return UNEXPECTED_ERROR;
     memcpy(selection_candidate_info, selection_candidate_info_step_2,
            n * sizeof(ia_selection_candidate_info_struct));
     *selection_candidate_count = n;
     n = 0;
     for (k = 0; k < *selection_candidate_count; k++) {
       if ((selection_candidate_info[k].selection_flags &
            SELECTION_FLAG_DRC_TARGET_LOUDNESS_MATCH) &&
           !(selection_candidate_info[k].selection_flags &
             SELECTION_FLAG_EXPLICIT_PEAK_INFO_PRESENT)) {
         memcpy(&selection_candidate_info_step_2[n],
                &selection_candidate_info[k],
                sizeof(ia_selection_candidate_info_struct));
         n++;
       } else {
         if (selection_candidate_info[k].output_peak_level <=
             output_peak_level_max) {
           memcpy(&selection_candidate_info_step_2[n],
                  &selection_candidate_info[k],
                  sizeof(ia_selection_candidate_info_struct));
           n++;
         }
         if (selection_candidate_info[k].output_peak_level <
             output_peak_level_min) {
           output_peak_level_min = selection_candidate_info[k].output_peak_level;
         }
       }
     }
     selection_candidate_step_2_count = n;
     if (selection_candidate_step_2_count == 0) {
       n = 0;
       for (k = 0; k < *selection_candidate_count; k++) {
         if ((selection_candidate_info[k].selection_flags &
              SELECTION_FLAG_DRC_TARGET_LOUDNESS_MATCH) &&
             (selection_candidate_info[k].selection_flags &
              SELECTION_FLAG_EXPLICIT_PEAK_INFO_PRESENT)) {
           memcpy(&selection_candidate_info_step_2[n],
                  &selection_candidate_info[k],
                  sizeof(ia_selection_candidate_info_struct));
           n++;
         }
       }
       selection_candidate_step_2_count = n;
     }
     if (selection_candidate_step_2_count == 0) {
       n = 0;
       for (k = 0; k < *selection_candidate_count; k++) {
         if (selection_candidate_info_step_2[k].output_peak_level <
             output_peak_level_min + 1.0f) {
           memcpy(&selection_candidate_info_step_2[n],
                  &selection_candidate_info[k],
                  sizeof(ia_selection_candidate_info_struct));
           adjustment =
               max(0.0f, selection_candidate_info_step_2[n].output_peak_level -
                             output_peak_level_max);
           adjustment = min(adjustment, max(0.0f, loudness_deviation_max));
           selection_candidate_info_step_2[n].loudness_norm_db_gain_adjusted -=
               adjustment;
           selection_candidate_info_step_2[n].output_peak_level -= adjustment;
           selection_candidate_info_step_2[n].output_loudness -= adjustment;
           n++;
         }
       }
       selection_candidate_step_2_count = n;
     }
 
     for (n = 0; n < selection_candidate_step_2_count; n++) {
       memcpy(&selection_candidate_info[n], &selection_candidate_info_step_2[n],
              sizeof(ia_selection_candidate_info_struct));
     }
     *selection_candidate_count = selection_candidate_step_2_count;
   }
 
   if (restrict_to_drc_with_album_loudness == 1) {
     j = 0;
     for (k = 0; k < *selection_candidate_count; k++) {
       loudness_drc_set_id_requested =
           max(0, pstr_drc_config
                      ->str_drc_instruction_str[selection_candidate_info[k]
                                                    .drc_instructions_index]
                      .drc_set_id);
       for (n = 0; n < pstr_loudness_info->loudness_info_album_count; n++) {
         if (loudness_drc_set_id_requested ==
             pstr_loudness_info->str_loudness_info_album[n].drc_set_id) {
           if (j >= SELECTION_CANDIDATE_COUNT_MAX) return UNEXPECTED_ERROR;
           memcpy(&selection_candidate_info[j], &selection_candidate_info[k],
                  sizeof(ia_selection_candidate_info_struct));
           j++;
           break;
         }
       }
     }
     *selection_candidate_count = j;
   }
   return (0);
 }
