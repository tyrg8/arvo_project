commit 9191f693bbfe5b70b91cb068d2fb38316aa0cc5e
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Sat Dec 18 13:49:19 2021 +0000

    Oss-fuzz #42454 - limit a warning message to fit string

diff --git a/pdf/pdf_image.c b/pdf/pdf_image.c
index 7ed9ae949..9af47a01f 100644
--- a/pdf/pdf_image.c
+++ b/pdf/pdf_image.c
@@ -1271,166 +1271,173 @@ static int
 pdfi_image_get_color(pdf_context *ctx, pdf_c_stream *source, pdfi_image_info_t *image_info,
                      int *comps, gs_color_space **pcs)
 {
     int code = 0;
     pdfi_jpx_info_t *jpx_info = &image_info->jpx_info;
     pdf_obj *ColorSpace = NULL;
     char *backup_color_name = NULL;
     bool using_enum_cs = false;
 
     /* NOTE: Spec says ImageMask and ColorSpace mutually exclusive */
     if (image_info->ImageMask) {
         *comps = 1;
         *pcs = NULL;
         return 0;
     }
 
     ColorSpace = image_info->ColorSpace;
     if (ColorSpace)
         pdfi_countup(ColorSpace);
     if (ColorSpace == NULL) {
         if (image_info->is_JPXDecode) {
             /* The graphics library doesn't support 12-bit images, so the openjpeg layer
              * (see sjpx_openjpeg.c/decode_image()) is going to translate the 12-bits up to 16-bits.
              * That means we just treat it as 16-bit when rendering, so force the value
              * to 16 here.
              */
             if (jpx_info->bpc == 12) {
                 jpx_info->bpc = 16;
             }
             image_info->BPC = jpx_info->bpc;
 
             if (jpx_info->iccbased) {
                 int dummy; /* Holds number of components read from the ICC profile, we ignore this here */
 
                 code = pdfi_create_icc_colorspace_from_stream(ctx, source, jpx_info->icc_offset,
                                                               jpx_info->icc_length, jpx_info->comps, &dummy,
                                                               pcs);
                 if (code < 0) {
                     dmprintf2(ctx->memory,
                               "WARNING JPXDecode: Error setting icc colorspace (offset=%d,len=%d)\n",
                               jpx_info->icc_offset, jpx_info->icc_length);
                     goto cleanupExit;
                 }
                 *comps = gs_color_space_num_components(*pcs);
                 goto cleanupExit;
             } else {
                 char *color_str = NULL;
 
                 /* TODO: These colorspace names are pulled from the gs code (jp2_csp_dict), but need
                  * to be implemented to actually work.
                  */
                 backup_color_name = (char *)"DeviceRGB";
                 switch(jpx_info->cs_enum) {
                 case 12:
                     color_str = (char *)"DeviceCMYK";
                     break;
                 case 14:
                     /* All the other colour spaces are set by name, either a device name or a
                      * 'special' internal name (same as Ghostscript) which is picked up in
                      * pdfi_create_colorspace_by_name() in pdf_colour.c. These names must
                      * match!
                      * However for Lab we need to set a White Point and its simplest just
                      * to create an appropriate color space array here.
                      */
                     code = pdfi_create_JPX_Lab(ctx, &ColorSpace);
                     if (code < 0)
                         goto cleanupExit;
                     break;
                 case 16:
                     color_str = (char *)"sRGBICC";
                     break;
                 case 17:
                     color_str = (char *)"sGrayICC";
                     backup_color_name = (char *)"DeviceGray";
                     break;
                 case 18:
                     color_str = (char *)"DeviceRGB";
                     break;
                 case 20:
                 case 24:
                     color_str = (char *)"esRGBICC";
                     break;
                 case 21:
                     color_str = (char *)"rommRGBICC";
                     break;
                 default:
                     {
                         char extra_info[gp_file_name_sizeof];
                         /* TODO: Could try DeviceRGB instead of erroring out? */
                         gs_sprintf(extra_info, "**** Error: JPXDecode: Unsupported EnumCS %d\n", jpx_info->cs_enum);
                         pdfi_set_error(ctx, 0, NULL, E_PDF_IMAGECOLOR_ERROR, "pdfi_image_get_color", extra_info);
                         code = gs_note_error(gs_error_rangecheck);
                         goto cleanupExit;
                     }
                 }
 
                 /* Make a ColorSpace for the name */
                 if (color_str != NULL) {
                     code = pdfi_name_alloc(ctx, (byte *)color_str, strlen(color_str), &ColorSpace);
                     if (code < 0)
                         goto cleanupExit;
                     pdfi_countup(ColorSpace);
                     using_enum_cs = true;
                 }
             }
         } else {
             /* Assume DeviceRGB colorspace */
             pdfi_set_warning(ctx, 0, NULL, W_PDF_BAD_IMAGEDICT, "pdfi_image_get_color", (char *)"**** Error: image has no /ColorSpace key; assuming /DeviceRGB");
             code = pdfi_name_alloc(ctx, (byte *)"DeviceRGB", strlen("DeviceRGB"), &ColorSpace);
             if (code < 0)
                 goto cleanupExit;
             pdfi_countup(ColorSpace);
         }
     } else {
         /* Override BPC from JPXDecode if applicable
          * Sample: tests_private/comparefiles/Bug695387.pdf
          */
         if (image_info->is_JPXDecode && jpx_info->is_valid)
             image_info->BPC = jpx_info->bpc;
     }
 
     /* At this point ColorSpace is either a string we just made, or the one from the Image */
     code = pdfi_create_colorspace(ctx, ColorSpace,
                                   image_info->stream_dict, image_info->page_dict,
                                   pcs, image_info->inline_image);
     if (code < 0) {
         dmprintf(ctx->memory, "WARNING: Image has unsupported ColorSpace ");
         if (ColorSpace->type == PDF_NAME) {
             pdf_name *name = (pdf_name *)ColorSpace;
             char str[100];
-            memcpy(str, (const char *)name->data, name->length);
-            str[name->length] = '\0';
-            dmprintf1(ctx->memory, "NAME:%s\n", str);
+            int length = name->length;
+
+            if (length > 0) {
+                if (length > 100)
+                    length = 99;
+
+                memcpy(str, (const char *)name->data, length);
+                str[length] = '\0';
+                dmprintf1(ctx->memory, "NAME:%s\n", str);
+            }
         } else {
             dmprintf(ctx->memory, "(not a name)\n");
         }
 
         /* If we were trying an enum_cs, attempt to use backup_color_name instead */
         if (using_enum_cs) {
             pdfi_countdown(ColorSpace);
             code = pdfi_name_alloc(ctx, (byte *)backup_color_name, strlen(backup_color_name), &ColorSpace);
             if (code < 0)
                 goto cleanupExit;
             pdfi_countup(ColorSpace);
             /* Try to set the backup name */
             code = pdfi_create_colorspace(ctx, ColorSpace,
                                           image_info->stream_dict, image_info->page_dict,
                                           pcs, image_info->inline_image);
 
             if (code < 0) {
                 pdfi_set_error(ctx, 0, NULL, E_PDF_IMAGECOLOR_ERROR, "pdfi_image_get_color", NULL);
                 goto cleanupExit;
             }
         } else {
             pdfi_set_error(ctx, 0, NULL, E_PDF_IMAGECOLOR_ERROR, "pdfi_image_get_color", NULL);
             goto cleanupExit;
         }
     }
     *comps = gs_color_space_num_components(*pcs);
 
  cleanupExit:
     pdfi_countdown(ColorSpace);
     return code;
 }
 
 /* Make a fake SMask dict from a JPX SMaskInData */
