commit 00c3f5be2ef637aa49b60ef922b28d40c0799f92
Author: Anthony Hu <anthony@wolfssl.com>
Date:   Tue Feb 20 21:50:03 2024 -0500

    A fixup

diff --git a/wolfcrypt/test/test.c b/wolfcrypt/test/test.c
index 829e260d0..b51b1ad93 100644
--- a/wolfcrypt/test/test.c
+++ b/wolfcrypt/test/test.c
@@ -17915,291 +17915,293 @@ exit_rsa_even_mod:
 #if defined(WOLFSSL_CERT_GEN) && !defined(NO_ASN_TIME)
 static wc_test_ret_t rsa_certgen_test(RsaKey* key, RsaKey* keypub, WC_RNG* rng, byte* tmp)
 {
 #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
     RsaKey      *caKey = (RsaKey *)XMALLOC(sizeof *caKey, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 #ifdef WOLFSSL_TEST_CERT
     DecodedCert *decode = (DecodedCert *)XMALLOC(sizeof *decode, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
 #endif
 #else
     RsaKey      caKey[1];
 #ifdef WOLFSSL_TEST_CERT
     DecodedCert decode[1];
 #endif
 #endif
     byte*       der = NULL;
     wc_test_ret_t ret;
     Cert*       myCert = NULL;
     int         certSz;
     size_t      bytes3;
     word32      idx3 = 0;
 #if !defined(USE_CERT_BUFFERS_1024) && !defined(USE_CERT_BUFFERS_2048)
     XFILE       file3;
 #endif
 #if defined(WOLFSSL_ALT_NAMES) && !defined(NO_ASN_TIME)
     struct tm beforeTime;
     struct tm afterTime;
 #endif
     const byte  mySerial[8] = {1,2,3,4,5,6,7,8};
 
     (void)keypub;
 
 #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
     if (caKey == NULL)
         ERROR_OUT(MEMORY_E, exit_rsa);
 #ifdef WOLFSSL_TEST_CERT
     if (decode == NULL)
         ERROR_OUT(MEMORY_E, exit_rsa);
 #endif
 
 #endif
 
     XMEMSET(caKey, 0, sizeof *caKey);
 
     der = (byte*)XMALLOC(FOURK_BUF, HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
     if (der == NULL) {
         ERROR_OUT(WC_TEST_RET_ENC_ERRNO, exit_rsa);
     }
     myCert = (Cert*)XMALLOC(sizeof(Cert), HEAP_HINT, DYNAMIC_TYPE_TMP_BUFFER);
     if (myCert == NULL) {
         ERROR_OUT(WC_TEST_RET_ENC_ERRNO, exit_rsa);
     }
 
     /* self signed */
     ret = wc_InitCert_ex(myCert, HEAP_HINT, devId);
     if (ret != 0) {
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
     }
 
     XMEMCPY(&myCert->subject, &certDefaultName, sizeof(CertName));
     XMEMCPY(myCert->serial, mySerial, sizeof(mySerial));
     myCert->serialSz = (int)sizeof(mySerial);
     myCert->isCA    = 1;
 #ifndef NO_SHA256
     myCert->sigType = CTC_SHA256wRSA;
 #else
     myCert->sigType = CTC_SHAwRSA;
 #endif
 
 #ifdef WOLFSSL_CERT_EXT
     /* add Policies */
     XSTRNCPY(myCert->certPolicies[0], "2.16.840.1.101.3.4.1.42",
             CTC_MAX_CERTPOL_SZ);
     XSTRNCPY(myCert->certPolicies[1], "1.2.840.113549.1.9.16.6.5",
             CTC_MAX_CERTPOL_SZ);
     myCert->certPoliciesNb = 2;
 
     /* add SKID from the Public Key */
     ret = wc_SetSubjectKeyIdFromPublicKey(myCert, keypub, NULL);
     if (ret != 0) {
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
     }
 
      /* add AKID from the Public Key */
     ret = wc_SetAuthKeyIdFromPublicKey(myCert, keypub, NULL);
     if (ret != 0) {
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
     }
 
     /* add Key Usage */
     ret = wc_SetKeyUsage(myCert,"cRLSign,keyCertSign");
     if (ret != 0) {
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
     }
 #ifdef WOLFSSL_EKU_OID
     {
         const char unique[] = "2.16.840.1.111111.100.1.10.1";
         ret = wc_SetExtKeyUsageOID(myCert, unique, sizeof(unique), 0,
                     HEAP_HINT);
         if (ret != 0) {
             ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
         }
     }
 #endif /* WOLFSSL_EKU_OID */
 #endif /* WOLFSSL_CERT_EXT */
 
     do {
 #if defined(WOLFSSL_ASYNC_CRYPT)
         ret = wc_AsyncWait(ret, &key->asyncDev, WC_ASYNC_FLAG_CALL_AGAIN);
 #endif
         if (ret >= 0) {
             ret = wc_MakeSelfCert(myCert, der, FOURK_BUF, key, rng);
         }
     } while (ret == WC_PENDING_E);
     if (ret < 0) {
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
     }
     certSz = (word32)ret;
 
 #ifdef WOLFSSL_TEST_CERT
     InitDecodedCert(decode, der, certSz, HEAP_HINT);
     ret = ParseCert(decode, CERT_TYPE, NO_VERIFY, 0);
     if (ret != 0) {
         FreeDecodedCert(decode);
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
     }
     FreeDecodedCert(decode);
 #endif
 
     ret = SaveDerAndPem(der, certSz, certDerFile, certPemFile,
                         CERT_TYPE);
     if (ret != 0) {
         goto exit_rsa;
     }
 
     /* Setup Certificate */
     ret = wc_InitCert_ex(myCert, HEAP_HINT, devId);
     if (ret < 0) {
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
     }
 #if defined(WOLFSSL_ALT_NAMES) || defined(HAVE_PKCS7)
         /* Get CA Cert for testing */
     #ifdef USE_CERT_BUFFERS_1024
         XMEMCPY(tmp, ca_cert_der_1024, sizeof_ca_cert_der_1024);
         bytes3 = sizeof_ca_cert_der_1024;
     #elif defined(USE_CERT_BUFFERS_2048)
         XMEMCPY(tmp, ca_cert_der_2048, sizeof_ca_cert_der_2048);
         bytes3 = sizeof_ca_cert_der_2048;
     #else
         file3 = XFOPEN(rsaCaCertDerFile, "rb");
         if (!file3) {
             ERROR_OUT(WC_TEST_RET_ENC_ERRNO, exit_rsa);
         }
         bytes3 = XFREAD(tmp, 1, FOURK_BUF, file3);
         XFCLOSE(file3);
         if (bytes3 == 0)
             ERROR_OUT(WC_TEST_RET_ENC_ERRNO, exit_rsa);
     #endif /* USE_CERT_BUFFERS */
 
+    #if  defined(WOLFSSL_ALT_NAMES)
     #if !defined(NO_FILESYSTEM) && !defined(USE_CERT_BUFFERS_1024) && \
         !defined(USE_CERT_BUFFERS_2048) && !defined(NO_ASN)
         ret = wc_SetAltNames(myCert, rsaCaCertFile);
         if (ret != 0)
             ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
     #endif
         /* get alt names from der */
         ret = wc_SetAltNamesBuffer(myCert, tmp, (int)bytes3);
         if (ret != 0)
             ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
 
         /* get dates from der */
         ret = wc_SetDatesBuffer(myCert, tmp, (int)bytes3);
         if (ret != 0)
             ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
 
     #ifndef NO_ASN_TIME
         ret = wc_GetCertDates(myCert, &beforeTime, &afterTime);
         if (ret < 0)
             ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
     #endif
-#endif /* WOLFSSL_ALT_NAMES */
+    #endif /* WOLFSSL_ALT_NAMES */
+#endif /* WOLFSSL_ALT_NAMES || HAVE_PKCS7 */
 
     /* Get CA Key */
 #ifdef USE_CERT_BUFFERS_1024
     XMEMCPY(tmp, ca_key_der_1024, sizeof_ca_key_der_1024);
     bytes3 = sizeof_ca_key_der_1024;
 #elif defined(USE_CERT_BUFFERS_2048)
     XMEMCPY(tmp, ca_key_der_2048, sizeof_ca_key_der_2048);
     bytes3 = sizeof_ca_key_der_2048;
 #else
     file3 = XFOPEN(rsaCaKeyFile, "rb");
     if (!file3) {
         ERROR_OUT(WC_TEST_RET_ENC_ERRNO, exit_rsa);
     }
 
     bytes3 = XFREAD(tmp, 1, FOURK_BUF, file3);
     XFCLOSE(file3);
     if (bytes3 == 0)
         ERROR_OUT(WC_TEST_RET_ENC_ERRNO, exit_rsa);
 #endif /* USE_CERT_BUFFERS */
 
     ret = wc_InitRsaKey(caKey, HEAP_HINT);
     if (ret != 0)
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
     ret = wc_RsaPrivateKeyDecode(tmp, &idx3, caKey, (word32)bytes3);
     if (ret != 0)
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
 
 #ifndef NO_SHA256
     myCert->sigType = CTC_SHA256wRSA;
 #else
     myCert->sigType = CTC_SHAwRSA;
 #endif
 
     XMEMCPY(&myCert->subject, &certDefaultName, sizeof(CertName));
 
 #ifdef WOLFSSL_CERT_EXT
     /* add Policies */
     XSTRNCPY(myCert->certPolicies[0], "2.16.840.1.101.3.4.1.42",
             CTC_MAX_CERTPOL_SZ);
     myCert->certPoliciesNb =1;
 
     /* add SKID from the Public Key */
     ret = wc_SetSubjectKeyIdFromPublicKey(myCert, key, NULL);
     if (ret != 0)
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
 
     /* add AKID from the CA certificate */
 #if defined(USE_CERT_BUFFERS_2048)
     ret = wc_SetAuthKeyIdFromCert(myCert, ca_cert_der_2048,
                                         sizeof_ca_cert_der_2048);
 #elif defined(USE_CERT_BUFFERS_1024)
     ret = wc_SetAuthKeyIdFromCert(myCert, ca_cert_der_1024,
                                         sizeof_ca_cert_der_1024);
 #else
     ret = wc_SetAuthKeyId(myCert, rsaCaCertFile);
 #endif
     if (ret != 0)
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
 
     /* add Key Usage */
     ret = wc_SetKeyUsage(myCert,"keyEncipherment,keyAgreement");
     if (ret != 0)
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
 #endif /* WOLFSSL_CERT_EXT */
 
 #if defined(USE_CERT_BUFFERS_2048)
     ret = wc_SetIssuerBuffer(myCert, ca_cert_der_2048,
                                       sizeof_ca_cert_der_2048);
 #elif defined(USE_CERT_BUFFERS_1024)
     ret = wc_SetIssuerBuffer(myCert, ca_cert_der_1024,
                                       sizeof_ca_cert_der_1024);
 #else
     ret = wc_SetIssuer(myCert, rsaCaCertFile);
 #endif
     if (ret < 0)
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
 
     certSz = wc_MakeCert(myCert, der, FOURK_BUF, key, NULL, rng);
     if (certSz < 0) {
         ERROR_OUT(WC_TEST_RET_ENC_EC(certSz), exit_rsa);
     }
 
     ret = 0;
     do {
     #if defined(WOLFSSL_ASYNC_CRYPT)
         ret = wc_AsyncWait(ret, &caKey->asyncDev, WC_ASYNC_FLAG_CALL_AGAIN);
     #endif
         if (ret >= 0) {
             ret = wc_SignCert(myCert->bodySz, myCert->sigType, der, FOURK_BUF,
                       caKey, NULL, rng);
         }
     } while (ret == WC_PENDING_E);
     if (ret < 0)
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
     certSz = (word32)ret;
 
 #ifdef WOLFSSL_TEST_CERT
     InitDecodedCert(decode, der, certSz, HEAP_HINT);
     ret = ParseCert(decode, CERT_TYPE, NO_VERIFY, 0);
     if (ret != 0) {
         FreeDecodedCert(decode);
         ERROR_OUT(WC_TEST_RET_ENC_EC(ret), exit_rsa);
     }
     FreeDecodedCert(decode);
 #endif
 
     ret = SaveDerAndPem(der, certSz, otherCertDerFile, otherCertPemFile,
                         CERT_TYPE);
     if (ret != 0) {
         goto exit_rsa;
     }
