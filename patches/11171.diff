commit 5b5ab1263c1b2a762392494b6f8df1e0a8a947f8
Author: Jim Van Verth <jvanverth@google.com>
Date:   Wed Oct 31 13:26:18 2018 -0400

    More checks in ReflexHash setup
    
    Bug: skia:8500
    Change-Id: Ic9e485072202534ae2aa702daa4cffe4b7400d03
    Reviewed-on: https://skia-review.googlesource.com/c/166805
    Auto-Submit: Jim Van Verth <jvanverth@google.com>
    Reviewed-by: Kevin Lubick <kjlubick@google.com>
    Commit-Queue: Kevin Lubick <kjlubick@google.com>

diff --git a/src/utils/SkPolyUtils.cpp b/src/utils/SkPolyUtils.cpp
index aabd6d4c77..a37814ab21 100644
--- a/src/utils/SkPolyUtils.cpp
+++ b/src/utils/SkPolyUtils.cpp
@@ -1441,70 +1441,74 @@ class ReflexHash {
 public:
     bool init(const SkRect& bounds, int vertexCount) {
         fBounds = bounds;
         fNumVerts = 0;
+        SkScalar width = bounds.width();
+        SkScalar height = bounds.height();
+        if (!SkScalarIsFinite(width) || !SkScalarIsFinite(height)) {
+            return false;
+        }
 
         // We want vertexCount grid cells, roughly distributed to match the bounds ratio
-        SkScalar hCount = SkScalarSqrt(sk_ieee_float_divide(vertexCount*bounds.width(),
-                                                            bounds.height()));
+        SkScalar hCount = SkScalarSqrt(sk_ieee_float_divide(vertexCount*width, height));
         if (!SkScalarIsFinite(hCount)) {
             return false;
         }
         fHCount = SkTMax(SkTMin(SkScalarRoundToInt(hCount), vertexCount), 1);
         fVCount = vertexCount/fHCount;
-        fGridConversion.set(sk_ieee_float_divide(fHCount - 0.001f, bounds.width()),
-                            sk_ieee_float_divide(fVCount - 0.001f, bounds.height()));
+        fGridConversion.set(sk_ieee_float_divide(fHCount - 0.001f, width),
+                            sk_ieee_float_divide(fVCount - 0.001f, height));
         if (!fGridConversion.isFinite()) {
             return false;
         }
 
         fGrid.setCount(fHCount*fVCount);
         for (int i = 0; i < fGrid.count(); ++i) {
             fGrid[i].reset();
         }
 
         return true;
     }
 
     void add(TriangulationVertex* v) {
         int index = hash(v);
         fGrid[index].addToTail(v);
         ++fNumVerts;
     }
 
     void remove(TriangulationVertex* v) {
         int index = hash(v);
         fGrid[index].remove(v);
         --fNumVerts;
     }
 
     bool checkTriangle(const SkPoint& p0, const SkPoint& p1, const SkPoint& p2,
                        uint16_t ignoreIndex0, uint16_t ignoreIndex1) const {
         if (!fNumVerts) {
             return false;
         }
 
         SkRect triBounds;
         compute_triangle_bounds(p0, p1, p2, &triBounds);
         int h0 = (triBounds.fLeft - fBounds.fLeft)*fGridConversion.fX;
         int h1 = (triBounds.fRight - fBounds.fLeft)*fGridConversion.fX;
         int v0 = (triBounds.fTop - fBounds.fTop)*fGridConversion.fY;
         int v1 = (triBounds.fBottom - fBounds.fTop)*fGridConversion.fY;
 
         for (int v = v0; v <= v1; ++v) {
             for (int h = h0; h <= h1; ++h) {
                 int i = v * fHCount + h;
                 for (SkTInternalLList<TriangulationVertex>::Iter reflexIter = fGrid[i].begin();
                      reflexIter != fGrid[i].end(); ++reflexIter) {
                     TriangulationVertex* reflexVertex = *reflexIter;
                     if (reflexVertex->fIndex != ignoreIndex0 &&
                         reflexVertex->fIndex != ignoreIndex1 &&
                         point_in_triangle(p0, p1, p2, reflexVertex->fPosition)) {
                         return true;
                     }
                 }
 
             }
         }
 
         return false;
     }
