commit 6fdf8eb5a92d51617203be1a712c15585b156497
Author: Bj√∂rn Ruytenberg <bjorn@bjornweb.nl>
Date:   Sat Apr 22 23:33:57 2017 +0200

    DOF: Fix buffer overflow (read)
    
    Perform sanity check on buffer length parsed from data. Check buffer
    size before reading value.
    
    Change-Id: I8beaf8860b39426d79867b0dd2221e57e32da8e0
    Link: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1151
    Bug: 13608
    Reviewed-on: https://code.wireshark.org/review/21287
    Reviewed-by: Peter Wu <peter@lekensteyn.nl>
    Petri-Dish: Peter Wu <peter@lekensteyn.nl>
    Tested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>
    Reviewed-by: Michael Mann <mmann78@netscape.net>

diff --git a/epan/dissectors/packet-dof.c b/epan/dissectors/packet-dof.c
index 811ea514fa..ab48f6e9cb 100644
--- a/epan/dissectors/packet-dof.c
+++ b/epan/dissectors/packet-dof.c
@@ -3861,61 +3861,68 @@ typedef struct DOFObjectIDAttribute_t
     const guint8 *data;                         /**< Attribute data. **/
 } DOFObjectIDAttribute;
 
+/**
+* Read variable-length value from buffer.
+*
+* @param maxSize   [in]        Maximum size of value to be read
+* @param bufLength [in,out]    Input: size of buffer, output: size of value in buffer
+* @param buffer    [in]        Actual buffer
+* @return                      Uncompressed value if buffer size is valid (or 0 on error)
+*/
 static guint32 OALMarshal_UncompressValue(guint8 maxSize, guint32 *bufLength, const guint8 *buffer)
 {
     guint32 value = 0;
     guint8 used = 0;
     guint8 size = maxSize;
     guint8 mask;
 
     switch (buffer[0] >> 6)
     {
     case 0x02:
         /* Two Bytes */
         if (maxSize > 2)
             mask = 0x3F;
         else
             mask = 0x7F;
         size = 2;
         break;
 
     case 0x03:
         /* Three/Four Bytes */
         if (maxSize > 2)
             mask = 0x3F;
         else
             mask = 0x7F;
         break;
 
     default:
         /* One Byte */
         size = 1;
         mask = 0x7F;
         break;
     }
 
+    /* Sanity check */
+    if (size > *bufLength)
+        return 0;
+
     value = buffer[used++] & mask;
     while (used < size)
         value = (value << 8) | buffer[used++];
 
     *bufLength = used;
     return (value);
 }
 
-static guint32 DOFObjectID_GetClassSize_Bytes(const guint8 *pBytes)
+static guint32 DOFObjectID_GetClassSize(DOFObjectID self)
 {
-    guint32 size = 4;
+    guint32 size = self->len;
 
-    (void)OALMarshal_UncompressValue(DOFOBJECTID_MAX_CLASS_SIZE, &size, pBytes);
+    (void)OALMarshal_UncompressValue(DOFOBJECTID_MAX_CLASS_SIZE, &size, self->oid);
 
     return size;
 }
 
-static guint32 DOFObjectID_GetClassSize(DOFObjectID self)
-{
-    return DOFObjectID_GetClassSize_Bytes(self->oid);
-}
-
 static guint32 DOFObjectID_GetDataSize(const DOFObjectID self)
 {
     return ((*((const guint8 *)self->oid + DOFObjectID_GetClassSize(self))) & OID_DATA_LEN_MASK);
