commit 910b803d8d3489ec15d797a237b1f3e2f5e75bb0
Author: davidot <davidot@serenityos.org>
Date:   Sun Jun 13 16:21:59 2021 +0200

    LibJS: Implement Array.prototype.flatMap
    
    Also made recursive_array_flat more compliant with the spec
    So renamed it to flatten_into_array

diff --git a/Userland/Libraries/LibJS/Runtime/ArrayPrototype.cpp b/Userland/Libraries/LibJS/Runtime/ArrayPrototype.cpp
index 02c2c0c1c3..311c1f9248 100644
--- a/Userland/Libraries/LibJS/Runtime/ArrayPrototype.cpp
+++ b/Userland/Libraries/LibJS/Runtime/ArrayPrototype.cpp
@@ -31,42 +31,43 @@ ArrayPrototype::ArrayPrototype(GlobalObject& global_object)
 void ArrayPrototype::initialize(GlobalObject& global_object)
 {
     auto& vm = this->vm();
     Array::initialize(global_object);
     u8 attr = Attribute::Writable | Attribute::Configurable;
 
     define_native_function(vm.names.filter, filter, 1, attr);
     define_native_function(vm.names.forEach, for_each, 1, attr);
     define_native_function(vm.names.map, map, 1, attr);
     define_native_function(vm.names.pop, pop, 0, attr);
     define_native_function(vm.names.push, push, 1, attr);
     define_native_function(vm.names.shift, shift, 0, attr);
     define_native_function(vm.names.toString, to_string, 0, attr);
     define_native_function(vm.names.toLocaleString, to_locale_string, 0, attr);
     define_native_function(vm.names.unshift, unshift, 1, attr);
     define_native_function(vm.names.join, join, 1, attr);
     define_native_function(vm.names.concat, concat, 1, attr);
     define_native_function(vm.names.slice, slice, 2, attr);
     define_native_function(vm.names.indexOf, index_of, 1, attr);
     define_native_function(vm.names.reduce, reduce, 1, attr);
     define_native_function(vm.names.reduceRight, reduce_right, 1, attr);
     define_native_function(vm.names.reverse, reverse, 0, attr);
     define_native_function(vm.names.sort, sort, 1, attr);
     define_native_function(vm.names.lastIndexOf, last_index_of, 1, attr);
     define_native_function(vm.names.includes, includes, 1, attr);
     define_native_function(vm.names.find, find, 1, attr);
     define_native_function(vm.names.findIndex, find_index, 1, attr);
     define_native_function(vm.names.some, some, 1, attr);
     define_native_function(vm.names.every, every, 1, attr);
     define_native_function(vm.names.splice, splice, 2, attr);
     define_native_function(vm.names.fill, fill, 1, attr);
     define_native_function(vm.names.values, values, 0, attr);
     define_native_function(vm.names.flat, flat, 0, attr);
+    define_native_function(vm.names.flatMap, flat_map, 1, attr);
     define_native_function(vm.names.at, at, 1, attr);
     define_native_function(vm.names.keys, keys, 0, attr);
 
     // Use define_property here instead of define_native_function so that
     // Object.is(Array.prototype[Symbol.iterator], Array.prototype.values)
     // evaluates to true
     // 23.1.3.33 Array.prototype [ @@iterator ] ( ), https://tc39.es/ecma262/#sec-array.prototype-@@iterator
     define_property(vm.well_known_symbol_iterator(), get(vm.names.values), attr);
 }
@@ -1273,55 +1274,97 @@ JS_DEFINE_NATIVE_FUNCTION(ArrayPrototype::keys)
     return ArrayIterator::create(global_object, this_object, Object::PropertyKind::Key);
 }
 
-static void recursive_array_flat(VM& vm, GlobalObject& global_object, Array& new_array, Object& array, double depth)
+// 23.1.3.10.1 FlattenIntoArray ( target, source, sourceLen, start, depth [ , mapperFunction [ , thisArg ] ] ), https://tc39.es/ecma262/#sec-flattenintoarray
+static size_t flatten_into_array(VM& vm, GlobalObject& global_object, Array& new_array, Object& array, size_t target_index, double depth, Function* mapper_func = {}, Value this_arg = {})
 {
+    VERIFY(!mapper_func || (!this_arg.is_empty() && depth == 1));
     auto array_length = length_of_array_like(global_object, array);
     if (vm.exception())
-        return;
+        return {};
 
     for (size_t j = 0; j < array_length; ++j) {
-        auto value = array.get(j);
+        auto value_exists = array.has_property(j);
         if (vm.exception())
-            return;
+            return {};
+
+        if (!value_exists)
+            continue;
+        auto value = array.get(j).value_or(js_undefined());
+        if (vm.exception())
+            return {};
+
+        if (mapper_func) {
+            value = vm.call(*mapper_func, this_arg, value, Value(j), &array);
+            if (vm.exception())
+                return {};
+        }
 
         if (depth > 0 && value.is_array(global_object)) {
-            recursive_array_flat(vm, global_object, new_array, value.as_array(), depth - 1);
+            target_index = flatten_into_array(vm, global_object, new_array, value.as_array(), target_index, depth - 1);
+            if (vm.exception())
+                return {};
             continue;
         }
         if (vm.exception())
-            return;
+            return {};
         if (!value.is_empty()) {
-            new_array.indexed_properties().append(value);
+            new_array.put(target_index, value);
             if (vm.exception())
-                return;
+                return {};
+
+            ++target_index;
         }
     }
+    return target_index;
 }
 
 // 23.1.3.10 Array.prototype.flat ( [ depth ] ), https://tc39.es/ecma262/#sec-array.prototype.flat
 JS_DEFINE_NATIVE_FUNCTION(ArrayPrototype::flat)
 {
     auto* this_object = vm.this_value(global_object).to_object(global_object);
     if (!this_object)
         return {};
 
     auto* new_array = Array::create(global_object);
 
     double depth = 1;
     if (vm.argument_count() > 0) {
         auto depth_argument = vm.argument(0);
         if (!depth_argument.is_undefined()) {
             auto depth_num = depth_argument.to_integer_or_infinity(global_object);
             if (vm.exception())
                 return {};
             depth = max(depth_num, 0.0);
         }
     }
 
-    recursive_array_flat(vm, global_object, *new_array, *this_object, depth);
+    flatten_into_array(vm, global_object, *new_array, *this_object, 0, depth);
+    if (vm.exception())
+        return {};
+    return new_array;
+}
+
+// 23.1.3.11 Array.prototype.flatMap ( mapperFunction [ , thisArg ] ), https://tc39.es/ecma262/#sec-array.prototype.flatmap
+JS_DEFINE_NATIVE_FUNCTION(ArrayPrototype::flat_map)
+{
+    auto* this_object = vm.this_value(global_object).to_object(global_object);
+    if (!this_object)
+        return {};
+
+    auto* mapper_function = callback_from_args(global_object, "flatMap");
+    if (!mapper_function)
+        return {};
+
+    auto this_argument = vm.argument(1);
+
+    // FIXME: Use ArraySpeciesCreate.
+    auto new_array = Array::create(global_object);
+
+    flatten_into_array(vm, global_object, *new_array, *this_object, 0, 1, mapper_function, this_argument);
     if (vm.exception())
         return {};
+
     return new_array;
 }
 
 // 1.1 Array.prototype.at ( index ), https://tc39.es/proposal-relative-indexing-method/#sec-array.prototype.at
diff --git a/Userland/Libraries/LibJS/Runtime/ArrayPrototype.h b/Userland/Libraries/LibJS/Runtime/ArrayPrototype.h
index 8bcceac0fc..4a01777496 100644
--- a/Userland/Libraries/LibJS/Runtime/ArrayPrototype.h
+++ b/Userland/Libraries/LibJS/Runtime/ArrayPrototype.h
@@ -22,33 +22,34 @@ public:
 private:
     JS_DECLARE_NATIVE_FUNCTION(filter);
     JS_DECLARE_NATIVE_FUNCTION(for_each);
     JS_DECLARE_NATIVE_FUNCTION(map);
     JS_DECLARE_NATIVE_FUNCTION(pop);
     JS_DECLARE_NATIVE_FUNCTION(push);
     JS_DECLARE_NATIVE_FUNCTION(shift);
     JS_DECLARE_NATIVE_FUNCTION(to_string);
     JS_DECLARE_NATIVE_FUNCTION(to_locale_string);
     JS_DECLARE_NATIVE_FUNCTION(unshift);
     JS_DECLARE_NATIVE_FUNCTION(join);
     JS_DECLARE_NATIVE_FUNCTION(concat);
     JS_DECLARE_NATIVE_FUNCTION(slice);
     JS_DECLARE_NATIVE_FUNCTION(index_of);
     JS_DECLARE_NATIVE_FUNCTION(reduce);
     JS_DECLARE_NATIVE_FUNCTION(reduce_right);
     JS_DECLARE_NATIVE_FUNCTION(reverse);
     JS_DECLARE_NATIVE_FUNCTION(sort);
     JS_DECLARE_NATIVE_FUNCTION(last_index_of);
     JS_DECLARE_NATIVE_FUNCTION(includes);
     JS_DECLARE_NATIVE_FUNCTION(find);
     JS_DECLARE_NATIVE_FUNCTION(find_index);
     JS_DECLARE_NATIVE_FUNCTION(some);
     JS_DECLARE_NATIVE_FUNCTION(every);
     JS_DECLARE_NATIVE_FUNCTION(splice);
     JS_DECLARE_NATIVE_FUNCTION(fill);
     JS_DECLARE_NATIVE_FUNCTION(values);
     JS_DECLARE_NATIVE_FUNCTION(flat);
+    JS_DECLARE_NATIVE_FUNCTION(flat_map);
     JS_DECLARE_NATIVE_FUNCTION(at);
     JS_DECLARE_NATIVE_FUNCTION(keys);
 };
 
 }
diff --git a/Userland/Libraries/LibJS/Runtime/CommonPropertyNames.h b/Userland/Libraries/LibJS/Runtime/CommonPropertyNames.h
index 795d0816b9..394b43ca26 100644
--- a/Userland/Libraries/LibJS/Runtime/CommonPropertyNames.h
+++ b/Userland/Libraries/LibJS/Runtime/CommonPropertyNames.h
@@ -12,304 +12,305 @@
 namespace JS {
 
 #define ENUMERATE_STANDARD_PROPERTY_NAMES(P) \
     P(BYTES_PER_ELEMENT)                     \
     P(BigInt)                                \
     P(Boolean)                               \
     P(E)                                     \
     P(EPSILON)                               \
     P(Infinity)                              \
     P(JSON)                                  \
     P(LN10)                                  \
     P(LN2)                                   \
     P(LOG10E)                                \
     P(LOG2E)                                 \
     P(MAX_SAFE_INTEGER)                      \
     P(MAX_VALUE)                             \
     P(MIN_SAFE_INTEGER)                      \
     P(MIN_VALUE)                             \
     P(Math)                                  \
     P(NEGATIVE_INFINITY)                     \
     P(NaN)                                   \
     P(Number)                                \
     P(PI)                                    \
     P(POSITIVE_INFINITY)                     \
     P(Proxy)                                 \
     P(Reflect)                               \
     P(RegExp)                                \
     P(SQRT1_2)                               \
     P(SQRT2)                                 \
     P(String)                                \
     P(Symbol)                                \
     P(UTC)                                   \
     P(abs)                                   \
     P(acos)                                  \
     P(acosh)                                 \
     P(add)                                   \
     P(all)                                   \
     P(allSettled)                            \
     P(anchor)                                \
     P(any)                                   \
     P(apply)                                 \
     P(arguments)                             \
     P(asIntN)                                \
     P(asUintN)                               \
     P(asin)                                  \
     P(asinh)                                 \
     P(assert)                                \
     P(assign)                                \
     P(at)                                    \
     P(atan)                                  \
     P(atan2)                                 \
     P(atanh)                                 \
     P(big)                                   \
     P(bind)                                  \
     P(blink)                                 \
     P(bold)                                  \
     P(buffer)                                \
     P(byteLength)                            \
     P(byteOffset)                            \
     P(call)                                  \
     P(callee)                                \
     P(cause)                                 \
     P(cbrt)                                  \
     P(ceil)                                  \
     P(charAt)                                \
     P(charCodeAt)                            \
     P(clear)                                 \
     P(clz32)                                 \
     P(concat)                                \
     P(configurable)                          \
     P(console)                               \
     P(construct)                             \
     P(constructor)                           \
     P(cos)                                   \
     P(cosh)                                  \
     P(count)                                 \
     P(countReset)                            \
     P(create)                                \
     P(debug)                                 \
     P(decodeURI)                             \
     P(decodeURIComponent)                    \
     P(defineProperties)                      \
     P(defineProperty)                        \
     P(deleteProperty)                        \
     P(deref)                                 \
     P(description)                           \
     P(done)                                  \
     P(dotAll)                                \
     P(encodeURI)                             \
     P(encodeURIComponent)                    \
     P(endsWith)                              \
     P(entries)                               \
     P(enumerable)                            \
     P(error)                                 \
     P(errors)                                \
     P(escape)                                \
     P(eval)                                  \
     P(every)                                 \
     P(exec)                                  \
     P(exp)                                   \
     P(expm1)                                 \
     P(fill)                                  \
     P(filter)                                \
     P(finally)                               \
     P(find)                                  \
     P(findIndex)                             \
     P(fixed)                                 \
     P(flags)                                 \
     P(flat)                                  \
+    P(flatMap)                               \
     P(floor)                                 \
     P(fontcolor)                             \
     P(fontsize)                              \
     P(forEach)                               \
     P(freeze)                                \
     P(from)                                  \
     P(fromCharCode)                          \
     P(fround)                                \
     P(gc)                                    \
     P(get)                                   \
     P(getBigInt64)                           \
     P(getBigUint64)                          \
     P(getDate)                               \
     P(getDay)                                \
     P(getFloat32)                            \
     P(getFloat64)                            \
     P(getFullYear)                           \
     P(getHours)                              \
     P(getInt8)                               \
     P(getInt16)                              \
     P(getInt32)                              \
     P(getMilliseconds)                       \
     P(getMinutes)                            \
     P(getMonth)                              \
     P(getOwnPropertyDescriptor)              \
     P(getOwnPropertyNames)                   \
     P(getOwnPropertySymbols)                 \
     P(getPrototypeOf)                        \
     P(getSeconds)                            \
     P(getTime)                               \
     P(getTimezoneOffset)                     \
     P(getUint8)                              \
     P(getUint16)                             \
     P(getUint32)                             \
     P(getUTCDate)                            \
     P(getUTCDay)                             \
     P(getUTCFullYear)                        \
     P(getUTCHours)                           \
     P(getUTCMilliseconds)                    \
     P(getUTCMinutes)                         \
     P(getUTCMonth)                           \
     P(getUTCSeconds)                         \
     P(getYear)                               \
     P(global)                                \
     P(globalThis)                            \
     P(groups)                                \
     P(has)                                   \
     P(hasOwn)                                \
     P(hasOwnProperty)                        \
     P(hypot)                                 \
     P(ignoreCase)                            \
     P(imul)                                  \
     P(includes)                              \
     P(index)                                 \
     P(indexOf)                               \
     P(info)                                  \
     P(input)                                 \
     P(is)                                    \
     P(isArray)                               \
     P(isExtensible)                          \
     P(isFinite)                              \
     P(isFrozen)                              \
     P(isInteger)                             \
     P(isNaN)                                 \
     P(isPrototypeOf)                         \
     P(isSafeInteger)                         \
     P(isSealed)                              \
     P(isView)                                \
     P(italics)                               \
     P(join)                                  \
     P(keyFor)                                \
     P(keys)                                  \
     P(lastIndex)                             \
     P(lastIndexOf)                           \
     P(length)                                \
     P(link)                                  \
     P(log)                                   \
     P(log1p)                                 \
     P(log2)                                  \
     P(log10)                                 \
     P(map)                                   \
     P(max)                                   \
     P(message)                               \
     P(min)                                   \
     P(multiline)                             \
     P(name)                                  \
     P(next)                                  \
     P(now)                                   \
     P(of)                                    \
     P(ownKeys)                               \
     P(padEnd)                                \
     P(padStart)                              \
     P(parse)                                 \
     P(parseFloat)                            \
     P(parseInt)                              \
     P(pop)                                   \
     P(pow)                                   \
     P(preventExtensions)                     \
     P(propertyIsEnumerable)                  \
     P(prototype)                             \
     P(proxy)                                 \
     P(push)                                  \
     P(race)                                  \
     P(random)                                \
     P(raw)                                   \
     P(reduce)                                \
     P(reduceRight)                           \
     P(reject)                                \
     P(repeat)                                \
     P(resolve)                               \
     P(reverse)                               \
     P(revocable)                             \
     P(revoke)                                \
     P(round)                                 \
     P(seal)                                  \
     P(set)                                   \
     P(setBigInt64)                           \
     P(setBigUint64)                          \
     P(setDate)                               \
     P(setFloat32)                            \
     P(setFloat64)                            \
     P(setFullYear)                           \
     P(setHours)                              \
     P(setInt8)                               \
     P(setInt16)                              \
     P(setInt32)                              \
     P(setMilliseconds)                       \
     P(setMinutes)                            \
     P(setMonth)                              \
     P(setPrototypeOf)                        \
     P(setSeconds)                            \
     P(setTime)                               \
     P(setUint8)                              \
     P(setUint16)                             \
     P(setUint32)                             \
     P(setUTCDate)                            \
     P(setUTCFullYear)                        \
     P(setUTCHours)                           \
     P(setUTCMilliseconds)                    \
     P(setUTCMinutes)                         \
     P(setUTCMonth)                           \
     P(setUTCSeconds)                         \
     P(setYear)                               \
     P(shift)                                 \
     P(sign)                                  \
     P(sin)                                   \
     P(sinh)                                  \
     P(size)                                  \
     P(slice)                                 \
     P(small)                                 \
     P(some)                                  \
     P(sort)                                  \
     P(source)                                \
     P(splice)                                \
     P(sqrt)                                  \
     P(startsWith)                            \
     P(sticky)                                \
     P(strike)                                \
     P(stringify)                             \
     P(sub)                                   \
     P(substr)                                \
     P(substring)                             \
     P(sup)                                   \
     P(tan)                                   \
     P(tanh)                                  \
     P(test)                                  \
     P(then)                                  \
     P(toDateString)                          \
     P(toGMTString)                           \
     P(toISOString)                           \
     P(toJSON)                                \
     P(toLocaleDateString)                    \
     P(toLocaleString)                        \
     P(toLocaleTimeString)                    \
     P(toLowerCase)                           \
     P(toString)                              \
     P(toTimeString)                          \
     P(toUpperCase)                           \
     P(toUTCString)                           \
     P(trace)                                 \
     P(trim)                                  \
     P(trimEnd)                               \
     P(trimLeft)                              \
     P(trimRight)                             \
     P(trimStart)                             \
     P(trunc)                                 \
     P(undefined)                             \
     P(unescape)                              \
     P(unicode)                               \
     P(unshift)                               \
     P(value)                                 \
     P(valueOf)                               \
     P(values)                                \
     P(warn)                                  \
     P(writable)
diff --git a/Userland/Libraries/LibJS/Tests/builtins/Array/Array.prototype.flatMap.js b/Userland/Libraries/LibJS/Tests/builtins/Array/Array.prototype.flatMap.js
new file mode 100644
index 0000000000..bb33d506f0
--- /dev/null
+++ b/Userland/Libraries/LibJS/Tests/builtins/Array/Array.prototype.flatMap.js
@@ -0,0 +1,71 @@
+test("length is 1", () => {
+    expect(Array.prototype.flatMap).toHaveLength(1);
+});
+
+describe("normal behavior", () => {
+    test("basic functionality", () => {
+        function identity(i) {
+            return i;
+        }
+
+        var array1 = [1, 2, [3, 4]];
+        var array2 = [1, 2, [3, 4, [5, 6]]];
+        expect(array1.flatMap(identity)).toEqual([1, 2, 3, 4]);
+        // only goes to depth 1
+        expect(array2.flatMap(identity)).toEqual([1, 2, 3, 4, [5, 6]]);
+    });
+
+    test("flattens return values", () => {
+        function double(i) {
+            return [i, 2 * i];
+        }
+
+        var array1 = [1, 2];
+        var array2 = [1, [3]];
+        expect(array1.flatMap(double)).toEqual([1, 2, 2, 4]);
+
+        // looks weird but it is correct
+        expect(array2.flatMap(double)).toEqual([1, 2, [3], 6]);
+    });
+
+    test("binds this value", () => {
+        let this_ = undefined;
+        function callable() {
+            this_ = this;
+        }
+        const this_arg = { "yak?": "always" };
+        [0].flatMap(callable, this_arg);
+        expect(this_).toEqual(this_arg);
+    });
+
+    test("gives secondary arguments", () => {
+        const found_values = [];
+        const found_indices = [];
+        const found_array_values = [];
+        const found_this_values = [];
+        function callable(val, index, obj) {
+            found_values.push(val);
+            found_indices.push(index);
+            found_array_values.push(obj);
+            found_this_values.push(this);
+        }
+        const this_arg = { "yak?": "always" };
+        const array = ["a", "b", "c"];
+        array.flatMap(callable, this_arg);
+
+        expect(found_values).toEqual(["a", "b", "c"]);
+        expect(found_indices).toEqual([0, 1, 2]);
+        expect(found_array_values).toEqual([array, array, array]);
+        expect(found_this_values).toEqual([this_arg, this_arg, this_arg]);
+    });
+
+    test("empty array means no calls", () => {
+        let called = false;
+        function callable() {
+            called = true;
+            throw "Should not be called";
+        }
+        [].flatMap(callable);
+        expect(called).toBeFalse();
+    });
+});
