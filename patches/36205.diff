commit 567e53ea581d783ec69459663c7727cd6449de0a
Merge: 6fd880890c ebd3a21002
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Thu Jul 15 09:32:26 2021 +0200

    Merge branch 'PHP-7.4' into PHP-8.0
    
    * PHP-7.4:
      Undef slot before destroying in unset_property

diff --git a/Zend/tests/unset_prop_recursion.phpt b/Zend/tests/unset_prop_recursion.phpt
new file mode 100644
index 0000000000..afb1929424
--- /dev/null
+++ b/Zend/tests/unset_prop_recursion.phpt
@@ -0,0 +1,65 @@
+--TEST--
+Unset property where unset will recursively access property again
+--FILE--
+<?php
+class Node {
+    public $parent = null;
+    public $children = [];
+    function insert(Node $node) {
+        $node->parent = $this;
+        $this->children[] = $node;
+    }
+    function __destruct() {
+        var_dump($this);
+        unset($this->children);
+    }
+}
+
+$a = new Node;
+$a->insert(new Node);
+$a->insert(new Node);
+?>
+--EXPECT--
+object(Node)#1 (2) {
+  ["parent"]=>
+  NULL
+  ["children"]=>
+  array(2) {
+    [0]=>
+    object(Node)#2 (2) {
+      ["parent"]=>
+      *RECURSION*
+      ["children"]=>
+      array(0) {
+      }
+    }
+    [1]=>
+    object(Node)#3 (2) {
+      ["parent"]=>
+      *RECURSION*
+      ["children"]=>
+      array(0) {
+      }
+    }
+  }
+}
+object(Node)#2 (2) {
+  ["parent"]=>
+  object(Node)#1 (2) {
+    ["parent"]=>
+    NULL
+  }
+  ["children"]=>
+  array(0) {
+  }
+}
+object(Node)#3 (2) {
+  ["parent"]=>
+  object(Node)#1 (2) {
+    ["parent"]=>
+    NULL
+  }
+  ["children"]=>
+  array(0) {
+  }
+}
diff --git a/Zend/zend_object_handlers.c b/Zend/zend_object_handlers.c
index 0fd36660cb..28d0077878 100644
--- a/Zend/zend_object_handlers.c
+++ b/Zend/zend_object_handlers.c
@@ -985,63 +985,65 @@ ZEND_API zval *zend_std_get_property_ptr_ptr(zend_object *zobj, zend_string *nam
 ZEND_API void zend_std_unset_property(zend_object *zobj, zend_string *name, void **cache_slot) /* {{{ */
 {
 	uintptr_t property_offset;
 	zend_property_info *prop_info = NULL;
 
 	property_offset = zend_get_property_offset(zobj->ce, name, (zobj->ce->__unset != NULL), cache_slot, &prop_info);
 
 	if (EXPECTED(IS_VALID_PROPERTY_OFFSET(property_offset))) {
 		zval *slot = OBJ_PROP(zobj, property_offset);
 
 		if (Z_TYPE_P(slot) != IS_UNDEF) {
 			if (UNEXPECTED(Z_ISREF_P(slot)) &&
 					(ZEND_DEBUG || ZEND_REF_HAS_TYPE_SOURCES(Z_REF_P(slot)))) {
 				if (prop_info) {
 					ZEND_REF_DEL_TYPE_SOURCE(Z_REF_P(slot), prop_info);
 				}
 			}
-			zval_ptr_dtor(slot);
+			zval tmp;
+			ZVAL_COPY_VALUE(&tmp, slot);
 			ZVAL_UNDEF(slot);
+			zval_ptr_dtor(&tmp);
 			if (zobj->properties) {
 				HT_FLAGS(zobj->properties) |= HASH_FLAG_HAS_EMPTY_IND;
 			}
 			return;
 		}
 		if (UNEXPECTED(Z_PROP_FLAG_P(slot) == IS_PROP_UNINIT)) {
 			/* Reset the IS_PROP_UNINIT flag, if it exists and bypass __unset(). */
 			Z_PROP_FLAG_P(slot) = 0;
 			return;
 		}
 	} else if (EXPECTED(IS_DYNAMIC_PROPERTY_OFFSET(property_offset))
 	 && EXPECTED(zobj->properties != NULL)) {
 		if (UNEXPECTED(GC_REFCOUNT(zobj->properties) > 1)) {
 			if (EXPECTED(!(GC_FLAGS(zobj->properties) & IS_ARRAY_IMMUTABLE))) {
 				GC_DELREF(zobj->properties);
 			}
 			zobj->properties = zend_array_dup(zobj->properties);
 		}
 		if (EXPECTED(zend_hash_del(zobj->properties, name) != FAILURE)) {
 			return;
 		}
 	} else if (UNEXPECTED(EG(exception))) {
 		return;
 	}
 
 	/* magic unset */
 	if (zobj->ce->__unset) {
 		uint32_t *guard = zend_get_property_guard(zobj, name);
 		if (!((*guard) & IN_UNSET)) {
 			/* have unseter - try with it! */
 			(*guard) |= IN_UNSET; /* prevent circular unsetting */
 			zend_std_call_unsetter(zobj, name);
 			(*guard) &= ~IN_UNSET;
 		} else if (UNEXPECTED(IS_WRONG_PROPERTY_OFFSET(property_offset))) {
 			/* Trigger the correct error */
 			zend_wrong_offset(zobj->ce, name);
 			ZEND_ASSERT(EG(exception));
 			return;
 		} else {
 			/* Nothing to do: The property already does not exist. */
 		}
 	}
 }
 /* }}} */
