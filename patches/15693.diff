commit 4972d55fcddee5c51f393747848c87fa54a64a78
Author: Dan Bloomberg <dan.bloomberg@gmail.com>
Date:   Thu Jun 27 11:21:09 2019 -0700

    Small cleanup; use morph sequence function instead of brick function

diff --git a/src/pageseg.c b/src/pageseg.c
index 5f1e66d..c27bc69 100644
--- a/src/pageseg.c
+++ b/src/pageseg.c
@@ -381,85 +381,85 @@ l_int32  w, h, empty;
 PIX     *pix1, *pix2, *pixvws, *pixd;
 
     PROCNAME("pixGenTextlineMask");
 
     if (ptlfound) *ptlfound = 0;
     if (!ppixvws)
         return (PIX *)ERROR_PTR("&pixvws not defined", procName, NULL);
     *ppixvws = NULL;
     if (!pixs || pixGetDepth(pixs) != 1)
         return (PIX *)ERROR_PTR("pixs undefined or not 1 bpp", procName, NULL);
     pixGetDimensions(pixs, &w, &h, NULL);
     if (w < MinWidth || h < MinHeight) {
         L_ERROR("pix too small: w = %d, h = %d\n", procName, w, h);
         return NULL;
     }
 
         /* First we need a vertical whitespace mask.  Invert the image. */
     pix1 = pixInvert(NULL, pixs);
 
         /* The whitespace mask will break textlines where there
          * is a large amount of white space below or above.
          * This can be prevented by identifying regions of the
          * inverted image that have large horizontal extent (bigger than
          * the separation between columns) and significant
          * vertical extent (bigger than the separation between
          * textlines), and subtracting this from the bg. */
     pix2 = pixMorphCompSequence(pix1, "o80.60", 0);
     pixSubtract(pix1, pix1, pix2);
     if (pixadb) pixaAddPix(pixadb, pix1, L_COPY);
     pixDestroy(&pix2);
 
         /* Identify vertical whitespace by opening the remaining bg.
          * o5.1 removes thin vertical bg lines and o1.200 extracts
          * long vertical bg lines. */
     pixvws = pixMorphCompSequence(pix1, "o5.1 + o1.200", 0);
     *ppixvws = pixvws;
     if (pixadb) pixaAddPix(pixadb, pixvws, L_COPY);
     pixDestroy(&pix1);
 
         /* Three steps to getting text line mask:
          *   (1) close the characters and words in the textlines
          *   (2) open the vertical whitespace corridors back up
          *   (3) small opening to remove noise    */
-    pix1 = pixCloseSafeBrick(NULL, pixs, 30, 1);
+    pix1 = pixMorphSequence(pixs, "c30.1", 0);
     if (pixadb) pixaAddPix(pixadb, pix1, L_COPY);
     pixd = pixSubtract(NULL, pix1, pixvws);
     pixOpenBrick(pixd, pixd, 3, 3);
     if (pixadb) pixaAddPix(pixadb, pixd, L_COPY);
     pixDestroy(&pix1);
 
         /* Check if text line mask is empty */
     if (ptlfound) {
         pixZero(pixd, &empty);
         if (!empty)
             *ptlfound = 1;
     }
 
     return pixd;
 }
 
 
 /*------------------------------------------------------------------*
  *                       Textblock extraction                       *
  *------------------------------------------------------------------*/
 /*!
  * \brief   pixGenTextblockMask()
  *
  * \param[in]    pixs     1 bpp, textline mask, assumed to be 150 to 200 ppi
  * \param[in]    pixvws   vertical white space mask
  * \param[in]    pixadb   input for collecting debug pix; use NULL to skip
  * \return  pixd textblock mask, or NULL on error
  *
  * <pre>
  * Notes:
  *      (1) Both the input masks (textline and vertical white space) and
  *          the returned textblock mask are at the same resolution.
  *      (2) This is not intended to work on small thumbnails.  The
  *          dimensions of pixs must be at least MinWidth x MinHeight.
  *      (3) The result is somewhat noisy, in that small "blocks" of
  *          text may be included.  These can be removed by post-processing,
  *          using, e.g.,
  *             pixSelectBySize(pix, 60, 60, 4, L_SELECT_IF_EITHER,
  *                             L_SELECT_IF_GTE, NULL);
  * </pre>
  */
diff --git a/src/utils1.c b/src/utils1.c
index 578ba54..86359cc 100644
--- a/src/utils1.c
+++ b/src/utils1.c
@@ -874,44 +874,44 @@ getLeptonicaVersion()
 {
 size_t  bufsize = 100;
 
     char *version = (char *)LEPT_CALLOC(bufsize, sizeof(char));
 
 #ifdef _MSC_VER
   #ifdef _USRDLL
     char dllStr[] = "DLL";
   #else
     char dllStr[] = "LIB";
   #endif
   #ifdef _DEBUG
     char debugStr[] = "Debug";
   #else
     char debugStr[] = "Release";
   #endif
   #ifdef _M_IX86
     char bitStr[] = " x86";
   #elif _M_X64
     char bitStr[] = " x64";
   #else
     char bitStr[] = "";
   #endif
     snprintf(version, bufsize, "leptonica-%d.%d.%d (%s, %s) [MSC v.%d %s %s%s]",
            LIBLEPT_MAJOR_VERSION, LIBLEPT_MINOR_VERSION, LIBLEPT_PATCH_VERSION,
            __DATE__, __TIME__, _MSC_VER, dllStr, debugStr, bitStr);
 
 #else
 
     snprintf(version, bufsize, "leptonica-%d.%d.%d", LIBLEPT_MAJOR_VERSION,
              LIBLEPT_MINOR_VERSION, LIBLEPT_PATCH_VERSION);
 
 #endif   /* _MSC_VER */
     return version;
 }
 
 
 /*---------------------------------------------------------------------*
  *                           Timing procs                              *
  *---------------------------------------------------------------------*/
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__Fuchsia__)
 
 #include <sys/time.h>
 #include <sys/resource.h>
@@ -999,16 +999,51 @@ l_getCurrentTime(l_int32  *sec,
                  l_int32  *usec)
 {
 struct timeval tv;
 
     gettimeofday(&tv, NULL);
     if (sec) *sec = (l_int32)tv.tv_sec;
     if (usec) *usec = (l_int32)tv.tv_usec;
     return;
 }
 
+#elif defined(__Fuchsia__) /* resource.h not implemented on Fuchsia. */
+
+    /* Timer functions are used for testing and debugging, and
+     * are stubbed out.  If they are needed in the future, they
+     * can be implemented in Fuchsia using the zircon syscall
+     * zx_object_get_info() in ZX_INFOR_THREAD_STATS mode.  */
+
+void
+startTimer(void)
+{
+}
+
+l_float32
+stopTimer(void)
+{
+    return 0.0;
+}
+
+L_TIMER
+startTimerNested(void)
+{
+    return NULL;
+}
+
+l_float32
+stopTimerNested(L_TIMER  rusage_start)
+{
+    return 0.0;
+}
+
+void
+l_getCurrentTime(l_int32  *sec,
+                 l_int32  *usec)
+{
+}
 
 #else   /* _WIN32 : resource.h not implemented under Windows */
 
     /* Note: if division by 10^7 seems strange, the time is expressed
      * as the number of 100-nanosecond intervals that have elapsed
      * since 12:00 A.M. January 1, 1601.  */
