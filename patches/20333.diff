commit 5f92a085cc50718aa921ba1139f6cc576deb68fa
Author: Tyson Andre <tysonandre775@hotmail.com>
Date:   Sun Jan 26 13:05:34 2020 -0500

    Convert ZEND_ECHO operand to string after sccp
    
    And filter out echoes of the empty string (e.g. false/null)
    
    Split out of #5097 (on GitHub)
    
    Closes GH-5118

diff --git a/ext/opcache/Optimizer/zend_optimizer.c b/ext/opcache/Optimizer/zend_optimizer.c
index 84d4c61831..30743fd7ba 100644
--- a/ext/opcache/Optimizer/zend_optimizer.c
+++ b/ext/opcache/Optimizer/zend_optimizer.c
@@ -231,136 +231,151 @@ static inline uint32_t alloc_cache_slots(zend_op_array *op_array, uint32_t num)
 int zend_optimizer_update_op1_const(zend_op_array *op_array,
                                     zend_op       *opline,
                                     zval          *val)
 {
 	switch (opline->opcode) {
 		case ZEND_OP_DATA:
 			switch ((opline-1)->opcode) {
 				case ZEND_ASSIGN_OBJ_REF:
 				case ZEND_ASSIGN_STATIC_PROP_REF:
 					return 0;
 			}
 			opline->op1.constant = zend_optimizer_add_literal(op_array, val);
 			break;
 		case ZEND_FREE:
 		case ZEND_CHECK_VAR:
 			MAKE_NOP(opline);
 			zval_ptr_dtor_nogc(val);
 			return 1;
 		case ZEND_SEND_VAR_EX:
 		case ZEND_SEND_FUNC_ARG:
 		case ZEND_FETCH_DIM_W:
 		case ZEND_FETCH_DIM_RW:
 		case ZEND_FETCH_DIM_FUNC_ARG:
 		case ZEND_FETCH_DIM_UNSET:
 		case ZEND_FETCH_LIST_W:
 		case ZEND_ASSIGN_DIM:
 		case ZEND_RETURN_BY_REF:
 		case ZEND_INSTANCEOF:
 		case ZEND_MAKE_REF:
 			return 0;
 		case ZEND_CATCH:
 			REQUIRES_STRING(val);
 			drop_leading_backslash(val);
 			opline->op1.constant = zend_optimizer_add_literal(op_array, val);
 			opline->extended_value = alloc_cache_slots(op_array, 1) | (opline->extended_value & ZEND_LAST_CATCH);
 			zend_optimizer_add_literal_string(op_array, zend_string_tolower(Z_STR_P(val)));
 			break;
 		case ZEND_DEFINED:
 			REQUIRES_STRING(val);
 			drop_leading_backslash(val);
 			opline->op1.constant = zend_optimizer_add_literal(op_array, val);
 			opline->extended_value = alloc_cache_slots(op_array, 1);
 			zend_optimizer_add_literal_string(op_array, zend_string_tolower(Z_STR_P(val)));
 			break;
 		case ZEND_NEW:
 			REQUIRES_STRING(val);
 			drop_leading_backslash(val);
 			opline->op1.constant = zend_optimizer_add_literal(op_array, val);
 			opline->op2.num = alloc_cache_slots(op_array, 1);
 			zend_optimizer_add_literal_string(op_array, zend_string_tolower(Z_STR_P(val)));
 			break;
 		case ZEND_INIT_STATIC_METHOD_CALL:
 			REQUIRES_STRING(val);
 			drop_leading_backslash(val);
 			opline->op1.constant = zend_optimizer_add_literal(op_array, val);
 			if (opline->op2_type != IS_CONST) {
 				opline->result.num = alloc_cache_slots(op_array, 1);
 			}
 			zend_optimizer_add_literal_string(op_array, zend_string_tolower(Z_STR_P(val)));
 			break;
 		case ZEND_FETCH_CLASS_CONSTANT:
 			REQUIRES_STRING(val);
 			drop_leading_backslash(val);
 			opline->op1.constant = zend_optimizer_add_literal(op_array, val);
 			if (opline->op2_type != IS_CONST) {
 				opline->extended_value = alloc_cache_slots(op_array, 1);
 			}
 			zend_optimizer_add_literal_string(op_array, zend_string_tolower(Z_STR_P(val)));
 			break;
 		case ZEND_ASSIGN_OP:
 		case ZEND_ASSIGN_DIM_OP:
 		case ZEND_ASSIGN_OBJ_OP:
 			break;
 		case ZEND_ASSIGN_STATIC_PROP_OP:
 		case ZEND_ASSIGN_STATIC_PROP:
 		case ZEND_ASSIGN_STATIC_PROP_REF:
 		case ZEND_FETCH_STATIC_PROP_R:
 		case ZEND_FETCH_STATIC_PROP_W:
 		case ZEND_FETCH_STATIC_PROP_RW:
 		case ZEND_FETCH_STATIC_PROP_IS:
 		case ZEND_FETCH_STATIC_PROP_UNSET:
 		case ZEND_FETCH_STATIC_PROP_FUNC_ARG:
 		case ZEND_UNSET_STATIC_PROP:
 		case ZEND_ISSET_ISEMPTY_STATIC_PROP:
 		case ZEND_PRE_INC_STATIC_PROP:
 		case ZEND_PRE_DEC_STATIC_PROP:
 		case ZEND_POST_INC_STATIC_PROP:
 		case ZEND_POST_DEC_STATIC_PROP:
 			TO_STRING_NOWARN(val);
 			opline->op1.constant = zend_optimizer_add_literal(op_array, val);
 			if (opline->op2_type == IS_CONST && (opline->extended_value & ~ZEND_FETCH_OBJ_FLAGS) + sizeof(void*) == op_array->cache_size) {
 				op_array->cache_size += sizeof(void *);
 			} else {
 				opline->extended_value = alloc_cache_slots(op_array, 3) | (opline->extended_value & ZEND_FETCH_OBJ_FLAGS);
 			}
 			break;
 		case ZEND_SEND_VAR:
 			opline->opcode = ZEND_SEND_VAL;
 			opline->op1.constant = zend_optimizer_add_literal(op_array, val);
 			break;
 		case ZEND_SEPARATE:
 		case ZEND_SEND_VAR_NO_REF:
 		case ZEND_SEND_VAR_NO_REF_EX:
 			return 0;
 		case ZEND_VERIFY_RETURN_TYPE:
 			/* This would require a non-local change.
 			 * zend_optimizer_replace_by_const() supports this. */
 			return 0;
 		case ZEND_CASE:
 		case ZEND_FETCH_LIST_R:
 		case ZEND_COPY_TMP:
 			return 0;
+		case ZEND_ECHO:
+		{
+			zval zv;
+			if (Z_TYPE_P(val) != IS_STRING && zend_optimizer_eval_cast(&zv, IS_STRING, val) == SUCCESS) {
+				zval_ptr_dtor_nogc(val);
+				val = &zv;
+			}
+			opline->op1.constant = zend_optimizer_add_literal(op_array, val);
+			if (Z_TYPE_P(val) == IS_STRING && Z_STRLEN_P(val) == 0) {
+				MAKE_NOP(opline);
+			}
+			/* TODO: In a subsequent pass, *after* this step and compacting nops, combine consecutive ZEND_ECHOs using the block information from ssa->cfg */
+			/* (e.g. for ext/opcache/tests/opt/sccp_010.phpt) */
+			break;
+		}
 		case ZEND_CONCAT:
 		case ZEND_FAST_CONCAT:
 		case ZEND_FETCH_R:
 		case ZEND_FETCH_W:
 		case ZEND_FETCH_RW:
 		case ZEND_FETCH_IS:
 		case ZEND_FETCH_UNSET:
 		case ZEND_FETCH_FUNC_ARG:
 			TO_STRING_NOWARN(val);
 			if (opline->opcode == ZEND_CONCAT && opline->op2_type == IS_CONST) {
 				opline->opcode = ZEND_FAST_CONCAT;
 			}
 			/* break missing intentionally */
 		default:
 			opline->op1.constant = zend_optimizer_add_literal(op_array, val);
 			break;
 	}
 
 	opline->op1_type = IS_CONST;
 	if (Z_TYPE(ZEND_OP1_LITERAL(opline)) == IS_STRING) {
 		zend_string_hash_val(Z_STR(ZEND_OP1_LITERAL(opline)));
 	}
 	return 1;
 }
diff --git a/ext/opcache/tests/opt/sccp_002.phpt b/ext/opcache/tests/opt/sccp_002.phpt
index 0fd10f2ac5..fd2b373d73 100644
--- a/ext/opcache/tests/opt/sccp_002.phpt
+++ b/ext/opcache/tests/opt/sccp_002.phpt
@@ -1,37 +1,37 @@
 --TEST--
 SCCP 002: Conditional Constant Propagation of non-escaping array elements
 --INI--
 opcache.enable=1
 opcache.enable_cli=1
 opcache.optimization_level=-1
 opcache.opt_debug_level=0x20000
 opcache.preload=
 --SKIPIF--
 <?php require_once('skipif.inc'); ?>
 --FILE--
 <?php
 function foo(int $x) {
 	$a = [$x];
 	$i = 1;
 	$c = $i < 2;
 	if ($c) {
 		$k = 2 * $i;
 		$a[$k] = $i;
 		echo $a[$k];
 	}
 	echo $a[2];
 }
 ?>
 --EXPECTF--
 $_main: ; (lines=1, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; %ssccp_002.php:1-14
 L0 (14):    RETURN int(1)
 
 foo: ; (lines=4, args=1, vars=1, tmps=0)
     ; (after optimizer)
     ; %ssccp_002.php:2-12
 L0 (2):     CV0($x) = RECV 1
-L1 (9):     ECHO int(1)
-L2 (11):    ECHO int(1)
+L1 (9):     ECHO string("1")
+L2 (11):    ECHO string("1")
 L3 (12):    RETURN null
diff --git a/ext/opcache/tests/opt/sccp_003.phpt b/ext/opcache/tests/opt/sccp_003.phpt
index 282a5788e6..50ed9eb759 100644
--- a/ext/opcache/tests/opt/sccp_003.phpt
+++ b/ext/opcache/tests/opt/sccp_003.phpt
@@ -1,36 +1,36 @@
 --TEST--
 SCCP 003: Conditional Constant Propagation of non-escaping array elements
 --INI--
 opcache.enable=1
 opcache.enable_cli=1
 opcache.optimization_level=-1
 opcache.opt_debug_level=0x20000
 opcache.preload=
 --SKIPIF--
 <?php require_once('skipif.inc'); ?>
 --FILE--
 <?php
 function foo() {
 	$a = [1,2,3];
 	$i = 1;
 	$c = $i < 2;
 	if ($c) {
 		$k = 2 * $i;
 		$a[$k] = $i;
 		echo $a[$k];
 	}
 	echo $a[2];
 }
 ?>
 --EXPECTF--
 $_main: ; (lines=1, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; %ssccp_003.php:1-14
 L0 (14):    RETURN int(1)
 
 foo: ; (lines=3, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; %ssccp_003.php:2-12
-L0 (9):     ECHO int(1)
-L1 (11):    ECHO int(1)
+L0 (9):     ECHO string("1")
+L1 (11):    ECHO string("1")
 L2 (12):    RETURN null
diff --git a/ext/opcache/tests/opt/sccp_004.phpt b/ext/opcache/tests/opt/sccp_004.phpt
index d82212e0ef..495499f884 100644
--- a/ext/opcache/tests/opt/sccp_004.phpt
+++ b/ext/opcache/tests/opt/sccp_004.phpt
@@ -1,40 +1,40 @@
 --TEST--
 SCCP 004: Conditional Constant Propagation of non-escaping array elements
 --INI--
 opcache.enable=1
 opcache.enable_cli=1
 opcache.optimization_level=-1
 opcache.opt_debug_level=0x20000
 opcache.preload=
 --SKIPIF--
 <?php require_once('skipif.inc'); ?>
 --FILE--
 <?php
 function foo(int $x) {
 	$a = [1,2,3];
 	$a[2] = $x;
 	$i = 1;
 	$c = $i < 2;
 	if ($c) {
 		$k = 2 * $i;
 		$a[$k] = $i;
 //		$a[$k]++;
 		echo isset($a[$k]);
 //		$a[$k] += 5;
 	}
 	echo $a[2];
 }
 ?>
 --EXPECTF--
 $_main: ; (lines=1, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; %ssccp_004.php:1-17
 L0 (17):    RETURN int(1)
 
 foo: ; (lines=4, args=1, vars=1, tmps=0)
     ; (after optimizer)
     ; %ssccp_004.php:2-15
 L0 (2):     CV0($x) = RECV 1
-L1 (11):    ECHO bool(true)
-L2 (14):    ECHO int(1)
+L1 (11):    ECHO string("1")
+L2 (14):    ECHO string("1")
 L3 (15):    RETURN null
diff --git a/ext/opcache/tests/opt/sccp_005.phpt b/ext/opcache/tests/opt/sccp_005.phpt
index 7fbb062922..1ff0d4e4ae 100644
--- a/ext/opcache/tests/opt/sccp_005.phpt
+++ b/ext/opcache/tests/opt/sccp_005.phpt
@@ -1,29 +1,29 @@
 --TEST--
 SCCP 005: Conditional Constant Propagation of non-escaping array elements
 --INI--
 opcache.enable=1
 opcache.enable_cli=1
 opcache.optimization_level=-1
 opcache.opt_debug_level=0x20000
 opcache.preload=
 --SKIPIF--
 <?php require_once('skipif.inc'); ?>
 --FILE--
 <?php
 function foo(int $x) {
 	$a = [1,2,$x];
 	echo $a[1];
 }
 ?>
 --EXPECTF--
 $_main: ; (lines=1, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; %ssccp_005.php:1-7
 L0 (7):     RETURN int(1)
 
 foo: ; (lines=3, args=1, vars=1, tmps=0)
     ; (after optimizer)
     ; %ssccp_005.php:2-5
 L0 (2):     CV0($x) = RECV 1
-L1 (4):     ECHO int(2)
+L1 (4):     ECHO string("2")
 L2 (5):     RETURN null
diff --git a/ext/opcache/tests/opt/sccp_007.phpt b/ext/opcache/tests/opt/sccp_007.phpt
index 82feb04e22..c502a5c6be 100644
--- a/ext/opcache/tests/opt/sccp_007.phpt
+++ b/ext/opcache/tests/opt/sccp_007.phpt
@@ -1,33 +1,33 @@
 --TEST--
 SCCP 007: Conditional Constant Propagation of non-escaping array elements
 --INI--
 opcache.enable=1
 opcache.enable_cli=1
 opcache.optimization_level=-1
 opcache.opt_debug_level=0x20000
 opcache.preload=
 --SKIPIF--
 <?php require_once('skipif.inc'); ?>
 --FILE--
 <?php
 function foo(int $x) {
 	if ($x) {
 		$a = [0,1];
 	} else {
 		$a = [0,2];
 	}
 	echo $a[0];
 }
 ?>
 --EXPECTF--
 $_main: ; (lines=1, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; %ssccp_007.php:1-11
 L0 (11):    RETURN int(1)
 
 foo: ; (lines=3, args=1, vars=1, tmps=0)
     ; (after optimizer)
     ; %ssccp_007.php:2-9
 L0 (2):     CV0($x) = RECV 1
-L1 (8):     ECHO int(0)
+L1 (8):     ECHO string("0")
 L2 (9):     RETURN null
diff --git a/ext/opcache/tests/opt/sccp_009.phpt b/ext/opcache/tests/opt/sccp_009.phpt
index 1b049810c1..47612cdb29 100644
--- a/ext/opcache/tests/opt/sccp_009.phpt
+++ b/ext/opcache/tests/opt/sccp_009.phpt
@@ -1,30 +1,30 @@
 --TEST--
 SCCP 009: Conditional Constant Propagation of non-escaping array elements
 --INI--
 opcache.enable=1
 opcache.enable_cli=1
 opcache.optimization_level=-1
 opcache.opt_debug_level=0x20000
 opcache.preload=
 --SKIPIF--
 <?php require_once('skipif.inc'); ?>
 --FILE--
 <?php
 function foo(int $x) {
 	$a[0] = $x;
 	$a[1] = 2;
 	echo $a[1];
 }
 ?>
 --EXPECTF--
 $_main: ; (lines=1, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; %ssccp_009.php:1-8
 L0 (8):     RETURN int(1)
 
 foo: ; (lines=3, args=1, vars=1, tmps=0)
     ; (after optimizer)
     ; %ssccp_009.php:2-6
 L0 (2):     CV0($x) = RECV 1
-L1 (5):     ECHO int(2)
+L1 (5):     ECHO string("2")
 L2 (6):     RETURN null
diff --git a/ext/opcache/tests/opt/sccp_010.phpt b/ext/opcache/tests/opt/sccp_010.phpt
index e88bf579f7..a2e9945c7f 100644
--- a/ext/opcache/tests/opt/sccp_010.phpt
+++ b/ext/opcache/tests/opt/sccp_010.phpt
@@ -1,37 +1,37 @@
 --TEST--
 SCCP 010: Conditional Constant Propagation of non-escaping object properties
 --INI--
 opcache.enable=1
 opcache.enable_cli=1
 opcache.optimization_level=-1
 opcache.opt_debug_level=0x20000
 opcache.preload=
 --SKIPIF--
 <?php require_once('skipif.inc'); ?>
 --FILE--
 <?php
 function foo() {
     $o = new stdClass();
     $o->foo = 0;
 	$i = 1;
 	$c = $i < 2;
 	if ($c) {
 		$k = 2 * $i;
 		$o->foo = $i;
 		echo $o->foo;
 	}
 	echo $o->foo;
 }
 ?>
 --EXPECTF--
 $_main: ; (lines=1, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; %ssccp_010.php:1-15
 L0 (15):    RETURN int(1)
 
 foo: ; (lines=3, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; %ssccp_010.php:2-13
-L0 (10):    ECHO int(1)
-L1 (12):    ECHO int(1)
+L0 (10):    ECHO string("1")
+L1 (12):    ECHO string("1")
 L2 (13):    RETURN null
diff --git a/ext/opcache/tests/opt/sccp_011.phpt b/ext/opcache/tests/opt/sccp_011.phpt
index 281e3dca2e..adb2c0a363 100644
--- a/ext/opcache/tests/opt/sccp_011.phpt
+++ b/ext/opcache/tests/opt/sccp_011.phpt
@@ -1,36 +1,36 @@
 --TEST--
 SCCP 011: Conditional Constant Propagation of non-escaping object properties
 --INI--
 opcache.enable=1
 opcache.enable_cli=1
 opcache.optimization_level=-1
 opcache.opt_debug_level=0x20000
 opcache.preload=
 --SKIPIF--
 <?php require_once('skipif.inc'); ?>
 --FILE--
 <?php
 function foo(int $x) {
 	$o = new stdClass;
 	if ($x) {
 		$o->foo = 0;
 		$o->bar = 1;
 	} else {
 		$o->foo = 0;
 		$o->bar = 2;
 	}
 	echo $o->foo;
 }
 ?>
 --EXPECTF--
 $_main: ; (lines=1, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; %ssccp_011.php:1-14
 L0 (14):    RETURN int(1)
 
 foo: ; (lines=3, args=1, vars=1, tmps=0)
     ; (after optimizer)
     ; %ssccp_011.php:2-12
 L0 (2):     CV0($x) = RECV 1
-L1 (11):    ECHO int(0)
+L1 (11):    ECHO string("0")
 L2 (12):    RETURN null
diff --git a/ext/opcache/tests/opt/sccp_012.phpt b/ext/opcache/tests/opt/sccp_012.phpt
index 5d2f3e9a01..0e3b872e0c 100644
--- a/ext/opcache/tests/opt/sccp_012.phpt
+++ b/ext/opcache/tests/opt/sccp_012.phpt
@@ -1,39 +1,39 @@
 --TEST--
 SCCP 012: Conditional Constant Propagation of non-escaping object properties
 --INI--
 opcache.enable=1
 opcache.enable_cli=1
 opcache.optimization_level=-1
 opcache.opt_debug_level=0x20000
 opcache.preload=
 --SKIPIF--
 <?php require_once('skipif.inc'); ?>
 --FILE--
 <?php
 function foo() {
     $o = new stdClass();
     $o->foo = 0;
 	$i = 1;
 	$c = $i < 2;
 	if ($c) {
 		$k = 2 * $i;
 		$o->foo = $i;
 		echo $o->foo;
 	}
 	$o->foo += 2;
 	$o->foo++;
 	echo $o->foo;
 }
 ?>
 --EXPECTF--
 $_main: ; (lines=1, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; %ssccp_012.php:1-17
 L0 (17):    RETURN int(1)
 
 foo: ; (lines=3, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; %ssccp_012.php:2-15
-L0 (10):    ECHO int(1)
-L1 (14):    ECHO int(4)
+L0 (10):    ECHO string("1")
+L1 (14):    ECHO string("4")
 L2 (15):    RETURN null
diff --git a/ext/opcache/tests/opt/sccp_022.phpt b/ext/opcache/tests/opt/sccp_022.phpt
index 40c9df5971..6a6bfbfec9 100644
--- a/ext/opcache/tests/opt/sccp_022.phpt
+++ b/ext/opcache/tests/opt/sccp_022.phpt
@@ -1,40 +1,40 @@
 --TEST--
 SCCP 022: Invalid types
 --INI--
 opcache.enable=1
 opcache.enable_cli=1
 opcache.optimization_level=-1
 opcache.opt_debug_level=0x20000
 opcache.preload=
 --SKIPIF--
 <?php require_once('skipif.inc'); ?>
 --FILE--
 <?php
 function foo(int $x) {
 	$a[0] = $x;
 	$a[1] = 5;
 	echo $a[1];
 	$a->foo = 5;
 	echo $a[1];
 }
 ?>
 --EXPECTF--
 $_main: ; (lines=1, args=0, vars=0, tmps=0)
     ; (after optimizer)
     ; %ssccp_022.php:1-10
 L0 (10):    RETURN int(1)
 
 foo: ; (lines=11, args=1, vars=2, tmps=1)
     ; (after optimizer)
     ; %ssccp_022.php:2-8
 L0 (2):     CV0($x) = RECV 1
 L1 (3):     ASSIGN_DIM CV1($a) int(0)
 L2 (3):     OP_DATA CV0($x)
 L3 (4):     ASSIGN_DIM CV1($a) int(1)
 L4 (4):     OP_DATA int(5)
-L5 (5):     ECHO int(5)
+L5 (5):     ECHO string("5")
 L6 (6):     ASSIGN_OBJ CV1($a) string("foo")
 L7 (6):     OP_DATA int(5)
 L8 (7):     T2 = FETCH_DIM_R CV1($a) int(1)
 L9 (7):     ECHO T2
 L10 (8):    RETURN null
diff --git a/ext/opcache/tests/opt/sccp_031.phpt b/ext/opcache/tests/opt/sccp_031.phpt
new file mode 100644
index 0000000000..0f4ff184bd
--- /dev/null
+++ b/ext/opcache/tests/opt/sccp_031.phpt
@@ -0,0 +1,36 @@
+--TEST--
+SCCP 031: Echo optimizations
+--INI--
+opcache.enable=1
+opcache.enable_cli=1
+opcache.optimization_level=-1
+opcache.opt_debug_level=0x20000
+opcache.preload=
+--SKIPIF--
+<?php require_once('skipif.inc'); ?>
+--FILE--
+<?php
+function foo() {
+	$k = 0;
+	$a = [null];
+	echo isset($a[$k]);
+	echo "b";
+	echo isset($a[$k+1]);
+	echo "c";
+	echo $a[$k];
+	echo $a; // Should not be optimized
+}
+?>
+--EXPECTF--
+$_main: ; (lines=1, args=0, vars=0, tmps=0)
+    ; (after optimizer)
+    ; %ssccp_031.php:1-13
+L0 (13):    RETURN int(1)
+
+foo: ; (lines=4, args=0, vars=0, tmps=0)
+    ; (after optimizer)
+    ; %s_031.php:2-11
+L0 (6):     ECHO string("b")
+L1 (8):     ECHO string("c")
+L2 (10):    ECHO array(...)
+L3 (11):    RETURN null
