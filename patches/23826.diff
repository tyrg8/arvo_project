commit d80b5acaf23ec4c2453a348b35096b99601fcde5
Author: Nathan Moinvaziri <nathan@nathanm.com>
Date:   Sat Sep 12 18:36:18 2020 -0700

    Fixed wrong size being passed to blosc_run_decompression_with_context.

diff --git a/blosc/blosc2.c b/blosc/blosc2.c
index ed823898..cc5a7cda 100644
--- a/blosc/blosc2.c
+++ b/blosc/blosc2.c
@@ -2157,45 +2157,45 @@ int blosc2_decompress_ctx(blosc2_context* context, const void* src, int32_t srcs
 /* The public secure routine for decompression. */
 int blosc2_decompress(const void* src, int32_t srcsize, void* dest, int32_t destsize) {
   int result;
   char* envvar;
   long nthreads;
   blosc2_context *dctx;
   blosc2_dparams dparams = BLOSC2_DPARAMS_DEFAULTS;
 
   /* Check whether the library should be initialized */
   if (!g_initlib) blosc_init();
 
   /* Check for a BLOSC_NTHREADS environment variable */
   envvar = getenv("BLOSC_NTHREADS");
   if (envvar != NULL) {
     nthreads = strtol(envvar, NULL, 10);
     if ((nthreads != EINVAL) && (nthreads > 0)) {
       result = blosc_set_nthreads((int)nthreads);
       if (result < 0) { return result; }
     }
   }
 
   /* Check for a BLOSC_NOLOCK environment variable.  It is important
      that this should be the last env var so that it can take the
      previous ones into account */
   envvar = getenv("BLOSC_NOLOCK");
   if (envvar != NULL) {
     dparams.nthreads = g_nthreads;
     dctx = blosc2_create_dctx(dparams);
     result = blosc2_decompress_ctx(dctx, src, srcsize, dest, destsize);
     blosc2_free_ctx(dctx);
     return result;
   }
 
   pthread_mutex_lock(&global_comp_mutex);
 
   result = blosc_run_decompression_with_context(
-          g_global_context, src, INT32_MAX, dest, destsize);
+          g_global_context, src, srcsize, dest, destsize);
 
   pthread_mutex_unlock(&global_comp_mutex);
 
   return result;
 }
 
 
 /* The public routine for decompression. */
