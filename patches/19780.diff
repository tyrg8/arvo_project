commit 920c30cf1d4353b28266fc91f88b2ae72e0f5e4f
Author: Randy <randy408@protonmail.com>
Date:   Sat Feb 29 10:55:27 2020 +0000

    Add spectre_document_load_from_data(), update fuzz target

diff --git a/libspectre/spectre-document.c b/libspectre/spectre-document.c
index c08c3c2..ff3e57c 100644
--- a/libspectre/spectre-document.c
+++ b/libspectre/spectre-document.c
@@ -50,70 +50,109 @@ spectre_document_new (void)
 	return doc;
 }
 
-void
-spectre_document_load (SpectreDocument *document,
-		       const char      *filename)
+static void
+document_load (SpectreDocument *document,
+	       const char      *filename,
+	       void            *buffer,
+	       size_t           size)
 {
 	FILE *file;
+
 	_spectre_return_if_fail (document != NULL);
+
+#if _POSIX_C_SOURCE >= 200809L
+	if(buffer == NULL) {
+		_spectre_return_if_fail (filename != NULL);
+	} else {
+		_spectre_return_if_fail (buffer != NULL);
+	}
+#else
 	_spectre_return_if_fail (filename != NULL);
+#endif
+	
 	
 	if (document->doc && strcmp (filename, document->doc->filename) == 0) {
 		document->status = SPECTRE_STATUS_SUCCESS;
 		return;
 	}
 
 	if (document->doc) {
 		psdocdestroy (document->doc);
 		document->doc = NULL;
 	}
 
+#if _POSIX_C_SOURCE >= 200809L
+	if(buffer == NULL) {
+		file = fopen (filename, "rb");
+	} else {
+		file = fmemopen (buffer, size, "rb");
+	}
+#else
 	file = fopen (filename, "rb");
+#endif
+
 	if (!file) {
 		document->status = SPECTRE_STATUS_LOAD_ERROR;
 		return;
 	}
 	
 	document->doc = psscan (file, filename, SCANSTYLE_NORMAL);
 	if (!document->doc) {
 		document->status = SPECTRE_STATUS_LOAD_ERROR;
-		fclose(file);
+		fclose (file);
 		return;
 	}
 
 	if (document->doc->numpages == 0 && document->doc->lenprolog == 0) {
 		document->status = SPECTRE_STATUS_LOAD_ERROR;
 		psdocdestroy (document->doc);
 		document->doc = NULL;
-		fclose(file);
+		fclose (file);
 		
 		return;
 	} else if (document->doc->numpages == 0 && !document->doc->format) {
 		/* Make sure it's a valid PS document */
 		unsigned char *data = NULL;
 		int            row_length;
 
 		spectre_document_render (document, &data, &row_length);
 		free (data);
 		
 		if (spectre_document_status (document)) {
 			document->status = SPECTRE_STATUS_LOAD_ERROR;
 			psdocdestroy (document->doc);
 			document->doc = NULL;
-			fclose(file);
+			fclose (file);
 
 			return;
 		}
 	}
 
 	document->structured = ((!document->doc->epsf && document->doc->numpages > 0) ||
 				(document->doc->epsf && document->doc->numpages > 1));
 
 	if (document->status != SPECTRE_STATUS_SUCCESS)
 		document->status = SPECTRE_STATUS_SUCCESS;
 
-	fclose(file);
+	fclose (file);
+}
+
+void
+spectre_document_load (SpectreDocument *document,
+		       const char *filename)
+{
+	document_load (document, filename, NULL, 0);
+}
+
+#if _POSIX_C_SOURCE >= 200809L
+void
+spectre_document_load_from_data (SpectreDocument *document,
+				 void            *data,
+				 size_t           size)
+{
+	document_load (document, NULL, data, size);
 }
+#endif
 
 void
 spectre_document_free (SpectreDocument *document)
diff --git a/libspectre/spectre-document.h b/libspectre/spectre-document.h
index 40cccb4..c2ac135 100644
--- a/libspectre/spectre-document.h
+++ b/libspectre/spectre-document.h
@@ -43,6 +43,19 @@ SPECTRE_PUBLIC
 void               spectre_document_load               (SpectreDocument *document,
 							const char      *filename);
 
+#if _POSIX_C_SOURCE >= 200809L
+/*! Loads the given buffer into the document. This function can fail
+    @param document the document where the buffer will be loaded
+    @param buffer the buffer to load
+    @param size the size of the buffer
+    @see spectre_document_status
+*/
+SPECTRE_PUBLIC
+void               spectre_document_load_from_data     (SpectreDocument *document,
+							void      *buffer,
+                            				size_t size);
+#endif
+
 /*! Returns the document status 
     @param document the document whose status will be returned
 */
diff --git a/test/spectre_read_fuzzer.c b/test/spectre_read_fuzzer.c
index f121d93..a0ca3e6 100644
--- a/test/spectre_read_fuzzer.c
+++ b/test/spectre_read_fuzzer.c
@@ -14,36 +14,28 @@ extern "C" {
 #include "../libspectre/spectre-utils.h"
 #include "../libspectre/ps.h"
 
+int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size);
+
 int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)
 {
-    SpectreRenderContext *rc;
     SpectreDocument *document;
-    char path[] = "/tmp/spectre_fuzz";
-
-    int fd = creat(path, 0644);
-
-    if(fd == -1) return 0;
-
-    write(fd, data, size);
-
-    close(fd);
 
     document = spectre_document_new();
     if(document == NULL) return 0;
 
-    spectre_document_load(document, path);
+    spectre_document_load_from_data(document, (void*)data, size);
 
     if(spectre_document_status(document))
     {
         spectre_document_free(document);
         return 0;
     }
 
     spectre_document_free(document);
 
     return 0;
 }
 
 #ifdef __cplusplus
 }
 #endif
