commit 6209bfafad7d4ad57b105fe9fdfc90298ebd4a69
Author: Mike Reed <reed@google.com>
Date:   Fri Apr 6 14:27:27 2018 -0400

    detect if makeOffset failed
    
    If we don't detect this, this imagefilter might not write to all of the pixels
    it claims it will, resulting in uninitialized memory.
    
    Bug: oss-fuzz:7209
    Change-Id: I6c53757046b4d6051da1b317310c89b8ec4752ca
    Reviewed-on: https://skia-review.googlesource.com/119145
    Reviewed-by: Mike Reed <reed@google.com>
    Commit-Queue: Mike Reed <reed@google.com>

diff --git a/src/effects/SkDisplacementMapEffect.cpp b/src/effects/SkDisplacementMapEffect.cpp
index 189102328b..5dd3ece316 100644
--- a/src/effects/SkDisplacementMapEffect.cpp
+++ b/src/effects/SkDisplacementMapEffect.cpp
@@ -225,138 +225,143 @@ private:
 sk_sp<SkSpecialImage> SkDisplacementMapEffect::onFilterImage(SkSpecialImage* source,
                                                              const Context& ctx,
                                                              SkIPoint* offset) const {
     SkIPoint colorOffset = SkIPoint::Make(0, 0);
     sk_sp<SkSpecialImage> color(this->filterInput(1, source, ctx, &colorOffset));
     if (!color) {
         return nullptr;
     }
 
     SkIPoint displOffset = SkIPoint::Make(0, 0);
     // Creation of the displacement map should happen in a non-colorspace aware context. This
     // texture is a purely mathematical construct, so we want to just operate on the stored
     // values. Consider:
     // User supplies an sRGB displacement map. If we're rendering to a wider gamut, then we could
     // end up filtering the displacement map into that gamut, which has the effect of reducing
     // the amount of displacement that it represents (as encoded values move away from the
     // primaries).
     // With a more complex DAG attached to this input, it's not clear that working in ANY specific
     // color space makes sense, so we ignore color spaces (and gamma) entirely. This may not be
     // ideal, but it's at least consistent and predictable.
     Context displContext(ctx.ctm(), ctx.clipBounds(), ctx.cache(), OutputProperties(nullptr));
     sk_sp<SkSpecialImage> displ(this->filterInput(0, source, displContext, &displOffset));
     if (!displ) {
         return nullptr;
     }
 
     const SkIRect srcBounds = SkIRect::MakeXYWH(colorOffset.x(), colorOffset.y(),
                                                 color->width(), color->height());
 
     // Both paths do bounds checking on color pixel access, we don't need to
     // pad the color bitmap to bounds here.
     SkIRect bounds;
     if (!this->applyCropRect(ctx, srcBounds, &bounds)) {
         return nullptr;
     }
 
     SkIRect displBounds;
     displ = this->applyCropRect(ctx, displ.get(), &displOffset, &displBounds);
     if (!displ) {
         return nullptr;
     }
 
     if (!bounds.intersect(displBounds)) {
         return nullptr;
     }
 
     const SkIRect colorBounds = bounds.makeOffset(-colorOffset.x(), -colorOffset.y());
+    // If the offset overflowed (saturated) then we have to abort, as we need their
+    // dimensions to be equal. See https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=7209
+    if (colorBounds.size() != bounds.size()) {
+        return nullptr;
+    }
 
     SkVector scale = SkVector::Make(fScale, fScale);
     ctx.ctm().mapVectors(&scale, 1);
 
 #if SK_SUPPORT_GPU
     if (source->isTextureBacked()) {
         GrContext* context = source->getContext();
 
         sk_sp<GrTextureProxy> colorProxy(color->asTextureProxyRef(context));
         sk_sp<GrTextureProxy> displProxy(displ->asTextureProxyRef(context));
         if (!colorProxy || !displProxy) {
             return nullptr;
         }
 
         SkMatrix offsetMatrix = SkMatrix::MakeTrans(SkIntToScalar(colorOffset.fX - displOffset.fX),
                                                     SkIntToScalar(colorOffset.fY - displOffset.fY));
         SkColorSpace* colorSpace = ctx.outputProperties().colorSpace();
 
         GrPixelConfig colorConfig = colorProxy->config();
         std::unique_ptr<GrFragmentProcessor> fp =
                 GrDisplacementMapEffect::Make(fXChannelSelector,
                                               fYChannelSelector,
                                               scale,
                                               std::move(displProxy),
                                               offsetMatrix,
                                               std::move(colorProxy),
                                               SkISize::Make(color->width(), color->height()));
         fp = GrColorSpaceXformEffect::Make(std::move(fp), color->getColorSpace(), colorConfig,
                                            colorSpace);
 
         GrPaint paint;
         paint.addColorFragmentProcessor(std::move(fp));
         paint.setPorterDuffXPFactory(SkBlendMode::kSrc);
         SkMatrix matrix;
         matrix.setTranslate(-SkIntToScalar(colorBounds.x()), -SkIntToScalar(colorBounds.y()));
 
         sk_sp<GrRenderTargetContext> renderTargetContext(
             context->contextPriv().makeDeferredRenderTargetContext(SkBackingFit::kApprox,
                                                      bounds.width(), bounds.height(),
                                                      GrRenderableConfigForColorSpace(colorSpace),
                                                      sk_ref_sp(colorSpace)));
         if (!renderTargetContext) {
             return nullptr;
         }
         paint.setGammaCorrect(renderTargetContext->colorSpaceInfo().isGammaCorrect());
 
         renderTargetContext->drawRect(GrNoClip(), std::move(paint), GrAA::kNo, matrix,
                                       SkRect::Make(colorBounds));
 
         offset->fX = bounds.left();
         offset->fY = bounds.top();
         return SkSpecialImage::MakeDeferredFromGpu(
                 context,
                 SkIRect::MakeWH(bounds.width(), bounds.height()),
                 kNeedNewImageUniqueID_SpecialImage,
                 renderTargetContext->asTextureProxyRef(),
                 renderTargetContext->colorSpaceInfo().refColorSpace());
     }
 #endif
 
     SkBitmap colorBM, displBM;
 
     if (!color->getROPixels(&colorBM) || !displ->getROPixels(&displBM)) {
         return nullptr;
     }
 
     if ((colorBM.colorType() != kN32_SkColorType) ||
         (displBM.colorType() != kN32_SkColorType)) {
         return nullptr;
     }
 
     if (!colorBM.getPixels() || !displBM.getPixels()) {
         return nullptr;
     }
 
     SkImageInfo info = SkImageInfo::MakeN32(bounds.width(), bounds.height(),
                                             colorBM.alphaType());
 
     SkBitmap dst;
     if (!dst.tryAllocPixels(info)) {
         return nullptr;
     }
 
     computeDisplacement(Extractor(fXChannelSelector, fYChannelSelector), scale, &dst,
                         displBM, colorOffset - displOffset, colorBM, colorBounds);
 
     offset->fX = bounds.left();
     offset->fY = bounds.top();
     return SkSpecialImage::MakeFromRaster(SkIRect::MakeWH(bounds.width(), bounds.height()),
                                           dst);
 }
