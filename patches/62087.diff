commit 68a61daa959c03f4c624d73802d98730c35ad3da
Author: Frank Tang <ftang@chromium.org>
Date:   Mon Sep 11 18:21:26 2023 -0700

    ICU-22497 Fix buffer-overflow READ for toLanguateTag

diff --git a/icu4c/source/common/uloc_tag.cpp b/icu4c/source/common/uloc_tag.cpp
index 8f3778be565..7a2b8673586 100644
--- a/icu4c/source/common/uloc_tag.cpp
+++ b/icu4c/source/common/uloc_tag.cpp
@@ -1879,139 +1879,140 @@ static void
 _appendPrivateuseToLanguageTag(const char* localeID, icu::ByteSink& sink, UBool strict, UBool hadPosix, UErrorCode* status) {
     (void)hadPosix;
     char buf[ULOC_FULLNAME_CAPACITY];
     char tmpAppend[ULOC_FULLNAME_CAPACITY];
     UErrorCode tmpStatus = U_ZERO_ERROR;
     int32_t len, i;
     int32_t reslen = 0;
     int32_t capacity = sizeof tmpAppend;
 
     if (U_FAILURE(*status)) {
         return;
     }
 
     len = uloc_getVariant(localeID, buf, sizeof(buf), &tmpStatus);
     if (U_FAILURE(tmpStatus) || tmpStatus == U_STRING_NOT_TERMINATED_WARNING) {
         if (strict) {
             *status = U_ILLEGAL_ARGUMENT_ERROR;
         }
         return;
     }
 
     if (len > 0) {
         char *p, *pPriv;
         UBool bNext = true;
         UBool firstValue = true;
         UBool writeValue;
 
         pPriv = nullptr;
         p = buf;
         while (bNext) {
             writeValue = false;
             if (*p == SEP || *p == LOCALE_SEP || *p == 0) {
                 if (*p == 0) {
                     bNext = false;
                 } else {
                     *p = 0; /* terminate */
                 }
                 if (pPriv != nullptr) {
                     /* Private use in the canonical format is lowercase in BCP47 */
                     for (i = 0; *(pPriv + i) != 0; i++) {
                         *(pPriv + i) = uprv_tolower(*(pPriv + i));
                     }
 
                     /* validate */
                     if (_isPrivateuseValueSubtag(pPriv, -1)) {
                         if (firstValue) {
                             if (!_isVariantSubtag(pPriv, -1)) {
                                 writeValue = true;
                             }
                         } else {
                             writeValue = true;
                         }
                     } else if (strict) {
                         *status = U_ILLEGAL_ARGUMENT_ERROR;
                         break;
                     } else {
                         break;
                     }
 
                     if (writeValue) {
                         if (reslen < capacity) {
                             tmpAppend[reslen++] = SEP;
                         }
 
                         if (firstValue) {
                             if (reslen < capacity) {
                                 tmpAppend[reslen++] = *PRIVATEUSE_KEY;
                             }
 
                             if (reslen < capacity) {
                                 tmpAppend[reslen++] = SEP;
                             }
 
                             len = (int32_t)uprv_strlen(PRIVUSE_VARIANT_PREFIX);
                             if (reslen < capacity) {
                                 uprv_memcpy(tmpAppend + reslen, PRIVUSE_VARIANT_PREFIX, uprv_min(len, capacity - reslen));
+                                reslen += uprv_min(len, capacity - reslen);
                             }
-                            reslen += len;
 
                             if (reslen < capacity) {
                                 tmpAppend[reslen++] = SEP;
                             }
 
                             firstValue = false;
                         }
 
                         len = (int32_t)uprv_strlen(pPriv);
                         if (reslen < capacity) {
                             uprv_memcpy(tmpAppend + reslen, pPriv, uprv_min(len, capacity - reslen));
+                            reslen += uprv_min(len, capacity - reslen);
                         }
-                        reslen += len;
                     }
                 }
                 /* reset private use starting position */
                 pPriv = nullptr;
             } else if (pPriv == nullptr) {
                 pPriv = p;
             }
             p++;
         }
 
         if (U_FAILURE(*status)) {
             return;
         }
     }
 
     if (U_SUCCESS(*status)) {
         len = reslen;
+        U_ASSERT(reslen <= capacity);
         sink.Append(tmpAppend, len);
     }
 }
 
 /*
 * -------------------------------------------------
 *
 * ultag_ functions
 *
 * -------------------------------------------------
 */
 
 /* Bit flags used by the parser */
 #define LANG 0x0001
 #define EXTL 0x0002
 #define SCRT 0x0004
 #define REGN 0x0008
 #define VART 0x0010
 #define EXTS 0x0020
 #define EXTV 0x0040
 #define PRIV 0x0080
 
 /**
  * Ticket #12705 - The optimizer in Visual Studio 2015 Update 3 has problems optimizing this function.
  * As a work-around, optimization is disabled for this function on VS2015 and VS2017.
  * This work-around should be removed once the following versions of Visual Studio are no
  * longer supported: All versions of VS2015/VS2017, and versions of VS2019 below 16.4.
  */
 #if defined(_MSC_VER) && (_MSC_VER >= 1900) && (_MSC_VER < 1924)
 #pragma optimize( "", off )
 #endif
diff --git a/icu4c/source/test/intltest/loctest.cpp b/icu4c/source/test/intltest/loctest.cpp
index 5c2f949260e..1c88f77fe63 100644
--- a/icu4c/source/test/intltest/loctest.cpp
+++ b/icu4c/source/test/intltest/loctest.cpp
@@ -5913,87 +5913,95 @@ void LocaleTest::TestForLanguageTagLegacyTagBug21676() {
 void LocaleTest::TestToLanguageTag() {
     IcuTestErrorCode status(*this, "TestToLanguageTag()");
 
     static const Locale loc_c("en_US_POSIX");
     static const Locale loc_en("en_US");
     static const Locale loc_af("af@calendar=coptic;t=ar-i0-handwrit;x=foo");
     static const Locale loc_ext("en@0=abc;a=xyz");
     static const Locale loc_empty("");
     static const Locale loc_ill("!");
     static const Locale loc_variant("sl__ROZAJ_BISKE_1994");
 
     static const char tag_c[] = "en-US-u-va-posix";
     static const char tag_en[] = "en-US";
     static const char tag_af[] = "af-t-ar-i0-handwrit-u-ca-coptic-x-foo";
     static const char tag_ext[] = "en-0-abc-a-xyz";
     static const char tag_und[] = "und";
     static const char tag_variant[] = "sl-1994-biske-rozaj";
 
     std::string result;
     StringByteSink<std::string> sink(&result);
     loc_c.toLanguageTag(sink, status);
     status.errIfFailureAndReset("\"%s\"", loc_c.getName());
     assertEquals(loc_c.getName(), tag_c, result.c_str());
 
     std::string result_c = loc_c.toLanguageTag<std::string>(status);
     status.errIfFailureAndReset("\"%s\"", loc_c.getName());
     assertEquals(loc_c.getName(), tag_c, result_c.c_str());
 
     std::string result_en = loc_en.toLanguageTag<std::string>(status);
     status.errIfFailureAndReset("\"%s\"", loc_en.getName());
     assertEquals(loc_en.getName(), tag_en, result_en.c_str());
 
     std::string result_af = loc_af.toLanguageTag<std::string>(status);
     status.errIfFailureAndReset("\"%s\"", loc_af.getName());
     assertEquals(loc_af.getName(), tag_af, result_af.c_str());
 
     std::string result_ext = loc_ext.toLanguageTag<std::string>(status);
     status.errIfFailureAndReset("\"%s\"", loc_ext.getName());
     assertEquals(loc_ext.getName(), tag_ext, result_ext.c_str());
 
     std::string result_empty = loc_empty.toLanguageTag<std::string>(status);
     status.errIfFailureAndReset("\"%s\"", loc_empty.getName());
     assertEquals(loc_empty.getName(), tag_und, result_empty.c_str());
 
     std::string result_ill = loc_ill.toLanguageTag<std::string>(status);
     status.errIfFailureAndReset("\"%s\"", loc_ill.getName());
     assertEquals(loc_ill.getName(), tag_und, result_ill.c_str());
 
     std::string result_variant = loc_variant.toLanguageTag<std::string>(status);
     status.errIfFailureAndReset("\"%s\"", loc_variant.getName());
     assertEquals(loc_variant.getName(), tag_variant, result_variant.c_str());
 
     Locale loc_bogus;
     loc_bogus.setToBogus();
     std::string result_bogus = loc_bogus.toLanguageTag<std::string>(status);
     assertEquals("bogus", U_ILLEGAL_ARGUMENT_ERROR, status.reset());
     assertTrue(result_bogus.c_str(), result_bogus.empty());
 
     static const struct {
         const char *localeID;    /* input */
         const char *expectedID; /* expected toLanguageTag() result */
     } testCases[] = {
       /* ICU-21414 */
       {"und-x-abc-private", "und-x-abc-private"},
       {"und-x-private", "und-x-private"},
       {"und-u-ca-roc-x-private", "und-u-ca-roc-x-private"},
       {"und-US-x-private", "und-US-x-private"},
       {"und-Latn-x-private", "und-Latn-x-private"},
       {"und-1994-biske-rozaj", "und-1994-biske-rozaj"},
       {"und-1994-biske-rozaj-x-private", "und-1994-biske-rozaj-x-private"},
+      // ICU-22497
+      {"-ins0-ins17Rz-yqyq-UWLF-uRyq-UWLF-uRRyq-UWLF-uR-UWLF-uRns0-ins17Rz-yq-UWLF-uRyq-UWLF-uRRyq-LF-uRyq-UWLF-uRRyq-UWLF-uRq-UWLF-uRyq-UWLF-uRRyq-UWLF-uR", ""},
     };
     int32_t i;
     for (i=0; i < UPRV_LENGTHOF(testCases); i++) {
         UErrorCode status = U_ZERO_ERROR;
         std::string otag = testCases[i].localeID;
         std::string tag = Locale::forLanguageTag(otag.c_str(), status).toLanguageTag<std::string>(status);
         if (tag != testCases[i].expectedID) {
             errcheckln(status, "FAIL: %s should be toLanguageTag to %s but got %s - %s",
                        otag.c_str(),
                        testCases[i].expectedID,
                        tag.c_str(),
                        u_errorName(status));
         }
+        // Test ICU-22497
+        status = U_ZERO_ERROR;
+        icu::Locale locale(otag.c_str());
+        char buf[245];
+        icu::CheckedArrayByteSink sink(buf, sizeof(buf));
+        locale.toLanguageTag(sink, status);
     }
 }
 
 /* ICU-20310 */
