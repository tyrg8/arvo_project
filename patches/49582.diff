commit f3f6b7bceb629bc4b6f1dea3e45b44dc3f8674af
Author: Marti Maria <marti.maria@littlecms.com>
Date:   Fri Aug 26 00:08:39 2022 +0200

    Add some validations
    
    Makes no sense to accept profiles with absurd version numbers. That would keep fuzzers busy for a while.

diff --git a/include/lcms2.h b/include/lcms2.h
index c72135a..331a16f 100644
--- a/include/lcms2.h
+++ b/include/lcms2.h
@@ -99,69 +99,69 @@ typedef float                cmsFloat32Number;
 typedef double               cmsFloat64Number;
 
 // 16-bit base types
 #if (USHRT_MAX == 65535U)
  typedef unsigned short      cmsUInt16Number;
 #elif (UINT_MAX == 65535U)
  typedef unsigned int        cmsUInt16Number;
 #else
 #  error "Unable to find 16 bits unsigned type, unsupported compiler"
 #endif
 
 #if (SHRT_MAX == 32767)
   typedef  short             cmsInt16Number;
 #elif (INT_MAX == 32767)
   typedef  int               cmsInt16Number;
 #else
 #  error "Unable to find 16 bits signed type, unsupported compiler"
 #endif
 
 // 32-bit base type
 #if (UINT_MAX == 4294967295U)
  typedef unsigned int        cmsUInt32Number;
 #elif (ULONG_MAX == 4294967295U)
  typedef unsigned long       cmsUInt32Number;
 #else
 #  error "Unable to find 32 bit unsigned type, unsupported compiler"
 #endif
 
 #if (INT_MAX == +2147483647)
  typedef  int                cmsInt32Number;
 #elif (LONG_MAX == +2147483647)
  typedef  long               cmsInt32Number;
 #else
 #  error "Unable to find 32 bit signed type, unsupported compiler"
 #endif
 
 // 64-bit base types
 #ifndef CMS_DONT_USE_INT64
 #  if (ULONG_MAX  == 18446744073709551615U)
     typedef unsigned long   cmsUInt64Number;
 #  elif (ULLONG_MAX == 18446744073709551615U)
       typedef unsigned long long   cmsUInt64Number;
 #  else
 #     define CMS_DONT_USE_INT64 1
 #  endif
 #  if (LONG_MAX == +9223372036854775807)
       typedef  long          cmsInt64Number;
 #  elif (LLONG_MAX == +9223372036854775807)
       typedef  long long     cmsInt64Number;
 #  else
 #     define CMS_DONT_USE_INT64 1
 #  endif
 #endif
 #endif
 
 // Handle "register" keyword
-#if defined(CMS_NO_REGISTER_KEYWORD) 
+#if defined(CMS_NO_REGISTER_KEYWORD)
 #  define CMSREGISTER
 #else
 #  define CMSREGISTER register
 #endif
 
 // In the case 64 bit numbers are not supported by the compiler
 #ifdef CMS_DONT_USE_INT64
     typedef cmsUInt32Number      cmsUInt64Number[2];
     typedef cmsInt32Number       cmsInt64Number[2];
 #endif
 
 // Derivative types
diff --git a/src/cmsio0.c b/src/cmsio0.c
index 9c07aa1..821b869 100644
--- a/src/cmsio0.c
+++ b/src/cmsio0.c
@@ -520,23 +520,26 @@ cmsIOHANDLER* CMSEXPORT cmsGetProfileIOhandler(cmsHPROFILE hProfile)
 // Creates an empty structure holding all required parameters
 cmsHPROFILE CMSEXPORT cmsCreateProfilePlaceholder(cmsContext ContextID)
 {
     _cmsICCPROFILE* Icc = (_cmsICCPROFILE*) _cmsMallocZero(ContextID, sizeof(_cmsICCPROFILE));
     if (Icc == NULL) return NULL;
 
     Icc ->ContextID = ContextID;
 
     // Set it to empty
     Icc -> TagCount   = 0;
 
     // Set default version
     Icc ->Version =  0x02100000;
     
+    // Set default device class
+    Icc->DeviceClass = cmsSigDisplayClass;
+
     // Set creation date/time
     if (!_cmsGetTime(&Icc->Created))
         goto Error;
 
     // Create a mutex if the user provided proper plugin. NULL otherwise
     Icc ->UsrMutex = _cmsCreateMutex(ContextID);
 
     // Return the handle
     return (cmsHPROFILE) Icc;
@@ -720,132 +723,164 @@ static
 cmsUInt32Number _validatedVersion(cmsUInt32Number DWord)
 {
     cmsUInt8Number* pByte = (cmsUInt8Number*) &DWord;
     cmsUInt8Number temp1;
     cmsUInt8Number temp2;
 
     if (*pByte > 0x09) *pByte = (cmsUInt8Number) 0x09;
     temp1 = (cmsUInt8Number) (*(pByte+1) & 0xf0);
     temp2 = (cmsUInt8Number) (*(pByte+1) & 0x0f);
     if (temp1 > 0x90U) temp1 = 0x90U;
     if (temp2 > 0x09U) temp2 = 0x09U;
     *(pByte+1) = (cmsUInt8Number)(temp1 | temp2);
     *(pByte+2) = (cmsUInt8Number)0;
     *(pByte+3) = (cmsUInt8Number)0;
 
     return DWord;
 }
 
+// Check device class
+static 
+cmsBool validDeviceClass(cmsProfileClassSignature cl)
+{
+    switch (cl)
+    {
+    case 0: // We allow zero because older lcms versions defaulted to that.
+    case cmsSigInputClass:
+    case cmsSigDisplayClass:
+    case cmsSigOutputClass:
+    case cmsSigLinkClass:
+    case cmsSigAbstractClass:
+    case cmsSigColorSpaceClass:
+    case cmsSigNamedColorClass:
+        return TRUE;
+
+    default:
+        return FALSE;
+    }
+
+}
+
 // Read profile header and validate it
 cmsBool _cmsReadHeader(_cmsICCPROFILE* Icc)
 {
     cmsTagEntry Tag;
     cmsICCHeader Header;
     cmsUInt32Number i, j;
     cmsUInt32Number HeaderSize;
     cmsIOHANDLER* io = Icc ->IOhandler;
     cmsUInt32Number TagCount;
 
 
     // Read the header
     if (io -> Read(io, &Header, sizeof(cmsICCHeader), 1) != 1) {
         return FALSE;
     }
 
     // Validate file as an ICC profile
     if (_cmsAdjustEndianess32(Header.magic) != cmsMagicNumber) {
         cmsSignalError(Icc ->ContextID, cmsERROR_BAD_SIGNATURE, "not an ICC profile, invalid signature");
         return FALSE;
     }
 
     // Adjust endianness of the used parameters
     Icc -> DeviceClass     = (cmsProfileClassSignature) _cmsAdjustEndianess32(Header.deviceClass);
     Icc -> ColorSpace      = (cmsColorSpaceSignature)   _cmsAdjustEndianess32(Header.colorSpace);
     Icc -> PCS             = (cmsColorSpaceSignature)   _cmsAdjustEndianess32(Header.pcs);
    
     Icc -> RenderingIntent = _cmsAdjustEndianess32(Header.renderingIntent);
     Icc -> flags           = _cmsAdjustEndianess32(Header.flags);
     Icc -> manufacturer    = _cmsAdjustEndianess32(Header.manufacturer);
     Icc -> model           = _cmsAdjustEndianess32(Header.model);
     Icc -> creator         = _cmsAdjustEndianess32(Header.creator);
     
     _cmsAdjustEndianess64(&Icc -> attributes, &Header.attributes);
     Icc -> Version         = _cmsAdjustEndianess32(_validatedVersion(Header.version));
 
+    if (Icc->Version > 0x5000000) {
+        cmsSignalError(Icc->ContextID, cmsERROR_UNKNOWN_EXTENSION, "Unsupported profile version '0x%x'", Icc->Version);
+        return FALSE;
+    }
+
+    if (!validDeviceClass(Icc->DeviceClass)) {
+        cmsSignalError(Icc->ContextID, cmsERROR_UNKNOWN_EXTENSION, "Unsupported device class '0x%x'", Icc->DeviceClass);
+        return FALSE;
+    }
+
     // Get size as reported in header
     HeaderSize = _cmsAdjustEndianess32(Header.size);
 
     // Make sure HeaderSize is lower than profile size
     if (HeaderSize >= Icc ->IOhandler ->ReportedSize)
             HeaderSize = Icc ->IOhandler ->ReportedSize;
 
 
     // Get creation date/time
     _cmsDecodeDateTimeNumber(&Header.date, &Icc ->Created);
 
     // The profile ID are 32 raw bytes
     memmove(Icc ->ProfileID.ID32, Header.profileID.ID32, 16);
 
 
     // Read tag directory
     if (!_cmsReadUInt32Number(io, &TagCount)) return FALSE;
     if (TagCount > MAX_TABLE_TAG) {
 
         cmsSignalError(Icc ->ContextID, cmsERROR_RANGE, "Too many tags (%d)", TagCount);
         return FALSE;
     }
 
 
     // Read tag directory
     Icc -> TagCount = 0;
     for (i=0; i < TagCount; i++) {
 
         if (!_cmsReadUInt32Number(io, (cmsUInt32Number *) &Tag.sig)) return FALSE;
         if (!_cmsReadUInt32Number(io, &Tag.offset)) return FALSE;
         if (!_cmsReadUInt32Number(io, &Tag.size)) return FALSE;
 
         // Perform some sanity check. Offset + size should fall inside file.
         if (Tag.size == 0 || Tag.offset == 0) continue;
         if (Tag.offset + Tag.size > HeaderSize ||
             Tag.offset + Tag.size < Tag.offset)
                   continue;
 
         Icc -> TagNames[Icc ->TagCount]   = Tag.sig;
         Icc -> TagOffsets[Icc ->TagCount] = Tag.offset;
         Icc -> TagSizes[Icc ->TagCount]   = Tag.size;
 
        // Search for links
         for (j=0; j < Icc ->TagCount; j++) {
            
             if ((Icc ->TagOffsets[j] == Tag.offset) &&
                 (Icc ->TagSizes[j]   == Tag.size)) {
 
                 // Check types. 
                 if (CompatibleTypes(_cmsGetTagDescriptor(Icc->ContextID, Icc->TagNames[j]),
                                     _cmsGetTagDescriptor(Icc->ContextID, Tag.sig))) {
 
                     Icc->TagLinked[Icc->TagCount] = Icc->TagNames[j];
                 }
             }
 
         }
 
         Icc ->TagCount++;
     }
 
 
     for (i = 0; i < Icc->TagCount; i++) {
         for (j = 0; j < Icc->TagCount; j++) {
 
             // Tags cannot be duplicate
             if ((i != j) && (Icc->TagNames[i] == Icc->TagNames[j])) {
                 cmsSignalError(Icc->ContextID, cmsERROR_RANGE, "Duplicate tag found");
                 return FALSE;
             }
 
         }
     }
 
     return TRUE;
 }
 
 // Saves profile header
diff --git a/src/cmsvirt.c b/src/cmsvirt.c
index bffb88e..4900a83 100644
--- a/src/cmsvirt.c
+++ b/src/cmsvirt.c
@@ -99,111 +99,111 @@ Error:
 // This function creates a profile based on White point, primaries and
 // transfer functions.
 cmsHPROFILE CMSEXPORT cmsCreateRGBProfileTHR(cmsContext ContextID,
                                           const cmsCIExyY* WhitePoint,
                                           const cmsCIExyYTRIPLE* Primaries,
                                           cmsToneCurve* const TransferFunction[3])
 {
     cmsHPROFILE hICC;
     cmsMAT3 MColorants;
     cmsCIEXYZTRIPLE Colorants;
     cmsCIExyY MaxWhite;
     cmsMAT3 CHAD;
     cmsCIEXYZ WhitePointXYZ;
 
     hICC = cmsCreateProfilePlaceholder(ContextID);
     if (!hICC)                          // can't allocate
         return NULL;
 
-    cmsSetProfileVersion(hICC, 4.3);
+    cmsSetProfileVersion(hICC, 4.4);
 
     cmsSetDeviceClass(hICC,      cmsSigDisplayClass);
     cmsSetColorSpace(hICC,       cmsSigRgbData);
     cmsSetPCS(hICC,              cmsSigXYZData);
 
     cmsSetHeaderRenderingIntent(hICC,  INTENT_PERCEPTUAL);
 
 
     // Implement profile using following tags:
     //
     //  1 cmsSigProfileDescriptionTag
     //  2 cmsSigMediaWhitePointTag
     //  3 cmsSigRedColorantTag
     //  4 cmsSigGreenColorantTag
     //  5 cmsSigBlueColorantTag
     //  6 cmsSigRedTRCTag
     //  7 cmsSigGreenTRCTag
     //  8 cmsSigBlueTRCTag
     //  9 Chromatic adaptation Tag
     // This conforms a standard RGB DisplayProfile as says ICC, and then I add (As per addendum II)
     // 10 cmsSigChromaticityTag
 
 
     if (!SetTextTags(hICC, L"RGB built-in")) goto Error;
 
     if (WhitePoint) {
 
         if (!cmsWriteTag(hICC, cmsSigMediaWhitePointTag, cmsD50_XYZ())) goto Error;
 
         cmsxyY2XYZ(&WhitePointXYZ, WhitePoint);
         _cmsAdaptationMatrix(&CHAD, NULL, &WhitePointXYZ, cmsD50_XYZ());
 
         // This is a V4 tag, but many CMM does read and understand it no matter which version
         if (!cmsWriteTag(hICC, cmsSigChromaticAdaptationTag, (void*) &CHAD)) goto Error;
     }
 
     if (WhitePoint && Primaries) {
 
         MaxWhite.x =  WhitePoint -> x;
         MaxWhite.y =  WhitePoint -> y;
         MaxWhite.Y =  1.0;
 
         if (!_cmsBuildRGB2XYZtransferMatrix(&MColorants, &MaxWhite, Primaries)) goto Error;
 
         Colorants.Red.X   = MColorants.v[0].n[0];
         Colorants.Red.Y   = MColorants.v[1].n[0];
         Colorants.Red.Z   = MColorants.v[2].n[0];
 
         Colorants.Green.X = MColorants.v[0].n[1];
         Colorants.Green.Y = MColorants.v[1].n[1];
         Colorants.Green.Z = MColorants.v[2].n[1];
 
         Colorants.Blue.X  = MColorants.v[0].n[2];
         Colorants.Blue.Y  = MColorants.v[1].n[2];
         Colorants.Blue.Z  = MColorants.v[2].n[2];
 
         if (!cmsWriteTag(hICC, cmsSigRedColorantTag,   (void*) &Colorants.Red)) goto Error;
         if (!cmsWriteTag(hICC, cmsSigBlueColorantTag,  (void*) &Colorants.Blue)) goto Error;
         if (!cmsWriteTag(hICC, cmsSigGreenColorantTag, (void*) &Colorants.Green)) goto Error;
     }
 
 
     if (TransferFunction) {
 
         // Tries to minimize space. Thanks to Richard Hughes for this nice idea         
         if (!cmsWriteTag(hICC, cmsSigRedTRCTag,   (void*) TransferFunction[0])) goto Error;
 
         if (TransferFunction[1] == TransferFunction[0]) {
 
             if (!cmsLinkTag (hICC, cmsSigGreenTRCTag, cmsSigRedTRCTag)) goto Error;
 
         } else {
 
             if (!cmsWriteTag(hICC, cmsSigGreenTRCTag, (void*) TransferFunction[1])) goto Error;
         }
 
         if (TransferFunction[2] == TransferFunction[0]) {
 
             if (!cmsLinkTag (hICC, cmsSigBlueTRCTag, cmsSigRedTRCTag)) goto Error;
 
         } else {
 
             if (!cmsWriteTag(hICC, cmsSigBlueTRCTag, (void*) TransferFunction[2])) goto Error;
         }
     }
 
     if (Primaries) {
         if (!cmsWriteTag(hICC, cmsSigChromaticityTag, (void*) Primaries)) goto Error;
     }
 
 
     return hICC;
@@ -226,45 +226,45 @@ cmsHPROFILE CMSEXPORT cmsCreateRGBProfile(const cmsCIExyY* WhitePoint,
 // This function creates a profile based on White point and transfer function.
 cmsHPROFILE CMSEXPORT cmsCreateGrayProfileTHR(cmsContext ContextID,
                                            const cmsCIExyY* WhitePoint,
                                            const cmsToneCurve* TransferFunction)
 {
     cmsHPROFILE hICC;
     cmsCIEXYZ tmp;
 
     hICC = cmsCreateProfilePlaceholder(ContextID);
     if (!hICC)                          // can't allocate
         return NULL;
 
-    cmsSetProfileVersion(hICC, 4.3);
+    cmsSetProfileVersion(hICC, 4.4);
 
     cmsSetDeviceClass(hICC,      cmsSigDisplayClass);
     cmsSetColorSpace(hICC,       cmsSigGrayData);
     cmsSetPCS(hICC,              cmsSigXYZData);
     cmsSetHeaderRenderingIntent(hICC,  INTENT_PERCEPTUAL);
 
 
     // Implement profile using following tags:
     //
     //  1 cmsSigProfileDescriptionTag
     //  2 cmsSigMediaWhitePointTag
     //  3 cmsSigGrayTRCTag
 
     // This conforms a standard Gray DisplayProfile
 
     // Fill-in the tags
 
     if (!SetTextTags(hICC, L"gray built-in")) goto Error;
 
 
     if (WhitePoint) {
 
         cmsxyY2XYZ(&tmp, WhitePoint);
         if (!cmsWriteTag(hICC, cmsSigMediaWhitePointTag, (void*) &tmp)) goto Error;
     }
 
     if (TransferFunction) {
 
         if (!cmsWriteTag(hICC, cmsSigGrayTRCTag, (void*) TransferFunction)) goto Error;
     }
 
     return hICC;
@@ -288,42 +288,42 @@ cmsHPROFILE CMSEXPORT cmsCreateGrayProfile(const cmsCIExyY* WhitePoint,
 cmsHPROFILE CMSEXPORT cmsCreateLinearizationDeviceLinkTHR(cmsContext ContextID,
                                                           cmsColorSpaceSignature ColorSpace,
                                                           cmsToneCurve* const TransferFunctions[])
 {
     cmsHPROFILE hICC;
     cmsPipeline* Pipeline;
     cmsUInt32Number nChannels;
 
     hICC = cmsCreateProfilePlaceholder(ContextID);
     if (!hICC)
         return NULL;
 
-    cmsSetProfileVersion(hICC, 4.3);
+    cmsSetProfileVersion(hICC, 4.4);
 
     cmsSetDeviceClass(hICC,      cmsSigLinkClass);
     cmsSetColorSpace(hICC,       ColorSpace);
     cmsSetPCS(hICC,              ColorSpace);
 
     cmsSetHeaderRenderingIntent(hICC,  INTENT_PERCEPTUAL);
 
     // Set up channels
     nChannels = cmsChannelsOf(ColorSpace);
 
     // Creates a Pipeline with prelinearization step only
     Pipeline = cmsPipelineAlloc(ContextID, nChannels, nChannels);
     if (Pipeline == NULL) goto Error;
 
 
     // Copy tables to Pipeline
     if (!cmsPipelineInsertStage(Pipeline, cmsAT_BEGIN, cmsStageAllocToneCurves(ContextID, nChannels, TransferFunctions)))
         goto Error;
 
     // Create tags
     if (!SetTextTags(hICC, L"Linearization built-in")) goto Error;
     if (!cmsWriteTag(hICC, cmsSigAToB0Tag, (void*) Pipeline)) goto Error;
     if (!SetSeqDescTag(hICC, "Linearization built-in")) goto Error;
 
     // Pipeline is already on virtual profile
     cmsPipelineFree(Pipeline);
 
     // Ok, done
     return hICC;
@@ -393,63 +393,63 @@ int InkLimitingSampler(CMSREGISTER const cmsUInt16Number In[], CMSREGISTER cmsUI
 cmsHPROFILE CMSEXPORT cmsCreateInkLimitingDeviceLinkTHR(cmsContext ContextID,
                                                      cmsColorSpaceSignature ColorSpace,
                                                      cmsFloat64Number Limit)
 {
     cmsHPROFILE hICC;
     cmsPipeline* LUT;
     cmsStage* CLUT;
     cmsUInt32Number nChannels;
 
     if (ColorSpace != cmsSigCmykData) {
         cmsSignalError(ContextID, cmsERROR_COLORSPACE_CHECK, "InkLimiting: Only CMYK currently supported");
         return NULL;
     }
 
     if (Limit < 0.0 || Limit > 400) {
 
         cmsSignalError(ContextID, cmsERROR_RANGE, "InkLimiting: Limit should be between 0..400");
         if (Limit < 0) Limit = 0;
         if (Limit > 400) Limit = 400;
 
     }
 
     hICC = cmsCreateProfilePlaceholder(ContextID);
     if (!hICC)                          // can't allocate
         return NULL;
 
-    cmsSetProfileVersion(hICC, 4.3);
+    cmsSetProfileVersion(hICC, 4.4);
 
     cmsSetDeviceClass(hICC,      cmsSigLinkClass);
     cmsSetColorSpace(hICC,       ColorSpace);
     cmsSetPCS(hICC,              ColorSpace);
 
     cmsSetHeaderRenderingIntent(hICC,  INTENT_PERCEPTUAL);
 
 
     // Creates a Pipeline with 3D grid only
     LUT = cmsPipelineAlloc(ContextID, 4, 4);
     if (LUT == NULL) goto Error;
 
 
     nChannels = cmsChannelsOf(ColorSpace);
 
     CLUT = cmsStageAllocCLut16bit(ContextID, 17, nChannels, nChannels, NULL);
     if (CLUT == NULL) goto Error;
 
     if (!cmsStageSampleCLut16bit(CLUT, InkLimitingSampler, (void*) &Limit, 0)) goto Error;
 
     if (!cmsPipelineInsertStage(LUT, cmsAT_BEGIN, _cmsStageAllocIdentityCurves(ContextID, nChannels)) ||
         !cmsPipelineInsertStage(LUT, cmsAT_END, CLUT) ||
         !cmsPipelineInsertStage(LUT, cmsAT_END, _cmsStageAllocIdentityCurves(ContextID, nChannels)))
         goto Error;
 
     // Create tags
     if (!SetTextTags(hICC, L"ink-limiting built-in")) goto Error;
 
     if (!cmsWriteTag(hICC, cmsSigAToB0Tag, (void*) LUT))  goto Error;
     if (!SetSeqDescTag(hICC, "ink-limiting built-in")) goto Error;
 
     // cmsPipeline is already on virtual profile
     cmsPipelineFree(LUT);
 
     // Ok, done
     return hICC;
@@ -520,28 +520,28 @@ cmsHPROFILE CMSEXPORT cmsCreateLab2Profile(const cmsCIExyY* WhitePoint)
 // Creates a fake Lab V4 identity.
 cmsHPROFILE CMSEXPORT cmsCreateLab4ProfileTHR(cmsContext ContextID, const cmsCIExyY* WhitePoint)
 {
     cmsHPROFILE hProfile;
     cmsPipeline* LUT = NULL;
 
     hProfile = cmsCreateRGBProfileTHR(ContextID, WhitePoint == NULL ? cmsD50_xyY() : WhitePoint, NULL, NULL);
     if (hProfile == NULL) return NULL;
 
-    cmsSetProfileVersion(hProfile, 4.3);
+    cmsSetProfileVersion(hProfile, 4.4);
 
     cmsSetDeviceClass(hProfile, cmsSigAbstractClass);
     cmsSetColorSpace(hProfile,  cmsSigLabData);
     cmsSetPCS(hProfile,         cmsSigLabData);
 
     if (!SetTextTags(hProfile, L"Lab identity built-in")) goto Error;
 
     // An empty LUTs is all we need
     LUT = cmsPipelineAlloc(ContextID, 3, 3);
     if (LUT == NULL) goto Error;
 
     if (!cmsPipelineInsertStage(LUT, cmsAT_BEGIN, _cmsStageAllocIdentityCurves(ContextID, 3)))
         goto Error;
 
     if (!cmsWriteTag(hProfile, cmsSigAToB0Tag, LUT)) goto Error;
     cmsPipelineFree(LUT);
 
     return hProfile;
@@ -566,28 +566,28 @@ cmsHPROFILE CMSEXPORT cmsCreateLab4Profile(const cmsCIExyY* WhitePoint)
 // Creates a fake XYZ identity
 cmsHPROFILE CMSEXPORT cmsCreateXYZProfileTHR(cmsContext ContextID)
 {
     cmsHPROFILE hProfile;
     cmsPipeline* LUT = NULL;
 
     hProfile = cmsCreateRGBProfileTHR(ContextID, cmsD50_xyY(), NULL, NULL);
     if (hProfile == NULL) return NULL;
 
-    cmsSetProfileVersion(hProfile, 4.3);
+    cmsSetProfileVersion(hProfile, 4.4);
 
     cmsSetDeviceClass(hProfile, cmsSigAbstractClass);
     cmsSetColorSpace(hProfile,  cmsSigXYZData);
     cmsSetPCS(hProfile,         cmsSigXYZData);
 
     if (!SetTextTags(hProfile, L"XYZ identity built-in")) goto Error;
 
     // An identity LUT is all we need
     LUT = cmsPipelineAlloc(ContextID, 3, 3);
     if (LUT == NULL) goto Error;
 
     if (!cmsPipelineInsertStage(LUT, cmsAT_BEGIN, _cmsStageAllocIdentityCurves(ContextID, 3)))
         goto Error;
 
     if (!cmsWriteTag(hProfile, cmsSigAToB0Tag, LUT)) goto Error;
     cmsPipelineFree(LUT);
 
     return hProfile;
@@ -826,48 +826,48 @@ CMSAPI cmsHPROFILE   CMSEXPORT cmsCreateBCHSWabstractProfile(cmsUInt32Number nLU
 // Creates a fake NULL profile. This profile return 1 channel as always 0.
 // Is useful only for gamut checking tricks
 cmsHPROFILE CMSEXPORT cmsCreateNULLProfileTHR(cmsContext ContextID)
 {
     cmsHPROFILE hProfile;
     cmsPipeline* LUT = NULL;
     cmsStage* PostLin;
     cmsStage* OutLin;
     cmsToneCurve* EmptyTab[3];
     cmsUInt16Number Zero[2] = { 0, 0 };
     const cmsFloat64Number PickLstarMatrix[] = { 1, 0, 0 };
 
     hProfile = cmsCreateProfilePlaceholder(ContextID);
     if (!hProfile)                          // can't allocate
         return NULL;
 
-    cmsSetProfileVersion(hProfile, 4.3);
+    cmsSetProfileVersion(hProfile, 4.4);
 
     if (!SetTextTags(hProfile, L"NULL profile built-in")) goto Error;
 
 
     cmsSetDeviceClass(hProfile, cmsSigOutputClass);
     cmsSetColorSpace(hProfile,  cmsSigGrayData);
     cmsSetPCS(hProfile,         cmsSigLabData);
 
     // Create a valid ICC 4 structure
     LUT = cmsPipelineAlloc(ContextID, 3, 1);
     if (LUT == NULL) goto Error;
     
     EmptyTab[0] = EmptyTab[1] = EmptyTab[2] = cmsBuildTabulatedToneCurve16(ContextID, 2, Zero);
     PostLin = cmsStageAllocToneCurves(ContextID, 3, EmptyTab);
     OutLin  = cmsStageAllocToneCurves(ContextID, 1, EmptyTab);
     cmsFreeToneCurve(EmptyTab[0]);
 
     if (!cmsPipelineInsertStage(LUT, cmsAT_END, PostLin))
         goto Error;
 
     if (!cmsPipelineInsertStage(LUT, cmsAT_END, cmsStageAllocMatrix(ContextID, 1, 3, PickLstarMatrix, NULL)))
         goto Error;
 
     if (!cmsPipelineInsertStage(LUT, cmsAT_END, OutLin))
         goto Error;
 
     if (!cmsWriteTag(hProfile, cmsSigBToA0Tag, (void*) LUT)) goto Error;
     if (!cmsWriteTag(hProfile, cmsSigMediaWhitePointTag, cmsD50_XYZ())) goto Error;
 
     cmsPipelineFree(LUT);
     return hProfile;
