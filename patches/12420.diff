commit e4d1558aa2c1c04a05066ee8600f37603890ba8c
Author: Tim RÃ¼hsen <tim.ruehsen@gmx.de>
Date:   Wed Jan 9 14:36:16 2019 +0100

    idn2_to_ascii_4i(): Restrict output length to 63

diff --git a/lib/lookup.c b/lib/lookup.c
index 7c5b52b..cc918d9 100644
--- a/lib/lookup.c
+++ b/lib/lookup.c
@@ -581,68 +581,76 @@ int
 idn2_to_ascii_4i (const uint32_t * input, size_t inlen, char * output, int flags)
 {
   uint32_t *input_u32;
   uint8_t *input_u8, *output_u8;
   size_t length;
   int rc;
 
   if (!input)
     {
       if (output)
 	*output = 0;
       return IDN2_OK;
     }
 
   input_u32 = (uint32_t *) malloc ((inlen + 1) * sizeof(uint32_t));
   if (!input_u32)
     return IDN2_MALLOC;
 
   u32_cpy (input_u32, input, inlen);
   input_u32[inlen] = 0;
 
   input_u8 = u32_to_u8 (input_u32, inlen + 1, NULL, &length);
   free (input_u32);
   if (!input_u8)
     {
       if (errno == ENOMEM)
 	return IDN2_MALLOC;
       return IDN2_ENCODING_ERROR;
     }
 
   rc = idn2_lookup_u8 (input_u8, &output_u8, flags);
   free (input_u8);
 
   if (rc == IDN2_OK)
     {
       /* wow, this is ugly, but libidn manpage states:
        * char * out  output zero terminated string that must have room for at
        * least 63 characters plus the terminating zero.
        */
+      size_t len = strlen ((char *) output_u8);
+
+      if (len > 63)
+        {
+	  free (output_u8);
+	  return IDN2_TOO_BIG_DOMAIN;
+        }
+
       if (output)
-	strcpy (output, (const char *) output_u8);
+	strcpy (output, (char *) output_u8);
 
-      free(output_u8);
+      free (output_u8);
     }
 
   return rc;
 }
 
 /**
  * idn2_to_ascii_4z:
  * @input: zero terminated input Unicode (UCS-4) string.
  * @output: pointer to newly allocated zero-terminated output string.
  * @flags: optional #idn2_flags to modify behaviour.
  *
  * Convert UCS-4 domain name to ASCII string using the IDNA2008
  * rules.  The domain name may contain several labels, separated by dots.
  * The output buffer must be deallocated by the caller.
  *
  * The default behavior of this function (when flags are zero) is to apply
  * the IDNA2008 rules without the TR46 amendments. As the TR46
  * non-transitional processing is nowadays ubiquitous, when unsure, it is
  * recommended to call this function with the %IDN2_NONTRANSITIONAL
  * and the %IDN2_NFC_INPUT flags for compatibility with other software.
  *
  * Return value: Returns %IDN2_OK on success, or error code.
  *
  * Since: 2.0.0
  **/
