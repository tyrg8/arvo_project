commit 9ad6eb501b55f27a17d6383fa5bdcb2328147685
Author: Leandro Pereira <leandro@hardinfo.org>
Date:   Sat May 4 18:15:10 2019 -0700

    Ensure there's a full request after ignoring leading whitespace
    
    Credit to OSS-Fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=14582

diff --git a/fuzz/clusterfuzz-testcase-minimized-request_fuzzer-5729298679332864 b/fuzz/clusterfuzz-testcase-minimized-request_fuzzer-5729298679332864
new file mode 100644
index 00000000..e234374b
Binary files /dev/null and b/fuzz/clusterfuzz-testcase-minimized-request_fuzzer-5729298679332864 differ
diff --git a/src/lib/lwan-request.c b/src/lib/lwan-request.c
index be3d42f7..5a28ae5f 100644
--- a/src/lib/lwan-request.c
+++ b/src/lib/lwan-request.c
@@ -1192,36 +1192,44 @@ parse_proxy_protocol(struct lwan_request *request, char *buffer)
 
 static enum lwan_http_status parse_http_request(struct lwan_request *request)
 {
+    const size_t min_request_size = sizeof("GET / HTTP/1.1\r\n\r\n") - 1;
     struct lwan_request_parser_helper *helper = request->helper;
     char *buffer = helper->buffer->value;
 
+    if (UNLIKELY(helper->buffer->len < min_request_size))
+        return HTTP_BAD_REQUEST;
+
     if (request->flags & REQUEST_ALLOW_PROXY_REQS) {
         /* REQUEST_ALLOW_PROXY_REQS will be cleared in lwan_process_request() */
 
         buffer = parse_proxy_protocol(request, buffer);
         if (UNLIKELY(!buffer))
             return HTTP_BAD_REQUEST;
     }
 
     buffer = ignore_leading_whitespace(buffer);
 
+    if (UNLIKELY(buffer >= helper->buffer->value + helper->buffer->len -
+                               min_request_size))
+        return HTTP_BAD_REQUEST;
+
     char *path = identify_http_method(request, buffer);
     if (UNLIKELY(!path))
         return HTTP_NOT_ALLOWED;
 
     buffer = identify_http_path(request, path);
     if (UNLIKELY(!buffer))
         return HTTP_BAD_REQUEST;
 
     if (UNLIKELY(!parse_headers(helper, buffer)))
         return HTTP_BAD_REQUEST;
 
     ssize_t decoded_len = url_decode(request->url.value);
     if (UNLIKELY(decoded_len < 0))
         return HTTP_BAD_REQUEST;
     request->original_url.len = request->url.len = (size_t)decoded_len;
 
     parse_connection_header(request);
 
     return HTTP_OK;
 }
