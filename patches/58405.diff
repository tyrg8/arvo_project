commit 38e5e7a1f535c85f0c0c699214aca533ba552a79
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Sat Apr 29 10:32:38 2023 +0100

    GhostPDF - fix buffer overrun reading corrupted CFF font
    
    OSS-fuzz #58405
    
    There is a guard to prevent buffer overruns, but it wasn't taking the
    NULL terminator into account. In addition, I think it is possible for
    the required number of bytes to be 4, not 3, if the byte pointed to
    is 0xCC (resulting in 'E-', 'E-' being generated) and then still
    potentially requiring a NULL terminator for a total of 5 bytes.
    
    Change the 3-byte minimum space requirement to 5.

diff --git a/pdf/pdf_font1C.c b/pdf/pdf_font1C.c
index e688de4ba..b1bd30318 100644
--- a/pdf/pdf_font1C.c
+++ b/pdf/pdf_font1C.c
@@ -689,61 +689,61 @@ static byte *
 pdfi_read_cff_real(byte *p, byte *e, float *val)
 {
     char buf[65];
     char *txt = buf;
 
     /* b0 was 30 */
 
-    while (txt < buf + (sizeof buf) - 3 && p < e) {
+    while (txt < buf + (sizeof buf) - 5 && p < e) {
         int b, n;
 
         b = *p++;
 
         n = (b >> 4) &0xf;
         if (n < 0xA) {
             *txt++ = n + '0';
         }
         else if (n == 0xA) {
             *txt++ = '.';
         }
         else if (n == 0xB) {
             *txt++ = 'E';
         }
         else if (n == 0xC) {
             *txt++ = 'E';
             *txt++ = '-';
         }
         else if (n == 0xE) {
             *txt++ = '-';
         }
         else if (n == 0xF) {
             break;
         }
 
         n = b &0xf;
         if (n < 0xA) {
             *txt++ = n + '0';
         }
         else if (n == 0xA) {
             *txt++ = '.';
         }
         else if (n == 0xB) {
             *txt++ = 'E';
         }
         else if (n == 0xC) {
             *txt++ = 'E';
             *txt++ = '-';
         }
         else if (n == 0xE) {
             *txt++ = '-';
         }
         else if (n == 0xF) {
             break;
         }
     }
 
     *txt = 0;
 
     *val = atof(buf);
 
     return p;
 }
