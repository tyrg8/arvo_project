commit a78cdb748a715796613c59f07575737b767fcab9
Author: Nickolay Olshevsky <o.nickolay@gmail.com>
Date:   Sun Sep 6 17:43:46 2020 +0300

    Fix oss-fuzz issue 25386 and slightly refactor parsing of the kbx header blob.

diff --git a/src/librekey/key_store_kbx.cpp b/src/librekey/key_store_kbx.cpp
index 44f90c93..7870a85b 100644
--- a/src/librekey/key_store_kbx.cpp
+++ b/src/librekey/key_store_kbx.cpp
@@ -67,51 +67,41 @@ ru32(uint8_t *p)
 static bool
 rnp_key_store_kbx_parse_header_blob(kbx_header_blob_t *first_blob)
 {
-    uint8_t *image = first_blob->blob.image;
-
-    image += BLOB_HEADER_SIZE;
+    uint8_t *image = first_blob->blob.image + BLOB_HEADER_SIZE;
 
     if (first_blob->blob.length != BLOB_FIRST_SIZE) {
         RNP_LOG("The first blob has wrong length: %" PRIu32 " but expected %d",
                 first_blob->blob.length,
                 (int) BLOB_FIRST_SIZE);
         return false;
     }
 
     first_blob->version = ru8(image);
     image += 1;
-
     if (first_blob->version != 1) {
         RNP_LOG("Wrong version, expect 1 but has %" PRIu8, first_blob->version);
         return false;
     }
 
     first_blob->flags = ru16(image);
     image += 2;
 
     // blob should contains a magic KBXf
-    if (strncasecmp((const char *) (image), "KBXf", 4)) {
+    if (memcmp(image, "KBXf", 4)) {
         RNP_LOG("The first blob hasn't got a KBXf magic string");
         return false;
     }
-
-    image += 3;
-
+    image += 4;
     // RFU
     image += 4;
-
+    // File creation time
     first_blob->file_created_at = ru32(image);
     image += 4;
-
-    first_blob->file_created_at = ru32(image + 15);
-    image += 4;
-
-    // RFU
-    image += 4;
-
-    // RFU
+    // Duplicated?
+    first_blob->file_created_at = ru32(image);
     image += 4;
-
+    // RFU +4 bytes
+    // RFU +4 bytes
     return true;
 }
 
@@ -351,70 +341,64 @@ rnp_key_store_kbx_parse_pgp_blob(kbx_pgp_blob_t *pgp_blob)
 static kbx_blob_t *
 rnp_key_store_kbx_parse_blob(uint8_t *image, uint32_t image_len)
 {
-    uint32_t      length;
-    kbx_blob_t *  blob;
-    kbx_blob_type type;
-
     // a blob shouldn't be less of length + type
     if (image_len < BLOB_HEADER_SIZE) {
         RNP_LOG("Blob size is %" PRIu32 " but it shouldn't be less of header", image_len);
         return NULL;
     }
 
-    length = ru32(image + 0);
-    type = (kbx_blob_type) ru8(image + 4);
+    uint32_t      length = ru32(image + 0);
+    kbx_blob_type type = (kbx_blob_type) ru8(image + 4);
+    size_t        bloblen = 0;
 
     switch (type) {
     case KBX_EMPTY_BLOB:
-        blob = (kbx_blob_t *) calloc(1, sizeof(kbx_blob_t));
+        bloblen = sizeof(kbx_blob_t);
         break;
-
     case KBX_HEADER_BLOB:
-        blob = (kbx_blob_t *) calloc(1, sizeof(kbx_header_blob_t));
+        bloblen = sizeof(kbx_header_blob_t);
         break;
-
     case KBX_PGP_BLOB:
-        blob = (kbx_blob_t *) calloc(1, sizeof(kbx_pgp_blob_t));
+        bloblen = sizeof(kbx_pgp_blob_t);
         break;
-
     case KBX_X509_BLOB:
         // current we doesn't parse X509 blob, so, keep it as is
-        blob = (kbx_blob_t *) calloc(1, sizeof(kbx_blob_t));
+        bloblen = sizeof(kbx_blob_t);
         break;
-
     // unsuported blob type
     default:
         RNP_LOG("Unsupported blob type: %d", (int) type);
         return NULL;
     }
 
-    if (blob == NULL) {
+    kbx_blob_t *blob = (kbx_blob_t *) calloc(1, bloblen);
+    if (!blob) {
         RNP_LOG("Can't allocate memory");
         return NULL;
     }
 
     blob->image = image;
     blob->length = length;
     blob->type = type;
 
     // call real parser of blob
     switch (type) {
     case KBX_HEADER_BLOB:
         if (!rnp_key_store_kbx_parse_header_blob((kbx_header_blob_t *) blob)) {
             free(blob);
             return NULL;
         }
         break;
     case KBX_PGP_BLOB:
         if (!rnp_key_store_kbx_parse_pgp_blob((kbx_pgp_blob_t *) blob)) {
             free_kbx_pgp_blob((kbx_pgp_blob_t *) blob);
             free(blob);
             return NULL;
         }
         break;
     default:
         break;
     }
 
     return blob;
 }
diff --git a/src/tests/data/test_fuzz_keyring_kbx/crash-5526a2e13255018c857ce493c28ce7108b8b2987 b/src/tests/data/test_fuzz_keyring_kbx/crash-5526a2e13255018c857ce493c28ce7108b8b2987
new file mode 100644
index 00000000..bee428ac
Binary files /dev/null and b/src/tests/data/test_fuzz_keyring_kbx/crash-5526a2e13255018c857ce493c28ce7108b8b2987 differ
diff --git a/src/tests/fuzz_keyring_kbx.cpp b/src/tests/fuzz_keyring_kbx.cpp
index 3cc6404c..8540dea3 100644
--- a/src/tests/fuzz_keyring_kbx.cpp
+++ b/src/tests/fuzz_keyring_kbx.cpp
@@ -35,5 +35,10 @@ extern "C" int keyring_kbx_LLVMFuzzerTestOneInput(const uint8_t *data, size_t si
 TEST_F(rnp_tests, test_fuzz_keyring_kbx)
 {
     auto data = file_to_vec(DATA_PATH "leak-52c65c00b53997178f4cd9defa0343573ea8dda6");
     assert_int_equal(keyring_kbx_LLVMFuzzerTestOneInput(data.data(), data.size()), 0);
+
+    /* Issue 25386 in oss-fuzz: rnp:fuzz_keyring_kbx: Heap-buffer-overflow in
+     * rnp_key_store_kbx_from_src */
+    data = file_to_vec(DATA_PATH "crash-5526a2e13255018c857ce493c28ce7108b8b2987");
+    assert_int_equal(keyring_kbx_LLVMFuzzerTestOneInput(data.data(), data.size()), 0);
 }
