commit 3e1f3df6183b2ed2cadf2af2383063891e2c53bd
Author: Werner Koch <wk@gnupg.org>
Date:   Fri Mar 15 08:55:06 2019 +0100

    gpg: Fix recently introduced use after free.
    
    * g10/mainproc.c (proc_plaintext): Do not use freed memory.
    --
    
    GnuPG-bug-id: 4407
    Signed-off-by: Werner Koch <wk@gnupg.org>

diff --git a/g10/mainproc.c b/g10/mainproc.c
index 6fa30e0d4..7acf67b1e 100644
--- a/g10/mainproc.c
+++ b/g10/mainproc.c
@@ -827,158 +827,158 @@ static void
 proc_plaintext( CTX c, PACKET *pkt )
 {
   PKT_plaintext *pt = pkt->pkt.plaintext;
   int any, clearsig, rc;
   kbnode_t n;
   unsigned char *extrahash;
   size_t extrahashlen;
 
   /* This is a literal data packet.  Bump a counter for later checks.  */
   literals_seen++;
 
   if (pt->namelen == 8 && !memcmp( pt->name, "_CONSOLE", 8))
     log_info (_("Note: sender requested \"for-your-eyes-only\"\n"));
   else if (opt.verbose)
     {
       /* We don't use print_utf8_buffer because that would require a
        * string change which we don't want in 2.2.  It is also not
        * clear whether the filename is always utf-8 encoded.  */
       char *tmp = make_printable_string (pt->name, pt->namelen, 0);
       log_info (_("original file name='%.*s'\n"), (int)strlen (tmp), tmp);
       xfree (tmp);
     }
 
   free_md_filter_context (&c->mfx);
   if (gcry_md_open (&c->mfx.md, 0, 0))
     BUG ();
   /* fixme: we may need to push the textfilter if we have sigclass 1
    * and no armoring - Not yet tested
    * Hmmm, why don't we need it at all if we have sigclass 1
    * Should we assume that plaintext in mode 't' has always sigclass 1??
    * See: Russ Allbery's mail 1999-02-09
    */
   any = clearsig = 0;
   for (n=c->list; n; n = n->next )
     {
       if (n->pkt->pkttype == PKT_ONEPASS_SIG)
         {
           /* The onepass signature case. */
           if (n->pkt->pkt.onepass_sig->digest_algo)
             {
               if (!opt.skip_verify)
                 gcry_md_enable (c->mfx.md,
                                 n->pkt->pkt.onepass_sig->digest_algo);
 
               any = 1;
             }
         }
       else if (n->pkt->pkttype == PKT_GPG_CONTROL
                && n->pkt->pkt.gpg_control->control == CTRLPKT_CLEARSIGN_START)
         {
           /* The clearsigned message case. */
           size_t datalen = n->pkt->pkt.gpg_control->datalen;
           const byte *data = n->pkt->pkt.gpg_control->data;
 
           /* Check that we have at least the sigclass and one hash.  */
           if  (datalen < 2)
             log_fatal ("invalid control packet CTRLPKT_CLEARSIGN_START\n");
           /* Note that we don't set the clearsig flag for not-dash-escaped
            * documents.  */
           clearsig = (*data == 0x01);
           for (data++, datalen--; datalen; datalen--, data++)
             if (!opt.skip_verify)
               gcry_md_enable (c->mfx.md, *data);
           any = 1;
           break;  /* Stop here as one-pass signature packets are not
                      expected.  */
         }
       else if (n->pkt->pkttype == PKT_SIGNATURE)
         {
           /* The SIG+LITERAL case that PGP used to use.  */
           if (!opt.skip_verify)
             gcry_md_enable (c->mfx.md, n->pkt->pkt.signature->digest_algo);
           any = 1;
         }
     }
 
   if (!any && !opt.skip_verify && !have_seen_pkt_encrypted_aead(c))
     {
       /* This is for the old GPG LITERAL+SIG case.  It's not legal
          according to 2440, so hopefully it won't come up that often.
          There is no good way to specify what algorithms to use in
          that case, so these there are the historical answer. */
 	gcry_md_enable (c->mfx.md, DIGEST_ALGO_RMD160);
 	gcry_md_enable (c->mfx.md, DIGEST_ALGO_SHA1);
     }
   if (DBG_HASHING)
     {
       gcry_md_debug (c->mfx.md, "verify");
       if (c->mfx.md2)
         gcry_md_debug (c->mfx.md2, "verify2");
     }
 
   rc=0;
 
   if (literals_seen > 1)
     {
       log_info (_("WARNING: multiple plaintexts seen\n"));
 
       write_status_text (STATUS_ERROR, "proc_pkt.plaintext 89_BAD_DATA");
       log_inc_errorcount ();
       rc = gpg_error (GPG_ERR_UNEXPECTED);
     }
 
   if (!rc)
     {
       /* It we are in --verify mode, we do not want to output the
        * signed text.  However, if --output is also used we do what
        * has been requested and write out the signed data.  */
       rc = handle_plaintext (pt, &c->mfx,
                              (opt.outfp || opt.outfile)? 0 :  c->sigs_only,
                              clearsig);
       if (gpg_err_code (rc) == GPG_ERR_EACCES && !c->sigs_only)
         {
           /* Can't write output but we hash it anyway to check the
              signature. */
           rc = handle_plaintext( pt, &c->mfx, 1, clearsig );
         }
     }
 
   if (rc)
     log_error ("handle plaintext failed: %s\n", gpg_strerror (rc));
 
-  free_packet (pkt, NULL);
-  c->last_was_session_key = 0;
-
   /* We add a marker control packet instead of the plaintext packet.
    * This is so that we can later detect invalid packet sequences.
    * The apcket is further used to convey extra data from the
    * plaintext packet to the signature verification. */
   extrahash = xtrymalloc (6 + pt->namelen);
   if (!extrahash)
     {
       /* No way to return an error.  */
       rc = gpg_error_from_syserror ();
       log_error ("malloc failed in %s: %s\n", __func__, gpg_strerror (rc));
       extrahashlen = 0;
     }
   else
     {
       extrahash[0] = pt->mode;
       extrahash[1] = pt->namelen;
       if (pt->namelen)
         memcpy (extrahash+2, pt->name, pt->namelen);
       extrahashlen = 2 + pt->namelen;
       extrahash[extrahashlen++] = pt->timestamp >> 24;
       extrahash[extrahashlen++] = pt->timestamp >> 16;
       extrahash[extrahashlen++] = pt->timestamp >>  8;
       extrahash[extrahashlen++] = pt->timestamp      ;
     }
 
+  free_packet (pkt, NULL);
+  c->last_was_session_key = 0;
+
   n = new_kbnode (create_gpg_control (CTRLPKT_PLAINTEXT_MARK,
                                       extrahash, extrahashlen));
   xfree (extrahash);
   if (c->list)
     add_kbnode (c->list, n);
   else
     c->list = n;
 }
