commit 1e6558ad6fb4cb508bd6a9d115e0899eaf6d3926
Author: Frank Morgner <frankmorgner@gmail.com>
Date:   Sat Apr 30 00:42:50 2022 +0200

    fixed input checking
    
    fixes Heap-buffer-overflow READ 1 Â· sc_pkcs15init_delete_by_path
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=46653

diff --git a/src/pkcs15init/pkcs15-lib.c b/src/pkcs15init/pkcs15-lib.c
index 3e96fc6e..718d458c 100644
--- a/src/pkcs15init/pkcs15-lib.c
+++ b/src/pkcs15init/pkcs15-lib.c
@@ -571,80 +571,82 @@ int
 sc_pkcs15init_delete_by_path(struct sc_profile *profile, struct sc_pkcs15_card *p15card,
 		const struct sc_path *file_path)
 {
 	struct sc_context *ctx = p15card->card->ctx;
 	struct sc_file *parent = NULL, *file = NULL;
 	struct sc_path path;
 	int rv;
 	/*int file_type = SC_FILE_TYPE_DF;*/
 
 	LOG_FUNC_CALLED(ctx);
 	sc_log(ctx, "trying to delete '%s'", sc_print_path(file_path));
 
 	/* For some cards, to delete file should be satisfied the 'DELETE' ACL of the file itself,
 	 * for the others the 'DELETE' ACL of parent.
 	 * Let's start from the file's 'DELETE' ACL.
 	 *
 	 * TODO: 'DELETE_SELF' exists. Proper solution would be to use this acl by every
 	 * card (driver and profile) that uses self delete ACL.
 	 */
 	/* Select the file itself */
-        path = *file_path;
-        rv = sc_select_file(p15card->card, &path, &file);
-        LOG_TEST_RET(ctx, rv, "cannot select file to delete");
+	path = *file_path;
+	rv = sc_select_file(p15card->card, &path, &file);
+	LOG_TEST_RET(ctx, rv, "cannot select file to delete");
 
 	if (sc_file_get_acl_entry(file, SC_AC_OP_DELETE_SELF))   {
 		sc_log(ctx, "Found 'DELETE-SELF' acl");
 		rv = sc_pkcs15init_authenticate(profile, p15card, file, SC_AC_OP_DELETE_SELF);
 		sc_file_free(file);
 	}
 	else if (sc_file_get_acl_entry(file, SC_AC_OP_DELETE))   {
 		sc_log(ctx, "Found 'DELETE' acl");
 	        rv = sc_pkcs15init_authenticate(profile, p15card, file, SC_AC_OP_DELETE);
 		sc_file_free(file);
 	}
 	else    {
 		sc_log(ctx, "Try to get the parent's 'DELETE' access");
 		/*file_type = file->type;*/
 		if (file_path->len >= 2) {
 			/* Select the parent DF */
 			path.len -= 2;
 			rv = sc_select_file(p15card->card, &path, &parent);
 			LOG_TEST_RET(ctx, rv, "Cannot select parent");
 
 			rv = sc_pkcs15init_authenticate(profile, p15card, parent, SC_AC_OP_DELETE);
 			sc_file_free(parent);
 			LOG_TEST_RET(ctx, rv, "parent 'DELETE' authentication failed");
 		}
 	}
 	LOG_TEST_RET(ctx, rv, "'DELETE' authentication failed");
 
 	/* Reselect file to delete: current path could be changed by 'verify PIN' procedure */
 	path = *file_path;
 	rv = sc_select_file(p15card->card, &path, &file);
 	LOG_TEST_RET(ctx, rv, "cannot select file to delete");
 
 	memset(&path, 0, sizeof(path));
 	path.type = SC_PATH_TYPE_FILE_ID;
+	if (file_path->len < 2)
+		LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_ARGUMENTS);
 	path.value[0] = file_path->value[file_path->len - 2];
 	path.value[1] = file_path->value[file_path->len - 1];
 	path.len = 2;
 
 	/* Reselect file to delete if the parent DF was selected and it's not DF. */
 /*
 	if (file_type != SC_FILE_TYPE_DF)   {
 		rv = sc_select_file(p15card->card, &path, &file);
 		LOG_TEST_RET(ctx, rv, "cannot select file to delete");
 	}
 */
 
 	sc_log(ctx, "Now really delete file");
 	rv = sc_delete_file(p15card->card, &path);
 	LOG_FUNC_RETURN(ctx, rv);
 }
 
 
 /*
  * Try to delete a file (and, in the DF case, its contents).
  * Note that this will not work if a pkcs#15 file's ERASE AC
  * references a pin other than the SO pin.
  */
