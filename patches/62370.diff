commit 108217f4bb1afb8b25fc705c2722b3e328b1ad78
Author: Jo√£o Valverde <j@v6e.pt>
Date:   Sat Sep 16 06:59:12 2023 +0100

    addr_resolv: Fix a heap buffer overflow
    
    Make sure we always pass at least 6 bytes to ws_manuf_lookup_str().
    
    Fixes #19344.

diff --git a/epan/addr_resolv.c b/epan/addr_resolv.c
index d9ad4921f9..8b6af813aa 100644
--- a/epan/addr_resolv.c
+++ b/epan/addr_resolv.c
@@ -1669,50 +1669,52 @@ add_manuf_name(const guint8 *addr, unsigned int mask, gchar *name, gchar *longna
 } /* add_manuf_name */
 
 static hashmanuf_t *
-manuf_name_lookup(const guint8 *addr)
+manuf_name_lookup(const guint8 *addr, size_t size)
 {
     guint32       manuf_key;
     guint8       oct;
     hashmanuf_t  *manuf_value;
 
+    ws_return_val_if(size < 6, NULL);
+
     /* manuf needs only the 3 most significant octets of the ethernet address */
     manuf_key = addr[0];
     manuf_key = manuf_key<<8;
     oct = addr[1];
     manuf_key = manuf_key | oct;
     manuf_key = manuf_key<<8;
     oct = addr[2];
     manuf_key = manuf_key | oct;
 
 
     /* first try to find a "perfect match" */
     manuf_value = (hashmanuf_t*)wmem_map_lookup(manuf_hashtable, GUINT_TO_POINTER(manuf_key));
     if (manuf_value != NULL) {
         return manuf_value;
     }
 
     /* Mask out the broadcast/multicast flag but not the locally
      * administered flag as locally administered means: not assigned
      * by the IEEE but the local administrator instead.
      * 0x01 multicast / broadcast bit
      * 0x02 locally administered bit */
     if ((manuf_key & 0x00010000) != 0) {
         manuf_key &= 0x00FEFFFF;
         manuf_value = (hashmanuf_t*)wmem_map_lookup(manuf_hashtable, GUINT_TO_POINTER(manuf_key));
         if (manuf_value != NULL) {
             return manuf_value;
         }
     }
 
     /* Try the global manuf tables. */
     const char *short_name, *long_name;
     short_name = ws_manuf_lookup_str(addr, &long_name);
     if (short_name != NULL) {
         /* Found it */
         return manuf_hash_new_entry(addr, short_name, long_name);
     }
 
     /* Add the address as a hex string */
     return manuf_hash_new_entry(addr, NULL, NULL);
 
 } /* manuf_name_lookup */
@@ -1869,104 +1871,105 @@ static hashether_t *
 eth_addr_resolve(hashether_t *tp) {
     ether_t      *eth;
     hashmanuf_t *manuf_value;
     const guint8 *addr = tp->addr;
+    size_t addr_size = sizeof(tp->addr);
 
     if ( (eth = get_ethbyaddr(addr)) != NULL) {
         (void) g_strlcpy(tp->resolved_name, eth->name, MAXNAMELEN);
         tp->status = HASHETHER_STATUS_RESOLVED_NAME;
         return tp;
     } else {
         guint         mask;
         gchar        *name;
         address       ether_addr;
 
         /* Unknown name.  Try looking for it in the well-known-address
            tables for well-known address ranges smaller than 2^24. */
         mask = 7;
         do {
             /* Only the topmost 5 bytes participate fully */
             if ((name = wka_name_lookup(addr, mask+40)) != NULL) {
                 snprintf(tp->resolved_name, MAXNAMELEN, "%s_%02x",
                         name, addr[5] & (0xFF >> mask));
                 tp->status = HASHETHER_STATUS_RESOLVED_DUMMY;
                 return tp;
             }
         } while (mask--);
 
         mask = 7;
         do {
             /* Only the topmost 4 bytes participate fully */
             if ((name = wka_name_lookup(addr, mask+32)) != NULL) {
                 snprintf(tp->resolved_name, MAXNAMELEN, "%s_%02x:%02x",
                         name, addr[4] & (0xFF >> mask), addr[5]);
                 tp->status = HASHETHER_STATUS_RESOLVED_DUMMY;
                 return tp;
             }
         } while (mask--);
 
         mask = 7;
         do {
             /* Only the topmost 3 bytes participate fully */
             if ((name = wka_name_lookup(addr, mask+24)) != NULL) {
                 snprintf(tp->resolved_name, MAXNAMELEN, "%s_%02x:%02x:%02x",
                         name, addr[3] & (0xFF >> mask), addr[4], addr[5]);
                 tp->status = HASHETHER_STATUS_RESOLVED_DUMMY;
                 return tp;
             }
         } while (mask--);
 
         /* Now try looking in the manufacturer table. */
-        manuf_value = manuf_name_lookup(addr);
+        manuf_value = manuf_name_lookup(addr, addr_size);
         if ((manuf_value != NULL) && (manuf_value->status != HASHETHER_STATUS_UNRESOLVED)) {
             snprintf(tp->resolved_name, MAXNAMELEN, "%s_%02x:%02x:%02x",
                     manuf_value->resolved_name, addr[3], addr[4], addr[5]);
             tp->status = HASHETHER_STATUS_RESOLVED_DUMMY;
             return tp;
         }
 
         /* Now try looking for it in the well-known-address
            tables for well-known address ranges larger than 2^24. */
         mask = 7;
         do {
             /* Only the topmost 2 bytes participate fully */
             if ((name = wka_name_lookup(addr, mask+16)) != NULL) {
                 snprintf(tp->resolved_name, MAXNAMELEN, "%s_%02x:%02x:%02x:%02x",
                         name, addr[2] & (0xFF >> mask), addr[3], addr[4],
                         addr[5]);
                 tp->status = HASHETHER_STATUS_RESOLVED_DUMMY;
                 return tp;
             }
         } while (mask--);
 
         mask = 7;
         do {
             /* Only the topmost byte participates fully */
             if ((name = wka_name_lookup(addr, mask+8)) != NULL) {
                 snprintf(tp->resolved_name, MAXNAMELEN, "%s_%02x:%02x:%02x:%02x:%02x",
                         name, addr[1] & (0xFF >> mask), addr[2], addr[3],
                         addr[4], addr[5]);
                 tp->status = HASHETHER_STATUS_RESOLVED_DUMMY;
                 return tp;
             }
         } while (mask--);
 
         mask = 7;
         do {
             /* Not even the topmost byte participates fully */
             if ((name = wka_name_lookup(addr, mask)) != NULL) {
                 snprintf(tp->resolved_name, MAXNAMELEN, "%s_%02x:%02x:%02x:%02x:%02x:%02x",
                         name, addr[0] & (0xFF >> mask), addr[1], addr[2],
                         addr[3], addr[4], addr[5]);
                 tp->status = HASHETHER_STATUS_RESOLVED_DUMMY;
                 return tp;
             }
         } while (--mask); /* Work down to the last bit */
 
         /* No match whatsoever. */
         set_address(&ether_addr, AT_ETHER, 6, addr);
         address_to_str_buf(&ether_addr, tp->resolved_name, MAXNAMELEN);
         tp->status = HASHETHER_STATUS_RESOLVED_DUMMY;
         return tp;
     }
     ws_assert_not_reached();
 } /* eth_addr_resolve */
@@ -3484,14 +3487,14 @@ get_vlan_name(wmem_allocator_t *allocator, const guint16 id)
 } /* get_vlan_name */
 
 const gchar *
-get_manuf_name(const guint8 *addr)
+get_manuf_name(const guint8 *addr, size_t size)
 {
     hashmanuf_t *manuf_value;
 
-    manuf_value = manuf_name_lookup(addr);
+    manuf_value = manuf_name_lookup(addr, size);
     if (gbl_resolv_flags.mac_name && manuf_value->status != HASHETHER_STATUS_UNRESOLVED)
         return manuf_value->resolved_name;
 
     return manuf_value->hexaddr;
 
 } /* get_manuf_name */
@@ -3499,38 +3502,42 @@ get_manuf_name(const guint8 *addr)
 const gchar *
 tvb_get_manuf_name(tvbuff_t *tvb, gint offset)
 {
-    return get_manuf_name(tvb_get_ptr(tvb, offset, 3));
+    guint8 buf[6] = { 0 };
+    tvb_memcpy(tvb, buf, offset, 3);
+    return get_manuf_name(buf, sizeof(buf));
 }
 
 const gchar *
-get_manuf_name_if_known(const guint8 *addr)
+get_manuf_name_if_known(const guint8 *addr, size_t size)
 {
     hashmanuf_t *manuf_value;
     guint manuf_key;
     guint8 oct;
 
+    ws_return_val_if(size != 6, NULL);
+
     /* manuf needs only the 3 most significant octets of the ethernet address */
     manuf_key = addr[0];
     manuf_key = manuf_key<<8;
     oct = addr[1];
     manuf_key = manuf_key | oct;
     manuf_key = manuf_key<<8;
     oct = addr[2];
     manuf_key = manuf_key | oct;
 
     manuf_value = (hashmanuf_t *)wmem_map_lookup(manuf_hashtable, GUINT_TO_POINTER(manuf_key));
     if (manuf_value != NULL && manuf_value->status != HASHETHER_STATUS_UNRESOLVED) {
         return manuf_value->resolved_longname;
     }
 
     /* Try the global manuf tables. */
     const char *short_name, *long_name;
     short_name = ws_manuf_lookup_str(addr, &long_name);
     if (short_name != NULL) {
         /* Found it */
         return long_name;
     }
 
     return NULL;
 
 } /* get_manuf_name_if_known */
@@ -3564,7 +3571,9 @@ uint_get_manuf_name_if_known(const guint32 manuf_key)
 const gchar *
 tvb_get_manuf_name_if_known(tvbuff_t *tvb, gint offset)
 {
-    return get_manuf_name_if_known(tvb_get_ptr(tvb, offset, 3));
+    guint8 buf[6] = { 0 };
+    tvb_memcpy(tvb, buf, offset, 3);
+    return get_manuf_name_if_known(buf, sizeof(buf));
 }
 
 char* get_hash_manuf_resolved_name(hashmanuf_t* manuf)
@@ -3576,21 +3585,21 @@ gchar *
 eui64_to_display(wmem_allocator_t *allocator, const guint64 addr_eui64)
 {
     guint8 *addr = (guint8 *)wmem_alloc(NULL, 8);
     hashmanuf_t *manuf_value;
     gchar *ret;
 
     /* Copy and convert the address to network byte order. */
     *(guint64 *)(void *)(addr) = pntoh64(&(addr_eui64));
 
-    manuf_value = manuf_name_lookup(addr);
+    manuf_value = manuf_name_lookup(addr, 8);
     if (!gbl_resolv_flags.mac_name || (manuf_value->status == HASHETHER_STATUS_UNRESOLVED)) {
         ret = wmem_strdup_printf(allocator, "%02x:%02x:%02x:%02x:%02x:%02x:%02x:%02x", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5], addr[6], addr[7]);
     } else {
         ret = wmem_strdup_printf(allocator, "%s_%02x:%02x:%02x:%02x:%02x", manuf_value->resolved_name, addr[3], addr[4], addr[5], addr[6], addr[7]);
     }
 
     wmem_free(NULL, addr);
     return ret;
 } /* eui64_to_display */
 
 #define GHI_TIMEOUT (250 * 1000)
diff --git a/epan/addr_resolv.h b/epan/addr_resolv.h
index b4cbe749f9..fb38eb4659 100644
--- a/epan/addr_resolv.h
+++ b/epan/addr_resolv.h
@@ -224,16 +224,16 @@ const gchar *get_ether_name_if_known(const guint8 *addr);
 /*
  * Given a sequence of 3 octets containing an OID, get_manuf_name()
  * returns the vendor name, or "%02x:%02x:%02x" if not known.
  */
-extern const gchar *get_manuf_name(const guint8 *addr);
+extern const gchar *get_manuf_name(const guint8 *addr, size_t size);
 
 /*
  * Given a sequence of 3 octets containing an OID, get_manuf_name_if_known()
  * returns the vendor name, or NULL if not known.
  */
-WS_DLL_PUBLIC const gchar *get_manuf_name_if_known(const guint8 *addr);
+WS_DLL_PUBLIC const gchar *get_manuf_name_if_known(const guint8 *addr, size_t size);
 
 /*
  * Given an integer containing a 24-bit OID, uint_get_manuf_name_if_known()
  * returns the vendor name, or NULL if not known.
  */
diff --git a/epan/address_types.c b/epan/address_types.c
index 1985ba19e2..c0bb05cf14 100644
--- a/epan/address_types.c
+++ b/epan/address_types.c
@@ -373,28 +373,28 @@ static int fcwwn_len(void)
 static const gchar* fcwwn_name_res_str(const address* addr)
 {
     const guint8 *addrp = (const guint8*)addr->data;
     int fmt;
     guint8 oui[6];
 
     fmt = (addrp[0] & 0xF0) >> 4;
     switch (fmt) {
 
     case FC_NH_NAA_IEEE:
     case FC_NH_NAA_IEEE_E:
 
         memcpy (oui, &addrp[2], 6);
-        return get_manuf_name(oui);
+        return get_manuf_name(oui, sizeof(oui));
 
     case FC_NH_NAA_IEEE_R:
         oui[0] = ((addrp[0] & 0x0F) << 4) | ((addrp[1] & 0xF0) >> 4);
         oui[1] = ((addrp[1] & 0x0F) << 4) | ((addrp[2] & 0xF0) >> 4);
         oui[2] = ((addrp[2] & 0x0F) << 4) | ((addrp[3] & 0xF0) >> 4);
         oui[3] = ((addrp[3] & 0x0F) << 4) | ((addrp[4] & 0xF0) >> 4);
         oui[4] = ((addrp[4] & 0x0F) << 4) | ((addrp[5] & 0xF0) >> 4);
         oui[5] = ((addrp[5] & 0x0F) << 4) | ((addrp[6] & 0xF0) >> 4);
 
-        return get_manuf_name(oui);
+        return get_manuf_name(oui, sizeof(oui));
     }
 
     return "";
 }
