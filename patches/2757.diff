commit 0d356d11bd3c6831b01951065337e84b8b110da0
Author: Jonathan Hui <jonhui@nestlabs.com>
Date:   Thu Jul 27 21:43:36 2017 -0700

    [lowpan] validate received fragment headers (#2038)
    
    Credit to OSS-Fuzz.

diff --git a/src/core/thread/lowpan.cpp b/src/core/thread/lowpan.cpp
index f3bc718b6..f14ae9fca 100644
--- a/src/core/thread/lowpan.cpp
+++ b/src/core/thread/lowpan.cpp
@@ -1174,6 +1174,27 @@ otError MeshHeader::Init(const Message &aMessage)
 exit:
     return error;
 }
 
+otError FragmentHeader::Init(const uint8_t *aFrame, uint8_t aFrameLength)
+{
+    otError error = OT_ERROR_PARSE;
+
+    VerifyOrExit(aFrameLength >= sizeof(mDispatchSize) + sizeof(mTag));
+    memcpy(&mDispatchSize, aFrame, sizeof(mDispatchSize) + sizeof(mTag));
+    aFrame += sizeof(mDispatchSize) + sizeof(mTag);
+    aFrameLength -= sizeof(mDispatchSize) + sizeof(mTag);
+
+    if (IsOffsetPresent())
+    {
+        VerifyOrExit(aFrameLength >= sizeof(mOffset));
+        mOffset = *aFrame++;
+    }
+
+    error = OT_ERROR_NONE;
+
+exit:
+    return error;
+}
+
 }  // namespace Lowpan
 }  // namespace ot
diff --git a/src/core/thread/lowpan.hpp b/src/core/thread/lowpan.hpp
index 197dc2f40..9f359587a 100644
--- a/src/core/thread/lowpan.hpp
+++ b/src/core/thread/lowpan.hpp
@@ -392,84 +392,102 @@ class FragmentHeader
 {
 public:
     /**
      * This method initializes the Fragment Header.
      *
      */
     void Init(void) { mDispatchSize = HostSwap16(kDispatch); }
 
+    /**
+     * This method initializes the fragment header from a frame @p aFrame.
+     *
+     * @param[in]  aFrame        The pointer to the frame.
+     * @param[in]  aFrameLength  The length of the frame.
+     *
+     * @retval OT_ERROR_NONE     Fragment Header initialized successfully.
+     * @retval OT_ERROR_PARSE    Fragment header could not be initialized from @p aFrame (e.g., frame not long enough).
+     *
+     */
+    otError Init(const uint8_t *aFrame, uint8_t aFrameLength);
+
     /**
      * This method indicates whether or not the header is a Fragment Header.
      *
      * @retval TRUE   If the header matches the Fragment Header dispatch value.
      * @retval FALSE  If the header does not match the Fragment Header dispatch value.
      *
      */
     bool IsFragmentHeader(void) { return (HostSwap16(mDispatchSize) & kDispatchMask) == kDispatch; }
 
     /**
      * This method returns the Fragment Header length.
      *
      * @returns The Fragment Header length in bytes.
      *
      */
-    uint8_t GetHeaderLength(void) {
-        return (HostSwap16(mDispatchSize) & kOffset) ? sizeof(*this) : sizeof(*this) - sizeof(mOffset);
-    }
+    uint8_t GetHeaderLength(void) const { return IsOffsetPresent() ? sizeof(*this) : sizeof(*this) - sizeof(mOffset); }
+
+    /**
+     * This method indicates whether or not the Offset field is present.
+     *
+     * @returns TRUE if the Offset field is present, FALSE otherwise.
+     *
+     */
+    bool IsOffsetPresent(void) const { return (HostSwap16(mDispatchSize) & kOffset) != 0; }
 
     /**
      * This method returns the Datagram Size value.
      *
      * @returns The Datagram Size value.
      *
      */
-    uint16_t GetDatagramSize(void) { return HostSwap16(mDispatchSize) & kSizeMask; }
+    uint16_t GetDatagramSize(void) const { return HostSwap16(mDispatchSize) & kSizeMask; }
 
     /**
      * This method sets the Datagram Size value.
      *
      * @param[in]  aSize  The Datagram Size value.
      *
      */
     void SetDatagramSize(uint16_t aSize) {
         mDispatchSize = HostSwap16((HostSwap16(mDispatchSize) & ~kSizeMask) | (aSize & kSizeMask));
     }
 
     /**
      * This method returns the Datagram Tag value.
      *
      * @returns The Datagram Tag value.
      *
      */
-    uint16_t GetDatagramTag(void) { return HostSwap16(mTag); }
+    uint16_t GetDatagramTag(void) const { return HostSwap16(mTag); }
 
     /**
      * This method sets the Datagram Tag value.
      *
      * @param[in]  aTag  The Datagram Tag value.
      *
      */
     void SetDatagramTag(uint16_t aTag) { mTag = HostSwap16(aTag); }
 
     /**
      * This method returns the Datagram Offset value.
      *
      * @returns The Datagram Offset value.
      *
      */
-    uint16_t GetDatagramOffset(void) { return (HostSwap16(mDispatchSize) & kOffset) ? static_cast<uint16_t>(mOffset) * 8 : 0; }
+    uint16_t GetDatagramOffset(void) const { return IsOffsetPresent() ? static_cast<uint16_t>(mOffset) * 8 : 0; }
 
     /**
      * This method sets the Datagram Offset value.
      *
      * @param[in]  aOffset  The Datagram Offset value.
      *
      */
     void SetDatagramOffset(uint16_t aOffset) {
         if (aOffset == 0) {
             mDispatchSize = HostSwap16(HostSwap16(mDispatchSize) & ~kOffset);
         }
         else {
             mDispatchSize = HostSwap16(HostSwap16(mDispatchSize) | kOffset);
             mOffset = (aOffset >> 3) & kOffsetMask;
         }
     }
diff --git a/src/core/thread/mesh_forwarder.cpp b/src/core/thread/mesh_forwarder.cpp
index cc777015c..ff22e3cd0 100644
--- a/src/core/thread/mesh_forwarder.cpp
+++ b/src/core/thread/mesh_forwarder.cpp
@@ -1995,98 +1995,95 @@ exit:
 void MeshForwarder::HandleFragment(uint8_t *aFrame, uint8_t aFrameLength,
                                    const Mac::Address &aMacSource, const Mac::Address &aMacDest,
                                    const ThreadMessageInfo &aMessageInfo)
 {
     ThreadNetif &netif = GetNetif();
     otError error = OT_ERROR_NONE;
-    Lowpan::FragmentHeader *fragmentHeader = reinterpret_cast<Lowpan::FragmentHeader *>(aFrame);
-    uint16_t datagramLength = fragmentHeader->GetDatagramSize();
-    uint16_t datagramTag = fragmentHeader->GetDatagramTag();
+    Lowpan::FragmentHeader fragmentHeader;
     Message *message = NULL;
     int headerLength;
 
-    if (fragmentHeader->GetDatagramOffset() == 0)
-    {
-        aFrame += fragmentHeader->GetHeaderLength();
-        aFrameLength -= fragmentHeader->GetHeaderLength();
+    // Check the fragment header
+    VerifyOrExit(fragmentHeader.Init(aFrame, aFrameLength) == OT_ERROR_NONE, error = OT_ERROR_DROP);
+    aFrame += fragmentHeader.GetHeaderLength();
+    aFrameLength -= fragmentHeader.GetHeaderLength();
 
+    if (fragmentHeader.GetDatagramOffset() == 0)
+    {
         VerifyOrExit((message = GetInstance().mMessagePool.New(Message::kTypeIp6, 0)) != NULL,
                      error = OT_ERROR_NO_BUFS);
         message->SetLinkSecurityEnabled(aMessageInfo.mLinkSecurity);
         message->SetPanId(aMessageInfo.mPanId);
         message->AddRss(aMessageInfo.mRss);
         headerLength = netif.GetLowpan().Decompress(*message, aMacSource, aMacDest, aFrame, aFrameLength,
-                                                    datagramLength);
+                                                    fragmentHeader.GetDatagramSize());
         VerifyOrExit(headerLength > 0, error = OT_ERROR_PARSE);
 
         aFrame += headerLength;
         aFrameLength -= static_cast<uint8_t>(headerLength);
 
-        VerifyOrExit(datagramLength >= message->GetOffset() + aFrameLength, error = OT_ERROR_PARSE);
+        VerifyOrExit(fragmentHeader.GetDatagramSize() >= message->GetOffset() + aFrameLength, error = OT_ERROR_PARSE);
 
-        SuccessOrExit(error = message->SetLength(datagramLength));
+        SuccessOrExit(error = message->SetLength(fragmentHeader.GetDatagramSize()));
 
-        message->SetDatagramTag(datagramTag);
+        message->SetDatagramTag(fragmentHeader.GetDatagramTag());
         message->SetTimeout(kReassemblyTimeout);
 
         // copy Fragment
         message->Write(message->GetOffset(), aFrameLength, aFrame);
         message->MoveOffset(aFrameLength);
 
         // Security Check
         VerifyOrExit(netif.GetIp6Filter().Accept(*message), error = OT_ERROR_DROP);
 
         // Allow re-assembly of only one message at a time on a SED by clearing
         // any remaining fragments in reassembly list upon receiving of a new
         // (secure) first fragment.
 
         if ((GetRxOnWhenIdle() == false) && message->IsLinkSecurityEnabled())
         {
             ClearReassemblyList();
         }
 
         mReassemblyList.Enqueue(*message);
 
         if (!mReassemblyTimer.IsRunning())
         {
             mReassemblyTimer.Start(kStateUpdatePeriod);
         }
     }
     else
     {
-        aFrame += fragmentHeader->GetHeaderLength();
-        aFrameLength -= fragmentHeader->GetHeaderLength();
-
         for (message = mReassemblyList.GetHead(); message; message = message->GetNext())
         {
             // Security Check: only consider reassembly buffers that had the same Security Enabled setting.
-            if (message->GetLength() == datagramLength &&
-                message->GetDatagramTag() == datagramTag &&
-                message->GetOffset() == fragmentHeader->GetDatagramOffset() &&
-                message->GetOffset() + aFrameLength <= datagramLength &&
+            if (message->GetLength() == fragmentHeader.GetDatagramSize() &&
+                message->GetDatagramTag() == fragmentHeader.GetDatagramTag() &&
+                message->GetOffset() == fragmentHeader.GetDatagramOffset() &&
+                message->GetOffset() + aFrameLength <= fragmentHeader.GetDatagramSize() &&
                 message->IsLinkSecurityEnabled() == aMessageInfo.mLinkSecurity)
             {
                 break;
             }
         }
 
         // For a sleepy-end-device, if we receive a new (secure) next fragment
         // with a non-matching fragmentation offset or tag, it indicates that
         // we have either missed a fragment, or the parent has moved to a new
         // message with a new tag. In either case, we can safely clear any
         // remaining fragments stored in the reassembly list.
 
         if (GetRxOnWhenIdle() == false)
         {
             if ((message == NULL) && (aMessageInfo.mLinkSecurity))
             {
                 ClearReassemblyList();
             }
         }
 
         VerifyOrExit(message != NULL, error = OT_ERROR_DROP);
 
         // copy Fragment
         message->Write(message->GetOffset(), aFrameLength, aFrame);
         message->MoveOffset(aFrameLength);
         message->AddRss(aMessageInfo.mRss);
     }
@@ -2094,37 +2091,37 @@ void MeshForwarder::HandleFragment(uint8_t *aFrame, uint8_t aFrameLength,
 exit:
 
     if (error == OT_ERROR_NONE)
     {
         if (message->GetOffset() >= message->GetLength())
         {
             mReassemblyList.Dequeue(*message);
             HandleDatagram(*message, aMessageInfo, aMacSource);
         }
     }
     else
     {
         char srcStringBuffer[Mac::Address::kAddressStringSize];
         char dstStringBuffer[Mac::Address::kAddressStringSize];
 
         OT_UNUSED_VARIABLE(srcStringBuffer);
         OT_UNUSED_VARIABLE(dstStringBuffer);
 
         otLogInfoMac(
             GetInstance(),
             "Dropping rx frag frame, error:%s, len:%d, src:%s, dst:%s, tag:%d, offset:%d, dglen:%d, sec:%s",
             otThreadErrorToString(error),
             aFrameLength,
             aMacSource.ToString(srcStringBuffer, sizeof(srcStringBuffer)),
             aMacDest.ToString(dstStringBuffer, sizeof(dstStringBuffer)),
-            datagramTag,
-            fragmentHeader->GetDatagramOffset(),
-            datagramLength,
+            fragmentHeader.GetDatagramTag(),
+            fragmentHeader.GetDatagramOffset(),
+            fragmentHeader.GetDatagramSize(),
             aMessageInfo.mLinkSecurity ? "yes" : "no"
         );
 
         if (message != NULL)
         {
             message->Free();
         }
     }
 }
