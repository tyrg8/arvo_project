commit 2015e89f6c36732cb468f479a94b5993dfe818aa
Merge: 5ef8e05c9 ab0905f46
Author: Nikos Mavrogiannopoulos <nmav@gnutls.org>
Date:   Fri Jan 31 07:49:09 2020 +0000

    Merge branch 'nettle-master-gostdsa' into 'master'
    
    nettle/gost: support use GOST DSA support from master branch
    
    See merge request gnutls/gnutls!1183

diff --git a/configure.ac b/configure.ac
index 2e73a904d..09acf8b22 100644
--- a/configure.ac
+++ b/configure.ac
@@ -660,6 +660,15 @@ AC_CHECK_FUNCS([nettle_curve448_mul nettle_ed448_shake256_sign],
 LIBS=$save_LIBS
 AM_CONDITIONAL(NEED_CURVE448, test "$have_curve448" != "yes")
 
+have_gostdsa=yes
+save_LIBS=$LIBS
+LIBS="$LIBS $HOGWEED_LIBS $NETTLE_LIBS"
+AC_CHECK_FUNCS([nettle_get_gost_gc256b nettle_get_gost_gc512a nettle_gostdsa_sign], [],
+	       have_gostdsa=no)
+LIBS=$save_LIBS
+AS_IF([test "$have_gostdsa" != "yes"], AC_DEFINE([NEED_GOSTDSA], 1, [Use backported GOST R 34.10 DSA support]))
+AM_CONDITIONAL(NEED_GOSTDSA, [test "$have_gostdsa" != "yes"])
+
 AC_MSG_CHECKING([whether to build libdane])
 AC_ARG_ENABLE(libdane,
     AS_HELP_STRING([--disable-libdane],
diff --git a/lib/nettle/Makefile.am b/lib/nettle/Makefile.am
index 8c1a2d17e..e4d9ad64e 100644
--- a/lib/nettle/Makefile.am
+++ b/lib/nettle/Makefile.am
@@ -86,14 +86,19 @@ libcrypto_la_SOURCES += \
 	gost/pbkdf2-hmac-gosthash94.c gost/pbkdf2-hmac-streebog.c \
 	gost/pbkdf2-gost.h
 
+if NEED_GOSTDSA
 libcrypto_la_SOURCES += \
 	gost/nettle-internal.h \
 	gost/ecc-gost256cpa.c gost/ecc-gost256cpa-32.h  gost/ecc-gost256cpa-64.h\
 	gost/ecc-gost512a.c gost/ecc-gost512a-32.h gost/ecc-gost512a-64.h \
 	gost/ecc-internal.h gost/gmp-glue.h \
 	gost/ecc-gostdsa-sign.c gost/ecc-gostdsa-verify.c \
-	gost/gostdsa-mask.c gost/gostdsa-sign.c gost/gostdsa-verify.c gost/gostdsa-vko.c \
+	gost/gostdsa-sign.c gost/gostdsa-verify.c \
 	gost/gostdsa.h gost/ecc-gost-curve.h gost/ecc-gost-hash.c
+endif
+
+libcrypto_la_SOURCES += \
+	gost/gostdsa-mask.c gost/gostdsa-vko.c gost/gostdsa2.h
 
 libcrypto_la_SOURCES += gost_keywrap.c
 endif
diff --git a/lib/nettle/gost/ecc-gost-curve.h b/lib/nettle/gost/ecc-gost-curve.h
index 9e972c768..a7979275d 100644
--- a/lib/nettle/gost/ecc-gost-curve.h
+++ b/lib/nettle/gost/ecc-gost-curve.h
@@ -41,21 +41,21 @@ extern "C" {
 /* The contents of this struct is internal. */
 struct ecc_curve;
 
 #ifndef NETTLE_PURE
 #ifdef __GNUC__
 #define NETTLE_PURE __attribute__((pure))
 #else
 #define NETTLE_PURE
 #endif
 #endif
 
-#define nettle_get_gost_256cpa _gnutls_get_gost_256cpa
-#define nettle_get_gost_512a _gnutls_get_gost_512a
-const struct ecc_curve * NETTLE_PURE nettle_get_gost_256cpa(void);
-const struct ecc_curve * NETTLE_PURE nettle_get_gost_512a(void);
+#define nettle_get_gost_gc256b _gnutls_get_gost_gc256b
+#define nettle_get_gost_gc512a _gnutls_get_gost_gc512a
+const struct ecc_curve * NETTLE_PURE nettle_get_gost_gc256b(void);
+const struct ecc_curve * NETTLE_PURE nettle_get_gost_gc512a(void);
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif /* GNUTLS_LIB_NETTLE_GOST_ECC_GOST_CURVE_H */
diff --git a/lib/nettle/gost/ecc-gost256cpa.c b/lib/nettle/gost/ecc-gost256cpa.c
index 6d7fa51b3..74ea4d268 100644
--- a/lib/nettle/gost/ecc-gost256cpa.c
+++ b/lib/nettle/gost/ecc-gost256cpa.c
@@ -64,83 +64,83 @@
 #define ecc_256_modp ecc_mod
 #define ecc_256_modq ecc_mod
 
-static const struct ecc_curve _gnutls_gost_256cpa =
+static const struct ecc_curve _gnutls_gost_gc256b =
 {
   {
     256,
     ECC_LIMB_SIZE,
     ECC_BMODP_SIZE,
     ECC_REDC_SIZE,
     ECC_MOD_INV_ITCH (ECC_LIMB_SIZE),
     0,
 
     ecc_p,
     ecc_Bmodp,
     ecc_Bmodp_shifted,
     ecc_redc_ppm1,
 
     ecc_pp1h,
     ecc_256_modp,
     USE_REDC ? ecc_256_redc : ecc_256_modp,
     ecc_mod_inv,
     NULL,
   },
   {
     256,
     ECC_LIMB_SIZE,
     ECC_BMODQ_SIZE,
     0,
     ECC_MOD_INV_ITCH (ECC_LIMB_SIZE),
     0,
 
     ecc_q,
     ecc_Bmodq,
     ecc_Bmodq_shifted,
     NULL,
     ecc_qp1h,
 
     ecc_256_modq,
     ecc_256_modq,
     ecc_mod_inv,
     NULL,
   },
 
   USE_REDC,
   ECC_PIPPENGER_K,
   ECC_PIPPENGER_C,
 
 #ifdef HAVE_NETTLE_CURVE448_MUL
   ECC_ADD_JJA_ITCH (ECC_LIMB_SIZE),
 #endif
   ECC_ADD_JJJ_ITCH (ECC_LIMB_SIZE),
 #ifdef HAVE_NETTLE_CURVE448_MUL
   ECC_DUP_JJ_ITCH (ECC_LIMB_SIZE),
 #endif
   ECC_MUL_A_ITCH (ECC_LIMB_SIZE),
   ECC_MUL_G_ITCH (ECC_LIMB_SIZE),
   ECC_J_TO_A_ITCH (ECC_LIMB_SIZE),
 
 #ifdef HAVE_NETTLE_CURVE448_MUL
   ecc_add_jja,
 #endif
   ecc_add_jjj,
 #ifdef HAVE_NETTLE_CURVE448_MUL
   ecc_dup_jj,
 #endif
   ecc_mul_a,
   ecc_mul_g,
   ecc_j_to_a,
 
   ecc_b,
   ecc_g,
 #ifndef HAVE_NETTLE_CURVE448_MUL
   NULL,
 #endif
   ecc_unit,
   ecc_table
 };
 
-const struct ecc_curve *nettle_get_gost_256cpa(void)
+const struct ecc_curve *nettle_get_gost_gc256b(void)
 {
-  return &_gnutls_gost_256cpa;
+  return &_gnutls_gost_gc256b;
 }
diff --git a/lib/nettle/gost/ecc-gost512a.c b/lib/nettle/gost/ecc-gost512a.c
index 1bd4d1b7a..d77a41f4c 100644
--- a/lib/nettle/gost/ecc-gost512a.c
+++ b/lib/nettle/gost/ecc-gost512a.c
@@ -64,83 +64,83 @@
 #define ecc_512_modp ecc_mod
 #define ecc_512_modq ecc_mod
 
-static const struct ecc_curve _gnutls_gost_512a =
+static const struct ecc_curve _gnutls_gost_gc512a =
 {
   {
     512,
     ECC_LIMB_SIZE,
     ECC_BMODP_SIZE,
     ECC_REDC_SIZE,
     ECC_MOD_INV_ITCH (ECC_LIMB_SIZE),
     0,
 
     ecc_p,
     ecc_Bmodp,
     ecc_Bmodp_shifted,
     ecc_redc_ppm1,
 
     ecc_pp1h,
     ecc_512_modp,
     USE_REDC ? ecc_512_redc : ecc_512_modp,
     ecc_mod_inv,
     NULL,
   },
   {
     512,
     ECC_LIMB_SIZE,
     ECC_BMODQ_SIZE,
     0,
     ECC_MOD_INV_ITCH (ECC_LIMB_SIZE),
     0,
 
     ecc_q,
     ecc_Bmodq,
     ecc_Bmodq_shifted,
     NULL,
     ecc_qp1h,
 
     ecc_512_modq,
     ecc_512_modq,
     ecc_mod_inv,
     NULL,
   },
 
   USE_REDC,
   ECC_PIPPENGER_K,
   ECC_PIPPENGER_C,
 
 #ifdef HAVE_NETTLE_CURVE448_MUL
   ECC_ADD_JJA_ITCH (ECC_LIMB_SIZE),
 #endif
   ECC_ADD_JJJ_ITCH (ECC_LIMB_SIZE),
 #ifdef HAVE_NETTLE_CURVE448_MUL
   ECC_DUP_JJ_ITCH (ECC_LIMB_SIZE),
 #endif
   ECC_MUL_A_ITCH (ECC_LIMB_SIZE),
   ECC_MUL_G_ITCH (ECC_LIMB_SIZE),
   ECC_J_TO_A_ITCH (ECC_LIMB_SIZE),
 
 #ifdef HAVE_NETTLE_CURVE448_MUL
   ecc_add_jja,
 #endif
   ecc_add_jjj,
 #ifdef HAVE_NETTLE_CURVE448_MUL
   ecc_dup_jj,
 #endif
   ecc_mul_a,
   ecc_mul_g,
   ecc_j_to_a,
 
   ecc_b,
   ecc_g,
 #ifndef HAVE_NETTLE_CURVE448_MUL
   NULL,
 #endif
   ecc_unit,
   ecc_table
 };
 
-const struct ecc_curve *nettle_get_gost_512a(void)
+const struct ecc_curve *nettle_get_gost_gc512a(void)
 {
-  return &_gnutls_gost_512a;
+  return &_gnutls_gost_gc512a;
 }
diff --git a/lib/nettle/gost/gostdsa-mask.c b/lib/nettle/gost/gostdsa-mask.c
index 49dc2f456..6654d386b 100644
--- a/lib/nettle/gost/gostdsa-mask.c
+++ b/lib/nettle/gost/gostdsa-mask.c
@@ -1,46 +1,46 @@
 /* gostdsa-verify.c
 
   Copyright (C) 2018 Dmitry Eremin-Solenikov
 
   This file is part of GNU Nettle.
 
   GNU Nettle is free software: you can redistribute it and/or
   modify it under the terms of either:
 
    * the GNU Lesser General Public License as published by the Free
     Software Foundation; either version 3 of the License, or (at your
     option) any later version.
 
   or
 
    * the GNU General Public License as published by the Free
     Software Foundation; either version 2 of the License, or (at your
     option) any later version.
 
   or both in parallel, as here.
 
   GNU Nettle is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
   General Public License for more details.
 
   You should have received copies of the GNU General Public License and
   the GNU Lesser General Public License along with this program. If
   not, see https://www.gnu.org/licenses/.
 */
 
 #if HAVE_CONFIG_H
 # include "config.h"
 #endif
 
 #include <gnutls_int.h>
 
 #include <stdlib.h>
 
-#include "gostdsa.h"
+#include "gostdsa2.h"
 #include "ecc-internal.h"
 
 #include "gmp-glue.h"
 
 /* Key comes in form .... M_2 M_1 K_0,
   unmask is K_i = K_i-1 * M_i mod Q */
diff --git a/lib/nettle/gost/gostdsa-vko.c b/lib/nettle/gost/gostdsa-vko.c
index 89dff1cc4..4251930a8 100644
--- a/lib/nettle/gost/gostdsa-vko.c
+++ b/lib/nettle/gost/gostdsa-vko.c
@@ -1,44 +1,44 @@
 /* gostdsa-vko.c
 
    Copyright (C) 2016 Dmitry Eremin-Solenikov
 
    This file is part of GNU Nettle.
 
    GNU Nettle is free software: you can redistribute it and/or
    modify it under the terms of either:
 
      * the GNU Lesser General Public License as published by the Free
        Software Foundation; either version 3 of the License, or (at your
        option) any later version.
 
    or
 
      * the GNU General Public License as published by the Free
        Software Foundation; either version 2 of the License, or (at your
        option) any later version.
 
    or both in parallel, as here.
 
    GNU Nettle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    General Public License for more details.
 
    You should have received copies of the GNU General Public License and
    the GNU Lesser General Public License along with this program.  If
    not, see http://www.gnu.org/licenses/.
 */
 
 #if HAVE_CONFIG_H
 # include "config.h"
 #endif
 
 #include <gnutls_int.h>
 
 #include <stdlib.h>
 
 #include "ecc-internal.h"
-#include "gostdsa.h"
+#include "gostdsa2.h"
 
 int
 gostdsa_vko(const struct ecc_scalar *key,
diff --git a/lib/nettle/gost/gostdsa.h b/lib/nettle/gost/gostdsa.h
index 9e0375f2c..d9b79ff3c 100644
--- a/lib/nettle/gost/gostdsa.h
+++ b/lib/nettle/gost/gostdsa.h
@@ -42,21 +42,19 @@
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 /* Name mangling */
 #define gostdsa_sign _gnutls_gostdsa_sign
 #define gostdsa_verify _gnutls_gostdsa_verify
-#define gostdsa_unmask_key _gnutls_gostdsa_unmask_key
-#define gostdsa_vko _gnutls_gostdsa_vko
 #define ecc_gostdsa_sign _gnutls_ecc_gostdsa_sign
 #define ecc_gostdsa_sign_itch _gnutls_ecc_gostdsa_sign_itch
 #define ecc_gostdsa_verify _gnutls_ecc_gostdsa_verify
 #define ecc_gostdsa_verify_itch _gnutls_ecc_gostdsa_verify_itch
 
 /* Just use ECDSA function for key generation */
 #define gostdsa_generate_keypair ecdsa_generate_keypair
 
 /* High level GOST DSA functions.
  *
  * A public key is represented as a struct ecc_point, and a private
  * key as a struct ecc_scalar. FIXME: Introduce some aliases? */
@@ -72,16 +70,6 @@ gostdsa_verify (const struct ecc_point *pub,
 	        size_t length, const uint8_t *digest,
 	        const struct dsa_signature *signature);
 
-int
-gostdsa_unmask_key (const struct ecc_curve *ecc,
-		    mpz_t key);
-
-int
-gostdsa_vko(const struct ecc_scalar *key,
-	    const struct ecc_point *pub,
-	    size_t ukm_length, const uint8_t *ukm,
-	    size_t out_length, uint8_t *out);
-
 /* Low-level GOSTDSA functions. */
 mp_size_t
 ecc_gostdsa_sign_itch (const struct ecc_curve *ecc);
diff --git a/lib/nettle/gost/gostdsa2.h b/lib/nettle/gost/gostdsa2.h
new file mode 100644
index 000000000..a4b26ab49
--- /dev/null
+++ b/lib/nettle/gost/gostdsa2.h
@@ -0,0 +1,62 @@
+/* gostdsa.h
+
+   Copyright (C) 2015 Dmity Eremin-Solenikov
+   Copyright (C) 2013 Niels Möller
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see https://www.gnu.org/licenses/.
+*/
+
+/* Development of Nettle's ECC support was funded by the .SE Internet Fund. */
+
+#ifndef GNUTLS_LIB_NETTLE_GOST_GOSTDSA2_H
+#define GNUTLS_LIB_NETTLE_GOST_GOSTDSA2_H
+
+#include <nettle/ecc.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* Name mangling */
+#define gostdsa_unmask_key _gnutls_gostdsa_unmask_key
+#define gostdsa_vko _gnutls_gostdsa_vko
+
+int
+gostdsa_unmask_key (const struct ecc_curve *ecc,
+		    mpz_t key);
+
+int
+gostdsa_vko(const struct ecc_scalar *key,
+	    const struct ecc_point *pub,
+	    size_t ukm_length, const uint8_t *ukm,
+	    size_t out_length, uint8_t *out);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* GNUTLS_LIB_NETTLE_GOST_GOSTDSA2_H */
diff --git a/lib/nettle/pk.c b/lib/nettle/pk.c
index 4be8dc7ed..f236cef3d 100644
--- a/lib/nettle/pk.c
+++ b/lib/nettle/pk.c
@@ -1,66 +1,71 @@
 /*
  * Copyright (C) 2010-2012 Free Software Foundation, Inc.
  * Copyright (C) 2013-2017 Nikos Mavrogiannopoulos
  * Copyright (C) 2016-2017 Red Hat, Inc.
  *
  * Author: Nikos Mavrogiannopoulos
  *
  * This file is part of GNUTLS.
  *
  * The GNUTLS library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public License
  * as published by the Free Software Foundation; either version 2.1 of
  * the License, or (at your option) any later version.
  *
  * This library is distributed in the hope that it will be useful, but
  * WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  * Lesser General Public License for more details.
  *
  * You should have received a copy of the GNU Lesser General Public License
  * along with this program.  If not, see <https://www.gnu.org/licenses/>
  *
  */
 
 /* This file contains the functions needed for RSA/DSA public key
  * encryption and signatures.
  */
 
 #include "gnutls_int.h"
 #include <mpi.h>
 #include <pk.h>
 #include "errors.h"
 #include <datum.h>
 #include <global.h>
 #include <tls-sig.h>
 #include <num.h>
 #include <x509/x509_int.h>
 #include <x509/common.h>
 #include <random.h>
 #include <pk.h>
 #include <nettle/dsa.h>
 #include <dsa-fips.h>
 #include <rsa-fips.h>
 #include <nettle/rsa.h>
 #include <gnutls/crypto.h>
 #include <nettle/bignum.h>
 #include <nettle/ecc.h>
 #include <nettle/ecdsa.h>
 #include <nettle/ecc-curve.h>
 #include <nettle/curve25519.h>
 #if HAVE_CURVE448
 #include <nettle/curve448.h>
 #else
 #include "curve448/curve448.h"
 #include "curve448/eddsa.h"
 #endif
 #include <nettle/eddsa.h>
 #include <nettle/version.h>
 #if ENABLE_GOST
+#if NEED_GOSTDSA
 #include "gost/gostdsa.h"
 #include "gost/ecc-gost-curve.h"
+#else
+#include <nettle/gostdsa.h>
+#endif
+#include "gost/gostdsa2.h"
 #endif
 #include "int/ecdsa-compute-k.h"
 #include "int/dsa-compute-k.h"
 #include <gnettle.h>
 #include <fips.h>
@@ -1497,17 +1502,15 @@ static inline const struct ecc_curve *get_supported_nist_curve(int curve)
 static inline const struct ecc_curve *get_supported_gost_curve(int curve)
 {
 	switch (curve) {
 #if ENABLE_GOST
 	case GNUTLS_ECC_CURVE_GOST256CPA:
-		return nettle_get_gost_256cpa();
 	case GNUTLS_ECC_CURVE_GOST256CPXA:
-		return nettle_get_gost_256cpa();
-	case GNUTLS_ECC_CURVE_GOST512A:
-		return nettle_get_gost_512a();
 	case GNUTLS_ECC_CURVE_GOST256B:
-		return nettle_get_gost_256cpa();
+		return nettle_get_gost_gc256b();
+	case GNUTLS_ECC_CURVE_GOST512A:
+		return nettle_get_gost_gc512a();
 #endif
 	default:
 		return NULL;
 	}
 }
