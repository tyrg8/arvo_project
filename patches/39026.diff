commit 0810a62e96836f4f039366f93654e85f7bee8a8e
Author: Eric Blankenhorn <eric@wolfssl.com>
Date:   Fri Sep 10 09:09:03 2021 -0500

    Fix multithread qos1 response

diff --git a/examples/multithread/multithread.c b/examples/multithread/multithread.c
index 1e560cb..5bbb2fe 100755
--- a/examples/multithread/multithread.c
+++ b/examples/multithread/multithread.c
@@ -48,21 +48,22 @@ static int mStopRead = 0;
 static int mNumMsgsRecvd;
 
 #ifdef WOLFMQTT_MULTITHREAD
 
 #ifdef USE_WINDOWS_API
     /* Windows Threading */
 	#include <windows.h>
     #include <process.h>
     typedef HANDLE THREAD_T;
     #define THREAD_CREATE(h, f, c) ((*h = CreateThread(NULL, 0, f, c, 0, NULL)) == NULL)
     #define THREAD_JOIN(h, c)      WaitForMultipleObjects(c, h, TRUE, INFINITE)
     #define THREAD_EXIT(e)         ExitThread(e)
 #else
     /* Posix (Linux/Mac) */
 	#include <pthread.h>
 	#include <sched.h>
+    #include <errno.h>
     typedef pthread_t THREAD_T;
     #define THREAD_CREATE(h, f, c) ({ int ret = pthread_create(h, NULL, f, c); if (ret) { errno = ret; } ret; })
     #define THREAD_JOIN(h, c)      ({ int ret, x; for(x=0;x<c;x++) { ret = pthread_join(h[x], NULL); if (ret) { errno = ret; break; }} ret; })
     #define THREAD_EXIT(e)         pthread_exit((void*)e)
 #endif
diff --git a/src/mqtt_client.c b/src/mqtt_client.c
index f25465b..d06fac6 100644
--- a/src/mqtt_client.c
+++ b/src/mqtt_client.c
@@ -531,230 +531,235 @@ static int MqttClient_DecodePacket(MqttClient* client, byte* rx_buf,
 static int MqttClient_HandlePacket(MqttClient* client,
     MqttPacketType packet_type, void *packet_obj, int timeout_ms)
 {
     int rc = MQTT_CODE_SUCCESS;
     MqttQoS packet_qos = MQTT_QOS_0;
     word16 packet_id = 0;
 
     if (client == NULL || packet_obj == NULL) {
         return MQTT_CODE_ERROR_BAD_ARG;
     }
 
     switch (packet_type)
     {
         case MQTT_PACKET_TYPE_CONNECT_ACK:
         {
             rc = MqttClient_DecodePacket(client, client->rx_buf,
                 client->packet.buf_len, packet_obj, &packet_type, &packet_qos,
                 &packet_id);
             break;
         }
         case MQTT_PACKET_TYPE_PUBLISH:
         {
             MqttPublish *publish = (MqttPublish*)packet_obj;
             MqttPacketType resp_type;
 
             if (publish->stat == MQTT_MSG_BEGIN ||
                 publish->stat == MQTT_MSG_READ) {
                 rc = MqttClient_DecodePacket(client, client->rx_buf,
                     client->packet.buf_len, packet_obj, &packet_type,
                     &packet_qos, &packet_id);
                 if (rc <= 0) {
                     return rc;
                 }
             }
+            else {
+                /* packet ID and QoS were already established */
+                packet_id = client->msg.publish.packet_id;
+                packet_qos = client->msg.publish.qos;
+            }
 
             rc = MqttClient_Publish_ReadPayload(client, publish, timeout_ms);
             if (rc < 0) {
                 break;
             }
 
             /* Handle QoS */
             if (packet_qos == MQTT_QOS_0) {
                 /* we are done, no QoS response */
                 break;
             }
 
             /* Determine packet type to write */
             resp_type = (packet_qos == MQTT_QOS_1) ?
                 MQTT_PACKET_TYPE_PUBLISH_ACK :
                 MQTT_PACKET_TYPE_PUBLISH_REC;
             publish->resp.packet_id = packet_id;
 
         #ifdef WOLFMQTT_MULTITHREAD
             /* Lock send socket mutex */
             rc = wm_SemLock(&client->lockSend);
             if (rc != 0) {
                 return rc;
             }
         #endif
 
             /* Encode publish response */
             rc = MqttEncode_PublishResp(client->tx_buf, client->tx_buf_len,
                 resp_type, &publish->resp);
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d,"
                     " QoS %d",
                 rc, MqttPacket_TypeDesc(resp_type), resp_type, packet_id,
                 packet_qos);
         #endif
             if (rc <= 0) {
             #ifdef WOLFMQTT_MULTITHREAD
                 wm_SemUnlock(&client->lockSend);
             #endif
                 return rc;
             }
             client->packet.buf_len = rc;
 
             /* Send publish response packet */
             rc = MqttPacket_Write(client, client->tx_buf,
                 client->packet.buf_len);
 
         #ifdef WOLFMQTT_MULTITHREAD
             wm_SemUnlock(&client->lockSend);
         #endif
             break;
         }
         case MQTT_PACKET_TYPE_PUBLISH_ACK:
         case MQTT_PACKET_TYPE_PUBLISH_REC:
         case MQTT_PACKET_TYPE_PUBLISH_REL:
         case MQTT_PACKET_TYPE_PUBLISH_COMP:
         {
             MqttPublishResp pubRespObj, *publish_resp = &pubRespObj;
             XMEMSET(publish_resp, 0, sizeof(MqttPublishResp));
 
             rc = MqttClient_DecodePacket(client, client->rx_buf,
                 client->packet.buf_len, publish_resp, &packet_type,
                 &packet_qos, &packet_id);
             if (rc <= 0) {
                 return rc;
             }
 
             /* If publish Received or Release QoS then proceed */
             if (packet_type != MQTT_PACKET_TYPE_PUBLISH_REC &&
                 packet_type != MQTT_PACKET_TYPE_PUBLISH_REL) {
                 break;
             }
 
         #ifdef WOLFMQTT_MULTITHREAD
             /* Lock send socket mutex */
             rc = wm_SemLock(&client->lockSend);
             if (rc != 0) {
                 return rc;
             }
         #endif
 
             /* Encode publish response */
             publish_resp->packet_id = packet_id;
             packet_type = (MqttPacketType)((int)packet_type+1); /* next ack */
         #ifdef WOLFMQTT_V5
             #ifdef WOLFMQTT_DEBUG_CLIENT
                 PRINTF("\tPublish response: reason code %d, Type %s (%d),"
                         " ID %d, QoS %d",
                         publish_resp->reason_code,
                         MqttPacket_TypeDesc(packet_type),
                         packet_type, packet_id, packet_qos);
             #endif
 
             /* return reason code to caller */
             if (packet_obj != NULL) {
                 MqttPublishResp* caller_rsp = (MqttPublishResp*)packet_obj;
                 caller_rsp->reason_code = publish_resp->reason_code;
             }
 
             /* Publish QoS response needs success reason code,
              * otherwise will cause disconnect at broker */
             publish_resp->reason_code = MQTT_REASON_SUCCESS;
         #endif
 
             rc = MqttEncode_PublishResp(client->tx_buf, client->tx_buf_len,
                 packet_type, publish_resp);
         #ifdef WOLFMQTT_DEBUG_CLIENT
             PRINTF("MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d,"
                     " QoS %d",
                 rc, MqttPacket_TypeDesc(packet_type), packet_type, packet_id,
                 packet_qos);
         #endif
             if (rc <= 0) {
             #ifdef WOLFMQTT_MULTITHREAD
                 wm_SemUnlock(&client->lockSend);
             #endif
                 return rc;
             }
             client->packet.buf_len = rc;
 
             /* Send publish response packet */
             rc = MqttPacket_Write(client, client->tx_buf,
                 client->packet.buf_len);
 
         #ifdef WOLFMQTT_MULTITHREAD
             wm_SemUnlock(&client->lockSend);
         #endif
             break;
         }
         case MQTT_PACKET_TYPE_SUBSCRIBE_ACK:
         {
             rc = MqttClient_DecodePacket(client, client->rx_buf,
                 client->packet.buf_len, packet_obj, &packet_type, &packet_qos,
                 &packet_id);
             break;
         }
         case MQTT_PACKET_TYPE_UNSUBSCRIBE_ACK:
         {
             rc = MqttClient_DecodePacket(client, client->rx_buf,
                 client->packet.buf_len, packet_obj, &packet_type, &packet_qos,
                 &packet_id);
             break;
         }
         case MQTT_PACKET_TYPE_PING_RESP:
         {
             rc = MqttClient_DecodePacket(client, client->rx_buf,
                 client->packet.buf_len, packet_obj, &packet_type, &packet_qos,
                 &packet_id);
             break;
         }
         case MQTT_PACKET_TYPE_AUTH:
         {
         #ifdef WOLFMQTT_V5
             rc = MqttClient_DecodePacket(client, client->rx_buf,
                 client->packet.buf_len, packet_obj, &packet_type, &packet_qos,
                 &packet_id);
         #else
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
         #endif
             break;
         }
 
         case MQTT_PACKET_TYPE_DISCONNECT:
         {
         #ifdef WOLFMQTT_V5
             rc = MqttClient_DecodePacket(client, client->rx_buf,
                 client->packet.buf_len, packet_obj, &packet_type, &packet_qos,
                 &packet_id);
         #else
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
         #endif
             break;
         }
         case MQTT_PACKET_TYPE_CONNECT:
         case MQTT_PACKET_TYPE_SUBSCRIBE:
         case MQTT_PACKET_TYPE_UNSUBSCRIBE:
         case MQTT_PACKET_TYPE_PING_REQ:
         case MQTT_PACKET_TYPE_ANY:
         case MQTT_PACKET_TYPE_RESERVED:
         default:
             /* these types are only sent from client and should not be sent
              * by broker */
             rc = MQTT_CODE_ERROR_PACKET_TYPE;
             break;
     } /* switch (packet_type) */
 
 #ifdef WOLFMQTT_DEBUG_CLIENT
     if (rc < 0) {
         PRINTF("MqttClient_HandlePacket: Rc %d, Type %s (%d), QoS %d, ID %d",
             rc, MqttPacket_TypeDesc(packet_type), packet_type, packet_qos,
             packet_id);
     }
 #endif
 
     return rc;
 }
@@ -1113,148 +1118,155 @@ int MqttClient_SetPropertyCallback(MqttClient *client, MqttPropertyCb propCb,
 int MqttClient_Connect(MqttClient *client, MqttConnect *mc_connect)
 {
     int rc, len = 0;
 
     /* Validate required arguments */
     if (client == NULL || mc_connect == NULL) {
         return MQTT_CODE_ERROR_BAD_ARG;
     }
 
     if (mc_connect->stat == MQTT_MSG_BEGIN) {
     #ifdef WOLFMQTT_MULTITHREAD
         /* Lock send socket mutex */
         rc = wm_SemLock(&client->lockSend);
         if (rc != 0) {
             return rc;
         }
     #endif
 
     #ifdef WOLFMQTT_V5
         /* Use specified protocol version if set */
         mc_connect->protocol_level = client->protocol_level;
     #endif
 
         /* Encode the connect packet */
         rc = MqttEncode_Connect(client->tx_buf, client->tx_buf_len, mc_connect);
     #ifdef WOLFMQTT_DEBUG_CLIENT
         PRINTF("MqttClient_EncodePacket: Len %d, Type %s (%d), ID %d, QoS %d",
             rc, MqttPacket_TypeDesc(MQTT_PACKET_TYPE_CONNECT),
             MQTT_PACKET_TYPE_CONNECT, 0, 0);
     #endif
         if (rc <= 0) {
             #ifdef WOLFMQTT_MULTITHREAD
                 wm_SemUnlock(&client->lockSend);
             #endif
             return rc;
         }
         len = rc;
 
     #ifdef WOLFMQTT_MULTITHREAD
         rc = wm_SemLock(&client->lockClient);
         if (rc == 0) {
             /* inform other threads of expected response */
             rc = MqttClient_RespList_Add(client, MQTT_PACKET_TYPE_CONNECT_ACK,
                     0, &mc_connect->pendResp, &mc_connect->ack);
             wm_SemUnlock(&client->lockClient);
         }
         if (rc != 0) {
             wm_SemUnlock(&client->lockSend);
             return rc; /* Error locking client */
         }
     #endif
 
         /* Send connect packet */
         rc = MqttPacket_Write(client, client->tx_buf, len);
     #ifdef WOLFMQTT_MULTITHREAD
         wm_SemUnlock(&client->lockSend);
     #endif
         if (rc != len) {
+    #ifdef WOLFMQTT_MULTITHREAD
+            if ((rc != MQTT_CODE_CONTINUE) &&
+                (wm_SemLock(&client->lockClient)) == 0) {
+                MqttClient_RespList_Remove(client, &mc_connect->pendResp);
+                wm_SemUnlock(&client->lockClient);
+            }
+    #endif
             return rc;
         }
     #ifdef WOLFMQTT_V5
         /* Enhanced authentication */
         if (client->enable_eauth == 1) {
             mc_connect->stat = MQTT_MSG_AUTH;
         }
         else
     #endif
         {
             mc_connect->stat = MQTT_MSG_WAIT;
         }
     }
 
 #ifdef WOLFMQTT_V5
     /* Enhanced authentication */
     if (mc_connect->protocol_level > MQTT_CONNECT_PROTOCOL_LEVEL_4 && 
             mc_connect->stat == MQTT_MSG_AUTH)
     {
         MqttAuth auth, *p_auth = &auth;
         MqttProp* prop, *conn_prop;
 
         /* Find the AUTH property in the connect structure */
         for (conn_prop = mc_connect->props;
              (conn_prop != NULL) && (conn_prop->type != MQTT_PROP_AUTH_METHOD);
              conn_prop = conn_prop->next) {
         }
         if (conn_prop == NULL) {
         #ifdef WOLFMQTT_MULTITHREAD
             if (wm_SemLock(&client->lockClient) == 0) {
                 MqttClient_RespList_Remove(client, &mc_connect->pendResp);
                 wm_SemUnlock(&client->lockClient);
             }
         #endif
             /* AUTH property was not set in connect structure */
             return MQTT_CODE_ERROR_BAD_ARG;
         }
 
         XMEMSET((void*)p_auth, 0, sizeof(MqttAuth));
 
         /* Set the authentication reason */
         p_auth->reason_code = MQTT_REASON_CONT_AUTH;
 
         /* Use the same authentication method property from connect */
         prop = MqttProps_Add(&p_auth->props);
         prop->type = MQTT_PROP_AUTH_METHOD;
         prop->data_str.str = conn_prop->data_str.str;
         prop->data_str.len = conn_prop->data_str.len;
 
         /* Send the AUTH packet */
         rc = MqttClient_Auth(client, p_auth);
         MqttClient_PropsFree(p_auth->props);
     #ifdef WOLFMQTT_NONBLOCK
         if (rc == MQTT_CODE_CONTINUE)
             return rc;
     #endif
         if (rc != len) {
         #ifdef WOLFMQTT_MULTITHREAD
             if (wm_SemLock(&client->lockClient) == 0) {
                 MqttClient_RespList_Remove(client, &mc_connect->pendResp);
                 wm_SemUnlock(&client->lockClient);
             }
         #endif
             return rc;
         }
     }
 #endif /* WOLFMQTT_V5 */
 
     /* Wait for connect ack packet */
     rc = MqttClient_WaitType(client, &mc_connect->ack,
         MQTT_PACKET_TYPE_CONNECT_ACK, 0, client->cmd_timeout_ms);
 #ifdef WOLFMQTT_NONBLOCK
     if (rc == MQTT_CODE_CONTINUE)
         return rc;
 #endif
 
 #ifdef WOLFMQTT_MULTITHREAD
     if (wm_SemLock(&client->lockClient) == 0) {
         MqttClient_RespList_Remove(client, &mc_connect->pendResp);
         wm_SemUnlock(&client->lockClient);
     }
 #endif
 
     /* reset state */
     mc_connect->stat = MQTT_MSG_BEGIN;
 
     return rc;
 }
 
 #ifdef WOLFMQTT_TEST_NONBLOCK
