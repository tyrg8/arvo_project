commit d1e1d0d0da61f3fec25f48f8ad63e4a76db8a2a9
Author: Jose Ulises Nino Rivera <junr03@users.noreply.github.com>
Date:   Tue Dec 21 10:10:22 2021 -0800

    connection: update connecting log line to log event (#19328)
    
    Signed-off-by: Jose Nino <jnino@lyft.com>

diff --git a/source/common/network/connection_impl.cc b/source/common/network/connection_impl.cc
index 2d4f847a8c..50ccff526f 100644
--- a/source/common/network/connection_impl.cc
+++ b/source/common/network/connection_impl.cc
@@ -888,35 +888,35 @@ ClientConnectionImpl::ClientConnectionImpl(
 }
 
 void ClientConnectionImpl::connect() {
-  ENVOY_CONN_LOG(debug, "connecting to {}", *this,
-                 socket_->connectionInfoProvider().remoteAddress()->asString());
+  ENVOY_CONN_LOG_EVENT(debug, "client_connection", "connecting to {}", *this,
+                       socket_->connectionInfoProvider().remoteAddress()->asString());
   const Api::SysCallIntResult result =
       socket_->connect(socket_->connectionInfoProvider().remoteAddress());
   stream_info_.upstreamInfo()->upstreamTiming().onUpstreamConnectStart(dispatcher_.timeSource());
   if (result.return_value_ == 0) {
     // write will become ready.
     ASSERT(connecting_);
     return;
   }
 
   ASSERT(SOCKET_FAILURE(result.return_value_));
 #ifdef WIN32
   // winsock2 connect returns EWOULDBLOCK if the socket is non-blocking and the connection
   // cannot be completed immediately. We do not check for `EINPROGRESS` as that error is for
   // blocking operations.
   if (result.errno_ == SOCKET_ERROR_AGAIN) {
 #else
   if (result.errno_ == SOCKET_ERROR_IN_PROGRESS) {
 #endif
     ASSERT(connecting_);
     ENVOY_CONN_LOG(debug, "connection in progress", *this);
   } else {
     immediate_error_event_ = ConnectionEvent::RemoteClose;
     connecting_ = false;
     failure_reason_ = absl::StrCat("immediate connect error: ", result.errno_);
     ENVOY_CONN_LOG(debug, "{}", *this, failure_reason_);
 
     // Trigger a write event. This is needed on macOS and seems harmless on Linux.
     ioHandle().activateFileEvents(Event::FileReadyType::Write);
   }
 }
