commit a9d18eb4229893fabd9c40ebdb00d7466d9ab401
Author: pancake <pancake@nowsecure.com>
Date:   Sat Oct 7 12:50:33 2023 +0200

    Improve the situation in the non-null terminated string handling in mach0land ##crash

diff --git a/libr/bin/format/mach0/mach0.c b/libr/bin/format/mach0/mach0.c
index c3d54bad23..9aa630084f 100644
--- a/libr/bin/format/mach0/mach0.c
+++ b/libr/bin/format/mach0/mach0.c
@@ -314,172 +314,172 @@ static bool init_hdr(struct MACH0_(obj_t) *mo) {
 static bool parse_segments(struct MACH0_(obj_t) *mo, ut64 off) {
 	size_t i, j, k, sect, len;
 	ut32 size_sects;
 	ut8 segcom[sizeof (struct MACH0_(segment_command))] = {0};
 	ut8 sec[sizeof (struct MACH0_(section))] = {0};
 	char section_flagname[128];
 
 	if (!UT32_MUL (&size_sects, mo->nsegs, sizeof (struct MACH0_(segment_command)))) {
 		return false;
 	}
 	if (!size_sects || size_sects > mo->size) {
 		return false;
 	}
 	if (off > mo->size || off + sizeof (struct MACH0_(segment_command)) > mo->size) {
 		return false;
 	}
 	if (!(mo->segs = realloc (mo->segs, mo->nsegs * sizeof (struct MACH0_(segment_command))))) {
 		r_sys_perror ("realloc (seg)");
 		return false;
 	}
 	j = mo->nsegs - 1;
 	len = r_buf_read_at (mo->b, off, segcom, sizeof (struct MACH0_(segment_command)));
 	if (len != sizeof (struct MACH0_(segment_command))) {
 		R_LOG_ERROR ("read (seg)");
 		return false;
 	}
 	i = 0;
 	mo->segs[j].cmd = r_read_ble32 (&segcom[i], mo->big_endian);
 	i += sizeof (ut32);
 	mo->segs[j].cmdsize = r_read_ble32 (&segcom[i], mo->big_endian);
 	i += sizeof (ut32);
 	memcpy (&mo->segs[j].segname, &segcom[i], 16);
 	i += 16;
 #if R_BIN_MACH064
 	mo->segs[j].vmaddr = r_read_ble64 (&segcom[i], mo->big_endian);
 	i += sizeof (ut64);
 	mo->segs[j].vmsize = r_read_ble64 (&segcom[i], mo->big_endian);
 	i += sizeof (ut64);
 	mo->segs[j].fileoff = r_read_ble64 (&segcom[i], mo->big_endian);
 	i += sizeof (ut64);
 	mo->segs[j].filesize = r_read_ble64 (&segcom[i], mo->big_endian);
 	i += sizeof (ut64);
 #else
 	mo->segs[j].vmaddr = r_read_ble32 (&segcom[i], mo->big_endian);
 	i += sizeof (ut32);
 	mo->segs[j].vmsize = r_read_ble32 (&segcom[i], mo->big_endian);
 	i += sizeof (ut32);
 	mo->segs[j].fileoff = r_read_ble32 (&segcom[i], mo->big_endian);
 	i += sizeof (ut32);
 	mo->segs[j].filesize = r_read_ble32 (&segcom[i], mo->big_endian);
 	i += sizeof (ut32);
 #endif
 	mo->segs[j].maxprot = r_read_ble32 (&segcom[i], mo->big_endian);
 	i += sizeof (ut32);
 	mo->segs[j].initprot = r_read_ble32 (&segcom[i], mo->big_endian);
 	i += sizeof (ut32);
 	mo->segs[j].nsects = r_read_ble32 (&segcom[i], mo->big_endian);
 	i += sizeof (ut32);
 	mo->segs[j].flags = r_read_ble32 (&segcom[i], mo->big_endian);
 
 	char *segment_flagname = NULL;
 #if R_BIN_MACH064
 	segment_flagname = r_str_newf ("mach0_segment64_%u.offset", (ut32)j);
 #else
 	segment_flagname = r_str_newf ("mach0_segment_%u.offset", (ut32)j);
 #endif
 	sdb_num_set (mo->kv, segment_flagname, off, 0);
 	free (segment_flagname);
 	sdb_num_set (mo->kv, "mach0_segments.count", 0, 0);
 
 	if (mo->segs[j].nsects > 0) {
 		sect = mo->nsects;
 		mo->nsects += mo->segs[j].nsects;
 		if (mo->nsects > MACHO_MAX_SECTIONS) {
 			int new_nsects = mo->nsects & 0xf;
 			R_LOG_WARN ("mach0 header contains too many sections (%d). Wrapping to %d",
 				 mo->nsects, new_nsects);
 			mo->nsects = new_nsects;
 		}
 		if ((int)mo->nsects < 1) {
 			R_LOG_WARN ("Invalid number of sections");
 			mo->nsects = sect;
 			return false;
 		}
 		if (!UT32_MUL (&size_sects, mo->nsects-sect, sizeof (struct MACH0_(section)))) {
 			mo->nsects = sect;
 			return false;
 		}
 		if (!size_sects || size_sects > mo->size) {
 			mo->nsects = sect;
 			return false;
 		}
 
 		if (mo->segs[j].cmdsize != sizeof (struct MACH0_(segment_command)) \
 				  + (sizeof (struct MACH0_(section))*mo->segs[j].nsects)) {
 			mo->nsects = sect;
 			return false;
 		}
 
 		if (off + sizeof (struct MACH0_(segment_command)) > mo->size ||\
 				off + sizeof (struct MACH0_(segment_command)) + size_sects > mo->size) {
 			mo->nsects = sect;
 			return false;
 		}
 
 		if (!(mo->sects = realloc (mo->sects, mo->nsects * sizeof (struct MACH0_(section))))) {
 			r_sys_perror ("realloc (sects)");
 			mo->nsects = sect;
 			return false;
 		}
 
 		for (k = sect, j = 0; k < mo->nsects; k++, j++) {
 			ut64 offset = off + sizeof (struct MACH0_(segment_command)) + j * sizeof (struct MACH0_(section));
 			len = r_buf_read_at (mo->b, offset, sec, sizeof (struct MACH0_(section)));
 			if (len != sizeof (struct MACH0_(section))) {
-				R_LOG_ERROR ("read (sects)");
+				R_LOG_ERROR ("read sects");
 				mo->nsects = sect;
 				return false;
 			}
 
 			i = 0;
-			memcpy (&mo->sects[k].sectname, &sec[i], 16);
+			memcpy (&mo->sects[k].sectname, &sec[i], 16); // INFO: this string is not null terminated!
 			i += 16;
-			memcpy (&mo->sects[k].segname, &sec[i], 16);
+			memcpy (&mo->sects[k].segname, &sec[i], 16); // INFO: Remember: it's not null terminated!
 			i += 16;
 			snprintf (section_flagname, sizeof (section_flagname), "mach0_section_%.16s_%.16s.offset",
 						mo->sects[k].segname, mo->sects[k].sectname);
 			sdb_num_set (mo->kv, section_flagname, offset, 0);
 #if R_BIN_MACH064
 			snprintf (section_flagname, sizeof (section_flagname), "mach0_section_%.16s_%.16s.format",
 						mo->sects[k].segname, mo->sects[k].sectname);
 			sdb_set (mo->kv, section_flagname, "mach0_section64", 0);
 #else
 			snprintf (section_flagname, sizeof (section_flagname), "mach0_section_%.16s_%.16s.format",
 						mo->sects[k].segname, mo->sects[k].sectname);
 			sdb_set (mo->kv, section_flagname, "mach0_section", 0);
 #endif
 
 #if R_BIN_MACH064
 			mo->sects[k].addr = r_read_ble64 (&sec[i], mo->big_endian);
 			i += sizeof (ut64);
 			mo->sects[k].size = r_read_ble64 (&sec[i], mo->big_endian);
 			i += sizeof (ut64);
 #else
 			mo->sects[k].addr = r_read_ble32 (&sec[i], mo->big_endian);
 			i += sizeof (ut32);
 			mo->sects[k].size = r_read_ble32 (&sec[i], mo->big_endian);
 			i += sizeof (ut32);
 #endif
 			mo->sects[k].offset = r_read_ble32 (&sec[i], mo->big_endian);
 			i += sizeof (ut32);
 			mo->sects[k].align = r_read_ble32 (&sec[i], mo->big_endian);
 			i += sizeof (ut32);
 			mo->sects[k].reloff = r_read_ble32 (&sec[i], mo->big_endian);
 			i += sizeof (ut32);
 			mo->sects[k].nreloc = r_read_ble32 (&sec[i], mo->big_endian);
 			i += sizeof (ut32);
 			mo->sects[k].flags = r_read_ble32 (&sec[i], mo->big_endian);
 			i += sizeof (ut32);
 			mo->sects[k].reserved1 = r_read_ble32 (&sec[i], mo->big_endian);
 			i += sizeof (ut32);
 			mo->sects[k].reserved2 = r_read_ble32 (&sec[i], mo->big_endian);
 #if R_BIN_MACH064
 			i += sizeof (ut32);
 			mo->sects[k].reserved3 = r_read_ble32 (&sec[i], mo->big_endian);
 #endif
 		}
 	}
 	return true;
 }
 
 #define Error(x) error_message = x; goto error;
@@ -2560,70 +2560,71 @@ RList *MACH0_(get_segments)(RBinFile *bf, struct MACH0_(obj_t) *macho) {
 const RVector *MACH0_(load_sections)(struct MACH0_(obj_t) *mo) {
 	r_return_val_if_fail (mo, NULL);
 	if (mo->sections_loaded) {
 		return &mo->sections_cache;
 	}
 
 	mo->sections_loaded = true;
 	r_vector_init (&mo->sections_cache, sizeof (struct section_t), NULL, NULL);
 
 	char sectname[64];
 	char raw_segname[17];
 	size_t i, j, to;
 	struct MACH0_(segment_command) *seg;
 
 	/* for core files */
 	if (mo->nsects < 1 && mo->nsegs > 0) {
 		if (!r_vector_reserve (&mo->sections_cache, mo->nsegs)) {
 			return NULL;
 		}
 		for (i = 0; i < mo->nsegs; i++) {
 			struct section_t *section = r_vector_end (&mo->sections_cache);
 			seg = &mo->segs[i];
 			section->vaddr = seg->vmaddr;
 			section->paddr = seg->fileoff;
 			section->size = seg->vmsize;
 			section->vsize = seg->vmsize;
 			section->align = 4096;
 			section->flags = seg->flags;
 			r_str_ncpy (sectname, seg->segname, 16);
 			sectname[16] = 0;
 			r_str_filter (sectname, -1);
 			// hack to support multiple sections with same name
 			section->perm = prot2perm (seg->initprot);
 		}
 		return &mo->sections_cache;
 	}
 
 	if (!mo->sects) {
 		return NULL;
 	}
 	to = R_MIN (mo->nsects, MACHO_MAX_SECTIONS);
 	if (to < 1) {
 		return NULL;
 	}
 	if (!r_vector_reserve (&mo->sections_cache, to)) {
 		return NULL;
 	}
 	for (i = 0; i < to; i++) {
 		struct section_t *section = r_vector_end (&mo->sections_cache);
 		section->paddr = (ut64)mo->sects[i].offset;
 		section->vaddr = (ut64)mo->sects[i].addr;
 		section->size = (mo->sects[i].flags == S_ZEROFILL) ? 0 : (ut64)mo->sects[i].size;
 		section->vsize = (ut64)mo->sects[i].size;
 		section->align = mo->sects[i].align;
 		section->flags = mo->sects[i].flags;
 		r_str_ncpy (sectname, mo->sects[i].sectname, 17);
 		r_str_filter (sectname, -1);
-		r_str_ncpy (raw_segname, mo->sects[i].segname, 16);
+		r_str_ncpy (raw_segname, mo->sects[i].segname, 17);
+		r_str_filter (raw_segname, -1);
 		for (j = 0; j < mo->nsegs; j++) {
 			if (section->vaddr >= mo->segs[j].vmaddr &&
 				section->vaddr < (mo->segs[j].vmaddr + mo->segs[j].vmsize)) {
 				section->perm = prot2perm (mo->segs[j].initprot);
 				break;
 			}
 		}
 		snprintf (section->name, sizeof (section->name),
 			"%d.%s.%s", (int)i, raw_segname, sectname);
 	}
 	return &mo->sections_cache;
 }
diff --git a/libr/include/r_util/r_str.h b/libr/include/r_util/r_str.h
index a2a295a97c..556b5eded7 100644
--- a/libr/include/r_util/r_str.h
+++ b/libr/include/r_util/r_str.h
@@ -107,16 +107,6 @@ R_API void r_str_filter_zeroline(char *str, int len);
 R_API size_t r_str_utf8_codepoint(const char *s, size_t left);
 R_API bool r_str_char_fullwidth(const char *s, size_t left);
 R_API int r_str_write(int fd, const char *b);
-static inline size_t r_str_ncpy(char *x, const char *y, int z) {
-	if (z > 0) {
-		size_t ylen = strlen (y) + 1;
-		size_t flen = R_MIN (ylen, z);
-		memcpy (x, y, flen);
-		x[flen - 1] = 0;
-		return ylen;
-	}
-	return 0;
-}
 R_API void r_str_sanitize(char *c);
 R_API char *r_str_sanitize_sdb_key(const char *s);
 R_API const char *r_str_casestr(const char *a, const char *b);
@@ -278,6 +268,36 @@ R_API bool r_str_glob(const char *str, const char *glob);
 R_API int r_str_binstr2bin(const char *str, ut8 *out, int outlen);
 R_API char *r_str_between(const char *str, const char *prefix, const char *suffix);
 #undef r_str_startswith
+#if 1
+static inline size_t r_str_ncpy(char *dst, const char *src, size_t n) {
+	size_t i;
+
+	// do not do anything if n is 0
+	if (n == 0) {
+		return 0;
+	}
+
+	n--;
+	for (i = 0; src[i] && n > 0; i++, n--) {
+		dst[i] = src[i];
+	}
+	dst[i] = 0;
+	return i;
+}
+#else
+static inline size_t r_str_ncpy(char *x, const char *y, int z) {
+	if (z > 0) {
+		// size_t ylen = strnlen (y, z) + 1;
+		size_t ylen = r_str_nlen (y, z) + 1;
+		// size_t ylen = strlen (y) + 1;
+		// size_t flen = R_MIN (ylen, z);
+		memcpy (x, y, ylen);
+		x[ylen - 1] = 0;
+		return ylen;
+	}
+	return 0;
+}
+#endif
 R_API bool r_str_startswith(const char *str, const char *needle);
 R_UNUSED static bool r_str_startswith_inline(const char *str, const char *needle) {
 	if (!str || !needle) {
