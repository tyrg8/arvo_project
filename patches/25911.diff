commit b86bc3c8296f7d37cacf674ee031851cd513b8e4
Author: Joe Drago <jdrago@netflix.com>
Date:   Thu Sep 24 12:32:31 2020 -0700

    Reintroduce an important size check in avifROStreamReadBoxHeader()

diff --git a/include/avif/internal.h b/include/avif/internal.h
index c237866..9042a85 100644
--- a/include/avif/internal.h
+++ b/include/avif/internal.h
@@ -220,6 +220,7 @@ avifBool avifROStreamReadU32(avifROStream * stream, uint32_t * v);
 avifBool avifROStreamReadUX8(avifROStream * stream, uint64_t * v, uint64_t factor); // Reads a factor*8 sized uint, saves in v
 avifBool avifROStreamReadU64(avifROStream * stream, uint64_t * v);
 avifBool avifROStreamReadString(avifROStream * stream, char * output, size_t outputSize);
+avifBool avifROStreamReadBoxHeaderPartial(avifROStream * stream, avifBoxHeader * header); // This doesn't require that the full box can fit in the stream
 avifBool avifROStreamReadBoxHeader(avifROStream * stream, avifBoxHeader * header);
 avifBool avifROStreamReadVersionAndFlags(avifROStream * stream, uint8_t * version, uint32_t * flags); // version and flags ptrs are both optional
 avifBool avifROStreamReadAndEnforceVersion(avifROStream * stream, uint8_t enforcedVersion); // currently discards flags
diff --git a/src/read.c b/src/read.c
index 1196436..be53466 100644
--- a/src/read.c
+++ b/src/read.c
@@ -2029,55 +2029,55 @@ static avifBool avifParseFileTypeBox(avifFileType * ftyp, const uint8_t * raw, s
 static avifResult avifParse(avifDecoder * decoder)
 {
     avifResult readResult;
     size_t parseOffset = 0;
     avifDecoderData * data = decoder->data;
 
     for (;;) {
         // Read just enough to get the next box header (a max of 32 bytes)
         avifROData headerContents;
         readResult = decoder->io->read(decoder->io, 0, parseOffset, 32, &headerContents);
         if (readResult != AVIF_RESULT_OK) {
             return readResult;
         }
         if (!headerContents.size) {
             // If we got AVIF_RESULT_OK from the reader but received 0 bytes,
             // This we've reached the end of the file with no errors. Hooray!
             break;
         }
 
         // Parse the header, and find out how many bytes it actually was
         BEGIN_STREAM(headerStream, headerContents.data, headerContents.size);
         avifBoxHeader header;
-        CHECK(avifROStreamReadBoxHeader(&headerStream, &header));
+        CHECK(avifROStreamReadBoxHeaderPartial(&headerStream, &header));
         parseOffset += headerStream.offset;
 
         // Try to get the remainder of the box, if necessary
         avifROData boxContents = AVIF_DATA_EMPTY;
 
         // TODO: reorg this code to only do these memcmps once each
         if (!memcmp(header.type, "ftyp", 4) || (!memcmp(header.type, "meta", 4) || !memcmp(header.type, "moov", 4))) {
             readResult = decoder->io->read(decoder->io, 0, parseOffset, header.size, &boxContents);
             if (readResult != AVIF_RESULT_OK) {
                 return readResult;
             }
             if (boxContents.size != header.size) {
                 // A truncated box, bail out
                 return AVIF_RESULT_BMFF_PARSE_FAILED;
             }
         }
 
         if (!memcmp(header.type, "ftyp", 4)) {
             avifRWDataSet(&data->ftypData, boxContents.data, boxContents.size);
             CHECK(avifParseFileTypeBox(&data->ftyp, data->ftypData.data, data->ftypData.size));
         } else if (!memcmp(header.type, "meta", 4)) {
             CHECK(avifParseMetaBox(data->meta, boxContents.data, boxContents.size));
         } else if (!memcmp(header.type, "moov", 4)) {
             CHECK(avifParseMoovBox(data, boxContents.data, boxContents.size));
         }
 
         parseOffset += header.size;
     }
     return AVIF_RESULT_OK;
 }
 
 // ---------------------------------------------------------------------------
diff --git a/src/stream.c b/src/stream.c
index bc8a7b4..7d521f0 100644
--- a/src/stream.c
+++ b/src/stream.c
@@ -143,31 +143,39 @@ avifBool avifROStreamReadString(avifROStream * stream, char * output, size_t out
     return AVIF_TRUE;
 }
 
-avifBool avifROStreamReadBoxHeader(avifROStream * stream, avifBoxHeader * header)
+avifBool avifROStreamReadBoxHeaderPartial(avifROStream * stream, avifBoxHeader * header)
 {
     size_t startOffset = stream->offset;
 
     uint32_t smallSize;
     CHECK(avifROStreamReadU32(stream, &smallSize));
     CHECK(avifROStreamRead(stream, header->type, 4));
 
     uint64_t size = smallSize;
     if (size == 1) {
         CHECK(avifROStreamReadU64(stream, &size));
     }
 
     if (!memcmp(header->type, "uuid", 4)) {
         CHECK(avifROStreamSkip(stream, 16));
     }
 
     size_t bytesRead = stream->offset - startOffset;
     if ((size < bytesRead) || ((size - bytesRead) > SIZE_MAX)) {
         return AVIF_FALSE;
     }
     header->size = (size_t)(size - bytesRead);
     return AVIF_TRUE;
 }
 
+avifBool avifROStreamReadBoxHeader(avifROStream * stream, avifBoxHeader * header)
+{
+    if (!avifROStreamReadBoxHeaderPartial(stream, header)) {
+        return AVIF_FALSE;
+    }
+    return (header->size <= avifROStreamRemainingBytes(stream));
+}
+
 avifBool avifROStreamReadVersionAndFlags(avifROStream * stream, uint8_t * version, uint32_t * flags)
 {
     uint8_t versionAndFlags[4];
