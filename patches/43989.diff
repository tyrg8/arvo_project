commit 4aacb57de084f49178c248186dc34b1414bbfbd6
Author: Robin Watts <Robin.Watts@artifex.com>
Date:   Fri Jan 21 12:17:25 2022 +0000

    Bug 693376: Strip out hdr_id.
    
    This is part of some debugging code that hoped to give every
    memory allocation within gs (at least in single threaded mode)
    a unique id number.
    
    In consultation with Chris, we decided it's never really been
    used, so we're stripping it out.

diff --git a/base/gsalloc.c b/base/gsalloc.c
index ecf2459f8..9084983e7 100644
--- a/base/gsalloc.c
+++ b/base/gsalloc.c
@@ -1,61 +1,47 @@
-/* Copyright (C) 2001-2021 Artifex Software, Inc.
+/* Copyright (C) 2001-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 
 /* Standard memory allocator */
 #include "gx.h"
 #include "memory_.h"
 #include "gserrors.h"
 #include "gsexit.h"
 #include "gsmdebug.h"
 #include "gsstruct.h"
 #include "gxalloc.h"
 #include "stream.h"		/* for clearing stream list */
 #include "malloc_.h" /* For MEMENTO */
 
-#if GS_USE_MEMORY_HEADER_ID
-gs_id hdr_id = 0;
-#ifdef DEBUG
-/**** BIG WARNING: Calling this could be catastrophic if "ptr" does not point
- **** to a GS "struct" allocation.
- ****/
-gs_id get_mem_hdr_id (void *ptr)
-{
-    return (*((hdr_id_t *)((byte *)ptr) - HDR_ID_OFFSET));
-}
-#endif
-#endif
-
-
 /*
  * Define whether to try consolidating space before adding a new clump.
  * The default is not to do this, because it is computationally
  * expensive and doesn't seem to help much.  However, this is done for
  * "controlled" spaces whether or not the #define is in effect.
  */
 /*#define CONSOLIDATE_BEFORE_ADDING_CLUMP */
 
 /*
  * This allocator produces tracing messages of the form
  *      [aNMOTS]...
  * where
  *   N is the VM space number, +1 if we are allocating from stable memory.
  *   M is : for movable objects, | for immovable,
  *   O is {alloc = +, free = -, grow = >, shrink = <},
  *   T is {bytes = b, object = <, ref = $, string = >}, and
  *   S is {small freelist = f, large freelist = F, LIFO = space,
  *      own clump = L, lost = #, lost own clump = ~, other = .}.
  */
 #ifdef DEBUG
@@ -1094,60 +1080,57 @@ void
 gs_memory_set_vm_reclaim(gs_ref_memory_t * mem, bool enabled)
 {
     gs_memory_gc_status_t stat;
     gs_ref_memory_t * stable = (gs_ref_memory_t *)mem->stable_memory;
 
     gs_memory_gc_status(mem, &stat);
     stat.enabled = enabled;
     gs_memory_set_gc_status(mem, &stat);
     gs_memory_gc_status(stable, &stat);
     stat.enabled = enabled;
     gs_memory_set_gc_status(stable, &stat);
 }
 
 /* ================ Objects ================ */
 
 /* Allocate a small object quickly if possible. */
 /* The size must be substantially less than max_uint. */
 /* ptr must be declared as obj_header_t *. */
 /* pfl must be declared as obj_header_t **. */
 #define IF_FREELIST_ALLOC(ptr, imem, size, pstype, pfl)\
         if ( size <= max_freelist_size &&\
              *(pfl = &imem->freelists[(size + obj_align_mask) >> log2_obj_align_mod]) != 0\
            )\
         {	ptr = *pfl;\
                 *pfl = *(obj_header_t **)ptr;\
                 ptr[-1].o_size = (obj_size_t)size;\
                 ptr[-1].o_type = pstype;\
-                ASSIGN_HDR_ID(ptr);\
                 /* If debugging, clear the block in an attempt to */\
                 /* track down uninitialized data errors. */\
                 gs_alloc_fill(ptr, gs_alloc_fill_alloc, size);
 #define ELSEIF_BIG_FREELIST_ALLOC(ptr, imem, size, pstype)\
         }\
         else if (size > max_freelist_size &&\
                  (ptr = large_freelist_alloc(imem, size)) != 0)\
         {	ptr[-1].o_type = pstype;\
-                ASSIGN_HDR_ID(ptr);\
                 /* If debugging, clear the block in an attempt to */\
                 /* track down uninitialized data errors. */\
                 gs_alloc_fill(ptr, gs_alloc_fill_alloc, size);
 #define ELSEIF_LIFO_ALLOC(ptr, imem, size, pstype)\
         }\
         else if ( imem->cc && !imem->cc->c_alone && \
                 (imem->cc->ctop - (byte *)(ptr = (obj_header_t *)imem->cc->cbot))\
                 >= size + (obj_align_mod + sizeof(obj_header_t) * 2) &&\
              size < imem->large_size\
            )\
         {	imem->cc->cbot = (byte *)ptr + obj_size_round(size);\
                 ptr->o_pad = 0;\
                 ptr->o_alone = 0;\
                 ptr->o_size = (obj_size_t)size;\
                 ptr->o_type = pstype;\
                 ptr++;\
-                ASSIGN_HDR_ID(ptr);\
                 /* If debugging, clear the block in an attempt to */\
                 /* track down uninitialized data errors. */\
                 gs_alloc_fill(ptr, gs_alloc_fill_alloc, size);
 #define ELSE_ALLOC\
         }\
         else
@@ -1615,66 +1598,59 @@ static byte *
 i_alloc_string(gs_memory_t * mem, size_t nbytes, client_name_t cname)
 {
     gs_ref_memory_t * const imem = (gs_ref_memory_t *)mem;
     byte *str;
     clump_splay_walker sw;
 
     /*
      * Cycle through the clumps at the current save level, starting
      * with the currently open one.
      */
     clump_t *cp = clump_splay_walk_init_mid(&sw, imem->cc);
 
-    if (nbytes + (size_t)HDR_ID_OFFSET < nbytes)
-        return NULL;
-
-    nbytes += HDR_ID_OFFSET;
-
 #ifdef MEMENTO
     if (Memento_failThisEvent())
         return NULL;
 #endif
     if (cp == 0) {
         /* Open an arbitrary clump. */
         imem->cc = clump_splay_walk_init(&sw, imem);
         alloc_open_clump(imem);
     }
 top:
     if (imem->cc && !imem->cc->c_alone && imem->cc->ctop - imem->cc->cbot > nbytes) {
         if_debug4m('A', mem, "[a%d:+> ]%s(%"PRIuSIZE") = "PRI_INTPTR"\n",
                    alloc_trace_space(imem), client_name_string(cname), nbytes,
                    (intptr_t)(imem->cc->ctop - nbytes));
         str = imem->cc->ctop -= nbytes;
         gs_alloc_fill(str, gs_alloc_fill_alloc, nbytes);
-        str += HDR_ID_OFFSET;
-        ASSIGN_HDR_ID(str);
         return str;
     }
     /* Try the next clump. */
     cp = clump_splay_walk_fwd(&sw);
 
     if (cp != NULL)
     {
         alloc_close_clump(imem);
         imem->cc = cp;
         alloc_open_clump(imem);
         goto top;
     }
     if (nbytes > string_space_quanta(SIZE_MAX - sizeof(clump_head_t)) *
         string_data_quantum
         ) {			/* Can't represent the size in a uint! */
         return 0;
     }
     if (nbytes >= imem->large_size) {	/* Give it a clump all its own. */
         return i_alloc_string_immovable(mem, nbytes, cname);
     } else {			/* Add another clump. */
         cp = alloc_acquire_clump(imem, (ulong) imem->clump_size, true, "clump");
 
         if (cp == 0)
             return 0;
         alloc_close_clump(imem);
         imem->cc = clump_splay_walk_init_mid(&sw, cp);
         gs_alloc_fill(imem->cc->cbase, gs_alloc_fill_free,
                       imem->cc->climit - imem->cc->cbase);
         goto top;
     }
 }
@@ -1682,31 +1658,27 @@ static byte *
 i_alloc_string_immovable(gs_memory_t * mem, size_t nbytes, client_name_t cname)
 {
     gs_ref_memory_t * const imem = (gs_ref_memory_t *)mem;
     byte *str;
     size_t asize;
     clump_t *cp;
 
-    nbytes += HDR_ID_OFFSET;
-
 #ifdef MEMENTO
     if (Memento_failThisEvent())
         return NULL;
 #endif
     /* Give it a clump all its own. */
     asize = string_clump_space(nbytes) + sizeof(clump_head_t);
     cp = alloc_acquire_clump(imem, asize, true, "large string clump");
 
     if (cp == 0)
         return 0;
     cp->c_alone = true;
 
     str = cp->ctop = cp->climit - nbytes;
     if_debug4m('a', mem, "[a%d|+>L]%s(%"PRIuSIZE") = "PRI_INTPTR"\n",
                alloc_trace_space(imem), client_name_string(cname), nbytes,
                (intptr_t)str);
     gs_alloc_fill(str, gs_alloc_fill_alloc, nbytes);
-    str += HDR_ID_OFFSET;
-    ASSIGN_HDR_ID(str);
 
     return Memento_label(str, cname);
 }
@@ -1715,60 +1687,48 @@ static byte *
 i_resize_string(gs_memory_t * mem, byte * data, size_t old_num, size_t new_num,
                 client_name_t cname)
 {
     gs_ref_memory_t * const imem = (gs_ref_memory_t *)mem;
     byte *ptr;
 
     if (old_num == new_num)	/* same size returns the same string */
         return data;
 
-    data -= HDR_ID_OFFSET;
-    old_num += HDR_ID_OFFSET;
-    new_num += HDR_ID_OFFSET;
-
     if ( imem->cc && data == imem->cc->ctop &&	/* bottom-most string */
         (new_num < old_num ||
          imem->cc->ctop - imem->cc->cbot > new_num - old_num)
         ) {			/* Resize in place. */
         ptr = data + old_num - new_num;
         if_debug6m('A', mem, "[a%d:%c> ]%s(%"PRIuSIZE"->%"PRIuSIZE") "PRI_INTPTR"\n",
                    alloc_trace_space(imem),
                    (new_num > old_num ? '>' : '<'),
                    client_name_string(cname), old_num, new_num,
                    (intptr_t)ptr);
         imem->cc->ctop = ptr;
         memmove(ptr, data, min(old_num, new_num));
 #ifdef DEBUG
         if (new_num > old_num)
             gs_alloc_fill(ptr + old_num, gs_alloc_fill_alloc,
                           new_num - old_num);
         else
             gs_alloc_fill(data, gs_alloc_fill_free, old_num - new_num);
 #endif
-        ptr += HDR_ID_OFFSET;
-        ASSIGN_HDR_ID(ptr);
     } else
         if (new_num < old_num) {
             /* trim the string and create a free space hole */
             ptr = data;
             imem->lost.strings += old_num - new_num;
             gs_alloc_fill(data + new_num, gs_alloc_fill_free,
                           old_num - new_num);
             if_debug5m('A', mem, "[a%d:<> ]%s(%"PRIuSIZE"->%"PRIuSIZE") "PRI_INTPTR"\n",
                        alloc_trace_space(imem), client_name_string(cname),
                        old_num, new_num, (intptr_t)ptr);
-            ptr += HDR_ID_OFFSET;
-            ASSIGN_HDR_ID(ptr);
         } else {			/* Punt. */
-            data += HDR_ID_OFFSET;
-            old_num -= HDR_ID_OFFSET;
-            new_num -= HDR_ID_OFFSET;
-
             ptr = gs_alloc_string(mem, new_num, cname);
             if (ptr == 0)
                 return 0;
             memcpy(ptr, data, min(old_num, new_num));
             gs_free_string(mem, data, old_num, cname);
         }
 
     return ptr;
 }
@@ -1777,22 +1737,20 @@ static void
 i_free_string(gs_memory_t * mem, byte * data, size_t nbytes,
               client_name_t cname)
 {
     gs_ref_memory_t * const imem = (gs_ref_memory_t *)mem;
 
     if (data) {
-        data -= HDR_ID_OFFSET;
-        nbytes += HDR_ID_OFFSET;
         if (imem->cc && data == imem->cc->ctop) {
             if_debug4m('A', mem, "[a%d:-> ]%s(%"PRIuSIZE") "PRI_INTPTR"\n",
                        alloc_trace_space(imem), client_name_string(cname), nbytes,
                        (intptr_t)data);
             imem->cc->ctop += nbytes;
         } else {
             if_debug4m('A', mem, "[a%d:->#]%s(%"PRIuSIZE") "PRI_INTPTR"\n",
                        alloc_trace_space(imem), client_name_string(cname), nbytes,
                        (intptr_t)data);
             imem->lost.strings += nbytes;
         }
         gs_alloc_fill(data, gs_alloc_fill_free, nbytes);
     }
 }
@@ -2055,31 +2013,30 @@ alloc_obj(gs_ref_memory_t *mem, obj_size_t lsize, gs_memory_type_ptr_t pstype,
         /*
          * If no success, try to scavenge from low free memory. This is
          * only enabled for controlled memory (currently only async
          * renderer) because it's too much work to prevent it from
          * examining outer save levels in the general case.
          */
         if (allocate_success)
             mem->cc->cbot = (byte *) ptr + asize;
         else if (!mem->is_controlled ||
                  (ptr = scavenge_low_free(mem, lsize)) == 0)
             return 0;	/* allocation failed */
         ptr->o_pad = 0;
         ptr->o_alone = 0;
         ptr->o_size = lsize;
     }
 done:
     ptr->o_type = pstype;
 #   if IGC_PTR_STABILITY_CHECK
         ptr->d.o.space_id = mem->space_id;
 #   endif
     ptr++;
-    ASSIGN_HDR_ID(ptr);
     gs_alloc_fill(ptr, gs_alloc_fill_alloc, lsize);
     return Memento_label(ptr, cname);
 }
 
 /*
  * Consolidate free objects contiguous to free space at cbot onto the cbot
  * area. Also keep track of end of highest internal free object
  * (int_freed_top).
  */
diff --git a/base/gxobj.h b/base/gxobj.h
index 927e1cdc0..208deacbd 100644
--- a/base/gxobj.h
+++ b/base/gxobj.h
@@ -1,171 +1,136 @@
-/* Copyright (C) 2001-2021 Artifex Software, Inc.
+/* Copyright (C) 2001-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 
 /* Memory manager implementation structures for Ghostscript */
 
 #ifndef gxobj_INCLUDED
 #  define gxobj_INCLUDED
 
 #include "gxbitmap.h"
 #include "gsstruct.h"
 #include "memento.h" /* Because we use "free" below */
 
 #ifndef IGC_PTR_STABILITY_CHECK
 #  define IGC_PTR_STABILITY_CHECK 0
 #endif
 
-#ifndef GS_USE_MEMORY_HEADER_ID
-#define GS_USE_MEMORY_HEADER_ID 1
-#endif
-
-#if GS_USE_MEMORY_HEADER_ID
-
-  typedef gs_id hdr_id_t;
-
-  extern hdr_id_t hdr_id;
-
-# define HDR_ID_OFFSET (sizeof(obj_header_t) - offset_of(obj_header_t, d.o.hdr_id))
-
-# ifdef DEBUG
-
-# define ASSIGN_HDR_ID(obj) (*(hdr_id_t *)(((byte *)obj) - HDR_ID_OFFSET)) = hdr_id++
-
-  gs_id get_mem_hdr_id (void *ptr);
-
-# else /* DEBUG */
-
-#  define ASSIGN_HDR_ID(obj_hdr)
-
-# endif /* DEBUG */
-
-#else
-
-# define ASSIGN_HDR_ID(obj_hdr)
-# define HDR_ID_OFFSET 0
-
-#endif /* GS_USE_MEMORY_HEADER_ID */
-
 /* ================ Objects ================ */
 
 /*
  * Object headers have the form:
         -l- -mark/back-
         -size-
         -type/reloc-
  * l (aLone) is a single bit.  Mark/back is 1 bit shorter than a uint.  We
  * round the header size up to the next multiple of the most severe
  * alignment restriction (4 or 8 bytes).
  *
  * The mark/back field is used for the mark during the marking phase of
  * garbage collection, and for a back pointer value during the compaction
  * phase.  Since we want to be able to collect local VM independently of
  * global VM, we need two different distinguished mark values:
  *      - For local objects that have not been traced and should be freed
  *      (compacted out), we use 1...11 in the mark field (o_unmarked).
  *      - For global objects that have not been traced but should be kept,
  *      we use 1...10 in the mark field (o_untraced).
  * Note that neither of these values is a possible real relocation value.
  *
  * The back pointer's meaning depends on whether the object is
  * free (unmarked) or in use (marked):
  *      - In free objects, the back pointer is an offset from the object
  * header back to a clump_head_t structure that contains the location
  * to which all the data in this clump will get moved; the reloc field
  * contains the amount by which the following run of useful objects
  * will be relocated downwards.
  *      - In useful objects, the back pointer is an offset from the object
  * back to the previous free object; the reloc field is not used (it
  * overlays the type field).
  * These two cases can be distinguished when scanning a clump linearly,
  * but when simply examining an object via a pointer, the clump pointer
  * is also needed.
  */
 #define obj_flag_bits 1
 #define obj_mb_bits (ARCH_SIZEOF_INT * 8 - obj_flag_bits)
 #define o_unmarked (((uint)1 << obj_mb_bits) - 1)
 #define o_set_unmarked(pp)\
   ((pp)->o_smark = o_unmarked)
 #define o_is_unmarked(pp)\
   ((pp)->o_smark == o_unmarked)
 #define o_untraced (((uint)1 << obj_mb_bits) - 2)
 #define o_set_untraced(pp)\
   ((pp)->o_smark = o_untraced)
 #define o_is_untraced(pp)\
   ((pp)->o_smark == o_untraced)
 #define o_marked 0
 #define o_mark(pp)\
   ((pp)->o_smark = o_marked)
 #define obj_back_shift obj_flag_bits
 #define obj_back_scale (1 << obj_back_shift)
 typedef struct obj_header_data_s {
     union _f {
         struct _h {
             unsigned alone:1, pad:obj_mb_bits;
         } h;
         struct _m {
             unsigned _:1, smark:obj_mb_bits;
         } m;
         struct _b {
             unsigned _:1, back:obj_mb_bits;
         } b;
     } f;
     obj_size_t size; /* Note, not size_t! */
     union _t {
         gs_memory_type_ptr_t type;
         size_t reloc;
     } t;
 #   if IGC_PTR_STABILITY_CHECK
     unsigned space_id:3; /* r_space_bits + 1 bit for "instability". */
 #   endif
-
-#   if GS_USE_MEMORY_HEADER_ID
-    hdr_id_t hdr_id; /* should be last, to save wasting space in the "strings" case. Makes object easier to trace thru GC */
-#   endif
 } obj_header_data_t;
 
 /*
  * Define the alignment modulus for aligned objects.  We assume all
  * alignment values are powers of 2; we can avoid nested 'max'es that way.
  * The final | is because back pointer values are divided by obj_back_scale,
  * so objects must be aligned at least 0 mod obj_back_scale.
  *
  * Note: OBJECTS ARE NOT GUARANTEED to be aligned any more strictly than
  * required by the hardware, regardless of the value of obj_align_mod.
  * See gsmemraw.h for more information about this.
  */
 #define obj_align_mod\
   (((ARCH_ALIGN_MEMORY_MOD - 1) |\
     (align_bitmap_mod - 1) |\
     (obj_back_scale - 1)) + 1)
 /* The only possible values for obj_align_mod are 4, 8, or 16.... */
 #if obj_align_mod == 4
 #  define log2_obj_align_mod 2
 #else
 #if obj_align_mod == 8
 #  define log2_obj_align_mod 3
 #else
 #if obj_align_mod == 16
 #  define log2_obj_align_mod 4
 #endif
 #endif
 #endif
 #define obj_align_mask (obj_align_mod-1)
 #define obj_align_round(siz)\
   (obj_size_t)(((siz) + obj_align_mask) & -obj_align_mod)
 #define obj_size_round(siz)\
   obj_align_round((siz) + sizeof(obj_header_t))
 
 /* Define the real object header type, taking alignment into account. */
diff --git a/psi/igcstr.c b/psi/igcstr.c
index 4c4baf3cf..0e10f74b9 100644
--- a/psi/igcstr.c
+++ b/psi/igcstr.c
@@ -1,26 +1,26 @@
-/* Copyright (C) 2001-2021 Artifex Software, Inc.
+/* Copyright (C) 2001-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 
 /* String GC routines for Ghostscript */
 #include "memory_.h"
 #include "ghost.h"
 #include "gsmdebug.h"
 #include "gsstruct.h"
 #include "iastate.h"
 #include "igcstr.h"
 #include "igc.h"
 
 /* Forward references */
@@ -31,12 +31,12 @@ void
 gc_strings_set_marks(clump_t * cp, bool mark)
 {
     if (cp->smark != 0) {
         if_debug3('6', "[6]clearing string marks "PRI_INTPTR"[%u] to %d\n",
                   (intptr_t)cp->smark, cp->smark_size, (int)mark);
         memset(cp->smark, 0, cp->smark_size);
         if (mark)
-            gc_mark_string(cp->sbase + HDR_ID_OFFSET, (cp->climit - cp->sbase) - HDR_ID_OFFSET, true, cp);
+            gc_mark_string(cp->sbase, (cp->climit - cp->sbase), true, cp);
     }
 }
 
 /* We mark strings a word at a time. */
@@ -63,57 +63,57 @@ typedef string_mark_unit bword;
 static bool
 gc_mark_string(const byte * ptr, uint size, bool set, const clump_t * cp)
 {
-    uint offset = (ptr - HDR_ID_OFFSET) - cp->sbase;
+    uint offset = ptr - cp->sbase;
     bword *bp = (bword *) (cp->smark + ((offset & -bword_bits) >> 3));
     uint bn = offset & (bword_bits - 1);
     bword m = bword_1s << bn;
-    uint left = size + HDR_ID_OFFSET;
+    uint left = size;
     bword marks = 0;
 
     bword_swap_bytes(m);
     if (set) {
         if (left + bn >= bword_bits) {
             marks |= ~*bp & m;
             *bp |= m;
             m = bword_1s, left -= bword_bits - bn, bp++;
             while (left >= bword_bits) {
                 marks |= ~*bp;
                 *bp = bword_1s;
                 left -= bword_bits, bp++;
             }
         }
         if (left) {
             bword_swap_bytes(m);
             m -= m << left;
             bword_swap_bytes(m);
             marks |= ~*bp & m;
             *bp |= m;
         }
     } else {
         if (left + bn >= bword_bits) {
             *bp &= ~m;
             m = bword_1s, left -= bword_bits - bn, bp++;
             if (left >= bword_bits * 5) {
                 memset(bp, 0, (left & -bword_bits) >> 3);
                 bp += left >> bword_log2_bits;
                 left &= bword_bits - 1;
             } else
                 while (left >= bword_bits) {
                     *bp = 0;
                     left -= bword_bits, bp++;
                 }
         }
         if (left) {
             bword_swap_bytes(m);
             m -= m << left;
             bword_swap_bytes(m);
             *bp &= ~m;
         }
     }
     return marks != 0;
 }
 
 #ifdef DEBUG
 /* Print a string for debugging.  We need this because there is no d---
  * equivalent of fwrite.
  */
@@ -131,65 +131,65 @@ bool
 gc_string_mark(const byte * ptr, uint size, bool set, gc_state_t * gcst)
 {
     const clump_t *cp;
     bool marks;
 
     if (size == 0)
         return false;
 #define dmprintstr(mem)\
-  dmputc(mem, '('); dmfwrite(mem, ptr - HDR_ID_OFFSET, min(size, 20));\
+  dmputc(mem, '('); dmfwrite(mem, ptr, min(size, 20));\
   dmputs(mem, (size <= 20 ? ")" : "...)"))
-    if (!(cp = gc_locate(ptr - HDR_ID_OFFSET, gcst))) {		/* not in a clump */
+    if (!(cp = gc_locate(ptr, gcst))) {		/* not in a clump */
 #ifdef DEBUG
         if (gs_debug_c('5')) {
-            dmlprintf2(gcst->heap, "[5]"PRI_INTPTR"[%u]", (intptr_t)ptr - HDR_ID_OFFSET, size);
+            dmlprintf2(gcst->heap, "[5]"PRI_INTPTR"[%u]", (intptr_t)ptr, size);
             dmprintstr(gcst->heap);
             dmputs(gcst->heap, " not in a clump\n");
         }
 #endif
         return false;
     }
     if (cp->smark == 0)		/* not marking strings */
         return false;
 #ifdef DEBUG
-    if (ptr - HDR_ID_OFFSET < cp->ctop) {
+    if (ptr < cp->ctop) {
         lprintf4("String pointer "PRI_INTPTR"[%u] outside ["PRI_INTPTR".."PRI_INTPTR")\n",
-                 (intptr_t)ptr - HDR_ID_OFFSET, size, (intptr_t)cp->ctop, (intptr_t)cp->climit);
+                 (intptr_t)ptr, size, (intptr_t)cp->ctop, (intptr_t)cp->climit);
         return false;
     } else if (ptr + size > cp->climit) {	/*
                                                  * If this is the bottommost string in a clump that has
                                                  * an inner clump, the string's starting address is both
                                                  * cp->ctop of the outer clump and cp->climit of the inner;
                                                  * gc_locate may incorrectly attribute the string to the
                                                  * inner clump because of this.  This doesn't affect
                                                  * marking or relocation, since the machinery for these
                                                  * is all associated with the outermost clump,
                                                  * but it can cause the validity check to fail.
                                                  * Check for this case now.
                                                  */
         const clump_t *scp = cp;
 
-        while (ptr - HDR_ID_OFFSET == scp->climit && scp->outer != 0)
+        while (ptr == scp->climit && scp->outer != 0)
             scp = scp->outer;
-        if (ptr - HDR_ID_OFFSET + size > scp->climit) {
+        if (ptr + size > scp->climit) {
             lprintf4("String pointer "PRI_INTPTR"[%u] outside ["PRI_INTPTR".."PRI_INTPTR")\n",
-                     (intptr_t)ptr - HDR_ID_OFFSET, size,
+                     (intptr_t)ptr, size,
                      (intptr_t)scp->ctop, (intptr_t)scp->climit);
             return false;
         }
     }
 #endif
     marks = gc_mark_string(ptr, size, set, cp);
 #ifdef DEBUG
     if (gs_debug_c('5')) {
         dmlprintf4(gcst->heap, "[5]%s%smarked "PRI_INTPTR"[%u]",
                   (marks ? "" : "already "), (set ? "" : "un"),
-                  (intptr_t)ptr - HDR_ID_OFFSET, size);
+                  (intptr_t)ptr, size);
         dmprintstr(gcst->heap);
         dmputc(gcst->heap, '\n');
     }
 #endif
     return marks;
 }
 
 /* Clear the relocation for strings. */
 /* This requires setting the marks. */
@@ -280,49 +280,48 @@ void
 igc_reloc_string(gs_string * sptr, gc_state_t * gcst)
 {
     byte *ptr;
     const clump_t *cp;
     uint offset;
     uint reloc;
     const byte *bitp;
     byte byt;
 
     if (sptr->size == 0) {
         sptr->data = 0;
         return;
     }
     ptr = sptr->data;
-    ptr -= HDR_ID_OFFSET;
 
     if (!(cp = gc_locate(ptr, gcst)))	/* not in a clump */
         return;
     if (cp->sreloc == 0 || cp->smark == 0)	/* not marking strings */
         return;
     offset = ptr - cp->sbase;
     reloc = cp->sreloc[offset >> log2_string_data_quantum];
     bitp = &cp->smark[offset >> 3];
     switch (offset & (string_data_quantum - 8)) {
 #if log2_string_data_quantum > 5
         case 56:
             reloc -= byte_count_one_bits(bitp[-7]);
         case 48:
             reloc -= byte_count_one_bits(bitp[-6]);
         case 40:
             reloc -= byte_count_one_bits(bitp[-5]);
         case 32:
             reloc -= byte_count_one_bits(bitp[-4]);
 #endif
         case 24:
             reloc -= byte_count_one_bits(bitp[-3]);
         case 16:
             reloc -= byte_count_one_bits(bitp[-2]);
         case 8:
             reloc -= byte_count_one_bits(bitp[-1]);
     }
     byt = *bitp & (0xff >> (8 - (offset & 7)));
     reloc -= byte_count_one_bits(byt);
     if_debug2('5', "[5]relocate string "PRI_INTPTR" to 0x%lx\n",
               (intptr_t)ptr, (intptr_t)(cp->sdest - reloc));
-    sptr->data = (cp->sdest - reloc) + HDR_ID_OFFSET;
+    sptr->data = (cp->sdest - reloc);
 }
 void
 igc_reloc_const_string(gs_const_string * sptr, gc_state_t * gcst)
