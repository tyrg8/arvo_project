commit 8dd91f52a52f0804970fe65738fade9be4bafd54
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Mon Jan 27 16:13:36 2020 +0100

    Remove state pointer argument from php_strip_tags

diff --git a/ext/filter/sanitizing_filters.c b/ext/filter/sanitizing_filters.c
index cb1d3a10b2..25b2f39fde 100644
--- a/ext/filter/sanitizing_filters.c
+++ b/ext/filter/sanitizing_filters.c
@@ -168,45 +168,45 @@ static void filter_map_apply(zval *value, filter_map *map)
 /* {{{ php_filter_string */
 void php_filter_string(PHP_INPUT_FILTER_PARAM_DECL)
 {
 	size_t new_len;
 	unsigned char enc[256] = {0};
 
 	if (!Z_REFCOUNTED_P(value)) {
 		ZVAL_STRINGL(value, Z_STRVAL_P(value), Z_STRLEN_P(value));
 	}
 
 	/* strip high/strip low ( see flags )*/
 	php_filter_strip(value, flags);
 
 	if (!(flags & FILTER_FLAG_NO_ENCODE_QUOTES)) {
 		enc['\''] = enc['"'] = 1;
 	}
 	if (flags & FILTER_FLAG_ENCODE_AMP) {
 		enc['&'] = 1;
 	}
 	if (flags & FILTER_FLAG_ENCODE_LOW) {
 		memset(enc, 1, 32);
 	}
 	if (flags & FILTER_FLAG_ENCODE_HIGH) {
 		memset(enc + 127, 1, sizeof(enc) - 127);
 	}
 
 	php_filter_encode_html(value, enc);
 
 	/* strip tags, implicitly also removes \0 chars */
-	new_len = php_strip_tags_ex(Z_STRVAL_P(value), Z_STRLEN_P(value), NULL, NULL, 0, 1);
+	new_len = php_strip_tags_ex(Z_STRVAL_P(value), Z_STRLEN_P(value), NULL, 0, 1);
 	Z_STRLEN_P(value) = new_len;
 
 	if (new_len == 0) {
 		zval_ptr_dtor(value);
 		if (flags & FILTER_FLAG_EMPTY_STRING_NULL) {
 			ZVAL_NULL(value);
 		} else {
 			ZVAL_EMPTY_STRING(value);
 		}
 		return;
 	}
 }
 /* }}} */
 
 /* {{{ php_filter_encoded */
diff --git a/ext/standard/php_string.h b/ext/standard/php_string.h
index b7084d0980..2c3953b958 100644
--- a/ext/standard/php_string.h
+++ b/ext/standard/php_string.h
@@ -123,8 +123,8 @@ PHPAPI char *php_stristr(char *s, char *t, size_t s_len, size_t t_len);
 PHPAPI zend_string *php_str_to_str(const char *haystack, size_t length, const char *needle,
 		size_t needle_len, const char *str, size_t str_len);
 PHPAPI zend_string *php_trim(zend_string *str, char *what, size_t what_len, int mode);
-PHPAPI size_t php_strip_tags(char *rbuf, size_t len, uint8_t *state, const char *allow, size_t allow_len);
-PHPAPI size_t php_strip_tags_ex(char *rbuf, size_t len, uint8_t *stateptr, const char *allow, size_t allow_len, zend_bool allow_tag_spaces);
+PHPAPI size_t php_strip_tags(char *rbuf, size_t len, const char *allow, size_t allow_len);
+PHPAPI size_t php_strip_tags_ex(char *rbuf, size_t len, const char *allow, size_t allow_len, zend_bool allow_tag_spaces);
 PHPAPI void php_implode(const zend_string *delim, HashTable *arr, zval *return_value);
 PHPAPI void php_explode(const zend_string *delim, zend_string *str, zval *return_value, zend_long limit);
 
diff --git a/ext/standard/string.c b/ext/standard/string.c
index ffa05a967b..6fb9683c5a 100644
--- a/ext/standard/string.c
+++ b/ext/standard/string.c
@@ -4619,51 +4619,51 @@ PHP_FUNCTION(nl2br)
 /* {{{ proto string strip_tags(string str [, string allowable_tags])
    Strips HTML and PHP tags from a string */
 PHP_FUNCTION(strip_tags)
 {
 	zend_string *buf;
 	zend_string *str;
 	zval *allow=NULL;
 	const char *allowed_tags=NULL;
 	size_t allowed_tags_len=0;
 	smart_str tags_ss = {0};
 
 	ZEND_PARSE_PARAMETERS_START(1, 2)
 		Z_PARAM_STR(str)
 		Z_PARAM_OPTIONAL
 		Z_PARAM_ZVAL(allow)
 	ZEND_PARSE_PARAMETERS_END();
 
 	if (allow) {
 		if (Z_TYPE_P(allow) == IS_ARRAY) {
 			zval *tmp;
 			zend_string *tag;
 
 			ZEND_HASH_FOREACH_VAL(Z_ARRVAL_P(allow), tmp) {
 				tag = zval_get_string(tmp);
 				smart_str_appendc(&tags_ss, '<');
 				smart_str_append(&tags_ss, tag);
 				smart_str_appendc(&tags_ss, '>');
 				zend_string_release(tag);
 			} ZEND_HASH_FOREACH_END();
 			if (tags_ss.s) {
 				smart_str_0(&tags_ss);
 				allowed_tags = ZSTR_VAL(tags_ss.s);
 				allowed_tags_len = ZSTR_LEN(tags_ss.s);
 			}
 		} else {
 			/* To maintain a certain BC, we allow anything for the second parameter and return original string */
 			convert_to_string(allow);
 			allowed_tags = Z_STRVAL_P(allow);
 			allowed_tags_len = Z_STRLEN_P(allow);
 		}
 	}
 
 	buf = zend_string_init(ZSTR_VAL(str), ZSTR_LEN(str), 0);
-	ZSTR_LEN(buf) = php_strip_tags_ex(ZSTR_VAL(buf), ZSTR_LEN(str), NULL, allowed_tags, allowed_tags_len, 0);
+	ZSTR_LEN(buf) = php_strip_tags_ex(ZSTR_VAL(buf), ZSTR_LEN(str), allowed_tags, allowed_tags_len, 0);
 	smart_str_free(&tags_ss);
 	RETURN_NEW_STR(buf);
 }
 /* }}} */
 
 /* {{{ proto string|false setlocale(int category, string locale [, string ...])
    Set locale information */
@@ -4869,367 +4869,353 @@ int php_tag_find(char *tag, size_t len, const char *set) {
 }
 /* }}} */
 
-PHPAPI size_t php_strip_tags(char *rbuf, size_t len, uint8_t *stateptr, const char *allow, size_t allow_len) /* {{{ */
+PHPAPI size_t php_strip_tags(char *rbuf, size_t len, const char *allow, size_t allow_len) /* {{{ */
 {
-	return php_strip_tags_ex(rbuf, len, stateptr, allow, allow_len, 0);
+	return php_strip_tags_ex(rbuf, len, allow, allow_len, 0);
 }
 /* }}} */
 
 /* {{{ php_strip_tags
 
 	A simple little state-machine to strip out html and php tags
 
 	State 0 is the output state, State 1 means we are inside a
 	normal html tag and state 2 means we are inside a php tag.
 
 	The state variable is passed in to allow a function like fgetss
 	to maintain state across calls to the function.
 
 	lc holds the last significant character read and br is a bracket
 	counter.
 
 	When an allow string is passed in we keep track of the string
 	in state 1 and when the tag is closed check it against the
 	allow string to see if we should allow it.
 
 	swm: Added ability to strip <?xml tags without assuming it PHP
 	code.
 */
-PHPAPI size_t php_strip_tags_ex(char *rbuf, size_t len, uint8_t *stateptr, const char *allow, size_t allow_len, zend_bool allow_tag_spaces)
+PHPAPI size_t php_strip_tags_ex(char *rbuf, size_t len, const char *allow, size_t allow_len, zend_bool allow_tag_spaces)
 {
 	char *tbuf, *tp, *rp, c, lc;
 	const char *buf, *p, *end;
 	int br, depth=0, in_q = 0;
 	uint8_t state = 0;
 	size_t pos;
 	char *allow_free = NULL;
 	char is_xml = 0;
 
 	buf = estrndup(rbuf, len);
 	end = buf + len;
 	lc = '\0';
 	p = buf;
 	rp = rbuf;
 	br = 0;
 	if (allow) {
 		allow_free = zend_str_tolower_dup_ex(allow, allow_len);
 		allow = allow_free ? allow_free : allow;
 		tbuf = emalloc(PHP_TAG_BUF_SIZE + 1);
 		tp = tbuf;
 	} else {
 		tbuf = tp = NULL;
 	}
 
-	if (stateptr) {
-		state = *stateptr;
-		switch (state) {
-			case 1: goto state_1;
-			case 2: goto state_2;
-			case 3: goto state_3;
-			case 4: goto state_4;
-			default:
-				break;
-		}
-	}
-
 state_0:
 	if (p >= end) {
 		goto finish;
 	}
 	c = *p;
 	switch (c) {
 		case '\0':
 			break;
 		case '<':
 			if (in_q) {
 				break;
 			}
 			if (isspace(*(p + 1)) && !allow_tag_spaces) {
 				*(rp++) = c;
 				break;
 			}
 			lc = '<';
 			state = 1;
 			if (allow) {
 				if (tp - tbuf >= PHP_TAG_BUF_SIZE) {
 					pos = tp - tbuf;
 					tbuf = erealloc(tbuf, (tp - tbuf) + PHP_TAG_BUF_SIZE + 1);
 					tp = tbuf + pos;
 				}
 				*(tp++) = '<';
 			}
 			p++;
 			goto state_1;
 		case '>':
 			if (depth) {
 				depth--;
 				break;
 			}
 
 			if (in_q) {
 				break;
 			}
 
 			*(rp++) = c;
 			break;
 		default:
 			*(rp++) = c;
 			break;
 	}
 	p++;
 	goto state_0;
 
 state_1:
 	if (p >= end) {
 		goto finish;
 	}
 	c = *p;
 	switch (c) {
 		case '\0':
 			break;
 		case '<':
 			if (in_q) {
 				break;
 			}
 			if (isspace(*(p + 1)) && !allow_tag_spaces) {
 				goto reg_char_1;
 			}
 			depth++;
 			break;
 		case '>':
 			if (depth) {
 				depth--;
 				break;
 			}
 			if (in_q) {
 				break;
 			}
 
 			lc = '>';
 			if (is_xml && p >= buf + 1 && *(p -1) == '-') {
 				break;
 			}
 			in_q = state = is_xml = 0;
 			if (allow) {
 				if (tp - tbuf >= PHP_TAG_BUF_SIZE) {
 					pos = tp - tbuf;
 					tbuf = erealloc(tbuf, (tp - tbuf) + PHP_TAG_BUF_SIZE + 1);
 					tp = tbuf + pos;
 				}
 				*(tp++) = '>';
 				*tp='\0';
 				if (php_tag_find(tbuf, tp-tbuf, allow)) {
 					memcpy(rp, tbuf, tp-tbuf);
 					rp += tp-tbuf;
 				}
 				tp = tbuf;
 			}
 			p++;
 			goto state_0;
 		case '"':
 		case '\'':
 			if (p != buf && (!in_q || *p == in_q)) {
 				if (in_q) {
 					in_q = 0;
 				} else {
 					in_q = *p;
 				}
 			}
 			goto reg_char_1;
 		case '!':
 			/* JavaScript & Other HTML scripting languages */
 			if (p >= buf + 1 && *(p-1) == '<') {
 				state = 3;
 				lc = c;
 				p++;
 				goto state_3;
 			} else {
 				goto reg_char_1;
 			}
 			break;
 		case '?':
 			if (p >= buf + 1 && *(p-1) == '<') {
 				br=0;
 				state = 2;
 				p++;
 				goto state_2;
 			} else {
 				goto reg_char_1;
 			}
 			break;
 		default:
 reg_char_1:
 			if (allow) {
 				if (tp - tbuf >= PHP_TAG_BUF_SIZE) {
 					pos = tp - tbuf;
 					tbuf = erealloc(tbuf, (tp - tbuf) + PHP_TAG_BUF_SIZE + 1);
 					tp = tbuf + pos;
 				}
 				*(tp++) = c;
 			}
 			break;
 	}
 	p++;
 	goto state_1;
 
 state_2:
 	if (p >= end) {
 		goto finish;
 	}
 	c = *p;
 	switch (c) {
 		case '(':
 			if (lc != '"' && lc != '\'') {
 				lc = '(';
 				br++;
 			}
 			break;
 		case ')':
 			if (lc != '"' && lc != '\'') {
 				lc = ')';
 				br--;
 			}
 			break;
 		case '>':
 			if (depth) {
 				depth--;
 				break;
 			}
 			if (in_q) {
 				break;
 			}
 
 			if (!br && p >= buf + 1 && lc != '\"' && *(p-1) == '?') {
 				in_q = state = 0;
 				tp = tbuf;
 				p++;
 				goto state_0;
 			}
 			break;
 		case '"':
 		case '\'':
 			if (p >= buf + 1 && *(p-1) != '\\') {
 				if (lc == c) {
 					lc = '\0';
 				} else if (lc != '\\') {
 					lc = c;
 				}
 				if (p != buf && (!in_q || *p == in_q)) {
 					if (in_q) {
 						in_q = 0;
 					} else {
 						in_q = *p;
 					}
 				}
 			}
 			break;
 		case 'l':
 		case 'L':
 			/* swm: If we encounter '<?xml' then we shouldn't be in
 			 * state == 2 (PHP). Switch back to HTML.
 			 */
 			if (state == 2 && p > buf+4
 				     && (*(p-1) == 'm' || *(p-1) == 'M')
 				     && (*(p-2) == 'x' || *(p-2) == 'X')
 				     && *(p-3) == '?'
 				     && *(p-4) == '<') {
 				state = 1; is_xml=1;
 				p++;
 				goto state_1;
 			}
 			break;
 		default:
 			break;
 	}
 	p++;
 	goto state_2;
 
 state_3:
 	if (p >= end) {
 		goto finish;
 	}
 	c = *p;
 	switch (c) {
 		case '>':
 			if (depth) {
 				depth--;
 				break;
 			}
 			if (in_q) {
 				break;
 			}
 			in_q = state = 0;
 			tp = tbuf;
 			p++;
 			goto state_0;
 		case '"':
 		case '\'':
 			if (p != buf && *(p-1) != '\\' && (!in_q || *p == in_q)) {
 				if (in_q) {
 					in_q = 0;
 				} else {
 					in_q = *p;
 				}
 			}
 			break;
 		case '-':
 			if (p >= buf + 2 && *(p-1) == '-' && *(p-2) == '!') {
 				state = 4;
 				p++;
 				goto state_4;
 			}
 			break;
 		case 'E':
 		case 'e':
 			/* !DOCTYPE exception */
 			if (p > buf+6
 			     && (*(p-1) == 'p' || *(p-1) == 'P')
 			     && (*(p-2) == 'y' || *(p-2) == 'Y')
 			     && (*(p-3) == 't' || *(p-3) == 'T')
 			     && (*(p-4) == 'c' || *(p-4) == 'C')
 			     && (*(p-5) == 'o' || *(p-5) == 'O')
 			     && (*(p-6) == 'd' || *(p-6) == 'D')) {
 				state = 1;
 				p++;
 				goto state_1;
 			}
 			break;
 		default:
 			break;
 	}
 	p++;
 	goto state_3;
 
 state_4:
 	while (p < end) {
 		c = *p;
 		if (c == '>' && !in_q) {
 			if (p >= buf + 2 && *(p-1) == '-' && *(p-2) == '-') {
 				in_q = state = 0;
 				tp = tbuf;
 				p++;
 				goto state_0;
 			}
 		}
 		p++;
 	}
 
 finish:
 	if (rp < rbuf + len) {
 		*rp = '\0';
 	}
 	efree((void *)buf);
 	if (tbuf) {
 		efree(tbuf);
 	}
 	if (allow_free) {
 		efree(allow_free);
 	}
-	if (stateptr)
-		*stateptr = state;
 
 	return (size_t)(rp - rbuf);
 }
 /* }}} */
 
 /* {{{ proto array str_getcsv(string input[, string delimiter[, string enclosure[, string escape]]])
