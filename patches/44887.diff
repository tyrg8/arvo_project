commit a880e1faee1df2b23054de13689de97b2ec08f28
Author: Liviu Chircu <liviu@opensips.org>
Date:   Sun Feb 20 19:32:20 2022 +0200

    parse_msg: Fix possible buffer read overflow with whitespace input
    
    Fixes OSS-Fuzz#44887

diff --git a/parser/msg_parser.c b/parser/msg_parser.c
index ff9352814..adf08e697 100644
--- a/parser/msg_parser.c
+++ b/parser/msg_parser.c
@@ -716,106 +716,106 @@ int clone_headers(struct sip_msg *from_msg, struct sip_msg *to_msg)
 /* returns 0 if ok, -1 for errors */
 int parse_msg(char* buf, unsigned int len, struct sip_msg* msg)
 {
 
 	char *tmp;
 	char* rest;
 	struct msg_start *fl;
 	int offset;
 	hdr_flags_t flags;
 
 	/* eat crlf from the beginning */
-	for (tmp=buf; (*tmp=='\n' || *tmp=='\r')&&
-			(unsigned int)(tmp-buf) < len ; tmp++);
+	for (tmp=buf; (unsigned int)(tmp-buf) < len
+	        && (*tmp=='\n' || *tmp=='\r'); tmp++);
 	offset=tmp-buf;
 	fl=&(msg->first_line);
 	rest=parse_first_line(tmp, len-offset, fl);
 
 	offset+=rest-tmp;
 	tmp=rest;
 	switch(fl->type){
 		case SIP_INVALID:
 			LM_DBG("invalid message\n");
 			/* if failed to parse the first line, we simply consider that the whole
 			   buffer was parsed, so that nothing is left to be parsed :) - this will
 			   do the trick and make "msg" struct acceptable for following parsing
 			   attempts */
 			msg->unparsed = msg->buf + msg->len;
 			goto error;
 			break;
 		case SIP_REQUEST:
 			LM_DBG("SIP Request:\n");
 			LM_DBG(" method:  <%.*s>\n",fl->u.request.method.len,
 				ZSW(fl->u.request.method.s));
 			LM_DBG(" uri:     <%.*s>\n",fl->u.request.uri.len,
 				ZSW(fl->u.request.uri.s));
 			LM_DBG(" version: <%.*s>\n",fl->u.request.version.len,
 				ZSW(fl->u.request.version.s));
 			flags=HDR_EOH_F;
 			break;
 		case SIP_REPLY:
 			LM_DBG("SIP Reply  (status):\n");
 			LM_DBG(" version: <%.*s>\n",fl->u.reply.version.len,
 					ZSW(fl->u.reply.version.s));
 			LM_DBG(" status:  <%.*s>\n", fl->u.reply.status.len,
 					ZSW(fl->u.reply.status.s));
 			LM_DBG(" reason:  <%.*s>\n", fl->u.reply.reason.len,
 					ZSW(fl->u.reply.reason.s));
 			flags=HDR_EOH_F;
 			break;
 		default:
 			LM_DBG("unknown type %d\n",fl->type);
 			goto error;
 	}
 	msg->unparsed=tmp;
 	/*find first Via: */
 	if (parse_headers(msg, flags, 0)==-1) goto error;
 
 #ifdef EXTRA_DEBUG
 	/* dump parsed data */
 	if (msg->via1){
 		LM_DBG(" first  via: <%.*s/%.*s/%.*s> <%.*s:%.*s(%d)>\n",
 			msg->via1->name.len,
 			ZSW(msg->via1->name.s),
 			msg->via1->version.len,
 			ZSW(msg->via1->version.s),
 			msg->via1->transport.len,
 			ZSW(msg->via1->transport.s),
 			msg->via1->host.len,
 			ZSW(msg->via1->host.s),
 			msg->via1->port_str.len,
 			ZSW(msg->via1->port_str.s),
 			msg->via1->port);
 		if (msg->via1->params.s)  LM_DBG(";<%.*s>\n",
 				msg->via1->params.len, ZSW(msg->via1->params.s));
 		if (msg->via1->comment.s)
 				LM_DBG(" <%.*s>\n",
 					msg->via1->comment.len, ZSW(msg->via1->comment.s));
 		LM_DBG ("\n");
 	}
 	if (msg->via2){
 		LM_DBG(" first  via: <%.*s/%.*s/%.*s> <%.*s:%.*s(%d)>\n",
 			msg->via2->name.len,
 			ZSW(msg->via2->name.s),
 			msg->via2->version.len,
 			ZSW(msg->via2->version.s),
 			msg->via2->transport.len,
 			ZSW(msg->via2->transport.s),
 			msg->via2->host.len,
 			ZSW(msg->via2->host.s),
 			msg->via2->port_str.len,
 			ZSW(msg->via2->port_str.s),
 			msg->via2->port);
 		if (msg->via2->params.s)  LM_DBG(";<%.*s>\n",
 				msg->via2->params.len, ZSW(msg->via2->params.s));
 		if (msg->via2->comment.s) LM_DBG(" <%.*s>\n",
 				msg->via2->comment.len, ZSW(msg->via2->comment.s));
 		LM_DBG ("\n");
 	}
 #endif
 
 
 #ifdef EXTRA_DEBUG
 	LM_DBG("exiting\n");
 #endif
 
 	return 0;
