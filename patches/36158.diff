commit 98231abe99b322fe286ea80ab2c066528540a4c5
Author: Luca Versari <veluca93@gmail.com>
Date:   Thu Jul 15 12:18:17 2021 +0200

    Properly unpoison/poison memory in SIMDfied noise decoding. (#319)
    
    This silences msan.

diff --git a/lib/jxl/dec_noise.cc b/lib/jxl/dec_noise.cc
index 08ddc033..240b8aff 100644
--- a/lib/jxl/dec_noise.cc
+++ b/lib/jxl/dec_noise.cc
@@ -1,27 +1,28 @@
 // Copyright (c) the JPEG XL Project Authors. All rights reserved.
 //
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
 #include "lib/jxl/dec_noise.h"
 
 #include <stdint.h>
 #include <stdio.h>
 #include <stdlib.h>
 
 #include <algorithm>
 #include <numeric>
 #include <utility>
 
 #undef HWY_TARGET_INCLUDE
 #define HWY_TARGET_INCLUDE "lib/jxl/dec_noise.cc"
 #include <hwy/foreach_target.h>
 #include <hwy/highway.h>
 
 #include "lib/jxl/base/compiler_specific.h"
 #include "lib/jxl/chroma_from_luma.h"
 #include "lib/jxl/image_ops.h"
 #include "lib/jxl/opsin_params.h"
+#include "lib/jxl/sanitizers.h"
 #include "lib/jxl/xorshift128plus-inl.h"
 HWY_BEFORE_NAMESPACE();
 namespace jxl {
@@ -199,45 +200,54 @@ void AddNoiseToRGB(const D d, const Vec<D> rnd_noise_r,
 void AddNoise(const NoiseParams& noise_params, const Rect& noise_rect,
               const Image3F& noise, const Rect& opsin_rect,
               const ColorCorrelationMap& cmap, Image3F* opsin) {
   if (!noise_params.HasAny()) return;
   const StrengthEvalLut noise_model(noise_params);
   D d;
   const auto half = Set(d, 0.5f);
 
   const size_t xsize = opsin_rect.xsize();
   const size_t ysize = opsin_rect.ysize();
 
   // With the prior subtract-random Laplacian approximation, rnd_* ranges were
   // about [-1.5, 1.6]; Laplacian3 about doubles this to [-3.6, 3.6], so the
   // normalizer is half of what it was before (0.5).
   const auto norm_const = Set(d, 0.22f);
 
   float ytox = cmap.YtoXRatio(0);
   float ytob = cmap.YtoBRatio(0);
 
+  const size_t xsize_v = RoundUpTo(xsize, Lanes(d));
+
   for (size_t y = 0; y < ysize; ++y) {
     float* JXL_RESTRICT row_x = opsin_rect.PlaneRow(opsin, 0, y);
     float* JXL_RESTRICT row_y = opsin_rect.PlaneRow(opsin, 1, y);
     float* JXL_RESTRICT row_b = opsin_rect.PlaneRow(opsin, 2, y);
     const float* JXL_RESTRICT row_rnd_r = noise_rect.ConstPlaneRow(noise, 0, y);
     const float* JXL_RESTRICT row_rnd_g = noise_rect.ConstPlaneRow(noise, 1, y);
     const float* JXL_RESTRICT row_rnd_c = noise_rect.ConstPlaneRow(noise, 2, y);
+    // Needed by the calls to Floor() in StrengthEvalLut. Only arithmetic and
+    // shuffles are otherwise done on the data, so this is safe.
+    msan::UnpoisonMemory(row_x + xsize, (xsize_v - xsize) * sizeof(float));
+    msan::UnpoisonMemory(row_y + xsize, (xsize_v - xsize) * sizeof(float));
     for (size_t x = 0; x < xsize; x += Lanes(d)) {
       const auto vx = Load(d, row_x + x);
       const auto vy = Load(d, row_y + x);
       const auto in_g = vy - vx;
       const auto in_r = vy + vx;
       const auto noise_strength_g = NoiseStrength(noise_model, in_g * half);
       const auto noise_strength_r = NoiseStrength(noise_model, in_r * half);
       const auto addit_rnd_noise_red = Load(d, row_rnd_r + x) * norm_const;
       const auto addit_rnd_noise_green = Load(d, row_rnd_g + x) * norm_const;
       const auto addit_rnd_noise_correlated =
           Load(d, row_rnd_c + x) * norm_const;
       AddNoiseToRGB(D(), addit_rnd_noise_red, addit_rnd_noise_green,
                     addit_rnd_noise_correlated, noise_strength_g,
                     noise_strength_r, ytox, ytob, row_x + x, row_y + x,
                     row_b + x);
     }
+    msan::PoisonMemory(row_x + xsize, (xsize_v - xsize) * sizeof(float));
+    msan::PoisonMemory(row_y + xsize, (xsize_v - xsize) * sizeof(float));
+    msan::PoisonMemory(row_b + xsize, (xsize_v - xsize) * sizeof(float));
   }
 }
 
