commit 904cad52974b36d30c6d2b683ee5a9cde5480e71
Author: Martin Mathieson <martin.r.mathieson@gmail.com>
Date:   Sat Oct 28 22:59:05 2023 +0100

    Fix some spelling errors

diff --git a/epan/dissectors/packet-ieee17221.c b/epan/dissectors/packet-ieee17221.c
index 0ecfb26f9c..207f348222 100644
--- a/epan/dissectors/packet-ieee17221.c
+++ b/epan/dissectors/packet-ieee17221.c
@@ -1733,78 +1733,78 @@ static const value_string aecp_message_type_vals[] = {
 };
 
 static const value_string aecp_command_type_vals[] = {
-   {AECP_COMMAND_ACQUIRE_ENTITY                , "ACQUIRE_ENTIY"},
+   {AECP_COMMAND_ACQUIRE_ENTITY                , "ACQUIRE_ENTITY"},
    {AECP_COMMAND_LOCK_ENTITY                   , "LOCK_ENTITY"},
    {AECP_COMMAND_ENTITY_AVAILABLE              , "ENTITY_AVAILABLE"},
    {AECP_COMMAND_CONTROLLER_AVAILABLE          , "CONTROLLER_AVAILABLE"},
    {AECP_COMMAND_READ_DESCRIPTOR               , "READ_DESCRIPTOR"},
    {AECP_COMMAND_WRITE_DESCRIPTOR              , "WRITE_DESCRIPTOR"},
    {AECP_COMMAND_SET_CONFIGURATION             , "SET_CONFIGURATION"},
    {AECP_COMMAND_GET_CONFIGURATION             , "GET_CONFIGURATION"},
    {AECP_COMMAND_SET_STREAM_FORMAT             , "SET_STREAM_FORMAT"},
    {AECP_COMMAND_GET_STREAM_FORMAT             , "GET_STREAM_FORMAT"},
    {AECP_COMMAND_SET_VIDEO_FORMAT              , "SET_VIDEO_FORMAT"},
    {AECP_COMMAND_GET_VIDEO_FORMAT              , "GET_VIDEO_FORMAT"},
    {AECP_COMMAND_SET_SENSOR_FORMAT             , "SET_SENSOR_FORMAT"},
    {AECP_COMMAND_GET_SENSOR_FORMAT             , "GET_SENSOR_FORMAT"},
    {AECP_COMMAND_SET_STREAM_INFO               , "SET_STREAM_INFO"},
    {AECP_COMMAND_GET_STREAM_INFO               , "GET_STREAM_INFO"},
    {AECP_COMMAND_SET_NAME                      , "SET_NAME"},
    {AECP_COMMAND_GET_NAME                      , "GET_NAME"},
    {AECP_COMMAND_SET_ASSOCIATION_ID            , "SET_ASSOCIATION_ID"},
    {AECP_COMMAND_GET_ASSOCIATION_ID            , "GET_ASSOCIATION_ID"},
    {AECP_COMMAND_SET_SAMPLING_RATE             , "SET_SAMPLING_RATE"},
    {AECP_COMMAND_GET_SAMPLING_RATE             , "GET_SAMPLING_RATE"},
    {AECP_COMMAND_SET_CLOCK_SOURCE              , "SET_CLOCK_SOURCE"},
    {AECP_COMMAND_GET_CLOCK_SOURCE              , "GET_CLOCK_SOURCE"},
    {AECP_COMMAND_SET_CONTROL_VALUE             , "SET_CONTROL_VALUE"},
    {AECP_COMMAND_GET_CONTROL_VALUE             , "GET_CONTROL_VALUE"},
    {AECP_COMMAND_INCREMENT_CONTROL             , "INCREMENT_CONTROL"},
    {AECP_COMMAND_DECREMENT_CONTROL             , "DECREMENT_CONTROL"},
    {AECP_COMMAND_SET_SIGNAL_SELECTOR           , "SET_SIGNAL_SELECTOR"},
    {AECP_COMMAND_GET_SIGNAL_SELECTOR           , "GET_SIGNAL_SELECTOR"},
    {AECP_COMMAND_SET_MIXER                     , "SET_MIXER"},
    {AECP_COMMAND_GET_MIXER                     , "GET_MIXER"},
    {AECP_COMMAND_SET_MATRIX                    , "SET_MATRIX"},
    {AECP_COMMAND_GET_MATRIX                    , "GET_MATRIX"},
    {AECP_COMMAND_START_STREAMING               , "START_STREAMING"},
    {AECP_COMMAND_STOP_STREAMING                , "STOP_STREAMING"},
    {AECP_COMMAND_REGISTER_UNSOL_NOTIFICATION   , "REGISTER_UNSOL_NOTIFICATION"},
    {AECP_COMMAND_DEREGISTER_UNSOL_NOTIFICATION , "DEREGISTER_UNSOL_NOTIFICATION"},
    {AECP_COMMAND_IDENTIFY_NOTIFICATION         , "IDENTIFY_NOTIFICATION"},
    {AECP_COMMAND_GET_AVB_INFO                  , "GET_AVB_INFO"},
    {AECP_COMMAND_GET_AS_PATH                   , "GET_AS_PATH"},
    {AECP_COMMAND_GET_COUNTERS                  , "GET_COUNTERS"},
    {AECP_COMMAND_REBOOT                        , "REBOOT"},
    {AECP_COMMAND_GET_AUDIO_MAP                 , "GET_AUDIO_MAP"},
    {AECP_COMMAND_ADD_AUDIO_MAPPINGS            , "ADD_AUDIO_MAPPINGS"},
    {AECP_COMMAND_REMOVE_AUDIO_MAPPINGS         , "REMOVE_AUDIO_MAPPINGS"},
    {AECP_COMMAND_GET_VIDEO_MAP                 , "GET_VIDEO_MAP"},
    {AECP_COMMAND_ADD_VIDEO_MAPPINGS            , "ADD_VIDEO_MAPPINGS"},
    {AECP_COMMAND_REMOVE_VIDEO_MAPPINGS         , "REMOVE_VIDEO_MAPPINGS"},
    {AECP_COMMAND_GET_SENSOR_MAP                , "GET_SENSOR_MAP"},
    {AECP_COMMAND_ADD_SENSOR_MAPPINGS           , "ADD_SENSOR_MAPPINGS"},
    {AECP_COMMAND_REMOVE_SENSOR_MAPPINGS        , "REMOVE_SENSOR_MAPPINGS"},
    {AECP_COMMAND_START_OPERATION               , "START_OPERATION"},
    {AECP_COMMAND_ABORT_OPERATION               , "ABORT_OPERATION"},
    {AECP_COMMAND_OPERATION_STATUS              , "OPERATION_STATUS"},
    {AECP_COMMAND_AUTH_ADD_KEY                  , "AUTH_ADD_KEY"},
    {AECP_COMMAND_AUTH_DELETE_KEY               , "AUTH_DELETE_KEY"},
    {AECP_COMMAND_AUTH_GET_KEY_LIST             , "AUTH_GET_KEY_LIST"},
    {AECP_COMMAND_AUTH_GET_KEY                  , "AUTH_GET_KEY"},
    {AECP_COMMAND_AUTH_ADD_KEY_TO_CHAIN         , "AUTH_ADD_KEY_TO_CHAIN"},
    {AECP_COMMAND_AUTH_DELETE_KEY_FROM_CHAIN    , "AUTH_DELETE_KEY_FROM_CHAIN"},
    {AECP_COMMAND_AUTH_GET_KEYCHAIN_LIST        , "AUTH_GET_KEYCHAIN_LIST"},
    {AECP_COMMAND_AUTH_GET_IDENTITY             , "AUTH_GET_IDENTITY"},
    {AECP_COMMAND_AUTH_ADD_TOKEN                , "AUTH_ADD_TOKEN"},
    {AECP_COMMAND_AUTH_DELETE_TOKEN             , "AUTH_DELETE_TOKEN"},
    {AECP_COMMAND_AUTHENTICATE                  , "AUTHENTICATE"},
    {AECP_COMMAND_DEAUTHENTICATE                , "DEAUTHENTICATE"},
    {AECP_COMMAND_ENABLE_TRANSPORT_SECURITY     , "ENABLE_TRANSPORT_SECURITY"},
    {AECP_COMMAND_DISABLE_TRANSPORT_SECURITY    , "DISABLE_TRANSPORT_SECURITY"},
    {AECP_COMMAND_ENABLE_STREAM_ENCRYPTION      , "ENABLE_STREAM_ENCRYPTION"},
    {AECP_COMMAND_DISABLE_STREAM_ENCRYPTION     , "DISABLE_STREAM_ENCRYPTION"},
    {AECP_COMMAND_SET_STREAM_BACKUP             , "SET_STREAM_BACKUP"},
    {AECP_COMMAND_GET_STREAM_BACKUP             , "GET_STREAM_BACKUP"},
    {0                                          , NULL}
 };
diff --git a/epan/dissectors/packet-pfcp.c b/epan/dissectors/packet-pfcp.c
index 86a177ca3a..62df89bac9 100644
--- a/epan/dissectors/packet-pfcp.c
+++ b/epan/dissectors/packet-pfcp.c
@@ -12000,5024 +12000,5024 @@ void
 proto_register_pfcp(void)
 {
 
     static hf_register_info hf_pfcp[] = {
 
         { &hf_pfcp_msg_type,
         { "Message Type", "pfcp.msg_type",
         FT_UINT8, BASE_DEC | BASE_EXT_STRING, &pfcp_message_type_ext, 0x0,
         NULL, HFILL }
         },
         { &hf_pfcp_msg_length,
         { "Length", "pfcp.length",
         FT_UINT16, BASE_DEC, NULL, 0x0,
         NULL, HFILL }
         },
         { &hf_pfcp_hdr_flags,
         { "Flags", "pfcp.flags",
         FT_UINT8, BASE_HEX, NULL, 0x0,
         NULL, HFILL }
         },
         { &hf_pfcp_version,
         { "Version", "pfcp.version",
         FT_UINT8, BASE_DEC, NULL, 0xe0,
         NULL, HFILL }
         },
         { &hf_pfcp_fo_flag,
         { "Follow On (FO)", "pfcp.fo_flag",
         FT_BOOLEAN, 8, NULL, 0x04,
         NULL, HFILL }
         },
         { &hf_pfcp_mp_flag,
         { "Message Priority (MP)", "pfcp.mp_flag",
         FT_BOOLEAN, 8, NULL, 0x02,
         NULL, HFILL }
         },
         { &hf_pfcp_s_flag,
         { "SEID (S)", "pfcp.s",
         FT_BOOLEAN, 8, NULL, 0x01,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_b0,
         { "Spare", "pfcp.spare_b0",
         FT_UINT8, BASE_DEC, NULL, 0x01,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_b1,
         { "Spare", "pfcp.spare_b1",
         FT_UINT8, BASE_DEC, NULL, 0x02,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_b2,
         { "Spare", "pfcp.spare_b2",
         FT_UINT8, BASE_DEC, NULL, 0x04,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_b3,
         { "Spare", "pfcp.spare_b3",
         FT_UINT8, BASE_DEC, NULL, 0x08,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_b4,
         { "Spare", "pfcp.spare_b4",
         FT_UINT8, BASE_DEC, NULL, 0x10,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_b5,
         { "Spare", "pfcp.spare_b5",
         FT_UINT8, BASE_DEC, NULL, 0x20,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_b6,
         { "Spare", "pfcp.spare_b6",
         FT_UINT8, BASE_DEC, NULL, 0x40,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_b7,
         { "Spare", "pfcp.spare_b7",
         FT_UINT8, BASE_DEC, NULL, 0x80,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_b7_b6,
         { "Spare", "pfcp.spare_b7_b6",
         FT_UINT8, BASE_DEC, NULL, 0xc0,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_b7_b5,
         { "Spare", "pfcp.spare_b7_b5",
         FT_UINT8, BASE_DEC, NULL, 0xe0,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_b7_b4,
         { "Spare", "pfcp.spare_b7_b4",
         FT_UINT8, BASE_DEC, NULL, 0xf0,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_b7_b3,
         { "Spare", "pfcp.spare_b7_b3",
         FT_UINT8, BASE_DEC, NULL, 0xf8,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_b7_b2,
         { "Spare", "pfcp.spare_b7_b2",
         FT_UINT8, BASE_DEC, NULL, 0xfc,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_b7_b1,
         { "Spare", "pfcp.spare_b7_b1",
         FT_UINT8, BASE_DEC, NULL, 0xfe,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_oct,
         { "Spare", "pfcp.spare_oct",
         FT_UINT8, BASE_DEC, NULL, 0x0,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_h0,
         { "Spare", "pfcp.spare_h0",
         FT_UINT8, BASE_DEC, NULL, 0x0f,
         NULL, HFILL }
         },
         { &hf_pfcp_spare_h1,
         { "Spare", "pfcp.spare_h1",
         FT_UINT8, BASE_DEC, NULL, 0xf0,
         NULL, HFILL }
         },
         { &hf_pfcp_spare,
         { "Spare", "pfcp.spare",
         FT_UINT8, BASE_DEC, NULL, 0x0,
         NULL, HFILL }
         },
         { &hf_pfcp_seid,
         { "SEID", "pfcp.seid",
         FT_UINT64, BASE_HEX, NULL, 0x0,
         NULL, HFILL }
         },
         { &hf_pfcp_seqno,
         { "Sequence Number", "pfcp.seqno",
         FT_UINT24, BASE_DEC, NULL, 0x0,
         NULL, HFILL }
         },
         { &hf_pfcp_response_in,
         { "Response In", "pfcp.response_in",
         FT_FRAMENUM, BASE_NONE, FRAMENUM_TYPE(FT_FRAMENUM_RESPONSE), 0x0,
         "The response to this PFCP request is in this frame", HFILL }
         },
         { &hf_pfcp_response_to,
         { "Response To", "pfcp.response_to",
         FT_FRAMENUM, BASE_NONE, FRAMENUM_TYPE(FT_FRAMENUM_RESPONSE), 0x0,
         "This is a response to the PFCP request in this frame", HFILL }
         },
         { &hf_pfcp_response_time,
         { "Response Time", "pfcp.response_time",
         FT_RELATIVE_TIME, BASE_NONE, NULL, 0x0,
         "The time between the Request and the Response", HFILL }
         },
         { &hf_pfcp_session,
         { "Session", "pfcp.session",
         FT_UINT32, BASE_DEC, NULL, 0,
         NULL, HFILL }
         },
         { &hf_pfcp_mp,
         { "Message Priority", "pfcp.mp",
         FT_UINT24, BASE_DEC, NULL, 0xf0,
         NULL, HFILL }
         },
         { &hf_pfcp_enterprise_id,
         { "Enterprise ID",    "pfcp.enterprise_id",
         FT_UINT16, BASE_ENTERPRISES, STRINGS_ENTERPRISES,
         0x0, NULL, HFILL } },
         { &hf_pfcp_enterprise_data,
         { "Enterprise IE Data",    "pfcp.enterprise_ie_data",
             FT_BYTES, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp2_ie,
         { "IE Type", "pfcp.ie_type",
         FT_UINT16, BASE_DEC | BASE_EXT_STRING, &pfcp_ie_type_ext, 0x0,
         NULL, HFILL }
         },
         { &hf_pfcp2_enterprise_ie,
         { "Enterprise specific IE Type", "pfcp.enterprise_ie",
         FT_UINT16, BASE_DEC, NULL, 0x0,
         NULL, HFILL }
         },
         { &hf_pfcp2_ie_len,
         { "IE Length", "pfcp.ie_len",
         FT_UINT16, BASE_DEC, NULL, 0x0,
         NULL, HFILL }
         },
         { &hf_pfcp_recovery_time_stamp,
         { "Recovery Time Stamp", "pfcp.recovery_time_stamp",
         FT_ABSOLUTE_TIME, ABSOLUTE_TIME_NTP_UTC, NULL, 0,
         NULL, HFILL }
         },
         { &hf_pfcp2_cause,
         { "Cause", "pfcp.cause",
         FT_UINT8, BASE_DEC, VALS(pfcp_cause_vals), 0x0,
         NULL, HFILL }
         },
         { &hf_pfcp_node_id_type,
         { "Address Type", "pfcp.node_id_type",
             FT_UINT8, BASE_DEC, VALS(pfcp_node_id_type_vals), 0x0f,
             NULL, HFILL }
         },
         { &hf_pfcp_node_id_ipv4,
         { "IPv4", "pfcp.node_id_ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_node_id_ipv6,
         { "IPv6", "pfcp.node_id_ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_node_id_fqdn,
         { "FQDN", "pfcp.node_id_fqdn",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_b0_v6,
         { "V6 (IPv6)", "pfcp.f_seid_flags.v6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_b1_v4,
         { "V4 (IPv4)", "pfcp.f_seid_flags.v4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_f_seid_ipv4,
         { "IPv4 address", "pfcp.f_seid.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_f_seid_ipv6,
         { "IPv6 address", "pfcp.f_seid.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_pdr_id,
         { "Rule ID", "pfcp.pdr_id",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_precedence,
         { "Precedence", "pfcp.precedence",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_source_interface,
         { "Source Interface", "pfcp.source_interface",
             FT_UINT8, BASE_DEC, VALS(pfcp_source_interface_vals), 0x0f,
             NULL, HFILL }
         },
         { &hf_pfcp_fteid_flg_spare,
         { "Spare", "pfcp.fteid_flg.spare",
             FT_UINT8, BASE_DEC, NULL, 0xf0,
             NULL, HFILL }
         },
         { &hf_pfcp_fteid_flg_b3_ch_id,
         { "CHID (CHOOSE_ID)", "pfcp.f_teid_flags.ch_id",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_fteid_flg_b2_ch,
         { "CH (CHOOSE)", "pfcp.f_teid_flags.ch",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_fteid_flg_b1_v6,
         { "V6 (IPv6)", "pfcp.f_teid_flags.v6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_fteid_flg_b0_v4,
         { "V4 (IPv4)", "pfcp.f_teid_flags.v4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_f_teid_ch_id,
         { "Choose Id", "pfcp.f_teid.choose_id",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_f_teid_teid,
         { "TEID", "pfcp.f_teid.teid",
             FT_UINT32, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_f_teid_ipv4,
         { "IPv4 address", "pfcp.f_teid.ipv4_addr",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_f_teid_ipv6,
         { "IPv6 address", "pfcp.f_teid.ipv6_addr",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_network_instance,
         { "Network Instance", "pfcp.network_instance",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_pdn_type,
         { "PDN Type", "pfcp.pdn_type",
             FT_UINT8, BASE_DEC, VALS(pfcp_pdn_type_vals), 0x7,
             NULL, HFILL }
         },
         { &hf_pfcp_multiplier_value_digits,
         { "Value Digits", "pfcp.multiplier.value_digits",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_multiplier_exponent,
         { "Exponent", "pfcp.multiplier.exponent",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_failed_rule_id_type,
         { "Failed Rule ID Type", "pfcp.failed_rule_id_type",
             FT_UINT8, BASE_DEC, VALS(pfcp_failed_rule_id_type_vals), 0x7,
             NULL, HFILL }
         },
         { &hf_pfcp_time_quota_mechanism_bti_type,
         { "Base Time Interval Type", "pfcp.time_quota_mechanism_bti_type",
             FT_UINT8, BASE_DEC, VALS(pfcp_time_quota_mechanism_bti_type_vals), 0x3,
             NULL, HFILL }
         },
         { &hf_pfcp_time_quota_mechanism_bti,
         { "Base Time Interval", "pfcp.time_quota_mechanism_bti",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_ue_ip_address_flag_b0_v6,
         { "V6 (IPv6)", "pfcp.ue_ip_address_flag.v6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_ue_ip_address_flag_b1_v4,
         { "V4 (IPv4)", "pfcp.ue_ip_address_flag.v4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_ue_ip_address_flag_b2_sd,
         { "S/D", "pfcp.ue_ip_address_flag.sd",
             FT_BOOLEAN, 8, TFS(&pfcp_ue_ip_add_sd_flag_vals), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_ue_ip_address_flag_b3_v6d,
         { "IPv6D", "pfcp.ue_ip_address_flag.v6d",
             FT_BOOLEAN, 8, TFS(&pfcp_ue_ip_add_sd_flag_vals), 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_ue_ip_address_flag_b4_chv4,
         { "CHV4", "pfcp.ue_ip_address_flag.chv4",
             FT_BOOLEAN, 8, TFS(&pfcp_ue_ip_add_sd_flag_vals), 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_ue_ip_address_flag_b5_chv6,
         { "CHV6", "pfcp.ue_ip_address_flag.chv6",
             FT_BOOLEAN, 8, TFS(&pfcp_ue_ip_add_sd_flag_vals), 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_ue_ip_address_flag_b6_v6pl,
         { "IPV6PL", "pfcp.ue_ip_address_flag.v6pl",
             FT_BOOLEAN, 8, TFS(&pfcp_ue_ip_add_sd_flag_vals), 0x40,
             NULL, HFILL }
         },
         { &hf_pfcp_ue_ip_addr_ipv4,
         { "IPv4 address", "pfcp.ue_ip_addr_ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_ue_ip_add_ipv6,
         { "IPv6 address", "pfcp.ue_ip_addr_ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_ue_ip_add_ipv6_prefix_delegation_bits,
         { "IPv6 Prefix Delegation Bits", "pfcp.ue_ip_addr_ipv6_prefix",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_ue_ip_add_ipv6_prefix_length,
         { "IPv6 Prefix Length", "pfcp.ue_ip_addr_ipv6_prefix_length",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_application_id,
         { "Application Identifier", "pfcp.application_id",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_application_id_str,
         { "Application Identifier", "pfcp.application_id_str",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_sdf_filter_flags_b0_fd,
         { "FD (Flow Description)", "pfcp.sdf_filter.fd",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_sdf_filter_flags_b1_ttc,
         { "TTC (ToS Traffic Class)", "pfcp.sdf_filter.ttc",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_sdf_filter_flags_b2_spi,
         { "SPI (Security Parameter Index)", "pfcp.sdf_filter.spi",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_sdf_filter_flags_b3_fl,
         { "FL (Flow Label)", "pfcp.sdf_filter.fl",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_sdf_filter_flags_b4_bid,
         { "BID (Bidirectional SDF Filter)", "pfcp.sdf_filter.bid",
             FT_BOOLEAN, 8, NULL, 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_flow_desc_len,
         { "Length of Flow Description", "pfcp.flow_desc_len",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_flow_desc,
         { "Flow Description", "pfcp.flow_desc",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_traffic_class,
         { "ToS Traffic Class", "pfcp.traffic_class",
             FT_UINT8, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_traffic_mask,
         { "Mask field", "pfcp.traffic_mask",
             FT_UINT8, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_traffic_dscp,
             {"DSCP", "pfcp.traffic_dscp",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL}
         },
         { &hf_pfcp_spi,
         { "Security Parameter Index", "pfcp.spi",
             FT_UINT32, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_flow_label_spare_bit,
         { "Spare bit", "pfcp.flow_label_spare_bit",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_flow_label,
         { "Flow Label", "pfcp.flow_label",
             FT_UINT24, BASE_HEX, NULL, 0x0FFFFF,
             NULL, HFILL }
         },
         { &hf_pfcp_sdf_filter_id,
         { "SDF Filter ID", "pfcp.sdf_filter_id",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_out_hdr_desc,
         { "Outer Header Removal Description", "pfcp.out_hdr_desc",
             FT_UINT8, BASE_DEC, VALS(pfcp_out_hdr_desc_vals), 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_gtpu_ext_hdr_del_b0_pdu_sess_cont,
         { "PDU Session Container to be deleted", "pfcp.gtpu_ext_hdr_del.pdu_sess_cont",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_far_id_flg,
         { "Allocation type", "pfcp.far_id_flg",
             FT_BOOLEAN, 32, TFS(&pfcp_id_predef_dynamic_tfs), 0x80000000,
             NULL, HFILL }
         },
         { &hf_pfcp_far_id,
         { "FAR ID", "pfcp.far_id",
             FT_UINT32, BASE_DEC, NULL, 0x7fffffff,
             NULL, HFILL }
         },
         { &hf_pfcp_urr_id_flg,
         { "Allocation type", "pfcp.urr_id_flg",
             FT_BOOLEAN, 32, TFS(&pfcp_id_predef_dynamic_tfs), 0x80000000,
             NULL, HFILL }
         },
         { &hf_pfcp_urr_id,
         { "URR ID", "pfcp.urr_id",
             FT_UINT32, BASE_DEC, NULL, 0x7fffffff,
             NULL, HFILL }
         },
         { &hf_pfcp_qer_id_flg,
         { "Allocation type", "pfcp.qer_id_flg",
             FT_BOOLEAN, 32, TFS(&pfcp_id_predef_dynamic_tfs), 0x80000000,
             NULL, HFILL }
         },
         { &hf_pfcp_qer_id,
         { "QER ID", "pfcp.qer_id",
             FT_UINT32, BASE_DEC, NULL, 0x7fffffff,
             NULL, HFILL }
         },
         { &hf_pfcp_predef_rules_name,
         { "Predefined Rules Name", "pfcp.predef_rules_name",
             FT_BYTES, BASE_SHOW_ASCII_PRINTABLE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_apply_action_flags_o5_b0_drop,
         { "DROP (Drop)", "pfcp.apply_action.drop",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_apply_action_flags_o5_b1_forw,
         { "FORW (Forward)", "pfcp.apply_action.forw",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_apply_action_flags_o5_b2_buff,
         { "BUFF (Buffer)", "pfcp.apply_action.buff",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_apply_action_flags_o5_b3_nocp,
         { "NOCP (Notify the CP function)", "pfcp.apply_action.nocp",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_apply_action_flags_o5_b4_dupl,
         { "DUPL (Duplicate)", "pfcp.apply_action.dupl",
             FT_BOOLEAN, 8, NULL, 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_apply_action_flags_o5_b5_ipma,
         { "IPMA (IP Multicast Accept)", "pfcp.apply_action.ipma",
             FT_BOOLEAN, 8, NULL, 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_apply_action_flags_o5_b6_ipmd,
         { "IPMD (IP Multicast Deny)", "pfcp.apply_action.ipmd",
             FT_BOOLEAN, 8, NULL, 0x40,
             NULL, HFILL }
         },
         { &hf_pfcp_apply_action_flags_o5_b7_dfrt,
         { "DFRT (Duplicate for Redundant Transmission)", "pfcp.apply_action.dfrt",
             FT_BOOLEAN, 8, NULL, 0x80,
             NULL, HFILL }
         },
         { &hf_pfcp_apply_action_flags_o6_b0_edrt,
         { "EDRT (Eliminate Duplicate Packets for Redundant Transmission)", "pfcp.apply_action.edrt",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_apply_action_flags_o6_b1_bdpn,
         { "BDPN (Buffered Downlink Packet Notification)", "pfcp.apply_action.bdpn",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_apply_action_flags_o6_b2_ddpn,
         { "DDPN (Discared Downlink Packet Notification)", "pfcp.apply_action.ddpn",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_apply_action_flags_o6_b3_fssm,
         { "FSSM (Forward packets to lower layer SSM)", "pfcp.apply_action.fssm",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_apply_action_flags_o6_b4_mbsu,
         { "MBSU (Forward and replicate MBS data using Unicast transport)", "pfcp.apply_action.mbsu",
             FT_BOOLEAN, 8, NULL, 0x10,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bar_id,
         { "BAR ID", "pfcp.bar_id",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_fq_csid_node_id_type,
         { "FQ-CSID Node-ID Type", "pfcp.fq_csid_node_id_type",
             FT_UINT8, BASE_DEC, VALS(pfcp_fq_csid_node_id_type_vals), 0xf0,
             NULL, HFILL }
         },
         { &hf_pfcp_num_csid,
         { "Number of CSID", "pfcp.num_csid",
             FT_UINT8, BASE_DEC, NULL, 0x0f,
             NULL, HFILL }
         },
         { &hf_pfcp_fq_csid_node_id_ipv4,
         { "Node-Address", "pfcp.q_csid_node_id.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_fq_csid_node_id_ipv6,
         { "Node-Address", "pfcp.q_csid_node_id.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_fq_csid_node_id_mcc_mnc,
         { "Node-Address MCC MNC", "pfcp.q_csid_node_id.mcc_mnc",
             FT_UINT32, BASE_DEC, NULL, 0xfffff000,
             NULL, HFILL }
         },
         { &hf_pfcp_fq_csid_node_id_int,
         { "Node-Address Number", "pfcp.q_csid_node_id.int",
             FT_UINT32, BASE_DEC, NULL, 0x00000fff,
             NULL, HFILL }
         },
         { &hf_pfcp_fq_csid,
         { "PDN Connection Set Identifier (CSID)", "pfcp.csid",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_fq_csid_node_type,
         { "Node Type", "pfcp.fq_csid_node_type",
             FT_UINT8, BASE_DEC, VALS(pfcp_fq_csid_node_type_vals), 0x0f,
             NULL, HFILL }
         },
         { &hf_pfcp_measurement_period,
         { "Measurement Period", "pfcp.measurement_period",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_duration_measurement,
         { "Duration", "pfcp.duration_measurement",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_time_of_first_packet,
         { "Time of First Packet", "pfcp.time_of_first_packet",
             FT_ABSOLUTE_TIME, ABSOLUTE_TIME_NTP_UTC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_time_of_last_packet,
         { "Time of Last Packet", "pfcp.time_of_last_packet",
             FT_ABSOLUTE_TIME, ABSOLUTE_TIME_NTP_UTC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_dst_interface,
         { "Interface", "pfcp.dst_interface",
             FT_UINT8, BASE_DEC, VALS(pfcp_dst_interface_vals), 0x0f,
             NULL, HFILL }
         },
         { &hf_pfcp_redirect_address_type,
         { "Redirect Address Type", "pfcp.redirect_address_type",
             FT_UINT8, BASE_DEC, VALS(pfcp_redirect_address_type_vals), 0x0f,
             NULL, HFILL }
         },
         { &hf_pfcp_redirect_server_addr_len,
         { "Redirect Server Address Length", "pfcp.redirect_server_addr_len",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_redirect_server_address,
         { "Redirect Server Address", "pfcp.redirect_server_address",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_other_redirect_server_addr_len,
         { "Other Redirect Server Address Length", "pfcp.other_redirect_server_addr_len",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_other_redirect_server_address,
         { "Other Redirect Server Address", "pfcp.other_redirect_server_address",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_redirect_port,
         { "Redirect Port", "pfcp.redirect_port",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_outer_hdr_desc,
         { "Outer Header Creation Description", "pfcp.outer_hdr_desc",
             FT_UINT16, BASE_DEC, VALS(pfcp_outer_hdr_desc_vals), 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_outer_hdr_creation_teid,
         { "TEID", "pfcp.outer_hdr_creation.teid",
             FT_UINT32, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_outer_hdr_creation_ipv4,
         { "IPv4 Address", "pfcp.outer_hdr_creation.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_outer_hdr_creation_ipv6,
         { "IPv6 Address", "pfcp.outer_hdr_creation.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_outer_hdr_creation_port,
         { "Port Number", "pfcp.outer_hdr_creation.port",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_time_threshold,
         { "Time Threshold", "pfcp.time_threshold",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_forwarding_policy_id_len,
         { "Forwarding Policy Identifier Length", "pfcp.forwarding_policy_id_len",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_forwarding_policy_id,
         { "Forwarding Policy Identifier", "pfcp.forwarding_policy_id",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_measurement_method_flags_b0_durat,
         { "DURAT (Duration)", "pfcp.measurement_method_flags.durat",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_measurement_method_flags_b1_volume,
         { "VOLUM (Volume)", "pfcp.measurement_method_flags.volume",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_measurement_method_flags_b2_event,
         { "EVENT (Event)", "pfcp.measurement_method_flags.event",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_subsequent_time_threshold,
         { "Subsequent Time Threshold", "pfcp.subsequent_time_threshold",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_inactivity_detection_time,
         { "Inactivity Detection Time", "pfcp.inactivity_detection_time",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_monitoring_time,
         { "Monitoring Time", "pfcp.monitoring_time",
             FT_ABSOLUTE_TIME, ABSOLUTE_TIME_NTP_UTC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o5_b0_perio,
         { "PERIO (Periodic Reporting)", "pfcp.reporting_triggers_flags.perio",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o5_b1_volth,
         { "VOLTH (Volume Threshold)", "pfcp.reporting_triggers_flags.volth",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o5_b2_timth,
         { "TIMTH (Time Threshold)", "pfcp.reporting_triggers_flags.timth",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o5_b3_quhti,
         { "QUHTI (Quota Holding Time)", "pfcp.reporting_triggers_flags.quhti",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o5_b4_start,
         { "START (Start of Traffic)", "pfcp.reporting_triggers_flags.start",
             FT_BOOLEAN, 8, NULL, 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o5_b5_stopt,
         { "STOPT (Stop of Traffic)", "pfcp.reporting_triggers_flags.stopt",
             FT_BOOLEAN, 8, NULL, 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o5_b6_droth,
         { "DROTH (Dropped DL Traffic Threshold)", "pfcp.reporting_triggers_flags.droth",
             FT_BOOLEAN, 8, NULL, 0x40,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o5_b7_liusa,
         { "LIUSA (Linked Usage Reporting)", "pfcp.reporting_triggers_flags.liusa",
             FT_BOOLEAN, 8, NULL, 0x80,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o6_b0_volqu,
         { "VOLQU (Volume Quota)", "pfcp.reporting_triggers_flags.volqu",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o6_b1_timqu,
         { "TIMQU (Time Quota)", "pfcp.reporting_triggers_flags.timqu",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o6_b2_envcl,
         { "ENVCL (Envelope Closure)", "pfcp.reporting_triggers_flags.envcl",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o6_b3_macar,
         { "MACAR (MAC Addresses Reporting)", "pfcp.reporting_triggers_flags.macar",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o6_b4_eveth,
         { "EVETH (Event Threshold)", "pfcp.reporting_triggers_flags.eveth",
             FT_BOOLEAN, 8, NULL, 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o6_b5_evequ,
         { "EVEQU (Event Quota)", "pfcp.reporting_triggers_flags.evequ",
             FT_BOOLEAN, 8, NULL, 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o6_b6_ipmjl,
         { "IPMJL (IP Multicast Join/Leave)", "pfcp.reporting_triggers_flags.ipmjl",
             FT_BOOLEAN, 8, NULL, 0x40,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o6_b7_quvti,
         { "QUVTI (Quota Validity Time)", "pfcp.reporting_triggers_flags.quvti",
             FT_BOOLEAN, 8, NULL, 0x80,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o7_b0_reemr,
         { "REEMR (REport the End Marker Reception)", "pfcp.reporting_triggers_flags.reemr",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_triggers_o7_b1_upint,
         { "UPINT (User Plane Inactivity Timer)", "pfcp.reporting_triggers_flags.upint",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o7_b0_evequ,
         { "EVEQU (Event Quota)", "pfcp.usage_report_trigger_flags.evequ",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o7_b1_tebur,
         { "TEBUR (Termination By UP function Report)", "pfcp.usage_report_trigger_flags.tebur",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o7_b2_ipmjl,
         { "IPMJL (IP Multicast Join/Leave)", "pfcp.usage_report_trigger_flags.ipmjl",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o7_b3_quvti,
         { "QUVTI (Quota Validity Time)", "pfcp.usage_report_trigger_flags.quvti",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o7_b4_emrre,
-        { "EMRRE (End Marker Recetion REport)", "pfcp.usage_report_trigger_flags.emrre",
+        { "EMRRE (End Marker Reception REport)", "pfcp.usage_report_trigger_flags.emrre",
             FT_BOOLEAN, 8, NULL, 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o7_b5_upint,
         { "UPINT (User Plane Inactivity Timer)", "pfcp.usage_report_trigger_flags.upint",
             FT_BOOLEAN, 8, NULL, 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o6_b0_volqu,
         { "VOLQU (Volume Quota)", "pfcp.usage_report_trigger_flags.volqu",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o6_b1_timqu,
         { "TIMQU (Time Quota)", "pfcp.usage_report_trigger_flags.timqu",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o6_b2_liusa,
         { "LIUSA (Linked Usage Reporting)", "pfcp.usage_report_trigger_flags.liusa",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o6_b3_termr,
         { "TERMR (Termination Report)", "pfcp.usage_report_trigger.term",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o6_b4_monit,
         { "MONIT (Monitoring Time)", "pfcp.usage_report_trigger.monit",
             FT_BOOLEAN, 8, NULL, 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o6_b5_envcl,
         { "ENVCL (Envelope Closure)", "pfcp.usage_report_trigger_flags.envcl",
             FT_BOOLEAN, 8, NULL, 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o6_b7_eveth,
         { "EVETH (Event Threshold)", "pfcp.usage_report_trigger_flags.eveth",
             FT_BOOLEAN, 8, NULL, 0x80,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o6_b6_macar,
         { "MACAR (MAC Addresses Reporting)", "pfcp.usage_report_trigger_flags.macar",
             FT_BOOLEAN, 8, NULL, 0x40,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o5_b0_perio,
         { "PERIO (Periodic Reporting)", "pfcp.usage_report_trigger_flags.perio",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o5_b1_volth,
         { "VOLTH (Volume Threshold)", "pfcp.usage_report_trigger_flags.volth",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o5_b2_timth,
         { "TIMTH (Time Threshold)", "pfcp.usage_report_trigger_flags.timth",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o5_b3_quhti,
         { "QUHTI (Quota Holding Time)", "pfcp.usage_report_trigger_flags.quhti",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o5_b4_start,
         { "START (Start of Traffic)", "pfcp.usage_report_trigger_flags.start",
             FT_BOOLEAN, 8, NULL, 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o5_b5_stopt,
         { "STOPT (Stop of Traffic)", "pfcp.usage_report_trigger_flags.stopt",
             FT_BOOLEAN, 8, NULL, 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o5_b6_droth,
         { "DROTH (Dropped DL Traffic Threshold)", "pfcp.usage_report_trigger_flags.droth",
             FT_BOOLEAN, 8, NULL, 0x40,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_report_trigger_o5_b7_immer,
         { "IMMER (Immediate Report)", "pfcp.usage_report_trigger.immer",
             FT_BOOLEAN, 8, NULL, 0x80,
             NULL, HFILL }
         },
 
         { &hf_pfcp_volume_threshold_b0_tovol,
         { "TOVOL", "pfcp.volume_threshold_flags.tovol",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_threshold_b1_ulvol,
         { "ULVOL", "pfcp.volume_threshold_flags.ulvol",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_threshold_b2_dlvol,
         { "DLVOL", "pfcp.volume_threshold_flags.dlvol",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_threshold_tovol,
         { "Total Volume", "pfcp.volume_threshold.tovol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_threshold_ulvol,
         { "Uplink Volume", "pfcp.volume_threshold.ulvol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_threshold_dlvol,
         { "Downlink Volume", "pfcp.volume_threshold.dlvol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_quota_b0_tovol,
         { "TOVOL", "pfcp.volume_quota_flags.tovol",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_quota_b1_ulvol,
         { "ULVOL", "pfcp.volume_quota_flags.ulvol",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_quota_b2_dlvol,
         { "DLVOL", "pfcp.volume_quota_flags.dlvol",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_quota_tovol,
         { "Total Volume", "pfcp.volume_quota.tovol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_quota_ulvol,
         { "Uplink Volume", "pfcp.volume_quota.ulvol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_quota_dlvol,
         { "Downlink Volume", "pfcp.volume_quota.dlvol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_subseq_volume_threshold_b0_tovol,
         { "TOVOL", "pfcp.subseq_volume_threshold.tovol_flg",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_subseq_volume_threshold_b1_ulvol,
         { "ULVOL", "pfcp.subseq_volume_threshold.ulvol_flg",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_subseq_volume_threshold_b2_dlvol,
         { "DLVOL", "pfcp.subseq_volume_threshold.dlvol_flg",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_subseq_volume_threshold_tovol,
         { "Total Volume", "pfcp.subseq_volume_threshold.tovol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_subseq_volume_threshold_ulvol,
         { "Uplink Volume", "pfcp.subseq_volume_threshold.ulvol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_subseq_volume_threshold_dlvol,
         { "Downlink Volume", "pfcp.subseq_volume_threshold.dlvol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_time_quota,
         { "Time Quota", "pfcp.time_quota",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_start_time,
         { "Start Time", "pfcp.start_time",
             FT_ABSOLUTE_TIME, ABSOLUTE_TIME_NTP_UTC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_end_time,
         { "End Time", "pfcp.end_time",
             FT_ABSOLUTE_TIME, ABSOLUTE_TIME_NTP_UTC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_quota_holding_time,
         { "Quota Holding Time", "pfcp.quota_holding_time",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_dropped_dl_traffic_threshold_b0_dlpa,
         { "DLPA", "pfcp.dropped_dl_traffic_threshold.dlpa_flg",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_dropped_dl_traffic_threshold_b1_dlby,
         { "DLBY", "pfcp.dropped_dl_traffic_threshold.dlby_flg",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_downlink_packets,
         { "Downlink Packets", "pfcp.downlink_packets",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bytes_downlink_data,
         { "Bytes of Downlink Data", "pfcp.bytes_downlink_data",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_qer_correlation_id,
         { "QER Correlation ID", "pfcp.qer_correlation_id",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_gate_status_b0b1_dlgate,
         { "DL Gate", "pfcp.gate_status.dlgate",
             FT_UINT8, BASE_DEC, VALS(pfcp_gate_status_vals), 0x03,
             NULL, HFILL }
         },
         { &hf_pfcp_gate_status_b3b2_ulgate,
         { "UL Gate", "pfcp.gate_status.ulgate",
             FT_UINT8, BASE_DEC, VALS(pfcp_gate_status_vals), 0x0c,
             NULL, HFILL }
         },
         { &hf_pfcp_ul_mbr,
         { "UL MBR", "pfcp.ul_mbr",
             FT_UINT40, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_dl_mbr,
         { "DL MBR", "pfcp.dl_mbr",
             FT_UINT40, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_ul_gbr,
         { "UL GBR", "pfcp.ul_gbr",
             FT_UINT40, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_dl_gbr,
         { "DL GBR", "pfcp.dl_gbr",
             FT_UINT40, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_report_type_b6_uisr,
         { "UISR (UP Initiated Session Request)", "pfcp.report_type.uisr",
             FT_BOOLEAN, 8, NULL, 0x40,
             NULL, HFILL }
         },
         { &hf_pfcp_report_type_b5_sesr,
         { "SESR (Session Report)", "pfcp.report_type.sesr",
             FT_BOOLEAN, 8, NULL, 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_report_type_b4_tmir,
         { "TMIR (TSC Management Information Report)", "pfcp.report_type.tmir",
             FT_BOOLEAN, 8, NULL, 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_report_type_b3_upir,
         { "UPIR (User Plane Inactivity Report)", "pfcp.report_type.upir",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_report_type_b2_erir,
         { "ERIR (Error Indication Report)", "pfcp.report_type.erir",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_report_type_b1_usar,
         { "USAR (Usage Report)", "pfcp.report_type.usar",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_report_type_b0_dldr,
         { "DLDR (Downlink Data Report)", "pfcp.report_type.dldr",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_offending_ie,
         { "Type of the offending IE", "pfcp.offending_ie",
             FT_UINT16, BASE_DEC | BASE_EXT_STRING, &pfcp_ie_type_ext, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_offending_ie_value,
         { "Value of the offending IE", "pfcp.offending_ie_value",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_up_function_features_o5_b0_bucp,
         { "BUCP", "pfcp.up_function_features.bucp",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "Downlink Data Buffering in CP function", HFILL }
         },
         { &hf_pfcp_up_function_features_o5_b1_ddnd,
         { "DDND", "pfcp.up_function_features.ddnd",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "Buffering parameter 'Downlink Data Notification Delay", HFILL }
         },
         { &hf_pfcp_up_function_features_o5_b2_dlbd,
         { "DLBD", "pfcp.up_function_features.dlbd",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_up_function_features_o5_b3_trst,
         { "TRST", "pfcp.up_function_features.trst",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             "Traffic Steering", HFILL }
         },
         { &hf_pfcp_up_function_features_o5_b4_ftup,
         { "FTUP", "pfcp.up_function_features.ftup",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x10,
             "F-TEID allocation / release in the UP function", HFILL }
         },
         { &hf_pfcp_up_function_features_o5_b5_pfdm,
         { "PFDM", "pfcp.up_function_features.pfdm",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             "PFD Management procedure", HFILL }
         },
         { &hf_pfcp_up_function_features_o5_b6_heeu,
         { "HEEU", "pfcp.up_function_features.heeu",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40,
             "Header Enrichment of Uplink traffic", HFILL }
         },
         { &hf_pfcp_up_function_features_o5_b7_treu,
         { "TREU", "pfcp.up_function_features.treu",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80,
             "Traffic Redirection Enforcement in the UP function", HFILL }
         },
         { &hf_pfcp_up_function_features_o6_b0_empu,
         { "EMPU", "pfcp.up_function_features.empu",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "Sending of End Marker packets", HFILL }
         },
         { &hf_pfcp_up_function_features_o6_b1_pdiu,
         { "PDIU", "pfcp.up_function_features.pdiu",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "Support of PDI optimised signalling", HFILL }
         },
         { &hf_pfcp_up_function_features_o6_b2_udbc,
         { "UDBC", "pfcp.up_function_features.udbc",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             "Support of UL/DL Buffering Control", HFILL }
         },
         { &hf_pfcp_up_function_features_o6_b3_quoac,
         { "QUOAC", "pfcp.up_function_features.quoac",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             "The UP function supports being provisioned with the Quota Action to apply when reaching quotas", HFILL }
         },
         { &hf_pfcp_up_function_features_o6_b4_trace,
         { "TRACE", "pfcp.up_function_features.trace",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x10,
             "The UP function supports Trace", HFILL }
         },
         { &hf_pfcp_up_function_features_o6_b5_frrt,
         { "FRRT", "pfcp.up_function_features.frrt",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             "The UP function supports Framed Routing", HFILL }
         },
         { &hf_pfcp_up_function_features_o6_b6_pfde,
         { "PFDE", "pfcp.up_function_features.pfde",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40,
             "The UP function supports a PFD Contents including a property with multiple values", HFILL }
         },
         { &hf_pfcp_up_function_features_o6_b7_epfar,
         { "EPFAR", "pfcp.up_function_features.epfar",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80,
             "The UP function supports the Enhanced PFCP Association Release feature", HFILL }
         },
         { &hf_pfcp_up_function_features_o7_b0_dpdra,
         { "DPDRA", "pfcp.up_function_features.dpdra",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "The UP function supports Deferred PDR Activation or Deactivation", HFILL }
         },
         { &hf_pfcp_up_function_features_o7_b1_adpdp,
         { "ADPDP", "pfcp.up_function_features.adpdp",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "The UP function supports the Activation and Deactivation of Pre-defined PDRs", HFILL }
         },
         { &hf_pfcp_up_function_features_o7_b2_ueip,
         { "UEIP", "pfcp.up_function_features.ueip",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             "The UP function supports allocating UE IP addresses or prefixes", HFILL }
         },
         { &hf_pfcp_up_function_features_o7_b3_sset,
         { "SSET", "pfcp.up_function_features.sset",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             "UP function support of PFCP sessions successively controlled by different SMFs of a same SMF", HFILL }
         },
         { &hf_pfcp_up_function_features_o7_b4_mnop,
         { "MNOP", "pfcp.up_function_features.mnop",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x10,
             "UPF supports measurement of number of packets which is instructed with the flag 'Measurement of Number of Packets' in a URR", HFILL }
         },
         { &hf_pfcp_up_function_features_o7_b5_mte_n4,
         { "MTE N4", "pfcp.up_function_features.mte_n4",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             "UPF supports multiple instances of Traffic Endpoint IDs in a PDI", HFILL }
         },
         { &hf_pfcp_up_function_features_o7_b6_bundl,
         { "BUNDL", "pfcp.up_function_features.bundl",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40,
             "PFCP messages bundling", HFILL }
         },
         { &hf_pfcp_up_function_features_o7_b7_gcom,
         { "GCOM", "pfcp.up_function_features.gcom",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80,
             "UPF support of 5G VN Group Communication", HFILL }
         },
         { &hf_pfcp_up_function_features_o8_b0_mpas,
         { "MPAS", "pfcp.up_function_features.mpas",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "UPF support for multiple PFCP associations to the SMFs in an SMF set", HFILL }
         },
         { &hf_pfcp_up_function_features_o8_b1_rttl,
         { "RTTL", "pfcp.up_function_features.rttl",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "The UP function supports redundant transmission at transport layer", HFILL }
         },
         { &hf_pfcp_up_function_features_o8_b2_vtime,
         { "VTIME", "pfcp.up_function_features.vtime",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             "UPF support of quota validity time feature", HFILL }
         },
         { &hf_pfcp_up_function_features_o8_b3_norp,
         { "NORP", "pfcp.up_function_features.norp",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             "UP function support of Number of Reports", HFILL }
         },
         { &hf_pfcp_up_function_features_o8_b4_iptv,
         { "IPTV", "pfcp.up_function_features.iptv",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x10,
             "UPF support of IPTV service", HFILL }
         },
         { &hf_pfcp_up_function_features_o8_b5_ip6pl,
         { "IP6PL", "pfcp.up_function_features.ip6pl",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             "UPF supports UE IPv6 address(es) allocation with IPv6 prefix length other than default /64", HFILL }
         },
         { &hf_pfcp_up_function_features_o8_b6_tsn,
         { "TSN", "pfcp.up_function_features.tsn",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40,
             "Integration of 5GS into a TSN data network is supported by the UPF", HFILL }
         },
         { &hf_pfcp_up_function_features_o8_b7_mptcp,
         { "MPTCP", "pfcp.up_function_features.mptcp",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80,
             "UPF support of MPTCP Proxy functionality", HFILL }
         },
         { &hf_pfcp_up_function_features_o9_b0_atsss_ll,
         { "ATSSS-LL", "pfcp.up_function_features.atsss_ll",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "UPF support of ATSSS-LLL steering functionality", HFILL }
         },
         { &hf_pfcp_up_function_features_o9_b1_qfqm,
         { "QFQM", "pfcp.up_function_features.qfqm",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "UPF support of per QoS flow per UE QoS monitoring for packet delay", HFILL }
         },
         { &hf_pfcp_up_function_features_o9_b2_gpqm,
         { "GPQM", "pfcp.up_function_features.gpqm",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             "UPF support of per GTP-U Path QoS monitoring", HFILL }
         },
         { &hf_pfcp_up_function_features_o9_b3_mt_edt,
         { "MT-EDT", "pfcp.up_function_features.mtedt",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             "SGW-U support of reporting the size of DL Data Packets", HFILL }
         },
         { &hf_pfcp_up_function_features_o9_b4_ciot,
         { "CIOT", "pfcp.up_function_features.ciot",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x10,
             "UPF support of CIoT feature", HFILL }
         },
         { &hf_pfcp_up_function_features_o9_b5_ethar,
         { "ETHAR", "pfcp.up_function_features.ethar",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             "UPF support of Ethernet PDU Session Anchor Relocation", HFILL }
         },
         { &hf_pfcp_up_function_features_o9_b6_ddds,
         { "DDDS", "pfcp.up_function_features.ddds",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40,
             "UPF support of reporting of the first buffered / discarded data for downlink", HFILL }
         },
         { &hf_pfcp_up_function_features_o9_b7_rds,
         { "RDS", "pfcp.up_function_features.rds",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80,
             "UP function support of Reliable Data Service", HFILL }
         },
         { &hf_pfcp_up_function_features_o10_b0_rttwp,
         { "RTTWP", "pfcp.up_function_features.rttwp",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "UPF support of RTT measurement towards the UE without PMF", HFILL }
         },
         { &hf_pfcp_up_function_features_o10_b1_quasf,
         { "QUASF", "pfcp.up_function_features.quasf",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "The UP function supports being provisioned in a URR with an Exempted Application ID for Quota Action or an Exempted SDF Filter for Quota Action which is to be used when the quota is exhausted", HFILL }
         },
         { &hf_pfcp_up_function_features_o10_b2_nspoc,
         { "NSPOC", "pfcp.up_function_features.nspoc",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             "UP function supports notifying start of Pause of Charging via user plane", HFILL }
         },
         { &hf_pfcp_up_function_features_o10_b3_l2tp,
         { "L2TP", "pfcp.up_function_features.l2tp",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             "UP function supports L2TP", HFILL }
         },
         { &hf_pfcp_up_function_features_o10_b4_upber,
         { "UPBER", "pfcp.up_function_features.upber",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x10,
             "UP function supports the uplink packet buffering during EAS relocation", HFILL }
         },
         { &hf_pfcp_up_function_features_o10_b5_resps,
         { "RESPS", "pfcp.up_function_features.resps",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             "UP function supports Restoration of PFCP Session association", HFILL }
         },
         { &hf_pfcp_up_function_features_o10_b6_iprep,
         { "IPREP", "pfcp.up_function_features.iprep",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40,
             "UP function supports IP Address and Port number replacement", HFILL }
         },
         { &hf_pfcp_up_function_features_o10_b7_dnsts,
         { "DNSTS", "pfcp.up_function_features.dnsts",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80,
             "UP function support DNS Traffic Steering based on FQDN in the DNS Query message", HFILL }
         },
         { &hf_pfcp_up_function_features_o11_b0_drqos,
         { "DRQOS", "pfcp.up_function_features.drqos",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "UP function supports Direct Reporting of QoS monitoring events to Local NEF or AF", HFILL }
         },
         { &hf_pfcp_up_function_features_o11_b1_mbsn4,
         { "MBSN4", "pfcp.up_function_features.mbsn4",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "UPF supports sending MBS multicast session data to associated PDU sessions using 5GC individual delivery", HFILL }
         },
         { &hf_pfcp_up_function_features_o11_b2_psuprm,
         { "MBSN4", "pfcp.up_function_features.mbsn4",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             "UP function supports Per Slice UP Resource Management", HFILL }
         },
         { &hf_pfcp_up_function_features_o11_b3_eppi,
         { "EPPI", "pfcp.up_function_features.eppi",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             "UP function supports Enhanced Provisioning of Paging Policy Indicator", HFILL }
         },
         { &hf_pfcp_up_function_features_o11_b4_ratp,
         { "RATP", "pfcp.up_function_features.ratp",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x10,
             "UP function supports Redirection Address Types set to Port, IPv4 address and Port, IPv6 address and Port, or IPv4 and IPv6 addresses and Port", HFILL }
         },
         { &hf_pfcp_up_function_features_o11_b5_upidp,
         { "UPIDP", "pfcp.up_function_features.upidp",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             "UP function supports User Plane Inactivity Detection and reporting per PDR", HFILL }
         },
         { &hf_pfcp_up_function_features_o11_b6_afsfc,
         { "AFSFC", "pfcp.up_function_features.afsfc",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40,
             "UP function supports inserting metadata when Application Function influence on Service Function Chaining", HFILL }
         },
         { &hf_pfcp_up_function_features_o11_b7_mpquic,
         { "MPQUIC", "pfcp.up_function_features.mpquic",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80,
             "UPF support of MPQUIC Proxy functionality", HFILL }
         },
         { &hf_pfcp_up_function_features_o12_b0_redsm,
         { "REDSM", "pfcp.up_function_features.redsm",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "UP function supports the Redundant Steering Mode", HFILL }
         },
         { &hf_pfcp_up_function_features_o12_b1_dbdm,
         { "DBDM", "pfcp.up_function_features.dbdm",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "The buffering parameters 'DL Buffering Duration' and 'DL Buffering Suggested Packet Count' in PFCP Session Modification Request are supported by the UP function", HFILL }
         },
         { &hf_pfcp_up_function_features_o12_b2_tscts,
         { "TSCTS", "pfcp.up_function_features.tscts",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             "AF requested support of Time Synchronization and/or Time Sensitive Communication is supported by the UP function", HFILL }
         },
         { &hf_pfcp_up_function_features_o12_b3_drtsc,
         { "DRTSC", "pfcp.up_function_features.drtsc",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             "UP function supports Direct Reporting of TSC management information events to TSN AF or TSCTSF", HFILL }
         },
         { &hf_pfcp_up_function_features_o12_b4_n6jedb,
         { "N6JEDB", "pfcp.up_function_features.n6jedb",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x10,
             "UPF support of N6 Jitter, DL Periodicity and UL Periodicity Measurement and Reporting, and End of Data Burst marking", HFILL }
         },
         { &hf_pfcp_up_function_features_o12_b5_qmcon,
         { "QMCON", "pfcp.up_function_features.qmcon",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             "UPF support of QoS monitoring of Congestion information", HFILL }
         },
         { &hf_pfcp_up_function_features_o12_b6_detnet,
         { "DETNET", "pfcp.up_function_features.detnet",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40,
             "Deterministic Networking is supported by the UP function", HFILL }
         },
         { &hf_pfcp_up_function_features_o12_b7_eml4s,
         { "EML4S", "pfcp.up_function_features.eml4s",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80,
             "UP function supports ECN Marking for L4S", HFILL }
         },
         { &hf_pfcp_up_function_features_o13_b0_pdusm,
         { "PDUSM", "pfcp.up_function_features.pdusm",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "UP function supports PDU Set Marking", HFILL }
         },
         { &hf_pfcp_up_function_features_o13_b1_cntl,
         { "CN-TL", "pfcp.up_function_features.cntl",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "UPF support of the TSN Talker and Listener (TL) functionality", HFILL }
         },
         { &hf_pfcp_up_function_features_o13_b2_qmdrm,
         { "QMDRM", "pfcp.up_function_features.qmdrm",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             "UPF support of QoS monitoring of Data Rate Measurement", HFILL }
         },
 
         { &hf_pfcp_sequence_number,
         { "Sequence Number", "pfcp.sequence_number",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_metric,
         { "Metric", "pfcp.metric",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_timer_unit,
         { "Timer unit", "pfcp.timer_unit",
             FT_UINT8, BASE_DEC, VALS(pfcp_timer_unit_vals), 0xe0,
             NULL, HFILL }
         },
         { &hf_pfcp_timer_value,
         { "Timer value", "pfcp.timer_value",
             FT_UINT8, BASE_DEC, NULL, 0x1f,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_measurement_b0_tovol,
         { "TOVOL", "pfcp.volume_measurement_flags.tovol",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_measurement_b1_ulvol,
         { "ULVOL", "pfcp.volume_measurement_flags.ulvol",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_measurement_b2_dlvol,
         { "DLVOL", "pfcp.volume_measurement_flags.dlvol",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_measurement_b3_tonop,
         { "TONOP", "pfcp.volume_measurement_flags.tonop",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_measurement_b4_ulnop,
         { "ULNOP", "pfcp.volume_measurement_flags.ulnop",
             FT_BOOLEAN, 8, NULL, 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_volume_measurement_b5_dlnop,
         { "DLNOP", "pfcp.volume_measurement_flags.dlnops",
             FT_BOOLEAN, 8, NULL, 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_vol_meas_tovol,
         { "Total Volume", "pfcp.volume_measurement.tovol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_vol_meas_ulvol,
         { "Uplink Volume", "pfcp.volume_measurement.ulvol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_vol_meas_dlvol,
         { "Downlink Volume", "pfcp.volume_measurement.dlvol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_vol_meas_tonop,
         { "Total Number of Packets", "pfcp.volume_measurement.tonop",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_vol_meas_ulnop,
         { "Uplink Number of Packets", "pfcp.volume_measurement.ulnop",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_vol_meas_dlnop,
         { "Downlink Number of Packets", "pfcp.volume_measurement.dlnop",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_cp_function_features_o5_b0_load,
         { "LOAD", "pfcp.cp_function_features.load",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "Load Control", HFILL }
         },
         { &hf_pfcp_cp_function_features_o5_b1_ovrl,
         { "OVRL", "pfcp.cp_function_features.ovrl",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "Overload Control", HFILL }
         },
         { &hf_pfcp_cp_function_features_o5_b2_epfar,
         { "EPFAR", "pfcp.cp_function_features.epfar",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             "The CP function supports the Enhanced PFCP Association Release feature", HFILL }
         },
         { &hf_pfcp_cp_function_features_o5_b3_sset,
         { "SSET", "pfcp.cp_function_features.sset",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             "SMF support of PFCP sessions successively controlled by different SMFs of a same SMF Set", HFILL }
         },
         { &hf_pfcp_cp_function_features_o5_b4_bundl,
         { "BUNDL", "pfcp.cp_function_features.bundl",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x10,
             "PFCP messages bundling", HFILL }
         },
         { &hf_pfcp_cp_function_features_o5_b5_mpas,
         { "MPAS", "pfcp.cp_function_features.mpas",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             "SMF support for multiple PFCP associations from an SMF set to a single UPF", HFILL }
         },
         { &hf_pfcp_cp_function_features_o5_b6_ardr,
         { "ARDR", "pfcp.cp_function_features.ardr",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40,
             "CP function supports Additional Usage Reports in the PFCP Session Deletion Response", HFILL }
         },
         { &hf_pfcp_cp_function_features_o5_b7_uiaur,
         { "UIAUR", "pfcp.cp_function_features.uiaur",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80,
             "CP function supports the UE IP Address Usage Reporting feature", HFILL }
         },
         { &hf_pfcp_cp_function_features_o6_b0_psucc,
         { "PSUCC", "pfcp.cp_function_features.psucc",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "CP function supports PFCP session establishment or modification with Partial Success", HFILL }
         },
         { &hf_pfcp_cp_function_features_o6_b1_rpgur,
         { "RPGUR", "pfcp.cp_function_features.rpgur",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "CP function supports the Peer GTP-U Entity Restart Reporting", HFILL }
         },
 
         { &hf_pfcp_usage_information_b0_bef,
         { "BEF (Before)", "pfcp.usage_information.bef",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_information_b1_aft,
         { "AFT (After)", "pfcp.usage_information.aft",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_information_b2_uae,
         { "UAE (Usage After Enforcement)", "pfcp.usage_information.uae",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_usage_information_b3_ube,
         { "UBE (Usage Before Enforcement)", "pfcp.usage_information.ube",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_application_instance_id,
         { "Application Instance Identifier", "pfcp.application_instance_id",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_application_instance_id_str,
         { "Application Instance Identifier", "pfcp.application_instance_id_str",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_flow_dir,
         { "Flow Direction", "pfcp.flow_dir",
             FT_UINT8, BASE_DEC, VALS(pfcp_flow_dir_vals), 0x07,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_rate_b0_ulpr,
         { "ULPR (Uplink Packet Rate)", "pfcp.packet_rate.ulpr",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_rate_b1_dlpr,
         { "DLPR (Downlink Packet Rate)", "pfcp.packet_rate.dlpr",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_rate_b2_aprc,
         { "APRC (Additional Packet Rate Control)", "pfcp.packet_rate.aprc",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_ul_time_unit,
         { "Uplink Time Unit", "pfcp.ul_time_unit",
             FT_UINT8, BASE_DEC, VALS(pfcp_pr_time_unit_vals), 0x07,
             NULL, HFILL }
         },
         { &hf_pfcp_max_ul_pr,
         { "Maximum Uplink Packet Rate", "pfcp.max_ul_pr",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_dl_time_unit,
         { "Downlink Time Unit", "pfcp.dl_time_unit",
             FT_UINT8, BASE_DEC, VALS(pfcp_pr_time_unit_vals), 0x07,
             NULL, HFILL }
         },
         { &hf_pfcp_max_dl_pr,
         { "Maximum Downlink Packet Rate", "pfcp.max_dl_pr",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_a_ul_time_unit,
         { "Additional Uplink Time Unit", "pfcp.a_ul_time_unit",
             FT_UINT8, BASE_DEC, VALS(pfcp_pr_time_unit_vals), 0x07,
             NULL, HFILL }
         },
         { &hf_pfcp_a_max_ul_pr,
         { "Additional Maximum Uplink Packet Rate", "pfcp.a_max_ul_pr",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_a_dl_time_unit,
         { "Additional Downlink Time Unit", "pfcp.a_dl_time_unit",
             FT_UINT8, BASE_DEC, VALS(pfcp_pr_time_unit_vals), 0x07,
             NULL, HFILL }
         },
         { &hf_pfcp_a_max_dl_pr,
         { "Additional Maximum Downlink Packet Rate", "pfcp.a_max_dl_pr",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_dl_flow_level_marking_b0_ttc,
         { "TTC (ToS/Traffic Class)", "pfcp.dl_flow_level_marking.ttc",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_dl_flow_level_marking_b1_sci,
         { "SCI(Service Class Indicator)", "pfcp.dl_flow_level_marking.sci",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_sci,
         { "Service Class Indicator", "pfcp.sci",
             FT_UINT16, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_dl_data_notification_delay,
         { "Delay Value", "pfcp.dl_data_notification_delay",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             "Delay Value in integer multiples of 50 millisecs, or zero", HFILL }
         },
         { &hf_pfcp_packet_count,
         { "Packet Count", "pfcp.packet_count",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_dl_data_service_inf_b0_ppi,
         { "PPI(Paging Policy Indication)", "pfcp.dl_data_service_inf.ppi",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_dl_data_service_inf_b1_qfii,
         { "QFII(QoS Flow Identifier)", "pfcp.dl_data_service_inf.qfii",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_ppi,
         { "Paging Policy Indication", "pfcp.ppi",
             FT_UINT16, BASE_DEC, NULL, 0x7f,
             NULL, HFILL }
         },
         { &hf_pfcp_pfcpsmreq_flags_b0_drobu,
         { "DROBU (Drop Buffered Packets)", "pfcp.smreq_flags.drobu",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_pfcpsmreq_flags_b1_sndem,
         { "SNDEM (Send End Marker Packets)", "pfcp.smreq_flags.sndem",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_pfcpsmreq_flags_b2_qaurr,
         { "QAURR (Query All URRs)", "pfcp.smreq_flags.qaurr",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_pfcpsmreq_flags_b3_sumpc,
         { "SUMPC (Stop of Usage Measurement to Pause Charging)", "pfcp.smreq_flags.sumpc",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_pfcpsmreq_flags_b4_rumuc,
         { "RUMUC (Resume of Usage Measurement to Un-pause of Charging)", "pfcp.smreq_flags.rumuc",
             FT_BOOLEAN, 8, NULL, 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_pfcpsmreq_flags_b5_deteid,
         { "DETEID (Delete All DL N3mb and/or N19mb F-TEIDs)", "pfcp.smreq_flags.deteid",
             FT_BOOLEAN, 8, NULL, 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_pfcpsrrsp_flags_b0_drobu,
         { "DROBU (Drop Buffered Packets)", "pfcp.srrsp_flags.drobu",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_pfd_contents_flags_b0_fd,
         { "FD (Flow Description)", "pfcp.pfd_contents_flags.fd",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_pfd_contents_flags_b1_url,
         { "URL (URL)", "pfcp.pfd_contents_flags.url",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_pfd_contents_flags_b2_dn,
         { "DN (Domain Name)", "pfcp.pfd_contents_flags.dn",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_pfd_contents_flags_b3_cp,
         { "CP (Custom PFD Content)", "pfcp.pfd_contents_flags.cp",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_pfd_contents_flags_b4_dnp,
         { "DNP (Domain Name Protocol)", "pfcp.pfd_contents_flags.dnp",
             FT_BOOLEAN, 8, NULL, 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_pfd_contents_flags_b5_afd,
         { "AFD (Additional Flow Description)", "pfcp.pfd_contents_flags.afd",
             FT_BOOLEAN, 8, NULL, 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_pfd_contents_flags_b6_aurl,
         { "AURL (Additional URL)", "pfcp.pfd_contents_flags.aurl",
             FT_BOOLEAN, 8, NULL, 0x40,
             NULL, HFILL }
         },
         { &hf_pfcp_pfd_contents_flags_b7_adnp,
         { "ADNP (Additional Domain Name and Domain Name Protocol)", "pfcp.pfd_contents_flags.adnp",
             FT_BOOLEAN, 8, NULL, 0x80,
             NULL, HFILL }
         },
         { &hf_pfcp_url_len,
         { "Length of URL", "pfcp.url_len",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_url,
         { "URL", "pfcp.url",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_dn_len,
         { "Length of Domain Name", "pfcp.dn_len",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_dn,
         { "Domain Name", "pfcp.dn",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_cp_len,
         { "Length of Custom PFD Content", "pfcp.cp_len",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_cp,
         { "Custom PFD Content", "pfcp.cp",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_dnp_len,
         { "Length of Domain Name Protocol", "pfcp.dnp_len",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_dnp,
         { "Domain Name Protocol", "pfcp.dn",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_afd_len,
         { "Length of Additional Flow Description", "pfcp.adf_len",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_aurl_len,
         { "Length of Additional URL", "pfcp.aurl_len",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_adnp_len,
         { "Length of Additional Domain Name and Domain Name Protocol", "pfcp.adnp_len",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_header_type,
         { "Header Type", "pfcp.header_type",
             FT_UINT8, BASE_DEC, VALS(pfcp_header_type_vals), 0x1f,
             NULL, HFILL }
         },
         { &hf_pfcp_hf_len,
         { "Length of Header Field Name", "pfcp.hf_len",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_hf_name,
         { "Header Field Name", "pfcp.hf_name",
             FT_BYTES, BASE_SHOW_ASCII_PRINTABLE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_hf_val_len,
         { "Length of Header Field Value", "pfcp.hf_val_len",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_hf_val,
         { "Header Field Value", "pfcp.hf_val",
             FT_BYTES, BASE_SHOW_ASCII_PRINTABLE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_measurement_info_b0_mbqe,
         { "MBQE (Measurement Before QoS Enforcement)", "pfcp.measurement_info.fd",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_measurement_info_b1_inam,
         { "INAM (Inactive Measurement)", "pfcp.measurement_info.inam",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_measurement_info_b2_radi,
         { "RADI (Reduced Application Detection Information)", "pfcp.measurement_info.radi",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_measurement_info_b3_istm,
         { "ISTM (Immediate Start Time Metering)", "pfcp.measurement_info.istm",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_measurement_info_b4_mnop,
         { "MNOP (Measurement of Number of Packets)", "pfcp.measurement_info.mnop",
             FT_BOOLEAN, 8, NULL, 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_measurement_info_b5_sspoc,
         { "SSPOC (Send Start Pause of Charging)", "pfcp.measurement_info.sspoc",
             FT_BOOLEAN, 8, NULL, 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_measurement_info_b6_aspoc,
         { "ASPOC (Applicable for Start Pause of Charging)", "pfcp.measurement_info.aspoc",
             FT_BOOLEAN, 8, NULL, 0x40,
             NULL, HFILL }
         },
         { &hf_pfcp_measurement_info_b7_ciam,
         { "CIAM (Control of Inactive Measurement)", "pfcp.measurement_info.ciam",
             FT_BOOLEAN, 8, NULL, 0x80,
             NULL, HFILL }
         },
         { &hf_pfcp_node_report_type_b0_upfr,
         { "UPFR (User Plane Path Failure Report)", "pfcp.node_report_type.upfr",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_node_report_type_b1_uprr,
         { "UPRR (User Plane Path Recovery Report)", "pfcp.node_report_type.uprr",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_node_report_type_b2_ckdr,
         { "CKDR (Clock Drift Report)", "pfcp.node_report_type.ckdr",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_node_report_type_b3_gpqr,
         { "GPQR (GTP-U Path QoS Report)", "pfcp.node_report_type.gpqr",
             FT_BOOLEAN, 8, NULL, 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_node_report_type_b4_purr,
         { "PURR (peer GTP-U entity Restart Report)", "pfcp.node_report_type.purr",
             FT_BOOLEAN, 8, NULL, 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_node_report_type_b5_vsr,
         { "VSR (Vendor-Specific Report)", "pfcp.node_report_type.pvsrurr",
             FT_BOOLEAN, 8, NULL, 0x20,
             NULL, HFILL }
         },
 
         { &hf_pfcp_remote_gtp_u_peer_flags_b0_v6,
         { "V6 (IPv6)", "pfcp.remote_gtp_u_peer_flags.v6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_remote_gtp_u_peer_flags_b1_v4,
         { "V4 (IPv4)", "pfcp.remote_gtp_u_peer_flags.v4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_remote_gtp_u_peer_flags_b2_di,
         { "DI (Destination Interface)", "pfcp.remote_gtp_u_peer_flags.di",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_remote_gtp_u_peer_flags_b3_ni,
         { "NI (Network Instance)", "pfcp.remote_gtp_u_peer_flags.ni",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_remote_gtp_u_peer_ipv4,
         { "IPv4 address", "pfcp.node_id_ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_remote_gtp_u_peer_ipv6,
         { "IPv6 address", "pfcp.node_id_ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_remote_gtp_u_peer_length_di,
         { "Length of Destination Interface field", "pfcp.node_id_length_di",
             FT_UINT16, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_remote_gtp_u_peer_length_ni,
         { "Length of Network Instance field", "pfcp.node_id_length_ni",
             FT_UINT16, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_ur_seqn,
         { "UR-SEQN", "pfcp.ur_seqn",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_oci_flags_b0_aoci,
         { "AOCI: Associate OCI with Node ID", "pfcp.oci_flags.aoci",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_pfcp_assoc_rel_req_b0_sarr,
         { "SARR (PFCP Association Release Request)", "pfcp.assoc_rel_req.sarr",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_pfcp_assoc_rel_req_b1_urss,
         { "URSS (non-zero Usage Reports for the affected PFCP Sessions Sent)", "pfcp.assoc_rel_req.urss",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_upiri_flg_b6_assosi,
         { "ASSOSI (Associated Source Instance)", "pfcp.upiri_flags.assosi",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x40,
             NULL, HFILL }
         },
         { &hf_pfcp_upiri_flg_b5_assoni,
         { "ASSONI (Associated Network Instance)", "pfcp.upiri_flags.assoni",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_upiri_flg_b2b4_teidri,
         { "TEIDRI (TEID Range Indication)", "pfcp.upiri_flags.teidri",
             FT_UINT8, BASE_HEX, NULL, 0x1c,
             NULL, HFILL }
         },
         { &hf_pfcp_upiri_flags_b1_v6,
         { "V6 (IPv6)", "pfcp.upiri_flags.v6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_upiri_flags_b0_v4,
         { "V4 (IPv4)", "pfcp.upiri_flags.v4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_upiri_teidri,
         { "TEID Range Indication", "pfcp.upiri.teidri",
             FT_UINT8, BASE_DEC, NULL, 0x1C,
             NULL, HFILL }
         },
         { &hf_pfcp_upiri_teid_range,
         { "TEID", "pfcp.upiri.teid_range",
             FT_UINT32, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_upiri_ipv4,
         { "IPv4 address", "pfcp.upiri.ipv4_addr",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_upiri_ipv6,
         { "IPv6 address", "pfcp.upiri.ipv6_addr",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_user_plane_inactivity_timer,
         { "User Plane Inactivity Timer", "pfcp.user_plane_inactivity_time",
             FT_UINT32, BASE_DEC|BASE_UNIT_STRING, &units_seconds, 0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_subsequent_volume_quota_b0_tovol,
         { "TOVOL", "pfcp.subsequent_volume_quota_flags.tovol",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_subsequent_volume_quota_b1_ulvol,
         { "ULVOL", "pfcp.subsequent_volume_quota_flags.ulvol",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_subsequent_volume_quota_b2_dlvol,
         { "DLVOL", "pfcp.subsequent_volume_quota_flags.dlvol",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_subsequent_volume_quota_tovol,
         { "Total Volume", "pfcp.subsequent_volume_quota.tovol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_subsequent_volume_quota_ulvol,
         { "Uplink Volume", "pfcp.subsequent_volume_quota.ulvol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_subsequent_volume_quota_dlvol,
         { "Downlink Volume", "pfcp.subsequent_volume_quota.dlvol",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_subsequent_time_quota,
         { "Subsequent Time Quota", "pfcp.subsequent_time_quota",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_rqi_flag,
         { "RQI", "pfcp.rqi_flag",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_qfi,
         { "QFI", "pfcp.qfi_value",
             FT_UINT8, BASE_HEX, NULL, 0x3f,
             NULL, HFILL }
         },
         { &hf_pfcp_query_urr_reference,
         { "Query URR Reference", "pfcp.query_urr_reference",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_additional_usage_reports_information_b15_auri,
         { "AURI (Additional Usage Reports Indication)", "pfcp.additional_usage_reports_information_auri",
             FT_BOOLEAN, 16, NULL, 0x8000,
             NULL, HFILL }
         },
         { &hf_pfcp_additional_usage_reports_information_b14_b0_number_value,
         { "Number of Additional Usage Reports value", "pfcp.additional_usage_reports_information_value",
             FT_UINT16, BASE_DEC, NULL, 0x7FFF,
             NULL, HFILL }
         },
         { &hf_pfcp_traffic_endpoint_id,
         { "Traffic Endpoint ID", "pfcp.traffic_endpoint_id",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_mac_address_flags_b0_sour,
         { "SOUR", "pfcp.mac_address.flags.sour",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_mac_address_flags_b1_dest,
         { "DEST", "pfcp.mac_address.flags.dest",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_mac_address_flags_b2_usou,
         { "USUO", "pfcp.mac_address.flags.usuo",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_mac_address_flags_b3_udes,
         { "UDES", "pfcp.mac_address.flags.udes",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_mac_address_source_mac_address,
         { "Source MAC Address", "pfcp.mac_address.sour",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mac_address_dest_mac_address,
         { "Destination MAC Address", "pfcp.mac_address.dest",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mac_address_upper_source_mac_address,
         { "Upper Source MAC Address", "pfcp.mac_address.usou",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mac_address_upper_dest_mac_address,
         { "Upper Destination MAC Address", "pfcp.mac_address.udes",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_c_tag_flags_b0_pcp,
         { "PCP", "pfcp.c_tag.flags.pcp",
             FT_BOOLEAN, 8, NULL, 0x01,
             "Priority code point", HFILL }
         },
         { &hf_pfcp_c_tag_flags_b1_dei,
         { "DEI", "pfcp.c_tag.flags.dei",
             FT_BOOLEAN, 8, NULL, 0x02,
             "Drop eligible indicator", HFILL }
         },
         { &hf_pfcp_c_tag_flags_b2_vid,
         { "VID", "pfcp.c_tag.flags.vid",
             FT_BOOLEAN, 8, NULL, 0x04,
             "VLAN identifier", HFILL }
         },
         { &hf_pfcp_c_tag_cvid,
         { "C-VID", "pfcp.c_tag.cvid",
             FT_UINT16, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_c_tag_dei_flag,
         { "Drop eligible indicator (DEI)", "pfcp.c_tag.dei_flag",
             FT_BOOLEAN, 8, TFS(&tfs_eligible_ineligible), 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_c_tag_pcp_value,
         { "Priority code point (PCP)", "pfcp.c_tag.pcp",
             FT_UINT8, BASE_DEC, VALS(pfcp_vlan_tag_pcp_vals), 0x07,
             NULL, HFILL }
         },
 
         { &hf_pfcp_s_tag_flags_b0_pcp,
         { "PCP", "pfcp.s_tag.flags.pcp",
             FT_BOOLEAN, 8, NULL, 0x01,
             "Priority code point", HFILL }
         },
         { &hf_pfcp_s_tag_flags_b1_dei,
         { "DEI", "pfcp.s_tag.flags.dei",
             FT_BOOLEAN, 8, NULL, 0x02,
             "Drop eligible indicator", HFILL }
         },
         { &hf_pfcp_s_tag_flags_b2_vid,
         { "VID", "pfcp.s_tag.flags.vid",
             FT_BOOLEAN, 8, NULL, 0x04,
             "VLAN identifier", HFILL }
         },
         { &hf_pfcp_s_tag_svid,
         { "S-VID", "pfcp.s_tag.svid",
             FT_UINT16, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_s_tag_dei_flag,
         { "Drop eligible indicator (DEI)", "pfcp.s_tag.dei_flag",
             FT_BOOLEAN, 8, TFS(&tfs_eligible_ineligible), 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_s_tag_pcp_value,
         { "Priority code point (PCP)", "pfcp.s_tag.pcp",
             FT_UINT8, BASE_DEC, VALS(pfcp_vlan_tag_pcp_vals), 0x07,
             NULL, HFILL }
         },
 
         { &hf_pfcp_ethertype,
         { "Ethertype", "pfcp.ethertype",
             FT_UINT16, BASE_HEX, VALS(etype_vals), 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_proxying_flags_b0_arp,
         { "ARP", "pfcp.proxying.flags.arp",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_proxying_flags_b1_ins,
         { "INS", "pfcp.proxying.flags.ins",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
 
         { &hf_pfcp_ethertype_filter_id,
         { "Ethertype Filter ID", "pfcp.ethertype_filter_id",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_ethertype_filter_properties_flags_b0_bide,
         { "BIDE", "pfcp.ethertype_filter_properties.flags.bide",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_suggested_buffering_packets_count_packet_count,
         { "Packet count", "pfcp.suggested_buffering_packets_count.packet_count",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_user_id_flags_b0_imsif,
         { "IMSIF", "pfcp.user_id.flags.imsif",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_flags_b1_imeif,
         { "IMEIF", "pfcp.user_id.flags.imeif",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_flags_b2_msisdnf,
         { "MSISDNF", "pfcp.user_id.flags.msisdnf",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_flags_b3_naif,
         { "NAIF", "pfcp.user_id.flags.naif",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_flags_b4_supif,
         { "SUPIF", "pfcp.user_id.flags.supif",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_flags_b5_gpsif,
         { "GPSIF", "pfcp.user_id.flags.gpsif",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_flags_b6_peif,
         { "PEIF", "pfcp.user_id.flags.peif",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x40,
             NULL, HFILL }
         },
 
         { &hf_pfcp_user_id_length_of_imsi,
         { "Length of IMSI", "pfcp.user_id.length_of_imsi",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_length_of_imei,
         { "Length of IMEI", "pfcp.user_id.length_of_imei",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_imei,
         { "IMEI", "pfcp.user_id.imei",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_length_of_msisdn,
         { "Length of MSISDN", "pfcp.user_id.length_of_msisdn",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_length_of_nai,
         { "Length of NAI", "pfcp.user_id.length_of_nai",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_nai,
         { "NAI", "pfcp.user_id.nai",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_length_of_supi,
         { "Length of SUPI", "pfcp.user_id.length_of_supi",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_supi,
         { "SUPI", "pfcp.user_id.supi",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_length_of_gpsi,
         { "Length of GPSI", "pfcp.user_id.length_of_gpsi",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_gpsi,
         { "GPSI", "pfcp.user_id.gpsi",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_length_of_pei,
         { "Length of PEI", "pfcp.user_id.length_of_pei",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_user_id_pei,
         { "PEI", "pfcp.user_id.pei",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_ethernet_pdu_session_information_flags_b0_ethi,
         { "IMSIF", "pfcp.ethernet_pdu_session_information.flags.ethi",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_mac_addresses_detected_number_of_mac_addresses,
         { "Number of MAC addresses", "pfcp.mac_addresses_detected.number_of_mac_addresses",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mac_addresses_detected_mac_address,
         { "MAC Address", "pfcp.mac_addresses_detected.mac_address",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mac_addresses_detected_length_of_ctag,
         { "Length of C-TAG", "pfcp.mac_addresses_detected.length_of_ctag",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mac_addresses_detected_length_of_stag,
         { "Length of S-TAG", "pfcp.mac_addresses_detected.length_of_stag",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_mac_addresses_removed_number_of_mac_addresses,
         { "Number of MAC addresses", "pfcp.mac_addresses_removed.number_of_mac_address",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mac_addresses_removed_mac_address,
         { "MAC Address", "pfcp.mac_addresses_removed.mac_addresses",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mac_addresses_removed_length_of_ctag,
         { "Length of C-TAG", "pfcp.mac_addresses_removed.length_of_ctag",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mac_addresses_removed_length_of_stag,
         { "Length of S-TAG", "pfcp.mac_addresses_removed.length_of_stag",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_ethernet_inactivity_timer,
         { "Ethernet Inactivity Timer", "pfcp.ethernet",
             FT_UINT32, BASE_DEC|BASE_UNIT_STRING, &units_seconds, 0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_subsequent_event_quota,
         { "Subsequent Event Quota", "pfcp.subsequent_event_quota",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_subsequent_event_threshold,
         { "Subsequent Event Threshold", "pfcp.subsequent_event_threshold",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_trace_information_trace_id,
         { "Trace ID", "pfcp.trace_information.traceid",
             FT_UINT24, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_trace_information_length_trigger_events,
         { "Length of Trigger Events", "pfcp.trace_information.length_trigger_events",
             FT_UINT8, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_trace_information_trigger_events,
         { "Trigger Events", "pfcp.trace_information.trigger_events",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_trace_information_session_trace_depth,
         { "Session Trace Depth", "pfcp.trace_information.session_trace_depth",
             FT_UINT8, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_trace_information_length_list_interfaces,
         { "Length of List of Interfaces", "pfcp.trace_information.length_list_interfaces",
             FT_UINT8, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_trace_information_list_interfaces,
         { "List of Interfaces", "pfcp.trace_information.list_interfaces",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_trace_information_length_ipaddress,
         { "Length of IP Address", "pfcp.trace_information.length_ipaddress",
             FT_UINT8, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_trace_information_ipv4,
         { "IP Address of Trace Collection Entity", "pfcp.trace_information.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_trace_information_ipv6,
         { "IP Address of Trace Collection Entity", "pfcp.trace_information.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_framed_route,
         { "Framed-Route", "pfcp.framed_route",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_framed_routing,
         { "Framed-Routing", "pfcp.framed_routing",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_framed_ipv6_route,
         { "Framed-IPv6-Route", "pfcp.framed_ipv6_route",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_event_quota,
         { "Event Quota", "pfcp.event_quota",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_event_threshold,
         { "Event Threshold", "pfcp.event_threshold",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_time_stamp,
         { "Time Stamp", "pfcp.time_stamp",
             FT_ABSOLUTE_TIME, ABSOLUTE_TIME_NTP_UTC, NULL, 0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_averaging_window,
         { "Averaging Window", "pfcp.averaging_window",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_paging_policy_indicator,
         { "Paging Policy Indicator (PPI)", "pfcp.ppi",
             FT_UINT8, BASE_DEC, NULL, 0x7,
             NULL, HFILL }
         },
         { &hf_pfcp_apn_dnn,
         { "APN/DNN", "pfcp.apn_dnn",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_tgpp_interface_type,
         { "3GPP Interface Type", "pfcp.tgpp_interface_type",
             FT_UINT8, BASE_DEC, VALS(pfcp_tgpp_interface_type_vals), 0x3f,
             NULL, HFILL }
         },
 
         { &hf_pfcp_pfcpsrreq_flags_b0_psdbu,
         { "PSDBU (PFCP Session Deleted By the UP function)", "pfcp.srreq_flags.psdbu",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_pfcpaureq_flags_b0_parps,
         { "PARPBS (PFCP Association Release Preparation Start)", "pfcp.aureq_flags.parps",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_activation_time,
         { "Activation Time", "pfcp.activation_time",
             FT_ABSOLUTE_TIME, ABSOLUTE_TIME_NTP_UTC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_deactivation_time,
         { "Deactivation Time", "pfcp.deactivation_time",
             FT_ABSOLUTE_TIME, ABSOLUTE_TIME_NTP_UTC, NULL, 0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_mar_id,
         { "MAR ID", "pfcp.mar_id",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_steering_functionality,
         { "Steering Functionality", "pfcp.steering_functionality",
             FT_UINT8, BASE_DEC, VALS(pfcp_steering_functionality_vals), 0xF,
             NULL, HFILL }
         },
         { &hf_pfcp_steering_mode,
         { "Steering Mode", "pfcp.steering_mode",
             FT_UINT8, BASE_DEC, VALS(pfcp_steering_mode_vals), 0xF,
             NULL, HFILL }
         },
 
         { &hf_pfcp_weight,
         { "Weight", "pfcp.weight",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_priority,
         { "Priority", "pfcp.priority",
             FT_UINT8, BASE_DEC, VALS(pfcp_priority_vals), 0xF,
             NULL, HFILL }
         },
 
         { &hf_pfcp_ue_ip_address_pool_length,
         { "UE IP address Pool Identity Length", "pfcp.ue_ip_address_pool_length",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_ue_ip_address_pool_identity,
         { "UE IP address Pool Identity", "pfcp.ue_ip_address_pool_identity",
             FT_BYTES, BASE_SHOW_ASCII_PRINTABLE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_alternative_smf_ip_address_flags_ppe,
         { "PPE (Preferred PFCP Entity)", "pfcp.alternative_smf_ip_address_flags.ppe",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_alternative_smf_ip_address_ipv4,
         { "IPv4 address", "pfcp.alternative_smf_ip_address.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_alternative_smf_ip_address_ipv6,
         { "IPv6 address", "pfcp.alternative_smf_ip_address.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_packet_replication_and_detection_carry_on_information_flags_b0_priueai,
         { "PRIUEAI (Packet Replication Information – UE/PDU Session Address Indication)", "pfcp.packet_replication_and_detection_carry_on_information.flags.priueai",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_replication_and_detection_carry_on_information_flags_b1_prin19i,
         { "PRIN19I (Packet Replication Information - N19 Indication)", "pfcp.packet_replication_and_detection_carry_on_information.flags.prin19i",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_replication_and_detection_carry_on_information_flags_b2_prin6i,
         { "PRIN6I (Packet Replication Information - N6 Indication)", "pfcp.packet_replication_and_detection_carry_on_information.flags.prin6i",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_replication_and_detection_carry_on_information_flags_b3_dcaroni,
         { "DCARONI (Detection Carry-On Indication)", "pfcp.packet_replication_and_detection_carry_on_information.flags.dcaroni",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x08,
             NULL, HFILL }
         },
 
         { &hf_pfcp_validity_time_value,
         { "Validity Time value", "pfcp.validity_time_value",
             FT_UINT32, BASE_DEC|BASE_UNIT_STRING, &units_seconds, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_validity_time_str,
         { "Validity Time", "pfcp.validity_time",
             FT_ABSOLUTE_TIME, ABSOLUTE_TIME_UTC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_number_of_reports,
         { "Number of Reports", "pfcp.number_of_reports",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_pfcpasrsp_flags_flags_b0_psrei,
         { "PSREI (PFCP Session Retained Indication)", "pfcp.asrsp_flags.flags.psrei",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_pfcpasrsp_flags_flags_b1_uupsi,
         { "UUPSI (UPF configured for IPUPS indication)", "pfcp.asrsp_flags.flags.uupsi",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
 
         { &hf_pfcp_cp_pfcp_entity_ip_address_ipv4,
         { "IPv4 address", "pfcp.cp_pfcp_entity_ip_address.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_cp_pfcp_entity_ip_address_ipv6,
         { "IPv6 address", "pfcp.cp_pfcp_entity_ip_address.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_pfcpsereq_flags_flags_b0_resti,
         { "RESTI (Restoration Indication)", "pfcp.sereq_flags.flags.resti",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_pfcpsereq_flags_flags_b1_sumpc,
         { "SUMPC (Stop of Measurement of Pause of Charging)", "pfcp.sereq_flags.flags.sumpc",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
 
         { &hf_pfcp_ip_multicast_address_flags_b2_range,
         { "RANGE", "pfcp.ip_multicast_address.flags.range",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_multicast_address_flags_b3_any,
         { "ANY", "pfcp.ip_multicast_address.flags.any",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_multicast_address_start_ipv4,
         { "(Start) IPv4 address", "pfcp.ip_multicast_address.start_ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_multicast_address_start_ipv6,
         { "(Start) IPv6 address", "pfcp.ip_multicast_address.start_ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_multicast_address_end_ipv4,
         { "(End) IPv4 address", "pfcp.ip_multicast_address.end_ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_multicast_address_end_ipv6,
         { "(End) IPv6 address", "pfcp.ip_multicast_address.end_ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_source_ip_address_flags_b2_mpl,
         { "MPL (Mask/Prefix Length)", "pfcp.source_ip_address.flags.mpl",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_source_ip_address_ipv4,
         { "IPv4 address", "pfcp.source_ip_address.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_source_ip_address_ipv6,
         { "IPv6 address", "pfcp.source_ip_address.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_source_ip_address_mask_prefix_lengt,
         { "Mask/Prefix Length", "pfcp.source_ip_address.mpl",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_packet_rate_status_flags_b0_ul,
         { "UL", "pfcp.packet_rate_status.flags.ul",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_rate_status_flags_b1_dl,
         { "DL", "pfcp.packet_rate_status.flags.dl",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_rate_status_flags_b2_apr,
         { "APR", "pfcp.packet_rate_status.flags.apr",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_rate_status_ul,
         { "UL (remaining uplink packet limit)", "pfcp.packet_rate_status.tovol",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_rate_status_dl,
         { "DL (remaining downlink packet limit)", "pfcp.packet_rate_status.ulvol",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_rate_status_apr_ul,
         { "Additional UL (remaining uplink packet limit)", "pfcp.packet_rate_status.apr_tovol",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_rate_status_apr_dl,
         { "Additional DL (remaining downlink packet limit)", "pfcp.packet_rate_status.apr_ulvol",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_rate_status_validity_time,
         { "Rate Status Validity Time value", "pfcp.packet_rate_status.validity_time",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_create_bridge_router_info_flags_b0_bii,
         { "BII (Bridge Information Indication)", "pfcp.create_bridge_router_info.flags.bii",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_create_bridge_router_info_flags_b1_rii,
         { "RII (Router Information Indication)", "pfcp.create_bridge_router_info.flags.rii",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
 
         { &hf_pfcp_port_number,
         { "Port Number value", "pfcp.port_number.value",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_nw_tt_port_number,
         { "NW-TT Port Number value", "pfcp.nw_tt_port_number.value",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_5gs_user_plane_node_id_flags_b0_bid,
         { "BID", "pfcp.5gs_user_plane_node_id.flags.sour",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_5gs_user_plane_node_id_value,
         { "Use Plane Node value", "pfcp.5gs_user_plane_node_id.value",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_port_management_information,
         { "Port Management Information", "pfcp.port_management_information",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_requested_clock_drift_control_information_flags_b0_rrto,
         { "RRTO (Request to Report Time Offset)", "pfcp.requested_clock_drift_control_information.flags.rrto",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_requested_clock_drift_control_information_flags_b1_rrcr,
         { "RRCR (Request to Report Cumulative RateRatio)", "pfcp.requested_clock_drift_control_information.flags.rrcr",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
 
         { &hf_pfcp_time_domain_number_value,
         { "Time Domain Number value", "pfcp.time_domain_number_value",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_time_offset_threshold,
         { "Time Offset Threshold", "pfcp.time_offset_threshold",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_cumulative_rate_ratio_threshold,
         { "Cumulative rateRatio Threshold", "pfcp.cumulative_rate_ratio_threshold",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
 
         { &hf_pfcp_time_offset_measurement,
         { "Time Offset Measurement", "pfcp.time_offset_measurement",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_cumulative_rate_ratio_measurement,
         { "Cumulative rateRatio Measurement", "pfcp.cumulative_rate_ratio_measurement",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_srr_id,
         { "SRR ID value", "pfcp.srr_id_value",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_requested_access_availability_control_information_flags_b0_rrca,
         { "RRCA (Request to Report Change in Access availability)", "pfcp.requested_access_availability_control_information.flags.rrca",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_availability_type,
         { "Failed Rule ID Type", "pfcp.failed_rule_id_type",
             FT_UINT8, BASE_DEC, VALS(pfcp_availability_status_vals), 0xC,
             NULL, HFILL }
         },
         { &hf_pfcp_availability_status,
         { "Failed Rule ID Type", "pfcp.failed_rule_id_type",
             FT_UINT8, BASE_DEC, VALS(pfcp_availability_type_vals), 0x3,
             NULL, HFILL }
         },
 
         { &hf_pfcp_mptcp_control_information_flags_b0_tci,
         { "TCI (Transport Converter Indication)", "pfcp.mptcp_control_information.flags.tci",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_atsss_ll_control_information_flags_b0_lli,
         { "LLI: ATSSS-LL steering functionality is required", "pfcp.atsss_ll_control_information.flags.lli",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_pmf_control_information_flags_b0_pmfi,
         { "PMFI (PMF functionality is required)", "pfcp.pmf_control_information.flags.pmfi",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_pmf_control_information_flags_b1_drtti,
         { "DRTTI (Disallow PMF RTT Indication)", "pfcp.pmf_control_information.flags.drtti",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_pmf_control_information_flags_b2_pqpm,
         { "PQPM (Per Qos flow Performance Measurement indication)", "pfcp.pmf_control_information.flags.pqpm",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_pmf_control_information_number_of_qfi,
         { "Number of QFI", "pfcp.pmf_control_information.number_of_qfi",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_mptcp_address_information_flags_b0_v4,
         { "V4", "pfcp.mptcp_ip_address_information.flags.v4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_mptcp_address_information_flags_b1_v6,
         { "V6", "pfcp.mptcp_ip_address_information.flags.v6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_mptcp_proxy_type,
         { "MPTCP proxy type", "pfcp.mptcp_proxy.type",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mptcp_proxy_port,
         { "MPTCP proxy port", "pfcp.mptcp_proxy.port",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mptcp_proxy_ip_address_ipv4,
         { "MPTCP proxy IPv4 address", "pfcp.mptcp_proxy.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mptcp_proxy_ip_address_ipv6,
         { "MPTCP proxy IPv6 address", "pfcp.mptcp_proxy.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_link_specific_multipath_ip_address_flags_b0_v4,
         { "V4", "pfcp.link_specific_multipath_ip_address.flags.v4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_link_specific_multipath_ip_address_flags_b1_v6,
         { "V6", "pfcp.link_specific_multipath_ip_address.flags.v6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_link_specific_multipath_ip_address_flags_b2_nv4,
         { "NV4", "pfcp.link_specific_multipath_ip_address.flags.nv4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_link_specific_multipath_ip_address_flags_b3_nv6,
         { "NV6", "pfcp.link_specific_multipath_ip_address.flags.nv6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_link_specific_multipath_ip_address_3gpp_ipv4,
         { "Link-Specific IPv4 Address for 3GPP Access", "pfcp.link_specific_multipath_ip_address.3gpp.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_link_specific_multipath_ip_address_3gpp_ipv6,
         { "Link-Specific IPv6 Address for 3GPP Access", "pfcp.link_specific_multipath_ip_address.3gpp.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_link_specific_multipath_ip_address_non3gpp_ipv4,
         { "Link-Specific IPv4 Address for Non-3GPP Access", "pfcp.link_specific_multipath_ip_address.non3gpp.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_link_specific_multipath_ip_address_non3gpp_ipv6,
         { "Link-Specific IPv6 Address for Non-3GPP Access", "pfcp.link_specific_multipath_ip_address.non3gpp.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_pmf_address_information_flags_b0_v4,
         { "V4", "pfcp.pmf_address_information.flags.v4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_pmf_address_information_flags_b1_v6,
         { "V6", "pfcp.pmf_address_information.flags.v6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_pmf_address_information_flags_b2_mac,
         { "MAC", "pfcp.pmf_address_information.flags.mac",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_pmf_address_ipv4,
         { "PMF IPv4 Address", "pfcp.pmf_address_information.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_pmf_address_ipv6,
         { "PMF IPv6 Address", "pfcp.pmf_address_information.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_pmf_port_3gpp,
         { "PMF port for 3GPP", "pfcp.pmf_address_information.port_3gpp",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_pmf_port_non3gpp,
         { "PMF port for Non-3GPP", "pfcp.pmf_address_information.port_non3gpp",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_pmf_mac_address_3gpp,
         { "MAC Address for 3GPP", "pfcp.pmf_address_information.mac_address_3gpp",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_pmf_mac_address_non3gpp,
         { "MAC Address for Non-3GPP", "pfcp.pmf_address_information.mac_address_non3gpp",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_atsss_ll_information_flags_b0_lli,
         { "LLI: ATSSS-LL steering functionality have been allocated", "pfcp.atsss_ll_information.flags.lli",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_data_network_access_identifier,
         { "Data Network Access Identifier", "pfcp.data_network_access_identifier",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_packet_delay_milliseconds,
         { "Delay Value in milliseconds", "pfcp.average_packet_delay.milliseconds",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_qos_report_trigger_flags_b0_per,
         { "PER (Periodic Reporting)", "pfcp.qos_report_trigger.flags.v4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_qos_report_trigger_flags_b1_thr,
         { "THR (Event triggered based on Threshold)", "pfcp.qos_report_trigger.flags.thr",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_qos_report_trigger_flags_b2_ire,
         { "IRE (Immediate Report)", "pfcp.qos_report_trigger.flags.ire",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
 
         { &hf_pfcp_gtp_u_path_interface_type_flags_b0_n9,
         { "N9", "pfcp.qos_report_trigtp_u_path_interface_typegger.flags.n9",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_gtp_u_path_interface_type_flags_b1_n3,
         { "N3", "pfcp.gtp_u_path_interface_type.flags.n3",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
 
         { &hf_pfcp_requested_qos_monitoring_flags_b0_dlpd,
         { "DLPD (Downlink Packet Delay)", "pfcp.requested_qos_monitoring.flags.dlpd",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_requested_qos_monitoring_flags_b1_ulpd,
         { "ULPD (Uplink Packet Delay)", "pfcp.requested_qos_monitoring.flags.ulpd",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_requested_qos_monitoring_flags_b2_rppd,
         { "RPPD (Round Trip Packet Delay)", "pfcp.requested_qos_monitoring.flags.rppd",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_requested_qos_monitoring_flags_b3_gtpupm,
         { "GTPUPM (GTP-U Path Monitoring)", "pfcp.requested_qos_monitoring.flags.gtpupm",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_requested_qos_monitoring_flags_b4_dlci,
         { "DLCI (Downlink Congestion Information)", "pfcp.requested_qos_monitoring.flags.dlci",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_requested_qos_monitoring_flags_b5_ulci,
         { "ULCI (Uplink Congestion Information)", "pfcp.requested_qos_monitoring.flags.ulci",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x20,
             NULL, HFILL }
         },
         { &hf_pfcp_requested_qos_monitoring_flags_b6_dlpr,
         { "DLPR (Downlink Packet Rate)", "pfcp.requested_qos_monitoring.flags.dlpr",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x40,
             NULL, HFILL }
         },
         { &hf_pfcp_requested_qos_monitoring_flags_b7_ulpr,
         { "ULPR (Uplink Packet Rate)", "pfcp.requested_qos_monitoring.flags.ulpr",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x80,
             NULL, HFILL }
         },
 
         { &hf_pfcp_reporting_frequency_flags_b0_evett,
         { "EVETT (Event Triggered QoS monitoring reporting)", "pfcp.reporting_frequency.flags.evett",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_frequency_flags_b1_perio,
         { "PERIO (Periodic QoS monitoring reporting)", "pfcp.reporting_frequency.flags.perio",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_reporting_frequency_flags_b2_sesrl,
         { "SESRL (Session Released QoS monitoring reporting) (Deprecated in R18.1)", "pfcp.reporting_frequency.flags.sesrl",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
 
         { &hf_pfcp_packet_delay_thresholds_flags_b0_dl,
         { "DL (Downlink)", "pfcp.packet_delay_thresholds.flags.dl",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_delay_thresholds_flags_b1_ul,
         { "UL (Uplink)", "pfcp.packet_delay_thresholds.flags.ul",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_delay_thresholds_flags_b2_rp,
         { "RP (Round Trip)", "pfcp.packet_delay_thresholds.flags.rp",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_delay_thresholds_downlink,
         { "Downlink packet delay threshold (milliseconds)", "pfcp.packet_delay_thresholds.downlink",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_delay_thresholds_uplink,
         { "Downlink packet delay threshold (milliseconds)", "pfcp.packet_delay_thresholds.uplink",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_packet_delay_thresholds_roundtrip,
         { "Round trip packet delay threshold (milliseconds)", "pfcp.packet_delay_thresholds.roundtrip",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_minimum_wait_time_seconds,
         { "The Minimum Wait Time (seconds)", "pfcp.minimum_wait_time.seconds",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_qos_monitoring_measurement_flags_b0_dlpd,
         { "DLPD (Downlink Packet Delay)", "pfcp.qos_monitoring_measurement.flags.dlpd",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_qos_monitoring_measurement_flags_b1_ulpd,
         { "ULPD (Uplink Packet Delay)", "pfcp.qos_monitoring_measurement.flags.ulpd",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_qos_monitoring_measurement_flags_b2_rppd,
         { "RPPD (Round Trip Packet Delay)", "pfcp.qos_monitoring_measurement.flags.rppd",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_qos_monitoring_measurement_flags_b3_plmf,
         { "PLMF (Packet Delay Measurement Failure)", "pfcp.qos_monitoring_measurement.flags.plmf",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_qos_monitoring_measurement_flags_b4_dlci,
         { "DLCI (Downlink Congestion Info)", "pfcp.qos_monitoring_measurement.flags.dlci",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_qos_monitoring_measurement_flags_b5_ulci,
         { "ULCI (Uplink Congestion Info)", "pfcp.qos_monitoring_measurement.flags.ulci",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x20,
             NULL, HFILL }
         },
 
         { &hf_pfcp_qos_monitoring_measurement_downlink_packet_delay,
         { "Downlink packet delay (milliseconds)", "pfcp.qos_monitoring_measurement.downlink_packet_delay",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_qos_monitoring_measurement_uplink_packet_delay,
         { "Downlink packet delay (milliseconds)", "pfcp.qos_monitoring_measurement.uplink_packet_delay",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_qos_monitoring_measurement_roundtrip,
         { "Round trip packet delay (milliseconds)", "pfcp.qos_monitoring_measurement.roundtrip",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_qos_monitoring_measurement_downlink_congestion_information,
         { "Downlink Congestion information", "pfcp.qos_monitoring_measurement.downlink_congestion_information",
             FT_UINT8, BASE_DEC_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_qos_monitoring_measurement_uplink_congestion_information,
         { "Uplink Congestion information", "pfcp.qos_monitoring_measurement.uplink_congestion_information",
             FT_UINT8, BASE_DEC_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_qos_monitoring_measurement_downlink_packet_rate,
         { "Downlink packet rate (kilobits per second)", "pfcp.qos_monitoring_measurement.downlink_packet_rate",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_qos_monitoring_measurement_uplink_packet_rate,
         { "Downlink packet rate (kilobits per second)", "pfcp.qos_monitoring_measurement.uplink_packet_delay",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_mt_edt_control_information_flags_b0_rdsi,
         { "RDSI (Reporting DL data packets Size Indication)", "pfcp.mt_edt_control_information.flags.rdsi",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_dl_data_packets_size,
         { "DL Data Packets Size", "pfcp.dl_data_packets_size",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_qer_control_indications_o5_b0_rcsr,
         { "RCSR (Rate Control Status Reporting)", "pfcp.qer_control_indications.rcsr",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_nf_instance_id,
         { "NF Instance ID", "pfcp.nf_instance_id",
             FT_GUID, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_s_nssai_sst,
         { "SST", "pfcp.s_nssai_sst.sst",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_s_nssai_sd,
         { "SD", "pfcp.s_nssai_sst.sd",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_ip_version_flags_b1_v6,
         { "V6 (IPv6)", "pfcp.ip_version.v6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_version_flags_b0_v4,
         { "V4 (IPv4)", "pfcp.ip_version.v4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_pfcpasreq_flags_flags_b0_uupsi,
         { "UUPSI (UPF configured for IPUPS indication)", "pfcp.asreq_flags.flags.uupsi",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_data_status_flags_b0_drop,
         { "DROP (First DL packet is discared by UP function)", "pfcp.data_status.flags.drop",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_data_status_flags_b1_buff,
         { "BUFF (First DL packet is received and buffered by UP function)", "pfcp.data_status.flags.buff",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
 
         { &hf_pfcp_rds_configuration_information_flags_b0_rds,
         { "RDS (Reliable Data Service)", "pfcp.rds_configuration_information.flags.rds",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_multipath_application_indication_flags_b0_mtai,
         { "MTAI (MPTCP Applicable Indication)", "pfcp.multipath_application_indication.flags.mtai",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_multipath_application_indication_flags_b1_mqai,
         { "MQAI (MPQUIC Applicable Indication)", "pfcp.multipath_application_indication.flags.mqai",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
 
         { &hf_pfcp_user_plane_node_management_information_container,
         { "Predefined Rules Name", "pfcp.user_plane_node_management_information_container",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_number_of_ue_ip_addresses_b0_ipv4,
         { "IPv4", "pfcp.number_of_ue_ip_addresses.v4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_number_of_ue_ip_addresses_b1_ipv6,
         { "IPv6", "pfcp.number_of_ue_ip_addresses.v6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_number_of_ue_ip_addresses_ipv4,
         { "Number of UE IPv4 Addresses", "pfcp.number_of_ue_ip_addresses.ipv4addresses",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_number_of_ue_ip_addresses_ipv6,
         { "Number of UE IPv6 Addresses", "pfcp.number_of_ue_ip_addresses.ipv6addresses",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_validity_timer,
         { "Validity Timer", "pfcp.validity_timer",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_rattype,
         { "RAT Type", "pfcp.rattype",
             FT_UINT8, BASE_DEC, VALS(pfcp_rattype_vals), 0xF,
             NULL, HFILL }
         },
 
         { &hf_pfcp_l2tp_user_authentication_proxy_authen_type_value,
         { "Proxy Authen Type Value", "pfcp.l2tp_user_authentication.proxy_authen_type_value",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_l2tp_user_authentication_b0_pan,
         { "PAN (Proxy Authen Name)", "pfcp.l2tp_user_authentication.flags.pan",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_l2tp_user_authentication_b1_pac,
         { "PAC (Proxy Authen Challenge)", "pfcp.l2tp_user_authentication.flags.pac",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_l2tp_user_authentication_b2_par,
         { "PAR (Proxy Authen Response)", "pfcp.l2tp_user_authentication.flags.par",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_l2tp_user_authentication_b3_pai,
         { "PAI (Proxy Authen UD)", "pfcp.l2tp_user_authentication.flags.pai",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_l2tp_user_authentication_proxy_authen_name_len,
         { "Proxy Authen Name Length", "pfcp.l2tp_user_authentication.pan_len",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_l2tp_user_authentication_proxy_authen_name,
         { "Proxy Authen Name", "pfcp.l2tp_user_authentication.pan",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_l2tp_user_authentication_proxy_authen_challenge_len,
         { "Proxy Authen Challenge Length", "pfcp.l2tp_user_authentication.pac_len",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_l2tp_user_authentication_proxy_authen_challenge,
         { "Proxy Authen Challenge", "pfcp.l2tp_user_authentication.pac",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_l2tp_user_authentication_proxy_authen_response_len,
         { "Proxy Authen Response Length", "pfcp.l2tp_user_authentication.par_len",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_l2tp_user_authentication_proxy_authen_response,
         { "Proxy Authen Response", "pfcp.l2tp_user_authentication.par",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_l2tp_user_authentication_proxy_authen_id,
         { "Proxy Authen ID", "pfcp.l2tp_user_authentication.pai",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_lns_address_ipv4,
         { "IPv4 address", "pfcp.lns_address.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_lns_address_ipv6,
         { "IPv6 address", "pfcp.lns_address.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_tunnel_preference_value,
         { "Tunnel Preference Value", "pfcp.tunnel_preference_value",
             FT_UINT24, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_calling_number_value,
         { "Calling Number Value", "pfcp.calling_number_value",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_called_number_value,
         { "Called Number Value", "pfcp.called_number_value",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_l2tp_session_indications_o5_b0_reuia,
         { "REUIA", "pfcp.l2tp_session_indications.reuia",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "Request UE IP Address", HFILL }
         },
         { &hf_pfcp_l2tp_session_indications_o5_b1_redsa,
         { "REDSA", "pfcp.l2tp_session_indications.redsa",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "Request DNS Server Address", HFILL }
         },
         { &hf_pfcp_l2tp_session_indications_o5_b2_rensa,
         { "RENSA", "pfcp.l2tp_session_indications.rensa",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             "Request NBNS Server Address", HFILL }
         },
 
         { &hf_pfcp_maximum_receive_unit,
         { "Maximum Receive Unit", "pfcp.maximum_receive_unit",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_thresholds_flags_b0_rtt,
         { "RTT", "pfcp.thresholds.flags.rtt",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_thresholds_flags_b1_plr,
         { "PLR (Packet Loss Rate)", "pfcp.thresholds.flags.plr",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_thresholds_rtt,
         { "RTT (in milliseconds)", "pfcp.thresholds.rtt",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_thresholds_plr,
         { "Packet Loss Rate (in percent)", "pfcp.thresholds.plr",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_l2tp_steering_mode_indications_o5_b0_albi,
         { "ALBI", "pfcp.l2tp_session_indications.reuia",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "Autonomous Load Balacing Indicator", HFILL }
         },
         { &hf_pfcp_l2tp_steering_mode_indications_o5_b1_ueai,
         { "UEAI", "pfcp.l2tp_session_indications.redsa",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "UE Assistance Indicator", HFILL }
         },
 
         { &hf_pfcp_group_id,
         { "Group ID", "pfcp.group_id",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_cp_ip_address_ipv4,
         { "IPv4 address", "pfcp.cp_ip_address.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_cp_ip_address_ipv6,
         { "IPv6 address", "pfcp.cp_ip_address.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_ip_address_and_port_number_replacement_flag_b0_v4,
         { "DIPV4", "pfcp.ip_address_and_port_number_replacement.flag.dipv4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_address_and_port_number_replacement_flag_b1_v6,
         { "DIPV6", "pfcp.ip_address_and_port_number_replacement.flag.dipv6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_address_and_port_number_replacement_flag_b2_dpn,
         { "DPN", "pfcp.ip_address_and_port_number_replacement.flag.dpn",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_address_and_port_number_replacement_flag_b3_sipv4,
         { "SIPV4", "pfcp.ip_address_and_port_number_replacement.flag.sipv4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_address_and_port_number_replacement_flag_b4_sipv6,
         { "SIPV6", "pfcp.ip_address_and_port_number_replacement.flag.sipv6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x10,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_address_and_port_number_replacement_flag_b5_spn,
         { "SPN", "pfcp.ip_address_and_port_number_replacement.flag.spn",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x20,
             NULL, HFILL }
         },
 
         { &hf_pfcp_ip_address_and_port_number_replacement_destination_ipv4,
         { "Destination IPv4 address", "pfcp.ip_address_and_port_number_replacement.dipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_address_and_port_number_replacement_destination_ipv6,
         { "Destination IPv6 address", "pfcp.ip_address_and_port_number_replacement.dipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_address_and_port_number_replacement_destination_port,
         { "Destination Port Number", "pfcp.ip_address_and_port_number_replacement.dpn",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_address_and_port_number_replacement_source_ipv4,
         { "Source IPv4 address", "pfcp.ip_address_and_port_number_replacement.sipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_address_and_port_number_replacement_source_ipv6,
         { "Source IPv6 address", "pfcp.ip_address_and_port_number_replacement.sipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_ip_address_and_port_number_replacement_source_port,
         { "Source Port Number", "pfcp.ip_address_and_port_number_replacement.spn",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_dns_query_filter_pattern_len,
         { "DNS Query Filter Pattern Length", "pfcp.dns_query_filter.pattern_len",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_dns_query_filter_pattern,
         { "DNS Query Filter Pattern", "pfcp.dns_query_filter.pattern",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_event_notification_uri,
         { "Event Notification URI", "pfcp.event_notification_uri",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_notification_correlation_id,
         { "QER Correlation ID", "pfcp.qer_correlation_id",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_reporting_flags_o5_b0_dupl,
         { "DUPL (Duplication Notification)", "pfcp.reporting_flags.dupl",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_mbs_session_identifier_flag_b0_tmgi,
         { "TGMI", "pfcp.session_identifier.flag.tmgi",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_mbs_session_identifier_flag_b1_ssmi,
         { "SSMI", "pfcp.session_identifier.flag.ssmi",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_mbs_session_identifier_flag_b2_nidi,
         { "NIDI", "pfcp.session_identifier.flag.nidi",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_mbs_session_identifier_tmgi,
           {"TMGI", "pfcp.mbs_session_identifier.tmgi",
            FT_BYTES, BASE_NONE, NULL, 0x0,
            NULL, HFILL}
         },
         { &hf_pfcp_mbs_session_identifier_source_address_type,
         { "Source Address Type", "pfcp.mbs_session_identifier.source_address.type",
             FT_UINT8, BASE_DEC, NULL, 0xC0,
             NULL, HFILL }
         },
         { &hf_pfcp_mbs_session_identifier_source_address_length,
         { "Source Address Length", "pfcp.mbs_session_identifier.source_address.length",
             FT_UINT8, BASE_DEC, NULL, 0x3F,
             NULL, HFILL }
         },
         { &hf_pfcp_mbs_session_identifier_source_address_ipv4,
         { "Source IPv4 address", "pfcp.mbs_session_identifier.source_address.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mbs_session_identifier_source_address_ipv6,
         { "Source IPv6 address", "pfcp.mbs_session_identifier.source_address.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mbs_session_identifier_nidi,
           {"NIDI", "pfcp.mbs_session_identifier.nidi",
            FT_BYTES, BASE_NONE, NULL, 0x0,
            NULL, HFILL}
         },
 
         { &hf_pfcp_multicast_transport_information_endpoint_identifier,
         { "Common Tunnel Endpoint Identifier", "pfcp.multicast_transport_information.endpoint_identifier",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_multicast_transport_information_distribution_address_type,
         { "Distribution Address Type", "pfcp.multicast_transport_information.distribution_address.type",
             FT_UINT8, BASE_DEC, NULL, 0xC0,
             NULL, HFILL }
         },
         { &hf_pfcp_multicast_transport_information_distribution_address_length,
         { "Distribution Address Length", "pfcp.multicast_transport_information.distribution_address.length",
             FT_UINT8, BASE_DEC, NULL, 0x3F,
             NULL, HFILL }
         },
         { &hf_pfcp_multicast_transport_information_distribution_address_ipv4,
         { "Distribution IPv4 address", "pfcp.multicast_transport_information.distribution_address.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_multicast_transport_information_distribution_address_ipv6,
         { "Distribution IPv6 address", "pfcp.multicast_transport_information.distribution_address.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_multicast_transport_information_source_address_type,
         { "Source Address Type", "pfcp.multicast_transport_information.distribution_address.type",
             FT_UINT8, BASE_DEC, NULL, 0xC0,
             NULL, HFILL }
         },
         { &hf_pfcp_multicast_transport_information_source_address_length,
         { "Source Address Length", "pfcp.multicast_transport_information.distribution_address.length",
             FT_UINT8, BASE_DEC, NULL, 0x3F,
             NULL, HFILL }
         },
         { &hf_pfcp_multicast_transport_information_source_address_ipv4,
         { "Source IPv4 address", "pfcp.multicast_transport_information.distribution_address.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_multicast_transport_information_source_address_ipv6,
         { "Source IPv6 address", "pfcp.multicast_transport_information.distribution_address.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_mbsn4mbreq_flags_o5_b0_pllssm,
         { "PLLSSM (Provide Lower Layer SSM)", "pfcp.reporting_flags.pllssm",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_mbsn4mbreq_flags_o5_b1_jmbssm,
         { "JMBSSM (Join MBS Session SSM)", "pfcp.reporting_flags.jmbssm",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_mbsn4mbreq_flags_o5_b2_mbs_resti,
         { "MBS RESTI (MBS Restoration Indication)", "pfcp.reporting_flags.mbs_resti",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
 
         { &hf_pfcp_local_ingress_tunnel_flags_b2_ch,
         { "CH (CHOOSE)", "pfcp.local_ingress_tunnel.flags.ch",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_local_ingress_tunnel_flags_b1_v6,
         { "V6 (IPv6)", "pfcp.local_ingress_tunnel.flags.v6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_local_ingress_tunnel_flags_b0_v4,
         { "V4 (IPv4)", "pfcp.local_ingress_tunnel.flags.v4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_local_ingress_tunnel_udp_port,
         { "UDP Port", "pfcp.local_ingress_tunnel.udp",
             FT_UINT32, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_local_ingress_tunnel_ipv4,
         { "IPv4 address", "pfcp.local_ingress_tunnel.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_local_ingress_tunnel_ipv6,
         { "IPv6 address", "pfcp.local_ingress_tunnel.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_mbs_unicast_parameters_id,
         { "MBS Unicast Parameters ID value", "pfcp.mbs_unicast_parameters_id",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_mbsn4resp_flags_o5_b0_nn19dt,
         { "NN19DT", "pfcp.mbsn4resp_flags.nn19dt",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "New N19mb Downlink Tunnel", HFILL }
         },
         { &hf_pfcp_mbsn4resp_flags_o5_b1_jmti,
         { "JMTI", "pfcp.mbsn4resp_flags.jmti",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "Joined N19mb Multicast Tree Indication", HFILL }
         },
         { &hf_pfcp_mbsn4resp_flags_o5_b2_n19dtr,
         { "N19DTR", "pfcp.mbsn4resp_flags.n19dtr",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             "N19mb Downlink Tunnel Removal", HFILL }
         },
 
         { &hf_pfcp_tunnel_password_value,
         { "Tunnel Password value", "pfcp.tunnel_password_value",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_area_session_id_value,
         { "Area Session ID value", "pfcp.area_session_id_value",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_dscp_to_ppi_mapping_info_ppi_value,
         { "PPI value", "pfcp.dscp_to_ppi_mapping_info_ppi_value",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_dscp_to_ppi_mapping_info_dscp_value,
         { "DSCP value", "pfcp.dscp_to_ppi_mapping_info_dscp_value",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_pfcpsdrsp_flags_b0_puru,
         { "PURU (Pending Usage Reports Unacknowledged)", "pfcp.pfcpsdrsp_flags.puru",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_qer_indications_flags_b0_iqfis,
         { "IQFIS (Insert DL MBS QFI SN)", "pfcp.qer_indications_flags.iqfis",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_qer_indications_flags_b1_edbmi,
         { "EDBMI (End Of Data Burst Marking Indication)", "pfcp.qer_indications_flags.edbmi",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_qer_indications_flags_b2_eml4s,
         { "EML4S (ECN Marking for L4S)", "pfcp.qer_indications_flags.eml4s",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_qer_indications_flags_b3_pdusm,
         { "PDUSM (PDU Set Marking)", "pfcp.qer_indications_flags.pdusm",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
 
         { &hf_pfcp_configured_time_domain_flags_b0_ctdi,
         { "CTDI (Configured Time Domain Indicator)", "pfcp.qer_indications_flags.ctdi",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_metadata,
         { "Metadata", "pfcp.metadata.metadata",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_metadata_binary_metadata,
         { "Metadata - Binary data", "pfcp.metadata.binary_metadata",
             FT_BYTES, BASE_NONE, NULL, 0x00,
             NULL, HFILL }
         },
 
         { &hf_pfcp_traffic_parameter_threshold_flags_b0_dl,
         { "DL", "pfcp.traffic_parameter_threshold_flags.dl",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_traffic_parameter_threshold_downlink_n6_jitter_threshold,
         { "Downlink N6 Jitter Threshold", "pfcp.traffic_parameter_threshold.downlink_n6_jitter_threshold",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_dl_periodicity_value,
         { "Dl Periodicity", "pfcp.dl_periodicity.value",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_n6_jitter_measurement_flags_b0_dl,
         { "DL", "pfcp.dl_periodicity.dl",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_n6_jitter_measurement_dl_periodicity,
         { "DL Periodicity", "pfcp.dl_periodicity.dl_periodicity",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_n6_jitter_measurement_lower_dl_jitter_measurement,
         { "Lower DL Jitter Measurement", "pfcp.dl_periodicity.lower_dl_jitter_measurement",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_n6_jitter_measurement_higher_dl_jitter_measurement,
         { "Higher DL Jitter Measurement", "pfcp.dl_periodicity.higher_dl_jitter_measurement",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_traffic_parameter_measurement_indication_flags_b0_ulpmi,
         { "ULPMI", "pfcp.traffic_parameter_measurement_indication.ulpmi",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_traffic_parameter_measurement_indication_flags_b1_dlpmi,
         { "DLPMI", "pfcp.traffic_parameter_measurement_indication.dlpmi",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_traffic_parameter_measurement_indication_flags_b2_n6jmi,
         { "N6JMI", "pfcp.traffic_parameter_measurement_indication.n6jmi",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
 
         { &hf_pfcp_ul_periodicity_value,
         { "Ul Periodicity", "pfcp.ul_periodicity.value",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_mpquic_control_information_flags_b0_cupd,
         { "CUPD", "pfcp.quic_control_information.cupd",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_mpquic_address_information_flags_b0_v4,
         { "V4", "pfcp.mpquic_address_information.flags.v4",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_mpquic_address_information_flags_b1_v6,
         { "V6", "pfcp.mpquic_address_information.flags.v6",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_mpquic_address_information_type,
         { "MPQUIC Proxy Type", "pfcp.mpquic_address_information.type",
             FT_UINT8, BASE_DEC, VALS(pfcp_mpquic_address_information_type_vals), 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mpquic_address_information_port,
         { "MPQUIC Proxy Port", "pfcp.mpquic_address_information.port",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mpquic_address_information_address_ipv4,
         { "MPQUIC Proxy IPv4 Address", "pfcp.mpquic_address_information.ipv4",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_mpquic_address_information_address_ipv6,
         { "MPQUIC Proxy IPv6 Address", "pfcp.mpquic_address_information.ipv6",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_transport_mode_value,
         { "Transport Mode Value", "pfcp.transport_mode.value",
             FT_UINT8, BASE_DEC, VALS(pfcp_transport_mode_type_vals), 0x0f,
             NULL, HFILL }
         },
 
         { &hf_pfcp_protocol_description_flags_b0_h264,
         { "H264", "pfcp.protocol_description.h264",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_protocol_description_flags_b1_rtp,
         { "RTP", "pfcp.protocol_description.rtp",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_protocol_description_flags_b2_srtp,
         { "SRTP", "pfcp.protocol_description.srtp",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
 
         { &hf_pfcp_reporting_suggestion_info_flags_b0_rurg,
         { "RURG", "pfcp.reporting_suggestion_info.rurg",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_tl_container,
         { "TL-Container", "pfcp.tl_container",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         /* Enterprise IEs */
         /* BBF */
         { &hf_pfcp_bbf_up_function_features_o7_b0_pppoe,
         { "PPPoE", "pfcp.bbf.up_function_features.pppoe",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             "PPPoE supported in DBNG-UP function", HFILL }
         },
         { &hf_pfcp_bbf_up_function_features_o7_b1_ipoe,
         { "IPoE", "pfcp.bbf.up_function_features.ipoe",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x02,
             "IPoE supported in DBNG-UP function", HFILL }
         },
         { &hf_pfcp_bbf_up_function_features_o7_b2_lac,
         { "LAC", "pfcp.bbf.up_function_features.lac",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x04,
             "LAC function supported in DBNG-UP function", HFILL }
         },
         { &hf_pfcp_bbf_up_function_features_o7_b3_lns,
         { "LNS", "pfcp.bbf.up_function_features.lns",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             "LNS function supported in DBNG-UP function", HFILL }
         },
         { &hf_pfcp_bbf_up_function_features_o7_b4_lcp_keepalive_offload,
         { "LCP keepalive offload", "pfcp.bbf.up_function_features.lcp_keepalive_offload",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x10,
             "PPP LCP echo supported in DBNG-UP function", HFILL }
         },
         { &hf_pfcp_bbf_up_function_features_o7_b5_iptv,
         { "IPTV", "pfcp.bbf.up_function_features.iptv",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x20,
             "DBNG-UP support of IP Multicast", HFILL }
         },
         { &hf_pfcp_bbf_up_function_features_o7_b6_nat_cp,
         { "NAT-CP", "pfcp.bbf.up_function_features.nat_cp",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x40,
             "NAT function supported in DBNG-CP function", HFILL }
         },
         { &hf_pfcp_bbf_up_function_features_o7_b7_nat_up,
         { "NAT-UP", "pfcp.bbf.up_function_features.nat_up",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x80,
             "NAT function supported in DBNG-UP function", HFILL }
         },
 
         { &hf_pfcp_bbf_logical_port_id,
         { "Logical Port", "pfcp.bbf.logical_port_id",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_logical_port_id_str,
         { "Logical Port", "pfcp.bbf.logical_port_id_str",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_outer_hdr_desc,
         { "BBF Outer Header Creation Description", "pfcp.bbf.outer_hdr_desc",
             FT_UINT16, BASE_DEC, VALS(pfcp_bbf_outer_hdr_desc_vals), 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_outer_hdr_creation_tunnel_id,
         { "L2TP Tunnel ID", "pfcp.bbf.outer_hdr_creation.tunnel_id",
             FT_UINT16, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_outer_hdr_creation_session_id,
         { "L2TP Session ID", "pfcp.bbf.outer_hdr_creation.session_id",
             FT_UINT16, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_out_hdr_desc,
         { "BBF Outer Header Removal Description", "pfcp.bbf.out_hdr_desc",
             FT_UINT8, BASE_DEC, VALS(pfcp_bbf_out_hdr_desc_vals), 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_pppoe_session_id,
         { "PPPoE Session ID", "pfcp.bbf.pppoe_session_id",
             FT_UINT16, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_ppp_protocol_flags,
         { "Flags", "pfcp.bbf.protocol_flags",
             FT_UINT8, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_ppp_protocol_b2_control,
         { "control", "pfcp.bbf.protocol_flags.control",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_ppp_protocol_b1_data,
         { "data", "pfcp.bbf.protocol_flags.data",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_ppp_protocol_b0_specific,
         { "specific", "pfcp.bbf.protocol_flags.specific",
             FT_BOOLEAN, 8, TFS(&tfs_present_not_present), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_ppp_protocol,
         { "protocol", "pfcp.bbf.protocol_flags.protocol",
             FT_UINT16, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_verification_timer_interval,
         { "Interval", "pfcp.bbf.verification_timer.interval",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_verification_timer_count,
         { "Count", "pfcp.bbf.verification_timer.count",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_ppp_lcp_magic_number_tx,
         { "PPP LCP Magic Number Tx", "pfcp.bbf.lcp_magic_number.tx",
             FT_UINT32, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_ppp_lcp_magic_number_rx,
         { "PPP LCP Magic Number Rx", "pfcp.bbf.lcp_magic_number.rx",
             FT_UINT32, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_mtu,
         { "MTU", "pfcp.bbf.mtu",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_l2tp_endp_flags,
         { "Flags", "pfcp.bbf.l2tp_endp_flags",
             FT_UINT8, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_l2tp_endp_flags_b2_ch,
         { "CH (CHOOSE)", "pfcp.bbf.l2tp_endp_flags.ch",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_l2tp_endp_flags_b1_v6,
         { "V6 (IPv6)", "pfcp.bbf.l2tp_endp_flags.v6",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_l2tp_endp_flags_b0_v4,
         { "V4 (IPv4)", "pfcp.bbf.l2tp_endp_flags.v4",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_l2tp_endp_id_tunnel_id,
         { "Tunnel ID", "pfcp.bbf.l2tp_endp.tunnel_id",
             FT_UINT16, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_l2tp_endp_id_ipv4,
         { "IPv4 address", "pfcp.bbf.l2tp_endp.ipv4_addr",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_l2tp_endp_id_ipv6,
         { "IPv6 address", "pfcp.bbf.l2tp_endp.ipv6_addr",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_l2tp_session_id,
         { "L2TP Session ID", "pfcp.bbf.bbf_l2tp_session_id",
             FT_UINT16, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_l2tp_type_flags,
         { "Flags", "pfcp.bbf.l2tp_type_flags",
             FT_UINT8, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_l2tp_type_flags_b0_t,
         { "T (TYPE)", "pfcp.bbf.l2tp_type_flags.t",
             FT_BOOLEAN, 8, TFS(&pfcp_bbf_l2tp_type_b0_t_tfs), 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_multicast_flags_o7_b1_routeralertoff,
         { "ROUTERALERTOFF", "pfcp.bbf.multicast_flags.routeralertoff",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_multicast_flags_o7_b0_fastleave,
         { "FASTLEAVE", "pfcp.bbf.multicast_flags.fastleave",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_multicast_query_param_robustness,
         { "Robustness count", "pfcp.bbf.multicast_query_parameters.robustness_count",
             FT_UINT8, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_multicast_query_param_query_interval,
         { "Query interval", "pfcp.bbf.multicast_query_parameters.query_interval",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_multicast_query_param_query_response_interval,
         { "Query response interval", "pfcp.bbf.multicast_query_parameters.query_response_interval",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_multicast_query_param_group_query_interval,
         { "Group-specific query interval", "pfcp.bbf.multicast_query_parameters.group_specific_query_interval",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_multicast_group_limit_max_joins,
         { "Maximum number of concurrent (S,G) joins allowed", "pfcp.bbf.multicast_group_limit.max_joins",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_apply_action_flags_b0_nat,
         { "NAT", "pfcp.bbf.apply_action_flags.nat",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_nat_external_port_range_start,
         { "Start", "pfcp.bbf.nat_external_port_range.start",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_nat_external_port_range_end,
         { "End", "pfcp.bbf.nat_external_port_range.end",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_nat_port_forward,
         { "NAT Port Forward", "pfcp.bbf.nat_port_forward",
             FT_NONE, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_nat_port_forward_inside_ip,
         { "Inside Address", "pfcp.bbf.nat_port_forward.inside_address",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_nat_port_forward_inside_port,
         { "Inside Port", "pfcp.bbf.nat_port_forward.inside_port",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_nat_port_forward_outside_port,
         { "Outside Port", "pfcp.bbf.nat_port_forward.outside_port",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_nat_port_forward_protocol,
         { "Protocol", "pfcp.bbf.nat_port_forward.protocol",
             FT_UINT8, BASE_DEC|BASE_EXT_STRING, &ipproto_val_ext, 0x0,
             NULL , HFILL
         }
         },
 
         { &hf_pfcp_bbf_reporting_trigger,
         { "Reporting Trigger", "pfcp.bbf.reporting_trigger",
             FT_UINT8, BASE_DEC, VALS(pfcp_bbf_reporting_trigger_vals), 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_dynamic_nat_block_port_range_start_port,
         { "Start", "pfcp.dynamic_nat_block_port_range.start",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_bbf_dynamic_nat_block_port_range_end_port,
         { "End", "pfcp.dynamic_nat_block_port_range.end",
             FT_UINT16, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
 
         { &hf_pfcp_bbf_event_time_stamp,
           { "Event Time Stamp", "pfcp.bbf.event_time_stamp",
             FT_ABSOLUTE_TIME, ABSOLUTE_TIME_NTP_UTC, NULL, 0x0,
             NULL, HFILL }
         },
 
         /* Travelping */
         { &hf_pfcp_enterprise_travelping_packet_measurement,
         { "Flags", "pfcp.travelping.volume_measurement",
             FT_UINT8, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_enterprise_travelping_packet_measurement_b0_tonop,
         { "TONOP", "pfcp.travelping.volume_measurement_flags.tonop",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_enterprise_travelping_packet_measurement_b1_ulnop,
         { "ULNOP", "pfcp.travelping.volume_measurement_flags.ulnop",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_enterprise_travelping_packet_measurement_b2_dlnop,
         { "DLNOP", "pfcp.travelping.volume_measurement_flags.dlnops",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_pkt_meas_tonop,
         { "Total Number of Packets", "pfcp.travelping.volume_measurement.tonop",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_pkt_meas_ulnop,
         { "Uplink Number of Packets", "pfcp.travelping.volume_measurement.ulnop",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_pkt_meas_dlnop,
         { "Downlink Number of Packets", "pfcp.travelping.volume_measurement.dlnop",
             FT_UINT64, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_build_id,
         { "Build Identifier", "pfcp.travelping.build_id",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_build_id_str,
         { "Build Identifier", "pfcp.travelping.build_id_str",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_now,
         { "Now", "pfcp.travelping.now",
             FT_ABSOLUTE_TIME, ABSOLUTE_TIME_NTP_UTC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_error_message,
         { "Error Message", "pfcp.travelping.error_message",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_error_message_str,
         { "Error Message", "pfcp.travelping.error_message_str",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_file_name,
         { "File Name", "pfcp.travelping.file_name",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_file_name_str,
         { "File Name", "pfcp.travelping.file_name_str",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_line_number,
         { "Line Number", "pfcp.travelping.line_number",
             FT_UINT32, BASE_DEC, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_ipfix_policy,
         { "IPFIX Policy", "pfcp.travelping.ipfix_policy",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_ipfix_policy_str,
         { "IPFIX Policy", "pfcp.travelping.ipfix_policy_str",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_trace_parent,
         { "Trace Parent", "pfcp.travelping.trace_parent",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_trace_parent_str,
         { "Trace Parent", "pfcp.travelping.trace_parent_str",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_trace_state,
         { "Trace State", "pfcp.travelping.trace_state",
             FT_BYTES, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_travelping_trace_state_str,
         { "Trace State", "pfcp.travelping.trace_state_str",
             FT_STRING, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
 
         /* Nokia */
 
         { &hf_pfcp_nokia_sap_template,
         { "SAP template", "pfcp.nokia.sap_template",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_group_iface_template,
         { "Group Interface Template", "pfcp.nokia.group_if_template",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_session_state_id,
         { "Session State Id", "pfcp.nokia.session_state_id",
             FT_UINT64, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_detailed_stats_key,
         { "Key", "pfcp.nokia.detailed_stats.key",
             FT_UINT32, BASE_HEX, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_detailed_stats_key_direction,
         { "Direction", "pfcp.nokia.detailed_stats.direction",
             FT_BOOLEAN, 32, TFS(&tfs_nokia_detailed_stats_ie), 0x80000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_detailed_stats_key_type,
         { "Type", "pfcp.nokia.detailed_stats.type",
             FT_BOOLEAN, 32, TFS(&tfs_nokia_detailed_stats_qp), 0x40000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_detailed_stats_key_object_id,
         { "Object id", "pfcp.nokia.detailed_stats.object_id",
             FT_UINT32, BASE_DEC, NULL, 0x003f0000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_detailed_stats_key_stat_mode,
         { "Stat mode", "pfcp.nokia.detailed_stats.stat_mode",
             FT_UINT32, BASE_DEC, NULL, 0x0000001f,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_detailed_stats_bitmap_item,
         { "length", "pfcp.nokia.detailed_stats.bitmap.len",
             FT_UINT64, BASE_DEC|BASE_VAL64_STRING, VALS64(nokia_detailed_stats_length_values), 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_detailed_stats_octets,
         { "Packets offered", "pfcp.nokia.detailed_stats.octets",
             FT_UINT64, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_detailed_error,
         { "Detailed Error", "pfcp.nokia.detailed_error",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_qos_override,
         { "Qos Override", "pfcp.nokia.qos_override",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_measurement_info,
         { "Flags", "pfcp.nokia.measurement_info",
             FT_UINT8, BASE_HEX, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_measurement_info_b0_det,
         { "DET (Detailed Statistics)", "pfcp.nokia.measurement_info.det",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_pfcpsmreq_flags,
         { "Flags", "pfcp.nokia.smreq_flags",
             FT_UINT8, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_pfcpsmreq_flags_b0_abs,
         { "ABS (Absolute modification request)", "pfcp.nokia.smreq_flags.abs",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_pfcpsmreq_flags_b1_audit,
         { "AUD (Auditing modification message)", "pfcp.nokia.smreq_flags.audit",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_up_function_features_bulk_audit,
         { "BLK_AUD (Bulk Audit)", "pfcp.nokia.up_function_features.blk_aud",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_up_function_features_sssg,
         { "SSSG (Shared Subnet Signaling)", "pfcp.nokia.up_function_features.sssg",
             FT_BOOLEAN, 8, TFS(&tfs_supported_not_supported), 0x08,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_filter_override_type,
         { "Filter Type", "pfcp.nokia.filter_override.type",
             FT_UINT8, BASE_HEX, VALS(nokia_filter_override_type_vals), 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_filter_override_name,
         { "Filter Override", "pfcp.nokia.filter_override.name",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_intermediate_destination,
         { "Intermediate Destination", "pfcp.nokia.intermediate_destination",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_nat_isa_members,
         { "Number of ISA members", "pfcp.nokia.nat_isa_members",
             FT_UINT8, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_pfcphb_flags,
         { "Flags", "pfcp.nokia.hb_flags",
             FT_UINT8, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_pfcphb_flags_b0_aud_r,
         { "AUDR (Mass Audit Request)", "pfcp.nokia.hb_flags.audr",
             FT_BOOLEAN, 8, NULL, 0x01,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_pfcphb_flags_b1_aud_s,
         { "AUDS (Mass Audit Start)", "pfcp.nokia.hb_flags.auds",
             FT_BOOLEAN, 8, NULL, 0x02,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_pfcphb_flags_b2_aud_e,
         { "AUDE (Mass Audit End)", "pfcp.nokia.hb_flags.aude",
             FT_BOOLEAN, 8, NULL, 0x04,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_lcp_request,
         { "LCP Request", "pfcp.nokia.l2tp.lcp_request",
             FT_BYTES, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_auth_type,
         { "L2TP Auth Type", "pfcp.nokia.l2tp.auth_type",
             FT_UINT8, BASE_HEX, VALS(nokia_l2tp_auth_type_vals), 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_auth_name,
         { "L2TP Auth Name", "pfcp.nokia.l2tp.auth_name",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_auth_id,
         { "L2TP Auth Id", "pfcp.nokia.l2tp.auth_id",
             FT_UINT8, BASE_HEX, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_auth_challenge,
         { "L2TP Auth Challenge", "pfcp.nokia.l2tp.auth_challenge",
             FT_BYTES, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_auth_response,
         { "L2TP Auth Response", "pfcp.nokia.l2tp.auth_response",
             FT_BYTES, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_tunnel_endpoint_ipv4_address,
         { "L2TP IPv4 Endpoint", "pfcp.nokia.l2tp.tunnel_endpoint.ipv4_addr",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_tunnel_endpoint_ipv6_address,
         { "L2TP IPv6 Endpoint", "pfcp.nokia.l2tp.tunnel_endpoint.ipv6_addr",
             FT_IPv6, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_client_auth_id,
         { "L2TP Client Auth Id", "pfcp.nokia.l2tp.client_auth_id",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_server_auth_id,
         { "L2TP Server Auth Id", "pfcp.nokia.l2tp.server_auth_id",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_password,
         { "L2TP Password", "pfcp.nokia.l2tp.password",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_assignment_id,
         { "L2TP Assignment Id", "pfcp.nokia.l2tp.assignment_id",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_private_group_id,
         { "L2TP Private Group Id", "pfcp.nokia.l2tp.private_group_id",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_tunnel_params_flags,
         { "Flags", "pfcp.nokia.l2tp.tunnel_params.flags",
             FT_UINT32, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_flags_b30_idle_timeout,
         {"Idle Timeout", "pfcp.nokia.l2tp.tunnel_params.flags.idle_timeout",
             FT_BOOLEAN, 32, NULL, 0x40000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_flags_b31_hello_interval,
         {"Hello Interval", "pfcp.nokia.l2tp.tunnel_params.flags.hello_interval",
             FT_BOOLEAN, 32, NULL, 0x80000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_flags_b29_session_limit,
         {"Session Limit", "pfcp.nokia.l2tp.tunnel_params.flags.session_limit",
             FT_BOOLEAN, 32, NULL, 0x20000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_flags_b28_preference,
         {"Preference", "pfcp.nokia.l2tp.tunnel_params.flags.preference",
             FT_BOOLEAN, 32, NULL, 0x10000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_flags_b27_df_bit,
         {"DF Bit", "pfcp.nokia.l2tp.tunnel_params.flags.df_bit",
             FT_BOOLEAN, 32, NULL, 0x08000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_flags_b26_challenge,
         {"Challenge", "pfcp.nokia.l2tp.tunnel_params.flags.challenge",
             FT_BOOLEAN, 32, NULL, 0x04000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_flags_b25_avp_hiding,
         {"AVP Hiding", "pfcp.nokia.l2tp.tunnel_params.flags.avp_hiding",
             FT_BOOLEAN, 32, NULL, 0x02000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_flags_b24_algorithm,
         {"Algorithm", "pfcp.nokia.l2tp.tunnel_params.flags.algorithm",
             FT_BOOLEAN, 32, NULL, 0x01000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_flags_b19_rx_window_size,
         {"RX Window Size", "pfcp.nokia.l2tp.tunnel_params.flags.rx_window_size",
             FT_BOOLEAN, 32, NULL, 0x00080000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_flags_b18_max_retries_not_estab,
         {"Max Retries Not Established", "pfcp.nokia.l2tp.tunnel_params.flags.max_retries_not_estab",
             FT_BOOLEAN, 32, NULL, 0x00040000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_flags_b17_max_retries_estab,
         {"Max Retries Established", "pfcp.nokia.l2tp.tunnel_params.flags.max_retries_estab",
             FT_BOOLEAN, 32, NULL, 0x00020000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_flags_b16_destruct_timeout,
         {"Destruct Timeout", "pfcp.nokia.l2tp.tunnel_params.flags.destruct_timeout",
             FT_BOOLEAN, 32, NULL, 0x00010000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_hello_interval,
         {"Hello Interval", "pfcp.nokia.l2tp.tunnel_params.hello_interval",
             FT_UINT24, BASE_DEC|BASE_SPECIAL_VALS, VALS(nokia_l2tp_params_infinite), 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_idle_timeout,
         {"Idle Timeout", "pfcp.nokia.l2tp.tunnel_params.idle_timeout",
             FT_UINT24, BASE_DEC|BASE_SPECIAL_VALS, VALS(nokia_l2tp_params_infinite), 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_session_limit,
         {"Session Limit", "pfcp.nokia.l2tp.tunnel_params.session_limit",
             FT_UINT24, BASE_DEC|BASE_SPECIAL_VALS, VALS(nokia_l2tp_params_infinite), 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_preference,
         {"Preference", "pfcp.nokia.l2tp.tunnel_params.preference",
             FT_UINT24, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_df_bit,
         {"DF Bit", "pfcp.nokia.l2tp.tunnel_params.df_bit",
             FT_UINT8, BASE_DEC, VALS(nokia_l2tp_params_never_always), 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_challenge,
         {"Challenge", "pfcp.nokia.l2tp.tunnel_params.challenge",
             FT_UINT8, BASE_DEC, VALS(nokia_l2tp_params_never_always), 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_avp_hiding,
         {"AVP Hiding", "pfcp.nokia.l2tp.tunnel_params.avp_hiding",
             FT_UINT8, BASE_DEC, VALS(nokia_l2tp_params_avp_hiding_vals), 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_algorithm,
         {"Algorithm", "pfcp.nokia.l2tp.tunnel_params.algorithm",
             FT_UINT8, BASE_DEC, VALS(nokia_l2tp_params_algorithm_vals), 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_rx_window_size,
         {"RX Window Size", "pfcp.nokia.l2tp.tunnel_params.rx_window_size",
             FT_UINT24, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_max_retries_not_estab,
         {"Max Retries Not Estab", "pfcp.nokia.l2tp.tunnel_params.max_retries_not_estab",
             FT_UINT24, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_max_retries_estab,
         {"Max Retries Estab", "pfcp.nokia.l2tp.tunnel_params.max_retries_estab",
             FT_UINT24, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_params_destruct_timeout,
         {"Destruct Timeout", "pfcp.nokia.l2tp.tunnel_params.destruct_timeout",
             FT_UINT24, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_local_tunnel_id,
         { "Local Tunnel Id", "pfcp.nokia.l2tp.local_tunnel_id",
             FT_UINT16, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_remote_tunnel_id,
         { "Remote Tunnel Id", "pfcp.nokia.l2tp.remote_tunnel_id",
             FT_UINT16, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_local_session_id,
         { "Local Session Id", "pfcp.nokia.l2tp.local_session_id",
             FT_UINT16, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_remote_session_id,
         { "Remote Session Id", "pfcp.nokia.l2tp.remote_session_id",
             FT_UINT16, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_l2tp_call_serial_num,
         { "Call Serial Number", "pfcp.nokia.l2tp.call_serial_num",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_snat_inside_ipv4_address,
         { "SNAT Inside IP", "pfcp.nokia.snat_inside_ip",
             FT_IPv4, BASE_NONE, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_circuit_id,
         { "Access Line Circuit Id", "pfcp.nokia.access_line.circuit_id",
             FT_BYTES, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_remote_id,
         { "Access Line Remote Id", "pfcp.nokia.access_line.remote_id",
             FT_BYTES, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags,
         { "Flags", "pfcp.nokia.access_line.params.flags",
             FT_UINT32, BASE_HEX, NULL, 0x0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b24_act_up,
         {"Act Up", "pfcp.nokia.access_line.params.flags.act_up",
             FT_BOOLEAN, 32, NULL, 0x01000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b25_act_down,
         {"Act Down", "pfcp.nokia.access_line.params.flags.act_down",
             FT_BOOLEAN, 32, NULL, 0x02000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b26_min_up,
         {"Min Up", "pfcp.nokia.access_line.params.flags.min_up",
             FT_BOOLEAN, 32, NULL, 0x04000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b27_min_down,
         {"Min Down", "pfcp.nokia.access_line.params.flags.min_down",
             FT_BOOLEAN, 32, NULL, 0x08000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b28_att_up,
         {"Att Up", "pfcp.nokia.access_line.params.flags.att_up",
             FT_BOOLEAN, 32, NULL, 0x10000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b29_att_down,
         {"Att Down", "pfcp.nokia.access_line.params.flags.att_down",
             FT_BOOLEAN, 32, NULL, 0x20000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b30_max_up,
         {"Max Up", "pfcp.nokia.access_line.params.flags.max_up",
             FT_BOOLEAN, 32, NULL, 0x40000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b31_max_down,
         {"Max Down", "pfcp.nokia.access_line.params.flags.max_down",
             FT_BOOLEAN, 32, NULL, 0x80000000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b16_min_up_lp,
         {"Min Up Lp", "pfcp.nokia.access_line.params.flags.min_up_lp",
             FT_BOOLEAN, 32, NULL, 0x00010000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b17_min_down_lp,
         {"Min Down Lp", "pfcp.nokia.access_line.params.flags.min_down_lp",
             FT_BOOLEAN, 32, NULL, 0x00020000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b18_max_inter_delay_up,
         {"Max Inter Delay Up", "pfcp.nokia.access_line.params.flags.max_inter_delay_up",
             FT_BOOLEAN, 32, NULL, 0x00040000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b19_act_inter_delay_up,
         {"Act Inter Delay Up", "pfcp.nokia.access_line.params.flags.act_inter_delay_up",
             FT_BOOLEAN, 32, NULL, 0x00080000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b20_max_inter_delay_down,
         {"Max Inter Delay Down", "pfcp.nokia.access_line.params.flags.max_inter_delay_down",
             FT_BOOLEAN, 32, NULL, 0x00100000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b21_act_inter_delay_down,
         {"Act Inter Delay Down", "pfcp.nokia.access_line.params.flags.act_inter_delay_down",
             FT_BOOLEAN, 32, NULL, 0x00200000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b22_access_loop_encap,
         {"Access Loop Encap", "pfcp.nokia.access_line.params.flags.access_loop_encap",
             FT_BOOLEAN, 32, NULL, 0x00400000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_flags_b23_iw_session,
         {"IW Session", "pfcp.nokia.access_line.params.flags.iw_session",
             FT_BOOLEAN, 32, NULL, 0x00800000,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_act_up,
         { "Act Up", "pfcp.nokia.access_line.params.act_up",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_act_down,
         { "Act Down", "pfcp.nokia.access_line.params.act_down",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_min_up,
         { "Min Up", "pfcp.nokia.access_line.params.min_up",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_min_down,
         { "Min Down", "pfcp.nokia.access_line.params.min_down",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_att_up,
         { "Att Up", "pfcp.nokia.access_line.params.att_up",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_att_down,
         { "Act Att Down", "pfcp.nokia.access_line.params.att_down",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_max_up,
         { "Max Up", "pfcp.nokia.access_line.params.max_up",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_max_down,
         { "Max Down", "pfcp.nokia.access_line.params.max_down",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_min_up_lp,
         { "Min Up Lp", "pfcp.nokia.access_line.params.min_up_lp",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_min_down_lp,
         { "Min Down Lp", "pfcp.nokia.access_line.params.min_down_lp",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_max_inter_delay_up,
         { "Max Inter Delay Up", "pfcp.nokia.access_line.params.max_inter_delay_up",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_act_inter_delay_up,
         { "Act Inter Delay Up", "pfcp.nokia.access_line.params.act_inter_delay_up",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_max_inter_delay_down,
         { "Max Inter Delay Down", "pfcp.nokia.access_line.params.max_inter_delay_down",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_act_inter_delay_down,
         { "Act Inter Delay Down", "pfcp.nokia.access_line.params.act_inter_delay_down",
             FT_UINT32, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_access_line_params_access_loop_encap,
         { "Access Loop Encap", "pfcp.nokia.access_line.params.access_loop_encap",
             FT_UINT24, BASE_DEC, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_acct_session_id,
         { "Accounting Session Id", "pfcp.nokia.acct_session_id",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
         { &hf_pfcp_nokia_fsg_template_name,
         { "FSG Template Name", "pfcp.nokia.fsg_template_name",
             FT_STRING, BASE_NONE, NULL, 0,
             NULL, HFILL }
         },
     };
 
     /* Setup protocol subtree array */
     int *ett[] = {
         &ett_pfcp,
         &ett_pfcp_flags,
         &ett_pfcp_ie,
         &ett_pfcp_unknown_enterprise_ie,
         &ett_pfcp_grouped_ie,
         &ett_pfcp_reporting_triggers,
         &ett_pfcp_up_function_features,
         &ett_pfcp_report_trigger,
         &ett_pfcp_flow_desc,
         &ett_pfcp_tos,
         &ett_pfcp_spi,
         &ett_pfcp_flow_label,
         &ett_pfcp_sdf_filter_id,
         &ett_pfcp_adf,
         &ett_pfcp_aurl,
         &ett_pfcp_adnp,
         /* Travelping */
         &ett_pfcp_enterprise_travelping_packet_measurement,
         &ett_pfcp_enterprise_travelping_error_report,
         &ett_pfcp_enterprise_travelping_created_nat_binding,
         &ett_pfcp_enterprise_travelping_trace_info,
         /* BBF */
         &ett_pfcp_bbf_ppp_protocol_flags,
         &ett_pfcp_bbf_l2tp_endp_flags,
         &ett_pfcp_bbf_l2tp_type_flags,
         &ett_pfcp_bbf_ppp_lcp_connectivity,
         &ett_pfcp_bbf_l2tp_tunnel,
         &ett_pfcp_bbf_nat_port_forward_list,
        /* Nokia */
         &ett_pfcp_nokia_detailed_stats_key,
         &ett_pfcp_nokia_detailed_stats_bitmap,
         &ett_pfcp_nokia_measurement_info,
         &ett_pfcp_nokia_pfcpsmreq_flags,
         &ett_pfcp_nokia_pfcphb_flags,
         &ett_pfcp_nokia_l2tp_tunnel_params_flags,
         &ett_pfcp_nokia_access_line_params_flags,
     };
 
     // Each IE gets its own subtree
     int* ie_ett[NUM_PFCP_IES - 1];
     for (unsigned i = 0; i < NUM_PFCP_IES - 1; i++) {
         ett_pfcp_elem[i] = -1;
         ie_ett[i] = &ett_pfcp_elem[i];
     }
 
     static ei_register_info ei[] = {
         { &ei_pfcp_ie_reserved,{ "pfcp.ie_id_reserved", PI_PROTOCOL, PI_ERROR, "Reserved IE value used", EXPFILL } },
         { &ei_pfcp_ie_data_not_decoded,{ "pfcp.ie_data_not_decoded", PI_UNDECODED, PI_NOTE, "IE data not decoded by WS yet", EXPFILL } },
         { &ei_pfcp_ie_not_decoded_null,{ "pfcp.ie_not_decoded_null", PI_UNDECODED, PI_NOTE, "IE not decoded yet", EXPFILL } },
         { &ei_pfcp_ie_not_decoded_too_large,{ "pfcp.ie_not_decoded", PI_UNDECODED, PI_NOTE, "IE not decoded yet(WS:IE id too large)", EXPFILL } },
         { &ei_pfcp_ie_encoding_error,{ "pfcp.ie_encoding_error", PI_PROTOCOL, PI_ERROR, "IE wrongly encoded", EXPFILL } },
     };
 
     module_t *module_pfcp;
     expert_module_t* expert_pfcp;
 
     proto_pfcp = proto_register_protocol("Packet Forwarding Control Protocol", "PFCP", "pfcp");
     pfcp_handle = register_dissector("pfcp", dissect_pfcp, proto_pfcp);
     module_pfcp = prefs_register_protocol(proto_pfcp, NULL);
 
     proto_register_field_array(proto_pfcp, hf_pfcp, array_length(hf_pfcp));
     proto_register_subtree_array(ett, array_length(ett));
     proto_register_subtree_array(ie_ett, array_length(ie_ett));
     expert_pfcp = expert_register_protocol(proto_pfcp);
     expert_register_field_array(expert_pfcp, ei, array_length(ei));
 
     /* Register dissector table for enterprise IE dissectors */
     pfcp_enterprise_ies_dissector_table = register_dissector_table("pfcp.enterprise_ies", "PFCP Enterprice IEs",
         proto_pfcp, FT_UINT32, BASE_DEC);
 
     pfcp_register_generic_ie_dissector(VENDOR_TRAVELPING, "pfcp_travelping_ies", "pfcp.ie.travelping", "Travelping IE Type", pfcp_travelping_ies, G_N_ELEMENTS(pfcp_travelping_ies));
     pfcp_register_generic_ie_dissector(VENDOR_BROADBAND_FORUM, "pfcp_bbf_ies", "pfcp.ie.bbf", "Broadband Forum IE Type", pfcp_bbf_ies, G_N_ELEMENTS(pfcp_bbf_ies));
     pfcp_register_generic_ie_dissector(VENDOR_NOKIA, "pfcp_nokia_ies", "pfcp.ie.nokia", "Nokia IE Type", pfcp_nokia_ies, G_N_ELEMENTS(pfcp_nokia_ies));
 
     prefs_register_bool_preference(module_pfcp, "track_pfcp_session", "Track PFCP session", "Track PFCP session", &g_pfcp_session);
     register_init_routine(pfcp_init);
     register_cleanup_routine(pfcp_cleanup);
 
 }
diff --git a/epan/dissectors/packet-rf4ce-profile.c b/epan/dissectors/packet-rf4ce-profile.c
index cc123534f4..e0b3fcd24f 100644
--- a/epan/dissectors/packet-rf4ce-profile.c
+++ b/epan/dissectors/packet-rf4ce-profile.c
@@ -671,7 +671,7 @@ static int hf_rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_reserved = -1
 
 static const true_false_string rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_trans_mode_vals = {
     "Broadcast Transmission",
-    "Unicast Ttransmission"
+    "Unicast Transmission"
 };
 
 static const true_false_string rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_dst_addr_mode_vals = {
@@ -801,37 +801,37 @@ static const value_string rf4ce_profile_cmd_client_notification_sub_type_vals[]
 static const value_string rf4ce_profile_cmd_key_exchange_sub_type_vals[] = {
     { RF4CE_PROFILE_CMD_KEY_EXCHANGE_SUB_TYPE_CHALLENGE,     "Challenge" },
     { RF4CE_PROFILE_CMD_KEY_EXCHANGE_SUB_TYPE_CHALLENGE_RSP, "Challenge Response" },
-    { RF4CE_PROFILE_CMD_KEY_EXCHANGE_SUB_TYPE_RSP,           "Reponse" },
+    { RF4CE_PROFILE_CMD_KEY_EXCHANGE_SUB_TYPE_RSP,           "Response" },
     { RF4CE_PROFILE_CMD_KEY_EXCHANGE_SUB_TYPE_CONFIRM,       "Confirm" },
     { 0, NULL }
 };
 
 #define RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_DEFAULT_SECRET_FLAG                   (0b0000000000000001)
 #define RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_INITIATOR_VENDOR_SPECIFIC_SECRET_FLAG (0b0000000000000010)
 #define RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_RESPONDER_VENDOR_SPECIFIC_SECRET_FLAG (0b0000000000000100)
 #define RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_RESERVED_FLAG                         (0b0000000011111000)
 #define RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_VENDOR_SPECIFIC_PARAMETER_FLAG        (0b1111111100000000)
 
 #define RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_MASK                                   \
     (RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_DEFAULT_SECRET_FLAG                       \
      | RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_INITIATOR_VENDOR_SPECIFIC_SECRET_FLAG   \
      | RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_RESPONDER_VENDOR_SPECIFIC_SECRET_FLAG   \
      | RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_RESERVED_FLAG                           \
      | RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_VENDOR_SPECIFIC_PARAMETER_FLAG)
 
 /* RF4CE - Vendor ID list */
 #define RF4CE_VENDOR_ID_RESERVED          0x0000
 #define RF4CE_VENDOR_ID_PANASONIC         0x0001
 #define RF4CE_VENDOR_ID_SONY              0x0002
 #define RF4CE_VENDOR_ID_SAMSUNG           0x0003
 #define RF4CE_VENDOR_ID_PHILIPS           0x0004
 #define RF4CE_VENDOR_ID_FREESCALE         0x0005
 #define RF4CE_VENDOR_ID_OKI_SEMICONDUCTOR 0x0006
 #define RF4CE_VENDOR_ID_TEXAS_INSTRUMENTS 0x0007
                                        /* 0x0008 - 0xfff0 Reserved */
 #define RF4CE_VENDOR_ID_TEST_VENDOR_1     0xfff1
 #define RF4CE_VENDOR_ID_TEST_VENDOR_2     0xfff2
 #define RF4CE_VENDOR_ID_TEST_VENDOR_3     0xfff3
                                        /* 0xfff4 - 0xffff Reserved */
 
 #define RF4CE_VENDOR_ID_MASK              0x0007
@@ -890,652 +890,652 @@ static void dissect_rf4ce_profile_zrc20_action_data(tvbuff_t *tvb, proto_tree *t
 void proto_register_rf4ce_profile(void)
 {
     static hf_register_info hf[] = {
         {&hf_rf4ce_profile_fcf,
          {"Frame Control Field", "rf4ce-profile.fcf",
           FT_UINT8, BASE_HEX,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_fcf_cmd_id,
          {"Command ID", "rf4ce-profile.fcf.cmd_id",
           FT_UINT8, BASE_HEX,
           VALS(rf4ce_profile_fcf_cmd_id_vals), RF4CE_PROFILE_FCF_CMD_ID_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_zrc20_fcf_cmd_id,
          {"Command ID", "rf4ce-profile.fcf.cmd_id",
           FT_UINT8, BASE_HEX,
           VALS(rf4ce_zrc20_fcf_cmd_id_vals), RF4CE_PROFILE_FCF_CMD_ID_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_fcf_reserved,
          {"Reserved", "rf4ce-profile.fcf.reserved",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_FCF_RESERVED_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_fcf_cmd_frame,
          {"Command Frame", "rf4ce-profile.fcf.cmd_frame",
           FT_UINT8, BASE_HEX,
           VALS(rf4ce_profile_fcf_cmd_frame_vals), RF4CE_PROFILE_FCF_CMD_FRAME_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_fcf_data_pending,
          {"Data Pending", "rf4ce-profile.fcf.data_pending",
           FT_BOOLEAN, 8,
           TFS(&tfs_yes_no), RF4CE_PROFILE_FCF_DATA_PENDING_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_generic_resp_status,
          {"Status", "rf4ce-profile.cmd.generic_resp.status",
           FT_UINT8, BASE_HEX,
           VALS(hf_rf4ce_profile_cmd_generic_resp_status_vals), 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_configuration_complete_status,
          {"Status", "rf4ce-profile.cmd.configuration_complete.status",
           FT_UINT8, BASE_HEX,
           VALS(hf_rf4ce_profile_cmd_configuration_complete_status_vals), 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_heartbeat_trigger,
          {"Trigger", "rf4ce-profile.cmd.heartbeat.trigger",
           FT_UINT8, BASE_HEX,
           VALS(hf_rf4ce_profile_cmd_heartbeat_trigger_vals), 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_attr_id,
          {"Attribute ID", "rf4ce-profile.gdp.attr.id",
           FT_UINT8, BASE_HEX,
           VALS(rf4ce_profile_gdp_attr_vals), 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_attr_id,
          {"Attribute ID", "rf4ce-profile.zrc20.attr.id",
           FT_UINT8, BASE_HEX,
           VALS(rf4ce_profile_zrc20_attr_vals), 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_attr_entry_id,
          {"Entry Identifier", "rf4ce-profile.zrc20.attr.entry_identifier",
           FT_BYTES, SEP_COLON,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_attr_status,
          {"Status", "rf4ce-profile.attr.status",
           FT_UINT8, BASE_HEX,
           VALS(hf_rf4ce_profile_attr_status_vals), 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_attr_length,
          {"Length", "rf4ce-profile.attr.length",
           FT_UINT8, BASE_DEC,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_attr_value,
          {"Value", "rf4ce-profile.attr.value",
           FT_BYTES, SEP_COLON,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_ident_cap,
          {"Identification Capabilities", "rf4ce-profile.attr.ident_cap",
           FT_UINT8, BASE_HEX,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_ident_cap_reserved,
          {"Reserved", "rf4ce-profile.attr.ident_cap.reserved",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_GDP_IDENT_CAP_RESERVED_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_ident_cap_support_flash_light,
          {"Support Flash Light", "rf4ce-profile.attr.ident_cap.support_flash_light",
           FT_BOOLEAN, SEP_DOT,
           NULL, RF4CE_PROFILE_GDP_IDENT_CAP_SUPPORT_FLASH_LIGHT_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_ident_cap_support_make_short_sound,
          {"Support Make Short Sound", "rf4ce-profile.attr.ident_cap.support_make_short_sound",
           FT_BOOLEAN, SEP_DOT,
           NULL, RF4CE_PROFILE_GDP_IDENT_CAP_SUPPORT_MAKE_SHORT_SOUND_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_ident_cap_support_vibrate,
          {"Support Vibrate", "rf4ce-profile.attr.ident_cap.support_vibrate",
           FT_BOOLEAN, SEP_DOT,
           NULL, RF4CE_PROFILE_GDP_IDENT_CAP_SUPPORT_VIBRATE_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_ident_cap_reserved2,
          {"Reserved", "rf4ce-profile.attr.ident_cap.reserved2",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_GDP_IDENT_CAP_RESERVED2_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_constraints_methods_num,
          {"Polling Methods Number", "rf4ce-profile.attr.poll_constraints.methods_num",
           FT_UINT8, BASE_DEC,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_constraints_polling_rec_method_id,
          {"Polling Method ID", "rf4ce-profile.attr.poll_constraints.polling_record.method_id",
           FT_UINT8, BASE_HEX,
           VALS(rf4ce_profile_gdp_poll_constraints_polling_rec_method_id_vals), 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_constraints_polling_rec_polling_trig_cap,
          {"Polling Trigger Capabilities", "rf4ce-profile.attr.poll_constraints.polling_record.polling_trig_cap",
           FT_UINT16, BASE_HEX,
           NULL, RF4CE_PROFILE_GDP_POLL_CONSTRAINTS_POLLING_REC_POLLING_TRIG_CAP_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_constraints_polling_rec_polling_trig_cap_tbased,
          {"Time based polling capable", "rf4ce-profile.attr.poll_constraints.polling_record.polling_trig_cap.tbased",
           FT_BOOLEAN, 16,
           TFS(&tfs_enabled_disabled), RF4CE_PROFILE_GDP_POLL_CONSTRAINTS_POLLING_REC_POLLING_TRIG_CAP_TBASED_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_constraints_polling_rec_polling_trig_cap_on_k_press,
          {"Polling On Key Press Capable", "rf4ce-profile.attr.poll_constraints.polling_record.polling_trig_cap.on_k_press",
           FT_BOOLEAN, 16,
           TFS(&tfs_enabled_disabled), RF4CE_PROFILE_GDP_POLL_CONSTRAINTS_POLLING_REC_POLLING_TRIG_CAP_ON_K_PRESS_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_constraints_polling_rec_polling_trig_cap_on_pick_up,
          {"Polling On Pick Up Capable", "rf4ce-profile.attr.poll_constraints.polling_record.polling_trig_cap.on_pick_up",
           FT_BOOLEAN, 16,
           TFS(&tfs_enabled_disabled), RF4CE_PROFILE_GDP_POLL_CONSTRAINTS_POLLING_REC_POLLING_TRIG_CAP_ON_PICK_UP_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_constraints_polling_rec_polling_trig_cap_on_reset,
          {"Polling On Reset Capable", "rf4ce-profile.attr.poll_constraints.polling_record.polling_trig_cap.on_reset",
           FT_BOOLEAN, 16,
           TFS(&tfs_enabled_disabled), RF4CE_PROFILE_GDP_POLL_CONSTRAINTS_POLLING_REC_POLLING_TRIG_CAP_ON_RESET_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_constraints_polling_rec_polling_trig_cap_on_micro_act,
          {"Polling On Microphone Activity Capable", "rf4ce-profile.attr.poll_constraints.polling_record.polling_trig_cap.on_micro_act",
           FT_BOOLEAN, 16,
           TFS(&tfs_enabled_disabled), RF4CE_PROFILE_GDP_POLL_CONSTRAINTS_POLLING_REC_POLLING_TRIG_CAP_ON_MICRO_ACT_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_constraints_polling_rec_polling_trig_cap_on_user_act,
          {"Polling On Other User Activity Capable", "rf4ce-profile.attr.poll_constraints.polling_record.polling_trig_cap.on_user_act",
           FT_BOOLEAN, 16,
           TFS(&tfs_enabled_disabled), RF4CE_PROFILE_GDP_POLL_CONSTRAINTS_POLLING_REC_POLLING_TRIG_CAP_ON_USER_ACT_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_constraints_polling_rec_polling_trig_cap_reserved,
          {"Reserved", "rf4ce-profile.attr.poll_constraints.polling_record.polling_trig_cap.reserved",
           FT_UINT16, BASE_HEX,
           NULL, RF4CE_PROFILE_GDP_POLL_CONSTRAINTS_POLLING_REC_POLLING_TRIG_CAP_RESERVED_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_constraints_polling_rec_min_polling_key_press_cnt,
          {"Minimum Polling Key Press Counter", "rf4ce-profile.attr.poll_constraints.polling_record.min_polling_key_press_cnt",
           FT_UINT8, BASE_DEC,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_constraints_polling_rec_max_polling_key_press_cnt,
          {"Maximum Polling Key Press Counter", "rf4ce-profile.attr.poll_constraints.polling_record.max_polling_key_press_cnt",
           FT_UINT8, BASE_DEC,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_constraints_polling_rec_min_polling_time_interval,
          {"Minimum Polling Time Interval", "rf4ce-profile.attr.poll_constraints.polling_record.min_polling_time_interval",
           FT_UINT32, BASE_DEC,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_constraints_polling_rec_max_polling_time_interval,
          {"Maximum Polling Time Interval", "rf4ce-profile.attr.poll_constraints.polling_record.max_polling_time_interval",
           FT_UINT32, BASE_DEC,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_configuration_method_id,
          {"Polling Method ID", "rf4ce-profile.attr.poll_configuration.method_id",
           FT_UINT8, BASE_HEX,
           VALS(rf4ce_profile_gdp_poll_constraints_polling_rec_method_id_vals), 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_configuration_polling_trig_conf,
          {"Polling Trigger Configuration", "rf4ce-profile.attr.poll_configuration.polling_trig_conf",
           FT_UINT16, BASE_HEX,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_configuration_polling_trig_conf_tbased,
          {"Time Based Polling", "rf4ce-profile.attr.poll_configuration.polling_trig_conf.tbased",
           FT_BOOLEAN, 16,
           TFS(&tfs_enabled_disabled), RF4CE_PROFILE_GDP_POLL_CONFIGURATION_POLLING_TRIG_CONF_TBASED_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_configuration_polling_trig_conf_on_k_press,
          {"Polling on Key Press", "rf4ce-profile.attr.poll_configuration.polling_trig_conf.on_k_press",
           FT_BOOLEAN, 16,
           TFS(&tfs_enabled_disabled), RF4CE_PROFILE_GDP_POLL_CONFIGURATION_POLLING_TRIG_CONF_ON_K_PRESS_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_configuration_polling_trig_conf_on_pick_up,
          {"Polling on Pick up", "rf4ce-profile.attr.poll_configuration.polling_trig_conf.on_pick_up",
           FT_BOOLEAN, 16,
           TFS(&tfs_enabled_disabled), RF4CE_PROFILE_GDP_POLL_CONFIGURATION_POLLING_TRIG_CONF_ON_PICK_UP_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_configuration_polling_trig_conf_on_reset,
          {"Polling on Reset", "rf4ce-profile.attr.poll_configuration.polling_trig_conf.on_reset",
           FT_BOOLEAN, 16,
           TFS(&tfs_enabled_disabled), RF4CE_PROFILE_GDP_POLL_CONFIGURATION_POLLING_TRIG_CONF_ON_RESET_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_configuration_polling_trig_conf_on_micro_act,
          {"Polling on Microphone Activity", "rf4ce-profile.attr.poll_configuration.polling_trig_conf.on_micro_act",
           FT_BOOLEAN, 16,
           TFS(&tfs_enabled_disabled), RF4CE_PROFILE_GDP_POLL_CONFIGURATION_POLLING_TRIG_CONF_ON_MICRO_ACT_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_configuration_polling_trig_conf_on_user_act,
          {"Polling on User Activity", "rf4ce-profile.attr.poll_configuration.polling_trig_conf.on_user_act",
           FT_BOOLEAN, 16,
           TFS(&tfs_enabled_disabled), RF4CE_PROFILE_GDP_POLL_CONFIGURATION_POLLING_TRIG_CONF_ON_USER_ACT_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_configuration_polling_trig_conf_reserved,
          {"Reserved", "rf4ce-profile.attr.poll_configuration.polling_trig_conf.reserved",
           FT_UINT16, BASE_HEX,
           NULL, RF4CE_PROFILE_GDP_POLL_CONFIGURATION_POLLING_TRIG_CONF_RESERVED_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_configuration_polling_key_press_cnt,
          {"Polling Key Press Counter", "rf4ce-profile.attr.poll_configuration.polling_key_press_cnt",
           FT_UINT8, BASE_DEC,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_configuration_polling_time_interval,
          {"Polling Time Interval", "rf4ce-profile.attr.poll_configuration.polling_time_interval",
           FT_UINT32, BASE_DEC,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_gdp_poll_configuration_polling_timeout,
          {"Polling Timeout", "rf4ce-profile.attr.poll_configuration.polling_timeout",
           FT_UINT8, BASE_DEC,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_mappable_actions_action_dev_type,
          {"Action Device Type", "rf4ce-profile.attr.mappable_actions.action_dev_type",
           FT_UINT8, BASE_HEX,
           VALS(rf4ce_profile_device_type_vals), 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_mappable_actions_action_bank,
          {"Action Bank", "rf4ce-profile.attr.mappable_actions.action_bank",
           FT_UINT8, BASE_HEX,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_mappable_actions_action_code,
          {"Action Code", "rf4ce-profile.attr.mappable_actions.action_code",
           FT_UINT8, BASE_HEX,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_mapping_flags,
          {"Mapping Flags", "rf4ce-profile.attr.action_mappings.mapping_flags",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_MAPPING_FLAGS_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_mapping_flags_rf_specified,
          {"RF Specified", "rf4ce-profile.attr.action_mappings.mapping_flags.rf_specified",
           FT_BOOLEAN, SEP_DOT,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_MAPPING_FLAGS_RF_SPECIFIED_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_mapping_flags_ir_specified,
          {"IR Specified", "rf4ce-profile.attr.action_mappings.mapping_flags.ir_specified",
           FT_BOOLEAN, SEP_DOT,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_MAPPING_FLAGS_IR_SPECIFIED_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_mapping_flags_rf_descr_first,
          {"RF Descriptor First", "rf4ce-profile.attr.action_mappings.mapping_flags.rf_descr_first",
           FT_BOOLEAN, SEP_DOT,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_MAPPING_FLAGS_RF_DESCR_FIRST_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_mapping_flags_reserved,
          {"Reserved", "rf4ce-profile.attr.action_mappings.mapping_flags.reserved",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_MAPPING_FLAGS_RESERVED_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_mapping_flags_use_default,
          {"Use Default", "rf4ce-profile.attr.action_mappings.mapping_flags.use_default",
           FT_BOOLEAN, SEP_DOT,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_MAPPING_FLAGS_USE_DEFAULT_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_mapping_flags_permanent,
          {"Permanent", "rf4ce-profile.attr.action_mappings.mapping_flags.permanent",
           FT_BOOLEAN, SEP_DOT,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_MAPPING_FLAGS_PERMANENT_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_rf_conf,
          {"RF Config", "rf4ce-profile.attr.action_mappings.rf_descr.rf_conf",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_RF_CONF_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_rf_conf_min_num_of_trans,
          {"Minimum Number of Transmissions", "rf4ce-profile.attr.action_mappings.rf_descr.rf_conf.min_num_of_trans",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_RF_CONF_MIN_NUM_OF_TRANS_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_rf_conf_keep_trans_until_key_release,
          {"Keep Transmitting Until Key Release", "rf4ce-profile.attr.action_mappings.rf_descr.rf_conf.keep_trans_until_key_release",
           FT_BOOLEAN, SEP_DOT,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_RF_CONF_KEEP_TRANS_UNTIL_KEY_RELEASE_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_rf_conf_short_rf_retry,
          {"Short RF Retry", "rf4ce-profile.attr.action_mappings.rf_descr.rf_conf.short_rf_retry",
           FT_BOOLEAN, SEP_DOT,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_RF_CONF_SHORT_RF_RETRY_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_rf_conf_atomic_action,
          {"Atomic Action", "rf4ce-profile.attr.action_mappings.rf_descr.rf_conf.atomic_action",
           FT_BOOLEAN, SEP_DOT,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_RF_CONF_ATOMIC_ACTION_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_rf_conf_reserved,
          {"Reserved", "rf4ce-profile.attr.action_mappings.rf_descr.rf_conf.reserved",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_RF_CONF_RESERVED_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts,
          {"TX Options", "rf4ce-profile.attr.action_mappings.rf_descr.tx_opts",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_TX_OPTS_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_trans_mode,
          {"Transmission Mode", "rf4ce-profile.attr.action_mappings.rf_descr.tx_opts.trans_mode",
           FT_BOOLEAN, SEP_DOT,
           TFS(&rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_trans_mode_vals), RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_TX_OPTS_TRANS_MODE_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_dst_addr_mode,
          {"Destination Addressing Mode", "rf4ce-profile.attr.action_mappings.rf_descr.tx_opts.dst_addr_mode",
           FT_BOOLEAN, SEP_DOT,
           TFS(&rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_dst_addr_mode_vals), RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_TX_OPTS_DST_ADDR_MODE_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_ack_mode,
          {"Acknowledgement Mode", "rf4ce-profile.attr.action_mappings.rf_descr.tx_opts.ack_mode",
           FT_BOOLEAN, SEP_DOT,
           TFS(&rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_ack_mode_vals), RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_TX_OPTS_ACK_MODE_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_sec_mode,
          {"Security Mode", "rf4ce-profile.attr.action_mappings.rf_descr.tx_opts.sec_mode",
           FT_BOOLEAN, SEP_DOT,
           TFS(&rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_sec_mode_vals), RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_TX_OPTS_SEC_MODE_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_ch_ag_mode,
          {"Channel Agility Mode", "rf4ce-profile.attr.action_mappings.rf_descr.tx_opts.ch_ag_mode",
           FT_BOOLEAN, SEP_DOT,
           TFS(&rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_ch_ag_mode_vals), RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_TX_OPTS_CH_AG_MODE_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_ch_norm_mode,
          {"Channel Normalization Mode", "rf4ce-profile.attr.action_mappings.rf_descr.tx_opts.ch_norm_mode",
           FT_BOOLEAN, SEP_DOT,
           TFS(&rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_ch_norm_mode_vals), RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_TX_OPTS_CH_NORM_MODE_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_payload_mode,
          {"Payload Mode", "rf4ce-profile.attr.action_mappings.rf_descr.tx_opts.payload_mode",
           FT_BOOLEAN, SEP_DOT,
           TFS(&rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_payload_mode_vals), RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_TX_OPTS_PAYLOAD_MODE_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts_reserved,
          {"Reserved", "rf4ce-profile.attr.action_mappings.rf_descr.tx_opts.reserved",
           FT_BOOLEAN, SEP_DOT,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_RF_DESCR_TX_OPTS_RESERVED_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_rf_descr_action_data_len,
          {"Action Data Length", "rf4ce-profile.attr.action_mappings.rf_descr.action_data_len",
           FT_UINT8, BASE_DEC,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_ir_descr_ir_conf,
          {"IR Config", "rf4ce-profile.attr.action_mappings.ir_descr.ir_conf",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_IR_DESCR_IR_CONF_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_ir_descr_ir_conf_vendor_specific,
          {"Vendor Specific", "rf4ce-profile.attr.action_mappings.ir_descr.ir_conf.vendor_specific",
           FT_BOOLEAN, SEP_DOT,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_IR_DESCR_IR_CONF_VENDOR_SPECIFIC_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_ir_descr_ir_conf_reserved,
          {"Reserved", "rf4ce-profile.attr.action_mappings.ir_descr.ir_conf.reserved",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_ZRC20_ACTION_MAPPINGS_IR_DESCR_IR_CONF_RESERVED_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_ir_descr_ir_vendor_id,
-         {"IR Venodr ID", "rf4ce-profile.attr.action_mappings.ir_descr.ir_vendor_id",
+         {"IR Vendor ID", "rf4ce-profile.attr.action_mappings.ir_descr.ir_vendor_id",
           FT_UINT16, BASE_HEX,
           VALS(rf4ce_vendor_id_vals), RF4CE_VENDOR_ID_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_ir_descr_ir_code_len,
          {"IR Code Length", "rf4ce-profile.attr.action_mappings.ir_descr.ir_code_len",
           FT_UINT8, BASE_DEC,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_action_mappings_ir_descr_ir_code,
          {"IR Code", "rf4ce-profile.attr.action_mappings.ir_descr.ir_code",
           FT_BYTES, SEP_COLON,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_zrc20_irdb_vendor_support_vendor_id,
          {"Vendor ID", "rf4ce-profile.attr.irdb_vendor_support.vendor_id",
           FT_UINT16, BASE_HEX,
           VALS(rf4ce_vendor_id_vals), RF4CE_VENDOR_ID_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_check_validation_sub_type,
          {"Sub-type", "rf4ce-profile.cmd.check_validation.sub_type",
           FT_UINT8, BASE_HEX,
           VALS(rf4ce_profile_cmd_check_validation_sub_type_vals), 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_check_validation_control,
          {"Validation Control", "rf4ce-profile.cmd.check_validation.validation_control",
           FT_UINT8, BASE_HEX,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_check_validation_status,
          {"Validation Status", "rf4ce-profile.cmd.check_validation.validation_status",
           FT_UINT8, BASE_HEX,
           VALS(rf4ce_profile_cmd_check_validation_status_vals), 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_client_notification_sub_type,
          {"Sub-ype", "rf4ce-profile.cmd.client_notification.sub_type",
           FT_UINT8, BASE_HEX,
           VALS(rf4ce_profile_cmd_client_notification_sub_type_vals), 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_client_notification_identify_flags,
          {"Identify Flags", "rf4ce-profile.cmd.client_notification.identify_flags",
           FT_UINT8, BASE_HEX,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_client_notification_identify_flags_stop_on_action,
          {"Stop on Action", "rf4ce-profile.cmd.client_notification.identify_flags.stop_on_action",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_CMD_CL_NOTIF_SUB_TYPE_IDENTIFY_STOP_ON_ACTION_FLAG,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_client_notification_identify_flags_flash_light,
          {"Flash Light", "rf4ce-profile.cmd.client_notification.identify_flags.flash_light",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_CMD_CL_NOTIF_SUB_TYPE_IDENTIFY_FLASH_LIGHT_FLAG,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_client_notification_identify_flags_make_sound,
          {"Make Sound", "rf4ce-profile.cmd.client_notification.identify_flags.make_sound",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_CMD_CL_NOTIF_SUB_TYPE_IDENTIFY_MAKE_SOUND_FLAG,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_client_notification_identify_flags_vibrate,
          {"Vibrate", "rf4ce-profile.cmd.client_notification.identify_flags.vibrate",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_CMD_CL_NOTIF_SUB_TYPE_IDENTIFY_VIBRATE_FLAG,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_client_notification_identify_flags_reserved,
          {"Reserved", "rf4ce-profile.cmd.client_notification.identify_flags.reserved",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_PROFILE_CMD_CL_NOTIF_SUB_TYPE_IDENTIFY_RESERVED_FLAG,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_client_notification_identify_time,
          {"Identify Time", "rf4ce-profile.cmd.client_notification.identify_time",
           FT_UINT16, BASE_DEC,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_key_exchange_sub_type,
          {"Sub-type", "rf4ce-profile.cmd.key_exchange.sub_type",
           FT_UINT8, BASE_HEX,
           VALS(rf4ce_profile_cmd_key_exchange_sub_type_vals), 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_key_exchange_flags,
          {"Key Exchange Flags", "rf4ce-profile.cmd.key_exchange.flags",
           FT_UINT16, BASE_HEX,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_key_exchange_flags_default_secret,
          {"Default Secret", "rf4ce-profile.cmd.key_exchange.flags.default_secret",
           FT_UINT16, BASE_HEX,
           NULL, RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_DEFAULT_SECRET_FLAG,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_key_exchange_flags_initiator_vendor_specific_secret,
          {"Initiator Vendor Specific Secret", "rf4ce-profile.cmd.key_exchange.flags.initiator_vendor_specific_secret",
           FT_UINT16, BASE_HEX,
           NULL, RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_INITIATOR_VENDOR_SPECIFIC_SECRET_FLAG,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_key_exchange_flags_responder_vendor_specific_secret,
          {"Responder Vendor Specific Secret", "rf4ce-profile.cmd.key_exchange.flags.responder_vendor_specific_secret",
           FT_UINT16, BASE_HEX,
           NULL, RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_RESPONDER_VENDOR_SPECIFIC_SECRET_FLAG,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_key_exchange_flags_reserved,
          {"Reserved", "rf4ce-profile.cmd.key_exchange.flags.reserved",
           FT_UINT16, BASE_HEX,
           NULL, RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_RESERVED_FLAG,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_key_exchange_flags_vendor_specific_parameter,
          {"Vendor Specific Parameter", "rf4ce-profile.cmd.key_exchange.flags.vendor_specific_parameter",
           FT_UINT16, BASE_HEX,
           NULL, RF4CE_PROFILE_CMD_KEY_EXCHANGE_FLAGS_VENDOR_SPECIFIC_PARAMETER_FLAG,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_key_exchange_rand_a,
          {"Rand-A", "rf4ce-profile.cmd.key_exchange.rand_a",
           FT_BYTES, SEP_COLON,
           NULL, 0x00,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_key_exchange_rand_b,
          {"Rand-B", "rf4ce-profile.cmd.key_exchange.rand_b",
           FT_BYTES, SEP_COLON,
           NULL, 0x00,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_key_exchange_tag_b,
          {"TAG-B", "rf4ce-profile.cmd.key_exchange.tag_b",
           FT_BYTES, SEP_COLON,
           NULL, 0x00,
           NULL, HFILL}},
         {&hf_rf4ce_profile_cmd_key_exchange_tag_a,
          {"TAG-A", "rf4ce-profile.cmd.key_exchange.tag_a",
           FT_BYTES, SEP_COLON,
           NULL, 0x00,
           NULL, HFILL}},
 #if 0
         {&hf_rf4ce_zrc20_cmd_actions,
          {"Actions", "rf4ce-profile.zrc20.cmd.actions",
           FT_BYTES, SEP_COLON,
           NULL, 0x00,
           NULL, HFILL}},
 #endif
         {&hf_rf4ce_zrc20_cmd_actions_action_control,
          {"Action Control", "rf4ce-profile.zrc20.cmd.actions.action_control",
           FT_UINT8, BASE_HEX,
           NULL, 0x00,
           NULL, HFILL}},
         {&hf_rf4ce_zrc20_cmd_actions_action_control_action_type,
          {"Action Type", "rf4ce-profile.zrc20.cmd.actions.action_control.action_type",
           FT_UINT8, BASE_HEX,
           VALS(rf4ce_zrc20_cmd_actions_action_control_action_type_vals), RF4CE_ZRC20_CMD_ACTIONS_ACTION_CONTROL_ACTION_TYPE_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_zrc20_cmd_actions_action_control_reserved,
          {"Reserved", "rf4ce-profile.zrc20.cmd.actions.action_control.reserved",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_ZRC20_CMD_ACTIONS_ACTION_CONTROL_RESERVED,
           NULL, HFILL}},
         {&hf_rf4ce_zrc20_cmd_actions_action_control_modifier_bits_gui,
          {"GUI Modifier", "rf4ce-profile.zrc20.cmd.actions.action_control.modifier_bits.gui",
           FT_BOOLEAN, 8,
           TFS(&tfs_yes_no), RF4CE_ZRC20_CMD_ACTIONS_ACTION_CONTROL_MODIFIER_BITS_GUI,
           NULL, HFILL}},
         {&hf_rf4ce_zrc20_cmd_actions_action_control_modifier_bits_alt,
          {"ALT Modifier", "rf4ce-profile.zrc20.cmd.actions.action_control.modifier_bits.alt",
           FT_BOOLEAN, 8,
           TFS(&tfs_yes_no), RF4CE_ZRC20_CMD_ACTIONS_ACTION_CONTROL_MODIFIER_BITS_ALT,
           NULL, HFILL}},
         {&hf_rf4ce_zrc20_cmd_actions_action_control_modifier_bits_shift,
          {"SHIFT Modifier", "rf4ce-profile.zrc20.cmd.actions.action_control.modifier_bits.shift",
           FT_BOOLEAN, 8,
           TFS(&tfs_yes_no), RF4CE_ZRC20_CMD_ACTIONS_ACTION_CONTROL_MODIFIER_BITS_SHIFT,
           NULL, HFILL}},
         {&hf_rf4ce_zrc20_cmd_actions_action_control_modifier_bits_ctrl,
          {"CTRL Modifier", "rf4ce-profile.zrc20.cmd.actions.action_control.modifier_bits.ctrl",
           FT_BOOLEAN, 8,
           TFS(&tfs_yes_no), RF4CE_ZRC20_CMD_ACTIONS_ACTION_CONTROL_MODIFIER_BITS_CTRL,
           NULL, HFILL}},
         {&hf_rf4ce_zrc20_cmd_actions_action_data_payload_length,
          {"Payload Length", "rf4ce-profile.zrc20.cmd.actions.action_data.payload_length",
           FT_UINT8, BASE_HEX,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_zrc20_cmd_actions_action_data_action_bank,
          {"Action Bank", "rf4ce-profile.zrc20.cmd.actions.action_data.action_bank",
           FT_UINT8, BASE_HEX,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_zrc20_cmd_actions_action_data_action_code,
          {"Action Code", "rf4ce-profile.zrc20.cmd.actions.action_data.action_code",
           FT_UINT8, BASE_HEX,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_zrc20_cmd_actions_action_data_action_vendor,
          {"Action Vendor", "rf4ce-profile.zrc20.cmd.actions.action_data.action_vendor",
           FT_UINT16, BASE_HEX,
           VALS(rf4ce_vendor_id_vals), RF4CE_VENDOR_ID_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_zrc20_cmd_actions_action_data_action_payload,
          {"Action Payload", "rf4ce-profile.zrc20.cmd.actions.action_data.action_payload",
           FT_BYTES, SEP_COLON,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_zrc10_fcf,
          {"Frame Control Field", "rf4ce-profile.zrc10.fcf",
           FT_UINT8, BASE_HEX,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_zrc10_fcf_cmd_id,
          {"Command ID", "rf4ce-profile.zrc10.fcf.cmd_id",
           FT_UINT8, BASE_HEX,
           VALS(rf4ce_zrc10_fcf_cmd_id_vals), RF4CE_ZRC10_FCF_CMD_ID_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_zrc10_fcf_reserved,
          {"Reserved", "rf4ce-profile.zrc10.fcf.reserved",
           FT_UINT8, BASE_HEX,
           NULL, RF4CE_ZRC10_FCF_RESERVED_MASK,
           NULL, HFILL}},
         {&hf_rf4ce_zrc10_cmd_common_rc_command_code,
          {"RC Command Code", "rf4ce-profile.zrc10.cmd_common.rc_command_code",
           FT_UINT8, BASE_HEX,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_zrc10_cmd_common_rc_command_payload,
          {"RC Command Payload", "rf4ce-profile.zrc10.cmd_common.rc_command_payload",
           FT_BYTES, SEP_COLON,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_zrc10_cmd_disc_reserved,
          {"Reserved", "rf4ce-profile.zrc10.cmd.discovery.reserved",
           FT_UINT8, BASE_HEX,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_zrc10_cmd_disc_rsp_supported_commands,
          {"Supported Commands", "rf4ce-profile.zrc10.cmd_disc_rsp.supported_commands",
           FT_BYTES, SEP_COLON,
           NULL, 0x0,
           NULL, HFILL}},
         {&hf_rf4ce_profile_unparsed_payload,
          {"Unparsed Profile Payload", "rf4ce-profile.unparsed_payload",
           FT_BYTES, SEP_COLON,
           NULL, 0x0,
           NULL, HFILL}},
     };
 
     /* Setup protocol subtree array */
     static gint *ett[] = {
         &ett_rf4ce_profile,
         &ett_rf4ce_profile_cmd_frame,
         &ett_rf4ce_profile_attrs,
         &ett_rf4ce_profile_attrs_sub,
         &ett_rf4ce_profile_zrc20_ident_cap,
         &ett_rf4ce_profile_zrc20_mappable_actions_entry,
         &ett_rf4ce_profile_zrc20_action_control,
         &ett_rf4ce_profile_zrc20_action_mappings_flags,
         &ett_rf4ce_profile_zrc20_action_mappings_rf_descr,
         &ett_rf4ce_profile_zrc20_action_mappings_rf_descr_rf_conf,
         &ett_rf4ce_profile_zrc20_action_mappings_rf_descr_tx_opts,
         &ett_rf4ce_profile_zrc20_action_mappings_ir_descr,
         &ett_rf4ce_profile_zrc20_action_mappings_ir_descr_ir_conf,
         &ett_rf4ce_profile_gdp_poll_constraints_polling_rec,
         &ett_rf4ce_profile_gdp_poll_constraints_polling_rec_polling_trig_cap,
         &ett_rf4ce_profile_gdp_poll_configuration_polling_trig_conf,
         &ett_rf4ce_profile_action_records,
         &ett_rf4ce_profile_action_records_sub,
         &ett_rf4ce_profile_zrc10_supported_commands,
         &ett_rf4ce_profile_zrc10_supported_commands_sub};
 
     proto_rf4ce_profile = proto_register_protocol("RF4CE Profile", "RF4CE Profile", "rf4ce_profile");
     proto_register_field_array(proto_rf4ce_profile, hf, array_length(hf));
     proto_register_subtree_array(ett, array_length(ett));
 
     rf4ce_profile_dissector_table = register_dissector_table("rf4ce.profile", "RF4CE Profile", proto_rf4ce_profile, FT_NONE, BASE_NONE);
     rf4ce_profile_handle = register_dissector("rf4ce_profile", dissect_rf4ce_profile_common, proto_rf4ce_profile);
 }
diff --git a/epan/dissectors/packet-vnc.c b/epan/dissectors/packet-vnc.c
index 80cdcff385..dd1d83b998 100644
--- a/epan/dissectors/packet-vnc.c
+++ b/epan/dissectors/packet-vnc.c
@@ -3575,1343 +3575,1343 @@ void
 proto_register_vnc(void)
 {
 	module_t *vnc_module; /* To handle our preferences */
 	expert_module_t* expert_vnc;
 
 	/* Setup list of header fields */
 	static hf_register_info hf[] = {
 		{ &hf_vnc_padding,
 		  { "Padding", "vnc.padding",
 		    FT_NONE, BASE_NONE, NULL, 0x0,
 		    "Unused space", HFILL }
 		},
 
 		{ &hf_vnc_server_proto_ver,
 		  { "Server protocol version", "vnc.server_proto_ver",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "VNC protocol version on server", HFILL }
 		},
 		{ &hf_vnc_client_proto_ver,
 		  { "Client protocol version", "vnc.client_proto_ver",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "VNC protocol version on client", HFILL }
 		},
 		{ &hf_vnc_num_security_types,
 		  { "Number of security types", "vnc.num_security_types",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Number of security (authentication) types supported by the server", HFILL }
 		},
 		{ &hf_vnc_security_type,
 		  { "Security type", "vnc.security_type",
 		    FT_UINT8, BASE_DEC, VALS(vnc_security_types_vs), 0x0,
 		    "Security types offered by the server (VNC versions => 3.007)", HFILL }
 		},
 		{ &hf_vnc_server_security_type,
 		  { "Security type", "vnc.server_security_type",
 		    FT_UINT32, BASE_DEC, VALS(vnc_security_types_vs), 0x0,
 		    "Security type mandated by the server", HFILL }
 		},
 		{ &hf_vnc_client_security_type,
 		  { "Security type selected", "vnc.client_security_type",
 		    FT_UINT8, BASE_DEC, VALS(vnc_security_types_vs), 0x0,
 		    "Security type selected by the client", HFILL }
 		},
 		{ &hf_vnc_tight_num_tunnel_types,
 		  { "Number of supported tunnel types",  "vnc.num_tunnel_types",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "Number of tunnel types for TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_tunnel_type_code,
 		  { "Tunnel type code", "vnc.tunnel_type_code",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "Tunnel type code specific to TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_tunnel_type_vendor,
 		  { "Tunnel type vendor", "vnc.tunnel_type_vendor",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Tunnel type vendor specific to TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_tunnel_type_signature,
 		  { "Tunnel type signature", "vnc.tunnel_type_signature",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Tunnel type signature specific to TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_num_auth_types,
 		  { "Number of supported authentication types", "vnc.num_auth_types",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "Authentication types specific to TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_auth_code,
 		  { "Authentication code", "vnc.tight_auth_code",
 		    FT_UINT32, BASE_DEC, VALS(vnc_security_types_vs), 0x0,
 		    "Authentication code specific to TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_server_message_type,
 		  { "Server message type (TightVNC)", "vnc.tight_server_message_type",
 		    FT_INT32, BASE_DEC, NULL, 0x0,
 		    "Server message type specific to TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_server_vendor,
 		  { "Server vendor code", "vnc.server_vendor",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Server vendor code specific to TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_signature,
 		  { "Signature", "vnc.signature",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_tight_server_name,
 		  { "Server name", "vnc.server_name",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Server name specific to TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_client_message_type,
 		  { "Client message type (TightVNC)", "vnc.tight_client_message_type",
 		    FT_INT32, BASE_DEC, NULL, 0x0,
 		    "Client message type specific to TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_client_vendor,
 		  { "Client vendor code", "vnc.client_vendor",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Client vendor code specific to TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_client_name,
 		  { "Client name", "vnc.client_name",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Client name specific to TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_encoding_type,
 		  { "Encoding type", "vnc.encoding_type",
 		    FT_INT32, BASE_DEC, VALS(encoding_types_vs), 0x0,
 		    "Encoding type specific to TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_encoding_vendor,
 		  { "Encoding vendor code", "vnc.encoding_vendor",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Encoding vendor code specific to TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_encoding_name,
 		  { "Encoding name", "vnc.encoding_name",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Encoding name specific to TightVNC", HFILL }
 		},
 		{ &hf_vnc_tight_reset_stream0,
 		  { "Reset compression stream 0", "vnc.tight_reset_stream0",
 		    FT_BOOLEAN, BASE_NONE, NULL, 0x0,
 		    "Tight compression, reset compression stream 0", HFILL }
 		},
 		{ &hf_vnc_tight_reset_stream1,
 		  { "Reset compression stream 1", "vnc.tight_reset_stream1",
 		    FT_BOOLEAN, BASE_NONE, NULL, 0x0,
 		    "Tight compression, reset compression stream 1", HFILL }
 		},
 		{ &hf_vnc_tight_reset_stream2,
 		  { "Reset compression stream 2", "vnc.tight_reset_stream2",
 		    FT_BOOLEAN, BASE_NONE, NULL, 0x0,
 		    "Tight compression, reset compression stream 2", HFILL }
 		},
 		{ &hf_vnc_tight_reset_stream3,
 		  { "Reset compression stream 3", "vnc.tight_reset_stream3",
 		    FT_BOOLEAN, BASE_NONE, NULL, 0x0,
 		    "Tight compression, reset compression stream 3", HFILL }
 		},
 		{ &hf_vnc_tight_rect_type,
 		  { "Rectangle type", "vnc.tight_rect_type",
 		    FT_UINT8, BASE_HEX, NULL, 0x0,
 		    "Tight compression, rectangle type", HFILL }
 		},
 		{ &hf_vnc_tight_image_len,
 		  { "Image data length", "vnc.tight_image_len",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "Tight compression, length of image data", HFILL }
 		},
 		{ &hf_vnc_tight_image_data,
 		  { "Image data", "vnc.tight_image_data",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Tight compression, image data", HFILL }
 		},
 		{ &hf_vnc_tight_fill_color,
 		  { "Fill color (RGB)", "vnc.tight_fill_color",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Tight compression, fill color for solid rectangle", HFILL }
 		},
 		{ &hf_vnc_tight_filter_flag,
 		  { "Explicit filter flag", "vnc.tight_filter_flag",
 		    FT_BOOLEAN, BASE_NONE, NULL, 0x0,
 		    "Tight compression, explicit filter flag", HFILL }
 		},
 		{ &hf_vnc_tight_filter_id,
 		  { "Filter ID", "vnc.tight_filter_id",
 		    FT_UINT8, BASE_DEC, VALS(tight_filter_ids_vs), 0x0,
 		    "Tight compression, filter ID", HFILL }
 		},
 		{ &hf_vnc_tight_palette_num_colors,
 		  { "Number of colors in palette", "vnc.tight_palette_num_colors",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Tight compression, number of colors in rectangle's palette", HFILL }
 		},
 		{ &hf_vnc_tight_palette_data,
 		  { "Palette data", "vnc.tight_palette_data",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Tight compression, palette data for a rectangle", HFILL }
 		},
 		{ &hf_vnc_auth_challenge,
 		  { "Authentication challenge", "vnc.auth_challenge",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Random authentication challenge from server to client", HFILL }
 		},
 		{ &hf_vnc_auth_response,
 		  { "Authentication response", "vnc.auth_response",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Client's encrypted response to the server's authentication challenge", HFILL }
 		},
 		{ &hf_vnc_auth_result,
 		  { "Authentication result", "vnc.auth_result",
 		    FT_BOOLEAN, 32, TFS(&auth_result_tfs), 0x1,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_auth_error_length,
 		  { "Length of authentication error", "vnc.auth_error_len",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "Authentication error length (present only if the authentication result is fail)", HFILL }
 		},
 		{ &hf_vnc_auth_error,
 		  { "Authentication error", "vnc.auth_error",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Authentication error (present only if the authentication result is fail)", HFILL }
 		},
 		{ &hf_vnc_ard_auth_generator,
 		  { "Generator", "vnc.ard_auth_generator",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 			"Generator for Diffie-Hellman key exchange", HFILL }
 		},
 		{ &hf_vnc_ard_auth_key_len,
 		  { "Key length", "vnc.ard_auth_key_len",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 			"Diffie-Hellman key length", HFILL }
 		},
 		{ &hf_vnc_ard_auth_modulus,
 		  { "Prime modulus", "vnc.ard_auth_modulus",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 			"Prime modulus for Diffie-Hellman key exchange", HFILL }
 		},
 		{ &hf_vnc_ard_auth_server_key,
 		  { "Server public key", "vnc.ard_auth_server_key",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 			"Server's public Diffie-Hellman key", HFILL }
 		},
 		{ &hf_vnc_ard_auth_credentials,
 		  { "Encrypted credentials", "vnc.ard_auth_credentials",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 			"Encrypted client username and password", HFILL }
 		},
 		{ &hf_vnc_ard_auth_client_key,
 		  { "Client public key", "vnc.ard_auth_client_key",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 			"Client's public Diffie-Hellman key", HFILL }
 		},
 		{ &hf_vnc_vencrypt_server_major_ver,
 		  { "VeNCrypt server major version", "vnc.vencrypt_server_major_ver",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_vencrypt_server_minor_ver,
 		  { "VeNCrypt server minor version", "vnc.vencrypt_server_minor_ver",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_vencrypt_client_major_ver,
 		  { "VeNCrypt client major version", "vnc.vencrypt_client_major_ver",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_vencrypt_client_minor_ver,
 		  { "VeNCrypt client minor version", "vnc.vencrypt_client_minor_ver",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_vencrypt_version_ack,
 		  { "VeNCrypt version ack", "vnc.vencrypt_version_ack",
 		    FT_BOOLEAN, 8, TFS(&tfs_error_ok), 0xFF,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_vencrypt_auth_type,
 		  { "VeNCrypt authentication type", "vnc.vencrypt_auth_type",
 		    FT_UINT32, BASE_DEC, VALS(vnc_vencrypt_auth_types_vs), 0x0,
 		    "Authentication type specific to VeNCrypt", HFILL }
 		},
 		{ &hf_vnc_vencrypt_num_auth_types,
 		  { "VeNCrypt Number of supported authentication types", "vnc.vencrypt_num_auth_types",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_vencrypt_auth_type_ack,
 		  { "VeNCrypt Authorization type ack", "vnc.vencrypt_auth_type_ack",
 		    FT_BOOLEAN, 8, TFS(&tfs_ok_error), 0xFF,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_share_desktop_flag,
 		  { "Share desktop flag", "vnc.share_desktop_flag",
 		    FT_BOOLEAN, BASE_NONE, NULL, 0x0,
 		    "Client's desire to share the server's desktop with other clients", HFILL }
 		},
 		{ &hf_vnc_width,
 		  { "Framebuffer width", "vnc.width",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Width of the framebuffer (screen) in pixels", HFILL }
 		},
 		{ &hf_vnc_height,
 		  { "Framebuffer height", "vnc.height",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Height of the framebuffer (screen) in pixels", HFILL }
 		},
 		{ &hf_vnc_server_bits_per_pixel,
 		  { "Bits per pixel", "vnc.server_bits_per_pixel",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Number of bits used by server for each pixel value on the wire from the server", HFILL }
 		},
 		{ &hf_vnc_server_depth,
 		  { "Depth", "vnc.server_depth",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Number of useful bits in the pixel value on server", HFILL }
 		},
 		{ &hf_vnc_server_big_endian_flag,
 		  { "Big endian flag", "vnc.server_big_endian_flag",
 		    FT_BOOLEAN, BASE_NONE, NULL, 0x0,
 		    "True if multi-byte pixels are interpreted as big endian by server", HFILL }
 		},
 		{ &hf_vnc_server_true_color_flag,
 		  { "True color flag", "vnc.server_true_color_flag",
 		    FT_BOOLEAN, BASE_NONE, NULL, 0x0,
 		    "If true, then the next six items specify how to extract the red, green and blue intensities from the pixel value on the server.", HFILL }
 		},
 		{ &hf_vnc_server_red_max,
 		  { "Red maximum", "vnc.server_red_max",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Maximum red value on server as n: 2^n - 1", HFILL }
 		},
 		{ &hf_vnc_server_green_max,
 		  { "Green maximum", "vnc.server_green_max",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Maximum green value on server as n: 2^n - 1", HFILL }
 		},
 		{ &hf_vnc_server_blue_max,
 		  { "Blue maximum", "vnc.server_blue_max",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Maximum blue value on server as n: 2^n - 1", HFILL }
 		},
 		{ &hf_vnc_server_red_shift,
 		  { "Red shift", "vnc.server_red_shift",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Number of shifts needed to get the red value in a pixel to the least significant bit on the server", HFILL }
 		},
 		{ &hf_vnc_server_green_shift,
 		  { "Green shift", "vnc.server_green_shift",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Number of shifts needed to get the green value in a pixel to the least significant bit on the server", HFILL }
 		},
 		{ &hf_vnc_server_blue_shift,
 		  { "Blue shift", "vnc.server_blue_shift",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Number of shifts needed to get the blue value in a pixel to the least significant bit on the server", HFILL }
 		},
 		{ &hf_vnc_desktop_name_len,
 		  { "Desktop name length", "vnc.desktop_name_len",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "Length of desktop name in bytes", HFILL }
 		},
 		{ &hf_vnc_desktop_screen_num,
 		  { "Number of screens", "vnc.screen_num",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_desktop_screen_id,
 		  { "Screen ID", "vnc.screen_id",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "ID of screen", HFILL }
 		},
 		{ &hf_vnc_desktop_screen_x,
 		  { "Screen X position", "vnc.screen_x",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "X coordinate of screen", HFILL }
 		},
 		{ &hf_vnc_desktop_screen_y,
 		  { "Screen Y position", "vnc.screen_y",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Y coordinate of screen", HFILL }
 		},
 		{ &hf_vnc_desktop_screen_width,
 		  { "Screen width", "vnc.screen_width",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Width of screen", HFILL }
 		},
 		{ &hf_vnc_desktop_screen_height,
 		  { "Screen height", "vnc.screen_height",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Height of screen", HFILL }
 		},
 		{ &hf_vnc_desktop_screen_flags,
 		  { "Screen flags", "vnc.screen_flags",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "Flags of screen", HFILL }
 		},
 		{ &hf_vnc_desktop_name,
 		  { "Desktop name", "vnc.desktop_name",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Name of the VNC desktop on the server", HFILL }
 		},
 		{ &hf_vnc_num_server_message_types,
 		  { "Server message types", "vnc.num_server_message_types",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Unknown", HFILL } /* XXX - Needs description */
 		},
 		{ &hf_vnc_num_client_message_types,
 		  { "Client message types", "vnc.num_client_message_types",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Unknown", HFILL } /* XXX - Needs description */
 		},
 		{ &hf_vnc_num_encoding_types,
 		  { "Encoding types", "vnc.num_encoding_types",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Unknown", HFILL } /* XXX - Needs description */
 		},
 		{ &hf_vnc_client_message_type,
 		  { "Client Message Type", "vnc.client_message_type",
 		    FT_UINT8, BASE_DEC, VALS(vnc_client_message_types_vs), 0x0,
 		    "Message type from client", HFILL }
 		},
 		{ &hf_vnc_client_bits_per_pixel,
 		  { "Bits per pixel", "vnc.client_bits_per_pixel",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Number of bits used by server for each pixel value on the wire from the client", HFILL }
 		},
 		{ &hf_vnc_client_depth,
 		  { "Depth", "vnc.client_depth",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Number of useful bits in the pixel value on client", HFILL }
 		},
 		{ &hf_vnc_client_big_endian_flag,
 		  { "Big endian flag", "vnc.client_big_endian_flag",
 		    FT_BOOLEAN, BASE_NONE, NULL, 0x0,
 		    "True if multi-byte pixels are interpreted as big endian by client", HFILL }
 		},
 		{ &hf_vnc_client_true_color_flag,
 		  { "True color flag", "vnc.client_true_color_flag",
 		    FT_BOOLEAN, BASE_NONE, NULL, 0x0,
 		    "If true, then the next six items specify how to extract the red, green and blue intensities from the pixel value on the client.", HFILL }
 		},
 		{ &hf_vnc_client_red_max,
 		  { "Red maximum", "vnc.client_red_max",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Maximum red value on client as n: 2^n - 1", HFILL }
 		},
 		{ &hf_vnc_client_green_max,
 		  { "Green maximum", "vnc.client_green_max",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Maximum green value on client as n: 2^n - 1", HFILL }
 		},
 		{ &hf_vnc_client_blue_max,
 		  { "Blue maximum", "vnc.client_blue_max",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Maximum blue value on client as n: 2^n - 1", HFILL }
 		},
 		{ &hf_vnc_client_red_shift,
 		  { "Red shift", "vnc.client_red_shift",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Number of shifts needed to get the red value in a pixel to the least significant bit on the client", HFILL }
 		},
 		{ &hf_vnc_client_green_shift,
 		  { "Green shift", "vnc.client_green_shift",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Number of shifts needed to get the green value in a pixel to the least significant bit on the client", HFILL }
 		},
 		{ &hf_vnc_client_blue_shift,
 		  { "Blue shift", "vnc.client_blue_shift",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Number of shifts needed to get the blue value in a pixel to the least significant bit on the client", HFILL }
 		},
 
 		/* Client Key Event */
 		{ &hf_vnc_key_down,
 		  { "Key down", "vnc.key_down",
 		    FT_BOOLEAN, BASE_NONE, TFS(&tfs_yes_no), 0x0,
 		    "Specifies whether the key is being pressed or not", HFILL }
 		},
 		{ &hf_vnc_key,
 		  { "Key", "vnc.key",
 		    FT_UINT32, BASE_HEX | BASE_EXT_STRING, &x11_keysym_vals_source_ext, 0x0, /* keysym_vals_source_exr is from packet-x11.c */
 		    "Key being pressed/depressed", HFILL }
 		},
 
 		/* Client Pointer Event */
 		{ &hf_vnc_button_1_pos,
 		  { "Mouse button #1 position", "vnc.button_1_pos",
 		    FT_BOOLEAN, 8, TFS(&tfs_pressed_not_pressed), 0x1,
 		    "Whether mouse button #1 is being pressed or not", HFILL }
 		},
 		{ &hf_vnc_button_2_pos,
 		  { "Mouse button #2 position", "vnc.button_2_pos",
 		    FT_BOOLEAN, 8, TFS(&tfs_pressed_not_pressed), 0x2,
 		    "Whether mouse button #2 is being pressed or not", HFILL }
 		},
 		{ &hf_vnc_button_3_pos,
 		  { "Mouse button #3 position", "vnc.button_3_pos",
 		    FT_BOOLEAN, 8, TFS(&tfs_pressed_not_pressed), 0x4,
 		    "Whether mouse button #3 is being pressed or not", HFILL }
 		},
 		{ &hf_vnc_button_4_pos,
 		  { "Mouse button #4 position", "vnc.button_4_pos",
 		    FT_BOOLEAN, 8, TFS(&tfs_pressed_not_pressed), 0x8,
 		    "Whether mouse button #4 is being pressed or not", HFILL }
 		},
 		{ &hf_vnc_button_5_pos,
 		  { "Mouse button #5 position", "vnc.button_5_pos",
 		    FT_BOOLEAN, 8, TFS(&tfs_pressed_not_pressed), 0x10,
 		    "Whether mouse button #5 is being pressed or not", HFILL }
 		},
 		{ &hf_vnc_button_6_pos,
 		  { "Mouse button #6 position", "vnc.button_6_pos",
 		    FT_BOOLEAN, 8, TFS(&tfs_pressed_not_pressed), 0x20,
 		    "Whether mouse button #6 is being pressed or not", HFILL }
 		},
 		{ &hf_vnc_button_7_pos,
 		  { "Mouse button #7 position", "vnc.button_7_pos",
 		    FT_BOOLEAN, 8, TFS(&tfs_pressed_not_pressed), 0x40,
 		    "Whether mouse button #7 is being pressed or not", HFILL }
 		},
 		{ &hf_vnc_button_8_pos,
 		  { "Mouse button #8 position", "vnc.button_8_pos",
 		    FT_BOOLEAN, 8, TFS(&tfs_pressed_not_pressed), 0x80,
 		    "Whether mouse button #8 is being pressed or not", HFILL }
 		},
 		{ &hf_vnc_pointer_x_pos,
 		  { "X position", "vnc.pointer_x_pos",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Position of mouse cursor on the x-axis", HFILL }
 		},
 		{ &hf_vnc_pointer_y_pos,
 		  { "Y position", "vnc.pointer_y_pos",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Position of mouse cursor on the y-axis", HFILL }
 		},
 		{ &hf_vnc_encoding_num,
 		  { "Number of encodings", "vnc.client_set_encodings_num",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Number of encodings used to send pixel data from server to client", HFILL }
 		},
 		{ &hf_vnc_client_set_encodings_encoding_type,
 		  { "Encoding type", "vnc.client_set_encodings_encoding_type",
 		    FT_INT32, BASE_DEC, VALS(encoding_types_vs), 0x0,
 		    "Type of encoding used to send pixel data from server to client", HFILL }
 		},
 
 		/* Client Framebuffer Update Request */
 		{ &hf_vnc_update_req_incremental,
 		  { "Incremental update", "vnc.update_req_incremental",
 		    FT_BOOLEAN, BASE_NONE, NULL, 0x0,
 		    "Specifies if the client wants an incremental update instead of a full one", HFILL }
 		},
 		{ &hf_vnc_update_req_x_pos,
 		  { "X position", "vnc.update_req_x_pos",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "X position of framebuffer (screen) update requested", HFILL }
 		},
 		{ &hf_vnc_update_req_y_pos,
 		  { "Y position", "vnc.update_req_y_pos",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Y position of framebuffer (screen) update request", HFILL }
 		},
 		{ &hf_vnc_update_req_width,
 		  { "Width", "vnc.update_req_width",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Width of framebuffer (screen) update request", HFILL }
 		},
 		{ &hf_vnc_update_req_height,
 		  { "Height", "vnc.update_req_height",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Height of framebuffer (screen) update request", HFILL }
 		},
 		{ &hf_vnc_client_cut_text_len,
 		  { "Length", "vnc.client_cut_text_len",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "Length of client's copy/cut text (clipboard) string in bytes", HFILL }
 		},
 		{ &hf_vnc_client_cut_text,
 		  { "Text", "vnc.client_cut_text",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Text string in the client's copy/cut text (clipboard)", HFILL }
 		},
 
 
 		/********** Server Message Types **********/
 		{ &hf_vnc_server_message_type,
 		  { "Server Message Type", "vnc.server_message_type",
 		    FT_UINT8, BASE_DEC, VALS(vnc_server_message_types_vs), 0x0,
 		    "Message type from server", HFILL }
 		},
 
 		{ &hf_vnc_rectangle_num,
 		  { "Number of rectangles", "vnc.fb_update_num_rects",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Number of rectangles of this server framebuffer update", HFILL }
 		},
 
 		{ &hf_vnc_fb_update_x_pos,
 		  { "X position", "vnc.fb_update_x_pos",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "X position of this server framebuffer update", HFILL }
 		},
 
 		{ &hf_vnc_fb_update_y_pos,
 		  { "Y position", "vnc.fb_update_y_pos",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Y position of this server framebuffer update", HFILL }
 		},
 
 		{ &hf_vnc_fb_update_width,
 		  { "Width", "vnc.fb_update_width",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Width of this server framebuffer update", HFILL }
 		},
 
 		{ &hf_vnc_fb_update_height,
 		  { "Height", "vnc.fb_update_height",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Height of this server framebuffer update", HFILL }
 		},
 
 		{ &hf_vnc_fb_update_encoding_type,
 		  { "Encoding type", "vnc.fb_update_encoding_type",
 		    FT_INT32, BASE_DEC, VALS(encoding_types_vs), 0x0,
 		    "Encoding type of this server framebuffer update", HFILL }
 		},
 
 		/* Cursor encoding */
 		{ &hf_vnc_cursor_x_fore_back,
 		  { "X Cursor foreground RGB / background RGB", "vnc.cursor_x_fore_back",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "RGB values for the X cursor's foreground and background", HFILL }
 		},
 
 		{ &hf_vnc_cursor_encoding_pixels,
 		  { "Cursor encoding pixels", "vnc.cursor_encoding_pixels",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Cursor encoding pixel data", HFILL }
 		},
 
 		{ &hf_vnc_cursor_encoding_bitmask,
 		  { "Cursor encoding bitmask", "vnc.cursor_encoding_bitmask",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Cursor encoding pixel bitmask", HFILL }
 		},
 
 		/* Raw Encoding */
 		{ &hf_vnc_raw_pixel_data,
 		  { "Pixel data", "vnc.raw_pixel_data",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Raw pixel data.", HFILL }
 		},
 
 		/* CopyRect Encoding*/
 		{ &hf_vnc_copyrect_src_x_pos,
 		  { "Source x position", "vnc.copyrect_src_x_pos",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "X position of the rectangle to copy from", HFILL }
 		},
 
 		{ &hf_vnc_copyrect_src_y_pos,
 		  { "Source y position", "vnc.copyrect_src_y_pos",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Y position of the rectangle to copy from", HFILL }
 		},
 
 		/* RRE Encoding */
 		{ &hf_vnc_rre_num_subrects,
 		  { "Number of subrectangles", "vnc.rre_num_subrects",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "Number of subrectangles contained in this encoding type", HFILL }
 		},
 
 		{ &hf_vnc_rre_bg_pixel,
 		  { "Background pixel value", "vnc.rre_bg_pixel",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    NULL, HFILL }
 		},
 
 		{ &hf_vnc_rre_subrect_pixel,
 		  { "Pixel value", "vnc.rre_subrect_pixel",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Subrectangle pixel value", HFILL }
 		},
 
 		{ &hf_vnc_rre_subrect_x_pos,
 		  { "X position", "vnc.rre_subrect_x_pos",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Position of this subrectangle on the x axis", HFILL }
 		},
 
 		{ &hf_vnc_rre_subrect_y_pos,
 		  { "Y position", "vnc.rre_subrect_y_pos",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Position of this subrectangle on the y axis", HFILL }
 		},
 
 		{ &hf_vnc_rre_subrect_width,
 		  { "Width", "vnc.rre_subrect_width",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Width of this subrectangle", HFILL }
 		},
 
 		{ &hf_vnc_rre_subrect_height,
 		  { "Height", "vnc.rre_subrect_height",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Height of this subrectangle", HFILL }
 		},
 
 
 		/* Hextile Encoding */
 		{ &hf_vnc_hextile_subencoding_mask,
 		  { "Subencoding type", "vnc.hextile_subencoding",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Hextile subencoding type.", HFILL }
 		},
 
 		{ &hf_vnc_hextile_raw,
 		  { "Raw", "vnc.hextile_raw",
 		    FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x1,
 		    "Raw subencoding is used in this tile", HFILL }
 		},
 
 		{ &hf_vnc_hextile_raw_value,
 		  { "Raw pixel values", "vnc.hextile_raw_value",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Raw subencoding pixel values", HFILL }
 		},
 
 		{ &hf_vnc_hextile_bg,
 		  { "Background Specified", "vnc.hextile_bg",
 		    FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x2,
 		    "Background Specified subencoding is used in this tile", HFILL }
 		},
 
 		{ &hf_vnc_hextile_bg_value,
 		  { "Background pixel value", "vnc.hextile_bg_value",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Background color for this tile", HFILL }
 		},
 
 		{ &hf_vnc_hextile_fg,
 		  { "Foreground Specified", "vnc.hextile_fg",
 		    FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x4,
 		    "Foreground Specified subencoding is used in this tile", HFILL }
 		},
 
 		{ &hf_vnc_hextile_fg_value,
 		  { "Foreground pixel value", "vnc.hextile_fg_value",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Foreground color for this tile", HFILL }
 		},
 
 		{ &hf_vnc_hextile_anysubrects,
 		  { "Any Subrects", "vnc.hextile_anysubrects",
 		    FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x8,
 		    "Any subrects subencoding is used in this tile", HFILL }
 		},
 
 		{ &hf_vnc_hextile_num_subrects,
 		  { "Number of subrectangles", "vnc.hextile_num_subrects",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Number of subrectangles that follow", HFILL }
 		},
 
 		{ &hf_vnc_hextile_subrectscolored,
 		  { "Subrects Colored", "vnc.hextile_subrectscolored",
 		    FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x10,
 		    "Subrects colored subencoding is used in this tile", HFILL }
 		},
 
 		{ &hf_vnc_hextile_subrect_pixel_value,
 		  { "Pixel value", "vnc.hextile_subrect_pixel_value",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Pixel value of this subrectangle", HFILL }
 		},
 
 		{ &hf_vnc_hextile_subrect_x_pos,
 		  { "X position", "vnc.hextile_subrect_x_pos",
 		    FT_UINT8, BASE_DEC, NULL, 0xF0, /* Top 4 bits */
 		    "X position of this subrectangle", HFILL }
 		},
 
 		{ &hf_vnc_hextile_subrect_y_pos,
 		  { "Y position", "vnc.hextile_subrect_y_pos",
 		    FT_UINT8, BASE_DEC, NULL, 0xF, /* Bottom 4 bits */
 		    "Y position of this subrectangle", HFILL }
 		},
 
 		{ &hf_vnc_hextile_subrect_width,
 		  { "Width", "vnc.hextile_subrect_width",
 		    FT_UINT8, BASE_DEC, NULL, 0xF0, /* Top 4 bits */
 		    "Subrectangle width minus one", HFILL }
 		},
 
 		{ &hf_vnc_hextile_subrect_height,
 		  { "Height", "vnc.hextile_subrect_height",
 		    FT_UINT8, BASE_DEC, NULL, 0xF, /* Bottom 4 bits */
 		    "Subrectangle height minus one", HFILL }
 		},
 
 
 		/* ZRLE Encoding */
 		{ &hf_vnc_zrle_len,
 		  { "ZRLE compressed length", "vnc.zrle_len",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "Length of compressed ZRLE data that follows", HFILL }
 		},
 
 		{ &hf_vnc_zrle_subencoding,
 		  { "Subencoding type", "vnc.zrle_subencoding",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Subencoding type byte", HFILL }
 		},
 
 		{ &hf_vnc_zrle_rle,
 		  { "RLE", "vnc.zrle_rle",
 		    FT_BOOLEAN, 8, TFS(&tfs_yes_no), 0x80, /* Upper bit */
 		    "Specifies that data is run-length encoded", HFILL }
 		},
 
 		{ &hf_vnc_zrle_palette_size,
 		  { "Palette size", "vnc.zrle_palette_size",
 		    FT_UINT8, BASE_DEC, NULL, 0x7F, /* Lower 7 bits */
 		    NULL, HFILL }
 		},
 
 		{ &hf_vnc_zrle_data,
 		  { "ZRLE compressed data", "vnc.zrle_data",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Compressed ZRLE data.  Compiling with zlib support will uncompress and dissect this data", HFILL }
 		},
 
 		{ &hf_vnc_zrle_raw,
 		  { "Pixel values", "vnc.zrle_raw",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Raw pixel values for this tile", HFILL }
 		},
 
 		{ &hf_vnc_zrle_palette,
 		  { "Palette", "vnc.zrle_palette",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Palette pixel values", HFILL }
 		},
 
 		/* Server Set Colormap Entries */
 		{ &hf_vnc_colormap_first_color,
 		  { "First color", "vnc.colormap_first_color",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "First color that should be mapped to given RGB intensities", HFILL }
 		},
 
 		{ &hf_vnc_color_groups,
 		  { "Color groups", "vnc.color_groups",
 		    FT_NONE, BASE_NONE, NULL, 0x0,
 		    NULL, HFILL }
 		},
 
 		{ &hf_vnc_colormap_num_colors,
 		  { "Number of color groups", "vnc.colormap_groups",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Number of red/green/blue color groups", HFILL }
 		},
 		{ &hf_vnc_colormap_red,
 		  { "Red", "vnc.colormap_red",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Red intensity", HFILL }
 		},
 		{ &hf_vnc_colormap_green,
 		  { "Green", "vnc.colormap_green",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Green intensity", HFILL }
 		},
 		{ &hf_vnc_colormap_blue,
 		  { "Blue", "vnc.colormap_blue",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Blue intensity", HFILL }
 		},
 
 		/* Server Cut Text */
 		{ &hf_vnc_server_cut_text_len,
 		  { "Length", "vnc.server_cut_text_len",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "Length of server's copy/cut text (clipboard) string in bytes", HFILL }
 		},
 		{ &hf_vnc_server_cut_text,
 		  { "Text", "vnc.server_cut_text",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Text string in the server's copy/cut text (clipboard)", HFILL }
 		},
 
 		/* LibVNCServer additions */
 		{ &hf_vnc_supported_messages_client2server,
 		  { "Client2server", "vnc.supported_messages_client2server",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Supported client to server messages (bit flags)", HFILL }
 		},
 		{ &hf_vnc_supported_messages_server2client,
 		  { "Server2client", "vnc.supported_messages_server2client",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Supported server to client messages (bit flags)", HFILL }
 		},
 		{ &hf_vnc_num_supported_encodings,
 		  { "Number of supported encodings", "vnc.num_supported_encodings",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_supported_encodings,
 		  { "Encoding", "vnc.supported_encodings",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Supported encoding", HFILL }
 		},
 		{ &hf_vnc_server_identity,
 		  { "Server Identity", "vnc.server_identity",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Server identity string", HFILL }
 		},
 
 		/* MirrorLink */
 		{ &hf_vnc_mirrorlink_type,
 		  { "Type", "vnc.mirrorlink_type",
 		    FT_UINT8, BASE_DEC, VALS(vnc_mirrorlink_types_vs), 0x0,
 		    "MirrorLink extension message type", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_length,
 		  { "Length", "vnc.mirrorlink_length",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Payload length", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_version_major,
 		  { "Major Version", "vnc.mirrorlink_version_major",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "MirrorLink major version", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_version_minor,
 		  { "Minor Version", "vnc.mirrorlink_version_minor",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "MirrorLink minor version", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_framebuffer_configuration,
 		  { "Configuration",
 		    "vnc.mirrorlink_framebuffer_configuration",
 		    FT_UINT16, BASE_HEX, NULL, 0x0,
 		    "Framebuffer configuration", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_pixel_width,
 		  { "Pixel Width", "vnc.mirrorlink_pixel_width",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Display width [pixel]", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_pixel_height,
 		  { "Pixel Height", "vnc.mirrorlink_pixel_height",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Display height [pixel]", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_pixel_format,
 		  { "Pixel Format", "vnc.mirrorlink_pixel_format",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Pixel format support", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_display_width,
 		  { "Display Width", "vnc.mirrorlink_display_width",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Display width [mm]", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_display_height,
 		  { "Display Height", "vnc.mirrorlink_display_height",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Display height [mm]", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_display_distance,
 		  { "Display Distance", "vnc.mirrorlink_display_distance",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Display distance [mm]", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_keyboard_language,
 		  { "Keyboard Language", "vnc.mirrorlink_keyboard_language",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Keyboard layout - Language code (according ISO 639-1)",
 		    HFILL }
 		},
 		{ &hf_vnc_mirrorlink_keyboard_country,
 		  { "Keyboard Country", "vnc.mirrorlink_keyboard_country",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Keyboard layout - Country code (according ISO 3166-1 alpha-2)",
 		    HFILL }
 		},
 		{ &hf_vnc_mirrorlink_ui_language,
 		  { "UI Language", "vnc.mirrorlink_ui_language",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "UI language - Language code (according ISO 639-1)", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_ui_country,
 		  { "UI Country", "vnc.mirrorlink_ui_country",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "UI language - Country code (according ISO 3166-1 alpha 2)",
 		    HFILL }
 		},
 		{ &hf_vnc_mirrorlink_knob_keys,
 		  { "Knob Keys", "vnc.mirrorlink_knob_keys",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Supported knob keys", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_device_keys,
 		  { "Device Keys", "vnc.mirrorlink_device_keys",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Supported device keys", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_multimedia_keys,
 		  { "Multimedia Keys", "vnc.mirrorlink_multimedia_keys",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Supported multimedia keys", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_key_related,
 		  { "Keyboard", "vnc.mirrorlink_key_related",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Keyboard related", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_pointer_related,
 		  { "Pointer", "vnc.mirrorlink_pointer_related",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Pointer related", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_key_symbol_value_client,
 		  { "Client KeySymValue",
 		    "vnc.mirrorlink_key_symbol_value_client",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Client key symbol value", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_key_symbol_value_server,
 		  { "Server KeySymValue",
 		    "vnc.mirrorlink_key_symbol_value_server",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Server key symbol value", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_key_configuration,
 		  { "Configuration", "vnc.mirrorlink_key_configuration",
 		    FT_UINT8, BASE_HEX, NULL, 0x0,
 		    "Key event listing configuration", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_key_num_events,
 		  { "Number of Key Events", "vnc.mirrorlink_key_num_events",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Number of key events in list", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_key_event_counter,
 		  { "Key Event Counter", "vnc.mirrorlink_key_event_counter",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Key event listing counter", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_key_symbol_value,
 		  { "KeySymValue",
 		    "vnc.mirrorlink_key_symbol_value",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Key symbol value", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_key_request_configuration,
 		  { "Configuration", "vnc.mirrorlink_key_request_configuration",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Key event listing request configuration", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_keyboard_configuration,
 		  { "Configuration", "vnc.mirrorlink_keyboard_configuration",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Virtual keyboard configuration", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_cursor_x,
 		  { "Cursor X", "vnc.mirrorlink_cursor_x",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Cursor - X position", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_cursor_y,
 		  { "Cursor Y", "vnc.mirrorlink_cursor_y",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Cursor - Y position", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_text_x,
 		  { "Text X", "vnc.mirrorlink_text_x",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Text input area - X position", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_text_y,
 		  { "Text Y", "vnc.mirrorlink_text_y",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Text input area - Y position", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_text_width,
 		  { "Text Width", "vnc.mirrorlink_text_width",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Text input area - Width", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_text_height,
 		  { "Text Height", "vnc.mirrorlink_text_height",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Text input area - Height", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_keyboard_request_configuration,
 		  { "Configuration",
 		    "vnc.mirrorlink_keyboard_request_configuration",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Virtual keyboard request configuration", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_device_status,
 		  { "Device Status", "vnc.mirrorlink_device_status",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Status of Device Features", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_app_id,
 		  { "App Id", "vnc.mirrorlink_app_id",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Unique application id", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_fb_block_x,
-		  { "Frambuffer X", "vnc.mirrorlink_fb_block_x",
+		  { "Framebuffer X", "vnc.mirrorlink_fb_block_x",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
-		    "Frambuffer blocking - X position", HFILL }
+		    "Framebuffer blocking - X position", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_fb_block_y,
-		  { "Frambuffer Y", "vnc.mirrorlink_fb_block_y",
+		  { "Framebuffer Y", "vnc.mirrorlink_fb_block_y",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
-		    "Frambuffer blocking - Y position", HFILL }
+		    "Framdbuffer blocking - Y position", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_fb_block_width,
-		  { "Frambuffer Width", "vnc.mirrorlink_fb_block_width",
+		  { "Framebuffer Width", "vnc.mirrorlink_fb_block_width",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
-		    "Frambuffer blocking - Width", HFILL }
+		    "Framebuffer blocking - Width", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_fb_block_height,
-		  { "Frambuffer Height", "vnc.mirrorlink_fb_block_height",
+		  { "Framebuffer Height", "vnc.mirrorlink_fb_block_height",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
-		    "Frambuffer blocking - Height", HFILL }
+		    "Framebuffer blocking - Height", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_fb_block_reason,
 		  { "Reason", "vnc.mirrorlink_fb_block_reason",
 		    FT_UINT16, BASE_HEX, NULL, 0x0,
 		    "Reason for blocking", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_audio_block_reason,
 		  { "Reason", "vnc.mirrorlink_audio_block_reason",
 		    FT_UINT16, BASE_HEX, NULL, 0x0,
 		    "Reason for blocking", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_touch_num_events,
 		  { "Number of Touch Events", "vnc.mirrorlink_touch_num_events",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Number of touch events in list", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_touch_x,
 		  { "Touch X", "vnc.mirrorlink_touch_x",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Touch event - X position", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_touch_y,
 		  { "Touch Y", "vnc.mirrorlink_touch_y",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Touch event - Y position", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_touch_id,
 		  { "Touch Id", "vnc.mirrorlink_touch_id",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Touch event - identifier", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_touch_pressure,
 		  { "Touch Pressure", "vnc.mirrorlink_touch_pressure",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    "Touch event - pressure value", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_text,
 		  { "Text", "vnc.mirrorlink_text",
 		    FT_STRING, BASE_NONE, NULL, 0x0,
 		    "Textual information", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_text_length,
 		  { "Length", "vnc.mirrorlink_text_length",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Length of textual information", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_text_max_length,
 		  { "Max Length", "vnc.mirrorlink_text_max_length",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Maximum length of textual information", HFILL }
 		},
 		{ &hf_vnc_mirrorlink_unknown,
 		  { "Unknown", "vnc.mirrorlink_unknown",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Unknown data", HFILL }
 		},
 
 		/* Fence */
 		{ &hf_vnc_fence_flags,
 		  {"Fence flags", "vnc.fence_flags", FT_UINT32, BASE_HEX,
 		   NULL, 0, NULL, HFILL}},
 
 		{ &hf_vnc_fence_request,
 		  { "Fence_request", "vnc.fence_request",
 		    FT_BOOLEAN, 32, NULL, VNC_FENCE_REQUEST,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_fence_sync_next,
 		  { "Fence_sync_next", "vnc.fence_sync_next",
 		    FT_BOOLEAN, 32, NULL, VNC_FENCE_SYNC_NEXT,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_fence_block_after,
 		  { "Fence_block_after", "vnc.fence_block_after",
 		    FT_BOOLEAN, 32, NULL, VNC_FENCE_BLOCK_AFTER,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_fence_block_before,
 		  { "Fence block_before", "vnc.fence_block_before",
 		    FT_BOOLEAN, 32, NULL, VNC_FENCE_BLOCK_BEFORE,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_fence_payload_length,
 		  { "Fence payload length", "vnc.fence_payload_length",
 		    FT_UINT8, BASE_DEC, NULL, 0x0,
 		    NULL, HFILL }
 		},
 		{ &hf_vnc_fence_payload,
 		  { "Fence payload", "vnc.fence_payload",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    NULL, HFILL }
 		},
 
 		/* Context Information */
 		{ &hf_vnc_context_information_app_id,
 		  { "App Id", "vnc.context_information_app_id",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Unique application id", HFILL }
 		},
 		{ &hf_vnc_context_information_app_trust_level,
 		  { "App Trust Level",
 		    "vnc.context_information_app_trust_level",
 		    FT_UINT16, BASE_HEX, NULL, 0x0,
 		    "Trust Level for Application Category", HFILL }
 		},
 		{ &hf_vnc_context_information_content_trust_level,
 		  { "Content Trust Level",
 		    "vnc.context_information_content_trust_level",
 		    FT_UINT16, BASE_HEX, NULL, 0x0,
 		    "Trust Level for Content Category", HFILL }
 		},
 		{ &hf_vnc_context_information_app_category,
 		  { "App Category", "vnc.context_information_app_category",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Application Category", HFILL }
 		},
 		{ &hf_vnc_context_information_content_category,
 		  { "Content Category",
 		    "vnc.context_information_content_category",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Visual content category", HFILL }
 		},
 		{ &hf_vnc_context_information_content_rules,
 		  { "Content Rules", "vnc.context_information_content_rules",
 		    FT_UINT32, BASE_HEX, NULL, 0x0,
 		    "Visual content rules", HFILL }
 		},
 
 		/* Scan Line based Run-Length Encoding */
 		{ &hf_vnc_slrle_run_num,
 		  { "Number of Runs", "vnc.slrle_run_num",
 		    FT_UINT16, BASE_DEC, NULL, 0x0,
 		    "Number of Runs within Line", HFILL }
 		},
 		{ &hf_vnc_slrle_run_data,
 		  { "Raw RLE data", "vnc.slrle_run_data",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Raw Run-Length encoded data within Line", HFILL }
 		},
 
 		/* H.264 Encoding */
 		{ &hf_vnc_h264_slice_type,
 		  { "Slice Type", "vnc.h264_slice_type",
 		    FT_UINT32, BASE_DEC, VALS(vnc_h264_slice_types_vs), 0x0,
 		    "Frame slice type", HFILL }
 		},
 		{ &hf_vnc_h264_nbytes,
 		  { "Number of Bytes", "vnc.h264_nbytes",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "Number of bytes within frame", HFILL }
 		},
 		{ &hf_vnc_h264_width,
 		  { "Width", "vnc.h264_width",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "Frame Width", HFILL }
 		},
 		{ &hf_vnc_h264_height,
 		  { "Height", "vnc.h264_height",
 		    FT_UINT32, BASE_DEC, NULL, 0x0,
 		    "Frame Height", HFILL }
 		},
 		{ &hf_vnc_h264_data,
 		  { "Data", "vnc.h264_data",
 		    FT_BYTES, BASE_NONE, NULL, 0x0,
 		    "Frame H.264 data", HFILL }
 		},
 
 	};
 
 	/* Setup protocol subtree arrays */
 	static gint *ett[] = {
 		&ett_vnc,
 		&ett_vnc_client_message_type,
 		&ett_vnc_server_message_type,
 		&ett_vnc_rect,
 		&ett_vnc_encoding_type,
 		&ett_vnc_rre_subrect,
 		&ett_vnc_hextile_subencoding_mask,
 		&ett_vnc_hextile_num_subrects,
 		&ett_vnc_hextile_subrect,
 		&ett_vnc_hextile_tile,
 		&ett_vnc_zrle_subencoding,
 		&ett_vnc_colormap_num_groups,
 		&ett_vnc_desktop_screen,
 		&ett_vnc_colormap_color_group,
 		&ett_vnc_key_events,
 		&ett_vnc_touch_events,
 		&ett_vnc_slrle_subline,
 		&ett_vnc_fence_flags
 	};
 
 	static ei_register_info ei[] = {
 		{ &ei_vnc_possible_gtk_vnc_bug, { "vnc.possible_gtk_vnc_bug", PI_MALFORMED, PI_ERROR, "NULL found in greeting. client -> server greeting must be 12 bytes (possible gtk-vnc bug)", EXPFILL }},
 		{ &ei_vnc_auth_code_mismatch, { "vnc.auth_code_mismatch", PI_PROTOCOL, PI_WARN, "Authentication code does not match vendor or signature", EXPFILL }},
 		{ &ei_vnc_unknown_tight_vnc_auth, { "vnc.unknown_tight_vnc_auth", PI_PROTOCOL, PI_ERROR, "Unknown TIGHT VNC authentication", EXPFILL }},
 		{ &ei_vnc_too_many_rectangles, { "vnc.too_many_rectangles", PI_MALFORMED, PI_ERROR, "Too many rectangles, aborting dissection", EXPFILL }},
 		{ &ei_vnc_too_many_sub_rectangles, { "vnc.too_many_sub_rectangles", PI_MALFORMED, PI_ERROR, "Too many sub-rectangles, aborting dissection", EXPFILL }},
 		{ &ei_vnc_invalid_encoding, { "vnc.invalid_encoding", PI_MALFORMED, PI_ERROR, "Invalid encoding", EXPFILL }},
 		{ &ei_vnc_too_many_colors, { "vnc.too_many_colors", PI_MALFORMED, PI_ERROR, "Too many colors, aborting dissection", EXPFILL }},
 		{ &ei_vnc_too_many_cut_text, { "vnc.too_many_cut_text", PI_MALFORMED, PI_ERROR, "Too much cut text, aborting dissection", EXPFILL }},
 		{ &ei_vnc_zrle_failed, { "vnc.zrle_failed", PI_UNDECODED, PI_ERROR, "Decompression of ZRLE data failed", EXPFILL }},
 		{ &ei_vnc_unknown_tight, { "vnc.unknown_tight_packet", PI_UNDECODED, PI_WARN, "Unknown packet (TightVNC)", EXPFILL }},
 		{ &ei_vnc_reassemble, { "vnc.reassemble", PI_REASSEMBLE, PI_CHAT, "See further on for dissection of the complete (reassembled) PDU", EXPFILL }},
 	};
 
 	/* Register the protocol name and description */
 	proto_vnc = proto_register_protocol("Virtual Network Computing", "VNC", "vnc");
 	vnc_handle = register_dissector("vnc", dissect_vnc, proto_vnc);
 
 	/* Required function calls to register the header fields and subtrees */
 	proto_register_field_array(proto_vnc, hf, array_length(hf));
 	proto_register_subtree_array(ett, array_length(ett));
 	expert_vnc = expert_register_protocol(proto_vnc);
 	expert_register_field_array(expert_vnc, ei, array_length(ei));
 
 	/* Register our preferences module */
 	vnc_module = prefs_register_protocol(proto_vnc, apply_vnc_prefs);
 
 	prefs_register_bool_preference(vnc_module, "desegment",
 				       "Reassemble VNC messages spanning multiple TCP segments.",
 				       "Whether the VNC dissector should reassemble messages spanning "
 				       "multiple TCP segments.  To use this option, you must also enable "
 				       "\"Allow subdissectors to reassemble TCP streams\" in the TCP protocol settings.",
 				       &vnc_preference_desegment);
 }
diff --git a/tools/wireshark_words.txt b/tools/wireshark_words.txt
index 432b09e6af..c66bd8e6e9 100644
--- a/tools/wireshark_words.txt
+++ b/tools/wireshark_words.txt
@@ -180,6 +180,7 @@ butype
 byte
 byteorder
 cablelabs
+caching
 cadenced
 callback
 callid
@@ -224,11 +225,13 @@ centiseconds
 centrino
 cfilters
 cframe
+chacha
 chan1
 chan2
 changelog
 channelisation
 channelized
+channelmap
 chars
 charset
 charsets
@@ -437,6 +440,7 @@ deselect
 designator
 destip
 destport
+determinant
 deutschland
 devcap
 deviceid
@@ -467,6 +471,7 @@ dissector
 dissectors
 distinguisher
 distributions
+diversifications
 diversifier
 divisor
 djiuav
@@ -570,6 +575,7 @@ etype
 eutra
 eutran
 eventlog
+evolutions
 executables
 exflags
 exocet
@@ -774,6 +780,7 @@ instrumented
 interferer
 interleaving
 interop
+interpolated
 interruptible
 interworking
 intra
@@ -851,6 +858,7 @@ lcgid
 lcids
 lcsap
 leasequery
+legitimisation
 libgcrypt
 libpcap
 libsmi
@@ -904,6 +912,7 @@ maybefcs
 mbits
 mbsfn
 mbytes
+mcaal
 mcast
 mcmemberrecord
 mcptt
@@ -930,6 +939,7 @@ mgmtmsg
 microapp
 microbit
 midamble
+migratable
 millimeters
 milliwatt
 mingw
@@ -1046,6 +1056,7 @@ nodeid
 nofcs
 nokia
 nominals
+non3gpp
 nonblock
 noncriticalextension
 noncriticalextensions
@@ -1137,6 +1148,7 @@ packetcable
 packetization
 packetized
 pagings
+panasonic
 parallelization
 param
 parameterization
@@ -1183,6 +1195,7 @@ picmg
 pinfo
 pixmap
 plaintext
+planar
 plano
 plixer
 plugin
@@ -1259,6 +1272,7 @@ qam64
 qmgmt
 qnet6
 qosinfo
+qpack
 qsearch
 quadlet
 quadrature
@@ -1354,6 +1368,7 @@ rekey
 rekeying
 relocatable
 remapping
+renegotiation
 renumbering
 reoptimization
 reoptimized
@@ -1408,6 +1423,7 @@ revalidate
 revalidation
 revertive
 revocations
+rf4ce
 rfcomm
 rfmon
 rgoose
@@ -1417,6 +1433,7 @@ rmcap
 rngrsp
 rnsap
 roamer
+romania
 routable
 rowfmt
 rpcap
@@ -1430,6 +1447,7 @@ rtpmidi
 rtpmux
 rtpstream
 ruleset
+rwanda
 rxchannel
 rxlen
 rxlev
@@ -1592,6 +1610,7 @@ subpdu
 subpm
 subprocesstest
 subquery
+subrect
 subrects
 subselect
 subselection
@@ -1605,6 +1624,7 @@ sverige
 svhdx
 switchinfo
 symantec
+symlink
 synchronizer
 synchronizing
 synchronously
@@ -1620,6 +1640,7 @@ sysmac
 systemd
 tablemod
 tabular
+tanzania
 tclas
 tcpdump
 tcpflags
@@ -1750,6 +1771,7 @@ uncompression
 unconfigurable
 unconfigured
 unconfirm
+unconstrained
 uncontended
 uncorrectable
 undecidable
@@ -1900,6 +1922,7 @@ virtex
 virtio
 virtualization
 vlans
+vmware
 vnode
 vocoder
 vodafone
