commit a9815b3f228df00086e0a40bcc43162fc19896a1
Author: bobsayshilol <bobsayshilol@live.co.uk>
Date:   Wed Feb 17 23:21:48 2021 +0000

    wavlike: Fix incorrect size check
    
    The SF_CART_INFO_16K struct has an additional 4 byte field to hold
    the size of 'tag_text' which the file header doesn't, so don't
    include it as part of the check when looking for the max length.
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=26026

diff --git a/src/wavlike.c b/src/wavlike.c
index b59c6847..1c1ed2cf 100644
--- a/src/wavlike.c
+++ b/src/wavlike.c
@@ -817,67 +817,71 @@ int
 wavlike_read_cart_chunk (SF_PRIVATE *psf, uint32_t chunksize)
 {	SF_CART_INFO_16K *c ;
 	uint32_t bytes = 0 ;
 	int k ;
 
 	if (chunksize < WAV_CART_MIN_CHUNK_SIZE)
 	{	psf_log_printf (psf, "cart : %u (should be >= %d)\n", chunksize, WAV_CART_MIN_CHUNK_SIZE) ;
 		psf_binheader_readf (psf, "j", chunksize) ;
 		return 0 ;
 		} ;
 	if (chunksize > WAV_CART_MAX_CHUNK_SIZE)
 	{	psf_log_printf (psf, "cart : %u (should be < %d)\n", chunksize, WAV_CART_MAX_CHUNK_SIZE) ;
 		psf_binheader_readf (psf, "j", chunksize) ;
 		return 0 ;
 		} ;
 
-	if (chunksize >= sizeof (SF_CART_INFO_16K))
+	/*
+	**	SF_CART_INFO_16K has an extra field 'tag_text_size' that isn't part
+	**	of the chunk, so don't include it in the size check.
+	*/
+	if (chunksize >= sizeof (SF_CART_INFO_16K) - 4)
 	{	psf_log_printf (psf, "cart : %u too big to be handled\n", chunksize) ;
 		psf_binheader_readf (psf, "j", chunksize) ;
 		return 0 ;
 		} ;
 
 	psf_log_printf (psf, "cart : %u\n", chunksize) ;
 
 	if (psf->cart_16k)
 	{	psf_log_printf (psf, "  Found more than one cart chunk, using last one.\n") ;
 		free (psf->cart_16k) ;
 		psf->cart_16k = NULL ;
 		} ;
 
 	if ((psf->cart_16k = cart_var_alloc ()) == NULL)
 	{	psf->error = SFE_MALLOC_FAILED ;
 		return psf->error ;
 		} ;
 
 	c = psf->cart_16k ;
 	bytes += psf_binheader_readf (psf, "b", c->version, sizeof (c->version)) ;
 	bytes += psf_binheader_readf (psf, "b", c->title, sizeof (c->title)) ;
 	bytes += psf_binheader_readf (psf, "b", c->artist, sizeof (c->artist)) ;
 	bytes += psf_binheader_readf (psf, "b", c->cut_id, sizeof (c->cut_id)) ;
 	bytes += psf_binheader_readf (psf, "b", c->client_id, sizeof (c->client_id)) ;
 	bytes += psf_binheader_readf (psf, "b", c->category, sizeof (c->category)) ;
 	bytes += psf_binheader_readf (psf, "b", c->classification, sizeof (c->classification)) ;
 	bytes += psf_binheader_readf (psf, "b", c->out_cue, sizeof (c->out_cue)) ;
 	bytes += psf_binheader_readf (psf, "b", c->start_date, sizeof (c->start_date)) ;
 	bytes += psf_binheader_readf (psf, "b", c->start_time, sizeof (c->start_time)) ;
 	bytes += psf_binheader_readf (psf, "b", c->end_date, sizeof (c->end_date)) ;
 	bytes += psf_binheader_readf (psf, "b", c->end_time, sizeof (c->end_time)) ;
 	bytes += psf_binheader_readf (psf, "b", c->producer_app_id, sizeof (c->producer_app_id)) ;
 	bytes += psf_binheader_readf (psf, "b", c->producer_app_version, sizeof (c->producer_app_version)) ;
 	bytes += psf_binheader_readf (psf, "b", c->user_def, sizeof (c->user_def)) ;
 	bytes += psf_binheader_readf (psf, "e4", &c->level_reference, sizeof (c->level_reference)) ;
 
 	for (k = 0 ; k < ARRAY_LEN (c->post_timers) ; k++)
 		bytes += psf_binheader_readf (psf, "b4", &c->post_timers [k].usage, make_size_t (4), &c->post_timers [k].value) ;
 
 	bytes += psf_binheader_readf (psf, "b", c->reserved, sizeof (c->reserved)) ;
 	bytes += psf_binheader_readf (psf, "b", c->url, sizeof (c->url)) ;
 
 	if (chunksize > WAV_CART_MIN_CHUNK_SIZE)
 	{	/* File has tag text. */
 		c->tag_text_size = chunksize - WAV_CART_MIN_CHUNK_SIZE ;
 		bytes += psf_binheader_readf (psf, "b", c->tag_text, make_size_t (c->tag_text_size)) ;
 		} ;
 
 	return 0 ;
 } /* wavlike_read_cart_chunk */
