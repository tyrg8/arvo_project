commit ba54b896969930491645aa3ec4125b76480add9c
Author: Peter Wu <peter@lekensteyn.nl>
Date:   Thu Jul 18 00:13:33 2019 +0100

    QUIC: fix out-of-bounds write due to missing CID length check
    
    The length was previously increased to max 255, but v1 limits it. Be
    sure to check the bounds before doing anything.
    
    Bug: 15919
    Change-Id: I2ed8469d882d5ac2dc4c21e3f5486534e4bf32e6
    Fixes: v3.1.0rc0-1289-g3967f60e45 ("QUIC: update for new Connection ID Lengths (draft -22)")
    Link: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=15936
    Reviewed-on: https://code.wireshark.org/review/34000
    Petri-Dish: Peter Wu <peter@lekensteyn.nl>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Peter Wu <peter@lekensteyn.nl>

diff --git a/epan/dissectors/packet-quic.c b/epan/dissectors/packet-quic.c
index dfa9d636be..cab7fba0ac 100644
--- a/epan/dissectors/packet-quic.c
+++ b/epan/dissectors/packet-quic.c
@@ -1774,46 +1774,50 @@ static int
 dissect_quic_long_header_common(tvbuff_t *tvb, packet_info *pinfo, proto_tree *quic_tree,
                                 guint offset, const quic_packet_info_t *quic_packet _U_,
                                 guint32 *version_out, quic_cid_t *dcid, quic_cid_t *scid)
 {
     guint32     version;
     guint32     dcil, scil;
 
     version = tvb_get_ntohl(tvb, offset);
 
     if (version_out) {
         *version_out = version;
     }
 
     proto_tree_add_item(quic_tree, hf_quic_version, tvb, offset, 4, ENC_BIG_ENDIAN);
     offset += 4;
 
     proto_tree_add_item_ret_uint(quic_tree, hf_quic_dcil, tvb, offset, 1, ENC_BIG_ENDIAN, &dcil);
     offset++;
     if (dcil) {
         proto_tree_add_item(quic_tree, hf_quic_dcid, tvb, offset, dcil, ENC_NA);
         // TODO expert info on CID mismatch with connection
-        tvb_memcpy(tvb, dcid->cid, offset, dcil);
-        dcid->len = dcil;
+        if (dcil <= QUIC_MAX_CID_LENGTH) {
+            tvb_memcpy(tvb, dcid->cid, offset, dcil);
+            dcid->len = dcil;
+        }
         offset += dcil;
     }
 
     proto_tree_add_item_ret_uint(quic_tree, hf_quic_scil, tvb, offset, 1, ENC_BIG_ENDIAN, &scil);
     offset++;
     if (scil) {
         proto_tree_add_item(quic_tree, hf_quic_scid, tvb, offset, scil, ENC_NA);
         // TODO expert info on CID mismatch with connection
-        tvb_memcpy(tvb, scid->cid, offset, scil);
-        scid->len = scil;
+        if (scil <= QUIC_MAX_CID_LENGTH) {
+            tvb_memcpy(tvb, scid->cid, offset, scil);
+            scid->len = scil;
+        }
         offset += scil;
     }
 
     if (dcid->len > 0) {
         col_append_fstr(pinfo->cinfo, COL_INFO, ", DCID=%s", cid_to_string(dcid));
     }
     if (scid->len > 0) {
         col_append_fstr(pinfo->cinfo, COL_INFO, ", SCID=%s", cid_to_string(scid));
     }
     return offset;
 }
 
 /* Retry Packet dissection */
@@ -2141,48 +2145,48 @@ static void
 quic_extract_header(tvbuff_t *tvb, guint8 *long_packet_type, guint32 *version,
                     quic_cid_t *dcid, quic_cid_t *scid)
 {
     guint offset = 0;
 
     guint8 packet_type = tvb_get_guint8(tvb, offset);
     gboolean is_long_header = packet_type & 0x80;
     if (is_long_header) {
         // long header form
         *long_packet_type = (packet_type & 0x30) >> 4;
     } else {
         // short header form, store dummy value that is not a long packet type.
         *long_packet_type = QUIC_SHORT_PACKET;
     }
     offset++;
 
     *version = tvb_get_ntohl(tvb, offset);
 
     if (is_long_header) {
         // skip version
         offset += 4;
 
         // read DCID and SCID (both are prefixed by a length byte).
         guint8 dcil = tvb_get_guint8(tvb, offset);
         offset++;
 
-        if (dcil) {
+        if (dcil && dcil <= QUIC_MAX_CID_LENGTH) {
             tvb_memcpy(tvb, dcid->cid, offset, dcil);
             dcid->len = dcil;
-            offset += dcil;
         }
+        offset += dcil;
 
         guint8 scil = tvb_get_guint8(tvb, offset);
         offset++;
-        if (scil) {
+        if (scil && scil <= QUIC_MAX_CID_LENGTH) {
             tvb_memcpy(tvb, scid->cid, offset, scil);
             scid->len = scil;
         }
     } else {
         // Definitely not draft -10, set version to dummy value.
         *version = 0;
         // For short headers, the DCID length is unknown and could be 0 or
         // anything from 1 to 20 bytes. Copy the maximum possible and let the
         // consumer truncate it as necessary.
         tvb_memcpy(tvb, dcid->cid, offset, QUIC_MAX_CID_LENGTH);
         dcid->len = QUIC_MAX_CID_LENGTH;
     }
 }
