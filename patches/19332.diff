commit 843204299c79c55c736231c06db98def2b3a6bba
Author: Philippe Antoine <contact@catenacyber.fr>
Date:   Wed Dec 18 13:48:33 2019 +0100

    Fix read buffer overflow in stun

diff --git a/src/lib/protocols/stun.c b/src/lib/protocols/stun.c
index d5114204..cc38722e 100644
--- a/src/lib/protocols/stun.c
+++ b/src/lib/protocols/stun.c
@@ -140,327 +140,327 @@ static int is_messenger_ip_address(u_int32_t host) {
 static ndpi_int_stun_t ndpi_int_check_stun(struct ndpi_detection_module_struct *ndpi_struct,
 					   struct ndpi_flow_struct *flow,
 					   const u_int8_t * payload,
 					   const u_int16_t payload_length) {
   u_int16_t msg_type, msg_len;
   struct stun_packet_header *h = (struct stun_packet_header*)payload;
   int rc;
   
   /* STUN over TCP does not look good */
   if(flow->packet.tcp)
     return(NDPI_IS_NOT_STUN);
 
   /* No need to do ntohl() with 0xFFFFFFFF */
   if(flow->packet.iph && (flow->packet.iph->daddr == 0xFFFFFFFF /* 255.255.255.255 */)) {
     NDPI_EXCLUDE_PROTO(ndpi_struct, flow);
     return(NDPI_IS_NOT_STUN);;
   }
 
   if(payload_length >= 512) {
     return(NDPI_IS_NOT_STUN);
   } else if(payload_length < sizeof(struct stun_packet_header)) {
     /* This looks like an invalid packet */
 
     if(flow->protos.stun_ssl.stun.num_udp_pkts > 0) {
       flow->guessed_host_protocol_id = NDPI_PROTOCOL_WHATSAPP_CALL;
       return(NDPI_IS_STUN);
     } else
       return(NDPI_IS_NOT_STUN);
   }
 
   if((strncmp((const char*)payload, (const char*)"RSP/", 4) == 0)
      && (strncmp((const char*)&payload[7], (const char*)" STUN_", 6) == 0)) {
     NDPI_LOG_INFO(ndpi_struct, "found stun\n");
     goto udp_stun_found;
   }
 
   msg_type = ntohs(h->msg_type), msg_len = ntohs(h->msg_len);
 
   if(msg_type == 0)
     return(NDPI_IS_NOT_STUN);  
   
   /* https://www.iana.org/assignments/stun-parameters/stun-parameters.xhtml */
   if((msg_type & 0x3EEF) > 0x000B && msg_type != 0x0800) {
 #ifdef DEBUG_STUN
     printf("[STUN] msg_type = %04X\n", msg_type);
 #endif
 
     /*
      If we're here it's because this does not look like STUN anymore
      as this was a flow that started as STUN and turned into something
      else. Let's investigate what is that about
      */
     if(payload[0] == 0x16) {
       /* Let's check if this is DTLS used by some socials */
       struct ndpi_packet_struct *packet = &flow->packet;
       u_int16_t total_len, version = htons(*((u_int16_t*) &packet->payload[1]));
 
       switch (version) {
         case 0xFEFF: /* DTLS 1.0 */
         case 0xFEFD: /* DTLS 1.2 */
           total_len = ntohs(*((u_int16_t*) &packet->payload[11])) + 13;
 
           if(payload_length == total_len) {
             /* This is DTLS and the only protocol we know behaves like this is signal */
             flow->guessed_host_protocol_id = NDPI_PROTOCOL_SIGNAL;
             return(NDPI_IS_STUN);
           }
       }
     }
 
     return(NDPI_IS_NOT_STUN);
   }
 
 #if 0
   if((flow->packet.udp->dest == htons(3480)) ||
      (flow->packet.udp->source == htons(3480))
     )
     printf("[STUN] Here we go\n");;
 #endif
 
   if(ndpi_struct->stun_cache) {
     u_int16_t proto;
     u_int32_t key = get_stun_lru_key(flow, 0);
     int rc = ndpi_lru_find_cache(ndpi_struct->stun_cache, key, &proto,
                                  0 /* Don't remove it as it can be used for other connections */);
 
 #ifdef DEBUG_LRU
     printf("[LRU] Searching %u\n", key);
 #endif
 
     if(!rc) {
       key = get_stun_lru_key(flow, 1);
       rc = ndpi_lru_find_cache(ndpi_struct->stun_cache, key, &proto,
                                0 /* Don't remove it as it can be used for other connections */);
 
 #ifdef DEBUG_LRU
       printf("[LRU] Searching %u\n", key);
 #endif
     }
 
     if(rc) {
 #ifdef DEBUG_LRU
       printf("[LRU] Cache FOUND %u / %u\n", key, proto);
 #endif
 
       flow->guessed_host_protocol_id = proto;
       return(NDPI_IS_STUN);
     } else {
 #ifdef DEBUG_LRU
       printf("[LRU] NOT FOUND %u\n", key);
 #endif
     }
   } else {
 #ifdef DEBUG_LRU
     printf("[LRU] NO/EMPTY CACHE\n");
 #endif
   }
 
   if(msg_type == 0x01 /* Binding Request */) {
     flow->protos.stun_ssl.stun.num_binding_requests++;
 
     if(!msg_len && flow->guessed_host_protocol_id == NDPI_PROTOCOL_GOOGLE)
       flow->guessed_host_protocol_id = NDPI_PROTOCOL_HANGOUT_DUO;
     else
       flow->guessed_protocol_id = NDPI_PROTOCOL_STUN;
 
     if(!msg_len) {
       /* flow->protos.stun_ssl.stun.num_udp_pkts++; */
       return(NDPI_IS_NOT_STUN); /* This to keep analyzing STUN instead of giving up */
     }
   }
 
   if(!msg_len && flow->guessed_host_protocol_id == NDPI_PROTOCOL_UNKNOWN) {
     NDPI_EXCLUDE_PROTO(ndpi_struct, flow);
     return(NDPI_IS_NOT_STUN);
   }
 
   flow->protos.stun_ssl.stun.num_udp_pkts++;
 
   if((payload[0] == 0x80 && payload_length < 512 && ((msg_len+20) <= payload_length))) {
     flow->guessed_host_protocol_id = NDPI_PROTOCOL_WHATSAPP_CALL;
     return(NDPI_IS_STUN); /* This is WhatsApp Call */
   } else if((payload[0] == 0x90) && (((msg_len+11) == payload_length) ||
                 (flow->protos.stun_ssl.stun.num_binding_requests >= 4))) {
     flow->guessed_host_protocol_id = NDPI_PROTOCOL_WHATSAPP_CALL;
     return(NDPI_IS_STUN); /* This is WhatsApp Call */
   }
 
   if(payload[0] != 0x80 && (msg_len + 20) > payload_length)
     return(NDPI_IS_NOT_STUN);
   else {
     switch(flow->guessed_protocol_id) {
     case NDPI_PROTOCOL_HANGOUT_DUO:
     case NDPI_PROTOCOL_MESSENGER:
     case NDPI_PROTOCOL_WHATSAPP_CALL:
       /* Don't overwrite the protocol with sub-STUN protocols */
       break;
 
     default:
       flow->guessed_protocol_id = NDPI_PROTOCOL_STUN;
       break;
     }
   }
 
   if(payload_length == (msg_len+20)) {
     if((msg_type & 0x3EEF) <= 0x000B) /* http://www.3cx.com/blog/voip-howto/stun-details/ */ {
       u_int offset = 20;
 
       /*
        This can either be the standard RTCP or Ms Lync RTCP that
        later will become Ms Lync RTP. In this case we need to
        be careful before deciding about the protocol before dissecting the packet
 
        MS Lync = Skype
        https://en.wikipedia.org/wiki/Skype_for_Business
        */
 
-      while((offset+2) < payload_length) {
+      while((offset+4) < payload_length) {
         u_int16_t attribute = ntohs(*((u_int16_t*)&payload[offset]));
         u_int16_t len = ntohs(*((u_int16_t*)&payload[offset+2]));
         u_int16_t x = (len + 4) % 4;
 
         if(x)
           len += 4-x;
 
 #ifdef DEBUG_STUN
         printf("==> Attribute: %04X\n", attribute);
 #endif
 
         switch(attribute) {
 	case 0x0103:
           flow->guessed_host_protocol_id = NDPI_PROTOCOL_ZOOM;
           return(NDPI_IS_STUN);
 	  break;
 	  
         case 0x4000:
         case 0x4001:
         case 0x4002:
           /* These are the only messages apparently whatsapp voice can use */
           flow->guessed_host_protocol_id = NDPI_PROTOCOL_WHATSAPP_CALL;
           return(NDPI_IS_STUN);
           break;
 
         case 0x0014: /* Realm */
         {
           u_int16_t realm_len = ntohs(*((u_int16_t*)&payload[offset+2]));
 
           if(flow->host_server_name[0] == '\0') {
             u_int j, i = (realm_len > sizeof(flow->host_server_name)) ? sizeof(flow->host_server_name) : realm_len;
             u_int k = offset+4;
 
             memset(flow->host_server_name, 0, sizeof(flow->host_server_name));
 
             for(j=0; j<i; j++) {
 	      if((k+i) < payload_length)
 		flow->host_server_name[j] = payload[k++];
 	      else
 		break;
 	    }
 	    
 #ifdef DEBUG_STUN
             printf("==> [%s]\n", flow->host_server_name);
 #endif
 
             if(strstr((char*) flow->host_server_name, "google.com") != NULL) {
                 flow->guessed_host_protocol_id = NDPI_PROTOCOL_HANGOUT_DUO;
                 return(NDPI_IS_STUN);
             } else if(strstr((char*) flow->host_server_name, "whispersystems.org") != NULL) {
               flow->guessed_host_protocol_id = NDPI_PROTOCOL_SIGNAL;
               return(NDPI_IS_STUN);
             }
           }
         }
         break;
 
         case 0xC057: /* Messeger */
           if(msg_type == 0x0001) {
             if((msg_len == 100) || (msg_len == 104)) {
               flow->guessed_host_protocol_id = NDPI_PROTOCOL_MESSENGER;
               return(NDPI_IS_STUN);
             } else if(msg_len == 76) {
 #if 0
               if(1) {
                 flow->guessed_host_protocol_id = NDPI_PROTOCOL_HANGOUT_DUO;
                 return(NDPI_IS_NOT_STUN); /* This case is found also with signal traffic */
               } else
                 return(NDPI_IS_STUN);
 #endif
             }
           }
           break;
 
         case 0x8054: /* Candidate Identifier */
           if((len == 4)
              && ((offset+7) < payload_length)
              && (payload[offset+5] == 0x00)
              && (payload[offset+6] == 0x00)
              && (payload[offset+7] == 0x00)) {
             /* Either skype for business or "normal" skype with multiparty call */
 #ifdef DEBUG_STUN
             printf("==> Skype found\n");
 #endif
             flow->guessed_host_protocol_id = NDPI_PROTOCOL_SKYPE_CALL;
             return(NDPI_IS_STUN);
           }
 
           break;
 
         case 0x8055: /* MS Service Quality (skype?) */
           break;
 
           /* Proprietary fields found on skype calls */
         case 0x24DF:
         case 0x3802:
         case 0x8036:
         case 0x8095:
         case 0x0800:
         case 0x8006: /* This is found on skype calls) */
           /* printf("====>>>> %04X\n", attribute); */
 #ifdef DEBUG_STUN
           printf("==> Skype (2) found\n");
 #endif
 
           flow->guessed_host_protocol_id = NDPI_PROTOCOL_SKYPE_CALL;
           return(NDPI_IS_STUN);
           break;
 
         case 0x8070: /* Implementation Version */
           if(len == 4 && ((offset+7) < payload_length)
              && (payload[offset+4] == 0x00) && (payload[offset+5] == 0x00) && (payload[offset+6] == 0x00) &&
              ((payload[offset+7] == 0x02) || (payload[offset+7] == 0x03))) {
 #ifdef DEBUG_STUN
             printf("==> Skype (3) found\n");
 #endif
 
             flow->guessed_host_protocol_id = NDPI_PROTOCOL_SKYPE_CALL;
             return(NDPI_IS_STUN);
           }
           break;
 
         case 0xFF03:
           flow->guessed_host_protocol_id = NDPI_PROTOCOL_HANGOUT_DUO;
           return(NDPI_IS_STUN);
           break;
 
         default:
 #ifdef DEBUG_STUN
           printf("==> %04X\n", attribute);
 #endif
           break;
         }
 
         offset += len + 4;
       }
 
       goto udp_stun_found;
     } else if(msg_type == 0x0800) {
       flow->guessed_host_protocol_id = NDPI_PROTOCOL_WHATSAPP_CALL;
       return(NDPI_IS_STUN);
     }
   }
 
   if((flow->protos.stun_ssl.stun.num_udp_pkts > 0) && (msg_type <= 0x00FF)) {
     flow->guessed_host_protocol_id = NDPI_PROTOCOL_WHATSAPP_CALL;
     return(NDPI_IS_STUN);
   } else
     return(NDPI_IS_NOT_STUN);
