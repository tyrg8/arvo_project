commit 0d32d5a9aea919e9ab4c0431027f5ec47ccc4a64
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Tue Jun 7 15:52:33 2022 +0100

    GhostPDF - circular references in Info dict with PageLabels
    
    OSS-fuzz #47571
    
    This one is quite complicated and may need further work in the code
    for page labels. The problem arises because we deal with page labels
    before we deal with the Info dictionary passed back to PostScript.
    
    The PageLabel handling discovers a circular reference but, unlike every
    other case, when this happens we do not abort the operation. We simply
    leave the indirect reference in place and carry on.
    
    This is a problem because it means we replace some indirect references
    with the dereferenced object, but not all of them. When we later run
    the same operation when parsing the Info dictionary the fact that one
    object has been dereferenced and stored as a direct object means that
    we fail to spot the circular reference, because we have not noted the
    object number of the 'parent' object.
    
    Ordinarily this can't happen because the original error would prevent us
    storing the dereferenced object at any point in the chain.
    
    It is likely that we ought to return an error in the case of page labels
    with a circular reference at least and not simply carry on. I suspect
    we should always respect the error.
    
    Anyway, to work around this, the commit here checks the Info dictionary
    for circular references before we store it in the PDF context. Any
    entry which has an error is deleted from the dictionary before we store
    it. This prevents the circular reference ever appearing.
    
    Brute force, but we only do it once and it makes sure we can never end
    up in this situation.

diff --git a/pdf/pdf_doc.c b/pdf/pdf_doc.c
index 71aad8b66..eeaad0e27 100644
--- a/pdf/pdf_doc.c
+++ b/pdf/pdf_doc.c
@@ -101,32 +101,179 @@ int pdfi_read_Root(pdf_context *ctx)
     return 0;
 }
 
+static int Info_check_dict(pdf_context *ctx, pdf_dict *d);
+
+static int Info_check_array(pdf_context *ctx, pdf_array *a)
+{
+    int code = 0, i = 0;
+    pdf_obj *array_obj = NULL;
+
+    code = pdfi_loop_detector_mark(ctx);
+    if (code < 0)
+        return code;
+
+    for (i = 0;i < pdfi_array_size(a); i++) {
+        code = pdfi_array_get(ctx, a, i, &array_obj);
+        if (code < 0)
+            goto error;
+
+        switch(pdfi_type_of(array_obj)) {
+            case PDF_DICT:
+                code = Info_check_dict(ctx, (pdf_dict *)array_obj);
+                if (code < 0)
+                    goto error;
+                break;
+            case PDF_ARRAY:
+                code = Info_check_array(ctx, (pdf_array *)array_obj);
+                if (code < 0)
+                    goto error;
+                break;
+            default:
+                break;
+        }
+
+        pdfi_countdown(array_obj);
+        array_obj = NULL;
+    }
+error:
+    pdfi_countdown(array_obj);
+    pdfi_loop_detector_cleartomark(ctx);
+    return code;
+}
+
+static int Info_check_dict(pdf_context *ctx, pdf_dict *d)
+{
+    int code = 0;
+    uint64_t index = 0;
+    pdf_name *Key = NULL;
+    pdf_obj *Value = NULL;
+
+    code = pdfi_loop_detector_mark(ctx);
+    if (code < 0)
+        return code;
+
+    code = pdfi_dict_first(ctx, d, (pdf_obj **)&Key, &Value, &index);
+    if (code == gs_error_undefined) {
+        code = 0;
+        goto error;
+    }
+
+    while (code >= 0) {
+        switch(pdfi_type_of(Value)) {
+            case PDF_DICT:
+                code = Info_check_dict(ctx, (pdf_dict *)Value);
+                if (code < 0)
+                    goto error;
+                break;
+            case PDF_ARRAY:
+                code = Info_check_array(ctx, (pdf_array *)Value);
+                if (code < 0)
+                    goto error;
+                break;
+            default:
+                break;
+        }
+        pdfi_countdown(Key);
+        Key = NULL;
+        pdfi_countdown(Value);
+        Value = NULL;
+
+        code = pdfi_dict_next(ctx, d, (pdf_obj **)&Key, &Value, &index);
+        if (code == gs_error_undefined) {
+            code = 0;
+            break;
+        }
+    }
+error:
+    pdfi_countdown(Key);
+    pdfi_countdown(Value);
+    pdfi_loop_detector_cleartomark(ctx);
+    return code;
+}
+
+static int pdfi_sanitize_Info_references(pdf_context *ctx, pdf_dict *Info)
+{
+    int code = 0;
+    uint64_t index = 0;
+    pdf_name *Key = NULL;
+    pdf_obj *Value = NULL;
+
+    code = pdfi_loop_detector_mark(ctx);
+    if (code < 0)
+        return code;
+
+    code = pdfi_dict_first(ctx, Info, (pdf_obj **)&Key, &Value, &index);
+    if (code == gs_error_undefined) {
+        code = 0;
+        goto error;
+    }
+
+    while (code >= 0) {
+        switch(pdfi_type_of(Value)) {
+            case PDF_DICT:
+                code = Info_check_dict(ctx, (pdf_dict *)Value);
+                break;
+            case PDF_ARRAY:
+                code = Info_check_array(ctx, (pdf_array *)Value);
+                break;
+            default:
+                code = 0;
+                break;
+        }
+        pdfi_countdown(Value);
+        Value = NULL;
+        if (code < 0) {
+            code = pdfi_dict_delete_pair(ctx, Info, Key);
+            if (code < 0)
+                goto error;
+        }
+        pdfi_countdown(Key);
+        Key = NULL;
+
+        code = pdfi_dict_next(ctx, Info, (pdf_obj **)&Key, &Value, &index);
+        if (code == gs_error_undefined) {
+            code = 0;
+            break;
+        }
+    }
+error:
+    pdfi_countdown(Key);
+    pdfi_countdown(Value);
+    pdfi_loop_detector_cleartomark(ctx);
+    return code;
+}
+
 int pdfi_read_Info(pdf_context *ctx)
 {
     pdf_dict *Info;
     int code;
     pdf_dict *d;
 
     if (ctx->args.pdfdebug)
         dmprintf(ctx->memory, "%% Reading Info dictionary\n");
 
     /* See comment in pdfi_read_Root() for details */
     d = ctx->Trailer;
     pdfi_countup(d);
     code = pdfi_dict_get_type(ctx, ctx->Trailer, "Info", PDF_DICT, (pdf_obj **)&Info);
     pdfi_countdown(d);
     if (code < 0)
         return code;
 
     if (ctx->args.pdfdebug)
         dmprintf(ctx->memory, "\n");
 
+    /* sanitize Info for circular references */
+    code = pdfi_sanitize_Info_references(ctx, Info);
+    if (code < 0)
+        return code;
+
     pdfi_device_set_flags(ctx);
     pdfi_pdfmark_write_docinfo(ctx, Info);
 
     /* We don't pdfi_countdown(Info) now, because we've transferred our
      * reference to the pointer in the pdf_context structure.
      */
     ctx->Info = Info;
     return 0;
 }
diff --git a/psi/zpdfops.c b/psi/zpdfops.c
index 917fdcb83..1bd768de4 100644
--- a/psi/zpdfops.c
+++ b/psi/zpdfops.c
@@ -746,89 +746,71 @@ error:
 static int PDFobj_to_PSobj(i_ctx_t *i_ctx_p, pdfctx_t *pdfctx, pdf_obj *PDFobj, ref *PSobj)
 {
     int code = 0;
 
     code = pdfi_loop_detector_mark(pdfctx->ctx);
     if (code < 0)
         goto error;
 
     switch(pdfi_type_of(PDFobj)) {
         case PDF_NAME:
             {
                 char *str = NULL;
                 int len;
 
                 code = pdfi_string_from_name(pdfctx->ctx, (pdf_name *)PDFobj, &str, &len);
                 if (code < 0)
                     goto error;
                 code = names_ref(imemory->gs_lib_ctx->gs_name_table, (const byte *)str, len, PSobj, 1);
                 (void)pdfi_free_string_from_name(pdfctx->ctx, str);
             }
             break;
         case PDF_STRING:
             {
                 byte *sbody;
                 uint size = ((pdf_name *)PDFobj)->length;
 
                 sbody = ialloc_string(size, "string");
                 if (sbody == 0) {
                     code = gs_note_error(gs_error_VMerror);
                 } else {
                     make_string(PSobj, a_all | icurrent_space, size, sbody);
                     memcpy(sbody, ((pdf_name *)PDFobj)->data, size);
                 }
             }
             break;
         case PDF_INT:
             {
                 int64_t i;
 
                 code = pdfi_obj_to_int(pdfctx->ctx, PDFobj, &i);
                 if (code < 0)
                     goto error;
                 make_int(PSobj, i);
             }
             break;
         case PDF_BOOL:
             if (PDFobj == PDF_TRUE_OBJ)
                 make_bool(PSobj, 1);
             else
                 make_bool(PSobj, 0);
             break;
         case PDF_REAL:
             {
                 double d;
 
                 code = pdfi_obj_to_real(pdfctx->ctx, PDFobj, &d);
                 if (code < 0)
                     goto error;
                 make_real(PSobj, d);
             }
             break;
         case PDF_DICT:
-            if (PDFobj->object_num != 0) {
-                if (pdfi_loop_detector_check_object(pdfctx->ctx, PDFobj->object_num)) {
-                    gs_note_error(gs_error_circular_reference);
-                    goto error;
-                }
-                code = pdfi_loop_detector_add_object(pdfctx->ctx, PDFobj->object_num);
-                if (code < 0)
-                    goto error;
-            }
             code = PDFdict_to_PSdict(i_ctx_p, pdfctx, (pdf_dict *)PDFobj, PSobj);
             break;
         case PDF_ARRAY:
-            if (PDFobj->object_num != 0) {
-                if (pdfi_loop_detector_check_object(pdfctx->ctx, PDFobj->object_num)) {
-                    gs_note_error(gs_error_circular_reference);
-                    goto error;
-                }
-                code = pdfi_loop_detector_add_object(pdfctx->ctx, PDFobj->object_num);
-                if (code < 0)
-                    goto error;
-            }
             code = PDFarray_to_PSarray(i_ctx_p, pdfctx, (pdf_array *)PDFobj, PSobj);
             break;
         default:
             make_null(PSobj);
             break;
     }
