commit 147814adf1c657f647ee7e73027dbedde5ac2467
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sun Jan 21 11:16:14 2018 -0500

    Don't overflow pixel buffer
    Credit OSS-FUZZ

diff --git a/coders/dds.c b/coders/dds.c
index e3778fd61..85e33a591 100644
--- a/coders/dds.c
+++ b/coders/dds.c
@@ -2055,87 +2055,87 @@ static MagickBooleanType ReadDXT1(const ImageInfo *image_info,Image *image,
 static MagickBooleanType ReadDXT3Pixels(Image *image,
   DDSInfo *magick_unused(dds_info),ExceptionInfo *exception)
 {
   DDSColors
     colors;
 
   register Quantum
     *q;
 
   register ssize_t
     i,
     x;
 
   unsigned char
     alpha;
 
   size_t
     a0,
     a1,
     bits,
     code;
 
   ssize_t
     j,
     y;
 
   unsigned short
     c0,
     c1;
 
   magick_unreferenced(dds_info);
   for (y = 0; y < (ssize_t) image->rows; y += 4)
   {
     for (x = 0; x < (ssize_t) image->columns; x += 4)
     {
       /* Get 4x4 patch of pixels to write on */
       q = QueueAuthenticPixels(image, x, y, MagickMin(4, image->columns - x),
                          MagickMin(4, image->rows - y),exception);
 
       if (q == (Quantum *) NULL)
         return(MagickFalse);
 
       /* Read alpha values (8 bytes) */
       a0 = ReadBlobLSBLong(image);
       a1 = ReadBlobLSBLong(image);
 
       /* Read 8 bytes of data from the image */
       c0 = ReadBlobLSBShort(image);
       c1 = ReadBlobLSBShort(image);
       bits = ReadBlobLSBLong(image);
 
       CalculateColors(c0, c1, &colors, MagickTrue);
 
       if (EOFBlob(image) != MagickFalse)
         return(MagickFalse);
 
       /* Write the pixels */
       for (j = 0; j < 4; j++)
       {
         for (i = 0; i < 4; i++)
         {
-          if ((x + i) < (ssize_t) image->rows && (y + j) < (ssize_t) image->columns)
+          if ((x + i) < (ssize_t) image->columns && (y + j) < (ssize_t) image->rows)
             {
               code = (bits >> ((4*j+i)*2)) & 0x3;
               SetPixelRed(image,ScaleCharToQuantum(colors.r[code]),q);
               SetPixelGreen(image,ScaleCharToQuantum(colors.g[code]),q);
               SetPixelBlue(image,ScaleCharToQuantum(colors.b[code]),q);
               /*
                 Extract alpha value: multiply 0..15 by 17 to get range 0..255
               */
               if (j < 2)
                 alpha = 17U * (unsigned char) ((a0 >> (4*(4*j+i))) & 0xf);
               else
                 alpha = 17U * (unsigned char) ((a1 >> (4*(4*(j-2)+i))) & 0xf);
               SetPixelAlpha(image,ScaleCharToQuantum((unsigned char) alpha),q);
               q+=GetPixelChannels(image);
             }
         }
       }
       if (SyncAuthenticPixels(image,exception) == MagickFalse)
         return(MagickFalse);
     }
     if (EOFBlob(image) != MagickFalse)
       return(MagickFalse);
   }
   return(MagickTrue);
 }
