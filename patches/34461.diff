commit 8f5ccada05ddd4a1ff8e399ad39fc7cd4bd33325
Author: David Kilzer <ddkilzer@apple.com>
Date:   Wed Jul 7 19:24:36 2021 -0700

    xmlAddChild() and xmlAddNextSibling() may not attach their second argument
    
    Use the return value of xmlAddChild() and xmlAddNextSibling()
    instead of the second argument directly.
    
    Found by OSS-Fuzz.
    
    Fixes #316

diff --git a/xinclude.c b/xinclude.c
index b2e6ea13..2a0614d7 100644
--- a/xinclude.c
+++ b/xinclude.c
@@ -924,213 +924,212 @@ static xmlNodePtr
 xmlXIncludeCopyRange(xmlXIncludeCtxtPtr ctxt, xmlDocPtr target,
 	                xmlDocPtr source, xmlXPathObjectPtr range) {
     /* pointers to generated nodes */
     xmlNodePtr list = NULL, last = NULL, listParent = NULL;
     xmlNodePtr tmp, tmp2;
     /* pointers to traversal nodes */
     xmlNodePtr start, cur, end;
     int index1, index2;
     int level = 0, lastLevel = 0, endLevel = 0, endFlag = 0;
 
     if ((ctxt == NULL) || (target == NULL) || (source == NULL) ||
 	(range == NULL))
 	return(NULL);
     if (range->type != XPATH_RANGE)
 	return(NULL);
     start = (xmlNodePtr) range->user;
 
     if ((start == NULL) || (start->type == XML_NAMESPACE_DECL))
 	return(NULL);
     end = range->user2;
     if (end == NULL)
 	return(xmlDocCopyNode(start, target, 1));
     if (end->type == XML_NAMESPACE_DECL)
         return(NULL);
 
     cur = start;
     index1 = range->index;
     index2 = range->index2;
     /*
      * level is depth of the current node under consideration
      * list is the pointer to the root of the output tree
      * listParent is a pointer to the parent of output tree (within
        the included file) in case we need to add another level
      * last is a pointer to the last node added to the output tree
      * lastLevel is the depth of last (relative to the root)
      */
     while (cur != NULL) {
 	/*
 	 * Check if our output tree needs a parent
 	 */
 	if (level < 0) {
 	    while (level < 0) {
 	        /* copy must include namespaces and properties */
 	        tmp2 = xmlDocCopyNode(listParent, target, 2);
 	        xmlAddChild(tmp2, list);
 	        list = tmp2;
 	        listParent = listParent->parent;
 	        level++;
 	    }
 	    last = list;
 	    lastLevel = 0;
 	}
 	/*
 	 * Check whether we need to change our insertion point
 	 */
 	while (level < lastLevel) {
 	    last = last->parent;
 	    lastLevel --;
 	}
 	if (cur == end) {	/* Are we at the end of the range? */
 	    if (cur->type == XML_TEXT_NODE) {
 		const xmlChar *content = cur->content;
 		int len;
 
 		if (content == NULL) {
 		    tmp = xmlNewTextLen(NULL, 0);
 		} else {
 		    len = index2;
 		    if ((cur == start) && (index1 > 1)) {
 			content += (index1 - 1);
 			len -= (index1 - 1);
 		    } else {
 			len = index2;
 		    }
 		    tmp = xmlNewTextLen(content, len);
 		}
 		/* single sub text node selection */
 		if (list == NULL)
 		    return(tmp);
 		/* prune and return full set */
 		if (level == lastLevel)
 		    xmlAddNextSibling(last, tmp);
 		else
 		    xmlAddChild(last, tmp);
 		return(list);
 	    } else {	/* ending node not a text node */
 	        endLevel = level;	/* remember the level of the end node */
 		endFlag = 1;
 		/* last node - need to take care of properties + namespaces */
 		tmp = xmlDocCopyNode(cur, target, 2);
 		if (list == NULL) {
 		    list = tmp;
 		    listParent = cur->parent;
+		    last = tmp;
 		} else {
 		    if (level == lastLevel)
-			xmlAddNextSibling(last, tmp);
+			last = xmlAddNextSibling(last, tmp);
 		    else {
-			xmlAddChild(last, tmp);
+			last = xmlAddChild(last, tmp);
 			lastLevel = level;
 		    }
 		}
-		last = tmp;
 
 		if (index2 > 1) {
 		    end = xmlXIncludeGetNthChild(cur, index2 - 1);
 		    index2 = 0;
 		}
 		if ((cur == start) && (index1 > 1)) {
 		    cur = xmlXIncludeGetNthChild(cur, index1 - 1);
 		    index1 = 0;
 		}  else {
 		    cur = cur->children;
 		}
 		level++;	/* increment level to show change */
 		/*
 		 * Now gather the remaining nodes from cur to end
 		 */
 		continue;	/* while */
 	    }
 	} else if (cur == start) {	/* Not at the end, are we at start? */
 	    if ((cur->type == XML_TEXT_NODE) ||
 		(cur->type == XML_CDATA_SECTION_NODE)) {
 		const xmlChar *content = cur->content;
 
 		if (content == NULL) {
 		    tmp = xmlNewTextLen(NULL, 0);
 		} else {
 		    if (index1 > 1) {
 			content += (index1 - 1);
 			index1 = 0;
 		    }
 		    tmp = xmlNewText(content);
 		}
 		last = list = tmp;
 		listParent = cur->parent;
 	    } else {		/* Not text node */
 	        /*
 		 * start of the range - need to take care of
 		 * properties and namespaces
 		 */
 		tmp = xmlDocCopyNode(cur, target, 2);
 		list = last = tmp;
 		listParent = cur->parent;
 		if (index1 > 1) {	/* Do we need to position? */
 		    cur = xmlXIncludeGetNthChild(cur, index1 - 1);
 		    level = lastLevel = 1;
 		    index1 = 0;
 		    /*
 		     * Now gather the remaining nodes from cur to end
 		     */
 		    continue; /* while */
 		}
 	    }
 	} else {
 	    tmp = NULL;
 	    switch (cur->type) {
 		case XML_DTD_NODE:
 		case XML_ELEMENT_DECL:
 		case XML_ATTRIBUTE_DECL:
 		case XML_ENTITY_NODE:
 		    /* Do not copy DTD information */
 		    break;
 		case XML_ENTITY_DECL:
 		    /* handle crossing entities -> stack needed */
 		    break;
 		case XML_XINCLUDE_START:
 		case XML_XINCLUDE_END:
 		    /* don't consider it part of the tree content */
 		    break;
 		case XML_ATTRIBUTE_NODE:
 		    /* Humm, should not happen ! */
 		    break;
 		default:
 		    /*
 		     * Middle of the range - need to take care of
 		     * properties and namespaces
 		     */
 		    tmp = xmlDocCopyNode(cur, target, 2);
 		    break;
 	    }
 	    if (tmp != NULL) {
 		if (level == lastLevel)
-		    xmlAddNextSibling(last, tmp);
+		    last = xmlAddNextSibling(last, tmp);
 		else {
-		    xmlAddChild(last, tmp);
+		    last = xmlAddChild(last, tmp);
 		    lastLevel = level;
 		}
-		last = tmp;
 	    }
 	}
 	/*
 	 * Skip to next node in document order
 	 */
 	cur = xmlXPtrAdvanceNode(cur, &level);
 	if (endFlag && (level >= endLevel))
 	    break;
     }
     return(list);
 }
 
 /**
  * xmlXIncludeBuildNodeList:
  * @ctxt:  the XInclude context
  * @target:  the document target
  * @source:  the document source
  * @obj:  the XPointer result from the evaluation.
  *
  * Build a node list tree copy of the XPointer result.
  * This will drop Attributes and Namespace declarations.
  *
  * Returns an xmlNodePtr list or NULL.
  *         the caller has to free the node tree.
  */
@@ -1138,123 +1137,122 @@ static xmlNodePtr
 xmlXIncludeCopyXPointer(xmlXIncludeCtxtPtr ctxt, xmlDocPtr target,
 	                xmlDocPtr source, xmlXPathObjectPtr obj) {
     xmlNodePtr list = NULL, last = NULL;
     int i;
 
     if (source == NULL)
 	source = ctxt->doc;
     if ((ctxt == NULL) || (target == NULL) || (source == NULL) ||
 	(obj == NULL))
 	return(NULL);
     switch (obj->type) {
         case XPATH_NODESET: {
 	    xmlNodeSetPtr set = obj->nodesetval;
 	    if (set == NULL)
 		return(NULL);
 	    for (i = 0;i < set->nodeNr;i++) {
 		if (set->nodeTab[i] == NULL)
 		    continue;
 		switch (set->nodeTab[i]->type) {
 		    case XML_TEXT_NODE:
 		    case XML_CDATA_SECTION_NODE:
 		    case XML_ELEMENT_NODE:
 		    case XML_ENTITY_REF_NODE:
 		    case XML_ENTITY_NODE:
 		    case XML_PI_NODE:
 		    case XML_COMMENT_NODE:
 		    case XML_DOCUMENT_NODE:
 		    case XML_HTML_DOCUMENT_NODE:
 #ifdef LIBXML_DOCB_ENABLED
 		    case XML_DOCB_DOCUMENT_NODE:
 #endif
 		    case XML_XINCLUDE_END:
 			break;
 		    case XML_XINCLUDE_START: {
 	                xmlNodePtr tmp, cur = set->nodeTab[i];
 
 			cur = cur->next;
 			while (cur != NULL) {
 			    switch(cur->type) {
 				case XML_TEXT_NODE:
 				case XML_CDATA_SECTION_NODE:
 				case XML_ELEMENT_NODE:
 				case XML_ENTITY_REF_NODE:
 				case XML_ENTITY_NODE:
 				case XML_PI_NODE:
 				case XML_COMMENT_NODE:
 				    tmp = xmlXIncludeCopyNode(ctxt, target,
 							      source, cur);
 				    if (last == NULL) {
 					list = last = tmp;
 				    } else {
-					xmlAddNextSibling(last, tmp);
-					last = tmp;
+					last = xmlAddNextSibling(last, tmp);
 				    }
 				    cur = cur->next;
 				    continue;
 				default:
 				    break;
 			    }
 			    break;
 			}
 			continue;
 		    }
 		    case XML_ATTRIBUTE_NODE:
 		    case XML_NAMESPACE_DECL:
 		    case XML_DOCUMENT_TYPE_NODE:
 		    case XML_DOCUMENT_FRAG_NODE:
 		    case XML_NOTATION_NODE:
 		    case XML_DTD_NODE:
 		    case XML_ELEMENT_DECL:
 		    case XML_ATTRIBUTE_DECL:
 		    case XML_ENTITY_DECL:
 			continue; /* for */
 		}
 		if (last == NULL)
 		    list = last = xmlXIncludeCopyNode(ctxt, target, source,
 			                              set->nodeTab[i]);
 		else {
 		    xmlAddNextSibling(last,
 			    xmlXIncludeCopyNode(ctxt, target, source,
 				                set->nodeTab[i]));
 		    if (last->next != NULL)
 			last = last->next;
 		}
 	    }
 	    break;
 	}
 #ifdef LIBXML_XPTR_ENABLED
 	case XPATH_LOCATIONSET: {
 	    xmlLocationSetPtr set = (xmlLocationSetPtr) obj->user;
 	    if (set == NULL)
 		return(NULL);
 	    for (i = 0;i < set->locNr;i++) {
 		if (last == NULL)
 		    list = last = xmlXIncludeCopyXPointer(ctxt, target, source,
 			                                  set->locTab[i]);
 		else
 		    xmlAddNextSibling(last,
 			    xmlXIncludeCopyXPointer(ctxt, target, source,
 				                    set->locTab[i]));
 		if (last != NULL) {
 		    while (last->next != NULL)
 			last = last->next;
 		}
 	    }
 	    break;
 	}
 	case XPATH_RANGE:
 	    return(xmlXIncludeCopyRange(ctxt, target, source, obj));
 #endif
 	case XPATH_POINT:
 	    /* points are ignored in XInclude */
 	    break;
 	default:
 	    break;
     }
     return(list);
 }
 /************************************************************************
  *									*
  *			XInclude I/O handling				*
  *									*
  ************************************************************************/
diff --git a/xpointer.c b/xpointer.c
index 27a6a8ce..fe2fca5a 100644
--- a/xpointer.c
+++ b/xpointer.c
@@ -1432,172 +1432,171 @@ static xmlNodePtr
 xmlXPtrBuildRangeNodeList(xmlXPathObjectPtr range) {
     /* pointers to generated nodes */
     xmlNodePtr list = NULL, last = NULL, parent = NULL, tmp;
     /* pointers to traversal nodes */
     xmlNodePtr start, cur, end;
     int index1, index2;
 
     if (range == NULL)
 	return(NULL);
     if (range->type != XPATH_RANGE)
 	return(NULL);
     start = (xmlNodePtr) range->user;
 
     if ((start == NULL) || (start->type == XML_NAMESPACE_DECL))
 	return(NULL);
     end = range->user2;
     if (end == NULL)
 	return(xmlCopyNode(start, 1));
     if (end->type == XML_NAMESPACE_DECL)
         return(NULL);
 
     cur = start;
     index1 = range->index;
     index2 = range->index2;
     while (cur != NULL) {
 	if (cur == end) {
 	    if (cur->type == XML_TEXT_NODE) {
 		const xmlChar *content = cur->content;
 		int len;
 
 		if (content == NULL) {
 		    tmp = xmlNewTextLen(NULL, 0);
 		} else {
 		    len = index2;
 		    if ((cur == start) && (index1 > 1)) {
 			content += (index1 - 1);
 			len -= (index1 - 1);
 			index1 = 0;
 		    } else {
 			len = index2;
 		    }
 		    tmp = xmlNewTextLen(content, len);
 		}
 		/* single sub text node selection */
 		if (list == NULL)
 		    return(tmp);
 		/* prune and return full set */
 		if (last != NULL)
 		    xmlAddNextSibling(last, tmp);
 		else
 		    xmlAddChild(parent, tmp);
 		return(list);
 	    } else {
 		tmp = xmlCopyNode(cur, 0);
-		if (list == NULL)
+		if (list == NULL) {
 		    list = tmp;
-		else {
+		    parent = tmp;
+		} else {
 		    if (last != NULL)
-			xmlAddNextSibling(last, tmp);
+			parent = xmlAddNextSibling(last, tmp);
 		    else
-			xmlAddChild(parent, tmp);
+			parent = xmlAddChild(parent, tmp);
 		}
 		last = NULL;
-		parent = tmp;
 
 		if (index2 > 1) {
 		    end = xmlXPtrGetNthChild(cur, index2 - 1);
 		    index2 = 0;
 		}
 		if ((cur == start) && (index1 > 1)) {
 		    cur = xmlXPtrGetNthChild(cur, index1 - 1);
 		    index1 = 0;
 		} else {
 		    cur = cur->children;
 		}
 		/*
 		 * Now gather the remaining nodes from cur to end
 		 */
 		continue; /* while */
 	    }
 	} else if ((cur == start) &&
 		   (list == NULL) /* looks superfluous but ... */ ) {
 	    if ((cur->type == XML_TEXT_NODE) ||
 		(cur->type == XML_CDATA_SECTION_NODE)) {
 		const xmlChar *content = cur->content;
 
 		if (content == NULL) {
 		    tmp = xmlNewTextLen(NULL, 0);
 		} else {
 		    if (index1 > 1) {
 			content += (index1 - 1);
 		    }
 		    tmp = xmlNewText(content);
 		}
 		last = list = tmp;
 	    } else {
 		if ((cur == start) && (index1 > 1)) {
 		    tmp = xmlCopyNode(cur, 0);
 		    list = tmp;
 		    parent = tmp;
 		    last = NULL;
 		    cur = xmlXPtrGetNthChild(cur, index1 - 1);
 		    index1 = 0;
 		    /*
 		     * Now gather the remaining nodes from cur to end
 		     */
 		    continue; /* while */
 		}
 		tmp = xmlCopyNode(cur, 1);
 		list = tmp;
 		parent = NULL;
 		last = tmp;
 	    }
 	} else {
 	    tmp = NULL;
 	    switch (cur->type) {
 		case XML_DTD_NODE:
 		case XML_ELEMENT_DECL:
 		case XML_ATTRIBUTE_DECL:
 		case XML_ENTITY_NODE:
 		    /* Do not copy DTD information */
 		    break;
 		case XML_ENTITY_DECL:
 		    TODO /* handle crossing entities -> stack needed */
 		    break;
 		case XML_XINCLUDE_START:
 		case XML_XINCLUDE_END:
 		    /* don't consider it part of the tree content */
 		    break;
 		case XML_ATTRIBUTE_NODE:
 		    /* Humm, should not happen ! */
 		    STRANGE
 		    break;
 		default:
 		    tmp = xmlCopyNode(cur, 1);
 		    break;
 	    }
 	    if (tmp != NULL) {
 		if ((list == NULL) || ((last == NULL) && (parent == NULL)))  {
 		    STRANGE
 		    return(NULL);
 		}
 		if (last != NULL)
 		    xmlAddNextSibling(last, tmp);
 		else {
-		    xmlAddChild(parent, tmp);
-		    last = tmp;
+		    last = xmlAddChild(parent, tmp);
 		}
 	    }
 	}
 	/*
 	 * Skip to next node in document order
 	 */
 	if ((list == NULL) || ((last == NULL) && (parent == NULL)))  {
 	    STRANGE
 	    return(NULL);
 	}
 	cur = xmlXPtrAdvanceNode(cur, NULL);
     }
     return(list);
 }
 
 /**
  * xmlXPtrBuildNodeList:
  * @obj:  the XPointer result from the evaluation.
  *
  * Build a node list tree copy of the XPointer result.
  * This will drop Attributes and Namespace declarations.
  *
  * Returns an xmlNodePtr list or NULL.
  *         the caller has to free the node tree.
  */
