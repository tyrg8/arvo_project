commit 97e99f411228fe4f65ebb60e4f2c56f9ee9cdb1c
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Thu Oct 5 17:11:24 2023 +0200

    parser: Acknowledge that entities with namespaces are broken
    
    Entities which reference out-of-scope namespace have always been broken.
    xmlParseBalancedChunkMemoryInternal tried to reuse the namespaces
    currently in scope but these namespaces were ignored by the SAX handler.
    Besides, there could be different namespaces in scope when expanding the
    entity again. For example:
    
        <!DOCTYPE doc [
          <!ENTITY ent "<ns:elem/>">
        ]>
        <doc>
          <decl1 xmlns:ns="urn:ns1">
            &ent;
          </decl1>
          <decl2 xmlns:ns="urn:ns2">
            &ent;
          </decl2>
        </doc>
    
    Add some comments outlining possible solutions to this problem.
    
    For now, we stop copying namespaces to the temporary parser context
    in xmlParseBalancedChunkMemoryInternal. This has never really worked
    and the recent changes contained a partial fix which uncovered other
    problems like a use-after-free with the XML Reader interface, found
    by OSS-Fuzz.

diff --git a/parser.c b/parser.c
index 7de41a26..40972af9 100644
--- a/parser.c
+++ b/parser.c
@@ -7205,422 +7205,455 @@ void
 xmlParseReference(xmlParserCtxtPtr ctxt) {
     xmlEntityPtr ent;
     xmlChar *val;
     int was_checked;
     xmlNodePtr list = NULL;
     xmlParserErrors ret = XML_ERR_OK;
 
 
     if (RAW != '&')
         return;
 
     /*
      * Simple case of a CharRef
      */
     if (NXT(1) == '#') {
 	int i = 0;
 	xmlChar out[16];
 	int value = xmlParseCharRef(ctxt);
 
 	if (value == 0)
 	    return;
 
         /*
          * Just encode the value in UTF-8
          */
         COPY_BUF(0, out, i, value);
         out[i] = 0;
         if ((ctxt->sax != NULL) && (ctxt->sax->characters != NULL) &&
             (!ctxt->disableSAX))
             ctxt->sax->characters(ctxt->userData, out, i);
 	return;
     }
 
     /*
      * We are seeing an entity reference
      */
     ent = xmlParseEntityRef(ctxt);
     if (ent == NULL) return;
     if (!ctxt->wellFormed)
 	return;
     was_checked = ent->flags & XML_ENT_PARSED;
 
     /* special case of predefined entities */
     if ((ent->name == NULL) ||
         (ent->etype == XML_INTERNAL_PREDEFINED_ENTITY)) {
 	val = ent->content;
 	if (val == NULL) return;
 	/*
 	 * inline the entity.
 	 */
 	if ((ctxt->sax != NULL) && (ctxt->sax->characters != NULL) &&
 	    (!ctxt->disableSAX))
 	    ctxt->sax->characters(ctxt->userData, val, xmlStrlen(val));
 	return;
     }
 
     /*
      * The first reference to the entity trigger a parsing phase
      * where the ent->children is filled with the result from
      * the parsing.
      * Note: external parsed entities will not be loaded, it is not
      * required for a non-validating parser, unless the parsing option
      * of validating, or substituting entities were given. Doing so is
      * far more secure as the parser will only process data coming from
      * the document entity by default.
+     *
+     * FIXME: This doesn't work correctly since entities can be
+     * expanded with different namespace declarations in scope.
+     * For example:
+     *
+     * <!DOCTYPE doc [
+     *   <!ENTITY ent "<ns:elem/>">
+     * ]>
+     * <doc>
+     *   <decl1 xmlns:ns="urn:ns1">
+     *     &ent;
+     *   </decl1>
+     *   <decl2 xmlns:ns="urn:ns2">
+     *     &ent;
+     *   </decl2>
+     * </doc>
+     *
+     * Proposed fix:
+     *
+     * - Remove the ent->owner optimization which tries to avoid the
+     *   initial copy of the entity. Always make entities own the
+     *   subtree.
+     * - Ignore current namespace declarations when parsing the
+     *   entity. If a prefix can't be resolved, don't report an error
+     *   but mark it as unresolved.
+     * - Try to resolve these prefixes when expanding the entity.
+     *   This will require a specialized version of xmlStaticCopyNode
+     *   which can also make use of the namespace hash table to avoid
+     *   quadratic behavior.
+     *
+     * Alternatively, we could simply reparse the entity on each
+     * expansion like we already do with custom SAX callbacks.
+     * External entity content should be cached in this case.
      */
     if (((ent->flags & XML_ENT_PARSED) == 0) &&
         ((ent->etype != XML_EXTERNAL_GENERAL_PARSED_ENTITY) ||
          (ctxt->options & (XML_PARSE_NOENT | XML_PARSE_DTDVALID)))) {
 	unsigned long oldsizeentcopy = ctxt->sizeentcopy;
 
 	/*
 	 * This is a bit hackish but this seems the best
 	 * way to make sure both SAX and DOM entity support
 	 * behaves okay.
 	 */
 	void *user_data;
 	if (ctxt->userData == ctxt)
 	    user_data = NULL;
 	else
 	    user_data = ctxt->userData;
 
         /* Avoid overflow as much as possible */
         ctxt->sizeentcopy = 0;
 
         if (ent->flags & XML_ENT_EXPANDING) {
             xmlFatalErr(ctxt, XML_ERR_ENTITY_LOOP, NULL);
             xmlHaltParser(ctxt);
             return;
         }
 
         ent->flags |= XML_ENT_EXPANDING;
 
 	/*
 	 * Check that this entity is well formed
 	 * 4.3.2: An internal general parsed entity is well-formed
 	 * if its replacement text matches the production labeled
 	 * content.
 	 */
 	if (ent->etype == XML_INTERNAL_GENERAL_ENTITY) {
 	    ctxt->depth++;
 	    ret = xmlParseBalancedChunkMemoryInternal(ctxt, ent->content,
 	                                              user_data, &list);
 	    ctxt->depth--;
 
 	} else if (ent->etype == XML_EXTERNAL_GENERAL_PARSED_ENTITY) {
 	    ctxt->depth++;
 	    ret = xmlParseExternalEntityPrivate(ctxt->myDoc, ctxt, ctxt->sax,
 	                                   user_data, ctxt->depth, ent->URI,
 					   ent->ExternalID, &list);
 	    ctxt->depth--;
 	} else {
 	    ret = XML_ERR_ENTITY_PE_INTERNAL;
 	    xmlErrMsgStr(ctxt, XML_ERR_INTERNAL_ERROR,
 			 "invalid entity type found\n", NULL);
 	}
 
         ent->flags &= ~XML_ENT_EXPANDING;
         ent->flags |= XML_ENT_PARSED | XML_ENT_CHECKED;
         ent->expandedSize = ctxt->sizeentcopy;
 	if (ret == XML_ERR_ENTITY_LOOP) {
             xmlHaltParser(ctxt);
 	    xmlFreeNodeList(list);
 	    return;
 	}
 	if (xmlParserEntityCheck(ctxt, oldsizeentcopy)) {
 	    xmlFreeNodeList(list);
 	    return;
 	}
 
 	if ((ret == XML_ERR_OK) && (list != NULL)) {
             ent->children = list;
             /*
              * Prune it directly in the generated document
              * except for single text nodes.
              */
             if ((ctxt->replaceEntities == 0) ||
                 (ctxt->parseMode == XML_PARSE_READER) ||
                 ((list->type == XML_TEXT_NODE) &&
                  (list->next == NULL))) {
                 ent->owner = 1;
                 while (list != NULL) {
                     list->parent = (xmlNodePtr) ent;
                     if (list->doc != ent->doc)
                         xmlSetTreeDoc(list, ent->doc);
                     if (list->next == NULL)
                         ent->last = list;
                     list = list->next;
                 }
                 list = NULL;
             } else {
                 ent->owner = 0;
                 while (list != NULL) {
                     list->parent = (xmlNodePtr) ctxt->node;
                     list->doc = ctxt->myDoc;
                     if (list->next == NULL)
                         ent->last = list;
                     list = list->next;
                 }
                 list = ent->children;
 #ifdef LIBXML_LEGACY_ENABLED
                 if (ent->etype == XML_EXTERNAL_GENERAL_PARSED_ENTITY)
                     xmlAddEntityReference(ent, list, NULL);
 #endif /* LIBXML_LEGACY_ENABLED */
             }
 	} else if ((ret != XML_ERR_OK) &&
 		   (ret != XML_WAR_UNDECLARED_ENTITY)) {
 	    xmlFatalErrMsgStr(ctxt, XML_ERR_UNDECLARED_ENTITY,
 		     "Entity '%s' failed to parse\n", ent->name);
             if (ent->content != NULL)
                 ent->content[0] = 0;
 	} else if (list != NULL) {
 	    xmlFreeNodeList(list);
 	    list = NULL;
 	}
 
         /* Prevent entity from being parsed and expanded twice (Bug 760367). */
         was_checked = 0;
     }
 
     /*
      * Now that the entity content has been gathered
      * provide it to the application, this can take different forms based
      * on the parsing modes.
      */
     if (ent->children == NULL) {
 	/*
 	 * Probably running in SAX mode and the callbacks don't
 	 * build the entity content. So unless we already went
 	 * though parsing for first checking go though the entity
 	 * content to generate callbacks associated to the entity
 	 */
 	if (was_checked != 0) {
 	    void *user_data;
 	    /*
 	     * This is a bit hackish but this seems the best
 	     * way to make sure both SAX and DOM entity support
 	     * behaves okay.
 	     */
 	    if (ctxt->userData == ctxt)
 		user_data = NULL;
 	    else
 		user_data = ctxt->userData;
 
 	    if (ent->etype == XML_INTERNAL_GENERAL_ENTITY) {
 		ctxt->depth++;
 		ret = xmlParseBalancedChunkMemoryInternal(ctxt,
 				   ent->content, user_data, NULL);
 		ctxt->depth--;
 	    } else if (ent->etype ==
 		       XML_EXTERNAL_GENERAL_PARSED_ENTITY) {
 	        unsigned long oldsizeentities = ctxt->sizeentities;
 
 		ctxt->depth++;
 		ret = xmlParseExternalEntityPrivate(ctxt->myDoc, ctxt,
 			   ctxt->sax, user_data, ctxt->depth,
 			   ent->URI, ent->ExternalID, NULL);
 		ctxt->depth--;
 
                 /* Undo the change to sizeentities */
                 ctxt->sizeentities = oldsizeentities;
 	    } else {
 		ret = XML_ERR_ENTITY_PE_INTERNAL;
 		xmlErrMsgStr(ctxt, XML_ERR_INTERNAL_ERROR,
 			     "invalid entity type found\n", NULL);
 	    }
 	    if (ret == XML_ERR_ENTITY_LOOP) {
 		xmlFatalErr(ctxt, XML_ERR_ENTITY_LOOP, NULL);
 		return;
 	    }
             if (xmlParserEntityCheck(ctxt, 0))
                 return;
 	}
 	if ((ctxt->sax != NULL) && (ctxt->sax->reference != NULL) &&
 	    (ctxt->replaceEntities == 0) && (!ctxt->disableSAX)) {
 	    /*
 	     * Entity reference callback comes second, it's somewhat
 	     * superfluous but a compatibility to historical behaviour
 	     */
 	    ctxt->sax->reference(ctxt->userData, ent->name);
 	}
 	return;
     }
 
     /*
      * We also check for amplification if entities aren't substituted.
      * They might be expanded later.
      */
     if ((was_checked != 0) &&
         (xmlParserEntityCheck(ctxt, ent->expandedSize)))
         return;
 
     /*
      * If we didn't get any children for the entity being built
      */
     if ((ctxt->sax != NULL) && (ctxt->sax->reference != NULL) &&
 	(ctxt->replaceEntities == 0) && (!ctxt->disableSAX)) {
 	/*
 	 * Create a node.
 	 */
 	ctxt->sax->reference(ctxt->userData, ent->name);
 	return;
     }
 
     if (ctxt->replaceEntities)  {
 	/*
 	 * There is a problem on the handling of _private for entities
 	 * (bug 155816): Should we copy the content of the field from
 	 * the entity (possibly overwriting some value set by the user
 	 * when a copy is created), should we leave it alone, or should
 	 * we try to take care of different situations?  The problem
 	 * is exacerbated by the usage of this field by the xmlReader.
 	 * To fix this bug, we look at _private on the created node
 	 * and, if it's NULL, we copy in whatever was in the entity.
 	 * If it's not NULL we leave it alone.  This is somewhat of a
 	 * hack - maybe we should have further tests to determine
 	 * what to do.
 	 */
 	if (ctxt->node != NULL) {
 	    /*
 	     * Seems we are generating the DOM content, do
 	     * a simple tree copy for all references except the first
 	     * In the first occurrence list contains the replacement.
 	     */
 	    if (((list == NULL) && (ent->owner == 0)) ||
 		(ctxt->parseMode == XML_PARSE_READER)) {
 		xmlNodePtr nw = NULL, cur, firstChild = NULL;
 
 		/*
 		 * when operating on a reader, the entities definitions
 		 * are always owning the entities subtree.
 		if (ctxt->parseMode == XML_PARSE_READER)
 		    ent->owner = 1;
 		 */
 
 		cur = ent->children;
 		while (cur != NULL) {
 		    nw = xmlDocCopyNode(cur, ctxt->myDoc, 1);
 		    if (nw != NULL) {
 			if (nw->_private == NULL)
 			    nw->_private = cur->_private;
 			if (firstChild == NULL){
 			    firstChild = nw;
 			}
 			nw = xmlAddChild(ctxt->node, nw);
 		    }
 		    if (cur == ent->last) {
 			/*
 			 * needed to detect some strange empty
 			 * node cases in the reader tests
 			 */
 			if ((ctxt->parseMode == XML_PARSE_READER) &&
 			    (nw != NULL) &&
 			    (nw->type == XML_ELEMENT_NODE) &&
 			    (nw->children == NULL))
 			    nw->extra = 1;
 
 			break;
 		    }
 		    cur = cur->next;
 		}
 #ifdef LIBXML_LEGACY_ENABLED
 		if (ent->etype == XML_EXTERNAL_GENERAL_PARSED_ENTITY)
 		  xmlAddEntityReference(ent, firstChild, nw);
 #endif /* LIBXML_LEGACY_ENABLED */
 	    } else if ((list == NULL) || (ctxt->inputNr > 0)) {
 		xmlNodePtr nw = NULL, cur, next, last,
 			   firstChild = NULL;
 
 		/*
 		 * Copy the entity child list and make it the new
 		 * entity child list. The goal is to make sure any
 		 * ID or REF referenced will be the one from the
 		 * document content and not the entity copy.
 		 */
 		cur = ent->children;
 		ent->children = NULL;
 		last = ent->last;
 		ent->last = NULL;
 		while (cur != NULL) {
 		    next = cur->next;
 		    cur->next = NULL;
 		    cur->parent = NULL;
 		    nw = xmlDocCopyNode(cur, ctxt->myDoc, 1);
 		    if (nw != NULL) {
 			if (nw->_private == NULL)
 			    nw->_private = cur->_private;
 			if (firstChild == NULL){
 			    firstChild = cur;
 			}
 			xmlAddChild((xmlNodePtr) ent, nw);
 		    }
 		    xmlAddChild(ctxt->node, cur);
 		    if (cur == last)
 			break;
 		    cur = next;
 		}
 		if (ent->owner == 0)
 		    ent->owner = 1;
 #ifdef LIBXML_LEGACY_ENABLED
 		if (ent->etype == XML_EXTERNAL_GENERAL_PARSED_ENTITY)
 		  xmlAddEntityReference(ent, firstChild, nw);
 #endif /* LIBXML_LEGACY_ENABLED */
 	    } else {
 		const xmlChar *nbktext;
 
 		/*
 		 * the name change is to avoid coalescing of the
 		 * node with a possible previous text one which
 		 * would make ent->children a dangling pointer
 		 */
 		nbktext = xmlDictLookup(ctxt->dict, BAD_CAST "nbktext",
 					-1);
 		if (ent->children->type == XML_TEXT_NODE)
 		    ent->children->name = nbktext;
 		if ((ent->last != ent->children) &&
 		    (ent->last->type == XML_TEXT_NODE))
 		    ent->last->name = nbktext;
 		xmlAddChildList(ctxt->node, ent->children);
 	    }
 
 	    /*
 	     * This is to avoid a nasty side effect, see
 	     * characters() in SAX.c
 	     */
 	    ctxt->nodemem = 0;
 	    ctxt->nodelen = 0;
 	    return;
 	}
     }
 }
 
 /**
  * xmlParseEntityRef:
  * @ctxt:  an XML parser context
  *
  * DEPRECATED: Internal function, don't use.
  *
  * Parse an entitiy reference. Always consumes '&'.
  *
  * [68] EntityRef ::= '&' Name ';'
  *
  * [ WFC: Entity Declared ]
  * In a document without any DTD, a document with only an internal DTD
  * subset which contains no parameter entity references, or a document
  * with "standalone='yes'", the Name given in the entity reference
  * must match that in an entity declaration, except that well-formed
  * documents need not declare any of the following entities: amp, lt,
  * gt, apos, quot.  The declaration of a parameter entity must precede
  * any reference to it.  Similarly, the declaration of a general entity
  * must precede any reference to it which appears in a default value in an
  * attribute-list declaration. Note that if entities are declared in the
  * external subset or in external parameter entities, a non-validating
  * processor is not obligated to read and process their declarations;
  * for such documents, the rule that an entity must be declared is a
  * well-formedness constraint only if standalone='yes'.
  *
  * [ WFC: Parsed Entity ]
  * An entity reference must not contain the name of an unparsed entity
  *
  * Returns the xmlEntityPtr if found, or NULL otherwise.
  */
@@ -12870,171 +12903,182 @@ static xmlParserErrors
 xmlParseBalancedChunkMemoryInternal(xmlParserCtxtPtr oldctxt,
 	const xmlChar *string, void *user_data, xmlNodePtr *lst) {
     xmlParserCtxtPtr ctxt;
     xmlDocPtr newDoc = NULL;
     xmlNodePtr newRoot;
     xmlSAXHandlerPtr oldsax = NULL;
     xmlNodePtr content = NULL;
     xmlNodePtr last = NULL;
     xmlParserErrors ret = XML_ERR_OK;
+#if 0
     unsigned i;
+#endif
 
     if (((oldctxt->depth > 40) && ((oldctxt->options & XML_PARSE_HUGE) == 0)) ||
         (oldctxt->depth >  100)) {
 	xmlFatalErrMsg(oldctxt, XML_ERR_ENTITY_LOOP,
                        "Maximum entity nesting depth exceeded");
 	return(XML_ERR_ENTITY_LOOP);
     }
 
 
     if (lst != NULL)
         *lst = NULL;
     if (string == NULL)
         return(XML_ERR_INTERNAL_ERROR);
 
     ctxt = xmlCreateDocParserCtxt(string);
     if (ctxt == NULL) return(XML_WAR_UNDECLARED_ENTITY);
     ctxt->nbErrors = oldctxt->nbErrors;
     ctxt->nbWarnings = oldctxt->nbWarnings;
     if (user_data != NULL)
 	ctxt->userData = user_data;
     else
 	ctxt->userData = ctxt;
     if (ctxt->dict != NULL) xmlDictFree(ctxt->dict);
     ctxt->dict = oldctxt->dict;
     ctxt->input_id = oldctxt->input_id;
     ctxt->str_xml = xmlDictLookup(ctxt->dict, BAD_CAST "xml", 3);
     ctxt->str_xmlns = xmlDictLookup(ctxt->dict, BAD_CAST "xmlns", 5);
     ctxt->str_xml_ns = xmlDictLookup(ctxt->dict, XML_XML_NAMESPACE, 36);
 
-    /* propagate namespaces down the entity */
-    if (oldctxt->nsdb != NULL) {
-        for (i = 0; i < oldctxt->nsdb->hashSize; i++) {
-            xmlParserNsBucket *bucket = &oldctxt->nsdb->hash[i];
-            xmlHashedString hprefix, huri;
-            const xmlChar **ns;
-            xmlParserNsExtra *extra;
-            unsigned nsIndex;
-
-            if ((bucket->hashValue != 0) &&
-                (bucket->index != INT_MAX)) {
-                nsIndex = bucket->index;
-                ns = &oldctxt->nsTab[nsIndex * 2];
-                extra = &oldctxt->nsdb->extra[nsIndex];
-
-                hprefix.name = ns[0];
-                hprefix.hashValue = bucket->hashValue;
-                huri.name = ns[1];
-                huri.hashValue = extra->uriHashValue;
-                xmlParserNsPush(ctxt, &hprefix, &huri, extra->saxData, 0);
-            }
+    /*
+     * Propagate namespaces down the entity
+     *
+     * This is disabled for now. The pre-2.12 code was already broken
+     * since the SAX handler was using xmlSearchNs which didn't see the
+     * namespaces added here.
+     *
+     * Making entities and namespaces work correctly requires additional
+     * changes, see xmlParseReference.
+     */
+#if 0
+    for (i = 0; i < oldctxt->nsdb->hashSize; i++) {
+        xmlParserNsBucket *bucket = &oldctxt->nsdb->hash[i];
+        xmlHashedString hprefix, huri;
+        const xmlChar **ns;
+        xmlParserNsExtra *extra;
+        unsigned nsIndex;
+
+        if ((bucket->hashValue != 0) &&
+            (bucket->index != INT_MAX)) {
+            nsIndex = bucket->index;
+            ns = &oldctxt->nsTab[nsIndex * 2];
+            extra = &oldctxt->nsdb->extra[nsIndex];
+
+            hprefix.name = ns[0];
+            hprefix.hashValue = bucket->hashValue;
+            huri.name = ns[1];
+            huri.hashValue = extra->uriHashValue;
+            xmlParserNsPush(ctxt, &hprefix, &huri, extra->saxData, 0);
         }
     }
+#endif
 
     oldsax = ctxt->sax;
     ctxt->sax = oldctxt->sax;
     xmlDetectSAX2(ctxt);
     ctxt->replaceEntities = oldctxt->replaceEntities;
     ctxt->options = oldctxt->options;
 
     ctxt->_private = oldctxt->_private;
     if (oldctxt->myDoc == NULL) {
 	newDoc = xmlNewDoc(BAD_CAST "1.0");
 	if (newDoc == NULL) {
             ret = XML_ERR_INTERNAL_ERROR;
             goto error;
 	}
 	newDoc->properties = XML_DOC_INTERNAL;
 	newDoc->dict = ctxt->dict;
 	xmlDictReference(newDoc->dict);
 	ctxt->myDoc = newDoc;
     } else {
 	ctxt->myDoc = oldctxt->myDoc;
         content = ctxt->myDoc->children;
 	last = ctxt->myDoc->last;
     }
     newRoot = xmlNewDocNode(ctxt->myDoc, NULL, BAD_CAST "pseudoroot", NULL);
     if (newRoot == NULL) {
         ret = XML_ERR_INTERNAL_ERROR;
         goto error;
     }
     ctxt->myDoc->children = NULL;
     ctxt->myDoc->last = NULL;
     xmlAddChild((xmlNodePtr) ctxt->myDoc, newRoot);
     nodePush(ctxt, ctxt->myDoc->children);
     ctxt->instate = XML_PARSER_CONTENT;
     ctxt->depth = oldctxt->depth;
 
     ctxt->validate = 0;
     ctxt->loadsubset = oldctxt->loadsubset;
     if ((oldctxt->validate) || (oldctxt->replaceEntities != 0)) {
 	/*
 	 * ID/IDREF registration will be done in xmlValidateElement below
 	 */
 	ctxt->loadsubset |= XML_SKIP_IDS;
     }
     ctxt->dictNames = oldctxt->dictNames;
     ctxt->attsDefault = oldctxt->attsDefault;
     ctxt->attsSpecial = oldctxt->attsSpecial;
 
     xmlParseContent(ctxt);
     if ((RAW == '<') && (NXT(1) == '/')) {
 	xmlFatalErr(ctxt, XML_ERR_NOT_WELL_BALANCED, NULL);
     } else if (RAW != 0) {
 	xmlFatalErr(ctxt, XML_ERR_EXTRA_CONTENT, NULL);
     }
     if (ctxt->node != ctxt->myDoc->children) {
 	xmlFatalErr(ctxt, XML_ERR_NOT_WELL_BALANCED, NULL);
     }
 
     if (!ctxt->wellFormed) {
 	ret = (xmlParserErrors)ctxt->errNo;
         oldctxt->errNo = ctxt->errNo;
         oldctxt->wellFormed = 0;
         xmlCopyError(&ctxt->lastError, &oldctxt->lastError);
     } else {
         ret = XML_ERR_OK;
     }
 
     if ((lst != NULL) && (ret == XML_ERR_OK)) {
 	xmlNodePtr cur;
 
 	/*
 	 * Return the newly created nodeset after unlinking it from
 	 * they pseudo parent.
 	 */
 	cur = ctxt->myDoc->children->children;
 	*lst = cur;
 	while (cur != NULL) {
 #ifdef LIBXML_VALID_ENABLED
 	    if ((oldctxt->validate) && (oldctxt->wellFormed) &&
 		(oldctxt->myDoc) && (oldctxt->myDoc->intSubset) &&
 		(cur->type == XML_ELEMENT_NODE)) {
 		oldctxt->valid &= xmlValidateElement(&oldctxt->vctxt,
 			oldctxt->myDoc, cur);
 	    }
 #endif /* LIBXML_VALID_ENABLED */
 	    cur->parent = NULL;
 	    cur = cur->next;
 	}
 	ctxt->myDoc->children->children = NULL;
     }
     if (ctxt->myDoc != NULL) {
 	xmlFreeNode(ctxt->myDoc->children);
         ctxt->myDoc->children = content;
         ctxt->myDoc->last = last;
     }
 
     /*
      * Also record the size of the entity parsed
      */
     if (ctxt->input != NULL && oldctxt != NULL) {
         unsigned long consumed = ctxt->input->consumed;
 
         xmlSaturatedAddSizeT(&consumed, ctxt->input->cur - ctxt->input->base);
 
         xmlSaturatedAdd(&oldctxt->sizeentcopy, consumed);
         xmlSaturatedAdd(&oldctxt->sizeentcopy, ctxt->sizeentcopy);
     }
 
     oldctxt->nbErrors = ctxt->nbErrors;
     oldctxt->nbWarnings = ctxt->nbWarnings;
diff --git a/tree.c b/tree.c
index fe02b414..a6264e8b 100644
--- a/tree.c
+++ b/tree.c
@@ -4099,189 +4099,192 @@ xmlNodePtr
 xmlStaticCopyNode(xmlNodePtr node, xmlDocPtr doc, xmlNodePtr parent,
                   int extended) {
     xmlNodePtr ret;
 
     if (node == NULL) return(NULL);
     switch (node->type) {
         case XML_TEXT_NODE:
         case XML_CDATA_SECTION_NODE:
         case XML_ELEMENT_NODE:
         case XML_DOCUMENT_FRAG_NODE:
         case XML_ENTITY_REF_NODE:
         case XML_ENTITY_NODE:
         case XML_PI_NODE:
         case XML_COMMENT_NODE:
         case XML_XINCLUDE_START:
         case XML_XINCLUDE_END:
 	    break;
         case XML_ATTRIBUTE_NODE:
 		return((xmlNodePtr) xmlCopyPropInternal(doc, parent, (xmlAttrPtr) node));
         case XML_NAMESPACE_DECL:
 	    return((xmlNodePtr) xmlCopyNamespaceList((xmlNsPtr) node));
 
         case XML_DOCUMENT_NODE:
         case XML_HTML_DOCUMENT_NODE:
 #ifdef LIBXML_TREE_ENABLED
 	    return((xmlNodePtr) xmlCopyDoc((xmlDocPtr) node, extended));
 #endif /* LIBXML_TREE_ENABLED */
         case XML_DOCUMENT_TYPE_NODE:
         case XML_NOTATION_NODE:
         case XML_DTD_NODE:
         case XML_ELEMENT_DECL:
         case XML_ATTRIBUTE_DECL:
         case XML_ENTITY_DECL:
             return(NULL);
     }
 
     /*
      * Allocate a new node and fill the fields.
      */
     ret = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
     if (ret == NULL) {
 	xmlTreeErrMemory("copying node");
 	return(NULL);
     }
     memset(ret, 0, sizeof(xmlNode));
     ret->type = node->type;
 
     ret->doc = doc;
     ret->parent = parent;
     if (node->name == xmlStringText)
 	ret->name = xmlStringText;
     else if (node->name == xmlStringTextNoenc)
 	ret->name = xmlStringTextNoenc;
     else if (node->name == xmlStringComment)
 	ret->name = xmlStringComment;
     else if (node->name != NULL) {
         if ((doc != NULL) && (doc->dict != NULL))
 	    ret->name = xmlDictLookup(doc->dict, node->name, -1);
 	else
 	    ret->name = xmlStrdup(node->name);
     }
     if ((node->type != XML_ELEMENT_NODE) &&
 	(node->content != NULL) &&
 	(node->type != XML_ENTITY_REF_NODE) &&
 	(node->type != XML_XINCLUDE_END) &&
 	(node->type != XML_XINCLUDE_START)) {
 	ret->content = xmlStrdup(node->content);
     }else{
       if (node->type == XML_ELEMENT_NODE)
         ret->line = node->line;
     }
     if (parent != NULL) {
 	xmlNodePtr tmp;
 
 	/*
 	 * this is a tricky part for the node register thing:
 	 * in case ret does get coalesced in xmlAddChild
 	 * the deregister-node callback is called; so we register ret now already
 	 */
 	if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))
 	    xmlRegisterNodeDefaultValue((xmlNodePtr)ret);
 
         /*
          * Note that since ret->parent is already set, xmlAddChild will
          * return early and not actually insert the node. It will only
          * coalesce text nodes and unnecessarily call xmlSetTreeDoc.
          * Assuming that the subtree to be copied always has its text
          * nodes coalesced, the somewhat confusing call to xmlAddChild
          * could be removed.
          */
         tmp = xmlAddChild(parent, ret);
 	/* node could have coalesced */
 	if (tmp != ret)
 	    return(tmp);
     }
 
     if (!extended)
 	goto out;
     if (((node->type == XML_ELEMENT_NODE) ||
          (node->type == XML_XINCLUDE_START)) && (node->nsDef != NULL))
         ret->nsDef = xmlCopyNamespaceList(node->nsDef);
 
     if (node->ns != NULL) {
         xmlNsPtr ns;
 
 	ns = xmlSearchNs(doc, ret, node->ns->prefix);
 	if (ns == NULL) {
 	    /*
 	     * Humm, we are copying an element whose namespace is defined
 	     * out of the new tree scope. Search it in the original tree
-	     * and add it at the top of the new tree
+	     * and add it at the top of the new tree.
+             *
+             * TODO: Searching the original tree seems unnecessary. We
+             * already have a namespace URI.
 	     */
 	    ns = xmlSearchNs(node->doc, node, node->ns->prefix);
 	    if (ns != NULL) {
 	        xmlNodePtr root = ret;
 
 		while (root->parent != NULL) root = root->parent;
 		ret->ns = xmlNewNs(root, ns->href, ns->prefix);
-		} else {
-			ret->ns = xmlNewReconciledNs(doc, ret, node->ns);
+            } else {
+                ret->ns = xmlNewReconciledNs(doc, ret, node->ns);
 	    }
 	} else {
 	    /*
 	     * reference the existing namespace definition in our own tree.
 	     */
 	    ret->ns = ns;
 	}
     }
     if (((node->type == XML_ELEMENT_NODE) ||
          (node->type == XML_XINCLUDE_START)) && (node->properties != NULL))
         ret->properties = xmlCopyPropList(ret, node->properties);
     if (node->type == XML_ENTITY_REF_NODE) {
 	if ((doc == NULL) || (node->doc != doc)) {
 	    /*
 	     * The copied node will go into a separate document, so
 	     * to avoid dangling references to the ENTITY_DECL node
 	     * we cannot keep the reference. Try to find it in the
 	     * target document.
 	     */
 	    ret->children = (xmlNodePtr) xmlGetDocEntity(doc, ret->name);
 	} else {
             ret->children = node->children;
 	}
 	ret->last = ret->children;
     } else if ((node->children != NULL) && (extended != 2)) {
         xmlNodePtr cur, insert;
 
         cur = node->children;
         insert = ret;
         while (cur != NULL) {
             xmlNodePtr copy = xmlStaticCopyNode(cur, doc, insert, 2);
             if (copy == NULL) {
                 xmlFreeNode(ret);
                 return(NULL);
             }
 
             /* Check for coalesced text nodes */
             if (insert->last != copy) {
                 if (insert->last == NULL) {
                     insert->children = copy;
                 } else {
                     copy->prev = insert->last;
                     insert->last->next = copy;
                 }
                 insert->last = copy;
             }
 
             if ((cur->type != XML_ENTITY_REF_NODE) &&
                 (cur->children != NULL)) {
                 cur = cur->children;
                 insert = copy;
                 continue;
             }
 
             while (1) {
                 if (cur->next != NULL) {
                     cur = cur->next;
                     break;
                 }
 
                 cur = cur->parent;
                 insert = insert->parent;
                 if (cur == node) {
                     cur = NULL;
                     break;
                 }
             }
         }
     }
