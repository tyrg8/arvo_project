commit 4d1ca7035df8d1688b7d85e6495722f57870726f
Author: Yifeng Sun <pkusunyifeng@gmail.com>
Date:   Tue Nov 27 16:10:11 2018 -0800

    ofctl_parse_target: Fix memory leaks if there is no usable protocol
    
    When there is no usable protocol, ofctl_parse_flows__ returns without
    properly freeing memory. A previous patch failed to fix this issue.
    This patch fixes it.
    
    Reported-at: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=11406
    Reported-at: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=11408
    Signed-off-by: Yifeng Sun <pkusunyifeng@gmail.com>
    Signed-off-by: Ben Pfaff <blp@ovn.org>

diff --git a/tests/oss-fuzz/ofctl_parse_target.c b/tests/oss-fuzz/ofctl_parse_target.c
index d4712a442..b4db52f7e 100644
--- a/tests/oss-fuzz/ofctl_parse_target.c
+++ b/tests/oss-fuzz/ofctl_parse_target.c
@@ -12,39 +12,43 @@ static void
 ofctl_parse_flows__(struct ofputil_flow_mod *fms, size_t n_fms,
                     enum ofputil_protocol usable_protocols)
 {
     enum ofputil_protocol protocol = 0;
     char *usable_s;
     size_t i;
 
     usable_s = ofputil_protocols_to_string(usable_protocols);
     printf("usable protocols: %s\n", usable_s);
     free(usable_s);
 
     if (!(usable_protocols & OFPUTIL_P_ANY)) {
         printf("no usable protocol\n");
-        return;
+        goto free;
     }
     for (i = 0; i < sizeof(enum ofputil_protocol) * CHAR_BIT; i++) {
         protocol = 1u << i;
         if (protocol & usable_protocols & OFPUTIL_P_ANY) {
             break;
         }
     }
     ovs_assert(is_pow2(protocol));
 
     printf("chosen protocol: %s\n", ofputil_protocol_to_string(protocol));
 
     for (i = 0; i < n_fms; i++) {
         struct ofputil_flow_mod *fm = &fms[i];
         struct ofpbuf *msg;
 
         msg = ofputil_encode_flow_mod(fm, protocol);
         ofpbuf_delete(msg);
+    }
 
+free:
+    for (i = 0; i < n_fms; i++) {
+        struct ofputil_flow_mod *fm = &fms[i];
         free(CONST_CAST(struct ofpact *, fm->ofpacts));
         minimatch_destroy(&fm->match);
     }
 }
 
 /* "parse-flow FLOW": parses the argument as a flow (like add-flow) and prints
  * it back to stdout.  */
@@ -52,17 +56,16 @@ static void
 ofctl_parse_flow(const char *input, int command)
 {
     enum ofputil_protocol usable_protocols;
     struct ofputil_flow_mod fm;
     char *error;
 
     error = parse_ofp_flow_mod_str(&fm, input, NULL, NULL,
                                    command, &usable_protocols);
     if (error) {
         printf("Error encountered: %s\n", error);
         free(error);
     } else {
         ofctl_parse_flows__(&fm, 1, usable_protocols);
-        minimatch_destroy(&fm.match);
     }
 }
 
