commit aefb7995f138b83d838788ecd1906860bbb4af20
Author: Idan Horowitz <idan.horowitz@gmail.com>
Date:   Mon Jun 7 19:31:32 2021 +0300

    LibJS: Add the Symbol.species getter to the appropriate built-ins

diff --git a/Userland/Libraries/LibJS/Runtime/ArrayBufferConstructor.cpp b/Userland/Libraries/LibJS/Runtime/ArrayBufferConstructor.cpp
index c2a916325b..46adf163ac 100644
--- a/Userland/Libraries/LibJS/Runtime/ArrayBufferConstructor.cpp
+++ b/Userland/Libraries/LibJS/Runtime/ArrayBufferConstructor.cpp
@@ -20,11 +20,13 @@ ArrayBufferConstructor::ArrayBufferConstructor(GlobalObject& global_object)
 void ArrayBufferConstructor::initialize(GlobalObject& global_object)
 {
     auto& vm = this->vm();
     NativeFunction::initialize(global_object);
     u8 attr = Attribute::Writable | Attribute::Configurable;
     define_property(vm.names.prototype, global_object.array_buffer_prototype(), 0);
     define_property(vm.names.length, Value(1), Attribute::Configurable);
     define_native_function(vm.names.isView, is_view, 1, attr);
+
+    define_native_property(vm.well_known_symbol_species(), symbol_species_getter, {}, Attribute::Configurable);
 }
 
 ArrayBufferConstructor::~ArrayBufferConstructor()
@@ -54,12 +56,17 @@ Value ArrayBufferConstructor::construct(Function&)
 JS_DEFINE_NATIVE_FUNCTION(ArrayBufferConstructor::is_view)
 {
     auto arg = vm.argument(0);
     if (!arg.is_object())
         return Value(false);
     if (arg.as_object().is_typed_array())
         return Value(true);
     // FIXME: Check for DataView as well
     return Value(false);
 }
 
+JS_DEFINE_NATIVE_GETTER(ArrayBufferConstructor::symbol_species_getter)
+{
+    return vm.this_value(global_object);
+}
+
 }
diff --git a/Userland/Libraries/LibJS/Runtime/ArrayBufferConstructor.h b/Userland/Libraries/LibJS/Runtime/ArrayBufferConstructor.h
index 0b30d80086..542f9cc057 100644
--- a/Userland/Libraries/LibJS/Runtime/ArrayBufferConstructor.h
+++ b/Userland/Libraries/LibJS/Runtime/ArrayBufferConstructor.h
@@ -24,7 +24,9 @@ public:
 private:
     virtual bool has_constructor() const override { return true; }
 
     JS_DECLARE_NATIVE_FUNCTION(is_view);
+
+    JS_DECLARE_NATIVE_GETTER(symbol_species_getter);
 };
 
 }
diff --git a/Userland/Libraries/LibJS/Runtime/ArrayConstructor.cpp b/Userland/Libraries/LibJS/Runtime/ArrayConstructor.cpp
index 672ea80cdd..da435651e6 100644
--- a/Userland/Libraries/LibJS/Runtime/ArrayConstructor.cpp
+++ b/Userland/Libraries/LibJS/Runtime/ArrayConstructor.cpp
@@ -28,15 +28,17 @@ ArrayConstructor::~ArrayConstructor()
 void ArrayConstructor::initialize(GlobalObject& global_object)
 {
     auto& vm = this->vm();
     NativeFunction::initialize(global_object);
 
     define_property(vm.names.prototype, global_object.array_prototype(), 0);
     define_property(vm.names.length, Value(1), Attribute::Configurable);
 
     u8 attr = Attribute::Writable | Attribute::Configurable;
     define_native_function(vm.names.from, from, 1, attr);
     define_native_function(vm.names.isArray, is_array, 1, attr);
     define_native_function(vm.names.of, of, 0, attr);
+
+    define_native_property(vm.well_known_symbol_species(), symbol_species_getter, {}, Attribute::Configurable);
 }
 
 Value ArrayConstructor::call()
@@ -146,9 +148,14 @@ JS_DEFINE_NATIVE_FUNCTION(ArrayConstructor::is_array)
 JS_DEFINE_NATIVE_FUNCTION(ArrayConstructor::of)
 {
     auto* array = Array::create(global_object);
     for (size_t i = 0; i < vm.argument_count(); ++i)
         array->indexed_properties().append(vm.argument(i));
     return array;
 }
 
+JS_DEFINE_NATIVE_GETTER(ArrayConstructor::symbol_species_getter)
+{
+    return vm.this_value(global_object);
+}
+
 }
diff --git a/Userland/Libraries/LibJS/Runtime/ArrayConstructor.h b/Userland/Libraries/LibJS/Runtime/ArrayConstructor.h
index b835e67e92..d2785216f9 100644
--- a/Userland/Libraries/LibJS/Runtime/ArrayConstructor.h
+++ b/Userland/Libraries/LibJS/Runtime/ArrayConstructor.h
@@ -24,9 +24,11 @@ public:
 private:
     virtual bool has_constructor() const override { return true; }
 
     JS_DECLARE_NATIVE_FUNCTION(from);
     JS_DECLARE_NATIVE_FUNCTION(is_array);
     JS_DECLARE_NATIVE_FUNCTION(of);
+
+    JS_DECLARE_NATIVE_GETTER(symbol_species_getter);
 };
 
 }
diff --git a/Userland/Libraries/LibJS/Runtime/PromiseConstructor.cpp b/Userland/Libraries/LibJS/Runtime/PromiseConstructor.cpp
index 561988717e..492165ed21 100644
--- a/Userland/Libraries/LibJS/Runtime/PromiseConstructor.cpp
+++ b/Userland/Libraries/LibJS/Runtime/PromiseConstructor.cpp
@@ -22,19 +22,21 @@ PromiseConstructor::PromiseConstructor(GlobalObject& global_object)
 void PromiseConstructor::initialize(GlobalObject& global_object)
 {
     auto& vm = this->vm();
     NativeFunction::initialize(global_object);
 
     define_property(vm.names.prototype, global_object.promise_prototype());
     define_property(vm.names.length, Value(1));
 
     u8 attr = Attribute::Writable | Attribute::Configurable;
     // TODO: Implement these functions below and uncomment this.
     // define_native_function(vm.names.all, all, 1, attr);
     // define_native_function(vm.names.allSettled, all_settled, 1, attr);
     // define_native_function(vm.names.any, any, 1, attr);
     // define_native_function(vm.names.race, race, 1, attr);
     define_native_function(vm.names.reject, reject, 1, attr);
     define_native_function(vm.names.resolve, resolve, 1, attr);
+
+    define_native_property(vm.well_known_symbol_species(), symbol_species_getter, {}, Attribute::Configurable);
 }
 
 Value PromiseConstructor::call()
@@ -106,11 +108,16 @@ JS_DEFINE_NATIVE_FUNCTION(PromiseConstructor::reject)
 // 27.2.4.7 Promise.resolve, https://tc39.es/ecma262/#sec-promise.resolve
 JS_DEFINE_NATIVE_FUNCTION(PromiseConstructor::resolve)
 {
     auto* constructor = vm.this_value(global_object).to_object(global_object);
     if (!constructor)
         return {};
     auto value = vm.argument(0);
     return promise_resolve(global_object, *constructor, value);
 }
 
+JS_DEFINE_NATIVE_GETTER(PromiseConstructor::symbol_species_getter)
+{
+    return vm.this_value(global_object);
+}
+
 }
diff --git a/Userland/Libraries/LibJS/Runtime/PromiseConstructor.h b/Userland/Libraries/LibJS/Runtime/PromiseConstructor.h
index 75a52d58e8..00334dc282 100644
--- a/Userland/Libraries/LibJS/Runtime/PromiseConstructor.h
+++ b/Userland/Libraries/LibJS/Runtime/PromiseConstructor.h
@@ -24,12 +24,14 @@ public:
 private:
     virtual bool has_constructor() const override { return true; }
 
     JS_DECLARE_NATIVE_FUNCTION(all);
     JS_DECLARE_NATIVE_FUNCTION(all_settled);
     JS_DECLARE_NATIVE_FUNCTION(any);
     JS_DECLARE_NATIVE_FUNCTION(race);
     JS_DECLARE_NATIVE_FUNCTION(reject);
     JS_DECLARE_NATIVE_FUNCTION(resolve);
+
+    JS_DECLARE_NATIVE_GETTER(symbol_species_getter);
 };
 
 }
diff --git a/Userland/Libraries/LibJS/Runtime/RegExpConstructor.cpp b/Userland/Libraries/LibJS/Runtime/RegExpConstructor.cpp
index d02fa2291f..0642b8fdbd 100644
--- a/Userland/Libraries/LibJS/Runtime/RegExpConstructor.cpp
+++ b/Userland/Libraries/LibJS/Runtime/RegExpConstructor.cpp
@@ -19,9 +19,11 @@ RegExpConstructor::RegExpConstructor(GlobalObject& global_object)
 void RegExpConstructor::initialize(GlobalObject& global_object)
 {
     auto& vm = this->vm();
     NativeFunction::initialize(global_object);
     define_property(vm.names.prototype, global_object.regexp_prototype(), 0);
     define_property(vm.names.length, Value(2), Attribute::Configurable);
+
+    define_native_property(vm.well_known_symbol_species(), symbol_species_getter, {}, Attribute::Configurable);
 }
 
 RegExpConstructor::~RegExpConstructor()
@@ -36,19 +38,24 @@ Value RegExpConstructor::call()
 Value RegExpConstructor::construct(Function&)
 {
     auto& vm = this->vm();
     String pattern = "";
     String flags = "";
     if (!vm.argument(0).is_undefined()) {
         pattern = vm.argument(0).to_string(global_object());
         if (vm.exception())
             return {};
     }
     if (!vm.argument(1).is_undefined()) {
         flags = vm.argument(1).to_string(global_object());
         if (vm.exception())
             return {};
     }
     return RegExpObject::create(global_object(), pattern, flags);
 }
 
+JS_DEFINE_NATIVE_GETTER(RegExpConstructor::symbol_species_getter)
+{
+    return vm.this_value(global_object);
+}
+
 }
diff --git a/Userland/Libraries/LibJS/Runtime/RegExpConstructor.h b/Userland/Libraries/LibJS/Runtime/RegExpConstructor.h
index d62fd6dae0..d110021ccf 100644
--- a/Userland/Libraries/LibJS/Runtime/RegExpConstructor.h
+++ b/Userland/Libraries/LibJS/Runtime/RegExpConstructor.h
@@ -23,6 +23,8 @@ public:
 
 private:
     virtual bool has_constructor() const override { return true; }
+
+    JS_DECLARE_NATIVE_GETTER(symbol_species_getter);
 };
 
 }
diff --git a/Userland/Libraries/LibJS/Runtime/TypedArrayConstructor.cpp b/Userland/Libraries/LibJS/Runtime/TypedArrayConstructor.cpp
index fec2ce8733..f9e958b241 100644
--- a/Userland/Libraries/LibJS/Runtime/TypedArrayConstructor.cpp
+++ b/Userland/Libraries/LibJS/Runtime/TypedArrayConstructor.cpp
@@ -22,9 +22,11 @@ TypedArrayConstructor::TypedArrayConstructor(GlobalObject& global_object)
 void TypedArrayConstructor::initialize(GlobalObject& global_object)
 {
     auto& vm = this->vm();
     NativeFunction::initialize(global_object);
     define_property(vm.names.prototype, global_object.typed_array_prototype(), 0);
     define_property(vm.names.length, Value(0), Attribute::Configurable);
+
+    define_native_property(vm.well_known_symbol_species(), symbol_species_getter, {}, Attribute::Configurable);
 }
 
 TypedArrayConstructor::~TypedArrayConstructor()
@@ -39,7 +41,12 @@ Value TypedArrayConstructor::call()
 Value TypedArrayConstructor::construct(Function&)
 {
     vm().throw_exception<TypeError>(global_object(), ErrorType::ClassIsAbstract, "TypedArray");
     return {};
 }
 
+JS_DEFINE_NATIVE_GETTER(TypedArrayConstructor::symbol_species_getter)
+{
+    return vm.this_value(global_object);
+}
+
 }
diff --git a/Userland/Libraries/LibJS/Runtime/TypedArrayConstructor.h b/Userland/Libraries/LibJS/Runtime/TypedArrayConstructor.h
index 4be3880271..17d3efeab4 100644
--- a/Userland/Libraries/LibJS/Runtime/TypedArrayConstructor.h
+++ b/Userland/Libraries/LibJS/Runtime/TypedArrayConstructor.h
@@ -24,6 +24,8 @@ public:
 
 private:
     virtual bool has_constructor() const override { return true; }
+
+    JS_DECLARE_NATIVE_GETTER(symbol_species_getter);
 };
 
 }
