commit a72276407ba4a438d4e34edd0d5ebf48cd6d9b63
Author: Linus Groh <mail@linusgroh.de>
Date:   Wed Feb 24 09:48:29 2021 +0100

    LibJS: Make ArrayPrototype an Array object
    
    https://tc39.es/ecma262/#sec-properties-of-the-array-prototype-object
    
    The Array prototype object: [...] is an Array exotic object and has the
    internal methods specified for such objects.
    
    NOTE: The Array prototype object is specified to be an Array exotic
    object to ensure compatibility with ECMAScript code that was created
    prior to the ECMAScript 2015 specification.

diff --git a/Userland/Libraries/LibJS/Runtime/Array.cpp b/Userland/Libraries/LibJS/Runtime/Array.cpp
index 2509d13422..dabf19f9fb 100644
--- a/Userland/Libraries/LibJS/Runtime/Array.cpp
+++ b/Userland/Libraries/LibJS/Runtime/Array.cpp
@@ -38,8 +38,13 @@ Array* Array::create(GlobalObject& global_object)
 
 Array::Array(Object& prototype)
     : Object(prototype)
+{
+}
+
+void Array::initialize(GlobalObject& global_object)
 {
     auto& vm = this->vm();
+    Object::initialize(global_object);
     define_native_property(vm.names.length, length_getter, length_setter, Attribute::Writable);
 }
 
diff --git a/Userland/Libraries/LibJS/Runtime/Array.h b/Userland/Libraries/LibJS/Runtime/Array.h
index 2ee4727c35..5beeefa809 100644
--- a/Userland/Libraries/LibJS/Runtime/Array.h
+++ b/Userland/Libraries/LibJS/Runtime/Array.h
@@ -30,13 +30,14 @@
 
 namespace JS {
 
-class Array final : public Object {
+class Array : public Object {
     JS_OBJECT(Array, Object);
 
 public:
     static Array* create(GlobalObject&);
 
     explicit Array(Object& prototype);
+    virtual void initialize(GlobalObject&) override;
     virtual ~Array() override;
 
     static Array* typed_this(VM&, GlobalObject&);
diff --git a/Userland/Libraries/LibJS/Runtime/ArrayPrototype.cpp b/Userland/Libraries/LibJS/Runtime/ArrayPrototype.cpp
index 311ea3707b..d4aba04f20 100644
--- a/Userland/Libraries/LibJS/Runtime/ArrayPrototype.cpp
+++ b/Userland/Libraries/LibJS/Runtime/ArrayPrototype.cpp
@@ -44,47 +44,46 @@ namespace JS {
 static HashTable<Object*> s_array_join_seen_objects;
 
 ArrayPrototype::ArrayPrototype(GlobalObject& global_object)
-    : Object(*global_object.object_prototype())
+    : Array(*global_object.object_prototype())
 {
 }
 
 void ArrayPrototype::initialize(GlobalObject& global_object)
 {
     auto& vm = this->vm();
-    Object::initialize(global_object);
+    Array::initialize(global_object);
     u8 attr = Attribute::Writable | Attribute::Configurable;
 
     define_native_function(vm.names.filter, filter, 1, attr);
     define_native_function(vm.names.forEach, for_each, 1, attr);
     define_native_function(vm.names.map, map, 1, attr);
     define_native_function(vm.names.pop, pop, 0, attr);
     define_native_function(vm.names.push, push, 1, attr);
     define_native_function(vm.names.shift, shift, 0, attr);
     define_native_function(vm.names.toString, to_string, 0, attr);
     define_native_function(vm.names.toLocaleString, to_locale_string, 0, attr);
     define_native_function(vm.names.unshift, unshift, 1, attr);
     define_native_function(vm.names.join, join, 1, attr);
     define_native_function(vm.names.concat, concat, 1, attr);
     define_native_function(vm.names.slice, slice, 2, attr);
     define_native_function(vm.names.indexOf, index_of, 1, attr);
     define_native_function(vm.names.reduce, reduce, 1, attr);
     define_native_function(vm.names.reduceRight, reduce_right, 1, attr);
     define_native_function(vm.names.reverse, reverse, 0, attr);
     define_native_function(vm.names.sort, sort, 1, attr);
     define_native_function(vm.names.lastIndexOf, last_index_of, 1, attr);
     define_native_function(vm.names.includes, includes, 1, attr);
     define_native_function(vm.names.find, find, 1, attr);
     define_native_function(vm.names.findIndex, find_index, 1, attr);
     define_native_function(vm.names.some, some, 1, attr);
     define_native_function(vm.names.every, every, 1, attr);
     define_native_function(vm.names.splice, splice, 2, attr);
     define_native_function(vm.names.fill, fill, 1, attr);
     define_native_function(vm.names.values, values, 0, attr);
     define_native_function(vm.names.flat, flat, 0, attr);
-    define_property(vm.names.length, Value(0), Attribute::Configurable);
 
     // Use define_property here instead of define_native_function so that
     // Object.is(Array.prototype[Symbol.iterator], Array.prototype.values)
     // evaluates to true
     define_property(vm.well_known_symbol_iterator(), get(vm.names.values), attr);
 }
diff --git a/Userland/Libraries/LibJS/Runtime/ArrayPrototype.h b/Userland/Libraries/LibJS/Runtime/ArrayPrototype.h
index 92ffafe957..906e0af39a 100644
--- a/Userland/Libraries/LibJS/Runtime/ArrayPrototype.h
+++ b/Userland/Libraries/LibJS/Runtime/ArrayPrototype.h
@@ -1,38 +1,38 @@
 /*
  * Copyright (c) 2020, Andreas Kling <kling@serenityos.org>
  * Copyright (c) 2020, Linus Groh <mail@linusgroh.de>
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * 1. Redistributions of source code must retain the above copyright notice, this
  *    list of conditions and the following disclaimer.
  *
  * 2. Redistributions in binary form must reproduce the above copyright notice,
  *    this list of conditions and the following disclaimer in the documentation
  *    and/or other materials provided with the distribution.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include <LibJS/Runtime/Object.h>
+#include <LibJS/Runtime/Array.h>
 
 namespace JS {
 
-class ArrayPrototype final : public Object {
-    JS_OBJECT(ArrayPrototype, Object);
+class ArrayPrototype final : public Array {
+    JS_OBJECT(ArrayPrototype, Array);
 
 public:
     ArrayPrototype(GlobalObject&);
diff --git a/Userland/Libraries/LibJS/Tests/builtins/Array/Array.isArray.js b/Userland/Libraries/LibJS/Tests/builtins/Array/Array.isArray.js
index bbe12a8c44..e0577a70fa 100644
--- a/Userland/Libraries/LibJS/Tests/builtins/Array/Array.isArray.js
+++ b/Userland/Libraries/LibJS/Tests/builtins/Array/Array.isArray.js
@@ -17,10 +17,9 @@ test("arguments that evaluate to false", () => {
 test("arguments that evaluate to true", () => {
     expect(Array.isArray([])).toBeTrue();
     expect(Array.isArray([1])).toBeTrue();
     expect(Array.isArray([1, 2, 3])).toBeTrue();
     expect(Array.isArray(new Array())).toBeTrue();
     expect(Array.isArray(new Array(10))).toBeTrue();
     expect(Array.isArray(new Array("a", "b", "c"))).toBeTrue();
-    // FIXME: Array.prototype is supposed to be an array!
-    // expect(Array.isArray(Array.prototype)).toBeTrue();
+    expect(Array.isArray(Array.prototype)).toBeTrue();
 });
