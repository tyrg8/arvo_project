commit afdbc940c6011b64c1856f88d2b0609369f87406
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Sat Dec 25 20:14:48 2021 +0100

    avcodec/tiff: Remove messing with jpeg context
    
    The whole concept is just not correct, also as it seems not to be needed
    at all, all dng files i have decode without this.
    
    Fixes: various crashes
    Fixes: 42937/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_TIFF_fuzzer-4625073334517760
    Fixes: 42938/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_TIFF_fuzzer-4643368217477120
    Fixes: 42939/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_TIFF_fuzzer-4925325908246528
    Fixes: 42940/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_TIFF_fuzzer-4925378806808576
    Fixes: 42941/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_TIFF_fuzzer-6202009265504256
    Fixes: 42944/clusterfuzz-testcase-minimized-ffmpeg_AV_CODEC_ID_TIFF_fuzzer-6076860998483968
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/tiff.c b/libavcodec/tiff.c
index 60773d59ed..fd85d104dc 100644
--- a/libavcodec/tiff.c
+++ b/libavcodec/tiff.c
@@ -721,241 +721,227 @@ static int dng_decode_jpeg(AVCodecContext *avctx, AVFrame *frame,
     return 0;
 }
 
-static int dng_decode_strip(AVCodecContext *avctx, AVFrame *frame)
-{
-    TiffContext *s = avctx->priv_data;
-    int ret = ff_set_dimensions(s->avctx_mjpeg, s->width, s->height);
-
-    if (ret < 0)
-        return ret;
-
-    s->jpgframe->width  = s->width;
-    s->jpgframe->height = s->height;
-
-    return dng_decode_jpeg(avctx, frame, s->stripsize, 0, 0, s->width, s->height);
-}
-
 static int tiff_unpack_strip(TiffContext *s, AVFrame *p, uint8_t *dst, int stride,
                              const uint8_t *src, int size, int strip_start, int lines)
 {
     PutByteContext pb;
     int c, line, pixels, code, ret;
     const uint8_t *ssrc = src;
     int width = ((s->width * s->bpp) + 7) >> 3;
     const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(p->format);
     int is_yuv = !(desc->flags & AV_PIX_FMT_FLAG_RGB) &&
                  (desc->flags & AV_PIX_FMT_FLAG_PLANAR) &&
                  desc->nb_components >= 3;
     int is_dng;
 
     if (s->planar)
         width /= s->bppcount;
 
     if (size <= 0)
         return AVERROR_INVALIDDATA;
 
     if (is_yuv) {
         int bytes_per_row = (((s->width - 1) / s->subsampling[0] + 1) * s->bpp *
                             s->subsampling[0] * s->subsampling[1] + 7) >> 3;
         av_fast_padded_malloc(&s->yuv_line, &s->yuv_line_size, bytes_per_row);
         if (s->yuv_line == NULL) {
             av_log(s->avctx, AV_LOG_ERROR, "Not enough memory\n");
             return AVERROR(ENOMEM);
         }
         dst = s->yuv_line;
         stride = 0;
 
         width = (s->width - 1) / s->subsampling[0] + 1;
         width = width * s->subsampling[0] * s->subsampling[1] + 2*width;
         av_assert0(width <= bytes_per_row);
         av_assert0(s->bpp == 24);
     }
     if (s->is_bayer) {
         av_assert0(width == (s->bpp * s->width + 7) >> 3);
     }
     if (p->format == AV_PIX_FMT_GRAY12) {
         av_fast_padded_malloc(&s->yuv_line, &s->yuv_line_size, width);
         if (s->yuv_line == NULL) {
             av_log(s->avctx, AV_LOG_ERROR, "Not enough memory\n");
             return AVERROR(ENOMEM);
         }
         dst = s->yuv_line;
         stride = 0;
     }
 
     if (s->compr == TIFF_DEFLATE || s->compr == TIFF_ADOBE_DEFLATE) {
 #if CONFIG_ZLIB
         return tiff_unpack_zlib(s, p, dst, stride, src, size, width, lines,
                                 strip_start, is_yuv);
 #else
         av_log(s->avctx, AV_LOG_ERROR,
                "zlib support not enabled, "
                "deflate compression not supported\n");
         return AVERROR(ENOSYS);
 #endif
     }
     if (s->compr == TIFF_LZMA) {
 #if CONFIG_LZMA
         return tiff_unpack_lzma(s, p, dst, stride, src, size, width, lines,
                                 strip_start, is_yuv);
 #else
         av_log(s->avctx, AV_LOG_ERROR,
                "LZMA support not enabled\n");
         return AVERROR(ENOSYS);
 #endif
     }
     if (s->compr == TIFF_LZW) {
         if (s->fill_order) {
             if ((ret = deinvert_buffer(s, src, size)) < 0)
                 return ret;
             ssrc = src = s->deinvert_buf;
         }
         if (size > 1 && !src[0] && (src[1]&1)) {
             av_log(s->avctx, AV_LOG_ERROR, "Old style LZW is unsupported\n");
         }
         if ((ret = ff_lzw_decode_init(s->lzw, 8, src, size, FF_LZW_TIFF)) < 0) {
             av_log(s->avctx, AV_LOG_ERROR, "Error initializing LZW decoder\n");
             return ret;
         }
         for (line = 0; line < lines; line++) {
             pixels = ff_lzw_decode(s->lzw, dst, width);
             if (pixels < width) {
                 av_log(s->avctx, AV_LOG_ERROR, "Decoded only %i bytes of %i\n",
                        pixels, width);
                 return AVERROR_INVALIDDATA;
             }
             if (s->bpp < 8 && s->avctx->pix_fmt == AV_PIX_FMT_PAL8)
                 horizontal_fill(s, s->bpp, dst, 1, dst, 0, width, 0);
             if (is_yuv) {
                 unpack_yuv(s, p, dst, strip_start + line);
                 line += s->subsampling[1] - 1;
             } else if (p->format == AV_PIX_FMT_GRAY12) {
                 unpack_gray(s, p, dst, strip_start + line, width, s->bpp);
             }
             dst += stride;
         }
         return 0;
     }
     if (s->compr == TIFF_CCITT_RLE ||
         s->compr == TIFF_G3        ||
         s->compr == TIFF_G4) {
         if (is_yuv || p->format == AV_PIX_FMT_GRAY12)
             return AVERROR_INVALIDDATA;
 
         return tiff_unpack_fax(s, dst, stride, src, size, width, lines);
     }
 
     bytestream2_init(&s->gb, src, size);
     bytestream2_init_writer(&pb, dst, is_yuv ? s->yuv_line_size : (stride * lines));
 
     is_dng = (s->tiff_type == TIFF_TYPE_DNG || s->tiff_type == TIFF_TYPE_CINEMADNG);
 
     /* Decode JPEG-encoded DNGs with strips */
     if (s->compr == TIFF_NEWJPEG && is_dng) {
         if (s->strips > 1) {
             av_log(s->avctx, AV_LOG_ERROR, "More than one DNG JPEG strips unsupported\n");
             return AVERROR_PATCHWELCOME;
         }
-        if ((ret = dng_decode_strip(s->avctx, p)) < 0)
+        if ((ret = dng_decode_jpeg(s->avctx, p, s->stripsize, 0, 0, s->width, s->height)) < 0)
             return ret;
         return 0;
     }
 
     if (is_dng && stride == 0)
         return AVERROR_INVALIDDATA;
 
     for (line = 0; line < lines; line++) {
         if (src - ssrc > size) {
             av_log(s->avctx, AV_LOG_ERROR, "Source data overread\n");
             return AVERROR_INVALIDDATA;
         }
 
         if (bytestream2_get_bytes_left(&s->gb) == 0 || bytestream2_get_eof(&pb))
             break;
         bytestream2_seek_p(&pb, stride * line, SEEK_SET);
         switch (s->compr) {
         case TIFF_RAW:
             if (ssrc + size - src < width)
                 return AVERROR_INVALIDDATA;
 
             if (!s->fill_order) {
                 horizontal_fill(s, s->bpp * (s->avctx->pix_fmt == AV_PIX_FMT_PAL8 || s->is_bayer),
                                 dst, 1, src, 0, width, 0);
             } else {
                 int i;
                 for (i = 0; i < width; i++)
                     dst[i] = ff_reverse[src[i]];
             }
 
             /* Color processing for DNG images with uncompressed strips (non-tiled) */
             if (is_dng) {
                 int is_u16, pixel_size_bytes, pixel_size_bits, elements;
 
                 is_u16 = (s->bpp / s->bppcount > 8);
                 pixel_size_bits = (is_u16 ? 16 : 8);
                 pixel_size_bytes = (is_u16 ? sizeof(uint16_t) : sizeof(uint8_t));
 
                 elements = width / pixel_size_bytes * pixel_size_bits / s->bpp * s->bppcount; // need to account for [1, 16] bpp
                 av_assert0 (elements * pixel_size_bytes <= FFABS(stride));
                 dng_blit(s,
                          dst,
                          0, // no stride, only 1 line
                          dst,
                          0, // no stride, only 1 line
                          elements,
                          1,
                          0, // single-component variation is only preset in JPEG-encoded DNGs
                          is_u16);
             }
 
             src += width;
             break;
         case TIFF_PACKBITS:
             for (pixels = 0; pixels < width;) {
                 if (ssrc + size - src < 2) {
                     av_log(s->avctx, AV_LOG_ERROR, "Read went out of bounds\n");
                     return AVERROR_INVALIDDATA;
                 }
                 code = s->fill_order ? (int8_t) ff_reverse[*src++]: (int8_t) *src++;
                 if (code >= 0) {
                     code++;
                     if (pixels + code > width ||
                         ssrc + size - src < code) {
                         av_log(s->avctx, AV_LOG_ERROR,
                                "Copy went out of bounds\n");
                         return AVERROR_INVALIDDATA;
                     }
                     horizontal_fill(s, s->bpp * (s->avctx->pix_fmt == AV_PIX_FMT_PAL8),
                                     dst, 1, src, 0, code, pixels);
                     src    += code;
                     pixels += code;
                 } else if (code != -128) { // -127..-1
                     code = (-code) + 1;
                     if (pixels + code > width) {
                         av_log(s->avctx, AV_LOG_ERROR,
                                "Run went out of bounds\n");
                         return AVERROR_INVALIDDATA;
                     }
                     c = *src++;
                     horizontal_fill(s, s->bpp * (s->avctx->pix_fmt == AV_PIX_FMT_PAL8),
                                     dst, 0, NULL, c, code, pixels);
                     pixels += code;
                 }
             }
             if (s->fill_order) {
                 int i;
                 for (i = 0; i < width; i++)
                     dst[i] = ff_reverse[dst[i]];
             }
             break;
         }
         if (is_yuv) {
             unpack_yuv(s, p, dst, strip_start + line);
             line += s->subsampling[1] - 1;
         } else if (p->format == AV_PIX_FMT_GRAY12) {
             unpack_gray(s, p, dst, strip_start + line, width, s->bpp);
         }
         dst += stride;
     }
     return 0;
 }
@@ -963,75 +949,69 @@ static int tiff_unpack_strip(TiffContext *s, AVFrame *p, uint8_t *dst, int strid
 static int dng_decode_tiles(AVCodecContext *avctx, AVFrame *frame,
                             const AVPacket *avpkt)
 {
     TiffContext *s = avctx->priv_data;
     int tile_idx;
     int tile_offset_offset, tile_offset;
     int tile_byte_count_offset, tile_byte_count;
     int tile_count_x, tile_count_y;
     int tile_width, tile_length;
     int has_width_leftover, has_height_leftover;
     int tile_x = 0, tile_y = 0;
     int pos_x = 0, pos_y = 0;
-    int ret = ff_set_dimensions(s->avctx_mjpeg, s->tile_width, s->tile_length);
-
-    if (ret < 0)
-        return ret;
-
-    s->jpgframe->width  = s->tile_width;
-    s->jpgframe->height = s->tile_length;
+    int ret;
 
     has_width_leftover = (s->width % s->tile_width != 0);
     has_height_leftover = (s->height % s->tile_length != 0);
 
     /* Calculate tile counts (round up) */
     tile_count_x = (s->width + s->tile_width - 1) / s->tile_width;
     tile_count_y = (s->height + s->tile_length - 1) / s->tile_length;
 
     /* Iterate over the number of tiles */
     for (tile_idx = 0; tile_idx < s->tile_count; tile_idx++) {
         tile_x = tile_idx % tile_count_x;
         tile_y = tile_idx / tile_count_x;
 
         if (has_width_leftover && tile_x == tile_count_x - 1) // If on the right-most tile
             tile_width = s->width % s->tile_width;
         else
             tile_width = s->tile_width;
 
         if (has_height_leftover && tile_y == tile_count_y - 1) // If on the bottom-most tile
             tile_length = s->height % s->tile_length;
         else
             tile_length = s->tile_length;
 
         /* Read tile offset */
         tile_offset_offset = s->tile_offsets_offset + tile_idx * sizeof(int);
         bytestream2_seek(&s->gb, tile_offset_offset, SEEK_SET);
         tile_offset = ff_tget_long(&s->gb, s->le);
 
         /* Read tile byte size */
         tile_byte_count_offset = s->tile_byte_counts_offset + tile_idx * sizeof(int);
         bytestream2_seek(&s->gb, tile_byte_count_offset, SEEK_SET);
         tile_byte_count = ff_tget_long(&s->gb, s->le);
 
         /* Seek to tile data */
         bytestream2_seek(&s->gb, tile_offset, SEEK_SET);
 
         /* Decode JPEG tile and copy it in the reference frame */
         ret = dng_decode_jpeg(avctx, frame, tile_byte_count, pos_x, pos_y, tile_width, tile_length);
 
         if (ret < 0)
             return ret;
 
         /* Advance current positions */
         pos_x += tile_width;
         if (tile_x == tile_count_x - 1) { // If on the right edge
             pos_x = 0;
             pos_y += tile_length;
         }
     }
 
     /* Frame is ready to be output */
     frame->pict_type = AV_PICTURE_TYPE_I;
     frame->key_frame = 1;
 
     return avpkt->size;
 }
