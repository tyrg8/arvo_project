commit 6a89d7c27099be84e5312a7ec73205d6a7abe1b4
Author: Charlie Gordon <github@chqrlie.org>
Date:   Sun Mar 3 21:57:38 2024 +0100

    Add CI targets, fix test_std.js (#247)
    
    This switches the exec test to `SIGTERM` rather than `SIGQUIT` since the
    latter didn’t seem to work in QEMU, and the distinction doesn’t really
    matter for this test.
    
    This also makes the `isatty()` check smarter by checking whether `STDIN`
    is, in fact, a terminal.
    
    Added qemu-alpine targets i386, arm32v6, arm32v7, arm64v8, s390x
    
    Co-authored-by: Felipe Gasper <felipe@felipegasper.com>

diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 7565477..9eab46f 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -3,139 +3,164 @@ name: ci
 on:
   pull_request:
     paths:
       - '**'
       - '!.gitignore'
       - '!LICENSE'
       - '!TODO'
       - '!doc/**'
       - '!examples/**'
       - '.github/workflows/ci.yml'
   push:
     branches:
-      - master
+      - '*'
 
 jobs:
   linux:
+    name: Linux (Ubuntu)
     runs-on: ubuntu-latest
     strategy:
       fail-fast: false
     steps:
-      - uses: actions/checkout@v3
+      - uses: actions/checkout@v4
         with:
           submodules: true
-      - name: build
+      - name: Build
         run: |
           make -j$(getconf _NPROCESSORS_ONLN) CONFIG_WERROR=y
-      - name: stats
+      - name: Stats
         run: |
           ./qjs -qd
-      - name: test
+      - name: Run built-in tests
         run: |
           make test
-      - name: microbench
+      - name: Run microbench
         run: |
           make microbench
 
   linux-asan:
     runs-on: ubuntu-latest
     steps:
-      - uses: actions/checkout@v3
+      - uses: actions/checkout@v4
         with:
           submodules: true
-      - name: build
+      - name: Build
         run: |
           make -j$(getconf _NPROCESSORS_ONLN) CONFIG_WERROR=y CONFIG_ASAN=y
-      - name: test
+      - name: Run built-in tests
         env:
           ASAN_OPTIONS: halt_on_error=1
         run: |
           make CONFIG_ASAN=y test
 
   linux-msan:
     runs-on: ubuntu-latest
     steps:
-      - uses: actions/checkout@v3
+      - uses: actions/checkout@v4
         with:
           submodules: true
-      - name: build
+      - name: Build
         env:
           CC: clang
         run: |
           make -j$(getconf _NPROCESSORS_ONLN) CONFIG_WERROR=y CONFIG_MSAN=y CONFIG_CLANG=y
-      - name: test
+      - name: Run built-in tests
         env:
           MSAN_OPTIONS: halt_on_error=1
         run: |
           make CONFIG_MSAN=y CONFIG_CLANG=y test
 
   linux-ubsan:
     runs-on: ubuntu-latest
     steps:
-      - uses: actions/checkout@v3
+      - uses: actions/checkout@v4
         with:
           submodules: true
-      - name: build
+      - name: Build
         run: |
           make -j$(getconf _NPROCESSORS_ONLN) CONFIG_WERROR=y CONFIG_UBSAN=y
-      - name: test
+      - name: Run built-in tests
         env:
           UBSAN_OPTIONS: halt_on_error=1
         run: |
           make CONFIG_UBSAN=y test
 
   macos:
+    name: macOS
     runs-on: macos-latest
     strategy:
       fail-fast: false
     steps:
-      - uses: actions/checkout@v3
-      - name: build
+      - uses: actions/checkout@v4
+      - name: Build
         run: |
           make -j$(getconf _NPROCESSORS_ONLN) CONFIG_WERROR=y
-      - name: stats
+      - name: Stats
         run: |
           ./qjs -qd
-      - name: test
+      - name: Run built-in tests
         run: |
           make test
 
   macos-asan:
     runs-on: macos-latest
     steps:
-      - uses: actions/checkout@v3
-      - name: build
+      - uses: actions/checkout@v4
+      - name: Build
         run: |
           make -j$(getconf _NPROCESSORS_ONLN) CONFIG_WERROR=y CONFIG_ASAN=y
-      - name: test
+      - name: Run built-in tests
         env:
           ASAN_OPTIONS: halt_on_error=1
         run: |
           make CONFIG_ASAN=y test
 
   macos-ubsan:
     runs-on: macos-latest
     steps:
-      - uses: actions/checkout@v3
-      - name: build
+      - uses: actions/checkout@v4
+      - name: Build
         run: |
           make -j$(getconf _NPROCESSORS_ONLN) CONFIG_WERROR=y CONFIG_UBSAN=y
-      - name: test
+      - name: Run built-in tests
         env:
           UBSAN_OPTIONS: halt_on_error=1
         run: |
           make CONFIG_UBSAN=y test
 
   freebsd:
     runs-on: ubuntu-latest
     steps:
-      - uses: actions/checkout@v3
-      - name: build + test
+      - uses: actions/checkout@v4
+      - name: Build + test
         uses: vmactions/freebsd-vm@v1
         with:
           usesh: true
           prepare: |
             pkg install -y gmake
           run: |
             gmake
             ./qjs -qd
             gmake test
+
+  qemu-alpine:
+    runs-on: ubuntu-latest
+
+    strategy:
+      fail-fast: false
+      matrix:
+        platform:
+          - i386
+          - arm32v6
+          - arm32v7
+          - arm64v8
+          - s390x
+
+    steps:
+      - uses: actions/checkout@v4
+        with:
+            submodules: recursive
+      - name: Get qemu
+        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
+      - name: Run tests on ${{ matrix.platform }}
+        run: docker run --rm --interactive --mount type=bind,source=$(pwd),target=/host ${{ matrix.platform }}/alpine sh -c "apk add git patch make gcc libc-dev && cd /host && make test"
+
diff --git a/tests/test_std.js b/tests/test_std.js
index 86a242c..c844869 100644
--- a/tests/test_std.js
+++ b/tests/test_std.js
@@ -143,84 +143,85 @@ function test_ext_json()
 function test_os()
 {
     var fd, fpath, fname, fdir, buf, buf2, i, files, err, fdate, st, link_path;
 
-    // XXX(bnoordhuis) disabled because stdio is not a tty on CI
-    //assert(os.isatty(0));
+    const stdinIsTTY = !os.exec(["/bin/sh", "-c", "test -t 0"], { usePath: false });
+
+    assert(os.isatty(0), stdinIsTTY, `isatty(STDIN)`);
 
     fdir = "test_tmp_dir";
     fname = "tmp_file.txt";
     fpath = fdir + "/" + fname;
     link_path = fdir + "/test_link";
 
     os.remove(link_path);
     os.remove(fpath);
     os.remove(fdir);
 
     err = os.mkdir(fdir, 0o755);
     assert(err === 0);
 
     fd = os.open(fpath, os.O_RDWR | os.O_CREAT | os.O_TRUNC);
     assert(fd >= 0);
 
     buf = new Uint8Array(10);
     for(i = 0; i < buf.length; i++)
         buf[i] = i;
     assert(os.write(fd, buf.buffer, 0, buf.length) === buf.length);
 
     assert(os.seek(fd, 0, std.SEEK_SET) === 0);
     buf2 = new Uint8Array(buf.length);
     assert(os.read(fd, buf2.buffer, 0, buf2.length) === buf2.length);
 
     for(i = 0; i < buf.length; i++)
         assert(buf[i] == buf2[i]);
 
     if (typeof BigInt !== "undefined") {
         assert(os.seek(fd, BigInt(6), std.SEEK_SET), BigInt(6));
         assert(os.read(fd, buf2.buffer, 0, 1) === 1);
         assert(buf[6] == buf2[0]);
     }
 
     assert(os.close(fd) === 0);
 
     [files, err] = os.readdir(fdir);
     assert(err, 0);
     assert(files.indexOf(fname) >= 0);
 
     fdate = 10000;
 
     err = os.utimes(fpath, fdate, fdate);
     assert(err, 0);
 
     [st, err] = os.stat(fpath);
     assert(err, 0);
     assert(st.mode & os.S_IFMT, os.S_IFREG);
     assert(st.mtime, fdate);
 
     err = os.symlink(fname, link_path);
     assert(err === 0);
 
     [st, err] = os.lstat(link_path);
     assert(err, 0);
     assert(st.mode & os.S_IFMT, os.S_IFLNK);
 
     [buf, err] = os.readlink(link_path);
     assert(err, 0);
     assert(buf, fname);
 
     assert(os.remove(link_path) === 0);
 
     [buf, err] = os.getcwd();
     assert(err, 0);
 
     [buf2, err] = os.realpath(".");
     assert(err, 0);
 
     assert(buf, buf2);
 
     assert(os.remove(fpath) === 0);
 
     fd = os.open(fpath, os.O_RDONLY);
     assert(fd < 0);
 
     assert(os.remove(fdir) === 0);
 }
@@ -228,36 +229,37 @@ function test_os()
 function test_os_exec()
 {
     var ret, fds, pid, f, status;
 
     ret = os.exec(["true"]);
     assert(ret, 0);
 
     ret = os.exec(["/bin/sh", "-c", "exit 1"], { usePath: false });
     assert(ret, 1);
 
     fds = os.pipe();
     pid = os.exec(["sh", "-c", "echo $FOO"], {
         stdout: fds[1],
         block: false,
         env: { FOO: "hello" },
     } );
     assert(pid >= 0);
     os.close(fds[1]); /* close the write end (as it is only in the child)  */
     f = std.fdopen(fds[0], "r");
     assert(f.getline(), "hello");
     assert(f.getline(), null);
     f.close();
     [ret, status] = os.waitpid(pid, 0);
     assert(ret, pid);
     assert(status & 0x7f, 0); /* exited */
     assert(status >> 8, 0); /* exit code */
 
     pid = os.exec(["cat"], { block: false } );
     assert(pid >= 0);
-    os.kill(pid, os.SIGQUIT);
+    os.kill(pid, os.SIGTERM);
     [ret, status] = os.waitpid(pid, 0);
     assert(ret, pid);
-    assert(status & 0x7f, os.SIGQUIT);
+    assert(status !== 0, true, `expect nonzero exit code (got ${status})`);
+    assert(status & 0x7f, os.SIGTERM);
 }
 
 function test_timer()
