commit d3fc2da5a8bc64c9c6b718f350b58b2b3974760a
Author: Rot127 <unisono@quyllur.org>
Date:   Sun May 21 09:55:41 2023 -0500

    Set mnemonic in PPC_printInst().
    
    Because the cs_insn->mnemonic gets set *after* the
    post_printer is called and cs_insn->mnemonic is not memset to 0
    before, post_printer() of PPC receives a cs_insn->mnemonic with
    random data.
    This in turn leads randomly to incorrect setting of the branch hints
    and the update_cr0 flag. Because those are set in the post_printer()
    of PPC.

diff --git a/arch/PowerPC/PPCInstPrinter.c b/arch/PowerPC/PPCInstPrinter.c
index dd84a757..775a3e3e 100644
--- a/arch/PowerPC/PPCInstPrinter.c
+++ b/arch/PowerPC/PPCInstPrinter.c
@@ -409,232 +409,243 @@ static bool isBOCTRBranch(unsigned int op)
 void PPC_printInst(MCInst *MI, SStream *O, void *Info)
 {
 	char *mnem;
 	unsigned int opcode = MCInst_getOpcode(MI);
+	memset(O->buffer, 0, sizeof(O->buffer));
 
 	// printf("opcode = %u\n", opcode);
 
 	// Check for slwi/srwi mnemonics.
 	if (opcode == PPC_RLWINM) {
 		unsigned char SH = (unsigned char)MCOperand_getImm(MCInst_getOperand(MI, 2));
 		unsigned char MB = (unsigned char)MCOperand_getImm(MCInst_getOperand(MI, 3));
 		unsigned char ME = (unsigned char)MCOperand_getImm(MCInst_getOperand(MI, 4));
 		bool useSubstituteMnemonic = false;
 
 		if (SH <= 31 && MB == 0 && ME == (31 - SH)) {
 			SStream_concat0(O, "slwi\t");
 			MCInst_setOpcodePub(MI, PPC_INS_SLWI);
 			useSubstituteMnemonic = true;
 		}
 
 		if (SH <= 31 && MB == (32 - SH) && ME == 31) {
 			SStream_concat0(O, "srwi\t");
 			MCInst_setOpcodePub(MI, PPC_INS_SRWI);
 			useSubstituteMnemonic = true;
 			SH = 32 - SH;
 		}
 
 		if (useSubstituteMnemonic) {
 			printOperand(MI, 0, O);
 			SStream_concat0(O, ", ");
 			printOperand(MI, 1, O);
 
 			if (SH > HEX_THRESHOLD)
 				SStream_concat(O, ", 0x%x", (unsigned int)SH);
 			else
 				SStream_concat(O, ", %u", (unsigned int)SH);
 
 			if (MI->csh->detail) {
 				cs_ppc *ppc = &MI->flat_insn->detail->ppc;
 
 				ppc->operands[ppc->op_count].type = PPC_OP_IMM;
 				ppc->operands[ppc->op_count].imm = SH;
 				++ppc->op_count;
 			}
 
 			return;
 		}
 	}
 
 	if ((opcode == PPC_OR || opcode == PPC_OR8) &&
 			MCOperand_getReg(MCInst_getOperand(MI, 1)) == MCOperand_getReg(MCInst_getOperand(MI, 2))) {
 		SStream_concat0(O, "mr\t");
 		MCInst_setOpcodePub(MI, PPC_INS_MR);
 
 		printOperand(MI, 0, O);
 		SStream_concat0(O, ", ");
 		printOperand(MI, 1, O);
 
 		return;
 	}
 
 	if (opcode == PPC_RLDICR ||
 			opcode == PPC_RLDICR_32) {
 		unsigned char SH = (unsigned char)MCOperand_getImm(MCInst_getOperand(MI, 2));
 		unsigned char ME = (unsigned char)MCOperand_getImm(MCInst_getOperand(MI, 3));
 
 		// rldicr RA, RS, SH, 63-SH == sldi RA, RS, SH
 		if (63 - SH == ME) {
 			SStream_concat0(O, "sldi\t");
 			MCInst_setOpcodePub(MI, PPC_INS_SLDI);
 
 			printOperand(MI, 0, O);
 			SStream_concat0(O, ", ");
 			printOperand(MI, 1, O);
 
 			if (SH > HEX_THRESHOLD)
 				SStream_concat(O, ", 0x%x", (unsigned int)SH);
 			else
 				SStream_concat(O, ", %u", (unsigned int)SH);
 
 			if (MI->csh->detail) {
 				cs_ppc *ppc = &MI->flat_insn->detail->ppc;
 
 				ppc->operands[ppc->op_count].type = PPC_OP_IMM;
 				ppc->operands[ppc->op_count].imm = SH;
 				++ppc->op_count;
 			}
 
 
 			return;
 		}
 	}
 
 	// dcbt[st] is printed manually here because:
 	//  1. The assembly syntax is different between embedded and server targets
 	//  2. We must print the short mnemonics for TH == 0 because the
 	//     embedded/server syntax default will not be stable across assemblers
 	//  The syntax for dcbt is:
 	//    dcbt ra, rb, th [server]
 	//    dcbt th, ra, rb [embedded]
 	//  where th can be omitted when it is 0. dcbtst is the same.
 	if (opcode == PPC_DCBT || opcode == PPC_DCBTST) {
 		unsigned char TH = (unsigned char)MCOperand_getImm(MCInst_getOperand(MI, 0));
 
 		SStream_concat0(O, "dcbt");
 		MCInst_setOpcodePub(MI, PPC_INS_DCBT);
 
 		if (opcode == PPC_DCBTST) {
 			SStream_concat0(O, "st");
 			MCInst_setOpcodePub(MI, PPC_INS_DCBTST);
 		}
 
 		if (TH == 16) {
 			SStream_concat0(O, "t");
 			MCInst_setOpcodePub(MI, PPC_INS_DCBTSTT);
 		}
 
 		SStream_concat0(O, "\t");
 
 		if (MI->csh->mode & CS_MODE_BOOKE && TH != 0 && TH != 16) {
 			if (TH > HEX_THRESHOLD)
 				SStream_concat(O, "0x%x, ", (unsigned int)TH);
 			else
 				SStream_concat(O, "%u, ", (unsigned int)TH);
 
 			if (MI->csh->detail) {
 				cs_ppc *ppc = &MI->flat_insn->detail->ppc;
 
 				ppc->operands[ppc->op_count].type = PPC_OP_IMM;
 				ppc->operands[ppc->op_count].imm = TH;
 				++ppc->op_count;
 			}
 		}
 
 		printOperand(MI, 1, O);
 		SStream_concat0(O, ", ");
 		printOperand(MI, 2, O);
 
 		if (!(MI->csh->mode & CS_MODE_BOOKE) && TH != 0 && TH != 16) {
 			if (TH > HEX_THRESHOLD)
 				SStream_concat(O, ", 0x%x", (unsigned int)TH);
 			else
 				SStream_concat(O, ", %u", (unsigned int)TH);
 
 			if (MI->csh->detail) {
 				cs_ppc *ppc = &MI->flat_insn->detail->ppc;
 
 				ppc->operands[ppc->op_count].type = PPC_OP_IMM;
 				ppc->operands[ppc->op_count].imm = TH;
 				++ppc->op_count;
 			}
 		}
 
 		return;
 	}
 
 	if (opcode == PPC_DCBF) {
 		unsigned char L = (unsigned char)MCOperand_getImm(MCInst_getOperand(MI, 0));
 
 		if (!L || L == 1 || L == 3) {
 			SStream_concat0(O, "dcbf");
 			MCInst_setOpcodePub(MI, PPC_INS_DCBF);
 
 			if (L == 1 || L == 3) {
 				SStream_concat0(O, "l");
 				MCInst_setOpcodePub(MI, PPC_INS_DCBFL);
 			}
 
 			if (L == 3) {
 				SStream_concat0(O, "p");
 				MCInst_setOpcodePub(MI, PPC_INS_DCBFLP);
 			}
 
 			SStream_concat0(O, "\t");
 
 			printOperand(MI, 1, O);
 			SStream_concat0(O, ", ");
 			printOperand(MI, 2, O);
 
 			return;
 		}
 	}
 
 	if (opcode == PPC_B || opcode == PPC_BA || opcode == PPC_BL ||
 			opcode == PPC_BLA) {
 		int64_t bd = MCOperand_getImm(MCInst_getOperand(MI, 0));
 		bd = SignExtend64(bd, 24);
 		MCOperand_setImm(MCInst_getOperand(MI, 0), bd);
 	}
 
 	if (opcode == PPC_gBC || opcode == PPC_gBCA || opcode == PPC_gBCL ||
 			opcode == PPC_gBCLA) {
 		int64_t bd = MCOperand_getImm(MCInst_getOperand(MI, 2));
 		bd = SignExtend64(bd, 14);
 		MCOperand_setImm(MCInst_getOperand(MI, 2), bd);
 	}
 
 	if (isBOCTRBranch(MCInst_getOpcode(MI))) {
 		if (MCOperand_isImm(MCInst_getOperand(MI,0))) {
 			int64_t bd = MCOperand_getImm(MCInst_getOperand(MI, 0));
 			bd = SignExtend64(bd, 14);
 			MCOperand_setImm(MCInst_getOperand(MI, 0), bd);
 		}
 	}
 
 	mnem = printAliasBcc(MI, O, Info);
 	if (!mnem)
 		mnem = printAliasInstr(MI, O, Info);
 
 	if (mnem != NULL) {
 		if (strlen(mnem) > 0) {
 			// check to remove the last letter of ('.', '-', '+')
 			if (mnem[strlen(mnem) - 1] == '-' || mnem[strlen(mnem) - 1] == '+' || mnem[strlen(mnem) - 1] == '.')
 				mnem[strlen(mnem) - 1] = '\0';
 
             MCInst_setOpcodePub(MI, PPC_map_insn(mnem));
 
             if (MI->csh->detail) {
 				struct ppc_alias alias;
 
 				if (PPC_alias_insn(mnem, &alias)) {
 					MI->flat_insn->detail->ppc.bc = (ppc_bc)alias.cc;
 				}
             }
 		}
 
 		cs_mem_free(mnem);
 	} else
 		printInstruction(MI, O);
+
+	const char *mnem_end = strchr(O->buffer, ' ');
+	unsigned mnem_len = 0;
+	if (mnem_end)
+		mnem_len = mnem_end - O->buffer;
+	if (!mnem_end || mnem_len >= sizeof(MI->flat_insn->mnemonic))
+		mnem_len = sizeof(MI->flat_insn->mnemonic) - 1;
+
+	memset(MI->flat_insn->mnemonic, 0, sizeof(MI->flat_insn->mnemonic));
+	strncpy(MI->flat_insn->mnemonic, O->buffer, mnem_len);
 }
 
 // FIXME
