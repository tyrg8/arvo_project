commit 6140e82cbbf79a360adf8a75e11e8d76847dbcca
Author: Evgenii Kliuchnikov <eustas@google.com>
Date:   Tue Apr 19 14:15:55 2022 +0000

    Do not render padding if there is nothing to pad

diff --git a/lib/jxl/render_pipeline/low_memory_render_pipeline.cc b/lib/jxl/render_pipeline/low_memory_render_pipeline.cc
index a097d1d0..89a636b1 100644
--- a/lib/jxl/render_pipeline/low_memory_render_pipeline.cc
+++ b/lib/jxl/render_pipeline/low_memory_render_pipeline.cc
@@ -708,79 +708,83 @@ void LowMemoryRenderPipeline::RenderPadding(size_t thread_id, Rect rect) {
 void LowMemoryRenderPipeline::ProcessBuffers(size_t group_id,
                                              size_t thread_id) {
   std::vector<ImageF>& input_data =
       group_data_[use_group_ids_ ? group_id : thread_id];
 
   // Copy the group borders to the border storage.
   for (size_t c = 0; c < input_data.size(); c++) {
     SaveBorders(group_id, c, input_data[c]);
   }
 
   size_t gy = group_id / frame_dimensions_.xsize_groups;
   size_t gx = group_id % frame_dimensions_.xsize_groups;
 
   if (first_image_dim_stage_ != stages_.size()) {
     size_t group_dim = frame_dimensions_.group_dim << base_color_shift_;
     RectT<ssize_t> group_rect(gx * group_dim, gy * group_dim, group_dim,
                               group_dim);
     RectT<ssize_t> image_rect(0, 0, frame_dimensions_.xsize_upsampled,
                               frame_dimensions_.ysize_upsampled);
     RectT<ssize_t> full_image_rect(0, 0, full_image_xsize_, full_image_ysize_);
     group_rect = group_rect.Translate(frame_origin_.x0, frame_origin_.y0);
     image_rect = image_rect.Translate(frame_origin_.x0, frame_origin_.y0);
     group_rect =
         group_rect.Intersection(image_rect).Intersection(full_image_rect);
     size_t x0 = group_rect.x0();
     size_t y0 = group_rect.y0();
     size_t x1 = group_rect.x1();
     size_t y1 = group_rect.y1();
 
-    if (gx == 0 && gy == 0) {
-      RenderPadding(thread_id, Rect(0, 0, x0, y0));
-    }
-    if (gy == 0) {
-      RenderPadding(thread_id, Rect(x0, 0, x1 - x0, y0));
-    }
-    if (gx == 0) {
-      RenderPadding(thread_id, Rect(0, y0, x0, y1 - y0));
-    }
-    if (gx == 0 && gy + 1 == frame_dimensions_.ysize_groups) {
-      RenderPadding(thread_id, Rect(0, y1, x0, full_image_ysize_ - y1));
-    }
-    if (gy + 1 == frame_dimensions_.ysize_groups) {
-      RenderPadding(thread_id, Rect(x0, y1, x1 - x0, full_image_ysize_ - y1));
-    }
-    if (gy == 0 && gx + 1 == frame_dimensions_.xsize_groups) {
-      RenderPadding(thread_id, Rect(x1, 0, full_image_xsize_ - x1, y0));
-    }
-    if (gx + 1 == frame_dimensions_.xsize_groups) {
-      RenderPadding(thread_id, Rect(x1, y0, full_image_xsize_ - x1, y1 - y0));
-    }
-    if (gy + 1 == frame_dimensions_.ysize_groups &&
-        gx + 1 == frame_dimensions_.xsize_groups) {
-      RenderPadding(thread_id, Rect(x1, y1, full_image_xsize_ - x1,
-                                    full_image_ysize_ - y1));
+    // Do not render padding if group is empty; if group is empty x0, y0 might
+    // have arbitrary values (from frame_origin).
+    if (group_rect.xsize() > 0 && group_rect.ysize() > 0) {
+      if (gx == 0 && gy == 0) {
+        RenderPadding(thread_id, Rect(0, 0, x0, y0));
+      }
+      if (gy == 0) {
+        RenderPadding(thread_id, Rect(x0, 0, x1 - x0, y0));
+      }
+      if (gx == 0) {
+        RenderPadding(thread_id, Rect(0, y0, x0, y1 - y0));
+      }
+      if (gx == 0 && gy + 1 == frame_dimensions_.ysize_groups) {
+        RenderPadding(thread_id, Rect(0, y1, x0, full_image_ysize_ - y1));
+      }
+      if (gy + 1 == frame_dimensions_.ysize_groups) {
+        RenderPadding(thread_id, Rect(x0, y1, x1 - x0, full_image_ysize_ - y1));
+      }
+      if (gy == 0 && gx + 1 == frame_dimensions_.xsize_groups) {
+        RenderPadding(thread_id, Rect(x1, 0, full_image_xsize_ - x1, y0));
+      }
+      if (gx + 1 == frame_dimensions_.xsize_groups) {
+        RenderPadding(thread_id, Rect(x1, y0, full_image_xsize_ - x1, y1 - y0));
+      }
+      if (gy + 1 == frame_dimensions_.ysize_groups &&
+          gx + 1 == frame_dimensions_.xsize_groups) {
+        RenderPadding(thread_id, Rect(x1, y1, full_image_xsize_ - x1,
+                                      full_image_ysize_ - y1));
+      }
     }
   }
 
   Rect ready_rects[GroupBorderAssigner::kMaxToFinalize];
   size_t num_ready_rects = 0;
   group_border_assigner_.GroupDone(group_id, group_border_.first,
                                    group_border_.second, ready_rects,
                                    &num_ready_rects);
   for (size_t i = 0; i < num_ready_rects; i++) {
     const Rect& image_max_color_channel_rect = ready_rects[i];
     for (size_t c = 0; c < input_data.size(); c++) {
       LoadBorders(group_id, c, image_max_color_channel_rect, &input_data[c]);
     }
     Rect data_max_color_channel_rect(
         group_data_x_border_ + image_max_color_channel_rect.x0() -
             gx * frame_dimensions_.group_dim,
         group_data_y_border_ + image_max_color_channel_rect.y0() -
             gy * frame_dimensions_.group_dim,
         image_max_color_channel_rect.xsize(),
         image_max_color_channel_rect.ysize());
     RenderRect(thread_id, input_data, data_max_color_channel_rect,
                image_max_color_channel_rect);
   }
 }
 }  // namespace jxl
