commit 81c55ab199af28abf7e405f1e3ab2e76608b116b
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Fri Sep 2 10:55:52 2022 +0100

    oss-fuzz 50893: xpswrite: Fix order of operations freeing TIFF object
    
    We can't free our libtiff "client data) until we've completed writing the TIFF
    (which also frees the libtiff context), but having completed writing the TIFF,
    we can no longer access our client data through the libtiff context.
    
    We have to retrieve a pointer to our client data, complete the TIFF writing
    process, then free our client data using the pointer we previously retrieved.

diff --git a/devices/vector/gdevxps.c b/devices/vector/gdevxps.c
index 218b3c09c..20d9dbd5b 100644
--- a/devices/vector/gdevxps.c
+++ b/devices/vector/gdevxps.c
@@ -1790,7 +1790,7 @@ static TIFF* tiff_from_name(gx_device_xps *dev, const char *name, int big_endian
 static int tiff_set_values(xps_image_enum_t *pie, TIFF *tif,
                             cmm_profile_t *profile, bool force8bit);
 static void xps_tiff_set_handlers(void);
-static void tiff_client_release(gx_device_xps* dev, TIFF* t);
+static void xps_tiff_cleanup(xps_image_enum_t *xpie);
 
 /* Check if we have the ICC profile in the package */
 static xps_icc_data_t*
@@ -2291,25 +2291,23 @@ static int
 xps_image_end_image(gx_image_enum_common_t * info, bool draw_last)
 {
     xps_image_enum_t *pie = (xps_image_enum_t *)info;
     int code = 0;
 
     /* N.B. Write the final strip, if any. */
 
     code = TIFFWriteDirectory(pie->tif);
-    tiff_client_release((gx_device_xps*)(pie->dev), pie->tif);
-    TIFFCleanup(pie->tif);
-    pie->tif = NULL;
+    xps_tiff_cleanup(pie);
 
     /* Stuff the image into the zip archive and close the file */
     code = xps_add_tiff_image(pie);
     if (code < 0)
         goto exit;
 
     /* Reset the brush type to solid */
     xps_setstrokebrush((gx_device_xps *) (pie->dev), xps_solidbrush);
     xps_setfillbrush((gx_device_xps *) (pie->dev), xps_solidbrush);
 
     /* Add the image relationship */
     code = xps_add_image_relationship(pie);
 
     gs_free_object(pie->memory, pie, "xps_image_end_image");
@@ -2575,35 +2573,34 @@ tiff_from_name(gx_device_xps *dev, const char *name, int big_endian, bool usebig
     return t;
 }
 
-static void
-tiff_client_release(gx_device_xps *dev, TIFF *t)
+static void xps_tiff_cleanup(xps_image_enum_t *xpie)
 {
-    gs_free_object(dev->memory->non_gc_memory, TIFFClientdata(t),
-        "tiff_client_release");
+    if (xpie->tif != NULL) {
+        void *t = TIFFClientdata(xpie->tif);
+        TIFFCleanup(xpie->tif);
+        xpie->tif = NULL;
+        gs_free_object(xpie->memory->non_gc_memory, t, "xps_image_enum_finalize");
+    }
 }
 
 static void
 xps_image_enum_finalize(const gs_memory_t *cmem, void *vptr)
 {
     xps_image_enum_t *xpie = (xps_image_enum_t *)vptr;
     gx_device_xps *xdev = (gx_device_xps *)xpie->dev;
 
-    if (xpie->tif != NULL) {
-        tiff_client_release((gx_device_xps*)(xpie->dev), xpie->tif);
-        TIFFCleanup(xpie->tif);
-        xpie->tif = NULL;
-    }
+    xps_tiff_cleanup(xpie);
 
     xpie->dev = NULL;
     if (xpie->pcs != NULL)
         rc_decrement(xpie->pcs, "xps_image_end_image (pcs)");
     if (xpie->buffer != NULL)
         gs_free_object(xpie->memory, xpie->buffer, "xps_image_end_image");
     if (xpie->devc_buffer != NULL)
         gs_free_object(xpie->memory, xpie->devc_buffer, "xps_image_end_image");
 
     /* ICC clean up */
     if (xpie->icc_link != NULL)
         gsicc_release_link(xpie->icc_link);
     xdev->xps_pie = NULL;
 }
