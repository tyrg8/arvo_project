commit cdde253e40829a8ec85d721cb941bb0a4f59d6a2
Author: Brian Osman <brianosman@google.com>
Date:   Tue Jan 5 17:04:24 2021 -0500

    Runtime effects: Disallow bitwise ops and integer remainder
    
    Bug: skia:10680
    Bug: skia:11088
    Bug: skia:11127
    Change-Id: I25ea288d03df13147b31bc4ca4b224bbe2fa924e
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/350030
    Reviewed-by: John Stiles <johnstiles@google.com>
    Commit-Queue: Brian Osman <brianosman@google.com>

diff --git a/gn/sksl_tests.gni b/gn/sksl_tests.gni
index 7006683474..8fc07855d6 100644
--- a/gn/sksl_tests.gni
+++ b/gn/sksl_tests.gni
@@ -485,9 +485,10 @@ sksl_rte_tests = [
 
 sksl_rte_error_tests = [
   "$_tests/sksl/errors/Discard.rte",
+  "$_tests/sksl/errors/IllegalOperators.rte",
   "$_tests/sksl/errors/UnsupportedTypeSampler.rte",
   "$_tests/sksl/errors/UnsupportedTypeTexture.rte",
 ]
 
 # Tests in sksl_fp_tests_sources will be compiled with --settings on, and are expected to generate
 # a .cpp and a .h output file.
diff --git a/src/sksl/SkSLIRGenerator.cpp b/src/sksl/SkSLIRGenerator.cpp
index cca9af1059..f88ca4d87d 100644
--- a/src/sksl/SkSLIRGenerator.cpp
+++ b/src/sksl/SkSLIRGenerator.cpp
@@ -1568,35 +1568,45 @@ static bool op_only_valid_for_integral_types(Token::Kind op) {
 /**
  * Defines the set of operators which perform vector/matrix math.
  */
 static bool op_valid_for_matrix_or_vector(Token::Kind op) {
     switch (op) {
         case Token::Kind::TK_PLUS:
         case Token::Kind::TK_MINUS:
         case Token::Kind::TK_STAR:
         case Token::Kind::TK_SLASH:
         case Token::Kind::TK_PERCENT:
         case Token::Kind::TK_SHL:
         case Token::Kind::TK_SHR:
         case Token::Kind::TK_BITWISEAND:
         case Token::Kind::TK_BITWISEOR:
         case Token::Kind::TK_BITWISEXOR:
         case Token::Kind::TK_PLUSEQ:
         case Token::Kind::TK_MINUSEQ:
         case Token::Kind::TK_STAREQ:
         case Token::Kind::TK_SLASHEQ:
         case Token::Kind::TK_PERCENTEQ:
         case Token::Kind::TK_SHLEQ:
         case Token::Kind::TK_SHREQ:
         case Token::Kind::TK_BITWISEANDEQ:
         case Token::Kind::TK_BITWISEOREQ:
         case Token::Kind::TK_BITWISEXOREQ:
             return true;
         default:
             return false;
     }
 }
 
+/*
+ * Defines the set of operators allowed by The OpenGL ES Shading Language 1.00, Section 5.1.
+ * The set of illegal (reserved) operators are the ones that only make sense with integral types.
+ * This is not a coincidence: It's because ES2 doesn't require 'int' to be anything but syntactic
+ * sugar for floats with truncation after each operation).
+ */
+static bool op_allowed_in_strict_es2_mode(Token::Kind op) {
+    return !op_only_valid_for_integral_types(op);
+}
+
 /**
  * Determines the operand and result types of a binary expression. Returns true if the expression is
  * legal, false otherwise. If false, the values of the out parameters are undefined.
  */
@@ -1993,58 +2003,63 @@ std::unique_ptr<Expression> IRGenerator::constantFold(const Expression& left,
 std::unique_ptr<Expression> IRGenerator::convertBinaryExpression(const ASTNode& expression) {
     SkASSERT(expression.fKind == ASTNode::Kind::kBinary);
     auto iter = expression.begin();
     std::unique_ptr<Expression> left = this->convertExpression(*(iter++));
     if (!left) {
         return nullptr;
     }
     Token::Kind op = expression.getToken().fKind;
     std::unique_ptr<Expression> right = this->convertExpression(*(iter++));
     if (!right) {
         return nullptr;
     }
     const Type* leftType;
     const Type* rightType;
     const Type* resultType;
     const Type* rawLeftType;
     if (left->is<IntLiteral>() && right->type().isInteger()) {
         rawLeftType = &right->type();
     } else {
         rawLeftType = &left->type();
     }
     const Type* rawRightType;
     if (right->is<IntLiteral>() && left->type().isInteger()) {
         rawRightType = &left->type();
     } else {
         rawRightType = &right->type();
     }
+    if (this->strictES2Mode() && !op_allowed_in_strict_es2_mode(op)) {
+        fErrors.error(expression.fOffset,
+                      String("operator '") + Compiler::OperatorName(op) + "' is not allowed");
+        return nullptr;
+    }
     if (!determine_binary_type(fContext, fSettings->fAllowNarrowingConversions, op,
                                *rawLeftType, *rawRightType, &leftType, &rightType, &resultType)) {
         fErrors.error(expression.fOffset, String("type mismatch: '") +
                                           Compiler::OperatorName(expression.getToken().fKind) +
                                           "' cannot operate on '" + left->type().displayName() +
                                           "', '" + right->type().displayName() + "'");
         return nullptr;
     }
     if (Compiler::IsAssignment(op)) {
         if (leftType->componentType().isOpaque()) {
             fErrors.error(expression.fOffset, "assignments to opaque type '" +
                                               left->type().displayName() + "' are not permitted");
         }
         if (!this->setRefKind(*left, op != Token::Kind::TK_EQ
                                              ? VariableReference::RefKind::kReadWrite
                                              : VariableReference::RefKind::kWrite)) {
             return nullptr;
         }
     }
     left = this->coerce(std::move(left), *leftType);
     right = this->coerce(std::move(right), *rightType);
     if (!left || !right) {
         return nullptr;
     }
     std::unique_ptr<Expression> result = this->constantFold(*left, op, *right);
     if (!result) {
         result = std::make_unique<BinaryExpression>(expression.fOffset, std::move(left), op,
                                                     std::move(right), resultType);
     }
     return result;
 }
@@ -2458,81 +2473,89 @@ std::unique_ptr<Expression> IRGenerator::convertConstructor(int offset,
 std::unique_ptr<Expression> IRGenerator::convertPrefixExpression(const ASTNode& expression) {
     SkASSERT(expression.fKind == ASTNode::Kind::kPrefix);
     std::unique_ptr<Expression> base = this->convertExpression(*expression.begin());
     if (!base) {
         return nullptr;
     }
     const Type& baseType = base->type();
     switch (expression.getToken().fKind) {
         case Token::Kind::TK_PLUS:
             if (!baseType.isNumber() && !baseType.isVector() &&
                 baseType != *fContext.fFloatLiteral_Type) {
                 fErrors.error(expression.fOffset,
                               "'+' cannot operate on '" + baseType.displayName() + "'");
                 return nullptr;
             }
             return base;
 
         case Token::Kind::TK_MINUS:
             if (base->is<IntLiteral>()) {
                 return std::make_unique<IntLiteral>(fContext, base->fOffset,
                                                     -base->as<IntLiteral>().value());
             }
             if (base->is<FloatLiteral>()) {
                 return std::make_unique<FloatLiteral>(fContext, base->fOffset,
                                                       -base->as<FloatLiteral>().value());
             }
             if (!baseType.isNumber() &&
                 !(baseType.isVector() && baseType.componentType().isNumber())) {
                 fErrors.error(expression.fOffset,
                               "'-' cannot operate on '" + baseType.displayName() + "'");
                 return nullptr;
             }
             return std::make_unique<PrefixExpression>(Token::Kind::TK_MINUS, std::move(base));
 
         case Token::Kind::TK_PLUSPLUS:
             if (!baseType.isNumber()) {
                 fErrors.error(expression.fOffset,
                               String("'") + Compiler::OperatorName(expression.getToken().fKind) +
                               "' cannot operate on '" + baseType.displayName() + "'");
                 return nullptr;
             }
             if (!this->setRefKind(*base, VariableReference::RefKind::kReadWrite)) {
                 return nullptr;
             }
             break;
         case Token::Kind::TK_MINUSMINUS:
             if (!baseType.isNumber()) {
                 fErrors.error(expression.fOffset,
                               String("'") + Compiler::OperatorName(expression.getToken().fKind) +
                               "' cannot operate on '" + baseType.displayName() + "'");
                 return nullptr;
             }
             if (!this->setRefKind(*base, VariableReference::RefKind::kReadWrite)) {
                 return nullptr;
             }
             break;
         case Token::Kind::TK_LOGICALNOT:
             if (!baseType.isBoolean()) {
                 fErrors.error(expression.fOffset,
                               String("'") + Compiler::OperatorName(expression.getToken().fKind) +
                               "' cannot operate on '" + baseType.displayName() + "'");
                 return nullptr;
             }
             if (base->kind() == Expression::Kind::kBoolLiteral) {
                 return std::make_unique<BoolLiteral>(fContext, base->fOffset,
                                                      !base->as<BoolLiteral>().value());
             }
             break;
         case Token::Kind::TK_BITWISENOT:
+            if (this->strictES2Mode()) {
+                // GLSL ES 1.00, Section 5.1
+                fErrors.error(expression.fOffset,
+                              String("operator '") +
+                                      Compiler::OperatorName(expression.getToken().fKind) +
+                                      "' is not allowed");
+                return nullptr;
+            }
             if (baseType != *fContext.fInt_Type && baseType != *fContext.fUInt_Type) {
                 fErrors.error(expression.fOffset,
                               String("'") + Compiler::OperatorName(expression.getToken().fKind) +
                               "' cannot operate on '" + baseType.displayName() + "'");
                 return nullptr;
             }
             break;
         default:
             ABORT("unsupported prefix operator\n");
     }
     return std::make_unique<PrefixExpression>(expression.getToken().fKind, std::move(base));
 }
diff --git a/tests/SkSLInterpreterTest.cpp b/tests/SkSLInterpreterTest.cpp
index 73a5281a1f..fad956272b 100644
--- a/tests/SkSLInterpreterTest.cpp
+++ b/tests/SkSLInterpreterTest.cpp
@@ -217,13 +217,6 @@ DEF_TEST(SkSLInterpreterDivide, r) {
          -4, -2, 0, 0);
 }
 
-DEF_TEST(SkSLInterpreterRemainder, r) {
-    test(r, "void main(inout half4 color) { color.r = int(color.r) % int(color.g); }", 8, 3, 0, 0,
-         2, 3, 0, 0);
-    test(r, "void main(inout half4 color) { color.rg = half2(int2(int(color.r), int(color.g)) % "
-                "int(color.b)); }", 8, 10, 6, 0, 2, 4, 6, 0);
-}
-
 DEF_TEST(SkSLInterpreterAnd, r) {
     test(r, "void main(inout half4 color) { if (color.r > color.g && color.g > color.b) "
             "color = half4(color.a); }", 2, 1, 0, 3, 3, 3, 3, 3);
@@ -254,27 +247,6 @@ DEF_TEST(SkSLInterpreterOr, r) {
             "color = half4(color.a); color.a = global; }", 2, 1, 1, 3, 3, 3, 3, 0);
 }
 
-DEF_TEST(SkSLInterpreterBitwise, r) {
-    test(r, "void main(inout half4 color) { color.r = half(int(color.r) | 3); }",
-         5, 0, 0, 0, 7, 0, 0, 0);
-    test(r, "void main(inout half4 color) { color.r = half(int(color.r) & 3); }",
-         6, 0, 0, 0, 2, 0, 0, 0);
-    test(r, "void main(inout half4 color) { color.r = half(int(color.r) ^ 3); }",
-         5, 0, 0, 0, 6, 0, 0, 0);
-    test(r, "void main(inout half4 color) { color.r = half(~int(color.r) & 3); }",
-         6, 0, 0, 0, 1, 0, 0, 0);
-
-    // Shift operators
-    unsigned in = 0x80000011;
-    unsigned out;
-
-    out = 0x00000088;
-    test(r, "int  main(int  x) { return x << 3; }", (float*)&in, (float*)&out);
-
-    out = 0xF0000002;
-    test(r, "int main(int x) { return x >> 3; }", (float*)&in, (float*)&out);
-}
-
 DEF_TEST(SkSLInterpreterMatrix, r) {
     float in[16];
     float expected[16];
diff --git a/tests/sksl/errors/IllegalOperators.rte b/tests/sksl/errors/IllegalOperators.rte
new file mode 100644
index 0000000000..08b25169c7
--- /dev/null
+++ b/tests/sksl/errors/IllegalOperators.rte
@@ -0,0 +1,16 @@
+int bit_not(int x) { return ~x; }
+
+int remainder(int x)    { return x %  2; }
+int remainder_eq(int x) { return x %= 2;}
+
+int shl   (int x) { return x <<  1; }
+int shl_eq(int x) { return x <<= 1; }
+int shr   (int x) { return x >>  1; }
+int shr_eq(int x) { return x >>= 1; }
+
+int bit_and   (int x) { return x &  1; }
+int bit_and_eq(int x) { return x &= 1; }
+int bit_or    (int x) { return x |  1; }
+int bit_or_eq (int x) { return x |= 1; }
+int bit_xor   (int x) { return x ^  1; }
+int bit_xor_eq(int x) { return x ^= 1; }
diff --git a/tests/sksl/errors/golden/IllegalOperators.skvm b/tests/sksl/errors/golden/IllegalOperators.skvm
new file mode 100644
index 0000000000..44c383c446
--- /dev/null
+++ b/tests/sksl/errors/golden/IllegalOperators.skvm
@@ -0,0 +1,16 @@
+### Compilation failed:
+
+error: 1: operator '~' is not allowed
+error: 3: operator '%' is not allowed
+error: 4: operator '%=' is not allowed
+error: 6: operator '<<' is not allowed
+error: 7: operator '<<=' is not allowed
+error: 8: operator '>>' is not allowed
+error: 9: operator '>>=' is not allowed
+error: 11: operator '&' is not allowed
+error: 12: operator '&=' is not allowed
+error: 13: operator '|' is not allowed
+error: 14: operator '|=' is not allowed
+error: 15: operator '^' is not allowed
+error: 16: operator '^=' is not allowed
+13 errors
