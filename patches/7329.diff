commit 79ee4b96b5dbb8785bec26e0162600268aa095b6
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Tue Apr 3 13:35:50 2018 -0400

    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=7329

diff --git a/coders/heic.c b/coders/heic.c
index 580efbf20..df48726ce 100644
--- a/coders/heic.c
+++ b/coders/heic.c
@@ -385,47 +385,48 @@ static MagickBooleanType ParseHvcCAtom(HEICItemProp *prop, ExceptionInfo *except
 static MagickBooleanType ParseIpcoAtom(Image *image, DataBuffer *db,
     HEICImageContext *ctx, ExceptionInfo *exception)
 {
   unsigned int
     length, atom;
 
   HEICItemProp
     *prop;
 
   /*
      property indicies starts from 1
   */
   for (ctx->itemPropsCount = 1; ctx->itemPropsCount < MAX_ITEM_PROPS && DBGetSize(db) > 8; ctx->itemPropsCount++) {
     DataBuffer
       propDb;
 
     length = DBReadUInt(db);
     atom = DBReadUInt(db);
 
     if (ctx->itemPropsCount == MAX_ITEM_PROPS) {
       ThrowAndReturn("too many item properties");
     }
 
     prop = &(ctx->itemProps[ctx->itemPropsCount]);
     prop->type = atom;
     prop->size = length - 8;
     if (prop->size > DBGetSize(db))
       ThrowAndReturn("insufficient data");
     if (prop->data != (uint8_t *) NULL)
       prop->data=(uint8_t *) RelinquishMagickMemory(prop->data);
     prop->data = (uint8_t *) AcquireCriticalMemory(prop->size+4);
+    (void) memset(prop->data, 0, prop->size+4);
     if (DBChop(&propDb, db, prop->size) != MagickTrue) {
       ThrowAndReturn("incorrect read size");
     }
-    memcpy(prop->data, propDb.data, prop->size+4);
+    memcpy(prop->data, propDb.data, prop->size);
 
     switch (prop->type) {
       case ATOM('h', 'v', 'c', 'C'):
         ParseHvcCAtom(prop, exception);
         break;
       default:
         break;
     }
   }
 
   return MagickTrue;
 }
