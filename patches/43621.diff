commit fd267e86e80929b9b82d8741552250a121d4f8c9
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Tue Jan 18 09:24:42 2022 +0000

    OSS-fuzz #43621 - prevent overflow in pattern step scaling
    
    Robin Watts also has a fix for this, in the graphics library, I think
    it is worth having both.
    
    The problem was that YStep in the pattern was so large that when scaled
    by the CTM it was overflowing a float and becoming #INF, which was
    making all the arithmetic in the graphics library invalid.
    
    This code checks the Step values to ensure they all fit into
    a float, and then in the graphics library checks that after
    multiplication they still fit before attempting to use them.

diff --git a/base/gsptype1.c b/base/gsptype1.c
index f020b909f..4a266e244 100644
--- a/base/gsptype1.c
+++ b/base/gsptype1.c
@@ -1,51 +1,51 @@
-/* Copyright (C) 2001-2021 Artifex Software, Inc.
+/* Copyright (C) 2001-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 
 /* PatternType 1 pattern implementation */
 #include "math_.h"
 #include "memory_.h"
 #include "gx.h"
 #include "gserrors.h"
 #include "gsrop.h"
 #include "gsstruct.h"
 #include "gsutil.h"             /* for gs_next_ids */
 #include "gxarith.h"
 #include "gxfixed.h"
 #include "gxmatrix.h"
 #include "gxcoord.h"            /* for gs_concat, gx_tr'_to_fixed */
 #include "gxcspace.h"           /* for gscolor2.h */
 #include "gxcolor2.h"
 #include "gxdcolor.h"
 #include "gxdevice.h"
 #include "gxdevmem.h"
 #include "gxclip2.h"
 #include "gspath.h"
 #include "gxpath.h"
 #include "gxpcolor.h"
 #include "gxp1impl.h"           /* requires gxpcolor.h */
 #include "gxclist.h"
 #include "gzstate.h"
 #include "gsimage.h"
 #include "gsiparm4.h"
 #include "gsovrc.h"
 #include "gxdevsop.h"
 
 /* Temporary switches for experimanting with Adobe compatibility. */
 #define ADJUST_SCALE_FOR_THIN_LINES 0   /* Old code = 0 */
 #define ADJUST_SCALE_BY_GS_TRADITION 0  /* Old code = 1 */
 #define ADJUST_AS_ADOBE 1               /* Old code = 0 *//* This one is closer to Adobe. */
 
 /* GC descriptors */
@@ -587,63 +587,87 @@ static int
 compute_inst_matrix(gs_pattern1_instance_t * pinst,
                     gs_rect * pbbox, int width, int height,
                     float *pbbw, float *pbbh)
 {
     float xx, xy, yx, yy, temp;
     int code;
     gs_gstate * saved = pinst->saved;
     gs_matrix m = ctm_only(saved);
 
     /* Bug 702124: Due to the limited precision of floats, we find that
      * transforming (say) small height boxes in the presence of large tx/ty
      * values can cause the box heights to map to 0. So calculate the
      * width/height of the bbox before we roll the offset into it. */
     m.tx = 0; m.ty = 0;
 
     code = gs_bbox_transform(&pinst->templat.BBox, &m, pbbox);
     if (code < 0)
         return code;
 
     *pbbw = pbbox->q.x - pbbox->p.x;
     *pbbh = pbbox->q.y - pbbox->p.y;
 
     pbbox->p.x += ctm_only(saved).tx;
     pbbox->p.y += ctm_only(saved).ty;
     pbbox->q.x += ctm_only(saved).tx;
     pbbox->q.y += ctm_only(saved).ty;
 
     code = adjust_bbox_to_pixel_origin(pinst, pbbox);
     if (code < 0)
         return code;
 
     /* The stepping matrix : */
-    xx = pinst->templat.XStep * saved->ctm.xx;
-    xy = pinst->templat.XStep * saved->ctm.xy;
-    yx = pinst->templat.YStep * saved->ctm.yx;
-    yy = pinst->templat.YStep * saved->ctm.yy;
+    /* We do not want to overflow the maths here. Since xx etc are all floats
+     * then the multiplication will definitely fit into a double, and we can
+     * check to ensure that the result still fits into a float without
+     * overflowing at any point.
+     */
+    {
+        double double_mult = 0.0;
+
+        double_mult = (double)pinst->templat.XStep * (double)saved->ctm.xx;
+        if (double_mult < -MAX_FLOAT || double_mult > MAX_FLOAT)
+            return_error(gs_error_rangecheck);
+        xx = (float)double_mult;
+
+        double_mult = (double)pinst->templat.XStep * (double)saved->ctm.xy;
+        if (double_mult < -MAX_FLOAT || double_mult > MAX_FLOAT)
+            return_error(gs_error_rangecheck);
+        xy = double_mult;
+
+        double_mult = (double)pinst->templat.YStep * (double)saved->ctm.yx;
+        if (double_mult < -MAX_FLOAT || double_mult > MAX_FLOAT)
+            return_error(gs_error_rangecheck);
+        yx = double_mult;
+
+        double_mult = (double)pinst->templat.YStep * (double)saved->ctm.yy;
+        if (double_mult < -MAX_FLOAT || double_mult > MAX_FLOAT)
+            return_error(gs_error_rangecheck);
+        yy = double_mult;
+    }
 
     /* Adjust the stepping matrix so all coefficients are >= 0. */
     if (xx == 0 || yy == 0) { /* We know that both xy and yx are non-zero. */
         temp = xx, xx = yx, yx = temp;
         temp = xy, xy = yy, yy = temp;
     }
     if (xx < 0)
         xx = -xx, xy = -xy;
     if (yy < 0)
         yx = -yx, yy = -yy;
     /* Now xx > 0, yy > 0. */
     pinst->step_matrix.xx = xx;
     pinst->step_matrix.xy = xy;
     pinst->step_matrix.yx = yx;
     pinst->step_matrix.yy = yy;
 
     /*
      * Some applications produce patterns that are larger than the page.
      * If the bounding box for the pattern is larger than the page. clamp
      * the pattern to the page size.
      */
     if ((pbbox->q.x - pbbox->p.x > width || pbbox->q.y - pbbox->p.y > height))
         code = clamp_pattern_bbox(pinst, pbbox, width,
                                         height, &ctm_only(saved));
 
     return code;
 }
diff --git a/pdf/pdf_pattern.c b/pdf/pdf_pattern.c
index 15923d640..a21c36f42 100644
--- a/pdf/pdf_pattern.c
+++ b/pdf/pdf_pattern.c
@@ -1,41 +1,41 @@
-/* Copyright (C) 2019-2021 Artifex Software, Inc.
+/* Copyright (C) 2019-2022 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 /* Pattern operations for the PDF interpreter */
 
 #include "pdf_int.h"
 #include "pdf_doc.h"
 #include "pdf_colour.h"
 #include "pdf_pattern.h"
 #include "pdf_stack.h"
 #include "pdf_array.h"
 #include "pdf_gstate.h"
 #include "pdf_file.h"
 #include "pdf_dict.h"
 #include "pdf_loop_detect.h"
 #include "pdf_func.h"
 #include "pdf_shading.h"
 #include "pdf_check.h"
 
 #include "gsicc_manage.h"
 #include "gsicc_profilecache.h"
 #include "gsicc_create.h"
 #include "gsptype2.h"
 #include "gxdevsop.h"               /* For special ops : pattern_accum_param_s */
 #include "gscsepr.h"
 #include "stream.h"
 #include "strmio.h"
 #include "gscdevn.h"
 #include "gscoord.h"                /* For gs_setmatrix() */
@@ -399,131 +399,139 @@ static int
 pdfi_setpattern_type1(pdf_context *ctx, pdf_dict *stream_dict, pdf_dict *page_dict,
                       pdf_obj *stream, gs_client_color *cc)
 {
     int code = 0;
     gs_client_pattern templat;
     gs_matrix mat;
     gs_rect rect;
     int64_t PaintType, TilingType;
     pdf_array *BBox = NULL;
     double XStep, YStep;
     pdf_dict *Resources = NULL, *pdict = NULL;
     pdf_array *Matrix = NULL;
     bool transparency = false;
     pdf_pattern_context_t *context = NULL;
 
 #if DEBUG_PATTERN
     dbgmprintf(ctx->memory, "PATTERN: Type 1 pattern\n");
 #endif
 
     gs_pattern1_init(&templat);
 
     /* Must be a stream */
     if (stream->type != PDF_STREAM) {
         code = gs_note_error(gs_error_typecheck);
         goto exit;
     }
     code = pdfi_dict_from_obj(ctx, stream, &pdict);
     if (code < 0)
         return code;
 
     /* Required */
     code = pdfi_dict_get_int(ctx, pdict, "PaintType", &PaintType);
     if (code < 0)
         goto exit;
     code = pdfi_dict_get_int(ctx, pdict, "TilingType", &TilingType);
     if (code < 0)
         goto exit;
     code = pdfi_dict_get_type(ctx, pdict, "BBox", PDF_ARRAY, (pdf_obj **)&BBox);
     if (code < 0)
         goto exit;
     code = pdfi_pattern_get_rect(ctx, BBox, &rect);
     if (code < 0)
         goto exit;
     code = pdfi_dict_get_number(ctx, pdict, "XStep", &XStep);
     if (code < 0)
         goto exit;
     code = pdfi_dict_get_number(ctx, pdict, "YStep", &YStep);
     if (code < 0)
         goto exit;
 
+    /* The pattern instance holds the pattern step as floats, make sure they
+     * will fit.
+     */
+    if (XStep < -MAX_FLOAT || XStep > MAX_FLOAT || YStep < -MAX_FLOAT || YStep > MAX_FLOAT) {
+        code = gs_note_error(gs_error_rangecheck);
+        goto exit;
+    }
+
     /* The spec says Resources are required, but in fact this doesn't seem to be true.
      * (tests_private/pdf/sumatra/infinite_pattern_recursion.pdf)
      */
     code = pdfi_dict_get_type(ctx, pdict, "Resources", PDF_DICT, (pdf_obj **)&Resources);
     if (code < 0) {
 #if DEBUG_PATTERN
         dbgmprintf(ctx->memory, "PATTERN: Missing Resources in Pattern dict\n");
 #endif
         pdfi_set_warning(ctx, 0, NULL, W_PDF_BADPATTERN, "pdfi_setpattern_type1", NULL);
         code = 0;
     }
 
     /* (optional Matrix) */
     code = pdfi_dict_knownget_type(ctx, pdict, "Matrix", PDF_ARRAY, (pdf_obj **)&Matrix);
     if (code < 0)
         goto exit;
     code = pdfi_array_to_gs_matrix(ctx, Matrix, &mat);
     if (code < 0)
         goto exit;
 
     if (PaintType != 1 && PaintType != 2) {
         code = gs_note_error(gs_error_rangecheck);
         goto exit;
     }
     if (TilingType != 1 && TilingType != 2 && TilingType != 3) {
         code = gs_note_error(gs_error_rangecheck);
         goto exit;
     }
 
     /* See if pattern uses transparency */
     if (ctx->page.has_transparency) {
         code = pdfi_check_Pattern_transparency(ctx, pdict, page_dict, &transparency);
         if (code < 0)
             goto exit;
     }
 
     /* TODO: Resources?  Maybe I should check that they are all valid before proceeding, or something? */
 
     templat.BBox = rect;
     /* (see zPaintProc or px_remap_pattern) */
     templat.PaintProc = pdfi_pattern_paintproc;
     templat.PaintType = PaintType;
     templat.TilingType = TilingType;
     templat.XStep = XStep;
     templat.YStep = YStep;
     templat.uses_transparency = transparency;
     //templat.uses_transparency = false; /* disable */
 
     code = pdfi_gsave(ctx);
     if (code < 0)
         goto exit;
 
     code = pdfi_pattern_setup(ctx, &context, page_dict, stream, NULL);
     if (code < 0) {
         (void) pdfi_grestore(ctx);
         goto exit;
     }
 
     /* We need to use the graphics state memory, in case we are running under Ghostscript. */
     code = gs_make_pattern(cc, (const gs_pattern_template_t *)&templat, &mat, ctx->pgs, ctx->pgs->memory);
     if (code < 0) {
         (void) pdfi_grestore(ctx);
         goto exit;
     }
 
     cc->pattern->client_data = context;
     cc->pattern->notify_free = pdfi_pattern_cleanup;
     context = NULL;
 
     code = pdfi_grestore(ctx);
     if (code < 0)
         goto exit;
  exit:
     pdfi_countdown(context);
     pdfi_countdown(Resources);
     pdfi_countdown(Matrix);
     pdfi_countdown(BBox);
     return code;
 }
 
 /* Type 2 (shading) Pattern */
