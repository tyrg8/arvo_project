commit c3805d74ba4c46aacf9470646fdecdcba68e11d0
Author: Philip Withnall <pwithnall@endlessos.org>
Date:   Wed Dec 9 14:50:02 2020 +0000

    gdatetime: Disallow NAN as a number of seconds in a GDateTime
    
    The fiendish thing about NAN is that it never compares TRUE against
    anything, so the limit checks `seconds < 0.0 || seconds >= 60.0` were
    never triggering.
    
    oss-fuzz#28473
    
    Signed-off-by: Philip Withnall <pwithnall@endlessos.org>

diff --git a/glib/gdatetime.c b/glib/gdatetime.c
index a2409f410..56eb8cc58 100644
--- a/glib/gdatetime.c
+++ b/glib/gdatetime.c
@@ -1,115 +1,116 @@
 /* gdatetime.c
  *
  * Copyright (C) 2009-2010 Christian Hergert <chris@dronelabs.com>
  * Copyright (C) 2010 Thiago Santos <thiago.sousa.santos@collabora.co.uk>
  * Copyright (C) 2010 Emmanuele Bassi <ebassi@linux.intel.com>
  * Copyright © 2010 Codethink Limited
  * Copyright © 2018 Tomasz Miąsko
  *
  * This library is free software; you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as
  * published by the Free Software Foundation; either version 2.1 of the
  * licence, or (at your option) any later version.
  *
  * This is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
  * License for more details.
  *
  * You should have received a copy of the GNU Lesser General Public License
  * along with this library; if not, see <http://www.gnu.org/licenses/>.
  *
  * Authors: Christian Hergert <chris@dronelabs.com>
  *          Thiago Santos <thiago.sousa.santos@collabora.co.uk>
  *          Emmanuele Bassi <ebassi@linux.intel.com>
  *          Ryan Lortie <desrt@desrt.ca>
  *          Robert Ancell <robert.ancell@canonical.com>
  */
 
 /* Algorithms within this file are based on the Calendar FAQ by
  * Claus Tondering.  It can be found at
  * http://www.tondering.dk/claus/cal/calendar29.txt
  *
  * Copyright and disclaimer
  * ------------------------
  *   This document is Copyright (C) 2008 by Claus Tondering.
  *   E-mail: claus@tondering.dk. (Please include the word
  *   "calendar" in the subject line.)
  *   The document may be freely distributed, provided this
  *   copyright notice is included and no money is charged for
  *   the document.
  *
  *   This document is provided "as is". No warranties are made as
  *   to its correctness.
  */
 
 /* Prologue {{{1 */
 
 #include "config.h"
 
 /* langinfo.h in glibc 2.27 defines ALTMON_* only if _GNU_SOURCE is defined.  */
 #ifndef _GNU_SOURCE
 #define _GNU_SOURCE 1
 #endif
 
+#include <math.h>
 #include <stdlib.h>
 #include <string.h>
 
 #ifdef HAVE_LANGINFO_TIME
 #include <langinfo.h>
 #endif
 
 #include "gdatetime.h"
 
 #include "gslice.h"
 #include "gatomic.h"
 #include "gcharset.h"
 #include "gconvert.h"
 #include "gfileutils.h"
 #include "ghash.h"
 #include "gmain.h"
 #include "gmappedfile.h"
 #include "gstrfuncs.h"
 #include "gtestutils.h"
 #include "gthread.h"
 #include "gtimezone.h"
 
 #include "glibintl.h"
 
 #ifndef G_OS_WIN32
 #include <sys/time.h>
 #include <time.h>
 #endif /* !G_OS_WIN32 */
 
 /**
  * SECTION:date-time
  * @title: GDateTime
  * @short_description: a structure representing Date and Time
  * @see_also: #GTimeZone
  *
  * #GDateTime is a structure that combines a Gregorian date and time
  * into a single structure.  It provides many conversion and methods to
  * manipulate dates and times.  Time precision is provided down to
  * microseconds and the time can range (proleptically) from 0001-01-01
  * 00:00:00 to 9999-12-31 23:59:59.999999.  #GDateTime follows POSIX
  * time in the sense that it is oblivious to leap seconds.
  *
  * #GDateTime is an immutable object; once it has been created it cannot
  * be modified further.  All modifiers will create a new #GDateTime.
  * Nearly all such functions can fail due to the date or time going out
  * of range, in which case %NULL will be returned.
  *
  * #GDateTime is reference counted: the reference count is increased by calling
  * g_date_time_ref() and decreased by calling g_date_time_unref(). When the
  * reference count drops to 0, the resources allocated by the #GDateTime
  * structure are released.
  *
  * Many parts of the API may produce non-obvious results.  As an
  * example, adding two months to January 31st will yield March 31st
  * whereas adding one month and then one month again will yield either
  * March 28th or March 29th.  Also note that adding 24 hours is not
  * always the same as adding one day (since days containing daylight
  * savings time transitions are either 23 or 25 hours in length).
  *
  * #GDateTime is available since GLib 2.26.
  */
@@ -1180,40 +1181,44 @@ static gboolean
 get_iso8601_seconds (const gchar *text, gsize length, gdouble *value)
 {
   gsize i;
   gdouble divisor = 1, v = 0;
 
   if (length < 2)
     return FALSE;
 
   for (i = 0; i < 2; i++)
     {
       const gchar c = text[i];
       if (c < '0' || c > '9')
         return FALSE;
       v = v * 10 + (c - '0');
     }
 
   if (length > 2 && !(text[i] == '.' || text[i] == ','))
     return FALSE;
 
   /* Ignore leap seconds, see g_date_time_new_from_iso8601() */
   if (v >= 60.0 && v <= 61.0)
     v = 59.0;
 
   i++;
   if (i == length)
     return FALSE;
 
   for (; i < length; i++)
     {
       const gchar c = text[i];
       if (c < '0' || c > '9')
         return FALSE;
       v = v * 10 + (c - '0');
       divisor *= 10;
     }
 
-  *value = v / divisor;
+  v = v / divisor;
+  if (!isfinite (v))
+    return FALSE;
+
+  *value = v;
   return TRUE;
 }
 
@@ -1565,80 +1570,81 @@ GDateTime *
 g_date_time_new (GTimeZone *tz,
                  gint       year,
                  gint       month,
                  gint       day,
                  gint       hour,
                  gint       minute,
                  gdouble    seconds)
 {
   GDateTime *datetime;
   gint64 full_time;
   /* keep these variables as volatile. We do not want them ending up in
    * registers - them doing so may cause us to hit precision problems on i386.
    * See: https://bugzilla.gnome.org/show_bug.cgi?id=792410 */
   volatile gint64 usec;
   volatile gdouble usecd;
 
   g_return_val_if_fail (tz != NULL, NULL);
 
   if (year < 1 || year > 9999 ||
       month < 1 || month > 12 ||
       day < 1 || day > days_in_months[GREGORIAN_LEAP (year)][month] ||
       hour < 0 || hour > 23 ||
       minute < 0 || minute > 59 ||
+      !isfinite (seconds) ||
       seconds < 0.0 || seconds >= 60.0)
     return NULL;
 
   datetime = g_date_time_alloc (tz);
   datetime->days = ymd_to_days (year, month, day);
   datetime->usec = (hour   * USEC_PER_HOUR)
                  + (minute * USEC_PER_MINUTE)
                  + (gint64) (seconds * USEC_PER_SECOND);
 
   full_time = SEC_PER_DAY *
                 (ymd_to_days (year, month, day) - UNIX_EPOCH_START) +
               SECS_PER_HOUR * hour +
               SECS_PER_MINUTE * minute +
               (int) seconds;
 
   datetime->interval = g_time_zone_adjust_time (datetime->tz,
                                                 G_TIME_TYPE_STANDARD,
                                                 &full_time);
 
   /* This is the correct way to convert a scaled FP value to integer.
    * If this surprises you, please observe that (int)(1.000001 * 1e6)
    * is 1000000.  This is not a problem with precision, it's just how
    * FP numbers work.
    * See https://bugzilla.gnome.org/show_bug.cgi?id=697715. */
   usec = seconds * USEC_PER_SECOND;
   usecd = (usec + 1) * 1e-6;
   if (usecd <= seconds) {
     usec++;
   }
 
   full_time += UNIX_EPOCH_START * SEC_PER_DAY;
   datetime->days = full_time / SEC_PER_DAY;
   datetime->usec = (full_time % SEC_PER_DAY) * USEC_PER_SECOND;
   datetime->usec += usec % USEC_PER_SECOND;
 
   return datetime;
 }
 
 /**
  * g_date_time_new_local: (constructor)
  * @year: the year component of the date
  * @month: the month component of the date
  * @day: the day component of the date
  * @hour: the hour component of the date
  * @minute: the minute component of the date
  * @seconds: the number of seconds past the minute
  *
  * Creates a new #GDateTime corresponding to the given date and time in
  * the local time zone.
  *
  * This call is equivalent to calling g_date_time_new() with the time
  * zone returned by g_time_zone_new_local().
  *
  * Returns: (transfer full) (nullable): a #GDateTime, or %NULL
  *
  * Since: 2.26
  **/
diff --git a/glib/tests/gdatetime.c b/glib/tests/gdatetime.c
index 2da3dcc8b..0e6b5bdd3 100644
--- a/glib/tests/gdatetime.c
+++ b/glib/tests/gdatetime.c
@@ -1,45 +1,46 @@
 /* gdatetime-tests.c
  *
  * Copyright (C) 2009-2010 Christian Hergert <chris@dronelabs.com>
  *
  * This is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 2.1 of the License, or (at your option) any later version.
  *
  * This is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  * Lesser General Public License for more details.
  *
  * You should have received a copy of the GNU Lesser General Public License
  * along with this library; if not, see <http://www.gnu.org/licenses/>.
  */
 
 #include "config.h"
 
+#include <math.h>
 #include <string.h>
 #include <time.h>
 #include <gi18n.h>
 #include <glib.h>
 #include <glib/gstdio.h>
 #include <locale.h>
 
 #ifdef G_OS_WIN32
 #define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 #endif
 
 #define ASSERT_DATE(dt,y,m,d) G_STMT_START { \
   g_assert_nonnull ((dt)); \
   g_assert_cmpint ((y), ==, g_date_time_get_year ((dt))); \
   g_assert_cmpint ((m), ==, g_date_time_get_month ((dt))); \
   g_assert_cmpint ((d), ==, g_date_time_get_day_of_month ((dt))); \
 } G_STMT_END
 #define ASSERT_TIME(dt,H,M,S,U) G_STMT_START { \
   g_assert_nonnull ((dt)); \
   g_assert_cmpint ((H), ==, g_date_time_get_hour ((dt))); \
   g_assert_cmpint ((M), ==, g_date_time_get_minute ((dt))); \
   g_assert_cmpint ((S), ==, g_date_time_get_second ((dt))); \
   g_assert_cmpint ((U), ==, g_date_time_get_microsecond ((dt))); \
 } G_STMT_END
@@ -497,308 +498,314 @@ static void
 test_GDateTime_new_from_iso8601 (void)
 {
   GDateTime *dt;
   GTimeZone *tz;
 
   /* Need non-empty string */
   dt = g_date_time_new_from_iso8601 ("", NULL);
   g_assert_null (dt);
 
   /* Needs to be correctly formatted */
   dt = g_date_time_new_from_iso8601 ("not a date", NULL);
   g_assert_null (dt);
 
   dt = g_date_time_new_from_iso8601 (" +55", NULL);
   g_assert_null (dt);
 
   /* Check common case */
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 0);
   g_date_time_unref (dt);
 
   /* Timezone is required in text or passed as arg */
   tz = g_time_zone_new_utc ();
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22:10:42", tz);
   ASSERT_DATE (dt, 2016, 8, 24);
   g_date_time_unref (dt);
   g_time_zone_unref (tz);
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22:10:42", NULL);
   g_assert_null (dt);
 
   /* Can't have whitespace */
   dt = g_date_time_new_from_iso8601 ("2016 08 24T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22:10:42Z ", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 (" 2016-08-24T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Check lowercase time separator or space allowed */
   dt = g_date_time_new_from_iso8601 ("2016-08-24t22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 0);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-08-24 22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 0);
   g_date_time_unref (dt);
 
   /* Check dates without separators allowed */
   dt = g_date_time_new_from_iso8601 ("20160824T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 0);
   g_date_time_unref (dt);
 
   /* Months are two digits */
   dt = g_date_time_new_from_iso8601 ("2016-1-01T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Days are two digits */
   dt = g_date_time_new_from_iso8601 ("2016-01-1T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Need consistent usage of separators */
   dt = g_date_time_new_from_iso8601 ("2016-0824T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("201608-24T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Check month within valid range */
   dt = g_date_time_new_from_iso8601 ("2016-00-13T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-13-13T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Check day within valid range */
   dt = g_date_time_new_from_iso8601 ("2016-01-00T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-01-31T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 1, 31);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-01-32T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-02-29T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 2, 29);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-02-30T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2017-02-28T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2017, 2, 28);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2017-02-29T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-03-31T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 3, 31);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-03-32T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-04-30T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 4, 30);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-04-31T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-05-31T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 5, 31);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-05-32T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-06-30T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 6, 30);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-06-31T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-07-31T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 7, 31);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-07-32T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-08-31T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 8, 31);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-08-32T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-09-30T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 9, 30);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-09-31T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-10-31T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 10, 31);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-10-32T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-11-30T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 11, 30);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-11-31T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-12-31T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 12, 31);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-12-32T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Check ordinal days work */
   dt = g_date_time_new_from_iso8601 ("2016-237T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 0);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016237T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 0);
   g_date_time_unref (dt);
 
   /* Check ordinal leap days */
   dt = g_date_time_new_from_iso8601 ("2016-366T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 12, 31);
   ASSERT_TIME (dt, 22, 10, 42, 0);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2017-365T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2017, 12, 31);
   ASSERT_TIME (dt, 22, 10, 42, 0);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2017-366T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Days start at 1 */
   dt = g_date_time_new_from_iso8601 ("2016-000T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Limited to number of days in the year (2016 is a leap year) */
   dt = g_date_time_new_from_iso8601 ("2016-367T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Days are two digits */
   dt = g_date_time_new_from_iso8601 ("2016-1T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-12T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Check week days work */
   dt = g_date_time_new_from_iso8601 ("2016-W34-3T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 0);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016W343T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 0);
   g_date_time_unref (dt);
 
   /* We don't support weeks without weekdays (valid ISO 8601) */
   dt = g_date_time_new_from_iso8601 ("2016-W34T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016W34T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Weeks are two digits */
   dt = g_date_time_new_from_iso8601 ("2016-W3-1T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Weeks start at 1 */
   dt = g_date_time_new_from_iso8601 ("2016-W00-1T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Week one might be in the previous year */
   dt = g_date_time_new_from_iso8601 ("2015-W01-1T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2014, 12, 29);
   g_date_time_unref (dt);
 
   /* Last week might be in next year */
   dt = g_date_time_new_from_iso8601 ("2015-W53-7T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 1, 3);
   g_date_time_unref (dt);
 
   /* Week 53 doesn't always exist */
   dt = g_date_time_new_from_iso8601 ("2016-W53-1T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Limited to number of days in the week */
   dt = g_date_time_new_from_iso8601 ("2016-W34-0T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-W34-8T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Days are one digit */
   dt = g_date_time_new_from_iso8601 ("2016-W34-99T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Check week day changes depending on year */
   dt = g_date_time_new_from_iso8601 ("2017-W34-1T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2017, 8, 21);
   g_date_time_unref (dt);
 
   /* Check week day changes depending on leap years */
   dt = g_date_time_new_from_iso8601 ("1900-W01-1T22:10:42Z", NULL);
   ASSERT_DATE (dt, 1900, 1, 1);
   g_date_time_unref (dt);
 
   /* YYYY-MM not allowed (NOT valid ISO 8601) */
   dt = g_date_time_new_from_iso8601 ("2016-08T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* We don't support omitted year (valid ISO 8601) */
   dt = g_date_time_new_from_iso8601 ("--08-24T22:10:42Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("--0824T22:10:42Z", NULL);
   g_assert_null (dt);
 
   /* Check subseconds work */
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22:10:42.123456Z", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 123456);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22:10:42,123456Z", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 123456);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22:10:42.Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-08-24T221042.123456Z", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 123456);
   g_date_time_unref (dt);
 
   /* We don't support times without minutes / seconds (valid ISO 8601) */
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22:10Z", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-08-24T2210Z", NULL);
   g_assert_null (dt);
 
   /* UTC time uses 'Z' */
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22:10:42Z", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 0);
   g_assert_cmpint (g_date_time_get_utc_offset (dt), ==, 0);
   g_date_time_unref (dt);
 
   /* Check timezone works */
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22:10:42+12:00", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 0);
   g_assert_cmpint (g_date_time_get_utc_offset (dt), ==, 12 * G_TIME_SPAN_HOUR);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22:10:42+12", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 0);
   g_assert_cmpint (g_date_time_get_utc_offset (dt), ==, 12 * G_TIME_SPAN_HOUR);
   g_date_time_unref (dt);
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22:10:42-02", NULL);
   ASSERT_DATE (dt, 2016, 8, 24);
   ASSERT_TIME (dt, 22, 10, 42, 0);
   g_assert_cmpint (g_date_time_get_utc_offset (dt), ==, -2 * G_TIME_SPAN_HOUR);
   g_date_time_unref (dt);
 
   /* Timezone seconds not allowed */
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22-12:00:00", NULL);
   g_assert_null (dt);
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22-12:00:00.000", NULL);
   g_assert_null (dt);
 
   /* Timezone hours two digits */
   dt = g_date_time_new_from_iso8601 ("2016-08-24T22-2Z", NULL);
   g_assert_null (dt);
+
+  /* Ordinal date (YYYYDDD), space separator, and then time as HHMMSS,SSS
+   * The interesting bit is that the seconds field is so long as to parse as
+   * NaN */
+  dt = g_date_time_new_from_iso8601 ("0005306 000001,666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666600080000-00", NULL);
+  g_assert_null (dt);
 }
 
 typedef struct {
@@ -1157,122 +1164,124 @@ static void
 test_GDateTime_new_full (void)
 {
   GTimeZone *tz, *dt_tz;
   GDateTime *dt;
 
 #ifdef G_OS_WIN32
   LCID currLcid = GetThreadLocale ();
   LANGID currLangId = LANGIDFROMLCID (currLcid);
   LANGID en = MAKELANGID (LANG_ENGLISH, SUBLANG_ENGLISH_US);
   SetThreadUILanguage (en);
 #endif
 
   dt = g_date_time_new_utc (2009, 12, 11, 12, 11, 10);
   g_assert_cmpint (2009, ==, g_date_time_get_year (dt));
   g_assert_cmpint (12, ==, g_date_time_get_month (dt));
   g_assert_cmpint (11, ==, g_date_time_get_day_of_month (dt));
   g_assert_cmpint (12, ==, g_date_time_get_hour (dt));
   g_assert_cmpint (11, ==, g_date_time_get_minute (dt));
   g_assert_cmpint (10, ==, g_date_time_get_second (dt));
   g_date_time_unref (dt);
 
 #ifdef G_OS_UNIX
   tz = g_time_zone_new_identifier ("America/Tijuana");
 #elif defined G_OS_WIN32
   tz = g_time_zone_new_identifier ("Pacific Standard Time");
 #endif
   g_assert_nonnull (tz);
   dt = g_date_time_new (tz, 2010, 11, 24, 8, 4, 0);
 
   dt_tz = g_date_time_get_timezone (dt);
   g_assert_cmpstr (g_time_zone_get_identifier (dt_tz), ==,
                    g_time_zone_get_identifier (tz));
 
   g_assert_cmpint (2010, ==, g_date_time_get_year (dt));
   g_assert_cmpint (11, ==, g_date_time_get_month (dt));
   g_assert_cmpint (24, ==, g_date_time_get_day_of_month (dt));
   g_assert_cmpint (8, ==, g_date_time_get_hour (dt));
   g_assert_cmpint (4, ==, g_date_time_get_minute (dt));
   g_assert_cmpint (0, ==, g_date_time_get_second (dt));
 #ifdef G_OS_UNIX
   g_assert_cmpstr ("PST", ==, g_date_time_get_timezone_abbreviation (dt));
   g_assert_cmpstr ("America/Tijuana", ==, g_time_zone_get_identifier (dt_tz));
 #elif defined G_OS_WIN32
   g_assert_cmpstr ("Pacific Standard Time", ==,
                     g_date_time_get_timezone_abbreviation (dt));
   g_assert_cmpstr ("Pacific Standard Time", ==,
                    g_time_zone_get_identifier (dt_tz));
   SetThreadUILanguage (currLangId);
 #endif
   g_assert (!g_date_time_is_daylight_savings (dt));
   g_date_time_unref (dt);
   g_time_zone_unref (tz);
 
   /* Check month limits */
   dt = g_date_time_new_utc (2016, 1, 31, 22, 10, 42);
   ASSERT_DATE (dt, 2016, 1, 31);
   g_date_time_unref (dt);
   dt = g_date_time_new_utc (2016, 1, 32, 22, 10, 42);
   g_assert_null (dt);
   dt = g_date_time_new_utc (2016, 2, 29, 22, 10, 42);
   ASSERT_DATE (dt, 2016, 2, 29);
   g_date_time_unref (dt);
   dt = g_date_time_new_utc (2016, 2, 30, 22, 10, 42);
   g_assert_null (dt);
   dt = g_date_time_new_utc (2017, 2, 28, 22, 10, 42);
   ASSERT_DATE (dt, 2017, 2, 28);
   g_date_time_unref (dt);
   dt = g_date_time_new_utc (2017, 2, 29, 22, 10, 42);
   g_assert_null (dt);
   dt = g_date_time_new_utc (2016, 3, 31, 22, 10, 42);
   ASSERT_DATE (dt, 2016, 3, 31);
   g_date_time_unref (dt);
   dt = g_date_time_new_utc (2016, 3, 32, 22, 10, 42);
   g_assert_null (dt);
   dt = g_date_time_new_utc (2016, 4, 30, 22, 10, 42);
   ASSERT_DATE (dt, 2016, 4, 30);
   g_date_time_unref (dt);
   dt = g_date_time_new_utc (2016, 4, 31, 22, 10, 42);
   g_assert_null (dt);
   dt = g_date_time_new_utc (2016, 5, 31, 22, 10, 42);
   ASSERT_DATE (dt, 2016, 5, 31);
   g_date_time_unref (dt);
   dt = g_date_time_new_utc (2016, 5, 32, 22, 10, 42);
   g_assert_null (dt);
   dt = g_date_time_new_utc (2016, 6, 30, 22, 10, 42);
   ASSERT_DATE (dt, 2016, 6, 30);
   g_date_time_unref (dt);
   dt = g_date_time_new_utc (2016, 6, 31, 22, 10, 42);
   g_assert_null (dt);
   dt = g_date_time_new_utc (2016, 7, 31, 22, 10, 42);
   ASSERT_DATE (dt, 2016, 7, 31);
   g_date_time_unref (dt);
   dt = g_date_time_new_utc (2016, 7, 32, 22, 10, 42);
   g_assert_null (dt);
   dt = g_date_time_new_utc (2016, 8, 31, 22, 10, 42);
   ASSERT_DATE (dt, 2016, 8, 31);
   g_date_time_unref (dt);
   dt = g_date_time_new_utc (2016, 8, 32, 22, 10, 42);
   g_assert_null (dt);
   dt = g_date_time_new_utc (2016, 9, 30, 22, 10, 42);
   ASSERT_DATE (dt, 2016, 9, 30);
   g_date_time_unref (dt);
   dt = g_date_time_new_utc (2016, 9, 31, 22, 10, 42);
   g_assert_null (dt);
   dt = g_date_time_new_utc (2016, 10, 31, 22, 10, 42);
   ASSERT_DATE (dt, 2016, 10, 31);
   g_date_time_unref (dt);
   dt = g_date_time_new_utc (2016, 10, 32, 22, 10, 42);
   g_assert_null (dt);
   dt = g_date_time_new_utc (2016, 11, 30, 22, 10, 42);
   ASSERT_DATE (dt, 2016, 11, 30);
   g_date_time_unref (dt);
   dt = g_date_time_new_utc (2016, 11, 31, 22, 10, 42);
   g_assert_null (dt);
   dt = g_date_time_new_utc (2016, 12, 31, 22, 10, 42);
   ASSERT_DATE (dt, 2016, 12, 31);
   g_date_time_unref (dt);
   dt = g_date_time_new_utc (2016, 12, 32, 22, 10, 42);
   g_assert_null (dt);
+  dt = g_date_time_new_utc (2020, 12, 9, 14, 49, NAN);
+  g_assert_null (dt);
 }
 
 static void
