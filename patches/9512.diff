changeset:   15742:80321315c916
user:        Bob Friesenhahn <bfriesen@GraphicsMagick.org>
date:        Sun Jul 22 14:51:15 2018 -0500
summary:     SetNexus(): For requests one pixel tall, SetNexus() was wrongly using pixels in-core rather than using a staging area for the case where the nexus rows extend beyond the image raster boundary. (Credit to OSS-Fuzz)

diff -r ce7a01e36d15 -r 80321315c916 ChangeLog
--- a/ChangeLog	Sun Jul 22 10:58:02 2018 -0500
+++ b/ChangeLog	Sun Jul 22 14:51:15 2018 -0500
@@ -1,5 +1,13 @@
 2018-07-22  Bob Friesenhahn  <bfriesen@simple.dallas.tx.us>
 
+	* magick/pixel_cache.c (SetNexus): For requests one pixel tall,
+	SetNexus() was wrongly using pixels in-core rather than using a
+	staging area for the case where the nexus rows extend beyond the
+	image raster boundary, leading to heap overflow.  This can happen
+	when virtual pixels outside the image bounds are accessed.  Fixes
+	oss-fuzz 9512 "graphicsmagick/graphicsmagick_coder_MVG_fuzzer:
+	Heap-buffer-overflow in AcquireCacheNexus". (Credit to OSS-Fuzz)
+
 	* magick/render.c (ExtractTokensBetweenPushPop):
 	ExtractTokensBetweenPushPop() needs to always return a valid
 	pointer into the primitive string.  Fixes oss-fuzz 9511
diff -r ce7a01e36d15 -r 80321315c916 magick/pixel_cache.c
--- a/magick/pixel_cache.c	Sun Jul 22 10:58:02 2018 -0500
+++ b/magick/pixel_cache.c	Sun Jul 22 14:51:15 2018 -0500
@@ -826,6 +826,11 @@
                      image->filename);
       return((const PixelPacket *) NULL);
     }
+#if 0
+  fprintf(stderr,"AcquireCacheNexus(): image->columns=%lu, image->rows=%lu, "
+          "x=%ld, y=%ld, columns=%lu, rows=%lu\n",
+          image->columns,image->rows,x,y,columns,rows);
+#endif
   if ((image->columns != cache_info->columns) ||
       (image->rows > cache_info->rows))
     {
@@ -4398,40 +4403,38 @@
 #endif
   if ((cache_info->type != PingCache) &&
       (cache_info->type != DiskCache) &&
+      (/* Region must entirely be in bounds of image raster */
+       (region->x >= 0) &&
+       (region->y >= 0) &&
+       ((region->y+region->height) <= cache_info->rows)) &&
+      ((/* All/part of one row */
+        (region->height == 1) &&
+        ((region->x+region->width) <= cache_info->columns)
+        )
+       ||
+       (/* One or more full rows */
+        (region->x == 0) &&
+        (region->width == cache_info->columns)
+        )) &&
       (*ImageGetClipMask(image) == (const Image *) NULL) &&
-      (*ImageGetCompositeMask(image) == (const Image *) NULL) &&
-      (region->x >=0) &&
-      (region->y >= 0))
+      (*ImageGetCompositeMask(image) == (const Image *) NULL))
     {
-      if ((/* All/part of one row */
-           (region->height == 1) &&
-           ((region->x+region->width) <= cache_info->columns)
-           )
-          ||
-          (/* One or more full rows */
-           (region->x == 0) &&
-           (region->width == cache_info->columns) &&
-           (region->y+region->height <= cache_info->rows)
-           )
-          )
-        {
-          /*
-            Pixels are accessed directly from memory.
-          */
-          size_t
-            offset;
-
-          offset=((size_t) region->y)*cache_info->columns+((size_t) region->x);
-
-          nexus_info->pixels=cache_info->pixels+offset;
-          nexus_info->indexes=(IndexPacket *) NULL;
-          if (cache_info->indexes_valid)
-            nexus_info->indexes=cache_info->indexes+offset;
-          nexus_info->in_core=MagickTrue;
-          nexus_info->region=*region;
-          /* fprintf(stderr,"Pixels in core\n"); */
-          return(nexus_info->pixels);
-        }
+      /*
+        Pixels are accessed directly from memory.
+      */
+      size_t
+        offset;
+
+      offset=((size_t) region->y)*cache_info->columns+((size_t) region->x);
+
+      nexus_info->pixels=cache_info->pixels+offset;
+      nexus_info->indexes=(IndexPacket *) NULL;
+      if (cache_info->indexes_valid)
+        nexus_info->indexes=cache_info->indexes+offset;
+      nexus_info->in_core=MagickTrue;
+      nexus_info->region=*region;
+      /* fprintf(stderr,"Pixels in core (%p)\n",nexus_info->pixels); */
+      return(nexus_info->pixels);
     }
   /*
     Pixels are stored in a staging area until they are synced to the cache.
@@ -4488,7 +4491,7 @@
       nexus_info->in_core=IsNexusInCore(cache_info,nexus_info);
     }
 
-  /* fprintf(stderr,"Pixels in staging\n"); */
+  /* fprintf(stderr,"Pixels in staging (%p)\n",nexus_info->pixels); */
   return(nexus_info->pixels);
 }
 
diff -r ce7a01e36d15 -r 80321315c916 www/Changelog.html
--- a/www/Changelog.html	Sun Jul 22 10:58:02 2018 -0500
+++ b/www/Changelog.html	Sun Jul 22 14:51:15 2018 -0500
@@ -38,6 +38,13 @@
 <p>2018-07-22  Bob Friesenhahn  &lt;<a class="reference external" href="mailto:bfriesen&#37;&#52;&#48;simple&#46;dallas&#46;tx&#46;us">bfriesen<span>&#64;</span>simple<span>&#46;</span>dallas<span>&#46;</span>tx<span>&#46;</span>us</a>&gt;</p>
 <blockquote>
 <ul class="simple">
+<li>magick/pixel_cache.c (SetNexus): For requests one pixel tall,
+SetNexus() was wrongly using pixels in-core rather than using a
+staging area for the case where the nexus rows extend beyond the
+image raster boundary, leading to heap overflow.  This can happen
+when virtual pixels outside the image bounds are accessed.  Fixes
+oss-fuzz 9512 &quot;graphicsmagick/graphicsmagick_coder_MVG_fuzzer:
+Heap-buffer-overflow in AcquireCacheNexus&quot;. (Credit to OSS-Fuzz)</li>
 <li>magick/render.c (ExtractTokensBetweenPushPop):
 ExtractTokensBetweenPushPop() needs to always return a valid
 pointer into the primitive string.  Fixes oss-fuzz 9511

