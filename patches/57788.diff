commit 1a45e6074b71738e576563ac39f60fd96ded50eb
Merge: 71ecf4028 e44004089
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Fri Nov 18 15:38:20 2022 +0100

    Merge pull request #6766 from rouault/fix_ossfuzz_53471
    
    loadLayer(): fix memory leak in case of repeated CLUSTER

diff --git a/mapfile.c b/mapfile.c
index 64731bca8..fa52d1312 100755
--- a/mapfile.c
+++ b/mapfile.c
@@ -3891,444 +3891,443 @@ int loadLayerCompositer(LayerCompositer *compositer) {
   for(;;) {
     switch(msyylex()) {
       case COMPFILTER: {
         CompositingFilter **filter = &compositer->filter;
         while(*filter) {
           filter = &((*filter)->next);
         }
         *filter = msSmallMalloc(sizeof(CompositingFilter));
         initCompositingFilter(*filter);
         if(getString(&((*filter)->filter)) == MS_FAILURE) return(MS_FAILURE);
       }
         break;
       case COMPOP: {
         char *compop=NULL;
         if(getString(&compop) == MS_FAILURE) return(MS_FAILURE);
         else if(!strcmp(compop,"clear"))
           compositer->comp_op = MS_COMPOP_CLEAR;
         else if(!strcmp(compop,"color-burn"))
           compositer->comp_op = MS_COMPOP_COLOR_BURN;
         else if(!strcmp(compop,"color-dodge"))
           compositer->comp_op = MS_COMPOP_COLOR_DODGE;
         else if(!strcmp(compop,"contrast"))
           compositer->comp_op = MS_COMPOP_CONTRAST;
         else if(!strcmp(compop,"darken"))
           compositer->comp_op = MS_COMPOP_DARKEN;
         else if(!strcmp(compop,"difference"))
           compositer->comp_op = MS_COMPOP_DIFFERENCE;
         else if(!strcmp(compop,"dst"))
           compositer->comp_op = MS_COMPOP_DST;
         else if(!strcmp(compop,"dst-atop"))
           compositer->comp_op = MS_COMPOP_DST_ATOP;
         else if(!strcmp(compop,"dst-in"))
           compositer->comp_op = MS_COMPOP_DST_IN;
         else if(!strcmp(compop,"dst-out"))
           compositer->comp_op = MS_COMPOP_DST_OUT;
         else if(!strcmp(compop,"dst-over"))
           compositer->comp_op = MS_COMPOP_DST_OVER;
         else if(!strcmp(compop,"exclusion"))
           compositer->comp_op = MS_COMPOP_EXCLUSION;
         else if(!strcmp(compop,"hard-light"))
           compositer->comp_op = MS_COMPOP_HARD_LIGHT;
         else if(!strcmp(compop,"invert"))
           compositer->comp_op = MS_COMPOP_INVERT;
         else if(!strcmp(compop,"invert-rgb"))
           compositer->comp_op = MS_COMPOP_INVERT_RGB;
         else if(!strcmp(compop,"lighten"))
           compositer->comp_op = MS_COMPOP_LIGHTEN;
         else if(!strcmp(compop,"minus"))
           compositer->comp_op = MS_COMPOP_MINUS;
         else if(!strcmp(compop,"multiply"))
           compositer->comp_op = MS_COMPOP_MULTIPLY;
         else if(!strcmp(compop,"overlay"))
           compositer->comp_op = MS_COMPOP_OVERLAY;
         else if(!strcmp(compop,"plus"))
           compositer->comp_op = MS_COMPOP_PLUS;
         else if(!strcmp(compop,"screen"))
           compositer->comp_op = MS_COMPOP_SCREEN;
         else if(!strcmp(compop,"soft-light"))
           compositer->comp_op = MS_COMPOP_SOFT_LIGHT;
         else if(!strcmp(compop,"src"))
           compositer->comp_op = MS_COMPOP_SRC;
         else if(!strcmp(compop,"src-atop"))
           compositer->comp_op = MS_COMPOP_SRC_ATOP;
         else if(!strcmp(compop,"src-in"))
           compositer->comp_op = MS_COMPOP_SRC_IN;
         else if(!strcmp(compop,"src-out"))
           compositer->comp_op = MS_COMPOP_SRC_OUT;
         else if(!strcmp(compop,"src-over"))
           compositer->comp_op = MS_COMPOP_SRC_OVER;
         else if(!strcmp(compop,"xor"))
           compositer->comp_op = MS_COMPOP_XOR;
         else {
           msSetError(MS_PARSEERR,"Unknown COMPOP \"%s\"", "loadLayerCompositer()", compop);
           free(compop);
           if (compositer->filter) {
             msFree(compositer->filter->filter);
             msFree(compositer->filter);
             compositer->filter=NULL;
             }
           return MS_FAILURE;
         }
         free(compop);
       }
         break;
       case END:
         return MS_SUCCESS;
       case OPACITY:
         if (getInteger(&(compositer->opacity), MS_NUM_CHECK_RANGE, 0, 100) == -1) {
           if (compositer->filter) {
             msFree(compositer->filter->filter);
             msFree(compositer->filter);
             compositer->filter=NULL;
           }
           msSetError(MS_PARSEERR,"OPACITY must be between 0 and 100 (line %d)","loadLayerCompositer()",msyylineno);
           return MS_FAILURE;
         }
         break;
       default:
         if (compositer->filter) {
           msFree(compositer->filter->filter);
           msFree(compositer->filter);
           compositer->filter=NULL;
           }
         msSetError(MS_IDENTERR, "Parsing error 2 near (%s):(line %d)", "loadLayerCompositer()",  msyystring_buffer, msyylineno );
         return(MS_FAILURE);
     }
   }
 }
 int loadLayer(layerObj *layer, mapObj *map)
 {
   int type;
 
   layer->map = (mapObj *)map;
 
   for(;;) {
     switch(msyylex()) {
       case(BINDVALS):
         if(loadHashTable(&(layer->bindvals)) != MS_SUCCESS) return(-1);
         break;
       case(CLASS):
         if (msGrowLayerClasses(layer) == NULL)
           return(-1);
         initClass(layer->class[layer->numclasses]);
         if(loadClass(layer->class[layer->numclasses], layer) == -1)
         {
             freeClass(layer->class[layer->numclasses]);
             free(layer->class[layer->numclasses]);
             layer->class[layer->numclasses] = NULL;
             return(-1);
         }
         layer->numclasses++;
         break;
       case(CLUSTER):
-        initCluster(&layer->cluster);
         if(loadCluster(&layer->cluster) == -1) return(-1);
         break;
       case(CLASSGROUP):
         if(getString(&layer->classgroup) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(CLASSITEM):
         if(getString(&layer->classitem) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(COMPOSITE): {
         LayerCompositer *compositer = msSmallMalloc(sizeof(LayerCompositer));
         initLayerCompositer(compositer);
         if(MS_FAILURE == loadLayerCompositer(compositer)) {
           msFree(compositer);
           return -1;
           }
         if(!layer->compositer) {
           layer->compositer = compositer;
         } else {
           LayerCompositer *lctmp = layer->compositer;
           while(lctmp->next) lctmp = lctmp->next;
           lctmp->next = compositer;
         }
         break;
       }
       case(CONNECTION):
         if(getString(&layer->connection) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(CONNECTIONTYPE):
         if((type = getSymbol(13, MS_OGR, MS_POSTGIS, MS_WMS, MS_ORACLESPATIAL, MS_WFS, MS_GRATICULE, MS_PLUGIN, MS_UNION, MS_UVRASTER, MS_CONTOUR, MS_KERNELDENSITY, MS_IDW, MS_FLATGEOBUF)) == -1) return(-1);
         layer->connectiontype = type;
         break;
       case(DATA):
         if(getString(&layer->data) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(DEBUG):
         if((layer->debug = getSymbol(3, MS_ON,MS_OFF, MS_NUMBER)) == -1) return(-1);
 	if(layer->debug == MS_NUMBER) {
           if(msCheckNumber(msyynumber, MS_NUM_CHECK_RANGE, 0, 5) == MS_FAILURE) {
             msSetError(MS_MISCERR, "Invalid DEBUG level, must be between 0 and 5 (line %d)", "loadLayer()", msyylineno);
             return(-1);
           }
           layer->debug = (int) msyynumber;
         }
         break;
       case(EOF):
         msSetError(MS_EOFERR, NULL, "loadLayer()");
         return(-1);
         break;
       case(ENCODING):
         if(getString(&layer->encoding) == MS_FAILURE) return(-1);
         break;
       case(END):
         if((int)layer->type == -1) {
           msSetError(MS_MISCERR, "Layer type not set.", "loadLayer()");
           return(-1);
         }
 
         return(0);
         break;
       case(EXTENT): {
         if(getDouble(&(layer->extent.minx), MS_NUM_CHECK_NONE, -1, -1) == -1) return(-1);
         if(getDouble(&(layer->extent.miny), MS_NUM_CHECK_NONE, -1, -1) == -1) return(-1);
         if(getDouble(&(layer->extent.maxx), MS_NUM_CHECK_NONE, -1, -1) == -1) return(-1);
         if(getDouble(&(layer->extent.maxy), MS_NUM_CHECK_NONE, -1, -1) == -1) return(-1);
         if (!MS_VALID_EXTENT(layer->extent)) {
           msSetError(MS_MISCERR, "Given layer extent is invalid. Check that it is in the form: minx, miny, maxx, maxy", "loadLayer()");
           return(-1);
         }
         break;
       }
       case(FEATURE):
         if((int)layer->type == -1) {
           msSetError(MS_MISCERR, "Layer type must be set before defining inline features.", "loadLayer()");
           return(-1);
         }
 
         if(layer->type == MS_LAYER_POLYGON)
           type = MS_SHAPE_POLYGON;
         else if(layer->type == MS_LAYER_LINE)
           type = MS_SHAPE_LINE;
         else
           type = MS_SHAPE_POINT;
 
         layer->connectiontype = MS_INLINE;
 
         if(loadFeature(layer, type) == MS_FAILURE) return(-1);
         break;
       case(FILTER):
         if(loadExpression(&(layer->filter)) == -1) return(-1); /* loadExpression() cleans up previously allocated expression */
         break;
       case(FILTERITEM):
         if(getString(&layer->filteritem) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(FOOTER):
         if(getString(&layer->footer) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(GRID):
         layer->connectiontype = MS_GRATICULE;
         if (layer->grid) {
           freeGrid(layer->grid);
           msFree(layer->grid);
         }
         layer->grid = (void *) malloc(sizeof(graticuleObj));
         MS_CHECK_ALLOC(layer->grid, sizeof(graticuleObj), -1);
 
         initGrid(layer->grid);
         loadGrid(layer);
         break;
       case(GROUP):
         if(getString(&layer->group) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(GEOMTRANSFORM): {
         int s;
         if((s = getSymbol(1, MS_EXPRESSION)) == -1) return(MS_FAILURE);
         /* handle expression case here for the moment */
         msFree(layer->_geomtransform.string);
         layer->_geomtransform.string = msStrdup(msyystring_buffer);
         layer->_geomtransform.type = MS_GEOMTRANSFORM_EXPRESSION;
       }
       break;
       case(HEADER):
         if(getString(&layer->header) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(JOIN):
         if(layer->numjoins == MS_MAXJOINS) { /* no room */
           msSetError(MS_IDENTERR, "Maximum number of joins reached.", "loadLayer()");
           return(-1);
         }
 
         if(loadJoin(&(layer->joins[layer->numjoins])) == -1) {
             freeJoin(&(layer->joins[layer->numjoins]));
             return(-1);
         }
         layer->numjoins++;
         break;
       case(LABELCACHE):
         if((layer->labelcache = getSymbol(2, MS_ON, MS_OFF)) == -1) return(-1);
         break;
       case(LABELITEM):
         if(getString(&layer->labelitem) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(LABELMAXSCALE):
       case(LABELMAXSCALEDENOM):
         if(getDouble(&(layer->labelmaxscaledenom), MS_NUM_CHECK_GTE, 0, -1) == -1) return(-1);
         break;
       case(LABELMINSCALE):
       case(LABELMINSCALEDENOM):
         if(getDouble(&(layer->labelminscaledenom), MS_NUM_CHECK_GTE, 0, -1) == -1) return(-1);
         break;
       case(LABELREQUIRES):
         if(getString(&layer->labelrequires) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(LAYER):
         break; /* for string loads */
       case(MASK):
         if(getString(&layer->mask) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(MAXFEATURES):
         if(getInteger(&(layer->maxfeatures), MS_NUM_CHECK_GT, 0, -1) == -1) return(-1);
         break;
       case(MAXSCALE):
       case(MAXSCALEDENOM):
         if(getDouble(&(layer->maxscaledenom), MS_NUM_CHECK_GTE, 0, -1) == -1) return(-1);
         break;
       case(MAXGEOWIDTH):
         if(getDouble(&(layer->maxgeowidth), MS_NUM_CHECK_GT, 0, -1) == -1) return(-1);
         break;
       case(METADATA):
         if(loadHashTable(&(layer->metadata)) != MS_SUCCESS) return(-1);
         break;
       case(MINSCALE):
       case(MINSCALEDENOM):
         if(getDouble(&(layer->minscaledenom), MS_NUM_CHECK_GTE, 0, -1) == -1) return(-1);
         break;
       case(MINGEOWIDTH):
         if(getDouble(&(layer->mingeowidth), MS_NUM_CHECK_GT, 0, -1) == -1) return(-1);
         break;
       case(MINFEATURESIZE):
         if(getInteger(&(layer->minfeaturesize), MS_NUM_CHECK_GT, 0, -1) == -1) return(-1);
         break;
       case(NAME):
         if(getString(&layer->name) == MS_FAILURE) return(-1);
         break;
       case(OFFSITE):
         if(loadColor(&(layer->offsite), NULL) != MS_SUCCESS) return(-1);
         break;
 
       case(CONNECTIONOPTIONS):
         if(loadHashTable(&(layer->connectionoptions)) != MS_SUCCESS) return(-1);
         break;
       case(MS_PLUGIN): {
         int rv;
         if(map->config) { // value *must* represent a config key
           char *value = NULL;
           const char *plugin_library = NULL;
 
           if(getString(&value) == MS_FAILURE) return(-1);
           plugin_library = msConfigGetPlugin(map->config, value);
           msFree(value);
           if(!plugin_library) {
             msSetError(MS_MISCERR, "Plugin value not found in config file. See mapserver.org/mapfile/config.html for more information." , "loadLayer()");
             return(-1);
           }
           msFree(layer->plugin_library_original);
           layer->plugin_library_original = strdup(plugin_library);
         } else {
           if(getString(&layer->plugin_library_original) == MS_FAILURE) return(-1);
         }
         rv = msBuildPluginLibraryPath(&layer->plugin_library, layer->plugin_library_original, map);
         if (rv == MS_FAILURE) return(-1);
       }
       break;
       case(PROCESSING): {
         /* NOTE: processing array maintained as size+1 with NULL terminator.
                  This ensure that CSL (GDAL string list) functions can be
                  used on the list for easy processing. */
         char *value=NULL;
         if(getString(&value) == MS_FAILURE) return(-1);
         msLayerAddProcessing( layer, value );
         free(value);
         value=NULL;
       }
       break;
       case(POSTLABELCACHE):
         if((layer->postlabelcache = getSymbol(2, MS_TRUE, MS_FALSE)) == -1) return(-1);
         if(layer->postlabelcache)
           layer->labelcache = MS_OFF;
         break;
       case(PROJECTION):
         if(loadProjection(&(layer->projection)) == -1) return(-1);
         layer->project = MS_TRUE;
         break;
       case(REQUIRES):
         if(getString(&layer->requires) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(SCALETOKEN):
         if (msGrowLayerScaletokens(layer) == NULL)
           return(-1);
         initScaleToken(&layer->scaletokens[layer->numscaletokens]);
         if(loadScaletoken(&layer->scaletokens[layer->numscaletokens], layer) == -1) {
             freeScaleToken(&layer->scaletokens[layer->numscaletokens]);
             return(-1);
         }
         layer->numscaletokens++;
         break;
       case(SIZEUNITS):
         if((layer->sizeunits = getSymbol(8, MS_INCHES,MS_FEET,MS_MILES,MS_METERS,MS_KILOMETERS,MS_NAUTICALMILES,MS_DD,MS_PIXELS)) == -1) return(-1);
         break;
       case(STATUS):
         if((layer->status = getSymbol(3, MS_ON,MS_OFF,MS_DEFAULT)) == -1) return(-1);
         break;
       case(STYLEITEM):
         if(getString(&layer->styleitem) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(SYMBOLSCALE):
       case(SYMBOLSCALEDENOM):
         if(getDouble(&(layer->symbolscaledenom), MS_NUM_CHECK_GTE, 1, -1) == -1) return(-1);
         break;
       case(TEMPLATE):
         if(getString(&layer->template) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(TILEINDEX):
         if(getString(&layer->tileindex) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(TILEITEM):
         if(getString(&layer->tileitem) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(TILESRS):
         if(getString(&layer->tilesrs) == MS_FAILURE) return(-1); /* getString() cleans up previously allocated string */
         break;
       case(TOLERANCE):
         if(getDouble(&(layer->tolerance), MS_NUM_CHECK_GTE, 0, -1) == -1) return(-1);
         break;
       case(TOLERANCEUNITS):
         if((layer->toleranceunits = getSymbol(8, MS_INCHES,MS_FEET,MS_MILES,MS_METERS,MS_KILOMETERS,MS_NAUTICALMILES,MS_DD,MS_PIXELS)) == -1) return(-1);
         break;
       case(TRANSFORM):
         if((layer->transform = getSymbol(11, MS_TRUE,MS_FALSE, MS_UL,MS_UC,MS_UR,MS_CL,MS_CC,MS_CR,MS_LL,MS_LC,MS_LR)) == -1) return(-1);
         break;
       case(TYPE):
         if((type = getSymbol(9, MS_LAYER_POINT,MS_LAYER_LINE,MS_LAYER_RASTER,MS_LAYER_POLYGON,MS_LAYER_ANNOTATION,MS_LAYER_QUERY,MS_LAYER_CIRCLE,MS_LAYER_CHART,TILEINDEX)) == -1) return(-1);
         if(type == TILEINDEX) type = MS_LAYER_TILEINDEX; /* TILEINDEX is also a parameter */
         if(type == MS_LAYER_ANNOTATION) {
           msSetError(MS_IDENTERR, "Annotation Layers have been removed. To obtain same functionality, use a layer with label->styles and no class->styles", "loadLayer()");
           return -1;
         }
         layer->type = type;
         break;
       case(UNITS):
         if((layer->units = getSymbol(9, MS_INCHES,MS_FEET,MS_MILES,MS_METERS,MS_KILOMETERS,MS_NAUTICALMILES,MS_DD,MS_PIXELS,MS_PERCENTAGES)) == -1) return(-1);
         break;
       case(UTFDATA):
         if(loadExpression(&(layer->utfdata)) == -1) return(-1); /* loadExpression() cleans up previously allocated expression */
         break;
       case(UTFITEM):
         if(getString(&layer->utfitem) == MS_FAILURE) return(-1);
         break;
       case(VALIDATION):
         if(loadHashTable(&(layer->validation)) != MS_SUCCESS) return(-1);
         break;
       default:
         if(strlen(msyystring_buffer) > 0) {
           msSetError(MS_IDENTERR, "Parsing error near (%s):(line %d)", "loadLayer()", msyystring_buffer, msyylineno);
           return(-1);
         } else {
           return(0); /* end of a string, not an error */
         }
     }
   } /* next token */
 }
