commit b517fc1f683dc2e54ed0e93ecdb8b956c773ce45
Author: Dirk Lemstra <dirk@git.imagemagick.org>
Date:   Sun Feb 18 14:27:23 2018 +0100

    Fixed memory leak.

diff --git a/MagickCore/blob.c b/MagickCore/blob.c
index db5dbf227..c0934cda8 100644
--- a/MagickCore/blob.c
+++ b/MagickCore/blob.c
@@ -1815,171 +1815,173 @@ MagickExport StreamHandler GetBlobStreamHandler(const Image *image)
 {
   assert(image != (const Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
   return(image->blob->stream);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   I m a g e T o B l o b                                                     %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ImageToBlob() implements direct to memory image formats.  It returns the
 %  image as a formatted blob and its length.  The magick member of the Image
 %  structure determines the format of the returned blob (GIF, JPEG, PNG,
 %  etc.).  This method is the equivalent of WriteImage(), but writes the
 %  formatted "file" to a memory buffer rather than to an actual file.
 %
 %  The format of the ImageToBlob method is:
 %
 %      void *ImageToBlob(const ImageInfo *image_info,Image *image,
 %        size_t *length,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image_info: the image info.
 %
 %    o image: the image.
 %
 %    o length: return the actual length of the blob.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 MagickExport void *ImageToBlob(const ImageInfo *image_info,
   Image *image,size_t *length,ExceptionInfo *exception)
 {
   const MagickInfo
     *magick_info;
 
   ImageInfo
     *blob_info;
 
   MagickBooleanType
     status;
 
   void
     *blob;
 
   assert(image_info != (const ImageInfo *) NULL);
   assert(image_info->signature == MagickCoreSignature);
   if (image_info->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",
       image_info->filename);
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   assert(exception != (ExceptionInfo *) NULL);
   *length=0;
   blob=(unsigned char *) NULL;
   blob_info=CloneImageInfo(image_info);
   blob_info->adjoin=MagickFalse;
   (void) SetImageInfo(blob_info,1,exception);
   if (*blob_info->magick != '\0')
     (void) CopyMagickString(image->magick,blob_info->magick,MagickPathExtent);
   magick_info=GetMagickInfo(image->magick,exception);
   if (magick_info == (const MagickInfo *) NULL)
     {
       (void) ThrowMagickException(exception,GetMagickModule(),
         MissingDelegateError,"NoDecodeDelegateForThisImageFormat","`%s'",
         image->magick);
       blob_info=DestroyImageInfo(blob_info);
       return(blob);
     }
   (void) CopyMagickString(blob_info->magick,image->magick,MagickPathExtent);
   if (GetMagickBlobSupport(magick_info) != MagickFalse)
     {
       /*
         Native blob support for this image format.
       */
       blob_info->length=0;
       blob_info->blob=AcquireQuantumMemory(MagickMaxBlobExtent,
         sizeof(unsigned char));
       if (blob_info->blob == NULL)
         (void) ThrowMagickException(exception,GetMagickModule(),
           ResourceLimitError,"MemoryAllocationFailed","`%s'",image->filename);
       else
         {
           (void) CloseBlob(image);
           image->blob->exempt=MagickTrue;
           *image->filename='\0';
           status=WriteImage(blob_info,image,exception);
           *length=image->blob->length;
           blob=DetachBlob(image->blob);
-          if (status == MagickFalse)
+          if (blob == (void *) NULL)
+            blob_info->blob=RelinquishMagickMemory(blob_info->blob);
+          else if (status == MagickFalse)
             blob=RelinquishMagickMemory(blob);
           else
             blob=ResizeQuantumMemory(blob,*length+1,sizeof(unsigned char));
         }
     }
   else
     {
       char
         unique[MagickPathExtent];
 
       int
         file;
 
       /*
         Write file to disk in blob image format.
       */
       file=AcquireUniqueFileResource(unique);
       if (file == -1)
         {
           ThrowFileException(exception,BlobError,"UnableToWriteBlob",
             image_info->filename);
         }
       else
         {
           blob_info->file=fdopen(file,"wb");
           if (blob_info->file != (FILE *) NULL)
             {
               (void) FormatLocaleString(image->filename,MagickPathExtent,
                 "%s:%s",image->magick,unique);
               status=WriteImage(blob_info,image,exception);
               (void) CloseBlob(image);
               (void) fclose(blob_info->file);
               if (status != MagickFalse)
                 blob=FileToBlob(unique,~0UL,length,exception);
             }
           (void) RelinquishUniqueFileResource(unique);
         }
     }
   blob_info=DestroyImageInfo(blob_info);
   return(blob);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +  I m a g e T o C u s t o m S t r e a m                                      %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ImageToCustomStream() is the equivalent of WriteImage(), but writes the
 %  formatted "file" to the custom stream rather than to an actual file.
 %
 %  The format of the ImageToCustomStream method is:
 %
 %      void ImageToCustomStream(const ImageInfo *image_info,Image *image,
 %        ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image_info: the image info.
 %
 %    o image: the image.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
@@ -2150,233 +2152,235 @@ MagickExport MagickBooleanType ImageToFile(Image *image,char *filename,
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   assert(image->blob != (BlobInfo *) NULL);
   assert(image->blob->type != UndefinedStream);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",filename);
   assert(filename != (const char *) NULL);
   if (*filename == '\0')
     file=AcquireUniqueFileResource(filename);
   else
     if (LocaleCompare(filename,"-") == 0)
       file=fileno(stdout);
     else
       file=open_utf8(filename,O_RDWR | O_CREAT | O_EXCL | O_BINARY,S_MODE);
   if (file == -1)
     {
       ThrowFileException(exception,BlobError,"UnableToWriteBlob",filename);
       return(MagickFalse);
     }
   quantum=(size_t) MagickMaxBufferExtent;
   if ((fstat(file,&file_stats) == 0) && (file_stats.st_size > 0))
     quantum=(size_t) MagickMin(file_stats.st_size,MagickMaxBufferExtent);
   buffer=(unsigned char *) AcquireQuantumMemory(quantum,sizeof(*buffer));
   if (buffer == (unsigned char *) NULL)
     {
       file=close(file)-1;
       (void) ThrowMagickException(exception,GetMagickModule(),
         ResourceLimitError,"MemoryAllocationError","`%s'",filename);
       return(MagickFalse);
     }
   length=0;
   p=(const unsigned char *) ReadBlobStream(image,quantum,buffer,&count);
   for (i=0; count > 0; )
   {
     length=(size_t) count;
     for (i=0; i < length; i+=count)
     {
       count=write(file,p+i,(size_t) (length-i));
       if (count <= 0)
         {
           count=0;
           if (errno != EINTR)
             break;
         }
     }
     if (i < length)
       break;
     p=(const unsigned char *) ReadBlobStream(image,quantum,buffer,&count);
   }
   if (LocaleCompare(filename,"-") != 0)
     file=close(file);
   buffer=(unsigned char *) RelinquishMagickMemory(buffer);
   if ((file == -1) || (i < length))
     {
       if (file != -1)
         file=close(file);
       ThrowFileException(exception,BlobError,"UnableToWriteBlob",filename);
       return(MagickFalse);
     }
   return(MagickTrue);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   I m a g e s T o B l o b                                                   %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ImagesToBlob() implements direct to memory image formats.  It returns the
 %  image sequence as a blob and its length.  The magick member of the ImageInfo
 %  structure determines the format of the returned blob (GIF, JPEG,  PNG, etc.)
 %
 %  Note, some image formats do not permit multiple images to the same image
 %  stream (e.g. JPEG).  in this instance, just the first image of the
 %  sequence is returned as a blob.
 %
 %  The format of the ImagesToBlob method is:
 %
 %      void *ImagesToBlob(const ImageInfo *image_info,Image *images,
 %        size_t *length,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image_info: the image info.
 %
 %    o images: the image list.
 %
 %    o length: return the actual length of the blob.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 MagickExport void *ImagesToBlob(const ImageInfo *image_info,Image *images,
   size_t *length,ExceptionInfo *exception)
 {
   const MagickInfo
     *magick_info;
 
   ImageInfo
     *clone_info;
 
   MagickBooleanType
     status;
 
   void
     *blob;
 
   assert(image_info != (const ImageInfo *) NULL);
   assert(image_info->signature == MagickCoreSignature);
   if (image_info->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",
       image_info->filename);
   assert(images != (Image *) NULL);
   assert(images->signature == MagickCoreSignature);
   assert(exception != (ExceptionInfo *) NULL);
   *length=0;
   blob=(unsigned char *) NULL;
   clone_info=CloneImageInfo(image_info);
   (void) SetImageInfo(clone_info,(unsigned int) GetImageListLength(images),
     exception);
   if (*clone_info->magick != '\0')
     (void) CopyMagickString(images->magick,clone_info->magick,MagickPathExtent);
   magick_info=GetMagickInfo(images->magick,exception);
   if (magick_info == (const MagickInfo *) NULL)
     {
       (void) ThrowMagickException(exception,GetMagickModule(),
         MissingDelegateError,"NoDecodeDelegateForThisImageFormat","`%s'",
         images->magick);
       clone_info=DestroyImageInfo(clone_info);
       return(blob);
     }
   if (GetMagickAdjoin(magick_info) == MagickFalse)
     {
       clone_info=DestroyImageInfo(clone_info);
       return(ImageToBlob(image_info,images,length,exception));
     }
   (void) CopyMagickString(clone_info->magick,images->magick,MagickPathExtent);
   if (GetMagickBlobSupport(magick_info) != MagickFalse)
     {
       /*
         Native blob support for this images format.
       */
       clone_info->length=0;
       clone_info->blob=(void *) AcquireQuantumMemory(MagickMaxBlobExtent,
         sizeof(unsigned char));
       if (clone_info->blob == (void *) NULL)
         (void) ThrowMagickException(exception,GetMagickModule(),
           ResourceLimitError,"MemoryAllocationFailed","`%s'",images->filename);
       else
         {
           (void) CloseBlob(images);
           images->blob->exempt=MagickTrue;
           *images->filename='\0';
           status=WriteImages(clone_info,images,images->filename,exception);
           *length=images->blob->length;
           blob=DetachBlob(images->blob);
-          if (status == MagickFalse)
+          if (blob == (void *) NULL)
+            clone_info->blob=RelinquishMagickMemory(clone_info->blob);
+          else if (status == MagickFalse)
             blob=RelinquishMagickMemory(blob);
           else
             blob=ResizeQuantumMemory(blob,*length+1,sizeof(unsigned char));
         }
     }
   else
     {
       char
         filename[MagickPathExtent],
         unique[MagickPathExtent];
 
       int
         file;
 
       /*
         Write file to disk in blob images format.
       */
       file=AcquireUniqueFileResource(unique);
       if (file == -1)
         {
           ThrowFileException(exception,FileOpenError,"UnableToWriteBlob",
             image_info->filename);
         }
       else
         {
           clone_info->file=fdopen(file,"wb");
           if (clone_info->file != (FILE *) NULL)
             {
               (void) FormatLocaleString(filename,MagickPathExtent,"%s:%s",
                 images->magick,unique);
               status=WriteImages(clone_info,images,filename,exception);
               (void) CloseBlob(images);
               (void) fclose(clone_info->file);
               if (status != MagickFalse)
                 blob=FileToBlob(unique,~0UL,length,exception);
             }
           (void) RelinquishUniqueFileResource(unique);
         }
     }
   clone_info=DestroyImageInfo(clone_info);
   return(blob);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +  I m a g e s T o C u s t o m B l o b                                        %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  ImagesToCustomStream() is the equivalent of WriteImages(), but writes the
 %  formatted "file" to the custom stream rather than to an actual file.
 %
 %  The format of the ImageToCustomStream method is:
 %
 %      void ImagesToCustomStream(const ImageInfo *image_info,Image *images,
 %        ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o image_info: the image info.
 %
 %    o images: the image list.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
