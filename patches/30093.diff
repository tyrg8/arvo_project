commit 0ec1a7b309ec29904d9f855c495dcd550da74d57
Author: davkor <david@adalogics.com>
Date:   Mon Apr 26 16:05:03 2021 +0100

    record_accessor: fix stackoverflow.
    
    Signed-off-by: davkor <david@adalogics.com>

diff --git a/src/flb_record_accessor.c b/src/flb_record_accessor.c
index e877db01e..fb9bc59a8 100644
--- a/src/flb_record_accessor.c
+++ b/src/flb_record_accessor.c
@@ -416,66 +416,76 @@ static flb_sds_t ra_translate_string(struct flb_ra_parser *rp, flb_sds_t buf)
 static flb_sds_t ra_translate_keymap(struct flb_ra_parser *rp, flb_sds_t buf,
                                      msgpack_object map, int *found)
 {
     int len;
     char *js;
     char str[32];
     flb_sds_t tmp = NULL;
     struct flb_ra_value *v;
 
     /* Lookup key or subkey value */
     v = flb_ra_key_to_value(rp->key->name, map, rp->key->subkeys);
     if (!v) {
         *found = FLB_FALSE;
         return buf;
     }
     else {
         *found = FLB_TRUE;
     }
 
     /* Based on data type, convert to it string representation */
     if (v->type == FLB_RA_BOOL) {
         /* Check if is a map or a real bool */
         if (v->o.type == MSGPACK_OBJECT_MAP) {
             /* Convert msgpack map to JSON string */
             js = flb_msgpack_to_json_str(1024, &v->o);
             if (js) {
                 len = strlen(js);
                 tmp = flb_sds_cat(buf, js, len);
                 flb_free(js);
             }
         }
         else if (v->o.type == MSGPACK_OBJECT_BOOLEAN) {
             if (v->val.boolean) {
                 tmp = flb_sds_cat(buf, "true", 4);
             }
             else {
                 tmp = flb_sds_cat(buf, "false", 5);
             }
         }
     }
     else if (v->type == FLB_RA_INT) {
         len = snprintf(str, sizeof(str) - 1, "%" PRId64, v->val.i64);
+        /* We need to check size is not above str length */
+        if (len >= 32) {
+            *found = FLB_FALSE;
+            return buf;
+        }
         tmp = flb_sds_cat(buf, str, len);
     }
     else if (v->type == FLB_RA_FLOAT) {
         len = snprintf(str, sizeof(str) - 1, "%f", v->val.f64);
+        /* We need to check size is not above str length */
+        if (len >= 32) {
+            *found = FLB_FALSE;
+            return buf;
+        }
         tmp = flb_sds_cat(buf, str, len);
     }
     else if (v->type == FLB_RA_STRING) {
         tmp = flb_sds_cat(buf, v->val.string, flb_sds_len(v->val.string));
     }
     else if (v->type == FLB_RA_NULL) {
         tmp = flb_sds_cat(buf, "null", 4);
     }
 
     flb_ra_key_value_destroy(v);
     return tmp;
 }
 
 /*
  * Translate a record accessor buffer, tag and records are optional
  * parameters.
  *
  * For safety, the function returns a newly created string that needs
  * to be destroyed by the caller.
  */
