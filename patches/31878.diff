commit 54fdafc75275f1848bcb4e79c0313b9a13a8b01b
Author: Reini Urban <rurban@cpan.org>
Date:   Wed Mar 10 21:01:22 2021 +0100

    protect bit_utf8_to_TV src from overflow
    
    fuzzing in_json only, everywhere else the src is big enough.
    Fixes oss-fuzz issue 31878

diff --git a/src/bits.c b/src/bits.c
index 609e6481..b46b6d70 100644
--- a/src/bits.c
+++ b/src/bits.c
@@ -2459,106 +2459,107 @@ bit_TU_to_utf8_len (const BITCODE_TU restrict wstr, const int len)
 */
 char *
 bit_utf8_to_TV (char *restrict dest, const unsigned char *restrict src,
-                const int destlen, const unsigned cquoted)
+                const int destlen, const int srclen, const unsigned cquoted)
 {
   unsigned char c;
   unsigned char *s = (unsigned char *)src;
   const char* endp = dest + destlen;
+  const unsigned char* ends = src + srclen;
   char *d = dest;
 
   while ((c = *s++))
     {
       if (dest >= endp)
-        {
-          return NULL;
-        }
+        return NULL;
       else if (cquoted && c == '\\' && dest+1 < endp &&
           // skip \" to " and \\ to \.
           (*s == '"' || *s == '\\' || *s == 'r' || *s == 'n'))
         {
             if (*s == 'r')
               {
                 *dest++ = '\r';
                 s++;
               }
             else if (*s == 'n')
               {
                 *dest++ = '\n';
                 s++;
               }
         }
       // \uxxxx => \U+XXXX as in bit_embed_TU
       else if (c == '\\' && dest+7 < endp && *s == 'u')
         {
           *dest++ = c;
           *dest++ = 'U';
           *dest++ = '+';
           s++;
           *dest++ = *s++;
           *dest++ = *s++;
           *dest++ = *s++;
           *dest++ = *s++;
         }
       else if (c < 128)
         {
           *dest++ = c;
         }
       else if ((c & 0xe0) == 0xc0)
         {
           /* ignore invalid utf8 for now */
           if (dest+7 < endp)
             {
               BITCODE_RS wc = ((c & 0x1f) << 6) | (*s & 0x3f);
               *dest++ = '\\';
               *dest++ = 'U';
               *dest++ = '+';
               *dest++ = heX (wc >> 12);
               *dest++ = heX (wc >> 8);
               *dest++ = heX (wc >> 4);
               *dest++ = heX (wc);
               s++;
             }
           else
             return NULL;
         }
       else if ((c & 0xf0) == 0xe0)
         {
           /* warn on invalid utf8 */
           if (dest+2 < endp &&
               (*s < 0x80 || *s > 0xBF || *(s+1) < 0x80 || *(s+1) > 0xBF))
             {
               LOG_WARN ("utf-8: BAD_CONTINUATION_BYTE %s", s);
             }
           if (dest+1 < endp && c == 0xe0 && *s < 0xa0)
             {
               LOG_WARN ("utf-8: NON_SHORTEST %s", s);
             }
           if (dest+7 < endp)
             {
               BITCODE_RS wc = ((c & 0x0f) << 12) | ((*s & 0x3f) << 6) | (*(s+1) & 0x3f);
               *dest++ = '\\';
               *dest++ = 'U';
               *dest++ = '+';
               *dest++ = heX (wc >> 12);
               *dest++ = heX (wc >> 8);
               *dest++ = heX (wc >> 4);
               *dest++ = heX (wc);
             }
           else
             return NULL;
           s++;
           s++;
         }
+      if (s >= ends)
+        break;
       /* everything above 0xf0 exceeds ucs-2, 4-6 byte seqs */
     }
 
   if (dest >= endp)
     return NULL;
   else
     *dest = '\0';
   return d;
 }
 
 /** converts UTF-8 to UCS-2. Returns a copy.
     TODO: unquote json_cquote as above.
  */
diff --git a/src/bits.h b/src/bits.h
index 31be2c31..62f1f92d 100644
--- a/src/bits.h
+++ b/src/bits.h
@@ -292,9 +292,9 @@ EXPORT char *bit_TU_to_utf8_len (const BITCODE_TU restrict wstr, const int len)
     Returns NULL if not enough room in dest. */
 EXPORT char *
 bit_utf8_to_TV (char *restrict dest, const unsigned char *restrict src,
-                const int len, const unsigned cquoted);
+                const int destlen, const int srclen, const unsigned cquoted);
 
 /** Converts UTF-8 to UCS-2. Returns a copy.
     Needed by dwg importers, writers (e.g. dxf2dwg)
     cquoted is needed by in_json, to unquote \"
  */
diff --git a/src/dwg_api.c b/src/dwg_api.c
index 3e7a9e5a..2df75c2e 100644
--- a/src/dwg_api.c
+++ b/src/dwg_api.c
@@ -22136,38 +22136,38 @@ EXPORT BITCODE_T
 dwg_add_u8_input (Dwg_Data *restrict dwg, const char *restrict u8str)
 {
   if (IS_FROM_TU_DWG (dwg))
     {
       return (BITCODE_T)bit_utf8_to_TU ((char *restrict)u8str, 0);
     }
   else
     {
       // TODO Encode unicode to \U+... bit_utf8_to_TV
 #if 0
       int size = 1024;
       char *dest = malloc (size);
-      char *tgt = bit_utf8_to_TV (dest, u8str, size, 0);
+      char *tgt = bit_utf8_to_TV (dest, u8str, size, strlen(u8str), 0);
       if (!dest)
         {
           LOG_ERROR ("Out of memory");
           return NULL;
         }
       while (!tgt)
         {
           size *= 2;
           if (size >= 1>>32)
             {
               LOG_ERROR ("Out of memory");
               return NULL;
             }
           dest = realloc (dest, size);
-          tgt = bit_utf8_to_TV (dest, u8str, size, 0);
+          tgt = bit_utf8_to_TV (dest, u8str, size, strlen(u8str), 0);
         }
       return tgt;
 #endif
       return strdup (u8str);
     }
 }
 
 /* Should be similar to the public VBA interface */
 
 /* Initialize a new dwg. Which template, imperial or metric */
diff --git a/src/in_json.c b/src/in_json.c
index c247d98d..aafe3f8b 100644
--- a/src/in_json.c
+++ b/src/in_json.c
@@ -333,58 +333,58 @@ static char *
 json_string (Bit_Chain *restrict dat, jsmntokens_t *restrict tokens)
 {
   const jsmntok_t *t = &tokens->tokens[tokens->index];
   char *key = NULL;
   int len;
   JSON_TOKENS_CHECK_OVERFLOW_NULL;
   len = t->end - t->start;
   if (t->type != JSMN_STRING)
     {
       LOG_ERROR ("Expected JSON STRING");
       json_advance_unknown (dat, tokens, t->type, 0);
       JSON_TOKENS_CHECK_OVERFLOW_NULL
       return NULL;
     }
   // Unquote \", convert Unicode to \\U+xxxx as in bit_embed_TU
   // unquote \\ to \.
   if (memchr (&dat->chain[t->start], '\\', len))
     {
       len += 8;
       key = (char*)malloc (len);
       if (!key)
         goto outofmemory;
       dat->chain[t->end] = '\0';
-      while (!bit_utf8_to_TV (key, &dat->chain[t->start], len, 1))
+      while (!bit_utf8_to_TV (key, &dat->chain[t->start], len, t->end - t->start, 1))
         {
           LOG_INSANE ("Not enough room in quoted string len=%d\n", len-8)
           len += 8;
           if (len > 6 * (t->end - t->start))
             {
               LOG_ERROR ("bit_utf8_to_TV loop len=%d vs %d \"%.*s\"", len,
                          t->end - t->start, t->end - t->start,
                          &dat->chain[t->start]);
               len = t->end - t->start;
               free (key);
               goto normal;
             }
           key = (char *)realloc (key, len);
           if (!key)
             goto outofmemory;
         }
     }
   else
     {
     normal:
       key = (char *)malloc (len + 1);
       if (!key)
         goto outofmemory;
       memcpy (key, &dat->chain[t->start], len);
       key[len] = '\0';
     }
   tokens->index++;
   return key;
  outofmemory:
   LOG_ERROR ("Out of memory");
   return NULL;
 }
 
 // not yet needed. only with write2004
diff --git a/src/objects.c b/src/objects.c
index 3d21ce68..68cf2e99 100644
--- a/src/objects.c
+++ b/src/objects.c
@@ -92,68 +92,68 @@ inline
 #endif
 #endif
 static unsigned int
-hash (register const char *str, register size_t len)
+hash (register const char *str, register SIZE_TYPE len)
 {
   static const unsigned short asso_values[] =
     {
       1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
       1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
       1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
       1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
       1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
         15,    5,   10, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
       1302, 1302, 1302, 1302, 1302,   10,   30,   65,  145,    5,
        180,  115,  250,   80,  290,  415,   35,   85,  340,   80,
          0,  100,   20,    5,    0,  310,  160,  235,  270,    0,
          0, 1302, 1302, 1302, 1302,  415,   65, 1302, 1302, 1302,
       1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
       1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
       1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302
     };
   register unsigned int hval = len;
 
   switch (hval)
     {
       default:
         hval += asso_values[(unsigned char)str[9]];
 #if defined __cplusplus && (__cplusplus >= 201703L || (__cplusplus >= 201103L && defined __clang_major__ && defined __clang_minor__ && __clang_major__ + (__clang_minor__ >= 9) > 3))
       [[fallthrough]];
 #elif defined __GNUC__ && __GNUC__ >= 7
       __attribute__ ((__fallthrough__));
 #endif
       /*FALLTHROUGH*/
       case 9:
       case 8:
         hval += asso_values[(unsigned char)str[7]+1];
 #if defined __cplusplus && (__cplusplus >= 201703L || (__cplusplus >= 201103L && defined __clang_major__ && defined __clang_minor__ && __clang_major__ + (__clang_minor__ >= 9) > 3))
       [[fallthrough]];
 #elif defined __GNUC__ && __GNUC__ >= 7
       __attribute__ ((__fallthrough__));
 #endif
       /*FALLTHROUGH*/
       case 7:
       case 6:
         hval += asso_values[(unsigned char)str[5]];
 #if defined __cplusplus && (__cplusplus >= 201703L || (__cplusplus >= 201103L && defined __clang_major__ && defined __clang_minor__ && __clang_major__ + (__clang_minor__ >= 9) > 3))
       [[fallthrough]];
 #elif defined __GNUC__ && __GNUC__ >= 7
       __attribute__ ((__fallthrough__));
 #endif
       /*FALLTHROUGH*/
       case 5:
       case 4:
       case 3:
       case 2:
         hval += asso_values[(unsigned char)str[1]];
 #if defined __cplusplus && (__cplusplus >= 201703L || (__cplusplus >= 201103L && defined __clang_major__ && defined __clang_minor__ && __clang_major__ + (__clang_minor__ >= 9) > 3))
       [[fallthrough]];
 #elif defined __GNUC__ && __GNUC__ >= 7
       __attribute__ ((__fallthrough__));
 #endif
       /*FALLTHROUGH*/
       case 1:
         hval += asso_values[(unsigned char)str[0]];
         break;
     }
   return hval + asso_values[(unsigned char)str[len - 1]];
 }
