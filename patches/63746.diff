commit e399bd7e3d4cb4071e426ecb735084c6577a8644
Author: Ivan Nardi <12729895+IvanNardi@users.noreply.github.com>
Date:   Mon Oct 30 09:21:57 2023 +0100

    Custom rules: fix a stack overflow (#2128)
    
    ```
    ==19255==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7f515bb3bf80 at pc 0x55796e01394a bp 0x7fff4fb5c050 sp 0x7fff4fb5b7e0
    WRITE of size 58 at 0x7f515bb3bf80 thread T0
        #0 0x55796e013949 in scanf_common(void*, int, bool, char const*, __va_list_tag*) asan_interceptors.cpp.o
        #1 0x55796e0147df in __isoc99_sscanf (/home/ivan/svnrepos/nDPI/fuzz/fuzz_filecfg_protocols+0x77f7df) (BuildId: a88601afb2c538ead3968648f39b9aa4da53427c)
        #2 0x55796e0fc74a in ndpi_add_host_ip_subprotocol /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:2771:13
        #3 0x55796e0fb029 in ndpi_handle_rule /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:4411:16
        #4 0x55796e103738 in ndpi_load_protocols_file_fd /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:4901:8
        #5 0x55796e0ca96d in LLVMFuzzerTestOneInput /home/ivan/svnrepos/nDPI/fuzz/fuzz_filecfg_protocols.c:38:3
        #6 0x55796dfd78e0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/home/ivan/svnrepos/nDPI/fuzz/fuzz_filecfg_protocols+0x7428e0) (BuildId: a88601afb2c538ead3968648f39b9aa4da53427c)
        #7 0x55796dfc0e93 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/home/ivan/svnrepos/nDPI/fuzz/fuzz_filecfg_protocols+0x72be93) (BuildId: a88601afb2c538ead3968648f39b9aa4da53427c)
        #8 0x55796dfc6d96 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/home/ivan/svnrepos/nDPI/fuzz/fuzz_filecfg_protocols+0x731d96) (BuildId: a88601afb2c538ead3968648f39b9aa4da53427c)
        #9 0x55796dff1672 in main (/home/ivan/svnrepos/nDPI/fuzz/fuzz_filecfg_protocols+0x75c672) (BuildId: a88601afb2c538ead3968648f39b9aa4da53427c)
        #10 0x7f515df19082 in __libc_start_main /build/glibc-BHL3KM/glibc-2.31/csu/../csu/libc-start.c:308:16
        #11 0x55796dfbbb0d in _start (/home/ivan/svnrepos/nDPI/fuzz/fuzz_filecfg_protocols+0x726b0d) (BuildId: a88601afb2c538ead3968648f39b9aa4da53427c)
    
    Address 0x7f515bb3bf80 is located in stack of thread T0 at offset 128 in frame
        #0 0x55796e0fb977 in ndpi_add_host_ip_subprotocol /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:2703
    
      This frame has 4 object(s):
        [32, 36) 'pin' (line 2705)
        [48, 64) 'pin6' (line 2706)
        [80, 96) 'd' (line 2769)
        [112, 128) 'tail' (line 2770) <== Memory access at offset 128 overflows this variable
    HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
          (longjmp and C++ exceptions *are* supported)
    SUMMARY: AddressSanitizer: stack-buffer-overflow asan_interceptors.cpp.o in scanf_common(void*, int, bool, char const*, __va_list_tag*)
    Shadow bytes around the buggy address:
    
    ```

diff --git a/fuzz/corpus/fuzz_filecfg_protocols/domain.txt b/fuzz/corpus/fuzz_filecfg_protocols/domain.txt
new file mode 100644
index 00000000..b2101c8d
--- /dev/null
+++ b/fuzz/corpus/fuzz_filecfg_protocols/domain.txt
@@ -0,0 +1 @@
+ip:www.ntop.org@ntop
diff --git a/fuzz/corpus/fuzz_filecfg_protocols/domain_ipv6.txt b/fuzz/corpus/fuzz_filecfg_protocols/domain_ipv6.txt
new file mode 100644
index 00000000..232d57d0
--- /dev/null
+++ b/fuzz/corpus/fuzz_filecfg_protocols/domain_ipv6.txt
@@ -0,0 +1 @@
+ipv6:www.ntop.org@ntop
diff --git a/src/lib/ndpi_main.c b/src/lib/ndpi_main.c
index 5b00c849..b14297c1 100644
--- a/src/lib/ndpi_main.c
+++ b/src/lib/ndpi_main.c
@@ -2701,138 +2701,138 @@ static void ndpi_init_ptree_ipv6(struct ndpi_detection_module_struct *ndpi_str,
 static int ndpi_add_host_ip_subprotocol(struct ndpi_detection_module_struct *ndpi_str,
 					char *value, u_int16_t protocol_id,
 					u_int8_t is_ipv6) {
   ndpi_patricia_node_t *node;
   struct in_addr pin;
   struct in6_addr pin6;
   int bits = 32;
   char *ptr = strrchr(value, '/');
   u_int16_t port = 0; /* Format ip:8.248.73.247 */
                       /* Format ipv6:[fe80::76ac:b9ff:fe6c:c124]/64 */
   char *double_column = NULL;
   struct hostent *h;
   bool value_ready = false;
   
   if(!ndpi_str->protocols_ptree)
     return(-1);
 
   if(value[0] == '[') {
     is_ipv6 = 1;
     bits = 128;
     value += 1;
   }
 
   if(ptr) {
     ptr[0] = '\0';
     ptr++;
 
     if((double_column = strrchr(ptr, ':')) != NULL) {
       double_column[0] = '\0';
       port = atoi(&double_column[1]);
     }
 
     if(!is_ipv6) {
       if(atoi(ptr) >= 0 && atoi(ptr) <= 32)
         bits = atoi(ptr);
     } else {
       if(atoi(ptr) >= 0 && atoi(ptr) <= 128)
         bits = atoi(ptr);
 
       ptr = strrchr(value, ']');
       if(ptr)
         *ptr = '\0';
     }
   } else {
     /*
       Let's check if there is the port defined
 
       Example: ip:8.248.73.247:443@AmazonPrime
       Example: ipv6:[fe80::76ac:b9ff:fe6c:c124]:36818@CustomProtocolF
     */
     if(!is_ipv6) {
       double_column = strrchr(value, ':');
     } else {
       ptr = strrchr(value, ']');
       if(ptr) {
         double_column = strrchr(ptr, ':');
         *ptr = '\0';
       }
     }
 
     if(double_column) {
       double_column[0] = '\0';
       port = atoi(&double_column[1]);
     }
   }
 
   if(!is_ipv6) {
     /* Check if the IP address is symbolic or numeric */
     unsigned int d[4];
     char tail[16] = { '\0' };
-    int c = sscanf(value, "%3u.%3u.%3u.%3u%s", &d[0], &d[1], &d[2], &d[3], tail);
+    int c = sscanf(value, "%3u.%3u.%3u.%3u%15s", &d[0], &d[1], &d[2], &d[3], tail);
 
     if ((c != 4) || tail[0]) {
       /* This might be a symbolic IPv4 address */
 
       if((h = gethostbyname2(value, AF_INET)) != NULL) {
 	memcpy(&pin, h->h_addr_list[0], sizeof(pin));
 	value_ready = true;
       }
     }
 
     if(!value_ready) {
       if(inet_pton(AF_INET, value, &pin) != 1)
 	return(-1);
     }
 
     node = add_to_ptree(ndpi_str->protocols_ptree, AF_INET, &pin, bits);
   } else {
     if(strchr(value, ':') == NULL) {
       /* This might be a symbolic IPv6 address */
 
       if((h = gethostbyname2(value, AF_INET6)) != NULL) {
 	memcpy(&pin6, h->h_addr_list[0], sizeof(pin6));
 	value_ready = true;
       }
     }
 
     if(!value_ready) {
       if(inet_pton(AF_INET6, value, &pin6) != 1)
 	return(-1);
     }
     
     node = add_to_ptree(ndpi_str->protocols_ptree6, AF_INET6, &pin6, bits);
   }
 
   if(node != NULL) {
     int i;
     struct patricia_uv16_list *item;
 
     for(i=0; i<UV16_MAX_USER_VALUES; i++) {
       if(node->value.u.uv16[i].user_value == 0) {
 	node->value.u.uv16[i].user_value = protocol_id, node->value.u.uv16[i].additional_user_value = htons(port);
 
 	return(0);
       }
     } /* for */
 
     /*
       If we're here it means that we don't have
       enough room for our custom value
     */
     item = (struct patricia_uv16_list*)ndpi_malloc(sizeof(struct patricia_uv16_list));
 
     if(item != NULL) {
       item->value.user_value = protocol_id,
 	item->value.additional_user_value = htons(port),
 	item->next = (struct patricia_uv16_list*)node->data;
 
       node->data = item;
 
       return(0);
     }
 
     return(-1); /* All slots are full */
   }
 
   return(0);
 }
