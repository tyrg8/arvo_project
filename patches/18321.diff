commit 74958b8e88879302d6f61a813943b968cf03dbd5
Author: pancake <pancake@nopcode.org>
Date:   Mon Oct 21 00:25:53 2019 +0200

    Fix oobread in strlen with clusterfuzz-testcase-minimized-ia_fuzz-5767342952284160.dms

diff --git a/libr/bin/format/mach0/mach0.c b/libr/bin/format/mach0/mach0.c
index ae5a29aeeb..1db4a25ad4 100644
--- a/libr/bin/format/mach0/mach0.c
+++ b/libr/bin/format/mach0/mach0.c
@@ -2265,134 +2265,134 @@ static char *get_name(struct MACH0_(obj_t) *mo, ut32 stridx, bool filter) {
 static int walk_exports(struct MACH0_(obj_t) *bin, RExportsIterator iterator, void * ctx) {
 #define ULEB(at) read_uleb128 (&ur, end)
 	r_return_val_if_fail (bin, 0);
 	if (!bin->dyld_info) {
 		return 0;
 	}
 
 	int count = 0;
 	ulebr ur = {NULL};
 	ut8 * trie = NULL;
 	RList * states = NULL;
 	ut64 size = bin->dyld_info->export_size;
 	if (!size) {
 		return count;
 	}
-	trie = malloc (size);
+	trie = calloc (size + 1, 1);
 	if (!trie) {
 		return count;
 	}
 	ut8 * end = trie + size;
 
 	if (r_buf_read_at (bin->b, bin->dyld_info->export_off, trie, bin->dyld_info->export_size) != size) {
 		goto beach;
 	}
 
 	states = r_list_newf ((RListFree)free);
 	if (!states) {
 		goto beach;
 	}
 
 	RTrieState * root = R_NEW0 (RTrieState);
 	if (!root) {
 		goto beach;
 	}
 	root->node = trie;
 	root->i = 0;
 	root->label = NULL;
 	r_list_push (states, root);
 
 	do {
 		RTrieState * state = r_list_get_top (states);
 		ur.p = state->node;
 		ut64 len = ULEB();
 		if (len) {
 			ut64 flags = ULEB();
 			ut64 offset = ULEB();
 			ut64 resolver = 0;
 			bool isReexport = flags & EXPORT_SYMBOL_FLAGS_REEXPORT;
 			bool hasResolver = flags & EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER;
 			if (hasResolver) {
 				resolver = ULEB() + bin->header_at;
 			} else if (isReexport) {
 				ur.p += strlen ((char*) ur.p) + 1;
 				// TODO: handle this
 			}
 			if (!isReexport) {
 				offset += bin->header_at;
 			}
 			if (iterator && !isReexport) {
 				char * name = NULL;
 				RListIter *iter;
 				RTrieState *s;
 				r_list_foreach (states, iter, s) {
 					if (!s->label) {
 						continue;
 					}
 					name = r_str_append (name, s->label);
 				}
 				if (name == NULL) {
 					eprintf ("malformed export trie\n");
 					goto beach;
 				}
 				if (hasResolver) {
 					char * stub_name = r_str_newf ("stub.%s", name);
 					iterator (bin, stub_name, flags, offset, ctx);
 					iterator (bin, name, flags, resolver, ctx);
 					R_FREE (stub_name);
 				} else {
 					iterator (bin, name, flags, offset, ctx);
 				}
 				R_FREE (name);
 			}
 			if (!isReexport) {
 				if (hasResolver) {
 					count++;
 				}
 				count++;
 			}
 		}
 		ut64 child_count = ULEB();
 		if (state->i == child_count) {
 			r_list_pop (states);
 			continue;
 		}
 		if (!state->next_child) {
 			state->next_child = ur.p;
 		} else {
 			ur.p = state->next_child;
 		}
 		RTrieState * next = R_NEW0 (RTrieState);
 		if (!next) {
 			goto beach;
 		}
 		next->label = (char *) ur.p;
 		ur.p += strlen (next->label) + 1;
 		if (ur.p >= end) {
 			eprintf ("malformed export trie\n");
 			R_FREE (next);
 			goto beach;
 		}
 		next->node = ULEB() + trie;
 		if (next->node >= end) {
 			eprintf ("malformed export trie\n");
 			R_FREE (next);
 			goto beach;
 		}
 		{
 			// avoid loops
 			RListIter *it;
 			RTrieState *s;
 			r_list_foreach (states, it, s) {
 				if (s->node == next->node) {
 					eprintf ("malformed export trie\n");
 					R_FREE (next);
 					goto beach;
 				}
 			}
 		}
 		next->i = 0;
 		state->i++;
 		state->next_child = ur.p;
 		r_list_push (states, next);
 	} while (r_list_length (states));
 #undef ULEB
