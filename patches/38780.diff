commit 4937f05ccd0b97ff5aeaa1d038cf7f6bc8f7dd36
Author: David Benjamin <davidben@google.com>
Date:   Wed Sep 8 16:50:24 2021 -0400

    Unwind remnants of ASN1_TFLG_NDEF.
    
    The i2d functions internally take a tag/class pair of parameters. If tag
    is not -1, we override the tag with (tag, class). Otherwise, class is
    ignored. (class is inconsistently called aclass or iclass.)
    
    Historically, the remaning bits of class were repurposed to pass extra
    flags down the structure. These had to be preserved in all recursive
    calls, so the functions take apart and reassemble the two halves of
    aclass/iclass. The only such flag was ASN1_TFLG_NDEF, which on certain
    types, caused OpenSSL to encode indefinite-length encoding. We removed
    this in https://boringssl-review.googlesource.com/c/boringssl/+/43889.
    
    Due to these flags, if tag == -1, class should default to zero. However,
    X509_NAME's callbacks pass -1, -1, instead of -1, 0, effectively setting
    all flags. This wasn't noticed because none of the types below X509_NAME
    pay attention to ASN1_TFLG_NDEF.
    
    This CL does two things: First, it unwinds the remainder of the flags
    machinery. If we ever need flags, we should pass it as a distinct
    argument. Second, it fixes the X509_NAME calls and asserts that -1 is
    always paired with 0.
    
    Change-Id: I285a73a06ad16980617fe23d5ea7f260fc5dbf16
    Reviewed-on: https://boringssl-review.googlesource.com/c/boringssl/+/49385
    Commit-Queue: David Benjamin <davidben@google.com>
    Reviewed-by: Adam Langley <agl@google.com>

diff --git a/crypto/asn1/internal.h b/crypto/asn1/internal.h
index e30be1694..a4bd34e5b 100644
--- a/crypto/asn1/internal.h
+++ b/crypto/asn1/internal.h
@@ -122,16 +122,12 @@ void ASN1_template_free(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);
 int ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
                      const ASN1_ITEM *it, int tag, int aclass, char opt,
                      ASN1_TLC *ctx);
 
 /* ASN1_item_ex_i2d encodes |*pval| as a value of type |it| to |out| under the
  * i2d output convention. It returns a non-zero length on success and -1 on
  * error. If |tag| is -1. the tag and class come from |it|. Otherwise, the tag
- * number is |tag| and the class is the |ASN1_TFLG_TAG_CLASS| bits of |aclass|.
- * This is used for implicit tagging. This function treats a missing value as an
- * error, not an optional field.
- *
- * TODO(davidben): Historically, |aclass| contained other flags, but we may have
- * removed the last of them. */
+ * number is |tag| and the class is |aclass|. This is used for implicit tagging.
+ * This function treats a missing value as an error, not an optional field. */
 int ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
                      const ASN1_ITEM *it, int tag, int aclass);
 
diff --git a/crypto/asn1/tasn_enc.c b/crypto/asn1/tasn_enc.c
index 4ccacabcd..9917d2a0c 100644
--- a/crypto/asn1/tasn_enc.c
+++ b/crypto/asn1/tasn_enc.c
@@ -75,8 +75,7 @@ static int asn1_i2d_ex_primitive(ASN1_VALUE **pval, unsigned char **out,
 static int asn1_ex_i2c(ASN1_VALUE **pval, unsigned char *cont, int *out_omit,
                        int *putype, const ASN1_ITEM *it);
 static int asn1_set_seq_out(STACK_OF(ASN1_VALUE) *sk, unsigned char **out,
-                            int skcontlen, const ASN1_ITEM *item,
-                            int do_sort, int iclass);
+                            int skcontlen, const ASN1_ITEM *item, int do_sort);
 static int asn1_template_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
                                 const ASN1_TEMPLATE *tt, int tag, int aclass);
 
@@ -126,285 +125,290 @@ int ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
 /* asn1_item_ex_i2d_opt behaves like |ASN1_item_ex_i2d| but, if |optional| is
  * non-zero and |*pval| is omitted, it returns zero and writes no bytes. */
 int asn1_item_ex_i2d_opt(ASN1_VALUE **pval, unsigned char **out,
                          const ASN1_ITEM *it, int tag, int aclass,
                          int optional)
 {
     const ASN1_TEMPLATE *tt = NULL;
     int i, seqcontlen, seqlen;
 
+    /* Historically, |aclass| was repurposed to pass additional flags into the
+     * encoding process. */
+    assert((aclass & ASN1_TFLG_TAG_CLASS) == aclass);
+    /* If not overridding the tag, |aclass| is ignored and should be zero. */
+    assert(tag != -1 || aclass == 0);
+
     /* All fields are pointers, except for boolean |ASN1_ITYPE_PRIMITIVE|s.
      * Optional primitives are handled later. */
     if ((it->itype != ASN1_ITYPE_PRIMITIVE) && !*pval) {
         if (optional) {
             return 0;
         }
         OPENSSL_PUT_ERROR(ASN1, ASN1_R_MISSING_VALUE);
         return -1;
     }
 
     switch (it->itype) {
 
     case ASN1_ITYPE_PRIMITIVE:
         if (it->templates) {
             if (it->templates->flags & ASN1_TFLG_OPTIONAL) {
                 OPENSSL_PUT_ERROR(ASN1, ASN1_R_BAD_TEMPLATE);
                 return -1;
             }
             return asn1_template_ex_i2d(pval, out, it->templates, tag, aclass);
         }
         return asn1_i2d_ex_primitive(pval, out, it, tag, aclass, optional);
 
     case ASN1_ITYPE_MSTRING:
         /*
          * It never makes sense for multi-strings to have implicit tagging, so
          * if tag != -1, then this looks like an error in the template.
          */
         if (tag != -1) {
             OPENSSL_PUT_ERROR(ASN1, ASN1_R_BAD_TEMPLATE);
             return -1;
         }
-        return asn1_i2d_ex_primitive(pval, out, it, -1, aclass, optional);
+        return asn1_i2d_ex_primitive(pval, out, it, -1, 0, optional);
 
     case ASN1_ITYPE_CHOICE: {
         /*
          * It never makes sense for CHOICE types to have implicit tagging, so if
          * tag != -1, then this looks like an error in the template.
          */
         if (tag != -1) {
             OPENSSL_PUT_ERROR(ASN1, ASN1_R_BAD_TEMPLATE);
             return -1;
         }
         i = asn1_get_choice_selector(pval, it);
         if (i < 0 || i >= it->tcount) {
             OPENSSL_PUT_ERROR(ASN1, ASN1_R_NO_MATCHING_CHOICE_TYPE);
             return -1;
         }
         const ASN1_TEMPLATE *chtt = it->templates + i;
         if (chtt->flags & ASN1_TFLG_OPTIONAL) {
             OPENSSL_PUT_ERROR(ASN1, ASN1_R_BAD_TEMPLATE);
             return -1;
         }
         ASN1_VALUE **pchval = asn1_get_field_ptr(pval, chtt);
-        return asn1_template_ex_i2d(pchval, out, chtt, -1, aclass);
+        return asn1_template_ex_i2d(pchval, out, chtt, -1, 0);
     }
 
     case ASN1_ITYPE_EXTERN: {
         /* If new style i2d it does all the work */
         const ASN1_EXTERN_FUNCS *ef = it->funcs;
         int ret = ef->asn1_ex_i2d(pval, out, it, tag, aclass);
         if (ret == 0) {
             /* |asn1_ex_i2d| should never return zero. We have already checked
              * for optional values generically, and |ASN1_ITYPE_EXTERN| fields
              * must be pointers. */
             OPENSSL_PUT_ERROR(ASN1, ERR_R_INTERNAL_ERROR);
             return -1;
         }
         return ret;
     }
 
     case ASN1_ITYPE_SEQUENCE: {
         i = asn1_enc_restore(&seqcontlen, out, pval, it);
         /* An error occurred */
         if (i < 0)
             return -1;
         /* We have a valid cached encoding... */
         if (i > 0)
             return seqcontlen;
         /* Otherwise carry on */
         seqcontlen = 0;
         /* If no IMPLICIT tagging set to SEQUENCE, UNIVERSAL */
         if (tag == -1) {
             tag = V_ASN1_SEQUENCE;
-            /* Retain any other flags in aclass */
-            aclass = (aclass & ~ASN1_TFLG_TAG_CLASS)
-                | V_ASN1_UNIVERSAL;
+            aclass = V_ASN1_UNIVERSAL;
         }
         /* First work out sequence content length */
         for (i = 0, tt = it->templates; i < it->tcount; tt++, i++) {
             const ASN1_TEMPLATE *seqtt;
             ASN1_VALUE **pseqval;
             int tmplen;
             seqtt = asn1_do_adb(pval, tt, 1);
             if (!seqtt)
                 return -1;
             pseqval = asn1_get_field_ptr(pval, seqtt);
-            tmplen = asn1_template_ex_i2d(pseqval, NULL, seqtt, -1, aclass);
+            tmplen = asn1_template_ex_i2d(pseqval, NULL, seqtt, -1, 0);
             if (tmplen == -1 || (tmplen > INT_MAX - seqcontlen))
                 return -1;
             seqcontlen += tmplen;
         }
 
         seqlen = ASN1_object_size(/*constructed=*/1, seqcontlen, tag);
         if (!out || seqlen == -1)
             return seqlen;
         /* Output SEQUENCE header */
         ASN1_put_object(out, /*constructed=*/1, seqcontlen, tag, aclass);
         for (i = 0, tt = it->templates; i < it->tcount; tt++, i++) {
             const ASN1_TEMPLATE *seqtt;
             ASN1_VALUE **pseqval;
             seqtt = asn1_do_adb(pval, tt, 1);
             if (!seqtt)
                 return -1;
             pseqval = asn1_get_field_ptr(pval, seqtt);
-            if (asn1_template_ex_i2d(pseqval, out, seqtt, -1, aclass) < 0) {
+            if (asn1_template_ex_i2d(pseqval, out, seqtt, -1, 0) < 0) {
                 return -1;
             }
         }
         return seqlen;
     }
 
     default:
         OPENSSL_PUT_ERROR(ASN1, ASN1_R_BAD_TEMPLATE);
         return -1;
     }
 }
 
 /* asn1_template_ex_i2d behaves like |asn1_item_ex_i2d_opt| but uses an
  * |ASN1_TEMPLATE| instead of an |ASN1_ITEM|. An |ASN1_TEMPLATE| wraps an
  * |ASN1_ITEM| with modifiers such as tagging, SEQUENCE or SET, etc. Instead of
  * taking an |optional| parameter, it uses the |ASN1_TFLG_OPTIONAL| flag. */
 static int asn1_template_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
                                 const ASN1_TEMPLATE *tt, int tag, int iclass)
 {
     int i, ret, flags, ttag, tclass;
     size_t j;
     flags = tt->flags;
+
+    /* Historically, |iclass| was repurposed to pass additional flags into the
+     * encoding process. */
+    assert((iclass & ASN1_TFLG_TAG_CLASS) == iclass);
+    /* If not overridding the tag, |iclass| is ignored and should be zero. */
+    assert(tag != -1 || iclass == 0);
+
     /*
      * Work out tag and class to use: tagging may come either from the
      * template or the arguments, not both because this would create
-     * ambiguity. Additionally the iclass argument may contain some
-     * additional flags which should be noted and passed down to other
-     * levels.
+     * ambiguity.
      */
     if (flags & ASN1_TFLG_TAG_MASK) {
         /* Error if argument and template tagging */
         if (tag != -1) {
             OPENSSL_PUT_ERROR(ASN1, ASN1_R_BAD_TEMPLATE);
             return -1;
         }
         /* Get tagging from template */
         ttag = tt->tag;
         tclass = flags & ASN1_TFLG_TAG_CLASS;
     } else if (tag != -1) {
         /* No template tagging, get from arguments */
         ttag = tag;
         tclass = iclass & ASN1_TFLG_TAG_CLASS;
     } else {
         ttag = -1;
         tclass = 0;
     }
-    /*
-     * Remove any class mask from iflag.
-     */
-    iclass &= ~ASN1_TFLG_TAG_CLASS;
 
     const int optional = (flags & ASN1_TFLG_OPTIONAL) != 0;
 
     /*
-     * At this point 'ttag' contains the outer tag to use, 'tclass' is the
-     * class and iclass is any flags passed to this function.
+     * At this point 'ttag' contains the outer tag to use, and 'tclass' is the
+     * class.
      */
 
     if (flags & ASN1_TFLG_SK_MASK) {
         /* SET OF, SEQUENCE OF */
         STACK_OF(ASN1_VALUE) *sk = (STACK_OF(ASN1_VALUE) *)*pval;
         int isset, sktag, skaclass;
         int skcontlen, sklen;
         ASN1_VALUE *skitem;
 
         if (!*pval) {
             if (optional) {
                 return 0;
             }
             OPENSSL_PUT_ERROR(ASN1, ASN1_R_MISSING_VALUE);
             return -1;
         }
 
         if (flags & ASN1_TFLG_SET_OF) {
             isset = 1;
             /* Historically, types with both bits set were mutated when
              * serialized to apply the sort. We no longer support this. */
             assert((flags & ASN1_TFLG_SEQUENCE_OF) == 0);
         } else {
             isset = 0;
         }
 
         /*
          * Work out inner tag value: if EXPLICIT or no tagging use underlying
          * type.
          */
         if ((ttag != -1) && !(flags & ASN1_TFLG_EXPTAG)) {
             sktag = ttag;
             skaclass = tclass;
         } else {
             skaclass = V_ASN1_UNIVERSAL;
             if (isset)
                 sktag = V_ASN1_SET;
             else
                 sktag = V_ASN1_SEQUENCE;
         }
 
         /* Determine total length of items */
         skcontlen = 0;
         for (j = 0; j < sk_ASN1_VALUE_num(sk); j++) {
             int tmplen;
             skitem = sk_ASN1_VALUE_value(sk, j);
             tmplen = ASN1_item_ex_i2d(&skitem, NULL, ASN1_ITEM_ptr(tt->item),
-                                      -1, iclass);
+                                      -1, 0);
             if (tmplen == -1 || (skcontlen > INT_MAX - tmplen))
                 return -1;
             skcontlen += tmplen;
         }
         sklen = ASN1_object_size(/*constructed=*/1, skcontlen, sktag);
         if (sklen == -1)
             return -1;
         /* If EXPLICIT need length of surrounding tag */
         if (flags & ASN1_TFLG_EXPTAG)
             ret = ASN1_object_size(/*constructed=*/1, sklen, ttag);
         else
             ret = sklen;
 
         if (!out || ret == -1)
             return ret;
 
         /* Now encode this lot... */
         /* EXPLICIT tag */
         if (flags & ASN1_TFLG_EXPTAG)
             ASN1_put_object(out, /*constructed=*/1, sklen, ttag, tclass);
         /* SET or SEQUENCE and IMPLICIT tag */
         ASN1_put_object(out, /*constructed=*/1, skcontlen, sktag, skaclass);
         /* And the stuff itself */
         if (!asn1_set_seq_out(sk, out, skcontlen, ASN1_ITEM_ptr(tt->item),
-                              isset, iclass)) {
+                              isset)) {
             return -1;
         }
         return ret;
     }
 
     if (flags & ASN1_TFLG_EXPTAG) {
         /* EXPLICIT tagging */
         /* Find length of tagged item */
-        i = asn1_item_ex_i2d_opt(pval, NULL, ASN1_ITEM_ptr(tt->item), -1,
-                                 iclass, optional);
+        i = asn1_item_ex_i2d_opt(pval, NULL, ASN1_ITEM_ptr(tt->item), -1, 0,
+                                 optional);
         if (i <= 0)
             return i;
         /* Find length of EXPLICIT tag */
         ret = ASN1_object_size(/*constructed=*/1, i, ttag);
         if (out && ret != -1) {
             /* Output tag and item */
             ASN1_put_object(out, /*constructed=*/1, i, ttag, tclass);
             if (ASN1_item_ex_i2d(pval, out, ASN1_ITEM_ptr(tt->item), -1,
-                                 iclass) < 0) {
+                                 0) < 0) {
                 return -1;
             }
         }
         return ret;
     }
 
-    /* Either normal or IMPLICIT tagging: combine class and flags */
+    /* Either normal or IMPLICIT tagging */
     return asn1_item_ex_i2d_opt(pval, out, ASN1_ITEM_ptr(tt->item),
-                                ttag, tclass | iclass, optional);
+                                ttag, tclass, optional);
 
 }
 
 /* Temporary structure used to hold DER encoding of items for SET OF */
@@ -417,71 +421,66 @@ typedef struct {
 static int der_cmp(const void *a, const void *b)
 {
     const DER_ENC *d1 = a, *d2 = b;
     int cmplen, i;
     cmplen = (d1->length < d2->length) ? d1->length : d2->length;
     i = OPENSSL_memcmp(d1->data, d2->data, cmplen);
     if (i)
         return i;
     return d1->length - d2->length;
 }
 
 /* asn1_set_seq_out writes |sk| to |out| under the i2d output convention,
  * excluding the tag and length. It returns one on success and zero on error.
  * |skcontlen| must be the total encoded size. If |do_sort| is non-zero, the
- * elements are sorted for a SET OF type. Each element of |sk| has type |item|.
- * |iclass| contains flags for encoding elements of |sk|.
- *
- * TODO(davidben): After |ASN1_TFLG_NDEF| was removed, no more flags are passed
- * into |iclass|. However, due to a bug in x_name.c, we cannot assert |iclass|
- * is zero. Fix that, then unwind the flags. */
+ * elements are sorted for a SET OF type. Each element of |sk| has type
+ * |item|. */
 static int asn1_set_seq_out(STACK_OF(ASN1_VALUE) *sk, unsigned char **out,
-                            int skcontlen, const ASN1_ITEM *item,
-                            int do_sort, int iclass)
+                            int skcontlen, const ASN1_ITEM *item, int do_sort)
 {
     /* No need to sort if there are fewer than two items. */
     if (!do_sort || sk_ASN1_VALUE_num(sk) < 2) {
         for (size_t i = 0; i < sk_ASN1_VALUE_num(sk); i++) {
             ASN1_VALUE *skitem = sk_ASN1_VALUE_value(sk, i);
-            if (ASN1_item_ex_i2d(&skitem, out, item, -1, iclass) < 0) {
+            if (ASN1_item_ex_i2d(&skitem, out, item, -1, 0) < 0) {
                 return 0;
             }
         }
         return 1;
     }
 
     if (sk_ASN1_VALUE_num(sk) > ((size_t)-1) / sizeof(DER_ENC)) {
         OPENSSL_PUT_ERROR(ASN1, ERR_R_OVERFLOW);
         return 0;
     }
 
     int ret = 0;
     unsigned char *const buf = OPENSSL_malloc(skcontlen);
     DER_ENC *encoded = OPENSSL_malloc(sk_ASN1_VALUE_num(sk) * sizeof(*encoded));
     if (encoded == NULL || buf == NULL) {
         OPENSSL_PUT_ERROR(ASN1, ERR_R_MALLOC_FAILURE);
         goto err;
     }
 
     /* Encode all the elements into |buf| and populate |encoded|. */
     unsigned char *p = buf;
     for (size_t i = 0; i < sk_ASN1_VALUE_num(sk); i++) {
         ASN1_VALUE *skitem = sk_ASN1_VALUE_value(sk, i);
         encoded[i].data = p;
-        encoded[i].length = ASN1_item_ex_i2d(&skitem, &p, item, -1, iclass);
+        encoded[i].length = ASN1_item_ex_i2d(&skitem, &p, item, -1, 0);
         if (encoded[i].length < 0) {
             goto err;
         }
         assert(p - buf <= skcontlen);
     }
 
     qsort(encoded, sk_ASN1_VALUE_num(sk), sizeof(*encoded), der_cmp);
 
     /* Output the elements in sorted order. */
     p = *out;
     for (size_t i = 0; i < sk_ASN1_VALUE_num(sk); i++) {
         OPENSSL_memcpy(p, encoded[i].data, encoded[i].length);
         p += encoded[i].length;
     }
     *out = p;
 
     ret = 1;
diff --git a/crypto/x509/x_name.c b/crypto/x509/x_name.c
index 348d31b0a..4fea082cf 100644
--- a/crypto/x509/x_name.c
+++ b/crypto/x509/x_name.c
@@ -278,46 +278,47 @@ static int x509_name_ex_i2d(ASN1_VALUE **val, unsigned char **out,
 static int x509_name_encode(X509_NAME *a)
 {
     int len;
     unsigned char *p;
     STACK_OF(X509_NAME_ENTRY) *entries = NULL;
     X509_NAME_ENTRY *entry;
     int set = -1;
     size_t i;
     STACK_OF(STACK_OF_X509_NAME_ENTRY) *intname =
         sk_STACK_OF_X509_NAME_ENTRY_new_null();
     if (!intname)
         goto memerr;
     for (i = 0; i < sk_X509_NAME_ENTRY_num(a->entries); i++) {
         entry = sk_X509_NAME_ENTRY_value(a->entries, i);
         if (entry->set != set) {
             entries = sk_X509_NAME_ENTRY_new_null();
             if (!entries)
                 goto memerr;
             if (!sk_STACK_OF_X509_NAME_ENTRY_push(intname, entries)) {
                 sk_X509_NAME_ENTRY_free(entries);
                 goto memerr;
             }
             set = entry->set;
         }
         if (!sk_X509_NAME_ENTRY_push(entries, entry))
             goto memerr;
     }
     ASN1_VALUE *intname_val = (ASN1_VALUE *)intname;
-    len = ASN1_item_ex_i2d(&intname_val, NULL,
-                           ASN1_ITEM_rptr(X509_NAME_INTERNAL), -1, -1);
+    len =
+        ASN1_item_ex_i2d(&intname_val, NULL, ASN1_ITEM_rptr(X509_NAME_INTERNAL),
+                         /*tag=*/-1, /*aclass=*/0);
     if (len <= 0) {
-        goto err;
+      goto err;
     }
     if (!BUF_MEM_grow(a->bytes, len))
         goto memerr;
     p = (unsigned char *)a->bytes->data;
-    if (ASN1_item_ex_i2d(&intname_val,
-                         &p, ASN1_ITEM_rptr(X509_NAME_INTERNAL), -1, -1) <= 0) {
+    if (ASN1_item_ex_i2d(&intname_val, &p, ASN1_ITEM_rptr(X509_NAME_INTERNAL),
+                         /*tag=*/-1, /*aclass=*/0) <= 0) {
         goto err;
     }
     sk_STACK_OF_X509_NAME_ENTRY_pop_free(intname,
                                          local_sk_X509_NAME_ENTRY_free);
     a->modified = 0;
     return 1;
  memerr:
     OPENSSL_PUT_ERROR(X509, ERR_R_MALLOC_FAILURE);
@@ -498,19 +499,19 @@ static int asn1_string_canon(ASN1_STRING *out, ASN1_STRING *in)
 static int i2d_name_canon(STACK_OF(STACK_OF_X509_NAME_ENTRY) * _intname,
                           unsigned char **in)
 {
     int len, ltmp;
     size_t i;
     ASN1_VALUE *v;
     STACK_OF(ASN1_VALUE) *intname = (STACK_OF(ASN1_VALUE) *)_intname;
 
     len = 0;
     for (i = 0; i < sk_ASN1_VALUE_num(intname); i++) {
         v = sk_ASN1_VALUE_value(intname, i);
-        ltmp = ASN1_item_ex_i2d(&v, in,
-                                ASN1_ITEM_rptr(X509_NAME_ENTRIES), -1, -1);
+        ltmp = ASN1_item_ex_i2d(&v, in, ASN1_ITEM_rptr(X509_NAME_ENTRIES),
+                                /*tag=*/-1, /*aclass=*/0);
         if (ltmp < 0)
             return ltmp;
         len += ltmp;
     }
     return len;
 }
