commit 3f3de914a38ef440cf99c4b0c6f0f043c5fdffbe
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Mon Jul 24 00:21:17 2023 +0200

    Check remaining data size before parsing bmp array header.
    
    This fixes oss-fuzz 59390.

diff --git a/source/fitz/load-bmp.c b/source/fitz/load-bmp.c
index 7a37ebc40..00f79e393 100644
--- a/source/fitz/load-bmp.c
+++ b/source/fitz/load-bmp.c
@@ -1251,48 +1251,54 @@ fz_pixmap *
 fz_load_bmp_subimage(fz_context *ctx, const unsigned char *buf, size_t len, int subimage)
 {
 	const unsigned char *begin = buf;
 	const unsigned char *end = buf + len;
 	const unsigned char *p = begin;
 	struct info info;
 	int nextoffset = 0;
 	fz_pixmap *image;
 	int origidx = subimage;
 
 	do
 	{
 		p = begin + nextoffset;
 
-		if (is_bitmap_array(p))
+		if (end - p < 14)
+			fz_throw(ctx, FZ_ERROR_GENERIC, "not enough data for bitmap array (%02x%02x) in bmp image", p[0], p[1]);
+
+		if (!is_bitmap_array(p))
+		{
+			fz_warn(ctx, "treating invalid subimage as end of file");
+			nextoffset = 0;
+		}
+		else
 		{
 			/* read16(p+0) == type */
 			/* read32(p+2) == size of this header in bytes */
 			nextoffset = read32(p + 6);
 			/* read16(p+10) == suitable pelx dimensions */
 			/* read16(p+12) == suitable pely dimensions */
 			p += 14;
 		}
-		else if (nextoffset > 0)
-			fz_throw(ctx, FZ_ERROR_GENERIC, "unexpected bitmap array magic (%02x%02x) in bmp image", p[0], p[1]);
 
 		if (end - begin < nextoffset)
 		{
 			fz_warn(ctx, "treating invalid next subimage offset as end of file");
 			nextoffset = 0;
 		}
-
-		subimage--;
+		else
+			subimage--;
 
 	} while (subimage >= 0 && nextoffset > 0);
 
 	if (subimage != -1)
 		fz_throw(ctx, FZ_ERROR_GENERIC, "subimage index (%d) out of range in bmp image", origidx);
 
 	fz_try(ctx)
 		image = bmp_read_image(ctx, &info, begin, end, p, 0);
 	fz_always(ctx)
 		fz_drop_colorspace(ctx, info.cs);
 	fz_catch(ctx)
 		fz_rethrow(ctx);
 
 	return image;
 }
@@ -1301,35 +1307,41 @@ int
 fz_load_bmp_subimage_count(fz_context *ctx, const unsigned char *buf, size_t len)
 {
 	const unsigned char *begin = buf;
 	const unsigned char *end = buf + len;
-	int nextoffset = 0;
+	uint32_t nextoffset = 0;
 	int count = 0;
 
 	do
 	{
 		const unsigned char *p = begin + nextoffset;
 
-		if (is_bitmap_array(p))
+		if (end - p < 14)
+			fz_throw(ctx, FZ_ERROR_GENERIC, "not enough data for bitmap array (%02x%02x) in bmp image", p[0], p[1]);
+
+		if (!is_bitmap_array(p))
+		{
+			fz_warn(ctx, "treating invalid subimage as end of file");
+			nextoffset = 0;
+		}
+		else
 		{
 			/* read16(p+0) == type */
 			/* read32(p+2) == size of this header in bytes */
 			nextoffset = read32(p + 6);
 			/* read16(p+10) == suitable pelx dimensions */
 			/* read16(p+12) == suitable pely dimensions */
 			p += 14;
 		}
-		else if (nextoffset > 0)
-			fz_throw(ctx, FZ_ERROR_GENERIC, "unexpected bitmap array magic (%02x%02x) in bmp image", p[0], p[1]);
 
 		if (end - begin < nextoffset)
 		{
 			fz_warn(ctx, "treating invalid next subimage offset as end of file");
 			nextoffset = 0;
 		}
 		else
 			count++;
 
 	} while (nextoffset > 0);
 
 	return count;
 }
