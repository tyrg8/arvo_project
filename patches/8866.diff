commit 4944aa0734523573e76e26c42f65e8998b8692ed
Author: Tor Andersson <tor.andersson@artifex.com>
Date:   Tue Jul 17 15:05:22 2018 +0200

    Remove functions that implement duplicate functionality.
    
    pdf_get_inheritable also looks in trailer/Root/AcroForm for missing keys,
    but this behavior is not supported by anything in the specification.

diff --git a/include/mupdf/pdf/field.h b/include/mupdf/pdf/field.h
index 5b25dc3f6..65d2af2e6 100644
--- a/include/mupdf/pdf/field.h
+++ b/include/mupdf/pdf/field.h
@@ -33,8 +33,6 @@ enum
 	Ff_CommitOnSelCHange = 1 << (27-1),
 };
 
-char *pdf_get_string_or_stream(fz_context *ctx, pdf_document *doc, pdf_obj *obj);
-pdf_obj *pdf_get_inheritable(fz_context *ctx, pdf_document *doc, pdf_obj *obj, pdf_obj *key);
 int pdf_get_field_flags(fz_context *ctx, pdf_document *doc, pdf_obj *obj);
 int pdf_field_type(fz_context *ctx, pdf_document *doc, pdf_obj *field);
 void pdf_set_field_type(fz_context *ctx, pdf_document *doc, pdf_obj *obj, int type);
diff --git a/source/pdf/pdf-field.c b/source/pdf/pdf-field.c
index 07a6e7709..3bb0acc3c 100644
--- a/source/pdf/pdf-field.c
+++ b/source/pdf/pdf-field.c
@@ -3,76 +3,19 @@
 
 #include <string.h>
 
-pdf_obj *pdf_get_inheritable(fz_context *ctx, pdf_document *doc, pdf_obj *obj, pdf_obj *key)
-{
-	pdf_obj *fobj = NULL;
-
-	while (!fobj && obj)
-	{
-		fobj = pdf_dict_get(ctx, obj, key);
-
-		if (!fobj)
-			obj = pdf_dict_get(ctx, obj, PDF_NAME(Parent));
-	}
-
-	return fobj ? fobj : pdf_dict_get(ctx, pdf_dict_get(ctx, pdf_dict_get(ctx, pdf_trailer(ctx, doc), PDF_NAME(Root)), PDF_NAME(AcroForm)), key);
-}
-
-char *pdf_get_string_or_stream(fz_context *ctx, pdf_document *doc, pdf_obj *obj)
-{
-	size_t len = 0;
-	char *buf = NULL;
-	fz_buffer *stmbuf = NULL;
-	char *text = NULL;
-
-	fz_var(stmbuf);
-	fz_var(text);
-	fz_try(ctx)
-	{
-		if (pdf_is_string(ctx, obj))
-		{
-			len = pdf_to_str_len(ctx, obj);
-			buf = pdf_to_str_buf(ctx, obj);
-		}
-		else if (pdf_is_stream(ctx, obj))
-		{
-			stmbuf = pdf_load_stream(ctx, obj);
-			len = fz_buffer_storage(ctx, stmbuf, (unsigned char **)&buf);
-		}
-
-		if (buf)
-		{
-			text = fz_malloc(ctx, len+1);
-			memcpy(text, buf, len);
-			text[len] = 0;
-		}
-	}
-	fz_always(ctx)
-	{
-		fz_drop_buffer(ctx, stmbuf);
-	}
-	fz_catch(ctx)
-	{
-		fz_free(ctx, text);
-		fz_rethrow(ctx);
-	}
-
-	return text;
-}
-
 char *pdf_field_value(fz_context *ctx, pdf_document *doc, pdf_obj *field)
 {
-	return pdf_load_stream_or_string_as_utf8(ctx, pdf_get_inheritable(ctx, doc, field, PDF_NAME(V)));
+	return pdf_load_stream_or_string_as_utf8(ctx, pdf_dict_get_inheritable(ctx, field, PDF_NAME(V)));
 }
 
 int pdf_get_field_flags(fz_context *ctx, pdf_document *doc, pdf_obj *obj)
 {
-	return pdf_to_int(ctx, pdf_get_inheritable(ctx, doc, obj, PDF_NAME(Ff)));
+	return pdf_to_int(ctx, pdf_dict_get_inheritable(ctx, obj, PDF_NAME(Ff)));
 }
 
 static pdf_obj *get_field_type_name(fz_context *ctx, pdf_document *doc, pdf_obj *obj)
 {
-	return pdf_get_inheritable(ctx, doc, obj, PDF_NAME(FT));
+	return pdf_dict_get_inheritable(ctx, obj, PDF_NAME(FT));
 }
 
 int pdf_field_type(fz_context *ctx, pdf_document *doc, pdf_obj *obj)
diff --git a/source/pdf/pdf-form.c b/source/pdf/pdf-form.c
index a838b4b83..454d3a6ed 100644
--- a/source/pdf/pdf-form.c
+++ b/source/pdf/pdf-form.c
@@ -107,51 +107,51 @@ pdf_obj *pdf_lookup_field(fz_context *ctx, pdf_obj *form, char *name)
 static void reset_form_field(fz_context *ctx, pdf_document *doc, pdf_obj *field)
 {
 	/* Set V to DV wherever DV is present, and delete V where DV is not.
 	 * FIXME: we assume for now that V has not been set unequal
 	 * to DV higher in the hierarchy than "field".
 	 *
 	 * At the bottom of the hierarchy we may find widget annotations
 	 * that aren't also fields, but DV and V will not be present in their
 	 * dictionaries, and attempts to remove V will be harmless. */
 	pdf_obj *dv = pdf_dict_get(ctx, field, PDF_NAME(DV));
 	pdf_obj *kids = pdf_dict_get(ctx, field, PDF_NAME(Kids));
 
 	if (dv)
 		pdf_dict_put(ctx, field, PDF_NAME(V), dv);
 	else
 		pdf_dict_del(ctx, field, PDF_NAME(V));
 
 	if (kids == NULL)
 	{
 		/* The leaves of the tree are widget annotations
 		 * In some cases we need to update the appearance state;
 		 * in others we need to mark the field as dirty so that
 		 * the appearance stream will be regenerated. */
 		switch (pdf_field_type(ctx, doc, field))
 		{
 		case PDF_WIDGET_TYPE_RADIOBUTTON:
 		case PDF_WIDGET_TYPE_CHECKBOX:
 			{
-				pdf_obj *leafv = pdf_get_inheritable(ctx, doc, field, PDF_NAME(V));
+				pdf_obj *leafv = pdf_dict_get_inheritable(ctx, field, PDF_NAME(V));
 
 				if (leafv)
 					pdf_keep_obj(ctx, leafv);
 				else
 					leafv = PDF_NAME(Off);
 
 				pdf_dict_put_drop(ctx, field, PDF_NAME(AS), leafv);
 			}
 			break;
 
 		case PDF_WIDGET_TYPE_PUSHBUTTON:
 			break;
 
 		default:
 			pdf_field_mark_dirty(ctx, doc, field);
 			break;
 		}
 	}
 
 	if (pdf_field_dirties_document(ctx, doc, field))
 		doc->dirty = 1;
 }
@@ -972,34 +972,34 @@ void pdf_field_set_fill_color(fz_context *ctx, pdf_document *doc, pdf_obj *field
 void pdf_field_set_text_color(fz_context *ctx, pdf_document *doc, pdf_obj *field, pdf_obj *col)
 {
 	char buf[100];
 	const char *font;
 	float size, color[3], black;
-	const char *da = pdf_to_str_buf(ctx, pdf_get_inheritable(ctx, doc, field, PDF_NAME(DA)));
+	const char *da = pdf_to_str_buf(ctx, pdf_dict_get_inheritable(ctx, field, PDF_NAME(DA)));
 
 	pdf_parse_default_appearance(ctx, da, &font, &size, color);
 
 	switch (pdf_array_len(ctx, col))
 	{
 	default:
 		color[0] = color[1] = color[2] = 0;
 		break;
 	case 1:
 		color[0] = color[1] = color[2] = pdf_array_get_real(ctx, col, 0);
 		break;
 	case 3:
 		color[0] = pdf_array_get_real(ctx, col, 0);
 		color[1] = pdf_array_get_real(ctx, col, 1);
 		color[2] = pdf_array_get_real(ctx, col, 2);
 		break;
 	case 4:
 		black = pdf_array_get_real(ctx, col, 3);
 		color[0] = 1 - fz_min(1, pdf_array_get_real(ctx, col, 0) + black);
 		color[1] = 1 - fz_min(1, pdf_array_get_real(ctx, col, 1) + black);
 		color[2] = 1 - fz_min(1, pdf_array_get_real(ctx, col, 2) + black);
 		break;
 	}
 
 	pdf_print_default_appearance(ctx, buf, sizeof buf, font, size, color);
 	pdf_dict_put_string(ctx, field, PDF_NAME(DA), buf, strlen(buf));
 	pdf_field_mark_dirty(ctx, doc, field);
 }
@@ -1030,40 +1030,28 @@ char *pdf_text_widget_text(fz_context *ctx, pdf_document *doc, pdf_widget *tw)
 int pdf_text_widget_max_len(fz_context *ctx, pdf_document *doc, pdf_widget *tw)
 {
 	pdf_annot *annot = (pdf_annot *)tw;
 
-	return pdf_to_int(ctx, pdf_get_inheritable(ctx, doc, annot->obj, PDF_NAME(MaxLen)));
+	return pdf_to_int(ctx, pdf_dict_get_inheritable(ctx, annot->obj, PDF_NAME(MaxLen)));
 }
 
 int pdf_text_widget_content_type(fz_context *ctx, pdf_document *doc, pdf_widget *tw)
 {
 	pdf_annot *annot = (pdf_annot *)tw;
-	char *code = NULL;
 	int type = PDF_WIDGET_CONTENT_UNRESTRAINED;
-
-	fz_var(code);
-	fz_try(ctx)
-	{
-		code = pdf_get_string_or_stream(ctx, doc, pdf_dict_getl(ctx, annot->obj, PDF_NAME(AA), PDF_NAME(F), PDF_NAME(JS), NULL));
-		if (code)
-		{
-			if (strstr(code, "AFNumber_Format"))
-				type = PDF_WIDGET_CONTENT_NUMBER;
-			else if (strstr(code, "AFSpecial_Format"))
-				type = PDF_WIDGET_CONTENT_SPECIAL;
-			else if (strstr(code, "AFDate_FormatEx"))
-				type = PDF_WIDGET_CONTENT_DATE;
-			else if (strstr(code, "AFTime_FormatEx"))
-				type = PDF_WIDGET_CONTENT_TIME;
-		}
-	}
-	fz_always(ctx)
-	{
+	pdf_obj *js = pdf_dict_getl(ctx, annot->obj, PDF_NAME(AA), PDF_NAME(F), PDF_NAME(JS), NULL);
+	if (js)
+	{
+		char *code = pdf_load_stream_or_string_as_utf8(ctx, js);
+		if (strstr(code, "AFNumber_Format"))
+			type = PDF_WIDGET_CONTENT_NUMBER;
+		else if (strstr(code, "AFSpecial_Format"))
+			type = PDF_WIDGET_CONTENT_SPECIAL;
+		else if (strstr(code, "AFDate_FormatEx"))
+			type = PDF_WIDGET_CONTENT_DATE;
+		else if (strstr(code, "AFTime_FormatEx"))
+			type = PDF_WIDGET_CONTENT_TIME;
 		fz_free(ctx, code);
 	}
-	fz_catch(ctx)
-	{
-		fz_warn(ctx, "failure in fz_text_widget_content_type");
-	}
 
 	return type;
 }
