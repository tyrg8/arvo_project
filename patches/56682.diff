commit d4c238573e9222afe73f1c6113d285a9df75e8a7
Author: Mark Raasveldt <mark.raasveldt@gmail.com>
Date:   Fri Mar 10 22:30:46 2023 +0100

    duckdb-fuzzer: fix overflow in bitstring_agg

diff --git a/src/function/aggregate/distributive/bitstring_agg.cpp b/src/function/aggregate/distributive/bitstring_agg.cpp
index 2664c353d5..32db9ee1bd 100644
--- a/src/function/aggregate/distributive/bitstring_agg.cpp
+++ b/src/function/aggregate/distributive/bitstring_agg.cpp
@@ -1,11 +1,12 @@
 #include "duckdb/function/aggregate/distributive_functions.hpp"
 #include "duckdb/common/exception.hpp"
 #include "duckdb/common/types/null_value.hpp"
 #include "duckdb/common/vector_operations/aggregate_executor.hpp"
 #include "duckdb/common/types/bit.hpp"
 #include "duckdb/storage/statistics/base_statistics.hpp"
 #include "duckdb/execution/expression_executor.hpp"
 #include "duckdb/common/types/cast_helpers.hpp"
+#include "duckdb/common/operator/subtract.hpp"
 
 namespace duckdb {
 
@@ -46,106 +47,115 @@ struct BitstringAggBindData : public FunctionData {
 struct BitStringAggOperation {
 	static constexpr const idx_t MAX_BIT_RANGE = 1000000000; // for now capped at 1 billion bits
 
 	template <class STATE>
 	static void Initialize(STATE *state) {
 		state->is_set = false;
 	}
 
 	template <class INPUT_TYPE, class STATE, class OP>
 	static void Operation(STATE *state, AggregateInputData &data, INPUT_TYPE *input, ValidityMask &mask, idx_t idx) {
 		auto bind_agg_data = (BitstringAggBindData *)data.bind_data;
 		if (!state->is_set) {
 			if (bind_agg_data->min.IsNull() || bind_agg_data->max.IsNull()) {
 				throw BinderException(
 				    "Could not retrieve required statistics. Alternatively, try by providing the statistics "
 				    "explicitly: BITSTRING_AGG(col, min, max) ");
 			}
 			state->min = bind_agg_data->min.GetValue<INPUT_TYPE>();
 			state->max = bind_agg_data->max.GetValue<INPUT_TYPE>();
 			idx_t bit_range =
 			    GetRange(bind_agg_data->min.GetValue<INPUT_TYPE>(), bind_agg_data->max.GetValue<INPUT_TYPE>());
 			if (bit_range > MAX_BIT_RANGE) {
 				throw OutOfRangeException(
 				    "The range between min and max value (%s <-> %s) is too large for bitstring aggregation",
 				    NumericHelper::ToString(state->min), NumericHelper::ToString(state->max));
 			}
 			idx_t len = Bit::ComputeBitstringLen(bit_range);
 			auto target = len > string_t::INLINE_LENGTH ? string_t(new char[len], len) : string_t(len);
 			Bit::SetEmptyBitString(target, bit_range);
 
 			state->value = target;
 			state->is_set = true;
 		}
 		if (input[idx] >= state->min && input[idx] <= state->max) {
 			Execute(state, input[idx], bind_agg_data->min.GetValue<INPUT_TYPE>());
 		} else {
 			throw OutOfRangeException("Value %s is outside of provided min and max range (%s <-> %s)",
 			                          NumericHelper::ToString(input[idx]), NumericHelper::ToString(state->min),
 			                          NumericHelper::ToString(state->max));
 		}
 	}
 
 	template <class INPUT_TYPE, class STATE, class OP>
 	static void ConstantOperation(STATE *state, AggregateInputData &aggr_input_data, INPUT_TYPE *input,
 	                              ValidityMask &mask, idx_t count) {
 		OP::template Operation<INPUT_TYPE, STATE, OP>(state, aggr_input_data, input, mask, 0);
 	}
 
 	template <class INPUT_TYPE>
 	static idx_t GetRange(INPUT_TYPE min, INPUT_TYPE max) {
-		return max - min + 1;
+		D_ASSERT(max >= min);
+		INPUT_TYPE result;
+		if (!TrySubtractOperator::Operation(max, min, result)) {
+			return NumericLimits<idx_t>::Maximum();
+		}
+		idx_t val(result);
+		if (val == NumericLimits<idx_t>::Maximum()) {
+			return val;
+		}
+		return val + 1;
 	}
 
 	template <class INPUT_TYPE, class STATE>
 	static void Execute(STATE *state, INPUT_TYPE input, INPUT_TYPE min) {
 		Bit::SetBit(state->value, input - min, 1);
 	}
 
 	template <class STATE, class OP>
 	static void Combine(const STATE &source, STATE *target, AggregateInputData &) {
 		if (!source.is_set) {
 			return;
 		}
 		if (!target->is_set) {
 			Assign(target, source.value);
 			target->is_set = true;
 			target->min = source.min;
 			target->max = source.max;
 		} else {
 			Bit::BitwiseOr(source.value, target->value, target->value);
 		}
 	}
 
 	template <class INPUT_TYPE, class STATE>
 	static void Assign(STATE *state, INPUT_TYPE input) {
 		D_ASSERT(state->is_set == false);
 		if (input.IsInlined()) {
 			state->value = input;
 		} else { // non-inlined string, need to allocate space for it
 			auto len = input.GetSize();
 			auto ptr = new char[len];
 			memcpy(ptr, input.GetDataUnsafe(), len);
 			state->value = string_t(ptr, len);
 		}
 	}
 
 	template <class T, class STATE>
 	static void Finalize(Vector &result, AggregateInputData &, STATE *state, T *target, ValidityMask &mask, idx_t idx) {
 		if (!state->is_set) {
 			mask.SetInvalid(idx);
 		} else {
 			target[idx] = StringVector::AddStringOrBlob(result, state->value);
 		}
 	}
 
 	template <class STATE>
 	static void Destroy(STATE *state) {
 		if (state->is_set && !state->value.IsInlined()) {
 			delete[] state->value.GetDataUnsafe();
 		}
 	}
 
 	static bool IgnoreNull() {
 		return true;
 	}
 };
@@ -162,12 +172,15 @@ void BitStringAggOperation::Execute(BitAggState<hugeint_t> *state, hugeint_t inp
 
 template <>
 idx_t BitStringAggOperation::GetRange(hugeint_t min, hugeint_t max) {
-	idx_t val;
-	if (Hugeint::TryCast(max - min + 1, val)) {
-		return val;
-	} else {
-		throw OutOfRangeException("Range too large for bitstring aggregation");
+	hugeint_t result;
+	if (!TrySubtractOperator::Operation(max, min, result)) {
+		return NumericLimits<idx_t>::Maximum();
+	}
+	idx_t range;
+	if (!Hugeint::TryCast(result + 1, range)) {
+		return NumericLimits<idx_t>::Maximum();
 	}
+	return range;
 }
 
 unique_ptr<BaseStatistics> BitstringPropagateStats(ClientContext &context, BoundAggregateExpression &expr,
diff --git a/test/fuzzer/sqlsmith/bitstring_agg_overflow.test b/test/fuzzer/sqlsmith/bitstring_agg_overflow.test
new file mode 100644
index 0000000000..ec78171b4d
--- /dev/null
+++ b/test/fuzzer/sqlsmith/bitstring_agg_overflow.test
@@ -0,0 +1,35 @@
+# name: test/fuzzer/sqlsmith/bitstring_agg_overflow.test
+# description: bitstring_agg overflow
+# group: [sqlsmith]
+
+foreach type utinyint usmallint uinteger ubigint smallint integer bigint hugeint
+
+statement ok
+CREATE OR REPLACE TABLE integers(i ${type});
+
+statement ok
+INSERT INTO integers VALUES (0), (255);
+
+statement ok
+SELECT bitstring_agg(i) FROM integers
+
+endloop
+
+statement ok
+CREATE TABLE all_types AS FROM test_all_types();
+
+foreach small_type utinyint usmallint
+
+statement ok
+SELECT bitstring_agg("${small_type}") FROM all_types;
+
+endloop
+
+foreach type tinyint smallint int uint ubigint bigint hugeint
+
+statement error
+SELECT bitstring_agg("${type}") FROM all_types;
+----
+too large for bitstring aggregation
+
+endloop
