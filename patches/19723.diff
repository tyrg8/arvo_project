commit 7a74abcd7b574109d8ad29b0dd5583f3963a6939
Author: Dan Bloomberg <dan.bloomberg@gmail.com>
Date:   Sat Dec 28 12:21:23 2019 -0800

    More sanity-checking restrictions on input data in bmp files

diff --git a/src/bmpio.c b/src/bmpio.c
index e5da860..71245ce 100644
--- a/src/bmpio.c
+++ b/src/bmpio.c
@@ -91,37 +91,37 @@ size_t    size;
 PIX      *pix;
 
     PROCNAME("pixReadStreamBmp");
 
     if (!fp)
         return (PIX *)ERROR_PTR("fp not defined", procName, NULL);
 
         /* Read data from file and decode into Y,U,V arrays */
     rewind(fp);
     if ((data = l_binaryReadStream(fp, &size)) == NULL)
         return (PIX *)ERROR_PTR("data not read", procName, NULL);
 
     pix = pixReadMemBmp(data, size);
     LEPT_FREE(data);
     return pix;
 }
 
 
 /*!
  * \brief   pixReadMemBmp()
  *
  * \param[in]    cdata    bmp data
  * \param[in]    size     number of bytes of bmp-formatted data
  * \return  pix, or NULL on error
  *
  * <pre>
  * Notes:
  *      (1) The BMP file is organized as follows:
  *          * 14 byte fileheader
- *          * variable size infoheader, from 40 to 124 bytes.  We only use
- *            data in he first 40 bytes.
- *          * an optional colormap, with size 4 * ncolors (in bytes)
- *          * the image data
+ *          * Variable size infoheader: 40, 108 or 124 bytes.
+ *            We only use data in he first 40 bytes.
+ *          * Optional colormap, with size 4 * ncolors (in bytes)
+ *          * Image data
  *      (2) 2 bpp bmp files are not valid in the original spec, but they
  *          are valid in later versions.
  * </pre>
  */
@@ -133,7 +133,7 @@ l_uint8    pel[4];
 l_uint8   *cmapBuf, *fdata, *data;
 l_int16    bftype, depth, d;
 l_int32    offset, ihbytes, width, height, height_neg, xres, yres;
-l_int32    compression, imagebytes, cmapbytes, ncolors, maxcolors;
+l_int32    compression, imagebytes, fdatabytes, cmapbytes, ncolors, maxcolors;
 l_int32    fdatabpl, extrabytes, pixWpl, pixBpl, i, j, k;
 l_uint32  *line, *pixdata, *pword;
 l_int64    npixels;
@@ -148,238 +148,249 @@ PIX       *pix, *pix1;
 PIXCMAP   *cmap;
 
     PROCNAME("pixReadMemBmp");
 
     if (!cdata)
         return (PIX *)ERROR_PTR("cdata not defined", procName, NULL);
     if (size < sizeof(BMP_FH) + sizeof(BMP_IH))
         return (PIX *)ERROR_PTR("bmf size error", procName, NULL);
 
         /* Verify this is an uncompressed bmp */
     bmpfh = (BMP_FH *)cdata;
     bftype = bmpfh->bfType[0] + ((l_int32)bmpfh->bfType[1] << 8);
     if (bftype != BMP_ID)
         return (PIX *)ERROR_PTR("not bmf format", procName, NULL);
 #if defined(__GNUC__)
     bmph = (BMP_HEADER *)bmpfh;
 #else
     bmpih = (BMP_IH *)(cdata + BMP_FHBYTES);
 #endif
     compression = convertOnBigEnd32(bmpih->biCompression);
     if (compression != 0)
         return (PIX *)ERROR_PTR("cannot read compressed BMP files",
                                 procName, NULL);
 
         /* Find the offset from the beginning of the file to the image data */
     offset = bmpfh->bfOffBits[0];
     offset += (l_int32)bmpfh->bfOffBits[1] << 8;
     offset += (l_int32)bmpfh->bfOffBits[2] << 16;
     offset += (l_uint32)bmpfh->bfOffBits[3] << 24;
 
         /* Read the remaining useful data in the infoheader.
          * Note that the first 4 bytes give the infoheader size. */
     ihbytes = convertOnBigEnd32(*(l_uint32 *)(bmpih));
     width = convertOnBigEnd32(bmpih->biWidth);
     height = convertOnBigEnd32(bmpih->biHeight);
     depth = convertOnBigEnd16(bmpih->biBitCount);
     imagebytes = convertOnBigEnd32(bmpih->biSizeImage);
     xres = convertOnBigEnd32(bmpih->biXPelsPerMeter);
     yres = convertOnBigEnd32(bmpih->biYPelsPerMeter);
 
         /* Some sanity checking.  We impose limits on the image
          * dimensions, resolution and number of pixels.  We make sure the
          * file is the correct size to hold the amount of uncompressed data
          * that is specified in the header.  The number of colormap
          * entries is checked: it can be either 0 (no cmap) or some
          * number between 2 and 256.
          * Note that the imagebytes for uncompressed images is either
          * 0 or the size of the file data.  (The fact that it can
          * be 0 is perhaps some legacy glitch). */
     if (width < 1)
         return (PIX *)ERROR_PTR("width < 1", procName, NULL);
     if (width > L_MAX_ALLOWED_WIDTH)
         return (PIX *)ERROR_PTR("width too large", procName, NULL);
     if (height == 0 || height < -L_MAX_ALLOWED_HEIGHT ||
         height > L_MAX_ALLOWED_HEIGHT)
         return (PIX *)ERROR_PTR("invalid height", procName, NULL);
     if (xres < 0 || xres > L_MAX_ALLOWED_RES ||
         yres < 0 || yres > L_MAX_ALLOWED_RES)
         return (PIX *)ERROR_PTR("invalid resolution", procName, NULL);
     height_neg = 0;
     if (height < 0) {
         height_neg = 1;
         height = -height;
     }
+    if (ihbytes != 40 && ihbytes != 108 && ihbytes != 124) {
+        L_ERROR("invalid ihbytes = %d; not in {40, 108, 124}\n",
+                procName, ihbytes);
+        return NULL;
+    }
     npixels = 1LL * width * height;
     if (npixels > L_MAX_ALLOWED_PIXELS)
         return (PIX *)ERROR_PTR("npixels too large", procName, NULL);
     if (depth != 1 && depth != 2 && depth != 4 && depth != 8 &&
-        depth != 16 && depth != 24 && depth != 32)
-        return (PIX *)ERROR_PTR("depth not in {1, 2, 4, 8, 16, 24, 32}",
-                                procName,NULL);
+        depth != 16 && depth != 24 && depth != 32) {
+        L_ERROR("invalid depth = %d; not in {1, 2, 4, 8, 16, 24, 32}\n",
+                procName, depth);
+        return NULL;
+    }
     fdatabpl = 4 * ((1LL * width * depth + 31)/32);
-    if (imagebytes != 0 && imagebytes != fdatabpl * height)
-        return (PIX *)ERROR_PTR("invalid imagebytes", procName, NULL);
+    fdatabytes = fdatabpl * height;
+    if (imagebytes != 0 && imagebytes != fdatabytes) {
+        L_ERROR("invalid imagebytes = %d; not equal to fdatabytes = %d\n",
+                procName, imagebytes, fdatabytes);
+        return NULL;
+    }
 
         /* In the original spec, BITMAPINFOHEADER is 40 bytes.
          * There have been a number of revisions, to capture more information.
          * For example, the fifth version, BITMAPV5HEADER, adds 84 bytes
          * of ICC color profiles.  We use the size of the infoheader
          * to accommodate these newer formats. */
     cmapbytes = offset - BMP_FHBYTES - ihbytes;
     ncolors = cmapbytes / sizeof(RGBA_QUAD);
     if (ncolors < 0 || ncolors == 1)
         return (PIX *)ERROR_PTR("invalid: cmap size < 0 or 1", procName, NULL);
     if (ncolors > 0 && depth > 8)
         return (PIX *)ERROR_PTR("can't have cmap for d > 8", procName, NULL);
     maxcolors = (depth <= 8) ? 1 << depth : 256;
     if (ncolors > maxcolors) {
-        L_ERROR("cmap too large for depth: ncolors = %d > maxcolors = %d\n",
-                procName, ncolors, maxcolors);
+        L_ERROR("cmap too large for depth %d: ncolors = %d > maxcolors = %d\n",
+                procName, depth, ncolors, maxcolors);
         return NULL;
     }
-    if (size != 1LL * offset + 1LL * fdatabpl * height)
+    if (size != 1LL * offset + 1LL * fdatabytes)
         return (PIX *)ERROR_PTR("size incommensurate with image data",
                                 procName,NULL);
 
         /* Handle the colormap */
     cmapBuf = NULL;
     if (ncolors > 0) {
         if ((cmapBuf = (l_uint8 *)LEPT_CALLOC(ncolors, sizeof(RGBA_QUAD)))
                  == NULL)
             return (PIX *)ERROR_PTR("cmapBuf alloc fail", procName, NULL );
 
             /* Read the colormap entry data from bmp. The RGBA_QUAD colormap
              * entries are used for both bmp and leptonica colormaps. */
         memcpy(cmapBuf, cdata + BMP_FHBYTES + ihbytes,
-               sizeof(RGBA_QUAD) * ncolors);
+               ncolors * sizeof(RGBA_QUAD));
     }
 
         /* Make a 32 bpp pix if depth is 24 bpp */
     d = (depth == 24) ? 32 : depth;
     if ((pix = pixCreate(width, height, d)) == NULL) {
         LEPT_FREE(cmapBuf);
         return (PIX *)ERROR_PTR( "pix not made", procName, NULL);
     }
     pixSetXRes(pix, (l_int32)((l_float32)xres / 39.37 + 0.5));  /* to ppi */
     pixSetYRes(pix, (l_int32)((l_float32)yres / 39.37 + 0.5));  /* to ppi */
     pixSetInputFormat(pix, IFF_BMP);
     pixWpl = pixGetWpl(pix);
     pixBpl = 4 * pixWpl;
 
         /* Convert the bmp colormap to a pixcmap */
     cmap = NULL;
     if (ncolors > 0) {  /* import the colormap to the pix cmap */
         cmap = pixcmapCreate(L_MIN(d, 8));
         LEPT_FREE(cmap->array);  /* remove generated cmap array */
         cmap->array  = (void *)cmapBuf;  /* and replace */
         cmap->n = L_MIN(ncolors, 256);
         for (i = 0; i < cmap->n; i++)   /* set all colors opaque */
             pixcmapSetAlpha (cmap, i, 255);
     }
     pixSetColormap(pix, cmap);
 
         /* Acquire the image data.  Image origin for bmp is at lower right. */
     fdata = (l_uint8 *)cdata + offset;  /* start of the bmp image data */
     pixdata = pixGetData(pix);
     if (depth != 24) {  /* typ. 1 or 8 bpp */
         data = (l_uint8 *)pixdata + pixBpl * (height - 1);
         for (i = 0; i < height; i++) {
             memcpy(data, fdata, fdatabpl);
             fdata += fdatabpl;
             data -= pixBpl;
         }
     } else {  /*  24 bpp file; 32 bpp pix
              *  Note: for bmp files, pel[0] is blue, pel[1] is green,
              *  and pel[2] is red.  This is opposite to the storage
              *  in the pix, which puts the red pixel in the 0 byte,
              *  the green in the 1 byte and the blue in the 2 byte.
              *  Note also that all words are endian flipped after
              *  assignment on L_LITTLE_ENDIAN platforms.
              *
              *  We can then make these assignments for little endians:
              *      SET_DATA_BYTE(pword, 1, pel[0]);      blue
              *      SET_DATA_BYTE(pword, 2, pel[1]);      green
              *      SET_DATA_BYTE(pword, 3, pel[2]);      red
              *  This looks like:
              *          3  (R)     2  (G)        1  (B)        0
              *      |-----------|------------|-----------|-----------|
              *  and after byte flipping:
              *           3          2  (B)     1  (G)        0  (R)
              *      |-----------|------------|-----------|-----------|
              *
              *  For big endians we set:
              *      SET_DATA_BYTE(pword, 2, pel[0]);      blue
              *      SET_DATA_BYTE(pword, 1, pel[1]);      green
              *      SET_DATA_BYTE(pword, 0, pel[2]);      red
              *  This looks like:
              *          0  (R)     1  (G)        2  (B)        3
              *      |-----------|------------|-----------|-----------|
              *  so in both cases we get the correct assignment in the PIX.
              *
              *  Can we do a platform-independent assignment?
              *  Yes, set the bytes without using macros:
              *      *((l_uint8 *)pword) = pel[2];           red
              *      *((l_uint8 *)pword + 1) = pel[1];       green
              *      *((l_uint8 *)pword + 2) = pel[0];       blue
              *  For little endians, before flipping, this looks again like:
              *          3  (R)     2  (G)        1  (B)        0
              *      |-----------|------------|-----------|-----------|
              */
         extrabytes = fdatabpl - 3 * width;
         line = pixdata + pixWpl * (height - 1);
         for (i = 0; i < height; i++) {
             for (j = 0; j < width; j++) {
                 pword = line + j;
                 memcpy(&pel, fdata, 3);
                 fdata += 3;
                 *((l_uint8 *)pword + COLOR_RED) = pel[2];
                 *((l_uint8 *)pword + COLOR_GREEN) = pel[1];
                 *((l_uint8 *)pword + COLOR_BLUE) = pel[0];
                     /* should not use alpha byte, but for buggy readers,
                      * set it to opaque  */
                 *((l_uint8 *)pword + L_ALPHA_CHANNEL) = 255;
             }
             if (extrabytes) {
                 for (k = 0; k < extrabytes; k++) {
                     memcpy(&pel, fdata, 1);
                     fdata++;
                 }
             }
             line -= pixWpl;
         }
     }
 
     pixEndianByteSwap(pix);
     if (height_neg)
         pixFlipTB(pix, pix);
 
         /* ----------------------------------------------
          * The bmp colormap determines the values of black
          * and white pixels for binary in the following way:
          * (a) white = 0 [255], black = 1 [0]
          *      255, 255, 255, 255, 0, 0, 0, 255
          * (b) black = 0 [0], white = 1 [255]
          *      0, 0, 0, 255, 255, 255, 255, 255
          * We have no need for a 1 bpp pix with a colormap!
          * Note: the alpha component here is 255 (opaque)
          * ---------------------------------------------- */
     if (depth == 1 && cmap) {
         pix1 = pixRemoveColormap(pix, REMOVE_CMAP_TO_BINARY);
         pixDestroy(&pix);
         pix = pix1;  /* rename */
     }
 
     return pix;
 }
 
 
 /*--------------------------------------------------------------*
  *                            Write bmp                         *
  *--------------------------------------------------------------*/
 /*!
  * \brief   pixWriteStreamBmp()
  *
  * \param[in]    fp     file stream
  * \param[in]    pix    all depths
  * \return  0 if OK, 1 on error
  */
