commit a7f3f3c08a2a90c2cac47e780d44bf100f88c7c6
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Fri Mar 2 12:24:39 2018 +0000

    AVCE00: fix null pointer dereference. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6658. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@41593 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/ogr/ogrsf_frmts/avc/avc_e00parse.cpp b/gdal/ogr/ogrsf_frmts/avc/avc_e00parse.cpp
index 6649fb0c74..4fe0d8cd28 100644
--- a/gdal/ogr/ogrsf_frmts/avc/avc_e00parse.cpp
+++ b/gdal/ogr/ogrsf_frmts/avc/avc_e00parse.cpp
@@ -1834,176 +1834,184 @@ AVCRxp   *AVCE00ParseNextRxpLine(AVCE00ParseInfo *psInfo, const char *pszLine)
 /**********************************************************************
  *                          AVCE00ParseNextTableDefLine()
  *
  * Take the next line of E00 input for an TableDef object and parse it.
  *
  * Returns nullptr if the current object is not complete yet (expecting
  * more lines of input) or a reference to a complete object if it
  * is complete.
  *
  * The returned object is a reference to an internal data structure.
  * It should not be modified or freed by the caller.
  *
  * If the input is invalid or other problems happen, then a CPLError()
  * will be generated.  CPLGetLastErrorNo() should be called to check
  * that the line was parsed successfully.
  **********************************************************************/
 AVCTableDef   *AVCE00ParseNextTableDefLine(AVCE00ParseInfo *psInfo,
                                            const char *pszLine)
 {
     AVCTableDef *psTableDef;
     size_t   nLen;
 
     CPLAssert(psInfo->eFileType == AVCFileTABLE);
 
     psTableDef = psInfo->hdr.psTableDef;  /* May be nullptr on first call */
 
     nLen = strlen(pszLine);
 
     if (psInfo->numItems == 0)
     {
         /*-------------------------------------------------------------
          * Begin processing a new TableDef.  Read header line:
          *    TableName, extFlag, numFields, RecSize, numRecords
          *------------------------------------------------------------*/
         if (nLen < 56)
         {
             CPLError(CE_Failure, CPLE_AppDefined,
                      "Error parsing E00 Table Definition line: \"%s\"",
                      pszLine);
             return nullptr;
         }
         else
         {
             /*---------------------------------------------------------
              * Parse header line and alloc and init. a new psTableDef struct
              *--------------------------------------------------------*/
             psTableDef = psInfo->hdr.psTableDef =
                                (AVCTableDef*)CPLCalloc(1, sizeof(AVCTableDef));
             psInfo->bTableHdrComplete = FALSE;
 
             strncpy(psTableDef->szTableName, pszLine, 32);
             psTableDef->szTableName[32] = '\0';
             strncpy(psTableDef->szExternal, pszLine+32, 2);
             psTableDef->szExternal[2] = '\0';
 
             psTableDef->numFields  = (GInt16)AVCE00Str2Int(pszLine+34, 4);
             psTableDef->nRecSize   = (GInt16)AVCE00Str2Int(pszLine+42, 4);
             psTableDef->numRecords = AVCE00Str2Int(pszLine+46, 10);
+            if( psTableDef->numFields < 0 || psTableDef->numFields > 10 * 1024 )
+            {
+                CPLError(CE_Failure, CPLE_AppDefined,
+                        "Error parsing E00 Table Definition line: \"%s\"", pszLine);
+                psInfo->numItems = psInfo->iCurItem = 0;
+                psTableDef->numFields = 0;
+                return nullptr;
+            }
 
             /*---------------------------------------------------------
              * Alloc array of fields defs, will be filled in further calls
              *--------------------------------------------------------*/
             psTableDef->pasFieldDef =
                     (AVCFieldInfo*)CPLCalloc(psTableDef->numFields,
                                              sizeof(AVCFieldInfo));
 
             /*---------------------------------------------------------
              * psInfo->iCurItem is the index of the last field def we read.
              * psInfo->numItems is the number of field defs to read,
              *                     including deleted ones.
              *--------------------------------------------------------*/
             psInfo->numItems = AVCE00Str2Int(pszLine+38, 4);
             psInfo->iCurItem = 0;
             psInfo->nCurObjectId = 0;  /* We'll use it as a field index */
         }
     }
     else if (psInfo->iCurItem < psInfo->numItems && nLen >= 69 )
     {
         /*-------------------------------------------------------------
          * Read an attribute field definition
          * If field index is -1, then we ignore this line... we do not
          * even count it in psInfo->iCurItem.
          *------------------------------------------------------------*/
         int nIndex;
 
         nIndex = AVCE00Str2Int(pszLine + 65, 4);
 
         if (nIndex > 0 && psInfo->nCurObjectId >= psTableDef->numFields)
         {
             CPLError(CE_Failure, CPLE_AppDefined,
                      "Error parsing E00 INFO Table Header: "
                      "number of fields is invalid "
                      "(expected %d, got at least %d)",
                      psTableDef->numFields, psInfo->nCurObjectId+1);
             psInfo->numItems = psInfo->iCurItem = psInfo->nCurObjectId;
             return nullptr;
         }
 
         if (nIndex > 0)
         {
             AVCFieldInfo *psDef;
             psDef = &(psTableDef->pasFieldDef[psInfo->iCurItem]);
 
             psDef->nIndex   = (GInt16)nIndex;
 
             strncpy(psDef->szName, pszLine, 16);
             psDef->szName[16] = '\0';
 
             psDef->nSize    = (GInt16)AVCE00Str2Int(pszLine + 16, 3);
             psDef->v2       = (GInt16)AVCE00Str2Int(pszLine + 19, 2);
 
             psDef->nOffset  = (GInt16)AVCE00Str2Int(pszLine + 21, 4);
 
             psDef->v4       = (GInt16)AVCE00Str2Int(pszLine + 25, 1);
             psDef->v5       = (GInt16)AVCE00Str2Int(pszLine + 26, 2);
             psDef->nFmtWidth= (GInt16)AVCE00Str2Int(pszLine + 28, 4);
             psDef->nFmtPrec = (GInt16)AVCE00Str2Int(pszLine + 32, 2);
             psDef->nType1   = (GInt16)AVCE00Str2Int(pszLine + 34, 3)/10;
             psDef->nType2   = AVCE00Str2Int(pszLine + 34, 3)%10;
             psDef->v10      = (GInt16)AVCE00Str2Int(pszLine + 37, 2);
             psDef->v11      = (GInt16)AVCE00Str2Int(pszLine + 39, 4);
             psDef->v12      = (GInt16)AVCE00Str2Int(pszLine + 43, 4);
             psDef->v13      = (GInt16)AVCE00Str2Int(pszLine + 47, 2);
 
             strncpy(psDef->szAltName, pszLine+49, 16);
             psDef->szAltName[16] = '\0';
 
             psInfo->nCurObjectId++;
         }
         psInfo->iCurItem++;
     }
     else
     {
         CPLError(CE_Failure, CPLE_AppDefined,
                  "Error parsing E00 Table Definition line: \"%s\"", pszLine);
         psInfo->numItems = psInfo->iCurItem = 0;
         return nullptr;
     }
 
     /*-----------------------------------------------------------------
      * If we're done parsing this TableDef, then reset the ParseInfo,
      * and return a reference to the TableDef structure.
      * Next calls should go to AVCE00ParseNextTableRecLine() to
      * read data records.
      * Otherwise return nullptr, which means that we are expecting more
      * more lines of input.
      *----------------------------------------------------------------*/
     if (psInfo->iCurItem >= psInfo->numItems)
     {
         psInfo->numItems = psInfo->iCurItem = 0;
         psInfo->nCurObjectId = 0;
 
         psInfo->bTableHdrComplete = TRUE;
 
         /*---------------------------------------------------------
          * It is possible to have a table with 0 records... in this
          * case we are already at the end of the section for that table.
          *--------------------------------------------------------*/
         if (psTableDef->numRecords == 0)
             psInfo->bForceEndOfSection = TRUE;
 
         return psTableDef;
     }
 
     return nullptr;
 }
 
 /**********************************************************************
  *                         _AVCE00ParseTableRecord()
  *
  * Parse the record data present inside psInfo->pszBuf and fill and
  * return the psInfo->cur.pasFields[].
  *
  * This function should not be called directly... it is used by
  * AVCE00ParseNextTableRecLine().
  **********************************************************************/
