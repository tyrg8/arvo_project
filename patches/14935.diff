commit 94c6198a1bb93fa6cd209085b817c1e64272abb4
Author: Randy <randy408@protonmail.com>
Date:   Mon Jun 10 20:38:56 2019 +0200

    decode: check for zero-length eXIf

diff --git a/spng.c b/spng.c
index a99154f..facfa0e 100644
--- a/spng.c
+++ b/spng.c
@@ -574,492 +574,494 @@ static int chunk_fits_in_cache(spng_ctx *ctx, size_t *new_usage)
 /*
     Read and validate all critical and relevant ancillary chunks up to the first IDAT
     Returns zero and sets ctx->first_idat on success
 */
 static int get_ancillary_data_first_idat(spng_ctx *ctx)
 {
     if(ctx == NULL) return 1;
     if(ctx->data == NULL) return 1;
     if(!ctx->valid_state) return SPNG_EBADSTATE;
 
     int ret, discard;
     unsigned char *data;
     struct spng_chunk chunk;
 
     chunk.offset = 8;
     chunk.length = 13;
     size_t sizeof_sig_ihdr = 29;
 
     ret = read_data(ctx, sizeof_sig_ihdr);
     if(ret) return ret;
 
     data = ctx->data;
 
     uint8_t signature[8] = { 137, 80, 78, 71, 13, 10, 26, 10 };
     if(memcmp(data, signature, sizeof(signature))) return SPNG_ESIGNATURE;
 
     chunk.length = read_u32(data + 8);
     memcpy(&chunk.type, data + 12, 4);
 
     if(chunk.length != 13) return SPNG_EIHDR_SIZE;
     if(memcmp(chunk.type, type_ihdr, 4)) return SPNG_ENOIHDR;
 
     ctx->cur_actual_crc = crc32(0, NULL, 0);
     ctx->cur_actual_crc = crc32(ctx->cur_actual_crc, data + 12, 17);
 
     ctx->ihdr.width = read_u32(data + 16);
     ctx->ihdr.height = read_u32(data + 20);
     memcpy(&ctx->ihdr.bit_depth, data + 24, 1);
     memcpy(&ctx->ihdr.color_type, data + 25, 1);
     memcpy(&ctx->ihdr.compression_method, data + 26, 1);
     memcpy(&ctx->ihdr.filter_method, data + 27, 1);
     memcpy(&ctx->ihdr.interlace_method, data + 28, 1);
 
     if(!ctx->max_width) ctx->max_width = png_u32max;
     if(!ctx->max_height) ctx->max_height = png_u32max;
 
     ret = check_ihdr(&ctx->ihdr, ctx->max_width, ctx->max_height);
     if(ret) return ret;
 
     ctx->file_ihdr = 1;
     ctx->stored |= SPNG_CHUNK_IHDR;
 
     while( !(ret = read_header(ctx, &discard)))
     {
         memcpy(&chunk, &ctx->current_chunk, sizeof(struct spng_chunk));
 
         if(!memcmp(chunk.type, type_idat, 4))
         {
             memcpy(&ctx->first_idat, &chunk, sizeof(struct spng_chunk));
             return 0;
         }        
 
         if(!chunk_fits_in_cache(ctx, &ctx->chunk_cache_usage))
         { 
             ret = discard_chunk_bytes(ctx, chunk.length);
             if(ret) return ret;
             continue;
         }
 
         data = ctx->data;
 
         ret = read_chunk_bytes(ctx, chunk.length);
         if(ret) return ret;
 
         /* Reserved bit must be zero */
         if( (chunk.type[2] & (1 << 5)) != 0) return SPNG_ECHUNK_TYPE;
         /* Ignore private chunks */
         if( (chunk.type[1] & (1 << 5)) != 0) continue;
 
         if(is_critical_chunk(&chunk)) /* Critical chunk */
         {
             if(!memcmp(chunk.type, type_plte, 4))
             {
                 if(chunk.length == 0) return SPNG_ECHUNK_SIZE;
                 if(chunk.length % 3 != 0) return SPNG_ECHUNK_SIZE;
                 if( (chunk.length / 3) > 256 ) return SPNG_ECHUNK_SIZE;
 
                 if(ctx->ihdr.color_type == 3)
                 {
                     if(chunk.length / 3 > (1 << ctx->ihdr.bit_depth) ) return SPNG_ECHUNK_SIZE;
                 }
 
                 ctx->plte.n_entries = chunk.length / 3;
 
                 size_t i;
                 for(i=0; i < ctx->plte.n_entries; i++)
                 {
                     memcpy(&ctx->plte.entries[i].red,   data + i * 3, 1);
                     memcpy(&ctx->plte.entries[i].green, data + i * 3 + 1, 1);
                     memcpy(&ctx->plte.entries[i].blue,  data + i * 3 + 2, 1);
                 }
 
                 ctx->plte_offset = chunk.offset;
 
                 ctx->file_plte = 1;
             }
             else if(!memcmp(chunk.type, type_iend, 4)) return SPNG_ECHUNK_POS;
             else if(!memcmp(chunk.type, type_ihdr, 4)) return SPNG_ECHUNK_POS;
             else return SPNG_ECHUNK_UNKNOWN_CRITICAL;
         }
         else if(!memcmp(chunk.type, type_chrm, 4)) /* Ancillary chunks */
         {
             if(ctx->file_plte && chunk.offset > ctx->plte_offset) return SPNG_ECHUNK_POS;
             if(ctx->file_chrm) return SPNG_EDUP_CHRM;
 
             if(chunk.length != 32) return SPNG_ECHUNK_SIZE;
 
             ctx->chrm_int.white_point_x = read_u32(data);
             ctx->chrm_int.white_point_y = read_u32(data + 4);
             ctx->chrm_int.red_x = read_u32(data + 8);
             ctx->chrm_int.red_y = read_u32(data + 12);
             ctx->chrm_int.green_x = read_u32(data + 16);
             ctx->chrm_int.green_y = read_u32(data + 20);
             ctx->chrm_int.blue_x = read_u32(data + 24);
             ctx->chrm_int.blue_y = read_u32(data + 28);
 
             if(check_chrm_int(&ctx->chrm_int)) return SPNG_ECHRM;
 
             ctx->file_chrm = 1;
             ctx->stored |= SPNG_CHUNK_CHRM;
         }
         else if(!memcmp(chunk.type, type_gama, 4))
         {
             if(ctx->file_plte && chunk.offset > ctx->plte_offset) return SPNG_ECHUNK_POS;
             if(ctx->file_gama) return SPNG_EDUP_GAMA;
 
             if(chunk.length != 4) return SPNG_ECHUNK_SIZE;
 
             ctx->gama = read_u32(data);
 
             if(!ctx->gama) return SPNG_EGAMA;
             if(ctx->gama > png_u32max) return SPNG_EGAMA;
 
             ctx->file_gama = 1;
             ctx->stored |= SPNG_CHUNK_GAMA;
         }
         else if(!memcmp(chunk.type, type_iccp, 4))
         {
             if(ctx->file_plte && chunk.offset > ctx->plte_offset) return SPNG_ECHUNK_POS;
             if(ctx->file_iccp) return SPNG_EDUP_ICCP;
             if(!chunk.length) return SPNG_ECHUNK_SIZE;
 
             continue; /* XXX: https://gitlab.com/randy408/libspng/issues/31 */
         }
         else if(!memcmp(chunk.type, type_sbit, 4))
         {
             if(ctx->file_plte && chunk.offset > ctx->plte_offset) return SPNG_ECHUNK_POS;
             if(ctx->file_sbit) return SPNG_EDUP_SBIT;
 
             if(ctx->ihdr.color_type == 0)
             {
                 if(chunk.length != 1) return SPNG_ECHUNK_SIZE;
 
                 memcpy(&ctx->sbit.grayscale_bits, data, 1);
             }
             else if(ctx->ihdr.color_type == 2 || ctx->ihdr.color_type == 3)
             {
                 if(chunk.length != 3) return SPNG_ECHUNK_SIZE;
 
                 memcpy(&ctx->sbit.red_bits, data, 1);
                 memcpy(&ctx->sbit.green_bits, data + 1 , 1);
                 memcpy(&ctx->sbit.blue_bits, data + 2, 1);
             }
             else if(ctx->ihdr.color_type == 4)
             {
                 if(chunk.length != 2) return SPNG_ECHUNK_SIZE;
 
                 memcpy(&ctx->sbit.grayscale_bits, data, 1);
                 memcpy(&ctx->sbit.alpha_bits, data + 1, 1);
             }
             else if(ctx->ihdr.color_type == 6)
             {
                 if(chunk.length != 4) return SPNG_ECHUNK_SIZE;
 
                 memcpy(&ctx->sbit.red_bits, data, 1);
                 memcpy(&ctx->sbit.green_bits, data + 1, 1);
                 memcpy(&ctx->sbit.blue_bits, data + 2, 1);
                 memcpy(&ctx->sbit.alpha_bits, data + 3, 1);
             }
 
             if(check_sbit(&ctx->sbit, &ctx->ihdr)) return SPNG_ESBIT;
 
             ctx->file_sbit = 1;
             ctx->stored |= SPNG_CHUNK_SBIT;
         }
         else if(!memcmp(chunk.type, type_srgb, 4))
         {
             if(ctx->file_plte && chunk.offset > ctx->plte_offset) return SPNG_ECHUNK_POS;
             if(ctx->file_srgb) return SPNG_EDUP_SRGB;
 
             if(chunk.length != 1) return SPNG_ECHUNK_SIZE;
 
             memcpy(&ctx->srgb_rendering_intent, data, 1);
 
             if(ctx->srgb_rendering_intent > 3) return SPNG_ESRGB;
 
             ctx->file_srgb = 1;
             ctx->stored |= SPNG_CHUNK_SRGB;
         }
         else if(!memcmp(chunk.type, type_bkgd, 4))
         {
             if(ctx->file_plte && chunk.offset < ctx->plte_offset) return SPNG_ECHUNK_POS;
             if(ctx->file_bkgd) return SPNG_EDUP_BKGD;
 
             uint16_t mask = ~0;
             if(ctx->ihdr.bit_depth < 16) mask = (1 << ctx->ihdr.bit_depth) - 1;
 
             if(ctx->ihdr.color_type == 0 || ctx->ihdr.color_type == 4)
             {
                 if(chunk.length != 2) return SPNG_ECHUNK_SIZE;
 
                 ctx->bkgd.gray = read_u16(data) & mask;
             }
             else if(ctx->ihdr.color_type == 2 || ctx->ihdr.color_type == 6)
             {
                 if(chunk.length != 6) return SPNG_ECHUNK_SIZE;
 
                 ctx->bkgd.red = read_u16(data) & mask;
                 ctx->bkgd.green = read_u16(data + 2) & mask;
                 ctx->bkgd.blue = read_u16(data + 4) & mask;
             }
             else if(ctx->ihdr.color_type == 3)
             {
                 if(chunk.length != 1) return SPNG_ECHUNK_SIZE;
                 if(!ctx->file_plte) return SPNG_EBKGD_NO_PLTE;
 
                 memcpy(&ctx->bkgd.plte_index, data, 1);
                 if(ctx->bkgd.plte_index >= ctx->plte.n_entries) return SPNG_EBKGD_PLTE_IDX;
             }
 
             ctx->file_bkgd = 1;
             ctx->stored |= SPNG_CHUNK_BKGD;
         }
         else if(!memcmp(chunk.type, type_trns, 4))
         {
             if(ctx->file_plte && chunk.offset < ctx->plte_offset) return SPNG_ECHUNK_POS;
             if(ctx->file_trns) return SPNG_EDUP_TRNS;
             if(!chunk.length) return SPNG_ECHUNK_SIZE;
 
             uint16_t mask = ~0;
             if(ctx->ihdr.bit_depth < 16) mask = (1 << ctx->ihdr.bit_depth) - 1;
 
             if(ctx->ihdr.color_type == 0)
             {
                 if(chunk.length != 2) return SPNG_ECHUNK_SIZE;
 
                 ctx->trns.gray = read_u16(data) & mask;
             }
             else if(ctx->ihdr.color_type == 2)
             {
                 if(chunk.length != 6) return SPNG_ECHUNK_SIZE;
 
                 ctx->trns.red = read_u16(data) & mask;
                 ctx->trns.green = read_u16(data + 2) & mask;
                 ctx->trns.blue = read_u16(data + 4) & mask;
             }
             else if(ctx->ihdr.color_type == 3)
             {
                 if(chunk.length > ctx->plte.n_entries) return SPNG_ECHUNK_SIZE;
                 if(!ctx->file_plte) return SPNG_ETRNS_NO_PLTE;
 
                 size_t k;
                 for(k=0; k < chunk.length; k++)
                 {
                     memcpy(&ctx->trns.type3_alpha[k], data + k, 1);
                 }
                 ctx->trns.n_type3_entries = chunk.length;
             }
             else return SPNG_ETRNS_COLOR_TYPE;
 
             ctx->file_trns = 1;
             ctx->stored |= SPNG_CHUNK_TRNS;
         }
         else if(!memcmp(chunk.type, type_hist, 4))
         {
             if(!ctx->file_plte) return SPNG_EHIST_NO_PLTE;
             if(chunk.offset < ctx->plte_offset) return SPNG_ECHUNK_POS;
             if(ctx->file_hist) return SPNG_EDUP_HIST;
 
             if( (chunk.length / 2) != (ctx->plte.n_entries) ) return SPNG_ECHUNK_SIZE;
 
             size_t k;
             for(k=0; k < (chunk.length / 2); k++)
             {
                 ctx->hist.frequency[k] = read_u16(data + k*2);
             }
 
             ctx->file_hist = 1;
             ctx->stored |= SPNG_CHUNK_HIST;
         }
         else if(!memcmp(chunk.type, type_phys, 4))
         {
             if(ctx->file_phys) return SPNG_EDUP_PHYS;
 
             if(chunk.length != 9) return SPNG_ECHUNK_SIZE;
 
             ctx->phys.ppu_x = read_u32(data);
             ctx->phys.ppu_y = read_u32(data + 4);
             memcpy(&ctx->phys.unit_specifier, data + 8, 1);
 
             if(check_phys(&ctx->phys)) return SPNG_EPHYS;
 
             ctx->file_phys = 1;
             ctx->stored |= SPNG_CHUNK_PHYS;
         }
         else if(!memcmp(chunk.type, type_splt, 4))
         {
             if(ctx->user_splt) continue; /* XXX: should check profile names for uniqueness */
             if(!chunk.length) return SPNG_ECHUNK_SIZE;
 
             ctx->file_splt = 1;
 
             if( !(ctx->stored & SPNG_CHUNK_SPLT) )
             {
                 ctx->n_splt = 1;
                 ctx->splt_list = spng__calloc(ctx, 1, sizeof(struct spng_splt));
                 if(ctx->splt_list == NULL) return SPNG_EMEM;
             }
             else
             {
                 ctx->n_splt++;
                 if(ctx->n_splt < 1) return SPNG_EOVERFLOW;
                 if(sizeof(struct spng_splt) > SIZE_MAX / ctx->n_splt) return SPNG_EOVERFLOW;
 
                 void *buf = spng__realloc(ctx, ctx->splt_list, ctx->n_splt * sizeof(struct spng_splt));
                 if(buf == NULL) return SPNG_EMEM;
                 ctx->splt_list = buf;
                 memset(&ctx->splt_list[ctx->n_splt - 1], 0, sizeof(struct spng_splt));
             }
 
             uint32_t i = ctx->n_splt - 1;
 
             size_t keyword_len = chunk.length > 80 ? 80 : chunk.length;
             char *keyword_nul = memchr(data, '\0', keyword_len);
             if(keyword_nul == NULL) return SPNG_ESPLT_NAME;
 
             memcpy(&ctx->splt_list[i].name, data, keyword_len);
 
             if(check_png_keyword(ctx->splt_list[i].name)) return SPNG_ESPLT_NAME;
 
             keyword_len = strlen(ctx->splt_list[i].name);
 
             if( (chunk.length - keyword_len - 1) ==  0) return SPNG_ECHUNK_SIZE;
 
             memcpy(&ctx->splt_list[i].sample_depth, data + keyword_len + 1, 1);
 
             if(ctx->n_splt > 1)
             {
                 uint32_t j;
                 for(j=0; j < i; j++)
                 {
                     if(!strcmp(ctx->splt_list[j].name, ctx->splt_list[i].name)) return SPNG_ESPLT_DUP_NAME;
                 }
             }
 
             if(ctx->splt_list[i].sample_depth == 16)
             {
                 if( (chunk.length - keyword_len - 2) % 10 != 0) return SPNG_ECHUNK_SIZE;
                 ctx->splt_list[i].n_entries = (chunk.length - keyword_len - 2) / 10;
             }
             else if(ctx->splt_list[i].sample_depth == 8)
             {
                 if( (chunk.length - keyword_len - 2) % 6 != 0) return SPNG_ECHUNK_SIZE;
                 ctx->splt_list[i].n_entries = (chunk.length - keyword_len - 2) / 6;
             }
             else return SPNG_ESPLT_DEPTH;
 
             if(ctx->splt_list[i].n_entries == 0) return SPNG_ECHUNK_SIZE;
             if(sizeof(struct spng_splt_entry) > SIZE_MAX / ctx->splt_list[i].n_entries) return SPNG_EOVERFLOW;
 
             ctx->splt_list[i].entries = spng__malloc(ctx, sizeof(struct spng_splt_entry) * ctx->splt_list[i].n_entries);
             if(ctx->splt_list[i].entries == NULL) return SPNG_EMEM;
 
             const unsigned char *splt = data + keyword_len + 2;
 
             size_t k;
             if(ctx->splt_list[i].sample_depth == 16)
             {
                 for(k=0; k < ctx->splt_list[i].n_entries; k++)
                 {
                     ctx->splt_list[i].entries[k].red = read_u16(splt + k * 10);
                     ctx->splt_list[i].entries[k].green = read_u16(splt + k * 10 + 2);
                     ctx->splt_list[i].entries[k].blue = read_u16(splt + k * 10 + 4);
                     ctx->splt_list[i].entries[k].alpha = read_u16(splt + k * 10 + 6);
                     ctx->splt_list[i].entries[k].frequency = read_u16(splt + k * 10 + 8);
                 }
             }
             else if(ctx->splt_list[i].sample_depth == 8)
             {
                 for(k=0; k < ctx->splt_list[i].n_entries; k++)
                 {
                     uint8_t red, green, blue, alpha;
                     memcpy(&red,   splt + k * 6, 1);
                     memcpy(&green, splt + k * 6 + 1, 1);
                     memcpy(&blue,  splt + k * 6 + 2, 1);
                     memcpy(&alpha, splt + k * 6 + 3, 1);
                     ctx->splt_list[i].entries[k].frequency = read_u16(splt + k * 6 + 4);
 
                     ctx->splt_list[i].entries[k].red = red;
                     ctx->splt_list[i].entries[k].green = green;
                     ctx->splt_list[i].entries[k].blue = blue;
                     ctx->splt_list[i].entries[k].alpha = alpha;
                 }
             }
 
             ctx->stored |= SPNG_CHUNK_SPLT;
         }
         else if(!memcmp(chunk.type, type_time, 4))
         {
             if(ctx->file_time) return SPNG_EDUP_TIME;
 
             if(chunk.length != 7) return SPNG_ECHUNK_SIZE;
 
             struct spng_time time;
 
             time.year = read_u16(data);
             memcpy(&time.month, data + 2, 1);
             memcpy(&time.day, data + 3, 1);
             memcpy(&time.hour, data + 4, 1);
             memcpy(&time.minute, data + 5, 1);
             memcpy(&time.second, data + 6, 1);
 
             if(check_time(&time)) return SPNG_ETIME;
 
             ctx->file_time = 1;
 
             if(!ctx->user_time) memcpy(&ctx->time, &time, sizeof(struct spng_time));
 
             ctx->stored |= SPNG_CHUNK_TIME;
         }
         else if(!memcmp(chunk.type, type_text, 4) ||
                 !memcmp(chunk.type, type_ztxt, 4) ||
                 !memcmp(chunk.type, type_itxt, 4))
         {
             ctx->file_text = 1;
 
             continue; /* XXX: https://gitlab.com/randy408/libspng/issues/31 */
         }
         else if(!memcmp(chunk.type, type_offs, 4))
         {
             if(ctx->file_offs) return SPNG_EDUP_OFFS;
 
             if(chunk.length != 9) return SPNG_ECHUNK_SIZE;
 
             ctx->offs.x = read_s32(data);
             ctx->offs.y = read_s32(data + 4);
             memcpy(&ctx->offs.unit_specifier, data + 8, 1);
 
             if(check_offs(&ctx->offs)) return SPNG_EOFFS;
 
             ctx->file_offs = 1;
             ctx->stored |= SPNG_CHUNK_OFFS;
         }
         else if(!memcmp(chunk.type, type_exif, 4))
         {
             if(ctx->file_exif) return SPNG_EDUP_EXIF;
 
             ctx->file_exif = 1;
 
+            if(!chunk.length) return SPNG_EEXIF;
+
             struct spng_exif exif;
 
             exif.data = spng__malloc(ctx, chunk.length);
             if(exif.data == NULL) return SPNG_EMEM;
 
             memcpy(exif.data, data, chunk.length);
             exif.length = chunk.length;
 
             if(check_exif(&exif))
             {
                 spng__free(ctx, exif.data);
                 return SPNG_EEXIF;
             }
 
             if(!ctx->user_exif) memcpy(&ctx->exif, &exif, sizeof(struct spng_exif));
             else spng__free(ctx, exif.data);
 
             ctx->stored |= SPNG_CHUNK_EXIF;
         }
     }
 
     return ret;
 }
@@ -1067,119 +1069,123 @@ static int get_ancillary_data_first_idat(spng_ctx *ctx)
 static int validate_past_idat(spng_ctx *ctx)
 {
     if(ctx == NULL) return 1;
 
     int ret, discard;
     int prev_was_idat = 1;
     struct spng_chunk chunk;
     unsigned char *data;
 
     memcpy(&chunk, &ctx->last_idat, sizeof(struct spng_chunk));
 
     while( !(ret = read_header(ctx, &discard)))
     {
         memcpy(&chunk, &ctx->current_chunk, sizeof(struct spng_chunk));
 
         if(!chunk_fits_in_cache(ctx, &ctx->chunk_cache_usage))
         { 
             ret = discard_chunk_bytes(ctx, chunk.length);
             if(ret) return ret;
             continue;
         }
 
+        data = ctx->data;
+
         ret = read_chunk_bytes(ctx, chunk.length);
         if(ret) return ret;        
 
         /* Reserved bit must be zero */
         if( (chunk.type[2] & (1 << 5)) != 0) return SPNG_ECHUNK_TYPE;
          /* Ignore private chunks */
         if( (chunk.type[1] & (1 << 5)) != 0) continue;
 
         /* Critical chunk */
         if(is_critical_chunk(&chunk))
         {
             if(!memcmp(chunk.type, type_iend, 4)) return 0;
             else if(!memcmp(chunk.type, type_idat, 4) && prev_was_idat) continue; /* ignore extra IDATs */
             else return SPNG_ECHUNK_POS; /* critical chunk after last IDAT that isn't IEND */
         }
 
         prev_was_idat = 0;
 
         if(!memcmp(chunk.type, type_chrm, 4)) return SPNG_ECHUNK_POS;
         else if(!memcmp(chunk.type, type_gama, 4)) return SPNG_ECHUNK_POS;
         else if(!memcmp(chunk.type, type_iccp, 4)) return SPNG_ECHUNK_POS;
         else if(!memcmp(chunk.type, type_sbit, 4)) return SPNG_ECHUNK_POS;
         else if(!memcmp(chunk.type, type_srgb, 4)) return SPNG_ECHUNK_POS;
         else if(!memcmp(chunk.type, type_bkgd, 4)) return SPNG_ECHUNK_POS;
         else if(!memcmp(chunk.type, type_hist, 4)) return SPNG_ECHUNK_POS;
         else if(!memcmp(chunk.type, type_trns, 4)) return SPNG_ECHUNK_POS;
         else if(!memcmp(chunk.type, type_phys, 4)) return SPNG_ECHUNK_POS;
         else if(!memcmp(chunk.type, type_splt, 4)) return SPNG_ECHUNK_POS;
         else if(!memcmp(chunk.type, type_offs, 4)) return SPNG_ECHUNK_POS;
         else if(!memcmp(chunk.type, type_time, 4))
         {
            if(ctx->file_time) return SPNG_EDUP_TIME;
 
            if(chunk.length != 7) return SPNG_ECHUNK_SIZE;
 
             struct spng_time time;
 
             time.year = read_u16(data);
             memcpy(&time.month, data + 2, 1);
             memcpy(&time.day, data + 3, 1);
             memcpy(&time.hour, data + 4, 1);
             memcpy(&time.minute, data + 5, 1);
             memcpy(&time.second, data + 6, 1);
 
             if(check_time(&time)) return SPNG_ETIME;
 
             ctx->file_time = 1;
 
             if(!ctx->user_time) memcpy(&ctx->time, &time, sizeof(struct spng_time));
 
             ctx->stored |= SPNG_CHUNK_TIME;
         }
         else if(!memcmp(chunk.type, type_exif, 4))
         {
             if(ctx->file_exif) return SPNG_EDUP_EXIF;
 
             ctx->file_exif = 1;
 
+            if(!chunk.length) return SPNG_EEXIF;
+
             struct spng_exif exif;
 
             exif.data = spng__malloc(ctx, chunk.length);
             if(exif.data == NULL) return SPNG_EMEM;
 
             memcpy(exif.data, data, chunk.length);
             exif.length = chunk.length;
 
             if(check_exif(&exif))
             {
                 spng__free(ctx, exif.data);
                 return SPNG_EEXIF;
             }
 
             if(!ctx->user_exif) memcpy(&ctx->exif, &exif, sizeof(struct spng_exif));
             else spng__free(ctx, exif.data);
 
             ctx->stored |= SPNG_CHUNK_EXIF;
         }
         else if(!memcmp(chunk.type, type_text, 4) ||
                 !memcmp(chunk.type, type_ztxt, 4) ||
                 !memcmp(chunk.type, type_itxt, 4))
         {
             ctx->file_text = 1;
 
             continue; /* XXX: https://gitlab.com/randy408/libspng/issues/31 */
         }
     }
 
     return ret;
 }
 
 
 /* Scale "sbits" significant bits in "sample" from "bit_depth" to "target"
 
    "bit_depth" must be a valid PNG depth
    "sbits" must be less than or equal to "bit_depth"
    "target" must be between 1 and 16
 */
