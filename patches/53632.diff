commit c500647eeebf0f7752fd4bf6b0a65c91e7f555e2
Author: Ali Mohammad Pur <mpfard@serenityos.org>
Date:   Mon Dec 5 00:13:47 2022 +0330

    AK: Take the bump-allocated chunk header into account in destroy_all()
    
    Previously we allowed the end_offset to be larger than the chunk itself,
    which made it so that certain input sizes would make the logic attempt
    to delete a nonexistent object.
    Fixes #16308.

diff --git a/AK/BumpAllocator.h b/AK/BumpAllocator.h
index 73393b2f02..81cd9dbf19 100644
--- a/AK/BumpAllocator.h
+++ b/AK/BumpAllocator.h
@@ -157,37 +157,37 @@ class UniformBumpAllocator : protected BumpAllocator<use_mmap, chunk_size> {
 public:
     UniformBumpAllocator() = default;
     ~UniformBumpAllocator()
     {
         destroy_all();
     }
 
     template<typename... Args>
     T* allocate(Args&&... args)
     {
         auto ptr = (T*)Allocator::allocate(sizeof(T), alignof(T));
         if (!ptr)
             return nullptr;
         return new (ptr) T { forward<Args>(args)... };
     }
 
     void deallocate_all()
     {
         destroy_all();
         Allocator::deallocate_all();
     }
 
     void destroy_all()
     {
         this->for_each_chunk([&](auto chunk) {
             auto base_ptr = align_up_to(chunk + sizeof(typename Allocator::ChunkHeader), alignof(T));
             // Compute the offset of the first byte *after* this chunk:
-            FlatPtr end_offset = base_ptr + this->m_chunk_size - chunk;
+            FlatPtr end_offset = base_ptr + this->m_chunk_size - chunk - sizeof(typename Allocator::ChunkHeader);
             if (chunk == this->m_current_chunk)
                 end_offset = this->m_byte_offset_into_current_chunk;
             // Compute the offset of the first byte *after* the last valid object, in case the end of the chunk does not align with the end of an object:
             end_offset = (end_offset / sizeof(T)) * sizeof(T);
             for (; base_ptr - chunk < end_offset; base_ptr += sizeof(T))
                 reinterpret_cast<T*>(base_ptr)->~T();
         });
     }
 };
