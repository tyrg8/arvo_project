commit 2295654a792beed3d2b2e81d346271089fa1cd02
Author: Aleks L <93376818+sashashura@users.noreply.github.com>
Date:   Tue Jul 19 09:48:23 2022 +0100

    Fixes Stack-buffer-overflow WRITE in pcpp::IDnsResource::decodeName (#913)
    
    * Fixes Stack-buffer-overflow WRITE in pcpp::IDnsResource::decodeName
    
    Fixes Stack-buffer-overflow WRITE in pcpp::IDnsResource::decodeName:
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=43847
    
    When decoded name perfectly fits 256 char buffer, so that [255] == '.' the `resultPtr` points exactly past the buffer and `resultPtr[0] = 0;` results in off by one write violation.
    
    * Add regression test case-minimized-FuzzTarget-5814090897948672

diff --git a/Packet++/src/DnsResource.cpp b/Packet++/src/DnsResource.cpp
index fe3a8fe7..bf821f18 100644
--- a/Packet++/src/DnsResource.cpp
+++ b/Packet++/src/DnsResource.cpp
@@ -34,113 +34,116 @@ uint8_t* IDnsResource::getRawData() const
 size_t IDnsResource::decodeName(const char* encodedName, char* result, int iteration)
 {
 	size_t encodedNameLength = 0;
 	size_t decodedNameLength = 0;
 	char* resultPtr = result;
 	resultPtr[0] = 0;
 
 	size_t curOffsetInLayer = (uint8_t*)encodedName - m_DnsLayer->m_Data;
 	if (curOffsetInLayer + 1 > m_DnsLayer->m_DataLen)
 		return encodedNameLength;
 
 	if (iteration > 20)
 	{
 		return encodedNameLength;
 	}
 
 	uint8_t wordLength = encodedName[0];
 
 	// A string to parse
 	while (wordLength != 0)
 	{
 		// A pointer to another place in the packet
 		if ((wordLength & 0xc0) == 0xc0)
 		{
 			if (curOffsetInLayer + 2 > m_DnsLayer->m_DataLen || encodedNameLength > 255)
 				return encodedNameLength;
 
 			uint16_t offsetInLayer = (wordLength & 0x3f)*256 + (0xFF & encodedName[1]) + m_DnsLayer->m_OffsetAdjustment;
 			if (offsetInLayer < sizeof(dnshdr) || offsetInLayer >= m_DnsLayer->m_DataLen)
 			{
 				PCPP_LOG_ERROR("DNS parsing error: name pointer is illegal");
 				return 0;
 			}
 
 			char tempResult[256];
 			memset(tempResult, 0, 256);
 			int i = 0;
 			decodeName((const char*)(m_DnsLayer->m_Data + offsetInLayer), tempResult, iteration+1);
 			while (tempResult[i] != 0 && decodedNameLength < 255)
 			{
 				resultPtr[0] = tempResult[i++];
 				resultPtr++;
 				decodedNameLength++;
 			}
 
 			resultPtr[0] = 0;
 
 			// in this case the length of the pointer is: 1 byte for 0xc0 + 1 byte for the offset itself
 			return encodedNameLength + sizeof(uint16_t);
 		}
 		else
 		{
 			// return if next word would be outside of the DNS layer or overflow the buffer behind resultPtr
 			if (curOffsetInLayer + wordLength + 1 > m_DnsLayer->m_DataLen || encodedNameLength + wordLength > 255)
 			{
 				// add the last '\0' to the decoded string
 				if (encodedNameLength == 256)
 				{
 					resultPtr--;
 					decodedNameLength--;
 				}
 				else
 				{
 					encodedNameLength++;
 				}
 
 				resultPtr[0] = 0;
 				return encodedNameLength;
 			}
 
 
 			memcpy(resultPtr, encodedName+1, wordLength);
 			resultPtr += wordLength;
 			resultPtr[0] = '.';
 			resultPtr++;
 			decodedNameLength += wordLength + 1;
 			encodedName += wordLength + 1;
 			encodedNameLength += wordLength + 1;
 
 			curOffsetInLayer = (uint8_t*)encodedName - m_DnsLayer->m_Data;
 			if (curOffsetInLayer + 1 > m_DnsLayer->m_DataLen)
 			{
 				// add the last '\0' to the decoded string
 				if (encodedNameLength == 256)
 				{
 					decodedNameLength--;
 					resultPtr--;
 				}
 				else
 				{
 					encodedNameLength++;
 				}
 
 				resultPtr[0] = 0;
 				return encodedNameLength;
 			}
 
 			wordLength = encodedName[0];
 		}
 	}
 
 	// remove the last "."
 	if (resultPtr > result)
 	{
 		result[resultPtr - result - 1] = 0;
 	}
 
-	// add the last '\0' to encodedNameLength
-	resultPtr[0] = 0;
-	encodedNameLength++;
+	if (resultPtr - result < 256)
+	{
+		// add the last '\0' to encodedNameLength
+		resultPtr[0] = 0;
+		encodedNameLength++;
+	}
 
 	return encodedNameLength;
 }
diff --git a/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5814090897948672 b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5814090897948672
new file mode 100644
index 00000000..2427f083
Binary files /dev/null and b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-5814090897948672 differ
