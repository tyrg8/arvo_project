commit 20db418f1e35f31d7a90d7cabbd22ae989b7266c
Author: Daniel-Constantin Mierla <miconda@gmail.com>
Date:   Tue Sep 7 15:36:20 2021 +0200

    core: parser contact - proper update of length in skip_name()
    
    - stop walking name also for unquoted ;, being special char
    - small typo

diff --git a/src/core/parser/contact/contact.c b/src/core/parser/contact/contact.c
index 8c6ebdd6bb..345167022f 100644
--- a/src/core/parser/contact/contact.c
+++ b/src/core/parser/contact/contact.c
@@ -119,155 +119,155 @@ static inline int skip_uri(str* _s)
 /*
  * Skip name part
  *
  * _s will be adjusted to point at the beginning
  * of URI
  */
 static inline int skip_name(str* _s)
 {
 	char* last_wsp, *p;
 	int i, quoted = 0;
 
 	if (!_s) {
 		LM_ERR("invalid parameter value\n");
 		return -1;
 	}
 
 	p = _s->s;
 
 	last_wsp = 0;
 
 	for(i = 0; i < _s->len; i++) {
 		if (!quoted) {
 			if ((*p == ' ') || (*p == '\t')) {
 				last_wsp = p;
 			} else {
 				if (*p == '<') {
 					_s->s = p;
 					_s->len -= i;
 					return 0;
 				}
 
-				if (*p == ':') {
+				if (*p == ':' || *p == ';') {
 					if (last_wsp) {
-						_s->s = last_wsp;
 						_s->len -= last_wsp - _s->s + 1;
+						_s->s = last_wsp;
 					}
 					return 0;
 				}
 
 				if (*p == '\"') {
 					quoted = 1;
 				}
 			}
 		} else {
 			if ((*p == '\"') && (*(p-1) != '\\')) quoted = 0;
 		}
 		p++;
 	}
 
 	if (quoted) {
 		LM_ERR("closing quote missing in name part of Contact\n");
 	} else {
 		LM_ERR("error in contact, scheme separator not found\n");
 	}
 
 	return -1;
 }
 
 
 /*
  * Parse contacts in a Contact HF
  */
 int parse_contacts(str* _s, contact_t** _c)
 {
 	contact_t* c;
 	param_hooks_t hooks;
 	str sv;
 
 	sv = *_s;
 
 	while(1) {
 		/* Allocate and clear contact structure */
 		c = (contact_t*)pkg_malloc(sizeof(contact_t));
 		if (c == 0) {
 			PKG_MEM_ERROR;
 			goto error;
 		}
 		memset(c, 0, sizeof(contact_t));
 
 		c->name.s = _s->s;
 
 		if (skip_name(_s) < 0) {
 			LM_ERR("error while skipping name part\n");
 			goto error;
 		}
 
 		c->uri.s = _s->s;
 		c->name.len = _s->s - c->name.s;
 		trim_trailing(&c->name);
 
 		/* Find the end of the URI */
 		if (skip_uri(_s) < 0) {
 			LM_ERR("error while skipping URI\n");
 			goto error;
 		}
 
 		c->uri.len = _s->s - c->uri.s; /* Calculate URI length */
 		trim_trailing(&(c->uri));      /* Remove any trailing spaces from URI */
 
 		/* Remove <> if any */
 		if ((c->uri.len >= 2) && (c->uri.s[0] == '<')
 				&& (c->uri.s[c->uri.len - 1] == '>')) {
 			c->uri.s++;
 			c->uri.len -= 2;
 		}
 
 		trim(&c->uri);
 		if((c->uri.len <= 0) || (c->uri.s + c->uri.len > sv.s + sv.len)) {
-			LM_ERR("invlid contact uri\n");
+			LM_ERR("invalid contact uri\n");
 			goto error;
 		}
 
 		if (_s->len == 0) goto ok;
 
 		if (_s->s[0] == ';') {         /* Contact parameter found */
 			_s->s++;
 			_s->len--;
 			trim_leading(_s);
 
 			if (_s->len == 0) {
 				LM_ERR("error while parsing params\n");
 				goto error;
 			}
 
 			if (parse_params(_s, CLASS_CONTACT, &hooks, &c->params) < 0) {
 				LM_ERR("error while parsing parameters\n");
 				goto error;
 			}
 
 			c->q = hooks.contact.q;
 			c->expires = hooks.contact.expires;
 			c->received = hooks.contact.received;
 			c->methods = hooks.contact.methods;
 			c->instance = hooks.contact.instance;
 			c->reg_id = hooks.contact.reg_id;
 			c->flags = hooks.contact.flags;
 
 			if (_s->len == 0) goto ok;
 		}
 
 		/* Next character is comma */
 		c->len = _s->s - c->name.s;
 		_s->s++;
 		_s->len--;
 		trim_leading(_s);
 
 		c->next = *_c;
 		*_c = c;
 		c = NULL;
 
 		if (_s->len == 0) {
 			LM_ERR("text after comma missing\n");
 			goto error;
 		}
 	}
