commit b9a4bf297ece1f93e9caf5f2b1e3ee5f6e447d28
Author: John Thacker <johnthacker@gmail.com>
Date:   Mon Nov 14 21:37:42 2022 -0500

    reassembly: Fix update to the fragment_add_single functions
    
    These used fragment_head and fragment_items indistinguishably
    in a few ways. Fix up 4f3b028d941d727071
    
    Fix #18639. Fix #18640.

diff --git a/epan/reassemble.c b/epan/reassemble.c
index 19ba265e70..1769470975 100644
--- a/epan/reassemble.c
+++ b/epan/reassemble.c
@@ -2350,228 +2350,232 @@ static fragment_head *
 fragment_add_seq_single_work(reassembly_table *table, tvbuff_t *tvb,
 			     const int offset, const packet_info *pinfo,
 		             const guint32 id, const void* data,
 			     const guint32 frag_data_len,
 			     const gboolean first, const gboolean last,
 			     const guint32 max_frags, const guint32 max_age,
 			     const guint32 flags)
 {
 	reassembled_key reass_key;
 	tvbuff_t *old_tvb_data;
 	gpointer orig_key;
 	fragment_head *fh, *new_fh;
 	fragment_item *fd, *prev_fd;
 	guint32 frag_number, tmp_offset;
 	/* Have we already seen this frame?
 	 * If so, look for it in the table of reassembled packets.
 	 * Note here we store in the reassembly table by the single sequence
 	 * number rather than the sequence number of the First fragment. */
 	if (pinfo->fd->visited) {
 		reass_key.frame = pinfo->num;
 		reass_key.id = id;
 		fh = (fragment_head *)g_hash_table_lookup(table->reassembled_table, &reass_key);
 		return fh;
 	}
 	/* First let's figure out where we want to add our new fragment */
 	fh = NULL;
 	if (first) {
 		frag_number = 0;
 		fh = lookup_fd_head(table, pinfo, id-frag_number, data, NULL);
 		if ((flags & REASSEMBLE_FLAGS_AGING) &&
 		    fh && ((fh->frame + max_age) < pinfo->num)) {
 			old_tvb_data = fragment_delete(table, pinfo, id-frag_number, data);
 			if (old_tvb_data)
 				tvb_free(old_tvb_data);
 			fh = NULL;
 		}
 		if (fh == NULL) {
 			/* Not found. Create list-head. */
 			fh = new_head(FD_BLOCKSEQUENCE);
 			insert_fd_head(table, fh, pinfo, id-frag_number, data);
 		}
 		/* As this is the first fragment, we might have added segments
 		 * for this reassembly to the previous one in-progress. */
 		fd = NULL;
 		for (frag_number=1; frag_number < max_frags; frag_number++) {
 			new_fh = lookup_fd_head(table, pinfo, id-frag_number, data, NULL);
 			if (new_fh != NULL) {
-				prev_fd = new_fh->next;
+				prev_fd = NULL;
 				new_fh->frame = 0;
 				for (fd=new_fh->next; fd && fd->offset < frag_number; fd=fd->next) {
 					prev_fd = fd;
 					if (new_fh->frame < fd->frame) {
 						new_fh->frame = fd->frame;
 					}
 				}
 				if (prev_fd) {
 					prev_fd->next = NULL;
+				} else {
+					new_fh->next = NULL;
 				}
 				break;
 			}
 		}
 		if (fd != NULL) {
 			tmp_offset = 0;
 			for (prev_fd = fd; prev_fd; prev_fd = prev_fd->next) {
 				prev_fd->offset -= frag_number;
 				tmp_offset = prev_fd->offset;
 				if (fh->frame < prev_fd->frame) {
 					fh->frame = prev_fd->frame;
 				}
 			}
 			MERGE_FRAG(fh, fd);
 			if (new_fh != NULL) {
 				/* If we've moved a Last packet, change datalen.
 			         * Second part of this test prob. redundant? */
 				if (new_fh->flags & FD_DATALEN_SET &&
 				    new_fh->datalen >= frag_number) {
 					fh->flags |= FD_DATALEN_SET;
 					fh->datalen = new_fh->datalen - frag_number;
 					new_fh->flags &= ~FD_DATALEN_SET;
 					new_fh->datalen = 0;
 				}
 				/* If we've moved all the fragments,
 				 * delete the old head */
 				if (new_fh->next == NULL) {
 					old_tvb_data = fragment_delete(table, pinfo, id-frag_number, data);
 					if (old_tvb_data)
 						tvb_free(old_tvb_data);
 				}
 			} else {
 			/* Look forward and take off the next (this is
 			 * necessary in some edge cases where max_frags
 			 * prevented some fragments from going on the
 			 * previous First, but they can go on this one. */
 				fragment_add_seq_single_move(table, pinfo, id,
 							     data, tmp_offset);
 			}
 		}
 		frag_number = 0; /* For the rest of the function */
 	} else {
 		for (frag_number=1; frag_number < max_frags; frag_number++) {
 			fh = lookup_fd_head(table, pinfo, id-frag_number, data, NULL);
 			if ((flags & REASSEMBLE_FLAGS_AGING) &&
 			    fh && ((fh->frame + max_age) < pinfo->num)) {
 				old_tvb_data = fragment_delete(table, pinfo, id-frag_number, data);
 				if (old_tvb_data)
 					tvb_free(old_tvb_data);
 				fh = NULL;
 			}
 			if (fh != NULL) {
 				if (fh->flags & FD_DATALEN_SET &&
 				    fh->datalen < frag_number) {
 					/* This fragment is after the Last
 					 * fragment, so must go after here. */
 					fh = NULL;
 				}
 				break;
 			}
 		}
 		if (fh == NULL) { /* Didn't find location, use default */
 			frag_number = 1;
 			/* Already looked for frag_number 1, so just create */
 			fh = new_head(FD_BLOCKSEQUENCE);
 			insert_fd_head(table, fh, pinfo, id-frag_number, data);
 		}
 	}
 	if (last) {
 		/* Look for fragments past the end set by this Last fragment. */
-		prev_fd = fh->next;
+		prev_fd = NULL;
 		for (fd=fh->next; fd && fd->offset <= frag_number; fd=fd->next) {
 			prev_fd = fd;
 		}
 		/* fd is now all fragments offset > frag_number (the Last).
 		 * It shouldn't have a fragment with offset frag_number+1,
 		 * as that would be a First fragment not marked as such.
 		 * However, this can happen if we had unreassembled fragments
 		 * (missing, or at the start of the capture) and we've also
 		 * looped around on the sequence numbers. It can also happen
 		 * if bit errors mess up Last or First. */
 		if (fd != NULL) {
 			if (prev_fd) {
 				prev_fd->next = NULL;
+			} else {
+			    fh->next = NULL;
 			}
 			fh->frame = 0;
 			for (prev_fd=fh->next; prev_fd; prev_fd=prev_fd->next) {
 				if (fh->frame < prev_fd->frame) {
 					fh->frame = prev_fd->frame;
 				}
 			}
 			while (fd && fd->offset == frag_number+1) {
 				/* Definitely have bad data here. Best to
 				 * delete these and leave unreassembled. */
 				fragment_item *tmp_fd;
 				tmp_fd=fd->next;
 
 				if (fd->tvb_data && !(fd->flags & FD_SUBSET_TVB))
 					tvb_free(fd->tvb_data);
 				g_slice_free(fragment_item, fd);
 				fd=tmp_fd;
 			}
 		}
 		if (fd != NULL) {
 			/* Move these onto the next frame. */
 			new_fh = lookup_fd_head(table, pinfo, id+1, data, NULL);
 			if (new_fh==NULL) {
 				/* Not found. Create list-head. */
 				new_fh = new_head(FD_BLOCKSEQUENCE);
 				insert_fd_head(table, new_fh, pinfo, id+1, data);
 			}
 			tmp_offset = 0;
 			for (prev_fd = fd; prev_fd; prev_fd = prev_fd->next) {
 				prev_fd->offset -= (frag_number+1);
 				tmp_offset = prev_fd->offset;
 				if (new_fh->frame < fd->frame) {
 					new_fh->frame = fd->frame;
 				}
 			}
 			MERGE_FRAG(new_fh, fd);
 			/* If we previously found a different Last fragment,
 			 * transfer that information to the new reassembly. */
 			if (fh->flags & FD_DATALEN_SET &&
 			    fh->datalen > frag_number) {
 				new_fh->flags |= FD_DATALEN_SET;
 				new_fh->datalen = fh->datalen - (frag_number+1);
 				fh->flags &= ~FD_DATALEN_SET;
 				fh->datalen = 0;
 			} else {
 			/* Look forward and take off the next (this is
 			 * necessary in some edge cases where max_frags
 			 * prevented some fragments from going on the
 			 * previous First, but they can go on this one. */
 				fragment_add_seq_single_move(table, pinfo, id+1,
 							     data, tmp_offset);
 			}
 		}
 	} else {
 		fragment_add_seq_single_move(table, pinfo, id-frag_number, data,
 				             frag_number+1);
 	}
 	/* Having cleaned up everything, finally ready to add our new
 	 * fragment. Note that only this will ever complete a reassembly. */
 	fh = fragment_add_seq_common(table, tvb, offset, pinfo,
 					 id-frag_number, data,
 					 frag_number, frag_data_len,
 					 !last, 0, &orig_key);
 	if (fh) {
 		/*
 		 * Reassembly is complete.
 		 *
 		 * If this is in the table of in-progress reassemblies,
 		 * remove it from that table.  (It could be that this
 		 * was the first and last fragment, so that no
 		 * reassembly was done.)
 		 */
 		if (orig_key != NULL)
 			fragment_unhash(table, orig_key);
 
 		/*
 		 * Add this item to the table of reassembled packets.
 		 */
 		fragment_reassembled_single(table, fh, pinfo, id-frag_number);
 		return fh;
 	} else {
 		/*
 		 * Reassembly isn't complete.
 		 */
 		return NULL;
 	}
 }
