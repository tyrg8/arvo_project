commit 795bab5629195395d512bb9a830542de6067195b
Author: Andreas Schneider <asn@samba.org>
Date:   Tue Mar 14 09:48:37 2023 +0100

    lib:ldb: Correctly cast pointers for assert_string_equal()
    
    This is a change in cmocka to avoid hiding possible errors.
    
    Signed-off-by: Andreas Schneider <asn@samba.org>
    Reviewed-by: Jeremy Allison <jra@samba.org>
    
    Autobuild-User(master): Andreas Schneider <asn@cryptomilk.org>
    Autobuild-Date(master): Wed Mar 15 07:53:54 UTC 2023 on atb-devel-224

diff --git a/lib/ldb/tests/ldb_filter_attrs_test.c b/lib/ldb/tests/ldb_filter_attrs_test.c
index 7d555e0da2e..9e985e13c63 100644
--- a/lib/ldb/tests/ldb_filter_attrs_test.c
+++ b/lib/ldb/tests/ldb_filter_attrs_test.c
@@ -609,135 +609,135 @@ static void test_filter_attrs_two_dup_attr_matched_star(void **state)
 /*
  * Test against a record with only one attribute, matching the * in
  * the list
  */
 static void test_filter_attrs_one_attr_matched_star(void **state)
 {
 	struct ldbtest_ctx *ctx = *state;
 	int ret;
 
 	struct ldb_message *filtered_msg = ldb_msg_new(ctx);
 
 	const char *attrs[] = {"*", NULL};
 
 	uint8_t value[] = "The value.......end";
 	struct ldb_val value_1 = {
 		.data   = value,
 		.length = (sizeof(value))
 	};
 	struct ldb_message_element element_1 = {
 		.name = "foo",
 		.num_values = 1,
 		.values = &value_1
 	};
 	struct ldb_message in = {
 		.dn = ldb_dn_new(ctx, ctx->ldb, "dc=samba,dc=org"),
 		.num_elements = 1,
 		.elements = &element_1,
 	};
 
 	assert_non_null(in.dn);
 
 	/* Needed as * implies distinguishedName */
 	filtered_msg->dn = in.dn;
 
 	ret = ldb_filter_attrs(ctx->ldb,
 			       &in,
 			       attrs,
 			       filtered_msg);
 	assert_int_equal(ret, LDB_SUCCESS);
 	assert_non_null(filtered_msg);
 	assert_int_equal(filtered_msg->num_elements, 2);
 
 	/*
 	 * assert the ldb_filter_attrs does not modify filtered_msg.dn
 	 * in this case
 	 */
 	assert_ptr_equal(filtered_msg->dn, in.dn);
 	assert_string_equal(ldb_msg_find_attr_as_string(filtered_msg,
 							"distinguishedName",
 							NULL),
 			    ldb_dn_get_linearized(in.dn));
 	assert_string_equal(ldb_msg_find_attr_as_string(filtered_msg,
 							"foo",
 							NULL),
-			    value);
+			    (const char *)value);
 }
 
 /*
  * Test against a record with two attributes, matching the * in
  * the list
  */
 static void test_filter_attrs_two_attr_matched_star(void **state)
 {
 	struct ldbtest_ctx *ctx = *state;
 	int ret;
 
 	struct ldb_message *filtered_msg = ldb_msg_new(ctx);
 
 	const char *attrs[] = {"*", NULL};
 
 	uint8_t value1[] = "The value.......end";
 	uint8_t value2[] = "The value..MUST.end";
 	struct ldb_val value_1 = {
 		.data   = value1,
 		.length = (sizeof(value1))
 	};
 	struct ldb_val value_2 = {
 		.data   = value2,
 		.length = (sizeof(value2))
 	};
 	struct ldb_message_element elements[] = {
 		{
 			.name = "foo",
 			.num_values = 1,
 			.values = &value_1
 		},
 		{
 			.name = "bar",
 			.num_values = 1,
 			.values = &value_2
 		}
 	};
 	struct ldb_message in = {
 		.dn = ldb_dn_new(ctx, ctx->ldb, "dc=samba,dc=org"),
 		.num_elements = 2,
 		.elements = elements,
 	};
 
 	assert_non_null(in.dn);
 
 	/* Needed as * implies distinguishedName */
 	filtered_msg->dn = in.dn;
 
 	ret = ldb_filter_attrs(ctx->ldb,
 			       &in,
 			       attrs,
 			       filtered_msg);
 	assert_int_equal(ret, LDB_SUCCESS);
 	assert_non_null(filtered_msg);
 	assert_int_equal(filtered_msg->num_elements, 3);
 
 	/*
 	 * assert the ldb_filter_attrs does not modify filtered_msg.dn
 	 * in this case
 	 */
 	assert_ptr_equal(filtered_msg->dn, in.dn);
 	assert_string_equal(ldb_msg_find_attr_as_string(filtered_msg,
 							"distinguishedName",
 							NULL),
 			    ldb_dn_get_linearized(in.dn));
 	assert_string_equal(ldb_msg_find_attr_as_string(filtered_msg,
 							"foo",
 							NULL),
-			    value1);
+			    (const char *)value1);
 	assert_string_equal(ldb_msg_find_attr_as_string(filtered_msg,
 							"bar",
 							NULL),
-			    value2);
+			    (const char *)value2);
 }
 
 /*
  * Test against a record with only one attribute, matching the * in
  * the list, but without the DN being pre-filled.  Fails due to need
  * to contstruct the distinguishedName
  */
@@ -779,109 +779,109 @@ static void test_filter_attrs_one_attr_matched_star_no_dn(void **state)
 /*
  * Test against a record with only one attribute, matching the * in
  * the list plus requsesting distinguishedName
  */
 static void test_filter_attrs_one_attr_matched_star_dn(void **state)
 {
 	struct ldbtest_ctx *ctx = *state;
 	int ret;
 
 	struct ldb_message *filtered_msg = ldb_msg_new(ctx);
 
 	const char *attrs[] = {"*", "distinguishedName", NULL};
 
 	uint8_t value[] = "The value.......end";
 	struct ldb_val value_1 = {
 		.data   = value,
 		.length = (sizeof(value))
 	};
 	struct ldb_message_element element_1 = {
 		.name = "foo",
 		.num_values = 1,
 		.values = &value_1
 	};
 	struct ldb_message in = {
 		.dn = ldb_dn_new(ctx, ctx->ldb, "dc=samba,dc=org"),
 		.num_elements = 1,
 		.elements = &element_1,
 	};
 
 	assert_non_null(in.dn);
 
 	/* Needed for distinguishedName */
 	filtered_msg->dn = in.dn;
 
 	ret = ldb_filter_attrs(ctx->ldb,
 			       &in,
 			       attrs,
 			       filtered_msg);
 	assert_int_equal(ret, LDB_SUCCESS);
 	assert_non_null(filtered_msg);
 	assert_int_equal(filtered_msg->num_elements, 2);
 
 	/* show that ldb_filter_attrs does not modify in.dn */
 	assert_ptr_equal(filtered_msg->dn, in.dn);
 
 	assert_string_equal(ldb_msg_find_attr_as_string(filtered_msg,
 							"distinguishedName",
 							NULL),
 			    ldb_dn_get_linearized(in.dn));
 	assert_string_equal(ldb_msg_find_attr_as_string(filtered_msg,
 							"foo",
 							NULL),
-			    value);
+			    (const char *)value);
 }
 
 /*
  * Test against a record with only one attribute, but returning
  * distinguishedName from the list (only)
  */
 static void test_filter_attrs_one_attr_matched_dn(void **state)
 {
 	struct ldbtest_ctx *ctx = *state;
 	int ret;
 
 	struct ldb_message *filtered_msg = ldb_msg_new(ctx);
 
 	const char *attrs[] = {"distinguishedName", NULL};
 
 	uint8_t value[] = "The value.......end";
 	struct ldb_val value_1 = {
 		.data   = value,
 		.length = (sizeof(value))
 	};
 	struct ldb_message_element element_1 = {
 		.name = "foo",
 		.num_values = 1,
 		.values = &value_1
 	};
 	struct ldb_message in = {
 		.dn = ldb_dn_new(ctx, ctx->ldb, "dc=samba,dc=org"),
 		.num_elements = 1,
 		.elements = &element_1,
 	};
 
 	assert_non_null(in.dn);
 
 	/* Needed for distinguishedName */
 	filtered_msg->dn = in.dn;
 
 	ret = ldb_filter_attrs(ctx->ldb,
 			       &in,
 			       attrs,
 			       filtered_msg);
 	assert_int_equal(ret, LDB_SUCCESS);
 	assert_non_null(filtered_msg);
 	assert_int_equal(filtered_msg->num_elements, 1);
 
 	/* show that ldb_filter_attrs does not modify in.dn */
 	assert_ptr_equal(filtered_msg->dn, in.dn);
 	assert_string_equal(filtered_msg->elements[0].name, "distinguishedName");
 	assert_int_equal(filtered_msg->elements[0].num_values, 1);
-	assert_string_equal(filtered_msg->elements[0].values[0].data,
+	assert_string_equal((const char *)filtered_msg->elements[0].values[0].data,
 			    ldb_dn_get_linearized(in.dn));
 }
 
 /*
  * Test against a record with only one attribute, not matching the
  * empty attribute list
  */
diff --git a/lib/ldb/tests/ldb_mod_op_test.c b/lib/ldb/tests/ldb_mod_op_test.c
index cf40fe42b73..eca59068c9f 100644
--- a/lib/ldb/tests/ldb_mod_op_test.c
+++ b/lib/ldb/tests/ldb_mod_op_test.c
@@ -143,23 +143,23 @@ static struct ldb_message *get_test_ldb_message(TALLOC_CTX *mem_ctx,
 static void test_ldif_message(void **state)
 {
 	struct ldbtest_ctx *test_ctx = talloc_get_type_abort(*state,
 							struct ldbtest_ctx);
 	char *got_ldif;
 	const char *expected_ldif =
 		"dn: dc=samba,dc=org\n"
 		"changetype: add\n"
 		"public: key\n"
 		"supersecret: password\n"
 		"binary:: //8=\n"
 		"\n";
-	
+
 	struct ldb_message *msg = get_test_ldb_message(test_ctx,
 						       test_ctx->ldb);
 
 	got_ldif = ldb_ldif_message_string(test_ctx->ldb,
 					   test_ctx,
 					   LDB_CHANGETYPE_ADD,
 					   msg);
 	assert_string_equal(got_ldif, expected_ldif);
 	TALLOC_FREE(got_ldif);
 }
@@ -167,42 +167,42 @@ static void test_ldif_message(void **state)
 static void test_ldif_message_redacted(void **state)
 {
 	struct ldbtest_ctx *test_ctx = talloc_get_type_abort(*state,
 							struct ldbtest_ctx);
 	int ret;
 	char *got_ldif;
 	const char *expected_ldif =
 		"dn: dc=samba,dc=org\n"
 		"changetype: add\n"
 		"public: key\n"
 		"# supersecret::: REDACTED SECRET ATTRIBUTE\n"
 		"binary:: //8=\n"
 		"\n";
 
 	const char *secret_attrs[] = {
 		"supersecret",
 		NULL
 	};
-	
+
 	struct ldb_message *msg = ldb_msg_new(test_ctx);
 
 	ldb_set_opaque(test_ctx->ldb,
 		       LDB_SECRET_ATTRIBUTE_LIST_OPAQUE,
 		       secret_attrs);
-	
+
 	assert_non_null(msg);
 
 	msg->dn = ldb_dn_new(msg, test_ctx->ldb, "dc=samba,dc=org");
 	ret = ldb_msg_add_string(msg, "public", "key");
 	assert_int_equal(ret, LDB_SUCCESS);
 	ret = ldb_msg_add_string(msg, "supersecret", "password");
 	assert_int_equal(ret, LDB_SUCCESS);
 	ret = ldb_msg_add_string(msg, "binary", "\xff\xff\0");
 	assert_int_equal(ret, LDB_SUCCESS);
 	got_ldif = ldb_ldif_message_redacted_string(test_ctx->ldb,
 						    test_ctx,
 						    LDB_CHANGETYPE_ADD,
 						    msg);
 	assert_string_equal(got_ldif, expected_ldif);
 	TALLOC_FREE(got_ldif);
 	assert_int_equal(ret, 0);
 }
@@ -907,53 +907,53 @@ static int ldb_modify_test_teardown(void **state)
 static void test_ldb_modify_add_key(void **state)
 {
 	struct ldb_mod_test_ctx *mod_test_ctx = \
 				talloc_get_type_abort(*state,
 						      struct ldb_mod_test_ctx);
 	struct keyval mod_kvs[] = {
 		{ "name", "test_mod_name" },
 		{ NULL, NULL },
 	};
 	struct ldb_result *res;
 	struct ldb_message_element *el;
 
 	res = run_mod_test(mod_test_ctx, LDB_FLAG_MOD_ADD, mod_kvs);
 	assert_non_null(res);
 
 	/* Check cn is intact and name was added */
 	assert_int_equal(res->count, 1);
 	el = ldb_msg_find_element(res->msgs[0], "cn");
 	assert_non_null(el);
 	assert_int_equal(el->num_values, 1);
-	assert_string_equal(el->values[0].data, "test_mod_cn");
+	assert_string_equal((const char *)el->values[0].data, "test_mod_cn");
 
 	el = ldb_msg_find_element(res->msgs[0], "name");
 	assert_non_null(el);
 	assert_int_equal(el->num_values, 1);
-	assert_string_equal(el->values[0].data, "test_mod_name");
+	assert_string_equal((const char *)el->values[0].data, "test_mod_name");
 }
 
 static void test_ldb_modify_extend_key(void **state)
 {
 	struct ldb_mod_test_ctx *mod_test_ctx = \
 			talloc_get_type_abort(*state,
 					      struct ldb_mod_test_ctx);
 	struct keyval mod_kvs[] = {
 		{ "cn", "test_mod_cn2" },
 		{ NULL, NULL },
 	};
 	struct ldb_result *res;
 	struct ldb_message_element *el;
 
 	res = run_mod_test(mod_test_ctx, LDB_FLAG_MOD_ADD, mod_kvs);
 	assert_non_null(res);
 
 	/* Check cn was extended with another value */
 	assert_int_equal(res->count, 1);
 	el = ldb_msg_find_element(res->msgs[0], "cn");
 	assert_non_null(el);
 	assert_int_equal(el->num_values, 2);
-	assert_string_equal(el->values[0].data, "test_mod_cn");
-	assert_string_equal(el->values[1].data, "test_mod_cn2");
+	assert_string_equal((const char *)el->values[0].data, "test_mod_cn");
+	assert_string_equal((const char *)el->values[1].data, "test_mod_cn2");
 }
 
 static void test_ldb_modify_add_key_noval(void **state)
@@ -991,53 +991,53 @@ static void test_ldb_modify_add_key_noval(void **state)
 static void test_ldb_modify_replace_key(void **state)
 {
 	struct ldb_mod_test_ctx *mod_test_ctx = \
 			talloc_get_type_abort(*state,
 					      struct ldb_mod_test_ctx);
 	const char *new_cn = "new_cn";
 	struct keyval mod_kvs[] = {
 		{ "cn", new_cn },
 		{ NULL, NULL },
 	};
 	struct ldb_result *res;
 	struct ldb_message_element *el;
 
 	res = run_mod_test(mod_test_ctx, LDB_FLAG_MOD_REPLACE, mod_kvs);
 	assert_non_null(res);
 
 	/* Check cn was replaced */
 	assert_int_equal(res->count, 1);
 	el = ldb_msg_find_element(res->msgs[0], "cn");
 	assert_non_null(el);
 	assert_int_equal(el->num_values, 1);
-	assert_string_equal(el->values[0].data, new_cn);
+	assert_string_equal((const char *)el->values[0].data, new_cn);
 }
 
 static void test_ldb_modify_replace_noexist_key(void **state)
 {
 	struct ldb_mod_test_ctx *mod_test_ctx = \
 			talloc_get_type_abort(*state,
 					      struct ldb_mod_test_ctx);
 	struct keyval mod_kvs[] = {
 		{ "name", "name_val" },
 		{ NULL, NULL },
 	};
 	struct ldb_result *res;
 	struct ldb_message_element *el;
 
 	res = run_mod_test(mod_test_ctx, LDB_FLAG_MOD_REPLACE, mod_kvs);
 	assert_non_null(res);
 
 	/* Check cn is intact and name was added */
 	assert_int_equal(res->count, 1);
 	el = ldb_msg_find_element(res->msgs[0], "cn");
 	assert_non_null(el);
 	assert_int_equal(el->num_values, 1);
-	assert_string_equal(el->values[0].data, "test_mod_cn");
+	assert_string_equal((const char *)el->values[0].data, "test_mod_cn");
 
 	el = ldb_msg_find_element(res->msgs[0], mod_kvs[0].key);
 	assert_non_null(el);
 	assert_int_equal(el->num_values, 1);
-	assert_string_equal(el->values[0].data, mod_kvs[0].val);
+	assert_string_equal((const char *)el->values[0].data, mod_kvs[0].val);
 }
 
 static void test_ldb_modify_replace_zero_vals(void **state)
@@ -1222,17 +1222,17 @@ static int ldb_search_test_teardown(void **state)
 static void assert_attr_has_vals(struct ldb_message *msg,
 				 const char *attr,
 				 const char *vals[],
 				 const size_t nvals)
 {
 	struct ldb_message_element *el;
 	size_t i;
 
 	el = ldb_msg_find_element(msg, attr);
 	assert_non_null(el);
 
 	assert_int_equal(el->num_values, nvals);
 	for (i = 0; i < nvals; i++) {
-		assert_string_equal(el->values[i].data,
+		assert_string_equal((const char *)el->values[i].data,
 				    vals[i]);
 	}
 }
