commit ec20f4178950a54f4bfbed72c2bbbabe6561c414
Merge: 36bc84138 81d309643
Author: Daiki Ueno <ueno@gnu.org>
Date:   Mon Mar 11 10:58:51 2024 +0000

    Merge branch 'wip/dueno/rsa-oaep-followup' into 'master'
    
    x509: fix reading of MGF-1 OID
    
    See merge request gnutls/gnutls!1819

diff --git a/lib/x509/key_decode.c b/lib/x509/key_decode.c
index 1cd5ee2bc..732887809 100644
--- a/lib/x509/key_decode.c
+++ b/lib/x509/key_decode.c
@@ -288,76 +288,76 @@ cleanup:
 static int check_mgf1(asn1_node root, const char *name,
 		      gnutls_digest_algorithm_t digest, bool allow_null)
 {
 	char buffer[MAX_NAME_SIZE];
 	char oid[MAX_OID_SIZE];
 	gnutls_digest_algorithm_t digest2;
 	asn1_node ai = NULL;
 	int size;
 	int result;
 	gnutls_datum_t value = { NULL, 0 };
 
 	result = snprintf(buffer, sizeof(buffer), "%s.algorithm", name);
 	if (result < 0 || (size_t)result >= sizeof(buffer))
 		return gnutls_assert_val(GNUTLS_E_INTERNAL_ERROR);
 
 	size = sizeof(oid);
 	result = asn1_read_value(root, buffer, oid, &size);
-	if (result < 0) {
+	if (result != ASN1_SUCCESS) {
 		if (result == ASN1_ELEMENT_NOT_FOUND && allow_null)
 			return 0;
 		gnutls_assert();
 		return _gnutls_asn2err(result);
 	}
 
 	/* Error out if algorithm other than mgf1 is specified */
 	if (strcmp(oid, PKIX1_RSA_PSS_MGF1_OID) != 0) {
 		gnutls_assert();
 		_gnutls_debug_log("Unknown mask algorithm: %s\n", oid);
 		return gnutls_assert_val(GNUTLS_E_UNKNOWN_ALGORITHM);
 	}
 
 	/* Check if maskGenAlgorithm.parameters does exist and
 	 * is identical to hashAlgorithm */
 	result = snprintf(buffer, sizeof(buffer), "%s.parameters", name);
 	if (result < 0 || (size_t)result >= sizeof(buffer))
 		return gnutls_assert_val(GNUTLS_E_INTERNAL_ERROR);
 
 	result = _gnutls_x509_read_value(root, buffer, &value);
 	if (result < 0)
 		return gnutls_assert_val(result);
 
 	if ((result = asn1_create_element(_gnutls_get_pkix(),
 					  "PKIX1.AlgorithmIdentifier", &ai)) !=
 	    ASN1_SUCCESS) {
 		gnutls_assert();
 		result = _gnutls_asn2err(result);
 		goto cleanup;
 	}
 
 	result = _asn1_strict_der_decode(&ai, value.data, value.size, NULL);
 	if (result != ASN1_SUCCESS) {
 		gnutls_assert();
 		result = _gnutls_asn2err(result);
 		goto cleanup;
 	}
 
 	size = sizeof(oid);
 	result = asn1_read_value(ai, "algorithm", oid, &size);
 	if (result == ASN1_SUCCESS)
 		digest2 = gnutls_oid_to_digest(oid);
 	else if (result == ASN1_ELEMENT_NOT_FOUND)
 		/* The default hash algorithm for mgf1 is SHA-1 */
 		digest2 = GNUTLS_DIG_SHA1;
 	else {
 		gnutls_assert();
 		result = _gnutls_asn2err(result);
 		goto cleanup;
 	}
 
 	if (digest != digest2) {
 		gnutls_assert();
 		result = GNUTLS_E_CONSTRAINT_ERROR;
 		goto cleanup;
 	}
 
 	result = 0;
@@ -459,49 +459,49 @@ cleanup:
 static int read_rsa_oaep_label(asn1_node root, const char *name,
 			       gnutls_datum_t *label, bool allow_null)
 {
 	char buffer[MAX_NAME_SIZE];
 	char oid[MAX_OID_SIZE] = "";
 	int size;
 	int result;
 	gnutls_datum_t der = { NULL, 0 };
 
 	result = snprintf(buffer, sizeof(buffer), "%s.algorithm", name);
 	if (result < 0 || (size_t)result >= sizeof(buffer))
 		return gnutls_assert_val(GNUTLS_E_INTERNAL_ERROR);
 
 	size = sizeof(oid);
 	result = asn1_read_value(root, buffer, oid, &size);
-	if (result < 0) {
+	if (result != ASN1_SUCCESS) {
 		if (result != ASN1_ELEMENT_NOT_FOUND && allow_null)
 			return 0;
 
 		gnutls_assert();
 		return _gnutls_asn2err(result);
 	}
 
 	/* Error out if algorithm other than mgf1 is specified */
 	if (strcmp(oid, PKIX1_RSA_OAEP_P_SPECIFIED_OID) != 0) {
 		gnutls_assert();
 		_gnutls_debug_log("Unknown pSourceFunc algorithm: %s\n", oid);
 		return GNUTLS_E_UNKNOWN_ALGORITHM;
 	}
 
 	/* Extract label from pSourceFunc.parameters */
 	result = snprintf(buffer, sizeof(buffer), "%s.parameters", name);
 	if (result < 0 || (size_t)result >= sizeof(buffer))
 		return gnutls_assert_val(GNUTLS_E_INTERNAL_ERROR);
 
 	result = _gnutls_x509_read_null_value(root, buffer, &der);
 	if (result < 0) {
 		gnutls_assert();
 		goto cleanup;
 	}
 
 	result = _gnutls_x509_decode_string(ASN1_ETYPE_OCTET_STRING, der.data,
 					    der.size, label, 0);
 	if (result < 0) {
 		gnutls_assert();
 		goto cleanup;
 	}
 
 	result = 0;
