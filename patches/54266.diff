commit d46813953d9a647461b3d1c924dbc86273985b70
Merge: a3f3c76fa 370e0ce0f
Author: David Garske <david@wolfssl.com>
Date:   Thu Dec 15 09:21:37 2022 -0800

    Merge pull request #5892 from tatowicz/decodealtnames-fuzz-fix
    
    Add Overflow check to DecodeAltNames input buffer access

diff --git a/wolfcrypt/src/asn.c b/wolfcrypt/src/asn.c
index a116bb8b5..aeca7dd49 100644
--- a/wolfcrypt/src/asn.c
+++ b/wolfcrypt/src/asn.c
@@ -17322,405 +17322,413 @@ static int DecodeConstructedOtherName(DecodedCert* cert, const byte* input,
 /* Decode subject alternative names extension.
  *
  * RFC 5280 4.2.1.6.  Subject Alternative Name
  *
  * @param [in]      input  Buffer holding encoded data.
  * @param [in]      sz     Size of encoded data in bytes.
  * @param [in, out] cert   Decoded certificate object.
  * @return  0 on success.
  * @return  ASN_PARSE_E when BER encoded data does not match ASN.1 items or
  *          is invalid.
  * @return  BUFFER_E when data in buffer is too small.
  * @return  ASN_UNKNOWN_OID_E when the OID cannot be verified.
  * @return  MEMORY_E when dynamic memory allocation fails.
  */
 static int DecodeAltNames(const byte* input, int sz, DecodedCert* cert)
 {
 #ifndef WOLFSSL_ASN_TEMPLATE
     word32 idx = 0;
     int length = 0;
+    byte current_byte;
 
     WOLFSSL_ENTER("DecodeAltNames");
 
     if (GetSequence(input, &idx, &length, sz) < 0) {
         WOLFSSL_MSG("\tBad Sequence");
         return ASN_PARSE_E;
     }
 
     if (length == 0) {
         /* RFC 5280 4.2.1.6.  Subject Alternative Name
            If the subjectAltName extension is present, the sequence MUST
            contain at least one entry. */
         WOLFSSL_ERROR_VERBOSE(ASN_PARSE_E);
         return ASN_PARSE_E;
     }
 
 #ifdef OPENSSL_ALL
     cert->extSubjAltNameSrc = input;
     cert->extSubjAltNameSz = sz;
 #endif
 
     cert->weOwnAltNames = 1;
 
     while (length > 0) {
-        byte b = input[idx++];
+        /* Verify idx can't overflow input buffer */
+        if (idx >= (word32)sz) {
+            WOLFSSL_MSG("\tBad Index");
+            return BUFFER_E;
+        }
+
+        current_byte = input[idx++];
 
         length--;
 
         /* Save DNS Type names in the altNames list. */
         /* Save Other Type names in the cert's OidMap */
-        if (b == (ASN_CONTEXT_SPECIFIC | ASN_DNS_TYPE)) {
+        if (current_byte == (ASN_CONTEXT_SPECIFIC | ASN_DNS_TYPE)) {
             DNS_entry* dnsEntry;
             int strLen;
             word32 lenStartIdx = idx;
 
             if (GetLength(input, &idx, &strLen, sz) < 0) {
                 WOLFSSL_MSG("\tfail: str length");
                 return ASN_PARSE_E;
             }
             length -= (idx - lenStartIdx);
 
             dnsEntry = AltNameNew(cert->heap);
             if (dnsEntry == NULL) {
                 WOLFSSL_MSG("\tOut of Memory");
                 return MEMORY_E;
             }
 
             dnsEntry->type = ASN_DNS_TYPE;
             dnsEntry->name = (char*)XMALLOC(strLen + 1, cert->heap,
                                          DYNAMIC_TYPE_ALTNAME);
             if (dnsEntry->name == NULL) {
                 WOLFSSL_MSG("\tOut of Memory");
                 XFREE(dnsEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
                 return MEMORY_E;
             }
             dnsEntry->len = strLen;
             XMEMCPY(dnsEntry->name, &input[idx], strLen);
             dnsEntry->name[strLen] = '\0';
 
             AddAltName(cert, dnsEntry);
 
             length -= strLen;
             idx    += strLen;
         }
     #ifndef IGNORE_NAME_CONSTRAINTS
-        else if (b == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | ASN_DIR_TYPE)) {
+        else if (current_byte ==
+                (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | ASN_DIR_TYPE)) {
             DNS_entry* dirEntry;
             int strLen;
             word32 lenStartIdx = idx;
 
             if (GetLength(input, &idx, &strLen, sz) < 0) {
                 WOLFSSL_MSG("\tfail: str length");
                 return ASN_PARSE_E;
             }
 
             if (GetSequence(input, &idx, &strLen, sz) < 0) {
                 WOLFSSL_MSG("\tfail: seq length");
                 return ASN_PARSE_E;
             }
             length -= (idx - lenStartIdx);
 
             dirEntry = AltNameNew(cert->heap);
             if (dirEntry == NULL) {
                 WOLFSSL_MSG("\tOut of Memory");
                 return MEMORY_E;
             }
 
             dirEntry->type = ASN_DIR_TYPE;
             dirEntry->name = (char*)XMALLOC(strLen + 1, cert->heap,
                                          DYNAMIC_TYPE_ALTNAME);
             if (dirEntry->name == NULL) {
                 WOLFSSL_MSG("\tOut of Memory");
                 XFREE(dirEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
                 return MEMORY_E;
             }
             dirEntry->len = strLen;
             XMEMCPY(dirEntry->name, &input[idx], strLen);
             dirEntry->name[strLen] = '\0';
             dirEntry->next = cert->altDirNames;
             cert->altDirNames = dirEntry;
 
             length -= strLen;
             idx    += strLen;
         }
-        else if (b == (ASN_CONTEXT_SPECIFIC | ASN_RFC822_TYPE)) {
+        else if (current_byte == (ASN_CONTEXT_SPECIFIC | ASN_RFC822_TYPE)) {
             DNS_entry* emailEntry;
             int strLen;
             word32 lenStartIdx = idx;
 
             if (GetLength(input, &idx, &strLen, sz) < 0) {
                 WOLFSSL_MSG("\tfail: str length");
                 return ASN_PARSE_E;
             }
             length -= (idx - lenStartIdx);
 
             emailEntry = AltNameNew(cert->heap);
             if (emailEntry == NULL) {
                 WOLFSSL_MSG("\tOut of Memory");
                 return MEMORY_E;
             }
 
             emailEntry->type = ASN_RFC822_TYPE;
             emailEntry->name = (char*)XMALLOC(strLen + 1, cert->heap,
                                          DYNAMIC_TYPE_ALTNAME);
             if (emailEntry->name == NULL) {
                 WOLFSSL_MSG("\tOut of Memory");
                 XFREE(emailEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
                 return MEMORY_E;
             }
             emailEntry->len = strLen;
             XMEMCPY(emailEntry->name, &input[idx], strLen);
             emailEntry->name[strLen] = '\0';
 
             emailEntry->next = cert->altEmailNames;
             cert->altEmailNames = emailEntry;
 
             length -= strLen;
             idx    += strLen;
         }
-        else if (b == (ASN_CONTEXT_SPECIFIC | ASN_URI_TYPE)) {
+        else if (current_byte == (ASN_CONTEXT_SPECIFIC | ASN_URI_TYPE)) {
             DNS_entry* uriEntry;
             int strLen;
             word32 lenStartIdx = idx;
 
             WOLFSSL_MSG("\tPutting URI into list but not using");
             if (GetLength(input, &idx, &strLen, sz) < 0) {
                 WOLFSSL_MSG("\tfail: str length");
                 return ASN_PARSE_E;
             }
             length -= (idx - lenStartIdx);
 
             /* check that strLen at index is not past input buffer */
             if (strLen + (int)idx > sz) {
                 return BUFFER_E;
             }
 
         #if !defined(WOLFSSL_NO_ASN_STRICT) && !defined(WOLFSSL_FPKI)
             /* Verify RFC 5280 Sec 4.2.1.6 rule:
                 "The name MUST NOT be a relative URI" */
 
             {
                 int i;
 
                 /* skip past scheme (i.e http,ftp,...) finding first ':' char */
                 for (i = 0; i < strLen; i++) {
                     if (input[idx + i] == ':') {
                         break;
                     }
                     if (input[idx + i] == '/') {
                         WOLFSSL_MSG("\tAlt Name must be absolute URI");
                         WOLFSSL_ERROR_VERBOSE(ASN_ALT_NAME_E);
                         return ASN_ALT_NAME_E;
                     }
                 }
 
                 /* test if no ':' char was found and test that the next two
                  * chars are "//" to match the pattern "://" */
                 if (i >= strLen - 2 || (input[idx + i + 1] != '/' ||
                                         input[idx + i + 2] != '/')) {
                     WOLFSSL_MSG("\tAlt Name must be absolute URI");
                     WOLFSSL_ERROR_VERBOSE(ASN_ALT_NAME_E);
                     return ASN_ALT_NAME_E;
                 }
             }
         #endif
 
             uriEntry = AltNameNew(cert->heap);
             if (uriEntry == NULL) {
                 WOLFSSL_MSG("\tOut of Memory");
                 return MEMORY_E;
             }
 
             uriEntry->type = ASN_URI_TYPE;
             uriEntry->name = (char*)XMALLOC(strLen + 1, cert->heap,
                                          DYNAMIC_TYPE_ALTNAME);
             if (uriEntry->name == NULL) {
                 WOLFSSL_MSG("\tOut of Memory");
                 XFREE(uriEntry, cert->heap, DYNAMIC_TYPE_ALTNAME);
                 return MEMORY_E;
             }
             uriEntry->len = strLen;
             XMEMCPY(uriEntry->name, &input[idx], strLen);
             uriEntry->name[strLen] = '\0';
 
             AddAltName(cert, uriEntry);
 
             length -= strLen;
             idx    += strLen;
         }
 #if defined(WOLFSSL_QT) || defined(OPENSSL_ALL) || defined(WOLFSSL_IP_ALT_NAME)
-        else if (b == (ASN_CONTEXT_SPECIFIC | ASN_IP_TYPE)) {
+        else if (current_byte == (ASN_CONTEXT_SPECIFIC | ASN_IP_TYPE)) {
             DNS_entry* ipAddr;
             int strLen;
             word32 lenStartIdx = idx;
             WOLFSSL_MSG("Decoding Subject Alt. Name: IP Address");
 
             if (GetLength(input, &idx, &strLen, sz) < 0) {
                 WOLFSSL_MSG("\tfail: str length");
                 return ASN_PARSE_E;
             }
             length -= (idx - lenStartIdx);
             /* check that strLen at index is not past input buffer */
             if (strLen + (int)idx > sz) {
                 return BUFFER_E;
             }
 
             ipAddr = AltNameNew(cert->heap);
             if (ipAddr == NULL) {
                 WOLFSSL_MSG("\tOut of Memory");
                 return MEMORY_E;
             }
 
             ipAddr->type = ASN_IP_TYPE;
             ipAddr->name = (char*)XMALLOC(strLen + 1, cert->heap,
                                          DYNAMIC_TYPE_ALTNAME);
             if (ipAddr->name == NULL) {
                 WOLFSSL_MSG("\tOut of Memory");
                 XFREE(ipAddr, cert->heap, DYNAMIC_TYPE_ALTNAME);
                 return MEMORY_E;
             }
             ipAddr->len = strLen;
             XMEMCPY(ipAddr->name, &input[idx], strLen);
             ipAddr->name[strLen] = '\0';
 
         #if defined(OPENSSL_ALL) || defined(WOLFSSL_IP_ALT_NAME)
             if (GenerateDNSEntryIPString(ipAddr, cert->heap) != 0) {
                 WOLFSSL_MSG("\tOut of Memory for IP string");
                 XFREE(ipAddr->name, cert->heap, DYNAMIC_TYPE_ALTNAME);
                 XFREE(ipAddr, cert->heap, DYNAMIC_TYPE_ALTNAME);
                 return MEMORY_E;
             }
         #endif /* OPENSSL_ALL || WOLFSSL_IP_ALT_NAME */
             AddAltName(cert, ipAddr);
 
             length -= strLen;
             idx    += strLen;
         }
 #endif /* WOLFSSL_QT || OPENSSL_ALL */
 #endif /* IGNORE_NAME_CONSTRAINTS */
-        else if (b == (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | ASN_OTHER_TYPE))
-        {
+        else if (current_byte ==
+                (ASN_CONTEXT_SPECIFIC | ASN_CONSTRUCTED | ASN_OTHER_TYPE)) {
             int strLen;
             word32 lenStartIdx = idx;
             word32 oid = 0;
             int    ret = 0;
 
             if (GetLength(input, &idx, &strLen, sz) < 0) {
                 WOLFSSL_MSG("\tfail: other name length");
                 return ASN_PARSE_E;
             }
             /* Consume the rest of this sequence. */
             length -= (strLen + idx - lenStartIdx);
 
             if (GetObjectId(input, &idx, &oid, oidCertAltNameType, sz) < 0) {
                 WOLFSSL_MSG("\tbad OID");
                 return ASN_PARSE_E;
             }
 
             /* handle parsing other type alt names */
             switch (oid) {
             #ifdef WOLFSSL_SEP
                 case HW_NAME_OID:
                     ret = DecodeSepHwAltName(cert, input, &idx, sz);
                     if (ret != 0)
                         return ret;
                     break;
             #endif /* WOLFSSL_SEP */
             #ifdef WOLFSSL_FPKI
                 case FASCN_OID:
                 case UPN_OID:
                     ret = DecodeConstructedOtherName(cert, input, &idx, sz,
                             oid);
                     if (ret != 0)
                         return ret;
                     break;
             #endif /* WOLFSSL_FPKI */
 
                 default:
                     WOLFSSL_MSG("\tUnsupported other name type, skipping");
                     if (GetLength(input, &idx, &strLen, sz) < 0) {
                         /* check to skip constructed other names too */
                         if (DecodeConstructedOtherName(cert, input, &idx, sz,
                                     oid) != 0) {
                             WOLFSSL_MSG("\tfail: unsupported other name length");
                             return ASN_PARSE_E;
                         }
                     }
                     else {
                         idx += strLen;
                     }
             }
             (void)ret;
         }
         else {
             int strLen;
             word32 lenStartIdx = idx;
 
             WOLFSSL_MSG("\tUnsupported name type, skipping");
 
             if (GetLength(input, &idx, &strLen, sz) < 0) {
                 WOLFSSL_MSG("\tfail: unsupported name length");
                 return ASN_PARSE_E;
             }
             length -= (strLen + idx - lenStartIdx);
             idx += strLen;
         }
     }
 
     return 0;
 #else
     word32 idx = 0;
     int length = 0;
     int ret = 0;
 
     WOLFSSL_ENTER("DecodeAltNames");
 
     /* Get SEQUENCE and expect all data to be accounted for. */
     if (GetASN_Sequence(input, &idx, &length, sz, 1) != 0) {
         WOLFSSL_MSG("\tBad Sequence");
         ret = ASN_PARSE_E;
     }
 
     if ((ret == 0) && (length == 0)) {
         /* RFC 5280 4.2.1.6.  Subject Alternative Name
            If the subjectAltName extension is present, the sequence MUST
            contain at least one entry. */
         WOLFSSL_ERROR_VERBOSE(ASN_PARSE_E);
         ret = ASN_PARSE_E;
     }
     if (ret == 0) {
     #ifdef OPENSSL_ALL
         cert->extSubjAltNameSrc = input;
         cert->extSubjAltNameSz = sz;
     #endif
 
         cert->weOwnAltNames = 1;
 
         if (length + (int)idx != sz) {
             ret = ASN_PARSE_E;
         }
     }
 
     while ((ret == 0) && ((int)idx < sz)) {
         ASNGetData dataASN[altNameASN_Length];
 
         /* Clear dynamic data items. */
         XMEMSET(dataASN, 0, sizeof(dataASN));
         /* Parse GeneralName with the choices supported. */
         GetASN_Choice(&dataASN[ALTNAMEASN_IDX_GN], generalNameChoice);
         /* Decode a GeneralName choice. */
         ret = GetASN_Items(altNameASN, dataASN, altNameASN_Length, 0, input,
                            &idx, sz);
         if (ret == 0) {
             ret = DecodeGeneralName(input, &idx, dataASN[ALTNAMEASN_IDX_GN].tag,
                 dataASN[ALTNAMEASN_IDX_GN].length, cert);
         }
     }
 
     return ret;
 #endif
 }
 
 #ifdef WOLFSSL_ASN_TEMPLATE
 /* ASN.1 template for BasicContraints.
  * X.509: RFC 5280, 4.2.1.9 - BasicConstraints.
  */
