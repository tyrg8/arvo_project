commit c981407ff4984610b1be08acf89c74cd62c20e7b
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Sun Oct 29 21:10:46 2023 +0100

    sqlite_rtree_bulk_load.c: silence Coverity Scan warning about unchecked returned value

diff --git a/ogr/ogrsf_frmts/sqlite/sqlite_rtree_bulk_load/sqlite_rtree_bulk_load.c b/ogr/ogrsf_frmts/sqlite/sqlite_rtree_bulk_load/sqlite_rtree_bulk_load.c
index 9e70b9d49f..f3becaa54c 100644
--- a/ogr/ogrsf_frmts/sqlite/sqlite_rtree_bulk_load/sqlite_rtree_bulk_load.c
+++ b/ogr/ogrsf_frmts/sqlite/sqlite_rtree_bulk_load/sqlite_rtree_bulk_load.c
@@ -119,6 +119,16 @@ struct sqlite_rtree_bl {
     void (*free)(void *);
 };
 
+#if defined(__GNUC__) && __GNUC__ >= 4
+#define CPL_UNUSED __attribute((__unused__))
+#else
+#define CPL_UNUSED
+#endif
+
+static void CPL_IGNORE_RET_VAL_INT(CPL_UNUSED int v) {
+    (void)v;
+}
+
 static inline NUMTYPE min0(NUMTYPE x, NUMTYPE y) {
     return x < y ? x : y;
 }
@@ -800,88 +810,88 @@ static bool insert_into_db(const struct rtree_insert_context* ctxt,
 bool SQLITE_RTREE_BL_SYMBOL(sqlite_rtree_bl_serialize)(
                                const struct sqlite_rtree_bl *tr,
                                sqlite3* hDB,
                                const char* rtree_name,
                                const char* rowid_colname,
                                const char* minx_colname,
                                const char* miny_colname,
                                const char* maxx_colname,
                                const char* maxy_colname,
                                char** p_error_msg) {
     if (p_error_msg) {
         *p_error_msg = NULL;
     }
 
     char* sql = sqlite3_mprintf(
         "CREATE VIRTUAL TABLE \"%w\" USING rtree(\"%w\", \"%w\", \"%w\", \"%w\", \"%w\")",
         rtree_name, rowid_colname, minx_colname, maxx_colname, miny_colname,
         maxy_colname);
     int ret = sqlite3_exec(hDB, sql, NULL, NULL, p_error_msg);
     sqlite3_free(sql);
     if (ret != SQLITE_OK) {
         return false;
     }
 
     if (tr->count == 0) {
         return true;
     }
 
     // Suppress default root node
     sql = sqlite3_mprintf("DELETE FROM \"%w_node\"", rtree_name);
     ret = sqlite3_exec(hDB, sql, NULL, NULL, p_error_msg);
     sqlite3_free(sql);
     if (ret != SQLITE_OK) {
         return false;
     }
 
     sqlite3_stmt *hStmtNode = NULL;
     sql = sqlite3_mprintf("INSERT INTO \"%w_node\" VALUES (?, ?)", rtree_name);
-    sqlite3_prepare_v2(hDB, sql, -1, &hStmtNode, NULL);
+    CPL_IGNORE_RET_VAL_INT(sqlite3_prepare_v2(hDB, sql, -1, &hStmtNode, NULL));
     sqlite3_free(sql);
     if (!hStmtNode) {
         return false;
     }
 
     sqlite3_stmt *hStmtParent = NULL;
     sql = sqlite3_mprintf("INSERT INTO \"%w_parent\" VALUES (?, ?)", rtree_name);
-    sqlite3_prepare_v2(hDB, sql, -1, &hStmtParent, NULL);
+    CPL_IGNORE_RET_VAL_INT(sqlite3_prepare_v2(hDB, sql, -1, &hStmtParent, NULL));
     sqlite3_free(sql);
     if (!hStmtParent) {
         sqlite3_finalize(hStmtNode);
         return false;
     }
 
     sqlite3_stmt *hStmtRowid = NULL;
     sql = sqlite3_mprintf("INSERT INTO \"%w_rowid\" VALUES (?, ?)", rtree_name);
-    sqlite3_prepare_v2(hDB, sql, -1, &hStmtRowid, NULL);
+    CPL_IGNORE_RET_VAL_INT(sqlite3_prepare_v2(hDB, sql, -1, &hStmtRowid, NULL));
     sqlite3_free(sql);
     if (!hStmtRowid) {
         sqlite3_finalize(hStmtNode);
         sqlite3_finalize(hStmtParent);
         return false;
     }
 
     rtree_insert_context ctxt;
     ctxt.hDB = hDB;
     ctxt.hStmtNode = hStmtNode;
     ctxt.hStmtParent = hStmtParent;
     ctxt.hStmtRowid = hStmtRowid;
     ctxt.node_capacity = tr->node_capacity;
     ctxt.tree_height = tr->height;
     ctxt.p_error_msg = p_error_msg;
 
     int64_t cur_nodeno = 1;
     bool ok = insert_into_db(&ctxt, tr->root, &cur_nodeno, 0, PASS_NODE);
     if (ok) {
         cur_nodeno = 1;
         ok = insert_into_db(&ctxt, tr->root, &cur_nodeno, 0, PASS_PARENT);
     }
     if (ok) {
         cur_nodeno = 1;
         ok = insert_into_db(&ctxt, tr->root, &cur_nodeno, 0, PASS_ROWID);
     }
 
     sqlite3_finalize(hStmtNode);
     sqlite3_finalize(hStmtParent);
     sqlite3_finalize(hStmtRowid);
     return ok;
 }
@@ -889,120 +899,120 @@ bool SQLITE_RTREE_BL_SYMBOL(sqlite_rtree_bl_serialize)(
 bool SQLITE_RTREE_BL_SYMBOL(sqlite_rtree_bl_from_feature_table)(
                                sqlite3* hDB,
                                const char* feature_table_name,
                                const char* feature_table_fid_colname,
                                const char* feature_table_geom_colname,
                                const char* rtree_name,
                                const char* rowid_colname,
                                const char* minx_colname,
                                const char* miny_colname,
                                const char* maxx_colname,
                                const char* maxy_colname,
                                size_t max_ram_usage,
                                char** p_error_msg)
 {
     char** papszResult = NULL;
     sqlite3_get_table(hDB, "PRAGMA page_size", &papszResult, NULL, NULL, NULL);
     const int page_size = atoi(papszResult[1]);
     sqlite3_free_table(papszResult);
 
     struct sqlite_rtree_bl* t = SQLITE_RTREE_BL_SYMBOL(sqlite_rtree_bl_new)(page_size);
     if (!t) {
         if (p_error_msg)
             *p_error_msg = my_sqlite3_strdup("not enough memory");
         return false;
     }
 
     sqlite3_stmt *hStmt = NULL;
     char *pszSQL =
             sqlite3_mprintf("SELECT \"%w\", ST_MinX(\"%w\"), ST_MaxX(\"%w\"), "
                             "ST_MinY(\"%w\"), ST_MaxY(\"%w\") FROM \"%w\" "
                             "WHERE \"%w\" NOT NULL AND NOT ST_IsEmpty(\"%w\")",
                             feature_table_fid_colname,
                             feature_table_geom_colname,
                             feature_table_geom_colname,
                             feature_table_geom_colname,
                             feature_table_geom_colname,
                             feature_table_name,
                             feature_table_geom_colname,
                             feature_table_geom_colname);
-    sqlite3_prepare_v2(hDB, pszSQL, -1, &hStmt, NULL);
+    CPL_IGNORE_RET_VAL_INT(sqlite3_prepare_v2(hDB, pszSQL, -1, &hStmt, NULL));
     sqlite3_free(pszSQL);
     if (!hStmt) {
         if (p_error_msg)
             *p_error_msg = my_sqlite3_strdup(sqlite3_errmsg(hDB));
         return false;
     }
 
     bool bMaxMemReached = false;
     while (sqlite3_step(hStmt) == SQLITE_ROW) {
         int64_t id = sqlite3_column_int64(hStmt, 0);
         const double minx = sqlite3_column_double(hStmt, 1);
         const double maxx = sqlite3_column_double(hStmt, 2);
         const double miny = sqlite3_column_double(hStmt, 3);
         const double maxy = sqlite3_column_double(hStmt, 4);
         if (!SQLITE_RTREE_BL_SYMBOL(sqlite_rtree_bl_insert)(t, id, minx, miny, maxx, maxy)) {
             sqlite3_finalize(hStmt);
             if (p_error_msg)
                 *p_error_msg = my_sqlite3_strdup("not enough memory");
             return false;
         }
         if (max_ram_usage != 0 &&
             SQLITE_RTREE_BL_SYMBOL(sqlite_rtree_bl_ram_usage)(t) > max_ram_usage) {
             bMaxMemReached = true;
             break;
         }
     }
 
     bool bOK = SQLITE_RTREE_BL_SYMBOL(sqlite_rtree_bl_serialize)(
                                t, hDB,
                                rtree_name,
                                rowid_colname,
                                minx_colname,
                                miny_colname,
                                maxx_colname,
                                maxy_colname,
                                p_error_msg);
 
     SQLITE_RTREE_BL_SYMBOL(sqlite_rtree_bl_free)(t);
 
     if (bOK && bMaxMemReached) {
 
         sqlite3_stmt *hStmtInsert = NULL;
         pszSQL =
                 sqlite3_mprintf("INSERT INTO \"%w\" VALUES (?,?,?,?,?)",
                                 rtree_name);
-        sqlite3_prepare_v2(hDB, pszSQL, -1, &hStmtInsert, NULL);
+        CPL_IGNORE_RET_VAL_INT(sqlite3_prepare_v2(hDB, pszSQL, -1, &hStmtInsert, NULL));
         sqlite3_free(pszSQL);
         if (!hStmtInsert) {
             if (p_error_msg)
                 *p_error_msg = my_sqlite3_strdup(sqlite3_errmsg(hDB));
             sqlite3_finalize(hStmt);
             return false;
         }
         while (sqlite3_step(hStmt) == SQLITE_ROW) {
             int64_t id = sqlite3_column_int64(hStmt, 0);
             const double minx = sqlite3_column_double(hStmt, 1);
             const double maxx = sqlite3_column_double(hStmt, 2);
             const double miny = sqlite3_column_double(hStmt, 3);
             const double maxy = sqlite3_column_double(hStmt, 4);
 
             sqlite3_reset(hStmtInsert);
             sqlite3_bind_int64(hStmtInsert, 1, id);
             sqlite3_bind_double(hStmtInsert, 2, minx);
             sqlite3_bind_double(hStmtInsert, 3, maxx);
             sqlite3_bind_double(hStmtInsert, 4, miny);
             sqlite3_bind_double(hStmtInsert, 5, maxy);
             int ret = sqlite3_step(hStmtInsert);
             if (ret != SQLITE_OK && ret != SQLITE_DONE) {
                 if (p_error_msg)
                     *p_error_msg = my_sqlite3_strdup(sqlite3_errmsg(hDB));
                 bOK = false;
                 break;
             }
         }
         sqlite3_finalize(hStmtInsert);
     }
 
     sqlite3_finalize(hStmt);
     return bOK;
 }
