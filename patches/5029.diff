commit a4eaa51d5a2c7a339781513cbe3ad54a9a936145
Author: Alan Thomas <athomas@thinkspatial.com.au>
Date:   Mon Jan 8 11:35:07 2018 +0000

    DXF: Fix out-of-bounds index in MULTILEADER code. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=5029 et al. Credit to OSS-Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@41223 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp b/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp
index e0c5bff3e9..06b34a35e7 100644
--- a/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp
+++ b/gdal/ogr/ogrsf_frmts/dxf/ogrdxf_leader.cpp
@@ -318,733 +318,741 @@ struct DXFMLEADERLeader {
 OGRDXFFeature *OGRDXFLayer::TranslateMLEADER()
 
 {
     char szLineBuf[257];
     int nCode = 0;
 
     // This is a dummy feature object used to store style properties
     // and the like. We end up deleting it without returning it
     OGRDXFFeature *poOverallFeature = new OGRDXFFeature( poFeatureDefn );
 
     DXFMLEADERLeader oLeader;
     std::vector<DXFMLEADERLeader> aoLeaders;
 
     std::vector<DXFMLEADERVertex> oLeaderLine;
     double dfCurrentX = 0.0;
     double dfCurrentY = 0.0;
     double dfCurrentX2 = 0.0;
     double dfCurrentY2 = 0.0;
     size_t nCurrentVertex = 0;
 
     double dfScale = 1.0;
     bool bHasDogleg = true;
     CPLString osLeaderColor = "0";
 
     CPLString osText;
     CPLString osTextStyleHandle;
     double dfTextX = 0.0;
     double dfTextY = 0.0;
     int nTextAlignment = 1; // 1 = left, 2 = center, 3 = right
     double dfTextAngle = 0.0;
     double dfTextHeight = 4.0;
 
     CPLString osBlockHandle;
     OGRDXFInsertTransformer oBlockTransformer;
     CPLString osBlockAttributeHandle;
     // Map of ATTDEF handles to attribute text
     std::map<CPLString, CPLString> oBlockAttributes;
 
     CPLString osArrowheadBlockHandle;
     double dfArrowheadSize = 4.0;
 
     // The different leader line types
     const int MLT_NONE = 0;
     const int MLT_STRAIGHT = 1;
     const int MLT_SPLINE = 2;
     int nLeaderLineType = MLT_STRAIGHT;
 
     // Group codes mean different things in different sections of the
     // MLEADER entity. We need to keep track of the section we are in.
     const int MLS_COMMON = 0;
     const int MLS_CONTEXT_DATA = 1;
     const int MLS_LEADER = 2;
     const int MLS_LEADER_LINE = 3;
     int nSection = MLS_COMMON;
 
     // The way the 30x group codes work is missing from the DXF docs.
     // We assume that the sections are always nested as follows:
 
     // ... [this part is identified as MLS_COMMON]
     // 300 CONTEXT_DATA{
     //   ...
     //   302 LEADER{
     //     ...
     //     304 LEADER_LINE{
     //       ...
     //     305 }
     //     304 LEADER_LINE{
     //       ...
     //     305 }
     //     ...
     //   303 }
     //   302 LEADER{
     //     ...
     //   303 }
     //   ...
     // 301 }
     // ... [MLS_COMMON]
 
     while( (nCode = poDS->ReadValue(szLineBuf,sizeof(szLineBuf))) > 0 )
     {
         switch( nSection )
         {
           case MLS_COMMON:
             switch( nCode )
             {
               case 300:
                 nSection = MLS_CONTEXT_DATA;
                 break;
 
               case 342:
                 // 342 is the entity handle of the BLOCK_RECORD table entry that
                 // corresponds to the arrowhead block.
                 osArrowheadBlockHandle = szLineBuf;
                 break;
 
               case 42:
                 // TODO figure out difference between 42 and 140 for arrowheadsize
                 dfArrowheadSize = CPLAtof( szLineBuf );
                 break;
 
               case 330:
                 osBlockAttributeHandle = szLineBuf;
                 break;
 
               case 302:
                 if( osBlockAttributeHandle != "" )
                 {
                     oBlockAttributes[osBlockAttributeHandle] =
                         TextUnescape( szLineBuf, true );
                     osBlockAttributeHandle = "";
                 }
                 break;
 
               case 91:
                 osLeaderColor = szLineBuf;
                 break;
 
               case 170:
                 nLeaderLineType = atoi(szLineBuf);
                 break;
 
               case 291:
                 bHasDogleg = atoi(szLineBuf) != 0;
                 break;
 
               default:
                 TranslateGenericProperty( poOverallFeature, nCode, szLineBuf );
                 break;
             }
             break;
 
           case MLS_CONTEXT_DATA:
             switch( nCode )
             {
               case 301:
                 nSection = MLS_COMMON;
                 break;
 
               case 302:
                 nSection = MLS_LEADER;
                 break;
 
               case 304:
                 osText = TextUnescape(szLineBuf, true);
                 break;
 
               case 40:
                 dfScale = CPLAtof( szLineBuf );
                 break;
 
               case 340:
                 // 340 is the entity handle of the STYLE table entry that
                 // corresponds to the text style.
                 osTextStyleHandle = szLineBuf;
                 break;
 
               case 12:
                 dfTextX = CPLAtof( szLineBuf );
                 break;
 
               case 22:
                 dfTextY = CPLAtof( szLineBuf );
                 break;
 
               case 41:
                 dfTextHeight = CPLAtof( szLineBuf );
                 break;
 
               case 42:
                 dfTextAngle = CPLAtof( szLineBuf ) * 180 / M_PI;
                 break;
 
               case 171:
                 nTextAlignment = atoi( szLineBuf );
                 break;
 
               case 341:
                 // 341 is the entity handle of the BLOCK_RECORD table entry that
                 // corresponds to the block content of this MLEADER.
                 osBlockHandle = szLineBuf;
                 break;
 
               case 15:
                 oBlockTransformer.dfXOffset = CPLAtof( szLineBuf );
                 break;
 
               case 25:
                 oBlockTransformer.dfYOffset = CPLAtof( szLineBuf );
                 break;
 
               case 16:
                 oBlockTransformer.dfXScale = CPLAtof( szLineBuf );
                 break;
 
               case 26:
                 oBlockTransformer.dfYScale = CPLAtof( szLineBuf );
                 break;
 
               case 46:
                 oBlockTransformer.dfAngle = CPLAtof( szLineBuf );
                 break;
             }
             break;
 
           case MLS_LEADER:
             switch( nCode )
             {
               case 303:
                 nSection = MLS_CONTEXT_DATA;
                 aoLeaders.push_back( oLeader );
                 oLeader = DXFMLEADERLeader();
                 break;
 
               case 304:
                 nSection = MLS_LEADER_LINE;
                 break;
 
               case 10:
                 oLeader.dfLandingX = CPLAtof(szLineBuf);
                 break;
 
               case 20:
                 oLeader.dfLandingY = CPLAtof(szLineBuf);
                 break;
 
               case 11:
                 oLeader.dfDoglegVectorX = CPLAtof(szLineBuf);
                 break;
 
               case 21:
                 oLeader.dfDoglegVectorY = CPLAtof(szLineBuf);
                 break;
 
               case 12:
                 dfCurrentX = CPLAtof(szLineBuf);
                 break;
 
               case 22:
                 dfCurrentY = CPLAtof(szLineBuf);
                 break;
 
               case 13:
                 dfCurrentX2 = CPLAtof(szLineBuf);
                 break;
 
               case 23:
                 dfCurrentY2 = CPLAtof(szLineBuf);
                 oLeader.aoDoglegBreaks.push_back( std::make_pair(
                     DXFTriple( dfCurrentX, dfCurrentY, 0.0 ),
                     DXFTriple( dfCurrentX2, dfCurrentY2, 0.0 ) ) );
                 break;
 
               case 40:
                 oLeader.dfDoglegLength = CPLAtof(szLineBuf);
                 break;
             }
             break;
 
           case MLS_LEADER_LINE:
             switch( nCode )
             {
               case 305:
                 nSection = MLS_LEADER;
                 oLeader.aaoLeaderLines.push_back( oLeaderLine );
                 oLeaderLine.clear();
                 break;
 
               case 10:
                 dfCurrentX = CPLAtof(szLineBuf);
                 break;
 
               case 20:
                 dfCurrentY = CPLAtof(szLineBuf);
                 oLeaderLine.push_back(
                     DXFMLEADERVertex( dfCurrentX, dfCurrentY ) );
                 break;
 
               case 90:
                 nCurrentVertex = atoi(szLineBuf);
-                if( nCurrentVertex > oLeaderLine.size() )
+                if( nCurrentVertex >= oLeaderLine.size() )
                 {
                     CPLError( CE_Warning, CPLE_AppDefined,
                         "Wrong group code 90 in LEADER_LINE: %s", szLineBuf );
                     DXF_LAYER_READER_ERROR();
                     delete poOverallFeature;
                     return nullptr;
                 }
                 break;
 
               case 11:
                 dfCurrentX = CPLAtof(szLineBuf);
                 break;
 
               case 21:
                 dfCurrentY = CPLAtof(szLineBuf);
                 break;
 
               case 12:
                 dfCurrentX2 = CPLAtof(szLineBuf);
                 break;
 
               case 22:
+                if( nCurrentVertex >= oLeaderLine.size() )
+                {
+                    CPLError( CE_Warning, CPLE_AppDefined,
+                        "Misplaced group code 22 in LEADER_LINE" );
+                    DXF_LAYER_READER_ERROR();
+                    delete poOverallFeature;
+                    return nullptr;
+                }
                 dfCurrentY2 = CPLAtof(szLineBuf);
                 oLeaderLine[nCurrentVertex].aoBreaks.push_back( std::make_pair(
                     DXFTriple( dfCurrentX, dfCurrentY, 0.0 ),
                     DXFTriple( dfCurrentX2, dfCurrentY2, 0.0 ) ) );
                 break;
             }
             break;
         }
     }
 
     if( nCode < 0 )
     {
         DXF_LAYER_READER_ERROR();
         delete poOverallFeature;
         return nullptr;
     }
     if( nCode == 0 )
         poDS->UnreadValue();
 
     // Convert the block handle to a block name. If there is no block,
     // osBlockName will remain empty.
     CPLString osBlockName;
 
     if( osBlockHandle != "" )
         osBlockName = poDS->GetBlockNameByRecordHandle( osBlockHandle );
 
 /* -------------------------------------------------------------------- */
 /*      Add the landing and arrowhead onto each leader line, and add    */
 /*      the dogleg, if present, onto the leader.                        */
 /* -------------------------------------------------------------------- */
     OGRDXFFeature* poLeaderFeature = poOverallFeature->CloneDXFFeature();
     poLeaderFeature->oStyleProperties["Color"] = osLeaderColor;
 
     OGRMultiLineString *poMLS = new OGRMultiLineString();
 
     // Arrowheads should be the same color as the leader line. If the leader
     // line is ByBlock or ByLayer then the arrowhead should be "owned" by the
     // overall feature for styling purposes.
     OGRDXFFeature* poArrowheadOwningFeature = poLeaderFeature;
     if( ( atoi(osLeaderColor) & 0xC2000000 ) == 0xC0000000 )
         poArrowheadOwningFeature = poOverallFeature;
 
     for( std::vector<DXFMLEADERLeader>::iterator oIt = aoLeaders.begin();
          nLeaderLineType != MLT_NONE && oIt != aoLeaders.end();
          ++oIt )
     {
         const bool bLeaderHasDogleg = bHasDogleg &&
             nLeaderLineType != MLT_SPLINE &&
             oIt->dfDoglegLength != 0.0 &&
             ( oIt->dfDoglegVectorX != 0.0 || oIt->dfDoglegVectorY != 0.0 );
 
         // We assume that the dogleg vector in the DXF is a unit vector.
         // Safe assumption? Who knows. The documentation is so bad.
         const double dfDoglegX = oIt->dfLandingX +
             oIt->dfDoglegVectorX * oIt->dfDoglegLength;
         const double dfDoglegY = oIt->dfLandingY +
             oIt->dfDoglegVectorY * oIt->dfDoglegLength;
 
         // When the dogleg is turned off or we are in spline mode, it seems
         // that the dogleg and landing data are still present in the DXF file,
         // but they are not supposed to be drawn.
         if( !bHasDogleg || nLeaderLineType == MLT_SPLINE )
         {
             oIt->dfLandingX = dfDoglegX;
             oIt->dfLandingY = dfDoglegY;
         }
 
         // Iterate through each leader line
         for( const auto& aoLineVertices : oIt->aaoLeaderLines )
         {
             if( aoLineVertices.empty() )
                 continue;
 
             OGRLineString* poLeaderLine = new OGRLineString();
 
             // Get the first line segment for arrowhead purposes
             poLeaderLine->addPoint(
                 aoLineVertices[0].oCoords.dfX,
                 aoLineVertices[0].oCoords.dfY );
 
             if( aoLineVertices.size() > 1 )
             {
                 poLeaderLine->addPoint(
                     aoLineVertices[1].oCoords.dfX,
                     aoLineVertices[1].oCoords.dfY );
             }
             else
             {
                 poLeaderLine->addPoint( oIt->dfLandingX, oIt->dfLandingY );
             }
 
             // Add an arrowhead if required
             InsertArrowhead( poArrowheadOwningFeature,
                 osArrowheadBlockHandle, poLeaderLine,
                 dfArrowheadSize * dfScale );
 
             poLeaderLine->setNumPoints( 1 );
 
             // Go through the vertices of the leader line, adding them,
             // as well as break start and end points, to the linestring.
             for( size_t iVertex = 0; iVertex < aoLineVertices.size();
                  iVertex++ )
             {
                 if( iVertex > 0 )
                 {
                     poLeaderLine->addPoint(
                         aoLineVertices[iVertex].oCoords.dfX,
                         aoLineVertices[iVertex].oCoords.dfY );
                 }
 
                 // Breaks are ignored for spline leaders
                 if( nLeaderLineType != MLT_SPLINE )
                 {
                     for( const auto& oBreak :
                          aoLineVertices[iVertex].aoBreaks )
                     {
                         poLeaderLine->addPoint( oBreak.first.dfX,
                             oBreak.first.dfY );
 
                         poMLS->addGeometryDirectly( poLeaderLine );
                         poLeaderLine = new OGRLineString();
 
                         poLeaderLine->addPoint( oBreak.second.dfX,
                             oBreak.second.dfY );
                     }
                 }
             }
 
             // Add the final vertex (the landing) to the end of the line
             poLeaderLine->addPoint( oIt->dfLandingX, oIt->dfLandingY );
 
             // Make the spline geometry for spline leaders
             if( nLeaderLineType == MLT_SPLINE )
             {
                 DXFTriple oEndTangent;
                 if( osBlockName.empty() )
                 {
                     oEndTangent = DXFTriple( oIt->dfDoglegVectorX,
                         oIt->dfDoglegVectorY, 0 );
                 }
                 InterpolateSpline( poLeaderLine, oEndTangent );
             }
 
             poMLS->addGeometryDirectly( poLeaderLine );
         }
 
         // Add the dogleg as a separate line in the MLS
         if( bLeaderHasDogleg )
         {
             OGRLineString *poDoglegLine = new OGRLineString();
             poDoglegLine->addPoint( oIt->dfLandingX, oIt->dfLandingY );
 
             // Interrupt the dogleg line at breaks
             for( const auto& oBreak : oIt->aoDoglegBreaks )
             {
                 poDoglegLine->addPoint( oBreak.first.dfX,
                     oBreak.first.dfY );
 
                 poMLS->addGeometryDirectly( poDoglegLine );
                 poDoglegLine = new OGRLineString();
 
                 poDoglegLine->addPoint( oBreak.second.dfX,
                     oBreak.second.dfY );
             }
 
             poDoglegLine->addPoint( dfDoglegX, dfDoglegY );
             poMLS->addGeometryDirectly( poDoglegLine );
         }
     }
 
     poLeaderFeature->SetGeometryDirectly( poMLS );
 
     PrepareLineStyle( poLeaderFeature, poOverallFeature );
 
 /* -------------------------------------------------------------------- */
 /*      If we have block content, insert that block.                    */
 /* -------------------------------------------------------------------- */
 
     if( osBlockName != "" )
     {
         oBlockTransformer.dfXScale *= dfScale;
         oBlockTransformer.dfYScale *= dfScale;
 
         DXFBlockDefinition *poBlock = poDS->LookupBlock( osBlockName );
 
         std::map<OGRDXFFeature *, CPLString> oBlockAttributeValues;
 
         // If we have block attributes and will need to output them,
         // go through all the features on this block, looking for
         // ATTDEFs whose handle is in our list of attribute handles
         if( poBlock && !oBlockAttributes.empty() &&
             ( poDS->InlineBlocks() ||
             poOverallFeature->GetFieldIndex( "BlockAttributes" ) != -1 ) )
         {
             for( std::vector<OGRDXFFeature *>::iterator oIt =
                 poBlock->apoFeatures.begin();
                 oIt != poBlock->apoFeatures.end();
                 ++oIt )
             {
                 const char* pszHandle =
                     (*oIt)->GetFieldAsString( "EntityHandle" );
 
                 if( pszHandle && oBlockAttributes.count( pszHandle ) > 0 )
                     oBlockAttributeValues[*oIt] = oBlockAttributes[pszHandle];
             }
         }
 
         OGRDXFFeature *poBlockFeature = poOverallFeature->CloneDXFFeature();
 
         // If not inlining the block, insert a reference and add attributes
         // to this feature.
         if( !poDS->InlineBlocks() )
         {
             poBlockFeature = InsertBlockReference( osBlockName,
                 oBlockTransformer, poBlockFeature );
 
             if( !oBlockAttributes.empty() && 
                 poOverallFeature->GetFieldIndex( "BlockAttributes" ) != -1 )
             {
                 std::vector<char *> apszAttribs;
 
                 for( std::map<OGRDXFFeature *, CPLString>::iterator oIt =
                     oBlockAttributeValues.begin();
                     oIt != oBlockAttributeValues.end();
                     ++oIt )
                 {
                     // Store the attribute tag and the text value as
                     // a space-separated entry in the BlockAttributes field
                     CPLString osAttribString = oIt->first->osAttributeTag;
                     osAttribString += " ";
                     osAttribString += oIt->second;
 
                     apszAttribs.push_back(
                         new char[osAttribString.length() + 1] );
                     CPLStrlcpy( apszAttribs.back(), osAttribString.c_str(),
                         osAttribString.length() + 1 );
                 }
 
                 apszAttribs.push_back( nullptr );
 
                 poBlockFeature->SetField( "BlockAttributes", &apszAttribs[0] );
             }
 
             apoPendingFeatures.push( poBlockFeature );
         }
         else
         {
             // Insert the block inline.
             std::queue<OGRDXFFeature *> apoExtraFeatures;
             try
             {
                 poBlockFeature = InsertBlockInline( osBlockName,
                     oBlockTransformer, poBlockFeature, apoExtraFeatures,
                     true, poDS->ShouldMergeBlockGeometries() );
             }
             catch( const std::invalid_argument& )
             {
                 // Block doesn't exist
                 delete poBlockFeature;
                 poBlockFeature = nullptr;
             }
 
             // Add the block geometries to the pending feature stack.
             if( poBlockFeature )
             {
                 apoPendingFeatures.push( poBlockFeature );
             }
             while( !apoExtraFeatures.empty() )
             {
                 apoPendingFeatures.push( apoExtraFeatures.front() );
                 apoExtraFeatures.pop();
             }
 
             // Also add any attributes to the pending feature stack.
             for( std::map<OGRDXFFeature *, CPLString>::iterator oIt =
                      oBlockAttributeValues.begin();
                  oIt != oBlockAttributeValues.end();
                  ++oIt )
             {
                 OGRDXFFeature *poAttribFeature = oIt->first->CloneDXFFeature();
 
                 poAttribFeature->SetField( "Text", oIt->second );
 
                 // Replace text in the style string
                 const char* poStyleString = poAttribFeature->GetStyleString();
                 if( poStyleString && STARTS_WITH(poStyleString, "LABEL(") )
                 {
                     CPLString osNewStyle = poStyleString;
                     const size_t nTextStartPos = osNewStyle.find( ",t:\"" );
                     if( nTextStartPos != std::string::npos )
                     {
                         size_t nTextEndPos = nTextStartPos + 4;
                         while( nTextEndPos < osNewStyle.size() &&
                             osNewStyle[nTextEndPos] != '\"' )
                         {
                             nTextEndPos++;
                             if( osNewStyle[nTextEndPos] == '\\' )
                                 nTextEndPos++;
                         }
 
                         if( nTextEndPos < osNewStyle.size() )
                         {
                             osNewStyle.replace( nTextStartPos + 4,
                                 nTextEndPos - ( nTextStartPos + 4 ),
                                 oIt->second );
                             poAttribFeature->SetStyleString( osNewStyle );
                         }
                     }
                 }
 
                 // The following bits are copied from
                 // OGRDXFLayer::InsertBlockInline
                 if( poAttribFeature->GetGeometryRef() )
                 {
                     poAttribFeature->GetGeometryRef()->transform(
                         &oBlockTransformer );
                 }
 
                 if( EQUAL( poAttribFeature->GetFieldAsString( "Layer" ), "0" ) &&
                     !EQUAL( poOverallFeature->GetFieldAsString( "Layer" ), "" ) )
                 {
                     poAttribFeature->SetField( "Layer",
                         poOverallFeature->GetFieldAsString( "Layer" ) );
                 }
 
                 PrepareFeatureStyle( poAttribFeature, poOverallFeature );
 
                 ACAdjustText( oBlockTransformer.dfAngle * 180 / M_PI,
                     oBlockTransformer.dfXScale, oBlockTransformer.dfYScale,
                     poAttribFeature );
 
                 if ( !EQUAL( poOverallFeature->GetFieldAsString(
                     "EntityHandle" ), "" ) )
                 {
                     poAttribFeature->SetField( "EntityHandle",
                         poOverallFeature->GetFieldAsString( "EntityHandle" ) );
                 }
 
                 apoPendingFeatures.push( poAttribFeature );
             }
         }
     }
 
 /* -------------------------------------------------------------------- */
 /*      Prepare a new feature to serve as the leader text label         */
 /*      refeature.  We will push it onto the layer as a pending           */
 /*      feature for the next feature read.                              */
 /* -------------------------------------------------------------------- */
 
     if( osText.empty() || osText == " " )
     {
         delete poOverallFeature;
         return poLeaderFeature;
     }
 
     OGRDXFFeature *poLabelFeature = poOverallFeature->CloneDXFFeature();
 
     poLabelFeature->SetField( "Text", osText );
     poLabelFeature->SetGeometryDirectly( new OGRPoint( dfTextX, dfTextY ) );
 
     CPLString osStyle;
     char szBuffer[64];
 
     const CPLString osStyleName =
         poDS->GetTextStyleNameByHandle( osTextStyleHandle );
 
     // Font name
     osStyle.Printf("LABEL(f:\"");
 
     // Preserve legacy behaviour of specifying "Arial" as a default font name.
     osStyle += poDS->LookupTextStyleProperty( osStyleName, "Font", "Arial" );
 
     osStyle += "\"";
 
     // Bold, italic
     if( EQUAL( poDS->LookupTextStyleProperty( osStyleName,
         "Bold", "0" ), "1" ) )
     {
         osStyle += ",bo:1";
     }
     if( EQUAL( poDS->LookupTextStyleProperty( osStyleName,
         "Italic", "0" ), "1" ) )
     {
         osStyle += ",it:1";
     }
 
     osStyle += CPLString().Printf(",t:\"%s\",p:%d", osText.c_str(),
         nTextAlignment + 6); // 7,8,9: vertical align top
 
     if( dfTextAngle != 0.0 )
     {
         CPLsnprintf(szBuffer, sizeof(szBuffer), "%.3g", dfTextAngle);
         osStyle += CPLString().Printf(",a:%s", szBuffer);
     }
 
     if( dfTextHeight != 0.0 )
     {
         CPLsnprintf(szBuffer, sizeof(szBuffer), "%.3g", dfTextHeight);
         osStyle += CPLString().Printf(",s:%sg", szBuffer);
     }
 
     const char *pszWidthFactor = poDS->LookupTextStyleProperty( osStyleName,
         "Width", "1" );
     if( pszWidthFactor && CPLAtof( pszWidthFactor ) != 1.0 )
     {
         CPLsnprintf(szBuffer, sizeof(szBuffer), "%.4g",
             CPLAtof( pszWidthFactor ) * 100.0);
         osStyle += CPLString().Printf(",w:%s", szBuffer);
     }
 
     // Color
     osStyle += ",c:";
     osStyle += poLabelFeature->GetColor( poDS );
 
     osStyle += ")";
 
     poLabelFeature->SetStyleString( osStyle );
 
     apoPendingFeatures.push( poLabelFeature );
 
     delete poOverallFeature;
     return poLeaderFeature;
 }
 
 /************************************************************************/
 /*                     GenerateDefaultArrowhead()                       */
 /*                                                                      */
 /*      Generates the default DWG/DXF arrowhead (a filled triangle      */
 /*      with a 3:1 aspect ratio) on the end of the line segment         */
 /*      defined by the two points.                                      */
 /************************************************************************/
