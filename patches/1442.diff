commit ca6776a993903dbcfef5ae8a18556c40ecf83e1c
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Thu May 25 03:21:50 2017 +0200

    avcodec/libfdk-aacdec: Correct buffer_size parameter
    
    the timeDataSize argument to aacDecoder_DecodeFrame() seems undocumented and until
    2016 04 (203e3f28fbebec7011342017fafc2a0bda0ce530) unused.
    after that commit libfdk-aacdec interprets it as size in sample units and memsets that on error.
    FFmpeg as well as others (like GStreamer) did interpret it as size in bytes
    
    Fixes: 1442/clusterfuzz-testcase-minimized-4540199973421056 (This requires recent libfdk to reproduce)
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/libfdk-aacdec.c b/libavcodec/libfdk-aacdec.c
index e5f7c4ebdc..2857b9453f 100644
--- a/libavcodec/libfdk-aacdec.c
+++ b/libavcodec/libfdk-aacdec.c
@@ -313,40 +313,40 @@ static av_cold int fdk_aac_decode_init(AVCodecContext *avctx)
 static int fdk_aac_decode_frame(AVCodecContext *avctx, void *data,
                                 int *got_frame_ptr, AVPacket *avpkt)
 {
     FDKAACDecContext *s = avctx->priv_data;
     AVFrame *frame = data;
     int ret;
     AAC_DECODER_ERROR err;
     UINT valid = avpkt->size;
 
     err = aacDecoder_Fill(s->handle, &avpkt->data, &avpkt->size, &valid);
     if (err != AAC_DEC_OK) {
         av_log(avctx, AV_LOG_ERROR, "aacDecoder_Fill() failed: %x\n", err);
         return AVERROR_INVALIDDATA;
     }
 
-    err = aacDecoder_DecodeFrame(s->handle, (INT_PCM *) s->decoder_buffer, s->decoder_buffer_size, 0);
+    err = aacDecoder_DecodeFrame(s->handle, (INT_PCM *) s->decoder_buffer, s->decoder_buffer_size / sizeof(INT_PCM), 0);
     if (err == AAC_DEC_NOT_ENOUGH_BITS) {
         ret = avpkt->size - valid;
         goto end;
     }
     if (err != AAC_DEC_OK) {
         av_log(avctx, AV_LOG_ERROR,
                "aacDecoder_DecodeFrame() failed: %x\n", err);
         ret = AVERROR_UNKNOWN;
         goto end;
     }
 
     if ((ret = get_stream_info(avctx)) < 0)
         goto end;
     frame->nb_samples = avctx->frame_size;
 
     if ((ret = ff_get_buffer(avctx, frame, 0)) < 0)
         goto end;
 
     memcpy(frame->extended_data[0], s->decoder_buffer,
            avctx->channels * avctx->frame_size *
            av_get_bytes_per_sample(avctx->sample_fmt));
 
     *got_frame_ptr = 1;
     ret = avpkt->size - valid;
