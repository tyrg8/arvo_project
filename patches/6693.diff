commit ae093556e83f38779f29d2569fd56cdef441d778
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Sat Mar 3 16:01:20 2018 +0000

    AVCE00: fix null pointer dereference. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6693. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@41608 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/autotest/ogr/ogr_avc.py b/autotest/ogr/ogr_avc.py
index d022e6655d..e1453e1ff7 100755
--- a/autotest/ogr/ogr_avc.py
+++ b/autotest/ogr/ogr_avc.py
@@ -64,12 +64,15 @@ def check_content(ds):
 def ogr_avc_1():
 
     # Example given at Annex A of http://avce00.maptools.org/docs/v7_e00_cover.html
     avc_ds = ogr.Open( 'data/test.e00' )
+    if avc_ds.GetLayer(0).GetSpatialRef() is None:
+        gdaltest.post_reason('expected SRS')
+        return 'fail'
 
     if avc_ds is not None:
         return check_content(avc_ds)
     else:
         return 'fail'
 
 ###############################################################################
 # Open AVCBin datasource.
@@ -77,11 +80,14 @@ def ogr_avc_1():
 def ogr_avc_2():
 
     avc_ds = ogr.Open( 'data/testavc/testavc' )
+    if avc_ds.GetLayer(0).GetSpatialRef() is None:
+        gdaltest.post_reason('expected SRS')
+        return 'fail'
 
     if avc_ds is not None:
         return check_content(avc_ds)
     else:
         return 'fail'
 
 ###############################################################################
 # Try opening a compressed E00 (which is not supported)
diff --git a/gdal/ogr/ogrsf_frmts/avc/ogravce00datasource.cpp b/gdal/ogr/ogrsf_frmts/avc/ogravce00datasource.cpp
index 4d4e9d8059..702dbcae16 100644
--- a/gdal/ogr/ogrsf_frmts/avc/ogravce00datasource.cpp
+++ b/gdal/ogr/ogrsf_frmts/avc/ogravce00datasource.cpp
@@ -73,107 +73,107 @@ OGRAVCE00DataSource::~OGRAVCE00DataSource()
 int OGRAVCE00DataSource::Open( const char * pszNewName, int bTestOpen )
 
 {
 /* -------------------------------------------------------------------- */
 /*      Open the source file.  Suppress error reporting if we are in    */
 /*      TestOpen mode.                                                  */
 /* -------------------------------------------------------------------- */
     bool bCompressed = false;
 
     if( bTestOpen )
         CPLPushErrorHandler( CPLQuietErrorHandler );
 
     psE00 = AVCE00ReadOpenE00(pszNewName);
 
     if( CPLGetLastErrorNo() == CPLE_OpenFailed
         && strstr(CPLGetLastErrorMsg(), "compressed E00") != nullptr )
     {
         bCompressed = true;
     }
 
     if( bTestOpen )
     {
         CPLPopErrorHandler();
         CPLErrorReset();
     }
 
     if( psE00 == nullptr )
     {
         if( bCompressed )
         {
             CPLError(CE_Failure, CPLE_OpenFailed,
                      "This looks like a compressed E00 file and cannot be "
                      "processed directly. You may need to uncompress it "
                      "first using the E00compr library or the e00conv "
                      "program." );
         }
         return FALSE;
     }
 
     pszName = CPLStrdup( pszNewName );
     /* pszCoverageName = CPLStrdup( psE00->pszCoverName ); */
     pszCoverageName = CPLStrdup( pszNewName );
 
 /* -------------------------------------------------------------------- */
 /*      Create layers for the "interesting" sections of the coverage.   */
 /* -------------------------------------------------------------------- */
     papoLayers = static_cast<OGRAVCE00Layer **>(
         CPLCalloc( sizeof(OGRAVCE00Layer *), psE00->numSections ) );
     nLayers = 0;
 
     for( int iSection = 0; iSection < psE00->numSections; iSection++ )
     {
         AVCE00Section *psSec = psE00->pasSections + iSection;
 
         switch( psSec->eType )
         {
           case AVCFileARC:
           case AVCFilePAL:
           case AVCFileCNT:
           case AVCFileLAB:
           case AVCFileRPL:
           case AVCFileTXT:
             papoLayers[nLayers++] = new OGRAVCE00Layer( this, psSec );
             break;
 
           case AVCFileTX6:
             break;
 
           case AVCFileTABLE:
             CheckAddTable(psSec);
             break;
 
           case AVCFilePRJ:
           {
 #if 0
               poSRS = new OGRSpatialReference();
               AVCE00File *hFile
                   = AVCE00ReadOpen( psE00->pszCoverPath,
                                     psSec->pszFilename,
                                     psE00->eCoverType,
                                     psSec->eType,
                                     psE00->psDBCSInfo);
-              if( hFile && poSRS == nullptr )
+              if( hFile && poSRS == NULL )
               {
                   char **papszPRJ = AVCE00ReadNextPrj( hFile );
 
                   poSRS = new OGRSpatialReference();
                   if( poSRS->importFromESRI( papszPRJ ) != OGRERR_NONE )
                   {
                       CPLError( CE_Warning, CPLE_AppDefined,
                                 "Failed to parse PRJ section, ignoring." );
                       delete poSRS;
-                      poSRS = nullptr;
+                      poSRS = NULL;
                   }
                   AVCE00ReadClose( hFile );
               }
 #endif
           }
           break;
 
           default:
             ;
         }
     }
 
     return nLayers > 0;
 }
@@ -214,32 +214,38 @@ OGRLayer *OGRAVCE00DataSource::GetLayer( int iLayer )
 /************************************************************************/
 /*                           GetSpatialRef()                            */
 /************************************************************************/
 OGRSpatialReference *OGRAVCE00DataSource::GetSpatialRef()
 {
     if (poSRS != nullptr)
         return poSRS;
     if (psE00 == nullptr)
         return nullptr;
 
     for( int iSection = 0; iSection < psE00->numSections; iSection++ )
     {
         AVCE00Section *psSec = psE00->pasSections + iSection;
-        if (psSec->eType == AVCFilePRJ)
+        if (psSec->eType == AVCFilePRJ )
         {
             AVCE00ReadGotoSectionE00(psE00, psSec, 0);
-            char **pszPRJ
-                = static_cast<char **>( AVCE00ReadNextObjectE00(psE00) );
-            poSRS = new OGRSpatialReference();
-            if( poSRS->importFromESRI( pszPRJ ) != OGRERR_NONE )
+            void* obj = AVCE00ReadNextObjectE00(psE00);
+            if( psE00->hParseInfo->eFileType == AVCFilePRJ )
             {
-                CPLError( CE_Warning, CPLE_AppDefined,
-                          "Failed to parse PRJ section, ignoring." );
-                delete poSRS;
-                poSRS = nullptr;
+                char **pszPRJ = static_cast<char **>(obj);
+                if( pszPRJ )
+                {
+                    poSRS = new OGRSpatialReference();
+                    if( poSRS->importFromESRI( pszPRJ ) != OGRERR_NONE )
+                    {
+                        CPLError( CE_Warning, CPLE_AppDefined,
+                                "Failed to parse PRJ section, ignoring." );
+                        delete poSRS;
+                        poSRS = nullptr;
+                    }
+                }
             }
             break;
         }
     }
 
     return poSRS;
 }
