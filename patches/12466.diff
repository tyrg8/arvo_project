commit 4bd12b6f40cb4413c8970c52f15f3b6885b5e32f
Author: Grzegorz Antoniak <ga@anadoxin.org>
Date:   Wed May 1 06:21:58 2019 +0200

    RAR5 reader: fix buffer overflow when parsing huffman tables.
    
    RAR5 compresses its Huffman tables by using an algorithm similar to Run
    Length Encoding. During uncompression of those tables, RAR5 reader
    didn't perform enough checks to prevent from buffer overflow in some
    cases.
    
    This commit adds additional check that prevents from encountering a
    buffer overflow error in some files.
    
    The commit also adds a unit test to guard against regression of this
    issue.
    
    Fixes OSSFuzz case #12466.

diff --git a/libarchive/archive_read_support_format_rar5.c b/libarchive/archive_read_support_format_rar5.c
index 84d05c43..cf897657 100644
--- a/libarchive/archive_read_support_format_rar5.c
+++ b/libarchive/archive_read_support_format_rar5.c
@@ -2286,164 +2286,164 @@ static int decode_number(struct archive_read* a, struct decode_table* table,
 /* Reads and parses Huffman tables from the beginning of the block. */
 static int parse_tables(struct archive_read* a, struct rar5* rar,
         const uint8_t* p)
 {
     int ret, value, i, w, idx = 0;
     uint8_t bit_length[HUFF_BC],
         table[HUFF_TABLE_SIZE],
         nibble_mask = 0xF0,
         nibble_shift = 4;
 
     enum { ESCAPE = 15 };
 
     /* The data for table generation is compressed using a simple RLE-like
      * algorithm when storing zeroes, so we need to unpack it first. */
     for(w = 0, i = 0; w < HUFF_BC;) {
         value = (p[i] & nibble_mask) >> nibble_shift;
 
         if(nibble_mask == 0x0F)
             ++i;
 
         nibble_mask ^= 0xFF;
         nibble_shift ^= 4;
 
         /* Values smaller than 15 is data, so we write it directly. Value 15
          * is a flag telling us that we need to unpack more bytes. */
         if(value == ESCAPE) {
             value = (p[i] & nibble_mask) >> nibble_shift;
             if(nibble_mask == 0x0F)
                 ++i;
             nibble_mask ^= 0xFF;
             nibble_shift ^= 4;
 
             if(value == 0) {
                 /* We sometimes need to write the actual value of 15, so this
                  * case handles that. */
                 bit_length[w++] = ESCAPE;
             } else {
                 int k;
 
                 /* Fill zeroes. */
-                for(k = 0; k < value + 2; k++) {
+                for(k = 0; (k < value + 2) && (w < HUFF_BC); k++) {
                     bit_length[w++] = 0;
                 }
             }
         } else {
             bit_length[w++] = value;
         }
     }
 
     rar->bits.in_addr = i;
     rar->bits.bit_addr = nibble_shift ^ 4;
 
     ret = create_decode_tables(bit_length, &rar->cstate.bd, HUFF_BC);
     if(ret != ARCHIVE_OK) {
         archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                 "Decoding huffman tables failed");
         return ARCHIVE_FATAL;
     }
 
     for(i = 0; i < HUFF_TABLE_SIZE;) {
         uint16_t num;
 
         ret = decode_number(a, &rar->cstate.bd, p, &num);
         if(ret != ARCHIVE_OK) {
             archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                     "Decoding huffman tables failed");
             return ARCHIVE_FATAL;
         }
 
         if(num < 16) {
             /* 0..15: store directly */
             table[i] = (uint8_t) num;
             i++;
             continue;
         }
 
         if(num < 18) {
             /* 16..17: repeat previous code */
             uint16_t n;
             if(ARCHIVE_OK != read_bits_16(rar, p, &n))
                 return ARCHIVE_EOF;
 
             if(num == 16) {
                 n >>= 13;
                 n += 3;
                 skip_bits(rar, 3);
             } else {
                 n >>= 9;
                 n += 11;
                 skip_bits(rar, 7);
             }
 
             if(i > 0) {
                 while(n-- > 0 && i < HUFF_TABLE_SIZE) {
                     table[i] = table[i - 1];
                     i++;
                 }
             } else {
                 archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                         "Unexpected error when decoding huffman tables");
                 return ARCHIVE_FATAL;
             }
 
             continue;
         }
 
         /* other codes: fill with zeroes `n` times */
         uint16_t n;
         if(ARCHIVE_OK != read_bits_16(rar, p, &n))
             return ARCHIVE_EOF;
 
         if(num == 18) {
             n >>= 13;
             n += 3;
             skip_bits(rar, 3);
         } else {
             n >>= 9;
             n += 11;
             skip_bits(rar, 7);
         }
 
         while(n-- > 0 && i < HUFF_TABLE_SIZE)
             table[i++] = 0;
     }
 
     ret = create_decode_tables(&table[idx], &rar->cstate.ld, HUFF_NC);
     if(ret != ARCHIVE_OK) {
         archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                 "Failed to create literal table");
         return ARCHIVE_FATAL;
     }
 
     idx += HUFF_NC;
 
     ret = create_decode_tables(&table[idx], &rar->cstate.dd, HUFF_DC);
     if(ret != ARCHIVE_OK) {
         archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                 "Failed to create distance table");
         return ARCHIVE_FATAL;
     }
 
     idx += HUFF_DC;
 
     ret = create_decode_tables(&table[idx], &rar->cstate.ldd, HUFF_LDC);
     if(ret != ARCHIVE_OK) {
         archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                 "Failed to create lower bits of distances table");
         return ARCHIVE_FATAL;
     }
 
     idx += HUFF_LDC;
 
     ret = create_decode_tables(&table[idx], &rar->cstate.rd, HUFF_RC);
     if(ret != ARCHIVE_OK) {
         archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,
                 "Failed to create repeating distances table");
         return ARCHIVE_FATAL;
     }
 
     return ARCHIVE_OK;
 }
 
 /* Parses the block header, verifies its CRC byte, and saves the header
  * fields inside the `hdr` pointer. */
diff --git a/libarchive/test/test_read_format_rar5.c b/libarchive/test/test_read_format_rar5.c
index 9b684a73..d52b6002 100644
--- a/libarchive/test/test_read_format_rar5.c
+++ b/libarchive/test/test_read_format_rar5.c
@@ -950,3 +950,18 @@ DEFINE_TEST(test_read_format_rar5_extra_field_version)
 
     EPILOGUE();
 }
+
+DEFINE_TEST(test_read_format_rar5_readtables_overflow)
+{
+    uint8_t buf[16];
+
+    PROLOGUE("test_read_format_rar5_readtables_overflow.rar");
+
+    assertA(0 == archive_read_next_header(a, &ae));
+    /* This archive is invalid. However, processing it shouldn't cause any
+     * buffer overflow errors during reading rar5 tables. */
+    assertA(0 == archive_read_data(a, buf, sizeof(buf)));
+    assertA(ARCHIVE_EOF == archive_read_next_header(a, &ae));
+
+    EPILOGUE();
+}
diff --git a/libarchive/test/test_read_format_rar5_readtables_overflow.rar.uu b/libarchive/test/test_read_format_rar5_readtables_overflow.rar.uu
new file mode 100644
index 00000000..611c2af2
--- /dev/null
+++ b/libarchive/test/test_read_format_rar5_readtables_overflow.rar.uu
@@ -0,0 +1,15 @@
+begin 644 test_read_format_rar5_readtables_overflow.rar
+M4F%R(1H'`0"-[P+2`)3+'_4`C>\"T@`"T@"4RQ_5]0#O0````,L?Q_T``(`"
+MT@"4RQ_=V-C8`)3+']W=]0"-\`+2`)3+']WU`(WO`M(``M(`E,L?U?4`[P+2
+M`)3+'\?]``"``M(`E,L?W=C8V`"4RQ_=]0#V`(WO`M'UV,?8V-C8$=C8V-C8
+MV(W8V-C8V-C8V-C8V-C8V-C8V-C8V-C8V-C8!]C8V-C8V-C8V-C8V-C8V-C8
+MV-C8V-C8V-C(V-C8V-C2`)3+']W8V-C8V-C8V-C8V-C8V-C8@-C8V-C8V-C8
+MV/+8V-C8V-C8V-C8`038V-C8V-C8V-C8V-C8V-C8V`?8V-C8V-C8V-C8!-C8
+MV-C8V-C8V-C8V-C8V-C8V`?8V-C8V-C8V-C8V-C8`(`"V`7V`(WO`M'U`]L?
+MW?4`C>\"T@`"T@"4'__U`(WO`N``E,L?W84`C0`0T@"4RQ_=V-C8V-C8V`"4
+MR_\R]0#V`(W8V-C8V-C8V-C8V-C8V-C8V-C8V-C8V`?8V-C8V-C8V-C8V-C8
+MV-C8V-C8V-C8V-C8R-C8V-C8T@"4RQ_=V-C8V-C8V-C8V-C8V-C8V(#8V-C8
+MV-C8````9-C8V-C8V!'8V-C8V-C8]]C8V-C8V-C8V-C8V/+8V-C8V-C8V-C8
+=`038V-C8V-C8V-C8V-C8V-C8V`?8V-C8V-C8V-@`
+`
+end
