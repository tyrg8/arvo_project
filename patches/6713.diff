commit 7e412f3bcbfebc986813b2de1b90a27e4f63bf16
Author: Scott Godin <sgodin@sipspectrum.com>
Date:   Mon Mar 5 12:07:48 2018 -0500

    -minor optimization to prevent a potential for 2 calls to DnsUtil::isIpV6Address in Uri::getAorInternal

diff --git a/resip/stack/Uri.cxx b/resip/stack/Uri.cxx
index 361771950..9f905b6b6 100644
--- a/resip/stack/Uri.cxx
+++ b/resip/stack/Uri.cxx
@@ -789,66 +789,67 @@ void
 Uri::getAorInternal(bool dropScheme, bool addPort, Data& aor) const
 {
    checkParsed();
    // canonicalize host
 
    addPort = addPort && mPort!=0;
 
+   bool hostIsIpV6Address = DnsUtil::isIpV6Address(mHost);
    if(!mHostCanonicalized)
    {
-      if (DnsUtil::isIpV6Address(mHost))
+      if (hostIsIpV6Address)
       {
          mCanonicalHost = DnsUtil::canonicalizeIpV6Address(mHost);
       }
       else
       {
          mCanonicalHost = mHost;
          mCanonicalHost.lowercase();
       }
       mHostCanonicalized = true;
    }
 
    // !bwc! Maybe reintroduce caching of aor. (Would use a bool instead of the
    // mOldX cruft)
    //                                                  @:10000
    aor.clear();
    aor.reserve((dropScheme ? 0 : mScheme.size()+1)
        + mUser.size() + mCanonicalHost.size() + 7);
    if(!dropScheme)
    {
       aor += mScheme;
       aor += ':';
    }
 
    if (!mUser.empty())
    {
 #ifdef HANDLE_CHARACTER_ESCAPING
       {
          oDataStream str(aor);
          mUser.escapeToStream(str, getUserEncodingTable()); 
       }
 #else
       aor += mUser;
 #endif
       if(!mCanonicalHost.empty())
       {
          aor += Symbols::AT_SIGN;
       }
    }
 
-   if(DnsUtil::isIpV6Address(mHost) && addPort)
+   if(hostIsIpV6Address && addPort)
    {
       aor += Symbols::LS_BRACKET;
       aor += mCanonicalHost;
       aor += Symbols::RS_BRACKET;
    }
    else
    {
       aor += mCanonicalHost;
    }
 
    if(addPort)
    {
       aor += Symbols::COLON;
       aor += Data(mPort);
    }
 }
