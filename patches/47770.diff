commit 6ae825b8a85f93917b07cef1f4b2d6951f4b07cf
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Mon Jun 20 14:12:55 2022 +0100

    oss-fuzz 47770: Init null device on creation
    
    Under normal (rendering) operation, for PDF tr 3 text, we send the text
    operation to a null device, meaning the graphics gets updated properly, without
    actually rendering anything on the output.
    
    Previously code would allocated the null device, do a gs_gsave() and the init
    and set the null device.
    
    The problem is that, if the gsave fails, we leave an unitialised device for
    the garbager to clean up, causing a crash.
    
    Secondly, any interpreter not using the garbager would leak memory in that
    error condition.
    
    So, move the device initialisation before the gs_gsave() call, and explicitly
    free the device in the event of an error.

diff --git a/base/gxchar.c b/base/gxchar.c
index 1c534ccb6..e3ffa83ef 100644
--- a/base/gxchar.c
+++ b/base/gxchar.c
@@ -121,75 +121,82 @@ int
 gx_default_text_begin(gx_device * dev, gs_gstate * pgs1,
                       const gs_text_params_t * text, gs_font * font,
                       const gx_clip_path * pcpath,
                       gs_text_enum_t ** ppte)
 {
     uint operation = text->operation;
     bool propagate_charpath = (operation & TEXT_DO_DRAW) != 0;
     int code;
     gs_gstate *pgs = (gs_gstate *)pgs1;
     gs_show_enum *penum;
     gs_memory_t * mem = pgs->memory;
 
     penum = gs_show_enum_alloc(mem, pgs, "gx_default_text_begin");
     if (!penum)
         return_error(gs_error_VMerror);
     code = gs_text_enum_init((gs_text_enum_t *)penum, &default_text_procs,
                              dev, pgs, text, font, pcpath, mem);
     if (code < 0) {
         gs_free_object(mem, penum, "gx_default_text_begin");
         return code;
     }
     penum->auto_release = false; /* new API */
     penum->level = pgs->level;
     penum->cc = 0;
     penum->continue_proc = continue_show;
     switch (penum->charpath_flag) {
     case cpm_false_charpath: case cpm_true_charpath:
         penum->can_cache = -1; break;
     case cpm_false_charboxpath: case cpm_true_charboxpath:
         penum->can_cache = 0; break;
     case cpm_charwidth:
     default:                    /* cpm_show */
         penum->can_cache = 1; break;
     }
     code = show_state_setup(penum);
     if (code < 0) {
         gs_free_object(mem, penum, "gx_default_text_begin");
         return code;
     }
     penum->show_gstate =
         (propagate_charpath && (pgs->in_charpath != 0) ?
          pgs->show_gstate : pgs);
     if (!(~operation & (TEXT_DO_NONE | TEXT_RETURN_WIDTH))) {
         /* This is stringwidth (or a PDF with text in rendering mode 3) . */
         gx_device_null *dev_null =
             gs_alloc_struct(mem, gx_device_null, &st_device_null,
                             "stringwidth(dev_null)");
 
         if (dev_null == 0)
             return_error(gs_error_VMerror);
+
+        /* Set up a null device that forwards xfont requests properly. */
+        /* We have to set the device up here, so the contents are
+           initialised, and safe to free in the event of an error.
+         */
+        gs_make_null_device(dev_null, gs_currentdevice_inline(pgs), mem);
+
         /* Do an extra gsave and suppress output */
-        if ((code = gs_gsave(pgs)) < 0)
+        if ((code = gs_gsave(pgs)) < 0) {
+            gs_free_object(mem, dev_null, "gx_default_text_begin");
             return code;
+        }
         penum->level = pgs->level;      /* for level check in show_update */
-        /* Set up a null device that forwards xfont requests properly. */
-        gs_make_null_device(dev_null, gs_currentdevice_inline(pgs), mem);
         pgs->ctm_default_set = false;
         penum->dev_null = dev_null;
         /* Retain this device, since it is referenced from the enumerator. */
         gx_device_retain((gx_device *)dev_null, true);
         gs_setdevice_no_init(pgs, (gx_device *) dev_null);
         /* Establish an arbitrary translation and current point. */
         gs_newpath(pgs);
         gx_translate_to_fixed(pgs, fixed_0, fixed_0);
         code = gx_path_add_point(pgs->path, fixed_0, fixed_0);
         if (code < 0) {
             gs_grestore(pgs);
             return code;
         }
     }
     *ppte = (gs_text_enum_t *)penum;
     return 0;
 }
 
 /* Compute the number of characters in a text. */
