commit 14404ef04b55662f605c00b31a479e50caff72ab
Author: Takacs, Philipp <philipp.takacs@iosb.fraunhofer.de>
Date:   Mon Feb 27 12:34:38 2023 +0100

    [x86] don't hardcode cpuid results
    
    The cpuid results are set by the selected cpu.
    
    CLOSES #1787

diff --git a/qemu/target/i386/unicorn.c b/qemu/target/i386/unicorn.c
index f10b70e2..4541044e 100644
--- a/qemu/target/i386/unicorn.c
+++ b/qemu/target/i386/unicorn.c
@@ -68,115 +68,104 @@ static void x86_release(void *ctx)
 void x86_reg_reset(struct uc_struct *uc)
 {
     CPUArchState *env = uc->cpu->env_ptr;
 
-    env->features[FEAT_1_EDX] = CPUID_CX8 | CPUID_CMOV | CPUID_SSE2 |
-                                CPUID_FXSR | CPUID_SSE | CPUID_CLFLUSH;
-    env->features[FEAT_1_ECX] = CPUID_EXT_SSSE3 | CPUID_EXT_SSE41 |
-                                CPUID_EXT_SSE42 | CPUID_EXT_AES |
-                                CPUID_EXT_CX16;
-    env->features[FEAT_8000_0001_EDX] = CPUID_EXT2_3DNOW | CPUID_EXT2_RDTSCP;
-    env->features[FEAT_8000_0001_ECX] = CPUID_EXT3_LAHF_LM | CPUID_EXT3_ABM |
-                                        CPUID_EXT3_SKINIT | CPUID_EXT3_CR8LEG;
-    env->features[FEAT_7_0_EBX] = CPUID_7_0_EBX_BMI1 | CPUID_7_0_EBX_BMI2 |
-                                  CPUID_7_0_EBX_ADX | CPUID_7_0_EBX_SMAP;
-
     memset(env->regs, 0, sizeof(env->regs));
     memset(env->segs, 0, sizeof(env->segs));
     memset(env->cr, 0, sizeof(env->cr));
 
     memset(&env->ldt, 0, sizeof(env->ldt));
     memset(&env->gdt, 0, sizeof(env->gdt));
     memset(&env->tr, 0, sizeof(env->tr));
     memset(&env->idt, 0, sizeof(env->idt));
 
     env->eip = 0;
     cpu_load_eflags(env, 0, -1);
     env->cc_op = CC_OP_EFLAGS;
 
     env->fpstt = 0; /* top of stack index */
     env->fpus = 0;
     env->fpuc = 0;
     memset(env->fptags, 0, sizeof(env->fptags)); /* 0 = valid, 1 = empty */
 
     env->mxcsr = 0;
     memset(env->xmm_regs, 0, sizeof(env->xmm_regs));
     memset(&env->xmm_t0, 0, sizeof(env->xmm_t0));
     memset(&env->mmx_t0, 0, sizeof(env->mmx_t0));
 
     memset(env->ymmh_regs, 0, sizeof(env->ymmh_regs));
 
     memset(env->opmask_regs, 0, sizeof(env->opmask_regs));
     memset(env->zmmh_regs, 0, sizeof(env->zmmh_regs));
 
     /* sysenter registers */
     env->sysenter_cs = 0;
     env->sysenter_esp = 0;
     env->sysenter_eip = 0;
     env->efer = 0;
     env->star = 0;
 
     env->vm_hsave = 0;
 
     env->tsc = 0;
     env->tsc_adjust = 0;
     env->tsc_deadline = 0;
 
     env->mcg_status = 0;
     env->msr_ia32_misc_enable = 0;
     env->msr_ia32_feature_control = 0;
 
     env->msr_fixed_ctr_ctrl = 0;
     env->msr_global_ctrl = 0;
     env->msr_global_status = 0;
     env->msr_global_ovf_ctrl = 0;
     memset(env->msr_fixed_counters, 0, sizeof(env->msr_fixed_counters));
     memset(env->msr_gp_counters, 0, sizeof(env->msr_gp_counters));
     memset(env->msr_gp_evtsel, 0, sizeof(env->msr_gp_evtsel));
 
 #ifdef TARGET_X86_64
     memset(env->hi16_zmm_regs, 0, sizeof(env->hi16_zmm_regs));
     env->lstar = 0;
     env->cstar = 0;
     env->fmask = 0;
     env->kernelgsbase = 0;
 #endif
 
     // TODO: reset other registers in CPUX86State qemu/target-i386/cpu.h
 
     // properly initialize internal setup for each mode
     switch (uc->mode) {
     default:
         break;
     case UC_MODE_16:
         env->hflags = 0;
         env->cr[0] = 0;
         // undo the damage done by the memset of env->segs above
         // for R_CS, not quite the same as x86_cpu_reset
         cpu_x86_load_seg_cache(env, R_CS, 0, 0, 0xffff,
                                DESC_P_MASK | DESC_S_MASK | DESC_CS_MASK |
                                    DESC_R_MASK | DESC_A_MASK);
         // remainder yields same state as x86_cpu_reset
         load_seg_16_helper(env, R_DS, 0);
         load_seg_16_helper(env, R_ES, 0);
         load_seg_16_helper(env, R_SS, 0);
         load_seg_16_helper(env, R_FS, 0);
         load_seg_16_helper(env, R_GS, 0);
 
         break;
     case UC_MODE_32:
         env->hflags |= HF_CS32_MASK | HF_SS32_MASK | HF_OSFXSR_MASK;
         cpu_x86_update_cr0(env, CR0_PE_MASK); // protected mode
         break;
     case UC_MODE_64:
         env->hflags |= HF_CS32_MASK | HF_SS32_MASK | HF_CS64_MASK |
                        HF_LMA_MASK | HF_OSFXSR_MASK;
         env->hflags &= ~(HF_ADDSEG_MASK);
         env->efer |= MSR_EFER_LMA | MSR_EFER_LME; // extended mode activated
         cpu_x86_update_cr0(env, CR0_PE_MASK);     // protected mode
         /* If we are operating in 64bit mode then add the Long Mode flag
          * to the CPUID feature flag
          */
         env->features[FEAT_8000_0001_EDX] |= CPUID_EXT2_LM;
         break;
     }
 }
