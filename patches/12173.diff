commit f3ce38739fa49008e36959aa8189c01ab1bad5b5
Author: Daniel Stenberg <daniel@haxx.se>
Date:   Sun Dec 23 17:38:59 2018 +0100

    disconnect: set conn->data for protocol disconnect
    
    Follow-up to fb445a1e18d: Set conn->data explicitly to point out the
    current transfer when invoking the protocol-specific disconnect function
    so that it can work correctly.
    
    Bug: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=12173

diff --git a/lib/url.c b/lib/url.c
index 50719ce54..bf92016d0 100644
--- a/lib/url.c
+++ b/lib/url.c
@@ -752,58 +752,61 @@ static void conn_free(struct connectdata *conn)
 CURLcode Curl_disconnect(struct Curl_easy *data,
                          struct connectdata *conn, bool dead_connection)
 {
   if(!conn)
     return CURLE_OK; /* this is closed and fine already */
 
   if(!data) {
     DEBUGF(infof(data, "DISCONNECT without easy handle, ignoring\n"));
     return CURLE_OK;
   }
 
   /*
    * If this connection isn't marked to force-close, leave it open if there
    * are other users of it
    */
   if(CONN_INUSE(conn) && !dead_connection) {
     DEBUGF(infof(data, "Curl_disconnect when inuse: %zu\n", CONN_INUSE(conn)));
     return CURLE_OK;
   }
 
   if(conn->dns_entry != NULL) {
     Curl_resolv_unlock(data, conn->dns_entry);
     conn->dns_entry = NULL;
   }
 
   Curl_hostcache_prune(data); /* kill old DNS cache entries */
 
 #if !defined(CURL_DISABLE_HTTP) && defined(USE_NTLM)
   /* Cleanup NTLM connection-related data */
   Curl_http_ntlm_cleanup(conn);
 #endif
 
+  /* the protocol specific disconnect handler needs a transfer for its
+     connection! */
+  conn->data = data;
   if(conn->handler->disconnect)
     /* This is set if protocol-specific cleanups should be made */
     conn->handler->disconnect(conn, dead_connection);
 
     /* unlink ourselves! */
   infof(data, "Closing connection %ld\n", conn->connection_id);
   Curl_conncache_remove_conn(data, conn, TRUE);
 
   free_idnconverted_hostname(&conn->host);
   free_idnconverted_hostname(&conn->conn_to_host);
   free_idnconverted_hostname(&conn->http_proxy.host);
   free_idnconverted_hostname(&conn->socks_proxy.host);
 
   /* this assumes that the pointer is still there after the connection was
      detected from the cache */
   Curl_ssl_close(conn, FIRSTSOCKET);
 
   conn_free(conn);
   return CURLE_OK;
 }
 
 /*
  * This function should return TRUE if the socket is to be assumed to
  * be dead. Most commonly this happens when the server has closed the
  * connection due to inactivity.
  */
