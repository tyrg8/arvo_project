commit 3fc1d8ed86084f281583b074d86dc992cb9558c9
Author: Catena cyber <35799796+catenacyber@users.noreply.github.com>
Date:   Wed Jun 5 04:32:19 2019 +0200

    Fixes MOS groups count (#1503)

diff --git a/arch/MOS65XX/MOS65XXDisassembler.c b/arch/MOS65XX/MOS65XXDisassembler.c
index f09c0e2d..74297f10 100644
--- a/arch/MOS65XX/MOS65XXDisassembler.c
+++ b/arch/MOS65XX/MOS65XXDisassembler.c
@@ -52,173 +52,173 @@ static const struct InstructionInfo InstructionInfoTable[]= {
 #ifndef CAPSTONE_DIET
 static void fillDetails(MCInst *MI, struct OpInfo opinfo, int cpu_type)
 {
 	int i;
 	cs_detail *detail = MI->flat_insn->detail;
 
 	InstructionInfo insinfo = InstructionInfoTable[opinfo.ins];
 
 	detail->mos65xx.am = opinfo.am;
 	detail->mos65xx.modifies_flags = insinfo.modifies_status;
 	detail->groups_count = 0;
 	detail->regs_read_count = 0;
 	detail->regs_write_count = 0;
 	detail->mos65xx.op_count = 0;
 
 	if (insinfo.group_type != MOS65XX_GRP_INVALID) {
-		detail->groups[0] = insinfo.group_type;
+		detail->groups[detail->groups_count] = insinfo.group_type;
 		detail->groups_count++;
 	}
 
 	if (opinfo.am == MOS65XX_AM_REL || opinfo.am == MOS65XX_AM_ZP_REL) {
-		detail->groups[0] = MOS65XX_GRP_BRANCH_RELATIVE;
+		detail->groups[detail->groups_count] = MOS65XX_GRP_BRANCH_RELATIVE;
 		detail->groups_count++;	
 	}
 
 	if (insinfo.read != MOS65XX_REG_INVALID) {
 		detail->regs_read[detail->regs_read_count++] = insinfo.read;
 	} else switch(opinfo.am) {
 		case MOS65XX_AM_ACC:
 			detail->regs_read[detail->regs_read_count++] = MOS65XX_REG_ACC;
 			break;
 		case MOS65XX_AM_ZP_Y:
 		case MOS65XX_AM_ZP_IND_Y:
 		case MOS65XX_AM_ABS_Y:
 		case MOS65XX_AM_ZP_IND_LONG_Y:
 			detail->regs_read[detail->regs_read_count++] = MOS65XX_REG_Y;
 			break;
 
 		case MOS65XX_AM_ZP_X:
 		case MOS65XX_AM_ZP_X_IND:
 		case MOS65XX_AM_ABS_X:
 		case MOS65XX_AM_ABS_X_IND:
 		case MOS65XX_AM_ABS_LONG_X:
 			detail->regs_read[detail->regs_read_count++] = MOS65XX_REG_X;
 			break;
 
 		case MOS65XX_AM_SR:
 			detail->regs_read[detail->regs_read_count++] = MOS65XX_REG_SP;
 			break;
 		case MOS65XX_AM_SR_IND_Y:
 			detail->regs_read[detail->regs_read_count++] = MOS65XX_REG_SP;
 			detail->regs_read[detail->regs_read_count++] = MOS65XX_REG_Y;
 			break;
 
 		default:
 			break;
 	}
 
 	if (insinfo.write != MOS65XX_REG_INVALID) {
 		detail->regs_write[detail->regs_write_count++] = insinfo.write;
 	} else if (opinfo.am == MOS65XX_AM_ACC) {
 		detail->regs_write[detail->regs_write_count++] = MOS65XX_REG_ACC;
 	}
 
 
 	switch(opinfo.ins) {
 		case MOS65XX_INS_ADC:
 		case MOS65XX_INS_SBC:
 		case MOS65XX_INS_ROL:
 		case MOS65XX_INS_ROR:
 			/* these read carry flag (and decimal for ADC/SBC) */
 			detail->regs_read[detail->regs_read_count++] = MOS65XX_REG_P;
 			break;
 		/* stack operations */
 		case MOS65XX_INS_JSL:
 		case MOS65XX_INS_JSR:
 		case MOS65XX_INS_PEA:
 		case MOS65XX_INS_PEI:
 		case MOS65XX_INS_PER:
 		case MOS65XX_INS_PHA:
 		case MOS65XX_INS_PHB:
 		case MOS65XX_INS_PHD:
 		case MOS65XX_INS_PHK:
 		case MOS65XX_INS_PHP:
 		case MOS65XX_INS_PHX:
 		case MOS65XX_INS_PHY:
 		case MOS65XX_INS_PLA:
 		case MOS65XX_INS_PLB:
 		case MOS65XX_INS_PLD:
 		case MOS65XX_INS_PLP:
 		case MOS65XX_INS_PLX:
 		case MOS65XX_INS_PLY:
 		case MOS65XX_INS_RTI:
 		case MOS65XX_INS_RTL:
 		case MOS65XX_INS_RTS:
 			detail->regs_read[detail->regs_read_count++] = MOS65XX_REG_SP;
 			detail->regs_write[detail->regs_write_count++] = MOS65XX_REG_SP;
 			break;
 		default:
 			break;
 	}
 
 	if (cpu_type == MOS65XX_CPU_TYPE_65816) {
 		switch (opinfo.am) {
 			case MOS65XX_AM_ZP:
 			case MOS65XX_AM_ZP_X:
 			case MOS65XX_AM_ZP_Y:
 			case MOS65XX_AM_ZP_IND:
 			case MOS65XX_AM_ZP_X_IND:
 			case MOS65XX_AM_ZP_IND_Y:
 			case MOS65XX_AM_ZP_IND_LONG:
 			case MOS65XX_AM_ZP_IND_LONG_Y:
 				detail->regs_read[detail->regs_read_count++] = MOS65XX_REG_DP;
 				break;
 			case MOS65XX_AM_BLOCK:
 				detail->regs_read[detail->regs_read_count++] = MOS65XX_REG_ACC;
 				detail->regs_read[detail->regs_read_count++] = MOS65XX_REG_X;
 				detail->regs_read[detail->regs_read_count++] = MOS65XX_REG_Y;
 				detail->regs_write[detail->regs_write_count++] = MOS65XX_REG_ACC;
 				detail->regs_write[detail->regs_write_count++] = MOS65XX_REG_X;
 				detail->regs_write[detail->regs_write_count++] = MOS65XX_REG_Y;
 				detail->regs_write[detail->regs_write_count++] = MOS65XX_REG_B;
 				break;
 			default:
 				break;
 		}
 
 		switch (opinfo.am) {
 			case MOS65XX_AM_ZP_IND:
 			case MOS65XX_AM_ZP_X_IND:
 			case MOS65XX_AM_ZP_IND_Y:
 			case MOS65XX_AM_ABS:
 			case MOS65XX_AM_ABS_X:
 			case MOS65XX_AM_ABS_Y:
 			case MOS65XX_AM_ABS_X_IND:
 				/* these depend on the databank to generate a 24-bit address */
 				/* exceptions: PEA, PEI, and JMP (abs) */
 				if (opinfo.ins == MOS65XX_INS_PEI || opinfo.ins == MOS65XX_INS_PEA) break;
 				detail->regs_read[detail->regs_read_count++] = MOS65XX_REG_B;
 				break;
 			default:
 				break;
 		}
 	}
 
 	if (insinfo.modifies_status) {
 		detail->regs_write[detail->regs_write_count++] = MOS65XX_REG_P;
 	}
 
 	switch(opinfo.am) {
 		case MOS65XX_AM_IMP:
 			break;
 		case MOS65XX_AM_IMM:
 			detail->mos65xx.operands[detail->mos65xx.op_count].type = MOS65XX_OP_IMM;
 			detail->mos65xx.operands[detail->mos65xx.op_count].mem = MI->Operands[0].ImmVal;
 			detail->mos65xx.op_count++;
 			break;
 		case MOS65XX_AM_ACC:
 			detail->mos65xx.operands[detail->mos65xx.op_count].type = MOS65XX_OP_REG;
 			detail->mos65xx.operands[detail->mos65xx.op_count].reg = MOS65XX_REG_ACC;
 			detail->mos65xx.op_count++;
 			break;
 
 		default:
 			for (i = 0; i < MI->size; ++i) {
 				detail->mos65xx.operands[detail->mos65xx.op_count].type = MOS65XX_OP_MEM;
 				detail->mos65xx.operands[detail->mos65xx.op_count].mem = MI->Operands[i].ImmVal;
 				detail->mos65xx.op_count++;
 			}
 			break;
 	}
 }
 #endif
