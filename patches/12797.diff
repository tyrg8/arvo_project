commit b54e1fc3e0d2600621a28d50f9f085b9e38619c2
Author: Adam Reichold <adam.reichold@t-online.de>
Date:   Fri Feb 1 08:42:27 2019 +0100

    Also defend against requests for negative XRef indices. oss-fuzz/12797

diff --git a/poppler/XRef.cc b/poppler/XRef.cc
index d042d1f4..ac2cd0ce 100644
--- a/poppler/XRef.cc
+++ b/poppler/XRef.cc
@@ -1565,37 +1565,42 @@ DummyXRefEntry dummyXRefEntry;
 
 XRefEntry *XRef::getEntry(int i, bool complainIfMissing)
 {
+  if (unlikely(i < 0)) {
+    error(errInternal, -1, "Request for invalid XRef entry [{0:d}]", i);
+    return &dummyXRefEntry;
+  }
+
   if (i >= size || entries[i].type == xrefEntryNone) {
 
     if ((!xRefStream) && mainXRefEntriesOffset) {
       if (unlikely(i >= capacity)) {
 	error(errInternal, -1, "Request for out-of-bounds XRef entry [{0:d}]", i);
 	return &dummyXRefEntry;
       }
 
       if (!parseEntry(mainXRefEntriesOffset + 20*i, &entries[i])) {
         error(errSyntaxError, -1, "Failed to parse XRef entry [{0:d}].", i);
       }
     } else {
       // Read XRef tables until the entry we're looking for is found
       readXRefUntil(i);
       
       // We might have reconstructed the xref
       // Check again i is in bounds
       if (unlikely(i >= size)) {
 	return &dummyXRefEntry;
       }
 
       if (entries[i].type == xrefEntryNone) {
         if (complainIfMissing) {
           error(errSyntaxError, -1, "Invalid XRef entry {0:d}", i);
         }
         entries[i].type = xrefEntryFree;
       }
     }
   }
 
   return &entries[i];
 }
 
 // Recursively sets the Unencrypted flag in all referenced xref entries
