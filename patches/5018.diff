commit 68bdf5e9a9bfc1c50b0bae131ef34b7c12f2b9ba
Author: Julius Pfrommer <julius.pfrommer@web.de>
Date:   Tue Jan 16 07:49:33 2018 +0100

    fix a oss-fuzz issue for writing with ranges

diff --git a/src/server/ua_services_attribute.c b/src/server/ua_services_attribute.c
index ce8919c2e..97d449b25 100644
--- a/src/server/ua_services_attribute.c
+++ b/src/server/ua_services_attribute.c
@@ -904,33 +904,39 @@ static UA_StatusCode
 writeValueAttributeWithRange(UA_VariableNode *node, const UA_DataValue *value,
                              const UA_NumericRange *rangeptr) {
     /* Value on both sides? */
     if(value->status != node->value.data.value.status ||
        !value->hasValue || !node->value.data.value.hasValue)
         return UA_STATUSCODE_BADINDEXRANGEINVALID;
 
     /* Make scalar a one-entry array for range matching */
     UA_Variant editableValue;
     const UA_Variant *v = &value->value;
     if(UA_Variant_isScalar(&value->value)) {
         editableValue = value->value;
         editableValue.arrayLength = 1;
         v = &editableValue;
     }
 
+    /* Check that the type is an exact match and not only "compatible" */
+    if(!node->value.data.value.value.type ||
+       !UA_NodeId_equal(&node->value.data.value.value.type->typeId,
+                        &v->type->typeId))
+        return UA_STATUSCODE_BADTYPEMISMATCH;
+
     /* Write the value */
     UA_StatusCode retval = UA_Variant_setRangeCopy(&node->value.data.value.value,
                                                    v->data, v->arrayLength, *rangeptr);
     if(retval != UA_STATUSCODE_GOOD)
         return retval;
 
     /* Write the status and timestamps */
     node->value.data.value.hasStatus = value->hasStatus;
     node->value.data.value.status = value->status;
     node->value.data.value.hasSourceTimestamp = value->hasSourceTimestamp;
     node->value.data.value.sourceTimestamp = value->sourceTimestamp;
     node->value.data.value.hasSourcePicoseconds = value->hasSourcePicoseconds;
     node->value.data.value.sourcePicoseconds = value->sourcePicoseconds;
     return UA_STATUSCODE_GOOD;
 }
 
 /* Stack layout: ... | node */
@@ -938,83 +944,83 @@ static UA_StatusCode
 writeValueAttribute(UA_Server *server, UA_Session *session,
                     UA_VariableNode *node, const UA_DataValue *value,
                     const UA_String *indexRange) {
     UA_assert(node != NULL);
 
     /* Parse the range */
     UA_NumericRange range;
     UA_NumericRange *rangeptr = NULL;
     UA_StatusCode retval = UA_STATUSCODE_GOOD;
     if(indexRange && indexRange->length > 0) {
         retval = UA_NumericRange_parseFromString(&range, indexRange);
         if(retval != UA_STATUSCODE_GOOD)
             return retval;
         rangeptr = &range;
     }
 
     /* Created an editable version. The data is not touched. Only the variant
      * "container". */
     UA_DataValue adjustedValue = *value;
 
     /* Type checking. May change the type of editableValue */
     if(value->hasValue && value->value.type) {
         adjustValue(server, &adjustedValue.value, &node->dataType);
 
-        /* The value may be an extension object, especially the nodeset compiler uses
-         * extension objects to write variable values.
-         * If value is an extension object we check if the current node value is also an extension object.
-         */
+        /* The value may be an extension object, especially the nodeset compiler
+         * uses extension objects to write variable values. If value is an
+         * extension object we check if the current node value is also an
+         * extension object. */
         UA_Boolean compatible;
         if (value->value.type->typeId.identifierType == UA_NODEIDTYPE_NUMERIC &&
             value->value.type->typeId.identifier.numeric == UA_NS0ID_STRUCTURE) {
             const UA_NodeId nodeDataType = UA_NODEID_NUMERIC(0, UA_NS0ID_STRUCTURE);
             compatible = compatibleValue(server, &nodeDataType, node->valueRank,
                                     node->arrayDimensionsSize, node->arrayDimensions,
                                     &adjustedValue.value, rangeptr);
         } else {
             compatible = compatibleValue(server, &node->dataType, node->valueRank,
                                      node->arrayDimensionsSize, node->arrayDimensions,
                                      &adjustedValue.value, rangeptr);
         }
 
 
         if(!compatible) {
             if(rangeptr)
                 UA_free(range.dimensions);
             return UA_STATUSCODE_BADTYPEMISMATCH;
         }
     }
 
     /* Set the source timestamp if there is none */
     if(!adjustedValue.hasSourceTimestamp) {
         adjustedValue.sourceTimestamp = UA_DateTime_now();
         adjustedValue.hasSourceTimestamp = true;
     }
 
     /* Ok, do it */
     if(node->valueSource == UA_VALUESOURCE_DATA) {
         if(!rangeptr)
             retval = writeValueAttributeWithoutRange(node, &adjustedValue);
         else
             retval = writeValueAttributeWithRange(node, &adjustedValue, rangeptr);
 
         /* Callback after writing */
         if(retval == UA_STATUSCODE_GOOD && node->value.data.callback.onWrite)
             node->value.data.callback.onWrite(server, &session->sessionId,
                                               session->sessionHandle, &node->nodeId,
                                               node->context, rangeptr,
                                               &adjustedValue);
     } else {
         if(node->value.dataSource.write) {
             retval = node->value.dataSource.write(server, &session->sessionId,
                                                   session->sessionHandle, &node->nodeId,
                                                   node->context, rangeptr, &adjustedValue);
         } else {
             retval = UA_STATUSCODE_BADWRITENOTSUPPORTED;
         }
     }
 
     /* Clean up */
     if(rangeptr)
         UA_free(range.dimensions);
     return retval;
 }
