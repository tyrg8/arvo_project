commit 3ad3c30ab4f3791e438558e4a9cf5481da2f1156
Author: John Cupitt <jcupitt@gmail.com>
Date:   Mon Feb 10 17:34:45 2020 +0000

    better handling of GIFs with out of bounds frames
    
    The recent reworking of gifload did not check for out of bounds frames
    before setting DISPOSE_BACKGROUND.

diff --git a/libvips/foreign/gifload.c b/libvips/foreign/gifload.c
index 5a13c3bf0..370d48b60 100644
--- a/libvips/foreign/gifload.c
+++ b/libvips/foreign/gifload.c
@@ -846,20 +846,20 @@ vips_foreign_load_gif_build_cmap( VipsForeignLoadGif *gif )
 
 static void
 vips_foreign_load_gif_render_line( VipsForeignLoadGif *gif, 
-	int width, VipsPel * restrict dst )
+	int width, VipsPel * restrict dst, VipsPel * restrict src )
 {
-	guint32 *idst = (guint32 *) dst;
+	guint32 * restrict idst = (guint32 *) dst;
 
 	int x;
 
 	for( x = 0; x < width; x++ ) {
-		VipsPel v = gif->line[x];
+		VipsPel v = src[x];
 
 		if( v != gif->transparent_index ) 
 			idst[x] = gif->cmap[v];
 	}
 }
 
 /* Render the current gif frame into an RGBA buffer. GIFs can accumulate,
  * depending on the current dispose mode.
  */
@@ -867,144 +867,149 @@ static int
 vips_foreign_load_gif_render( VipsForeignLoadGif *gif )
 {
 	GifFileType *file = gif->file;
 
 	if( DGifGetImageDesc( file ) == GIF_ERROR ) {
 		vips_foreign_load_gif_error( gif );
 		return( -1 );
 	}
 
-	/* Update the colour map for this frame.
-	 */
-	vips_foreign_load_gif_build_cmap( gif );
-
-	/* PREVIOUS means we init the frame with the last un-disposed frame. 
-	 * So the last un-disposed frame is used as a backdrop for the new 
-	 * frame.
-	 */
-	if( gif->dispose == DISPOSE_PREVIOUS ) 
-		memcpy( VIPS_IMAGE_ADDR( gif->scratch, 0, 0 ),
-			VIPS_IMAGE_ADDR( gif->previous, 0, 0 ),
-			VIPS_IMAGE_SIZEOF_IMAGE( gif->scratch ) );
-
 	/* giflib does not check that the Left / Top / Width / Height for this
 	 * Image is inside the canvas.
 	 *
 	 * We could clip against the canvas, but for now, just ignore out of
 	 * bounds frames. Watch for int overflow too.
 	 */
 	if( file->Image.Left < 0 ||
 		file->Image.Left > VIPS_MAX_COORD ||
 		file->Image.Width <= 0 ||
 		file->Image.Width > VIPS_MAX_COORD ||
 		file->Image.Left + file->Image.Width > file->SWidth ||
 		file->Image.Top < 0 ||
 		file->Image.Top > VIPS_MAX_COORD ||
 		file->Image.Height <= 0 ||
 		file->Image.Height > VIPS_MAX_COORD ||
 		file->Image.Top + file->Image.Height > file->SHeight ) {
 		VIPS_DEBUG_MSG( "vips_foreign_load_gif_render: "
 			"out of bounds frame of %d x %d pixels at %d x %d\n",
 			file->Image.Width, file->Image.Height,
 			file->Image.Left, file->Image.Top );
+
+		/* Don't flag an error -- many GIFs have this problem.
+		 */
+		return( 0 );
 	}
-	else if( file->Image.Interlace ) {
+
+	/* Update the colour map for this frame.
+	 */
+	vips_foreign_load_gif_build_cmap( gif );
+
+	/* PREVIOUS means we init the frame with the last un-disposed frame. 
+	 * So the last un-disposed frame is used as a backdrop for the new 
+	 * frame.
+	 */
+	if( gif->dispose == DISPOSE_PREVIOUS ) 
+		memcpy( VIPS_IMAGE_ADDR( gif->scratch, 0, 0 ),
+			VIPS_IMAGE_ADDR( gif->previous, 0, 0 ),
+			VIPS_IMAGE_SIZEOF_IMAGE( gif->scratch ) );
+
+	if( file->Image.Interlace ) {
 		int i;
 
 		VIPS_DEBUG_MSG( "vips_foreign_load_gif_render: "
 			"interlaced frame of %d x %d pixels at %d x %d\n",
 			file->Image.Width, file->Image.Height,
 			file->Image.Left, file->Image.Top );
 
 		for( i = 0; i < 4; i++ ) {
 			int y;
 
 			for( y = InterlacedOffset[i]; y < file->Image.Height; 
 				y += InterlacedJumps[i] ) {
 				VipsPel *dst = VIPS_IMAGE_ADDR( gif->scratch, 
 					file->Image.Left, file->Image.Top + y );
 
 				if( DGifGetLine( gif->file, 
 					gif->line, file->Image.Width ) == 
 						GIF_ERROR ) {
 					vips_foreign_load_gif_error( gif );
 					return( -1 );
 				}
 
 				vips_foreign_load_gif_render_line( gif, 
-					file->Image.Width, dst );
+					file->Image.Width, dst, gif->line );
 			}
 		}
 	}
 	else {
 		int y;
 
 		VIPS_DEBUG_MSG( "vips_foreign_load_gif_render: "
 			"non-interlaced frame of %d x %d pixels at %d x %d\n",
 			file->Image.Width, file->Image.Height,
 			file->Image.Left, file->Image.Top );
 
 		for( y = 0; y < file->Image.Height; y++ ) {
 			VipsPel *dst = VIPS_IMAGE_ADDR( gif->scratch, 
 				file->Image.Left, file->Image.Top + y );
 
 			if( DGifGetLine( gif->file, 
 				gif->line, file->Image.Width ) == GIF_ERROR ) {
 				vips_foreign_load_gif_error( gif );
 				return( -1 );
 			}
 
 			vips_foreign_load_gif_render_line( gif, 
-				file->Image.Width, dst );
+				file->Image.Width, dst, gif->line );
 		}
 	}
 
 	/* Copy the result to frame, which then is picked up from outside
 	 */
 	memcpy( VIPS_IMAGE_ADDR( gif->frame, 0, 0 ),
-		VIPS_IMAGE_ADDR(gif->scratch, 0, 0 ),
+		VIPS_IMAGE_ADDR( gif->scratch, 0, 0 ),
 		VIPS_IMAGE_SIZEOF_IMAGE( gif->frame ) );
 
 	if( gif->dispose == DISPOSE_BACKGROUND ) {
 		/* BACKGROUND means we reset the frame to transparent before we
 		 * render the next set of pixels.
 		 */
 		guint32 *q = (guint32 *) VIPS_IMAGE_ADDR( gif->scratch, 
 			file->Image.Left, file->Image.Top );
 
 		/* What we write for transparent pixels. We want RGB to be
 		 * 255, and A to be 0.
 		 */
 		guint32 ink = GUINT32_TO_BE( 0xffffff00 );
 
 		int x, y;
 
 		/* Generate the first line a pixel at a time, memcpy() for
 		 * subsequent lines.
 		 */
 		if( file->Image.Height > 0 ) 
 			for( x = 0; x < file->Image.Width; x++ )
 				q[x] = ink;
 
 		for( y = 1; y < file->Image.Height; y++ )
 			memcpy( q + gif->scratch->Xsize * y, 
 				q, 
 				file->Image.Width * sizeof( guint32 ) );
 	}
 	else if( gif->dispose == DISPOSAL_UNSPECIFIED || 
 		gif->dispose == DISPOSE_DO_NOT ) 
 		/* Copy the frame to previous, so it can be restored if 
 		 * DISPOSE_PREVIOUS is specified in a later frame.
 		 */
 		memcpy( VIPS_IMAGE_ADDR( gif->previous, 0, 0 ),
-			VIPS_IMAGE_ADDR(gif->frame, 0, 0 ),
+			VIPS_IMAGE_ADDR( gif->frame, 0, 0 ),
 			VIPS_IMAGE_SIZEOF_IMAGE( gif->previous ) );
 
 	/* Reset values, as Graphic Control Extension is optional
 	 */
 	gif->dispose = DISPOSAL_UNSPECIFIED;
 	gif->transparent_index = NO_TRANSPARENT_INDEX;
 
 	return( 0 );
 }
 
 #ifdef VIPS_DEBUG
