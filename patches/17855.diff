commit dc14b5a69be02341d84e2956131f93f962408af2
Author: Sebastian Rasmussen <sebras@gmail.com>
Date:   Fri Mar 27 05:41:07 2020 +0800

    jbig2dec: Adjust number of bytes consumed by MMR decoder.
    
    The MMR decoder pre-buffers up to 32 bits of encoded input data in a word
    buffer before they are consumed by the MMR decoder. Once bits are consumed, the
    pre-buffer will be filled up with more input data. When filling up the buffer
    the decoder would previously stay clear of reading data belonging to succeeding
    segments, but still indicated that it consumed those bytes it never read. Once
    finished the MMR decoder lied to the caller by propagating the incorrect number
    of consumed bytes. The caller subtracted the consumed number of bytes from the
    size and end up in underflow causing the next MMR decoding to first read input
    data at the wrong location, later ending up attempting to read outside the MMR
    encoded input buffer.
    
    Now, the MMR decoder keeps track of how many bits it has consumed and
    accurately rounds this number up to a whole number of bytes to the caller.
    
    Fixes OSS-fuzz issue 17855.
    
    Thanks to OSS-fuzz for reporting.

diff --git a/jbig2_mmr.c b/jbig2_mmr.c
index 8029c81..94ff429 100644
--- a/jbig2_mmr.c
+++ b/jbig2_mmr.c
@@ -43,14 +43,15 @@
 typedef struct {
     uint32_t width;
     uint32_t height;
     const byte *data;
     size_t size;
+    size_t consumed_bits;
     uint32_t data_index;
     uint32_t bit_index;
     uint32_t word;
 } Jbig2MmrCtx;
 
 #define MINUS1 UINT32_MAX
 #define ERROR -1
 #define ZEROES -2
 #define UNCOMPRESSED -3
@@ -58,44 +59,48 @@ typedef struct {
 static void
 jbig2_decode_mmr_init(Jbig2MmrCtx *mmr, int width, int height, const byte *data, size_t size)
 {
-    size_t i;
-    uint32_t word = 0;
-
     mmr->width = width;
     mmr->height = height;
     mmr->data = data;
     mmr->size = size;
     mmr->data_index = 0;
-    mmr->bit_index = 0;
+    mmr->bit_index = 32;
+    mmr->word = 0;
+    mmr->consumed_bits = 0;
 
-    for (i = 0; i < size && i < 4; i++)
-        word |= (data[i] << ((3 - i) << 3));
-    mmr->word = word;
+    while (mmr->bit_index >= 8 && mmr->data_index < mmr->size) {
+        mmr->bit_index -= 8;
+        mmr->word |= (mmr->data[mmr->data_index] << mmr->bit_index);
+        mmr->data_index++;
+    }
 }
 
 static void
 jbig2_decode_mmr_consume(Jbig2MmrCtx *mmr, int n_bits)
 {
+    mmr->consumed_bits += n_bits;
+    if (mmr->consumed_bits > mmr->size * 8)
+        mmr->consumed_bits = mmr->size * 8;
+
     mmr->word <<= n_bits;
     mmr->bit_index += n_bits;
-    while (mmr->bit_index >= 8) {
+    while (mmr->bit_index >= 8 && mmr->data_index < mmr->size) {
         mmr->bit_index -= 8;
-        if (mmr->data_index + 4 < mmr->size)
-            mmr->word |= (mmr->data[mmr->data_index + 4] << mmr->bit_index);
+        mmr->word |= (mmr->data[mmr->data_index] << mmr->bit_index);
         mmr->data_index++;
     }
 }
 
 /*
 <raph> the first 2^(initialbits) entries map bit patterns to decodes
 <raph> let's say initial_bits is 8 for the sake of example
 <raph> and that the code is 1001
 <raph> that means that entries 0x90 .. 0x9f have the entry { val, 4 }
 <raph> because those are all the bytes that start with the code
 <raph> and the 4 is the length of the code
 ... if (n_bits > initial_bits) ...
 <raph> anyway, in that case, it basically points to a mini table
 <raph> the n_bits is the maximum length of all codes beginning with that byte
 <raph> so 2^(n_bits - initial_bits) is the size of the mini-table
 <raph> peter came up with this, and it makes sense
 */
@@ -1231,34 +1236,34 @@ int
 jbig2_decode_halftone_mmr(Jbig2Ctx *ctx, const Jbig2GenericRegionParams *params, const byte *data, size_t size, Jbig2Image *image, size_t *consumed_bytes)
 {
     Jbig2MmrCtx mmr;
     const uint32_t rowstride = image->stride;
     byte *dst = image->data;
     byte *ref = NULL;
     uint32_t y;
     int code = 0;
     const uint32_t EOFB = 0x001001;
     int eofb = 0;
 
     jbig2_decode_mmr_init(&mmr, image->width, image->height, data, size);
 
     for (y = 0; !eofb && y < image->height; y++) {
         memset(dst, 0, rowstride);
         code = jbig2_decode_mmr_line(ctx, &mmr, ref, dst, &eofb);
         if (code < 0)
             return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, JBIG2_UNKNOWN_SEGMENT_NUMBER, "failed to decode halftone mmr line");
         ref = dst;
         dst += rowstride;
     }
 
     if (eofb && y < image->height) {
         memset(dst, 0, rowstride * (image->height - y));
     }
 
     /* test for EOFB (see section 6.2.6) */
     if (mmr.word >> 8 == EOFB) {
         jbig2_decode_mmr_consume(&mmr, 24);
     }
 
-    *consumed_bytes += mmr.data_index + (mmr.bit_index >> 3) + (mmr.bit_index > 0 ? 1 : 0);
+    *consumed_bytes += (mmr.consumed_bits + 7) / 8;
     return code;
 }
