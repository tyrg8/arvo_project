commit a9d287fd5a16d593aa742c4f0b2d1782a6fc12d7
Author: Roman Lebedev <lebedev.ri@gmail.com>
Date:   Mon Oct 16 20:41:30 2017 +0300

    ArwDecoder: do not catch IOException's.

diff --git a/src/librawspeed/decoders/ArwDecoder.cpp b/src/librawspeed/decoders/ArwDecoder.cpp
index 483fc378..f0e35904 100644
--- a/src/librawspeed/decoders/ArwDecoder.cpp
+++ b/src/librawspeed/decoders/ArwDecoder.cpp
@@ -108,129 +108,114 @@ RawImage ArwDecoder::decodeSRF(const TiffIFD* raw) {
 RawImage ArwDecoder::decodeRawInternal() {
   const TiffIFD* raw = nullptr;
   vector<const TiffIFD*> data = mRootIFD->getIFDsWithTag(STRIPOFFSETS);
 
   if (data.empty()) {
     TiffEntry *model = mRootIFD->getEntryRecursive(MODEL);
 
     if (model && model->getString() == "DSLR-A100") {
       // We've caught the elusive A100 in the wild, a transitional format
       // between the simple sanity of the MRW custom format and the wordly
       // wonderfullness of the Tiff-based ARW format, let's shoot from the hip
       raw = mRootIFD->getIFDWithTag(SUBIFDS);
       uint32 off = raw->getEntry(SUBIFDS)->getU32();
       uint32 width = 3881;
       uint32 height = 2608;
 
       mRaw->dim = iPoint2D(width, height);
       mRaw->createData();
       ByteStream input(mFile, off);
 
-      try {
-        DecodeARW(input, width, height);
-      } catch (IOException &e) {
-        mRaw->setError(e.what());
-        // Let's ignore it, it may have delivered somewhat useful data.
-      }
+      DecodeARW(input, width, height);
 
       return mRaw;
     }
 
     if (hints.has("srf_format"))
       return decodeSRF(raw);
 
     ThrowRDE("No image data found");
   }
 
   raw = data[0];
   int compression = raw->getEntry(COMPRESSION)->getU32();
   if (1 == compression) {
-    try {
-      DecodeUncompressed(raw);
-    } catch (IOException &e) {
-      mRaw->setError(e.what());
-    }
-
+    DecodeUncompressed(raw);
     return mRaw;
   }
 
   if (32767 != compression)
     ThrowRDE("Unsupported compression");
 
   TiffEntry *offsets = raw->getEntry(STRIPOFFSETS);
   TiffEntry *counts = raw->getEntry(STRIPBYTECOUNTS);
 
   if (offsets->count != 1) {
     ThrowRDE("Multiple Strips found: %u", offsets->count);
   }
   if (counts->count != offsets->count) {
     ThrowRDE(
         "Byte count number does not match strip size: count:%u, strips:%u ",
         counts->count, offsets->count);
   }
   uint32 width = raw->getEntry(IMAGEWIDTH)->getU32();
   uint32 height = raw->getEntry(IMAGELENGTH)->getU32();
   uint32 bitPerPixel = raw->getEntry(BITSPERSAMPLE)->getU32();
 
   // Sony E-550 marks compressed 8bpp ARW with 12 bit per pixel
   // this makes the compression detect it as a ARW v1.
   // This camera has however another MAKER entry, so we MAY be able
   // to detect it this way in the future.
   data = mRootIFD->getIFDsWithTag(MAKE);
   if (data.size() > 1) {
     for (auto &i : data) {
       string make = i->getEntry(MAKE)->getString();
       /* Check for maker "SONY" without spaces */
       if (make == "SONY")
         bitPerPixel = 8;
     }
   }
 
   bool arw1 = counts->getU32() * 8 != width * height * bitPerPixel;
   if (arw1)
     height += 8;
 
   if (width == 0 || height == 0 || width > 8000 || height > 5320)
     ThrowRDE("Unexpected image dimensions found: (%u; %u)", width, height);
 
   mRaw->dim = iPoint2D(width, height);
   mRaw->createData();
 
   std::vector<ushort16> curve(0x4001);
   TiffEntry *c = raw->getEntry(SONY_CURVE);
   uint32 sony_curve[] = { 0, 0, 0, 0, 0, 4095 };
 
   for (uint32 i = 0; i < 4; i++)
     sony_curve[i+1] = (c->getU16(i) >> 2) & 0xfff;
 
   for (uint32 i = 0; i < 0x4001; i++)
     curve[i] = i;
 
   for (uint32 i = 0; i < 5; i++)
     for (uint32 j = sony_curve[i] + 1; j <= sony_curve[i+1]; j++)
       curve[j] = curve[j-1] + (1 << i);
 
   RawImageCurveGuard curveHandler(&mRaw, curve, uncorrectedRawValues);
 
   uint32 c2 = counts->getU32();
   uint32 off = offsets->getU32();
 
   if (!mFile->isValid(off))
     ThrowRDE("Data offset after EOF, file probably truncated");
 
   if (!mFile->isValid(off, c2))
     c2 = mFile->getSize() - off;
 
   ByteStream input(mFile, off, c2);
 
-  try {
-    if (arw1)
-      DecodeARW(input, width, height);
-    else
-      DecodeARW2(input, width, height, bitPerPixel);
-  } catch (IOException &e) {
-    mRaw->setError(e.what());
-    // Let's ignore it, it may have delivered somewhat useful data.
-  }
+  if (arw1)
+    DecodeARW(input, width, height);
+  else
+    DecodeARW2(input, width, height, bitPerPixel);
 
   return mRaw;
 }
