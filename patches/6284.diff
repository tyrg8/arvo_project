commit 289d36f90519affa549a18abbf29323b4e74cfc2
Author: Kevin Lubick <kjlubick@google.com>
Date:   Tue Feb 13 10:25:00 2018 -0500

    Address MSAN bug in SkAnimatedImage::decodeNextFrame
    
    Bug: oss-fuzz:6284
    Change-Id: I77537d6624e7d03fbbfe96046300a9dd7d609064
    Reviewed-on: https://skia-review.googlesource.com/106930
    Commit-Queue: Kevin Lubick <kjlubick@google.com>
    Reviewed-by: Leon Scroggins <scroggo@google.com>

diff --git a/src/android/SkAnimatedImage.cpp b/src/android/SkAnimatedImage.cpp
index 2b63f035b2..c9fa48387f 100644
--- a/src/android/SkAnimatedImage.cpp
+++ b/src/android/SkAnimatedImage.cpp
@@ -157,119 +157,120 @@ double SkAnimatedImage::finish() {
 int SkAnimatedImage::decodeNextFrame() {
     if (fFinished) {
         return kFinished;
     }
 
     bool animationEnded = false;
     int frameToDecode = this->computeNextFrame(fActiveFrame.fIndex, &animationEnded);
 
     SkCodec::FrameInfo frameInfo;
     if (fCodec->codec()->getFrameInfo(frameToDecode, &frameInfo)) {
         if (!frameInfo.fFullyReceived) {
             SkCodecPrintf("Frame %i not fully received\n", frameToDecode);
             return this->finish();
         }
 
         fCurrentFrameDuration = frameInfo.fDuration;
     } else {
         animationEnded = true;
         if (0 == frameToDecode) {
             // Static image. This is okay.
             frameInfo.fRequiredFrame = SkCodec::kNone;
             frameInfo.fAlphaType = fCodec->getInfo().alphaType();
+            frameInfo.fDisposalMethod = SkCodecAnimation::DisposalMethod::kKeep;
             // These fields won't be read.
             frameInfo.fDuration = INT_MAX;
             frameInfo.fFullyReceived = true;
             fCurrentFrameDuration = kFinished;
         } else {
             SkCodecPrintf("Error getting frameInfo for frame %i\n",
                           frameToDecode);
             return this->finish();
         }
     }
 
     if (frameToDecode == fActiveFrame.fIndex) {
         if (animationEnded) {
             return this->finish();
         }
         return fCurrentFrameDuration;
     }
 
     if (frameToDecode == fRestoreFrame.fIndex) {
         SkTSwap(fActiveFrame, fRestoreFrame);
         if (animationEnded) {
             return this->finish();
         }
         return fCurrentFrameDuration;
     }
 
     // The following code makes an effort to avoid overwriting a frame that will
     // be used again. If frame |i| is_restore_previous, frame |i+1| will not
     // depend on frame |i|, so do not overwrite frame |i-1|, which may be needed
     // for frame |i+1|.
     // We could be even smarter about which frames to save by looking at the
     // entire dependency chain.
     SkCodec::Options options;
     options.fFrameIndex = frameToDecode;
     if (frameInfo.fRequiredFrame == SkCodec::kNone) {
         if (is_restore_previous(frameInfo.fDisposalMethod)) {
             // frameToDecode will be discarded immediately after drawing, so
             // do not overwrite a frame which could possibly be used in the
             // future.
             if (fActiveFrame.fIndex != SkCodec::kNone &&
                     !is_restore_previous(fActiveFrame.fDisposalMethod)) {
                 SkTSwap(fActiveFrame, fRestoreFrame);
             }
         }
     } else {
         auto validPriorFrame = [&frameInfo, &frameToDecode](const Frame& frame) {
             if (SkCodec::kNone == frame.fIndex || is_restore_previous(frame.fDisposalMethod)) {
                 return false;
             }
 
             return frame.fIndex >= frameInfo.fRequiredFrame && frame.fIndex < frameToDecode;
         };
         if (validPriorFrame(fActiveFrame)) {
             if (is_restore_previous(frameInfo.fDisposalMethod)) {
                 // fActiveFrame is a good frame to use for this one, but we
                 // don't want to overwrite it.
                 fActiveFrame.copyTo(&fRestoreFrame);
             }
             options.fPriorFrame = fActiveFrame.fIndex;
         } else if (validPriorFrame(fRestoreFrame)) {
             if (!is_restore_previous(frameInfo.fDisposalMethod)) {
                 SkTSwap(fActiveFrame, fRestoreFrame);
             } else if (!fRestoreFrame.copyTo(&fActiveFrame)) {
                 SkCodecPrintf("Failed to restore frame\n");
                 return this->finish();
             }
             options.fPriorFrame = fActiveFrame.fIndex;
         }
     }
 
     auto alphaType = kOpaque_SkAlphaType == frameInfo.fAlphaType ?
                      kOpaque_SkAlphaType : kPremul_SkAlphaType;
     SkBitmap* dst = &fActiveFrame.fBitmap;
     if (dst->getPixels()) {
         SkAssertResult(dst->setAlphaType(alphaType));
     } else {
         auto info = fDecodeInfo.makeAlphaType(alphaType);
         if (!dst->tryAllocPixels(info)) {
             return this->finish();
         }
     }
 
     auto result = fCodec->codec()->getPixels(dst->info(), dst->getPixels(), dst->rowBytes(),
                                              &options);
     if (result != SkCodec::kSuccess) {
         SkCodecPrintf("error %i, frame %i of %i\n", result, frameToDecode, fFrameCount);
         return this->finish();
     }
 
     fActiveFrame.fIndex = frameToDecode;
     fActiveFrame.fDisposalMethod = frameInfo.fDisposalMethod;
 
     if (animationEnded) {
         return this->finish();
     }
     return fCurrentFrameDuration;
 }
