commit 364908fa52a94322d810fe59168db0b7e30c179b
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sun Jul 14 19:03:56 2019 -0400

    Create define for optimal small buffer size

diff --git a/MagickCore/blob.c b/MagickCore/blob.c
index 70760a83b..d498addb7 100644
--- a/MagickCore/blob.c
+++ b/MagickCore/blob.c
@@ -1050,103 +1050,103 @@ MagickExport void DisassociateBlob(Image *image)
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
   assert(image->blob != (BlobInfo *) NULL);
   assert(image->blob->signature == MagickCoreSignature);
   blob_info=image->blob;
   clone=MagickFalse;
   LockSemaphoreInfo(blob_info->semaphore);
   assert(blob_info->reference_count >= 0);
   if (blob_info->reference_count > 1)
     clone=MagickTrue;
   UnlockSemaphoreInfo(blob_info->semaphore);
   if (clone == MagickFalse)
     return;
   clone_info=CloneBlobInfo(blob_info);
   DestroyBlob(image);
   image->blob=clone_info;
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +  D i s c a r d B l o b B y t e s                                            %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  DiscardBlobBytes() discards bytes in a blob.
 %
 %  The format of the DiscardBlobBytes method is:
 %
 %      MagickBooleanType DiscardBlobBytes(Image *image,
 %        const MagickSizeType length)
 %
 %  A description of each parameter follows.
 %
 %    o image: the image.
 %
 %    o length:  the number of bytes to skip.
 %
 */
 MagickExport MagickBooleanType DiscardBlobBytes(Image *image,
   const MagickSizeType length)
 {
   register MagickOffsetType
     i;
 
   size_t
     quantum;
 
   ssize_t
     count;
 
   unsigned char
-    buffer[16384];
+    buffer[MagickMinBufferExtent];
 
   assert(image != (Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (length != (MagickSizeType) ((MagickOffsetType) length))
     return(MagickFalse);
   count=0;
   for (i=0; i < (MagickOffsetType) length; i+=count)
   {
     quantum=(size_t) MagickMin(length-i,sizeof(buffer));
     (void) ReadBlobStream(image,quantum,buffer,&count);
     if (count <= 0)
       {
         count=0;
         if (errno != EINTR)
           break;
       }
   }
   return(i < (MagickOffsetType) length ? MagickFalse : MagickTrue);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +   D u p l i c a t e s B l o b                                               %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  DuplicateBlob() duplicates a blob descriptor.
 %
 %  The format of the DuplicateBlob method is:
 %
 %      void DuplicateBlob(Image *image,const Image *duplicate)
 %
 %  A description of each parameter follows:
 %
 %    o image: the image.
 %
 %    o duplicate: the duplicate image.
 %
 */
@@ -3154,20 +3154,20 @@ MagickExport void MSBOrderShort(unsigned char *p,const size_t length)
 static inline MagickBooleanType SetStreamBuffering(const ImageInfo *image_info,
   Image *image)
 {
   const char
     *option;
 
   int
     status;
 
   size_t
     size;
 
-  size=16384;
+  size=MagickMinBufferExtent;
   option=GetImageOption(image_info,"stream:buffer-size");
   if (option != (const char *) NULL)
     size=StringToUnsignedLong(option);
   status=setvbuf(image->blob->file_info.file,(char *) NULL,size == 0 ?
     _IONBF : _IOFBF,size);
   return(status == 0 ? MagickTrue : MagickFalse);
 }
diff --git a/MagickCore/blob.h b/MagickCore/blob.h
index d0e425985..7dabbbecc 100644
--- a/MagickCore/blob.h
+++ b/MagickCore/blob.h
@@ -21,8 +21,9 @@
 #if defined(__cplusplus) || defined(c_plusplus)
 extern "C" {
 #endif
 
 #define MagickMaxBufferExtent  81920
+#define MagickMinBufferExtent  16384
 
 typedef enum
 {
diff --git a/coders/bytebuffer-private.h b/coders/bytebuffer-private.h
index db516d99e..d3a01465c 100644
--- a/coders/bytebuffer-private.h
+++ b/coders/bytebuffer-private.h
@@ -16,17 +16,19 @@
 #ifndef MAGICK_BYTE_BUFFER_PRIVATE_H
 #define MAGICK_BYTE_BUFFER_PRIVATE_H
 
+#include "MagickCore/blob.h"
+
 typedef struct _MagickByteBuffer
 {
   Image
     *image;
 
   ssize_t
     offset,
     count;
 
   unsigned char
-    data[8192];
+    data[MagickMinBufferExtent];
 } MagickByteBuffer;
 
 static inline int ReadMagickByteBuffer(MagickByteBuffer *buffer)
diff --git a/coders/jpeg.c b/coders/jpeg.c
index 2d62c9954..275be95cd 100644
--- a/coders/jpeg.c
+++ b/coders/jpeg.c
@@ -1,113 +1,112 @@
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %                        JJJJJ  PPPP   EEEEE   GGGG                           %
 %                          J    P   P  E      G                               %
 %                          J    PPPP   EEE    G  GG                           %
 %                        J J    P      E      G   G                           %
 %                        JJJ    P      EEEEE   GGG                            %
 %                                                                             %
 %                                                                             %
 %                       Read/Write JPEG Image Format                          %
 %                                                                             %
 %                              Software Design                                %
 %                                John Cristy                                  %
 %                                 July 1992                                   %
 %                                                                             %
 %                                                                             %
 %  Copyright 1999-2013 ImageMagick Studio LLC, a non-profit organization      %
 %  dedicated to making software imaging solutions freely available.           %
 %                                                                             %
 %  You may not use this file except in compliance with the License.  You may  %
 %  obtain a copy of the License at                                            %
 %                                                                             %
 %    https://imagemagick.org/script/license.php                               %
 %                                                                             %
 %  Unless required by applicable law or agreed to in writing, software        %
 %  distributed under the License is distributed on an "AS IS" BASIS,          %
 %  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   %
 %  See the License for the specific language governing permissions and        %
 %  limitations under the License.                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 % This software is based in part on the work of the Independent JPEG Group.
 % See ftp://ftp.uu.net/graphics/jpeg/jpegsrc.v6b.tar.gz for copyright and
 % licensing restrictions.  Blob support contributed by Glenn Randers-Pehrson.
 %
 %
 */
 
 
 /*
   Include declarations.
 */
 #include "MagickCore/studio.h"
 #include "MagickCore/artifact.h"
 #include "MagickCore/attribute.h"
 #include "MagickCore/blob.h"
 #include "MagickCore/blob-private.h"
 #include "MagickCore/cache.h"
 #include "MagickCore/color.h"
 #include "MagickCore/colormap-private.h"
 #include "MagickCore/color-private.h"
 #include "MagickCore/colormap.h"
 #include "MagickCore/colorspace.h"
 #include "MagickCore/colorspace-private.h"
 #include "MagickCore/constitute.h"
 #include "MagickCore/exception.h"
 #include "MagickCore/exception-private.h"
 #include "MagickCore/geometry.h"
 #include "MagickCore/image.h"
 #include "MagickCore/image-private.h"
 #include "MagickCore/list.h"
 #include "MagickCore/log.h"
 #include "MagickCore/magick.h"
 #include "MagickCore/memory_.h"
 #include "MagickCore/memory-private.h"
 #include "MagickCore/module.h"
 #include "MagickCore/monitor.h"
 #include "MagickCore/monitor-private.h"
 #include "MagickCore/option.h"
 #include "MagickCore/option-private.h"
 #include "MagickCore/pixel-accessor.h"
 #include "MagickCore/profile.h"
 #include "MagickCore/property.h"
 #include "MagickCore/quantum-private.h"
 #include "MagickCore/resource_.h"
 #include "MagickCore/semaphore.h"
 #include "MagickCore/splay-tree.h"
 #include "MagickCore/static.h"
 #include "MagickCore/string_.h"
 #include "MagickCore/string-private.h"
 #include "MagickCore/token.h"
 #include "MagickCore/utility.h"
 #include "MagickCore/xml-tree.h"
 #include "MagickCore/xml-tree-private.h"
 #include <setjmp.h>
 #if defined(MAGICKCORE_JPEG_DELEGATE)
 #define JPEG_INTERNAL_OPTIONS
 #if defined(__MINGW32__)
 # define XMD_H 1  /* Avoid conflicting typedef for INT32 */
 #endif
 #undef HAVE_STDLIB_H
 #include "jpeglib.h"
 #include "jerror.h"
 #endif
 
 /*
   Define declarations.
 */
 #define ICC_MARKER  (JPEG_APP0+2)
 #define ICC_PROFILE  "ICC_PROFILE"
 #define IPTC_MARKER  (JPEG_APP0+13)
 #define XML_MARKER  (JPEG_APP0+1)
-#define MaxBufferExtent  16384
 #define MaxJPEGScans  1024
 
 /*
   Typedef declarations.
 */
 #if defined(MAGICKCORE_JPEG_DELEGATE)
@@ -255,21 +254,21 @@ static MagickBooleanType IsJPEG(const unsigned char *magick,const size_t length)
 static boolean FillInputBuffer(j_decompress_ptr cinfo)
 {
   SourceManager
     *source;
 
   source=(SourceManager *) cinfo->src;
   source->manager.bytes_in_buffer=(size_t) ReadBlob(source->image,
-    MaxBufferExtent,source->buffer);
+    MagickMinBufferExtent,source->buffer);
   if (source->manager.bytes_in_buffer == 0)
     {
       if (source->start_of_blob != FALSE)
         ERREXIT(cinfo,JERR_INPUT_EMPTY);
       WARNMS(cinfo,JWRN_JPEG_EOF);
       source->buffer[0]=(JOCTET) 0xff;
       source->buffer[1]=(JOCTET) JPEG_EOI;
       source->manager.bytes_in_buffer=2;
     }
   source->manager.next_input_byte=source->buffer;
   source->start_of_blob=FALSE;
   return(TRUE);
 }
@@ -881,20 +880,20 @@ static void TerminateSource(j_decompress_ptr cinfo)
 static void JPEGSourceManager(j_decompress_ptr cinfo,Image *image)
 {
   SourceManager
     *source;
 
   cinfo->src=(struct jpeg_source_mgr *) (*cinfo->mem->alloc_small)
     ((j_common_ptr) cinfo,JPOOL_IMAGE,sizeof(SourceManager));
   source=(SourceManager *) cinfo->src;
   source->buffer=(JOCTET *) (*cinfo->mem->alloc_small)
-    ((j_common_ptr) cinfo,JPOOL_IMAGE,MaxBufferExtent*sizeof(JOCTET));
+    ((j_common_ptr) cinfo,JPOOL_IMAGE,MagickMinBufferExtent*sizeof(JOCTET));
   source=(SourceManager *) cinfo->src;
   source->manager.init_source=InitializeSource;
   source->manager.fill_input_buffer=FillInputBuffer;
   source->manager.skip_input_data=SkipInputData;
   source->manager.resync_to_restart=jpeg_resync_to_restart;
   source->manager.term_source=TerminateSource;
   source->manager.bytes_in_buffer=0;
   source->manager.next_input_byte=NULL;
   source->image=image;
 }
@@ -1815,13 +1814,13 @@ static QuantizationTable *DestroyQuantizationTable(QuantizationTable *table)
 static boolean EmptyOutputBuffer(j_compress_ptr cinfo)
 {
   DestinationManager
     *destination;
 
   destination=(DestinationManager *) cinfo->dest;
   destination->manager.free_in_buffer=(size_t) WriteBlob(destination->image,
-    MaxBufferExtent,destination->buffer);
-  if (destination->manager.free_in_buffer != MaxBufferExtent)
+    MagickMinBufferExtent,destination->buffer);
+  if (destination->manager.free_in_buffer != MagickMinBufferExtent)
     ERREXIT(cinfo,JERR_FILE_WRITE);
   destination->manager.next_output_byte=destination->buffer;
   return(TRUE);
 }
@@ -2023,30 +2022,30 @@ static QuantizationTable *GetQuantizationTable(const char *filename,
 static void InitializeDestination(j_compress_ptr cinfo)
 {
   DestinationManager
     *destination;
 
   destination=(DestinationManager *) cinfo->dest;
   destination->buffer=(JOCTET *) (*cinfo->mem->alloc_small)
-    ((j_common_ptr) cinfo,JPOOL_IMAGE,MaxBufferExtent*sizeof(JOCTET));
+    ((j_common_ptr) cinfo,JPOOL_IMAGE,MagickMinBufferExtent*sizeof(JOCTET));
   destination->manager.next_output_byte=destination->buffer;
-  destination->manager.free_in_buffer=MaxBufferExtent;
+  destination->manager.free_in_buffer=MagickMinBufferExtent;
 }
 
 static void TerminateDestination(j_compress_ptr cinfo)
 {
   DestinationManager
     *destination;
 
   destination=(DestinationManager *) cinfo->dest;
-  if ((MaxBufferExtent-(int) destination->manager.free_in_buffer) > 0)
+  if ((MagickMinBufferExtent-(int) destination->manager.free_in_buffer) > 0)
     {
       ssize_t
         count;
 
-      count=WriteBlob(destination->image,MaxBufferExtent-
+      count=WriteBlob(destination->image,MagickMinBufferExtent-
         destination->manager.free_in_buffer,destination->buffer);
       if (count != (ssize_t)
-          (MaxBufferExtent-destination->manager.free_in_buffer))
+          (MagickMinBufferExtent-destination->manager.free_in_buffer))
         ERREXIT(cinfo,JERR_FILE_WRITE);
     }
 }
diff --git a/coders/mat.c b/coders/mat.c
index 17817371f..f1af3d534 100644
--- a/coders/mat.c
+++ b/coders/mat.c
@@ -494,75 +494,75 @@ int zip_status;
 ssize_t TotalSize = 0;
 
   if(clone_info==NULL) return NULL;
   if(clone_info->file)    /* Close file opened from previous transaction. */
   {
     fclose(clone_info->file);
     clone_info->file = NULL;
     (void) remove_utf8(clone_info->filename);
   }
 
-  cache_block = AcquireQuantumMemory((size_t)(*Size < 16384) ? *Size: 16384,sizeof(unsigned char *));
+  cache_block = AcquireQuantumMemory((size_t)(*Size < MagickMinBufferExtent) ? *Size: MagickMinBufferExtent,sizeof(unsigned char *));
   if(cache_block==NULL) return NULL;
   decompress_block = AcquireQuantumMemory((size_t)(4096),sizeof(unsigned char *));
   if(decompress_block==NULL)
   {
     RelinquishMagickMemory(cache_block);
     return NULL;
   }
 
   mat_file=0;
   file = AcquireUniqueFileResource(clone_info->filename);
   if (file != -1)
     mat_file = fdopen(file,"w");
   if(!mat_file)
   {
     RelinquishMagickMemory(cache_block);
     RelinquishMagickMemory(decompress_block);
     (void) LogMagickEvent(CoderEvent,GetMagickModule(),"Cannot create file stream for decompressed image");
     return NULL;
   }
 
   zip_info.zalloc=AcquireZIPMemory;
   zip_info.zfree=RelinquishZIPMemory;
   zip_info.opaque = (voidpf) NULL;
   zip_status = inflateInit(&zip_info);
   if (zip_status != Z_OK)
     {
       RelinquishMagickMemory(cache_block);
       RelinquishMagickMemory(decompress_block);
       (void) ThrowMagickException(exception,GetMagickModule(),CorruptImageError,
         "UnableToUncompressImage","`%s'",clone_info->filename);
       (void) fclose(mat_file);
       RelinquishUniqueFileResource(clone_info->filename);
       return NULL;
     }
   /* zip_info.next_out = 8*4;*/
 
   zip_info.avail_in = 0;
   zip_info.total_out = 0;
   while(*Size>0 && !EOFBlob(orig))
   {
-    magick_size = ReadBlob(orig, (*Size < 16384) ? *Size : 16384, (unsigned char *) cache_block);
+    magick_size = ReadBlob(orig, (*Size < MagickMinBufferExtent) ? *Size : MagickMinBufferExtent, (unsigned char *) cache_block);
     if (magick_size == 0)
       break;
     zip_info.next_in = (Bytef *) cache_block;
     zip_info.avail_in = (uInt) magick_size;
 
     while(zip_info.avail_in>0)
     {
       zip_info.avail_out = 4096;
       zip_info.next_out = (Bytef *) decompress_block;
       zip_status = inflate(&zip_info,Z_NO_FLUSH);
       if ((zip_status != Z_OK) && (zip_status != Z_STREAM_END))
         break;
       extent=fwrite(decompress_block, 4096-zip_info.avail_out, 1, mat_file);
       (void) extent;
       TotalSize += 4096-zip_info.avail_out;
 
       if(zip_status == Z_STREAM_END) goto DblBreak;
     }
     if ((zip_status != Z_OK) && (zip_status != Z_STREAM_END))
       break;
 
     *Size -= (unsigned int) magick_size;
   }
diff --git a/coders/psd.c b/coders/psd.c
index 157551ae9..18986d4cc 100644
--- a/coders/psd.c
+++ b/coders/psd.c
@@ -2728,132 +2728,130 @@ static size_t WriteCompressionStart(const PSDInfo *psd_info,Image *image,
 static size_t WritePSDChannel(const PSDInfo *psd_info,
   const ImageInfo *image_info,Image *image,Image *next_image,
   const QuantumType quantum_type, unsigned char *compact_pixels,
   MagickOffsetType size_offset,const MagickBooleanType separate,
   const CompressionType compression,ExceptionInfo *exception)
 {
   MagickBooleanType
     monochrome;
 
   QuantumInfo
     *quantum_info;
 
   register const Quantum
     *p;
 
   register ssize_t
     i;
 
   size_t
     count,
     length;
 
   ssize_t
     y;
 
   unsigned char
     *pixels;
 
 #ifdef MAGICKCORE_ZLIB_DELEGATE
 
-#define CHUNK 16384
-
   int
     flush,
     level;
 
   unsigned char
     *compressed_pixels;
 
   z_stream
     stream;
 
   compressed_pixels=(unsigned char *) NULL;
   flush=Z_NO_FLUSH;
 #endif
   count=0;
   if (separate != MagickFalse)
     {
       size_offset=TellBlob(image)+2;
       count+=WriteCompressionStart(psd_info,image,next_image,compression,1);
     }
   if (next_image->depth > 8)
     next_image->depth=16;
   monochrome=IsImageMonochrome(image) && (image->depth == 1) ?
     MagickTrue : MagickFalse;
   quantum_info=AcquireQuantumInfo(image_info,next_image);
   if (quantum_info == (QuantumInfo *) NULL)
     return(0);
   pixels=(unsigned char *) GetQuantumPixels(quantum_info);
 #ifdef MAGICKCORE_ZLIB_DELEGATE
   if (compression == ZipCompression)
     {
-      compressed_pixels=(unsigned char *) AcquireQuantumMemory(CHUNK,
-        sizeof(*compressed_pixels));
+      compressed_pixels=(unsigned char *) AcquireQuantumMemory(
+        MagickMinBufferExtent,sizeof(*compressed_pixels));
       if (compressed_pixels == (unsigned char *) NULL)
         {
           quantum_info=DestroyQuantumInfo(quantum_info);
           return(0);
         }
       memset(&stream,0,sizeof(stream));
       stream.data_type=Z_BINARY;
       level=Z_DEFAULT_COMPRESSION;
       if ((image_info->quality > 0 && image_info->quality < 10))
         level=(int) image_info->quality;
       if (deflateInit(&stream,level) != Z_OK)
         {
           quantum_info=DestroyQuantumInfo(quantum_info);
           compressed_pixels=(unsigned char *) RelinquishMagickMemory(
             compressed_pixels);
           return(0);
         }
     }
 #endif
   for (y=0; y < (ssize_t) next_image->rows; y++)
   {
     p=GetVirtualPixels(next_image,0,y,next_image->columns,1,exception);
     if (p == (const Quantum *) NULL)
       break;
     length=ExportQuantumPixels(next_image,(CacheView *) NULL,quantum_info,
       quantum_type,pixels,exception);
     if (monochrome != MagickFalse)
       for (i=0; i < (ssize_t) length; i++)
         pixels[i]=(~pixels[i]);
     if (compression == RLECompression)
       {
         length=PSDPackbitsEncodeImage(image,length,pixels,compact_pixels,
           exception);
         count+=WriteBlob(image,length,compact_pixels);
         size_offset+=WritePSDOffset(psd_info,image,length,size_offset);
       }
 #ifdef MAGICKCORE_ZLIB_DELEGATE
     else if (compression == ZipCompression)
       {
         stream.avail_in=(uInt) length;
         stream.next_in=(Bytef *) pixels;
         if (y == (ssize_t) next_image->rows-1)
           flush=Z_FINISH;
         do {
-            stream.avail_out=(uInt) CHUNK;
+            stream.avail_out=(uInt) MagickMinBufferExtent;
             stream.next_out=(Bytef *) compressed_pixels;
             if (deflate(&stream,flush) == Z_STREAM_ERROR)
               break;
-            length=(size_t) CHUNK-stream.avail_out;
+            length=(size_t) MagickMinBufferExtent-stream.avail_out;
             if (length > 0)
               count+=WriteBlob(image,length,compressed_pixels);
         } while (stream.avail_out == 0);
       }
 #endif
     else
       count+=WriteBlob(image,length,pixels);
   }
 #ifdef MAGICKCORE_ZLIB_DELEGATE
   if (compression == ZipCompression)
     {
       (void) deflateEnd(&stream);
       compressed_pixels=(unsigned char *) RelinquishMagickMemory(
         compressed_pixels);
     }
 #endif
   quantum_info=DestroyQuantumInfo(quantum_info);
   return(count);
 }
