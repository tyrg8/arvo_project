commit 1d3fde1205440296c1d6a54feee5a9d637055bee
Author: Daniel-Constantin Mierla <miconda@gmail.com>
Date:   Tue Sep 14 08:05:05 2021 +0200

    core: parse via - safe check for end of buffer
    
    - just in case it is needed to be used for non-zero-terminated strings

diff --git a/src/core/parser/parse_via.c b/src/core/parser/parse_via.c
index 78bd304f32..100af6d6bf 100644
--- a/src/core/parser/parse_via.c
+++ b/src/core/parser/parse_via.c
@@ -940,353 +940,353 @@ static /*inline*/ char *parse_via_param(char *const p, const char *const end,
 
 find_value:
 	tmp++;
-	for(; *tmp; tmp++) {
+	for(; tmp<end && *tmp; tmp++) {
 		switch(*tmp) {
 			case ' ':
 			case '\t':
 				switch(state) {
 					case L_VALUE:
 					case F_VALUE: /*eat space*/
 						break;
 					case P_VALUE:
 						state = L_PARAM;
 						param->value.len = tmp - param->value.s;
 						goto endofvalue;
 #ifdef USE_COMP
 					case L_COMP_VALUE:
 					case F_COMP_VALUE:
 						break; /* eat space */
 					case FIN_V_SIGCOMP_P:
 						state = L_PARAM;
 						param->value.len = tmp - param->value.s;
 						vb->comp_no = COMP_SIGCOMP;
 						goto endofvalue;
 					case FIN_V_SERGZ_Z:
 						state = L_PARAM;
 						param->value.len = tmp - param->value.s;
 						vb->comp_no = COMP_SIGCOMP;
 						goto endofvalue;
 						comp_states_cases state = L_PARAM;
 						param->value.len = tmp - param->value.s;
 						comp_unexpected_char;
 						goto endofvalue;
 #endif
 					case P_STRING:
 						break;
 					case F_CR:
 					case F_LF:
 					case F_CRLF:
 						state = saved_state;
 						break;
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto error;
 				}
 				break;
 			case '\n':
 				switch(state) {
 					case L_VALUE:
 					case F_VALUE: /*eat space*/
 #ifdef USE_COMP
 					case L_COMP_VALUE:
 					case F_COMP_VALUE:
 #endif
 					case P_STRING:
 						saved_state = state;
 						param->size = tmp - param->start;
 						state = F_LF;
 						break;
 					case P_VALUE:
 						saved_state = L_PARAM;
 						state = F_LF;
 						param->value.len = tmp - param->value.s;
 						goto endofvalue;
 #ifdef USE_COMP
 					case FIN_V_SIGCOMP_P:
 						saved_state = L_PARAM;
 						state = F_LF;
 						param->value.len = tmp - param->value.s;
 						vb->comp_no = COMP_SIGCOMP;
 						goto endofvalue;
 					case FIN_V_SERGZ_Z:
 						saved_state = L_PARAM;
 						state = F_LF;
 						param->value.len = tmp - param->value.s;
 						vb->comp_no = COMP_SIGCOMP;
 						goto endofvalue;
 						comp_states_cases saved_state = L_PARAM;
 						state = F_LF;
 						param->value.len = tmp - param->value.s;
 						comp_unexpected_char;
 						goto endofvalue;
 #endif
 					case F_LF:
 					case F_CRLF:
 						state = END_OF_HEADER;
 						goto end_via;
 					case F_CR:
 						state = F_CRLF;
 						break;
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto error;
 				}
 				break;
 			case '\r':
 				switch(state) {
 					case L_VALUE:
 					case F_VALUE: /*eat space*/
 #ifdef USE_COMP
 					case L_COMP_VALUE:
 					case F_COMP_VALUE:
 #endif
 					case P_STRING:
 						saved_state = state;
 						param->size = tmp - param->start;
 						state = F_CR;
 						break;
 					case P_VALUE:
 						param->value.len = tmp - param->value.s;
 						saved_state = L_PARAM;
 						state = F_CR;
 						goto endofvalue;
 #ifdef USE_COMP
 					case FIN_V_SIGCOMP_P:
 						saved_state = L_PARAM;
 						state = F_CR;
 						param->value.len = tmp - param->value.s;
 						vb->comp_no = COMP_SIGCOMP;
 						goto endofvalue;
 					case FIN_V_SERGZ_Z:
 						saved_state = L_PARAM;
 						state = F_CR;
 						param->value.len = tmp - param->value.s;
 						vb->comp_no = COMP_SIGCOMP;
 						goto endofvalue;
 						comp_states_cases saved_state = L_PARAM;
 						state = F_CR;
 						param->value.len = tmp - param->value.s;
 						comp_unexpected_char;
 						goto endofvalue;
 #endif
 					case F_LF:
 					case F_CR:
 					case F_CRLF:
 						state = END_OF_HEADER;
 						goto end_via;
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto error;
 				}
 				break;
 
 			case '=':
 				switch(state) {
 					case L_VALUE:
 						state = F_VALUE;
 						break;
 #ifdef USE_COMP
 					case L_COMP_VALUE:
 						state = F_COMP_VALUE;
 						break;
 /* '=' in any other COMP value state is an error,
 					 * and it will be catched by the default branch */
 #endif
 					case P_STRING:
 						break;
 					case F_LF:
 					case F_CR:
 					case F_CRLF:
 						state = END_OF_HEADER;
 						goto end_via;
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto error;
 				}
 				break;
 			case ';':
 				switch(state) {
 					case P_VALUE:
 						param->value.len = tmp - param->value.s;
 						state = F_PARAM;
 						goto endofvalue;
 					case F_VALUE:
 						param->value.len = 0;
 						state = F_PARAM;
 						goto endofvalue;
 					case P_STRING:
 						break; /* what to do? */
 					case F_LF:
 					case F_CR:
 					case F_CRLF:
 						state = END_OF_HEADER;
 						goto end_via;
 #ifdef USE_COMP
 					case L_COMP_VALUE:
 						comp_unexpected_char;
 						/* we want to contine with no comp */
 						state = F_PARAM;
 						param->value.len = 0;
 						param->value.s = 0;
 						goto endofvalue;
 					case F_COMP_VALUE:
 						comp_unexpected_char;
 						param->value.len = 0;
 						state = F_PARAM;
 						goto endofvalue;
 						comp_states_cases comp_unexpected_char;
 						param->value.len = tmp - param->value.s;
 						state = F_PARAM;
 						goto endofvalue;
 					case FIN_V_SIGCOMP_P:
 						vb->comp_no = COMP_SIGCOMP;
 						param->value.len = tmp - param->value.s;
 						state = F_PARAM;
 						goto endofvalue;
 					case FIN_V_SERGZ_Z:
 						vb->comp_no = COMP_SIGCOMP;
 						param->value.len = tmp - param->value.s;
 						state = F_PARAM;
 						goto endofvalue;
 #endif
 					case L_VALUE:
 						param->value.len = 0;
 						param->value.s = 0; /* null value */
 						state = F_PARAM;
 						goto endofvalue;
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto error;
 				}
 				break;
 			case ',':
 				switch(state) {
 					case P_VALUE:
 						param->value.len = tmp - param->value.s;
 						state = F_VIA;
 						goto endofvalue;
 					case P_STRING:
 					case F_LF:
 					case F_CR:
 					case F_CRLF:
 						state = END_OF_HEADER;
 						goto end_via;
 #ifdef USE_COMP
 					case L_COMP_VALUE:
 						comp_unexpected_char;
 						/* we want to contine with no comp */
 						state = F_VIA;
 						param->value.len = 0;
 						param->value.s = 0;
 						goto endofvalue;
 					case F_COMP_VALUE:
 						comp_unexpected_char;
 						param->value.len = 0;
 						state = F_VIA;
 						goto endofvalue;
 						comp_states_cases comp_unexpected_char;
 						param->value.len = tmp - param->value.s;
 						state = F_VIA;
 						goto endofvalue;
 					case FIN_V_SIGCOMP_P:
 						vb->comp_no = COMP_SIGCOMP;
 						param->value.len = tmp - param->value.s;
 						state = F_VIA;
 						goto endofvalue;
 					case FIN_V_SERGZ_Z:
 						vb->comp_no = COMP_SIGCOMP;
 						param->value.len = tmp - param->value.s;
 						state = F_VIA;
 						goto endofvalue;
 #endif
 					case L_VALUE:
 						if(param->type == FIN_RPORT) {
 							param->value.len = 0;
 							param->value.s = 0; /* null value */
 							state = F_VIA;
 							goto endofvalue;
 						};
 					/* no break */
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto error;
 				}
 				break; /* what to do? */
 			case '"':
 				switch(state) {
 					case F_VALUE:
 						state = P_STRING;
 						param->value.s = tmp + 1;
 						break;
 					case P_STRING:
 						state = L_PARAM;
 						param->value.len = tmp - param->value.s;
 						goto endofvalue;
 					case F_LF:
 					case F_CR:
 					case F_CRLF:
 						state = END_OF_HEADER;
 						goto end_via;
 					default:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto error;
 				}
 				break;
 #ifdef USE_COMP
 				value_case('s', 'S', F_COMP_VALUE, V_COMP_S, 1);
 				value_case('i', 'I', V_COMP_S, V_SIGCOMP_I, 0);
 				value_case_double('g', 'G', V_SIGCOMP_I, V_SIGCOMP_G, V_SERGZ_R,
 						V_SERGZ_G);
 				value_case('c', 'C', V_SIGCOMP_G, V_SIGCOMP_C, 0);
 				value_case('o', 'O', V_SIGCOMP_C, V_SIGCOMP_O, 0);
 				value_case('m', 'M', V_SIGCOMP_O, V_SIGCOMP_M, 0);
 				value_case('p', 'P', V_SIGCOMP_M, FIN_V_SIGCOMP_P, 0);
 
 				value_case('e', 'E', V_COMP_S, V_SERGZ_E, 0);
 				value_case('r', 'R', V_SERGZ_E, V_SERGZ_R, 0);
 				value_case('z', 'Z', V_SERGZ_G, FIN_V_SERGZ_Z, 0);
 #endif /* USE_COMP */
 
 			default:
 				switch(state) {
 					case F_VALUE:
 						state = P_VALUE;
 						param->value.s = tmp;
 						break;
 					case P_VALUE:
 					case P_STRING:
 						break;
 					case F_LF:
 					case F_CR:
 					case F_CRLF:
 						state = END_OF_HEADER;
 						goto end_via;
 					default:
 #ifdef USE_COMP
 						switch(state) {
 							case F_COMP_VALUE:
 								comp_unexpected_char;
 								state = P_VALUE;
 								param->value.s = tmp;
 								break;
 								comp_states_cases comp_fin_states_cases
 										comp_unexpected_char;
 								state = P_VALUE;
 								break;
 							default:
 								LM_ERR("invalid char <%c> in state %d\n", *tmp,
 										state);
 								goto error;
 						}
 #else
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto error;
 #endif /* USE_COMP */
 				}
 		}
 	} /* for2 tmp*/
 
 	/* end of buff and no CR/LF =>error*/
 	saved_state = state;
 	state = END_OF_HEADER;
 	goto error;
@@ -2062,574 +2062,574 @@ parse_again:
 main_via:
 	/* inc tmp to point to the next char*/
 	tmp++;
 	c_nest = 0;
 	/*state should always be F_HOST here*/;
-	for(; *tmp; tmp++) {
+	for(; tmp<end && *tmp; tmp++) {
 		switch(*tmp) {
 			case ' ':
 			case '\t':
 				switch(state) {
 					case F_HOST: /*eat the spaces*/
 						break;
 					case P_HOST:
 						/*mark end of host*/
 						if(vb->host.s) vb->host.len = tmp - vb->host.s;
 						state = L_PORT;
 						break;
 					case L_PORT: /*eat the spaces*/
 					case F_PORT:
 						break;
 					case P_PORT:
 						/*end of port */
 						if(vb->port_str.s) vb->port_str.len = tmp - vb->port_str.s;
 						state = L_PARAM;
 						break;
 					case L_PARAM: /* eat the space */
 					case F_PARAM:
 						break;
 					case P_PARAM:
 						/*	*tmp=0;*/ /*!?end of param*/
 						state = L_PARAM;
 						break;
 					case L_VIA:
 					case F_VIA: /* eat the space */
 						break;
 					case F_COMMENT:
 					case P_COMMENT:
 						break;
 					case F_IP6HOST: /*no spaces allowed*/
 					case P_IP6HOST:
 						LM_ERR("bad ipv6 reference\n");
 						goto error;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now =' '*/
 						state = saved_state;
 						break;
 					default:
 						LM_CRIT("BUG: parsing via on <%c>, state=%d\n", *tmp,
 								state);
 						goto error;
 				}
 				break;
 			case '\n':
 				switch(state) {
 					case F_HOST: /*eat the spaces*/
 					case L_PORT: /*eat the spaces*/
 					case F_PORT:
 					case L_PARAM: /* eat the space */
 					case F_PARAM:
 					case F_VIA: /* eat the space */
 					case L_VIA:
 					case F_COMMENT:
 					case P_COMMENT:
 					case F_IP6HOST:
 					case P_IP6HOST:
 						saved_state = state;
 						state = F_LF;
 						break;
 					case P_HOST:
 						/*mark end of host*/
 						if(vb->host.s) vb->host.len = tmp - vb->host.s;
 						saved_state = L_PORT;
 						state = F_LF;
 						break;
 					case P_PORT:
 						/*end of port */
 						if(vb->port_str.s) vb->port_str.len = tmp - vb->port_str.s;
 						saved_state = L_PARAM;
 						state = F_LF;
 						break;
 					case P_PARAM:
 						/*	*tmp=0;*/ /*!?end of param*/
 						saved_state = L_PARAM;
 						state = F_LF;
 						break;
 					case F_CR:
 						state = F_CRLF;
 						break;
 					case F_CRLF:
 					case F_LF:
 						state = saved_state;
 						goto endofheader;
 					default:
 						LM_CRIT("BUG: parsing via on <%c>\n", *tmp);
 						goto error;
 				}
 				break;
 			case '\r':
 				switch(state) {
 					case F_HOST: /*eat the spaces*/
 					case L_PORT: /*eat the spaces*/
 					case F_PORT:
 					case L_PARAM: /* eat the space */
 					case F_PARAM:
 					case F_VIA: /* eat the space */
 					case L_VIA:
 					case F_COMMENT:
 					case P_COMMENT:
 					case F_IP6HOST:
 					case P_IP6HOST:
 						saved_state = state;
 						state = F_CR;
 						break;
 					case P_HOST:
 						/*mark end of host*/
 						if(vb->host.s) vb->host.len = tmp - vb->host.s;
 						saved_state = L_PORT;
 						state = F_CR;
 						break;
 					case P_PORT:
 						/*end of port */
 						if(vb->port_str.s) vb->port_str.len = tmp - vb->port_str.s;
 						saved_state = L_PARAM;
 						state = F_CR;
 						break;
 					case P_PARAM:
 						/*	*tmp=0;*/ /*!?end of param*/
 						saved_state = L_PARAM;
 						state = F_CR;
 						break;
 					case F_CRLF:
 					case F_CR:
 					case F_LF:
 						state = saved_state;
 						goto endofheader;
 					default:
 						LM_CRIT("BUG: parsing via on <%c>\n", *tmp);
 						goto error;
 				}
 				break;
 
 			case ':':
 				switch(state) {
 					case F_HOST:
 					case F_IP6HOST:
 						state = P_IP6HOST;
 						break;
 					case P_IP6HOST:
 						break;
 					case P_HOST:
 						/*mark  end of host*/
 						if(vb->host.s) vb->host.len = tmp - vb->host.s;
 						state = F_PORT;
 						break;
 					case L_PORT:
 						state = F_PORT;
 						break;
 					case P_PORT:
 						LM_ERR("bad port\n");
 						goto error;
 					case L_PARAM:
 					case F_PARAM:
 					case F_PORT:
 					case P_PARAM:
 						LM_ERR("bad char <%c> in state %d\n", *tmp, state);
 						goto error;
 					case L_VIA:
 					case F_VIA:
 						LM_ERR("bad char in compact via\n");
 						goto error;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					case F_COMMENT: /*everything is allowed in a comment*/
 						vb->comment.s = tmp;
 						state = P_COMMENT;
 						break;
 					case P_COMMENT: /*everything is allowed in a comment*/
 						break;
 					default:
 						LM_CRIT("on <%c> state %d\n", *tmp, state);
 						goto error;
 				}
 				break;
 			case ';':
 				switch(state) {
 					case F_HOST:
 					case F_IP6HOST:
 						LM_ERR("no host found\n");
 						goto error;
 					case P_IP6HOST:
 						LM_ERR("bad ipv6 reference\n");
 						goto error;
 					case P_HOST:
 						if(vb->host.s) vb->host.len = tmp - vb->host.s;
 						state = F_PARAM;
 						param_start = tmp + 1;
 						break;
 					case P_PORT:
 						/*mark the end*/
 						if(vb->port_str.s) vb->port_str.len = tmp - vb->port_str.s;
 					case L_PORT:
 					case L_PARAM:
 						state = F_PARAM;
 						param_start = tmp + 1;
 						break;
 					case F_PORT:
 						LM_ERR("bad char <%c> in state %d\n", *tmp, state);
 						goto error;
 					case F_PARAM:
 						LM_ERR("null param?\n");
 						goto error;
 					case P_PARAM:
 						/*hmm next, param?*/
 						state = F_PARAM;
 						param_start = tmp + 1;
 						break;
 					case L_VIA:
 					case F_VIA:
 						LM_ERR("bad char <%c> in next via\n", *tmp);
 						goto error;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					case F_COMMENT: /*everything is allowed in a comment*/
 						vb->comment.s = tmp;
 						state = P_COMMENT;
 						break;
 					case P_COMMENT: /*everything is allowed in a comment*/
 						break;
 
 					default:
 						LM_CRIT("BUG: parsing via on <%c> state %d\n", *tmp,
 								state);
 						goto error;
 				}
 				break;
 			case ',':
 				switch(state) {
 					case F_HOST:
 					case F_IP6HOST:
 						LM_ERR("no host found\n");
 						goto error;
 					case P_IP6HOST:
 						LM_ERR("bad ipv6 reference\n");
 						goto error;
 					case P_HOST:
 						/*mark the end*/
 						if(vb->host.s) vb->host.len = tmp - vb->host.s;
 						state = F_VIA;
 						break;
 					case P_PORT:
 						/*mark the end*/
 						if(vb->port_str.s) vb->port_str.len = tmp - vb->port_str.s;
 						state = F_VIA;
 						break;
 					case L_PORT:
 					case L_PARAM:
 					case P_PARAM:
 					case L_VIA:
 						state = F_VIA;
 						break;
 					case F_PORT:
 					case F_PARAM:
 						LM_ERR("invalid char <%c> in state %d\n", *tmp, state);
 						goto error;
 					case F_VIA:
 						/* do  nothing,  eat ","*/
 						break;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					case F_COMMENT: /*everything is allowed in a comment*/
 						vb->comment.s = tmp;
 						state = P_COMMENT;
 						break;
 					case P_COMMENT: /*everything is allowed in a comment*/
 						break;
 					default:
 						LM_CRIT("BUG: parsing via on <%c> state %d\n", *tmp,
 								state);
 						goto error;
 				}
 				break;
 			case '(':
 				switch(state) {
 					case F_HOST:
 					case F_PORT:
 					case F_PARAM:
 					case F_VIA:
 					case F_IP6HOST:
 					case P_IP6HOST: /*must be terminated in ']'*/
 						LM_ERR("parsing via on <%c> state %d\n", *tmp, state);
 						goto error;
 					case P_HOST:
 						/*mark the end*/
 						if(vb->host.s) vb->host.len = tmp - vb->host.s;
 						state = F_COMMENT;
 						c_nest++;
 						break;
 					case P_PORT:
 						/*mark the end*/
 						if(vb->port_str.s) vb->port_str.len = tmp - vb->port_str.s;
 						state = F_COMMENT;
 						c_nest++;
 						break;
 					case P_PARAM:
 						/*mark the end*/
 						vb->params.len = tmp - vb->params.s;
 						state = F_COMMENT;
 						c_nest++;
 						break;
 					case L_PORT:
 					case L_PARAM:
 					case L_VIA:
 						state = F_COMMENT;
 						vb->params.len = tmp - vb->params.s;
 						c_nest++;
 						break;
 					case P_COMMENT:
 					case F_COMMENT:
 						c_nest++;
 						break;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					default:
 						LM_CRIT("BUG: parsing via on <%c> state %d\n", *tmp,
 								state);
 						goto error;
 				}
 				break;
 			case ')':
 				switch(state) {
 					case F_COMMENT:
 					case P_COMMENT:
 						if(c_nest) {
 							c_nest--;
 							if(c_nest == 0) {
 								state = L_VIA;
 								vb->comment.len = tmp - vb->comment.s;
 								break;
 							}
 						} else {
 							LM_ERR("parsing via: missing '(' - nesting = %d\n",
 									c_nest);
 							goto error;
 						}
 						break;
 					case F_HOST:
 					case F_PORT:
 					case F_PARAM:
 					case F_VIA:
 					case P_HOST:
 					case P_PORT:
 					case P_PARAM:
 					case L_PORT:
 					case L_PARAM:
 					case L_VIA:
 					case F_IP6HOST:
 					case P_IP6HOST:
 						LM_ERR("parsing via on <%c> state %d\n", *tmp, state);
 						goto error;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					default:
 						LM_CRIT("BUG: parsing via on <%c> state %d\n", *tmp,
 								state);
 						goto error;
 				}
 				break;
 			case '[':
 				switch(state) {
 					case F_HOST:
 						vb->host.s = tmp; /* mark start here (include [])*/
 						state = F_IP6HOST;
 						break;
 					case F_COMMENT: /*everything is allowed in a comment*/
 						vb->comment.s = tmp;
 						state = P_COMMENT;
 						break;
 					case P_COMMENT:
 						break;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					default:
 						LM_ERR("parsing via on <%c> state %d\n", *tmp, state);
 						goto error;
 				}
 				break;
 			case ']':
 				switch(state) {
 					case P_IP6HOST:
 						/*mark the end*/
 						if(vb->host.s) vb->host.len = (tmp - vb->host.s) + 1; /* include "]" */
 						state = L_PORT;
 						break;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					case F_COMMENT: /*everything is allowed in a comment*/
 						vb->comment.s = tmp;
 						state = P_COMMENT;
 						break;
 					case P_COMMENT:
 						break;
 					default:
 						LM_ERR("parsing via on <%c> state %d\n", *tmp, state);
 						goto error;
 				}
 				break;
 
 			default:
 				switch(state) {
 					case F_HOST:
 						state = P_HOST;
 						vb->host.s = tmp;
 						break;
 					case P_HOST:
 						break;
 					case F_PORT:
 						state = P_PORT;
 						vb->port_str.s = tmp;
 						break;
 					case P_PORT:
 						/*check if number?*/
 						break;
 					case F_PARAM:
 							/*state=P_PARAM*/;
 						if(vb->params.s == 0)
 							vb->params.s = param_start;
 						param = pkg_malloc(sizeof(struct via_param));
 						if(param == 0) {
 							PKG_MEM_ERROR;
 							goto error;
 						}
 						memset(param, 0, sizeof(struct via_param));
 						param->start = param_start;
 						tmp = parse_via_param(
 								tmp, end, &state, &saved_state, param, vb);
 
 						switch(state) {
 							case F_PARAM:
 								param_start = tmp + 1;
 							case L_PARAM:
 							case F_LF:
 							case F_CR:
 								break;
 							case F_VIA:
 								vb->params.len = param->start + param->size
 													- vb->params.s;
 								break;
 							case END_OF_HEADER:
 								vb->params.len = param->start + param->size
 													- vb->params.s;
 								break;
 							case PARAM_ERROR:
 								pkg_free(param);
 								goto error;
 							default:
 								pkg_free(param);
 								LM_ERR("parsing via after parse_via_param:"
 										" invalid char <%c> on state %d\n",
 										*tmp, state);
 								goto error;
 						}
 						/*add param to the list*/
 						if(vb->last_param)
 							vb->last_param->next = param;
 						else
 							vb->param_lst = param;
 						vb->last_param = param;
 						/* update param. shortcuts */
 						switch(param->type) {
 							case PARAM_BRANCH:
 								vb->branch = param;
 								break;
 							case PARAM_RECEIVED:
 								vb->received = param;
 								break;
 							case PARAM_RPORT:
 								vb->rport = param;
 								break;
 							case PARAM_I:
 								vb->i = param;
 								break;
 							case PARAM_ALIAS:
 								vb->alias = param;
 								break;
 #ifdef USE_COMP
 							case PARAM_COMP:
 								vb->comp = param;
 								/*  moved comp value parsing in via_param */
 								/*
 								if  ((param->value.len==SIGCOMP_NAME_LEN) &&
 									(strncasecmp(param->value.s, SIGCOMP_NAME,
 												SIGCOMP_NAME_LEN)==0)){
 									vb->comp_no=COMP_SIGCOMP;
 								}else if ((param->value.len==SERGZ_NAME_LEN) &&
 										(strncasecmp(param->value.s,
 													SERGZ_NAME,
 													SERGZ_NAME_LEN)==0)){
 									vb->comp_no=COMP_SERGZ;
 								}else{
 									LM_ERR("unrecognized"
 										" compression method in comp=%.*s\n",
 										param->value.len, param->value.s);
 								}
 								*/
 								break;
 #endif
 						}
 
 						if(state == END_OF_HEADER) {
 							state = saved_state;
 							goto endofheader;
 						}
 						break;
 					case P_PARAM:
 						break;
 					case F_VIA:
 						/*vb->next=tmp;*/ /*???*/
 						goto nextvia;
 					case L_PORT:
 					case L_PARAM:
 					case L_VIA:
 						LM_ERR("parsing via on <%c> state %d (default)\n", *tmp,
 								state);
 						goto error;
 					case F_COMMENT:
 						state = P_COMMENT;
 						vb->comment.s = tmp;
 						break;
 					case P_COMMENT:
 						break;
 					case F_IP6HOST:
 						state = P_IP6HOST;
 						break;
 					case P_IP6HOST:
 						break;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					default:
 						LM_ERR("BUG: parsing via - invalid char <%c>"
 								" in state %d\n",
 								*tmp, state);
 						goto error;
 				}
 		}
 	}
 
 	DBG("end of packet reached, state=%d\n", state);
 	goto endofpacket; /*end of packet, probably should be goto error*/
