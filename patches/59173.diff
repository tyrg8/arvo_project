commit 285a4cb39eb3d066103ba4a8976ca46b2ea41bc2
Author: John Thacker <johnthacker@gmail.com>
Date:   Sun May 21 21:11:55 2023 -0400

    Reassembly: Attach a replaced tvb to a new one in reassembled tables
    
    Fixup 32e175034392f41ce59b97edf517f9635cb42e08 a bit. We can't
    necessarily free a tvb for an entry in the reassembled table that
    is being replaced, because there might be an address that directly
    shares the tvb memory (thanks to set_address_tvb()).
    
    If we can, add it to the chain for the replacement reassembly's tvb,
    so it will still be freed.
    
    Fix #19094

diff --git a/epan/reassemble.c b/epan/reassemble.c
index affeaee047..c0d662356d 100644
--- a/epan/reassemble.c
+++ b/epan/reassemble.c
@@ -389,7 +389,7 @@ free_fd_head(fragment_head *fd_head)
 	g_slice_free(fragment_head, fd_head);
 }
 
-void
+static void
 unref_fd_head(gpointer data)
 {
 	fragment_head *fd_head = (fragment_head *) data;
@@ -400,6 +400,38 @@ unref_fd_head(gpointer data)
 	}
 }
 
+static void
+reassembled_table_insert(GHashTable *reassembled_table, reassembled_key *key, fragment_head *fd_head)
+{
+	fragment_head *old_fd_head;
+	fd_head->ref_count++;
+	if ((old_fd_head = g_hash_table_lookup(reassembled_table, key)) != NULL) {
+		if (old_fd_head->ref_count == 1) {
+			/* We're replacing the last entry in the reassembled
+			 * table for an old reassembly. Does it have a tvb?
+			 * We might still be using that tvb's memory for an
+			 * address via set_address_tvb(). (See #19094.)
+			 */
+			if (old_fd_head->tvb_data && fd_head->tvb_data) {
+				/* Free it when the new tvb is freed */
+				tvb_set_child_real_data_tvbuff(fd_head->tvb_data, old_fd_head->tvb_data);
+			}
+			/* XXX: Set the old data to NULL regardless. If we
+			 * have old data but not new data, that is odd (we're
+			 * replacing a reassembly with tvb data with something
+			 * with no tvb data, possibly because a zero length or
+			 * null tvb was passed into a defragment function,
+			 * which is a dissector bug.)
+			 * This leaks the tvb data if we couldn't add it to
+			 * a new tvb's chain, but we might not be able to free
+			 * it yet if set_address_tvb() was used.
+			 */
+			old_fd_head->tvb_data = NULL;
+		}
+	}
+	g_hash_table_insert(reassembled_table, key, fd_head);
+}
+
 typedef struct register_reassembly_table {
 	reassembly_table *table;
 	const reassembly_table_functions *funcs;
@@ -994,40 +1026,37 @@ static void
 fragment_reassembled(reassembly_table *table, fragment_head *fd_head,
 		     const packet_info *pinfo, const guint32 id)
 {
 	reassembled_key *new_key;
 	fragment_item *fd;
 
+	fd_head->ref_count = 0;
 	if (fd_head->next == NULL) {
 		/*
 		 * This was not fragmented, so there's no fragment
 		 * table; just hash it using the current frame number.
 		 */
 		new_key = g_slice_new(reassembled_key);
 		new_key->frame = pinfo->num;
 		new_key->id = id;
-		fd_head->ref_count = 1;
-		g_hash_table_insert(table->reassembled_table, new_key, fd_head);
+		reassembled_table_insert(table->reassembled_table, new_key, fd_head);
 	} else {
 		/*
 		 * Hash it with the frame numbers for all the frames.
 		 */
-		fd_head->ref_count = 0;
 		for (fd = fd_head->next; fd != NULL; fd = fd->next){
 			new_key = g_slice_new(reassembled_key);
 			new_key->frame = fd->frame;
 			new_key->id = id;
-			fd_head->ref_count++;
-			g_hash_table_insert(table->reassembled_table, new_key,
-				fd_head);
+			reassembled_table_insert(table->reassembled_table, new_key, fd_head);
 		}
 	}
 	fd_head->flags |= FD_DEFRAGMENTED;
 	fd_head->reassembled_in = pinfo->num;
 	fd_head->reas_in_layer_num = pinfo->curr_layer_num;
 }
 
 /*
  * This function is a variant of the above for the single sequence
  * case, using id+offset (i.e., the original sequence number) for the id
  * in the key.
  */
@@ -1035,34 +1064,31 @@ static void
 fragment_reassembled_single(reassembly_table *table, fragment_head *fd_head,
 			    const packet_info *pinfo, const guint32 id)
 {
 	reassembled_key *new_key;
 	fragment_item *fd;
 
+	fd_head->ref_count = 0;
 	if (fd_head->next == NULL) {
 		/*
 		 * This was not fragmented, so there's no fragment
 		 * table; just hash it using the current frame number.
 		 */
 		new_key = g_slice_new(reassembled_key);
 		new_key->frame = pinfo->num;
 		new_key->id = id;
-		fd_head->ref_count = 1;
-		g_hash_table_insert(table->reassembled_table, new_key, fd_head);
+		reassembled_table_insert(table->reassembled_table, new_key, fd_head);
 	} else {
 		/*
 		 * Hash it with the frame numbers for all the frames.
 		 */
-		fd_head->ref_count = 0;
 		for (fd = fd_head->next; fd != NULL; fd = fd->next){
 			new_key = g_slice_new(reassembled_key);
 			new_key->frame = fd->frame;
 			new_key->id = id + fd->offset;
-			fd_head->ref_count++;
-			g_hash_table_insert(table->reassembled_table, new_key,
-				fd_head);
+			reassembled_table_insert(table->reassembled_table, new_key, fd_head);
 		}
 	}
 	fd_head->flags |= FD_DEFRAGMENTED;
 	fd_head->reassembled_in = pinfo->num;
 	fd_head->reas_in_layer_num = pinfo->curr_layer_num;
 }
@@ -1734,92 +1760,91 @@ fragment_head *
 fragment_add_check_with_fallback(reassembly_table *table, tvbuff_t *tvb, const int offset,
 		   const packet_info *pinfo, const guint32 id,
 		   const void *data, const guint32 frag_offset,
 		   const guint32 frag_data_len, const gboolean more_frags,
 		   const guint32 fallback_frame)
 {
 	reassembled_key reass_key;
 	fragment_head *fd_head;
 	gpointer orig_key;
 	gboolean late_retransmission = FALSE;
 
 	/*
 	 * If this isn't the first pass, look for this frame in the table
 	 * of reassembled packets.
 	 */
 	if (pinfo->fd->visited) {
 		reass_key.frame = pinfo->num;
 		reass_key.id = id;
 		return (fragment_head *)g_hash_table_lookup(table->reassembled_table, &reass_key);
 	}
 
 	/* Looks up a key in the GHashTable, returning the original key and the associated value
 	 * and a gboolean which is TRUE if the key was found. This is useful if you need to free
 	 * the memory allocated for the original key, for example before calling g_hash_table_remove()
 	 */
 	fd_head = lookup_fd_head(table, pinfo, id, data, &orig_key);
 	if ((fd_head == NULL) && (fallback_frame != pinfo->num)) {
 		/* Check if there is completed reassembly reachable from fallback frame */
 		reass_key.frame = fallback_frame;
 		reass_key.id = id;
 		fd_head = (fragment_head *)g_hash_table_lookup(table->reassembled_table, &reass_key);
 		if (fd_head != NULL) {
 			/* Found completely reassembled packet, hash it with current frame number */
 			reassembled_key *new_key = g_slice_new(reassembled_key);
 			new_key->frame = pinfo->num;
 			new_key->id = id;
-			fd_head->ref_count++;
-			g_hash_table_insert(table->reassembled_table, new_key, fd_head);
+			reassembled_table_insert(table->reassembled_table, new_key, fd_head);
 			late_retransmission = TRUE;
 		}
 	}
 	if (fd_head == NULL) {
 		/* not found, this must be the first snooped fragment for this
 		 * packet. Create list-head.
 		 */
 		fd_head = new_head(0);
 
 		/*
 		 * Save the key, for unhashing it later.
 		 */
 		orig_key = insert_fd_head(table, fd_head, pinfo, id, data);
 	}
 
 	/*
 	 * If this is a short frame, then we can't, and don't, do
 	 * reassembly on it.  We just give up.
 	 */
 	if (!tvb_bytes_exist(tvb, offset, frag_data_len)) {
 		return NULL;
 	}
 
 	if (fragment_add_work(fd_head, tvb, offset, pinfo, frag_offset,
 		frag_data_len, more_frags, pinfo->num, late_retransmission)) {
 		/* Nothing left to do if it was a late retransmission */
 		if (late_retransmission) {
 			return fd_head;
 		}
 		/*
 		 * Reassembly is complete.
 		 * Remove this from the table of in-progress
 		 * reassemblies, add it to the table of
 		 * reassembled packets, and return it.
 		 */
 
 		/*
 		 * Remove this from the table of in-progress reassemblies,
 		 * and free up any memory used for it in that table.
 		 */
 		fragment_unhash(table, orig_key);
 
 		/*
 		 * Add this item to the table of reassembled packets.
 		 */
 		fragment_reassembled(table, fd_head, pinfo, id);
 		return fd_head;
 	} else {
 		/*
 		 * Reassembly isn't complete.
 		 */
 		return NULL;
 	}
 }
@@ -2752,67 +2777,66 @@ fragment_head *
 fragment_end_seq_next(reassembly_table *table, const packet_info *pinfo,
 		      const guint32 id, const void *data)
 {
 	reassembled_key reass_key;
 	reassembled_key *new_key;
 	fragment_head *fd_head;
 	fragment_item *fd;
 	gpointer orig_key;
 	guint32 max_offset = 0;
 
 	/*
 	 * Have we already seen this frame?
 	 * If so, look for it in the table of reassembled packets.
 	 */
 	if (pinfo->fd->visited) {
 		reass_key.frame = pinfo->num;
 		reass_key.id = id;
 		return (fragment_head *)g_hash_table_lookup(table->reassembled_table, &reass_key);
 	}
 
 	fd_head = lookup_fd_head(table, pinfo, id, data, &orig_key);
 
 	if (fd_head) {
 		for (fd = fd_head->next; fd; fd = fd->next) {
 			if (fd->offset > max_offset) {
 				max_offset = fd->offset;
 			}
 		}
 		fd_head->datalen = max_offset;
 		fd_head->flags |= FD_DATALEN_SET;
 
 		fragment_defragment_and_free (fd_head, pinfo);
 
 		/*
 		 * Remove this from the table of in-progress reassemblies,
 		 * and free up any memory used for it in that table.
 		 */
 		fragment_unhash(table, orig_key);
 
 		/*
 		 * Add this item to the table of reassembled packets.
 		 */
 		fragment_reassembled(table, fd_head, pinfo, id);
 		if (fd_head->next != NULL) {
 			new_key = g_slice_new(reassembled_key);
 			new_key->frame = pinfo->num;
 			new_key->id = id;
-			fd_head->ref_count++;
-			g_hash_table_insert(table->reassembled_table, new_key, fd_head);
+			reassembled_table_insert(table->reassembled_table, new_key, fd_head);
 		}
 
 		return fd_head;
 	} else {
 		/*
 		 * Fragment data not found.
 		 */
 		return NULL;
 	}
 }
 
 /*
  * Process reassembled data; if we're on the frame in which the data
  * was reassembled, put the fragment information into the protocol
  * tree, and construct a tvbuff with the reassembled data, otherwise
  * just put a "reassembled in" item into the protocol tree.
  * offset from start of tvb, result up to end of tvb
  */
