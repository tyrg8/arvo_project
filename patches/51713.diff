commit 385c2f2eb8491c43a4051962aadcc8865ff7f76b
Author: davidot <davidot@serenityos.org>
Date:   Tue Nov 15 01:18:08 2022 +0100

    LibJS: Use correct this value for tagged template calls
    
    This has to get quite messy because we currently do evaluation to value
    and reference separately meaning we have to deal with a lot of edge
    cases here.

diff --git a/Userland/Libraries/LibJS/AST.cpp b/Userland/Libraries/LibJS/AST.cpp
index b4763f6a61..b07b6c09e8 100644
--- a/Userland/Libraries/LibJS/AST.cpp
+++ b/Userland/Libraries/LibJS/AST.cpp
@@ -3621,41 +3621,60 @@ void TaggedTemplateLiteral::dump(int indent) const
 // 13.3.11.1 Runtime Semantics: Evaluation, https://tc39.es/ecma262/#sec-tagged-templates-runtime-semantics-evaluation
 Completion TaggedTemplateLiteral::execute(Interpreter& interpreter) const
 {
     InterpreterNodeScope node_scope { interpreter, *this };
     auto& vm = interpreter.vm();
 
     // NOTE: This is both
     //  MemberExpression : MemberExpression TemplateLiteral
     //  CallExpression : CallExpression TemplateLiteral
-    // As the only difference is the first step.
 
     // 1. Let tagRef be ? Evaluation of MemberExpression.
     // 1. Let tagRef be ? Evaluation of CallExpression.
-
     // 2. Let tagFunc be ? GetValue(tagRef).
-    auto tag = TRY(m_tag->execute(interpreter)).release_value();
+    // NOTE: This is much more complicated than the spec because we have to
+    //       handle every type of reference. If we handle evaluation closer
+    //       to the spec this could be improved.
+    Value tag_this_value;
+    Value tag;
+    if (auto tag_reference = TRY(m_tag->to_reference(interpreter)); tag_reference.is_valid_reference()) {
+        tag = TRY(tag_reference.get_value(vm));
+        if (tag_reference.is_environment_reference()) {
+            auto& environment = tag_reference.base_environment();
+            if (environment.has_this_binding())
+                tag_this_value = TRY(environment.get_this_binding(vm));
+            else
+                tag_this_value = js_undefined();
+        } else {
+            tag_this_value = tag_reference.get_this_value();
+        }
+    } else {
+        auto result = TRY(m_tag->execute(interpreter));
+        VERIFY(result.has_value());
+        tag = result.release_value();
+        tag_this_value = js_undefined();
+    }
 
     // 3. Let thisCall be this CallExpression.
     // 3. Let thisCall be this MemberExpression.
     // FIXME: 4. Let tailCall be IsInTailPosition(thisCall).
 
     // NOTE: A tagged template is a function call where the arguments of the call are derived from a
     //       TemplateLiteral (13.2.8). The actual arguments include a template object (13.2.8.3)
     //       and the values produced by evaluating the expressions embedded within the TemplateLiteral.
     auto template_ = TRY(get_template_object(interpreter));
     MarkedVector<Value> arguments(interpreter.vm().heap());
     arguments.append(template_);
 
     auto& expressions = m_template_literal->expressions();
 
     // tag`${foo}`             -> "", foo, ""                -> tag(["", ""], foo)
     // tag`foo${bar}baz${qux}` -> "foo", bar, "baz", qux, "" -> tag(["foo", "baz", ""], bar, qux)
     // So we want all the odd expressions
     for (size_t i = 1; i < expressions.size(); i += 2)
         arguments.append(TRY(expressions[i].execute(interpreter)).release_value());
 
     // 5. Return ? EvaluateCall(tagFunc, tagRef, TemplateLiteral, tailCall).
-    return call(vm, tag, js_undefined(), move(arguments));
+    return call(vm, tag, tag_this_value, move(arguments));
 }
 
 // 13.2.8.3 GetTemplateObject ( templateLiteral ), https://tc39.es/ecma262/#sec-gettemplateobject
diff --git a/Userland/Libraries/LibJS/Tests/tagged-template-literals.js b/Userland/Libraries/LibJS/Tests/tagged-template-literals.js
index 620566a1a3..a967e0d308 100644
--- a/Userland/Libraries/LibJS/Tests/tagged-template-literals.js
+++ b/Userland/Libraries/LibJS/Tests/tagged-template-literals.js
@@ -20,147 +20,160 @@ describe("tagged template literal errors", () => {
 describe("tagged template literal functionality", () => {
     test("empty template tag", () => {
         function test1(strings) {
             expect(strings).toBeInstanceOf(Array);
             expect(strings).toHaveLength(1);
             expect(strings[0]).toBe("");
             return 42;
         }
         expect(test1``).toBe(42);
     });
 
     test("tagging a template literal", () => {
         function test2(s) {
             return function (strings) {
                 expect(strings).toBeInstanceOf(Array);
                 expect(strings).toHaveLength(1);
                 expect(strings[0]).toBe("bar");
                 return s + strings[0];
             };
         }
         expect(test2("foo")`bar`).toBe("foobar");
     });
 
     test("tagging an object function key", () => {
         var test3 = {
             foo(strings, p1) {
                 expect(strings).toBeInstanceOf(Array);
                 expect(strings).toHaveLength(2);
                 expect(strings[0]).toBe("");
                 expect(strings[1]).toBe("");
                 expect(p1).toBe("bar");
             },
         };
         test3.foo`${"bar"}`;
     });
 
     test("tagging with a variable in a template expression", () => {
         function test4(strings, p1) {
             expect(strings).toBeInstanceOf(Array);
             expect(strings).toHaveLength(2);
             expect(strings[0]).toBe("foo");
             expect(strings[1]).toBe("");
             expect(p1).toBe(42);
         }
         var bar = 42;
         test4`foo${bar}`;
     });
 
     test("template tag result of another template tag", () => {
         function test5(strings, p1, p2) {
             expect(strings).toBeInstanceOf(Array);
             expect(strings).toHaveLength(3);
             expect(strings[0]).toBe("foo");
             expect(strings[1]).toBe("baz");
             expect(strings[2]).toBe("");
             expect(p1).toBe(42);
             expect(p2).toBe("qux");
             return (strings, value) => `${value}${strings[0]}`;
         }
         var bar = 42;
         expect(test5`foo${bar}baz${"qux"}``test${123}`).toBe("123test");
     });
 
     test("general test", () => {
         function review(strings, name, rating) {
             return `${strings[0]}**${name}**${strings[1]}_${rating}_${strings[2]}`;
         }
         var name = "SerenityOS";
         var rating = "great";
         expect(review`${name} is a ${rating} project!`).toBe(
             "**SerenityOS** is a _great_ project!"
         );
     });
 
     test("template object structure", () => {
         const getTemplateObject = (...rest) => rest;
         const getRawTemplateStrings = arr => arr.raw;
 
         let o = getTemplateObject`foo\nbar`;
         expect(Object.getOwnPropertyNames(o[0])).toContain("raw");
 
         let raw = getRawTemplateStrings`foo${1 + 3}\nbar`;
         expect(Object.getOwnPropertyNames(raw)).not.toContain("raw");
         expect(raw).toHaveLength(2);
         expect(raw[0]).toBe("foo");
         expect(raw[1]).toHaveLength(5);
         expect(raw[1]).toBe("\\nbar");
     });
 
     test("invalid escapes give undefined cooked values but can be accessed in raw form", () => {
         let calls = 0;
         let lastValue = null;
         function noCookedButRaw(values) {
             ++calls;
             expect(values).not.toBeNull();
             expect(values.raw).toHaveLength(1);
             expect(values.raw[0].length).toBeGreaterThan(0);
             expect(values.raw[0].charAt(0)).toBe("\\");
             expect(values[0]).toBeUndefined();
             lastValue = values.raw[0];
         }
         noCookedButRaw`\u`;
         expect(calls).toBe(1);
         expect(lastValue).toBe("\\u");
 
         noCookedButRaw`\01`;
         expect(calls).toBe(2);
         expect(lastValue).toBe("\\01");
 
         noCookedButRaw`\u{10FFFFF}`;
         expect(calls).toBe(3);
         expect(lastValue).toBe("\\u{10FFFFF}");
     });
 
     test("for multiple values gives undefined only for invalid strings", () => {
         let restValue = null;
         let stringsValue = null;
         let calls = 0;
 
         function extractArguments(value, ...arguments) {
             ++calls;
             restValue = arguments;
             stringsValue = value;
         }
         extractArguments`valid${1}invalid\u`;
 
         expect(calls).toBe(1);
         expect(restValue).toHaveLength(1);
         expect(restValue[0]).toBe(1);
         expect(stringsValue).toHaveLength(2);
         expect(stringsValue[0]).toBe("valid");
         expect(stringsValue[1]).toBeUndefined();
         expect(stringsValue.raw).toHaveLength(2);
         expect(stringsValue.raw[0]).toBe("valid");
         expect(stringsValue.raw[1]).toBe("invalid\\u");
     });
 
     test("string value gets cached per AST node", () => {
         function call(func, val) {
             return func`template${val}second`;
         }
 
         let firstResult = call(value => value, 1);
         let secondResult = call(value => value, 2);
         expect(firstResult).toBe(secondResult);
     });
+
+    test("this value of call comes from reference", () => {
+        let thisValue = null;
+        const obj = {
+            func() {
+                thisValue = this;
+            },
+        };
+
+        obj.func``;
+
+        expect(thisValue).toBe(obj);
+    });
 });
