commit 215f4e1f4dcca57f1dee9f18519df1af659ad62c
Author: Kim Kulling <kimkulling@users.noreply.github.com>
Date:   Wed Dec 22 20:02:29 2021 +0100

    Fix typo

diff --git a/code/Common/BaseImporter.cpp b/code/Common/BaseImporter.cpp
index c0a87b632..570ba7f7b 100644
--- a/code/Common/BaseImporter.cpp
+++ b/code/Common/BaseImporter.cpp
@@ -337,63 +337,63 @@ std::string BaseImporter::GetExtension(const std::string &file) {
 // ------------------------------------------------------------------------------------------------
 // Convert to UTF8 data
 void BaseImporter::ConvertToUTF8(std::vector<char> &data) {
     //ConversionResult result;
     if (data.size() < 8) {
         throw DeadlyImportError("File is too small");
     }
 
     // UTF 8 with BOM
     if ((uint8_t)data[0] == 0xEF && (uint8_t)data[1] == 0xBB && (uint8_t)data[2] == 0xBF) {
         ASSIMP_LOG_DEBUG("Found UTF-8 BOM ...");
 
         std::copy(data.begin() + 3, data.end(), data.begin());
         data.resize(data.size() - 3);
         return;
     }
 
     // UTF 32 BE with BOM
     if (*((uint32_t *)&data.front()) == 0xFFFE0000) {
 
         // swap the endianness ..
         for (uint32_t *p = (uint32_t *)&data.front(), *end = (uint32_t *)&data.back(); p <= end; ++p) {
             AI_SWAP4P(p);
         }
     }
 
     // UTF 32 LE with BOM
     if (*((uint32_t *)&data.front()) == 0x0000FFFE) {
         ASSIMP_LOG_DEBUG("Found UTF-32 BOM ...");
 
         std::vector<char> output;
         int *ptr = (int *)&data[0];
         int *end = ptr + (data.size() / sizeof(int)) + 1;
         utf8::utf32to8(ptr, end, back_inserter(output));
         return;
     }
 
     // UTF 16 BE with BOM
     size_t index = 0;
     if (*((uint16_t *)&data.front()) == 0xFFFE) {
         // swap the endianness ..
         for (uint16_t *p = (uint16_t *)&data.front(), *end = (uint16_t *)&data.back(); p <= end; ++p) {
             // Check to ensure no overflow can happen
-            if ((index+2) < data.Size()) {
+            if ((index+2) < data.size()) {
                 // Swap the data
                 ByteSwap::Swap2(p);
                 index += 2;
             }
         }
     }
 
     // UTF 16 LE with BOM
     if (*((uint16_t *)&data.front()) == 0xFEFF) {
         ASSIMP_LOG_DEBUG("Found UTF-16 BOM ...");
 
         std::vector<unsigned char> output;
         utf8::utf16to8(data.begin(), data.end(), back_inserter(output));
         return;
     }
 }
 
 // ------------------------------------------------------------------------------------------------
 // Convert to UTF8 data to ISO-8859-1
