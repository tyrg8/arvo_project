commit 3ac779d9a9d2c63433d3765c82a2724947d86a15
Author: Albert Astals Cid <aacid@kde.org>
Date:   Mon Jan 4 23:54:52 2021 +0100

    FoFiTrueType::parse: If we don't have tables parsing didn't succeed
    
    oss-fuzz/29217

diff --git a/fofi/FoFiTrueType.cc b/fofi/FoFiTrueType.cc
index ce462c1e..a1396c55 100644
--- a/fofi/FoFiTrueType.cc
+++ b/fofi/FoFiTrueType.cc
@@ -1,106 +1,106 @@
 //========================================================================
 //
 // FoFiTrueType.cc
 //
 // Copyright 1999-2003 Glyph & Cog, LLC
 //
 //========================================================================
 
 //========================================================================
 //
 // Modified under the Poppler project - http://poppler.freedesktop.org
 //
 // All changes made under the Poppler project to this file are licensed
 // under GPL version 2 or later
 //
 // Copyright (C) 2006 Takashi Iwai <tiwai@suse.de>
 // Copyright (C) 2007 Koji Otani <sho@bbr.jp>
 // Copyright (C) 2007 Carlos Garcia Campos <carlosgc@gnome.org>
-// Copyright (C) 2008, 2009, 2012, 2014-2020 Albert Astals Cid <aacid@kde.org>
+// Copyright (C) 2008, 2009, 2012, 2014-2021 Albert Astals Cid <aacid@kde.org>
 // Copyright (C) 2008 Tomas Are Haavet <tomasare@gmail.com>
 // Copyright (C) 2012 Suzuki Toshiya <mpsuzuki@hiroshima-u.ac.jp>
 // Copyright (C) 2012, 2017 Adrian Johnson <ajohnson@redneon.com>
 // Copyright (C) 2014 Thomas Freitag <Thomas.Freitag@alfa.de>
 // Copyright (C) 2015 Aleksei Volkov <Aleksei Volkov>
 // Copyright (C) 2015, 2016 William Bader <williambader@hotmail.com>
 // Copyright (C) 2018 Adam Reichold <adam.reichold@t-online.de>
 //
 // To see a description of the changes please see the Changelog file that
 // came with your tarball or type make ChangeLog if you are building from git
 //
 //========================================================================
 
 #include <config.h>
 
 #include <cstdlib>
 #include <cstring>
 #include <climits>
 #include <algorithm>
 #include "goo/gmem.h"
 #include "goo/GooLikely.h"
 #include "goo/GooString.h"
 #include "FoFiType1C.h"
 #include "FoFiTrueType.h"
 #include "poppler/Error.h"
 
 //
 // Terminology
 // -----------
 //
 // character code = number used as an element of a text string
 //
 // character name = glyph name = name for a particular glyph within a
 //                  font
 //
 // glyph index = GID = position (within some internal table in the font)
 //               where the instructions to draw a particular glyph are
 //               stored
 //
 // Type 1 fonts
 // ------------
 //
 // Type 1 fonts contain:
 //
 // Encoding: array of glyph names, maps char codes to glyph names
 //
 //           Encoding[charCode] = charName
 //
 // CharStrings: dictionary of instructions, keyed by character names,
 //              maps character name to glyph data
 //
 //              CharStrings[charName] = glyphData
 //
 // TrueType fonts
 // --------------
 //
 // TrueType fonts contain:
 //
 // 'cmap' table: mapping from character code to glyph index; there may
 //               be multiple cmaps in a TrueType font
 //
 //               cmap[charCode] = gid
 //
 // 'post' table: mapping from glyph index to glyph name
 //
 //               post[gid] = glyphName
 //
 // Type 42 fonts
 // -------------
 //
 // Type 42 fonts contain:
 //
 // Encoding: array of glyph names, maps char codes to glyph names
 //
 //           Encoding[charCode] = charName
 //
 // CharStrings: dictionary of glyph indexes, keyed by character names,
 //              maps character name to glyph index
 //
 //              CharStrings[charName] = gid
 //
 
 //------------------------------------------------------------------------
 
 #define ttcfTag 0x74746366
 
 //------------------------------------------------------------------------
@@ -1467,120 +1467,121 @@ unsigned int FoFiTrueType::computeTableChecksum(const unsigned char *data, int l
 void FoFiTrueType::parse()
 {
     unsigned int topTag;
     int pos, ver, i, j;
 
     parsedOk = true;
 
     // look for a collection (TTC)
     topTag = getU32BE(0, &parsedOk);
     if (!parsedOk) {
         return;
     }
     if (topTag == ttcfTag) {
         /* TTC font */
         int dircount;
 
         dircount = getU32BE(8, &parsedOk);
         if (!parsedOk)
             return;
         if (!dircount) {
             parsedOk = false;
             return;
         }
 
         if (faceIndex >= dircount)
             faceIndex = 0;
         pos = getU32BE(12 + faceIndex * 4, &parsedOk);
         if (!parsedOk)
             return;
     } else {
         pos = 0;
     }
 
     // check the sfnt version
     ver = getU32BE(pos, &parsedOk);
     if (!parsedOk) {
         return;
     }
     openTypeCFF = ver == 0x4f54544f; // 'OTTO'
 
     // read the table directory
     nTables = getU16BE(pos + 4, &parsedOk);
     if (!parsedOk) {
         return;
     }
     tables = (TrueTypeTable *)gmallocn(nTables, sizeof(TrueTypeTable));
     pos += 12;
     j = 0;
     for (i = 0; i < nTables; ++i) {
         tables[j].tag = getU32BE(pos, &parsedOk);
         tables[j].checksum = getU32BE(pos + 4, &parsedOk);
         tables[j].offset = (int)getU32BE(pos + 8, &parsedOk);
         tables[j].len = (int)getU32BE(pos + 12, &parsedOk);
         if (unlikely((tables[j].offset < 0) || (tables[j].len < 0) || (tables[j].offset < INT_MAX - tables[j].len) || (tables[j].len > INT_MAX - tables[j].offset)
                      || (tables[j].offset + tables[j].len >= tables[j].offset && tables[j].offset + tables[j].len <= len))) {
             // ignore any bogus entries in the table directory
             ++j;
         }
         pos += 16;
     }
     if (nTables != j) {
         nTables = j;
         tables = (TrueTypeTable *)greallocn_checkoverflow(tables, nTables, sizeof(TrueTypeTable));
     }
     if (!parsedOk || tables == nullptr) {
+        parsedOk = false;
         return;
     }
 
     // check for tables that are required by both the TrueType spec and
     // the Type 42 spec
     if (seekTable("head") < 0 || seekTable("hhea") < 0 || seekTable("maxp") < 0 || (!openTypeCFF && seekTable("loca") < 0) || (!openTypeCFF && seekTable("glyf") < 0) || (openTypeCFF && seekTable("CFF ") < 0)) {
         parsedOk = false;
         return;
     }
 
     // read the cmaps
     if ((i = seekTable("cmap")) >= 0) {
         pos = tables[i].offset + 2;
         nCmaps = getU16BE(pos, &parsedOk);
         pos += 2;
         if (!parsedOk) {
             return;
         }
         cmaps = (TrueTypeCmap *)gmallocn(nCmaps, sizeof(TrueTypeCmap));
         for (j = 0; j < nCmaps; ++j) {
             cmaps[j].platform = getU16BE(pos, &parsedOk);
             cmaps[j].encoding = getU16BE(pos + 2, &parsedOk);
             cmaps[j].offset = tables[i].offset + getU32BE(pos + 4, &parsedOk);
             pos += 8;
             cmaps[j].fmt = getU16BE(cmaps[j].offset, &parsedOk);
             cmaps[j].len = getU16BE(cmaps[j].offset + 2, &parsedOk);
         }
         if (!parsedOk) {
             return;
         }
     } else {
         nCmaps = 0;
     }
 
     // get the number of glyphs from the maxp table
     i = seekTable("maxp");
     nGlyphs = getU16BE(tables[i].offset + 4, &parsedOk);
     if (!parsedOk) {
         return;
     }
 
     // get the bbox and loca table format from the head table
     i = seekTable("head");
     bbox[0] = getS16BE(tables[i].offset + 36, &parsedOk);
     bbox[1] = getS16BE(tables[i].offset + 38, &parsedOk);
     bbox[2] = getS16BE(tables[i].offset + 40, &parsedOk);
     bbox[3] = getS16BE(tables[i].offset + 42, &parsedOk);
     locaFmt = getS16BE(tables[i].offset + 50, &parsedOk);
     if (!parsedOk) {
         return;
     }
 
     // read the post table
     readPostTable();
 }
