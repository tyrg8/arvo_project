changeset:   16134:5f56eaafe189
user:        Bob Friesenhahn <bfriesen@GraphicsMagick.org>
date:        Sat Nov 23 14:42:23 2019 -0600
summary:     GenerateEXIFAttribute(): Add validations to prevent heap buffer overflow.

diff -r ddfe99a36d9b -r 5f56eaafe189 ChangeLog
--- a/ChangeLog	Sun Nov 17 10:14:15 2019 -0600
+++ b/ChangeLog	Sat Nov 23 14:42:23 2019 -0600
@@ -1,12 +1,14 @@
+2019-11-23  Bob Friesenhahn  <bfriesen@simple.dallas.tx.us>
+
+	* magick/attribute.c (GenerateEXIFAttribute): Fix oss-fuzz issue
+	17986 "graphicsmagick:coder_JPG_fuzzer: Heap-buffer-overflow in
+	GenerateEXIFAttribute".  This problem likely only happens in
+	32-bit builds.
+
 2019-11-17  Bob Friesenhahn  <bfriesen@simple.dallas.tx.us>
 
 	* coders/png.c (ReadMNGImage): Only magnify the image if the
-	requested magnification methods are supported.  Fixes oss-fuzz
-	issues 14485 "graphicsmagick/coder_MNG_fuzzer:
-	Heap-buffer-overflow in ReadMNGImage", 15039
-	"graphicsmagick/coder_MNG_fuzzer: ASSERT: yy < (long)
-	large_image->rows", and 16737 "graphicsmagick:coder_MNG_fuzzer:
-	Unknown signal in MagickMallocAligned".
+	requested magnification methods are supported.
 
 2019-11-16  Bob Friesenhahn  <bfriesen@simple.dallas.tx.us>
 
diff -r ddfe99a36d9b -r 5f56eaafe189 VisualMagick/installer/inc/version.isx
--- a/VisualMagick/installer/inc/version.isx	Sun Nov 17 10:14:15 2019 -0600
+++ b/VisualMagick/installer/inc/version.isx	Sat Nov 23 14:42:23 2019 -0600
@@ -10,5 +10,5 @@
 
 #define public MagickPackageName "GraphicsMagick"
 #define public MagickPackageVersion "1.4"
-#define public MagickPackageVersionAddendum ".020191117"
-#define public MagickPackageReleaseDate "snapshot-20191117"
+#define public MagickPackageVersionAddendum ".020191123"
+#define public MagickPackageReleaseDate "snapshot-20191123"
diff -r ddfe99a36d9b -r 5f56eaafe189 magick/attribute.c
--- a/magick/attribute.c	Sun Nov 17 10:14:15 2019 -0600
+++ b/magick/attribute.c	Sat Nov 23 14:42:23 2019 -0600
@@ -398,10 +398,10 @@
     (*length)--;
     buffer[i]=(unsigned char) c;
   }
-  value.u=(buffer[0] & 0xff) << 24;
-  value.u|=buffer[1] << 16;
-  value.u|=buffer[2] << 8;
-  value.u|=buffer[3];
+  value.u=(magick_uint32_t) (buffer[0] & 0xff) << 24;
+  value.u|=(magick_uint32_t) buffer[1] << 16;
+  value.u|=(magick_uint32_t) buffer[2] << 8;
+  value.u|=(magick_uint32_t) buffer[3];
   return(value.s);
 }
 
@@ -431,8 +431,8 @@
     (*length)--;
     buffer[i]=(unsigned char) c;
   }
-  value.u=(buffer[0] & 0xff) << 8;
-  value.u|=buffer[1];
+  value.u=(magick_uint32_t) (buffer[0] & 0xff) << 8;
+  value.u|=(magick_uint32_t) buffer[1];
   return(value.s);
 }
 
@@ -1495,9 +1495,11 @@
     value;
 
   if (morder)
-    value=((magick_uint16_t) ishort[0] << 8) | ishort[1];
+    value=((magick_uint16_t) ishort[0] << 8)
+      | (magick_uint16_t) ishort[1];
   else
-    value=((magick_uint16_t) ishort[1] << 8) | ishort[0];
+    value=((magick_uint16_t) ishort[1] << 8)
+      | (magick_uint16_t) ishort[0];
   return(value);
 }
 
@@ -1511,18 +1513,36 @@
   } value;
 
   if (morder)
-    value.u=((magick_uint32_t) ilong[0] << 24) | (ilong[1] << 16) |
-      (ilong[2] << 8) | (ilong[3]);
+    value.u=((magick_uint32_t) ilong[0] << 24)
+      | ((magick_uint32_t) ilong[1] << 16)
+      | ((magick_uint32_t) ilong[2] << 8)
+      | ((magick_uint32_t) ilong[3]);
   else
-    value.u=((magick_uint32_t) ilong[3] << 24) | (ilong[2] << 16) |
-      (ilong[1] << 8 ) | (ilong[0]);
+    value.u=((magick_uint32_t) ilong[3] << 24)
+      | ((magick_uint32_t) ilong[2] << 16)
+      | ((magick_uint32_t) ilong[1] << 8 )
+      | ((magick_uint32_t) ilong[0]);
   return(value.s);
 }
 
 static magick_uint32_t
 Read32u(int morder, unsigned char *ilong)
 {
-  return(Read32s(morder,ilong) & 0xffffffff);
+  magick_uint32_t
+    value;
+
+  if (morder)
+    value=((magick_uint32_t) ilong[0] << 24)
+      | ((magick_uint32_t) ilong[1] << 16)
+      | ((magick_uint32_t) ilong[2] << 8)
+      | ((magick_uint32_t) ilong[3]);
+  else
+    value=((magick_uint32_t) ilong[3] << 24)
+      | ((magick_uint32_t) ilong[2] << 16)
+      | ((magick_uint32_t) ilong[1] << 8 )
+      | ((magick_uint32_t) ilong[0]);
+
+  return value;
 }
 
 static void
@@ -1601,7 +1621,7 @@
     debug=MagickFalse;
 
   assert((ArraySize(format_bytes)-1) == EXIF_NUM_FORMATS);
-  logging=IsEventLogging();;
+  logging=IsEventLogging();
   {
     const char *
       env_value;
@@ -1630,6 +1650,10 @@
                                       "No EXIF profile present");
       goto generate_attribute_failure;
     }
+  if (logging && debug)
+        (void) LogMagickEvent(TransformEvent,GetMagickModule(),
+                              "EXIF: profile_info=%p, profile_length=%"MAGICK_SIZE_T_F"u",
+                              profile_info, (MAGICK_SIZE_T) profile_length);
   /*
     If EXIF data exists, then try to parse the request for a tag in
     the form "EXIF:key".
@@ -1833,13 +1857,13 @@
       nde=Read16u(morder,ifdp);
       if (logging && debug)
             (void) LogMagickEvent(TransformEvent,GetMagickModule(),
-                                  "EXIF: IFD at offset %lu has %u tags", (unsigned long) (ifdp-tiffp), nde);
+                                  "EXIF: IFD at offset %"MAGICK_SSIZE_T_F"d has %u tags", (MAGICK_SSIZE_T) (ifdp-tiffp), nde);
       if (nde > MAX_TAGS_PER_IFD)
         {
           nde=MAX_TAGS_PER_IFD;
           if (logging && debug)
             (void) LogMagickEvent(TransformEvent,GetMagickModule(),
-                                  "EXIF: Limiting IFD at offset %lu to %u tags!", (unsigned long) (ifdp-tiffp), nde);
+                                  "EXIF: Limiting IFD at offset %"MAGICK_SSIZE_T_F"d to %u tags!", (MAGICK_SSIZE_T) (ifdp-tiffp), nde);
         }
       for (; de < nde; de++)
         {
@@ -1856,7 +1880,10 @@
             *pval;
 
           pde=(unsigned char *) (ifdp+2+(12*de));
-          if (pde + 12 > tiffp + length)
+          if (logging && debug)
+            (void) LogMagickEvent(TransformEvent,GetMagickModule(),
+                                  "EXIF: PDE offset %"MAGICK_SSIZE_T_F"d", (MAGICK_SSIZE_T) (pde-ifdp));
+          if ((pde < tiffp) || (pde + 12 > tiffp_max))
             {
               if (logging)
                 (void) LogMagickEvent(TransformEvent,GetMagickModule(),
@@ -1865,7 +1892,10 @@
             }
           t=Read16u(morder,pde); /* get tag value */
           f=Read16u(morder,pde+2); /* get the format */
-          if ((f == 0) || (size_t) f >= ArraySize(format_bytes))
+          if (logging && debug)
+            (void) LogMagickEvent(TransformEvent,GetMagickModule(),
+                                  "EXIF: Tag %u, Format %u", t, f);
+          if (((size_t) f >= ArraySize(format_bytes)) || (format_bytes[f] == 0))
             {
               if (logging)
                 (void) LogMagickEvent(TransformEvent,GetMagickModule(),
@@ -1877,9 +1907,9 @@
           if (logging && debug)
             {
               (void) LogMagickEvent(TransformEvent,GetMagickModule(),
-                                    "EXIF: %u components, %u format_bytes", c,format_bytes[f]);
+                                    "EXIF: %u components, %u bytes per component", c,format_bytes[f]);
             }
-          if ((n == 0) && (c != 0) && (format_bytes[f] != 0))
+          if ((c > length) || (n > length) || ((n == 0) && (c != 0) && (format_bytes[f] != 0)))
             {
               if (logging)
                 (void) LogMagickEvent(TransformEvent,GetMagickModule(),
@@ -1887,18 +1917,27 @@
               goto generate_attribute_failure;
             }
           if (n <= 4)
-            pval=(unsigned char *) pde+8;
+            {
+              pval=(unsigned char *) pde+8;
+            }
           else
             {
-              unsigned long
+              size_t
                 oval;
 
               /*
                 The directory entry contains an offset.
               */
               oval=Read32u(morder,pde+8);
-              if ((oval+n) > length)
-                continue;
+              if ((oval > length) || ((oval+n) > length)) /* Impossibly long! */
+                {
+                  if (logging && debug)
+                    (void) LogMagickEvent(TransformEvent,GetMagickModule(),
+                                          "EXIF: Invalid Exif directory entry!"
+                                          " (offset %"MAGICK_SIZE_T_F"u, %"MAGICK_SIZE_T_F"u components)",
+                                          (MAGICK_SIZE_T) oval, (MAGICK_SIZE_T) n);
+                  continue;
+                }
               pval=(unsigned char *)(tiffp+oval);
             }
 
@@ -1910,6 +1949,14 @@
                                     EXIFTagToDescription(t,tag_description),f,
                                     EXIFFormatToDescription(f),c);
             }
+          if ((pval < tiffp) || (pval > tiffp_max))
+            {
+              if (logging)
+                (void) LogMagickEvent(TransformEvent,GetMagickModule(),
+                                      "EXIF: Offset %"MAGICK_SSIZE_T_F"d out of valid range!",
+                                      (MAGICK_SSIZE_T) (pval-tiffp));
+              goto generate_attribute_failure;
+            }
 
           if (gpsfound)
             {
@@ -1984,11 +2031,12 @@
                 case EXIF_FMT_SSHORT:
                   {
                     /* 16-bit signed integer */
-                    if ((pval+sizeof(magick_uint16_t)) > tiffp_max)
+                    if (((pval < tiffp) || (pval+sizeof(magick_uint16_t)) > tiffp_max))
                       {
                         if (logging)
                           (void) LogMagickEvent(TransformEvent,GetMagickModule(),
-                                                "EXIF: Offset out of address range!");
+                                                "EXIF: Offset %"MAGICK_SSIZE_T_F"d out of valid range!",
+                                                (MAGICK_SSIZE_T) (pval-tiffp));
                         goto generate_attribute_failure;
                       }
                     FormatString(s,"%hd",Read16u(morder,pval));
@@ -1998,11 +2046,12 @@
                 case EXIF_FMT_USHORT:
                   {
                     /* 16-bit unsigned integer */
-                    if ((pval+sizeof(magick_uint16_t)) > tiffp_max)
+                    if ((pval < tiffp) || ((pval+sizeof(magick_uint16_t)) > tiffp_max))
                       {
                         if (logging)
                           (void) LogMagickEvent(TransformEvent,GetMagickModule(),
-                                                "EXIF: Offset out of address range!");
+                                                "EXIF: Offset %"MAGICK_SSIZE_T_F"d out of valid range!",
+                                                (MAGICK_SSIZE_T) (pval-tiffp));
                         goto generate_attribute_failure;
                       }
                     FormatString(s,"%hu",Read16s(morder,pval));
@@ -2011,11 +2060,12 @@
                   }
                 case EXIF_FMT_ULONG:
                   {
-                    if ((pval+sizeof(magick_uint32_t)) > tiffp_max)
+                    if ((pval < tiffp) || ((pval+sizeof(magick_uint32_t)) > tiffp_max))
                       {
                         if (logging)
                           (void) LogMagickEvent(TransformEvent,GetMagickModule(),
-                                                "EXIF: Offset out of address range!");
+                                                "EXIF: Offset %"MAGICK_SSIZE_T_F"d out of valid range!",
+                                                (MAGICK_SSIZE_T) (pval-tiffp));
                         goto generate_attribute_failure;
                       }
                     offset=Read32u(morder,pval);
@@ -2035,11 +2085,12 @@
                   }
                 case EXIF_FMT_SLONG:
                   {
-                    if ((pval+sizeof(magick_uint32_t)) > tiffp_max)
+                    if ((pval < tiffp) || ((pval+sizeof(magick_uint32_t)) > tiffp_max))
                       {
                         if (logging)
                           (void) LogMagickEvent(TransformEvent,GetMagickModule(),
-                                                "EXIF: Offset out of address range!");
+                                                "EXIF: Offset %"MAGICK_SSIZE_T_F"d out of valid range!",
+                                                (MAGICK_SSIZE_T) (pval-tiffp));
                         goto generate_attribute_failure;
                       }
                     FormatString(s,"%d",(int) Read32s(morder,pval));
@@ -2053,11 +2104,12 @@
                          t == GPS_LONGITUDE ||
                          t == GPS_TIMESTAMP))
                       {
-                        if ((pval+6*sizeof(magick_uint32_t)) > tiffp_max)
+                        if ((pval < tiffp) || ((pval+6*sizeof(magick_uint32_t)) > tiffp_max))
                           {
                             if (logging)
                               (void) LogMagickEvent(TransformEvent,GetMagickModule(),
-                                                    "EXIF: Offset out of address range!");
+                                                    "EXIF: Offset %"MAGICK_SSIZE_T_F"d out of valid range!",
+                                                    (MAGICK_SSIZE_T) (pval-tiffp));
                             goto generate_attribute_failure;
                           }
                         FormatString(s,"%u/%u,%u/%u,%u/%u"
@@ -2071,11 +2123,12 @@
                       }
                     else
                       {
-                        if ((pval+2*sizeof(magick_uint32_t)) > tiffp_max)
+                        if ((pval < tiffp) || ((pval+2*sizeof(magick_uint32_t)) > tiffp_max))
                           {
                             if (logging)
                               (void) LogMagickEvent(TransformEvent,GetMagickModule(),
-                                                    "EXIF: Offset out of address range!");
+                                                    "EXIF: Offset %"MAGICK_SSIZE_T_F"d out of valid range!",
+                                                    (MAGICK_SSIZE_T) (pval-tiffp));
                             goto generate_attribute_failure;
                           }
                         FormatString(s,"%u/%u"
@@ -2088,11 +2141,12 @@
                   }
                 case EXIF_FMT_SRATIONAL:
                   {
-                    if ((pval+2*sizeof(magick_uint32_t)) > tiffp_max)
+                    if ((pval < tiffp) || ((pval+2*sizeof(magick_uint32_t)) > tiffp_max))
                       {
                         if (logging)
-                          (void) LogMagickEvent(TransformEvent,GetMagickModule(),
-                                                "EXIF: Offset out of address range!");
+                              (void) LogMagickEvent(TransformEvent,GetMagickModule(),
+                                                    "EXIF: Offset %"MAGICK_SSIZE_T_F"d out of valid range!",
+                                                    (MAGICK_SSIZE_T) (pval-tiffp));
                         goto generate_attribute_failure;
                       }
                     FormatString(s,"%d/%d",(int) Read32s(morder,pval),
@@ -2102,11 +2156,12 @@
                   }
                 case EXIF_FMT_SINGLE:
                   {
-                    if ((pval+sizeof(float)) > tiffp_max)
+                    if ((pval < tiffp) || ((pval+sizeof(float)) > tiffp_max))
                       {
                         if (logging)
                           (void) LogMagickEvent(TransformEvent,GetMagickModule(),
-                                                "EXIF: Offset out of address range!");
+                                                "EXIF: Offset %"MAGICK_SSIZE_T_F"d out of valid range!",
+                                                (MAGICK_SSIZE_T) (pval-tiffp));
                         goto generate_attribute_failure;
                       }
                     FormatString(s,"%f",(double) *(float *) pval);
@@ -2115,11 +2170,12 @@
                   }
                 case EXIF_FMT_DOUBLE:
                   {
-                    if ((pval+sizeof(double)) > tiffp_max)
+                    if ((pval < tiffp) || ((pval+sizeof(double)) > tiffp_max))
                       {
                         if (logging)
                           (void) LogMagickEvent(TransformEvent,GetMagickModule(),
-                                                "EXIF: Offset out of address range!");
+                                                "EXIF: Offset %"MAGICK_SSIZE_T_F"d out of valid range!",
+                                                (MAGICK_SSIZE_T) (pval-tiffp));
                         goto generate_attribute_failure;
                       }
                     FormatString(s,"%f",*(double *) pval);
@@ -2139,17 +2195,25 @@
                     MagickBool
                       binary=MagickFalse;
 
-                    if ((pval+n) > tiffp_max)
+                    if (logging)
+                          (void) LogMagickEvent(TransformEvent,GetMagickModule(),
+                                                "EXIF: pval=%p (offset=%"MAGICK_SSIZE_T_F"d), n=%"MAGICK_SIZE_T_F"u",
+                                                pval, (MAGICK_SSIZE_T) (pval-tiffp), (MAGICK_SIZE_T) n);
+
+                    if ((pval < tiffp) || (pval+n) > tiffp_max)
                       {
                         if (logging)
                           (void) LogMagickEvent(TransformEvent,GetMagickModule(),
-                                                "EXIF: Offset out of address range!");
+                                                "EXIF: Offset %"MAGICK_SSIZE_T_F"d out of valid range!",
+                                                (MAGICK_SSIZE_T) (pval-tiffp));
                         goto generate_attribute_failure;
                       }
                     allocation_size=n+1;
                     for (a=0; a < n; a++)
-                      if (!(isprint((int) pval[a])))
-                        allocation_size += 3;
+                      {
+                        if (!(isprint((int) pval[a])))
+                          allocation_size += 3;
+                      }
 
                     value=MagickAllocateMemory(char *,allocation_size);
                     if (value != (char *) NULL)
diff -r ddfe99a36d9b -r 5f56eaafe189 magick/version.h
--- a/magick/version.h	Sun Nov 17 10:14:15 2019 -0600
+++ b/magick/version.h	Sat Nov 23 14:42:23 2019 -0600
@@ -38,8 +38,8 @@
 #define MagickLibVersion  0x232001
 #define MagickLibVersionText  "1.4"
 #define MagickLibVersionNumber 23,20,1
-#define MagickChangeDate   "20191117"
-#define MagickReleaseDate  "snapshot-20191117"
+#define MagickChangeDate   "20191123"
+#define MagickReleaseDate  "snapshot-20191123"
 
 /*
   The MagickLibInterfaceNewest and MagickLibInterfaceOldest defines
diff -r ddfe99a36d9b -r 5f56eaafe189 www/Changelog.html
--- a/www/Changelog.html	Sun Nov 17 10:14:15 2019 -0600
+++ b/www/Changelog.html	Sat Nov 23 14:42:23 2019 -0600
@@ -35,16 +35,20 @@
 <div class="document">
 
 
+<p>2019-11-23  Bob Friesenhahn  &lt;<a class="reference external" href="mailto:bfriesen&#37;&#52;&#48;simple&#46;dallas&#46;tx&#46;us">bfriesen<span>&#64;</span>simple<span>&#46;</span>dallas<span>&#46;</span>tx<span>&#46;</span>us</a>&gt;</p>
+<blockquote>
+<ul class="simple">
+<li>magick/attribute.c (GenerateEXIFAttribute): Fix oss-fuzz issue
+17986 &quot;graphicsmagick:coder_JPG_fuzzer: Heap-buffer-overflow in
+GenerateEXIFAttribute&quot;.  This problem likely only happens in
+32-bit builds.</li>
+</ul>
+</blockquote>
 <p>2019-11-17  Bob Friesenhahn  &lt;<a class="reference external" href="mailto:bfriesen&#37;&#52;&#48;simple&#46;dallas&#46;tx&#46;us">bfriesen<span>&#64;</span>simple<span>&#46;</span>dallas<span>&#46;</span>tx<span>&#46;</span>us</a>&gt;</p>
 <blockquote>
 <ul class="simple">
 <li>coders/png.c (ReadMNGImage): Only magnify the image if the
-requested magnification methods are supported.  Fixes oss-fuzz
-issues 14485 &quot;graphicsmagick/coder_MNG_fuzzer:
-Heap-buffer-overflow in ReadMNGImage&quot;, 15039
-&quot;graphicsmagick/coder_MNG_fuzzer: ASSERT: yy &lt; (long)
-large_image-&gt;rows&quot;, and 16737 &quot;graphicsmagick:coder_MNG_fuzzer:
-Unknown signal in MagickMallocAligned&quot;.</li>
+requested magnification methods are supported.</li>
 </ul>
 </blockquote>
 <p>2019-11-16  Bob Friesenhahn  &lt;<a class="reference external" href="mailto:bfriesen&#37;&#52;&#48;simple&#46;dallas&#46;tx&#46;us">bfriesen<span>&#64;</span>simple<span>&#46;</span>dallas<span>&#46;</span>tx<span>&#46;</span>us</a>&gt;</p>
diff -r ddfe99a36d9b -r 5f56eaafe189 www/api/attribute.html
--- a/www/api/attribute.html	Sun Nov 17 10:14:15 2019 -0600
+++ b/www/api/attribute.html	Sat Nov 23 14:42:23 2019 -0600
@@ -3,7 +3,7 @@
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
 <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
-<meta name="generator" content="Docutils 0.15.2: http://docutils.sourceforge.net/" />
+<meta name="generator" content="Docutils 0.13.1: http://docutils.sourceforge.net/" />
 <title>attribute</title>
 <link rel="stylesheet" href="../docutils-api.css" type="text/css" />
 </head>

