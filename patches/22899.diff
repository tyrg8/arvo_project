commit 29d9c2d2c80289f31278f8717959a5718a2e6ce1
Author: Luca Deri <deri@ntop.org>
Date:   Mon Jun 1 09:54:05 2020 +0200

    Reworked HTTP header processing workflow

diff --git a/src/lib/protocols/http.c b/src/lib/protocols/http.c
index 9f2a59fc..7b83b91e 100644
--- a/src/lib/protocols/http.c
+++ b/src/lib/protocols/http.c
@@ -96,81 +96,84 @@ static int ndpi_search_http_tcp_again(struct ndpi_detection_module_struct *ndpi_
 /* https://www.freeformatter.com/mime-types-list.html */
 static ndpi_protocol_category_t ndpi_http_check_content(struct ndpi_detection_module_struct *ndpi_struct,
 							struct ndpi_flow_struct *flow) {
   struct ndpi_packet_struct *packet = &flow->packet;
 
   if(packet->content_line.len > 0) {
     u_int app_len = sizeof("application");
 
     if(packet->content_line.len > app_len) {
       const char *app     = (const char *)&packet->content_line.ptr[app_len];
       u_int app_len_avail = packet->content_line.len-app_len;
 
       if(strncasecmp(app, "mpeg", app_len_avail) == 0) {
 	flow->guessed_category = flow->category = NDPI_PROTOCOL_CATEGORY_STREAMING;
 	return(flow->category);
       } else if(app_len_avail > 3) {
 	const char** cmp_mimes = NULL;
 
 	switch(app[0]) {
 	case 'e': cmp_mimes = binary_file_mimes_e; break;
 	case 'v': cmp_mimes = binary_file_mimes_v; break;
 	case 'x': cmp_mimes = binary_file_mimes_x; break;
 	}
 
 	if(cmp_mimes != NULL) {
 	  u_int8_t i;
-	  
+
 	  for(i = 0; cmp_mimes[i] != NULL; i++) {
 	    if(strncasecmp(app, cmp_mimes[i], app_len_avail) == 0) {
 	      flow->guessed_category = flow->category = NDPI_PROTOCOL_CATEGORY_DOWNLOAD_FT;
 	      NDPI_SET_BIT(flow->risk, NDPI_BINARY_APPLICATION_TRANSFER);
 	      NDPI_LOG_INFO(ndpi_struct, "found executable HTTP transfer");
 	      return(flow->category);
 	    }
 	  }
 	}
       }
     }
 
     /* check for attachment */
     if (packet->content_disposition_line.len > 0) {
       u_int8_t attachment_len = sizeof("attachment; filename");
 
       if(packet->content_disposition_line.len > attachment_len) {
 	u_int8_t filename_len = packet->content_disposition_line.len - attachment_len;
 
 	if(filename_len > ATTACHMENT_LEN) {
 	  attachment_len += filename_len-ATTACHMENT_LEN-1;
-	  
-	  for(int i = 0; binary_file_ext[i] != NULL; i++) {    
-	    if(strncmp((const char*)&packet->content_disposition_line.ptr[attachment_len],
-		      binary_file_ext[i], ATTACHMENT_LEN) == 0) {
-	      flow->guessed_category = flow->category = NDPI_PROTOCOL_CATEGORY_DOWNLOAD_FT;
-	      NDPI_SET_BIT(flow->risk, NDPI_BINARY_APPLICATION_TRANSFER);
-	      NDPI_LOG_INFO(ndpi_struct, "found executable HTTP transfer");
-	      return(flow->category);
+
+	  if((attachment_len+ATTACHMENT_LEN) <= packet->content_disposition_line.len) {
+	    for(int i = 0; binary_file_ext[i] != NULL; i++) {
+	      /* Use memcmp in case content-disposition contains binary data */
+	      if(memcmp((const char*)&packet->content_disposition_line.ptr[attachment_len],
+			 binary_file_ext[i], ATTACHMENT_LEN) == 0) {
+		flow->guessed_category = flow->category = NDPI_PROTOCOL_CATEGORY_DOWNLOAD_FT;
+		NDPI_SET_BIT(flow->risk, NDPI_BINARY_APPLICATION_TRANSFER);
+		NDPI_LOG_INFO(ndpi_struct, "found executable HTTP transfer");
+		return(flow->category);
+	      }
 	    }
 	  }
 	}
       }
     }
-    
+
     switch(packet->content_line.ptr[0]) {
     case 'a':
       if(strncasecmp((const char *)packet->content_line.ptr, "audio",
 		     ndpi_min(packet->content_line.len, 5)) == 0)
 	flow->guessed_category = flow->category = NDPI_PROTOCOL_CATEGORY_MEDIA;
       break;
 
     case 'v':
       if(strncasecmp((const char *)packet->content_line.ptr, "video",
 		     ndpi_min(packet->content_line.len, 5)) == 0)
 	flow->guessed_category = flow->category = NDPI_PROTOCOL_CATEGORY_MEDIA;
       break;
     }
   }
 
   return(flow->category);
 }
 
 /* *********************************************** */
@@ -178,30 +181,29 @@ static ndpi_protocol_category_t ndpi_http_check_content(struct ndpi_detection_mo
 static void ndpi_int_http_add_connection(struct ndpi_detection_module_struct *ndpi_struct,
 					 struct ndpi_flow_struct *flow,
 					 u_int16_t http_protocol,
 					 ndpi_protocol_category_t category) {
 #ifdef HTTP_DEBUG
   printf("=> %s()\n", __FUNCTION__);
 #endif
 
   if(flow->extra_packets_func && (flow->guessed_host_protocol_id == NDPI_PROTOCOL_UNKNOWN))
      return; /* Nothing new to add */
 
   /* This is HTTP and it is not a sub protocol (e.g. skype or dropbox) */
   ndpi_search_tcp_or_udp(ndpi_struct, flow);
 
   /* If no custom protocol has been detected */
   if((flow->guessed_host_protocol_id == NDPI_PROTOCOL_UNKNOWN) || (http_protocol != NDPI_PROTOCOL_HTTP))
     flow->guessed_host_protocol_id = http_protocol;
 
-  category = ndpi_http_check_content(ndpi_struct, flow);
   ndpi_int_reset_protocol(flow);
   ndpi_set_detected_protocol(ndpi_struct, flow, flow->guessed_host_protocol_id, NDPI_PROTOCOL_HTTP);
 
   /* This is necessary to inform the core to call this dissector again */
   flow->check_extra_packets = 1;
   flow->max_extra_packets_to_check = 5;
   flow->extra_packets_func = ndpi_search_http_tcp_again;
-  flow->http_detected = 1, flow->guessed_category = flow->category = category;
+  flow->http_detected = 1;
 }
 
 /* ************************************************************* */
@@ -300,251 +302,252 @@ static void ndpi_check_http_url(struct ndpi_detection_module_struct *ndpi_struct
 /**
    NOTE
    ndpi_parse_packet_line_info is in ndpi_main.c
 */
 static void check_content_type_and_change_protocol(struct ndpi_detection_module_struct *ndpi_struct,
 						   struct ndpi_flow_struct *flow) {
   struct ndpi_packet_struct *packet = &flow->packet;
 
   ndpi_set_detected_protocol(ndpi_struct, flow, NDPI_PROTOCOL_HTTP, NDPI_PROTOCOL_UNKNOWN);
 
   if(flow->http_detected && (flow->http.response_status_code != 0))
     return;
 
   if((flow->http.url == NULL)
        && (packet->http_url_name.len > 0)
        && (packet->host_line.len > 0)) {
       int len = packet->http_url_name.len + packet->host_line.len + 1;
 
       if(isdigit(packet->host_line.ptr[0])
 	 && (packet->host_line.len < 21))
 	ndpi_check_numeric_ip(ndpi_struct, flow, (char*)packet->host_line.ptr, packet->host_line.len);
 
       flow->http.url = ndpi_malloc(len);
       if(flow->http.url) {
 	strncpy(flow->http.url, (char*)packet->host_line.ptr, packet->host_line.len);
 	strncpy(&flow->http.url[packet->host_line.len], (char*)packet->http_url_name.ptr,
 		packet->http_url_name.len);
 	flow->http.url[len-1] = '\0';
 
 	ndpi_check_http_url(ndpi_struct, flow, &flow->http.url[packet->host_line.len]);
       }
 
       if(flow->packet.http_method.len < 3)
         flow->http.method = NDPI_HTTP_METHOD_UNKNOWN;
       else {
         switch(flow->packet.http_method.ptr[0]) {
         case 'O':  flow->http.method = NDPI_HTTP_METHOD_OPTIONS; break;
         case 'G':  flow->http.method = NDPI_HTTP_METHOD_GET; break;
         case 'H':  flow->http.method = NDPI_HTTP_METHOD_HEAD; break;
 
         case 'P':
           switch(flow->packet.http_method.ptr[1]) {
           case 'A': flow->http.method = NDPI_HTTP_METHOD_PATCH; break;
           case 'O': flow->http.method = NDPI_HTTP_METHOD_POST; break;
           case 'U': flow->http.method = NDPI_HTTP_METHOD_PUT; break;
           }
           break;
 
         case 'D':   flow->http.method = NDPI_HTTP_METHOD_DELETE; break;
         case 'T':   flow->http.method = NDPI_HTTP_METHOD_TRACE; break;
         case 'C':   flow->http.method = NDPI_HTTP_METHOD_CONNECT; break;
         default:
           flow->http.method = NDPI_HTTP_METHOD_UNKNOWN;
           break;
         }
       }
     }
 
   if(packet->user_agent_line.ptr != NULL && packet->user_agent_line.len != 0) {
     /**
        Format examples:
        Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) ....
        Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0
     */
     if(packet->user_agent_line.len > 7) {
       char ua[256];
       u_int mlen = ndpi_min(packet->user_agent_line.len, sizeof(ua)-1);
 
       strncpy(ua, (const char *)packet->user_agent_line.ptr, mlen);
       ua[mlen] = '\0';
 
       if(strncmp(ua, "Mozilla", 7) == 0) {
 	char *parent = strchr(ua, '(');
 
 	if(parent) {
 	  char *token, *end;
 
 	  parent++;
 	  end = strchr(parent, ')');
 	  if(end) end[0] = '\0';
 
 	  token = strsep(&parent, ";");
 	  if(token) {
 	    if((strcmp(token, "X11") == 0)
 	       || (strcmp(token, "compatible") == 0)
 	       || (strcmp(token, "Linux") == 0)
 	       || (strcmp(token, "Macintosh") == 0)
 	       ) {
 	      token = strsep(&parent, ";");
 	      if(token && (token[0] == ' ')) token++; /* Skip space */
 
 	      if(token
 		 && ((strcmp(token, "U") == 0)
 		     || (strncmp(token, "MSIE", 4) == 0))) {
 		token = strsep(&parent, ";");
 		if(token && (token[0] == ' ')) token++; /* Skip space */
 
 		if(token && (strncmp(token, "Update", 6)  == 0)) {
 		  token = strsep(&parent, ";");
 
 		  if(token && (token[0] == ' ')) token++; /* Skip space */
 
 		  if(token && (strncmp(token, "AOL", 3)  == 0)) {
 
 		    token = strsep(&parent, ";");
 		    if(token && (token[0] == ' ')) token++; /* Skip space */
 		  }
 		}
 	      }
 	    }
 
 	    if(token)
 	      setHttpUserAgent(ndpi_struct, flow, token);
 	  }
 	}
       } else if((packet->user_agent_line.len > 14) && (memcmp(ua, "netflix-ios-app", 15) == 0)) {
 	NDPI_LOG_INFO(ndpi_struct, "found netflix\n");
       	ndpi_int_http_add_connection(ndpi_struct, flow, NDPI_PROTOCOL_NETFLIX, NDPI_PROTOCOL_CATEGORY_STREAMING);
       	return;
       }
     }
 
     if(flow->http.user_agent == NULL) {
       int len = packet->user_agent_line.len + 1;
 
       flow->http.user_agent = ndpi_malloc(len);
       if(flow->http.user_agent) {
 	strncpy(flow->http.user_agent, (char*)packet->user_agent_line.ptr,
 		packet->user_agent_line.len);
 	flow->http.user_agent[packet->user_agent_line.len] = '\0';
 
 	ndpi_check_user_agent(ndpi_struct, flow, flow->http.user_agent);
       }
     }
 
     NDPI_LOG_DBG2(ndpi_struct, "User Agent Type line found %.*s\n",
 		  packet->user_agent_line.len, packet->user_agent_line.ptr);
   }
 
   /* check for host line */
   if(packet->host_line.ptr != NULL) {
     u_int len;
 
     NDPI_LOG_DBG2(ndpi_struct, "HOST line found %.*s\n",
 		  packet->host_line.len, packet->host_line.ptr);
 
     /* Copy result for nDPI apps */
     len = ndpi_min(packet->host_line.len, sizeof(flow->host_server_name)-1);
     strncpy((char*)flow->host_server_name, (char*)packet->host_line.ptr, len);
     flow->host_server_name[len] = '\0';
     flow->extra_packets_func = NULL; /* We're good now */
 
     flow->server_id = flow->dst;
 
     if(packet->forwarded_line.ptr) {
       len = ndpi_min(packet->forwarded_line.len, sizeof(flow->protos.http.nat_ip)-1);
       strncpy((char*)flow->protos.http.nat_ip, (char*)packet->forwarded_line.ptr, len);
       flow->protos.http.nat_ip[len] = '\0';
     }
 
     ndpi_http_parse_subprotocol(ndpi_struct, flow);
 
     /**
        check result of host subprotocol detection
 
        if "detected" in flow == 0 then "detected" = "guess"
        else "guess" = "detected"
     **/
     if(flow->detected_protocol_stack[1] == NDPI_PROTOCOL_UNKNOWN) {
       /* Avoid putting as subprotocol a "core" protocol such as SSL or DNS */
       if(ndpi_struct->proto_defaults[flow->guessed_protocol_id].can_have_a_subprotocol == 0) {
 	flow->detected_protocol_stack[1] = flow->guessed_protocol_id;
 	if(flow->detected_protocol_stack[0] == NDPI_PROTOCOL_UNKNOWN)
 	  flow->detected_protocol_stack[0] = flow->guessed_host_protocol_id;
       }
     }
     else {
       if(flow->detected_protocol_stack[1] != flow->guessed_protocol_id)
 	flow->guessed_protocol_id = flow->detected_protocol_stack[1];
       if(flow->detected_protocol_stack[0] != flow->guessed_host_protocol_id)
 	flow->guessed_host_protocol_id = flow->detected_protocol_stack[0];
     }
 
     if((flow->detected_protocol_stack[0] == NDPI_PROTOCOL_UNKNOWN)
        && (flow->http_detected)
        && (packet->http_origin.len > 0)) {
       ndpi_protocol_match_result ret_match;
 
       ndpi_match_host_subprotocol(ndpi_struct, flow,
 				  (char *)packet->http_origin.ptr,
 				  packet->http_origin.len,
 				  &ret_match,
 				  NDPI_PROTOCOL_HTTP);
     }
 
     if(flow->detected_protocol_stack[0] != NDPI_PROTOCOL_UNKNOWN) {
       if(packet->detected_protocol_stack[0] != NDPI_PROTOCOL_HTTP) {
 	NDPI_LOG_INFO(ndpi_struct, "found HTTP/%s\n",
 		      ndpi_get_proto_name(ndpi_struct, packet->detected_protocol_stack[0]));
 	ndpi_int_http_add_connection(ndpi_struct, flow, packet->detected_protocol_stack[0], NDPI_PROTOCOL_CATEGORY_WEB);
 	return; /* We have identified a sub-protocol so we're done */
       }
     }
   }
 
 #if 0
   if(flow->http_detected)
     ndpi_http_parse_subprotocol(ndpi_struct, flow);
 #endif
 
   if(flow->guessed_protocol_id == NDPI_PROTOCOL_UNKNOWN)
     flow->guessed_protocol_id = NDPI_PROTOCOL_HTTP;
 
   /* check for accept line */
   if(packet->accept_line.ptr != NULL) {
     NDPI_LOG_DBG2(ndpi_struct, "Accept line found %.*s\n",
 		  packet->accept_line.len, packet->accept_line.ptr);
     if(NDPI_COMPARE_PROTOCOL_TO_BITMASK(ndpi_struct->detection_bitmask,
 					NDPI_PROTOCOL_RTSP) != 0) {
       rtsp_parse_packet_acceptline(ndpi_struct, flow);
     }
   }
 
   if(packet->content_line.ptr != NULL && packet->content_line.len != 0) {
     NDPI_LOG_DBG2(ndpi_struct, "Content Type line found %.*s\n",
 		  packet->content_line.len, packet->content_line.ptr);
 
     if((flow->http.content_type == NULL) && (packet->content_line.len > 0)) {
       int len = packet->content_line.len + 1;
 
       flow->http.content_type = ndpi_malloc(len);
       if(flow->http.content_type) {
 	strncpy(flow->http.content_type, (char*)packet->content_line.ptr,
 		packet->content_line.len);
 	flow->http.content_type[packet->content_line.len] = '\0';
-      }
+
+	flow->guessed_category = flow->category = ndpi_http_check_content(ndpi_struct, flow);}
     }
 
     if(flow->http_detected) {
       ndpi_protocol_match_result ret_match;
 
       ndpi_match_content_subprotocol(ndpi_struct, flow,
 				     (char*)packet->content_line.ptr, packet->content_line.len,
 				     &ret_match, NDPI_PROTOCOL_HTTP);
     }
   }
 
   ndpi_int_http_add_connection(ndpi_struct, flow, packet->detected_protocol_stack[0], NDPI_PROTOCOL_CATEGORY_WEB);
 }
 
 /* ************************************************************* */
