commit 9b5e5919052c5dff80a3f7301ae520b71571814a
Author: Evan Miller <emmiller@gmail.com>
Date:   Thu Jan 7 18:46:07 2021 -0500

    Improved bounds checking (fixes oss-fuzz/29328)

diff --git a/src/libmdb/write.c b/src/libmdb/write.c
index 752d41d..e717344 100644
--- a/src/libmdb/write.c
+++ b/src/libmdb/write.c
@@ -125,49 +125,52 @@ static int
 mdb_crack_row3(MdbHandle *mdb, unsigned int row_start, unsigned int row_end,
         unsigned int bitmask_sz, unsigned int row_var_cols, unsigned int *var_col_offsets)
 {
 	unsigned int i;
 	unsigned int num_jumps = 0, jumps_used = 0;
 	unsigned int col_ptr, row_len;
 
 	row_len = row_end - row_start + 1;
 	num_jumps = (row_len - 1) / 256;
 	col_ptr = row_end - bitmask_sz - num_jumps - 1;
 	/* If last jump is a dummy value, ignore it */
 	if ((col_ptr-row_start-row_var_cols)/256 < num_jumps)
 		num_jumps--;
 
 	if (bitmask_sz + num_jumps + 1 > row_end)
 		return 0;
 
+	if (col_ptr >= mdb->fmt->pg_size || col_ptr < row_var_cols)
+		return 0;
+
 	jumps_used = 0;
 	for (i=0; i<row_var_cols+1; i++) {
 		while ((jumps_used < num_jumps)
 		 && (i == mdb->pg_buf[row_end-bitmask_sz-jumps_used-1])) {
 			jumps_used++;
 		}
 		var_col_offsets[i] = mdb->pg_buf[col_ptr-i]+(jumps_used*256);
 	}
 
     return 1;
 }
 /**
  * mdb_crack_row:
  * @table: Table that the row belongs to
  * @row_start: offset to start of row on current page
  * @row_end: offset to end of row on current page
  * @fields: pointer to MdbField array to be populated by mdb_crack_row
  *
  * Cracks a row buffer apart into its component fields.  
  * 
  * A row buffer is that portion of a data page which contains the values for
  * that row.  Its beginning and end can be found in the row offset table.
  *
  * The resulting MdbField array contains pointers into the row for each field 
  * present.  Be aware that by modifying field[]->value, you would be modifying 
  * the row buffer itself, not a copy.
  *
  * This routine is mostly used internally by mdb_fetch_row() but may have some
  * applicability for advanced application programs.
  *
  * Return value: number of fields present, or -1 if the buffer is invalid.
  */
