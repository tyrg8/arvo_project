commit 511a22f0b49a467af1e2932f7a339481acab94a1
Author: Daniel Novomesky <dnovomesky@gmail.com>
Date:   Tue Mar 2 12:35:27 2021 +0100

    Check the input buffer before passing it to libheif

diff --git a/src/imageformats/heif.cpp b/src/imageformats/heif.cpp
index d399273..68470a7 100644
--- a/src/imageformats/heif.cpp
+++ b/src/imageformats/heif.cpp
@@ -256,44 +256,49 @@ bool HEIFHandler::write(const QImage &image)
 bool HEIFHandler::canRead(QIODevice *device)
 {
     if (!device) {
         qWarning("HEIFHandler::canRead() called with no device");
         return false;
     }
 
     const QByteArray header = device->peek(28);
+    return HEIFHandler::isSupportedBMFFType(header);
+}
+
+bool HEIFHandler::isSupportedBMFFType(const QByteArray &header)
+{
     if (header.size() < 28) {
         return false;
     }
 
     const char *buffer = header.constData();
     if (qstrncmp(buffer + 4, "ftyp", 4) == 0) {
         if (qstrncmp(buffer + 8, "heic", 4) == 0) {
             return true;
         }
         if (qstrncmp(buffer + 8, "heis", 4) == 0) {
             return true;
         }
         if (qstrncmp(buffer + 8, "heix", 4) == 0) {
             return true;
         }
 
         /* we want to avoid loading AVIF files via this plugin */
         if (qstrncmp(buffer + 8, "mif1", 4) == 0) {
             for (int offset = 16; offset <= 24; offset += 4) {
                 if (qstrncmp(buffer + offset, "avif", 4) == 0) {
                     return false;
                 }
             }
             return true;
         }
 
         if (qstrncmp(buffer + 8, "mif2", 4) == 0) {
             return true;
         }
         if (qstrncmp(buffer + 8, "msf1", 4) == 0) {
             return true;
         }
     }
 
     return false;
 }
@@ -355,342 +360,342 @@ bool HEIFHandler::ensureParsed() const
     return that->ensureDecoder();
 }
 bool HEIFHandler::ensureDecoder()
 {
     if (m_parseState != ParseHeicNotParsed) {
         if (m_parseState == ParseHeicSuccess) {
             return true;
         }
         return false;
     }
 
     const QByteArray buffer = device()->readAll();
-    if (buffer.isEmpty()) {
+    if (!HEIFHandler::isSupportedBMFFType(buffer)) {
         m_parseState = ParseHeicError;
         return false;
     }
 
     try {
         heif::Context ctx;
         ctx.read_from_memory_without_copy((const void *)(buffer.constData()),
                                           buffer.size());
 
         heif::ImageHandle handle = ctx.get_primary_image_handle();
 
         const bool hasAlphaChannel = handle.has_alpha_channel();
         const int bit_depth = handle.get_luma_bits_per_pixel();
         heif_chroma chroma;
 
         QImage::Format target_image_format;
 
         if (bit_depth == 10 || bit_depth == 12) {
             if (hasAlphaChannel) {
                 chroma = (QSysInfo::ByteOrder == QSysInfo::LittleEndian) ? heif_chroma_interleaved_RRGGBBAA_LE : heif_chroma_interleaved_RRGGBBAA_BE;
                 target_image_format = QImage::Format_RGBA64;
             } else {
                 chroma = (QSysInfo::ByteOrder == QSysInfo::LittleEndian) ? heif_chroma_interleaved_RRGGBB_LE : heif_chroma_interleaved_RRGGBB_BE;
                 target_image_format = QImage::Format_RGBX64;
             }
         } else if (bit_depth == 8) {
             if (hasAlphaChannel) {
                 chroma = heif_chroma_interleaved_RGBA;
                 target_image_format = QImage::Format_ARGB32;
             } else {
                 chroma = heif_chroma_interleaved_RGB;
                 target_image_format = QImage::Format_RGB32;
             }
         } else {
             m_parseState = ParseHeicError;
             if (bit_depth > 0) {
                 qWarning() << "Unsupported bit depth:" << bit_depth;
             } else {
                 qWarning() << "Undefined bit depth.";
             }
             return false;
         }
 
 
         heif::Image img = handle.decode_image(heif_colorspace_RGB, chroma);
 
         const int imageWidth = img.get_width(heif_channel_interleaved);
         const int imageHeight = img.get_height(heif_channel_interleaved);
 
         QSize imageSize(imageWidth, imageHeight);
 
         if (!imageSize.isValid()) {
             m_parseState = ParseHeicError;
             qWarning() << "HEIC image size invalid:" << imageSize;
             return false;
         }
 
         int stride = 0;
         const uint8_t *const src = img.get_plane(heif_channel_interleaved, &stride);
 
         if (!src || stride <= 0) {
             m_parseState = ParseHeicError;
             qWarning() << "HEIC data pixels information not valid!";
             return false;
         }
 
         m_current_image = QImage(imageSize, target_image_format);
         if (m_current_image.isNull()) {
             m_parseState = ParseHeicError;
             qWarning() << "Unable to allocate memory!";
             return false;
         }
 
         switch (bit_depth) {
         case 12:
             if (hasAlphaChannel) {
                 for (int y = 0; y < imageHeight; y++) {
                     const uint16_t *src_word = reinterpret_cast<const uint16_t *>(src + (y * stride));
                     uint16_t *dest_data = reinterpret_cast<uint16_t *>(m_current_image.scanLine(y));
                     for (int x = 0; x < imageWidth; x++) {
                         int tmpvalue;
                         //R
                         tmpvalue = (int)(((float)(0x0fff & (*src_word)) / 4095.0f) * 65535.0f + 0.5f);
                         tmpvalue = qBound(0, tmpvalue, 65535);
                         *dest_data = (uint16_t) tmpvalue;
                         src_word++;
                         dest_data++;
                         //G
                         tmpvalue = (int)(((float)(0x0fff & (*src_word)) / 4095.0f) * 65535.0f + 0.5f);
                         tmpvalue = qBound(0, tmpvalue, 65535);
                         *dest_data = (uint16_t) tmpvalue;
                         src_word++;
                         dest_data++;
                         //B
                         tmpvalue = (int)(((float)(0x0fff & (*src_word)) / 4095.0f) * 65535.0f + 0.5f);
                         tmpvalue = qBound(0, tmpvalue, 65535);
                         *dest_data = (uint16_t) tmpvalue;
                         src_word++;
                         dest_data++;
                         //A
                         tmpvalue = (int)(((float)(0x0fff & (*src_word)) / 4095.0f) * 65535.0f + 0.5f);
                         tmpvalue = qBound(0, tmpvalue, 65535);
                         *dest_data = (uint16_t) tmpvalue;
                         src_word++;
                         dest_data++;
                     }
                 }
             } else { //no alpha channel
                 for (int y = 0; y < imageHeight; y++) {
                     const uint16_t *src_word = reinterpret_cast<const uint16_t *>(src + (y * stride));
                     uint16_t *dest_data = reinterpret_cast<uint16_t *>(m_current_image.scanLine(y));
                     for (int x = 0; x < imageWidth; x++) {
                         int tmpvalue;
                         //R
                         tmpvalue = (int)(((float)(0x0fff & (*src_word)) / 4095.0f) * 65535.0f + 0.5f);
                         tmpvalue = qBound(0, tmpvalue, 65535);
                         *dest_data = (uint16_t) tmpvalue;
                         src_word++;
                         dest_data++;
                         //G
                         tmpvalue = (int)(((float)(0x0fff & (*src_word)) / 4095.0f) * 65535.0f + 0.5f);
                         tmpvalue = qBound(0, tmpvalue, 65535);
                         *dest_data = (uint16_t) tmpvalue;
                         src_word++;
                         dest_data++;
                         //B
                         tmpvalue = (int)(((float)(0x0fff & (*src_word)) / 4095.0f) * 65535.0f + 0.5f);
                         tmpvalue = qBound(0, tmpvalue, 65535);
                         *dest_data = (uint16_t) tmpvalue;
                         src_word++;
                         dest_data++;
                         //X = 0xffff
                         *dest_data = 0xffff;
                         dest_data++;
                     }
                 }
             }
             break;
         case 10:
             if (hasAlphaChannel) {
                 for (int y = 0; y < imageHeight; y++) {
                     const uint16_t *src_word = reinterpret_cast<const uint16_t *>(src + (y * stride));
                     uint16_t *dest_data = reinterpret_cast<uint16_t *>(m_current_image.scanLine(y));
                     for (int x = 0; x < imageWidth; x++) {
                         int tmpvalue;
                         //R
                         tmpvalue = (int)(((float)(0x03ff & (*src_word)) / 1023.0f) * 65535.0f + 0.5f);
                         tmpvalue = qBound(0, tmpvalue, 65535);
                         *dest_data = (uint16_t) tmpvalue;
                         src_word++;
                         dest_data++;
                         //G
                         tmpvalue = (int)(((float)(0x03ff & (*src_word)) / 1023.0f) * 65535.0f + 0.5f);
                         tmpvalue = qBound(0, tmpvalue, 65535);
                         *dest_data = (uint16_t) tmpvalue;
                         src_word++;
                         dest_data++;
                         //B
                         tmpvalue = (int)(((float)(0x03ff & (*src_word)) / 1023.0f) * 65535.0f + 0.5f);
                         tmpvalue = qBound(0, tmpvalue, 65535);
                         *dest_data = (uint16_t) tmpvalue;
                         src_word++;
                         dest_data++;
                         //A
                         tmpvalue = (int)(((float)(0x03ff & (*src_word)) / 1023.0f) * 65535.0f + 0.5f);
                         tmpvalue = qBound(0, tmpvalue, 65535);
                         *dest_data = (uint16_t) tmpvalue;
                         src_word++;
                         dest_data++;
                     }
                 }
             } else { //no alpha channel
                 for (int y = 0; y < imageHeight; y++) {
                     const uint16_t *src_word = reinterpret_cast<const uint16_t *>(src + (y * stride));
                     uint16_t *dest_data = reinterpret_cast<uint16_t *>(m_current_image.scanLine(y));
                     for (int x = 0; x < imageWidth; x++) {
                         int tmpvalue;
                         //R
                         tmpvalue = (int)(((float)(0x03ff & (*src_word)) / 1023.0f) * 65535.0f + 0.5f);
                         tmpvalue = qBound(0, tmpvalue, 65535);
                         *dest_data = (uint16_t) tmpvalue;
                         src_word++;
                         dest_data++;
                         //G
                         tmpvalue = (int)(((float)(0x03ff & (*src_word)) / 1023.0f) * 65535.0f + 0.5f);
                         tmpvalue = qBound(0, tmpvalue, 65535);
                         *dest_data = (uint16_t) tmpvalue;
                         src_word++;
                         dest_data++;
                         //B
                         tmpvalue = (int)(((float)(0x03ff & (*src_word)) / 1023.0f) * 65535.0f + 0.5f);
                         tmpvalue = qBound(0, tmpvalue, 65535);
                         *dest_data = (uint16_t) tmpvalue;
                         src_word++;
                         dest_data++;
                         //X = 0xffff
                         *dest_data = 0xffff;
                         dest_data++;
                     }
                 }
             }
             break;
         case 8:
             if (hasAlphaChannel) {
                 for (int y = 0; y < imageHeight; y++) {
                     const uint8_t *src_byte = src + (y * stride);
                     uint32_t *dest_pixel = reinterpret_cast<uint32_t *>(m_current_image.scanLine(y));
                     for (int x = 0; x < imageWidth; x++) {
                         int red = *src_byte++;
                         int green = *src_byte++;
                         int blue = *src_byte++;
                         int alpha = *src_byte++;
                         *dest_pixel = qRgba(red, green, blue, alpha);
                         dest_pixel++;
                     }
                 }
             } else { //no alpha channel
                 for (int y = 0; y < imageHeight; y++) {
                     const uint8_t *src_byte = src + (y * stride);
                     uint32_t *dest_pixel = reinterpret_cast<uint32_t *>(m_current_image.scanLine(y));
                     for (int x = 0; x < imageWidth; x++) {
                         int red = *src_byte++;
                         int green = *src_byte++;
                         int blue = *src_byte++;
                         *dest_pixel = qRgb(red, green, blue);
                         dest_pixel++;
                     }
                 }
 
             }
             break;
         default:
             m_parseState = ParseHeicError;
             qWarning() << "Unsupported bit depth:" << bit_depth;
             return false;
             break;
         }
 
         heif_color_profile_type profileType = heif_image_handle_get_color_profile_type(handle.get_raw_image_handle());
         struct heif_error err;
         if (profileType == heif_color_profile_type_prof || profileType == heif_color_profile_type_rICC) {
             int rawProfileSize = (int) heif_image_handle_get_raw_color_profile_size(handle.get_raw_image_handle());
             if (rawProfileSize > 0) {
                 QByteArray ba(rawProfileSize, 0);
                 err = heif_image_handle_get_raw_color_profile(handle.get_raw_image_handle(), ba.data());
                 if (err.code) {
                     qWarning() << "icc profile loading failed";
                 } else {
                     m_current_image.setColorSpace(QColorSpace::fromIccProfile(ba));
                     if (!m_current_image.colorSpace().isValid()) {
                         qWarning() << "icc profile is invalid";
                     }
                 }
             } else {
                 qWarning() << "icc profile is empty";
             }
 
         } else if (profileType == heif_color_profile_type_nclx) {
             struct heif_color_profile_nclx *nclx = nullptr;
             err = heif_image_handle_get_nclx_color_profile(handle.get_raw_image_handle(), &nclx);
             if (err.code || !nclx) {
                 qWarning() << "nclx profile loading failed";
             } else {
                 const QPointF redPoint(nclx->color_primary_red_x, nclx->color_primary_red_y);
                 const QPointF greenPoint(nclx->color_primary_green_x, nclx->color_primary_green_y);
                 const QPointF bluePoint(nclx->color_primary_blue_x, nclx->color_primary_blue_y);
                 const QPointF whitePoint(nclx->color_primary_white_x, nclx->color_primary_white_y);
 
                 QColorSpace::TransferFunction q_trc = QColorSpace::TransferFunction::Custom;
                 float q_trc_gamma = 0.0f;
 
                 switch (nclx->transfer_characteristics) {
                 case 4:
                     q_trc = QColorSpace::TransferFunction::Gamma;
                     q_trc_gamma = 2.2f;
                     break;
                 case 5:
                     q_trc = QColorSpace::TransferFunction::Gamma;
                     q_trc_gamma = 2.8f;
                     break;
                 case 8:
                     q_trc = QColorSpace::TransferFunction::Linear;
                     break;
                 case 2:
                 case 13:
                     q_trc =  QColorSpace::TransferFunction::SRgb;
                     break;
                 default:
                     qWarning("CICP color_primaries: %d, transfer_characteristics: %d\nThe colorspace is unsupported by this plug-in yet.",
                              nclx->color_primaries, nclx->transfer_characteristics);
                     q_trc = QColorSpace::TransferFunction::SRgb;
                     break;
                 }
 
                 if (q_trc != QColorSpace::TransferFunction::Custom) {   //we create new colorspace using Qt
                     switch (nclx->color_primaries) {
                     case 1:
                     case 2:
                         m_current_image.setColorSpace(QColorSpace(QColorSpace::Primaries::SRgb, q_trc, q_trc_gamma));
                         break;
                     case 12:
                         m_current_image.setColorSpace(QColorSpace(QColorSpace::Primaries::DciP3D65, q_trc, q_trc_gamma));
                         break;
                     default:
                         m_current_image.setColorSpace(QColorSpace(whitePoint, redPoint, greenPoint, bluePoint, q_trc, q_trc_gamma));
                         break;
                     }
                 }
                 heif_nclx_color_profile_free(nclx);
 
                 if (!m_current_image.colorSpace().isValid()) {
                     qWarning() << "invalid color profile created from NCLX";
                 }
 
             }
 
         } else {
             m_current_image.setColorSpace(QColorSpace(QColorSpace::SRgb));
         }
 
     } catch (const heif::Error &err) {
         m_parseState = ParseHeicError;
         qWarning() << "libheif error:" << err.get_message().c_str();
         return false;
     }
 
     m_parseState = ParseHeicSuccess;
     return true;
 }
diff --git a/src/imageformats/heif_p.h b/src/imageformats/heif_p.h
index dd3e342..c9fcb05 100644
--- a/src/imageformats/heif_p.h
+++ b/src/imageformats/heif_p.h
@@ -1,15 +1,16 @@
 /*
     High Efficiency Image File Format (HEIF) support for QImage.
 
     SPDX-FileCopyrightText: 2020 Sirius Bakke <sirius@bakke.co>
     SPDX-FileCopyrightText: 2021 Daniel Novomesky <dnovomesky@gmail.com>
 
     SPDX-License-Identifier: LGPL-2.0-or-later
 */
 
 #ifndef KIMG_HEIF_P_H
 #define KIMG_HEIF_P_H
 
+#include <QByteArray>
 #include <QImage>
 #include <QImageIOPlugin>
 
@@ -27,17 +28,18 @@ public:
     QVariant option(ImageOption option) const override;
     void setOption(ImageOption option, const QVariant &value) override;
     bool supportsOption(ImageOption option) const override;
 private:
+    static bool isSupportedBMFFType(const QByteArray &header);
     bool ensureParsed() const;
     bool ensureDecoder();
 
     enum ParseHeicState {
         ParseHeicError = -1,
         ParseHeicNotParsed = 0,
         ParseHeicSuccess = 1
     };
 
     ParseHeicState m_parseState;
     int m_quality;
     QImage m_current_image;
 };
