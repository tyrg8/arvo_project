commit e1b438bb1ab2e49a7a472a71efa5e2d32c4829e6
Author: Idan Horowitz <idan.horowitz@gmail.com>
Date:   Sat Dec 2 11:51:51 2023 +0200

    LibGfx: Actually ensure Cmap subtable offset is within expected range
    
    Our previous check was not sufficient, since it merely checked the
    first byte of the EncodingRecord offset is within range, while the
    actual read is 4-byte wide.
    
    Fixes ossfuzz-64165.

diff --git a/Userland/Libraries/LibGfx/Font/OpenType/Cmap.cpp b/Userland/Libraries/LibGfx/Font/OpenType/Cmap.cpp
index fff80e0600..e88f33750b 100644
--- a/Userland/Libraries/LibGfx/Font/OpenType/Cmap.cpp
+++ b/Userland/Libraries/LibGfx/Font/OpenType/Cmap.cpp
@@ -65,18 +65,18 @@ u32 Cmap::num_subtables() const
 Optional<Cmap::Subtable> Cmap::subtable(u32 index) const
 {
     if (index >= num_subtables()) {
         return {};
     }
     u32 record_offset = (u32)Sizes::TableHeader + index * (u32)Sizes::EncodingRecord;
-    if (record_offset + (u32)Offsets::EncodingRecord_Offset >= m_slice.size())
+    if (record_offset + (u32)Offsets::EncodingRecord_Offset + sizeof(u32) > m_slice.size())
         return {};
     u16 platform_id = be_u16(m_slice.offset(record_offset));
     u16 encoding_id = be_u16(m_slice.offset(record_offset + (u32)Offsets::EncodingRecord_EncodingID));
     u32 subtable_offset = be_u32(m_slice.offset(record_offset + (u32)Offsets::EncodingRecord_Offset));
     if (subtable_offset >= m_slice.size())
         return {};
     auto subtable_slice = ReadonlyBytes(m_slice.offset(subtable_offset), m_slice.size() - subtable_offset);
     return Subtable(subtable_slice, platform_id, encoding_id);
 }
 
 // FIXME: Implement the missing formats.
