commit 8ab484c23b9f3533fcd942e95887383786331f06
Author: Alan Modra <amodra@gmail.com>
Date:   Tue Jan 14 09:39:47 2020 +1030

    ubsan: alpha-vms: segv
    
    I thought the fuzzers were really going overboard by defining
    VMS_DEBUG but that wasn't the case.  VMS_DEBUG is defined by
    default.  Let's not do that, and fix the segv as well.
    
            * vms.h (VMS_DEBUG): Define as 0.
            * vms-alpha.c (image_write): Move debug output after bounds check.
            Tidy bounds check.
            (_bfd_vms_slurp_eihd): Warning fix.
            (_bfd_vms_slurp_etir): Init variables to avoid bogus warnings.

diff --git a/bfd/ChangeLog b/bfd/ChangeLog
index 84caf0b04ae..acb545cd03c 100644
--- a/bfd/ChangeLog
+++ b/bfd/ChangeLog
@@ -1,169 +1,177 @@
+2020-01-14  Alan Modra  <amodra@gmail.com>
+
+	* vms.h (VMS_DEBUG): Define as 0.
+	* vms-alpha.c (image_write): Move debug output after bounds check.
+	Tidy bounds check.
+	(_bfd_vms_slurp_eihd): Warning fix.
+	(_bfd_vms_slurp_etir): Init variables to avoid bogus warnings.
+
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	* vms-alpha.c (_bfd_vms_slurp_egsd): Ensure minimum size even
 	for "ignored" records.
 
 2020-01-13  Alan Modra  <amodra@gmail.com>
 
 	* wasm-module.c (wasm_scan_name_function_section): Formatting.
 	Delete asect name check.  Move asect NULL check to wasm_object_p.
 	Correct bounds check of sizes against end.  Replace uses of
 	bfd_zalloc with bfd_alloc, zeroing only necessary bytes.  Use
 	just one bfd_release.
 	(wasm_scan): Don't use malloc/strdup for section names,
 	bfd_alloc instead.  Simplify code prefixing section name.
 	Formatting.  Don't attempt to free memory here..
 	(wasm_object_p): ..do so here.
 
 2020-01-10  Szabolcs Nagy  <szabolcs.nagy@arm.com>
 
 	PR ld/22269
 	* elf32-arm.c (elf32_arm_final_link_relocate): Use
 	UNDEFWEAK_NO_DYNAMIC_RELOC.
 	(allocate_dynrelocs_for_symbol): Likewise.
 
 2020-01-10  Tamar Christina  <tamar.christina@arm.com>
 
 	PR 25210
 	* elfnn-aarch64.c (_bfd_aarch64_create_stub_section): Remove elfclass.
 
 2020-01-10  Alan Modra  <amodra@gmail.com>
 
 	* coff-alpha.c (alpha_ecoff_object_p): Calculate size in bfd_size_type.
 
 2020-01-09  Nick Clifton  <nickc@redhat.com>
 
 	PR 25221
 	* bfd.c (bfd_convert_section_contents): Check for a compress
 	header size that is larger than the actual section size.
 
 2020-01-08  Alan Modra  <amodra@gmail.com>
 
 	PR 25351
 	* elflink.c (bfd_elf_final_link): Call _bfd_fix_excluded_sec_syms
 	after removing sections.
 
 2020-01-06  Jim Wilson  <jimw@sifive.com>
 
 	PR 25205
 	* elfnn-riscv.c (riscv_elf_relocate_section) <R_RISCV_CALL>: Add
 	check for !bfd_link_pic (info).
 	<R_RISCV_CALL_PLT>: Move next to R_RISCV_CALL.
 	<R_RISCV_JAL>: Add comment.
 	(_bfd_riscv_relax_section): For plt.offset check, add check for
 	bfd_link_pic (info).  Add comment.
 
 2020-01-06  Alan Modra  <amodra@gmail.com>
 
 	* format.c (bfd_check_format_matches): Ignore bfd_error on target
 	match failures.  Don't init to bfd_error_wrong_format before
 	calling _bfd_check_format.
 
 2020-01-06  Alan Modra  <amodra@gmail.com>
 
 	* vms-alpha.c (_bfd_vms_push, _bfd_vms_pop): Return pass/fail
 	status rather than exiting on stack overflow or underflow.
 	(_bfd_vms_slurp_etir): Adjust to suit.
 
 2020-01-06  Alan Modra  <amodra@gmail.com>
 
 	* som.c (som_bfd_fill_in_ar_symbols): Bounds check som_dict index.
 
 2020-01-06  Alan Modra  <amodra@gmail.com>
 
 	* mach-o.c (bfd_mach_o_read_dylinker): Don't read past end of
 	command.  Check name offset is within command.
 	(bfd_mach_o_read_dylib, bfd_mach_o_read_prebound_dylib),
 	(bfd_mach_o_read_prebind_cksum, bfd_mach_o_read_twolevel_hints),
 	(bfd_mach_o_read_fvmlib, bfd_mach_o_read_dysymtab),
 	(bfd_mach_o_read_symtab, bfd_mach_o_read_uuid),
 	(bfd_mach_o_read_linkedit, bfd_mach_o_read_str),
 	(bfd_mach_o_read_dyld_info, bfd_mach_o_read_version_min),
 	(bfd_mach_o_read_encryption_info, bfd_mach_o_read_source_version),
 	(bfd_mach_o_read_encryption_info_64, bfd_mach_o_read_main),
 	(bfd_mach_o_read_note, bfd_mach_o_read_build_version),
 	(bfd_mach_o_read_segment): Similarly.
 	(bfd_mach_o_read_thread): Properly bound check thread struct.
 	Don't repeat checks on second loop.
 	(bfd_mach_o_read_command): Fail on invalid command length.
 
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* format.c (bfd_check_format_matches): Add preserve_match.
 	Save initial bfd state in "preserve", matched bfd state in
 	"preserve_match".  Save just the first match.  Release
 	bfd_alloc memory.  Restore and finish preserved state as
 	appropriate on all function exit paths.
 
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* mmo.c (mmo_mkobject): Allocate tdata with bfd_zalloc.
 
 2020-01-04  Alan Modra  <amodra@gmail.com>
 
 	* coffgen.c (coff_real_object_p): Free malloc'd memory on target
 	match too.
 
 2020-01-03  Nick Clifton  <nickc@redhat.com>
 
 	PR 25307
 	(bfd_pef_parse_function_stubs): Correct the test that ensures that
 	there is enough data remaining in the code buffer before
 	attempting to read a function stub.
 
 2020-01-03  Nick Clifton  <nickc@redhat.com>
 
 	PR 25308
 	* elf-properties.c (_bfd_elf_convert_gnu_properties): Check the
 	return value from bfd_malloc.
 	* elf32-arm.c (bfd_elf32_arm_vfp11_fix_veneer_locations): Likewise.
 	(bfd_elf32_arm_stm32l4xx_fix_veneer_locations): Likewise.
 	(elf32_arm_filter_cmse_symbols): Likewise.
 	(elf32_arm_write_section): Likewise.
 	* mach-o.c (bfd_mach_o_core_fetch_environment): Likewise.
 	(bfd_mach_o_follow_dsym): Likewise.
 	* pef.c (bfd_pef_print_loader_section): Likewise.
 	(bfd_pef_scan_start_address): Likewise.
 	(bfd_pef_parse_function_stubs): Likewise.
 	(bfd_pef_parse_symbols): Likewise.
 
 2020-01-03  Sergei Trofimovich  <siarheit@google.com>
 
         * elfnn-ia64.c (elfNN_ia64_merge_private_bfd_data): don't fail
         on binary inputs ld/PR25316.
         (is_ia64_elf): new helper to filter on ia64 objects.
 
 2020-01-03  Jan Beulich  <jbeulich@suse.com>
 
 	* mach-o.c (cpusubtype, bfd_mach_o_header_p): Insert underscore
 	in parameter names.
 	(bfd_mach_o_scan): Insert underscore in two variable names.
 
 2020-01-02  Sergey Belyashov  <sergey.belyashov@gmail.com>
 
 	* Makefile.am: Add z80-elf target support.
 	* configure.ac: Likewise.
 	* targets.c: Likewise.
 	* Makefile.in: Regenerate.
 	* configure: Regenerate.
 	* config.bfd: Add z80-elf target support and new arches: ez80 and
 	z180.
 	* elf32-z80.c: New file.
 	* archures.c: Add new z80 architectures: eZ80 and Z180.
 	* coffcode.h: Likewise.
 	* cpu-z80.c: Likewise.
 	* coff-z80.c: Add new relocations for Z80 target and local label
 	check.
 	* reloc.c: Add new relocs.
 	* bfd-in2.h: Regenerate.
 	* libbfd.h: Regenerate.
 
 2020-01-02  Tamar Christina  <tamar.christina@arm.com>
 
 	PR 25210
 	PR 24753
 	* elfnn-aarch64.c (_bfd_aarch64_create_stub_section): Set ELF class.
 
 2020-01-01  Alan Modra  <amodra@gmail.com>
 
 	Update year range in copyright notice of all files.
diff --git a/bfd/vms-alpha.c b/bfd/vms-alpha.c
index 32f4e68bbba..586a157cb1b 100644
--- a/bfd/vms-alpha.c
+++ b/bfd/vms-alpha.c
@@ -467,45 +467,46 @@ static bfd_boolean
 _bfd_vms_slurp_eihd (bfd *abfd, unsigned int *eisd_offset,
 		     unsigned int *eihs_offset)
 {
   unsigned int imgtype, size;
   bfd_vma symvva;
   struct vms_eihd *eihd = (struct vms_eihd *)PRIV (recrd.rec);
 
   vms_debug2 ((8, "_bfd_vms_slurp_eihd\n"));
 
   /* PR 21813: Check for an undersized record.  */
   if (PRIV (recrd.buf_size) < sizeof (* eihd))
     {
       _bfd_error_handler (_("corrupt EIHD record - size is too small"));
       bfd_set_error (bfd_error_bad_value);
       return FALSE;
     }
 
   size = bfd_getl32 (eihd->size);
   imgtype = bfd_getl32 (eihd->imgtype);
 
   if (imgtype == EIHD__K_EXE || imgtype == EIHD__K_LIM)
     abfd->flags |= EXEC_P;
 
   symvva = bfd_getl64 (eihd->symvva);
   if (symvva != 0)
     {
       PRIV (symvva) = symvva;
       abfd->flags |= DYNAMIC;
     }
 
   PRIV (ident) = bfd_getl32 (eihd->ident);
   PRIV (matchctl) = eihd->matchctl;
 
   *eisd_offset = bfd_getl32 (eihd->isdoff);
   *eihs_offset = bfd_getl32 (eihd->symdbgoff);
 
   vms_debug2 ((4, "EIHD size %d imgtype %d symvva 0x%lx eisd %d eihs %d\n",
 	       size, imgtype, (unsigned long)symvva,
 	       *eisd_offset, *eihs_offset));
+  (void) size;
 
   return TRUE;
 }
 
 /* Read & process EISD record.
    Return TRUE on success, FALSE on error.  */
@@ -1592,30 +1593,31 @@ static bfd_boolean
 image_write (bfd *abfd, unsigned char *ptr, unsigned int size)
 {
 #if VMS_DEBUG
   _bfd_vms_debug (8, "image_write from (%p, %d) to (%ld)\n", ptr, size,
 		  (long)PRIV (image_offset));
-  _bfd_hexdump (9, ptr, size, 0);
 #endif
 
   if (PRIV (image_section)->contents != NULL)
     {
       asection *sec = PRIV (image_section);
-      file_ptr off = PRIV (image_offset);
+      size_t off = PRIV (image_offset);
 
       /* Check bounds.  */
-      if (off > (file_ptr)sec->size
-	  || size > (file_ptr)sec->size
-	  || off + size > (file_ptr)sec->size)
+      if (off > sec->size
+	  || size > sec->size - off)
 	{
 	  bfd_set_error (bfd_error_bad_value);
 	  return FALSE;
 	}
 
       memcpy (sec->contents + off, ptr, size);
     }
+#if VMS_DEBUG
+  _bfd_hexdump (9, ptr, size, 0);
+#endif
 
   PRIV (image_offset) += size;
   return TRUE;
 }
 
 /* Write byte to section image.  */
@@ -1859,643 +1861,643 @@ static bfd_boolean
 _bfd_vms_slurp_etir (bfd *abfd, struct bfd_link_info *info)
 {
   unsigned char *ptr;
   unsigned int length;
   unsigned char *maxptr;
-  bfd_vma op1;
-  bfd_vma op2;
-  unsigned int rel1;
-  unsigned int rel2;
+  bfd_vma op1 = 0;
+  bfd_vma op2 = 0;
+  unsigned int rel1 = RELC_NONE;
+  unsigned int rel2 = RELC_NONE;
   struct alpha_vms_link_hash_entry *h;
 
   PRIV (recrd.rec) += ETIR__C_HEADER_SIZE;
   PRIV (recrd.rec_size) -= ETIR__C_HEADER_SIZE;
 
   ptr = PRIV (recrd.rec);
   length = PRIV (recrd.rec_size);
   maxptr = ptr + length;
 
   vms_debug2 ((2, "ETIR: %d bytes\n", length));
 
   while (ptr < maxptr)
     {
       int cmd, cmd_length;
 
       if (ptr + 4 > maxptr)
 	goto corrupt_etir;
 
       cmd = bfd_getl16 (ptr);
       cmd_length = bfd_getl16 (ptr + 2);
 
       /* PR 21589 and 21579: Check for a corrupt ETIR record.  */
       if (cmd_length < 4 || ptr + cmd_length > maxptr)
 	{
 	corrupt_etir:
 	  _bfd_error_handler (_("corrupt ETIR record encountered"));
 	  bfd_set_error (bfd_error_bad_value);
 	  return FALSE;
 	}
       ptr += 4;
 
 #if VMS_DEBUG
       _bfd_vms_debug (4, "etir: %s(%d)\n",
 		      _bfd_vms_etir_name (cmd), cmd);
       _bfd_hexdump (8, ptr, cmd_length - 4, 0);
 #endif
 
       switch (cmd)
 	{
 	  /* Stack global
 	     arg: cs	symbol name
 
 	     stack 32 bit value of symbol (high bits set to 0).  */
 	case ETIR__C_STA_GBL:
 	  _bfd_vms_get_value (abfd, ptr, maxptr, info, &op1, &h);
 	  if (!_bfd_vms_push (abfd, op1, alpha_vms_sym_to_ctxt (h)))
 	    return FALSE;
 	  break;
 
 	  /* Stack longword
 	     arg: lw	value
 
 	     stack 32 bit value, sign extend to 64 bit.  */
 	case ETIR__C_STA_LW:
 	  if (ptr + 4 > maxptr)
 	    goto corrupt_etir;
 	  if (!_bfd_vms_push (abfd, bfd_getl32 (ptr), RELC_NONE))
 	    return FALSE;
 	  break;
 
 	  /* Stack quadword
 	     arg: qw	value
 
 	     stack 64 bit value of symbol.  */
 	case ETIR__C_STA_QW:
 	  if (ptr + 8 > maxptr)
 	    goto corrupt_etir;
 	  if (!_bfd_vms_push (abfd, bfd_getl64 (ptr), RELC_NONE))
 	    return FALSE;
 	  break;
 
 	  /* Stack psect base plus quadword offset
 	     arg: lw	section index
 	     qw	signed quadword offset (low 32 bits)
 
 	     Stack qw argument and section index
 	     (see ETIR__C_STO_OFF, ETIR__C_CTL_SETRB).  */
 	case ETIR__C_STA_PQ:
 	  {
 	    int psect;
 
 	    if (ptr + 12 > maxptr)
 	      goto corrupt_etir;
 	    psect = bfd_getl32 (ptr);
 	    if ((unsigned int) psect >= PRIV (section_count))
 	      {
 		_bfd_error_handler (_("bad section index in %s"),
 				    _bfd_vms_etir_name (cmd));
 		bfd_set_error (bfd_error_bad_value);
 		return FALSE;
 	      }
 	    op1 = bfd_getl64 (ptr + 4);
 	    if (!_bfd_vms_push (abfd, op1, psect | RELC_SEC_BASE))
 	      return FALSE;
 	  }
 	  break;
 
 	case ETIR__C_STA_LI:
 	case ETIR__C_STA_MOD:
 	case ETIR__C_STA_CKARG:
 	  _bfd_error_handler (_("unsupported STA cmd %s"),
 			      _bfd_vms_etir_name (cmd));
 	  return FALSE;
 	  break;
 
 	  /* Store byte: pop stack, write byte
 	     arg: -.  */
 	case ETIR__C_STO_B:
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1))
 	    return FALSE;
 	  if (rel1 != RELC_NONE)
 	    goto bad_context;
 	  image_write_b (abfd, (unsigned int) op1 & 0xff);
 	  break;
 
 	  /* Store word: pop stack, write word
 	     arg: -.  */
 	case ETIR__C_STO_W:
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1))
 	    return FALSE;
 	  if (rel1 != RELC_NONE)
 	    goto bad_context;
 	  image_write_w (abfd, (unsigned int) op1 & 0xffff);
 	  break;
 
 	  /* Store longword: pop stack, write longword
 	     arg: -.  */
 	case ETIR__C_STO_LW:
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1))
 	    return FALSE;
 	  if (rel1 & RELC_SEC_BASE)
 	    {
 	      op1 = alpha_vms_fix_sec_rel (abfd, info, rel1, op1);
 	      rel1 = RELC_REL;
 	    }
 	  else if (rel1 & RELC_SHR_BASE)
 	    {
 	      alpha_vms_add_fixup_lr (info, rel1 & RELC_MASK, op1);
 	      rel1 = RELC_NONE;
 	    }
 	  if (rel1 != RELC_NONE)
 	    {
 	      if (rel1 != RELC_REL)
 		abort ();
 	      alpha_vms_add_lw_reloc (info);
 	    }
 	  image_write_l (abfd, op1);
 	  break;
 
 	  /* Store quadword: pop stack, write quadword
 	     arg: -.  */
 	case ETIR__C_STO_QW:
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1))
 	    return FALSE;
 	  if (rel1 & RELC_SEC_BASE)
 	    {
 	      op1 = alpha_vms_fix_sec_rel (abfd, info, rel1, op1);
 	      rel1 = RELC_REL;
 	    }
 	  else if (rel1 & RELC_SHR_BASE)
 	    abort ();
 	  if (rel1 != RELC_NONE)
 	    {
 	      if (rel1 != RELC_REL)
 		abort ();
 	      alpha_vms_add_qw_reloc (info);
 	    }
 	  image_write_q (abfd, op1);
 	  break;
 
 	  /* Store immediate repeated: pop stack for repeat count
 	     arg: lw	byte count
 	     da	data.  */
 	case ETIR__C_STO_IMMR:
 	  {
 	    int size;
 
 	    if (ptr + 4 > maxptr)
 	      goto corrupt_etir;
 	    size = bfd_getl32 (ptr);
 	    if (!_bfd_vms_pop (abfd, &op1, &rel1))
 	      return FALSE;
 	    if (rel1 != RELC_NONE)
 	      goto bad_context;
 	    while (op1-- > 0)
 	      image_write (abfd, ptr + 4, size);
 	  }
 	  break;
 
 	  /* Store global: write symbol value
 	     arg: cs	global symbol name.  */
 	case ETIR__C_STO_GBL:
 	  _bfd_vms_get_value (abfd, ptr, maxptr, info, &op1, &h);
 	  if (h && h->sym)
 	    {
 	      if (h->sym->typ == EGSD__C_SYMG)
 		{
 		  alpha_vms_add_fixup_qr
 		    (info, abfd, h->sym->owner, h->sym->symbol_vector);
 		  op1 = 0;
 		}
 	      else
 		{
 		  op1 = alpha_vms_get_sym_value (h->sym->section,
 						 h->sym->value);
 		  alpha_vms_add_qw_reloc (info);
 		}
 	    }
 	  image_write_q (abfd, op1);
 	  break;
 
 	  /* Store code address: write address of entry point
 	     arg: cs	global symbol name (procedure).  */
 	case ETIR__C_STO_CA:
 	  _bfd_vms_get_value (abfd, ptr, maxptr, info, &op1, &h);
 	  if (h && h->sym)
 	    {
 	      if (h->sym->flags & EGSY__V_NORM)
 		{
 		  /* That's really a procedure.  */
 		  if (h->sym->typ == EGSD__C_SYMG)
 		    {
 		      alpha_vms_add_fixup_ca (info, abfd, h->sym->owner);
 		      op1 = h->sym->symbol_vector;
 		    }
 		  else
 		    {
 		      op1 = alpha_vms_get_sym_value (h->sym->code_section,
 						     h->sym->code_value);
 		      alpha_vms_add_qw_reloc (info);
 		    }
 		}
 	      else
 		{
 		  /* Symbol is not a procedure.  */
 		  abort ();
 		}
 	    }
 	  image_write_q (abfd, op1);
 	  break;
 
 	  /* Store offset to psect: pop stack, add low 32 bits to base of psect
 	     arg: none.  */
 	case ETIR__C_STO_OFF:
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1))
 	    return FALSE;
 
 	  if (!(rel1 & RELC_SEC_BASE))
 	    abort ();
 
 	  op1 = alpha_vms_fix_sec_rel (abfd, info, rel1, op1);
 	  rel1 = RELC_REL;
 	  image_write_q (abfd, op1);
 	  break;
 
 	  /* Store immediate
 	     arg: lw	count of bytes
 	     da	data.  */
 	case ETIR__C_STO_IMM:
 	  {
 	    unsigned int size;
 
 	    if (ptr + 4 > maxptr)
 	      goto corrupt_etir;
 	    size = bfd_getl32 (ptr);
 	    image_write (abfd, ptr + 4, size);
 	  }
 	  break;
 
 	  /* This code is 'reserved to digital' according to the openVMS
 	     linker manual, however it is generated by the DEC C compiler
 	     and defined in the include file.
 	     FIXME, since the following is just a guess
 	     store global longword: store 32bit value of symbol
 	     arg: cs	symbol name.  */
 	case ETIR__C_STO_GBL_LW:
 	  _bfd_vms_get_value (abfd, ptr, maxptr, info, &op1, &h);
 #if 0
 	  abort ();
 #endif
 	  image_write_l (abfd, op1);
 	  break;
 
 	case ETIR__C_STO_RB:
 	case ETIR__C_STO_AB:
 	case ETIR__C_STO_LP_PSB:
 	  _bfd_error_handler (_("%s: not supported"),
 			      _bfd_vms_etir_name (cmd));
 	  return FALSE;
 	  break;
 	case ETIR__C_STO_HINT_GBL:
 	case ETIR__C_STO_HINT_PS:
 	  _bfd_error_handler (_("%s: not implemented"),
 			      _bfd_vms_etir_name (cmd));
 	  return FALSE;
 	  break;
 
 	  /* 200 Store-conditional Linkage Pair
 	     arg: none.  */
 	case ETIR__C_STC_LP:
 
 	  /* 202 Store-conditional Address at global address
 	     lw	linkage index
 	     cs	global name.  */
 
 	case ETIR__C_STC_GBL:
 
 	  /* 203 Store-conditional Code Address at global address
 	     lw	linkage index
 	     cs	procedure name.  */
 	case ETIR__C_STC_GCA:
 
 	  /* 204 Store-conditional Address at psect + offset
 	     lw	linkage index
 	     lw	psect index
 	     qw	offset.  */
 	case ETIR__C_STC_PS:
 	  _bfd_error_handler (_("%s: not supported"),
 			      _bfd_vms_etir_name (cmd));
 	  return FALSE;
 	  break;
 
 	  /* 201 Store-conditional Linkage Pair with Procedure Signature
 	     lw	linkage index
 	     cs	procedure name
 	     by	signature length
 	     da	signature.  */
 
 	case ETIR__C_STC_LP_PSB:
 	  _bfd_vms_get_value (abfd, ptr + 4, maxptr, info, &op1, &h);
 	  if (h && h->sym)
 	    {
 	      if (h->sym->typ == EGSD__C_SYMG)
 		{
 		  alpha_vms_add_fixup_lp (info, abfd, h->sym->owner);
 		  op1 = h->sym->symbol_vector;
 		  op2 = 0;
 		}
 	      else
 		{
 		  op1 = alpha_vms_get_sym_value (h->sym->code_section,
 						 h->sym->code_value);
 		  op2 = alpha_vms_get_sym_value (h->sym->section,
 						h->sym->value);
 		}
 	    }
 	  else
 	    {
 	      /* Undefined symbol.  */
 	      op1 = 0;
 	      op2 = 0;
 	    }
 	  image_write_q (abfd, op1);
 	  image_write_q (abfd, op2);
 	  break;
 
 	  /* 205 Store-conditional NOP at address of global
 	     arg: none.  */
 	case ETIR__C_STC_NOP_GBL:
 	  /* ALPHA_R_NOP */
 
 	  /* 207 Store-conditional BSR at global address
 	     arg: none.  */
 
 	case ETIR__C_STC_BSR_GBL:
 	  /* ALPHA_R_BSR */
 
 	  /* 209 Store-conditional LDA at global address
 	     arg: none.  */
 
 	case ETIR__C_STC_LDA_GBL:
 	  /* ALPHA_R_LDA */
 
 	  /* 211 Store-conditional BSR or Hint at global address
 	     arg: none.  */
 
 	case ETIR__C_STC_BOH_GBL:
 	  /* Currentl ignored.  */
 	  break;
 
 	  /* 213 Store-conditional NOP,BSR or HINT at global address
 	     arg: none.  */
 
 	case ETIR__C_STC_NBH_GBL:
 
 	  /* 206 Store-conditional NOP at pect + offset
 	     arg: none.  */
 
 	case ETIR__C_STC_NOP_PS:
 
 	  /* 208 Store-conditional BSR at pect + offset
 	     arg: none.  */
 
 	case ETIR__C_STC_BSR_PS:
 
 	  /* 210 Store-conditional LDA at psect + offset
 	     arg: none.  */
 
 	case ETIR__C_STC_LDA_PS:
 
 	  /* 212 Store-conditional BSR or Hint at pect + offset
 	     arg: none.  */
 
 	case ETIR__C_STC_BOH_PS:
 
 	  /* 214 Store-conditional NOP, BSR or HINT at psect + offset
 	     arg: none.  */
 	case ETIR__C_STC_NBH_PS:
 	  _bfd_error_handler (_("%s: not supported"),
 			      _bfd_vms_etir_name (cmd));
 	  return FALSE;
 	  break;
 
 	  /* Det relocation base: pop stack, set image location counter
 	     arg: none.  */
 	case ETIR__C_CTL_SETRB:
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1))
 	    return FALSE;
 	  if (!(rel1 & RELC_SEC_BASE))
 	    abort ();
 	  image_set_ptr (abfd, op1, rel1 & RELC_MASK, info);
 	  break;
 
 	  /* Augment relocation base: increment image location counter by offset
 	     arg: lw	offset value.  */
 	case ETIR__C_CTL_AUGRB:
 	  if (ptr + 4 > maxptr)
 	    goto corrupt_etir;
 	  op1 = bfd_getl32 (ptr);
 	  image_inc_ptr (abfd, op1);
 	  break;
 
 	  /* Define location: pop index, save location counter under index
 	     arg: none.  */
 	case ETIR__C_CTL_DFLOC:
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1))
 	    return FALSE;
 	  if (rel1 != RELC_NONE)
 	    goto bad_context;
 	  dst_define_location (abfd, op1);
 	  break;
 
 	  /* Set location: pop index, restore location counter from index
 	     arg: none.  */
 	case ETIR__C_CTL_STLOC:
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1))
 	    return FALSE;
 	  if (rel1 != RELC_NONE)
 	    goto bad_context;
 	  dst_restore_location (abfd, op1);
 	  break;
 
 	  /* Stack defined location: pop index, push location counter from index
 	     arg: none.  */
 	case ETIR__C_CTL_STKDL:
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1))
 	    return FALSE;
 	  if (rel1 != RELC_NONE)
 	    goto bad_context;
 	  if (!_bfd_vms_push (abfd, dst_retrieve_location (abfd, op1),
 			      RELC_NONE))
 	    return FALSE;
 	  break;
 
 	case ETIR__C_OPR_NOP:      /* No-op.  */
 	  break;
 
 	case ETIR__C_OPR_ADD:      /* Add.  */
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1)
 	      || !_bfd_vms_pop (abfd, &op2, &rel2))
 	    return FALSE;
 	  if (rel1 == RELC_NONE && rel2 != RELC_NONE)
 	    rel1 = rel2;
 	  else if (rel1 != RELC_NONE && rel2 != RELC_NONE)
 	    goto bad_context;
 	  if (!_bfd_vms_push (abfd, op1 + op2, rel1))
 	    return FALSE;
 	  break;
 
 	case ETIR__C_OPR_SUB:      /* Subtract.  */
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1)
 	      || !_bfd_vms_pop (abfd, &op2, &rel2))
 	    return FALSE;
 	  if (rel1 == RELC_NONE && rel2 != RELC_NONE)
 	    rel1 = rel2;
 	  else if ((rel1 & RELC_SEC_BASE) && (rel2 & RELC_SEC_BASE))
 	    {
 	      op1 = alpha_vms_fix_sec_rel (abfd, info, rel1, op1);
 	      op2 = alpha_vms_fix_sec_rel (abfd, info, rel2, op2);
 	      rel1 = RELC_NONE;
 	    }
 	  else if (rel1 != RELC_NONE && rel2 != RELC_NONE)
 	    goto bad_context;
 	  if (!_bfd_vms_push (abfd, op2 - op1, rel1))
 	    return FALSE;
 	  break;
 
 	case ETIR__C_OPR_MUL:      /* Multiply.  */
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1)
 	      || !_bfd_vms_pop (abfd, &op2, &rel2))
 	    return FALSE;
 	  if (rel1 != RELC_NONE || rel2 != RELC_NONE)
 	    goto bad_context;
 	  if (!_bfd_vms_push (abfd, op1 * op2, RELC_NONE))
 	    return FALSE;
 	  break;
 
 	case ETIR__C_OPR_DIV:      /* Divide.  */
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1)
 	      || !_bfd_vms_pop (abfd, &op2, &rel2))
 	    return FALSE;
 	  if (rel1 != RELC_NONE || rel2 != RELC_NONE)
 	    goto bad_context;
 	  if (op2 == 0)
 	    {
 	      if (!_bfd_vms_push (abfd, 0, RELC_NONE))
 		return FALSE;
 	    }
 	  else
 	    {
 	      if (!_bfd_vms_push (abfd, op2 / op1, RELC_NONE))
 		return FALSE;
 	    }
 	  break;
 
 	case ETIR__C_OPR_AND:      /* Logical AND.  */
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1)
 	      || !_bfd_vms_pop (abfd, &op2, &rel2))
 	    return FALSE;
 	  if (rel1 != RELC_NONE || rel2 != RELC_NONE)
 	    goto bad_context;
 	  if (!_bfd_vms_push (abfd, op1 & op2, RELC_NONE))
 	    return FALSE;
 	  break;
 
 	case ETIR__C_OPR_IOR:      /* Logical inclusive OR.  */
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1)
 	      || !_bfd_vms_pop (abfd, &op2, &rel2))
 	    return FALSE;
 	  if (rel1 != RELC_NONE || rel2 != RELC_NONE)
 	    goto bad_context;
 	  if (!_bfd_vms_push (abfd, op1 | op2, RELC_NONE))
 	    return FALSE;
 	  break;
 
 	case ETIR__C_OPR_EOR:      /* Logical exclusive OR.  */
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1)
 	      || !_bfd_vms_pop (abfd, &op2, &rel2))
 	    return FALSE;
 	  if (rel1 != RELC_NONE || rel2 != RELC_NONE)
 	    goto bad_context;
 	  if (!_bfd_vms_push (abfd, op1 ^ op2, RELC_NONE))
 	    return FALSE;
 	  break;
 
 	case ETIR__C_OPR_NEG:      /* Negate.  */
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1))
 	    return FALSE;
 	  if (rel1 != RELC_NONE)
 	    goto bad_context;
 	  if (!_bfd_vms_push (abfd, -op1, RELC_NONE))
 	    return FALSE;
 	  break;
 
 	case ETIR__C_OPR_COM:      /* Complement.  */
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1))
 	    return FALSE;
 	  if (rel1 != RELC_NONE)
 	    goto bad_context;
 	  if (!_bfd_vms_push (abfd, ~op1, RELC_NONE))
 	    return FALSE;
 	  break;
 
 	case ETIR__C_OPR_ASH:      /* Arithmetic shift.  */
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1)
 	      || !_bfd_vms_pop (abfd, &op2, &rel2))
 	    return FALSE;
 	  if (rel1 != RELC_NONE || rel2 != RELC_NONE)
 	    {
 	    bad_context:
 	      _bfd_error_handler (_("invalid use of %s with contexts"),
 				  _bfd_vms_etir_name (cmd));
 	      return FALSE;
 	    }
 	  if ((int)op2 < 0)		/* Shift right.  */
 	    op1 >>= -(int)op2;
 	  else			/* Shift left.  */
 	    op1 <<= (int)op2;
 	  if (!_bfd_vms_push (abfd, op1, RELC_NONE)) /* FIXME: sym.  */
 	    return FALSE;
 	  break;
 
 	case ETIR__C_OPR_INSV:      /* Insert field.   */
 	case ETIR__C_OPR_USH:       /* Unsigned shift.   */
 	case ETIR__C_OPR_ROT:       /* Rotate.  */
 	case ETIR__C_OPR_REDEF:     /* Redefine symbol to current location.  */
 	case ETIR__C_OPR_DFLIT:     /* Define a literal.  */
 	  _bfd_error_handler (_("%s: not supported"),
 			      _bfd_vms_etir_name (cmd));
 	  return FALSE;
 	  break;
 
 	case ETIR__C_OPR_SEL:      /* Select.  */
 	  if (!_bfd_vms_pop (abfd, &op1, &rel1))
 	    return FALSE;
 	  if (op1 & 0x01L)
 	    {
 	      if (!_bfd_vms_pop (abfd, &op1, &rel1))
 		return FALSE;
 	    }
 	  else
 	    {
 	      if (!_bfd_vms_pop (abfd, &op1, &rel1)
 		  || !_bfd_vms_pop (abfd, &op2, &rel2))
 		return FALSE;
 	      if (!_bfd_vms_push (abfd, op1, rel1))
 		return FALSE;
 	    }
 	  break;
 
 	default:
 	  _bfd_error_handler (_("reserved cmd %d"), cmd);
 	  return FALSE;
 	  break;
 	}
 
       ptr += cmd_length - 4;
     }
 
   return TRUE;
 }
 
 /* Process EDBG/ETBT record.
    Return TRUE on success, FALSE on error  */
diff --git a/bfd/vms.h b/bfd/vms.h
index 2a4fb7e3fe2..88cf83e4820 100644
--- a/bfd/vms.h
+++ b/bfd/vms.h
@@ -91,14 +91,14 @@ struct vms_rec_wr
 struct evax_private_udata_struct
 {
   asymbol *bsym;
   asymbol *enbsym;
   char *origname;
   int lkindex;
 };
 
 /* vms-misc.c.  */
 
-#define VMS_DEBUG 1
+#define VMS_DEBUG 0
 
 #if VMS_DEBUG
 extern void _bfd_vms_debug (int, char *, ...) ATTRIBUTE_PRINTF_2;
