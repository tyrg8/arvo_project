commit 6c44dd11d551ffad1f0d9d3f8cbb065f202c844c
Author: Yann Ylavic <ylavic@apache.org>
Date:   Fri Nov 12 21:47:09 2021 +0000

    apreq: Sync r1894983 from libapreq.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/httpd/httpd/trunk@1894986 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/server/apreq_parser_multipart.c b/server/apreq_parser_multipart.c
index 4242b7e9eb..e4c4d71b91 100644
--- a/server/apreq_parser_multipart.c
+++ b/server/apreq_parser_multipart.c
@@ -213,48 +213,55 @@ static
 struct mfd_ctx * create_multipart_context(const char *content_type,
                                           apr_pool_t *pool,
                                           apr_bucket_alloc_t *ba,
                                           apr_size_t brigade_limit,
                                           const char *temp_dir,
                                           unsigned level)
 
 {
     apr_status_t s;
     apr_size_t blen;
-    struct mfd_ctx *ctx = apr_palloc(pool, sizeof *ctx);
-    char *ct = apr_pstrdup(pool, content_type);
+    struct mfd_ctx *ctx;
+    const char *attr;
+    char *buf;
 
-    ct = strchr(ct, ';');
-    if (ct == NULL)
+    attr = (content_type) ? strchr(content_type, ';') : NULL;
+    if (!attr)
         return NULL; /* missing semicolon */
 
-    *ct++ = 0;
-    s = apreq_header_attribute(ct, "boundary", 8,
-                               (const char **)&ctx->bdry, &blen);
+    ctx = apr_palloc(pool, sizeof *ctx);
+
+    attr++;
+    blen = strlen(attr) + 1;
+    buf = apr_palloc(pool, 4 + blen);
+    buf += 4;
+    memcpy(buf, attr, blen);
 
+    s = apreq_header_attribute(buf, "boundary", 8,
+                               (const char **)&ctx->bdry, &blen);
     if (s != APR_SUCCESS)
         return NULL; /* missing boundary */
 
     ctx->bdry[blen] = 0;
 
     *--ctx->bdry = '-';
     *--ctx->bdry = '-';
     *--ctx->bdry = '\n';
     *--ctx->bdry = '\r';
 
     ctx->status = MFD_INIT;
     ctx->pattern = apr_strmatch_precompile(pool, ctx->bdry, 1);
     ctx->hdr_parser = apreq_parser_make(pool, ba, "",
                                         apreq_parse_headers,
                                         brigade_limit,
                                         temp_dir, NULL, NULL);
     ctx->info = NULL;
     ctx->bb = apr_brigade_create(pool, ba);
     ctx->in = apr_brigade_create(pool, ba);
     ctx->eos = apr_bucket_eos_create(ba);
     ctx->next_parser = NULL;
     ctx->param_name = NULL;
     ctx->upload = NULL;
     ctx->level = level;
 
     return ctx;
 }
