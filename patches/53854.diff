commit f4f7c4bfb09aacf9eb3478e2543ac73b28747415
Author: Alex <aleksandrosansan@gmail.com>
Date:   Mon Dec 12 09:38:46 2022 +0200

    Fixes Heap buffer overflow (read) in IgmpLayer::getIGMPVerFromData (#1011)

diff --git a/Packet++/src/IPv4Layer.cpp b/Packet++/src/IPv4Layer.cpp
index 04134f98..58e13c05 100644
--- a/Packet++/src/IPv4Layer.cpp
+++ b/Packet++/src/IPv4Layer.cpp
@@ -239,94 +239,95 @@ IPv4Layer& IPv4Layer::operator=(const IPv4Layer& other)
 void IPv4Layer::parseNextLayer()
 {
 	size_t hdrLen = getHeaderLen();
 	if (m_DataLen <= hdrLen || hdrLen == 0)
 		return;
 
 	iphdr* ipHdr = getIPv4Header();
 
 	ProtocolType greVer = UnknownProtocol;
 	ProtocolType igmpVer = UnknownProtocol;
 	bool igmpQuery = false;
 
 	uint8_t ipVersion = 0;
 
 	uint8_t* payload = m_Data + hdrLen;
 	size_t payloadLen = m_DataLen - hdrLen;
 
 	// If it's a fragment don't parse upper layers, unless if it's the first fragment
 	// TODO: assuming first fragment contains at least L4 header, what if it's not true?
 	if (isFragment())
 	{
 		m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 		return;
 	}
 
 	switch (ipHdr->protocol)
 	{
 	case PACKETPP_IPPROTO_UDP:
 		if (payloadLen >= sizeof(udphdr))
 			m_NextLayer = new UdpLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PACKETPP_IPPROTO_TCP:
 		m_NextLayer = TcpLayer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new TcpLayer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PACKETPP_IPPROTO_ICMP:
 		m_NextLayer = IcmpLayer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new IcmpLayer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PACKETPP_IPPROTO_IPIP:
 		ipVersion = *payload >> 4;
 		if (ipVersion == 4 && IPv4Layer::isDataValid(payload, payloadLen))
 			m_NextLayer = new IPv4Layer(payload, payloadLen, this, m_Packet);
 		else if (ipVersion == 6 && IPv6Layer::isDataValid(payload, payloadLen))
 			m_NextLayer = new IPv6Layer(payload, payloadLen, this, m_Packet);
 		else
 			m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PACKETPP_IPPROTO_GRE:
 		greVer = GreLayer::getGREVersion(payload, payloadLen);
 		if (greVer == GREv0)
 			m_NextLayer = new GREv0Layer(payload, payloadLen, this, m_Packet);
 		else if (greVer == GREv1)
 			m_NextLayer = new GREv1Layer(payload, payloadLen, this, m_Packet);
 		else
 			m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PACKETPP_IPPROTO_IGMP:
-		igmpVer = IgmpLayer::getIGMPVerFromData(payload, be16toh(getIPv4Header()->totalLength) - hdrLen, igmpQuery);
+		igmpVer = IgmpLayer::getIGMPVerFromData(
+			payload, std::min<size_t>(payloadLen, be16toh(getIPv4Header()->totalLength) - hdrLen), igmpQuery);
 		if (igmpVer == IGMPv1)
 			m_NextLayer = new IgmpV1Layer(payload, payloadLen, this, m_Packet);
 		else if (igmpVer == IGMPv2)
 			m_NextLayer = new IgmpV2Layer(payload, payloadLen, this, m_Packet);
 		else if (igmpVer == IGMPv3)
 		{
 			if (igmpQuery)
 				m_NextLayer = new IgmpV3QueryLayer(payload, payloadLen, this, m_Packet);
 			else
 				m_NextLayer = new IgmpV3ReportLayer(payload, payloadLen, this, m_Packet);
 		}
 		else
 			m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 		break;
 	case PACKETPP_IPPROTO_AH:
 		m_NextLayer = AuthenticationHeaderLayer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new AuthenticationHeaderLayer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PACKETPP_IPPROTO_ESP:
 		m_NextLayer = ESPLayer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new ESPLayer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PACKETPP_IPPROTO_IPV6:
 		m_NextLayer = IPv6Layer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new IPv6Layer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	default:
 		m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 	}
 }
diff --git a/Tests/Fuzzers/RegressionTests/regression_samples/igmplayer b/Tests/Fuzzers/RegressionTests/regression_samples/igmplayer
new file mode 100644
index 00000000..f9f5e663
Binary files /dev/null and b/Tests/Fuzzers/RegressionTests/regression_samples/igmplayer differ
