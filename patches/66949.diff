commit a1e790234693ab00049fb1002c0ee11c865d7328
Author: Aurelien David <aurelien.david@telecom-paristech.fr>
Date:   Fri Feb 23 15:58:19 2024 +0100

    check nal_size overflow
    
    ossfuzz 66949

diff --git a/src/filters/inspect.c b/src/filters/inspect.c
index a968f654b..8304d6da8 100644
--- a/src/filters/inspect.c
+++ b/src/filters/inspect.c
@@ -726,53 +726,53 @@ static void dump_avc_pic_timing(FILE *dump, GF_BitStream *bs, AVCState *avc)
 static void dump_sei(FILE *dump, GF_BitStream *bs, AVCState *avc, HEVCState *hevc, VVCState *vvc)
 {
 	gf_bs_enable_emulation_byte_removal(bs, GF_TRUE);
 
 	//skip nal header
 	gf_bs_read_int(bs, avc ? 8 : 16);
 
 	while (gf_bs_available(bs) ) {
 		u32 sei_type = 0;
 		u32 sei_size = 0;
 		u32 sei_pos;
 		while (gf_bs_peek_bits(bs, 8, 0) == 0xFF) {
 			sei_type += 255;
 			gf_bs_read_int(bs, 8);
 		}
 		sei_type += gf_bs_read_int(bs, 8);
 		while (gf_bs_peek_bits(bs, 8, 0) == 0xFF) {
 			sei_size += 255;
 			gf_bs_read_int(bs, 8);
 		}
 		sei_size += gf_bs_read_int(bs, 8);
 		sei_pos = (u32) gf_bs_get_position(bs);
 
 		inspect_printf(dump, "    <SEIMessage ptype=\"%u\" psize=\"%u\" type=\"%s\"", sei_type, sei_size, get_sei_name(sei_type) );
 		if (sei_type == 144) {
 			dump_clli(dump, bs);
 		} else if (sei_type == 137) {
 			dump_mdcv(dump, bs, GF_TRUE);
 		} else if (sei_type == 1 && avc) {
 			dump_avc_pic_timing(dump, bs, avc);
 		} else if (sei_type == 136) {
 			dump_time_code_hevc(dump, bs);
 		} else if (sei_type == 4) {
 			dump_t35(dump, bs, sei_size);
 		}
 		else if (avc && (sei_type==6)) {
 			u32 frame_cnt = gf_bs_read_ue(bs);
 			inspect_printf(dump, " frame_count=\"%u\"", frame_cnt);
 		}
 		inspect_printf(dump, "/>\n");
 
 		//don't trust sei parsers, force jumping to next - use byte-per-byte read for EPB removal
 		gf_bs_seek(bs, sei_pos);
-		while (sei_size) {
+		while (sei_size && gf_bs_available(bs)) {
 			gf_bs_read_u8(bs);
 			sei_size--;
 		}
 
 		if (gf_bs_peek_bits(bs, 8, 0) == 0x80) {
 			break;
 		}
 	}
 }
@@ -2191,227 +2191,227 @@ static void gf_inspect_dump_truehd_frame(FILE *dump, GF_BitStream *bs)
 static void inspect_dump_property(GF_InspectCtx *ctx, FILE *dump, u32 p4cc, const char *pname, const GF_PropertyValue *att, PidCtx *pctx)
 {
 	char szDump[GF_PROP_DUMP_ARG_SIZE];
 
 	if (!pname)
 		pname = gf_props_4cc_get_name(p4cc);
 	else {
 		//all properties starting with __ are not dumped
 		if (!strncmp(pname, "__", 2))
 			return;
 		if (!strcmp(pname, "isom_force_ctts") || !strcmp(pname, "reframer_rem_edits") )
 			return;
 	}
 
 	switch (p4cc) {
 	case GF_PROP_PID_DOWNLOAD_SESSION:
 	case GF_PROP_PID_MUX_INDEX:
 	case GF_PROP_PCK_END_RANGE:
 		return;
 	case GF_PROP_PCK_SENDER_NTP:
 	case GF_PROP_PCK_RECEIVER_NTP:
 	case GF_PROP_PCK_UTC_TIME:
 	case GF_PROP_PCK_MEDIA_TIME:
 	case GF_PROP_PID_CENC_HAS_ROLL:
 	case GF_PROP_PID_DSI_SUPERSET:
 	case GF_PROP_PID_PREMUX_STREAM_TYPE:
 		if (gf_sys_is_test_mode())
 			return;
 		break;
 	}
 
 	if ((att->type==GF_PROP_DATA) && (ctx->analyze || ctx->xml)) {
 #ifndef GPAC_DISABLE_AV_PARSERS
 		if (p4cc==GF_PROP_PID_CONTENT_LIGHT_LEVEL) {
 			GF_BitStream *bs = gf_bs_new(att->value.data.ptr, att->value.data.size, GF_BITSTREAM_READ);
 			dump_clli(dump, bs);
 			gf_bs_del(bs);
 			return;
 		}
 		else if (p4cc==GF_PROP_PID_MASTER_DISPLAY_COLOUR) {
 			GF_BitStream *bs = gf_bs_new(att->value.data.ptr, att->value.data.size, GF_BITSTREAM_READ);
 			//mdcv property is always in MPEG units
 			dump_mdcv(dump, bs, GF_TRUE);
 			gf_bs_del(bs);
 			return;
 		}
 #endif /*GPAC_DISABLE_AV_PARSERS*/
 	}
 
 
 	if (p4cc==GF_PROP_PID_CENC_KEY_INFO) {
 		u32 i, nb_keys, kpos;
 		u8 *data;
 		if (ctx->xml) {
 			if (ctx->dtype)
 				inspect_printf(dump, " type=\"%s\"", gf_props_get_type_name(att->type) );
 			inspect_printf(dump, " %s=\"", pname);
 		} else {
 			if (ctx->dtype) {
 				inspect_printf(dump, "\t%s (%s): ", pname, gf_props_get_type_name(att->type));
 			} else {
 				inspect_printf(dump, "\t%s: ", pname);
 			}
 		}
 		data = att->value.data.ptr;
 		nb_keys = 1;
 		if (data[0]) {
 			nb_keys = data[1];
 			nb_keys <<= 8;
 			nb_keys |= data[2];
 		}
 		if (nb_keys>1) inspect_printf(dump, "[");
 		kpos = 3;
 		for (i=0; i<nb_keys; i++) {
 			u32 j;
 			bin128 KID;
 			u8 iv_size = data[kpos];
 			memcpy(KID, data+kpos+1, 16);
 			inspect_printf(dump, "IV_size:%d,KID:0x", iv_size);
 			for (j=0; j<16; j++) {
 				inspect_printf(dump, "%02X", (unsigned char) data[kpos + 1 + j]);
 			}
 			kpos+=17;
 			if (!iv_size) {
 				iv_size = data[kpos];
 				inspect_printf(dump, ",const_IV_size:%d", iv_size);
 				if (iv_size) {
 					inspect_printf(dump, ",const_IV:0x");
 					for (j=0; j<iv_size; j++) {
 						inspect_printf(dump, "%02X", (unsigned char) data[kpos + 1 + j]);
 					}
 				}
 				kpos += iv_size+1;
 			}
 		}
 
 		if (nb_keys>1) inspect_printf(dump, "]");
 		if (ctx->xml) {
 			inspect_printf(dump, "\"");
 		} else {
 			inspect_printf(dump, "\n");
 		}
 
 		return;
 	}
 
 	if (gf_sys_is_test_mode() || ctx->test) {
 		switch (p4cc) {
 		case GF_PROP_PID_FILEPATH:
 		case GF_PROP_PID_URL:
 		case GF_PROP_PID_MUX_SRC:
 			return;
 		case GF_PROP_PID_FILE_CACHED:
 		case GF_PROP_PID_DURATION:
 			if ((ctx->test==INSPECT_TEST_NETWORK) || (ctx->test==INSPECT_TEST_NETX))
 				return;
 			break;
 		case GF_PROP_PID_DECODER_CONFIG:
 		case GF_PROP_PID_DECODER_CONFIG_ENHANCEMENT:
 		case GF_PROP_PID_DOWN_SIZE:
 			if (ctx->test>=INSPECT_TEST_ENCODE)
 				return;
 			break;
 		case GF_PROP_PID_BITRATE:
 			if (ctx->test==INSPECT_TEST_NOBR)
 				return;
 		case GF_PROP_PID_MEDIA_DATA_SIZE:
 		case GF_PROP_PID_MAXRATE:
 		case GF_PROP_PID_AVG_FRAME_SIZE:
 		case GF_PROP_PID_MAX_FRAME_SIZE:
 		case GF_PROP_PID_DBSIZE:
 			if (ctx->test==INSPECT_TEST_ENCX)
 				return;
 			break;
 
 		case GF_PROP_PID_ISOM_TRACK_TEMPLATE:
 		case GF_PROP_PID_ISOM_MOVIE_TIME:
 			if (ctx->test==INSPECT_TEST_NETX)
 				return;
 			break;
 
 		case GF_PROP_PID_ISOM_TREX_TEMPLATE:
 		case GF_PROP_PID_ISOM_STSD_TEMPLATE:
 		case GF_PROP_PID_ISOM_STSD_TEMPLATE_IDX:
 		case GF_PROP_PID_ISOM_STSD_ALL_TEMPLATES:
 			//TODO once all OK: remove this test and regenerate all hashes
 			if (gf_sys_is_test_mode())
 				return;
 		default:
 			if (gf_sys_is_test_mode() && (att->type==GF_PROP_POINTER) )
 				return;
 			break;
 		}
 	}
 
 	if (ctx->xml) {
 		if (ctx->dtype)
 			inspect_printf(dump, " type=\"%s\"", gf_props_get_type_name(att->type) );
-			
-		if (pname && (strpbrk(pname, " :"))) { 
+
+		if (pname && (strpbrk(pname, " :"))) {
 			u32 i=0, k;
 			char *pname_no_space = gf_strdup(pname);
 			while (pname_no_space[i]) {
 				if ((pname_no_space[i]==' ') || (pname_no_space[i]==':')) pname_no_space[i]='_';
 				i++;
 			}
 
 			if ((att->type==GF_PROP_UINT_LIST) || (att->type==GF_PROP_4CC_LIST)) {
 				for (k=0; k < att->value.uint_list.nb_items; k++) {
 					if (k) inspect_printf(dump, ", ");
 					if ((att->type==GF_PROP_4CC_LIST) && ! gf_sys_is_test_mode()) {
 						inspect_printf(dump, "%s", gf_4cc_to_str(att->value.uint_list.vals[k]) );
 					} else {
 						inspect_printf(dump, "%d", att->value.uint_list.vals[k]);
 					}
 				}
 			} else if (att->type==GF_PROP_STRING_LIST) {
 				for (k=0; k < att->value.string_list.nb_items; k++) {
 					if (k) inspect_printf(dump, ", ");
 					gf_xml_dump_string(dump, NULL, (char *) att->value.string_list.vals[k], NULL);
 				}
 			} else if ((att->type==GF_PROP_STRING) || (att->type==GF_PROP_STRING_NO_COPY)) {
 				gf_xml_dump_string(dump, NULL, att->value.string, NULL);
 			} else {
 				inspect_printf(dump, " %s=\"%s\"", pname_no_space, gf_props_dump(p4cc, att, szDump, (GF_PropDumpDataMode) ctx->dump_data));
 			}
 			gf_free(pname_no_space);
 		} else {
 			inspect_printf(dump, " %s=\"%s\"", pname ? pname : gf_4cc_to_str(p4cc), gf_props_dump(p4cc, att, szDump, (GF_PropDumpDataMode) ctx->dump_data));
 		}
 	} else {
 		if (ctx->dtype) {
 			inspect_printf(dump, "\t%s (%s): ", pname ? pname : gf_4cc_to_str(p4cc), gf_props_get_type_name(att->type));
 		} else {
 			if (!p4cc && !strncmp(pname, "temi_l", 6))
 				dump_temi_loc(ctx, pctx, dump, pname, att);
 			else if (!p4cc && !strncmp(pname, "temi_t", 6))
 				dump_temi_time(ctx, pctx, dump, pname, att);
 			else
 				inspect_printf(dump, "\t%s: ", pname ? pname : gf_4cc_to_str(p4cc));
 		}
 
 		if ((att->type==GF_PROP_UINT_LIST) || (att->type==GF_PROP_4CC_LIST)) {
 			u32 k;
 			for (k=0; k < att->value.uint_list.nb_items; k++) {
 				if (k) inspect_printf(dump, ", ");
 				if ((att->type==GF_PROP_4CC_LIST) && ! gf_sys_is_test_mode()) {
 					inspect_printf(dump, "%s", gf_4cc_to_str(att->value.uint_list.vals[k]) );
 				} else {
 					inspect_printf(dump, "%d", att->value.uint_list.vals[k]);
 				}
 			}
 		} else if (att->type==GF_PROP_STRING_LIST) {
 			u32 k;
 			for (k=0; k < att->value.string_list.nb_items; k++) {
 				if (k) inspect_printf(dump, ", ");
 				inspect_printf(dump, "%s", (const char *) att->value.string_list.vals[k]);
 			}
 		}else{
 			inspect_printf(dump, "%s", gf_props_dump(p4cc, att, szDump, (GF_PropDumpDataMode) ctx->dump_data) );
 		}
 		if ((p4cc==GF_PROP_PID_DURATION) && !gf_sys_is_test_mode()) {
 			format_duration(att->value.lfrac.num, att->value.lfrac.den, dump, GF_TRUE);
 		}
 		inspect_printf(dump, "\n");
 	}
 }
@@ -3194,184 +3194,184 @@ static void inspect_dump_packet(GF_InspectCtx *ctx, FILE *dump, GF_FilterPacket
 props_done:
 	if (!ctx->analyze || !size) {
 		if (ctx->xml) {
 			inspect_printf(dump, "/>\n");
 		}
 		return;
 	}
 	inspect_printf(dump, ">\n");
 
 #ifndef GPAC_DISABLE_AV_PARSERS
 	if (pctx->hevc_state || pctx->avc_state || pctx->vvc_state) {
 		idx=1;
 
 		if (pctx->is_adobe_protected) {
 			u8 encrypted_au = data[0];
 			if (encrypted_au) {
 				inspect_printf(dump, "   <!-- Packet is an Adobe's protected frame and can not be dumped -->\n");
 				inspect_printf(dump, "</Packet>\n");
 				return;
 			}
 			else {
 				data++;
 				size--;
 			}
 		}
 		while (size) {
 			u32 nal_size = inspect_get_nal_size((char*)data, pctx->nalu_size_length);
 			data += pctx->nalu_size_length;
 
-			if (pctx->nalu_size_length + nal_size > size) {
-				inspect_printf(dump, "   <!-- NALU is corrupted: size is %d but only %d remains -->\n", nal_size, size);
+			if (nal_size >= GF_UINT_MAX - pctx->nalu_size_length || pctx->nalu_size_length + nal_size > size) {
+				inspect_printf(dump, "   <!-- NALU is corrupted: size is %u but only %d remains -->\n", nal_size, size);
 				break;
 			} else {
 				inspect_printf(dump, "   <NALU size=\"%d\" ", nal_size);
 				gf_inspect_dump_nalu_internal(dump, data, nal_size, pctx->has_svcc ? 1 : 0, pctx->hevc_state, pctx->avc_state, pctx->vvc_state, pctx->nalu_size_length, ctx->crc, pctx->is_cenc_protected, ctx->analyze, pctx);
 			}
 			idx++;
 			data += nal_size;
 			size -= nal_size + pctx->nalu_size_length;
 		}
 	} else if (pctx->av1_state) {
 		gf_bs_reassign_buffer(pctx->bs, data, size);
 		while (size) {
 			ObuType obu_type = 0;
 			u64 obu_size = 0;
 			u32 hdr_size = 0;
 
 			obu_size = gf_inspect_dump_obu_internal(dump, pctx->av1_state, (char *) data, size, obu_type, obu_size, hdr_size, ctx->crc, pctx, ctx->analyze);
 
 			if (obu_size > size) {
 				inspect_printf(dump, "   <!-- OBU is corrupted: size is %d but only %d remains -->\n", (u32) obu_size, size);
 				break;
 			}
 			data += obu_size;
 			size -= (u32)obu_size;
 			idx++;
 		}
 	} else {
 		u32 hdr, pos, fsize, i;
 		u32 dflag=0;
 		switch (pctx->codec_id) {
 		case GF_CODECID_MPEG1:
 		case GF_CODECID_MPEG2_422:
 		case GF_CODECID_MPEG2_SNR:
 		case GF_CODECID_MPEG2_HIGH:
 		case GF_CODECID_MPEG2_MAIN:
 		case GF_CODECID_MPEG2_SIMPLE:
 		case GF_CODECID_MPEG2_SPATIAL:
 		case GF_CODECID_MPEG4_PART2:
 			inspect_dump_mpeg124(pctx, (char *) data, size, dump);
 			break;
 		case GF_CODECID_MPEG_AUDIO:
 		case GF_CODECID_MPEG2_PART3:
 		case GF_CODECID_MPEG_AUDIO_L1:
 			pos = 0;
 			while (size) {
 				hdr = gf_mp3_get_next_header_mem(data, size, &pos);
 				if (!hdr) {
 					inspect_printf(dump, "<!-- Invalid MPEGAudioFrame -->\n");
 					break;
 				}
 				fsize = gf_mp3_frame_size(hdr);
 				inspect_printf(dump, "<MPEGAudioFrame size=\"%d\" layer=\"%d\" version=\"%d\" bitrate=\"%d\" channels=\"%d\" samplesPerFrame=\"%d\" samplerate=\"%d\"/>\n", fsize, gf_mp3_layer(hdr), gf_mp3_version(hdr), gf_mp3_bit_rate(hdr), gf_mp3_num_channels(hdr), gf_mp3_window_size(hdr), gf_mp3_sampling_rate(hdr));
 				if (size<pos+fsize) break;
 				data += pos + fsize;
 				size -= pos + fsize;
 			}
 			break;
 		case GF_CODECID_TMCD:
 			inspect_dump_tmcd(ctx, pctx, (char *) data, size, dump);
 			break;
 		case GF_CODECID_SUBS_TEXT:
 		case GF_CODECID_META_TEXT:
 			dflag=1;
 		case GF_CODECID_SUBS_XML:
 		case GF_CODECID_META_XML:
 			if (dflag)
 				inspect_printf(dump, "<![CDATA[");
 			for (i=0; i<size; i++) {
 				gf_fputc(data[i], dump);
 			}
 			if (dflag)
 				inspect_printf(dump, "]]>\n");
 			break;
 		case GF_CODECID_APCH:
 		case GF_CODECID_APCO:
 		case GF_CODECID_APCN:
 		case GF_CODECID_APCS:
 		case GF_CODECID_AP4X:
 		case GF_CODECID_AP4H:
 			gf_inspect_dump_prores_internal(dump, (char *) data, size, ctx->crc, pctx);
 			break;
 
 		case GF_CODECID_MPHA:
 			gf_bs_reassign_buffer(pctx->bs, data, size);
 			gf_inspect_dump_mha_frame(dump, pctx->bs, "");
 			break;
 
 		case GF_CODECID_MHAS:
 			gf_inspect_dump_mhas(dump, (char *) data, size, ctx->crc, pctx);
 			break;
 		case GF_CODECID_VP8:
 			dflag=1;
 		case GF_CODECID_VP9:
 			inspect_dump_vpx(ctx, dump, (char *) data, size, ctx->crc, pctx, dflag ? 8 : 9);
 			break;
 		case GF_CODECID_AC3:
 			dflag=1;
 		case GF_CODECID_EAC3:
 			inspect_dump_ac3_eac3(ctx, dump, (char *) data, size, ctx->crc, pctx, dflag ? 0 : 1);
 			break;
 		case GF_CODECID_TRUEHD:
 			gf_bs_reassign_buffer(pctx->bs, data, size);
 			gf_inspect_dump_truehd_frame(dump, pctx->bs);
 			break;
 		case GF_CODECID_OPUS:
 			gf_inspect_dump_opus_internal(dump, data, size, 0, ctx->crc, pctx);
 			break;
 		case GF_CODECID_ALAC:
 		{
 			gf_bs_reassign_buffer(pctx->bs, data, size);
 			u32 val, partial;
 
 #define get_and_print(name, bits) \
 			val = gf_bs_read_int(pctx->bs, bits); \
 			inspect_printf(dump, " "name"=\"%u\"", val);
 
 			inspect_printf(dump, " <ALACSegment");
 
 			get_and_print("type", 3);
 			get_and_print("reserved", 12);
 			get_and_print("partial", 1);
 			partial=val;
 			get_and_print("shift_off", 2);
 			get_and_print("escape", 1);
 			if (partial) {
 				get_and_print("frameLength", 32);
 			}
 			inspect_printf(dump, "/>\n");
 
 #undef get_and_print
 
 		}
 			break;
 
 		}
 	}
 #endif
 	inspect_printf(dump, "</Packet>\n");
 }
 
 #define DUMP_ARRAY(arr, name, loc, _is_svc)\
 	if (arr && gf_list_count(arr)) {\
 		inspect_printf(dump, "  <%sArray location=\"%s\">\n", name, loc);\
 		for (i=0; i<gf_list_count(arr); i++) {\
 			slc = gf_list_get(arr, i);\
 			inspect_printf(dump, "   <NALU size=\"%d\" ", slc->size);\
 			gf_inspect_dump_nalu_internal(dump, slc->data, slc->size, _is_svc, pctx->hevc_state, pctx->avc_state, pctx->vvc_state, nalh_size, ctx->crc, GF_FALSE, ctx->analyze, pctx);\
 		}\
 		inspect_printf(dump, "  </%sArray>\n", name);\
 	}\
 
 
 #ifndef GPAC_DISABLE_AV_PARSERS
@@ -4410,141 +4410,141 @@ static void inspect_dump_pid(GF_InspectCtx *ctx, FILE *dump, GF_FilterPid *pid,
 static GF_Err inspect_process(GF_Filter *filter)
 {
 	u32 i, count, nb_done=0, nb_hdr_done=0;
 	GF_InspectCtx *ctx = (GF_InspectCtx *) gf_filter_get_udta(filter);
 
 	count = gf_list_count(ctx->src_pids);
 
 	if (ctx->args_updated) {
 		ctx->args_updated = GF_FALSE;
 		for (i=0; i<count; i++) {
 			PidCtx *pctx = gf_list_get(ctx->src_pids, i);
 			switch (ctx->mode) {
 			case INSPECT_MODE_PCK:
 			case INSPECT_MODE_REFRAME:
 				gf_filter_pid_set_framing_mode(pctx->src_pid, GF_TRUE);
 				break;
 			default:
 				gf_filter_pid_set_framing_mode(pctx->src_pid, GF_FALSE);
 				break;
 			}
 			gf_filter_pid_set_clock_mode(pctx->src_pid, ctx->pcr);
 		}
 		if (ctx->is_prober || ctx->deep || ctx->fmt) {
 			ctx->dump_pck = GF_TRUE;
 		} else {
 			ctx->dump_pck = GF_FALSE;
 		}
 	}
-	
+
 	for (i=0; i<count; i++) {
 		PidCtx *pctx = gf_list_get(ctx->src_pids, i);
 		GF_FilterPacket *pck = NULL;
 		pck = pctx->src_pid ? gf_filter_pid_get_packet(pctx->src_pid) : NULL;
 
 		if (pctx->init_pid_config_done)
 			nb_hdr_done++;
 
 		if (!pck) {
 			if (pctx->src_pid && !gf_filter_pid_is_eos(pctx->src_pid))
 				continue;
 			else
 				ctx->has_seen_eos = GF_TRUE;
 		}
 		if (pctx->aborted)
 			continue;
 
 		if (!pctx->buffer_done || ctx->rbuffer) {
 			u64 dur=0;
 			if (pck && !ctx->has_seen_eos && !gf_filter_pid_eos_received(pctx->src_pid)) {
 				dur = gf_filter_pid_query_buffer_duration(pctx->src_pid, GF_FALSE);
 				if (!pctx->buffer_done) {
 					if ((dur < ctx->buffer * 1000)) {
 						GF_LOG(GF_LOG_DEBUG, GF_LOG_MEDIA, ("[Inspect] PID %d buffering buffer %u ms %.02f %%\n", pctx->idx, (u32) (dur/1000), dur*1.0/(ctx->buffer * 10.0)));
 						continue;
 					}
 				} else if (ctx->rbuffer && (dur < ctx->rbuffer * 1000)) {
 					pctx->buffer_done = GF_FALSE;
 					pctx->buf_start_time = gf_sys_clock();
 					GF_LOG(GF_LOG_INFO, GF_LOG_MEDIA, ("[Inspect] PID %d rebuffering buffer %u ms less than rebuffer %u\n", pctx->idx, (u32) (dur/1000), ctx->rbuffer));
 					continue;
 				}
 			}
 			if (!pctx->buffer_done) {
 				if (!dur) {
 					dur = gf_filter_pid_query_buffer_duration(pctx->src_pid, GF_FALSE);
 					GF_LOG(GF_LOG_INFO, GF_LOG_MEDIA, ("[Inspect] PID %d buffering aborted after %u ms - level %u ms %.02f %%\n", pctx->idx, gf_sys_clock() - pctx->buf_start_time, (u32) (dur/1000), dur*1.0/(ctx->buffer * 10.0)));
 				} else {
 					GF_LOG(GF_LOG_INFO, GF_LOG_MEDIA, ("[Inspect] PID %d buffering done in %u ms - level %u ms %.02f %%\n", pctx->idx, gf_sys_clock() - pctx->buf_start_time, (u32) (dur/1000), dur*1.0/(ctx->buffer * 10.0)));
 				}
 				pctx->buffer_done = GF_TRUE;
 			}
 		}
 
 		if (pctx->dump_pid) {
 			inspect_dump_pid(ctx, pctx->tmp, pctx->src_pid, pctx->idx, pctx->init_pid_config_done ? GF_FALSE : GF_TRUE, GF_FALSE, pctx->pck_for_config, (pctx->dump_pid==2) ? GF_TRUE : GF_FALSE, pctx);
 			pctx->dump_pid = 0;
 			pctx->init_pid_config_done = 1;
 			pctx->pck_for_config=0;
 
 			if (!ctx->hdr_done) {
 				ctx->hdr_done=GF_TRUE;
 				//dump header on main output file, not on pid one!
 				if (ctx->hdr && ctx->fmt && !ctx->xml)
 					inspect_dump_packet_fmt(filter, ctx, ctx->dump, NULL, 0, 0);
 			}
 		}
 		if (!pck) continue;
-		
+
 		pctx->pck_for_config++;
 		pctx->pck_num++;
 
 		if (ctx->dump_pck) {
 
 			if (ctx->is_prober) {
 				nb_done++;
 			} else {
 				if (ctx->fmt) {
 					inspect_dump_packet_fmt(filter, ctx, pctx->tmp, pck, pctx, pctx->pck_num);
 				} else {
 					inspect_dump_packet(ctx, pctx->tmp, pck, pctx->idx, pctx->pck_num, pctx);
 				}
 			}
 		}
-		
+
 		if (ctx->dur.num && ctx->dur.den) {
 			u64 timescale = gf_filter_pck_get_timescale(pck);
 			u64 ts = gf_filter_pck_get_dts(pck);
 			u64 dur = gf_filter_pck_get_duration(pck);
 			if (ts == GF_FILTER_NO_TS) ts = gf_filter_pck_get_cts(pck);
 
 			if (!pctx->init_ts) pctx->init_ts = ts+1;
 			else if (gf_timestamp_greater_or_equal(ts + dur - pctx->init_ts + 1, timescale, ctx->dur.num, ctx->dur.den)) {
 				GF_FilterEvent evt;
 				GF_FEVT_INIT(evt, GF_FEVT_STOP, pctx->src_pid);
 
 				GF_LOG(GF_LOG_INFO, GF_LOG_MEDIA, ("[Inspect] PID %d (codec %s) done dumping, aborting\n", pctx->idx, gf_codecid_name(pctx->codec_id) ));
 				gf_filter_pid_drop_packet(pctx->src_pid);
 
 				gf_filter_pid_send_event(pctx->src_pid, &evt);
 				gf_filter_pid_set_discard(pctx->src_pid, GF_TRUE);
 				pctx->aborted = GF_TRUE;
 				break;
 			}
 		}
 		gf_filter_pid_drop_packet(pctx->src_pid);
 	}
 	if ((ctx->is_prober && !ctx->probe_done && (nb_done==count) && !ctx->allp)
 		|| (!ctx->is_prober && !ctx->allp && !ctx->dump_pck && (nb_hdr_done==count) && !gf_filter_connections_pending(filter))
 	) {
 		for (i=0; i<count; i++) {
 			PidCtx *pctx = gf_list_get(ctx->src_pids, i);
 			GF_FilterEvent evt;
 			GF_FEVT_INIT(evt, GF_FEVT_STOP, pctx->src_pid);
 			gf_filter_pid_send_event(pctx->src_pid, &evt);
 		}
 		if (ctx->is_prober)
 			ctx->probe_done = GF_TRUE;
 		return GF_EOS;
 	}
 	return GF_OK;
 }
@@ -5023,8 +5023,5 @@ const GF_FilterRegister *inspect_register(GF_FilterSession *session)
 const GF_FilterRegister *probe_register(GF_FilterSession *session)
 {
 	return NULL;
 }
 #endif // GPAC_DISABLE_INSPECT
-
-
-
