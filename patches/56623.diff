commit a1f4d06969bed2fd4747784d569bfaeb4b50dc80
Author: Alan Modra <amodra@gmail.com>
Date:   Mon Mar 6 20:29:42 2023 +1030

    macho null dereference read
    
    The main problem here was not returning -1 from canonicalize_symtab on
    an error, leaving the vector of relocs only partly initialised and one
    with a null sym_ptr_ptr.
    
            * mach-o.c (bfd_mach_o_canonicalize_symtab): Return -1 on error,
            not 0.
            (bfd_mach_o_pre_canonicalize_one_reloc): Init sym_ptr_ptr to
            undefined section sym.

diff --git a/bfd/mach-o.c b/bfd/mach-o.c
index a910e1146ea..0a91095a5d6 100644
--- a/bfd/mach-o.c
+++ b/bfd/mach-o.c
@@ -901,35 +901,35 @@ long
 bfd_mach_o_canonicalize_symtab (bfd *abfd, asymbol **alocation)
 {
   bfd_mach_o_data_struct *mdata = bfd_mach_o_get_data (abfd);
   long nsyms = bfd_mach_o_count_symbols (abfd);
   bfd_mach_o_symtab_command *sym = mdata->symtab;
   unsigned long j;
 
   if (nsyms < 0)
     return nsyms;
 
   if (nsyms == 0)
     {
       /* Do not try to read symbols if there are none.  */
       alocation[0] = NULL;
       return 0;
     }
 
   if (!bfd_mach_o_read_symtab_symbols (abfd))
     {
       _bfd_error_handler
 	(_("bfd_mach_o_canonicalize_symtab: unable to load symbols"));
-      return 0;
+      return -1;
     }
 
   BFD_ASSERT (sym->symbols != NULL);
 
   for (j = 0; j < sym->nsyms; j++)
     alocation[j] = &sym->symbols[j].symbol;
 
   alocation[j] = NULL;
 
   return nsyms;
 }
 
 /* Create synthetic symbols for indirect symbols.  */
@@ -1548,68 +1548,68 @@ bool
 bfd_mach_o_pre_canonicalize_one_reloc (bfd *abfd,
 				       struct mach_o_reloc_info_external *raw,
 				       bfd_mach_o_reloc_info *reloc,
 				       arelent *res, asymbol **syms)
 {
   bfd_mach_o_data_struct *mdata = bfd_mach_o_get_data (abfd);
   bfd_vma addr;
 
   addr = bfd_get_32 (abfd, raw->r_address);
-  res->sym_ptr_ptr = NULL;
+  res->sym_ptr_ptr = bfd_und_section_ptr->symbol_ptr_ptr;
   res->addend = 0;
 
   if (addr & BFD_MACH_O_SR_SCATTERED)
     {
       unsigned int j;
       bfd_vma symnum = bfd_get_32 (abfd, raw->r_symbolnum);
 
       /* Scattered relocation, can't be extern. */
       reloc->r_scattered = 1;
       reloc->r_extern = 0;
 
       /*   Extract section and offset from r_value (symnum).  */
       reloc->r_value = symnum;
       /* FIXME: This breaks when a symbol in a reloc exactly follows the
 	 end of the data for the section (e.g. in a calculation of section
 	 data length).  At present, the symbol will end up associated with
 	 the following section or, if it falls within alignment padding, as
-	 null - which will assert later.  */
+	 the undefined section symbol.  */
       for (j = 0; j < mdata->nsects; j++)
 	{
 	  bfd_mach_o_section *sect = mdata->sections[j];
 	  if (symnum >= sect->addr && symnum < sect->addr + sect->size)
 	    {
 	      res->sym_ptr_ptr = sect->bfdsection->symbol_ptr_ptr;
 	      res->addend = symnum - sect->addr;
 	      break;
 	    }
 	}
 
       /* Extract the info and address fields from r_address.  */
       reloc->r_type = BFD_MACH_O_GET_SR_TYPE (addr);
       reloc->r_length = BFD_MACH_O_GET_SR_LENGTH (addr);
       reloc->r_pcrel = addr & BFD_MACH_O_SR_PCREL;
       reloc->r_address = BFD_MACH_O_GET_SR_TYPE (addr);
       res->address = BFD_MACH_O_GET_SR_ADDRESS (addr);
     }
   else
     {
       /* Non-scattered relocation.  */
       reloc->r_scattered = 0;
       reloc->r_address = addr;
       res->address = addr;
 
       /* The value and info fields have to be extracted dependent on target
 	 endian-ness.  */
       bfd_mach_o_swap_in_non_scattered_reloc (abfd, reloc, raw->r_symbolnum);
 
       if (!bfd_mach_o_canonicalize_non_scattered_reloc (abfd, reloc,
 							res, syms))
 	return false;
     }
 
   /* We have set up a reloc with all the information present, so the swapper
      can modify address, value and addend fields, if necessary, to convey
      information in the generic BFD reloc that is mach-o specific.  */
 
   return true;
 }
