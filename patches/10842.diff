commit d9231144b652362eaf62f8595df7d4886dbaf44d
Author: Peter Wu <peter@lekensteyn.nl>
Date:   Tue Oct 9 17:23:44 2018 +0200

    T125: avoid returning from TRY/CATCH in dissect_t125_heur
    
    Doing so corrupts the exceptions stack and causes crashes elsewhere.
    Move the heuristics check after get_ber_identifier as dissect_t125
    calls that check too.
    
    Bug: 15189
    Change-Id: I816fcd693141c5e9e2979348f58bf5a8112290da
    Fixes: v2.9.0rc0-2122-gf710f21833 ("T125: Add a heuristic test case.")
    Reviewed-on: https://code.wireshark.org/review/30096
    Petri-Dish: Peter Wu <peter@lekensteyn.nl>
    Reviewed-by: Ã‰milio Gonzalez <egg997@gmail.com>
    Petri-Dish: Gerald Combs <gerald@wireshark.org>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Anders Broman <a.broman58@gmail.com>

diff --git a/epan/dissectors/asn1/t125/packet-t125-template.c b/epan/dissectors/asn1/t125/packet-t125-template.c
index 7212c5b3b7..4edde79f48 100644
--- a/epan/dissectors/asn1/t125/packet-t125-template.c
+++ b/epan/dissectors/asn1/t125/packet-t125-template.c
@@ -85,61 +85,56 @@ static gboolean
 dissect_t125_heur(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, void *data _U_)
 {
   gint8 ber_class;
   gboolean pc;
   gint32 tag;
   volatile gboolean failed;
-  gboolean is_t125;
 
   /*
    * We must catch all the "ran past the end of the packet" exceptions
    * here and, if we catch one, just return FALSE.  It's too painful
    * to have a version of dissect_per_sequence() that checks all
    * references to the tvbuff before making them and returning "no"
    * if they would fail.
    */
   failed = FALSE;
   TRY {
-    /*
-     * Check that the first byte of the packet is a valid t125/MCS header.
-     * This might not be enough, but since t125 only catch COTP packets,
-     * it should not be a problem.
-     */
-    guint8 first_byte = tvb_get_guint8(tvb, 0) >> 2;
-    switch (first_byte) {
-      case HF_T125_ERECT_DOMAIN_REQUEST:
-      case HF_T125_ATTACH_USER_REQUEST:
-      case HF_T125_ATTACH_USER_CONFIRM:
-      case HF_T125_CHANNEL_JOIN_REQUEST:
-      case HF_T125_CHANNEL_JOIN_CONFIRM:
-      case HF_T125_DISCONNECT_PROVIDER_ULTIMATUM:
-      case HF_T125_SEND_DATA_REQUEST:
-      case HF_T125_SEND_DATA_INDICATION:
-        is_t125 = TRUE;
-        break;
-      default:
-        is_t125 = FALSE;
-        break;
-    }
-    if(is_t125) {
-      dissect_t125(tvb, pinfo, parent_tree, NULL);
-      return TRUE;
-    }
-
     /* could be BER */
     get_ber_identifier(tvb, 0, &ber_class, &pc, &tag);
   } CATCH_BOUNDS_ERRORS {
     failed = TRUE;
   } ENDTRY;
 
-  /* is this strong enough ? */
-  if (!failed && ((ber_class==BER_CLASS_APP) && ((tag>=101) && (tag<=104)))) {
+  if (failed) {
+      return FALSE;
+  }
+
+  if (((ber_class==BER_CLASS_APP) && ((tag>=101) && (tag<=104)))) {
     dissect_t125(tvb, pinfo, parent_tree, NULL);
 
     return TRUE;
   }
 
+  /*
+   * Check that the first byte of the packet is a valid t125/MCS header.
+   * This might not be enough, but since t125 only catch COTP packets,
+   * it should not be a problem.
+   */
+  guint8 first_byte = tvb_get_guint8(tvb, 0) >> 2;
+  switch (first_byte) {
+    case HF_T125_ERECT_DOMAIN_REQUEST:
+    case HF_T125_ATTACH_USER_REQUEST:
+    case HF_T125_ATTACH_USER_CONFIRM:
+    case HF_T125_CHANNEL_JOIN_REQUEST:
+    case HF_T125_CHANNEL_JOIN_CONFIRM:
+    case HF_T125_DISCONNECT_PROVIDER_ULTIMATUM:
+    case HF_T125_SEND_DATA_REQUEST:
+    case HF_T125_SEND_DATA_INDICATION:
+      dissect_t125(tvb, pinfo, parent_tree, NULL);
+      return TRUE;
+  }
+
   return FALSE;
 }
 
 
 /*--- proto_register_t125 -------------------------------------------*/
diff --git a/epan/dissectors/packet-t125.c b/epan/dissectors/packet-t125.c
index d3fa7b9fc2..4abe431d12 100644
--- a/epan/dissectors/packet-t125.c
+++ b/epan/dissectors/packet-t125.c
@@ -1,45 +1,44 @@
 /* Do not modify this file. Changes will be overwritten.                      */
 /* Generated automatically by the ASN.1 to Wireshark dissector compiler       */
 /* packet-t125.c                                                              */
 /* asn2wrs.py -b -p t125 -c ./t125.cnf -s ./packet-t125-template -D . -O ../.. MCS-PROTOCOL.asn */
 
 /* Input file: packet-t125-template.c */
 
 #line 1 "./asn1/t125/packet-t125-template.c"
 /* packet-t125.c
  * Routines for t125 packet dissection
  * Copyright 2007, Ronnie Sahlberg
  *
  * Wireshark - Network traffic analyzer
  * By Gerald Combs <gerald@wireshark.org>
  * Copyright 1998 Gerald Combs
  *
  * SPDX-License-Identifier: GPL-2.0-or-later
  *
  */
 
 #include "config.h"
 
 #include <epan/packet.h>
 #include <epan/exceptions.h>
 
 #include <epan/asn1.h>
-#include <epan/conversation.h>
 #include "packet-ber.h"
 #include "packet-per.h"
 
 #include "packet-t124.h"
 
 #define PNAME  "MULTIPOINT-COMMUNICATION-SERVICE T.125"
 #define PSNAME "T.125"
 #define PFNAME "t125"
 
 
 #define HF_T125_ERECT_DOMAIN_REQUEST 1
 #define HF_T125_DISCONNECT_PROVIDER_ULTIMATUM 8
 #define HF_T125_ATTACH_USER_REQUEST 10
 #define HF_T125_ATTACH_USER_CONFIRM 11
 #define HF_T125_CHANNEL_JOIN_REQUEST 14
 #define HF_T125_CHANNEL_JOIN_CONFIRM 15
 #define HF_T125_SEND_DATA_REQUEST 25
 #define HF_T125_SEND_DATA_INDICATION 26
@@ -417,203 +416,198 @@ static gboolean
 dissect_t125_heur(tvbuff_t *tvb, packet_info *pinfo, proto_tree *parent_tree, void *data _U_)
 {
   gint8 ber_class;
   gboolean pc;
   gint32 tag;
   volatile gboolean failed;
-  gboolean is_t125;
 
   /*
    * We must catch all the "ran past the end of the packet" exceptions
    * here and, if we catch one, just return FALSE.  It's too painful
    * to have a version of dissect_per_sequence() that checks all
    * references to the tvbuff before making them and returning "no"
    * if they would fail.
    */
   failed = FALSE;
   TRY {
-    /*
-     * Check that the first byte of the packet is a valid t125/MCS header.
-     * This might not be enough, but since t125 only catch COTP packets,
-     * it should not be a problem.
-     */
-    guint8 first_byte = tvb_get_guint8(tvb, 0) >> 2;
-    switch (first_byte) {
-      case HF_T125_ERECT_DOMAIN_REQUEST:
-      case HF_T125_ATTACH_USER_REQUEST:
-      case HF_T125_ATTACH_USER_CONFIRM:
-      case HF_T125_CHANNEL_JOIN_REQUEST:
-      case HF_T125_CHANNEL_JOIN_CONFIRM:
-      case HF_T125_DISCONNECT_PROVIDER_ULTIMATUM:
-      case HF_T125_SEND_DATA_REQUEST:
-      case HF_T125_SEND_DATA_INDICATION:
-        is_t125 = TRUE;
-        break;
-      default:
-        is_t125 = FALSE;
-        break;
-    }
-    if(is_t125) {
-      dissect_t125(tvb, pinfo, parent_tree, NULL);
-      return TRUE;
-    }
-
     /* could be BER */
     get_ber_identifier(tvb, 0, &ber_class, &pc, &tag);
   } CATCH_BOUNDS_ERRORS {
     failed = TRUE;
   } ENDTRY;
 
-  /* is this strong enough ? */
-  if (!failed && ((ber_class==BER_CLASS_APP) && ((tag>=101) && (tag<=104)))) {
+  if (failed) {
+      return FALSE;
+  }
+
+  if (((ber_class==BER_CLASS_APP) && ((tag>=101) && (tag<=104)))) {
     dissect_t125(tvb, pinfo, parent_tree, NULL);
 
     return TRUE;
   }
 
+  /*
+   * Check that the first byte of the packet is a valid t125/MCS header.
+   * This might not be enough, but since t125 only catch COTP packets,
+   * it should not be a problem.
+   */
+  guint8 first_byte = tvb_get_guint8(tvb, 0) >> 2;
+  switch (first_byte) {
+    case HF_T125_ERECT_DOMAIN_REQUEST:
+    case HF_T125_ATTACH_USER_REQUEST:
+    case HF_T125_ATTACH_USER_CONFIRM:
+    case HF_T125_CHANNEL_JOIN_REQUEST:
+    case HF_T125_CHANNEL_JOIN_CONFIRM:
+    case HF_T125_DISCONNECT_PROVIDER_ULTIMATUM:
+    case HF_T125_SEND_DATA_REQUEST:
+    case HF_T125_SEND_DATA_INDICATION:
+      dissect_t125(tvb, pinfo, parent_tree, NULL);
+      return TRUE;
+  }
+
   return FALSE;
 }
 
 
 /*--- proto_register_t125 -------------------------------------------*/
 void proto_register_t125(void) {
 
   /* List of fields */
   static hf_register_info hf[] = {
 
 /*--- Included file: packet-t125-hfarr.c ---*/
 #line 1 "./asn1/t125/packet-t125-hfarr.c"
     { &hf_t125_ConnectMCSPDU_PDU,
       { "ConnectMCSPDU", "t125.ConnectMCSPDU",
         FT_UINT32, BASE_DEC, VALS(t125_ConnectMCSPDU_vals), 0,
         NULL, HFILL }},
     { &hf_t125_maxChannelIds,
       { "maxChannelIds", "t125.maxChannelIds",
         FT_UINT64, BASE_DEC, NULL, 0,
         "INTEGER_0_MAX", HFILL }},
     { &hf_t125_maxUserIds,
       { "maxUserIds", "t125.maxUserIds",
         FT_UINT64, BASE_DEC, NULL, 0,
         "INTEGER_0_MAX", HFILL }},
     { &hf_t125_maxTokenIds,
       { "maxTokenIds", "t125.maxTokenIds",
         FT_UINT64, BASE_DEC, NULL, 0,
         "INTEGER_0_MAX", HFILL }},
     { &hf_t125_numPriorities,
       { "numPriorities", "t125.numPriorities",
         FT_UINT64, BASE_DEC, NULL, 0,
         "INTEGER_0_MAX", HFILL }},
     { &hf_t125_minThroughput,
       { "minThroughput", "t125.minThroughput",
         FT_UINT64, BASE_DEC, NULL, 0,
         "INTEGER_0_MAX", HFILL }},
     { &hf_t125_maxHeight,
       { "maxHeight", "t125.maxHeight",
         FT_UINT64, BASE_DEC, NULL, 0,
         "INTEGER_0_MAX", HFILL }},
     { &hf_t125_maxMCSPDUsize,
       { "maxMCSPDUsize", "t125.maxMCSPDUsize",
         FT_UINT64, BASE_DEC, NULL, 0,
         "INTEGER_0_MAX", HFILL }},
     { &hf_t125_protocolVersion,
       { "protocolVersion", "t125.protocolVersion",
         FT_UINT64, BASE_DEC, NULL, 0,
         "INTEGER_0_MAX", HFILL }},
     { &hf_t125_callingDomainSelector,
       { "callingDomainSelector", "t125.callingDomainSelector",
         FT_BYTES, BASE_NONE, NULL, 0,
         "OCTET_STRING", HFILL }},
     { &hf_t125_calledDomainSelector,
       { "calledDomainSelector", "t125.calledDomainSelector",
         FT_BYTES, BASE_NONE, NULL, 0,
         "OCTET_STRING", HFILL }},
     { &hf_t125_upwardFlag,
       { "upwardFlag", "t125.upwardFlag",
         FT_BOOLEAN, BASE_NONE, NULL, 0,
         "BOOLEAN", HFILL }},
     { &hf_t125_targetParameters,
       { "targetParameters", "t125.targetParameters_element",
         FT_NONE, BASE_NONE, NULL, 0,
         "DomainParameters", HFILL }},
     { &hf_t125_minimumParameters,
       { "minimumParameters", "t125.minimumParameters_element",
         FT_NONE, BASE_NONE, NULL, 0,
         "DomainParameters", HFILL }},
     { &hf_t125_maximumParameters,
       { "maximumParameters", "t125.maximumParameters_element",
         FT_NONE, BASE_NONE, NULL, 0,
         "DomainParameters", HFILL }},
     { &hf_t125_userData,
       { "userData", "t125.userData",
         FT_BYTES, BASE_NONE, NULL, 0,
         NULL, HFILL }},
     { &hf_t125_result,
       { "result", "t125.result",
         FT_UINT32, BASE_DEC, VALS(t125_Result_vals), 0,
         NULL, HFILL }},
     { &hf_t125_calledConnectId,
       { "calledConnectId", "t125.calledConnectId",
         FT_UINT64, BASE_DEC, NULL, 0,
         "INTEGER_0_MAX", HFILL }},
     { &hf_t125_domainParameters,
       { "domainParameters", "t125.domainParameters_element",
         FT_NONE, BASE_NONE, NULL, 0,
         NULL, HFILL }},
     { &hf_t125_userData_01,
       { "userData", "t125.userData",
         FT_BYTES, BASE_NONE, NULL, 0,
         "T_userData_01", HFILL }},
     { &hf_t125_dataPriority,
       { "dataPriority", "t125.dataPriority",
         FT_UINT32, BASE_DEC, VALS(t125_DataPriority_vals), 0,
         NULL, HFILL }},
     { &hf_t125_connect_initial,
       { "connect-initial", "t125.connect_initial_element",
         FT_NONE, BASE_NONE, NULL, 0,
         NULL, HFILL }},
     { &hf_t125_connect_response,
       { "connect-response", "t125.connect_response_element",
         FT_NONE, BASE_NONE, NULL, 0,
         NULL, HFILL }},
     { &hf_t125_connect_additional,
       { "connect-additional", "t125.connect_additional_element",
         FT_NONE, BASE_NONE, NULL, 0,
         NULL, HFILL }},
     { &hf_t125_connect_result,
       { "connect-result", "t125.connect_result_element",
         FT_NONE, BASE_NONE, NULL, 0,
         NULL, HFILL }},
 
 /*--- End of included file: packet-t125-hfarr.c ---*/
-#line 151 "./asn1/t125/packet-t125-template.c"
+#line 146 "./asn1/t125/packet-t125-template.c"
   };
 
   /* List of subtrees */
   static gint *ett[] = {
 	  &ett_t125,
 
 /*--- Included file: packet-t125-ettarr.c ---*/
 #line 1 "./asn1/t125/packet-t125-ettarr.c"
     &ett_t125_DomainParameters,
     &ett_t125_Connect_Initial_U,
     &ett_t125_Connect_Response_U,
     &ett_t125_Connect_Additional_U,
     &ett_t125_Connect_Result_U,
     &ett_t125_ConnectMCSPDU,
 
 /*--- End of included file: packet-t125-ettarr.c ---*/
-#line 157 "./asn1/t125/packet-t125-template.c"
+#line 152 "./asn1/t125/packet-t125-template.c"
   };
 
   /* Register protocol */
   proto_t125 = proto_register_protocol(PNAME, PSNAME, PFNAME);
   /* Register fields and subtrees */
   proto_register_field_array(proto_t125, hf, array_length(hf));
   proto_register_subtree_array(ett, array_length(ett));
 
   t125_heur_subdissector_list= register_heur_dissector_list("t125", proto_t125);
 
   register_dissector("t125", dissect_t125, proto_t125);
 }
 
 
 /*--- proto_reg_handoff_t125 ---------------------------------------*/
