commit 3e3db6c9a6fdc74f861f82a59e7a10723c154198
Author: Brian Osman <brianosman@google.com>
Date:   Fri Aug 14 09:42:12 2020 -0400

    Make switch case handling safer
    
    It's possible to construct a case value expression that's a compile time
    constant, but fails to produce a value from getConstantInt. MSAN noticed
    us using the uninitialized integer. It's now initialized, but also never
    used in the failure case: We make getConstantInt return status, and give
    better error messages in the two places it's used.
    
    Bug: oss-fuzz:24889
    Change-Id: I88e4e5b7bd1caeea1cf53f9b1d6f345dd8a5326f
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/310296
    Commit-Queue: Brian Osman <brianosman@google.com>
    Reviewed-by: John Stiles <johnstiles@google.com>
    Auto-Submit: Brian Osman <brianosman@google.com>

diff --git a/src/sksl/SkSLIRGenerator.cpp b/src/sksl/SkSLIRGenerator.cpp
index fbe8559d2c..78c80fdbcb 100644
--- a/src/sksl/SkSLIRGenerator.cpp
+++ b/src/sksl/SkSLIRGenerator.cpp
@@ -605,58 +605,57 @@ std::unique_ptr<Statement> IRGenerator::convertDo(const ASTNode& d) {
 std::unique_ptr<Statement> IRGenerator::convertSwitch(const ASTNode& s) {
     SkASSERT(s.fKind == ASTNode::Kind::kSwitch);
     AutoSwitchLevel level(this);
     auto iter = s.begin();
     std::unique_ptr<Expression> value = this->convertExpression(*(iter++));
     if (!value) {
         return nullptr;
     }
     if (value->fType != *fContext.fUInt_Type && value->fType.kind() != Type::kEnum_Kind) {
         value = this->coerce(std::move(value), *fContext.fInt_Type);
         if (!value) {
             return nullptr;
         }
     }
     AutoSymbolTable table(this);
     std::unordered_set<int> caseValues;
     std::vector<std::unique_ptr<SwitchCase>> cases;
     for (; iter != s.end(); ++iter) {
         const ASTNode& c = *iter;
         SkASSERT(c.fKind == ASTNode::Kind::kSwitchCase);
         std::unique_ptr<Expression> caseValue;
         auto childIter = c.begin();
         if (*childIter) {
             caseValue = this->convertExpression(*childIter);
             if (!caseValue) {
                 return nullptr;
             }
             caseValue = this->coerce(std::move(caseValue), value->fType);
             if (!caseValue) {
                 return nullptr;
             }
-            if (!caseValue->isCompileTimeConstant()) {
-                fErrors.error(caseValue->fOffset, "case value must be a constant");
+            int64_t v = 0;
+            if (!this->getConstantInt(*caseValue, &v)) {
+                fErrors.error(caseValue->fOffset, "case value must be a constant integer");
                 return nullptr;
             }
-            int64_t v;
-            this->getConstantInt(*caseValue, &v);
             if (caseValues.find(v) != caseValues.end()) {
                 fErrors.error(caseValue->fOffset, "duplicate case value");
             }
             caseValues.insert(v);
         }
         ++childIter;
         std::vector<std::unique_ptr<Statement>> statements;
         for (; childIter != c.end(); ++childIter) {
             std::unique_ptr<Statement> converted = this->convertStatement(*childIter);
             if (!converted) {
                 return nullptr;
             }
             statements.push_back(std::move(converted));
         }
         cases.emplace_back(new SwitchCase(c.fOffset, std::move(caseValue),
                                           std::move(statements)));
     }
     return std::unique_ptr<Statement>(new SwitchStatement(s.fOffset, s.getBool(),
                                                           std::move(value), std::move(cases),
                                                           fSymbolTable));
 }
@@ -1153,56 +1152,54 @@ std::unique_ptr<InterfaceBlock> IRGenerator::convertInterfaceBlock(const ASTNode
                                             symbols);
 }
 
-void IRGenerator::getConstantInt(const Expression& value, int64_t* out) {
+bool IRGenerator::getConstantInt(const Expression& value, int64_t* out) {
     switch (value.fKind) {
         case Expression::kIntLiteral_Kind:
-            *out = ((const IntLiteral&) value).fValue;
-            break;
+            *out = static_cast<const IntLiteral&>(value).fValue;
+            return true;
         case Expression::kVariableReference_Kind: {
-            const Variable& var = ((VariableReference&) value).fVariable;
-            if ((var.fModifiers.fFlags & Modifiers::kConst_Flag) &&
-                var.fInitialValue) {
-                this->getConstantInt(*var.fInitialValue, out);
-            }
-            break;
+            const Variable& var = static_cast<const VariableReference&>(value).fVariable;
+            return (var.fModifiers.fFlags & Modifiers::kConst_Flag) &&
+                   var.fInitialValue &&
+                   this->getConstantInt(*var.fInitialValue, out);
         }
         default:
-            fErrors.error(value.fOffset, "expected a constant int");
+            return false;
     }
 }
 
 void IRGenerator::convertEnum(const ASTNode& e) {
     SkASSERT(e.fKind == ASTNode::Kind::kEnum);
     int64_t currentValue = 0;
     Layout layout;
     ASTNode enumType(e.fNodes, e.fOffset, ASTNode::Kind::kType,
                      ASTNode::TypeData(e.getString(), false, false));
     const Type* type = this->convertType(enumType);
     Modifiers modifiers(layout, Modifiers::kConst_Flag);
-    std::shared_ptr<SymbolTable> symbols(new SymbolTable(fSymbolTable));
-    fSymbolTable = symbols;
+    AutoSymbolTable table(this);
     for (auto iter = e.begin(); iter != e.end(); ++iter) {
         const ASTNode& child = *iter;
         SkASSERT(child.fKind == ASTNode::Kind::kEnumCase);
         std::unique_ptr<Expression> value;
         if (child.begin() != child.end()) {
             value = this->convertExpression(*child.begin());
             if (!value) {
-                fSymbolTable = symbols->fParent;
                 return;
             }
-            this->getConstantInt(*value, &currentValue);
+            if (!this->getConstantInt(*value, &currentValue)) {
+                fErrors.error(value->fOffset, "enum value must be a constant integer");
+                return;
+            }
         }
         value = std::unique_ptr<Expression>(new IntLiteral(fContext, e.fOffset, currentValue));
         ++currentValue;
-        symbols->add(child.getString(),
-                     std::make_unique<Variable>(e.fOffset, modifiers, child.getString(), *type,
-                                                Variable::kGlobal_Storage, value.get()));
-        symbols->takeOwnershipOfIRNode(std::move(value));
-    }
-    fProgramElements->push_back(std::unique_ptr<ProgramElement>(new Enum(e.fOffset, e.getString(),
-                                                                         symbols, fIsBuiltinCode)));
-    fSymbolTable = symbols->fParent;
+        fSymbolTable->add(child.getString(),
+                          std::make_unique<Variable>(e.fOffset, modifiers, child.getString(), *type,
+                                                     Variable::kGlobal_Storage, value.get()));
+        fSymbolTable->takeOwnershipOfIRNode(std::move(value));
+    }
+    fProgramElements->push_back(std::unique_ptr<ProgramElement>(
+            new Enum(e.fOffset, e.getString(), fSymbolTable, fIsBuiltinCode)));
 }
 
 const Type* IRGenerator::convertType(const ASTNode& type) {
diff --git a/src/sksl/SkSLIRGenerator.h b/src/sksl/SkSLIRGenerator.h
index 54a4ed51a3..e9e6865c20 100644
--- a/src/sksl/SkSLIRGenerator.h
+++ b/src/sksl/SkSLIRGenerator.h
@@ -66,144 +66,144 @@ public:
 private:
     /**
      * Prepare to compile a program. Resets state, pushes a new symbol table, and installs the
      * settings.
      */
     void start(const Program::Settings* settings,
                std::vector<std::unique_ptr<ProgramElement>>* inherited,
                bool isBuiltinCode = false);
 
     /**
      * Performs cleanup after compilation is complete.
      */
     void finish();
 
     void pushSymbolTable();
     void popSymbolTable();
 
     std::unique_ptr<VarDeclarations> convertVarDeclarations(const ASTNode& decl,
                                                             Variable::Storage storage);
     void convertFunction(const ASTNode& f);
     std::unique_ptr<Statement> convertSingleStatement(const ASTNode& statement);
     std::unique_ptr<Statement> convertStatement(const ASTNode& statement);
     std::unique_ptr<Expression> convertExpression(const ASTNode& expression);
     std::unique_ptr<ModifiersDeclaration> convertModifiersDeclaration(const ASTNode& m);
 
     const Type* convertType(const ASTNode& type);
     std::unique_ptr<Expression> inlineExpression(
             int offset,
             std::unordered_map<const Variable*, const Variable*>* varMap,
             const Expression& expression);
     std::unique_ptr<Statement> inlineStatement(
             int offset,
             std::unordered_map<const Variable*, const Variable*>* varMap,
             const Variable* returnVar,
             bool haveEarlyReturns,
             const Statement& statement);
     std::unique_ptr<Expression> inlineCall(int offset, const FunctionDefinition& function,
                                            std::vector<std::unique_ptr<Expression>> arguments);
     std::unique_ptr<Expression> call(int offset,
                                      const FunctionDeclaration& function,
                                      std::vector<std::unique_ptr<Expression>> arguments);
     bool isSafeToInline(const FunctionDefinition& function);
     int callCost(const FunctionDeclaration& function,
                  const std::vector<std::unique_ptr<Expression>>& arguments);
     std::unique_ptr<Expression> call(int offset, std::unique_ptr<Expression> function,
                                      std::vector<std::unique_ptr<Expression>> arguments);
     int coercionCost(const Expression& expr, const Type& type);
     std::unique_ptr<Expression> coerce(std::unique_ptr<Expression> expr, const Type& type);
     std::unique_ptr<Block> convertBlock(const ASTNode& block);
     std::unique_ptr<Statement> convertBreak(const ASTNode& b);
     std::unique_ptr<Expression> convertNumberConstructor(
                                                    int offset,
                                                    const Type& type,
                                                    std::vector<std::unique_ptr<Expression>> params);
     std::unique_ptr<Expression> convertCompoundConstructor(
                                                    int offset,
                                                    const Type& type,
                                                    std::vector<std::unique_ptr<Expression>> params);
     std::unique_ptr<Expression> convertConstructor(int offset,
                                                    const Type& type,
                                                    std::vector<std::unique_ptr<Expression>> params);
     std::unique_ptr<Statement> convertContinue(const ASTNode& c);
     std::unique_ptr<Statement> convertDiscard(const ASTNode& d);
     std::unique_ptr<Statement> convertDo(const ASTNode& d);
     std::unique_ptr<Statement> convertSwitch(const ASTNode& s);
     std::unique_ptr<Expression> convertBinaryExpression(const ASTNode& expression);
     std::unique_ptr<Extension> convertExtension(int offset, StringFragment name);
     std::unique_ptr<Statement> convertExpressionStatement(const ASTNode& s);
     std::unique_ptr<Statement> convertFor(const ASTNode& f);
     std::unique_ptr<Expression> convertIdentifier(const ASTNode& identifier);
     std::unique_ptr<Statement> convertIf(const ASTNode& s);
     std::unique_ptr<Expression> convertIndex(std::unique_ptr<Expression> base,
                                              const ASTNode& index);
     std::unique_ptr<InterfaceBlock> convertInterfaceBlock(const ASTNode& s);
     Modifiers convertModifiers(const Modifiers& m);
     std::unique_ptr<Expression> convertPrefixExpression(const ASTNode& expression);
     std::unique_ptr<Statement> convertReturn(const ASTNode& r);
     std::unique_ptr<Section> convertSection(const ASTNode& e);
     std::unique_ptr<Expression> getCap(int offset, String name);
     std::unique_ptr<Expression> convertCallExpression(const ASTNode& expression);
     std::unique_ptr<Expression> convertFieldExpression(const ASTNode& expression);
     std::unique_ptr<Expression> convertIndexExpression(const ASTNode& expression);
     std::unique_ptr<Expression> convertPostfixExpression(const ASTNode& expression);
     std::unique_ptr<Expression> findEnumRef(int offset,
                                             const Type& type,
                                             StringFragment field,
                                             std::vector<std::unique_ptr<ProgramElement>>& elements);
     std::unique_ptr<Expression> convertTypeField(int offset, const Type& type,
                                                  StringFragment field);
     std::unique_ptr<Expression> convertField(std::unique_ptr<Expression> base,
                                              StringFragment field);
     std::unique_ptr<Expression> convertSwizzle(std::unique_ptr<Expression> base,
                                                StringFragment fields);
     std::unique_ptr<Expression> convertTernaryExpression(const ASTNode& expression);
     std::unique_ptr<Statement> convertVarDeclarationStatement(const ASTNode& s);
     std::unique_ptr<Statement> convertWhile(const ASTNode& w);
     void convertEnum(const ASTNode& e);
     std::unique_ptr<Block> applyInvocationIDWorkaround(std::unique_ptr<Block> main);
     // returns a statement which converts sk_Position from device to normalized coordinates
     std::unique_ptr<Statement> getNormalizeSkPositionCode();
 
     void checkValid(const Expression& expr);
     bool setRefKind(const Expression& expr, VariableReference::RefKind kind);
-    void getConstantInt(const Expression& value, int64_t* out);
+    bool getConstantInt(const Expression& value, int64_t* out);
     bool checkSwizzleWrite(const Swizzle& swizzle);
     void copyIntrinsicIfNeeded(const FunctionDeclaration& function);
 
     std::unique_ptr<ASTFile> fFile;
     const FunctionDeclaration* fCurrentFunction;
     std::unordered_map<String, Program::Settings::Value> fCapsMap;
     std::shared_ptr<SymbolTable> fRootSymbolTable;
     std::shared_ptr<SymbolTable> fSymbolTable;
     // additional statements that need to be inserted before the one that convertStatement is
     // currently working on
     std::vector<std::unique_ptr<Statement>> fExtraStatements;
     // Symbols which have definitions in the include files. The bool tells us whether this
     // intrinsic has been included already.
     std::map<String, std::pair<std::unique_ptr<ProgramElement>, bool>>* fIntrinsics = nullptr;
     std::unordered_set<const FunctionDeclaration*> fReferencedIntrinsics;
     int fLoopLevel;
     int fSwitchLevel;
     ErrorReporter& fErrors;
     int fInvocations;
     std::vector<std::unique_ptr<ProgramElement>>* fInherited;
     std::vector<std::unique_ptr<ProgramElement>>* fProgramElements;
     const Variable* fSkPerVertex = nullptr;
     const Variable* fRTAdjust;
     const Variable* fRTAdjustInterfaceBlock;
     int fRTAdjustFieldIndex;
     int fInlineVarCounter;
     bool fCanInline = true;
     // true if we are currently processing one of the built-in SkSL include files
     bool fIsBuiltinCode;
 
     friend class AutoSymbolTable;
     friend class AutoLoopLevel;
     friend class AutoSwitchLevel;
     friend class AutoDisableInline;
     friend class Compiler;
 };
 
 }  // namespace SkSL
 
 #endif
diff --git a/tests/SkSLErrorTest.cpp b/tests/SkSLErrorTest.cpp
index 864a0b81a3..50181c711d 100644
--- a/tests/SkSLErrorTest.cpp
+++ b/tests/SkSLErrorTest.cpp
@@ -482,7 +482,7 @@ DEF_TEST(SkSLWrongSwitchTypes, r) {
 DEF_TEST(SkSLNonConstantCase, r) {
     test_failure(r,
                  "void main() { int x = 1; switch (1) { case x: break; } }",
-                 "error: 1: case value must be a constant\n1 error\n");
+                 "error: 1: case value must be a constant integer\n1 error\n");
 }
 
 DEF_TEST(SkSLDuplicateCase, r) {
