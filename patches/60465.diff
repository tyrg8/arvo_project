commit a673062084475de6a33576e796e97a44c02529bb
Author: Tim Ledbetter <timledbetter@gmail.com>
Date:   Wed Oct 11 18:12:26 2023 +0100

    LibGfx/BMPLoader: Ensure data offset cannot point past EOF

diff --git a/Userland/Libraries/LibGfx/ImageFormats/BMPLoader.cpp b/Userland/Libraries/LibGfx/ImageFormats/BMPLoader.cpp
index fee77bcdb9..2388cbcfb6 100644
--- a/Userland/Libraries/LibGfx/ImageFormats/BMPLoader.cpp
+++ b/Userland/Libraries/LibGfx/ImageFormats/BMPLoader.cpp
@@ -494,40 +494,45 @@ static bool set_dib_bitmasks(BMPLoadingContext& context, InputStreamer& streamer
 static ErrorOr<void> decode_bmp_header(BMPLoadingContext& context)
 {
     if (!context.file_bytes || context.file_size < bmp_header_size) {
         dbgln_if(BMP_DEBUG, "Missing BMP header");
         context.state = BMPLoadingContext::State::Error;
         return Error::from_string_literal("Missing BMP header");
     }
 
     InputStreamer streamer(context.file_bytes, bmp_header_size);
 
     u16 header = streamer.read_u16();
     if (header != 0x4d42) {
         dbgln_if(BMP_DEBUG, "BMP has invalid magic header number: {:#04x}", header);
         context.state = BMPLoadingContext::State::Error;
         return Error::from_string_literal("BMP has invalid magic header number");
     }
 
     // The reported size of the file in the header is actually not important
     // for decoding the file. Some specifications say that this value should
     // be the size of the header instead, so we just rely on the known file
     // size, instead of a possibly-correct-but-also-possibly-incorrect reported
     // value of the file size.
     streamer.drop_bytes(4);
 
     // Ignore reserved bytes
     streamer.drop_bytes(4);
     context.data_offset = streamer.read_u32();
+    if (context.data_offset >= context.file_size) {
+        dbgln_if(BMP_DEBUG, "BMP has invalid data offset: {}", context.data_offset);
+        context.state = BMPLoadingContext::State::Error;
+        return Error::from_string_literal("BMP has invalid data offset");
+    }
 
     if constexpr (BMP_DEBUG) {
         dbgln("BMP file size: {}", context.file_size);
         dbgln("BMP data offset: {}", context.data_offset);
     }
 
     if (context.data_offset >= context.file_size) {
         dbgln_if(BMP_DEBUG, "BMP data offset is beyond file end?!");
         return Error::from_string_literal("BMP data offset is beyond file end");
     }
 
     return {};
 }
@@ -805,125 +810,131 @@ static bool decode_bmp_v5_dib(BMPLoadingContext& context, InputStreamer& streame
 static ErrorOr<void> decode_bmp_dib(BMPLoadingContext& context)
 {
     if (context.state == BMPLoadingContext::State::Error)
         return Error::from_string_literal("Error before starting decode_bmp_dib");
 
     if (context.state >= BMPLoadingContext::State::DIBDecoded)
         return {};
 
     if (!context.is_included_in_ico)
         TRY(decode_bmp_header(context));
 
     u8 header_size = context.is_included_in_ico ? 0 : bmp_header_size;
 
     if (context.file_size < (u8)(header_size + 4))
         return Error::from_string_literal("File size too short");
 
     InputStreamer streamer(context.file_bytes + header_size, 4);
 
     u32 dib_size = streamer.read_u32();
 
     if (context.file_size < header_size + dib_size)
         return Error::from_string_literal("File size too short");
 
     if (!context.is_included_in_ico && (context.data_offset < header_size + dib_size)) {
         dbgln("Shenanigans! BMP pixel data and header usually don't overlap.");
         return Error::from_string_literal("BMP pixel data and header usually don't overlap");
     }
 
     // NOTE: If this is a headless BMP (embedded on ICO files), then we can only infer the data_offset after we know the data table size.
     // We are also assuming that no Extra bit masks are present
     u32 dib_offset = dib_size;
     if (!context.is_included_in_ico) {
         if (context.data_offset < header_size + 4u)
             return Error::from_string_literal("Data offset too small");
 
         dib_offset = context.data_offset - header_size - 4;
     }
 
     if (dib_offset >= context.file_size)
         return Error::from_string_literal("DIB too large");
 
     streamer = InputStreamer(context.file_bytes + header_size + 4, dib_offset);
 
     dbgln_if(BMP_DEBUG, "BMP dib size: {}", dib_size);
 
     bool error = false;
 
     if (dib_size == 12) {
         context.dib_type = DIBType::Core;
         if (!decode_bmp_core_dib(context, streamer))
             error = true;
     } else if (dib_size == 64) {
         context.dib_type = DIBType::OSV2;
         if (!decode_bmp_osv2_dib(context, streamer))
             error = true;
     } else if (dib_size == 16) {
         context.dib_type = DIBType::OSV2Short;
         if (!decode_bmp_osv2_dib(context, streamer, true))
             error = true;
     } else if (dib_size == 40) {
         context.dib_type = DIBType::Info;
         if (!decode_bmp_info_dib(context, streamer))
             error = true;
     } else if (dib_size == 52) {
         context.dib_type = DIBType::V2;
         if (!decode_bmp_v2_dib(context, streamer))
             error = true;
     } else if (dib_size == 56) {
         context.dib_type = DIBType::V3;
         if (!decode_bmp_v3_dib(context, streamer))
             error = true;
     } else if (dib_size == 108) {
         context.dib_type = DIBType::V4;
         if (!decode_bmp_v4_dib(context, streamer))
             error = true;
     } else if (dib_size == 124) {
         context.dib_type = DIBType::V5;
         if (!decode_bmp_v5_dib(context, streamer))
             error = true;
     } else {
         dbgln("Unsupported BMP DIB size: {}", dib_size);
         error = true;
     }
 
     switch (context.dib.info.compression) {
     case Compression::RGB:
     case Compression::RLE8:
     case Compression::RLE4:
     case Compression::BITFIELDS:
     case Compression::RLE24:
     case Compression::PNG:
     case Compression::ALPHABITFIELDS:
     case Compression::CMYK:
     case Compression::CMYKRLE8:
     case Compression::CMYKRLE4:
         break;
     default:
         error = true;
     }
 
     if (!error && !set_dib_bitmasks(context, streamer))
         error = true;
 
     if (error) {
         dbgln("BMP has an invalid DIB");
         context.state = BMPLoadingContext::State::Error;
         return Error::from_string_literal("BMP has an invalid DIB");
     }
 
     // NOTE: If this is a headless BMP (included on ICOns), the data_offset is set based on the number_of_palette_colors found on the DIB header
     if (context.is_included_in_ico) {
         if (context.dib.core.bpp > 8)
             context.data_offset = dib_size;
         else {
             auto bytes_per_color = context.dib_type == DIBType::Core ? 3 : 4;
             u32 max_colors = 1 << context.dib.core.bpp;
             auto size_of_color_table = (context.dib.info.number_of_palette_colors > 0 ? context.dib.info.number_of_palette_colors : max_colors) * bytes_per_color;
             context.data_offset = dib_size + size_of_color_table;
         }
     }
 
+    if (context.data_offset >= context.file_size) {
+        dbgln_if(BMP_DEBUG, "BMP has invalid data offset: {}", context.data_offset);
+        context.state = BMPLoadingContext::State::Error;
+        return Error::from_string_literal("BMP has invalid data offset");
+    }
+
     context.state = BMPLoadingContext::State::DIBDecoded;
 
     return {};
 }
