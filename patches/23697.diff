commit 5d164a2764de0e6f576553c1e350830bc3a1f4b1
Author: Brian Osman <brianosman@google.com>
Date:   Thu Jun 25 09:20:02 2020 -0400

    Initialize SkVertices::Sizes::fTotal
    
    This value is used to determine if construction of the Sizes succeeded.
    At some point, early returns were added to the constructor, causing
    serialization code to use an uninitialized value if any of those early
    returns triggered.
    
    Bug: oss-fuzz:23697
    Change-Id: I65479e30fd6fdf5d5f43dc1ea1247e18d546fa12
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/298850
    Reviewed-by: Mike Klein <mtklein@google.com>
    Commit-Queue: Brian Osman <brianosman@google.com>

diff --git a/src/core/SkVertices.cpp b/src/core/SkVertices.cpp
index 0f1a834027..e2bb1a8b07 100644
--- a/src/core/SkVertices.cpp
+++ b/src/core/SkVertices.cpp
@@ -111,80 +111,80 @@ struct SkVertices::Desc {
 struct SkVertices::Sizes {
     Sizes(const Desc& desc) {
         desc.validate();
 
         SkSafeMath safe;
 
         fNameSize = 0;
         for (int i = 0; i < desc.fAttributeCount; ++i) {
             const Attribute& attr(desc.fAttributes[i]);
             if (!attr.isValid()) {
                 return;
             }
             if (attr.fMarkerName) {
                 fNameSize = safe.add(fNameSize, strlen(attr.fMarkerName));
             }
         }
         fNameSize = SkAlign4(fNameSize);
 
         fAttrSize = safe.mul(desc.fAttributeCount, sizeof(Attribute));
         fVSize = safe.mul(desc.fVertexCount, sizeof(SkPoint));
         fDSize = safe.mul(custom_data_size(desc.fAttributes, desc.fAttributeCount),
                           desc.fVertexCount);
         fTSize = desc.fHasTexs ? safe.mul(desc.fVertexCount, sizeof(SkPoint)) : 0;
         fCSize = desc.fHasColors ? safe.mul(desc.fVertexCount, sizeof(SkColor)) : 0;
 
         fBuilderTriFanISize = 0;
         fISize = safe.mul(desc.fIndexCount, sizeof(uint16_t));
         if (kTriangleFan_VertexMode == desc.fMode) {
             int numFanTris = 0;
             if (desc.fIndexCount) {
                 fBuilderTriFanISize = fISize;
                 numFanTris = desc.fIndexCount - 2;
             } else {
                 numFanTris = desc.fVertexCount - 2;
                 // By forcing this to become indexed we are adding a constraint to the maximum
                 // number of vertices.
                 if (desc.fVertexCount > (SkTo<int>(UINT16_MAX) + 1)) {
                     sk_bzero(this, sizeof(*this));
                     return;
                 }
             }
             if (numFanTris <= 0) {
                 sk_bzero(this, sizeof(*this));
                 return;
             }
             fISize = safe.mul(numFanTris, 3 * sizeof(uint16_t));
         }
 
         fTotal = safe.add(sizeof(SkVertices),
                  safe.add(fAttrSize,
                  safe.add(fNameSize,
                  safe.add(fVSize,
                  safe.add(fDSize,
                  safe.add(fTSize,
                  safe.add(fCSize,
                           fISize)))))));
 
         if (safe.ok()) {
             fArrays = fVSize + fDSize + fTSize + fCSize + fISize;  // just the sum of the arrays
         } else {
             sk_bzero(this, sizeof(*this));
         }
     }
 
     bool isValid() const { return fTotal != 0; }
 
-    size_t fTotal;  // size of entire SkVertices allocation (obj + arrays)
+    size_t fTotal = 0;  // size of entire SkVertices allocation (obj + arrays)
     size_t fAttrSize;  // size of attributes
     size_t fNameSize;  // size of attribute marker names
     size_t fArrays; // size of all the data arrays (V + D + T + C + I)
     size_t fVSize;
     size_t fDSize;  // size of all customData = [customDataSize * fVertexCount]
     size_t fTSize;
     size_t fCSize;
     size_t fISize;
 
     // For indexed tri-fans this is the number of amount of space fo indices needed in the builder
     // before conversion to indexed triangles (or zero if not indexed or not a triangle fan).
     size_t fBuilderTriFanISize;
 };
