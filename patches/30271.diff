commit 665f8d2e3e52c3260bfc682044843a4183ecc210
Author: Todd C. Miller <Todd.Miller@sudo.ws>
Date:   Wed Feb 3 16:50:04 2021 -0700

    Only strip double quotes from an include path if len >= 2.
    Found locally using libfuzzer/oss-fuzz.

diff --git a/plugins/sudoers/toke.c b/plugins/sudoers/toke.c
index 6717e4f9f..f8dd1e13d 100644
--- a/plugins/sudoers/toke.c
+++ b/plugins/sudoers/toke.c
@@ -5201,72 +5201,75 @@ init_lexer(void)
  * Returns a reference-counted string.
  */
 static char *
-expand_include(const char *opath, size_t olen)
+expand_include(const char *opath)
 {
     const char *cp, *ep;
     char *path, *pp;
-    int dirlen = 0, len;
+    size_t len, olen, dirlen = 0;
     size_t shost_len = 0;
     bool subst = false;
     debug_decl(expand_include, SUDOERS_DEBUG_PARSER);
 
     /* Strip double quotes if present. */
-    if (*opath == '"') {
+    olen = strlen(opath);
+    if (olen > 1 && opath[0] == '"' && opath[olen - 1] == '"') {
 	opath++;
 	olen -= 2;
     }
+    if (olen == 0)
+	debug_return_ptr(NULL);
 
     /* Relative paths are located in the same dir as the sudoers file. */
     if (*opath != '/') {
 	char *dirend = strrchr(sudoers, '/');
 	if (dirend != NULL)
-	    dirlen = (int)(dirend - sudoers) + 1;
+	    dirlen = (size_t)(dirend - sudoers) + 1;
     }
 
     len = olen;
     for (cp = opath, ep = opath + olen; cp < ep; cp++) {
 	if (cp[0] == '%' && cp[1] == 'h') {
 	    shost_len = strlen(user_shost);
 	    len += shost_len - 2;
 	    subst = true;
 	}
     }
 
     /* Make a copy of the fully-qualified path and return it. */
     path = pp = rcstr_alloc(len + dirlen);
     if (path == NULL) {
 	sudo_warnx(U_("%s: %s"), __func__, U_("unable to allocate memory"));
 	sudoerserror(NULL);
 	debug_return_str(NULL);
     }
     if (dirlen) {
 	memcpy(path, sudoers, dirlen);
 	pp += dirlen;
     }
     if (subst) {
 	/* substitute for %h */
 	cp = opath;
 	while (cp < ep) {
 	    if (cp[0] == '%' && cp[1] == 'h') {
 		memcpy(pp, user_shost, shost_len);
 		pp += shost_len;
 		cp += 2;
 		continue;
 	    }
 	    *pp++ = *cp++;
 	}
 	*pp = '\0';
     } else {
 	memcpy(pp, opath, len);
 	pp[len] = '\0';
     }
 
     debug_return_str(path);
 }
 
 /*
  * Open an include file (or file from a directory), push the old
  * sudoers file buffer and switch to the new one.
  * A missing or insecure include dir is simply ignored.
  * Returns false on error, else true.
  */
@@ -5274,109 +5277,109 @@ bool
 push_include(const char *opath, bool isdir)
 {
     struct path_list *pl;
     char *path;
     FILE *fp;
     debug_decl(push_include, SUDOERS_DEBUG_PARSER);
 
-    if ((path = expand_include(opath, strlen(opath))) == NULL)
+    if ((path = expand_include(opath)) == NULL)
 	debug_return_bool(false);
 
     /* push current state onto stack */
     if (idepth >= istacksize) {
 	struct include_stack *new_istack;
 
 	if (idepth > MAX_SUDOERS_DEPTH) {
 	    sudoerserror(N_("too many levels of includes"));
 	    rcstr_delref(path);
 	    debug_return_bool(false);
 	}
 	istacksize += SUDOERS_STACK_INCREMENT;
 	new_istack = reallocarray(istack, istacksize, sizeof(*istack));
 	if (new_istack == NULL) {
 	    sudo_warnx(U_("%s: %s"), __func__, U_("unable to allocate memory"));
 	    sudoerserror(NULL);
 	    rcstr_delref(path);
 	    debug_return_bool(false);
 	}
 	istack = new_istack;
     }
     SLIST_INIT(&istack[idepth].more);
     if (isdir) {
 	struct stat sb;
 	int count, status;
 
 	status = sudo_secure_dir(path, sudoers_uid, sudoers_gid, &sb);
 	if (status != SUDO_PATH_SECURE) {
 	    if (sudoers_warnings) {
 		switch (status) {
 		case SUDO_PATH_BAD_TYPE:
 		    errno = ENOTDIR;
 		    sudo_warn("%s", path);
 		    break;
 		case SUDO_PATH_WRONG_OWNER:
 		    sudo_warnx(U_("%s is owned by uid %u, should be %u"),   
 			path, (unsigned int) sb.st_uid,
 			(unsigned int) sudoers_uid);
 		    break;
 		case SUDO_PATH_WORLD_WRITABLE:
 		    sudo_warnx(U_("%s is world writable"), path);
 		    break;
 		case SUDO_PATH_GROUP_WRITABLE:
 		    sudo_warnx(U_("%s is owned by gid %u, should be %u"),
 			path, (unsigned int) sb.st_gid,
 			(unsigned int) sudoers_gid);
 		    break;
 		default:
 		    break;
 		}
 	    }
 	    /* A missing or insecure include dir is not a fatal error. */
 	    rcstr_delref(path);
 	    debug_return_bool(true);
 	}
 	count = switch_dir(&istack[idepth], path);
 	if (count <= 0) {
 	    /* switch_dir() called sudoerserror() for us */
 	    rcstr_delref(path);
 	    debug_return_bool(count ? false : true);
 	}
 
 	/* Parse the first dir entry we can open, leave the rest for later. */
 	do {
 	    rcstr_delref(path);
 	    if ((pl = SLIST_FIRST(&istack[idepth].more)) == NULL) {
 		/* Unable to open any files in include dir, not an error. */
 		debug_return_bool(true);
 	    }
 	    SLIST_REMOVE_HEAD(&istack[idepth].more, entries);
 	    path = pl->path;
 	    free(pl);
 	} while ((fp = open_sudoers(path, false, &keepopen)) == NULL);
     } else {
 	if ((fp = open_sudoers(path, true, &keepopen)) == NULL) {
 	    /* The error was already printed by open_sudoers() */
 	    sudoerserror(NULL);
 	    rcstr_delref(path);
 	    debug_return_bool(false);
 	}
     }
     /* Push the old (current) file and open the new one. */
     istack[idepth].path = sudoers; /* push old path (and its ref) */
     istack[idepth].line = sudolinebuf;
     istack[idepth].bs = YY_CURRENT_BUFFER;
     istack[idepth].lineno = sudolineno;
     istack[idepth].keepopen = keepopen;
     idepth++;
     sudolineno = 1;
     sudoers = path;
     sudoers_switch_to_buffer(sudoers_create_buffer(fp, YY_BUF_SIZE));
     memset(&sudolinebuf, 0, sizeof(sudolinebuf));
 
     debug_return_bool(true);
 }
 
 /*
  * Restore the previous sudoers file and buffer, or, in the case
  * of an includedir, switch to the next file in the dir.
  * Returns false if there is nothing to pop, else true.
  */
diff --git a/plugins/sudoers/toke.l b/plugins/sudoers/toke.l
index 499f3b1a8..22430ac41 100644
--- a/plugins/sudoers/toke.l
+++ b/plugins/sudoers/toke.l
@@ -1006,72 +1006,75 @@ init_lexer(void)
  * Returns a reference-counted string.
  */
 static char *
-expand_include(const char *opath, size_t olen)
+expand_include(const char *opath)
 {
     const char *cp, *ep;
     char *path, *pp;
-    int dirlen = 0, len;
+    size_t len, olen, dirlen = 0;
     size_t shost_len = 0;
     bool subst = false;
     debug_decl(expand_include, SUDOERS_DEBUG_PARSER);
 
     /* Strip double quotes if present. */
-    if (*opath == '"') {
+    olen = strlen(opath);
+    if (olen > 1 && opath[0] == '"' && opath[olen - 1] == '"') {
 	opath++;
 	olen -= 2;
     }
+    if (olen == 0)
+	debug_return_ptr(NULL);
 
     /* Relative paths are located in the same dir as the sudoers file. */
     if (*opath != '/') {
 	char *dirend = strrchr(sudoers, '/');
 	if (dirend != NULL)
-	    dirlen = (int)(dirend - sudoers) + 1;
+	    dirlen = (size_t)(dirend - sudoers) + 1;
     }
 
     len = olen;
     for (cp = opath, ep = opath + olen; cp < ep; cp++) {
 	if (cp[0] == '%' && cp[1] == 'h') {
 	    shost_len = strlen(user_shost);
 	    len += shost_len - 2;
 	    subst = true;
 	}
     }
 
     /* Make a copy of the fully-qualified path and return it. */
     path = pp = rcstr_alloc(len + dirlen);
     if (path == NULL) {
 	sudo_warnx(U_("%s: %s"), __func__, U_("unable to allocate memory"));
 	sudoerserror(NULL);
 	debug_return_str(NULL);
     }
     if (dirlen) {
 	memcpy(path, sudoers, dirlen);
 	pp += dirlen;
     }
     if (subst) {
 	/* substitute for %h */
 	cp = opath;
 	while (cp < ep) {
 	    if (cp[0] == '%' && cp[1] == 'h') {
 		memcpy(pp, user_shost, shost_len);
 		pp += shost_len;
 		cp += 2;
 		continue;
 	    }
 	    *pp++ = *cp++;
 	}
 	*pp = '\0';
     } else {
 	memcpy(pp, opath, len);
 	pp[len] = '\0';
     }
 
     debug_return_str(path);
 }
 
 /*
  * Open an include file (or file from a directory), push the old
  * sudoers file buffer and switch to the new one.
  * A missing or insecure include dir is simply ignored.
  * Returns false on error, else true.
  */
@@ -1079,109 +1082,109 @@ bool
 push_include(const char *opath, bool isdir)
 {
     struct path_list *pl;
     char *path;
     FILE *fp;
     debug_decl(push_include, SUDOERS_DEBUG_PARSER);
 
-    if ((path = expand_include(opath, strlen(opath))) == NULL)
+    if ((path = expand_include(opath)) == NULL)
 	debug_return_bool(false);
 
     /* push current state onto stack */
     if (idepth >= istacksize) {
 	struct include_stack *new_istack;
 
 	if (idepth > MAX_SUDOERS_DEPTH) {
 	    sudoerserror(N_("too many levels of includes"));
 	    rcstr_delref(path);
 	    debug_return_bool(false);
 	}
 	istacksize += SUDOERS_STACK_INCREMENT;
 	new_istack = reallocarray(istack, istacksize, sizeof(*istack));
 	if (new_istack == NULL) {
 	    sudo_warnx(U_("%s: %s"), __func__, U_("unable to allocate memory"));
 	    sudoerserror(NULL);
 	    rcstr_delref(path);
 	    debug_return_bool(false);
 	}
 	istack = new_istack;
     }
     SLIST_INIT(&istack[idepth].more);
     if (isdir) {
 	struct stat sb;
 	int count, status;
 
 	status = sudo_secure_dir(path, sudoers_uid, sudoers_gid, &sb);
 	if (status != SUDO_PATH_SECURE) {
 	    if (sudoers_warnings) {
 		switch (status) {
 		case SUDO_PATH_BAD_TYPE:
 		    errno = ENOTDIR;
 		    sudo_warn("%s", path);
 		    break;
 		case SUDO_PATH_WRONG_OWNER:
 		    sudo_warnx(U_("%s is owned by uid %u, should be %u"),   
 			path, (unsigned int) sb.st_uid,
 			(unsigned int) sudoers_uid);
 		    break;
 		case SUDO_PATH_WORLD_WRITABLE:
 		    sudo_warnx(U_("%s is world writable"), path);
 		    break;
 		case SUDO_PATH_GROUP_WRITABLE:
 		    sudo_warnx(U_("%s is owned by gid %u, should be %u"),
 			path, (unsigned int) sb.st_gid,
 			(unsigned int) sudoers_gid);
 		    break;
 		default:
 		    break;
 		}
 	    }
 	    /* A missing or insecure include dir is not a fatal error. */
 	    rcstr_delref(path);
 	    debug_return_bool(true);
 	}
 	count = switch_dir(&istack[idepth], path);
 	if (count <= 0) {
 	    /* switch_dir() called sudoerserror() for us */
 	    rcstr_delref(path);
 	    debug_return_bool(count ? false : true);
 	}
 
 	/* Parse the first dir entry we can open, leave the rest for later. */
 	do {
 	    rcstr_delref(path);
 	    if ((pl = SLIST_FIRST(&istack[idepth].more)) == NULL) {
 		/* Unable to open any files in include dir, not an error. */
 		debug_return_bool(true);
 	    }
 	    SLIST_REMOVE_HEAD(&istack[idepth].more, entries);
 	    path = pl->path;
 	    free(pl);
 	} while ((fp = open_sudoers(path, false, &keepopen)) == NULL);
     } else {
 	if ((fp = open_sudoers(path, true, &keepopen)) == NULL) {
 	    /* The error was already printed by open_sudoers() */
 	    sudoerserror(NULL);
 	    rcstr_delref(path);
 	    debug_return_bool(false);
 	}
     }
     /* Push the old (current) file and open the new one. */
     istack[idepth].path = sudoers; /* push old path (and its ref) */
     istack[idepth].line = sudolinebuf;
     istack[idepth].bs = YY_CURRENT_BUFFER;
     istack[idepth].lineno = sudolineno;
     istack[idepth].keepopen = keepopen;
     idepth++;
     sudolineno = 1;
     sudoers = path;
     sudoers_switch_to_buffer(sudoers_create_buffer(fp, YY_BUF_SIZE));
     memset(&sudolinebuf, 0, sizeof(sudolinebuf));
 
     debug_return_bool(true);
 }
 
 /*
  * Restore the previous sudoers file and buffer, or, in the case
  * of an includedir, switch to the next file in the dir.
  * Returns false if there is nothing to pop, else true.
  */
