commit 84f24adc5ba65e7850d7a83e8839e305ef23c8d4
Author: Alan Modra <amodra@gmail.com>
Date:   Mon Oct 16 19:34:03 2023 +1030

    asan: Invalid free in alpha_ecoff_get_relocated_section_contents
    
    This fixes an ancient bug in commit a3a33af390 (which makes me think
    this code has never been used).
    
            * coff-alpha.c (alpha_ecoff_get_relocated_section_contents): Iterate
            through reloc_vector using a temp.

diff --git a/bfd/coff-alpha.c b/bfd/coff-alpha.c
index 1b34a8957c2..59476b57237 100644
--- a/bfd/coff-alpha.c
+++ b/bfd/coff-alpha.c
@@ -726,422 +726,422 @@ static bfd_byte *
 alpha_ecoff_get_relocated_section_contents (bfd *abfd,
 					    struct bfd_link_info *link_info,
 					    struct bfd_link_order *link_order,
 					    bfd_byte *data,
 					    bool relocatable,
 					    asymbol **symbols)
 {
   bfd *input_bfd = link_order->u.indirect.section->owner;
   asection *input_section = link_order->u.indirect.section;
   long reloc_size;
   arelent **reloc_vector;
   long reloc_count;
   bfd *output_bfd = relocatable ? abfd : (bfd *) NULL;
   bfd_vma gp;
   bool gp_undefined;
   bfd_vma stack[RELOC_STACKSIZE];
   int tos = 0;
 
   reloc_size = bfd_get_reloc_upper_bound (input_bfd, input_section);
   if (reloc_size < 0)
     return NULL;
 
   bfd_byte *orig_data = data;
   if (!bfd_get_full_section_contents (input_bfd, input_section, &data))
     return NULL;
 
   if (data == NULL)
     return NULL;
 
   if (reloc_size == 0)
     return data;
 
   reloc_vector = (arelent **) bfd_malloc (reloc_size);
   if (reloc_vector == NULL)
     goto error_return;
 
   reloc_count = bfd_canonicalize_reloc (input_bfd, input_section,
 					reloc_vector, symbols);
   if (reloc_count < 0)
     goto error_return;
   if (reloc_count == 0)
     goto successful_return;
 
   /* Get the GP value for the output BFD.  */
   gp_undefined = false;
   gp = _bfd_get_gp_value (abfd);
   if (gp == 0)
     {
       if (relocatable)
 	{
 	  asection *sec;
 	  bfd_vma lo;
 
 	  /* Make up a value.  */
 	  lo = (bfd_vma) -1;
 	  for (sec = abfd->sections; sec != NULL; sec = sec->next)
 	    {
 	      if (sec->vma < lo
 		  && (strcmp (sec->name, ".sbss") == 0
 		      || strcmp (sec->name, ".sdata") == 0
 		      || strcmp (sec->name, ".lit4") == 0
 		      || strcmp (sec->name, ".lit8") == 0
 		      || strcmp (sec->name, ".lita") == 0))
 		lo = sec->vma;
 	    }
 	  gp = lo + 0x8000;
 	  _bfd_set_gp_value (abfd, gp);
 	}
       else
 	{
 	  struct bfd_link_hash_entry *h;
 
 	  h = bfd_link_hash_lookup (link_info->hash, "_gp", false, false,
 				    true);
 	  if (h == (struct bfd_link_hash_entry *) NULL
 	      || h->type != bfd_link_hash_defined)
 	    gp_undefined = true;
 	  else
 	    {
 	      gp = (h->u.def.value
 		    + h->u.def.section->output_section->vma
 		    + h->u.def.section->output_offset);
 	      _bfd_set_gp_value (abfd, gp);
 	    }
 	}
     }
 
-  for (; *reloc_vector != (arelent *) NULL; reloc_vector++)
+  for (arelent **relp = reloc_vector; *relp != NULL; relp++)
     {
       arelent *rel;
       bfd_reloc_status_type r;
       char *err;
 
-      rel = *reloc_vector;
+      rel = *relp;
       r = bfd_reloc_ok;
       switch (rel->howto->type)
 	{
 	case ALPHA_R_IGNORE:
 	  rel->address += input_section->output_offset;
 	  break;
 
 	case ALPHA_R_REFLONG:
 	case ALPHA_R_REFQUAD:
 	case ALPHA_R_BRADDR:
 	case ALPHA_R_HINT:
 	case ALPHA_R_SREL16:
 	case ALPHA_R_SREL32:
 	case ALPHA_R_SREL64:
 	  if (relocatable
 	      && ((*rel->sym_ptr_ptr)->flags & BSF_SECTION_SYM) == 0)
 	    {
 	      rel->address += input_section->output_offset;
 	      break;
 	    }
 	  r = bfd_perform_relocation (input_bfd, rel, data, input_section,
 				      output_bfd, &err);
 	  break;
 
 	case ALPHA_R_GPREL32:
 	  /* This relocation is used in a switch table.  It is a 32
 	     bit offset from the current GP value.  We must adjust it
 	     by the different between the original GP value and the
 	     current GP value.  The original GP value is stored in the
 	     addend.  We adjust the addend and let
 	     bfd_perform_relocation finish the job.  */
 	  rel->addend -= gp;
 	  r = bfd_perform_relocation (input_bfd, rel, data, input_section,
 				      output_bfd, &err);
 	  if (r == bfd_reloc_ok && gp_undefined)
 	    {
 	      r = bfd_reloc_dangerous;
 	      err = (char *) _("GP relative relocation used when GP not defined");
 	    }
 	  break;
 
 	case ALPHA_R_LITERAL:
 	  /* This is a reference to a literal value, generally
 	     (always?) in the .lita section.  This is a 16 bit GP
 	     relative relocation.  Sometimes the subsequent reloc is a
 	     LITUSE reloc, which indicates how this reloc is used.
 	     This sometimes permits rewriting the two instructions
 	     referred to by the LITERAL and the LITUSE into different
 	     instructions which do not refer to .lita.  This can save
 	     a memory reference, and permits removing a value from
 	     .lita thus saving GP relative space.
 
 	     We do not these optimizations.  To do them we would need
 	     to arrange to link the .lita section first, so that by
 	     the time we got here we would know the final values to
 	     use.  This would not be particularly difficult, but it is
 	     not currently implemented.  */
 
 	  {
 	    unsigned long insn;
 
 	    /* I believe that the LITERAL reloc will only apply to a
 	       ldq or ldl instruction, so check my assumption.  */
 	    insn = bfd_get_32 (input_bfd, data + rel->address);
 	    BFD_ASSERT (((insn >> 26) & 0x3f) == 0x29
 			|| ((insn >> 26) & 0x3f) == 0x28);
 
 	    rel->addend -= gp;
 	    r = bfd_perform_relocation (input_bfd, rel, data, input_section,
 					output_bfd, &err);
 	    if (r == bfd_reloc_ok && gp_undefined)
 	      {
 		r = bfd_reloc_dangerous;
 		err =
 		  (char *) _("GP relative relocation used when GP not defined");
 	      }
 	  }
 	  break;
 
 	case ALPHA_R_LITUSE:
 	  /* See ALPHA_R_LITERAL above for the uses of this reloc.  It
 	     does not cause anything to happen, itself.  */
 	  rel->address += input_section->output_offset;
 	  break;
 
 	case ALPHA_R_GPDISP:
 	  /* This marks the ldah of an ldah/lda pair which loads the
 	     gp register with the difference of the gp value and the
 	     current location.  The second of the pair is r_size bytes
 	     ahead; it used to be marked with an ALPHA_R_IGNORE reloc,
 	     but that no longer happens in OSF/1 3.2.  */
 	  {
 	    unsigned long insn1, insn2;
 	    bfd_vma addend;
 
 	    /* Get the two instructions.  */
 	    insn1 = bfd_get_32 (input_bfd, data + rel->address);
 	    insn2 = bfd_get_32 (input_bfd, data + rel->address + rel->addend);
 
 	    BFD_ASSERT (((insn1 >> 26) & 0x3f) == 0x09); /* ldah */
 	    BFD_ASSERT (((insn2 >> 26) & 0x3f) == 0x08); /* lda */
 
 	    /* Get the existing addend.  We must account for the sign
 	       extension done by lda and ldah.  */
 	    addend = ((insn1 & 0xffff) << 16) + (insn2 & 0xffff);
 	    if (insn1 & 0x8000)
 	      {
 		addend -= 0x80000000;
 		addend -= 0x80000000;
 	      }
 	    if (insn2 & 0x8000)
 	      addend -= 0x10000;
 
 	    /* The existing addend includes the different between the
 	       gp of the input BFD and the address in the input BFD.
 	       Subtract this out.  */
 	    addend -= (ecoff_data (input_bfd)->gp
 		       - (input_section->vma + rel->address));
 
 	    /* Now add in the final gp value, and subtract out the
 	       final address.  */
 	    addend += (gp
 		       - (input_section->output_section->vma
 			  + input_section->output_offset
 			  + rel->address));
 
 	    /* Change the instructions, accounting for the sign
 	       extension, and write them out.  */
 	    if (addend & 0x8000)
 	      addend += 0x10000;
 	    insn1 = (insn1 & 0xffff0000) | ((addend >> 16) & 0xffff);
 	    insn2 = (insn2 & 0xffff0000) | (addend & 0xffff);
 
 	    bfd_put_32 (input_bfd, (bfd_vma) insn1, data + rel->address);
 	    bfd_put_32 (input_bfd, (bfd_vma) insn2,
 			data + rel->address + rel->addend);
 
 	    rel->address += input_section->output_offset;
 	  }
 	  break;
 
 	case ALPHA_R_OP_PUSH:
 	  /* Push a value on the reloc evaluation stack.  */
 	  {
 	    asymbol *symbol;
 	    bfd_vma relocation;
 
 	    if (relocatable)
 	      {
 		rel->address += input_section->output_offset;
 		break;
 	      }
 
 	    /* Figure out the relocation of this symbol.  */
 	    symbol = *rel->sym_ptr_ptr;
 
 	    if (bfd_is_und_section (symbol->section))
 	      r = bfd_reloc_undefined;
 
 	    if (bfd_is_com_section (symbol->section))
 	      relocation = 0;
 	    else
 	      relocation = symbol->value;
 	    relocation += symbol->section->output_section->vma;
 	    relocation += symbol->section->output_offset;
 	    relocation += rel->addend;
 
 	    if (tos >= RELOC_STACKSIZE)
 	      abort ();
 
 	    stack[tos++] = relocation;
 	  }
 	  break;
 
 	case ALPHA_R_OP_STORE:
 	  /* Store a value from the reloc stack into a bitfield.  */
 	  {
 	    bfd_vma val;
 	    int offset, size;
 
 	    if (relocatable)
 	      {
 		rel->address += input_section->output_offset;
 		break;
 	      }
 
 	    if (tos == 0)
 	      abort ();
 
 	    /* The offset and size for this reloc are encoded into the
 	       addend field by alpha_adjust_reloc_in.  */
 	    offset = (rel->addend >> 8) & 0xff;
 	    size = rel->addend & 0xff;
 
 	    val = bfd_get_64 (abfd, data + rel->address);
 	    val &=~ (((1 << size) - 1) << offset);
 	    val |= (stack[--tos] & ((1 << size) - 1)) << offset;
 	    bfd_put_64 (abfd, val, data + rel->address);
 	  }
 	  break;
 
 	case ALPHA_R_OP_PSUB:
 	  /* Subtract a value from the top of the stack.  */
 	  {
 	    asymbol *symbol;
 	    bfd_vma relocation;
 
 	    if (relocatable)
 	      {
 		rel->address += input_section->output_offset;
 		break;
 	      }
 
 	    /* Figure out the relocation of this symbol.  */
 	    symbol = *rel->sym_ptr_ptr;
 
 	    if (bfd_is_und_section (symbol->section))
 	      r = bfd_reloc_undefined;
 
 	    if (bfd_is_com_section (symbol->section))
 	      relocation = 0;
 	    else
 	      relocation = symbol->value;
 	    relocation += symbol->section->output_section->vma;
 	    relocation += symbol->section->output_offset;
 	    relocation += rel->addend;
 
 	    if (tos == 0)
 	      abort ();
 
 	    stack[tos - 1] -= relocation;
 	  }
 	  break;
 
 	case ALPHA_R_OP_PRSHIFT:
 	  /* Shift the value on the top of the stack.  */
 	  {
 	    asymbol *symbol;
 	    bfd_vma relocation;
 
 	    if (relocatable)
 	      {
 		rel->address += input_section->output_offset;
 		break;
 	      }
 
 	    /* Figure out the relocation of this symbol.  */
 	    symbol = *rel->sym_ptr_ptr;
 
 	    if (bfd_is_und_section (symbol->section))
 	      r = bfd_reloc_undefined;
 
 	    if (bfd_is_com_section (symbol->section))
 	      relocation = 0;
 	    else
 	      relocation = symbol->value;
 	    relocation += symbol->section->output_section->vma;
 	    relocation += symbol->section->output_offset;
 	    relocation += rel->addend;
 
 	    if (tos == 0)
 	      abort ();
 
 	    stack[tos - 1] >>= relocation;
 	  }
 	  break;
 
 	case ALPHA_R_GPVALUE:
 	  /* I really don't know if this does the right thing.  */
 	  gp = rel->addend;
 	  gp_undefined = false;
 	  break;
 
 	default:
 	  abort ();
 	}
 
       if (relocatable)
 	{
 	  asection *os = input_section->output_section;
 
 	  /* A partial link, so keep the relocs.  */
 	  os->orelocation[os->reloc_count] = rel;
 	  os->reloc_count++;
 	}
 
       if (r != bfd_reloc_ok)
 	{
 	  switch (r)
 	    {
 	    case bfd_reloc_undefined:
 	      (*link_info->callbacks->undefined_symbol)
 		(link_info, bfd_asymbol_name (*rel->sym_ptr_ptr),
 		 input_bfd, input_section, rel->address, true);
 	      break;
 	    case bfd_reloc_dangerous:
 	      (*link_info->callbacks->reloc_dangerous)
 		(link_info, err, input_bfd, input_section, rel->address);
 	      break;
 	    case bfd_reloc_overflow:
 	      (*link_info->callbacks->reloc_overflow)
 		(link_info, NULL, bfd_asymbol_name (*rel->sym_ptr_ptr),
 		 rel->howto->name, rel->addend, input_bfd,
 		 input_section, rel->address);
 	      break;
 	    case bfd_reloc_outofrange:
 	    default:
 	      abort ();
 	      break;
 	    }
 	}
     }
 
   if (tos != 0)
     abort ();
 
  successful_return:
   free (reloc_vector);
   return data;
 
  error_return:
   free (reloc_vector);
   if (orig_data == NULL)
     free (data);
   return NULL;
 }
 
 /* Get the howto structure for a generic reloc type.  */
