commit 497b6b81bdf59afe1551b2ea38fcc45fe100057d
Author: Martin T. H. Sandsmark <martin.sandsmark@kde.org>
Date:   Wed Apr 15 09:46:54 2020 +0200

    Fix build on Windows.
    
    We added our own implementation of rand_r to make sure we use the same
    as Gimp, and to make Windows work. But we need to actually use it
    everywhere.
    
    Discussion in Differential:
    
    Differential Revision: https://phabricator.kde.org/D25267

diff --git a/src/imageformats/xcf.cpp b/src/imageformats/xcf.cpp
index fe16a83..5bf6077 100644
--- a/src/imageformats/xcf.cpp
+++ b/src/imageformats/xcf.cpp
@@ -3162,63 +3162,63 @@ void XCFImageFormat::mergeIndexedAToRGB(const Layer &layer, uint i, uint j, int
 /*!
  * Dissolving pixels: pick a random number between 0 and 255. If the pixel's
  * alpha is less than that, make it transparent.
  * \param image the image tile to dissolve.
  * \param x the global x position of the tile.
  * \param y the global y position of the tile.
  */
 void XCFImageFormat::dissolveRGBPixels(QImage &image, int x, int y)
 {
     // The apparently spurious rand() calls are to wind the random
     // numbers up to the same point for each tile.
 
     for (int l = 0; l < image.height(); l++) {
         unsigned int next = randomTable.values[(l + y) % RANDOM_TABLE_SIZE];
 
         for (int k = 0; k < x; k++) {
             RandomTable::rand_r(&next);
         }
 
         for (int k = 0; k < image.width(); k++) {
-            int rand_val = rand_r(&next) & 0xff;
+            int rand_val = RandomTable::rand_r(&next) & 0xff;
             QRgb pixel = image.pixel(k, l);
 
             if (rand_val > qAlpha(pixel)) {
                 image.setPixel(k, l, qRgba(pixel, 0));
             }
         }
     }
 }
 
 /*!
  * Dissolving pixels: pick a random number between 0 and 255. If the pixel's
  * alpha is less than that, make it transparent. This routine works for
  * the GRAYA and INDEXEDA image types where the pixel alpha's are stored
  * separately from the pixel themselves.
  * \param image the alpha tile to dissolve.
  * \param x the global x position of the tile.
  * \param y the global y position of the tile.
  */
 void XCFImageFormat::dissolveAlphaPixels(QImage &image, int x, int y)
 {
     // The apparently spurious rand() calls are to wind the random
     // numbers up to the same point for each tile.
 
     for (int l = 0; l < image.height(); l++) {
         unsigned int next = randomTable.values[(l + y) % RANDOM_TABLE_SIZE];
 
         for (int k = 0; k < x; k++) {
             RandomTable::rand_r(&next);
         }
 
         for (int k = 0; k < image.width(); k++) {
-            int rand_val = rand_r(&next) & 0xff;
+            int rand_val = RandomTable::rand_r(&next) & 0xff;
             uchar alpha = image.pixelIndex(k, l);
 
             if (rand_val > alpha) {
                 image.setPixel(k, l, 0);
             }
         }
     }
 }
 
 ///////////////////////////////////////////////////////////////////////////////
