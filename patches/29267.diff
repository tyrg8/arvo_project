commit fdd974b7ef4fb3f38c266f0f16d9b68f84f40bca
Author: Andreas Kling <kling@serenityos.org>
Date:   Tue Jan 5 12:02:59 2021 +0100

    LibJS: Fix UB downcast during GlobalObject construction
    
    When constructing a GlobalObject, it has to pass itself as the global
    object to its own Shape. Since this is done in the Object constructor,
    and Object is a base class of GlobalObject, it's not yet valid to cast
    "this" to a GlobalObject*.
    
    Fix this by having Shape store the global object as an Object& and move
    Shape::global_object() to GlobalObject.h where we can at least perform a
    valid static_cast in the getter.
    
    Found by oss-fuzz: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=29267

diff --git a/Libraries/LibJS/Runtime/GlobalObject.h b/Libraries/LibJS/Runtime/GlobalObject.h
index 0b2163e3f4..d3b7041e43 100644
--- a/Libraries/LibJS/Runtime/GlobalObject.h
+++ b/Libraries/LibJS/Runtime/GlobalObject.h
@@ -122,7 +122,12 @@ template<typename ConstructorType>
 inline void GlobalObject::add_constructor(const FlyString& property_name, ConstructorType*& constructor, Object* prototype)
 {
     initialize_constructor(property_name, constructor, prototype);
     define_property(property_name, constructor, Attribute::Writable | Attribute::Configurable);
 }
 
+inline GlobalObject* Shape::global_object() const
+{
+    return static_cast<GlobalObject*>(m_global_object);
+}
+
 }
diff --git a/Libraries/LibJS/Runtime/Object.cpp b/Libraries/LibJS/Runtime/Object.cpp
index bb03709e5d..87a9d75dd5 100644
--- a/Libraries/LibJS/Runtime/Object.cpp
+++ b/Libraries/LibJS/Runtime/Object.cpp
@@ -90,7 +90,7 @@ Object* Object::create_empty(GlobalObject& global_object)
 Object::Object(GlobalObjectTag)
 {
     // This is the global object
-    m_shape = heap().allocate_without_global_object<Shape>(static_cast<GlobalObject&>(*this));
+    m_shape = heap().allocate_without_global_object<Shape>(*this);
 }
 
 Object::Object(ConstructWithoutPrototypeTag, GlobalObject& global_object)
diff --git a/Libraries/LibJS/Runtime/Shape.cpp b/Libraries/LibJS/Runtime/Shape.cpp
index 42cfcaa73e..1f74b14471 100644
--- a/Libraries/LibJS/Runtime/Shape.cpp
+++ b/Libraries/LibJS/Runtime/Shape.cpp
@@ -72,7 +72,7 @@ Shape::Shape(ShapeWithoutGlobalObjectTag)
 {
 }
 
-Shape::Shape(GlobalObject& global_object)
+Shape::Shape(Object& global_object)
     : m_global_object(&global_object)
 {
 }
diff --git a/Libraries/LibJS/Runtime/Shape.h b/Libraries/LibJS/Runtime/Shape.h
index aef09cd375..1d2bd51037 100644
--- a/Libraries/LibJS/Runtime/Shape.h
+++ b/Libraries/LibJS/Runtime/Shape.h
@@ -55,47 +55,47 @@ class Shape final : public Cell {
 public:
     virtual ~Shape() override;
 
     enum class TransitionType {
         Invalid,
         Put,
         Configure,
         Prototype,
     };
 
     enum class ShapeWithoutGlobalObjectTag { Tag };
 
     explicit Shape(ShapeWithoutGlobalObjectTag);
-    explicit Shape(GlobalObject&);
+    explicit Shape(Object& global_object);
     Shape(Shape& previous_shape, const StringOrSymbol& property_name, PropertyAttributes attributes, TransitionType);
     Shape(Shape& previous_shape, Object* new_prototype);
 
     Shape* create_put_transition(const StringOrSymbol&, PropertyAttributes attributes);
     Shape* create_configure_transition(const StringOrSymbol&, PropertyAttributes attributes);
     Shape* create_prototype_transition(Object* new_prototype);
 
     void add_property_without_transition(const StringOrSymbol&, PropertyAttributes);
 
     bool is_unique() const { return m_unique; }
     Shape* create_unique_clone() const;
 
-    GlobalObject* global_object() const { return m_global_object; }
+    GlobalObject* global_object() const;
 
     Object* prototype() { return m_prototype; }
     const Object* prototype() const { return m_prototype; }
 
     Optional<PropertyMetadata> lookup(const StringOrSymbol&) const;
     const HashMap<StringOrSymbol, PropertyMetadata>& property_table() const;
     size_t property_count() const;
 
     struct Property {
         StringOrSymbol key;
         PropertyMetadata value;
     };
 
     Vector<Property> property_table_ordered() const;
 
     void set_prototype_without_transition(Object* new_prototype) { m_prototype = new_prototype; }
 
     void remove_property_from_unique_shape(const StringOrSymbol&, size_t offset);
     void add_property_to_unique_shape(const StringOrSymbol&, PropertyAttributes attributes);
     void reconfigure_property_in_unique_shape(const StringOrSymbol& property_name, PropertyAttributes attributes);
@@ -103,22 +103,22 @@ public:
 private:
     virtual const char* class_name() const override { return "Shape"; }
     virtual void visit_edges(Visitor&) override;
 
     void ensure_property_table() const;
 
     PropertyAttributes m_attributes { 0 };
     TransitionType m_transition_type : 6 { TransitionType::Invalid };
     bool m_unique : 1 { false };
 
-    GlobalObject* m_global_object { nullptr };
+    Object* m_global_object { nullptr };
 
     mutable OwnPtr<HashMap<StringOrSymbol, PropertyMetadata>> m_property_table;
 
     HashMap<TransitionKey, Shape*> m_forward_transitions;
     Shape* m_previous { nullptr };
     StringOrSymbol m_property_name;
     Object* m_prototype { nullptr };
     size_t m_property_count { 0 };
 };
 
 }
