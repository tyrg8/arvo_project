commit 791f985a60726febca3053453c2710407529fd0a
Merge: 260b1d74fe fa910b4765
Author: fanquake <fanquake@gmail.com>
Date:   Mon Jun 7 13:20:11 2021 +0800

    Merge bitcoin/bitcoin#22137: util: Properly handle -noincludeconf on command line (take 2)
    
    fa910b47656d0e69cccb1f31804f2b11aa45d053 util: Properly handle -noincludeconf on command line (MarcoFalke)
    
    Pull request description:
    
      Before:
    
      ```
      $ ./src/qt/bitcoin-qt -noincludeconf
      (memory violation, can be observed with valgrind or similar)
      ```
    
      After:
    
      ```
      $ ./src/qt/bitcoin-qt -noincludeconf
      (passes startup)
      ```
    
      Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=34884
    
    ACKs for top commit:
      practicalswift:
        cr ACK fa910b47656d0e69cccb1f31804f2b11aa45d053: patch looks correct
      ryanofsky:
        Code review ACK fa910b47656d0e69cccb1f31804f2b11aa45d053. Nice cleanups!
    
    Tree-SHA512: 5dfad82a78bca7a9a6bcc6aead2d7fbde166a09a5300a82f80dd1aee1de00e070bcb30b7472741a5396073b370898696e78c33038f94849219281d99358248ed

diff --git a/src/test/util_tests.cpp b/src/test/util_tests.cpp
index d463bcdd8e..7ce38519cf 100644
--- a/src/test/util_tests.cpp
+++ b/src/test/util_tests.cpp
@@ -329,6 +329,25 @@ BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)
     CheckValue(M::ALLOW_ANY, "-value=abc", Expect{"abc"}.String("abc").Int(0).Bool(false).List({"abc"}));
 }
 
+struct NoIncludeConfTest {
+    std::string Parse(const char* arg)
+    {
+        TestArgsManager test;
+        test.SetupArgs({{"-includeconf", ArgsManager::ALLOW_ANY}});
+        std::array argv{"ignored", arg};
+        std::string error;
+        (void)test.ParseParameters(argv.size(), argv.data(), error);
+        return error;
+    }
+};
+
+BOOST_FIXTURE_TEST_CASE(util_NoIncludeConf, NoIncludeConfTest)
+{
+    BOOST_CHECK_EQUAL(Parse("-noincludeconf"), "");
+    BOOST_CHECK_EQUAL(Parse("-includeconf"), "-includeconf cannot be used from commandline; -includeconf=\"\"");
+    BOOST_CHECK_EQUAL(Parse("-includeconf=file"), "-includeconf cannot be used from commandline; -includeconf=\"file\"");
+}
+
 BOOST_AUTO_TEST_CASE(util_ParseParameters)
 {
     TestArgsManager testArgs;
diff --git a/src/util/system.cpp b/src/util/system.cpp
index 5b87806a45..13ccf7463e 100644
--- a/src/util/system.cpp
+++ b/src/util/system.cpp
@@ -299,77 +299,80 @@ void ArgsManager::SelectConfigNetwork(const std::string& network)
 bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::string& error)
 {
     LOCK(cs_args);
     m_settings.command_line_options.clear();
 
     for (int i = 1; i < argc; i++) {
         std::string key(argv[i]);
 
 #ifdef MAC_OSX
         // At the first time when a user gets the "App downloaded from the
         // internet" warning, and clicks the Open button, macOS passes
         // a unique process serial number (PSN) as -psn_... command-line
         // argument, which we filter out.
         if (key.substr(0, 5) == "-psn_") continue;
 #endif
 
         if (key == "-") break; //bitcoin-tx using stdin
         std::string val;
         size_t is_index = key.find('=');
         if (is_index != std::string::npos) {
             val = key.substr(is_index + 1);
             key.erase(is_index);
         }
 #ifdef WIN32
         key = ToLower(key);
         if (key[0] == '/')
             key[0] = '-';
 #endif
 
         if (key[0] != '-') {
             if (!m_accept_any_command && m_command.empty()) {
                 // The first non-dash arg is a registered command
                 std::optional<unsigned int> flags = GetArgFlags(key);
                 if (!flags || !(*flags & ArgsManager::COMMAND)) {
                     error = strprintf("Invalid command '%s'", argv[i]);
                     return false;
                 }
             }
             m_command.push_back(key);
             while (++i < argc) {
                 // The remaining args are command args
                 m_command.push_back(argv[i]);
             }
             break;
         }
 
         // Transform --foo to -foo
         if (key.length() > 1 && key[1] == '-')
             key.erase(0, 1);
 
         // Transform -foo to foo
         key.erase(0, 1);
         std::string section;
         util::SettingsValue value = InterpretOption(section, key, val);
         std::optional<unsigned int> flags = GetArgFlags('-' + key);
 
         // Unknown command line options and command line options with dot
         // characters (which are returned from InterpretOption with nonempty
         // section strings) are not valid.
         if (!flags || !section.empty()) {
             error = strprintf("Invalid parameter %s", argv[i]);
             return false;
         }
 
         if (!CheckValid(key, value, *flags, error)) return false;
 
         m_settings.command_line_options[key].push_back(value);
     }
 
-    // we do not allow -includeconf from command line
+    // we do not allow -includeconf from command line, only -noincludeconf
     if (auto* includes = util::FindKey(m_settings.command_line_options, "includeconf")) {
-        const auto& include{*util::SettingsSpan(*includes).begin()}; // pick first value as example
-        error = "-includeconf cannot be used from commandline; -includeconf=" + include.write();
-        return false;
+        const util::SettingsSpan values{*includes};
+        // Range may be empty if -noincludeconf was passed
+        if (!values.empty()) {
+            error = "-includeconf cannot be used from commandline; -includeconf=" + values.begin()->write();
+            return false; // pick first value as example
+        }
     }
     return true;
 }
