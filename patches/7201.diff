commit c4e384e5ad85250920cac6e8ee0e2a14b69d67e0
Author: Mike Reed <reed@google.com>
Date:   Thu Apr 19 11:30:18 2018 -0400

    check if we fail to eval the conic in pathmeasure
    
    Bug: oss-fuzz:7201
    Change-Id: I9d40225b7827239d2a229dc056f7f2caa8a4eb31
    Reviewed-on: https://skia-review.googlesource.com/122420
    Reviewed-by: Cary Clark <caryclark@google.com>
    Commit-Queue: Mike Reed <reed@google.com>

diff --git a/src/core/SkPathMeasure.cpp b/src/core/SkPathMeasure.cpp
index 4ddb5a5c53..905c176b40 100644
--- a/src/core/SkPathMeasure.cpp
+++ b/src/core/SkPathMeasure.cpp
@@ -256,22 +256,25 @@ SkScalar SkPathMeasure::compute_quad_segs(const SkPoint pts[3],
 SkScalar SkPathMeasure::compute_conic_segs(const SkConic& conic, SkScalar distance,
                                            int mint, const SkPoint& minPt,
                                            int maxt, const SkPoint& maxPt, unsigned ptIndex) {
     int halft = (mint + maxt) >> 1;
     SkPoint halfPt = conic.evalAt(tValue2Scalar(halft));
+    if (!halfPt.isFinite()) {
+        return 0;
+    }
     if (tspan_big_enough(maxt - mint) && conic_too_curvy(minPt, halfPt, maxPt)) {
         distance = this->compute_conic_segs(conic, distance, mint, minPt, halft, halfPt, ptIndex);
         distance = this->compute_conic_segs(conic, distance, halft, halfPt, maxt, maxPt, ptIndex);
     } else {
         SkScalar d = SkPoint::Distance(minPt, maxPt);
         SkScalar prevD = distance;
         distance += d;
         if (distance > prevD) {
             Segment* seg = fSegments.append();
             seg->fDistance = distance;
             seg->fPtIndex = ptIndex;
             seg->fType = kConic_SegType;
             seg->fTValue = maxt;
         }
     }
     return distance;
 }
