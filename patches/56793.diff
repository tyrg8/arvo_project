commit 2fe473cf9f3c603e0ac71c8af220478df896007d
Author: jordan <jordan@wolfssl.com>
Date:   Fri Mar 17 22:33:35 2023 -0500

    Fix out-of-bounds read in CRL parsing

diff --git a/wolfcrypt/src/asn.c b/wolfcrypt/src/asn.c
index 9ac29d524..dd7b00d41 100644
--- a/wolfcrypt/src/asn.c
+++ b/wolfcrypt/src/asn.c
@@ -35527,155 +35527,155 @@ static int ParseCRL_AuthKeyIdExt(const byte* input, int sz, DecodedCRL* dcrl)
 #ifndef WOLFSSL_ASN_TEMPLATE
 static int ParseCRL_Extensions(DecodedCRL* dcrl, const byte* buf,
         word32* inOutIdx, word32 sz)
 {
     int length;
     word32 idx;
     word32 ext_bound; /* boundary index for the sequence of extensions */
     word32 oid;
     byte tag;
 
     WOLFSSL_ENTER("ParseCRL_Extensions");
     (void)dcrl;
 
     if (inOutIdx == NULL)
         return BAD_FUNC_ARG;
 
     idx = *inOutIdx;
 
     /* CRL Extensions are optional */
     if ((idx + 1) > sz)
         return 0;
 
     /* CRL Extensions are optional */
     if (GetASNTag(buf, &idx, &tag, sz) < 0)
         return 0;
 
     /* CRL Extensions are optional */
     if (tag != (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC | 0))
         return 0;
 
     if (GetLength(buf, &idx, &length, sz) < 0)
         return ASN_PARSE_E;
 
     if (GetSequence(buf, &idx, &length, sz) < 0)
         return ASN_PARSE_E;
 
     ext_bound = idx + length;
 
     while (idx < (word32)ext_bound) {
         word32 localIdx;
         int ret;
 
         if (GetSequence(buf, &idx, &length, sz) < 0) {
             WOLFSSL_MSG("\tfail: should be a SEQUENCE");
             return ASN_PARSE_E;
         }
 
         oid = 0;
         if (GetObjectId(buf, &idx, &oid, oidCrlExtType, sz) < 0) {
             WOLFSSL_MSG("\tfail: OBJECT ID");
             return ASN_PARSE_E;
         }
 
         /* check for critical flag */
         if ((idx + 1) > (word32)sz) {
             WOLFSSL_MSG("\tfail: malformed buffer");
             return BUFFER_E;
         }
 
         localIdx = idx;
         if (GetASNTag(buf, &localIdx, &tag, sz) == 0 && tag == ASN_BOOLEAN) {
             WOLFSSL_MSG("\tfound optional critical flag, moving past");
             ret = GetBoolean(buf, &idx, sz);
             if (ret < 0)
                 return ret;
         }
 
         ret = GetOctetString(buf, &idx, &length, sz);
         if (ret < 0)
             return ret;
 
         if (oid == AUTH_KEY_OID) {
         #ifndef NO_SKID
             ret = ParseCRL_AuthKeyIdExt(buf + idx, length, dcrl);
             if (ret < 0) {
                 WOLFSSL_MSG("\tcouldn't parse AuthKeyId extension");
                 return ret;
             }
         #endif
         }
         else if (oid == CRL_NUMBER_OID) {
             localIdx = idx;
             if (GetASNTag(buf, &localIdx, &tag, sz) == 0 &&
                     tag == ASN_INTEGER) {
                 ret = GetASNInt(buf, &idx, &length, sz);
                 if (ret < 0) {
                     WOLFSSL_MSG("\tcouldn't parse CRL number extension");
                     return ret;
                 }
                 else {
                     if (length > 1) {
                         int    i;
                     #ifdef WOLFSSL_SMALL_STACK
                         mp_int* m = (mp_int*)XMALLOC(sizeof(*m), NULL,
                                 DYNAMIC_TYPE_BIGINT);
                         if (m == NULL) {
                             return MEMORY_E;
                         }
                     #else
                         mp_int m[1];
                     #endif
 
                         if (mp_init(m) != MP_OKAY) {
                             ret = MP_INIT_E;
                         }
 
                         if (ret == 0)
                             ret = mp_read_unsigned_bin(m, buf + idx, length);
                         if (ret != MP_OKAY)
                             ret = BUFFER_E;
 
                         if (ret == 0) {
                             dcrl->crlNumber = 0;
                             for (i = 0; i < (int)(*m).used; ++i) {
                                 if (i > (CHAR_BIT *
                                          (int)sizeof(word32) / DIGIT_BIT)) {
                                     break;
                                 }
                                 dcrl->crlNumber |= ((word32)(*m).dp[i]) <<
                                     (DIGIT_BIT * i);
                             }
                         }
 
                         mp_free(m);
                     #ifdef WOLFSSL_SMALL_STACK
                         XFREE(m, NULL, DYNAMIC_TYPE_BIGINT);
                     #endif
 
                         if (ret != 0)
                             return ret;
                     }
-                    else {
+                    else if (length == 1) {
                         dcrl->crlNumber = buf[idx];
                     }
                 }
             }
         }
 
         idx += length;
     }
 
     *inOutIdx = idx;
 
     return 0;
 }
 #else
 /* Parse the extensions of a CRL.
  *
  * @param [in] dcrl    Decoded CRL object.
  * @param [in] buff    Buffer holding CRL.
  * @param [in] idx     Index into buffer of extensions.
  * @param [in] maxIdx  Maximum index of extension data.
  * @return  0 on success.
  * @return  ASN_PARSE_E on failure.
  */
