commit 5eb75bc8495a304b6f9a13ecabcbfa88997c64e1
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Mon Jul 16 10:35:07 2018 +0200

    Avoid negative size to be passed to ComputeChecksumFletcher32(). Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=9437. Credit to OSS Fuzz

diff --git a/gdal/third_party/LercLib/Lerc2.cpp b/gdal/third_party/LercLib/Lerc2.cpp
index 3b2bc84e17..153031d2c8 100644
--- a/gdal/third_party/LercLib/Lerc2.cpp
+++ b/gdal/third_party/LercLib/Lerc2.cpp
@@ -370,22 +370,24 @@ bool Lerc2::ReadMask(const Byte** ppByte, size_t& nBytesRemainingInOut)
 bool Lerc2::DoChecksOnEncode(Byte* pBlobBegin, Byte* pBlobEnd) const
 {
   if ((size_t)(pBlobEnd - pBlobBegin) != (size_t)m_headerInfo.blobSize)
     return false;
 
   if (m_headerInfo.version >= 3)
   {
     int blobSize = (int)(pBlobEnd - pBlobBegin);
     int nBytes = (int)(FileKey().length() + sizeof(int) + sizeof(unsigned int));    // start right after the checksum entry
+    if( blobSize < nBytes )
+      return false;
     unsigned int checksum = ComputeChecksumFletcher32(pBlobBegin + nBytes, blobSize - nBytes);
 
     nBytes -= sizeof(unsigned int);
     memcpy(pBlobBegin + nBytes, &checksum, sizeof(unsigned int));
   }
 
   return true;
 }
 
 // -------------------------------------------------------------------------- ;
 
 // from  https://en.wikipedia.org/wiki/Fletcher's_checksum
 // modified from ushorts to bytes (by Lucian Plesea)
diff --git a/gdal/third_party/LercLib/Lerc2.h b/gdal/third_party/LercLib/Lerc2.h
index 9863f3c4d9..8fdea35d97 100644
--- a/gdal/third_party/LercLib/Lerc2.h
+++ b/gdal/third_party/LercLib/Lerc2.h
@@ -467,110 +467,112 @@ template<class T>
 bool Lerc2::Decode(const Byte** ppByte, size_t& nBytesRemaining, T* arr, Byte* pMaskBits)
 {
   if (!arr || !ppByte || !IsLittleEndianSystem())
     return false;
 
   const Byte* ptrBlob = *ppByte;    // keep a ptr to the start of the blob
   size_t nBytesRemaining00 = nBytesRemaining;
 
   if (!ReadHeader(ppByte, nBytesRemaining, m_headerInfo))
     return false;
 
   if (nBytesRemaining00 < (size_t)m_headerInfo.blobSize)
     return false;
 
   if (m_headerInfo.version >= 3)
   {
     int nBytes = (int)(FileKey().length() + sizeof(int) + sizeof(unsigned int));    // start right after the checksum entry
+    if( m_headerInfo.blobSize < nBytes )
+      return false;
     unsigned int checksum = ComputeChecksumFletcher32(ptrBlob + nBytes, m_headerInfo.blobSize - nBytes);
 #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
     // For fuzzing, ignore checksum verification
     (void)checksum;
 #else
     if (checksum != m_headerInfo.checksum)
       return false;
 #endif
   }
 
   if (!ReadMask(ppByte, nBytesRemaining))
     return false;
 
   if (pMaskBits)    // return proper mask bits even if they were not stored
     memcpy(pMaskBits, m_bitMask.Bits(), m_bitMask.Size());
 
   memset(arr, 0, m_headerInfo.nCols * m_headerInfo.nRows * m_headerInfo.nDim * sizeof(T));
 
   if (m_headerInfo.numValidPixel == 0)
     return true;
 
   if (m_headerInfo.zMin == m_headerInfo.zMax)    // image is const
   {
     if (!FillConstImage(arr))
       return false;
 
     return true;
   }
 
   if (m_headerInfo.version >= 4)
   {
     if (!ReadMinMaxRanges(ppByte, nBytesRemaining, arr))
       return false;
 
     bool minMaxEqual = false;
     if (!CheckMinMaxRanges(minMaxEqual))
       return false;
 
     if (minMaxEqual)    // if all bands are const, fill outgoing and done
     {
       if (!FillConstImage(arr))
         return false;
 
       return true;    // done
     }
   }
 
   if (nBytesRemaining < 1)
     return false;
 
   Byte readDataOneSweep = **ppByte;    // read flag
   (*ppByte)++;
   nBytesRemaining--;
 
   if (!readDataOneSweep)
   {
     if (m_headerInfo.TryHuffman())
     {
       if (nBytesRemaining < 1)
         return false;
 
       Byte flag = **ppByte;    // read flag Huffman / Lerc2
       (*ppByte)++;
       nBytesRemaining--;
 
       if (flag > 2 || (m_headerInfo.version < 4 && flag > 1))
         return false;
 
       m_imageEncodeMode = (ImageEncodeMode)flag;
 
       if (m_imageEncodeMode == IEM_DeltaHuffman || m_imageEncodeMode == IEM_Huffman)
       {
         if (!DecodeHuffman(ppByte, nBytesRemaining, arr))
           return false;
 
         return true;    // done.
       }
     }
 
     if (!ReadTiles(ppByte, nBytesRemaining, arr))
       return false;
   }
   else
   {
     if (!ReadDataOneSweep(ppByte, nBytesRemaining, arr))
       return false;
   }
 
   return true;
 }
 
 // -------------------------------------------------------------------------- ;
 // -------------------------------------------------------------------------- ;
