commit 9b3d814db48ba2262e58dc83c44bacf2c82236c4
Author: jeanlf <jeanlf@gpac.io>
Date:   Wed Jan 17 12:41:24 2024 +0100

    fixed possible mem overread dumping broken av1 streams

diff --git a/src/filters/inspect.c b/src/filters/inspect.c
index 01e27076c..ce4e7e106 100644
--- a/src/filters/inspect.c
+++ b/src/filters/inspect.c
@@ -1483,139 +1483,139 @@ static void av1_dump_tile(FILE *dump, u32 idx, AV1Tile *tile)
 static u64 gf_inspect_dump_obu_internal(FILE *dump, AV1State *av1, u8 *obu_ptr, u64 obu_ptr_length, ObuType obu_type, u64 obu_size, u32 hdr_size, Bool dump_crc, PidCtx *pctx, u32 full_dump)
 {
 	//when the pid context is not set, obu_size (which includes the header size in gpac) must be set
 	if (!pctx && (obu_size <= 2))
 		return obu_size;
 
 	if (pctx) {
 		InspectLogCbk lcbk;
 
 		if (full_dump>=INSPECT_ANALYZE_BS) {
 			lcbk.dump = dump;
 			lcbk.dump_bits = (full_dump==INSPECT_ANALYZE_BS_BITS) ? GF_TRUE : GF_FALSE;
 			gf_bs_set_logger(pctx->bs, regular_bs_log, &lcbk);
 
 			inspect_printf(dump, "   <OBU");
 		}
 		gf_av1_parse_obu(pctx->bs, &obu_type, &obu_size, &hdr_size, pctx->av1_state);
 
 
 		if (full_dump>=INSPECT_ANALYZE_BS) {
 			gf_bs_set_logger(pctx->bs, NULL, NULL);
 		} else {
 			full_dump = 0;
 		}
 	}
 
 	if (!full_dump) {
 		inspect_printf(dump, "   <OBU");
 	}
 
 
 #define DUMP_OBU_INT(_v) inspect_printf(dump, #_v"=\"%d\" ", av1->_v);
 #define DUMP_OBU_INT2(_n, _v) inspect_printf(dump, _n"=\"%d\" ", _v);
 
 	inspect_printf(dump, " size=\""LLU"\" type=\"%s\" header_size=\"%d\" ", obu_size, gf_av1_get_obu_name(obu_type), hdr_size);
 
 	if (!full_dump) {
 		inspect_printf(dump, "has_size_field=\"%d\" has_ext=\"%d\" temporalID=\"%d\" spatialID=\"%d\" ", av1->obu_has_size_field, av1->obu_extension_flag, av1->temporal_id , av1->spatial_id);
 	}
 
 	if (dump_crc && (obu_size<0xFFFFFFFFUL))
 		inspect_printf(dump, "crc=\"%u\" ", gf_crc_32(obu_ptr, (u32) obu_size) );
 	switch (obu_type) {
 	case OBU_SEQUENCE_HEADER:
 		if (full_dump) break;
 		DUMP_OBU_INT(sequence_width)
 		DUMP_OBU_INT(sequence_height)
 		DUMP_OBU_INT(still_picture)
 		DUMP_OBU_INT(OperatingPointIdc)
 		DUMP_OBU_INT2("profile", av1->config->seq_profile)
 		DUMP_OBU_INT2("level", av1->config->seq_level_idx_0)
 		DUMP_OBU_INT(bit_depth)
 		DUMP_OBU_INT2("monochrome", av1->config->monochrome)
 		DUMP_OBU_INT(color_description_present_flag)
 		DUMP_OBU_INT(color_primaries)
 		DUMP_OBU_INT(transfer_characteristics)
 		DUMP_OBU_INT(matrix_coefficients)
 		DUMP_OBU_INT(color_range)
 		DUMP_OBU_INT2("chroma_subsampling_x", av1->config->chroma_subsampling_x)
 		DUMP_OBU_INT2("chroma_subsampling_y", av1->config->chroma_subsampling_y)
 		DUMP_OBU_INT2("chroma_sample_position", av1->config->chroma_sample_position)
 		DUMP_OBU_INT(film_grain_params_present)
 		break;
 	case OBU_FRAME_HEADER:
 	case OBU_FRAME:
 		if (!full_dump) {
 			if (av1->frame_id_numbers_present_flag) {
 				DUMP_OBU_INT2("delta_frame_id_length_minus_2", av1->delta_frame_id_length_minus_2)
 			}
 			if (av1->reduced_still_picture_header) {
 				DUMP_OBU_INT(reduced_still_picture_header)
 			}
 			DUMP_OBU_INT2("uncompressed_header_bytes", av1->frame_state.uncompressed_header_bytes);
 			if (av1->frame_state.uncompressed_header_bytes) {
 				if (av1->frame_state.frame_type==AV1_KEY_FRAME) inspect_printf(dump, "frame_type=\"key\" ");
 				else if (av1->frame_state.frame_type==AV1_INTER_FRAME) inspect_printf(dump, "frame_type=\"inter\" ");
 				else if (av1->frame_state.frame_type==AV1_INTRA_ONLY_FRAME) inspect_printf(dump, "frame_type=\"intra_only\" ");
 				else if (av1->frame_state.frame_type==AV1_SWITCH_FRAME) inspect_printf(dump, "frame_type=\"switch\" ");
 				inspect_printf(dump, "refresh_frame_flags=\"%d\" ", av1->frame_state.refresh_frame_flags);
 
 				if (!av1->frame_state.show_existing_frame) {
 					DUMP_OBU_INT2("show_frame", av1->frame_state.show_frame);
 				} else {
 					DUMP_OBU_INT2("show_existing_frame", av1->frame_state.show_existing_frame);
 					DUMP_OBU_INT2("frame_to_show_map_idx", av1->frame_state.frame_to_show_map_idx);
 				}
 				DUMP_OBU_INT(width);
 				DUMP_OBU_INT(height);
 			}
 			if (obu_type==OBU_FRAME_HEADER)
 				break;
 		}
 
 	case OBU_TILE_GROUP:
 		if (av1->frame_state.nb_tiles_in_obu) {
 			u32 i;
 			DUMP_OBU_INT2("nb_tiles", av1->frame_state.nb_tiles_in_obu)
 			fprintf(dump, ">\n");
 			for (i = 0; i < av1->frame_state.nb_tiles_in_obu; i++) {
 				av1_dump_tile(dump, i, &av1->frame_state.tiles[i]);
 			}
 		} else {
 			inspect_printf(dump, "nb_tiles=\"unknown\">\n");
 		}
 		inspect_printf(dump, "   </OBU>\n");
 		break;
 	case OBU_METADATA:
-		{
+		if (obu_ptr_length>hdr_size) {
 			GF_BitStream *bs = gf_bs_new(obu_ptr+hdr_size, obu_ptr_length-hdr_size, GF_BITSTREAM_READ);
 			u32 metadata_type = (u32)gf_av1_leb128_read(bs, NULL);
 			DUMP_OBU_INT2("metadata_type", metadata_type);
 			switch (metadata_type) {
 				case OBU_METADATA_TYPE_TIMECODE:
 					dump_time_code(dump, bs, 0);
 					break;
 				case OBU_METADATA_TYPE_ITUT_T35:
 					dump_t35(dump, bs, 0);
 					break;
 				case OBU_METADATA_TYPE_HDR_CLL:
 					dump_clli(dump, bs);
 					break;
 				case OBU_METADATA_TYPE_HDR_MDCV:
 					dump_mdcv(dump, bs, GF_FALSE);
 					break;
 				default:
 					break;
 			}
 			gf_bs_del(bs);
 		}
 		break;
 	default:
 		break;
 
 	}
 	if ((obu_type != OBU_TILE_GROUP) && (obu_type != OBU_FRAME) )
 		inspect_printf(dump, "/>\n");
 
 	return obu_size;
 }
@@ -3197,184 +3197,184 @@ static void inspect_dump_packet(GF_InspectCtx *ctx, FILE *dump, GF_FilterPacket
 props_done:
 	if (!ctx->analyze || !size) {
 		if (ctx->xml) {
 			inspect_printf(dump, "/>\n");
 		}
 		return;
 	}
 	inspect_printf(dump, ">\n");
 
 #ifndef GPAC_DISABLE_AV_PARSERS
 	if (pctx->hevc_state || pctx->avc_state || pctx->vvc_state) {
 		idx=1;
 
 		if (pctx->is_adobe_protected) {
 			u8 encrypted_au = data[0];
 			if (encrypted_au) {
 				inspect_printf(dump, "   <!-- Packet is an Adobe's protected frame and can not be dumped -->\n");
 				inspect_printf(dump, "</Packet>\n");
 				return;
 			}
 			else {
 				data++;
 				size--;
 			}
 		}
 		while (size) {
 			u32 nal_size = inspect_get_nal_size((char*)data, pctx->nalu_size_length);
 			data += pctx->nalu_size_length;
 
 			if (pctx->nalu_size_length + nal_size > size) {
 				inspect_printf(dump, "   <!-- NALU is corrupted: size is %d but only %d remains -->\n", nal_size, size);
 				break;
 			} else {
 				inspect_printf(dump, "   <NALU size=\"%d\" ", nal_size);
 				gf_inspect_dump_nalu_internal(dump, data, nal_size, pctx->has_svcc ? 1 : 0, pctx->hevc_state, pctx->avc_state, pctx->vvc_state, pctx->nalu_size_length, ctx->crc, pctx->is_cenc_protected, ctx->analyze, pctx);
 			}
 			idx++;
 			data += nal_size;
 			size -= nal_size + pctx->nalu_size_length;
 		}
 	} else if (pctx->av1_state) {
 		gf_bs_reassign_buffer(pctx->bs, data, size);
 		while (size) {
 			ObuType obu_type = 0;
 			u64 obu_size = 0;
 			u32 hdr_size = 0;
 
-			obu_size = gf_inspect_dump_obu_internal(dump, pctx->av1_state, (char *) data, obu_size, obu_type, obu_size, hdr_size, ctx->crc, pctx, ctx->analyze);
+			obu_size = gf_inspect_dump_obu_internal(dump, pctx->av1_state, (char *) data, size, obu_type, obu_size, hdr_size, ctx->crc, pctx, ctx->analyze);
 
 			if (obu_size > size) {
 				inspect_printf(dump, "   <!-- OBU is corrupted: size is %d but only %d remains -->\n", (u32) obu_size, size);
 				break;
 			}
 			data += obu_size;
 			size -= (u32)obu_size;
 			idx++;
 		}
 	} else {
 		u32 hdr, pos, fsize, i;
 		u32 dflag=0;
 		switch (pctx->codec_id) {
 		case GF_CODECID_MPEG1:
 		case GF_CODECID_MPEG2_422:
 		case GF_CODECID_MPEG2_SNR:
 		case GF_CODECID_MPEG2_HIGH:
 		case GF_CODECID_MPEG2_MAIN:
 		case GF_CODECID_MPEG2_SIMPLE:
 		case GF_CODECID_MPEG2_SPATIAL:
 		case GF_CODECID_MPEG4_PART2:
 			inspect_dump_mpeg124(pctx, (char *) data, size, dump);
 			break;
 		case GF_CODECID_MPEG_AUDIO:
 		case GF_CODECID_MPEG2_PART3:
 		case GF_CODECID_MPEG_AUDIO_L1:
 			pos = 0;
 			while (size) {
 				hdr = gf_mp3_get_next_header_mem(data, size, &pos);
 				if (!hdr) {
 					inspect_printf(dump, "<!-- Invalid MPEGAudioFrame -->\n");
 					break;
 				}
 				fsize = gf_mp3_frame_size(hdr);
 				inspect_printf(dump, "<MPEGAudioFrame size=\"%d\" layer=\"%d\" version=\"%d\" bitrate=\"%d\" channels=\"%d\" samplesPerFrame=\"%d\" samplerate=\"%d\"/>\n", fsize, gf_mp3_layer(hdr), gf_mp3_version(hdr), gf_mp3_bit_rate(hdr), gf_mp3_num_channels(hdr), gf_mp3_window_size(hdr), gf_mp3_sampling_rate(hdr));
 				if (size<pos+fsize) break;
 				data += pos + fsize;
 				size -= pos + fsize;
 			}
 			break;
 		case GF_CODECID_TMCD:
 			inspect_dump_tmcd(ctx, pctx, (char *) data, size, dump);
 			break;
 		case GF_CODECID_SUBS_TEXT:
 		case GF_CODECID_META_TEXT:
 			dflag=1;
 		case GF_CODECID_SUBS_XML:
 		case GF_CODECID_META_XML:
 			if (dflag)
 				inspect_printf(dump, "<![CDATA[");
 			for (i=0; i<size; i++) {
 				gf_fputc(data[i], dump);
 			}
 			if (dflag)
 				inspect_printf(dump, "]]>\n");
 			break;
 		case GF_CODECID_APCH:
 		case GF_CODECID_APCO:
 		case GF_CODECID_APCN:
 		case GF_CODECID_APCS:
 		case GF_CODECID_AP4X:
 		case GF_CODECID_AP4H:
 			gf_inspect_dump_prores_internal(dump, (char *) data, size, ctx->crc, pctx);
 			break;
 
 		case GF_CODECID_MPHA:
 			gf_bs_reassign_buffer(pctx->bs, data, size);
 			gf_inspect_dump_mha_frame(dump, pctx->bs, "");
 			break;
 
 		case GF_CODECID_MHAS:
 			gf_inspect_dump_mhas(dump, (char *) data, size, ctx->crc, pctx);
 			break;
 		case GF_CODECID_VP8:
 			dflag=1;
 		case GF_CODECID_VP9:
 			inspect_dump_vpx(ctx, dump, (char *) data, size, ctx->crc, pctx, dflag ? 8 : 9);
 			break;
 		case GF_CODECID_AC3:
 			dflag=1;
 		case GF_CODECID_EAC3:
 			inspect_dump_ac3_eac3(ctx, dump, (char *) data, size, ctx->crc, pctx, dflag ? 0 : 1);
 			break;
 		case GF_CODECID_TRUEHD:
 			gf_bs_reassign_buffer(pctx->bs, data, size);
 			gf_inspect_dump_truehd_frame(dump, pctx->bs);
 			break;
 		case GF_CODECID_OPUS:
 			gf_inspect_dump_opus_internal(dump, data, size, 0, ctx->crc, pctx);
 			break;
 		case GF_CODECID_ALAC:
 		{
 			gf_bs_reassign_buffer(pctx->bs, data, size);
 			u32 val, partial;
 
 #define get_and_print(name, bits) \
 			val = gf_bs_read_int(pctx->bs, bits); \
 			inspect_printf(dump, " "name"=\"%u\"", val);
 
 			inspect_printf(dump, " <ALACSegment");
 
 			get_and_print("type", 3);
 			get_and_print("reserved", 12);
 			get_and_print("partial", 1);
 			partial=val;
 			get_and_print("shift_off", 2);
 			get_and_print("escape", 1);
 			if (partial) {
 				get_and_print("frameLength", 32);
 			}
 			inspect_printf(dump, "/>\n");
 
 #undef get_and_print
 
 		}
 			break;
 
 		}
 	}
 #endif
 	inspect_printf(dump, "</Packet>\n");
 }
 
 #define DUMP_ARRAY(arr, name, loc, _is_svc)\
 	if (arr && gf_list_count(arr)) {\
 		inspect_printf(dump, "  <%sArray location=\"%s\">\n", name, loc);\
 		for (i=0; i<gf_list_count(arr); i++) {\
 			slc = gf_list_get(arr, i);\
 			inspect_printf(dump, "   <NALU size=\"%d\" ", slc->size);\
 			gf_inspect_dump_nalu_internal(dump, slc->data, slc->size, _is_svc, pctx->hevc_state, pctx->avc_state, pctx->vvc_state, nalh_size, ctx->crc, GF_FALSE, ctx->analyze, pctx);\
 		}\
 		inspect_printf(dump, "  </%sArray>\n", name);\
 	}\
 
 
 #ifndef GPAC_DISABLE_AV_PARSERS
