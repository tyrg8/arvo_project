commit d9cab398b816a610bb6de98e7a0b1e71e5ebff76
Merge: 1e50b621f9 455d58c3ce
Author: Bart Van Assche <bvanassche@users.noreply.github.com>
Date:   Tue Oct 19 20:34:47 2021 -0700

    Merge pull request #357 from DavidKorczynski/bfix-4
    
    libsnmp: Fix spurious buffer read

diff --git a/snmplib/snmp_api.c b/snmplib/snmp_api.c
index 181335baff..ca1ad12b37 100644
--- a/snmplib/snmp_api.c
+++ b/snmplib/snmp_api.c
@@ -7256,484 +7256,491 @@ int
 snmp_add_var(netsnmp_pdu *pdu,
              const oid * name, size_t name_length, char type, const char *value)
 {
     char           *st;
     const char     *cp;
     char           *ecp, *vp;
     int             result = SNMPERR_SUCCESS;
 #ifndef NETSNMP_DISABLE_MIB_LOADING
     int             check = !netsnmp_ds_get_boolean(NETSNMP_DS_LIBRARY_ID,
 					     NETSNMP_DS_LIB_DONT_CHECK_RANGE);
     int             do_hint = !netsnmp_ds_get_boolean(NETSNMP_DS_LIBRARY_ID,
 					     NETSNMP_DS_LIB_NO_DISPLAY_HINT);
     u_char         *hintptr;
     struct tree    *tp;
     struct enum_list *ep;
     int             itmp;
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
     u_char         *buf = NULL;
     const u_char   *buf_ptr = NULL;
     size_t          buf_len = 0, value_len = 0, tint;
     in_addr_t       atmp;
     long            ltmp;
 #ifdef NETSNMP_WITH_OPAQUE_SPECIAL_TYPES
     double          dtmp;
     float           ftmp;
 #endif                          /* NETSNMP_WITH_OPAQUE_SPECIAL_TYPES */
     struct counter64 c64tmp;
 
 #ifndef NETSNMP_DISABLE_MIB_LOADING
     tp = get_tree(name, name_length, get_tree_head());
     if (!tp || !tp->type || tp->type > TYPE_SIMPLE_LAST) {
         check = 0;
     }
     if (!(tp && tp->hint))
 	do_hint = 0;
 
     if (tp && type == '=') {
         /*
          * generic assignment - let the tree node decide value format 
          */
         switch (tp->type) {
         case TYPE_INTEGER:
         case TYPE_INTEGER32:
             type = 'i';
             break;
         case TYPE_GAUGE:
         case TYPE_UNSIGNED32:
             type = 'u';
             break;
         case TYPE_UINTEGER:
             type = '3';
             break;
         case TYPE_COUNTER:
             type = 'c';
             break;
         case TYPE_COUNTER64:
             type = 'C';
             break;
         case TYPE_TIMETICKS:
             type = 't';
             break;
         case TYPE_OCTETSTR:
             type = 's';
             break;
         case TYPE_BITSTRING:
             type = 'b';
             break;
         case TYPE_IPADDR:
             type = 'a';
             break;
         case TYPE_OBJID:
             type = 'o';
             break;
         }
     }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
 
     switch (type) {
     case 'i':
 #ifndef NETSNMP_DISABLE_MIB_LOADING
         if (check && tp->type != TYPE_INTEGER
             && tp->type != TYPE_INTEGER32) {
             value = "INTEGER";
             result = SNMPERR_VALUE;
             goto type_error;
         }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
         if (!*value)
             goto fail;
         ltmp = strtol(value, &ecp, 10);
         if (*ecp) {
 #ifndef NETSNMP_DISABLE_MIB_LOADING
             ep = tp ? tp->enums : NULL;
             while (ep) {
                 if (strcmp(value, ep->label) == 0) {
                     ltmp = ep->value;
                     break;
                 }
                 ep = ep->next;
             }
             if (!ep) {
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
                 result = SNMPERR_RANGE;   /* ?? or SNMPERR_VALUE; */
                 snmp_set_detail(value);
                 break;
 #ifndef NETSNMP_DISABLE_MIB_LOADING
             }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
         }
 
 #ifndef NETSNMP_DISABLE_MIB_LOADING
         if (!_check_range(tp, ltmp, &result, value))
             break;
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
         snmp_pdu_add_variable(pdu, name, name_length, ASN_INTEGER,
                               &ltmp, sizeof(ltmp));
         break;
 
     case 'u':
 #ifndef NETSNMP_DISABLE_MIB_LOADING
         if (check && tp->type != TYPE_GAUGE && tp->type != TYPE_UNSIGNED32) {
             value = "Unsigned32";
             result = SNMPERR_VALUE;
             goto type_error;
         }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
         ltmp = strtoul(value, &ecp, 10);
         if (*value && !*ecp)
             snmp_pdu_add_variable(pdu, name, name_length, ASN_UNSIGNED,
                                   &ltmp, sizeof(ltmp));
         else
             goto fail;
         break;
 
     case '3':
 #ifndef NETSNMP_DISABLE_MIB_LOADING
         if (check && tp->type != TYPE_UINTEGER) {
             value = "UInteger32";
             result = SNMPERR_VALUE;
             goto type_error;
         }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
         ltmp = strtoul(value, &ecp, 10);
         if (*value && !*ecp)
             snmp_pdu_add_variable(pdu, name, name_length, ASN_UINTEGER,
                                   &ltmp, sizeof(ltmp));
         else
             goto fail;
         break;
 
     case 'c':
 #ifndef NETSNMP_DISABLE_MIB_LOADING
         if (check && tp->type != TYPE_COUNTER) {
             value = "Counter32";
             result = SNMPERR_VALUE;
             goto type_error;
         }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
         ltmp = strtoul(value, &ecp, 10);
         if (*value && !*ecp)
             snmp_pdu_add_variable(pdu, name, name_length, ASN_COUNTER,
                                   &ltmp, sizeof(ltmp));
         else
             goto fail;
         break;
 
     case 'C':
 #ifndef NETSNMP_DISABLE_MIB_LOADING
         if (check && tp->type != TYPE_COUNTER64) {
             value = "Counter64";
             result = SNMPERR_VALUE;
             goto type_error;
         }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
         if (read64(&c64tmp, value))
             snmp_pdu_add_variable(pdu, name, name_length, ASN_COUNTER64,
                                   &c64tmp, sizeof(c64tmp));
         else
             goto fail;
         break;
 
     case 't':
 #ifndef NETSNMP_DISABLE_MIB_LOADING
         if (check && tp->type != TYPE_TIMETICKS) {
             value = "Timeticks";
             result = SNMPERR_VALUE;
             goto type_error;
         }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
         ltmp = strtoul(value, &ecp, 10);
         if (*value && !*ecp)
             snmp_pdu_add_variable(pdu, name, name_length, ASN_TIMETICKS,
                                   &ltmp, sizeof(long));
         else
             goto fail;
         break;
 
     case 'a':
 #ifndef NETSNMP_DISABLE_MIB_LOADING
         if (check && tp->type != TYPE_IPADDR) {
             value = "IpAddress";
             result = SNMPERR_VALUE;
             goto type_error;
         }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
         atmp = inet_addr(value);
         if (atmp != (in_addr_t) -1 || !strcmp(value, "255.255.255.255"))
             snmp_pdu_add_variable(pdu, name, name_length, ASN_IPADDRESS,
                                   &atmp, sizeof(atmp));
         else
             goto fail;
         break;
 
     case 'o':
 #ifndef NETSNMP_DISABLE_MIB_LOADING
         if (check && tp->type != TYPE_OBJID) {
             value = "OBJECT IDENTIFIER";
             result = SNMPERR_VALUE;
             goto type_error;
         }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
         if ((buf = (u_char *)malloc(sizeof(oid) * MAX_OID_LEN)) == NULL) {
             result = SNMPERR_MALLOC;
         } else {
             tint = MAX_OID_LEN;
             if (snmp_parse_oid(value, (oid *) buf, &tint)) {
                 snmp_pdu_add_variable(pdu, name, name_length, ASN_OBJECT_ID,
                                       buf, sizeof(oid) * tint);
             } else {
                 result = snmp_errno;    /*MTCRITICAL_RESOURCE */
             }
         }
         break;
 
     case 's':
     case 'x':
     case 'd':
 #ifndef NETSNMP_DISABLE_MIB_LOADING
         if (check && tp->type != TYPE_OCTETSTR && tp->type != TYPE_BITSTRING) {
             value = "OCTET STRING";
             result = SNMPERR_VALUE;
             goto type_error;
         }
 	if ('s' == type && do_hint && !parse_octet_hint(tp->hint, value, &hintptr, &itmp)) {
             if (_check_range(tp, itmp, &result, "Value does not match DISPLAY-HINT")) {
                 snmp_pdu_add_variable(pdu, name, name_length, ASN_OCTET_STR,
                                       hintptr, itmp);
             }
             SNMP_FREE(hintptr);
             hintptr = buf;
             break;
         }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
         if (type == 'd') {
             if (!snmp_decimal_to_binary
                 (&buf, &buf_len, &value_len, 1, value)) {
                 result = SNMPERR_VALUE;
                 snmp_set_detail(value);
                 break;
             }
             buf_ptr = buf;
         } else if (type == 'x') {
             if (!snmp_hex_to_binary(&buf, &buf_len, &value_len, 1, value)) {
                 result = SNMPERR_VALUE;
                 snmp_set_detail(value);
                 break;
             }
             buf_ptr = buf;
         } else if (type == 's') {
             buf_ptr = (const u_char *)value;
             value_len = strlen(value);
         }
 #ifndef NETSNMP_DISABLE_MIB_LOADING
         if (!_check_range(tp, value_len, &result, "Bad string length"))
             break;
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
         snmp_pdu_add_variable(pdu, name, name_length, ASN_OCTET_STR,
                               buf_ptr, value_len);
         break;
 
     case 'n':
         snmp_pdu_add_variable(pdu, name, name_length, ASN_NULL, NULL, 0);
         break;
 
     case 'b':
 #ifndef NETSNMP_DISABLE_MIB_LOADING
         if (check && (tp->type != TYPE_BITSTRING || !tp->enums)) {
             value = "BITS";
             result = SNMPERR_VALUE;
             goto type_error;
         }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
         tint = 0;
         if ((buf = (u_char *) malloc(256)) == NULL) {
             result = SNMPERR_MALLOC;
             break;
         } else {
             buf_len = 256;
             memset(buf, 0, buf_len);
         }
 
 #ifndef NETSNMP_DISABLE_MIB_LOADING
         for (ep = tp ? tp->enums : NULL; ep; ep = ep->next) {
             if (ep->value / 8 >= (int) tint) {
                 tint = ep->value / 8 + 1;
             }
         }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
 
 	vp = strdup(value);
         if (!vp) {
             SNMP_FREE(buf);
             goto fail;
         }
 	for (cp = strtok_r(vp, " ,\t", &st); cp; cp = strtok_r(NULL, " ,\t", &st)) {
             int             ix, bit;
 
             ltmp = strtoul(cp, &ecp, 0);
             if (*ecp != 0) {
 #ifndef NETSNMP_DISABLE_MIB_LOADING
                 for (ep = tp ? tp->enums : NULL; ep != NULL; ep = ep->next) {
                     if (strcmp(ep->label, cp) == 0) {
                         break;
                     }
                 }
                 if (ep != NULL) {
                     ltmp = ep->value;
                 } else {
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
                     result = SNMPERR_RANGE;   /* ?? or SNMPERR_VALUE; */
                     snmp_set_detail(cp);
                     SNMP_FREE(buf);
 		    SNMP_FREE(vp);
                     goto out;
 #ifndef NETSNMP_DISABLE_MIB_LOADING
                 }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
             }
 
             ix = ltmp / 8;
             if (ix >= (int) tint) {
                 tint = ix + 1;
             }
             if (ix >= (int)buf_len && !snmp_realloc(&buf, &buf_len)) {
                 result = SNMPERR_MALLOC;
                 break;
             }
+            if (ix < 0 || ix >= buf_len) {
+               result = SNMPERR_RANGE;
+               snmp_set_detail(cp);
+               SNMP_FREE(buf);
+               SNMP_FREE(vp);
+               goto out;
+            }
             bit = 0x80 >> ltmp % 8;
             buf[ix] |= bit;
 	    
         }
 	SNMP_FREE(vp);
         snmp_pdu_add_variable(pdu, name, name_length, ASN_OCTET_STR,
                               buf, tint);
         break;
 
 #ifdef NETSNMP_WITH_OPAQUE_SPECIAL_TYPES
     case 'U':
         if (read64(&c64tmp, value))
             snmp_pdu_add_variable(pdu, name, name_length, ASN_OPAQUE_U64,
                                   &c64tmp, sizeof(c64tmp));
         else
             goto fail;
         break;
 
     case 'I':
         if (read64(&c64tmp, value))
             snmp_pdu_add_variable(pdu, name, name_length, ASN_OPAQUE_I64,
                                   &c64tmp, sizeof(c64tmp));
         else
             goto fail;
         break;
 
     case 'F':
         if (sscanf(value, "%f", &ftmp) == 1)
             snmp_pdu_add_variable(pdu, name, name_length, ASN_OPAQUE_FLOAT,
                                   &ftmp, sizeof(ftmp));
         else
             goto fail;
         break;
 
     case 'D':
         if (sscanf(value, "%lf", &dtmp) == 1)
             snmp_pdu_add_variable(pdu, name, name_length, ASN_OPAQUE_DOUBLE,
                                   &dtmp, sizeof(dtmp));
         else
             goto fail;
         break;
 #endif                          /* NETSNMP_WITH_OPAQUE_SPECIAL_TYPES */
 
     default:
         result = SNMPERR_VAR_TYPE;
 	buf = (u_char *)calloc(1, 4);
 	if (buf != NULL) {
 	    sprintf((char *)buf, "\"%c\"", type);
 	    snmp_set_detail((char *)buf);
 	}
         break;
     }
 
     SNMP_FREE(buf);
     SET_SNMP_ERROR(result);
     return result;
 
 #ifndef NETSNMP_DISABLE_MIB_LOADING
   type_error:
     {
         char            error_msg[256];
         char            undef_msg[32];
         const char     *var_type;
         switch (tp->type) {
         case TYPE_OBJID:
             var_type = "OBJECT IDENTIFIER";
             break;
         case TYPE_OCTETSTR:
             var_type = "OCTET STRING";
             break;
         case TYPE_INTEGER:
             var_type = "INTEGER";
             break;
         case TYPE_NETADDR:
             var_type = "NetworkAddress";
             break;
         case TYPE_IPADDR:
             var_type = "IpAddress";
             break;
         case TYPE_COUNTER:
             var_type = "Counter32";
             break;
         case TYPE_GAUGE:
             var_type = "Gauge32";
             break;
         case TYPE_TIMETICKS:
             var_type = "Timeticks";
             break;
         case TYPE_OPAQUE:
             var_type = "Opaque";
             break;
         case TYPE_NULL:
             var_type = "Null";
             break;
         case TYPE_COUNTER64:
             var_type = "Counter64";
             break;
         case TYPE_BITSTRING:
             var_type = "BITS";
             break;
         case TYPE_NSAPADDRESS:
             var_type = "NsapAddress";
             break;
         case TYPE_UINTEGER:
             var_type = "UInteger";
             break;
         case TYPE_UNSIGNED32:
             var_type = "Unsigned32";
             break;
         case TYPE_INTEGER32:
             var_type = "Integer32";
             break;
         default:
             sprintf(undef_msg, "TYPE_%d", tp->type);
             var_type = undef_msg;
         }
         snprintf(error_msg, sizeof(error_msg),
                "Type of attribute is %s, not %s", var_type, value);
         error_msg[ sizeof(error_msg)-1 ] = 0;
         result = SNMPERR_VAR_TYPE;
         snmp_set_detail(error_msg);
         goto out;
     }
 #endif /* NETSNMP_DISABLE_MIB_LOADING */
   fail:
     result = SNMPERR_VALUE;
     snmp_set_detail(value);
   out:
     SET_SNMP_ERROR(result);
     return result;
 }
 
 /*
  * returns NULL or internal pointer to session
  * use this pointer for the other snmp_sess* routines,
  * which guarantee action will occur ONLY for this given session.
  */
