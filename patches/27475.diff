commit be13bf50fe00f0f4c2d065a61db189d6c59b1f7b
Author: Antoine Pitrou <antoine@python.org>
Date:   Fri Nov 20 17:21:04 2020 -0500

    ARROW-10619: [C++] Fix IPC validation regressions
    
    Some cases of invalid IPC stream were missed following the ARROW-10619 refactor.
    
    Closes #8679 from pitrou/ARROW-10619-ipc-fuzz-regressions
    
    Authored-by: Antoine Pitrou <antoine@python.org>
    Signed-off-by: Benjamin Kietzman <bengilgit@gmail.com>

diff --git a/cpp/src/arrow/ipc/dictionary.cc b/cpp/src/arrow/ipc/dictionary.cc
index 8757a57d0..fa634fe91 100644
--- a/cpp/src/arrow/ipc/dictionary.cc
+++ b/cpp/src/arrow/ipc/dictionary.cc
@@ -167,42 +167,43 @@ bool HasUnresolvedNestedDict(const ArrayData& data) {
 struct DictionaryMemo::Impl {
   // Map of dictionary id to dictionary array(s) (several in case of deltas)
   std::unordered_map<int64_t, ArrayDataVector> id_to_dictionary_;
   std::unordered_map<int64_t, std::shared_ptr<DataType>> id_to_type_;
   DictionaryFieldMapper mapper_;
 
   Result<decltype(id_to_dictionary_)::iterator> FindDictionary(int64_t id) {
     auto it = id_to_dictionary_.find(id);
     if (it == id_to_dictionary_.end()) {
       return Status::KeyError("Dictionary with id ", id, " not found");
     }
     return it;
   }
 
   Result<std::shared_ptr<ArrayData>> ReifyDictionary(int64_t id, MemoryPool* pool) {
     ARROW_ASSIGN_OR_RAISE(auto it, FindDictionary(id));
     ArrayDataVector* data_vector = &it->second;
 
     DCHECK(!data_vector->empty());
     if (data_vector->size() > 1) {
       // There are deltas, we need to concatenate them to the first dictionary.
       ArrayVector to_combine;
       to_combine.reserve(data_vector->size());
       // IMPORTANT: At this point, the dictionary data may be untrusted.
       // We need to validate it, as concatenation can crash on invalid or
       // corrupted data.  Full validation is necessary for certain types
       // (for example nested dictionaries).
       for (const auto& data : *data_vector) {
         if (HasUnresolvedNestedDict(*data)) {
           return Status::NotImplemented(
               "Encountered delta dictionary with an unresolved nested dictionary");
         }
+        RETURN_NOT_OK(::arrow::internal::ValidateArray(*data));
         RETURN_NOT_OK(::arrow::internal::ValidateArrayFull(*data));
         to_combine.push_back(MakeArray(data));
       }
       ARROW_ASSIGN_OR_RAISE(auto combined_dict, Concatenate(to_combine, pool));
       *data_vector = {combined_dict->data()};
     }
 
     return data_vector->back();
   }
 };
diff --git a/cpp/src/arrow/visitor_inline.h b/cpp/src/arrow/visitor_inline.h
index 45193f204..132c35aea 100644
--- a/cpp/src/arrow/visitor_inline.h
+++ b/cpp/src/arrow/visitor_inline.h
@@ -193,61 +193,67 @@ template <typename T>
 struct ArrayDataInlineVisitor<T, enable_if_base_binary<T>> {
   using c_type = util::string_view;
 
   template <typename ValidFunc, typename NullFunc>
   static Status VisitStatus(const ArrayData& arr, ValidFunc&& valid_func,
                             NullFunc&& null_func) {
     using offset_type = typename T::offset_type;
     constexpr char empty_value = 0;
 
+    if (arr.length == 0) {
+      return Status::OK();
+    }
     const offset_type* offsets = arr.GetValues<offset_type>(1);
     const char* data;
     if (!arr.buffers[2]) {
       data = &empty_value;
     } else {
       // Do not apply the array offset to the values array; the value_offsets
       // index the non-sliced values array.
       data = arr.GetValues<char>(2, /*absolute_offset=*/0);
     }
     offset_type cur_offset = *offsets++;
     return VisitBitBlocks(
         arr.buffers[0], arr.offset, arr.length,
         [&](int64_t i) {
           ARROW_UNUSED(i);
           auto value = util::string_view(data + cur_offset, *offsets - cur_offset);
           cur_offset = *offsets++;
           return valid_func(value);
         },
         [&]() {
           cur_offset = *offsets++;
           return null_func();
         });
   }
 
   template <typename ValidFunc, typename NullFunc>
   static void VisitVoid(const ArrayData& arr, ValidFunc&& valid_func,
                         NullFunc&& null_func) {
     using offset_type = typename T::offset_type;
     constexpr uint8_t empty_value = 0;
 
+    if (arr.length == 0) {
+      return;
+    }
     const offset_type* offsets = arr.GetValues<offset_type>(1);
     const uint8_t* data;
     if (!arr.buffers[2]) {
       data = &empty_value;
     } else {
       // Do not apply the array offset to the values array; the value_offsets
       // index the non-sliced values array.
       data = arr.GetValues<uint8_t>(2, /*absolute_offset=*/0);
     }
 
     VisitBitBlocksVoid(
         arr.buffers[0], arr.offset, arr.length,
         [&](int64_t i) {
           auto value = util::string_view(reinterpret_cast<const char*>(data + offsets[i]),
                                          offsets[i + 1] - offsets[i]);
           valid_func(value);
         },
         std::forward<NullFunc>(null_func));
   }
 };
 
 // FixedSizeBinary, Decimal128
diff --git a/testing b/testing
index 3ab0d5352..d6c4deb22 160000
--- a/testing
+++ b/testing
@@ -1 +1 @@
-Subproject commit 3ab0d53528a050c370a31c3741574250a6e88a4d
+Subproject commit d6c4deb22c4b4e9e3247a2f291046e3c671ad235
