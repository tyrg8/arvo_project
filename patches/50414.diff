commit 54390818348493a88c43b0dadbad77bdc9750699
Author: Marti Maria <marti.maria@littlecms.com>
Date:   Mon Aug 22 15:51:59 2022 +0200

    Add validation against broken profiles
    
    Crafted profiles with bogus data may be sometimes read but then not written.
    lcms is tolerant when reading, strict when writing.
    Fixed a situation that may end in memory corruption.

diff --git a/src/cmstypes.c b/src/cmstypes.c
index e056731..4b7e7ab 100644
--- a/src/cmstypes.c
+++ b/src/cmstypes.c
@@ -1901,96 +1901,104 @@ static
 cmsBool  Type_LUT8_Write(struct _cms_typehandler_struct* self, cmsIOHANDLER* io, void* Ptr, cmsUInt32Number nItems)
 {
     cmsUInt32Number j, nTabSize, i;
     cmsUInt8Number  val;
     cmsPipeline* NewLUT = (cmsPipeline*) Ptr;
     cmsStage* mpe;
     _cmsStageToneCurvesData* PreMPE = NULL, *PostMPE = NULL;
     _cmsStageMatrixData* MatMPE = NULL;
     _cmsStageCLutData* clut = NULL;
     cmsUInt32Number clutPoints;
 
     // Disassemble the LUT into components.
     mpe = NewLUT -> Elements;
     if (mpe ->Type == cmsSigMatrixElemType) {
 
         if (mpe->InputChannels != 3 || mpe->OutputChannels != 3) return FALSE;
         MatMPE = (_cmsStageMatrixData*) mpe ->Data;
         mpe = mpe -> Next;
     }
 
     if (mpe != NULL && mpe ->Type == cmsSigCurveSetElemType) {
         PreMPE = (_cmsStageToneCurvesData*) mpe ->Data;
         mpe = mpe -> Next;
     }
 
     if (mpe != NULL && mpe ->Type == cmsSigCLutElemType) {
         clut  = (_cmsStageCLutData*) mpe -> Data;
         mpe = mpe ->Next;
     }
 
     if (mpe != NULL && mpe ->Type == cmsSigCurveSetElemType) {
         PostMPE = (_cmsStageToneCurvesData*) mpe ->Data;
         mpe = mpe -> Next;
     }
 
     // That should be all
     if (mpe != NULL) {
-        cmsSignalError(mpe->ContextID, cmsERROR_UNKNOWN_EXTENSION, "LUT is not suitable to be saved as LUT8");
+        cmsSignalError(self->ContextID, cmsERROR_UNKNOWN_EXTENSION, "LUT is not suitable to be saved as LUT8");
         return FALSE;
     }
 
     if (clut == NULL)
         clutPoints = 0;
-    else
-        clutPoints    = clut->Params->nSamples[0];
-
-    if (!_cmsWriteUInt8Number(io, (cmsUInt8Number) NewLUT ->InputChannels)) return FALSE;
-    if (!_cmsWriteUInt8Number(io, (cmsUInt8Number) NewLUT ->OutputChannels)) return FALSE;
+    else {
+        // Lut8 only allows same CLUT points in all dimensions        
+        clutPoints = clut->Params->nSamples[0];
+        for (i = 1; i < cmsPipelineInputChannels(NewLUT); i++) {
+            if (clut->Params->nSamples[i] != clutPoints) {
+                cmsSignalError(self->ContextID, cmsERROR_UNKNOWN_EXTENSION, "LUT with different samples per dimension not suitable to be saved as LUT16");
+                return FALSE;
+            }
+        }
+    }
+        
+    if (!_cmsWriteUInt8Number(io, (cmsUInt8Number)cmsPipelineInputChannels(NewLUT))) return FALSE;
+    if (!_cmsWriteUInt8Number(io, (cmsUInt8Number)cmsPipelineOutputChannels(NewLUT))) return FALSE;
     if (!_cmsWriteUInt8Number(io, (cmsUInt8Number) clutPoints)) return FALSE;
     if (!_cmsWriteUInt8Number(io, 0)) return FALSE; // Padding
 
     if (MatMPE != NULL) {
         
         for (i = 0; i < 9; i++)
         {
             if (!_cmsWrite15Fixed16Number(io, MatMPE->Double[i])) return FALSE;
         }
     }
     else {
         
         if (!_cmsWrite15Fixed16Number(io, 1)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 0)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 0)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 0)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 1)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 0)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 0)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 0)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 1)) return FALSE;
     }
 
     // The prelinearization table
     if (!Write8bitTables(self ->ContextID, io, NewLUT ->InputChannels, PreMPE)) return FALSE;
 
     nTabSize = uipow(NewLUT->OutputChannels, clutPoints, NewLUT ->InputChannels);
     if (nTabSize == (cmsUInt32Number) -1) return FALSE;
     if (nTabSize > 0) {
 
         // The 3D CLUT.
         if (clut != NULL) {
 
             for (j=0; j < nTabSize; j++) {
 
                 val = (cmsUInt8Number) FROM_16_TO_8(clut ->Tab.T[j]);
                 if (!_cmsWriteUInt8Number(io, val)) return FALSE;
             }
         }
     }
 
     // The postlinearization table
     if (!Write8bitTables(self ->ContextID, io, NewLUT ->OutputChannels, PostMPE)) return FALSE;
 
     return TRUE;
 
     cmsUNUSED_PARAMETER(nItems);
 }
@@ -2184,127 +2192,135 @@ static
 cmsBool Type_LUT16_Write(struct _cms_typehandler_struct* self, cmsIOHANDLER* io, void* Ptr, cmsUInt32Number nItems)
 {
     cmsUInt32Number nTabSize;
     cmsPipeline* NewLUT = (cmsPipeline*) Ptr;
     cmsStage* mpe;
     _cmsStageToneCurvesData* PreMPE = NULL, *PostMPE = NULL;
     _cmsStageMatrixData* MatMPE = NULL;
     _cmsStageCLutData* clut = NULL;
     cmsUInt32Number i, InputChannels, OutputChannels, clutPoints;
 
     // Disassemble the LUT into components.
     mpe = NewLUT -> Elements;
     if (mpe != NULL && mpe ->Type == cmsSigMatrixElemType) {
 
         MatMPE = (_cmsStageMatrixData*) mpe ->Data;
         if (mpe->InputChannels != 3 || mpe->OutputChannels != 3) return FALSE;
         mpe = mpe -> Next;
     }
 
 
     if (mpe != NULL && mpe ->Type == cmsSigCurveSetElemType) {
         PreMPE = (_cmsStageToneCurvesData*) mpe ->Data;
         mpe = mpe -> Next;
     }
 
     if (mpe != NULL && mpe ->Type == cmsSigCLutElemType) {
         clut  = (_cmsStageCLutData*) mpe -> Data;
         mpe = mpe ->Next;
     }
 
     if (mpe != NULL && mpe ->Type == cmsSigCurveSetElemType) {
         PostMPE = (_cmsStageToneCurvesData*) mpe ->Data;
         mpe = mpe -> Next;
     }
 
     // That should be all
     if (mpe != NULL) {
-        cmsSignalError(mpe->ContextID, cmsERROR_UNKNOWN_EXTENSION, "LUT is not suitable to be saved as LUT16");
+        cmsSignalError(self->ContextID, cmsERROR_UNKNOWN_EXTENSION, "LUT is not suitable to be saved as LUT16");
         return FALSE;
     }
 
     InputChannels  = cmsPipelineInputChannels(NewLUT);
     OutputChannels = cmsPipelineOutputChannels(NewLUT);
 
     if (clut == NULL)
         clutPoints = 0;
-    else
-        clutPoints    = clut->Params->nSamples[0];
+    else {
+        // Lut16 only allows same CLUT points in all dimensions        
+        clutPoints = clut->Params->nSamples[0];
+        for (i = 1; i < InputChannels; i++) {
+            if (clut->Params->nSamples[i] != clutPoints) {
+                cmsSignalError(self->ContextID, cmsERROR_UNKNOWN_EXTENSION, "LUT with different samples per dimension not suitable to be saved as LUT16");
+                return FALSE;
+            }
+        }
+    }
 
     if (!_cmsWriteUInt8Number(io, (cmsUInt8Number) InputChannels)) return FALSE;
     if (!_cmsWriteUInt8Number(io, (cmsUInt8Number) OutputChannels)) return FALSE;
     if (!_cmsWriteUInt8Number(io, (cmsUInt8Number) clutPoints)) return FALSE;
     if (!_cmsWriteUInt8Number(io, 0)) return FALSE; // Padding
     
     if (MatMPE != NULL) {
                 
         for (i = 0; i < 9; i++)
         {
             if (!_cmsWrite15Fixed16Number(io, MatMPE->Double[i])) return FALSE;
         }
       
     }
     else {
         
         if (!_cmsWrite15Fixed16Number(io, 1)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 0)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 0)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 0)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 1)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 0)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 0)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 0)) return FALSE;
         if (!_cmsWrite15Fixed16Number(io, 1)) return FALSE;
     }
 
 
     if (PreMPE != NULL) {
         if (!_cmsWriteUInt16Number(io, (cmsUInt16Number) PreMPE ->TheCurves[0]->nEntries)) return FALSE;
     } else {
             if (!_cmsWriteUInt16Number(io, 2)) return FALSE;
     }
 
     if (PostMPE != NULL) {
         if (!_cmsWriteUInt16Number(io, (cmsUInt16Number) PostMPE ->TheCurves[0]->nEntries)) return FALSE;
     } else {
         if (!_cmsWriteUInt16Number(io, 2)) return FALSE;
 
     }
 
     // The prelinearization table
 
     if (PreMPE != NULL) {
         if (!Write16bitTables(self ->ContextID, io, PreMPE)) return FALSE;
     }
     else {
         for (i=0; i < InputChannels; i++) {
 
             if (!_cmsWriteUInt16Number(io, 0)) return FALSE;
             if (!_cmsWriteUInt16Number(io, 0xffff)) return FALSE;
         }
     }
 
     nTabSize = uipow(OutputChannels, clutPoints, InputChannels);
     if (nTabSize == (cmsUInt32Number) -1) return FALSE;
     if (nTabSize > 0) {
         // The 3D CLUT.
         if (clut != NULL) {
             if (!_cmsWriteUInt16Array(io, nTabSize, clut->Tab.T)) return FALSE;
         }
     }
 
     // The postlinearization table
     if (PostMPE != NULL) {
         if (!Write16bitTables(self ->ContextID, io, PostMPE)) return FALSE;
     }
     else {
         for (i=0; i < OutputChannels; i++) {
 
             if (!_cmsWriteUInt16Number(io, 0)) return FALSE;
             if (!_cmsWriteUInt16Number(io, 0xffff)) return FALSE;
         }
     }
 
     return TRUE;
 
     cmsUNUSED_PARAMETER(nItems);
 }
