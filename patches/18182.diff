commit 986b5dff173413fa712db27eb677cdef15f0bab6
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Sun Oct 13 11:18:55 2019 -0400

    https://github.com/ImageMagick/ImageMagick/issues/1748

diff --git a/coders/tiff.c b/coders/tiff.c
index 366abc853..dd0766df9 100644
--- a/coders/tiff.c
+++ b/coders/tiff.c
@@ -674,45 +674,56 @@ static toff_t TIFFGetBlobSize(thandle_t image)
 static void TIFFGetProfiles(TIFF *tiff,Image *image,ExceptionInfo *exception)
 {
   uint32
     length;
 
   unsigned char
     *profile;
 
   length=0;
 #if defined(TIFFTAG_ICCPROFILE)
   if ((TIFFGetField(tiff,TIFFTAG_ICCPROFILE,&length,&profile) == 1) &&
       (profile != (unsigned char *) NULL))
     (void) ReadProfile(image,"icc",profile,(ssize_t) length,exception);
 #endif
 #if defined(TIFFTAG_PHOTOSHOP)
   if ((TIFFGetField(tiff,TIFFTAG_PHOTOSHOP,&length,&profile) == 1) &&
       (profile != (unsigned char *) NULL))
     (void) ReadProfile(image,"8bim",profile,(ssize_t) length,exception);
 #endif
 #if defined(TIFFTAG_RICHTIFFIPTC)
   if ((TIFFGetField(tiff,TIFFTAG_RICHTIFFIPTC,&length,&profile) == 1) &&
       (profile != (unsigned char *) NULL))
     {
       if (TIFFIsByteSwapped(tiff) != 0)
         TIFFSwabArrayOfLong((uint32 *) profile,(size_t) length);
       (void) ReadProfile(image,"iptc",profile,4L*length,exception);
     }
 #endif
 #if defined(TIFFTAG_XMLPACKET)
   if ((TIFFGetField(tiff,TIFFTAG_XMLPACKET,&length,&profile) == 1) &&
       (profile != (unsigned char *) NULL))
     {
+      StringInfo
+        *dng;
+
       (void) ReadProfile(image,"xmp",profile,(ssize_t) length,exception);
-      if (strstr((char *) profile,"dc:format=\"image/dng\"") != (char *) NULL)
-        (void) CopyMagickString(image->magick,"DNG",MagickPathExtent);
+      dng=BlobToStringInfo(profile,length);
+      if (dng != (StringInfo *) NULL)
+        {
+          const char
+            *target = "dc:format=\"image/dng\"";
+
+          if (strstr((char *) GetStringInfoDatum(dng),target) != (char *) NULL)
+            (void) CopyMagickString(image->magick,"DNG",MagickPathExtent);
+          dng=DestroyStringInfo(dng);
+        }
     }
 #endif
   if ((TIFFGetField(tiff,34118,&length,&profile) == 1) &&
       (profile != (unsigned char *) NULL))
     (void) ReadProfile(image,"tiff:34118",profile,(ssize_t) length,
       exception);
   if ((TIFFGetField(tiff,37724,&length,&profile) == 1) &&
       (profile != (unsigned char *) NULL))
     (void) ReadProfile(image,"tiff:37724",profile,(ssize_t) length,exception);
 }
@@ -806,149 +817,149 @@ static void TIFFGetProperties(TIFF *tiff,Image *image,ExceptionInfo *exception)
 static void TIFFGetEXIFProperties(TIFF *tiff,Image *image,
   ExceptionInfo *exception)
 {
 #if defined(MAGICKCORE_HAVE_TIFFREADEXIFDIRECTORY)
   char
     value[MagickPathExtent];
 
   register ssize_t
     i;
 
   tdir_t
     directory;
 
 #if defined(TIFF_VERSION_BIG)
   uint64
 #else
   uint32
 #endif
     offset;
 
   void
     *sans[2] = { NULL, NULL };
 
   /*
     Read EXIF properties.
   */
   offset=0;
   if (TIFFGetField(tiff,TIFFTAG_EXIFIFD,&offset) != 1)
     return;
   directory=TIFFCurrentDirectory(tiff);
   if (TIFFReadEXIFDirectory(tiff,offset) != 1)
     {
       TIFFSetDirectory(tiff,directory);
       return;
     }
   for (i=0; exif_info[i].tag != 0; i++)
   {
     *value='\0';
     switch (exif_info[i].type)
     {
       case TIFF_ASCII:
       {
         char
           *ascii;
 
         ascii=(char *) NULL;
         if ((TIFFGetField(tiff,exif_info[i].tag,&ascii,sans) == 1) &&
             (ascii != (char *) NULL) && (*ascii != '\0'))
           (void) CopyMagickString(value,ascii,MagickPathExtent);
         break;
       }
       case TIFF_SHORT:
       {
         if (exif_info[i].variable_length == 0)
           {
             uint16
               shorty;
 
             shorty=0;
             if (TIFFGetField(tiff,exif_info[i].tag,&shorty,sans) == 1)
               (void) FormatLocaleString(value,MagickPathExtent,"%d",shorty);
           }
         else if (exif_info[i].variable_length == 2)
         {
           uint16
             *shorty;
- 
+
           shorty=0;
           if ((TIFFGetField(tiff,exif_info[i].tag,&shorty,sans) == 1) &&
               (shorty != (uint16 *) NULL))
             (void) FormatLocaleString(value,MagickPathExtent,"%d",*shorty);
         }
         else
           {
             int
               tiff_status;
 
             uint16
               *shorty;
 
             uint16
               shorty_num;
 
             tiff_status=TIFFGetField(tiff,exif_info[i].tag,&shorty_num,&shorty,
               sans);
             if (tiff_status == 1)
               (void) FormatLocaleString(value,MagickPathExtent,"%d",
                 shorty_num != 0 ? shorty[0] : 0);
           }
         break;
       }
       case TIFF_LONG:
       {
         uint32
           longy;
 
         longy=0;
         if (TIFFGetField(tiff,exif_info[i].tag,&longy,sans) == 1)
           (void) FormatLocaleString(value,MagickPathExtent,"%d",longy);
         break;
       }
 #if defined(TIFF_VERSION_BIG)
       case TIFF_LONG8:
       {
         uint64
           long8y;
 
         long8y=0;
         if (TIFFGetField(tiff,exif_info[i].tag,&long8y,sans) == 1)
           (void) FormatLocaleString(value,MagickPathExtent,"%.20g",(double)
             ((MagickOffsetType) long8y));
         break;
       }
 #endif
       case TIFF_RATIONAL:
       case TIFF_SRATIONAL:
       case TIFF_FLOAT:
       {
         float
           floaty;
 
         floaty=0.0;
         if (TIFFGetField(tiff,exif_info[i].tag,&floaty,sans) == 1)
           (void) FormatLocaleString(value,MagickPathExtent,"%g",(double)
             floaty);
         break;
       }
       case TIFF_DOUBLE:
       {
         double
           doubley;
 
         doubley=0.0;
         if (TIFFGetField(tiff,exif_info[i].tag,&doubley,sans) == 1)
           (void) FormatLocaleString(value,MagickPathExtent,"%g",doubley);
         break;
       }
       default:
         break;
     }
     if (*value != '\0')
       (void) SetImageProperty(image,exif_info[i].property,value,exception);
   }
   TIFFSetDirectory(tiff,directory);
 #else
   (void) tiff;
   (void) image;
 #endif
 }
