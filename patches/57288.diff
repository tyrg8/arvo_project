commit 8090e5856465c0b8e26e2a080f4b498f37fa83ab
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Fri Mar 17 12:27:07 2023 +0100

    malloc-fail: Fix buffer overread in htmlParseScript
    
    Found by OSS-Fuzz, see #344.

diff --git a/HTMLparser.c b/HTMLparser.c
index 0830584f..67c39385 100644
--- a/HTMLparser.c
+++ b/HTMLparser.c
@@ -3098,85 +3098,85 @@ static void
 htmlParseScript(htmlParserCtxtPtr ctxt) {
     xmlChar buf[HTML_PARSER_BIG_BUFFER_SIZE + 5];
     int nbchar = 0;
     int cur,l;
 
     SHRINK;
     cur = CUR_CHAR(l);
     while (cur != 0) {
 	if ((cur == '<') && (NXT(1) == '/')) {
             /*
              * One should break here, the specification is clear:
              * Authors should therefore escape "</" within the content.
              * Escape mechanisms are specific to each scripting or
              * style sheet language.
              *
              * In recovery mode, only break if end tag match the
              * current tag, effectively ignoring all tags inside the
              * script/style block and treating the entire block as
              * CDATA.
              */
             if (ctxt->recovery) {
                 if (xmlStrncasecmp(ctxt->name, ctxt->input->cur+2,
 				   xmlStrlen(ctxt->name)) == 0)
                 {
                     break; /* while */
                 } else {
 		    htmlParseErr(ctxt, XML_ERR_TAG_NAME_MISMATCH,
 				 "Element %s embeds close tag\n",
 		                 ctxt->name, NULL);
 		}
             } else {
                 if (((NXT(2) >= 'A') && (NXT(2) <= 'Z')) ||
                     ((NXT(2) >= 'a') && (NXT(2) <= 'z')))
                 {
                     break; /* while */
                 }
             }
 	}
         if (IS_CHAR(cur)) {
 	    COPY_BUF(l,buf,nbchar,cur);
         } else {
             htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,
                             "Invalid char in CDATA 0x%X\n", cur);
         }
 	if (nbchar >= HTML_PARSER_BIG_BUFFER_SIZE) {
             buf[nbchar] = 0;
 	    if (ctxt->sax->cdataBlock!= NULL) {
 		/*
 		 * Insert as CDATA, which is the same as HTML_PRESERVE_NODE
 		 */
 		ctxt->sax->cdataBlock(ctxt->userData, buf, nbchar);
 	    } else if (ctxt->sax->characters != NULL) {
 		ctxt->sax->characters(ctxt->userData, buf, nbchar);
 	    }
 	    nbchar = 0;
 	}
-	GROW;
 	NEXTL(l);
+	GROW;
 	cur = CUR_CHAR(l);
     }
 
     if ((nbchar != 0) && (ctxt->sax != NULL) && (!ctxt->disableSAX)) {
         buf[nbchar] = 0;
 	if (ctxt->sax->cdataBlock!= NULL) {
 	    /*
 	     * Insert as CDATA, which is the same as HTML_PRESERVE_NODE
 	     */
 	    ctxt->sax->cdataBlock(ctxt->userData, buf, nbchar);
 	} else if (ctxt->sax->characters != NULL) {
 	    ctxt->sax->characters(ctxt->userData, buf, nbchar);
 	}
     }
 }
 
 
 /**
  * htmlParseCharDataInternal:
  * @ctxt:  an HTML parser context
  * @readahead: optional read ahead character in ascii range
  *
  * parse a CharData section.
  * if we are within a CDATA section ']]>' marks an end of section.
  *
  * [14] CharData ::= [^<&]* - ([^<&]* ']]>' [^<&]*)
  */
