commit 78b88d3be723ca990122ca7fcac0c95e5664be7b
Author: Wesley Shields <wxs@atarininja.org>
Date:   Wed Dec 19 04:22:10 2018 -0500

    Fix an OOM condition in dex module. (#998)
    
    When scanning certain files the dex module will OOM. The file seems to be
    obfuscated somehow and it causes the parser to misbehave. I haven't completely
    narrowed down what is going on, but this change at least allows the parser to
    complete without excessive memory usage and also quickly.
    
    This is easily triggerable with
    c8a3172a42cd9270db562b8fd0fddc15d35511483818bfc01c508fdb39f01635.
    
    This change does two things:
    
    1. Move the check for name_idx on both fields and methods to earlier in the
    function. If the name_idx is UNDEFINED return early and indicate to the caller
    that it should stop parsing that piece because it's not going to work.
    
    2. The parser now support abandoning parsing certain pieces early if the
    corresponding function (load_encoded_field or load_encoded_method) returns 0.
    The parser would otherwise spend A LOT of time parsing files that are obviously
    "wrong."
    
    It does cause some method names (and possibly other things) to be incorrectly
    parsed. For example, there's this output now when running the module on the
    above sample:
    
    [1]
                    class_name = "Landroid/animation/AnimatorSet;"
                    name = "le\x00\x11setExistBitmapImg\x00\x0bsetExpanded\x00\x09setExport\x00\x0dsetExportPath\x00\x0fsetExtActionBar\x00\x13setExtendedProperty"
                    proto = "LJ"
                    direct = 0
                    virtual = 1
                    method_idx_diff = 17
                    access_flags = 1
                    code_off = 17
                    code_item
                                    registers_size = 52336
                                    ins_size = 46768
                                    outs_size = 24434
                                    tries_size = 46705
                                    debug_info_off = 1781676661
                                    insns_size = 74018772
                                    insns = UNDEFINED
                                    padding = UNDEFINED
                                    tries
                                    handlers

diff --git a/libyara/modules/dex.c b/libyara/modules/dex.c
index b95c0cd6..3338bc11 100644
--- a/libyara/modules/dex.c
+++ b/libyara/modules/dex.c
@@ -350,138 +350,141 @@ void dex_parse_header(
 uint32_t load_encoded_field(
     DEX* dex,
     size_t start_offset,
     uint32_t *previous_field_idx,
     int index_encoded_field,
     int static_field,
     int instance_field)
 {
   #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse encoded field start_offset:0x%zx\n", start_offset);
   #endif
 
   if (!fits_in_dex(dex, dex->data + start_offset, sizeof(uint32_t) * 2))
     return 0;
 
   uint32_t current_size = 0;
 
   encoded_field_t encoded_field;
 
   encoded_field.field_idx_diff = (uint32_t) read_uleb128(
       (dex->data + start_offset + current_size), &current_size);
 
   encoded_field.access_flags = (uint32_t) read_uleb128(
       (dex->data + start_offset + current_size), &current_size);
 
   *previous_field_idx = encoded_field.field_idx_diff + *previous_field_idx;
 
+  int name_idx = (int) get_integer(
+      dex->object, "field_ids[%i].name_idx", *previous_field_idx);
+
+  if (name_idx == (int)(UNDEFINED & 0xFFFFFFFF))
+    return 0;
+
+  #ifdef DEBUG_DEX_MODULE
+  printf("[DEX]\tNAME_IDX 0x%x\n", name_idx);
+  #endif
+
   set_integer(
       encoded_field.field_idx_diff,
       dex->object,
       "field[%i].field_idx_diff",
       index_encoded_field);
 
   set_integer(
       encoded_field.access_flags,
        dex->object,
       "field[%i].access_flags",
       index_encoded_field);
 
   set_integer(
       static_field,
       dex->object,
       "field[%i].static",
       index_encoded_field);
 
   set_integer(
       instance_field,
       dex->object,
       "field[%i].instance",
       index_encoded_field);
 
   #ifdef DEBUG_DEX_MODULE
   printf("[DEX]\tEncoded field field_idx:0x%x field_idx_diff:0x%x access_flags:0x%x\n",
       *previous_field_idx,
       encoded_field.field_idx_diff,
       encoded_field.access_flags);
   #endif
 
-  int name_idx = (int) get_integer(
-      dex->object, "field_ids[%i].name_idx", *previous_field_idx);
-
-  #ifdef DEBUG_DEX_MODULE
-  printf("[DEX]\tNAME_IDX 0x%x\n", name_idx);
-  #endif
-
   SIZED_STRING* field_name = get_string(
       dex->object, "string_ids[%i].value", name_idx);
 
   if (field_name != NULL)
   {
     #ifdef DEBUG_DEX_MODULE
     printf("[DEX]\tFIELD_NAME %s NAME_IDX 0x%x\n",
         field_name->c_string,
         name_idx);
     #endif
 
     set_sized_string(
         field_name->c_string,
         field_name->length,
         dex->object,
         "field[%i].name",
         index_encoded_field);
   }
 
   int class_idx = (int) get_integer(
       dex->object, "field_ids[%i].class_idx", *previous_field_idx);
 
   int descriptor_idx = (int) get_integer(
       dex->object, "type_ids[%i].descriptor_idx", class_idx);
 
   SIZED_STRING* class_name = get_string(
       dex->object, "string_ids[%i].value", descriptor_idx);
 
   if (class_name != NULL)
   {
     #ifdef DEBUG_DEX_MODULE
     printf("[DEX]\tCLASS_NAME %s CLASS_IDX 0x%x DESCRIPTOR_IDX 0x%x\n",
         class_name->c_string,
         class_idx,
         descriptor_idx);
     #endif
 
     set_sized_string(
         class_name->c_string,
         class_name->length,
         dex->object,
         "field[%i].class_name",
         index_encoded_field);
   }
 
   int type_idx = (int) get_integer(dex->object,
       "field_ids[%i].type_idx", *previous_field_idx);
 
   int shorty_idx = (int) get_integer(dex->object,
       "type_ids[%i].descriptor_idx", type_idx);
 
   SIZED_STRING* proto_name = get_string(dex->object,
       "string_ids[%i].value", shorty_idx);
 
   if (proto_name != NULL)
   {
     #ifdef DEBUG_DEX_MODULE
     printf("[DEX]\tPROTO_NAME %s TYPE_IDX 0x%x SHORTY_IDX 0x%x\n",
         proto_name->c_string,
         type_idx,
         shorty_idx);
     #endif
 
     set_sized_string(
         proto_name->c_string,
         proto_name->length,
         dex->object,
         "field[%i].proto",
         index_encoded_field);
   }
 
   return current_size;
 }
@@ -489,184 +492,187 @@ uint32_t load_encoded_field(
 uint32_t load_encoded_method(
     DEX* dex,
     size_t start_offset,
     uint32_t *previous_method_idx,
     int index_encoded_method,
     int direct_method,
     int virtual_method)
 {
   #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse encoded method start_offset:0x%zx\n", start_offset);
   #endif
 
   if (!fits_in_dex(dex, dex->data + start_offset, sizeof(uint32_t) * 3))
     return 0;
 
   uint32_t current_size = 0;
   encoded_method_t encoded_method;
 
   encoded_method.method_idx_diff = (uint32_t) read_uleb128(
       (dex->data + start_offset + current_size), &current_size);
 
   encoded_method.access_flags = (uint32_t) read_uleb128(
       (dex->data + start_offset + current_size), &current_size);
 
   encoded_method.code_off = (uint32_t) read_uleb128(
       (dex->data + start_offset + current_size), &current_size);
 
   *previous_method_idx = encoded_method.method_idx_diff + *previous_method_idx;
 
+  int name_idx = (int) get_integer(
+      dex->object, "method_ids[%i].name_idx", *previous_method_idx);
+
+  if (name_idx == (int)(UNDEFINED & 0xFFFFFFFF))
+    return 0;
+
+  #ifdef DEBUG_DEX_MODULE
+  printf("[DEX]\tNAME_IDX 0x%x\n", name_idx);
+  #endif
+
   set_integer(
       encoded_method.method_idx_diff,
       dex->object,
       "method[%i].method_idx_diff",
       index_encoded_method);
 
   set_integer(
       encoded_method.access_flags,
       dex->object,
       "method[%i].access_flags",
       index_encoded_method);
 
   set_integer(
       encoded_method.code_off,
       dex->object,
       "method[%i].code_off",
       index_encoded_method);
 
   set_integer(
       direct_method,
       dex->object,
       "method[%i].direct",
       index_encoded_method);
 
   set_integer(
       virtual_method,
       dex->object,
       "method[%i].virtual",
       index_encoded_method);
 
   #ifdef DEBUG_DEX_MODULE
   printf("[DEX]\tEncoded method method_idx:0x%x method_idx_diff:0x%x access_flags:0x%x code_off:0x%x\n",
       *previous_method_idx,
       encoded_method.method_idx_diff,
       encoded_method.access_flags,
       encoded_method.code_off);
   #endif
 
-  int name_idx = (int) get_integer(
-      dex->object, "method_ids[%i].name_idx", *previous_method_idx);
-
-  #ifdef DEBUG_DEX_MODULE
-  printf("[DEX]\tNAME_IDX 0x%x\n", name_idx);
-  #endif
-
   SIZED_STRING* method_name = get_string(
       dex->object,  "string_ids[%i].value", name_idx);
 
   if (method_name != NULL)
   {
     #ifdef DEBUG_DEX_MODULE
     printf("[DEX]\tMETHOD_NAME %s NAME_IDX 0x%x\n",
         method_name->c_string,
         name_idx);
     #endif
 
     set_sized_string(
         method_name->c_string,
         method_name->length,
         dex->object,
         "method[%i].name",
         index_encoded_method);
   }
 
   int class_idx = (int) get_integer(
       dex->object, "method_ids[%i].class_idx", *previous_method_idx);
 
   int descriptor_idx = (int) get_integer(
       dex->object, "type_ids[%i].descriptor_idx", class_idx);
 
   SIZED_STRING* class_name = get_string(
       dex->object, "string_ids[%i].value", descriptor_idx);
 
   if (class_name != NULL)
   {
     #ifdef DEBUG_DEX_MODULE
     printf("[DEX]\tCLASS_NAME %s CLASS_IDX 0x%x DESCRIPTOR_IDX:0x%x\n",
         class_name->c_string,
         class_idx,
         descriptor_idx);
     #endif
 
     set_sized_string(
         class_name->c_string,
         class_name->length,
         dex->object,
         "method[%i].class_name",
         index_encoded_method);
   }
 
   int proto_idx = (int) get_integer(
       dex->object, "method_ids[%i].proto_idx", *previous_method_idx);
 
   int shorty_idx = (int) get_integer(
       dex->object, "proto_ids[%i].shorty_idx", proto_idx);
 
   SIZED_STRING* proto_name = get_string(
       dex->object, "string_ids[%i].value", shorty_idx);
 
   if (proto_name != NULL)
   {
     #ifdef DEBUG_DEX_MODULE
     printf("[DEX]\tPROTO_NAME %s CLASS_IDX 0x%x DESCRIPTOR_IDX:0x%x\n",
         proto_name->c_string,
         class_idx,
         descriptor_idx);
     #endif
 
     set_sized_string(
         proto_name->c_string,
         proto_name->length, dex->object,
         "method[%i].proto",
         index_encoded_method);
   }
 
   if (encoded_method.code_off != 0)
   {
     #ifdef DEBUG_DEX_MODULE
     printf("[DEX]\t\tParse CODE item\n");
     #endif
 
     if (struct_fits_in_dex(
       dex, dex->data + encoded_method.code_off, sizeof(code_item_t)))
     {
       code_item_t* code_item = (code_item_t*) (
           dex->data + encoded_method.code_off);
 
       set_integer(code_item->registers_size, dex->object,
                   "method[%i].code_item.registers_size", index_encoded_method);
       set_integer(code_item->ins_size, dex->object,
                   "method[%i].code_item.ins_size", index_encoded_method);
       set_integer(code_item->outs_size, dex->object,
                   "method[%i].code_item.outs_size", index_encoded_method);
       set_integer(code_item->tries_size, dex->object,
                   "method[%i].code_item.tries_size", index_encoded_method);
       set_integer(code_item->debug_info_off, dex->object,
                   "method[%i].code_item.debug_info_off", index_encoded_method);
       set_integer(code_item->insns_size, dex->object,
                   "method[%i].code_item.insns_size", index_encoded_method);
 
       if (fits_in_dex(
         dex,
         dex->data + encoded_method.code_off + sizeof(code_item_t),
         code_item->insns_size * 2))
       {
         set_sized_string(
           (const char *)(dex->data + encoded_method.code_off + sizeof(code_item_t)),
           code_item->insns_size * 2,
           dex->object, "method[%i].code_item.insns", index_encoded_method);
       }
     }
   }
 
   return current_size;
 }
@@ -674,381 +680,406 @@ uint32_t load_encoded_method(
 void dex_parse(
     DEX* dex,
     uint64_t base_address)
 {
   dex_header_t* dex_header;
 
   int i, j;
 
   uint32_t uleb128_size = 0;
+  uint32_t new_size = 0;
   uint32_t index_class_data_item = 0;
   uint32_t index_encoded_method = 0;
   uint32_t index_encoded_field = 0;
 
   if (!struct_fits_in_dex(dex, dex->data, dex_header_t))
     return;
 
   dex_parse_header(dex->header, dex->object);
 
   dex_header = dex->header;
 
   if (!fits_in_dex(
         dex, dex->data + yr_le32toh(dex_header->string_ids_offset),
         yr_le32toh(dex_header->string_ids_size) * sizeof(string_id_item_t)))
     return;
 
   #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse STRING ID section\n");
   #endif
 
   // Get information about the String ID section
   for (i = 0; i < yr_le32toh(dex_header->string_ids_size); i++)
   {
     string_id_item_t* string_id_item = (string_id_item_t*) (
         dex->data +
         yr_le32toh(dex_header->string_ids_offset) +
         i * sizeof(string_id_item_t));
 
     #ifdef DEBUG_DEX_MODULE
     printf("[DEX] STRING ID item data_offset:0x%x\n",
         yr_le32toh(string_id_item->string_data_offset));
     #endif
 
     if (!fits_in_dex(
           dex, dex->data + yr_le32toh(string_id_item->string_data_offset),
           sizeof(uint32_t)))
       continue;
 
     uint32_t value = (uint32_t) read_uleb128(
         (dex->data + yr_le32toh(string_id_item->string_data_offset)),
         &uleb128_size);
 
     #ifdef DEBUG_DEX_MODULE
     printf("[DEX] STRING ID item size:0x%x\n", value);
     #endif
 
     if (!fits_in_dex(
           dex, dex->data + yr_le32toh(string_id_item->string_data_offset),
           value))
       continue;
 
     set_integer(
         yr_le32toh(string_id_item->string_data_offset), dex->object,
         "string_ids[%i].offset", i);
 
     set_integer(yr_le32toh(string_id_item->string_data_offset), dex->object,
                 "string_ids[%i].size", value);
 
     set_sized_string(
         (const char*) ((dex->data + yr_le32toh(string_id_item->string_data_offset) + 1)),
         value,
         dex->object,
         "string_ids[%i].value",
         i);
   }
 
   if (!fits_in_dex(
         dex, dex->data + yr_le32toh(dex_header->type_ids_offset),
         yr_le32toh(dex_header->type_ids_size) * sizeof(type_id_item_t)))
     return;
 
   #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse TYPE ID section\n");
   #endif
 
   // Get information about the Type ID section
   for (i = 0; i < yr_le32toh(dex_header->type_ids_size); i++)
   {
     type_id_item_t* type_id_item = (type_id_item_t*) (
         dex->data +
         yr_le32toh(dex_header->type_ids_offset) +
         i * sizeof(type_id_item_t));
 
     set_integer(
         yr_le32toh(type_id_item->descriptor_idx),
         dex->object,
         "type_ids[%i].descriptor_idx",
         i);
   }
 
   if (!fits_in_dex(
         dex, dex->data + yr_le32toh(dex_header->proto_ids_offset),
         yr_le32toh(dex_header->proto_ids_size) * sizeof(proto_id_item_t)))
     return;
 
   #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse PROTO ID section\n");
   #endif
 
   // Get information about the Proto ID section
   for (i = 0; i < yr_le32toh(dex_header->proto_ids_size); i++)
   {
     proto_id_item_t* proto_id_item = (proto_id_item_t*) (
         dex->data +
         yr_le32toh(dex_header->proto_ids_offset) +
         i * sizeof(proto_id_item_t));
 
     set_integer(yr_le32toh(proto_id_item->shorty_idx), dex->object,
                 "proto_ids[%i].shorty_idx", i);
     set_integer(yr_le32toh(proto_id_item->return_type_idx), dex->object,
                 "proto_ids[%i].return_type_idx", i);
     set_integer(yr_le32toh(proto_id_item->parameters_offset), dex->object,
                 "proto_ids[%i].parameters_offset", i);
   }
 
   if (!fits_in_dex(
         dex, dex->data + yr_le32toh(dex_header->field_ids_offset),
         yr_le32toh(dex_header->field_ids_size) * sizeof(field_id_item_t)))
     return;
 
   #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse FIELD ID section\n");
   #endif
 
   // Get information about the Field ID section
   for (i = 0; i < yr_le32toh(dex_header->field_ids_size); i++)
   {
     field_id_item_t* field_id_item = (field_id_item_t*) (
         dex->data +
         yr_le32toh(dex_header->field_ids_offset) +
         i * sizeof(field_id_item_t));
 
     set_integer(yr_le16toh(field_id_item->class_idx), dex->object,
                 "field_ids[%i].class_idx", i);
     set_integer(yr_le16toh(field_id_item->type_idx), dex->object,
                 "field_ids[%i].type_idx", i);
     set_integer(yr_le32toh(field_id_item->name_idx), dex->object,
                 "field_ids[%i].name_idx", i);
   }
 
   if (!fits_in_dex(
         dex, dex->data + yr_le32toh(dex_header->method_ids_offset),
         yr_le32toh(dex_header->method_ids_size) * sizeof(method_id_item_t)))
     return;
 
   #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse METHOD ID section\n");
   #endif
 
   // Get information about the Method ID section
   for (i = 0; i < yr_le32toh(dex_header->method_ids_size); i++)
   {
     method_id_item_t* method_id_item = (method_id_item_t*) (
         dex->data +
         yr_le32toh(dex_header->method_ids_offset) +
         i * sizeof(method_id_item_t));
 
     set_integer(yr_le16toh(method_id_item->class_idx), dex->object,
                 "method_ids[%i].class_idx", i);
     set_integer(yr_le16toh(method_id_item->proto_idx), dex->object,
                 "method_ids[%i].proto_idx", i);
     set_integer(yr_le32toh(method_id_item->name_idx), dex->object,
                 "method_ids[%i].name_idx", i);
   }
 
   #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse MAP List ID section\n");
   #endif
 
   // Get information about the Map List ID section
   if (yr_le32toh(dex_header->map_offset) != 0 &&
       fits_in_dex(dex, dex->data + yr_le32toh(dex_header->map_offset), sizeof(uint32_t)))
   {
     uint32_t* map_list_size = (uint32_t *) (
         dex->data + yr_le32toh(dex_header->map_offset));
 
     set_integer(yr_le32toh(*map_list_size), dex->object, "map_list.size");
 
     if (!fits_in_dex(
           dex, dex->data + yr_le32toh(dex_header->map_offset),
           sizeof(uint32_t) + yr_le32toh(*map_list_size) * sizeof(map_item_t)))
       return;
 
     for (i = 0; i < yr_le32toh(*map_list_size); i++)
     {
       map_item_t* map_item = (map_item_t*) (
           dex->data +
           yr_le32toh(dex_header->map_offset) +
           sizeof(uint32_t) +
           i * sizeof(map_item_t));
 
       set_integer(yr_le16toh(map_item->type), dex->object,
                   "map_list.map_item[%i].type", i);
       set_integer(yr_le16toh(map_item->unused), dex->object,
                   "map_list.map_item[%i].unused", i);
       set_integer(yr_le32toh(map_item->size), dex->object,
                   "map_list.map_item[%i].size", i);
       set_integer(yr_le32toh(map_item->offset), dex->object,
                   "map_list.map_item[%i].offset", i);
     }
   }
 
   if (!fits_in_dex(
         dex, dex->data + yr_le32toh(dex_header->class_defs_offset),
         yr_le32toh(dex_header->class_defs_size) * sizeof(class_id_item_t)))
     return;
 
   #ifdef DEBUG_DEX_MODULE
   printf("[DEX] Parse CLASS ID section\n");
   #endif
 
   // Get information about the Class ID section
   for (i = 0; i < yr_le32toh(dex_header->class_defs_size); i++)
   {
     class_id_item_t* class_id_item = (class_id_item_t*) (
         dex->data +
         yr_le32toh(dex_header->class_defs_offset) +
         i * sizeof(class_id_item_t));
 
     #ifdef DEBUG_DEX_MODULE
     printf("[DEX] CLASS ID item class_idx:0x%x access_flags:0x%x " \
            "super_class_idx:0x%x interfaces_off:0x%x source_file_idx:0x%x "\
            "annotations_offset:0x%x class_data_offset:0x%x "\
            "static_values_offset:0x%x\n",
            yr_le32toh(class_id_item->class_idx),
            yr_le32toh(class_id_item->access_flags),
            yr_le32toh(class_id_item->super_class_idx),
            yr_le32toh(class_id_item->interfaces_off),
            yr_le32toh(class_id_item->source_file_idx),
            yr_le32toh(class_id_item->annotations_offset),
            yr_le32toh(class_id_item->class_data_offset),
            yr_le32toh(class_id_item->static_values_offset));
     #endif
 
     set_integer(yr_le32toh(class_id_item->class_idx), dex->object,
                 "class_defs[%i].class_idx", i);
     set_integer(yr_le32toh(class_id_item->access_flags), dex->object,
                 "class_defs[%i].access_flags", i);
     set_integer(yr_le32toh(class_id_item->super_class_idx), dex->object,
                 "class_defs[%i].super_class_idx", i);
     set_integer(yr_le32toh(class_id_item->interfaces_off), dex->object,
                 "class_defs[%i].interfaces_off", i);
     set_integer(yr_le32toh(class_id_item->source_file_idx), dex->object,
                 "class_defs[%i].source_file_idx", i);
     set_integer(yr_le32toh(class_id_item->annotations_offset), dex->object,
                 "class_defs[%i].annotations_offset", i);
     set_integer(yr_le32toh(class_id_item->class_data_offset), dex->object,
                 "class_defs[%i].class_data_off", i);
     set_integer(yr_le32toh(class_id_item->static_values_offset), dex->object,
                 "class_defs[%i].static_values_offset", i);
 
     if (yr_le32toh(class_id_item->class_data_offset) != 0)
     {
       class_data_item_t class_data_item;
 
       if (!fits_in_dex(
             dex, dex->data + yr_le32toh(class_id_item->class_data_offset),
             4 * sizeof(uint32_t)))
         return;
 
       uleb128_size = 0;
 
       class_data_item.static_fields_size = (uint32_t) read_uleb128(
           (dex->data + yr_le32toh(class_id_item->class_data_offset)),
           &uleb128_size);
 
       class_data_item.instance_fields_size = (uint32_t) read_uleb128(
           (dex->data + yr_le32toh(class_id_item->class_data_offset) + uleb128_size),
           &uleb128_size);
 
       class_data_item.direct_methods_size = (uint32_t) read_uleb128(
           (dex->data + yr_le32toh(class_id_item->class_data_offset) + uleb128_size),
           &uleb128_size);
 
       class_data_item.virtual_methods_size = (uint32_t) read_uleb128(
           (dex->data + yr_le32toh(class_id_item->class_data_offset) + uleb128_size),
           &uleb128_size);
 
       set_integer(
           class_data_item.static_fields_size, dex->object,
           "class_data_item[%i].static_fields_size", index_class_data_item);
 
       set_integer(
           class_data_item.instance_fields_size, dex->object,
           "class_data_item[%i].instance_fields_size", index_class_data_item);
 
       set_integer(
         class_data_item.direct_methods_size, dex->object,
         "class_data_item[%i].direct_methods_size", index_class_data_item);
 
       set_integer(
         class_data_item.virtual_methods_size, dex->object,
         "class_data_item[%i].virtual_methods_size", index_class_data_item);
 
       #ifdef DEBUG_DEX_MODULE
       printf("[DEX] CLASS DATA item static fields\n");
       #endif
 
       uint32_t previous_field_idx = 0;
       for (j = 0; j < class_data_item.static_fields_size; j++)
       {
-        uleb128_size += load_encoded_field(
+        new_size = load_encoded_field(
             dex,
             yr_le32toh(class_id_item->class_data_offset) + uleb128_size,
             &previous_field_idx,
             index_encoded_field,
             1,0);
 
+        // If the current field isn't parsed the other fields aren't likely to
+        // parse.
+        if (new_size == 0)
+          break;
+
+        uleb128_size += new_size;
         index_encoded_field += 1;
       }
 
       #ifdef DEBUG_DEX_MODULE
       printf("[DEX] CLASS DATA item instance fields\n");
       #endif
 
       previous_field_idx = 0;
 
       for (j = 0; j < class_data_item.instance_fields_size; j++)
       {
-        uleb128_size += load_encoded_field(
+        new_size = load_encoded_field(
             dex,
             yr_le32toh(class_id_item->class_data_offset) + uleb128_size,
             &previous_field_idx,
             index_encoded_field,
             0, 1);
 
+        // If the current field isn't parsed the other fields aren't likely to
+        // parse.
+        if (new_size == 0)
+          break;
+
+        uleb128_size += new_size;
         index_encoded_field += 1;
       }
 
       #ifdef DEBUG_DEX_MODULE
       printf("[DEX] CLASS DATA item direct methods\n");
       #endif
 
       uint32_t previous_method_idx = 0;
 
       for (j = 0; j < class_data_item.direct_methods_size; j++)
       {
-        uleb128_size += load_encoded_method(
+        new_size = load_encoded_method(
             dex,
             yr_le32toh(class_id_item->class_data_offset) + uleb128_size,
             &previous_method_idx,
             index_encoded_method,
             1, 0);
 
+        // If the current field isn't parsed the other fields aren't likely to
+        // parse.
+        if (new_size == 0)
+          break;
+
+        uleb128_size += new_size;
         index_encoded_method += 1;
       }
 
       #ifdef DEBUG_DEX_MODULE
       printf("[DEX] CLASS DATA item virtual methods\n");
       #endif
 
       previous_method_idx = 0;
 
       for (j = 0; j < class_data_item.virtual_methods_size; j++)
       {
-        uleb128_size += load_encoded_method(
+        new_size = load_encoded_method(
             dex,
             yr_le32toh(class_id_item->class_data_offset) + uleb128_size,
             &previous_method_idx,
             index_encoded_method,
             0, 1);
 
+        // If the current field isn't parsed the other fields aren't likely to
+        // parse.
+        if (new_size == 0)
+          break;
+
+        uleb128_size += new_size;
         index_encoded_method += 1;
       }
 
       index_class_data_item++;
     }
   }
 
   set_integer(index_encoded_method, dex->object, "number_of_methods");
   set_integer(index_encoded_field, dex->object, "number_of_fields");
 }
