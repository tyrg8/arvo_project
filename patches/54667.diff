commit c093f5eeabf152730bdf9ca32cbc8e045933369c
Author: Alan Modra <amodra@gmail.com>
Date:   Wed Jan 4 21:43:54 2023 +1030

    asan: segv in parse_module
    
            * vms-alpha.c (parse_module): Ignore DST__K_SRC_SETFILE data
            if out of range.

diff --git a/bfd/vms-alpha.c b/bfd/vms-alpha.c
index a9f87962f5b..fd2cf50441f 100644
--- a/bfd/vms-alpha.c
+++ b/bfd/vms-alpha.c
@@ -4347,574 +4347,577 @@ static bool
 parse_module (bfd *abfd, struct module *module, unsigned char *ptr,
 	      bfd_size_type length)
 {
   unsigned char *maxptr = ptr + length;
   unsigned char *src_ptr, *pcl_ptr;
   unsigned int prev_linum = 0, curr_linenum = 0;
   bfd_vma prev_pc = 0, curr_pc = 0;
   struct srecinfo *curr_srec, *srec;
   struct lineinfo *curr_line, *line;
   struct funcinfo *funcinfo;
 
   /* Initialize tables with zero element.  */
   curr_srec = (struct srecinfo *) bfd_zalloc (abfd, sizeof (struct srecinfo));
   if (!curr_srec)
     return false;
   module->srec_table = curr_srec;
 
   curr_line = (struct lineinfo *) bfd_zalloc (abfd, sizeof (struct lineinfo));
   if (!curr_line)
     return false;
   module->line_table = curr_line;
 
   while (ptr + 3 < maxptr)
     {
       /* The first byte is not counted in the recorded length.  */
       int rec_length = bfd_getl16 (ptr) + 1;
       int rec_type = bfd_getl16 (ptr + 2);
 
       vms_debug2 ((2, "DST record: leng %d, type %d\n", rec_length, rec_type));
 
       if (rec_length > maxptr - ptr)
 	break;
       if (rec_type == DST__K_MODEND)
 	break;
 
       switch (rec_type)
 	{
 	case DST__K_MODBEG:
 	  if (rec_length <= DST_S_B_MODBEG_NAME)
 	    break;
 	  module->name
 	    = _bfd_vms_save_counted_string (abfd, ptr + DST_S_B_MODBEG_NAME,
 					    rec_length - DST_S_B_MODBEG_NAME);
 
 	  curr_pc = 0;
 	  prev_pc = 0;
 	  curr_linenum = 0;
 	  prev_linum = 0;
 
 	  vms_debug2 ((3, "module: %s\n", module->name));
 	  break;
 
 	case DST__K_MODEND:
 	  break;
 
 	case DST__K_RTNBEG:
 	  if (rec_length <= DST_S_B_RTNBEG_NAME)
 	    break;
 	  funcinfo = (struct funcinfo *)
 	    bfd_zalloc (abfd, sizeof (struct funcinfo));
 	  if (!funcinfo)
 	    return false;
 	  funcinfo->name
 	    = _bfd_vms_save_counted_string (abfd, ptr + DST_S_B_RTNBEG_NAME,
 					    rec_length - DST_S_B_RTNBEG_NAME);
 	  funcinfo->low = bfd_getl32 (ptr + DST_S_L_RTNBEG_ADDRESS);
 	  funcinfo->next = module->func_table;
 	  module->func_table = funcinfo;
 
 	  vms_debug2 ((3, "routine: %s at 0x%lx\n",
 		       funcinfo->name, (unsigned long) funcinfo->low));
 	  break;
 
 	case DST__K_RTNEND:
 	  if (rec_length < DST_S_L_RTNEND_SIZE + 4)
 	    break;
 	  if (!module->func_table)
 	    return false;
 	  module->func_table->high = module->func_table->low
 	    + bfd_getl32 (ptr + DST_S_L_RTNEND_SIZE) - 1;
 
 	  if (module->func_table->high > module->high)
 	    module->high = module->func_table->high;
 
 	  vms_debug2 ((3, "end routine\n"));
 	  break;
 
 	case DST__K_PROLOG:
 	  vms_debug2 ((3, "prologue\n"));
 	  break;
 
 	case DST__K_EPILOG:
 	  vms_debug2 ((3, "epilog\n"));
 	  break;
 
 	case DST__K_BLKBEG:
 	  vms_debug2 ((3, "block\n"));
 	  break;
 
 	case DST__K_BLKEND:
 	  vms_debug2 ((3, "end block\n"));
 	  break;
 
 	case DST__K_SOURCE:
 	  src_ptr = ptr + DST_S_C_SOURCE_HEADER_SIZE;
 
 	  vms_debug2 ((3, "source info\n"));
 
 	  while (src_ptr - ptr < rec_length)
 	    {
 	      int cmd = src_ptr[0], cmd_length, data;
 
 	      switch (cmd)
 		{
 		case DST__K_SRC_DECLFILE:
 		  if (src_ptr - ptr + DST_S_B_SRC_DF_LENGTH >= rec_length)
 		    cmd_length = 0x10000;
 		  else
 		    cmd_length = src_ptr[DST_S_B_SRC_DF_LENGTH] + 2;
 		  break;
 
 		case DST__K_SRC_DEFLINES_B:
 		  cmd_length = 2;
 		  break;
 
 		case DST__K_SRC_DEFLINES_W:
 		  cmd_length = 3;
 		  break;
 
 		case DST__K_SRC_INCRLNUM_B:
 		  cmd_length = 2;
 		  break;
 
 		case DST__K_SRC_SETFILE:
 		  cmd_length = 3;
 		  break;
 
 		case DST__K_SRC_SETLNUM_L:
 		  cmd_length = 5;
 		  break;
 
 		case DST__K_SRC_SETLNUM_W:
 		  cmd_length = 3;
 		  break;
 
 		case DST__K_SRC_SETREC_L:
 		  cmd_length = 5;
 		  break;
 
 		case DST__K_SRC_SETREC_W:
 		  cmd_length = 3;
 		  break;
 
 		case DST__K_SRC_FORMFEED:
 		  cmd_length = 1;
 		  break;
 
 		default:
 		  cmd_length = 2;
 		  break;
 		}
 
 	      if (src_ptr - ptr + cmd_length > rec_length)
 		break;
 
 	      switch (cmd)
 		{
 		case DST__K_SRC_DECLFILE:
 		  {
 		    unsigned int fileid
 		      = bfd_getl16 (src_ptr + DST_S_W_SRC_DF_FILEID);
 		    char *filename = _bfd_vms_save_counted_string
 		      (abfd,
 		       src_ptr + DST_S_B_SRC_DF_FILENAME,
 		       ptr + rec_length - (src_ptr + DST_S_B_SRC_DF_FILENAME));
 
 		    if (fileid >= module->file_table_count)
 		      {
 			unsigned int old_count = module->file_table_count;
 			module->file_table_count += fileid;
 			module->file_table
 			  = bfd_realloc_or_free (module->file_table,
 						 module->file_table_count
 						 * sizeof (struct fileinfo));
 			if (module->file_table == NULL)
 			  return false;
 			memset (module->file_table + old_count, 0,
 				fileid * sizeof (struct fileinfo));
 		      }
 
 		    module->file_table [fileid].name = filename;
 		    module->file_table [fileid].srec = 1;
 		    vms_debug2 ((4, "DST_S_C_SRC_DECLFILE: %d, %s\n",
 				 fileid, module->file_table [fileid].name));
 		  }
 		  break;
 
 		case DST__K_SRC_DEFLINES_B:
 		  /* Perform the association and set the next higher index
 		     to the limit.  */
 		  data = src_ptr[DST_S_B_SRC_UNSBYTE];
 		  srec = (struct srecinfo *)
 		    bfd_zalloc (abfd, sizeof (struct srecinfo));
 		  srec->line = curr_srec->line + data;
 		  srec->srec = curr_srec->srec + data;
 		  srec->sfile = curr_srec->sfile;
 		  curr_srec->next = srec;
 		  curr_srec = srec;
 		  vms_debug2 ((4, "DST_S_C_SRC_DEFLINES_B: %d\n", data));
 		  break;
 
 		case DST__K_SRC_DEFLINES_W:
 		  /* Perform the association and set the next higher index
 		     to the limit.  */
 		  data = bfd_getl16 (src_ptr + DST_S_W_SRC_UNSWORD);
 		  srec = (struct srecinfo *)
 		    bfd_zalloc (abfd, sizeof (struct srecinfo));
 		  srec->line = curr_srec->line + data;
 		  srec->srec = curr_srec->srec + data,
 		  srec->sfile = curr_srec->sfile;
 		  curr_srec->next = srec;
 		  curr_srec = srec;
 		  vms_debug2 ((4, "DST_S_C_SRC_DEFLINES_W: %d\n", data));
 		  break;
 
 		case DST__K_SRC_INCRLNUM_B:
 		  data = src_ptr[DST_S_B_SRC_UNSBYTE];
 		  curr_srec->line += data;
 		  vms_debug2 ((4, "DST_S_C_SRC_INCRLNUM_B: %d\n", data));
 		  break;
 
 		case DST__K_SRC_SETFILE:
 		  data = bfd_getl16 (src_ptr + DST_S_W_SRC_UNSWORD);
-		  curr_srec->sfile = data;
-		  curr_srec->srec = module->file_table[data].srec;
+		  if ((unsigned int) data < module->file_table_count)
+		    {
+		      curr_srec->sfile = data;
+		      curr_srec->srec = module->file_table[data].srec;
+		    }
 		  vms_debug2 ((4, "DST_S_C_SRC_SETFILE: %d\n", data));
 		  break;
 
 		case DST__K_SRC_SETLNUM_L:
 		  data = bfd_getl32 (src_ptr + DST_S_L_SRC_UNSLONG);
 		  curr_srec->line = data;
 		  vms_debug2 ((4, "DST_S_C_SRC_SETLNUM_L: %d\n", data));
 		  break;
 
 		case DST__K_SRC_SETLNUM_W:
 		  data = bfd_getl16 (src_ptr + DST_S_W_SRC_UNSWORD);
 		  curr_srec->line = data;
 		  vms_debug2 ((4, "DST_S_C_SRC_SETLNUM_W: %d\n", data));
 		  break;
 
 		case DST__K_SRC_SETREC_L:
 		  data = bfd_getl32 (src_ptr + DST_S_L_SRC_UNSLONG);
 		  curr_srec->srec = data;
 		  module->file_table[curr_srec->sfile].srec = data;
 		  vms_debug2 ((4, "DST_S_C_SRC_SETREC_L: %d\n", data));
 		  break;
 
 		case DST__K_SRC_SETREC_W:
 		  data = bfd_getl16 (src_ptr + DST_S_W_SRC_UNSWORD);
 		  curr_srec->srec = data;
 		  module->file_table[curr_srec->sfile].srec = data;
 		  vms_debug2 ((4, "DST_S_C_SRC_SETREC_W: %d\n", data));
 		  break;
 
 		case DST__K_SRC_FORMFEED:
 		  vms_debug2 ((4, "DST_S_C_SRC_FORMFEED\n"));
 		  break;
 
 		default:
 		  _bfd_error_handler (_("unknown source command %d"),
 				      cmd);
 		  break;
 		}
 
 	      src_ptr += cmd_length;
 	    }
 	  break;
 
 	case DST__K_LINE_NUM:
 	  pcl_ptr = ptr + DST_S_C_LINE_NUM_HEADER_SIZE;
 
 	  vms_debug2 ((3, "line info\n"));
 
 	  while (pcl_ptr - ptr < rec_length)
 	    {
 	      /* The command byte is signed so we must sign-extend it.  */
 	      int cmd = ((signed char *)pcl_ptr)[0], cmd_length, data;
 
 	      switch (cmd)
 		{
 		case DST__K_DELTA_PC_W:
 		  cmd_length = 3;
 		  break;
 
 		case DST__K_DELTA_PC_L:
 		  cmd_length = 5;
 		  break;
 
 		case DST__K_INCR_LINUM:
 		  cmd_length = 2;
 		  break;
 
 		case DST__K_INCR_LINUM_W:
 		  cmd_length = 3;
 		  break;
 
 		case DST__K_INCR_LINUM_L:
 		  cmd_length = 5;
 		  break;
 
 		case DST__K_SET_LINUM_INCR:
 		  cmd_length = 2;
 		  break;
 
 		case DST__K_SET_LINUM_INCR_W:
 		  cmd_length = 3;
 		  break;
 
 		case DST__K_RESET_LINUM_INCR:
 		  cmd_length = 1;
 		  break;
 
 		case DST__K_BEG_STMT_MODE:
 		  cmd_length = 1;
 		  break;
 
 		case DST__K_END_STMT_MODE:
 		  cmd_length = 1;
 		  break;
 
 		case DST__K_SET_LINUM_B:
 		  cmd_length = 2;
 		  break;
 
 		case DST__K_SET_LINUM:
 		  cmd_length = 3;
 		  break;
 
 		case DST__K_SET_LINUM_L:
 		  cmd_length = 5;
 		  break;
 
 		case DST__K_SET_PC:
 		  cmd_length = 2;
 		  break;
 
 		case DST__K_SET_PC_W:
 		  cmd_length = 3;
 		  break;
 
 		case DST__K_SET_PC_L:
 		  cmd_length = 5;
 		  break;
 
 		case DST__K_SET_STMTNUM:
 		  cmd_length = 2;
 		  break;
 
 		case DST__K_TERM:
 		  cmd_length = 2;
 		  break;
 
 		case DST__K_TERM_W:
 		  cmd_length = 3;
 		  break;
 
 		case DST__K_TERM_L:
 		  cmd_length = 5;
 		  break;
 
 		case DST__K_SET_ABS_PC:
 		  cmd_length = 5;
 		  break;
 
 		default:
 		  if (cmd <= 0)
 		    cmd_length = 1;
 		  else
 		    cmd_length = 2;
 		  break;
 		}
 
 	      if (pcl_ptr - ptr + cmd_length > rec_length)
 		break;
 
 	      switch (cmd)
 		{
 		case DST__K_DELTA_PC_W:
 		  data = bfd_getl16 (pcl_ptr + DST_S_W_PCLINE_UNSWORD);
 		  curr_pc += data;
 		  curr_linenum += 1;
 		  vms_debug2 ((4, "DST__K_DELTA_PC_W: %d\n", data));
 		  break;
 
 		case DST__K_DELTA_PC_L:
 		  data = bfd_getl32 (pcl_ptr + DST_S_L_PCLINE_UNSLONG);
 		  curr_pc += data;
 		  curr_linenum += 1;
 		  vms_debug2 ((4, "DST__K_DELTA_PC_L: %d\n", data));
 		  break;
 
 		case DST__K_INCR_LINUM:
 		  data = pcl_ptr[DST_S_B_PCLINE_UNSBYTE];
 		  curr_linenum += data;
 		  vms_debug2 ((4, "DST__K_INCR_LINUM: %d\n", data));
 		  break;
 
 		case DST__K_INCR_LINUM_W:
 		  data = bfd_getl16 (pcl_ptr + DST_S_W_PCLINE_UNSWORD);
 		  curr_linenum += data;
 		  vms_debug2 ((4, "DST__K_INCR_LINUM_W: %d\n", data));
 		  break;
 
 		case DST__K_INCR_LINUM_L:
 		  data = bfd_getl32 (pcl_ptr + DST_S_L_PCLINE_UNSLONG);
 		  curr_linenum += data;
 		  vms_debug2 ((4, "DST__K_INCR_LINUM_L: %d\n", data));
 		  break;
 
 		case DST__K_SET_LINUM_INCR:
 		  _bfd_error_handler
 		    (_("%s not implemented"), "DST__K_SET_LINUM_INCR");
 		  break;
 
 		case DST__K_SET_LINUM_INCR_W:
 		  _bfd_error_handler
 		    (_("%s not implemented"), "DST__K_SET_LINUM_INCR_W");
 		  break;
 
 		case DST__K_RESET_LINUM_INCR:
 		  _bfd_error_handler
 		    (_("%s not implemented"), "DST__K_RESET_LINUM_INCR");
 		  break;
 
 		case DST__K_BEG_STMT_MODE:
 		  _bfd_error_handler
 		    (_("%s not implemented"), "DST__K_BEG_STMT_MODE");
 		  break;
 
 		case DST__K_END_STMT_MODE:
 		  _bfd_error_handler
 		    (_("%s not implemented"), "DST__K_END_STMT_MODE");
 		  break;
 
 		case DST__K_SET_LINUM_B:
 		  data = pcl_ptr[DST_S_B_PCLINE_UNSBYTE];
 		  curr_linenum = data;
 		  vms_debug2 ((4, "DST__K_SET_LINUM_B: %d\n", data));
 		  break;
 
 		case DST__K_SET_LINUM:
 		  data = bfd_getl16 (pcl_ptr + DST_S_W_PCLINE_UNSWORD);
 		  curr_linenum = data;
 		  vms_debug2 ((4, "DST__K_SET_LINE_NUM: %d\n", data));
 		  break;
 
 		case DST__K_SET_LINUM_L:
 		  data = bfd_getl32 (pcl_ptr + DST_S_L_PCLINE_UNSLONG);
 		  curr_linenum = data;
 		  vms_debug2 ((4, "DST__K_SET_LINUM_L: %d\n", data));
 		  break;
 
 		case DST__K_SET_PC:
 		  _bfd_error_handler
 		    (_("%s not implemented"), "DST__K_SET_PC");
 		  break;
 
 		case DST__K_SET_PC_W:
 		  _bfd_error_handler
 		    (_("%s not implemented"), "DST__K_SET_PC_W");
 		  break;
 
 		case DST__K_SET_PC_L:
 		  _bfd_error_handler
 		    (_("%s not implemented"), "DST__K_SET_PC_L");
 		  break;
 
 		case DST__K_SET_STMTNUM:
 		  _bfd_error_handler
 		    (_("%s not implemented"), "DST__K_SET_STMTNUM");
 		  break;
 
 		case DST__K_TERM:
 		  data = pcl_ptr[DST_S_B_PCLINE_UNSBYTE];
 		  curr_pc += data;
 		  vms_debug2 ((4, "DST__K_TERM: %d\n", data));
 		  break;
 
 		case DST__K_TERM_W:
 		  data = bfd_getl16 (pcl_ptr + DST_S_W_PCLINE_UNSWORD);
 		  curr_pc += data;
 		  vms_debug2 ((4, "DST__K_TERM_W: %d\n", data));
 		  break;
 
 		case DST__K_TERM_L:
 		  data = bfd_getl32 (pcl_ptr + DST_S_L_PCLINE_UNSLONG);
 		  curr_pc += data;
 		  vms_debug2 ((4, "DST__K_TERM_L: %d\n", data));
 		  break;
 
 		case DST__K_SET_ABS_PC:
 		  data = bfd_getl32 (pcl_ptr + DST_S_L_PCLINE_UNSLONG);
 		  curr_pc = data;
 		  vms_debug2 ((4, "DST__K_SET_ABS_PC: 0x%x\n", data));
 		  break;
 
 		default:
 		  if (cmd <= 0)
 		    {
 		      curr_pc -= cmd;
 		      curr_linenum += 1;
 		      vms_debug2 ((4, "bump pc to 0x%lx and line to %d\n",
 				   (unsigned long)curr_pc, curr_linenum));
 		    }
 		  else
 		    _bfd_error_handler (_("unknown line command %d"), cmd);
 		  break;
 		}
 
 	      if ((curr_linenum != prev_linum && curr_pc != prev_pc)
 		  || cmd <= 0
 		  || cmd == DST__K_DELTA_PC_L
 		  || cmd == DST__K_DELTA_PC_W)
 		{
 		  line = (struct lineinfo *)
 		    bfd_zalloc (abfd, sizeof (struct lineinfo));
 		  line->address = curr_pc;
 		  line->line = curr_linenum;
 
 		  curr_line->next = line;
 		  curr_line = line;
 
 		  prev_linum = curr_linenum;
 		  prev_pc = curr_pc;
 		  vms_debug2 ((4, "-> correlate pc 0x%lx with line %d\n",
 			       (unsigned long)curr_pc, curr_linenum));
 		}
 
 	      pcl_ptr += cmd_length;
 	    }
 	  break;
 
 	case 0x17: /* Undocumented type used by DEC C to declare equates.  */
 	  vms_debug2 ((3, "undocumented type 0x17\n"));
 	  break;
 
 	default:
 	  vms_debug2 ((3, "ignoring record\n"));
 	  break;
 
 	}
 
       ptr += rec_length;
     }
 
   /* Finalize tables with EOL marker.  */
   srec = (struct srecinfo *) bfd_zalloc (abfd, sizeof (struct srecinfo));
   srec->line = (unsigned int) -1;
   srec->srec = (unsigned int) -1;
   curr_srec->next = srec;
 
   line = (struct lineinfo *) bfd_zalloc (abfd, sizeof (struct lineinfo));
   line->line = (unsigned int) -1;
   line->address = (bfd_vma) -1;
   curr_line->next = line;
 
   /* Advertise that this module has been parsed.  This is needed
      because parsing can be either performed at module creation
      or deferred until debug info is consumed.  */
   SET_MODULE_PARSED (module);
   return true;
 }
 
 /* Build the list of modules for the specified BFD.  */
