commit ff73c307fae57fdb12e2fbbca87b9810d8b9cd27
Author: Guy Harris <guy@alum.mit.edu>
Date:   Sun Oct 28 20:24:47 2018 -0700

    Do bounds checking on scidx arrays.
    
    Fix up some comments while we're at it.
    
    Bug: 15203
    Change-Id: I1d8ab71f618a74bbf0625eb89eb836c48200b5dd
    Reviewed-on: https://code.wireshark.org/review/30401
    Reviewed-by: Guy Harris <guy@alum.mit.edu>

diff --git a/epan/dissectors/packet-ieee80211.c b/epan/dissectors/packet-ieee80211.c
index a353fefe36..20d57ec714 100644
--- a/epan/dissectors/packet-ieee80211.c
+++ b/epan/dissectors/packet-ieee80211.c
@@ -11731,30 +11731,32 @@ static const range_string he_action_rvals[] = {
 static const range_string protected_he_action_rvals[] = {
   { HE_BSS_COLOR_CHANGE_ANNOUNCEMENT, HE_BSS_COLOR_CHANGE_ANNOUNCEMENT,
         "HE BSS Color Change Announcement" },
   { HE_BSS_COLOR_CHANGE_ANNOUNCEMENT + 1, 255, "Reserved" },
   { 0, 0, NULL }
 };
 
 /*
- *  * This currently only works for SU, 20MHz, 40MHz and 80MHz and grouping 4 and 16.
- *   */
+ * This currently only works for SU, 20MHz, 40MHz and 80MHz and grouping 4 and 16.
+ */
 struct scidx_start_end {
   int start;
   int end;
 };
 
-static const struct scidx_start_end scidx_20MHz_Ng4[9] = {
+#define N_SCIDX_20MHZ_NG4 9
+static const struct scidx_start_end scidx_20MHz_Ng4[N_SCIDX_20MHZ_NG4] = {
   { -122, -96 },
   { -96, -68 },
   { -68, -40 },
   { -44, -16 },
   { -16, 16 },
   { 16, 44 },
   { 40, 68 },
   { 68, 96 },
   { 96, 122 }
 };
 
+#define N_SCIDX_20MHZ_NG16 9
 static const struct scidx_start_end scidx_20MHz_Ng16[9] = {
   { -122, -84 },
   { -96, -64 },
@@ -11767,136 +11769,140 @@ static const struct scidx_start_end scidx_20MHz_Ng16[9] = {
   { 84, 122 }
 };
 
-static const struct scidx_start_end scidx_40MHz_Ng4[18] = {
+#define N_SCIDX_40MHZ_NG4 18
+static const struct scidx_start_end scidx_40MHz_Ng4[N_SCIDX_40MHZ_NG4] = {
   { -500 + 256, -472 + 256 },
   { -476 + 256, -448 + 256 },
   { -488 + 256, -420 + 256 },
   { -420 + 256, -392 + 256 },
   { -392 + 256, -364 + 256 },
   { -368 + 256, -340 + 256 },
   { -340 + 256, -312 + 256 },
   { -312 + 256, -284 + 256 },
   { -288 + 256, -260 + 256 },
   {  260 - 256,  288 - 256 },
   {  284 - 256,  312 - 256 },
   {  312 - 256,  340 - 256 },
   {  340 - 256,  368 - 256 },
   {  364 - 256,  392 - 256 },
   {  392 - 256,  420 - 256 },
   {  420 - 256,  448 - 256 },
   {  448 - 256,  476 - 256 },
   {  472 - 256,  500 - 256 }
 };
 
-static const struct scidx_start_end scidx_40MHz_Ng16[18] = {
+#define N_SCIDX_40MHZ_NG16 18
+static const struct scidx_start_end scidx_40MHz_Ng16[N_SCIDX_40MHZ_NG16] = {
   { -500 + 256, -468 + 256 },
   { -484 + 256, -436 + 256 },
   { -452 + 256, -420 + 256 },
   { -420 + 256, -388 + 256 },
   { -404 + 256, -356 + 256 },
   { -372 + 256, -340 + 256 },
   { -340 + 256, -308 + 256 },
   { -324 + 256, -276 + 256 },
   { -292 + 256, -260 + 245 },
   {  260 - 256,  292 - 256 },
   {  276 - 256,  324 - 256 },
   {  308 - 256,  340 - 256 },
   {  340 - 256,  322 - 256 },
   {  356 - 256,  404 - 256 },
   {  388 - 256,  420 - 256 },
   {  420 - 256,  452 - 256 },
   {  436 - 256,  484 - 256 },
   {  468 - 256,  500 - 256 }
 };
 
-static const struct scidx_start_end scidx_80MHz_Ng4[37] = {
+#define N_SCIDX_80MHZ_NG4 37
+static const struct scidx_start_end scidx_80MHz_Ng4[N_SCIDX_80MHZ_NG4] = {
   { -500, -472 },
   { -476, -448 },
   { -448, -420 },
   { -420, -392 },
   { -392, -364 },
   { -368, -340 },
   { -340, -312 },
   { -312, -284 },
   { -288, -260 },
   { -260, -232 },
   { -232, -204 },
   { -204, -176 },
   { -180, -152 },
   { -152, -124 },
   { -124,  -96 },
   { -100,  -72 },
   {  -72,  -44 },
   {  -44,  -16 },
   {  -16,   16 },
   {   16,   44 },
   {   44,   72 },
   {   72,  100 },
   {   96,  124 },
   {  124,  152 },
   {  152,  180 },
   {  176,  204 },
   {  204,  232 },
   {  232,  260 },
   {  260,  288 },
   {  284,  312 },
   {  312,  340 },
   {  340,  368 },
   {  364,  392 },
   {  392,  420 },
   {  420,  448 },
   {  448,  476 },
   {  472,  500 }
 };
 
-static const struct scidx_start_end scidx_80MHz_Ng16[37] = {
+#define N_SCIDX_80MHZ_NG16 37
+static const struct scidx_start_end scidx_80MHz_Ng16[N_SCIDX_80MHZ_NG16] = {
   { -500, -468 },
   { -484, -436 },
   { -452, -420 },
   { -420, -388 },
   { -404, -356 },
   { -372, -340 },
   { -340, -308 },
   { -324, -276 },
   { -292, -260 },
   { -260, -228 },
   { -244, -196 },
   { -212, -164 },
   { -180, -148 },
   { -164, -116 },
   { -132,  -84 },
   { -100,  -68 },
   {  -84,  -36 },
   {  -52,   -4 },
   {  -20,   20 },
   {    4,   52 },
   {   36,   84 },
   {   68,  100 },
   {   84,  132 },
   {  116,  164 },
   {  148,  180 },
   {  164,  212 },
   {  196,  244 },
   {  228,  260 },
   {  260,  292 },
   {  276,  324 },
   {  308,  340 },
   {  340,  372 },
   {  356,  404 },
   {  388,  420 },
   {  420,  452 },
   {  436,  484 },
   {  468,  500 },
 };
 
 #define SU_FEEDBACK (0)
 #define MU_FEEDBACK (1)
 #define CQI_FEEDBACK (2)
 #define RESERVED_FEEDBACK (3)
 
 #define BW_20MHz (0)
 #define BW_40MHz (1)
 #define BW_80MHz (2)
 #define BW_160MHz (3)
 
 #define SCIDX_END_SENTINAL (0x80000000)
@@ -11905,112 +11911,139 @@ static int
 next_he_scidx(int scidx, int bw _U_, int grouping _U_, int feedback _U_,
               int ru_start_index, int ru_end_index)
 {
   int incr = 4;
 
   /*
- *    * We need to check the correct bw value to determine if we have hit
- *       * the end of the range of SCIDXes.
- *          */
+   * We need to check the correct bw value to determine if we have hit
+   * the end of the range of SCIDXes.
+   */
   switch (bw) {
   case BW_20MHz:
     if (grouping == 0) {
-      if (scidx == scidx_20MHz_Ng4[ru_end_index].end)  /* we returned the max */
+      if (ru_end_index >= N_SCIDX_20MHZ_NG4 ||
+          scidx == scidx_20MHz_Ng4[ru_end_index].end)  /* we returned the max */
         return SCIDX_END_SENTINAL;
     } else {
-      if (scidx == scidx_20MHz_Ng16[ru_end_index].end)
+      if (ru_end_index >= N_SCIDX_20MHZ_NG16 ||
+          scidx == scidx_20MHz_Ng16[ru_end_index].end)
         return SCIDX_END_SENTINAL;
     }
     break;
   case BW_40MHz:
     if (grouping == 0) {
-      if (scidx == scidx_40MHz_Ng4[ru_end_index].end)
+      if (ru_end_index >= N_SCIDX_40MHZ_NG4 ||
+          scidx == scidx_40MHz_Ng4[ru_end_index].end)
         return SCIDX_END_SENTINAL;
     } else {
-      if (scidx == scidx_40MHz_Ng16[ru_end_index].end)
+      if (ru_end_index >= N_SCIDX_40MHZ_NG16 ||
+          scidx == scidx_40MHz_Ng16[ru_end_index].end)
         return SCIDX_END_SENTINAL;
     }
     break;
   case BW_80MHz:
     if (grouping == 0) {
-      if (scidx == scidx_80MHz_Ng4[ru_end_index].end)
+      if (ru_end_index >= N_SCIDX_80MHZ_NG4 ||
+          scidx == scidx_80MHz_Ng4[ru_end_index].end)
         return SCIDX_END_SENTINAL;
     } else {
-      if (scidx == scidx_80MHz_Ng16[ru_end_index].end)
+      if (ru_end_index >= N_SCIDX_80MHZ_NG16 ||
+          scidx == scidx_80MHz_Ng16[ru_end_index].end)
         return SCIDX_END_SENTINAL;
     }
     break;
   case BW_160MHz:
     return SCIDX_END_SENTINAL;
   }
 
   /*
- *    * Check if this is the first time though and figure out the starting
- *       * SCIDX.
- *          */
+   * Check if this is the first time though and figure out the starting
+   * SCIDX.
+   */
   if (scidx == (int)SCIDX_END_SENTINAL)
     switch (bw) {
     case BW_20MHz:
-      if (grouping == 0)
-        return scidx_20MHz_Ng4[ru_start_index].start;
-      else
-        return scidx_20MHz_Ng16[ru_start_index].start;
+      if (grouping == 0) {
+        if (ru_start_index >= N_SCIDX_20MHZ_NG4)
+          return SCIDX_END_SENTINAL;
+        else
+          return scidx_20MHz_Ng4[ru_start_index].start;
+      } else {
+        if (ru_start_index >= N_SCIDX_20MHZ_NG16)
+          return SCIDX_END_SENTINAL;
+        else
+          return scidx_20MHz_Ng16[ru_start_index].start;
+      }
     case BW_40MHz:
-      if (grouping == 0)
-        return scidx_40MHz_Ng4[ru_start_index].start;
-      else
-        return scidx_40MHz_Ng16[ru_start_index].start;
+      if (grouping == 0) {
+        if (ru_start_index >= N_SCIDX_40MHZ_NG4)
+          return SCIDX_END_SENTINAL;
+        else
+          return scidx_40MHz_Ng4[ru_start_index].start;
+      } else {
+        if (ru_start_index >= N_SCIDX_40MHZ_NG16)
+          return SCIDX_END_SENTINAL;
+        else
+          return scidx_40MHz_Ng16[ru_start_index].start;
+      }
     case BW_80MHz:
-      if (grouping == 0)
-        return scidx_80MHz_Ng4[ru_start_index].start;
-      else
-        return scidx_80MHz_Ng16[ru_start_index].start;;
+      if (grouping == 0) {
+        if (ru_start_index >= N_SCIDX_80MHZ_NG4)
+          return SCIDX_END_SENTINAL;
+        else
+          return scidx_80MHz_Ng4[ru_start_index].start;
+      } else {
+        if (ru_start_index >= N_SCIDX_80MHZ_NG16)
+          return SCIDX_END_SENTINAL;
+        else
+          return scidx_80MHz_Ng16[ru_start_index].start;
+      }
     case BW_160MHz:
       return SCIDX_END_SENTINAL;
   }
 
   /*
- *    * for BW_20MHz it is more complex, and the start and end sets have an
- *       * increment of 2, and around zero they go -4, -2, 2, 4 as well.
- *          */
+   * for BW_20MHz it is more complex, and the start and end sets have an
+   * increment of 2, and around zero they go -4, -2, 2, 4 as well.
+   */
   if (bw == BW_20MHz) {
     if (grouping == 0) {
       if (scidx == -122)
         return -120;
       if (scidx == -4)
         return -2;
       if (scidx == 2)
         return 4;
       if (scidx == 120)
         return 122;
     } else {
       if (scidx == -122)
         return -116;
       if (scidx == -4)
         return -2;
       if (scidx == -2)
         return 2;
       if (scidx == 2)
         return 4;
       if (scidx == 116)
         return 122;
     }
   }
 
   if (grouping == 1)
     incr = 16;
 
   scidx += incr;
 
   if (scidx == 0)  /* Not sure if this is needed */
     scidx += incr;
 
   return scidx;
 }
 
 /*
- *  * This might have a problem if there are not enough bits in the TVB.
- *   *  Will only handle a limited number of bits.
- *    */
+ * This might have a problem if there are not enough bits in the TVB.
+ * Will only handle a limited number of bits.
+ */
 static guint16
 he_get_bits(tvbuff_t *tvb, int bit_offset, int bit_len)
 {
