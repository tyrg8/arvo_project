commit 8fbcc546b83e2ce242a0b75054ec2ca304a171df
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Fri Oct 23 10:48:36 2020 +0200

    tools/target_dem_fuzzer: Consider it an EIO when reading position wraps around 64bit
    
    Fixes: signed integer overflow: 9223372036854775807 + 564 cannot be represented in type 'long'
    Fixes: 26494/clusterfuzz-testcase-minimized-ffmpeg_dem_VOC_fuzzer-576754158849228
    Fixes: 26549/clusterfuzz-testcase-minimized-ffmpeg_dem_AVS_fuzzer-4844306424397824
    FIxes: 26875/clusterfuzz-testcase-minimized-ffmpeg_dem_C93_fuzzer-5996226782429184
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/tools/target_dem_fuzzer.c b/tools/target_dem_fuzzer.c
index 6f4f062f13..e4f41765d6 100644
--- a/tools/target_dem_fuzzer.c
+++ b/tools/target_dem_fuzzer.c
@@ -43,18 +43,20 @@ static void error(const char *err)
 static int io_read(void *opaque, uint8_t *buf, int buf_size)
 {
     IOContext *c = opaque;
     int size = FFMIN(buf_size, c->fuzz_size);
 
     if (!c->fuzz_size) {
         c->filesize = FFMIN(c->pos, c->filesize);
         return AVERROR_EOF;
     }
+    if (c->pos > INT64_MAX - size)
+        return AVERROR(EIO);
 
     memcpy(buf, c->fuzz, size);
     c->fuzz      += size;
     c->fuzz_size -= size;
     c->pos       += size;
     c->filesize   = FFMAX(c->filesize, c->pos);
 
     return size;
 }
