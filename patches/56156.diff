commit 8cfe505e168185fecd1b573711c68252aefb9f77
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Tue Feb 21 14:40:13 2023 +0000

    oss-fuzz 56156: CFF - Allow for (the intended) 64 digit real number
    
    The code intends a 64 digit, null terminated ASCII string representing a real
    number, but the buffer was only declared as 64 bytes long, should be 65 to be
    the intended length plus the null termination.

diff --git a/pdf/pdf_font1C.c b/pdf/pdf_font1C.c
index 5582af33c..c08a9457c 100644
--- a/pdf/pdf_font1C.c
+++ b/pdf/pdf_font1C.c
@@ -1,36 +1,36 @@
-/* Copyright (C) 2019-2022 Artifex Software, Inc.
+/* Copyright (C) 2019-2023 Artifex Software, Inc.
    All Rights Reserved.
 
    This software is provided AS-IS with no warranty, either express or
    implied.
 
    This software is distributed under license and may not be copied,
    modified or distributed except as expressly authorized under the terms
    of the license contained in the file LICENSE in this distribution.
 
    Refer to licensing information at http://www.artifex.com or contact
    Artifex Software, Inc.,  1305 Grant Avenue - Suite 200, Novato,
    CA 94945, U.S.A., +1(415)492-9861, for further information.
 */
 
 /* code for CFF (type 1C) font handling */
 
 #include "pdf_int.h"
 
 #include "gscedata.h"
 #include "gscencs.h"
 #include "gxfont0.h"
 #include "gxfcid.h"
 
 #include "pdf_types.h"
 #include "pdf_font_types.h"
 #include "pdf_font.h"
 #include "pdf_font1C.h"
 #include "pdf_fontps.h"
 #include "pdf_dict.h"
 #include "pdf_deref.h"
 #include "pdf_file.h"
 #include "pdf_array.h"
 
 #include "gxtype1.h"        /* for gs_type1_state_s */
 #include "gsutil.h"        /* For gs_next_ids() */
@@ -688,62 +688,62 @@ format3_fdselect_proc(const byte *p, const byte *pe, unsigned int i)
 static byte *
 pdfi_read_cff_real(byte *p, byte *e, float *val)
 {
-    char buf[64];
+    char buf[65];
     char *txt = buf;
 
     /* b0 was 30 */
 
     while (txt < buf + (sizeof buf) - 3 && p < e) {
         int b, n;
 
         b = *p++;
 
         n = (b >> 4) &0xf;
         if (n < 0xA) {
             *txt++ = n + '0';
         }
         else if (n == 0xA) {
             *txt++ = '.';
         }
         else if (n == 0xB) {
             *txt++ = 'E';
         }
         else if (n == 0xC) {
             *txt++ = 'E';
             *txt++ = '-';
         }
         else if (n == 0xE) {
             *txt++ = '-';
         }
         else if (n == 0xF) {
             break;
         }
 
         n = b &0xf;
         if (n < 0xA) {
             *txt++ = n + '0';
         }
         else if (n == 0xA) {
             *txt++ = '.';
         }
         else if (n == 0xB) {
             *txt++ = 'E';
         }
         else if (n == 0xC) {
             *txt++ = 'E';
             *txt++ = '-';
         }
         else if (n == 0xE) {
             *txt++ = '-';
         }
         else if (n == 0xF) {
             break;
         }
     }
 
     *txt = 0;
 
     *val = atof(buf);
 
     return p;
 }
