commit 8d16abd980122b4d4b24aad345efb95373c11c18
Author: Steve Hanson <smh@uk.ibm.com>
Date:   Wed Jun 30 17:09:52 2021 +0100

    Uri Parse improvements

diff --git a/include/rapidjson/uri.h b/include/rapidjson/uri.h
index 6353c322..7de7b805 100644
--- a/include/rapidjson/uri.h
+++ b/include/rapidjson/uri.h
@@ -231,234 +231,227 @@ public:
 private:
     // Allocate memory for a URI
     // Returns total amount allocated
     std::size_t Allocate(std::size_t len) {
         // Create own allocator if user did not supply.
         if (!allocator_)
             ownAllocator_ =  allocator_ = RAPIDJSON_NEW(Allocator)();
 
         // Allocate one block containing each part of the URI (5) plus base plus full URI, all null terminated.
         // Order: scheme, auth, path, query, frag, base, uri
         size_t total = (3 * len + 7) * sizeof(Ch);
         scheme_ = static_cast<Ch*>(allocator_->Malloc(total));
         *scheme_ = '\0';
         auth_ = scheme_ + 1;
         *auth_ = '\0';
         path_ = auth_ + 1;
         *path_ = '\0';
         query_ = path_ + 1;
         *query_ = '\0';
         frag_ = query_ + 1;
         *frag_ = '\0';
         base_ = frag_ + 1;
         *base_ = '\0';
         uri_ = base_ + 1;
         *uri_ = '\0';
         return total;
     }
 
     // Free memory for a URI
     void Free() {
         if (scheme_) {
             Allocator::Free(scheme_);
             scheme_ = 0;
         }
     }
 
     // Parse a URI into constituent scheme, authority, path, query, & fragment parts
     // Supports URIs that match regex ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))? as per
     // https://tools.ietf.org/html/rfc3986
     void Parse(const Ch* uri, std::size_t len) {
         std::size_t start = 0, pos1 = 0, pos2 = 0;
         Allocate(len);
 
         // Look for scheme ([^:/?#]+):)?
         if (start < len) {
             while (pos1 < len) {
                 if (uri[pos1] == ':') break;
                 pos1++;
             }
             if (pos1 != len) {
                 while (pos2 < len) {
                     if (uri[pos2] == '/') break;
                     if (uri[pos2] == '?') break;
                     if (uri[pos2] == '#') break;
                     pos2++;
                 }
                 if (pos1 < pos2) {
                     pos1++;
                     std::memcpy(scheme_, &uri[start], pos1 * sizeof(Ch));
                     scheme_[pos1] = '\0';
                     start = pos1;
                 }
             }
         }
         // Look for auth (//([^/?#]*))?
         auth_ = scheme_ + GetSchemeStringLength() + 1;
         *auth_ = '\0';
-        if (start < len) {
-            pos1 = start;
-            while (pos1 < len) {
-                if (uri[pos1] == '/' && uri[pos1 + 1] == '/') break;
-                pos1++;
-            }
-            if (pos1 == start) {
-                pos2 = start + 2;
-                while (pos2 < len) {
-                    if (uri[pos2] == '/') break;
-                    if (uri[pos2] == '?') break;
-                    if (uri[pos2] == '#') break;
-                    pos2++;
-                }
-                std::memcpy(auth_, &uri[start], (pos2 - start) * sizeof(Ch));
-                auth_[pos2 - start] = '\0';
-                start = pos2;
+        if (start < len - 1 && uri[start] == '/' && uri[start + 1] == '/') {
+            pos2 = start + 2;
+            while (pos2 < len) {
+                if (uri[pos2] == '/') break;
+                if (uri[pos2] == '?') break;
+                if (uri[pos2] == '#') break;
+                pos2++;
             }
+            std::memcpy(auth_, &uri[start], (pos2 - start) * sizeof(Ch));
+            auth_[pos2 - start] = '\0';
+            start = pos2;
         }
         // Look for path ([^?#]*)
         path_ = auth_ + GetAuthStringLength() + 1;
         *path_ = '\0';
         if (start < len) {
             pos2 = start;
             while (pos2 < len) {
                 if (uri[pos2] == '?') break;
                 if (uri[pos2] == '#') break;
                 pos2++;
             }
             if (start != pos2) {
                 std::memcpy(path_, &uri[start], (pos2 - start) * sizeof(Ch));
                 path_[pos2 - start] = '\0';
                 if (path_[0] == '/')
                     RemoveDotSegments();   // absolute path - normalize
                 start = pos2;
             }
         }
         // Look for query (\?([^#]*))?
         query_ = path_ + GetPathStringLength() + 1;
         *query_ = '\0';
-        if (start < len) {
-            pos2 = start;
+        if (start < len && uri[start] == '?') {
+            pos2 = start + 1;
             while (pos2 < len) {
                 if (uri[pos2] == '#') break;
                 pos2++;
             }
             if (start != pos2) {
                 std::memcpy(query_, &uri[start], (pos2 - start) * sizeof(Ch));
                 query_[pos2 - start] = '\0';
                 start = pos2;
             }
         }
         // Look for fragment (#(.*))?
         frag_ = query_ + GetQueryStringLength() + 1;
         *frag_ = '\0';
-        if (start < len) {
+        if (start < len && uri[start] == '#') {
             std::memcpy(frag_, &uri[start], (len - start) * sizeof(Ch));
             frag_[len - start] = '\0';
         }
 
         // Re-constitute base_ and uri_
         base_ = frag_ + GetFragStringLength() + 1;
         SetBase();
         uri_ = base_ + GetBaseStringLength() + 1;
         SetUri();
     }
 
     // Reconstitute base
     void SetBase() {
         Ch* next = base_;
         std::memcpy(next, scheme_, GetSchemeStringLength() * sizeof(Ch));
         next+= GetSchemeStringLength();
         std::memcpy(next, auth_, GetAuthStringLength() * sizeof(Ch));
         next+= GetAuthStringLength();
         std::memcpy(next, path_, GetPathStringLength() * sizeof(Ch));
         next+= GetPathStringLength();
         std::memcpy(next, query_, GetQueryStringLength() * sizeof(Ch));
         next+= GetQueryStringLength();
         *next = '\0';
     }
 
     // Reconstitute uri
     void SetUri() {
         Ch* next = uri_;
         std::memcpy(next, base_, GetBaseStringLength() * sizeof(Ch));
         next+= GetBaseStringLength();
         std::memcpy(next, frag_, GetFragStringLength() * sizeof(Ch));
         next+= GetFragStringLength();
         *next = '\0';
     }
 
     // Copy a part from one GenericUri to another
     // Return the pointer to the next part to be copied to
     Ch* CopyPart(Ch* to, Ch* from, std::size_t len) {
         RAPIDJSON_ASSERT(to != 0);
         RAPIDJSON_ASSERT(from != 0);
         std::memcpy(to, from, len * sizeof(Ch));
         to[len] = '\0';
         Ch* next = to + len + 1;
         return next;
     }
 
     // Remove . and .. segments from the path_ member.
     // https://tools.ietf.org/html/rfc3986
     // This is done in place as we are only removing segments.
     void RemoveDotSegments() {
         std::size_t pathlen = GetPathStringLength();
         std::size_t pathpos = 0;  // Position in path_
         std::size_t newpos = 0;   // Position in new path_
 
         // Loop through each segment in original path_
         while (pathpos < pathlen) {
             // Get next segment, bounded by '/' or end
             size_t slashpos = 0;
             while ((pathpos + slashpos) < pathlen) {
                 if (path_[pathpos + slashpos] == '/') break;
                 slashpos++;
             }
             // Check for .. and . segments
             if (slashpos == 2 && path_[pathpos] == '.' && path_[pathpos + 1] == '.') {
                 // Backup a .. segment in the new path_
                 // We expect to find a previously added slash at the end or nothing
                 RAPIDJSON_ASSERT(newpos == 0 || path_[newpos - 1] == '/');
                 size_t lastslashpos = newpos;
                 // Make sure we don't go beyond the start segment
                 if (lastslashpos > 1) {
                     // Find the next to last slash and back up to it
                     lastslashpos--;
                     while (lastslashpos > 0) {
                         if (path_[lastslashpos - 1] == '/') break;
                         lastslashpos--;
                     }
                     // Set the new path_ position
                     newpos = lastslashpos;
                 }
             } else if (slashpos == 1 && path_[pathpos] == '.') {
                 // Discard . segment, leaves new path_ unchanged
             } else {
                 // Move any other kind of segment to the new path_
                 RAPIDJSON_ASSERT(newpos <= pathpos);
                 std::memmove(&path_[newpos], &path_[pathpos], slashpos * sizeof(Ch));
                 newpos += slashpos;
                 // Add slash if not at end
                 if ((pathpos + slashpos) < pathlen) {
                     path_[newpos] = '/';
                     newpos++;
                 }
             }
             // Move to next segment
             pathpos += slashpos + 1;
         }
         path_[newpos] = '\0';
     }
 
     Ch* uri_;    // Everything
     Ch* base_;   // Everything except fragment
     Ch* scheme_; // Includes the :
     Ch* auth_;   // Includes the //
     Ch* path_;   // Absolute if starts with /
     Ch* query_;  // Includes the ?
     Ch* frag_;   // Includes the #
 
     Allocator* allocator_;      //!< The current allocator. It is either user-supplied or equal to ownAllocator_.
     Allocator* ownAllocator_;   //!< Allocator owned by this Uri.
 };
 
 //! GenericUri for Value (UTF-8, default allocator).
diff --git a/test/unittest/uritest.cpp b/test/unittest/uritest.cpp
index 6cfa27d6..5506aa1e 100644
--- a/test/unittest/uritest.cpp
+++ b/test/unittest/uritest.cpp
@@ -52,228 +52,243 @@ TEST(Uri, DefaultConstructor) {
 TEST(Uri, Parse) {
     typedef GenericUri<Value, MemoryPoolAllocator<> > UriType;
     MemoryPoolAllocator<CrtAllocator> allocator;
     Value v;
     Value w;
 
     v.SetString("http://auth/path/xxx?query#frag", allocator);
     UriType u = UriType(v, &allocator);
     EXPECT_TRUE(StrCmp(u.GetSchemeString(), "http:") == 0);
     EXPECT_TRUE(StrCmp(u.GetAuthString(), "//auth") == 0);
     EXPECT_TRUE(StrCmp(u.GetPathString(), "/path/xxx") == 0);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), "http://auth/path/xxx?query") == 0);
     EXPECT_TRUE(StrCmp(u.GetQueryString(), "?query") == 0);
     EXPECT_TRUE(StrCmp(u.GetFragString(), "#frag") == 0);
     u.Get(w, allocator);
     EXPECT_TRUE(*w.GetString() == *v.GetString());
 
 #if RAPIDJSON_HAS_STDSTRING
     typedef std::basic_string<Value::Ch> String;
     String str = "http://auth/path/xxx?query#frag";
     const UriType uri = UriType(str);
     EXPECT_TRUE(UriType::GetScheme(uri) == "http:");
     EXPECT_TRUE(UriType::GetAuth(uri) == "//auth");
     EXPECT_TRUE(UriType::GetPath(uri) == "/path/xxx");
     EXPECT_TRUE(UriType::GetBase(uri) == "http://auth/path/xxx?query");
     EXPECT_TRUE(UriType::GetQuery(uri) == "?query");
     EXPECT_TRUE(UriType::GetFrag(uri) == "#frag");
     EXPECT_TRUE(UriType::Get(uri) == str);
 #endif
 
     v.SetString("urn:uuid:ee564b8a-7a87-4125-8c96-e9f123d6766f", allocator);
     u = UriType(v);
     EXPECT_TRUE(StrCmp(u.GetSchemeString(), "urn:") == 0);
     EXPECT_TRUE(u.GetAuthStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetPathString(), "uuid:ee564b8a-7a87-4125-8c96-e9f123d6766f") == 0);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), "urn:uuid:ee564b8a-7a87-4125-8c96-e9f123d6766f") == 0);
     EXPECT_TRUE(u.GetQueryStringLength() == 0);
     EXPECT_TRUE(u.GetFragStringLength() == 0);
     u.Get(w, allocator);
     EXPECT_TRUE(*w.GetString() == *v.GetString());
 
     v.SetString("", allocator);
     u = UriType(v);
     EXPECT_TRUE(u.GetSchemeStringLength() == 0);
     EXPECT_TRUE(u.GetAuthStringLength() == 0);
     EXPECT_TRUE(u.GetPathStringLength() == 0);
     EXPECT_TRUE(u.GetBaseStringLength() == 0);
     EXPECT_TRUE(u.GetQueryStringLength() == 0);
     EXPECT_TRUE(u.GetFragStringLength() == 0);
 
     v.SetString("http://auth/", allocator);
     u = UriType(v);
     EXPECT_TRUE(StrCmp(u.GetSchemeString(), "http:") == 0);
     EXPECT_TRUE(StrCmp(u.GetAuthString(), "//auth") == 0);
     EXPECT_TRUE(StrCmp(u.GetPathString(), "/") == 0);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), "http://auth/") == 0);
     EXPECT_TRUE(u.GetQueryStringLength() == 0);
     EXPECT_TRUE(u.GetFragStringLength() == 0);
 
     u = UriType("/path/sub");
     EXPECT_TRUE(u.GetSchemeStringLength() == 0);
     EXPECT_TRUE(u.GetAuthStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetPathString(), "/path/sub") == 0);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), "/path/sub") == 0);
     EXPECT_TRUE(u.GetQueryStringLength() == 0);
     EXPECT_TRUE(u.GetFragStringLength() == 0);
 
     // absolute path gets normalized
     u = UriType("/path/../sub/");
     EXPECT_TRUE(u.GetSchemeStringLength() == 0);
     EXPECT_TRUE(u.GetAuthStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetPathString(), "/sub/") == 0);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), "/sub/") == 0);
     EXPECT_TRUE(u.GetQueryStringLength() == 0);
     EXPECT_TRUE(u.GetFragStringLength() == 0);
 
     // relative path does not
     u = UriType("path/../sub");
     EXPECT_TRUE(u.GetSchemeStringLength() == 0);
     EXPECT_TRUE(u.GetAuthStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetPathString(), "path/../sub") == 0);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), "path/../sub") == 0);
     EXPECT_TRUE(u.GetQueryStringLength() == 0);
     EXPECT_TRUE(u.GetFragStringLength() == 0);
 
     u = UriType("http://auth#frag/stuff");
     EXPECT_TRUE(StrCmp(u.GetSchemeString(), "http:") == 0);
     EXPECT_TRUE(StrCmp(u.GetAuthString(), "//auth") == 0);
     EXPECT_TRUE(u.GetPathStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), "http://auth") == 0);
     EXPECT_TRUE(u.GetQueryStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetFragString(), "#frag/stuff") == 0);
     EXPECT_TRUE(StrCmp(u.GetString(), "http://auth#frag/stuff") == 0);
 
     const Value::Ch c[] = { '#', 'f', 'r', 'a', 'g', '/', 's', 't', 'u', 'f', 'f', '\0'};
     SizeType len = internal::StrLen<Value::Ch>(c);
     u = UriType(c, len);
     EXPECT_TRUE(StrCmp(u.GetString(), "#frag/stuff") == 0);
     EXPECT_TRUE(u.GetStringLength() == len);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), "") == 0);
     EXPECT_TRUE(u.GetBaseStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetFragString(), "#frag/stuff") == 0);
     EXPECT_TRUE(u.GetFragStringLength() == len);
 
     u = UriType(c);
     EXPECT_TRUE(StrCmp(u.GetString(), "#frag/stuff") == 0);
     EXPECT_TRUE(u.GetStringLength() == len);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), "") == 0);
     EXPECT_TRUE(u.GetBaseStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetFragString(), "#frag/stuff") == 0);
     EXPECT_TRUE(u.GetFragStringLength() == len);
+
+    // Incomplete auth treated as path
+    str = "http:/";
+    const UriType u2 = UriType(str);
+    EXPECT_TRUE(StrCmp(u2.GetSchemeString(), "http:") == 0);
+    EXPECT_TRUE(u2.GetAuthStringLength() == 0);
+    EXPECT_TRUE(StrCmp(u2.GetPathString(), "/") == 0);
+    EXPECT_TRUE(StrCmp(u2.GetBaseString(), "http:/") == 0);
 }
 
 TEST(Uri, Parse_UTF16) {
     typedef GenericValue<UTF16<> > Value16;
     typedef GenericUri<Value16, MemoryPoolAllocator<> > UriType;
     MemoryPoolAllocator<CrtAllocator> allocator;
     Value16 v;
     Value16 w;
 
     v.SetString(L"http://auth/path/xxx?query#frag", allocator);
     UriType u = UriType(v, &allocator);
     EXPECT_TRUE(StrCmp(u.GetSchemeString(), L"http:") == 0);
     EXPECT_TRUE(StrCmp(u.GetAuthString(), L"//auth") == 0);
     EXPECT_TRUE(StrCmp(u.GetPathString(), L"/path/xxx") == 0);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), L"http://auth/path/xxx?query") == 0);
     EXPECT_TRUE(StrCmp(u.GetQueryString(), L"?query") == 0);
     EXPECT_TRUE(StrCmp(u.GetFragString(), L"#frag") == 0);
     u.Get(w, allocator);
     EXPECT_TRUE(*w.GetString() == *v.GetString());
 
 #if RAPIDJSON_HAS_STDSTRING
     typedef std::basic_string<Value16::Ch> String;
     String str = L"http://auth/path/xxx?query#frag";
     const UriType uri = UriType(str);
     EXPECT_TRUE(UriType::GetScheme(uri) == L"http:");
     EXPECT_TRUE(UriType::GetAuth(uri) == L"//auth");
     EXPECT_TRUE(UriType::GetPath(uri) == L"/path/xxx");
     EXPECT_TRUE(UriType::GetBase(uri) == L"http://auth/path/xxx?query");
     EXPECT_TRUE(UriType::GetQuery(uri) == L"?query");
     EXPECT_TRUE(UriType::GetFrag(uri) == L"#frag");
     EXPECT_TRUE(UriType::Get(uri) == str);
 #endif
 
     v.SetString(L"urn:uuid:ee564b8a-7a87-4125-8c96-e9f123d6766f", allocator);
     u = UriType(v);
     EXPECT_TRUE(StrCmp(u.GetSchemeString(), L"urn:") == 0);
     EXPECT_TRUE(u.GetAuthStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetPathString(), L"uuid:ee564b8a-7a87-4125-8c96-e9f123d6766f") == 0);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), L"urn:uuid:ee564b8a-7a87-4125-8c96-e9f123d6766f") == 0);
     EXPECT_TRUE(u.GetQueryStringLength() == 0);
     EXPECT_TRUE(u.GetFragStringLength() == 0);
     u.Get(w, allocator);
     EXPECT_TRUE(*w.GetString() == *v.GetString());
 
     v.SetString(L"", allocator);
     u = UriType(v);
     EXPECT_TRUE(u.GetSchemeStringLength() == 0);
     EXPECT_TRUE(u.GetAuthStringLength() == 0);
     EXPECT_TRUE(u.GetPathStringLength() == 0);
     EXPECT_TRUE(u.GetBaseStringLength() == 0);
     EXPECT_TRUE(u.GetQueryStringLength() == 0);
     EXPECT_TRUE(u.GetFragStringLength() == 0);
 
     v.SetString(L"http://auth/", allocator);
     u = UriType(v);
     EXPECT_TRUE(StrCmp(u.GetSchemeString(), L"http:") == 0);
     EXPECT_TRUE(StrCmp(u.GetAuthString(), L"//auth") == 0);
     EXPECT_TRUE(StrCmp(u.GetPathString(), L"/") == 0);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), L"http://auth/") == 0);
     EXPECT_TRUE(u.GetQueryStringLength() == 0);
     EXPECT_TRUE(u.GetFragStringLength() == 0);
 
     u = UriType(L"/path/sub");
     EXPECT_TRUE(u.GetSchemeStringLength() == 0);
     EXPECT_TRUE(u.GetAuthStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetPathString(), L"/path/sub") == 0);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), L"/path/sub") == 0);
     EXPECT_TRUE(u.GetQueryStringLength() == 0);
     EXPECT_TRUE(u.GetFragStringLength() == 0);
 
     // absolute path gets normalized
     u = UriType(L"/path/../sub/");
     EXPECT_TRUE(u.GetSchemeStringLength() == 0);
     EXPECT_TRUE(u.GetAuthStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetPathString(), L"/sub/") == 0);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), L"/sub/") == 0);
     EXPECT_TRUE(u.GetQueryStringLength() == 0);
     EXPECT_TRUE(u.GetFragStringLength() == 0);
 
     // relative path does not
     u = UriType(L"path/../sub");
     EXPECT_TRUE(u.GetSchemeStringLength() == 0);
     EXPECT_TRUE(u.GetAuthStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetPathString(), L"path/../sub") == 0);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), L"path/../sub") == 0);
     EXPECT_TRUE(u.GetQueryStringLength() == 0);
     EXPECT_TRUE(u.GetFragStringLength() == 0);
 
     u = UriType(L"http://auth#frag/stuff");
     EXPECT_TRUE(StrCmp(u.GetSchemeString(), L"http:") == 0);
     EXPECT_TRUE(StrCmp(u.GetAuthString(), L"//auth") == 0);
     EXPECT_TRUE(u.GetPathStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), L"http://auth") == 0);
     EXPECT_TRUE(u.GetQueryStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetFragString(), L"#frag/stuff") == 0);
     EXPECT_TRUE(StrCmp(u.GetString(), L"http://auth#frag/stuff") == 0);
 
     const Value16::Ch c[] = { '#', 'f', 'r', 'a', 'g', '/', 's', 't', 'u', 'f', 'f', '\0'};
     SizeType len = internal::StrLen<Value16::Ch>(c);
     u = UriType(c, len);
     EXPECT_TRUE(StrCmp(u.GetString(), L"#frag/stuff") == 0);
     EXPECT_TRUE(u.GetStringLength() == len);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), L"") == 0);
     EXPECT_TRUE(u.GetBaseStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetFragString(), L"#frag/stuff") == 0);
     EXPECT_TRUE(u.GetFragStringLength() == len);
 
     u = UriType(c);
     EXPECT_TRUE(StrCmp(u.GetString(), L"#frag/stuff") == 0);
     EXPECT_TRUE(u.GetStringLength() == len);
     EXPECT_TRUE(StrCmp(u.GetBaseString(), L"") == 0);
     EXPECT_TRUE(u.GetBaseStringLength() == 0);
     EXPECT_TRUE(StrCmp(u.GetFragString(), L"#frag/stuff") == 0);
     EXPECT_TRUE(u.GetFragStringLength() == len);
+
+    // Incomplete auth treated as path
+    u = UriType(L"http:/");
+    EXPECT_TRUE(StrCmp(u.GetSchemeString(), L"http:") == 0);
+    EXPECT_TRUE(u.GetAuthStringLength() == 0);
+    EXPECT_TRUE(StrCmp(u.GetPathString(), L"/") == 0);
+    EXPECT_TRUE(StrCmp(u.GetBaseString(), L"http:/") == 0);
 }
 
 TEST(Uri, CopyConstructor) {
