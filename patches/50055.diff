commit a317126509a8b20044ae9f79c8ad502a48c433dd
Author: Juliusz Sosinowicz <juliusz@wolfssl.com>
Date:   Tue Aug 9 16:53:56 2022 +0200

    Validate that extensions appear in correct messages

diff --git a/src/tls.c b/src/tls.c
index 310f2421c..ca4142af2 100644
--- a/src/tls.c
+++ b/src/tls.c
@@ -12092,1035 +12092,1084 @@ int TLSX_ParseVersion(WOLFSSL* ssl, const byte* input, word16 length,
 /** Parses a buffer of TLS extensions. */
 int TLSX_Parse(WOLFSSL* ssl, const byte* input, word16 length, byte msgType,
                                                                  Suites *suites)
 {
     int ret = 0;
     word16 offset = 0;
     byte isRequest = (msgType == client_hello ||
                       msgType == certificate_request);
 
 #ifdef HAVE_EXTENDED_MASTER
     byte pendingEMS = 0;
 #endif
 #if defined(WOLFSSL_TLS13) && (defined(HAVE_SESSION_TICKET) || !defined(NO_PSK))
     int pskDone = 0;
 #endif
 
     if (!ssl || !input || (isRequest && !suites))
         return BAD_FUNC_ARG;
 
     while (ret == 0 && offset < length) {
         word16 type;
         word16 size;
 
 #if defined(WOLFSSL_TLS13) && (defined(HAVE_SESSION_TICKET) || !defined(NO_PSK))
         if (msgType == client_hello && pskDone) {
             WOLFSSL_ERROR_VERBOSE(PSK_KEY_ERROR);
             return PSK_KEY_ERROR;
         }
 #endif
 
         if (length - offset < HELLO_EXT_TYPE_SZ + OPAQUE16_LEN)
             return BUFFER_ERROR;
 
         ato16(input + offset, &type);
         offset += HELLO_EXT_TYPE_SZ;
 
         ato16(input + offset, &size);
         offset += OPAQUE16_LEN;
 
         if (length - offset < size)
             return BUFFER_ERROR;
 
         switch (type) {
 #ifdef HAVE_SNI
             case TLSX_SERVER_NAME:
                 WOLFSSL_MSG("SNI extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
-#if defined(WOLFSSL_TLS13) && defined(HAVE_SNI)
-                if (IsAtLeastTLSv1_3(ssl->version) &&
-                        msgType != client_hello &&
-                        msgType != encrypted_extensions) {
-                    return EXT_NOT_ALLOWED;
-                }
-                else if (!IsAtLeastTLSv1_3(ssl->version) &&
-                         msgType == encrypted_extensions) {
-                    return EXT_NOT_ALLOWED;
+#ifdef WOLFSSL_TLS13
+                if (IsAtLeastTLSv1_3(ssl->version)) {
+                    if (msgType != client_hello &&
+                        msgType != encrypted_extensions)
+                        return EXT_NOT_ALLOWED;
                 }
+                else
 #endif
+                {
+                    if (msgType != client_hello)
+                        return EXT_NOT_ALLOWED;
+                }
                 ret = SNI_PARSE(ssl, input + offset, size, isRequest);
                 break;
 #endif
 
             case TLSX_TRUSTED_CA_KEYS:
                 WOLFSSL_MSG("Trusted CA extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
-#if defined(WOLFSSL_TLS13) && defined(HAVE_TRUSTED_CA)
-                if (IsAtLeastTLSv1_3(ssl->version) &&
-                        msgType != client_hello &&
-                        msgType != encrypted_extensions) {
-                    return EXT_NOT_ALLOWED;
+#ifdef WOLFSSL_TLS13
+                if (IsAtLeastTLSv1_3(ssl->version)) {
+                    if (msgType != client_hello &&
+                        msgType != encrypted_extensions)
+                        return EXT_NOT_ALLOWED;
                 }
+                else
 #endif
+                {
+                    if (msgType != client_hello)
+                        return EXT_NOT_ALLOWED;
+                }
                 ret = TCA_PARSE(ssl, input + offset, size, isRequest);
                 break;
 
             case TLSX_MAX_FRAGMENT_LENGTH:
                 WOLFSSL_MSG("Max Fragment Length extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
-#if defined(WOLFSSL_TLS13) && defined(HAVE_MAX_FRAGMENT)
-                if (IsAtLeastTLSv1_3(ssl->version) &&
-                        msgType != client_hello &&
+#ifdef WOLFSSL_TLS13
+                if (IsAtLeastTLSv1_3(ssl->version)) {
+                    if (msgType != client_hello &&
                         msgType != encrypted_extensions) {
-                    WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
-                    return EXT_NOT_ALLOWED;
-                }
-                else if (!IsAtLeastTLSv1_3(ssl->version) &&
-                         msgType == encrypted_extensions) {
-                    WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
-                    return EXT_NOT_ALLOWED;
+                        WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
+                        return EXT_NOT_ALLOWED;
+                    }
                 }
+                else
 #endif
+                {
+                    if (msgType != client_hello &&
+                        msgType != server_hello) {
+                        WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
+                        return EXT_NOT_ALLOWED;
+                    }
+                }
                 ret = MFL_PARSE(ssl, input + offset, size, isRequest);
                 break;
 
             case TLSX_TRUNCATED_HMAC:
                 WOLFSSL_MSG("Truncated HMAC extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
-#if defined(WOLFSSL_TLS13) && defined(HAVE_TRUNCATED_HMAC)
+#ifdef WOLFSSL_TLS13
                 if (IsAtLeastTLSv1_3(ssl->version))
                     break;
 #endif
+                if (msgType != client_hello)
+                    return EXT_NOT_ALLOWED;
                 ret = THM_PARSE(ssl, input + offset, size, isRequest);
                 break;
 
             case TLSX_SUPPORTED_GROUPS:
                 WOLFSSL_MSG("Supported Groups extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
-#if defined(WOLFSSL_TLS13) && defined(HAVE_SUPPORTED_CURVES)
-                if (IsAtLeastTLSv1_3(ssl->version) &&
-                        msgType != client_hello &&
+#ifdef WOLFSSL_TLS13
+                if (IsAtLeastTLSv1_3(ssl->version)) {
+                    if (msgType != client_hello &&
                         msgType != encrypted_extensions) {
-                    WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
-                    return EXT_NOT_ALLOWED;
-                }
-                else if (!IsAtLeastTLSv1_3(ssl->version) &&
-                         msgType == encrypted_extensions) {
-                    WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
-                    return EXT_NOT_ALLOWED;
+                        WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
+                        return EXT_NOT_ALLOWED;
+                    }
                 }
+                else
 #endif
+                {
+                    if (msgType != client_hello) {
+                        WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
+                        return EXT_NOT_ALLOWED;
+                    }
+                }
                 ret = EC_PARSE(ssl, input + offset, size, isRequest);
                 break;
 
             case TLSX_EC_POINT_FORMATS:
                 WOLFSSL_MSG("Point Formats extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
-#if defined(WOLFSSL_TLS13) && defined(HAVE_SUPPORTED_CURVES)
+#ifdef WOLFSSL_TLS13
                 if (IsAtLeastTLSv1_3(ssl->version))
                     break;
 #endif
+                if (msgType != client_hello &&
+                    msgType != server_hello) {
+                    WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
+                    return EXT_NOT_ALLOWED;
+                }
+
                 ret = PF_PARSE(ssl, input + offset, size, isRequest);
                 break;
 
             case TLSX_STATUS_REQUEST:
                 WOLFSSL_MSG("Certificate Status Request extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
-#if defined(WOLFSSL_TLS13) && defined(HAVE_CERTIFICATE_STATUS_REQUEST)
-                if (IsAtLeastTLSv1_3(ssl->version) &&
-                        msgType != client_hello &&
+#ifdef WOLFSSL_TLS13
+                if (IsAtLeastTLSv1_3(ssl->version)) {
+                    if (msgType != client_hello &&
                         msgType != certificate_request &&
-                        msgType != certificate) {
-                     break;
+                        msgType != certificate)
+                        return EXT_NOT_ALLOWED;
                 }
+                else
  #endif
+                {
+                    if (msgType != client_hello &&
+                        msgType != server_hello)
+                        return EXT_NOT_ALLOWED;
+                }
                 ret = CSR_PARSE(ssl, input + offset, size, isRequest);
                 break;
 
             case TLSX_STATUS_REQUEST_V2:
                 WOLFSSL_MSG("Certificate Status Request v2 extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
 #if defined(WOLFSSL_TLS13) && defined(HAVE_CERTIFICATE_STATUS_REQUEST_V2)
-                if (IsAtLeastTLSv1_3(ssl->version) &&
-                        msgType != client_hello &&
+                if (IsAtLeastTLSv1_3(ssl->version)) {
+                    if (msgType != client_hello &&
                         msgType != certificate_request &&
-                        msgType != certificate) {
-                    return EXT_NOT_ALLOWED;
+                        msgType != certificate)
+                        return EXT_NOT_ALLOWED;
                 }
+                else
 #endif
+                {
+                    if (msgType != client_hello &&
+                        msgType != server_hello)
+                        return EXT_NOT_ALLOWED;
+                }
                 ret = CSR2_PARSE(ssl, input + offset, size, isRequest);
                 break;
 
 #ifdef HAVE_EXTENDED_MASTER
             case HELLO_EXT_EXTMS:
                 WOLFSSL_MSG("Extended Master Secret extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
 #if defined(WOLFSSL_TLS13)
                 if (IsAtLeastTLSv1_3(ssl->version))
                     break;
 #endif
+                if (msgType != client_hello &&
+                    msgType != server_hello)
+                    return EXT_NOT_ALLOWED;
                 if (size != 0)
                     return BUFFER_ERROR;
 
 #ifndef NO_WOLFSSL_SERVER
                 if (isRequest)
                     ssl->options.haveEMS = 1;
 #endif
                 pendingEMS = 1;
                 break;
 #endif
 
             case TLSX_RENEGOTIATION_INFO:
                 WOLFSSL_MSG("Secure Renegotiation extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
-#if defined(WOLFSSL_TLS13) && defined(HAVE_SERVER_RENEGOTIATION_INFO)
+#ifdef WOLFSSL_TLS13
                 if (IsAtLeastTLSv1_3(ssl->version))
                     break;
 #endif
+                if (msgType != client_hello &&
+                    msgType != server_hello)
+                    return EXT_NOT_ALLOWED;
                 ret = SCR_PARSE(ssl, input + offset, size, isRequest);
                 break;
 
             case TLSX_SESSION_TICKET:
                 WOLFSSL_MSG("Session Ticket extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
 #if defined(WOLFSSL_TLS13) && defined(HAVE_SESSION_TICKET)
-                if (IsAtLeastTLSv1_3(ssl->version) &&
-                        msgType != client_hello) {
-                    return EXT_NOT_ALLOWED;
+                if (IsAtLeastTLSv1_3(ssl->version)) {
+                    if (msgType != client_hello)
+                        return EXT_NOT_ALLOWED;
                 }
+                else
 #endif
+                {
+                    if (msgType != client_hello &&
+                        msgType != server_hello)
+                        return EXT_NOT_ALLOWED;
+                }
                 ret = WOLF_STK_PARSE(ssl, input + offset, size, isRequest);
                 break;
 
             case TLSX_APPLICATION_LAYER_PROTOCOL:
                 WOLFSSL_MSG("ALPN extension received");
 
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
 #if defined(WOLFSSL_TLS13) && defined(HAVE_ALPN)
-                if (IsAtLeastTLSv1_3(ssl->version) &&
-                        msgType != client_hello &&
-                        msgType != encrypted_extensions) {
-                    return EXT_NOT_ALLOWED;
-                }
-                else if (!IsAtLeastTLSv1_3(ssl->version) &&
-                         msgType == encrypted_extensions) {
-                    return EXT_NOT_ALLOWED;
+                if (IsAtLeastTLSv1_3(ssl->version)) {
+                    if (msgType != client_hello &&
+                        msgType != encrypted_extensions)
+                        return EXT_NOT_ALLOWED;
                 }
+                else
 #endif
+                {
+                    if (msgType != client_hello &&
+                        msgType != server_hello)
+                        return EXT_NOT_ALLOWED;
+                }
                 ret = ALPN_PARSE(ssl, input + offset, size, isRequest);
                 break;
 #if !defined(NO_CERTS) && !defined(WOLFSSL_NO_SIGALG)
             case TLSX_SIGNATURE_ALGORITHMS:
                 WOLFSSL_MSG("Signature Algorithms extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
                 if (!IsAtLeastTLSv1_2(ssl))
                     break;
             #ifdef WOLFSSL_TLS13
-                if (IsAtLeastTLSv1_3(ssl->version) &&
-                        msgType != client_hello &&
-                        msgType != certificate_request) {
-                    return EXT_NOT_ALLOWED;
+                if (IsAtLeastTLSv1_3(ssl->version)) {
+                    if (msgType != client_hello &&
+                        msgType != certificate_request)
+                        return EXT_NOT_ALLOWED;
                 }
+                else
             #endif
+                {
+                    if (msgType != client_hello)
+                        return EXT_NOT_ALLOWED;
+                }
                 ret = SA_PARSE(ssl, input + offset, size, isRequest, suites);
                 break;
 #endif
 
 #if defined(HAVE_ENCRYPT_THEN_MAC) && !defined(WOLFSSL_AEAD_ONLY)
             case TLSX_ENCRYPT_THEN_MAC:
                 WOLFSSL_MSG("Encrypt-Then-Mac extension received");
 
                 /* Ignore for TLS 1.3+ */
                 if (IsAtLeastTLSv1_3(ssl->version))
                     break;
+                if (msgType != client_hello &&
+                    msgType != server_hello)
+                    return EXT_NOT_ALLOWED;
 
                 ret = ETM_PARSE(ssl, input + offset, size, msgType);
                 break;
 #endif /* HAVE_ENCRYPT_THEN_MAC */
 
 #ifdef WOLFSSL_TLS13
             case TLSX_SUPPORTED_VERSIONS:
                 WOLFSSL_MSG("Skipping Supported Versions - already processed");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
+                if (msgType != client_hello &&
+                    msgType != server_hello &&
+                    msgType != hello_retry_request)
+                    return EXT_NOT_ALLOWED;
 
                 break;
 
     #ifdef WOLFSSL_SEND_HRR_COOKIE
             case TLSX_COOKIE:
                 WOLFSSL_MSG("Cookie extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
                 if (!IsAtLeastTLSv1_3(ssl->version))
                     break;
 
                 if (msgType != client_hello &&
-                        msgType != hello_retry_request) {
+                    msgType != hello_retry_request) {
                     return EXT_NOT_ALLOWED;
                 }
 
                 ret = CKE_PARSE(ssl, input + offset, size, msgType);
                 break;
     #endif
 
     #if defined(HAVE_SESSION_TICKET) || !defined(NO_PSK)
             case TLSX_PRE_SHARED_KEY:
                 WOLFSSL_MSG("Pre-Shared Key extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
                 if (!IsAtLeastTLSv1_3(ssl->version))
                     break;
 
-                if (msgType != client_hello && msgType != server_hello) {
+                if (msgType != client_hello &&
+                    msgType != server_hello) {
                     WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
                     return EXT_NOT_ALLOWED;
                 }
 
                 ret = PSK_PARSE(ssl, input + offset, size, msgType);
                 pskDone = 1;
                 break;
 
             case TLSX_PSK_KEY_EXCHANGE_MODES:
                 WOLFSSL_MSG("PSK Key Exchange Modes extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
                 if (!IsAtLeastTLSv1_3(ssl->version))
                     break;
 
                 if (msgType != client_hello) {
                     WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
                     return EXT_NOT_ALLOWED;
                 }
 
                 ret = PKM_PARSE(ssl, input + offset, size, msgType);
                 break;
     #endif
 
     #ifdef WOLFSSL_EARLY_DATA
             case TLSX_EARLY_DATA:
                 WOLFSSL_MSG("Early Data extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
                 if (!IsAtLeastTLSv1_3(ssl->version))
                     break;
 
                 if (msgType != client_hello && msgType != session_ticket &&
-                        msgType != encrypted_extensions) {
-                    WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
-                    return EXT_NOT_ALLOWED;
-                }
-                if (!IsAtLeastTLSv1_3(ssl->version) &&
-                        (msgType == session_ticket ||
-                         msgType == encrypted_extensions)) {
+                    msgType != encrypted_extensions) {
                     WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
                     return EXT_NOT_ALLOWED;
                 }
                 ret = EDI_PARSE(ssl, input + offset, size, msgType);
                 break;
     #endif
 
     #ifdef WOLFSSL_POST_HANDSHAKE_AUTH
             case TLSX_POST_HANDSHAKE_AUTH:
                 WOLFSSL_MSG("Post Handshake Authentication extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
                 if (!IsAtLeastTLSv1_3(ssl->version))
                     break;
 
                 if (msgType != client_hello) {
                     WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
                     return EXT_NOT_ALLOWED;
                 }
 
                 ret = PHA_PARSE(ssl, input + offset, size, msgType);
                 break;
     #endif
 
     #if !defined(NO_CERTS) && !defined(WOLFSSL_NO_SIGALG)
             case TLSX_SIGNATURE_ALGORITHMS_CERT:
                 WOLFSSL_MSG("Signature Algorithms extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
                 if (!IsAtLeastTLSv1_3(ssl->version))
                     break;
 
                 if (msgType != client_hello &&
                         msgType != certificate_request) {
                     WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
                     return EXT_NOT_ALLOWED;
                 }
-                if (!IsAtLeastTLSv1_3(ssl->version) &&
-                        msgType == certificate_request) {
-                    WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
-                    return EXT_NOT_ALLOWED;
-                }
 
                 ret = SAC_PARSE(ssl, input + offset, size, isRequest);
                 break;
     #endif
 
             case TLSX_KEY_SHARE:
                 WOLFSSL_MSG("Key Share extension received");
             #ifdef WOLFSSL_DEBUG_TLS
                 WOLFSSL_BUFFER(input + offset, size);
             #endif
 
     #ifdef HAVE_SUPPORTED_CURVES
                 if (!IsAtLeastTLSv1_3(ssl->version))
                     break;
 
                 if (msgType != client_hello && msgType != server_hello &&
                         msgType != hello_retry_request) {
                     WOLFSSL_ERROR_VERBOSE(EXT_NOT_ALLOWED);
                     return EXT_NOT_ALLOWED;
                 }
     #endif
 
                 ret = KS_PARSE(ssl, input + offset, size, msgType);
                 break;
 #endif
 #ifdef WOLFSSL_SRTP
             case TLSX_USE_SRTP:
                 WOLFSSL_MSG("Use SRTP extension received");
                 ret = SRTP_PARSE(ssl, input + offset, size, isRequest);
                 break;
 #endif
             default:
                 WOLFSSL_MSG("Unknown TLS extension type");
         }
 
         /* offset should be updated here! */
         offset += size;
     }
 
 #ifdef HAVE_EXTENDED_MASTER
     if (IsAtLeastTLSv1_3(ssl->version) && msgType == hello_retry_request) {
         /* Don't change EMS status until server_hello received.
          * Second ClientHello must have same extensions.
          */
     }
     else if (!isRequest && ssl->options.haveEMS && !pendingEMS)
         ssl->options.haveEMS = 0;
 #endif
 
     if (ret == 0)
         ret = SNI_VERIFY_PARSE(ssl, isRequest);
     if (ret == 0)
         ret = TCA_VERIFY_PARSE(ssl, isRequest);
 
     return ret;
 }
 
 /* undefining semaphore macros */
 #undef IS_OFF
 #undef TURN_ON
 #undef SEMAPHORE_SIZE
 
 #endif /* HAVE_TLS_EXTENSIONS */
 
 #ifndef NO_WOLFSSL_CLIENT
 
     WOLFSSL_METHOD* wolfTLS_client_method(void)
     {
         return wolfTLS_client_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfTLS_client_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                               (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                      heap, DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("TLS_client_method_ex");
         if (method) {
         #if defined(WOLFSSL_TLS13)
             InitSSL_Method(method, MakeTLSv1_3());
         #elif !defined(WOLFSSL_NO_TLS12)
             InitSSL_Method(method, MakeTLSv1_2());
         #elif !defined(NO_OLD_TLS)
             InitSSL_Method(method, MakeTLSv1_1());
         #elif defined(WOLFSSL_ALLOW_TLSV10)
             InitSSL_Method(method, MakeTLSv1());
         #else
             #error No TLS version enabled!
         #endif
 
             method->downgrade = 1;
             method->side      = WOLFSSL_CLIENT_END;
         }
         return method;
     }
 
 #ifndef NO_OLD_TLS
     #ifdef WOLFSSL_ALLOW_TLSV10
     WOLFSSL_METHOD* wolfTLSv1_client_method(void)
     {
         return wolfTLSv1_client_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfTLSv1_client_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                              (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                      heap, DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("TLSv1_client_method_ex");
         if (method)
             InitSSL_Method(method, MakeTLSv1());
         return method;
     }
     #endif /* WOLFSSL_ALLOW_TLSV10 */
 
     WOLFSSL_METHOD* wolfTLSv1_1_client_method(void)
     {
         return wolfTLSv1_1_client_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfTLSv1_1_client_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                               (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                      heap, DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("TLSv1_1_client_method_ex");
         if (method)
             InitSSL_Method(method, MakeTLSv1_1());
         return method;
     }
 #endif /* !NO_OLD_TLS */
 
 #ifndef WOLFSSL_NO_TLS12
     WOLFSSL_ABI
     WOLFSSL_METHOD* wolfTLSv1_2_client_method(void)
     {
         return wolfTLSv1_2_client_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfTLSv1_2_client_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                               (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                      heap, DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("TLSv1_2_client_method_ex");
         if (method)
             InitSSL_Method(method, MakeTLSv1_2());
         return method;
     }
 #endif /* WOLFSSL_NO_TLS12 */
 
 #ifdef WOLFSSL_TLS13
     /* The TLS v1.3 client method data.
      *
      * returns the method data for a TLS v1.3 client.
      */
     WOLFSSL_ABI
     WOLFSSL_METHOD* wolfTLSv1_3_client_method(void)
     {
         return wolfTLSv1_3_client_method_ex(NULL);
     }
 
     /* The TLS v1.3 client method data.
      *
      * heap  The heap used for allocation.
      * returns the method data for a TLS v1.3 client.
      */
     WOLFSSL_METHOD* wolfTLSv1_3_client_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method = (WOLFSSL_METHOD*)
                                  XMALLOC(sizeof(WOLFSSL_METHOD), heap,
                                          DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("TLSv1_3_client_method_ex");
         if (method)
             InitSSL_Method(method, MakeTLSv1_3());
         return method;
     }
 #endif /* WOLFSSL_TLS13 */
 
 #ifdef WOLFSSL_DTLS
 
     WOLFSSL_METHOD* wolfDTLS_client_method(void)
     {
         return wolfDTLS_client_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfDTLS_client_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                               (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                      heap, DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("DTLS_client_method_ex");
         if (method) {
         #if defined(WOLFSSL_DTLS13)
             InitSSL_Method(method, MakeDTLSv1_3());
         #elif !defined(WOLFSSL_NO_TLS12)
             InitSSL_Method(method, MakeDTLSv1_2());
         #elif !defined(NO_OLD_TLS)
             InitSSL_Method(method, MakeDTLSv1());
         #else
             #error No DTLS version enabled!
         #endif
 
             method->downgrade = 1;
             method->side      = WOLFSSL_CLIENT_END;
         }
         return method;
     }
 
     #ifndef NO_OLD_TLS
     WOLFSSL_METHOD* wolfDTLSv1_client_method(void)
     {
         return wolfDTLSv1_client_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfDTLSv1_client_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                           (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                  heap, DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("DTLSv1_client_method_ex");
         if (method)
             InitSSL_Method(method, MakeDTLSv1());
         return method;
     }
     #endif  /* NO_OLD_TLS */
 
     #ifndef WOLFSSL_NO_TLS12
     WOLFSSL_METHOD* wolfDTLSv1_2_client_method(void)
     {
         return wolfDTLSv1_2_client_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfDTLSv1_2_client_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                           (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                  heap, DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("DTLSv1_2_client_method_ex");
         if (method)
             InitSSL_Method(method, MakeDTLSv1_2());
         (void)heap;
         return method;
     }
     #endif /* !WOLFSSL_NO_TLS12 */
 #endif /* WOLFSSL_DTLS */
 
 #endif /* NO_WOLFSSL_CLIENT */
 
 
 /* EITHER SIDE METHODS */
 #if defined(OPENSSL_EXTRA) || defined(WOLFSSL_EITHER_SIDE)
     #ifndef NO_OLD_TLS
     #ifdef WOLFSSL_ALLOW_TLSV10
     /* Gets a WOLFSSL_METHOD type that is not set as client or server
      *
      * Returns a pointer to a WOLFSSL_METHOD struct
      */
     WOLFSSL_METHOD* wolfTLSv1_method(void)
     {
         return wolfTLSv1_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfTLSv1_method_ex(void* heap)
     {
         WOLFSSL_METHOD* m;
         WOLFSSL_ENTER("TLSv1_method");
     #ifndef NO_WOLFSSL_CLIENT
         m = wolfTLSv1_client_method_ex(heap);
     #else
         m = wolfTLSv1_server_method_ex(heap);
     #endif
         if (m != NULL) {
             m->side = WOLFSSL_NEITHER_END;
         }
 
         return m;
     }
     #endif /* WOLFSSL_ALLOW_TLSV10 */
 
     /* Gets a WOLFSSL_METHOD type that is not set as client or server
      *
      * Returns a pointer to a WOLFSSL_METHOD struct
      */
     WOLFSSL_METHOD* wolfTLSv1_1_method(void)
     {
         return wolfTLSv1_1_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfTLSv1_1_method_ex(void* heap)
     {
         WOLFSSL_METHOD* m;
         WOLFSSL_ENTER("TLSv1_1_method");
     #ifndef NO_WOLFSSL_CLIENT
         m = wolfTLSv1_1_client_method_ex(heap);
     #else
         m = wolfTLSv1_1_server_method_ex(heap);
     #endif
         if (m != NULL) {
             m->side = WOLFSSL_NEITHER_END;
         }
         return m;
     }
     #endif /* !NO_OLD_TLS */
 
     #ifndef WOLFSSL_NO_TLS12
     /* Gets a WOLFSSL_METHOD type that is not set as client or server
      *
      * Returns a pointer to a WOLFSSL_METHOD struct
      */
     WOLFSSL_METHOD* wolfTLSv1_2_method(void)
     {
         return wolfTLSv1_2_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfTLSv1_2_method_ex(void* heap)
     {
         WOLFSSL_METHOD* m;
         WOLFSSL_ENTER("TLSv1_2_method");
     #ifndef NO_WOLFSSL_CLIENT
         m = wolfTLSv1_2_client_method_ex(heap);
     #else
         m = wolfTLSv1_2_server_method_ex(heap);
     #endif
         if (m != NULL) {
             m->side = WOLFSSL_NEITHER_END;
         }
         return m;
     }
     #endif /* !WOLFSSL_NO_TLS12 */
 
     #ifdef WOLFSSL_TLS13
     /* Gets a WOLFSSL_METHOD type that is not set as client or server
      *
      * Returns a pointer to a WOLFSSL_METHOD struct
      */
     WOLFSSL_METHOD* wolfTLSv1_3_method(void)
     {
         return wolfTLSv1_3_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfTLSv1_3_method_ex(void* heap)
     {
         WOLFSSL_METHOD* m;
         WOLFSSL_ENTER("TLSv1_3_method");
     #ifndef NO_WOLFSSL_CLIENT
         m = wolfTLSv1_3_client_method_ex(heap);
     #else
         m = wolfTLSv1_3_server_method_ex(heap);
     #endif
         if (m != NULL) {
             m->side = WOLFSSL_NEITHER_END;
         }
         return m;
     }
     #endif /* WOLFSSL_TLS13 */
 
 #ifdef WOLFSSL_DTLS
     WOLFSSL_METHOD* wolfDTLS_method(void)
     {
         return wolfDTLS_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfDTLS_method_ex(void* heap)
     {
         WOLFSSL_METHOD* m;
         WOLFSSL_ENTER("DTLS_method_ex");
     #ifndef NO_WOLFSSL_CLIENT
         m = wolfDTLS_client_method_ex(heap);
     #else
         m = wolfDTLS_server_method_ex(heap);
     #endif
         if (m != NULL) {
             m->side = WOLFSSL_NEITHER_END;
         }
         return m;
     }
 
     #ifndef NO_OLD_TLS
     WOLFSSL_METHOD* wolfDTLSv1_method(void)
     {
         return wolfDTLSv1_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfDTLSv1_method_ex(void* heap)
     {
         WOLFSSL_METHOD* m;
         WOLFSSL_ENTER("DTLSv1_method_ex");
     #ifndef NO_WOLFSSL_CLIENT
         m = wolfDTLSv1_client_method_ex(heap);
     #else
         m = wolfDTLSv1_server_method_ex(heap);
     #endif
         if (m != NULL) {
             m->side = WOLFSSL_NEITHER_END;
         }
         return m;
     }
     #endif /* !NO_OLD_TLS */
     #ifndef WOLFSSL_NO_TLS12
     WOLFSSL_METHOD* wolfDTLSv1_2_method(void)
     {
         return wolfDTLSv1_2_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfDTLSv1_2_method_ex(void* heap)
     {
         WOLFSSL_METHOD* m;
         WOLFSSL_ENTER("DTLSv1_2_method");
     #ifndef NO_WOLFSSL_CLIENT
         m = wolfDTLSv1_2_client_method_ex(heap);
     #else
         m = wolfDTLSv1_2_server_method_ex(heap);
     #endif
         if (m != NULL) {
             m->side = WOLFSSL_NEITHER_END;
         }
         return m;
     }
     #endif /* !WOLFSSL_NO_TLS12 */
 #endif /* WOLFSSL_DTLS */
 #endif /* OPENSSL_EXTRA || WOLFSSL_EITHER_SIDE */
 
 
 #ifndef NO_WOLFSSL_SERVER
 
     WOLFSSL_METHOD* wolfTLS_server_method(void)
     {
         return wolfTLS_server_method_ex(NULL);
     }
 
     WOLFSSL_METHOD* wolfTLS_server_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                               (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                      heap, DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("TLS_server_method_ex");
         if (method) {
         #if defined(WOLFSSL_TLS13)
             InitSSL_Method(method, MakeTLSv1_3());
         #elif !defined(WOLFSSL_NO_TLS12)
             InitSSL_Method(method, MakeTLSv1_2());
         #elif !defined(NO_OLD_TLS)
             InitSSL_Method(method, MakeTLSv1_1());
         #elif defined(WOLFSSL_ALLOW_TLSV10)
             InitSSL_Method(method, MakeTLSv1());
         #else
             #error No TLS version enabled!
         #endif
 
             method->downgrade = 1;
             method->side      = WOLFSSL_SERVER_END;
         }
         return method;
     }
 
 #ifndef NO_OLD_TLS
     #ifdef WOLFSSL_ALLOW_TLSV10
     WOLFSSL_METHOD* wolfTLSv1_server_method(void)
     {
         return wolfTLSv1_server_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfTLSv1_server_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                               (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                      heap, DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("TLSv1_server_method_ex");
         if (method) {
             InitSSL_Method(method, MakeTLSv1());
             method->side = WOLFSSL_SERVER_END;
         }
         return method;
     }
     #endif /* WOLFSSL_ALLOW_TLSV10 */
 
     WOLFSSL_METHOD* wolfTLSv1_1_server_method(void)
     {
         return wolfTLSv1_1_server_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfTLSv1_1_server_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                               (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                      heap, DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("TLSv1_1_server_method_ex");
         if (method) {
             InitSSL_Method(method, MakeTLSv1_1());
             method->side = WOLFSSL_SERVER_END;
         }
         return method;
     }
 #endif /* !NO_OLD_TLS */
 
 
 #ifndef WOLFSSL_NO_TLS12
     WOLFSSL_ABI
     WOLFSSL_METHOD* wolfTLSv1_2_server_method(void)
     {
         return wolfTLSv1_2_server_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfTLSv1_2_server_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                               (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                      heap, DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("TLSv1_2_server_method_ex");
         if (method) {
             InitSSL_Method(method, MakeTLSv1_2());
             method->side = WOLFSSL_SERVER_END;
         }
         return method;
     }
 #endif /* !WOLFSSL_NO_TLS12 */
 
 #ifdef WOLFSSL_TLS13
     /* The TLS v1.3 server method data.
      *
      * returns the method data for a TLS v1.3 server.
      */
     WOLFSSL_ABI
     WOLFSSL_METHOD* wolfTLSv1_3_server_method(void)
     {
         return wolfTLSv1_3_server_method_ex(NULL);
     }
 
     /* The TLS v1.3 server method data.
      *
      * heap  The heap used for allocation.
      * returns the method data for a TLS v1.3 server.
      */
     WOLFSSL_METHOD* wolfTLSv1_3_server_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                               (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                      heap, DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("TLSv1_3_server_method_ex");
         if (method) {
             InitSSL_Method(method, MakeTLSv1_3());
             method->side = WOLFSSL_SERVER_END;
         }
         return method;
     }
 #endif /* WOLFSSL_TLS13 */
 
 #ifdef WOLFSSL_DTLS
     WOLFSSL_METHOD* wolfDTLS_server_method(void)
     {
         return wolfDTLS_server_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfDTLS_server_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                               (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                      heap, DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("DTLS_server_method_ex");
         if (method) {
         #if defined(WOLFSSL_DTLS13)
             InitSSL_Method(method, MakeDTLSv1_3());
         #elif !defined(WOLFSSL_NO_TLS12)
             InitSSL_Method(method, MakeDTLSv1_2());
         #elif !defined(NO_OLD_TLS)
             InitSSL_Method(method, MakeDTLSv1());
         #else
             #error No DTLS version enabled!
         #endif
 
             method->downgrade = 1;
             method->side      = WOLFSSL_SERVER_END;
         }
         return method;
     }
 
     #ifndef NO_OLD_TLS
     WOLFSSL_METHOD* wolfDTLSv1_server_method(void)
     {
         return wolfDTLSv1_server_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfDTLSv1_server_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                           (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                  heap, DYNAMIC_TYPE_METHOD);
         (void)heap;
         WOLFSSL_ENTER("DTLSv1_server_method_ex");
         if (method) {
             InitSSL_Method(method, MakeDTLSv1());
             method->side = WOLFSSL_SERVER_END;
         }
         return method;
     }
     #endif /* !NO_OLD_TLS */
 
     #ifndef WOLFSSL_NO_TLS12
     WOLFSSL_METHOD* wolfDTLSv1_2_server_method(void)
     {
         return wolfDTLSv1_2_server_method_ex(NULL);
     }
     WOLFSSL_METHOD* wolfDTLSv1_2_server_method_ex(void* heap)
     {
         WOLFSSL_METHOD* method =
                           (WOLFSSL_METHOD*) XMALLOC(sizeof(WOLFSSL_METHOD),
                                                  heap, DYNAMIC_TYPE_METHOD);
         WOLFSSL_ENTER("DTLSv1_2_server_method_ex");
         (void)heap;
         if (method) {
             InitSSL_Method(method, MakeDTLSv1_2());
             method->side = WOLFSSL_SERVER_END;
         }
         (void)heap;
         return method;
     }
     #endif /* !WOLFSSL_NO_TLS12 */
 #endif /* WOLFSSL_DTLS */
 
 #endif /* NO_WOLFSSL_SERVER */
 
 #endif /* NO_TLS */
 #endif /* WOLFCRYPT_ONLY */
