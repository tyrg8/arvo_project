commit a56817fec259a36b7bd9a2c1df034e60cac6b4cf
Merge: 803484dc3 54380c8c9
Author: eugene7646 <elivis@basistech.com>
Date:   Wed Aug 17 14:13:23 2022 -0400

    Merge pull request #2725 from sashashura/patch-1
    
    Fixes Heap-buffer-overflow READ in tsk_UTF16toUTF8

diff --git a/tsk/fs/ntfs_dent.cpp b/tsk/fs/ntfs_dent.cpp
index 3fa7f79a9..5c94d2998 100644
--- a/tsk/fs/ntfs_dent.cpp
+++ b/tsk/fs/ntfs_dent.cpp
@@ -238,53 +238,61 @@ ntfs_parent_act(TSK_FS_FILE * fs_file, void * /*ptr*/)
 /****************/
 
 static uint8_t
-ntfs_dent_copy(NTFS_INFO * ntfs, ntfs_idxentry * idxe,
+ntfs_dent_copy(NTFS_INFO * ntfs, ntfs_idxentry * idxe, uintptr_t endaddr,
     TSK_FS_NAME * fs_name)
 {
     ntfs_attr_fname *fname = (ntfs_attr_fname *) & idxe->stream;
     TSK_FS_INFO *fs = (TSK_FS_INFO *) & ntfs->fs_info;
     UTF16 *name16;
     UTF8 *name8;
     int retVal;
 
     tsk_fs_name_reset(fs_name);
 
     fs_name->meta_addr = tsk_getu48(fs->endian, idxe->file_ref);
     fs_name->meta_seq = tsk_getu16(fs->endian, idxe->seq_num);
 
     name16 = (UTF16 *) & fname->name;
     name8 = (UTF8 *) fs_name->name;
+    
+    const UTF16 * sourceEnd = (UTF16 *) ((uintptr_t) name16 + fname->nlen * 2);
+    if (((uintptr_t) sourceEnd) >= endaddr) {
+        if (tsk_verbose)
+            tsk_fprintf(stderr,
+                "sourceEnd: %" PRIuINUM " is out of endaddr bounds: %" PRIuINUM,
+                sourceEnd, endaddr);
+        return 1;
+    }
 
     retVal = tsk_UTF16toUTF8(fs->endian, (const UTF16 **) &name16,
-        (UTF16 *) ((uintptr_t) name16 +
-            fname->nlen * 2), &name8,
+        sourceEnd, &name8,
         (UTF8 *) ((uintptr_t) name8 +
             fs_name->name_size), TSKlenientConversion);
 
     if (retVal != TSKconversionOK) {
         *name8 = '\0';
         if (tsk_verbose)
             tsk_fprintf(stderr,
                 "Error converting NTFS name to UTF8: %d %" PRIuINUM,
                 retVal, fs_name->meta_addr);
     }
 
     /* Make sure it is NULL Terminated */
     if ((uintptr_t) name8 > (uintptr_t) fs_name->name + fs_name->name_size)
         fs_name->name[fs_name->name_size] = '\0';
     else
         *name8 = '\0';
 
     if (tsk_getu64(fs->endian, fname->flags) & NTFS_FNAME_FLAGS_DIR)
         fs_name->type = TSK_FS_NAME_TYPE_DIR;
     else
         fs_name->type = TSK_FS_NAME_TYPE_REG;
 
     fs_name->flags = (TSK_FS_NAME_FLAG_ENUM)0;
 
     return 0;
 }
 
 
 /* Copy the short file name pointed to by idxe into fs_name.
  * No other fields are copied.  Just the name into shrt_name. */
@@ -370,278 +378,278 @@ static TSK_RETVAL_ENUM
 ntfs_proc_idxentry(NTFS_INFO * a_ntfs, TSK_FS_DIR * a_fs_dir,
     uint8_t a_is_del, ntfs_idxentry * a_idxe, uint32_t a_idxe_len,
     uint32_t a_used_len)
 {
     uintptr_t endaddr, endaddr_alloc;
     TSK_FS_NAME *fs_name;
     TSK_FS_NAME *fs_name_preventry = NULL;
     TSK_FS_INFO *fs = (TSK_FS_INFO *) & a_ntfs->fs_info;
 
     if ((fs_name = tsk_fs_name_alloc(NTFS_MAXNAMLEN_UTF8, 16)) == NULL) {
         return TSK_ERR;
     }
 
     if (tsk_verbose)
         tsk_fprintf(stderr,
             "ntfs_proc_idxentry: Processing index entry: %" PRIu64
             "  Size: %" PRIu32 "  Len: %" PRIu32 "\n",
             (uint64_t) ((uintptr_t) a_idxe), a_idxe_len, a_used_len);
 
     /* Sanity check */
     if (a_idxe_len < a_used_len) {
         tsk_error_reset();
         tsk_error_set_errno(TSK_ERR_FS_ARG);
         tsk_error_set_errstr
             ("ntfs_proc_idxentry: Allocated length of index entries is larger than buffer length");
         return TSK_ERR;
     }
 
     /* where is the end of the buffer */
     endaddr = ((uintptr_t) a_idxe + a_idxe_len);
 
     /* where is the end of the allocated data */
     endaddr_alloc = ((uintptr_t) a_idxe + a_used_len);
 
     /* cycle through the index entries, based on provided size */
     while (((uintptr_t) & (a_idxe->stream) + sizeof(ntfs_attr_fname)) <
         endaddr) {
 
         ntfs_attr_fname *fname = (ntfs_attr_fname *) & a_idxe->stream;
 
 
         if (tsk_verbose)
             tsk_fprintf(stderr,
                 "ntfs_proc_idxentry: New IdxEnt: %" PRIu64
                 " $FILE_NAME Entry: %" PRIu64 "  File Ref: %" PRIu64
                 "  IdxEnt Len: %" PRIu16 "  StrLen: %" PRIu16 "\n",
                 (uint64_t) ((uintptr_t) a_idxe),
                 (uint64_t) ((uintptr_t) fname),
                 (uint64_t) tsk_getu48(fs->endian, a_idxe->file_ref),
                 tsk_getu16(fs->endian, a_idxe->idxlen),
                 tsk_getu16(fs->endian, a_idxe->strlen));
 
         /* perform some sanity checks on index buffer head
          * and advance by 4-bytes if invalid
          */
         if ((tsk_getu48(fs->endian, a_idxe->file_ref) > fs->last_inum) ||
             (tsk_getu48(fs->endian, a_idxe->file_ref) < fs->first_inum) ||
             (tsk_getu16(fs->endian,
                     a_idxe->idxlen) <= tsk_getu16(fs->endian,
                     a_idxe->strlen))
             || (tsk_getu16(fs->endian, a_idxe->idxlen) % 4)
             || (tsk_getu16(fs->endian, a_idxe->idxlen) > a_idxe_len)) {
             a_idxe = (ntfs_idxentry *) ((uintptr_t) a_idxe + 4);
             continue;
         }
 
 #if 0
         // @@@ BC: This hid a lot of entries in test images.  They were
         // only partial images, but they were not junk and the idea was
         // that this check would strip out chunk.  Commented it out and
         // keeping it here as a reminder in case I think about doing it 
         // again. 
 
         // verify name length would fit in stream
         if (fname->nlen > tsk_getu16(fs->endian, a_idxe->strlen)) {
             a_idxe = (ntfs_idxentry *) ((uintptr_t) a_idxe + 4);
             if (tsk_verbose)
                 tsk_fprintf(stderr,
                     "ntfs_proc_idxentry: Skipping because name is longer than stream\n");
             continue;
         }
 #endif
 
         // verify it has the correct parent address
         if (tsk_getu48(fs->endian, fname->par_ref) != a_fs_dir->addr) {
             a_idxe = (ntfs_idxentry *) ((uintptr_t) a_idxe + 4);
             if (tsk_verbose)
                 tsk_fprintf(stderr,
                     "ntfs_proc_idxentry: Skipping because of wrong parent address\n");
             continue;
         }
 
 
         /* do some sanity checks on the deleted entries
          */
         if ((tsk_getu16(fs->endian, a_idxe->strlen) == 0) ||
             (((uintptr_t) a_idxe + tsk_getu16(fs->endian,
                         a_idxe->idxlen)) > endaddr_alloc)) {
 
             /* name space checks */
             if ((fname->nspace != NTFS_FNAME_POSIX) &&
                 (fname->nspace != NTFS_FNAME_WIN32) &&
                 (fname->nspace != NTFS_FNAME_DOS) &&
                 (fname->nspace != NTFS_FNAME_WINDOS)) {
                 a_idxe = (ntfs_idxentry *) ((uintptr_t) a_idxe + 4);
                 if (tsk_verbose)
                     tsk_fprintf(stderr,
                         "ntfs_proc_idxentry: Skipping because of invalid name space\n");
                 continue;
             }
 
             if ((tsk_getu64(fs->endian, fname->alloc_fsize) <
                     tsk_getu64(fs->endian, fname->real_fsize))
                 || (fname->nlen == 0)
                 || (*(uint8_t *) & fname->name == 0)) {
 
                 a_idxe = (ntfs_idxentry *) ((uintptr_t) a_idxe + 4);
                 if (tsk_verbose)
                     tsk_fprintf(stderr,
                         "ntfs_proc_idxentry: Skipping because of reported file sizes, name length, or NULL name\n");
                 continue;
             }
 
             if ((is_time(tsk_getu64(fs->endian, fname->crtime)) == 0) ||
                 (is_time(tsk_getu64(fs->endian, fname->atime)) == 0) ||
                 (is_time(tsk_getu64(fs->endian, fname->mtime)) == 0)) {
 
                 a_idxe = (ntfs_idxentry *) ((uintptr_t) a_idxe + 4);
                 if (tsk_verbose)
                     tsk_fprintf(stderr,
                         "ntfs_proc_idxentry: Skipping because of invalid times\n");
                 continue;
             }
         } 
         
 
         /* For all fname entries, there will exist a DOS style 8.3
          * entry.  
          * If the original name is 8.3 compliant, it will be in
          * a WINDOS type.  If it is not compliant, then it will 
          * exist in a POSIX or WIN32 type and the 8.3 compliant
          * one will be in DOS. The DOS entry typically follows
          * the WIN32 or POSIX. 
          *
          * Our approach is to stash away the non-compliant names
          * for one more entry to see if the next try is its 
          * corresponding 8.3 entry. 
          *
          * If the 8.3 entry is not for the previous entry, we 
          * skip it on the theory that it corresponds to a previous
          * WIN32 or POSIX entry. Note that we could be missing some info from deleted files
          * if the windows version was deleted and the DOS wasn't...
          */
 
         if (fname->nspace == NTFS_FNAME_DOS) {
             // Was the previous entry not 8.3 compliant?
             if (fs_name_preventry) {
                 // check its the same entry and if so, add short name
                 if (fs_name_preventry->meta_addr == tsk_getu48(fs->endian, a_idxe->file_ref)) {
                     ntfs_dent_copy_short_only(a_ntfs, a_idxe, fs_name_preventry);
                 }
 
                 // regardless, add preventry to dir and move on to next entry.
                 if (tsk_fs_dir_add(a_fs_dir, fs_name_preventry)) {
                     tsk_fs_name_free(fs_name);
                     return TSK_ERR;
                 }
                 fs_name_preventry = NULL;
             }
 
             goto incr_entry;
         }
         // if we stashed the previous entry and the next wasn't a DOS entry, add it to the list
         else if (fs_name_preventry) {
             if (tsk_fs_dir_add(a_fs_dir, fs_name_preventry)) {
                 tsk_fs_name_free(fs_name);
                 return TSK_ERR;
             }
             fs_name_preventry = NULL;
         }
 
         /* Copy it into the generic form */
-        if (ntfs_dent_copy(a_ntfs, a_idxe, fs_name)) {
+        if (ntfs_dent_copy(a_ntfs, a_idxe, endaddr, fs_name)) {
             if (tsk_verbose)
                 tsk_fprintf(stderr,
                     "ntfs_proc_idxentry: Skipping because error copying dent_entry\n");
             goto incr_entry;
         }
 
         /*
          * Check if this entry is deleted
          *
          * The final check is to see if the end of this entry is
          * within the space that the idxallocbuf claimed was valid OR
          * if the parent directory is deleted
          */
         if ((a_is_del == 1) ||
             (tsk_getu16(fs->endian, a_idxe->strlen) == 0) ||
             (((uintptr_t) a_idxe + tsk_getu16(fs->endian,
                         a_idxe->idxlen)) > endaddr_alloc)) {
             fs_name->flags = TSK_FS_NAME_FLAG_UNALLOC;
         }
         else {
             fs_name->flags = TSK_FS_NAME_FLAG_ALLOC;
         }
 
         if (tsk_verbose)
             tsk_fprintf(stderr,
                 "ntfs_proc_idxentry: Entry Details of %s: Str Len: %"
                 PRIu16 "  Len to end after current: %" PRIu64
                 "  flags: %x\n", fs_name->name, tsk_getu16(fs->endian,
                     a_idxe->strlen),
                 (uint64_t) (endaddr_alloc - (uintptr_t) a_idxe -
                     tsk_getu16(fs->endian, a_idxe->idxlen)),
                 fs_name->flags);
 
         // WINDOS entries will not have a short 8.3 version, so add them now.
         // otherwise, we stash the name to see if we get the 8.3 next. 
         if (fname->nspace == NTFS_FNAME_WINDOS) {
             if (tsk_fs_dir_add(a_fs_dir, fs_name)) {
                 tsk_fs_name_free(fs_name);
                 return TSK_ERR;
             }
             fs_name_preventry = NULL;
         }
         else {
             fs_name_preventry = fs_name;
         }
 
       incr_entry:
 
         /* the theory here is that deleted entries have strlen == 0 and
          * have been found to have idxlen == 16
          *
          * if the strlen is 0, then guess how much the indexlen was
          * before it was deleted
          */
 
         /* 16: size of idxentry before stream
          * 66: size of fname before name
          * 2*nlen: size of name (in unicode)
          */
         if (tsk_getu16(fs->endian, a_idxe->strlen) == 0) {
             a_idxe =
                 (ntfs_idxentry
                 *) ((((uintptr_t) a_idxe + 16 + 66 + 2 * fname->nlen +
                         3) / 4) * 4);
         }
         else {
             a_idxe =
                 (ntfs_idxentry *) ((uintptr_t) a_idxe +
                 tsk_getu16(fs->endian, a_idxe->idxlen));
         }
 
     }                           /* end of loop of index entries */
 
     // final check in case we were looking for the short name, we never saw
     if (fs_name_preventry) {
         if (tsk_fs_dir_add(a_fs_dir, fs_name_preventry)) {
             tsk_fs_name_free(fs_name);
             return TSK_ERR;
         }
         fs_name_preventry = NULL;
     }
 
     tsk_fs_name_free(fs_name);
     return TSK_OK;
 }
 
 
 
 
 /*
  * remove the update sequence values that are changed in the last two
  * bytes of each sector
  *
  * return 1 on error and 0 on success
  */
