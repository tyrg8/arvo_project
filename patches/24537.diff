commit 193f27730c3b3bb5068e56858ea90a3ddcc92a8e
Author: Greg Landrum <greg.landrum@gmail.com>
Date:   Fri Apr 16 04:54:09 2021 +0200

    make sure atom and bond bookmarks survive replaceAtom/Bond (#4033)
    
    * make sure atom and bond bookmarks survive replaceAtom/Bond
    
    * fixes oss-fuzz #30572
    
    * fix possible memory-access error in error reporting
    
    * more defensive deserialization
    
    * switch that recursive smarts error handling to not use an exception

diff --git a/Code/GraphMol/FileParsers/MolFileParser.cpp b/Code/GraphMol/FileParsers/MolFileParser.cpp
index f28efc1fd..284c7b1a6 100644
--- a/Code/GraphMol/FileParsers/MolFileParser.cpp
+++ b/Code/GraphMol/FileParsers/MolFileParser.cpp
@@ -224,71 +224,71 @@ std::string parseEnhancedStereo(std::istream *inStream, unsigned int &line,
 void ParseOldAtomList(RWMol *mol, const std::string &text, unsigned int line) {
   PRECONDITION(mol, "bad mol");
   unsigned int idx;
   try {
     idx = FileParserUtils::stripSpacesAndCast<unsigned int>(text.substr(0, 3)) -
           1;
   } catch (boost::bad_lexical_cast &) {
     std::ostringstream errout;
     errout << "Cannot convert '" << text.substr(0, 3) << "' to int on line "
            << line;
     throw FileParseException(errout.str());
   }
 
   URANGE_CHECK(idx, mol->getNumAtoms());
   QueryAtom a(*(mol->getAtomWithIdx(idx)));
 
   auto *q = new ATOM_OR_QUERY;
   q->setDescription("AtomOr");
 
   switch (text[4]) {
     case 'T':
       q->setNegation(true);
       break;
     case 'F':
       q->setNegation(false);
       break;
     default:
       delete q;
       std::ostringstream errout;
-      errout << "Unrecognized atom-list query modifier: '" << text[14]
+      errout << "Unrecognized atom-list query modifier: '" << text[4]
              << "' on line " << line;
       throw FileParseException(errout.str());
   }
 
   int nQueries;
   try {
     nQueries = FileParserUtils::toInt(text.substr(9, 1));
   } catch (boost::bad_lexical_cast &) {
     delete q;
     std::ostringstream errout;
     errout << "Cannot convert '" << text.substr(9, 1) << "' to int on line "
            << line;
     throw FileParseException(errout.str());
   }
 
   RANGE_CHECK(0, nQueries, 5);
   for (int i = 0; i < nQueries; i++) {
     int pos = 11 + i * 4;
     int atNum;
     try {
       atNum = FileParserUtils::toInt(text.substr(pos, 3));
     } catch (boost::bad_lexical_cast &) {
       delete q;
       std::ostringstream errout;
       errout << "Cannot convert '" << text.substr(pos, 3) << "' to int on line "
              << line;
       throw FileParseException(errout.str());
     }
     RANGE_CHECK(0, atNum, 200);  // goofy!
     q->addChild(
         QueryAtom::QUERYATOM_QUERY::CHILD_TYPE(makeAtomNumQuery(atNum)));
     if (!i) {
       a.setAtomicNum(atNum);
     }
   }
 
   a.setQuery(q);
   a.setProp(common_properties::_MolFileAtomQuery, 1);
 
   mol->replaceAtom(idx, &a);
 }
diff --git a/Code/GraphMol/MolPickler.cpp b/Code/GraphMol/MolPickler.cpp
index a02ec2371..5f6b5c9af 100644
--- a/Code/GraphMol/MolPickler.cpp
+++ b/Code/GraphMol/MolPickler.cpp
@@ -1932,56 +1932,65 @@ template <typename T>
 void MolPickler::_addRingInfoFromPickle(std::istream &ss, ROMol *mol,
                                         int version, bool directMap) {
   PRECONDITION(mol, "empty molecule");
   RingInfo *ringInfo = mol->getRingInfo();
   if (!ringInfo->isInitialized()) {
     ringInfo->initialize();
   }
 
   T numRings;
   streamRead(ss, numRings, version);
 
   if (numRings > 0) {
     ringInfo->preallocate(mol->getNumAtoms(), mol->getNumBonds());
     for (unsigned int i = 0; i < static_cast<unsigned int>(numRings); i++) {
       T tmpT;
       T ringSize;
       streamRead(ss, ringSize, version);
-
+      if (ringSize < 0) {
+        throw MolPicklerException("negative ring size");
+      }
       INT_VECT atoms(static_cast<int>(ringSize));
       INT_VECT bonds(static_cast<int>(ringSize));
       for (unsigned int j = 0; j < static_cast<unsigned int>(ringSize); j++) {
         streamRead(ss, tmpT, version);
         if (directMap) {
           atoms[j] = static_cast<int>(tmpT);
+          if (atoms[j] < 0 || atoms[j] >= mol->getNumAtoms()) {
+            throw MolPicklerException("ring-atom index out of range");
+          }
         } else {
           atoms[j] = mol->getAtomWithBookmark(static_cast<int>(tmpT))->getIdx();
         }
       }
       if (version < 7000) {
         for (unsigned int j = 0; j < static_cast<unsigned int>(ringSize); j++) {
           streamRead(ss, tmpT, version);
           if (directMap) {
             bonds[j] = static_cast<int>(tmpT);
+            if (bonds[j] < 0 || bonds[j] >= mol->getNumBonds()) {
+              throw MolPicklerException("ring-bond index out of range");
+            }
+
           } else {
             bonds[j] =
                 mol->getBondWithBookmark(static_cast<int>(tmpT))->getIdx();
           }
         }
       } else {
         for (unsigned int j = 1; j < static_cast<unsigned int>(ringSize); ++j) {
           bonds[j - 1] =
               mol->getBondBetweenAtoms(atoms[j - 1], atoms[j])->getIdx();
         }
         bonds[ringSize - 1] =
             mol->getBondBetweenAtoms(atoms[0], atoms[ringSize - 1])->getIdx();
       }
       ringInfo->addRing(atoms, bonds);
     }
   }
 }
 
 //--------------------------------------
 //
 //            SubstanceGroups
 //
 //--------------------------------------
diff --git a/Code/GraphMol/RWMol.cpp b/Code/GraphMol/RWMol.cpp
index a17ec7d90..54c44d68a 100644
--- a/Code/GraphMol/RWMol.cpp
+++ b/Code/GraphMol/RWMol.cpp
@@ -135,46 +135,63 @@ unsigned int RWMol::addAtom(bool updateLabel) {
 void RWMol::replaceAtom(unsigned int idx, Atom *atom_pin, bool updateLabel,
                         bool preserveProps) {
   RDUNUSED_PARAM(updateLabel);
   PRECONDITION(atom_pin, "bad atom passed to replaceAtom");
   URANGE_CHECK(idx, getNumAtoms());
   Atom *atom_p = atom_pin->copy();
   atom_p->setOwningMol(this);
   atom_p->setIdx(idx);
   MolGraph::vertex_descriptor vd = boost::vertex(idx, d_graph);
   if (preserveProps) {
     const bool replaceExistingData = false;
     atom_p->updateProps(*d_graph[vd], replaceExistingData);
   }
   removeSubstanceGroupsReferencingAtom(*this, idx);
-  delete d_graph[vd];
+
+  const auto orig_p = d_graph[vd];
+  delete orig_p;
   d_graph[vd] = atom_p;
 
-  // FIX: do something about bookmarks
+  // handle bookmarks
+  for (auto &ab : d_atomBookmarks) {
+    for (auto &elem : ab.second) {
+      if (elem == orig_p) {
+        elem = atom_p;
+      }
+    }
+  }
 };
 
 void RWMol::replaceBond(unsigned int idx, Bond *bond_pin, bool preserveProps) {
   PRECONDITION(bond_pin, "bad bond passed to replaceBond");
   URANGE_CHECK(idx, getNumBonds());
   BOND_ITER_PAIR bIter = getEdges();
   for (unsigned int i = 0; i < idx; i++) {
     ++bIter.first;
   }
   Bond *obond = d_graph[*(bIter.first)];
   Bond *bond_p = bond_pin->copy();
   bond_p->setOwningMol(this);
   bond_p->setIdx(idx);
   bond_p->setBeginAtomIdx(obond->getBeginAtomIdx());
   bond_p->setEndAtomIdx(obond->getEndAtomIdx());
   if (preserveProps) {
     const bool replaceExistingData = false;
     bond_p->updateProps(*d_graph[*(bIter.first)], replaceExistingData);
   }
 
-  delete d_graph[*(bIter.first)];
+  const auto orig_p = d_graph[*(bIter.first)];
+  delete orig_p;
   d_graph[*(bIter.first)] = bond_p;
-  // FIX: do something about bookmarks
-
   removeSubstanceGroupsReferencingBond(*this, idx);
+
+  // handle bookmarks
+  for (auto &ab : d_bondBookmarks) {
+    for (auto &elem : ab.second) {
+      if (elem == orig_p) {
+        elem = bond_p;
+      }
+    }
+  }
 };
 
 Atom *RWMol::getActiveAtom() {
diff --git a/Code/GraphMol/SmilesParse/SmilesParse.cpp b/Code/GraphMol/SmilesParse/SmilesParse.cpp
index b05f67ef0..6af8e0469 100644
--- a/Code/GraphMol/SmilesParse/SmilesParse.cpp
+++ b/Code/GraphMol/SmilesParse/SmilesParse.cpp
@@ -158,50 +158,55 @@ typedef enum { BASE = 0, BRANCH, RECURSE } SmaState;
 std::string labelRecursivePatterns(const std::string &sma) {
 #ifndef NO_AUTOMATIC_SMARTS_RELABELLING
   std::list<SmaState> state;
   std::list<unsigned int> startRecurse;
   std::map<std::string, std::string> patterns;
   std::string res;
 
   state.push_back(BASE);
 
   unsigned int pos = 0;
   while (pos < sma.size()) {
     res += sma[pos];
     if (sma[pos] == '$' && pos + 1 < sma.size() && sma[pos + 1] == '(') {
       state.push_back(RECURSE);
       startRecurse.push_back(pos);
       ++pos;
       res += sma[pos];
     } else if (sma[pos] == '(') {
       state.push_back(BRANCH);
     } else if (sma[pos] == ')') {
+      if (state.empty() || state.back() == BASE) {
+        // seriously bogus input. Just return the input
+        // and let the SMARTS parser itself report the error
+        return sma;
+      }
       SmaState currState = state.back();
       state.pop_back();
       if (currState == RECURSE) {
         unsigned int dollarPos = startRecurse.back();
         startRecurse.pop_back();
         if (pos + 1 >= sma.size() || sma[pos + 1] != '_') {
           std::string recurs = sma.substr(dollarPos, pos - dollarPos + 1);
           std::string label;
           if (patterns.find(recurs) != patterns.end()) {
             // seen this one before, add the label
             label = patterns[recurs];
           } else {
             label = std::to_string(patterns.size() + 100);
             patterns[recurs] = label;
           }
           res += "_" + label;
         }
       } else if (currState == BRANCH) {
         // no need to do anything here.
       }
     }
     ++pos;
   }
   // std::cerr<< " >"<<sma<<"->"<<res<<std::endl;
   return res;
 #else
   return sma;
 #endif
 }
 }  // namespace
diff --git a/Code/GraphMol/SmilesParse/catch_tests.cpp b/Code/GraphMol/SmilesParse/catch_tests.cpp
index 590642869..67807a0cc 100644
--- a/Code/GraphMol/SmilesParse/catch_tests.cpp
+++ b/Code/GraphMol/SmilesParse/catch_tests.cpp
@@ -851,3 +851,8 @@ TEST_CASE("Github #2788: doKekule=true should kekulize the molecule",
     }
   }
 }
+
+TEST_CASE("bogus recursive SMARTS", "[smarts]") {
+  std::string sma = "C)foo";
+  CHECK(SmartsToMol(sma) == nullptr);
+}
\ No newline at end of file
diff --git a/Code/GraphMol/catch_graphmol.cpp b/Code/GraphMol/catch_graphmol.cpp
index 5b75d7997..64b9a5f56 100644
--- a/Code/GraphMol/catch_graphmol.cpp
+++ b/Code/GraphMol/catch_graphmol.cpp
@@ -1378,34 +1378,36 @@ TEST_CASE("hybridization of unknown atom types", "[bug][molops]") {
 TEST_CASE("Github #3470: Hydrogen is incorrectly identified as an early atom",
           "[bug][chemistry]") {
   SECTION("Basics") {
     RWMol m;
     m.addAtom(new Atom(1), true, true);
     m.getAtomWithIdx(0)->setFormalCharge(-1);
     m.updatePropertyCache();
     CHECK(m.getAtomWithIdx(0)->getNumImplicitHs() == 0);
     m.getAtomWithIdx(0)->setFormalCharge(1);
     m.updatePropertyCache();
     CHECK(m.getAtomWithIdx(0)->getNumImplicitHs() == 0);
     m.getAtomWithIdx(0)->setFormalCharge(0);
     m.updatePropertyCache();
     CHECK(m.getAtomWithIdx(0)->getNumImplicitHs() == 1);
 
     // make sure we still generate errors for stupid stuff
     m.getAtomWithIdx(0)->setFormalCharge(-2);
     CHECK_THROWS_AS(m.updatePropertyCache(), AtomValenceException);
     CHECK(m.getAtomWithIdx(0)->getNumImplicitHs() == 1);
   }
   SECTION("confirm with SMILES") {
     RWMol m;
-    m.addAtom(new Atom(1));
+    bool updateLabel = false;
+    bool takeOwnership = true;
+    m.addAtom(new Atom(1), updateLabel, takeOwnership);
     m.getAtomWithIdx(0)->setFormalCharge(-1);
     m.updatePropertyCache();
     CHECK(MolToSmiles(m) == "[H-]");
     m.getAtomWithIdx(0)->setFormalCharge(+1);
     m.updatePropertyCache();
     CHECK(MolToSmiles(m) == "[H+]");
     m.getAtomWithIdx(0)->setFormalCharge(0);
     m.updatePropertyCache();
     CHECK(MolToSmiles(m) == "[HH]");  // ugly, but I think [H] would be worse
   }
 }
@@ -1458,27 +1460,29 @@ TEST_CASE("Github #3805: radicals on [He]", "[chemistry]") {
 TEST_CASE("needsHs function", "[chemistry]") {
   SECTION("basics") {
     const auto m = "CC"_smiles;
     REQUIRE(m);
     CHECK(MolOps::needsHs(*m));
 
     // add a single H:
-    m->addAtom(new Atom(1));
+    bool updateLabel = false;
+    bool takeOwnership = true;
+    m->addAtom(new Atom(1), updateLabel, takeOwnership);
     m->addBond(0, 2, Bond::BondType::SINGLE);
     MolOps::sanitizeMol(*m);
     CHECK(MolOps::needsHs(*m));
 
     // now add all the Hs:
     MolOps::addHs(*m);
     CHECK(!MolOps::needsHs(*m));
   }
   SECTION("radical") {
     const auto m = "[O][O]"_smiles;
     REQUIRE(m);
     CHECK(!MolOps::needsHs(*m));
   }
   SECTION("none needed") {
     const auto m = "FF"_smiles;
     REQUIRE(m);
     CHECK(!MolOps::needsHs(*m));
   }
 }
@@ -1766,86 +1770,90 @@ M  END)CTAB"_ctab;
 TEST_CASE("batch edits", "[editing]") {
   SECTION("removeAtom") {
     auto m = "C1CCCO1"_smiles;
     REQUIRE(m);
     m->beginBatchEdit();
     m->removeAtom(2);
     m->removeAtom(3);
     m->commitBatchEdit();
     CHECK(MolToSmiles(*m) == "CCO");
   }
   SECTION("removeAtom + removeBond") {
     auto m = "C1CCCO1"_smiles;
     REQUIRE(m);
     m->beginBatchEdit();
     m->removeAtom(3);
     m->removeBond(4, 0);
     m->commitBatchEdit();
     CHECK(MolToSmiles(*m) == "CCC.O");
   }
   SECTION("rollback") {
     auto m = "C1CCCO1"_smiles;
     REQUIRE(m);
     m->beginBatchEdit();
     m->removeAtom(2);
     m->removeAtom(3);
     m->rollbackBatchEdit();
     CHECK(MolToSmiles(*m) == "C1CCOC1");
   }
   SECTION("adding atoms while in a batch") {
     auto m = "CCCO"_smiles;
     REQUIRE(m);
     m->beginBatchEdit();
     m->removeAtom(2);
-    m->addAtom(new Atom(7));
+    bool updateLabel = false;
+    bool takeOwnership = true;
+    m->addAtom(new Atom(7), updateLabel, takeOwnership);
     m->removeAtom(1);
     m->commitBatchEdit();
     CHECK(MolToSmiles(*m) == "C.N.O");
   }
   SECTION("removing added atoms while in a batch") {
     auto m = "CCCO"_smiles;
     REQUIRE(m);
     m->beginBatchEdit();
     m->removeAtom(2);
-    m->addAtom(new Atom(7));
+    bool updateLabel = false;
+    bool takeOwnership = true;
+    m->addAtom(new Atom(7), updateLabel, takeOwnership);
     m->removeAtom(4);
     m->commitBatchEdit();
     CHECK(MolToSmiles(*m) == "CC.O");
   }
   SECTION("adding bonds while in a batch") {
     auto m = "CCCO"_smiles;
     REQUIRE(m);
     m->beginBatchEdit();
     m->removeBond(2, 3);
     m->addBond(0, 3, Bond::BondType::SINGLE);
     m->commitBatchEdit();
     CHECK(MolToSmiles(*m) == "CCCO");
   }
   SECTION("removing added bonds while in a batch") {
     auto m = "CCCO"_smiles;
     REQUIRE(m);
     m->beginBatchEdit();
     m->addBond(0, 3, Bond::BondType::SINGLE);
     m->removeBond(2, 3);
     m->removeBond(0, 3);
     m->commitBatchEdit();
     CHECK(MolToSmiles(*m) == "CCC.O");
   }
   SECTION("some details") {
     auto m = "CCCO"_smiles;
     REQUIRE(m);
     m->beginBatchEdit();
     CHECK_THROWS_AS(m->beginBatchEdit(), ValueErrorException);
     m->removeAtom(0U);
     // copying includes the edit status:
     RWMol m2(*m);
     CHECK_THROWS_AS(m2.beginBatchEdit(), ValueErrorException);
 
     // without a commit, the mols haven't changed
     CHECK(MolToSmiles(*m) == "CCCO");
     CHECK(MolToSmiles(m2) == "CCCO");
     m->commitBatchEdit();
     CHECK(MolToSmiles(*m) == "CCO");
     m2.commitBatchEdit();
     CHECK(MolToSmiles(m2) == "CCO");
   }
 }
@@ -1902,3 +1910,30 @@ TEST_CASE("bridgehead queries", "[query]") {
     }
   }
 }
+
+TEST_CASE("replaceAtom/Bond should not screw up bookmarks", "[RWMol]") {
+  SECTION("atom basics") {
+    auto m = "CCC"_smiles;
+    REQUIRE(m);
+    m->setAtomBookmark(m->getAtomWithIdx(2), 1);
+    auto origAt2 = m->getAtomWithIdx(2);
+    CHECK(m->getUniqueAtomWithBookmark(1) == origAt2);
+    Atom O(8);
+    m->replaceAtom(2, &O);
+    auto at2 = m->getAtomWithIdx(2);
+    CHECK(at2 != origAt2);
+    CHECK(m->getUniqueAtomWithBookmark(1) == at2);
+  }
+  SECTION("bond basics") {
+    auto m = "CCCC"_smiles;
+    REQUIRE(m);
+    m->setBondBookmark(m->getBondWithIdx(2), 1);
+    auto origB2 = m->getBondWithIdx(2);
+    CHECK(m->getUniqueBondWithBookmark(1) == origB2);
+    Bond single(Bond::BondType::SINGLE);
+    m->replaceBond(2, &single);
+    auto b2 = m->getBondWithIdx(2);
+    CHECK(b2 != origB2);
+    CHECK(m->getUniqueBondWithBookmark(1) == b2);
+  }
+}
\ No newline at end of file
