commit bea65980c7a42e34edfafbdc40b199ba7b2a564e
Merge: 119454613 ea19efc19
Author: Patrick Steinhardt <ps@pks.im>
Date:   Thu Oct 25 11:21:14 2018 +0200

    Merge pull request #4851 from pks-t/pks/strtol-removal
    
    strtol removal

diff --git a/src/commit_list.c b/src/commit_list.c
index 96bd9dc15..b4313eed2 100644
--- a/src/commit_list.c
+++ b/src/commit_list.c
@@ -108,73 +108,75 @@ git_commit_list_node *git_commit_list_pop(git_commit_list **stack)
 static int commit_quick_parse(
 	git_revwalk *walk,
 	git_commit_list_node *commit,
 	const uint8_t *buffer,
 	size_t buffer_len)
 {
 	const size_t parent_len = strlen("parent ") + GIT_OID_HEXSZ + 1;
 	const uint8_t *buffer_end = buffer + buffer_len;
 	const uint8_t *parents_start, *committer_start;
 	int i, parents = 0;
 	int64_t commit_time;
 
 	buffer += strlen("tree ") + GIT_OID_HEXSZ + 1;
 
 	parents_start = buffer;
 	while (buffer + parent_len < buffer_end && memcmp(buffer, "parent ", strlen("parent ")) == 0) {
 		parents++;
 		buffer += parent_len;
 	}
 
 	commit->parents = alloc_parents(walk, commit, parents);
 	GITERR_CHECK_ALLOC(commit->parents);
 
 	buffer = parents_start;
 	for (i = 0; i < parents; ++i) {
 		git_oid oid;
 
 		if (git_oid_fromstr(&oid, (const char *)buffer + strlen("parent ")) < 0)
 			return -1;
 
 		commit->parents[i] = git_revwalk__commit_lookup(walk, &oid);
 		if (commit->parents[i] == NULL)
 			return -1;
 
 		buffer += parent_len;
 	}
 
 	commit->out_degree = (unsigned short)parents;
 
 	if ((committer_start = buffer = memchr(buffer, '\n', buffer_end - buffer)) == NULL)
 		return commit_error(commit, "object is corrupted");
 
 	buffer++;
 
 	if ((buffer = memchr(buffer, '\n', buffer_end - buffer)) == NULL)
 		return commit_error(commit, "object is corrupted");
 
 	/* Skip trailing spaces */
 	while (buffer > committer_start && git__isspace(*buffer))
 		buffer--;
 
 	/* Seek for the beginning of the pack of digits */
 	while (buffer > committer_start && git__isdigit(*buffer))
 		buffer--;
 
 	/* Skip potential timezone offset */
 	if ((buffer > committer_start) && (*buffer == '+' || *buffer == '-')) {
 		buffer--;
 
 		while (buffer > committer_start && git__isspace(*buffer))
 			buffer--;
 
 		while (buffer > committer_start && git__isdigit(*buffer))
 			buffer--;
 	}
 
-	if ((buffer == committer_start) || (git__strtol64(&commit_time, (char *)(buffer + 1), NULL, 10) < 0))
+	if ((buffer == committer_start) ||
+	    (git__strntol64(&commit_time, (char *)(buffer + 1),
+			    buffer_end - buffer + 1, NULL, 10) < 0))
 		return commit_error(commit, "cannot parse commit time");
 
 	commit->time = commit_time;
 	commit->parsed = 1;
 	return 0;
 }
diff --git a/src/config.c b/src/config.c
index 8d2e12f98..0837500f5 100644
--- a/src/config.c
+++ b/src/config.c
@@ -1298,37 +1298,37 @@ int git_config_parse_bool(int *out, const char *value)
 int git_config_parse_int64(int64_t *out, const char *value)
 {
 	const char *num_end;
 	int64_t num;
 
-	if (!value || git__strtol64(&num, value, &num_end, 0) < 0)
+	if (!value || git__strntol64(&num, value, strlen(value), &num_end, 0) < 0)
 		goto fail_parse;
 
 	switch (*num_end) {
 	case 'g':
 	case 'G':
 		num *= 1024;
 		/* fallthrough */
 
 	case 'm':
 	case 'M':
 		num *= 1024;
 		/* fallthrough */
 
 	case 'k':
 	case 'K':
 		num *= 1024;
 
 		/* check that that there are no more characters after the
 		 * given modifier suffix */
 		if (num_end[1] != '\0')
 			return -1;
 
 		/* fallthrough */
 
 	case '\0':
 		*out = num;
 		return 0;
 
 	default:
 		goto fail_parse;
 	}
diff --git a/src/index.c b/src/index.c
index 465efaa4e..8858d23a1 100644
--- a/src/index.c
+++ b/src/index.c
@@ -2218,71 +2218,71 @@ static int index_error_invalid(const char *message)
 static int read_reuc(git_index *index, const char *buffer, size_t size)
 {
 	const char *endptr;
 	size_t len;
 	int i;
 
 	/* If called multiple times, the vector might already be initialized */
 	if (index->reuc._alloc_size == 0 &&
 		git_vector_init(&index->reuc, 16, reuc_cmp) < 0)
 		return -1;
 
 	while (size) {
 		git_index_reuc_entry *lost;
 
 		len = p_strnlen(buffer, size) + 1;
 		if (size <= len)
 			return index_error_invalid("reading reuc entries");
 
 		lost = reuc_entry_alloc(buffer);
 		GITERR_CHECK_ALLOC(lost);
 
 		size -= len;
 		buffer += len;
 
 		/* read 3 ASCII octal numbers for stage entries */
 		for (i = 0; i < 3; i++) {
 			int64_t tmp;
 
-			if (git__strtol64(&tmp, buffer, &endptr, 8) < 0 ||
+			if (git__strntol64(&tmp, buffer, size, &endptr, 8) < 0 ||
 				!endptr || endptr == buffer || *endptr ||
 				tmp < 0 || tmp > UINT32_MAX) {
 				index_entry_reuc_free(lost);
 				return index_error_invalid("reading reuc entry stage");
 			}
 
 			lost->mode[i] = (uint32_t)tmp;
 
 			len = (endptr + 1) - buffer;
 			if (size <= len) {
 				index_entry_reuc_free(lost);
 				return index_error_invalid("reading reuc entry stage");
 			}
 
 			size -= len;
 			buffer += len;
 		}
 
 		/* read up to 3 OIDs for stage entries */
 		for (i = 0; i < 3; i++) {
 			if (!lost->mode[i])
 				continue;
 			if (size < 20) {
 				index_entry_reuc_free(lost);
 				return index_error_invalid("reading reuc entry oid");
 			}
 
 			git_oid_fromraw(&lost->oid[i], (const unsigned char *) buffer);
 			size -= 20;
 			buffer += 20;
 		}
 
 		/* entry was read successfully - insert into reuc vector */
 		if (git_vector_insert(&index->reuc, lost) < 0)
 			return -1;
 	}
 
 	/* entries are guaranteed to be sorted on-disk */
 	git_vector_set_sorted(&index->reuc, true);
 
 	return 0;
 }
diff --git a/src/rebase.c b/src/rebase.c
index bc3c5995c..6503e5fc5 100644
--- a/src/rebase.c
+++ b/src/rebase.c
@@ -145,19 +145,19 @@ done:
 GIT_INLINE(int) rebase_readint(
 	size_t *out, git_buf *asc_out, git_buf *state_path, const char *filename)
 {
 	int32_t num;
 	const char *eol;
 	int error = 0;
 
 	if ((error = rebase_readfile(asc_out, state_path, filename)) < 0)
 		return error;
 
-	if (git__strtol32(&num, asc_out->ptr, &eol, 10) < 0 || num < 0 || *eol) {
+	if (git__strntol32(&num, asc_out->ptr, asc_out->size, &eol, 10) < 0 || num < 0 || *eol) {
 		giterr_set(GITERR_REBASE, "the file '%s' contains an invalid numeric value", filename);
 		return -1;
 	}
 
 	*out = (size_t) num;
 
 	return 0;
 }
diff --git a/src/revparse.c b/src/revparse.c
index bdbf87558..df96f9d86 100644
--- a/src/revparse.c
+++ b/src/revparse.c
@@ -126,14 +126,15 @@ static int revparse_lookup_object(
 static int try_parse_numeric(int *n, const char *curly_braces_content)
 {
 	int32_t content;
 	const char *end_ptr;
 
-	if (git__strtol32(&content, curly_braces_content, &end_ptr, 10) < 0)
+	if (git__strntol32(&content, curly_braces_content, strlen(curly_braces_content),
+			   &end_ptr, 10) < 0)
 		return -1;
 
 	if (*end_ptr != '\0')
 		return -1;
 
 	*n = (int)content;
 	return 0;
 }
@@ -564,30 +565,30 @@ static int extract_path(git_buf *buf, const char *spec, size_t *pos)
 static int extract_how_many(int *n, const char *spec, size_t *pos)
 {
 	const char *end_ptr;
 	int parsed, accumulated;
 	char kind = spec[*pos];
 
 	assert(spec[*pos] == '^' || spec[*pos] == '~');
 
 	accumulated = 0;
 
 	do {
 		do {
 			(*pos)++;
 			accumulated++;
 		} while (spec[(*pos)] == kind && kind == '~');
 
 		if (git__isdigit(spec[*pos])) {
-			if (git__strtol32(&parsed, spec + *pos, &end_ptr, 10) < 0)
+			if (git__strntol32(&parsed, spec + *pos, strlen(spec + *pos), &end_ptr, 10) < 0)
 				return GIT_EINVALIDSPEC;
 
 			accumulated += (parsed - 1);
 			*pos = end_ptr - spec;
 		}
 
 	} 	while (spec[(*pos)] == kind && kind == '~');
 
 	*n = accumulated;
 
 	return 0;
 }
diff --git a/src/signature.c b/src/signature.c
index 286d0a618..91864bb88 100644
--- a/src/signature.c
+++ b/src/signature.c
@@ -198,75 +198,77 @@ int git_signature_default(git_signature **out, git_repository *repo)
 int git_signature__parse(git_signature *sig, const char **buffer_out,
 		const char *buffer_end, const char *header, char ender)
 {
 	const char *buffer = *buffer_out;
 	const char *email_start, *email_end;
 
 	memset(sig, 0, sizeof(git_signature));
 
 	if (ender &&
 		(buffer_end = memchr(buffer, ender, buffer_end - buffer)) == NULL)
 		return signature_error("no newline given");
 
 	if (header) {
 		const size_t header_len = strlen(header);
 
 		if (buffer + header_len >= buffer_end || memcmp(buffer, header, header_len) != 0)
 			return signature_error("expected prefix doesn't match actual");
 
 		buffer += header_len;
 	}
 
 	email_start = git__memrchr(buffer, '<', buffer_end - buffer);
 	email_end = git__memrchr(buffer, '>', buffer_end - buffer);
 
 	if (!email_start || !email_end || email_end <= email_start)
 		return signature_error("malformed e-mail");
 
 	email_start += 1;
 	sig->name = extract_trimmed(buffer, email_start - buffer - 1);
 	sig->email = extract_trimmed(email_start, email_end - email_start);
 
 	/* Do we even have a time at the end of the signature? */
 	if (email_end + 2 < buffer_end) {
 		const char *time_start = email_end + 2;
 		const char *time_end;
 
-		if (git__strtol64(&sig->when.time, time_start, &time_end, 10) < 0) {
+		if (git__strntol64(&sig->when.time, time_start,
+				   buffer_end - time_start, &time_end, 10) < 0) {
 			git__free(sig->name);
 			git__free(sig->email);
 			sig->name = sig->email = NULL;
 			return signature_error("invalid Unix timestamp");
 		}
 
 		/* do we have a timezone? */
 		if (time_end + 1 < buffer_end) {
 			int offset, hours, mins;
 			const char *tz_start, *tz_end;
 
 			tz_start = time_end + 1;
 
 			if ((tz_start[0] != '-' && tz_start[0] != '+') ||
-				git__strtol32(&offset, tz_start + 1, &tz_end, 10) < 0) {
+			    git__strntol32(&offset, tz_start + 1,
+					   buffer_end - tz_start + 1, &tz_end, 10) < 0) {
 				/* malformed timezone, just assume it's zero */
 				offset = 0;
 			}
 
 			hours = offset / 100;
 			mins = offset % 100;
 
 			/*
 			 * only store timezone if it's not overflowing;
 			 * see http://www.worldtimezone.com/faq.html
 			 */
 			if (hours <= 14 && mins <= 59) {
 				sig->when.offset = (hours * 60) + mins;
 				sig->when.sign = tz_start[0];
 				if (tz_start[0] == '-')
 					sig->when.offset = -sig->when.offset;
 			}
 		}
 	}
 
 	*buffer_out = buffer_end + 1;
 	return 0;
 }
diff --git a/src/streams/curl.c b/src/streams/curl.c
index ee13be1dc..3c0af3b04 100644
--- a/src/streams/curl.c
+++ b/src/streams/curl.c
@@ -317,51 +317,51 @@ static void curls_free(git_stream *stream)
 int git_curl_stream_new(git_stream **out, const char *host, const char *port)
 {
 	curl_stream *st;
 	CURL *handle;
 	int iport = 0, error;
 
 	st = git__calloc(1, sizeof(curl_stream));
 	GITERR_CHECK_ALLOC(st);
 
 	handle = curl_easy_init();
 	if (handle == NULL) {
 		giterr_set(GITERR_NET, "failed to create curl handle");
 		git__free(st);
 		return -1;
 	}
 
-	if ((error = git__strtol32(&iport, port, NULL, 10)) < 0) {
+	if ((error = git__strntol32(&iport, port, strlen(port), NULL, 10)) < 0) {
 		git__free(st);
 		return error;
 	}
 
 	curl_easy_setopt(handle, CURLOPT_URL, host);
 	curl_easy_setopt(handle, CURLOPT_ERRORBUFFER, st->curl_error);
 	curl_easy_setopt(handle, CURLOPT_PORT, iport);
 	curl_easy_setopt(handle, CURLOPT_CONNECT_ONLY, 1);
 	curl_easy_setopt(handle, CURLOPT_SSL_VERIFYPEER, 1);
 	curl_easy_setopt(handle, CURLOPT_CERTINFO, 1);
 	curl_easy_setopt(handle, CURLOPT_HTTPPROXYTUNNEL, 1);
 	curl_easy_setopt(handle, CURLOPT_PROXYAUTH, CURLAUTH_ANY);
 
 	/* curl_easy_setopt(handle, CURLOPT_VERBOSE, 1); */
 
 	st->parent.version = GIT_STREAM_VERSION;
 	st->parent.encrypted = 0; /* we don't encrypt ourselves */
 	st->parent.proxy_support = 1;
 	st->parent.connect = curls_connect;
 	st->parent.certificate = curls_certificate;
 	st->parent.set_proxy = curls_set_proxy;
 	st->parent.read = curls_read;
 	st->parent.write = curls_write;
 	st->parent.close = curls_close;
 	st->parent.free = curls_free;
 	st->handle = handle;
 
 	*out = (git_stream *) st;
 	return 0;
 }
 
 #else
 
 #include "stream.h"
diff --git a/src/transports/smart_pkt.c b/src/transports/smart_pkt.c
index 6a404efe4..fb59c70ec 100644
--- a/src/transports/smart_pkt.c
+++ b/src/transports/smart_pkt.c
@@ -366,50 +366,50 @@ static int unpack_pkt(git_pkt **out, const char *line, size_t len)
 static int parse_len(size_t *out, const char *line, size_t linelen)
 {
 	char num[PKT_LEN_SIZE + 1];
 	int i, k, error;
 	int32_t len;
 	const char *num_end;
 
 	/* Not even enough for the length */
 	if (linelen < PKT_LEN_SIZE)
 		return GIT_EBUFS;
 
 	memcpy(num, line, PKT_LEN_SIZE);
 	num[PKT_LEN_SIZE] = '\0';
 
 	for (i = 0; i < PKT_LEN_SIZE; ++i) {
 		if (!isxdigit(num[i])) {
 			/* Make sure there are no special characters before passing to error message */
 			for (k = 0; k < PKT_LEN_SIZE; ++k) {
 				if(!isprint(num[k])) {
 					num[k] = '.';
 				}
 			}
 
 			giterr_set(GITERR_NET, "invalid hex digit in length: '%s'", num);
 			return -1;
 		}
 	}
 
-	if ((error = git__strtol32(&len, num, &num_end, 16)) < 0)
+	if ((error = git__strntol32(&len, num, PKT_LEN_SIZE, &num_end, 16)) < 0)
 		return error;
 
 	if (len < 0)
 		return -1;
 
 	*out = (size_t) len;
 	return 0;
 }
 
 /*
  * As per the documentation, the syntax is:
  *
  * pkt-line	= data-pkt / flush-pkt
  * data-pkt	= pkt-len pkt-payload
  * pkt-len		= 4*(HEXDIG)
  * pkt-payload = (pkt-len -4)*(OCTET)
  * flush-pkt	= "0000"
  *
  * Which means that the first four bytes are the length of the line,
  * in ASCII hexadecimal (including itself)
  */
diff --git a/src/transports/winhttp.c b/src/transports/winhttp.c
index 3df892d09..e925dbdc0 100644
--- a/src/transports/winhttp.c
+++ b/src/transports/winhttp.c
@@ -750,90 +750,91 @@ static void CALLBACK winhttp_status(
 static int winhttp_connect(
 	winhttp_subtransport *t)
 {
 	wchar_t *wide_host;
 	int32_t port;
 	wchar_t *wide_ua;
 	git_buf ua = GIT_BUF_INIT;
 	int error = -1;
 	int default_timeout = TIMEOUT_INFINITE;
 	int default_connect_timeout = DEFAULT_CONNECT_TIMEOUT;
 	DWORD protocols =
 		WINHTTP_FLAG_SECURE_PROTOCOL_TLS1 |
 		WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1 |
 		WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2;
 
 	t->session = NULL;
 	t->connection = NULL;
 
 	/* Prepare port */
-	if (git__strtol32(&port, t->connection_data.port, NULL, 10) < 0)
+	if (git__strntol32(&port, t->connection_data.port,
+			   strlen(t->connection_data.port), NULL, 10) < 0)
 		return -1;
 
 	/* Prepare host */
 	if (git__utf8_to_16_alloc(&wide_host, t->connection_data.host) < 0) {
 		giterr_set(GITERR_OS, "unable to convert host to wide characters");
 		return -1;
 	}
 
 
 	if ((error = git_http__user_agent(&ua)) < 0) {
 		git__free(wide_host);
 		return error;
 	}
 
 	if (git__utf8_to_16_alloc(&wide_ua, git_buf_cstr(&ua)) < 0) {
 		giterr_set(GITERR_OS, "unable to convert host to wide characters");
 		git__free(wide_host);
 		git_buf_dispose(&ua);
 		return -1;
 	}
 
 	git_buf_dispose(&ua);
 
 	/* Establish session */
 	t->session = WinHttpOpen(
 		wide_ua,
 		WINHTTP_ACCESS_TYPE_DEFAULT_PROXY,
 		WINHTTP_NO_PROXY_NAME,
 		WINHTTP_NO_PROXY_BYPASS,
 		0);
 
 	if (!t->session) {
 		giterr_set(GITERR_OS, "failed to init WinHTTP");
 		goto on_error;
 	}
 
 	/*
 	 * Do a best-effort attempt to enable TLS 1.2 but allow this to
 	 * fail; if TLS 1.2 support is not available for some reason,
 	 * ignore the failure (it will keep the default protocols).
 	 */
 	WinHttpSetOption(t->session,
 		WINHTTP_OPTION_SECURE_PROTOCOLS,
 		&protocols,
 		sizeof(protocols));
 
 	if (!WinHttpSetTimeouts(t->session, default_timeout, default_connect_timeout, default_timeout, default_timeout)) {
 		giterr_set(GITERR_OS, "failed to set timeouts for WinHTTP");
 		goto on_error;
 	}
 
 
 	/* Establish connection */
 	t->connection = WinHttpConnect(
 		t->session,
 		wide_host,
 		(INTERNET_PORT) port,
 		0);
 
 	if (!t->connection) {
 		giterr_set(GITERR_OS, "failed to connect to host");
 		goto on_error;
 	}
 
 	if (WinHttpSetStatusCallback(t->connection, winhttp_status, WINHTTP_CALLBACK_FLAG_SECURE_FAILURE, 0) == WINHTTP_INVALID_STATUS_CALLBACK) {
 		giterr_set(GITERR_OS, "failed to set status callback");
 		goto on_error;
 	}
 
 	error = 0;
diff --git a/src/tree-cache.c b/src/tree-cache.c
index b331d22a2..c33e6af9e 100644
--- a/src/tree-cache.c
+++ b/src/tree-cache.c
@@ -74,70 +74,70 @@ const git_tree_cache *git_tree_cache_get(const git_tree_cache *tree, const char
 static int read_tree_internal(git_tree_cache **out,
 			      const char **buffer_in, const char *buffer_end,
 			      git_pool *pool)
 {
 	git_tree_cache *tree = NULL;
 	const char *name_start, *buffer;
 	int count;
 
 	buffer = name_start = *buffer_in;
 
 	if ((buffer = memchr(buffer, '\0', buffer_end - buffer)) == NULL)
 		goto corrupted;
 
 	if (++buffer >= buffer_end)
 		goto corrupted;
 
 	if (git_tree_cache_new(&tree, name_start, pool) < 0)
 		return -1;
 
 	/* Blank-terminated ASCII decimal number of entries in this tree */
-	if (git__strtol32(&count, buffer, &buffer, 10) < 0)
+	if (git__strntol32(&count, buffer, buffer_end - buffer, &buffer, 10) < 0)
 		goto corrupted;
 
 	tree->entry_count = count;
 
 	if (*buffer != ' ' || ++buffer >= buffer_end)
 		goto corrupted;
 
 	 /* Number of children of the tree, newline-terminated */
-	if (git__strtol32(&count, buffer, &buffer, 10) < 0 || count < 0)
+	if (git__strntol32(&count, buffer, buffer_end - buffer, &buffer, 10) < 0 || count < 0)
 		goto corrupted;
 
 	tree->children_count = count;
 
 	if (*buffer != '\n' || ++buffer > buffer_end)
 		goto corrupted;
 
 	/* The SHA1 is only there if it's not invalidated */
 	if (tree->entry_count >= 0) {
 		/* 160-bit SHA-1 for this tree and it's children */
 		if (buffer + GIT_OID_RAWSZ > buffer_end)
 			goto corrupted;
 
 		git_oid_fromraw(&tree->oid, (const unsigned char *)buffer);
 		buffer += GIT_OID_RAWSZ;
 	}
 
 	/* Parse children: */
 	if (tree->children_count > 0) {
 		unsigned int i;
 
 		tree->children = git_pool_malloc(pool, tree->children_count * sizeof(git_tree_cache *));
 		GITERR_CHECK_ALLOC(tree->children);
 
 		memset(tree->children, 0x0, tree->children_count * sizeof(git_tree_cache *));
 
 		for (i = 0; i < tree->children_count; ++i) {
 			if (read_tree_internal(&tree->children[i], &buffer, buffer_end, pool) < 0)
 				goto corrupted;
 		}
 	}
 
 	*buffer_in = buffer;
 	*out = tree;
 	return 0;
 
  corrupted:
 	giterr_set(GITERR_INDEX, "corrupted TREE extension in index");
 	return -1;
 }
diff --git a/src/util.c b/src/util.c
index 79b362f7f..20c88a1d3 100644
--- a/src/util.c
+++ b/src/util.c
@@ -68,74 +68,78 @@ int git_strarray_copy(git_strarray *tgt, const git_strarray *src)
 	return 0;
 }
 
-int git__strtol64(int64_t *result, const char *nptr, const char **endptr, int base)
-{
-
-	return git__strntol64(result, nptr, (size_t)-1, endptr, base);
-}
-
 int git__strntol64(int64_t *result, const char *nptr, size_t nptr_len, const char **endptr, int base)
 {
 	const char *p;
 	int64_t n, nn;
 	int c, ovfl, v, neg, ndig;
 
 	p = nptr;
 	neg = 0;
 	n = 0;
 	ndig = 0;
 	ovfl = 0;
 
 	/*
 	 * White space
 	 */
 	while (git__isspace(*p))
 		p++;
 
 	/*
 	 * Sign
 	 */
 	if (*p == '-' || *p == '+')
 		if (*p++ == '-')
 			neg = 1;
 
 	/*
 	 * Base
 	 */
 	if (base == 0) {
 		if (*p != '0')
 			base = 10;
 		else {
 			base = 8;
 			if (p[1] == 'x' || p[1] == 'X') {
 				p += 2;
 				base = 16;
 			}
 		}
 	} else if (base == 16 && *p == '0') {
 		if (p[1] == 'x' || p[1] == 'X')
 			p += 2;
 	} else if (base < 0 || 36 < base)
 		goto Return;
 
 	/*
 	 * Non-empty sequence of digits
 	 */
 	for (; nptr_len > 0; p++,ndig++,nptr_len--) {
 		c = *p;
 		v = base;
 		if ('0'<=c && c<='9')
 			v = c - '0';
 		else if ('a'<=c && c<='z')
 			v = c - 'a' + 10;
 		else if ('A'<=c && c<='Z')
 			v = c - 'A' + 10;
 		if (v >= base)
 			break;
-		nn = n * base + (neg ? -v : v);
-		if ((!neg && nn < n) || (neg && nn > n))
+		v = neg ? -v : v;
+		if (n > INT64_MAX / base || n < INT64_MIN / base) {
 			ovfl = 1;
-		n = nn;
+			/* Keep on iterating until the end of this number */
+			continue;
+		}
+		nn = n * base;
+		if ((v > 0 && nn > INT64_MAX - v) ||
+		    (v < 0 && nn < INT64_MIN - v)) {
+			ovfl = 1;
+			/* Keep on iterating until the end of this number */
+			continue;
+		}
+		n = nn + v;
 	}
 
 Return:
@@ -156,28 +160,26 @@ Return:
 	return 0;
 }
 
-int git__strtol32(int32_t *result, const char *nptr, const char **endptr, int base)
-{
-
-	return git__strntol32(result, nptr, (size_t)-1, endptr, base);
-}
-
 int git__strntol32(int32_t *result, const char *nptr, size_t nptr_len, const char **endptr, int base)
 {
-	int error;
+	const char *tmp_endptr;
 	int32_t tmp_int;
 	int64_t tmp_long;
+	int error;
 
-	if ((error = git__strntol64(&tmp_long, nptr, nptr_len, endptr, base)) < 0)
+	if ((error = git__strntol64(&tmp_long, nptr, nptr_len, &tmp_endptr, base)) < 0)
 		return error;
 
 	tmp_int = tmp_long & 0xFFFFFFFF;
 	if (tmp_int != tmp_long) {
-		giterr_set(GITERR_INVALID, "failed to convert: '%s' is too large", nptr);
+		int len = tmp_endptr - nptr;
+		giterr_set(GITERR_INVALID, "failed to convert: '%.*s' is too large", len, nptr);
 		return -1;
 	}
 
 	*result = tmp_int;
+	if (endptr)
+		*endptr = tmp_endptr;
 
 	return error;
 }
diff --git a/src/util.h b/src/util.h
index b6f5b7519..400024373 100644
--- a/src/util.h
+++ b/src/util.h
@@ -58,9 +58,7 @@ GIT_INLINE(int) git__signum(int val)
 	return ((val > 0) - (val < 0));
 }
 
-extern int git__strtol32(int32_t *n, const char *buff, const char **end_buf, int base);
 extern int git__strntol32(int32_t *n, const char *buff, size_t buff_len, const char **end_buf, int base);
-extern int git__strtol64(int64_t *n, const char *buff, const char **end_buf, int base);
 extern int git__strntol64(int64_t *n, const char *buff, size_t buff_len, const char **end_buf, int base);
 
 
diff --git a/tests/core/strtol.c b/tests/core/strtol.c
index 0d3b6a5e6..ba79fba51 100644
--- a/tests/core/strtol.c
+++ b/tests/core/strtol.c
@@ -1,45 +1,84 @@
 #include "clar_libgit2.h"
 
-void test_core_strtol__int32(void)
+static void assert_l32_parses(const char *string, int32_t expected, int base)
 {
 	int32_t i;
+	cl_git_pass(git__strntol32(&i, string, strlen(string), NULL, base));
+	cl_assert_equal_i(i, expected);
+}
 
-	cl_git_pass(git__strtol32(&i, "123", NULL, 10));
-	cl_assert(i == 123);
-	cl_git_pass(git__strtol32(&i, "  +123 ", NULL, 10));
-	cl_assert(i == 123);
-	cl_git_pass(git__strtol32(&i, "  +2147483647 ", NULL, 10));
-	cl_assert(i == 2147483647);
-	cl_git_pass(git__strtol32(&i, "  -2147483648 ", NULL, 10));
-	cl_assert(i == -2147483648LL);
-	
-	cl_git_fail(git__strtol32(&i, "  2147483657 ", NULL, 10));
-	cl_git_fail(git__strtol32(&i, "  -2147483657 ", NULL, 10));
+static void assert_l32_fails(const char *string, int base)
+{
+	int32_t i;
+	cl_git_fail(git__strntol32(&i, string, strlen(string), NULL, base));
 }
 
-void test_core_strtol__int64(void)
+static void assert_l64_parses(const char *string, int64_t expected, int base)
 {
 	int64_t i;
+	cl_git_pass(git__strntol64(&i, string, strlen(string), NULL, base));
+	cl_assert_equal_i(i, expected);
+}
+
+static void assert_l64_fails(const char *string, int base)
+{
+	int64_t i;
+	cl_git_fail(git__strntol64(&i, string, strlen(string), NULL, base));
+}
+
+void test_core_strtol__int32(void)
+{
+	assert_l32_parses("123", 123, 10);
+	assert_l32_parses("  +123 ", 123, 10);
+	assert_l32_parses("  +2147483647 ", 2147483647, 10);
+	assert_l32_parses("  -2147483648 ", -2147483648LL, 10);
+	assert_l32_parses("A", 10, 16);
+	assert_l32_parses("1x1", 1, 10);
 
-	cl_git_pass(git__strtol64(&i, "123", NULL, 10));
-	cl_assert(i == 123);
-	cl_git_pass(git__strtol64(&i, "  +123 ", NULL, 10));
-	cl_assert(i == 123);
-	cl_git_pass(git__strtol64(&i, "  +2147483647 ", NULL, 10));
-	cl_assert(i == 2147483647);
-	cl_git_pass(git__strtol64(&i, "  -2147483648 ", NULL, 10));
-	cl_assert(i == -2147483648LL);
-	cl_git_pass(git__strtol64(&i, "  2147483657 ", NULL, 10));
-	cl_assert(i == 2147483657LL);
-	cl_git_pass(git__strtol64(&i, "  -2147483657 ", NULL, 10));
-	cl_assert(i == -2147483657LL);
-	cl_git_pass(git__strtol64(&i, " 9223372036854775807  ", NULL, 10));
-	cl_assert(i == INT64_MAX);
-	cl_git_pass(git__strtol64(&i, "   -9223372036854775808  ", NULL, 10));
-	cl_assert(i == INT64_MIN);
-	cl_git_pass(git__strtol64(&i, "   0x7fffffffffffffff  ", NULL, 16));
-	cl_assert(i == INT64_MAX);
-	cl_git_pass(git__strtol64(&i, "   -0x8000000000000000   ", NULL, 16));
-	cl_assert(i == INT64_MIN);
+	assert_l32_fails("", 10);
+	assert_l32_fails("a", 10);
+	assert_l32_fails("x10x", 10);
+	assert_l32_fails("  2147483657 ", 10);
+	assert_l32_fails("  -2147483657 ", 10);
 }
 
+void test_core_strtol__int64(void)
+{
+	assert_l64_parses("123", 123, 10);
+	assert_l64_parses("  +123 ", 123, 10);
+	assert_l64_parses("  +2147483647 ", 2147483647, 10);
+	assert_l64_parses("  -2147483648 ", -2147483648LL, 10);
+	assert_l64_parses("  2147483657 ", 2147483657LL, 10);
+	assert_l64_parses("  -2147483657 ", -2147483657LL, 10);
+	assert_l64_parses(" 9223372036854775807  ", INT64_MAX, 10);
+	assert_l64_parses("   -9223372036854775808  ", INT64_MIN, 10);
+	assert_l64_parses("   0x7fffffffffffffff  ", INT64_MAX, 16);
+	assert_l64_parses("   -0x8000000000000000   ", INT64_MIN, 16);
+	assert_l64_parses("1a", 26, 16);
+	assert_l64_parses("1A", 26, 16);
+
+	assert_l64_fails("", 10);
+	assert_l64_fails("a", 10);
+	assert_l64_fails("x10x", 10);
+	assert_l64_fails("0x8000000000000000", 16);
+	assert_l64_fails("-0x8000000000000001", 16);
+}
+
+void test_core_strtol__buffer_length_truncates(void)
+{
+	int32_t i32;
+	int64_t i64;
+
+	cl_git_pass(git__strntol32(&i32, "11", 1, NULL, 10));
+	cl_assert_equal_i(i32, 1);
+
+	cl_git_pass(git__strntol64(&i64, "11", 1, NULL, 10));
+	cl_assert_equal_i(i64, 1);
+}
+
+void test_core_strtol__error_message_cuts_off(void)
+{
+	assert_l32_fails("2147483657foobar", 10);
+	cl_assert(strstr(giterr_last()->message, "2147483657") != NULL);
+	cl_assert(strstr(giterr_last()->message, "foobar") == NULL);
+}
