commit 16432022a82ecbf22802680d42bf9adacefef6da
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Sun Nov 26 12:53:42 2017 +0100

    axisswap: validate axis number. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=4404. Credit to OSS Fuzz

diff --git a/src/PJ_axisswap.c b/src/PJ_axisswap.c
index 53c93cc9..f8f17380 100644
--- a/src/PJ_axisswap.c
+++ b/src/PJ_axisswap.c
@@ -158,80 +158,84 @@ static PJ_COORD reverse_4d(PJ_COORD coo, PJ *P) {
 /***********************************************************************/
 PJ *CONVERSION(axisswap,0) {
 /***********************************************************************/
     struct pj_opaque *Q = pj_calloc (1, sizeof (struct pj_opaque));
     char *order, *s;
     unsigned int i, j, n;
 
     if (0==Q)
         return pj_default_destructor (P, ENOMEM);
     P->opaque = (void *) Q;
 
     /* read axis order */
     if (pj_param (P->ctx, P->params, "torder").i) {
         order = pj_param(P->ctx, P->params, "sorder").s;
     } else {
         return pj_default_destructor(P, PJD_ERR_MISSING_ARGS);
     }
 
     /* fill axis list with indices from 4-7 to simplify duplicate search further down */
     for (i=0; i<4; i++)
         Q->axis[i] = i+4;
 
     /* check that all characters are valid */
     for (i=0; i<strlen(order); i++)
         if (strchr("1234-,", order[i]) == 0) {
             proj_log_error(P, "axisswap: unknown axis '%c'", order[i]);
             return pj_default_destructor(P, PJD_ERR_AXIS);
         }
 
     /* read axes numbers and signs */
     for ( s = order, n = 0; *s != '\0' && n < 4; ) {
         Q->axis[n] = abs(atoi(s))-1;
+        if (Q->axis[n] >= 4) {
+            proj_log_error(P, "swapaxis: invalid axis '%s'", s);
+            return pj_default_destructor(P, PJD_ERR_AXIS);
+        }
         Q->sign[n++] = sign(atoi(s));
         while ( *s != '\0' && *s != ',' )
             s++;
         if ( *s == ',' )
             s++;
     }
 
     /* check for duplicate axes */
     for (i=0; i<4; i++)
         for (j=0; j<4; j++) {
             if (i==j)
                 continue;
             if (Q->axis[i] == Q->axis[j]) {
                 proj_log_error(P, "swapaxis: duplicate axes specified");
                 return pj_default_destructor(P, PJD_ERR_AXIS);
             }
         }
 
     /* only map fwd/inv functions that are possible with the given axis setup */
     if (n == 4) {
         P->fwd4d = forward_4d;
         P->inv4d = reverse_4d;
     }
     if (n == 3 && Q->axis[0] < 3 && Q->axis[1] < 3 && Q->axis[2] < 3) {
         P->fwd3d  = forward_3d;
         P->inv3d  = reverse_3d;
     }
     if (n == 2 && Q->axis[0] < 2 && Q->axis[1] < 2) {
         P->fwd    = forward_2d;
         P->inv    = reverse_2d;
     }
 
     if (P->fwd4d == NULL && P->fwd3d == NULL && P->fwd == NULL) {
         proj_log_error(P, "swapaxis: bad axis order");
         return pj_default_destructor(P, PJD_ERR_AXIS);
     }
 
     if (pj_param(P->ctx, P->params, "tangularunits").i) {
         P->left  = PJ_IO_UNITS_RADIANS;
         P->right = PJ_IO_UNITS_RADIANS;
     } else {
         P->left  = PJ_IO_UNITS_METERS;
         P->right = PJ_IO_UNITS_METERS;
     }
 
     return P;
 }
 
