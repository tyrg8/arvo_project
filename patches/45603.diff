commit 622489f07fd4fd4eaefdb24fa1381aab3bed3ed3
Author: Alan T. DeKok <aland@freeradius.org>
Date:   Wed Mar 16 10:27:01 2022 -0400

    it helps to check if there's room for the header.

diff --git a/src/protocols/dhcpv4/decode.c b/src/protocols/dhcpv4/decode.c
index 20ce648a05..120db27aa0 100644
--- a/src/protocols/dhcpv4/decode.c
+++ b/src/protocols/dhcpv4/decode.c
@@ -612,114 +612,115 @@ static ssize_t decode_option(TALLOC_CTX *ctx, fr_pair_list_t *out,
 /** Decode DHCP option
  *
  * @param[in] ctx context	to alloc new attributes in.
  * @param[out] out		Where to write the decoded options.
  * @param[in] data		to parse.
  * @param[in] data_len		of data to parse.
  * @param[in] decode_ctx	Unused.
  */
 ssize_t fr_dhcpv4_decode_option(TALLOC_CTX *ctx, fr_pair_list_t *out,
 			        uint8_t const *data, size_t data_len, void *decode_ctx)
 {
 	ssize_t			slen;
 	uint8_t const		*p = data, *end = data + data_len;
 	uint8_t const		*next;
 	fr_dhcpv4_ctx_t		*packet_ctx = decode_ctx;
 
 	FR_PROTO_TRACE("%s called to parse %zu byte(s)", __FUNCTION__, data_len);
 
 	if (data_len == 0) return 0;
 
 	FR_PROTO_HEX_DUMP(data, data_len, NULL);
 
 	/*
 	 *	Padding / End of options
 	 */
 	if (p[0] == 0) return data_len;		/* 0x00 - Padding option */
 	if (p[0] == 255) return data_len;	/* 0xff - End of options signifier */
 
 	/*
 	 *	Everything else should be real options
 	 */
 	if ((data_len < 2) || ((size_t) (data[1] + 2) > data_len)) {
 		fr_strerror_printf("%s: Insufficient data", __FUNCTION__);
 		return -1;
 	}
 
 	/*
 	 *	Check for multiple options of the same type, and concatenate their values together.
 	 *
 	 *	RFC 2131 Section 4.1 says:
 	 *
 	 *	  The client concatenates the values of multiple
 	 *	  instances of the same option into a single parameter
 	 *	  list for configuration.
 	 *
 	 *	which presumably also means the same for the server on reception.
 	 *
 	 *	We therefore peek ahead, and concatenate the values into a temporary buffer.  The buffer is
 	 *	allocated only if necessary, and is re-used for the entire packet.
 	 *
 	 *	If the options are *not* consecutive, then we don't concatenate them.  Too bad for you!
 	 *
 	 *	Note that we don't (yet) do this for TLVs.
 	 */
 	next = data + 2 + data[1];
 	if ((data[1] > 0) && (next < end) && (next[0] == data[0])) {
 		uint8_t *q;
 		fr_dict_attr_t const *da;
 
 		if (!packet_ctx->buffer) {
 			packet_ctx->buffer = talloc_array(packet_ctx, uint8_t, data_len);
 			if (!packet_ctx->buffer) return -1;
 
 		} else if (talloc_array_length(packet_ctx->buffer) < data_len) {
 			/*
 			 *	We're called in a loop from fr_dhcpv4_decode(), with the full packet, so the
 			 *	needed size should only go down as we decode the packet.
 			 */
 			return -1;
 		}
 		q = packet_ctx->buffer;
 
 		for (next = data; next < end; next += 2 + next[1]) {
+			if ((end - next) < 2) return -1;
 			if (next[0] != data[0]) break;
 			if ((next + 2 + next[1]) > end) return -1;
 
 			memcpy(q, next + 2, next[1]);
 			q += next[1];
 		}
 
 		da = fr_dict_attr_child_by_num(fr_dict_root(dict_dhcpv4), p[0]);
 		if (!da) {
 			da = fr_dict_unknown_attr_afrom_num(packet_ctx->tmp_ctx, fr_dict_root(dict_dhcpv4), p[0]);
 			if (!da) return -1;
 
 			slen = decode_raw(ctx, out, da, packet_ctx->buffer, q - packet_ctx->buffer, packet_ctx);
 
 		} else if (da->type == FR_TYPE_VSA) {
 			slen = decode_vsa(ctx, out, da, packet_ctx->buffer, q - packet_ctx->buffer, packet_ctx);
 
 		} else if (da->type == FR_TYPE_TLV) {
 			slen = decode_tlv(ctx, out, da, packet_ctx->buffer, q - packet_ctx->buffer, packet_ctx);
 
 		} else if (da->flags.array) {
 			slen = decode_array(ctx, out, da, packet_ctx->buffer, q - packet_ctx->buffer, packet_ctx);
 
 		} else {
 			slen = decode_value(ctx, out, da, packet_ctx->buffer, q - packet_ctx->buffer, packet_ctx, true);
 		}
 		if (slen <= 0) return slen;
 
 		/*
 		 *	The actual amount of data we decoded, including the various headers.
 		 */
 		FR_PROTO_TRACE("decoding option complete, %zu decoded, returning %zu byte(s)", slen, (size_t) (next - data));
 		return next - data;
 	}
 
 	slen = decode_option(ctx, out, fr_dict_root(dict_dhcpv4), data, data[1] + 2, decode_ctx);
 	if (slen < 0) return slen;
 
 	FR_PROTO_TRACE("decoding option complete, %zu decoded, returning %u byte(s)", slen, data[1] + 2);
 	return data[1] + 2;
 }
