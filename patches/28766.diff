commit 23280234a3ee0ef4b96c11b31d57a9575142f1e4
Author: Eric Seckler <eseckler@google.com>
Date:   Mon Dec 21 11:59:37 2020 +0000

    processor: Fix a stack overflow in memory snapshot parsing
    
    Check for existence of the referenced nodes in the node_id_map before
    dereferencing the iterator's value.
    
    
    Bug: oss-fuzz:28766
    Change-Id: I40da9230d763d7fc26dd421aa28547cba37cef6e

diff --git a/src/trace_processor/importers/proto/memory_tracker_snapshot_parser.cc b/src/trace_processor/importers/proto/memory_tracker_snapshot_parser.cc
index 8dd2c9a6f..7d03af657 100644
--- a/src/trace_processor/importers/proto/memory_tracker_snapshot_parser.cc
+++ b/src/trace_processor/importers/proto/memory_tracker_snapshot_parser.cc
@@ -165,54 +165,60 @@ std::unique_ptr<GlobalNodeGraph> MemoryTrackerSnapshotParser::GenerateGraph(
 void MemoryTrackerSnapshotParser::EmitRows(int64_t ts,
                                            GlobalNodeGraph& graph,
                                            LevelOfDetail level_of_detail) {
-  IdNodeMap id_node_table;
+  IdNodeMap id_node_map;
 
   // For now, we use the existing global instant event track for chrome events,
   // since memory dumps are global.
   TrackId track_id =
       context_->track_tracker->GetOrCreateLegacyChromeGlobalInstantTrack();
 
   tables::MemorySnapshotTable::Row snapshot_row(
       ts, track_id, level_of_detail_ids_[static_cast<size_t>(level_of_detail)]);
   tables::MemorySnapshotTable::Id snapshot_row_id =
       context_->storage->mutable_memory_snapshot_table()
           ->Insert(snapshot_row)
           .id;
 
   for (auto const& it_process : graph.process_node_graphs()) {
     tables::ProcessMemorySnapshotTable::Row process_row;
     process_row.upid = context_->process_tracker->GetOrCreateProcess(
         static_cast<uint32_t>(it_process.first));
     process_row.snapshot_id = snapshot_row_id;
     tables::ProcessMemorySnapshotTable::Id proc_snapshot_row_id =
         context_->storage->mutable_process_memory_snapshot_table()
             ->Insert(process_row)
             .id;
     EmitMemorySnapshotNodeRows(*(it_process.second->root()),
-                               proc_snapshot_row_id, id_node_table);
+                               proc_snapshot_row_id, id_node_map);
   }
 
   // For each snapshot nodes from shared_memory_graph will be associated
   // with a fabricated process_memory_snapshot entry whose pid == 0.
   // TODO(mobica-google-contributors@mobica.com): Track the shared memory graph
   // in a separate table.
   tables::ProcessMemorySnapshotTable::Row fake_process_row;
   fake_process_row.upid = context_->process_tracker->GetOrCreateProcess(0u);
   fake_process_row.snapshot_id = snapshot_row_id;
   tables::ProcessMemorySnapshotTable::Id fake_proc_snapshot_row_id =
       context_->storage->mutable_process_memory_snapshot_table()
           ->Insert(fake_process_row)
           .id;
   EmitMemorySnapshotNodeRows(*(graph.shared_memory_graph()->root()),
-                             fake_proc_snapshot_row_id, id_node_table);
+                             fake_proc_snapshot_row_id, id_node_map);
 
-  for (const auto& it_edge : graph.edges()) {
+  for (const auto& edge : graph.edges()) {
     tables::MemorySnapshotEdgeTable::Row edge_row;
-    edge_row.source_node_id = static_cast<tables::MemorySnapshotNodeTable::Id>(
-        id_node_table.find(it_edge.source()->id())->second);
-    edge_row.target_node_id = static_cast<tables::MemorySnapshotNodeTable::Id>(
-        id_node_table.find(it_edge.target()->id())->second);
-    edge_row.importance = static_cast<uint32_t>(it_edge.priority());
+    auto source_it = id_node_map.find(edge.source()->id());
+    if (source_it == id_node_map.end())
+      continue;
+    edge_row.source_node_id =
+        static_cast<tables::MemorySnapshotNodeTable::Id>(source_it->second);
+    auto target_it = id_node_map.find(edge.target()->id());
+    if (target_it == id_node_map.end())
+      continue;
+    edge_row.target_node_id =
+        static_cast<tables::MemorySnapshotNodeTable::Id>(target_it->second);
+    edge_row.importance = static_cast<uint32_t>(edge.priority());
     context_->storage->mutable_memory_snapshot_edge_table()->Insert(edge_row);
   }
 }
diff --git a/src/trace_processor/trace_database_integrationtest.cc b/src/trace_processor/trace_database_integrationtest.cc
index a7067e7a6..e963b54cb 100644
--- a/src/trace_processor/trace_database_integrationtest.cc
+++ b/src/trace_processor/trace_database_integrationtest.cc
@@ -254,25 +254,27 @@ TEST_F(TraceProcessorIntegrationTest, Clusterfuzz15252) {
 TEST_F(TraceProcessorIntegrationTest, Clusterfuzz17805) {
   // This trace is garbage but is detected as a systrace. However, it should
   // still parse successfully as we try to be graceful with encountering random
   // data in systrace as they can have arbitrary print events from the kernel.
   ASSERT_TRUE(LoadTrace("clusterfuzz_17805", 4096).ok());
 }
 
 // Failing on DCHECKs during import because the traces aren't really valid.
 #if PERFETTO_DCHECK_IS_ON()
 #define MAYBE_Clusterfuzz20215 DISABLED_Clusterfuzz20215
 #define MAYBE_Clusterfuzz20292 DISABLED_Clusterfuzz20292
 #define MAYBE_Clusterfuzz21178 DISABLED_Clusterfuzz21178
 #define MAYBE_Clusterfuzz21890 DISABLED_Clusterfuzz21890
 #define MAYBE_Clusterfuzz23053 DISABLED_Clusterfuzz23053
 #define MAYBE_Clusterfuzz28338 DISABLED_Clusterfuzz28338
+#define MAYBE_Clusterfuzz28766 DISABLED_Clusterfuzz28766
 #else  // PERFETTO_DCHECK_IS_ON()
 #define MAYBE_Clusterfuzz20215 Clusterfuzz20215
 #define MAYBE_Clusterfuzz20292 Clusterfuzz20292
 #define MAYBE_Clusterfuzz21178 Clusterfuzz21178
 #define MAYBE_Clusterfuzz21890 Clusterfuzz21890
 #define MAYBE_Clusterfuzz23053 Clusterfuzz23053
 #define MAYBE_Clusterfuzz28338 Clusterfuzz28338
+#define MAYBE_Clusterfuzz28766 Clusterfuzz28766
 #endif  // PERFETTO_DCHECK_IS_ON()
 
 TEST_F(TraceProcessorIntegrationTest, MAYBE_Clusterfuzz20215) {
@@ -299,6 +301,10 @@ TEST_F(TraceProcessorIntegrationTest, MAYBE_Clusterfuzz28338) {
   ASSERT_TRUE(LoadTrace("clusterfuzz_28338", 4096).ok());
 }
 
+TEST_F(TraceProcessorIntegrationTest, MAYBE_Clusterfuzz28766) {
+  ASSERT_TRUE(LoadTrace("clusterfuzz_28766", 4096).ok());
+}
+
 TEST_F(TraceProcessorIntegrationTest, RestoreInitialTables) {
   ASSERT_TRUE(LoadTrace("android_sched_and_ps.pb").ok());
 
diff --git a/tools/install-build-deps b/tools/install-build-deps
index ee58f9d04..f17a8f0df 100755
--- a/tools/install-build-deps
+++ b/tools/install-build-deps
@@ -44,191 +44,191 @@ Dependency = namedtuple(
 # Dependencies required to build code on the host or when targeting desktop OS.
 BUILD_DEPS_HOST = [
     # GN. From https://chrome-infra-packages.appspot.com/dl/gn/gn/.
     # git_revision:83dad00afb232d7235dd70dff1ee90292d72a01e .
     Dependency(
         'buildtools/mac/gn',
         'https://storage.googleapis.com/perfetto/gn-mac-1695-83dad00a',
         '513d3adeb56b745e62af4e3ccb76b76f023c6aaa25d6a2be9a89e44cd10a4c1a',
         'darwin'),
     Dependency(
         'buildtools/linux64/gn',
         'https://storage.googleapis.com/perfetto/gn-linux64-1695-83dad00a',
         '4f589364153f182b05cd845e93407489d6ce8acc03290c897928a7bd22b20cce',
         'linux'),
     Dependency(
         'buildtools/win/gn.exe',
         'https://storage.googleapis.com/perfetto/gn-win-1695-83dad00a',
         '908c29556539292203d2952ebf55df03697cbc7cf526a3e295f31ba2576e4cac',
         'windows'),
 
     # clang-format
     # From https://chromium.googlesource.com/chromium/src/buildtools/+/refs/heads/master/mac/clang-format.sha1
     Dependency(
         'buildtools/mac/clang-format',
         'https://storage.googleapis.com/chromium-clang-format/62bde1baa7196ad9df969fc1f06b66360b1a927b',
         '6df686a937443cbe6efc013467a7ba5f98d3f187eb7765bb7abc6ce47626cf66',
         'darwin'),
     # From https://chromium.googlesource.com/chromium/src/buildtools/+/refs/heads/master/linux64/clang-format.sha1
     Dependency(
         'buildtools/linux64/clang-format',
         'https://storage.googleapis.com/chromium-clang-format/1baf0089e895c989a311b6a38ed94d0e8be4c0a7',
         'd02a97a87e8c28898033aaf5986967b24dc47ebd5b376e1cd93e5009f22cd75e',
         'linux'),
     # From https://chromium.googlesource.com/chromium/src/buildtools/+/refs/heads/master/win/clang-format.exe.sha1
     Dependency(
         'buildtools/win/clang-format.exe',
         'https://storage.googleapis.com/chromium-clang-format/d4afd4eba27022f5f6d518133aebde57281677c9',
         '2ba1b4d3ade90ea80316890b598ab5fc16777572be26afec6ce23117da121b80',
         'windows'),
 
     # Keep the SHA1 in sync with |clang_format_rev| in chromium //buildtools/DEPS.
     Dependency(
         'buildtools/clang_format/script',
         'https://chromium.googlesource.com/chromium/llvm-project/cfe/tools/clang-format.git',
         '96636aa0e9f047f17447f2d45a094d0b59ed7917', 'all'),
 
     # Ninja
     Dependency(
         'buildtools/mac/ninja',
         'https://storage.googleapis.com/perfetto/ninja-mac-c15b0698da038b2bd2e8970c14c75fadc06b1add',
         '4224b90734590b0148ad8ee63ee7b295e88e0652e4d1f4271ef2b91d880b0e19',
         'darwin'),
     Dependency(
         'buildtools/linux64/ninja',
         'https://storage.googleapis.com/perfetto/ninja-linux64-c866952bda50c29a669222477309287119bbb7e8',
         '54ac6a01362190aaabf4cf276f9c8982cdf11b225438940fdde3339be0f2ecdc',
         'linux'),
     Dependency(
         'buildtools/win/ninja.exe',
         'https://storage.googleapis.com/perfetto/ninja-win-4a5f05c24afef05ef03329a1bbfedee0678b524a',
         '6f8af488be74ed8787d04e107080d05330587a4198ba047bd5b7f5b0c3150d61',
         'windows'),
 
     # Keep in sync with Android's //external/googletest/README.version.
     Dependency(
         'buildtools/googletest',
         'https://android.googlesource.com/platform/external/googletest.git',
         '3f05f651ae3621db58468153e32016bc1397800b', 'all'),
 
     # Keep in sync with Chromium's //third_party/protobuf.
     Dependency(
         'buildtools/protobuf',
         'https://chromium.googlesource.com/external/github.com/google/protobuf.git',
         '6a59a2ad1f61d9696092f79b6d74368b4d7970a3',  # refs/tags/v3.9.0
         'all'),
 
     # libc++, libc++abi and libunwind for Linux where we need to rebuild the C++
     # lib from sources. Keep the SHA1s in sync with Chrome's src/buildtools/DEPS.
     Dependency(
         'buildtools/libcxx',
         'https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxx.git',
         'd9040c75cfea5928c804ab7c235fed06a63f743a', 'all'),
     Dependency(
         'buildtools/libcxxabi',
         'https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libcxxabi.git',
         '196ba1aaa8ac285d94f4ea8d9836390a45360533', 'all'),
     Dependency(
         'buildtools/libunwind',
         'https://chromium.googlesource.com/external/github.com/llvm/llvm-project/libunwind.git',
         'd999d54f4bca789543a2eb6c995af2d9b5a1f3ed', 'all'),
 
     # Keep the revision in sync with Chrome's PACKAGE_VERSION in
     # tools/clang/scripts/update.py.
     Dependency(
         'buildtools/clang.tgz',
         'https://commondatastorage.googleapis.com/chromium-browser-clang/Linux_x64/clang-llvmorg-12-init-5035-gd0abc757-3.tgz',
         'b0c3015209b6d624844ad230064eb5c9b4429a2eafd4854981e73217c563d93d',
         'linux'),
     Dependency(
         'buildtools/clang.tgz',
         'https://commondatastorage.googleapis.com/chromium-browser-clang/Win/clang-llvmorg-12-init-5035-gd0abc757-3.tgz',
         'b2854d871a466e3a060469b5edb24ca355ef64576d38778f64acbd3c6d7cf530',
         'windows'),
 
     # Keep in sync with chromium DEPS.
     Dependency(
         'buildtools/libfuzzer',
         'https://chromium.googlesource.com/chromium/llvm-project/compiler-rt/lib/fuzzer.git',
         'debe7d2d1982e540fbd6bd78604bf001753f9e74', 'linux'),
 
     # Benchmarking tool.
     Dependency(
         'buildtools/benchmark',
         'https://chromium.googlesource.com/external/github.com/google/benchmark.git',
         '090faecb454fbd6e6e17a75ef8146acb037118d4', 'all'),
 
     # Libbacktrace, for stacktraces in Linux/Android debug builds.
     # From https://github.com/ianlancetaylor/libbacktrace/archive/177940370e4a6b2509e92a0aaa9749184e64af43.zip
     Dependency(
         'buildtools/libbacktrace.zip',
         'https://storage.googleapis.com/perfetto/libbacktrace-177940370e4a6b2509e92a0aaa9749184e64af43.zip',
         '21ac9a4209f7aeef766c482be53a7fa365063c031c7077e2070b491202983b31',
         'all'),
 
     # Sqlite for the trace processing library.
     # This is the amalgamated source whose compiled output is meant to be faster.
     # We still pull the full source for the extensions (which are not available
     # in the amalgamation).
     Dependency(
         'buildtools/sqlite.zip',
         'https://storage.googleapis.com/perfetto/sqlite-amalgamation-3320300.zip',
         'e9cec01d4519e2d49b3810615237325263fe1feaceae390ee12b4a29bd73dbe2',
         'all'),
     Dependency(
         'buildtools/sqlite_src',
         'https://chromium.googlesource.com/external/github.com/sqlite/sqlite.git',
         'ee3686eb50c0e3dbb087c9a0976f7e37e1b014ae',  # refs/tags/version-3.32.3.
         'all'),
 
     # JsonCpp for legacy json import. Used only by the trace processor in
     # standalone builds.
     Dependency(
         'buildtools/jsoncpp',
         'https://chromium.googlesource.com/external/github.com/open-source-parsers/jsoncpp.git',
         '6aba23f4a8628d599a9ef7fa4811c4ff6e4070e2',  # refs/tags/1.9.3.
         'all'),
 
     # These dependencies are for libunwindstack, which is used by src/profiling.
     Dependency('buildtools/android-core',
                'https://android.googlesource.com/platform/system/core.git',
                '9e6cef7f07d8c11b3ea820938aeb7ff2e9dbaa52', 'all'),
     Dependency('buildtools/android-unwinding',
                'https://android.googlesource.com/platform/system/unwinding.git',
                'a449157de3531a05c138bfac2894e4831c869f6b', 'all'),
     Dependency('buildtools/android-logging',
                'https://android.googlesource.com/platform/system/logging.git',
                '7b36b566c9113fc703d68f76e8f40c0c2432481c', 'all'),
     Dependency('buildtools/android-libbase',
                'https://android.googlesource.com/platform/system/libbase.git',
                '78f1c2f83e625bdf66d55b48bdb3a301c20d2fb3', 'all'),
     Dependency('buildtools/android-libprocinfo',
                'https://android.googlesource.com/platform/system/libprocinfo.git',
                'bd752195f52109fb0dca525236ab9dec74b986e1', 'all'),
     Dependency('buildtools/lzma',
                'https://android.googlesource.com/platform/external/lzma.git',
                '7851dce6f4ca17f5caa1c93a4e0a45686b1d56c3', 'all'),
     Dependency('buildtools/zlib',
                'https://android.googlesource.com/platform/external/zlib.git',
                '5c85a2da4c13eda07f69d81a1579a5afddd35f59', 'all'),
     Dependency('buildtools/bionic',
                'https://android.googlesource.com/platform/bionic.git',
                'a60488109cda997dfd83832731c8527feaa2825e', 'all'),
 
     # Example traces for regression tests.
     Dependency(
         'buildtools/test_data.zip',
-        'https://storage.googleapis.com/perfetto/test-data-20201207-131703.zip',
-        '2c894eee8e19cb3247dd0aff14e7c4b14c09c305988e901f852fb004ea2e6716',
+        'https://storage.googleapis.com/perfetto/test-data-20201221-112454.zip',
+        'bdb45847b3bfc3f12f10be69e669187e114944ca1ea386a455b0f31d3b1b2c1c',
         'all',
     ),
 
     # Linenoise, used only by trace_processor in standalone builds.
     Dependency('buildtools/linenoise',
                'https://fuchsia.googlesource.com/third_party/linenoise.git',
                'c894b9e59f02203dbe4e2be657572cf88c4230c3', 'all'),
 ]
 
 # Dependencies required to build Android code.
 # URLs and SHA1s taken from:
 # - https://dl.google.com/android/repository/repository-11.xml
 # - https://dl.google.com/android/repository/sys-img/android/sys-img.xml
