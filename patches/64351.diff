commit 00a00aa5dbdf0a6c444fe7294494f53542a6ec31
Merge: 8d116b1800 e5d60f0c46
Author: Bart Van Assche <bvanassche@acm.org>
Date:   Thu Nov 23 14:13:45 2023 -0800

    Merge branch 'V5-9-patches'
    
    * V5-9-patches:
      DISMAN-EVENT-MIB: Initialize 'name' and 'name_buf'

diff --git a/agent/mibgroup/disman/event/mteTriggerConf.c b/agent/mibgroup/disman/event/mteTriggerConf.c
index 64482fb4a9..d51a796ad2 100644
--- a/agent/mibgroup/disman/event/mteTriggerConf.c
+++ b/agent/mibgroup/disman/event/mteTriggerConf.c
@@ -147,586 +147,586 @@ void
 parse_mteMonitor(const char *token, const char *line)
 {
     char   buf[  SPRINT_MAX_LEN];
     char   tname[MTE_STR1_LEN+1];
     const char  *cp;
     long   test = 0;
 
     char   ename[MTE_STR1_LEN+1];
     long   flags = MTE_TRIGGER_FLAG_ENABLED |
                    MTE_TRIGGER_FLAG_ACTIVE  |
                    MTE_TRIGGER_FLAG_FIXED   |
                    MTE_TRIGGER_FLAG_VWILD   |
                    MTE_TRIGGER_FLAG_SYSUPT  |
                    MTE_TRIGGER_FLAG_VALID;
     long   idx     = 0;
     long   startup = 1;    /* ??? or 0 */
     long   repeat  = 600;
     netsnmp_session *sess = NULL;
 
     int    seen_name = 0;
     char   oid_name_buf[SPRINT_MAX_LEN];
-    oid    name_buf[MAX_OID_LEN];
-    size_t name_buf_len;
+    oid    name_buf[MAX_OID_LEN] = { };
+    size_t name_buf_len = 0;
     u_char op    = 0;
     long   value = 0;
 
     struct mteObject  *object;
     struct mteTrigger *entry;
 
     DEBUGMSGTL(("disman:event:conf", "Parsing disman monitor config (%s)\n", line));
 
     /*
      * Before parsing the configuration fully, first
      * skim through the config line in order to:
      *   a) locate the name for the trigger, and
      *   b) identify the type of trigger test
      *
      * This information will be used both for creating the trigger
      *  entry, and registering any additional payload objects.
      */
     memset( buf,   0, sizeof(buf));
     memset( tname, 0, sizeof(tname));
     memset( ename, 0, sizeof(ename));
     for (cp = copy_nword_const(line, buf, SPRINT_MAX_LEN);
          ;
          cp = copy_nword_const(cp,   buf, SPRINT_MAX_LEN)) {
 
         if ( buf[0] == '-' ) {
             switch (buf[1]) {
             case 't':
                 /* No longer necessary */
                 break;
             case 'd':
             case 'e':
             case 'o':
             case 'r':
             case 'u':
                 /* skip option parameter */
                 cp = skip_token_const( cp );
                 break;
             case 'D':
             case 'I':
             case 's':
             case 'S':
                 /* flag options */
                 break;
             case 'i':
                 /*
                  * '-i' can act as a flag or take a parameter.
                  *      Handle either case.
                  */
                 if (cp && *cp != '-')
                     cp = skip_token_const( cp );
                 break;
             case '0':
             case '1':
             case '2':
             case '3':
             case '4':
             case '5':
             case '6':
             case '7':
             case '8':
             case '9':
                 /* accept negative values */
             case '\0':
                 /* and '-' placeholder value */
                 break;
             default:
                 config_perror("unrecognised option");
                 return;
             }
         } else {
             /*
              * Save the first non-option parameter as the trigger name.
              *
              * This name will also be used to register entries in the
              *    mteObjectsTable, so insert a distinguishing prefix.
              * This will ensure combined trigger entries don't clash with
              *    each other, or with a similarly-named notification event.
              */
             if ( !tname[0] ) {
                 tname[0] = '_';
                 tname[1] = '_';   /* Placeholder */
                 memcpy( tname+2, buf, MTE_STR1_LEN-2 );
             } else {
                 /*
                  * This marks the beginning of the monitor expression,
                  *   so we don't need to scan any further
                  */
                 break;
             }
         }
         if (!cp)
             break;
     }
 
     /*
      * Now let's examine the expression to determine the type of
      *   monitor being configured.  There are four possible forms:
      *     != OID  (or ! OID)     (existence test)
      *        OID                 (existence test)
      *        OID  op  VALUE      (boolean   test)
      *        OID  MIN MAX        (threshold test)
      */
     if ( *buf == '!' ) {
        /*
         * If the expression starts with '!=' or '!', then
         *  it must be the first style of existence test.
         */
        test = MTE_TRIGGER_EXISTENCE;
     } else {
        /*
         * Otherwise the first token is the OID to be monitored.
         *   Skip it and look at the next token (if any).
         */
         cp = copy_nword_const(cp,   buf, SPRINT_MAX_LEN);
         if (cp) {
             /*
              * If this is a numeric value, then it'll be the MIN
              *   field of a threshold test (the fourth form)
              * Otherwise it'll be the operation field of a
              *   boolean test (the third form)
              */
             if ( isdigit((unsigned char)(buf[0])) || buf[0] == '-' )
                 test = MTE_TRIGGER_THRESHOLD;
             else
                 test = MTE_TRIGGER_BOOLEAN;
         } else {
             /*
              * If there isn't a "next token", then this
              *   must be the second style of existence test.
              */
             test = MTE_TRIGGER_EXISTENCE;
         }
     }
 
     /*
      * Use the type of trigger test to update the trigger name buffer
      */
     switch (test) {
     case MTE_TRIGGER_BOOLEAN:
         tname[1] = 'B'; break;
     case MTE_TRIGGER_THRESHOLD:
         tname[1] = 'T'; break;
     case MTE_TRIGGER_EXISTENCE:
         tname[1] = 'X'; break;
     }
     
  
     
     /*
      * Now start parsing again at the beginning of the directive,
      *   extracting the various options...
      */
     for (cp = copy_nword_const(line, buf, SPRINT_MAX_LEN);
          ;
          cp = copy_nword_const(cp,   buf, SPRINT_MAX_LEN)) {
 
         if (buf[0] == '-' ) {
             switch (buf[1]) {
             case 'D':   /* delta sample value */
                 flags |= MTE_TRIGGER_FLAG_DELTA;
                 break;
 
             case 'd':   /* discontinuity OID (implies delta sample) */
                 flags |= MTE_TRIGGER_FLAG_DELTA;
                 if (buf[2] != 'i')
                     flags |= MTE_TRIGGER_FLAG_DWILD;
                 memset( oid_name_buf, 0, sizeof(oid_name_buf));
                 memset(     name_buf, 0, sizeof(    name_buf));
                 name_buf_len = MAX_OID_LEN;
                 cp = copy_nword_const(cp, oid_name_buf, MTE_STR1_LEN);
                 if (!snmp_parse_oid(oid_name_buf, name_buf, &name_buf_len)) {
                     snmp_log(LOG_ERR, "discontinuity OID: %s\n", oid_name_buf);
                     config_perror("unknown discontinuity OID");
                     mteObjects_removeEntries( "snmpd.conf", tname );
                     return;
                 }
                 if ( snmp_oid_compare( name_buf, name_buf_len,
                                        _sysUpTime_instance,
                                        _sysUpTime_inst_len) != 0 )
                     flags &= ~MTE_TRIGGER_FLAG_SYSUPT;
                 break;
     
             case 'e':   /*  event */
                 cp     = copy_nword_const(cp, ename, MTE_STR1_LEN);
                 break;
     
             case 'I':   /* value instance */
                 flags &= ~MTE_TRIGGER_FLAG_VWILD;
                 break;
     
                         /*
                          * "instance" flag:
                          *     either non-wildcarded mteTriggerValueID
                          *       (backwards compatibility - see '-I')
                          *     or exact payload OID
                          *       (c.f. notificationEvent config)
                          */
             case 'i':
                 if ( *cp == '-' ) {
                     /* Backwards compatibility - now '-I' */
                     flags &= ~MTE_TRIGGER_FLAG_VWILD;
                     continue;
                 }
                 idx++;
                 cp     = copy_nword_const(cp, buf, SPRINT_MAX_LEN);
                 object = mteObjects_addOID( "snmpd.conf", tname, idx, buf, 0 );
                 if (!object) {
                     snmp_log(LOG_ERR, "Unknown payload OID: %s\n", buf);
                     config_perror("Unknown payload OID");
                     mteObjects_removeEntries( "snmpd.conf", tname );
                 } else
                     idx = object->mteOIndex;
                 break;
     
             case 'o':   /*  object  */
                 idx++;
                 cp     = copy_nword_const(cp, buf, SPRINT_MAX_LEN);
                 object = mteObjects_addOID( "snmpd.conf", tname, idx, buf, 1 );
                 if (!object) {
                     snmp_log(LOG_ERR, "Unknown payload OID: %s\n", buf);
                     config_perror("Unknown payload OID");
                     mteObjects_removeEntries( "snmpd.conf", tname );
                 } else
                     idx = object->mteOIndex;
                 break;
     
             case 'r':   /*  repeat frequency */
                 cp     = copy_nword_const(cp, buf, SPRINT_MAX_LEN);
                 repeat = strtoul(buf, NULL, 0);
                 break;
     
             case 'S':   /* disable startup tests */
                 startup = 0;
                 break;
 
             case 's':   /* enable startup tests (default?) */
                 startup = 1;
                 break;
 
             case 't':   /* threshold test - already handled */
                 break;
     
             case 'u':   /*  user */
                 cp     = copy_nword_const(cp, buf, SPRINT_MAX_LEN);
                 sess   = netsnmp_iquery_user_session(buf);
                 if (NULL == sess) {
                     snmp_log(LOG_ERR, "user name %s not found\n", buf);
                     config_perror("Unknown user name\n");
                     mteObjects_removeEntries( "snmpd.conf", tname );
                     return;
                 }
                 break;
             }
         } else {
             /*
              * Skip the first non-option token - the trigger
              *  name (which has already been processed earlier).
              */
             if ( !seen_name ) {
                 seen_name = 1;
             } else {
                 /*
                  * But the next non-option token encountered will
                  *  mark the start of the expression to be monitored.
                  *
                  * There are three possible expression formats:
                  *      [op] OID               (existence tests)
                  *      OID op value           (boolean tests)
                  *      OID val val [val val]  (threshold tests)
                  * 
                  * Extract the OID, operation and (first) value.
                  */
                 switch ( test ) {
                 case MTE_TRIGGER_EXISTENCE:
                     /*
                      * Identify the existence operator (if any)...
                      */
                     op = MTE_EXIST_PRESENT;
                     if (buf[0] == '!') {
                        if (buf[1] == '=') {
                            op = MTE_EXIST_CHANGED;
                        } else {
                            op = MTE_EXIST_ABSENT;
                        }
                        cp = copy_nword_const(cp, buf, SPRINT_MAX_LEN);
                     }
                     /*
                      * ... then extract the monitored OID.
                      *     (ignoring anything that remains)
                      */
                     memcpy(oid_name_buf, buf, SPRINT_MAX_LEN);
                     cp = NULL;  /* To terminate the processing loop */
                     DEBUGMSGTL(("disman:event:conf", "%s: Exist (%s, %d)\n",
                                                      tname, oid_name_buf, op));
                     break;
     
                 case MTE_TRIGGER_BOOLEAN:
                     /*
                      * Extract the monitored OID, and 
                      *   identify the boolean operator ...
                      */
                     memcpy(oid_name_buf, buf, SPRINT_MAX_LEN);
                     cp = copy_nword_const(cp, buf, SPRINT_MAX_LEN);
                     if (buf[0] == '!') {
                        op = MTE_BOOL_UNEQUAL;
                     } else if (buf[0] == '=') {
                        op = MTE_BOOL_EQUAL;
                     } else if (buf[0] == '<') {
                        if (buf[1] == '=') {
                            op = MTE_BOOL_LESSEQUAL;
                        } else {
                            op = MTE_BOOL_LESS;
                        }
                     } else if (buf[0] == '>') {
                        if (buf[1] == '=') {
                            op = MTE_BOOL_GREATEREQUAL;
                        } else {
                            op = MTE_BOOL_GREATER;
                        }
                     }
                     /*
                      * ... then extract the comparison value.
                      *     (ignoring anything that remains)
                      */
                     cp    = copy_nword_const(cp, buf, SPRINT_MAX_LEN);
                     value = strtol(buf, NULL, 0);
                     cp = NULL;  /* To terminate the processing loop */
                     DEBUGMSGTL(("disman:event:conf", "%s: Bool (%s, %d, %ld)\n",
                                               tname, oid_name_buf, op, value));
                     break;
     
                 case MTE_TRIGGER_THRESHOLD:
                     /*
                      * Extract the monitored OID, and 
                      *   the first comparison value...
                      */
                     memcpy(oid_name_buf, buf, SPRINT_MAX_LEN);
                     memset(         buf,   0, SPRINT_MAX_LEN);
                     cp  = copy_nword_const(cp, buf, SPRINT_MAX_LEN);
                     value = strtol(buf, NULL, 0);
     
                     /*
                      * ... then save the rest of the line for later.
                      */
                     strlcpy(buf, cp, sizeof(buf));
                     cp = NULL;  /* To terminate the processing loop */
                     DEBUGMSGTL(("disman:event:conf", "%s: Thresh (%s, %ld, %s)\n",
                                               tname, oid_name_buf, value, buf));
                     break;
                 }
             }
         }
         if (!cp)
             break;
     }
 
     if (NULL == sess) {
         sess = netsnmp_query_get_default_session();
         if (NULL == sess) {
             config_perror
                 ("You must specify a default user name using the agentSecName token\n");
             mteObjects_removeEntries( "snmpd.conf", tname );
             return;
         }
     }
 
     /*
      *  ... and then create the new trigger entry...
      */
     entry = _find_typed_mteTrigger_entry( "snmpd.conf", tname+2, test );
     if (!entry) {
         /* mteObjects_removeEntries( "snmpd.conf", tname ); */
         return;
     }
 
     /*
      *  ... populate the type-independent fields...
      *     (setting the delta discontinuity OID first)
      */
     if ( (flags & MTE_TRIGGER_FLAG_DELTA) &&
         !(flags & MTE_TRIGGER_FLAG_SYSUPT)) {
         memset( entry->mteDeltaDiscontID, 0, sizeof(entry->mteDeltaDiscontID));
         memcpy( entry->mteDeltaDiscontID, name_buf, name_buf_len*sizeof(oid));
         entry->mteDeltaDiscontID_len = name_buf_len;
     }
     name_buf_len = MAX_OID_LEN;
     if (!snmp_parse_oid(oid_name_buf, name_buf, &name_buf_len)) {
         snmp_log(LOG_ERR, "trigger OID: %s\n", oid_name_buf);
         config_perror("unknown monitor OID");
         mteObjects_removeEntries( "snmpd.conf", tname );
         return;
     }
     entry->session               = sess;
     entry->flags                |= flags;
     entry->mteTriggerTest       |= test;
     entry->mteTriggerFrequency   = repeat;
     entry->mteTriggerValueID_len = name_buf_len;
     memcpy(entry->mteTriggerValueID, name_buf, name_buf_len*sizeof(oid));
 
     /*
      * ... and the relevant test-specific fields.
      */
     switch (test) {
     case MTE_TRIGGER_EXISTENCE:
         entry->mteTExTest = op;
         if (op != MTE_EXIST_CHANGED && startup)
             entry->mteTExStartup = op;
         if ( idx > 0 ) {
             /*
              * Refer to the objects for this trigger (if any)...
              */
             memset(entry->mteTExObjOwner, 0,     MTE_STR1_LEN+1);
             memcpy(entry->mteTExObjOwner, "snmpd.conf",      10);
             memcpy(entry->mteTExObjects,  tname, MTE_STR1_LEN+1);
         }
         if ( ename[0] ) {
             /*
              * ... and the specified event...
              */
             memset(entry->mteTExEvOwner,  0,     MTE_STR1_LEN+1);
             if ( ename[0] == '_' )
                 memcpy(entry->mteTExEvOwner,  "_snmpd",       6);
             else
                 memcpy(entry->mteTExEvOwner,  "snmpd.conf",  10);
             memcpy(entry->mteTExEvent,    ename, MTE_STR1_LEN+1);
         } else {
             /*
              * ... or the hardcoded default event.
              */
             memset(entry->mteTExEvOwner,  0,     MTE_STR1_LEN+1);
             memset(entry->mteTExEvent,    0,     MTE_STR1_LEN+1);
             memcpy(entry->mteTExEvOwner,  "_snmpd",           6);
             memcpy(entry->mteTExEvent,    "_mteTriggerFired", 16);
         }
         break;
     case MTE_TRIGGER_BOOLEAN:
         entry->mteTBoolComparison = op;
         entry->mteTBoolValue      = value;
         if (!startup)
             entry->flags &= ~MTE_TRIGGER_FLAG_BSTART;
         if ( idx > 0 ) {
             /*
              * Refer to the objects for this trigger (if any)...
              */
             memset(entry->mteTBoolObjOwner, 0,     MTE_STR1_LEN+1);
             memcpy(entry->mteTBoolObjOwner, "snmpd.conf",      10);
             memcpy(entry->mteTBoolObjects,  tname, MTE_STR1_LEN+1);
         }
         if ( ename[0] ) {
             /*
              * ... and the specified event...
              */
             memset(entry->mteTBoolEvOwner,  0,     MTE_STR1_LEN+1);
             if ( ename[0] == '_' )
                 memcpy(entry->mteTBoolEvOwner,  "_snmpd",       6);
             else
                 memcpy(entry->mteTBoolEvOwner,  "snmpd.conf",  10);
             memcpy(entry->mteTBoolEvent,    ename, MTE_STR1_LEN+1);
         } else {
             /*
              * ... or the hardcoded default event.
              */
             memset(entry->mteTBoolEvOwner,  0,     MTE_STR1_LEN+1);
             memset(entry->mteTBoolEvent,    0,     MTE_STR1_LEN+1);
             memcpy(entry->mteTBoolEvOwner,  "_snmpd",           6);
             memcpy(entry->mteTBoolEvent,    "_mteTriggerFired", 16);
         }
         break;
     case MTE_TRIGGER_THRESHOLD:
             entry->mteTThFallValue  = value;
             value = strtol(buf, NULL, 0);
             entry->mteTThRiseValue  = value;
             if (!startup)
                 entry->mteTThStartup = 0;
             if ( idx > 0 ) {
                 /*
                  * Refer to the objects for this trigger (if any)...
                  */
                 memset(entry->mteTThObjOwner,   0,     MTE_STR1_LEN+1);
                 memcpy(entry->mteTThObjOwner,   "snmpd.conf",      10);
                 memcpy(entry->mteTThObjects,    tname, MTE_STR1_LEN+1);
             }
             if ( ename[0] ) {
                 /*
                  * ... and the specified event...
                  *  (using the same event for all triggers)
                  */
                 memset(entry->mteTThRiseOwner,  0,     MTE_STR1_LEN+1);
                 if ( ename[0] == '_' )
                     memcpy(entry->mteTThRiseOwner,  "_snmpd",       6);
                 else
                     memcpy(entry->mteTThRiseOwner,  "snmpd.conf",  10);
                 memcpy(entry->mteTThRiseEvent,  ename, MTE_STR1_LEN+1);
                 memset(entry->mteTThFallOwner,  0,     MTE_STR1_LEN+1);
                 if ( ename[0] == '_' )
                     memcpy(entry->mteTThFallOwner,  "_snmpd",       6);
                 else
                     memcpy(entry->mteTThFallOwner,  "snmpd.conf",  10);
                 memcpy(entry->mteTThFallEvent,  ename, MTE_STR1_LEN+1);
             } else {
                 /*
                  * ... or the hardcoded default events.
                  */
                 memset(entry->mteTThRiseOwner,  0,     MTE_STR1_LEN+1);
                 memset(entry->mteTThFallOwner,  0,     MTE_STR1_LEN+1);
                 memset(entry->mteTThRiseEvent,  0,     MTE_STR1_LEN+1);
                 memset(entry->mteTThFallEvent,  0,     MTE_STR1_LEN+1);
                 memcpy(entry->mteTThRiseOwner,  "_snmpd",           6);
                 memcpy(entry->mteTThFallOwner,  "_snmpd",           6);
                 memcpy(entry->mteTThRiseEvent,  "_mteTriggerRising", 17);
                 memcpy(entry->mteTThFallEvent,  "_mteTriggerFalling", 18);
             }
             cp = skip_token(buf);   /* skip riseThreshold value */
 
         /*
          * Parse and set (optional) Delta thresholds & events
          */
         if ( cp && *cp != '\0' ) {
             if (entry->flags & MTE_TRIGGER_FLAG_DELTA) {
                 config_perror("Delta-threshold on delta-samples not supported");
                 mteObjects_removeEntries( "snmpd.conf", tname );
                 return;
             }
             value = strtol(cp, NULL, 0);
             entry->mteTThDFallValue  = value;
             cp = skip_token_const(cp);
             value = strtol(cp, NULL, 0);
             entry->mteTThDRiseValue  = value;
             /*
              * Set the events in the same way as before
              */
             if ( ename[0] ) {
                 memset(entry->mteTThDRiseOwner,  0,     MTE_STR1_LEN+1);
                 if ( ename[0] == '_' )
                     memcpy(entry->mteTThDRiseOwner,  "_snmpd",       6);
                 else
                     memcpy(entry->mteTThDRiseOwner,  "snmpd.conf",  10);
                 memcpy(entry->mteTThDRiseEvent,  ename, MTE_STR1_LEN+1);
                 memset(entry->mteTThDFallOwner,  0,     MTE_STR1_LEN+1);
                 if ( ename[0] == '_' )
                     memcpy(entry->mteTThDFallOwner,  "_snmpd",       6);
                 else
                     memcpy(entry->mteTThDFallOwner,  "snmpd.conf",  10);
                 memcpy(entry->mteTThDFallEvent,  ename, MTE_STR1_LEN+1);
             } else {
                 memset(entry->mteTThDRiseOwner,  0,     MTE_STR1_LEN+1);
                 memset(entry->mteTThDFallOwner,  0,     MTE_STR1_LEN+1);
                 memset(entry->mteTThDRiseEvent,  0,     MTE_STR1_LEN+1);
                 memset(entry->mteTThDFallEvent,  0,     MTE_STR1_LEN+1);
                 memcpy(entry->mteTThDRiseOwner,  "_snmpd",           6);
                 memcpy(entry->mteTThDFallOwner,  "_snmpd",           6);
                 memcpy(entry->mteTThDRiseEvent,  "_mteTriggerRising", 17);
                 memcpy(entry->mteTThDFallEvent,  "_mteTriggerFalling", 18);
             }
         }
  
         break;
     }
     snmp_register_callback(SNMP_CALLBACK_LIBRARY, 
                            SNMP_CALLBACK_POST_READ_CONFIG,
                            _mteTrigger_callback_enable, entry );
     return;
 }
