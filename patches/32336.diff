commit e670bb4036fd7c840b1c206b8739f292346b1aa9
Author: Nathan Moinvaziri <nathan@nathanm.com>
Date:   Sun Apr 11 08:25:10 2021 -0700

    Added maximum block size to prevent context tmp buffer from overflowing in 4 * ebsize calculation. Maximum size is 512mb - 4k which is closest in value to (INT32_MAX / 4) - (BLOSC_MAX_TYPESIZE * sizeof(int32_t)). This allows 32-bit apps to allocate enough memory without tmp_nbytes overflowing during context creation.

diff --git a/blosc/blosc2.c b/blosc/blosc2.c
index 235a0d5a..c126142a 100644
--- a/blosc/blosc2.c
+++ b/blosc/blosc2.c
@@ -668,75 +668,79 @@ typedef struct blosc_header_s {
 int blosc_read_header(const uint8_t* src, int32_t srcsize, bool extended_header, blosc_header* header)
 {
   memset(header, 0, sizeof(blosc_header));
 
   if (srcsize < BLOSC_MIN_HEADER_LENGTH) {
     BLOSC_TRACE_ERROR("Not enough space to read Blosc header.");
     return BLOSC2_ERROR_READ_BUFFER;
   }
 
   memcpy(header, src, BLOSC_MIN_HEADER_LENGTH);
 
   bool little_endian = is_little_endian();
 
   if (!little_endian) {
     header->nbytes = bswap32_(header->nbytes);
     header->blocksize = bswap32_(header->blocksize);
     header->cbytes = bswap32_(header->cbytes);
   }
 
   if (header->version > BLOSC_VERSION_FORMAT) {
     /* Version from future */
     return BLOSC2_ERROR_VERSION_SUPPORT;
   }
   if (header->cbytes < BLOSC_MIN_HEADER_LENGTH) {
     BLOSC_TRACE_ERROR("`cbytes` is too small to read min header.");
     return BLOSC2_ERROR_INVALID_HEADER;
   }
   if (header->blocksize <= 0 || header->blocksize > header->nbytes) {
     BLOSC_TRACE_ERROR("`blocksize` is zero or greater than uncompressed size");
     return BLOSC2_ERROR_INVALID_HEADER;
   }
+  if (header->blocksize > BLOSC2_MAXBLOCKSIZE) {
+    BLOSC_TRACE_ERROR("`blocksize` greater than maximum allowed");
+    return BLOSC2_ERROR_INVALID_HEADER;
+  }
   if (header->typesize <= 0 || header->typesize > BLOSC_MAX_TYPESIZE) {
     BLOSC_TRACE_ERROR("`typesize` is zero or greater than max allowed.");
     return BLOSC2_ERROR_INVALID_HEADER;
   }
 
   /* Read extended header if it is wanted */
   if ((extended_header) && (header->flags & BLOSC_DOSHUFFLE) && (header->flags & BLOSC_DOBITSHUFFLE)) {
     if (header->cbytes < BLOSC_EXTENDED_HEADER_LENGTH) {
       BLOSC_TRACE_ERROR("`cbytes` is too small to read extended header.");
       return BLOSC2_ERROR_INVALID_HEADER;
     }
     if (srcsize < BLOSC_EXTENDED_HEADER_LENGTH) {
       BLOSC_TRACE_ERROR("Not enough space to read Blosc extended header.");
       return BLOSC2_ERROR_READ_BUFFER;
     }
 
     memcpy((uint8_t *)header + BLOSC_MIN_HEADER_LENGTH, src + BLOSC_MIN_HEADER_LENGTH,
       BLOSC_EXTENDED_HEADER_LENGTH - BLOSC_MIN_HEADER_LENGTH);
 
     int32_t runlen_type = (header->blosc2_flags >> 4) & BLOSC2_RUNLEN_MASK;
     if (runlen_type != 0) {
       if (header->nbytes % header->typesize != 0) {
         BLOSC_TRACE_ERROR("`nbytes` is not a multiple of typesize");
         return BLOSC2_ERROR_INVALID_HEADER;
       }
       if (runlen_type == BLOSC2_VALUE_RUNLEN) {
         if (header->cbytes < BLOSC_EXTENDED_HEADER_LENGTH + header->typesize) {
           BLOSC_TRACE_ERROR("`cbytes` is too small for run length encoding");
           return BLOSC2_ERROR_READ_BUFFER;
         }
       }
     }
     // The number of filters depends on the version of the header. Blosc2 alpha series
     // did not initialize filters to zero beyond the max supported.
     if (header->version == BLOSC2_VERSION_FORMAT_ALPHA) {
       header->filter_codes[5] = 0;
       header->filter_meta[5] = 0;
     }
   }
   else {
     flags_to_filters(header->flags, header->filter_codes);
   }
   return 0;
 }
diff --git a/blosc/blosc2.h b/blosc/blosc2.h
index c14be23f..49a33321 100644
--- a/blosc/blosc2.h
+++ b/blosc/blosc2.h
@@ -139,10 +139,11 @@ enum {
 /**
  * @brief Values for different Blosc2 capabilities
  */
 enum {
   BLOSC2_MAXDICTSIZE = 128 * 1024, //!< maximum size for compression dicts
+  BLOSC2_MAXBLOCKSIZE = 536866816  //!< maximum size for blocks
 };
 
 /**
  * @brief Codes for the different compressors shipped with Blosc
  */
