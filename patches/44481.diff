commit 8bd75b4e2dfcb229e5121c3e45e5d284bf0d0477
Author: Reini Urban <rurban@cpan.org>
Date:   Sat Apr 16 11:56:00 2022 +0200

    preR13: fix TV BS, special-case free by fixedtype
    
    not type

diff --git a/src/bits.c b/src/bits.c
index 6aae4b41..bff15b81 100644
--- a/src/bits.c
+++ b/src/bits.c
@@ -1544,30 +1544,33 @@ BITCODE_TV
 bit_read_TV (Bit_Chain *restrict dat)
 {
   unsigned int i;
   unsigned int length;
   unsigned char *chain;
 
   CHK_OVERFLOW_PLUS (1,__FUNCTION__,NULL)
-  length = bit_read_BS (dat);
+  if (dat->from_version < R_13)
+    length = bit_read_RS (dat);
+  else
+    length = bit_read_BS (dat);
   CHK_OVERFLOW_PLUS (length,__FUNCTION__,NULL)
   chain = (unsigned char *)malloc (length + 1);
   if (!chain)
     {
       loglevel = dat->opts & DWG_OPTS_LOGLEVEL;
       LOG_ERROR ("Out of memory");
       return NULL;
     }
   for (i = 0; i < length; i++)
     chain[i] = bit_read_RC (dat);
   // check if the string is already zero-terminated or not.
   // only observed >=r2004 as writer app
   if (length > 0 && dat->from_version > R_2000 && chain[length - 1] != '\0')
     LOG_HANDLE ("TV-not-ZERO %u\n ", length)
   else if (length > 0 && dat->from_version <= R_2000 && chain[length - 1] == '\0')
     LOG_HANDLE ("TV-ZERO %u\n", length)
   // normally not needed, as the DWG since r2004 itself contains the ending \0 as last char
   chain[i] = '\0';
   return (char *)chain;
 }
 
 // Usage: hex(c >> 4), hex(c & 0xf)
@@ -1833,10 +1836,13 @@ void
 bit_write_TV (Bit_Chain *restrict dat, BITCODE_TV restrict chain)
 {
   int i;
   int length = (chain && *chain) ? strlen ((const char *)chain) : 0;
   if (dat->version <= R_2000 && length)
     length++;
-  bit_write_BS (dat, length);
+  if (dat->from_version < R_13)
+    bit_write_RS (dat, length);
+  else
+    bit_write_BS (dat, length);
   for (i = 0; i < length; i++)
     bit_write_RC (dat, (unsigned char)chain[i]);
 }
diff --git a/src/free.c b/src/free.c
index 61d7b993..38720ad8 100644
--- a/src/free.c
+++ b/src/free.c
@@ -560,324 +560,500 @@ int dwg_free_variable_type (Dwg_Data *restrict dwg, Dwg_Object *restrict obj)
 /* returns error */
 int dwg_free_variable_type_private (Dwg_Object *restrict obj)
 {
   Dwg_Data *restrict dwg = obj->parent;
   Bit_Chain *dat = &pdat;
 
 #undef DWG_ENTITY
 #undef DWG_OBJECT
 #define FREE_NOCLASS(name) case DWG_TYPE_##name: return dwg_free_##name##_private (dat, dat, dat, obj);
 #define DWG_ENTITY(name) FREE_NOCLASS (name)
 #define DWG_OBJECT(name) FREE_NOCLASS (name)
 
   switch (obj->fixedtype)
     {
     #include "objects.inc"
 
     case DWG_TYPE_FREED: break; // already freed
     case DWG_TYPE_UNUSED:
     case DWG_TYPE_ACDSRECORD:
     case DWG_TYPE_ACDSSCHEMA:
     case DWG_TYPE_NPOCOLLECTION:
     case DWG_TYPE_XREFPANELOBJECT:
     default: LOG_ERROR ("Unhandled class %s, fixedtype %d in objects.inc",
                         dwg_type_name (obj->fixedtype), (int)obj->fixedtype);
     }
 
 #undef DWG_ENTITY
 #undef DWG_OBJECT
 #undef FREE_NOCLASS
 
   return DWG_ERR_UNHANDLEDCLASS;
 }
 
+static void
+free_preR13_object (Dwg_Object *obj)
+{
+  int error = 0;
+  long unsigned int j;
+  Dwg_Data *dwg;
+  Bit_Chain *dat = &pdat;
+
+  if (obj && obj->parent)
+    {
+      dwg = obj->parent;
+      dat->version = dwg->header.version;
+      dat->from_version = dwg->header.from_version;
+    }
+  else
+    return;
+  if (obj->type == DWG_TYPE_FREED || obj->tio.object == NULL)
+    return;
+
+  switch (obj->fixedtype)
+    {
+    case DWG_TYPE_TEXT:
+      dwg_free_TEXT_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_ATTRIB:
+      dwg_free_ATTRIB_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_ATTDEF:
+      dwg_free_ATTDEF_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_BLOCK:
+      dwg_free_BLOCK_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_ENDBLK:
+      dwg_free_ENDBLK_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_SEQEND:
+      dwg_free_SEQEND_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_REPEAT:
+      dwg_free_REPEAT_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_ENDREP:
+      dwg_free_ENDREP_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_INSERT:
+      dwg_free_INSERT_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_VERTEX_2D:
+      dwg_free_VERTEX_2D_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_POLYLINE_2D:
+      dwg_free_POLYLINE_2D_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_ARC:
+      dwg_free_ARC_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_CIRCLE:
+      dwg_free_CIRCLE_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_LINE:
+      dwg_free_LINE_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_DIMENSION_ORDINATE:
+      dwg_free_DIMENSION_ORDINATE_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_DIMENSION_LINEAR:
+      dwg_free_DIMENSION_LINEAR_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_DIMENSION_ALIGNED:
+      dwg_free_DIMENSION_ALIGNED_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_DIMENSION_ANG3PT:
+      dwg_free_DIMENSION_ANG3PT_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_DIMENSION_ANG2LN:
+      dwg_free_DIMENSION_ANG2LN_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_DIMENSION_RADIUS:
+      dwg_free_DIMENSION_RADIUS_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_DIMENSION_DIAMETER:
+      dwg_free_DIMENSION_DIAMETER_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_POINT:
+      dwg_free_POINT_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE__3DFACE:
+      dwg_free__3DFACE_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE__3DLINE:
+      dwg_free__3DLINE_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_SOLID:
+      dwg_free_SOLID_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_TRACE:
+      dwg_free_TRACE_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_SHAPE:
+      dwg_free_SHAPE_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_VIEWPORT:
+      dwg_free_VIEWPORT_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_BLOCK_CONTROL:
+      dwg_free_BLOCK_CONTROL_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_BLOCK_HEADER:
+      dwg_free_BLOCK_HEADER_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_LAYER_CONTROL:
+      dwg_free_LAYER_CONTROL_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_LAYER:
+      dwg_free_LAYER_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_STYLE_CONTROL:
+      dwg_free_STYLE_CONTROL_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_STYLE:
+      dwg_free_STYLE_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_LTYPE_CONTROL:
+      dwg_free_LTYPE_CONTROL_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_LTYPE:
+      dwg_free_LTYPE_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_VIEW_CONTROL:
+      dwg_free_VIEW_CONTROL_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_VIEW:
+      dwg_free_VIEW_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_UCS_CONTROL:
+      dwg_free_UCS_CONTROL_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_UCS:
+      dwg_free_UCS_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_VPORT_CONTROL:
+      dwg_free_VPORT_CONTROL_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_VPORT:
+      dwg_free_VPORT_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_APPID_CONTROL:
+      dwg_free_APPID_CONTROL_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_APPID:
+      dwg_free_APPID_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_DIMSTYLE_CONTROL:
+      dwg_free_DIMSTYLE_CONTROL_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_DIMSTYLE:
+      dwg_free_DIMSTYLE_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_VX_CONTROL:
+      dwg_free_VX_CONTROL_private (dat, dat, dat, obj);
+      break;
+    case DWG_TYPE_VX_TABLE_RECORD:
+      dwg_free_VX_TABLE_RECORD_private (dat, dat, dat, obj);
+      break;
+    default:
+      LOG_ERROR ("Unhandled preR13 class %s, fixedtype %d in free_preR13_object()",
+                 dwg_type_name (obj->fixedtype), (int)obj->fixedtype);
+    }
+}
+
 // using the global dat
 EXPORT void
 dwg_free_object (Dwg_Object *obj)
 {
   int error = 0;
   long unsigned int j;
   Dwg_Data *dwg;
   Bit_Chain *dat = &pdat;
 
   if (obj && obj->parent)
     {
       dwg = obj->parent;
       dat->version = dwg->header.version;
       dat->from_version = dwg->header.from_version;
     }
   else
     return;
   if (obj->type == DWG_TYPE_FREED || obj->tio.object == NULL)
     return;
 
+  PRE (R_13) {
+    free_preR13_object (obj);
+    return;
+  }
+
   switch (obj->type)
     {
     case DWG_TYPE_TEXT:
       dwg_free_TEXT (dat, obj);
       break;
     case DWG_TYPE_ATTRIB:
       dwg_free_ATTRIB (dat, obj);
       break;
     case DWG_TYPE_ATTDEF:
       dwg_free_ATTDEF (dat, obj);
       break;
     case DWG_TYPE_BLOCK:
       dwg_free_BLOCK (dat, obj);
       break;
     case DWG_TYPE_ENDBLK:
       dwg_free_ENDBLK (dat, obj);
       break;
     case DWG_TYPE_SEQEND:
       dwg_free_SEQEND (dat, obj);
       break;
     case DWG_TYPE_INSERT:
       dwg_free_INSERT (dat, obj);
       break;
     case DWG_TYPE_MINSERT:
       dwg_free_MINSERT (dat, obj);
       break;
     case DWG_TYPE_VERTEX_2D:
       dwg_free_VERTEX_2D (dat, obj);
       break;
     case DWG_TYPE_VERTEX_3D:
       dwg_free_VERTEX_3D (dat, obj);
       break;
     case DWG_TYPE_VERTEX_MESH:
       dwg_free_VERTEX_MESH (dat, obj);
       break;
     case DWG_TYPE_VERTEX_PFACE:
       dwg_free_VERTEX_PFACE (dat, obj);
       break;
     case DWG_TYPE_VERTEX_PFACE_FACE:
       dwg_free_VERTEX_PFACE_FACE (dat, obj);
       break;
     case DWG_TYPE_POLYLINE_2D:
       dwg_free_POLYLINE_2D (dat, obj);
       break;
     case DWG_TYPE_POLYLINE_3D:
       dwg_free_POLYLINE_3D (dat, obj);
       break;
     case DWG_TYPE_ARC:
       dwg_free_ARC (dat, obj);
       break;
     case DWG_TYPE_CIRCLE:
       dwg_free_CIRCLE (dat, obj);
       break;
     case DWG_TYPE_LINE:
       dwg_free_LINE (dat, obj);
       break;
     case DWG_TYPE_DIMENSION_ORDINATE:
       dwg_free_DIMENSION_ORDINATE (dat, obj);
       break;
     case DWG_TYPE_DIMENSION_LINEAR:
       dwg_free_DIMENSION_LINEAR (dat, obj);
       break;
     case DWG_TYPE_DIMENSION_ALIGNED:
       dwg_free_DIMENSION_ALIGNED (dat, obj);
       break;
     case DWG_TYPE_DIMENSION_ANG3PT:
       dwg_free_DIMENSION_ANG3PT (dat, obj);
       break;
     case DWG_TYPE_DIMENSION_ANG2LN:
       dwg_free_DIMENSION_ANG2LN (dat, obj);
       break;
     case DWG_TYPE_DIMENSION_RADIUS:
       dwg_free_DIMENSION_RADIUS (dat, obj);
       break;
     case DWG_TYPE_DIMENSION_DIAMETER:
       dwg_free_DIMENSION_DIAMETER (dat, obj);
       break;
     case DWG_TYPE_POINT:
       dwg_free_POINT (dat, obj);
       break;
     case DWG_TYPE__3DFACE:
       dwg_free__3DFACE (dat, obj);
       break;
     case DWG_TYPE_POLYLINE_PFACE:
       dwg_free_POLYLINE_PFACE (dat, obj);
       break;
     case DWG_TYPE_POLYLINE_MESH:
       dwg_free_POLYLINE_MESH (dat, obj);
       break;
     case DWG_TYPE_SOLID:
       dwg_free_SOLID (dat, obj);
       break;
     case DWG_TYPE_TRACE:
       dwg_free_TRACE (dat, obj);
       break;
     case DWG_TYPE_SHAPE:
       dwg_free_SHAPE (dat, obj);
       break;
     case DWG_TYPE_VIEWPORT:
       dwg_free_VIEWPORT (dat, obj);
       break;
     case DWG_TYPE_ELLIPSE:
       dwg_free_ELLIPSE (dat, obj);
       break;
     case DWG_TYPE_SPLINE:
       dwg_free_SPLINE (dat, obj);
       break;
     case DWG_TYPE_REGION:
       dwg_free_REGION (dat, obj);
       break;
     case DWG_TYPE__3DSOLID:
       dwg_free__3DSOLID (dat, obj);
       break; /* Check the type of the object */
     case DWG_TYPE_BODY:
       dwg_free_BODY (dat, obj);
       break;
     case DWG_TYPE_RAY:
       dwg_free_RAY (dat, obj);
       break;
     case DWG_TYPE_XLINE:
       dwg_free_XLINE (dat, obj);
       break;
     case DWG_TYPE_DICTIONARY:
       dwg_free_DICTIONARY (dat, obj);
       break;
     case DWG_TYPE_MTEXT:
       dwg_free_MTEXT (dat, obj);
       break;
     case DWG_TYPE_LEADER:
       dwg_free_LEADER (dat, obj);
       break;
     case DWG_TYPE_TOLERANCE:
       dwg_free_TOLERANCE (dat, obj);
       break;
     case DWG_TYPE_MLINE:
       dwg_free_MLINE (dat, obj);
       break;
     case DWG_TYPE_BLOCK_CONTROL:
       dwg_free_BLOCK_CONTROL (dat, obj);
       break;
     case DWG_TYPE_BLOCK_HEADER:
       dwg_free_BLOCK_HEADER (dat, obj);
       break;
     case DWG_TYPE_LAYER_CONTROL:
       dwg_free_LAYER_CONTROL (dat, obj);
       break;
     case DWG_TYPE_LAYER:
       dwg_free_LAYER (dat, obj);
       break;
     case DWG_TYPE_STYLE_CONTROL:
       dwg_free_STYLE_CONTROL (dat, obj);
       break;
     case DWG_TYPE_STYLE:
       dwg_free_STYLE (dat, obj);
       break;
     case DWG_TYPE_LTYPE_CONTROL:
       dwg_free_LTYPE_CONTROL (dat, obj);
       break;
     case DWG_TYPE_LTYPE:
       dwg_free_LTYPE (dat, obj);
       break;
     case DWG_TYPE_VIEW_CONTROL:
       dwg_free_VIEW_CONTROL (dat, obj);
       break;
     case DWG_TYPE_VIEW:
       dwg_free_VIEW (dat, obj);
       break;
     case DWG_TYPE_UCS_CONTROL:
       dwg_free_UCS_CONTROL (dat, obj);
       break;
     case DWG_TYPE_UCS:
       dwg_free_UCS (dat, obj);
       break;
     case DWG_TYPE_VPORT_CONTROL:
       dwg_free_VPORT_CONTROL (dat, obj);
       break;
     case DWG_TYPE_VPORT:
       dwg_free_VPORT (dat, obj);
       break;
     case DWG_TYPE_APPID_CONTROL:
       dwg_free_APPID_CONTROL (dat, obj);
       break;
     case DWG_TYPE_APPID:
       dwg_free_APPID (dat, obj);
       break;
     case DWG_TYPE_DIMSTYLE_CONTROL:
       dwg_free_DIMSTYLE_CONTROL (dat, obj);
       break;
     case DWG_TYPE_DIMSTYLE:
       dwg_free_DIMSTYLE (dat, obj);
       break;
     case DWG_TYPE_VX_CONTROL:
       dwg_free_VX_CONTROL (dat, obj);
       break;
     case DWG_TYPE_VX_TABLE_RECORD:
       dwg_free_VX_TABLE_RECORD (dat, obj);
       break;
     case DWG_TYPE_GROUP:
       dwg_free_GROUP (dat, obj);
       break;
     case DWG_TYPE_MLINESTYLE:
       dwg_free_MLINESTYLE (dat, obj);
       break;
     case DWG_TYPE_OLE2FRAME:
       dwg_free_OLE2FRAME (dat, obj);
       break;
     case DWG_TYPE_DUMMY:
       dwg_free_DUMMY (dat, obj);
       break;
     case DWG_TYPE_LONG_TRANSACTION:
       dwg_free_LONG_TRANSACTION (dat, obj);
       break;
     case DWG_TYPE_LWPOLYLINE:
       dwg_free_LWPOLYLINE (dat, obj);
       break;
     case DWG_TYPE_HATCH:
       dwg_free_HATCH (dat, obj);
       break;
     case DWG_TYPE_XRECORD:
       dwg_free_XRECORD (dat, obj);
       break;
     case DWG_TYPE_PLACEHOLDER:
       dwg_free_PLACEHOLDER (dat, obj);
       break;
     case DWG_TYPE_OLEFRAME:
       dwg_free_OLEFRAME (dat, obj);
       break;
 #ifdef DEBUG_VBA_PROJECT
     case DWG_TYPE_VBA_PROJECT:
       dwg_free_VBA_PROJECT (dat, obj);
       break;
 #endif
     case DWG_TYPE_LAYOUT:
       dwg_free_LAYOUT (dat, obj);
       break;
     case DWG_TYPE_PROXY_ENTITY:
       dwg_free_PROXY_ENTITY (dat, obj);
       break;
     case DWG_TYPE_PROXY_OBJECT:
       dwg_free_PROXY_OBJECT (dat, obj);
       break;
     default:
       if (obj->type == obj->parent->layout_type
           && obj->fixedtype == DWG_TYPE_LAYOUT)
         {
           SINCE (R_13)
           {
             dwg_free_LAYOUT (dat, obj); // XXX avoid double-free, esp. in eed
           }
         }
       else if ((error = dwg_free_variable_type (obj->parent, obj))
                & DWG_ERR_UNHANDLEDCLASS)
         {
           if (obj->fixedtype == DWG_TYPE_UNKNOWN_ENT)
               dwg_free_UNKNOWN_ENT (dat, obj);
           else if (obj->fixedtype == DWG_TYPE_UNKNOWN_OBJ)
               dwg_free_UNKNOWN_OBJ (dat, obj);
         }
     }
   /* With indxf the dxfname is dynamic, just the name is const */
   if (dwg->opts & DWG_OPTS_IN)
     FREE_IF (obj->dxfname);
   /* With injson even the name is dynamic */
   if (dwg->opts & DWG_OPTS_INJSON)
     FREE_IF (obj->name);
   obj->type = DWG_TYPE_FREED;
 }
 
 /* Needed when we cast types.
    By fixedtype, not dxfname.
  */
