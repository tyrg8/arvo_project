commit 983869a36685728a93e68f523c722ec930fb89f8
Author: Double <double0101@foxmail.com>
Date:   Wed Feb 14 15:50:22 2024 +0800

    Consider SIP content type to determine if the next layer is SDP (fix #1309) (#1311)

diff --git a/Packet++/src/SipLayer.cpp b/Packet++/src/SipLayer.cpp
index 7ba81575..daa5e8cd 100644
--- a/Packet++/src/SipLayer.cpp
+++ b/Packet++/src/SipLayer.cpp
@@ -84,15 +84,23 @@ HeaderField* SipLayer::setContentLength(int contentLength, const std::string &pr
 void SipLayer::parseNextLayer()
 {
 	if (getLayerPayloadSize() == 0)
 		return;
 
 	size_t headerLen = getHeaderLen();
+	std::string contentType;
 	if (getContentLength() > 0)
+	{
+		HeaderField *contentTypeField = getFieldByName(PCPP_SIP_CONTENT_TYPE_FIELD);
+		if (contentTypeField != nullptr)
+			contentType = contentTypeField->getFieldValue();
+	}
+
+	if (contentType.find("application/sdp") != std::string::npos)
 	{
 		m_NextLayer = new SdpLayer(m_Data + headerLen, m_DataLen - headerLen, this, m_Packet);
 	}
 	else
 	{
 		m_NextLayer = new PayloadLayer(m_Data + headerLen, m_DataLen - headerLen, this, m_Packet);
 	}
 }
diff --git a/Tests/Packet++Test/PacketExamples/sip_not_sdp.dat b/Tests/Packet++Test/PacketExamples/sip_not_sdp.dat
new file mode 100644
index 00000000..a968ab7f
--- /dev/null
+++ b/Tests/Packet++Test/PacketExamples/sip_not_sdp.dat
@@ -0,0 +1 @@
+0050563daf58005056c000080800450003ff1ac5000040113fa2ac106201ac106265a7c813c403ebc90a5055424c495348207369703a74656c6570686f6e6531403137322e31362e39382e3130313b7472616e73706f72743d554450205349502f322e300d0a5669613a205349502f322e302f554450203137322e31362e39382e313a34323935323b6272616e63683d7a39684734624b2d64383735347a2d613338643165356632376463306662392d312d2d2d64383735347a2d0d0a4d61782d466f7277617264733a2037300d0a436f6e746163743a203c7369703a74656c6570686f6e6531403137322e31362e39382e313a34323935323b7472616e73706f72743d5544503e0d0a546f3a203c7369703a74656c6570686f6e6531403137322e31362e39382e3130313b7472616e73706f72743d5544503e0d0a46726f6d3a203c7369703a74656c6570686f6e6531403137322e31362e39382e3130313b7472616e73706f72743d5544503e3b7461673d63663633633933340d0a43616c6c2d49443a205a474d334d47526a5a5751794d6a67304d6a526c4d6a646d5a544d3459575a6c4f44497a4f475a6a5a44632e0d0a435365713a2031205055424c4953480d0a457870697265733a203630300d0a416c6c6f773a20494e564954452c2041434b2c2043414e43454c2c204259452c204e4f544946592c2052454645522c204d4553534147452c204f5054494f4e532c20494e464f2c205355425343524942450d0a436f6e74656e742d547970653a206170706c69636174696f6e2f706964662b786d6c0d0a537570706f727465643a207265706c616365732c206e6f72656665727375622c20657874656e6465642d72656665722c2074696d65722c20582d636973636f2d736572766963657572690d0a557365722d4167656e743a205a20332e332e3231393333207232313930330d0a4576656e743a2070726573656e63650d0a416c6c6f772d4576656e74733a2070726573656e63652c206b706d6c0d0a436f6e74656e742d4c656e6774683a203237330d0a0d0a3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d38223f3e0d0a3c70726573656e636520786d6c6e733d2275726e3a696574663a706172616d733a786d6c3a6e733a70696466220d0a20202020202020202020656e746974793d227369703a74656c6570686f6e6531403137322e31362e39382e3130313b7472616e73706f72743d554450223e0d0a20203c7475706c652069643d2274656c6570686f6e653122203e0d0a20202020203c7374617475733e3c62617369633e6f70656e3c2f62617369633e3c2f7374617475733e0d0a20202020203c6e6f74653e4f6e6c696e653c2f6e6f74653e0d0a20203c2f7475706c653e0d0a3c2f70726573656e63653e0d0a
\ No newline at end of file
diff --git a/Tests/Packet++Test/PacketExamples/sip_not_sdp.pcap b/Tests/Packet++Test/PacketExamples/sip_not_sdp.pcap
new file mode 100644
index 00000000..7548a74b
Binary files /dev/null and b/Tests/Packet++Test/PacketExamples/sip_not_sdp.pcap differ
diff --git a/Tests/Packet++Test/TestDefinition.h b/Tests/Packet++Test/TestDefinition.h
index 36379b52..56471aa3 100644
--- a/Tests/Packet++Test/TestDefinition.h
+++ b/Tests/Packet++Test/TestDefinition.h
@@ -150,6 +150,7 @@ PTF_TEST_CASE(SipResponseLayerParsingTest);
 PTF_TEST_CASE(SipResponseLayerCreationTest);
 PTF_TEST_CASE(SipResponseLayerEditTest);
 PTF_TEST_CASE(SdpLayerParsingTest);
+PTF_TEST_CASE(SipNotSdpLayerParsingTest);
 PTF_TEST_CASE(SdpLayerCreationTest);
 PTF_TEST_CASE(SdpLayerEditTest);
 
diff --git a/Tests/Packet++Test/Tests/SipSdpTests.cpp b/Tests/Packet++Test/Tests/SipSdpTests.cpp
index d742db0b..10d98215 100644
--- a/Tests/Packet++Test/Tests/SipSdpTests.cpp
+++ b/Tests/Packet++Test/Tests/SipSdpTests.cpp
@@ -598,56 +598,74 @@ PTF_TEST_CASE(SipResponseLayerEditTest)
 PTF_TEST_CASE(SdpLayerParsingTest)
 {
 	timeval time;
 	gettimeofday(&time, nullptr);
 
 	READ_FILE_AND_CREATE_PACKET(1, "PacketExamples/sip_req1.dat");
 	READ_FILE_AND_CREATE_PACKET(2, "PacketExamples/sdp.dat");
 
 	pcpp::Packet sdpPacket(&rawPacket1);
 	pcpp::Packet sdpPacket2(&rawPacket2);
 
 	PTF_ASSERT_TRUE(sdpPacket.isPacketOfType(pcpp::SDP));
 	pcpp::SdpLayer* sdpLayer = sdpPacket.getLayerOfType<pcpp::SdpLayer>();
 	PTF_ASSERT_NOT_NULL(sdpLayer);
 
 	PTF_ASSERT_EQUAL(sdpLayer->getFieldCount(), 11);
 
 	PTF_ASSERT_NOT_NULL(sdpLayer->getFieldByName(PCPP_SDP_PROTOCOL_VERSION_FIELD));
 	PTF_ASSERT_EQUAL(sdpLayer->getFieldByName(PCPP_SDP_PROTOCOL_VERSION_FIELD)->getFieldValue(), "0");
 	PTF_ASSERT_NOT_NULL(sdpLayer->getFieldByName(PCPP_SDP_ORIGINATOR_FIELD));
 	PTF_ASSERT_EQUAL(sdpLayer->getFieldByName(PCPP_SDP_ORIGINATOR_FIELD)->getFieldValue(), "Clarent 120386 120387 IN IP4 200.57.7.196");
 	PTF_ASSERT_NOT_NULL(sdpLayer->getFieldByName(PCPP_SDP_MEDIA_NAME_FIELD));
 	PTF_ASSERT_EQUAL(sdpLayer->getFieldByName(PCPP_SDP_MEDIA_NAME_FIELD)->getFieldValue(), "audio 40376 RTP/AVP 8 18 4 0");
 	PTF_ASSERT_NOT_NULL(sdpLayer->getFieldByName(PCPP_SDP_MEDIA_ATTRIBUTE_FIELD));
 	PTF_ASSERT_EQUAL(sdpLayer->getFieldByName(PCPP_SDP_MEDIA_ATTRIBUTE_FIELD)->getFieldValue(), "rtpmap:8 PCMA/8000");
 	PTF_ASSERT_NOT_NULL(sdpLayer->getFieldByName(PCPP_SDP_MEDIA_ATTRIBUTE_FIELD, 2));
 	PTF_ASSERT_EQUAL(sdpLayer->getFieldByName(PCPP_SDP_MEDIA_ATTRIBUTE_FIELD, 2)->getFieldValue(), "rtpmap:4 G723/8000");
 	PTF_ASSERT_NOT_NULL(sdpLayer->getFieldByName(PCPP_SDP_MEDIA_ATTRIBUTE_FIELD, 4));
 	PTF_ASSERT_EQUAL(sdpLayer->getFieldByName(PCPP_SDP_MEDIA_ATTRIBUTE_FIELD, 4)->getFieldValue(), "SendRecv");
 	PTF_ASSERT_NULL(sdpLayer->getFieldByName(PCPP_SDP_MEDIA_ATTRIBUTE_FIELD, 5));
 
 	PTF_ASSERT_EQUAL(sdpLayer->getOwnerIPv4Address(), pcpp::IPv4Address("200.57.7.196"));
 	PTF_ASSERT_EQUAL(sdpLayer->getMediaPort("audio"), 40376);
 
 	PTF_ASSERT_TRUE(sdpPacket2.isPacketOfType(pcpp::SDP));
 	sdpLayer = sdpPacket2.getLayerOfType<pcpp::SdpLayer>();
 	PTF_ASSERT_NOT_NULL(sdpLayer);
 
 	PTF_ASSERT_EQUAL(sdpLayer->getFieldCount(), 18);
 
 	PTF_ASSERT_NOT_NULL(sdpLayer->getFieldByName(PCPP_SDP_CONNECTION_INFO_FIELD));
 	PTF_ASSERT_EQUAL(sdpLayer->getFieldByName(PCPP_SDP_CONNECTION_INFO_FIELD)->getFieldValue(), "IN IP4 10.33.6.100");
 	PTF_ASSERT_NOT_NULL(sdpLayer->getFieldByName(PCPP_SDP_TIME_FIELD));
 	PTF_ASSERT_EQUAL(sdpLayer->getFieldByName(PCPP_SDP_TIME_FIELD)->getFieldValue(), "0 0");
 	PTF_ASSERT_NOT_NULL(sdpLayer->getFieldByName(PCPP_SDP_SESSION_NAME_FIELD));
 	PTF_ASSERT_EQUAL(sdpLayer->getFieldByName(PCPP_SDP_SESSION_NAME_FIELD)->getFieldValue(), "Phone-Call");
 
 	PTF_ASSERT_EQUAL(sdpLayer->getOwnerIPv4Address(), pcpp::IPv4Address("10.33.6.100"));
 	PTF_ASSERT_EQUAL(sdpLayer->getMediaPort("audio"), 6010);
 	PTF_ASSERT_EQUAL(sdpLayer->getMediaPort("image"), 6012);
 } // SdpLayerParsingTest
 
 
+PTF_TEST_CASE(SipNotSdpLayerParsingTest)
+{
+	timeval time;
+	gettimeofday(&time, nullptr);
+
+	READ_FILE_AND_CREATE_PACKET(1, "PacketExamples/sip_not_sdp.dat");
+
+	pcpp::Packet notSdpPacket(&rawPacket1);
+
+	PTF_ASSERT_TRUE(notSdpPacket.isPacketOfType(pcpp::SIP));
+	pcpp::SipRequestLayer* sipLayer = notSdpPacket.getLayerOfType<pcpp::SipRequestLayer>();
+	PTF_ASSERT_EQUAL(sipLayer->getContentLength(), 273);
+
+	pcpp::Layer* nextLayer = sipLayer->getNextLayer();
+	PTF_ASSERT_EQUAL(nextLayer->getProtocol(), pcpp::GenericPayload);
+
+	PTF_ASSERT_FALSE(notSdpPacket.isPacketOfType(pcpp::SDP));
+} // SipNotSdpLayerParsingTest
 
 PTF_TEST_CASE(SdpLayerCreationTest)
 {
diff --git a/Tests/Packet++Test/main.cpp b/Tests/Packet++Test/main.cpp
index 9a78b0e6..1138a235 100644
--- a/Tests/Packet++Test/main.cpp
+++ b/Tests/Packet++Test/main.cpp
@@ -36,293 +36,294 @@ void printUsage()
 int main(int argc, char* argv[])
 {
 	int optionIndex = 0;
 	int opt = 0;
 	std::string userTagsInclude = "", userTagsExclude = "", configTags = "";
 	bool memVerbose = false;
 	bool skipMemLeakCheck = false;
 
 	while((opt = getopt_long(argc, argv, "msvwht:x:", PacketTestOptions, &optionIndex)) != -1)
 	{
 		switch (opt)
 		{
 			case 0:
 				break;
 			case 't':
 				userTagsInclude = optarg;
 				break;
 			case 'x':
 				userTagsExclude = optarg;
 				break;
 			case 's':
 				skipMemLeakCheck = true;
 				break;
 			case 'm':
 				memVerbose = true;
 				break;
 			case 'w':
 				PTF_SHOW_SKIPPED_TESTS(true);
 				break;
 			case 'v':
 				PTF_SET_VERBOSE_MODE(true);
 				break;
 			case 'h':
 				printUsage();
 				exit(0);
 			default:
 				printUsage();
 				exit(-1);
 		}
 	}
 
 	std::cout << "PcapPlusPlus version: " << pcpp::getPcapPlusPlusVersionFull() << std::endl
 	<< "Built: " << pcpp::getBuildDateTime() << std::endl
 	<< "Built from: " << pcpp::getGitInfo() << std::endl;
 
 	#ifdef NDEBUG
 	skipMemLeakCheck = true;
 	std::cout << "Disabling memory leak check in MSVC Release builds due to caching logic in stream objects that looks like a memory leak:" << std::endl
 	<< "     https://github.com/cpputest/cpputest/issues/786#issuecomment-148921958" << std::endl;
 	#endif
 
 	// The logger singleton looks like a memory leak. Invoke it before starting the memory check
 	pcpp::Logger::getInstance();
 
 	// cppcheck-suppress knownConditionTrueFalse
 	if (skipMemLeakCheck)
 	{
 		if (configTags != "")
 			configTags += ";";
 
 		configTags += "skip_mem_leak_check";
 		std::cout << "Skipping memory leak check for all test cases" << std::endl;
 	}
 
 	if (memVerbose)
 	{
 		if (configTags != "")
 			configTags += ";";
 
 		configTags += "mem_leak_check_verbose";
 		std::cout << "Turning on verbose information on memory allocations" << std::endl;
 	}
 
 	PTF_START_RUNNING_TESTS(userTagsInclude, userTagsExclude, configTags);
 
 	pcpp_tests::testSetUp();
 
 	PTF_RUN_TEST(OUILookup, "eth2;eth;oui");
 	PTF_RUN_TEST(EthPacketCreation, "eth2;eth");
 	PTF_RUN_TEST(EthPacketPointerCreation, "eth2;eth");
 	PTF_RUN_TEST(EthAndArpPacketParsing, "eth2;eth;arp");
 	PTF_RUN_TEST(ArpPacketCreation, "arp");
 	PTF_RUN_TEST(EthDot3LayerParsingTest, "eth_dot3;eth");
 	PTF_RUN_TEST(EthDot3LayerCreateEditTest, "eth_dot3;eth");
 
 	PTF_RUN_TEST(VlanParseAndCreation, "vlan");
 	PTF_RUN_TEST(QinQ802_1adParse, "vlan");
 	PTF_RUN_TEST(MplsLayerTest, "mpls");
 	PTF_RUN_TEST(VxlanParsingAndCreationTest, "vxlan");
 
 	PTF_RUN_TEST(IPv4PacketCreation, "ipv4");
 	PTF_RUN_TEST(IPv4PacketParsing, "ipv4");
 	PTF_RUN_TEST(IPv4FragmentationTest, "ipv4");
 	PTF_RUN_TEST(IPv4OptionsParsingTest, "ipv4");
 	PTF_RUN_TEST(IPv4OptionsEditTest, "ipv4");
 	PTF_RUN_TEST(IPv4UdpChecksum, "ipv4");
 
 	PTF_RUN_TEST(IPv6UdpPacketParseAndCreate, "ipv6");
 	PTF_RUN_TEST(IPv6FragmentationTest, "ipv6");
 	PTF_RUN_TEST(IPv6ExtensionsTest, "ipv6");
 
 	PTF_RUN_TEST(TcpPacketNoOptionsParsing, "tcp");
 	PTF_RUN_TEST(TcpPacketWithOptionsParsing, "tcp");
 	PTF_RUN_TEST(TcpPacketWithOptionsParsing2, "tcp");
 	PTF_RUN_TEST(TcpPacketCreation, "tcp");
 	PTF_RUN_TEST(TcpPacketCreation2, "tcp");
 	PTF_RUN_TEST(TcpMalformedPacketParsing, "tcp");
 	PTF_RUN_TEST(TcpChecksumInvalidRead, "tcp");
 	PTF_RUN_TEST(TcpChecksumMultiBuffer, "tcp");
 
 	PTF_RUN_TEST(PacketUtilsHash5TupleUdp, "udp");
 	PTF_RUN_TEST(PacketUtilsHash5TupleTcp, "tcp");
 	PTF_RUN_TEST(PacketUtilsHash5TupleIPv6, "ipv6");
 
 	PTF_RUN_TEST(InsertDataToPacket, "packet;insert");
 	PTF_RUN_TEST(CreatePacketFromBuffer, "packet");
 	PTF_RUN_TEST(InsertVlanToPacket, "packet;vlan;insert");
 	PTF_RUN_TEST(RemoveLayerTest, "packet;remove_layer");
 	PTF_RUN_TEST(CopyLayerAndPacketTest, "packet;copy_layer");
 	PTF_RUN_TEST(PacketLayerLookupTest, "packet");
 	PTF_RUN_TEST(RawPacketTimeStampSetterTest, "packet");
 	PTF_RUN_TEST(ParsePartialPacketTest, "packet;partial_packet");
 	PTF_RUN_TEST(PacketTrailerTest, "packet;packet_trailer");
 	PTF_RUN_TEST(ResizeLayerTest, "packet;resize");
 	PTF_RUN_TEST(PrintPacketAndLayersTest, "packet;print");
 	PTF_RUN_TEST(ProtocolFamilyMembershipTest, "packet");
 
 	PTF_RUN_TEST(HttpRequestParseMethodTest, "http");
 	PTF_RUN_TEST(HttpRequestLayerParsingTest, "http");
 	PTF_RUN_TEST(HttpRequestLayerCreationTest, "http");
 	PTF_RUN_TEST(HttpRequestLayerEditTest, "http");
 	PTF_RUN_TEST(HttpResponseParseStatusCodeTest, "http");
 	PTF_RUN_TEST(HttpResponseParseVersionTest, "http");
 	PTF_RUN_TEST(HttpResponseLayerParsingTest, "http");
 	PTF_RUN_TEST(HttpResponseLayerCreationTest, "http");
 	PTF_RUN_TEST(HttpResponseLayerEditTest, "http");
 	PTF_RUN_TEST(HttpMalformedResponseTest, "http");
 
 	PTF_RUN_TEST(PPPoESessionLayerParsingTest, "pppoe");
 	PTF_RUN_TEST(PPPoESessionLayerCreationTest, "pppoe");
 	PTF_RUN_TEST(PPPoEDiscoveryLayerParsingTest, "pppoe");
 	PTF_RUN_TEST(PPPoEDiscoveryLayerCreateTest, "pppoe");
 
 	PTF_RUN_TEST(DnsLayerParsingTest, "dns");
 	PTF_RUN_TEST(DnsLayerQueryCreationTest, "dns");
 	PTF_RUN_TEST(DnsLayerResourceCreationTest, "dns");
 	PTF_RUN_TEST(DnsLayerEditTest, "dns");
 	PTF_RUN_TEST(DnsLayerRemoveResourceTest, "dns");
 	PTF_RUN_TEST(DnsOverTcpParsingTest, "dns");
 	PTF_RUN_TEST(DnsOverTcpCreationTest, "dns");
 	PTF_RUN_TEST(DnsLayerAddDnsKeyTest, "dns");
 
 	PTF_RUN_TEST(IcmpParsingTest, "icmp");
 	PTF_RUN_TEST(IcmpCreationTest, "icmp");
 	PTF_RUN_TEST(IcmpEditTest, "icmp");
 
 	PTF_RUN_TEST(GreParsingTest, "gre");
 	PTF_RUN_TEST(GreCreationTest, "gre");
 	PTF_RUN_TEST(GreEditTest, "gre");
 
 	PTF_RUN_TEST(SSLClientHelloParsingTest, "ssl");
 	PTF_RUN_TEST(SSLExtensionWithZeroSizeTest, "ssl");
 	PTF_RUN_TEST(SSLAppDataParsingTest, "ssl");
 	PTF_RUN_TEST(SSLAlertParsingTest, "ssl");
 	PTF_RUN_TEST(SSLMultipleRecordParsingTest, "ssl");
 	PTF_RUN_TEST(SSLMultipleRecordParsing2Test, "ssl");
 	PTF_RUN_TEST(SSLMultipleRecordParsing3Test, "ssl");
 	PTF_RUN_TEST(SSLMultipleRecordParsing4Test, "ssl");
 	PTF_RUN_TEST(SSLMultipleRecordParsing5Test, "ssl");
 	PTF_RUN_TEST(SSLPartialCertificateParseTest, "ssl");
 	PTF_RUN_TEST(SSLNewSessionTicketParseTest, "ssl");
 	PTF_RUN_TEST(SSLMalformedPacketParsing, "ssl");
 	PTF_RUN_TEST(TLS1_3ParsingTest, "ssl");
 	PTF_RUN_TEST(TLSCipherSuiteTest, "ssl");
 	PTF_RUN_TEST(ClientHelloTLSFingerprintTest, "ssl");
 	PTF_RUN_TEST(ServerHelloTLSFingerprintTest, "ssl");
 
 	PTF_RUN_TEST(SllPacketParsingTest, "sll");
 	PTF_RUN_TEST(SllPacketCreationTest, "sll");
 
 	PTF_RUN_TEST(NullLoopbackTest, "null_loopback");
 
 	PTF_RUN_TEST(Sll2PacketParsingTest, "sll2");
 	PTF_RUN_TEST(Sll2PacketCreationTest, "sll2");
 
 	PTF_RUN_TEST(NflogPacketParsingTest, "nflog");
 
 	PTF_RUN_TEST(DhcpParsingTest, "dhcp");
 	PTF_RUN_TEST(DhcpCreationTest, "dhcp");
 	PTF_RUN_TEST(DhcpEditTest, "dhcp");
 
 	PTF_RUN_TEST(IgmpParsingTest, "igmp");
 	PTF_RUN_TEST(IgmpCreateAndEditTest, "igmp");
 	PTF_RUN_TEST(Igmpv3ParsingTest, "igmp");
 	PTF_RUN_TEST(Igmpv3QueryCreateAndEditTest, "igmp");
 	PTF_RUN_TEST(Igmpv3ReportCreateAndEditTest, "igmp");
 
 	PTF_RUN_TEST(SipRequestParseMethodTest, "sip");
 	PTF_RUN_TEST(SipRequestLayerParsingTest, "sip");
 	PTF_RUN_TEST(SipRequestLayerCreationTest, "sip");
 	PTF_RUN_TEST(SipRequestLayerEditTest, "sip");
 	PTF_RUN_TEST(SipResponseParseStatusCodeTest, "sip");
 	PTF_RUN_TEST(SipResponseParseVersionCodeTest, "sip");
 	PTF_RUN_TEST(SipResponseLayerParsingTest, "sip");
 	PTF_RUN_TEST(SipResponseLayerCreationTest, "sip");
 	PTF_RUN_TEST(SipResponseLayerEditTest, "sip");
+	PTF_RUN_TEST(SipNotSdpLayerParsingTest, "sip");
 	PTF_RUN_TEST(SdpLayerParsingTest, "sdp");
 	PTF_RUN_TEST(SdpLayerCreationTest, "sdp");
 	PTF_RUN_TEST(SdpLayerEditTest, "sdp");
 
 	PTF_RUN_TEST(RadiusLayerParsingTest, "radius");
 	PTF_RUN_TEST(RadiusLayerCreationTest, "radius");
 	PTF_RUN_TEST(RadiusLayerEditTest, "radius");
 
 	PTF_RUN_TEST(GtpLayerParsingTest, "gtp");
 	PTF_RUN_TEST(GtpLayerCreationTest, "gtp");
 	PTF_RUN_TEST(GtpLayerEditTest, "gtp");
 
 	PTF_RUN_TEST(BgpLayerParsingTest, "bgp");
 	PTF_RUN_TEST(BgpLayerCreationTest, "bgp");
 	PTF_RUN_TEST(BgpLayerEditTest, "bgp");
 
 	PTF_RUN_TEST(SSHParsingTest, "ssh");
 	PTF_RUN_TEST(SSHMalformedParsingTest, "ssh");
 
 	PTF_RUN_TEST(IPSecParsingTest, "ipsec");
 
 	PTF_RUN_TEST(DhcpV6ParsingTest, "dhcp;dhcpv6");
 	PTF_RUN_TEST(DhcpV6CreationTest, "dhcp;dhcpv6");
 	PTF_RUN_TEST(DhcpV6EditTest, "dhcp;dhcpv6");
 
 	PTF_RUN_TEST(NtpMethodsTests, "ntp");
 	PTF_RUN_TEST(NtpParsingV3Tests, "ntp");
 	PTF_RUN_TEST(NtpParsingV4Tests, "ntp");
 	PTF_RUN_TEST(NtpCreationTests, "ntp");
 
 	PTF_RUN_TEST(TelnetCommandParsingTests, "telnet");
 	PTF_RUN_TEST(TelnetDataParsingTests, "telnet");
 
 	PTF_RUN_TEST(TpktLayerTest, "tpkt");
 
 	PTF_RUN_TEST(IcmpV6ParsingTest, "icmpv6");
 	PTF_RUN_TEST(IcmpV6CreationTest, "icmpv6");
 	PTF_RUN_TEST(IcmpV6EditTest, "icmpv6");
 
 	PTF_RUN_TEST(FtpParsingTests, "ftp");
 	PTF_RUN_TEST(FtpCreationTests, "ftp");
 	PTF_RUN_TEST(FtpEditTests, "ftp");
 
 	PTF_RUN_TEST(LLCParsingTests, "llc");
 	PTF_RUN_TEST(LLCCreationTests, "llc");
 
 	PTF_RUN_TEST(StpConfigurationParsingTests, "stp");
 	PTF_RUN_TEST(StpConfigurationCreationTests, "stp");
 	PTF_RUN_TEST(StpConfigurationEditTests, "stp");
 	PTF_RUN_TEST(StpTopologyChangeParsingTests, "stp");
 	PTF_RUN_TEST(StpTopologyChangeCreationTests, "stp");
 	PTF_RUN_TEST(StpTopologyChangeEditTests, "stp");
 	PTF_RUN_TEST(RapidStpParsingTests, "stp");
 	PTF_RUN_TEST(RapidStpCreationTests, "stp");
 	PTF_RUN_TEST(RapidStpEditTests, "stp");
 	PTF_RUN_TEST(MultipleStpParsingTests, "stp");
 	PTF_RUN_TEST(MultipleStpCreationTests, "stp");
 	PTF_RUN_TEST(MultipleStpEditTests, "stp");
 
 	PTF_RUN_TEST(SomeIpPortTest, "someip");
 	PTF_RUN_TEST(SomeIpParsingTest, "someip");
 	PTF_RUN_TEST(SomeIpCreationTest, "someip");
 	PTF_RUN_TEST(SomeIpTpParsingTest, "someip");
 	PTF_RUN_TEST(SomeIpTpCreationTest, "someip");
 	PTF_RUN_TEST(SomeIpTpEditTest, "someip");
 
 	PTF_RUN_TEST(SomeIpSdParsingTest, "someipsd");
 	PTF_RUN_TEST(SomeIpSdCreationTest, "someipsd");
 
 	PTF_RUN_TEST(WakeOnLanParsingTests, "wol");
 	PTF_RUN_TEST(WakeOnLanCreationTests, "wol");
 	PTF_RUN_TEST(WakeOnLanEditTests, "wol");
 
 	PTF_RUN_TEST(VrrpParsingTest, "vrrp");
 	PTF_RUN_TEST(VrrpCreateAndEditTest, "vrrp");
 
 	PTF_RUN_TEST(CotpLayerTest, "cotp");
 
 	PTF_RUN_TEST(S7CommLayerParsingTest, "s7comm");
 	PTF_RUN_TEST(S7CommLayerCreationTest, "s7comm");
 
 	PTF_RUN_TEST(SmtpParsingTests, "smtp");
 	PTF_RUN_TEST(SmtpCreationTests, "smtp");
 	PTF_RUN_TEST(SmtpEditTests, "smtp");
 
 	PTF_END_RUNNING_TESTS;
 }
