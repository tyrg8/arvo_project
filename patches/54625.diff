commit 7f9016032a29873a9c30c6d6548cda13e67fd335
Author: Reini Urban <rurban@cpan.org>
Date:   Sun Jan 1 18:27:06 2023 +0100

    decode_r11: fix ossfuzz 47189
    
    entities_end overflow

diff --git a/src/decode.c b/src/decode.c
index 8679cbf6..1877ea86 100644
--- a/src/decode.c
+++ b/src/decode.c
@@ -5847,243 +5847,248 @@ int
 decode_preR13_entities (BITCODE_RL start, BITCODE_RL end,
                         unsigned num_entities, BITCODE_RL size,
                         BITCODE_RL blocks_max, Bit_Chain *restrict dat,
                         Dwg_Data *restrict dwg)
 {
   int error = 0;
   BITCODE_BL num = dwg->num_objects;
   unsigned long oldpos = dat->byte;
 
   dat->bit = 0;
   LOG_TRACE ("\n%sentities: (" FORMAT_RLx "-" FORMAT_RLx " (%u), size " FORMAT_RL ", 0x%x)\n",
              blocks_max != (BITCODE_RL)0 ? "block " : "", start, end, num_entities,
              size, blocks_max);
   LOG_INFO ("==========================================\n");
+  if (size > dat->size || end > dat->size)
+    {
+      LOG_ERROR ("size overflow")
+      return DWG_ERR_INVALIDDWG;
+    }
   if (end != 0 && start == end)
     // with empty entities, ignore num_entities as they include block ents
     return 0;
   if (end == 0 && size == 0) // empty blocks
     return 0;
   while (dat->byte < oldpos + end)
     {
       Dwg_Object *obj;
       Dwg_Object_Entity *ent, *_ent;
       BITCODE_RS type, crc;
 
       if (!num)
         dwg->object
           = (Dwg_Object *)calloc (REFS_PER_REALLOC, sizeof (Dwg_Object));
       else if (num >= dwg->num_alloced_objects)
         {
           while (num >= dwg->num_alloced_objects)
             dwg->num_alloced_objects *= 2;
           dwg->object = (Dwg_Object *)realloc (
               dwg->object, dwg->num_alloced_objects * sizeof (Dwg_Object));
           LOG_TRACE ("REALLOC dwg->object vector to %u\n", dwg->num_alloced_objects)
           dwg->dirty_refs = 1;
         }
       if (!dwg->object)
         {
           LOG_ERROR ("Out of memory");
           return DWG_ERR_OUTOFMEM;
         }
       obj = &dwg->object[num];
       memset (obj, 0, sizeof (Dwg_Object));
       dwg->num_objects++;
       obj->index = num;
       obj->parent = dwg;
       obj->address = dat->byte;
       obj->supertype = DWG_SUPERTYPE_ENTITY;
 
       PRE (R_2_0b)
         {
           type = bit_read_RS (dat);
           obj->type = (BITCODE_RC)type;
           LOG_TRACE ("type: " FORMAT_RS " [RS]\n", type);
           if (type > 127) // deleted. moved into BLOCK
             type = abs ((int8_t)obj->type);
         }
       else
         {
           obj->type = bit_read_RC (dat);
           LOG_TRACE ("type: " FORMAT_RCd " [RCd]\n", obj->type);
           type = obj->type & 0x7F;
         }
 
       switch (type)
         {
         case 1:
           error |= dwg_decode_LINE (dat, obj);
           break;
         case 2:
           error |= dwg_decode_POINT (dat, obj);
           break;
         case 3:
           error |= dwg_decode_CIRCLE (dat, obj);
           break;
         case 4:
           error |= dwg_decode_SHAPE (dat, obj);
           break;
         case 5:
           error |= dwg_decode_REPEAT (dat, obj);
           break;
         case 6:
           error |= dwg_decode_ENDREP (dat, obj);
           break;
         case 7:
           error |= dwg_decode_TEXT (dat, obj);
           break;
         case 8:
           error |= dwg_decode_ARC (dat, obj);
           break;
         case 9:
           error |= dwg_decode_TRACE (dat, obj);
           break;
         case 10:
           error |= dwg_decode_LOAD (dat, obj);
           break;
         case 11:
           error |= dwg_decode_SOLID (dat, obj);
           break;
         case 12:
           error |= dwg_decode_BLOCK (dat, obj);
           break;
         case 13:
           error |= dwg_decode_ENDBLK (dat, obj);
           break;
         case 14:
           error |= dwg_decode_INSERT (dat, obj);
           break;
         case 15:
           error |= dwg_decode_ATTDEF (dat, obj);
           break;
         case 16:
           error |= dwg_decode_ATTRIB (dat, obj);
           break;
         case 17:
           error |= dwg_decode_SEQEND (dat, obj);
           break;
         case 18: /* another polyline */
         case 19:
           { // which polyline
             BITCODE_RC flag;
             dat->byte += 5;
             flag = bit_read_RC (dat);
             dat->byte -= 6;
             if (flag & 8)
               error |= dwg_decode_POLYLINE_3D (dat, obj);
             else if (flag & 16)
               error |= dwg_decode_POLYLINE_MESH (dat, obj);
             else if (flag & 64)
               error |= dwg_decode_POLYLINE_PFACE (dat, obj);
             else
               error |= dwg_decode_POLYLINE_2D (dat, obj);
           }
           break;
         case 20:
           { // which vertex?
             BITCODE_RC flag;
             dat->byte += 5;
             flag = bit_read_RC (dat);
             dat->byte -= 6;
             if (flag & 32)
               error |= dwg_decode_VERTEX_3D (dat, obj);
             else if (flag & 64 && !(flag & 128))
               error |= dwg_decode_VERTEX_MESH (dat, obj);
             else if (flag & (64 + 128))
               error |= dwg_decode_VERTEX_PFACE (dat, obj);
             else if (flag & 128 && !(flag & 64))
               error |= dwg_decode_VERTEX_PFACE_FACE (dat, obj);
             else
               error |= dwg_decode_VERTEX_2D (dat, obj);
           }
           break;
         case 21:
           error |= dwg_decode__3DLINE (dat, obj);
           break;
         case 22:
           error |= dwg_decode__3DFACE (dat, obj);
           break;
         case 23:
           error |= decode_preR13_DIMENSION (dat, obj);
           break;
         case 24:
           error |= dwg_decode_VIEWPORT (dat, obj);
           break;
         /*
         case 25:
           error |= dwg_decode_3DLINE (dat, obj);
           break;
         */
         default:
           dat->byte--;
 	  DEBUG_HERE;
           LOG_ERROR ("Unknown object type %d", type);
           error |= DWG_ERR_SECTIONNOTFOUND;
           break;
         }
 
       assert (!dat->bit);
       PRE (R_2_0b)
       {
         obj->size = dat->byte - oldpos;
         oldpos = dat->byte;
         if (obj->type > 127) // deleted
           {
             obj->fixedtype = DWG_TYPE_UNUSED;
             dwg->num_entities--; // for stats only
           }
         if (num + 1 > dwg->num_objects)
           break;
       }
       SINCE (R_2_0b) // Pre R_2_0 doesn't contain size of entity
       {
         PRE (R_11) // no crc16
         {
           if (obj->address + obj->size != dat->byte)
             {
               LOG_ERROR ("offset %ld", obj->address + obj->size - dat->byte);
               dat->byte = obj->address + obj->size;
             }
         }
         LATER_VERSIONS
         {
           if (obj->address + obj->size != dat->byte + 2)
             {
               LOG_ERROR ("offset %ld", obj->address + obj->size - (dat->byte + 2));
               dat->byte = obj->address + obj->size - 2;
             }
           crc = bit_read_RS (dat);
           LOG_TRACE ("crc: %04X [RSx]\n", crc);
         }
       }
       LOG_TRACE ("\n");
       num++;
 
       if (end > 0 && dat->byte >= end)
         {
           if (size == 0 && blocks_max != 0) // else we just loop until end with wrong num
             {
               LOG_ERROR ("overflow with wrong blocks num_entities 0x%lx > 0x%x, %u",
                          dat->byte, end, num_entities);
               error |= DWG_ERR_SECTIONNOTFOUND;
             }
           dat->byte = end;
           return error;
         }
       SINCE (R_2_0b) {
         if (obj->size < 2 || obj->size > 0x1000)// FIXME
           {
             LOG_ERROR ("wrong obj->size %u", obj->size);
             error |= DWG_ERR_SECTIONNOTFOUND;
             if (end)
               dat->byte = end;
           }
       }
     }
 
   if (end)
     dat->byte = end;
   return error;
 }
 
 #undef IS_DECODER
