commit 4a1af26f1a29268cd111d3aa445d7b465f9873cd
Author: Herb Derby <herb@google.com>
Date:   Thu Oct 24 10:53:53 2019 -0400

    Fix fuzzer bug in SkDescriptor::isValid
    
    This is following up chrome bug:
    https://bugs.chromium.org/p/chromium/issues/detail?id=996211
    
    BUG=skia:18491
    
    Change-Id: I4c85bc916903aaa2fdf7eb226bdf3e57f8b1c66c
    Reviewed-on: https://skia-review.googlesource.com/c/skia/+/250578
    Commit-Queue: Herb Derby <herb@google.com>
    Reviewed-by: Mike Klein <mtklein@google.com>

diff --git a/src/core/SkDescriptor.cpp b/src/core/SkDescriptor.cpp
index 28eb677105..0750c89152 100644
--- a/src/core/SkDescriptor.cpp
+++ b/src/core/SkDescriptor.cpp
@@ -85,22 +85,52 @@ uint32_t SkDescriptor::ComputeChecksum(const SkDescriptor* desc) {
     return SkOpts::hash(ptr, len);
 }
 
+#if 0
 bool SkDescriptor::isValid() const {
     uint32_t count = 0;
     size_t offset = sizeof(SkDescriptor);
 
     while (offset < fLength) {
         const Entry* entry = (const Entry*)(reinterpret_cast<const char*>(this) + offset);
         // rec tags are always a known size.
         if (entry->fTag == kRec_SkDescriptorTag && entry->fLen != sizeof(SkScalerContextRec)) {
             return false;
         }
         offset += sizeof(Entry) + entry->fLen;
         count++;
     }
     return offset <= fLength && count == fCount;
 }
+#else
+bool SkDescriptor::isValid() const {
+    uint32_t count = fCount;
+    size_t lengthRemaining = this->fLength;
+    if (lengthRemaining < sizeof(SkDescriptor)) {
+        return false;
+    }
+    lengthRemaining -= sizeof(SkDescriptor);
+    size_t offset = sizeof(SkDescriptor);
 
+    while (lengthRemaining > 0 && count > 0) {
+        const Entry* entry = (const Entry*)(reinterpret_cast<const char*>(this) + offset);
+        // rec tags are always a known size.
+        if (entry->fTag == kRec_SkDescriptorTag && entry->fLen != sizeof(SkScalerContextRec)) {
+            return false;
+        }
+        if (lengthRemaining < sizeof(Entry)) {
+            return false;
+        }
+        lengthRemaining -= sizeof(Entry);
+        if (lengthRemaining < entry->fLen) {
+            return false;
+        }
+        lengthRemaining -= entry->fLen;
+        offset += sizeof(Entry) + entry->fLen;
+        count--;
+    }
+    return lengthRemaining == 0 && count == 0;
+}
+#endif
 SkAutoDescriptor::SkAutoDescriptor() = default;
 SkAutoDescriptor::SkAutoDescriptor(size_t size) { this->reset(size); }
 SkAutoDescriptor::SkAutoDescriptor(const SkDescriptor& desc) { this->reset(desc); }
diff --git a/tests/DescriptorTest.cpp b/tests/DescriptorTest.cpp
index 866b1fb7f1..eab3673b49 100644
--- a/tests/DescriptorTest.cpp
+++ b/tests/DescriptorTest.cpp
@@ -15,6 +15,7 @@
 class SkDescriptorTestHelper {
 public:
     static void SetLength(SkDescriptor* desc, size_t length) { desc->fLength = length; }
+    static void SetCount(SkDescriptor* desc, uint32_t count) { desc->fCount = count; }
 };
 
 DEF_TEST(Descriptor_empty, r) {
@@ -91,15 +92,33 @@ DEF_TEST(Descriptor_invalid_rec_size, r) {
 DEF_TEST(Descriptor_invalid_length, r) {
     const size_t size = sizeof(SkDescriptor) + sizeof(SkDescriptor::Entry);
     const size_t effect_size = 1000;
 
     auto desc = SkDescriptor::Alloc(size);
     desc->init();
-    SkScalerContextRec rec;
     desc->addEntry(kEffects_SkDescriptorTag, effect_size, nullptr);
 
     SkDescriptorTestHelper::SetLength(desc.get(), size);
     REPORTER_ASSERT(r, !desc->isValid());
 
     SkDescriptorTestHelper::SetLength(desc.get(), size + effect_size);
     REPORTER_ASSERT(r, desc->isValid());
 }
+
+DEF_TEST(Descriptor_entry_too_big, r) {
+    const size_t size = sizeof(SkDescriptor) + sizeof(SkDescriptor::Entry) + 4;
+    // Must be less than fLength, but big enough to be bigger then fLength when added.
+    const size_t effect_size = sizeof(SkDescriptor) + sizeof(SkDescriptor::Entry);
+
+    auto desc = SkDescriptor::Alloc(size);
+    desc->init();
+
+    desc->addEntry(kEffects_SkDescriptorTag, effect_size, nullptr);
+
+    SkDescriptorTestHelper::SetLength(desc.get(), size);
+    SkDescriptorTestHelper::SetCount(desc.get(), 2);
+    REPORTER_ASSERT(r, !desc->isValid());
+
+    SkDescriptorTestHelper::SetLength(desc.get(), size);
+    SkDescriptorTestHelper::SetCount(desc.get(), 1);
+    REPORTER_ASSERT(r, !desc->isValid());
+}
