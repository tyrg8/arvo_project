commit 5267858b3d09fbc6a70c4bdcabdd176ea26ee72c
Author: Ivan Nardi <12729895+IvanNardi@users.noreply.github.com>
Date:   Sat Jul 15 22:23:52 2023 +0200

    HTTP: fix another memory access error (#2049)
    
    ```
    =================================================================
    ==199079==ERROR: AddressSanitizer: negative-size-param: (size=-1)
        #0 0x559a2a6efd4f in strncpy (/home/ivan/svnrepos/nDPI/fuzz/fuzz_ndpi_reader+0x94ad4f) (BuildId: 34aaabba403c6bc5482553ef355360fd2762a157)
        #1 0x559a2a9890f0 in ndpi_http_check_content /home/ivan/svnrepos/nDPI/src/lib/protocols/http.c:300:8
        #2 0x559a2a9812c0 in check_content_type_and_change_protocol /home/ivan/svnrepos/nDPI/src/lib/protocols/http.c:910:46
        #3 0x559a2a978fee in process_response /home/ivan/svnrepos/nDPI/src/lib/protocols/http.c:1289:3
        #4 0x559a2a97622f in ndpi_check_http_tcp /home/ivan/svnrepos/nDPI/src/lib/protocols/http.c:1382:9
        #5 0x559a2a975d95 in ndpi_search_http_tcp /home/ivan/svnrepos/nDPI/src/lib/protocols/http.c:1468:3
        #6 0x559a2a864970 in check_ndpi_detection_func /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:5948:4
        #7 0x559a2a8660df in check_ndpi_tcp_flow_func /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:6013:12
        #8 0x559a2a865d7f in ndpi_check_flow_func /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:6032:12
        #9 0x559a2a876fd6 in ndpi_internal_detection_process_packet /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:7038:15
        #10 0x559a2a87311f in ndpi_detection_process_packet /home/ivan/svnrepos/nDPI/src/lib/ndpi_main.c:7205:22
        #11 0x559a2a77381e in packet_processing /home/ivan/svnrepos/nDPI/fuzz/../example/reader_util.c:1710:31
        #12 0x559a2a77381e in ndpi_workflow_process_packet /home/ivan/svnrepos/nDPI/fuzz/../example/reader_util.c:2427:10
    [...]
    ```
    
    Found by oss-fuzz
    See: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=60605

diff --git a/src/lib/protocols/http.c b/src/lib/protocols/http.c
index 6951dd85..27140905 100644
--- a/src/lib/protocols/http.c
+++ b/src/lib/protocols/http.c
@@ -222,143 +222,145 @@ static void ndpi_validate_http_content(struct ndpi_detection_module_struct *ndpi
 /* https://www.freeformatter.com/mime-types-list.html */
 static ndpi_protocol_category_t ndpi_http_check_content(struct ndpi_detection_module_struct *ndpi_struct,
 							struct ndpi_flow_struct *flow) {
   struct ndpi_packet_struct *packet = &ndpi_struct->packet;
 
   if(packet->content_line.len > 0) {
     u_int app_len = sizeof("application");
 
     if(packet->content_line.len > app_len) {
       const char *app     = (const char *)&packet->content_line.ptr[app_len];
       u_int app_len_avail = packet->content_line.len-app_len;
 
       if(strncasecmp(app, "mpeg", app_len_avail) == 0) {
 	flow->guessed_category = flow->category = NDPI_PROTOCOL_CATEGORY_STREAMING;
 	return(flow->category);
       } else {
 	if(app_len_avail > 3) {
 	  const char** cmp_mimes = NULL;
 
 	  switch(app[0]) {
 	  case 'b': cmp_mimes = download_file_mimes_b; break;
 	  case 'o': cmp_mimes = download_file_mimes_o; break;
 	  case 'x': cmp_mimes = download_file_mimes_x; break;
 	  }
 
 	  if(cmp_mimes != NULL) {
 	    u_int8_t i;
 
 	    for(i = 0; cmp_mimes[i] != NULL; i++) {
 	      if(strncasecmp(app, cmp_mimes[i], app_len_avail) == 0) {
 		flow->guessed_category = flow->category = NDPI_PROTOCOL_CATEGORY_DOWNLOAD_FT;
 		NDPI_LOG_INFO(ndpi_struct, "found executable HTTP transfer");
 		break;
 	      }
 	    }
 	  }
 
 	  /* ***************************************** */
 
 	  switch(app[0]) {
 	  case 'e': cmp_mimes = binary_file_mimes_e; break;
 	  case 'j': cmp_mimes = binary_file_mimes_j; break;
 	  case 'v': cmp_mimes = binary_file_mimes_v; break;
 	  case 'x': cmp_mimes = binary_file_mimes_x; break;
 	  }
 
 	  if(cmp_mimes != NULL) {
 	    u_int8_t i;
 
 	    for(i = 0; cmp_mimes[i] != NULL; i++) {
 	      if(strncasecmp(app, cmp_mimes[i], app_len_avail) == 0) {
 		char str[64];
 
 		snprintf(str, sizeof(str), "Found mime exe %s", cmp_mimes[i]);
 		flow->guessed_category = flow->category = NDPI_PROTOCOL_CATEGORY_DOWNLOAD_FT;
 		ndpi_set_binary_application_transfer(ndpi_struct, flow, str);
 		NDPI_LOG_INFO(ndpi_struct, "Found executable HTTP transfer");
 	      }
 	    }
 	  }
 	}
       }
     }
 
     /* check for attachment */
     if(packet->content_disposition_line.len > 0) {
       u_int8_t attachment_len = sizeof("attachment; filename");
 
       if(packet->content_disposition_line.len > attachment_len &&
          strncmp((char *)packet->content_disposition_line.ptr, "attachment; filename", 20) == 0) {
 	u_int8_t filename_len = packet->content_disposition_line.len - attachment_len;
 	int i;
 
 	if(packet->content_disposition_line.ptr[attachment_len] == '\"') {
 	  if(packet->content_disposition_line.ptr[packet->content_disposition_line.len-1] != '\"') {
 	    //case: filename="file_name
-	    flow->http.filename = ndpi_malloc(filename_len);
-	    if(flow->http.filename != NULL) {
-	      strncpy(flow->http.filename, (char*)packet->content_disposition_line.ptr+attachment_len+1, filename_len-1);
-	      flow->http.filename[filename_len-1] = '\0';
+	    if(filename_len >= 2) {
+	      flow->http.filename = ndpi_malloc(filename_len);
+	      if(flow->http.filename != NULL) {
+	        strncpy(flow->http.filename, (char*)packet->content_disposition_line.ptr+attachment_len+1, filename_len-1);
+	        flow->http.filename[filename_len-1] = '\0';
+	      }
 	    }
 	  }
 	  else if(filename_len >= 2) {
 	    //case: filename="file_name"
 	    flow->http.filename = ndpi_malloc(filename_len-1);
 
 	    if(flow->http.filename != NULL) {
 	      strncpy(flow->http.filename, (char*)packet->content_disposition_line.ptr+attachment_len+1,
 		      filename_len-2);
 	      flow->http.filename[filename_len-2] = '\0';
 	    }
 	  }
 	} else {
 	  //case: filename=file_name
 	  flow->http.filename = ndpi_malloc(filename_len+1);
 
 	  if(flow->http.filename != NULL) {
 	    strncpy(flow->http.filename, (char*)packet->content_disposition_line.ptr+attachment_len, filename_len);
 	    flow->http.filename[filename_len] = '\0';
 	  }
 	}
 
 	if(filename_len > ATTACHMENT_LEN) {
 	  attachment_len += filename_len-ATTACHMENT_LEN-1;
 
 	  if((attachment_len+ATTACHMENT_LEN) <= packet->content_disposition_line.len) {
 	    for(i = 0; binary_file_ext[i] != NULL; i++) {
 	      /* Use memcmp in case content-disposition contains binary data */
 	      if(memcmp(&packet->content_disposition_line.ptr[attachment_len],
 			binary_file_ext[i], ATTACHMENT_LEN) == 0) {
 		char str[64];
 
 		snprintf(str, sizeof(str), "Found file extn %s", binary_file_ext[i]);
 		flow->guessed_category = flow->category = NDPI_PROTOCOL_CATEGORY_DOWNLOAD_FT;
 		ndpi_set_binary_application_transfer(ndpi_struct, flow, str);
 		NDPI_LOG_INFO(ndpi_struct, "found executable HTTP transfer");
 		return(flow->category);
 	      }
 	    }
 	  }
 	}
       }
     }
 
     switch(packet->content_line.ptr[0]) {
     case 'a':
       if(strncasecmp((const char *)packet->content_line.ptr, "audio",
 		     ndpi_min(packet->content_line.len, 5)) == 0)
 	flow->guessed_category = flow->category = NDPI_PROTOCOL_CATEGORY_MEDIA;
       break;
 
     case 'v':
       if(strncasecmp((const char *)packet->content_line.ptr, "video",
 		     ndpi_min(packet->content_line.len, 5)) == 0)
 	flow->guessed_category = flow->category = NDPI_PROTOCOL_CATEGORY_MEDIA;
       break;
     }
   }
 
   return(flow->category);
 }
 
 /* *********************************************** */
