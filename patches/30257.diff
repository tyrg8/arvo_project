commit 36b8c01b1091ab51720ab6697c83534cfcf2e292
Author: tbeu <tbeu@users.noreply.github.com>
Date:   Sat Feb 6 21:44:29 2021 +0100

    Check success of H5Gget_info

diff --git a/src/mat.c b/src/mat.c
index 8490cc1..2c035bf 100644
--- a/src/mat.c
+++ b/src/mat.c
@@ -434,190 +434,196 @@ mat_t *
 Mat_Open(const char *matname,int mode)
 {
     FILE *fp = NULL;
     mat_int16_t tmp, tmp2;
     mat_t *mat = NULL;
     size_t bytesread = 0;
 
     if ( (mode & 0x01) == MAT_ACC_RDONLY ) {
 #if defined(_WIN32) && defined(_MSC_VER)
         wchar_t* wname = utf82u(matname);
         if ( NULL != wname ) {
             fp = _wfopen(wname, L"rb");
             free(wname);
         }
 #else
         fp = fopen(matname, "rb");
 #endif
         if ( !fp )
             return NULL;
     } else if ( (mode & 0x01) == MAT_ACC_RDWR ) {
 #if defined(_WIN32) && defined(_MSC_VER)
         wchar_t* wname = utf82u(matname);
         if ( NULL != wname ) {
             fp = _wfopen(wname, L"r+b");
             free(wname);
         }
 #else
         fp = fopen(matname, "r+b");
 #endif
         if ( !fp ) {
             mat = Mat_CreateVer(matname,NULL,(enum mat_ft)(mode&0xfffffffe));
             return mat;
         }
     } else {
         Mat_Critical("Invalid file open mode");
         return NULL;
     }
 
     mat = (mat_t*)malloc(sizeof(*mat));
     if ( NULL == mat ) {
         fclose(fp);
         Mat_Critical("Couldn't allocate memory for the MAT file");
         return NULL;
     }
 
     mat->fp = fp;
     mat->header = (char*)calloc(128,sizeof(char));
     if ( NULL == mat->header ) {
         free(mat);
         fclose(fp);
         Mat_Critical("Couldn't allocate memory for the MAT file header");
         return NULL;
     }
     mat->subsys_offset = (char*)calloc(8,sizeof(char));
     if ( NULL == mat->subsys_offset ) {
         free(mat->header);
         free(mat);
         fclose(fp);
         Mat_Critical("Couldn't allocate memory for the MAT file subsys offset");
         return NULL;
     }
     mat->filename      = NULL;
     mat->version       = 0;
     mat->byteswap      = 0;
     mat->num_datasets  = 0;
 #if defined(MAT73) && MAT73
     mat->refs_id       = -1;
 #endif
     mat->dir           = NULL;
 
     bytesread += fread(mat->header,1,116,fp);
     mat->header[116] = '\0';
     bytesread += fread(mat->subsys_offset,1,8,fp);
     bytesread += 2*fread(&tmp2,2,1,fp);
     bytesread += fread(&tmp,1,2,fp);
 
     if ( 128 == bytesread ) {
         /* v5 and v7.3 files have at least 128 byte header */
         mat->byteswap = -1;
         if ( tmp == 0x4d49 )
             mat->byteswap = 0;
         else if ( tmp == 0x494d ) {
             mat->byteswap = 1;
             Mat_int16Swap(&tmp2);
         }
 
         mat->version = (int)tmp2;
         if ( (mat->version == 0x0100 || mat->version == 0x0200) &&
              -1 != mat->byteswap ) {
             mat->bof = ftell((FILE*)mat->fp);
             if ( mat->bof == -1L ) {
                 free(mat->header);
                 free(mat->subsys_offset);
                 free(mat);
                 fclose(fp);
                 Mat_Critical("Couldn't determine file position");
                 return NULL;
             }
             mat->next_index = 0;
         } else {
             mat->version = 0;
         }
     }
 
     if ( 0 == mat->version ) {
         /* Maybe a V4 MAT file */
         matvar_t *var;
 
         free(mat->header);
         free(mat->subsys_offset);
 
         mat->header        = NULL;
         mat->subsys_offset = NULL;
         mat->fp            = fp;
         mat->version       = MAT_FT_MAT4;
         mat->byteswap      = 0;
         mat->mode          = mode;
         mat->bof           = 0;
         mat->next_index    = 0;
 #if defined(MAT73) && MAT73
         mat->refs_id       = -1;
 #endif
 
         Mat_Rewind(mat);
         var = Mat_VarReadNextInfo4(mat);
         if ( NULL == var &&
              bytesread != 0 ) { /* Accept 0 bytes files as a valid V4 file */
             /* Does not seem to be a valid V4 file */
             Mat_Close(mat);
             mat = NULL;
             Mat_Critical("\"%s\" does not seem to be a valid MAT file",matname);
         } else {
             Mat_VarFree(var);
             Mat_Rewind(mat);
         }
     }
 
     if ( NULL == mat )
         return mat;
 
     mat->filename = strdup(matname);
     mat->mode = mode;
 
     if ( mat->version == 0x0200 ) {
         fclose((FILE*)mat->fp);
 #if defined(MAT73) && MAT73
         mat->fp = malloc(sizeof(hid_t));
 
         if ( (mode & 0x01) == MAT_ACC_RDONLY )
             *(hid_t*)mat->fp=H5Fopen(matname,H5F_ACC_RDONLY,H5P_DEFAULT);
         else if ( (mode & 0x01) == MAT_ACC_RDWR ) {
             hid_t plist_ap;
             plist_ap = H5Pcreate(H5P_FILE_ACCESS);
 #if H5_VERSION_GE(1,10,2)
             H5Pset_libver_bounds(plist_ap,H5F_LIBVER_EARLIEST,H5F_LIBVER_V18);
 #endif
             *(hid_t*)mat->fp=H5Fopen(matname,H5F_ACC_RDWR,plist_ap);
             H5Pclose(plist_ap);
         } else {
             mat->fp = NULL;
             Mat_Close(mat);
             mat = NULL;
         }
 
         if ( -1 < *(hid_t*)mat->fp ) {
             H5G_info_t group_info;
+            herr_t herr;
             memset(&group_info, 0, sizeof(group_info));
-            H5Gget_info(*(hid_t*)mat->fp, &group_info);
-            mat->num_datasets = (size_t)group_info.nlinks;
-            mat->refs_id      = -1;
+            herr = H5Gget_info(*(hid_t*)mat->fp, &group_info);
+            if ( herr < 0 ) {
+                Mat_Close(mat);
+                mat = NULL;
+            } else {
+                mat->num_datasets = (size_t)group_info.nlinks;
+                mat->refs_id = -1;
+            }
         }
 #else
         mat->fp = NULL;
         Mat_Close(mat);
         mat = NULL;
         Mat_Critical("No HDF5 support which is required to read the v7.3 "
                      "MAT file \"%s\"",matname);
 #endif
     }
 
     return mat;
 }
 
 /** @brief Closes an open Matlab MAT file
  *
  * Closes the given Matlab MAT file and frees any memory with it.
  * @ingroup MAT
  * @param mat Pointer to the MAT file
  * @retval 0 on success
  */
diff --git a/src/mat73.c b/src/mat73.c
index edcf21b..671a8bc 100644
--- a/src/mat73.c
+++ b/src/mat73.c
@@ -823,257 +823,257 @@ static int
 Mat_H5ReadGroupInfo(mat_t *mat,matvar_t *matvar,hid_t dset_id)
 {
     int      fields_are_variables = 1;
     hsize_t  nfields=0,nelems;
     hid_t    attr_id,field_id;
     matvar_t **fields;
     H5O_type_t obj_type;
     int err;
 
     err = Mat_H5ReadVarInfo(matvar,dset_id);
     if ( err < 0 ) {
         return err;
     }
 
     /* Check if the variable is sparse */
     if ( H5Aexists_by_name(dset_id,".","MATLAB_sparse",H5P_DEFAULT) ) {
         herr_t herr;
         hid_t sparse_dset_id;
         unsigned nrows = 0;
 
         attr_id = H5Aopen_by_name(dset_id,".","MATLAB_sparse",H5P_DEFAULT,H5P_DEFAULT);
         herr = H5Aread(attr_id,H5T_NATIVE_UINT,&nrows);
         H5Aclose(attr_id);
         if ( herr < 0 ) {
             return MATIO_E_GENERIC_READ_ERROR;
         }
 
         matvar->class_type = MAT_C_SPARSE;
 
         sparse_dset_id = H5Dopen(dset_id,"jc",H5P_DEFAULT);
         matvar->dims = Mat_H5ReadDims(sparse_dset_id, &nelems, &matvar->rank);
         H5Dclose(sparse_dset_id);
         if ( NULL != matvar->dims ) {
             if ( 1 == matvar->rank ) {
                 size_t* dims = (size_t*)realloc(matvar->dims, 2*sizeof(*matvar->dims));
                 if ( NULL != dims ) {
                     matvar->rank = 2;
                     matvar->dims = dims;
                 }
             }
             if ( 2 == matvar->rank ) {
                 matvar->dims[1] = matvar->dims[0] - 1;
                 matvar->dims[0] = nrows;
             }
         } else {
             return MATIO_E_UNKNOWN_ERROR;
         }
 
         /* Test if dataset type is compound and if so if it's complex */
         if ( H5Lexists(dset_id,"data",H5P_DEFAULT) ) {
             hid_t type_id;
             sparse_dset_id = H5Dopen(dset_id,"data",H5P_DEFAULT);
             type_id = H5Dget_type(sparse_dset_id);
             if ( H5T_COMPOUND == H5Tget_class(type_id) ) {
                 /* FIXME: Any more checks? */
                 matvar->isComplex = MAT_F_COMPLEX;
             }
             H5Tclose(type_id);
             H5Dclose(sparse_dset_id);
         }
         return MATIO_E_NO_ERROR;
     }
 
     if (MAT_C_STRUCT != matvar->class_type ) {
         return MATIO_E_GENERIC_READ_ERROR;
     }
 
     /* Check if the structure defines its fields in MATLAB_fields */
     if ( H5Aexists_by_name(dset_id,".","MATLAB_fields",H5P_DEFAULT) ) {
         err = Mat_H5ReadFieldNames(matvar, dset_id, &nfields);
         if ( err ) {
             return err;
         }
     } else {
+        herr_t herr;
         H5G_info_t group_info;
         matvar->internal->num_fields = 0;
         group_info.nlinks = 0;
-        H5Gget_info(dset_id, &group_info);
-        if ( group_info.nlinks > 0 ) {
+        herr = H5Gget_info(dset_id, &group_info);
+        if ( herr >= 0 && group_info.nlinks > 0 ) {
             struct ReadGroupInfoIterData group_data = {0, NULL};
-            herr_t herr;
 
             /* First iteration to retrieve number of relevant links */
             herr = H5Literate_by_name(dset_id, matvar->internal->hdf5_name, H5_INDEX_NAME,
                 H5_ITER_NATIVE, NULL, Mat_H5ReadGroupInfoIterate,
                 (void *)&group_data, H5P_DEFAULT);
             if ( herr > 0 && group_data.nfields > 0 ) {
                 matvar->internal->fieldnames =
                     (char**)calloc((size_t)(group_data.nfields),sizeof(*matvar->internal->fieldnames));
                 group_data.nfields = 0;
                 group_data.matvar = matvar;
                 if ( matvar->internal->fieldnames != NULL ) {
                     /* Second iteration to fill fieldnames */
                     H5Literate_by_name(dset_id, matvar->internal->hdf5_name, H5_INDEX_NAME,
                         H5_ITER_NATIVE, NULL, Mat_H5ReadGroupInfoIterate,
                         (void *)&group_data, H5P_DEFAULT);
                 }
                 matvar->internal->num_fields = (unsigned)group_data.nfields;
                 nfields = group_data.nfields;
             }
         }
     }
 
     if ( nfields > 0 ) {
         H5O_INFO_T object_info;
         object_info.type = H5O_TYPE_UNKNOWN;
         H5OGET_INFO_BY_NAME(dset_id, matvar->internal->fieldnames[0], &object_info, H5P_DEFAULT);
         obj_type = object_info.type;
     } else {
         obj_type = H5O_TYPE_UNKNOWN;
     }
     if ( obj_type == H5O_TYPE_DATASET ) {
         hid_t field_type_id;
         field_id = H5Dopen(dset_id,matvar->internal->fieldnames[0],H5P_DEFAULT);
         field_type_id = H5Dget_type(field_id);
         if ( H5T_REFERENCE == H5Tget_class(field_type_id) ) {
             /* Check if the field has the MATLAB_class attribute. If so, it
              * means the structure is a scalar. Otherwise, the dimensions of
              * the field dataset is the dimensions of the structure
              */
             if ( H5Aexists_by_name(field_id,".","MATLAB_class",H5P_DEFAULT) ) {
                 matvar->rank = 2;
                 matvar->dims = (size_t*)malloc(2*sizeof(*matvar->dims));
                 if ( NULL != matvar->dims ) {
                     matvar->dims[0] = 1;
                     matvar->dims[1] = 1;
                     nelems = 1;
                 } else {
                     H5Tclose(field_type_id);
                     H5Dclose(field_id);
                     Mat_Critical("Error allocating memory for matvar->dims");
                     return MATIO_E_OUT_OF_MEMORY;
                 }
             } else {
                 matvar->dims = Mat_H5ReadDims(field_id, &nelems, &matvar->rank);
                 if ( NULL != matvar->dims ) {
                     fields_are_variables = 0;
                 } else {
                     H5Tclose(field_type_id);
                     H5Dclose(field_id);
                     return MATIO_E_UNKNOWN_ERROR;
                 }
             }
         } else {
             /* Structure should be a scalar */
             matvar->rank = 2;
             matvar->dims = (size_t*)malloc(2*sizeof(*matvar->dims));
             if ( NULL != matvar->dims ) {
                 matvar->dims[0] = 1;
                 matvar->dims[1] = 1;
                 nelems = 1;
             } else {
                 H5Tclose(field_type_id);
                 H5Dclose(field_id);
                 Mat_Critical("Error allocating memory for matvar->dims");
                 return MATIO_E_UNKNOWN_ERROR;
             }
         }
         H5Tclose(field_type_id);
         H5Dclose(field_id);
     } else {
         /* Structure should be a scalar */
         matvar->rank = 2;
         matvar->dims = (size_t*)malloc(2*sizeof(*matvar->dims));
         if ( NULL != matvar->dims ) {
             matvar->dims[0] = 1;
             matvar->dims[1] = 1;
             nelems = 1;
         } else {
             Mat_Critical("Error allocating memory for matvar->dims");
             return MATIO_E_OUT_OF_MEMORY;
         }
     }
 
     if ( nelems < 1 || nfields < 1 )
         return err;
 
     matvar->data_size = sizeof(*fields);
     {
         size_t nelems_x_nfields;
         err = Mul(&nelems_x_nfields, nelems, nfields);
         err |= Mul(&matvar->nbytes, nelems_x_nfields, matvar->data_size);
         if ( err ) {
             Mat_Critical("Integer multiplication overflow");
             matvar->nbytes = 0;
             return err;
         }
     }
     fields = (matvar_t**)calloc(matvar->nbytes, 1);
     matvar->data = fields;
     if ( NULL != fields ) {
         hsize_t k;
         for ( k = 0; k < nfields; k++ ) {
             H5O_INFO_T object_info;
             fields[k] = NULL;
             object_info.type = H5O_TYPE_UNKNOWN;
             H5OGET_INFO_BY_NAME(dset_id, matvar->internal->fieldnames[k], &object_info, H5P_DEFAULT);
             if ( object_info.type == H5O_TYPE_DATASET ) {
                 field_id = H5Dopen(dset_id,matvar->internal->fieldnames[k], H5P_DEFAULT);
                 if ( !fields_are_variables ) {
                     hobj_ref_t *ref_ids = (hobj_ref_t*)calloc((size_t)nelems, sizeof(*ref_ids));
                     if ( ref_ids != NULL ) {
                         hsize_t l;
                         herr_t herr = H5Dread(field_id,H5T_STD_REF_OBJ,H5S_ALL,H5S_ALL,
                             H5P_DEFAULT,ref_ids);
                         if ( herr < 0 ) {
                             err = MATIO_E_GENERIC_READ_ERROR;
                         } else {
                             for ( l = 0; l < nelems; l++ ) {
                                 hid_t ref_id;
                                 fields[l*nfields+k] = Mat_VarCalloc();
                                 fields[l*nfields+k]->name =
                                     strdup(matvar->internal->fieldnames[k]);
                                 fields[l*nfields+k]->internal->hdf5_ref=ref_ids[l];
                                 /* Closing of ref_id is done in Mat_H5ReadNextReferenceInfo */
                                 ref_id = H5RDEREFERENCE(field_id,H5R_OBJECT,ref_ids+l);
                                 if ( ref_id < 0 ) {
                                     err = MATIO_E_GENERIC_READ_ERROR;
                                 } else {
                                     fields[l*nfields+k]->internal->id = ref_id;
                                     err = Mat_H5ReadNextReferenceInfo(ref_id,fields[l*nfields+k],mat);
                                 }
                                 if ( err ) {
                                     break;
                                 }
                             }
                         }
                         free(ref_ids);
                     } else {
                         err = MATIO_E_OUT_OF_MEMORY;
                     }
                 } else {
                     fields[k] = Mat_VarCalloc();
                     fields[k]->name = strdup(matvar->internal->fieldnames[k]);
                     err = Mat_H5ReadDatasetInfo(mat,fields[k],field_id);
                 }
                 H5Dclose(field_id);
             } else if ( object_info.type == H5O_TYPE_GROUP ) {
                 field_id = H5Gopen(dset_id,matvar->internal->fieldnames[k],
                                    H5P_DEFAULT);
                 if ( -1 < field_id ) {
                     fields[k] = Mat_VarCalloc();
                     fields[k]->name = strdup(matvar->internal->fieldnames[k]);
                     err = Mat_H5ReadGroupInfo(mat,fields[k],field_id);
                     H5Gclose(field_id);
                 }
             }
             if ( err ) {
                 break;
             }
         }
     } else {
         err = MATIO_E_OUT_OF_MEMORY;
     }
 
     return err;
 }
@@ -1375,18 +1375,22 @@ static int
 Mat_VarWriteRef(hid_t id, matvar_t* matvar, enum matio_compression compression, hid_t *refs_id, hobj_ref_t* ref)
 {
     int err;
+    herr_t herr;
     char obj_name[64];
     H5G_info_t group_info;
 
     group_info.nlinks = 0;
-    H5Gget_info(*refs_id, &group_info);
-    sprintf(obj_name,"%llu", group_info.nlinks);
-    if ( NULL != matvar )
-        matvar->compression = compression;
-    err = Mat_VarWriteNext73(*refs_id, matvar, obj_name, refs_id);
-    sprintf(obj_name, "/#refs#/%llu", group_info.nlinks);
-    H5Rcreate(ref, id, obj_name, H5R_OBJECT, -1);
-
+    herr = H5Gget_info(*refs_id, &group_info);
+    if ( herr < 0) {
+        err = MATIO_E_BAD_ARGUMENT;
+    } else {
+        sprintf(obj_name,"%llu", group_info.nlinks);
+        if ( NULL != matvar )
+            matvar->compression = compression;
+        err = Mat_VarWriteNext73(*refs_id, matvar, obj_name, refs_id);
+        sprintf(obj_name, "/#refs#/%llu", group_info.nlinks);
+        H5Rcreate(ref, id, obj_name, H5R_OBJECT, -1);
+    }
     return err;
 }
 
