commit b81c5ad26f879bc0e949a4dc42cb5e234c2ad371
Author: Jakub Zawadzki <darkjames-ws@darkjames.pl>
Date:   Tue Jan 30 23:23:17 2018 +0100

    ieee1905: add missing NULL terminatator to ieee1905_reporting_policy_flags[].
    
    Add missing NULL terminator to ieee1905_reporting_policy_flags[], in order to fix buffer overflow.
    
    ASAN report:
    
    ERROR: AddressSanitizer: global-buffer-overflow on address 0x0000092a4af8 at pc 0x00000062afd2 bp 0x7ffce7e468d0 sp 0x7ffce7e468c8
    READ of size 8 at 0x0000092a4af8 thread T0
        #0 0x62afd1 in proto_item_add_bitmask_tree /src/wireshark/epan/proto.c:10406:9
        #1 0x62953f in proto_tree_add_bitmask_with_flags /src/wireshark/epan/proto.c:10786:3
        #2 0xfb8271 in dissect_metric_reporting_policy /src/wireshark/epan/dissectors/packet-ieee1905.c:2762:9
        #3 0xfb2997 in dissect_ieee1905_tlv_data /src/wireshark/epan/dissectors/packet-ieee1905.c:4390:18
        #4 0xfb23c8 in dissect_ieee1905 /src/wireshark/epan/dissectors/packet-ieee1905.c:4577:18
    
    Found by oss-fuzz/5298.
    
    Change-Id: I35dbd6d29d0a3a5560286146fbed172c810e5b2d
    Link: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=5298
    Reviewed-on: https://code.wireshark.org/review/25520
    Petri-Dish: Jakub Zawadzki <darkjames-ws@darkjames.pl>
    Tested-by: Petri Dish Buildbot
    Reviewed-by: Jakub Zawadzki <darkjames-ws@darkjames.pl>

diff --git a/epan/dissectors/packet-ieee1905.c b/epan/dissectors/packet-ieee1905.c
index 40837e7b1a..1567bc5e97 100644
--- a/epan/dissectors/packet-ieee1905.c
+++ b/epan/dissectors/packet-ieee1905.c
@@ -2708,72 +2708,73 @@ static int
 dissect_metric_reporting_policy(tvbuff_t *tvb, packet_info *pinfo _U_,
         proto_tree *tree, guint offset)
 {
     guint8 radio_count = 0, radio_index = 0;
     proto_tree *radio_list = NULL;
     proto_tree *radio_tree = NULL;
     proto_item *pi = NULL;
     guint saved_offset = 0;
     static const int *ieee1905_reporting_policy_flags[] = {
         &hf_ieee1905_assoc_sta_traffic_stats_inclusion,
         &hf_ieee1905_assoc_sta_link_metrics_inclusion,
-        &hf_ieee1905_reporting_policy_flags_reserved
+        &hf_ieee1905_reporting_policy_flags_reserved,
+        NULL
     };
 
     proto_tree_add_item(tree, hf_ieee1905_ap_metrics_reporting_interval,
                         tvb, offset, 1, ENC_NA);
     offset++;
 
     radio_count = tvb_get_guint8(tvb, offset);
     proto_tree_add_item(tree, hf_ieee1905_metric_reporting_radio_count,
                         tvb, offset, 1, ENC_NA);
     offset++;
 
     if (radio_count == 0)
         return offset;
 
     radio_list = proto_tree_add_subtree(tree, tvb, offset, -1,
                         ett_metric_reporting_policy_list, &pi,
                         "Metric reporting policy list");
     saved_offset = offset;
 
     while (radio_index < radio_count) {
         radio_tree = proto_tree_add_subtree_format(radio_list,
                                 tvb, offset, 8,
                                 ett_metric_reporting_policy_tree, NULL,
                                 "Reporting policy for radio %u",
                                 radio_index);
 
         proto_tree_add_item(radio_tree, hf_ieee1905_metric_reporting_policy_radio_id,
                             tvb, offset, 6, ENC_NA);
         offset += 6;
 
         proto_tree_add_item(radio_tree, hf_ieee1905_metrics_rssi_threshold, tvb,
                             offset, 1, ENC_NA);
         offset++;
 
         proto_tree_add_item(radio_tree, hf_ieee1905_metric_reporting_rssi_hysteresis,
                             tvb, offset, 1, ENC_NA);
         offset++;
 
         proto_tree_add_item(radio_tree, hf_ieee1905_metrics_channel_util_threshold,
                             tvb, offset, 1, ENC_NA);
         offset++;
 
         proto_tree_add_bitmask_with_flags(radio_tree, tvb, offset,
                             hf_ieee1905_metrics_policy_flags,
                             ett_metric_policy_flags,
                             ieee1905_reporting_policy_flags, ENC_NA,
                             BMT_NO_APPEND);
         offset++;
 
         radio_index++;
     }
 
     proto_item_set_len(pi, offset - saved_offset);
 
     return offset;
 }
 
 /*
  * Dissect a Channel Preference TLV
  */
