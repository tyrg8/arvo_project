commit fbc52d37c6a7e8cc75e4950d2621cbd907c6cf8a
Author: seladb <pcapplusplus@gmail.com>
Date:   Tue Sep 15 13:23:00 2020 +0530

    Bugfixes 23593, 23601 in oss fuzz: buffer overflow and HTTP and SIP layers

diff --git a/Common++/header/GeneralUtils.h b/Common++/header/GeneralUtils.h
index 622aa7f6..341a15f8 100644
--- a/Common++/header/GeneralUtils.h
+++ b/Common++/header/GeneralUtils.h
@@ -9,36 +9,46 @@
 /**
  * \namespace pcpp
  * \brief The main namespace for the PcapPlusPlus lib
  */
 namespace pcpp
 {
 	/**
 	 * Convert a byte array into a string of hex characters. For example: for the array { 0xaa, 0x2b, 0x10 } the string
 	 * "aa2b10" will be returned
 	 * @param[in] byteArr A byte array
 	 * @param[in] byteArrSize The size of the byte array [in bytes]
 	 * @param[in] stringSizeLimit An optional parameter that enables to limit the returned string size. If set to a positive
 	 * integer value the returned string size will be equal or less than this value. If the string representation of the
 	 * whole array is longer than this size then only part of the array will be read. The default value is -1 which means no
 	 * string size limitation
 	 * @return A string of hex characters representing the byte array
 	 */
 	std::string byteArrayToHexString(const uint8_t* byteArr, size_t byteArrSize, int stringSizeLimit = -1);
 
 	/**
 	 * Convert a string of hex characters into a byte array. For example: for the string "aa2b10" an array of values
 	 * { 0xaa, 0x2b, 0x10 } will be returned
 	 * @param[in] hexString A string of hex characters
 	 * @param[out] resultByteArr A pre-allocated byte array where the result will be written to
 	 * @param[in] resultByteArrSize The size of the pre-allocated byte array
 	 * @return The size of the result array. If the string represents an array that is longer than the pre-allocated size
 	 * (resultByteArrSize) then the result array will contain only the part of the string that managed to fit into the
 	 * array, and the returned size will be resultByteArrSize. However if the string represents an array that is shorter
 	 * than the pre-allocated size then some of the cells will remain empty and contain zeros, and the returned size will
 	 * be the part of the array that contain data. If the input is an illegal hex string 0 will be returned.
 	 * Illegal hex string means odd number of characters or a string that contains non-hex characters
 	 */
 	size_t hexStringToByteArray(const std::string& hexString, uint8_t* resultByteArr, size_t resultByteArrSize);
+
+	/**
+	 * This is a cross platform version of memmem (https://man7.org/linux/man-pages/man3/memmem.3.html) which is not supported
+	 * on all platforms.
+	 * @param[in] haystack A pointer to the buffer to be searched
+	 * @param[in] haystackLen Length of the haystack buffer
+	 * @param[in] needle A pointer to a buffer that will be searched for
+	 * @param[in] needleLen Length of the needle buffer
+	 */
+	char* cross_platform_memmem(const char* haystack, size_t haystackLen, const char* needle, size_t needleLen);
 }
 
 #endif // PCAPPP_GENERAL_UTILS
diff --git a/Common++/src/GeneralUtils.cpp b/Common++/src/GeneralUtils.cpp
index 37407c11..9ab6b1a3 100644
--- a/Common++/src/GeneralUtils.cpp
+++ b/Common++/src/GeneralUtils.cpp
@@ -42,30 +42,50 @@ static int char2int(char input)
 size_t hexStringToByteArray(const std::string& hexString, uint8_t* resultByteArr, size_t resultByteArrSize)
 {
 	if (hexString.size() % 2 != 0)
 	{
 		LOG_ERROR("Input string is in odd size");
 		return 0;
 	}
 
 	memset(resultByteArr, 0, resultByteArrSize);
 	for (size_t i = 0; i < hexString.length(); i += 2)
 	{
 		if (i >= resultByteArrSize * 2)
 			return resultByteArrSize;
 
 		int firstChar = char2int(hexString[i]);
 		int secondChar = char2int(hexString[i + 1]);
 		if (firstChar < 0 || secondChar < 0)
 		{
 			LOG_ERROR("Input string has an illegal character");
 			resultByteArr[0] = '\0';
 			return 0;
 		}
 
 		resultByteArr[i / 2] = (firstChar << 4) | secondChar;
 	}
 
 	return hexString.length() / 2;
 }
 
+
+char* cross_platform_memmem(const char* haystack, size_t haystackLen, const char* needle, size_t needleLen)
+{
+	char* ptr = (char*)haystack;
+	while (needleLen <= (haystackLen - (ptr - haystack)))
+	{
+		if (NULL != (ptr = (char*)memchr(ptr, (int)(*needle), haystackLen - (ptr - haystack))))
+		{
+			if (0 == memcmp(ptr, needle, needleLen))
+				return ptr;
+			else
+				++ptr;
+		}
+		else
+			break;
+	}
+
+	return NULL;
+}
+
 }
diff --git a/Packet++/src/HttpLayer.cpp b/Packet++/src/HttpLayer.cpp
index 1767fdf9..680691f9 100644
--- a/Packet++/src/HttpLayer.cpp
+++ b/Packet++/src/HttpLayer.cpp
@@ -1,8 +1,9 @@
 #define LOG_MODULE PacketLogModuleHttpLayer
 
 #include "Logger.h"
+#include "GeneralUtils.h"
 #include "HttpLayer.h"
 #include <string.h>
 #include <algorithm>
 #include <stdlib.h>
 #include <exception>
@@ -336,45 +337,45 @@ HttpRequestLayer::HttpMethod HttpRequestFirstLine::parseMethod(char* data, size_
 void HttpRequestFirstLine::parseVersion()
 {
 	char* data = (char*)(m_HttpRequest->m_Data + m_UriOffset);
-	char* verPos = strstr(data, " HTTP/");
+	char* verPos = cross_platform_memmem(data, m_HttpRequest->getDataLen() - m_UriOffset, " HTTP/", 6);
 	if (verPos == NULL)
 	{
 		m_Version = HttpVersionUnknown;
 		m_VersionOffset = -1;
 		return;
 	}
 
 	// verify packet doesn't end before the version, meaning still left place for " HTTP/x.y" (9 chars)
 	if ((uint16_t)(verPos + 9 - (char*)m_HttpRequest->m_Data) > m_HttpRequest->getDataLen())
 	{
 		m_Version = HttpVersionUnknown;
 		m_VersionOffset = -1;
 		return;
 	}
 
 	//skip " HTTP/" (6 chars)
 	verPos += 6;
 	switch (verPos[0])
 	{
 	case '0':
 		if (verPos[1] == '.' && verPos[2] == '9')
 			m_Version = ZeroDotNine;
 		else
 			m_Version = HttpVersionUnknown;
 		break;
 
 	case '1':
 		if (verPos[1] == '.' && verPos[2] == '0')
 			m_Version = OneDotZero;
 		else if (verPos[1] == '.' && verPos[2] == '1')
 			m_Version = OneDotOne;
 		else
 			m_Version = HttpVersionUnknown;
 		break;
 
 	default:
 		m_Version = HttpVersionUnknown;
 	}
 
 	m_VersionOffset = verPos - (char*)m_HttpRequest->m_Data;
 }
diff --git a/Packet++/src/SipLayer.cpp b/Packet++/src/SipLayer.cpp
index 847f7ecf..6fcf155c 100644
--- a/Packet++/src/SipLayer.cpp
+++ b/Packet++/src/SipLayer.cpp
@@ -1,10 +1,11 @@
 #define LOG_MODULE PacketLogModuleSipLayer
 
 #include "SipLayer.h"
 #include "SdpLayer.h"
 #include "PayloadLayer.h"
 #include "Logger.h"
+#include "GeneralUtils.h"
 #include <string.h>
 #include <algorithm>
 #include <stdlib.h>
 #include <exception>
@@ -287,30 +288,30 @@ SipRequestLayer::SipMethod SipRequestFirstLine::parseMethod(char* data, size_t d
 void SipRequestFirstLine::parseVersion()
 {
 	char* data = (char*)(m_SipRequest->m_Data + m_UriOffset);
-	char* verPos = strstr(data, " SIP/");
+	char* verPos = (char*)cross_platform_memmem(data, m_SipRequest->getDataLen() - m_UriOffset, " SIP/", 5);
 	if (verPos == NULL)
 	{
 		m_Version = "";
 		m_VersionOffset = -1;
 		return;
 	}
 
 	// verify packet doesn't end before the version, meaning still left place for " SIP/x.y" (7 chars)
 	if ((uint16_t)(verPos + 7 - (char*)m_SipRequest->m_Data) > m_SipRequest->getDataLen())
 	{
 		m_Version = "";
 		m_VersionOffset = -1;
 		return;
 	}
 
 	//skip the space char
 	verPos++;
 
 	int endOfVerPos = 0;
 	while (((verPos+endOfVerPos)[0] != '\r') && ((verPos+endOfVerPos)[0] != '\n'))
 		endOfVerPos++;
 
 	m_Version = std::string(verPos, endOfVerPos);
 
 	m_VersionOffset = verPos - (char*)m_SipRequest->m_Data;
 }
diff --git a/Packet++/src/TextBasedProtocol.cpp b/Packet++/src/TextBasedProtocol.cpp
index f9c8ae1e..850a5538 100644
--- a/Packet++/src/TextBasedProtocol.cpp
+++ b/Packet++/src/TextBasedProtocol.cpp
@@ -436,77 +436,77 @@ void TextBasedProtocolMessage::computeCalculateFields()
 HeaderField::HeaderField(TextBasedProtocolMessage* TextBasedProtocolMessage, int offsetInMessage, char nameValueSeperator, bool spacesAllowedBetweenNameAndValue) :
 		m_NewFieldData(NULL), m_TextBasedProtocolMessage(TextBasedProtocolMessage), m_NameOffsetInMessage(offsetInMessage), m_NextField(NULL),
 		m_NameValueSeperator(nameValueSeperator), m_SpacesAllowedBetweenNameAndValue(spacesAllowedBetweenNameAndValue)
 {
 	char* fieldData = (char*)(m_TextBasedProtocolMessage->m_Data + m_NameOffsetInMessage);
 	char* fieldEndPtr = (char*)memchr(fieldData, '\n', m_TextBasedProtocolMessage->m_DataLen - (size_t)m_NameOffsetInMessage);
 	if (fieldEndPtr == NULL)
 		m_FieldSize = tbp_my_own_strnlen(fieldData, m_TextBasedProtocolMessage->m_DataLen - (size_t)m_NameOffsetInMessage);
 	else
 		m_FieldSize = fieldEndPtr - fieldData + 1;
 
 	if (m_FieldSize == 0 || (*fieldData) == '\r' || (*fieldData) == '\n')
 	{
 		m_FieldNameSize = -1;
 		m_ValueOffsetInMessage = -1;
 		m_FieldValueSize = -1;
 		m_FieldNameSize = -1;
 		m_IsEndOfHeaderField = true;
 		return;
 	}
 	else
 		m_IsEndOfHeaderField = false;
 
 	char* fieldValuePtr = (char*)memchr(fieldData, nameValueSeperator, m_TextBasedProtocolMessage->m_DataLen - (size_t)m_NameOffsetInMessage);
 	// could not find the position of the separator, meaning field value position is unknown
 	if (fieldValuePtr == NULL)
 	{
 		m_ValueOffsetInMessage = -1;
 		m_FieldValueSize = -1;
 		m_FieldNameSize = m_FieldSize;
 	}
 	else
 	{
 		m_FieldNameSize = fieldValuePtr - fieldData;
 		// Header field looks like this: <field_name>[separator]<zero or more spaces><field_Value>
 		// So fieldValuePtr give us the position of the separator. Value offset is the first non-space byte forward
 		fieldValuePtr++;
 
 		// reached the end of the packet and value start offset wasn't found
 		if ((size_t)(fieldValuePtr - (char*)(m_TextBasedProtocolMessage->m_Data)) >= m_TextBasedProtocolMessage->getDataLen())
 		{
 			m_ValueOffsetInMessage = -1;
 			m_FieldValueSize = -1;
 			return;
 		}
 
 		if (spacesAllowedBetweenNameAndValue)
 		{
 			// advance fieldValuePtr 1 byte forward while didn't get to end of packet and fieldValuePtr points to a space char
-			while ((size_t)(fieldValuePtr - (char*)m_TextBasedProtocolMessage->m_Data) <= m_TextBasedProtocolMessage->getDataLen() && (*fieldValuePtr) == ' ')
+			while ((size_t)(fieldValuePtr - (char*)m_TextBasedProtocolMessage->m_Data) < m_TextBasedProtocolMessage->getDataLen() && (*fieldValuePtr) == ' ')
 			{
 				fieldValuePtr++;
 			}
 		}
 
 		// reached the end of the packet and value start offset wasn't found
 		if ((size_t)(fieldValuePtr - (char*)(m_TextBasedProtocolMessage->m_Data)) >= m_TextBasedProtocolMessage->getDataLen())
 		{
 			m_ValueOffsetInMessage = -1;
 			m_FieldValueSize = -1;
 		}
 		else
 		{
 			m_ValueOffsetInMessage = fieldValuePtr - (char*)m_TextBasedProtocolMessage->m_Data;
 			// couldn't find the end of the field, so assuming the field value length is from m_ValueOffsetInMessage until the end of the packet
 			if (fieldEndPtr == NULL)
 				m_FieldValueSize = (char*)(m_TextBasedProtocolMessage->m_Data + m_TextBasedProtocolMessage->getDataLen()) - fieldValuePtr;
 			else
 			{
 				m_FieldValueSize = fieldEndPtr - fieldValuePtr;
 				// if field ends with \r\n, decrease the value length by 1
 				if ((*(--fieldEndPtr)) == '\r')
 					m_FieldValueSize--;
 			}
 		}
 	}
 }
diff --git a/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-4672344017862656 b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-4672344017862656
new file mode 100644
index 00000000..c22d992a
Binary files /dev/null and b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-4672344017862656 differ
diff --git a/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-4923398479413248 b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-4923398479413248
new file mode 100644
index 00000000..6082cc1d
Binary files /dev/null and b/Tests/Fuzzers/RegressionTests/regression_samples/clusterfuzz-testcase-minimized-FuzzTarget-4923398479413248 differ
