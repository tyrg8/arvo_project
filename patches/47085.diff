commit 564f616162494a63e4e61b64ff8cefd20fe1bddc
Author: Daniel Salzman <daniel.salzman@nic.cz>
Date:   Sat Apr 30 14:26:27 2022 +0200

    contrib: use bzero() instead of explicit_bzero() inside memzero() if MSAN detected
    
    MSAN is unable to correctly evaluate explicit_bzero() for memory zeroing in
    wire_ctx operations. Then OSS-Fuzz creates false-positive issues. Using bzero()
    seems to be a reasonable workaround.

diff --git a/src/contrib/string.c b/src/contrib/string.c
index 01866860f..b4966adaf 100644
--- a/src/contrib/string.c
+++ b/src/contrib/string.c
@@ -145,20 +145,29 @@ static volatile memset_t volatile_memset = memset;
 void *memzero(void *s, size_t n)
 {
 #if defined(HAVE_EXPLICIT_BZERO)	/* In OpenBSD since 5.5. */
 					/* In FreeBSD since 11.0. */
 					/* In glibc since 2.25. */
 					/* In DragonFly BSD since 5.5. */
+#  if defined(__has_feature)
+#    if __has_feature(memory_sanitizer)
+	#warning "Memory sanitizer detected. Using bzero() instead of explicit_bzero()."
+	bzero(s, n);
+#    else
 	explicit_bzero(s, n);
+#    endif
+#  else
+	explicit_bzero(s, n);
+#  endif
 	return s;
 #elif defined(HAVE_EXPLICIT_MEMSET)	/* In NetBSD since 7.0. */
 	return explicit_memset(s, 0, n);
 #elif defined(HAVE_GNUTLS_MEMSET)	/* In GnuTLS since 3.4.0. */
 	gnutls_memset(s, 0, n);
 	return s;
 #else					/* Knot custom solution as a fallback. */
 	/* Warning: the use of the return value is *probably* needed
 	 * so as to avoid the volatile_memset() to be optimized out.
 	 */
 	return volatile_memset(s, 0, n);
 #endif
 }
