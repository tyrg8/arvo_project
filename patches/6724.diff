commit f45a7cc4cf8fabf643c8796d8191eb418ce18143
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Sun Mar 4 11:37:10 2018 +0000

    EHdr: fix read heap buffer overflow with nbits < 8. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6724. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@41627 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/frmts/raw/ehdrdataset.cpp b/gdal/frmts/raw/ehdrdataset.cpp
index f278ce7b5e..b53813479e 100644
--- a/gdal/frmts/raw/ehdrdataset.cpp
+++ b/gdal/frmts/raw/ehdrdataset.cpp
@@ -162,61 +162,63 @@ EHdrRasterBand::EHdrRasterBand( GDALDataset *poDSIn,
 CPLErr EHdrRasterBand::IReadBlock( int nBlockXOff, int nBlockYOff,
                                    void * pImage )
 
 {
     if (nBits >= 8)
         return RawRasterBand::IReadBlock(nBlockXOff, nBlockYOff, pImage);
 
     // Establish desired position.
-    const vsi_l_offset nLineBytesBig =
-        (static_cast<vsi_l_offset>(nPixelOffsetBits) * nBlockXSize + 7) / 8;
-    if( nLineBytesBig >
-        static_cast<vsi_l_offset>(std::numeric_limits<int>::max()) )
-        return CE_Failure;
-    const unsigned int nLineBytes = static_cast<unsigned int>(nLineBytesBig);
     const vsi_l_offset nLineStart =
         (nStartBit + nLineOffsetBits * nBlockYOff) / 8;
     int iBitOffset =
         static_cast<int>((nStartBit + nLineOffsetBits * nBlockYOff) % 8);
+    const vsi_l_offset nLineEnd =
+        (nStartBit + nLineOffsetBits * nBlockYOff +
+            static_cast<vsi_l_offset>(nPixelOffsetBits) * nBlockXSize - 1) / 8;
+    const vsi_l_offset nLineBytesBig = nLineEnd - nLineStart + 1;
+    if( nLineBytesBig >
+        static_cast<vsi_l_offset>(std::numeric_limits<int>::max()) )
+        return CE_Failure;
+    const unsigned int nLineBytes = static_cast<unsigned int>(nLineBytesBig);
 
     // Read data into buffer.
     GByte *pabyBuffer = static_cast<GByte *>(VSI_MALLOC_VERBOSE(nLineBytes));
     if( pabyBuffer == nullptr )
         return CE_Failure;
 
     if( VSIFSeekL(GetFPL(), nLineStart, SEEK_SET) != 0 ||
         VSIFReadL(pabyBuffer, 1, nLineBytes, GetFPL()) != nLineBytes )
     {
         CPLError(CE_Failure, CPLE_FileIO,
                  "Failed to read %u bytes at offset %lu.\n%s",
                  nLineBytes, static_cast<unsigned long>(nLineStart),
                  VSIStrerror(errno));
         CPLFree(pabyBuffer);
         return CE_Failure;
     }
 
     // Copy data, promoting to 8bit.
     for( int iX = 0, iPixel = 0; iX < nBlockXSize; iX++ )
     {
         int nOutWord = 0;
 
         for( int iBit = 0; iBit < nBits; iBit++ )
         {
             if( pabyBuffer[iBitOffset >> 3] & (0x80 >>(iBitOffset & 7)) )
                 nOutWord |= (1 << (nBits - 1 - iBit));
             iBitOffset++;
         }
 
         iBitOffset = iBitOffset + nPixelOffsetBits - nBits;
 
         reinterpret_cast<GByte *>(pImage)[iPixel++] =
             static_cast<GByte>(nOutWord);
     }
 
     CPLFree(pabyBuffer);
 
     return CE_None;
 }
 
 /************************************************************************/
 /*                            IWriteBlock()                             */
 /************************************************************************/
@@ -224,74 +226,76 @@ CPLErr EHdrRasterBand::IReadBlock( int nBlockXOff, int nBlockYOff,
 CPLErr EHdrRasterBand::IWriteBlock( int nBlockXOff, int nBlockYOff,
                                     void * pImage )
 
 {
     if (nBits >= 8)
         return RawRasterBand::IWriteBlock(nBlockXOff, nBlockYOff, pImage);
 
     // Establish desired position.
-    const vsi_l_offset nLineBytesBig =
-        (static_cast<vsi_l_offset>(nPixelOffsetBits) * nBlockXSize + 7) / 8;
-    if( nLineBytesBig >
-        static_cast<vsi_l_offset>(std::numeric_limits<int>::max()) )
-        return CE_Failure;
-    const unsigned int nLineBytes = static_cast<unsigned int>(nLineBytesBig);
     const vsi_l_offset nLineStart =
         (nStartBit + nLineOffsetBits * nBlockYOff) / 8;
     int iBitOffset =
         static_cast<int>((nStartBit + nLineOffsetBits * nBlockYOff) % 8);
+    const vsi_l_offset nLineEnd =
+        (nStartBit + nLineOffsetBits * nBlockYOff +
+            static_cast<vsi_l_offset>(nPixelOffsetBits) * nBlockXSize - 1) / 8;
+    const vsi_l_offset nLineBytesBig = nLineEnd - nLineStart + 1;
+    if( nLineBytesBig >
+        static_cast<vsi_l_offset>(std::numeric_limits<int>::max()) )
+        return CE_Failure;
+    const unsigned int nLineBytes = static_cast<unsigned int>(nLineBytesBig);
 
     // Read data into buffer.
     GByte *pabyBuffer =
         static_cast<GByte *>(VSI_CALLOC_VERBOSE(nLineBytes, 1));
     if( pabyBuffer == nullptr )
         return CE_Failure;
 
     if( VSIFSeekL(GetFPL(), nLineStart, SEEK_SET) != 0 )
     {
         CPLError(CE_Failure, CPLE_FileIO,
                  "Failed to read %u bytes at offset %lu.\n%s",
                  nLineBytes, static_cast<unsigned long>(nLineStart),
                  VSIStrerror(errno));
         CPLFree(pabyBuffer);
         return CE_Failure;
     }
 
     CPL_IGNORE_RET_VAL(VSIFReadL(pabyBuffer, nLineBytes, 1, GetFPL()));
 
     // Copy data, promoting to 8bit.
     for( int iX = 0, iPixel = 0; iX < nBlockXSize; iX++ )
     {
         const int nOutWord = reinterpret_cast<GByte *>(pImage)[iPixel++];
 
         for( int iBit = 0; iBit < nBits; iBit++ )
         {
             if( nOutWord & (1 << (nBits - 1 - iBit)) )
                 pabyBuffer[iBitOffset >> 3] |= (0x80 >> (iBitOffset & 7));
             else
                 pabyBuffer[iBitOffset >> 3] &= ~((0x80 >> (iBitOffset & 7)));
 
             iBitOffset++;
         }
 
         iBitOffset = iBitOffset + nPixelOffsetBits - nBits;
     }
 
     // Write the data back out.
     if( VSIFSeekL(GetFPL(), nLineStart, SEEK_SET) != 0 ||
         VSIFWriteL(pabyBuffer, 1, nLineBytes, GetFPL()) != nLineBytes )
     {
         CPLError(CE_Failure, CPLE_FileIO,
                  "Failed to write %u bytes at offset %lu.\n%s",
                  nLineBytes, static_cast<unsigned long>(nLineStart),
                  VSIStrerror(errno));
         return CE_Failure;
     }
 
     CPLFree(pabyBuffer);
 
     return CE_None;
 }
 
 /************************************************************************/
 /*                             IRasterIO()                              */
 /************************************************************************/
