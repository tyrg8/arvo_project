commit 41863a00f0d811c659c9ba87ae2cc0c3aae5a77f
Author: Patrick Steinhardt <ps@pks.im>
Date:   Mon Oct 29 17:19:58 2018 +0100

    strntol: fix out-of-bounds read when skipping leading spaces
    
    The `git__strntol` family of functions accepts leading spaces and will
    simply skip them. The skipping will not honor the provided buffer's
    length, though, which may lead it to read outside of the provided
    buffer's bounds if it is not a simple NUL-terminated string.
    Furthermore, if leading space is trimmed, the function will further
    advance the pointer but not update the number of remaining bytes, which
    may also lead to out-of-bounds reads.
    
    Fix the issue by properly paying attention to the buffer length and
    updating it when stripping leading whitespace characters. Add a test
    that verifies that we won't read past the provided buffer length.

diff --git a/src/util.c b/src/util.c
index 52495f752..b191d1a16 100644
--- a/src/util.c
+++ b/src/util.c
@@ -71,73 +71,76 @@ int git_strarray_copy(git_strarray *tgt, const git_strarray *src)
 int git__strntol64(int64_t *result, const char *nptr, size_t nptr_len, const char **endptr, int base)
 {
 	const char *p;
 	int64_t n, nn;
 	int c, ovfl, v, neg, ndig;
 
 	p = nptr;
 	neg = 0;
 	n = 0;
 	ndig = 0;
 	ovfl = 0;
 
 	/*
 	 * White space
 	 */
-	while (git__isspace(*p))
-		p++;
+	while (nptr_len && git__isspace(*p))
+		p++, nptr_len--;
+
+	if (!nptr_len)
+		goto Return;
 
 	/*
 	 * Sign
 	 */
 	if (*p == '-' || *p == '+')
 		if (*p++ == '-')
 			neg = 1;
 
 	/*
 	 * Base
 	 */
 	if (base == 0) {
 		if (*p != '0')
 			base = 10;
 		else {
 			base = 8;
 			if (p[1] == 'x' || p[1] == 'X') {
 				p += 2;
 				base = 16;
 			}
 		}
 	} else if (base == 16 && *p == '0') {
 		if (p[1] == 'x' || p[1] == 'X')
 			p += 2;
 	} else if (base < 0 || 36 < base)
 		goto Return;
 
 	/*
 	 * Non-empty sequence of digits
 	 */
 	for (; nptr_len > 0; p++,ndig++,nptr_len--) {
 		c = *p;
 		v = base;
 		if ('0'<=c && c<='9')
 			v = c - '0';
 		else if ('a'<=c && c<='z')
 			v = c - 'a' + 10;
 		else if ('A'<=c && c<='Z')
 			v = c - 'A' + 10;
 		if (v >= base)
 			break;
 		v = neg ? -v : v;
 		if (n > INT64_MAX / base || n < INT64_MIN / base) {
 			ovfl = 1;
 			/* Keep on iterating until the end of this number */
 			continue;
 		}
 		nn = n * base;
 		if ((v > 0 && nn > INT64_MAX - v) ||
 		    (v < 0 && nn < INT64_MIN - v)) {
 			ovfl = 1;
 			/* Keep on iterating until the end of this number */
 			continue;
 		}
 		n = nn + v;
 	}
diff --git a/tests/core/strtol.c b/tests/core/strtol.c
index ba79fba51..ac19a2808 100644
--- a/tests/core/strtol.c
+++ b/tests/core/strtol.c
@@ -76,6 +76,16 @@ void test_core_strtol__buffer_length_truncates(void)
 	cl_assert_equal_i(i64, 1);
 }
 
+void test_core_strtol__buffer_length_with_leading_ws_truncates(void)
+{
+	int64_t i64;
+
+	cl_git_fail(git__strntol64(&i64, " 1", 1, NULL, 10));
+
+	cl_git_pass(git__strntol64(&i64, " 11", 2, NULL, 10));
+	cl_assert_equal_i(i64, 1);
+}
+
 void test_core_strtol__error_message_cuts_off(void)
 {
 	assert_l32_fails("2147483657foobar", 10);
