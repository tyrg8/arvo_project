commit 9f22cc900810d93ed7808f31b90ade0c7c915e6a
Author: Neil Bickford <nbickford@nvidia.com>
Date:   Fri Oct 15 11:04:41 2021 -0700

    stb_image PNG: Checks for invalid DEFLATE codes.
    
    Specifically, this rejects length codes 286 and 287, and distance codes 30 and 31.
    This avoids a scenario in which a file could contain a table in which
    0 corresponded to length code 287, which would result in writing 0 bits.
    
    Signed-off-by: Neil Bickford <nbickford@nvidia.com>

diff --git a/stb_image.h b/stb_image.h
index d60371b..ab616c5 100644
--- a/stb_image.h
+++ b/stb_image.h
@@ -4240,41 +4240,42 @@ static const int stbi__zdist_extra[32] =
 static int stbi__parse_huffman_block(stbi__zbuf *a)
 {
    char *zout = a->zout;
    for(;;) {
       int z = stbi__zhuffman_decode(a, &a->z_length);
       if (z < 256) {
          if (z < 0) return stbi__err("bad huffman code","Corrupt PNG"); // error in huffman codes
          if (zout >= a->zout_end) {
             if (!stbi__zexpand(a, zout, 1)) return 0;
             zout = a->zout;
          }
          *zout++ = (char) z;
       } else {
          stbi_uc *p;
          int len,dist;
          if (z == 256) {
             a->zout = zout;
             return 1;
          }
+         if (z >= 286) return stbi__err("bad huffman code","Corrupt PNG"); // per DEFLATE, length codes 286 and 287 must not appear in compressed data
          z -= 257;
          len = stbi__zlength_base[z];
          if (stbi__zlength_extra[z]) len += stbi__zreceive(a, stbi__zlength_extra[z]);
          z = stbi__zhuffman_decode(a, &a->z_distance);
-         if (z < 0) return stbi__err("bad huffman code","Corrupt PNG");
+         if (z < 0 || z >= 30) return stbi__err("bad huffman code","Corrupt PNG"); // per DEFLATE, distance codes 30 and 31 must not appear in compressed data
          dist = stbi__zdist_base[z];
          if (stbi__zdist_extra[z]) dist += stbi__zreceive(a, stbi__zdist_extra[z]);
          if (zout - a->zout_start < dist) return stbi__err("bad dist","Corrupt PNG");
          if (zout + len > a->zout_end) {
             if (!stbi__zexpand(a, zout, len)) return 0;
             zout = a->zout;
          }
          p = (stbi_uc *) (zout - dist);
          if (dist == 1) { // run of one byte; common in images.
             stbi_uc v = *p;
             if (len) { do *zout++ = v; while (--len); }
          } else {
             if (len) { do *zout++ = *p++; while (--len); }
          }
       }
    }
 }
