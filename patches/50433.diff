commit 55e9b06c6191af68938dc3301b7ed4153cf86f7a
Author: Francesc Alted <francesc@blosc.org>
Date:   Sun Aug 21 11:25:09 2022 +0200

    Re-add the check for small buffers and a new test (see https://github.com/Blosc/python-blosc2/issues/46)

diff --git a/blosc/blosc2.c b/blosc/blosc2.c
index 7a039340..9f197a18 100644
--- a/blosc/blosc2.c
+++ b/blosc/blosc2.c
@@ -2212,72 +2212,76 @@ static int initialize_context_decompression(blosc2_context* context, blosc_heade
 static int write_compression_header(blosc2_context* context, bool extended_header) {
   blosc_header header;
   int dont_split;
   int dict_training = context->use_dict && (context->dict_cdict == NULL);
 
   context->header_flags = 0;
 
   if (context->clevel == 0) {
     /* Compression level 0 means buffer to be memcpy'ed */
     context->header_flags |= (uint8_t)BLOSC_MEMCPYED;
   }
+  if (context->sourcesize < BLOSC_MIN_BUFFERSIZE) {
+    /* Buffer is too small.  Try memcpy'ing. */
+    context->header_flags |= (uint8_t)BLOSC_MEMCPYED;
+  }
 
   bool memcpyed = context->header_flags & (uint8_t)BLOSC_MEMCPYED;
   if (extended_header) {
     /* Indicate that we are building an extended header */
     context->header_overhead = BLOSC_EXTENDED_HEADER_LENGTH;
     context->header_flags |= (BLOSC_DOSHUFFLE | BLOSC_DOBITSHUFFLE);
     /* Store filter pipeline info at the end of the header */
     if (dict_training || memcpyed) {
       context->bstarts = NULL;
       context->output_bytes = context->header_overhead;
     } else {
       context->bstarts = (int32_t*)(context->dest + context->header_overhead);
       context->output_bytes = context->header_overhead + (int32_t)sizeof(int32_t) * context->nblocks;
     }
   } else {
     // Regular header
     context->header_overhead = BLOSC_MIN_HEADER_LENGTH;
     if (memcpyed) {
       context->bstarts = NULL;
       context->output_bytes = context->header_overhead;
     } else {
       context->bstarts = (int32_t *) (context->dest + context->header_overhead);
       context->output_bytes = context->header_overhead + (int32_t)sizeof(int32_t) * context->nblocks;
     }
   }
 
   // when memcpyed bit is set, there is no point in dealing with others
   if (!memcpyed) {
     if (context->filter_flags & BLOSC_DOSHUFFLE) {
       /* Byte-shuffle is active */
       context->header_flags |= BLOSC_DOSHUFFLE;
     }
 
     if (context->filter_flags & BLOSC_DOBITSHUFFLE) {
       /* Bit-shuffle is active */
       context->header_flags |= BLOSC_DOBITSHUFFLE;
     }
 
     if (context->filter_flags & BLOSC_DODELTA) {
       /* Delta is active */
       context->header_flags |= BLOSC_DODELTA;
     }
 
     dont_split = !split_block(context, context->typesize,
                               context->blocksize);
 
     /* dont_split is in bit 4 */
     context->header_flags |= dont_split << 4;
     /* codec starts at bit 5 */
     uint8_t compformat = compcode_to_compformat(context->compcode);
     context->header_flags |= compformat << 5;
   }
 
   // Create blosc header and store to dest
   blosc2_intialize_header_from_context(context, &header, extended_header);
 
   memcpy(context->dest, &header, (extended_header) ?
     BLOSC_EXTENDED_HEADER_LENGTH : BLOSC_MIN_HEADER_LENGTH);
 
   return 1;
 }
diff --git a/include/blosc2.h b/include/blosc2.h
index a5ebca92..d931252c 100644
--- a/include/blosc2.h
+++ b/include/blosc2.h
@@ -158,23 +158,23 @@ typedef struct {
 enum {
 #ifndef BLOSC_H
   BLOSC_MIN_HEADER_LENGTH = 16,
   //!< Minimum header length (Blosc1)
 #endif // BLOSC_H
   BLOSC_EXTENDED_HEADER_LENGTH = 32,
   //!< Extended header length (Blosc2, see README_HEADER)
   BLOSC2_MAX_OVERHEAD = BLOSC_EXTENDED_HEADER_LENGTH,
   //!< The maximum overhead during compression in bytes. This equals
   //!< to @ref BLOSC_EXTENDED_HEADER_LENGTH now, but can be higher in future
   //!< implementations.
   BLOSC2_MAX_BUFFERSIZE = (INT_MAX - BLOSC2_MAX_OVERHEAD),
   //!< Maximum source buffer size to be compressed
 #ifndef BLOSC_H
   BLOSC_MAX_TYPESIZE = UINT8_MAX,
   //!< Maximum typesize before considering source buffer as a stream of bytes.
   //!< Cannot be larger than 255.
 #endif // BLOSC_H
-  BLOSC_MIN_BUFFERSIZE = 128,
-  //!< Minimum buffer size to be compressed. Cannot be smaller than 66.
+  BLOSC_MIN_BUFFERSIZE = 32,
+  //!< Minimum buffer size to be compressed.
 };
 
 
diff --git a/tests/test_compressor.c b/tests/test_compressor.c
index 12a8d9c2..d17d44f4 100644
--- a/tests/test_compressor.c
+++ b/tests/test_compressor.c
@@ -220,36 +220,71 @@ static char *test_typesize(void) {
 /* Check small blocksize */
 static char *test_small_blocksize(void) {
   blosc2_cparams cparams = BLOSC2_CPARAMS_DEFAULTS;
   cparams.blocksize = 2;
   cparams.typesize = 1;
   blosc2_context *cctx = blosc2_create_cctx(cparams);
   blosc2_dparams dparams = BLOSC2_DPARAMS_DEFAULTS;
   blosc2_context *dctx = blosc2_create_dctx(dparams);
   size = 8;
   /* Get a compressed buffer */
   cbytes = blosc2_compress_ctx(cctx, src, size, dest, size + BLOSC2_MAX_OVERHEAD);
   nbytes = blosc2_decompress_ctx(dctx, dest, size + BLOSC2_MAX_OVERHEAD, src, size);
   mu_assert("ERROR: nbytes is not correct", nbytes == size);
 
   blosc2_free_ctx(cctx);
   blosc2_free_ctx(dctx);
   return 0;
 }
 
 
+/* Check small buffer */
+static char *test_small_buffer(void) {
+  blosc2_cparams cparams = BLOSC2_CPARAMS_DEFAULTS;
+  cparams.typesize = 1;
+  blosc2_context *cctx = blosc2_create_cctx(cparams);
+  blosc2_dparams dparams = BLOSC2_DPARAMS_DEFAULTS;
+  blosc2_context *dctx = blosc2_create_dctx(dparams);
+  size = 2;
+  uint8_t *src2 = calloc(size, 1);
+  for (int i = 0; i < size; i++) {
+    src2[i] = (uint8_t)i;
+  }
+
+  /* Using contexts */
+  cbytes = blosc2_compress_ctx(cctx, src2, size, dest, size + BLOSC2_MAX_OVERHEAD);
+  nbytes = blosc2_decompress_ctx(dctx, dest, size + BLOSC2_MAX_OVERHEAD, src, size);
+  mu_assert("ERROR: nbytes is not correct", nbytes == size);
+
+  /* Not using contexts */
+  cbytes = blosc2_compress(9, 1, cparams.typesize, src2, size, dest, size + BLOSC2_MAX_OVERHEAD);
+  nbytes = blosc2_decompress(dest, size + BLOSC2_MAX_OVERHEAD, src, size);
+  mu_assert("ERROR: nbytes is not correct", nbytes == size);
+
+  /* Using Blosc1 interface */
+  cbytes = blosc1_compress(9, 1, cparams.typesize, size, src2, dest, size + BLOSC2_MAX_OVERHEAD);
+  nbytes = blosc1_decompress(dest, src, size);
+  mu_assert("ERROR: nbytes is not correct", nbytes == size);
+
+  free(src2);
+  blosc2_free_ctx(cctx);
+  blosc2_free_ctx(dctx);
+  return 0;
+}
+
 
 static char *all_tests(void) {
   mu_run_test(test_compressor);
   mu_run_test(test_compress_decompress);
   mu_run_test(test_clevel);
   mu_run_test(test_noshuffle);
   mu_run_test(test_shuffle);
   mu_run_test(test_bitshuffle);
   mu_run_test(test_delta);
   mu_run_test(test_typesize);
   mu_run_test(test_small_blocksize);
+  mu_run_test(test_small_buffer);
 
   return 0;
 }
 
 #define BUFFER_ALIGN_SIZE   32
