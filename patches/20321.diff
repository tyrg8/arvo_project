commit 0e4b2676bdffeef3cb79b235bc9624f2a49dccad
Author: ckitagawa-work <59700018+ckitagawa-work@users.noreply.github.com>
Date:   Fri Jan 24 12:16:08 2020 -0500

    [subset] sbix fix missed offset is_null() check

diff --git a/src/hb-ot-color-sbix-table.hh b/src/hb-ot-color-sbix-table.hh
index 0b71ee5f2..8130f332a 100644
--- a/src/hb-ot-color-sbix-table.hh
+++ b/src/hb-ot-color-sbix-table.hh
@@ -41,35 +41,36 @@ namespace OT {
 
 struct SBIXGlyph
 {
-  SBIXGlyph* copy (hb_serialize_context_t *c, unsigned int data_length) const {
+  SBIXGlyph* copy (hb_serialize_context_t *c, unsigned int data_length) const
+  {
     TRACE_SERIALIZE (this);
     SBIXGlyph* new_glyph = c->start_embed<SBIXGlyph> ();
     if (unlikely (!new_glyph)) return_trace (nullptr);
     if (unlikely (!c->extend_min (new_glyph))) return_trace (nullptr);
 
     new_glyph->xOffset = xOffset;
     new_glyph->yOffset = yOffset;
     new_glyph->graphicType = graphicType;
     data.copy(c, data_length);
     return_trace (new_glyph);
   }
 
   HBINT16	xOffset;	/* The horizontal (x-axis) offset from the left
 				 * edge of the graphic to the glyph’s origin.
 				 * That is, the x-coordinate of the point on the
 				 * baseline at the left edge of the glyph. */
   HBINT16	yOffset;	/* The vertical (y-axis) offset from the bottom
 				 * edge of the graphic to the glyph’s origin.
 				 * That is, the y-coordinate of the point on the
 				 * baseline at the left edge of the glyph. */
   Tag		graphicType;	/* Indicates the format of the embedded graphic
 				 * data: one of 'jpg ', 'png ' or 'tiff', or the
 				 * special format 'dupe'. */
   UnsizedArrayOf<HBUINT8>
 		data;		/* The actual embedded graphic data. The total
 				 * length is inferred from sequential entries in
 				 * the glyphDataOffsets array and the fixed size
 				 * (8 bytes) of the preceding fields. */
   public:
   DEFINE_SIZE_ARRAY (8, data);
 };
@@ -77,111 +78,113 @@ struct SBIXGlyph
 struct SBIXStrike
 {
   static unsigned int get_size (unsigned num_glyphs)
   { return min_size + num_glyphs * HBUINT32::static_size; }
 
   bool sanitize (hb_sanitize_context_t *c) const
   {
     TRACE_SANITIZE (this);
     return_trace (c->check_struct (this) &&
 		  imageOffsetsZ.sanitize_shallow (c, c->get_num_glyphs () + 1));
   }
 
   hb_blob_t *get_glyph_blob (unsigned int  glyph_id,
 			     hb_blob_t    *sbix_blob,
 			     hb_tag_t      file_type,
 			     int          *x_offset,
 			     int          *y_offset,
 			     unsigned int  num_glyphs,
 			     unsigned int *strike_ppem) const
   {
     if (unlikely (!ppem)) return hb_blob_get_empty (); /* To get Null() object out of the way. */
 
     unsigned int retry_count = 8;
     unsigned int sbix_len = sbix_blob->length;
     unsigned int strike_offset = (const char *) this - (const char *) sbix_blob->data;
     assert (strike_offset < sbix_len);
 
   retry:
     if (unlikely (glyph_id >= num_glyphs ||
 		  imageOffsetsZ[glyph_id + 1] <= imageOffsetsZ[glyph_id] ||
 		  imageOffsetsZ[glyph_id + 1] - imageOffsetsZ[glyph_id] <= SBIXGlyph::min_size ||
 		  (unsigned int) imageOffsetsZ[glyph_id + 1] > sbix_len - strike_offset))
       return hb_blob_get_empty ();
 
     unsigned int glyph_offset = strike_offset + (unsigned int) imageOffsetsZ[glyph_id] + SBIXGlyph::min_size;
     unsigned int glyph_length = imageOffsetsZ[glyph_id + 1] - imageOffsetsZ[glyph_id] - SBIXGlyph::min_size;
 
     const SBIXGlyph *glyph = &(this+imageOffsetsZ[glyph_id]);
 
     if (glyph->graphicType == HB_TAG ('d','u','p','e'))
     {
       if (glyph_length >= 2)
       {
 	glyph_id = *((HBUINT16 *) &glyph->data);
 	if (retry_count--)
 	  goto retry;
       }
       return hb_blob_get_empty ();
     }
 
     if (unlikely (file_type != glyph->graphicType))
       return hb_blob_get_empty ();
 
     if (strike_ppem) *strike_ppem = ppem;
     if (x_offset) *x_offset = glyph->xOffset;
     if (y_offset) *y_offset = glyph->yOffset;
     return hb_blob_create_sub_blob (sbix_blob, glyph_offset, glyph_length);
   }
 
   bool subset (hb_subset_context_t *c, unsigned int available_len) const
   {
     TRACE_SUBSET (this);
     unsigned int num_output_glyphs = c->plan->num_output_glyphs ();
 
     auto* out = c->serializer->start_embed<SBIXStrike> ();
     if (unlikely (!out)) return_trace (false);
     auto snap = c->serializer->snapshot ();
     if (unlikely (!c->serializer->extend (*out, num_output_glyphs + 1))) return_trace (false);
     out->ppem = ppem;
     out->resolution = resolution;
     HBUINT32 head;
     head = get_size(num_output_glyphs + 1);
 
     bool has_glyphs = false;
     for (unsigned new_gid = 0; new_gid < num_output_glyphs; new_gid++)
     {
       hb_codepoint_t old_gid;
       if (!c->plan->old_gid_for_new_gid (new_gid, &old_gid) ||
-          unlikely (imageOffsetsZ[old_gid + 1] <= imageOffsetsZ[old_gid] ||
+          unlikely (imageOffsetsZ[old_gid].is_null() ||
+                    imageOffsetsZ[old_gid + 1].is_null () ||
+                    imageOffsetsZ[old_gid + 1] <= imageOffsetsZ[old_gid] ||
                     imageOffsetsZ[old_gid + 1] - imageOffsetsZ[old_gid] <= SBIXGlyph::min_size) ||
                     (unsigned int) imageOffsetsZ[old_gid + 1] > available_len)
       {
         out->imageOffsetsZ[new_gid] = head;
         continue;
       }
       has_glyphs = true;
       unsigned int delta = imageOffsetsZ[old_gid + 1] - imageOffsetsZ[old_gid];
       unsigned int glyph_data_length = delta - SBIXGlyph::min_size;
-      if (!(this + imageOffsetsZ[old_gid]).copy (c->serializer, glyph_data_length))
+      if (!(this+imageOffsetsZ[old_gid]).copy (c->serializer, glyph_data_length))
         return_trace (false);
       out->imageOffsetsZ[new_gid] = head;
       head += delta;
     }
     if (has_glyphs)
       out->imageOffsetsZ[num_output_glyphs] = head;
     else
       c->serializer->revert (snap);
     return_trace (has_glyphs);
   }
 
   public:
   HBUINT16	ppem;		/* The PPEM size for which this strike was designed. */
   HBUINT16	resolution;	/* The device pixel density (in PPI) for which this
 				 * strike was designed. (E.g., 96 PPI, 192 PPI.) */
   protected:
   UnsizedArrayOf<LOffsetTo<SBIXGlyph>>
 		imageOffsetsZ;	/* Offset from the beginning of the strike data header
 				 * to bitmap data for an individual glyph ID. */
   public:
   DEFINE_SIZE_ARRAY (4, imageOffsetsZ);
 };
diff --git a/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5747280156295168 b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5747280156295168
new file mode 100644
index 000000000..57611513c
Binary files /dev/null and b/test/fuzzing/fonts/clusterfuzz-testcase-minimized-hb-subset-fuzzer-5747280156295168 differ
