commit 2d9841c9788835484c364b61507efdf8fe34aa9e
Author: Volker Lendecke <vl@samba.org>
Date:   Wed Feb 5 15:43:43 2020 +0200

    smbd: Remove overriding file_attributes with unix_mode in the VFS
    
    Internally to open.c this is still used, but that can go away next.
    
    Signed-off-by: Volker Lendecke <vl@samba.org>
    Reviewed-by: Jeremy Allison <jra@samba.org>
    
    Autobuild-User(master): Jeremy Allison <jra@samba.org>
    Autobuild-Date(master): Fri Feb  7 22:27:48 UTC 2020 on sn-devel-184

diff --git a/source3/smbd/reply.c b/source3/smbd/reply.c
index b5d9fb78d2d..aef34d9ede8 100644
--- a/source3/smbd/reply.c
+++ b/source3/smbd/reply.c
@@ -3028,152 +3028,150 @@ static NTSTATUS can_rename(connection_struct *conn, files_struct *fsp,
 static NTSTATUS do_unlink(connection_struct *conn,
 			struct smb_request *req,
 			struct smb_filename *smb_fname,
 			uint32_t dirtype)
 {
 	uint32_t fattr;
 	files_struct *fsp;
 	uint32_t dirtype_orig = dirtype;
 	NTSTATUS status;
 	int ret;
 	bool posix_paths = (req != NULL && req->posix_pathnames);
 	struct smb2_create_blobs *posx = NULL;
 
 	DEBUG(10,("do_unlink: %s, dirtype = %d\n",
 		  smb_fname_str_dbg(smb_fname),
 		  dirtype));
 
 	if (!CAN_WRITE(conn)) {
 		return NT_STATUS_MEDIA_WRITE_PROTECTED;
 	}
 
 	if (posix_paths) {
 		ret = SMB_VFS_LSTAT(conn, smb_fname);
 	} else {
 		ret = SMB_VFS_STAT(conn, smb_fname);
 	}
 	if (ret != 0) {
 		return map_nt_error_from_unix(errno);
 	}
 
 	fattr = dos_mode(conn, smb_fname);
 
 	if (dirtype & FILE_ATTRIBUTE_NORMAL) {
 		dirtype = FILE_ATTRIBUTE_DIRECTORY|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_READONLY;
 	}
 
 	dirtype &= (FILE_ATTRIBUTE_DIRECTORY|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_SYSTEM);
 	if (!dirtype) {
 		return NT_STATUS_NO_SUCH_FILE;
 	}
 
 	if (!dir_check_ftype(fattr, dirtype)) {
 		if (fattr & FILE_ATTRIBUTE_DIRECTORY) {
 			return NT_STATUS_FILE_IS_A_DIRECTORY;
 		}
 		return NT_STATUS_NO_SUCH_FILE;
 	}
 
 	if (dirtype_orig & 0x8000) {
 		/* These will never be set for POSIX. */
 		return NT_STATUS_NO_SUCH_FILE;
 	}
 
 #if 0
 	if ((fattr & dirtype) & FILE_ATTRIBUTE_DIRECTORY) {
                 return NT_STATUS_FILE_IS_A_DIRECTORY;
         }
 
         if ((fattr & ~dirtype) & (FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_SYSTEM)) {
                 return NT_STATUS_NO_SUCH_FILE;
         }
 
 	if (dirtype & 0xFF00) {
 		/* These will never be set for POSIX. */
 		return NT_STATUS_NO_SUCH_FILE;
 	}
 
 	dirtype &= 0xFF;
 	if (!dirtype) {
 		return NT_STATUS_NO_SUCH_FILE;
 	}
 
 	/* Can't delete a directory. */
 	if (fattr & FILE_ATTRIBUTE_DIRECTORY) {
 		return NT_STATUS_FILE_IS_A_DIRECTORY;
 	}
 #endif
 
 #if 0 /* JRATEST */
 	else if (dirtype & FILE_ATTRIBUTE_DIRECTORY) /* Asked for a directory and it isn't. */
 		return NT_STATUS_OBJECT_NAME_INVALID;
 #endif /* JRATEST */
 
 	if (posix_paths) {
 		status = make_smb2_posix_create_ctx(
 			talloc_tos(), &posx, 0777);
 		if (!NT_STATUS_IS_OK(status)) {
 			DBG_WARNING("make_smb2_posix_create_ctx failed: %s\n",
 				    nt_errstr(status));
 			return status;
 		}
 	}
 
 	/* On open checks the open itself will check the share mode, so
 	   don't do it here as we'll get it wrong. */
 
 	status = SMB_VFS_CREATE_FILE
 		(conn,			/* conn */
 		 req,			/* req */
 		 0,			/* root_dir_fid */
 		 smb_fname,		/* fname */
 		 DELETE_ACCESS,		/* access_mask */
 		 FILE_SHARE_NONE,	/* share_access */
 		 FILE_OPEN,		/* create_disposition*/
 		 FILE_NON_DIRECTORY_FILE, /* create_options */
-		 			/* file_attributes */
-		 posix_paths ? FILE_FLAG_POSIX_SEMANTICS|0777 :
-				FILE_ATTRIBUTE_NORMAL,
+		 FILE_ATTRIBUTE_NORMAL,	/* file_attributes */
 		 0,			/* oplock_request */
 		 NULL,			/* lease */
 		 0,			/* allocation_size */
 		 0,			/* private_flags */
 		 NULL,			/* sd */
 		 NULL,			/* ea_list */
 		 &fsp,			/* result */
 		 NULL,			/* pinfo */
 		 posx,			/* in_context_blobs */
 		 NULL);			/* out_context_blobs */
 
 	TALLOC_FREE(posx);
 
 	if (!NT_STATUS_IS_OK(status)) {
 		DEBUG(10, ("SMB_VFS_CREATEFILE failed: %s\n",
 			   nt_errstr(status)));
 		return status;
 	}
 
 	status = can_set_delete_on_close(fsp, fattr);
 	if (!NT_STATUS_IS_OK(status)) {
 		DEBUG(10, ("do_unlink can_set_delete_on_close for file %s - "
 			"(%s)\n",
 			smb_fname_str_dbg(smb_fname),
 			nt_errstr(status)));
 		close_file(req, fsp, NORMAL_CLOSE);
 		return status;
 	}
 
 	/* The set is across all open files on this dev/inode pair. */
 	if (!set_delete_on_close(fsp, True,
 				conn->session_info->security_token,
 				conn->session_info->unix_token)) {
 		close_file(req, fsp, NORMAL_CLOSE);
 		return NT_STATUS_ACCESS_DENIED;
 	}
 
 	return close_file(req, fsp, NORMAL_CLOSE);
 }
 
 /****************************************************************************
  The guts of the unlink command, split out so it may be called by the NT SMB
  code.
 ****************************************************************************/
@@ -7291,373 +7289,373 @@ NTSTATUS rename_internals_fsp(connection_struct *conn,
 NTSTATUS rename_internals(TALLOC_CTX *ctx,
 			connection_struct *conn,
 			struct smb_request *req,
 			struct smb_filename *smb_fname_src,
 			struct smb_filename *smb_fname_dst,
 			uint32_t attrs,
 			bool replace_if_exists,
 			bool src_has_wild,
 			bool dest_has_wild,
 			uint32_t access_mask)
 {
 	char *fname_src_dir = NULL;
 	struct smb_filename *smb_fname_src_dir = NULL;
 	char *fname_src_mask = NULL;
 	int count=0;
 	NTSTATUS status = NT_STATUS_OK;
 	struct smb_Dir *dir_hnd = NULL;
 	const char *dname = NULL;
 	char *talloced = NULL;
 	long offset = 0;
 	int create_options = 0;
 	bool posix_pathnames = (req != NULL && req->posix_pathnames);
 	struct smb2_create_blobs *posx = NULL;
 	int rc;
 
 	/*
 	 * Split the old name into directory and last component
 	 * strings. Note that unix_convert may have stripped off a
 	 * leading ./ from both name and newname if the rename is
 	 * at the root of the share. We need to make sure either both
 	 * name and newname contain a / character or neither of them do
 	 * as this is checked in resolve_wildcards().
 	 */
 
 	/* Split up the directory from the filename/mask. */
 	status = split_fname_dir_mask(ctx, smb_fname_src->base_name,
 				      &fname_src_dir, &fname_src_mask);
 	if (!NT_STATUS_IS_OK(status)) {
 		status = NT_STATUS_NO_MEMORY;
 		goto out;
 	}
 
 	/*
 	 * We should only check the mangled cache
 	 * here if unix_convert failed. This means
 	 * that the path in 'mask' doesn't exist
 	 * on the file system and so we need to look
 	 * for a possible mangle. This patch from
 	 * Tine Smukavec <valentin.smukavec@hermes.si>.
 	 */
 
 	if (!VALID_STAT(smb_fname_src->st) &&
 	    mangle_is_mangled(fname_src_mask, conn->params)) {
 		char *new_mask = NULL;
 		mangle_lookup_name_from_8_3(ctx, fname_src_mask, &new_mask,
 					    conn->params);
 		if (new_mask) {
 			TALLOC_FREE(fname_src_mask);
 			fname_src_mask = new_mask;
 		}
 	}
 
 	if (posix_pathnames) {
 		status = make_smb2_posix_create_ctx(talloc_tos(), &posx, 0777);
 		if (!NT_STATUS_IS_OK(status)) {
 			DBG_WARNING("make_smb2_posix_create_ctx failed: %s\n",
 				    nt_errstr(status));
 			goto out;
 		}
 	}
 
 	if (!src_has_wild) {
 		files_struct *fsp;
 
 		/*
 		 * Only one file needs to be renamed. Append the mask back
 		 * onto the directory.
 		 */
 		TALLOC_FREE(smb_fname_src->base_name);
 		if (ISDOT(fname_src_dir)) {
 			/* Ensure we use canonical names on open. */
 			smb_fname_src->base_name = talloc_asprintf(smb_fname_src,
 							"%s",
 							fname_src_mask);
 		} else {
 			smb_fname_src->base_name = talloc_asprintf(smb_fname_src,
 							"%s/%s",
 							fname_src_dir,
 							fname_src_mask);
 		}
 		if (!smb_fname_src->base_name) {
 			status = NT_STATUS_NO_MEMORY;
 			goto out;
 		}
 
 		DEBUG(3, ("rename_internals: case_sensitive = %d, "
 			  "case_preserve = %d, short case preserve = %d, "
 			  "directory = %s, newname = %s, "
 			  "last_component_dest = %s\n",
 			  conn->case_sensitive, conn->case_preserve,
 			  conn->short_case_preserve,
 			  smb_fname_str_dbg(smb_fname_src),
 			  smb_fname_str_dbg(smb_fname_dst),
 			  smb_fname_dst->original_lcomp));
 
 		/* The dest name still may have wildcards. */
 		if (dest_has_wild) {
 			char *fname_dst_mod = NULL;
 			if (!resolve_wildcards(smb_fname_dst,
 					       smb_fname_src->base_name,
 					       smb_fname_dst->base_name,
 					       &fname_dst_mod)) {
 				DEBUG(6, ("rename_internals: resolve_wildcards "
 					  "%s %s failed\n",
 					  smb_fname_src->base_name,
 					  smb_fname_dst->base_name));
 				status = NT_STATUS_NO_MEMORY;
 				goto out;
 			}
 			TALLOC_FREE(smb_fname_dst->base_name);
 			smb_fname_dst->base_name = fname_dst_mod;
 		}
 
 		ZERO_STRUCT(smb_fname_src->st);
 		if (posix_pathnames) {
 			rc = SMB_VFS_LSTAT(conn, smb_fname_src);
 		} else {
 			rc = SMB_VFS_STAT(conn, smb_fname_src);
 		}
 		if (rc == -1) {
 			status = map_nt_error_from_unix_common(errno);
 			goto out;
 		}
 
 		if (S_ISDIR(smb_fname_src->st.st_ex_mode)) {
 			create_options |= FILE_DIRECTORY_FILE;
 		}
 
 		status = SMB_VFS_CREATE_FILE(
 			conn,				/* conn */
 			req,				/* req */
 			0,				/* root_dir_fid */
 			smb_fname_src,			/* fname */
 			access_mask,			/* access_mask */
 			(FILE_SHARE_READ |		/* share_access */
 			    FILE_SHARE_WRITE),
 			FILE_OPEN,			/* create_disposition*/
 			create_options,			/* create_options */
-			posix_pathnames ? FILE_FLAG_POSIX_SEMANTICS|0777 : 0, /* file_attributes */
+			0,				/* file_attributes */
 			0,				/* oplock_request */
 			NULL,				/* lease */
 			0,				/* allocation_size */
 			0,				/* private_flags */
 			NULL,				/* sd */
 			NULL,				/* ea_list */
 			&fsp,				/* result */
 			NULL,				/* pinfo */
 			posx,				/* in_context_blobs */
 			NULL);				/* out_context_blobs */
 
 		if (!NT_STATUS_IS_OK(status)) {
 			DEBUG(3, ("Could not open rename source %s: %s\n",
 				  smb_fname_str_dbg(smb_fname_src),
 				  nt_errstr(status)));
 			goto out;
 		}
 
 		status = rename_internals_fsp(conn, fsp, smb_fname_dst,
 					      attrs, replace_if_exists);
 
 		close_file(req, fsp, NORMAL_CLOSE);
 
 		DEBUG(3, ("rename_internals: Error %s rename %s -> %s\n",
 			  nt_errstr(status), smb_fname_str_dbg(smb_fname_src),
 			  smb_fname_str_dbg(smb_fname_dst)));
 
 		goto out;
 	}
 
 	/*
 	 * Wildcards - process each file that matches.
 	 */
 	if (strequal(fname_src_mask, "????????.???")) {
 		TALLOC_FREE(fname_src_mask);
 		fname_src_mask = talloc_strdup(ctx, "*");
 		if (!fname_src_mask) {
 			status = NT_STATUS_NO_MEMORY;
 			goto out;
 		}
 	}
 
 	smb_fname_src_dir = synthetic_smb_fname(talloc_tos(),
 				fname_src_dir,
 				NULL,
 				NULL,
 				smb_fname_src->flags);
 	if (smb_fname_src_dir == NULL) {
 		status = NT_STATUS_NO_MEMORY;
 		goto out;
 	}
 
 	status = check_name(conn, smb_fname_src_dir);
 	if (!NT_STATUS_IS_OK(status)) {
 		goto out;
 	}
 
 	dir_hnd = OpenDir(talloc_tos(), conn, smb_fname_src_dir, fname_src_mask,
 			  attrs);
 	if (dir_hnd == NULL) {
 		status = map_nt_error_from_unix(errno);
 		goto out;
 	}
 
 	status = NT_STATUS_NO_SUCH_FILE;
 	/*
 	 * Was status = NT_STATUS_OBJECT_NAME_NOT_FOUND;
 	 * - gentest fix. JRA
 	 */
 
 	while ((dname = ReadDirName(dir_hnd, &offset, &smb_fname_src->st,
 				    &talloced))) {
 		files_struct *fsp = NULL;
 		char *destname = NULL;
 		bool sysdir_entry = False;
 
 		/* Quick check for "." and ".." */
 		if (ISDOT(dname) || ISDOTDOT(dname)) {
 			if (attrs & FILE_ATTRIBUTE_DIRECTORY) {
 				sysdir_entry = True;
 			} else {
 				TALLOC_FREE(talloced);
 				continue;
 			}
 		}
 
 		if (!is_visible_file(conn, fname_src_dir, dname,
 				     &smb_fname_src->st, false)) {
 			TALLOC_FREE(talloced);
 			continue;
 		}
 
 		if(!mask_match(dname, fname_src_mask, conn->case_sensitive)) {
 			TALLOC_FREE(talloced);
 			continue;
 		}
 
 		if (sysdir_entry) {
 			status = NT_STATUS_OBJECT_NAME_INVALID;
 			break;
 		}
 
 		TALLOC_FREE(smb_fname_src->base_name);
 		if (ISDOT(fname_src_dir)) {
 			/* Ensure we use canonical names on open. */
 			smb_fname_src->base_name = talloc_asprintf(smb_fname_src,
 							"%s",
 							dname);
 		} else {
 			smb_fname_src->base_name = talloc_asprintf(smb_fname_src,
 							"%s/%s",
 							fname_src_dir,
 							dname);
 		}
 		if (!smb_fname_src->base_name) {
 			status = NT_STATUS_NO_MEMORY;
 			goto out;
 		}
 
 		if (!resolve_wildcards(ctx, smb_fname_src->base_name,
 				       smb_fname_dst->base_name,
 				       &destname)) {
 			DEBUG(6, ("resolve_wildcards %s %s failed\n",
 				  smb_fname_src->base_name, destname));
 			TALLOC_FREE(talloced);
 			continue;
 		}
 		if (!destname) {
 			status = NT_STATUS_NO_MEMORY;
 			goto out;
 		}
 
 		TALLOC_FREE(smb_fname_dst->base_name);
 		smb_fname_dst->base_name = destname;
 
 		ZERO_STRUCT(smb_fname_src->st);
 		if (posix_pathnames) {
 			SMB_VFS_LSTAT(conn, smb_fname_src);
 		} else {
 			SMB_VFS_STAT(conn, smb_fname_src);
 		}
 
 		create_options = 0;
 
 		if (S_ISDIR(smb_fname_src->st.st_ex_mode)) {
 			create_options |= FILE_DIRECTORY_FILE;
 		}
 
 		status = SMB_VFS_CREATE_FILE(
 			conn,				/* conn */
 			req,				/* req */
 			0,				/* root_dir_fid */
 			smb_fname_src,			/* fname */
 			access_mask,			/* access_mask */
 			(FILE_SHARE_READ |		/* share_access */
 			    FILE_SHARE_WRITE),
 			FILE_OPEN,			/* create_disposition*/
 			create_options,			/* create_options */
-			posix_pathnames ? FILE_FLAG_POSIX_SEMANTICS|0777 : 0, /* file_attributes */
+			0,				/* file_attributes */
 			0,				/* oplock_request */
 			NULL,				/* lease */
 			0,				/* allocation_size */
 			0,				/* private_flags */
 			NULL,				/* sd */
 			NULL,				/* ea_list */
 			&fsp,				/* result */
 			NULL,				/* pinfo */
 			posx,				/* in_context_blobs */
 			NULL);				/* out_context_blobs */
 
 		if (!NT_STATUS_IS_OK(status)) {
 			DEBUG(3,("rename_internals: SMB_VFS_CREATE_FILE "
 				 "returned %s rename %s -> %s\n",
 				 nt_errstr(status),
 				 smb_fname_str_dbg(smb_fname_src),
 				 smb_fname_str_dbg(smb_fname_dst)));
 			break;
 		}
 
 		smb_fname_dst->original_lcomp = talloc_strdup(smb_fname_dst,
 							      dname);
 		if (!smb_fname_dst->original_lcomp) {
 			status = NT_STATUS_NO_MEMORY;
 			goto out;
 		}
 
 		status = rename_internals_fsp(conn, fsp, smb_fname_dst,
 					      attrs, replace_if_exists);
 
 		close_file(req, fsp, NORMAL_CLOSE);
 
 		if (!NT_STATUS_IS_OK(status)) {
 			DEBUG(3, ("rename_internals_fsp returned %s for "
 				  "rename %s -> %s\n", nt_errstr(status),
 				  smb_fname_str_dbg(smb_fname_src),
 				  smb_fname_str_dbg(smb_fname_dst)));
 			break;
 		}
 
 		count++;
 
 		DEBUG(3,("rename_internals: doing rename on %s -> "
 			 "%s\n", smb_fname_str_dbg(smb_fname_src),
 			 smb_fname_str_dbg(smb_fname_src)));
 		TALLOC_FREE(talloced);
 	}
 	TALLOC_FREE(dir_hnd);
 
 	if (count == 0 && NT_STATUS_IS_OK(status) && errno != 0) {
 		status = map_nt_error_from_unix(errno);
 	}
 
  out:
 	TALLOC_FREE(posx);
 	TALLOC_FREE(talloced);
 	TALLOC_FREE(smb_fname_src_dir);
 	TALLOC_FREE(fname_src_dir);
 	TALLOC_FREE(fname_src_mask);
 	return status;
 }
 
 /****************************************************************************
  Reply to a mv.
 ****************************************************************************/
diff --git a/source3/smbd/trans2.c b/source3/smbd/trans2.c
index de5600ec93f..a7a4d32b2c3 100644
--- a/source3/smbd/trans2.c
+++ b/source3/smbd/trans2.c
@@ -110,78 +110,76 @@ NTSTATUS check_access_fsp(const struct files_struct *fsp,
 static NTSTATUS get_posix_fsp(connection_struct *conn,
 			struct smb_request *req,
 			const struct smb_filename *smb_fname,
 			uint32_t access_mask,
 			files_struct **ret_fsp)
 {
 	NTSTATUS status;
 	struct smb_filename *smb_fname_tmp = NULL;
 	uint32_t create_disposition = FILE_OPEN;
 	uint32_t share_access = FILE_SHARE_READ|
 				FILE_SHARE_WRITE|
 				FILE_SHARE_DELETE;
 	struct smb2_create_blobs *posx = NULL;
 
 	/*
 	 * Only FILE_FLAG_POSIX_SEMANTICS matters on existing files,
 	 * but set reasonable defaults.
 	 */
-	uint32_t file_attributes = 0664|FILE_FLAG_POSIX_SEMANTICS;
+	uint32_t file_attributes = 0664;
 	uint32_t oplock = NO_OPLOCK;
 	uint32_t create_options = FILE_NON_DIRECTORY_FILE;
 
 	/* File or directory must exist. */
 	if (!VALID_STAT(smb_fname->st)) {
 		return NT_STATUS_OBJECT_NAME_NOT_FOUND;
 	}
 	/* Cannot be a symlink. */
 	if (S_ISLNK(smb_fname->st.st_ex_mode)) {
 		return NT_STATUS_ACCESS_DENIED;
 	}
 	/* Set options correctly for directory open. */
 	if (S_ISDIR(smb_fname->st.st_ex_mode)) {
 		/*
 		 * Only FILE_FLAG_POSIX_SEMANTICS matters on existing
 		 * directories, but set reasonable defaults.
 		 */
-		file_attributes = 0775|FILE_FLAG_POSIX_SEMANTICS;
+		file_attributes = 0775;
 		create_options = FILE_DIRECTORY_FILE;
 	}
 
 	/* Createfile uses a non-const smb_fname. */
 	smb_fname_tmp = cp_smb_filename(talloc_tos(),
 					smb_fname);
 	if (smb_fname_tmp == NULL) {
 		status = NT_STATUS_NO_MEMORY;
 		goto done;
 	}
 
 	status = make_smb2_posix_create_ctx(
-		talloc_tos(),
-		&posx,
-		file_attributes & ~FILE_FLAG_POSIX_SEMANTICS);
+		talloc_tos(), &posx, file_attributes);
 	if (!NT_STATUS_IS_OK(status)) {
 		DBG_WARNING("make_smb2_posix_create_ctx failed: %s\n",
 			    nt_errstr(status));
 		goto done;
 	}
 
 	status = SMB_VFS_CREATE_FILE(
 		conn,           /* conn */
 		req,            /* req */
 		0,              /* root_dir_fid */
 		smb_fname_tmp,  /* fname */
 		access_mask,    /* access_mask */
 		share_access,   /* share_access */
 		create_disposition,/* create_disposition*/
 		create_options, /* create_options */
 		file_attributes,/* file_attributes */
 		oplock,         /* oplock_request */
 		NULL,           /* lease */
 		0,              /* allocation_size */
 		0,              /* private_flags */
 		NULL,           /* sd */
 		NULL,           /* ea_list */
 		ret_fsp,	/* result */
 		NULL,           /* pinfo */
 		posx,           /* in_context */
 		NULL);          /* out_context */
@@ -8406,119 +8404,116 @@ static NTSTATUS smb_set_file_unix_info2(connection_struct *conn,
 static NTSTATUS smb_posix_mkdir(connection_struct *conn,
 				struct smb_request *req,
 				char **ppdata,
 				int total_data,
 				struct smb_filename *smb_fname,
 				int *pdata_return_size)
 {
 	NTSTATUS status = NT_STATUS_OK;
 	uint32_t raw_unixmode = 0;
-	uint32_t mod_unixmode = 0;
 	mode_t unixmode = (mode_t)0;
 	files_struct *fsp = NULL;
 	uint16_t info_level_return = 0;
 	int info;
 	char *pdata = *ppdata;
 	struct smb2_create_blobs *posx = NULL;
 
 	if (total_data < 18) {
 		return NT_STATUS_INVALID_PARAMETER;
 	}
 
 	raw_unixmode = IVAL(pdata,8);
 	/* Next 4 bytes are not yet defined. */
 
 	status = unix_perms_from_wire(conn, &smb_fname->st, raw_unixmode,
 				      PERM_NEW_DIR, &unixmode);
 	if (!NT_STATUS_IS_OK(status)) {
 		return status;
 	}
 
-	mod_unixmode = (uint32_t)unixmode | FILE_FLAG_POSIX_SEMANTICS;
-
 	status = make_smb2_posix_create_ctx(talloc_tos(), &posx, unixmode);
 	if (!NT_STATUS_IS_OK(status)) {
 		DBG_WARNING("make_smb2_posix_create_ctx failed: %s\n",
 			    nt_errstr(status));
 		return status;
 	}
 
 	DEBUG(10,("smb_posix_mkdir: file %s, mode 0%o\n",
 		  smb_fname_str_dbg(smb_fname), (unsigned int)unixmode));
 
         status = SMB_VFS_CREATE_FILE(
 		conn,					/* conn */
 		req,					/* req */
 		0,					/* root_dir_fid */
 		smb_fname,				/* fname */
 		FILE_READ_ATTRIBUTES,			/* access_mask */
 		FILE_SHARE_NONE,			/* share_access */
 		FILE_CREATE,				/* create_disposition*/
 		FILE_DIRECTORY_FILE,			/* create_options */
-		mod_unixmode,				/* file_attributes */
+		0,					/* file_attributes */
 		0,					/* oplock_request */
 		NULL,					/* lease */
 		0,					/* allocation_size */
 		0,					/* private_flags */
 		NULL,					/* sd */
 		NULL,					/* ea_list */
 		&fsp,					/* result */
 		&info,					/* pinfo */
 		posx,					/* in_context_blobs */
 		NULL);					/* out_context_blobs */
 
 	TALLOC_FREE(posx);
 
         if (NT_STATUS_IS_OK(status)) {
                 close_file(req, fsp, NORMAL_CLOSE);
         }
 
 	info_level_return = SVAL(pdata,16);
  
 	if (info_level_return == SMB_QUERY_FILE_UNIX_BASIC) {
 		*pdata_return_size = 12 + SMB_FILE_UNIX_BASIC_SIZE;
 	} else if (info_level_return ==  SMB_QUERY_FILE_UNIX_INFO2) {
 		*pdata_return_size = 12 + SMB_FILE_UNIX_INFO2_SIZE;
 	} else {
 		*pdata_return_size = 12;
 	}
 
 	/* Realloc the data size */
 	*ppdata = (char *)SMB_REALLOC(*ppdata,*pdata_return_size);
 	if (*ppdata == NULL) {
 		*pdata_return_size = 0;
 		return NT_STATUS_NO_MEMORY;
 	}
 	pdata = *ppdata;
 
 	SSVAL(pdata,0,NO_OPLOCK_RETURN);
 	SSVAL(pdata,2,0); /* No fnum. */
 	SIVAL(pdata,4,info); /* Was directory created. */
 
 	switch (info_level_return) {
 		case SMB_QUERY_FILE_UNIX_BASIC:
 			SSVAL(pdata,8,SMB_QUERY_FILE_UNIX_BASIC);
 			SSVAL(pdata,10,0); /* Padding. */
 			store_file_unix_basic(conn, pdata + 12, fsp,
 					      &smb_fname->st);
 			break;
 		case SMB_QUERY_FILE_UNIX_INFO2:
 			SSVAL(pdata,8,SMB_QUERY_FILE_UNIX_INFO2);
 			SSVAL(pdata,10,0); /* Padding. */
 			store_file_unix_basic_info2(conn, pdata + 12, fsp,
 						    &smb_fname->st);
 			break;
 		default:
 			SSVAL(pdata,8,SMB_NO_INFO_LEVEL_RETURNED);
 			SSVAL(pdata,10,0); /* Padding. */
 			break;
 	}
 
 	return status;
 }
 
 /****************************************************************************
  Open/Create a file with POSIX semantics.
 ****************************************************************************/
 
 #define SMB_O_RDONLY_MAPPING (FILE_READ_DATA|FILE_READ_ATTRIBUTES|FILE_READ_EA)
 #define SMB_O_WRONLY_MAPPING (FILE_WRITE_DATA|FILE_WRITE_ATTRIBUTES|FILE_WRITE_EA)
@@ -8526,262 +8521,260 @@ static NTSTATUS smb_posix_mkdir(connection_struct *conn,
 static NTSTATUS smb_posix_open(connection_struct *conn,
 			       struct smb_request *req,
 				char **ppdata,
 				int total_data,
 				struct smb_filename *smb_fname,
 				int *pdata_return_size)
 {
 	bool extended_oplock_granted = False;
 	char *pdata = *ppdata;
 	uint32_t flags = 0;
 	uint32_t wire_open_mode = 0;
 	uint32_t raw_unixmode = 0;
-	uint32_t mod_unixmode = 0;
+	uint32_t attributes = 0;
 	uint32_t create_disp = 0;
 	uint32_t access_mask = 0;
 	uint32_t create_options = FILE_NON_DIRECTORY_FILE;
 	NTSTATUS status = NT_STATUS_OK;
 	mode_t unixmode = (mode_t)0;
 	files_struct *fsp = NULL;
 	int oplock_request = 0;
 	int info = 0;
 	uint16_t info_level_return = 0;
 	struct smb2_create_blobs *posx = NULL;
 
 	if (total_data < 18) {
 		return NT_STATUS_INVALID_PARAMETER;
 	}
 
 	flags = IVAL(pdata,0);
 	oplock_request = (flags & REQUEST_OPLOCK) ? EXCLUSIVE_OPLOCK : 0;
 	if (oplock_request) {
 		oplock_request |= (flags & REQUEST_BATCH_OPLOCK) ? BATCH_OPLOCK : 0;
 	}
 
 	wire_open_mode = IVAL(pdata,4);
 
 	if (wire_open_mode == (SMB_O_CREAT|SMB_O_DIRECTORY)) {
 		return smb_posix_mkdir(conn, req,
 					ppdata,
 					total_data,
 					smb_fname,
 					pdata_return_size);
 	}
 
 	switch (wire_open_mode & SMB_ACCMODE) {
 		case SMB_O_RDONLY:
 			access_mask = SMB_O_RDONLY_MAPPING;
 			break;
 		case SMB_O_WRONLY:
 			access_mask = SMB_O_WRONLY_MAPPING;
 			break;
 		case SMB_O_RDWR:
 			access_mask = (SMB_O_RDONLY_MAPPING|
 					SMB_O_WRONLY_MAPPING);
 			break;
 		default:
 			DEBUG(5,("smb_posix_open: invalid open mode 0x%x\n",
 				(unsigned int)wire_open_mode ));
 			return NT_STATUS_INVALID_PARAMETER;
 	}
 
 	wire_open_mode &= ~SMB_ACCMODE;
 
 	/* First take care of O_CREAT|O_EXCL interactions. */
 	switch (wire_open_mode & (SMB_O_CREAT | SMB_O_EXCL)) {
 		case (SMB_O_CREAT | SMB_O_EXCL):
 			/* File exists fail. File not exist create. */
 			create_disp = FILE_CREATE;
 			break;
 		case SMB_O_CREAT:
 			/* File exists open. File not exist create. */
 			create_disp = FILE_OPEN_IF;
 			break;
 		case SMB_O_EXCL:
 			/* O_EXCL on its own without O_CREAT is undefined.
 			   We deliberately ignore it as some versions of
 			   Linux CIFSFS can send a bare O_EXCL on the
 			   wire which other filesystems in the kernel
 			   ignore. See bug 9519 for details. */
 
 			/* Fallthrough. */
 
 		case 0:
 			/* File exists open. File not exist fail. */
 			create_disp = FILE_OPEN;
 			break;
 		default:
 			DEBUG(5,("smb_posix_open: invalid create mode 0x%x\n",
 				(unsigned int)wire_open_mode ));
 			return NT_STATUS_INVALID_PARAMETER;
 	}
 
 	/* Next factor in the effects of O_TRUNC. */
 	wire_open_mode &= ~(SMB_O_CREAT | SMB_O_EXCL);
 
 	if (wire_open_mode & SMB_O_TRUNC) {
 		switch (create_disp) {
 			case FILE_CREATE:
 				/* (SMB_O_CREAT | SMB_O_EXCL | O_TRUNC) */
 				/* Leave create_disp alone as
 				   (O_CREAT|O_EXCL|O_TRUNC) == (O_CREAT|O_EXCL)
 				*/
 				/* File exists fail. File not exist create. */
 				break;
 			case FILE_OPEN_IF:
 				/* SMB_O_CREAT | SMB_O_TRUNC */
 				/* File exists overwrite. File not exist create. */
 				create_disp = FILE_OVERWRITE_IF;
 				break;
 			case FILE_OPEN:
 				/* SMB_O_TRUNC */
 				/* File exists overwrite. File not exist fail. */
 				create_disp = FILE_OVERWRITE;
 				break;
 			default:
 				/* Cannot get here. */
 				smb_panic("smb_posix_open: logic error");
 				return NT_STATUS_INVALID_PARAMETER;
 		}
 	}
 
 	raw_unixmode = IVAL(pdata,8);
 	/* Next 4 bytes are not yet defined. */
 
 	status = unix_perms_from_wire(conn, &smb_fname->st, raw_unixmode,
 				      (VALID_STAT(smb_fname->st) ?
 					  PERM_EXISTING_FILE : PERM_NEW_FILE),
 				      &unixmode);
 
 	if (!NT_STATUS_IS_OK(status)) {
 		return status;
 	}
 
 	status = make_smb2_posix_create_ctx(talloc_tos(), &posx, unixmode);
 	if (!NT_STATUS_IS_OK(status)) {
 		DBG_WARNING("make_smb2_posix_create_ctx failed: %s\n",
 			    nt_errstr(status));
 		return status;
 	}
 
-	mod_unixmode = (uint32_t)unixmode | FILE_FLAG_POSIX_SEMANTICS;
-
 	if (wire_open_mode & SMB_O_SYNC) {
 		create_options |= FILE_WRITE_THROUGH;
 	}
 	if (wire_open_mode & SMB_O_APPEND) {
 		access_mask |= FILE_APPEND_DATA;
 	}
 	if (wire_open_mode & SMB_O_DIRECT) {
-		mod_unixmode |= FILE_FLAG_NO_BUFFERING;
+		attributes |= FILE_FLAG_NO_BUFFERING;
 	}
 
 	if ((wire_open_mode & SMB_O_DIRECTORY) ||
 			VALID_STAT_OF_DIR(smb_fname->st)) {
 		if (access_mask != SMB_O_RDONLY_MAPPING) {
 			return NT_STATUS_FILE_IS_A_DIRECTORY;
 		}
 		create_options &= ~FILE_NON_DIRECTORY_FILE;
 		create_options |= FILE_DIRECTORY_FILE;
 	}
 
 	DEBUG(10,("smb_posix_open: file %s, smb_posix_flags = %u, mode 0%o\n",
 		smb_fname_str_dbg(smb_fname),
 		(unsigned int)wire_open_mode,
 		(unsigned int)unixmode ));
 
         status = SMB_VFS_CREATE_FILE(
 		conn,					/* conn */
 		req,					/* req */
 		0,					/* root_dir_fid */
 		smb_fname,				/* fname */
 		access_mask,				/* access_mask */
 		(FILE_SHARE_READ | FILE_SHARE_WRITE |	/* share_access */
 		    FILE_SHARE_DELETE),
 		create_disp,				/* create_disposition*/
 		create_options,				/* create_options */
-		mod_unixmode,				/* file_attributes */
+		attributes,				/* file_attributes */
 		oplock_request,				/* oplock_request */
 		NULL,					/* lease */
 		0,					/* allocation_size */
 		0,					/* private_flags */
 		NULL,					/* sd */
 		NULL,					/* ea_list */
 		&fsp,					/* result */
 		&info,					/* pinfo */
 		posx,					/* in_context_blobs */
 		NULL);					/* out_context_blobs */
 
 	TALLOC_FREE(posx);
 
 	if (!NT_STATUS_IS_OK(status)) {
 		return status;
 	}
 
 	if (oplock_request && lp_fake_oplocks(SNUM(conn))) {
 		extended_oplock_granted = True;
 	}
 
 	if(oplock_request && EXCLUSIVE_OPLOCK_TYPE(fsp->oplock_type)) {
 		extended_oplock_granted = True;
 	}
 
 	info_level_return = SVAL(pdata,16);
  
 	/* Allocate the correct return size. */
 
 	if (info_level_return == SMB_QUERY_FILE_UNIX_BASIC) {
 		*pdata_return_size = 12 + SMB_FILE_UNIX_BASIC_SIZE;
 	} else if (info_level_return ==  SMB_QUERY_FILE_UNIX_INFO2) {
 		*pdata_return_size = 12 + SMB_FILE_UNIX_INFO2_SIZE;
 	} else {
 		*pdata_return_size = 12;
 	}
 
 	/* Realloc the data size */
 	*ppdata = (char *)SMB_REALLOC(*ppdata,*pdata_return_size);
 	if (*ppdata == NULL) {
 		close_file(req, fsp, ERROR_CLOSE);
 		*pdata_return_size = 0;
 		return NT_STATUS_NO_MEMORY;
 	}
 	pdata = *ppdata;
 
 	if (extended_oplock_granted) {
 		if (flags & REQUEST_BATCH_OPLOCK) {
 			SSVAL(pdata,0, BATCH_OPLOCK_RETURN);
 		} else {
 			SSVAL(pdata,0, EXCLUSIVE_OPLOCK_RETURN);
 		}
 	} else if (fsp->oplock_type == LEVEL_II_OPLOCK) {
 		SSVAL(pdata,0, LEVEL_II_OPLOCK_RETURN);
 	} else {
 		SSVAL(pdata,0,NO_OPLOCK_RETURN);
 	}
 
 	SSVAL(pdata,2,fsp->fnum);
 	SIVAL(pdata,4,info); /* Was file created etc. */
 
 	switch (info_level_return) {
 		case SMB_QUERY_FILE_UNIX_BASIC:
 			SSVAL(pdata,8,SMB_QUERY_FILE_UNIX_BASIC);
 			SSVAL(pdata,10,0); /* padding. */
 			store_file_unix_basic(conn, pdata + 12, fsp,
 					      &smb_fname->st);
 			break;
 		case SMB_QUERY_FILE_UNIX_INFO2:
 			SSVAL(pdata,8,SMB_QUERY_FILE_UNIX_INFO2);
 			SSVAL(pdata,10,0); /* padding. */
 			store_file_unix_basic_info2(conn, pdata + 12, fsp,
 						    &smb_fname->st);
 			break;
 		default:
 			SSVAL(pdata,8,SMB_NO_INFO_LEVEL_RETURNED);
 			SSVAL(pdata,10,0); /* padding. */
 			break;
 	}
 	return NT_STATUS_OK;
 }
 
 /****************************************************************************
  Delete a file with POSIX semantics.
 ****************************************************************************/
@@ -8789,112 +8782,112 @@ static NTSTATUS smb_posix_open(connection_struct *conn,
 static NTSTATUS smb_posix_unlink(connection_struct *conn,
 				 struct smb_request *req,
 				const char *pdata,
 				int total_data,
 				struct smb_filename *smb_fname)
 {
 	NTSTATUS status = NT_STATUS_OK;
 	files_struct *fsp = NULL;
 	uint16_t flags = 0;
 	char del = 1;
 	int info = 0;
 	int create_options = 0;
 	struct share_mode_lock *lck = NULL;
 	bool other_nonposix_opens;
 	struct smb2_create_blobs *posx = NULL;
 
 	if (total_data < 2) {
 		return NT_STATUS_INVALID_PARAMETER;
 	}
 
 	flags = SVAL(pdata,0);
 
 	if (!VALID_STAT(smb_fname->st)) {
 		return NT_STATUS_OBJECT_NAME_NOT_FOUND;
 	}
 
 	if ((flags == SMB_POSIX_UNLINK_DIRECTORY_TARGET) &&
 			!VALID_STAT_OF_DIR(smb_fname->st)) {
 		return NT_STATUS_NOT_A_DIRECTORY;
 	}
 
 	DEBUG(10,("smb_posix_unlink: %s %s\n",
 		(flags == SMB_POSIX_UNLINK_DIRECTORY_TARGET) ? "directory" : "file",
 		smb_fname_str_dbg(smb_fname)));
 
 	if (VALID_STAT_OF_DIR(smb_fname->st)) {
 		create_options |= FILE_DIRECTORY_FILE;
 	}
 
 	status = make_smb2_posix_create_ctx(talloc_tos(), &posx, 0777);
 	if (!NT_STATUS_IS_OK(status)) {
 		DBG_WARNING("make_smb2_posix_create_ctx failed: %s\n",
 			    nt_errstr(status));
 		return status;
 	}
 
         status = SMB_VFS_CREATE_FILE(
 		conn,					/* conn */
 		req,					/* req */
 		0,					/* root_dir_fid */
 		smb_fname,				/* fname */
 		DELETE_ACCESS,				/* access_mask */
 		(FILE_SHARE_READ | FILE_SHARE_WRITE |	/* share_access */
 		    FILE_SHARE_DELETE),
 		FILE_OPEN,				/* create_disposition*/
 		create_options,				/* create_options */
-		FILE_FLAG_POSIX_SEMANTICS|0777,		/* file_attributes */
+		0,					/* file_attributes */
 		0,					/* oplock_request */
 		NULL,					/* lease */
 		0,					/* allocation_size */
 		0,					/* private_flags */
 		NULL,					/* sd */
 		NULL,					/* ea_list */
 		&fsp,					/* result */
 		&info,					/* pinfo */
 		posx,					/* in_context_blobs */
 		NULL);					/* out_context_blobs */
 
 	TALLOC_FREE(posx);
 
 	if (!NT_STATUS_IS_OK(status)) {
 		return status;
 	}
 
 	/*
 	 * Don't lie to client. If we can't really delete due to
 	 * non-POSIX opens return SHARING_VIOLATION.
 	 */
 
 	lck = get_existing_share_mode_lock(talloc_tos(), fsp->file_id);
 	if (lck == NULL) {
 		DEBUG(0, ("smb_posix_unlink: Could not get share mode "
 			  "lock for file %s\n", fsp_str_dbg(fsp)));
 		close_file(req, fsp, NORMAL_CLOSE);
 		return NT_STATUS_INVALID_PARAMETER;
 	}
 
 	other_nonposix_opens = has_other_nonposix_opens(lck, fsp);
 	if (other_nonposix_opens) {
 		/* Fail with sharing violation. */
 		TALLOC_FREE(lck);
 		close_file(req, fsp, NORMAL_CLOSE);
 		return NT_STATUS_SHARING_VIOLATION;
 	}
 
 	/*
 	 * Set the delete on close.
 	 */
 	status = smb_set_file_disposition_info(conn,
 						&del,
 						1,
 						fsp,
 						smb_fname);
 
 	TALLOC_FREE(lck);
 
 	if (!NT_STATUS_IS_OK(status)) {
 		close_file(req, fsp, NORMAL_CLOSE);
 		return status;
 	}
 	return close_file(req, fsp, NORMAL_CLOSE);
 }
