commit 826eac3e89979962587171a81652f28891ed9366
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Tue Oct 15 23:17:05 2019 +0200

    OGRSimpleCurve::setNumPoints(): avoid potential int overflow on 32 bit on big values of nNewPointCount. Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=18092

diff --git a/autotest/ogr/ogr_geom.py b/autotest/ogr/ogr_geom.py
index 3c74bd2903..1e82c49e3f 100755
--- a/autotest/ogr/ogr_geom.py
+++ b/autotest/ogr/ogr_geom.py
@@ -779,60 +779,57 @@ def test_ogr_geom_flattenTo2D_triangle():
 def test_ogr_geom_linestring_limits():
 
     geom = ogr.CreateGeometryFromWkt('LINESTRING EMPTY')
     assert geom.Length() == 0
 
     gdal.ErrorReset()
     gdal.PushErrorHandler('CPLQuietErrorHandler')
     geom.GetPoint(-1)
     gdal.PopErrorHandler()
     assert gdal.GetLastErrorType() != 0
 
     gdal.ErrorReset()
     gdal.PushErrorHandler('CPLQuietErrorHandler')
     geom.GetPoint(0)
     gdal.PopErrorHandler()
     assert gdal.GetLastErrorType() != 0
 
     gdal.ErrorReset()
     gdal.PushErrorHandler('CPLQuietErrorHandler')
     geom.GetPoint_2D(-1)
     gdal.PopErrorHandler()
     assert gdal.GetLastErrorType() != 0
 
     gdal.ErrorReset()
     gdal.PushErrorHandler('CPLQuietErrorHandler')
     geom.GetPoint_2D(0)
     gdal.PopErrorHandler()
     assert gdal.GetLastErrorType() != 0
 
     gdal.ErrorReset()
     gdal.PushErrorHandler('CPLQuietErrorHandler')
     geom.SetPoint(-1, 5, 6, 7)
     gdal.PopErrorHandler()
     assert gdal.GetLastErrorType() != 0
 
     gdal.ErrorReset()
     gdal.PushErrorHandler('CPLQuietErrorHandler')
     geom.SetPoint_2D(-1, 5, 6)
     gdal.PopErrorHandler()
     assert gdal.GetLastErrorType() != 0
 
-    if False:  # pylint: disable=using-constant-test
-        gdal.ErrorReset()
-        gdal.PushErrorHandler('CPLQuietErrorHandler')
+    gdal.ErrorReset()
+    with gdaltest.error_handler():
         geom.SetPoint(2147000000, 5, 6, 7)
-        gdal.PopErrorHandler()
-        assert gdal.GetLastErrorType() != 0
+    assert gdal.GetLastErrorType() != 0
 
-        gdal.ErrorReset()
-        gdal.PushErrorHandler('CPLQuietErrorHandler')
+    gdal.ErrorReset()
+    with gdaltest.error_handler():
         geom.SetPoint_2D(2147000000, 5, 6)
-        gdal.PopErrorHandler()
-        assert gdal.GetLastErrorType() != 0
+    assert gdal.GetLastErrorType() != 0
 
     geom = ogr.CreateGeometryFromWkt('LINESTRING(0 0)')
     assert geom.Length() == 0
     geom = ogr.CreateGeometryFromWkt('LINESTRING(0 0, 1 0)')
     assert geom.Length() == 1
 
 ###############################################################################
diff --git a/gdal/ogr/ogrlinestring.cpp b/gdal/ogr/ogrlinestring.cpp
index e5381c4e13..b8af7161e0 100644
--- a/gdal/ogr/ogrlinestring.cpp
+++ b/gdal/ogr/ogrlinestring.cpp
@@ -435,91 +435,100 @@ double OGRSimpleCurve::getM( int iVertex ) const
 void OGRSimpleCurve::setNumPoints( int nNewPointCount, int bZeroizeNewContent )
 
 {
     CPLAssert( nNewPointCount >= 0 );
 
     if( nNewPointCount == 0 )
     {
         CPLFree( paoPoints );
         paoPoints = nullptr;
 
         CPLFree( padfZ );
         padfZ = nullptr;
 
         CPLFree( padfM );
         padfM = nullptr;
 
         nPointCount = 0;
         return;
     }
 
     if( nNewPointCount > nPointCount )
     {
+        // Overflow of sizeof(OGRRawPoint) * nNewPointCount can only occur on
+        // 32 bit, but we don't really want to allocate 2 billion points even on
+        // 64 bit...
+        if( nNewPointCount > std::numeric_limits<int>::max() /
+                                    static_cast<int>(sizeof(OGRRawPoint)) )
+        {
+            CPLError(CE_Failure, CPLE_IllegalArg, "Too big point count.");
+            return;
+        }
         OGRRawPoint* paoNewPoints = static_cast<OGRRawPoint *>(
             VSI_REALLOC_VERBOSE(paoPoints,
                                 sizeof(OGRRawPoint) * nNewPointCount));
         if( paoNewPoints == nullptr )
         {
             return;
         }
         paoPoints = paoNewPoints;
 
         if( bZeroizeNewContent )
         {
             // gcc 8.0 (dev) complains about -Wclass-memaccess since
             // OGRRawPoint() has a constructor. So use a void* pointer.  Doing
             // the memset() here is correct since the constructor sets to 0.  We
             // could instead use a std::fill(), but at every other place, we
             // treat this class as a regular POD (see above use of realloc())
             void* dest = static_cast<void*>(paoPoints + nPointCount);
             memset( dest,
                     0, sizeof(OGRRawPoint) * (nNewPointCount - nPointCount) );
         }
 
         if( flags & OGR_G_3D )
         {
             double* padfNewZ = static_cast<double *>(
                 VSI_REALLOC_VERBOSE(padfZ, sizeof(double) * nNewPointCount));
             if( padfNewZ == nullptr )
             {
                 return;
             }
             padfZ = padfNewZ;
             if( bZeroizeNewContent )
                 memset( padfZ + nPointCount, 0,
                     sizeof(double) * (nNewPointCount - nPointCount) );
         }
 
         if( flags & OGR_G_MEASURED )
         {
             double* padfNewM = static_cast<double *>(
                 VSI_REALLOC_VERBOSE(padfM, sizeof(double) * nNewPointCount));
             if( padfNewM == nullptr )
             {
                 return;
             }
             padfM = padfNewM;
             if( bZeroizeNewContent )
                 memset( padfM + nPointCount, 0,
                     sizeof(double) * (nNewPointCount - nPointCount) );
         }
     }
 
     nPointCount = nNewPointCount;
 }
 
 /************************************************************************/
 /*                              setPoint()                              */
 /************************************************************************/
 
 /**
  * \brief Set the location of a vertex in line string.
  *
  * If iPoint is larger than the number of necessary the number of existing
  * points in the line string, the point count will be increased to
  * accommodate the request.
  *
  * There is no SFCOM analog to this method.
  *
  * @param iPoint the index of the vertex to assign (zero based).
  * @param poPoint the value to assign to the vertex.
  */
