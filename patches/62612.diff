commit 322b071c45d5e5ae14d247e8fa74a4cff58e1a8a
Author: Alan Modra <amodra@gmail.com>
Date:   Tue Oct 10 18:16:38 2023 +1030

    asan: invalid free in bfd_init_section_compress_status
    
    With specially crafted compressed sections, it's possible to tickle a
    problem when decompressing:  If the compression headers says the
    uncompressed size is zero, this will be seen as an error return from
    bfd_compress_section_contents.  On errors the caller should free any
    malloc'd input buffers, but this isn't really an error and the section
    contents have been updated to a bfd_alloc'd buffer which can't be
    freed.
    
            * compress.c (bfd_compress_section_contents): Return -1 as error
            rather than 0.
            (bfd_init_section_compress_status, bfd_compress_section): Adjust.

diff --git a/bfd/compress.c b/bfd/compress.c
index 83564fea15f..7ec7b0edf38 100644
--- a/bfd/compress.c
+++ b/bfd/compress.c
@@ -506,194 +506,194 @@ static bool
 decompress_contents (bool is_zstd, bfd_byte *compressed_buffer,
 		     bfd_size_type compressed_size,
 		     bfd_byte *uncompressed_buffer,
 		     bfd_size_type uncompressed_size)
 {
   if (is_zstd)
     {
 #ifdef HAVE_ZSTD
       size_t ret = ZSTD_decompress (uncompressed_buffer, uncompressed_size,
 				    compressed_buffer, compressed_size);
       return !ZSTD_isError (ret);
 #endif
     }
 
   z_stream strm;
   int rc;
 
   /* It is possible the section consists of several compressed
      buffers concatenated together, so we uncompress in a loop.  */
   /* PR 18313: The state field in the z_stream structure is supposed
      to be invisible to the user (ie us), but some compilers will
      still complain about it being used without initialisation.  So
      we first zero the entire z_stream structure and then set the fields
      that we need.  */
   memset (& strm, 0, sizeof strm);
   strm.avail_in = compressed_size;
   strm.next_in = (Bytef*) compressed_buffer;
   strm.avail_out = uncompressed_size;
   /* FIXME: strm.avail_in and strm.avail_out are typically unsigned
      int.  Supporting sizes that don't fit in an unsigned int is
      possible but will require some rewriting of this function.  */
   if (strm.avail_in != compressed_size || strm.avail_out != uncompressed_size)
     return false;
 
   BFD_ASSERT (Z_OK == 0);
   rc = inflateInit (&strm);
   while (strm.avail_in > 0 && strm.avail_out > 0)
     {
       if (rc != Z_OK)
 	break;
       strm.next_out = ((Bytef*) uncompressed_buffer
 		       + (uncompressed_size - strm.avail_out));
       rc = inflate (&strm, Z_FINISH);
       if (rc != Z_STREAM_END)
 	break;
       rc = inflateReset (&strm);
     }
   return inflateEnd (&strm) == Z_OK && rc == Z_OK && strm.avail_out == 0;
 }
 
 /* Compress section contents using zlib/zstd and store
    as the contents field.  This function assumes the contents
    field was allocated using bfd_malloc() or equivalent.
 
    Return the uncompressed size if the full section contents is
-   compressed successfully.  Otherwise return 0.  */
+   compressed successfully.  Otherwise return (bfd_size_type) -1.  */
 
 static bfd_size_type
 bfd_compress_section_contents (bfd *abfd, sec_ptr sec)
 {
   bfd_byte *input_buffer;
   uLong compressed_size;
   bfd_byte *buffer;
   bfd_size_type buffer_size;
   int zlib_size = 0;
   int orig_header_size;
   bfd_size_type uncompressed_size;
   unsigned int uncompressed_alignment_pow;
   enum compression_type ch_type = ch_none;
   int new_header_size = bfd_get_compression_header_size (abfd, NULL);
   bool compressed
     = bfd_is_section_compressed_info (abfd, sec,
 				      &orig_header_size,
 				      &uncompressed_size,
 				      &uncompressed_alignment_pow,
 				      &ch_type);
   bool update = false;
 
   /* We shouldn't be trying to decompress unsupported compressed sections.  */
   if (compressed && orig_header_size < 0)
     abort ();
 
   /* Either ELF compression header or the 12-byte, "ZLIB" + 8-byte size,
      overhead in .zdebug* section.  */
   if (!new_header_size)
     new_header_size = 12;
   if (ch_type == ch_none)
     orig_header_size = 12;
 
   input_buffer = sec->contents;
   if (compressed)
     {
       zlib_size = sec->size - orig_header_size;
       compressed_size = zlib_size + new_header_size;
 
       /* If we are converting between zlib-gnu and zlib-gabi then the
 	 compressed contents just need to be moved.  */
       update = (ch_type < ch_compress_zstd
 		&& (abfd->flags & BFD_COMPRESS_ZSTD) == 0);
 
       /* Uncompress when not just moving contents or when compressed
 	 is not smaller than uncompressed.  */
       if (!update || compressed_size >= uncompressed_size)
 	{
 	  buffer_size = uncompressed_size;
 	  buffer = bfd_malloc (buffer_size);
 	  if (buffer == NULL)
-	    return 0;
+	    return (bfd_size_type) -1;
 
 	  if (!decompress_contents (ch_type == ch_compress_zstd,
 				    input_buffer + orig_header_size,
 				    zlib_size, buffer, buffer_size))
 	    {
 	      bfd_set_error (bfd_error_bad_value);
 	      free (buffer);
-	      return 0;
+	      return (bfd_size_type) -1;
 	    }
 	  free (input_buffer);
 	  bfd_set_section_alignment (sec, uncompressed_alignment_pow);
 	  sec->contents = buffer;
 	  sec->flags |= SEC_IN_MEMORY;
 	  sec->compress_status = COMPRESS_SECTION_NONE;
 	  sec->size = uncompressed_size;
 	  input_buffer = buffer;
 	}
     }
 
   if (!update)
     compressed_size = compressBound (uncompressed_size) + new_header_size;
 
   buffer_size = compressed_size;
   buffer = bfd_alloc (abfd, buffer_size);
   if (buffer == NULL)
-    return 0;
+    return (bfd_size_type) -1;
 
   if (update)
     {
       if (compressed_size < uncompressed_size)
 	memcpy (buffer + new_header_size,
 		input_buffer + orig_header_size,
 		zlib_size);
     }
   else
     {
       if (abfd->flags & BFD_COMPRESS_ZSTD)
 	{
 #if HAVE_ZSTD
 	  compressed_size = ZSTD_compress (buffer + new_header_size,
 					   compressed_size,
 					   input_buffer,
 					   uncompressed_size,
 					   ZSTD_CLEVEL_DEFAULT);
 	  if (ZSTD_isError (compressed_size))
 	    {
 	      bfd_release (abfd, buffer);
 	      bfd_set_error (bfd_error_bad_value);
-	      return 0;
+	      return (bfd_size_type) -1;
 	    }
 #endif
 	}
       else if (compress ((Bytef *) buffer + new_header_size, &compressed_size,
 			 (const Bytef *) input_buffer, uncompressed_size)
 	       != Z_OK)
 	{
 	  bfd_release (abfd, buffer);
 	  bfd_set_error (bfd_error_bad_value);
-	  return 0;
+	  return (bfd_size_type) -1;
 	}
 
       compressed_size += new_header_size;
     }
 
   /* If compression didn't make the section smaller, keep it uncompressed.  */
   if (compressed_size >= uncompressed_size)
     {
       memcpy (buffer, input_buffer, uncompressed_size);
       if (bfd_get_flavour (abfd) == bfd_target_elf_flavour)
 	elf_section_flags (sec) &= ~SHF_COMPRESSED;
       sec->compress_status = COMPRESS_SECTION_NONE;
     }
   else
     {
       sec->size = uncompressed_size;
       bfd_update_compression_header (abfd, buffer, sec);
       sec->size = compressed_size;
       sec->compress_status = COMPRESS_SECTION_DONE;
     }
   sec->contents = buffer;
   sec->flags |= SEC_IN_MEMORY;
   free (input_buffer);
   return uncompressed_size;
 }
 
 /*
@@ -1058,42 +1058,42 @@ bool
 bfd_init_section_compress_status (bfd *abfd, sec_ptr sec)
 {
   bfd_size_type uncompressed_size;
   bfd_byte *uncompressed_buffer;
 
   /* Error if not opened for read.  */
   if (abfd->direction != read_direction
       || sec->size == 0
       || sec->rawsize != 0
       || sec->contents != NULL
       || sec->compress_status != COMPRESS_SECTION_NONE
       || _bfd_section_size_insane (abfd, sec))
     {
       bfd_set_error (bfd_error_invalid_operation);
       return false;
     }
 
   /* Read in the full section contents and compress it.  */
   uncompressed_size = sec->size;
   uncompressed_buffer = (bfd_byte *) bfd_malloc (uncompressed_size);
   /* PR 21431 */
   if (uncompressed_buffer == NULL)
     return false;
 
   if (!bfd_get_section_contents (abfd, sec, uncompressed_buffer,
 				 0, uncompressed_size))
     {
       free (uncompressed_buffer);
       return false;
     }
 
   sec->contents = uncompressed_buffer;
-  if (bfd_compress_section_contents (abfd, sec) == 0)
+  if (bfd_compress_section_contents (abfd, sec) == (bfd_size_type) -1)
     {
       free (sec->contents);
       sec->contents = NULL;
       return false;
     }
   return true;
 }
 
 /*
@@ -1116,25 +1116,25 @@ bool
 bfd_compress_section (bfd *abfd, sec_ptr sec, bfd_byte *uncompressed_buffer)
 {
   bfd_size_type uncompressed_size = sec->size;
 
   /* Error if not opened for write.  */
   if (abfd->direction != write_direction
       || uncompressed_size == 0
       || uncompressed_buffer == NULL
       || sec->contents != NULL
       || sec->compressed_size != 0
       || sec->compress_status != COMPRESS_SECTION_NONE)
     {
       bfd_set_error (bfd_error_invalid_operation);
       return false;
     }
 
   sec->contents = uncompressed_buffer;
-  if (bfd_compress_section_contents (abfd, sec) == 0)
+  if (bfd_compress_section_contents (abfd, sec) == (bfd_size_type) -1)
     {
       free (sec->contents);
       sec->contents = NULL;
       return false;
     }
   return true;
 }
