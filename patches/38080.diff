commit 17a2eec2a8e47939782c1352ddb0fa4d3e73f9d8
Author: Daniel-Constantin Mierla <miconda@gmail.com>
Date:   Thu Sep 9 09:05:54 2021 +0200

    core: parse_to_param() check for end of data on escape or start of value

diff --git a/src/core/parser/parse_addr_spec.c b/src/core/parser/parse_addr_spec.c
index 0b8cddc8e2..99138dcaf4 100644
--- a/src/core/parser/parse_addr_spec.c
+++ b/src/core/parser/parse_addr_spec.c
@@ -86,433 +86,445 @@ enum
 static char *parse_to_param(char *const buffer, const char *const end,
 		struct to_body *const to_b, const int allow_comma_sep,
 		int *const returned_status)
 {
 	struct to_param *param;
 	struct to_param *newparam;
 	int status;
 	int saved_status;
 	char *tmp;
 
 	param = 0;
 	newparam = 0;
 	status = E_PARA_VALUE;
 	saved_status = E_PARA_VALUE;
 	for(tmp = buffer; tmp < end; tmp++) {
 		switch(*tmp) {
 			case ' ':
 			case '\t':
 				switch(status) {
 					case TAG3:
 						param->type = TAG_PARAM;
 					case PARA_NAME:
 					case TAG1:
 					case TAG2:
 						param->name.len = tmp - param->name.s;
 						status = S_EQUAL;
 						break;
 					case PARA_VALUE_TOKEN:
 						param->value.len = tmp - param->value.s;
 						status = E_PARA_VALUE;
 						add_param(param, to_b, newparam);
 						break;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now =' '*/
 						status = saved_status;
 						break;
 				}
 				break;
 			case '\n':
 				switch(status) {
 					case S_PARA_NAME:
 					case S_EQUAL:
 					case S_PARA_VALUE:
 					case E_PARA_VALUE:
 						saved_status = status;
 						status = F_LF;
 						break;
 					case TAG3:
 						param->type = TAG_PARAM;
 					case PARA_NAME:
 					case TAG1:
 					case TAG2:
 						param->name.len = tmp - param->name.s;
 						saved_status = S_EQUAL;
 						status = F_LF;
 						break;
 					case PARA_VALUE_TOKEN:
 						param->value.len = tmp - param->value.s;
 						saved_status = E_PARA_VALUE;
 						status = F_LF;
 						add_param(param, to_b, newparam);
 						break;
 					case F_CR:
 						status = F_CRLF;
 						break;
 					case F_CRLF:
 					case F_LF:
 						status = saved_status;
 						goto endofheader;
 					default:
 						LM_ERR("unexpected char [%c] in status %d: [%.*s] .\n",
 								*tmp, status, (int)(tmp - buffer), ZSW(buffer));
 						goto error;
 				}
 				break;
 			case '\r':
 				switch(status) {
 					case S_PARA_NAME:
 					case S_EQUAL:
 					case S_PARA_VALUE:
 					case E_PARA_VALUE:
 						saved_status = status;
 						status = F_CR;
 						break;
 					case TAG3:
 						param->type = TAG_PARAM;
 					case PARA_NAME:
 					case TAG1:
 					case TAG2:
 						param->name.len = tmp - param->name.s;
 						saved_status = S_EQUAL;
 						status = F_CR;
 						break;
 					case PARA_VALUE_TOKEN:
 						param->value.len = tmp - param->value.s;
 						saved_status = E_PARA_VALUE;
 						status = F_CR;
 						add_param(param, to_b, newparam);
 						break;
 					case F_CRLF:
 					case F_CR:
 					case F_LF:
 						status = saved_status;
 						goto endofheader;
 					default:
 						LM_ERR("unexpected char [%c] in status %d: [%.*s] .\n",
 								*tmp, status, (int)(tmp - buffer), ZSW(buffer));
 						goto error;
 				}
 				break;
 			case 0:
 				switch(status) {
 					case TAG3:
 						param->type = TAG_PARAM;
 					case PARA_NAME:
 					case TAG1:
 					case TAG2:
 						param->name.len = tmp - param->name.s;
 						status = S_EQUAL;
 					case S_EQUAL:
 					case S_PARA_VALUE:
 						saved_status = status;
 						goto endofheader;
 					case PARA_VALUE_TOKEN:
 						status = E_PARA_VALUE;
 						param->value.len = tmp - param->value.s;
 						add_param(param, to_b, newparam);
 					case E_PARA_VALUE:
 						saved_status = status;
 						goto endofheader;
 						break;
 					default:
 						LM_ERR("unexpected char [%c] in status %d: [%.*s] .\n",
 								*tmp, status, (int)(tmp - buffer), ZSW(buffer));
 						goto error;
 				}
 				break;
 			case '\\':
 				switch(status) {
 					case PARA_VALUE_QUOTED:
+						if(tmp+1>=end) {
+							LM_ERR("unexpected end of data in status %d - start: %p"
+									" - end: %p - crt: %p\n",
+								status, buffer, end , tmp);
+							goto error;
+						}
 						switch(*(tmp + 1)) {
 							case '\r':
 							case '\n':
 								break;
 							default:
 								tmp++;
 						}
 					default:
 						LM_ERR("unexpected char [%c] in status %d: [%.*s] .\n",
 								*tmp, status, (int)(tmp - buffer), ZSW(buffer));
 						goto error;
 				}
 				break;
 			case '"':
 				switch(status) {
 					case S_PARA_VALUE:
+						if(tmp+1>=end) {
+							LM_ERR("unexpected end of data in status %d - start: %p"
+									" - end: %p - crt: %p\n",
+								status, buffer, end , tmp);
+							goto error;
+						}
 						param->value.s = tmp + 1;
 						status = PARA_VALUE_QUOTED;
 						break;
 					case PARA_VALUE_QUOTED:
 						param->value.len = tmp - param->value.s;
 						add_param(param, to_b, newparam);
 						status = E_PARA_VALUE;
 						break;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					default:
 						LM_ERR("unexpected char [%c] in status %d: [%.*s] .\n",
 								*tmp, status, (int)(tmp - buffer), ZSW(buffer));
 						goto error;
 				}
 				break;
 			case ';':
 				switch(status) {
 					case PARA_VALUE_QUOTED:
 						break;
 					case TAG3:
 						param->type = TAG_PARAM;
 					case PARA_NAME:
 					case TAG1:
 					case TAG2:
 						param->name.len = tmp - param->name.s;
 					case S_EQUAL:
 						param->value.s = 0;
 						param->value.len = 0;
 						goto semicolon_add_param;
 					case S_PARA_VALUE:
 						param->value.s = tmp;
 					case PARA_VALUE_TOKEN:
 						param->value.len = tmp - param->value.s;
 					semicolon_add_param:
 						add_param(param, to_b, newparam);
 					case E_PARA_VALUE:
 						if(newparam) {
 							pkg_free(newparam);
 							newparam = NULL;
 						}
 						param = (struct to_param *)pkg_malloc(
 								sizeof(struct to_param));
 						if(!param) {
 							PKG_MEM_ERROR;
 							goto error;
 						}
 						memset(param, 0, sizeof(struct to_param));
 						param->type = GENERAL_PARAM;
 						status = S_PARA_NAME;
 						/* link to free mem if not added in to_body list */
 						newparam = param;
 						break;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					default:
 						LM_ERR("unexpected char [%c] in status %d: [%.*s] .\n",
 								*tmp, status, (int)(tmp - buffer), ZSW(buffer));
 						goto error;
 				}
 				break;
 			case 'T':
 			case 't':
 				switch(status) {
 					case PARA_VALUE_QUOTED:
 					case PARA_VALUE_TOKEN:
 					case PARA_NAME:
 						break;
 					case S_PARA_NAME:
 						param->name.s = tmp;
 						status = TAG1;
 						break;
 					case S_PARA_VALUE:
 						param->value.s = tmp;
 						status = PARA_VALUE_TOKEN;
 						break;
 					case TAG1:
 					case TAG2:
 					case TAG3:
 						status = PARA_NAME;
 						break;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					default:
 						LM_ERR("unexpected char [%c] in status %d: [%.*s] .\n",
 								*tmp, status, (int)(tmp - buffer), ZSW(buffer));
 						goto error;
 				}
 				break;
 			case 'A':
 			case 'a':
 				switch(status) {
 					case PARA_VALUE_QUOTED:
 					case PARA_VALUE_TOKEN:
 					case PARA_NAME:
 						break;
 					case S_PARA_NAME:
 						param->name.s = tmp;
 						status = PARA_NAME;
 						break;
 					case S_PARA_VALUE:
 						param->value.s = tmp;
 						status = PARA_VALUE_TOKEN;
 						break;
 					case TAG1:
 						status = TAG2;
 						break;
 					case TAG2:
 					case TAG3:
 						status = PARA_NAME;
 						break;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					default:
 						LM_ERR("unexpected char [%c] in status %d: [%.*s] .\n",
 								*tmp, status, (int)(tmp - buffer), ZSW(buffer));
 						goto error;
 				}
 				break;
 			case 'G':
 			case 'g':
 				switch(status) {
 					case PARA_VALUE_QUOTED:
 					case PARA_VALUE_TOKEN:
 					case PARA_NAME:
 						break;
 					case S_PARA_NAME:
 						param->name.s = tmp;
 						status = PARA_NAME;
 						break;
 					case S_PARA_VALUE:
 						param->value.s = tmp;
 						status = PARA_VALUE_TOKEN;
 						break;
 					case TAG1:
 					case TAG3:
 						status = PARA_NAME;
 						break;
 					case TAG2:
 						status = TAG3;
 						break;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					default:
 						LM_ERR("unexpected char [%c] in status %d: [%.*s] .\n",
 								*tmp, status, (int)(tmp - buffer), ZSW(buffer));
 						goto error;
 				}
 				break;
 			case '=':
 				switch(status) {
 					case PARA_VALUE_QUOTED:
 						break;
 					case TAG3:
 						param->type = TAG_PARAM;
 					case PARA_NAME:
 					case TAG1:
 					case TAG2:
 						param->name.len = tmp - param->name.s;
 						status = S_PARA_VALUE;
 						break;
 					case S_EQUAL:
 						status = S_PARA_VALUE;
 						break;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					default:
 						LM_ERR("unexpected char [%c] in status %d: [%.*s] .\n",
 								*tmp, status, (int)(tmp - buffer), ZSW(buffer));
 						goto error;
 				}
 				break;
 			case ',':
 				if(status == PARA_VALUE_QUOTED) {
 					/* comma is allowed inside quoted values */
 					break;
 				}
 				if(allow_comma_sep) {
 					switch(status) {
 						case S_PARA_NAME:
 						case S_EQUAL:
 						case S_PARA_VALUE:
 						case E_PARA_VALUE:
 							saved_status = status;
 							status = E_PARA_VALUE;
 							goto endofheader;
 						case TAG3:
 							param->type = TAG_PARAM;
 						case PARA_NAME:
 						case TAG1:
 						case TAG2:
 							param->name.len = tmp - param->name.s;
 							saved_status = S_EQUAL;
 							status = E_PARA_VALUE;
 							goto endofheader;
 						case PARA_VALUE_TOKEN:
 							param->value.len = tmp - param->value.s;
 							saved_status = E_PARA_VALUE;
 							status = E_PARA_VALUE;
 							add_param(param, to_b, newparam);
 							goto endofheader;
 						case F_CRLF:
 						case F_CR:
 						case F_LF:
 							status = saved_status;
 							goto endofheader;
 						default:
 							LM_ERR("unexpected char [%c] in status %d: [%.*s] "
 									".\n",
 									*tmp, status, (int)(tmp - buffer),
 									ZSW(buffer));
 							goto error;
 					}
 					break;
 				} else {
 					if((status == S_PARA_VALUE || status == PARA_VALUE_TOKEN)
 							&& param->type == TAG_PARAM) {
 						/* if comma is not separator, allow it as part of value
 						 * - some user agents use it */
 						break;
 					}
 					LM_ERR("invalid character ',' in status %d: [%.*s]\n",
 							status, (int)(tmp - buffer), ZSW(buffer));
 				}
 			default:
 				switch(status) {
 					case TAG1:
 					case TAG2:
 					case TAG3:
 						status = PARA_NAME;
 						break;
 					case PARA_VALUE_TOKEN:
 					case PARA_NAME:
 					case PARA_VALUE_QUOTED:
 						break;
 					case S_PARA_NAME:
 						param->name.s = tmp;
 						status = PARA_NAME;
 						break;
 					case S_PARA_VALUE:
 						param->value.s = tmp;
 						status = PARA_VALUE_TOKEN;
 						break;
 					case F_CRLF:
 					case F_LF:
 					case F_CR:
 						/*previous=crlf and now !=' '*/
 						goto endofheader;
 					default:
 						LM_ERR("spitting out [%c] in status %d\n", *tmp,
 								status);
 						goto error;
 				}
 		} /*switch*/
 	}	 /*for*/
 	if(!(status == F_CR || status == F_LF || status == F_CRLF))
 		saved_status = status;
