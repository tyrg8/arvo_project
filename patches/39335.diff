commit 7a3bc47f753c192a54c11a3bfe826d1af8b92eda
Author: Alex Hultman <alexhultman@gmail.com>
Date:   Mon Sep 27 02:21:46 2021 +0200

    And that is totally wrong & broken

diff --git a/src/TopicTree.h b/src/TopicTree.h
index bc484b8..73eef97 100644
--- a/src/TopicTree.h
+++ b/src/TopicTree.h
@@ -127,203 +127,198 @@ private:
         }
     }
 
+    void unlinkDrainableSubscriber(Subscriber *s) {
+        if (s->prev) {
+            s->prev->next = s->next;
+        }
+        if (s->next) {
+            s->next->prev = s->prev;
+        }
+        /* If we are the head, then we also need to reset the head */
+        if (drainableSubscribers == s) {
+            drainableSubscribers = s->next;
+        }
+    }
+
 public:
 
     TopicTree(std::function<bool(Subscriber *, T &, IteratorFlags)> cb) : cb(cb) {
 
     }
 
     /* Returns nullptr if not found */
     Topic *lookupTopic(std::string_view topic) {
         auto it = topics.find(topic);
         if (it == topics.end()) {
             return nullptr;
         }
         return it->second.get();
     }
 
     /* Subscribe fails if we already are subscribed */
     bool subscribe(Subscriber *s, std::string_view topic) {
         /* Notify user that they are doing something wrong here */
         checkIteratingSubscriber(s);
 
         /* Lookup or create new topic */
         Topic *topicPtr = lookupTopic(topic);
         if (!topicPtr) {
             Topic *newTopic = new Topic(topic);
             topics.insert({std::string_view(newTopic->name.data(), newTopic->name.length()), std::unique_ptr<Topic>(newTopic)});
             topicPtr = newTopic;
         }
 
         /* Insert us in topic, insert topic in us */
         auto [it, inserted] = s->topics.insert(topicPtr);
         if (!inserted) {
             return false;
         }
         topicPtr->insert(s);
 
         /* Success */
         return true;
     }
 
     /* Returns ok, last */
     std::pair<bool, bool> unsubscribe(Subscriber *s, std::string_view topic) {
         /* Notify user that they are doing something wrong here */
         checkIteratingSubscriber(s);
 
         /* Lookup topic */
         Topic *topicPtr = lookupTopic(topic);
         if (!topicPtr) {
             /* If the topic doesn't exist we are assumed to still be subscribers of something */
             return {false, false};
         }
 
         /* Erase from our list first */
         if (s->topics.erase(topicPtr) == 0) {
             return {false, false};
         }
 
         /* Remove us from topic */
         topicPtr->erase(s);
 
         /* If there is no subscriber to this topic, remove it */
         if (!topicPtr->size()) {
             /* Unique_ptr deletes the topic */
             topics.erase(topic);
         }
 
         /* If we don't hold any topics we are to be freed altogether */
         return {true, topics.size() == 0};
     }
 
     /* Factory function for creating a Subscriber */
     Subscriber *createSubscriber() {
         return new Subscriber();
     }
 
     /* This is used to end a Subscriber, before freeing it */
     void freeSubscriber(Subscriber *s) {
 
         /* I guess we call this one even if we are not subscribers */
         if (!s) {
             return;
         }
 
         /* For all topics, unsubscribe */
         for (Topic *topicPtr : s->topics) {
             /* If we are the last subscriber, simply remove the whole topic */
             if (topicPtr->size() == 1) {
                 topics.erase(topicPtr->name);
             } else {
                 /* Otherwise just remove us */
                 topicPtr->erase(s);
             }
         }
 
         /* We also need to unlink us */
         if (s->needsDrainage()) {
-            if (s->prev) {
-                s->prev->next = s->next;
-            }
-            if (s->next) {
-                s->next->prev = s->prev;
-            }
-            /* If we are the head, then we also need to reset the head */
-            if (drainableSubscribers == s) {
-                drainableSubscribers = nullptr;
-            }
+            unlinkDrainableSubscriber(s);
         }
 
         delete s;
     }
 
     /* Mainly used by WebSocket::send to drain one socket before sending */
     void drain(Subscriber *s) {
         /* The list is undefined and cannot be touched unless needsDrainage(). */
         if (s->needsDrainage()) {
             /* This function differs from drainImpl by properly unlinking
             * the subscriber from drainableSubscribers. drainImpl does not. */
-            if (s->prev) {
-                s->prev->next = s->next;
-            }
-            if (s->next) {
-                s->next->prev = s->prev;
-            }
-            /* If we are the head, then we also need to reset the head */
-            if (drainableSubscribers == s) {
-                drainableSubscribers = nullptr;
-            }
-            
+            unlinkDrainableSubscriber(s);
+
             /* This one always resets needsDrainage before it calls any cb's.
              * Otherwise we would stackoverflow when sending after publish but before drain. */
             drainImpl(s);
         }
     }
 
     /* Called everytime we call send, to drain published messages so to sync outgoing messages */
     void drain() {
         if (drainableSubscribers) {
             /* Drain one socket a time */
             for (Subscriber *s = drainableSubscribers; s; s = s->next) {
                 /* Instead of unlinking every single subscriber, we just leave the list undefined
                  * and reset drainableSubscribers ptr below. */
                 drainImpl(s);
             }
             /* Drain always clears drainableSubscribers and outgoingMessages */
             drainableSubscribers = nullptr;
             outgoingMessages.clear();
         }
     }
 
     /* Linear in number of affected subscribers */
     bool publish(Subscriber *sender, std::string_view topic, T &&message) {
         /* Do we even have this topic? */
         auto it = topics.find(topic);
         if (it == topics.end()) {
             return false;
         }
 
         /* If we have more than 65k messages we need to drain every socket. */
         if (outgoingMessages.size() == UINT16_MAX) {
             /* If there is a socket that is currently corked, this will be ugly as all sockets will drain
              * to their own backpressure */
             drain();
         }
 
         /* For all subscribers in topic */
         for (Subscriber *s : *it->second) {
 
             /* If we are sender then ignore us */
             if (sender != s) {
 
                 /* If we already have too many outgoing messages on this subscriber, drain it now */
                 if (s->numMessageIndices == 32) {
                     /* This one does not need to check needsDrainage here but still does. */
                     drain(s);
                 }
 
                 /* Finally we can continue */
                 s->messageIndices[s->numMessageIndices++] = (uint16_t)outgoingMessages.size();
                 /* First message adds subscriber to list of drainable subscribers */
                 if (s->numMessageIndices == 1) {
                     /* Insert us in the head of drainable subscribers */
                     s->next = drainableSubscribers;
                     s->prev = nullptr;
                     if (s->next) {
                         s->next->prev = s;
                     }
                     drainableSubscribers = s;
                 }
             }
         }
 
         /* Push this message and return with success */
         outgoingMessages.emplace_back(message);
         return true;
     }
 
 };
 
 }
 
 #endif
