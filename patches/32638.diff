commit 9f15567f2cf9388aa0f180c3f33e4d24989f1edf
Author: John Cupitt <jcupitt@gmail.com>
Date:   Mon Mar 29 09:19:14 2021 +0100

    fix fuzzer error
    
    see https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=32638

diff --git a/libvips/foreign/libnsgif/lzw.c b/libvips/foreign/libnsgif/lzw.c
index 31cf7d4e9..1d4babfd3 100644
--- a/libvips/foreign/libnsgif/lzw.c
+++ b/libvips/foreign/libnsgif/lzw.c
@@ -145,79 +145,84 @@ static lzw_result lzw__block_advance(struct lzw_read_ctx *ctx)
 /**
  * Get the next LZW code of given size from the raw input data.
  *
  * Reads codes from the input data stream coping with GIF data sub-blocks.
  *
  * \param[in]  ctx        LZW reading context, updated.
  * \param[in]  code_size  Size of LZW code to get from data.
  * \param[out] code_out   Returns an LZW code on success.
  * \return LZW_OK or LZW_OK_EOD on success, appropriate error otherwise.
  */
 static inline lzw_result lzw__next_code(
 		struct lzw_read_ctx *ctx,
 		uint8_t code_size,
 		uint32_t *code_out)
 {
 	uint32_t code = 0;
 	uint8_t current_bit = ctx->sb_bit & 0x7;
 	uint8_t byte_advance = (current_bit + code_size) >> 3;
+	uint32_t new_code;
 
 	assert(byte_advance <= 2);
 
 	if (ctx->sb_bit + code_size <= ctx->sb_bit_count) {
 		/* Fast path: code fully inside this sub-block */
 		const uint8_t *data = ctx->sb_data + (ctx->sb_bit >> 3);
 		switch (byte_advance) {
 			case 2: code |= data[2] << 16; /* Fall through */
 			case 1: code |= data[1] <<  8; /* Fall through */
 			case 0: code |= data[0] <<  0;
 		}
 		ctx->sb_bit += code_size;
 	} else {
 		/* Slow path: code spans sub-blocks */
 		uint8_t byte = 0;
 		uint8_t bits_remaining_0 = (code_size < (8 - current_bit)) ?
 				code_size : (8 - current_bit);
 		uint8_t bits_remaining_1 = code_size - bits_remaining_0;
 		uint8_t bits_used[3] = {
 			[0] = bits_remaining_0,
 			[1] = bits_remaining_1 < 8 ? bits_remaining_1 : 8,
 			[2] = bits_remaining_1 - 8,
 		};
 
 		while (true) {
 			const uint8_t *data = ctx->sb_data;
 			lzw_result res;
 
 			/* Get any data from end of this sub-block */
 			while (byte <= byte_advance &&
 					ctx->sb_bit < ctx->sb_bit_count) {
 				code |= data[ctx->sb_bit >> 3] << (byte << 3);
 				ctx->sb_bit += bits_used[byte];
 				byte++;
 			}
 
 			/* Check if we have all we need */
 			if (byte > byte_advance) {
 				break;
 			}
 
 			/* Move to next sub-block */
 			res = lzw__block_advance(ctx);
 			if (res != LZW_OK) {
 				return res;
 			}
 		}
 	}
 
-	*code_out = (code >> current_bit) & ((1 << code_size) - 1);
+	new_code = (code >> current_bit) & ((1 << code_size) - 1);
+	if (new_code > ((1 << LZW_CODE_MAX) - 1))
+		return LZW_BAD_CODE;
+	*code_out = new_code;
+
 	return LZW_OK;
 }
 
 
 /**
  * Clear LZW code dictionary.
  *
  * \param[in]  ctx            LZW reading context, updated.
  * \param[out] stack_pos_out  Returns current stack position.
  * \return LZW_OK or error code.
  */
diff --git a/libvips/foreign/libnsgif/patches/lzw-decode.patch b/libvips/foreign/libnsgif/patches/lzw-decode.patch
new file mode 100644
index 000000000..329a8357c
--- /dev/null
+++ b/libvips/foreign/libnsgif/patches/lzw-decode.patch
@@ -0,0 +1,23 @@
+--- lzw-orig.c	2021-03-29 09:16:40.730562757 +0100
++++ lzw.c	2021-03-29 09:16:30.390679354 +0100
+@@ -160,6 +160,7 @@
+ 	uint32_t code = 0;
+ 	uint8_t current_bit = ctx->sb_bit & 0x7;
+ 	uint8_t byte_advance = (current_bit + code_size) >> 3;
++	uint32_t new_code;
+ 
+ 	assert(byte_advance <= 2);
+ 
+@@ -209,7 +210,11 @@
+ 		}
+ 	}
+ 
+-	*code_out = (code >> current_bit) & ((1 << code_size) - 1);
++	new_code = (code >> current_bit) & ((1 << code_size) - 1);
++	if (new_code > ((1 << LZW_CODE_MAX) - 1))
++		return LZW_BAD_CODE;
++	*code_out = new_code;
++
+ 	return LZW_OK;
+ }
+ 
