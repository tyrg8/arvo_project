commit ac72c027937ff7c39b8b2c060fc7df1e1fdee489
Author: John Reiser <jreiser@BitWagon.com>
Date:   Sat Jan 27 11:42:25 2024 -0800

    check nbucket earlier in DT_HASH on ELF
    
    https://github.com/upx/upx/issues/780
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=66079
            modified:   p_lx_elf.cpp

diff --git a/src/p_lx_elf.cpp b/src/p_lx_elf.cpp
index bd2fe4a3..462c54ad 100644
--- a/src/p_lx_elf.cpp
+++ b/src/p_lx_elf.cpp
@@ -2067,181 +2067,187 @@ void
 PackLinuxElf32::invert_pt_dynamic(Elf32_Dyn const *dynp, u32_t headway)
 {
     if (dt_table[Elf32_Dyn::DT_NULL]) {
         return;  // not 1st time; do not change upx_dt_init
     }
     Elf32_Dyn const *const dynp0 = dynp;
     unsigned ndx = 0;
     unsigned const limit = headway / sizeof(*dynp);
     if (dynp)
     for (; ; ++ndx, ++dynp) {
         if (limit <= ndx) {
             throwCantPack("DT_NULL not found");
         }
         u32_t const d_tag = get_te32(&dynp->d_tag);
         if (d_tag < DT_NUM) {
             if (Elf32_Dyn::DT_NEEDED != d_tag
             &&  dt_table[d_tag]
             &&    get_te32(&dynp->d_val)
                != get_te32(&dynp0[-1+ dt_table[d_tag]].d_val)) {
                 char msg[50]; snprintf(msg, sizeof(msg),
                     "duplicate DT_%#x: [%#x] [%#x]",
                     (unsigned)d_tag, -1+ dt_table[d_tag], ndx);
                 throwCantPack(msg);
             }
             dt_table[d_tag] = 1+ ndx;
         }
         if (Elf32_Dyn::DT_NULL == d_tag) {
             break;  // check here so that dt_table[DT_NULL] is set
         }
     }
     sort_DT32_offsets(dynp0);
 
     upx_dt_init = 0;
          if (dt_table[Elf32_Dyn::DT_INIT])          upx_dt_init = Elf32_Dyn::DT_INIT;
     else if (dt_table[Elf32_Dyn::DT_PREINIT_ARRAY]) upx_dt_init = Elf32_Dyn::DT_PREINIT_ARRAY;
     else if (dt_table[Elf32_Dyn::DT_INIT_ARRAY])    upx_dt_init = Elf32_Dyn::DT_INIT_ARRAY;
 
     unsigned const z_str = dt_table[Elf32_Dyn::DT_STRSZ];
     strtab_max = !z_str ? 0 : get_te32(&dynp0[-1+ z_str].d_val);
     unsigned const z_tab = dt_table[Elf32_Dyn::DT_STRTAB];
     unsigned const strtab_beg = !z_tab ? 0 : get_te32(&dynp0[-1+ z_tab].d_val);
     if (!z_str || !z_tab
     || (this->file_size - strtab_beg) < strtab_max  // strtab overlaps EOF
         // last string in table must have terminating NUL
     ||  '\0' != ((char *)file_image.getVoidPtr())[-1+ strtab_max + strtab_beg]
     ) {
         char msg[50]; snprintf(msg, sizeof(msg),
             "bad DT_STRSZ %#x", strtab_max);
         throwCantPack(msg);
     }
 
     // Find end of DT_SYMTAB
     symnum_max = elf_find_table_size(
         Elf32_Dyn::DT_SYMTAB, Elf32_Shdr::SHT_DYNSYM) / sizeof(Elf32_Sym);
 
     unsigned const x_sym = dt_table[Elf32_Dyn::DT_SYMTAB];
     unsigned const v_hsh = elf_unsigned_dynamic(Elf32_Dyn::DT_HASH);
     if (v_hsh && file_image) {
         hashtab = (unsigned const *)elf_find_dynamic(Elf32_Dyn::DT_HASH);
         if (!hashtab) {
             char msg[40]; snprintf(msg, sizeof(msg),
                "bad DT_HASH %#x", v_hsh);
             throwCantPack(msg);
         }
         // Find end of DT_HASH
         hashend = (unsigned const *)(void const *)(elf_find_table_size(
             Elf32_Dyn::DT_HASH, Elf32_Shdr::SHT_HASH) + (char const *)hashtab);
 
         unsigned const nbucket = get_te32(&hashtab[0]);
         unsigned const *const buckets = &hashtab[2];
         unsigned const *const chains = &buckets[nbucket]; (void)chains;
+        if ((unsigned)(file_size - ((char const *)buckets - (char const *)(void const *)file_image))
+                <= sizeof(unsigned)*nbucket ) {
+            char msg[80]; snprintf(msg, sizeof(msg),
+                "bad nbucket %#x\n", nbucket);
+            throwCantPack(msg);
+        }
 
         unsigned const v_sym = !x_sym ? 0 : get_te32(&dynp0[-1+ x_sym].d_val);
         if ((unsigned)(hashend - buckets) < nbucket
         || !v_sym || (unsigned)file_size <= v_sym
         || ((v_hsh < v_sym) && (v_sym - v_hsh) < sizeof(*buckets)*(2+ nbucket))
         ) {
             char msg[80]; snprintf(msg, sizeof(msg),
                 "bad DT_HASH nbucket=%#x  len=%#x",
                 nbucket, (v_sym - v_hsh));
             throwCantPack(msg);
         }
         unsigned chmax = 0;
         for (unsigned j= 0; j < nbucket; ++j) {
             unsigned x = get_te32(&buckets[j]);
             if (chmax < x) {
                 chmax = x;
             }
         }
         if ((v_hsh < v_sym) && (v_sym - v_hsh) <
                 (sizeof(*buckets)*(2+ nbucket) + sizeof(*chains)*(1+ chmax))) {
             char msg[80]; snprintf(msg, sizeof(msg),
                 "bad DT_HASH nbucket=%#x  len=%#x",
                 nbucket, (v_sym - v_hsh));
             throwCantPack(msg);
         }
     }
     unsigned const v_gsh = elf_unsigned_dynamic(Elf32_Dyn::DT_GNU_HASH);
     if (v_gsh && file_image) {
         gashtab = (unsigned const *)elf_find_dynamic(Elf32_Dyn::DT_GNU_HASH);
         if (!gashtab) {
             char msg[40]; snprintf(msg, sizeof(msg),
                "bad DT_GNU_HASH %#x", v_gsh);
             throwCantPack(msg);
         }
         gashend = (unsigned const *)(void const *)(elf_find_table_size(
             Elf32_Dyn::DT_GNU_HASH, Elf32_Shdr::SHT_GNU_HASH) + (char const *)gashtab);
         unsigned const n_bucket = get_te32(&gashtab[0]);
         unsigned const symbias  = get_te32(&gashtab[1]);
         unsigned const n_bitmask = get_te32(&gashtab[2]);
         unsigned const gnu_shift = get_te32(&gashtab[3]);
         u32_t const *const bitmask = (u32_t const *)(void const *)&gashtab[4];
         unsigned     const *const buckets = (unsigned const *)&bitmask[n_bitmask];
         unsigned     const *const hasharr = &buckets[n_bucket]; (void)hasharr;
         if (!n_bucket || (1u<<31) <= n_bucket  /* fie on fuzzers */
         || (unsigned)(gashend - buckets) < n_bucket
         || (void const *)&file_image[file_size] <= (void const *)hasharr) {
             char msg[80]; snprintf(msg, sizeof(msg),
                 "bad n_bucket %#x\n", n_bucket);
             throwCantPack(msg);
         }
         // unsigned const *const gashend = &hasharr[n_bucket];
         // minimum, except:
         // Rust and Android trim unused zeroes from high end of hasharr[]
         unsigned bmax = 0;
         for (unsigned j= 0; j < n_bucket; ++j) {
             unsigned bj = get_te32(&buckets[j]);
             if (bj) {
                 if (bj < symbias) {
                     char msg[90]; snprintf(msg, sizeof(msg),
                             "bad DT_GNU_HASH bucket[%d] < symbias{%#x}\n",
                             bj, symbias);
                     throwCantPack(msg);
                 }
                 if (bmax < bj) {
                     bmax = bj;
                 }
             }
         }
         if (1==n_bucket  && 0==buckets[0]
         &&  1==n_bitmask && 0==bitmask[0]) {
             // 2021-09-11 Rust on RaspberryPi apparently uses this to minimize space.
             // But then the DT_GNU_HASH symbol lookup algorithm always fails?
             // https://github.com/upx/upx/issues/525
         } else
         if ((1+ bmax) < symbias) {
             char msg[90]; snprintf(msg, sizeof(msg),
                     "bad DT_GNU_HASH (1+ max_bucket)=%#x < symbias=%#x", 1+ bmax, symbias);
             throwCantPack(msg);
         }
         bmax -= symbias;
 
         u32_t const v_sym = !x_sym ? 0 : get_te32(&dynp0[-1+ x_sym].d_val);
         unsigned r = 0;
         if (!n_bucket || !n_bitmask || !v_sym
         || (r=1, ((-1+ n_bitmask) & n_bitmask))  // not a power of 2
         || (r=2, (8*sizeof(u32_t) <= gnu_shift))  // shifted result always == 0
         || (r=3, (n_bucket>>30))  // fie on fuzzers
         || (r=4, (n_bitmask>>30))
         || (r=5, ((file_size/sizeof(unsigned))
                 <= ((sizeof(*bitmask)/sizeof(unsigned))*n_bitmask + 2*n_bucket)))  // FIXME: weak
         || (r=6, ((v_gsh < v_sym) && (v_sym - v_gsh) < (sizeof(unsigned)*4  // headers
                 + sizeof(*bitmask)*n_bitmask  // bitmask
                 + sizeof(*buckets)*n_bucket  // buckets
                 + sizeof(*hasharr)*(1+ bmax)  // hasharr
             )) )
         ) {
             char msg[90]; snprintf(msg, sizeof(msg),
                 "bad DT_GNU_HASH n_bucket=%#x  n_bitmask=%#x  len=%#lx  r=%d",
                 n_bucket, n_bitmask, (long unsigned)(v_sym - v_gsh), r);
             throwCantPack(msg);
         }
     }
     e_shstrndx = get_te16(&ehdri.e_shstrndx);  // who omitted this?
     if (e_shnum <= e_shstrndx
     &&  !(0==e_shnum && 0==e_shstrndx) ) {
         char msg[40]; snprintf(msg, sizeof(msg),
             "bad .e_shstrndx %d >= .e_shnum %d", e_shstrndx, e_shnum);
         throwCantPack(msg);
     }
 }
@@ -7968,186 +7974,192 @@ void
 PackLinuxElf64::invert_pt_dynamic(Elf64_Dyn const *dynp, upx_uint64_t headway)
 {
     if (dt_table[Elf64_Dyn::DT_NULL]) {
         return;  // not 1st time; do not change upx_dt_init
     }
     Elf64_Dyn const *const dynp0 = dynp;
     unsigned ndx = 0;
     unsigned const limit = headway / sizeof(*dynp);
     if (dynp)
     for (; ; ++ndx, ++dynp) {
         if (limit <= ndx) {
             throwCantPack("DT_NULL not found");
         }
         upx_uint64_t const d_tag = get_te64(&dynp->d_tag);
         if (d_tag>>32) { // outrageous
             char msg[50]; snprintf(msg, sizeof(msg),
                 "bad Elf64_Dyn[%d].d_tag %#lx", ndx, (long unsigned)d_tag);
             throwCantPack(msg);
         }
         if (d_tag < DT_NUM) {
             if (Elf64_Dyn::DT_NEEDED != d_tag
             &&  dt_table[d_tag]
             &&    get_te64(&dynp->d_val)
                != get_te64(&dynp0[-1+ dt_table[d_tag]].d_val)) {
                 char msg[50]; snprintf(msg, sizeof(msg),
                     "duplicate DT_%#x: [%#x] [%#x]",
                     (unsigned)d_tag, -1+ dt_table[d_tag], ndx);
                 throwCantPack(msg);
             }
             dt_table[d_tag] = 1+ ndx;
         }
         if (Elf64_Dyn::DT_NULL == d_tag) {
             break;  // check here so that dt_table[DT_NULL] is set
         }
     }
     sort_DT64_offsets(dynp0);
 
     upx_dt_init = 0;
          if (dt_table[Elf64_Dyn::DT_INIT])          upx_dt_init = Elf64_Dyn::DT_INIT;
     else if (dt_table[Elf64_Dyn::DT_PREINIT_ARRAY]) upx_dt_init = Elf64_Dyn::DT_PREINIT_ARRAY;
     else if (dt_table[Elf64_Dyn::DT_INIT_ARRAY])    upx_dt_init = Elf64_Dyn::DT_INIT_ARRAY;
 
     unsigned const z_str = dt_table[Elf64_Dyn::DT_STRSZ];
     strtab_max = !z_str ? 0 : get_te64(&dynp0[-1+ z_str].d_val);
     unsigned const z_tab = dt_table[Elf64_Dyn::DT_STRTAB];
     unsigned const strtab_beg = !z_tab ? 0 : get_te64(&dynp0[-1+ z_tab].d_val);
     if (!z_str || !z_tab
     || (this->file_size - strtab_beg) < strtab_max  // strtab overlaps EOF
         // last string in table must have terminating NUL
     ||  '\0' != ((char *)file_image.getVoidPtr())[-1+ strtab_max + strtab_beg]
     ) {
         char msg[50]; snprintf(msg, sizeof(msg),
             "bad DT_STRSZ %#x", strtab_max);
         throwCantPack(msg);
     }
 
     // Find end of DT_SYMTAB
     symnum_max = elf_find_table_size(
         Elf64_Dyn::DT_SYMTAB, Elf64_Shdr::SHT_DYNSYM) / sizeof(Elf64_Sym);
 
     unsigned const x_sym = dt_table[Elf64_Dyn::DT_SYMTAB];
     unsigned const v_hsh = elf_unsigned_dynamic(Elf64_Dyn::DT_HASH);
     if (v_hsh && file_image) {
         hashtab = (unsigned const *)elf_find_dynamic(Elf64_Dyn::DT_HASH);
         if (!hashtab) {
             char msg[40]; snprintf(msg, sizeof(msg),
                "bad DT_HASH %#x", v_hsh);
             throwCantPack(msg);
         }
         // Find end of DT_HASH
         hashend = (unsigned const *)(void const *)(elf_find_table_size(
             Elf64_Dyn::DT_HASH, Elf64_Shdr::SHT_HASH) + (char const *)hashtab);
 
         unsigned const nbucket = get_te32(&hashtab[0]);
         unsigned const *const buckets = &hashtab[2];
         unsigned const *const chains = &buckets[nbucket]; (void)chains;
+        if ((unsigned)(file_size - ((char const *)buckets - (char const *)(void const *)file_image))
+                <= sizeof(unsigned)*nbucket ) {
+            char msg[80]; snprintf(msg, sizeof(msg),
+                "bad nbucket %#x\n", nbucket);
+            throwCantPack(msg);
+        }
 
         unsigned const v_sym = !x_sym ? 0 : get_te64(&dynp0[-1+ x_sym].d_val);  // UPX_RSIZE_MAX_MEM
         if ((unsigned)(hashend - buckets) < nbucket
         || !v_sym || (unsigned)file_size <= v_sym
         || ((v_hsh < v_sym) && (v_sym - v_hsh) < sizeof(*buckets)*(2+ nbucket))
         ) {
             char msg[80]; snprintf(msg, sizeof(msg),
                 "bad DT_HASH nbucket=%#x  len=%#x",
                 nbucket, (v_sym - v_hsh));
             throwCantPack(msg);
         }
         unsigned chmax = 0;
         for (unsigned j= 0; j < nbucket; ++j) {
             unsigned x = get_te32(&buckets[j]);
             if (chmax < x) {
                 chmax = x;
             }
         }
         if ((v_hsh < v_sym) && (v_sym - v_hsh) <
                 (sizeof(*buckets)*(2+ nbucket) + sizeof(*chains)*(1+ chmax))) {
             char msg[80]; snprintf(msg, sizeof(msg),
                 "bad DT_HASH nbucket=%#x  len=%#x",
                 nbucket, (v_sym - v_hsh));
             throwCantPack(msg);
         }
     }
     unsigned const v_gsh = elf_unsigned_dynamic(Elf64_Dyn::DT_GNU_HASH);
     if (v_gsh && file_image) {
         gashtab = (unsigned const *)elf_find_dynamic(Elf64_Dyn::DT_GNU_HASH);
         if (!gashtab) {
             char msg[40]; snprintf(msg, sizeof(msg),
                "bad DT_GNU_HASH %#x", v_gsh);
             throwCantPack(msg);
         }
         gashend = (unsigned const *)(void const *)(elf_find_table_size(
             Elf64_Dyn::DT_GNU_HASH, Elf64_Shdr::SHT_GNU_HASH) + (char const *)gashtab);
         unsigned const n_bucket = get_te32(&gashtab[0]);
         unsigned const symbias  = get_te32(&gashtab[1]);
         unsigned const n_bitmask = get_te32(&gashtab[2]);
         unsigned const gnu_shift = get_te32(&gashtab[3]);
         upx_uint64_t const *const bitmask = (upx_uint64_t const *)(void const *)&gashtab[4];
         unsigned     const *const buckets = (unsigned const *)&bitmask[n_bitmask];
         unsigned     const *const hasharr = &buckets[n_bucket]; (void)hasharr;
         if (!n_bucket || (1u<<31) <= n_bucket  /* fie on fuzzers */
         || (unsigned)(gashend - buckets) < n_bucket
         || (void const *)&file_image[file_size] <= (void const *)hasharr) {
             char msg[80]; snprintf(msg, sizeof(msg),
                 "bad n_bucket %#x\n", n_bucket);
             throwCantPack(msg);
         }
         // unsigned const *const gashend = &hasharr[n_bucket];
         // minimum, except:
         // Rust and Android trim unused zeroes from high end of hasharr[]
         unsigned bmax = 0;
         for (unsigned j= 0; j < n_bucket; ++j) {
             unsigned bj = get_te32(&buckets[j]);
             if (bj) {
                 if (bj < symbias) {
                     char msg[90]; snprintf(msg, sizeof(msg),
                             "bad DT_GNU_HASH bucket[%d] < symbias{%#x}\n",
                             bj, symbias);
                     throwCantPack(msg);
                 }
                 if (bmax < bj) {
                     bmax = bj;
                 }
             }
         }
         if (1==n_bucket  && 0==buckets[0]
         &&  1==n_bitmask && 0==bitmask[0]) {
             // 2021-09-11 Rust on RaspberryPi apparently uses this to minimize space.
             // But then the DT_GNU_HASH symbol lookup algorithm always fails?
             // https://github.com/upx/upx/issues/525
         } else
         if ((1+ bmax) < symbias) {
             char msg[90]; snprintf(msg, sizeof(msg),
                     "bad DT_GNU_HASH (1+ max_bucket)=%#x < symbias=%#x", 1+ bmax, symbias);
             throwCantPack(msg);
         }
         bmax -= symbias;
 
         upx_uint64_t const v_sym = !x_sym ? 0 : get_te64(&dynp0[-1+ x_sym].d_val);
         unsigned r = 0;
         if (!n_bucket || !n_bitmask || !v_sym
         || (r=1, ((-1+ n_bitmask) & n_bitmask))  // not a power of 2
         || (r=2, (8*sizeof(upx_uint64_t) <= gnu_shift))  // shifted result always == 0
         || (r=3, (n_bucket>>30))  // fie on fuzzers
         || (r=4, (n_bitmask>>30))
         || (r=5, ((file_size/sizeof(unsigned))
                 <= ((sizeof(*bitmask)/sizeof(unsigned))*n_bitmask + 2*n_bucket)))  // FIXME: weak
         || (r=6, ((v_gsh < v_sym) && (v_sym - v_gsh) < (sizeof(unsigned)*4  // headers
                 + sizeof(*bitmask)*n_bitmask  // bitmask
                 + sizeof(*buckets)*n_bucket  // buckets
                 + sizeof(*hasharr)*(1+ bmax)  // hasharr
             )) )
         ) {
             char msg[90]; snprintf(msg, sizeof(msg),
                 "bad DT_GNU_HASH n_bucket=%#x  n_bitmask=%#x  len=%#lx  r=%d",
                 n_bucket, n_bitmask, (long unsigned)(v_sym - v_gsh), r);
             throwCantPack(msg);
         }
     }
     e_shstrndx = get_te16(&ehdri.e_shstrndx);  // who omitted this?
     if (e_shnum <= e_shstrndx
     &&  !(0==e_shnum && 0==e_shstrndx) ) {
         char msg[40]; snprintf(msg, sizeof(msg),
             "bad .e_shstrndx %d >= .e_shnum %d", e_shstrndx, e_shnum);
         throwCantPack(msg);
     }
 }
@@ -8180,85 +8192,79 @@ unsigned PackLinuxElf::elf_hash(char const *p)
 Elf32_Sym const *PackLinuxElf32::elf_lookup(char const *name) const
 {
     if (hashtab && dynsym && dynstr) {
         unsigned const nbucket = get_te32(&hashtab[0]);
         unsigned const *const buckets = &hashtab[2];
         unsigned const *const chains = &buckets[nbucket];
-        if ((unsigned)(file_size - ((char const *)buckets - (char const *)(void const *)file_image))
-                <= sizeof(unsigned)*nbucket ) {
-            char msg[80]; snprintf(msg, sizeof(msg),
-                "bad nbucket %#x\n", nbucket);
-            throwCantPack(msg);
-        }
         if (nbucket) {
             unsigned const m = elf_hash(name) % nbucket;
             unsigned nvisit = 0;
             unsigned si;
             for (si= get_te32(&buckets[m]); 0!=si; si= get_te32(&chains[si])) {
                 char const *const p= get_dynsym_name(si, (unsigned)-1);
                 if (0==strcmp(name, p)) {
                     return &dynsym[si];
                 }
                 if (nbucket <= ++nvisit) {
                     throwCantPack("circular DT_HASH chain %d\n", si);
                 }
             }
         }
     }
     if (gashtab && dynsym && dynstr) {
         unsigned const n_bucket = get_te32(&gashtab[0]);
         unsigned const symbias  = get_te32(&gashtab[1]);
         unsigned const n_bitmask = get_te32(&gashtab[2]);
         unsigned const gnu_shift = get_te32(&gashtab[3]);
         unsigned const *const bitmask = &gashtab[4];
         unsigned const *const buckets = &bitmask[n_bitmask];
         unsigned const *const hasharr = &buckets[n_bucket];
         if ((void const *)&file_image[file_size] <= (void const *)hasharr) {
             char msg[80]; snprintf(msg, sizeof(msg),
                 "bad n_bucket %#x\n", n_bucket);
             throwCantPack(msg);
         }
         if (!n_bitmask
         || (unsigned)(file_size - ((char const *)bitmask - (char const *)(void const *)file_image))
                 <= sizeof(unsigned)*n_bitmask ) {
             char msg[80]; snprintf(msg, sizeof(msg),
                 "bad n_bitmask %#x\n", n_bitmask);
             throwCantPack(msg);
         }
         if (n_bucket) {
             unsigned const h = gnu_hash(name);
             unsigned const hbit1 = 037& h;
             unsigned const hbit2 = 037& (h>>gnu_shift);
             unsigned const w = get_te32(&bitmask[(n_bitmask -1) & (h>>5)]);
 
             if (1& (w>>hbit1) & (w>>hbit2)) {
                 unsigned bucket = get_te32(&buckets[h % n_bucket]);
                 if (n_bucket <= bucket) {
                     char msg[90]; snprintf(msg, sizeof(msg),
                             "bad DT_GNU_HASH n_bucket{%#x} <= buckets[%d]{%#x}\n",
                             n_bucket, h % n_bucket, bucket);
                     throwCantPack(msg);
                 }
                 if (0!=bucket) {
                     Elf32_Sym const *dsp = &dynsym[bucket];
                     unsigned const *hp = &hasharr[bucket - symbias];
                     do if (0==((h ^ get_te32(hp))>>1)) {
                         unsigned st_name = get_te32(&dsp->st_name);
                         char const *const p = get_str_name(st_name, (unsigned)-1);
                         if (0==strcmp(name, p)) {
                             return dsp;
                         }
                     } while (++dsp,
                             (char const *)hp < (char const *)&file_image[file_size]
                         &&  0==(1u& get_te32(hp++)));
                 }
             }
         }
     }
     // 2021-12-25  FIXME: Some Rust programs use
     //    (1==n_bucket && 0==buckets[0] && 1==n_bitmask && 0==bitmask[0])
     // to minimize space in DT_GNU_HASH. This causes the fancy lookup to fail.
     // Is a fallback to linear search assumed?
     // 2022-03-12  Some Rust programs have 0==n_bucket.
     return nullptr;
 
 }
@@ -8266,87 +8272,81 @@ Elf32_Sym const *PackLinuxElf32::elf_lookup(char const *name) const
 Elf64_Sym const *PackLinuxElf64::elf_lookup(char const *name) const
 {
     if (hashtab && dynsym && dynstr) {
         unsigned const nbucket = get_te32(&hashtab[0]);
         unsigned const *const buckets = &hashtab[2];
         unsigned const *const chains = &buckets[nbucket];
-        if ((unsigned)(file_size - ((char const *)buckets - (char const *)(void const *)file_image))
-                <= sizeof(unsigned)*nbucket ) {
-            char msg[80]; snprintf(msg, sizeof(msg),
-                "bad nbucket %#x\n", nbucket);
-            throwCantPack(msg);
-        }
         if (nbucket) { // -rust-musl can have "empty" hashtab
             unsigned const m = elf_hash(name) % nbucket;
             unsigned nvisit = 0;
             unsigned si;
             for (si= get_te32(&buckets[m]); 0!=si; si= get_te32(&chains[si])) {
                 char const *const p= get_dynsym_name(si, (unsigned)-1);
                 if (0==strcmp(name, p)) {
                     return &dynsym[si];
                 }
                 if (nbucket <= ++nvisit) {
                     throwCantPack("circular DT_HASH chain %d\n", si);
                 }
             }
         }
     }
     if (gashtab && dynsym && dynstr) {
         unsigned const n_bucket = get_te32(&gashtab[0]);
         unsigned const symbias  = get_te32(&gashtab[1]);
         unsigned const n_bitmask = get_te32(&gashtab[2]);
         unsigned const gnu_shift = get_te32(&gashtab[3]);
         upx_uint64_t const *const bitmask = (upx_uint64_t const *)(void const *)&gashtab[4];
         unsigned     const *const buckets = (unsigned const *)&bitmask[n_bitmask];
         unsigned     const *const hasharr = &buckets[n_bucket];
 
         if ((void const *)&file_image[file_size] <= (void const *)hasharr) {
             char msg[80]; snprintf(msg, sizeof(msg),
                 "bad n_bucket %#x\n", n_bucket);
             throwCantPack(msg);
         }
         if (!n_bitmask
         || (unsigned)(file_size - ((char const *)bitmask - (char const *)(void const *)file_image))
                 <= sizeof(unsigned)*n_bitmask ) {
             char msg[80]; snprintf(msg, sizeof(msg),
                 "bad n_bitmask %#x\n", n_bitmask);
             throwCantPack(msg);
         }
         if (n_bucket) { // -rust-musl can have "empty" gashtab
             unsigned const h = gnu_hash(name);
             unsigned const hbit1 = 077& h;
             unsigned const hbit2 = 077& (h>>gnu_shift);
             upx_uint64_t const w = get_te64(&bitmask[(n_bitmask -1) & (h>>6)]);
             if (1& (w>>hbit1) & (w>>hbit2)) {
                 unsigned hhead = get_te32(&buckets[h % n_bucket]);
                 if (hhead) {
                     Elf64_Sym const *dsp = &dynsym[hhead];
                     unsigned const *hp = &hasharr[hhead - symbias];
                     unsigned k;
                     do {
                         if (gashend <= hp) {
                             char msg[120]; snprintf(msg, sizeof(msg),
                                 "bad gnu_hash[%#tx]  head=%u",
                                 hp - hasharr, hhead);
                             throwCantPack(msg);
                         }
                         k = get_te32(hp);
                         if (0==((h ^ k)>>1)) {
                             unsigned const st_name = get_te32(&dsp->st_name);
                             char const *const p = get_str_name(st_name, (unsigned)-1);
                             if (0==strcmp(name, p)) {
                                 return dsp;
                             }
                         }
                     } while (++dsp, ++hp, 0==(1u& k));
                 }
             }
         }
     }
     // 2021-12-25  FIXME: Some Rust programs use
     //    (1==n_bucket && 0==buckets[0] && 1==n_bitmask && 0==bitmask[0])
     // to minimize space in DT_GNU_HASH. This causes the fancy lookup to fail.
     // Is a fallback to linear search assumed?
     // 2022-03-12  Some Rust programs have 0==n_bucket.
     return nullptr;
 
 }
