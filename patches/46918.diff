commit 4e3f073be2453148af5f4da4d5d22ce9e6c2f7a5
Author: Aleks L <93376818+sashashura@users.noreply.github.com>
Date:   Thu Jul 28 12:45:22 2022 +0100

    Fixes Stack-buffer-overflow in dynapi_set_helper
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=46918
    
    `dwg_dynapi_header_set_value` in `json_HEADER` is called with a pointer to long:
    ```cpp
              long num = json_long (dat, tokens);
              LOG_TRACE ("%s: %ld [%s]\n", key, num, f->type)
              dwg_dynapi_header_set_value (dwg, key, &num, 0);
    ```
    However the `f->size` is 255 which leads to stack overlow in `dynapi_set_helper` when `memcpy (old, value, f->size)` is called.

diff --git a/src/in_json.c b/src/in_json.c
index 420fa173..b493442f 100644
--- a/src/in_json.c
+++ b/src/in_json.c
@@ -968,120 +968,132 @@ static int
 json_HEADER (Bit_Chain *restrict dat, Dwg_Data *restrict dwg,
              jsmntokens_t *restrict tokens)
 {
   const char *section = "HEADER";
   const char *name = section;
   jsmntok_t *t = &tokens->tokens[tokens->index];
   //Dwg_Header_Variables *_obj = &dwg->header_vars;
   Dwg_Object *obj = NULL;
   int size = t->size;
 
   if (t->type != JSMN_OBJECT)
     {
       LOG_ERROR ("Unexpected %s at %u of %ld tokens, expected %s OBJECT",
                  t_typename[t->type], tokens->index, tokens->num_tokens,
                  section);
       json_advance_unknown (dat, tokens, t->type, 0);
       return DWG_ERR_INVALIDTYPE;
     }
   LOG_TRACE ("\n%s pos:%d [%d keys]\n--------------------\n", section,
              tokens->index, t->size);
   tokens->index++;
   for (int i = 0; i < size; i++)
     {
       char key[80];
       Dwg_DYNAPI_field *f;
 
       json_fixed_key (key, dat, tokens);
       JSON_TOKENS_CHECK_OVERFLOW_ERR
       t = &tokens->tokens[tokens->index];
       f = (Dwg_DYNAPI_field *)dwg_dynapi_header_field (key);
       if (!f)
         {
           LOG_WARN ("Unknown key HEADER.%s", key)
           json_advance_unknown (dat, tokens, t->type, 0);
           continue;
         }
       else if (t->type == JSMN_PRIMITIVE
                && (strEQc (f->type, "BD") || strEQc (f->type, "RD")))
         {
           double num = json_float (dat, tokens);
           LOG_TRACE ("%s: " FORMAT_RD " [%s]\n", key, num, f->type)
+          if (f->size > sizeof(num))
+            return DWG_ERR_INVALIDTYPE;
           dwg_dynapi_header_set_value (dwg, key, &num, 0);
         }
       else if (t->type == JSMN_PRIMITIVE
                && (strEQc (f->type, "RC") || strEQc (f->type, "B")
                    || strEQc (f->type, "BB") || strEQc (f->type, "RS")
                    || strEQc (f->type, "BS") || strEQc (f->type, "RL")
                    || strEQc (f->type, "BL") || strEQc (f->type, "RLL")
                    || strEQc (f->type, "BLd") || strEQc (f->type, "BSd")
                    || strEQc (f->type, "BLL")))
         {
           long num = json_long (dat, tokens);
           LOG_TRACE ("%s: %ld [%s]\n", key, num, f->type)
+          if (f->size > sizeof(num))
+            return DWG_ERR_INVALIDTYPE;
           dwg_dynapi_header_set_value (dwg, key, &num, 0);
         }
       else if (t->type == JSMN_STRING
                && (strEQc (f->type, "TV") || strEQc (f->type, "T")))
         {
           char *str = json_string (dat, tokens);
           LOG_TRACE ("%s: \"%s\" [%s]\n", key, str, f->type)
           dwg_dynapi_header_set_value (dwg, key, &str, 1);
           free (str);
         }
       else if (t->type == JSMN_ARRAY
                && (strEQc (f->type, "3BD") || strEQc (f->type, "3RD")
                    || strEQc (f->type, "3DPOINT") || strEQc (f->type, "BE")
                    || strEQc (f->type, "3BD_1")))
         {
           BITCODE_3DPOINT pt;
           json_3DPOINT (dat, tokens, name, key, f->type, &pt);
+          if (f->size > sizeof(pt))
+            return DWG_ERR_INVALIDTYPE;
           dwg_dynapi_header_set_value (dwg, key, &pt, 1);
         }
       else if (t->type == JSMN_ARRAY
                && (strEQc (f->type, "2BD") || strEQc (f->type, "2RD")
                    || strEQc (f->type, "2DPOINT")
                    || strEQc (f->type, "2BD_1")))
         {
           BITCODE_2DPOINT pt;
           json_2DPOINT (dat, tokens, name, key, f->type, &pt);
+          if (f->size > sizeof(pt))
+            return DWG_ERR_INVALIDTYPE;
           dwg_dynapi_header_set_value (dwg, key, &pt, 1);
         }
       else if (strEQc (f->type, "TIMEBLL") || strEQc (f->type, "TIMERLL"))
         {
           static BITCODE_TIMEBLL date = { 0, 0, 0 };
           json_TIMEBLL (dat, tokens, key, &date);
+          if (f->size > sizeof(date))
+            return DWG_ERR_INVALIDTYPE;
           dwg_dynapi_header_set_value (dwg, key, &date, 0);
         }
       else if (strEQc (f->type, "CMC"))
         {
           BITCODE_CMC color = { 0, 0, 0 };
           json_CMC (dat, dwg, tokens, name, key, &color);
+          if (f->size > sizeof(color))
+            return DWG_ERR_INVALIDTYPE;
           dwg_dynapi_header_set_value (dwg, key, &color, 0);
         }
       else if (t->type == JSMN_ARRAY && strEQc (f->type, "H"))
         {
           BITCODE_H hdl = json_HANDLE (dat, dwg, tokens, section, key, NULL, -1);
           if (hdl)
             dwg_dynapi_header_set_value (dwg, key, &hdl, 0);
         }
       //...
       else if (t->type == JSMN_OBJECT && strEQc (key, "CLASSES"))
         {
           LOG_WARN ("Unexpected next section %s", key)
           tokens->index--;
           tokens->index--;
           return 0;
         }
       else
         {
           LOG_WARN ("Unhandled %s [%s] with %s", key, f->type,
                     t_typename[t->type])
           tokens->index++;
           continue;
         }
     }
   LOG_TRACE ("End of %s\n", section)
   // the key
   tokens->index--;
   return 0;
 }
