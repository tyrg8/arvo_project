commit 0db5c89c5fe839f18b50e5501108f5c70993e7d2
Author: Albert Astals Cid <aacid@kde.org>
Date:   Thu Apr 25 23:08:17 2019 +0200

    Initialize the unread bits of _starttab
    
    oss-fuzz #14446

diff --git a/src/imageformats/rgb.cpp b/src/imageformats/rgb.cpp
index 432def8..a288eef 100644
--- a/src/imageformats/rgb.cpp
+++ b/src/imageformats/rgb.cpp
@@ -248,118 +248,121 @@ bool SGIImage::readData(QImage &img)
 bool SGIImage::readImage(QImage &img)
 {
     qint8 u8;
     qint16 u16;
     qint32 u32;
 
 //     qDebug() << "reading rgb ";
 
     // magic
     _stream >> u16;
     if (u16 != 0x01da) {
         return false;
     }
 
     // verbatim/rle
     _stream >> _rle;
 //     qDebug() << (_rle ? "RLE" : "verbatim");
     if (_rle > 1) {
         return false;
     }
 
     // bytes per channel
     _stream >> _bpc;
 //     qDebug() << "bytes per channel: " << int(_bpc);
     if (_bpc == 1)
         ;
     else if (_bpc == 2) {
 //         qDebug() << "dropping least significant byte";
     } else {
         return false;
     }
 
     // number of dimensions
     _stream >> _dim;
 //     qDebug() << "dimensions: " << _dim;
     if (_dim < 1 || _dim > 3) {
         return false;
     }
 
     _stream >> _xsize >> _ysize >> _zsize >> _pixmin >> _pixmax >> u32;
 //     qDebug() << "x: " << _xsize;
 //     qDebug() << "y: " << _ysize;
 //     qDebug() << "z: " << _zsize;
 
     // name
     _stream.readRawData(_imagename, 80);
     _imagename[79] = '\0';
 
     _stream >> _colormap;
 //     qDebug() << "colormap: " << _colormap;
     if (_colormap != NORMAL) {
         return false;    // only NORMAL supported
     }
 
     for (int i = 0; i < 404; i++) {
         _stream >> u8;
     }
 
     if (_dim == 1) {
 //         qDebug() << "1-dimensional images aren't supported yet";
         return false;
     }
 
     if (_stream.atEnd()) {
         return false;
     }
 
     img = QImage(_xsize, _ysize, QImage::Format_RGB32);
 
     if (_zsize == 0 )
         return false;
 
     if (_zsize == 2 || _zsize == 4) {
         img = img.convertToFormat(QImage::Format_ARGB32);
     } else if (_zsize > 4) {
 //         qDebug() << "using first 4 of " << _zsize << " channels";
         // Only let this continue if it won't cause a int overflow later
         // this is most likely a broken file anyway
         if (_ysize > std::numeric_limits<int>::max() / _zsize)
             return false;
     }
 
     _numrows = _ysize * _zsize;
 
     if (_rle) {
         uint l;
         _starttab = new quint32[_numrows];
         for (l = 0; !_stream.atEnd() && l < _numrows; l++) {
             _stream >> _starttab[l];
             _starttab[l] -= 512 + _numrows * 2 * sizeof(quint32);
         }
+        for (; l < _numrows; l++) {
+            _starttab[l] = 0;
+        }
 
         _lengthtab = new quint32[_numrows];
         for (l = 0; l < _numrows; l++) {
             _stream >> _lengthtab[l];
         }
     }
 
     _data = _dev->readAll();
 
     // sanity check
     if (_rle)
         for (uint o = 0; o < _numrows; o++)
             // don't change to greater-or-equal!
             if (_starttab[o] + _lengthtab[o] > (uint)_data.size()) {
 //                 qDebug() << "image corrupt (sanity check failed)";
                 return false;
             }
 
     if (!readData(img)) {
 //         qDebug() << "image corrupt (incomplete scanline)";
         return false;
     }
 
     return true;
 }
 
 ///////////////////////////////////////////////////////////////////////////////
