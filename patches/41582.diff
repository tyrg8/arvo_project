commit 94c0e9d89087805da3d7bef979d4e70cbcb00b18
Author: sashashura <93376818+sashashura@users.noreply.github.com>
Date:   Sat Jul 16 13:48:39 2022 +0100

    Fixes Heap-buffer-overflow in std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<ch

diff --git a/code/AssetLib/NDO/NDOLoader.cpp b/code/AssetLib/NDO/NDOLoader.cpp
index 37c543692..07953b04d 100644
--- a/code/AssetLib/NDO/NDOLoader.cpp
+++ b/code/AssetLib/NDO/NDOLoader.cpp
@@ -103,204 +103,206 @@ void NDOImporter::SetupProperties(const Importer* /*pImp*/)
 // ------------------------------------------------------------------------------------------------
 // Imports the given file into the given scene structure.
 void NDOImporter::InternReadFile( const std::string& pFile,
     aiScene* pScene, IOSystem* pIOHandler)
 {
 
     auto file = pIOHandler->Open( pFile, "rb");
     if (!file) {
         throw DeadlyImportError("Nendo: Could not open ", pFile);
     }
 
     StreamReaderBE reader(file);
 
     // first 9 bytes are nendo file format ("nendo 1.n")
     const char* head = (const char*)reader.GetPtr();
     reader.IncPtr(9);
 
     if (strncmp("nendo ",head,6)) {
         throw DeadlyImportError("Not a Nendo file; magic signature missing");
     }
     // check if this is a supported version. if not, continue, too -- users,
     // please don't complain if it doesn't work then ...
     unsigned int file_format = 12;
     if (!strncmp("1.0",head+6,3)) {
         file_format = 10;
         ASSIMP_LOG_INFO("NDO file format is 1.0");
     }
     else if (!strncmp("1.1",head+6,3)) {
         file_format = 11;
         ASSIMP_LOG_INFO("NDO file format is 1.1");
     }
     else if (!strncmp("1.2",head+6,3)) {
         file_format = 12;
         ASSIMP_LOG_INFO("NDO file format is 1.2");
     }
     else {
-        ASSIMP_LOG_WARN( "Unrecognized nendo file format version, continuing happily ... :", (head+6));
+        char buff[4] = {0};
+        memcpy(buff, head+6, 3);
+        ASSIMP_LOG_WARN( "Unrecognized nendo file format version, continuing happily ... :", buff);
     }
 
     reader.IncPtr(2); /* skip flags */
     if (file_format >= 12) {
         reader.IncPtr(2);
     }
     unsigned int temp = reader.GetU1();
 
     std::vector<Object> objects(temp); /* buffer to store all the loaded objects in */
 
     // read all objects
     for (unsigned int o = 0; o < objects.size(); ++o) {
 
 //      if (file_format < 12) {
             if (!reader.GetI1()) {
                 continue; /* skip over empty object */
             }
         //  reader.GetI2();
 //      }
         Object& obj = objects[o];
 
         temp = file_format >= 12 ? reader.GetU4() : reader.GetU2();
         head = (const char*)reader.GetPtr();
         reader.IncPtr(temp + 76); /* skip unknown stuff */
 
         obj.name = std::string(head, temp);
 
         // read edge table
         temp = file_format >= 12 ? reader.GetU4() : reader.GetU2();
         obj.edges.reserve(temp);
         for (unsigned int e = 0; e < temp; ++e) {
 
             obj.edges.push_back(Edge());
             Edge& edge = obj.edges.back();
 
             for (unsigned int i = 0; i< 8; ++i) {
                 edge.edge[i] = file_format >= 12 ? reader.GetU4() : reader.GetU2();
             }
             edge.hard =  file_format >= 11 ? reader.GetU1() : 0;
             for (unsigned int i = 0; i< 8; ++i) {
                 edge.color[i] = reader.GetU1();
             }
         }
 
         // read face table
         temp = file_format >= 12 ? reader.GetU4() : reader.GetU2();
         obj.faces.reserve(temp);
         for (unsigned int e = 0; e < temp; ++e) {
 
             obj.faces.push_back(Face());
             Face& face = obj.faces.back();
 
             face.elem = file_format >= 12 ? reader.GetU4() : reader.GetU2();
         }
 
         // read vertex table
         temp = file_format >= 12 ? reader.GetU4() : reader.GetU2();
         obj.vertices.reserve(temp);
         for (unsigned int e = 0; e < temp; ++e) {
 
             obj.vertices.push_back(Vertex());
             Vertex& v = obj.vertices.back();
 
             v.num = file_format >= 12 ? reader.GetU4() : reader.GetU2();
             v.val.x = reader.GetF4();
             v.val.y = reader.GetF4();
             v.val.z = reader.GetF4();
         }
 
         // read UVs
         temp = file_format >= 12 ? reader.GetU4() : reader.GetU2();
         for (unsigned int e = 0; e < temp; ++e) {
              file_format >= 12 ? reader.GetU4() : reader.GetU2();
         }
 
         temp = file_format >= 12 ? reader.GetU4() : reader.GetU2();
         for (unsigned int e = 0; e < temp; ++e) {
              file_format >= 12 ? reader.GetU4() : reader.GetU2();
         }
 
         if (reader.GetU1()) {
             const unsigned int x = reader.GetU2(), y = reader.GetU2();
             temp = 0;
             while (temp < x*y)  {
                 unsigned int repeat = reader.GetU1();
                 reader.GetU1();
                 reader.GetU1();
                 reader.GetU1();
                 temp += repeat;
             }
         }
     }
 
     // construct a dummy node graph and add all named objects as child nodes
     aiNode* root = pScene->mRootNode = new aiNode("$NDODummyRoot");
     aiNode** cc = root->mChildren = new aiNode* [ root->mNumChildren = static_cast<unsigned int>( objects.size()) ] ();
     pScene->mMeshes = new aiMesh* [ root->mNumChildren] ();
 
     std::vector<aiVector3D> vertices;
     std::vector<unsigned int> indices;
 
     for(const Object& obj : objects) {
         aiNode* nd = *cc++ = new aiNode(obj.name);
         nd->mParent = root;
 
         // translated from a python dict() - a vector might be sufficient as well
         typedef std::map<unsigned int, unsigned int>  FaceTable;
         FaceTable face_table;
 
         unsigned int n = 0;
         for(const Edge& edge : obj.edges) {
 
             face_table[edge.edge[2]] = n;
             face_table[edge.edge[3]] = n;
 
             ++n;
         }
 
         aiMesh* mesh = new aiMesh();
         mesh->mNumFaces=static_cast<unsigned int>(face_table.size());
         aiFace* faces = mesh->mFaces = new aiFace[mesh->mNumFaces];
 
         vertices.clear();
         vertices.reserve(4 * face_table.size()); // arbitrarily chosen
         for(FaceTable::value_type& v : face_table) {
             indices.clear();
 
             aiFace& f = *faces++;
 
             const unsigned int key = v.first;
             unsigned int cur_edge = v.second;
             while (1) {
                 unsigned int next_edge, next_vert;
                 if (key == obj.edges[cur_edge].edge[3]) {
                     next_edge = obj.edges[cur_edge].edge[5];
                     next_vert = obj.edges[cur_edge].edge[1];
                 }
                 else {
                     next_edge = obj.edges[cur_edge].edge[4];
                     next_vert = obj.edges[cur_edge].edge[0];
                 }
                 indices.push_back( static_cast<unsigned int>(vertices.size()) );
                 vertices.push_back(obj.vertices[ next_vert ].val);
 
                 cur_edge = next_edge;
                 if (cur_edge == v.second) {
                     break;
                 }
             }
 
             f.mIndices = new unsigned int[f.mNumIndices = static_cast<unsigned int>(indices.size())];
             std::copy(indices.begin(),indices.end(),f.mIndices);
         }
 
         mesh->mVertices = new aiVector3D[mesh->mNumVertices = static_cast<unsigned int>(vertices.size())];
         std::copy(vertices.begin(),vertices.end(),mesh->mVertices);
 
         if (mesh->mNumVertices) {
             pScene->mMeshes[pScene->mNumMeshes] = mesh;
 
             (nd->mMeshes = new unsigned int[nd->mNumMeshes=1])[0]=pScene->mNumMeshes++;
         }else
             delete mesh;
     }
 }
 
 #endif
