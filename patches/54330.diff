commit ad2f3a3f72a57fcce5213567fd77d920e953316a
Author: Alan Modra <amodra@gmail.com>
Date:   Wed Dec 14 14:46:07 2022 +1030

    asan: buffer overflow in sh_reloc
    
            * coff-sh.c (sh_reloc): Use bfd_reloc_offset_in_range.

diff --git a/bfd/coff-sh.c b/bfd/coff-sh.c
index c5b69a8592f..d030c475539 100644
--- a/bfd/coff-sh.c
+++ b/bfd/coff-sh.c
@@ -562,97 +562,98 @@ static bfd_reloc_status_type
 sh_reloc (bfd *      abfd,
 	  arelent *  reloc_entry,
 	  asymbol *  symbol_in,
 	  void *     data,
 	  asection * input_section,
 	  bfd *      output_bfd,
 	  char **    error_message ATTRIBUTE_UNUSED)
 {
   bfd_vma insn;
   bfd_vma sym_value;
   unsigned short r_type;
   bfd_vma addr = reloc_entry->address;
   bfd_byte *hit_data = addr + (bfd_byte *) data;
 
   r_type = reloc_entry->howto->type;
 
   if (output_bfd != NULL)
     {
       /* Partial linking--do nothing.  */
       reloc_entry->address += input_section->output_offset;
       return bfd_reloc_ok;
     }
 
   /* Almost all relocs have to do with relaxing.  If any work must be
      done for them, it has been done in sh_relax_section.  */
   if (r_type != R_SH_IMM32
 #ifdef COFF_WITH_PE
       && r_type != R_SH_IMM32CE
       && r_type != R_SH_IMAGEBASE
 #endif
       && (r_type != R_SH_PCDISP
 	  || (symbol_in->flags & BSF_LOCAL) != 0))
     return bfd_reloc_ok;
 
   if (symbol_in != NULL
       && bfd_is_und_section (symbol_in->section))
     return bfd_reloc_undefined;
 
-  if (addr > input_section->size)
+  if (!bfd_reloc_offset_in_range (reloc_entry->howto, abfd, input_section,
+				  addr))
     return bfd_reloc_outofrange;
 
   sym_value = get_symbol_value (symbol_in);
 
   switch (r_type)
     {
     case R_SH_IMM32:
 #ifdef COFF_WITH_PE
     case R_SH_IMM32CE:
 #endif
       insn = bfd_get_32 (abfd, hit_data);
       insn += sym_value + reloc_entry->addend;
       bfd_put_32 (abfd, insn, hit_data);
       break;
 #ifdef COFF_WITH_PE
     case R_SH_IMAGEBASE:
       insn = bfd_get_32 (abfd, hit_data);
       insn += sym_value + reloc_entry->addend;
       insn -= pe_data (input_section->output_section->owner)->pe_opthdr.ImageBase;
       bfd_put_32 (abfd, insn, hit_data);
       break;
 #endif
     case R_SH_PCDISP:
       insn = bfd_get_16 (abfd, hit_data);
       sym_value += reloc_entry->addend;
       sym_value -= (input_section->output_section->vma
 		    + input_section->output_offset
 		    + addr
 		    + 4);
       sym_value += (((insn & 0xfff) ^ 0x800) - 0x800) << 1;
       insn = (insn & 0xf000) | ((sym_value >> 1) & 0xfff);
       bfd_put_16 (abfd, insn, hit_data);
       if (sym_value + 0x1000 >= 0x2000 || (sym_value & 1) != 0)
 	return bfd_reloc_overflow;
       break;
     default:
       abort ();
       break;
     }
 
   return bfd_reloc_ok;
 }
 
 #define coff_bfd_merge_private_bfd_data _bfd_generic_verify_endian_match
 
 /* We can do relaxing.  */
 #define coff_bfd_relax_section sh_relax_section
 
 /* We use the special COFF backend linker.  */
 #define coff_relocate_section sh_relocate_section
 
 /* When relaxing, we need to use special code to get the relocated
    section contents.  */
 #define coff_bfd_get_relocated_section_contents \
   sh_coff_get_relocated_section_contents
 
 #include "coffcode.h"
 
