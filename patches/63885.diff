commit 9ba5f8faeacc35ea41033a4e384bef9cc18e9f5c
Author: Shen-Ta Hsieh <beststeve@secondstate.io>
Date:   Fri Nov 17 13:47:33 2023 +0800

    [Fuzz] Force loader in interpreter mode to skip AOT sections
    
    Signed-off-by: Shen-Ta Hsieh <beststeve@secondstate.io>

diff --git a/lib/driver/fuzzTool.cpp b/lib/driver/fuzzTool.cpp
index bb385c36..83ffcc8b 100644
--- a/lib/driver/fuzzTool.cpp
+++ b/lib/driver/fuzzTool.cpp
@@ -14,41 +14,42 @@ namespace Driver {
 int FuzzTool(const uint8_t *Data, size_t Size) noexcept {
   using namespace std::literals;
   std::ios::sync_with_stdio(false);
   spdlog::set_level(spdlog::level::critical);
 
   Configure Conf;
+  Conf.getRuntimeConfigure().setForceInterpreter(true);
   Loader::Loader Loader(Conf);
 
   std::unique_ptr<AST::Module> Module;
   if (auto Res = Loader.parseModule(Span<const uint8_t>(Data, Size))) {
     Module = std::move(*Res);
   } else {
     const auto Err = static_cast<uint32_t>(Res.error());
     spdlog::error("Parse Module failed. Error code: {}"sv, Err);
     return EXIT_FAILURE;
   }
 
   {
     Validator::Validator ValidatorEngine(Conf);
     if (auto Res = ValidatorEngine.validate(*Module); !Res) {
       const auto Err = static_cast<uint32_t>(Res.error());
       spdlog::error("Validate Module failed. Error code: {}"sv, Err);
       return EXIT_FAILURE;
     }
   }
 
   AOT::Compiler Compiler(Conf);
   if (auto Res = Compiler.compile(Span<const uint8_t>(Data, Size), *Module,
                                   "/dev/null"sv);
       !Res) {
     const auto Err = static_cast<uint32_t>(Res.error());
     spdlog::error("Compilation failed. Error code: {}"sv, Err);
     return EXIT_FAILURE;
   }
 
   return EXIT_SUCCESS;
 }
 
 } // namespace Driver
 } // namespace WasmEdge
 #endif
