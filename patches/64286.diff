commit 37beb9729249a1cde472545e2a19d80660e40edc
Author: Ashwin Natesan <ashwin.natesan@ittiam.com>
Date:   Tue Nov 21 10:37:46 2023 +0530

    mvcdec: Fixed heap overflow during SEI parsing
    
    There can be cases where there are multiple SEI payloads within a
    single SEI NAL. In the particulkar case where the payload comprises
    exclusiely of FGC data, the size of the NAL can exceed the size
    of the 'dynamic bitstream buffer' which is used to pass the NALU
    onto its appropriate parser.
    
    This commit adds 'imvcd_bitstream_buf_realloc' which re-allocates
    the 'dynamic bitstream buffer' such that any arbitrarily sized
    NALU can be stored without a heap overflow.
    
    Bug = ossfuzz:64286
    Test: svc_enc_fuzzer

diff --git a/decoder/mvc/imvcd_api.c b/decoder/mvc/imvcd_api.c
index 45fffd1..3e95a80 100644
--- a/decoder/mvc/imvcd_api.c
+++ b/decoder/mvc/imvcd_api.c
@@ -669,336 +669,344 @@ static FORCEINLINE void imvcd_update_num_subset_sps(mvc_dec_ctxt_t *ps_mvcd_ctxt
 static IV_API_CALL_STATUS_T imvcd_view_decode(iv_obj_t *ps_dec_hdl, imvcd_video_decode_ip_t *ps_ip,
                                               imvcd_video_decode_op_t *ps_op)
 {
     UWORD8 *pu1_input_buffer;
     UWORD8 *pu1_bitstream_buf;
     UWORD32 u4_bitstream_buf_size;
     WORD32 i4_nalu_length;
     UWORD32 u4_length_of_start_code;
     WORD32 i4_error_code;
 
     mvc_dec_ctxt_t *ps_mvcd_ctxt = (mvc_dec_ctxt_t *) ps_dec_hdl->pv_codec_handle;
     dec_struct_t *ps_view_ctxt = &ps_mvcd_ctxt->s_view_dec_ctxt;
 
     UWORD32 u4_num_bytes_consumed = 0;
     UWORD32 u4_num_bytes_remaining = ps_ip->s_ivd_ip.u4_num_Bytes;
     bool b_first_start_code_found = false;
     bool b_frame_data_left = true;
     bool b_header_data_left = true;
     UWORD32 u4_next_is_aud = 0;
 
     ASSERT(u4_num_bytes_remaining > 0);
 
     imvcd_view_init(ps_mvcd_ctxt);
 
     do
     {
         pu1_input_buffer = ((UWORD8 *) ps_ip->s_ivd_ip.pv_stream_buffer) + u4_num_bytes_consumed;
 
         if(!ps_view_ctxt->pu1_bits_buf_dynamic &&
            is_header_decoded(ps_view_ctxt->i4_header_decoded, PPS))
         {
             if(IV_SUCCESS !=
                imvcd_bitstream_buf_alloc(
                    ps_view_ctxt, is_header_decoded(ps_view_ctxt->i4_header_decoded, SUBSET_SPS)
                                      ? ps_mvcd_ctxt->u2_num_views
                                      : 1))
             {
                 return IV_FAIL;
             }
         }
 
         if(ps_view_ctxt->pu1_bits_buf_dynamic)
         {
             pu1_bitstream_buf = ps_view_ctxt->pu1_bits_buf_dynamic;
             u4_bitstream_buf_size = ps_view_ctxt->u4_dynamic_bits_buf_size;
         }
         else
         {
             pu1_bitstream_buf = ps_view_ctxt->pu1_bits_buf_static;
             u4_bitstream_buf_size = ps_view_ctxt->u4_static_bits_buf_size;
         }
 
         i4_nalu_length = ih264d_find_start_code(pu1_input_buffer, 0, u4_num_bytes_remaining,
                                                 &u4_length_of_start_code, &u4_next_is_aud);
 
         if(i4_nalu_length == -1)
         {
             i4_nalu_length = 0;
         }
 
         if((0 != u4_next_is_aud) && (1 != u4_next_is_aud))
         {
             return IV_FAIL;
         }
 
-        /* Ignore bytes beyond the allocated size of intermediate buffer */
-        /* Since 8 bytes are read ahead, ensure 8 bytes are free at the
-        end of the buffer, which will be memset to 0 after emulation prevention */
-        i4_nalu_length = MIN((UWORD32) i4_nalu_length, u4_bitstream_buf_size - 8);
-
         if(i4_nalu_length)
         {
+            UWORD32 u4_nalu_buf_size = ((UWORD32) i4_nalu_length) + 8;
+
+            if(u4_nalu_buf_size > u4_bitstream_buf_size)
+            {
+                if(IV_SUCCESS != imvcd_bitstream_buf_realloc(ps_view_ctxt, u4_nalu_buf_size))
+                {
+                    return IV_FAIL;
+                }
+
+                pu1_bitstream_buf = ps_view_ctxt->pu1_bits_buf_dynamic;
+                u4_bitstream_buf_size = ps_view_ctxt->u4_dynamic_bits_buf_size;
+            }
+
             memcpy(pu1_bitstream_buf, pu1_input_buffer + u4_length_of_start_code, i4_nalu_length);
 
             /* Decoder may read extra 8 bytes near end of the frame */
-            if(((UWORD32) (i4_nalu_length + 8)) < u4_bitstream_buf_size)
+            if(u4_nalu_buf_size < u4_bitstream_buf_size)
             {
                 memset(pu1_bitstream_buf + i4_nalu_length, 0, 8 * sizeof(pu1_bitstream_buf[0]));
             }
 
             b_first_start_code_found = true;
         }
         else
         {
             if(!b_first_start_code_found)
             {
                 ps_view_ctxt->i4_error_code = ERROR_START_CODE_NOT_FOUND;
                 ps_op->s_ivd_op.u4_error_code |= 1 << IVD_INSUFFICIENTDATA;
 
                 if(ps_view_ctxt->u4_pic_buf_got == 0)
                 {
                     imvcd_fill_output_struct_from_context(ps_mvcd_ctxt, ps_op);
 
                     ps_op->s_ivd_op.u4_error_code = ps_view_ctxt->i4_error_code;
 
                     imvcd_video_decode_clean_return(ps_mvcd_ctxt, ps_ip, ps_op);
 
                     return IV_FAIL;
                 }
                 else
                 {
                     ps_view_ctxt->u1_pic_decode_done = 1;
 
                     continue;
                 }
             }
             else
             {
                 /* a start code has already been found earlier in the same process
                  * call*/
                 b_frame_data_left = false;
                 b_header_data_left = false;
 
                 if(!ps_view_ctxt->i4_decode_header && !ps_view_ctxt->u4_pic_buf_got)
                 {
                     ps_op->s_ivd_op.u4_error_code = ih264d_map_error(ERROR_UNKNOWN_NAL);
 
                     imvcd_video_decode_clean_return(ps_mvcd_ctxt, ps_ip, ps_op);
 
                     return IV_FAIL;
                 }
 
                 continue;
             }
         }
 
         ps_mvcd_ctxt->ae_nalu_id[ps_mvcd_ctxt->u2_num_views_decoded] =
             NAL_UNIT_TYPE(pu1_bitstream_buf[0]);
         ps_mvcd_ctxt->au1_nal_ref_idc[ps_mvcd_ctxt->u2_num_views_decoded] =
             NAL_REF_IDC(pu1_bitstream_buf[0]);
 
         if(ps_view_ctxt->u4_dec_thread_created &&
            !is_slice_nalu_type(ps_mvcd_ctxt->ae_nalu_id[ps_mvcd_ctxt->u2_num_views_decoded]))
         {
             ps_op->s_ivd_op.u4_error_code = ERROR_FEATURE_UNAVAIL;
 
             imvcd_video_decode_clean_return(ps_mvcd_ctxt, ps_ip, ps_op);
 
             return IV_FAIL;
         }
 
         if(!is_mvc_nalu(ps_mvcd_ctxt->ae_nalu_id[ps_mvcd_ctxt->u2_num_views_decoded]))
         {
             ivd_video_decode_op_t s_avc_op;
 
             i4_error_code =
                 ih264d_parse_nal_unit(ps_dec_hdl, &s_avc_op, pu1_bitstream_buf, i4_nalu_length);
         }
         else
         {
             i4_error_code = imvcd_nalu_parser(ps_mvcd_ctxt, pu1_bitstream_buf, i4_nalu_length);
         }
 
         if(OK != i4_error_code)
         {
             ps_op->s_ivd_op.u4_error_code = i4_error_code;
 
             imvcd_video_decode_clean_return(ps_mvcd_ctxt, ps_ip, ps_op);
 
             return IV_FAIL;
         }
         else if(PPS == ps_mvcd_ctxt->ae_nalu_id[ps_mvcd_ctxt->u2_num_views_decoded])
         {
             imvcd_update_num_pps(ps_mvcd_ctxt);
         }
         else if(SPS == ps_mvcd_ctxt->ae_nalu_id[ps_mvcd_ctxt->u2_num_views_decoded])
         {
             imvcd_update_num_sps(ps_mvcd_ctxt);
         }
         else if(SUBSET_SPS == ps_mvcd_ctxt->ae_nalu_id[ps_mvcd_ctxt->u2_num_views_decoded])
         {
             imvcd_update_num_subset_sps(ps_mvcd_ctxt);
         }
 
         b_header_data_left = ps_view_ctxt->i4_decode_header &&
                              (!is_header_decoded(ps_view_ctxt->i4_header_decoded, SPS) ||
                               !is_header_decoded(ps_view_ctxt->i4_header_decoded, PPS)) &&
                              (u4_num_bytes_consumed < ps_ip->s_ivd_ip.u4_num_Bytes);
         b_frame_data_left = (!ps_view_ctxt->i4_decode_header &&
                              (!ps_view_ctxt->u1_pic_decode_done || u4_next_is_aud)) &&
                             (u4_num_bytes_consumed < ps_ip->s_ivd_ip.u4_num_Bytes);
 
         u4_num_bytes_consumed += i4_nalu_length + u4_length_of_start_code;
         u4_num_bytes_remaining -= i4_nalu_length + u4_length_of_start_code;
 
     } while(b_header_data_left || b_frame_data_left);
 
     if((i4_error_code == IVD_RES_CHANGED) || (i4_error_code == IVD_MEM_ALLOC_FAILED) ||
        (i4_error_code == ERROR_UNAVAIL_PICBUF_T) || (i4_error_code == ERROR_UNAVAIL_MVBUF_T) ||
        (i4_error_code == ERROR_INV_SPS_PPS_T))
     {
         ih264d_signal_decode_thread(ps_view_ctxt);
 
         if(ps_view_ctxt->u4_num_cores == 3)
         {
             ih264d_signal_bs_deblk_thread(ps_view_ctxt);
         }
 
         /* dont consume bitstream for change in resolution case */
         if(i4_error_code == IVD_RES_CHANGED)
         {
             ps_op->s_ivd_op.u4_num_bytes_consumed -= u4_num_bytes_consumed;
         }
 
         imvcd_video_decode_clean_return(ps_mvcd_ctxt, ps_ip, ps_op);
 
         return IV_FAIL;
     }
 
     if(ps_view_ctxt->u1_separate_parse)
     {
         if(ps_view_ctxt->u4_num_cores == 2)
         {
             if((ps_view_ctxt->u4_nmb_deblk == 0) && (ps_view_ctxt->u4_start_recon_deblk == 1))
             {
                 tfr_ctxt_t s_tfr_ctxt;
 
                 UWORD32 u4_num_mbs, u4_max_addr;
 
                 tfr_ctxt_t *ps_tfr_cxt = &s_tfr_ctxt;
                 pad_mgr_t *ps_pad_mgr = &ps_view_ctxt->s_pad_mgr;
                 nalu_mvc_ext_t *ps_cur_nalu_mvc_ext = imvcd_get_cur_nalu_mvc_ext(ps_mvcd_ctxt);
 
                 /*BS is done for all mbs while parsing*/
                 u4_max_addr = (ps_view_ctxt->u2_frm_wd_in_mbs * ps_view_ctxt->u2_frm_ht_in_mbs) - 1;
                 ps_view_ctxt->u4_cur_bs_mb_num = u4_max_addr + 1;
 
                 ps_view_ctxt->ps_cur_pic = &ps_view_ctxt->s_cur_pic;
                 imvcd_convert_au_buf_to_view_buf(ps_mvcd_ctxt->ps_cur_au, &ps_view_ctxt->s_cur_pic,
                                                  ps_mvcd_ctxt->u2_num_views_decoded,
                                                  ps_cur_nalu_mvc_ext->u2_view_id);
 
                 ih264d_init_deblk_tfr_ctxt(ps_view_ctxt, ps_pad_mgr, ps_tfr_cxt,
                                            ps_view_ctxt->u2_frm_wd_in_mbs, 0);
 
                 u4_num_mbs = u4_max_addr - ps_view_ctxt->u4_cur_deblk_mb_num + 1;
 
                 if(u4_num_mbs != 0)
                 {
                     ih264d_check_mb_map_deblk(ps_view_ctxt, u4_num_mbs, ps_tfr_cxt, 1);
                 }
 
                 ps_view_ctxt->u4_start_recon_deblk = 0;
             }
         }
 
         ih264d_signal_decode_thread(ps_view_ctxt);
 
         if(ps_view_ctxt->u4_num_cores == 3)
         {
             ih264d_signal_bs_deblk_thread(ps_view_ctxt);
         }
     }
 
     DATA_SYNC();
 
     // Report if header (sps and pps) has not been decoded yet
     if(ps_view_ctxt->i4_decode_header &&
        (!is_header_decoded(ps_view_ctxt->i4_header_decoded, SPS) &&
         !is_header_decoded(ps_view_ctxt->i4_header_decoded, PPS)))
     {
         ps_op->s_ivd_op.u4_error_code |= (1 << IVD_INSUFFICIENTDATA);
 
         imvcd_video_decode_clean_return(ps_mvcd_ctxt, ps_ip, ps_op);
 
         return IV_FAIL;
     }
 
     if(ps_view_ctxt->u4_pic_buf_got)
     {
         ps_view_ctxt->u1_top_bottom_decoded = TOP_FIELD_ONLY | BOT_FIELD_ONLY;
 
         if(((ps_view_ctxt->ps_dec_err_status->u1_err_flag & REJECT_CUR_PIC) == 0) &&
            ps_view_ctxt->u1_pic_decode_done)
         {
             nalu_mvc_ext_t *ps_cur_nalu_mvc_ext = imvcd_get_cur_nalu_mvc_ext(ps_mvcd_ctxt);
 
             if(!ps_mvcd_ctxt->au1_nal_ref_idc[ps_mvcd_ctxt->u2_num_views_decoded] &&
                ps_cur_nalu_mvc_ext->u1_inter_view_flag)
             {
                 ps_view_ctxt->ps_cur_slice->u1_nal_ref_idc = 1;
             }
 
             /* Padding only. Deblk has happened already. */
             ih264d_deblock_picture_progressive(ps_view_ctxt);
 
             if(!ps_mvcd_ctxt->au1_nal_ref_idc[ps_mvcd_ctxt->u2_num_views_decoded] &&
                ps_cur_nalu_mvc_ext->u1_inter_view_flag)
             {
                 ps_view_ctxt->ps_cur_slice->u1_nal_ref_idc = 0;
             }
         }
 
         /*Update the i4_frametype at the end of picture*/
         if(imvcd_is_idr_au(ps_mvcd_ctxt))
         {
             ps_view_ctxt->i4_frametype = IV_IDR_FRAME;
         }
         else if(ps_view_ctxt->i4_pic_type == B_SLICE)
         {
             ps_view_ctxt->i4_frametype = IV_B_FRAME;
         }
         else if(ps_view_ctxt->i4_pic_type == P_SLICE)
         {
             ps_view_ctxt->i4_frametype = IV_P_FRAME;
         }
         else if(ps_view_ctxt->i4_pic_type == I_SLICE)
         {
             ps_view_ctxt->i4_frametype = IV_I_FRAME;
         }
 
         ps_view_ctxt->i4_content_type = ps_view_ctxt->ps_cur_slice->u1_field_pic_flag;
     }
 
     /* close deblock thread if it is not closed yet*/
     if(ps_view_ctxt->u4_num_cores == 3)
     {
         ih264d_signal_bs_deblk_thread(ps_view_ctxt);
     }
 
     if(ps_view_ctxt->u4_dec_thread_created)
     {
         ih264d_signal_decode_thread(ps_view_ctxt);
     }
 
     if(ps_view_ctxt->u4_bs_deblk_thread_created)
     {
         ih264d_signal_bs_deblk_thread(ps_view_ctxt);
     }
 
     ps_op->s_ivd_op.u4_num_bytes_consumed = u4_num_bytes_consumed;
 
     DATA_SYNC();
 
     return IV_SUCCESS;
 }
diff --git a/decoder/mvc/imvcd_api_utils.c b/decoder/mvc/imvcd_api_utils.c
index 7d1f309..3a40d3b 100644
--- a/decoder/mvc/imvcd_api_utils.c
+++ b/decoder/mvc/imvcd_api_utils.c
@@ -391,3 +391,19 @@ void imvcd_bitsteam_buf_free(dec_struct_t *ps_view_ctxt)
 {
     PS_DEC_ALIGNED_FREE(ps_view_ctxt, ps_view_ctxt->pu1_bits_buf_dynamic);
 }
+
+IV_API_CALL_STATUS_T imvcd_bitstream_buf_realloc(dec_struct_t *ps_view_ctxt, UWORD32 u4_size)
+{
+    imvcd_bitsteam_buf_free(ps_view_ctxt);
+
+    u4_size = MAX(MIN_BITSTREAMS_BUF_SIZE, u4_size);
+
+    ps_view_ctxt->pu1_bits_buf_dynamic =
+        ps_view_ctxt->pf_aligned_alloc(ps_view_ctxt->pv_mem_ctxt, 128, u4_size);
+    RETURN_IF((NULL == ps_view_ctxt->pu1_bits_buf_dynamic), IV_FAIL);
+
+    memset(ps_view_ctxt->pu1_bits_buf_dynamic, 0, u4_size);
+    ps_view_ctxt->u4_dynamic_bits_buf_size = u4_size;
+
+    return IV_SUCCESS;
+}
diff --git a/decoder/mvc/imvcd_api_utils.h b/decoder/mvc/imvcd_api_utils.h
index 0707f45..8b025b2 100644
--- a/decoder/mvc/imvcd_api_utils.h
+++ b/decoder/mvc/imvcd_api_utils.h
@@ -53,6 +53,9 @@ extern IV_API_CALL_STATUS_T imvcd_bitstream_buf_alloc(dec_struct_t *ps_view_ctxt
 
 extern void imvcd_bitsteam_buf_free(dec_struct_t *ps_view_ctxt);
 
+extern IV_API_CALL_STATUS_T imvcd_bitstream_buf_realloc(dec_struct_t *ps_view_ctxt,
+                                                        UWORD32 u4_size);
+
 extern void imvcd_convert_to_app_disp_buf(mvc_dec_ctxt_t *ps_mvcd_ctxt,
                                           iv_yuv_buf_t *ps_view_disp_bufs);
 #endif
diff --git a/decoder/mvc/imvcd_defs.h b/decoder/mvc/imvcd_defs.h
index 0b8c976..2bf5e54 100644
--- a/decoder/mvc/imvcd_defs.h
+++ b/decoder/mvc/imvcd_defs.h
@@ -1,47 +1,39 @@
 /******************************************************************************
  *
  * Copyright (C) 2021 The Android Open Source Project
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  *****************************************************************************
  * Originally developed and contributed by Ittiam Systems Pvt. Ltd, Bangalore
  */
 
 #ifndef _IMVCD_DEFS_H_
 #define _IMVCD_DEFS_H_
 
 #include <stdint.h>
 
 #include "ih264_typedefs.h"
 #include "imvc_defs.h"
 #include "ih264d_defs.h"
 
 #define MVC_MAX_REF_PICS MAX(16 * LOG2_MAX_NUM_VIEWS, 2 * H264_MAX_REF_PICS)
 
 /* Set to identify between actual ref pic with valid u1_pic_buf_id
    and replicated IVP ref pic! Ensure that MAX_VAL_PIC_BUF_ID-MAX_NUM_VIEWS
    is still greater than any possible value of u1_pic_buf_id */
 #define IVP_PIC_BUF_ID UINT8_MAX
 
-/* In FGC SEI
-   - Worst-case bits for all elements before 'num_intensity_intervals_minus1' = 47
-   - Worst-case bits for all elements before 'film_grain_characteristics_repetition_period', not
-     including elements from previous line = 3 * (8 + 3 + 256 * (8 + 8 + 8 * 16)) = 110625
-   - Worst-case bits for 'film_grain_characteristics_repetition_period' = 30
-   Total of (47 + 110625 + 30) = 110702 byte */
-#define MAX_FGC_SEI_SIZE 110702
-
-#define MIN_BITSTREAMS_BUF_SIZE (MAX_FGC_SEI_SIZE + 256000)
+#define MIN_BITSTREAMS_BUF_SIZE 256000
 
 #endif
