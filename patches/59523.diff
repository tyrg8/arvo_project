commit 8027830aac4625a96b70b645fbbb4ccb625f781e
Author: Reini Urban <rurban@cpan.org>
Date:   Mon Oct 30 13:20:22 2023 +0100

    dynapi: fix fixed_string termination
    
    Fixes ossfuzz 59523

diff --git a/src/dynapi.c b/src/dynapi.c
index 0d92584d..677f886e 100644
--- a/src/dynapi.c
+++ b/src/dynapi.c
@@ -14347,64 +14347,64 @@ static void
 dynapi_set_helper (void *restrict old, const Dwg_DYNAPI_field *restrict f,
                    const Dwg_Version_Type dwg_version,
                    const void *restrict value, const bool is_utf8)
 {
   // TODO: sanity checks. is_malloc (TF), copy zero's (TFv)
   // if text strcpy or wcscpy, or do utf8 conversion.
   //if ((char*)old && f->is_malloc)
   //  free (old);
   if (f->is_malloc)
     {
       // NULL ptr
       if (!*(char**)value)
         memcpy (old, value, sizeof (char*));
       // fixed length (but not yet TF)
       else if (strEQc (f->type, "TFv"))
         {
-          char *str = (char *)calloc (f->size, 1);
+          char *str = (char *)calloc (f->size + 1, 1);
           strncpy (str, *(char**)value, f->size);
           // we copy just the pointer to heap-alloced str, not the string
           free (*(char **)old);
           memcpy (old, &str, sizeof (char*)); // size of ptr
         }
       // ascii
       else if (f->is_string && dwg_version < R_2007)
         {
           // FIXME: TF size calc is probably wrong
           size_t len = strlen (*(char**)value);
-          char *str = (char *)malloc (len+1);
-          memcpy (str, *(char**)value, len+1);
+          char *str = (char *)malloc (len + 1);
+          memcpy (str, *(char**)value, len + 1);
           // we copy just the pointer, not the string
           free (*(char **)old);
           memcpy (old, &str, sizeof (char*)); // size of ptr
         }
       // or wide
       else if (strNE (f->type, "TF") && (f->is_string && dwg_version >= R_2007))
         {
           BITCODE_TU wstr;
           if (is_utf8)
             wstr = bit_utf8_to_TU (*(char **)value, 0);
           else // source is already TU
             {
 #ifdef HAVE_NATIVE_WCHAR2
               wstr = (BITCODE_TU)malloc (2 * (wcslen (*(wchar_t **)value) + 1));
               wcscpy ((wchar_t *)wstr, *(wchar_t **)value);
 #else
               int length = 0;
               for (; (*(BITCODE_TU*)value)[length]; length++)
                 ;
               length++;
-              wstr = (BITCODE_TU)malloc (2 * length);
+              wstr = (BITCODE_TU)malloc ((2 * length) + 1);
               memcpy (wstr, value, length * 2);
 #endif
             }
           free (*(char **)old);
           memcpy (old, &wstr, sizeof (char*)); // size of ptr
         }
       else
         memcpy (old, value, sizeof (char*));
     }
   else
     memcpy (old, value, f->size);
 }
 
 /* generic field setters */
diff --git a/src/gen-dynapi.pl b/src/gen-dynapi.pl
index 23f5d2f1..6e978fc5 100755
--- a/src/gen-dynapi.pl
+++ b/src/gen-dynapi.pl
@@ -3102,64 +3102,64 @@ static void
 dynapi_set_helper (void *restrict old, const Dwg_DYNAPI_field *restrict f,
                    const Dwg_Version_Type dwg_version,
                    const void *restrict value, const bool is_utf8)
 {
   // TODO: sanity checks. is_malloc (TF), copy zero's (TFv)
   // if text strcpy or wcscpy, or do utf8 conversion.
   //if ((char*)old && f->is_malloc)
   //  free (old);
   if (f->is_malloc)
     {
       // NULL ptr
       if (!*(char**)value)
         memcpy (old, value, sizeof (char*));
       // fixed length (but not yet TF)
       else if (strEQc (f->type, "TFv"))
         {
-          char *str = (char *)calloc (f->size, 1);
+          char *str = (char *)calloc (f->size + 1, 1);
           strncpy (str, *(char**)value, f->size);
           // we copy just the pointer to heap-alloced str, not the string
           free (*(char **)old);
           memcpy (old, &str, sizeof (char*)); // size of ptr
         }
       // ascii
       else if (f->is_string && dwg_version < R_2007)
         {
           // FIXME: TF size calc is probably wrong
           size_t len = strlen (*(char**)value);
-          char *str = (char *)malloc (len+1);
-          memcpy (str, *(char**)value, len+1);
+          char *str = (char *)malloc (len + 1);
+          memcpy (str, *(char**)value, len + 1);
           // we copy just the pointer, not the string
           free (*(char **)old);
           memcpy (old, &str, sizeof (char*)); // size of ptr
         }
       // or wide
       else if (strNE (f->type, "TF") && (f->is_string && dwg_version >= R_2007))
         {
           BITCODE_TU wstr;
           if (is_utf8)
             wstr = bit_utf8_to_TU (*(char **)value, 0);
           else // source is already TU
             {
 #ifdef HAVE_NATIVE_WCHAR2
               wstr = (BITCODE_TU)malloc (2 * (wcslen (*(wchar_t **)value) + 1));
               wcscpy ((wchar_t *)wstr, *(wchar_t **)value);
 #else
               int length = 0;
               for (; (*(BITCODE_TU*)value)[length]; length++)
                 ;
               length++;
-              wstr = (BITCODE_TU)malloc (2 * length);
+              wstr = (BITCODE_TU)malloc ((2 * length) + 1);
               memcpy (wstr, value, length * 2);
 #endif
             }
           free (*(char **)old);
           memcpy (old, &wstr, sizeof (char*)); // size of ptr
         }
       else
         memcpy (old, value, sizeof (char*));
     }
   else
     memcpy (old, value, f->size);
 }
 
 /* generic field setters */
diff --git a/src/in_json.c b/src/in_json.c
index 826b0f0f..74987e40 100644
--- a/src/in_json.c
+++ b/src/in_json.c
@@ -443,56 +443,61 @@ static char *
 json_fixed_string (Bit_Chain *restrict dat, const int len,
                    jsmntokens_t *restrict tokens)
 {
   const jsmntok_t *t = &tokens->tokens[tokens->index];
   char *str = (char *)calloc (len + 1, 1);
   int l;
   JSON_TOKENS_CHECK_OVERFLOW_NULL;
   l = t->end - t->start;
   if (!str)
     goto outofmemory;
   if (t->type != JSMN_STRING)
     {
       LOG_ERROR ("Expected JSON STRING");
       json_advance_unknown (dat, tokens, t->type, 0);
       JSON_TOKENS_CHECK_OVERFLOW_NULL
       return NULL;
     }
   // Unquote \", convert Unicode to \\U+xxxx as in bit_embed_TU
   // unquote \\ to \.
   if (memchr (&dat->chain[t->start], '\\', l))
     {
       int dlen = len;
       dat->chain[t->end] = '\0';
       while (!bit_utf8_to_TV (str, &dat->chain[t->start], dlen, l, 1,
                               dat->codepage))
         {
           LOG_INSANE ("Not enough room in quoted string len=%d\n", len)
           dlen += 8;
           if (dlen > 6 * l)
             {
               LOG_ERROR ("bit_utf8_to_TV loop len=%d vs %d \"%.*s\"", len, l,
                          l, &dat->chain[t->start]);
               // len = t->end - t->start;
               free (str);
               goto normal;
             }
           str = (char *)realloc (str, dlen);
           if (!str)
             goto outofmemory;
         }
+      str[len] = '\0';
     }
   else
     {
       char *p;
     normal:
       if (l > len)
         {
           memcpy (str, &dat->chain[t->start], len);
           LOG_WARN ("Overlarge JSON TF value \"%.*s\" stripped to \"%s\"", l,
                     &dat->chain[t->start], str);
+          str[len] = '\0';
         }
       else
-        memcpy (str, &dat->chain[t->start], l);
+        {
+          memcpy (str, &dat->chain[t->start], l);
+          str[l] = '\0';
+        }
     }
   tokens->index++;
   return str;
