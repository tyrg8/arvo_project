commit 18b504b33f1742fd3b0e539a6b7b7a30d9cbe37c
Author: Connor Rigby <connorr@hey.com>
Date:   Mon Jun 26 10:14:58 2023 -0600

    use calloc for cs_insn instead of malloc (#1972)
    
    Signed-off-by: Connor Rigby <connorr@hey.com>

diff --git a/cs.c b/cs.c
index 1b7ba05f..6f37b26b 100644
--- a/cs.c
+++ b/cs.c
@@ -564,71 +564,72 @@ static int str_replace(char *result, char *target, const char *str1, char *str2)
 // fill insn with mnemonic & operands info
 static void fill_insn(struct cs_struct *handle, cs_insn *insn, char *buffer, MCInst *mci,
 		PostPrinter_t postprinter, const uint8_t *code)
 {
 #ifndef CAPSTONE_DIET
 	char *sp, *mnem;
 #endif
 	uint16_t copy_size = MIN(sizeof(insn->bytes), insn->size);
 
 	// fill the instruction bytes.
 	// we might skip some redundant bytes in front in the case of X86
 	memcpy(insn->bytes, code + insn->size - copy_size, copy_size);
 	insn->op_str[0] = '\0';
 	insn->size = copy_size;
 
 	// alias instruction might have ID saved in OpcodePub
 	if (MCInst_getOpcodePub(mci))
 		insn->id = MCInst_getOpcodePub(mci);
 
 	// post printer handles some corner cases (hacky)
 	if (postprinter)
 		postprinter((csh)handle, insn, buffer, mci);
 
 #ifndef CAPSTONE_DIET
 	mnem = insn->mnemonic;
+	// memset(mnem, 0, CS_MNEMONIC_SIZE);
 	for (sp = buffer; *sp; sp++) {
 		if (*sp == ' '|| *sp == '\t')
 			break;
 		if (*sp == '|')	// lock|rep prefix for x86
 			*sp = ' ';
 		// copy to @mnemonic
 		*mnem = *sp;
 		mnem++;
 	}
 
 	*mnem = '\0';
 
 	// we might have customized mnemonic
 	if (handle->mnem_list) {
 		struct insn_mnem *tmp = handle->mnem_list;
 		while(tmp) {
 			if (tmp->insn.id == insn->id) {
 				char str[CS_MNEMONIC_SIZE];
 
 				if (!str_replace(str, insn->mnemonic, cs_insn_name((csh)handle, insn->id), tmp->insn.mnemonic)) {
 					// copy result to mnemonic
 					(void)strncpy(insn->mnemonic, str, sizeof(insn->mnemonic) - 1);
 					insn->mnemonic[sizeof(insn->mnemonic) - 1] = '\0';
 				}
 
 				break;
 			}
 			tmp = tmp->next;
 		}
 	}
 
 	// copy @op_str
 	if (*sp) {
 		// find the next non-space char
 		sp++;
 		for (; ((*sp == ' ') || (*sp == '\t')); sp++);
 		strncpy(insn->op_str, sp, sizeof(insn->op_str) - 1);
 		insn->op_str[sizeof(insn->op_str) - 1] = '\0';
 	} else
 		insn->op_str[0] = '\0';
 
 #endif
 }
 
 // how many bytes will we skip when encountering data (CS_OPT_SKIPDATA)?
 // this very much depends on instruction alignment requirement of each arch.
@@ -856,208 +857,208 @@ CAPSTONE_EXPORT
 size_t CAPSTONE_API cs_disasm(csh ud, const uint8_t *buffer, size_t size, uint64_t offset, size_t count, cs_insn **insn)
 {
 	struct cs_struct *handle;
 	MCInst mci;
 	uint16_t insn_size;
 	size_t c = 0, i;
 	unsigned int f = 0;	// index of the next instruction in the cache
 	cs_insn *insn_cache;	// cache contains disassembled instructions
 	void *total = NULL;
 	size_t total_size = 0;	// total size of output buffer containing all insns
 	bool r;
 	void *tmp;
 	size_t skipdata_bytes;
 	uint64_t offset_org; // save all the original info of the buffer
 	size_t size_org;
 	const uint8_t *buffer_org;
 	unsigned int cache_size = INSN_CACHE_SIZE;
 	size_t next_offset;
 
 	handle = (struct cs_struct *)(uintptr_t)ud;
 	if (!handle) {
 		// FIXME: how to handle this case:
 		// handle->errnum = CS_ERR_HANDLE;
 		return 0;
 	}
 
 	handle->errnum = CS_ERR_OK;
 
 	// reset IT block of ARM structure
 	if (handle->arch == CS_ARCH_ARM)
 		handle->ITBlock.size = 0;
 
 #ifdef CAPSTONE_USE_SYS_DYN_MEM
 	if (count > 0 && count <= INSN_CACHE_SIZE)
 		cache_size = (unsigned int) count;
 #endif
 
 	// save the original offset for SKIPDATA
 	buffer_org = buffer;
 	offset_org = offset;
 	size_org = size;
 
 	total_size = sizeof(cs_insn) * cache_size;
-	total = cs_mem_malloc(total_size);
+	total = cs_mem_calloc(sizeof(cs_insn), cache_size);
 	if (total == NULL) {
 		// insufficient memory
 		handle->errnum = CS_ERR_MEM;
 		return 0;
 	}
 
 	insn_cache = total;
 
 	while (size > 0) {
 		MCInst_Init(&mci);
 		mci.csh = handle;
 
 		// relative branches need to know the address & size of current insn
 		mci.address = offset;
 
 		if (handle->detail) {
 			// allocate memory for @detail pointer
 			insn_cache->detail = cs_mem_malloc(sizeof(cs_detail));
 		} else {
 			insn_cache->detail = NULL;
 		}
 
 		// save all the information for non-detailed mode
 		mci.flat_insn = insn_cache;
 		mci.flat_insn->address = offset;
 #ifdef CAPSTONE_DIET
 		// zero out mnemonic & op_str
 		mci.flat_insn->mnemonic[0] = '\0';
 		mci.flat_insn->op_str[0] = '\0';
 #endif
 
 		r = handle->disasm(ud, buffer, size, &mci, &insn_size, offset, handle->getinsn_info);
 		if (r) {
 			SStream ss;
 			SStream_Init(&ss);
 
 			mci.flat_insn->size = insn_size;
 
 			// map internal instruction opcode to public insn ID
 
 			handle->insn_id(handle, insn_cache, mci.Opcode);
 
 			handle->printer(&mci, &ss, handle->printer_info);
 			fill_insn(handle, insn_cache, ss.buffer, &mci, handle->post_printer, buffer);
 
 			// adjust for pseudo opcode (X86)
 			if (handle->arch == CS_ARCH_X86)
 				insn_cache->id += mci.popcode_adjust;
 
 			next_offset = insn_size;
 		} else	{
 			// encounter a broken instruction
 
 			// free memory of @detail pointer
 			if (handle->detail) {
 				cs_mem_free(insn_cache->detail);
 			}
 
 			// if there is no request to skip data, or remaining data is too small,
 			// then bail out
 			if (!handle->skipdata || handle->skipdata_size > size)
 				break;
 
 			if (handle->skipdata_setup.callback) {
 				skipdata_bytes = handle->skipdata_setup.callback(buffer_org, size_org,
 						(size_t)(offset - offset_org), handle->skipdata_setup.user_data);
 				if (skipdata_bytes > size)
 					// remaining data is not enough
 					break;
 
 				if (!skipdata_bytes)
 					// user requested not to skip data, so bail out
 					break;
 			} else
 				skipdata_bytes = handle->skipdata_size;
 
 			// we have to skip some amount of data, depending on arch & mode
 			insn_cache->id = 0;	// invalid ID for this "data" instruction
 			insn_cache->address = offset;
 			insn_cache->size = (uint16_t)skipdata_bytes;
 			memcpy(insn_cache->bytes, buffer, skipdata_bytes);
 #ifdef CAPSTONE_DIET
 			insn_cache->mnemonic[0] = '\0';
 			insn_cache->op_str[0] = '\0';
 #else
 			strncpy(insn_cache->mnemonic, handle->skipdata_setup.mnemonic,
 					sizeof(insn_cache->mnemonic) - 1);
 			skipdata_opstr(insn_cache->op_str, buffer, skipdata_bytes);
 #endif
 			insn_cache->detail = NULL;
 
 			next_offset = skipdata_bytes;
 		}
 
 		// one more instruction entering the cache
 		f++;
 
 		// one more instruction disassembled
 		c++;
 		if (count > 0 && c == count)
 			// already got requested number of instructions
 			break;
 
 		if (f == cache_size) {
 			// full cache, so expand the cache to contain incoming insns
 			cache_size = cache_size * 8 / 5; // * 1.6 ~ golden ratio
 			total_size += (sizeof(cs_insn) * cache_size);
 			tmp = cs_mem_realloc(total, total_size);
 			if (tmp == NULL) {	// insufficient memory
 				if (handle->detail) {
 					insn_cache = (cs_insn *)total;
 					for (i = 0; i < c; i++, insn_cache++)
 						cs_mem_free(insn_cache->detail);
 				}
 
 				cs_mem_free(total);
 				*insn = NULL;
 				handle->errnum = CS_ERR_MEM;
 				return 0;
 			}
 
 			total = tmp;
 			// continue to fill in the cache after the last instruction
 			insn_cache = (cs_insn *)((char *)total + sizeof(cs_insn) * c);
 
 			// reset f back to 0, so we fill in the cache from begining
 			f = 0;
 		} else
 			insn_cache++;
 
 		buffer += next_offset;
 		size -= next_offset;
 		offset += next_offset;
 	}
 
 	if (!c) {
 		// we did not disassemble any instruction
 		cs_mem_free(total);
 		total = NULL;
 	} else if (f != cache_size) {
 		// total did not fully use the last cache, so downsize it
 		tmp = cs_mem_realloc(total, total_size - (cache_size - f) * sizeof(*insn_cache));
 		if (tmp == NULL) {	// insufficient memory
 			// free all detail pointers
 			if (handle->detail) {
 				insn_cache = (cs_insn *)total;
 				for (i = 0; i < c; i++, insn_cache++)
 					cs_mem_free(insn_cache->detail);
 			}
 
 			cs_mem_free(total);
 			*insn = NULL;
 
 			handle->errnum = CS_ERR_MEM;
 			return 0;
 		}
 
 		total = tmp;
 	}
 
 	*insn = total;
 
 	return c;
 }
