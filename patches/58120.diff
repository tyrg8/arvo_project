commit 23d968d55a6e00dfc46799cfd0eb2ed02379037d
Author: Pierre-Anthony Lemieux <pal@palemieux.com>
Date:   Wed Apr 26 08:09:40 2023 -0700

    avformat/imf: fix invalid resource handling

diff --git a/libavformat/imf_cpl.c b/libavformat/imf_cpl.c
index ad84a68b13..a7cf5fa360 100644
--- a/libavformat/imf_cpl.c
+++ b/libavformat/imf_cpl.c
@@ -536,86 +536,85 @@ static int has_stereo_resources(xmlNodePtr element)
 static int push_main_audio_sequence(xmlNodePtr audio_sequence_elem, FFIMFCPL *cpl)
 {
     int ret = 0;
     AVUUID uuid;
     xmlNodePtr resource_list_elem = NULL;
     xmlNodePtr resource_elem = NULL;
     xmlNodePtr track_id_elem = NULL;
     unsigned long resource_elem_count;
     FFIMFTrackFileVirtualTrack *vt = NULL;
     void *tmp;
 
     /* read TrackID element */
     if (!(track_id_elem = ff_imf_xml_get_child_element_by_name(audio_sequence_elem, "TrackId"))) {
         av_log(NULL, AV_LOG_ERROR, "TrackId element missing from audio sequence\n");
         return AVERROR_INVALIDDATA;
     }
     if ((ret = ff_imf_xml_read_uuid(track_id_elem, uuid))) {
         av_log(NULL, AV_LOG_ERROR, "Invalid TrackId element found in audio sequence\n");
         return ret;
     }
     av_log(NULL,
            AV_LOG_DEBUG,
            "Processing IMF CPL Audio Sequence for Virtual Track " AV_PRI_UUID "\n",
            AV_UUID_ARG(uuid));
 
     /* get the main audio virtual track corresponding to the sequence */
     for (uint32_t i = 0; i < cpl->main_audio_track_count; i++) {
         if (av_uuid_equal(cpl->main_audio_tracks[i].base.id_uuid, uuid)) {
             vt = &cpl->main_audio_tracks[i];
             break;
         }
     }
 
     /* create a main audio virtual track if none exists for the sequence */
     if (!vt) {
         if (cpl->main_audio_track_count == UINT32_MAX)
             return AVERROR(ENOMEM);
         tmp = av_realloc_array(cpl->main_audio_tracks,
                                cpl->main_audio_track_count + 1,
                                sizeof(FFIMFTrackFileVirtualTrack));
         if (!tmp)
             return AVERROR(ENOMEM);
 
         cpl->main_audio_tracks = tmp;
         vt = &cpl->main_audio_tracks[cpl->main_audio_track_count];
         imf_trackfile_virtual_track_init(vt);
         cpl->main_audio_track_count++;
         av_uuid_copy(vt->base.id_uuid, uuid);
     }
 
     /* process resources */
     resource_list_elem = ff_imf_xml_get_child_element_by_name(audio_sequence_elem, "ResourceList");
     if (!resource_list_elem)
         return 0;
 
     resource_elem_count = xmlChildElementCount(resource_list_elem);
     if (resource_elem_count > UINT32_MAX
         || vt->resource_count > UINT32_MAX - resource_elem_count)
         return AVERROR(ENOMEM);
     tmp = av_fast_realloc(vt->resources,
                           &vt->resources_alloc_sz,
                           (vt->resource_count + resource_elem_count)
                               * sizeof(FFIMFTrackFileResource));
     if (!tmp) {
         av_log(NULL, AV_LOG_ERROR, "Cannot allocate Main Audio Resources\n");
         return AVERROR(ENOMEM);
     }
     vt->resources = tmp;
 
     resource_elem = xmlFirstElementChild(resource_list_elem);
     while (resource_elem) {
         imf_trackfile_resource_init(&vt->resources[vt->resource_count]);
         ret = fill_trackfile_resource(resource_elem,
                                       &vt->resources[vt->resource_count],
                                       cpl);
-        vt->resource_count++;
-        if (ret) {
+        if (ret)
             av_log(NULL, AV_LOG_ERROR, "Invalid Resource\n");
-            continue;
-        }
+        else
+            vt->resource_count++;
 
         resource_elem = xmlNextElementSibling(resource_elem);
     }
 
     return ret;
 }
@@ -623,82 +622,81 @@ static int push_main_audio_sequence(xmlNodePtr audio_sequence_elem, FFIMFCPL *cp
 static int push_main_image_2d_sequence(xmlNodePtr image_sequence_elem, FFIMFCPL *cpl)
 {
     int ret = 0;
     AVUUID uuid;
     xmlNodePtr resource_list_elem = NULL;
     xmlNodePtr resource_elem = NULL;
     xmlNodePtr track_id_elem = NULL;
     void *tmp;
     unsigned long resource_elem_count;
 
     /* skip stereoscopic resources */
     if (has_stereo_resources(image_sequence_elem)) {
         av_log(NULL, AV_LOG_ERROR, "Stereoscopic 3D image virtual tracks not supported\n");
         return AVERROR_PATCHWELCOME;
     }
 
     /* read TrackId element*/
     if (!(track_id_elem = ff_imf_xml_get_child_element_by_name(image_sequence_elem, "TrackId"))) {
         av_log(NULL, AV_LOG_ERROR, "TrackId element missing from audio sequence\n");
         return AVERROR_INVALIDDATA;
     }
     if ((ret = ff_imf_xml_read_uuid(track_id_elem, uuid))) {
         av_log(NULL, AV_LOG_ERROR, "Invalid TrackId element found in audio sequence\n");
         return ret;
     }
 
     /* create main image virtual track if one does not exist */
     if (!cpl->main_image_2d_track) {
         cpl->main_image_2d_track = av_malloc(sizeof(FFIMFTrackFileVirtualTrack));
         if (!cpl->main_image_2d_track)
             return AVERROR(ENOMEM);
         imf_trackfile_virtual_track_init(cpl->main_image_2d_track);
         av_uuid_copy(cpl->main_image_2d_track->base.id_uuid, uuid);
 
     } else if (!av_uuid_equal(cpl->main_image_2d_track->base.id_uuid, uuid)) {
         av_log(NULL, AV_LOG_ERROR, "Multiple MainImage virtual tracks found\n");
         return AVERROR_INVALIDDATA;
     }
     av_log(NULL,
            AV_LOG_DEBUG,
            "Processing IMF CPL Main Image Sequence for Virtual Track " AV_PRI_UUID "\n",
            AV_UUID_ARG(uuid));
 
     /* process resources */
     resource_list_elem = ff_imf_xml_get_child_element_by_name(image_sequence_elem, "ResourceList");
     if (!resource_list_elem)
         return 0;
 
     resource_elem_count = xmlChildElementCount(resource_list_elem);
     if (resource_elem_count > UINT32_MAX
         || cpl->main_image_2d_track->resource_count > UINT32_MAX - resource_elem_count
         || (cpl->main_image_2d_track->resource_count + resource_elem_count)
             > INT_MAX / sizeof(FFIMFTrackFileResource))
         return AVERROR(ENOMEM);
     tmp = av_fast_realloc(cpl->main_image_2d_track->resources,
                           &cpl->main_image_2d_track->resources_alloc_sz,
                           (cpl->main_image_2d_track->resource_count + resource_elem_count)
                               * sizeof(FFIMFTrackFileResource));
     if (!tmp) {
         av_log(NULL, AV_LOG_ERROR, "Cannot allocate Main Image Resources\n");
         return AVERROR(ENOMEM);
     }
     cpl->main_image_2d_track->resources = tmp;
 
     resource_elem = xmlFirstElementChild(resource_list_elem);
     while (resource_elem) {
         imf_trackfile_resource_init(
             &cpl->main_image_2d_track->resources[cpl->main_image_2d_track->resource_count]);
         ret = fill_trackfile_resource(resource_elem,
                                       &cpl->main_image_2d_track->resources[cpl->main_image_2d_track->resource_count],
                                       cpl);
-        cpl->main_image_2d_track->resource_count++;
-        if (ret) {
+        if (ret)
             av_log(NULL, AV_LOG_ERROR, "Invalid Resource\n");
-            continue;
-        }
+        else
+            cpl->main_image_2d_track->resource_count++;
 
         resource_elem = xmlNextElementSibling(resource_elem);
     }
 
     return 0;
 }
