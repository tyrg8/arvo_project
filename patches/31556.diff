commit 4f6d42ab4b25e781dad94c5324dab8a4dbb702ad
Author: Nathan Moinvaziri <nathan@nathanm.com>
Date:   Mon Mar 1 20:06:43 2021 -0800

    Fixed ASAN heap-buffer-overflow when reading chunk offset in frame.
    https://oss-fuzz.com/testcase-detail/4753813014708224

diff --git a/blosc/frame.c b/blosc/frame.c
index 45fa58fe..43af22eb 100644
--- a/blosc/frame.c
+++ b/blosc/frame.c
@@ -963,81 +963,81 @@ int64_t frame_from_schunk(blosc2_schunk *schunk, blosc2_frame_s *frame) {
 // Get the compressed data offsets
 uint8_t* get_coffsets(blosc2_frame_s *frame, int32_t header_len, int64_t cbytes, int32_t *off_cbytes) {
   int32_t chunk_cbytes;
   int rc;
 
   if (frame->coffsets != NULL) {
     if (off_cbytes != NULL) {
       rc = blosc2_cbuffer_sizes(frame->coffsets, NULL, &chunk_cbytes, NULL);
       if (rc < 0) {
         return NULL;
       }
       *off_cbytes = (int32_t)chunk_cbytes;
     }
     return frame->coffsets;
   }
   if (frame->cframe != NULL) {
     int64_t off_pos = header_len;
     if (cbytes < INT64_MAX - header_len) {
       off_pos += cbytes;
     }
     // Check that there is enough room to read Blosc header
     if (off_pos < 0 || off_pos > INT64_MAX - BLOSC_EXTENDED_HEADER_LENGTH ||
         off_pos + BLOSC_EXTENDED_HEADER_LENGTH > frame->len) {
       BLOSC_TRACE_ERROR("Cannot read the offsets outside of frame boundary.");
       return NULL;
     }
     // For in-memory frames, the coffset is just one pointer away
     uint8_t* off_start = frame->cframe + off_pos;
     if (off_cbytes != NULL) {
       rc = blosc2_cbuffer_sizes(off_start, NULL, &chunk_cbytes, NULL);
       if (rc < 0) {
         return NULL;
       }
       *off_cbytes = (int32_t)chunk_cbytes;
-      if (*off_cbytes < 0 || *off_cbytes > frame->len) {
+      if (*off_cbytes < 0 || off_pos + *off_cbytes > frame->len) {
         BLOSC_TRACE_ERROR("Cannot read the cbytes outside of frame boundary.");
         return NULL;
       }
     }
     return off_start;
   }
 
   int64_t trailer_offset = get_trailer_offset(frame, header_len, true);
 
   if (trailer_offset < BLOSC_EXTENDED_HEADER_LENGTH || trailer_offset + FRAME_TRAILER_MINLEN > frame->len) {
     BLOSC_TRACE_ERROR("Cannot read the trailer out of the frame.");
     return NULL;
   }
 
   int32_t coffsets_cbytes;
   if (frame->sframe) {
     coffsets_cbytes = (int32_t)(trailer_offset - (header_len + 0));
   }
   else {
     coffsets_cbytes = (int32_t)(trailer_offset - (header_len + cbytes));
   }
 
   if (off_cbytes != NULL) {
     *off_cbytes = coffsets_cbytes;
   }
 
   FILE* fp = NULL;
   uint8_t* coffsets = malloc((size_t)coffsets_cbytes);
   if (frame->sframe) {
     fp = sframe_open_index(frame->urlpath, "rb");
     fseek(fp, header_len + 0, SEEK_SET);
   }
   else {
     fp = fopen(frame->urlpath, "rb");
     fseek(fp, header_len + cbytes, SEEK_SET);
   }
   size_t rbytes = fread(coffsets, 1, (size_t)coffsets_cbytes, fp);
   fclose(fp);
   if (rbytes != (size_t)coffsets_cbytes) {
     BLOSC_TRACE_ERROR("Cannot read the offsets out of the frame.");
     free(coffsets);
     return NULL;
   }
   frame->coffsets = coffsets;
   return coffsets;
 }
