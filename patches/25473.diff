commit 8dd136ac240580b63ce509a1379a109026b93b5e
Author: Jakub Jelen <jjelen@redhat.com>
Date:   Mon Sep 7 13:33:48 2020 +0200

    pkcs15-itacns: Do not access behind the allocated buffer boundary
    
    Thanks oss-fuzz
    
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=25473

diff --git a/src/libopensc/pkcs15-itacns.c b/src/libopensc/pkcs15-itacns.c
index 11de4538..6f7523ae 100644
--- a/src/libopensc/pkcs15-itacns.c
+++ b/src/libopensc/pkcs15-itacns.c
@@ -388,85 +388,98 @@ static int hextoint(char *src, unsigned int len)
 }
 
 static int get_name_from_EF_DatiPersonali(unsigned char *EFdata,
-	char name[], int name_len)
+	size_t EFdata_len, char name[], int name_len)
 {
+	const unsigned int EF_personaldata_maxlen = 400;
+	const unsigned int tlv_length_size = 6;
+	char *file = NULL;
+	int file_size;
+
 	/*
 	 * Bytes 0-5 contain the ASCII encoding of the following TLV
 	 * structure's total size, in base 16.
 	 */
-
-	const unsigned int EF_personaldata_maxlen = 400;
-	const unsigned int tlv_length_size = 6;
-	char *file = (char*)&EFdata[tlv_length_size];
-	int file_size = hextoint((char*)EFdata, tlv_length_size);
+	if (EFdata_len < tlv_length_size) {
+		/* We need at least 6 bytes for file length here */
+		return -1;
+	}
+	file_size = hextoint((char*)EFdata, tlv_length_size);
+	if (EFdata_len < (file_size + tlv_length_size)) {
+		/* Inconsistent external file length and internal file length
+		 * suggests we are trying to process junk data.
+		 * If the internal data length is shorter, the data can be padded,
+		 * but we should be fine as we will not go behind the buffer limits */
+		return -1;
+	}
+	file = (char*)&EFdata[tlv_length_size];
 
 	enum {
 		f_issuer_code = 0,
 		f_issuing_date,
 		f_expiry_date,
 		f_last_name,
 		f_first_name,
 		f_birth_date,
 		f_sex,
 		f_height,
 		f_codice_fiscale,
 		f_citizenship_code,
 		f_birth_township_code,
 		f_birth_country,
 		f_birth_certificate,
 		f_residence_township_code,
 		f_residence_address,
 		f_expat_notes
 	};
 
 	/* Read the fields up to f_first_name */
 	struct {
 		int len;
 		char value[256];
 	} fields[f_first_name+1];
 	int i=0; /* offset inside the file */
 	int f; /* field number */
 
-	if(file_size < 0)
+	if (file_size < 0)
 		return -1;
 
 	/*
 	 * This shouldn't happen, but let us be protected against wrong
 	 * or malicious cards
 	 */
 	if(file_size > (int)EF_personaldata_maxlen - (int)tlv_length_size)
 		file_size = EF_personaldata_maxlen - tlv_length_size;
 
 
 	memset(fields, 0, sizeof(fields));
 
 	for(f=0; f<f_first_name+1; f++) {
 		int field_size;
 		/* Don't read beyond the allocated buffer */
 		if(i > file_size)
 			return -1;
 
 		field_size = hextoint((char*) &file[i], 2);
 		if((field_size < 0) || (field_size+i > file_size))
 			return -1;
 
 		i += 2;
 
 		if(field_size >= (int)sizeof(fields[f].value))
 			return -1;
 
 		fields[f].len = field_size;
 		strncpy(fields[f].value, &file[i], field_size);
 		fields[f].value[field_size] = '\0';
 		i += field_size;
 	}
 
 	if (fields[f_first_name].len + fields[f_last_name].len + 1 >= name_len)
 		return -1;
 
 	/* the lengths are already checked that they will fit in buffer */
 	snprintf(name, name_len, "%.*s %.*s",
 		fields[f_first_name].len, fields[f_first_name].value,
 		fields[f_last_name].len, fields[f_last_name].value);
 	return 0;
 }
@@ -474,92 +487,92 @@ static int get_name_from_EF_DatiPersonali(unsigned char *EFdata,
 static int itacns_add_data_files(sc_pkcs15_card_t *p15card)
 {
 	const size_t array_size =
 		sizeof(itacns_data_files)/sizeof(itacns_data_files[0]);
 	unsigned int i;
 	int rv;
 	sc_pkcs15_data_t *p15_personaldata = NULL;
 	sc_pkcs15_data_info_t dinfo;
 	struct sc_pkcs15_object *objs[32];
 	struct sc_pkcs15_data_info *cinfo;
 
 	for(i=0; i < array_size; i++) {
 		sc_path_t path;
 		sc_pkcs15_data_info_t data;
 		sc_pkcs15_object_t    obj;
 
 		if (itacns_data_files[i].cie_only &&
 			p15card->card->type != SC_CARD_TYPE_ITACNS_CIE_V2)
 			continue;
 
 		sc_format_path(itacns_data_files[i].path, &path);
 
 		memset(&data, 0, sizeof(data));
 		memset(&obj, 0, sizeof(obj));
 		strlcpy(data.app_label, itacns_data_files[i].label,
 			sizeof(data.app_label));
 		strlcpy(obj.label, itacns_data_files[i].label,
 			sizeof(obj.label));
 		data.path = path;
 		rv = sc_pkcs15emu_add_data_object(p15card, &obj, &data);
 		LOG_TEST_RET(p15card->card->ctx, rv,
 			"Could not add data file");
 	}
 
 	/*
 	 * If we got this far, we can read the Personal Data file and glean
 	 * the user's full name. Thus we can use it to put together a
 	 * user-friendlier card name.
 	 */
 	memset(&dinfo, 0, sizeof(dinfo));
 	strlcpy(dinfo.app_label, "EF_DatiPersonali", sizeof(dinfo.app_label));
 
 	/* Find EF_DatiPersonali */
 
 	rv = sc_pkcs15_get_objects(p15card, SC_PKCS15_TYPE_DATA_OBJECT,
 		objs, 32);
 	if(rv < 0) {
 		sc_log(p15card->card->ctx,
 			"Data enumeration failed");
 		return SC_SUCCESS;
 	}
 
 	for(i=0; i<32; i++) {
 		cinfo = (struct sc_pkcs15_data_info *) objs[i]->data;
 		if(!strcmp("EF_DatiPersonali", objs[i]->label))
 			break;
 	}
 
 	if(i>=32) {
 		sc_log(p15card->card->ctx,
 			"Could not find EF_DatiPersonali: "
 			"keeping generic card name");
 		return SC_SUCCESS;
 	}
 
 	rv = sc_pkcs15_read_data_object(p15card, cinfo, &p15_personaldata);
 	if (rv) {
 		sc_log(p15card->card->ctx,
 			"Could not read EF_DatiPersonali: "
 			"keeping generic card name");
 		return SC_SUCCESS;
 	}
 
 	if (p15_personaldata->data) {
 		char fullname[160];
 		if (get_name_from_EF_DatiPersonali(p15_personaldata->data,
-			fullname, sizeof(fullname))) {
+			p15_personaldata->data_len, fullname, sizeof(fullname))) {
 			sc_log(p15card->card->ctx,
 				"Could not parse EF_DatiPersonali: "
 				"keeping generic card name");
 			sc_pkcs15_free_data_object(p15_personaldata);
 			free(cinfo->data.value);
 			cinfo->data.value = NULL;
 			return SC_SUCCESS;
 		}
 		set_string(&p15card->tokeninfo->label, fullname);
 	}
 	free(cinfo->data.value);
 	cinfo->data.value = NULL;
 	sc_pkcs15_free_data_object(p15_personaldata);
 	return SC_SUCCESS;
 }
