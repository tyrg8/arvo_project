commit f75ee893a2cc0edbcc5d7d9fc898654eb31785ac
Author: Marti Maria <marti.maria@littlecms.com>
Date:   Sun Dec 3 11:52:06 2023 +0100

    Final changes to 2.16
    
    2.16 is closed

diff --git a/include/lcms2.h b/include/lcms2.h
index 1a7048b..7c72047 100644
--- a/include/lcms2.h
+++ b/include/lcms2.h
@@ -1,81 +1,81 @@
 //---------------------------------------------------------------------------------
 //
 //  Little Color Management System
 //  Copyright (c) 1998-2023 Marti Maria Saguer
 //
 // Permission is hereby granted, free of charge, to any person obtaining
 // a copy of this software and associated documentation files (the "Software"),
 // to deal in the Software without restriction, including without limitation
 // the rights to use, copy, modify, merge, publish, distribute, sublicense,
 // and/or sell copies of the Software, and to permit persons to whom the Software
 // is furnished to do so, subject to the following conditions:
 //
 // The above copyright notice and this permission notice shall be included in
 // all copies or substantial portions of the Software.
 //
 // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 // EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 // THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 // NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 // LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 // OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 //
 //---------------------------------------------------------------------------------
 //
-// Version 2.16rc1
+// Version 2.16
 //
 
 #ifndef _lcms2_H
 
 // ********** Configuration toggles ****************************************
 
 // Uncomment this one if you are using big endian machines
 // #define CMS_USE_BIG_ENDIAN   1
 
 // Uncomment this one if your compiler/machine does NOT support the
 // "long long" type.
 // #define CMS_DONT_USE_INT64        1
 
 // Uncomment this if your compiler doesn't work with fast floor function
 // #define CMS_DONT_USE_FAST_FLOOR 1
 
 // Uncomment this line if you want lcms to use the black point tag in profile,
 // if commented, lcms will compute the black point by its own.
 // It is safer to leave it commented out
 // #define CMS_USE_PROFILE_BLACK_POINT_TAG    1
 
 // Uncomment this line if you are compiling as C++ and want a C++ API
 // #define CMS_USE_CPP_API
 
 // Uncomment this line if you need strict CGATS syntax. Makes CGATS files to
 // require "KEYWORD" on undefined identifiers, keep it commented out unless needed
 // #define CMS_STRICT_CGATS  1
 
 // Uncomment to get rid of the tables for "half" float support
 // #define CMS_NO_HALF_SUPPORT 1
 
 // Uncomment to get rid of pthreads/windows dependency
 // #define CMS_NO_PTHREADS  1
 
 // Uncomment this for special windows mutex initialization (see lcms2_internal.h)
 // #define CMS_RELY_ON_WINDOWS_STATIC_MUTEX_INIT
 
 // Uncomment this to remove the "register" storage class
 // #define CMS_NO_REGISTER_KEYWORD 1
 
 // ********** End of configuration toggles ******************************
 
 // Needed for streams
 #include <stdio.h>
 
 // Needed for portability (C99 per 7.1.2)
 #include <limits.h>
 #include <time.h>
 #include <stddef.h>
 
 #ifndef CMS_USE_CPP_API
 #   ifdef __cplusplus
 #       if __cplusplus >= 201703L
 #            define CMS_NO_REGISTER_KEYWORD 1  
 #       endif
diff --git a/src/cmsps2.c b/src/cmsps2.c
index cef22b9..eea1629 100644
--- a/src/cmsps2.c
+++ b/src/cmsps2.c
@@ -642,39 +642,42 @@ static
 void WriteCLUT(cmsIOHANDLER* m, cmsStage* mpe, const char* PreMaj,
                                                const char* PostMaj,
                                                const char* PreMin,
                                                const char* PostMin,
                                                int FixWhite,
                                                cmsColorSpaceSignature ColorSpace)
 {
     cmsUInt32Number i;
     cmsPsSamplerCargo sc;
 
     sc.FirstComponent = -1;
     sc.SecondComponent = -1;
     sc.Pipeline = (_cmsStageCLutData *) mpe ->Data;
     sc.m   = m;
     sc.PreMaj = PreMaj;
     sc.PostMaj= PostMaj;
 
     sc.PreMin   = PreMin;
     sc.PostMin  = PostMin;
     sc.FixWhite = FixWhite;
     sc.ColorSpace = ColorSpace;
 
-    _cmsIOPrintf(m, "[");
+    if (sc.Pipeline != NULL && sc.Pipeline->Params != NULL) {
 
-    for (i=0; i < sc.Pipeline->Params->nInputs; i++)
-        _cmsIOPrintf(m, " %d ", sc.Pipeline->Params->nSamples[i]);
+        _cmsIOPrintf(m, "[");
 
-    _cmsIOPrintf(m, " [\n");
+        for (i = 0; i < sc.Pipeline->Params->nInputs; i++)
+            _cmsIOPrintf(m, " %d ", sc.Pipeline->Params->nSamples[i]);
 
-    cmsStageSampleCLut16bit(mpe, OutputValueSampler, (void*) &sc, SAMPLER_INSPECT);
+        _cmsIOPrintf(m, " [\n");
 
-    _cmsIOPrintf(m, PostMin);
-    _cmsIOPrintf(m, PostMaj);
-    _cmsIOPrintf(m, "] ");
+        cmsStageSampleCLut16bit(mpe, OutputValueSampler, (void*)&sc, SAMPLER_INSPECT);
+
+        _cmsIOPrintf(m, PostMin);
+        _cmsIOPrintf(m, PostMaj);
+        _cmsIOPrintf(m, "] ");
+    }
 
 }
 
 
 // Dumps CIEBasedA Color Space Array
diff --git a/src/cmstypes.c b/src/cmstypes.c
index 214bced..8eabe1f 100644
--- a/src/cmstypes.c
+++ b/src/cmstypes.c
@@ -925,84 +925,84 @@ static
 void *Type_Text_Description_Read(struct _cms_typehandler_struct* self, cmsIOHANDLER* io, cmsUInt32Number* nItems, cmsUInt32Number SizeOfTag)
 {
     char* Text = NULL;
     wchar_t* UnicodeString = NULL;
     cmsMLU* mlu = NULL;
     cmsUInt32Number  AsciiCount;
     cmsUInt32Number  i, UnicodeCode, UnicodeCount;
     cmsUInt16Number  ScriptCodeCode, Dummy;
     cmsUInt8Number   ScriptCodeCount;
 
     *nItems = 0;
 
     //  One dword should be there
     if (SizeOfTag < sizeof(cmsUInt32Number)) return NULL;
 
     // Read len of ASCII
     if (!_cmsReadUInt32Number(io, &AsciiCount)) return NULL;
     SizeOfTag -= sizeof(cmsUInt32Number);
 
     // Check for size
     if (SizeOfTag < AsciiCount) return NULL;
 
     // All seems Ok, allocate the container
     mlu = cmsMLUalloc(self ->ContextID, 2);
     if (mlu == NULL) return NULL;
 
     // As many memory as size of tag
     Text = (char*) _cmsMalloc(self ->ContextID, AsciiCount + 1);
     if (Text == NULL) goto Error;
 
     // Read it
     if (io ->Read(io, Text, sizeof(char), AsciiCount) != AsciiCount) goto Error;
     SizeOfTag -= AsciiCount;
 
     // Make sure there is a terminator
     Text[AsciiCount] = 0;
 
     // Set the MLU entry. From here we can be tolerant to wrong types
     if (!cmsMLUsetASCII(mlu, cmsNoLanguage, cmsNoCountry, Text)) goto Error;
     _cmsFree(self ->ContextID, (void*) Text);
     Text = NULL;
 
     // Skip Unicode code
     if (SizeOfTag < 2* sizeof(cmsUInt32Number)) goto Done;
     if (!_cmsReadUInt32Number(io, &UnicodeCode)) goto Done;
     if (!_cmsReadUInt32Number(io, &UnicodeCount)) goto Done;
     SizeOfTag -= 2* sizeof(cmsUInt32Number);
 
     if (UnicodeCount == 0 || SizeOfTag < UnicodeCount*sizeof(cmsUInt16Number)) goto Done;
 
-    UnicodeString = (wchar_t*)_cmsMalloc(self->ContextID, (UnicodeCount + 1) * sizeof(wchar_t));
+    UnicodeString = (wchar_t*)_cmsMallocZero(self->ContextID, (UnicodeCount + 1) * sizeof(wchar_t));
     if (UnicodeString == NULL) goto Done;
 
     if (!_cmsReadWCharArray(io, UnicodeCount, UnicodeString)) {
         _cmsFree(self->ContextID, (void*)UnicodeString);
         goto Done;
     }
 
     UnicodeString[UnicodeCount] = 0;
 
     if (!cmsMLUsetWide(mlu, cmsV2Unicode, cmsV2Unicode, UnicodeString)) {
         _cmsFree(self->ContextID, (void*)UnicodeString);
         goto Done;
     }
 
     _cmsFree(self->ContextID, (void*)UnicodeString);
     UnicodeString = NULL;
 
     SizeOfTag -= UnicodeCount*sizeof(cmsUInt16Number);
 
     // Skip ScriptCode code if present. Some buggy profiles does have less
     // data that strictly required. We need to skip it as this type may come
     // embedded in other types.
 
     if (SizeOfTag >= sizeof(cmsUInt16Number) + sizeof(cmsUInt8Number) + 67) {
 
         if (!_cmsReadUInt16Number(io, &ScriptCodeCode)) goto Done;
         if (!_cmsReadUInt8Number(io,  &ScriptCodeCount)) goto Done;
 
         // Skip rest of tag
         for (i=0; i < 67; i++) {
             if (!io ->Read(io, &Dummy, sizeof(cmsUInt8Number), 1)) goto Error;
         }
     }
