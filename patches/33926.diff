commit 3fffece5e9ac9416e3dfccfdaacae2b70aa865a8
Merge: 7252e0c87 1bc7f51b4
Author: Ann Priestman <apriestman@basistech.com>
Date:   Tue Oct 12 09:42:48 2021 -0400

    Merge pull request #2566 from joachimmetz/fix_oob_readwrite1
    
    Fixed multiple bounds issues in tsk_UTF16toUTF8 and iso9660_load_inodes_dir

diff --git a/tsk/base/tsk_unicode.c b/tsk/base/tsk_unicode.c
index da34c74ae..61f5d029c 100644
--- a/tsk/base/tsk_unicode.c
+++ b/tsk/base/tsk_unicode.c
@@ -146,112 +146,116 @@ TSKConversionResult
 tsk_UTF16toUTF8(TSK_ENDIAN_ENUM endian, const UTF16 ** sourceStart,
     const UTF16 * sourceEnd, UTF8 ** targetStart,
     UTF8 * targetEnd, TSKConversionFlags flags)
 {
     TSKConversionResult result = TSKconversionOK;
     const UTF16 *source = *sourceStart;
     UTF8 *target = *targetStart;
+
     while (source < sourceEnd) {
         UTF32 ch;
         unsigned short bytesToWrite = 0;
         const UTF32 byteMask = 0xBF;
         const UTF32 byteMark = 0x80;
         const UTF16 *oldSource = source;        /* In case we have to back up because of target overflow. */
+
+        // Need at least 2 bytes
         ch = tsk_getu16(endian, (uint8_t *) source);
         source++;
 
         /* If we have a surrogate pair, convert to UTF32 first. */
         if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {
             /* If the 16 bits following the high surrogate are in the source buffer... */
             if (source < sourceEnd) {
+                // Need at least 2 bytes
                 UTF32 ch2 = tsk_getu16(endian, (uint8_t *) source);
                 ++source;
 
                 /* If it's a low surrogate, convert to UTF32. */
                 if (ch2 >= UNI_SUR_LOW_START && ch2 <= UNI_SUR_LOW_END) {
                     ch = ((ch - UNI_SUR_HIGH_START) << halfShift)
                         + (ch2 - UNI_SUR_LOW_START) + halfBase;
                 }
                 else if (flags == TSKstrictConversion) {        /* it's an unpaired high surrogate */
                     result = TSKsourceIllegal;
                     break;
                 }
                 // replace with another character
                 else {
                     ch = '^';
                 }
             }
             else {              /* We don't have the 16 bits following the high surrogate. */
                 --source;       /* return to the high surrogate */
                 result = TSKsourceExhausted;
                 break;
             }
         }
         /* UTF-16 surrogate values are illegal in UTF-32 */
         else if (ch >= UNI_SUR_LOW_START && ch <= UNI_SUR_LOW_END) {
             if (flags == TSKstrictConversion) {
                 --source;       /* return to the illegal value itself */
                 result = TSKsourceIllegal;
                 break;
             }
             // replace with another character
             else {
                 ch = '^';
             }
         }
 
         /* Figure out how many bytes the result will require */
         if (ch < (UTF32) 0x80) {
             bytesToWrite = 1;
         }
         else if (ch < (UTF32) 0x800) {
             bytesToWrite = 2;
         }
         else if (ch < (UTF32) 0x10000) {
             bytesToWrite = 3;
         }
         else if (ch < (UTF32) 0x110000) {
             bytesToWrite = 4;
         }
         else {
             bytesToWrite = 3;
             ch = TSK_UNI_REPLACEMENT_CHAR;
         }
 
         target += bytesToWrite;
         if (target > targetEnd) {
             source = oldSource; /* Back up source pointer! */
             target -= bytesToWrite;
             result = TSKtargetExhausted;
             break;
         }
         switch (bytesToWrite) { /* note: everything falls through. */
         case 4:
             *--target = (UTF8) ((ch | byteMark) & byteMask);
             ch >>= 6;
         case 3:
             *--target = (UTF8) ((ch | byteMark) & byteMask);
             ch >>= 6;
         case 2:
             *--target = (UTF8) ((ch | byteMark) & byteMask);
             ch >>= 6;
         case 1:
             *--target = (UTF8) (ch | firstByteMark[bytesToWrite]);
         }
         target += bytesToWrite;
     }
     *sourceStart = source;
     *targetStart = target;
     return result;
 }
 
 
 /** 
 * \ingroup baselib
 * Convert a UTF-16 string in local endian ordering to UTF-8.  
 * @param sourceStart Pointer to pointer to start of UTF-16 string.  Will be updated to last char processed.
 * @param sourceEnd Pointer to one entry past end of UTF-16 string
 * @param targetStart Pointer to pointer to place where UTF-8 string should be written.  Will be updated to next place to write to. 
 * @param targetEnd Pointer to end of UTF-8 buffer
 * @param flags Flags used during conversion 
 * @returns error code
 */
diff --git a/tsk/fs/iso9660.c b/tsk/fs/iso9660.c
index 381551763..6fa2c2c1e 100755
--- a/tsk/fs/iso9660.c
+++ b/tsk/fs/iso9660.c
@@ -427,371 +427,385 @@ static int
 iso9660_load_inodes_dir(TSK_FS_INFO * fs, TSK_OFF_T a_offs, int count,
     int ctype, const char *a_fn, uint8_t is_first)
 {
     ISO_INFO *iso = (ISO_INFO *) fs;
     int s_cnt = 1;              // count of sectors needed for dir
     TSK_OFF_T s_offs = a_offs;  // offset for sector reads
     int i;
 
     if (tsk_verbose)
         tsk_fprintf(stderr,
             "iso9660_load_inodes_dir: offs: %" PRIdOFF
             " count: %d ctype: %d fn: %s\n", a_offs, count, ctype, a_fn);
 
     // cycle through each sector -- entries will not cross them
     for (i = 0; i < s_cnt; i++) {
         ssize_t cnt1;
         int b_offs;             // offset in buffer
         char buf[ISO9660_SSIZE_B];
 
         cnt1 = tsk_fs_read(fs, s_offs, buf, ISO9660_SSIZE_B);
         if (cnt1 != ISO9660_SSIZE_B) {
             if (cnt1 >= 0) {
                 tsk_error_reset();
                 tsk_error_set_errno(TSK_ERR_FS_READ);
             }
             tsk_error_set_errstr2("iso_get_dentries");
             return -1;
         }
 
         /* process the directory entries */
         for (b_offs = 0; b_offs < ISO9660_SSIZE_B;) {
             iso9660_inode_node *in_node = NULL;
             iso9660_dentry *dentry;
 
             dentry = (iso9660_dentry *) & buf[b_offs];
 
             if (dentry->entry_len == 0) {
                 b_offs += 2;
                 continue;
             }
             // sanity checks on entry_len
             else if (dentry->entry_len < sizeof(iso9660_dentry)) {
                 if (tsk_verbose)
                     tsk_fprintf(stderr,
                                 "iso9660_load_inodes_dir: entry length is shorter than dentry, bailing\n");
                 break;
             }
             else if (b_offs + dentry->entry_len > ISO9660_SSIZE_B) {
                 if (tsk_verbose)
                     tsk_fprintf(stderr,
                                 "iso9660_load_inodes_dir: entry is longer than sector, bailing\n");
                 break;
             }
 
             /* when processing the other volume descriptor directories, we ignore the
              * directories because we have no way of detecting if it is a duplicate of
              * a directory from the other volume descriptor (they use different blocks).
              * We will see the contents of this directory from the path table anyway. */
             if ((dentry->flags & ISO9660_FLAG_DIR) && (is_first == 0)) {
                 b_offs += dentry->entry_len;
                 continue;
             }
 
             // allocate a node for this entry
             in_node = (iso9660_inode_node *)
                 tsk_malloc(sizeof(iso9660_inode_node));
             if (in_node == NULL) {
                 return -1;
             }
 
             // the first entry is for the current directory
             if ((i == 0) && (b_offs == 0)) {
                 // should have no name or '.'
                 if (dentry->fi_len > 1) {
                     if (tsk_verbose)
                         tsk_fprintf(stderr,
                                     "iso9660_load_inodes_dir: first entry has name length > 1\n");
                     free(in_node);
                     in_node = NULL;
                     b_offs += dentry->entry_len;
                     continue;
                 }
 
                 /* find how many more sectors are in the directory */
                 s_cnt =
                     tsk_getu32(fs->endian,
                     dentry->data_len_m) / ISO9660_SSIZE_B;
                 if (tsk_verbose)
                     tsk_fprintf(stderr, "iso9660_load_inodes_dir: %d number of additional sectors\n", s_cnt);
                 
                 // @@@ Should have a sanity check here on s_cnt, but I'm not sure what it would be...
 
                 /* use the specified name instead of "." */
                 if (strlen(a_fn) > ISO9660_MAXNAMLEN_STD) {
                     tsk_error_reset();
                     tsk_error_set_errno(TSK_ERR_FS_ARG);
                     tsk_error_set_errstr
                         ("iso9660_load_inodes_dir: Name argument specified is too long");
                     free(in_node);
                     return -1;
                 }
                 strncpy(in_node->inode.fn, a_fn, ISO9660_MAXNAMLEN_STD + 1);
 
                 /* for all directories except the root, we skip processing the "." and ".." entries because
                  * they duplicate the other entires and the dent_walk code will rely on the offset
                  * for the entry in the parent directory. */
                 if (count != 0) {
                     free(in_node);
                     in_node = NULL;
                     b_offs += dentry->entry_len;
                     dentry = (iso9660_dentry *) & buf[b_offs];
                     b_offs += dentry->entry_len;
                     continue;
                 }
             }
             else {
                 char *file_ver;
                 
                 // the entry has a UTF-16 name
                 if (ctype == ISO9660_CTYPE_UTF16) {
                     UTF16 *name16;
                     UTF8 *name8;
                     int retVal;
 
                     if (dentry->entry_len < sizeof(iso9660_dentry) + dentry->fi_len) {
                         if (tsk_verbose)
                             tsk_fprintf(stderr,
                                         "iso9660_load_inodes_dir: UTF-16 name length is too large, bailing\n");
                         free(in_node);
                         in_node = NULL;
                         break;
                     }
+                    if (b_offs >= ISO9660_SSIZE_B - sizeof(iso9660_dentry)) {
+                        if (tsk_verbose)
+                            tsk_fprintf(stderr,
+                                        "iso9660_load_inodes_dir: b_offs out of bounds, bailing\n");
+                        free(in_node);
+                        in_node = NULL;
+                        break;
+                    }
+
 
                     name16 =
                         (UTF16 *) & buf[b_offs + sizeof(iso9660_dentry)];
                     // the name is in UTF-16 BE -- convert to LE if needed
                     if (fs->endian & TSK_LIT_ENDIAN) {
                         int a;
 
                         for (a = 0; a < dentry->fi_len / 2; a++) {
                             name16[a] = ((name16[a] & 0xff) << 8) +
                                 ((name16[a] & 0xff00) >> 8);
                         }
                     }
                     name8 = (UTF8 *) in_node->inode.fn;
 
+                    if ((dentry->fi_len % 2) != 0 || dentry->fi_len > ISO9660_SSIZE_B - sizeof(iso9660_dentry) - b_offs) {
+                        if (tsk_verbose)
+                            tsk_fprintf(stderr,
+                                        "iso9660_load_inodes_dir: UTF-16 name length out of bounds, bailing\n");
+                        free(in_node);
+                        in_node = NULL;
+                        break;
+                    }
                     retVal =
                         tsk_UTF16toUTF8(fs->endian,
-                        (const UTF16 **) &name16,
-                        (UTF16 *) & buf[b_offs + sizeof(iso9660_dentry) +
-                            dentry->fi_len], &name8,
-                        (UTF8 *) ((uintptr_t) & in_node->inode.
-                            fn[ISO9660_MAXNAMLEN_STD]),
+                        (const UTF16 **) &name16, (UTF16 *) & buf[b_offs + sizeof(iso9660_dentry) + dentry->fi_len],
+                        &name8, (UTF8 *) ((uintptr_t) & in_node->inode.fn[ISO9660_MAXNAMLEN_STD]),
                         TSKlenientConversion);
                     if (retVal != TSKconversionOK) {
                         if (tsk_verbose)
                             tsk_fprintf(stderr,
                                 "iso9660_load_inodes_dir: Error converting Joliet name to UTF8: %d",
                                 retVal);
                         in_node->inode.fn[0] = '\0';
                     }
                     *name8 = '\0';
                 }
 
                 else if (ctype == ISO9660_CTYPE_ASCII) {
                     int readlen;
 
                     readlen = dentry->fi_len;
                     if (readlen > ISO9660_MAXNAMLEN_STD)
                         readlen = ISO9660_MAXNAMLEN_STD;
                     
                     if (dentry->entry_len < sizeof(iso9660_dentry) + dentry->fi_len) {
                         if (tsk_verbose)
                             tsk_fprintf(stderr,
                                         "iso9660_load_inodes_dir: ASCII name length is too large, bailing\n");
                         free(in_node);
                         in_node = NULL;
                         break;
                     }
 
 
                     memcpy(in_node->inode.fn,
                         &buf[b_offs + sizeof(iso9660_dentry)], readlen);
                     in_node->inode.fn[readlen] = '\0';
                 }
                 else {
                     tsk_error_reset();
                     tsk_error_set_errno(TSK_ERR_FS_ARG);
                     tsk_error_set_errstr
                         ("Invalid ctype in iso9660_load_inodes_dir");
                     free(in_node);
                     in_node = NULL;
                     return -1;
                 }
 
                 // the version is embedded in the name
                 file_ver = strchr(in_node->inode.fn, ';');
                 if (file_ver) {
                     in_node->inode.version = atoi(file_ver + 1);
                     *file_ver = '\0';
                     file_ver = NULL;
                 }
 
                 // if no extension, remove the final '.'
-                if (in_node->inode.fn[strlen(in_node->inode.fn) - 1] ==
-                    '.')
-                    in_node->inode.fn[strlen(in_node->inode.fn) - 1] =
-                        '\0';
+                size_t name8_len = strnlen(in_node->inode.fn, ISO9660_MAXNAMLEN);
+                if (name8_len > 0 && in_node->inode.fn[name8_len - 1] == '.') {
+                    in_node->inode.fn[name8_len - 1] = '\0';
+                }
                 
                 
                 if (strlen(in_node->inode.fn) == 0) {
                     if (tsk_verbose)
                         tsk_fprintf(stderr,
                                     "iso9660_load_inodes_dir: length of name after processing is 0. bailing\n");
                     free(in_node);
                     in_node = NULL;
                     break;
                     
                 }
             }
 
             
 
             // copy the raw dentry data into the node
             memcpy(&(in_node->inode.dr), dentry, sizeof(iso9660_dentry));
 
             in_node->inode.ea = NULL;
 
             // sanity checks
             if (tsk_getu32(fs->endian, dentry->ext_loc_m) > fs->last_block) {
                 if (tsk_verbose)
                     tsk_fprintf(stderr,
                                 "iso9660_load_inodes_dir: file starts past end of image (%"PRIu32"). bailing\n",
                                 tsk_getu32(fs->endian, dentry->ext_loc_m));
                 free(in_node);
                 in_node = NULL;
                 break;
             }
             in_node->offset =
                 tsk_getu32(fs->endian, dentry->ext_loc_m) * fs->block_size;
             
             if (tsk_getu32(fs->endian, in_node->inode.dr.data_len_m) + in_node->offset > (TSK_OFF_T)(fs->block_count * fs->block_size)) {
                 if (tsk_verbose)
                     tsk_fprintf(stderr,
                                 "iso9660_load_inodes_dir: file ends past end of image (%"PRIu32" bytes). bailing\n",
                                 tsk_getu32(fs->endian, in_node->inode.dr.data_len_m) + in_node->offset);
                 free(in_node);
                 in_node = NULL;
                 break;
             }
             /* record size to make sure fifos show up as unique files */
             in_node->size =
                 tsk_getu32(fs->endian, in_node->inode.dr.data_len_m);
 
             
             in_node->ea_size = dentry->ext_len;
             in_node->dentry_offset = s_offs + b_offs;
 
             if (is_first)
                 in_node->inode.is_orphan = 0;
             else
                 in_node->inode.is_orphan = 1;
 
             in_node->inum = count++;
 
             /* RockRidge data is located after the name.  See if it is there.  */
             if ((int) (dentry->entry_len - sizeof(iso9660_dentry) -
                     dentry->fi_len) > 1) {
                 int extra_bytes =
                     dentry->entry_len - sizeof(iso9660_dentry) -
                     dentry->fi_len;
 
                 in_node->inode.rr =
                     parse_susp(fs,
                     &buf[b_offs + sizeof(iso9660_dentry) + dentry->fi_len],
                     extra_bytes, NULL, 0);
                 if (in_node->inode.rr == NULL) {
                     if (tsk_verbose)
                         tsk_fprintf(stderr,
                                     "iso9660_load_inodes_dir: parse_susp returned error (%s). bailing\n", tsk_error_get());
                     free(in_node);
                     in_node = NULL;
                     break;
                 }
                 
                 in_node->inode.susp_off =
                     b_offs + sizeof(iso9660_dentry) + dentry->fi_len +
                     s_offs;
                 in_node->inode.susp_len = extra_bytes;
             }
             else {
                 in_node->inode.rr = NULL;
                 in_node->inode.susp_off = 0;
                 in_node->inode.susp_len = 0;
             }
 
             /* add inode to the list */
             if (iso->in_list) {
                 iso9660_inode_node *tmp, *prev_tmp;
 
                 for (tmp = iso->in_list; tmp; tmp = tmp->next) {
                     /* When processing the "first" volume descriptor, all entries get added to the list.
                      * for the later ones, we skip duplicate ones that have content (blocks) that overlaps
                      * with entries from a previous volume descriptor. */
                     if ((in_node->offset == tmp->offset)
                         && (in_node->size == tmp->size)
                         && (in_node->size) && (is_first == 0)) {
                         
                         // if we found rockridge, then update original if needed.
                         if (in_node->inode.rr) {
                             if (tmp->inode.rr == NULL) {
                                 tmp->inode.rr = in_node->inode.rr;
                                 tmp->inode.susp_off =
                                     in_node->inode.susp_off;
                                 tmp->inode.susp_len =
                                     in_node->inode.susp_len;
                                 in_node->inode.rr = NULL;
                             }
                             else {
                                 free(in_node->inode.rr);
                                 in_node->inode.rr = NULL;
                             }
                         }
 
                         if (tsk_verbose)
                             tsk_fprintf(stderr,
                                 "iso9660_load_inodes_dir: Removing duplicate entry for: %s (orig name: %s start: %d size: %d)\n",
                                 in_node->inode.fn, tmp->inode.fn, in_node->offset, in_node->size);
                         free(in_node);
                         in_node = NULL;
                         count--;
                         break;
                     }
                     prev_tmp = tmp;
                 }
 
                 // add it to the end (if we didn't get rid of it above)
                 if (in_node) {
                     prev_tmp->next = in_node;
                     in_node->next = NULL;
                 }
             }
             else {
                 iso->in_list = in_node;
                 in_node->next = NULL;
             }
 
             // skip two entries if this was the root directory (the . and ..).
             if ((i == 0) && (b_offs == 0) && (count == 1)) {
                 b_offs += dentry->entry_len;
                 dentry = (iso9660_dentry *) & buf[b_offs];
             }
             b_offs += dentry->entry_len;
         }
         s_offs += cnt1;
     }
     return count;
 }
 
 
 /**
  * Process the path table for a joliet secondary volume descriptor
  * and load all of the files pointed to it.
  * The path table contains an entry for each directory.  This code
  * then locates each of the directories and processes the contents.
  *
  * @param fs File system to process
  * @param svd Pointer to the secondary volume descriptor
  * @param count Current count of inodes
  * @returns updated count of inodes or -1 on error
  */
