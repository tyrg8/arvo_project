commit de17e6fb6ba645622d1edc798d5bc77fdfe4189a
Author: Daniel Baston <dbaston@gmail.com>
Date:   Mon Sep 5 20:44:59 2022 -0400

    WKTReader: Raise error if extra text present after end of geometry
    
    Fixes #1095

diff --git a/src/io/WKTReader.cpp b/src/io/WKTReader.cpp
index d285541c1..e9fb4f33c 100644
--- a/src/io/WKTReader.cpp
+++ b/src/io/WKTReader.cpp
@@ -49,9 +49,16 @@ std::unique_ptr<Geometry>
 WKTReader::read(const std::string& wellKnownText) const
 {
     CLocalizer clocale;
     StringTokenizer tokenizer(wellKnownText);
     OrdinateSet ordinateFlags = OrdinateSet::createXY();
-    return readGeometryTaggedText(&tokenizer, ordinateFlags);
+    auto ret = readGeometryTaggedText(&tokenizer, ordinateFlags);
+
+    if (tokenizer.peekNextToken() != StringTokenizer::TT_EOF) {
+        tokenizer.nextToken();
+        throw ParseException("Unexpected text after end of geometry");
+    }
+
+    return ret;
 }
 
 std::unique_ptr<CoordinateSequence>
diff --git a/tests/unit/io/WKTReaderTest.cpp b/tests/unit/io/WKTReaderTest.cpp
index cee304f05..b6df6edb4 100644
--- a/tests/unit/io/WKTReaderTest.cpp
+++ b/tests/unit/io/WKTReaderTest.cpp
@@ -389,11 +389,26 @@ template<>
 void object::test<20>
 ()
 {
     ensure_parseexception("POLYGON Z ((0 0,0 10,10 10,10 0,0 0),(1 1 1,1 2 1,2 2 1,2 1 1,1 1 1))");
     ensure_parseexception("POLYGON Z ((0 0,0 10,10 10,10 0,0 0),(1 1 1,1 2 1,2 2 1,2 1 1,1 1 1))");
 
     ensure_parseexception("LINESTRING Z (0 0 0 1, 0 1 0 1)");
 }
 
+// https://trac.osgeo.org/geos/ticket/1095
+template<>
+template<>
+void object::test<21>
+()
+{
+    try {
+        auto geom = wktreader.read("GEOMETRYCOLLECTION(POINT (0 1)), POINT (1 1)");
+        fail();
+    } catch (geos::io::ParseException &e) {
+        std::string msg(e.what());
+        ensure_equals(msg, "ParseException: Unexpected text after end of geometry");
+    }
+}
+
 
 } // namespace tut
