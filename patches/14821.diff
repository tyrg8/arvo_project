commit 8bb50d4ccde667295f892f976ee5ff90ba4a4a2f
Author: Jonathan Hui <jonhui@nestlabs.com>
Date:   Mon May 20 20:37:19 2019 -0700

    [ip6] add additional parse validation to Ip6::Address::FromString (#3843)

diff --git a/src/core/net/ip6_address.cpp b/src/core/net/ip6_address.cpp
index 0bd765adf..57797a057 100644
--- a/src/core/net/ip6_address.cpp
+++ b/src/core/net/ip6_address.cpp
@@ -260,120 +260,123 @@ bool Address::operator!=(const Address &aOther) const
 otError Address::FromString(const char *aBuf)
 {
     otError     error  = OT_ERROR_NONE;
     uint8_t *   dst    = reinterpret_cast<uint8_t *>(mFields.m8);
     uint8_t *   endp   = reinterpret_cast<uint8_t *>(mFields.m8 + 15);
     uint8_t *   colonp = NULL;
     const char *colonc = NULL;
     uint16_t    val    = 0;
     uint8_t     count  = 0;
     bool        first  = true;
     bool        hasIp4 = false;
     char        ch;
     uint8_t     d;
 
     memset(mFields.m8, 0, 16);
 
     dst--;
 
     for (;;)
     {
         ch = *aBuf++;
         d  = ch & 0xf;
 
         if (('a' <= ch && ch <= 'f') || ('A' <= ch && ch <= 'F'))
         {
             d += 9;
         }
         else if (ch == ':' || ch == '\0' || ch == ' ')
         {
             if (count)
             {
                 VerifyOrExit(dst + 2 <= endp, error = OT_ERROR_PARSE);
                 *(dst + 1) = static_cast<uint8_t>(val >> 8);
                 *(dst + 2) = static_cast<uint8_t>(val);
                 dst += 2;
                 count = 0;
                 val   = 0;
             }
             else if (ch == ':')
             {
                 VerifyOrExit(colonp == NULL || first, error = OT_ERROR_PARSE);
                 colonp = dst;
             }
 
             if (ch == '\0' || ch == ' ')
             {
                 break;
             }
 
             colonc = aBuf;
 
             continue;
         }
         else if (ch == '.')
         {
             hasIp4 = true;
 
             // Do not count bytes of the embedded IPv4 address.
             endp -= kIp4AddressSize;
+
+            VerifyOrExit(dst <= endp, error = OT_ERROR_PARSE);
+
             break;
         }
         else
         {
             VerifyOrExit('0' <= ch && ch <= '9', error = OT_ERROR_PARSE);
         }
 
         first = false;
         val   = static_cast<uint16_t>((val << 4) | d);
         VerifyOrExit(++count <= 4, error = OT_ERROR_PARSE);
     }
 
     VerifyOrExit(colonp || dst == endp, error = OT_ERROR_PARSE);
 
     while (colonp && dst > colonp)
     {
         *endp-- = *dst--;
     }
 
     while (endp > dst)
     {
         *endp-- = 0;
     }
 
     if (hasIp4)
     {
         val = 0;
 
         // Reset the start and end pointers.
         dst  = reinterpret_cast<uint8_t *>(mFields.m8 + 12);
         endp = reinterpret_cast<uint8_t *>(mFields.m8 + 15);
 
         for (;;)
         {
             ch = *colonc++;
 
             if (ch == '.' || ch == '\0' || ch == ' ')
             {
                 VerifyOrExit(dst <= endp, error = OT_ERROR_PARSE);
 
                 *dst++ = static_cast<uint8_t>(val);
                 val    = 0;
 
                 if (ch == '\0' || ch == ' ')
                 {
                     // Check if embedded IPv4 address had exactly four parts.
                     VerifyOrExit(dst == endp + 1, error = OT_ERROR_PARSE);
                     break;
                 }
             }
             else
             {
                 VerifyOrExit('0' <= ch && ch <= '9', error = OT_ERROR_PARSE);
 
                 val = (10 * val) + (ch & 0xf);
 
                 // Single part of IPv4 address has to fit in one byte.
                 VerifyOrExit(val <= 0xff, error = OT_ERROR_PARSE);
             }
         }
     }
diff --git a/tests/unit/test_ip6_address.cpp b/tests/unit/test_ip6_address.cpp
index e6b83aeb0..bda00293c 100644
--- a/tests/unit/test_ip6_address.cpp
+++ b/tests/unit/test_ip6_address.cpp
@@ -56,145 +56,152 @@ static void checkAddressFromString(Ip6AddressStringTestVector *aTestVector)
 void TestIp6AddressFromString(void)
 {
     Ip6AddressStringTestVector testVectors[] =
     {
         // Valid full IPv6 address.
         {
             "0102:0304:0506:0708:090a:0b0c:0d0e:0f00",
             {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
              0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00},
             OT_ERROR_NONE
         },
 
         // Valid full IPv6 address with mixed capital and small letters.
         {
             "0102:0304:0506:0708:090a:0B0C:0d0E:0F00",
             {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
              0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00},
             OT_ERROR_NONE
         },
 
         // Short prefix and full IID.
         {
             "fd11::abcd:e0e0:d10e:0001",
             {0xfd, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0xab, 0xcd, 0xe0, 0xe0, 0xd1, 0x0e, 0x00, 0x01},
             OT_ERROR_NONE
         },
 
         // Valid IPv6 address with unnecessary :: symbol.
         {
             "fd11:1234:5678:abcd::abcd:e0e0:d10e:1000",
             {0xfd, 0x11, 0x12, 0x34, 0x56, 0x78, 0xab, 0xcd,
              0xab, 0xcd, 0xe0, 0xe0, 0xd1, 0x0e, 0x10, 0x00},
             OT_ERROR_NONE
         },
 
         // Short multicast address.
         {
             "ff03::0b",
             {0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b},
             OT_ERROR_NONE
         },
 
         // Unspecified address.
         {
             "::",
             {0},
             OT_ERROR_NONE
         },
 
         // Valid embedded IPv4 address.
         {
             "64:ff9b::100.200.15.4",
             {0x00, 0x64, 0xff, 0x9b, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x64, 0xc8, 0x0f, 0x04},
             OT_ERROR_NONE
         },
 
         // Valid embedded IPv4 address.
         {
             "2001:db8::abc:def1:127.0.0.1",
             {0x20, 0x01, 0x0d, 0xb8, 0x00, 0x00, 0x00, 0x00,
              0x0a, 0xbc, 0xde, 0xf1, 0x7f, 0x00, 0x00, 0x01},
             OT_ERROR_NONE
         },
 
         // Two :: should cause a parse error.
         {
             "2001:db8::a::b",
             {0},
             OT_ERROR_PARSE
         },
 
         // The "g" and "h" are not the hex characters.
         {
             "2001:db8::abcd:efgh",
             {0},
             OT_ERROR_PARSE
         },
 
         // Too many colons.
         {
             "1:2:3:4:5:6:7:8:9",
             {0},
             OT_ERROR_PARSE
         },
 
         // Too many characters in a single part.
         {
             "2001:db8::abc:def12:1:2",
             {0},
             OT_ERROR_PARSE
         },
 
         // Invalid embedded IPv4 address.
         {
             "64:ff9b::123.231.0.257",
             {0},
             OT_ERROR_PARSE
         },
 
         // Invalid embedded IPv4 address.
         {
             "64:ff9b::1.22.33",
             {0},
             OT_ERROR_PARSE
         },
 
         // Invalid embedded IPv4 address.
         {
             "64:ff9b::1.22.33.44.5",
             {0},
             OT_ERROR_PARSE
         },
 
         // Invalid embedded IPv4 address.
         {
             ".",
             {0},
             OT_ERROR_PARSE
         },
 
         // Invalid embedded IPv4 address.
         {
             ":.",
             {0},
             OT_ERROR_PARSE
         },
 
         // Invalid embedded IPv4 address.
         {
             "::.",
             {0},
             OT_ERROR_PARSE
         },
+
+        // Invalid embedded IPv4 address.
+        {
+            ":f:0:0:c:0:f:f:.",
+            {0},
+            OT_ERROR_PARSE
+        },
     };
 
     for (uint32_t index = 0; index < OT_ARRAY_LENGTH(testVectors); index++)
     {
         checkAddressFromString(&testVectors[index]);
     }
 }
 
 #ifdef ENABLE_TEST_MAIN
