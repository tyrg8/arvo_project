commit 321cfe97605de8f050ac9be597069e370d5d9da3
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Mon Feb 27 19:56:18 2023 +0900

    mruby-io/file.c: add File#atime and File#ctime

diff --git a/mrbgems/mruby-io/README.md b/mrbgems/mruby-io/README.md
index 3629cdb5c..21138ace4 100644
--- a/mrbgems/mruby-io/README.md
+++ b/mrbgems/mruby-io/README.md
@@ -7,166 +7,166 @@
 Add the line below to your build configuration.
 
 ```
   conf.gem core: 'mruby-io'
 ```
 
 ## Implemented methods
 
 ### IO
 
 - <https://doc.ruby-lang.org/ja/1.9.3/class/IO.html>
 
 | method                     | mruby-io | memo     |
 |----------------------------|----------|----------|
 | IO.binread                 |          |          |
 | IO.binwrite                |          |          |
 | IO.copy_stream             |          |          |
 | IO.new, IO.for_fd, IO.open | o        |          |
 | IO.foreach                 |          |          |
 | IO.pipe                    | o        |          |
 | IO.popen                   | o        |          |
 | IO.read                    | o        |          |
 | IO.readlines               |          |          |
 | IO.select                  | o        |          |
 | IO.sysopen                 | o        |          |
 | IO.try_convert             |          |          |
 | IO.write                   |          |          |
 | IO#<<                      |          |          |
 | IO#advise                  |          |          |
 | IO#autoclose=              |          |          |
 | IO#autoclose?              |          |          |
 | IO#binmode                 |          |          |
 | IO#binmode?                |          |          |
 | IO#bytes                   |          | obsolete |
 | IO#chars                   |          | obsolete |
 | IO#clone, IO#dup           | o        |          |
 | IO#close                   | o        |          |
 | IO#close_on_exec=          | o        |          |
 | IO#close_on_exec?          | o        |          |
 | IO#close_read              |          |          |
 | IO#close_write             |          |          |
 | IO#closed?                 | o        |          |
 | IO#codepoints              |          | obsolete |
 | IO#each_byte               | o        |          |
 | IO#each_char               | o        |          |
 | IO#each_codepoint          |          |          |
 | IO#each_line               | o        |          |
 | IO#eof, IO#eof?            | o        |          |
 | IO#external_encoding       |          |          |
 | IO#fcntl                   |          |          |
 | IO#fdatasync               |          |          |
 | IO#fileno, IO#to_i         | o        |          |
 | IO#flush                   | o        |          |
 | IO#fsync                   |          |          |
 | IO#getbyte                 | o        |          |
 | IO#getc                    | o        |          |
 | IO#gets                    | o        |          |
 | IO#internal_encoding       |          |          |
 | IO#ioctl                   |          |          |
 | IO#isatty, IO#tty?         | o        |          |
 | IO#lineno                  |          |          |
 | IO#lineno=                 |          |          |
 | IO#lines                   |          | obsolete |
 | IO#pid                     | o        |          |
 | IO#pos, IO#tell            | o        |          |
 | IO#pos=                    | o        |          |
 | IO#print                   | o        |          |
 | IO#printf                  | o        |          |
 | IO#putc                    |          |          |
 | IO#puts                    | o        |          |
 | IO#read                    | o        |          |
 | IO#read_nonblock           |          |          |
 | IO#readbyte                | o        |          |
 | IO#readchar                | o        |          |
 | IO#readline                | o        |          |
 | IO#readlines               | o        |          |
 | IO#readpartial             |          |          |
 | IO#reopen                  |          |          |
 | IO#rewind                  |          |          |
 | IO#seek                    | o        |          |
 | IO#set_encoding            |          |          |
 | IO#stat                    |          |          |
 | IO#sync                    | o        |          |
 | IO#sync=                   | o        |          |
 | IO#sysread                 | o        |          |
 | IO#sysseek                 | o        |          |
 | IO#syswrite                | o        |          |
 | IO#to_io                   |          |          |
 | IO#ungetbyte               | o        |          |
 | IO#ungetc                  | o        |          |
 | IO#write                   | o        |          |
 | IO#write_nonblock          |          |          |
 
 ### File
 
 - <https://doc.ruby-lang.org/ja/1.9.3/class/File.html>
 
 | method                      | mruby-io | memo     |
 |-----------------------------|----------|----------|
 | File.absolute_path          |          |          |
 | File.atime                  |          |          |
 | File.basename               | o        |          |
 | File.blockdev?              |          | FileTest |
 | File.chardev?               |          | FileTest |
 | File.chmod                  | o        |          |
 | File.chown                  |          |          |
 | File.ctime                  |          |          |
 | File.delete, File.unlink    | o        |          |
 | File.directory?             | o        | FileTest |
 | File.dirname                | o        |          |
 | File.executable?            |          | FileTest |
 | File.executable_real?       |          | FileTest |
 | File.exist?, exists?        | o        | FileTest |
 | File.expand_path            | o        |          |
 | File.extname                | o        |          |
 | File.file?                  | o        | FileTest |
 | File.fnmatch, File.fnmatch? |          |          |
 | File.ftype                  |          |          |
 | File.grpowned?              |          | FileTest |
 | File.identical?             |          | FileTest |
 | File.join                   | o        |          |
 | File.lchmod                 |          |          |
 | File.lchown                 |          |          |
 | File.link                   |          |          |
 | File.lstat                  |          |          |
 | File.mtime                  |          |          |
 | File.new, File.open         | o        |          |
 | File.owned?                 |          | FileTest |
 | File.path                   |          |          |
 | File.pipe?                  | o        | FileTest |
 | File.readable?              |          | FileTest |
 | File.readable_real?         |          | FileTest |
 | File.readlink               | o        |          |
 | File.realdirpath            |          |          |
 | File.realpath               | o        |          |
 | File.rename                 | o        |          |
 | File.setgid?                |          | FileTest |
 | File.setuid?                |          | FileTest |
 | File.size                   | o        |          |
 | File.size?                  | o        | FileTest |
 | File.socket?                | o        | FileTest |
 | File.split                  |          |          |
 | File.stat                   |          |          |
 | File.sticky?                |          | FileTest |
 | File.symlink                |          |          |
 | File.symlink?               | o        | FileTest |
 | File.truncate               |          |          |
 | File.umask                  | o        |          |
 | File.utime                  |          |          |
 | File.world_readable?        |          |          |
 | File.world_writable?        |          |          |
 | File.writable?              |          | FileTest |
 | File.writable_real?         |          | FileTest |
 | File.zero?                  | o        | FileTest |
-| File#atime                  |          |          |
+| File#atime                  | o        |          |
 | File#chmod                  |          |          |
 | File#chown                  |          |          |
-| File#ctime                  |          |          |
+| File#ctime                  | o        |          |
 | File#flock                  | o        |          |
 | File#lstat                  |          |          |
 | File#mtime                  | o        |          |
 | File#path                   | o        |          |
 | File#size                   |          |          |
 | File#truncate               |          |          |
 
 ## License
diff --git a/mrbgems/mruby-io/mrblib/file.rb b/mrbgems/mruby-io/mrblib/file.rb
index b706cf0de..4a387672c 100644
--- a/mrbgems/mruby-io/mrblib/file.rb
+++ b/mrbgems/mruby-io/mrblib/file.rb
@@ -1,205 +1,215 @@
 class File < IO
   attr_accessor :path
 
   def initialize(fd_or_path, mode = "r", perm = 0666)
     if fd_or_path.kind_of? Integer
       super(fd_or_path, mode)
     else
       @path = fd_or_path
       fd = IO.sysopen(@path, mode, perm)
       super(fd, mode)
     end
   end
 
+  def atime
+    t = self._atime
+    t && Time.at(t)
+  end
+
+  def ctime
+    t = self._ctime
+    t && Time.at(t)
+  end
+
   def mtime
     t = self._mtime
     t && Time.at(t)
   end
 
   def self.join(*names)
     return "" if names.empty?
 
     names.map! do |name|
       case name
       when String
         name
       when Array
         if names == name
           raise ArgumentError, "recursive array"
         end
         join(*name)
       else
         raise TypeError, "no implicit conversion of #{name.class} into String"
       end
     end
 
     return names[0] if names.size == 1
 
     if names[0][-1] == File::SEPARATOR
       s = names[0][0..-2]
     else
       s = names[0].dup
     end
 
     (1..names.size-2).each { |i|
       t = names[i]
       if t[0] == File::SEPARATOR and t[-1] == File::SEPARATOR
         t = t[1..-2]
       elsif t[0] == File::SEPARATOR
         t = t[1..-1]
       elsif t[-1] == File::SEPARATOR
         t = t[0..-2]
       end
       s += File::SEPARATOR + t if t != ""
     }
     if names[-1][0] == File::SEPARATOR
       s += File::SEPARATOR + names[-1][1..-1]
     else
       s += File::SEPARATOR + names[-1]
     end
     s
   end
 
   def self._concat_path(path, base_path)
     if path[0] == "/" || path[1] == ':' # Windows root!
       expanded_path = path
     elsif path[0] == "~"
       if (path[1] == "/" || path[1] == nil)
         dir = path[1, path.size]
         home_dir = _gethome
 
         unless home_dir
           raise ArgumentError, "couldn't find HOME environment -- expanding '~'"
         end
 
         expanded_path = home_dir
         expanded_path += dir if dir
         expanded_path += "/"
       else
         splitted_path = path.split("/")
         user = splitted_path[0][1, splitted_path[0].size]
         dir = "/" + splitted_path[1, splitted_path.size].join("/")
 
         home_dir = _gethome(user)
 
         unless home_dir
           raise ArgumentError, "user #{user} doesn't exist"
         end
 
         expanded_path = home_dir
         expanded_path += dir if dir
         expanded_path += "/"
       end
     else
       expanded_path = _concat_path(base_path, _getwd)
       expanded_path += "/" + path
     end
 
     expanded_path
   end
 
   def self.expand_path(path, default_dir = '.')
     expanded_path = _concat_path(path, default_dir)
     drive_prefix = ""
     if File::ALT_SEPARATOR && expanded_path.size > 2 &&
         ("A".."Z").include?(expanded_path[0].upcase) && expanded_path[1] == ":"
       drive_prefix = expanded_path[0, 2]
       expanded_path = expanded_path[2, expanded_path.size]
     end
     expand_path_array = []
     if File::ALT_SEPARATOR && expanded_path.include?(File::ALT_SEPARATOR)
       expanded_path.gsub!(File::ALT_SEPARATOR, '/')
     end
     while expanded_path.include?('//')
       expanded_path = expanded_path.gsub('//', '/')
     end
 
     if expanded_path != "/"
       expanded_path.split('/').each do |path_token|
         if path_token == '..'
           if expand_path_array.size > 1
             expand_path_array.pop
           end
         elsif path_token == '.'
           # nothing to do.
         else
           expand_path_array << path_token
         end
       end
 
       expanded_path = expand_path_array.join("/")
       if expanded_path.empty?
         expanded_path = '/'
       end
     end
     if drive_prefix.empty?
       expanded_path
     else
       drive_prefix + expanded_path.gsub("/", File::ALT_SEPARATOR)
     end
   end
 
   def self.foreach(file)
     if block_given?
       self.open(file) do |f|
         f.each {|l| yield l}
       end
     else
       return self.new(file)
     end
   end
 
   def self.directory?(file)
     FileTest.directory?(file)
   end
 
   def self.exist?(file)
     FileTest.exist?(file)
   end
 
   def self.exists?(file)
     FileTest.exists?(file)
   end
 
   def self.file?(file)
     FileTest.file?(file)
   end
 
   def self.pipe?(file)
     FileTest.pipe?(file)
   end
 
   def self.size(file)
     FileTest.size(file)
   end
 
   def self.size?(file)
     FileTest.size?(file)
   end
 
   def self.socket?(file)
     FileTest.socket?(file)
   end
 
   def self.symlink?(file)
     FileTest.symlink?(file)
   end
 
   def self.zero?(file)
     FileTest.zero?(file)
   end
 
   def self.extname(filename)
     fname = self.basename(filename)
     epos = fname.rindex('.')
     return '' if epos == 0 || epos.nil?
     return fname[epos..-1]
   end
 
   def self.path(filename)
     if filename.kind_of?(String)
       filename
     else
       raise TypeError, "no implicit conversion of #{filename.class} into String"
     end
   end
diff --git a/mrbgems/mruby-io/src/file.c b/mrbgems/mruby-io/src/file.c
index 6505f9800..73a730170 100644
--- a/mrbgems/mruby-io/src/file.c
+++ b/mrbgems/mruby-io/src/file.c
@@ -391,6 +391,28 @@ mrb_file__gethome(mrb_state *mrb, mrb_value klass)
 #endif
 }
 
+static mrb_value
+mrb_file_atime(mrb_state *mrb, mrb_value self)
+{
+  int fd = mrb_io_fileno(mrb, self);
+  mrb_stat st;
+
+  if (mrb_fstat(fd, &st) == -1)
+    return mrb_nil_value();
+  return mrb_int_value(mrb, (mrb_int)st.st_atime);
+}
+
+static mrb_value
+mrb_file_ctime(mrb_state *mrb, mrb_value self)
+{
+  int fd = mrb_io_fileno(mrb, self);
+  mrb_stat st;
+
+  if (mrb_fstat(fd, &st) == -1)
+    return mrb_nil_value();
+  return mrb_int_value(mrb, (mrb_int)st.st_ctime);
+}
+
 static mrb_value
 mrb_file_mtime(mrb_state *mrb, mrb_value self)
 {
@@ -591,59 +613,61 @@ void
 mrb_init_file(mrb_state *mrb)
 {
   struct RClass *io, *file, *cnst;
 
   io   = mrb_class_get_id(mrb, MRB_SYM(IO));
   file = mrb_define_class(mrb, "File", io);
   MRB_SET_INSTANCE_TT(file, MRB_TT_CDATA);
   mrb_define_class_method(mrb, file, "umask",  mrb_file_s_umask, MRB_ARGS_OPT(1));
   mrb_define_class_method(mrb, file, "delete", mrb_file_s_unlink, MRB_ARGS_ANY());
   mrb_define_class_method(mrb, file, "unlink", mrb_file_s_unlink, MRB_ARGS_ANY());
   mrb_define_class_method(mrb, file, "rename", mrb_file_s_rename, MRB_ARGS_REQ(2));
   mrb_define_class_method(mrb, file, "symlink", mrb_file_s_symlink, MRB_ARGS_REQ(2));
   mrb_define_class_method(mrb, file, "chmod", mrb_file_s_chmod, MRB_ARGS_REQ(1) | MRB_ARGS_REST());
   mrb_define_class_method(mrb, file, "readlink", mrb_file_s_readlink, MRB_ARGS_REQ(1));
 
   mrb_define_class_method(mrb, file, "dirname",   mrb_file_dirname,    MRB_ARGS_REQ(1));
   mrb_define_class_method(mrb, file, "basename",  mrb_file_basename,   MRB_ARGS_REQ(1));
   mrb_define_class_method(mrb, file, "realpath",  mrb_file_realpath,   MRB_ARGS_REQ(1)|MRB_ARGS_OPT(1));
   mrb_define_class_method(mrb, file, "_getwd",    mrb_file__getwd,     MRB_ARGS_NONE());
   mrb_define_class_method(mrb, file, "_gethome",  mrb_file__gethome,   MRB_ARGS_OPT(1));
 
   mrb_define_method(mrb, file, "flock", mrb_file_flock, MRB_ARGS_REQ(1));
+  mrb_define_method(mrb, file, "_atime", mrb_file_atime, MRB_ARGS_NONE());
+  mrb_define_method(mrb, file, "_ctime", mrb_file_ctime, MRB_ARGS_NONE());
   mrb_define_method(mrb, file, "_mtime", mrb_file_mtime, MRB_ARGS_NONE());
   mrb_define_method(mrb, file, "size", mrb_file_size, MRB_ARGS_NONE());
   mrb_define_method(mrb, file, "truncate", mrb_file_truncate, MRB_ARGS_REQ(1));
 
   cnst = mrb_define_module_under_id(mrb, file, MRB_SYM(Constants));
   mrb_define_const_id(mrb, cnst, MRB_SYM(LOCK_SH), mrb_fixnum_value(LOCK_SH));
   mrb_define_const_id(mrb, cnst, MRB_SYM(LOCK_EX), mrb_fixnum_value(LOCK_EX));
   mrb_define_const_id(mrb, cnst, MRB_SYM(LOCK_UN), mrb_fixnum_value(LOCK_UN));
   mrb_define_const_id(mrb, cnst, MRB_SYM(LOCK_NB), mrb_fixnum_value(LOCK_NB));
   mrb_define_const_id(mrb, cnst, MRB_SYM(SEPARATOR), mrb_str_new_cstr(mrb, FILE_SEPARATOR));
   mrb_define_const_id(mrb, cnst, MRB_SYM(PATH_SEPARATOR), mrb_str_new_cstr(mrb, PATH_SEPARATOR));
 #if defined(_WIN32) || defined(_WIN64)
   mrb_define_const_id(mrb, cnst, MRB_SYM(ALT_SEPARATOR), mrb_str_new_cstr(mrb, FILE_ALT_SEPARATOR));
 #else
   mrb_define_const_id(mrb, cnst, MRB_SYM(ALT_SEPARATOR), mrb_nil_value());
 #endif
   mrb_define_const_id(mrb, cnst, MRB_SYM(NULL), mrb_str_new_cstr(mrb, NULL_FILE));
 
   mrb_define_const_id(mrb, cnst, MRB_SYM(RDONLY), mrb_fixnum_value(MRB_O_RDONLY));
   mrb_define_const_id(mrb, cnst, MRB_SYM(WRONLY), mrb_fixnum_value(MRB_O_WRONLY));
   mrb_define_const_id(mrb, cnst, MRB_SYM(RDWR), mrb_fixnum_value(MRB_O_RDWR));
   mrb_define_const_id(mrb, cnst, MRB_SYM(APPEND), mrb_fixnum_value(MRB_O_APPEND));
   mrb_define_const_id(mrb, cnst, MRB_SYM(CREAT), mrb_fixnum_value(MRB_O_CREAT));
   mrb_define_const_id(mrb, cnst, MRB_SYM(EXCL), mrb_fixnum_value(MRB_O_EXCL));
   mrb_define_const_id(mrb, cnst, MRB_SYM(TRUNC), mrb_fixnum_value(MRB_O_TRUNC));
   mrb_define_const_id(mrb, cnst, MRB_SYM(NONBLOCK), mrb_fixnum_value(MRB_O_NONBLOCK));
   mrb_define_const_id(mrb, cnst, MRB_SYM(NOCTTY), mrb_fixnum_value(MRB_O_NOCTTY));
   mrb_define_const_id(mrb, cnst, MRB_SYM(BINARY), mrb_fixnum_value(MRB_O_BINARY));
   mrb_define_const_id(mrb, cnst, MRB_SYM(SHARE_DELETE), mrb_fixnum_value(MRB_O_SHARE_DELETE));
   mrb_define_const_id(mrb, cnst, MRB_SYM(SYNC), mrb_fixnum_value(MRB_O_SYNC));
   mrb_define_const_id(mrb, cnst, MRB_SYM(DSYNC), mrb_fixnum_value(MRB_O_DSYNC));
   mrb_define_const_id(mrb, cnst, MRB_SYM(RSYNC), mrb_fixnum_value(MRB_O_RSYNC));
   mrb_define_const_id(mrb, cnst, MRB_SYM(NOFOLLOW), mrb_fixnum_value(MRB_O_NOFOLLOW));
   mrb_define_const_id(mrb, cnst, MRB_SYM(NOATIME), mrb_fixnum_value(MRB_O_NOATIME));
   mrb_define_const_id(mrb, cnst, MRB_SYM(DIRECT), mrb_fixnum_value(MRB_O_DIRECT));
   mrb_define_const_id(mrb, cnst, MRB_SYM(TMPFILE), mrb_fixnum_value(MRB_O_TMPFILE));
 }
