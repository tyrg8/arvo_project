commit 54d57acf610e5db2e70afa234fd4018207606774
Author: Alan Modra <amodra@gmail.com>
Date:   Mon Aug 28 20:53:02 2023 +0930

    Re: comdat_hash memory leaks
    
    I missed another field that needs freeing.  Also, oss-fuzz found a
    case with a C_FILE sym using multiple auxents for a long file name
    which overflowed the single auxent buffer.  I'm going to fix that
    problem in swap_aux_in too, but we may as well avoid it here too,
    saving unnecessary work.
    
            * coffcode.h (comdat_delf): Free comdat_name.
            (fill_comdat_hash): Only look at symbols with one auxent.

diff --git a/bfd/coffcode.h b/bfd/coffcode.h
index 03c1788a1c9..908dc93c64a 100644
--- a/bfd/coffcode.h
+++ b/bfd/coffcode.h
@@ -872,6 +872,7 @@ static void
 comdat_delf (void *ent)
 {
   struct comdat_hash_entry *e = ent;
+  free (e->comdat_name);
   free (e->symname);
   free (e);
 }
@@ -889,198 +890,198 @@ static bool
 fill_comdat_hash (bfd *abfd)
 {
   bfd_byte *esymstart, *esym, *esymend;
 
   /* Unfortunately, the PE format stores essential information in the
      symbol table, of all places.  We need to extract that information
      now, so that objdump and the linker will know how to handle the
      section without worrying about the symbols.  We can't call
      slurp_symtab, because the linker doesn't want the swapped symbols.  */
 
   /* COMDAT sections are special.  The first symbol is the section
      symbol, which tells what kind of COMDAT section it is.  The
      second symbol is the "comdat symbol" - the one with the unique
      name.  GNU uses the section symbol for the unique name; MS uses
      ".text" for every comdat section.  Sigh.  - DJ.  */
 
   /* This is not mirrored in sec_to_styp_flags(), but there doesn't
      seem to be a need to, either, and it would at best be rather messy.  */
 
   if (! _bfd_coff_get_external_symbols (abfd))
     return true;
 
   esymstart = esym = (bfd_byte *) obj_coff_external_syms (abfd);
   esymend = esym + obj_raw_syment_count (abfd) * bfd_coff_symesz (abfd);
 
   for (struct internal_syment isym;
        esym < esymend;
        esym += (isym.n_numaux + 1) * bfd_coff_symesz (abfd))
     {
       char buf[SYMNMLEN + 1];
       const char *symname;
       flagword sec_flags = SEC_LINK_ONCE;
 
       bfd_coff_swap_sym_in (abfd, esym, &isym);
 
       /* According to the MSVC documentation, the first TWO entries
 	 with the section # are both of interest to us.  The first one
 	 is the "section symbol" (section name).  The second is the
 	 comdat symbol name.  Here, we've found the first qualifying
 	 entry; we distinguish it from the second with a state flag.
 
 	 In the case of gas-generated (at least until that is fixed)
 	 .o files, it isn't necessarily the second one.  It may be
 	 some other later symbol.
 
 	 Since gas also doesn't follow MS conventions and emits the
 	 section similar to .text$<name>, where <something> is the
 	 name we're looking for, we distinguish the two as follows:
 
 	 If the section name is simply a section name (no $) we
 	 presume it's MS-generated, and look at precisely the second
 	 symbol for the comdat name.  If the section name has a $, we
 	 assume it's gas-generated, and look for <something> (whatever
 	 follows the $) as the comdat symbol.  */
 
       /* All 3 branches use this.  */
       symname = _bfd_coff_internal_syment_name (abfd, &isym, buf);
 
       /* PR 17512 file: 078-11867-0.004  */
       if (symname == NULL)
 	{
 	  _bfd_error_handler (_("%pB: unable to load COMDAT section name"),
 			      abfd);
 	  continue;
 	}
 
       union internal_auxent aux;
 
       struct comdat_hash_entry needle;
       needle.target_index = isym.n_scnum;
 
       void **slot
 	= htab_find_slot (pe_data (abfd)->comdat_hash, &needle, INSERT);
       if (slot == NULL)
 	return false;
 
       if (*slot == NULL)
 	{
-	  if (isym.n_numaux == 0)
+	  if (isym.n_numaux != 1)
 	    aux.x_scn.x_comdat = 0;
 	  else
 	    {
 	      /* PR 17512: file: e2cfe54f.  */
 	      if (esym + isym.n_numaux * bfd_coff_symesz (abfd) >= esymend)
 		{
 		  /* xgettext:c-format */
 		  _bfd_error_handler (_("%pB: warning: no symbol for"
 					" section '%s' found"),
 				      abfd, symname);
 		  continue;
 		}
 	      bfd_coff_swap_aux_in (abfd, (esym + bfd_coff_symesz (abfd)),
 				    isym.n_type, isym.n_sclass, 0,
 				    isym.n_numaux, &aux);
 	    }
 
 	  /* FIXME: Microsoft uses NODUPLICATES and ASSOCIATIVE, but
 	     gnu uses ANY and SAME_SIZE.  Unfortunately, gnu doesn't
 	     do the comdat symbols right.  So, until we can fix it to
 	     do the right thing, we are temporarily disabling comdats
 	     for the MS types (they're used in DLLs and C++, but we
 	     don't support *their* C++ libraries anyway - DJ.  */
 
 	  /* Cygwin does not follow the MS style, and uses ANY and
 	     SAME_SIZE where NODUPLICATES and ASSOCIATIVE should be
 	     used.  For Interix, we just do the right thing up
 	     front.  */
 
 	  switch (aux.x_scn.x_comdat)
 	    {
 	    case IMAGE_COMDAT_SELECT_NODUPLICATES:
 #ifdef STRICT_PE_FORMAT
 	      sec_flags |= SEC_LINK_DUPLICATES_ONE_ONLY;
 #else
 	      sec_flags &= ~SEC_LINK_ONCE;
 #endif
 	      break;
 
 	    case IMAGE_COMDAT_SELECT_ANY:
 	      sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
 	      break;
 
 	    case IMAGE_COMDAT_SELECT_SAME_SIZE:
 	      sec_flags |= SEC_LINK_DUPLICATES_SAME_SIZE;
 	      break;
 
 	    case IMAGE_COMDAT_SELECT_EXACT_MATCH:
 	      /* Not yet fully implemented ??? */
 	      sec_flags |= SEC_LINK_DUPLICATES_SAME_CONTENTS;
 	      break;
 
 	      /* debug$S gets this case; other implications ???  */
 
 	      /* There may be no symbol.  We'll search the whole
 		 table.  Is this the right place to play this game?
 		 Or should we do it when reading it in?  */
 	    case IMAGE_COMDAT_SELECT_ASSOCIATIVE:
 #ifdef STRICT_PE_FORMAT
 	      /* FIXME: This is not currently implemented.  */
 	      sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
 #else
 	      sec_flags &= ~SEC_LINK_ONCE;
 #endif
 	      break;
 
 	    default:  /* 0 means "no symbol" */
 	      /* debug$F gets this case; other implications ???  */
 	      sec_flags |= SEC_LINK_DUPLICATES_DISCARD;
 	      break;
 	    }
 
 	  *slot = bfd_zmalloc (sizeof (struct comdat_hash_entry));
 	  if (*slot == NULL)
 	    return false;
 	  struct comdat_hash_entry *newentry = *slot;
 	  newentry->sec_flags = sec_flags;
 	  newentry->symname = bfd_strdup (symname);
 	  newentry->target_index = isym.n_scnum;
 	  newentry->isym = isym;
 	  newentry->comdat_symbol = -1;
 	}
       else
 	{
 	  struct comdat_hash_entry *entry = *slot;
 
 	  if (entry->comdat_symbol != -1)
 	    continue;
 
 	  char *target_name = strchr (entry->symname, '$');
 	  if (target_name != NULL)
 	    {
 	      /* Gas mode: the first matching on partial name.  */
 
 	      target_name += 1;
 #ifndef TARGET_UNDERSCORE
 #define TARGET_UNDERSCORE 0
 #endif
 	      /* Is this the name we're looking for ?  */
 	      if (strcmp (target_name,
 			  symname + (TARGET_UNDERSCORE ? 1 : 0)) != 0)
 		{
 		  /* Not the name we're looking for */
 		  continue;
 		}
 	    }
 	  /* MSVC mode: the lexically second symbol (or drop through
 	     from the above).  */
 	  /* This must the second symbol with the section #.  It is
 	     the actual symbol name.  Intel puts the two adjacent, but
 	     Alpha (at least) spreads them out.  */
 
 	  entry->comdat_symbol = (esym - esymstart) / bfd_coff_symesz (abfd);
 	  entry->comdat_name = bfd_strdup (symname);
 	}
     }
 
   return true;
 }
