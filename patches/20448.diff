commit eefe90e7724a0ffce730655f417e34336b6d0a2b
Author: David Bryant <david@wavpack.com>
Date:   Fri Jan 31 21:41:32 2020 -0800

    fix for OSS-Fuzz issue 20448 (a regression from a recent undefined-behavior fix)

diff --git a/src/unpack_dsd.c b/src/unpack_dsd.c
index bb3d6c6..f85efbf 100644
--- a/src/unpack_dsd.c
+++ b/src/unpack_dsd.c
@@ -132,86 +132,86 @@ int32_t unpack_dsd_samples (WavpackContext *wpc, int32_t *buffer, uint32_t sampl
 static int init_dsd_block_fast (WavpackStream *wps, WavpackMetadata *wpmd)
 {
     unsigned char history_bits, max_probability, *lb_ptr;
     int total_summed_probabilities = 0, bi, i;
 
     if (wps->dsd.byteptr == wps->dsd.endptr)
         return FALSE;
 
     history_bits = *wps->dsd.byteptr++;
 
     if (wps->dsd.byteptr == wps->dsd.endptr || history_bits > MAX_HISTORY_BITS)
         return FALSE;
 
     wps->dsd.history_bins = 1 << history_bits;
 
     free_dsd_tables (wps);
     lb_ptr = wps->dsd.lookup_buffer = (unsigned char *)malloc (wps->dsd.history_bins * MAX_BYTES_PER_BIN);
     wps->dsd.value_lookup = (unsigned char **)malloc (sizeof (*wps->dsd.value_lookup) * wps->dsd.history_bins);
     memset (wps->dsd.value_lookup, 0, sizeof (*wps->dsd.value_lookup) * wps->dsd.history_bins);
-    wps->dsd.summed_probabilities = (int16_t (*)[256])malloc (sizeof (*wps->dsd.summed_probabilities) * wps->dsd.history_bins);
+    wps->dsd.summed_probabilities = (uint16_t (*)[256])malloc (sizeof (*wps->dsd.summed_probabilities) * wps->dsd.history_bins);
     wps->dsd.probabilities = (unsigned char (*)[256])malloc (sizeof (*wps->dsd.probabilities) * wps->dsd.history_bins);
 
     max_probability = *wps->dsd.byteptr++;
 
     if (max_probability < 0xff) {
         unsigned char *outptr = (unsigned char *) wps->dsd.probabilities;
         unsigned char *outend = outptr + sizeof (*wps->dsd.probabilities) * wps->dsd.history_bins;
 
         while (outptr < outend && wps->dsd.byteptr < wps->dsd.endptr) {
             int code = *wps->dsd.byteptr++;
 
             if (code > max_probability) {
                 int zcount = code - max_probability;
 
                 while (outptr < outend && zcount--)
                     *outptr++ = 0;
             }
             else if (code)
                 *outptr++ = code;
             else
                 break;
         }
 
         if (outptr < outend || (wps->dsd.byteptr < wps->dsd.endptr && *wps->dsd.byteptr++))
             return FALSE;
     }
     else if (wps->dsd.endptr - wps->dsd.byteptr > (int) sizeof (*wps->dsd.probabilities) * wps->dsd.history_bins) {
         memcpy (wps->dsd.probabilities, wps->dsd.byteptr, sizeof (*wps->dsd.probabilities) * wps->dsd.history_bins);
         wps->dsd.byteptr += sizeof (*wps->dsd.probabilities) * wps->dsd.history_bins;
     }
     else
         return FALSE;
 
     for (bi = 0; bi < wps->dsd.history_bins; ++bi) {
         int32_t sum_values;
 
         for (sum_values = i = 0; i < 256; ++i)
             wps->dsd.summed_probabilities [bi] [i] = sum_values += wps->dsd.probabilities [bi] [i];
 
         if (sum_values) {
             if ((total_summed_probabilities += sum_values) > wps->dsd.history_bins * MAX_BYTES_PER_BIN)
                 return FALSE;
 
             wps->dsd.value_lookup [bi] = lb_ptr;
 
             for (i = 0; i < 256; i++) {
                 int c = wps->dsd.probabilities [bi] [i];
 
                 while (c--)
                     *lb_ptr++ = i;
             }
         }
     }
 
     if (wps->dsd.endptr - wps->dsd.byteptr < 4 || total_summed_probabilities > wps->dsd.history_bins * MAX_BYTES_PER_BIN)
         return FALSE;
 
     for (i = 4; i--;)
         wps->dsd.value = (wps->dsd.value << 8) | *wps->dsd.byteptr++;
 
     wps->dsd.p0 = wps->dsd.p1 = 0;
     wps->dsd.low = 0; wps->dsd.high = 0xffffffff;
     wps->dsd.ready = 1;
 
     return TRUE;
 }
diff --git a/src/wavpack_local.h b/src/wavpack_local.h
index c591b70..aeca646 100644
--- a/src/wavpack_local.h
+++ b/src/wavpack_local.h
@@ -251,54 +251,54 @@ typedef struct {
 typedef struct {
     WavpackHeader wphdr;
     struct words_data w;
 
     unsigned char *blockbuff, *blockend;
     unsigned char *block2buff, *block2end;
     int32_t *sample_buffer;
 
     int64_t sample_index;
     int bits, num_terms, mute_error, joint_stereo, false_stereo, shift;
     int num_decorrs, num_passes, best_decorr, mask_decorr;
     uint32_t crc, crc_x, crc_wvx;
     Bitstream wvbits, wvcbits, wvxbits;
     int init_done, wvc_skip;
     float delta_decay;
 
     unsigned char int32_sent_bits, int32_zeros, int32_ones, int32_dups;
     unsigned char float_flags, float_shift, float_max_exp, float_norm_exp;
 
     struct {
         int32_t shaping_acc [2], shaping_delta [2], error [2];
         double noise_sum, noise_ave, noise_max;
         int16_t *shaping_data, *shaping_array;
         int32_t shaping_samples;
     } dc;
 
     struct decorr_pass decorr_passes [MAX_NTERMS], analysis_pass;
     const WavpackDecorrSpec *decorr_specs;
 
     struct {
         unsigned char *byteptr, *endptr, (*probabilities) [256], *lookup_buffer, **value_lookup, mode, ready;
         int history_bins, p0, p1;
-        int16_t (*summed_probabilities) [256];
+        uint16_t (*summed_probabilities) [256];
         uint32_t low, high, value;
         DSDfilters filters [2];
         int32_t *ptable;
     } dsd;
 
 } WavpackStream;
 
 // flags for float_flags:
 
 #define FLOAT_SHIFT_ONES 1      // bits left-shifted into float = '1'
 #define FLOAT_SHIFT_SAME 2      // bits left-shifted into float are the same
 #define FLOAT_SHIFT_SENT 4      // bits shifted into float are sent literally
 #define FLOAT_ZEROS_SENT 8      // "zeros" are not all real zeros
 #define FLOAT_NEG_ZEROS  0x10   // contains negative zeros
 #define FLOAT_EXCEPTIONS 0x20   // contains exceptions (inf, nan, etc.)
 
 /////////////////////////////// WavPack Context ///////////////////////////////
 
 // This internal structure holds everything required to encode or decode WavPack
 // files. It is recommended that direct access to this structure be minimized
 // and the provided utilities used instead.
