commit 85fa6e1874189a349e9842fbf1ed90e2fd474588
Author: Chris Liddell <chris.liddell@artifex.com>
Date:   Sat Jan 29 09:02:24 2022 +0000

    oss-fuzz 44151: pdfi_TJ() hold a local, ref counted reference
    
    to the operand array, in case an error causes the op stack reference to it to
    disappear, and the object to be freed while we're still using it.

diff --git a/pdf/pdf_text.c b/pdf/pdf_text.c
index 9491df380..f2b94312d 100644
--- a/pdf/pdf_text.c
+++ b/pdf/pdf_text.c
@@ -359,137 +359,133 @@ TD_error:
 /* This routine sets up most of the text params structure. In particular it
  * creates and initialises the x and y widths arrays, and for type 3 fonts
  * it creates and populates the 'chars' member.
  * It also sets the delta_sace member and partially set sup the 'operation'
  * bitfield. It does not set any of the TEXT_DO_* fields because we intend
  * to use this routine to set up the 'common' parts of the structure and
  * then we will twiddle the 'TEXT_DO_*' fields as required for the type of
  * operation we are doing (fill, create path for stroke, create path for fill)
  */
 static int pdfi_show_set_params(pdf_context *ctx, pdf_string *s, gs_text_params_t *text)
 {
     pdf_font *current_font = NULL;
     gs_matrix mat;
     float *x_widths = NULL, *y_widths = NULL, width;
     double Tw = 0, Tc = 0;
     int i, code;
 
     text->data.chars = NULL;
     text->x_widths = NULL;
     text->y_widths = NULL;
 
     /* NOTE: we don't scale the FontMatrix we leave it as the default
      * and do all our scaling with the textmatrix/ctm. This saves having
      * to create multiple instances of the same font, and simplifies
      * composite fonts significantly.
      */
     current_font = pdfi_get_current_pdf_font(ctx);
 
     if (current_font == NULL)
         return_error(gs_error_invalidfont);
 
     /* Division by PDFfontsize because these are in unscaled font units,
        and the font scale is now pickled into the text matrix, so we have to
        undo that.
      */
     Tc = gs_currenttextspacing(ctx->pgs) / ctx->pgs->PDFfontsize;
 
     if (current_font->pdfi_font_type == e_pdf_font_type1 ||
         current_font->pdfi_font_type == e_pdf_font_cff ||
         current_font->pdfi_font_type == e_pdf_font_type3 ||
         current_font->pdfi_font_type == e_pdf_font_cff ||
         current_font->pdfi_font_type == e_pdf_font_truetype ||
         current_font->pdfi_font_type == e_pdf_font_type0)
     {
         /* For Type 0 fonts, we apply the DW/W/DW2/W2 values when we retrieve the metrics for
            setcachedevice - see pdfi_fapi_set_cache()
          */
         if (current_font->pdfi_font_type == e_pdf_font_type0 || current_font->Widths == NULL) {
             text->operation = TEXT_RETURN_WIDTH;
             if (Tc != 0) {
                 text->operation |= TEXT_ADD_TO_ALL_WIDTHS;
                 if (current_font->pfont && current_font->pfont->WMode == 0) {
                     text->delta_all.x = Tc;
                     text->delta_all.y = 0;
                 } else {
                     text->delta_all.y = Tc;
                     text->delta_all.x = 0;
                 }
             }
         } else {
             gs_point pt;
 
             x_widths = (float *)gs_alloc_bytes(ctx->memory, s->length * sizeof(float), "X widths array for text");
             y_widths = (float *)gs_alloc_bytes(ctx->memory, s->length * sizeof(float), "Y widths array for text");
             if (x_widths == NULL || y_widths == NULL) {
                 code = gs_note_error(gs_error_VMerror);
                 goto text_params_error;
             }
 
             memset(x_widths, 0x00, s->length * sizeof(float));
             memset(y_widths, 0x00, s->length * sizeof(float));
 
             /* To calculate the Width (which is defined in unscaled text units) as a value in user
              * space we need to transform it by the FontMatrix
              */
             mat = current_font->pfont->FontMatrix;
 
             for (i = 0;i < s->length; i++) {
                 /* Get the width (in unscaled text units) */
                 if (s->data[i] < current_font->FirstChar || s->data[i] > current_font->LastChar)
                     width = 0;
                 else
                     width = current_font->Widths[s->data[i] - current_font->FirstChar];
                 /* And convert the width into an appropriate value for the current environment */
                 gs_distance_transform(width, 0, &mat, &pt);
                 x_widths[i] = hypot(pt.x, pt.y) * (width < 0 ? -1.0 : 1.0);
                 /* Add any Tc value */
                 x_widths[i] += Tc;
             }
             text->operation = TEXT_RETURN_WIDTH | TEXT_REPLACE_WIDTHS;
             text->x_widths = x_widths;
             text->y_widths = y_widths;
             text->widths_size = s->length * 2;
         }
 
         Tw = gs_currentwordspacing(ctx->pgs);
         if (Tw != 0) {
             text->operation |= TEXT_ADD_TO_SPACE_WIDTH;
             /* Division by PDFfontsize because these are in unscaled font units,
                and the font scale is now pickled into the text matrix, so we have to
                undo that.
              */
             if (current_font->pfont && current_font->pfont->WMode == 0) {
                 text->delta_space.x = Tw / ctx->pgs->PDFfontsize;
                 text->delta_space.y = 0;
             } else {
                 text->delta_space.y = Tw / ctx->pgs->PDFfontsize;
                 text->delta_space.x = 0;
             }
             text->space.s_char = 0x20;
         }
 
         if (current_font->pdfi_font_type == e_pdf_font_type3) {
             text->operation |= TEXT_FROM_CHARS;
             text->data.chars = (const gs_char *)gs_alloc_bytes(ctx->memory, s->length * sizeof(gs_char), "string gs_chars");
             if (!text->data.chars) {
                 code = gs_note_error(gs_error_VMerror);
                 goto text_params_error;
             }
 
             for (i = 0; i < s->length; i++) {
                 ((gs_char *)text->data.chars)[i] = (gs_char)s->data[i];
             }
         }
         else {
             text->operation |= TEXT_FROM_BYTES;
             text->data.bytes = (const byte *)s->data;
         }
         text->size = s->length;
     }
-    else {
-        code = gs_note_error(gs_error_invalidfont);
-        goto text_params_error;
-    }
     return 0;
 
 text_params_error:
@@ -1173,131 +1169,133 @@ Tj_error:
 int pdfi_TJ(pdf_context *ctx)
 {
     int code = 0, i;
     pdf_array *a = NULL;
     pdf_obj *o = NULL;
     double dx = 0;
     gs_point pt;
     gs_matrix saved, Trm;
     gs_point initial_point, current_point;
     double linewidth = ctx->pgs->line_params.half_width;
     pdf_font *current_font = NULL;
 
     current_font = pdfi_get_current_pdf_font(ctx);
     if (current_font == NULL)
         return_error(gs_error_invalidfont);
 
     if (ctx->text.BlockDepth == 0) {
         pdfi_set_warning(ctx, 0, NULL, W_PDF_TEXTOPNOBT, "pdfi_TJ", NULL);
     }
 
     if (pdfi_count_stack(ctx) < 1)
         return_error(gs_error_stackunderflow);
 
     if (pdfi_oc_is_off(ctx))
         goto exit;
 
     a = (pdf_array *)ctx->stack_top[-1];
     if (a->type != PDF_ARRAY) {
         pdfi_pop(ctx, 1);
         return gs_note_error(gs_error_typecheck);
     }
+    pdfi_countup(a);
+    pdfi_pop(ctx, 1);
 
     /* Save the CTM for later restoration */
     saved = ctm_only(ctx->pgs);
     gs_currentpoint(ctx->pgs, &initial_point);
 
     /* Calculate the text rendering matrix, see section 1.7 PDF Reference
      * page 409, section 5.3.3 Text Space details.
      */
     Trm.xx = ctx->pgs->PDFfontsize * (ctx->pgs->texthscaling / 100);
     Trm.xy = 0;
     Trm.yx = 0;
     Trm.yy = ctx->pgs->PDFfontsize;
     Trm.tx = 0;
     Trm.ty = ctx->pgs->textrise;
 
     gs_matrix_multiply(&Trm, &ctx->pgs->textmatrix, &Trm);
 
     if (!ctx->device_state.preserve_tr_mode) {
         gs_distance_transform_inverse(ctx->pgs->line_params.half_width, 0, &Trm, &pt);
         ctx->pgs->line_params.half_width = sqrt((pt.x * pt.x) + (pt.y * pt.y));
     } else {
         /* We have to adjust the stroke width for pdfwrite so that we take into
          * account the CTM, but we do not spply the font scaling. Because of
          * the disconnect between pdfwrite and the interpreter, we also have to
          * remove the scaling due to the resolution.
          */
         gs_matrix devmatrix, matrix;
         gx_device *device = gs_currentdevice(ctx->pgs);
 
         devmatrix.xx = 72.0 / device->HWResolution[0];
         devmatrix.xy = 0;
         devmatrix.yx = 0;
         devmatrix.yy = 72.0 / device->HWResolution[1];
         devmatrix.tx = 0;
         devmatrix.ty = 0;
 
         code = gs_matrix_multiply(&saved, &devmatrix, &matrix);
         if (code < 0)
             goto exit;
 
         gs_distance_transform(ctx->pgs->line_params.half_width, 0, &matrix, &pt);
         ctx->pgs->line_params.half_width = sqrt((pt.x * pt.x) + (pt.y * pt.y));
     }
 
     gs_matrix_multiply(&Trm, &ctm_only(ctx->pgs), &Trm);
     gs_setmatrix(ctx->pgs, &Trm);
 
     code = gs_moveto(ctx->pgs, 0, 0);
     if (code < 0)
         goto TJ_error;
 
     for (i = 0; i < pdfi_array_size(a); i++) {
         code = pdfi_array_get(ctx, a, (uint64_t)i, &o);
         if (code < 0)
             goto TJ_error;
 
         if (o->type == PDF_INT) {
             dx = (double)((pdf_num *)o)->value.i / -1000;
             if (current_font->pfont && current_font->pfont->WMode == 0)
                 code = gs_rmoveto(ctx->pgs, dx, 0);
             else
                 code = gs_rmoveto(ctx->pgs, 0, dx);
             if (code < 0)
                 goto TJ_error;
         } else {
             if (o->type == PDF_REAL) {
                 dx = ((pdf_num *)o)->value.d / -1000;
                 if (current_font->pfont && current_font->pfont->WMode == 0)
                     code = gs_rmoveto(ctx->pgs, dx, 0);
                 else
                     code = gs_rmoveto(ctx->pgs, 0, dx);
                 if (code < 0)
                     goto TJ_error;
             } else {
                 if (o->type == PDF_STRING)
                     code = pdfi_show(ctx, (pdf_string *)o);
                 else
                     code = gs_note_error(gs_error_typecheck);
             }
         }
         pdfi_countdown(o);
         o = NULL;
         if (code < 0)
             goto TJ_error;
     }
 
     /* Update the Text matrix with the current point, for the next operation
      */
     gs_currentpoint(ctx->pgs, &current_point);
     Trm.xx = ctx->pgs->PDFfontsize * (ctx->pgs->texthscaling / 100);
     Trm.xy = 0;
     Trm.yx = 0;
     Trm.yy = ctx->pgs->PDFfontsize;
     Trm.tx = 0;
     Trm.ty = 0;
     gs_matrix_multiply(&Trm, &ctx->pgs->textmatrix, &Trm);
 
     gs_distance_transform(current_point.x, current_point.y, &Trm, &pt);
     ctx->pgs->textmatrix.tx += pt.x;
     ctx->pgs->textmatrix.ty += pt.y;
@@ -1305,14 +1303,14 @@ int pdfi_TJ(pdf_context *ctx)
 TJ_error:
     pdfi_countdown(o);
     /* Restore the CTM to the saved value */
     gs_setmatrix(ctx->pgs, &saved);
     /* And restore the currentpoint */
     gs_moveto(ctx->pgs, initial_point.x, initial_point.y);
     /* And the line width */
     ctx->pgs->line_params.half_width = linewidth;
 
  exit:
-    pdfi_pop(ctx, 1);
+    pdfi_countdown(a);
     return code;
 }
 
