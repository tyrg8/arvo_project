commit 7dfcea03c37d17ca0d05d7a54f9245a8fde735cc
Author: Nick Wellnhofer <wellnhofer@aevum.de>
Date:   Wed Oct 11 14:19:04 2023 +0200

    dict: Fix integer overflow in xmlDictAddString
    
    Short-lived regression.
    
    Older versions didn't check for integer overflow, but limited name
    length to INT_MAX / 2. Reintroduce this limit.
    
    Found by OSS-Fuzz.

diff --git a/dict.c b/dict.c
index a6a3c9bf..d4ce3835 100644
--- a/dict.c
+++ b/dict.c
@@ -134,36 +134,46 @@ static const xmlChar *
 xmlDictAddString(xmlDictPtr dict, const xmlChar *name, unsigned int namelen) {
     xmlDictStringsPtr pool;
     const xmlChar *ret;
     size_t size = 0; /* + sizeof(_xmlDictStrings) == 1024 */
     size_t limit = 0;
 
     pool = dict->strings;
     while (pool != NULL) {
 	if ((size_t)(pool->end - pool->free) > namelen)
 	    goto found_pool;
 	if (pool->size > size) size = pool->size;
         limit += pool->size;
 	pool = pool->next;
     }
     /*
      * Not found, need to allocate
      */
     if (pool == NULL) {
         if ((dict->limit > 0) && (limit > dict->limit)) {
             return(NULL);
         }
 
-        if (size == 0) size = 1000;
-	else size *= 4; /* exponential growth */
-        if (size < 4 * namelen)
-	    size = 4 * namelen; /* just in case ! */
+        if (size == 0) {
+            size = 1000;
+        } else {
+            if (size < (SIZE_MAX - sizeof(xmlDictStrings)) / 4)
+                size *= 4; /* exponential growth */
+            else
+                size = SIZE_MAX - sizeof(xmlDictStrings);
+        }
+        if (size / 4 < namelen) {
+            if ((size_t) namelen + 0 < (SIZE_MAX - sizeof(xmlDictStrings)) / 4)
+                size = 4 * (size_t) namelen; /* just in case ! */
+            else
+                return(NULL);
+        }
 	pool = (xmlDictStringsPtr) xmlMalloc(sizeof(xmlDictStrings) + size);
 	if (pool == NULL)
 	    return(NULL);
 	pool->size = size;
 	pool->nbStrings = 0;
 	pool->free = &pool->array[0];
 	pool->end = &pool->array[size];
 	pool->next = dict->strings;
 	dict->strings = pool;
     }
@@ -647,145 +657,145 @@ static const xmlDictEntry *
 xmlDictLookupInternal(xmlDictPtr dict, const xmlChar *prefix,
                       const xmlChar *name, int maybeLen, int update) {
     xmlDictEntry *entry = NULL;
     const xmlChar *ret;
     unsigned hashValue;
     size_t maxLen, len, plen, klen;
     int found = 0;
 
     if ((dict == NULL) || (name == NULL))
 	return(NULL);
 
     maxLen = (maybeLen < 0) ? SIZE_MAX : (size_t) maybeLen;
 
     if (prefix == NULL) {
         hashValue = xmlDictHashName(dict->seed, name, maxLen, &len);
-        if (len > INT_MAX)
+        if (len > INT_MAX / 2)
             return(NULL);
         klen = len;
     } else {
         hashValue = xmlDictHashQName(dict->seed, prefix, name, &plen, &len);
-        if ((len > INT_MAX) || (plen >= INT_MAX - len))
+        if ((len > INT_MAX / 2) || (plen >= INT_MAX / 2 - len))
             return(NULL);
         klen = plen + 1 + len;
     }
 
     if ((dict->limit > 0) && (klen >= dict->limit))
         return(NULL);
 
     /*
      * Check for an existing entry
      */
     if (dict->size > 0)
         entry = xmlDictFindEntry(dict, prefix, name, klen, hashValue, &found);
     if (found)
         return(entry);
 
     if ((dict->subdict != NULL) && (dict->subdict->size > 0)) {
         xmlDictEntry *subEntry;
         unsigned subHashValue;
 
         if (prefix == NULL)
             subHashValue = xmlDictHashName(dict->subdict->seed, name, len,
                                            &len);
         else
             subHashValue = xmlDictHashQName(dict->subdict->seed, prefix, name,
                                             &plen, &len);
         subEntry = xmlDictFindEntry(dict->subdict, prefix, name, klen,
                                     subHashValue, &found);
         if (found)
             return(subEntry);
     }
 
     if (!update)
         return(NULL);
 
     /*
      * Grow the hash table if needed
      */
     if (dict->nbElems + 1 > dict->size / MAX_FILL_DENOM * MAX_FILL_NUM) {
         unsigned newSize, mask, displ, pos;
 
         if (dict->size == 0) {
             newSize = MIN_HASH_SIZE;
         } else {
             if (dict->size >= MAX_HASH_SIZE)
                 return(NULL);
             newSize = dict->size * 2;
         }
         if (xmlDictGrow(dict, newSize) != 0)
             return(NULL);
 
         /*
          * Find new entry
          */
         mask = dict->size - 1;
         displ = 0;
         pos = hashValue & mask;
         entry = &dict->table[pos];
 
         while ((entry->hashValue != 0) &&
                ((pos - entry->hashValue) & mask) >= displ) {
             displ++;
             pos++;
             entry++;
             if ((pos & mask) == 0)
                 entry = dict->table;
         }
     }
 
     if (prefix == NULL)
         ret = xmlDictAddString(dict, name, len);
     else
         ret = xmlDictAddQString(dict, prefix, plen, name, len);
     if (ret == NULL)
         return(NULL);
 
     /*
      * Shift the remainder of the probe sequence to the right
      */
     if (entry->hashValue != 0) {
         const xmlDictEntry *end = &dict->table[dict->size];
         const xmlDictEntry *cur = entry;
 
         do {
             cur++;
             if (cur >= end)
                 cur = dict->table;
         } while (cur->hashValue != 0);
 
         if (cur < entry) {
             /*
              * If we traversed the end of the buffer, handle the part
              * at the start of the buffer.
              */
             memmove(&dict->table[1], dict->table,
                     (char *) cur - (char *) dict->table);
             cur = end - 1;
             dict->table[0] = *cur;
         }
 
         memmove(&entry[1], entry, (char *) cur - (char *) entry);
     }
 
     /*
      * Populate entry
      */
     entry->hashValue = hashValue;
     entry->name = ret;
 
     dict->nbElems++;
 
     return(entry);
 }
 
 /**
  * xmlDictLookup:
  * @dict: dictionary
  * @name: string key
  * @len: length of the key, if -1 it is recomputed
  *
  * Lookup a string and add it to the dictionary if it wasn't found.
  *
  * Returns the interned copy of the string or NULL if a memory allocation
  * failed.
  */
