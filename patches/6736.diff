commit dc047e7d81edcedd1f4e1d3e5f57a4bef6175525
Author: Even Rouault <even.rouault@mines-paris.org>
Date:   Sun Mar 4 16:40:17 2018 +0000

    AVCBIN: fix index out of bound read. Fixes https://oss-fuzz.com/v2/testcase-detail/5104654284226560. Credit to OSS Fuzz
    
    git-svn-id: https://svn.osgeo.org/gdal/trunk@41633 f0d54148-0727-0410-94bb-9a71ac55c965

diff --git a/gdal/ogr/ogrsf_frmts/avc/avc_bin.cpp b/gdal/ogr/ogrsf_frmts/avc/avc_bin.cpp
index 630d6051d2..a28602ae63 100644
--- a/gdal/ogr/ogrsf_frmts/avc/avc_bin.cpp
+++ b/gdal/ogr/ogrsf_frmts/avc/avc_bin.cpp
@@ -1980,306 +1980,306 @@ char **AVCBinReadListTables(const char *pszInfoPath, const char *pszCoverName,
 /**********************************************************************
  *                         _AVCBinReadOpenTable()
  *
  * (This function is for internal library use... external calls should
  * go to AVCBinReadOpen() with type AVCFileTABLE instead)
  *
  * Open a INFO table, read the header file (.NIT), and finally open
  * the associated data file to be ready to read records from it.
  *
  * Returns a valid AVCBinFile handle, or nullptr if the file could
  * not be opened.
  *
  * _AVCBinReadCloseTable() will eventually have to be called to release the
  * resources used by the AVCBinFile structure.
  **********************************************************************/
 AVCBinFile *_AVCBinReadOpenTable(const char *pszInfoPath,
                                  const char *pszTableName,
                                  AVCCoverType eCoverType,
                                  AVCDBCSInfo *psDBCSInfo)
 {
     AVCBinFile    *psFile;
     AVCRawBinFile *hFile;
     AVCTableDef    sTableDef;
     AVCFieldInfo  *pasFieldDef;
     char          *pszFname;
     GBool          bFound;
     int            i;
     size_t         nFnameLen;
 
     memset(&sTableDef, 0, sizeof(sTableDef));
     sTableDef.numFields = 0;
     sTableDef.pasFieldDef = nullptr;
 
     /* Alloc a buffer big enough for the longest possible filename...
      */
     nFnameLen = strlen(pszInfoPath)+81;
     pszFname = (char*)CPLMalloc(nFnameLen);
 
     /*-----------------------------------------------------------------
      * Fetch info about this table from the "arc.dir"
      *----------------------------------------------------------------*/
     if (eCoverType == AVCCoverWeird)
         snprintf(pszFname, nFnameLen, "%sarcdr9", pszInfoPath);
     else
         snprintf(pszFname, nFnameLen, "%sarc.dir", pszInfoPath);
 
     AVCAdjustCaseSensitiveFilename(pszFname);
 
     hFile = AVCRawBinOpen(pszFname, "r", AVC_COVER_BYTE_ORDER(eCoverType),
                           psDBCSInfo);
     bFound = FALSE;
 
     if (hFile)
     {
         while(!bFound && _AVCBinReadNextArcDir(hFile, &sTableDef) == 0)
         {
             if (!sTableDef.bDeletedFlag &&
                 EQUALN(sTableDef.szTableName, pszTableName,
                        strlen(pszTableName)) &&                _AVCBinReadInfoFileExists(pszInfoPath,
                                           sTableDef.szInfoFile,
                                           eCoverType))
             {
                 bFound = TRUE;
             }
         }
         AVCRawBinClose(hFile);
     }
 
     /* Hummm... quite likely that this table does not exist!
      */
     if (!bFound)
     {
         CPLError(CE_Failure, CPLE_OpenFailed,
                  "Failed to open table %s", pszTableName);
         CPLFree(pszFname);
         return nullptr;
     }
     /* To please Coverity */
     if( sTableDef.numFields < 0 || sTableDef.numFields >= 32767 )
     {
         CPLError(CE_Failure, CPLE_OpenFailed,
                  "Invalid numFields in %s", pszTableName);
         CPLFree(pszFname);
         return nullptr;
     }
 
     /*-----------------------------------------------------------------
      * Establish the location of the data file... depends on the
      * szExternal[] field.
      *----------------------------------------------------------------*/
     if (EQUAL(sTableDef.szExternal, "XX"))
     {
         /*-------------------------------------------------------------
          * The data file is located outside of the INFO directory.
          * Read the path to the data file from the arc####.dat file
          *------------------------------------------------------------*/
         _AVCBinReadGetInfoFilename(pszInfoPath, sTableDef.szInfoFile,
                                    "dat", eCoverType, pszFname, nFnameLen);
         AVCAdjustCaseSensitiveFilename(pszFname);
 
         hFile = AVCRawBinOpen(pszFname, "r", AVC_COVER_BYTE_ORDER(eCoverType),
                               psDBCSInfo);
 
         if (hFile)
         {
             /* Read the relative file path, and remove trailing spaces.
              */
             AVCRawBinReadBytes(hFile, 80, (GByte *)sTableDef.szDataFile);
             sTableDef.szDataFile[80] = '\0';
 
             for(i = (int)strlen(sTableDef.szDataFile)-1;
-                isspace((unsigned char)sTableDef.szDataFile[i]);
+                i >= 0 && isspace((unsigned char)sTableDef.szDataFile[i]);
                 i--)
             {
                 sTableDef.szDataFile[i] = '\0';
             }
 
             AVCRawBinClose(hFile);
         }
         else
         {
             CPLError(CE_Failure, CPLE_OpenFailed,
                      "Failed to open file %s", pszFname);
             CPLFree(pszFname);
             return nullptr;
         }
     }
     else
     {
         /*-------------------------------------------------------------
          * The data file IS the arc####.dat file
          * Note: sTableDef.szDataFile must be relative to info directory
          *------------------------------------------------------------*/
         _AVCBinReadGetInfoFilename(pszInfoPath, sTableDef.szInfoFile,
                                    "dat", eCoverType, pszFname, nFnameLen);
         snprintf(sTableDef.szDataFile, sizeof(sTableDef.szDataFile), "%s", pszFname+strlen(pszInfoPath));
    }
 
     /*-----------------------------------------------------------------
      * Read the table field definitions from the "arc####.nit" file.
      *----------------------------------------------------------------*/
     _AVCBinReadGetInfoFilename(pszInfoPath, sTableDef.szInfoFile,
                                "nit", eCoverType, pszFname, nFnameLen);
     AVCAdjustCaseSensitiveFilename(pszFname);
 
     hFile = AVCRawBinOpen(pszFname, "r", AVC_COVER_BYTE_ORDER(eCoverType),
                           psDBCSInfo);
 
     if (hFile)
     {
         int iField;
 
         pasFieldDef = (AVCFieldInfo*)CPLCalloc(sTableDef.numFields,
                                                sizeof(AVCFieldInfo));
 
         /*-------------------------------------------------------------
          * There must be at least sTableDef.numFields valid entries
          * in the .NIT file...
          *
          * Note that we ignore any deleted field entries (entries with
          * index=-1)... I don't see any use for these deleted fields...
          * and I don't understand why Arc/Info includes them in their
          * E00 table headers...
          *------------------------------------------------------------*/
         for(i=0, iField=0; iField<sTableDef.numFields; i++)
         {
             if (_AVCBinReadNextArcNit(hFile, &(pasFieldDef[iField])) != 0)
             {
                 /* Problems.... is the NIT file corrupt???
                  */
                 AVCRawBinClose(hFile);
                 CPLFree(pszFname);
                 CPLFree(pasFieldDef);
                 CPLError(CE_Failure, CPLE_FileIO,
                          "Failed reading table field info for table %s "
                          "File may be corrupt?",  pszTableName);
                 return nullptr;
             }
 
             /*---------------------------------------------------------
              * Check if the field has been deleted (nIndex == -1).
              * We just ignore deleted fields
              *--------------------------------------------------------*/
             if (pasFieldDef[iField].nIndex > 0)
                 iField++;
         }
 
         AVCRawBinClose(hFile);
     }
     else
     {
         CPLError(CE_Failure, CPLE_OpenFailed,
                  "Failed to open file %s", pszFname);
         CPLFree(pszFname);
         return nullptr;
     }
 
 
     /*-----------------------------------------------------------------
      * Open the data file... ready to read records from it.
      * If the header says that table has 0 records, then we don't
      * try to open the file... but we don't consider that as an error.
      *----------------------------------------------------------------*/
     if (sTableDef.numRecords > 0 &&
         AVCFileExists(pszInfoPath, sTableDef.szDataFile))
     {
         VSIStatBufL      sStatBuf;
 
         snprintf(pszFname, nFnameLen, "%s%s", pszInfoPath, sTableDef.szDataFile);
         AVCAdjustCaseSensitiveFilename(pszFname);
 
         hFile = AVCRawBinOpen(pszFname, "r", AVC_COVER_BYTE_ORDER(eCoverType),
                               psDBCSInfo);
 
         /* OOPS... data file does not exist!
          */
         if (hFile == nullptr)
         {
             CPLError(CE_Failure, CPLE_OpenFailed,
                      "Failed to open file %s", pszFname);
             CPLFree(pszFname);
             return nullptr;
         }
 
         /*-------------------------------------------------------------
          * In some cases, the number of records field for a table in the
          * arc.dir does not correspond to the real number of records
          * in the data file.  In this kind of situation, the number of
          * records returned by Arc/Info in an E00 file will be based
          * on the real data file size, and not on the value from the arc.dir.
          *
          * Fetch the data file size, and correct the number of record
          * field in the table header if necessary.
          *------------------------------------------------------------*/
         if ( VSIStatL(pszFname, &sStatBuf) != -1 &&
              sTableDef.nRecSize > 0 &&
              sStatBuf.st_size/sTableDef.nRecSize != sTableDef.numRecords)
         {
             sTableDef.numRecords = (int)(sStatBuf.st_size/sTableDef.nRecSize);
         }
 
     }
     else
     {
         hFile = nullptr;
         sTableDef.numRecords = 0;
     }
 
     /*-----------------------------------------------------------------
      * Alloc. and init. the AVCBinFile structure.
      *----------------------------------------------------------------*/
     psFile = (AVCBinFile*)CPLCalloc(1, sizeof(AVCBinFile));
 
     psFile->psRawBinFile = hFile;
     psFile->eCoverType = AVCCoverV7;
     psFile->eFileType = AVCFileTABLE;
     psFile->pszFilename = pszFname;
 
     psFile->hdr.psTableDef = (AVCTableDef*)CPLMalloc(sizeof(AVCTableDef));
     *(psFile->hdr.psTableDef) = sTableDef;
 
     psFile->hdr.psTableDef->pasFieldDef = pasFieldDef;
 
     /* We can't really tell the precision from a Table header...
      * just set an arbitrary value... it probably won't be used anyways!
      */
     psFile->nPrecision = AVC_SINGLE_PREC;
 
     /*-----------------------------------------------------------------
      * Allocate temp. structures to use to read records from the file
      * And allocate buffers for those fields that are stored as strings.
      *----------------------------------------------------------------*/
     psFile->cur.pasFields = (AVCField*)CPLCalloc(sTableDef.numFields,
                                                  sizeof(AVCField));
 
     for(i=0; i<sTableDef.numFields; i++)
     {
         if (pasFieldDef[i].nType1*10 == AVC_FT_DATE ||
             pasFieldDef[i].nType1*10 == AVC_FT_CHAR ||
             pasFieldDef[i].nType1*10 == AVC_FT_FIXINT ||
             pasFieldDef[i].nType1*10 == AVC_FT_FIXNUM )
         {
             psFile->cur.pasFields[i].pszStr =
                 (GByte*)CPLCalloc(pasFieldDef[i].nSize+1, sizeof(char));
         }
     }
 
     return psFile;
 }
 
 
 /**********************************************************************
  *                         _AVCBinReadNextTableRec()
  *
  * (This function is for internal library use... external calls should
  * go to AVCBinReadNextTableRec() instead)
  *
  * Reads the next record from an attribute table and fills the
  * pasFields[] array.
  *
  * Note that it is assumed that the pasFields[] array has been properly
  * initialized, re the allocation of buffers for fields stored as
  * strings.
  *
  * Returns 0 on success or -1 on error.
  **********************************************************************/
