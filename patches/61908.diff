commit b8dabfb1e1ec98b0d5be9369fc9a9c4b44b2c8cf
Author: Daniel Stenberg <daniel@haxx.se>
Date:   Fri Sep 1 10:35:40 2023 +0200

    awssiv4: avoid freeing the date pointer on error
    
    Since it was not allocated, don't free it even if it was wrong syntax
    
    Bug: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=61908
    
    Follow-up to b137634ba3adb
    
    Closes #11782

diff --git a/lib/http_aws_sigv4.c b/lib/http_aws_sigv4.c
index 3abfb096a..686d26837 100644
--- a/lib/http_aws_sigv4.c
+++ b/lib/http_aws_sigv4.c
@@ -134,136 +134,138 @@ static void trim_headers(struct curl_slist *head)
 /* timestamp should point to a buffer of at last TIMESTAMP_SIZE bytes */
 static CURLcode make_headers(struct Curl_easy *data,
                              const char *hostname,
                              char *timestamp,
                              char *provider1,
                              char **date_header,
                              char *content_sha256_header,
                              struct dynbuf *canonical_headers,
                              struct dynbuf *signed_headers)
 {
   char date_hdr_key[DATE_HDR_KEY_LEN];
   char date_full_hdr[DATE_FULL_HDR_LEN];
   struct curl_slist *head = NULL;
   struct curl_slist *tmp_head = NULL;
   CURLcode ret = CURLE_OUT_OF_MEMORY;
   struct curl_slist *l;
   int again = 1;
 
   /* provider1 mid */
   Curl_strntolower(provider1, provider1, strlen(provider1));
   provider1[0] = Curl_raw_toupper(provider1[0]);
 
   msnprintf(date_hdr_key, DATE_HDR_KEY_LEN, "X-%s-Date", provider1);
 
   /* provider1 lowercase */
   Curl_strntolower(provider1, provider1, 1); /* first byte only */
   msnprintf(date_full_hdr, DATE_FULL_HDR_LEN,
             "x-%s-date:%s", provider1, timestamp);
 
   if(Curl_checkheaders(data, STRCONST("Host"))) {
     head = NULL;
   }
   else {
     char full_host[FULL_HOST_LEN + 1];
 
     if(data->state.aptr.host) {
       size_t pos;
 
       if(strlen(data->state.aptr.host) > FULL_HOST_LEN) {
         ret = CURLE_URL_MALFORMAT;
         goto fail;
       }
       strcpy(full_host, data->state.aptr.host);
       /* remove /r/n as the separator for canonical request must be '\n' */
       pos = strcspn(full_host, "\n\r");
       full_host[pos] = 0;
     }
     else {
       if(strlen(hostname) > MAX_HOST_LEN) {
         ret = CURLE_URL_MALFORMAT;
         goto fail;
       }
       msnprintf(full_host, FULL_HOST_LEN, "host:%s", hostname);
     }
 
     head = curl_slist_append(NULL, full_host);
     if(!head)
       goto fail;
   }
 
 
   if(*content_sha256_header) {
     tmp_head = curl_slist_append(head, content_sha256_header);
     if(!tmp_head)
       goto fail;
     head = tmp_head;
   }
 
   for(l = data->set.headers; l; l = l->next) {
     tmp_head = curl_slist_append(head, l->data);
     if(!tmp_head)
       goto fail;
     head = tmp_head;
   }
 
   trim_headers(head);
 
   *date_header = find_date_hdr(data, date_hdr_key);
   if(!*date_header) {
     tmp_head = curl_slist_append(head, date_full_hdr);
     if(!tmp_head)
       goto fail;
     head = tmp_head;
     *date_header = curl_maprintf("%s: %s\r\n", date_hdr_key, timestamp);
   }
   else {
     char *value;
 
     value = strchr(*date_header, ':');
-    if(!value)
+    if(!value) {
+      *date_header = NULL;
       goto fail;
+    }
     ++value;
     while(ISBLANK(*value))
       ++value;
     strncpy(timestamp, value, TIMESTAMP_SIZE - 1);
     timestamp[TIMESTAMP_SIZE - 1] = 0;
     *date_header = NULL;
   }
 
   /* alpha-sort in a case sensitive manner */
   do {
     again = 0;
     for(l = head; l; l = l->next) {
       struct curl_slist *next = l->next;
 
       if(next && strcmp(l->data, next->data) > 0) {
         char *tmp = l->data;
 
         l->data = next->data;
         next->data = tmp;
         again = 1;
       }
     }
   } while(again);
 
   for(l = head; l; l = l->next) {
     char *tmp;
 
     if(Curl_dyn_add(canonical_headers, l->data))
       goto fail;
     if(Curl_dyn_add(canonical_headers, "\n"))
       goto fail;
 
     tmp = strchr(l->data, ':');
     if(tmp)
       *tmp = 0;
 
     if(l != head) {
       if(Curl_dyn_add(signed_headers, ";"))
         goto fail;
     }
     if(Curl_dyn_add(signed_headers, l->data))
       goto fail;
   }
 
   ret = CURLE_OK;
