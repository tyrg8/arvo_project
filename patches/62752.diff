commit ae0d827fa483c4e569803d99f8dff14794c63a17
Author: Alan Modra <amodra@gmail.com>
Date:   Tue Oct 10 18:18:18 2023 +1030

    asan: buffer overflow in elf32_arm_get_synthetic_symtab
    
    Guard against fuzzed files where .plt size isn't commensurate with
    plt relocations.
    
            * elf32-arm.c (elf32_arm_plt0_size): Add data_size param.
            Return -1 if data_size is too small.
            (elf32_arm_plt_size): Likewise.  Delete temp var.  Formatting.
            (elf32_arm_get_synthetic_symtab): Adjust to suit.

diff --git a/bfd/elf32-arm.c b/bfd/elf32-arm.c
index f3ad270a6a0..18c30dbef86 100644
--- a/bfd/elf32-arm.c
+++ b/bfd/elf32-arm.c
@@ -19971,62 +19971,70 @@ read_code16 (const bfd *abfd, const bfd_byte *addr)
    or (bfd_vma) -1 if size can not be determined.  */
 
 static bfd_vma
-elf32_arm_plt0_size (const bfd *abfd, const bfd_byte *addr)
+elf32_arm_plt0_size (const bfd *abfd, const bfd_byte *addr,
+		     bfd_size_type data_size)
 {
   bfd_vma first_word;
   bfd_vma plt0_size;
 
+  if (data_size < 4)
+    return (bfd_vma) -1;
+
   first_word = read_code32 (abfd, addr);
 
   if (first_word == elf32_arm_plt0_entry[0])
     plt0_size = 4 * ARRAY_SIZE (elf32_arm_plt0_entry);
   else if (first_word == elf32_thumb2_plt0_entry[0])
     plt0_size = 4 * ARRAY_SIZE (elf32_thumb2_plt0_entry);
   else
     /* We don't yet handle this PLT format.  */
     return (bfd_vma) -1;
 
   return plt0_size;
 }
 
 /* Return size of plt entry starting at offset OFFSET
    of plt section located at address START
    or (bfd_vma) -1 if size can not be determined.  */
 
 static bfd_vma
-elf32_arm_plt_size (const bfd *abfd, const bfd_byte *start, bfd_vma offset)
+elf32_arm_plt_size (const bfd *abfd, const bfd_byte *start, bfd_vma offset,
+		    bfd_size_type data_size)
 {
   bfd_vma first_insn;
   bfd_vma plt_size = 0;
-  const bfd_byte *addr = start + offset;
 
   /* PLT entry size if fixed on Thumb-only platforms.  */
   if (read_code32 (abfd, start) == elf32_thumb2_plt0_entry[0])
-      return 4 * ARRAY_SIZE (elf32_thumb2_plt_entry);
+    return 4 * ARRAY_SIZE (elf32_thumb2_plt_entry);
 
   /* Respect Thumb stub if necessary.  */
-  if (read_code16 (abfd, addr) == elf32_arm_plt_thumb_stub[0])
+  if (offset + 2 > data_size)
+    return (bfd_vma) -1;
+  if (read_code16 (abfd, start + offset) == elf32_arm_plt_thumb_stub[0])
     {
       plt_size += 2 * ARRAY_SIZE (elf32_arm_plt_thumb_stub);
     }
 
   /* Strip immediate from first add.  */
-  first_insn = read_code32 (abfd, addr + plt_size) & 0xffffff00;
+  if (offset + plt_size + 4 > data_size)
+    return (bfd_vma) -1;
+  first_insn = read_code32 (abfd, start + offset + plt_size) & 0xffffff00;
 
 #ifdef FOUR_WORD_PLT
   if (first_insn == elf32_arm_plt_entry[0])
     plt_size += 4 * ARRAY_SIZE (elf32_arm_plt_entry);
 #else
   if (first_insn == elf32_arm_plt_entry_long[0])
     plt_size += 4 * ARRAY_SIZE (elf32_arm_plt_entry_long);
   else if (first_insn == elf32_arm_plt_entry_short[0])
     plt_size += 4 * ARRAY_SIZE (elf32_arm_plt_entry_short);
 #endif
   else
     /* We don't yet handle this PLT format.  */
     return (bfd_vma) -1;
 
   return plt_size;
 }
 
 /* Implementation is shamelessly borrowed from _bfd_elf_get_synthetic_symtab.  */
@@ -20035,110 +20043,110 @@ static long
 elf32_arm_get_synthetic_symtab (bfd *abfd,
 			       long symcount ATTRIBUTE_UNUSED,
 			       asymbol **syms ATTRIBUTE_UNUSED,
 			       long dynsymcount,
 			       asymbol **dynsyms,
 			       asymbol **ret)
 {
   asection *relplt;
   asymbol *s;
   arelent *p;
   long count, i, n;
   size_t size;
   Elf_Internal_Shdr *hdr;
   char *names;
   asection *plt;
   bfd_vma offset;
   bfd_byte *data;
 
   *ret = NULL;
 
   if ((abfd->flags & (DYNAMIC | EXEC_P)) == 0)
     return 0;
 
   if (dynsymcount <= 0)
     return 0;
 
   relplt = bfd_get_section_by_name (abfd, ".rel.plt");
   if (relplt == NULL)
     return 0;
 
   hdr = &elf_section_data (relplt)->this_hdr;
   if (hdr->sh_link != elf_dynsymtab (abfd)
       || (hdr->sh_type != SHT_REL && hdr->sh_type != SHT_RELA))
     return 0;
 
   plt = bfd_get_section_by_name (abfd, ".plt");
   if (plt == NULL)
     return 0;
 
   if (!elf32_arm_size_info.slurp_reloc_table (abfd, relplt, dynsyms, true))
     return -1;
 
   data = NULL;
   if (!bfd_get_full_section_contents (abfd, plt, &data))
     return -1;
 
   count = NUM_SHDR_ENTRIES (hdr);
   size = count * sizeof (asymbol);
   p = relplt->relocation;
   for (i = 0; i < count; i++, p += elf32_arm_size_info.int_rels_per_ext_rel)
     {
       size += strlen ((*p->sym_ptr_ptr)->name) + sizeof ("@plt");
       if (p->addend != 0)
 	size += sizeof ("+0x") - 1 + 8;
     }
 
-  offset = elf32_arm_plt0_size (abfd, data);
+  offset = elf32_arm_plt0_size (abfd, data, plt->size);
   if (offset == (bfd_vma) -1
       || (s = *ret = (asymbol *) bfd_malloc (size)) == NULL)
     {
       free (data);
       return -1;
     }
 
   names = (char *) (s + count);
   p = relplt->relocation;
   n = 0;
   for (i = 0; i < count; i++, p += elf32_arm_size_info.int_rels_per_ext_rel)
     {
       size_t len;
 
-      bfd_vma plt_size = elf32_arm_plt_size (abfd, data, offset);
+      bfd_vma plt_size = elf32_arm_plt_size (abfd, data, offset, plt->size);
       if (plt_size == (bfd_vma) -1)
 	break;
 
       *s = **p->sym_ptr_ptr;
       /* Undefined syms won't have BSF_LOCAL or BSF_GLOBAL set.  Since
 	 we are defining a symbol, ensure one of them is set.  */
       if ((s->flags & BSF_LOCAL) == 0)
 	s->flags |= BSF_GLOBAL;
       s->flags |= BSF_SYNTHETIC;
       s->section = plt;
       s->value = offset;
       s->name = names;
       s->udata.p = NULL;
       len = strlen ((*p->sym_ptr_ptr)->name);
       memcpy (names, (*p->sym_ptr_ptr)->name, len);
       names += len;
       if (p->addend != 0)
 	{
 	  char buf[30], *a;
 
 	  memcpy (names, "+0x", sizeof ("+0x") - 1);
 	  names += sizeof ("+0x") - 1;
 	  bfd_sprintf_vma (abfd, buf, p->addend);
 	  for (a = buf; *a == '0'; ++a)
 	    ;
 	  len = strlen (a);
 	  memcpy (names, a, len);
 	  names += len;
 	}
       memcpy (names, "@plt", sizeof ("@plt"));
       names += sizeof ("@plt");
       ++s, ++n;
       offset += plt_size;
     }
 
   free (data);
   return n;
 }
