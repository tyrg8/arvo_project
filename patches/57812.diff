commit 80ac1fd1483a4b3c92a6e59d24cb050dfecb90df
Author: Michael Niedermayer <michael@niedermayer.cc>
Date:   Sun Apr 9 14:31:16 2023 +0200

    avcodec/hevc_ps: Check num_ref_loc_offsets
    
    Fixes: Writing arbitrarily over the array end
    Fixes: 57812/clusterfuzz-testcase-minimized-ffmpeg_DEMUXER_fuzzer-4536557859373056
    
    Found-by: continuous fuzzing process https://github.com/google/oss-fuzz/tree/master/projects/ffmpeg
    Signed-off-by: Michael Niedermayer <michael@niedermayer.cc>

diff --git a/libavcodec/hevc_ps.c b/libavcodec/hevc_ps.c
index 348e4d8de2..be1d668c26 100644
--- a/libavcodec/hevc_ps.c
+++ b/libavcodec/hevc_ps.c
@@ -1386,42 +1386,46 @@ static void colour_mapping_table(GetBitContext *gb, HEVCPPS *pps)
 static int pps_multilayer_extension(GetBitContext *gb, AVCodecContext *avctx,
                                     HEVCPPS *pps, HEVCSPS *sps)
 {
     pps->poc_reset_info_present_flag = get_bits1(gb);
     pps->pps_infer_scaling_list_flag = get_bits1(gb);
     if (pps->pps_infer_scaling_list_flag)
         pps->pps_scaling_list_ref_layer_id = get_bits(gb, 6);
 
     pps->num_ref_loc_offsets = get_ue_golomb_long(gb);
+    if (pps->num_ref_loc_offsets > FF_ARRAY_ELEMS(pps->ref_loc_offset_layer_id)) {
+        pps->num_ref_loc_offsets = 0;
+        return AVERROR_INVALIDDATA;
+    }
     for (int i = 0; i < pps->num_ref_loc_offsets; i++) {
         pps->ref_loc_offset_layer_id[i] = get_bits(gb, 6);
         pps->scaled_ref_layer_offset_present_flag[i] = get_bits1(gb);
         if (pps->scaled_ref_layer_offset_present_flag[i]) {
             pps->scaled_ref_layer_left_offset[pps->ref_loc_offset_layer_id[i]]   = get_se_golomb_long(gb);
             pps->scaled_ref_layer_top_offset[pps->ref_loc_offset_layer_id[i]]    = get_se_golomb_long(gb);
             pps->scaled_ref_layer_right_offset[pps->ref_loc_offset_layer_id[i]]  = get_se_golomb_long(gb);
             pps->scaled_ref_layer_bottom_offset[pps->ref_loc_offset_layer_id[i]] = get_se_golomb_long(gb);
         }
 
         pps->ref_region_offset_present_flag[i] = get_bits1(gb);
         if (pps->ref_region_offset_present_flag[i]) {
             pps->ref_region_left_offset[pps->ref_loc_offset_layer_id[i]]   = get_se_golomb_long(gb);
             pps->ref_region_top_offset[pps->ref_loc_offset_layer_id[i]]    = get_se_golomb_long(gb);
             pps->ref_region_right_offset[pps->ref_loc_offset_layer_id[i]]  = get_se_golomb_long(gb);
             pps->ref_region_bottom_offset[pps->ref_loc_offset_layer_id[i]] = get_se_golomb_long(gb);
         }
 
         pps->resample_phase_set_present_flag[i] = get_bits1(gb);
         if (pps->resample_phase_set_present_flag[i]) {
             pps->phase_hor_luma[pps->ref_loc_offset_layer_id[i]]         = get_ue_golomb_long(gb);
             pps->phase_ver_luma[pps->ref_loc_offset_layer_id[i]]         = get_ue_golomb_long(gb);
             pps->phase_hor_chroma_plus8[pps->ref_loc_offset_layer_id[i]] = get_ue_golomb_long(gb);
             pps->phase_ver_chroma_plus8[pps->ref_loc_offset_layer_id[i]] = get_ue_golomb_long(gb);
         }
     }
 
     pps->colour_mapping_enabled_flag = get_bits1(gb);
     if (pps->colour_mapping_enabled_flag)
         colour_mapping_table(gb, pps);
 
     return 0;
 }
