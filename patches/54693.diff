commit d13b3b6aa7faeb30f0bf71ca6784e692713e9327
Merge: 6faeb9571d bcc5d268f6
Author: Dmitry Stogov <dmitry@zend.com>
Date:   Mon Jan 9 09:51:00 2023 +0300

    Merge branch 'PHP-8.1' into PHP-8.2
    
    * PHP-8.1:
      ext/opcache/jit/zend_jit_trace: fix memory leak in _compile_root_trace() (#10146)

diff --git a/ext/opcache/jit/zend_jit_trace.c b/ext/opcache/jit/zend_jit_trace.c
index 88cb398fdc..d47539926b 100644
--- a/ext/opcache/jit/zend_jit_trace.c
+++ b/ext/opcache/jit/zend_jit_trace.c
@@ -7036,101 +7036,102 @@ static const void *zend_jit_trace_exit_to_vm(uint32_t trace_num, uint32_t exit_n
 static zend_jit_trace_stop zend_jit_compile_root_trace(zend_jit_trace_rec *trace_buffer, const zend_op *opline, size_t offset)
 {
 	zend_jit_trace_stop ret;
 	const void *handler;
 	uint8_t orig_trigger;
 	zend_jit_trace_info *t = NULL;
 	zend_jit_trace_exit_info exit_info[ZEND_JIT_TRACE_MAX_EXITS];
 	bool do_bailout = 0;
 
 	zend_shared_alloc_lock();
 
 	/* Checks under lock */
 	if ((ZEND_OP_TRACE_INFO(opline, offset)->trace_flags & ZEND_JIT_TRACE_JITED)) {
 		ret = ZEND_JIT_TRACE_STOP_ALREADY_DONE;
 	} else if (ZEND_JIT_TRACE_NUM >= JIT_G(max_root_traces)) {
 		ret = ZEND_JIT_TRACE_STOP_TOO_MANY_TRACES;
 	} else {
 		zend_try {
 			SHM_UNPROTECT();
 			zend_jit_unprotect();
 
 			t = &zend_jit_traces[ZEND_JIT_TRACE_NUM];
 
 			t->id = ZEND_JIT_TRACE_NUM;
 			t->root = ZEND_JIT_TRACE_NUM;
 			t->parent = 0;
 			t->link = 0;
 			t->exit_count = 0;
 			t->child_count = 0;
 			t->stack_map_size = 0;
 			t->flags = 0;
 			t->polymorphism = 0;
 			t->jmp_table_size = 0;
 			t->op_array = trace_buffer[0].op_array;
 			t->opline = trace_buffer[1].opline;
 			t->exit_info = exit_info;
 			t->stack_map = NULL;
 
 			orig_trigger = JIT_G(trigger);
 			JIT_G(trigger) = ZEND_JIT_ON_HOT_TRACE;
 
 			handler = zend_jit_trace(trace_buffer, 0, 0);
 
 			JIT_G(trigger) = orig_trigger;
 
 			if (handler) {
 				zend_jit_trace_exit_info *shared_exit_info = NULL;
 
 				t->exit_info = NULL;
 				if (t->exit_count) {
 					/* reallocate exit_info into shared memory */
 					shared_exit_info = (zend_jit_trace_exit_info*)zend_shared_alloc(
 						sizeof(zend_jit_trace_exit_info) * t->exit_count);
 
 					if (!shared_exit_info) {
 					    if (t->stack_map) {
 							efree(t->stack_map);
 							t->stack_map = NULL;
 						}
 						ret = ZEND_JIT_TRACE_STOP_NO_SHM;
 						goto exit;
 					}
 					memcpy(shared_exit_info, exit_info,
 						sizeof(zend_jit_trace_exit_info) * t->exit_count);
 					t->exit_info = shared_exit_info;
 				}
 
 			    if (t->stack_map_size) {
 					zend_jit_trace_stack *shared_stack_map = (zend_jit_trace_stack*)zend_shared_alloc(t->stack_map_size * sizeof(zend_jit_trace_stack));
 					if (!shared_stack_map) {
+						efree(t->stack_map);
 						ret = ZEND_JIT_TRACE_STOP_NO_SHM;
 						goto exit;
 					}
 					memcpy(shared_stack_map, t->stack_map, t->stack_map_size * sizeof(zend_jit_trace_stack));
 					efree(t->stack_map);
 					t->stack_map = shared_stack_map;
 			    }
 
 				t->exit_counters = ZEND_JIT_EXIT_COUNTERS;
 				ZEND_JIT_EXIT_COUNTERS += t->exit_count;
 
 				((zend_op*)opline)->handler = handler;
 
 				ZEND_JIT_TRACE_NUM++;
 				ZEND_OP_TRACE_INFO(opline, offset)->trace_flags |= ZEND_JIT_TRACE_JITED;
 
 				ret = ZEND_JIT_TRACE_STOP_COMPILED;
 			} else if (t->exit_count >= ZEND_JIT_TRACE_MAX_EXITS ||
 			           ZEND_JIT_EXIT_COUNTERS + t->exit_count >= JIT_G(max_exit_counters)) {
 			    if (t->stack_map) {
 					efree(t->stack_map);
 					t->stack_map = NULL;
 				}
 				ret = ZEND_JIT_TRACE_STOP_TOO_MANY_EXITS;
 			} else {
 			    if (t->stack_map) {
 					efree(t->stack_map);
 					t->stack_map = NULL;
 				}
 				ret = ZEND_JIT_TRACE_STOP_COMPILER_ERROR;
 			}
