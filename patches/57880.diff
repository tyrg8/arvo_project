commit acaa21f68ede3ae8fca48136fa95ee32de6533b2
Author: Ken Sharp <ken.sharp@artifex.com>
Date:   Tue Apr 11 09:49:52 2023 +0100

    GhostPDF - avoid 32-bit overflow checking size of table
    
    OSS-fuzz #57880
    
    toffs was fuzzed to be very nearly 2^32-1 and when the (valid) tlen was
    added to it, the result overflowed a 32-bit value, evading the existing
    check to ensure the table was entirely contained in the buffer of data.
    
    Simply promote the 32-bit variables to 64-bit before performing the
    arithmetic and the check. fbuflen is already a 64-bit value.

diff --git a/pdf/pdf_font1C.c b/pdf/pdf_font1C.c
index 0974905d9..e688de4ba 100644
--- a/pdf/pdf_font1C.c
+++ b/pdf/pdf_font1C.c
@@ -2235,580 +2235,584 @@ int
 pdfi_read_cff_font(pdf_context *ctx, pdf_dict *font_dict, pdf_dict *stream_dict, pdf_dict *page_dict, byte *pfbuf, int64_t fbuflen, bool forcecid, pdf_font **ppdffont)
 {
     int code = 0;
 
     pdf_font *ppdfont = NULL;
     pdf_obj *basefont = NULL;
     pdf_obj *tmp = NULL;
     pdf_obj *fontdesc = NULL;
     pdf_string *registry = NULL;
     pdf_string *ordering = NULL;
     byte *fbuf = pfbuf;
 
     if (!memcmp(fbuf, "OTTO", 4)) {
         int i, ntables = u16(fbuf + 4);
         byte *p;
         uint32_t toffs = 0, tlen = 0;
 
         if (ntables > 64)
             return_error(gs_error_invalidfont);
 
         for (i = 0; i < ntables; i++) {
             p = fbuf + 12 + i * 16;
             if (p >= fbuf + fbuflen)
                 break;
 
             if (!memcmp(p, "CFF ", 4)) {
                 toffs = u32(p + 8);
                 tlen = u32(p + 12);
                 break;
             }
         }
-        if (toffs == 0 || tlen == 0 || toffs + tlen > fbuflen) {
+        /* Sanity check the offset and size of the CFF table and make sure the declared
+         * size and position fits inside the data we have. Promote the 32-bit variables to
+         * 64-bit to avoid overflow calculating the end of the table.
+         */
+        if (toffs == 0 || tlen == 0 || (uint64_t)toffs + (uint64_t)tlen > fbuflen) {
             gs_free_object(ctx->memory, pfbuf, "pdfi_read_cff_font(fbuf)");
             return_error(gs_error_invalidfont);
         }
         fbuf += toffs;
         fbuflen = tlen;
     }
 
     if (font_dict != NULL) {
         code = pdfi_dict_knownget_type(ctx, font_dict, "FontDescriptor", PDF_DICT, &fontdesc);
         if (code < 0) {
             fontdesc = NULL;
         }
     }
     else {
         fontdesc = NULL;
     }
 
     /* Vestigial magic number check - we can't check the third byte, as we have out of
        spec fonts that have a head size > 4
      */
     if (fbuf[0] == 1 && fbuf[1] == 0 && code >= 0) {
         pdfi_gs_cff_font_priv cffpriv;
 
         pdfi_init_cff_font_priv(ctx, &cffpriv, fbuf, fbuflen, false);
         cffpriv.forcecid = forcecid;
         code = pdfi_read_cff(ctx, &cffpriv);
 
         if (code >= 0) {
             if (cffpriv.FontType == ft_CID_encrypted) {
                 pdf_obj *obj = NULL;
                 pdf_cidfont_type0 *cffcid;
                 gs_font_cid0 *pfont;
 
                 code = pdfi_alloc_cff_cidfont(ctx, &cffcid, font_dict->object_num);
                 pfont = (gs_font_cid0 *) cffcid->pfont;
                 ppdfont = (pdf_font *) cffcid;
 
                 memcpy(pfont, &cffpriv, sizeof(pdfi_gs_cff_font_common_priv));
                 memcpy(&pfont->cidata, &cffpriv.cidata, sizeof(pfont->cidata));
 
                 pfont->procs.glyph_outline = pdfi_cff_glyph_outline;
                 pfont->cidata.glyph_data = pdfi_cff_cid_glyph_data;
 
                 cffcid->orig_glyph_info = pfont->procs.glyph_info;
                 pfont->procs.glyph_info = pdfi_cff_cidfont_glyph_info;
 
                 pfont->cidata.proc_data = NULL;
                 pfont->FAPI = NULL;
                 pfont->base = (gs_font *) cffcid->pfont;
 
                 code = pdfi_dict_knownget_type(ctx, font_dict, "CIDSystemInfo", PDF_DICT, (pdf_obj **)&obj);
                 if (code <= 0) {
                     cffcid->registry = cffpriv.pdfcffpriv.registry;
                     cffcid->ordering = cffpriv.pdfcffpriv.ordering;
                     cffcid->supplement = cffpriv.pdfcffpriv.supplement;
                 }
                 else {
                     pdf_num *suppl = NULL;
 
                     code = pdfi_dict_knownget_type(ctx, (pdf_dict *)obj, "Registry", PDF_STRING, (pdf_obj **)&cffcid->registry);
                     if (code <= 0) {
                         cffcid->registry = cffpriv.pdfcffpriv.registry;
                     }
                     else {
                         pdfi_countdown(cffpriv.pdfcffpriv.registry);
                         cffpriv.pdfcffpriv.registry = NULL;
                     }
 
                     code = pdfi_dict_knownget_type(ctx, (pdf_dict *)obj, "Ordering", PDF_STRING, (pdf_obj **)&cffcid->ordering);
                     if (code <= 0) {
                         cffcid->ordering = cffpriv.pdfcffpriv.ordering;
                     }
                     else {
                         pdfi_countdown(cffpriv.pdfcffpriv.ordering);
                         cffpriv.pdfcffpriv.ordering = NULL;
                     }
                     code = pdfi_dict_knownget_type(ctx, (pdf_dict *)obj, "Supplement", PDF_INT, (pdf_obj **)&suppl);
                     if (code <= 0 || pdfi_type_of(suppl) != PDF_INT) {
                         cffcid->supplement = cffpriv.pdfcffpriv.supplement;
                     }
                     else {
                         cffcid->supplement = suppl->value.i;
                     }
                     pdfi_countdown(suppl);
                 }
                 pdfi_countdown(obj);
                 obj = NULL;
 
                 pfont->cidata.common.CIDSystemInfo.Registry.data = cffcid->registry->data;
                 pfont->cidata.common.CIDSystemInfo.Registry.size = cffcid->registry->length;
                 pfont->cidata.common.CIDSystemInfo.Ordering.data = cffcid->ordering->data;
                 pfont->cidata.common.CIDSystemInfo.Ordering.size = cffcid->ordering->length;
                 pfont->cidata.common.CIDSystemInfo.Supplement = cffcid->supplement;
 
                 cffcid->FontDescriptor = (pdf_dict *) fontdesc;
                 fontdesc = NULL;
 
                 cffcid->PDF_font = font_dict;
                 pdfi_countup(font_dict);
 
                 pfont->client_data = cffcid;
 
                 cffcid->object_num = font_dict->object_num;
                 cffcid->generation_num = font_dict->generation_num;
                 cffcid->indirect_num = font_dict->indirect_num;
                 cffcid->indirect_gen = font_dict->indirect_gen;
 
                 cffcid->CharStrings = cffpriv.pdfcffpriv.CharStrings;
                 cffpriv.pdfcffpriv.CharStrings = NULL;
 
                 cffcid->Subrs = cffpriv.pdfcffpriv.Subrs;
                 cffcid->NumSubrs = cffpriv.pdfcffpriv.NumSubrs;
                 cffpriv.pdfcffpriv.Subrs = NULL;
 
                 cffcid->GlobalSubrs = cffpriv.pdfcffpriv.GlobalSubrs;
                 cffcid->NumGlobalSubrs = cffpriv.pdfcffpriv.NumGlobalSubrs;
                 cffpriv.pdfcffpriv.GlobalSubrs = NULL;
 
                 cffcid->FDArray = cffpriv.pdfcffpriv.FDArray;
                 cffpriv.pdfcffpriv.FDArray = NULL;
 
                 pfont->cidata.common.CIDCount = cffpriv.pdfcffpriv.cidcount;
 
                 cffcid->cidtogidmap = NULL;
                 code = pdfi_dict_knownget(ctx, font_dict, "CIDToGIDMap", (pdf_obj **) &obj);
                 if (code > 0) {
                     /* CIDToGIDMap can only be a stream or a name, and if it's a name
                        it's only permitted to be "/Identity", so ignore it
                      */
                     if (pdfi_type_of(obj) == PDF_STREAM) {
                         byte *d;
                         int64_t sz = 0;
 
                         code = pdfi_object_alloc(ctx, PDF_BUFFER, 0, (pdf_obj **)&cffcid->cidtogidmap);
                         if (code < 0) {
                             goto error;
                         }
                         pdfi_countup(cffcid->cidtogidmap);
                         code = pdfi_stream_to_buffer(ctx, (pdf_stream *)obj, &d, &sz);
                         if (code < 0) {
                             goto error;
                         }
                         code = pdfi_buffer_set_data((pdf_obj *)cffcid->cidtogidmap, d, (int32_t)sz);
                         if (code < 0) {
                             goto error;
                         }
                     }
                     pdfi_countdown(obj);
                     obj = NULL;
 
                     if (cffcid->cidtogidmap != NULL && cffcid->cidtogidmap->length > 0) {
                         pfont->cidata.common.CIDCount = cffcid->cidtogidmap->length >> 1;
                     }
                 }
                 pfont->cidata.common.MaxCID = pfont->cidata.common.CIDCount - 1;
 
                 code = pdfi_dict_knownget_type(ctx, font_dict, "DW", PDF_INT, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->DW = ((pdf_num *) obj)->value.i;
                     pdfi_countdown(obj);
                     obj = NULL;
                 }
                 else {
                     cffcid->DW = 1000;
                 }
                 code = pdfi_dict_knownget_type(ctx, font_dict, "DW2", PDF_ARRAY, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->DW2 = (pdf_array *) obj;
                     obj = NULL;
                 }
                 else {
                     cffcid->DW2 = NULL;
                 }
                 code = pdfi_dict_knownget_type(ctx, font_dict, "W", PDF_ARRAY, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->W = (pdf_array *) obj;
                     obj = NULL;
                 }
                 else {
                     cffcid->W = NULL;
                 }
                 code = pdfi_dict_knownget_type(ctx, font_dict, "W2", PDF_ARRAY, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->W2 = (pdf_array *) obj;
                     obj = NULL;
                 }
                 else {
                     cffcid->W2 = NULL;
                 }
                 if (uid_is_XUID(&cffcid->pfont->UID))
                     uid_free(&cffcid->pfont->UID, cffcid->pfont->memory, "pdfi_read_type1_font");
                 uid_set_invalid(&cffcid->pfont->UID);
                 cffcid->pfont->id = gs_next_ids(ctx->memory, 1);
             }
             else if (forcecid) {
                 pdf_obj *obj;
                 pdf_cidfont_type0 *cffcid;
                 gs_font_cid0 *pfont;
                 pdf_font_cff *fdcfffont;
                 gs_font_type1 *pfdfont = NULL;
                 static const char *const reg = "Adobe";
                 static const char *const ord = "Identity";
 
                 code = pdfi_object_alloc(ctx, PDF_STRING, strlen(reg), (pdf_obj **) &registry);
                 if (code < 0)
                     goto error;
                 pdfi_countup(registry);
 
                 code = pdfi_object_alloc(ctx, PDF_STRING, strlen(ord), (pdf_obj **) &ordering);
                 if (code < 0) {
                     goto error;
                 }
                 pdfi_countup(ordering);
 
                 memcpy(registry->data, reg, strlen(reg));
                 registry->length = strlen(reg);
                 memcpy(ordering->data, ord, strlen(ord));
                 ordering->length = strlen(ord);
 
                 code = pdfi_alloc_cff_font(ctx, &fdcfffont, 0, true);
                 if (code < 0)
                     goto error;
 
                 pfdfont = (gs_font_type1 *) fdcfffont->pfont;
 
                 code = pdfi_alloc_cff_cidfont(ctx, &cffcid, 0);
                 if (code < 0) {
                     gs_free_object(ctx->memory, fdcfffont, "pdfi_read_cff_font");
                     gs_free_object(ctx->memory, pfdfont, "pdfi_read_cff_font");
                     goto error;
                 }
                 ppdfont = (pdf_font *) cffcid;
 
                 code = pdfi_object_alloc(ctx, PDF_ARRAY, 1, (pdf_obj **) &cffcid->FDArray);
                 if (code < 0)
                     goto error;
                 pdfi_countup(cffcid->FDArray);
 
                 pfont = (gs_font_cid0 *) cffcid->pfont;
                 pfont->cidata.FDArray = (gs_font_type1 **) gs_alloc_bytes(ctx->memory, sizeof(gs_font_type1 *), "pdfi_read_cff_font");
                 pfont->base = (gs_font *)pfont;
                 if (!pfont->cidata.FDArray) {
                     pdfi_countdown(cffcid->FDArray);
                     gs_free_object(ctx->memory, fdcfffont, "pdfi_read_cff_font");
                     gs_free_object(ctx->memory, pfdfont, "pdfi_read_cff_font");
                     gs_free_object(ctx->memory, cffcid, "pdfi_read_cff_font");
                     gs_free_object(ctx->memory, pfont, "pdfi_read_cff_font");
                     goto error;
                 }
 
                 memcpy(pfdfont, &cffpriv, sizeof(pdfi_gs_cff_font_common_priv));
                 memcpy(&pfdfont->data, &cffpriv.type1data, sizeof(pfdfont->data));
 
 
                 pfont->procs.glyph_outline = pdfi_cff_glyph_outline;
                 pfont->cidata.glyph_data = pdfi_cff_cid_glyph_data;
                 pfont->cidata.common.CIDCount = cffpriv.pdfcffpriv.CharStrings->entries;
                 pfont->cidata.common.MaxCID = pfont->cidata.common.CIDCount - 1;
 
                 cffcid->orig_glyph_info = pfont->procs.glyph_info;
                 pfont->procs.glyph_info = pdfi_cff_cidfont_glyph_info;
 
                 pfdfont->FAPI = NULL;
                 pfdfont->base = (gs_font *)pfdfont;
                 pfdfont->client_data = fdcfffont;
                 pdfi_array_put(ctx, cffcid->FDArray, 0, (pdf_obj *) fdcfffont);
 
                 fdcfffont->object_num = 0;
                 fdcfffont->generation_num = 0;
 
                 (void)pdfi_dict_knownget_type(ctx, font_dict, "BaseFont", PDF_NAME, &basefont);
                 fdcfffont->BaseFont = basefont;
                 fdcfffont->Name = basefont;
                 pdfi_countup(basefont);
 
                 pdfi_countdown(cffpriv.pdfcffpriv.Encoding);
                 cffpriv.pdfcffpriv.Encoding = NULL;
 
                 fdcfffont->CharStrings = cffpriv.pdfcffpriv.CharStrings;
                 cffpriv.pdfcffpriv.CharStrings = NULL;
                 fdcfffont->Subrs = cffpriv.pdfcffpriv.Subrs;
                 cffpriv.pdfcffpriv.Subrs = NULL;
                 fdcfffont->NumSubrs = cffpriv.pdfcffpriv.NumSubrs;
                 fdcfffont->GlobalSubrs = cffpriv.pdfcffpriv.GlobalSubrs;
                 cffpriv.pdfcffpriv.GlobalSubrs = NULL;
                 fdcfffont->NumGlobalSubrs = cffpriv.pdfcffpriv.NumGlobalSubrs;
 
                 cffcid->CharStrings = fdcfffont->CharStrings;
                 pdfi_countup(cffcid->CharStrings);
                 cffcid->Subrs = fdcfffont->Subrs;
                 pdfi_countup(cffcid->Subrs);
                 cffcid->GlobalSubrs = fdcfffont->GlobalSubrs;
                 pdfi_countup(cffcid->GlobalSubrs);
                 pdfi_countdown(fdcfffont);
 
                 cffcid->FontDescriptor = (pdf_dict *) fontdesc;
                 fontdesc = NULL;
 
                 cffcid->registry = registry;
                 cffcid->ordering = ordering;
                 registry = ordering = NULL;
                 cffcid->supplement = 0;
 
                 /* Because we're faking a CIDFont, we want to move the scaling to the "parent" fake
                    CIDFont, and make the FDArrray use identity scaling
                  */
                 memcpy(&pfont->FontMatrix, &pfdfont->FontMatrix, sizeof(pfdfont->FontMatrix));
                 memcpy(&pfont->orig_FontMatrix, &pfdfont->orig_FontMatrix, sizeof(pfdfont->orig_FontMatrix));
 
                 gs_make_identity(&pfdfont->FontMatrix);
                 gs_make_identity(&pfdfont->orig_FontMatrix);
 
                 pfont->cidata.CIDMapOffset = 0;
                 pfont->cidata.FDArray_size = 1;
                 pfont->cidata.FDBytes = 0;
                 pfont->cidata.glyph_data = pdfi_cff_cid_glyph_data;
                 pfont->cidata.FDArray[0] = pfdfont;
                 pfont->cidata.common.CIDSystemInfo.Registry.data = cffcid->registry->data;
                 pfont->cidata.common.CIDSystemInfo.Registry.size = cffcid->registry->length;
                 pfont->cidata.common.CIDSystemInfo.Ordering.data = cffcid->ordering->data;
                 pfont->cidata.common.CIDSystemInfo.Ordering.size = cffcid->ordering->length;
                 pfont->cidata.common.CIDSystemInfo.Supplement = cffcid->supplement;
                 pfont->client_data = cffcid;
 
                 cffcid->object_num = font_dict->object_num;
                 cffcid->generation_num = font_dict->generation_num;
                 cffcid->indirect_num = font_dict->indirect_num;
                 cffcid->indirect_gen = font_dict->indirect_gen;
 
                 cffcid->PDF_font = font_dict;
                 pdfi_countup(font_dict);
 
                 cffcid->cidtogidmap = NULL;
                 code = pdfi_dict_knownget(ctx, font_dict, "CIDToGIDMap", (pdf_obj **) &obj);
                 if (code > 0) {
                     byte *d;
                     int64_t sz = 0;
                     /* CIDToGIDMap can only be a stream or a name, and if it's a name
                        it's only permitted to be "/Identity", so ignore it
                      */
                     if (pdfi_type_of(obj) == PDF_STREAM) {
                         code = pdfi_object_alloc(ctx, PDF_BUFFER, 0, (pdf_obj **)&cffcid->cidtogidmap);
                         if (code < 0) {
                             goto error;
                         }
                         pdfi_countup(cffcid->cidtogidmap);
                         code = pdfi_stream_to_buffer(ctx, (pdf_stream *)obj, &d, &sz);
                         if (code < 0) {
                             goto error;
                         }
                         code = pdfi_buffer_set_data((pdf_obj *)cffcid->cidtogidmap, d, (int32_t)sz);
                         if (code < 0) {
                             goto error;
                         }
                     }
                     pdfi_countdown(obj);
                     obj = NULL;
 
                     if (cffcid->cidtogidmap != NULL && cffcid->cidtogidmap->length > 0) {
                         pfont->cidata.common.CIDCount = cffcid->cidtogidmap->length >> 1;
                     }
                 }
                 pfont->cidata.common.MaxCID = pfont->cidata.common.CIDCount - 1;
 
                 code = pdfi_dict_knownget_type(ctx, font_dict, "DW", PDF_INT, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->DW = ((pdf_num *) obj)->value.i;
                     pdfi_countdown(obj);
                     obj = NULL;
                 }
                 else {
                     cffcid->DW = 1000;
                 }
                 code = pdfi_dict_knownget_type(ctx, font_dict, "DW2", PDF_ARRAY, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->DW2 = (pdf_array *) obj;
                     obj = NULL;
                 }
                 else {
                     cffcid->DW2 = NULL;
                 }
                 code = pdfi_dict_knownget_type(ctx, font_dict, "W", PDF_ARRAY, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->W = (pdf_array *) obj;
                     obj = NULL;
                 }
                 else {
                     cffcid->W = NULL;
                 }
                 code = pdfi_dict_knownget_type(ctx, font_dict, "W2", PDF_ARRAY, (pdf_obj **) &obj);
                 if (code > 0) {
                     cffcid->W2 = (pdf_array *) obj;
                     obj = NULL;
                 }
                 else {
                     cffcid->W2 = NULL;
                 }
 
                 if (uid_is_XUID(&cffcid->pfont->UID))
                     uid_free(&cffcid->pfont->UID, cffcid->pfont->memory, "pdfi_read_type1_font");
                 uid_set_invalid(&cffcid->pfont->UID);
                 cffcid->pfont->id = gs_next_ids(ctx->memory, 1);
             }
             else {
                 pdf_font_cff *cfffont;
                 gs_font_type1 *pfont = NULL;
                 pdf_obj *tounicode = NULL;
 
                 code = pdfi_alloc_cff_font(ctx, &cfffont, font_dict != NULL ? font_dict->object_num : 0, false);
                 pfont = (gs_font_type1 *) cfffont->pfont;
                 ppdfont = (pdf_font *) cfffont;
 
                 memcpy(pfont, &cffpriv, sizeof(pdfi_gs_cff_font_common_priv));
                 memcpy(&pfont->data, &cffpriv.type1data, sizeof(pfont->data));
                 pfont->FAPI = NULL;
                 pfont->client_data = cfffont;
                 pfont->base = (gs_font *) cfffont->pfont;
 
                 pfont->procs.glyph_info = pdfi_cff_glyph_info;
 
                 if (font_dict) {
                     cfffont->object_num = font_dict->object_num;
                     cfffont->generation_num = font_dict->generation_num;
                     cfffont->indirect_num = font_dict->indirect_num;
                     cfffont->indirect_gen = font_dict->indirect_gen;
 
                     (void)pdfi_dict_knownget_type(ctx, font_dict, "BaseFont", PDF_NAME, &basefont);
                 }
 
                 cfffont->BaseFont = basefont;
                 cfffont->Name = basefont;
                 pdfi_countup(basefont);
 
                 cfffont->CharStrings = cffpriv.pdfcffpriv.CharStrings;
                 cffpriv.pdfcffpriv.CharStrings = NULL;
 
                 cfffont->Subrs = cffpriv.pdfcffpriv.Subrs;
                 cfffont->NumSubrs = cffpriv.pdfcffpriv.NumSubrs;
                 cffpriv.pdfcffpriv.Subrs = NULL;
 
                 cfffont->GlobalSubrs = cffpriv.pdfcffpriv.GlobalSubrs;
                 cfffont->NumGlobalSubrs = cffpriv.pdfcffpriv.NumGlobalSubrs;
                 cffpriv.pdfcffpriv.GlobalSubrs = NULL;
 
                 cfffont->FontDescriptor = (pdf_dict *) fontdesc;
                 fontdesc = NULL;
 
                 cfffont->PDF_font = font_dict;
                 pdfi_countup(font_dict);
 
                 cfffont->descflags = 0;
                 if (cfffont->FontDescriptor != NULL) {
                     code = pdfi_dict_get_int(ctx, cfffont->FontDescriptor, "Flags", &cfffont->descflags);
                     if (code >= 0) {
                         /* If both the symbolic and non-symbolic flag are set,
                            believe that latter.
                          */
                         if ((cfffont->descflags & 32) != 0)
                             cfffont->descflags = (cfffont->descflags & ~4);
                     }
                 }
                 /* ZapfDingbats and Symbol we just have to know are symbolic */
                 if (pdfi_font_known_symbolic(basefont)) {
                     cfffont->descflags |= 4;
                 }
 
                 pdfi_font_set_first_last_char(ctx, font_dict, (pdf_font *)cfffont);
 
                 /* Widths are defined assuming a 1000x1000 design grid, but we apply
                  * them in font space - so undo the 1000x1000 scaling, and apply
                  * the inverse of the font's x scaling
                  */
                 if (font_dict != NULL) {
                     /* ignore errors with widths... for now */
                     (void)pdfi_font_create_widths(ctx, font_dict, (pdf_font*)cfffont, (double)(0.001 / hypot(pfont->FontMatrix.xx, pfont->FontMatrix.xy)));
                 }
 
                 if (font_dict != NULL)
                     code = pdfi_dict_knownget(ctx, font_dict, "Encoding", &tmp);
                 else
                     code = gs_error_undefined;
                 if (code == 1) {
                     if ((cfffont->descflags & 4) != 0 && pdfi_type_of(tmp) == PDF_DICT) {
                         code = pdfi_create_Encoding(ctx, tmp, (pdf_obj *)cffpriv.pdfcffpriv.Encoding, (pdf_obj **) &cfffont->Encoding);
                         if (code >= 0) {
                             pdfi_countdown(cffpriv.pdfcffpriv.Encoding);
                             cffpriv.pdfcffpriv.Encoding = NULL;
                             code = 1;
                         }
                     }
                     else if ((pdfi_type_of(tmp) == PDF_NAME || pdfi_type_of(tmp) == PDF_DICT)) {
                         code = pdfi_create_Encoding(ctx, tmp, NULL, (pdf_obj **) &cfffont->Encoding);
                         if (code >= 0) {
                             pdfi_countdown(cffpriv.pdfcffpriv.Encoding);
                             cffpriv.pdfcffpriv.Encoding = NULL;
                             code = 1;
                         }
                     }
                     else
                         code = gs_error_undefined;
 
                     if (code == 1) {
                     }
                     pdfi_countdown(tmp);
                     tmp = NULL;
                 }
                 else {
                     pdfi_countdown(tmp);
                     tmp = NULL;
                     code = 0;
                 }
                 if (code <= 0) {
                     cfffont->Encoding = cffpriv.pdfcffpriv.Encoding;
                     cffpriv.pdfcffpriv.Encoding = NULL;
                 }
 
                 /* Since the underlying font stream can be shared between font descriptors,
                    and the font descriptors can be shared between font objects, if we change
                    the encoding, we can't share cached glyphs with other instances of this
                    underlying font, so invalidate the UniqueID/XUID so the glyph cache won't
                    try.
                 */
                 if (uid_is_XUID(&cfffont->pfont->UID))
                     uid_free(&cfffont->pfont->UID, cfffont->pfont->memory, "pdfi_read_type1_font");
                 uid_set_invalid(&cfffont->pfont->UID);
                 cfffont->pfont->id = gs_next_ids(ctx->memory, 1);
 
                 if (ctx->args.ignoretounicode != true && font_dict != NULL) {
                     code = pdfi_dict_get(ctx, font_dict, "ToUnicode", (pdf_obj **)&tounicode);
                     if (code >= 0 && pdfi_type_of(tounicode) == PDF_STREAM) {
                         pdf_cmap *tu = NULL;
                         code = pdfi_read_cmap(ctx, tounicode, &tu);
                         pdfi_countdown(tounicode);
                         tounicode = (pdf_obj *)tu;
                     }
                     if (code < 0 || (tounicode != NULL && pdfi_type_of(tounicode) != PDF_CMAP)) {
                         pdfi_countdown(tounicode);
                         tounicode = NULL;
                         code = 0;
                     }
                 }
                 else {
                     tounicode = NULL;
                 }
                 cfffont->ToUnicode = tounicode;
                 tounicode = NULL;
             }
         }
