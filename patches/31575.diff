commit 989205e95cde4c43b562148a5f35fe32bb7af3da
Author: Nikita Popov <nikita.ppv@gmail.com>
Date:   Mon Jul 12 16:56:00 2021 +0200

    Remove incorrect uses of zend_atoi()
    
    zend_atoi() parses integers with size suffixes (like "128M").
    These just want to use a plain number, so use ZEND_ATOL instead.

diff --git a/Zend/zend.c b/Zend/zend.c
index 5737f5ea37..8091341390 100644
--- a/Zend/zend.c
+++ b/Zend/zend.c
@@ -844,169 +844,169 @@ static bool php_auto_globals_create_globals(zend_string *name) /* {{{ */
 void zend_startup(zend_utility_functions *utility_functions) /* {{{ */
 {
 #ifdef ZTS
 	zend_compiler_globals *compiler_globals;
 	zend_executor_globals *executor_globals;
 	extern ZEND_API ts_rsrc_id ini_scanner_globals_id;
 	extern ZEND_API ts_rsrc_id language_scanner_globals_id;
 #else
 	extern zend_ini_scanner_globals ini_scanner_globals;
 	extern zend_php_scanner_globals language_scanner_globals;
 #endif
 
 	zend_cpu_startup();
 
 #ifdef ZEND_WIN32
 	php_win32_cp_set_by_id(65001);
 #endif
 
 	start_memory_manager();
 
 	virtual_cwd_startup(); /* Could use shutdown to free the main cwd but it would just slow it down for CGI */
 
 #if defined(__FreeBSD__) || defined(__DragonFly__)
 	/* FreeBSD and DragonFly floating point precision fix */
 	fpsetmask(0);
 #endif
 
 	zend_startup_strtod();
 	zend_startup_extensions_mechanism();
 
 	/* Set up utility functions and values */
 	zend_error_cb = utility_functions->error_function;
 	zend_printf = utility_functions->printf_function;
 	zend_write = utility_functions->write_function;
 	zend_fopen = utility_functions->fopen_function;
 	if (!zend_fopen) {
 		zend_fopen = zend_fopen_wrapper;
 	}
 	zend_stream_open_function = utility_functions->stream_open_function;
 	zend_message_dispatcher_p = utility_functions->message_handler;
 	zend_get_configuration_directive_p = utility_functions->get_configuration_directive;
 	zend_ticks_function = utility_functions->ticks_function;
 	zend_on_timeout = utility_functions->on_timeout;
 	zend_printf_to_smart_string = utility_functions->printf_to_smart_string_function;
 	zend_printf_to_smart_str = utility_functions->printf_to_smart_str_function;
 	zend_getenv = utility_functions->getenv_function;
 	zend_resolve_path = utility_functions->resolve_path_function;
 
 	zend_interrupt_function = NULL;
 
 #ifdef HAVE_DTRACE
 /* build with dtrace support */
 	{
 		char *tmp = getenv("USE_ZEND_DTRACE");
 
-		if (tmp && zend_atoi(tmp, 0)) {
+		if (tmp && ZEND_ATOL(tmp)) {
 			zend_dtrace_enabled = 1;
 			zend_compile_file = dtrace_compile_file;
 			zend_execute_ex = dtrace_execute_ex;
 			zend_execute_internal = dtrace_execute_internal;
 
 			zend_observer_error_register(dtrace_error_notify_cb);
 		} else {
 			zend_compile_file = compile_file;
 			zend_execute_ex = execute_ex;
 			zend_execute_internal = NULL;
 		}
 	}
 #else
 	zend_compile_file = compile_file;
 	zend_execute_ex = execute_ex;
 	zend_execute_internal = NULL;
 #endif /* HAVE_DTRACE */
 	zend_compile_string = compile_string;
 	zend_throw_exception_hook = NULL;
 
 	/* Set up the default garbage collection implementation. */
 	gc_collect_cycles = zend_gc_collect_cycles;
 
 	zend_vm_init();
 
 	/* set up version */
 	zend_version_info = strdup(ZEND_CORE_VERSION_INFO);
 	zend_version_info_length = sizeof(ZEND_CORE_VERSION_INFO) - 1;
 
 	GLOBAL_FUNCTION_TABLE = (HashTable *) malloc(sizeof(HashTable));
 	GLOBAL_CLASS_TABLE = (HashTable *) malloc(sizeof(HashTable));
 	GLOBAL_AUTO_GLOBALS_TABLE = (HashTable *) malloc(sizeof(HashTable));
 	GLOBAL_CONSTANTS_TABLE = (HashTable *) malloc(sizeof(HashTable));
 
 	zend_hash_init(GLOBAL_FUNCTION_TABLE, 1024, NULL, ZEND_FUNCTION_DTOR, 1);
 	zend_hash_init(GLOBAL_CLASS_TABLE, 64, NULL, ZEND_CLASS_DTOR, 1);
 	zend_hash_init(GLOBAL_AUTO_GLOBALS_TABLE, 8, NULL, auto_global_dtor, 1);
 	zend_hash_init(GLOBAL_CONSTANTS_TABLE, 128, NULL, ZEND_CONSTANT_DTOR, 1);
 
 	zend_hash_init(&module_registry, 32, NULL, module_destructor_zval, 1);
 	zend_init_rsrc_list_dtors();
 
 #ifdef ZTS
 	ts_allocate_fast_id(&compiler_globals_id, &compiler_globals_offset, sizeof(zend_compiler_globals), (ts_allocate_ctor) compiler_globals_ctor, (ts_allocate_dtor) compiler_globals_dtor);
 	ts_allocate_fast_id(&executor_globals_id, &executor_globals_offset, sizeof(zend_executor_globals), (ts_allocate_ctor) executor_globals_ctor, (ts_allocate_dtor) executor_globals_dtor);
 	ts_allocate_fast_id(&language_scanner_globals_id, &language_scanner_globals_offset, sizeof(zend_php_scanner_globals), (ts_allocate_ctor) php_scanner_globals_ctor, NULL);
 	ts_allocate_fast_id(&ini_scanner_globals_id, &ini_scanner_globals_offset, sizeof(zend_ini_scanner_globals), (ts_allocate_ctor) ini_scanner_globals_ctor, NULL);
 	compiler_globals = ts_resource(compiler_globals_id);
 	executor_globals = ts_resource(executor_globals_id);
 
 	compiler_globals_dtor(compiler_globals);
 	compiler_globals->in_compilation = 0;
 	compiler_globals->function_table = (HashTable *) malloc(sizeof(HashTable));
 	compiler_globals->class_table = (HashTable *) malloc(sizeof(HashTable));
 
 	*compiler_globals->function_table = *GLOBAL_FUNCTION_TABLE;
 	*compiler_globals->class_table = *GLOBAL_CLASS_TABLE;
 	compiler_globals->auto_globals = GLOBAL_AUTO_GLOBALS_TABLE;
 
 	zend_hash_destroy(executor_globals->zend_constants);
 	*executor_globals->zend_constants = *GLOBAL_CONSTANTS_TABLE;
 #else
 	ini_scanner_globals_ctor(&ini_scanner_globals);
 	php_scanner_globals_ctor(&language_scanner_globals);
 	zend_set_default_compile_time_values();
 #ifdef ZEND_WIN32
 	zend_get_windows_version_info(&EG(windows_version_info));
 #endif
 # if ZEND_MAP_PTR_KIND == ZEND_MAP_PTR_KIND_PTR
 		/* Create a map region, used for indirect pointers from shared to
 		 * process memory. It's allocated once and never resized.
 		 * All processes must map it into the same address space.
 		 */
 		CG(map_ptr_size) = 1024 * 1024; // TODO: initial size ???
 		CG(map_ptr_last) = 0;
 		ZEND_MAP_PTR_SET_REAL_BASE(CG(map_ptr_base), pemalloc(CG(map_ptr_size) * sizeof(void*), 1));
 # elif ZEND_MAP_PTR_KIND == ZEND_MAP_PTR_KIND_PTR_OR_OFFSET
 		/* Map region is going to be created and resized at run-time. */
 		ZEND_MAP_PTR_SET_REAL_BASE(CG(map_ptr_base), NULL);
 		CG(map_ptr_size) = 0;
 		CG(map_ptr_last) = 0;
 # else
 #  error "Unknown ZEND_MAP_PTR_KIND"
 # endif
 #endif
 	EG(error_reporting) = E_ALL & ~E_NOTICE;
 
 	zend_interned_strings_init();
 	zend_startup_builtin_functions();
 	zend_register_standard_constants();
 	zend_register_auto_global(zend_string_init_interned("GLOBALS", sizeof("GLOBALS") - 1, 1), 1, php_auto_globals_create_globals);
 
 #ifndef ZTS
 	zend_init_rsrc_plist();
 	zend_init_exception_op();
 	zend_init_call_trampoline_op();
 #endif
 
 	zend_ini_startup();
 
 #ifdef ZEND_WIN32
 	/* Uses INI settings, so needs to be run after it. */
 	php_win32_cp_setup();
 #endif
 
 	zend_optimizer_startup();
 
 #ifdef ZTS
 	tsrm_set_new_thread_end_handler(zend_new_thread_end_handler);
 	tsrm_set_shutdown_handler(zend_interned_strings_dtor);
 #endif
 }
 /* }}} */
diff --git a/Zend/zend_alloc.c b/Zend/zend_alloc.c
index 38608d0f15..558221d5d4 100644
--- a/Zend/zend_alloc.c
+++ b/Zend/zend_alloc.c
@@ -2798,39 +2798,39 @@ static void tracked_free_all() {
 static void alloc_globals_ctor(zend_alloc_globals *alloc_globals)
 {
 	char *tmp;
 
 #if ZEND_MM_CUSTOM
 	tmp = getenv("USE_ZEND_ALLOC");
-	if (tmp && !zend_atoi(tmp, 0)) {
-		bool tracked = (tmp = getenv("USE_TRACKED_ALLOC")) && zend_atoi(tmp, 0);
+	if (tmp && ZEND_ATOL(tmp)) {
+		bool tracked = (tmp = getenv("USE_TRACKED_ALLOC")) && ZEND_ATOL(tmp);
 		zend_mm_heap *mm_heap = alloc_globals->mm_heap = malloc(sizeof(zend_mm_heap));
 		memset(mm_heap, 0, sizeof(zend_mm_heap));
 		mm_heap->use_custom_heap = ZEND_MM_CUSTOM_HEAP_STD;
 		mm_heap->limit = ((size_t)Z_L(-1) >> (size_t)Z_L(1));
 		mm_heap->overflow = 0;
 
 		if (!tracked) {
 			/* Use system allocator. */
 			mm_heap->custom_heap.std._malloc = __zend_malloc;
 			mm_heap->custom_heap.std._free = free;
 			mm_heap->custom_heap.std._realloc = __zend_realloc;
 		} else {
 			/* Use system allocator and track allocations for auto-free. */
 			mm_heap->custom_heap.std._malloc = tracked_malloc;
 			mm_heap->custom_heap.std._free = tracked_free;
 			mm_heap->custom_heap.std._realloc = tracked_realloc;
 			mm_heap->tracked_allocs = malloc(sizeof(HashTable));
 			zend_hash_init(mm_heap->tracked_allocs, 1024, NULL, NULL, 1);
 		}
 		return;
 	}
 #endif
 
 	tmp = getenv("USE_ZEND_ALLOC_HUGE_PAGES");
-	if (tmp && zend_atoi(tmp, 0)) {
+	if (tmp && ZEND_ATOL(tmp)) {
 		zend_mm_use_huge_pages = 1;
 	}
 	alloc_globals->mm_heap = zend_mm_init();
 }
 
 #ifdef ZTS
diff --git a/ext/session/session.c b/ext/session/session.c
index c096e809c1..18444932ce 100644
--- a/ext/session/session.c
+++ b/ext/session/session.c
@@ -769,22 +769,21 @@ static PHP_INI_MH(OnUpdateLazyWrite) /* {{{ */
 
 static PHP_INI_MH(OnUpdateRfc1867Freq) /* {{{ */
 {
-	int tmp;
-	tmp = zend_atoi(ZSTR_VAL(new_value), ZSTR_LEN(new_value));
+	int tmp = ZEND_ATOL(ZSTR_VAL(new_value));
 	if(tmp < 0) {
 		php_error_docref(NULL, E_WARNING, "session.upload_progress.freq must be greater than or equal to 0");
 		return FAILURE;
 	}
 	if(ZSTR_LEN(new_value) > 0 && ZSTR_VAL(new_value)[ZSTR_LEN(new_value)-1] == '%') {
 		if(tmp > 100) {
 			php_error_docref(NULL, E_WARNING, "session.upload_progress.freq must be less than or equal to 100%%");
 			return FAILURE;
 		}
 		PS(rfc1867_freq) = -tmp;
 	} else {
 		PS(rfc1867_freq) = tmp;
 	}
 	return SUCCESS;
 } /* }}} */
 
 /* {{{ PHP_INI */
diff --git a/sapi/cli/php_cli.c b/sapi/cli/php_cli.c
index 2a285d4365..1c408ab271 100644
--- a/sapi/cli/php_cli.c
+++ b/sapi/cli/php_cli.c
@@ -1157,250 +1157,250 @@ int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine
 #else
 int main(int argc, char *argv[])
 #endif
 {
 #if defined(PHP_WIN32)
 # ifdef PHP_CLI_WIN32_NO_CONSOLE
 	int argc = __argc;
 	char **argv = __argv;
 # endif
 	int num_args;
 	wchar_t **argv_wide;
 	char **argv_save = argv;
 	BOOL using_wide_argv = 0;
 #endif
 
 	int c;
 	int exit_status = SUCCESS;
 	int module_started = 0, sapi_started = 0;
 	char *php_optarg = NULL;
 	int php_optind = 1, use_extended_info = 0;
 	char *ini_path_override = NULL;
 	char *ini_entries = NULL;
 	size_t ini_entries_len = 0;
 	int ini_ignore = 0;
 	sapi_module_struct *sapi_module = &cli_sapi_module;
 
 	/*
 	 * Do not move this initialization. It needs to happen before argv is used
 	 * in any way.
 	 */
 	argv = save_ps_args(argc, argv);
 
 #if defined(PHP_WIN32) && !defined(PHP_CLI_WIN32_NO_CONSOLE)
 	php_win32_console_fileno_set_vt100(STDOUT_FILENO, TRUE);
 	php_win32_console_fileno_set_vt100(STDERR_FILENO, TRUE);
 #endif
 
 	cli_sapi_module.additional_functions = additional_functions;
 
 #if defined(PHP_WIN32) && defined(_DEBUG)
 	{
 		char *tmp = getenv("PHP_WIN32_DEBUG_HEAP");
-		if (tmp && zend_atoi(tmp, 0)) {
+		if (tmp && ZEND_ATOL(tmp, 0)) {
 			int tmp_flag;
 			_CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE);
 			_CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDERR);
 			_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_FILE);
 			_CrtSetReportFile(_CRT_ERROR, _CRTDBG_FILE_STDERR);
 			_CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE);
 			_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
 			tmp_flag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);
 			tmp_flag |= _CRTDBG_DELAY_FREE_MEM_DF;
 			tmp_flag |= _CRTDBG_LEAK_CHECK_DF;
 
 			_CrtSetDbgFlag(tmp_flag);
 		}
 	}
 #endif
 
 #if defined(SIGPIPE) && defined(SIG_IGN)
 	signal(SIGPIPE, SIG_IGN); /* ignore SIGPIPE in standalone mode so
 								that sockets created via fsockopen()
 								don't kill PHP if the remote site
 								closes it.  in apache|apxs mode apache
 								does that for us!  thies@thieso.net
 								20000419 */
 #endif
 
 #ifdef ZTS
 	php_tsrm_startup();
 # ifdef PHP_WIN32
 	ZEND_TSRMLS_CACHE_UPDATE();
 # endif
 #endif
 
 	zend_signal_startup();
 
 #ifdef PHP_WIN32
 	_fmode = _O_BINARY;			/*sets default for file streams to binary */
 	setmode(_fileno(stdin), O_BINARY);		/* make the stdio mode be binary */
 	setmode(_fileno(stdout), O_BINARY);		/* make the stdio mode be binary */
 	setmode(_fileno(stderr), O_BINARY);		/* make the stdio mode be binary */
 #endif
 
 	while ((c = php_getopt(argc, argv, OPTIONS, &php_optarg, &php_optind, 1, 2))!=-1) {
 		switch (c) {
 			case 'c':
 				if (ini_path_override) {
 					free(ini_path_override);
 				}
 				ini_path_override = strdup(php_optarg);
 				break;
 			case 'n':
 				ini_ignore = 1;
 				break;
 			case 'd': {
 				/* define ini entries on command line */
 				size_t len = strlen(php_optarg);
 				char *val;
 
 				if ((val = strchr(php_optarg, '='))) {
 					val++;
 					if (!isalnum(*val) && *val != '"' && *val != '\'' && *val != '\0') {
 						ini_entries = realloc(ini_entries, ini_entries_len + len + sizeof("\"\"\n\0"));
 						memcpy(ini_entries + ini_entries_len, php_optarg, (val - php_optarg));
 						ini_entries_len += (val - php_optarg);
 						memcpy(ini_entries + ini_entries_len, "\"", 1);
 						ini_entries_len++;
 						memcpy(ini_entries + ini_entries_len, val, len - (val - php_optarg));
 						ini_entries_len += len - (val - php_optarg);
 						memcpy(ini_entries + ini_entries_len, "\"\n\0", sizeof("\"\n\0"));
 						ini_entries_len += sizeof("\n\0\"") - 2;
 					} else {
 						ini_entries = realloc(ini_entries, ini_entries_len + len + sizeof("\n\0"));
 						memcpy(ini_entries + ini_entries_len, php_optarg, len);
 						memcpy(ini_entries + ini_entries_len + len, "\n\0", sizeof("\n\0"));
 						ini_entries_len += len + sizeof("\n\0") - 2;
 					}
 				} else {
 					ini_entries = realloc(ini_entries, ini_entries_len + len + sizeof("=1\n\0"));
 					memcpy(ini_entries + ini_entries_len, php_optarg, len);
 					memcpy(ini_entries + ini_entries_len + len, "=1\n\0", sizeof("=1\n\0"));
 					ini_entries_len += len + sizeof("=1\n\0") - 2;
 				}
 				break;
 			}
 #ifndef PHP_CLI_WIN32_NO_CONSOLE
 			case 'S':
 				sapi_module = &cli_server_sapi_module;
 				cli_server_sapi_module.additional_functions = server_additional_functions;
 				break;
 #endif
 			case 'h': /* help & quit */
 			case '?':
 				php_cli_usage(argv[0]);
 				goto out;
 			case PHP_GETOPT_INVALID_ARG: /* print usage on bad options, exit 1 */
 				php_cli_usage(argv[0]);
 				exit_status = 1;
 				goto out;
 			case 'i': case 'v': case 'm':
 				sapi_module = &cli_sapi_module;
 				goto exit_loop;
 			case 'e': /* enable extended info output */
 				use_extended_info = 1;
 				break;
 		}
 	}
 exit_loop:
 
 	sapi_module->ini_defaults = sapi_cli_ini_defaults;
 	sapi_module->php_ini_path_override = ini_path_override;
 	sapi_module->phpinfo_as_text = 1;
 	sapi_module->php_ini_ignore_cwd = 1;
 	sapi_startup(sapi_module);
 	sapi_started = 1;
 
 	sapi_module->php_ini_ignore = ini_ignore;
 
 	sapi_module->executable_location = argv[0];
 
 	if (sapi_module == &cli_sapi_module) {
 		if (ini_entries) {
 			ini_entries = realloc(ini_entries, ini_entries_len + sizeof(HARDCODED_INI));
 			memmove(ini_entries + sizeof(HARDCODED_INI) - 2, ini_entries, ini_entries_len + 1);
 			memcpy(ini_entries, HARDCODED_INI, sizeof(HARDCODED_INI) - 2);
 		} else {
 			ini_entries = malloc(sizeof(HARDCODED_INI));
 			memcpy(ini_entries, HARDCODED_INI, sizeof(HARDCODED_INI));
 		}
 		ini_entries_len += sizeof(HARDCODED_INI) - 2;
 	}
 
 	sapi_module->ini_entries = ini_entries;
 
 	/* startup after we get the above ini override se we get things right */
 	if (sapi_module->startup(sapi_module) == FAILURE) {
 		/* there is no way to see if we must call zend_ini_deactivate()
 		 * since we cannot check if EG(ini_directives) has been initialized
 		 * because the executor's constructor does not set initialize it.
 		 * Apart from that there seems no need for zend_ini_deactivate() yet.
 		 * So we goto out_err.*/
 		exit_status = 1;
 		goto out;
 	}
 	module_started = 1;
 
 #if defined(PHP_WIN32)
 	php_win32_cp_cli_setup();
 	orig_cp = (php_win32_cp_get_orig())->id;
 	/* Ignore the delivered argv and argc, read from W API. This place
 		might be too late though, but this is the earliest place ATW
 		we can access the internal charset information from PHP. */
 	argv_wide = CommandLineToArgvW(GetCommandLineW(), &num_args);
 	PHP_WIN32_CP_W_TO_ANY_ARRAY(argv_wide, num_args, argv, argc)
 	using_wide_argv = 1;
 
 	SetConsoleCtrlHandler(php_cli_win32_ctrl_handler, TRUE);
 #endif
 
 	/* -e option */
 	if (use_extended_info) {
 		CG(compiler_options) |= ZEND_COMPILE_EXTENDED_INFO;
 	}
 
 	zend_first_try {
 #ifndef PHP_CLI_WIN32_NO_CONSOLE
 		if (sapi_module == &cli_sapi_module) {
 #endif
 			exit_status = do_cli(argc, argv);
 #ifndef PHP_CLI_WIN32_NO_CONSOLE
 		} else {
 			exit_status = do_cli_server(argc, argv);
 		}
 #endif
 	} zend_end_try();
 out:
 	if (ini_path_override) {
 		free(ini_path_override);
 	}
 	if (ini_entries) {
 		free(ini_entries);
 	}
 	if (module_started) {
 		php_module_shutdown();
 	}
 	if (sapi_started) {
 		sapi_shutdown();
 	}
 #ifdef ZTS
 	tsrm_shutdown();
 #endif
 
 #if defined(PHP_WIN32)
 	(void)php_win32_cp_cli_restore();
 
 	if (using_wide_argv) {
 		PHP_WIN32_CP_FREE_ARRAY(argv, argc);
 		LocalFree(argv_wide);
 	}
 	argv = argv_save;
 #endif
 	/*
 	 * Do not move this de-initialization. It needs to happen right before
 	 * exiting.
 	 */
 	cleanup_ps_args(argv);
 	exit(exit_status);
 }
 /* }}} */
