commit a40842eb73164254f465ce5bac74045200e5acb0
Author: Yukihiro "Matz" Matsumoto <matz@ruby.or.jp>
Date:   Sat Jul 9 10:56:02 2022 +0900

    bigint.c (udiv): use (signed) int for loop counters.
    
    Sometimes (xd-yd) may be negative and should be checked.

diff --git a/mrbgems/mruby-bigint/core/bigint.c b/mrbgems/mruby-bigint/core/bigint.c
index b7892ef21..e10a535df 100644
--- a/mrbgems/mruby-bigint/core/bigint.c
+++ b/mrbgems/mruby-bigint/core/bigint.c
@@ -410,108 +410,108 @@ static void
 udiv(mrb_state *mrb, mpz_t *qq, mpz_t *rr, mpz_t *xx, mpz_t *yy)
 {
   mpz_t q, x, y, r;
   int ns,f,ccc=0;
-  size_t xd,yd,i,j;
+  int xd,yd,i,j;
   mp_limb zz,z,qhat,b,u,m;
 
   if (uzero(yy))
     return;
   mpz_init(mrb,&q); mpz_init(mrb,&x);mpz_init(mrb,&y);mpz_init(mrb,&r);
   mpz_realloc(mrb,&x,(size_t)((xx->sz)+1));
   yd = digits(yy);
   ns = lzb(yy->p[yd-1]);
   ulshift(mrb,&x,xx,ns);
   ulshift(mrb,&y,yy,ns);
   xd = digits(&x);
   mpz_realloc(mrb,&q,(size_t)xd);
   xd*=2; yd*=2;
   z = hd(&y,yd-1);
-  for (j=(xd-yd);;j--) {
+  for (j=(xd-yd);j>=0;j--) {
     if (z == LMAX)
       qhat = hd(&x,j+yd);
     else {
       qhat = ((hd(&x,j+yd)<< HALFDIGITBITS) + hd(&x,j+yd-1)) / (z+1);
     }
     b = 0; zz=0;
     if (qhat) {
       for (i=0; i<yd; i++) {
         zz = qhat * hd(&y,i);
         u = hd(&x,i+j);
         u-=b;
         if (u<0) {
           b=1; u+=HLMAX+1;
         }
         else
           b=0;
         u-=LOW(zz);
         if (u < 0) {
           b++;
           u+=HLMAX+1;
         }
         b+=HIGH(zz);
         if ((i+j)%2)
           x.p[(i+j)/2] = LOW(x.p[(i+j)/2]) | (u << HALFDIGITBITS);
         else
           x.p[(i+j)/2] = (HIGH(x.p[(i+j)/2]) << HALFDIGITBITS) | u;
       }
       if (b) {
         if ((j+i)%2)
           x.p[(i+j)/2] -= b << HALFDIGITBITS;
         else
           x.p[(i+j)/2] -= b;
       }
     }
     for (;;zz++) {
       f=1;
       if (!hd(&x,j+yd)) {
-        for (i=yd-1; ; i--) {
+        for (i=yd-1; i>=0; i--) {
           if (hd(&x,j+i) > hd(&y,i)) {
             f=1;
             break;
           }
           if (hd(&x,j+i) < hd(&y,i)) {
             f=0;
             break;
           }
           if (i == 0) break;
         }
       }
       if (!f)
         break;
       qhat++;
       ccc++;
       b=0;
       for (i=0;i<yd;i++) {
         m = hd(&x,i+j)-hd(&y,i)-b;
         if (m < 0) {
           b = 1;
           m = HLMAX + 1 + m;
         }
         else
           b = 0;
         if ((i+j)%2)
           x.p[(i+j)/2] = LOW(x.p[(i+j)/2]) | (m << HALFDIGITBITS);
         else
           x.p[(i+j)/2] = (HIGH(x.p[(i+j)/2]) << HALFDIGITBITS) | m;
       }
       if (b) {
         if ((j+i)%2)
           x.p[(i+j)/2] -= b << HALFDIGITBITS;
         else
           x.p[(i+j)/2] -= b;
       }
     }
     if (j%2)
       q.p[j/2] |= qhat << HALFDIGITBITS;
     else
       q.p[j/2] |= qhat;
     if (j == 0) break;
   }
   mpz_realloc(mrb,&r,(size_t)(yy->sz));
   zero(&r);
   urshift(mrb,&r,&x,ns);
   mpz_set(mrb,rr,&r);
   mpz_set(mrb,qq,&q);
   mpz_clear(mrb,&x); mpz_clear(mrb,&y);
   mpz_clear(mrb,&q); mpz_clear(mrb,&r);
 }
@@ -643,49 +643,49 @@ mpz_sizeinbase(mpz_t *x, int base)
 static int
 mpz_init_set_str(mrb_state *mrb, mpz_t *x, const char *s, mrb_int len, mrb_int base)
 {
-  size_t i;
+  int i;
   int retval = 0;
   mpz_t t,m,bb;
   short sn;
   unsigned int k;
   mpz_init(mrb,x);
   mpz_init_set_int(mrb,&m,1);
   mpz_init(mrb,&t);
   zero(x);
   if (*s == '-') {
     sn = -1; s++;
   }
   else if (base < 0) {          /* trick: negative if base < 0 */
     sn = -1; base = -base;
   }
   else
     sn = 1;
   mpz_init_set_int(mrb,&bb, base);
-  for (i = len-1;; i--) {
+  for (i = len-1; i>=0; i--) {
     if (s[i]=='_') continue;
     if (s[i] >= '0' && s[i] <= '9')
       k = (unsigned int)s[i] - (unsigned int)'0';
     else if (s[i] >= 'A' && s[i] <= 'Z')
       k = (unsigned int)s[i] - (unsigned int)'A'+10;
     else if (s[i] >= 'a' && s[i] <= 'z')
       k = (unsigned int)s[i] - (unsigned int)'a'+10;
     else {
       retval = (-1);
       break;
     }
     if (k >= base) {
       retval = (-1);
       break;
     }
     mpz_mul_int(mrb,&t,&m,(mrb_int)k);
     mpz_add(mrb,x,x,&t);
     mpz_mul(mrb,&m,&m,&bb);
     if (i == 0) break;
   }
   if (x->sn)
     x->sn = sn;
   mpz_clear(mrb,&m);
   mpz_clear(mrb,&bb);
   mpz_clear(mrb,&t);
   return retval;
 }
