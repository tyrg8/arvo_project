commit 08a988f55735e7d18f0eb01e84294089706016b6
Merge: acf761ea0 4c35a22e0
Author: David Garske <david@wolfssl.com>
Date:   Sun Jan 15 13:45:19 2023 -0800

    Merge pull request #5973 from philljj/zd15445
    
    EVP_EncryptUpdate should update outl on empty input

diff --git a/tests/api.c b/tests/api.c
index 15877ab87..af4af4a42 100644
--- a/tests/api.c
+++ b/tests/api.c
@@ -42727,138 +42727,164 @@ static void set_plain(unsigned char *plain, int rec)
 static int test_wolfSSL_EVP_Cipher_extra(void)
 {
     int res = TEST_SKIPPED;
 #if (defined(OPENSSL_EXTRA) || defined(OPENSSL_ALL)) &&\
     (!defined(NO_AES) && defined(HAVE_AES_CBC) && defined(WOLFSSL_AES_128))
 
     /* aes128-cbc, keylen=16, ivlen=16 */
     byte aes128_cbc_key[] = {
         0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef,
         0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef,
     };
 
     byte aes128_cbc_iv[] = {
         0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
         0x99, 0x00, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
     };
 
     /* teset data size table */
     int test_drive1[] = {8, 3, 5, 512, 8, 3, 8, 512, 0};
     int test_drive2[] = {8, 3, 8, 512, 0};
     int test_drive3[] = {512, 512, 504, 512, 512, 8, 512, 0};
 
     int *test_drive[] = {test_drive1, test_drive2, test_drive3, NULL};
     int test_drive_len[100];
 
     int ret = 0;
     EVP_CIPHER_CTX *evp = NULL;
 
     int ilen = 0;
     int klen = 0;
     int i, j;
 
     const EVP_CIPHER *type;
     byte *iv;
     byte *key;
     int ivlen;
     int keylen;
 
     #define RECORDS 16
     #define BUFFSZ  512
     byte plain [BUFFSZ * RECORDS];
     byte cipher[BUFFSZ * RECORDS];
 
     byte inb[BUFFSZ];
     byte outb[BUFFSZ+16];
     int outl, inl;
 
     iv = aes128_cbc_iv;
     ivlen = sizeof(aes128_cbc_iv);
     key = aes128_cbc_key;
     keylen = sizeof(aes128_cbc_key);
     type = EVP_aes_128_cbc();
 
     set_plain(plain, BUFFSZ * RECORDS);
 
     SSL_library_init();
 
     AssertNotNull(evp = EVP_CIPHER_CTX_new());
     AssertIntNE((ret = EVP_CipherInit(evp, type, NULL, iv, 0)), 0);
 
     AssertIntEQ(EVP_CIPHER_CTX_nid(evp), NID_aes_128_cbc);
 
     klen = EVP_CIPHER_CTX_key_length(evp);
     if (klen > 0 && keylen != klen) {
         AssertIntNE(EVP_CIPHER_CTX_set_key_length(evp, keylen), 0);
     }
     ilen = EVP_CIPHER_CTX_iv_length(evp);
     if (ilen > 0 && ivlen != ilen) {
         AssertIntNE(EVP_CIPHER_CTX_set_iv_length(evp, ivlen), 0);
     }
 
     AssertIntNE((ret = EVP_CipherInit(evp, NULL, key, iv, 1)), 0);
 
     for (j = 0; j<RECORDS; j++)
     {
         inl = BUFFSZ;
         get_record(plain, inb, inl);
         AssertIntNE((ret = EVP_CipherUpdate(evp, outb, &outl, inb, inl)), 0);
         set_record(cipher, outb, outl);
     }
 
     for (i = 0; test_drive[i]; i++) {
 
     AssertIntNE((ret = EVP_CipherInit(evp, NULL, key, iv, 1)), 0);
         init_offset();
         test_drive_len[i] = 0;
 
         for (j = 0; test_drive[i][j]; j++)
         {
             inl = test_drive[i][j];
             test_drive_len[i] += inl;
 
             get_record(plain, inb, inl);
         AssertIntNE((ret = EVP_EncryptUpdate(evp, outb, &outl, inb, inl)), 0);
             /* output to cipher buffer, so that following Dec test can detect
                if any error */
             set_record(cipher, outb, outl);
         }
 
         EVP_CipherFinal(evp, outb, &outl);
 
         if (outl > 0)
             set_record(cipher, outb, outl);
     }
 
     for (i = 0; test_drive[i]; i++) {
 
             last_val = 0x0f;
 
         AssertIntNE((ret = EVP_CipherInit(evp, NULL, key, iv, 0)), 0);
 
         init_offset();
 
         for (j = 0; test_drive[i][j]; j++) {
             inl = test_drive[i][j];
             get_record(cipher, inb, inl);
 
             AssertIntNE((ret = EVP_DecryptUpdate(evp, outb, &outl, inb, inl)), 0);
 
             binary_dump(outb, outl);
             AssertIntEQ((ret = check_result(outb, outl)), 0);
             AssertFalse(outl > ((inl/16+1)*16) && outl > 16);
         }
 
         ret = EVP_CipherFinal(evp, outb, &outl);
         binary_dump(outb, outl);
 
         ret = (((test_drive_len[i] % 16) != 0) && (ret == 0)) ||
                  (((test_drive_len[i] % 16) == 0) && (ret == 1));
         AssertTrue(ret);
     }
 
+
+    EVP_CIPHER_CTX_free(evp);
+
+    /* Do an extra test to verify correct behavior with empty input. */
+
+    AssertNotNull(evp = EVP_CIPHER_CTX_new());
+    AssertIntNE((ret = EVP_CipherInit(evp, type, NULL, iv, 0)), 0);
+
+    AssertIntEQ(EVP_CIPHER_CTX_nid(evp), NID_aes_128_cbc);
+
+    klen = EVP_CIPHER_CTX_key_length(evp);
+    if (klen > 0 && keylen != klen) {
+        AssertIntNE(EVP_CIPHER_CTX_set_key_length(evp, keylen), 0);
+    }
+    ilen = EVP_CIPHER_CTX_iv_length(evp);
+    if (ilen > 0 && ivlen != ilen) {
+        AssertIntNE(EVP_CIPHER_CTX_set_iv_length(evp, ivlen), 0);
+    }
+
+    AssertIntNE((ret = EVP_CipherInit(evp, NULL, key, iv, 1)), 0);
+
+    /* outl should be set to 0 after passing NULL, 0 for input args. */
+    outl = -1;
+    AssertIntNE((ret = EVP_CipherUpdate(evp, outb, &outl, NULL, 0)), 0);
+    AssertIntEQ(outl, 0);
+
     EVP_CIPHER_CTX_free(evp);
 
     res = TEST_RES_CHECK(1);
 #endif /* test_EVP_Cipher */
     return res;
 }
diff --git a/wolfcrypt/src/evp.c b/wolfcrypt/src/evp.c
index b89f33966..5c4d2c09f 100644
--- a/wolfcrypt/src/evp.c
+++ b/wolfcrypt/src/evp.c
@@ -733,173 +733,178 @@ static int wolfSSL_EVP_CipherUpdate_CCM(WOLFSSL_EVP_CIPHER_CTX *ctx,
 /* returns WOLFSSL_SUCCESS on success and WOLFSSL_FAILURE on failure */
 int wolfSSL_EVP_CipherUpdate(WOLFSSL_EVP_CIPHER_CTX *ctx,
                                    unsigned char *out, int *outl,
                                    const unsigned char *in, int inl)
 {
     int blocks;
     int fill;
 
     WOLFSSL_ENTER("wolfSSL_EVP_CipherUpdate");
-    if (inl == 0 && in == NULL ) {
+    if ((ctx == NULL) || (outl == NULL)) {
+        WOLFSSL_MSG("Bad argument");
+        return WOLFSSL_FAILURE;
+    }
+
+    *outl = 0;
+
+    if ((inl == 0) && (in == NULL)) {
         /* Nothing to do in this case. Just return. */
         return WOLFSSL_SUCCESS;
     }
 
-    if ((ctx == NULL) || (inl < 0) || (outl == NULL) || (in == NULL)) {
+    if ((inl < 0) || (in == NULL)) {
         WOLFSSL_MSG("Bad argument");
         return WOLFSSL_FAILURE;
     }
 
-    *outl = 0;
-
     switch (ctx->cipherType) {
 #if !defined(NO_AES) && defined(HAVE_AESGCM)
         case AES_128_GCM_TYPE:
         case AES_192_GCM_TYPE:
         case AES_256_GCM_TYPE:
             /* if out == NULL, in/inl contains the additional auth data */
             return wolfSSL_EVP_CipherUpdate_GCM(ctx, out, outl, in, inl);
 #endif /* !defined(NO_AES) && defined(HAVE_AESGCM) */
 #if !defined(NO_AES) && defined(HAVE_AESCCM)
         case AES_128_CCM_TYPE:
         case AES_192_CCM_TYPE:
         case AES_256_CCM_TYPE:
             /* if out == NULL, in/inl contains the
              * additional auth data */
             return wolfSSL_EVP_CipherUpdate_CCM(ctx, out, outl, in, inl);
 #endif /* !defined(NO_AES) && defined(HAVE_AESCCM) */
 #if defined(HAVE_CHACHA) && defined(HAVE_POLY1305)
         case CHACHA20_POLY1305_TYPE:
             if (out == NULL) {
                 if (wc_ChaCha20Poly1305_UpdateAad(&ctx->cipher.chachaPoly, in,
                                                   inl) != 0) {
                     WOLFSSL_MSG("wc_ChaCha20Poly1305_UpdateAad failed");
                     return WOLFSSL_FAILURE;
                 }
                 else {
                     *outl = inl;
                     return WOLFSSL_SUCCESS;
                 }
             }
             else {
                 if (wc_ChaCha20Poly1305_UpdateData(&ctx->cipher.chachaPoly, in,
                                                    out, inl) != 0) {
                     WOLFSSL_MSG("wc_ChaCha20Poly1305_UpdateData failed");
                     return WOLFSSL_FAILURE;
                 }
                 else {
                     *outl = inl;
                     return WOLFSSL_SUCCESS;
                 }
             }
 #endif
 #ifdef HAVE_CHACHA
         case CHACHA20_TYPE:
             if (wc_Chacha_Process(&ctx->cipher.chacha, out, in, inl) != 0) {
                 WOLFSSL_MSG("wc_ChaCha_Process failed");
                 return WOLFSSL_FAILURE;
             }
             *outl = inl;
             return WOLFSSL_SUCCESS;
 #endif
         default:
             /* fall-through */
             break;
     }
 
     if (out == NULL) {
         return WOLFSSL_FAILURE;
     }
 
     /* if(inl == 0)wolfSSL_EVP_CipherUpdate_GCM to get tag */
     if (inl == 0) {
         return WOLFSSL_SUCCESS;
     }
     if (ctx->bufUsed > 0) { /* concatenate them if there is anything */
         fill = fillBuff(ctx, in, inl);
         inl -= fill;
         in  += fill;
     }
 
     /* check if the buff is full, and if so flash it out */
     if (ctx->bufUsed == ctx->block_size) {
         byte* output = out;
 
         /* During decryption we save the last block to check padding on Final.
          * Update the last block stored if one has already been stored */
         if (ctx->enc == 0) {
             if (ctx->lastUsed == 1) {
                 XMEMCPY(out, ctx->lastBlock, ctx->block_size);
                 *outl+= ctx->block_size;
                 out  += ctx->block_size;
             }
             output = ctx->lastBlock; /* redirect output to last block buffer */
             ctx->lastUsed = 1;
         }
 
         PRINT_BUF(ctx->buf, ctx->block_size);
         if (evpCipherBlock(ctx, output, ctx->buf, ctx->block_size) == 0) {
             return WOLFSSL_FAILURE;
         }
         PRINT_BUF(out, ctx->block_size);
         ctx->bufUsed = 0;
 
         /* if doing encryption update the new output block, decryption will
          * always have the last block saved for when Final is called */
         if ((ctx->enc != 0)) {
             *outl+= ctx->block_size;
             out  += ctx->block_size;
         }
     }
 
     blocks = inl / ctx->block_size;
     if (blocks > 0) {
         /* During decryption we save the last block to check padding on Final.
          * Update the last block stored if one has already been stored */
         if ((ctx->enc == 0) && (ctx->lastUsed == 1)) {
             PRINT_BUF(ctx->lastBlock, ctx->block_size);
             XMEMCPY(out, ctx->lastBlock, ctx->block_size);
             *outl += ctx->block_size;
             out += ctx->block_size;
             ctx->lastUsed = 0;
         }
 
         /* process blocks */
         if (evpCipherBlock(ctx, out, in, blocks * ctx->block_size) == 0) {
             return WOLFSSL_FAILURE;
         }
         PRINT_BUF(in, ctx->block_size*blocks);
         PRINT_BUF(out,ctx->block_size*blocks);
         inl  -= ctx->block_size * blocks;
         in   += ctx->block_size * blocks;
         if (ctx->enc == 0) {
             if ((ctx->flags & WOLFSSL_EVP_CIPH_NO_PADDING) ||
                     (ctx->block_size == 1)) {
                 ctx->lastUsed = 0;
                 *outl += ctx->block_size * blocks;
             } else {
                 /* in the case of decryption and padding, store the last block
                  * here in order to verify the padding when Final is called */
                 if (inl == 0) { /* if not 0 then we know leftovers are checked*/
                     ctx->lastUsed = 1;
                     blocks = blocks - 1; /* save last block to check padding in
                                           * EVP_CipherFinal call */
                     XMEMCPY(ctx->lastBlock, &out[ctx->block_size * blocks],
                             ctx->block_size);
                 }
                 *outl += ctx->block_size * blocks;
             }
         } else {
             *outl += ctx->block_size * blocks;
         }
     }
 
 
     if (inl > 0) {
         /* put fraction into buff */
         fillBuff(ctx, in, inl);
         /* no increase of outl */
     }
     (void)out; /* silence warning in case not read */
 
     return WOLFSSL_SUCCESS;
 }
