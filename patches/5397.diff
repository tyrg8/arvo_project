commit cb5accab9ee3abdee777b59b463b5e0ca05a490a
Author: Daniel Stenberg <daniel@haxx.se>
Date:   Sat Jan 13 21:52:15 2018 +0100

    ftp-wildcard: fix matching an empty string with "*[^a]"
    
    .... and avoid advancing the pointer to trigger an out of buffer read.
    
    Detected by OSS-fuzz
    Bug: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=5251
    Assisted-by: Max Dymond

diff --git a/lib/curl_fnmatch.c b/lib/curl_fnmatch.c
index 8a1e106c4..5638e167a 100644
--- a/lib/curl_fnmatch.c
+++ b/lib/curl_fnmatch.c
@@ -1,47 +1,47 @@
 /***************************************************************************
  *                                  _   _ ____  _
  *  Project                     ___| | | |  _ \| |
  *                             / __| | | | |_) | |
  *                            | (__| |_| |  _ <| |___
  *                             \___|\___/|_| \_\_____|
  *
- * Copyright (C) 1998 - 2017, Daniel Stenberg, <daniel@haxx.se>, et al.
+ * Copyright (C) 1998 - 2018, Daniel Stenberg, <daniel@haxx.se>, et al.
  *
  * This software is licensed as described in the file COPYING, which
  * you should have received as part of this distribution. The terms
  * are also available at https://curl.haxx.se/docs/copyright.html.
  *
  * You may opt to use, copy, modify, merge, publish, distribute and/or sell
  * copies of the Software, and permit persons to whom the Software is
  * furnished to do so, under the terms of the COPYING file.
  *
  * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
  * KIND, either express or implied.
  *
  ***************************************************************************/
 
 #include "curl_setup.h"
 
 #include <curl/curl.h>
 
 #include "curl_fnmatch.h"
 #include "curl_memory.h"
 
 /* The last #include file should be: */
 #include "memdebug.h"
 
 #define CURLFNM_CHARSET_LEN (sizeof(char) * 256)
 #define CURLFNM_CHSET_SIZE (CURLFNM_CHARSET_LEN + 15)
 
 #define CURLFNM_NEGATE  CURLFNM_CHARSET_LEN
 
 #define CURLFNM_ALNUM   (CURLFNM_CHARSET_LEN + 1)
 #define CURLFNM_DIGIT   (CURLFNM_CHARSET_LEN + 2)
 #define CURLFNM_XDIGIT  (CURLFNM_CHARSET_LEN + 3)
 #define CURLFNM_ALPHA   (CURLFNM_CHARSET_LEN + 4)
 #define CURLFNM_PRINT   (CURLFNM_CHARSET_LEN + 5)
 #define CURLFNM_BLANK   (CURLFNM_CHARSET_LEN + 6)
 #define CURLFNM_LOWER   (CURLFNM_CHARSET_LEN + 7)
 #define CURLFNM_GRAPH   (CURLFNM_CHARSET_LEN + 8)
 #define CURLFNM_SPACE   (CURLFNM_CHARSET_LEN + 9)
 #define CURLFNM_UPPER   (CURLFNM_CHARSET_LEN + 10)
@@ -304,106 +304,108 @@ fail:
 static int loop(const unsigned char *pattern, const unsigned char *string)
 {
   loop_state state = CURLFNM_LOOP_DEFAULT;
   unsigned char *p = (unsigned char *)pattern;
   unsigned char *s = (unsigned char *)string;
   unsigned char charset[CURLFNM_CHSET_SIZE] = { 0 };
   int rc = 0;
 
   for(;;) {
     switch(state) {
     case CURLFNM_LOOP_DEFAULT:
       if(*p == '*') {
         while(*(p + 1) == '*') /* eliminate multiple stars */
           p++;
         if(*s == '\0' && *(p + 1) == '\0')
           return CURL_FNMATCH_MATCH;
         rc = loop(p + 1, s); /* *.txt matches .txt <=> .txt matches .txt */
         if(rc == CURL_FNMATCH_MATCH)
           return CURL_FNMATCH_MATCH;
         if(*s) /* let the star eat up one character */
           s++;
         else
           return CURL_FNMATCH_NOMATCH;
       }
       else if(*p == '?') {
         if(ISPRINT(*s)) {
           s++;
           p++;
         }
         else if(*s == '\0')
           return CURL_FNMATCH_NOMATCH;
         else
           return CURL_FNMATCH_FAIL; /* cannot deal with other character */
       }
       else if(*p == '\0') {
         if(*s == '\0')
           return CURL_FNMATCH_MATCH;
         return CURL_FNMATCH_NOMATCH;
       }
       else if(*p == '\\') {
         state = CURLFNM_LOOP_BACKSLASH;
         p++;
       }
       else if(*p == '[') {
         unsigned char *pp = p + 1; /* cannot handle with pointer to register */
         if(setcharset(&pp, charset)) {
           int found = FALSE;
           if(charset[(unsigned int)*s])
             found = TRUE;
           else if(charset[CURLFNM_ALNUM])
             found = ISALNUM(*s);
           else if(charset[CURLFNM_ALPHA])
             found = ISALPHA(*s);
           else if(charset[CURLFNM_DIGIT])
             found = ISDIGIT(*s);
           else if(charset[CURLFNM_XDIGIT])
             found = ISXDIGIT(*s);
           else if(charset[CURLFNM_PRINT])
             found = ISPRINT(*s);
           else if(charset[CURLFNM_SPACE])
             found = ISSPACE(*s);
           else if(charset[CURLFNM_UPPER])
             found = ISUPPER(*s);
           else if(charset[CURLFNM_LOWER])
             found = ISLOWER(*s);
           else if(charset[CURLFNM_BLANK])
             found = ISBLANK(*s);
           else if(charset[CURLFNM_GRAPH])
             found = ISGRAPH(*s);
 
           if(charset[CURLFNM_NEGATE])
             found = !found;
 
           if(found) {
             p = pp + 1;
-            s++;
+            if(*s)
+              /* don't advance if we're matching on an empty string */
+              s++;
             memset(charset, 0, CURLFNM_CHSET_SIZE);
           }
           else
             return CURL_FNMATCH_NOMATCH;
         }
         else
           return CURL_FNMATCH_FAIL;
       }
       else {
         if(*p++ != *s++)
           return CURL_FNMATCH_NOMATCH;
       }
       break;
     case CURLFNM_LOOP_BACKSLASH:
       if(ISPRINT(*p)) {
         if(*p++ == *s++)
           state = CURLFNM_LOOP_DEFAULT;
         else
           return CURL_FNMATCH_NOMATCH;
       }
       else
         return CURL_FNMATCH_FAIL;
       break;
     }
   }
 }
 
 /*
  * @unittest: 1307
  */
diff --git a/tests/unit/unit1307.c b/tests/unit/unit1307.c
index 576462274..c5ec587a5 100644
--- a/tests/unit/unit1307.c
+++ b/tests/unit/unit1307.c
@@ -1,209 +1,208 @@
 /***************************************************************************
  *                                  _   _ ____  _
  *  Project                     ___| | | |  _ \| |
  *                             / __| | | | |_) | |
  *                            | (__| |_| |  _ <| |___
  *                             \___|\___/|_| \_\_____|
  *
- * Copyright (C) 1998 - 2016, Daniel Stenberg, <daniel@haxx.se>, et al.
+ * Copyright (C) 1998 - 2018, Daniel Stenberg, <daniel@haxx.se>, et al.
  *
  * This software is licensed as described in the file COPYING, which
  * you should have received as part of this distribution. The terms
  * are also available at https://curl.haxx.se/docs/copyright.html.
  *
  * You may opt to use, copy, modify, merge, publish, distribute and/or sell
  * copies of the Software, and permit persons to whom the Software is
  * furnished to do so, under the terms of the COPYING file.
  *
  * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
  * KIND, either express or implied.
  *
  ***************************************************************************/
 #include "curlcheck.h"
 
 #include "curl_fnmatch.h"
 
 #define MATCH   CURL_FNMATCH_MATCH
 #define NOMATCH CURL_FNMATCH_NOMATCH
 #define RE_ERR  CURL_FNMATCH_FAIL
 
-#define MAX_PATTERN_L 100
-#define MAX_STRING_L  100
-
 struct testcase {
-  char pattern[MAX_PATTERN_L];
-  char string[MAX_STRING_L];
+  const char *pattern;
+  const char *string;
   int  result;
 };
 
 static const struct testcase tests[] = {
   /* brackets syntax */
   { "\\[",                      "[",                      MATCH },
   { "[",                        "[",                      RE_ERR },
   { "[]",                       "[]",                     RE_ERR },
   { "[][]",                     "[",                      MATCH },
   { "[][]",                     "]",                      MATCH },
   { "[[]",                      "[",                      MATCH },
   { "[[[]",                     "[",                      MATCH },
   { "[[[[]",                    "[",                      MATCH },
   { "[[[[]",                    "[",                      MATCH },
 
   { "[][[]",                    "]",                      MATCH },
   { "[][[[]",                   "[",                      MATCH },
   { "[[]",                      "]",                      NOMATCH },
 
   { "[a-z]",                    "a",                      MATCH },
   { "[a-z]",                    "A",                      NOMATCH },
   { "?[a-z]",                   "?Z",                     NOMATCH },
   { "[A-Z]",                    "C",                      MATCH },
   { "[A-Z]",                    "c",                      NOMATCH },
   { "[0-9]",                    "7",                      MATCH },
   { "[7-8]",                    "7",                      MATCH },
   { "[7-]",                     "7",                      MATCH },
   { "[7-]",                     "-",                      MATCH },
   { "[7-]",                     "[",                      NOMATCH },
   { "[a-bA-F]",                 "F",                      MATCH },
   { "[a-bA-B9]",                "9",                      MATCH },
   { "[a-bA-B98]",               "8",                      MATCH },
   { "[a-bA-B98]",               "C",                      NOMATCH },
   { "[a-bA-Z9]",                "F",                      MATCH },
   { "[a-bA-Z9]ero*",            "Zero chance.",           MATCH },
   { "S[a-][x]opho*",            "Saxophone",              MATCH },
   { "S[a-][x]opho*",            "SaXophone",              NOMATCH },
   { "S[a-][x]*.txt",            "S-x.txt",                MATCH },
   { "[\\a-\\b]",                "a",                      MATCH },
   { "[\\a-\\b]",                "b",                      MATCH },
   { "[?*[][?*[][?*[]",          "?*[",                    MATCH },
   { "[][?*-]",                  "]",                      MATCH },
   { "[][?*-]",                  "[",                      MATCH },
   { "[][?*-]",                  "?",                      MATCH },
   { "[][?*-]",                  "*",                      MATCH },
   { "[][?*-]",                  "-",                      MATCH },
   { "[]?*-]",                   "-",                      MATCH },
   { "?/b/c",                    "a/b/c",                  MATCH },
   { "^_{}~",                    "^_{}~",                  MATCH },
   { "!#%+,-./01234567889",      "!#%+,-./01234567889",    MATCH },
   { "PQRSTUVWXYZ]abcdefg",      "PQRSTUVWXYZ]abcdefg",    MATCH },
   { ":;=@ABCDEFGHIJKLMNO",      ":;=@ABCDEFGHIJKLMNO",    MATCH },
 
   /* negate */
   { "[!a]",                     "b",                      MATCH },
   { "[!a]",                     "a",                      NOMATCH },
   { "[^a]",                     "b",                      MATCH },
   { "[^a]",                     "a",                      NOMATCH },
   { "[^a-z0-9A-Z]",             "a",                      NOMATCH },
   { "[^a-z0-9A-Z]",             "-",                      MATCH },
   { "curl[!a-z]lib",            "curl lib",               MATCH },
   { "curl[! ]lib",              "curl lib",               NOMATCH },
   { "[! ][ ]",                  "  ",                     NOMATCH },
   { "[! ][ ]",                  "a ",                     MATCH },
   { "*[^a].t?t",                "a.txt",                  NOMATCH },
   { "*[^a].t?t",                "ba.txt",                 NOMATCH },
   { "*[^a].t?t",                "ab.txt",                 MATCH },
+  { "*[^a]",                    "",                       MATCH },
+  { "[!ÿ]",                     "",                       MATCH },
   { "[!?*[]",                   "?",                      NOMATCH },
   { "[!!]",                     "!",                      NOMATCH },
   { "[!!]",                     "x",                      MATCH },
 
   { "[[:alpha:]]",              "a",                      MATCH },
   { "[[:alpha:]]",              "9",                      NOMATCH },
   { "[[:alnum:]]",              "a",                      MATCH },
   { "[[:alnum:]]",              "[",                      NOMATCH },
   { "[[:alnum:]]",              "]",                      NOMATCH },
   { "[[:alnum:]]",              "9",                      MATCH },
   { "[[:digit:]]",              "9",                      MATCH },
   { "[[:xdigit:]]",             "9",                      MATCH },
   { "[[:xdigit:]]",             "F",                      MATCH },
   { "[[:xdigit:]]",             "G",                      NOMATCH },
   { "[[:upper:]]",              "U",                      MATCH },
   { "[[:upper:]]",              "u",                      NOMATCH },
   { "[[:lower:]]",              "l",                      MATCH },
   { "[[:lower:]]",              "L",                      NOMATCH },
   { "[[:print:]]",              "L",                      MATCH },
-  { "[[:print:]]",              {'\10'},                  NOMATCH },
-  { "[[:print:]]",              {'\10'},                  NOMATCH },
+  { "[[:print:]]",              "\10",                    NOMATCH },
+  { "[[:print:]]",              "\10",                    NOMATCH },
   { "[[:space:]]",              " ",                      MATCH },
   { "[[:space:]]",              "x",                      NOMATCH },
   { "[[:graph:]]",              " ",                      NOMATCH },
   { "[[:graph:]]",              "x",                      MATCH },
-  { "[[:blank:]]",              {'\t'},                   MATCH },
-  { "[[:blank:]]",              {' '},                    MATCH },
-  { "[[:blank:]]",              {'\r'},                   NOMATCH },
-  { "[^[:blank:]]",             {'\t'},                   NOMATCH },
-  { "[^[:print:]]",             {'\10'},                  MATCH },
+  { "[[:blank:]]",              "\t",                     MATCH },
+  { "[[:blank:]]",              " ",                      MATCH },
+  { "[[:blank:]]",              "\r",                     NOMATCH },
+  { "[^[:blank:]]",             "\t",                     NOMATCH },
+  { "[^[:print:]]",             "\10",                    MATCH },
   { "[[:lower:]][[:lower:]]",   "ll",                     MATCH },
 
   { "Curl[[:blank:]];-)",       "Curl ;-)",               MATCH },
   { "*[[:blank:]]*",            " ",                      MATCH },
   { "*[[:blank:]]*",            "",                       NOMATCH },
   { "*[[:blank:]]*",            "hi, im_Pavel",           MATCH },
 
   /* common using */
   { "filename.dat",             "filename.dat",           MATCH },
   { "*curl*",                   "lets use curl!!",        MATCH },
   { "filename.txt",             "filename.dat",           NOMATCH },
   { "*.txt",                    "text.txt",               MATCH },
   { "*.txt",                    "a.txt",                  MATCH },
   { "*.txt",                    ".txt",                   MATCH },
   { "*.txt",                    "txt",                    NOMATCH },
   { "??.txt",                   "99.txt",                 MATCH },
   { "??.txt",                   "a99.txt",                NOMATCH },
   { "?.???",                    "a.txt",                  MATCH },
   { "*.???",                    "somefile.dat",           MATCH },
   { "*.???",                    "photo.jpeg",             NOMATCH },
   { ".*",                       ".htaccess",              MATCH },
   { ".*",                       ".",                      MATCH },
   { ".*",                       "..",                     MATCH },
 
   /* many stars => one star */
   { "**.txt",                   "text.txt",               MATCH },
   { "***.txt",                  "t.txt",                  MATCH },
   { "****.txt",                 ".txt",                   MATCH },
 
   /* empty string or pattern */
   { "",                         "",                       MATCH },
   { "",                         "hello",                  NOMATCH },
   { "file",                     "",                       NOMATCH  },
   { "?",                        "",                       NOMATCH },
   { "*",                        "",                       MATCH },
   { "x",                        "",                       NOMATCH },
 
   /* backslash */
   { "\\",                       "\\",                     RE_ERR },
   { "\\\\",                     "\\",                     MATCH },
   { "\\\\",                     "\\\\",                   NOMATCH },
   { "\\?",                      "?",                      MATCH },
   { "\\*",                      "*",                      MATCH },
   { "?.txt",                    "?.txt",                  MATCH },
   { "*.txt",                    "*.txt",                  MATCH },
   { "\\?.txt",                  "?.txt",                  MATCH },
   { "\\*.txt",                  "*.txt",                  MATCH },
   { "\\?.txt",                  "x.txt",                  NOMATCH },
   { "\\*.txt",                  "x.txt",                  NOMATCH },
   { "\\*\\\\.txt",              "*\\.txt",                MATCH },
   { "*\\**\\?*\\\\*",           "cc*cc?cc\\cc*cc",        MATCH },
   { "*\\**\\?*\\\\*",           "cc*cc?cccc",             NOMATCH },
   { "*\\**\\?*\\\\*",           "cc*cc?cc\\cc*cc",        MATCH },
   { "*\\?*\\**",                "cc?c*c",                 MATCH },
   { "*\\?*\\**curl*",           "cc?c*curl",              MATCH },
   { "*\\?*\\**",                "cc?cc",                  NOMATCH },
   { "\\\"\\$\\&\\'\\(\\)",      "\"$&'()",                MATCH },
   { "\\*\\?\\[\\\\\\`\\|",      "*?[\\`|",                MATCH },
   { "[\\a\\b]c",                "ac",                     MATCH },
   { "[\\a\\b]c",                "bc",                     MATCH },
   { "[\\a\\b]d",                "bc",                     NOMATCH },
   { "[a-bA-B\\?]",              "?",                      MATCH },
   { "cu[a-ab-b\\r]l",           "curl",                   MATCH },
   { "[\\a-z]",                  "c",                      MATCH },
 
   { "?*?*?.*?*",                "abc.c",                  MATCH },
   { "?*?*?.*?*",                "abcc",                   NOMATCH },
   { "?*?*?.*?*",                "abc.",                   NOMATCH },
   { "?*?*?.*?*",                "abc.c++",                MATCH },
   { "?*?*?.*?*",                "abcdef.c++",             MATCH },
   { "?*?*?.?",                  "abcdef.c",               MATCH },
   { "?*?*?.?",                  "abcdef.cd",              NOMATCH },
 
   { "Lindmätarv",               "Lindmätarv",             MATCH },
 
   { "",                         "",                       MATCH }
 };
