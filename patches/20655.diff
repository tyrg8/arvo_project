commit 97229244ebd2e50ec0021ecd442e3c1c27156a5c
Author: Ebrahim Byagowi <ebrahim@gnu.org>
Date:   Wed Feb 12 15:41:22 2020 +0330

    [fuzzer] Fix hb-set-fuzzer minor overflow issue
    
    Size shouldn't be smaller than the struct not its pointer size.
    
    Fixes https://crbug.com/oss-fuzz/20655

diff --git a/test/api/fonts/clusterfuzz-testcase-minimized-hb-set-fuzzer-6255224052514816 b/test/api/fonts/clusterfuzz-testcase-minimized-hb-set-fuzzer-6255224052514816
new file mode 100644
index 000000000..d8a39898e
--- /dev/null
+++ b/test/api/fonts/clusterfuzz-testcase-minimized-hb-set-fuzzer-6255224052514816
@@ -0,0 +1 @@
+       
\ No newline at end of file
diff --git a/test/fuzzing/hb-set-fuzzer.cc b/test/fuzzing/hb-set-fuzzer.cc
index 6f967c32b..30b60797f 100644
--- a/test/fuzzing/hb-set-fuzzer.cc
+++ b/test/fuzzing/hb-set-fuzzer.cc
@@ -33,45 +33,45 @@ static hb_set_t* create_set (const uint32_t* value_array, int count)
 
 extern "C" int LLVMFuzzerTestOneInput (const uint8_t *data, size_t size)
 {
-  if (size < sizeof(instructions_t*))
+  if (size < sizeof (instructions_t))
     return 0;
 
   const instructions_t* instructions = reinterpret_cast<const instructions_t*> (data);
-  data += sizeof(instructions_t);
-  size -= sizeof(instructions_t);
+  data += sizeof (instructions_t);
+  size -= sizeof (instructions_t);
 
   const uint32_t* values = reinterpret_cast<const uint32_t*> (data);
-  size = size / sizeof(uint32_t);
+  size = size / sizeof (uint32_t);
 
   if (size < instructions->first_set_size)
     return 0;
 
   hb_set_t* set_a = create_set (values, instructions->first_set_size);
 
   values += instructions->first_set_size;
   size -= instructions->first_set_size;
   hb_set_t* set_b = create_set (values, size);
 
   switch (instructions->operation)
   {
     case INTERSECT:
       hb_set_intersect (set_a, set_b);
       break;
     case UNION:
       hb_set_union (set_a, set_b);
       break;
     case SUBTRACT:
       hb_set_subtract (set_a, set_b);
       break;
     case SYMMETRIC_DIFFERENCE:
       hb_set_symmetric_difference (set_a, set_b);
       break;
     default:
       break;
   }
 
   hb_set_destroy (set_a);
   hb_set_destroy (set_b);
 
   return 0;
 }
