commit 0c39b8074e5599ef667c72f94eecc27945e976df
Merge: 1da000b24 9cade8c9a
Author: JacobBarthelmeh <jacob@wolfssl.com>
Date:   Thu Aug 3 14:12:47 2023 -0600

    Merge pull request #6654 from lealem47/zd16475
    
    Fix of buffer overflow in GenerateDNSEntryRIDString()

diff --git a/wolfcrypt/src/asn.c b/wolfcrypt/src/asn.c
index 3772382d7..01bde0844 100644
--- a/wolfcrypt/src/asn.c
+++ b/wolfcrypt/src/asn.c
@@ -12982,94 +12982,95 @@ static int GenerateDNSEntryIPString(DNS_entry* entry, void* heap)
 #if defined(OPENSSL_ALL)
 /* used to set the human readable string for the registeredID with an
  * ASN_RID_TYPE DNS entry
  * return 0 on success
  */
 static int GenerateDNSEntryRIDString(DNS_entry* entry, void* heap)
 {
     int i, j, ret   = 0;
     int nameSz      = 0;
-    int numerical   = 0;
     int nid         = 0;
     int tmpSize     = MAX_OID_SZ;
     word32 oid      = 0;
     word32 idx      = 0;
     word16 tmpName[MAX_OID_SZ];
     char   oidName[MAX_OID_SZ];
     char*  finalName;
 
     if (entry == NULL || entry->type != ASN_RID_TYPE) {
         return BAD_FUNC_ARG;
     }
 
     if (entry->len <= 0) {
         return BAD_FUNC_ARG;
     }
 
     XMEMSET(&oidName, 0, MAX_OID_SZ);
 
     ret = GetOID((const byte*)entry->name, &idx, &oid, oidIgnoreType,
                  entry->len);
 
     if (ret == 0 && (nid = oid2nid(oid, oidCsrAttrType)) > 0) {
         /* OID has known string value */
         finalName = (char*)wolfSSL_OBJ_nid2ln(nid);
     }
     else {
         /* Decode OBJECT_ID into dotted form array. */
         ret = DecodeObjectId((const byte*)(entry->name),(word32)entry->len,
                 tmpName, (word32*)&tmpSize);
 
-        numerical = 1;
         if (ret == 0) {
             j = 0;
             /* Append each number of dotted form. */
             for (i = 0; i < tmpSize; i++) {
-                ret = XSNPRINTF(oidName + j, MAX_OID_SZ, "%d", tmpName[i]);
+                if (j > MAX_OID_SZ) {
+                    return BUFFER_E;
+                }
+
+                if (i < tmpSize - 1) {
+                    ret = XSNPRINTF(oidName + j, MAX_OID_SZ - j, "%d.", tmpName[i]);
+                }
+                else {
+                    ret = XSNPRINTF(oidName + j, MAX_OID_SZ - j, "%d", tmpName[i]);
+                }
+
                 if (ret >= 0) {
                     j += ret;
-                    if (i < tmpSize - 1) {
-                        oidName[j] = '.';
-                        j++;
-                    }
                 }
                 else {
                     return BUFFER_E;
                 }
             }
             ret = 0;
             finalName = oidName;
         }
     }
 
     if (ret == 0) {
         nameSz = (int)XSTRLEN((const char*)finalName);
 
-        entry->ridString = (char*)XMALLOC(nameSz + numerical, heap,
-                                          DYNAMIC_TYPE_ALTNAME);
+        entry->ridString = (char*)XMALLOC(nameSz + 1, heap,
+                DYNAMIC_TYPE_ALTNAME);
 
         if (entry->ridString == NULL) {
             ret = MEMORY_E;
         }
 
         if (ret == 0) {
-            XMEMCPY(entry->ridString, finalName, nameSz);
-            if (numerical) {
-                entry->ridString[nameSz] = '\0';
-            }
+            XMEMCPY(entry->ridString, finalName, nameSz + 1);
         }
     }
 
     return ret;
 }
 #endif /* OPENSSL_ALL && WOLFSSL_ASN_TEMPLATE */
 
 #ifdef WOLFSSL_ASN_TEMPLATE
 
 #if defined(WOLFSSL_CERT_GEN) || !defined(NO_CERTS)
 
 /* Adds a DNS entry to a list of DNS entries
  *
  * @param [in, out] lst      Linked list of DNS name entries.
  * @param [in]      entry    Entry to add to the list
  * @return  0 on success.
  */
