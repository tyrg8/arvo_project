commit ce7a64e2aa04e000dd12a0ea89a1a430e2f8917b
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Thu Oct 19 19:25:15 2023 -0400

    allow user to comingle with system policies

diff --git a/MagickCore/policy.c b/MagickCore/policy.c
index 8deb4f4b5..ae5eb0166 100644
--- a/MagickCore/policy.c
+++ b/MagickCore/policy.c
@@ -228,160 +228,158 @@ static LinkedListInfo *AcquirePolicyCache(const char *filename,
     p=PolicyMap+i;
     policy_info=(PolicyInfo *) AcquireMagickMemory(sizeof(*policy_info));
     if (policy_info == (PolicyInfo *) NULL)
       {
         (void) ThrowMagickException(exception,GetMagickModule(),
           ResourceLimitError,"MemoryAllocationFailed","`%s'",
           p->name == (char *) NULL ? "" : p->name);
         CatchException(exception);
         continue;
       }
     (void) memset(policy_info,0,sizeof(*policy_info));
     policy_info->path=(char *) "[built-in]";
     policy_info->domain=p->domain;
     policy_info->rights=p->rights;
     policy_info->name=(char *) p->name;
     policy_info->pattern=(char *) p->pattern;
     policy_info->value=(char *) p->value;
     policy_info->exempt=MagickTrue;
     policy_info->signature=MagickCoreSignature;
     status=AppendValueToLinkedList(cache,policy_info);
     if (status == MagickFalse)
       {
         (void) ThrowMagickException(exception,GetMagickModule(),
           ResourceLimitError,"MemoryAllocationFailed","`%s'",
           p->name == (char *) NULL ? "" : p->name);
         CatchException(exception);
       }
   }
   return(cache);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 +   G e t P o l i c y I n f o                                                 %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  GetPolicyInfo() searches the policy list for the specified name and if found
 %  returns attributes for that policy.
 %
 %  The format of the GetPolicyInfo method is:
 %
 %      PolicyInfo *GetPolicyInfo(const char *name,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o name: the policy name.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
 static PolicyInfo *GetPolicyInfo(const char *name,ExceptionInfo *exception)
 {
   char
-    policyname[MagickPathExtent];
+    policyname[MagickPathExtent],
+    *q;
+
+  ElementInfo
+    *p;
 
   PolicyDomain
     domain;
 
   PolicyInfo
     *policy;
 
-  ElementInfo
-    *p;
-
-  char
-    *q;
-
   assert(exception != (ExceptionInfo *) NULL);
   if (IsPolicyCacheInstantiated(exception) == MagickFalse)
     return((PolicyInfo *) NULL);
   /*
     Strip names of whitespace.
   */
   *policyname='\0';
   if (name != (const char *) NULL)
     (void) CopyMagickString(policyname,name,MagickPathExtent);
   for (q=policyname; *q != '\0'; q++)
   {
     if (isspace((int) ((unsigned char) *q)) == 0)
       continue;
     (void) CopyMagickString(q,q+1,MagickPathExtent);
     q--;
   }
   /*
     Strip domain from policy name (e.g. resource:map).
   */
   domain=UndefinedPolicyDomain;
   for (q=policyname; *q != '\0'; q++)
   {
     if (*q != ':')
       continue;
     *q='\0';
     domain=(PolicyDomain) ParseCommandOption(MagickPolicyDomainOptions,
       MagickTrue,policyname);
     (void) CopyMagickString(policyname,q+1,MagickPathExtent);
     break;
   }
   /*
     Search for policy tag.
   */
   policy=(PolicyInfo *) NULL;
   LockSemaphoreInfo(policy_semaphore);
   ResetLinkedListIterator(policy_cache);
   p=GetHeadElementInLinkedList(policy_cache);
   if ((name == (const char *) NULL) || (LocaleCompare(name,"*") == 0))
     {
       UnlockSemaphoreInfo(policy_semaphore);
       if (p != (ElementInfo *) NULL)
         policy=(PolicyInfo *) p->value;
       return(policy);
     }
   while (p != (ElementInfo *) NULL)
   {
     policy=(PolicyInfo *) p->value;
     if ((domain == UndefinedPolicyDomain) || (policy->domain == domain))
       if (LocaleCompare(policyname,policy->name) == 0)
         break;
     p=p->next;
   }
   if (p == (ElementInfo *) NULL)
     policy=(PolicyInfo *) NULL;
   else
     (void) SetHeadElementInLinkedList(policy_cache,p);
   UnlockSemaphoreInfo(policy_semaphore);
   return(policy);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   G e t P o l i c y I n f o L i s t                                         %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  GetPolicyInfoList() returns any policies that match the specified pattern.
 %
 %  The format of the GetPolicyInfoList function is:
 %
 %      const PolicyInfo **GetPolicyInfoList(const char *pattern,
 %        size_t *number_policies,ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o pattern: Specifies a pointer to a text string containing a pattern.
 %
 %    o number_policies:  returns the number of policies in the list.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
@@ -1151,224 +1149,187 @@ static MagickBooleanType ValidateSecurityPolicy(const char *policy,
 MagickExport MagickBooleanType SetMagickSecurityPolicy(const char *policy,
   ExceptionInfo *exception)
 {
   MagickBooleanType
     status;
 
   LinkedListInfo
     *user_policies;
 
   PolicyInfo
     *p;
 
+  /*
+    Load user policies.
+  */
   assert(exception != (ExceptionInfo *) NULL);
   if (policy == (const char *) NULL)
     return(MagickFalse);
   if (ValidateSecurityPolicy(policy,PolicyFilename,exception) == MagickFalse)
     return(MagickFalse);
   status=LoadPolicyCache(policy_cache,policy,"[user-policy]",0,exception);
   if (status == MagickFalse)
-    return(MagickFalse);
+    return(status);
+  /*
+    Synchronize user policies.
+  */
   user_policies=NewLinkedList(0);
   status=LoadPolicyCache(user_policies,policy,"[user-policy]",0,exception);
   if (status == MagickFalse)
     {
       user_policies=DestroyLinkedList(user_policies,DestroyPolicyElement);
       return(MagickFalse);
     }
   ResetLinkedListIterator(user_policies);
   p=(PolicyInfo *) GetNextValueInLinkedList(user_policies);
   while (p != (PolicyInfo *) NULL)
   {
-    if ((p->domain != (PolicyDomain) NULL) && (p->name != (char *) NULL) &&
-        (p->value != (char *) NULL))
+    if ((p->name != (char *) NULL) && (p->value != (char *) NULL))
       {
         status=SetMagickSecurityPolicyValue(p->domain,p->name,p->value,
           exception);
         if (status == MagickFalse)
           break;
       }
     p=(PolicyInfo *) GetNextValueInLinkedList(user_policies);
   }
   user_policies=DestroyLinkedList(user_policies,DestroyPolicyElement);
   return(status);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %  S e t M a g i c k S e c u r i t y P o l i c y V a l u e                    %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  SetMagickSecurityPolicyValue() sets a value associated with an ImageMagick
 %  security policy.  For most policies, the value must be less than any value
 %  set by the security policy configuration file (i.e. policy.xml).  It returns
 %  MagickFalse if the policy cannot be modified or if the policy does not parse.
 %
 %  The format of the SetMagickSecurityPolicyValue method is:
 %
 %      MagickBooleanType SetMagickSecurityPolicyValue(
 %        const PolicyDomain domain,const char *name,const char *value,
 %        ExceptionInfo *exception)
 %
 %  A description of each parameter follows:
 %
 %    o domain: the domain of the policy (e.g. system, resource).
 %
 %    o name: the name of the policy.
 %
 %    o value: the value to set the policy to.
 %
 %    o exception: return any errors or warnings in this structure.
 %
 */
-
-static MagickBooleanType SetPolicyValue(const PolicyDomain domain,
-  const char *name,const char *value)
-{
-  MagickBooleanType
-    status;
-
-  PolicyInfo
-    *p;
-
-  status=MagickTrue;
-  LockSemaphoreInfo(policy_semaphore);
-  ResetLinkedListIterator(policy_cache);
-  p=(PolicyInfo *) GetNextValueInLinkedList(policy_cache);
-  while (p != (PolicyInfo *) NULL)
-  {
-    if ((p->domain == domain) && (LocaleCompare(name,p->name) == 0))
-      break;
-    p=(PolicyInfo *) GetNextValueInLinkedList(policy_cache);
-  }
-  if (p != (PolicyInfo *) NULL)
-    {
-      if (p->value != (char *) NULL)
-        p->value=DestroyString(p->value);
-    }
-  else
-    {
-      p=(PolicyInfo *) AcquireCriticalMemory(sizeof(*p));
-      (void) memset(p,0,sizeof(*p));
-      p->exempt=MagickFalse;
-      p->signature=MagickCoreSignature;
-      p->domain=domain;
-      p->name=AcquirePolicyString(name,1);
-      status=AppendValueToLinkedList(policy_cache,p);
-    }
-  p->value=AcquirePolicyString(value,1);
-  UnlockSemaphoreInfo(policy_semaphore);
-  if (status == MagickFalse)
-    p=(PolicyInfo *) RelinquishMagickMemory(p);
-  return(status);
-}
-
 MagickExport MagickBooleanType SetMagickSecurityPolicyValue(
   const PolicyDomain domain,const char *name,const char *value,
   ExceptionInfo *exception)
 {
   char
     *current_value;
 
   magick_unreferenced(exception);
   assert(exception != (ExceptionInfo *) NULL);
   if ((name == (const char *) NULL) || (value == (const char *) NULL))
     return(MagickFalse);
   switch (domain)
   {
     case CachePolicyDomain:
     {
       if (LocaleCompare(name,"memory-map") == 0)
         {
           if (LocaleCompare(value,"anonymous") != 0)
             return(MagickFalse);
           ResetCacheAnonymousMemory();
           ResetStreamAnonymousMemory();
-          return(SetPolicyValue(domain,name,value));
+          return(MagickTrue);
         }
       if (LocaleCompare(name,"synchronize") == 0)
-        return(SetPolicyValue(domain,name,value));
+        return(MagickTrue);
       break;
     }
     case ResourcePolicyDomain:
     {
       ssize_t
         type;
 
       if (LocaleCompare(name,"temporary-path") == 0)
-        return(SetPolicyValue(domain,name,value));
+        return(MagickTrue);
       type=ParseCommandOption(MagickResourceOptions,MagickFalse,name);
       if (type >= 0)
         {
           MagickSizeType
             limit;
 
           limit=MagickResourceInfinity;
           if (LocaleCompare("unlimited",value) != 0)
             limit=StringToMagickSizeType(value,100.0);
           if ((ResourceType) type == TimeResource)
             limit=(MagickSizeType) ParseMagickTimeToLive(value);
           return(SetMagickResourceLimit((ResourceType) type,limit));
         }
       break;
     }
     case SystemPolicyDomain:
     {
       if (LocaleCompare(name,"font") == 0)
-        return(SetPolicyValue(domain,name,value));
+        return(MagickTrue);
       if (LocaleCompare(name,"max-memory-request") == 0)
         {
           current_value=GetPolicyValue("system:max-memory-request");
           if ((current_value == (char *) NULL) ||
               (StringToSizeType(value,100.0) < StringToSizeType(current_value,100.0)))
             {
               if (current_value != (char *) NULL)
                 current_value=DestroyString(current_value);
               ResetMaxMemoryRequest();
-              return(SetPolicyValue(domain,name,value));
+              return(MagickTrue);
             }
           if (current_value != (char *) NULL)
             current_value=DestroyString(current_value);
         }
       if (LocaleCompare(name,"memory-map") == 0)
         {
           if (LocaleCompare(value,"anonymous") != 0)
             return(MagickFalse);
           ResetVirtualAnonymousMemory();
-          return(SetPolicyValue(domain,name,value));
+          return(MagickTrue);
         }
       if (LocaleCompare(name,"precision") == 0)
         {
           ResetMagickPrecision();
-          return(SetPolicyValue(domain,name,value));
+          return(MagickTrue);
         }
       if (LocaleCompare(name,"shred") == 0)
         {
           current_value=GetPolicyValue("system:shred");
           if ((current_value == (char *) NULL) ||
               (StringToInteger(value) > StringToInteger(current_value)))
             {
               if (current_value != (char *) NULL)
                 current_value=DestroyString(current_value);
-              return(SetPolicyValue(domain,name,value));
+              return(MagickTrue);
             }
           if (current_value != (char *) NULL)
             current_value=DestroyString(current_value);
         }
       break;
     }
     case CoderPolicyDomain:
     case DelegatePolicyDomain:
     case FilterPolicyDomain:
     case ModulePolicyDomain:
     case PathPolicyDomain:
     default:
       break;
   }
-  return(MagickTrue);
+  return(MagickFalse);
 }
