commit 9f9026899dc94f5a3e740ba5cabc2647f1e9a0bd
Author: Erik Boasson <eb@ilities.com>
Date:   Tue Sep 13 14:10:08 2022 +0200

    Initialise interface_names in network partition
    
    Without this, a well-constructed bad config triggers a bad free.  With
    thanks to OSS-Fuzz.
    
    Signed-off-by: Erik Boasson <eb@ilities.com>

diff --git a/docs/manual/options.md b/docs/manual/options.md
index 990b6010..61b12c8b 100644
--- a/docs/manual/options.md
+++ b/docs/manual/options.md
@@ -1876,11 +1876,11 @@ The categorisation of tracing output is incomplete and hence most of the verbosi
 The default value is: "none".
 <!--- generated from ddsi_config.h[75edea6617af11bacc46f91e519773f6df580655] -->
 <!--- generated from ddsi_cfgunits.h[fc550f1620aa20dcd9244ef4e24299d5001efbb4] -->
 <!--- generated from ddsi_cfgelems.h[cd3baa0178cce15e0974acd0a14723100d5308b8] -->
-<!--- generated from ddsi_config.c[4a8bce69542a6f2373c37c4a711a2a5d7b4c3bf7] -->
+<!--- generated from ddsi_config.c[ed9898f72f9dbcfa20ce7706835da091efcea0ca] -->
 <!--- generated from _confgen.h[01ffa8a2e53b2309451756861466551cfe28c8ce] -->
 <!--- generated from _confgen.c[112cf655ac336075d1b301972ac38840ac2119d6] -->
 <!--- generated from generate_rnc.c[a2ec6e48d33ac14a320c8ec3f320028a737920e0] -->
 <!--- generated from generate_md.c[a61b6a9649d18afeca4c73b5784f36989d7994e0] -->
 <!--- generated from generate_xsd.c[45064e8869b3c00573057d7c8f02d20f04b40e16] -->
 <!--- generated from generate_defconfig.c[eec9ab7b2d053e68500799b693d089e84153a37b] -->
diff --git a/etc/cyclonedds.rnc b/etc/cyclonedds.rnc
index f724bc4c..f87b41af 100644
--- a/etc/cyclonedds.rnc
+++ b/etc/cyclonedds.rnc
@@ -999,314 +999,314 @@ MIIDjjCCAnYCCQDCEu9...6rmT87dhTo=<br>
 -----END CERTIFICATE-----</IdentityCertificate></p>
 <p>The default value is: "".</p>""" ] ]
           element IdentityCertificate {
             text
           }
           & [ a:documentation [ xml:lang="en" """
 <p>The authentication handshake tokens may contain optional fields to be included for finding interoperability problems. If this parameter is set to true the optional fields are included in the handshake token exchange.</p>
 <p>The default value is: "false".</p>""" ] ]
           element IncludeOptionalFields {
             xsd:boolean
           }?
           & [ a:documentation [ xml:lang="en" """
 <p>This element specifies the library to be loaded as the DDS Security Access Control plugin.</p>
 <p>The default value is: "".</p>""" ] ]
           element Library {
             [ a:documentation [ xml:lang="en" """
 <p>This element names the finalization function of Authentication plugin. This function is called to let the plugin release its resources.</p>
 <p>The default value is: "finalize_authentication".</p>""" ] ]
             attribute finalizeFunction {
               text
             }?
             & [ a:documentation [ xml:lang="en" """
 <p>This element names the initialization function of Authentication plugin. This function is called after loading the plugin library for instantiation purposes. Init function must return an object that implements DDS Security Authentication interface.</p>
 <p>The default value is: "init_authentication".</p>""" ] ]
             attribute initFunction {
               text
             }?
             & [ a:documentation [ xml:lang="en" """
 <p>This element points to the path of Authentication plugin library.</p>
 <p>It can be either absolute path excluding file extension ( /usr/lib/dds_security_auth ) or single file without extension ( dds_security_auth ).</p>
 <p>If single file is supplied, the library located by way of the current working directory, or LD_LIBRARY_PATH for Unix systems, and PATH for Windows system.</p>
 <p>The default value is: "dds_security_auth".</p>""" ] ]
             attribute path {
               text
             }?
           }?
           & [ a:documentation [ xml:lang="en" """
 <p>A password used to decrypt the private_key.</p>
 <p>The value of the password property shall be interpreted as the Base64 encoding of the AES-128 key that shall be used to decrypt the private_key using AES128-CBC.</p>
 <p>If the password property is not present, then the value supplied in the private_key property must contain the unencrypted private key.</p>
 <p>The default value is: "".</p>""" ] ]
           element Password {
             text
           }?
           & [ a:documentation [ xml:lang="en" """
 <p>URI to access the private Private Key for all of the participants in the OSPL federation.</p>
 <p>Supported URI schemes: file, data</p>
 <p>Examples:</p>
 <p><PrivateKey>file:identity_ca_private_key.pem</PrivateKey></p>
 <p><PrivateKey>data:,-----BEGIN RSA PRIVATE KEY-----<br>
 MIIEpAIBAAKCAQEA3HIh...AOBaaqSV37XBUJg==<br>
 -----END RSA PRIVATE KEY-----</PrivateKey></p>
 <p>The default value is: "".</p>""" ] ]
           element PrivateKey {
             text
           }
           & [ a:documentation [ xml:lang="en" """
 <p>Trusted CA Directory which contains trusted CA certificates as separated files.</p>
 <p>The default value is: "".</p>""" ] ]
           element TrustedCADirectory {
             text
           }?
         }?
         & [ a:documentation [ xml:lang="en" """
 <p>This element configures the Cryptographic plugin of the DDS Security specification.</p>""" ] ]
         element Cryptographic {
           [ a:documentation [ xml:lang="en" """
 <p>This element specifies the library to be loaded as the DDS Security Cryptographic plugin.</p>
 <p>The default value is: "".</p>""" ] ]
           element Library {
             [ a:documentation [ xml:lang="en" """
 <p>This element names the finalization function of Cryptographic plugin. This function is called to let the plugin release its resources.</p>
 <p>The default value is: "finalize_crypto".</p>""" ] ]
             attribute finalizeFunction {
               text
             }?
             & [ a:documentation [ xml:lang="en" """
 <p>This element names the initialization function of Cryptographic plugin. This function is called after loading the plugin library for instantiation purposes. Init function must return an object that implements DDS Security Cryptographic interface.</p>
 <p>The default value is: "init_crypto".</p>""" ] ]
             attribute initFunction {
               text
             }?
             & [ a:documentation [ xml:lang="en" """
 <p>This element points to the path of Cryptographic plugin library.</p>
 <p>It can be either absolute path excluding file extension ( /usr/lib/dds_security_crypto ) or single file without extension ( dds_security_crypto ).</p>
 <p>If single file is supplied, the library located by way of the current working directory, or LD_LIBRARY_PATH for Unix systems, and PATH for Windows systems.</p>
 <p>The default value is: "dds_security_crypto".</p>""" ] ]
             attribute path {
               text
             }?
           }?
         }?
       }?
       & [ a:documentation [ xml:lang="en" """
 <p>The Shared Memory element allows specifying various parameters related to using shared memory.</p>""" ] ]
       element SharedMemory {
         [ a:documentation [ xml:lang="en" """
 <p>This element allows to enable shared memory in Cyclone DDS.</p>
 <p>The default value is: "false".</p>""" ] ]
         element Enable {
           xsd:boolean
         }?
         & [ a:documentation [ xml:lang="en" """
 <p>Explicitly set the Iceoryx locator used by Cyclone to check whether a pair of processes is attached to the same Iceoryx shared memory.  The default is to use one of the MAC addresses of the machine, which should work well in most cases.</p>
 <p>The default value is: "".</p>""" ] ]
         element Locator {
           text
         }?
         & [ a:documentation [ xml:lang="en" """
 <p>This element decides the verbosity level of shared memory message:</p>
 <ul><li><i>off</i>: no log</li>
 <li><i>fatal</i>: show fatal log</li>
 <li><i>error</i>: show error log</li>
 <li><i>warn</i>: show warn log</li>
 <li><i>info</i>: show info log</li>
 <li><i>debug</i>: show debug log</li>
 <li><i>verbose</i>: show verbose log</li>
 <p>If you don't want to see any log from shared memory, use <i>off</i> to disable log message.</p>
 <p>The default value is: "info".</p>""" ] ]
         element LogLevel {
           ("off"|"fatal"|"error"|"warn"|"info"|"debug"|"verbose")
         }?
         & [ a:documentation [ xml:lang="en" """
 <p>Override the Iceoryx service name used by Cyclone.</p>
 <p>The default value is: "DDS_CYCLONE".</p>""" ] ]
         element Prefix {
           text
         }?
       }?
       & [ a:documentation [ xml:lang="en" """
 <p>The Sizing element specifies a variety of configuration settings dealing with expected system sizes, buffer sizes, &c.</p>""" ] ]
       element Sizing {
         [ a:documentation [ xml:lang="en" """
 <p>This element specifies the size of one allocation unit in the receive buffer. Must be greater than the maximum packet size by a modest amount (too large packets are dropped). Each allocation is shrunk immediately after processing a message, or freed straightaway.</p>
 <p>The unit must be specified explicitly. Recognised units: B (bytes), kB & KiB (2<sup>10</sup> bytes), MB & MiB (2<sup>20</sup> bytes), GB & GiB (2<sup>30</sup> bytes).</p>
 <p>The default value is: "128 KiB".</p>""" ] ]
         element ReceiveBufferChunkSize {
           memsize
         }?
         & [ a:documentation [ xml:lang="en" """
 <p>This element sets the size of a single receive buffer. Many receive buffers may be needed. The minimum workable size a little bit larger than Sizing/ReceiveBufferChunkSize, and the value used is taken as the configured value and the actual minimum workable size.</p>
 <p>The unit must be specified explicitly. Recognised units: B (bytes), kB & KiB (2<sup>10</sup> bytes), MB & MiB (2<sup>20</sup> bytes), GB & GiB (2<sup>30</sup> bytes).</p>
 <p>The default value is: "1 MiB".</p>""" ] ]
         element ReceiveBufferSize {
           memsize
         }?
       }?
       & [ a:documentation [ xml:lang="en" """
 <p>The TCP element allows specifying various parameters related to running DDSI over TCP.</p>""" ] ]
       element TCP {
         [ a:documentation [ xml:lang="en" """
 <p>Setting this to true means the unicast addresses in SPDP packets will be ignored and the peer address from the TCP connection will be used instead. This may help work around incorrectly advertised addresses when using TCP.</p>
 <p>The default value is: "false".</p>""" ] ]
         element AlwaysUsePeeraddrForUnicast {
           xsd:boolean
         }?
         & [ a:documentation [ xml:lang="en" """
 <p>This element enables the optional TCP transport - deprecated, use General/Transport instead.</p>
 <p>The default value is: "default".</p>""" ] ]
         element Enable {
           ("false"|"true"|"default")
         }?
         & [ a:documentation [ xml:lang="en" """
 <p>This element enables the TCP_NODELAY socket option, preventing multiple DDSI messages being sent in the same TCP request. Setting this option typically optimises latency over throughput.</p>
 <p>The default value is: "true".</p>""" ] ]
         element NoDelay {
           xsd:boolean
         }?
         & [ a:documentation [ xml:lang="en" """
 <p>This element specifies the TCP port number on which Cyclone DDS accepts connections. If the port is set it is used in entity locators, published with DDSI discovery. Dynamically allocated if zero. Disabled if -1 or not configured. If disabled other DDSI services will not be able to establish connections with the service, the service can only communicate by establishing connections to other services.</p>
 <p>The default value is: "-1".</p>""" ] ]
         element Port {
           xsd:integer
         }?
         & [ a:documentation [ xml:lang="en" """
 <p>This element specifies the timeout for blocking TCP read operations. If this timeout expires then the connection is closed.</p>
 <p>The unit must be specified explicitly. Recognised units: ns, us, ms, s, min, hr, day.</p>
 <p>The default value is: "2 s".</p>""" ] ]
         element ReadTimeout {
           duration
         }?
         & [ a:documentation [ xml:lang="en" """
 <p>This element specifies the timeout for blocking TCP write operations. If this timeout expires then the connection is closed.</p>
 <p>The unit must be specified explicitly. Recognised units: ns, us, ms, s, min, hr, day.</p>
 <p>The default value is: "2 s".</p>""" ] ]
         element WriteTimeout {
           duration
         }?
       }?
       & [ a:documentation [ xml:lang="en" """
 <p>This element is used to set thread properties.</p>""" ] ]
       element Threads {
         [ a:documentation [ xml:lang="en" """
 <p>This element is used to set thread properties.</p>""" ] ]
         element Thread {
           [ a:documentation [ xml:lang="en" """
 <p>The Name of the thread for which properties are being set. The following threads exist:</p>
 <ul>
 <li><i>gc</i>: garbage collector thread involved in deleting entities;</li>
 <li><i>recv</i>: receive thread, taking data from the network and running the protocol state machine;</li>
 <li><i>dq.builtins</i>: delivery thread for DDSI-builtin data, primarily for discovery;</li>
 <li><i>lease</i>: DDSI liveliness monitoring;</li>
 <li><i>tev</i>: general timed-event handling, retransmits and discovery;</li>
 <li><i>fsm</i>: finite state machine thread for handling security handshake;</li>
 <li><i>xmit.CHAN</i>: transmit thread for channel CHAN;</li>
 <li><i>dq.CHAN</i>: delivery thread for channel CHAN;</li>
 <li><i>tev.CHAN</i>: timed-event thread for channel CHAN.</li></ul>
 <p>The default value is: "".</p>""" ] ]
           attribute Name {
             text
           }
           & [ a:documentation [ xml:lang="en" """
 <p>This element configures the scheduling properties of the thread.</p>""" ] ]
           element Scheduling {
             [ a:documentation [ xml:lang="en" """
 <p>This element specifies the thread scheduling class (<i>realtime</i>, <i>timeshare</i> or <i>default</i>). The user may need special privileges from the underlying operating system to be able to assign some of the privileged scheduling classes.</p>
 <p>The default value is: "default".</p>""" ] ]
             element Class {
               ("realtime"|"timeshare"|"default")
             }?
             & [ a:documentation [ xml:lang="en" """
 <p>This element specifies the thread priority (decimal integer or <i>default</i>). Only priorities that are supported by the underlying operating system can be assigned to this element. The user may need special privileges from the underlying operating system to be able to assign some of the privileged priorities.</p>
 <p>The default value is: "default".</p>""" ] ]
             element Priority {
               text
             }?
           }?
           & [ a:documentation [ xml:lang="en" """
 <p>This element configures the stack size for this thread. The default value <i>default</i> leaves the stack size at the operating system default.</p>
 <p>The unit must be specified explicitly. Recognised units: B (bytes), kB & KiB (2<sup>10</sup> bytes), MB & MiB (2<sup>20</sup> bytes), GB & GiB (2<sup>30</sup> bytes).</p>
 <p>The default value is: "default".</p>""" ] ]
           element StackSize {
             memsize
           }?
         }*
       }?
       & [ a:documentation [ xml:lang="en" """
 <p>The Tracing element controls the amount and type of information that is written into the tracing log by the DDSI service. This is useful to track the DDSI service during application development.</p>""" ] ]
       element Tracing {
         [ a:documentation [ xml:lang="en" """
 <p>This option specifies whether the output is to be appended to an existing log file. The default is to create a new log file each time, which is generally the best option if a detailed log is generated.</p>
 <p>The default value is: "false".</p>""" ] ]
         element AppendToFile {
           xsd:boolean
         }?
         & [ a:documentation [ xml:lang="en" """
 <p>This element enables individual logging categories. These are enabled in addition to those enabled by Tracing/Verbosity. Recognised categories are:</p>
 <ul>
 <li><i>fatal</i>: all fatal errors, errors causing immediate termination</li>
 <li><i>error</i>: failures probably impacting correctness but not necessarily causing immediate termination</li>
 <li><i>warning</i>: abnormal situations that will likely not impact correctness</li>
 <li><i>config</i>: full dump of the configuration</li>
 <li><i>info</i>: general informational notices</li>
 <li><i>discovery</i>: all discovery activity</li>
 <li><i>data</i>: include data content of samples in traces</li>
 <li><i>radmin</i>: receive buffer administration</li>
 <li><i>timing</i>: periodic reporting of CPU loads per thread</li>
 <li><i>traffic</i>: periodic reporting of total outgoing data</li>
 <li><i>whc</i>: tracing of writer history cache changes</li>
 <li><i>tcp</i>: tracing of TCP-specific activity</li>
 <li><i>topic</i>: tracing of topic definitions</li>
 <li><i>plist</i>: tracing of discovery parameter list interpretation</li></ul>
 <p>In addition, there is the keyword <i>trace</i> that enables all but <i>radmin</i>, <i>topic</i>, <i>plist</i> and <i>whc</i></p>.
 <p>The categorisation of tracing output is incomplete and hence most of the verbosity levels and categories are not of much use in the current release. This is an ongoing process and here we describe the target situation rather than the current situation. Currently, the most useful is <i>trace</i>.</p>
 <p>The default value is: "".</p>""" ] ]
         element Category {
           xsd:token { pattern = "((fatal|error|warning|info|config|discovery|data|radmin|timing|traffic|topic|tcp|plist|whc|throttle|rhc|content|shm|trace)(,(fatal|error|warning|info|config|discovery|data|radmin|timing|traffic|topic|tcp|plist|whc|throttle|rhc|content|shm|trace))*)|" }
         }?
         & [ a:documentation [ xml:lang="en" """
 <p>This option specifies where the logging is printed to. Note that <i>stdout</i> and <i>stderr</i> are treated as special values, representing "standard out" and "standard error" respectively. No file is created unless logging categories are enabled using the Tracing/Verbosity or Tracing/EnabledCategory settings.</p>
 <p>The default value is: "cyclonedds.log".</p>""" ] ]
         element OutputFile {
           text
         }?
         & [ a:documentation [ xml:lang="en" """
 <p>This option specifies the file to which received and sent packets will be logged in the "pcap" format suitable for analysis using common networking tools, such as WireShark. IP and UDP headers are fictitious, in particular the destination address of received packets. The TTL may be used to distinguish between sent and received packets: it is 255 for sent packets and 128 for received ones. Currently IPv4 only.</p>
 <p>The default value is: "".</p>""" ] ]
         element PacketCaptureFile {
           text
         }?
         & [ a:documentation [ xml:lang="en" """
 <p>This element enables standard groups of categories, based on a desired verbosity level. This is in addition to the categories enabled by the Tracing/Category setting. Recognised verbosity levels and the categories they map to are:</p>
 <ul><li><i>none</i>: no Cyclone DDS log</li>
 <li><i>severe</i>: error and fatal</li>
 <li><i>warning</i>: <i>severe</i> + warning</li>
 <li><i>info</i>: <i>warning</i> + info</li>
 <li><i>config</i>: <i>info</i> + config</li>
 <li><i>fine</i>: <i>config</i> + discovery</li>
 <li><i>finer</i>: <i>fine</i> + traffic and timing</li>
 <li><i>finest</i>: <i>finer</i> + trace</li></ul>
 <p>While <i>none</i> prevents any message from being written to a DDSI2 log file.</p>
 <p>The categorisation of tracing output is incomplete and hence most of the verbosity levels and categories are not of much use in the current release. This is an ongoing process and here we describe the target situation rather than the current situation. Currently, the most useful verbosity levels are <i>config</i>, <i>fine</i> and <i>finest</i>.</p>
 <p>The default value is: "none".</p>""" ] ]
         element Verbosity {
           ("finest"|"finer"|"fine"|"config"|"info"|"warning"|"severe"|"none")
         }?
       }?
     }?
   }
   bandwidth = xsd:token { pattern = "0|(\d+(\.\d*)?([Ee][\-+]?\d+)?|\.\d+([Ee][\-+]?\d+)?) *([kMG]i?)?[Bb][p/]s" }
   duration = xsd:token { pattern = "0|(\d+(\.\d*)?([Ee][\-+]?\d+)?|\.\d+([Ee][\-+]?\d+)?) *([num]?s|min|hr|day)" }
   duration_inf = xsd:token { pattern = "inf|0|(\d+(\.\d*)?([Ee][\-+]?\d+)?|\.\d+([Ee][\-+]?\d+)?) *([num]?s|min|hr|day)" }
   memsize = xsd:token { pattern = "0|(\d+(\.\d*)?([Ee][\-+]?\d+)?|\.\d+([Ee][\-+]?\d+)?) *([kMG]i?)?B" }
 }
 # generated from ddsi_config.h[75edea6617af11bacc46f91e519773f6df580655] 
 # generated from ddsi_cfgunits.h[fc550f1620aa20dcd9244ef4e24299d5001efbb4] 
 # generated from ddsi_cfgelems.h[cd3baa0178cce15e0974acd0a14723100d5308b8] 
-# generated from ddsi_config.c[4a8bce69542a6f2373c37c4a711a2a5d7b4c3bf7] 
+# generated from ddsi_config.c[ed9898f72f9dbcfa20ce7706835da091efcea0ca] 
 # generated from _confgen.h[01ffa8a2e53b2309451756861466551cfe28c8ce] 
 # generated from _confgen.c[112cf655ac336075d1b301972ac38840ac2119d6] 
 # generated from generate_rnc.c[a2ec6e48d33ac14a320c8ec3f320028a737920e0] 
 # generated from generate_md.c[a61b6a9649d18afeca4c73b5784f36989d7994e0] 
 # generated from generate_xsd.c[45064e8869b3c00573057d7c8f02d20f04b40e16] 
 # generated from generate_defconfig.c[eec9ab7b2d053e68500799b693d089e84153a37b] 
diff --git a/etc/cyclonedds.xsd b/etc/cyclonedds.xsd
index 5c882a78..1a43dd1a 100644
--- a/etc/cyclonedds.xsd
+++ b/etc/cyclonedds.xsd
@@ -1544,442 +1544,442 @@ MIIDjjCCAnYCCQDCEu9...6rmT87dhTo=&lt;br&gt;
 -----END CERTIFICATE-----&lt;/IdentityCertificate&gt;&lt;/p&gt;
 &lt;p&gt;The default value is: "".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="IncludeOptionalFields" type="xs:boolean">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;The authentication handshake tokens may contain optional fields to be included for finding interoperability problems. If this parameter is set to true the optional fields are included in the handshake token exchange.&lt;/p&gt;
 &lt;p&gt;The default value is: "false".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="Password" type="xs:string">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;A password used to decrypt the private_key.&lt;/p&gt;
 &lt;p&gt;The value of the password property shall be interpreted as the Base64 encoding of the AES-128 key that shall be used to decrypt the private_key using AES128-CBC.&lt;/p&gt;
 &lt;p&gt;If the password property is not present, then the value supplied in the private_key property must contain the unencrypted private key.&lt;/p&gt;
 &lt;p&gt;The default value is: "".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="PrivateKey" type="xs:string">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;URI to access the private Private Key for all of the participants in the OSPL federation.&lt;/p&gt;
 &lt;p&gt;Supported URI schemes: file, data&lt;/p&gt;
 &lt;p&gt;Examples:&lt;/p&gt;
 &lt;p&gt;&lt;PrivateKey&gt;file:identity_ca_private_key.pem&lt;/PrivateKey&gt;&lt;/p&gt;
 &lt;p&gt;&lt;PrivateKey&gt;data:,-----BEGIN RSA PRIVATE KEY-----&lt;br&gt;
 MIIEpAIBAAKCAQEA3HIh...AOBaaqSV37XBUJg==&lt;br&gt;
 -----END RSA PRIVATE KEY-----&lt;/PrivateKey&gt;&lt;/p&gt;
 &lt;p&gt;The default value is: "".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="TrustedCADirectory" type="xs:string">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;Trusted CA Directory which contains trusted CA certificates as separated files.&lt;/p&gt;
 &lt;p&gt;The default value is: "".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="Cryptographic">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element configures the Cryptographic plugin of the DDS Security specification.&lt;/p&gt;</xs:documentation>
     </xs:annotation>
     <xs:complexType>
       <xs:sequence>
         <xs:element minOccurs="0" name="Library">
           <xs:annotation>
             <xs:documentation>
 &lt;p&gt;This element specifies the library to be loaded as the DDS Security Cryptographic plugin.&lt;/p&gt;
 &lt;p&gt;The default value is: "".&lt;/p&gt;</xs:documentation>
           </xs:annotation>
           <xs:complexType>
             <xs:attribute name="finalizeFunction">
               <xs:annotation>
                 <xs:documentation>
 &lt;p&gt;This element names the finalization function of Cryptographic plugin. This function is called to let the plugin release its resources.&lt;/p&gt;
 &lt;p&gt;The default value is: "finalize_crypto".&lt;/p&gt;</xs:documentation>
               </xs:annotation>
             </xs:attribute>
             <xs:attribute name="initFunction">
               <xs:annotation>
                 <xs:documentation>
 &lt;p&gt;This element names the initialization function of Cryptographic plugin. This function is called after loading the plugin library for instantiation purposes. Init function must return an object that implements DDS Security Cryptographic interface.&lt;/p&gt;
 &lt;p&gt;The default value is: "init_crypto".&lt;/p&gt;</xs:documentation>
               </xs:annotation>
             </xs:attribute>
             <xs:attribute name="path">
               <xs:annotation>
                 <xs:documentation>
 &lt;p&gt;This element points to the path of Cryptographic plugin library.&lt;/p&gt;
 &lt;p&gt;It can be either absolute path excluding file extension ( /usr/lib/dds_security_crypto ) or single file without extension ( dds_security_crypto ).&lt;/p&gt;
 &lt;p&gt;If single file is supplied, the library located by way of the current working directory, or LD_LIBRARY_PATH for Unix systems, and PATH for Windows systems.&lt;/p&gt;
 &lt;p&gt;The default value is: "dds_security_crypto".&lt;/p&gt;</xs:documentation>
               </xs:annotation>
             </xs:attribute>
           </xs:complexType>
         </xs:element>
       </xs:sequence>
     </xs:complexType>
   </xs:element>
   <xs:element name="SharedMemory">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;The Shared Memory element allows specifying various parameters related to using shared memory.&lt;/p&gt;</xs:documentation>
     </xs:annotation>
     <xs:complexType>
       <xs:all>
         <xs:element minOccurs="0" name="Enable" type="xs:boolean">
           <xs:annotation>
             <xs:documentation>
 &lt;p&gt;This element allows to enable shared memory in Cyclone DDS.&lt;/p&gt;
 &lt;p&gt;The default value is: "false".&lt;/p&gt;</xs:documentation>
           </xs:annotation>
         </xs:element>
         <xs:element minOccurs="0" ref="config:Locator"/>
         <xs:element minOccurs="0" ref="config:LogLevel"/>
         <xs:element minOccurs="0" ref="config:Prefix"/>
       </xs:all>
     </xs:complexType>
   </xs:element>
   <xs:element name="Locator" type="xs:string">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;Explicitly set the Iceoryx locator used by Cyclone to check whether a pair of processes is attached to the same Iceoryx shared memory.  The default is to use one of the MAC addresses of the machine, which should work well in most cases.&lt;/p&gt;
 &lt;p&gt;The default value is: "".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="LogLevel">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element decides the verbosity level of shared memory message:&lt;/p&gt;
 &lt;ul&gt;&lt;li&gt;&lt;i&gt;off&lt;/i&gt;: no log&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;fatal&lt;/i&gt;: show fatal log&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;error&lt;/i&gt;: show error log&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;warn&lt;/i&gt;: show warn log&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;info&lt;/i&gt;: show info log&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;debug&lt;/i&gt;: show debug log&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;verbose&lt;/i&gt;: show verbose log&lt;/li&gt;
 &lt;p&gt;If you don't want to see any log from shared memory, use &lt;i&gt;off&lt;/i&gt; to disable log message.&lt;/p&gt;
 &lt;p&gt;The default value is: "info".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
     <xs:simpleType>
       <xs:restriction base="xs:token">
         <xs:enumeration value="off"/>
         <xs:enumeration value="fatal"/>
         <xs:enumeration value="error"/>
         <xs:enumeration value="warn"/>
         <xs:enumeration value="info"/>
         <xs:enumeration value="debug"/>
         <xs:enumeration value="verbose"/>
       </xs:restriction>
     </xs:simpleType>
   </xs:element>
   <xs:element name="Prefix" type="xs:string">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;Override the Iceoryx service name used by Cyclone.&lt;/p&gt;
 &lt;p&gt;The default value is: "DDS_CYCLONE".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="Sizing">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;The Sizing element specifies a variety of configuration settings dealing with expected system sizes, buffer sizes, &amp;c.&lt;/p&gt;</xs:documentation>
     </xs:annotation>
     <xs:complexType>
       <xs:all>
         <xs:element minOccurs="0" ref="config:ReceiveBufferChunkSize"/>
         <xs:element minOccurs="0" ref="config:ReceiveBufferSize"/>
       </xs:all>
     </xs:complexType>
   </xs:element>
   <xs:element name="ReceiveBufferChunkSize" type="config:memsize">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element specifies the size of one allocation unit in the receive buffer. Must be greater than the maximum packet size by a modest amount (too large packets are dropped). Each allocation is shrunk immediately after processing a message, or freed straightaway.&lt;/p&gt;
 &lt;p&gt;The unit must be specified explicitly. Recognised units: B (bytes), kB &amp; KiB (2&lt;sup&gt;10&lt;/sup&gt; bytes), MB &amp; MiB (2&lt;sup&gt;20&lt;/sup&gt; bytes), GB &amp; GiB (2&lt;sup&gt;30&lt;/sup&gt; bytes).&lt;/p&gt;
 &lt;p&gt;The default value is: "128 KiB".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="ReceiveBufferSize" type="config:memsize">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element sets the size of a single receive buffer. Many receive buffers may be needed. The minimum workable size a little bit larger than Sizing/ReceiveBufferChunkSize, and the value used is taken as the configured value and the actual minimum workable size.&lt;/p&gt;
 &lt;p&gt;The unit must be specified explicitly. Recognised units: B (bytes), kB &amp; KiB (2&lt;sup&gt;10&lt;/sup&gt; bytes), MB &amp; MiB (2&lt;sup&gt;20&lt;/sup&gt; bytes), GB &amp; GiB (2&lt;sup&gt;30&lt;/sup&gt; bytes).&lt;/p&gt;
 &lt;p&gt;The default value is: "1 MiB".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="TCP">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;The TCP element allows specifying various parameters related to running DDSI over TCP.&lt;/p&gt;</xs:documentation>
     </xs:annotation>
     <xs:complexType>
       <xs:all>
         <xs:element minOccurs="0" ref="config:AlwaysUsePeeraddrForUnicast"/>
         <xs:element minOccurs="0" name="Enable">
           <xs:annotation>
             <xs:documentation>
 &lt;p&gt;This element enables the optional TCP transport - deprecated, use General/Transport instead.&lt;/p&gt;
 &lt;p&gt;The default value is: "default".&lt;/p&gt;</xs:documentation>
           </xs:annotation>
           <xs:simpleType>
             <xs:restriction base="xs:token">
               <xs:enumeration value="false"/>
               <xs:enumeration value="true"/>
               <xs:enumeration value="default"/>
             </xs:restriction>
           </xs:simpleType>
         </xs:element>
         <xs:element minOccurs="0" ref="config:NoDelay"/>
         <xs:element minOccurs="0" ref="config:Port"/>
         <xs:element minOccurs="0" ref="config:ReadTimeout"/>
         <xs:element minOccurs="0" ref="config:WriteTimeout"/>
       </xs:all>
     </xs:complexType>
   </xs:element>
   <xs:element name="AlwaysUsePeeraddrForUnicast" type="xs:boolean">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;Setting this to true means the unicast addresses in SPDP packets will be ignored and the peer address from the TCP connection will be used instead. This may help work around incorrectly advertised addresses when using TCP.&lt;/p&gt;
 &lt;p&gt;The default value is: "false".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="NoDelay" type="xs:boolean">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element enables the TCP_NODELAY socket option, preventing multiple DDSI messages being sent in the same TCP request. Setting this option typically optimises latency over throughput.&lt;/p&gt;
 &lt;p&gt;The default value is: "true".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="Port" type="xs:integer">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element specifies the TCP port number on which Cyclone DDS accepts connections. If the port is set it is used in entity locators, published with DDSI discovery. Dynamically allocated if zero. Disabled if -1 or not configured. If disabled other DDSI services will not be able to establish connections with the service, the service can only communicate by establishing connections to other services.&lt;/p&gt;
 &lt;p&gt;The default value is: "-1".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="ReadTimeout" type="config:duration">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element specifies the timeout for blocking TCP read operations. If this timeout expires then the connection is closed.&lt;/p&gt;
 &lt;p&gt;The unit must be specified explicitly. Recognised units: ns, us, ms, s, min, hr, day.&lt;/p&gt;
 &lt;p&gt;The default value is: "2 s".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="WriteTimeout" type="config:duration">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element specifies the timeout for blocking TCP write operations. If this timeout expires then the connection is closed.&lt;/p&gt;
 &lt;p&gt;The unit must be specified explicitly. Recognised units: ns, us, ms, s, min, hr, day.&lt;/p&gt;
 &lt;p&gt;The default value is: "2 s".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="Threads">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element is used to set thread properties.&lt;/p&gt;</xs:documentation>
     </xs:annotation>
     <xs:complexType>
       <xs:sequence>
         <xs:element minOccurs="0" maxOccurs="unbounded" ref="config:Thread"/>
       </xs:sequence>
     </xs:complexType>
   </xs:element>
   <xs:element name="Thread">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element is used to set thread properties.&lt;/p&gt;</xs:documentation>
     </xs:annotation>
     <xs:complexType>
       <xs:all>
         <xs:element minOccurs="0" ref="config:Scheduling"/>
         <xs:element minOccurs="0" ref="config:StackSize"/>
       </xs:all>
       <xs:attribute name="Name" use="required">
         <xs:annotation>
           <xs:documentation>
 &lt;p&gt;The Name of the thread for which properties are being set. The following threads exist:&lt;/p&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;i&gt;gc&lt;/i&gt;: garbage collector thread involved in deleting entities;&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;recv&lt;/i&gt;: receive thread, taking data from the network and running the protocol state machine;&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;dq.builtins&lt;/i&gt;: delivery thread for DDSI-builtin data, primarily for discovery;&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;lease&lt;/i&gt;: DDSI liveliness monitoring;&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;tev&lt;/i&gt;: general timed-event handling, retransmits and discovery;&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;fsm&lt;/i&gt;: finite state machine thread for handling security handshake;&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;xmit.CHAN&lt;/i&gt;: transmit thread for channel CHAN;&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;dq.CHAN&lt;/i&gt;: delivery thread for channel CHAN;&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;tev.CHAN&lt;/i&gt;: timed-event thread for channel CHAN.&lt;/li&gt;&lt;/ul&gt;
 &lt;p&gt;The default value is: "".&lt;/p&gt;</xs:documentation>
         </xs:annotation>
       </xs:attribute>
     </xs:complexType>
   </xs:element>
   <xs:element name="Scheduling">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element configures the scheduling properties of the thread.&lt;/p&gt;</xs:documentation>
     </xs:annotation>
     <xs:complexType>
       <xs:all>
         <xs:element minOccurs="0" ref="config:Class"/>
         <xs:element minOccurs="0" ref="config:Priority"/>
       </xs:all>
     </xs:complexType>
   </xs:element>
   <xs:element name="Class">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element specifies the thread scheduling class (&lt;i&gt;realtime&lt;/i&gt;, &lt;i&gt;timeshare&lt;/i&gt; or &lt;i&gt;default&lt;/i&gt;). The user may need special privileges from the underlying operating system to be able to assign some of the privileged scheduling classes.&lt;/p&gt;
 &lt;p&gt;The default value is: "default".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
     <xs:simpleType>
       <xs:restriction base="xs:token">
         <xs:enumeration value="realtime"/>
         <xs:enumeration value="timeshare"/>
         <xs:enumeration value="default"/>
       </xs:restriction>
     </xs:simpleType>
   </xs:element>
   <xs:element name="Priority" type="xs:string">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element specifies the thread priority (decimal integer or &lt;i&gt;default&lt;/i&gt;). Only priorities that are supported by the underlying operating system can be assigned to this element. The user may need special privileges from the underlying operating system to be able to assign some of the privileged priorities.&lt;/p&gt;
 &lt;p&gt;The default value is: "default".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="StackSize" type="config:memsize">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element configures the stack size for this thread. The default value &lt;i&gt;default&lt;/i&gt; leaves the stack size at the operating system default.&lt;/p&gt;
 &lt;p&gt;The unit must be specified explicitly. Recognised units: B (bytes), kB &amp; KiB (2&lt;sup&gt;10&lt;/sup&gt; bytes), MB &amp; MiB (2&lt;sup&gt;20&lt;/sup&gt; bytes), GB &amp; GiB (2&lt;sup&gt;30&lt;/sup&gt; bytes).&lt;/p&gt;
 &lt;p&gt;The default value is: "default".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="Tracing">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;The Tracing element controls the amount and type of information that is written into the tracing log by the DDSI service. This is useful to track the DDSI service during application development.&lt;/p&gt;</xs:documentation>
     </xs:annotation>
     <xs:complexType>
       <xs:all>
         <xs:element minOccurs="0" ref="config:AppendToFile"/>
         <xs:element minOccurs="0" ref="config:Category"/>
         <xs:element minOccurs="0" ref="config:OutputFile"/>
         <xs:element minOccurs="0" ref="config:PacketCaptureFile"/>
         <xs:element minOccurs="0" ref="config:Verbosity"/>
       </xs:all>
     </xs:complexType>
   </xs:element>
   <xs:element name="AppendToFile" type="xs:boolean">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This option specifies whether the output is to be appended to an existing log file. The default is to create a new log file each time, which is generally the best option if a detailed log is generated.&lt;/p&gt;
 &lt;p&gt;The default value is: "false".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="Category">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element enables individual logging categories. These are enabled in addition to those enabled by Tracing/Verbosity. Recognised categories are:&lt;/p&gt;
 &lt;ul&gt;
 &lt;li&gt;&lt;i&gt;fatal&lt;/i&gt;: all fatal errors, errors causing immediate termination&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;error&lt;/i&gt;: failures probably impacting correctness but not necessarily causing immediate termination&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;warning&lt;/i&gt;: abnormal situations that will likely not impact correctness&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;config&lt;/i&gt;: full dump of the configuration&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;info&lt;/i&gt;: general informational notices&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;discovery&lt;/i&gt;: all discovery activity&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;data&lt;/i&gt;: include data content of samples in traces&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;radmin&lt;/i&gt;: receive buffer administration&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;timing&lt;/i&gt;: periodic reporting of CPU loads per thread&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;traffic&lt;/i&gt;: periodic reporting of total outgoing data&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;whc&lt;/i&gt;: tracing of writer history cache changes&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;tcp&lt;/i&gt;: tracing of TCP-specific activity&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;topic&lt;/i&gt;: tracing of topic definitions&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;plist&lt;/i&gt;: tracing of discovery parameter list interpretation&lt;/li&gt;&lt;/ul&gt;
 &lt;p&gt;In addition, there is the keyword &lt;i&gt;trace&lt;/i&gt; that enables all but &lt;i&gt;radmin&lt;/i&gt;, &lt;i&gt;topic&lt;/i&gt;, &lt;i&gt;plist&lt;/i&gt; and &lt;i&gt;whc&lt;/i&gt;&lt;/p&gt;.
 &lt;p&gt;The categorisation of tracing output is incomplete and hence most of the verbosity levels and categories are not of much use in the current release. This is an ongoing process and here we describe the target situation rather than the current situation. Currently, the most useful is &lt;i&gt;trace&lt;/i&gt;.&lt;/p&gt;
 &lt;p&gt;The default value is: "".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
     <xs:simpleType>
       <xs:restriction base="xs:token">
         <xs:pattern value="((fatal|error|warning|info|config|discovery|data|radmin|timing|traffic|topic|tcp|plist|whc|throttle|rhc|content|shm|trace)(,(fatal|error|warning|info|config|discovery|data|radmin|timing|traffic|topic|tcp|plist|whc|throttle|rhc|content|shm|trace))*)|"/>
       </xs:restriction>
     </xs:simpleType>
   </xs:element>
   <xs:element name="OutputFile" type="xs:string">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This option specifies where the logging is printed to. Note that &lt;i&gt;stdout&lt;/i&gt; and &lt;i&gt;stderr&lt;/i&gt; are treated as special values, representing "standard out" and "standard error" respectively. No file is created unless logging categories are enabled using the Tracing/Verbosity or Tracing/EnabledCategory settings.&lt;/p&gt;
 &lt;p&gt;The default value is: "cyclonedds.log".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="PacketCaptureFile" type="xs:string">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This option specifies the file to which received and sent packets will be logged in the "pcap" format suitable for analysis using common networking tools, such as WireShark. IP and UDP headers are fictitious, in particular the destination address of received packets. The TTL may be used to distinguish between sent and received packets: it is 255 for sent packets and 128 for received ones. Currently IPv4 only.&lt;/p&gt;
 &lt;p&gt;The default value is: "".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
   </xs:element>
   <xs:element name="Verbosity">
     <xs:annotation>
       <xs:documentation>
 &lt;p&gt;This element enables standard groups of categories, based on a desired verbosity level. This is in addition to the categories enabled by the Tracing/Category setting. Recognised verbosity levels and the categories they map to are:&lt;/p&gt;
 &lt;ul&gt;&lt;li&gt;&lt;i&gt;none&lt;/i&gt;: no Cyclone DDS log&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;severe&lt;/i&gt;: error and fatal&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;warning&lt;/i&gt;: &lt;i&gt;severe&lt;/i&gt; + warning&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;info&lt;/i&gt;: &lt;i&gt;warning&lt;/i&gt; + info&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;config&lt;/i&gt;: &lt;i&gt;info&lt;/i&gt; + config&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;fine&lt;/i&gt;: &lt;i&gt;config&lt;/i&gt; + discovery&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;finer&lt;/i&gt;: &lt;i&gt;fine&lt;/i&gt; + traffic and timing&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;finest&lt;/i&gt;: &lt;i&gt;finer&lt;/i&gt; + trace&lt;/li&gt;&lt;/ul&gt;
 &lt;p&gt;While &lt;i&gt;none&lt;/i&gt; prevents any message from being written to a DDSI2 log file.&lt;/p&gt;
 &lt;p&gt;The categorisation of tracing output is incomplete and hence most of the verbosity levels and categories are not of much use in the current release. This is an ongoing process and here we describe the target situation rather than the current situation. Currently, the most useful verbosity levels are &lt;i&gt;config&lt;/i&gt;, &lt;i&gt;fine&lt;/i&gt; and &lt;i&gt;finest&lt;/i&gt;.&lt;/p&gt;
 &lt;p&gt;The default value is: "none".&lt;/p&gt;</xs:documentation>
     </xs:annotation>
     <xs:simpleType>
       <xs:restriction base="xs:token">
         <xs:enumeration value="finest"/>
         <xs:enumeration value="finer"/>
         <xs:enumeration value="fine"/>
         <xs:enumeration value="config"/>
         <xs:enumeration value="info"/>
         <xs:enumeration value="warning"/>
         <xs:enumeration value="severe"/>
         <xs:enumeration value="none"/>
       </xs:restriction>
     </xs:simpleType>
   </xs:element>
   <xs:simpleType name="bandwidth">
     <xs:restriction base="xs:token">
       <xs:pattern value="0|(\d+(\.\d*)?([Ee][\-+]?\d+)?|\.\d+([Ee][\-+]?\d+)?) *([kMG]i?)?[Bb][p/]s"/>
     </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="duration">
     <xs:restriction base="xs:token">
       <xs:pattern value="0|(\d+(\.\d*)?([Ee][\-+]?\d+)?|\.\d+([Ee][\-+]?\d+)?) *([num]?s|min|hr|day)"/>
     </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="duration_inf">
     <xs:restriction base="xs:token">
       <xs:pattern value="inf|0|(\d+(\.\d*)?([Ee][\-+]?\d+)?|\.\d+([Ee][\-+]?\d+)?) *([num]?s|min|hr|day)"/>
     </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="memsize">
     <xs:restriction base="xs:token">
       <xs:pattern value="0|(\d+(\.\d*)?([Ee][\-+]?\d+)?|\.\d+([Ee][\-+]?\d+)?) *([kMG]i?)?B"/>
     </xs:restriction>
   </xs:simpleType>
 </xs:schema>
 <!--- generated from ddsi_config.h[75edea6617af11bacc46f91e519773f6df580655] -->
 <!--- generated from ddsi_cfgunits.h[fc550f1620aa20dcd9244ef4e24299d5001efbb4] -->
 <!--- generated from ddsi_cfgelems.h[cd3baa0178cce15e0974acd0a14723100d5308b8] -->
-<!--- generated from ddsi_config.c[4a8bce69542a6f2373c37c4a711a2a5d7b4c3bf7] -->
+<!--- generated from ddsi_config.c[ed9898f72f9dbcfa20ce7706835da091efcea0ca] -->
 <!--- generated from _confgen.h[01ffa8a2e53b2309451756861466551cfe28c8ce] -->
 <!--- generated from _confgen.c[112cf655ac336075d1b301972ac38840ac2119d6] -->
 <!--- generated from generate_rnc.c[a2ec6e48d33ac14a320c8ec3f320028a737920e0] -->
 <!--- generated from generate_md.c[a61b6a9649d18afeca4c73b5784f36989d7994e0] -->
 <!--- generated from generate_xsd.c[45064e8869b3c00573057d7c8f02d20f04b40e16] -->
 <!--- generated from generate_defconfig.c[eec9ab7b2d053e68500799b693d089e84153a37b] -->
diff --git a/src/core/ddsc/tests/config.c b/src/core/ddsc/tests/config.c
index a0f866fd..9c259ad2 100644
--- a/src/core/ddsc/tests/config.c
+++ b/src/core/ddsc/tests/config.c
@@ -481,3 +481,23 @@ CU_Test(ddsc_config, multiple_domains, .init = ddsrt_init, .fini = ddsrt_fini)
   dds_set_log_sink (NULL, NULL);
   dds_set_trace_sink (NULL, NULL);
 }
+
+CU_Test(ddsc_config, bad_configs_listelems)
+{
+  // The first one is thanks to OSS-Fuzz, the fact that it is so easy
+  // to forget an initialisation that can trigger this means it is
+  // worthwhile trying a few more case
+  const char *configs[] = {
+    "<Partitioning><NetworkPartitions><NetworkPartition",
+    "<Partitioning><PartitionMappings><PartitionMapping",
+    "<Partitioning><IgnoredPartitions><IgnoredPartition",
+    "<Threads><Thread",
+    "<NetworkInterfaces><NetworkInterface",
+    "<Discovery><Peers><Peer",
+    NULL
+  };
+  for (int i = 0; configs[i]; i++)
+  {
+    CU_ASSERT_FATAL (dds_create_domain (0, configs[i]) < 0);
+  }
+}
diff --git a/src/core/ddsi/defconfig.c b/src/core/ddsi/defconfig.c
index 326311f8..52c9e689 100644
--- a/src/core/ddsi/defconfig.c
+++ b/src/core/ddsi/defconfig.c
@@ -6,111 +6,111 @@
 void ddsi_config_init_default (struct ddsi_config *cfg)
 {
   memset (cfg, 0, sizeof (*cfg));
   static char *networkRecvAddressStrings_init_[] = {
     "preferred",
     NULL
   };
   cfg->networkRecvAddressStrings = networkRecvAddressStrings_init_;
   cfg->externalMaskString = "0.0.0.0";
   cfg->allowMulticast = UINT32_C (2147483648);
   cfg->multicast_ttl = INT32_C (32);
   cfg->transport_selector = INT32_C (1);
   cfg->enableMulticastLoopback = INT32_C (1);
   cfg->max_msg_size = UINT32_C (14720);
   cfg->max_rexmit_msg_size = UINT32_C (1456);
   cfg->fragment_size = UINT16_C (1344);
 #ifdef DDS_HAS_SECURITY
 #endif /* DDS_HAS_SECURITY */
 #ifdef DDS_HAS_NETWORK_PARTITIONS
 #endif /* DDS_HAS_NETWORK_PARTITIONS */
   cfg->rbuf_size = UINT32_C (1048576);
   cfg->rmsg_chunk_size = UINT32_C (131072);
   cfg->standards_conformance = INT32_C (2);
   cfg->many_sockets_mode = INT32_C (1);
   cfg->domainTag = "";
   cfg->extDomainId.isdefault = 1;
   cfg->ds_grace_period = INT64_C (30000000000);
   cfg->participantIndex = INT32_C (-2);
   cfg->maxAutoParticipantIndex = INT32_C (9);
   cfg->spdpMulticastAddressString = "239.255.0.1";
   cfg->spdp_interval = INT64_C (30000000000);
   cfg->ports.base = UINT32_C (7400);
   cfg->ports.dg = UINT32_C (250);
   cfg->ports.pg = UINT32_C (2);
   cfg->ports.d1 = UINT32_C (10);
   cfg->ports.d2 = UINT32_C (1);
   cfg->ports.d3 = UINT32_C (11);
 #ifdef DDS_HAS_TOPIC_DISCOVERY
 #endif /* DDS_HAS_TOPIC_DISCOVERY */
   cfg->lease_duration = INT64_C (10000000000);
   cfg->tracefile = "cyclonedds.log";
   cfg->pcap_file = "";
   cfg->delivery_queue_maxsamples = UINT32_C (256);
   cfg->primary_reorder_maxsamples = UINT32_C (128);
   cfg->secondary_reorder_maxsamples = UINT32_C (128);
   cfg->defrag_unreliable_maxsamples = UINT32_C (4);
   cfg->defrag_reliable_maxsamples = UINT32_C (16);
   cfg->besmode = INT32_C (1);
   cfg->unicast_response_to_spdp_messages = INT32_C (1);
   cfg->synchronous_delivery_latency_bound = INT64_C (9223372036854775807);
   cfg->retransmit_merging_period = INT64_C (5000000);
   cfg->const_hb_intv_sched = INT64_C (100000000);
   cfg->const_hb_intv_min = INT64_C (5000000);
   cfg->const_hb_intv_sched_min = INT64_C (20000000);
   cfg->const_hb_intv_sched_max = INT64_C (8000000000);
   cfg->max_queued_rexmit_bytes = UINT32_C (524288);
   cfg->max_queued_rexmit_msgs = UINT32_C (200);
   cfg->writer_linger_duration = INT64_C (1000000000);
   cfg->socket_rcvbuf_size.min.isdefault = 1;
   cfg->socket_rcvbuf_size.max.isdefault = 1;
   cfg->socket_sndbuf_size.min.isdefault = 0;
   cfg->socket_sndbuf_size.min.value = UINT32_C (65536);
   cfg->socket_sndbuf_size.max.isdefault = 1;
   cfg->nack_delay = INT64_C (100000000);
   cfg->ack_delay = INT64_C (10000000);
   cfg->auto_resched_nack_delay = INT64_C (3000000000);
   cfg->preemptive_ack_delay = INT64_C (10000000);
   cfg->ddsi2direct_max_threads = UINT32_C (1);
   cfg->max_sample_size = UINT32_C (2147483647);
   cfg->noprogress_log_stacktraces = INT32_C (1);
   cfg->liveliness_monitoring_interval = INT64_C (1000000000);
   cfg->monitor_port = INT32_C (-1);
   cfg->prioritize_retransmit = INT32_C (1);
   cfg->recv_thread_stop_maxretries = UINT32_C (4294967295);
   cfg->whc_lowwater_mark = UINT32_C (1024);
   cfg->whc_highwater_mark = UINT32_C (512000);
   cfg->whc_init_highwater_mark.isdefault = 0;
   cfg->whc_init_highwater_mark.value = UINT32_C (30720);
   cfg->whc_adaptive = INT32_C (1);
   cfg->max_rexmit_burst_size = UINT32_C (1048576);
   cfg->init_transmit_extra_pct = UINT32_C (4294967295);
   cfg->tcp_nodelay = INT32_C (1);
   cfg->tcp_port = INT32_C (-1);
   cfg->tcp_read_timeout = INT64_C (2000000000);
   cfg->tcp_write_timeout = INT64_C (2000000000);
 #ifdef DDS_HAS_SSL
   cfg->ssl_verify = INT32_C (1);
   cfg->ssl_verify_client = INT32_C (1);
   cfg->ssl_keystore = "keystore";
   cfg->ssl_key_pass = "secret";
   cfg->ssl_ciphers = "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH";
   cfg->ssl_rand_file = "";
   cfg->ssl_min_version.major = 1;
   cfg->ssl_min_version.minor = 3;
 #endif /* DDS_HAS_SSL */
 #ifdef DDS_HAS_SHM
   cfg->shm_locator = "";
   cfg->iceoryx_service = "DDS_CYCLONE";
   cfg->shm_log_lvl = INT32_C (4);
 #endif /* DDS_HAS_SHM */
 }
 /* generated from ddsi_config.h[75edea6617af11bacc46f91e519773f6df580655] */
 /* generated from ddsi_cfgunits.h[fc550f1620aa20dcd9244ef4e24299d5001efbb4] */
 /* generated from ddsi_cfgelems.h[cd3baa0178cce15e0974acd0a14723100d5308b8] */
-/* generated from ddsi_config.c[4a8bce69542a6f2373c37c4a711a2a5d7b4c3bf7] */
+/* generated from ddsi_config.c[ed9898f72f9dbcfa20ce7706835da091efcea0ca] */
 /* generated from _confgen.h[01ffa8a2e53b2309451756861466551cfe28c8ce] */
 /* generated from _confgen.c[112cf655ac336075d1b301972ac38840ac2119d6] */
 /* generated from generate_rnc.c[a2ec6e48d33ac14a320c8ec3f320028a737920e0] */
 /* generated from generate_md.c[a61b6a9649d18afeca4c73b5784f36989d7994e0] */
 /* generated from generate_xsd.c[45064e8869b3c00573057d7c8f02d20f04b40e16] */
 /* generated from generate_defconfig.c[eec9ab7b2d053e68500799b693d089e84153a37b] */
diff --git a/src/core/ddsi/src/ddsi_config.c b/src/core/ddsi/src/ddsi_config.c
index c80e467c..5c9c6820 100644
--- a/src/core/ddsi/src/ddsi_config.c
+++ b/src/core/ddsi/src/ddsi_config.c
@@ -716,15 +716,16 @@ static int if_channel(struct cfgst *cfgst, void *parent, struct cfgelem const *
 #ifdef DDS_HAS_NETWORK_PARTITIONS
 static int if_network_partition (struct cfgst *cfgst, void *parent, struct cfgelem const * const cfgelem)
 {
   struct ddsi_config_networkpartition_listelem *new = if_common (cfgst, parent, cfgelem, sizeof(*new));
   if (new == NULL)
     return -1;
   new->address_string = NULL;
+  new->interface_names = NULL;
   new->uc_addresses = NULL;
   new->asm_addresses = NULL;
 #ifdef DDS_HAS_SSM
   new->ssm_addresses = NULL;
 #endif
   new->name = NULL;
   return 0;
 }
