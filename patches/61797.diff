commit 2a4921ab23fd0853f327517636c50de947548161
Author: Veronika Hanulíková <vhanulik@redhat.com>
Date:   Tue Aug 29 14:40:21 2023 +0200

    iasecc: Check length of data when parsing crt
    
    Thanks OSS-Fuzz
    https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=61797

diff --git a/src/libopensc/iasecc-sdo.c b/src/libopensc/iasecc-sdo.c
index b3e567dd..3eeb03b9 100644
--- a/src/libopensc/iasecc-sdo.c
+++ b/src/libopensc/iasecc-sdo.c
@@ -204,49 +204,54 @@ iasecc_sdo_free(struct sc_card *card, struct iasecc_sdo *sdo)
 
 
 static int
-iasecc_crt_parse(struct sc_card *card, unsigned char *data, struct iasecc_se_info *se)
+iasecc_crt_parse(struct sc_card *card, unsigned char *data, size_t data_len, struct iasecc_se_info *se)
 {
 	struct sc_context *ctx = card->ctx;
 	struct sc_crt crt;
 	int ii, offs, len, parsed_len = -1;
 
 	sc_log(ctx, "iasecc_crt_parse(0x%X) called", *data);
 
+	if (data_len < 2)
+		LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
+
 	memset(&crt, 0, sizeof(crt));
 	crt.tag = *(data + 0);
 	len = *(data + 1);
 
 	for(offs = 2; offs < len + 2; offs += 3)   {
+		if ((size_t) offs + 2 >= data_len)
+			LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
 		sc_log(ctx, "iasecc_crt_parse(0x%X) CRT %X -> %X", *data, *(data + offs), *(data + offs + 2));
 		if (*(data + offs) == IASECC_CRT_TAG_USAGE)   {
 			crt.usage = *(data + offs + 2);
 		}
 		else if (*(data + offs) == IASECC_CRT_TAG_REFERENCE)   {
 			int nn_refs = sizeof(crt.refs) / sizeof(crt.refs[0]);
 
 			for (ii=0; ii<nn_refs && crt.refs[ii]; ii++)
 				;
 			if (ii == nn_refs)
 				LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
 
 			crt.refs[ii] = *(data + offs + 2);
 		}
 		else if (*(data + offs) == IASECC_CRT_TAG_ALGO)   {
 			crt.algo = *(data + offs + 2);
 		}
 		else   {
 			LOG_FUNC_RETURN(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED);
 		}
 	}
 
 	for (ii=0; ii<SC_MAX_CRTS_IN_SE; ii++)
 		if (!se->crts[ii].tag)
 			break;
 
 	if (ii==SC_MAX_CRTS_IN_SE)
 		LOG_TEST_RET(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED, "iasecc_crt_parse() error: too much CRTs in SE");
 
 	memcpy(&se->crts[ii], &crt, sizeof(crt));
 	parsed_len = len + 2;
 	LOG_FUNC_RETURN(ctx, parsed_len);
 }
@@ -319,63 +324,63 @@ int
 iasecc_se_parse(struct sc_card *card, unsigned char *data, size_t data_len, struct iasecc_se_info *se)
 {
 	struct sc_context *ctx = card->ctx;
 	size_t size, offs, size_size;
 	int rv;
 
 	LOG_FUNC_CALLED(ctx);
 
 	if (*data == IASECC_SDO_TEMPLATE_TAG)   {
 		size_size = iasecc_parse_size(data + 1, &size);
 		LOG_TEST_RET(ctx, size_size, "parse error: invalid size data of IASECC_SDO_TEMPLATE");
 
 		data += size_size + 1;
 		data_len = size;
 		sc_log(ctx,
 		       "IASECC_SDO_TEMPLATE: size %"SC_FORMAT_LEN_SIZE_T"u, size_size %"SC_FORMAT_LEN_SIZE_T"u",
 		       size, size_size);
 
 		if (*data != IASECC_SDO_TAG_HEADER)
 			LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
 
 		if ((*(data + 1) & 0x7F) != IASECC_SDO_CLASS_SE)
 			 LOG_FUNC_RETURN(ctx, SC_ERROR_INVALID_DATA);
 
 		size_size = iasecc_parse_size(data + 3, &size);
 		LOG_TEST_RET(ctx, size_size, "parse error: invalid SDO SE data size");
 
 		if (data_len != size + size_size + 3)
 			LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "parse error: invalid SDO SE data size");
 
 		data += 3 + size_size;
 		data_len = size;
 		sc_log(ctx,
 		       "IASECC_SDO_TEMPLATE SE: size %"SC_FORMAT_LEN_SIZE_T"u, size_size %"SC_FORMAT_LEN_SIZE_T"u",
 		       size, size_size);
 	}
 
 	if (*data != IASECC_SDO_CLASS_SE)   {
 		sc_log(ctx,
 		       "Invalid SE tag 0x%X; data length %"SC_FORMAT_LEN_SIZE_T"u",
 		       *data, data_len);
 		LOG_FUNC_RETURN(ctx, SC_ERROR_UNKNOWN_DATA_RECEIVED);
 	}
 
 	size_size = iasecc_parse_size(data + 1, &size);
 	LOG_TEST_RET(ctx, size_size, "parse error: invalid size data");
 
 	if (data_len != size + size_size + 1)
 		LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "parse error: invalid SE data size");
 
 	offs = 1 + size_size;
 	for (; offs < data_len;)   {
-		rv = iasecc_crt_parse(card, data + offs, se);
+		rv = iasecc_crt_parse(card, data + offs, data_len - offs, se);
 		LOG_TEST_RET(ctx, rv, "parse error: invalid SE data");
 
 		offs += rv;
 	}
 
 	if (offs != data_len)
 		LOG_TEST_RET(ctx, SC_ERROR_INVALID_DATA, "parse error: not totally parsed");
 
 	LOG_FUNC_RETURN(ctx, SC_SUCCESS);
 }
