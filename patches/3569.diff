commit cb335699aafc84952d1a6a94eb9d2ee201ad416f
Author: Thomas Knudsen <thokn@sdfe.dk>
Date:   Sun Oct 8 16:29:16 2017 +0200

    Resolve #594 and OSS-Fuzz-3569 (#595)
    
    * Resolve #594 and OSS-Fuzz-3569
    
    * Restructure PJ_geos opaque object: sweep_axis showed unneeded, and freeing it was wrong. Eliminate instead
    
    Resolves #594
    Resolves OSS-Fuzz Issue 3569
    
    Credit to OSS-Fuzz

diff --git a/src/PJ_geos.c b/src/PJ_geos.c
index 5679455f..5fd3e56b 100644
--- a/src/PJ_geos.c
+++ b/src/PJ_geos.c
@@ -35,12 +35,11 @@
 struct pj_opaque {
     double h;
     double radius_p;
     double radius_p2;
     double radius_p_inv2;
     double radius_g;
     double radius_g_1;
     double C;
-    char *sweep_axis;
     int flip_axis;
 };
 
@@ -191,47 +190,48 @@ static LP e_inverse (XY xy, PJ *P) {          /* Ellipsoidal, inverse */
 
 
 PJ *PROJECTION(geos) {
+    char *sweep_axis;
     struct pj_opaque *Q = pj_calloc (1, sizeof (struct pj_opaque));
     if (0==Q)
         return pj_default_destructor (P, ENOMEM);
     P->opaque = Q;
 
     if ((Q->h = pj_param(P->ctx, P->params, "dh").f) <= 0.)
-        pj_default_destructor (P, PJD_ERR_H_LESS_THAN_ZERO);
+        return pj_default_destructor (P, PJD_ERR_H_LESS_THAN_ZERO);
 
     if (P->phi0 != 0.0)
-        pj_default_destructor (P, PJD_ERR_UNKNOWN_PRIME_MERIDIAN);
+        return pj_default_destructor (P, PJD_ERR_UNKNOWN_PRIME_MERIDIAN);
 
-    Q->sweep_axis = pj_param(P->ctx, P->params, "ssweep").s;
-    if (Q->sweep_axis == NULL)
+    sweep_axis = pj_param(P->ctx, P->params, "ssweep").s;
+    if (sweep_axis == NULL)
       Q->flip_axis = 0;
     else {
-        if (Q->sweep_axis[1] != '\0' || (Q->sweep_axis[0] != 'x' && Q->sweep_axis[0] != 'y'))
-            pj_default_destructor (P, PJD_ERR_INVALID_SWEEP_AXIS);
+        if (sweep_axis[1] != '\0' || (sweep_axis[0] != 'x' && sweep_axis[0] != 'y'))
+            return pj_default_destructor (P, PJD_ERR_INVALID_SWEEP_AXIS);
 
-        if (Q->sweep_axis[0] == 'x')
+        if (sweep_axis[0] == 'x')
           Q->flip_axis = 1;
         else
           Q->flip_axis = 0;
     }
 
     Q->radius_g_1 = Q->h / P->a;
     Q->radius_g = 1. + Q->radius_g_1;
     Q->C  = Q->radius_g * Q->radius_g - 1.0;
     if (P->es != 0.0) {
         Q->radius_p      = sqrt (P->one_es);
         Q->radius_p2     = P->one_es;
         Q->radius_p_inv2 = P->rone_es;
         P->inv = e_inverse;
         P->fwd = e_forward;
     } else {
         Q->radius_p = Q->radius_p2 = Q->radius_p_inv2 = 1.0;
         P->inv = s_inverse;
         P->fwd = s_forward;
     }
 
     return P;
 }
 
 
 #ifndef PJ_SELFTEST
diff --git a/src/pj_ctx.c b/src/pj_ctx.c
index 7ba85e78..a8edaf43 100644
--- a/src/pj_ctx.c
+++ b/src/pj_ctx.c
@@ -55,9 +55,11 @@ projCtx pj_get_ctx( projPJ pj )
 void pj_set_ctx( projPJ pj, projCtx ctx )
 
 {
+    if (pj==0)
+        return;
     pj->ctx = ctx;
 }
 
 /************************************************************************/
 /*                         pj_get_default_ctx()                         */
 /************************************************************************/
@@ -102,13 +104,15 @@ projCtx pj_get_default_ctx()
 projCtx pj_ctx_alloc()
 
 {
     projCtx ctx = (projCtx_t *) malloc(sizeof(projCtx_t));
+    if (0==ctx)
+        return 0;
     memcpy( ctx, pj_get_default_ctx(), sizeof(projCtx_t) );
     ctx->last_errno = 0;
 
     return ctx;
 }
 
 /************************************************************************/
 /*                            pj_ctx_free()                             */
 /************************************************************************/
@@ -116,9 +120,9 @@ projCtx pj_ctx_alloc()
 void pj_ctx_free( projCtx ctx )
 
 {
-    free( ctx );
+    pj_dealloc( ctx );
 }
 
 /************************************************************************/
 /*                          pj_ctx_get_errno()                          */
 /************************************************************************/
@@ -126,29 +130,27 @@ void pj_ctx_free( projCtx ctx )
 int pj_ctx_get_errno( projCtx ctx )
 
 {
+    if (0==ctx)
+        return pj_get_default_ctx ()->last_errno;
     return ctx->last_errno;
 }
 
 /************************************************************************/
 /*                          pj_ctx_set_errno()                          */
 /*                                                                      */
-/*      Also sets the global errno.                                     */
-/*      Since pj_errno makes sense in single threaded cases only,       */
-/*      we set it only when called on the default context.              */
+/*                      Also sets the global errno                      */
 /************************************************************************/
 
 void pj_ctx_set_errno( projCtx ctx, int new_errno )
 
 {
     ctx->last_errno = new_errno;
-    if (ctx!=pj_get_default_ctx())
-        return;
     if( new_errno == 0 )
         return;
-    pj_errno = new_errno;
     errno = new_errno;
+    pj_errno = new_errno;
 }
 
 /************************************************************************/
 /*                          pj_ctx_set_debug()                          */
 /************************************************************************/
@@ -156,9 +158,11 @@ void pj_ctx_set_errno( projCtx ctx, int new_errno )
 void pj_ctx_set_debug( projCtx ctx, int new_debug )
 
 {
+    if (0==ctx)
+        pj_get_default_ctx ()->debug_level = new_debug;
     ctx->debug_level = new_debug;
 }
 
 /************************************************************************/
 /*                         pj_ctx_set_logger()                          */
 /************************************************************************/
@@ -166,9 +170,11 @@ void pj_ctx_set_debug( projCtx ctx, int new_debug )
 void pj_ctx_set_logger( projCtx ctx, void (*new_logger)(void*,int,const char*) )
 
 {
+    if (0==ctx)
+        return;
     ctx->logger = new_logger;
 }
 
 /************************************************************************/
 /*                        pj_ctx_set_app_data()                         */
 /************************************************************************/
@@ -176,9 +182,11 @@ void pj_ctx_set_logger( projCtx ctx, void (*new_logger)(void*,int,const char*) )
 void pj_ctx_set_app_data( projCtx ctx, void *new_app_data )
 
 {
+    if (0==ctx)
+        return;
     ctx->app_data = new_app_data;
 }
 
 /************************************************************************/
 /*                        pj_ctx_get_app_data()                         */
 /************************************************************************/
@@ -186,9 +194,11 @@ void pj_ctx_set_app_data( projCtx ctx, void *new_app_data )
 void *pj_ctx_get_app_data( projCtx ctx )
 
 {
+    if (0==ctx)
+        return 0;
     return ctx->app_data;
 }
 
 /************************************************************************/
 /*                         pj_ctx_set_fileapi()                         */
 /************************************************************************/
@@ -196,9 +206,11 @@ void *pj_ctx_get_app_data( projCtx ctx )
 void pj_ctx_set_fileapi( projCtx ctx, projFileAPI *fileapi )
 
 {
+    if (0==ctx)
+        return;
     ctx->fileapi = fileapi;
 }
 
 /************************************************************************/
 /*                         pj_ctx_get_fileapi()                         */
 /************************************************************************/
@@ -206,5 +218,7 @@ void pj_ctx_set_fileapi( projCtx ctx, projFileAPI *fileapi )
 projFileAPI *pj_ctx_get_fileapi( projCtx ctx )
 
 {
+    if (0==ctx)
+        return 0;
     return ctx->fileapi;
 }
diff --git a/src/pj_malloc.c b/src/pj_malloc.c
index 75d05378..4e465c46 100644
--- a/src/pj_malloc.c
+++ b/src/pj_malloc.c
@@ -154,32 +154,37 @@ void *pj_dealloc_params (projCtx ctx, paralist *start, int errlev) {
 /*****************************************************************************/
 void *pj_default_destructor (PJ *P, int errlev) {   /* Destructor */
 /*****************************************************************************
     Does memory deallocation for "plain" PJ objects, i.e. that vast majority
     of PJs where the opaque object does not contain any additionally
     allocated memory below the P->opaque level.
 ******************************************************************************/
+
+    /* Even if P==0, we set the errlev on pj_error and the default context   */
+    /* Note that both, in the multithreaded case, may then contain undefined */
+    /* values. This is expected behaviour. For MT have one ctx per thread    */
+    if (0!=errlev)
+        pj_ctx_set_errno (pj_get_ctx(P), errlev);
+
     if (0==P)
         return 0;
     
     /* free grid lists */
     pj_dealloc( P->gridlist );
     pj_dealloc( P->vgridlist_geoid );
     pj_dealloc( P->catalog_name );
     
     /* We used to call pj_dalloc( P->catalog ), but this will leak */
     /* memory. The safe way to clear catalog and grid is to call */
     /* pj_gc_unloadall(pj_get_default_ctx()); and pj_deallocate_grids(); */
     /* TODO: we should probably have a public pj_cleanup() method to do all */
     /* that */
 
     /* free the interface to Charles Karney's geodesic library */
     pj_dealloc( P->geod );
     
     /* free parameter list elements */
     pj_dealloc_params (pj_get_ctx(P), P->params, errlev);
 
     pj_dealloc (P->opaque);
-    if (0!=errlev)
-        pj_ctx_set_errno (pj_get_ctx(P), errlev);
     return pj_dealloc(P);
 }
