commit a1bd8188b3ad679f0814ae3935e45e496381df19
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Mon Feb 13 21:54:54 2023 -0500

    correct RLE unpack algorithm

diff --git a/coders/wpg.c b/coders/wpg.c
index 1f8fa5b52..efbacf784 100644
--- a/coders/wpg.c
+++ b/coders/wpg.c
@@ -435,114 +435,112 @@ static MagickBooleanType InsertRow(Image *image,unsigned char *p,ssize_t y,
 /* Helper for WPG1 raster reader. */
 #define InsertByte(b) \
 { \
   BImgBuff[x]=b; \
   x++; \
   if((ssize_t) x>=ldblk) \
   { \
     if (InsertRow(image,BImgBuff,(ssize_t) y,bpp,exception) != MagickFalse) \
       y++; \
     x=0; \
   } \
 }
 /* WPG1 raster reader. */
 static int UnpackWPGRaster(Image *image,int bpp,ExceptionInfo *exception)
 {
   int
     x,
     y,
     i;
 
   unsigned char
     bbuf,
     *BImgBuff,
     RunCount;
 
   ssize_t
     ldblk;
 
   x=0;
   y=0;
 
   ldblk=(ssize_t) ((bpp*image->columns+7)/8);
   BImgBuff=(unsigned char *) AcquireQuantumMemory((size_t) ldblk,
     8*sizeof(*BImgBuff));
   if(BImgBuff==NULL) return(-2);
   (void) memset(BImgBuff,0,(size_t) ldblk*8*sizeof(*BImgBuff));
   while (y < (ssize_t) image->rows)
   {
       int
         c;
 
       c=ReadBlobByte(image);
       if (c == EOF)
         break;
       bbuf=(unsigned char) c;
       RunCount=bbuf & 0x7F;
       if(bbuf & 0x80)
         {
           if(RunCount)  /* repeat next byte runcount * */
             {
               bbuf=ReadBlobByte(image);
               for(i=0;i<(int) RunCount;i++) InsertByte(bbuf);
             }
           else {  /* read next byte as RunCount; repeat 0xFF runcount* */
             c=ReadBlobByte(image);
             if (c < 0)
               break;
             RunCount=(unsigned char) c;
             for(i=0;i<(int) RunCount;i++) InsertByte(0xFF);
           }
         }
       else {
         if(RunCount)   /* next runcount byte are read directly */
           {
             for(i=0;i < (int) RunCount;i++)
               {
                 c=ReadBlobByte(image);
                 if (c < 0)
                   break;
                 InsertByte(c);
               }
           }
         else {  /* repeat previous line runcount* */
           c=ReadBlobByte(image);
           if (c == EOF)
             {
               BImgBuff=(unsigned char *) RelinquishMagickMemory(BImgBuff);
               return(-7);
             }
           RunCount=(unsigned char) c;
           if(x) {    /* attempt to duplicate row from x position: */
             /* I do not know what to do here */
             BImgBuff=(unsigned char *) RelinquishMagickMemory(BImgBuff);
             return(-3);
           }
-          for(i=0;i < (int) RunCount;i++)
-            {
-              x=0;
-              y++;    /* Here I need to duplicate previous row RUNCOUNT* */
-              if(y<2) continue;
-              if(y>(ssize_t) image->rows)
-                {
-                  BImgBuff=(unsigned char *) RelinquishMagickMemory(BImgBuff);
-                  return(-4);
-                }
-              if (InsertRow(image,BImgBuff,y-1,bpp,exception) == MagickFalse)
-                {
-                  BImgBuff=(unsigned char *) RelinquishMagickMemory(BImgBuff);
-                  return(-5);
-                }
-            }
+          for (i=0; i < (int) RunCount; i++)
+          {
+            if (y >= (ssize_t) image->rows)
+              {
+                BImgBuff=(unsigned char *) RelinquishMagickMemory(BImgBuff);
+                return(-4);
+              }
+            if (InsertRow(image,BImgBuff,y-1,bpp,exception) == MagickFalse)
+              {
+                BImgBuff=(unsigned char *) RelinquishMagickMemory(BImgBuff);
+                return(-6);
+              }
+            y++;
+          }
         }
       }
       if (EOFBlob(image) != MagickFalse)
         break;
     }
   BImgBuff=(unsigned char *) RelinquishMagickMemory(BImgBuff);
   return(y <(ssize_t) image->rows ? -5 : 0);
 }
 
 
 /* Helper for WPG2 reader. */
 #define InsertByte6(b) \
 { \
