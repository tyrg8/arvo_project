commit 4f8cb7809e3f5aa1fd7b28c1934bf4893ec3195f
Author: Szabolcs HorvaÃÅt <szhorvat@gmail.com>
Date:   Fri Jun 10 14:11:15 2022 +0200

    fuzzer: protect edgelist reader from large memory allocations when fuzzing

diff --git a/src/io/edgelist.c b/src/io/edgelist.c
index 36cd86f55..90797a5da 100644
--- a/src/io/edgelist.c
+++ b/src/io/edgelist.c
@@ -47,78 +47,86 @@
 /**
  * \ingroup loadsave
  * \function igraph_read_graph_edgelist
  * \brief Reads an edge list from a file and creates a graph.
  *
  * </para><para>
  * This format is simply a series of an even number of non-negative integers separated by
  * whitespace. The integers represent vertex IDs. Placing each edge (i.e. pair of integers)
  * on a separate line is not required, but it is recommended for readability.
  * Edges of directed graphs are assumed to be in "from, to" order.
  *
  * \param graph Pointer to an uninitialized graph object.
  * \param instream Pointer to a stream, it should be readable.
  * \param n The number of vertices in the graph. If smaller than the
  *        largest integer in the file it will be ignored. It is thus
  *        safe to supply zero here.
  * \param directed Logical, if true the graph is directed, if false it
  *        will be undirected.
  * \return Error code:
  *         \c IGRAPH_PARSEERROR: if there is a
  *         problem reading the file, or the file is syntactically
  *         incorrect.
  *
  * Time complexity: O(|V|+|E|), the
  * number of vertices plus the number of edges. It is assumed that
  * reading an integer requires O(1) time.
  */
 igraph_error_t igraph_read_graph_edgelist(igraph_t *graph, FILE *instream,
                                igraph_integer_t n, igraph_bool_t directed) {
 
     igraph_vector_int_t edges = IGRAPH_VECTOR_NULL;
     igraph_integer_t from, to;
 
     IGRAPH_VECTOR_INT_INIT_FINALLY(&edges, 0);
     IGRAPH_CHECK(igraph_vector_int_reserve(&edges, 100));
 
     for (;;) {
         IGRAPH_ALLOW_INTERRUPTION();
 
         IGRAPH_CHECK(igraph_i_fskip_whitespace(instream));
 
         if (feof(instream)) break;
 
         IGRAPH_CHECK(igraph_i_fget_integer(instream, &from));
         IGRAPH_CHECK(igraph_i_fget_integer(instream, &to));
 
+#ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
+        /* Protect from very large memory allocations when fuzzing. */
+#define IGRAPH_EDGELIST_MAX_VERTEX_COUNT (1L << 20)
+        if (from > IGRAPH_EDGELIST_MAX_VERTEX_COUNT || to > IGRAPH_EDGELIST_MAX_VERTEX_COUNT) {
+            IGRAPH_ERROR("Vertex count too large in edgelist file.", IGRAPH_EINVAL);
+        }
+#endif
+
         IGRAPH_CHECK(igraph_vector_int_push_back(&edges, from));
         IGRAPH_CHECK(igraph_vector_int_push_back(&edges, to));
     }
 
     IGRAPH_CHECK(igraph_create(graph, &edges, n, directed));
     igraph_vector_int_destroy(&edges);
     IGRAPH_FINALLY_CLEAN(1);
 
     return IGRAPH_SUCCESS;
 }
 
 /**
  * \ingroup loadsave
  * \function igraph_write_graph_edgelist
  * \brief Writes the edge list of a graph to a file.
  *
  * </para><para>
  * Edges are represented as pairs of 0-based vertex indices.
  * One edge is written per line, separated by a single space.
  * For directed graphs edges are written in from, to order.
  *
  * \param graph The graph object to write.
  * \param outstream Pointer to a stream, it should be writable.
  * \return Error code:
  *         \c IGRAPH_EFILE if there is an error writing the
  *         file.
  *
  * Time complexity: O(|E|), the
  * number of edges in the  graph. It is assumed that writing an
  * integer to the file requires O(1)
  * time.
  */
