commit b7771a8e4c01851f7674146e47f7a460633f5e99
Author: Alex Tutubalin <lexa@lexa.ru>
Date:   Wed Nov 9 19:32:12 2022 +0300

    check for float data size in FP-dng decoder

diff --git a/src/decoders/fp_dng.cpp b/src/decoders/fp_dng.cpp
index 3f3048a3..0566ad2c 100644
--- a/src/decoders/fp_dng.cpp
+++ b/src/decoders/fp_dng.cpp
@@ -587,100 +587,103 @@ void swap32(uchar *data, int len)
 void LibRaw::uncompressed_fp_dng_load_raw()
 {
     int iifd = find_ifd_by_offset(libraw_internal_data.unpacker_data.data_offset);
     if (iifd < 0 || iifd > (int)libraw_internal_data.identify_data.tiff_nifds)
         throw LIBRAW_EXCEPTION_DECODE_RAW;
     struct tiff_ifd_t *ifd = &tiff_ifd[iifd];
 
     float *float_raw_image = 0;
 
     if (ifd->samples != 1 && ifd->samples != 3 && ifd->samples != 4)
         throw LIBRAW_EXCEPTION_DECODE_RAW; 
 
     if(imgdata.idata.filters && ifd->samples > 1)
       throw LIBRAW_EXCEPTION_DECODE_RAW;
 
     if ((int)libraw_internal_data.unpacker_data.tiff_samples != ifd->samples)
         throw LIBRAW_EXCEPTION_DECODE_RAW; // Wrong IFD
 
     int bytesps = (ifd->bps + 7) >> 3; // round to upper value
 
+	if(bytesps < 1 || bytesps > 4)
+      throw LIBRAW_EXCEPTION_DECODE_RAW;
+
     tile_stripe_data_t tiles;
     tiles.init(ifd, imgdata.sizes, libraw_internal_data.unpacker_data, libraw_internal_data.unpacker_data.order,
         libraw_internal_data.internal_data.input);
 
 	INT64 allocsz = INT64(tiles.tileCnt) * INT64(tiles.tileWidth) * INT64(tiles.tileHeight) * INT64(ifd->samples) * INT64(sizeof(float));
 	if (allocsz > INT64(imgdata.rawparams.max_raw_memory_mb) * INT64(1024 * 1024))
 		throw LIBRAW_EXCEPTION_TOOBIG;
 
     if (ifd->sample_format == 3)
         float_raw_image = (float *)calloc(tiles.tileCnt * tiles.tileWidth * tiles.tileHeight *ifd->samples, sizeof(float));
     else
         throw LIBRAW_EXCEPTION_DECODE_RAW; // Only float supported
 
     bool difford = (libraw_internal_data.unpacker_data.order == 0x4949) == (ntohs(0x1234) == 0x1234);
     float max = 0.f;
 
     std::vector<uchar> rowbuf(tiles.tileWidth *sizeof(float) * ifd->samples); // line buffer for last tile in tile row
 
     for (size_t y = 0, t = 0; y < imgdata.sizes.raw_height; y += tiles.tileHeight)
     {
         for (unsigned x = 0; x < imgdata.sizes.raw_width  && t < (unsigned)tiles.tileCnt; x += tiles.tileWidth, ++t)
         {
             libraw_internal_data.internal_data.input->seek(tiles.tOffsets[t], SEEK_SET);
             size_t rowsInTile = y + tiles.tileHeight > imgdata.sizes.raw_height ? imgdata.sizes.raw_height - y : tiles.tileHeight;
             size_t colsInTile = x + tiles.tileWidth > imgdata.sizes.raw_width ? imgdata.sizes.raw_width - x : tiles.tileWidth;
 
             size_t inrowbytes = colsInTile * bytesps * ifd->samples;
             int fullrowbytes = tiles.tileWidth *bytesps * ifd->samples;
             size_t outrowbytes = colsInTile * sizeof(float) * ifd->samples;
 
             for (size_t row = 0; row < rowsInTile; ++row) // do not process full tile if not needed
             {
                 unsigned char *dst = fullrowbytes > inrowbytes ? rowbuf.data(): // last tile in row, use buffer
                     (unsigned char *)&float_raw_image
                     [((y + row) * imgdata.sizes.raw_width + x) * ifd->samples];
                 libraw_internal_data.internal_data.input->read(dst, 1, fullrowbytes);
                 if (bytesps == 2 && difford)
                     libraw_swab(dst, fullrowbytes);
                 else if (bytesps == 3 && (libraw_internal_data.unpacker_data.order == 0x4949)) // II-16bit
                     swap24(dst, fullrowbytes);
                 if (bytesps == 4 && difford)
                     swap32(dst, fullrowbytes);
 
                 float lmax = expandFloats(
                     dst,
                     tiles.tileWidth * ifd->samples,
                     bytesps);
                 if (fullrowbytes > inrowbytes) // last tile in row: copy buffer to destination
                     memmove(&float_raw_image[((y + row) * imgdata.sizes.raw_width + x) * ifd->samples], dst, outrowbytes);
                 max = MAX(max, lmax);
             }
         }
     }
 
     imgdata.color.fmaximum = max;
 
     // setup outpuf fields
     imgdata.rawdata.raw_alloc = float_raw_image;
     if (ifd->samples == 1)
     {
         imgdata.rawdata.float_image = float_raw_image;
         imgdata.rawdata.sizes.raw_pitch = imgdata.sizes.raw_pitch =
             imgdata.sizes.raw_width * 4;
     }
     else if (ifd->samples == 3)
     {
         imgdata.rawdata.float3_image = (float(*)[3])float_raw_image;
         imgdata.rawdata.sizes.raw_pitch = imgdata.sizes.raw_pitch =
             imgdata.sizes.raw_width * 12;
     }
     else if (ifd->samples == 4)
     {
         imgdata.rawdata.float4_image = (float(*)[4])float_raw_image;
         imgdata.rawdata.sizes.raw_pitch = imgdata.sizes.raw_pitch =
             imgdata.sizes.raw_width * 16;
     }
 
     if (imgdata.rawparams.options & LIBRAW_RAWOPTIONS_CONVERTFLOAT_TO_INT)
         convertFloatToInt();  
 }
