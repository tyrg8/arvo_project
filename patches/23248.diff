commit 96fba43565e46496959d1b321163a1696eb49303
Author: elad <elad@ubunu2004.linuxvmimagrs.local>
Date:   Thu Jul 2 13:10:37 2020 +0530

    Bugfix #483 - wrong parsing of specific Null/Loopback packets

diff --git a/Packet++/src/NullLoopbackLayer.cpp b/Packet++/src/NullLoopbackLayer.cpp
index 4d1ce659..bb0c6cf2 100644
--- a/Packet++/src/NullLoopbackLayer.cpp
+++ b/Packet++/src/NullLoopbackLayer.cpp
@@ -1,5 +1,6 @@
 #include "NullLoopbackLayer.h"
+#include "EthLayer.h"
 #include "IPv4Layer.h"
 #include "IPv6Layer.h"
 #include "PayloadLayer.h"
 #include <string.h>
@@ -7,10 +8,11 @@
 namespace pcpp
 {
 
 #define BSWAP16(x) (((x) >> 8) | ((x) << 8))
 #define BSWAP32(x) (((x) >> 24) | (((x) & 0x00FF0000) >> 8) \
                   | (((x) & 0x0000FF00) << 8) | ((x) << 24))
 
+#define IEEE_802_3_MAX_LEN 0x5dc
 
 NullLoopbackLayer::NullLoopbackLayer(uint32_t family)
 {
@@ -53,23 +55,45 @@ void NullLoopbackLayer::setFamily(uint32_t family)
 void NullLoopbackLayer::parseNextLayer()
 {
 	uint8_t* payload = m_Data + sizeof(uint32_t);
 	size_t payloadLen = m_DataLen - sizeof(uint32_t);
 
-	switch (getFamily())
+	uint32_t family = getFamily();
+	if (family > IEEE_802_3_MAX_LEN)
+	{
+		uint16_t ethType = (uint16_t)family;
+		switch (ethType)
+		{
+		case PCPP_ETHERTYPE_IP:
+			m_NextLayer = IPv4Layer::isDataValid(payload, payloadLen)
+				? static_cast<Layer*>(new IPv4Layer(payload, payloadLen, this, m_Packet))
+				: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
+			return;
+		case PCPP_ETHERTYPE_IPV6:
+			m_NextLayer = IPv6Layer::isDataValid(payload, payloadLen)
+				? static_cast<Layer*>(new IPv6Layer(payload, payloadLen, this, m_Packet))
+				: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
+			return;
+		default:
+			m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
+			return;
+		}
+	}
+
+	switch (family)
 	{
 	case PCPP_BSD_AF_INET:
 		m_NextLayer = IPv4Layer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new IPv4Layer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	case PCPP_BSD_AF_INET6_BSD:
 	case PCPP_BSD_AF_INET6_FREEBSD:
 	case PCPP_BSD_AF_INET6_DARWIN:
 		m_NextLayer = IPv6Layer::isDataValid(payload, payloadLen)
 			? static_cast<Layer*>(new IPv6Layer(payload, payloadLen, this, m_Packet))
 			: static_cast<Layer*>(new PayloadLayer(payload, payloadLen, this, m_Packet));
 		break;
 	default:
 		m_NextLayer = new PayloadLayer(payload, payloadLen, this, m_Packet);
 	}
 }
diff --git a/Tests/Packet++Test/PacketExamples/NullLoopback.pcap b/Tests/Packet++Test/PacketExamples/NullLoopback.pcap
index d4b5b056..beff93a1 100644
Binary files a/Tests/Packet++Test/PacketExamples/NullLoopback.pcap and b/Tests/Packet++Test/PacketExamples/NullLoopback.pcap differ
diff --git a/Tests/Packet++Test/PacketExamples/NullLoopback3.dat b/Tests/Packet++Test/PacketExamples/NullLoopback3.dat
new file mode 100644
index 00000000..20fa5191
--- /dev/null
+++ b/Tests/Packet++Test/PacketExamples/NullLoopback3.dat
@@ -0,0 +1 @@
+0f0008004500018900004000401124da0a00008a0a0000010035e30d0175192a2d6d818000010011000000000377777710676f6f676c652d616e616c797469637303636f6d0000010001c00c000500010000deb00020147777772d676f6f676c652d616e616c7974696373016c06676f6f676c65c021147777772d676f6f676c652d616e616c7974696373014cc04d00010001000000750004d4c7dbedc05600010001000000750004d4c7dbe3c05600010001000000750004d4c7dbf6c05600010001000000750004d4c7dbf1c05600010001000000750004d4c7dbdec05600010001000000750004d4c7dbfbc05600010001000000750004d4c7dbd4c05600010001000000750004d4c7dbf7c05600010001000000750004d4c7dbe8c05600010001000000750004d4c7dbf2c05600010001000000750004d4c7dbd8c05600010001000000750004d4c7dbddc05600010001000000750004d4c7dbd9c05600010001000000750004d4c7dbe2c05600010001000000750004d4c7dbe7c05600010001000000750004d4c7dbec
diff --git a/Tests/Packet++Test/Tests/SllNullLoopbackTests.cpp b/Tests/Packet++Test/Tests/SllNullLoopbackTests.cpp
index 71eb15bf..108c9065 100644
--- a/Tests/Packet++Test/Tests/SllNullLoopbackTests.cpp
+++ b/Tests/Packet++Test/Tests/SllNullLoopbackTests.cpp
@@ -86,52 +86,63 @@ PTF_TEST_CASE(SllPacketCreationTest)
 PTF_TEST_CASE(NullLoopbackTest)
 {
 	timeval time;
 	gettimeofday(&time, NULL);
 
 	READ_FILE_AND_CREATE_PACKET_LINKTYPE(1, "PacketExamples/NullLoopback1.dat", pcpp::LINKTYPE_NULL);
 	READ_FILE_AND_CREATE_PACKET_LINKTYPE(2, "PacketExamples/NullLoopback2.dat", pcpp::LINKTYPE_NULL);
+	READ_FILE_AND_CREATE_PACKET_LINKTYPE(3, "PacketExamples/NullLoopback3.dat", pcpp::LINKTYPE_NULL);
+
 
 	pcpp::Packet nullPacket1(&rawPacket1);
 	pcpp::Packet nullPacket2(&rawPacket2);
+	pcpp::Packet nullPacket3(&rawPacket3);
 
 	pcpp::NullLoopbackLayer* nullLoopbackLayer;
 	pcpp::Layer* nextLayer;
 
 	PTF_ASSERT_TRUE(nullPacket1.isPacketOfType(pcpp::NULL_LOOPBACK));
 	nullLoopbackLayer = nullPacket1.getLayerOfType<pcpp::NullLoopbackLayer>();
 	PTF_ASSERT_NOT_NULL(nullLoopbackLayer);
 	nextLayer = nullLoopbackLayer->getNextLayer();
 	PTF_ASSERT_NOT_NULL(nextLayer);
 	PTF_ASSERT_EQUAL(nextLayer->getProtocol(), pcpp::IPv6, u64);
 	PTF_ASSERT_EQUAL(nullLoopbackLayer->getFamily(), PCPP_BSD_AF_INET6_DARWIN, u32);
 
 	PTF_ASSERT_TRUE(nullPacket2.isPacketOfType(pcpp::NULL_LOOPBACK));
 	nullLoopbackLayer = nullPacket2.getLayerOfType<pcpp::NullLoopbackLayer>();
 	PTF_ASSERT_NOT_NULL(nullLoopbackLayer);
 	nextLayer = nullLoopbackLayer->getNextLayer();
 	PTF_ASSERT_NOT_NULL(nextLayer);
 	PTF_ASSERT_EQUAL(nextLayer->getProtocol(), pcpp::IPv4, u64);
 	PTF_ASSERT_EQUAL(((pcpp::IPv4Layer*)nextLayer)->getSrcIpAddress(), pcpp::IPv4Address("172.16.1.117"), object);
 	PTF_ASSERT_EQUAL(nullLoopbackLayer->getFamily(), PCPP_BSD_AF_INET, u32);
 
+	PTF_ASSERT_TRUE(nullPacket3.isPacketOfType(pcpp::NULL_LOOPBACK));
+	nullLoopbackLayer = nullPacket3.getLayerOfType<pcpp::NullLoopbackLayer>();
+	PTF_ASSERT_NOT_NULL(nullLoopbackLayer);
+	nextLayer = nullLoopbackLayer->getNextLayer();
+	PTF_ASSERT_NOT_NULL(nextLayer);
+	PTF_ASSERT_EQUAL(nextLayer->getProtocol(), pcpp::IPv4, u64);
+	PTF_ASSERT_GREATER_THAN(nullLoopbackLayer->getFamily(), 1500, u32);
+
 	pcpp::Packet newNullPacket(1);
 	pcpp::NullLoopbackLayer newNullLoopbackLayer(PCPP_BSD_AF_INET);
 	pcpp::IPv4Layer newIp4Layer(pcpp::IPv4Address("172.16.1.117"), pcpp::IPv4Address("172.16.1.255"));
 	newIp4Layer.getIPv4Header()->ipId = htobe16(49513);
 	newIp4Layer.getIPv4Header()->timeToLive = 64;
 
 	pcpp::UdpLayer newUdpLayer(55369, 8612);
 
 	uint8_t payload[] = { 0x42, 0x4a, 0x4e, 0x42, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 	pcpp::PayloadLayer newPayloadLayer(payload, 16, false);
 
 	PTF_ASSERT_TRUE(newNullPacket.addLayer(&newNullLoopbackLayer));
 	PTF_ASSERT_TRUE(newNullPacket.addLayer(&newIp4Layer));
 	PTF_ASSERT_TRUE(newNullPacket.addLayer(&newUdpLayer));
 	PTF_ASSERT_TRUE(newNullPacket.addLayer(&newPayloadLayer));
 
 	newNullPacket.computeCalculateFields();
 
 	PTF_ASSERT_EQUAL(newNullPacket.getRawPacket()->getRawDataLen(), bufferLength2, int);
 	PTF_ASSERT_BUF_COMPARE(newNullPacket.getRawPacket()->getRawData(), buffer2, bufferLength2);
 } // NullLoopbackTest
\ No newline at end of file
