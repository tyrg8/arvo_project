commit d8b1e8b44b1a727e73f2b3093fda87d8ee178814
Merge: 84d45f47 ebd176e1
Author: Nguyen Anh Quynh <aquynh@gmail.com>
Date:   Wed Jan 2 10:01:03 2019 +0800

    Merge branch 'master' into v4.1

diff --git a/ChangeLog b/ChangeLog
index 7dbd3d11..b736d7ca 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,19 @@
 This file details the changelog of Capstone.
 
+---------------------------------
+Version 4.x: **SETDATE**
+
+
+[ Arm ]
+
+- Fix 4.0 regression: the `tbh [r0, r1, lsl #1]` instruction sets the operand.shift.value back again (see #1317)
+
+
+[ X86 ]
+
+- Fix: endbr32 and endbr64 instructions are now properly decoded in both CS_MODE_32 and CS_MODE_64  (#1129)
+
+
 ---------------------------------
 Version 4.0: December 18th, 2018
 
diff --git a/arch/ARM/ARMInstPrinter.c b/arch/ARM/ARMInstPrinter.c
index fbc89b49..271a5a1a 100644
--- a/arch/ARM/ARMInstPrinter.c
+++ b/arch/ARM/ARMInstPrinter.c
@@ -1065,19 +1065,21 @@ static void printAddrModeTBB(MCInst *MI, unsigned Op, SStream *O)
 static void printAddrModeTBH(MCInst *MI, unsigned Op, SStream *O)
 {
 	MCOperand *MO1 = MCInst_getOperand(MI, Op);
 	MCOperand *MO2 = MCInst_getOperand(MI, Op+1);
 	SStream_concat0(O, "[");
 	set_mem_access(MI, true);
 	printRegName(MI->csh, O, MCOperand_getReg(MO1));
 	if (MI->csh->detail)
 		MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].mem.base = MCOperand_getReg(MO1);
 	SStream_concat0(O, ", ");
 	printRegName(MI->csh, O, MCOperand_getReg(MO2));
 	if (MI->csh->detail)
 		MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].mem.index = MCOperand_getReg(MO2);
 	SStream_concat0(O, ", lsl #1]");
 	if (MI->csh->detail) {
+		MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].shift.type = ARM_SFT_LSL;
+		MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].shift.value = 1;
 		MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].mem.lshift = 1;
 	}
 	set_mem_access(MI, false);
 }
diff --git a/bindings/python/capstone/__init__.py b/bindings/python/capstone/__init__.py
index 3dc479c4..c74b7f2f 100644
--- a/bindings/python/capstone/__init__.py
+++ b/bindings/python/capstone/__init__.py
@@ -800,274 +800,299 @@ class CsInsn(object):
 class Cs(object):
     def __init__(self, arch, mode):
         # verify version compatibility with the core before doing anything
         (major, minor, _combined) = cs_version()
         if major != CS_API_MAJOR or minor != CS_API_MINOR:
             self.csh = None
             # our binding version is different from the core's API version
             raise CsError(CS_ERR_VERSION)
 
         self.arch, self._mode = arch, mode
         self.csh = ctypes.c_size_t()
         status = _cs.cs_open(arch, mode, ctypes.byref(self.csh))
         if status != CS_ERR_OK:
             self.csh = None
             raise CsError(status)
 
         try:
             import ccapstone
             # rewire disasm to use the faster version
             self.disasm = ccapstone.Cs(self).disasm
         except:
             pass
 
         if arch == CS_ARCH_X86:
             # Intel syntax is default for X86
             self._syntax = CS_OPT_SYNTAX_INTEL
         else:
             self._syntax = None
 
         self._detail = False  # by default, do not produce instruction details
         self._imm_unsigned = False  # by default, print immediate operands as signed numbers
         self._diet = cs_support(CS_SUPPORT_DIET)
         self._x86reduce = cs_support(CS_SUPPORT_X86_REDUCE)
 
         # default mnemonic for SKIPDATA
         self._skipdata_mnem = ".byte"
+        self._skipdata_cb = (None, None)
         self._skipdata = False
 
 
 
     # destructor to be called automatically when object is destroyed.
     def __del__(self):
         if self.csh:
             try:
                 status = _cs.cs_close(ctypes.byref(self.csh))
                 if status != CS_ERR_OK:
                     raise CsError(status)
             except: # _cs might be pulled from under our feet
                 pass
 
 
     # def option(self, opt_type, opt_value):
     #    return _cs.cs_option(self.csh, opt_type, opt_value)
 
 
     # is this a diet engine?
     @property
     def diet(self):
         return self._diet
 
 
     # is this engine compiled with X86-reduce option?
     @property
     def x86_reduce(self):
         return self._x86reduce
 
 
     # return assembly syntax.
     @property
     def syntax(self):
         return self._syntax
 
 
     # syntax setter: modify assembly syntax.
     @syntax.setter
     def syntax(self, style):
         status = _cs.cs_option(self.csh, CS_OPT_SYNTAX, style)
         if status != CS_ERR_OK:
             raise CsError(status)
         # save syntax
         self._syntax = style
 
 
     # return current skipdata status
     @property
     def skipdata(self):
         return self._skipdata
 
 
     # setter: modify skipdata status
     @skipdata.setter
     def skipdata(self, opt):
         if opt == False:
             status = _cs.cs_option(self.csh, CS_OPT_SKIPDATA, CS_OPT_OFF)
         else:
             status = _cs.cs_option(self.csh, CS_OPT_SKIPDATA, CS_OPT_ON)
         if status != CS_ERR_OK:
             raise CsError(status)
 
         # save this option
         self._skipdata = opt
 
 
     @property
     def skipdata_setup(self):
-        return
+        return (self._skipdata_mnem,) + self._skipdata_cb
 
 
     @skipdata_setup.setter
     def skipdata_setup(self, opt):
         _skipdata_opt = _cs_opt_skipdata()
         _mnem, _cb, _ud = opt
         _skipdata_opt.mnemonic = _mnem.encode()
-        _skipdata_opt.callback = CS_SKIPDATA_CALLBACK(_cb)
+        _skipdata_opt.callback = CS_SKIPDATA_CALLBACK(_cb or 0)
         _skipdata_opt.user_data = ctypes.cast(_ud, ctypes.c_void_p)
         status = _cs.cs_option(self.csh, CS_OPT_SKIPDATA_SETUP, ctypes.cast(ctypes.byref(_skipdata_opt), ctypes.c_void_p))
         if status != CS_ERR_OK:
             raise CsError(status)
 
-        self._skipdata_opt = _skipdata_opt
+        self._skipdata_mnem = _mnem
+        self._skipdata_cb = (_cb, _ud)
+
+
+    @property
+    def skipdata_mnem(self):
+        return self._skipdata_mnem
+
+
+    @skipdata_mnem.setter
+    def skipdata_mnem(self, mnem):
+        self.skipdata_setup = (mnem,) + self._skipdata_cb
+
+
+    @property
+    def skipdata_callback(self):
+        return self._skipdata_cb
+
+
+    @skipdata_callback.setter
+    def skipdata_callback(self, val):
+        if not isinstance(val, tuple):
+            val = (val, None)
+        func, data = val
+        self.skipdata_setup = (self._skipdata_mnem, func, data)
 
 
     # customize instruction mnemonic
     def mnemonic_setup(self, id, mnem):
         _mnem_opt = _cs_opt_mnem()
         _mnem_opt.id = id
         if mnem:
             _mnem_opt.mnemonic = mnem.encode()
         else:
             _mnem_opt.mnemonic = mnem
         status = _cs.cs_option(self.csh, CS_OPT_MNEMONIC, ctypes.cast(ctypes.byref(_mnem_opt), ctypes.c_void_p))
         if status != CS_ERR_OK:
             raise CsError(status)
 
 
     # check to see if this engine supports a particular arch,
     # or diet mode (depending on @query).
     def support(self, query):
         return cs_support(query)
 
 
     # is detail mode enable?
     @property
     def detail(self):
         return self._detail
 
 
     # modify detail mode.
     @detail.setter
     def detail(self, opt):  # opt is boolean type, so must be either 'True' or 'False'
         if opt == False:
             status = _cs.cs_option(self.csh, CS_OPT_DETAIL, CS_OPT_OFF)
         else:
             status = _cs.cs_option(self.csh, CS_OPT_DETAIL, CS_OPT_ON)
         if status != CS_ERR_OK:
             raise CsError(status)
         # save detail
         self._detail = opt
 
 
     # is detail mode enable?
     @property
     def imm_unsigned(self):
         return self._imm_unsigned
 
 
     # modify detail mode.
     @imm_unsigned.setter
     def imm_unsigned(self, opt):  # opt is boolean type, so must be either 'True' or 'False'
         if opt == False:
             status = _cs.cs_option(self.csh, CS_OPT_UNSIGNED, CS_OPT_OFF)
         else:
             status = _cs.cs_option(self.csh, CS_OPT_UNSIGNED, CS_OPT_ON)
         if status != CS_ERR_OK:
             raise CsError(status)
         # save detail
         self._imm_unsigned = opt
 
 
     # return disassembly mode of this engine.
     @property
     def mode(self):
         return self._mode
 
 
     # modify engine's mode at run-time.
     @mode.setter
     def mode(self, opt):  # opt is new disasm mode, of int type
         status = _cs.cs_option(self.csh, CS_OPT_MODE, opt)
         if status != CS_ERR_OK:
             raise CsError(status)
         # save mode
         self._mode = opt
 
     # get the last error code
     def errno(self):
         return _cs.cs_errno(self.csh)
 
     # get the register name, given the register ID
     def reg_name(self, reg_id, default=None):
         if self._diet:
             # Diet engine cannot provide register name
             raise CsError(CS_ERR_DIET)
 
         return _ascii_name_or_default(_cs.cs_reg_name(self.csh, reg_id), default)
 
     # get the instruction name, given the instruction ID
     def insn_name(self, insn_id, default=None):
         if self._diet:
             # Diet engine cannot provide instruction name
             raise CsError(CS_ERR_DIET)
 
         return _ascii_name_or_default(_cs.cs_insn_name(self.csh, insn_id), default)
 
     # get the group name
     def group_name(self, group_id, default=None):
         if self._diet:
             # Diet engine cannot provide group name
             raise CsError(CS_ERR_DIET)
 
         return _ascii_name_or_default(_cs.cs_group_name(self.csh, group_id), default)
 
     # Disassemble binary & return disassembled instructions in CsInsn objects
     def disasm(self, code, offset, count=0):
         all_insn = ctypes.POINTER(_cs_insn)()
         '''if not _python2:
             print(code)
             code = code.encode()
             print(code)'''
         # Hack, unicorn's memory accessors give you back bytearrays, but they
         # cause TypeErrors when you hand them into Capstone.
         if isinstance(code, bytearray):
             code = bytes(code)
         res = _cs.cs_disasm(self.csh, code, len(code), offset, count, ctypes.byref(all_insn))
         if res > 0:
             try:
                 for i in range(res):
                     yield CsInsn(self, all_insn[i])
             finally:
                 _cs.cs_free(all_insn, res)
         else:
             status = _cs.cs_errno(self.csh)
             if status != CS_ERR_OK:
                 raise CsError(status)
             return
             yield
 
 
     # Light function to disassemble binary. This is about 20% faster than disasm() because
     # unlike disasm(), disasm_lite() only return tuples of (address, size, mnemonic, op_str),
     # rather than CsInsn objects.
     def disasm_lite(self, code, offset, count=0):
         if self._diet:
             # Diet engine cannot provide @mnemonic & @op_str
             raise CsError(CS_ERR_DIET)
 
         all_insn = ctypes.POINTER(_cs_insn)()
         res = _cs.cs_disasm(self.csh, code, len(code), offset, count, ctypes.byref(all_insn))
         if res > 0:
             try:
                 for i in range(res):
                     insn = all_insn[i]
                     yield (insn.address, insn.size, insn.mnemonic.decode('ascii'), insn.op_str.decode('ascii'))
             finally:
                 _cs.cs_free(all_insn, res)
         else:
             status = _cs.cs_errno(self.csh)
             if status != CS_ERR_OK:
                 raise CsError(status)
             return
             yield
 
 
 # print out debugging info
diff --git a/bindings/python/test_skipdata.py b/bindings/python/test_skipdata.py
index eae9c62b..5a5b755b 100755
--- a/bindings/python/test_skipdata.py
+++ b/bindings/python/test_skipdata.py
@@ -26,33 +26,41 @@ def testcb(buffer, size, offset, userdata):
 # ## Test class Cs
 def test_class():
     for (arch, mode, code, comment, syntax) in all_tests:
         print('*' * 16)
         print("Platform: %s" %comment)
         print("Code: %s" % to_hex(code))
         print("Disasm:")
 
         try:
             md = Cs(arch, mode)
 
             if syntax is not None:
                 md.syntax = syntax
 
             md.skipdata = True
 
-            # Default "data" instruction's name is ".byte". To rename it to "db", just uncomment
+            # Default "data" instruction's name is ".byte". To rename it to "db", just use
             # the code below.
-            # md.skipdata_setup = ("db", None, None)
+            md.skipdata_setup = ("db", None, None)
             # NOTE: This example ignores SKIPDATA's callback (first None) & user_data (second None)
-
-            # To customize the SKIPDATA callback, uncomment the line below.
-            # md.skipdata_setup = (".db", testcb, None)
+            # Can also use dedicated setter
+            md.skipdata_mnem = 'db'
+
+            # To customize the SKIPDATA callback, use the line below.
+            md.skipdata_setup = (".db", testcb, None)
+            # Or use dedicated setter with custom parameter
+            md.skipdata_callback = (testcb, 42)
+            # Or provide just a function
+            md.skipdata_callback = testcb
+            # Note that reading this property will always return a tuple
+            assert md.skipdata_callback == (testcb, None)
 
             for insn in md.disasm(code, 0x1000):
                 #bytes = binascii.hexlify(insn.bytes)
                 #print("0x%x:\t%s\t%s\t// hex-code: %s" %(insn.address, insn.mnemonic, insn.op_str, bytes))
                 print("0x%x:\t%s\t%s" % (insn.address, insn.mnemonic, insn.op_str))
 
             print("0x%x:" % (insn.address + insn.size))
             print
         except CsError as e:
             print("ERROR: %s" % e)
diff --git a/docs/capstone-logo.png b/docs/capstone-logo.png
new file mode 100644
index 00000000..610dc71b
Binary files /dev/null and b/docs/capstone-logo.png differ
diff --git a/include/capstone/arm.h b/include/capstone/arm.h
index 934e951d..21ba5be5 100644
--- a/include/capstone/arm.h
+++ b/include/capstone/arm.h
@@ -378,11 +378,13 @@ typedef enum arm_reg {
 /// Instruction's operand referring to memory
 /// This is associated with ARM_OP_MEM operand type above
 typedef struct arm_op_mem {
 	arm_reg base;	///< base register
 	arm_reg index;	///< index register
 	int scale;	///< scale for index register (can be 1, or -1)
 	int disp;	///< displacement/offset value
-	int lshift;	///< left-shift on index register, or 0 if irrelevant.
+	/// left-shift on index register, or 0 if irrelevant
+	/// NOTE: this value can also be fetched via operand.shift.value
+	int lshift;
 } arm_op_mem;
 
 /// Instruction operand
