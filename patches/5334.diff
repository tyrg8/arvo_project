commit dda738449141510d7a5da28eae52b47c993f90f2
Author: Dirk Lemstra <dirk@git.imagemagick.org>
Date:   Sun Feb 4 11:00:27 2018 +0100

    Fixed builds that don't link zlib.

diff --git a/MagickCore/blob.c b/MagickCore/blob.c
index a05065c02..5593a0f5b 100644
--- a/MagickCore/blob.c
+++ b/MagickCore/blob.c
@@ -2675,105 +2675,109 @@ MagickExport MagickBooleanType IsBlobExempt(const Image *image)
 {
   assert(image != (const Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
   return(image->blob->exempt);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   I s B l o b S e e k a b l e                                               %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  IsBlobSeekable() returns true if the blob is seekable.
 %
 %  The format of the IsBlobSeekable method is:
 %
 %       MagickBooleanType IsBlobSeekable(const Image *image)
 %
 %  A description of each parameter follows:
 %
 %    o image: the image.
 %
 */
 MagickExport MagickBooleanType IsBlobSeekable(const Image *image)
 {
   BlobInfo
     *magick_restrict blob_info;
 
   assert(image != (const Image *) NULL);
   assert(image->signature == MagickCoreSignature);
   if (image->debug != MagickFalse)
     (void) LogMagickEvent(TraceEvent,GetMagickModule(),"%s",image->filename);
   blob_info=image->blob;
   switch (blob_info->type)
   {
     case BlobStream:
       return(MagickTrue);
     case FileStream:
     {
       int
         status;
 
       if (blob_info->file_info.file == (FILE *) NULL)
         return(MagickFalse);
       status=fseek(blob_info->file_info.file,0,SEEK_CUR);
       return(status == -1 ? MagickFalse : MagickTrue);
     }
     case ZipStream:
     {
+#if defined(MAGICKCORE_ZLIB_DELEGATE)
       int
         status;
 
       if (blob_info->file_info.gzfile == (gzFile) NULL)
         return(MagickFalse);
       status=gzseek(blob_info->file_info.gzfile,0,SEEK_CUR);
       return(status == -1 ? MagickFalse : MagickTrue);
+#else
+      break;
+#endif
     }
     case UndefinedStream:
     case BZipStream:
     case FifoStream:
     case PipeStream:
     case StandardStream:
       return(MagickFalse);
     case CustomStream:
     {
       if ((blob_info->custom_stream->seeker != (CustomStreamSeeker) NULL) &&
           (blob_info->custom_stream->teller != (CustomStreamTeller) NULL))
         return(MagickTrue);
       break;
     }
     default:
       break;
   }
   return(MagickFalse);
 }
 
 /*
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %   I s B l o b T e m p o r a r y                                             %
 %                                                                             %
 %                                                                             %
 %                                                                             %
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 %
 %  IsBlobTemporary() returns true if the blob is temporary.
 %
 %  The format of the IsBlobTemporary method is:
 %
 %       MagickBooleanType IsBlobTemporary(const Image *image)
 %
 %  A description of each parameter follows:
 %
 %    o image: the image.
 %
 */
